         TITLE 'IKJEGIO - I/O SERVICE MODULE FOR VS2-R2 OF TSO TEST    *
                        '
         COPY IKJEGSIO
IKJEGIO  CSECT ,                                                   0002
@PROLOG  STM   @14,@12,12(@13)                                     0002
         BALR  @03,0                                               0002
@PSTART  LA    @07,4095(,@03)                                      0002
         LA    @08,4095(,@07)                                      0002
         USING @PSTART,@03                                         0002
         USING @PSTART+4095,@07                                    0002
         USING @PSTART+8190,@08                                    0002
         L     @00,@SIZDATD                                        0002
         GETMAIN  R,LV=(0)
         LR    @12,@01                                             0002
         USING @DATD,@12                                           0002
         ST    @13,@SA00001+4                                      0002
         LM    @00,@01,20(@13)                                     0002
         ST    @12,8(,@13)                                         0002
         LR    @13,@12                                             0002
         USING TCOMTAB,TCOMPTR         ESTABLISH BASE REGISTER FOR TCOM
*   RTNCODE=0;                      /* INITIALIZE THE RTN CODE-OK    */
         SLR   RTNCODE,RTNCODE                                     0072
*   IOPARMS=PRMREG1;                /* STORE THE ADDRESS TO PARMS    */
         ST    PRMREG1,IOPARMS                                     0073
*/********************************************************************/
*/*                                                                  */
*/*                D  (NO,,YES,TESTPARM)                           0074
*/*                   IS THERE AN ABEND IN PROCESS ?                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  0074
*   IF TSTFLGS4(4)='1'B×TSTFLGS4(5)='1'B×SIOMODID=16 THEN          0074
         TM    TSTFLGS4,B'00011000'                                0074
         BNZ   @RT00074                                            0074
         L     @14,IOPARMS                                         0074
         CLI   SIOMODID(@14),16                                    0074
         BE    @RT00074                                            0074
*     GO TO NOESTAE;                /* IF ON DON'T ISSUE ESTAE       */
*/********************************************************************/
*/*                                                                  */
*/*                P  (,,ABEND,RETRY)                              0076
*/*                   ISSUE AN ESTAE MACRO                           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0076
*   PRMREG1=REGSAVE5;               /* PICK UP ADDRESS SAVE AREA     */
         L     PRMREG1,REGSAVE5                                    0076
*   GENERATE(STM 0,14,0(1));        /* SAVE REGISTER INCASE RETRY    */
         STM 0,14,0(1)
*   ESTAEPRM='00'X;                 /* ZERO THE PARM LIST            */
         XC    ESTAEPRM+1(15),ESTAEPRM+1                           0078
         MVI   ESTAEPRM,X'00'                                      0078
*   ESTAEADD=TSTSTAE;               /* PUT STA ADDRESS IN REGISTER   */
         L     ESTAEADD,TSTSTAE                                    0079
*   GENERATE;                                                      0080
         ESTAE (2),CT,PARAM=IKJEGSPL,XCTL=NO,MF=(E,ESTAEPRM)
*   IF RTNCODE^=0 THEN              /* SEE IF ESTAE WAS SUCCESSFUL   */
         LTR   RTNCODE,RTNCODE                                     0081
         BZ    @RF00081                                            0081
*     DO;                                                          0082
*       GENERATE(STC  15,TSTESTRC); /* SAVE RETURN CODE FOR MAINL'E  */
         STC  15,TSTESTRC
*       RTNCODE=24;                 /* INDICATE TO CALLER PROBLEM    */
         LA    RTNCODE,24                                          0084
*       GO TO ENDIO;                /* RETURN TO CALLER              */
         B     ENDIO                                               0085
*     END;                                                         0086
*                                                                  0086
*/********************************************************************/
*/*                                                                  */
*/*TESTPARM:       D  (NO,,YES,%CONT1)                             0087
*/*                   IS THE SERVICE REQ'T NUMBER WRONG ?            */
*/*                S  (,END)                                       0087
*/*                   CALL MAG-DATA: CALL REQUESTED                0087
*/*                   ROUTINE DATA, SVCERR,MSG,PTGT                  */
*/*%CONT1:         S  (,END)                                       0087
*/*                   CALL BADPARM: ISSUE BAD PARM MESSAGE           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0087
*NOESTAE:                                                          0087
*   MSGCSECT=ADDR(ATTACHIO);        /* GET ATTACH PARMS ADDR INTO  0087
*                                      REGISTER TO INCREASE EFF      */
@RF00081 DS    0H                                                  0087
NOESTAE  L     MSGCSECT,@CA00152                                   0087
*   IF SIOTYPE=1 THEN               /* SEE IF REQUEST IS FOR DATA    */
         L     @14,IOPARMS                                         0088
         CLI   SIOTYPE(@14),1                                      0088
         BNE   @RF00088                                            0088
*     CALL DATA;                    /* CALL DATA PROCESSOR IF SO     */
         BAL   @14,DATA                                            0089
*   ELSE                                                           0090
*     IF SIOTYPE=4 THEN             /* SEE IF REQUEST IS FOR PTGT    */
         B     @RC00088                                            0090
@RF00088 L     @14,IOPARMS                                         0090
         CLI   SIOTYPE(@14),4                                      0090
         BNE   @RF00090                                            0090
*       CALL PTGT;                  /* CALL PTGT PROCESSOR IF SO     */
         BAL   @14,PTGT                                            0091
*     ELSE                                                         0092
*       IF SIOTYPE=2 THEN           /* SEE IF REQUEST IS FOR MSG     */
         B     @RC00090                                            0092
@RF00090 L     @14,IOPARMS                                         0092
         CLI   SIOTYPE(@14),2                                      0092
         BNE   @RF00092                                            0092
*         CALL MSG;                 /* CALL MSG PROCESSOR IF SO      */
         BAL   @14,MSG                                             0093
*       ELSE                                                       0094
*         IF SIOTYPE=3 THEN         /* SEE IF REQUEST IS FOR   SVCERR*/
         B     @RC00092                                            0094
@RF00092 L     @14,IOPARMS                                         0094
         CLI   SIOTYPE(@14),3                                      0094
         BNE   @RF00094                                            0094
*           CALL SVCERR;            /* CALL SVCERR PROCESSOR IF SO   */
         BAL   @14,SVCERR                                          0095
*         ELSE                      /* IF NO MATCH YET THEN ERROR    */
*           CALL BADPARM;           /* SERVICE NUM IN ERROR BY CALL  */
         B     @RC00094                                            0096
@RF00094 BAL   @14,BADPARM                                         0096
*/********************************************************************/
*/*                                                                  */
*/*END:            P  PREPARE FOR RETURN TO CALLER                   */
*/*                R  RETURN TO CALLER                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0097
*ENDIO:                                                            0097
*   IF TSTFLGS4(4)^='1'B×TSTFLGS4(5)^='1'B×SIOMODID^=16 THEN       0097
@RC00094 DS    0H                                                  0097
@RC00092 DS    0H                                                  0097
@RC00090 DS    0H                                                  0097
@RC00088 DS    0H                                                  0097
ENDIO    TM    TSTFLGS4,B'00011000'                                0097
         BNO   @RT00097                                            0097
         L     @14,IOPARMS                                         0097
         CLI   SIOMODID(@14),16                                    0097
         BE    @RF00097                                            0097
@RT00097 DS    0H                                                  0098
*     DO;                                                          0098
*       RTNSAVE=RTNCODE;            /* TRANSFER RETURN CODE          */
         LR    RTNSAVE,RTNCODE                                     0099
*       GENERATE(ESTAE  0);         /* REMOVE ESTAE                  */
         ESTAE  0
*       RTNCODE=RTNSAVE;            /* TRANSFER RETURN CODE          */
         LR    RTNCODE,RTNSAVE                                     0101
*     END;                                                         0102
*   RETURN CODE(RTNCODE);           /* RETURN TO CALLING TEST MOD    */
@RF00097 LR    @06,@15                                             0103
         L     @13,4(,@13)                                         0103
         L     @00,@SIZDATD                                        0103
         LR    @01,@12                                             0103
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@06                                             0103
         L     @14,12(,@13)                                        0103
         LM    @00,@12,20(@13)                                     0103
         BR    @14                                                 0103
*                                                                  0104
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE RETRY ROUTINE.                 */
*/*    IT WILL BE INVOKED IF THE MODULE PROGRAM CHECKS               */
*/*    THE PRIMARY FUNCTIONS ARE:                                    */
*/*                                                                  */
*/*        1.  REESTABLISH MODULE ADDRESSABILITY                     */
*/*        2.  REMOVE SCB AND SET THE RETURN CODE TO 20              */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*RETRY:          P  TURN ON RETRY SW ISSUE ESTAE ZERO & RTNCODE=20 */
*/*                R  RETURN TO CALLER                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0104
*RETRY:                                                            0104
*   PROCEDURE OPTIONS(NOSAVEAREA,DONTSAVE);                        0104
*                                                                  0104
RETRY    DS    0H                                                  0105
*/********************************************************************/
*/*                                                                  */
*/* THE FOLLOWING GENERATE SECTION WILL REGAIN MODULE ADDRESSABILITY */
*/*                                                                  */
*/********************************************************************/
*                                                                  0105
*   GENERATE;                                                      0105
         L     4,16                    PICK UP CVT PTR
         USING CVTDSECT,4              ESTABLISH ADDRESSABILITY
         L     4,CVTTCBP               PICK UP TCB ADDRESS
         L     4,4(4)                  CURRENT TCB PTR
         DROP  4
         USING TCB,4                   ESTABLISH ADDRESSABILITY
         L     9,TCBTRN                PICK UP ADDRESS OF TCOMTAB
         OI    TSTFLGS4,B'00001000'    TURN ON RETRY SWITCH
         L     1,REGSAVE5              PICK UP REG SAVE AREA ADDR
         LM    0,14,0(1)               RESTORE ORIGINAL REGISTERS
         DROP  4
*   RTNCODE=20;                     /* SET THE RETURN CODE - RETRY   */
         LA    RTNCODE,20                                          0106
*   TSTFLGS4(5)='0'B;               /* TURN OFF THE RETRY BIT        */
         NI    TSTFLGS4,B'11110111'                                0107
*   RETURN TO ENDIO CODE(RTNCODE);  /* GO TO THE IO EXIT ROUTINE     */
         LA    @14,ENDIO                                           0108
@EL00002 DS    0H                                                  0108
@EF00002 DS    0H                                                  0108
@ER00002 BR    @14                                                 0108
*   END RETRY;                                                     0109
*                                                                  0110
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE MESSAGE ROUTINE.               */
*/*    IT WILL BE INVOKED IF THE USERS HAS REQUESTED 'MSG' SERVICE.  */
*/*                                                                  */
*/*        1.  DETERMINE WHETHER THE USER HAS REQUESTED ONE          */
*/*            OR TWO LEVEL MESSAGE BE ISSUED.                       */
*/*        2.  FIND THE MESSAGE AND PREPARE IT FOR ISSUANCE          */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*MSGROUT:        E  MESSAGE ROUTINE                                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0110
*MSG:                                                              0110
*   PROCEDURE;                                                     0110
*                                                                  0110
MSG      STM   @14,@12,@SA00003                                    0110
*/********************************************************************/
*/*                                                                  */
*/*                P  FIND AND PREPARE FIRST LEVEL MESSAGE           */
*/*                S  CALL BADPARM: IF ERROR IN PARMS                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0111
*   IF SIO1STMS>0&SIO1STMS<100 THEN /* TEST FOR MSG BEING IN 1ST     */
         L     @14,IOPARMS                                         0111
         L     @14,SIO1STMS(,@14)                                  0111
         LTR   @14,@14                                             0111
         BNP   @RF00111                                            0111
         CH    @14,@CH00256                                        0111
         BNL   @RF00111                                            0111
*     DO;                                                          0112
*       INDXTAB=MSG99PTR;           /* TABLE IF SO SET UP ADDRESS    */
         L     @06,MSG99PTR(,MSGCSECT)                             0113
         ST    @06,INDXTAB                                         0113
*       IF AMTINDX<SIO1STMS THEN    /* LOOK AT ACTUAL TAB LEN FOR    */
         C     @14,AMTINDX(,@06)                                   0114
         BNH   @RF00114                                            0114
*         DO;                       /* POSSIBLE BAD NUMBER PASSED    */
*           CALL BADPARM;           /* IF MSG NUM EXCEEDS LEN-ERROR  */
         BAL   @14,BADPARM                                         0116
*           GO TO EXITMSG;          /* BRANCH TO END OF PROCEDURE    */
         B     EXITMSG                                             0117
*         END;                                                     0118
*     END;                                                         0119
*   ELSE                                                           0120
*     IF SIO1STMS>0&SIO1STMS<200 THEN/* TEST FOR MSG IN OTH TB       */
         B     @RC00111                                            0120
@RF00111 L     @14,IOPARMS                                         0120
         L     @14,SIO1STMS(,@14)                                  0120
         LTR   @14,@14                                             0120
         BNP   @RF00120                                            0120
         CH    @14,@CH00258                                        0120
         BNL   @RF00120                                            0120
*       DO;                                                        0121
*         INDXTAB=MSG199PT;         /* TABLE IF SO SET UP ADDRESS    */
         L     @06,MSG199PT(,MSGCSECT)                             0122
         ST    @06,INDXTAB                                         0122
*         IF AMTINDX<SIO1STMS THEN  /* LOOK AT ACTUAL TAB LEN FOR    */
         C     @14,AMTINDX(,@06)                                   0123
         BNH   @RF00123                                            0123
*           DO;                     /* POSSIBLE BAD NUMBER PASSED    */
*             CALL BADPARM;         /* IF MSG NUM EXCEEDS LEN-ERROR  */
         BAL   @14,BADPARM                                         0125
*             GO TO EXITMSG;        /* BRANCH TO END OF PROCEDURE    */
         B     EXITMSG                                             0126
*           END;                                                   0127
*         SIO1STMS=SIO1STMS-99;     /* ADJUST TO TABLE VALUES        */
@RF00123 L     @14,IOPARMS                                         0128
         L     @06,SIO1STMS(,@14)                                  0128
         SH    @06,@CH00259                                        0128
         ST    @06,SIO1STMS(,@14)                                  0128
*       END;                                                       0129
*     ELSE                                                         0130
*       DO;                                                        0130
         B     @RC00120                                            0130
@RF00120 DS    0H                                                  0131
*         CALL BADPARM;             /* IF MSG NOT IN TABLE ERROR     */
         BAL   @14,BADPARM                                         0131
*         GO TO EXITMSG;            /* BRANCH TO END OF PROCEDURE    */
         B     EXITMSG                                             0132
*       END;                                                       0133
*   MSGPTR=INDXPTR(SIO1STMS);       /* ESTAB. ADDRESSABILITY TO MSG  */
@RC00120 DS    0H                                                  0134
@RC00111 L     @14,IOPARMS                                         0134
         L     @14,SIO1STMS(,@14)                                  0134
         SLA   @14,2                                               0134
         L     @06,INDXTAB                                         0134
         L     @14,INDXPTR-4(@14,@06)                              0134
         ST    @14,MSGPTR                                          0134
*   IF INDISP(1)='FF'X THEN         /* TEST IF NULL ENTRY            */
         CLI   INDISP(@14),255                                     0135
         BNE   @RF00135                                            0135
*     DO;                                                          0136
*       CALL BADPARM;               /* CALL FOR ERROR PROC BAD PRMS  */
         BAL   @14,BADPARM                                         0137
*       GO TO EXITMSG;              /* BRANCH TO EXIT ROUTINE        */
         B     EXITMSG                                             0138
*     END;                                                         0139
*   MESSAGE(1)=LOCALMSG;            /* MOVE MESSAGE INTO MYWK AREA   */
@RF00135 MVI   MESSAGE+93,C' '                                     0140
         MVC   MESSAGE+94(10),MESSAGE+93                           0140
         L     @14,MSGPTR                                          0140
         MVC   MESSAGE(93),LOCALMSG(@14)                           0140
*   SIO1STMS=ADDR(MESSAGE(1));      /* STORE ADDRESS OF MSG IN P.L.  */
         L     @14,IOPARMS                                         0141
         LA    @06,MESSAGE                                         0141
         ST    @06,SIO1STMS(,@14)                                  0141
*/********************************************************************/
*/*                                                                  */
*/*                P  PREPARE TO PROCESS FIRST LEVEL INSERTS         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0142
*   LEV=1;                          /* INDICATE THAT THIS IS 1ST LV  */
         MVI   LEV,X'01'                                           0142
*   SIOTYPPT=ADDR(SIOTYP11);        /* SET ADDRESSABILITY TO TYPES   */
         LA    @06,SIOTYP11(,@14)                                  0143
         ST    @06,SIOTYPPT                                        0143
*   SIOINTPT=ADDR(SIO11PTR);        /* SET ADDRESSABILITY TO INST    */
         LA    @14,SIO11PTR(,@14)                                  0144
         ST    @14,SIOINTPT                                        0144
*/********************************************************************/
*/*                                                                  */
*/*                S  CALL INSERT R.: PROCESS INSERTS                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0145
*   CALL INSERT;                    /* CALL INSERT PROCESSOR         */
         BAL   @14,INSERT                                          0145
*   IF RTNCODE^=0 THEN              /* TEST FOR SUCCESSFUL CALL      */
         SLR   @14,@14                                             0146
         CR    RTNCODE,@14                                         0146
         BNE   @RT00146                                            0146
*     GOTO EXITMSG;                 /* BRANCH TO END OF PROCEDURE    */
*/********************************************************************/
*/*                                                                  */
*/*                D  (YES,,NO,ONELEV)                             0148
*/*                   IS THERE A SECOND LEVEL MSG ?                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0148
*   IF SIO2NDMS^=0 THEN             /* TEST FOR PRESENTS OF 2ND LEV  */
         L     @06,IOPARMS                                         0148
         L     @06,SIO2NDMS(,@06)                                  0148
         CR    @06,@14                                             0148
         BE    @RF00148                                            0148
*     DO;                                                          0149
*       INDXTAB=SECONDPT;           /* ESTAB ADDRESSABILITY TO TAB   */
         L     @14,SECONDPT(,MSGCSECT)                             0150
         ST    @14,INDXTAB                                         0150
*       MESSAGE(1,LENMSG(1))='+';   /* INDICATE TO USER TWO LEVELS   */
         LH    @11,LENMSG                                          0151
         LA    @10,MESSAGE-1(@11)                                  0151
         MVI   0(@10),C'+'                                         0151
*       IF SIO2NDMS<200×SIO2NDMS>AMTINDX THEN/* TEST FOR VAL #       */
         CH    @06,@CH00258                                        0152
         BL    @RT00152                                            0152
         C     @06,AMTINDX(,@14)                                   0152
         BNH   @RF00152                                            0152
@RT00152 DS    0H                                                  0153
*         DO;                                                      0153
*           CALL BADPARM;           /* CALL FOR ERROR PROC BAD PARM  */
         BAL   @14,BADPARM                                         0154
*           GO TO EXITMSG;          /* BRANCH TO END OF ROUTINE      */
         B     EXITMSG                                             0155
*         END;                                                     0156
*                                                                  0156
*/********************************************************************/
*/*                                                                  */
*/*SECOND:         P  FIND AND PREPARE SECOND LEVEL MESSAGE          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0157
*       SIO2NDMS=SIO2NDMS-199;      /* ADJUST TO TABLE VALUES        */
@RF00152 L     @14,IOPARMS                                         0157
         L     @06,SIO2NDMS(,@14)                                  0157
         SH    @06,@CH00263                                        0157
         ST    @06,SIO2NDMS(,@14)                                  0157
*       MSGPTR=INDXPTR(SIO2NDMS);   /* ESTAB ADDRESSABILITY TO MSG   */
         SLA   @06,2                                               0158
         L     @14,INDXTAB                                         0158
         L     @14,INDXPTR-4(@06,@14)                              0158
         ST    @14,MSGPTR                                          0158
*       IF INDISP(1)='FF'X THEN     /* TEST IF NULL ENTRY            */
         CLI   INDISP(@14),255                                     0159
         BNE   @RF00159                                            0159
*         DO;                                                      0160
*           CALL BADPARM;           /* CALL FOR ERROR PROC BAD PRMS  */
         BAL   @14,BADPARM                                         0161
*           GO TO EXITMSG;          /* BRANCH TO EXIT ROUTINE        */
         B     EXITMSG                                             0162
*         END;                                                     0163
*       MESSAGE(2)='00'X;           /* CLEAR CORE FOR SECOND MSG     */
@RF00159 XC    MESSAGE+105(103),MESSAGE+105                        0164
         MVI   MESSAGE+104,X'00'                                   0164
*       WKMSGID(2)=WKMSGID(1);      /* MOVE FIRST LEVEL NUMBER       */
         MVC   WKMSGID+104(9),WKMSGID                              0165
*       WKMSGTXT(2)=TEXTMSG;        /* MOVE IN THE TEXT PORTION      */
         MVI   WKMSGTXT+193,C' '                                   0166
         MVI   WKMSGTXT+194,C' '                                   0166
         L     @14,MSGPTR                                          0166
         MVC   WKMSGTXT+104(89),TEXTMSG(@14)                       0166
*       LENMSG(2)=LENLOCAL;         /* MOVE IN MESSAGE LENGTH        */
         MVC   LENMSG+104(2),LENLOCAL(@14)                         0167
*       SIO2NDMS=ADDR(MESSAGE(2));  /* STORE ADDRESS OF MSG IN P.L.  */
         L     @14,IOPARMS                                         0168
         LA    @06,MESSAGE+104                                     0168
         ST    @06,SIO2NDMS(,@14)                                  0168
*/********************************************************************/
*/*                                                                  */
*/*                P  PREPARE TO PROCESS SECOND LEVEL INSERTS        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0169
*       LEV=2;                      /* INDICATE THAT THIS IS 2ND LV  */
         MVI   LEV,X'02'                                           0169
*       SIOTYPPT=ADDR(SIOTYP21);    /* SET ADDRESSABILITY TO TYPES   */
         LA    @06,SIOTYP21(,@14)                                  0170
         ST    @06,SIOTYPPT                                        0170
*       SIOINTPT=ADDR(SIO21PTR);    /* SET ADDRESSABILITY TO INST    */
         LA    @14,SIO21PTR(,@14)                                  0171
         ST    @14,SIOINTPT                                        0171
*/********************************************************************/
*/*                                                                  */
*/*                S  CALL INSERT R.: PROCESS INSERTS                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0172
*       CALL INSERT;                /* CALL INSERT PROCESSOR         */
         BAL   @14,INSERT                                          0172
*       IF RTNCODE^=0 THEN          /* TEST FOR SUCCESSFUL CALL      */
         LTR   RTNCODE,RTNCODE                                     0173
         BNZ   @RT00173                                            0173
*         GOTO EXITMSG;             /* BRANCH TO END OF PROCEDURE    */
*/********************************************************************/
*/*                                                                  */
*/*                S   (,MSGEND)                                   0175
*/*                    CALL TERMOUT:  ISSUE 2 LEVEL MSG              */
*/*                                                                  */
*/********************************************************************/
*                                                                  0175
*       CALL TERMOUT;               /* CALL PUTLINE FOR MULTILEVEL   */
         BAL   @14,TERMOUT                                         0175
*     END;                                                         0176
*                                                                  0176
*/********************************************************************/
*/*                                                                  */
*/*ONELEV:         S   CALL TERMOUT: ISSUE SINGLE LEVEL MSG          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0177
*   ELSE                                                           0177
*     CALL TERMOUT;                 /* CALL PUTLINE FOR SINGLELEVEL  */
         B     @RC00148                                            0177
@RF00148 BAL   @14,TERMOUT                                         0177
*/********************************************************************/
*/*                                                                  */
*/*MSGEND:         R  RETURN TO IO CONTROLLER                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0178
*EXITMSG:                           /* LABEL TO BRANCH TO END        */
*   RETURN CODE(RTNCODE);           /* RETURN TO DRIVER WITH CODE    */
@RC00148 DS    0H                                                  0178
EXITMSG  L     @14,@SA00003                                        0178
         LM    @00,@12,@SA00003+8                                  0178
         BR    @14                                                 0178
*   END MSG;                                                       0179
*                                                                  0180
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE INSERT ROUTINE.                */
*/*    IT WILL BE INVOKED IF THE USERS HAS REQUESTED 'MSG' SERVICE.  */
*/*                                                                  */
*/*        1.  DETERMINE WHICH TYPE INSERT TO BE PREPARED AND        */
*/*            INVOKE APPROPRIATE ROUTINE.                           */
*/*        2.  KEEP TRACK OF INSERT BEING PROCESSED.                 */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*INSTPROC:       E  INSERT PROCESSOR ROUTINE                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0180
*INSERT:                                                           0180
*   PROCEDURE;                                                     0180
*                                                                  0180
INSERT   STM   @14,@12,@SA00004                                    0180
*/********************************************************************/
*/*                                                                  */
*/*                P  INITIALIZE TO PROCESS INSERTS                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0181
*   DCL                                                            0181
*     TYPEINST FIXED(8);            /* TEMP VAR TO FIND TYPE         */
*   DO INSTCTR=1 TO 7;              /* SET UP LOOP COUNTER FOR 7     */
         LA    @14,1                                               0182
         ST    @14,INSTCTR                                         0182
@DL00182 DS    0H                                                  0183
*     IF LEV=1 THEN                 /* SEE IF INST OLD NUM IS 1ST    */
         CLI   LEV,1                                               0183
         BNE   @RF00183                                            0183
*       SIONUMI1=SIONUMI1+1;        /* INSERT AMOUNT OF INSERTS      */
         L     @14,IOPARMS                                         0184
         LA    @06,1                                               0184
         AL    @06,SIONUMI1(,@14)                                  0184
         ST    @06,SIONUMI1(,@14)                                  0184
*     ELSE                                                         0185
*       IF LEV=2 THEN               /* THE ONLY OTHER POSSIBILITY    */
         B     @RC00183                                            0185
@RF00183 CLI   LEV,2                                               0185
         BNE   @RF00185                                            0185
*         SIONUMI2=SIONUMI2+1;      /* INSERT AMOUNT OF INSERTS      */
         L     @14,IOPARMS                                         0186
         LA    @06,1                                               0186
         AL    @06,SIONUMI2(,@14)                                  0186
         ST    @06,SIONUMI2(,@14)                                  0186
*       ELSE                                                       0187
*         DO;                                                      0187
         B     @RC00185                                            0187
@RF00185 DS    0H                                                  0188
*           RTNCODE=4;              /* SOMEHOW AN ERR HAS HAPPENED   */
         LA    RTNCODE,4                                           0188
*           GO TO EXITINST;         /* BRANCH TO EXIT OF ROUTINE     */
         B     EXITINST                                            0189
*         END;                                                     0190
*                                                                  0190
*/********************************************************************/
*/*                                                                  */
*/*%CONT10:        D  (YES,,NO,EXITINST)                           0191
*/*                   ARE THERE INSERTS TO PROCESS ?                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  0191
*     IF INSTCTR>6 THEN             /* TEST IF MAXIMUM NUMBER        */
@RC00185 DS    0H                                                  0191
@RC00183 L     @14,INSTCTR                                         0191
         CH    @14,@CH00129                                        0191
         BH    @RT00191                                            0191
*       GO TO EXITINST;             /* BRANCH TO EXIT                */
*     TYPEINST=TYP(INSTCTR);        /* OBTAIN TYPE INSERT BY CALLER  */
         L     @06,SIOTYPPT                                        0193
         BCTR  @06,0                                               0193
         SLR   @11,@11                                             0193
         IC    @11,TYP(@14,@06)                                    0193
         STC   @11,TYPEINST                                        0193
*     IF TYPEINST=0 THEN            /* TEST FOR INSERT TO PROCESS    */
         CLI   TYPEINST,0                                          0194
         BE    @RT00194                                            0194
*       GO TO EXITINST;             /* BRANCH TO EXIT IF NONE        */
*     IF INDISP(INSTCTR)=0 THEN     /* TEST FOR ERROR NO DISP VALUE  */
         L     @06,MSGPTR                                          0196
         BCTR  @06,0                                               0196
         SLR   @11,@11                                             0196
         IC    @11,INDISP(@14,@06)                                 0196
         CH    @11,@CH00235                                        0196
         BNE   @RF00196                                            0196
*       DO;                                                        0197
*         CALL BADPARM;             /* ISSUE BAD PARM MESSAGE        */
         BAL   @14,BADPARM                                         0198
*         GO TO EXITINST;           /* GO TO EXIT INSERT             */
         B     EXITINST                                            0199
*       END;                                                       0200
*                                                                  0200
*/********************************************************************/
*/*                                                                  */
*/*%CONT11:        D  (YES,,NO,%CONT12)                            0201
*/*                   IS THIS INSERT "NUM" ?                         */
*/*                S  (,EXITINST)                                  0201
*/*                   CALL NUM INSERT: FORMAT INSERT OF FIXED INSERT */
*/*                                                                  */
*/********************************************************************/
*                                                                  0201
*     ELSE                                                         0201
*       IF TYPEINST=5 THEN          /* TEST TO SEE IF TYPE IS NUM    */
@RF00196 CLI   TYPEINST,5                                          0201
         BNE   @RF00201                                            0201
*         CALL INSTNUM;             /* IF SO INVOKE THE NUM ROUT.    */
         BAL   @14,INSTNUM                                         0202
*/********************************************************************/
*/*                                                                  */
*/*%CONT12:        D  (YES,,NO,%CONT13)                            0203
*/*                   IS THIS INSERT "APDE" ?                        */
*/*                S  (,EXITINST)                                  0203
*/*                   CALL APDE INSERT: FORMAT INSERT OF ADDRESS PDE */
*/*                                                                  */
*/********************************************************************/
*                                                                  0203
*       ELSE                                                       0203
*         IF TYPEINST=6 THEN        /* TEST TO SEE IF TYPE IS A-PDE  */
         B     @RC00201                                            0203
@RF00201 CLI   TYPEINST,6                                          0203
         BNE   @RF00203                                            0203
*           CALL INSTAPDE;          /* IF SO INVOKE THE A-PDE PROC.  */
         BAL   @14,INSTAPDE                                        0204
*/********************************************************************/
*/*                                                                  */
*/*%CONT13:        D  (YES,,NO,%CONT14)                            0205
*/*                   IS THIS INSERT "VPDE" ?                        */
*/*                S  (,EXITINST)                                  0205
*/*                   CALL VPDE INSERT: FORMAT INSERT OF VALUE PDE   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0205
*         ELSE                                                     0205
*           IF TYPEINST=7 THEN      /* TEST TO SEE IF TYPE IS E-PDE  */
         B     @RC00203                                            0205
@RF00203 CLI   TYPEINST,7                                          0205
         BNE   @RF00205                                            0205
*             CALL INSTVPDE;        /* IF SO INVOKE THE V-PDE PROC.  */
         BAL   @14,INSTVPDE                                        0206
*/********************************************************************/
*/*                                                                  */
*/*%CONT14:        D  (YES,,NO,%CONT15)                            0207
*/*                   IS THIS INSERT "REG" ?                         */
*/*                S  (,EXITINST)                                  0207
*/*                   CALL  INSERTREG: FORMAT INSERT FOR CONT OF REG */
*/*                                                                  */
*/********************************************************************/
*                                                                  0207
*           ELSE                                                   0207
*             IF TYPEINST=1 THEN    /* TEST TO SEE IF TYPE IS REG    */
         B     @RC00205                                            0207
@RF00205 CLI   TYPEINST,1                                          0207
         BNE   @RF00207                                            0207
*               CALL INSTREG;       /* IF SO INVOKE THE REG PROC.    */
         BAL   @14,INSTREG                                         0208
*/********************************************************************/
*/*                                                                  */
*/*%CONT15:        D  (YES,,NO,%CONT16)                            0209
*/*                   IS THIS INSERT "ADDR" ?                        */
*/*                S  (,EXITINST)                                  0209
*/*                   CALL INSTADDR: FORMAT INSERT                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0209
*             ELSE                                                 0209
*               IF TYPEINST=2 THEN  /* TEST TO SEE IF TYPE IS ADDR   */
         B     @RC00207                                            0209
@RF00207 CLI   TYPEINST,2                                          0209
         BNE   @RF00209                                            0209
*                 CALL INSTADDR;    /* IF SO THE PROC. IS COMPLETE   */
         BAL   @14,INSTADDR                                        0210
*/********************************************************************/
*/*                                                                  */
*/*%CONT16:        D  (YES,,NO,%CONT17)                            0211
*/*                   IS THIS INSERT "ADDRCONX" ?                    */
*/*                S  (,EXITINST)                                  0211
*/*                   CALL ADDRCONX I: FORMAT AND CONVERT INSERT     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0211
*               ELSE                                               0211
*                 IF TYPEINST=3 THEN/* TEST IF TYPE INSERT ADDRCONX  */
         B     @RC00209                                            0211
@RF00209 CLI   TYPEINST,3                                          0211
         BNE   @RF00211                                            0211
*                   CALL INSTADDX;  /* IF SO INVOKE INSTADCX ROUT    */
         BAL   @14,INSTADDX                                        0212
*/********************************************************************/
*/*                                                                  */
*/*%CONT17:        D  (YES,,NO,%CONT18)                            0213
*/*                   IS THIS INSERT "ADDRCOND" ?                    */
*/*                S  (,EXITINST)                                  0213
*/*                   CALL ADDRCOND: FORMAT AND CONVERT INSERT       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0213
*                 ELSE                                             0213
*                   IF TYPEINST=4 THEN/* TEST IF TYPE INSERT ADDRCOND*/
         B     @RC00211                                            0213
@RF00211 CLI   TYPEINST,4                                          0213
         BNE   @RF00213                                            0213
*                     CALL INSTADDD;/* IF SO INVOKE INSTADCD ROUT    */
         BAL   @14,INSTADDD                                        0214
*/********************************************************************/
*/*                                                                  */
*/*%CONT18:        S   CALL BADPARM:  ISSUE ERROR MESSAGE            */
*/*                                                                  */
*/********************************************************************/
*                                                                  0215
*                   ELSE                                           0215
*                     DO;                                          0215
         B     @RC00213                                            0215
@RF00213 DS    0H                                                  0216
*                       CALL BADPARM;/* IF NO MATCH YET BAD PARM     */
         BAL   @14,BADPARM                                         0216
*                       GO TO EXITINST;/* BRANCH TO EXIT OF ROUTINE  */
         B     EXITINST                                            0217
*                     END;                                         0218
*   END;                                                           0219
*                                                                  0219
@RC00213 DS    0H                                                  0219
@RC00211 DS    0H                                                  0219
@RC00209 DS    0H                                                  0219
@RC00207 DS    0H                                                  0219
@RC00205 DS    0H                                                  0219
@RC00203 DS    0H                                                  0219
@RC00201 LA    @14,1                                               0219
         AL    @14,INSTCTR                                         0219
         ST    @14,INSTCTR                                         0219
         CH    @14,@CH00033                                        0219
         BNH   @DL00182                                            0219
*/********************************************************************/
*/*                                                                  */
*/*EXITINST:       R  RETURN TO I/O CONTROLLER                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0220
*EXITINST:                          /* LABEL USED TO EXIT ON ERROR   */
*   RETURN CODE(RTNCODE);           /* RETURN TO PROCESSING          */
EXITINST L     @14,@SA00004                                        0220
         LM    @00,@12,@SA00004+8                                  0220
         BR    @14                                                 0220
*   END INSERT;                     /* END OF INSERT ROUTINE         */
*                                                                  0222
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE ADDRESS PDE INSERT ROUTINE.    */
*/*    IT WILL BE INVOKED IF THE USER'S MESSAGE MUST INCLUDE THIS    */
*/*    TYPE INSERT.  THE PRIMARY FUNCTIONS ARE:                      */
*/*                                                                  */
*/*        1.  SETS UP AND INVOKE THE IKJEGBLD ROUTINE               */
*/*            TO EXTRACT AND FORMAT THE ADDRESS PDE.                */
*/*        2.  PREPARE THE INSERT FOR INCLUSION                      */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*INSTAPDE:       E  PDE INSERT BUILD ROUTINE                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0222
*INSTAPDE:                                                         0222
*   PROCEDURE;                                                     0222
INSTAPDE STM   @14,@12,@SA00005                                    0222
*   PDEREG=INTPLPTR(INSTCTR);       /* SET UP ADDR TO PDE FOR CONV   */
         L     @14,INSTCTR                                         0223
         LR    @06,@14                                             0223
         SLA   @06,2                                               0223
         L     @11,SIOINTPT                                        0223
         AL    @11,@CF00622                                        0223
         L     PDEREG,INTPLPTR(@06,@11)                            0223
*   IF LEV=1 THEN                   /* SEE WHETHER WORKING ON 1ST L  */
         CLI   LEV,1                                               0224
         BNE   @RF00224                                            0224
*     INSERTRG=ADDR(INSTTXT1(INSTCTR));/* IF SO ADDRESS 1ST INSERT PL*/
         MH    @14,@CH00617                                        0225
         LA    INSERTRG,INSTTXT1-56(@14)                           0225
*   ELSE                                                           0226
*     IF LEV=2 THEN                 /* SEE WHETHER WORKING ON 2ND    */
         B     @RC00224                                            0226
@RF00224 CLI   LEV,2                                               0226
         BNE   @RF00226                                            0226
*       INSERTRG=ADDR(INSTTXT2(INSTCTR));/* IF SO ADDRESS 2ND INSERTS*/
         L     INSERTRG,INSTCTR                                    0227
         MH    INSERTRG,@CH00617                                   0227
         LA    INSERTRG,INSTTXT2-56(INSERTRG)                      0227
*     ELSE                                                         0228
*       DO;                                                        0228
         B     @RC00226                                            0228
@RF00226 DS    0H                                                  0229
*         RTNCODE=4;                /* IF NOT 1 OR 2 THE FOUL UP     */
         LA    RTNCODE,4                                           0229
*         GO TO EXITAPDE;           /* BRANCH TO EXIT                */
         B     EXITAPDE                                            0230
*       END;                                                       0231
*                                                                  0231
*/********************************************************************/
*/*                                                                  */
*/*                S  CALL PDECONVR: CONVERT PDE FOR USE             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0232
*                                   /* BY PASSING THE COMPLEMENT     */
*   CALL PDECONVR;                  /* CALL ROUTINE OUTSIDE IO       */
@RC00226 DS    0H                                                  0232
@RC00224 L     @15,TSTADDR                                         0232
         BALR  @14,@15                                             0232
*   RTNCODE=0;                      /* RESET RTNCODE BACK TO ZERO    */
         SLR   RTNCODE,RTNCODE                                     0233
*   IF PDELEN>50 THEN               /* IF AFTER CONV. TOO BIG MUST   */
         LA    @14,50                                              0234
         CR    PDELEN,@14                                          0234
         BNH   @RF00234                                            0234
*     PDELEN=50;                    /* REDUCE TO MAX. SIZE POSS.     */
         LR    PDELEN,@14                                          0235
*/********************************************************************/
*/*                                                                  */
*/*                P  PREPARE INSERT FOR INSERTION                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0236
*   IF LEV=1 THEN                   /* SEE IF ADDR SHOULD BE TO 1ST  */
@RF00234 CLI   LEV,1                                               0236
         BNE   @RF00236                                            0236
*     DO;                                                          0237
*       INSTTXT1(INSTCTR,PDELEN+1:PDELEN+1)=' ';/* INSERT BLANK SEP  */
         L     @14,INSTCTR                                         0238
         LR    @06,@14                                             0238
         MH    @06,@CH00617                                        0238
         LR    @11,PDELEN                                          0238
         ALR   @11,@06                                             0238
         LA    @10,INSTTXT1-56(@11)                                0238
         MVI   0(@10),C' '                                         0238
*       LENINST1(INSTCTR)=PDELEN+5; /* MOVE AIN THE LENGTH           */
         LA    @11,5                                               0239
         ALR   @11,PDELEN                                          0239
         STH   @11,LENINST1-56(@06)                                0239
*       DISPIN1(INSTCTR)=INDISP(INSTCTR);/* MOVE DISP TO PL          */
         L     @11,MSGPTR                                          0240
         BCTR  @11,0                                               0240
         SLR   @10,@10                                             0240
         IC    @10,INDISP(@14,@11)                                 0240
         STH   @10,DISPIN1-56(@06)                                 0240
*       INTPLPTR(INSTCTR)=ADDR(MSGINST1(INSTCTR));/* MOVE PTR TO PL  */
         SLA   @14,2                                               0241
         LA    @06,MSGINST1-56(@06)                                0241
         L     @11,SIOINTPT                                        0241
         AL    @11,@CF00622                                        0241
         ST    @06,INTPLPTR(@14,@11)                               0241
*     END;                                                         0242
*   ELSE                                                           0243
*     DO;                                                          0243
         B     @RC00236                                            0243
@RF00236 DS    0H                                                  0244
*       INSTTXT2(INSTCTR,PDELEN+1:PDELEN+1)=' ';/* INSERT BLANK SEP  */
         L     @14,INSTCTR                                         0244
         LR    @06,@14                                             0244
         MH    @06,@CH00617                                        0244
         LR    @11,PDELEN                                          0244
         ALR   @11,@06                                             0244
         LA    @10,INSTTXT2-56(@11)                                0244
         MVI   0(@10),C' '                                         0244
*       LENINST2(INSTCTR)=PDELEN+5; /* MOVE AIN THE LENGTH           */
         LA    @11,5                                               0245
         ALR   @11,PDELEN                                          0245
         STH   @11,LENINST2-56(@06)                                0245
*       DISPIN2(INSTCTR)=INDISP(INSTCTR);/* MOVE DISP TO PL          */
         L     @11,MSGPTR                                          0246
         BCTR  @11,0                                               0246
         SLR   @10,@10                                             0246
         IC    @10,INDISP(@14,@11)                                 0246
         STH   @10,DISPIN2-56(@06)                                 0246
*       INTPLPTR(INSTCTR)=ADDR(MSGINST2(INSTCTR));/* MOVE PTR TO PL  */
         SLA   @14,2                                               0247
         LA    @06,MSGINST2-56(@06)                                0247
         L     @11,SIOINTPT                                        0247
         AL    @11,@CF00622                                        0247
         ST    @06,INTPLPTR(@14,@11)                               0247
*     END;                                                         0248
*                                                                  0248
*/********************************************************************/
*/*                                                                  */
*/*EXITAPDE:       R  RETURN TO MAIN INSERT ROUTINE                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0249
*EXITAPDE:                          /* LABEL TO EXIT ROUTINE         */
*   RETURN CODE(RTNCODE);                                          0249
@RC00236 DS    0H                                                  0249
EXITAPDE L     @14,@SA00005                                        0249
         LM    @00,@12,@SA00005+8                                  0249
         BR    @14                                                 0249
*   END INSTAPDE;                                                  0250
*                                                                  0251
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE VALUE PDE INSERT ROUTINE.      */
*/*    IT WILL BE INVOKED IF THE USER'S MESSAGE MUST INCLUDE THIS    */
*/*    TYPE INSERT.  THE PRIMARY FUNCTION IS:                        */
*/*                                                                  */
*/*        1.  PREPARE THE INSERT FOR INCLUSION                      */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*INSTVPDE:       E  PDE INSERT BUILD ROUTINE                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0251
*INSTVPDE:                                                         0251
*   PROCEDURE;                                                     0251
INSTVPDE STM   @14,@12,12(@13)                                     0251
*   DCL                                                            0252
*     INSTPDE CHAR(8) BDY(WORD) BASED(INTPLPTR(INSTCTR));/* OVERLAY  */
*   DCL                                                            0253
*     VPDETXT CHAR(*) BASED(VPDEPT);/* DEFINE USER TEXT              */
*   VPDE=INSTPDE;                   /* MOVE PDE INTO MY WORK PDE     */
         L     @14,INSTCTR                                         0254
         SLA   @14,2                                               0254
         L     @06,SIOINTPT                                        0254
         AL    @06,@CF00622                                        0254
         L     @14,INTPLPTR(@14,@06)                               0254
         MVC   VPDE(8),INSTPDE(@14)                                0254
*   IF VPDEL>50 THEN                /* MAKE SURE WILL NOT OVERFLOW   */
         LA    @14,50                                              0255
         CH    @14,VPDEL                                           0255
         BNL   @RF00255                                            0255
*     VPDEL=50;                     /* REDUCE TO MAX ALLOWED         */
         STH   @14,VPDEL                                           0256
*/********************************************************************/
*/*                                                                  */
*/*                P  PREPARE INSERT FOR INSERTION                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0257
*   IF LEV=1 THEN                   /* SEE IF WE'RE WORKING OF 1ST   */
@RF00255 CLI   LEV,1                                               0257
         BNE   @RF00257                                            0257
*     DO;                                                          0258
*       LENINST1(INSTCTR)=VPDEL+5;  /* CALCULATE LENGTH OF INSERT    */
         L     @14,INSTCTR                                         0259
         LR    @06,@14                                             0259
         MH    @06,@CH00617                                        0259
         LH    @11,VPDEL                                           0259
         LA    @10,5                                               0259
         ALR   @10,@11                                             0259
         STH   @10,LENINST1-56(@06)                                0259
*       DISPIN1(INSTCTR)=INDISP(INSTCTR);/* MOVE DISPLACEMENT VAL IN */
         L     @10,MSGPTR                                          0260
         BCTR  @10,0                                               0260
         SLR   @05,@05                                             0260
         IC    @05,INDISP(@14,@10)                                 0260
         STH   @05,DISPIN1-56(@06)                                 0260
*       INSTTXT1(INSTCTR,1:VPDEL+1)=VPDETXT(1:VPDEL+1);            0261
         LA    @10,INSTTXT1-56(@06)                                0261
         L     @05,VPDEPT                                          0261
         EX    @11,@SM00623                                        0261
*       INSTTXT1(INSTCTR,VPDEL+1:VPDEL+1)=' ';/* INSERT BLANK        */
         ALR   @11,@06                                             0262
         LA    @10,INSTTXT1-56(@11)                                0262
         MVI   0(@10),C' '                                         0262
*       INTPLPTR(INSTCTR)=ADDR(MSGINST1(INSTCTR));/* MOVE PTR TO PL  */
         SLA   @14,2                                               0263
         LA    @06,MSGINST1-56(@06)                                0263
         L     @11,SIOINTPT                                        0263
         AL    @11,@CF00622                                        0263
         ST    @06,INTPLPTR(@14,@11)                               0263
*     END;                                                         0264
*   ELSE                                                           0265
*     IF LEV=2 THEN                 /* SEE IF WE'RE WORKING OF 2ND   */
         B     @RC00257                                            0265
@RF00257 CLI   LEV,2                                               0265
         BNE   @RF00265                                            0265
*       DO;                                                        0266
*         LENINST2(INSTCTR)=VPDEL+5;/* CALCULATE LENGTH OR INST      */
         L     @14,INSTCTR                                         0267
         LR    @06,@14                                             0267
         MH    @06,@CH00617                                        0267
         LH    @11,VPDEL                                           0267
         LA    @10,5                                               0267
         ALR   @10,@11                                             0267
         STH   @10,LENINST2-56(@06)                                0267
*         DISPIN2(INSTCTR)=INDISP(INSTCTR);/* MOVE DISPLACEMENT VAL
*                                      IN                            */
         L     @10,MSGPTR                                          0268
         BCTR  @10,0                                               0268
         SLR   @05,@05                                             0268
         IC    @05,INDISP(@14,@10)                                 0268
         STH   @05,DISPIN2-56(@06)                                 0268
*         INSTTXT2(INSTCTR,1:VPDEL+1)=VPDETXT(1:VPDEL+1);          0269
         LA    @10,INSTTXT2-56(@06)                                0269
         L     @05,VPDEPT                                          0269
         EX    @11,@SM00623                                        0269
*         INSTTXT2(INSTCTR,VPDEL+1:VPDEL+1)=' ';/* INSERT BLANK      */
         ALR   @11,@06                                             0270
         LA    @10,INSTTXT2-56(@11)                                0270
         MVI   0(@10),C' '                                         0270
*         INTPLPTR(INSTCTR)=ADDR(MSGINST2(INSTCTR));/* MOVE PTR TO PL*/
         SLA   @14,2                                               0271
         LA    @06,MSGINST2-56(@06)                                0271
         L     @11,SIOINTPT                                        0271
         AL    @11,@CF00622                                        0271
         ST    @06,INTPLPTR(@14,@11)                               0271
*       END;                                                       0272
*     ELSE                                                         0273
*       RTNCODE=4;                  /* IF LEV NOT 1 OR 2 THEN ERROR  */
         B     @RC00265                                            0273
@RF00265 LA    RTNCODE,4                                           0273
*/********************************************************************/
*/*                                                                  */
*/*                R  RETURN TO MAIN INSERT ROUTINE                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0274
*EXITVPDE:                          /* LABEL USED TO BRANCH TO EXIT  */
*   RETURN CODE(RTNCODE);           /* RETURN TO INSERT PROCESSOR    */
@RC00265 DS    0H                                                  0274
@RC00257 DS    0H                                                  0274
EXITVPDE L     @14,12(,@13)                                        0274
         LM    @00,@12,20(@13)                                     0274
         BR    @14                                                 0274
*   END INSTVPDE;                   /* END OF ROUTINE                */
*                                                                  0276
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE NUMBER INSERT ROUTINE.         */
*/*    IT WILL BE INVOKED IF THE USER'S MESSAGE MUST INCLUDE THIS    */
*/*    TYPE INSERT.  THE PRIMARY FUNCTIONS ARE:                      */
*/*                                                                  */
*/*        1.  LOCATE THE INSERT WITHIN IKJEGMSG                     */
*/*        2.  PREPARE THE INSERT FOR INCLUSION                      */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*INSTNUM:        E  NUMBER INSERT ROUTINE                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0276
*INSTNUM:                                                          0276
*   PROCEDURE;                                                     0276
*                                                                  0276
INSTNUM  STM   @14,@12,@SA00007                                    0276
*/********************************************************************/
*/*                                                                  */
*/*                P  FIND INSERT AND PREPARE FOR INCLUSION          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0277
*   INDXTAB=INSERTPT;               /* ESTAB ADDRESSABILITY TO INST  */
         L     @14,INSERTPT(,MSGCSECT)                             0277
         ST    @14,INDXTAB                                         0277
*   IF AMTINDX<INTPLPTR(INSTCTR) THEN/* SEE IF IN INDEX RANGE        */
         L     @06,INSTCTR                                         0278
         SLA   @06,2                                               0278
         L     @14,AMTINDX(,@14)                                   0278
         L     @11,SIOINTPT                                        0278
         AL    @11,@CF00622                                        0278
         C     @14,INTPLPTR(@06,@11)                               0278
         BNL   @RF00278                                            0278
*     DO;                                                          0279
*       CALL BADPARM;               /* HAVE MESSAGE SENT OUT         */
         BAL   @14,BADPARM                                         0280
*       GO TO EXITNUM;              /* GO TO EXIT OR ROUTINE         */
         B     EXITNUM                                             0281
*     END;                                                         0282
*   INSTPTR=INDXPTR(INTPLPTR(INSTCTR));/* GET ADDRESS OR INSERT      */
@RF00278 L     @14,INSTCTR                                         0283
         SLA   @14,2                                               0283
         L     @06,SIOINTPT                                        0283
         AL    @06,@CF00622                                        0283
         L     @14,INTPLPTR(@14,@06)                               0283
         SLA   @14,2                                               0283
         L     @06,INDXTAB                                         0283
         L     @14,INDXPTR-4(@14,@06)                              0283
         ST    @14,INSTPTR                                         0283
*   IF MSGINST(1)='FF'X THEN        /* TEST FOR MESSING INSERT       */
         CLI   MSGINST(@14),X'FF'                                  0284
         BNE   @RF00284                                            0284
*     DO;                                                          0285
*       CALL BADPARM;               /* HAVE MESSAGE SENT OUT         */
         BAL   @14,BADPARM                                         0286
*       GO TO EXITNUM;              /* GO TO EXIT OF ROUTINE         */
         B     EXITNUM                                             0287
*     END;                                                         0288
*   IF LEV=1 THEN                   /* TEST FOR FIRST LEVEL          */
@RF00284 CLI   LEV,1                                               0289
         BNE   @RF00289                                            0289
*     DO;                                                          0290
*       MSGINST1(INSTCTR)=MSGINST;  /* MOVE INSERT TO WORKAREA       */
         L     @14,INSTCTR                                         0291
         LR    @06,@14                                             0291
         MH    @06,@CH00617                                        0291
         LA    @11,MSGINST1-56(@06)                                0291
         MVI   54(@11),C' '                                        0291
         MVI   55(@11),C' '                                        0291
         L     @10,INSTPTR                                         0291
         MVC   0(54,@11),MSGINST(@10)                              0291
*       DISPIN1(INSTCTR)=INDISP(INSTCTR);/* MOVE DISPLACE VALUE IN   */
         L     @11,MSGPTR                                          0292
         BCTR  @11,0                                               0292
         SLR   @10,@10                                             0292
         IC    @10,INDISP(@14,@11)                                 0292
         STH   @10,DISPIN1-56(@06)                                 0292
*       INTPLPTR(INSTCTR)=ADDR(MSGINST1(INSTCTR));/* MOVE ADDR TO PL */
         SLA   @14,2                                               0293
         LA    @06,MSGINST1-56(@06)                                0293
         L     @11,SIOINTPT                                        0293
         AL    @11,@CF00622                                        0293
         ST    @06,INTPLPTR(@14,@11)                               0293
*     END;                                                         0294
*   ELSE                                                           0295
*     IF LEV=2 THEN                 /* TEST FOR SECOND LEVEL         */
         B     @RC00289                                            0295
@RF00289 CLI   LEV,2                                               0295
         BNE   @RF00295                                            0295
*       DO;                                                        0296
*         MSGINST2(INSTCTR)=MSGINST;/* MOVE INSERT TO WORKAREA       */
         L     @14,INSTCTR                                         0297
         LR    @06,@14                                             0297
         MH    @06,@CH00617                                        0297
         LA    @11,MSGINST2-56(@06)                                0297
         MVI   54(@11),C' '                                        0297
         MVI   55(@11),C' '                                        0297
         L     @10,INSTPTR                                         0297
         MVC   0(54,@11),MSGINST(@10)                              0297
*         DISPIN2(INSTCTR)=INDISP(INSTCTR);/* MOVE DISPLACE VALUE IN */
         L     @11,MSGPTR                                          0298
         BCTR  @11,0                                               0298
         SLR   @10,@10                                             0298
         IC    @10,INDISP(@14,@11)                                 0298
         STH   @10,DISPIN2-56(@06)                                 0298
*         INTPLPTR(INSTCTR)=ADDR(MSGINST2(INSTCTR));/* MOVE ADDR TO
*                                      PL                            */
         SLA   @14,2                                               0299
         LA    @06,MSGINST2-56(@06)                                0299
         L     @11,SIOINTPT                                        0299
         AL    @11,@CF00622                                        0299
         ST    @06,INTPLPTR(@14,@11)                               0299
*       END;                                                       0300
*     ELSE                                                         0301
*       RTNCODE=4;                  /* IF LEV NOT 1 OR 2 THEN ERROR  */
         B     @RC00295                                            0301
@RF00295 LA    RTNCODE,4                                           0301
*/********************************************************************/
*/*                                                                  */
*/*EXITNUM:        R  RETURN TO MAIN INSERT ROUTINE                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0302
*EXITNUM:                           /* LABEL TO EXIT ROUTINE         */
*   RETURN CODE(RTNCODE);           /* RETURN TO INSERT ROUTINE      */
@RC00295 DS    0H                                                  0302
@RC00289 DS    0H                                                  0302
EXITNUM  L     @14,@SA00007                                        0302
         LM    @00,@12,@SA00007+8                                  0302
         BR    @14                                                 0302
*   END INSTNUM;                                                   0303
*                                                                  0304
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE PREFORMMATTED USER'S INSERT R. */
*/*    IT WILL BE INVOKED IF THE USER'S MESSAGE MUST INCLUDE THIS    */
*/*    TYPE INSERT.  THE PRIMARY FUNCTION IS:                        */
*/*                                                                  */
*/*        1.  PREPARE THE INSERT FOR INCLUSION                      */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*INSTADDR:       E  ADDR BUILD INSERT ROUTINE                      */
*/*                P  PREPARE INSERT FOR INCLUSION                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0304
*INSTADDR:                                                         0304
*   PROCEDURE;                                                     0304
INSTADDR STM   @14,@12,12(@13)                                     0304
*   INSTPTR=INTPLPTR(INSTCTR);      /* OBTAIN ADDRESS FOR MOVE       */
         L     @14,INSTCTR                                         0305
         SLA   @14,2                                               0305
         L     @06,SIOINTPT                                        0305
         AL    @06,@CF00622                                        0305
         L     @14,INTPLPTR(@14,@06)                               0305
         ST    @14,INSTPTR                                         0305
*   IF INSTLEN>54 THEN              /* MAKE SURE LENGTH IS LESS-MAX  */
         LA    @06,54                                              0306
         CH    @06,INSTLEN(,@14)                                   0306
         BNL   @RF00306                                            0306
*     INSTLEN=54;                   /* REDUCE TO MAXIMUM             */
         STH   @06,INSTLEN(,@14)                                   0307
*   IF LEV=1 THEN                   /* TEST FOR MSG LEVEL 1          */
@RF00306 CLI   LEV,1                                               0308
         BNE   @RF00308                                            0308
*     DO;                                                          0309
*       MSGINST1(INSTCTR,1:INSTLEN)=MSGINST;/* MOVE INSERT TO WKAREA */
         L     @14,INSTCTR                                         0310
         LR    @06,@14                                             0310
         MH    @06,@CH00617                                        0310
         LA    @11,MSGINST1-56(@06)                                0310
         L     @10,INSTPTR                                         0310
         LH    @05,INSTLEN(,@10)                                   0310
         BCTR  @05,0                                               0310
         EX    @05,@SM00625                                        0310
*       DISPIN1(INSTCTR)=INDISP(INSTCTR);/* MOVE IN THE DISPLACEMENT */
         L     @11,MSGPTR                                          0311
         BCTR  @11,0                                               0311
         SLR   @10,@10                                             0311
         IC    @10,INDISP(@14,@11)                                 0311
         STH   @10,DISPIN1-56(@06)                                 0311
*       INTPLPTR(INSTCTR)=ADDR(MSGINST1(INSTCTR));/* MOVE ADDR TO PL */
         SLA   @14,2                                               0312
         LA    @06,MSGINST1-56(@06)                                0312
         L     @11,SIOINTPT                                        0312
         AL    @11,@CF00622                                        0312
         ST    @06,INTPLPTR(@14,@11)                               0312
*     END;                                                         0313
*   ELSE                                                           0314
*     IF LEV=2 THEN                 /* TEST FOR MSG LEVEL 2          */
         B     @RC00308                                            0314
@RF00308 CLI   LEV,2                                               0314
         BNE   @RF00314                                            0314
*       DO;                                                        0315
*         MSGINST2(INSTCTR,1:INSTLEN)=MSGINST;/* MOVE INSERT TO    0316
*                                      WKAREA                        */
         L     @14,INSTCTR                                         0316
         LR    @06,@14                                             0316
         MH    @06,@CH00617                                        0316
         LA    @11,MSGINST2-56(@06)                                0316
         L     @10,INSTPTR                                         0316
         LH    @05,INSTLEN(,@10)                                   0316
         BCTR  @05,0                                               0316
         EX    @05,@SM00625                                        0316
*         DISPIN2(INSTCTR)=INDISP(INSTCTR);/* MOVE IN THE          0317
*                                      DISPLACEMENT                  */
         L     @11,MSGPTR                                          0317
         BCTR  @11,0                                               0317
         SLR   @10,@10                                             0317
         IC    @10,INDISP(@14,@11)                                 0317
         STH   @10,DISPIN2-56(@06)                                 0317
*         INTPLPTR(INSTCTR)=ADDR(MSGINST2(INSTCTR));/* MOVE ADDR TO
*                                      PL                            */
         SLA   @14,2                                               0318
         LA    @06,MSGINST2-56(@06)                                0318
         L     @11,SIOINTPT                                        0318
         AL    @11,@CF00622                                        0318
         ST    @06,INTPLPTR(@14,@11)                               0318
*       END;                                                       0319
*     ELSE                                                         0320
*       RTNCODE=4;                  /* IF NOT LEV 1 OR 2 SOMEHOW ER  */
         B     @RC00314                                            0320
@RF00314 LA    RTNCODE,4                                           0320
*/********************************************************************/
*/*                                                                  */
*/*EXITADDR:       R  RETURN TO MAIN INSERT ROUTINE                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0321
*EXITADDR:                          /* LABEL TO BRANCH TO EXIT       */
*   RETURN CODE(RTNCODE);           /* RETURN TO INSERT ROUTINE      */
@RC00314 DS    0H                                                  0321
@RC00308 DS    0H                                                  0321
EXITADDR L     @14,12(,@13)                                        0321
         LM    @00,@12,20(@13)                                     0321
         BR    @14                                                 0321
*   END INSTADDR;                   /* END OF ROUTINE                */
*                                                                  0323
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE  UNFORMMATTED USER'S INSERT R. */
*/*    IT WILL BE INVOKED IF THE USER'S MESSAGE MUST INCLUDE THIS    */
*/*    TYPE INSERT.  THE PRIMARY FUNCTIONS ARE:                      */
*/*                                                                  */
*/*        1.  CALL IKJEGCVT TO CONVERT INSERT TO PRINTABLE CHAR.    */
*/*        2.  PREPARE THE INSERT FOR INCLUSION                      */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*INSTADDX:       E  ADDRCONV BUILD INSERT ROUTINE                  */
*/*                P  CONVERT TEXT TO PRINTABLE CHARACTERS           */
*/*                P  PREPARE INSERT FOR INCLUSION                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0323
*INSTADDX:                                                         0323
*   PROCEDURE;                                                     0323
INSTADDX STM   @14,@12,@SA00009                                    0323
*   INSTPTR=INTPLPTR(INSTCTR);      /* OBTAIN INSERT ADDRESS         */
         L     @14,INSTCTR                                         0324
         SLA   @14,2                                               0324
         L     @06,SIOINTPT                                        0324
         AL    @06,@CF00622                                        0324
         L     @14,INTPLPTR(@14,@06)                               0324
         ST    @14,INSTPTR                                         0324
*   IF INSTLEN>54 THEN              /* SEE IF CALL FOR MORE THAN MX  */
         LA    @06,54                                              0325
         CH    @06,INSTLEN(,@14)                                   0325
         BNL   @RF00325                                            0325
*     INSTLEN=54;                   /* IF SO REDUCE TO MAX           */
         STH   @06,INSTLEN(,@14)                                   0326
*   VPDEL=(INSTLEN-4)/2;            /* CALCULATE LENGTH FOR CVT      */
@RF00325 LA    @14,4                                               0327
         L     @06,INSTPTR                                         0327
         LH    @04,INSTLEN(,@06)                                   0327
         SLR   @04,@14                                             0327
         SRDA  @04,32                                              0327
         D     @04,@CF00119                                        0327
         STH   @05,VPDEL                                           0327
*   VPDEPT=INSTPTR+4+VPDEL;         /* ADJUST & SET UP ADDR OF DATA  */
         ALR   @06,@14                                             0328
         ALR   @06,@05                                             0328
         ST    @06,VPDEPT                                          0328
*   VPDET='04'X;                    /* INDICATE THAT NEED DATA HEX   */
         MVI   VPDET,X'04'                                         0329
*   PRMREG0=-1;                     /* INDICATE THAT RESULTS BE PRT  */
         SLR   PRMREG0,PRMREG0                                     0330
         BCTR  PRMREG0,0                                           0330
*   PRMREG1=ADDR(VPDE);             /* PASS ADDR OF PDE IN REG 1     */
         LA    PRMREG1,VPDE                                        0331
*   CALL CONVROUT;                  /* CALL IKJEGCVT TO CONVERT DAT  */
         L     @15,TSTCONVT                                        0332
         BALR  @14,@15                                             0332
*   IF RTNCODE^=0 THEN              /* TEST FOR SUCCESS OF REQ'T     */
         LTR   RTNCODE,RTNCODE                                     0333
         BNZ   @RT00333                                            0333
*     GO TO EXITADDX;               /* BRANCH TO EXIT IF ERROR       */
*   IF LEV=1 THEN                   /* SEE IF WE'RE WORKING OF 1ST   */
         CLI   LEV,1                                               0335
         BNE   @RF00335                                            0335
*     DO;                                                          0336
*       LENINST1(INSTCTR)=CONLEN+5; /* CALCULATE LEN OR INST         */
         L     @14,INSTCTR                                         0337
         LR    @06,@14                                             0337
         MH    @06,@CH00617                                        0337
         L     @11,CONAREA                                         0337
         SLR   @10,@10                                             0337
         IC    @10,CONLEN(,@11)                                    0337
         LA    @05,5                                               0337
         ALR   @05,@10                                             0337
         STH   @05,LENINST1-56(@06)                                0337
*       DISPIN1(INSTCTR)=INDISP(INSTCTR);/* MOVE DISPLACEMENT VAL IN */
         L     @05,MSGPTR                                          0338
         BCTR  @05,0                                               0338
         SLR   @04,@04                                             0338
         IC    @04,INDISP(@14,@05)                                 0338
         STH   @04,DISPIN1-56(@06)                                 0338
*       INSTTXT1(INSTCTR)=CONTXT;   /* MOVE IN INST CONVERTED TEXT   */
         LA    @05,INSTTXT1-56(@06)                                0339
         MVI   31(@05),C' '                                        0339
         MVC   32(20,@05),31(@05)                                  0339
         MVC   0(31,@05),CONTXT(@11)                               0339
*       INSTTXT1(INSTCTR,CONLEN+1:CONLEN+1)=' ';/* INSERT BLANK      */
         ALR   @10,@06                                             0340
         LA    @11,INSTTXT1-56(@10)                                0340
         MVI   0(@11),C' '                                         0340
*       INTPLPTR(INSTCTR)=ADDR(MSGINST1(INSTCTR));/* MOVE PTR TO PL  */
         SLA   @14,2                                               0341
         LA    @06,MSGINST1-56(@06)                                0341
         L     @11,SIOINTPT                                        0341
         AL    @11,@CF00622                                        0341
         ST    @06,INTPLPTR(@14,@11)                               0341
*     END;                                                         0342
*   ELSE                                                           0343
*     IF LEV=2 THEN                 /* SEE IF WE'RE WORKING OF 2ND   */
         B     @RC00335                                            0343
@RF00335 CLI   LEV,2                                               0343
         BNE   @RF00343                                            0343
*       DO;                                                        0344
*         LENINST2(INSTCTR)=CONLEN+5;/* CALCULATE LENGTH OR INST     */
         L     @14,INSTCTR                                         0345
         LR    @06,@14                                             0345
         MH    @06,@CH00617                                        0345
         L     @11,CONAREA                                         0345
         SLR   @10,@10                                             0345
         IC    @10,CONLEN(,@11)                                    0345
         LA    @05,5                                               0345
         ALR   @05,@10                                             0345
         STH   @05,LENINST2-56(@06)                                0345
*         DISPIN2(INSTCTR)=INDISP(INSTCTR);/* MOVE DISPLACEMENT VAL
*                                      IN                            */
         L     @05,MSGPTR                                          0346
         BCTR  @05,0                                               0346
         SLR   @04,@04                                             0346
         IC    @04,INDISP(@14,@05)                                 0346
         STH   @04,DISPIN2-56(@06)                                 0346
*         INSTTXT2(INSTCTR)=CONTXT; /* MOVE IN INST CONVERTED TEXT   */
         LA    @05,INSTTXT2-56(@06)                                0347
         MVI   31(@05),C' '                                        0347
         MVC   32(20,@05),31(@05)                                  0347
         MVC   0(31,@05),CONTXT(@11)                               0347
*         INSTTXT2(INSTCTR,CONLEN+1:CONLEN+1)=' ';/* INSERT BLANK    */
         ALR   @10,@06                                             0348
         LA    @11,INSTTXT2-56(@10)                                0348
         MVI   0(@11),C' '                                         0348
*         INTPLPTR(INSTCTR)=ADDR(MSGINST2(INSTCTR));/* MOVE PTR TO PL*/
         SLA   @14,2                                               0349
         LA    @06,MSGINST2-56(@06)                                0349
         L     @11,SIOINTPT                                        0349
         AL    @11,@CF00622                                        0349
         ST    @06,INTPLPTR(@14,@11)                               0349
*       END;                                                       0350
*     ELSE                                                         0351
*       RTNCODE=4;                  /* IF LEV NOT 1 OR 2 THEN ERROR  */
         B     @RC00343                                            0351
@RF00343 LA    RTNCODE,4                                           0351
*/********************************************************************/
*/*                                                                  */
*/*                R  RETURN TO MAIN INSERT ROUTINE                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0352
*EXITADDX:                          /* LABEL USED TO BRANCH TO EXIT  */
*   RETURN CODE(RTNCODE);           /* RETURN TO INSERT PROCESSOR    */
@RC00343 DS    0H                                                  0352
@RC00335 DS    0H                                                  0352
EXITADDX L     @14,@SA00009                                        0352
         LM    @00,@12,@SA00009+8                                  0352
         BR    @14                                                 0352
*   END INSTADDX;                   /* END OF ROUTINE                */
*                                                                  0354
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE  UNFORMMATTED USER'S INSERT R. */
*/*    IT WILL BE INVOKED IF THE USER'S MESSAGE MUST INCLUDE THIS    */
*/*    TYPE INSERT.  THE PRIMARY FUNCTIONS ARE:                      */
*/*                                                                  */
*/*        1.  CALL IKJEGCVT TO CONVERT INSERT TO PRINTABLE CHAR.    */
*/*        2.  PREPARE THE INSERT FOR INCLUSION                      */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*INSTADDD:       E  INSTADDD BUILD INSERT ROUTINE                  */
*/*                P  CONVERT TEXT TO DECIMAL PRINTABLE CHARACTERS   */
*/*                P  PREPARE INSERT FOR INCLUSION                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0354
*INSTADDD:                                                         0354
*   PROCEDURE;                                                     0354
INSTADDD STM   @14,@12,@SA00010                                    0354
*   INSTPTR=INTPLPTR(INSTCTR);      /* OBTAIN INSERT ADDRESS         */
         L     @14,INSTCTR                                         0355
         SLA   @14,2                                               0355
         L     @06,SIOINTPT                                        0355
         AL    @06,@CF00622                                        0355
         L     @14,INTPLPTR(@14,@06)                               0355
         ST    @14,INSTPTR                                         0355
*   IF INSTLEN>54 THEN              /* MAKE SURE INSERT UNDER MAX    */
         LA    @06,54                                              0356
         CH    @06,INSTLEN(,@14)                                   0356
         BNL   @RF00356                                            0356
*     INSTLEN=54;                   /* IF NOT REDUCE IT              */
         STH   @06,INSTLEN(,@14)                                   0357
*   VPDEL=(INSTLEN-4)/2;            /* CALCULATE LENGTH FOR CVT      */
@RF00356 LA    @14,4                                               0358
         L     @06,INSTPTR                                         0358
         LH    @04,INSTLEN(,@06)                                   0358
         SLR   @04,@14                                             0358
         SRDA  @04,32                                              0358
         D     @04,@CF00119                                        0358
         STH   @05,VPDEL                                           0358
*   VPDEPT=INSTPTR+4+VPDEL;         /* ADJUST & SET UP ADDR OF DATA  */
         ALR   @06,@14                                             0359
         ALR   @06,@05                                             0359
         ST    @06,VPDEPT                                          0359
*   VPDET='10'X;                    /* INDICATE THAT NEED DATA DEC   */
         MVI   VPDET,X'10'                                         0360
*   PRMREG0=-1;                     /* INDICATE THAT RESULTS BE PRT  */
         SLR   PRMREG0,PRMREG0                                     0361
         BCTR  PRMREG0,0                                           0361
*   PRMREG1=ADDR(VPDE);             /* PASS ADDR OF PDE IN REG 1     */
         LA    PRMREG1,VPDE                                        0362
*   CALL CONVROUT;                  /* CALL IKJEGCVT TO CONVERT DAT  */
         L     @15,TSTCONVT                                        0363
         BALR  @14,@15                                             0363
*   IF RTNCODE^=0 THEN              /* TEST FOR SUCCESS OF REQ'T     */
         LTR   RTNCODE,RTNCODE                                     0364
         BNZ   @RT00364                                            0364
*     GO TO EXITADDD;               /* BRANCH TO EXIT IF ERROR       */
*   IF LEV=1 THEN                   /* SEE IF WE'RE WORKING OF 1ST   */
         CLI   LEV,1                                               0366
         BNE   @RF00366                                            0366
*     DO;                                                          0367
*       LENINST1(INSTCTR)=CONLEN+5; /* CALCULATE LENGTH OF INSERT    */
         L     @14,INSTCTR                                         0368
         LR    @06,@14                                             0368
         MH    @06,@CH00617                                        0368
         L     @11,CONAREA                                         0368
         SLR   @10,@10                                             0368
         IC    @10,CONLEN(,@11)                                    0368
         LA    @05,5                                               0368
         ALR   @05,@10                                             0368
         STH   @05,LENINST1-56(@06)                                0368
*       DISPIN1(INSTCTR)=INDISP(INSTCTR);/* MOVE DISPLACEMENT VAL IN */
         L     @05,MSGPTR                                          0369
         BCTR  @05,0                                               0369
         SLR   @04,@04                                             0369
         IC    @04,INDISP(@14,@05)                                 0369
         STH   @04,DISPIN1-56(@06)                                 0369
*       INSTTXT1(INSTCTR)=CONTXT;   /* MOVE IN INST CONVERTED TEXT   */
         LA    @05,INSTTXT1-56(@06)                                0370
         MVI   31(@05),C' '                                        0370
         MVC   32(20,@05),31(@05)                                  0370
         MVC   0(31,@05),CONTXT(@11)                               0370
*       INSTTXT1(INSTCTR,CONLEN+1:CONLEN+1)=' ';/* INSERT BLANK      */
         ALR   @10,@06                                             0371
         LA    @11,INSTTXT1-56(@10)                                0371
         MVI   0(@11),C' '                                         0371
*       INTPLPTR(INSTCTR)=ADDR(MSGINST1(INSTCTR));/* MOVE PTR TO PL  */
         SLA   @14,2                                               0372
         LA    @06,MSGINST1-56(@06)                                0372
         L     @11,SIOINTPT                                        0372
         AL    @11,@CF00622                                        0372
         ST    @06,INTPLPTR(@14,@11)                               0372
*     END;                                                         0373
*   ELSE                                                           0374
*     IF LEV=2 THEN                 /* SEE IF WE'RE WORKING OF 2ND   */
         B     @RC00366                                            0374
@RF00366 CLI   LEV,2                                               0374
         BNE   @RF00374                                            0374
*       DO;                                                        0375
*         LENINST2(INSTCTR)=CONLEN+5;/* CALCULATE LENGTH OF INSERT   */
         L     @14,INSTCTR                                         0376
         LR    @06,@14                                             0376
         MH    @06,@CH00617                                        0376
         L     @11,CONAREA                                         0376
         SLR   @10,@10                                             0376
         IC    @10,CONLEN(,@11)                                    0376
         LA    @05,5                                               0376
         ALR   @05,@10                                             0376
         STH   @05,LENINST2-56(@06)                                0376
*         DISPIN2(INSTCTR)=INDISP(INSTCTR);/* MOVE DISPLACEMENT VAL
*                                      IN                            */
         L     @05,MSGPTR                                          0377
         BCTR  @05,0                                               0377
         SLR   @04,@04                                             0377
         IC    @04,INDISP(@14,@05)                                 0377
         STH   @04,DISPIN2-56(@06)                                 0377
*         INSTTXT2(INSTCTR)=CONTXT; /* MOVE IN INST CONVERTED TEXT   */
         LA    @05,INSTTXT2-56(@06)                                0378
         MVI   31(@05),C' '                                        0378
         MVC   32(20,@05),31(@05)                                  0378
         MVC   0(31,@05),CONTXT(@11)                               0378
*         INSTTXT2(INSTCTR,CONLEN+1:CONLEN+1)=' ';/* INSERT BLANK    */
         ALR   @10,@06                                             0379
         LA    @11,INSTTXT2-56(@10)                                0379
         MVI   0(@11),C' '                                         0379
*         INTPLPTR(INSTCTR)=ADDR(MSGINST2(INSTCTR));/* MOVE PTR TO PL*/
         SLA   @14,2                                               0380
         LA    @06,MSGINST2-56(@06)                                0380
         L     @11,SIOINTPT                                        0380
         AL    @11,@CF00622                                        0380
         ST    @06,INTPLPTR(@14,@11)                               0380
*       END;                                                       0381
*     ELSE                                                         0382
*       RTNCODE=4;                  /* IF LEV NOT 1 OR 2 THEN ERROR  */
         B     @RC00374                                            0382
@RF00374 LA    RTNCODE,4                                           0382
*/********************************************************************/
*/*                                                                  */
*/*                R  RETURN TO MAIN INSERT ROUTINE                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0383
*EXITADDD:                          /* LABEL USED TO BRANCH TO EXIT  */
*   RETURN CODE(RTNCODE);           /* RETURN TO INSERT PROCESSOR    */
@RC00374 DS    0H                                                  0383
@RC00366 DS    0H                                                  0383
EXITADDD L     @14,@SA00010                                        0383
         LM    @00,@12,@SA00010+8                                  0383
         BR    @14                                                 0383
*   END INSTADDD;                   /* END OF ROUTINE                */
*                                                                  0385
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE  REGISTER TYPE USER'S INSERT R.*/
*/*    IT WILL BE INVOKED IF THE USER'S MESSAGE MUST INCLUDE THIS    */
*/*    TYPE INSERT.  THE PRIMARY FUNCTIONS ARE:                      */
*/*                                                                  */
*/*        1.  CALL IKJEGCVT TO CONVERT INSERT TO PRINTABLE CHAR.    */
*/*        2.  PREPARE THE INSERT FOR INCLUSION                      */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*INSTREG:        E  REGISTER INSERT BUILD ROUTINE                  */
*/*                P  COUNT LEADING ZEROS                            */
*/*                P  ADJUST POINTER TO FIRST NON-ZERO NUMBER        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0385
*INSTREG:                                                          0385
*   PROCEDURE;                                                     0385
INSTREG  STM   @14,@12,@SA00011                                    0385
*   DCL                                                            0386
*     ZEROTEST FIXED(8) BASED(REGPTR);/* SETUP STRUCTURE-COMPARE 0'S */
*   DCL                                                            0387
*     ZEROCTR FIXED(31);            /* SETUP STRUCTURE-COMPARE 0'S   */
*   DCL                                                            0388
*     REGPTR PTR(31);               /* VAR TO POINT TO DATA CVT R.   */
*   REGPTR=ADDR(INTPLPTR(INSTCTR)); /* ESTAB ADDRESS TO CONTENTS     */
         L     @14,INSTCTR                                         0389
         SLA   @14,2                                               0389
         L     @06,SIOINTPT                                        0389
         AL    @06,@CF00622                                        0389
         LA    @14,INTPLPTR(@14,@06)                               0389
         ST    @14,REGPTR                                          0389
*   DO ZEROCTR=0 TO 2 WHILE ZEROTEST=0;/* MOVE DOWN STRING UNTIL^=0  */
         SLR   @14,@14                                             0390
         ST    @14,ZEROCTR                                         0390
@DL00390 L     @06,REGPTR                                          0390
         CLI   ZEROTEST(@06),0                                     0390
         BNE   @DC00390                                            0390
*     REGPTR=REGPTR+1;              /* INCREMENT TO NEXT BYTE        */
         AH    @06,@CH00115                                        0391
         ST    @06,REGPTR                                          0391
*   END;                                                           0392
*                                                                  0392
         AH    @14,@CH00115                                        0392
         ST    @14,ZEROCTR                                         0392
         CH    @14,@CH00119                                        0392
         BNH   @DL00390                                            0392
@DC00390 DS    0H                                                  0393
*/********************************************************************/
*/*                                                                  */
*/*                P  MOVE AND CONVERT TO PRINTABLE HEX TO INSERT    */
*/*                P  PREPARE INSERT FOR INCLUSION                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0393
*   VPDEL=4-ZEROCTR;                /* CALCULATE LENGTH FOR CVT      */
         LA    @14,4                                               0393
         SL    @14,ZEROCTR                                         0393
         STH   @14,VPDEL                                           0393
*   VPDEPT=REGPTR;                  /* ADJUST & SET UP ADDR OF DATA  */
         MVC   VPDEPT(4),REGPTR                                    0394
*   VPDET='04'X;                    /* INDICATE THAT DATA NEED HEX   */
         MVI   VPDET,X'04'                                         0395
*   PRMREG0=-1;                     /* INDICATE THAT RESULTS BE HEX  */
         SLR   PRMREG0,PRMREG0                                     0396
         BCTR  PRMREG0,0                                           0396
*   PRMREG1=ADDR(VPDE);             /* PASS ADDR OF PDE IN REG 1     */
         LA    PRMREG1,VPDE                                        0397
*   CALL CONVROUT;                  /* CALL IKJEGCVT TO CONVERT DAT  */
         L     @15,TSTCONVT                                        0398
         BALR  @14,@15                                             0398
*   IF RTNCODE^=0 THEN              /* TEST FOR SUCCESS OF REQ'T     */
         LTR   RTNCODE,RTNCODE                                     0399
         BNZ   @RT00399                                            0399
*     GO TO EXITREG;                /* BRANCH TO EXIT IF ERROR       */
*   IF LEV=1 THEN                   /* SEE IF WE'RE WORKING OF 1ST   */
         CLI   LEV,1                                               0401
         BNE   @RF00401                                            0401
*     DO;                                                          0402
*       LENINST1(INSTCTR)=CONLEN+5; /* CALCULATE LENGTH OR INST      */
         L     @14,INSTCTR                                         0403
         LR    @06,@14                                             0403
         MH    @06,@CH00617                                        0403
         L     @11,CONAREA                                         0403
         SLR   @10,@10                                             0403
         IC    @10,CONLEN(,@11)                                    0403
         LA    @05,5                                               0403
         ALR   @05,@10                                             0403
         STH   @05,LENINST1-56(@06)                                0403
*       DISPIN1(INSTCTR)=INDISP(INSTCTR);/* MOVE DISPLACEMENT VAL IN */
         L     @05,MSGPTR                                          0404
         BCTR  @05,0                                               0404
         SLR   @04,@04                                             0404
         IC    @04,INDISP(@14,@05)                                 0404
         STH   @04,DISPIN1-56(@06)                                 0404
*       INSTTXT1(INSTCTR)=CONTXT;   /* MOVE IN INST TXT              */
         LA    @05,INSTTXT1-56(@06)                                0405
         MVI   31(@05),C' '                                        0405
         MVC   32(20,@05),31(@05)                                  0405
         MVC   0(31,@05),CONTXT(@11)                               0405
*       INSTTXT1(INSTCTR,CONLEN+1:CONLEN+1)=' ';/* INSERT BLANK      */
         ALR   @10,@06                                             0406
         LA    @11,INSTTXT1-56(@10)                                0406
         MVI   0(@11),C' '                                         0406
*       INTPLPTR(INSTCTR)=ADDR(MSGINST1(INSTCTR));/* MOVE PTR TO PL  */
         SLA   @14,2                                               0407
         LA    @06,MSGINST1-56(@06)                                0407
         L     @11,SIOINTPT                                        0407
         AL    @11,@CF00622                                        0407
         ST    @06,INTPLPTR(@14,@11)                               0407
*     END;                                                         0408
*   ELSE                                                           0409
*     IF LEV=2 THEN                 /* SEE IF WE'RE WORKING OF 2ND   */
         B     @RC00401                                            0409
@RF00401 CLI   LEV,2                                               0409
         BNE   @RF00409                                            0409
*       DO;                                                        0410
*         LENINST2(INSTCTR)=CONLEN+5;/* CALCULATE LENGTH OR INST     */
         L     @14,INSTCTR                                         0411
         LR    @06,@14                                             0411
         MH    @06,@CH00617                                        0411
         L     @11,CONAREA                                         0411
         SLR   @10,@10                                             0411
         IC    @10,CONLEN(,@11)                                    0411
         LA    @05,5                                               0411
         ALR   @05,@10                                             0411
         STH   @05,LENINST2-56(@06)                                0411
*         DISPIN2(INSTCTR)=INDISP(INSTCTR);/* MOVE DISPLACEMENT VAL
*                                      IN                            */
         L     @05,MSGPTR                                          0412
         BCTR  @05,0                                               0412
         SLR   @04,@04                                             0412
         IC    @04,INDISP(@14,@05)                                 0412
         STH   @04,DISPIN2-56(@06)                                 0412
*         INSTTXT2(INSTCTR)=CONTXT; /* MOVE IN INST CONVERTED TEXT   */
         LA    @05,INSTTXT2-56(@06)                                0413
         MVI   31(@05),C' '                                        0413
         MVC   32(20,@05),31(@05)                                  0413
         MVC   0(31,@05),CONTXT(@11)                               0413
*         INSTTXT2(INSTCTR,CONLEN+1:CONLEN+1)=' ';/* INSERT BLANK    */
         ALR   @10,@06                                             0414
         LA    @11,INSTTXT2-56(@10)                                0414
         MVI   0(@11),C' '                                         0414
*         INTPLPTR(INSTCTR)=ADDR(MSGINST2(INSTCTR));/* MOVE PTR TO PL*/
         SLA   @14,2                                               0415
         LA    @06,MSGINST2-56(@06)                                0415
         L     @11,SIOINTPT                                        0415
         AL    @11,@CF00622                                        0415
         ST    @06,INTPLPTR(@14,@11)                               0415
*       END;                                                       0416
*     ELSE                                                         0417
*       RTNCODE=4;                  /* IF LEV NOT 1 OR 2 THEN ERROR  */
         B     @RC00409                                            0417
@RF00409 LA    RTNCODE,4                                           0417
*/********************************************************************/
*/*                                                                  */
*/*                R  RETURN TO MAIN INSERT ROUTINE                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0418
*EXITREG:                           /* LABEL USED TO BRANCH TO EXIT  */
*   RETURN CODE(RTNCODE);           /* RETURN TO INSERT PROCESSOR    */
@RC00409 DS    0H                                                  0418
@RC00401 DS    0H                                                  0418
EXITREG  L     @14,@SA00011                                        0418
         LM    @00,@12,@SA00011+8                                  0418
         BR    @14                                                 0418
*   END INSTREG;                    /* END OF ROUTINE                */
*                                                                  0420
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE SVC ERROR MESSAGE ROUTINE      */
*/*    IT WILL BE INVOKED IF THE USER'S HAS REQUESTED AN SVC ERROR   */
*/*    MESSAGE. THE PRIMARY FUNCTIONS ARE:                           */
*/*                                                                  */
*/*        1.  DETERMINE WHICH MESSAGE TO ISSUE                      */
*/*        2.  PREPARE THE INSERTS FOR INCLUSION                     */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*SVCERR:         E  SVC ERROR MESSAGE ROUTINE                      */
*/*                                                                  */
*/********************************************************************/
*                                                                  0420
*SVCERR:                                                           0420
*   PROCEDURE;                                                     0420
*                                                                  0420
SVCERR   STM   @14,@12,@SA00012                                    0420
*/********************************************************************/
*/*                                                                  */
*/*  THE FOLLOWING DCL STRUCTURES WILL BE USED FOR SVCERR MESSAGES   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0421
*   DCL                                                            0421
*     SVCTABPR PTR(31) BDY(WORD);   /* TEMP POINTER - TAB SEARCHING  */
*   DCL                                                            0422
*     SVCINDX FIXED(31) BDY(WORD);  /* INDEX VALUE FOR SVC SEARCH    */
*   DCL                                                            0423
*     ABENDINX FIXED(31) BDY(WORD); /* INDEX VALUE FOR AB TAB SRCH   */
*   DCL                                                            0424
*     RCODEINX FIXED(31) BDY(WORD); /* INDEX VALUE FOR RC TAB SRCH   */
*   DCL                                                            0425
*     1 SVCTB1 BDY(WORD) BASED(SVCTABPR),/* STRUCTURE-AB TAB SRCH    */
*      2 AB2NDLV1 PTR(31),          /* POINTER TO SEC LEV MSG        */
*      2 ABCDTB1(*),                /* ARRAY FOR REPEAT OF LEV 3     */
*       3 SVCNUM1 FIXED(31),        /* SVC NUMBER OR ZERO IF END     */
*       3 ABTABPT1 PTR(31),         /* PTR TO TAB OF AB CODES        */
*       3 SVCINST1 PTR(31);         /* PTR TO SVC NAME INSERT        */
*   DCL                                                            0426
*     1 ABTAB1(*) BDY(WORD) BASED(ABTABPT1(SVCINDX)),/* AB TAB STRU. */
*      2 ABCODE1 FIXED(31),         /* ABEND CODE OR ZERO IF END     */
*      2 RCTABPT1 PTR(31),          /* POINTER TO RC TAB FOR SRCH    */
*      2 ABCDINST PTR(31);          /* POINTER TO ABCODE INSERT      */
*   DCL                                                            0427
*     1 RCTAB1 BDY(WORD) BASED(RCTABPT1(ABENDINX)),/* RC TAB   STRUCT*/
*      2 SVC1STM1 PTR(31),          /* POINTER TO FIRST LEV MSG      */
*      2 RCSVC(*),                  /* ARRAY OF RTNCODES             */
*       3 SVCRC1 FIXED(31),         /* RTN CODE VALUE OR ZERO END    */
*       3 RCINST1 PTR(31);          /* POINTER TO RTN NUM INSERT     */
*   DCL                                                            0428
*     1 SVCTBRC2 BDY(WORD) BASED(SVCTABPR),/* RC TAB STRUCTURE       */
*      2 RC2NDLV2 PTR(31),          /* POINTER TO SEC LEV MSG        */
*      2 SVCRCT2(*),                /* ARRAY OF RTNCODES             */
*       3 SVCNUM2 FIXED(31),        /* VALUE OF SVC NUMBERS          */
*       3 SVCRCTB2 PTR(31);         /* POINTER TO RC TABLE           */
*   DCL                                                            0429
*     1 RCTAB2(*) BDY(WORD) BASED(SVCRCTB2(SVCINDX)),/* RC TAB STRUC */
*      2 SVCRC2 FIXED(31),          /* RC NUMBER VALUE OF ZERO END   */
*      2 SVC1STM2 PTR(31),          /* PTR TO THE 1ST LEVEL MSG      */
*      2 SVCRCIN2 PTR(31);          /* PTR TO THE RC NUM INSERT      */
*/********************************************************************/
*/*                                                                  */
*/* THERE IS TWO BASIC SEARCH ROUTINE TO FIND PROPER MESSAGES.       */
*/* THE FIRST ROUTINE (SVCABSH) SEARCHES FOR AN SVC FAILURE THAT     */
*/* RETURNS AN ABEND CODE SUCH AS THE LINK SVC 6.                    */
*/* IF THE PROPER MESSAGE HAS NOT BEEN FOUND IN THE FIRST SEARCH,    */
*/* THE RETURN CODE IS SET TO 8 TO INDICATE THAT THE SECOND TABLE    */
*/* SHOULD BE SEARCHED (SVCRCSH--RETURN CODE TYPE).                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0430
*   CALL SVCABSH;                   /* FIRST SEARCH FOR MSG-AB TAB   */
         BAL   @14,SVCABSH                                         0430
*   IF RTNCODE=8 THEN               /* IF NOT IN ABEND TABLE         */
         CH    RTNCODE,@CH00034                                    0431
         BNE   @RF00431                                            0431
*     CALL SVCRCSH;                 /* SEARCH FOR MSG IN RC TY TAB   */
         BAL   @14,SVCRCSH                                         0432
*SVCABSH:                                                          0433
*   PROCEDURE;                                                     0433
*                                                                  0433
         B     @PB00013                                            0433
SVCABSH  STM   @14,@12,@SA00013                                    0433
*/********************************************************************/
*/*                                                                  */
*/*                P  LOCATE MSG AND PREPARE INSERTS FOR INSERTION   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0434
*   SVCTABPR=SVCTBP;                /* ESTAB ADDR TO AB TYPE TABLE   */
         MVC   SVCTABPR(4),SVCTBP(MSGCSECT)                        0434
*   DO SVCINDX=1 BY 1 TO 20 WHILE SVCNUM1(SVCINDX)^=0;/* SVC NUM OR
*                                      ZERO(NOT THERE)               */
         LA    @14,1                                               0435
         ST    @14,SVCINDX                                         0435
@DL00435 MH    @14,@CH00058                                        0435
         L     @06,SVCTABPR                                        0435
         AL    @06,@CF00627                                        0435
         L     @14,SVCNUM1-4(@14,@06)                              0435
         LTR   @14,@14                                             0435
         BZ    @DC00435                                            0435
*     IF SVCNUM1(SVCINDX)=SIOSVCMG THEN/* TEST MATCH IN SVC NUM      */
         L     @06,IOPARMS                                         0436
         C     @14,SIOSVCMG(,@06)                                  0436
         BNE   @RF00436                                            0436
*       DO ABENDINX=1 BY 1 TO 20 WHILE ABCODE1(ABENDINX)^=0;/* TEST
*                                      MATCH IN ABEND VAL            */
         LA    @14,1                                               0437
         ST    @14,ABENDINX                                        0437
@DL00437 LA    @06,12                                              0437
         LR    @05,@14                                             0437
         MR    @04,@06                                             0437
         L     @14,SVCTABPR                                        0437
         LR    @11,@06                                             0437
         M     @10,SVCINDX                                         0437
         LA    @06,0(@11,@14)                                      0437
         AL    @06,@CF00622                                        0437
         L     @06,ABTABPT1-8(,@06)                                0437
         LA    @10,0(@05,@06)                                      0437
         AL    @10,@CF00628                                        0437
         L     @10,ABCODE1(,@10)                                   0437
         LTR   @10,@10                                             0437
         BZ    @DC00437                                            0437
*         IF ABCODE1(ABENDINX)=SIOABREG THEN/* WHEN MATCH SRH RC   0438
*                                      FIRST DO INITAL SET UP OF MSG
*                                      PTRS & INST PTRS              */
         L     @04,IOPARMS                                         0438
         C     @10,SIOABREG(,@04)                                  0438
         BNE   @RF00438                                            0438
*           DO;                                                    0439
*             SIOTYPPT=ADDR(SIOTYP11);/* ADDRESSABILITY INPUT PL     */
         LA    @10,SIOTYP11(,@04)                                  0440
         ST    @10,SIOTYPPT                                        0440
*             SIOINTPT=ADDR(SIO11PTR);/* ADDRESSABILITY INST PL      */
         LA    @10,SIO11PTR(,@04)                                  0441
         ST    @10,SIOINTPT                                        0441
*             MSGPTR=SVC1STM1;      /* ADDRESSABILITY TO MSG         */
         AL    @06,@CF00627                                        0442
         L     @06,RCTABPT1-4(@05,@06)                             0442
         L     @06,SVC1STM1(,@06)                                  0442
         ST    @06,MSGPTR                                          0442
*             MESSAGE(1)=LOCALMSG;  /* MOVE MESSAGE TO WK AREA       */
         MVI   MESSAGE+93,C' '                                     0443
         MVC   MESSAGE+94(10),MESSAGE+93                           0443
         MVC   MESSAGE(93),LOCALMSG(@06)                           0443
*             INSTPTR=SVCINST1(SVCINDX);/* ESTAB ADDR OF INST        */
         L     @14,SVCINST1-12(@11,@14)                            0444
         ST    @14,INSTPTR                                         0444
*             MSGINST1(1)=MSGINST;  /* MOVE INSERT TO WK AREA        */
         MVI   MSGINST1+54,C' '                                    0445
         MVI   MSGINST1+55,C' '                                    0445
         MVC   MSGINST1(54),MSGINST(@14)                           0445
*             DISPIN1(1)=INDISP(1); /* MOVE DISPLACEMENT VAL         */
         SLR   @14,@14                                             0446
         IC    @14,INDISP(,@06)                                    0446
         STH   @14,DISPIN1                                         0446
*             INTPLPTR(1)=ADDR(MSGINST1(1));/* MOVE PTR OF INST      */
         LA    @14,MSGINST1                                        0447
         ST    @14,INTPLPTR(,@10)                                  0447
*             SIO13PTR=SIOMODID+100;/* ADJ & RESTORE INST NO         */
         LA    @14,100                                             0448
         SLR   @06,@06                                             0448
         IC    @06,SIOMODID(,@04)                                  0448
         ALR   @14,@06                                             0448
         ST    @14,SIO13PTR(,@04)                                  0448
*             INSTCTR=3;            /* INDICATE TO INSTNUM 2ND       */
         MVC   INSTCTR(4),@CF00032                                 0449
*             LEV=1;                /* INDICATE TO NUM PRC LEV       */
         MVI   LEV,X'01'                                           0450
*             CALL INSTNUM;         /* CALL AND HAVE INST PROC.      */
         BAL   @14,INSTNUM                                         0451
*             IF RTNCODE^=0 THEN    /* MAKE SURE SUCESSFUL           */
         LTR   RTNCODE,RTNCODE                                     0452
         BNZ   @RT00452                                            0452
*               GO TO EXITABSH;     /* GO TO THE EXIT IF NOT         */
*             INTPLPTR(2)=ADDR(MSGINST1(3));/* MOVE PTR OF INST      */
         LA    @14,MSGINST1+112                                    0454
         L     @06,SIOINTPT                                        0454
         ST    @14,INTPLPTR+4(,@06)                                0454
*             DISPIN1(3)=INDISP(2); /* MOVE DISPLACEMENT VAL         */
         L     @14,MSGPTR                                          0455
         SLR   @06,@06                                             0455
         IC    @06,INDISP+1(,@14)                                  0455
         STH   @06,DISPIN1+112                                     0455
*             SIONUMI1=3;           /* SET UP AMT OF SEGMENTS        */
         LA    @14,3                                               0456
         L     @06,IOPARMS                                         0456
         ST    @14,SIONUMI1(,@06)                                  0456
*             SIOTYPPT=ADDR(SIOTYP21);/* ADDRESSABILITY INPUT PL     */
         LA    @11,SIOTYP21(,@06)                                  0457
         ST    @11,SIOTYPPT                                        0457
*             SIOINTPT=ADDR(SIO21PTR);/* ADDRESSABILITY INST PL      */
         LA    @10,SIO21PTR(,@06)                                  0458
         ST    @10,SIOINTPT                                        0458
*             MSGPTR=AB2NDLV1;      /* ESTAB ADDR TO 2ND MSG         */
         L     @10,SVCTABPR                                        0459
         L     @10,AB2NDLV1(,@10)                                  0459
         ST    @10,MSGPTR                                          0459
*             MESSAGE(2)='00'X;     /* ZERO OUT WORK AREA            */
         XC    MESSAGE+105(103),MESSAGE+105                        0460
         MVI   MESSAGE+104,X'00'                                   0460
*             WKMSGID(2)=WKMSGID(1);/* MOVE FIRST LEVEL NUMBER       */
         MVC   WKMSGID+104(9),WKMSGID                              0461
*             WKMSGTXT(2)=TEXTMSG;  /* MOVE IN 2ND LEV TEXT          */
         MVI   WKMSGTXT+193,C' '                                   0462
         MVI   WKMSGTXT+194,C' '                                   0462
         MVC   WKMSGTXT+104(89),TEXTMSG(@10)                       0462
*             LENMSG(2)=LENLOCAL;   /* MOVE IN MESSAGE LENGTH        */
         MVC   LENMSG+104(2),LENLOCAL(@10)                         0463
*             LEV=2;                /* INDICATE THAT WORKING 2       */
         MVI   LEV,X'02'                                           0464
*             INSTCTR=1;            /* INDICATE 1ST INSERT           */
         MVC   INSTCTR(4),@CF00115                                 0465
*             IF TYP(1)=5 THEN      /* FIND OUT WHICH INST           */
         CLI   TYP(@11),5                                          0466
         BNE   @RF00466                                            0466
*               DO;                                                0467
*                 SIONUMI2=3;       /* SET UP AMT OF SEGMENTS        */
         ST    @14,SIONUMI2(,@06)                                  0468
*                 CALL INSTNUM;     /* HAVE INSERT LOCATED           */
         BAL   @14,INSTNUM                                         0469
*                 IF RTNCODE^=0 THEN/* TEST FOR SUCESSFUL REQ        */
         LTR   RTNCODE,RTNCODE                                     0470
         BNZ   @RT00470                                            0470
*                   GO TO EXITABSH; /* BRANCH TO EXIT                */
*               END;                                               0472
*             ELSE                                                 0473
*               SIONUMI2=2;         /* NO INST FROM CALLER RED       */
         B     @RC00466                                            0473
@RF00466 L     @14,IOPARMS                                         0473
         MVC   SIONUMI2(4,@14),@CF00119                            0473
*             INSTPTR=ABCDINST(ABENDINX);/* PTR TO ABEND NUM INT     */
@RC00466 LA    @14,12                                              0474
         L     @05,ABENDINX                                        0474
         MR    @04,@14                                             0474
         LR    @11,@14                                             0474
         M     @10,SVCINDX                                         0474
         L     @14,SVCTABPR                                        0474
         AL    @14,@CF00622                                        0474
         L     @14,ABTABPT1-8(@11,@14)                             0474
         AL    @14,@CF00622                                        0474
         L     @14,ABCDINST-8(@05,@14)                             0474
         ST    @14,INSTPTR                                         0474
*             MSGINST2(2)=MSGINST;  /* MOVE INSERT TO WORK AREA      */
         MVI   MSGINST2+110,C' '                                   0475
         MVI   MSGINST2+111,C' '                                   0475
         MVC   MSGINST2+56(54),MSGINST(@14)                        0475
*             DISPIN2(2)=INDISP(2); /* MOVE DISPLACEMENT VAL         */
         L     @14,MSGPTR                                          0476
         SLR   @06,@06                                             0476
         IC    @06,INDISP+1(,@14)                                  0476
         STH   @06,DISPIN2+56                                      0476
*             IF TYP(1)=5 THEN      /* SEE WHICH INST THIS IS        */
         L     @14,SIOTYPPT                                        0477
         CLI   TYP(@14),5                                          0477
         BNE   @RF00477                                            0477
*               INTPLPTR(2)=ADDR(MSGINST2(2));/* MOVE ADDR TO PL     */
         LA    @14,MSGINST2+56                                     0478
         L     @06,SIOINTPT                                        0478
         ST    @14,INTPLPTR+4(,@06)                                0478
*             ELSE                                                 0479
*               INTPLPTR(1)=ADDR(MSGINST2(2));/* MOVE ADDR TO PL     */
         B     @RC00477                                            0479
@RF00477 LA    @14,MSGINST2+56                                     0479
         L     @06,SIOINTPT                                        0479
         ST    @14,INTPLPTR(,@06)                                  0479
*             IF SVCRC1(1)^=0 THEN                                 0480
@RC00477 LA    @14,12                                              0480
         L     @05,ABENDINX                                        0480
         MR    @04,@14                                             0480
         LR    @11,@14                                             0480
         M     @10,SVCINDX                                         0480
         L     @14,SVCTABPR                                        0480
         AL    @14,@CF00622                                        0480
         L     @14,ABTABPT1-8(@11,@14)                             0480
         AL    @14,@CF00627                                        0480
         L     @14,RCTABPT1-4(@05,@14)                             0480
         ICM   @06,15,SVCRC1(@14)                                  0480
         BZ    @RF00480                                            0480
*               DO RCODEINX=1 BY 1 TO 20/* SET UP FIND RC            */
*                     WHILE SVCRC1(RCODEINX)^=0;/* IF 0 THEN ERROR   */
         LA    @14,1                                               0481
         ST    @14,RCODEINX                                        0481
@DL00481 SLA   @14,3                                               0481
         LA    @06,12                                              0481
         L     @05,ABENDINX                                        0481
         MR    @04,@06                                             0481
         LR    @11,@06                                             0481
         M     @10,SVCINDX                                         0481
         L     @06,SVCTABPR                                        0481
         AL    @06,@CF00622                                        0481
         L     @06,ABTABPT1-8(@11,@06)                             0481
         AL    @06,@CF00627                                        0481
         L     @06,RCTABPT1-4(@05,@06)                             0481
         LA    @11,0(@14,@06)                                      0481
         AL    @11,@CF00622                                        0481
         L     @11,SVCRC1-4(,@11)                                  0481
         LTR   @11,@11                                             0481
         BZ    @DC00481                                            0481
*                 IF SVCRC1(RCODEINX)=SIORCREG THEN/* SRCH           */
         L     @10,IOPARMS                                         0482
         C     @11,SIORCREG(,@10)                                  0482
         BNE   @RF00482                                            0482
*                   DO;                                            0483
*                     SIONUMI1=SIONUMI1+1;/* INCREMENT SG #          */
         LA    @11,1                                               0484
         AL    @11,SIONUMI1(,@10)                                  0484
         ST    @11,SIONUMI1(,@10)                                  0484
*                     INSTPTR=RCINST1(RCODEINX);/* ADDR INT          */
         L     @14,RCINST1-8(@14,@06)                              0485
         ST    @14,INSTPTR                                         0485
*                     MSGINST1(2)=MSGINST;/* MOVE INT TO WK          */
         MVI   MSGINST1+110,C' '                                   0486
         MVI   MSGINST1+111,C' '                                   0486
         MVC   MSGINST1+56(54),MSGINST(@14)                        0486
*                     MSGPTR=SVC1STM1;/* ESTAB ADD - D'SP            */
         L     @14,SVC1STM1(,@06)                                  0487
         ST    @14,MSGPTR                                          0487
*                     DISPIN1(2)=INDISP(2);/* MOVE DISP VAL          */
         SLR   @06,@06                                             0488
         IC    @06,INDISP+1(,@14)                                  0488
         STH   @06,DISPIN1+56                                      0488
*                     DISPIN1(3)=INDISP(3);/* MOVE DISP VAL          */
         SLR   @06,@06                                             0489
         IC    @06,INDISP+2(,@14)                                  0489
         STH   @06,DISPIN1+112                                     0489
*                     SIOINTPT=ADDR(SIO11PTR);/* READJUST 1ST        */
         LA    @14,SIO11PTR(,@10)                                  0490
         ST    @14,SIOINTPT                                        0490
*                     INTPLPTR(2)=ADDR(MSGINST1(2));/* ADDR          */
         LA    @06,MSGINST1+56                                     0491
         ST    @06,INTPLPTR+4(,@14)                                0491
*                     INTPLPTR(3)=ADDR(MSGINST1(3));/* ADDR          */
         LA    @06,MSGINST1+112                                    0492
         ST    @06,INTPLPTR+8(,@14)                                0492
*                   END;                                           0493
*               END;                                               0494
@RF00482 LA    @14,1                                               0494
         AL    @14,RCODEINX                                        0494
         ST    @14,RCODEINX                                        0494
         CH    @14,@CH00251                                        0494
         BNH   @DL00481                                            0494
@DC00481 DS    0H                                                  0495
*             SIO1STMS=ADDR(MESSAGE(1));/* ESTAB PTR                 */
@RF00480 L     @14,IOPARMS                                         0495
         LA    @06,MESSAGE                                         0495
         ST    @06,SIO1STMS(,@14)                                  0495
*             SIO2NDMS=ADDR(MESSAGE(2));/* ESTAB PTR                 */
         LA    @06,MESSAGE+104                                     0496
         ST    @06,SIO2NDMS(,@14)                                  0496
*             CALL TERMOUT;         /* HAVE MESSAGE SENT TO USER     */
         BAL   @14,TERMOUT                                         0497
*             GO TO EXITABSH;       /* BRANCH TO EXIT OF ROUTINE     */
         B     EXITABSH                                            0498
*           END;                                                   0499
*       END;                                                       0500
@RF00438 LA    @14,1                                               0500
         AL    @14,ABENDINX                                        0500
         ST    @14,ABENDINX                                        0500
         CH    @14,@CH00251                                        0500
         BNH   @DL00437                                            0500
@DC00437 DS    0H                                                  0501
*   END;                                                           0501
@RF00436 LA    @14,1                                               0501
         AL    @14,SVCINDX                                         0501
         ST    @14,SVCINDX                                         0501
         CH    @14,@CH00251                                        0501
         BNH   @DL00435                                            0501
@DC00435 DS    0H                                                  0502
*   RTNCODE=8;                      /* INDICATE NOT IN ABCODE TAB    */
         LA    RTNCODE,8                                           0502
*EXITABSH:                          /* LABEL TO BRANCH TO EXIT OF R  */
*   RETURN CODE(RTNCODE);           /* RETURN TO MAIN SVCERR ROUT    */
EXITABSH L     @14,@SA00013                                        0503
         LM    @00,@12,@SA00013+8                                  0503
         BR    @14                                                 0503
*   END SVCABSH;                                                   0504
*                                                                  0505
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE WILL SEARCH FOR SVC ERROR MSGS SUCH AS ESTAE AND    */
*/* PREPARE THE NECESSARY MESSAGES.                                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0505
*SVCRCSH:                                                          0505
*   PROCEDURE;                                                     0505
SVCRCSH  STM   @14,@12,@SA00014                                    0505
*   SVCTABPR=SVCTBRCP;              /* ESTAB ADDR TO RC TYPE TABLE   */
         MVC   SVCTABPR(4),SVCTBRCP(MSGCSECT)                      0506
*   RTNCODE=0;                      /* INITIALIZE THE RC TO ZERO     */
         SLR   RTNCODE,RTNCODE                                     0507
*   DO SVCINDX=1 BY 1 TO 20         /* START SEARCH FOR SVC NO       */
*         WHILE SVCNUM2(SVCINDX)^=0;/* SEARCH UNTIL REACH END TAB    */
         LA    @14,1                                               0508
         ST    @14,SVCINDX                                         0508
@DL00508 SLA   @14,3                                               0508
         L     @06,SVCTABPR                                        0508
         AL    @06,@CF00622                                        0508
         L     @14,SVCNUM2-4(@14,@06)                              0508
         LTR   @14,@14                                             0508
         BZ    @DC00508                                            0508
*     IF SVCNUM2(SVCINDX)=SIOSVCMG THEN/* IF MATCH STOP FOR ADDR     */
         L     @06,IOPARMS                                         0509
         C     @14,SIOSVCMG(,@06)                                  0509
         BNE   @RF00509                                            0509
*       DO RCODEINX=1 BY 1 TO 20    /* SEARCH UNTIL REACH END / TAB  */
*             WHILE SVCRC2(RCODEINX)^=0;/* TEST FOR END OF TAB       */
         LA    @14,1                                               0510
         ST    @14,RCODEINX                                        0510
@DL00510 MH    @14,@CH00058                                        0510
         L     @06,SVCTABPR                                        0510
         L     @11,SVCINDX                                         0510
         SLA   @11,3                                               0510
         L     @11,SVCRCTB2-8(@11,@06)                             0510
         LA    @10,0(@14,@11)                                      0510
         AL    @10,@CF00628                                        0510
         L     @10,SVCRC2(,@10)                                    0510
         LTR   @10,@10                                             0510
         BZ    @DC00510                                            0510
*         IF SVCRC2(RCODEINX)=SIORCREG THEN/* IF FIND STOP & PROC    */
         L     @05,IOPARMS                                         0511
         C     @10,SIORCREG(,@05)                                  0511
         BNE   @RF00511                                            0511
*           DO;                                                    0512
*             MSGPTR=SVC1STM2(RCODEINX);/* MOVE MSG PTR              */
         LA    @10,0(@14,@11)                                      0513
         AL    @10,@CF00627                                        0513
         L     @10,SVC1STM2-4(,@10)                                0513
         ST    @10,MSGPTR                                          0513
*             MESSAGE(1)=LOCALMSG;  /* MOVE IN MSG TO WORK AREA      */
         MVI   MESSAGE+93,C' '                                     0514
         MVC   MESSAGE+94(10),MESSAGE+93                           0514
         MVC   MESSAGE(93),LOCALMSG(@10)                           0514
*             SIOTYPPT=ADDR(SIOTYP21);/* ADDRESSABILITY INPUT PL     */
         LA    @10,SIOTYP21(,@05)                                  0515
         ST    @10,SIOTYPPT                                        0515
*             SIOINTPT=ADDR(SIO21PTR);/* ADDRESSABILITY INST PL      */
         LA    @10,SIO21PTR(,@05)                                  0516
         ST    @10,SIOINTPT                                        0516
*             MSGPTR=RC2NDLV2;      /* ESTAB ADDR TO MESSAGE 2ND LV  */
         L     @06,RC2NDLV2(,@06)                                  0517
         ST    @06,MSGPTR                                          0517
*             MESSAGE(2)='00'X;     /* CLEAR WORK AREA               */
         XC    MESSAGE+105(103),MESSAGE+105                        0518
         MVI   MESSAGE+104,X'00'                                   0518
*             WKMSGID(2)=WKMSGID(1);/* MOVE FIRST LEVEL NUMBER       */
         MVC   WKMSGID+104(9),WKMSGID                              0519
*             WKMSGTXT(2)=TEXTMSG;  /* MOVE IN 2ND LEV TEXT PORTION  */
         MVI   WKMSGTXT+193,C' '                                   0520
         MVI   WKMSGTXT+194,C' '                                   0520
         MVC   WKMSGTXT+104(89),TEXTMSG(@06)                       0520
*             LENMSG(2)=LENLOCAL;   /* MOVE IN MESSAGE LENGTH        */
         MVC   LENMSG+104(2),LENLOCAL(@06)                         0521
*             INSTPTR=SVCRCIN2(RCODEINX);/* ESTAB ADDR TO INSERT     */
         AL    @11,@CF00622                                        0522
         L     @14,SVCRCIN2-8(@14,@11)                             0522
         ST    @14,INSTPTR                                         0522
*             MSGINST2(1)=MSGINST;  /* MOVE INSERT TO WORK AREA      */
         MVI   MSGINST2+54,C' '                                    0523
         MVI   MSGINST2+55,C' '                                    0523
         MVC   MSGINST2(54),MSGINST(@14)                           0523
*             DISPIN2(1)=INDISP(1); /* MOVE DISPLACEMENT VAL TO INT  */
         SLR   @14,@14                                             0524
         IC    @14,INDISP(,@06)                                    0524
         STH   @14,DISPIN2                                         0524
*             INTPLPTR(1)=ADDR(MSGINST2(1));/* MOVE ADDR TO P.L.     */
         LA    @14,MSGINST2                                        0525
         ST    @14,INTPLPTR(,@10)                                  0525
*             LEV=2;                /* INDICATE TWO LEVEL MESSAGE    */
         MVI   LEV,X'02'                                           0526
*             SIONUMI1=1;           /* INDICATE NO INSERTS IN MSG    */
         MVC   SIONUMI1(4,@05),@CF00115                            0527
*             SIONUMI2=2;           /* INDICATE NO INSERTS IN MSG    */
         MVC   SIONUMI2(4,@05),@CF00119                            0528
*             SIO1STMS=ADDR(MESSAGE(1));/* ESTAB ADDRESSABILITY      */
         LA    @14,MESSAGE                                         0529
         ST    @14,SIO1STMS(,@05)                                  0529
*             SIO2NDMS=ADDR(MESSAGE(2));/* ESTAB ADDRESSABILITY      */
         LA    @14,MESSAGE+104                                     0530
         ST    @14,SIO2NDMS(,@05)                                  0530
*             RTNCODE=0;            /* RESET THE RETURN CODE TO 0    */
         SLR   RTNCODE,RTNCODE                                     0531
*             CALL TERMOUT;         /* HAVE MESSAGE SENT TO TERM     */
         BAL   @14,TERMOUT                                         0532
*             GO TO EXITRCSH;       /* BRANCH TO END OF PROC         */
         B     EXITRCSH                                            0533
*           END;                                                   0534
*       END;                                                       0535
@RF00511 LA    @14,1                                               0535
         AL    @14,RCODEINX                                        0535
         ST    @14,RCODEINX                                        0535
         CH    @14,@CH00251                                        0535
         BNH   @DL00510                                            0535
@DC00510 DS    0H                                                  0536
*   END;                                                           0536
*                                                                  0536
@RF00509 LA    @14,1                                               0536
         AL    @14,SVCINDX                                         0536
         ST    @14,SVCINDX                                         0536
         CH    @14,@CH00251                                        0536
         BNH   @DL00508                                            0536
@DC00508 DS    0H                                                  0537
*/********************************************************************/
*/*                                                                  */
*/* AFTER BOTH TABLES HAVE BEEN SEARCHED WITH NO SUCCESS. THE ERROR  */
*/* MSG THAT DATA HAS BEEN LOST DURING IO PROCESSING WILL BE ISSUED  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0537
*   CALL BADPARM;                   /* IF OUT OF TABLE THEN ERROR    */
         BAL   @14,BADPARM                                         0537
*/********************************************************************/
*/*                                                                  */
*/*                R  RETURN TO I/O CONTROLLER                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0538
*EXITRCSH:                          /* LABEL TO BRANCH TO EXIT OF R  */
*   RETURN CODE(RTNCODE);           /* RETURN TO MAIN SVCERR ROUTIN  */
EXITRCSH L     @14,@SA00014                                        0538
         LM    @00,@12,@SA00014+8                                  0538
         BR    @14                                                 0538
*   END SVCRCSH;                                                   0539
@PB00014 DS    0H                                                  0540
*EXITSERR:                          /* LABEL TO BRANCH TO EXIT       */
*   RETURN CODE(RTNCODE);           /* RETURN TO DRIVER WITH CODE    */
EXITSERR L     @14,@SA00012                                        0540
         LM    @00,@12,@SA00012+8                                  0540
         BR    @14                                                 0540
*   END SVCERR;                                                    0541
*                                                                  0542
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE PROMTING MESSAGE ROUTINE       */
*/*    IT WILL BE INVOKED IF THE USER'S HAS REQUESTED  A PROMPTING   */
*/*    MESSAGE. THE PRIMARY FUNCTION IS:                             */
*/*                                                                  */
*/*        1.  DETERMINE WHICH MESSAGE TO ISSUE                      */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*PTGTROUT:       E  ENTRY TO PUT/GET (PTGT) ROUTINE                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0542
*PTGT:                                                             0542
*   PROCEDURE;                                                     0542
*                                                                  0542
PTGT     STM   @14,@12,@SA00015                                    0542
*/********************************************************************/
*/*                                                                  */
*/*                P  LOCATE AND POINT TO PROMPTING MESSAGE          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0543
*   IF SIO1STMS>0&SIO1STMS<100 THEN /* TEST FOR MSG BEING IN 1ST     */
         L     @14,IOPARMS                                         0543
         L     @14,SIO1STMS(,@14)                                  0543
         LTR   @14,@14                                             0543
         BNP   @RF00543                                            0543
         CH    @14,@CH00256                                        0543
         BNL   @RF00543                                            0543
*     INDXTAB=MSG99PTR;             /* TABLE IF SO SET UP ADDRESS    */
         MVC   INDXTAB(4),MSG99PTR(MSGCSECT)                       0544
*   ELSE                                                           0545
*     IF SIO1STMS>0&SIO1STMS<200 THEN/* TEST IF IN 2ND TAB           */
         B     @RC00543                                            0545
@RF00543 L     @14,IOPARMS                                         0545
         L     @06,SIO1STMS(,@14)                                  0545
         LTR   @06,@06                                             0545
         BNP   @RF00545                                            0545
         CH    @06,@CH00258                                        0545
         BNL   @RF00545                                            0545
*       DO;                                                        0546
*         INDXTAB=MSG199PT;         /* TABLE IF SO SET UP ADDRESS    */
         MVC   INDXTAB(4),MSG199PT(MSGCSECT)                       0547
*         SIO1STMS=SIO1STMS-99;     /* ADJUST TO TABLE VALUES        */
         SH    @06,@CH00259                                        0548
         ST    @06,SIO1STMS(,@14)                                  0548
*       END;                                                       0549
*     ELSE                                                         0550
*       DO;                                                        0550
         B     @RC00545                                            0550
@RF00545 DS    0H                                                  0551
*         CALL BADPARM;             /* IF MSG NOT IN TABLE ERROR     */
         BAL   @14,BADPARM                                         0551
*         GO TO EXITPTGT;           /* BRANCH TO END OF PROCEDURE    */
         B     EXITPTGT                                            0552
*       END;                                                       0553
*   IF AMTINDX<SIO1STMS THEN        /* LOOK AT ACTUAL TAB LEN FOR    */
@RC00545 DS    0H                                                  0554
@RC00543 L     @14,INDXTAB                                         0554
         L     @14,AMTINDX(,@14)                                   0554
         L     @06,IOPARMS                                         0554
         C     @14,SIO1STMS(,@06)                                  0554
         BNL   @RF00554                                            0554
*     DO;                           /* POSSIBLE BAD NUMBER PASSED    */
*       CALL BADPARM;               /* IF MSG NUM EXCEEDS LEN-ERROR  */
         BAL   @14,BADPARM                                         0556
*       GO TO EXITPTGT;             /* BRANCH TO END OF PROCEDURE    */
         B     EXITPTGT                                            0557
*     END;                                                         0558
*   MSGPTR=INDXPTR(SIO1STMS);       /* ESTAB ADDRESSABILITY TO MSG   */
@RF00554 L     @14,IOPARMS                                         0559
         L     @14,SIO1STMS(,@14)                                  0559
         SLA   @14,2                                               0559
         L     @06,INDXTAB                                         0559
         L     @14,INDXPTR-4(@14,@06)                              0559
         ST    @14,MSGPTR                                          0559
*   IF INDISP(1)='FF'X THEN         /* TEST IF NULL ENTRY            */
         CLI   INDISP(@14),255                                     0560
         BNE   @RF00560                                            0560
*     DO;                                                          0561
*       CALL BADPARM;               /* CALL FOR ERROR PROC BAD PRMS  */
         BAL   @14,BADPARM                                         0562
*       GO TO EXITPTGT;             /* BRANCH TO EXIT ROUTINE        */
         B     EXITPTGT                                            0563
*     END;                                                         0564
*   MESSAGE(1)=LOCALMSG;            /* MOVE MESSAGE INTO MYWK AREA   */
@RF00560 MVI   MESSAGE+93,C' '                                     0565
         MVC   MESSAGE+94(10),MESSAGE+93                           0565
         L     @14,MSGPTR                                          0565
         MVC   MESSAGE(93),LOCALMSG(@14)                           0565
*   SIONUMI1=1;                     /* SET NUM OF INSERTS TO ONE     */
         L     @14,IOPARMS                                         0566
         MVC   SIONUMI1(4,@14),@CF00115                            0566
*   SIO1STMS=ADDR(MESSAGE(1));      /* STORE ADDRESS OF MSG IN P.L.  */
         LA    @06,MESSAGE                                         0567
         ST    @06,SIO1STMS(,@14)                                  0567
*/********************************************************************/
*/*                                                                  */
*/*                S  CALL TERMOUT: HAVE MESSAGE SENT OUT TO USER    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0568
*   LEV=3;                          /* INDICATE PTGT TYPE REQ'T      */
         MVI   LEV,X'03'                                           0568
*   CALL TERMOUT;                   /* HAVE THE I/O PERFORMED        */
         BAL   @14,TERMOUT                                         0569
*/********************************************************************/
*/*                                                                  */
*/*PTGTEND:        R  RETURN TO IO CONTROLLER                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0570
*EXITPTGT:                          /* LABEL USED TO BRANCH TO EXIT  */
*   RETURN CODE(RTNCODE);           /* RETURN TO DRIVER WITH CODE    */
EXITPTGT L     @14,@SA00015                                        0570
         LM    @00,@12,@SA00015+8                                  0570
         BR    @14                                                 0570
*   END PTGT;                                                      0571
*                                                                  0572
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE TERMINAL OUTPUT ROUTINE        */
*/*    IT WILL BE INVOKED IF THE DATA OR MESSAGE IS TO BE SENT       */
*/*    TO THE USER'S TERMINAL.                                       */
*/*    THE PRIMARY FUNCTIONS ARE:                                    */
*/*                                                                  */
*/*        1.  DETERMINE WHICH TYPE PUTLINE MACROS SHOULD BE USED    */
*/*        2.  ISSUE THE APPROPRIATE MACROS                          */
*/*        3.  ANALYZE RETURN CODES AND RETURN                       */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*TERMOUT:        E  TERMOUT ROUTINE TO ISSUE OUTPUT TO TERMINAL    */
*/*                P  PREPARE COMMON OPERATIONS TO ALL OUTPUT        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0572
*TERMOUT:                                                          0572
*   PROCEDURE;                                                     0572
TERMOUT  STM   @14,@12,@SA00016                                    0572
*   RFY                                                            0573
*    (DSECT10,                                                     0573
*     IOPLREG,                                                     0573
*     IOPBREG,                                                     0573
*     OLD) RSTD;                    /* THESE REGS NOT FOR USE        */
*   DCL                                                            0574
*     SKIPLINE FIXED(15) BASED(SIODATA) BDY(HWORD);/* DETERMINE SKIP */
*   DCL                                                            0575
*     PUTSPACE CHAR(12) GEND;       /* ID LIST FORM OF PUTLINE       */
*   DCL                                                            0576
*     PUTDATA CHAR(12) GEND;        /* ID LIST FORM OF PUTLINE       */
*   DCL                                                            0577
*     PUTMSG2 CHAR(12) GEND;        /* ID LIST FORM OF PUTLINE       */
*   DCL                                                            0578
*     PUTGETIT CHAR(16) GEND;       /* ID LIST FORM OF PUTLINE       */
*   DCL                                                            0579
*     INBUF PTR(31) GEND;           /* PTR IN TCOM OF INPUT LINE     */
*   DCL                                                            0580
*     PRMREG5 REGISTER(5) RSTD;     /* DEFINE REG TO PASS TO P.L.    */
*   DCL                                                            0581
*     ECTMSGF BIT(8) GEND;          /* DEFINE FLAG BYTE FLUSH 2 LEV  */
*   DCL                                                            0582
*     1 PUTGETDS BASED(IOPBREG),    /* OVERLAY STRUCTURE PUTGET PB   */
*      2 * CHAR(12),                /* FILLER                        */
*      2 INBUFPTR PTR(31);          /* POINTER TO PROMPT LINE BACK   */
*   DCL                                                            0583
*     1 NULLINE STATIC BDY(WORD),   /* IF CALLER WANTS BLANK LINE    */
*      2 * FIXED(15) INIT(5),       /* TOTAL LEN INCL HEADER         */
*      2 * FIXED(15) INIT(0),       /* RESERVED CONTROL BYTE PUTLIN  */
*      2 * CHAR(1) INIT(' ');       /* ONE BLANK WILL ACHIEVE SKIP   */
*   DCL                                                            0584
*     PARSEMSG CHAR(256) BASED(OUTBUF);/* DEFINE LOCATION OF MSG     */
*   DCL                                                            0585
*     OUTBUF PTR(31) GEND;          /* DEFINE POINTER TO OUTBUF      */
*   DCL                                                            0586
*     1 FMTMSG BDY(HWORD) BASED(FMATMSG),/* DEFINE FORMATTED MSG     */
*      2 FMTMSGLN FIXED(15),        /* DEFINE LENGTH OF MSG          */
*      2 * FIXED(15),               /* FILLER                        */
*      2 * CHAR(*);                 /* TEXT                          */
*   IOPLREG=ADDR(USERIOPL);         /* ESTAB ADDR TO IOPL FOR P.L.   */
         LA    IOPLREG,USERIOPL                                    0587
*   IOPBREG=ADDR(OUTPUTPB);         /* ESTAB ADDR TO IOPB FOR P.L.   */
         LA    IOPBREG,OUTPUTPB                                    0588
*   OLD=ADDR(OLDPTR2);              /* SET UP ADDR TO OLD PARM LST   */
         L     OLD,IOPARMS                                         0589
         LA    OLD,OLDPTR2(,OLD)                                   0589
*   USERIOPL=PARMLIST;              /* MOVE THE UPT,ECT & ECB TO PL  */
         MVI   USERIOPL+12,C' '                                    0590
         MVC   USERIOPL+13(3),USERIOPL+12                          0590
         MVC   USERIOPL(12),PARMLIST                               0590
*/********************************************************************/
*/*                                                                  */
*/*                S  CALL ATTNCK: CHECK FOR ATTN OR LOGOFF          */
*/*                P  DETERMINE WHICH FORM PUTLINE SHOULD BE ISSUED  */
*/*                P  ISSUE PUTLINE OR PUTGET MACRO                  */
*/*                S  CALL R.C. CHECK: INTERPRUPT RTN CODE           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0591
*   CALL ATTNCK;                    /* BEFORE SENDING OUTPUT CK ATT  */
         BAL   @14,ATTNCK                                          0591
*   IF RTNCODE^=0 THEN              /* SEE IF ONE IS SCHEDULED       */
         SLR   @14,@14                                             0592
         CR    RTNCODE,@14                                         0592
         BNE   @RT00592                                            0592
*     GO TO EXITTERM;               /* IF SO GO TO EXIT              */
*   IF LEV=0 THEN                   /* TEST FOR DATA OUTPUT          */
         CLI   LEV,0                                               0594
         BNE   @RF00594                                            0594
*     DO;                                                          0595
*       IF SKIPLINE=0 THEN          /* CHECK FOR NULL LINE           */
         L     @11,IOPARMS                                         0596
         L     @11,SIODATA(,@11)                                   0596
         CH    @14,SKIPLINE(,@11)                                  0596
         BNE   @RF00596                                            0596
*         DO;                                                      0597
*           OUTPUTPB=PUTSPACE;      /* SEND EDIT FORM PUTL'E TO PL   */
         MVI   OUTPUTPB+12,C' '                                    0598
         MVC   OUTPUTPB+13(3),OUTPUTPB+12                          0598
         MVC   OUTPUTPB(12),PUTSPACE                               0598
*           MSGINST1(1)=NULLINE;    /* MOVE INSERT TO WORKAREA       */
         MVI   MSGINST1+5,C' '                                     0599
         MVC   MSGINST1+6(50),MSGINST1+5                           0599
         MVC   MSGINST1(5),NULLINE                                 0599
*           OLD=ADDR(MSGINST1(1));  /* SET UP ADDRESS IN P.L.        */
         LA    OLD,MSGINST1                                        0600
*         END;                                                     0601
*       ELSE                                                       0602
*         DO;                                                      0602
         B     @RC00596                                            0602
@RF00596 DS    0H                                                  0603
*           OUTPUTPB=PUTDATA;       /* SEND DATA PUTLINE LIST TO PL  */
         MVI   OUTPUTPB+12,C' '                                    0603
         MVC   OUTPUTPB+13(3),OUTPUTPB+12                          0603
         MVC   OUTPUTPB(12),PUTDATA                                0603
*           OLD=SIODATA;            /* POINT TO DATA LINE            */
         L     @14,IOPARMS                                         0604
         L     OLD,SIODATA(,@14)                                   0604
*         END;                                                     0605
*                                                                  0605
*/********************************************************************/
*/*                                                                  */
*/*    ISSUE PUTLINE MACRO FOR A DATA LINE TO USER'S TERMINAL        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0606
*       GENERATE;                                                  0606
@RC00596 DS    0H                                                  0606
         PUTLINE PARM=(5),OUTPUT=((4),TERM,SINGLE,DATA),MF=(E,(1))
*       IF RTNCODE^=0 THEN          /* SEE IF PROBLEMS OCCURRED      */
         LTR   RTNCODE,RTNCODE                                     0607
         BZ    @RF00607                                            0607
*         CALL RCCHECK;             /* INTERPRET RETURN CODE         */
         BAL   @14,RCCHECK                                         0608
*     END;                                                         0609
*   ELSE                                                           0610
*     IF LEV=1 THEN                 /* SEE IF SINGLE LEV MESSAGE     */
         B     @RC00594                                            0610
@RF00594 CLI   LEV,1                                               0610
         BNE   @RF00610                                            0610
*       DO;                                                        0611
*         OUTPUTPB=PUTMSG;          /* MOVE LIST FORM PUTLINE TO PL  */
         MVI   OUTPUTPB+12,C' '                                    0612
         MVC   OUTPUTPB+13(3),OUTPUTPB+12                          0612
         MVC   OUTPUTPB(12),PUTMSG                                 0612
*         OLD=ADDR(SIONUMI1);       /* ADJUST OUTPUT LINE DES PTR    */
         L     OLD,IOPARMS                                         0613
         LA    OLD,SIONUMI1(,OLD)                                  0613
*/********************************************************************/
*/*                                                                  */
*/*    ISSUE PUTLINE MACRO FOR A SINGLE LEVEL INFORMATIONAL MESSAGE  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0614
*         GENERATE;                                                0614
         PUTLINE PARM=(5),OUTPUT=((4),TERM,SINGLE,INFOR),MF=(E,(1))
*         IF RTNCODE^=0 THEN        /* SEE IF PROBLEMS OCCURRED      */
         LTR   RTNCODE,RTNCODE                                     0615
         BZ    @RF00615                                            0615
*           CALL RCCHECK;           /* INTERPRET RETURN CODE         */
         BAL   @14,RCCHECK                                         0616
*       END;                                                       0617
*     ELSE                                                         0618
*       IF LEV=2 THEN               /* SEE IF SINGLE LEV MESSAGE     */
         B     @RC00610                                            0618
@RF00610 CLI   LEV,2                                               0618
         BNE   @RF00618                                            0618
*         IF TSTFLGS4(8)='1'B THEN  /* SEE IF CALLER IN PARSE VAL    */
         TM    TSTFLGS4,B'00000001'                                0619
         BNO   @RF00619                                            0619
*           DO;                                                    0620
*             OUTPUTPB=PUTMSG;      /* MOVE LIST FORM PUTLINE TO PL  */
         MVI   OUTPUTPB+12,C' '                                    0621
         MVC   OUTPUTPB+13(3),OUTPUTPB+12                          0621
         MVC   OUTPUTPB(12),PUTMSG                                 0621
*             OLD=ADDR(SIONUMI1);   /* ADJUST OUTPUT LINE DES PTR    */
         L     OLD,IOPARMS                                         0622
         LA    OLD,SIONUMI1(,OLD)                                  0622
*/********************************************************************/
*/*                                                                  */
*/*    ISSUE PUTLINE MACRO FOR FIRST HALF OF TWO LEVEL MESSAGE       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0623
*             GENERATE;                                            0623
         PUTLINE PARM=(5),OUTPUT=((4),TERM,SINGLE,INFOR),MF=(E,(1))
*             IF RTNCODE^=0 THEN    /* SEE IF PROBLEMS OCCURRED      */
         LTR   RTNCODE,RTNCODE                                     0624
         BZ    @RF00624                                            0624
*               CALL RCCHECK;       /* INTERPRET RETURN CODE         */
         BAL   @14,RCCHECK                                         0625
*             IF RTNCODE=0 THEN     /* IF OK THEN FORMAT SECOND      */
@RF00624 LTR   RTNCODE,RTNCODE                                     0626
         BNZ   @RF00626                                            0626
*               DO;                                                0627
*                 OUTPUTPB=PUTMSG;  /* MOVE LIST FORM PUTLINE TO PL  */
         MVI   OUTPUTPB+12,C' '                                    0628
         MVC   OUTPUTPB+13(3),OUTPUTPB+12                          0628
         MVC   OUTPUTPB(12),PUTMSG                                 0628
*                 OLD=ADDR(SIONUMI2);/* ADJUST OUTPUT LINE DES PTR   */
         L     OLD,IOPARMS                                         0629
         LA    OLD,SIONUMI2(,OLD)                                  0629
*/********************************************************************/
*/*                                                                  */
*/*    ISSUE PUTLINE MACRO FOR SECOND HALF OF TWO LEVEL MESSAGE      */
*/*    THE SECOND LEVEL WILL BE FORMATTED ONLY.                      */
*/*                                                                  */
*/********************************************************************/
*                                                                  0630
*                 GENERATE;                                        0630
         PUTLINE PARM=(5),OUTPUT=((4),FORMAT,SINGLE,INFOR),MF=(E,(1))
*                 IF RTNCODE^=0 THEN/* SEE IF PROBLEMS OCCURRED      */
         LTR   RTNCODE,RTNCODE                                     0631
         BZ    @RF00631                                            0631
*                   CALL RCCHECK;   /* INTERPRET RETURN CODE         */
         BAL   @14,RCCHECK                                         0632
*                 IF RTNCODE=0 THEN /* IF EVERY THING IS OK PASS AD  */
@RF00631 LTR   RTNCODE,RTNCODE                                     0633
         BNZ   @RF00633                                            0633
*                   DO;                                            0634
*                     PRMREG5=FMTMSGLN;/* PICK UP LENGTH             */
         L     @14,FMATMSG                                         0635
         LH    PRMREG5,FMTMSGLN(,@14)                              0635
*                     PRMREG4=FMATMSG;/* PICK UP ADDRESS OF MSG      */
         LR    PRMREG4,@14                                         0636
*                     IF PRMREG5>256 THEN/* SEE IF MESSAGE IS TOO BIG*/
         LA    @11,256                                             0637
         CR    PRMREG5,@11                                         0637
         BNH   @RF00637                                            0637
*                       FMTMSGLN=256;/* REDUCE TO MAXIMUM            */
         STH   @11,FMTMSGLN(,@14)                                  0638
*                     PARSEMSG(1:FMTMSGLN)=FMTMSG(1:FMTMSGLN);/* MOVE
*                                      MSG                           */
@RF00637 L     @14,OUTBUF                                          0639
         L     @11,FMATMSG                                         0639
         LH    @06,FMTMSGLN(,@11)                                  0639
         BCTR  @06,0                                               0639
         EX    @06,@SM00629                                        0639
*                     GENERATE;                                    0640
         FREEMAIN RC,LV=(PRMREG5),A=(PRMREG4),SP=1
*                     IF RTNCODE^=0 THEN/* TEST FOR ERROR            */
         LTR   RTNCODE,RTNCODE                                     0641
         BZ    @RF00641                                            0641
*                       DO;                                        0642
*                         PRMREG4=RTNCODE;/* TRANSFER RTNCODE        */
         LR    PRMREG4,RTNCODE                                     0643
*                         IOMSGPLT='00'X;/* CLEAR PARM LIST          */
         XC    IOMSGPLT+1(83),IOMSGPLT+1                           0644
         MVI   IOMSGPLT,X'00'                                      0644
*                         TSTFLGS4(8)='0'B;/* TURN OFF VALIDITY BIT  */
         NI    TSTFLGS4,B'11111110'                                0645
*                         GENERATE REFS(@IOVCON);                  0646
         IKJEGSIO SVCERR,SVC=120,RC=(4),ID=IO016,VCONBR=YES,           *
               MF=(E,IOMSGPLT)
*                         IF RTNCODE<16 THEN/* TEST FOR ATTN         */
         CH    RTNCODE,@CH00095                                    0647
         BNL   @RF00647                                            0647
*                           RTNCODE=4;/* INDICATE ERROR              */
         LA    RTNCODE,4                                           0648
*                         TSTFLGS4(8)='1'B;/* TURN ON VALIDITY BIT   */
@RF00647 OI    TSTFLGS4,B'00000001'                                0649
*                         GO TO EXITTERM;/* RETURN                   */
         B     EXITTERM                                            0650
*                       END;                                       0651
*                   END;                                           0652
*               END;                                               0653
*           END;                                                   0654
*         ELSE                                                     0655
*           DO;                                                    0655
         B     @RC00619                                            0655
@RF00619 DS    0H                                                  0656
*             OLDPTR2=ADDR(ZEROOLD);/* SET UP POINTER TO SEC LEV     */
         L     @14,IOPARMS                                         0656
         LA    @11,ZEROOLD(,@14)                                   0656
         ST    @11,OLDPTR2(,@14)                                   0656
*             OUTPUTPB=PUTMSG2;     /* MOVE LIST FORM PUTLINE TO PL  */
         MVI   OUTPUTPB+12,C' '                                    0657
         MVC   OUTPUTPB+13(3),OUTPUTPB+12                          0657
         MVC   OUTPUTPB(12),PUTMSG2                                0657
*             ZEROOLD='00'X;        /* ZERO THE NEXT OLD PTR         */
         SLR   @11,@11                                             0658
         ST    @11,ZEROOLD(,@14)                                   0658
*/********************************************************************/
*/*                                                                  */
*/*    ISSUE PUTLINE MACRO FOR TWO LEVEL MESSAGE                     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0659
*             GENERATE;                                            0659
         PUTLINE PARM=(5),OUTPUT=((4),TERM,MULTLVL,INFOR),MF=(E,(1))
*             IF RTNCODE^=0 THEN    /* SEE IF PROBLEMS OCCURRED      */
         LTR   RTNCODE,RTNCODE                                     0660
         BZ    @RF00660                                            0660
*               CALL RCCHECK;       /* INTERPRET RETURN CODE         */
         BAL   @14,RCCHECK                                         0661
*           END;                                                   0662
*       ELSE                                                       0663
*         IF LEV=3 THEN             /* SEE IF SINGLE LEV MESSAGE     */
         B     @RC00618                                            0663
@RF00618 CLI   LEV,3                                               0663
         BNE   @RF00663                                            0663
*           DO;                                                    0664
*             OUTPUTPB=PUTGETIT;    /* MOVE LIST FORM PUTLINE TO PL  */
         MVC   OUTPUTPB(16),PUTGETIT                               0665
*             OLD=ADDR(SIONUMI1);   /* SET UP ADDR OF PTGT OLD       */
         L     OLD,IOPARMS                                         0666
         LA    OLD,SIONUMI1(,OLD)                                  0666
*/********************************************************************/
*/*                                                                  */
*/*    ISSUE PUTGET MACRO TO PROMPT THE USER FOR A RESPONSE          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0667
*             GENERATE;                                            0667
         USING ECT,DSECT10             SET UP ADDRESSABLITY TO ECT
         PUTGET PARM=(5),OUTPUT=((4),SINGLE,MODE),MF=(E,(1)) ISSUE CALL
*             IF RTNCODE=12 THEN    /* TEST FOR NEED TO FLUSH 2 LEV  */
         CH    RTNCODE,@CH00058                                    0668
         BNE   @RF00668                                            0668
*               DO;                                                0669
*                 OLD=ADDR(SIONUMI1);/* SET UP ADDR OF PTGT OLD      */
         L     OLD,IOPARMS                                         0670
         LA    OLD,SIONUMI1(,OLD)                                  0670
*                 DSECT10=TSTECT;   /* GET ADDR OF ECT IN DSECT REG  */
         L     DSECT10,TSTECT                                      0671
*                 ECTMSGF(1)='1'B;  /* TURN ON THE FLUSH 2 LEV BIT   */
         OI    ECTMSGF,B'10000000'                                 0672
*/********************************************************************/
*/*                                                                  */
*/*    ISSUE PUTGET MACRO TO PROMPT THE USER FOR A RESPONSE          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0673
*                 GENERATE;                                        0673
         PUTGET PARM=(5),OUTPUT=((4),SINGLE,MODE),MF=(E,(1)) REISSUE
*                 CALL RCCHECK;     /* ALTER RC TO MY RC'S           */
         BAL   @14,RCCHECK                                         0674
*                 IF RTNCODE^=0 THEN/* IF CONVERTED RC NOT OK EXIT   */
         LTR   RTNCODE,RTNCODE                                     0675
         BNZ   @RT00675                                            0675
*                   GO TO EXITTERM; /* BRANCH TO END OF ROUTINE      */
*               END;                                               0677
*             ELSE                                                 0678
*               DO;                                                0678
         B     @RC00668                                            0678
@RF00668 DS    0H                                                  0679
*                 CALL RCCHECK;     /* CALL RTN CODE ANALYZER        */
         BAL   @14,RCCHECK                                         0679
*                 IF RTNCODE^=0 THEN/* IF ANALYZER SET NON-ZERO      */
         LTR   RTNCODE,RTNCODE                                     0680
         BNZ   @RT00680                                            0680
*                   GO TO EXITTERM; /* BRANCH TO END OF ROUTINE      */
*               END;                                               0682
*             INBUF=INBUFPTR;       /* MOVE ADDR RTN'D LINE TO TCOM  */
@RC00668 MVC   INBUF(4),INBUFPTR(IOPBREG)                          0683
*           END;                                                   0684
*         ELSE                                                     0685
*           RTNCODE=4;              /* IF LEV NUM NO MATCHED ERROR   */
         B     @RC00663                                            0685
@RF00663 LA    RTNCODE,4                                           0685
*/********************************************************************/
*/*                                                                  */
*/*                R  RETURN TO CALLING ROUTINE                      */
*/*                                                                  */
*/********************************************************************/
*                                                                  0686
*EXITTERM:                          /* LABEL USED TO BRANCH TO EXIT  */
*   RETURN CODE(RTNCODE);           /* RETURN TO CALLING ROUTINE     */
@RC00663 DS    0H                                                  0686
@RC00618 DS    0H                                                  0686
@RC00610 DS    0H                                                  0686
@RC00594 DS    0H                                                  0686
EXITTERM L     @14,@SA00016                                        0686
         LM    @00,@12,@SA00016+8                                  0686
         BR    @14                                                 0686
*   RFY                                                            0687
*    (DSECT10,                                                     0687
*     IOPLREG,                                                     0687
*     IOPBREG,                                                     0687
*     OLD) UNRSTD;                  /* ALLOW REGS TO BE USED         */
*   END TERMOUT;                    /* END OF PROCEDURE              */
*                                                                  0689
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE RETURN CODE ANALYZER ROUTINE   */
*/*    IT WILL BE INVOKED TO ANALYZE THE PUTLINE RETURN CODES        */
*/*    THE PRIMARY FUNCTIONS ARE:                                    */
*/*                                                                  */
*/*        1.  DETERMINE IF AN ERROR OCCURRED                        */
*/*        2.  CONVERT THE RETURN CODE TO TSO-TEST RETURN CODES      */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*RCCHECK:        E  RTN CODE ANALYZER                              */
*/*                                                                  */
*/********************************************************************/
*                                                                  0689
*RCCHECK:                                                          0689
*   PROCEDURE;                                                     0689
*                                                                  0689
RCCHECK  STM   @14,@12,12(@13)                                     0689
*/********************************************************************/
*/*                                                                  */
*/*                P  DETERMINE WHICH IO MAC WAS USED PUTLINE ETC.   */
*/*                P  BASED ON TYPE MACRO ADJUST RTN CODE TO MY RC'S */
*/*                                                                  */
*/********************************************************************/
*                                                                  0690
*   IF LEV=0×LEV=1×LEV=2 THEN       /* ALL PUTLINE MACROS ARE ALIKE  */
         CLI   LEV,0                                               0690
         BE    @RT00690                                            0690
         CLI   LEV,1                                               0690
         BE    @RT00690                                            0690
         CLI   LEV,2                                               0690
         BNE   @RF00690                                            0690
@RT00690 DS    0H                                                  0691
*     IF RTNCODE=4 THEN             /* CHECK FOR ATTN IN PROCESS     */
         CH    RTNCODE,@CH00146                                    0691
         BNE   @RF00691                                            0691
*       RTNCODE=16;                 /* IF SO ADJUST TO OUR RTN CODE  */
         LA    RTNCODE,16                                          0692
*     ELSE                                                         0693
*       IF RTNCODE=8 THEN           /* CHECK FOR NOWAIT BY USER      */
         B     @RC00691                                            0693
@RF00691 CH    RTNCODE,@CH00034                                    0693
         BNE   @RF00693                                            0693
*         RTNCODE=0;                /* USER DID NOT WANT MSG OK      */
         SLR   RTNCODE,RTNCODE                                     0694
*       ELSE                                                       0695
*         RTNCODE=4;                /* ALL OTHER RTN CODES MEAN ERR  */
         B     @RC00693                                            0695
@RF00693 LA    RTNCODE,4                                           0695
*   ELSE                                                           0696
*     IF LEV=3 THEN                 /* ONLY ONE LEFT IS PUTGET       */
         B     @RC00690                                            0696
@RF00690 CLI   LEV,3                                               0696
         BNE   @RF00696                                            0696
*       IF RTNCODE=0 THEN           /* IF RTN CODE IS ZERO NO ADJ'T  */
         LTR   RTNCODE,RTNCODE                                     0697
         BNZ   @RF00697                                            0697
*         TSTFLGS4(1)='1'B;         /* INDICATE TO MAINL'E NOT ST'K  */
         OI    TSTFLGS4,B'10000000'                                0698
*       ELSE                                                       0699
*         IF RTNCODE=4 THEN         /* RTN MESSAGE IN CHAIN          */
         B     @RC00697                                            0699
@RF00697 CH    RTNCODE,@CH00146                                    0699
         BNE   @RF00699                                            0699
*           RTNCODE=0;              /* OK TO CONTINUE                */
         SLR   RTNCODE,RTNCODE                                     0700
*         ELSE                                                     0701
*           IF RTNCODE=8 THEN       /* SEE IF ATTN IN PROCESS        */
         B     @RC00699                                            0701
@RF00699 CH    RTNCODE,@CH00034                                    0701
         BNE   @RF00701                                            0701
*             RTNCODE=16;           /* IF SO CHANGE TO OUR CODE      */
         LA    RTNCODE,16                                          0702
*           ELSE                                                   0703
*             RTNCODE=4;            /* ALL OTHER RTN CODES MEAM ERR  */
         B     @RC00701                                            0703
@RF00701 LA    RTNCODE,4                                           0703
*     ELSE                                                         0704
*       RTNCODE=4;                  /* NO MATCH IN LEV # MEANS ERR   */
         B     @RC00696                                            0704
@RF00696 LA    RTNCODE,4                                           0704
*/********************************************************************/
*/*                                                                  */
*/*EXITRCCK:       R  RETURN TO PROCESSING                           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0705
*EXITRCCK:                          /* LABEL USED TO EXIT ROUTINE    */
*   RETURN CODE(RTNCODE);           /* RETURN TO CALLING ROUTINE     */
@RC00696 DS    0H                                                  0705
@RC00690 DS    0H                                                  0705
EXITRCCK L     @14,12(,@13)                                        0705
         LM    @00,@12,20(@13)                                     0705
         BR    @14                                                 0705
*   END RCCHECK;                    /* END OF RTN CODE ANALYZER      */
*                                                                  0707
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE ATTENTION CHECKING ROUTINE     */
*/*    IT WILL BE INVOKED TO TEST FOR ATTENTIONS IN PROCESS          */
*/*    THE PRIMARY FUNCTIONS ARE:                                    */
*/*                                                                  */
*/*        1.  DETERMINE IF AN ATTENTION OR LOGOFF HAS BEEN REQUESTED*/
*/*        2.  CONVERT THE RETURN CODE TO TSO-TEST RETURN CODE 16    */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*ATTNCHK:        E  ATTENTION CHECK ROUTINE                        */
*/*                D  (NO,,YES,%RTN2)                              0707
*/*                   IS THE LOGON ECB POSTED ?                      */
*/*                D  (YES,,NO,EXITATTN)                           0707
*/*                   IS THE ATTENTION ECB POSTED ?                  */
*/*%RTN2:          P  SET THE RETURN CODE TO 16 (ATTN/LOGOFF)        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0707
*ATTNCK:                                                           0707
*   PROCEDURE;                                                     0707
ATTNCK   STM   @14,@12,12(@13)                                     0707
*   DCL                                                            0708
*     ECBLOG PTR(31) GEND;          /* DEFINE LOGON LOGOFF ECB PTR   */
*   DCL                                                            0709
*     ECBTMPA PTR(31) GEND;         /* DEFINE ATTENTION ECB PTR      */
*   DCL                                                            0710
*     LOGONOFF BIT(8) BASED(ECBLOG);/* DEFINE ECB HIGH ORDER BYTE    */
*   DCL                                                            0711
*     ATTNHIT BIT(8) BASED(ECBTMPA);/* DEFINE ECB HIGH ORDER BYTE    */
*   IF LOGONOFF(2)='1'B×ATTNHIT(2)='1'B THEN/* TEST BIT BEING ON     */
         L     @14,ECBLOG                                          0712
         TM    LOGONOFF(@14),B'01000000'                           0712
         BO    @RT00712                                            0712
         L     @14,ECBTMPA                                         0712
         TM    ATTNHIT(@14),B'01000000'                            0712
         BNO   @RF00712                                            0712
@RT00712 DS    0H                                                  0713
*     RTNCODE=16;                   /* IF EITHER BIT IS ON SET RC16  */
         LA    RTNCODE,16                                          0713
*/********************************************************************/
*/*                                                                  */
*/*EXITATTN:       R  RETURN TO PROCESSING                           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0714
*EXITATTN:                          /* LABEL TO INDICATE END ROUT'E  */
*   RETURN CODE(RTNCODE);           /* RETURN TO CALLING ROUTINE     */
@RF00712 DS    0H                                                  0714
EXITATTN L     @14,12(,@13)                                        0714
         LM    @00,@12,20(@13)                                     0714
         BR    @14                                                 0714
*   END ATTNCK;                     /* END OF ROUTINE                */
*                                                                  0716
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE BAD INPUT PARMS MESSAGE ROUTINE*/
*/*    IT WILL BE INVOKED TO ISSUE A MESSAGE TO USER OF LOST OUTPUT  */
*/*    THE PRIMARY FUNCTION IS:                                      */
*/*                                                                  */
*/*        1.  ISSUE THE ERROR MESSAGE AND SET THE RTN CODE TO 12    */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*BADPARM:        E  BADPARM ROUTINE-ISSUE ERROR MESSAGE DATA LOST  */
*/*                S  CALL I/O: ISSUE ERROR MESSAGE DATA LOST        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0716
*BADPARM:                                                          0716
*   PROCEDURE;                                                     0716
BADPARM  STM   @14,@12,@SA00019                                    0716
*   IOMSGPLT='00'X;                 /* ZERO OUT PARM LIST            */
         XC    IOMSGPLT+1(83),IOMSGPLT+1                           0717
         MVI   IOMSGPLT,X'00'                                      0717
*   GENERATE;                                                      0718
*           REFS(@IOVCON);
         IKJEGSIO MSG,FIRST=M0042,ID=I0016,VCONBR=YES,MF=(E,IOMSGPLT)
*   RTNCODE=12;                     /* SET RETURN CODE TO BAD PARM   */
         LA    RTNCODE,12                                          0719
*/********************************************************************/
*/*                                                                  */
*/*EXITBPRM:       R  RETURN TO PROCESSING                           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0720
*EXITBPRM:                          /* LABEL USED TO EXIT ROUTINE    */
*   RETURN CODE(RTNCODE);           /* RETURN TO CALLING ROUTINE     */
EXITBPRM L     @14,@SA00019                                        0720
         LM    @00,@12,@SA00019+8                                  0720
         BR    @14                                                 0720
*   END BADPARM;                    /* END OF RTN CODE ANALYZER      */
*                                                                  0722
*/********************************************************************/
*/*                                                                  */
*/*DATAROUT:       E  DATA REQUEST ROUTINE                           */
*/*                D  (YES,,NO,%CONT4)                             0722
*/*                   IS THIS REQUEST TO A DATA SET ?                */
*/*                S  (,%RTN3)                                     0722
*/*                   CALL D.S. ROUT.:  PUT DATA INTO DATA SET       */
*/*%CONT4:         S  CALL TERM ROUT.:  PUT DATA OUT TO TERMINAL     */
*/*%RTN3:          R  RETURN TO I/O CONTROLLER                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0722
*DATA:                                                             0722
*   PROCEDURE;                                                     0722
DATA     STM   @14,@12,@SA00020                                    0722
*   DCL                                                            0723
*     TSTFLGS1 BIT(8) GEND;         /* DEFINE FLG WHERE TSTPRINT SW  */
*   RTNCODE=0;                      /* INITIALIZE RTNCODE TO ZERO    */
         SLR   RTNCODE,RTNCODE                                     0724
*   IF TSTFLGS1(3)='1'B THEN        /* SEE IF DATA GOES TO DATA SET  */
         TM    TSTFLGS1,B'00100000'                                0725
         BNO   @RF00725                                            0725
*     CALL DATASET;                 /* IF SO CALL ROUTINE FOR D.S.   */
         BAL   @14,DATASET                                         0726
*   ELSE                                                           0727
*     DO;                                                          0727
         B     @RC00725                                            0727
@RF00725 DS    0H                                                  0728
*       LEV=0;                      /* INDICATE DATA NOT MESSAGE     */
         MVI   LEV,X'00'                                           0728
*       CALL TERMOUT;               /* HAVE DATA SENT TO TERMINAL    */
         BAL   @14,TERMOUT                                         0729
*     END;                                                         0730
*   RETURN CODE(RTNCODE);           /* RETURN TO DRIVER WITH CODE    */
@RC00725 L     @14,@SA00020                                        0731
         LM    @00,@12,@SA00020+8                                  0731
         BR    @14                                                 0731
*   END DATA;                                                      0732
*                                                                  0733
*/********************************************************************/
*/*                                                                  */
*/*DATASET:        E  DATA SET PROCESSOR                             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0733
*DATASET:                                                          0733
*   PROCEDURE;                                                     0733
DATASET  STM   @14,@12,@SA00021                                    0733
*   RESPECIFY                                                      0734
*     DSECT10 RSTD;                 /* TELL PLS NOT TO USE REG HERE  */
*   DCL                                                            0735
*     TSTIODCB PTR(31) GEND;        /* ADDRESS TO OPEN DCB IN TCOM   */
*   DCL                                                            0736
*     LISTDCB CHAR(*) GEND;         /* ADDRESS OF LIST MAC OF DCB    */
*   DCL                                                            0737
*     LISTOPEN CHAR(*) GEND;        /* ADDRESS OF LIST MAC OF OPEN   */
*   DCL                                                            0738
*     CLFORM CHAR(4) GEND;          /* DEFINE LIST FORM OF CLOSE     */
*   DCL                                                            0739
*     DSECT4 REGISTER(4) RSTD;      /* REG USED FOR ADDR OF DSECT    */
*   DCL                                                            0740
*     DSECT11 REGISTER(11) RSTD;    /* REG USED FOR ADDR OF DSECT    */
*   DCL                                                            0741
*     1 DSNAMPDE BDY(WORD) BASED(SIODSN),/* STRUTURE USED DAIR       */
*      2 STRNGPTR PTR(31),          /* POINTER TO DSNAME             */
*      2 DSL FIXED(15),             /* LENGTH OF DSNAME              */
*      2 FLAGRES1 BIT(15),          /* FLAG BYTE                     */
*      2 PTRMEMBR PTR(31),          /* POINTER TO MEMBER NAME        */
*      2 LENMEMBR FIXED(15),        /* MEMBER NAME LENGTH            */
*      2 FLAGRES2 BIT(15),          /* FLAG BYTE                     */
*      2 PSWRDPTR PTR(31),          /* POINTER TO PASSWORD           */
*      2 LENPSWRD FIXED(15),        /* LENGTH OF PASS WORD           */
*      2 FLAGRES3 BIT(15);          /* FLAG BYTES                    */
*   DCL                                                            0742
*     IOTSTWK PTR(31);              /* VARIABLE TO STORE WK ADDR     */
*   DCL                                                            0743
*     1 TESTIOWK BASED(IOTSTWK) BDY(WORD),/* OVERLAY OF WK AREA      */
*      2 DCB CHAR(96),              /* WHEN OPENING AND USING A DCB  */
*      2 CLOSE CHAR(4),             /* WHEN CLOSING AN OPEN DCB      */
*      2 OPEN CHAR(4),              /* WHEN OPENING THE DCB          */
*      2 CURDCBDN,                  /* CURRENT DCB BEING USED        */
*       3 LENDSN FIXED(15),         /* LENGTH OF CURRENT DCB NAME    */
*       3 NAME CHAR(44);            /* ACTUAL NAME OF CURRENT DS     */
*   DCL                                                            0744
*     MACROWK CHAR(12);             /* THREE WORDS FOR GETMAIN       */
*   DCL                                                            0745
*     TEMPDDN CHAR(8);              /* HOLD AREA OF DD NAME GOTTEN   */
*   DCL                                                            0746
*     1 DSNDAIR,                    /* LENGTH OF DSNAME USED /DAIR   */
*      2 DSLNGTH FIXED(15),         /* LENGTH OF DSNAME USED /DAIR   */
*      2 DSNAME CHAR(44);           /* ACTUAL DSNAME                 */
*   DCL                                                            0747
*     DSN CHAR(44) BASED(STRNGPTR); /* DEFINE DATA SET NAME          */
*   DCL                                                            0748
*     TSTCPECB PTR(31) GEND;        /* POINTER TO ECB                */
*   DCL                                                            0749
*     TSTUPT PTR(31) GEND;          /* POINTER TO UPT                */
*   DCL                                                            0750
*     DAPLUPT PTR(31) GEND;         /* POINTER TO DAIR PRM LST UPT   */
*   DCL                                                            0751
*     DAPLECT PTR(31) GEND;         /* POINTER TO DAIR PRM LST ECT   */
*   DCL                                                            0752
*     DAPLECB PTR(31) GEND;         /* POINTER TO DAIR PRM LST ECB   */
*   DCL                                                            0753
*     DAPB08 CHAR(84) GEND BDY(WORD);/* POINTER TO DAIR PRM BLOCK    */
*   DCL                                                            0754
*     DA08LEN FIXED(15) GEND;       /* LENGTH                        */
*   DCL                                                            0755
*     DA08DDN CHAR(8) GEND;         /* DAIR DD NAME                  */
*   DCL                                                            0756
*     DA08UNIT CHAR(8) GEND;        /* DAIR UNIT - DEVICE            */
*   DCL                                                            0757
*     DA08SER CHAR(8) GEND;         /* VOL SER NUMBER                */
*   DCL                                                            0758
*     DA08MNM CHAR(8) GEND;         /* MEMBER NAME                   */
*   DCL                                                            0759
*     DA08PSWD CHAR(8) GEND;        /* FOR DAIR PASS WORD            */
*   DCL                                                            0760
*     DA08CD CHAR(2) GEND;          /* DAIR ENTRY CODE               */
*   DCL                                                            0761
*     DA08DSP1 CHAR(1) GEND;        /* DATA SET STATUS FLAG          */
*   DCL                                                            0762
*     DA08DPS2 CHAR(1) GEND;        /* DATA SET DISPOSTION           */
*   DCL                                                            0763
*     DA08DPS3 CHAR(1) GEND;        /* DATA SET CONDITIONAL DISP     */
*   DCL                                                            0764
*     DFPBCNTL CHAR(1) GEND;        /* DEFAULT CONTROL               */
*   DCL                                                            0765
*     DFPBCODE CHAR(1) GEND;        /* DEFAULT ENTRY CODE            */
*   DCL                                                            0766
*     PASSWORD CHAR(8) BASED(PSWRDPTR);/* PASSWORD                   */
*   DCL                                                            0767
*     DFPBQUAL PTR(31) GEND;        /* POINTER TO DEFAULT QUALIFY    */
*   DCL                                                            0768
*     DA08PDSN PTR(31) GEND;        /* POINTER DSN TO BE SRCH DSE    */
*   DCL                                                            0769
*     DFPBDSN PTR(31) GEND;         /* POINTER DSN TO BE SRCH DSE    */
*   DCL                                                            0770
*     DFPBPSCB PTR(31) GEND;        /* POINTER TO DEFAULT CONT BK    */
*   DCL                                                            0771
*     DAPLPSCB PTR(31) GEND;        /* POINTER TO DAIR CONT BLOCK    */
*   DCL                                                            0772
*     TPLPSCB PTR(31) GEND;         /* POINTER TO TMP CONT BLOCK     */
*   DCL                                                            0773
*     DAPL CHAR(*) GEND;            /* DEFINE LABEL OF DIAR PARM L   */
*   DCL                                                            0774
*     DFPB CHAR(*) GEND;            /* DEFINE LABEL OF DIAR PARM B   */
*   DCL                                                            0775
*     TESTLIST CHAR(8) INIT('TESTLIST') STATIC;/* NAME USED DFLT N.  */
*   DCL                                                            0776
*     DAPLDAPB PTR(31) GEND;        /* POINTER TO PRM BLOCK          */
*   DCL                                                            0777
*     DA08DSO BIT(8) GEND;          /* DATA SET ORG                  */
*   DCL                                                            0778
*     TSTFLGS3 BIT(8) GEND;         /* DEFINE FLAG BYTE              */
*   DCL                                                            0779
*     TPLPTR PTR(31) GEND;          /* DEFINE THE TCOM POINTER/TPL   */
*   DCL                                                            0780
*     TEMPTPL PTR(31);              /* DEFINE TEMP POINTER           */
*   DCL                                                            0781
*     DAPB08WK CHAR(100) BDY(WORD); /* DEFINE DAIR PARM AREA         */
*   DCL                                                            0782
*     DAPLWK CHAR(20) BDY(WORD);    /* DEFINE DAIR PARM LIST         */
*   DCL                                                            0783
*     DFPBWK CHAR(20) BDY(WORD);    /* DEFINE DEFAULT PARM LIST      */
*   DCL                                                            0784
*     TSTIODSN PTR(31) GEND;        /* IDENT DSN POINTER IN TCOM     */
*   DCL                                                            0785
*     DSNQUEUE FIXED(15);           /* VALUE USED TO LOOP THRU QUEU  */
*   DCL                                                            0786
*     1 DSNQUEU BASED(PRMREG4) BDY(WORD),/* OVERLAY OF MY DSN CHAIN  */
*      2 DSNCHAIN PTR(31),          /* BACKPTR TO PREVIOUS DSN CH    */
*      2 LENGTHDN FIXED(15),        /* LENGTH DSN IN CHAIN MEMBER    */
*      2 DN CHAR(44);               /* ACTUAL DSN OF MEMBER          */
*   GENERATE;                                                      0787
         DROP  DSECT10
         USING DAPB08,DSECT10
         USING DAPL,DSECT4
         USING TPL,DSECT11
*   RTNCODE=0;                      /* INITIALIZE THE RTNCODE OK     */
         SLR   RTNCODE,RTNCODE                                     0788
*/********************************************************************/
*/*                                                                  */
*/*                D  (NO,,YES,DATAOUT)                            0789
*/*                   IS THE DATA SET OPEN FROM REPEAT ?             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0789
*   IOTSTWK=TSTIODCB;               /* ESTAB ADDR WORKAREA   @YM06400*/
         L     @14,TSTIODCB                                        0789
         ST    @14,IOTSTWK                                         0789
*   IF SIODSN^=0 THEN               /* TEST TO SEE IF NOT A REPEAT   */
         SLR   @06,@06                                             0790
         L     @05,IOPARMS                                         0790
         L     @05,SIODSN(,@05)                                    0790
         CR    @05,@06                                             0790
         BE    @RF00790                                            0790
*/********************************************************************/
*/*                                                                  */
*/*%CONT5:         D  (YES,,NO,%CONT6)                             0791
*/*                   IS ANOTHER DATA SET OPEN ?                     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0791
*     DO;                                                          0791
*       IF TSTIODCB^=0 THEN         /* TEST FOR DATA SET BEING OPEN  */
         CR    @14,@06                                             0792
         BE    @RF00792                                            0792
*/********************************************************************/
*/*                                                                  */
*/*                D  (NO,,YES,DATAOUT)                            0793
*/*                   IS THE OPEN DATA SET THE CORRECT D.S. ?        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0793
*         DO;                                                      0793
*           IOTSTWK=TSTIODCB;       /* ESTAB ADDR TO WORKAREA        */
         ST    @14,IOTSTWK                                         0794
*           IF LENDSN=DSL THEN      /* SEE IF LENGTHS ARE EQUAL      */
         LH    @06,LENDSN(,@14)                                    0795
         CH    @06,DSL(,@05)                                       0795
         BNE   @RF00795                                            0795
*             IF NAME(1:LENDSN)=DSN(1:LENDSN) THEN/* TEST SAME       */
         L     @05,STRNGPTR(,@05)                                  0796
         BCTR  @06,0                                               0796
         EX    @06,@SC00634                                        0796
         BNE   @RF00796                                            0796
*               DO;                                                0797
*                 CALL PUT;         /* HAVE THE DATA SENT OUT        */
         BAL   @14,PUT                                             0798
*                 GO TO EXITDS;     /* RETURN TO CALLER              */
         B     EXITDS                                              0799
*               END;                                               0800
*         END;                                                     0801
@RF00796 DS    0H                                                  0801
@RF00795 DS    0H                                                  0802
*       GENERATE;                                                  0802
@RF00792 DS    0H                                                  0802
         GETMAIN RC,LV=TLEN,SP=1       GET CORE FOR NEW DCB
*       IF RTNCODE^=0 THEN          /* TEST FOR SUCESSFUL GETMAIN    */
         LTR   RTNCODE,RTNCODE                                     0803
         BZ    @RF00803                                            0803
*         DO;                                                      0804
*           PRMREG4=RTNCODE;        /* TRANSFER RETURN CODE          */
         LR    PRMREG4,RTNCODE                                     0805
*           GENERATE REFS(@IOVCON);                                0806
      IKJEGSIO SVCERR,SVC=10,RC=(4),ID=I0016,VCONBR=YES,MF=(E,IOMSGPLT)
*           IF RTNCODE<16 THEN      /* SEE IF ATTN OR RETRY          */
         CH    RTNCODE,@CH00095                                    0807
         BNL   @RF00807                                            0807
*             RTNCODE=4;            /* SET THE RETURN CODE TO ERROR  */
         LA    RTNCODE,4                                           0808
*           GO TO EXITDS;           /* RETURN TO CALLER              */
         B     EXITDS                                              0809
*         END;                                                     0810
*       IOTSTWK=PRMREG1;            /* SAVE ADDRESS OF CORE          */
@RF00803 ST    PRMREG1,IOTSTWK                                     0811
*       DSECT10=ADDR(DAPB08WK);     /* ESTABLISH ADDR TO PARM AREA   */
         LA    DSECT10,DAPB08WK                                    0812
*       DSECT4=ADDR(DAPLWK);        /* ESTABLISH ADDR TO PARM AREA   */
         LA    DSECT4,DAPLWK                                       0813
*       DSECT11=TPLPTR;             /* ESTABLISH ADDR TO PARM AREA   */
         L     DSECT11,TPLPTR                                      0814
*       TEMPTPL=TPLPSCB;            /* SAVE TPLPSCB POINTER          */
         L     @14,TPLPSCB                                         0815
         ST    @14,TEMPTPL                                         0815
*       DAPLWK='00'X;               /* CLEAR PARM AREA               */
         XC    DAPLWK+1(19),DAPLWK+1                               0816
         MVI   DAPLWK,X'00'                                        0816
*       DAPB08WK='00'X;             /* CLEAR PARM AREA               */
         XC    DAPB08WK+1(99),DAPB08WK+1                           0817
         MVI   DAPB08WK,X'00'                                      0817
*       DAPLUPT=TSTUPT;             /* MOVE UPT FROM TCOM            */
         MVC   DAPLUPT(4),TSTUPT                                   0818
*       DAPLECT=TSTECT;             /* MOVE ECT FROM TCOM            */
         MVC   DAPLECT(4),TSTECT                                   0819
*       DAPLECB=TSTCPECB;           /* MOVE ECB FROM TCOM            */
         MVC   DAPLECB(4),TSTCPECB                                 0820
*       DAPLPSCB=TPLPSCB;           /* MOVE SCB TO DAIR CB           */
         ST    @14,DAPLPSCB                                        0821
*       DAPLDAPB=ADDR(DAPB08);      /* MOVE ADDR OF DIAR PB          */
         LA    @14,DAPB08                                          0822
         ST    @14,DAPLDAPB                                        0822
*       DAPB08='00'X;               /* ZERO OUT DAPB08               */
         XC    DAPB08+1(83),DAPB08+1                               0823
         MVI   DAPB08,X'00'                                        0823
*       DA08DDN=' ';                /* SET THE DDNAME TO BLANKS      */
         MVI   DA08DDN+1,C' '                                      0824
         MVC   DA08DDN+2(6),DA08DDN+1                              0824
         MVI   DA08DDN,C' '                                        0824
*       DA08UNIT=' ';               /* SET THE UNIT FILD TO BLANKS   */
         MVI   DA08UNIT+1,C' '                                     0825
         MVC   DA08UNIT+2(6),DA08UNIT+1                            0825
         MVI   DA08UNIT,C' '                                       0825
*       DA08SER=' ';                /* SET SER NUMBER TO BLANKS      */
         MVI   DA08SER+1,C' '                                      0826
         MVC   DA08SER+2(6),DA08SER+1                              0826
         MVI   DA08SER,C' '                                        0826
*       DA08MNM=' ';                /* SET MEMBER NAME TO BLANKS     */
         MVI   DA08MNM+1,C' '                                      0827
         MVC   DA08MNM+2(6),DA08MNM+1                              0827
         MVI   DA08MNM,C' '                                        0827
*       DA08PSWD=' ';               /* SET PASSWD NAME TO BLANKS     */
         MVI   DA08PSWD+1,C' '                                     0828
         MVC   DA08PSWD+2(6),DA08PSWD+1                            0828
         MVI   DA08PSWD,C' '                                       0828
*       DA08UNIT='';                /* INDICATE DEVICE       @ZA06224*/
         MVI   DA08UNIT,C' '                                       0829
         MVC   DA08UNIT+1(7),DA08UNIT                              0829
*       DA08CD(2)='08'X;            /* SET UP                        */
         MVI   DA08CD+1,X'08'                                      0830
*       DA08DSP1='01'X;             /* SET DPS BYTE TO 01            */
         MVI   DA08DSP1,X'01'                                      0831
*       DA08DPS2='08'X;             /* SET DPS2 BYTE TO 08           */
         MVI   DA08DPS2,X'08'                                      0832
*       DA08DPS3='08'X;             /* SET THE DPS3 BYTE TO 08       */
         MVI   DA08DPS3,X'08'                                      0833
*       NAME='';                    /* BLANK OUT THE DSNAME FIELD    */
         L     @14,IOTSTWK                                         0834
         MVI   NAME(@14),C' '                                      0834
         MVC   NAME+1(43,@14),NAME(@14)                            0834
*       DA08PDSN=ADDR(DSNDAIR);     /* MOVE ADDRESS OF PARM LIST     */
         LA    @14,DSNDAIR                                         0835
         ST    @14,DA08PDSN                                        0835
*       IF FLAGRES3(1)='1'B THEN    /* TEST FOR PASS WORD DATA SET   */
         L     @14,IOPARMS                                         0836
         L     @14,SIODSN(,@14)                                    0836
         TM    FLAGRES3(@14),B'10000000'                           0836
         BNO   @RF00836                                            0836
*         DA08PSWD(1:LENPSWRD)=PASSWORD;/* IF SO MOVE IN             */
         LH    @06,LENPSWRD(,@14)                                  0837
         BCTR  @06,0                                               0837
         L     @14,PSWRDPTR(,@14)                                  0837
         EX    @06,@SM00636                                        0837
*       DSNAME(1:DSL)=DSN;          /* MOVE DSNAME TO PARM LIST      */
@RF00836 L     @14,IOPARMS                                         0838
         L     @14,SIODSN(,@14)                                    0838
         LH    @06,DSL(,@14)                                       0838
         LR    @05,@06                                             0838
         BCTR  @05,0                                               0838
         L     @14,STRNGPTR(,@14)                                  0838
         EX    @05,@SM00638                                        0838
*       DSLNGTH=DSL;                /* MOVE DATA SET NAME LENGTH IN  */
         STH   @06,DSLNGTH                                         0839
*       CURDCBDN=DSNDAIR;           /* TRANSFER DSN TO CUR. DCB      */
         L     @14,IOTSTWK                                         0840
         MVC   CURDCBDN(46,@14),DSNDAIR                            0840
*/********************************************************************/
*/*                                                                  */
*/*%CONT7:         P  CLOSE DATA SET                                 */
*/*%CONT6:         D  (NO,,YES,%CONT8)                             0841
*/*                   IS THE DATA SET FULLY QUALIFIED ?              */
*/*                                                                  */
*/********************************************************************/
*                                                                  0841
*       IF FLAGRES1(2)^='1'B THEN   /* TEST FOR QUOTE MEANS QUAL     */
         L     @14,IOPARMS                                         0841
         L     @14,SIODSN(,@14)                                    0841
         TM    FLAGRES1(@14),B'01000000'                           0841
         BO    @RF00841                                            0841
*         DO;                                                      0842
*                                                                  0842
*/********************************************************************/
*/*                                                                  */
*/*                P  PREPARE PARM LIST FOR IKJDFLT TO QUALIFY NAME  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0843
*           GENERATE(DROP DSECT11); /* DISCONTINUE DSECT REGISTER    */
         DROP DSECT11
*           GENERATE(USING DFPB,DSECT11);/* ESTAB DSECT REG          */
         USING DFPB,DSECT11
*           DSECT11=ADDR(DFPBWK);   /* PICK UP POINTER               */
         LA    DSECT11,DFPBWK                                      0845
*           DFPBWK='00'X;           /* CLEAR PARM FIELDS             */
         XC    DFPBWK+1(19),DFPBWK+1                               0846
         MVI   DFPBWK,X'00'                                        0846
*           DFPBPSCB=DAPLPSCB;      /* MOVE PSCB FROM DAIR PL        */
         MVC   DFPBPSCB(4),DAPLPSCB                                0847
*           DFPBDSN=DA08PDSN;       /* MOVE DATA SET NAME FROM DAIR  */
         MVC   DFPBDSN(4),DA08PDSN                                 0848
*           DFPBQUAL=ADDR(TESTLIST);/* INDICATE DEFLT NAME FOR US    */
         LA    @14,TESTLIST                                        0849
         ST    @14,DFPBQUAL                                        0849
*           DFPBCODE='00'X;         /* ENTRY CODE                    */
         MVI   DFPBCODE,X'00'                                      0850
*           DFPBCNTL='20'X;         /* INDICATE TO USE USERS ID PRE  */
         MVI   DFPBCNTL,X'20'                                      0851
*           PRMREG1=ADDR(DAPL);     /* SET ADDR IN R1 OF DA PRM LST  */
         LA    PRMREG1,DAPL                                        0852
*           DAPLPSCB=ADDR(DFPB);    /* SET ADDR OF PRM BLOCK         */
         LA    @14,DFPB                                            0853
         ST    @14,DAPLPSCB                                        0853
*/********************************************************************/
*/*                                                                  */
*/*                P  ISSUE LINK MACRO TO IKJDFLT TO QUALIFY NAME    */
*/*                S  CALL CKDSNAME: CHECK DATA SET NAME             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0854
*           GENERATE;                                              0854
         LINK EP=IKJDFLT               LINK TO DEFAULT FOR QUAL NAME
*           IF RTNCODE=24 THEN      /* SEE IF IT MEANS ATTN HIT      */
         CH    RTNCODE,@CH00082                                    0855
         BNE   @RF00855                                            0855
*             DO;                                                  0856
*               RTNCODE=16;         /* IF SO CHANGE TO OUT CODE      */
         LA    RTNCODE,16                                          0857
*               GO TO EXITDS;       /* GO TO EXIT OF ROUTINE         */
         B     EXITDS                                              0858
*             END;                                                 0859
*           IF RTNCODE=8            /* IF DSN TOO LONG       @ZA06223*/
*             THEN                  /* GET CORRECTED DSN     @ZA06223*/
@RF00855 CH    RTNCODE,@CH00034                                    0860
         BNE   @RF00860                                            0860
*             CALL GETDSN;          /* PROMPT FOR DSNAME     @ZA06223*/
         BAL   @14,GETDSN                                          0861
*           IF RTNCODE=0 THEN       /* TEST RETURN CODE FROM DFLT    */
@RF00860 LTR   RTNCODE,RTNCODE                                     0862
         BNZ   @RF00862                                            0862
*             DAPLPSCB=TEMPTPL;     /* RESTORE TPL POINTER           */
         MVC   DAPLPSCB(4),TEMPTPL                                 0863
*           RTNCODE=0;              /* REINITIALIZE RTNCODE TO ZERO  */
@RF00862 SLR   RTNCODE,RTNCODE                                     0864
*         END;                                                     0865
*       CALL CKDSNAME;              /* CALL TO CHECK IF MATCH OF DS  */
@RF00841 BAL   @14,CKDSNAME                                        0866
*       IF RTNCODE^=0 THEN          /* CHECK FOR ERROR RTNCODE       */
         LTR   RTNCODE,RTNCODE                                     0867
         BNZ   @RT00867                                            0867
*         GO TO EXITDS;             /* IF SO BRANCH TO THE EXIT      */
*                                                                  0869
*/********************************************************************/
*/*                                                                  */
*/*%CONT8:         P  ISSUE LINK MACRO TO IKJDAIR TO ALLOCATE D.S.   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0869
*TODAIR:                                                           0869
*       IF FLAGRES2(1)='1'B THEN    /* SEE IF PHYSICAL SEQUENTIAL    */
TODAIR   L     @14,IOPARMS                                         0869
         L     @14,SIODSN(,@14)                                    0869
         TM    FLAGRES2(@14),B'10000000'                           0869
         BNO   @RF00869                                            0869
*         DO;                                                      0870
*           CALL BADDS;             /* HAVE MESSAGE PUT OUT          */
         BAL   @14,BADDS                                           0871
*           GO TO EXITDS;           /* BRANCH TO EXIT                */
         B     EXITDS                                              0872
*         END;                                                     0873
*       IF TSTFLGS3(5)='1'B THEN    /* TEST FOUND A PRIOR DS   SWITCH*/
@RF00869 TM    TSTFLGS3,B'00001000'                                0874
         BNO   @RF00874                                            0874
*         DO;                                                      0875
*           TSTFLGS3(5)='0'B;       /* TURN OFF SWITCH FOR NEXT TIM  */
         NI    TSTFLGS3,B'11110111'                                0876
*           DA08DSP1='02'X;         /* IDICATE MOD ON DISP TO DAIR   */
         MVI   DA08DSP1,X'02'                                      0877
*         END;                                                     0878
*       PRMREG1=ADDR(DAPL);         /* SET UP ADDRESS FOR DAIR       */
@RF00874 LA    PRMREG1,DAPL                                        0879
*       GENERATE;                                                  0880
*                                                                  0880
         LINK EP=IKJDAIR               LINK TO DAIR FOR DD CARD
*/********************************************************************/
*/*                                                                  */
*/*                D  (YES,,NO,DATAOUT)                            0881
*/*                   IS THE DAIR RTN CODE NON-ZERO ?                */
*/*                S  CALL CKDARC:  ANALYZE RETURN CODE              */
*/*                                                                  */
*/********************************************************************/
*                                                                  0881
*       IF RTNCODE^=0 THEN          /* SEE IF DAIR FAILED            */
         LTR   RTNCODE,RTNCODE                                     0881
         BZ    @RF00881                                            0881
*         DO;                                                      0882
*           CALL CKDARC;            /* CALL ROUTINE TO ANALYZE CODE  */
         BAL   @14,CKDARC                                          0883
*           IF RTNCODE^=0 THEN      /* SEE IF I CAN CONTINUE         */
         LTR   RTNCODE,RTNCODE                                     0884
         BNZ   @RT00884                                            0884
*             GO TO EXITDS;         /* IF NOT QUITE                  */
*         END;                                                     0886
*       IF DA08DSO^='00000000'B THEN/* SEE IF THE DS IS NEW          */
@RF00881 CLI   DA08DSO,B'00000000'                                 0887
         BE    @RF00887                                            0887
*         IF DA08DSO(2)^='1'B THEN  /* SEE IF THE DS IS PHY. SEQ.    */
         TM    DA08DSO,B'01000000'                                 0888
         BO    @RF00888                                            0888
*           DO;                                                    0889
*             CALL BADDS;           /* HAVE ERROR MESSAGE SENT       */
         BAL   @14,BADDS                                           0890
*             GO TO EXITDS;         /* GO TO EXIT OF ROUTINE         */
         B     EXITDS                                              0891
*           END;                                                   0892
*                                                                  0892
*/********************************************************************/
*/*                                                                  */
*/*DATAOUT:        S  CALL PUT:  MOVE DATA TO D.S.                   */
*/*                R  RETURN TO MAIN DATA ROUTINE                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0893
*       TEMPDDN=DA08DDN;            /* STORE DDNAME IN MY WORK AREA  */
@RF00888 DS    0H                                                  0893
@RF00887 MVC   TEMPDDN(8),DA08DDN                                  0893
*       CALL OPENDS;                /* CALL THE OPEN NEW DCB ROUT    */
         BAL   @14,OPENDS                                          0894
*       IF RTNCODE^=0 THEN          /* CHECK ON SUCCESS OF OPEN      */
         LTR   RTNCODE,RTNCODE                                     0895
         BNZ   @RT00895                                            0895
*         GO TO EXITDS;             /* BRANCH TO EXIT IF NOT         */
*     END;                                                         0897
*   TSTIODCB=ADDR(DCB);             /* MOVE THE ADDRESS OF DCB TCOM  */
@RF00790 MVC   TSTIODCB(4),IOTSTWK                                 0898
*   CALL PUT;                       /* GO TO ISSUE PUT MACRO         */
         BAL   @14,PUT                                             0899
*EXITDS:                            /* LABEL USED TO BRANCH TO EXIT  */
*   RETURN CODE(RTNCODE);           /* RETURN TO THE CALLER          */
EXITDS   L     @14,@SA00021                                        0900
         LM    @00,@12,@SA00021+8                                  0900
         BR    @14                                                 0900
*                                                                  0901
*/* *********************************************************@ZA06223*/
*/*                                                          @ZA06223*/
*/*  GETDSN - PROMPT FOR VALID DSNAME FOR PRINT DATASET      @ZA06223*/
*/*      WHEN RETURN FROM THIS ROUTINE DSNAME WILL BE FULLY  @ZA06223*/
*/*      QUALIFIED AND VALIDITY CHECKED.                     @ZA06223*/
*/*                                                          @ZA06223*/
*/* *********************************************************@ZA06223*/
*                                                                  0901
*GETDSN:                                                           0901
*   PROC;                           /*                       @ZA06223*/
GETDSN   STM   @14,@12,@SA00022                                    0901
*   DCL                             /*                       @ZA06223*/
*     DUMBUF CHAR(5) INIT('0005000040'X),/* DUMMY CMD BUFFER @ZA06223*/
*     1 DSN2LONG STATIC,            /* DSN TOO LONG MSG      @ZA06223*/
*      2 MSGLENTH FIXED(15) INIT(67),/* LENGTH               @ZA06223*/
*      2 * FIXED(15),               /* RESERVED              @ZA06223*/
*      2 TXTOFMSG CHAR(63) INIT(    /* MESSAGE TEXT          @ZA06223*/
*'IKJ57613I DSNAME WHEN FULLY QUALIFIED WILL EXCEED 44 CHARACTERS');
*   GEN DATA DEFS(PRMTPCL);                                        0903
*   RFY                                                            0904
*    (IOPLREG,                                                     0904
*     IOPBREG,                                                     0904
*     OLD) RSTD;                    /* REGS MAY NOT BE USED  @ZA06223*/
*   IOPLREG=ADDR(USERIOPL);         /* INIT IOPL PTR         @ZA06223*/
         LA    IOPLREG,USERIOPL                                    0905
*   IOPBREG=ADDR(OUTPUTPB);         /* INIT IOPL             @ZA06223*/
         LA    IOPBREG,OUTPUTPB                                    0906
*   USERIOPL=PARMLIST;              /* INIT REST OF IOPL     @ZA06223*/
         MVI   USERIOPL+12,C' '                                    0907
         MVC   USERIOPL+13(3),USERIOPL+12                          0907
         MVC   USERIOPL(12),PARMLIST                               0907
*   OUTPUTPB=PUTMSG;                /* INIT PUTL PARMS       @ZA06223*/
         MVI   OUTPUTPB+12,C' '                                    0908
         MVC   OUTPUTPB+13(3),OUTPUTPB+12                          0908
         MVC   OUTPUTPB(12),PUTMSG                                 0908
*   OLD=ADDR(SIONUMI1);             /* INIT OLD PTR          @ZA06223*/
         L     @14,IOPARMS                                         0909
         LA    OLD,SIONUMI1(,@14)                                  0909
*   SIONUMI1=1;                     /* INIT OLD COUNT        @ZA06223*/
         MVC   SIONUMI1(4,@14),@CF00115                            0910
*   SIO1STMS=ADDR(DSN2LONG);        /* INIT MSG ADDR         @ZA06223*/
         LA    @06,DSN2LONG                                        0911
         ST    @06,SIO1STMS(,@14)                                  0911
*   GENERATE;                                                      0912
*                                  /*                        @ZA06223*/
       PUTLINE PARM=(5),OUTPUT=((4),TERM,SINGLE,INFOR),MF=(E,(1))
*   RFY                                                            0913
*    (IOPBREG,                                                     0913
*     OLD);                         /* OK TO USE REGS AGAIN  @ZA06223*/
*   IF RTNCODE^=0                   /* PUTLINE OK?           @ZA06223*/
*     THEN                          /* NO-DIAGNOSE ERROR     @ZA06223*/
         LTR   RTNCODE,RTNCODE                                     0914
         BZ    @RF00914                                            0914
*     IF RTNCODE=8                  /* WAS ATTN HIT?         @ZA06223*/
*       THEN                                                       0915
         CH    RTNCODE,@CH00034                                    0915
         BNE   @RF00915                                            0915
*       DO;                         /* IF IT WAS SET         @ZA06223*/
*         RTNCODE=16;               /* SET ATTN RC           @ZA06223*/
         LA    RTNCODE,16                                          0917
*         RETURN TO ENDIO;          /* AND QUIT              @ZA06223*/
         LA    @14,ENDIO                                           0918
         LM    @15,@12,@SA00022+4                                  0918
         BR    @14                                                 0918
*       END;                        /*                       @ZA06223*/
*     ELSE                                                         0920
*       IF RTNCODE=8                /* IF NOWAIT WAS SPEC    @ZA06223*/
*         THEN                                                     0920
@RF00915 CH    RTNCODE,@CH00034                                    0920
         BNE   @RF00920                                            0920
*         RTNCODE=0;                /* ACCEPT AS VALID       @ZA06223*/
         SLR   RTNCODE,RTNCODE                                     0921
*       ELSE                                                       0922
*         DO;                       /* ALL OTHERS ARE ERRORS @ZA06223*/
         B     @RC00920                                            0922
@RF00920 DS    0H                                                  0923
*           RTNCODE=4;              /* SET ERROR RETURN CODE @ZA06223*/
         LA    RTNCODE,4                                           0923
*           RETURN TO ENDIO;        /* AND GET OUT           @ZA06223*/
         LA    @14,ENDIO                                           0924
         LM    @15,@12,@SA00022+4                                  0924
         BR    @14                                                 0924
*         END;                      /*                       @ZA06223*/
*   USERCBUF=DUMBUF;                /* SET UP DUMMY CMD BFR  @ZA06223*/
@RC00920 DS    0H                                                  0926
@RF00914 MVC   USERCBUF(5),DUMBUF                                  0926
*   PPLPTR=ADDR(USERPPL);           /* POINT TO PPL          @ZA06223*/
         LA    @14,USERPPL                                         0927
         ST    @14,PPLPTR                                          0927
*   USERPPL=PARMLIST;               /* INIT PARSE PARMS      @ZA06223*/
         MVI   USERPPL+12,C' '                                     0928
         MVC   USERPPL+13(15),USERPPL+12                           0928
         MVC   USERPPL(12),PARMLIST                                0928
*   PPLPCL=PCLADDR;                 /* POINT TO PCL          @ZA06223*/
         MVC   PPLPCL(4,@14),PCLADDR                               0929
*   PPLANS=ADDR(PDLPTR);            /* PROVIDE ANSWER AREA   @ZA06223*/
         LA    @06,PDLPTR                                          0930
         ST    @06,PPLANS(,@14)                                    0930
*   PPLCBUF=ADDR(USERCBUF);         /* POINT TO PHONY BFR    @ZA06223*/
         LA    @06,USERCBUF                                        0931
         ST    @06,PPLCBUF(,@14)                                   0931
*   PPLUWA=IOPLREG;                 /* PASS IOPL TO VALIDCK  @ZA06223*/
         ST    IOPLREG,PPLUWA(,@14)                                0932
*   IOPLREG=PPLPTR;                 /* POINT TO PARSE PARMS  @ZA06223*/
         LR    IOPLREG,@14                                         0933
*   GEN( LINK EP=IKJPARS);          /* CALL PARSE            @ZA06223*/
          LINK EP=IKJPARS
*   IF RTNCODE^=0                   /* IF PARSE RC NOT ZERO  @ZA06223*/
*     THEN                          /* ATTEMPT TO DIAGNOSE   @ZA06223*/
         LTR   RTNCODE,RTNCODE                                     0935
         BZ    @RF00935                                            0935
*     IF RTNCODE=8                  /* POSSIBLY ATTN?        @ZA06223*/
*       THEN                                                       0936
         CH    RTNCODE,@CH00034                                    0936
         BNE   @RF00936                                            0936
*       DO;                         /* YES-                  @ZA06223*/
*         RTNCODE=16;               /* SET ATTN RETURN CODE  @ZA06223*/
         LA    RTNCODE,16                                          0938
*         RETURN TO ENDIO;          /* PROCESS ATTN          @ZA06223*/
         LA    @14,ENDIO                                           0939
         LM    @15,@12,@SA00022+4                                  0939
         BR    @14                                                 0939
*       END;                        /*                       @ZA06223*/
*     ELSE                                                         0941
*       DO;                         /* REAL ERROR?           @ZA06223*/
@RF00936 DS    0H                                                  0942
*         RTNCODE=4;                /* SET ERROR RETURN CODE @ZA06223*/
         LA    RTNCODE,4                                           0942
*         RETURN TO ENDIO;          /* GET THE H--- OUT      @ZA06223*/
         LA    @14,ENDIO                                           0943
         LM    @15,@12,@SA00022+4                                  0943
         BR    @14                                                 0943
*       END;                        /*                       @ZA06223*/
*   SIODSN=PDLPTR+8;                /* INCR TO PDE           @ZA06223*/
@RF00935 LA    @14,8                                               0945
         AL    @14,PDLPTR                                          0945
         L     @06,IOPARMS                                         0945
         ST    @14,SIODSN(,@06)                                    0945
*   IF FLAGRES3(1)='1'B             /* IF PASSWORD SUPPLIED  @ZA06223*/
*     THEN                          /* MOVE IT TO PASSWORD   @ZA06223*/
         TM    FLAGRES3(@14),B'10000000'                           0946
         BNO   @RF00946                                            0946
*     DA08PSWD(1:LENPSWRD)=PASSWORD;/* TO DAIR PSWD AREA     @ZA06223*/
         LH    @06,LENPSWRD(,@14)                                  0947
         BCTR  @06,0                                               0947
         L     @14,PSWRDPTR(,@14)                                  0947
         EX    @06,@SM00636                                        0947
*   DSNAME(1:DSL)=DSN;              /* SAVE DSNAME           @ZA06223*/
@RF00946 L     @14,IOPARMS                                         0948
         L     @14,SIODSN(,@14)                                    0948
         LH    @06,DSL(,@14)                                       0948
         LR    @05,@06                                             0948
         BCTR  @05,0                                               0948
         L     @14,STRNGPTR(,@14)                                  0948
         EX    @05,@SM00638                                        0948
*   DSLNGTH=DSL;                    /* AND DSN LENGTH        @ZA06223*/
         STH   @06,DSLNGTH                                         0949
*   CURDCBDN=DSNDAIR;               /* ASSOC. DSN W/ DCB     @ZA06223*/
         L     @14,IOTSTWK                                         0950
         MVC   CURDCBDN(46,@14),DSNDAIR                            0950
*   IF FLAGRES1(2)^='1'B            /* IF DSN NOT FULLY      @ZA06223*/
*     THEN                                                         0951
         L     @14,IOPARMS                                         0951
         L     @14,SIODSN(,@14)                                    0951
         TM    FLAGRES1(@14),B'01000000'                           0951
         BO    @RF00951                                            0951
*     DO;                           /* QUALIFIED             @ZA06223*/
*       DFPBCNTL=''B;               /* SET CONTROL FLAGS     @ZA06223*/
         MVI   DFPBCNTL,X'00'                                      0953
*       PRMREG1=ADDR(DAPL);         /* POINT TO PARMS        @ZA06223*/
         LA    PRMREG1,DAPL                                        0954
*       DAPLPSCB=ADDR(DFPB);        /* POINT TO PARM LIST    @ZA06223*/
         LA    @14,DFPB                                            0955
         ST    @14,DAPLPSCB                                        0955
*       GEN( LINK EP=IKJDFLT);      /* QUALIFY DSN           @ZA06223*/
          LINK EP=IKJDFLT
*       IF RTNCODE=24               /* SEE IF ATTN           @ZA06223*/
*         THEN                                                     0957
         CH    RTNCODE,@CH00082                                    0957
         BNE   @RF00957                                            0957
*         DO;                       /* YES-                  @ZA06223*/
*           RTNCODE=16;             /* SET ATTN RETCODE      @ZA06223*/
         LA    RTNCODE,16                                          0959
*           RETURN TO ENDIO;        /* GET OUT               @ZA06223*/
         LA    @14,ENDIO                                           0960
         LM    @15,@12,@SA00022+4                                  0960
         BR    @14                                                 0960
*         END;                      /*                       @ZA06223*/
*       IF RTNCODE=0                /* IF NO ERROR           @ZA06223*/
*         THEN                      /* RESTORE PSCB PTR      @ZA06223*/
@RF00957 LTR   RTNCODE,RTNCODE                                     0962
         BNZ   @RF00962                                            0962
*         DAPLPSCB=TEMPTPL;         /* RESTORE PTR           @ZA06223*/
         MVC   DAPLPSCB(4),TEMPTPL                                 0963
*     END;                          /*                       @ZA06223*/
@RF00962 DS    0H                                                  0965
*   RTNCODE=0;                      /* SET RC = 0            @ZA06223*/
@RF00951 SLR   RTNCODE,RTNCODE                                     0965
*   END GETDSN;                     /*                       @ZA06223*/
@EL00022 DS    0H                                                  0966
@EF00022 DS    0H                                                  0966
@ER00022 LM    @14,@12,@SA00022                                    0966
         BR    @14                                                 0966
*                                                                  0967
*/********************************************************************/
*/*                                                                  */
*/*                E  CKDARC ROUTINE - ANALYZE DAIR RTN CODE         */
*/*                S  CALL ATTN CHECK: CHECK FOR ATTN OR LOGOFF      */
*/*                P  ISSUE LINK MACRO (IKJEFF18) ANALYZE RTN CD   0967
*/*                   & PRINT ERR MSG                                */
*/*                P  SET RETURN CODE TO 4                           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0967
*CKDARC:                                                           0967
*   PROCEDURE;                                                     0967
CKDARC   STM   @14,@12,@SA00023                                    0967
*   DCL                                                            0968
*     DA08DARC FIXED(15) BDY(HWORD) GEND;                          0968
*   DCL                                                            0969
*     DA08CTL BIT(8) GEND;                                         0969
*   DCL                                                            0970
*     DA08PQTY CHAR(4) GEND;                                       0970
*   DCL                                                            0971
*     DA08SQTY CHAR(4) GEND;                                       0971
*   DCL                                                            0972
*     1 EFF18PL,                    /* IKJEFF18 PARM LIST            */
*      2 F18DAPL PTR(31),           /* POINTER TO DAIR PARM LIST     */
*      2 F18DAPRC PTR(31),          /* POINTER TO DAIR RTN CODE      */
*      2 F18MSGPT PTR(31),          /* POINTER TO FULL WORD ZEROS    */
*      2 F18IDNUM PTR(31),          /* POINTER TO ID NUMBER          */
*      2 F18FILL FIXED(31);         /* FILLER TO BE RESERVED         */
*   DCL                                                            0973
*     DAPLRC FIXED(31);             /* FULLWORD TO CONTAIN RTN CODE  */
*   DCL                                                            0974
*     F18ID FIXED(15) INIT(1) STATIC;/* I.D. NUMBER                  */
*   DCL                                                            0975
*     F18MSG FIXED(31) INIT(0) STATIC;/* INDICATE NO MSG PTR - ZERO  */
*   IF RTNCODE=8 THEN               /* SEE IF POSSIBLE CAT. ERROR    */
         CH    RTNCODE,@CH00034                                    0976
         BNE   @RF00976                                            0976
*     IF DA08DARC='1708'X THEN      /* SEE IF CODE IS CATG ERROR     */
         CLC   DA08DARC(2),@CH00557                                0977
         BNE   @RF00977                                            0977
*       DO;                                                        0978
*         DA08CTL='40'X;            /* INDICATE WE WANT BLOCKS       */
         MVI   DA08CTL,X'40'                                       0979
*         DA08DSP1='04'X;           /* NDICATE DS IS NEW             */
         MVI   DA08DSP1,X'04'                                      0980
*         DA08DPS2='02'X;           /* INDICATE WANT DS CATLG        */
         MVI   DA08DPS2,X'02'                                      0981
*         DA08DPS3='02'X;           /* INDICATE CONDITIONAL DIS      */
         MVI   DA08DPS3,X'02'                                      0982
*         DA08PQTY=1;               /* MOVE SPACE INTO SPQTY         */
         MVC   DA08PQTY(4),@CF00115                                0983
*         DA08SQTY=100;             /* EQU(BLK,(1,100))              */
         MVC   DA08SQTY(4),@CF00256                                0984
*         RTNCODE=0;                /* RESET THE RETURN CODE         */
         SLR   RTNCODE,RTNCODE                                     0985
*         RETURN TO TODAIR;         /* GO BACK AND TRY AGAIN         */
         LA    @14,TODAIR                                          0986
         LM    @15,@12,@SA00023+4                                  0986
         BR    @14                                                 0986
*       END;                                                       0987
*   F18DAPL=ADDR(DAPL);             /* POINT TO DAPL LIST            */
@RF00977 DS    0H                                                  0988
@RF00976 LA    @14,DAPL                                            0988
         ST    @14,F18DAPL                                         0988
*   DAPLRC=RTNCODE;                 /* STORE RETURN CODE             */
         ST    RTNCODE,DAPLRC                                      0989
*   F18DAPRC=ADDR(DAPLRC);          /* POINT TO RETURN CODE          */
         LA    @14,DAPLRC                                          0990
         ST    @14,F18DAPRC                                        0990
*   F18MSGPT=ADDR(F18MSG);          /* POINT TO ZERO POINTER         */
         LA    @14,F18MSG                                          0991
         ST    @14,F18MSGPT                                        0991
*   F18IDNUM=ADDR(F18ID);           /* POINT TO DAIR ALLOC ID NUM    */
         LA    @14,F18ID                                           0992
         ST    @14,F18IDNUM                                        0992
*   RTNCODE=0;                      /* RESET RETURN CODE             */
         SLR   RTNCODE,RTNCODE                                     0993
*   CALL ATTNCK;                    /* TEST FOR ATTN OR LOGOFF       */
         BAL   @14,ATTNCK                                          0994
*   IF RTNCODE^=0 THEN              /* IF ONE IS IN PROCESS GO OUT   */
         LTR   RTNCODE,RTNCODE                                     0995
         BNZ   @RT00995                                            0995
*     GO TO EXITRCDR;               /* BRANCH TO THE EXIT            */
*   PRMREG1=ADDR(EFF18PL);          /* POINT TO PARM LIST            */
         LA    PRMREG1,EFF18PL                                     0997
*   GENERATE;                                                      0998
       LINK  EP=IKJEFF18               LINK TO MSG FOR DAIR
*   RTNCODE=4;                      /* SET UP ERROR RETURN CODE      */
         LA    RTNCODE,4                                           0999
*/********************************************************************/
*/*                                                                  */
*/*                R  RETURN TO CALLER                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  1000
*EXITRCDR:                          /* LABEL TO EXIT OUT OF ROUTINE  */
*   RETURN CODE(RTNCODE);                                          1000
EXITRCDR L     @14,@SA00023                                        1000
         LM    @00,@12,@SA00023+8                                  1000
         BR    @14                                                 1000
*   END CKDARC;                                                    1001
*                                                                  1002
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE I/O SYNAD MESSAGE ROUTINE      */
*/*    THE PRIMARY FUNCTION IS:                                      */
*/*                                                                  */
*/*        1.  PREPARE SYNAD ERROR MESAGE AND SET RTN CODE TO 4      */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*                E  A7SYNAD ROUTINE                                */
*/*                P  PREPARE I/O SYNAD ERROR MSG                    */
*/*                S  CALL I/O: ISSUE MESSAGE                        */
*/*                P  SET RETURN CODE TO 4                           */
*/*                                                                  */
*/********************************************************************/
*                                                                  1002
*A7SYNAD:                                                          1002
*   PROCEDURE;                                                     1002
A7SYNAD  STM   @14,@12,@SA00024                                    1002
*   DCL                                                            1003
*     1 ERRORMSG BASED(PRMREG1+50), /* DEFINE SYNAD INSERT TEXT      */
*      2 PART1 CHAR(34),            /* TOO BIG FOR ONE INSERT P1     */
*      2 PART2 CHAR(44);            /* PART 2 OF TEXT                */
*   DCL                                                            1004
*     PRMREG11 REGISTER(11) RSTD;   /* DEFINE PARM REG 11 FOR USE    */
*   GENERATE;                                                      1005
         SYNADAF ACSMETH=QSAM          ISSUE SYNAD MACRO
*   LENINST1(1)=38;                 /* ESTABLISH LENGTH INSERT 1     */
         MVC   LENINST1(2),@CH00570                                1006
*   LENINST1(2)=48;                 /* ESTABLISH LENGTH INSERT 2     */
         MVC   LENINST1+56(2),@CH00571                             1007
*   INSTTXT1(1)=PART1;              /* MOVE FIRST HALF TEXT IN       */
         MVI   INSTTXT1+34,C' '                                    1008
         MVC   INSTTXT1+35(17),INSTTXT1+34                         1008
         LA    @14,50                                              1008
         ALR   @14,PRMREG1                                         1008
         MVC   INSTTXT1(34),PART1(@14)                             1008
*   INSTTXT1(2)=PART2;              /* MOVE SECOND HALF TEXT IN      */
         MVI   INSTTXT1+100,C' '                                   1009
         MVC   INSTTXT1+101(7),INSTTXT1+100                        1009
         MVC   INSTTXT1+56(44),PART2(@14)                          1009
*   PRMREG4=ADDR(MSGINST1(1));      /* SET UP PARM REG 4             */
         LA    PRMREG4,MSGINST1                                    1010
*   PRMREG11=ADDR(MSGINST1(2));     /* SET UP PARM REG 11            */
         LA    PRMREG11,MSGINST1+56                                1011
*   IOMSGPLT='00'X;                 /* CLEAR PARM LIST               */
         XC    IOMSGPLT+1(83),IOMSGPLT+1                           1012
         MVI   IOMSGPLT,X'00'                                      1012
*   GENERATE REFS(@IOVCON);                                        1013
         IKJEGSIO MSG,FIRST=M0051,INST21=(ADDR,(4)),INST22=(ADDR,(11)),*
               SECOND=M0202,ID=IO016,VCONBR=YES,MF=(E,IOMSGPLT)
*   IF RTNCODE>=16 THEN             /* TEST FOR ATTN                 */
         CH    RTNCODE,@CH00095                                    1014
         BNL   @RT01014                                            1014
*     GO TO EXITSYND;               /* RETURN                        */
*   GENERATE;                                                      1016
         SYNADRLS                      ISSUE SYNAD RELEASE MACRO
*   RTNCODE=4;                      /* SET RTN CODE TO ERROR         */
         LA    RTNCODE,4                                           1017
*/********************************************************************/
*/*                                                                  */
*/*                R  RETURN TO CALLER                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  1018
*EXITSYND:                          /* LABEL AT EXIT OF ROUTINE      */
*   RETURN TO EXITDS CODE(RTNCODE); /* RETURN TO EXIT                */
EXITSYND LA    @14,EXITDS                                          1018
         LM    @00,@12,@SA00024+8                                  1018
         BR    @14                                                 1018
*   END A7SYNAD;                                                   1019
*                                                                  1020
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE BAD DATA SET ERROR ROUTINE     */
*/*    THE PRIMARY FUNCTION IS:                                      */
*/*                                                                  */
*/*        1. PREPARE ERROR MESSAGE AND SET ERROR CODE TO 4          */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*                E  BADDS ROUTINE                                  */
*/*                S  CALL I/O: ISSUE MESSAGE                        */
*/*                P  SET RETURN CODE TO 4                           */
*/*                                                                  */
*/********************************************************************/
*                                                                  1020
*BADDS:                                                            1020
*   PROCEDURE;                                                     1020
BADDS    STM   @14,@12,@SA00025                                    1020
*   RESPECIFY                                                      1021
*     PRMREG4 RSTD;                 /* TELL PLS NOT TO USE REG HERE  */
*   PRMREG4=TSTIODSN;               /* PICK UP PTR TO CORE           */
         L     PRMREG4,TSTIODSN                                    1022
*   TSTIODSN=DSNCHAIN;              /* REMOVE FROM CHAIN             */
         MVC   TSTIODSN(4),DSNCHAIN(PRMREG4)                       1023
*   GENERATE;                                                      1024
         FREEMAIN RC,LV=50,A=(4),SP=1  FREE CORE
*   IF RTNCODE^=0 THEN              /* TEST FOR ERROR                */
         LTR   RTNCODE,RTNCODE                                     1025
         BZ    @RF01025                                            1025
*     DO;                                                          1026
*       PRMREG4=RTNCODE;            /* TRANSFER RTNCODE              */
         LR    PRMREG4,RTNCODE                                     1027
*       IOMSGPLT='00'X;             /* CLEAR PARM LIST               */
         XC    IOMSGPLT+1(83),IOMSGPLT+1                           1028
         MVI   IOMSGPLT,X'00'                                      1028
*       GENERATE REFS(@IOVCON);                                    1029
     IKJEGSIO SVCERR,SVC=120,RC=(4),ID=IO016,VCONBR=YES,MF=(E,IOMSGPLT)
*       IF RTNCODE<16 THEN          /* TEST FOR ATTN                 */
         CH    RTNCODE,@CH00095                                    1030
         BNL   @RF01030                                            1030
*         RTNCODE=4;                /* INDICATE ERROR                */
         LA    RTNCODE,4                                           1031
*       GO TO EXITBADD;             /* RETURN                        */
         B     EXITBADD                                            1032
*     END;                                                         1033
*   LENINST2(1)=DSL+4;              /* STORE INSERT LENGTH           */
@RF01025 L     @14,IOPARMS                                         1034
         L     @14,SIODSN(,@14)                                    1034
         LA    @06,4                                               1034
         AH    @06,DSL(,@14)                                       1034
         STH   @06,LENINST2                                        1034
*   INSTTXT2(1)=DSN;                /* MOVE IN TEXT OF INSERT        */
         MVI   INSTTXT2+44,C' '                                    1035
         MVC   INSTTXT2+45(7),INSTTXT2+44                          1035
         L     @14,STRNGPTR(,@14)                                  1035
         MVC   INSTTXT2(44),DSN(@14)                               1035
*   PRMREG4=ADDR(MSGINST2(1));      /* POINT TO INSERT               */
         LA    PRMREG4,MSGINST2                                    1036
*   IOMSGPLT='00'X;                 /* ZERO OUT PARM LIST            */
         XC    IOMSGPLT+1(83),IOMSGPLT+1                           1037
         MVI   IOMSGPLT,X'00'                                      1037
*   GENERATE REFS(@IOVCON);                                        1038
         IKJEGSIO MSG,FIRST=M0054,INST11=(ADDR,(4)),SECOND=M0255,      *
               ID=I0016,VCONBR=YES,MF=(E,IOMSGPLT)
*   IF RTNCODE<16 THEN              /* TEST FOR ATTN                 */
         CH    RTNCODE,@CH00095                                    1039
         BNL   @RF01039                                            1039
*     RTNCODE=4;                    /* INDICATE ERROR TO CALLER      */
         LA    RTNCODE,4                                           1040
*/********************************************************************/
*/*                                                                  */
*/*                R  RETURN TO CALLER                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  1041
*EXITBADD:                          /* LABEL FOR EXIT OF ROUTINE     */
*   RETURN CODE(RTNCODE);                                          1041
@RF01039 DS    0H                                                  1041
EXITBADD L     @14,@SA00025                                        1041
         LM    @00,@12,@SA00025+8                                  1041
         BR    @14                                                 1041
*   END BADDS;                                                     1042
*                                                                  1043
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE CHECK DATA SET ALLOCATED ROUT. */
*/*    THE PRIMARY FUNCTIONS ARE:                                    */
*/*                                                                  */
*/*        1.  PREPARE AND MAINTAIN DSN QUEUE                        */
*/*        2.  CLOSE THE CURRENT DCB IF NOT CORRECT DS               */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*                E  CDSNAME ROUTINE                                */
*/*                D  (YES,,NO,%CONT19)                            1043
*/*                   IS DSN PREVIOUS USED                           */
*/*                S  (,ENDCKD)                                    1043
*/*                   CALL PUT:  SEND DATA TO D.S.                   */
*/*%CONT19:        P  CLOSE DCB                                      */
*/*                P  FREE DCB CORE                                  */
*/*                P  FREE QSAM BUFFERS                              */
*/*                                                                  */
*/********************************************************************/
*                                                                  1043
*CKDSNAME:                                                         1043
*   PROCEDURE;                                                     1043
CKDSNAME STM   @14,@12,@SA00026                                    1043
*   RESPECIFY                                                      1044
*     PRMREG4 RSTD;                 /* INDICATE RESTRICTED HERE      */
*   PRMREG4=TSTIODSN;               /* GET ADDR OF OPEN DCB IN REG   */
         L     PRMREG4,TSTIODSN                                    1045
*   IF TSTIODCB^=0 THEN             /* MAKE SURE THERE IS A DCB      */
         L     @14,TSTIODCB                                        1046
         LTR   @14,@14                                             1046
         BZ    @RF01046                                            1046
*     DO;                                                          1047
*       DCBPTR=IOTSTWK;             /* SAVE DCB POINTER              */
         L     @06,IOTSTWK                                         1048
         ST    @06,DCBPTR                                          1048
*       IOTSTWK=TSTIODCB;           /* PICK UP LAST POINTER          */
         ST    @14,IOTSTWK                                         1049
*       IF LENGTHDN=DSLNGTH THEN    /* SEE IF THE LENGTHS ARE EQ     */
         LH    @14,DSLNGTH                                         1050
         CH    @14,LENGTHDN(,PRMREG4)                              1050
         BNE   @RF01050                                            1050
*         IF DN(1:DSLNGTH)=DSNAME(1:DSLNGTH) THEN/* SEE IF SAME      */
         BCTR  @14,0                                               1051
         EX    @14,@SC00640                                        1051
         BNE   @RF01051                                            1051
*           DO;                                                    1052
*             PRMREG4=DCBPTR;       /* SET UP ADDRESSABILITY         */
         LR    PRMREG4,@06                                         1053
*             GENERATE;                                            1054
         FREEMAIN RC,LV=TLEN,A=(4),SP=1 FREE UP CORE
*             IF RTNCODE^=0 THEN    /* TEST FOR PROBLEMS             */
         LTR   RTNCODE,RTNCODE                                     1055
         BZ    @RF01055                                            1055
*               DO;                                                1056
*                 PRMREG4=RTNCODE;  /* TRANSFER RETURN CODE          */
         LR    PRMREG4,RTNCODE                                     1057
*                 IOMSGPLT='00'X;   /* CLEAR PARM LIST               */
         XC    IOMSGPLT+1(83),IOMSGPLT+1                           1058
         MVI   IOMSGPLT,X'00'                                      1058
*                 GENERATE REFS(@IOVCON);                          1059
     IKJEGSIO SVCERR,SVC=120,RC=(4),ID=I0016,VCONBR=YES,MF=(E,IOMSGPLT)
*                 IF RTNCODE<16 THEN/* TEST FOR ATTN                 */
         CH    RTNCODE,@CH00095                                    1060
         BNL   @RF01060                                            1060
*                   RTNCODE=4;      /* INDICATE PROBLEMS TO CALLER   */
         LA    RTNCODE,4                                           1061
*                 GO TO EXITCKDN;   /* RETURN                        */
         B     EXITCKDN                                            1062
*               END;                                               1063
*             CALL PUT;             /* HAVE LINE PUT INTO DS         */
@RF01055 BAL   @14,PUT                                             1064
*             RETURN TO EXITDS;     /* RETURN TO CALLER              */
         LA    @14,EXITDS                                          1065
         LM    @15,@12,@SA00026+4                                  1065
         BR    @14                                                 1065
*           END;                                                   1066
*       IOTSTWK=DCBPTR;             /* RESTORE DCBPTR                */
@RF01051 DS    0H                                                  1067
@RF01050 MVC   IOTSTWK(4),DCBPTR                                   1067
*     END;                                                         1068
*   IF TSTIODSN^=0 THEN             /* SEE IF THERE IS A DCB OPEN    */
@RF01046 ICM   @14,15,TSTIODSN                                     1069
         BZ    @RF01069                                            1069
*     DO DSNQUEUE=1 BY 1 TO 256;    /* LOOP THRU DSN QUEUE           */
         LA    @14,1                                               1070
         STH   @14,DSNQUEUE                                        1070
@DL01070 DS    0H                                                  1071
*       IF LENGTHDN=DSLNGTH THEN    /* IF THE NAME IS IN THE QUEUE   */
         LH    @14,DSLNGTH                                         1071
         CH    @14,LENGTHDN(,PRMREG4)                              1071
         BNE   @RF01071                                            1071
*         IF DN(1:DSLNGTH)=DSNAME(1:DSLNGTH) THEN/* COMPARE          */
         BCTR  @14,0                                               1072
         EX    @14,@SC00640                                        1072
         BNE   @RF01072                                            1072
*           DO;                                                    1073
*             TSTFLGS3(5)='1'B;     /* TURN ON THE DUPLICATE NAME    */
         OI    TSTFLGS3,B'00001000'                                1074
*             GO TO NEWDSN;         /* NO MORE PROCESSING REQ'D      */
         B     NEWDSN                                              1075
*           END;                                                   1076
*       PRMREG4=DSNCHAIN;           /* MOVE TO NEXT ELEMENT IN CH'N  */
@RF01072 DS    0H                                                  1077
@RF01071 L     PRMREG4,DSNCHAIN(,PRMREG4)                          1077
*       IF PRMREG4=0 THEN           /* MAKE SURE MORE TO COMPARE     */
         LTR   PRMREG4,PRMREG4                                     1078
         BZ    @RT01078                                            1078
*         GO TO NEWDSN;             /* IF NOT STOP SEARCHING         */
*     END;                                                         1080
         LA    @14,1                                               1080
         AH    @14,DSNQUEUE                                        1080
         STH   @14,DSNQUEUE                                        1080
         CH    @14,@CH00393                                        1080
         BNH   @DL01070                                            1080
*NEWDSN:                                                           1081
*   GENERATE;                                                      1081
@RF01069 DS    0H                                                  1081
NEWDSN   DS    0H                                                  1081
         GETMAIN RC,LV=50,SP=1
*   IF RTNCODE^=0 THEN              /* SEE IF GETMAIN FAILED         */
         LTR   RTNCODE,RTNCODE                                     1082
         BZ    @RF01082                                            1082
*     DO;                                                          1083
*       PRMREG4=RTNCODE;            /* TRANSFER RETURN CODE          */
         LR    PRMREG4,RTNCODE                                     1084
*       IOMSGPLT='00'X;             /* ZERO OUT PARM LIST FOR IO     */
         XC    IOMSGPLT+1(83),IOMSGPLT+1                           1085
         MVI   IOMSGPLT,X'00'                                      1085
*       GENERATE REFS(@IOVCON);                                    1086
     IKJEGSIO SVCERR,SVC=10,RC=(4),ID=I0016,VCONBR=YES,MF=(E,IOMSGPLT)
*       IF RTNCODE<16 THEN          /* MAKE SURE AN ATTN NOT   SCHE'D*/
         CH    RTNCODE,@CH00095                                    1087
         BNL   @RF01087                                            1087
*         RTNCODE=4;                /* SET THE RETURN CODE TO ERROR  */
         LA    RTNCODE,4                                           1088
*       GO TO EXITCKDN;             /* BRANCH TO EXIT OF ROUTINE     */
         B     EXITCKDN                                            1089
*     END;                                                         1090
*   PRMREG4=PRMREG1;                /* TRANSFER GETMAIN ADDRESS      */
@RF01082 LR    PRMREG4,PRMREG1                                     1091
*   DSNCHAIN=TSTIODSN;              /* MOVE NEW NAME INTO DSN CHAIN  */
         MVC   DSNCHAIN(4,PRMREG4),TSTIODSN                        1092
*   TSTIODSN=PRMREG4;               /* STORE ADD OF NEW DCB TCOMTAB  */
         ST    PRMREG4,TSTIODSN                                    1093
*   LENGTHDN=DSLNGTH;               /* STORE LENGTH IN CHAIN         */
         LH    @14,DSLNGTH                                         1094
         STH   @14,LENGTHDN(,PRMREG4)                              1094
*   DN(1:DSLNGTH)=DSNAME(1:DSLNGTH);/* STORE NAME IN CHAIN           */
         BCTR  @14,0                                               1095
         EX    @14,@SM00643                                        1095
*CLOSEDCB:                                                         1096
*   IF TSTIODCB^=0 THEN             /* MAKE SURE THERE IS OPEN DCB   */
CLOSEDCB ICM   @14,15,TSTIODCB                                     1096
         BZ    @RF01096                                            1096
*     DO;                                                          1097
*       CALL ATTNCK;                /* CHECK FOR AN ATTN             */
         BAL   @14,ATTNCK                                          1098
*       IF RTNCODE^=0 THEN          /* IF ONE GET OUT & RTN          */
         LTR   RTNCODE,RTNCODE                                     1099
         BNZ   @RT01099                                            1099
*         GO TO EXITCKDN;                                          1100
*       PRMREG4=TSTIODCB;           /* ESTAB ADDRESS OF OLD DCB      */
         L     PRMREG4,TSTIODCB                                    1101
*       PRMREG1=ADDR(CLOSE);        /* SET UP ADDR IN R1 - CLOSE PL  */
         L     @14,IOTSTWK                                         1102
         LA    PRMREG1,CLOSE(,@14)                                 1102
*       CLOSE=CLFORM;               /* MOVE LIST FORM OF CLOSE MAC   */
         MVC   CLOSE(4,@14),CLFORM                                 1103
*       GENERATE;                                                  1104
         CLOSE ((4)),MF=(E,(1))
         FREEPOOL (4)                  FREE QSAM BUFFERS
         FREEMAIN RC,LV=TLEN,SP=1,A=(4) FREE OLD DCB
*       IF RTNCODE^=0 THEN          /* TEST FOR PROBLEMS             */
         LTR   RTNCODE,RTNCODE                                     1105
         BZ    @RF01105                                            1105
*         DO;                                                      1106
*           PRMREG4=RTNCODE;        /* TRANSFER RETURN CODE          */
         LR    PRMREG4,RTNCODE                                     1107
*           IOMSGPLT='00'X;         /* CLEAR PARM LIST               */
         XC    IOMSGPLT+1(83),IOMSGPLT+1                           1108
         MVI   IOMSGPLT,X'00'                                      1108
*           GENERATE REFS(@IOVCON);                                1109
     IKJEGSIO SVCERR,SVC=120,RC=(4),ID=IO016,VCONBR=YES,MF=(E,IOMSGPLT)
*           IF RTNCODE<16 THEN      /* TEST FOR AN ATTN              */
         CH    RTNCODE,@CH00095                                    1110
         BNL   @RF01110                                            1110
*             RTNCODE=4;            /* INDICATE TO USER PROBLEMS     */
         LA    RTNCODE,4                                           1111
*         END;                                                     1112
@RF01110 DS    0H                                                  1113
*       TSTIODCB='00'X;             /* ZERO OUT TSTIODCB IN TCOMTAB  */
@RF01105 SLR   @14,@14                                             1113
         ST    @14,TSTIODCB                                        1113
*     END;                                                         1114
*                                                                  1114
*/********************************************************************/
*/*                                                                  */
*/*ENDCKD:         R  RETURN TO CALLER                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  1115
*EXITCKDN:                                                         1115
*   RETURN CODE(RTNCODE);           /* RETURN TO CALLER              */
@RF01096 DS    0H                                                  1115
EXITCKDN L     @14,@SA00026                                        1115
         LM    @00,@12,@SA00026+8                                  1115
         BR    @14                                                 1115
*   END CKDSNAME;                                                  1116
*                                                                  1117
*/********************************************************************/
*/*                                                                  */
*/*                E  OPEN ROUTINE                                   */
*/*                P  CREATE DCB AND OPEN DATA SET                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  1117
*OPENDS:                                                           1117
*   PROCEDURE;                                                     1117
OPENDS   STM   @14,@12,@SA00027                                    1117
*   RESPECIFY                                                      1118
*     PRMREG4 RSTD;                 /* TELL PLS TO NOT USE REG 4     */
*   DCL                                                            1119
*     OPENREG REGISTER(11) RSTD;    /* DEFINE OPEN REGISTER FOR USE  */
*   DCL                                                            1120
*     DCBOFLGS BIT(8) GEND;         /* FLAG BYTE TO CK FOR OK OPEN   */
*   DCL                                                            1121
*     MYDCB CHAR(96) GEND;          /* DEFINE DCB LIST FORM          */
*   DCL                                                            1122
*     LFORM CHAR(4) GEND;           /* DEFINE LIST FORM OF OPEN      */
*   DCL                                                            1123
*     DCBDDNAM CHAR(8) GEND;        /* DEFINE DD NAME AREA IN DCB    */
*   GENERATE;                                                      1124
         DROP  DSECT4                  RELEASE REG 4 FOR USE
         USING IHADCB,DSECT4           ESTAB REG 4 FOR DSECT
*   PRMREG4=IOTSTWK;                /* ESTAB ADDRESS OF DCB          */
         L     @14,IOTSTWK                                         1125
         LR    PRMREG4,@14                                         1125
*   OPEN=LFORM;                     /* MOVE LIST FORM OF OPEN MACRO  */
         MVC   OPEN(4,@14),LFORM                                   1126
*   DCB=MYDCB;                      /* MOVE LIST FORM OF DCB MACRO   */
         MVC   DCB(96,@14),MYDCB                                   1127
*   DCBDDNAM=TEMPDDN;               /* MOVE DD NAME TO DCBDD NAME    */
         MVC   DCBDDNAM(8),TEMPDDN                                 1128
*   CALL ATTNCK;                    /* SEE IF ATTN OR LOGOFF IN PRO  */
         BAL   @14,ATTNCK                                          1129
*   IF RTNCODE^=0 THEN              /* TEST RESULTS                  */
         LTR   RTNCODE,RTNCODE                                     1130
         BNZ   @RT01130                                            1130
*     GO TO EXITOPEN;               /* BRANCH TO THE EXIT            */
*   OPENREG=ADDR(OPEN);             /* SET UP OPEN PARM REG          */
         L     OPENREG,IOTSTWK                                     1132
         LA    OPENREG,OPEN(,OPENREG)                              1132
*   GENERATE;                                                      1133
         OPEN ((4)),MF=(E,(11))
*   RTNCODE=0;                      /* MAKE SURE RTNCODE ZERO        */
         SLR   RTNCODE,RTNCODE                                     1134
*   IF DCBOFLGS(4)^='1'B THEN       /* SEE WE WERE ABLE GET IT OPEN  */
         TM    DCBOFLGS,B'00010000'                                1135
         BO    @RF01135                                            1135
*     DO;                                                          1136
*       IOMSGPLT='00'X;             /* CLEAR PARM LIST               */
         XC    IOMSGPLT+1(83),IOMSGPLT+1                           1137
         MVI   IOMSGPLT,X'00'                                      1137
*       GENERATE REFS(@IOVCON);                                    1138
* ISSUE THE COULD NOT OPEN DATA SET MESSAGE
         IKJEGSIO MSG,FIRST=M0052,ID=IO016,VCONBR=YES,MF=(E,IOMSGPLT)
*       IF RTNCODE<16 THEN          /* MAKE SURE AN ATTN NOT SCHE    */
         CH    RTNCODE,@CH00095                                    1139
         BNL   @RF01139                                            1139
*         RTNCODE=4;                /* INDICATE TROUBLE WITH 4 RC    */
         LA    RTNCODE,4                                           1140
*     END;                                                         1141
*                                                                  1141
@RF01139 DS    0H                                                  1142
*/********************************************************************/
*/*                                                                  */
*/*                R  RETURN TO CALLER                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  1142
*EXITOPEN:                          /* LABEL USED TO BRANCH TO END   */
*   RETURN CODE(RTNCODE);           /* RETURN TO DATA SET ROUTINE    */
@RF01135 DS    0H                                                  1142
EXITOPEN L     @14,@SA00027                                        1142
         LM    @00,@12,@SA00027+8                                  1142
         BR    @14                                                 1142
*   END OPENDS;                                                    1143
*                                                                  1144
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE PUT ROUTINE                    */
*/*    THE PRIMARY FUNCTION IS:                                      */
*/*                                                                  */
*/*        1.   ISSUE PUT MACRO TO PUT OUT DATA TO D.S.              */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*                E  PUT ROUTINE                                    */
*/*                S  CALL ATTN CHECK: CHECK FOR ATTN OR LOGOFF      */
*/*                P  ISSUE PUT MACRO TO PUT DATA LINE IN DATA SET   */
*/*                R  RETURN TO CALLING ROUTINE                      */
*/*                                                                  */
*/********************************************************************/
*                                                                  1144
*PUT:                                                              1144
*   PROCEDURE;                                                     1144
PUT      STM   @14,@12,@SA00028                                    1144
*   CALL ATTNCK;                    /* SEE IF ATTENTION WAS SCHE'D   */
         BAL   @14,ATTNCK                                          1145
*   IF RTNCODE^=0 THEN              /* SHOULD THE PROCESSING STOP ?  */
         SLR   @14,@14                                             1146
         CR    RTNCODE,@14                                         1146
         BNE   @RT01146                                            1146
*     GO TO EXITPUT;                /* IF SO RETURN                  */
*   IF SKIPLINE=0 THEN              /* IF NULL LINE REQ      @ZA15369*/
         L     @06,IOPARMS                                         1148
         L     @06,SIODATA(,@06)                                   1148
         CH    @14,SKIPLINE(,@06)                                  1148
         BNE   @RF01148                                            1148
*     SKIPLINE=NULLINE(1:2);        /* SET LL TO 05          @ZA15369*/
         MVC   SKIPLINE(2,@06),NULLINE                             1149
*   PRMREG1=TSTIODCB;               /* SET UP ADDR OF DCB FOR PUT    */
@RF01148 L     PRMREG1,TSTIODCB                                    1150
*   PRMREG0=SIODATA;                /* SET UP ADDR TO DATA LINE      */
         L     @14,IOPARMS                                         1151
         L     PRMREG0,SIODATA(,@14)                               1151
*   GENERATE(PUT (1),(0));          /* ISSUE PUT ASSEM MACRO         */
         PUT (1),(0)
*   RTNCODE=0;                      /* INITIALIZE RTNCODE TO ZERO    */
         SLR   RTNCODE,RTNCODE                                     1153
*EXITPUT:                                                          1154
*   RETURN CODE(RTNCODE);           /* RETURN TO CALLER WITH CODE    */
EXITPUT  L     @14,@SA00028                                        1154
         LM    @00,@12,@SA00028+8                                  1154
         BR    @14                                                 1154
*   END PUT;                                                       1155
*                                                                  1156
*/********************************************************************/
*/*                                                                  */
*/*    THE FOLLOWING PROCEDURE IS THE OPEN EXIT ROUTINE CALL BY OPEN */
*/*    THE PRIMARY FUNCTION IS:                                      */
*/*                                                                  */
*/*        1.  ADJUST DCB DURING THE OPENING OF DATA SET             */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/*                E  EXIT ROUTINE                                   */
*/*                P  ADJUST REC AND BLK SIZES IF NOT COMPATIBLE     */
*/*                R  RETURN TO CALLING ROUTINE                      */
*/*                                                                  */
*/********************************************************************/
*                                                                  1156
*EXIT:                                                             1156
*   PROCEDURE;                                                     1156
EXIT     STM   @14,@12,12(@13)                                     1156
*   DCL                                                            1157
*     DCBRECFM BIT(8) GEND;         /* DEFINE DCB FIELDS TO PLS      */
*   DCL                                                            1158
*     DCBLRECL FIXED(15) GEND;      /* DEFINE DCB FIELDS TO PLS      */
*   DCL                                                            1159
*     DCBBLKSI FIXED(15) GEND;      /* DEFINE DCB FIELDS TO PLS      */
*   IF DCBRECFM(2)^='1'B×DCBRECFM(1:2)='11'B THEN/* TEST FMT         */
         TM    DCBRECFM,B'01000000'                                1160
         BNO   @RT01160                                            1160
         TM    DCBRECFM,B'11000000'                                1160
         BNO   @RF01160                                            1160
@RT01160 DS    0H                                                  1161
*     DO;                                                          1161
*       DCBRECFM='50'X;             /* SET IN THE DEFAULT SIZE       */
         MVI   DCBRECFM,X'50'                                      1162
*       DCBLRECL=125;               /* SET IN THE DEFAULT SIZE       */
         MVC   DCBLRECL(2),@CH00611                                1163
*       DCBBLKSI=1629;              /* SET IN THE DEFAULT SIZE       */
         MVC   DCBBLKSI(2),@CH00612                                1164
*       GO TO EXITEXIT;             /* RETURN TO OPEN                */
         B     EXITEXIT                                            1165
*     END;                                                         1166
*   IF DCBLRECL>125 THEN            /* TEST FOR SIZE GT THAN 124     */
@RF01160 LA    @14,125                                             1167
         CH    @14,DCBLRECL                                        1167
         BNL   @RF01167                                            1167
*     DCBLRECL=125;                 /* RESET TO TEST LIMITS          */
         STH   @14,DCBLRECL                                        1168
*   IF DCBBLKSI<129 THEN            /* TEST FOR MIMIMUM SIZE         */
@RF01167 LA    @14,129                                             1169
         CH    @14,DCBBLKSI                                        1169
         BNH   @RF01169                                            1169
*     DCBBLKSI=129;                 /* RESET TO TEST LIMITS          */
         STH   @14,DCBBLKSI                                        1170
*EXITEXIT:                          /* LABEL TO BRANCH TO EXIT OF R  */
*   RETURN;                                                        1171
@EL00029 DS    0H                                                  1171
@EF00029 DS    0H                                                  1171
@ER00029 LM    @14,@12,12(@13)                                     1171
         BR    @14                                                 1171
*   END EXIT;                                                      1172
         B     @EL00029                                            1172
*   END DATASET;                                                   1173
*                                                                  1174
*/********************************************************************/
*/*                                                                  */
*/* THE FOLLOWING GENERATE SECTION WILL EXPAND ALL ASSEMBLER MACROS  */
*/*                                                                  */
*/********************************************************************/
*                                                                  1174
*   GENERATE DATA;                                                 1174
*   END IKJEGIO                                                    1175
*                                                                  1175
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IKJPPL  )                                       */
*                                                                  1175
*       ;                                                          1175
@EL00001 L     @13,4(,@13)                                         1175
@EF00001 L     @00,@SIZDATD                                        1175
         LR    @01,@12                                             1175
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     1175
         BR    @14                                                 1175
@DATA    DS    0H
@CH00235 DC    H'0'
@CH00146 DC    H'4'
@CH00129 DC    H'6'
@CH00033 DC    H'7'
@CH00034 DC    H'8'
@CH00058 DC    H'12'
@CH00095 DC    H'16'
@CH00251 DC    H'20'
@CH00082 DC    H'24'
@CH00570 DC    H'38'
@CH00571 DC    H'48'
@CH00617 DC    H'56'
@CH00259 DC    H'99'
@CH00611 DC    H'125'
@CH00263 DC    H'199'
@CH00258 DC    H'200'
@CH00393 DC    H'256'
@CH00612 DC    H'1629'
@CH00557 DC    XL2'1708'
@SM00623 MVC   0(0,@10),VPDETXT(@05)
@SM00625 MVC   0(0,@11),MSGINST(@10)
@SM00629 MVC   PARSEMSG(0,@14),FMTMSG(@11)
@SC00634 CLC   NAME(0,@14),DSN(@05)
@SM00636 MVC   DA08PSWD(0),PASSWORD(@14)
@SM00638 MVC   DSNAME(0),DSN(@14)
@SC00640 CLC   DN(0,PRMREG4),DSNAME
@SM00643 MVC   DN(0,PRMREG4),DSNAME
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00020 DS    15F
@SA00015 DS    15F
@SA00003 DS    15F
@SA00012 DS    15F
@SA00019 DS    15F
@SA00004 DS    15F
@SA00016 DS    15F
@SA00007 DS    15F
@SA00005 DS    15F
@SA00011 DS    15F
@SA00009 DS    15F
@SA00010 DS    15F
@SA00013 DS    15F
@SA00014 DS    15F
@SA00021 DS    15F
@SA00028 DS    15F
@SA00022 DS    15F
@SA00026 DS    15F
@SA00025 DS    15F
@SA00023 DS    15F
@SA00027 DS    15F
@SA00024 DS    15F
IKJEGIO  CSECT
         DS    0F
@CF00115 DC    F'1'
@CH00115 EQU   @CF00115+2
@CF00119 DC    F'2'
@CH00119 EQU   @CF00119+2
@CF00032 DC    F'3'
@CF00256 DC    F'100'
@CH00256 EQU   @CF00256+2
@CF00628 DC    F'-12'
@CF00627 DC    F'-8'
@CF00622 DC    F'-4'
@DATD    DSECT
         DS    0D
MSGPTR   DS    A
INSTPTR  DS    A
DCBPTR   DS    A
IOPARMS  DS    A
INSTCTR  DS    F
SIOTYPPT DS    A
SIOINTPT DS    A
PPLPTR   DS    A
PDLPTR   DS    A
INDXTAB  DS    A
REGPTR   DS    A
ZEROCTR  DS    F
SVCTABPR DS    A
SVCINDX  DS    F
ABENDINX DS    F
RCODEINX DS    F
IOTSTWK  DS    A
TEMPTPL  DS    A
DAPLRC   DS    F
INTBUFPT DS    A
MSGBUFPT DS    A
DSNQUEUE DS    H
LEV      DS    FL1
TYPEINST DS    FL1
LENGTH   DS    FL1
         DS    CL3
IOMSGPLT DS    CL84
ESTAEPRM DS    CL16
USERPPL  DS    CL28
USERCBUF DS    CL5
         DS    CL3
MSGBUF   DS    CL932
         ORG   MSGBUF
MESSAGE  DS    CL104
         ORG   MESSAGE+0
LENMSG   DS    FL2
@NM00004 DS    FL2
MSGTEXT  DS    CL100
         ORG   MSGTEXT+0
WKMSGID  DS    CL9
WKMSGTXT DS    CL91
         ORG   MSGBUF+208
MSGINST1 DS    CL56
         ORG   MSGINST1+0
LENINST1 DS    FL2
DISPIN1  DS    FL2
INSTTXT1 DS    CL52
         ORG   MSGBUF+544
MSGINST2 DS    CL56
         ORG   MSGINST2+0
LENINST2 DS    FL2
DISPIN2  DS    FL2
INSTTXT2 DS    CL52
         ORG   MSGBUF+880
USERIOPL DS    CL16
USERPGB  DS    CL12
         ORG   USERPGB
@NM00005 DS    CL8
MRTNADDR DS    AL4
         ORG   MSGBUF+908
OUTPUTPB DS    CL16
         ORG   OUTPUTPB
@NM00006 DS    CL8
FMATMSG  DS    AL4
@NM00007 DS    CL4
         ORG   MSGBUF+924
VPDE     DS    CL8
         ORG   VPDE
VPDEPT   DS    AL4
VPDEL    DS    FL2
VDEFLG   DS    FL1
VPDET    DS    FL1
         ORG   MSGBUF+932
TEMPDDN  DS    CL8
DSNDAIR  DS    CL46
         ORG   DSNDAIR
DSLNGTH  DS    FL2
DSNAME   DS    CL44
         ORG   DSNDAIR+46
         DS    CL2
DAPB08WK DS    CL100
DAPLWK   DS    CL20
DFPBWK   DS    CL20
EFF18PL  DS    CL20
         ORG   EFF18PL
F18DAPL  DS    AL4
F18DAPRC DS    AL4
F18MSGPT DS    AL4
F18IDNUM DS    AL4
F18FILL  DS    FL4
         ORG   EFF18PL+20
MACROWK  DS    CL12
IKJEGIO  CSECT
         DS    0F
@SIZDATD DC    AL1(78)
         DC    AL3(@ENDDATD-@DATD)
@CA00152 DC    A(ATTACHIO)
         DS    0D
PUTOUT   DC    XL4'0'
F18MSG   DC    F'0'
F18ID    DC    H'1'
         DS    CL2
LIST     DS    CL4
         ORG   LIST
@NM00001 DC    XL1'85'
@NM00002 DC    AL3(EXIT)
         ORG   LIST+4
SUPERZAP DS    CL50
         ORG   SUPERZAP
@NM00003 DC    50CL1'Z'
         ORG   SUPERZAP+50
         DS    CL2
NULLINE  DS    CL5
         ORG   NULLINE
@NM00020 DC    H'5'
@NM00021 DC    H'0'
@NM00022 DC    CL1' '
         ORG   NULLINE+5
TESTLIST DC    CL8'TESTLIST'
DUMBUF   DC    X'0005000040'
DSN2LONG DS    CL67
         ORG   DSN2LONG
MSGLENTH DC    H'67'
@NM00025 DS    FL2
TXTOFMSG DC    CL63'IKJ57613I DSNAME WHEN FULLY QUALIFIED WILL EXCEED 4C
               4 CHARACTERS'
         ORG   DSN2LONG+67
IKJEGIO  CSECT
*                                      /* VCON FOR SIO MACRO  ZZZZZZZZ*
@IOVCON  DC    V(IKJEGIO)
@DATD    DSECT
*                                       /* PCL AND VALIDCK   @ZA06223*/
IKJEGIO  CSECT    ,           PUSHING THE ASSEMBLER AROUND   @ZA06223
PCLADDR  DC       A(PRMTPCL)  PCL ADDRESS IN HERE            @ZA06223
PRMTPCL  IKJPARM  DSECT=PDLMAP
PRMTDSN  IKJPOSIT DSNAME,USID,VALIDCK=CHKDSNM,               @ZA06223  X
               PROMPT='OUTPUT DATA SET NAME'                 @ZA06223
         IKJENDP
CHKDSNM  CSECT                                               @ZA06223
         STM   14,12,12(13)   SAVE PARSE REGS                @ZA06223
         BALR  12,0           GET ADDRESSABILITY             @ZA06223
         USING *,12           FOR CSECT                      @ZA06223
         LR    2,1            SAVE PARAMETERS                @ZA06223
         GETMAIN R,LV=72      GET A SAVE AREA                @ZA06223
         ST    1,8(13)        AND CHAIN IT UP                @ZA06223
         ST    13,4(1)        FOREWARD AND BACK              @ZA06223
         LR    13,1           POINT TO MY SAVE AREA          @ZA06223
         L     3,0(0,2)       LOAD PDE ADDR                  @ZA06623
         TM    6(3),X'20'     SEE IF DSN FULLY QUALIFIED     @ZA06223
         BO    GOODDSN        YES - BYPASS ALL FURTHER TESTS @ZA06223
         LH    4,4(0,3)       NO-SEE IF TOO LONG             @ZA06223
         LA    5,35(0,0)      LOAD DSN LEN AND LIMIT         @ZA06223
         CR    4,5            SEE IF TOO LONG                @ZA06223
         BNH   GOODDSN        NO-GET OUT NORMALLY            @ZA06223
         L     1,4(0,2)       LOAD PTR TO IOPL               @ZA06223
         PUTLINE MF=(E,(1))   ISSUE ERROR MSG                @ZA06223
         LR    1,13           SAVE W/A PTR                   @ZA06223
         L     13,4(13)       LOAD CALLERS S/A PTR           @ZA06223
         FREEMAIN R,LV=72,A=(1) FREE MY S/A                  @ZA06223
         LM    14,12,12(13)   LOAD CALLERS REGS              @ZA06223
         LA    15,8(0,0)      SET RC = 8                     @ZA06223
         BR    14             RETURN TO PARSE                @ZA06223
GOODDSN  LR    1,13           SAVE MY S/A PTR                @ZA06223
         L     13,4(13)       LOAD CALLERS S/A PTR           @ZA06223
         FREEMAIN R,LV=72,A=(1) FREE MY S/A                  @ZA06223
         LM    14,12,12(13)   RELOAD CALLERS REGS            @ZA06223
         SLR   15,15          SET RC = ZERO                  @ZA06223
         BR    14             RETURN TO PARSE                @ZA06223
         DROP  12                                            @ZA06223
IKJEGIO  CSECT ,                                             @ZA06223
@DATD    DSECT
         DS    0D  NULL LINE
IKJEGIO  CSECT
IKJEGSPL IKJEGSPL RTRY=RETRY,ABNTB=IOABLST,MODNM=IKJEGIO,TNM=TEST-I/O
IOABLST  DS    0F            ABEND TABLE
         DC    X'FF'         TABLE STOPPER
MYDCB    DCB   MACRF=(PM),DSORG=PS,EXLST=LIST,SYNAD=A7SYNAD
LENDCB   EQU   *-MYDCB       LENGTH OF YMDCB
CLFORM   CLOSE (CLFORM),MF=L  LIST FORM OF CLOSE
LENCLF   EQU   *-CLFORM      LENGTH OF CLOSE MACRO
LFORM    OPEN  (,(OUTPUT)),MF=L  LIST FORM OF OPEN
LENOLF   EQU   *-LFORM       LENGTH OF OPEN MACRO
************************************************************
**                                                        **
**                   PUTLINE LIST MACRO EXPANSIONS        **
**                                                        **
************************************************************
PUTDATA PUTLINE OUTPUT=(PUTOUT,TERM,SINGLE,DATA),MF=L
PUTDATA1 EQU   *-PUTDATA     THIS INSTRUCTION OBTAINS THE LENGTH
PUTMSG   PUTLINE OUTPUT=(PUTOUT,TERM,SINGLE,INFOR),MF=L
PUTMSG1  EQU   *-PUTMSG      THIS GETS THE LENGHT OF THE PARM FLD
PUTMSG2  PUTLINE OUTPUT=(PUTOUT,TERM,MULTLVL,INFOR),MF=L
PUTMSG3  EQU   *-PUTMSG2     OBTAIN LENGTH OF PARM LIST
GETLINE  EQU   *
SERVICE  EQU   *
PUTGETIT PUTGET  OUTPUT=(PUTOUT,SINGLE,MODE),MF=L
PUTGETSZ EQU   *-PUTGETIT
PUTGETML PUTGET OUTPUT=(PUTOUT,MULTLVL),MF=L
PUTGETLN EQU   *-PUTGETML    FIND CORRECT LENGTH OF LIST
PUTSPACE PUTLINE OUTPUT=(PUTOUT,DATA),TERMPUT=(EDIT),MF=L
SPACESZ  EQU   *-PUTSPACE    SIZE OF LIST
TCOMTAB  TCOMTAB
         TSTCWORK
         IKJTPL
         IKJECT
         IKJDAP08
         IKJIOPL
         IKJPTPB
         IKJPGPB
         IKJDFPL
         IKJDFPB
         IKJDAPL
CVTDSECT DSECT
         CVT
         IKJTCB
         DCBD  DSORG=PS
DSNLEN   EQU   46                    LENGTH OF DATA SET NAME
PASSDCB  EQU   LENDCB+LENCLF+LENOLF  ADDRESS FOR DSNAME DSECT
TLEN     EQU   LENDCB+LENCLF+LENOLF+DSNLEN  LENGTH OF GETMAIN AREA
@DATD    DSECT
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKJEGIO  CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
PRMREG1  EQU   @01
PRMREG0  EQU   @00
SIORETCD EQU   @15
RTNCODE  EQU   @15
DCBREG   EQU   @01
IOPLREG  EQU   @01
IOPBREG  EQU   @05
OLD      EQU   @04
TCOMPTR  EQU   @09
MSGCSECT EQU   @02
ESTAEADD EQU   @02
RTNSAVE  EQU   @02
DSECT10  EQU   @10
PRMREG4  EQU   @04
PDEREG   EQU   @00
PDELEN   EQU   @00
INSERTRG EQU   @01
PRMREG5  EQU   @05
DSECT4   EQU   @04
DSECT11  EQU   @11
PRMREG11 EQU   @11
OPENREG  EQU   @11
         EXTRN ATTACHIO
TYP      EQU   0
INTPLPTR EQU   0
CONVROUT EQU   0
CONDATA  EQU   0
CONLEN   EQU   CONDATA
CONTXT   EQU   CONDATA+1
PDECONVR EQU   0
PPL      EQU   0
PPLPCL   EQU   PPL+12
PPLANS   EQU   PPL+16
PPLCBUF  EQU   PPL+20
PPLUWA   EQU   PPL+24
PARMTAB  EQU   0
MSG99PTR EQU   PARMTAB
MSG199PT EQU   PARMTAB+4
SECONDPT EQU   PARMTAB+8
INSERTPT EQU   PARMTAB+12
SVCTBP   EQU   PARMTAB+16
SVCTBRCP EQU   PARMTAB+20
MSGPARMS EQU   0
SIOTYPE  EQU   MSGPARMS
SIOMODID EQU   MSGPARMS+1
SIOTYP11 EQU   MSGPARMS+2
SIONUMI1 EQU   MSGPARMS+12
SIO1STMS EQU   MSGPARMS+16
SIO11PTR EQU   MSGPARMS+20
SIO13PTR EQU   MSGPARMS+28
SIOTYP21 EQU   MSGPARMS+46
SIONUMI2 EQU   MSGPARMS+52
SIO2NDMS EQU   MSGPARMS+56
SIO21PTR EQU   MSGPARMS+60
SVCPRMS  EQU   0
SIOABREG EQU   SVCPRMS+4
SIORCREG EQU   SVCPRMS+8
SIOSVCMG EQU   SVCPRMS+16
DATAPRMS EQU   0
SIODATA  EQU   DATAPRMS+4
SIODSN   EQU   DATAPRMS+8
REDEFPL  EQU   0
OLDPTR2  EQU   REDEFPL+8
ZEROOLD  EQU   REDEFPL+48
@NM00016 EQU   0
AMTINDX  EQU   @NM00016
INDXPTR  EQU   @NM00016+4
MG       EQU   0
INDISP   EQU   MG
LOCALMSG EQU   MG+6
LENLOCAL EQU   LOCALMSG
TEXTMSG  EQU   LOCALMSG+4
MSGINST  EQU   0
INSTLEN  EQU   MSGINST
INSTPDE  EQU   0
VPDETXT  EQU   0
ZEROTEST EQU   0
SVCTB1   EQU   0
AB2NDLV1 EQU   SVCTB1
ABCDTB1  EQU   SVCTB1+4
SVCNUM1  EQU   ABCDTB1
ABTABPT1 EQU   ABCDTB1+4
SVCINST1 EQU   ABCDTB1+8
ABTAB1   EQU   0
ABCODE1  EQU   ABTAB1
RCTABPT1 EQU   ABTAB1+4
ABCDINST EQU   ABTAB1+8
RCTAB1   EQU   0
SVC1STM1 EQU   RCTAB1
RCSVC    EQU   RCTAB1+4
SVCRC1   EQU   RCSVC
RCINST1  EQU   RCSVC+4
SVCTBRC2 EQU   0
RC2NDLV2 EQU   SVCTBRC2
SVCRCT2  EQU   SVCTBRC2+4
SVCNUM2  EQU   SVCRCT2
SVCRCTB2 EQU   SVCRCT2+4
RCTAB2   EQU   0
SVCRC2   EQU   RCTAB2
SVC1STM2 EQU   RCTAB2+4
SVCRCIN2 EQU   RCTAB2+8
SKIPLINE EQU   0
PUTGETDS EQU   0
INBUFPTR EQU   PUTGETDS+12
PARSEMSG EQU   0
FMTMSG   EQU   0
FMTMSGLN EQU   FMTMSG
LOGONOFF EQU   0
ATTNHIT  EQU   0
DSNAMPDE EQU   0
STRNGPTR EQU   DSNAMPDE
DSL      EQU   DSNAMPDE+4
FLAGRES1 EQU   DSNAMPDE+6
FLAGRES2 EQU   DSNAMPDE+14
PSWRDPTR EQU   DSNAMPDE+16
LENPSWRD EQU   DSNAMPDE+20
FLAGRES3 EQU   DSNAMPDE+22
TESTIOWK EQU   0
DCB      EQU   TESTIOWK
CLOSE    EQU   TESTIOWK+96
OPEN     EQU   TESTIOWK+100
CURDCBDN EQU   TESTIOWK+104
LENDSN   EQU   CURDCBDN
NAME     EQU   CURDCBDN+2
DSN      EQU   0
PASSWORD EQU   0
DSNQUEU  EQU   0
DSNCHAIN EQU   DSNQUEU
LENGTHDN EQU   DSNQUEU+4
DN       EQU   DSNQUEU+6
ERRORMSG EQU   0
PART1    EQU   ERRORMSG
PART2    EQU   ERRORMSG+34
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
LENMEMBR EQU   DSNAMPDE+12
PTRMEMBR EQU   DSNAMPDE+8
@NM00024 EQU   FMTMSG+4
@NM00023 EQU   FMTMSG+2
@NM00019 EQU   PUTGETDS
@NM00018 EQU   MSGINST+2
@NM00017 EQU   LOCALMSG+2
SECONDPR EQU   REDEFPL+56
INSTNUM2 EQU   REDEFPL+52
@NM00015 EQU   REDEFPL+20
FIRSTPTR EQU   REDEFPL+16
INSTAMT1 EQU   REDEFPL+12
@NM00014 EQU   REDEFPL
@NM00013 EQU   DATAPRMS
SIOINPTR EQU   SVCPRMS+60
@NM00012 EQU   SVCPRMS+47
SIOINTYP EQU   SVCPRMS+46
@NM00011 EQU   SVCPRMS+20
@NM00010 EQU   SVCPRMS+12
@NM00009 EQU   SVCPRMS
SIO26PTR EQU   MSGPARMS+80
SIO25PTR EQU   MSGPARMS+76
SIO24PTR EQU   MSGPARMS+72
SIO23PTR EQU   MSGPARMS+68
SIO22PTR EQU   MSGPARMS+64
SIOTYP26 EQU   MSGPARMS+51
SIOTYP25 EQU   MSGPARMS+50
SIOTYP24 EQU   MSGPARMS+49
SIOTYP23 EQU   MSGPARMS+48
SIOTYP22 EQU   MSGPARMS+47
@NM00008 EQU   MSGPARMS+44
SIO16PTR EQU   MSGPARMS+40
SIO15PTR EQU   MSGPARMS+36
SIO14PTR EQU   MSGPARMS+32
SIO12PTR EQU   MSGPARMS+24
SIOSCPTR EQU   MSGPARMS+8
SIOTYP16 EQU   MSGPARMS+7
SIOTYP15 EQU   MSGPARMS+6
SIOTYP14 EQU   MSGPARMS+5
SIOTYP13 EQU   MSGPARMS+4
SIOTYP12 EQU   MSGPARMS+3
PPLECB   EQU   PPL+8
PPLECT   EQU   PPL+4
PPLUPT   EQU   PPL
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00074 EQU   NOESTAE
@RF00114 EQU   @RC00111
@RT00146 EQU   EXITMSG
@RT00173 EQU   EXITMSG
@RT00191 EQU   EXITINST
@RT00194 EQU   EXITINST
@RT00333 EQU   EXITADDX
@RT00364 EQU   EXITADDD
@RT00399 EQU   EXITREG
@RT00452 EQU   EXITABSH
@RT00470 EQU   EXITABSH
@PB00013 EQU   @PB00014
@RT00592 EQU   EXITTERM
@RF00607 EQU   @RC00594
@RF00615 EQU   @RC00610
@RC00619 EQU   @RC00618
@RF00660 EQU   @RC00618
@RT00675 EQU   EXITTERM
@RT00680 EQU   EXITTERM
@RC00693 EQU   @RC00690
@RC00691 EQU   @RC00690
@RC00701 EQU   @RC00696
@RC00699 EQU   @RC00696
@RC00697 EQU   @RC00696
@RF00807 EQU   EXITDS
@RT00867 EQU   EXITDS
@RT00884 EQU   EXITDS
@RT00895 EQU   EXITDS
@RT00995 EQU   EXITRCDR
@RT01014 EQU   EXITSYND
@RF01030 EQU   EXITBADD
@RF01060 EQU   EXITCKDN
@RT01078 EQU   NEWDSN
@RF01087 EQU   EXITCKDN
@RT01099 EQU   EXITCKDN
@RT01130 EQU   EXITOPEN
@RT01146 EQU   EXITPUT
@RF01169 EQU   @EL00029
EXITEXIT EQU   @EL00029
@RF00431 EQU   @PB00013
@RF00626 EQU   @RC00619
@RF00633 EQU   @RC00619
@RF00641 EQU   @RC00619
@ENDDATA EQU   *
         END   IKJEGIO,(C'PLS0741',0701,78174)
