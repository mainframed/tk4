SRH      TITLE 'IKJEGSRH, SERVICE ROUTINE REMOVES ACTIVEBRK POINTS'
         COPY  IKJEGSIO
IKJEGSRH CSECT                     SEARCH AND REMOVAL SERVICE ROUTINE
* A75984, 75987                                                  YM2246
* A056084,095000                                               @YM00572
* C056020                                                      @YM00574
* A145100,145200                                               @YM06114
* C097972                                                      @ZA27728
         EJECT
************************************************************
*
* STATUS
*    CHANGE LEVEL 00, VERSION NUMBER 01, OS/VS2
*
* FUNCTION
*    SRH SEARCHS AND REMOVES WHATEVER BREAKPOINTS ARE EITHER AT
*    THE SPECIFIED ADDRESS OR WITHIN THE SPECIFIED RANGE
*    THE ADDRESS OF WHERE THE INSTRUCTION IS TO BE REPLACED IS
*    VALIDITY CHECKED AND IF THIS ADDRESS IS 'WRITTABLE' THE
*    INSTRUCTION IS PUT BACK.
*
* ENTRY POINTS
*         IKJEGSRH - MAIN ENTRY POINT
*
* INPUT
*    THREE WORDS POINTED TO BY REGISTER 1.
*    WORD 1 FLAGS 4=SEARCH ONLY, 0=SEARCH AND REMOVE, 8=SEARCH BACKUP
*    WORD 2 ADDRESS IN QUESTION (OR BEGINNING OF RANGE)
*    WORD 3 END ADDRESS OF RANGE (OR ZERO IF NO RANGE)
*
* OUTPUT
*    1.  RETURN CODES
*    *          00 - SUCCESSFUL COMPLETION OR BREAKPOINT(S) REMOVED
*    *          04 - NO BREAKPOINT FOUND
*    *          08 - INVALID RANGE
*
* EXTERNAL REFERENCES
*      ESATE    - ESTABLISH ABEND RECOVERY EXIT RTN (IKJEGSTA)
*
*      FREEMAIN - FREE CORE
*
*      IKJEGS9G - VALIDITY CHECK ADDRESS FOR WRITE ACCESS
*
*      IKJEGIO  - PRINT ERROR MESSAGES (INVOKED VIA 'IKJEGSIO'
*                 MACRO )
*
* EXITS,NORMAL
*    RETURN TO CALLER VIA REGISTER 14
*
* EXITS,ERROR
*    RETURN TO CALLER VIA REGISTER 14
*
* TABLES/WORK AREAS
*    TCOMTAB -
*    *    BREAKTAB - PTR TO ACTIVE BREAK ELEMENTS
*    *    CWORKSRH - GENERAL WORK AREA FOR IKJEGSRH
*
* ATTRIBUTES
*    REENTRANT AND REFRESHABLE
*
* CHARACTER CODE DEPENDENCY
*    THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL
*    REPRESENTATION OF THE EXTERNAL CHARSRHER SET WHICH IS
*    EQUIVALENT TO THE ONE USED AT ASSEMBLY TIME. THE
*    CODING HAS BEEN ARRANGED SO THAT REDEFINITION OF
*    'CHARACTER' CONSTANTS, BY REASSEMBLY, WILL RESULT IN
*    A CORRECT MODULE FOR THE NEW DEFINITIONS.
*
* NOTES
*
************************************************************
* CHANGE ACTIVITY:
*    @ZA17788 - ENTRY POINT OF STAE EXIT RTN SPECIFIED INCORRECTLY
*               IN STAE MACRO NEAR LABEL 'SRHSTART'.
************************************************************
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        THE FOLLOWING ARE THE EQUATES NEEDED BY THE SEARCH ROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
*        REGISTER EQUATES
R0       EQU   0                   GENERAL WORK REGISTER (INPUT REG)
R1       EQU   1                   GENERAL WORK REGISTER (PARAM PASS)
R2       EQU   2                   GENERAL WORK REGISTER
R3       EQU   3                   GENERAL WORK REGISTER
R4       EQU   4                   GENERAL WORK REGISTER
R5       EQU   5                   GENERAL WORK REGISTER
R6       EQU   6                   BASE REGISTER FOR CONTROL BLOCKS
R7       EQU   7                   BASE REGISTER FOR ACTIVE Q
R8       EQU   8                   BASE REGISTER FOR TEMPORARY USE
R9       EQU   9                   BASE REGISTER FOR TCOMTAB
R10      EQU   10                  BASE REGISTER FOR SRHWORK AREA
R11      EQU   11                  EXTRA REGISTER NOT USED
R12      EQU   12                  BASE REGISTER FOR IKJEGSRH
R13      EQU   13                  POINTER TO SAVE AREA
R14      EQU   14                  USED FOR BAL ALSO WORK REG
R15      EQU   15                  USED FOR RETURN CODES ALSO WORK REG
         SPACE
N0       EQU   0                   CONSTANT 0
N1       EQU   1                   CONSTANT 1
N2       EQU   2                   CONSTANT 2
N3       EQU   3                   CONSTANT 3
N4       EQU   4                   CONSTANT 4
N5       EQU   5                   CONSTANT 5
N6       EQU   6                   CONSTANT 6
N7       EQU   7                   CONSTANT 7
N8       EQU   8                   CONSTANT 8
N9       EQU   9                   CONSTANT 9
N10      EQU   10                  CONSTANT 10
N12      EQU   12                  CONSTANT 12
N16      EQU   16                  CONSTANT 16
N20      EQU   20                  CONSTANT 20
N24      EQU   24                  CONSTANT 24
N32      EQU   32                  CONSTANT 32
N56      EQU   56                  CONSTANT 56
N60      EQU   60                  CONSTANT 60
N72      EQU   72                  CONSTANT 72
N120     EQU   120                 CONSTANT 120
****     HEXIDECIMAL EQUATES
HEXC0    EQU   X'C0'               HEX CONSTANT C0
HEX0A    EQU   X'0A'               HEX CONSTANT 0A
HEXFF    EQU   X'FF'               HEX CONSTANT FF
HEX0C    EQU   X'0C'               HEX CONSTANT 0C
HEX10    EQU   X'10'               HEX CONSTANT 10
****     BINARY MASK EQUATES
INSTMASK EQU   B'11000000'         INSTRUCTION LENGTH MASK
         EJECT
SRHSTART DS    0H                  STARTING POSITION OF SRH
         SAVE  (14,12),,*          SAVE THE CALLERS REGISTERS
         LR    R12,R15             SETUP REG 12 AS SRH'S BASE
         USING SRHSTART,R12        ESTABLISH ADDRESSIBILITY
         USING TCOMTAB,R9          ESTABLISH ADDRESSIBILITY TO TCOMTAB
         L     R15,REGSAVE6        LOAD ADDR OF NEW SAVEAREA (SRH'S)
         ST    R13,N4(R15)         PLACE ADDR USER'S SAVEAREA INTO SRH
         ST    R15,N8(R13)         PLACE ADDR OFF SAVEAREA INTO USERS
         LR    R13,R15             R13= ADDR OF NEW SAVE AREA
         L     R3,WORKAREA         POINT TO TSTCWORK            @YM0574
         USING TSTCWORK,R3         ESTABLISH ADDRESSABILITY TO TSTCWORK
         LA    R3,CWORKSRH         POINT TO CWORKSRH
         DROP  R3                  DISCONTINUE R3 AS TSTCWORK BASE
         USING SRHWORK,R3          ESTABLISH ADDRESSABILITY TO SRHWORK
         LR    R7,R1               R7= PTR TO 3 INPUT WORDS    @YM00572
         SPACE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        SETUP TO INTERCEPT AN ABEND
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*********  WE MUST STANDARDIZE RETURN CODES FROM THIS MODULE *****
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         XC    SRHWORK(ESTAELN),SRHWORK CLEAR ESTAE PARM LIST AREA
         L     R4,TSTSTAE          POINT TO IKJEGSTA           @ZA17788
         ESTAE (R4),PARAM=LIST,MF=(E,SRHWORK)                  @ZA17788
         LR    R1,R7               RESTORE REGISTER 1          @YM00572
         LTR   R15,R15             WAS 'ESTAE' ACCEPTED
         BZ    SRH0020             IF R15 = 0, START SEARCHING
         STC   R15,TSTESTRC        PRESERVE ESTAE RETURN CODE>
         LA    R15,N24             INDICATE ESTAE WAS NOT ACCEPTED
         B     SRH0600             RETURN WITHOUT TRYING TO REMOVE SCB
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*        START PROCESSING BY SAVIVG INPUT
*        REGISTER 1 = ORGINAL INPUT
*        REGISTER 2 = ADDR 1 (OR BEGINNING OF RANGE)
*        ENDRANGE   = ADDR 2 (OR END OF RANGE)
*        REGISTER 6 = FLAGS PASSED
*        REGISTER 7 = ORGINAL INPUT OF R1 (ADDR OF 3 WORDS)
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
SRH0020  DS    0H                  START WITH PDE USER FIELD
         LR    R7,R1               R7= POINTER TO 3 INPUT WORDS
         LA    R7,N0(R7)           ZERO HIGH ORDER BYTE, WILL BE A FLAG
         L     R6,N0(R1)           R6= FLAGS PASSED TO ROUTINE
         L     R2,N4(R1)           R2= FLAGS PASSED TO REMOVAL
         ST    R2,BGNRANGE         SAVE FIRST ADDRESS
         ST    R1,SAVE1            SAVE ORIGINAL INPUT PTR
         L     R1,N8(R1)           R1= SECOND ADDR IF ANY (RANGE)
         ST    R1,ENDRANGE         SAVE SECOND ADDR IF ANY
         LTR   R1,R1               DOES 2ND ADDRESS EXIST YES=RANGE
         BZ    SRH0100             NO THEREFORE SINGLE ADDR
****    WE HAVE THE SECOND ADDRESS OF THE RANGE
****     MAKE SURE ADDR 1 IS LESS THAN ADDR 2 OF RANGE
         USING BRKELEM,R8          SETUP ADDR'ABILITY TO BREAK ELEMENT
SRH0040  DS    0H                  VARIFY THE ADDRESS OF A RANGE
         CLC   ENDRANGE,BGNRANGE   IS THE 2ND ADDR LESS THAN FIRST
         BNL   SRH0045             NO THE RANGE IS OK
****     ERROR CONDITION INVALID RANGE
         B     SRH0460             RETURN ERROR CODE 8
****     INITIALIZE RANGE LOOP
SRH0045  DS    0H                  SETUP INITIAL CONDITIONS
         CH    R6,EIGHT            WAS THE FLAG AN EIGHT
         BNE   SRH0050             NO THEREFORE USE ADDR AS IS
         LA    R4,N5               R4= N5 BACKUP INDEX
         SR    R2,R4               BACKUP START OF THE RANGE
SRH0050  DS    0H                  SETUP INITIAL CONDITIONS
         L     R8,BREAKTAB         R8= ADDR OF ACTIVE BRK POINT QUEUE
         LA    R5,BREAKTAB         INITIALIZE LOOP WITH BACK POINTER
****     BEGIN LOOP LOOKING FOR BREAKPOINTS IN THE RANGE
SRH0060  DS    0H                  START FOR SEARCH LOOP
         LTR   R1,R8               DO WE HAVE A LINK TO WORK WITH
         BZ    SRH0440             NO STOP SEARCH
         L     R4,BRKADDR          R4=ADDR OF THIS BREAK POINT
         CR    R4,R2               IS BRKADDR GREATER THAN START OF RNG
         BL    SRH0080             NO CONTINUE WITH NEXT ELEMENT
         C     R4,ENDRANGE         IS BRKADDR LESS THAN END OF RANGE
         BH    SRH0440             OUTSIDE OF UPPER LIMIT DONE SEARCH
****     WE HAVE AN ADDRESS WITHIN THE RANGE. LINK AROUND IT AND REMOVE
****     FIRST CHECK TO MAKE SURE THE ADDR IS NOT ON EXTENDED START
         CH    R6,EIGHT            WAS THE FLAG 8 (BACKUP)
         BNE   SRH0070             NO THEREFORE REMOVE ELEMENT
         LA    R10,N5(R2)          R10= ORIGINAL START OF RANGE
         CR    R4,R10              IS INST WITHIN RANGE
         BNL   SRH0070             YES THEREFORE REMOVE INSTR
         TM    BRKINST,INSTMASK    WHAT IS THE LENGTH OF INST
         BO    SRH0070             LENGTH IS 6 THEREFORE REMOVE IT
         BM    SRH0064             LENGTH IS 4
         LA    R0,N1(R4)           R0= ADDR OF END OF INSTR      YM2246
         B     SRH0068             DOES THIS OVERLAP ORIG RANGE
SRH0064  DS    0H                  INCREMENT INSTR ADDR BY 4
         LA    R0,N3(R4)           R0= END OF INSTR ADDR         YM2246
SRH0068  DS    0H                  IS (R0) WITHIN THE ORIGINAL RANGE
         CR    R0,R10              END OF INSTR WITHIN RANGE
         BL    SRH0080             NO THEREFORE CONTINUE SEARCH
****     THE ELEMENT IS WITH IN A RANGE AND THEREFORE CAN BE REMOVED
SRH0070  DS    0H                  REMOVE THE LOCATED ELEMENT
         L     R8,BRKLINK          GET ADDR OF THE NEXT ELEMENT
         B     SRH0180             BRANCH TO THE REMOVAL ROUTINE
         SPACE
****     CONTINUE THE SEARCH WITH THE NEXT ELEMENT
****     SAVE THE ADDR (R5) OF THE CURRENT BRKLINK FIELD FOR RELINKING
****     UPDATE R8 TO POINT TO THE NEXT LINK
SRH0080  DS    0H                  SAVE CURRENT LINK ADDR AND CONTINUE
         LA    R5,BRKLINK          SAVE ADDR OF PREVIOUS BRKLINK
         L     R8,BRKLINK          PLACE ADDR OF NEXT ELEMENT INTO R8
         B     SRH0060             CONTINUE THE SEARCH
         SPACE
****     WE HAVE A SINGLE ADDR MUST SEARCH FOR A MATCH
****     SEARCH THRU Q'S FOR A MATCH OF THE SINGLE ADDRESS
SRH0100  DS    0H                  SETUP FOR SEARCH
         L     R8,BREAKTAB         R8= ADDR OF ACTIVE BRK POINT QUEUE
         LA    R5,BREAKTAB         SAVE AS A BACK POINTER
****     BEGIN LOOP LOOKING FOR ALL ENTRIES OF THE BREAK POINT
SRH0120  DS    0H                  START FOR SEARCH LOOP
         LTR   R1,R8               DO WE HAVE A LINK TO WORK WITH
         BZ    SRH0450             NO STOP SEARCH
         L     R4,BRKADDR          R4=ADDR OF THIS BREAK POINT
         C     R4,BGNRANGE         BRKADDR SAME AS ADDR TO BE DELETED
         BL    SRH0160             NO CONTINUE WITH NEXT ELEMENT
****     WAS SOMETHING PREVIOUSLY REMOVED IF SO RETURN CODE = 0
         BH    SRH0440             IT IS OUT OF RANGE CHECK DEFERED
         SPACE
****     WE HAVE THE CORRECT BREAKELEMENT. LINK AROUND IT AND REMOVE
SRH0140  DS    0H                  REMOVE THE BREAKPOINT
         L     R8,BRKLINK          GET ADDR OF THE NEXT ELEMENT
****     R5= ADDR OF THE PREVIOUS BRKLINK THIS MUST LINK TO THE NEXT
****     BREAK ELEMENT IN THE CHAIN
         B     SRH0180             BRANCH TO THE REMOVAL ROUTINE
         SPACE
****     CONTINUE THE SEARCH WITH THE NEXT ELEMENT
****     SAVE THE ADDR (R5) OF THE CURRENT BRKLINK FIELD FOR RELINKING
****     UPDATE R8 TO POINT TO THE NEXT LINK
SRH0160  DS    0H                  SAVE CURRENT LINK ADDR AND CONTINUE
         LA    R5,BRKLINK          SAVE ADDR OF PREVIOUS BRKLINK
         L     R8,BRKLINK          PLACE ADDR OF NEXT ELEMENT INTO R8
         B     SRH0120             CONTINUE THE SEARCH
SVCERR   EQU   *
         ST    R14,SAVE14          PRESERVE RETURN ADDR
         ST    R2,SAVE2            PRESERVE REGISTER 2
         DROP  R3                  DISCONTINUE R3 AS SRHWORK BASE
         LR    R3,R15              PLACE RETURN CODE IN REG 2
         XC    TSTIOPRM(L'TSTIOPRM),TSTIOPRM  CLEAR IO PARM LIST AREA
         IKJEGSIO SVCERR,SVC=(R2),RC=(R3),ID=SRH28,MF=(E,TSTOIPRM)
         LA    R2,N12              PLACE DEC 12 IN REG 2
         CR    R15,R2              IS RC FROM IO > DEC 12
         BH    SRH0500         IF RC FROM IO > DEC 12 RET WITH IO RC
         L     R3,WORKAREA         POINT TO TSTCWORK
         USING TSTCWORK,R3         ESTABLISH ADDRESSABILITY TO TSTCWORK
         LA    R3,CWORKSRH         POINT TO CWORKSRH           @ZA27728
         DROP  R3                  DISCONTINUE R3 AS TSTCWORK BASE
         USING SRHWORK,R3          ESTABLISH ADDRESSABILITY TO SRHWORK
         L     R2,SAVE2            RESTORE REGISTER 2
         L     R14,SAVE14          RESTORE R14
         BR    R14                 GO RETURN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*   THIS SECTION OF CODE REMOVES THE ACTIVE BREAKPOINT WHOSE ADDR IS
*   IN REGISTER 1. A CHECK IS MADE TO SEE IF THE BRK PT IS OF A RANGE
*   IF SO THE ADDR STRING IS CHECKED TO SEE IF IT IS SHARED, IF IT IS
*   THEN IT IS NOT FREED.
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
SRH0180  DS    0H                  CHECK IF SEARCH ONLY WAS INDICATED
         CH    R6,FOUR             WHERE WE TO REMOVE THE BREAK POINT
         BNE   SRH0200             YES THEREFORE REMOVE IT
         ST    R1,N4(R7)           STORE THE ADDRESS OF THE BREAKELEMNT
         B     SRH0480             RETURN WITH RETURN CODE OF 0
         SPACE
****     R8 CURRENTLY POINTS TO NEXT ELEMENT (OR ZERO)
****     R5 CURRENTLY CONTAINS THE ADDRESS OF THE PREVIOUS BRKLINKAGE
****     R1 POINTS TO THE ELEMENT TO BE DELETED
SRH0200  DS    0H                  REMOVAL OF THE BREAK POINT INDICATED
         ST    R8,N0(R5)           LINK AROUND ELEMENT TO BE DELETED
         LR    R8,R1               R8= ADDR OF BEARKPOINT TO BE REMOVED
         O     R7,HIGHBIT          TURN ON HIGH BIT INDICATING REMOVAL
         L     R4,BRKNAME          R4=ADDR OF ADDR STRING TO REMOVE
         L     R5,BRKCHAIN         R5= ADDR OF SUBCOMMAND CHAIN
         LR    R10,R8              R4= ADDR OF BREAKPOINT TO BE REMOVED
         TM    BRKFLGS,BRKRANGE    IS THE BREAK PT OF A RANGE
         BNO   SRH0240             NO THEREFORE FREE ADDR STRING
****     MUST CHECK IF ADDRESS STRING IS SHARED
         L     R8,BREAKTAB         R8= ADDR OF FIRST BREAK ELEMENT
SRH0220  DS    0H                  LOOK FOR MATCH OF ADDR STRING ADDRES
         LTR   R8,R8               DO WE HAVE A BREAK ELEMENT
         BZ    SRH0240             NO MORE THEREFORE FREE ADDR STRING
         L     R1,BRKNAME          R1= ADDR OF ADDR STRING TO COMPARE
         CR    R1,R4               ARE THE 2 ADDR STRINGS EQUAL
         BE    SRH0260             THEY ARE EQUAL DO NOT FREE
         L     R8,BRKLINK          GET ADDR OF THE NEXT BRK ELEMENT
         B     SRH0220             CONTINUE LOOKING FOR MATCH
****     FREE THE ADDRESS STRING (BREAK NAME) IN THE ACTIVE BREAK POINT
SRH0240  DS    0H                  REMOVE ADDR STRING
         LA    R1,N0(R4)           ZERO OUT ANY HIGH ORDER DATA
         LH    R4,N0(R1)           R5= LENGTH OF THE BREAKNAME
         LA    R0,N9(R4)           INCREMENT LENGTH BY 9 FOR ROUNDING
         N     R0,MASKF8           ZERO LOWER 3 BITS
         FREEMAIN RC,LV=(0),A=(1),SP=1  FREE THE ADDR STRING
         LTR   R15,R15             IS RETURN CODE = ZERO
         BZ    SRH0260             IF ZERO, BRANCH TO SRH0260
         LA    R2,N120             GET PRESCRIBED FREEMAIN SVC NUMBER
         BAL   R14,SVCERR          GO WRITE ERROR MESSAGE
         SPACE
****     FREE THE SUBCOMMAND CHAIN IF ONE EXIST'S AND IT IS NOT SHARED
SRH0260  DS    0H                  SEE IF A SUBCHAIN EXISTS
         LA    R5,N0(R5)           ZERO HIGH ORDER BYTE
         LTR   R5,R5               CHECK IF THE SUBCHAIN EXISTS
         BZ    SRH0340             NO THEREFORE RESTORE THE INST
         L     R8,BREAKTAB         R8= ADDR OF THE ACTIVE BRK POINTS
****     THE FOLLOWING LOOP CHECK IF THE SUBCOMMAND CHAIN IS SHARED
SRH0280  DS    0H                  IS SUBCOMMAND CHAIN SHARED
         LA    R8,N0(R8)           ZERO THE HIGH ORDER BYTE
         LTR   R8,R8               IS THERE A BREAK ELEMENT
         BZ    SRH0300             NO THEREFORE REMOVE THE SUBCHAIN
         L     R1,BRKCHAIN         R1= ADDR OF SUBCHAIN TO COMPARE
         CR    R1,R5               IF EQUAL SUBCHAIN SHARED
         BE    SRH0340             EQUAL THEN RESTORE INST AND FREE
         L     R8,BRKLINK          R8= ADDR OF THE NEXT BREAK ELEMENT
         B     SRH0280             CONTINUE SEARCH FOR MATCH
         SPACE
****     IS THE CURRENT COMMAND IN THE SUBCOMMAND CHAIN
****     IF SO FREE THE CHAIN ANYWAY AND TURN ON FLUSH BIT
SRH0300  DS    0H                  CHECK IF COMMAND IS IN THE CHAIN
         L     R1,SUBCHAIN         R1= ADDR OF THE SUBCHAIN IF ANY
         LA    R1,N0(R1)           ZERO OUT HIGH ORDER BYTE
         LTR   R1,R1               DOES A SUBCHAIN CURRENTLY EXIST
         BZ    SRH0320             NO THEREFORE FREE OFF BRK CHAIN
****     A SUBCHAIN EXISTS SEE IF 'OFF' IS PART OF THE SUBCHAIN
         CLR   R1,R5               IS SUBCHAIN ADDR LESS THAN BRKCHAIN
         BL    SRH0320             YES THEREFORE FREE BRKCHAIN
         LR    R0,R5               R0= ADDR OF START OF CHAIN
         AH    R0,N0(R5)           R0= END OF BRKCHAIN ADDR
         CLR   R1,R0               IS CURRENT COMMAND WITHIN SUBCHAIN
         BNL   SRH0320             NO THEREFORE FREE THE CHAIN
         XC    SUBCHAIN,SUBCHAIN   ZERO THE SUBCOMMOAND CHAIN PTR
         OI    TSTFLGS4,TSTFLUSH   TURN ON THE FLUSH BIT
         SPACE
****     FREE THE BREAK CHAIN FOUND IN BREAK ELEMENT R5= ADDR BRKCHAIN
SRH0320  DS    0H                  FREE THE BRKCHAIN
         LA    R1,N0(R5)           ZERO OUT ANY HIGH ORDER DATA
         LH    R5,N0(R1)           R5= LENGTH OF THE BREAKNAME
         LA    R0,N10(R5)          INCREMENT LENGTH BY 10 FOR ROUNDING
         N     R0,MASKF8           ZERO LOWER 3 BITS
         FREEMAIN RC,LV=(0),A=(1),SP=1   FREE THE ADDR STRING
         LTR   R15,R15             IS RETURN CODE = ZERO
         BZ    SRH0340             IF ZERO, BRANCH TO SRH0340
         LA    R2,N120             GET PRESCRIBED FREEMAIN SVC NUMBER
         BAL   R14,SVCERR          GO WRITE ERROR MESSAGE
         SPACE
****     NOW RESTORE THE INSTRUCTION AND FREE THE BREAK ELEMENT
SRH0340  DS    0H                  RESTORE THE INST IF ANY
         LR    R8,R10              RESTORE ADDR'ABILITY TO BREAKELEMENT
****     IF ENDSW IS ON AND RUNSW IS NOT - DO NOT RESTORE INSTR
         TM    TSTFLGS1,ENDSW+RUNSW ARE THEY BOTH ON
         BM    SRH0420             OMIT RESTORING THE INSTRUCTION
         L     R5,BRKADDR          R5= ADDROF WHERE THE INST BELONGS
         TM    TSTFLGS1,RUNSW      IF RUN DON'T VALIDITY CHECK @YM06114
         BO    SRH0400             CONTINUE PROCESSING         @YM06114
****     VALIDITY CHECK THE ADDRESS FOR WRITTABLE
         L     R10,PPTCB           R10= ADDR OF PP TCB
         IKJEGS9G ADDRCHK,TCBADDR=(R10),VALUE=(R5),MF=(E,(R7))
         LTR   R15,R15             A NONZERO RETURN CODE
         BZ    SRH0400             GO RESTORE THE INSTRUCTION
         CH    R15,EIGHT           COMPARE RC TO  '8'
         BNH   SRH0420             DO NOT RESTORE THE INSTRUCTION
         B     SRH0500             RETURN WITH RC FROM SVC97
SRH0400  DS    0H
         OI    TSTFLGS1,TSTFIRST   TURN ON THE ABEND SW        @YM06114
         STM   R14,R12,N12(R13)    SAVE REGS IN CASE OF AN ABEND
         MVC   N0(N2,R5),BRKINST   RESTOR THE BREAK POINT INSTR
****     FREE THE ACTIVE BREAK ELEMENT
SRH0420  DS    0H                  ISSUE A FREEMAIN ON THE BRK ELEMENT
         NI    TSTFLGS1,HEXFF-TSTFIRST TURN OFF THE ABEND SW
         LA    R1,N0(R8)           R1= ADDR OF BRK ELEM HIGH BYTE IS 0
         FREEMAIN RC,LV=40,A=(1),SP=1  ISSUE THE FREEMAIN
         LTR   R15,R15             IS RETURN CODE = ZERO
         BZ    SRH0430             IF ZERO, BRANCH TO SRH0260
         LA    R2,N10              GET REGULAR FREEMAIN SVC NUMBER
         BAL   R14,SVCERR          GO WRITE ERROR MESSAGE
         B     SRH0480             RETURN WITH A ZERO
****     WE ARE DONE WITH THE ELEMENT IN QUESTION BUT IF WE ARE
****     WORKING ON A RANGE WE MUST CONTINUE
SRH0430  DS    0H                  DETERMINE IF THERE IS A RANGE
         CLC   ENDRANGE,ZEROWORD   IS THERE A RANGE IN PROCESS
         BE    SRH0480             NO RETURN WITH A ZERO
         B     SRH0050             CONTINUE SCANNING THE RANGE
SRH0440  DS    0H                  RETURN WITH A CODE OF 4
         LTR   R7,R7               HIGH BIT ON INDICATING BRK PT REMOVE
         BM    SRH0480             BRK PT WAS REMOVED RET CODE = 0
SRH0450  DS    0H                  RETURN WITH RETURN CODE OF FOUR
         LA    R15,N4              R15= RETURN CODE 04
         B     SRH0500             RETURN TO CALLER
SRH0460  DS    0H                  RETURN CODE OF 08
         LA    R15,N8              R15= RETURN CODE 08
         B     SRH0500             RETURN TO CALLER
SRH0480  DS    0H                  RETURN WITH A NORMAL ZERO RET CODE
         XR    R15,R15             ZERO REGISTER 15 AS RETURN CODE
SRH0500  DS    0H                  RETURN WITH AN ERROR NONZERO RET COD
         LR    R2,R15              PRESERVE RETURN CODE
         ESTAE 0                   REMOVE SCB
         LR    R15,R2              PLACE RETURN CODE
SRH0600  DS    0H                  RETURN WITH RETURN CODE IN REG 15
         L     R2,WORKAREA         POINT TO TSTCWORK
         USING TSTCWORK,R2         ESTABLISH ADDRESSABILITY TO TSTCWORK
         L     R2,CWORKSRH         POINT TO CWORKSRH
         DROP  R2                  DISCONTINUE R2 AS TSTCWORK BASE
         USING SRHWORK,R2         ESTABLISH ADDRESSABILITY TO CWORKSRH
         MVC   ABENTAB1(N4),MISC    RESTORE OLD ABEND INFORMATION
         L     R13,N4(R13)         R13= ADDR OF CALLERS SAVE AREA
         RETURN (14,12),,RC=(15)   THIS WILL RETUNR TO THE CALLER
         DROP  R8                  RELEASE BRK'S ADDR'IBILITY
         EJECT
**********************************************************************
*        THE RETRY ROUTINE AND ABEND TABLE
**********************************************************************
         SPACE
STAELIST STAE  MF=L                LIST FORM OF THE STAE
STAELN   EQU   *-STAELIST          END OF STAE EXPANSION
ADDRETRY DC    A(RETRYRTN)         ADDRESS OF THE RETRY ROUTINE
ABENDTAB DS    0H                  THE ABEND TABLE FOR STAE
         DC    X'00'               ZERO POINTER
         DC    AL3(SRH0420)        POINTER WHERE INSTRUCTION IS REPLACE
         DC    X'FF'               END OF TABLE INDICATOR
****     THE BEGINING OF THE RETRY ROUTINE
RETRYRTN DS    0H                  THE RETRY ROUTINE
         L     R5,CVTPTR           R5= ADDR OF THE CVT
         USING CVT,R5              ESTABLISH ADDR'ABILITY TO THE CVT
         L     R1,CVTTCBP          R1= ADDR OF NEW CURRENT TCB'S
         L     R5,N4(,R1)          R5= ADDR OF CURRENT TCB (TEST TCB)
         DROP  R5                  RELEASE ADDR'ABILITY TO THE CVT
         USING TCB,R5              ESTABLISH ADDR'ABILITY TO THE TCB
         L     R9,TCBTRN           R9= ADDR OF TCOMTAB (RESTORE)
         DROP  R5                  RELEASE ADDR'ABILITY TO TCB
         L     R13,REGSAVE6        R13= ADDR OF CURRENT SAVEAREA
         LM    R14,R12,N12(R13)    RESTORE ALL REGISTERS FOR SRH
         SPACE
*****************************************************************
*
*  MUST TURN OFF RETRY INDICATOR BEFORE BRANCHING OUT,
*  FOR OTHERWISE IF ANOTHER ABEND OCCURS PERCOLATION
*  WILL TAKE PLACE
*
*****************************************************************
         SPACE
         NI    TSTFLGS4,HEXFF-TSTRERTN  TURN OFF RETRY INDICATOR
         TM    TSTFLGS1,TSTFIRST   ABEND 0C4 WHILE RESTORING INSTRUCTON
         BO    SRH0420             CONTINUE BY FREEING THE BREAKELEMENT
         NI    TSTFLGS1,HEXFF-TSTFIRST TURN OFF THE ABEND SWITCH
         LA    R15,N20             R15= DEC 20 (RETURN CODE)
         B     SRH0500             RETURN TO CALLER (MAINLINE)
         EJECT
**********************************************************************
*        CONSTANTS USED BY THE SRH ROUTINE
**********************************************************************
         DS    0F                  ALIGNMENT
ZEROWORD DC    X'00000000'         ONE WORD OF 0'S
MASKF8   DC    X'00FFFFF8'         MASK TO ZERO TOP BYTE LOWER 3 BITS
SUBPOOL1 DC    X'01000000'         SUBPOOL ONE
HIGHBIT  DC    X'80000000'         TURNS ON THE HIGH ORDER BIT
FOUR     DC    H'04'               CONSTANT FOUR
EIGHT    DC    H'08'               CONSTANT EIGHT
SUPERZAP DC    50CL1'Z'            SUPERZAP PATCHING AREA
ESTAEL   ESTAE MF=L
ESTAELN  EQU   *-ESTAEL
LIST     IKJEGSPL RTRY=RETRYRTN,ABNTB=ABENDTAB,MODNM=IKJEGSRH,TNM=SRH
         EJECT
************************************************************
**                                                        **
**                  TCOMTAB DSECT                         **
**                                                        **
************************************************************
TCOMTAB TCOMTAB
         EJECT
************************************************************
**                                                        **
**                     BREAKPOINT QUEUE DSECT             **
**                                                        **
************************************************************
         BRKELEM
         EJECT
************************************************************
**                                                        **
**                     TCB DSECT                          **
**                                                        **
************************************************************
         IKJTCB
         EJECT
************************************************************
**                                                        **
**                     CVT DSECT                          **
**                                                        **
************************************************************
CVT      DSECT
         CVT
         TSTCWORK                  TEST WORKAREA DSECT
         SPACE
***********************************************************************
*                                                                     *
*     THIS DSECT DESCRIBES THE SRH WORK-AREA                          *
*                                                                     *
***********************************************************************
SRHWORK  DSECT
SAVE1    DS    F                   SAVE REG1
SAVE2    DS    F                   SAVE REG2
SAVE14   DS    F                   SAVE REG14
BGNRANGE DS    F                   SAVE START OF RANGE ADDR
ENDRANGE DS    F                   SAVE END OF RANGE ADDR
MISC     DS    12X                 MISCELLANEOUS WRK-AREA
         EJECT
         END
