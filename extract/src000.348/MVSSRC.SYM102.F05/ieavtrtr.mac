         TITLE 'IEAVTRTR,RTM RECOVERY ROUTINES                         *
                        '
IEAVTRTR CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'IEAVTRTR  76.159'                                 0001
RCOVGETM DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00099-RCOVGETM)
         ENTRY RCOVGETM
RCOVRCRD DS    0H                                                  0001
         ENTRY RCOVRCRD
RCOVRGTF DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00178-RCOVRGTF)
         ENTRY RCOVRGTF
FREEDCEL DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00465-FREEDCEL)
         ENTRY FREEDCEL
RTMRSFRR DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00491-RTMRSFRR)
         ENTRY RTMRSFRR
RECVRRTM DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00595-RECVRRTM)
         ENTRY RECVRRTM
RTMSMFRR DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00755-RTMSMFRR)
         ENTRY RTMSMFRR
RTHFRR   DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00769-RTHFRR)
         ENTRY RTHFRR
         DROP  @15
@PROLOG  BALR  @09,0                                               0001
@PSTART  LA    @10,4095(,@09)                                      0001
         USING @PSTART,@09                                         0001
         USING @PSTART+4095,@10                                    0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
*/* ******************************************************************/
*/* THIS SEGMENT IS A FRR WHICH IS DESIGNED TO RECOVER IEAVTRTS FROM */
*/* A POSSIBLE GETMAIN FAILURE WHEN ATTEMPTING TO ACQUIRE A SDWA FOR */
*/* AN ERROR IN UNLOCKED SRB MODE.  THIS FRR PERFORMS THE FOLLOWING: */
*/* 1.REQUESTS RETRY AT THE POINT IN IEAVTRTS WHERE A LOCAL SDWA IS  */
*/*   USED FOR THE UNLOCKED SRB ERROR PROVIDED THAT THE ERROR TYPE   */
*/*   AS INDICATED IN THE SDWA IS NOT RESTART OR DATERR.  TWO RETRY  */
*/*   CONDITIONS ARE POSSIBLE:                                       */
*/*   A.IF THE ERROR TYPE IS THE SAME AS THE ERROR TYPE OF THE       */
*/*     UNLOCKED SRB AND IEAVTRTS HAS AS YET NOT INITIALIZED AN SDWA */
*/*     (STILL IN SEGMENT GOTOSRB) THEN THE ORIGINAL ERROR DATA HAS  */
*/*     BEEN OVERLAYED BY THE GETMAIN ERROR.  FOR THIS REASON RETRY  */
*/*     IS SETUP SO THAT THE AQLRTCA SEGMENT OF IEAVTRTS WILL RECEIVE*/
*/*     CONTROL WHERE THE LOCAL SDWA IS UNCONDITIONALLY OBTAINED AND */
*/*     THE SDWARPIV BIT IN THE SDWA WILL BE INITIALIZED INDICATING  */
*/*     THE REGS AND PSW ARE INVALID FOR THE ORIGINAL ERROR          */
*/*     FOR THIS RETRY PATH THIS FRR FREES THE SALLOC LOCK.          */
*/*   B.IF THE ERROR TYPE IS NOT THE SAME AS THE ERROR FOR THE       */
*/*     UNLOCKED SRB THEN RETRY IS SETUP TO IEAVTRTS WHERE THE LOCAL */
*/*     SDWA IS CONDITIONALLY OBTAINED-I.E. THE ERROR DATA FOR THE   */
*/*     UNLOCKED SRB IS STILL VALID.  RETRY IS IN SEGMENT AQLRTCA OF */
*/*     IEAVTRTS WHERE THE SALLOC LOCK IS FREED.                     */
*/* 2.REQUESTS PERCOLATION IF THE ERROR TYPE IS DATERR OR RESTART    */
*/* NOTES-----                                                       */
*/*  - REGS(R0,R1,R14) ARE RESTRICTED THROUGHOUT THE FRR             */
*/*  - THIS FRR SHOULD RECEIVE CONTROL VIA PERCOLATION FROM          */
*/*    GETMAINS FRR                                                  */
*/*  - THE RSVT IN THE PSA IS RESET TO THE ORIGINAL CONDITIONS AT    */
*/*    THE TIME OF THE ORIGINAL ENTRY TO IEAVTRTS FOR THE UNLOCKED   */
*/*    SRB MODE ERROR INDEPENDENT OF RETRYING OR PERCOLATING         */
*/*  - RECORDING IS ALWAYS REQUESTED                                 */
*/*  - IF AN ERROR SHOULD OCCUR IN THIS FRR--RTM ABORT PROCESSING    */
*/*    WILL GET CONTROL                                              */
*/* ******************************************************************/
*                                                                  0099
*RCOVGETM:                                                         0099
*   ENTRY;                                                         0099
@EP00099 DS    0H                                                  0100
*   RFY                                                            0100
*    (R14,                          /* REGISTERS THAT MUST BE        */
*     R1,                           /* PRESERVED THROUGHOUT THIS     */
*     R0) RSTD;                     /* FRR                           */
*   RFY                                                            0101
*     SDWA BASED(R1);               /* ADDRESSABILITY TO THE SDWA    */
*   RFY                                                            0102
*     FRRPARMS BASED(R7);           /* ADDRESSABILITY TO FRR PARM  0102
*                                      AREA                  @YM07602*/
*   RFY                                                            0103
*     R7 RSTD;                      /* GET CONTROL OF REG    @YM07602*/
*   R7=SDWAPARM;                    /* LET REGISTER CONTAIN ADDRESS
*                                      OF FRR PARM AREA      @YM07602*/
         L     R7,SDWAPARM(,R1)                                    0104
*   RFY                                                            0105
*     FRRWA BASED(R0);              /* ADDRESSABILITY TO FRR WA      */
*   FRRSRMRT=R14;                   /* PRESERVE RETURN ADDRESS TO RTS*/
         LR    @15,R0                                              0106
         ST    R14,FRRSRMRT(,@15)                                  0106
*   RFY                                                            0107
*     FRRS BASED(PSACSTK);                                         0107
*   RT1TLPN=RT1SRMHI;               /* SET UP FOR RTM ABORT          */
         L     @15,PSACSTK                                         0108
         LA    @11,16                                              0108
         ALR   @11,@15                                             0108
         MVI   RT1TLPN(@11),X'59'                                  0108
*   RT1TLPID=NONE;                  /* PROCESSING IF THIS FRR FAILS  */
         MVI   RT1TLPID(@11),X'00'                                 0109
*   IF PSACSTK=PSAPSTK×PSACSTK=PSARSTK THEN/* IF THE CURRENT STACK IS
*                                      THE PCFLIH STACK OR RESTART 0110
*                                      STACK RESET THE RSVT TO ITS 0110
*                                      ORIGINAL SETTING PRIOR TO THE
*                                      GETMAIN FAILURE               */
         C     @15,PSAPSTK                                         0110
         BE    @RT00110                                            0110
         C     @15,PSARSTK                                         0110
         BNE   @RF00110                                            0110
@RT00110 DS    0H                                                  0111
*     DO;                                                          0111
*       RFY                                                        0112
*         R5 RSTD;                                                 0112
*       R5=FRRPISTK;                /* SETUP INPUT TO RESET RSVT     */
         L     R5,FRRPISTK(,R7)                                    0113
*       CALL STORESTK;              /* GO AND RESET THE RSVT         */
         BAL   @14,STORESTK                                        0114
*       RFY                                                        0115
*         R5 UNRSTD;                                               0115
*     END;                                                         0116
*   ELSE                                                           0117
*     ;                                                            0117
@RF00110 DS    0H                                                  0118
*   IF SDWATEXC=ON                  /* IF THE ERROR AFTER SRM        */
*       ×SDWARKEY=ON THEN           /* INVOKED GETMAIN IS DATERR OR
*                                      RESTART ERROR THEN THIS FRR 0118
*                                      WILL PERCOLATE                */
         TM    SDWATEXC(R1),B'00100010'                            0118
         BZ    @RF00118                                            0118
*     DO;                           /* SETUP TO PERCOLATE            */
*       SDWAMODN=RTRMODN;           /* SET FRR MODULE NAME           */
         MVC   SDWAMODN(8,R1),RTRMODN                              0120
*       SDWACSCT=RTRCSCT;           /* SET FRR CSECT NAME            */
         MVC   SDWACSCT(8,R1),RTRCSCT                              0121
*       SDWAREXN=GETMREXN;          /* SET FRR NAME-ID               */
         MVC   SDWAREXN(8,R1),GETMREXN                             0122
*       SDWARCRD=ON;                /* INDICATE TO RECORD THE SDWA   */
         OI    SDWARCRD(R1),B'10000000'                            0123
*       SDWASALL=ON;                /* INDICATE TO FREE THE SALLOC 0124
*                                      LOCK                          */
         OI    SDWASALL(R1),B'00000100'                            0124
*       SDWAVRA=GETMPMSG;           /* PUT FRR MSG IN SDWA           */
         MVI   SDWAVRA+99(R1),C' '                                 0125
         MVC   SDWAVRA+100(8,R1),SDWAVRA+99(R1)                    0125
         MVC   SDWAVRA(99,R1),GETMPMSG                             0125
*       SDWAURAL=LENGTH(GETMPMSG);                                 0126
         MVI   SDWAURAL(R1),X'63'                                  0126
*       SDWAEBC=ON;                 /* DUMP THE VARIABLE RECORDING IN
*                                      EBCDIC                        */
         OI    SDWAEBC(R1),B'01000000'                             0127
*       SDWARCDE=SDWACWT;           /* INDICATE TO PERCOLATE         */
         MVI   SDWARCDE(R1),X'00'                                  0128
*       RFY                                                        0129
*         FRRS BASED(FRRPISTK);                                    0129
*       RT1TLPN=NONE;               /* INSURE THAT THE SUPER FRR     */
         L     @15,FRRPISTK(,R7)                                   0130
         MVI   RT1TLPN+16(@15),X'00'                               0130
*       FRRSCURR=FRRSEMP;           /* WILL PROPOGATE THE ERROR TO 0131
*                                      THE PROPER STACK              */
         L     @11,FRRSEMP(,@15)                                   0131
         ST    @11,FRRSCURR(,@15)                                  0131
*       RFY                                                        0132
*         FRRS BASED(PSACSTK);                                     0132
*     END;                                                         0133
*   ELSE                            /* IF THE ERROR IS NOT A DATERR
*                                      OR RESTART ERROR THEN A RETRY
*                                      BACK TO IEAVTRTS MAINLINE WILL
*                                      BE SETUP                      */
*     DO;                           /* SETUP SDWA FOR RETRY          */
         B     @RC00118                                            0134
@RF00118 DS    0H                                                  0135
*       SDWARCDE=SDWARETY;          /* INDICATE RETRY IN THE SDWA    */
         MVI   SDWARCDE(R1),X'04'                                  0135
*       SDWARTYA=FRRPRTYA;          /* ESTABLISH THE RETRY ADDRESS   */
         L     @15,FRRPRTYA(,R7)                                   0136
         ST    @15,SDWARTYA(,R1)                                   0136
*       SDWASR08=FRRPISTK;          /* ESTABLISH THE INTERRUPTED   0137
*                                      STACK SRM WAS PROCESSING PRIOR
*                                      TO THE ERROR                  */
         L     @15,FRRPISTK(,R7)                                   0137
         ST    @15,SDWASR08(,R1)                                   0137
*       SDWASR02=PSACSTK;           /* REESTABLISH SRM RECOVERY STK  */
         L     @15,PSACSTK                                         0138
         ST    @15,SDWASR02(,R1)                                   0138
*       SDWASR10=FRRPREG2;          /* REESTABLISH SRM BASE REG      */
         L     @15,FRRPREG2(,R7)                                   0139
         ST    @15,SDWASR10(,R1)                                   0139
*       SDWASR09=SDWASR10+FOURKAY;  /* AND 2ND BASE REG              */
         AL    @15,@CF02834                                        0140
         ST    @15,SDWASR09(,R1)                                   0140
*       SDWASR11=SDWAPARM;          /* SETUP REG11 FOR RETRY         */
         L     @15,SDWAPARM(,R1)                                   0141
         ST    @15,SDWASR11(,R1)                                   0141
*       SDWASR15=TWO;               /* INSURE THAT REG15, THE RETURN
*                                      CODE FROM GETMAIN, INDICATES
*                                      THAT GETMAIN FOR SQA FAILED   */
         MVC   SDWASR15(4,R1),@CF00110                             0142
*       IF FRRPRCUR=ON THEN         /* IF RTS WAS IN RECURSION MODE
*                                      WHEN THE ERROR OCCURRED THEN
*                                      REESTABLISH THE RECURSION   0143
*                                      STATUS                        */
         TM    FRRPRCUR(R7),B'00100000'                            0143
         BNO   @RF00143                                            0143
*         SDWASR07=ACTIVE;          /* RTS WAS IN RECURSION MODE     */
         MVC   SDWASR07(4,R1),@CF00079                             0144
*       ELSE                        /* IF RTS WAS NOT IN RECURSION 0145
*                                      MODE WHEN THE ERROR OCCURRED
*                                      THEN NO RECURSION IS        0145
*                                      ESTABLISHED                   */
*         SDWASR07=NULL;            /* NO RECURSION                  */
         B     @RC00143                                            0145
@RF00143 SLR   @15,@15                                             0145
         ST    @15,SDWASR07(,R1)                                   0145
*       IF FRRPFLPN<SRMRCRD THEN    /* IF RTS INVOKED GETMAIN ON   0146
*                                      INITIAL ENTRY FOR A SRB MODE
*                                      FAILURE THEN REG5 AND REG6  0146
*                                      MUST BE REESTABLISHED TO    0146
*                                      CONTAIN ORIGINAL ERROR DATA   */
@RC00143 CLI   FRRPFLPN(R7),71                                     0146
         BNL   @RF00146                                            0146
*         DO;                                                      0147
*           SDWASR05=FRRPREG3;      /* REG5 TO CONTAIN DUMPOPTS OR 0148
*                                      MACH CHK DATA                 */
         L     @15,FRRPREG3(,R7)                                   0148
         ST    @15,SDWASR05(,R1)                                   0148
*           RFY                                                    0149
*             FRRS BASED(FRRPISTK);                                0149
*           SDWASR06=RT1WEED;       /* REG6 TO CONTAIN EEDCHAIN    0150
*                                      POINTER                       */
         L     @15,FRRPISTK(,R7)                                   0150
         L     @11,RT1WEED(,@15)                                   0150
         ST    @11,SDWASR06(,R1)                                   0150
*           RFY                                                    0151
*             FRRS BASED(PSACSTK);                                 0151
*           RFY                                                    0152
*             R4 RSTD;                                             0152
*           RFY                                                    0153
*             FRRS BASED(PSACSTK);                                 0153
*           R4=RT1TENPT;            /* PICK CURRENT ERROR TYPE       */
         LA    @11,16                                              0154
         L     @08,PSACSTK                                         0154
         ALR   @08,@11                                             0154
         SLR   R4,R4                                               0154
         IC    R4,RT1TENPT(,@08)                                   0154
*           RFY                                                    0155
*             FRRS BASED(FRRPISTK);                                0155
*           IF R4=RT1TENPT          /* IF CURRENT ERROR TYPE AND     */
*             THEN                  /* ORIGINAL ERROR TYPE ARE THE 0156
*                                      SAME THEN REGS TO BE INIT IN
*                                      DEFAULT LOCAL SDWA WILL     0156
*                                      REFLECT THE GETMAIN FAILURE 0156
*                                      AND NOT THE FRR FAILURE       */
         ALR   @15,@11                                             0156
         SLR   @11,@11                                             0156
         IC    @11,RT1TENPT(,@15)                                  0156
         CR    R4,@11                                              0156
         BNE   @RF00156                                            0156
*             DO;                                                  0157
*               SDWASR04=SDWAPARM;                                 0158
         L     @15,SDWAPARM(,R1)                                   0158
         ST    @15,SDWASR04(,R1)                                   0158
*               GENERATE CODE;                                     0159
*                               /*RETRY PT IS WITH SALLOC LK NOT HELD*/
         SETLOCK RELEASE,TYPE=SALLOC,DISABLED,                         C
               RELATED=('RELEASE SALLOC BEFORE RETRY')
         L     R3,RUNCLLK GET ADDR OF RETRY RTN TO UNCOND GET LCL SDWA
         ST    R3,SDWARTYA(,R1)  STORE RETRY ADDRESS
*             END;                                                 0160
*           RFY                                                    0161
*             FRRS BASED(PSACSTK);                                 0161
@RF00156 DS    0H                                                  0162
*         END;                                                     0162
*       ELSE                        /* IF SRM WAS IN THE PROCESS OF
*                                      CHANGING MODES PRIOR TO     0163
*                                      PERCOLATION WHEN GETMAIN WAS
*                                      INVOKED THEN REG5 AND REG6 ARE
*                                      REESTABLISHED WITH THE SDWA 0163
*                                      ADDR BEING PROCESSED AND THE
*                                      FRR AVAILABILITY RESPECTIVELY */
*         DO;                                                      0163
         B     @RC00146                                            0163
@RF00146 DS    0H                                                  0164
*           RFY                                                    0164
*             FRRS BASED(FRRPISTK);                                0164
*           SDWASR05=RT1WRTCA;      /* RESTORE THE SDWA ADDRESS      */
         L     @15,FRRPISTK(,R7)                                   0165
         L     @15,RT1WRTCA(,@15)                                  0165
         ST    @15,SDWASR05(,R1)                                   0165
*           RFY                                                    0166
*             FRRS BASED(PSACSTK);                                 0166
*           SDWASR06=FRRPREG3;      /* RESTORE FRR AVAILABILITY      */
         L     @15,FRRPREG3(,R7)                                   0167
         ST    @15,SDWASR06(,R1)                                   0167
*         END;                                                     0168
*       SDWAUPRG=ON;                /* INDICATE UPDATED REGS FOR   0169
*                                      RETRY IN THE SDWA             */
@RC00146 OI    SDWAUPRG(R1),B'00001000'                            0169
*       SDWAVRA=GETMRMSG;           /* SET RETRY MESSAGE IN VAR    0170
*                                      RECORDING AREA OF SDWA        */
         MVI   SDWAVRA+94(R1),C' '                                 0170
         MVC   SDWAVRA+95(13,R1),SDWAVRA+94(R1)                    0170
         MVC   SDWAVRA(94,R1),GETMRMSG                             0170
*       SDWAURAL=LENGTH(GETMRMSG);  /* SET LENGTH OF RETRY MSG       */
         MVI   SDWAURAL(R1),X'5E'                                  0171
*       SDWAEBC=ON;                 /* DUMP VARIABLE RECORDING AREA
*                                      IN EBCDIC                     */
         OI    SDWAEBC(R1),B'01000000'                             0172
*       SDWARCRD=ON;                /* INDICATE RECORDING            */
         OI    SDWARCRD(R1),B'10000000'                            0173
*     END;                                                         0174
*   R14=FRRSRMRT;                   /* RESTORE RETURN ADDR TO RTS    */
@RC00118 LR    @11,R0                                              0175
         L     R14,FRRSRMRT(,@11)                                  0175
*   RFY                                                            0176
*     R7 UNRSTD;                    /* RELEASE REGISTER      @YM07602*/
*   RETURN;                         /* RETURN TO IEAVTRTS            */
@EL00001 DS    0H                                                  0177
@EF00001 DS    0H                                                  0177
@ER00001 BR    @14                                                 0177
*/* ******************************************************************/
*/* THIS SEGMENT IS AN FRR WHICH RECOVERS IEAVTRTS FROM POSSIBLE     */
*/* ERRORS IN THE SOFTWARE RECORDING FACILITY(IEAVTRER) AND GTF      */
*/* WHEN IEAVTRTS ATTEMPTS TO TRACE FRRS AND RECORD SDWAS,RESP.      */
*/*  - RECOVERY FROM GTF FAILURE INVOLVES REQUESTING RETRY AT THE    */
*/*    POINT IN IEAVTRTS AFTER THE BALR TO GTF IF THE ERROR TYPE     */
*/*    IS NOT DATERR OR RESTART.  IF THE ERROR IS DATERR OR RESTART  */
*/*    PERCOLATION IS REQUESTED. RECORDING IS ALWAYS REQUESTED       */
*/*  - RECOVERY FROM RECORDING FAILURE INVOLVES REQUESTING RETRY AT  */
*/*    THE POINT IN IEAVTRTS AFTER THE BALR TO THE SOFTWARE RECORDING*/
*/*    FACILITY(IEAVTRER) PROVIDED THE ERROR TYPE IN THE SDWA DOES   */
*/*    NOT INDICATE DATERR OR RESTART.  IF THE ERROR TYPE IS DATERR  */
*/*    OR RESTART, PERCOLATION IS REQUESTED.  RECORDING OF THE SDWA  */
*/*    IS NOT REQUESTED.                                             */
*/* NOTES                                                            */
*/*  - REGS(R0,R1,R14,R2) ARE RESTRICTED THROUGHOUT THIS FRR         */
*/*  - THE RSVT IN THE PSA IS RESET TO THE ORIGINAL CONDITIONS AT THE*/
*/*    TIME OF THE ORIGINAL ENTRY TO IEAVTRTS FOR THE ERROR          */
*/*    INDEPENDENT OF WHETHER THIS FRR REQUESTS PERCOLATION OR RETRY */
*/*  - RECORDING IS REQUESTED IF GTF FAILED                          */
*/*  - RECORDING IS NOT REQUESTED IF RECORDING FAILED                */
*/*  - IF PERCOLATION IS REQUESTED AND IF A SRB SDWA WAS GETMAINED   */
*/*    THEN THIS SDWA IS FREED AS A PART OF THE CLEANUP PRIOR TO     */
*/*    THE PERCOLATION                                               */
*/*  - IF AN ERROR SHOULD OCCUR IN THIS FRR---RTM ABORT PROCESSING   */
*/*    WILL GET CONTROL                                              */
*/*  - THIS FRR WILL ABORT RECOVERY IN THE EVENT THAT THE            */
*/*    ORIGINAL ADDRESS OF THE INTERRUPTED FRR STACK IEAVTRTS WAS    */
*/*    PROCESSING PRIOR TO THE RECORDING OR GTF FAILURE HAS BEEN     */
*/*    LOST BY A SUCCESSION OF RECURSIVE ERRORS.                     */
*/*    RETRY BACK TO RTS FOR PROCESSING THE ORIGINAL ERROR PRIOR     */
*/*    TO THE RECORDING OR GTF FAILURE IS IMPOSSIBLE.                */
*/*  - THIS FRR SHOULD BE PERCOLATED TO BY EITHER RECORDINGS OR GTFS */
*/*    FRR                                                           */
*/* ******************************************************************/
*                                                                  0178
*RCOVRGTF:                                                         0178
*RCOVRCRD:                                                         0178
*   ENTRY;                                                         0178
@EP00178 DS    0H                                                  0179
*   RFY                                                            0179
*    (R14,                          /* REGISTERS THAT MUST BE        */
*     R1,                           /* RESTRICTED THROUGHOUT THIS    */
*     R2,                           /* FRRS PROCESSING               */
*     R0) RSTD;                                                    0179
*   RFY                                                            0180
*     FRRS BASED(PSACSTK);          /* ADDRESSABILITY TO CURRENT   0180
*                                      STACK                         */
*   RT1TLPN=RT1SRMHI;               /* SET UP FOR ABORT RTM        0181
*                                      PROCESSING                    */
         L     @15,PSACSTK                                         0181
         LA    @11,16                                              0181
         ALR   @11,@15                                             0181
         MVI   RT1TLPN(@11),X'59'                                  0181
*   RT1TLPID=NONE;                  /* IF THIS FRR SHOULD FAIL       */
         MVI   RT1TLPID(@11),X'00'                                 0182
*   RFY                                                            0183
*     SDWA BASED(R1);               /* INRTCA REG POINTS TO THE SDWA
*                                      PASSED ON INPUT TO FRR        */
*   RFY                                                            0184
*     FRRPARMS BASED(R7);           /* ADDRESSABILITY TO THE FRR   0184
*                                      PARAMETER AREA        @YM07602*/
*   RFY                                                            0185
*     R7 RSTD;                      /* GET CONTROL OF REG    @YM07602*/
*   R7=SDWAPARM;                    /* LET REGISTER CONTAIN ADDRESS
*                                      OF FRR PARM AREA      @YM07602*/
         L     R7,SDWAPARM(,R1)                                    0186
*   RFY                                                            0187
*     FRRS BASED(FRRPISTK);         /* ADDRESSABILITY TO THE       0187
*                                      INTERRUPTED STACK SRM WAS   0187
*                                      PROCESSING PRIOR TO THE     0187
*                                      FAILURE                       */
*   RFY                                                            0188
*     FRRWA BASED(R0);              /* ADDRESSABILITY TO THE FRR WORK
*                                      AREA PASSED IN REG0           */
*   FRRSRMRT=R14;                   /* CHKPT RETURN ADDRESS TO     0189
*                                      IEAVTRTS                      */
         LR    @11,R0                                              0189
         ST    R14,FRRSRMRT(,@11)                                  0189
*   IF PSACSTK=R2 THEN              /* IF THE INTERRUPTED STACK IS 0190
*                                      THE SAME AS THE STACK USED BY
*                                      RTS FOR ITS RECOVERY AND IS 0190
*                                      ALSO THE SAME STACK BEING   0190
*                                      RECOVERED THEN ABORT RECOVERY
*                                      SINCE RESTORATION OF THE    0190
*                                      ORIGINAL STACK IS IMPOSSIBLE  */
         CR    @15,R2                                              0190
         BNE   @RF00190                                            0190
*     IF PSACSTK=FRRPISTK THEN                                     0191
         C     @15,FRRPISTK(,R7)                                   0191
         BNE   @RF00191                                            0191
*       GEN(SVC   13);              /* ABORT RECOVERY                */
         SVC   13
*     ELSE                          /* IF THE STACKS CAN BE UNWOUND
*                                      THEN IF THE CURRENT STACK IS
*                                      EITHER THE PCFLIH STACK OR  0193
*                                      RESTART STACK THE RSVT MUST BE
*                                      RESTORED TO ITS STATE PRIOR TO
*                                      THE IEAVTRTS ERROR            */
*       IF PSACSTK=PSAPSTK×PSACSTK=PSARSTK THEN                    0193
         B     @RC00191                                            0193
@RF00191 L     @15,PSACSTK                                         0193
         C     @15,PSAPSTK                                         0193
         BE    @RT00193                                            0193
         C     @15,PSARSTK                                         0193
         BNE   @RF00193                                            0193
@RT00193 DS    0H                                                  0194
*         DO;                                                      0194
*           RFY                                                    0195
*             R5 RSTD;                                             0195
*           R5=FRRPISTK;                                           0196
         L     R5,FRRPISTK(,R7)                                    0196
*           CALL STORESTK;          /* RESET THE RSVT TO ITS PROPER
*                                      STATE                         */
         BAL   @14,STORESTK                                        0197
*         END;                                                     0198
*   IF SDWATEXC=ON                  /* IF THE ERROR IS A DATERR      */
*       ×SDWARKEY=ON THEN           /* OR A RESTART ERROR THEN THIS
*                                      FRR WILL SETUP TO PERCOLATE   */
@RF00193 DS    0H                                                  0199
@RC00191 DS    0H                                                  0199
@RF00190 TM    SDWATEXC(R1),B'00100010'                            0199
         BZ    @RF00199                                            0199
*     DO;                           /* PERCOLATE THE ERROR ON A    0200
*                                      RESTART OR DATERR             */
*       IF FRRPHOOK=ON THEN         /* IF SRM FAILED AFTER INVOKING
*                                      GTF THEN THE PERCOLATION SETUP
*                                      IS MADE ASSUMING THAT THE   0201
*                                      PCFLIH STACK WAS CURRENT AT 0201
*                                      THE TIME OF THE FAILURE       */
         TM    FRRPHOOK(R7),B'01000000'                            0201
         BNO   @RF00201                                            0201
*         DO;                                                      0202
*           SDWAMODN=RTRMODN;       /* SET MODULE NAME OF FRR IN THE
*                                      SDWA                          */
         MVC   SDWAMODN(8,R1),RTRMODN                              0203
*           SDWACSCT=RTRCSCT;       /* SET CSECT NAME OF FRR IN THE
*                                      SDWA                          */
         MVC   SDWACSCT(8,R1),RTRCSCT                              0204
*           SDWAREXN=GTFREXN;       /* SET RECOVERY ROUTINE NAME FOR
*                                      THIS FRR WHICH IS RECOVERING
*                                      GTF IN THE SDWA               */
         MVC   SDWAREXN(8,R1),GTFREXN                              0205
*           SDWARCRD=ON;            /* INDICATE THAT RECORDING IS TO
*                                      TAKE PLACE                    */
         OI    SDWARCRD(R1),B'10000000'                            0206
*           SDWAVRA=GTFPMSG;        /* PLACE PERCOLATE MESSAGE IN THE
*                                      VARIABLE RECORDING AREA OF THE
*                                      SDWA                          */
         MVI   SDWAVRA+89(R1),C' '                                 0207
         MVC   SDWAVRA+90(18,R1),SDWAVRA+89(R1)                    0207
         MVC   SDWAVRA(89,R1),GTFPMSG                              0207
*           SDWAURAL=LENGTH(GTFPMSG);                              0208
         MVI   SDWAURAL(R1),X'59'                                  0208
*           SDWAEBC=ON;             /* VARIABLE RECORDING AREA TO BE
*                                      DUMPED IN EBCDIC              */
         OI    SDWAEBC(R1),B'01000000'                             0209
*         END;                                                     0210
*       ELSE                        /* IF RTS DID NOT FAIL AFTER   0211
*                                      INVOKING GTF THEN SRM MUST  0211
*                                      HAVE FAILED AFTER INVOKING  0211
*                                      RECORDING                     */
*         SDWARCRD=OFF;             /* SINCE RTS FAILED AFTER      0211
*                                      INVOKING RECORDING THE OF THIS
*                                      SDWA IS NOT REQUESTED         */
         B     @RC00201                                            0211
@RF00201 NI    SDWARCRD(R1),B'01111111'                            0211
*       SDWARCDE=SDWACWT;           /* INDICATE PERCOLATION IN THE 0212
*                                      SDWA                          */
@RC00201 MVI   SDWARCDE(R1),X'00'                                  0212
*       IF FRRPISTK^=PSANSTK THEN   /* IF THE INTERRUPTED STACK PRIOR
*                                      TO THE RTS ERROR IS A SUPER 0213
*                                      STACK THEN PERCOLATE TO THE 0213
*                                      SUPER FRR WITH THIS STACK   0213
*                                      EMPTY AND READY TO ACCEPT A 0213
*                                      NEW ERROR                     */
         L     @15,FRRPISTK(,R7)                                   0213
         C     @15,PSANSTK                                         0213
         BE    @RF00213                                            0213
*         DO;                                                      0214
*           FRRSRCUR=OFF;                                          0215
         L     @11,FRRSCURR(,@15)                                  0215
         NI    FRRSRCUR(@11),B'01111111'                           0215
*           FRRSCURR=FRRSEMP;       /* MAKE THE STACK EMPTY          */
         L     @11,FRRSEMP(,@15)                                   0216
         ST    @11,FRRSCURR(,@15)                                  0216
*           RT1TLPN=NONE;           /* READY FOR THE NEW ERROR       */
         MVI   RT1TLPN+16(@15),X'00'                               0217
*         END;                                                     0218
*       ELSE                        /* OTHERWISE PERC TO THE SUPER 0219
*                                      FRR WITH THIS STACK SET TO  0219
*                                      INDICATE A RECURSIVE FRR    0219
*                                      FAILURE                       */
*         RT1TLPN=VALIDREC;         /* INDICATE VALID RECURSION INTO
*                                      IEAVTRTS                      */
         B     @RC00213                                            0219
@RF00213 L     @15,FRRPISTK(,R7)                                   0219
         MVI   RT1TLPN+16(@15),X'FF'                               0219
*     END;                                                         0220
*                                                                  0220
*/*   SET UP RETRY OF THE ERROR FOR IEAVTRTS                         */
*                                                                  0221
*   ELSE                            /* IF THE ERROR IS NEITHER A   0221
*                                      DATERR OR RESTART ERROR A   0221
*                                      RETRY BACK TO IEAVTRTS WILL BE
*                                      SETUP                         */
*     IF FRRPHOOK=ON THEN           /* IF RTS WAS TRACEING A FRR WHEN
*                                      THE ERROR OCCURRED THEN THE 0221
*                                      RETRY WILL BE SETUP TO RTS  0221
*                                      AFTER THE CALL TO GTF         */
         B     @RC00199                                            0221
@RF00199 TM    FRRPHOOK(R7),B'01000000'                            0221
         BNO   @RF00221                                            0221
*       DO;                                                        0222
*         RFY                                                      0223
*           FRRS BASED(FRRPISTK);                                  0223
*         SDWARCRD=ON;              /* INDICATE RECORDING            */
         OI    SDWARCRD(R1),B'10000000'                            0224
*         SDWAMODN=RTRMODN;         /* SET MODULE NAME OF IEAVTRTS 0225
*                                      FRR                           */
         MVC   SDWAMODN(8,R1),RTRMODN                              0225
*         SDWACSCT=RTRCSCT;         /* SET CSECT NAME OF IEAVTRTS    */
         MVC   SDWACSCT(8,R1),RTRCSCT                              0226
*         SDWAREXN=GTFREXN;         /* SET RECOVERY ROUTINE NAME     */
         MVC   SDWAREXN(8,R1),GTFREXN                              0227
*         SDWAVRA=GTFRMSG;          /* PUT RETRY MESSAGE IN VAR    0228
*                                      RECORDING AREA OF SDWA        */
         MVI   SDWAVRA+74(R1),C' '                                 0228
         MVC   SDWAVRA+75(33,R1),SDWAVRA+74(R1)                    0228
         MVC   SDWAVRA(74,R1),GTFRMSG                              0228
*         SDWAURAL=LENGTH(GTFRMSG); /* SET LENGTH OF MSG             */
         MVI   SDWAURAL(R1),X'4A'                                  0229
*         SDWAEBC=ON;               /* DUMP VARIABLE RECORDING AREA
*                                      IN EBCDIC                     */
         OI    SDWAEBC(R1),B'01000000'                             0230
*         SDWARCDE=SDWARETY;        /* INDICATE RETRY IN SDWA        */
         MVI   SDWARCDE(R1),X'04'                                  0231
*         SDWAUPRG=ON;              /* REGS WILL BE UPDATED FOR RETRY*/
         OI    SDWAUPRG(R1),B'00001000'                            0232
*         SDWARTYA=FRRPRTYA;        /* INITIALIZE RETRY ADDRESS      */
         L     @15,FRRPRTYA(,R7)                                   0233
         ST    @15,SDWARTYA(,R1)                                   0233
*         SDWASR00=FRRPREG2;        /* REPRIME REG 0                 */
         L     @15,FRRPREG2(,R7)                                   0234
         ST    @15,SDWASR00(,R1)                                   0234
*         SDWASR01=RT1WRTCA;        /* REPRIME REG1 PTR TO SDWA      */
         L     @15,FRRPISTK(,R7)                                   0235
         L     @11,RT1WRTCA(,@15)                                  0235
         ST    @11,SDWASR01(,R1)                                   0235
*         SDWASR02=FRRPREG1;        /* REPRIME SRMS RECOVERY STACK 0236
*                                      POINTER                       */
         L     @08,FRRPREG1(,R7)                                   0236
         ST    @08,SDWASR02(,R1)                                   0236
*         SDWASR05=RT1WRTCA;        /* REPRIME TARGRTCA REG          */
         ST    @11,SDWASR05(,R1)                                   0237
*         SDWASR06=FRRPREG3;        /* REPRIME FRR AVAILABILITY      */
         L     @11,FRRPREG3(,R7)                                   0238
         ST    @11,SDWASR06(,R1)                                   0238
*         SDWASR07=NULL;            /* ON GTF FAILURE SRM IS NOT IN
*                                      RECURSION                     */
         SLR   @11,@11                                             0239
         ST    @11,SDWASR07(,R1)                                   0239
*         SDWASR08=FRRPISTK;        /* REPRIME INTERRUPTED STACK   0240
*                                      POINTER                       */
         ST    @15,SDWASR08(,R1)                                   0240
*         RFY                                                      0241
*           SRMRGSV BASED(R1+LENGTH(SDWA));                        0241
*         SDWASR10=SRMREG10;        /* REESTABLISH SRM BASE REGS     */
         L     @15,SRMREG10+512(,R1)                               0242
         ST    @15,SDWASR10(,R1)                                   0242
*         SDWASR09=SDWASR10+FOURKAY;/* REGISTERS 9 AND 10            */
         AL    @15,@CF02834                                        0243
         ST    @15,SDWASR09(,R1)                                   0243
*       END;                                                       0244
*     ELSE                          /* IF RTS FAILED AFTER CALLING 0245
*                                      RECORDING OF THE SDWA THEN  0245
*                                      SETUP RETRY BACK TO RTS AFTER
*                                      THE CALL TO RECORDING         */
*       DO;                                                        0245
         B     @RC00221                                            0245
@RF00221 DS    0H                                                  0246
*         SDWARCRD=OFF;             /* DONT RECORD THIS SDWA         */
         NI    SDWARCRD(R1),B'01111111'                            0246
*         SDWARCDE=SDWARETY;        /* INDICATE RETRY                */
         MVI   SDWARCDE(R1),X'04'                                  0247
*         SDWAUPRG=ON;              /* UPDATED REGS USED FOR RETRY   */
         OI    SDWAUPRG(R1),B'00001000'                            0248
*         SDWARTYA=FRRPRTYA;        /* SET THE RETRY ADDRESS         */
         L     @15,FRRPRTYA(,R7)                                   0249
         ST    @15,SDWARTYA(,R1)                                   0249
*         RFY                                                      0250
*           R4 RSTD;                                               0250
*         R4=SRMWSAV2;                                             0251
         L     R4,SRMWSAV2+512(,R1)                                0251
*         SDWASR00=R4;              /* RESTORE REG0                  */
         ST    R4,SDWASR00(,R1)                                    0252
*         RFY                                                      0253
*           R4 UNRSTD;                                             0253
*         SDWASR01=RT1WRTCA;        /* REPRIME SDWA POINTER          */
         L     @15,FRRPISTK(,R7)                                   0254
         L     @11,RT1WRTCA(,@15)                                  0254
         ST    @11,SDWASR01(,R1)                                   0254
*         SDWASR02=PSACSTK;         /* RESTORE RTS RECOVERY STK      */
         L     @08,PSACSTK                                         0255
         ST    @08,SDWASR02(,R1)                                   0255
*         SDWASR05=RT1WRTCA;        /* RESTORE TARGRTCA REG          */
         ST    @11,SDWASR05(,R1)                                   0256
*         SDWASR06=FRRPREG2;        /* RESTORE FRR AVAILABILITY      */
         L     @04,FRRPREG2(,R7)                                   0257
         ST    @04,SDWASR06(,R1)                                   0257
*         SDWASR07=FRRPREG3;        /* RESTORE RECURSION STATUS      */
         L     @04,FRRPREG3(,R7)                                   0258
         ST    @04,SDWASR07(,R1)                                   0258
*         SDWASR08=FRRPISTK;        /* RESTORE INTERRUPTED STK ADDR  */
         ST    @15,SDWASR08(,R1)                                   0259
*         SDWASR10=FRRPREG1;        /* RESTORE SRMS BASE REG         */
         L     @15,FRRPREG1(,R7)                                   0260
         ST    @15,SDWASR10(,R1)                                   0260
*         SDWASR09=SDWASR10+FOURKAY;/* RESTORE 2ND BASE REG          */
         AL    @15,@CF02834                                        0261
         ST    @15,SDWASR09(,R1)                                   0261
*         RFY                                                      0262
*           R4 RSTD;                                               0262
*         RFY                                                      0263
*           FRRS BASED(PSACSTK);                                   0263
*         R4=RT1TENPT;              /* PICK UP ERROR TYPE            */
         LA    @15,16                                              0264
         ALR   @08,@15                                             0264
         SLR   R4,R4                                               0264
         IC    R4,RT1TENPT(,@08)                                   0264
*         RFY                                                      0265
*           FRRS BASED(FRRPISTK);                                  0265
*         IF R4=RT1TENPT            /* IF THE ERROR TYPE FOR THIS    */
*             &FRRPREG3=ACTIVE THEN /* FRR IS THE SAME AS THE ERROR
*                                      ORIGINALLY BEING HANDLED AND
*                                      RECORDING WAS INVOKED BECAUSE
*                                      THE FRR FAILED THEN THE REGS
*                                      AND PSW AT THE TIME OF THE  0266
*                                      WILL BE OVERLAYED WITH THE  0266
*                                      ERREGS AT THE TIME OF THE   0266
*                                      RECORDING FAILURE             */
         L     @08,FRRPISTK(,R7)                                   0266
         ALR   @08,@15                                             0266
         SLR   @15,@15                                             0266
         IC    @15,RT1TENPT(,@08)                                  0266
         CR    R4,@15                                              0266
         BNE   @RF00266                                            0266
         L     @15,FRRPREG3(,R7)                                   0266
         C     @15,@CF00079                                        0266
         BNE   @RF00266                                            0266
*           DO;                                                    0267
*             R4=RT1WRTCA;                                         0268
         LR    R4,@11                                              0268
*             RFY                                                  0269
*               SDWA BASED(R4);                                    0269
*             SDWARPIV=ON;          /* INDICATES REGS-PSW INVALID IN
*                                      THE SDWA ASSOCIATED WITH THE
*                                      INTERRUPTED STACK BEING     0270
*                                      PROCESSED PRIOR TO THE      0270
*                                      RECORDING FAILURE             */
         OI    SDWARPIV(R4),B'00000100'                            0270
*             RFY                                                  0271
*               SDWA BASED(R1);                                    0271
*           END;                                                   0272
*         ELSE                                                     0273
*           ;                       /* OTHERWISE THE OLD SDWA IS OK  */
@RF00266 DS    0H                                                  0274
*       END;                                                       0274
*   R14=FRRSRMRT;                   /* RESTORE RETURN ADDR TO RTS    */
@RC00221 DS    0H                                                  0275
@RC00199 LR    @11,R0                                              0275
         L     R14,FRRSRMRT(,@11)                                  0275
*   RFY                                                            0276
*     R7 UNRSTD;                    /* RELEASE REGISTER      @YM07602*/
*   RETURN;                         /* RETURN TO IEAVTRTS            */
         B     @EL00001                                            0277
*/* ******************************************************************/
*/* THIS SEGMENT IS AN INTERNAL PROCEDURE CALLED BY SEGMENT SRMDRCOV */
*/* AS PART OF THE LPRR DESIGNED TO RECOVER IEAVTRTS FROM A FAILURE  */
*/* FOR WHICH FRR RECOVERY IS NOT PRESENT.  THIS SEGMENT INITIALIZES */
*/* THE SDWA TO DESCRIBE THE IEAVTRTS FAILURE.                       */
*/* INPUTS-----                                                      */
*/*  -RT1TENPT FIELD OF THE RTM1 WORK AREA PORTION OF THE INTERRUPTED*/
*/*    FRR STACK CONTAINS THE ERROR TYPE OF THE FAILURE IN IEAVTRTS  */
*/*  - FLAGSCC REGISTER(R1) CONTAINS THE COMPLETION CODE             */
*/*  - PSWPTR1 REGISTER(R2) POINTS TO THE 1ST HALF OF THE ERROR PSW  */
*/*  - PSWPTR2 REGISTER(R3) POINTS TO THE 2ND HALF OF THE ERROR PSW  */
*/*  - DUMPOPTS REGISTER(R5) CONTAINS THE ADDRESS OF DUMPOPTS        */
*/*    ASSOCIATED WITH THE IEAVTRTS FAILURE IF THE ERROR TYPE IS     */
*/*    NOT A MACHINE CHECK                                           */
*/*  - EEDCHAIN REGISTER(R6) POINTS TO A COMPLETE ERROR DESCRIPTION  */
*/*    FOR A MACHINE CHECK IN IEAVTRTS                               */
*/*  - REPRDATA REGISTER(R5) CONTAINS ABBREVIATED MACHINE CHECK      */
*/*    ERROR DATA FOR THE FAILURE IN IEAVTRTS IF A COMPLETE          */
*/*    DESCRIPTION IS UNAVAILABLE                                    */
*/*  - STAKPTR REGISTER(R7) POINTS TO THE FRR STACK THAT WAS CURRENT */
*/*    AT THE TIME OF THE IEAVTRTS FAILURE                           */
*/*  - SAVAREAP REGISTER(R13) POINTS THE REGISTERS AT THE TIME OF    */
*/*    THE IEAVTRTS FAILURE                                          */
*/* OUTPUTS-----                                                     */
*/*  - RT1WRTCA FIELD IN THE RTM1 WORK AREA PORTION OF THE           */
*/*    INTERRUPTED FRR STACK POINTS TO THE INITIALIZED SDWA          */
*/* NOTES-----                                                       */
*/*  - REGS(R0,R1,R2,R3,R4,R5,R6,R7,R9,R10,R13,R14) ARE RESTRICTED   */
*/*  - ALL OTHER REGS ARE VOLATILE                                   */
*/* ******************************************************************/
*                                                                  0278
*SETRTCA:                                                          0278
*   PROC OPTIONS(NOSAVE NOSAVEAREA);                               0278
SETRTCA  DS    0H                                                  0279
*   RFY                                                            0279
*    (R1,                           /* PRESERVE THESE REGISTERS      */
*     R0,                                                          0279
*     R5,                                                          0279
*     R6,                                                          0279
*     R7,                                                          0279
*     R9,                                                          0279
*     R12,                                                         0279
*     R13,                                                         0279
*     R2,                                                          0279
*     R3,                                                          0279
*     R14,                                                         0279
*     R4) RSTD;                                                    0279
*   RFY                                                            0280
*     FRRS BASED(R7);               /* ADDRESSABILITY TO FRR STACK   */
*   RFY                                                            0281
*     SDWA BASED(RT1WRTCA);         /* ADDRESSABILITY TO SDWA        */
*   RFY                                                            0282
*     PSW BASED(R2);                /* POINTER TO 1ST HALF OF PSW    */
*   RFY                                                            0283
*     PSWEXT1 BASED(R3);            /* POINTER TO 2ND HALF OF PSW  0283
*                                                            @YM04995*/
*/* ******************************************************************/
*/* THIS SEGMENT BEGINS THE INITIALIZATION OF THE SDWA THAT WILL     */
*/* DESCRIBE THE IEAVTRTS FAILURE                                    */
*/* IT IS PART OF THE SRMDRCOV DEFAULT RECOVERY LPRR FOR IEAVTRTS    */
*/* INPUTS---                                                        */
*/*  -RT1WRTCA FIELD OF THE RTM1 WORK AREA PORTION OF THE INTERRUPTED*/
*/*  - STAKPTR REGISTER(R7) POINTS TO THE INTERRUPTED FRR STACK      */
*/*  - FLAGSCC REGISTER(R1) CONTAINS THE COMPLETION CODE OF THE ERROR*/
*/*  - PSWPTR1 REGISTER(R2) POINTS TO THE 1ST HALF OF THE ERROR PSW  */
*/*  - PSWPTR2 REGISTER(R3) POINTS TO THE 2ND HALF OF THE ERROR PSW  */
*/*  - DUMPOPTS REGISTER(R5) POINTS TO THE SNAP PARM LIST DESCRIBING */
*/*    THE DUMPOPTIONS IF ANY FOR THE IEAVTRTS ERROR PROVIDED THAT   */
*/*    THE ERROR IS NOT A MACHINE CHECK                              */
*/*  - EEDCHAIN REGISTER(R6) POINTS TO A COMPLETE DESCRIPTION OF     */
*/*    THE ERROR IF IT IS A MACHINE CHECK                            */
*/*  - REPRDATA REGISTER(R5) CONTAINS ABBREVIATED MACHINE CHECK      */
*/*    INFORMATION FOR THE ERROR IN IEAVTRTS IF A COMPLETE           */
*/*    DESCRIPTION OF THE IEAVTRTS ERROR COULD NOT BE OBTAINED       */
*/*  - SAVAREAP REGISTER(R13) POINTS TO THE REGISTERS AT THE TIME    */
*/*    OF THE IEAVTRTS FAILURE                                       */
*/* OUTPUT---                                                        */
*/*  - A COMPLETED SDWA DESCRIBING THE ERROR IN IEAVTRTS             */
*/* ******************************************************************/
*                                                                  0284
*   /*****************************************************************/
*   /*                                                               */
*   /* ****ZERO THE RTCA*****                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0284
*   DO;                                                            0284
*     SDWA(1:256)=''B;              /* ZERO 1ST 256 BYTES            */
         L     @15,RT1WRTCA(,R7)                                   0285
         XC    SDWA(256,@15),SDWA(@15)                             0285
*     SDWA(257:LENGTH(SDWA))=''B;   /* ZERO REMAINING BYTES          */
         XC    SDWA+256(256,@15),SDWA+256(@15)                     0286
*     IF RT1WSRBR^=NULL             /* IF A SRB SDWA WAS             */
*         &RT1WRTCA=RT1WSRBR THEN   /* SUCCESSFULLY GETMAINED TO   0287
*                                      PROCESS THE SRB ERROR THEN  0287
*                                      FINISH THE INITIALIZATION OF
*                                      OF THE SRB SDWA IF IT IS THE
*                                      CURRENTLY ACTIVE SDWA AT THE
*                                      TIME OF THE ERROR             */
         L     @11,RT1WSRBR(,R7)                                   0287
         LTR   @11,@11                                             0287
         BZ    @RF00287                                            0287
         CR    @15,@11                                             0287
         BNE   @RF00287                                            0287
*       SDWAIDNT=SQARTCA;           /* INITIALIZE THE LENGTH AND   0288
*                                      SUBPOOL ID OF THE GETMAINED 0288
*                                      SRB SDWA                      */
         L     @11,SQARTCA                                         0288
         ST    @11,SDWAIDNT(,@15)                                  0288
*     ELSE                                                         0289
*       ;                           /* IF THE ALLOCATED SDWA IS IS 0289
*                                      NOT A GETMAINED SRB SDWA THEN
*                                      NO SUBPOOL ID AND LENGTH NEED
*                                      BE INITIALIZED                */
@RF00287 DS    0H                                                  0290
*   END;                                                           0290
*   SDWAABCC=R1;                    /* SET THE COMPLETION CODE       */
         L     @15,RT1WRTCA(,R7)                                   0291
         ST    R1,SDWAABCC(,@15)                                   0291
*   SDWADPLA=ADDR(SDWASNPA);        /* SET SNAP PARM LIST ADDRESS    */
         LA    @11,SDWASNPA(,@15)                                  0292
         ST    @11,SDWADPLA(,@15)                                  0292
*   SDWARECA=ADDR(SDWARA);          /* SET ADDRESS TO VARIABLE     0293
*                                      RECORDING AREA                */
         LA    @11,SDWARA(,@15)                                    0293
         ST    @11,SDWARECA(,@15)                                  0293
*   SDWARCRD=ON;                    /* INDICATE RECORDING OF THE SDWA*/
         OI    SDWARCRD(@15),B'10000000'                           0294
*   SDWAVRAL=LENGTH(SDWAVRA);       /* INITIALIZE LENGTH OF VARIABLE
*                                      RECORDING AREA IN SDWA        */
         MVC   SDWAVRAL(2,@15),@CH01866                            0295
*/* ******************************************************************/
*/* THIS SEGMENT(PART OF SRMDRCOV-IEAVTRTS DEFAULT RECOVERY LPRR)    */
*/* INITIALIZES THE SDWA WITH THE ERROR TYPE,REGS AND PSW, AND       */
*/* ERRORID AT THE TIME OF THE IEAVTRTS FAILURE.             @G17EP5W*/
*/* INPUTS---                                                        */
*/*  - STAKPTR REGISTER(R7) POINTS TO THE INTERRUPTED FRR STACK THAT */
*/*    WAS CURRENT AT THE TIME OF THE IEAVTRTS FAILURE               */
*/*  - THE RTM1 WORK AREA PORTION OF THE INTERRUPTED FRR STACK       */
*/*  - RT1TENPT FILED OF THE RTM1 WORK AREA CONTAINS THE ERROR TYPE  */
*/*  - PSWPTR1 REGISTER(R2) POINTS TO THE 1ST HALF OF THE ERROR PSW  */
*/*  - PSWPTR2 REGISTER(R3) POINTS TO THE 2ND HALF OF THE ERROR PSW  */
*/*  - SAVAREAP REGISTER(R13) POINTS TO THE REGS AT TIME OF ERROR    */
*/*  - RT1WRTCA FIELD IN THE RTM1 WORK AREA POINTS TO THE SDWA       */
*/* OUTPUT---                                                        */
*/*  - THE SDWA IS INITIALIZED WITH THE ERROR TYPE,ERROR PSW, AND    */
*/*    ERROR REGS AT THE TIME OF THE IEAVTRTS FAILURE                */
*/* NOTES---                                                         */
*/*  - REGS(R1,R2,R3,R5,R7,R9,R10,R13) RESTRICTED                    */
*/* ******************************************************************/
*                                                                  0296
*   IF RT1WPCFL^=RT1TENPT THEN      /* IF ERROR IS NOT PROGCK        */
         LA    @11,16                                              0296
         ALR   @11,R7                                              0296
         CLI   RT1TENPT(@11),1                                     0296
         BE    @RF00296                                            0296
*     IF RT1WREST^=RT1TENPT THEN    /* AND NOT RESTART AND NOT       */
         CLI   RT1TENPT(@11),2                                     0297
         BE    @RF00297                                            0297
*       IF RT1WSVC^=RT1TENPT THEN   /* AN SVC ISSUED BY NON-TASK     */
         CLI   RT1TENPT(@11),3                                     0298
         BE    @RF00298                                            0298
*         IF RT1WDAT^=RT1TENPT THEN /* MODE RTN AND NOT DAT          */
         CLI   RT1TENPT(@11),4                                     0299
         BE    @RF00299                                            0299
*           IF RT1WMCHR=RT1TENPT THEN/* ERROR BUT IS MACHINE         */
         CLI   RT1TENPT(@11),5                                     0300
         BNE   @RF00300                                            0300
*             DO;                   /* CHECK THEN DO FOLLOWING       */
*               SDWAMCHK=ON;        /* INDICATE MACHK IN SDWA        */
         OI    SDWAMCHK(@15),B'10000000'                           0302
*               IF R6>EEDNULL THEN  /* IF HARWARE DATA IS            */
         C     R6,@CF00079                                         0303
         BNH   @RF00303                                            0303
*                 DO;               /* AVAILABE DO FOLLOWING         */
*                   SDWAMCH=HRDWDATA;/* SET MCH HARDWARE DATA IN SDWA*/
         MVC   SDWAMCH(28,@15),HRDWDATA(R5)                        0305
*                 END;                                             0306
*               ELSE                /* OTHERWISE ABBREVIATED MCH     */
*                 DO;                                              0307
         B     @RC00303                                            0307
@RF00303 DS    0H                                                  0308
*                   ABBMACH=R5;     /* DATA IS IN REPRDATA REG AND IS
*                                      PLACED IN SDWA                */
         L     @15,RT1WRTCA(,R7)                                   0308
         ST    R5,ABBMACH(,@15)                                    0308
*                   SDWAMCIV=ON;    /* INDICATE IN SDWA THAT MACH  0309
*                                      CHECK DATA IN UNAVAILABLE     */
         OI    SDWAMCIV(@15),B'00000010'                           0309
*                 END;                                             0310
*               R5=NULL;            /* ZERO REPRDATA                 */
@RC00303 SLR   R5,R5                                               0311
*             END;                                                 0312
*           ELSE                                                   0313
*             ;                     /* OTHERWISE THE SDWAERRA FIELD
*                                      OF THE SDWA IS NOT SET A    0313
*                                      CANNOT OCURR SITUATION        */
@RF00300 DS    0H                                                  0314
*         ELSE                      /* OTHERWISE A DAT ERROR IS      */
*           DO;                                                    0314
         B     @RC00299                                            0314
@RF00299 DS    0H                                                  0315
*             SDWATEXC=ON;          /* INDICATED IN THE SDWA         */
         L     @15,RT1WRTCA(,R7)                                   0315
         OI    SDWATEXC(@15),B'00000010'                           0315
*             SDWACLUP=ON;          /* INDICATE THAT CLEANUP AND   0316
*                                      PERCOLATION IS ALL THAT IS  0316
*                                      ALLOWED BY FRRS FOR THIS ERROR
*                                      NOT RETRY                     */
         OI    SDWACLUP(@15),B'10000000'                           0316
*             RT1WCLUP=ON;          /* PRESERVED THE CLEANUP AND   0317
*                                      PERCOLATE INDICATION IN THE 0317
*                                      RTM1 WORK AREA                */
         OI    RT1WCLUP(R7),B'10000000'                            0317
*             IF ASCBASID=NULL THEN /* IF THE CURRENT ASID IS ZERO 0318
*                                      (I.E.CURRENT ASCB WAS       0318
*                                      OVERLAID) INSURE THAT FRRS DO
*                                      NOT CONSIDER THAT THE CURRENT
*                                      MEMORY IS VALID AND HAS NOT 0318
*                                      FAILED                        */
         L     @11,PSAAOLD                                         0318
         LH    @11,ASCBASID(,@11)                                  0318
         N     @11,@CF03408                                        0318
         LTR   @11,@11                                             0318
         BNZ   @RF00318                                            0318
*               SDWAFMID=INVLASID;  /* INDICATE A FAILING INVALID  0319
*                                      MEMORY IN THE SDWA            */
         MVC   SDWAFMID(2,@15),@CB02840                            0319
*             ELSE                  /* OTHERWISE ASSUME THAT THE   0320
*                                      CURRENT ASCB CONTAINS A VALID
*                                      ASID                          */
*               SDWAFMID=ASCBASID;  /* USE THE CURRENT ASID          */
         B     @RC00318                                            0320
@RF00318 L     @15,RT1WRTCA(,R7)                                   0320
         L     @11,PSAAOLD                                         0320
         MVC   SDWAFMID(2,@15),ASCBASID(@11)                       0320
*           END;                                                   0321
*       ELSE                        /* OTHERWISE A NON TASK MODE RTN */
*         SDWASVCE=ON;              /* ISSUED A SVC ERROR INDICATION
*                                      IS MADE IN THE SDWA           */
         B     @RC00298                                            0322
@RF00298 L     @15,RT1WRTCA(,R7)                                   0322
         OI    SDWASVCE(@15),B'00000100'                           0322
*     ELSE                          /* OTHERWISE A RESTART ERROR     */
*       DO;                                                        0323
         B     @RC00297                                            0323
@RF00297 DS    0H                                                  0324
*         SDWARKEY=ON;              /* INDICATION IS MADE IN THE SDWA*/
         L     @15,RT1WRTCA(,R7)                                   0324
         OI    SDWARKEY(@15),B'00100000'                           0324
*         SDWACLUP=ON;              /* INDICATE THAT ONLY CLEANUP AND
*                                      PERCOLATION IS ALLOWED BY FRRS
*                                      FOR THIS ERROR- NOT RETRY     */
         OI    SDWACLUP(@15),B'10000000'                           0325
*         RT1WCLUP=ON;              /* PRESERVED THE CLEANUP AND   0326
*                                      PERCOLATE INDICATION IN THE 0326
*                                      RTM1 WORK AREA FOR THIS ERROR */
         OI    RT1WCLUP(R7),B'10000000'                            0326
*       END;                                                       0327
*   ELSE                            /* OTHERWISE A PROGRAM CHK ERROR */
*     SDWAPCHK=ON;                  /* INDICATION IS MADE IN SDWA    */
*                                                                  0328
         B     @RC00296                                            0328
@RF00296 L     @15,RT1WRTCA(,R7)                                   0328
         OI    SDWAPCHK(@15),B'01000000'                           0328
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SEGMENT INITIALIZES THE REGISTERS AND PSA AT THE TIME OF */
*   /* THE ERROR IN THE ALLOCATED SDWA INPUT - STAKPTR REGISTER(R7)  */
*   /* POINTS TO THE INTERRUPTED FRR STACK - RT1WRTCA FIELD OF THE   */
*   /* RTM1WORK AREA PORTION OF THE INTERRUPTED STACK POINTS TO THE  */
*   /* ALLOCATED SDWA THAT IS TO BE INITIALIZED - PSWPTR1,PSWPTR2    */
*   /* REGISTERS(R2,R3,RESP) POINT TO RESPECTIVE HALFS(8 BYTES) OF   */
*   /* THE PSW AT TIME OF ERROR - SAVAREAP REGISTER(R13) POINTS TO   */
*   /* THE REGISTERS SAVED AT THE TIME OF THE ERROR OUTPUT -         */
*   /* SDWAGRSV,SDWASRSV FIELDS IN THE ALLOCATED SDWA CONTAIN THE    */
*   /* REGISTER CONTENTS AT TIME OF ERROR -                          */
*   /* SDWAEC1,SDWAAEC1,SDWAEC2,SDWAAEC2 FIELDS IN THE SDWA CONTAINS */
*   /* THE PSW AT TIME OF THE ERROR NOTES - REGS(R0,R2,R5,R7 )MUST   */
*   /* REMAIN UNCHANGED THROUGHOUT THIS SEGMENT - REGISTER R13 STILL */
*   /* POINTS TO THE REGS AT TIME OF ERROR                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0329
*   DO;                                                            0329
@RC00296 DS    0H                                                  0330
*     SDWAGRSV=ERREGS;              /* INITIALIZE THE ERROR REGS IN
*                                      THE SDWA                      */
         L     @15,RT1WRTCA(,R7)                                   0330
         MVC   SDWAGRSV(64,@15),ERREGS(R13)                        0330
*     SDWASRSV=ERREGS;              /* INITIALIZE THE ERROR REGS IN
*                                      THE SDWA                      */
         MVC   SDWASRSV(64,@15),ERREGS(R13)                        0331
*     SDWAEC1=PSW;                  /* INITIALIZE 1ST HALF OF ERROR
*                                      PSW IN SDWA                   */
         MVC   SDWAEC1(8,@15),PSW(R2)                              0332
*     SDWAEC2=PSW;                  /* INITIALIZE 1ST HALF OF ERROR
*                                      PSW IN SDWA                   */
         MVC   SDWAEC2(8,@15),PSW(R2)                              0333
*     IF SDWAPCHK^=ON&SDWATEXC^=ON THEN/* IF THE ERROR IS NOT A    0334
*                                      PROGRAM INTERRUPTION THEN   0334
*                                      INITIALIZE THE PSW AS FOLLOWS
*                                                            @YM06390*/
         TM    SDWAPCHK(@15),B'01000010'                           0334
         BNZ   @RF00334                                            0334
*       DO;                         /*                       @YM06390*/
*         IF R3^=NULL THEN          /* IF THE ILC AND IC OF THE ERROR
*                                      PSW IS AVAILABLE THEN       0336
*                                      INITIALIZE IT         @YM06390*/
         LTR   R3,R3                                               0336
         BZ    @RF00336                                            0336
*           DO;                     /*                       @YM06390*/
*             ECPEXT1=PSWILCIC;     /* SET ILC AND IC        @YM06390*/
         MVC   ECPEXT1(4,@15),PSWILCIC(R3)                         0338
*             ECPEXT2=PSWILCIC;     /* SET ILC AND IC        @YM06390*/
         MVC   ECPEXT2(4,@15),PSWILCIC(R3)                         0339
*           END;                    /*                       @YM06390*/
*         ELSE                                                     0341
*           ;                       /* IF THE ILC AND IC ARE NOT   0341
*                                      AVAILABLE THEN JUST INITIALIZE
*                                      THE TRANS ADDR        @YM06390*/
@RF00336 DS    0H                                                  0342
*         DO;                       /*                       @YM06390*/
*           SDWATRAN=LCCAPVAD;      /* SET TRANS ADDR        @YM06390*/
         L     @15,RT1WRTCA(,R7)                                   0343
         L     @11,PSALCCAV                                        0343
         L     @11,LCCAPVAD(,@11)                                  0343
         ST    @11,SDWATRAN(,@15)                                  0343
*           SDWATRN2=LCCAPVAD;      /* SET TRANS ADDR        @YM06390*/
         ST    @11,SDWATRN2(,@15)                                  0344
*         END;                      /*                       @YM06390*/
*       END;                        /*                       @YM06390*/
*     ELSE                          /* IF THE ERROR IS A PROGRAM   0347
*                                      INTERRUPTION THE ALL PSW DATA
*                                      IS AVAILABLE          @YM06390*/
*       DO;                         /*                       @YM06390*/
         B     @RC00334                                            0347
@RF00334 DS    0H                                                  0348
*         SDWAAEC2=PSWEXT1;         /* INITIALIZE 2ND HALF OF ERROR
*                                      PSW IN SDWA                   */
         L     @15,RT1WRTCA(,R7)                                   0348
         MVC   SDWAAEC2(8,@15),PSWEXT1(R3)                         0348
*         SDWAAEC1=PSWEXT1;         /* INITIALIZE 2ND HALF OF ERROR
*                                      PSW IN SDWA                   */
         MVC   SDWAAEC1(8,@15),PSWEXT1(R3)                         0349
*       END;                        /*                       @YM06390*/
*   END;                                                           0351
*                                                                  0351
@RC00334 DS    0H                                                  0352
*/********************************************************************/
*/*                                                                  */
*/* THIS SEGMENT PUTS THE ERRORID INTO THE SDWA. IF SDWAMCH=HRDWDATA */
*/* THEN HARDWARE DATA IS AVAILABLE IN THE EED'S.  THE EEDCHAIN IS   */
*/* SEARCHED AND IF AN ERRORID IS FOUND, IT IS MOVED INTO THE SDWA.  */
*/* OTHERWISE, A NEW ERRORID IS GENERATED AND SDWACPUI, SDWAERTM, AND*/
*/* SDWASEQ# ARE SET.                                                */
*/* INPUTS--                                                         */
*/*   - RTM1 WORKAREA PORTION OF THE INTERRUPTED STACK.              */
*/*   - RT1WRTCA FIELD POINTS TO THE SDWA.                           */
*/*   - RTCTSEQ# IN THE RTCA CONTAINS THE CURRENT SEQUENCE NUMBER.   */
*/* OUTPUTS--                                                        */
*/*   - THE SDWA IS INITIALIZED WITH ERRORID INFORMATION.            */
*/*                                                                  */
*/********************************************************************/
*                                                                  0352
*   DO;                             /* PUT ERRORID IN SDWA   @G17EP5W*/
*     STM(R0,R2,SDWARCPL);          /* SAVE REGS TO BE USED FOR    0353
*                                      ERRORID PROCESSING    @G17EP5W*/
         L     @15,RT1WRTCA(,R7)                                   0353
         STM   R0,R2,SDWARCPL(@15)                                 0353
*     RFY                                                          0354
*      (R0,                                                        0354
*       R1,                                                        0354
*       R2) RSTD;                   /* REGS USED BY MACROS   @G17EP5W*/
*     IF SDWAMCHK=ON THEN           /* IF THIS IS A HARD ERROR     0355
*                                                            @G17EP5W*/
         TM    SDWAMCHK(@15),B'10000000'                           0355
         BNO   @RF00355                                            0355
*       DO;                         /* LOOK FOR ERRORID IN EED     0356
*                                                            @G17EP5W*/
*         R2=R6;                    /* MOVE 1ST EED PTR TO REG     0357
*                                                            @G19EP5W*/
         LR    R2,R6                                               0357
*         DO WHILE(R2>EEDNULL);     /* SEARCH THRU EED CHAIN @G17EP5W*/
         B     @DE00358                                            0358
@DL00358 DS    0H                                                  0359
*           IF R2->EEDERFL=ON THEN  /* IF ERRORID IN EED     @G17EP5W*/
         TM    EEDERFL(R2),B'10000000'                             0359
         BNO   @RF00359                                            0359
*             DO;                   /* MOVE IT TO SDWA       @G17EP5W*/
*               SDWAERTM=R2->EEDETIME;/* MOVE IN TIME STAMP  @G17EP5W*/
         L     @15,RT1WRTCA(,R7)                                   0361
         MVC   SDWAERTM(4,@15),EEDETIME(R2)                        0361
*               SDWASEQ#=R2->EEDESEQ#;/* MOVE IN SEQUENCE #  @G17EP5W*/
         MVC   SDWASEQ#(2,@15),EEDESEQ#(R2)                        0362
*               SDWACPUI=R2->EEDECPUI;/* MOVE IN CPU ID      @G17EP5W*/
         LH    @11,EEDECPUI(,R2)                                   0363
         STC   @11,SDWACPUI(,@15)                                  0363
*               SDWAERFL=ON;        /* ERRORID IN SDWA       @G17EP5W*/
         OI    SDWAERFL(@15),B'00000001'                           0364
*             END;                  /* END MOVE ERRORID INFO @G17EP5W*/
*           R2=R2->EEDFWRDP;        /* GET NEXT POINTER      @G17EP5W*/
@RF00359 L     R2,EEDFWRDP(,R2)                                    0366
*         END;                      /* END ERRORID SEARCH    @G17EP5W*/
@DE00358 C     R2,@CF00079                                         0367
         BH    @DL00358                                            0367
*       END;                        /* END HARD ERROR ERRORID      0368
*                                                            @G17EP5W*/
*     IF SDWAERFL=OFF THEN          /* IF NO ERRORID,GENERATE      0369
*                                                            @G17EP5W*/
@RF00355 L     @15,RT1WRTCA(,R7)                                   0369
         TM    SDWAERFL(@15),B'00000001'                           0369
         BNZ   @RF00369                                            0369
*       DO;                         /* A NEW ERRORID         @G17EP5W*/
*         R2=ADDR(SDWARCPL)+LENGTH(REGSTOR);/* R2 POINTS TO AN 8 BYTE
*                                      AREA TO BE USED TO STORE THE
*                                      TOD CLOCK VALUE       @G17EP5W*/
         LA    R2,SDWARCPL(,@15)                                   0371
         AL    R2,@CF00191                                         0371
*         GEN;                                                     0372
*                                  /*INVOKE CONVERT TIME MAC @G17EP5W*/
       CONTIME TIMER=(2)           /*SPECIFY ADDR FOR TOD    @G17EP5W*/
*         SDWAERTM=R1;              /* PUT TIMESTAMP IN SDWA @G17EP5W*/
         L     @15,RT1WRTCA(,R7)                                   0373
         ST    R1,SDWAERTM(,@15)                                   0373
*         RFY                                                      0374
*          (R8) RSTD;               /* REG FOR SEQ ADDR      @G17EP5W*/
*         R8=ADDR(SDWASEQ#);        /* SEQ # ADDR            @G17EP5W*/
         LA    R8,SDWASEQ#(,@15)                                   0375
*         GEN;                                                     0376
*                                  /* GET SEQ# FOR ERRORID   @G17EP5W*/
        GETSEQ (8)                 /* SAVE VALUE IN SDWA     @G17EP5W*/
*         SDWACPUI=PSACPULA;        /* LOGICAL CPU ID IN SDWA      0377
*                                                            @G17EP5W*/
         L     @15,RT1WRTCA(,R7)                                   0377
         LH    @11,PSACPULA                                        0377
         STC   @11,SDWACPUI(,@15)                                  0377
*         SDWAERFL=ON;              /* MARK ERRORID IN SDWA  @G17EP5W*/
         OI    SDWAERFL(@15),B'00000001'                           0378
*         RFY                                                      0379
*          (R0,                                                    0379
*           R1,                                                    0379
*           R2,                                                    0379
*           R8) UNRSTD;             /* FREE UP REGS          @G17EP5W*/
*       END;                        /* END GENERATE ERRORID  @G17EP5W*/
*     LM(R0,R2,SDWARCPL);           /* RESTORE REG VALUES    @G17EP5W*/
@RF00369 L     @15,RT1WRTCA(,R7)                                   0381
         LM    R0,R2,SDWARCPL(@15)                                 0381
*     RFY                                                          0382
*      (R0,                                                        0382
*       R1,                                                        0382
*       R2) RSTD;                   /* RERESTRICT REGS THAT WERE   0382
*                                      PREVIOUSLY RESTRICTED @G17EP5W*/
*     SDWARCPL=SDWARCPL&&SDWARCPL;  /* CLEAR OUT SDWA AREA USED FOR
*                                      TERMPORARY REG. STORAGE     0383
*                                                            @G17EP5W*/
         L     @15,RT1WRTCA(,R7)                                   0383
         XC    SDWARCPL(28,@15),SDWARCPL(@15)                      0383
*   END;                            /* END ERRORID SEGMENT   @G17EP5W*/
*                                                                  0384
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SEGMENT INITIALIZES THE SDWA WITH ERROR INFORMATION      */
*   /* CONCERNING THE MODE OF THE SYSTEM AT THE TIME OF THE ERROR    */
*   /* INPUT - RT1WRTCA FIELD OF THE RTM1 WORK AREA PORTION OF THE   */
*   /* INTERRUPTED STACK POINTS TO THE RTCA TO BE INITIALIZED - THE  */
*   /* MODE BYTE IN THE RTM1 WORK AREA PORTION OF THE INTERRUPTED    */
*   /* STACK(RT1WMODE) CONTAINS THE MODE OF THE SYSTEM AT THE TIME OF*/
*   /* THE ERROR - STAKPTR REGISTER(R7) POINTS TO THE INTERRUPTED    */
*   /* STACK OUTPUT - THE SDWATYP1 BIT IS SET ON IN THE RTCA IF A    */
*   /* TYPE 1 SVC WAS IN CONTROL AT THE TIME OF THE ERROR - THE      */
*   /* SDWALDIS BIT IS SET ON IN THE RTCA IF A GLOBAL OR LOCAL LOCK  */
*   /* WAS HELD AT THE TIME OF THE ERROR - THE SDWASRBM BIT IS SET ON*/
*   /* IN THE RTCA IF THE MODEBYTE IN THE RTM1 WORK AREA INDICATES   */
*   /* THAT THE SYSTEM WAS IN SRB MODE AT THE TIME OF THE ERROR NOTES*/
*   /* - ALL RETRICTED GENERAL PURPOSE REGISTER CONTENTS ON ENTRY ARE*/
*   /* UNCHANGED ON EXIT FROM THIS SEGMENT - THIS SEGMENT IS PART OF */
*   /* THE SRMDRCOV LPRR FOR IEAVTRTS                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0385
*   IF MODETYP1=ON THEN             /* IF TYPE1 SVC IN CONTROL AT    */
         TM    MODETYP1+81(R7),B'00000100'                         0385
         BNO   @RF00385                                            0385
*     SDWATYP1=ON;                  /* TIME OF ERROR MAKE INDICATION
*                                      IN SDWA                       */
         OI    SDWATYP1(@15),B'00001000'                           0386
*   ELSE                                                           0387
*     ;                             /* IF TYPE1 SVC NOT IN CONTROL AT
*                                      TIME OF ERROR NOT INDICATION
*                                      IS MADE                       */
@RF00385 DS    0H                                                  0388
*   MODEDIS=ON;                     /* SRM IS ALWAYS DISABLED        */
         LA    @15,81                                              0388
         ALR   @15,R7                                              0388
         OI    MODEDIS(@15),B'01000000'                            0388
*   IF MODEBYTE>=LOCLMODE THEN      /* IF GLOBAL OR LOCAL MODE THEN  */
         CLI   MODEBYTE(@15),8                                     0389
         BL    @RF00389                                            0389
*     SDWALDIS=ON;                  /* INDICATE LOGICAL OR PHYSICAL
*                                      DISABLEMENT AT TIME OF ERROR  */
         L     @15,RT1WRTCA(,R7)                                   0390
         OI    SDWALDIS(@15),B'00000010'                           0390
*   ELSE                                                           0391
*     ;                             /* IF THE MODE IS NEITHER GLOBAL
*                                      NOR LOCAL THEN THERE IS NO  0391
*                                      LOGICAL OR PHYSICAL         0391
*                                      DISABLEMENT                   */
@RF00389 DS    0H                                                  0392
*   IF MODESRB=ON THEN              /* IF SRB MODE WAS ACTVE AT TIME
*                                      OF ERROR                      */
         TM    MODESRB+81(R7),B'00000010'                          0392
         BNO   @RF00392                                            0392
*     SDWASRBM=ON;                  /* THEN INDICATE SRB MODE IN THE
*                                      SDWA                          */
         L     @15,RT1WRTCA(,R7)                                   0393
         OI    SDWASRBM(@15),B'00000001'                           0393
*   ELSE                                                           0394
*     ;                                                            0394
@RF00392 DS    0H                                                  0395
*   IF R5^=NULL THEN                /* IF DUMP OPTIONS WERE SUPPLIED
*                                      PERFORM DUMPOPTS PROCESSING   */
         LTR   R5,R5                                               0395
         BZ    @RF00395                                            0395
*/* ******************************************************************/
*/* THIS SEGMENT IS PART OF THE IEAVTRTS DEFAULT RECOVERY LPRR WHICH */
*/* INITIALIZES THE SDWA WITH ANY DUMP OPTIONS ASSOCIATED WITH THE   */
*/* IEAVTRTS FAILURE.  THE SNAP PARAMETER LIST AND A MAX OF 4 STORAGE*/
*/* ARE MOVED INTO THE SDWA                                          */
*/* INPUT----                                                        */
*/*  - DUMPOPTS REGISTER(R5) POINTS TO THE SNAP PARM LIST            */
*/*  - THE SNAP PARAMETER LIST INDICATES IF STORAGE RANGES ARE       */
*/*    SUPPLIED                                                      */
*/* OUTPUT---                                                        */
*/*  - THE DUMP OPTIONS ASSOCIATED WITH THE IEAVTRTS FAILURE ARE     */
*/*    INITIALIZED IN THE SDWA                                       */
*/* ******************************************************************/
*                                                                  0396
*     DO;                                                          0396
*       RFY                                                        0397
*        (R3,                                                      0397
*         R4) RSTD;                                                0397
*       SDWASNPA=SNPCDMP;           /* MOVE INTO THE SDWA THE COMMON
*                                      SECTION OF SNAP PARMS         */
         L     @15,RT1WRTCA(,R7)                                   0398
         MVC   SDWASNPA(8,@15),SNPCDMP(R5)                         0398
*       IF SNPSLIST=ON THEN         /* IF STORAGE RANGES ARE PROVIDED
*                                      IN THE SNAP PARMS PROCESS THE
*                                      STORAGE RANGES                */
         TM    SNPSLIST(R5),B'00000010'                            0399
         BNO   @RF00399                                            0399
*         DO;                       /* PROCESS TO MOVE STORAGE RANGE
*                                      ADDRESSES INTO SDWA           */
*           IF STOREND(ONE)=ON THEN /* IF ONLY ONE SET OF STORAGE  0401
*                                      RANGES IS PROVIDED THEN       */
         L     @15,SNPSTOR(,R5)                                    0401
         TM    STOREND(@15),B'10000000'                            0401
         BNO   @RF00401                                            0401
*             R3=LENGTH(LISTPAIR);  /* SET THE NUMBER OF BYTES TO  0402
*                                      MOVE IN ONE PAIR              */
         LA    R3,8                                                0402
*           ELSE                    /* OTHERWISE MORE THAN ONE SET OF
*                                      STORAGE RANGES IS SUPPLIED    */
*             DO;                   /* DETERMINE THE NUMBER OF     0403
*                                      STORAGE RANGES SUPPLIED       */
         B     @RC00401                                            0403
@RF00401 DS    0H                                                  0404
*               R4=NULL;            /* INITIALIZE SWITCH FOR LOOP  0404
*                                      EXIT                          */
         SLR   R4,R4                                               0404
*               DO R3=1 TO DIM(LISTPAIR)/* CALCULATE AMOUNT          */
*                     WHILE(R4=NULL);/* TO MOVE BY INITIALIZING    0405
*                                      LENGTH TO THE FIRST PAIR AND
*                                      CONTINUING TO SEARCH UNTIL THE
*                                      MAX NUMBER OF RANGES ALLOWED
*                                      IN THE SDWA IS REACHED OR   0405
*                                      UNTIL AN END OF THE LIST IS 0405
*                                      DETECTED                      */
         LA    R3,1                                                0405
@DL00405 LTR   R4,R4                                               0405
         BNZ   @DC00405                                            0405
*                 IF STOREND(R3)=ON THEN/* IF THE END OF THE LIST HAS
*                                      BEEN REACHED                  */
         LR    @15,R3                                              0406
         SLA   @15,3                                               0406
         L     @11,SNPSTOR(,R5)                                    0406
         ALR   @11,@15                                             0406
         AL    @11,@CF03411                                        0406
         TM    STOREND-4(@11),B'10000000'                          0406
         BNO   @RF00406                                            0406
*                   R4=HEX7FOXS;    /* CAUSE LOOP EXIT               */
         L     R4,@CF02842                                         0407
*                 ELSE                                             0408
*                   ;                                              0408
@RF00406 DS    0H                                                  0409
*               END;                                               0409
         AL    R3,@CF00079                                         0409
         C     R3,@CF00113                                         0409
         BNH   @DL00405                                            0409
@DC00405 DS    0H                                                  0410
*               R3=R3*LENGTH(LISTPAIR);/* CONVERT THE NUMBER OF PAIRS
*                                      TO BYTES                      */
         SLL   R3,3                                                0410
*             END;                  /* END OF LENGTH CALCULATION     */
*           SDWADPSL(1:R3)=STORLIST(1:R3);/* MOVE THE STORAGE RANGE
*                                      LIST INTO THE SDWA            */
@RC00401 L     @15,RT1WRTCA(,R7)                                   0412
         LR    @11,R3                                              0412
         BCTR  @11,0                                               0412
         L     @08,SNPSTOR(,R5)                                    0412
         EX    @11,@SM03412                                        0412
*         END;                      /* END STORAGE RANGE PROCESSING  */
*       ELSE                                                       0414
*         ;                         /* IF NO STORAGE RANGES SUPPLIED
*                                      THEN NO STORAGE RANGES ARE  0414
*                                      INITIALIZED IN THE SDWA       */
@RF00399 DS    0H                                                  0415
*     END;                          /* END DUMPOPTS PROCESSING       */
*   ELSE                                                           0416
*     ;                             /* IF DUMP OPTIONS ARE NOT     0416
*                                      SPECIFIED THEN NO           0416
*                                      INITIALIZATION OF THE SDWA  0416
*                                      WITH DUMPOPTS TAKES PLACE     */
@RF00395 DS    0H                                                  0417
*   END SETRTCA;                                                   0417
*                                                                  0417
@EL00002 DS    0H                                                  0417
@EF00002 DS    0H                                                  0417
@ER00002 BR    @14                                                 0417
*/* ******************************************************************/
*/* THIS SEGMENT IS AN INTERNAL PROCEDURE CALLED BY THE LPRR SEGMENT */
*/* ---SRMDRCOV--- AND PERFORMS THE FUNCTION OF RECORDING THE SDWA   */
*/* INITIALIZED TO THE DESCRIBE THE FAILURE IN IEAVTRTS              */
*/* INPUTS---                                                        */
*/*  - TARGRTCA REGISTER(R5) POINTS TO THE SDWA TO BE RECORDED       */
*/*  - R14 REGISTER CONTAINING RETURN ADDRESS OF CALLER              */
*/*  - STAKPTR REGISTER(R7) POINTS TO INTERRUPTED FRR STACK AT THE   */
*/*    IEAVTRTS FAILURE                                              */
*/*  - WORKREG REGISTER(R4) USE AS A WORK REGISTER                   */
*/* OUTPUTS---                                                       */
*/*  - THE SDWA DESCRIBING THE IEAVTRTS ERROR IS RECORDED            */
*/* NOTES-----                                                       */
*/*  - REGS(R5,R7,R9,R10) RESTRICTED                                 */
*/* ******************************************************************/
*                                                                  0418
*RCRDRTCA:                                                         0418
*   PROC OPTIONS(NOSAVE NOSAVEAREA);                               0418
RCRDRTCA DS    0H                                                  0419
*   RFY                                                            0419
*     SDWA BASED(RT1WRTCA);         /* SDWA POINTER                  */
*   RFY                                                            0420
*     FRRS BASED(R7);               /* INTERRUPTED FRR STACK PTR     */
*   RFY                                                            0421
*    (R7,                                                          0421
*     R5,                                                          0421
*     R14,                                                         0421
*     R4) RSTD;                     /* PRESERVE THESE REGS           */
*/* ******************************************************************/
*/*     THIS SEGMENT INITIALIZES THE INPUT INTERFACE TO THE SOFTWARE */
*/*     RECORDING FACILITY IN PREPARATION FOR RECORDING THE SDWA     */
*/*     INPUT                                                        */
*/*      - TARGRTCA REGISTER(R5) POINTS TO THE SDWA TO BE RECORDED   */
*/*     OUTPUT                                                       */
*/*      - INPARM REGISTER(R1)POINTS TO THE RECORDING PARAMETER LIST */
*/*        PASSED TO THE SOFTWARE RECORDING FACILITY                 */
*/*      - THE RECORDING PARAMETER LIST CONTAINS                     */
*/*        .A RECORD TYPE INDICATION(PROG CHEK,MACH CHEK, OR RESTART)*/
*/*        .NAME OF THE ASSOCIATED JOB                       @G17EP5W*/
*/*        .ERRORID INFORMATION                              @G17EP5W*/
*/*        .THE ADDRESS OF THE SDWA TO BE RECORDED                   */
*/*      - RECLEN REGISTER(R3) CONTAINS THE LENGTH OF THE DATA TO BE */
*/*        RECORDED(I.E.THE FIXED PORTION OF THE SDWA AND THE        */
*/*        VARIABLE PORTION OF THE SDWA SUPPLIED BY THE FRR          */
*/*      - SAVAREAP REGISTER(R13)POINTS TO THE REGISTER SAVE AREA TO */
*/*        BE USED BY THE SOFTWARE RECORDING FACILITY TO SAVE SRMS   */
*/*       REGISTERS                                                  */
*/*     NOTES                                                        */
*/*      - THE RECORDING PARAMETER LIST IS PART OF THE SDWA AND      */
*/*        CONTAINS THE RECORD TYPE AND THE ADDRESS OF THE SDWA      */
*/*      - REGS(R1,R13,R3) ARE THE INPUT REGS TO THE SOFTWARE        */
*/*        RECORDING FACILITY                                        */
*/*      - REGS(R14,R15) ARE LINKAGE REGISTERS TO THE SOFTWARE       */
*/*       RECORDING FACILITY                                         */
*/*  - THIS SEGMENT IS PART OF THE SRMDRCOV LPRR                     */
*/* ******************************************************************/
*                                                                  0422
*   DO;                                                            0422
*     SDWAVRA=DRCRDMSG;             /* PUT IEAVTRTS FAILURE MSG IN 0423
*                                      SDWA                          */
         L     @15,RT1WRTCA(,R7)                                   0423
         MVI   SDWAVRA+32(@15),C' '                                0423
         MVC   SDWAVRA+33(75,@15),SDWAVRA+32(@15)                  0423
         MVC   SDWAVRA(32,@15),DRCRDMSG                            0423
*     SDWAURAL=LENGTH(DRCRDMSG);    /* SET IN SDWA -LENGTH OF THIS 0424
*                                      MSG                           */
         MVI   SDWAURAL(@15),X'20'                                 0424
*     SDWAEBC=ON;                   /* DUMP VARIABLE RECORDING AREA
*                                      IN EBCDIC             @YM08142*/
         OI    SDWAEBC(@15),B'01000000'                            0425
*     RCRDINFO=R5;                  /* INITIALIZE THE RECORDING    0426
*                                      PARAMETER LIST WITH THE ADDR
*                                      OF THE SDWA TO BE RECORDED    */
         ST    R5,RCRDINFO(,@15)                                   0426
*     RFY                                                          0427
*       ASCB BASED(PSAAOLD);        /* ASCB ADDRESSABILTY    @G17EP5W*/
*     RFY                                                          0428
*       MODEBYTE BASED(ADDR(RT1WMODE));/* MODE INFORMATION@G17EP5W   */
*     IF((MODESRB=ON)×              /* IF SRB MODE OR        @G17EP5W*/
*         (PSAAOLD->ASCBASCB^=NASCB)) THEN/* INVALID PSAAOLD       0429
*                                      PTR@G17EP5W                   */
         TM    MODESRB+80(R7),B'00000010'                          0429
         BO    @RT00429                                            0429
         L     @15,PSAAOLD                                         0429
         CLC   ASCBASCB(4,@15),@CC02807                            0429
         BE    @RF00429                                            0429
@RT00429 DS    0H                                                  0430
*       RCRDNAME=FRRJNAME;          /* NO VALID JOB NAME     @G17EP5W*/
         L     @15,RT1WRTCA(,R7)                                   0430
         MVC   RCRDNAME(8,@15),FRRJNAME                            0430
*     ELSE                          /* ELSE ATTEMPT JOBNAME@G17EP5W  */
*       IF ASCBJBNI^=NULL THEN      /* IF INITIATED JOBNAME POINTER
*                                      NOT NULL THEN PUT     @G17EP5W*/
         B     @RC00429                                            0431
@RF00429 L     @15,PSAAOLD                                         0431
         L     @15,ASCBJBNI(,@15)                                  0431
         LTR   @15,@15                                             0431
         BZ    @RF00431                                            0431
*         RCRDNAME=ASCBJBNI->JOBNAME;/* JOBNAME FOR RECORD   @G17EP5W*/
         L     @11,RT1WRTCA(,R7)                                   0432
         MVC   RCRDNAME(8,@11),JOBNAME(@15)                        0432
*       ELSE                        /* OTHERWISE, CHECK      @G17EP5W*/
*         IF ASCBJBNS^=NULL THEN    /* LOGON JOBNAME PTR     @G17EP5W*/
         B     @RC00431                                            0433
@RF00431 L     @15,PSAAOLD                                         0433
         L     @15,ASCBJBNS(,@15)                                  0433
         LTR   @15,@15                                             0433
         BZ    @RF00433                                            0433
*           RCRDNAME=ASCBJBNS->JOBNAME;/* USE THIS JOBNAME   @G17EP5W*/
         L     @11,RT1WRTCA(,R7)                                   0434
         MVC   RCRDNAME(8,@11),JOBNAME(@15)                        0434
*         ELSE                      /* OTHERWISE SPECIFY     @G17EP5W*/
*           RCRDNAME=FRRJNAME;      /* DEFAULT CONSTANT      @YM05011*/
         B     @RC00433                                            0435
@RF00433 L     @15,RT1WRTCA(,R7)                                   0435
         MVC   RCRDNAME(8,@15),FRRJNAME                            0435
*     RCRDSEQ#=SDWASEQ#;            /* ERRORID SEQ NBR       @G17EP5W*/
@RC00433 DS    0H                                                  0436
@RC00431 DS    0H                                                  0436
@RC00429 L     @15,RT1WRTCA(,R7)                                   0436
         MVC   RCRDSEQ#(2,@15),SDWASEQ#(@15)                       0436
*     RCRDCPUI=SDWACPUI;            /* ERRORID CPU ID        @G17EP5W*/
         SLR   @11,@11                                             0437
         IC    @11,SDWACPUI(,@15)                                  0437
         STH   @11,RCRDCPUI(,@15)                                  0437
*     RCRDERTM=SDWAERTM;            /* ERRORID TIME STAMP    @G17EP5W*/
         MVC   RCRDERTM(4,@15),SDWAERTM(@15)                       0438
*     IF(SDWAFMID^=0)&              /* IF ERROR ASID^ZERO    @G17EP5W*/
*         (SDWAFMID^=INVLASID) THEN /* AND NOT INVALID       @G17EP5W*/
         LH    @11,SDWAFMID(,@15)                                  0439
         N     @11,@CF03408                                        0439
         LTR   @11,@11                                             0439
         BZ    @RF00439                                            0439
         CLC   SDWAFMID(2,@15),@CB02840                            0439
         BE    @RF00439                                            0439
*       RCRDASID=SDWAFMID;          /* USE IT IN ERRORID     @G17EP5W*/
         MVC   RCRDASID(2,@15),SDWAFMID(@15)                       0440
*     ELSE                          /* OTHERWISE,IF LOGREC   @G17EP5W*/
*       IF SDWAASID^=0 THEN         /* ASID CONTAINS VALUE   @G17EP5W*/
         B     @RC00439                                            0441
@RF00439 L     @15,RT1WRTCA(,R7)                                   0441
         LH    @11,SDWAASID(,@15)                                  0441
         N     @11,@CF03408                                        0441
         LTR   @11,@11                                             0441
         BZ    @RF00441                                            0441
*         RCRDASID=SDWAASID;        /* THEN USE IT           @G17EP5W*/
         MVC   RCRDASID(2,@15),SDWAASID(@15)                       0442
*       ELSE                        /* ELSE,IF PSAAOLD PTR   @G17EP5W*/
*         IF PSAAOLD->ASCBASCB=NASCB THEN/* IS VALID,THEN USE      0443
*                                                            @G17EP5W*/
         B     @RC00441                                            0443
@RF00441 L     @15,PSAAOLD                                         0443
         CLC   ASCBASCB(4,@15),@CC02807                            0443
         BNE   @RF00443                                            0443
*           RCRDASID=PSAAOLD->ASCBASID;/* CURRENT ASID       @G17EP5W*/
         L     @11,RT1WRTCA(,R7)                                   0444
         MVC   RCRDASID(2,@11),ASCBASID(@15)                       0444
*     IF SDWARKEY=ON THEN           /* IF THE ERROR TYPE IS THE    0445
*                                      RESTART KEY THEN SET THE    0445
*                                      RECORD TYPE FOR RESTART       */
@RF00443 DS    0H                                                  0445
@RC00441 DS    0H                                                  0445
@RC00439 L     @15,RT1WRTCA(,R7)                                   0445
         TM    SDWARKEY(@15),B'00100000'                           0445
         BNO   @RF00445                                            0445
*       RCRDTYPE=RTPRSTRT;                                         0446
         MVI   RCRDTYPE(@15),X'44'                                 0446
*     ELSE                                                         0447
*       ;                           /* IF NOT RESTART CHECK FOR    0447
*                                      ANOTHER ERROR TYPE            */
@RF00445 DS    0H                                                  0448
*     IF SDWAPCHK=ON×SDWATEXC=ON    /* IF THE ERROR TYPE IS DATERR OR*/
*       THEN                        /* PROGRAM CHECK THEN SET THIS 0448
*                                      RECORD TYPE FOR PROG CHECK    */
         L     @15,RT1WRTCA(,R7)                                   0448
         TM    SDWAPCHK(@15),B'01000010'                           0448
         BZ    @RF00448                                            0448
*       RCRDTYPE=RTPPCHEK;                                         0449
         MVI   RCRDTYPE(@15),X'42'                                 0449
*     ELSE                                                         0450
*       ;                           /* IF NOT RESTART OR PROG CHECK
*                                      THEN CHECK FOR MACHINE CHECK  */
@RF00448 DS    0H                                                  0451
*     IF SDWAMCHK=ON THEN           /* IF THE ERROR TYPE IS A MACHINE
*                                      CHECK THEN SET RECORD TYPE FOR
*                                      MACHINE CHECK                 */
         L     @15,RT1WRTCA(,R7)                                   0451
         TM    SDWAMCHK(@15),B'10000000'                           0451
         BNO   @RF00451                                            0451
*       RCRDTYPE=RTPMCHEK;                                         0452
         MVI   RCRDTYPE(@15),X'48'                                 0452
*     ELSE                                                         0453
*       ;                           /* IF THE ERROR TYPE IS NOT    0453
*                                      MACHINE CHECK DONT SET RECORD
*                                      TYPE FOR MACHINE CHECK        */
@RF00451 DS    0H                                                  0454
*     RFY                                                          0454
*      (R1,                         /* THESE REGISTERS MUST BE     0454
*                                      PRESERVE                      */
*       R13,                        /* ACROSS THE SOFTWARE RECORDING */
*       R3) RSTD;                   /* INTERFACE                     */
*     R1=ADDR(SDWARCPL);            /* REGISTER 1 WILL POINT TO THE
*                                      RECORDING PARAMETER LIST      */
         L     @15,RT1WRTCA(,R7)                                   0455
         LA    R1,SDWARCPL(,@15)                                   0455
*     RFY                                                          0456
*       FRRWA BASED(RT1WRTCA+LENGTH(SDWA)+LENGTH(SRMRGSV));/* THE REG
*                                      SAVE AREA TO BE USE BY THE  0456
*                                      SOFTWARE RECORDING FACILITY IS
*                                      ADDRESSED                     */
*     R13=ADDR(FRRWA);              /* REGISTER 13 POINTS TO THE SRM
*                                      REGISTER SAVE AREA TO BE USED
*                                      BY THE SOFTWARE RECORDING   0457
*                                      FACILITY                      */
         LA    R13,584                                             0457
         ALR   R13,@15                                             0457
*     R3=LENGTH(SDWA)-LENGTH(SDWAVRA)+SDWAURAL;/* REGISTER 3 CONTAINS
*                                      THE LENGTH OF DATA TO BE    0458
*                                      RECORDED                      */
         LA    R3,404                                              0458
         SLR   @11,@11                                             0458
         IC    @11,SDWAURAL(,@15)                                  0458
         ALR   R3,@11                                              0458
*   END;                                                           0459
*   R4=R14;                         /* SAVE RETURN ADDRESS SINCE IT
*                                      WILL BE DESTROYED BY THE    0460
*                                      RECORD MACRO                  */
         LR    R4,R14                                              0460
*/* ******************************************************************/
*/* THIS SEGMENT IS PART OF THE LPRR SRMDRCOV WHICH INVOKES THE      */
*/* SOFTWARE RECORDING FACILITY TO THE RECORD THE SDWA DESCRIBING    */
*/* THE IEAVTRTS FAILURE                                             */
*/* INPUTS----                                                       */
*/*  - INPARM REGISTER(R1) POINTS TO THE RECORDING PARAMETER LIST    */
*/*  - RECLEN REGISTER(R3) CONTAINS THE LENGTH OF THE INFO TO BE     */
*/*    RECORDED                                                      */
*/*  - SAVAREAP REGISTER(R13) POINTS TO REGISTER SAVE TO BE USED BY  */
*/*    THE RECORDING FACILITY TO SAVE THIS LPRRS REGISTERS           */
*/* OUTPUT----                                                       */
*/*  - INPARM,SAVAREAP,RECLEN---UNPREDICTABLE                        */
*/*  - THE SDWA IS RECORDED TO SYS1.LOGREC                           */
*/* ******************************************************************/
*                                                                  0461
*   GENERATE CODE                   /* INVOKE THE SOFTWARE RECORDING
*                                      FACILITY                      */
*       ;                                                          0461
         RECORD TYPE=LOGREC,PARMADR=(R1),LENGTH=(R3),RCVRY=SETFRR,     C
               HEADER=YES,JOBNAME=YES,ERRORID=YES              @YM05011
*                                                              @G17EP5W
*   RFY                                                            0462
*    (R1,                                                          0462
*     R13,                                                         0462
*     R3) UNRSTD;                                                  0462
*   R14=R4;                         /* RESTORE THE RETURN ADDR       */
         LR    R14,R4                                              0463
*   END RCRDRTCA;                                                  0464
@EL00003 DS    0H                                                  0464
@EF00003 DS    0H                                                  0464
@ER00003 BR    @14                                                 0464
*FREEDCEL:                                                         0465
*   ENTRY;                                                         0465
*                                                                  0465
@EP00465 DS    0H                                                  0466
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THE FREEDCEL SEGMENT IS TO FREECELL ANY EEDS   */
*   /* ACQUIRED DURING RTM1'S PROCESSING THAT ARE NO LONGER NEEDED.  */
*   /* THIS ROUTINE IS CALLED FROM SEVERAL PLACES IN RTM1'S          */
*   /* PROCESSING. THE VALUES IN REGISTERS R0-R4 ARE DESTROYED BY THE*/
*   /* PROCESSING IN THIS ROUTINE. THE VALUES IN REGISTERS R5, R7,   */
*   /* R12, AND R13 ARE PRESERVED FOR THE CALLER. REGISTER R8 IS     */
*   /* ASSUMED AVAILABLE FOR USE BY THIS ROUTINE. INPUT TO THIS      */
*   /* SEGMENT IS THE EEDCHAIN REGISTER (R6). OUTPUT IS EEDS RETURNED*/
*   /* TO THEIR QUICK CELL POOL.                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0466
*   RFY                                                            0466
*    (R5,                                                          0466
*     R7,                                                          0466
*     R9,                                                          0466
*     R12,                                                         0466
*     R13) RSTD;                    /* PRESERVED FOR CALLER          */
*   RFY                                                            0467
*    (R8,                                                          0467
*     R14) RSTD;                    /* GET REG FOR SAVING RETN ADDR  */
*   R8=R14;                         /* SAVE THE RETURN ADDRESS       */
         LR    R8,R14                                              0468
*   RFY                                                            0469
*     R14 UNRSTD;                   /* RELEASE REGISTER R14          */
*   RFY                                                            0470
*     R1 RSTD;                      /* GET CONTROL OF QUICKCELL PARM
*                                      REG - FOR CELL ADDRESS        */
*   RFY                                                            0471
*     R0 RSTD;                      /* GET CONTROL OF QUICKCELL PARM
*                                      REG - FOR CELLPOOL ID         */
*   RFY                                                            0472
*     R6 RSTD;                      /* PTR TO EEDS TO BE FREED       */
*   RFY                                                            0473
*    (R2,                                                          0473
*     R3,                                                          0473
*     R4) RSTD;                     /* REGS CLOBBERED BY QUICKCELL   */
*   R0=RT1CPOOL;                    /* PUT POOLID IN PARM REGISTER   */
*                                                                  0474
         L     R0,RT1CPOOL                                         0474
*   /*****************************************************************/
*   /*                                                               */
*   /* ESTABLISH LOOP TO FREE CHAIN OF EEDS.                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0475
*   DO WHILE R6>EEDNULL;            /* DO FREECELL LOOP UNTIL ALL  0475
*                                      EEDS ARE PROCESSED            */
         B     @DE00475                                            0475
@DL00475 DS    0H                                                  0476
*     R1=R6;                        /* PUT CELL ADDR IN PARM REG     */
         LR    R1,R6                                               0476
*     R6=R1->EEDFWRDP;              /* PT TO NEXT CELL TO BE FREED   */
         L     R6,EEDFWRDP(,R1)                                    0477
*     GEN(FREECELL CPID=(0),CELL=(1),BRANCH=YES,SAVE=NO);/* RETURN 0478
*                                      CELL TO CELLPOOL              */
         FREECELL CPID=(0),CELL=(1),BRANCH=YES,SAVE=NO
*   END;                            /* END OF FREECELL LOOP          */
@DE00475 C     R6,@CF00079                                         0479
         BH    @DL00475                                            0479
*   RFY                                                            0480
*     R1 UNRSTD;                    /* RELEASE CONTROL OF QUICKCELL
*                                      PARM REG                      */
*   RFY                                                            0481
*     R0 UNRSTD;                    /* RELEASE CONTROL OF QUICKCELL
*                                      PARM REG                      */
*   RFY                                                            0482
*     R6 UNRSTD;                    /* RELEASE REG POINTING TO CELLS
*                                      TO BE FREED                   */
*   RFY                                                            0483
*    (R2,                                                          0483
*     R3,                                                          0483
*     R4) UNRSTD;                   /* REGS CLOBBERED BY QUICKCELL   */
*   RFY                                                            0484
*    (R14,                                                         0484
*     R1) RSTD;                     /* GET REGS TO RETURN TO CALLER  */
*   R14=R8;                         /* RESTORE RETURN ADDRESS        */
         LR    R14,R8                                              0485
*   R1=ADDR(RTMSTART);              /* RESTORE VALUE OF RTM1'S BASE  */
         L     R1,@CV02894                                         0486
*   GEN(LR    R9,R1);               /* RESTORE RTM1'S BASE REG       */
         LR    R9,R1
*   GEN(BR    R14);                 /* RETURN TO THE CALLER          */
         BR    R14
*   RFY                                                            0489
*    (R8,                                                          0489
*     R14,                                                         0489
*     R1) UNRSTD;                   /* RELEASE RETURN REGS           */
*   RFY                                                            0490
*    (R5,                                                          0490
*     R7,                                                          0490
*     R9,                                                          0490
*     R12,                                                         0490
*     R13) UNRSTD;                  /* REGS PRESERVED FOR CALLER - 0490
*                                      END OF FREEDCEL SEGMENT       */
*RTMRSFRR:                                                         0491
*   ENTRY;                                                         0491
*                                                                  0491
@EP00491 DS    0H                                                  0492
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THE RTMRSFRR SEGMENT IS TO PROVIDE RECOVERY FOR*/
*   /* RTM1'S PROCESSING IF A RECURSIVE ERROR HAD OCCURRED DURING AN */
*   /* ATTEMPT BY RTM1 TO PERFORM ITS RESCHEDULE FUNCTION. THE       */
*   /* RECOVERY SCHEME IS AS FOLLOWS: IN A FEW INSTANCES OF          */
*   /* NONCRITICAL RTM1 PROCESSING, NAMELY EED PROCESSING, RETRY WILL*/
*   /* BE ATTEMPTED IF A RECURSIVE ERROR OCCURS. OTHERWISE, RTMRSFRR */
*   /* WILL SIMPLY ATTEMPT TO CLEAN UP RESOURCES ACQUIRED BY RTM1,   */
*   /* SUCH AS EEDS, AND ALSO TO CLEAN UP TRACES OF UNFINISHED RTM1  */
*   /* PROCESSING, SUCH AS INCOMPLETE TASK TERMINATION. INPUT TO THIS*/
*   /* SEGMENT IS AS FOLLOWS: FRRWAREG REGISTER (R0) - POINTS TO A   */
*   /* 200 BYTE WORK AREA AVAILABLE FOR THE FRR'S USE. RTCAPTR       */
*   /* REGISTER (R1) - POINTS TO THE SDWA(RTCA) WHICH CONTAINS       */
*   /* INFORMATION ABOUT THE ERROR. RETNREG REGISTER (R14) - CONTAINS*/
*   /* THE RETURN ADDRESS TO IEAVTRTS, THE SYSTEM RECOVERY MANAGER.  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0492
*   RFY                                                            0492
*    (R0,                           /* ON ENTRY, PTR TO 200 BYTE WA  */
*     R1,                           /* ON ENTRY, PTR TO SDWA (RTCA)  */
*     R5,                           /* RETURN ADDR TO RTS - SAVED ON
*                                      ENTRY                         */
*     R7,                           /* PTR TO THIS FRR'S PARM AREA   */
*     R13,                          /* PTR TO PREVIOUS FRR'S PARM  0492
*                                      AREA - PREVIOUS FRR IS THE  0492
*                                      SLIHFRR IF ORIGINAL ENTRY TO
*                                      RTM1 HAD BEEN IN SLIH MODE, IT
*                                      IS RT1'S FRR IF ORIGINAL ENTRY
*                                      HAD BEEN IN SERVICE ROUTINE 0492
*                                      MODE.                         */
*     R8,                           /* PTR TO 200 BYTE WA -HERE SINCE
*                                      THE VALUE IN R0 IS DESTROYED  */
*     R14) RSTD;                    /* RETURN ADDR TO RTS ON ENTRY   */
*   RFY                                                            0493
*     FRRS BASED(PSACSTK);          /* BASE FRRS ON CURRENT STACK    */
*   R5=R14;                         /* SAVE RETURN ADDRESS TO RTS    */
         LR    R5,R14                                              0494
*   R8=R0;                          /* SAVE PTR TO 200 BYTE WA       */
         LR    R8,R0                                               0495
*   RFY                                                            0496
*    (R0,                                                          0496
*     R14) UNRSTD;                  /* FREE UP SAVED REGISTERS       */
*   RFY                                                            0497
*     FRRWORKA BASED(R8);                                          0497
*   RFY                                                            0498
*     SDWA BASED(R1);               /* USED SDWA PASSED TO FRR       */
*   R7=SDWAPARM;                    /* LOCATE FRR'S PARM AREA        */
         L     R7,SDWAPARM(,R1)                                    0499
*   RFY                                                            0500
*     RT1TRACK BASED(R7);                                          0500
*   R13=R7-FRRSELEN;                /* LOCATE PREVIOUS FRR'S PARM  0501
*                                      AREA                          */
         LR    R13,R7                                              0501
         L     @11,PSACSTK                                         0501
         SL    R13,FRRSELEN(,@11)                                  0501
*   IF SDWATEXC='0'B&               /* IF NEW ERROR IS NOT A DATERR  */
*       SDWARKEY='0'B&              /* AND IS NOT A RESTART ERROR    */
*       RT1TLPN<=RESRTYHI&          /* AND THE ORIGINAL ERROR IS     */
*       RT1TLPN>=RESRTYLO THEN      /* RETRYABLE                     */
         TM    SDWATEXC(R1),B'00100010'                            0502
         BNZ   @RF00502                                            0502
         CLI   RT1TLPN(R7),93                                      0502
         BH    @RF00502                                            0502
         CLI   RT1TLPN(R7),90                                      0502
         BL    @RF00502                                            0502
*     DO;                           /* SET UP THE RETRY INTERFACE    */
*       REGID=ALLREGS;              /* INDICATE ALL REGS ARE TO BE 0504
*                                      PRIMED FOR RETRY              */
         MVC   REGID(2,R8),@CB02840                                0504
*       RTYREGS=''B;                /* INITIALIZE RETRY REGS TO 0    */
         XC    RTYREGS(64,R8),RTYREGS(R8)                          0505
*       IF R13->RT1TREGS(THREE)=NULL THEN/* IF NO EEDS HAVE BEEN   0506
*                                      OBTAINED                      */
         L     @12,RT1TREGS+8(,R13)                                0506
         LTR   @12,@12                                             0506
         BNZ   @RF00506                                            0506
*         R13->RT1TREGS(THREE)=EEDNULL;/* PLACE EEDNULL INDICATOR IN
*                                      FRR PARM AREA                 */
         MVC   RT1TREGS+8(4,R13),@CF00079                          0507
*       RTYBLCK1=R7->FRRREGS1;      /* MOVE R0-R4 VALUES INTO RETRY
*                                      BLOCK                         */
@RF00506 MVC   RTYBLCK1(20,R8),FRRREGS1(R7)                        0508
*       RTYBLCK2=R13->FRRREGS2;     /* MOVE R5-R8 VALUES INTO RETRY
*                                      BLOCK                         */
         MVC   RTYBLCK2(16,R8),FRRREGS2(R13)                       0509
*       RTYREG9=ADDR(RTMSTART);     /* RE-ESTABLISH R9 - RTM1'S BASE
*                                      REGISTER                      */
         L     @12,@CV02894                                        0510
         ST    @12,RTYREG9(,R8)                                    0510
*       RTYREG12=R13;               /* MOVE R12 VALUE INTO RETRY   0511
*                                      BLOCK                         */
         ST    R13,RTYREG12(,R8)                                   0511
*       RTYREG13=R13->RT1TREGS(ONE);/* MOVE R13 VALUE INTO RETRY   0512
*                                      BLOCK                         */
         L     @12,RT1TREGS(,R13)                                  0512
         ST    @12,RTYREG13(,R8)                                   0512
*       RFY                                                        0513
*         R2 RSTD;                  /* GET REG FOR INDEX TO RETRY  0513
*                                      ADDRESS                       */
*       R2=RT1TLPN-RESRTYLO+ONE;    /* CALC INDEX TO RETRY ADDRESS   */
         SLR   R2,R2                                               0514
         IC    R2,RT1TLPN(,R7)                                     0514
         AL    R2,@CF03392                                         0514
*       RFY                                                        0515
*         RTRYPTR BASED(RTRYLABL(R2));                             0515
*       DO;                         /* SETRP RETADDR(RTRYPTR)RETREGS(
*                                      YES)RUB(REGID)RC(4)RECORD(YES)
*                                      RECPARM(RESCHID)              */
*         RESPECIFY                                                0517
*          (GPR00P,                                                0517
*           GPR01P,                                                0517
*           GPR14P,                                                0517
*           GPR15P) RSTD;                                          0517
*         GPR01P->SDWARCDE=4;       /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(GPR01P),X'04'                              0518
*         GPR01P->SDWARTYA=ADDR(RTRYPTR);/* SAVE RETRY ADDRESS       */
         LR    @12,R2                                              0519
         SLA   @12,2                                               0519
         L     @12,RTRYLABL-4(@12)                                 0519
         ST    @12,SDWARTYA(,GPR01P)                               0519
*         GPR01P->SDWARCRD='1'B;    /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0520
*         GPR15P=ADDR(RESCHID);     /* ACCESS RECORD PARAMETER LIST  */
         LA    GPR15P,RESCHID                                      0521
*         GPR01P->SDWARECP=GPR15P->I256C(1:24);/* COPY RECORD      0522
*                                      PARAMETERS                    */
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0522
*         GPR01P->SDWAUPRG='1'B;    /* TURN ON RETREGS INDICATOR     */
         OI    SDWAUPRG(GPR01P),B'00001000'                        0523
*         GPR15P=ADDR(REGID);       /* GET PTR TO REG UPDATE BLOCK   */
         LA    GPR15P,REGID(,R8)                                   0524
*         GPR00P=GPR15P->I015F;     /* ACCESS REGISTER BIT PATTERN   */
         LH    GPR00P,I015F(,GPR15P)                               0525
*         GPR15P=GPR15P+2;          /* CREATE PTR TO USER REG VALUES */
         AL    GPR15P,@CF00110                                     0526
*         GPR14P=ADDR(GPR01P->SDWASRSV);/* CREATE PTR TO SDWA SAVE 0527
*                                      AREA                          */
         LA    GPR14P,SDWASRSV(,GPR01P)                            0527
*         GEN(SLL   0,16);          /* SHIFT BIT PATTERN TO HIGH   0528
*                                      ORDER                         */
         SLL   0,16
*R0002:                                                            0529
*         GEN FLOWS(I0002);                                        0529
R0002    DS    0H                                                  0529
         ALR   0,0                    SHIFT BIT TO SIGN POSITION
         BC    12,I0002               BRANCH IF BIT NOT ON
         MVC   0(4,14),0(15)          MODIFY REGISTER IN SDWA
         LA    15,4(15)               UPDATE POINTER
*I0002:                                                            0530
*         GENERATE FLOWS(R0002);                                   0530
I0002    DS    0H                                                  0530
         LA    14,4(14)               UPDATE PTR IN SDWA
         BC    5,R0002                TEST ALR CONDITION CODE TO TEST
*                                     IF ALL BITS EXHAUSTED
*         RESPECIFY                                                0531
*          (GPR00P,                                                0531
*           GPR01P,                                                0531
*           GPR14P,                                                0531
*           GPR15P) UNRSTD;                                        0531
*       END;                                                       0532
*       RFY                                                        0533
*         R2 UNRSTD;                /* RELEASE REG USED FOR INDEX    */
*     END;                          /* END OF RETRY INTERFACE        */
*   ELSE                            /* IS ERROR IS NOT RETRYABLE, SET
*                                      UP TO PERCOLATE               */
*     DO;                           /* PERCOLATION PATH              */
         B     @RC00502                                            0535
@RF00502 DS    0H                                                  0536
*       RFY                                                        0536
*         R6 RSTD;                  /* GET REG FOR EEDS TO BE FREED  */
*       R6=R13->RT1TREGS(THREE);    /* LOCATE PTR TO EEDS ACQUIRED 0537
*                                      FOR ORIGINAL ERROR            */
         L     R6,RT1TREGS+8(,R13)                                 0537
*       IF SDWATEXC^='1'B THEN      /* IF SECOND ERROR WAS NOT A   0538
*                                      DATERR                        */
         TM    SDWATEXC(R1),B'00000010'                            0538
         BO    @RF00538                                            0538
*         DO;                       /* SEE IF FURTHER CLEAN UP IS  0539
*                                      NECESSARY                     */
*           RFY                                                    0540
*             R2 RSTD;              /* GET REG FOR RECOVERY INDEX    */
*           R2=RT1TLPN-RT1RESLO+ONE;/* CALC INDEX TO RECOVERY ACTION */
         SLR   R2,R2                                               0541
         IC    R2,RT1TLPN(,R7)                                     0541
         AL    R2,@CF03392                                         0541
*           GO TO FRRRECOV(R2);     /* GO TAKE PROPER RECOVERY ACTION*/
         LR    @12,R2                                              0542
         SLA   @12,2                                               0542
         L     @12,FRRRECOV-4(@12)                                 0542
         BR    @12                                                 0542
*           RFY                                                    0543
*             R2 UNRSTD;            /* RELEASE REGISTER              */
*RVRESCHD:                          /* RECOVERY ACTION FOR INITIAL 0544
*                                      RESCHEDULE PROCESSING         */
*           GO TO CWRCOVRY;         /* CONTINUE WITH RECOVERY        */
*RVNOSRB:                           /* RECOVERY ACTION FOR XMABTRM 0545
*                                      FUNCTION PRIOR TO OBTAINING AN
*                                      SRB                           */
*           GO TO CWRCOVRY;         /* CONTINUE WITH RECOVERY        */
*RVFRESRB:                          /* RECOVERY ACTION FOR XMABTRM 0546
*                                      FUNCTION AFTER AN SRB WAS   0546
*                                      ACQUIRED                      */
*           RFY                                                    0546
*             R2 RSTD;              /* GET REG TO SAVE PTR TO EEDS TO
*                                      BE FREED                      */
RVFRESRB DS    0H                                                  0547
*           R2=R6;                  /* SAVE PTR TO EEDS TO BE FREED  */
         LR    R2,R6                                               0547
*           R6=R13->RT1TREGS(FOUR); /* PLACE SRB EED AT THE HEAD OF
*                                      THE CHAIN OF EEDS TO BE FREED */
         L     R6,RT1TREGS+12(,R13)                                0548
*           R6->EEDFWRDP=R2;        /* CHAIN OTHER EEDS TO THIS EED  */
         ST    R2,EEDFWRDP(,R6)                                    0549
*           RFY                                                    0550
*             R2 UNRSTD;            /* RELEASE REGISTER              */
*           GO TO CWRCOVRY;         /* CONTINUE WITH RECOVERY        */
         B     CWRCOVRY                                            0551
*RVSRBCMP:                          /* RECOVERY ACTION FOR XMABTRM 0552
*                                      FUNCTION AFTER SRB IS       0552
*                                      SCHEDULED                     */
*           GO TO CWRCOVRY;         /* CONTINUE WITH RECOVERY        */
*RVRESRT2:                          /* RECOVERY ACTION FOR SCHDRTM2
*                                      FUNCTION BEFORE TCB IS      0553
*                                      LOGICALLY TERMINATED          */
*           RFY                                                    0553
*             R3 RSTD;              /* GET REG FOR TCB POINTER       */
RVRESRT2 DS    0H                                                  0554
*           R3=RT1TREGS(FOUR);      /* POINT TO TCB RTM1 WAS TRYING
*                                      TO TERMINATE                  */
         L     R3,RT1TREGS+12(,R7)                                 0554
*           R3->TCBABTRM='0'B;      /* ZERO THE TCBABTRM BIT         */
*           R3->TCBABGM='0'B;       /* ZERO THE TCBABGM BIT          */
         NI    TCBABTRM(R3),B'11001111'                            0556
*           R3->TCBFX='0'B;         /* ZERO THE TCBFX BIT            */
         NI    TCBFX(R3),B'11111110'                               0557
*           RFY                                                    0558
*             R3 UNRSTD;            /* RELEASE REG FOR TCB POINTER   */
*           GO TO CWRCOVRY;         /* CONTINUE WITH RECOVERY        */
         B     CWRCOVRY                                            0559
*RVTCBTRM:                          /* RECOVERY ACTION FOR SCHDRTM2
*                                      FUNCTION AFTER TCB IS       0560
*                                      LOGICALLY TERMINATED          */
*           GO TO CWRCOVRY;         /* CONTINUE WITH RECOVERY        */
*RVRESRT1:                          /* RECOVERY ACTION FOR SCHDRTM1
*                                      FUNCTION                      */
*           GO TO CWRCOVRY;         /* CONTINUE WITH RECOVERY        */
*RVMEMTRM:                          /* RECOVERY ACTION FOR MEMTERM 0562
*                                      FUNCTION BEFORE ASCB IS PLACED
*                                      ON MEMTERM QUEUE              */
*           RFY                                                    0562
*             R2 RSTD;              /* GET REG FOR ASCB POINTER      */
RVMEMTRM DS    0H                                                  0563
*           R2=R13->RT1TREGS(FIVE); /* POINT TO ASCB RTM1 WAS TRYING
*                                      TO TERMINATE                  */
         L     R2,RT1TREGS+16(,R13)                                0563
*           R2->ASCBTERM='0'B;      /* ZERO THE ASCBTERM BIT         */
         NI    ASCBTERM(R2),B'11101111'                            0564
*           RFY                                                    0565
*             R2 UNRSTD;            /* RELEASE REG FOR ASCB POINTER  */
*           GO TO CWRCOVRY;         /* CONTINUE WITH RECOVERY        */
         B     CWRCOVRY                                            0566
*RVMEMCMP:                          /* RECOVERY ACTION FOR MEMTERM 0567
*                                      FUNCTION AFTER MEMTERM WAS  0567
*                                      COMPLETE                      */
*           GO TO CWRCOVRY;         /* CONTINUE WITH RECOVERY        */
*         END;                      /* END OF NON-DATERR CLEAN UP    */
*CWRCOVRY:                          /* COMMON RECOVERY FOR RESCHEDL
*                                      PERCOLATION PROCESSING        */
*       IF R6>EEDNULL THEN          /* IF EEDS NEED TO BE FREED      */
@RF00538 DS    0H                                                  0569
CWRCOVRY C     R6,@CF00079                                         0569
         BNH   @RF00569                                            0569
*         DO;                       /* PERFORM EED FREEING           */
*           RFY                                                    0571
*             R12 RSTD;             /* GET REG FOR RTCA ADDRESS      */
*           R12=R1;                 /* SAVE R1 VALUE - DESTROYED BY
*                                      FREECELL                      */
         LR    R12,R1                                              0572
*           RFY                                                    0573
*            (R9,                                                  0573
*             R11) RSTD;                                           0573
*           R11=R9;                 /* SAVE THE VALUE OF R9 SINCE IT
*                                      IS DESTROYED BY FREEDCEL      */
         LR    R11,R9                                              0574
*           CALL FREEDCEL;          /* CALL FREECELL ROUTINE         */
         L     @15,@CA03293                                        0575
         BALR  @14,@15                                             0575
*           R9=R11;                 /* RESTORE THE VALUE OF R9       */
         LR    R9,R11                                              0576
*           RFY                                                    0577
*            (R11,                                                 0577
*             R9) UNRSTD;                                          0577
*           R1=R12;                 /* RESTORE R1 - RTCA ADDRESS     */
         LR    R1,R12                                              0578
*           RFY                                                    0579
*            (R12,                                                 0579
*             R6) UNRSTD;           /* RELEASE REGS                  */
*         END;                      /* END OF FREECELL PROCESSING    */
*       DO;                         /* SETRP RECORD(YES)RECPARM(RESCH
*                                      ID)RC(0)                      */
@RF00569 DS    0H                                                  0582
*         RESPECIFY                                                0582
*          (GPR00P,                                                0582
*           GPR01P,                                                0582
*           GPR14P,                                                0582
*           GPR15P) RSTD;                                          0582
*         GPR01P->SDWARCDE=0;       /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0583
*         GPR01P->SDWARCRD='1'B;    /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0584
*         GPR15P=ADDR(RESCHID);     /* ACCESS RECORD PARAMETER LIST  */
         LA    GPR15P,RESCHID                                      0585
*         GPR01P->SDWARECP=GPR15P->I256C(1:24);/* COPY RECORD      0586
*                                      PARAMETERS                    */
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0586
*         RESPECIFY                                                0587
*          (GPR00P,                                                0587
*           GPR01P,                                                0587
*           GPR14P,                                                0587
*           GPR15P) UNRSTD;                                        0587
*       END;                                                       0588
*     END;                          /* END OF PERCOLATION PROCESSNG  */
*   RFY                                                            0590
*     R14 RSTD;                     /* GET REG TO RETURN TO RTS      */
@RC00502 DS    0H                                                  0591
*   R14=R5;                         /* RESTORE RETURN ADDRESS        */
         LR    R14,R5                                              0591
*   RFY                                                            0592
*    (R1,                                                          0592
*     R5,                                                          0592
*     R7,                                                          0592
*     R13,                                                         0592
*     R8) UNRSTD;                   /* FREE UP REGS USED BY FRR      */
*   RETURN;                         /* RETURN TO RTS                 */
         B     @EL00001                                            0593
*   RFY                                                            0594
*     R14 UNRSTD;                   /* RELEASE REG FOR RETURN ADDR -
*                                      END OF RTMRSFRR SEGMENT       */
*RECVRRTM:                                                         0595
*   ENTRY;                                                         0595
*                                                                  0595
@EP00595 DS    0H                                                  0596
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THE RECVRRTM SEGMENT IS TO PROCESS AN          */
*   /* UNANTICIPATED RECURSION INTO RTM1. THIS TAKES PLACE WHEN AN   */
*   /* ERROR OCCURS IN A SECTION OF RTM1 NOT PROTECTED BY AN FRR.    */
*   /* THIS SEGMENT WILL ROUTE CONTROL TO A LOGICAL PHASE RECOVERY   */
*   /* ROUTINE IF ONE IS APPLICABLE TO THE PHASE IN RTM1 AT WHICH THE*/
*   /* RECURSIVE ERROR OCCURRED. IF NO LOGICAL PHASE RECOVERY ROUTINE*/
*   /* HAS BEEN SPECIFIED, THEN ABORT PROCESSING IS PERFORMED. INPUT */
*   /* TO THIS SEGMENT IS AS FOLLOWS: FUNCTION REGISTER (R0) -       */
*   /* INDICATES TYPE OF ENTRY INTO RTM1 FOR THE NEW ERROR. STAKPTR  */
*   /* REGISTER (R7) - IN SLIH MODE, CONTAINS A PTR TO THE CURRENT   */
*   /* STACK. TRACKPTR REGISTER (R12) - IN SLIH MODE, CONTAINS A PTR */
*   /* TO THE TRACKING AREA IN THE RTM1WA (WHICH STILL CONTAINS      */
*   /* INFORMATION ABOUT THE ORIGINAL ERROR). THE FOLLOWING REGISTERS*/
*   /* MAY BE DEFINED - DEPENDING ON THE TYPE OF ENTRY TO RTM1 - AND */
*   /* SHOULD BE PRESERVED IF CONTROL IS TO BE RETURNED TO RTM1 FOR  */
*   /* CONTINUED PROCESSING OF THE NEW ERROR: R1-R6,R13. RTM1'S BASE */
*   /* REGISTER IS R9 AND WOULD ALSO HAVE TO BE RESTORED.            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0596
*   RFY                                                            0596
*    (R0,                           /* TYPE OF ENTRY INTO RTM1       */
*     R1,                           /* PRESERVED FOR CALLER          */
*     R2,                           /* PRESERVED FOR CALLER          */
*     R3,                           /* PRESERVED FOR CALLER          */
*     R4,                           /* PRESERVED FOR CALLER          */
*     R5,                           /* PRESERVED FOR CALLER          */
*     R6,                           /* PRESERVED FOR CALLER          */
*     R7,                           /* PTR TO CURRENT STACK          */
*     R12,                          /* PTR TO TRACKING AREA IN WA    */
*     R13) RSTD;                    /* PRESERVED FOR CALLER          */
*   RFY                                                            0597
*     FRRS BASED(R7);               /* USE REGISTER BASE FOR CURRENT
*                                      STACK                         */
*   RFY                                                            0598
*     RT1TRACK BASED(R12);          /* USE REGISTER BASE FOR TRACK 0598
*                                      AREA IN RTM1WA                */
*   IF RT1TLPID^=NULL THEN          /* IF THE LPID IS NOT NULL (I.E.
*                                      AN LPRR SHOULD BE DEFINED FOR
*                                      THE LPID)                     */
         CLI   RT1TLPID(R12),0                                     0599
         BE    @RF00599                                            0599
*     DO;                           /* THEN ROUTE TO THIS LPRR       */
*       RFY                                                        0601
*         R8 RSTD;                  /* GET CONTROL OF REG TO POINT TO
*                                      THE LPRR                      */
*       R8=RT1TLPID;                /* SAVE LPID VALUE IN REG        */
         SLR   R8,R8                                               0602
         IC    R8,RT1TLPID(,R12)                                   0602
*       RT1TLPID=NULL;              /* SET THE LPID TO INDICATE ABORT
*                                      PROCESSING                    */
         MVI   RT1TLPID(R12),X'00'                                 0603
*       GO TO LPRRADDR(R8);         /* GO TO THE SPECIFIED LPRR TO 0604
*                                      COMPLETE RECOVERY PROCESSING
*                                      AND RETURN TO RTM1            */
         LR    @11,R8                                              0604
         SLA   @11,2                                               0604
         L     @11,LPRRADDR-4(@11)                                 0604
         BR    @11                                                 0604
*       RFY                                                        0605
*         R8 UNRSTD;                /* RELEASE REG USED TO POINT TO
*                                      THE LPRR                      */
*     END;                          /* END OF LPRR ROUTING           */
*   ELSE                            /* IF THE LPID IS NULL           */
*                                                                  0607
*     /***************************************************************/
*     /*                                                             */
*     /* THE PURPOSE OF THE ABORT SEGMENT IS TO TERMINATE RTM1'S     */
*     /* PROCESSING OF AN ERROR IF, DURING SOME VITAL STAGE OF THIS  */
*     /* PROCESSING, RTM1 ITSELF SUFFERS AN ERROR. THE TECHNIQUE IS  */
*     /* TO ATTEMPT TO REMOVE ALL TRACES OF THE ORIGINAL ERROR       */
*     /* SITUATION FROM THE CPU AND TO ENTER THE DISPATCHER. IT      */
*     /* SHOULD BE NOTED THAT IF A FURTHER ERROR OCCURS DURING ABORT */
*     /* PROCESSING, THE POTENTIAL FOR A CLOSED, DISABLED,           */
*     /* UNRECOVERABLE LOOP EXISTS. THIS SEGMENT RECEIVES NO INPUT   */
*     /* FROM AND PROVIDES NO OUTPUT TO SUCCEEDING SEGMENTS OF RTM1. */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0607
*     DO;                           /* START OF ABORT SEGMENT        */
@RF00599 DS    0H                                                  0608
*       RFY                                                        0608
*         FRRS BASED(PSACSTK);      /* BASE CURRENT STACK ON VALUE OF
*                                      PSACSTK                       */
*       RFY                                                        0609
*         RT1TRACK BASED(ADDR(RT1WLPTA));/* USE TRACKING AREA IN   0609
*                                      RTM1WA OF CURRENT STACK       */
*       RFY                                                        0610
*        (R8,                                                      0610
*         R14,                                                     0610
*         R15) RSTD;                /* GET REGS FOR USE IN PURGING 0610
*                                      RECOVERY STACKS               */
*       DO R8=SSTAK1 TO DIM(PSARSVT) BY SSTAKINC;/* SET UP LOOP TO 0611
*                                      PURGE ALL SUPER STACKS        */
         LA    R8,3                                                0611
@DL00611 DS    0H                                                  0612
*         PSACSTK=PSARSVT(R8);      /* MAKE EACH STACK TO BE PURGED
*                                      THE CURRENT STACK             */
         LR    @11,R8                                              0612
         SLA   @11,2                                               0612
         L     @11,PSARSVT-4(@11)                                  0612
         ST    @11,PSACSTK                                         0612
*         GEN(SETFRR P,WRKREGS=(R14,R15));/* PURGE THE STAK          */
         SETFRR P,WRKREGS=(R14,R15)
*         RT1TLPN=NULL;             /* CLEAR RTM1'S RECURSION      0614
*                                      INDICATOR IN EACH STACK       */
         L     @11,PSACSTK                                         0614
         MVI   RT1TLPN+16(@11),X'00'                               0614
*       END;                        /* END OF LOOP TO CLEAN UP SUPER
*                                      STACKS                        */
         AL    R8,@CF00110                                         0615
         C     R8,@CF00200                                         0615
         BNH   @DL00611                                            0615
*       PSACSTK=PSANSTK;            /* MAKE THE NORMAL STAK CURRENT  */
         L     @11,PSANSTK                                         0616
         ST    @11,PSACSTK                                         0616
*       GEN(SETFRR P,WRKREGS=(R14,R15));/* PURGE THE STACK           */
         SETFRR P,WRKREGS=(R14,R15)
*       RT1TLPN=NULL;               /* ZERO RTM1'S RECURSION INDCTR  */
         L     @11,PSACSTK                                         0618
         MVI   RT1TLPN+16(@11),X'00'                               0618
*       RFY                                                        0619
*        (R8,                                                      0619
*         R14,                                                     0619
*         R15) UNRSTD;              /* RELEASE REGS USED TO PURGE  0619
*                                      STACKS                        */
*       RFY                                                        0620
*         R15 RSTD;                 /* GET REG FOR SETLOCK TEST RC   */
*       GEN(SETLOCK TEST,TYPE=LOCAL);/* TEST IF LOCAL LOCK IS HELD   */
         SETLOCK TEST,TYPE=LOCAL
*       IF R15=STLOKNRM THEN        /* IF THE LOCAL LOCK IS HELD     */
         LTR   R15,R15                                             0622
         BNZ   @RF00622                                            0622
*         ASCBTYP1='0'B;            /* ZERO THE TYPE 1 SVC SWITCH IN
*                                      THE ASCB                      */
         L     @14,PSAAOLD                                         0623
         NI    ASCBTYP1(@14),B'11111101'                           0623
*       RFY                                                        0624
*         R15 UNRSTD;               /* RELEASE REG FOR SETLOCK TEST  */
@RF00622 DS    0H                                                  0625
*       RFY                                                        0625
*        (R11,                                                     0625
*         R12,                                                     0625
*         R13,                                                     0625
*         R14) RSTD;                /* GET REGS DESTROYED BY   SETLCK*/
*       GEN;                                                       0626
*                                      /*FREE ALL LOCKS ON THIS CPU  */
         SETLOCK RELEASE,TYPE=ALL,DISABLED,RELATED=('RTM PROCESSING',  X
               ANYMODUL(ANYLABEL))
*       RFY                                                        0627
*        (R11,                                                     0627
*         R12,                                                     0627
*         R13,                                                     0627
*         R14) UNRSTD;              /* RELEASE REGS USED BY   SETLOCK*/
*       PSAANEW=NULL;               /* ZERO PSAANEW TO FORCE THE   0628
*                                      DISPATCHER TO RESEARCH HIS  0628
*                                      QUEUES                        */
         SLR   @12,@12                                             0628
         ST    @12,PSAANEW                                         0628
*       PSASUPER=NULL;              /* CLEAR ALL SUPER FLAGS         */
         ST    @12,PSASUPER                                        0629
*       RFY                                                        0630
*         R14 RSTD;                 /* GET REG FOR RETURN ADDRESS    */
*       IF LCCASRBM='1'B THEN       /* IF CPU IS IN SRB MODE         */
         L     @15,PSALCCAV                                        0631
         TM    LCCASRBM(@15),B'10000000'                           0631
         BNO   @RF00631                                            0631
*         R14=CVTSRBRT;             /* THEN EXIT TO THE SRB DISP     */
         L     @12,CVTPTR                                          0632
         L     R14,CVTSRBRT(,@12)                                  0632
*       ELSE                        /* OTHERWISE                     */
*         R14=CVT0DS;               /* TAKE THE NORMAL DISPATCHER  0633
*                                      EXIT                          */
         B     @RC00631                                            0633
@RF00631 L     @12,CVTPTR                                          0633
         L     R14,CVT0DS(,@12)                                    0633
*       RETURN;                     /* GO TO THE DISPATCHER          */
         B     @EL00001                                            0634
*       RFY                                                        0635
*         R14 UNRSTD;               /* RELEASE REGISTER              */
*       RFY                                                        0636
*         FRRS BASED(R7);           /* USE REGISTER BASE FOR CURRENT
*                                      STACK                         */
*       RFY                                                        0637
*         RT1TRACK BASED(R12);      /* USE REGISTER BASE FOR TRACK 0637
*                                      AREA IN RTM1WA                */
*     END;                          /* END OF ABORT SEGMENT          */
*                                                                  0638
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THE LPRECOV1 SEGMENT IS TO PROVIDE LOW LEVEL   */
*   /* RECOVERY IF A RECURSIVE ERROR OCCURS WHEN RTM1 HAD BEEN       */
*   /* ORIGINALLY ENTERED IN SLIH MODE. RTM1'S PROCESSING, AS COVERED*/
*   /* BY THE LOGICAL PHASE RECOVERY ROUTINES, CAN BE DIVIDED INTO   */
*   /* SEVERAL SECTIONS: ITS INITIAL PROCESSING OF THE ERROR, SYSTEM */
*   /* RECOVERY (PERFORMED BY IEAVTRTS), AND RTM1'S EXIT PROCESSING. */
*   /* DIFFERENT RECOVERY SCHEMES WILL BE ATTEMPTED DEPENDING ON THE */
*   /* LOGICAL PHASE RTM1 WAS IN WHEN THE SECOND ERROR OCCURRED.     */
*   /* INPUT TO THIS SEGMENT IS AS FOLLOWS: FUNCTION REGISTER (R0) - */
*   /* INDICATES TYPE OF ENTRY INTO RTM1 FOR THE NEW ERROR. STAKPTR  */
*   /* REGISTER (R7) - IN SLIH MODE, CONTAINS A PTR TO THE CURRENT   */
*   /* STACK. TRACKPTR REGISTER (R12) - IN SLIH MODE, CONTAINS A PTR */
*   /* TO THE TRACKING AREA IN THE RTM1WA (WHICH STILL CONTAINS      */
*   /* INFORMATION ABOUT THE ORIGINAL ERROR). THE FOLLOWING REGISTERS*/
*   /* MAY BE DEFINED - DEPENDING ON THE TYPE OF ENTRY TO RTM1 - AND */
*   /* SHOULD BE PRESERVED IF CONTROL IS TO BE RETURNED TO RTM1 FOR  */
*   /* CONTINUED PROCESSING OF THE NEW ERROR: R1-R6,R13. RTM1'S BASE */
*   /* REGISTER IS R9 AND WOULD ALSO HAVE TO BE RESTORED.            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0639
*RT1LPRR1:                          /* LOGICAL PHASE RECOVERY ROUTINE
*                                      1 - REPRESENTS FIRST LEVEL OF
*                                      RECOVERY BEYOND ABORT       0639
*                                      PROCESSING                    */
*   RFY                                                            0639
*    (R0,                           /* TYPE OF ENTRY INTO RTM1       */
*     R1,                           /* PRESERVED FOR CALLER          */
*     R2,                           /* PRESERVED FOR CALLER          */
*     R3,                           /* PRESERVED FOR CALLER          */
*     R4,                           /* PRESERVED FOR CALLER          */
*     R5,                           /* PRESERVED FOR CALLER          */
*     R6,                           /* PRESERVED FOR CALLER          */
*     R7,                           /* PTR TO CURRENT STACK          */
*     R12,                          /* PTR TO TRACKING AREA IN WA    */
*     R13) RSTD;                    /* PRESERVED FOR CALLER          */
RT1LPRR1 DS    0H                                                  0640
*   IF RT1TLPN<=RT1SRMHI&           /* IF LPN INDICATES ERROR WAS    */
*       RT1TLPN>=RT1SRMLO THEN      /* IN IEAVTRTS                   */
         CLI   RT1TLPN(R12),89                                     0640
         BH    @RF00640                                            0640
         CLI   RT1TLPN(R12),60                                     0640
         BL    @RF00640                                            0640
*/* ******************************************************************/
*/* THIS SEGMENT IS A LOGICAL PHASE RECOVERY ROUTINE(LPRR) FOR RTM   */
*/* WHICH RECOVERS IEAVTRTS FROM A POSSIBLE FAILURE WHERE NO FRR     */
*/* PROTECTION IS PRESENT.  THIS LPRR PERFORMS THE FOLLOWING         */
*/* FUNCTIONS.                                                       */
*/*  1. ACQUIRES,INITIALIZES AND RECORDS A SDWA THAT DESCRIBES THE   */
*/*     IEAVTRTS FAILURE.                                            */
*/*  2. RETURNS TO IEAVTRTM AS IEAVTRTS WOULD HAVE RETURNED TO       */
*/*     IEAVTRTM(IN ITS EXIT SEGMENT) IF THE CURRENT STACK AT THE    */
*/*     TIME OF THE IEAVTRTS FAILURE IS THE NORMAL FRR STACK.        */
*/*  3. ABORTS THE LPRR RECOVERY IF THE CURRENT FRR STACK IS ONE OF  */
*/*     THE SUPER FRR STACKS WHEN IEAVTRTS FAILED.                   */
*/* INPUTS--------                                                   */
*/*  - FUNCTION REGISTER(R0) CONTAINS THE ERROR TYPE OF THE IEAVTRTS */
*/*    FAILURE                                                       */
*/*  - RT1TLPN FIELD OF THE RTM1 WORK AREA PORTION OF THE CURRENT    */
*/*    FRR STACK CONTAINS THE LOGICAL PHASE IN IEAVTRTS WHERE THE    */
*/*    FAILURE OCCURRED                                              */
*/*  - FLAGSCC REGISTER(R1) CONTAINS THE COMPLETION CODE OF THE ERROR*/
*/*  - DUMPOPTS REGISTER(R5) CONTAINS THE DUMPOPTS ASSOCIATED WITH   */
*/*    THE IEAVTRTS ERROR IF THE ERROR IS NOT A MACHINE CHECK        */
*/*  - EEDCHAIN REGISTER(R6) CONTAINS THE POINTER TO COMPLETE        */
*/*    MACHINE CHECK INFO IF THE ERROR IS A MACHINE CHECK            */
*/*  - REPRDATA REGISTER(R5) CONTAINS ABBREVIATED MACHINE CHECK      */
*/*    INFORMATION IF THE ERROR IS A MACHINE CHECK AND COMPLETE DATA */
*/*    IS UNAVAILABLE                                                */
*/*  - PSWPTR1 REGISTER(R2) POINTS TO THE 1ST HALF OF THE ERROR PSW  */
*/*  - PSWPTR2 REGISTER(R3) POINTS TO THE 2ND HALF OF THE ERROR PSW  */
*/*  - SAVAREAP REGISTER(R13) POINTS TO THE REGISTERS AT THE TIME    */
*/*    OF THE IEAVTRTS FAILURE                                       */
*/* OUTPUTS-------                                                   */
*/*  - A SDWA DESCRIBING THE IEAVTRTS FAILURE IS RECORDED            */
*/* NOTES-----                                                       */
*/*  - REGS(R0,R1,R2,R3,R5,R6,R7,R9,10,R13,R4) ARE RESTRICTED        */
*/*    THROUGHOUT THIS SEGMENT                                       */
*/*  - ALL OTHER REGS ARE VOLATILE                                   */
*/* ******************************************************************/
*                                                                  0641
*     DO;                                                          0641
*       RFY                                                        0642
*        (R0,                                                      0642
*         R1,                                                      0642
*         R5,                       /* REGS THAT MUST BE PRESERVED   */
*         R6,                       /* DURING DEFAULT RECOVERY OF    */
*         R2,                       /* IEAVTRTS                      */
*         R3,                                                      0642
*         R13,                                                     0642
*         R4) RSTD;                                                0642
*       RFY                                                        0643
*         SDWA BASED(RT1WRTCA);                                    0643
*       RFY                                                        0644
*         FRRS BASED(R7);                                          0644
*       RT1TLPID=NONE;              /* SET UP FOR RTM ABORT        0645
*                                      PROCESSING IF DEFAULT RECOVERY
*                                      FOR IEAVTRTS SHOULD FAIL      */
         MVI   RT1TLPID(R12),X'00'                                 0645
*       RT1TENPT=R0;                /* SET THE ERROR TYPE INTO THE 0646
*                                      RTM1 WORK AREA FOR FUTURE   0646
*                                      REFERENCE BY LOWER LEVEL    0646
*                                      SEGMENTS                      */
         STC   R0,RT1TENPT(,R12)                                   0646
*/* ******************************************************************/
*/* THIS SEGMENT IS PART OF IEAVTRTS DEFAULT RECOVERY LPRR AND       */
*/* ACQUIRES A GLOBAL SDWA ASSOCIATED WITH THE CURRENT FRR STACK     */
*/* IEAVTRTS WAS PROCESSING WHEN IT FAILED.  THIS SEGMENT IS USED    */
*/* WHEN IEAVTRTS HAS FAILED PRIOR TO ACQUIRING A SDWA AND WHEN NO   */
*/* FRR RECOVERY IS PRESENT.  IN THIS CASE, SINCE IEAVTRTS RUNS      */
*/* DISABLED A GLOBAL SDWA IS ACQUIRED SO THAT SERIALIZATION IS      */
*/* MAINTAINED FOR AN EVENTUAL RECORDING OF THE IEAVTRTS FAILURE.    */
*/* INPUT---                                                         */
*/*  - PSACSTK-POINTS TO THE INTERRUPTED STACK IEAVTRTS WAS          */
*/*    PROCESSING WHEN IT FAILED.                                    */
*/*  - PSARSVT---THE ARRAY IN THE PSA CONTAINING ADDRESSES OF ALL    */
*/*    FRR STACKS(A GLOBAL SDWA IS ASSOCIATED WITH EACH ONE OF       */
*/*    THESE STACKS                                                  */
*/* OUTPUT---                                                        */
*/*  - RT1WRTCA FIELD OF THE RTM1 WORK AREA PORTION OF THE           */
*/*    INTERRUPTED FRR STACK WILL POINT TO THE ACQUIRED GLOBAL       */
*/*    SDWA                                                          */
*/* NOTES-----                                                       */
*/*  - REGS(R11,R4,R0,R1,R2,R3,R5,R6,R7,R9,R10,R13) RESTRICTED       */
*/* ******************************************************************/
*                                                                  0647
*       DO;                                                        0647
*         RFY                                                      0648
*          (R4,                                                    0648
*           R11) RSTD;                                             0648
*         IF PSACSTK=PSANSTK THEN   /* IF THE INTERRUPTED STACK IS 0649
*                                      THE NORMAL STACK      @YM07602*/
         CLC   PSACSTK(4),PSANSTK                                  0649
         BNE   @RF00649                                            0649
*           DO;                     /* SEE IF RTM1WA CONTAINS CHECK-
*                                      POINTED INFORMATION   @YM07602*/
*             IF RT1WRTCA=NULL THEN /* AND AN SDWA HAS NOT YET BEEN
*                                      OBTAINED              @YM07602*/
         SLR   @08,@08                                             0651
         C     @08,RT1WRTCA(,R7)                                   0651
         BNE   @RF00651                                            0651
*               DO;                 /* USE THE NORMAL GLOBAL SDWA  0652
*                                                            @YM07602*/
*                 RT1WRTCA=ADDR(NGLBRTCA);/* LOCATE THE GLOBAL SDWA
*                                      ASSOCIATED WITH THE NORMAL  0653
*                                      STACK                 @YM07602*/
         L     @15,YSTAK+24                                        0653
         SLA   @15,5                                               0653
         AL    @15,@CF03393                                        0653
         AL    @15,PSARSTK                                         0653
         ST    @15,RT1WRTCA(,R7)                                   0653
*                 RT1WSRBR=NULL;    /* INSURE SUBSEQUENT PROCESSING
*                                      REALIZES THE SDWA IS GLOBAL 0654
*                                                            @YM07602*/
         ST    @08,RT1WSRBR(,R7)                                   0654
*               END;                /* NORMAL GLOBAL SDWA OBTAINED 0655
*                                                            @YM07602*/
*             ELSE                                                 0656
*               ;                   /* OTHERWISE THE SDWA ALREADY  0656
*                                      OBTAINED IS USED      @YM07602*/
@RF00651 DS    0H                                                  0657
*             IF RT1WEED>EEDNULL THEN/* IF EEDS WERE ACQUIRED FOR THE
*                                      ERROR BEING HANDLED BY      0657
*                                      IEAVTRTS WHEN IT FAILED THEN
*                                      THEY MUST FIRST BE FREED PRIOR
*                                      TO RECOVERING THE RTS FAILURE
*                                                            @YM04995*/
         CLC   RT1WEED(4,R7),@CF00079                              0657
         BNH   @RF00657                                            0657
*               DO;                 /* FREE THE EEDS         @YM04995*/
*                 GENERATE;                                        0659
*                                      /*SAVE REGS           @YM04995*/
         L     R11,RT1WRTCA(0,R7)                         @YM04995
         STM   R0,R15,SRMREGS+512(R11)                        @YM04995
*                 R6=RT1WEED;       /* INITIALIZE TO FREE THE OLD  0660
*                                      EEDS                  @YM04995*/
         L     R6,RT1WEED(,R7)                                     0660
*                 CALL FREEDCEL;    /* FREE THE EEDS         @YM04995*/
         L     @15,@CA03293                                        0661
         BALR  @14,@15                                             0661
*                 GENERATE;                                        0662
*                                      /*RESTORE REGS        @YM04995*/
         L     R11,RT1WRTCA(0,R7)  FIND THE SDWA          @YM04995
         LM    R0,R15,SRMREGS+512(R11)  RELOAD THE REGS       @YM04995
*                 RT1WEED=R6;       /* INSURE THAT THE RTM1WA      0663
*                                      REFLECTS THE EXISTENCE OF EEDS
*                                      (IF ANY) FOR THE IEAVTRTS   0663
*                                      FAILURE               @YM04995*/
         ST    R6,RT1WEED(,R7)                                     0663
*               END;                /* FINISH FREEING EEDS   @YM04995*/
*             ELSE                                                 0665
*               ;                   /* IF THERE ARE NO EEDS EXITING
*                                      PRIOR TO THE IEAVTRTS FAILURE
*                                      THEN NO EEDS NEED BE FREED  0665
*                                                            @YM04995*/
@RF00657 DS    0H                                                  0666
*           END;                    /* END OF NORMAL STACK PROCESSING
*                                                            @YM07602*/
*         ELSE                      /* OTHERWISE A SUPER STACKS SDWA
*                                      IS TO BE LOCATED              */
*           DO;                                                    0667
         B     @RC00649                                            0667
@RF00649 DS    0H                                                  0668
*             R4=THREE;             /* INITIALIZE RSVTIDX FOR      0668
*                                      FOLLOWING LOOP THRU THE SUPER
*                                      STACKS DEFINED ON THE RSVT    */
         LA    R4,3                                                0668
*             R11=TWO;              /* INIT STKIDX FOR LOOP ALSO     */
         LA    R11,2                                               0669
*             DO WHILE PSARSVT(R4)^=PSACSTK;/* LOOP THRU THE RSVT TO
*                                      LOCATE THE CURRENT SUPER STACK*/
         B     @DE00670                                            0670
@DL00670 DS    0H                                                  0671
*               R11=R11+NRMSTK;     /* UPDATE THE STK INDEX          */
         AL    R11,@CF00079                                        0671
*               R4=TWO*R11-NRMSTK;  /* AND THE RSVT INDEX            */
         LR    R4,R11                                              0672
         ALR   R4,R4                                               0672
         BCTR  R4,0                                                0672
*             END;                  /* CONTINUE UNTIL THE CURRENT  0673
*                                      SUPER STACK IS FOUND          */
@DE00670 L     @08,PSACSTK                                         0673
         LR    @15,R4                                              0673
         SLA   @15,2                                               0673
         C     @08,PSARSVT-4(@15)                                  0673
         BNE   @DL00670                                            0673
*             RT1WRTCA=ADDR(GLOBRTCA);/* THE GLOBAL SDWA IS ACTIVE   */
         LR    @15,R11                                             0674
         SLA   @15,2                                               0674
         L     @15,YSTAK-8(@15)                                    0674
         SLA   @15,5                                               0674
         AL    @15,@CF01515                                        0674
         ALR   @08,@15                                             0674
         ST    @08,RT1WRTCA(,R7)                                   0674
*             RT1WSRBR=NULL;        /* INSURE THAT SUBSEQUENT      0675
*                                      PROCESSING REALIZES THE SDWA
*                                      IS GLOBAL             @YM07602*/
         SLR   @08,@08                                             0675
         ST    @08,RT1WSRBR(,R7)                                   0675
*           END;                                                   0676
*         RFY                                                      0677
*          (R4,                                                    0677
*           R11) UNRSTD;                                           0677
@RC00649 DS    0H                                                  0678
*       END;                                                       0678
*       CALL SETRTCA;               /* INITIALIZE THE SDWA WITH ERROR
*                                      INFORMATION ABOUT IEAVTRTS    */
         BAL   @14,SETRTCA                                         0679
*       RFY                                                        0680
*         R5 RSTD;                                                 0680
*       R5=RT1WRTCA;                                               0681
         L     R5,RT1WRTCA(,R7)                                    0681
*       CALL RCRDRTCA;              /* RECORD THE INITIALIZED SDWA   */
         BAL   @14,RCRDRTCA                                        0682
*       IF PSACSTK=PSANSTK THEN     /* IF RTS FAILED WHILE THE NORMAL
*                                      STACK WAS CURRENT THEN        */
         CLC   PSACSTK(4),PSANSTK                                  0683
         BNE   @RF00683                                            0683
*         IF RT1WSRBR^=NULL THEN    /* IF THE SDWA BEING USED WAS  0684
*                                      GETMAINED THEN EXIT TO RTM  0684
*                                      WITH THIS SDWA MUST BE WITH NO
*                                      LOCKS HELD                    */
         L     @11,RT1WSRBR(,R7)                                   0684
         LTR   @11,@11                                             0684
         BZ    @RF00684                                            0684
*           DO;                     /* EXIT WITH SRB SDWA AND ALL  0685
*                                      LOCKS FREED                   */
*             RFY                                                  0686
*               NEWRTCA BASED(RT1WSRBR);                           0686
*             NEWRTCA(1:256)=SDWA(1:256);                          0687
         L     @08,RT1WRTCA(,R7)                                   0687
         MVC   NEWRTCA(256,@11),SDWA(@08)                          0687
*             NEWRTCA(257:512)=SDWA(257:512);                      0688
         MVC   NEWRTCA+256(256,@11),SDWA+256(@08)                  0688
*             RT1WRTCA=RT1WSRBR;                                   0689
         ST    @11,RT1WRTCA(,R7)                                   0689
*             GENERATE CODE;                                       0690
*                                /*RELEASE ALL LOCKS-STAY DISABLED   */
         SETLOCK RELEASE,TYPE=ALL,DISABLED,                            C
               RELATED=('EXIT TO RTM IN SRB MODE')
*           END;                                                   0691
*         ELSE                                                     0692
*           ;                       /* IF THE SDWA BEING USED WAS  0692
*                                      GETMAINED THEN THE LOCKS    0692
*                                      CURRENTLY HELD WILL BE      0692
*                                      RETAINED                      */
@RF00684 DS    0H                                                  0693
*       ELSE                                                       0693
*         GEN(SVC   13);            /* IF A SUPER STACK WAS CURRENT
*                                      WHEN RTS FAILED THEN ABORT THE
*                                      ERROR                         */
         B     @RC00683                                            0693
@RF00683 DS    0H                                                  0693
         SVC   13
*       RFY                                                        0694
*        (R14,                                                     0694
*         R9) RSTD;                                                0694
@RC00683 DS    0H                                                  0695
*       R14=RTMRETAD;               /* SETUP FOR RETURN TO RTM       */
         LA    @11,48                                              0695
         ALR   @11,R7                                              0695
         L     R14,RTMRETAD(,@11)                                  0695
*       R9=RTMBASE;                 /* REPRIME RTMS BASE REG         */
         L     R9,RTMBASE(,@11)                                    0696
*       GO TO R14;                  /* RETURN TO RTM WITH SDWA       */
         BR    R14                                                 0697
*     END;                                                         0698
*   RFY                                                            0699
*     R4 RSTD;                                                     0699
@RF00640 DS    0H                                                  0700
*   IF RT1TLPN^=CPURSTRT×           /* IF LPN INDICATES ORIGINAL     */
*       RT1TLPN^=NORSTRT THEN       /* ERROR WAS NOT A RESTART ERROR
*                                      (IF NOT, RTM1 WILL ATTEMPT TO
*                                      CONTINUE PROCESSING OF THE  0700
*                                      ORIGINAL ERROR, BUT IF IT IS,
*                                      RTM1 WILL PROCESS THE SECOND
*                                      ERROR)                        */
         CLI   RT1TLPN(R12),4                                      0700
         BNE   @RT00700                                            0700
         CLI   RT1TLPN(R12),5                                      0700
         BE    @RF00700                                            0700
@RT00700 DS    0H                                                  0701
*     DO;                           /* SEE IF EEDS NEED TO BE FREED
*                                      BEFORE CONTINUING TO PROCESS
*                                      THE ORIGINAL ERROR - EEDS   0701
*                                      MIGHT HAVE BEEN ACQUIRED IF 0701
*                                      NEW ERROR WAS A MACHCK, FOR 0701
*                                      EXAMPLE                       */
*       RT1WVARI(ONE)=R1;           /* SAVE COMPLETION CODE REG -  0702
*                                      DESTROYED BY FREEDCEL ROUTN   */
         ST    R1,RT1WVARI(,R7)                                    0702
*       IF R6>EEDNULL THEN          /* IF EEDS NEED TO BE FREED      */
         C     R6,@CF00079                                         0703
         BNH   @RF00703                                            0703
*         DO;                       /* GO TO FREE THE EEDS           */
*           RFY                                                    0705
*            (R9,                                                  0705
*             R11) RSTD;                                           0705
*           R11=R9;                 /* SAVE THE VALUE OF R9 SINCE IT
*                                      IS DESTROYED BY FREEDCEL      */
         LR    R11,R9                                              0706
*           CALL FREEDCEL;          /* CALL THE FREECELL ROUTINE     */
         L     @15,@CA03293                                        0707
         BALR  @14,@15                                             0707
*           R9=R11;                 /* RESTORE THE VALUE OF R9       */
         LR    R9,R11                                              0708
*           RFY                                                    0709
*            (R11,                                                 0709
*             R9) UNRSTD;                                          0709
*         END;                                                     0710
*     END;                          /* END OF FREECELL PROCESSING    */
@RF00703 DS    0H                                                  0712
*   RFY                                                            0712
*    (R11,                                                         0712
*     R14) RSTD;                    /* GET REGS USED TO RETURN TO RTM*/
@RF00700 DS    0H                                                  0713
*   R11=ADDR(RTMSTART);             /* RESTORE VALUE OF RTM'S BASE   */
         L     R11,@CV02894                                        0713
*   IF RT1TLPN<=RT1MGRHI THEN       /* IF LPN INDICATES RTM1'S     0714
*                                      MANAGEMENT FUNCTION WAS IN  0714
*                                      CONTROL AT TIME OF NEW ERROR  */
         CLI   RT1TLPN(R12),29                                     0714
         BH    @RF00714                                            0714
*     DO;                           /* PERFORM MANAGEMENT RECOVERY   */
*       GO TO MGRRCOV(RT1TLPN-MGRINIT);/* GO TAKE RECOVERY ACTION    */
         SLR   @15,@15                                             0716
         IC    @15,RT1TLPN(,R12)                                   0716
         SLA   @15,2                                               0716
         L     @15,MGRRCOV-8(@15)                                  0716
         BR    @15                                                 0716
*RVPOSTSR:                          /* RECOVERY ACTION FOR POST RTS
*                                      PROCESSING - RETRY SEGMENT    */
*       R14=ADDR(POSTSRRP);         /* PRIME RETURN ADDR TO RTM1     */
RVPOSTSR L     R14,@CV02871                                        0717
*       GEN(LR    R9,R11);          /* RESTORE RTM1'S BASE REG       */
         LR    R9,R11
*       GEN(BR    R14);             /* RETURN TO RTM1                */
         BR    R14
*RVNORTS:                           /* RECOVERY ACTION FOR NO RTS  0720
*                                      PROCESSING - RETRY SEGMENT    */
*       R0=RT1TENPT;                /* RESTORE FUNCTION VALUE OF   0720
*                                      ORIGINAL ERROR                */
RVNORTS  SLR   R0,R0                                               0720
         IC    R0,RT1TENPT(,R12)                                   0720
*       R1=RT1WVARI(ONE);           /* RESTORE COMPLETION CODE OF NEW
*                                      ERROR - TO MATCH REGS AT TIME
*                                      OF ERROR SINCE R13 NOW POINTS
*                                      TO THE REGS OF THE NEW ERROR  */
         L     R1,RT1WVARI(,R7)                                    0721
*       R6=RT1WEED;                 /* RESTORE EEDCHAIN PTR FOR    0722
*                                      ORIGINAL ERROR                */
         L     R6,RT1WEED(,R7)                                     0722
*       R14=ADDR(NORTSRP);          /* PRIME RETURN ADDR TO RTM1     */
         L     R14,@CV02872                                        0723
*       GEN(LR    R9,R11);          /* RESTORE RTM1'S BASE REG       */
         LR    R9,R11
*       GEN(BR    R14);             /* RETURN TO RTM1                */
         BR    R14
*RVRSTRT:                           /* RECOVERY ACTION FOR RESTART 0726
*                                      ERROR - PROCESS NEW ERROR     */
*       IF R0^=RT1WREST THEN        /* IF RECURSIVE ERROR IS NOT A 0726
*                                      RESTART ERROR                 */
RVRSTRT  C     R0,@CF00110                                         0726
         BE    @RF00726                                            0726
*         CVTRSTWD=NULL;            /* RELEASE THE RESTART RESOURCE
*                                      HELD BY RTM1                  */
         L     @15,CVTPTR                                          0727
         SLR   @08,@08                                             0727
         ST    @08,CVTRSTWD(,@15)                                  0727
*       RT1WNPRS=''B;               /* ZERO THE NON-PRESERVED PART OF
*                                      THE RTM1WA                    */
@RF00726 XC    RT1WNPRS(52,R7),RT1WNPRS(R7)                        0728
*       R14=ADDR(CWTRP);            /* PRIME RETURN ADDR TO RTM1     */
         L     R14,@CV02873                                        0729
*       GEN(LR    R9,R11);          /* RESTORE RTM1'S BASE REG       */
         LR    R9,R11
*       GEN(BR    R14);             /* RETURN TO RTM1                */
         BR    R14
*RVNORST:                           /* RECOVERY ACTION FOR RESTART 0732
*                                      ERROR IF NO SIGP WAS ISSUED -
*                                      PROCESS NEW ERROR             */
*       CVTRSTWD=NULL;              /* RELEASE THE RESTART RESOURCE
*                                      HELD BY RTM1                  */
RVNORST  L     @15,CVTPTR                                          0732
         SLR   @08,@08                                             0732
         ST    @08,CVTRSTWD(,@15)                                  0732
*       RT1WNPRS=''B;               /* ZERO THE NON-PRESERVED PART OF
*                                      THE RTM1WA                    */
         XC    RT1WNPRS(52,R7),RT1WNPRS(R7)                        0733
*       R14=ADDR(CWTRP);            /* PRIME RETURN ADDR TO RTM1     */
         L     R14,@CV02873                                        0734
*       GEN(LR    R9,R11);          /* RESTORE RTM1'S BASE REG       */
         LR    R9,R11
*       GEN(BR    R14);             /* RETURN TO RTM1                */
         BR    R14
*     END;                          /* END OF MANAGEMENT FUNCTION  0737
*                                      RECOVERY                      */
*   ELSE                            /* IF NOT MANAGEMENT FUNCTION    */
*     DO;                           /* PERFORM EXIT FUNCTION RECVRY  */
         B     @RC00714                                            0738
@RF00714 DS    0H                                                  0739
*       GO TO EXITRCOV(RT1TLPN-RT1EXTLO+ONE);/* GO TAKE RECVRY ACTN  */
         SLR   @15,@15                                             0739
         IC    @15,RT1TLPN(,R12)                                   0739
         SLA   @15,2                                               0739
         L     @15,EXITRCOV-480(@15)                               0739
         BR    @15                                                 0739
*RVEEDFRE:                          /* RECOVERY ACTION FOR FREECELL
*                                      FAILURE - RETRY BEYOND      0740
*                                      FREECELL                      */
*       R5=RT1TENPT;                /* RESTORE FUNCTION FOR EXIT   0740
*                                      PROCESSING                    */
RVEEDFRE SLR   R5,R5                                               0740
         IC    R5,RT1TENPT(,R12)                                   0740
*       R7=R12;                     /* RESTORE PTR TO TRACKING AREA  */
         LR    R7,R12                                              0741
*       R14=ADDR(EEDFRERP);         /* PRIME RETURN ADDR TO RTM1     */
         L     R14,@CV02874                                        0742
*       GEN(LR    R9,R11);          /* RESTORE RTM1'S BASE REG       */
         LR    R9,R11
*       GEN(BR    R14);             /* RETURN TO RTM1                */
         BR    R14
*RVFREEMN:                          /* RECOVERY ACTION FOR FREEMAIN
*                                      FAILURE - RETRY BEYOND      0745
*                                      FREEMAIN                      */
*       RFY                                                        0745
*         R8 RSTD;                  /* GET REG FOR EXIT TYPE         */
RVFREEMN DS    0H                                                  0746
*       R8=RT1TREGS(ONE);           /* RESTORE DETERMINED EXIT TYPE  */
         L     R8,RT1TREGS(,R12)                                   0746
*       R7=R12;                     /* RESTORE PTR TO TRACKING AREA  */
         LR    R7,R12                                              0747
*       R14=ADDR(FREEMNRP);         /* PRIME RETURN ADDR TO RTM1     */
         L     R14,@CV02875                                        0748
*       GEN(LR    R9,R11);          /* RESTORE RTM1'S BASE REG       */
         LR    R9,R11
*       GEN(BR    R14);             /* RETURN TO RTM1                */
         BR    R14
*       RFY                                                        0751
*         R8 UNRSTD;                /* RELEASE REG FOR EXIT TYPE     */
*     END;                          /* END OF EXIT FUNCTION RECVRY   */
*   RFY                                                            0753
*    (R11,                                                         0753
*     R14) UNRSTD;                  /* FREE REGS USED TO RETURN TO 0753
*                                      RTM - END OF LOGICAL PHASE  0753
*                                      RECOVERY ROUTINE 1            */
*   RFY                                                            0754
*    (R0,                                                          0754
*     R1,                                                          0754
*     R2,                                                          0754
*     R3,                                                          0754
*     R4,                                                          0754
*     R5,                                                          0754
*     R6,                                                          0754
*     R7,                                                          0754
*     R12,                                                         0754
*     R13) UNRSTD;                  /* RELEASE REGS - END OF RECVRRTM
*                                      SEGMENT                       */
*                                                                  0754
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THE RTMSMFRR SEGMENT IS TO PASS ON THE CONTINUE*/
*   /* WITH TERMINATION ACTION INITIATED BY RTMRSFRR. THE FRR        */
*   /* RTMSMFRR IS PLACED ON THE ERROR STACK ONLY IF RTM1 HAD BEEN   */
*   /* ENTERED INITIALLY IN SLIH MODE AND THEN PROCEEDED TO PERFORM  */
*   /* SOME RESCHEDULE FUNCTION. IT IS PLACED ON THE ERROR STACK SO  */
*   /* THAT ITS SIX WORD PARAMETER AREA CAN BE USED TO STORE         */
*   /* ADDITIONAL RECOVERY INFORMATION THAT RTMRSFRR MAY BE ABLE TO  */
*   /* UTILIZE. IN ALL CASES, THIS FRR WILL INDICATE CONTINUE WITH   */
*   /* TERMINATION. INPUT TO THIS SEGMENT IS AS FOLLOWS: RTCAPTR     */
*   /* REGISTER (R1) - POINTS TO THE SDWA(RTCA) WHICH CONTAINS       */
*   /* INFORMATION ABOUT THE ERROR. RETNREG REGISTER (R14) - CONTAINS*/
*   /* THE RETURN ADDRESS TO IEAVTRTS, THE SYSTEM RECOVERY MANAGER.  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0755
*RTMSMFRR:                                                         0755
*   ENTRY;                                                         0755
@EP00755 DS    0H                                                  0755
@EC00755 DS    0H                                                  0756
*   RFY                                                            0756
*    (R1,                           /* ON ENTRY, PTR TO SDWA(RTCA)   */
*     R5,                           /* RETURN ADDR TO RTS - SAVED ON
*                                      ENTRY                         */
*     R14) RSTD;                    /* RETURN ADDR TO RTS ON ENTRY   */
*   R5=R14;                         /* SAVE RETURN ADDRESS TO RTS    */
         LR    R5,R14                                              0757
*   DO;                             /* SETRP RECORD(YES)RECPARM(SLIHM
*                                      ID)RC(0)                      */
*     RESPECIFY                                                    0759
*      (GPR00P,                                                    0759
*       GPR01P,                                                    0759
*       GPR14P,                                                    0759
*       GPR15P) RSTD;                                              0759
*     GPR01P->SDWARCDE=0;           /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0760
*     GPR01P->SDWARCRD='1'B;        /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0761
*     GPR15P=ADDR(SLIHMID);         /* ACCESS RECORD PARAMETER LIST  */
         LA    GPR15P,SLIHMID                                      0762
*     GPR01P->SDWARECP=GPR15P->I256C(1:24);/* COPY RECORD PARAMETERS */
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0763
*     RESPECIFY                                                    0764
*      (GPR00P,                                                    0764
*       GPR01P,                                                    0764
*       GPR14P,                                                    0764
*       GPR15P) UNRSTD;                                            0764
*   END;                                                           0765
*   R14=R5;                         /* RESTORE RETURN ADDRESS        */
         LR    R14,R5                                              0766
*   RETURN;                         /* RETURN TO RTS                 */
         B     @EL00001                                            0767
*   RFY                                                            0768
*    (R1,                                                          0768
*     R5,                                                          0768
*     R14) UNRSTD;                  /* FREE REGS USED BY FRR         */
*RTHFRR:                                                           0769
*   ENTRY;                                                         0769
*                                                                  0769
@EP00769 DS    0H                                                  0770
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THE RTHFRR SEGMENT IS TO PROVIDE RECOVERY FOR  */
*   /* RTH'S PROCESSING. THE RECOVERY SCHEME IS AS FOLLOWS: IF THE   */
*   /* ERROR WAS THE FIRST ERROR IN A PARTICULAR SEGMENT OF RTH, THEN*/
*   /* THE FRR WILL ATTEMPT TO RETRY THAT SEGMENT. IF, HOWEVER, THE  */
*   /* ERROR IS THE SECOND ERROR OCCURRING IN A SEGMENT, THEN THE FRR*/
*   /* WILL ATTEMPT TO RETRY TO THE NEXT LOGICAL SEGMENT IN RTH, THUS*/
*   /* SKIPPING THE SEGMENT IN WHICH THE ERROR WAS OCCURRING. THE    */
*   /* RECOVERY DESCRIBED IS ATTEMPTED PROVIDED THAT THE ERROR IS NOT*/
*   /* AN UNRECOVERABLE TRANSLATION EXCEPTION OR A RESTART INTERRUPT.*/
*   /* IN THESE CASES, RETRY IS NOT PERMITTED AND SO THE ONLY THING  */
*   /* THE FRR IS ABLE TO DO IS CLEAN UP ANY RESOURCES ACQUIRED BY   */
*   /* RTH, NAMELY EEDS, AND CONTINUE WITH TERMINATION. INPUT TO THIS*/
*   /* SEGMENT IS AS FOLLOWS: FRRWAREG REGISTER (R0) - POINTS TO A   */
*   /* 200 BYTE WORK AREA AVAILABLE FOR THE FRR'S USE. RTCAPTR       */
*   /* REGISTER (R1) - POINTS TO THE SDWA(RTCA) WHICH CONTAINS       */
*   /* INFORMATION ABOUT THE ERROR. RETNREG REGISTER (R14) - CONTAINS*/
*   /* THE RETURN ADDRESS TO IEAVTRTS, THE SYSTEM RECOVERY MANAGER.  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0770
*   RFY                                                            0770
*    (R0,                           /* ON ENTRY, PTR TO 200 BYTE WA  */
*     R1,                           /* ON ENTRY, PTR TO SDWA (RTCA)  */
*     R5,                           /* RETURN ADDR TO RTS - SAVED ON
*                                      ENTRY                         */
*     R7,                           /* PTR TO THIS FRR'S PARM AREA   */
*     R8,                           /* PTR TO 200 BYTE WA - HERE   0770
*                                      SINCE THE VALUE IN R0 IS    0770
*                                      DESTROYED                     */
*     R14) RSTD;                    /* RETURN ADDR TO RTS ON ENTRY   */
*   R5=R14;                         /* SAVE RETURN ADDRESS TO RTS    */
         LR    R5,R14                                              0771
*   R8=R0;                          /* SAVE PTR TO 200 BYTE WA       */
         LR    R8,R0                                               0772
*   RFY                                                            0773
*    (R0,                                                          0773
*     R14) UNRSTD;                  /* FREE UP SAVED REGISTERS       */
*   RFY                                                            0774
*     FRRWORKA BASED(R8);                                          0774
*   RFY                                                            0775
*     SDWA BASED(R1);               /* USE SDWA PASSED TO FRR        */
*   R7=SDWAPARM;                    /* LOCATE FRR'S PARM AREA        */
         L     R7,SDWAPARM(,R1)                                    0776
*   RFY                                                            0777
*     RTHTRACK BASED(R7);                                          0777
*   IF SDWATEXC='0'B&               /* IF ERROR IS NOT A DATERR      */
*       SDWARKEY='0'B THEN          /* AND IS NOT A RESTART ERROR    */
         TM    SDWATEXC(R1),B'00100010'                            0778
         BNZ   @RF00778                                            0778
*     DO;                           /* SET UP FOR RETRY              */
*       RFY                                                        0780
*        (R2,                       /* INDEX TO RECOVERY ACTION      */
*         R4,                       /* REG CONTAINING RETRY ADDR     */
*         R6,                       /* PTR TO CPU RELATED SAV AREA   */
*         R13) RSTD;                /* PTR TO CALLER'S REGS AT TIME
*                                      THE CALLRTM WAS ISSUED        */
*       R13=RTHTREGS(ONE);          /* RESTORE PTR TO CALLER'S REGS  */
         L     R13,RTHTREGS(,R7)                                   0781
*       RFY                                                        0782
*         ERREGS BASED(R13);                                       0782
*       R6=RTHTREGS(THREE);         /* RESTORE PTR TO CPU RELATED RTM
*                                      SAVE AREA                     */
         L     R6,RTHTREGS+8(,R7)                                  0783
*       RFY                                                        0784
*         RTMCPUSA BASED(R6);                                      0784
*       IF RTHTLPN^=NULL THEN       /* IF RTH'S PROCESSING HAD GOTTEN
*                                      PAST INITIALIZATION           */
         CLI   RTHTLPN(R7),0                                       0785
         BE    @RF00785                                            0785
*         R2=RTHTLPN-RT1MCHLO;      /* CALC RECOVERY INDEX FROM LPN  */
         SLR   R2,R2                                               0786
         IC    R2,RTHTLPN(,R7)                                     0786
         SL    R2,@CF00118                                         0786
*       ELSE                        /* OTHERWISE RTH WAS STILL     0787
*                                      INITIALIZING                  */
*         R2=ONE;                   /* SO INITIALIZE INDEX TO 1      */
         B     @RC00785                                            0787
@RF00785 LA    R2,1                                                0787
*       REGID=ALLREGS;              /* INDICATE ALL REGS ARE TO BE 0788
*                                      PRIMED FOR RETRY              */
@RC00785 MVC   REGID(2,R8),@CB02840                                0788
*       RTYREGS=''B;                /* INITIALIZE RETRY REGS TO 0    */
         XC    RTYREGS(64,R8),RTYREGS(R8)                          0789
*       GO TO RTHRECOV(R2);         /* GO TAKE PROPER RECOVERY ACTION*/
         LR    @12,R2                                              0790
         SLA   @12,2                                               0790
         L     @12,RTHRECOV-4(@12)                                 0790
         BR    @12                                                 0790
*RRTHSTRT:                          /* RECOVERY ACTION FOR RTH'S   0791
*                                      INITIALIZATION SEGMENT        */
*       RTHTREGS(TWO)=ERREG1;       /* INITIALIZE SLOT IN TRACKING 0791
*                                      AREA WITH LRB ADDRESS (REG1 0791
*                                      VALUE OF CALLER'S REGS)       */
RRTHSTRT L     @12,ERREG1(,R13)                                    0791
         ST    @12,RTHTREGS+4(,R7)                                 0791
*       R6=WSACRTMK;                /* OBTAIN ADDRESS OF RTM'S CPU 0792
*                                      RELATED SAVE AREA             */
         L     @12,PSALCCAV                                        0792
         L     @12,LCCACPUS(,@12)                                  0792
         L     R6,WSACRTMK(,@12)                                   0792
*       RTHTREGS(THREE)=R6;         /* INITIALIZE SLOT IN TRACKING 0793
*                                      AREA WITH ADDR OF SAVE AREA   */
         ST    R6,RTHTREGS+8(,R7)                                  0793
*       R4=RTHRLBL1(R2);            /* SET UP RETRY ADDRESS          */
         LR    @12,R2                                              0794
         SLA   @12,2                                               0794
         L     R4,RTHRLBL1-4(@12)                                  0794
*       GO TO RESTREGS;             /* GO SET UP RETRY REGS          */
         B     RESTREGS                                            0795
*RRTHEEDS:                          /* RECOVERY ACTION FOR EED     0796
*                                      PROCESSING IN RTH             */
*       IF RTHTEED1='1'B×           /* IF INITIAL EED WAS ACQUIRED   */
*           RTHTRTRY='1'B THEN      /* OR THIS IS THE 2ND ERROR      */
RRTHEEDS TM    RTHTEED1(R7),B'00011000'                            0796
         BZ    @RF00796                                            0796
*         DO;                       /* DO EXTRA EED PROCESSING       */
*           RTHTRTRY='1'B;          /* INSURE THAT THIS APPEARS TO BE
*                                      A SECOND ERROR                */
         OI    RTHTRTRY(R7),B'00010000'                            0798
*           IF RTHTEED1='1'B THEN   /* IF INITIAL EED WAS ACQUIRED 0799
*                                      AND CHECKPOINTED              */
         TM    RTHTEED1(R7),B'00001000'                            0799
         BNO   @RF00799                                            0799
*             IF RTHTEED2='0'B THEN /* BUT SECOND EED WAS NOT        */
         TM    RTHTEED2(R7),B'00000100'                            0800
         BNZ   @RF00800                                            0800
*               DO;                                                0801
*                 RTHTREGS(FOUR)=RTHTREGS(FIVE);/* INITIALIZE SLOT IN
*                                      TRACKING AREA WITH ADDR OF 1ST
*                                      EED - NOW SAME AS ADDR OF   0802
*                                      REPAIR STATUS EED             */
         L     @12,RTHTREGS+16(,R7)                                0802
         ST    @12,RTHTREGS+12(,R7)                                0802
*                 RFY                                              0803
*                   EED BASED(RTHTREGS(FIVE));                     0803
*                 EEDFWRDP=EEDNULL; /* INDICATE ONLY 1 EED WAS     0804
*                                      ACQUIRED                      */
         L     @12,RTHTREGS+16(,R7)                                0804
         MVC   EEDFWRDP(4,@12),@CF00079                            0804
*               END;                                               0805
*             ELSE                                                 0806
*               ;                   /* IF SECOND EED WAS ACQUIRED AND
*                                      CHECKPOINTED, NO FURTHER    0806
*                                      ACTION IS NEEDED              */
@RF00800 DS    0H                                                  0807
*           ELSE                    /* IF INIT EED WAS NOT ACQUIRED  */
*             RTHTREGS(FOUR)=EEDNULL;/* INITIALIZE EED PTR IN TRACK
*                                      AREA TO INDICATE INFORMATION
*                                      IS LOST                       */
         B     @RC00799                                            0807
@RF00799 MVC   RTHTREGS+12(4,R7),@CF00079                          0807
*           RTHTEED2='1'B;          /* SET BIT INDICATING EED PTR IS
*                                      CHECKPOINTED                  */
@RC00799 OI    RTHTEED2(R7),B'00000100'                            0808
*         END;                      /* END OF EXTRA EED PROCESSING   */
*       GO TO RTHRETRY;             /* GO SET UP FOR RETRY           */
         B     RTHRETRY                                            0810
*RRTHTIME:                          /* RECOVERY ACTION FOR TIMER   0811
*                                      REPAIR PROCESSING             */
*       GO TO RTHRETRY;             /* GO SET UP FOR RETRY           */
*RRTHSTG1:                          /* RECOVERY ACTION FOR INITIAL 0812
*                                      PHASE OF STORAGE REPAIR       */
*       IF RTHTRTRY='1'B THEN       /* IF THIS IS THE SECOND ERROR   */
RRTHSTG1 TM    RTHTRTRY(R7),B'00010000'                            0812
         BNO   @RF00812                                            0812
*         RTMKRSRF='1'B;            /* INDICATE RSR NOT CALLED       */
         OI    RTMKRSRF(R6),B'00000100'                            0813
*       GO TO RTHRETRY;             /* GO SET UP FOR RETRY           */
         B     RTHRETRY                                            0814
*RRTHPARM:                          /* RECOVERY ACTION FOR SEGMENT 0815
*                                      CONSTRUCTING PARM LIST        */
*       IF RTHTRTRY='1'B THEN       /* IF THIS IS THE 2ND ERROR      */
RRTHPARM TM    RTHTRTRY(R7),B'00010000'                            0815
         BNO   @RF00815                                            0815
*         DO;                       /* PERFORM EXTRA RECOVRY ACTION  */
*           RTYREG15=RSRFAIL;       /* SET UP RETRY REG15 TO INDICATE
*                                      AN RSR FAILURE                */
         MVC   RTYREG15(4,R8),@CF00075                             0817
*           IF RTHTSTGR='0'B THEN   /* IF RSR WAS NOT CALLED         */
         TM    RTHTSTGR(R7),B'00000010'                            0818
         BNZ   @RF00818                                            0818
*             RTMKRSRF='1'B;        /* INDICATE THIS IN THE CPU    0819
*                                      RELATED WORK SAVE AREA        */
         OI    RTMKRSRF(R6),B'00000100'                            0819
*         END;                      /* END OF EXTRA RECOVERY ACTION  */
*       GO TO RTHRETRY;             /* GO SET UP FOR RETRY           */
         B     RTHRETRY                                            0821
*RRTHSTG2:                          /* RECOVERY ACTION FOR SECOND  0822
*                                      PHASE OF STORAGE REPAIR       */
*       IF RTHTRTRY='0'B THEN       /* IF THIS IS THE INITIAL ERROR  */
RRTHSTG2 TM    RTHTRTRY(R7),B'00010000'                            0822
         BNZ   @RF00822                                            0822
*         DO;                                                      0823
*           IF RTMKINVP='1'B THEN   /* IF PAGE IS MARKED INVALID     */
         TM    RTMKINVP(R6),B'00010000'                            0824
         BNO   @RF00824                                            0824
*             RTYREG15=RSRNRM;      /* SET UP RETRY REG15 TO INDICATE
*                                      RSR IS SUCCESSFUL             */
         SLR   @12,@12                                             0825
         ST    @12,RTYREG15(,R8)                                   0825
*           ELSE                    /* OTHERWISE                     */
*             RTYREG15=RSRFAIL;     /* SET UP RETRY REG15 TO INDICATE
*                                      AN RSR FAILURE                */
         B     @RC00824                                            0826
@RF00824 MVC   RTYREG15(4,R8),@CF00075                             0826
*         END;                      /* END OF INITIAL ERROR RECOVRY  */
*       ELSE                        /* OTHERWISE THIS IS 2ND ERROR   */
*         IF RTHTSTGR='0'B THEN     /* IF RSR WAS NOT EVEN CALLED    */
         B     @RC00822                                            0828
@RF00822 TM    RTHTSTGR(R7),B'00000010'                            0828
         BNZ   @RF00828                                            0828
*           RTMKRSRF='1'B;          /* INDICATE THIS IN THE CPU    0829
*                                      RELATED WORK SAVE AREA        */
         OI    RTMKRSRF(R6),B'00000100'                            0829
*         ELSE                      /* IF RSR WAS CALLED             */
*           DO;                                                    0830
         B     @RC00828                                            0830
@RF00828 DS    0H                                                  0831
*             RTMKRSRC='1'B;        /* INDICATE RSR STATUS IS      0831
*                                      AVAILABLE                     */
         OI    RTMKRSRC(R6),B'00001000'                            0831
*             IF RTHTREGS(FIVE)>EEDNULL THEN/* IF A REPAIR STATUS EED
*                                      EXISTS                @YM05569*/
         L     @12,RTHTREGS+16(,R7)                                0832
         C     @12,@CF00079                                        0832
         BNH   @RF00832                                            0832
*               RTHTREGS(FIVE)->EEDHRSRS=SRSTATUS;/* SAVE STATUS   0833
*                                      BYTES FROM RSR        @YM05569*/
         LH    @11,SRSTATUS(,R6)                                   0833
         N     @11,@CF03408                                        0833
         STH   @11,EEDHRSRS(,@12)                                  0833
*           END;                                                   0834
*       GO TO RTHRETRY;             /* GO SET UP FOR RETRY           */
         B     RTHRETRY                                            0835
*RRTHRECD:                          /* RECOVERY ACTION FOR RECORDING
*                                      SEGMENT                       */
*       IF RTHTRTRY='1'B THEN       /* IF THIS IS THE SECOND ERROR   */
RRTHRECD TM    RTHTRTRY(R7),B'00010000'                            0836
         BNO   @RF00836                                            0836
*         RTMKRCDF='1'B;            /* INDICATE MCH RECORD NOT     0837
*                                      RECORDED                      */
         OI    RTMKRCDF(R6),B'01000000'                            0837
*       GO TO RTHRETRY;             /* GO SET UP FOR RETRY           */
         B     RTHRETRY                                            0838
*RRTHSOFT:                          /* RECOVERY ACTION FOR SOFTWARE
*                                      INFORMATION PROCESSNG   SEGMNT*/
*       IF RTHTRTRY='0'B THEN       /* IF THIS IS THE INITIAL ERROR  */
RRTHSOFT TM    RTHTRTRY(R7),B'00010000'                            0839
         BZ    @RT00839                                            0839
*         GO TO RTHRETRY;           /* GO SET UP FOR RETRY           */
*       RTYREGS=ERREGS;             /* THIS IS THE 2ND ERROR - PRIME
*                                      RETRY REGS WITH CALLER'S REGS */
         MVC   RTYREGS(64,R8),ERREGS(R13)                          0841
*       R4=ERREG14;                 /* SET UP RETRY ADDRESS TO RETRY
*                                      TO MCH                        */
         L     R4,ERREG14(,R13)                                    0842
*       RTYREG1=R6;                 /* SET UP RETRY REG1 TO POINT TO
*                                      THE CPU RELATED SAVE AREA     */
         ST    R6,RTYREG1(,R8)                                     0843
*       RTMKR1=MACHCKCC;            /* PLACE MACHCK COMP CODE IN REG1
*                                      SLOT OF SAVE AREA             */
         L     @12,MACHCKCC                                        0844
         ST    @12,RTMKR1(,R6)                                     0844
*       RFY                                                        0845
*         PSW BASED(ADDR(RTMKMPSW));                               0845
*       PSWIC=ADDR(CVTQABST);       /* PLACE ADDR OF SVC 13 IN PSW TO
*                                      BE RELOADED BY MCH            */
         LA    @12,64                                              0846
         ALR   @12,R6                                              0846
         L     @11,CVTPTR                                          0846
         LA    @11,CVTQABST(,@11)                                  0846
         ST    @11,PSWIC(,@12)                                     0846
*       RTMKMPSW=ABENDPSW;          /* PLACE AN ABEND PSW IN SLOT FOR
*                                      THE MACHCK OLD PSW TO BE    0847
*                                      RELOADED BY MCH               */
         MVC   RTMKMPSW(8,R6),ABENDPSW                             0847
*       RFY                                                        0848
*         PSW BASED(ADDR(RTMKMPSW));                               0848
*       PSWIC=ADDR(CVTQABST);       /* PLACE ADDR OF SVC 13 IN PSW TO
*                                      BE RELOADED BY MCH            */
         ST    @11,PSWIC(,@12)                                     0849
*       RFY                                                        0850
*        (R14,                                                     0850
*         R15) RSTD;                /* GET WORKREGS FOR SETFRR       */
*       GEN(SETFRR D,WRKREGS=(R14,R15));/* DELETE THIS FRR           */
         SETFRR D,WRKREGS=(R14,R15)
*       RFY                                                        0852
*        (R14,                                                     0852
*         R15) RSTD;                /* RELEASE REGS USED BY SETFRR   */
*       GO TO RTHSETRP;             /* GO TO DO THE SETRP            */
         B     RTHSETRP                                            0853
*RRTHEXIT:                          /* RECOVERY ACTION FOR EXIT    0854
*                                      PROCESSING                    */
*       IF RTHTRTRY='0'B THEN       /* IF THIS IS THE INITIAL ERROR  */
RRTHEXIT TM    RTHTRTRY(R7),B'00010000'                            0854
         BZ    @RT00854                                            0854
*         GO TO RTHRETRY;           /* GO SET UP FOR RETRY           */
*       RTYREGS=ERREGS;             /* THIS IS THE 2ND ERROR - PRIME
*                                      RETRY REGS WITH CALLER'S REGS */
         MVC   RTYREGS(64,R8),ERREGS(R13)                          0856
*       R4=ERREG14;                 /* SET UP RETRY ADDRESS TO RETRY
*                                      TO MCH                        */
         L     R4,ERREG14(,R13)                                    0857
*       RTYREG1=R6;                 /* SET UP RETRY REG1 TO POINT TO
*                                      THE CPU RELATED SAVE AREA     */
         ST    R6,RTYREG1(,R8)                                     0858
*       RFY                                                        0859
*        (R14,                                                     0859
*         R15) RSTD;                /* GET WORKREGS FOR SETFRR       */
*       GEN(SETFRR D,WRKREGS=(R14,R15));/* DELETE THIS FRR           */
         SETFRR D,WRKREGS=(R14,R15)
*       RFY                                                        0861
*        (R14,                                                     0861
*         R15) RSTD;                /* RELEASE REGS USED BY SETFRR   */
*       GO TO RTHSETRP;             /* GO TO DO THE SETRP            */
         B     RTHSETRP                                            0862
*RTHRETRY:                          /* SET UP FOR RETRY              */
*       IF RTHTRTRY='0'B THEN       /* IF THIS IS THE INITIAL ERROR  */
RTHRETRY TM    RTHTRTRY(R7),B'00010000'                            0863
         BNZ   @RF00863                                            0863
*         DO;                                                      0864
*           RTHTRTRY='1'B;          /* TURN ON RECURSION INDICATOR   */
         OI    RTHTRTRY(R7),B'00010000'                            0865
*           R4=RTHRLBL1(R2);        /* SET UP RETRY ADDRESS          */
         LR    @12,R2                                              0866
         SLA   @12,2                                               0866
         L     R4,RTHRLBL1-4(@12)                                  0866
*         END;                      /* END OF INITIAL ERROR ACTION   */
*       ELSE                        /* THIS IS THE 2ND ERROR         */
*         DO;                                                      0868
         B     @RC00863                                            0868
@RF00863 DS    0H                                                  0869
*           RTHTRTRY='0'B;          /* TURN OFF RECURSION INDICATOR  */
         NI    RTHTRTRY(R7),B'11101111'                            0869
*           R4=RTHRLBL2(R2);        /* SET UP RETRY ADDRESS          */
         LR    @12,R2                                              0870
         SLA   @12,2                                               0870
         L     R4,RTHRLBL2-4(@12)                                  0870
*         END;                      /* END OF 2ND ERROR ACTION       */
*RESTREGS:                          /* SET UP RETRY REGS             */
*       RTYREG3=RTHTREGS(FIVE);     /* PRIME ADDR OF REPAIR STATUS 0872
*                                      EED                           */
@RC00863 DS    0H                                                  0872
RESTREGS L     @12,RTHTREGS+16(,R7)                                0872
         ST    @12,RTYREG3(,R8)                                    0872
*       RTYREG4=R7;                 /* PRIME PTR TO TRACKING AREA    */
         ST    R7,RTYREG4(,R8)                                     0873
*       RTYREG5=RTHTREGS(FOUR);     /* PRIME ADDR OF 1ST EED         */
         L     @12,RTHTREGS+12(,R7)                                0874
         ST    @12,RTYREG5(,R8)                                    0874
*       RTYREG6=RTHTREGS(TWO);      /* PRIME PTR TO LRB              */
         L     @12,RTHTREGS+4(,R7)                                 0875
         ST    @12,RTYREG6(,R8)                                    0875
*       RTYREG7=ADDR(RTHRETRN);     /* PRIME RETURN ADDRESS TO RTM   */
         L     @12,@CV02940                                        0876
         ST    @12,RTYREG7(,R8)                                    0876
*       RTYREG8=ADDR(RTHSTART);     /* PRIME RTH'S BASE REG          */
         L     @12,@CV02939                                        0877
         ST    @12,RTYREG8(,R8)                                    0877
*       RTYREG9=ADDR(RTMSTART);     /* PRIME RTM'S BASE REG          */
         L     @12,@CV02894                                        0878
         ST    @12,RTYREG9(,R8)                                    0878
*       RTYREG10=R6;                /* PRIME PTR TO CPU RELATED WORK
*                                      SAVE AREA                     */
         ST    R6,RTYREG10(,R8)                                    0879
*RTHSETRP:                          /* PERFORM SETRP WITH RETRY    0880
*                                      INDICATION                    */
*       RFY                                                        0880
*         RTRYPTR BASED(R4);                                       0880
RTHSETRP DS    0H                                                  0881
*       DO;                         /* SETRP RETADDR(RTRYPTR)RETREGS(
*                                      YES)RUB(REGID)RC(4)RECORD(YES)
*                                      RECPARM(RTHID)                */
*         RESPECIFY                                                0882
*          (GPR00P,                                                0882
*           GPR01P,                                                0882
*           GPR14P,                                                0882
*           GPR15P) RSTD;                                          0882
*         GPR01P->SDWARCDE=4;       /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(GPR01P),X'04'                              0883
*         GPR01P->SDWARTYA=ADDR(RTRYPTR);/* SAVE RETRY ADDRESS       */
         ST    R4,SDWARTYA(,GPR01P)                                0884
*         GPR01P->SDWARCRD='1'B;    /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0885
*         GPR15P=ADDR(RTHID);       /* ACCESS RECORD PARAMETER LIST  */
         LA    GPR15P,RTHID                                        0886
*         GPR01P->SDWARECP=GPR15P->I256C(1:24);/* COPY RECORD      0887
*                                      PARAMETERS                    */
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0887
*         GPR01P->SDWAUPRG='1'B;    /* TURN ON RETREGS INDICATOR     */
         OI    SDWAUPRG(GPR01P),B'00001000'                        0888
*         GPR15P=ADDR(REGID);       /* GET PTR TO REG UPDATE BLOCK   */
         LA    GPR15P,REGID(,R8)                                   0889
*         GPR00P=GPR15P->I015F;     /* ACCESS REGISTER BIT PATTERN   */
         LH    GPR00P,I015F(,GPR15P)                               0890
*         GPR15P=GPR15P+2;          /* CREATE PTR TO USER REG VALUES */
         AL    GPR15P,@CF00110                                     0891
*         GPR14P=ADDR(GPR01P->SDWASRSV);/* CREATE PTR TO SDWA SAVE 0892
*                                      AREA                          */
         LA    GPR14P,SDWASRSV(,GPR01P)                            0892
*         GEN(SLL   0,16);          /* SHIFT BIT PATTERN TO HIGH   0893
*                                      ORDER                         */
         SLL   0,16
*R0008:                                                            0894
*         GEN FLOWS(I0008);                                        0894
R0008    DS    0H                                                  0894
         ALR   0,0                    SHIFT BIT TO SIGN POSITION
         BC    12,I0008               BRANCH IF BIT NOT ON
         MVC   0(4,14),0(15)          MODIFY REGISTER IN SDWA
         LA    15,4(15)               UPDATE POINTER
*I0008:                                                            0895
*         GENERATE FLOWS(R0008);                                   0895
I0008    DS    0H                                                  0895
         LA    14,4(14)               UPDATE PTR IN SDWA
         BC    5,R0008                TEST ALR CONDITION CODE TO TEST
*                                     IF ALL BITS EXHAUSTED
*         RESPECIFY                                                0896
*          (GPR00P,                                                0896
*           GPR01P,                                                0896
*           GPR14P,                                                0896
*           GPR15P) UNRSTD;                                        0896
*       END;                                                       0897
*       RFY                                                        0898
*        (R2,                                                      0898
*         R4,                                                      0898
*         R6,                                                      0898
*         R13) UNRSTD;              /* FREE REGS USED FOR RETRY      */
*     END;                          /* END OF SET UP FOR RETRY       */
*   ELSE                            /* IF ERROR IS A DATERR OR A   0900
*                                      RESTART ERROR                 */
*     DO;                           /* SET UP FOR PERCOLATION        */
         B     @RC00778                                            0900
@RF00778 DS    0H                                                  0901
*       IF RTHTREGS(FOUR)>EEDNULL THEN/* IF EEDS NEED TO BE FREED    */
         L     @12,RTHTREGS+12(,R7)                                0901
         C     @12,@CF00079                                        0901
         BNH   @RF00901                                            0901
*         DO;                                                      0902
*           RFY                                                    0903
*            (R6,                                                  0903
*             R12) RSTD;            /* GET REGS FOR FREECELL         */
*           R6=RTHTREGS(FOUR);      /* PLACE EED PTR IN REGISTER     */
         L     @11,RTHTREGS+12(,R7)                                0904
         LR    R6,@11                                              0904
*           R12=R1;                 /* SAVE REG1 VALUE - DESTROYED BY
*                                      FREECELL ROUTINE              */
         LR    R12,R1                                              0905
*           RFY                                                    0906
*            (R9,                                                  0906
*             R11) RSTD;                                           0906
*           R11=R9;                 /* SAVE THE VALUE OF R9 SINCE IT
*                                      IS DESTROYED BY FREEDCEL      */
         LR    R11,R9                                              0907
*           CALL FREEDCEL;          /* CALL FREECELL ROUTINE         */
         L     @15,@CA03293                                        0908
         BALR  @14,@15                                             0908
*           R9=R11;                 /* RESTORE THE VALUE OF R9       */
         LR    R9,R11                                              0909
*           RFY                                                    0910
*            (R11,                                                 0910
*             R9) UNRSTD;                                          0910
*           R1=R12;                 /* RESTORE REG1 - RTCA ADDRESS   */
         LR    R1,R12                                              0911
*           RFY                                                    0912
*            (R6,                                                  0912
*             R12) UNRSTD;          /* RELEASE REGS                  */
*         END;                      /* END OF FREECELL PROCESSING    */
*       DO;                         /* SETRP                       0914
*                                      RECORD(YES)RECPARM(RTHID)RC(0)*/
@RF00901 DS    0H                                                  0915
*         RESPECIFY                                                0915
*          (GPR00P,                                                0915
*           GPR01P,                                                0915
*           GPR14P,                                                0915
*           GPR15P) RSTD;                                          0915
*         GPR01P->SDWARCDE=0;       /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0916
*         GPR01P->SDWARCRD='1'B;    /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0917
*         GPR15P=ADDR(RTHID);       /* ACCESS RECORD PARAMETER LIST  */
         LA    GPR15P,RTHID                                        0918
*         GPR01P->SDWARECP=GPR15P->I256C(1:24);/* COPY RECORD      0919
*                                      PARAMETERS                    */
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0919
*         RESPECIFY                                                0920
*          (GPR00P,                                                0920
*           GPR01P,                                                0920
*           GPR14P,                                                0920
*           GPR15P) UNRSTD;                                        0920
*       END;                                                       0921
*     END;                          /* END OF PERCOLATION ACTION     */
*   RFY                                                            0923
*     R14 RSTD;                     /* GET REG TO RETURN TO RTS      */
@RC00778 DS    0H                                                  0924
*   R14=R5;                         /* RESTORE RETURN ADDRESS        */
         LR    R14,R5                                              0924
*   RFY                                                            0925
*    (R1,                                                          0925
*     R5,                                                          0925
*     R7,                                                          0925
*     R8) UNRSTD;                   /* FREE REGS USED BY FRR         */
*   RETURN;                         /* RETURN TO RTS                 */
         B     @EL00001                                            0926
*   RFY                                                            0927
*     R14 UNRSTD;                   /* RELEASE REG FOR RETURN ADDR -
*                                      END OF RTHFRR SEGMENT         */
*/* ******************************************************************/
*/* THIS SEGMENT IS AN INTERNAL PROCEDURE WHICH RESETS THE RECOVERY  */
*/* STACK VECTOR TABLE FO THE PSA(PSARSVT) TO THE STATE THAT EXISTED */
*/* PRIOR TO A IEAVTRTS FAILURE.  THIS FUNCTION IS PERFORMED BY      */
*/* FINDING THE RSVT ENTRY ASSOCIATED WITH THE FRR STACK THAT WAS    */
*/* CURRENT AT THE TIME OF THE IEAVTRTS FAILURE AND STORING INTO     */
*/* THE FRR STACK SAVE AREA PORTION OF THIS ENTRY THE ADDRESS OF     */
*/* THIS INTERRUPTED FRR STACK WHICH WAS CURRENT WHEN IEAVTRTS       */
*/* FAILED                                                           */
*/* THIS SEGMENT IS ONLY CALLED BY FRR WHICH PROTECT IEAVTRTS SO     */
*/* THAT IS BOTH RETRY AND PERCOLATION SITUATIONS THE PROPER STATUS  */
*/* OF THE RSVT CAN BE MAINTAINED THROUGHOUT THE RECOVERY PROCESS    */
*/* INPUT---                                                         */
*/*  - INTSTACK REGISTER(R5) CONTAINS THE ADDRESS OF THE FRR STACK   */
*/*    TO BE STORED IN THE RSVT                                      */
*/*  - PSACSTK FIELD OF THE PSA POINTS TO THE INTERRUPTED STACK      */
*/*    WHOSE ENTRY MUST BE FOUND IN THE RSVT                         */
*/*  - RSVTIDX REGISTER(R4),STKIDX REGISTER(R11) ARE USED AS WORK    */
*/*    TO INDEX INTO THE RSVT                                        */
*/* OUTPUT---                                                        */
*/*  - THE FRR STACK ADDRESS IN INTSTACK REGISTER(R5) IS STORED IN   */
*/*    THE FRR STACK ADDRESS SAVE AREA OF THE RSVT ENTRY ASSOCIATED  */
*/*    WITH THE FRR STACK POINTED TO BY PSACSTK                      */
*/* NOTES---                                                         */
*/*  - REGS(R1,R0,R4,R11,R14) ARE RESTRICTED THROUGHOUT THIS INTERNAL*/
*/*    PROCEDURE                                                     */
*/* ******************************************************************/
*                                                                  0928
*STORESTK:                                                         0928
*   PROC OPTIONS(NOSAVE NOSAVEAREA);                               0928
STORESTK DS    0H                                                  0929
*   RFY                                                            0929
*    (R14,                                                         0929
*     R1,                                                          0929
*     R0,                                                          0929
*     R5,                                                          0929
*     R4,                                                          0929
*     R11) RSTD;                                                   0929
*   R4=THREE;                                                      0930
         LA    R4,3                                                0930
*   R11=TWO;                                                       0931
         LA    R11,2                                               0931
*   DO WHILE PSARSVT(R4)^=PSACSTK;                                 0932
         B     @DE00932                                            0932
@DL00932 DS    0H                                                  0933
*     R11=R11+NRMSTK;                                              0933
         AL    R11,@CF00079                                        0933
*     R4=TWO*R11-NRMSTK;                                           0934
         LR    R4,R11                                              0934
         ALR   R4,R4                                               0934
         BCTR  R4,0                                                0934
*   END;                                                           0935
@DE00932 LR    @12,R4                                              0935
         SLA   @12,2                                               0935
         L     @08,PSARSVT-4(@12)                                  0935
         C     @08,PSACSTK                                         0935
         BNE   @DL00932                                            0935
*   PSARSVT(R4+ONE)=R5;                                            0936
         ST    R5,PSARSVT(@12)                                     0936
*   END STORESTK;                                                  0937
@EL00004 DS    0H                                                  0937
@EF00004 DS    0H                                                  0937
@ER00004 BR    @14                                                 0937
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00P PTR(31) REG(0),                                       0938
*     GPR01P PTR(31) REG(1),                                       0938
*     GPR14P PTR(31) REG(14),                                      0938
*     GPR15P PTR(31) REG(15);                                      0938
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0939
*     I031F FIXED(31) BASED,                                       0939
*     I031P PTR(31) BASED,                                         0939
*     I015F FIXED(15) BASED,                                       0939
*     I015P PTR(15) BASED,                                         0939
*     I008P PTR(8) BASED,                                          0939
*     I001C CHAR(1) BASED;                                         0939
*   END IEAVTRTR                                                   0940
*                                                                  0940
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSUT5  (RTRSPEC )                                       */
*/*%INCLUDE SYSUT5  (RTRDCLS )                                       */
*/*%INCLUDE SYSLIB  (IHART1W )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHAASXB )                                       */
*/*%INCLUDE SYSLIB  (IHALCCA )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHAWSAVT)                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IHAYSTAK)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHARTCT )                                       */
*/*%INCLUDE SYSLIB  (IHASNP  )                                       */
*/*%INCLUDE SYSLIB  (IHASDUMP)                                       */
*/*%INCLUDE SYSUT5  (RCOVGETM)                                       */
*/*%INCLUDE SYSUT5  (RCVGTFRC)                                       */
*/*%INCLUDE SYSUT5  (SETRTCA )                                       */
*/*%INCLUDE SYSUT5  (FILLRTCA)                                       */
*/*%INCLUDE SYSUT5  (INERRTYP)                                       */
*/*%INCLUDE SYSUT5  (INREGPSW)                                       */
*/*%INCLUDE SYSLIB  (ERRORID )                                       */
*/*%INCLUDE SYSUT5  (INITMODE)                                       */
*/*%INCLUDE SYSUT5  (INITDMPO)                                       */
*/*%INCLUDE SYSUT5  (RCRDRTCA)                                       */
*/*%INCLUDE SYSUT5  (PREPRCRD)                                       */
*/*%INCLUDE SYSUT5  (RECORDIT)                                       */
*/*%INCLUDE SYSUT5  (FREEDCEL)                                       */
*/*%INCLUDE SYSUT5  (RTMRSFRR)                                       */
*/*%INCLUDE SYSUT5  (LPROUTER)                                       */
*/*%INCLUDE SYSUT5  (ABORT   )                                       */
*/*%INCLUDE SYSUT5  (LPRECOV1)                                       */
*/*%INCLUDE SYSUT5  (SRMDRCOV)                                       */
*/*%INCLUDE SYSUT5  (GETGRTCA)                                       */
*/*%INCLUDE SYSUT5  (RTMSMFRR)                                       */
*/*%INCLUDE SYSUT5  (RTHFRR  )                                       */
*/*%INCLUDE SYSUT5  (STORESTK)                                       */
*                                                                  0940
*       ;                                                          0940
         B     @EL00001                                            0940
@DATA    DS    0H
@CH01866 DC    H'108'
@SM03412 MVC   SDWADPSL(0,@15),STORLIST(@08)
@DATD    DSECT
         DS    0F
IEAVTRTR CSECT
         DS    0F
@CF00079 DC    F'1'
@CF00110 DC    F'2'
@CF00113 DC    F'4'
@CF00075 DC    F'8'
@CF00191 DC    F'12'
@CF00200 DC    F'16'
@CF00118 DC    F'30'
@CF01515 DC    F'84'
@CF03393 DC    F'868'
@CF02834 DC    F'4095'
@CF03392 DC    F'-89'
@CF03411 DC    F'-4'
@CF02842 DC    XL4'7FFFFFFF'
@CF03408 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
IEAVTRTR CSECT
         NOPR  ((@ENDDATD-@DATD)*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CA03293 DC    A(FREEDCEL)
@CV02871 DC    V(POSTSRRP)
@CV02872 DC    V(NORTSRP)
@CV02873 DC    V(CWTRP)
@CV02874 DC    V(EEDFRERP)
@CV02875 DC    V(FREEMNRP)
@CV02890 DC    V(SRBEEDRP)
@CV02891 DC    V(XMEEDRP)
@CV02892 DC    V(RT2EEDRP)
@CV02893 DC    V(RT1EEDRP)
@CV02894 DC    V(RTMSTART)
@CV02927 DC    V(EEDRP)
@CV02928 DC    V(TIMERP)
@CV02929 DC    V(STRG1RP)
@CV02930 DC    V(PARMSRP)
@CV02931 DC    V(STRG2RP)
@CV02932 DC    V(RECRDRP)
@CV02933 DC    V(SOFTWRP)
@CV02934 DC    V(EXITRP)
@CV02939 DC    V(RTHSTART)
@CV02940 DC    V(RTHRETRN)
@CV03009 DC    V(PUGETM2)
         DS    0D
SQARTCA  DS    FL4
         ORG   SQARTCA
SQASPOOL DC    AL1(245)
SQALEN   DC    AL3(512+272)
         ORG   SQARTCA+4
LFRRPSW  DC    XL4'040C0000'
@CC02807 DC    C'ASCB'
@CB02840 DC    X'FFFF'
RTRMODN  DC    CL8'IEAVTRTS'
RTRCSCT  DC    CL8'IEAVTRTS'
GTFREXN  DC    CL8'RCOVRGTF'
RCRDREXN DC    CL8'RCOVRCRD'
GETMREXN DC    CL8'RCOVGETM'
FRRJNAME DC    CL8'NONE-FRR'
GETMRMSG DC    CL94'RETRY IEAVTRTS AFTER FAILURE IN GETMAIN   ATTEMPTINC
               G TO ACQUIRE A SRB RTCA FOR USE BY IEAVTRTS'
GETMPMSG DC    CL99'PERCOLATE ON DATERR OR RESTART ERROR    OCCURRING WC
               HILE ATTEMPTING TO ACQUIRE SRB RTCA VIA GETMAIN'
GTFPMSG  DC    CL89'PERCOLATE ON DATERR OR RESTART ERROR     OCCURRING C
               WHILE ATTEMPTING TO TRACE RTCA VIA GTF'
GTFRMSG  DC    CL74'RETRY IEAVTRTS AFTER GTF FAILURE ATTEMPT ING TO TRAC
               CE RTCA RETURNED BY FRR'
RCRDPMSG DC    CL85'PERCOLATE ON DATERR OR RESTART ERROR    OCCURRING WC
               HILE ATTEMPTING TO RECORD THE RTCA'
RCRDRMSG DC    CL90'RETRY IEAVTRTS AFTER FAILURE IN SOFTWAR E RECORDINGC
                FACILITY ATTEMPTING TO RECORD THE RTCA'
DRCRDMSG DC    CL32'IEAVTRTS DEFAULT RECOVERY RECORD'
         DS    CL3
RT1CPOOL DS    CL4
         ORG   RT1CPOOL
EBCDICNM DC    CL3'RT1'
HEXNM    DC    X'04'
         ORG   RT1CPOOL+4
RESCHID  DS    CL24
         ORG   RESCHID
RESCHMN  DC    CL8'IEAVTRTM'
RESCHCN  DC    CL8'IEAVTRTM'
RESCHFN  DC    CL8'RTMRSFRR'
         ORG   RESCHID+24
SLIHMID  DS    CL24
         ORG   SLIHMID
SLIHMMN  DC    CL8'IEAVTRTM'
SLIHMCN  DC    CL8'IEAVTRTM'
SLIHMFN  DC    CL8'RTMSMFRR'
         ORG   SLIHMID+24
RTHID    DS    CL24
         ORG   RTHID
RTHMN    DC    CL8'IEAVTRTH'
RTHCN    DC    CL8'IEAVTRTH'
RTHFN    DC    CL8'RTHFRR  '
         ORG   RTHID+24
ABENDPSW DS    CL8
         ORG   ABENDPSW
ABNDWRD1 DC    X'040C0000'
ABNDADDR DC    A(0)
         ORG   ABENDPSW+8
MACHCKCC DC    X'900F3000'
RTRPATCH DS    CL200
YSTAK    DC    F'16'
         DC    F'4'
         DC    F'16'
         DC    F'16'
         DC    F'4'
         DC    F'4'
         DC    F'16'
         DC    F'16'
MGRRCOV  DC    AL4(RVPOSTSR)
         DC    AL4(RVNORTS)
         DC    AL4(RVRSTRT)
         DC    AL4(RVNORST)
EXITRCOV DC    AL4(RVEEDFRE)
         DC    AL4(RVFREEMN)
LPRRADDR DC    AL4(RT1LPRR1)
FRRRECOV DC    AL4(RVNOSRB)
         DC    AL4(RVFRESRB)
         DC    AL4(RVTCBTRM)
         DC    AL4(RVRESRT1)
         DC    AL4(RVRESCHD)
         DC    AL4(RVNOSRB)
         DC    AL4(RVFRESRB)
         DC    AL4(RVSRBCMP)
         DC    AL4(RVRESRT2)
         DC    AL4(RVTCBTRM)
         DC    AL4(RVRESRT1)
         DC    AL4(RVMEMTRM)
         DC    AL4(RVMEMCMP)
RTRYLABL DC    VL4(SRBEEDRP)
         DC    VL4(XMEEDRP)
         DC    VL4(RT2EEDRP)
         DC    VL4(RT1EEDRP)
BITS     DC    X'80'
         DC    X'40'
         DC    X'20'
         DC    X'10'
         DC    X'08'
         DC    X'04'
         DC    X'02'
         DC    X'01'
RTHRECOV DC    AL4(RRTHSTRT)
         DC    AL4(RRTHEEDS)
         DC    AL4(RRTHTIME)
         DC    AL4(RRTHSTG1)
         DC    AL4(RRTHPARM)
         DC    AL4(RRTHSTG2)
         DC    AL4(RRTHRECD)
         DC    AL4(RRTHSOFT)
         DC    AL4(RRTHEXIT)
RTHRLBL1 DC    VL4(EEDRP)
         DC    VL4(EEDRP)
         DC    VL4(TIMERP)
         DC    VL4(STRG1RP)
         DC    VL4(PARMSRP)
         DC    VL4(STRG2RP)
         DC    VL4(RECRDRP)
         DC    VL4(SOFTWRP)
         DC    VL4(EXITRP)
RTHRLBL2 DC    VL4(EEDRP)
         DC    VL4(TIMERP)
         DC    VL4(STRG1RP)
         DC    VL4(RECRDRP)
         DC    VL4(STRG2RP)
         DC    VL4(RECRDRP)
         DC    VL4(SOFTWRP)
IEAVTRTR CSECT
RUNCLLK  DC    VL4(PUGETM2)
@DATD    DSECT
@ENDDATD EQU   *
IEAVTRTR CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14P   EQU   @14
GPR15P   EQU   @15
R10      EQU   @10
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSACPULA EQU   PSA+518
PSALCCAV EQU   PSA+528
PSAANEW  EQU   PSA+544
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
SNAPPTR  EQU   0
ASCBPTR  EQU   0
FRREPTR  EQU   0
LCCAPTR  EQU   0
FRRSPTR  EQU   0
SDWAPTR  EQU   0
TCBPTR   EQU   0
ASXBPTR  EQU   0
SDUMPPTR EQU   0
RT1TRACK EQU   0
RT1TRECC EQU   RT1TRACK
RT1TLPN  EQU   RT1TRECC
RT1TLPID EQU   RT1TRECC+1
RT1TENPT EQU   RT1TRECC+2
RT1TACQR EQU   RT1TRECC+3
RT1TREGS EQU   RT1TRACK+4
RTMBRTAB EQU   0
RTMBTERM EQU   RTMBRTAB
MODEBYTE EQU   0
MODEDIS  EQU   MODEBYTE
MODETYP1 EQU   MODEBYTE
MODESRB  EQU   MODEBYTE
EED      EQU   0
EEDFWRDP EQU   EED
EEDDES   EQU   EED+4
EEDFLAGS EQU   EEDDES+1
EEDERFL  EQU   EEDFLAGS
EEDERROR EQU   EED+8
EEDVARBL EQU   EED+12
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFX    EQU   TCBFLGS1
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBABTRM EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
ASCB     EQU   0
ASCBASCB EQU   ASCB
ASCBSUPC EQU   ASCB+16
ASCBASID EQU   ASCB+36
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBTERM EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBASXB EQU   ASCB+108
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBJBNI EQU   ASCB+172
ASCBJBNS EQU   ASCB+176
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
ASXB     EQU   0
ASXBAEQ  EQU   ASXB+168
ASXBSECR EQU   ASXB+199
ASCBSFLG EQU   ASXBSECR
ASXBCASW EQU   ASXB+216
ASXBCRB1 EQU   ASXBCASW
LCCA     EQU   0
LCCAPVAD EQU   LCCA+148
LCCAIHRC EQU   LCCA+520
LCCAIHR1 EQU   LCCAIHRC
LCCAIHR2 EQU   LCCAIHRC+1
LCCAIHR3 EQU   LCCAIHRC+2
LCCAIHR4 EQU   LCCAIHRC+3
LCCASPIN EQU   LCCA+524
LCCASPN1 EQU   LCCASPIN
LCCASPN2 EQU   LCCASPIN+1
LCCASPN3 EQU   LCCASPIN+2
LCCASPN4 EQU   LCCASPIN+3
LCCACPUS EQU   LCCA+536
LCCADSF1 EQU   LCCA+540
LCCADSF2 EQU   LCCA+541
LCCASRBM EQU   LCCADSF2
LCCASPSA EQU   LCCA+544
LCCACRFL EQU   LCCA+692
LCCACREX EQU   LCCA+693
LCCALKFG EQU   LCCA+694
LCCASRBF EQU   LCCA+720
WSAG     EQU   0
WSAC     EQU   0
WSACRTMK EQU   WSAC+20
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSEMP  EQU   FRRSHEAD
FRRSELEN EQU   FRRSHEAD+8
FRRSCURR EQU   FRRSHEAD+12
FRRSRTMW EQU   FRRS+16
FRRSENTR EQU   0
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
FRRSRCUR EQU   FRRSFLG1
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWATRAN EQU   SDWAAEC1+4
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWATRN2 EQU   SDWAAEC2+4
SDWASRSV EQU   SDWA+136
SDWASR00 EQU   SDWASRSV
SDWASR01 EQU   SDWASRSV+4
SDWASR02 EQU   SDWASRSV+8
SDWASR04 EQU   SDWASRSV+16
SDWASR05 EQU   SDWASRSV+20
SDWASR06 EQU   SDWASRSV+24
SDWASR07 EQU   SDWASRSV+28
SDWASR08 EQU   SDWASRSV+32
SDWASR09 EQU   SDWASRSV+36
SDWASR10 EQU   SDWASRSV+40
SDWASR11 EQU   SDWASRSV+44
SDWASR15 EQU   SDWASRSV+60
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAMCHK EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWAERRB EQU   SDWAFLGS+1
SDWATYP1 EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWASRBM EQU   SDWAERRB
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWACLUP EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWAERFL EQU   SDWAERRD
SDWAFMID EQU   SDWA+236
SDWAIOFS EQU   SDWA+238
SDWACPUI EQU   SDWA+239
SDWARTYA EQU   SDWA+240
SDWARECA EQU   SDWA+244
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWASALL EQU   SDWAACF3
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWAASID EQU   SDWA+288
SDWASEQ# EQU   SDWA+290
SDWARECP EQU   SDWA+292
SDWAMODN EQU   SDWARECP
SDWACSCT EQU   SDWARECP+8
SDWAREXN EQU   SDWARECP+16
SDWADPLA EQU   SDWA+316
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARCPL EQU   SDWA+364
SDWAERTM EQU   SDWA+396
SDWARA   EQU   SDWA+400
SDWAVRAL EQU   SDWARA
SDWADPVA EQU   SDWARA+2
SDWAEBC  EQU   SDWADPVA
SDWAURAL EQU   SDWARA+3
SDWAVRA  EQU   SDWARA+4
CVTMAP   EQU   0
CVTBTERM EQU   CVTMAP+52
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVT0DS   EQU   CVTMAP+136
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTQABST EQU   CVTMAP+212
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
RTCT     EQU   0
RTCTSAP  EQU   RTCT+4
RTCTSAP1 EQU   RTCTSAP
RTCTSAP2 EQU   RTCTSAP+1
RTCTSUP  EQU   RTCT+6
RTCTSUP1 EQU   RTCTSUP
RTCTSUP2 EQU   RTCTSUP+1
RTCTSAO  EQU   RTCT+8
RTCTSAO1 EQU   RTCTSAO
RTCTSAO2 EQU   RTCTSAO+1
RTCTSUO  EQU   RTCT+10
RTCTSUO1 EQU   RTCTSUO
RTCTSUO2 EQU   RTCTSUO+1
RTCTSDO  EQU   RTCT+12
RTCTSDO1 EQU   RTCTSDO
RTCTSDO2 EQU   RTCTSDO+1
RTCTABD  EQU   RTCT+14
RTCTIDMP EQU   RTCTABD
RTCTSDF  EQU   RTCT+16
RTCTSDF1 EQU   RTCTSDF
RTCTSDF2 EQU   RTCTSDF+1
RTCTSDDS EQU   RTCT+36
RTCTFLG  EQU   RTCTSDDS+3
RTCTRFLG EQU   RTCT+176
SNPPARMS EQU   0
SNPIDENT EQU   SNPPARMS
SNPFLAG  EQU   SNPPARMS+1
SNPSLIST EQU   SNPFLAG
SNPSDATA EQU   SNPPARMS+4
SNPPDATA EQU   SNPPARMS+6
SNPSTOR  EQU   SNPPARMS+16
SDUMP    EQU   0
SDUSDAT1 EQU   SDUMP+2
SDUSDAT2 EQU   SDUMP+3
NGLBRTCA EQU   0
FRRWA    EQU   0
GLOBRTCA EQU   0
HRDWDATA EQU   0
PSW      EQU   0
PSWIMASK EQU   PSW
PSWKYMWP EQU   PSW+1
PSWCCPMK EQU   PSW+2
PSWIC    EQU   PSW+4
SRMSTAT  EQU   0
CHKPT1   EQU   SRMSTAT
CHKPT2   EQU   SRMSTAT+4
CHKPT5   EQU   SRMSTAT+16
STORLIST EQU   0
LISTPAIR EQU   STORLIST
TOADDR   EQU   LISTPAIR+4
STOREND  EQU   TOADDR
ERREGS   EQU   0
ERREG1   EQU   ERREGS+4
ERREG14  EQU   ERREGS+56
SRMRGSV  EQU   0
SRMWSAV2 EQU   SRMRGSV+4
SRMREGS  EQU   SRMRGSV+8
SRMREG1  EQU   SRMREGS+4
SRMRVSTK EQU   SRMREGS+8
SRMTRTCA EQU   SRMREGS+20
SRMREG10 EQU   SRMREGS+40
SRMREG11 EQU   SRMREGS+44
SRMREG13 EQU   SRMREGS+52
NEWRTCA  EQU   0
PSWEXT1  EQU   0
PSWILCIC EQU   PSWEXT1
JOBNAME  EQU   0
FRRWORKA EQU   0
RETYBLCK EQU   FRRWORKA
FIRSTWRD EQU   RETYBLCK
REGID    EQU   FIRSTWRD+2
RTYREGS  EQU   RETYBLCK+4
RTYBLCK1 EQU   RTYREGS
RTYREG1  EQU   RTYBLCK1+4
RTYREG3  EQU   RTYBLCK1+12
RTYREG4  EQU   RTYBLCK1+16
RTYBLCK2 EQU   RTYREGS+20
RTYREG5  EQU   RTYBLCK2
RTYREG6  EQU   RTYBLCK2+4
RTYREG7  EQU   RTYBLCK2+8
RTYREG8  EQU   RTYBLCK2+12
RTYBLCK3 EQU   RTYREGS+36
RTYREG9  EQU   RTYBLCK3
RTYREG10 EQU   RTYBLCK3+4
RTYREG12 EQU   RTYBLCK3+12
RTYREG13 EQU   RTYBLCK3+16
RTYREG15 EQU   RTYBLCK3+24
FRRTRCKA EQU   0
FRRREGS1 EQU   FRRTRCKA+4
FRRREGS2 EQU   FRRREGS1+4
RTRYPTR  EQU   0
STRDSAVA EQU   0
SAVAREGS EQU   STRDSAVA+12
RTHTRACK EQU   0
RTHTFLGS EQU   RTHTRACK
RTHTLPN  EQU   RTHTFLGS
RTHTBITS EQU   RTHTFLGS+3
RTHTRTRY EQU   RTHTBITS
RTHTEED1 EQU   RTHTBITS
RTHTEED2 EQU   RTHTBITS
RTHTSTGR EQU   RTHTBITS
RTHTREGS EQU   RTHTRACK+4
RTMCPUSA EQU   0
RTMVARBL EQU   RTMCPUSA
RTMKPL   EQU   RTMVARBL+72
RTMKSTAT EQU   RTMCPUSA+84
RTMKFL1  EQU   RTMKSTAT
RTMKRCDF EQU   RTMKFL1
RTMKINVP EQU   RTMKFL1
RTMKRSRC EQU   RTMKFL1
RTMKRSRF EQU   RTMKFL1
RTMKFL2  EQU   RTMKSTAT+1
FRRPARMS EQU   0
FRRPFLGS EQU   FRRPARMS
FRRPFLG1 EQU   FRRPFLGS
FRRPFLG2 EQU   FRRPFLGS+1
FRRPHOOK EQU   FRRPFLG2
FRRPRCUR EQU   FRRPFLG2
FRRPFLPN EQU   FRRPFLGS+2
FRRPRTYA EQU   FRRPARMS+4
FRRPISTK EQU   FRRPARMS+8
FRRPREGS EQU   FRRPARMS+12
I256C    EQU   0
I015F    EQU   0
DUMPARMS EQU   0
I001C    EQU   0
I008P    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
RTCASRB  EQU   0
RT1W     EQU   FRRSRTMW
RT1WNPRS EQU   RT1W
RT1WLPTA EQU   RT1WNPRS
RT1WPSW1 EQU   RT1WNPRS+24
RT1WPSW2 EQU   RT1WNPRS+28
RT1WVARI EQU   RT1WNPRS+32
RT1WPRSV EQU   RT1W+52
RT1WRTCA EQU   RT1WPRSV
RT1WSRBR EQU   RT1WPRSV+4
RT1WEED  EQU   RT1WPRSV+8
RT1WENTR EQU   RT1WPRSV+12
RT1WMODE EQU   RT1WENTR
RT1WSRMD EQU   RT1WENTR+1
RT1WCOVR EQU   RT1WENTR+2
RT1WCLUP EQU   RT1WCOVR
RT1RTRN  EQU   FRRSRTMW
RT1RTRRG EQU   RT1RTRN+4
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTSRBRT EQU   CVTS01+100
CVTRTMCT EQU   CVTS01+224
CVTRTMS  EQU   CVTS01+244
CVTSPSA  EQU   CVTS01+336
CVTRSTWD EQU   CVTS01+368
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
SLIPFLAG EQU   CVTRTMS
SLIPSENS EQU   SLIPFLAG+1
SLIPACCC EQU   SLIPFLAG+2
SLIPACTN EQU   SLIPACCC
EEDREGSP EQU   EEDVARBL
EEDREGS  EQU   EEDREGSP
EEDPSW   EQU   EEDREGSP+64
EEDPSW1  EQU   EEDPSW
EEDPSW2  EQU   EEDPSW+8
EEDINILC EQU   EEDPSW2
EEDDUMPO EQU   EEDVARBL
EEDSCDMP EQU   EEDDUMPO
EEDSDDAT EQU   EEDSCDMP+4
EEDHWREP EQU   EEDVARBL
EEDHMCHS EQU   EEDHWREP+8
EEDHMCHD EQU   EEDHWREP+9
EEDHRSRS EQU   EEDHWREP+12
EEDHRSR1 EQU   EEDHRSRS
EEDHRSR2 EQU   EEDHRSRS+1
EEDERMAP EQU   EEDVARBL
EEDERRID EQU   EEDERMAP+70
EEDESEQ# EQU   EEDERRID
EEDECPUI EQU   EEDERRID+2
EEDETIME EQU   EEDERRID+6
PSARSVTE EQU   PSARSVT
PSACSTK  EQU   PSARSVTE
PSANSTK  EQU   PSARSVTE+4
PSAPSTK  EQU   PSARSVTE+24
PSARSTK  EQU   PSARSVTE+56
CVTPTR   EQU   FLCCVT
RTMRETAD EQU   CHKPT1
RTMBASE  EQU   CHKPT2
FRRSRMRT EQU   FRRWA
ABBMACH  EQU   SDWAMCHI
SNPCDMP  EQU   SNPIDENT
RCRDPARM EQU   SDWARCPL
RCRDHEAD EQU   RCRDPARM
RCRDTYPE EQU   RCRDHEAD
RCRDNAME EQU   RCRDPARM+4
RCRDERID EQU   RCRDPARM+12
RCRDSEQ# EQU   RCRDERID
RCRDCPUI EQU   RCRDERID+2
RCRDASID EQU   RCRDERID+4
RCRDERTM EQU   RCRDERID+6
RCRDINFO EQU   RCRDPARM+24
ECPEXT1  EQU   SDWAAEC1
ECPEXT2  EQU   SDWAAEC2
RSRPARMS EQU   RTMKPL
RSROPTS  EQU   RSRPARMS+4
SRSTATUS EQU   RSRPARMS+6
RTMKRETN EQU   RTMVARBL
RTMKREGS EQU   RTMKRETN
RTMKR1   EQU   RTMKREGS+4
RTMKMPSW EQU   RTMKRETN+64
REGSTOR  EQU   SDWARCPL
FRRPAINF EQU   FRRPREGS
FRRPREG1 EQU   FRRPAINF
FRRPREG2 EQU   FRRPAINF+4
FRRPREG3 EQU   FRRPAINF+8
CKDMPOPT EQU   SRMTRTCA
CKEEDCHN EQU   SRMREG11
CKFLGSCC EQU   SRMREG1
CKSRMSTK EQU   SRMRVSTK
CKSVREAP EQU   SRMREG13
FLC      EQU   PSA
FRRPSW1  EQU   PSW
LKTOFREE EQU   SDWAACF3
RECRTCA  EQU   SDWARCPL
*                                      START UNREFERENCED COMPONENTS
@NM00128 EQU   RTMKRETN+72
RTMKR15  EQU   RTMKREGS+60
RTMKR14  EQU   RTMKREGS+56
RTMKR13  EQU   RTMKREGS+52
RTMKR12  EQU   RTMKREGS+48
RTMKR11  EQU   RTMKREGS+44
RTMKR10  EQU   RTMKREGS+40
RTMKR9   EQU   RTMKREGS+36
RTMKR8   EQU   RTMKREGS+32
RTMKR7   EQU   RTMKREGS+28
RTMKR6   EQU   RTMKREGS+24
RTMKR5   EQU   RTMKREGS+20
RTMKR4   EQU   RTMKREGS+16
RTMKR3   EQU   RTMKREGS+12
RTMKR2   EQU   RTMKREGS+8
RTMKR0   EQU   RTMKREGS
STAT2ADD EQU   RSRPARMS+8
STAT2    EQU   SRSTATUS+1
STAT1    EQU   SRSTATUS
@NM00127 EQU   RSRPARMS+5
@NM00126 EQU   RSROPTS
GLBLLOCK EQU   RSROPTS
STAT2PTR EQU   RSROPTS
@NM00125 EQU   RSROPTS
KEYERR   EQU   RSROPTS
DATAERR  EQU   RSROPTS
@NM00124 EQU   RSROPTS
FRAMECNT EQU   RSRPARMS+2
RBLOCKNO EQU   RSRPARMS
@NM00117 EQU   RCRDPARM+22
@NM00116 EQU   RCRDHEAD+1
PSARSAV  EQU   PSARSVTE+60
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
EEDEASID EQU   EEDERRID+4
@NM00011 EQU   EEDERMAP
EEDHTIME EQU   EEDHWREP+20
EEDHRFSA EQU   EEDHWREP+16
@NM00010 EQU   EEDHWREP+14
EEDHVERQ EQU   EEDHRSR2
EEDHPGFX EQU   EEDHRSR2
EEDHFLSQ EQU   EEDHRSR2
EEDHFSQA EQU   EEDHRSR2
EEDHNUCL EQU   EEDHRSR2
EEDHSPER EQU   EEDHRSR2
EEDHINTC EQU   EEDHRSR2
EEDHOFLN EQU   EEDHRSR2
EEDHCHNG EQU   EEDHRSR1
EEDHMSER EQU   EEDHRSR1
@NM00009 EQU   EEDHRSR1
EEDHCPID EQU   EEDHWREP+10
EEDHTERR EQU   EEDHMCHD
EEDHSOFT EQU   EEDHMCHD
EEDHINSF EQU   EEDHMCHD
EEDHACR  EQU   EEDHMCHD
EEDHSCK  EQU   EEDHMCHD
EEDHPSWU EQU   EEDHMCHD
EEDHREGU EQU   EEDHMCHD
EEDHSKYF EQU   EEDHMCHD
@NM00008 EQU   EEDHMCHS
@NM00007 EQU   EEDHMCHS
EEDHRSRF EQU   EEDHMCHS
EEDRSRC  EQU   EEDHMCHS
EEDINVP  EQU   EEDHMCHS
EEDHTSVL EQU   EEDHMCHS
EEDHRCDF EQU   EEDHMCHS
EEDHSRVL EQU   EEDHMCHS
EEDHSCKE EQU   EEDHWREP+4
EEDHSCKB EQU   EEDHWREP
EEDSDPSL EQU   EEDDUMPO+8
EEDSPDAT EQU   EEDSDDAT+2
EEDSSDAT EQU   EEDSDDAT
EEDSDUMP EQU   EEDSCDMP
EEDTRANS EQU   EEDPSW2+4
EEDINTCD EQU   EEDINILC+2
EEDILC   EQU   EEDINILC+1
@NM00006 EQU   EEDINILC
EEDPSWIC EQU   EEDPSW1+4
EEDPSWMK EQU   EEDPSW1
EEDREG15 EQU   EEDREGS+60
EEDREG14 EQU   EEDREGS+56
EEDREG13 EQU   EEDREGS+52
EEDREG12 EQU   EEDREGS+48
EEDREG11 EQU   EEDREGS+44
EEDREG10 EQU   EEDREGS+40
EEDREG9  EQU   EEDREGS+36
EEDREG8  EQU   EEDREGS+32
EEDREG7  EQU   EEDREGS+28
EEDREG6  EQU   EEDREGS+24
EEDREG5  EQU   EEDREGS+20
EEDREG4  EQU   EEDREGS+16
EEDREG3  EQU   EEDREGS+12
EEDREG2  EQU   EEDREGS+8
EEDREG1  EQU   EEDREGS+4
EEDREG0  EQU   EEDREGS
SLIPCOMP EQU   SLIPACCC
SLIPSVC  EQU   SLIPACTN
SLIPIPGS EQU   SLIPSENS
SLIPREC  EQU   SLIPSENS
SLIPCMP  EQU   SLIPSENS
SLIPNMC  EQU   SLIPSENS
SLIPNDAT EQU   SLIPSENS
SLIPNSVC EQU   SLIPSENS
SLIPNRES EQU   SLIPSENS
SLIPNPC  EQU   SLIPSENS
SLIPMODE EQU   SLIPFLAG
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
RT1RTYAD EQU   RT1RTRRG+60
RT1R0R14 EQU   RT1RTRRG
@NM00003 EQU   RT1RTRN
@NM00002 EQU   RT1WENTR+3
@NM00001 EQU   RT1WCOVR
RT1WEREX EQU   RT1WCOVR
RT1TRTCA EQU   RT1WCOVR
RT1TLOCL EQU   RT1WCOVR
RT1WRTM  EQU   RT1WCOVR
FRRPFLG4 EQU   FRRPFLGS+3
@NM00130 EQU   FRRPFLG2
FRRPSLIP EQU   FRRPFLG2
FRRPRCRD EQU   FRRPFLG2
@NM00129 EQU   FRRPFLG1
FRRPFREE EQU   FRRPFLG1
RTMKCPID EQU   RTMKSTAT+2
RTMKTERR EQU   RTMKFL2
RTMKSOFT EQU   RTMKFL2
RTMKINSF EQU   RTMKFL2
RTMKACR  EQU   RTMKFL2
RTMKSCK  EQU   RTMKFL2
RTMKPSWU EQU   RTMKFL2
RTMKREGU EQU   RTMKFL2
RTMKSKYF EQU   RTMKFL2
RTMKREC4 EQU   RTMKFL1
RTMKSALC EQU   RTMKFL1
RTMKTSVL EQU   RTMKFL1
RTMKSRVL EQU   RTMKFL1
RTMKSV   EQU   RTMVARBL
@NM00123 EQU   RTHTBITS
RTHTENPT EQU   RTHTFLGS+2
@NM00122 EQU   RTHTFLGS+1
SAVREG12 EQU   SAVAREGS+56
SAVREG11 EQU   SAVAREGS+52
SAVREG10 EQU   SAVAREGS+48
SAVREG9  EQU   SAVAREGS+44
SAVREG8  EQU   SAVAREGS+40
SAVREG7  EQU   SAVAREGS+36
SAVREG6  EQU   SAVAREGS+32
SAVREG5  EQU   SAVAREGS+28
SAVREG4  EQU   SAVAREGS+24
SAVREG3  EQU   SAVAREGS+20
SAVREG2  EQU   SAVAREGS+16
SAVREG1  EQU   SAVAREGS+12
SAVREG0  EQU   SAVAREGS+8
SAVREG15 EQU   SAVAREGS+4
SAVREG14 EQU   SAVAREGS
FWDCHAIN EQU   STRDSAVA+8
BCKCHAIN EQU   STRDSAVA+4
@NM00121 EQU   STRDSAVA
@NM00120 EQU   FRRREGS1
@NM00119 EQU   FRRTRCKA
RTYREG14 EQU   RTYBLCK3+20
RTYREG11 EQU   RTYBLCK3+8
RTYREG2  EQU   RTYBLCK1+8
RTYREG0  EQU   RTYBLCK1
@NM00118 EQU   FIRSTWRD
PSWTRAN  EQU   PSWEXT1+4
PSWINTCD EQU   PSWILCIC+2
PSWILC   EQU   PSWILCIC+1
@NM00115 EQU   PSWILCIC
NEWRGSV  EQU   NEWRTCA+512
@NM00110 EQU   NEWRTCA
SRMREG15 EQU   SRMREGS+60
SRMREG14 EQU   SRMREGS+56
SRMREG12 EQU   SRMREGS+48
SRMREG9  EQU   SRMREGS+36
SRMCRSTK EQU   SRMREGS+32
SRMRCURS EQU   SRMREGS+28
SRMFRRS  EQU   SRMREGS+24
SRMTGFRR EQU   SRMREGS+16
SRMREG3  EQU   SRMREGS+12
SRMFNCT  EQU   SRMREGS
SRMWSAV1 EQU   SRMRGSV
ERREG15  EQU   ERREGS+60
ERREG13  EQU   ERREGS+52
ERREG12  EQU   ERREGS+48
ERREG11  EQU   ERREGS+44
ERREG10  EQU   ERREGS+40
ERREG9   EQU   ERREGS+36
ERREG8   EQU   ERREGS+32
ERREG7   EQU   ERREGS+28
ERREG6   EQU   ERREGS+24
ERREG5   EQU   ERREGS+20
ERREG4   EQU   ERREGS+16
ERREG3   EQU   ERREGS+12
ERREG2   EQU   ERREGS+8
ERREG0   EQU   ERREGS
FROMADDR EQU   LISTPAIR
LOCKMASK EQU   CHKPT5+2
@NM00109 EQU   CHKPT5
CHKPT4   EQU   SRMSTAT+12
CHKPT3   EQU   SRMSTAT+8
@NM00114 EQU   PSW+3
PSWSIGNF EQU   PSWCCPMK
PSWWXPON EQU   PSWCCPMK
PSWDECIM EQU   PSWCCPMK
PSWFIXPT EQU   PSWCCPMK
PSWCONCD EQU   PSWCCPMK
@NM00113 EQU   PSWCCPMK
PSWPRBLM EQU   PSWKYMWP
PSWWAIT  EQU   PSWKYMWP
PSWMCHCK EQU   PSWKYMWP
PSWECTM  EQU   PSWKYMWP
PSWKEY   EQU   PSWKYMWP
PSWEXT   EQU   PSWIMASK
PSWIO    EQU   PSWIMASK
PSWDAT   EQU   PSWIMASK
PSWEAM   EQU   PSWIMASK
@NM00112 EQU   PSWIMASK
PSWPER   EQU   PSWIMASK
@NM00111 EQU   PSWIMASK
@NM00108 EQU   SDUMP+20
@NM00107 EQU   SDUMP+16
@NM00106 EQU   SDUMP+12
@NM00105 EQU   SDUMP+8
@NM00104 EQU   SDUMP+4
@NM00103 EQU   SDUSDAT2
SDUSWA   EQU   SDUSDAT2
SDUCSA   EQU   SDUSDAT2
SDUTRT   EQU   SDUSDAT1
SDULPA   EQU   SDUSDAT1
SDURGN   EQU   SDUSDAT1
SDULSQA  EQU   SDUSDAT1
SDUSQA   EQU   SDUSDAT1
SDUNUC   EQU   SDUSDAT1
SDUPSA   EQU   SDUSDAT1
SDUALPSA EQU   SDUSDAT1
@NM00102 EQU   SDUMP
SNPTCBA  EQU   SNPPARMS+12
SNPDCB   EQU   SNPPARMS+8
@NM00101 EQU   SNPPARMS+7
@NM00100 EQU   SNPPDATA
SNPSPLS  EQU   SNPPDATA
SNPPSW   EQU   SNPPDATA
SNPJPA   EQU   SNPPDATA
SNPLPA   EQU   SNPPDATA
SNPREGS  EQU   SNPPDATA
SNPSAVE2 EQU   SNPPDATA
SNPSAVE  EQU   SNPPDATA
@NM00099 EQU   SNPPARMS+5
@NM00098 EQU   SNPSDATA
SNPQCB   EQU   SNPSDATA
SNPCB    EQU   SNPSDATA
SNPTRT   EQU   SNPSDATA
SNPSWA   EQU   SNPSDATA
SNPLSQA  EQU   SNPSDATA
SNPSQA   EQU   SNPSDATA
SNPNUC   EQU   SNPSDATA
@NM00097 EQU   SNPPARMS+2
@NM00096 EQU   SNPFLAG
SNPTCB   EQU   SNPFLAG
SNPID    EQU   SNPFLAG
SNPABEND EQU   SNPFLAG
@NM00095 EQU   SNPFLAG
SNPVS2   EQU   SNPFLAG
SNPSNAP  EQU   SNPFLAG
RTCTSDWK EQU   RTCT+220
RTCTTDCB EQU   RTCT+184
RTCTXYX2 EQU   RTCT+180
RTCTSEQ# EQU   RTCT+178
RTCTXXX1 EQU   RTCT+177
@NM00094 EQU   RTCTRFLG
RTCTRSTF EQU   RTCTRFLG
RTCTRPER EQU   RTCTRFLG
RTCTRTER EQU   RTCTRFLG
RTCTTEST EQU   RTCT+172
RTCTMSRB EQU   RTCT+168
RTCTMLCK EQU   RTCT+164
RTCTFMT  EQU   RTCT+160
RTCTSDPL EQU   RTCT+156
RTCTDEV  EQU   RTCTSDDS+8
RTCTDCB  EQU   RTCTSDDS+4
@NM00093 EQU   RTCTFLG
RTCTDETP EQU   RTCTFLG
RTCTDSUS EQU   RTCTFLG
RTCTDSST EQU   RTCTFLG
RTCTDSNM EQU   RTCTSDDS
RTCTRCB  EQU   RTCT+32
RTCTRECB EQU   RTCT+28
RTCTFASB EQU   RTCT+24
RTCTMECB EQU   RTCT+20
RTCTSDID EQU   RTCT+18
RTCTSDEP EQU   RTCTSDF2
RTCTSDDO EQU   RTCTSDF2
RTCTSDEN EQU   RTCTSDF2
RTCTSDTR EQU   RTCTSDF2
RTCTSDPT EQU   RTCTSDF2
RTCTSDSR EQU   RTCTSDF2
RTCTSDSS EQU   RTCTSDF2
RTCTSDSH EQU   RTCTSDF2
@NM00092 EQU   RTCTSDF1
RTCTSDND EQU   RTCTSDF1
RTCTSDNO EQU   RTCTSDF1
@NM00091 EQU   RTCTABD+1
@NM00090 EQU   RTCTIDMP
RTCTISVC EQU   RTCTIDMP
RTCTISYU EQU   RTCTIDMP
RTCTISAB EQU   RTCTIDMP
@NM00089 EQU   RTCTIDMP
@NM00088 EQU   RTCTSDO2
RTCTSDPB EQU   RTCTSDO2
RTCTSDPA EQU   RTCTSDO2
RTCTSDP9 EQU   RTCTSDO2
RTCTSDP8 EQU   RTCTSDO2
RTCTSDP7 EQU   RTCTSDO1
RTCTSDP6 EQU   RTCTSDO1
RTCTSDP5 EQU   RTCTSDO1
RTCTSDP4 EQU   RTCTSDO1
RTCTSDP3 EQU   RTCTSDO1
RTCTSDP2 EQU   RTCTSDO1
RTCTSDP1 EQU   RTCTSDO1
RTCTSDP0 EQU   RTCTSDO1
RTCTSYDF EQU   RTCTSUO2
RTCTSYDE EQU   RTCTSUO2
RTCTSYDD EQU   RTCTSUO2
RTCTSYDC EQU   RTCTSUO2
RTCTSYDB EQU   RTCTSUO2
RTCTSYDA EQU   RTCTSUO2
RTCTSYD9 EQU   RTCTSUO2
RTCTSYD8 EQU   RTCTSUO2
RTCTSYD7 EQU   RTCTSUO1
RTCTSYD6 EQU   RTCTSUO1
RTCTSYD5 EQU   RTCTSUO1
RTCTSYD4 EQU   RTCTSUO1
RTCTSYD3 EQU   RTCTSUO1
RTCTSYD2 EQU   RTCTSUO1
RTCTSYD1 EQU   RTCTSUO1
RTCTSYD0 EQU   RTCTSUO1
RTCTSADF EQU   RTCTSAO2
RTCTSADE EQU   RTCTSAO2
RTCTSADD EQU   RTCTSAO2
RTCTSADC EQU   RTCTSAO2
RTCTSADB EQU   RTCTSAO2
RTCTSADA EQU   RTCTSAO2
RTCTSAD9 EQU   RTCTSAO2
RTCTSAD8 EQU   RTCTSAO2
RTCTSAD7 EQU   RTCTSAO1
RTCTSAD6 EQU   RTCTSAO1
RTCTSAD5 EQU   RTCTSAO1
RTCTSAD4 EQU   RTCTSAO1
RTCTSAD3 EQU   RTCTSAO1
RTCTSAD2 EQU   RTCTSAO1
RTCTSAD1 EQU   RTCTSAO1
RTCTSAD0 EQU   RTCTSAO1
RTCTSUDF EQU   RTCTSUP2
RTCTSUDE EQU   RTCTSUP2
RTCTSUDD EQU   RTCTSUP2
RTCTSUDC EQU   RTCTSUP2
RTCTSUDB EQU   RTCTSUP2
RTCTSUDA EQU   RTCTSUP2
RTCTSUD9 EQU   RTCTSUP2
RTCTSUD8 EQU   RTCTSUP2
RTCTSUD7 EQU   RTCTSUP1
RTCTSUD6 EQU   RTCTSUP1
RTCTSUD5 EQU   RTCTSUP1
RTCTSUD4 EQU   RTCTSUP1
RTCTSUD3 EQU   RTCTSUP1
RTCTSUD2 EQU   RTCTSUP1
RTCTSUD1 EQU   RTCTSUP1
RTCTSUD0 EQU   RTCTSUP1
RTCTSABF EQU   RTCTSAP2
RTCTSABE EQU   RTCTSAP2
RTCTSABD EQU   RTCTSAP2
RTCTSABC EQU   RTCTSAP2
RTCTSABB EQU   RTCTSAP2
RTCTSABA EQU   RTCTSAP2
RTCTSAB9 EQU   RTCTSAP2
RTCTSAB8 EQU   RTCTSAP2
RTCTSAB7 EQU   RTCTSAP1
RTCTSAB6 EQU   RTCTSAP1
RTCTSAB5 EQU   RTCTSAP1
RTCTSAB4 EQU   RTCTSAP1
RTCTSAB3 EQU   RTCTSAP1
RTCTSAB2 EQU   RTCTSAP1
RTCTSAB1 EQU   RTCTSAP1
RTCTSAB0 EQU   RTCTSAP1
RTCTNAME EQU   RTCT
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00087 EQU   CVTFIX+248
@NM00086 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00085 EQU   SDWA+512
@NM00084 EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWACOMP EQU   SDWA+392
@NM00083 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00082 EQU   SDWADDAT+3
@NM00081 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00080 EQU   SDWADDAT+1
@NM00079 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00078 EQU   SDWADUMP+2
@NM00077 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00076 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00075 EQU   SDWAACF3
@NM00074 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
@NM00073 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00072 EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00071 EQU   SDWACPUA
@NM00070 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
@NM00069 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWAENRB EQU   SDWAERRB
@NM00068 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00067 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00066 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00065 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR03 EQU   SDWASRSV+12
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00064 EQU   SDWAINC2
@NM00063 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00062 EQU   SDWAILC2
@NM00061 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00060 EQU   SDWANXT2
@NM00059 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00058 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00057 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00056 EQU   SDWAEMK2
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00055 EQU   SDWAINC1
@NM00054 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00053 EQU   SDWAILC1
@NM00052 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00051 EQU   SDWANXT1
@NM00050 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00049 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00048 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00047 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00046 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00045 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00044 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00043 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00042 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
FRRSPARM EQU   FRRSENTR+8
@NM00041 EQU   FRRSFLGS+1
@NM00040 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSFRRA EQU   FRRSENTR
FRRSENTS EQU   FRRS+84
FRRSLAST EQU   FRRSHEAD+4
WSACASMS EQU   WSAC+60
WSACASMD EQU   WSAC+56
WSACCCH  EQU   WSAC+52
WSACRRSA EQU   WSAC+48
WSACREST EQU   WSAC+44
WSACRSTI EQU   WSAC+40
WSACABTM EQU   WSAC+36
WSACMF1  EQU   WSAC+32
WSACEDS0 EQU   WSAC+28
WSACIOS  EQU   WSAC+24
WSACACR  EQU   WSAC+16
WSACTIME EQU   WSAC+12
WSACOPTM EQU   WSAC+8
WSACGTF  EQU   WSAC+4
WSACCWSA EQU   WSAC
WSAGSCHE EQU   WSAG+40
WSAGREST EQU   WSAG+36
WSAGNQDQ EQU   WSAG+32
WSAGMEMT EQU   WSAG+28
WSAGOPTM EQU   WSAG+24
WSAGSTAT EQU   WSAG+20
WSAGEMS0 EQU   WSAG+16
WSAGSSRS EQU   WSAG+12
WSAGRSM  EQU   WSAG+8
WSAGGMFM EQU   WSAG+4
WSAGPGIO EQU   WSAG
LCCAR125 EQU   LCCA+964
LCCAR124 EQU   LCCA+960
LCCASGPR EQU   LCCA+896
LCCADRT2 EQU   LCCA+888
LCCADRT1 EQU   LCCA+880
LCCAR103 EQU   LCCA+876
LCCAESS2 EQU   LCCA+872
LCCASPLJ EQU   LCCA+868
LCCASMQJ EQU   LCCA+864
LCCAIRT  EQU   LCCA+736
LCCAASID EQU   LCCA+732
LCCARV89 EQU   LCCA+728
LCCAPGTA EQU   LCCASRBF+2
LCCASAFN EQU   LCCASRBF
LCCAECSA EQU   LCCA+716
LCCAICR0 EQU   LCCA+712
LCCALWTM EQU   LCCA+704
LCCARV78 EQU   LCCA+700
LCCAPINV EQU   LCCA+696
LCCARV88 EQU   LCCA+695
LCCARV87 EQU   LCCALKFG
LCCARV86 EQU   LCCALKFG
LCCARV85 EQU   LCCALKFG
LCCARV84 EQU   LCCALKFG
LCCALKRD EQU   LCCALKFG
LCCALKAQ EQU   LCCALKFG
LCCALKSA EQU   LCCALKFG
LCCALKDP EQU   LCCALKFG
LCCACRST EQU   LCCACREX
LCCACRDP EQU   LCCACREX
LCCACRLM EQU   LCCACREX
LCCACRIN EQU   LCCACREX
LCCACRRT EQU   LCCACREX
LCCACRLE EQU   LCCACREX
LCCACRRM EQU   LCCACREX
LCCACREF EQU   LCCACREX
LCCAVARY EQU   LCCACRFL
LCCARV73 EQU   LCCACRFL
LCCARV72 EQU   LCCACRFL
LCCARV71 EQU   LCCACRFL
LCCARV70 EQU   LCCACRFL
LCCARV69 EQU   LCCACRFL
LCCACLMS EQU   LCCACRFL
LCCACRTM EQU   LCCACRFL
LCCALCR0 EQU   LCCA+688
LCCACRLC EQU   LCCA+684
LCCARCPU EQU   LCCA+680
LCCADCPU EQU   LCCA+676
LCCASRBJ EQU   LCCA+672
LCCADSSR EQU   LCCA+668
LCCADSSC EQU   LCCA+660
LCCADSS3 EQU   LCCA+648
LCCADSS2 EQU   LCCA+636
LCCADSS1 EQU   LCCA+624
LCCAWTIM EQU   LCCA+616
LCCAITOD EQU   LCCA+608
LCCADTOD EQU   LCCA+600
LCCASTOD EQU   LCCA+592
LCCARIR5 EQU   LCCASPSA+44
LCCARIR4 EQU   LCCASPSA+40
LCCARIR3 EQU   LCCASPSA+36
LCCARIR2 EQU   LCCASPSA+32
LCCARPR5 EQU   LCCASPSA+28
LCCARPR4 EQU   LCCASPSA+24
LCCARPR3 EQU   LCCASPSA+20
LCCARPR2 EQU   LCCASPSA+16
LCCADSR5 EQU   LCCASPSA+12
LCCADSR4 EQU   LCCASPSA+8
LCCADSR3 EQU   LCCASPSA+4
LCCADSR2 EQU   LCCASPSA
LCCARV68 EQU   LCCA+543
LCCAPSMK EQU   LCCA+542
LCCARV67 EQU   LCCADSF2
LCCARV66 EQU   LCCADSF2
LCCARV65 EQU   LCCADSF2
LCCARV64 EQU   LCCADSF2
LCCADSRW EQU   LCCADSF2
LCCADSPL EQU   LCCADSF2
LCCAGSRB EQU   LCCADSF2
LCCARV61 EQU   LCCADSF1
LCCARV60 EQU   LCCADSF1
LCCARV59 EQU   LCCADSF1
LCCARV58 EQU   LCCADSF1
LCCATIMR EQU   LCCADSF1
LCCADSS  EQU   LCCADSF1
LCCAVCPU EQU   LCCADSF1
LCCAACR  EQU   LCCADSF1
LCCAASCP EQU   LCCA+532
LCCAESSA EQU   LCCA+528
LCCARV55 EQU   LCCASPN4
LCCARV54 EQU   LCCASPN4
LCCARV53 EQU   LCCASPN4
LCCARV52 EQU   LCCASPN4
LCCARV51 EQU   LCCASPN4
LCCARV50 EQU   LCCASPN4
LCCARV49 EQU   LCCASPN4
LCCARV48 EQU   LCCASPN4
LCCARV47 EQU   LCCASPN3
LCCARV46 EQU   LCCASPN3
LCCARV45 EQU   LCCASPN3
LCCARV44 EQU   LCCASPN3
LCCARV43 EQU   LCCASPN3
LCCARV42 EQU   LCCASPN3
LCCARV41 EQU   LCCASPN3
LCCARV40 EQU   LCCASPN3
LCCARV39 EQU   LCCASPN2
LCCARV38 EQU   LCCASPN2
LCCARV37 EQU   LCCASPN2
LCCARV36 EQU   LCCASPN2
LCCARV35 EQU   LCCASPN2
LCCARV34 EQU   LCCASPN2
LCCARV33 EQU   LCCASPN2
LCCARV32 EQU   LCCASPN2
LCCARV31 EQU   LCCASPN1
LCCARV30 EQU   LCCASPN1
LCCAMFIO EQU   LCCASPN1
LCCARSTR EQU   LCCASPN1
LCCATSPN EQU   LCCASPN1
LCCALOCK EQU   LCCASPN1
LCCASIGP EQU   LCCASPN1
LCCAPTLB EQU   LCCASPN1
LCCARV27 EQU   LCCAIHR4
LCCARV26 EQU   LCCAIHR4
LCCARV25 EQU   LCCAIHR4
LCCARV24 EQU   LCCAIHR4
LCCARV23 EQU   LCCAIHR4
LCCARV22 EQU   LCCAIHR4
LCCARV21 EQU   LCCAIHR4
LCCARV20 EQU   LCCAIHR4
LCCARV19 EQU   LCCAIHR3
LCCARV18 EQU   LCCAIHR3
LCCARV17 EQU   LCCAIHR3
LCCARV16 EQU   LCCAIHR3
LCCARV15 EQU   LCCAIHR3
LCCARV14 EQU   LCCAIHR3
LCCARV13 EQU   LCCAIHR3
LCCARV12 EQU   LCCAIHR3
LCCARV11 EQU   LCCAIHR2
LCCARV10 EQU   LCCAIHR2
LCCARV09 EQU   LCCAIHR2
LCCARV08 EQU   LCCAIHR2
LCCARV07 EQU   LCCAIHR2
LCCARV06 EQU   LCCAIHR2
LCCARV05 EQU   LCCAIHR2
LCCARV04 EQU   LCCAIHR2
LCCARV03 EQU   LCCAIHR1
LCCARV02 EQU   LCCAIHR1
LCCARV01 EQU   LCCAIHR1
LCCAPPIE EQU   LCCAIHR1
LCCAPSG1 EQU   LCCAIHR1
LCCAPDAT EQU   LCCAIHR1
LCCAXRC2 EQU   LCCAIHR1
LCCAXRC1 EQU   LCCAIHR1
LCCAIOPS EQU   LCCA+512
LCCAGPGR EQU   LCCA+448
LCCAR133 EQU   LCCA+444
LCCAR132 EQU   LCCA+440
LCCAR131 EQU   LCCA+436
LCCAR130 EQU   LCCA+432
LCCAR129 EQU   LCCA+428
LCCAR128 EQU   LCCA+424
LCCAR127 EQU   LCCA+420
LCCAR126 EQU   LCCA+416
LCCARSGR EQU   LCCA+352
LCCAXGR3 EQU   LCCA+288
LCCAXGR2 EQU   LCCA+224
LCCAXGR1 EQU   LCCA+160
LCCACR0  EQU   LCCA+156
LCCAMCR1 EQU   LCCA+152
LCCAPINT EQU   LCCA+144
LCCAPPSW EQU   LCCA+136
LCCAPGR2 EQU   LCCA+72
LCCAPGR1 EQU   LCCA+8
LCCARV77 EQU   LCCA+6
LCCACPUA EQU   LCCA+4
LCCALCCA EQU   LCCA
ASXBEND  EQU   ASXB+232
ASXBRV25 EQU   ASXB+228
ASXBRV24 EQU   ASXB+224
ASXBPT0E EQU   ASXB+220
ASXBCRB4 EQU   ASXBCASW+3
ASXBCRB3 EQU   ASXBCASW+2
ASXBCRB2 EQU   ASXBCASW+1
ASXBCR06 EQU   ASXBCRB1
ASXBCR05 EQU   ASXBCRB1
ASXBCR04 EQU   ASXBCRB1
ASXBCR03 EQU   ASXBCRB1
ASXBCR02 EQU   ASXBCRB1
ASXBCR01 EQU   ASXBCRB1
ASXBTFD  EQU   ASXBCRB1
ASXBPIP  EQU   ASXBCRB1
ASXBCTDC EQU   ASXB+212
ASXBTDCB EQU   ASXB+208
ASXBRV19 EQU   ASXB+204
ASXBSENV EQU   ASXBSECR+1
ASXBRV34 EQU   ASCBSFLG
ASXBRV33 EQU   ASCBSFLG
ASXBRV32 EQU   ASCBSFLG
ASXBRV31 EQU   ASCBSFLG
ASXBRV30 EQU   ASCBSFLG
ASXBRV29 EQU   ASCBSFLG
ASXBRV28 EQU   ASCBSFLG
ASXBRV27 EQU   ASCBSFLG
ASXBUSER EQU   ASXB+192
ASXBLSRB EQU   ASXBAEQ+20
ASXBFSRB EQU   ASXBAEQ+16
ASXBLRQE EQU   ASXBAEQ+12
ASXBFRQE EQU   ASXBAEQ+8
ASXBLIQE EQU   ASXBAEQ+4
ASXBFIQE EQU   ASXBAEQ
ASXBETSK EQU   ASXB+164
ASXBSIRB EQU   ASXB+160
ASXBPSWD EQU   ASXB+152
ASXBPRG  EQU   ASXB+136
ASXBRV26 EQU   ASXB+132
ASXBOUSB EQU   ASXB+128
ASXBDDR  EQU   ASXB+124
ASXBRCTD EQU   ASXB+120
ASXBRSMD EQU   ASXB+116
ASXBSPSA EQU   ASXB+112
ASXBFRWA EQU   ASXB+108
ASXBFLSA EQU   ASXB+36
ASXBIHSA EQU   ASXB+32
ASXBRV15 EQU   ASXB+28
ASXBRV14 EQU   ASXB+24
ASXBLWA  EQU   ASXB+20
ASXBMPST EQU   ASXB+16
ASXBRS00 EQU   ASXB+14
ASXBTCBS EQU   ASXB+12
ASXBLTCB EQU   ASXB+8
ASXBFTCB EQU   ASXB+4
ASXBASXB EQU   ASXB
ASXBEGIN EQU   ASXB
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBEGIN EQU   ASCB
@NM00015 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00014 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAWA EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00013 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00012 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
EEDASID  EQU   EEDERROR+2
EEDERTYP EQU   EEDERROR+1
EEDMODE  EQU   EEDERROR
@NM00005 EQU   EEDDES+2
@NM00004 EQU   EEDFLAGS
EEDID    EQU   EEDDES
MODETCB  EQU   MODEBYTE
MODELOC  EQU   MODEBYTE
MODEGSUS EQU   MODEBYTE
MODEGSPN EQU   MODEBYTE
MODESUPR EQU   MODEBYTE
RTMBSLIP EQU   RTMBRTAB+48
RTMBXABT EQU   RTMBRTAB+44
RTMBACR  EQU   RTMBRTAB+40
RTMBPROG EQU   RTMBRTAB+36
RTMBMEMT EQU   RTMBRTAB+32
RTMBCABT EQU   RTMBRTAB+28
RTMBPGIO EQU   RTMBRTAB+24
RTMBSVC  EQU   RTMBRTAB+20
RTMBMACH EQU   RTMBRTAB+16
RTMBREST EQU   RTMBRTAB+12
RTMBDAT  EQU   RTMBRTAB+8
RTMBPAD2 EQU   RTMBTERM+6
RTMBBRAN EQU   RTMBTERM+2
RTMBBALR EQU   RTMBTERM
RT1TRETY EQU   RT1TACQR
RT1TLLCK EQU   RT1TACQR
RT1TDISP EQU   RT1TACQR
@NM00039 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00038 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00037 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00036 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00035 EQU   FLCFSA
@NM00034 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00033 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00032 EQU   FLCIOA
@NM00031 EQU   FLCMCLA+15
@NM00030 EQU   FLCMCLA+14
@NM00029 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00028 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00027 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00026 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00025 EQU   FLCPER
@NM00024 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00023 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00022 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00021 EQU   FLCPIILC
@NM00020 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00019 EQU   FLCSVILC
@NM00018 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00017 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00016 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RC00213 EQU   @RC00199
@RC00297 EQU   @RC00296
RVRESCHD EQU   CWRCOVRY
RVNOSRB  EQU   CWRCOVRY
RVSRBCMP EQU   CWRCOVRY
RVTCBTRM EQU   CWRCOVRY
RVRESRT1 EQU   CWRCOVRY
RVMEMCMP EQU   CWRCOVRY
@RC00631 EQU   @EL00001
@RC00714 EQU   @EC00755
@RF00796 EQU   RTHRETRY
RRTHTIME EQU   RTHRETRY
@RF00812 EQU   RTHRETRY
@RF00815 EQU   RTHRETRY
@RF00818 EQU   RTHRETRY
@RC00828 EQU   RTHRETRY
@RC00822 EQU   RTHRETRY
@RF00832 EQU   RTHRETRY
@RF00836 EQU   RTHRETRY
@RT00839 EQU   RTHRETRY
@RT00854 EQU   RTHRETRY
@RC00298 EQU   @RC00297
@RC00824 EQU   @RC00822
@RC00299 EQU   @RC00298
@RC00318 EQU   @RC00298
@ENDDATA EQU   *
         END   IEAVTRTR,(C'PLS2005',0701,76159)
