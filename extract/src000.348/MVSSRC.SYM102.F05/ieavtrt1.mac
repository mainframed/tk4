         TITLE 'IEAVTRT1'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVTRT1
*
*01*  DESCRIPTIVE-NAME = RTM1 ENTRY POINT PROCESSOR
*
*01*  COPYRIGHT = N/A
*
*01*  STATUS = REL.VS2.2
*
*01*  CHANGE-ACTIVITY = NEW FOR VS2 REL 2
*
*02*    A = 00
*
*02*    D = 00
*
*02*    C = 00
*
*01*  FUNCTION = THIS MODULE SERVES AS AN EXTENSION TO THE CALLRTM
*     MACRO AND CREATES A COMMON INTERFACE FOR THE MAINLINE RTM1. IT
*     CONTAINS THE RTM BRANCH TABLE WHICH  IS REFERENCED BY THE CALLRTM
*     MACRO EXPANSION AND THE ENTRY POINT PROCESSING FOR EACH OF THE 12
*     RTM1 ENTRY POINTS. EACH ENTRY POINT PROCESSOR SAVES THE CALLERS
*     REGISTERS (WHERE APPROPRIATE) AND LOCATES THE VARIOUS STATUS SAVE
*     AREAS, ESTABLISHES THE COMPLETION CODE, AND SETS UP A RECOVERY
*     ENVIRONMENT (WHERE APPROPRIATE).  THIS MODULE PROVIDES THE
*     LINKAGE TO THE MAINLINE RTM1 (MODULE IEAVTRTM). WHEN THE MAINLINE
*     RTM1 HAS COMPLETED PROCESSING, IT RETURNS TO THIS MODULE WITH AN
*     INDICATION OF THE TYPE OF EXIT TO EFFECT. THIS MODULE PERFORMS
*     THE FINAL EXIT LINKAGE AS DIRECTED BY THE RTM1.
*
*01*  OPERATION = THE PROCESSING FOR EACH ENTRY POINT IS AS FOLLOWS:
*
*     PROGCK - A UNIQUE SWITCH IS SET IN A WORK REGISTER FOR MAINLINE
*     RTM1S PROCESSING. A COMPLETION CODE IS ESTABLISHED BY EITHER
*     CONVERTING THE INTERRUPT CODE STORED BY THE HARDWARE OR BY
*     ACCEPTING A COMPLETION CODE PASSED BY PCFLIH. THE REGISTERS AND
*     PSW ASSOCIATED WITH THE PROGRAM INTERRUPT ARE LOCATED FROM THE
*     FLC/PSA AND/OR THE LCCA. THE RECOVERY STACK TO BE
*     USED FOR RTM1S RECOVERY IS LOCATED.
*
*     RESTART - A UNIQUE FLAG FOR RESTART IS SET IN A WORK REGISTER FOR
*     RTM1 MAINLINE. A COMPLETION CODE IS GENERATED FOR THE ERROR.  THE
*     REGISTERS, PSW AND RECOVERY STACK ASSOCIATED WITH THE INTERRUPT
*     ARE LOCATED.
*
*     SVCERR - A UNIQUE  SVC SWITCH  IS SET IN A WORK REGISTER FOR
*     RTM1.  REGISTERS, PSW AND COMPLETION CODE ASSOCIATED WITH THE
*     ERROR ARE LOCATED BASED ON 1) ABEND SET UP BY RTM1, 2) ABEND
*     ISSUED BY  NON TASK MODE ROUTINES AND 3) ANY OTHER SVC ISSUED BY
*     A NON TASK MODE SUPERVISOR ROUTINE. FOR ABENDS, DUMP OPTIONS, IF
*     SPECIFIED, ARE LOCATED. THE RECOVERY STACK ASSOCIATED WITH THE
*     ERROR IS LOCATED.
*
*     PGIOERR - THE CALLERS REGISTERS ARE SAVED AND A RECOVERY
*     ENVIRONMENT IS ESTABLISHED. A UNIQUE PGIOERR SWITCH IS SET IN A
*     WORK REGISTER FOR RTM1 PROCESSING. THE COMPLETION CODE IS
*     ESTABLISHED. THE CRITICAL ENTRY POINT REGISTERS ARE CHECKPOINTED
*     INTO THE RECOVERY TRACKING AREA.
*
*     MACHCK - THE CALLERS REGISTERS ARE SAVED AND A RECOVERY
*     ENVIRONMENT IS ESTABLISHED. A UNIQUE MACHCK SWITCH IS SET IN A
*     WORK REGISTER FOR RTM1 PROCESSING. A RECOVERY ENVIRONMENT IS
*     ESTABLISHED AND CRITICAL ENTRY POINT REGISTERS ARE CHECKPOINTED
*     IN THE RECOVERY TRACKING AREA.
*
*     DATERR - A UNIQUE SWITCH IS SET IN A WORK REGISTER FOR MAINLINE
*     RTM1S PROCESSING. A COMPLETION CODE IS ESTABLISHED BY
*     CONVERTING THE INTERRUPT CODE STORED BY THE HARDWARE. REGS AND
*     PSW ASSOCIATED WITH THE PROGRAM INTERRUPT ARE LOCATED FROM THE
*     FLC/PSA AND THE LCCA. THE RECOVERY STACK TO BE
*     USED FOR RTM1S RECOVERY IS LOCATED.
*
*     XABTERM - ABTERM WITH ASID (CROSS MEMORY ABTERM) -
*     CABTERM - ABTERM W/O ASID (CURRENT MEMORY ABTERM) -
*     BTERM - CVTBTERM BRANCH ENTRY (COMPATIBILITY INTERFACE) - THE
*     CALLERS REGISTERS ARE SAVED. A UNIQUE ABTERM SWITCH IS SET FOR
*     THE PARTICULAR ENTRY POINT TAKEN. A RECOVERY ENVIRONMENT IS
*     ESTABLISHED AND CRITICAL ENTRY POINT REGISTERS ARE CHECKPOINTED.
*
*     MEMTERM - THE CALLERS REGISTERS ARE SAVED. THE DISPATCHER LOCK
*     IS OBTAINED. A UNIQUE MEMTERM SWITCH IS SET FOR RTM1. A RECOVERY
*     ENVIRONMENT IS ESTABLISHED AND CRITICAL ENTRY POINT REGISTERS ARE
*     CHECKPOINTED IN THE RECOVERY TRACKING AREA.
*
*     IEAVTRTX - XMABTERM REENTRY -
*     A UNIQUE SWITCH FOR XMABTERM REENTRY IS SET.
*     THE EXTENDED ERROR DESCRIPTOR CHAIN POINTED TO BY THE SRB PARM
*     FIELD IS PLACED IN A REGISTER. A SETFRR IS ISSUED AND THE FRR
*     PARM AREA IS INITIALIZED. THE CELL FOR THE SRB IS FREED. AN
*     UNCONDITIONAL REQUEST FOR THE LOCAL LOCK IS ISSUED.
*
*     IEAVTRTN - MACHCK REENTRY -
*     IF SOFTWARE DAMAGE WAS SUSTAINED BY A MACHINE
*     CHECK, MCH (OR ACR) ISUUES A LPSW TO THIS ENTRY POINT . THE
*     CURRENT STACK IS ESTABLISHED AS THE STACK TO BE RECOVERED BY THE
*     RTM1. THE PCFLIH STACK IS INDICATED AS THE STACK FOR RTM1S
*     RECOVERY IF NEEDED. A UNIQUE MACHCK-REENTRY SWITCH IS SET.
*     REGISTERS, PSW AND MACHINE CHECK INFORMATION, IF AVAILABLE, IS
*     PLACED IN WORK REGISTERS FOR MAINLINE RTM1.
*
*     IEAVTRTZ - RETURN FROM IEAVTRTM -
*     UPON RETURN FROM THE MAINLINE RTM1, THE FINAL EXIT
*     IS EFFECTED BASED ON INDICATIONS PASSED BY RTM1.  EXIT
*     LINKAGE IS ESTABLISHED TO ONE OF THE FOLLOWING ROUTINES:  RETRY
*     ROUTINE, MCH, INTERRUPTED PROGRAM, DISPATCHER, SRB EXIT, SVC EXIT
*     PROLOG, CALLER OF RTM1. ANY LOCKS OBTAINED UPON ORIGINAL ENTRY
*     ARE RELEASED.  IF AN FRR WAS ESTABLISHED UPON ORIGINAL ENTRY,
*     IT IS DELETED.
*
*01*  NOTES = IEAVTRT1 HAS THE FOLLOWING CHARACTERISTICS
*
*02*    CHARACTER-CODE-DEPENDENCIES = EBCDIC CHARACTER CODE DEPENDENT.
*
*02*    DEPENDENCIES = THIS MODULE IS DEPENDENT ON EACH OF THE CALLING
*       FIRST LEVEL INTERRUPT HANDLERS (PCFLIH, RESTART FLIH, SVC FLIH)
*       IN THE DEFINITION AND LOCATION OF THEIR STATUS SAVE AREAS (IN
*       PSA AND LCCA). THIS MODULE IS ALSO DEPENDENT ON THE CALLERS OF
*       ABTERM W/ASID, MACHCK AND MEMTERM TO PASS A PROPERLY SERIALIZED
*       REGISTER SAVE AREA. FOR ENTRY POINTS PCFLIH, RESTART, SVCFLIH,
*       MACHCK, DATERR AND ABTERM WITH 0 TCB ADRESS, IT IS DEPENDENT ON
*       THE CALLER BEING PHYSICALLY DISABLED.  FOR ENTRY POINT PGIOERR
*       IT IS DEPENDENT ON THE CALLER HAVING PROPERLY SERIALIZED (VIA
*       LOCKS) ALL DATA AREAS ASSOCIATED WITH THE PGIOERR PROCESSING
*       OF RTM1. FOR ABTERM AND THE CVTBTERM ENTRY POINTS (NON-0 TCB)
*       IT IS DEPENDENT ON THE CALLER HOLDING THE LOCAL LOCK.
*
*02*    PERFORMANCE = SINCE THIS MODULE IS CALLED ONLY IN ABNORMAL
*       SITUATIONS, IT DOES NOT AFFECT THE PERFORMANCE OF THE MAINLINE
*       FUNCTIONS OF THE OPERATING SYSTEM.
*
*02*    RESTRICTIONS = ALL CALLERS MUST BE KEY 0, SUPERVISOR STATE.
*
*02*    REGISTER-CONVENTIONS = REGISTERS ARE SYMBOLICALLY DEFINED
*       STARTING AT SYMBOL R0 AND SYMBOL FUNCTION
*
*02*    PATCH-LABEL = N/A
*
*01*  MODULE-TYPE = MODULE
*
*02*    PROCESSOR = ASSEMBLER-370R
*
*02*    MODULE-SIZE = 1800 BYTES
*
*02*    ATTRIBUTES = REENTERABLE  NUCLEUS RESIDENT, ZERO PSW PROTECT
*       KEY, DISABLED OR ENABLED, REFRESHABLE, FIXED, SUPERVISOR STATE
*
*01*  ENTRY = PROGCK
*
*02*    PURPOSE = TO GATHER DATA PERTINENT TO A PROGRAM INTERRUPTION
*       FOR MAINLINE RTM1 (SEE OPERATION ABOVE).
*
*02*    LINKAGE = BALR
*
*02*    ENQ/LOCK CONDITIONS = NO SPECIFIC  LOCK REQUIREMENTS OTHER THAN
*       THE CALLER MUST BE PHYSICALLY DISABLED.
*
*02*    INPUT = REGISTER 1 CONTAINS FLAGS IN THE HIGH ORDER BYTE AND
*       OPTIONALLY A COMPLETION CODE IN THE LOW ORDER 3 BYTES (REG 1 IS
*       SET UP BY THE CALLRTM MACRO).
*
*02*    OUTPUT = REGISTERS CONTAIN THE FOLLOWING DATA:
*                CALLRTM FLAGS AND COMPCODE  - FLAGSCC
*                ENTRY POINT ID - FUNCTION
*                PTR TO PSW AT TIME OF INTERRUPT (1ST HALF) - ADDRPSW1
*                PTR TO PSW AT TIME OF INTERRUPT (2ND HALF) - ADDRPSW2
*                POINTER TO REGISTERS AT TIME OF INTERRUPT  - SAVAREAP
*                POINTER TO STACK FOR RTM1S RECOVERY - TRAKAREA
*
*02*    EXIT-NORMAL = IEAVTRTM VIA A BALR
*
*02*    EXIT-ERROR = IEAVTRTM VIA A BALR
*
*01*  ENTRY = RESTART
*
*02*    PURPOSE = TO GATHER DATA PERTINENT TO A RESTART INTERRUPTION
*       FOR MAINLINE RTM1 (SEE OPERATION ABOVE).
*
*02*    LINKAGE = BALR
*
*02*    ENQ/LOCK CONDITIONS = NO SPECIFIC  LOCK REQUIREMENTS OTHER THAN
*       THE CALLER MUST BE PHYSICALLY DISABLED.
*
*02*    INPUT = REGISTER 1 CONTAINS FLAGS IN THE HIGH ORDER BYTE.
*
*02*    OUTPUT = REGISTERS CONTAIN THE FOLLOWING DATA:
*                CALLRTM FLAGS AND COMPCODE - FLAGSCC
*                ENTRY POINT ID - FUNCTION
*                PTR TO PSW AT TIME OF INTERRUPT (1ST HALF) - ADDRPSW1
*                PTR TO PSW AT TIME OF INTERRUPT (2ND HALF) - ADDRPSW2
*                POINTER TO STACK FOR RTM1S RECOVERY - TRAKAREA
*
*02*    EXIT-NORMAL = IEAVTRTM VIA A BALR
*
*02*    EXIT-ERROR = IEAVTRTM VIA A BALR
*
*01*  ENTRY = SVCERR
*
*02*    PURPOSE = TO GATHER DATA PERTINENT TO A PROGRAM ISSUING AN
*       SVC IN A LOCKED OR SRB ENVIRONMENT (SEE OPERATION ABOVE).
*
*02*    LINKAGE = BALR
*
*02*    ENQ/LOCK CONDITIONS = EITHER LOCKED (ANY) OR IN SRB MODE.
*
*02*    INPUT = SVC FLIH STATUS INFORMATION IN LCCA AND PSA.
*
*02*    OUTPUT = REGISTERS CONTAIN THE FOLLOWING DATA:
*                CALLRTM FLAGS AND COMPLETION CODE  - FLAGSCC
*                ENTRY POINT ID - FUNCTION
*                PTR TO PSW AT TIME OF INTERRUPT (1ST HALF) - ADDRPSW1
*                PTR TO PSW AT TIME OF INTERRUPT (2ND HALF) - ADDRPSW2
*                POINTER TO REGISTERS AT TIME OF INTERRUPT  - SAVAREAP
*                POINTER TO STACK FOR RTM1S RECOVERY - TRAKAREA
*                POINTER TO DUMPOPTS - DUMPOPTS
*
*02*    EXIT-NORMAL = IEAVTRTM VIA BALR
*
*02*    EXIT-ERROR = IEAVTRTM VIA BALR
*
*01*  ENTRY = PGIOERR
*
*02*    PURPOSE = TO SAVE CALLERS REGISTERS AND ESTABLISH A RECOVERY
*       ENVIRONMENT (SEE OPERATION ABOVE).
*
*02*    LINKAGE = BALR
*
*02*    ENQ/LOCK CONDITIONS = CALLER MUST HAVE PRE-GOTTEN ANY LOCKS
*       NEEDED FOR PGIOERR PROCESSING.
*
*02*    INPUT = REGISTER 1 CONTAINS FLAGS IN THE HIGH ORDER BYTE  AND
*               OPTIONALLY A COMPLETION CODE.
*               REGISTER 4 CONTAINS A POINTER TO AN SRB OR A TCB
*               REGISTER 5 CONTAINS A POINTER TO AN RB OR 0
*               REGISTER 13 CONTAINS A POINTER TO A REGISTER SAVE AREA
*               REGISTER 14 CONTAINS THE RETURN POINT TO THE CALLER
*
*02*    OUTPUT = REGISTERS CONTAIN THE FOLLOWING DATA:
*                CALLRTM FLAGS AND COMPCODE  - FLAGSCC
*                A POINTER TO AN SRB OR A TCB - TARGTCB
*                A POINTER TO AN RB OR 0 - RBADDR
*                ENTRY POINT ID - FUNCTION
*                POINTER TO USER SAVE AREA - SAVAREAP
*                POINTER TO RECOVERY TRACKING AREA - TRAKAREA
*
*02*    EXIT-NORMAL = IEAVTRTM VIA A BALR
*
*02*    EXIT-ERROR = IEAVTRTM VIA A BALR
*
*01*  ENTRY = MACHCK
*
*02*    PURPOSE = TO SAVES CALLERS REGISTERS AND ESTABLISH A RECOVERY
*       ENVIRONMENT (SEE OPERATION ABOVE).
*
*02*    LINKAGE = BALR
*
*02*    ENQ/LOCK CONDITIONS = CALLER MUST BE PHYSICALLY DISABLED
*
*02*    INPUT = REGISTER 1 CONTAINS A POINTER TO THE LOGREC BUFFER
*               REGISTER 13 CONTAINS A POINTER TO A REGISTER SAVE AREA
*               REGISTER 14 CONTAINS THE RETURN POINT TO THE CALLER
*               REGISTER 15 CONTAINS THE ENTRY POINT
*
*02*    OUTPUT = REGISTERS CONTAIN THE FOLLOWING DATA:
*                A POINTER TO THE LOGREC BUFFER - ADLOGREC
*                ENTRY POINT ID - FUNCTION
*                POINTER TO USER SAVE AREA - SAVAREAP
*                POINTER TO RECOVERY TRACKING AREA - TRAKAREA
*
*02*    EXIT-NORMAL = IEAVTRTM VIA A BALR
*
*02*    EXIT-ERROR = IEAVTRTM VIA A BALR
*
*01*  ENTRY = DATERR
*
*02*    PURPOSE = TO GATHER DATA PERTINENT TO A TRANSLATION FAILURE
*       FOR MAINLINE RTM1 (SEE OPERATION ABOVE).
*
*02*    LINKAGE = BALR
*
*02*    ENQ/LOCK CONDITIONS = NO SPECIFIC  LOCK REQUIREMENTS OTHER THAN
*       THE CALLER MUST BE PHYSICALLY DISABLED.
*
*02*    INPUT = REGISTER 1 CONTAINS FLAGS IN THE HIGH ORDER BYTE AND
*       OPTIONALLY A COMPLETION CODE IN THE LOW ORDER 3 BYTES (REG 1 IS
*       SET UP BY THE CALLRTM MACRO).
*
*02*    OUTPUT = REGISTERS CONTAIN THE FOLLOWING DATA
*                CALLRTM FLAGS AND COMPCODE - FLAGSCC
*                ENTRY POINT ID - FUNCTION
*                PTR TO PSW AT TIME OF INTERRUPT (1ST HALF) - ADDRPSW1
*                PTR TO PSW AT TIME OF INTERRUPT (2ND HALF) - ADDRPSW2
*                POINTER TO REGISTERS AT TIME OF INTERRUPT  - SAVAREAP
*                POINTER TO STACK FOR RTM1S RECOVERY - TRAKAREA
*
*02*    EXIT-NORMAL = IEAVTRTM VIA A BALR
*
*02*    EXIT-ERROR = IEAVTRTM VIA A BALR
*
*01*  ENTRY = XABTERM (WITH ASID)
*
*02*    PURPOSE = TO SAVE THE CALLERS REGISTERS IN A CALLER PROVIDED
*        SAVE AREA AND ESTABLISH A RECOVERY ENVIRONMENT(SEE OPERATION
*        ABOVE).
*
*02*    LINKAGE = BALR
*
*02*    ENQ/LOCK CONDITIONS = NO SPECIFIC  LOCK REQUIREMENTS
*
*02*    INPUT = REGISTER 1 CONTAINS FLAGS IN THE HIGH ORDER BYTE AND
*               A COMPLETION CODE IN THE LOW ORDER 3 BYTES (REG 1 IS
*               SET UP BY THE CALLRTM MACRO).
*               REGISTER 0 CONTAINS THE ADDRESS OF THE TCB
*               REGISTER 2 CONTAINS THE ASID OF THE ADDRESS SPACE INTO
*               WHICH THE ABTERM IS TO BE SCHEDULED OR 0 INDICATING
*               SCHEDULE THE ABTERM REQUEST INTO THE CURRENT ADDRESS
*               SPACE
*               REGISTER 3 MAY OPTIONALLY CONTAIN THE POINTER TO
*               DUMPOPTS.
*               REGISTER 13 MUST POINT TO A 72 BYTE REGISTER SAVE AREA
*               REGISTER 14 MUST CONTAIN THE RETURN POINT TO THE CALLER
*               REGISTER 15 MUST CONTAIN THE ENTRY POINT
*
*02*    OUTPUT = REGISTERS CONTAIN THE FOLLOWING DATA:
*                POINTER TO THE TCB  - TARGTCB
*                CALLRTM FLAGS AND COMPCODE  - FLAGSCC
*                ASID OR 0  - TARGASID
*                POINTER TO DUMPOPTS OR 0 - DUMPOPTS
*                ENTRY POINT ID - FUNCTION
*                POINTER TO CALLERS REGISTERS - SAVAREAP
*                POINTER TO RECOVERY TRACKING AREA - TRAKAREA
*
*02*    EXIT-NORMAL = IEAVTRTM VIA A BALR
*
*02*    EXIT-ERROR = IEAVTRTM VIA A BALR
*
*01*  ENTRY = CABTERM (AND BTERM - CVTBTERM BRANCH)
*
*02*    PURPOSE = TO SAVE THE CALLERS REGISTERS IN A RTM WSA
*        AND ESTABLISH A RECOVERY ENVIRONMENT(SEE OPERATION ABOVE).
*
*02*    LINKAGE = BALR
*
*02*    ENQ/LOCK CONDITIONS = IF R0=0, CALLER MUST BE PHYSICALLY
*       DISABLED, IF R0^=0, CALLER MUST HOLD LOCAL LOCK.
*
*02*    INPUT = REGISTER 1 CONTAINS FLAGS IN THE HIGH ORDER BYTE AND
*       A COMPLETION CODE IN THE LOW ORDER 3 BYTES (REG 1 IS
*       SET UP BY THE CALLRTM MACRO).
*               REGISTER 0 CONTAINS THE ADDRESS OF THE TCB OR 0
*               REGISTER 3 MAY OPTIONALLY CONTAIN THE POINTER TO
*               DUMPOPTS.
*               REGISTER 14 MUST CONTAIN THE RETURN POINT TO THE CALLER
*               REGISTER 15 MUST CONTAIN THE ENTRY POINT
*
*02*    OUTPUT = REGISTERS CONTAIN THE FOLLOWING DATA:
*                CALLRTM FLAGS AND COMPCODE - FLAGSCC
*                POINTER TO THE TCB - TARGTCB
*                POINTER TO DUMPOPTS OR 0  - DUMPOPTS
*                ENTRY POINT ID - FUNCTION
*                POINTER TO CALLERS REGISTERS - SAVAREAP
*                POINTER TO RECOVERY TRACKING AREA - TRAKAREA
*
*02*    EXIT-NORMAL = IEAVTRTM VIA A BALR
*
*02*    EXIT-ERROR = IEAVTRTM VIA A BALR
*
*01*  ENTRY = MEMTERM
*
*02*    PURPOSE = TO SAVE THE CALLERS REGISTERS IN A CALLER PROVIDED
*       SAVE AREA AND ESTABLISH A RECOVERY ENVIRONMENT(SEE OPERATION
*        ABOVE).
*
*02*    LINKAGE = BALR
*
*02*    ENQ/LOCK CONDITIONS = NO SPECIFIC  LOCK REQUIREMENTS
*
*02*    INPUT = REGISTER 1 CONTAINS FLAGS IN THE HIGH ORDER BYTE AND
*       A COMPLETION CODE IN THE LOW ORDER 3 BYTES (REG 1 IS
*       SET UP BY THE CALLRTM MACRO).
*               REGISTER 2 CONTAINS THE ASID OF THE ADDRESS SPACE TO BE
*               TERMINATED
*               REGISTER 13 MUST POINT TO A 72 BYTE REGISTER SAVE AREA
*               REGISTER 14 MUST CONTAIN THE RETURN POINT TO THE CALLER
*               REGISTER 15 MUST CONTAIN THE ENTRY POINT
*
*02*    OUTPUT = REGISTERS CONTAIN THE FOLLOWING DATA:
*                CALLRTM FLAGS AND COMPCODE - FLAGSCC
*                ASID OR 0 - TARGASID
*                ENTRY POINT ID - FUNCTION
*                POINTER TO CALLERS REGISTERS - SAVAREAP
*                POINTER TO RECOVERY TRACKING AREA - TRAKAREA
*
*02*    EXIT-NORMAL = IEAVTRTM VIA A BALR
*
*02*    EXIT-ERROR = IEAVTRTM VIA A BALR
*
*01*  ENTRY = IEAVTRTN - MACHINE CHECK REENTRY
*
*02*    PURPOSE = TO SET UP AN INTERFACE FOR SOFTWARE RECOVERY FROM A
*       HARDWARE ERROR. (SEE OPERATION ABOVE).
*
*02*    LINKAGE = LPSW
*
*02*    ENQ/LOCK CONDITIONS = NO SPECIFIC  LOCK REQUIREMENTS
*
*02*    INPUT = REGISTER 1 CONTAINS FLAGS IN THE HIGH ORDER BYTE AND
*               REGISTER 2 CONTAINS THE POINTER TO THE EED CHAIN OR 0.
*               A COMPLETION CODE IN THE LOW ORDER 3 BYTES (REG 1 IS
*               SET UP BY MAINLINE RTM1).
*               REGISTER 3 CONTAINS ABBREVIATED HARDWARE REPAIR STATUS
*               FLAGS
*
*02*    OUTPUT = REGISTERS CONTAIN THE FOLLOWING DATA:
*                CALLRTM FLAGS AND COMPCODE - FLAGSCC
*                ENTRY POINT ID - FUNCTION
*                POINTER TO REGISTERS AT TIME OF INTERRUPT - SAVAREAP
*                POINTER TO STACK FOR RTM1S RECOVERY - TRAKAREA
*                POINTER TO PSW AT TIME OF ERROR  - ADDRPSW1
*                POINTER TO EED CHAIN - EEDCHAIN
*                POINTER TO HARDWARE REPAIR DATA  - REPAIRAD
*
*01*  ENTRY = IEAVTRTX - CROSS ADDRESS SPACE ABTERM REENTRY
*
*02*    PURPOSE = TO SET UP AN INTERFACE FOR THE ABTERM FUNCTION OF
*       RTM1.  (SEE OPERATION ABOVE).
*
*02*    LINKAGE = LPSW BY SRB DISPATCHER
*
*02*    ENQ/LOCK CONDITIONS = NO LOCKS HELD - SRB MODE
*
*02*    INPUT = REGISTER 1 POINTS TO THE SRB.
*
*02*    OUTPUT = REGISTERS CONTAIN THE FOLLOWING DATA:
*                CALLRTM FLAGS AND COMPCODE - FLAGSCC
*                ENTRY POINT ID - FUNCTION
*                TCB ADDRESS - TARGTCB
*                POINTER TO DUMP OPTIONS OR 0 - DUMPOPTS
*                POINTER TO ORIGINAL CALLERS REGISTERS - SAVAREAP
*                POINTER TO A RECOVERY TRACKING AREA - TRAKAREA
*                POINTER TO EED CHAIN - EEDCHAIN
*
*02*    EXIT-NORMAL = IEAVTRTM VIA A BALR
*
*02*    EXIT-ERROR = IEAVTRTM VIA A BALR
*
*01*  ENTRY = IEAVTRTZ   RETURN FROM MODULE IEAVTRTM - MAINLINE RTM1
*
*02*    PURPOSE = TO EFFECT THE FINAL EXIT LINKAGE BACK TO THE MAINLINE
*       SUPERVISOR AS DIRECTED BY RTM1.
*
*02*    LINKAGE = BR
*
*02*    ENQ/LOCK CONDITIONS = IF THE DISPATCHER OR LOCAL LOCK WAS
*       OBTAINED DURING IEAVTRT1'S ORIGINAL ENTRY POINT PROCESSING,
*       THEY WILL STILL BE HELD ON RETURN FROM IEAVTRTM.
*
*02*    INPUT = THE MAINLINE RTM1 RETURNS AN INDICATION IN A REGISTER 0
*       OF THE TYPE OF EXIT TO BE PERFORMED. ADDITIONAL INFORMATION IS
*       PASSED BY MAINLINE RTM1 DEPENDING ON THE TYPE OF EXIT AS
*       FOLLOWS:
*               RETRY EXIT - A POINTER TO THE RTM1WA IS PASSED  IN R1
*               MCH EXIT - A POINTER TO MCH REGISTER SAVE AREA  AND A
*               POINTER TO THE MCH RETURN DATA IS PASSED IN R1
*               RESTART RESUME - NO ADDITIONAL INFORMATION IS PASSED
*               DISPATCHER EXIT - NO ADDITIONAL INFORMATION IS PASSED
*               SRB EXIT - NO ADDITIONAL INFORMATION IS PASSED
*               SVC EXIT - NO ADDITIONAL INFORMATION IS PASSED
*               CALLER - NO ADDITIONAL INFORMATION IS PASSED
*
*02*    OUTPUT = OUTPUT IS PRODUCED BASED ON THE EXIT TYPE AS FOLLOWS:
*               RETRY EXIT - REGISTERS 0-14 ARE LOADED WITH VALUES
*               DICTATED BY THE FRR WHICH RETRIED.
*               MCH EXIT - REGISTERS 2-0 ARE RESTORED TO THEIR VALUES
*               ON INITIAL ENTRY.  REGISTER 1 IS SET TO POINT TO RETURN
*               DATA TO MCH.
*               RESTART RESUME - ALL GENERAL PURPOSE REGISTERS ARE
*               RESTORED TO THEIR VALUE AT TIME OF RESTART INTERRUPT.
*               DISPATCHER EXIT - NONE
*               SRB EXIT - NONE
*               SVC EXIT - NONE
*               CALLER - REGISTER 15 IS ZEROD. REGISTERS 0-14 ARE
*               RESTORED TO THEIR ORIGINAL VALUE.
*
*01*  EXIT-NORMAL = EXITS FINAL ARE TAKEN AS INDICATED BY MAINLINE RTM1
*     AS FOLLOWS:
*               RETRY EXIT - REGISTER 15 IS LOADED WITH THE RETRY
*               ADDRESS RETURNED BY RTM1.
*               MCH EXIT - A BRANCH ON REGISTER 14 IS ISSUED
*               RESTART RESUME - A LPSW INSTRUCTION POINTING TO THE PSW
*               STORED BY THE RESTART INTERRUP IS ISSUED.
*               DISPATCHER EXIT - A BRANCH TO THE ADDRESS IN CVT0DS IS
*               ISSUED.
*               SRB EXIT - A BRANCH TO THE ADDRESS IN CVT FOR THE SRB
*               EXIT.
*               SVC EXIT - A BRANCH TO THE ADDRESS IN THE CVTEXPRO
*               FIELD IS ISSUED.
*               CALLER - A BRANCH ON REGISTER 14 IS ISSUED.
*
*01*  EXIT-ERROR = NONE
*
*01*  EXTERNAL-REFERENCES =
*
*02*    ROUTINES = SETLOCK
*02*    ROUTINES = SETFRR
*02*    ROUTINES = IEAVTRTM
*
*02*    DATA-SETS = NONE
*
*02*    DATA-AREA = FLC/PSA
*
*02*    CONTROL BLOCKS = LCCA - U M   LCCAT - U,   ASCB - U,   ASXB -
*       U,  WSACABTM - M,  WSALABTM - M, CVT - U
*
*01*  TABLES = NONE
*
*01*  MACROS = IHAPSA, IHALCCA, IHALCCAT, IHAASXB, IHAASCB, IHACVT
*
*01*  MESSAGES = NONE
*
*01*  MO NUMBER = 4.1.1, 4.1.1.1, 4.1.1.2, 4.1.1.3, 4.1.1.4, 4.1.1.5,
*     4.1.1.6, 4.1.1.7, 4.1.1.8, 4.1.1.9, 4.1.1.10, 4.1.1.11
*
**** END OF SPECIFICATIONS ***/
         EJECT
IEAVTRT1 CSECT
*a-000000-999999                                                @Y02703
         ENTRY IEAVTRTZ           RETURN POINT FROM IEAVTRTM FOR EXIT
*                                  PROCESSING
         ENTRY IEAVTRTN           ENTRY POINT FOR MACHINE CHECK REENTRY
         ENTRY IEAVTRTX           ENTRY POINT FOR XABTERM REENTRY
         SPACE 2
***********************************************************************
*                                                                     *
*        GENERAL REGISTER EQUATES                                     *
*                                                                     *
***********************************************************************
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8                  BASE FOR IHALCCA MAPPING MACRO
R9       EQU   9                  WORK REG
R10      EQU   10                 BASE REGISTER FOR IEAVTRT1
R11      EQU   11                 WORK REGISTER
R12      EQU   12                 WORK REGISTER
R13      EQU   13
R14      EQU   14                 INTERNAL LINK REGISTER
R15      EQU   15
         SPACE 2
***********************************************************************
*                                                                     *
*        OTHER EQUATES                                                *
*                                                                     *
***********************************************************************
         SPACE 2
CONST1   EQU   1                  USED TO ADDRESS R0 IN SAVEAREA AFTER
*                                 SAVE AREA POINTER HAS BEEN
*                                 CHANGED TO USE A BYTE IN THE
*                                 SAVE AREA AS A WORKAREA
CONST8   EQU   8                  USED AS A DISPLACEMENT TO STORE
*                                 REGISTERS INTO A SAVE AREA
CONST12  EQU   12                 SHIFT COMMPLETION CODE INTO BITS
*                                 8-19 OF REGISTER
CONST7   EQU   7                  DISPLACEMENT INTO SAVE AREA OF WORK
*                                 BYTE
CONST4   EQU   4                  USED TO REFERENCE R1 IN SAVE AREA
CONST64  EQU   64                 DISPLACEMENT TO R14 IN SAVE AREA
*                                  WHEN ADDRESS POINTS TO BEGINNING
*                                  OF SAVE AREA
CONST56  EQU   56                 DISPLACEMENT TO R14 IN SAVE AREA
*                                  WHEN ADDRESS POINTS TO R0 SLOT
*                                  IN SAVE AREA
SYSMSK00 EQU   X'00'              MASK OF 00 TO 'OR' AGAINST SYSTEM
*                                  MASK IN CURRENT PSW WITHOUT CHANGING
*                                  IT
SYSMSK03 EQU   X'03'              MASK TO CHECK SYSTEM MASK FOR
*                                  DISABLEMENT OF I/O AND EXTERNAL
*                                  INTERRUPTS
NULL     EQU   X'00'              BYTE OF 00 USED TO ZERO RESTART
*                                  RECURSION BYTE
LOWBYTE  EQU   1                  MASK FOR CLM INSTRUCTIONS, COMPARE
*                                  LOW ORDER BYTE OF REG TO STORAGE
LEN7REGS EQU   28                 LENGTH OF 7 REGISTERS FOR MOVE INSTR
         SPACE 2
***********************************************************************
*                                                                     *
*        THE FOLLOWING EQUATES ARE USED TO INTERFACE WITH IEAVTRTM.   *
*        THEY ASSIGN REGISTERS AND FLAGS WHICH ARE USED BY IEAVTRTM.  *
*        THE NAMES USED ARE THE SAME NAMES AS USED BY IEAVTRTM.  THE  *
*        REGISTER NAMES ARE DECLARED IN IEAVTRTM.  THE FUNCTION CODE  *
*        NAMES ARE DECLARED IN THE IHART1W MAPPING MACRO.  CHANGES    *
*        IN THE RTM1WA RELATING TO THE FUNCTION CODES OR IN MODULE    *
*        IEAVTRTM RELATING TO INTERFACE REGISTERS MUST BE REFLECTED   *
*        IN THE CORRESPONDING EQUATES.                                *
*                                                                     *
***********************************************************************
         SPACE 2
*
*        REGISTER EQUATES
*
FUNCTION EQU   R0                 USED TO CONTAIN A FUNCTION CODE THAT
*                                 REFLECTS THE ENTRY POINT
FLAGSCC  EQU   R1                 USED TO CONTAIN CALLRTM FLAGS AND
*                                 COMPLETION CODES
TARGASID EQU   R2                 USED TO CONTAIN ASID FOR CROSS ADDR
*                                 SPACE FUNCTION REQUESTS
ADDRPSW1 EQU   R2                 USED TO CONTAIN ADDRESS OF FIRST PART
*                                 OF PSW
ADDRPSW2 EQU   R3                 USED TO CONTAIN ADDRESS OF SECOND
*                                 PART OF PSW
TARGTCB  EQU   R3                 USED TO CONTAIN ADDRESS OF TCB
TARGSRB  EQU   R3                 USED TO CONTAIN ADDRESS OF SRB
TRAKAREA EQU   R4                 USED TO CONTAIN ADDRESS OF RECOVERY
*                                 STACK OR ADDR OF FRR 6 WORDS
DUMPOPTS EQU   R5                 USED TO CONTAIN ADDR OF DUMP OPTIONS
REPAIRAD EQU   R5                 USED TO CONTAIN ADDRESS OF REPAIR
*                                 DATA ON MACHINE CHECK REENTRY
REPRDATA EQU   R5                 USED TO CONTAIN ABBREVIATED REPAIR
*                                 DATA ON MACHINE CHECK REENTRY
ADLOGREC EQU   R6                 USED TO CONTAIN ADDRESS OF LOGREC
*                                 BUFFER ON MACHINE CHECK ENTRY
EEDCHAIN EQU   R6                 USED TO CONTAIN THE ADDRESS OF A
*                                 CHAIN OF EED'S (EXTENDED ERROR DESCR-
*                                 IPTORS)
RBADDR   EQU   R7                 USED TO CONTAIN ADDRESS OF AN RB
SAVAREAP EQU   R13                USED TO CONTAIN ADDRESS OF A SAVE
*                                 AREA - EITHER THE CALLERS OR AN
*                                 INTERRUPT HANDLERS
         SPACE 2
*
*        FUNCTION CODE EQUATES WHICH IDENTIFY ENTRY POINT TO IEAVTRTM
*
RT1WPCFL EQU   1                  FUNCTION CODE FOR PCFLIH ENTRY POINT
RT1WREST EQU   2                  FUNCTION CODE FOR RESTART ENTRY POINT
RT1WSVC  EQU   3                  FUNCTION CODE FOR SVCFLIH ENTRY POINT
RT1WDAT  EQU   4                  FUNCTION CODE FOR DATERR  ENTRY POINT
RT1WMCHR EQU   5                  FUNCTION CODE FOR MCH REENTRY POINT
RT1WPGIO EQU   10                 FUNCTION CODE FOR PGIOERR ENTRY POINT
RT1WABT1 EQU   11                 FUNCTION CODE FOR ABTERM ENTRY POINT,
*                                  (TCB IN CURRENT ADDRESS SPACE)
RT1WABT2 EQU   12                 FUNCTION CODE FOR CVTBTERM ENTRY PT,
*                                  (COMPATIBLE BRANCH ENTRY INTERFACE)
RT1WABT3 EQU   13                 FUNCTION CODE FOR CROSS ADDRESS SPACE
*                                 ABTERM REENTRY POINT
RT1WMEMT EQU   15                 FUNCTION CODE FOR MEMTERM ENTRY POINT
RT1WXMAB EQU   16                 FUNCTION CODE FOR CROSS ADDRESS SPACE
*                                 ABTERM ENTRY POINT
RT1WMACH EQU   20                 FUNCTION CODE FOR MCH ENTRY POINT
         SPACE 2
*
*        FUNCTION CODE EQUATES WHICH IDENTIFY EXIT TYPE TO IEAVTRT1
*
RT1RETRY EQU   32                 FUNCTION CODE FOR RETRY EXIT
RT1DISP  EQU   35                 FUNCTION CODE FOR DISPATCHER EXIT
RT1SRBEX EQU   36                 FUNCTION CODE FOR SRB EXIT
RT1EXPRO EQU   37                 FUNCTION CODE FOR EXIT PROLOGUE EXIT
RT1RESUM EQU   34                 FUNCTION CODE FOR RESTART RESUME EXIT
RT1RET   EQU   38                 FUNCTION CODE FOR RET TO CALLER EXIT
RT1MCHEX EQU   33                 FUNCTION CODE FOR MCH EXIT
         EJECT
***********************************************************************
*                                                                     *
*        IEAVTRT1 IS AN EXTENSION OF THE CALLRTM MACRO.  THE CALLRTM  *
*        MACRO IS DEPENDENT ON THE FOLLOWING CODE BEING DIRECTLY      *
*        AFTER THE CSECT STATEMENT.  THE ADDRESSABILITY AND BRANCH    *
*        INSTRUCTION ARE FOR THE CVTBTERM COMPATIBLE BRANCH ENTRY TO  *
*        ABTERM.  THE ADCONS ARE USED BY THE CALLRTM MACRO TO MATCH   *
*        THE ENTRY POINT TO THE TYPE= OPERAND ON THE CALLRTM MACRO.   *
*        IF THE FOLLOWING STATEMENTS ARE CHANGED OR MOVED, THE        *
*        CALLRTM MACRO MUST BE CHANGED                                *
*                                                                     *
***********************************************************************
         SPACE 2
         BALR  R15,0              COMPATIBLE INTERFACE FOR BRANCH ENTRY
         USING *,15                TO ABTERM
         B     BTERM
         DC    X'0000'            ALIGN FOLLOWING ADCONS ON WORD BDY
         DC    A(DATERR)          DAT ERROR ENTRY POINT ADDRESS
         DC    A(RESTART)         RESTART ENTRY POINT ADDRESS
         DC    A(MACHCK)          MACHINE CHECK ENTRY POINT ADDRESS
         DC    A(SVCERR)          SVC FLIH ENTRY POINT ADDRESS
         DC    A(PGIOERR)         PAGE I/O ERROR ENTRY POINT ADDRESS
         DC    A(CABTERM)         ABTERM, CURR ADDR SPACE ENTRY PT ADDR
         DC    A(MEMTERM)         MEMORY TERMINATION ENTRY POINT ADDR
         DC    A(PROGCK)          PROGRAM CHECK ENTRY POINT ADDRESS
         DC    V(IEAVTACR)        ACR ENTRY POINT
         DC    A(XABTERM)         CROSS ADDRESS SPACE ABTERM ENTRY PT
         MODID BR=NO              PUT MODULE NAME, RELEASE NUMBER AND
*                                  DATE OF COMPILE IN OBJECT CODE
         USING PSA,0
         SPACE 2
***********************************************************************
*                                                                     *
*        THE FOLLOWING CODE SETS THE INTERFACE TO IEAVTRTM WHEN       *
*        IEAVTRT1 IS ENTERED DIRECTLY BY THE CALLER WHO BRANCH ENTERS *
*        USING THE ADDRESS IN CVTBTERM (ADDRESS OF IEAVTRT1).  THIS   *
*        IS THE COMPATIBLE INTEFACE FOR BRANCH ENTRY TO ABTERM        *
*        INPUT REGISTERS -                                            *
*              FLAGSCC  (R1) - CALLRTM FLAGS AND COMPLETION CODES     *
*              FUNCTION (R0) - TCB ADDRESS                            *
*              R14           - RETURN ADDRESS                         *
*                                                                     *
***********************************************************************
         SPACE 2
BTERM    EQU   *
         L     R15,PSAAOLD        ADDRESS OF CURRENT ASCB
         USING ASCB,R15           BASE FOR IHAASCB MAPPING MACRO
         L     R15,ASCBASXB       ADDRESS OF CURRENT ASXB
         USING ASXB,R15           BASE FOR IHAASXB MAPPING MACRO
         L     R15,ASXBSPSA       ADDRESS OF LOCAL WORK/SAVE AREA
         USING WSAL,R15           BASE FOR IHAWSAVT CLASS=LOCAL
         L     R15,WSALABTM       ADDR OF LOCAL ABTERM SAVE AREA
         STM   R0,R15,CONST8(R15) SAVE CALLERS REGISTERS
         LA    SAVAREAP,CONST8(R15) ADDR IN PROPER REG, POINT TO R0
*                                  FOR INTERFACE TO RTM
         BALR  R10,0              ESTABLISH
         USING *,R10               ADDRESSABILITY
         DROP  R15
         LR    TARGTCB,FUNCTION   ADDRESS OF TCB IN PROPER INTERFACE
*                                  REGISTER FOR IEAVTRTM
         LA    TARGTCB,0(TARGTCB) CLEAR HIGH ORDER BIT
         LA    FUNCTION,RT1WABT2  FUNCTION CODE FOR BRANCH ENTRY TO
*                                  ABTERM COMPATIBILE INTERFACE TO RTM
         SETLOCK TEST,TYPE=SPIN,REGS=(R12) TEST TO SEE IF CALLER HOLDS
*                                  ANY SPIN LOCKS
         LTR   R15,R15            TEST SETLOCK RETURN CODE
         BNZ   BTERM2             CONT NORMALLY IF NO LOCKS ARE HELD
         LA    FUNCTION,RT1WXMAB  FUNCTION CODE FOR CROSS ADDRESS
*                                  SPACE ABTERM
         SR    TARGASID,TARGASID  SET ASID=0 SO THAT ABTERM WILL OCCUR
*                                  IN CURRENT ADDRESS SPACE
BTERM2   LA    R15,SETFRR         ADDR OF COMMON SETFRR MACRO
         BALR  R14,R15            GO TO COMMON SETFRR MACRO
         USING RT1T6WDS,TRAKAREA  6 WORDS MAPPED BY RT1T6WDS DSECT
         ST    SAVAREAP,RT1TREGS  CHECKPOINT ADDRESS OF SAVE AREA
         STC   FUNCTION,RT1TENPT  CHECKPOINT FUNCTION CODE
         SR    DUMPOPTS,DUMPOPTS  NO DUMPOPTS
         SR    EEDCHAIN,EEDCHAIN  NO EED'S
         SR    RBADDR,RBADDR      NO RB ADDRESS
         B     GOTORTM            GO SET UP TO GO TO IEAVTRTM
         DROP  TRAKAREA
         SPACE 2
***********************************************************************
*                                                                     *
*        THE FOLLOWING CODE SETS THE INTERFACE TO IEAVTRTM WHEN       *
*        IEAVTRT1 IS ENTERED BY THE PCFLIH IF RECURSIVE TRANSLATION   *
*        FAILURES HAVE OCCURED WITHIN THE RECOVERY PROCESS            *
*        INPUT REGISTERS -                                            *
*              FLAGSCC  (R1) - CALLRTM FLAGS AND COMPLETION CODES     *
*              R15           - ENTRY POINT ADDRESS                    *
*                                                                     *
***********************************************************************
         SPACE 2
DATERR   LR    R10,R15            ENTRY POINT ADDRESS SET BY CALLRTM
         USING DATERR,R10         ESTABLISH ADDRESSABILITY
         LA    FUNCTION,RT1WDAT   FUNCTION CODE FOR DAT ERROR ENTRY PT
         L     R8,PSALCCAV        ADDRESS OF CURRENT LCCA
         USING LCCA,R8            BASE FOR IHALCCA MAPPING MACRO
         L     R2,LCCAASID        CHECK FOR POSSIBLE TRASERR   @ZA02390
         LTR   R2,R2              IS THERE A TRASD FROM ASID   @ZA02390
         BZ    DATERR02           IF NOT CONTINUE DATERR PROC  @ZA02390
         L     R1,CC0FC           SET UP TRASERR COMP CODE     @ZA02390
         SR    R5,R5              SET UP TO ZERO LCCAASID      @ZA02390
         ST    R5,LCCAASID        ZERO LCCAASID                @ZA02390
         L     R5,PSAAOLD         -> ASCB IN CONTROL PRE TRAS  @ZA02390
         USING ASCB,R5                                         @ZA02390
         LCTL  1,1,ASCBSTOR       RESTORE STORE TO ORIG MEMORY @ZA02390
         DROP  R5                                              @ZA02390
         LA    R15,TRASERR        CONTINUE AS IF PROGCHK       @ZA02390
         BR    R15                WITH TRASERR COMP CODE       @ZA02390
DATERR02 L     R11,CCMASK         MASK TO CHECK CALL RTM FLAGS FOR
*                                  PRESENCE OF COMPLETION CODE @ZA02390
         NR    R11,FLAGSCC        IS A COMPLETION CODE PASSED
         BZ    DATERR03           YES, GO FIND PSW
         LH    R11,FLCPICOD       NO-GET HARDWARE STORED INTERRUPT CODE
         LA    R15,BUILDCC        ADDRESS OF RTN TO BUILD COMPCODE
         BALR  R14,R15            GO BUILD COMPLETION CODE FROM
*                                  INTERRUPT CODE
         OR    FLAGSCC,R11        COMPLETION CODE IN PROPER REGISTER
DATERR03 LA    ADDRPSW1,FLCPOPSW  FIRST PART OF PSW
         LA    ADDRPSW2,PSAEPPSW  SECOND PART OF PSW
         LA    SAVAREAP,LCCAPGR1  INTERRUPT REGS IN PRIMARY SAVE AREA
         L     TRAKAREA,PSAPSTK   ADDRESS OF PCFLIH RECOVERY STACK
         SR    DUMPOPTS,DUMPOPTS  NO DUMPOPTS
         SR    EEDCHAIN,EEDCHAIN  NO EED'S
         SR    RBADDR,RBADDR      NO RB ADDRESS
         B     GOTORTM            GO SET UP TO BRANCH TO IEAVTRTM
         DROP  R8
         SPACE 2
***********************************************************************
*                                                                     *
*        THE FOLLOWING CODE SETS THE INTERFACE TO IEAVTRTM WHEN       *
*        IEAVTRT1 IS ENTERED BY THE RESTART FLIH                      *
*        INPUT REGISTERS -                                            *
*              R15            - ENTRY POINT ADDRESS                   *
*                                                                     *
***********************************************************************
         SPACE 2
RESTART  LR    R10,R15            ENTRY POINT ADDRESS SET BY CALLRTM
         USING RESTART,R10        ESTABLISH ADDRESSABILITY
         LA    FUNCTION,RT1WREST  FUNCTION CODE FOR RESTART ENTRY POINT
         L     FLAGSCC,CC071      COMPLETION CODE FOR RESTART
         LA    ADDRPSW1,PSARSPSW  FIRST PART OF PSW
         SR    ADDRPSW2,ADDRPSW2  INDICATE NO SECOND PART OF PSW
         L     R8,PSALCCAV        ADDRESS OF CURRENT LCCA
         USING LCCA,R8            BASE FOR IHALCCA MAPPING MACRO
         LA    SAVAREAP,LCCARSGR  ADDR OF RESTART FLIH REG SAVE AREA
         L     TRAKAREA,PSARSTK   ADDR OF RESTART RECOVERY STACK
         SR    DUMPOPTS,DUMPOPTS  NO DUMPOPTS
         SR    EEDCHAIN,EEDCHAIN  NO EED'S
         SR    RBADDR,RBADDR      NO RB ADDRESS
         NI    PSARECUR,NULL      ZERO RESTART RECURSION BYTE
         B     GOTORTM            GO SET UP TO GO TO IEAVTRTM
         DROP  R8
         SPACE 2
***********************************************************************
*                                                                     *
*        THE FOLLOWING CODE SETS THE INTERFACE TO IEAVTRTM WHEN       *
*        IEAVTRT1 IS ENTERED BY MCH OR ACR TO PROCESS HARDWARE        *
*        RECORDING AND HARDWARE DAMAGE REPAIR                         *
*        INPUT REGISTERS -                                            *
*              FLAGSCC  (R1)  - ADDRESS OF LOGREC BUFFER              *
*              SAVAREAP (R13) - ADDRESS OF SAVE AREA                  *
*              R14            - RETURN ADDRESS                        *
*              R15            - ENTRY POINT ADDRESS                   *
*                                                                     *
***********************************************************************
         SPACE 2
MACHCK   STM   R0,R15,CONST8(SAVAREAP) SAVE CALLERS REGISTERS  IN SAVE
*                                       AREA PROVIDED BY HIM
         LA    SAVAREAP,CONST8(SAVAREAP)  ADDRESS POINTS TO R0
         LR    R10,R15            ENTRY POINT ADDRESS SET BY CALLRTM
         USING MACHCK,R10         ESTABLISH ADDRESSABILITY
         LA    FUNCTION,RT1WMACH  FUNCTION CODE FOR MACHINE CHECK E.P.
         SETFRR A,FRRAD=RTHFRRAD,PARMAD=(TRAKAREA),WRKREGS=(R12,R9)
         USING RT1T6WDS,TRAKAREA  6 WORDS ARE MAPPED BY RT1T6WDS DSECT
         ST    SAVAREAP,RT1TREGS  CHECKPOINT ADDR OF CALLERS SAVE AREA
         STC   FUNCTION,RT1TENPT  CHECKPOINT FUNCTION CODE
         LR    ADLOGREC,FLAGSCC   PASS ADDR OF LOGREC BUFFER TO RTM
         B     GOTORTM2           GO SET UP TO GO TO IEAVTRTM
         DROP  TRAKAREA
         SPACE 2
***********************************************************************
*                                                                     *
*        THE FOLLOWING CODE SETS THE INTERFACE TO IEAVTRTM WHEN       *
*        IEAVTRT1 IS ENTERED BY THE SVC FLIH BECAUSE AN SVC WAS       *
*        ISSUED WHILE THE CPU WAS LOCKED OR IN SRB MODE               *
*        INPUT REGISTERS -                                            *
*              R15            - ENTRY POINT ADDRESS                   *
*                                                                     *
***********************************************************************
         SPACE 2
SVCERR   LR    R10,R15            ENTRY POINT ADDRESS SET BY CALLRTM
         USING SVCERR,R10         ESTABLISH ADDRESSABILITY
         LA    FUNCTION,RT1WSVC   FUNCTION CODE FOR SVCERR ENTRY POINT
         L     R8,PSALCCAV        ADDRESS OF CURRENT LCCA
         USING LCCA,R8            BASE FOR IHALCCA MAPPING MACRO
         SR    DUMPOPTS,DUMPOPTS  PRE-SET REG - NO DUMPOPTS
         SR    EEDCHAIN,EEDCHAIN  PRE-SET REG - NO EED'S
         L     R9,FLCSOPSW+CONST4 SECOND WORD OF SVC OLD PSW
         LA    R9,0(R9)           INSTRUCTION COUNTER ADDRESS
         S     R9,LENSVC          ADDRESS OF SVC INSTRUCTION ISSUED
         CLC   FLCSVCN,SVC13INC   WAS SVC ISSUED SVC 13 -
*                                  IS INTERRUPT CODE = 13
         BNE   SVCERR06           NO, COMPLETION CODE IS SET BY SVCFLIH
*                                  IN FLAGSCC, BYPASS SVC 13 ACTION
*    SVC INSTRUCTION ISSUED WAS SVC 13
         C     R9,RTMS13AD        WAS SVC 13 ISSUED BY IEAVTRTM
         BE    SVCERR04           YES, GO OBTAIN COMPLETION CODE
*    THE ABEND MACRO WAS ISSUED BY SOMEONE
         L     FLAGSCC,LCCASGPR+CONST4     COMPLETION CODE FROM ABEND
*                                          MACRO (REG1)       @YA02598
         L     R11,DMPOMASK       MASK TO CHECK FOR PRESENCE OF DMPOPTS
         NR    R11,FLAGSCC        ARE DUMPOPTS PRESENT
         BZ    SVCERR06           NO, GO SET UP IEAVTRTM REGISTERS
         L     DUMPOPTS,LCCASGPR  ADDR OF DUMPOPTS FROM ABEND MACRO(R0)
*                                                              @YA02598
         B     SVCERR06           GO SET UP IEAVTRTM REGISTERS
SVCERR04 EQU   *
         L     FLAGSCC,LCCASGPR+CONST4     COMPLETION CODE WAS IN REG 1
*                                                              @YA02598
         L     EEDCHAIN,LCCASGPR  ADDR OF EED CHAIN OR 1 WAS IN REG 0
*                                                              @YA02598
         LA    R11,EEDNULL        INDICATION OF MISSING EED
         CR    EEDCHAIN,R11       IS THEIR AN EED
         BE    SVCERR06           NO, GO SET RTM REGS FROM LCCA, PSA
         USING EED,EEDCHAIN       BASE FOR EED DSECT
         LA    SAVAREAP,EEDREGS   ADDRESS OF REGISTERS IN EED
         LA    ADDRPSW1,EEDPSW1   ADDRESS OF FIRST PART OF PSW IN EED
         LA    ADDRPSW2,EEDINILC  ADDRESS OF SECOND PART OF PSW IN EED
         DROP  EEDCHAIN
         B     SVCERR08           GO GET ADDRESS OF RECOVERY STACK
SVCERR06 EQU   *
         LA    SAVAREAP,LCCASGPR  ADDR OF REG SAVE AREA IN LCCA
*                                                              @YA02598
         LA    ADDRPSW1,FLCSOPSW  ADDRESS OF FIRST PART OF PSW
         LA    ADDRPSW2,PSAESPSW  ADDR OF SECOND PART OF PSW
SVCERR08 L     TRAKAREA,PSASSTK   ADDR OF MISCELANEOUS RECOVERY STACK
         SR    RBADDR,RBADDR      NO RB ADDRESS
         B     GOTORTM            GO SET UP TO GO TO IEAVTRTM
         SPACE 2
***********************************************************************
*                                                                     *
*        THE FOLLOWING CODE SETS THE INTERFACE TO IEAVTRTM WHEN       *
*        IEAVTRT1 IS ENTERED BECAUSE OF A PAGING ERROR                *
*        INPUT REGISTERS -                                            *
*              FLAGSCC  (R1)  - CALLRTM FLAGS AND COMPLETION CODE     *
*              TRAKAREA (R4)  - ADDRESS OF A TCB OR 0                 *
*              DUMPOPTS (R5)  - ADDRESS OF A RB OR 0                  *
*              TARGTCB  (R3)  - ADDRESS OF DUMPOPTS                   *
*              SAVAREAP (R13) - ADDRESS OF A SAVE AREA                *
*              R14            - RETURN ADDRESS                        *
*              R15            - ENTRY POINT ADDRESS                   *
*                                                                     *
***********************************************************************
         SPACE 2
PGIOERR  STM   R0,R15,CONST8(SAVAREAP)   SAVE CALLERS REGISTERS
         LA    SAVAREAP,CONST8(SAVAREAP) SAVE ADDR PONTS TO R0
         LR    R10,R15            ENTRY POINT ADDRESS SET BY CALLRTM
         USING PGIOERR,R10        ESTABLISH ADDRESSABILITY
         LA    TARGTCB,0(TRAKAREA) TCB OR SRB ADDRESS PASSED IN R4
         LA    RBADDR,0(DUMPOPTS) RB ADDRESS OR 0 PASSED IN REGISTER 5
         LA    R15,SETFRR         ADDR OF COMMON SETFRR MACRO
         BALR  R14,R15            GO TO COMMON SETFRR MACRO
         USING RT1T6WDS,TRAKAREA  6 WORDS ARE MAPPED BY RT1T6WDS DSECT
         LA    FUNCTION,RT1WPGIO  FUNCTION CODE FOR PAGING I/O ERROR
         STC   FUNCTION,RT1TENPT  CHECKPOINT FUNCTION CODE
         ST    SAVAREAP,RT1TREGS  CHECKPOINT ADDR OF CALLERS SAVE AREA
         L     R11,CCMASK         MASK TO CHECK CALLRTM FLGS FOR CC
         NR    R11,FLAGSCC        IS COMPLETION CODE PASSED
         BZ    PGIOERR5           YES, BYPASS DEFAULT COMPLETION CODE
         O     FLAGSCC,CC028      SET DEFAULT COMP CODE - X'028'
PGIOERR5 EQU   *
         SR    DUMPOPTS,DUMPOPTS  NO DUMPOPTS
         SR    EEDCHAIN,EEDCHAIN  NO EED'S
         B     GOTORTM            GO SET UP TO GO TO IEAVTRTM
         DROP  TRAKAREA
         SPACE 2
***********************************************************************
*                                                                     *
*        THE FOLLOWING CODE SETS THE INTERFACE TO IEAVTRTM WHEN       *
*        IEAVTRT1 IS ENTERED FOR AN ABTERM REQUEST IN THE CURRENT     *
*        ADDRESS SPACE                                                *
*        INPUT REGISTERS -                                            *
*              FUNCTION (R0)  - TCB ADDRESS OR 0                      *
*              TARGTCB  (R3)  - ADDRESS OF DUMPOPTS                   *
*              FLAGSCC  (R1)  - CALLRTM FLAGS AND COMPLETION CODE     *
*              R14            - RETURN ADDRESS                        *
*              R15            - ENTRY POINT ADDRESS                   *
*                                                                     *
***********************************************************************
         SPACE 2
CABTERM  EQU   *
         USING CABTERM,R15        ENTRY POINT ADDR SET BY CALLRTM
         LTR   FUNCTION,FUNCTION  IS A TCB ADDRESS PASSED
         BNZ   CABTERM1           NO, SAVE CALLERS REGISTERS IN
*                                  CPU WSA, CALLER MUST BE DISABLED
*                                 YES, GO SAVE CALLERS REGS IN LOCAL
*                                  WSA, CALLER MUST HAVE LOCAL LOCK
         L     R15,PSALCCAV       ADDRESS OF CURRENT LCCA
         USING LCCA,R15           BASE FOR IHALCCA MAPPING MACRO
         L     R15,LCCACPUS       ADDRESS OF CPU WORK/SAVE AREA
         USING WSAC,R15           BASE FOR IHAWSAVT CLASS=CPU
         L     R15,WSACABTM       ADDRESS OF CPU WSA FOR ABTERM
         STM   R0,R15,CONST8(R15) SAVE CALLERS REGISTERS
         LA    SAVAREAP,CONST8(R15) POINT TO R0 IN RIGHT REGISTER
         BALR  R15,0              ESTABLISH ADDRESS TO GO TO COMMON
         USING *,R15               CODE
         B     CABTERM2           GO SET FUNCTION CODE FOR ENTRY POINT
CABTERM1 EQU   *
         L     R15,PSAAOLD        ADDRESS OF CURRENT ASCB
         USING ASCB,R15           BASE FOR IHAASCB MAPPING MACRO
         L     R15,ASCBASXB       ADDRESS OF CURRENT ASXB
         USING ASXB,R15           BASE FOR IHAASXB MAPPING MACRO
         L     R15,ASXBSPSA       ADDRESS OF LOCAL WORK/SAVE AREA
         USING WSAL,R15           BASE FOR IHASWAVT CLASS=LOCAL
         L     R15,WSALABTM       ADDRESS OF LOCAL WSA FOR ABTERM
         STM   R0,R15,CONST8(R15) SAVE CALLERS REGISTERS
         LA    SAVAREAP,CONST8(R15)   POINT TO R0 IN RIGHT REG
CABTERM2 EQU   *
         BALR  R10,0              ESTABLISH ADDRESSABILITY FOR COMMON
         USING *,R10               CODE
         DROP  R15
         LA    R15,SETFRR         ADDR OF COMMON SETFRR MACRO
         BALR  R14,R15            GO TO COMMON SETFRR MACRO
         USING RT1T6WDS,TRAKAREA  6 WORDS ARE MAPPED BY RT1T6WDS DSECT
         ST    SAVAREAP,RT1TREGS  CHECKPOINT ADDR OF REGISTER SAVE AREA
         SR    DUMPOPTS,DUMPOPTS  PRE-SET REG - NO DUMPOPTS
         L     R11,DMPOMASK       MASK TO CHECK CALLRTM FLAGS FOR
*                                  PRESENCE OF DUMPOPTS
         NR    R11,FLAGSCC        ARE DUMPOPTS PRESENT
         BZ    CABTERM6           NO, LEAVE DUMPOPTS REISTER = TO ZERO
         LA    DUMPOPTS,0(TARGTCB) ADDR OF DUMPOPTS IN PROPER REGISTER
CABTERM6 EQU   *
         LR    TARGTCB,FUNCTION   TCB ADDR OR 0 IN PROPER REGISTER
         LA    TARGTCB,0(TARGTCB) CLEAR HIGH ORDER BIT
         LA    FUNCTION,RT1WABT1  FUNCTION CODE FOR ABTERM REQUEST IN
*                                  CURRENT ADDRESS SPACE
         STC   FUNCTION,RT1TENPT  CHECKPOINT FUNCTION CODE
         SR    EEDCHAIN,EEDCHAIN  NO EED'S
         SR    RBADDR,RBADDR      NO RB ADDRESS
         B     GOTORTM            GO SET UP TO GO TO IEAVTRTM
         SPACE 2
***********************************************************************
*                                                                     *
*        THE FOLLOWING CODE SETS THE INTERFACE TO IEAVTRTM WHEN       *
*        IEAVTRT1 IS ENTERED TO TERMINATE AN ADDRESS SPACE            *
*        INPUT REGISTERS -                                            *
*              FLAGSCC  (R1)  - CALLRTM FLAGS AND COMPLETION CODE     *
*              TARGASID (R2)  - ASID                                  *
*              SAVAREAP (R13) - ADDRESS OF A SAVE AREA                *
*              R14            - RETURN ADDRESS                        *
*              R15            - ENTRY POINT ADDRESS                   *
*                                                                     *
***********************************************************************
         SPACE 2
MEMTERM  STM   R0,R15,CONST8(SAVAREAP) SAVE CALLERS REGISTERS IN SAVE
*                                       AREA PROVIDED BY HIM
         LA    R8,CONST8(SAVAREAP)   ADDR POINTS TO R0
         LR    R10,R15            ENTRY POINT ADDRESS
         USING MEMTERM,R10        ESTABLISH ADDRESSABILITY
MEMTERM2 SETLOCK   OBTAIN,TYPE=DISP,MODE=UNCOND,                       *
               RELATED=(MEMTERM,IEAVTRT1(RT1EXITH))
         LA    FUNCTION,RT1WMEMT  FUNCTION CODE FOR MEMORY TERMINATION
         LA    R15,SETFRR         ADDR OF COMMON SETFRR MACRO
         BALR  R14,R15            GO TO COMMON SETFRR MACRO
         USING RT1T6WDS,TRAKAREA  6 WORDS ARE MAPPED BY RT1T6WDS DSECT
         LTR   R13,R13            WAS DISP LOCK OBTAINED BY IEAVTRT1
         BNZ   MEMTERM4           NO, WAS HELD PRIOR TO OUR REQUEST
         OI    RT1TACQR,RT1TDISP  YES, INDICATE LOCK MUST BE FREED AT
*                                  EXIT
MEMTERM4 ST    R8,RT1TREGS        CHECKPOINT ADDR OF CALLERS SAVE AREA
         STC   FUNCTION,RT1TENPT  CHECKPOINT FUNCTION CODE
         LR    SAVAREAP,R8        PASS ADDR OF CALLERS SAVE AREA TO RTM
         L     R11,ASIDMASK       MASK TO CHECK CALLRTM FLGS FOR ASID
         NR    R11,FLAGSCC        IS AN ASID PASSED
         BNZ   MEMTERM6           YES, PASSED IN TARGASID REG (R2)
         SR    TARGASID,TARGASID  NO, ZERO TARGASID
MEMTERM6 EQU   *
         SR    TARGTCB,TARGTCB    NO TCB ADDRESS
         SR    DUMPOPTS,DUMPOPTS  NO DUMPOPTS
         SR    EEDCHAIN,EEDCHAIN  NO EED'S
         SR    RBADDR,RBADDR      NO RB ADDRESS
         B     GOTORTM            GO SET UP TO GO TO IEAVTRTM
         DROP TRAKAREA
         SPACE 2
***********************************************************************
*                                                                     *
*        THE FOLLOWING CODE SETS THE INTERFACE TO IEAVTRTM WHEN       *
*        IEAVTRT1 IS ENTERED BY THE PCFLIH BECAUSE OF AN              *
*        UNANTICAPATED PROGRAM CHECK                                  *
*        INPUT REGISTERS -                                            *
*              FLAGSCC  (R1)  - CALLRTM FLAGS AND COMPLETION CODE     *
*              R15            - ENTRY POINT ADDRESS                   *
*                                                                     *
***********************************************************************
         SPACE 2
TRASERR  EQU   *                  CONTINUE PROCESSING AS PROGCHECK
*                                 IF DATERR OCCURED AND TRASING IS
*                                 INDICATED THE ROUTINE WHICH TRASD
*                                 SHOULD BE FRR PROTECTED AND ISSUE
*                                 MEMTERM IF REQUIRED         @ZA02390
PROGCK   LR    R10,R15            ENTRY POINT ADDRESS SET BY CALLRTM
         USING PROGCK,R10         ESTABLISH ADDRESSABILITY
         LA    FUNCTION,RT1WPCFL  FUNCTION CODE FOR PCFLIH ENTRY POINT
         L     R8,PSALCCAV        ADDRESS OF CURRENT LCCA
         USING LCCA,R8            BASE FOR IHALCCA MAPPING MACRO
         L     R11,CCMASK         MASK FOR PRESENCE OF COMPLETION CODE
         NR    R11,FLAGSCC        HAS COMPLETION CODE BEEN PASSED
         BZ    PROGCK02           YES, GO LOCATE PSW AND REGS FROM
*                                  PRIMARY STATUS SAVE AREA
         L     R11,LCCAPINT       PCFLIH ILC AND INTERRUPT CODE
         N     R11,ICMASK         ISOLATE INTERRUPT CODE IN LOW 2 BYTES
         LA    R15,BUILDCC        ADDR OF RTN TO BUILD COMPCODE
         BALR  R14,R15            GO BUILD COMPCODE FROM INTERRUPT CODE
         OR    FLAGSCC,R11        COMP CODE AND CALLRTM FLAGS - FLAGSCC
         LA    SAVAREAP,LCCAPGR2  REGISTERS AT TIME OF INTERRUPT ARE
*                                  IN SECONDARY STATUS SAVE AREA
         LA    ADDRPSW1,LCCAPPSW  FIRST PART OF PSW IN SECONDARY AREA
         LA    ADDRPSW2,LCCAPINT  SECOND PART OF PSW IN SECONDARY AREA
         B     PROGCK06           GO LOCATE PCFLIH RECOVERY STACK
PROGCK02 EQU   *                  COMPLETION CODE HAS BEEN SET BY
*                                  CALLRTM MACRO IN FLAGSCC
         L     R11,CCMSKFFF       MASK FOR COMPLETION CODE = FFF
         NR    R11,FLAGSCC        ISOLATE COMPLETION CODE
         C     R11,CCMSKFFF       IS COMPLETION CODE = FFF
         BNE   PROGCK04           NO, GO LOCATE PSW AND REGS, CC OK
         LH    R11,FLCPICOD       YES, GET HARDWARE STORED INTERRUPT
*                                  CODE
         LA    R15,BUILDCC        ADDR OF RTN TO BUILD COMPCODE
         BALR  R14,R15            GO BUILD COMPCODE FROM INTERRUPT CODE
         X     FLAGSCC,CCMSKFFF   ZERO PASSED FFF COMPLETION CODE
         OR    FLAGSCC,R11        INSERT COMP CODE BUILT FROM INTERRUPT
*                                  CODE
         O     FLAGSCC,CCMASK     INDICATE RTM ASSIGNED COMPLETION CODE
PROGCK04 EQU   *
         LA    SAVAREAP,LCCAPGR1  REGISTERS AT TIME OF INTERRUPT ARE
*                                 IN PRIMARY STATUS SAVE AREA
         LA    ADDRPSW1,FLCPOPSW  FIRST PART OF PSW IN PRIMARY AREA
         LA    ADDRPSW2,PSAEPPSW  SECOND PART OF PSW
PROGCK06 EQU   *
         L     TRAKAREA,PSAPSTK   ADDRESS OF PCFLIH RECOVERY STACK
         SR    DUMPOPTS,DUMPOPTS  NO DUMPOPTS
         SR    EEDCHAIN,EEDCHAIN  NO EED'S
         SR    RBADDR,RBADDR      NO RB ADDRESS
         B     GOTORTM            GO SET UP TO GO TO IEAVTRTM
         DROP  R8
         SPACE 2
***********************************************************************
*                                                                     *
*        THE FOLLOWING CODE SETS THE INTERFACE TO IEAVTRTM WHEN       *
*        IEAVTRT1 IS ENTERED TO PROCESS A CROSS ADDRESS SPACE ABTERM  *
*        REQUEST                                                      *
*        INPUT REGISTERS -                                            *
*              FUNCTION (R0)  - TCB ADDRESS                           *
*              FLAGSCC  (R1)  - CALLRTM FLAGS AND COMPLETION CODE     *
*              TARGASID (R2)  - ASID                                  *
*              TARGTCB  (R3)  - ADDRESS OF DUMPOPTS                   *
*              SAVAREAP (R13) - ADDRESS OF A SAVE AREA                *
*              R14            - RETURN ADDRESS                        *
*              R15            - ENTRY POINT ADDRESS                   *
*                                                                     *
***********************************************************************
         SPACE 2
XABTERM  STM   R0,R15,CONST8(SAVAREAP) SAVE CALLERS REGISTERS IN SAVE
*                                       AREA PROVIDED BY HIM
         LA    R8,CONST7(SAVAREAP)   ADDRESS POINTS TO WORK BYTE IN
*                                     SAVE AREA
         LR    R10,R15            ENTRY POINT ADDRESS SET BY CALLRTM
         USING XABTERM,R10        ESTABLISH ADDRESSABILITY
         SR    DUMPOPTS,DUMPOPTS  PRE-SET REG - NO DUMPOPTS PRESENT
         L     R11,DMPOMASK       MASK TO CHECK CALLRTM FLAGS FOR
*                                  PRESENCE OF DUMPOPTS
         NR    R11,FLAGSCC        ARE DUMPOPTS PRESENT
         BZ    XABTERM1           NO, LEAVE DUMPOPTS REGISTER = ZERO
         LA    DUMPOPTS,0(TARGTCB) ADDR OF DUMPOPTS IN PROPER REGISTER
XABTERM1 EQU   *
         LR    TARGTCB,FUNCTION   ADDRESS OF PASSED TCB OR ZERO
         LA    TARGTCB,0(TARGTCB) CLEAR HIGH ORDER BIT
         LA    R13,CONST4         PRE-SET LOCK MGR RETURN CODE REGISTER
*                                  TO 'LOCK ALREADY HELD' RETURN CODE
         STOSM 0(R8),SYSMSK00     STORE SYSTEM MASK IN WORK AREA PART
*                                  OF SAVE AREA
         TM    0(R8),SYSMSK03     IS CALLER PHYSICALLY DISABLED
         BNO   XABTERM3           YES, BY PASS SETLOCK REQUEST FOR LOCK
XABTERM2 SETLOCK   OBTAIN,TYPE=LOCAL,MODE=UNCOND,                      *
               RELATED=(ADDRSPACE,IEAVTRT1(RT1EXITI))
XABTERM3 EQU   *
         LA    R15,SETFRR         ADDR OF COMMON SETFRR MACRO
         BALR  R14,R15            GO TO COMMON SETFRR MACRO
         USING RT1T6WDS,TRAKAREA  6 WORDS ARE MAPPED BY RT1T6WDS DSECT
         LTR   R13,R13            DID IEAVTRT1 OBTAIN LOCAL LOCK
         BNZ   XABTERM5           NO, LOCK HELD ON ENTRY
         OI    RT1TACQR,RT1TLLCK  YES, INDICATE AS ACQUIRED RESOURCE -
*                                  MUST BE FREED DURING EXIT PROCESSING
XABTERM5 LA    SAVAREAP,CONST1(R8) ADDR OF CALLERS SAVE AREA IN PROPER
*                                  REGISTER
         ST    SAVAREAP,RT1TREGS  CHECKPOINT ADDR OF CALLERS SAVE AREA
         LA    FUNCTION,RT1WXMAB  FUNCTION CODE FOR CROSS ADDRESS SPACE
*                                  ABTERM
         STC   FUNCTION,RT1TENPT  CHECKPOINT FUNCTION CODE
         SR    EEDCHAIN,EEDCHAIN  NO EED'S
         SR    RBADDR,RBADDR      NO RB ADDRESS
         B     GOTORTM            GO SET UP TO GO TO IEAVTRTM
         DROP  TRAKAREA
         SPACE 2
***********************************************************************
*                                                                     *
*        THE FOLLOWING CODE SETS THE INTERFACE TO IEAVTRTM WHEN       *
*        IEAVTRT1 IS ENTERED BY THE SRB DISPATCHER FOR CROSS ADDRESS  *
*        SPACE ABTERM REENTRY.  IEAVTRT1 WAS PREVIOUSLY ENTERED, AT   *
*        XABTERM, FOR AN ABTERM REQUEST WITH AN ASID.  THIS ENTRY IS  *
*        THE RESULT OF IEVATRTM'S PROCCESSING TO GET THE RTM INTO THE *
*        ADDRESS SPACE ASSOCIATED WITH THE ASID SUPPLIED ON THE       *
*        ORIGINAL ABTERM REQUEST                                      *
*        INPUT REGISTERS -                                            *
*              FUNCTION (R0)  - ADDRESS OF SRB                        *
*                                                                     *
***********************************************************************
         SPACE 2
IEAVTRTX BALR  R10,0              ESTABLISH
         USING *,R10               ADDRESSABILITY
         LR    R8,FUNCTION        ADDRESS OF PASSED SRB
         USING SRB,R8             BASE FOR IHASRB MAPPING MACRO
         LA    FUNCTION,RT1WABT3  FUNCTION CODE FOR ABTERM REENTRY
         LA    R15,SETFRR         ADDR OF COMMON SETFRR MACRO
         BALR  R14,R15            GO TO COMMON SETFRR MACRO
         USING RT1T6WDS,TRAKAREA  6 WORDS ARE MAPPED BY RT1T6WDS DSECT
         STC   FUNCTION,RT1TENPT  CHECKPOINT FUNCTION CODE
         L     R9,SRBPARM         ADDRESS OF PARAMETERS SET BY IEAVTRTM
         USING XABRREGS,R9        XABRREGS MAPS IEAVTRTM REGS 0-6
XABRT3   SETLOCK  OBTAIN,TYPE=LOCAL,MODE=UNCOND,                       *
               RELATED=(ADDRSPACE,IEAVTRT1(RT1EXITQ))
         OI    RT1TACQR,RT1TLLCK  INDICATE LOCAL LOCK OBTAINED - MUST
*                                  BE FREED IN EXIT PROCESSING
*    OBTAIN LOCAL WORK/SAVEAREA FOR ABTERM
         L     SAVAREAP,PSAAOLD   ADDRESS OF CURRENT ASCB
         USING ASCB,SAVAREAP      BASE FOR IHAASCB MAPPING MACRO
         L     SAVAREAP,ASCBASXB  ADDRESS OF CURRENT ASXB
         USING ASXB,SAVAREAP      BASE FOR IHAASXB MAPPING MACRO
         L     SAVAREAP,ASXBSPSA  ADDRES OF LOCAL WORK/SAVE AREA
         USING WSAL,SAVAREAP      BASE FOR IHAWSA MACRO, CLASS=LOCAL
         L     SAVAREAP,WSALABTM  ADDRESS OF LOCAL WSA FOR ABTERM
         DROP  SAVAREAP
         L     R14,FLCCVT         ADDRESS OF CVT FROM PSA
         USING CVTMAP,R14         BASE FOR CVT MAPPING MACRO
         L     R14,CVTSRBRT       ADDRESS OF SRB DISPATCHER - EXIT
*                                  ADDRESS FOR SRB'S
         DROP  R14
         ST    R14,CONST64(SAVAREAP) SET EXIT ADDRESS IN REG 14
*                                    SLOT OF SAVE AREA
         LA    SAVAREAP,CONST8(SAVAREAP)  SAVE ADDR POINTS TO R0
         ST    SAVAREAP,RT1TREGS  CHECKPOINT ADDRESS OF SAVE AREA
         MVC   0(LEN7REGS,SAVAREAP),XABRREGS     SAVE REGS IN LOCAL
*                                                 WSA SO QUICK CELL
*                                                 CAN BE FREED
         LR    R11,TRAKAREA       PRESERVE ADDRESS OF 6 WORDS,
*                                 FREECELL DESTROYS REGS 0-4
         L     R1,RT1CPOOL        CELL POOL ID USED TO OBTAIN CELL
         FREECELL  CPID=(R1),CELL=(R8),SAVE=NO,BRANCH=YES
         DROP  R8
         DROP  R9
         LA    FUNCTION,RT1WABT3  RESTORE FUNCTION CODE
         LM    FLAGSCC,EEDCHAIN,CONST4(SAVAREAP) ORGINAL CALLRTM REGS
         LR    TRAKAREA,R11       CURRENT ADDRESS OF 6 WORDS
         SR    RBADDR,RBADDR      NO RB ADDRESS
         B     GOTORTM            GO SET UP TO GO TO IEAVTRTM
         DROP  TRAKAREA
         SPACE 2
***********************************************************************
*                                                                     *
*        THE FOLLOWING CODE SETS THE INTERFACE TO IEAVTRTM WHEN       *
*        IEAVTRT1 IS ENTERED BY MCH OR ACR FOR MACHINE CHECK REENTRY  *
*                                                                     *
***********************************************************************
         SPACE 2
IEAVTRTN BALR  R10,0              ESTABLISH
         USING *,R10               ADDRESSABILITY
         LA    FUNCTION,RT1WMCHR  FUNCTION CODE FOR MACHINE CHK REENTRY
         L     TRAKAREA,PSAPSTK   ADDRESS OF PCFLIH RECOVERY STACK
         B     GOTORTM            GO SET UP TO GO TO IEAVTRTM
         SPACE 2
***********************************************************************
*                                                                     *
*        COMMON ROUTINE FOR INTERFACING WITH IEAVTRTM                 *
*                                                                     *
***********************************************************************
         SPACE 2
GOTORTM  EQU   *
         BALR  R10,0              ESTABLISH
         USING *,R10               ADDRESSABILITY
         TM    PSASUP2,PSAACR     WAS ACR IN CONTROL AT TIME OF ERROR
         BZ    GOTORTM2           NO, CONTINUE ROUTING TO IEAVTRTM
         L     R15,ACRENTRY       YES, GET ADDR OF ACR'S RECOVERY RTN
         BALR  R14,R15            GO TO ACR'S RECOVERY ROUTINE
GOTORTM2 EQU   *
         BALR  R10,0              ESTABLISH
         USING *,R10               ADDRESSABILITY
         L     R15,RTMENTRY       ENTRY POINT ADDRESS OF IEAVTRTM
         BALR  R14,R15            GO TO IEAVTRTM
         SPACE 2
***********************************************************************
*                                                                     *
*        IF IEAVTRTM RETURNS TO IEAVTRT1, IT WILL RETURN HERE         *
*                                                                     *
***********************************************************************
         SPACE 2
IEAVTRTZ EQU   *
         BALR  R10,0              ESTABLISH
         USING *,R10               ADDRESSABILITY
         CLM   FUNCTION,LOWBYTE,RETYEXIT    IS EXIT TYPE RETRY
         BNE   RT1EXIT2           NO, GO CHECK FOR EXIT TO DISPATCHER
         LM    R0,R15,0(R1)       YES, LOAD RETRY REGISTERS
         BR    R15                GO TO RETRY ROUTINE
RT1EXIT2 EQU   *
         CLM   FUNCTION,LOWBYTE,DISPEXIT    IS EXIT TYPE DISPATCHER
         BNE   RT1EXIT4           NO, GO CHECK FOR EXIT TO SRB DISP
         L     R15,FLCCVT         ADDRESS OF CVT
         USING CVTMAP,R15         BASE FOR CVT MAPPING MACRO
         L     R15,CVT0DS         ADDRESS OF DISPATCHER
         BR    R15                EXIT TO DISPATCHER
         DROP  R15
RT1EXIT4 EQU   *
         CLM   FUNCTION,LOWBYTE,SRBEXIT     IS EXIT TYPE SRB
         BNE   RT1EXIT6           NO, GO CHECK FOR EXIT TO EXIT PROLOG
         L     R15,FLCCVT         ADDRESS OF CVT
         USING CVTMAP,R15         BASE FOR CVT MAPPING MACRO
         L     R15,CVTSRBRT       ADDRESS OF SRB RETURN POINT
         BR    R15                GO RETURN TO SRB DISPATCHER
         DROP  R15
RT1EXIT6 EQU   *
         CLM   FUNCTION,LOWBYTE,EXPROEX     IS EXIT TYPE EXIT PROLOGUE
         BNE   RT1EXIT8           NO, GO CHECK FOR RESTART RESUME EXIT
         L     R14,PSATOLD        ADDRESS OF CURRENT TCB       @YM06733
         USING TCB,R14            BASE FOR TCB PROPER          @YM06733
         LM    R0,R1,TCBGRS0      RESTORE REG0 AND REG1        @YM06733
         L     R15,TCBGRS15       RESTORE REG15                @YM06733
         L     R14,FLCCVT         ADDRESS OF CVT               @YM06733
         USING CVTMAP,R14         BASE FOR CVT MAPPING MACRO   @YM06733
         L     R14,CVTEXPRO       ADDRESS OF EXIT PROL ROUTINE @YM06733
         BR    R14                GO TO EXIT PROLOGUE          @YM06733
         DROP  R14                                             @YM06733
RT1EXIT8 EQU   *
         CLM   FUNCTION,LOWBYTE,RESUMEEX    IS EXIT TYPE RESTART RESUME
         BNE   RT1EXITC           NO, GO RETURN TO CALLER OR MCH
         L     R15,PSALCCAV       YES,LOCATE CURRENT LCCA
         USING LCCA,R15           BASE FOR IHALCCA MAPPING MACRO
         LA    R15,LCCARSGR       LOCATE RESTART ERROR REGS IN LCCA
         LM    R0,R15,0(R15)      LOAD RESTART ERROR REGS
         LPSW  PSARSPSW           LOAD RESTART OLD PSW
         DROP  R15
RT1EXITC EQU   *                  EXIT TYPE IS EITHER RETURN TO
*                                  CALLER (RETEXIT) OR RETURN TO
*                                  MACHINE CHECK HANDLER (MCHEXIT)
*    LOCATE ADDRESS OF 6 WORD WORK AREA SUPLIED BY FRR
         L     R15,PSACSTK        ADDR OF CURRENT RECOVERY STACK
         USING FRRS,R15           BASE FOR IHAFRRS MAPPING MACRO
         L     R15,FRRSCURR       ADDRESS OF CURRENT FRR DATA
         USING FRRSENTR,R15       BASE FOR FRR DATA MAPPING
         LA    R15,FRRSPARM       ADDRESS OF FRR 6 WORDS
         USING RT1T6WDS,R15       BASE FOR MAPPING DSECT
         CLI   RT1TENPT,RT1WABT3  WAS ORGINAL ENTRY
*                                 'CROSS ADDRESS SPACE ABTERM REENTRY'
         BE    RT1EXITP           YES, GO FREE LOCAL LOCK AND RETURN
*                                 TO SRB DISPATCHER
         L     R8,RT1TREGS        ADDRESS OF REGISTER SAVE AREA
*                                  (ADDR POINTS TO R0 IN SAVE AREA)
         CLM   FUNCTION,LOWBYTE,MCHEXIT     IS EXIT TYPE MCH
         BNE   RT1EXITE           NO, GO SET UP REGISTERS FOR RETURN
         ST    FLAGSCC,CONST4(R8) YES, STORE PASSED PARM IN REG 1
*                                  SLOT OF SAVE AREA SO COMMON EXIT
*                                  PROCESSING CAN BE DONE
RT1EXITE EQU   *
         LA    R9,0(R8)           ADDRESS OF REGISTER SAVE AREA
         BCTR  R9,0               ADDR OF BYTE BEFORE R0 IN SAVEAREA
*                                  - USE AS WORK AREA TO TEST FOR
*                                  RESOURCES ACQUIRED BY IEAVTRT1
         MVC   0(L'RT1TACQR,R9),RT1TACQR     RESOURCES ACQUIRED FLAGS
         SETFRR    D,WRKREGS=(R11,R12)       DELETE IEAVTRT1'S FRR
         TM    0(R9),RT1TDISP     DID IEAVTRT1 ACQUIRE DISP LOCK
         BZ    RT1EXITH           NO, GO CHECK FOR LOCAL LOCK
RT1EXITG SETLOCK   RELEASE,TYPE=DISP,                                  *
               RELATED=(MEMTERM,IEAVTRT1(MEMTERM2))
RT1EXITH TM    0(R9),RT1TLLCK     DID IEAVTRT1 ACQUIRE LOCAL LOCK
         BZ    RT1EXITJ           NO, GO RESTORE REGS AND RETURN
RT1EXITI SETLOCK   RELEASE,TYPE=LOCAL,                                 *
               RELATED=(ADDRSPACE,IEAVTRT1(XABTERM2))
RT1EXITJ LM    R0,R15,0(R8)       RESTORE CALLERS REGISTERS
         BR    R14                RETURN TO CALLER
RT1EXITP EQU   *
         SETFRR    D,WRKREGS=(R11,R12)     DELETE IEAVTRT1'S FRR
RT1EXITQ SETLOCK   RELEASE,TYPE=LOCAL,                                 *
               RELATED=(ADDRSPACE,IEAVTRT1(XABRT3))
         L     R14,FLCCVT         ADDRESS OF CVT FORM PSA
         USING CVTMAP,R14         BASE FOR CVT MAPPING MACRO
         L     R14,CVTSRBRT       ADDRESS OF SRB DISPATCHER - EXIT
*                                 ADDRESS FOR SRB'S
         DROP  R14
         BR    R14                RETURN TO SRB DISPATCHER
         EJECT
***********************************************************************
*                                                                     *
*        SUBROUTINE TO CONVERT INTERRUPT CODE TO COMPLETION CODE      *
*        INPUT:    - R11 INTERRUPT CODE IN LOW ORDER 2 BYTES          *
*                  - R14 RETURN ADDRESS                               *
*                  - R15 ENTRY POINT ADDRESS                          *
*        OUTPUT:   - R11 COMPLETION CODE                              *
*        REGS USED - R11 WORK REGISTER                                *
*                  - R15 BASE REGISTER                                *
*                                                                     *
***********************************************************************
         SPACE 2
BUILDCC  EQU   *
         USING BUILDCC,R15        ENTRY POINT ADDRESS SETUP BY CALLER -
*                                  USE AS BASE REGISTER
         LTR   R11,R11            TEST INTERRUPT CODE FOR VALIDITY
         BNP   BUILDCC4           INTERRUPT CODE = TO OR < THAN ZERO
*                                  IS INVALID, GO CONVERT TO C0D CC
         CH    R11,IC16           COMPARE INTERRUPT CODE PASSED TO 16
         BL    BUILDCC2           CONVERT INTERRUPT CODE TO 0CX SERIES
         CH    R11,IC19           COMPARE PASSED INTERRUPT CODE TO 19
         BH    BUILDCC4           INTERRUPT CODE > 19 IS INVALID,
*                                  GO CONVERT TO COD COMPLETION CODE
*   INTERRUPT CODE IS 16,17,18 OR 19
         SH    R11,CONST16        INTERRUPT CODE IS  0, 1, 2 OR  3  -
*                                  USE AS INDEX TO SELECT COMPCODE
         IC    R11,CCTABLE(R11)   SELECT CONDITION CODE THAT MATCHES
*                                  INTERRUPT CODE
         B     BUILDCC8           GO SET UP RETURN TO CALLER
BUILDCC2 O     R11,CC0C0          PREFIX INTERRUPT CODE WITH 0C
         B     BUILDCC8           GO SET UP RETURN TO CALLER
BUILDCC4 L     R11,CCC0D          CONVERT INVALID INTERRUPT CODE TO
*                                  C0D COMPLETION CODE
BUILDCC8 SLL   R11,CONST12        COMPLETION CODE IN BITS 8-19
         BR    R14                RETURN TO CALLER
         SPACE 2
SETFRR   EQU *                    COMMON SETFRR MACRO FOR RT1
         USING  SETFRR,R15        LINKAGE TO THIS POINT IS BALR 14,15
         SETFRR   A,FRRAD=RT1FRRAD,PARMAD=(TRAKAREA),WRKREGS=(R12,R9)
         BR    R14                RETURN TO CALLER
***********************************************************************
*                                                                     *
*        THE FOLLOWING IS THE FRR FOR IEAVTRT1                        *
*                                                                     *
***********************************************************************
         SPACE 2
RT1FRR   EQU   *
         LR    R10,R15            ENTRY ADDRESS SET BY RTM
         USING RT1FRR,R10         ESTABLISH ADDRESSABILITY
         USING SDWA,R1            ADDR OF SDWA(RTCT) BASE FOR MAP MACRO
         L     TRAKAREA,SDWAPARM  ADDRESS OF FRR 6 WORDS
         USING RT1T6WDS,TRAKAREA  BASE FOR RT1T6WDS MAPPING DSECT
         LR    R5,R14             PRESERVE RETURN ADDRESS TO RTS -
*                                 R14 IS DESTROYED BY SETRP
         TM    SDWAERRA,SDWARKEY  WAS NEW ERROR A RESTART ERROR
         BO    RT1FRR1            YES, SET UP FOR PERCOLATION
         TM    SDWAERRA,SDWATEXC  WAS NEW ERROR A DATERR
         BO    RT1FRR1            YES, SET UP FOR PERCOLATION
         TM    RT1TACQR,RT1TRETY  IS THIS THE 2ND ENTRY INTO THIS FRR
         BO    RT1FRR1            YES, SET UP FOR PERCOLATION
*                                 NO, SET UP RETRY TO EXIT PROCESSING
         LA    FUNCTION,RT1RET    SET EXIT TYPE TO RETURN-TO-CALLER
         ST    FUNCTION,SDWASR00  STORE EXIT TYPE FOR RETRY
         L     R11,RTZADDR        DETERMINE RETRY ADDRESS
         SETRP RETADDR=(R11),RECORD=YES,RECPARM=RT1ID,RC=4
         OI    RT1TACQR,RT1TRETY  TURN ON RT1'S RETRY INDICATOR
         B     RT1FRR4            GO TO RETURN TO IEAVTRTS
RT1FRR1  EQU   *                  PERCOLATION PATH
         TM    RT1TACQR,RT1TDISP  WAS DISP LOCK OBTAINED BY RT1
         BZ    RT1FRR2            NO, GO CHECK FOR LOCAL LOCK
         OI    SDWAACF3,SDWADISP  YES, REQUEST FREEING OF DISP LOCK
RT1FRR2  TM    RT1TACQR,RT1TLLCK  WAS LOCAL LOCK OBTAINED BY RT1
         BZ    RT1FRR3            NO, GO REQUEST PERCOLATION
         OI    SDWAACF4,SDWAFLLK  YES, REQUEST FREEING OF LOCAL LOCK
RT1FRR3  EQU   *                  REQUEST PERCOLATION
         SETRP RECORD=YES,RECPARM=RT1ID,RC=0
RT1FRR4  LR    R14,R5             RESTORE RETURN ADDRESS TO IEAVTRTS
         BR    R14                RETURN TO RTS
         EJECT
***********************************************************************
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
***********************************************************************
         SPACE 2
         CNOP  0,8
IEAVPS3  DC    X'000200FF00000300'   RESTART
RT1FRRAD DC    A(RT1FRR)          ADDR OF IEAVTRT1 FRR FOR SETFRR MACRO
RTZADDR  DC    A(IEAVTRTZ)        ADDRESS OF RT1'S EXIT PROCESSING
RTHFRRAD DC    V(RTHFRR)          ADDR OF RTH'S FRR FOR SETFRR MACRO
RTMENTRY DC    V(IEAVTRTM)        ENTRY POINT ADDRESS OF IEAVTRTM
ACRENTRY DC    V(IEAVTCR1)        ADDR OF ACR'S RECOVERY ROUTINE
CCMASK   DC    X'10000000'        COMPLETION CODE MASK-TEST CALLRTM FLG
ICMASK   DC    X'0000FFFF'        INTERRUPT CODE MASK-ISOLATE FROM ILC
CCMSKFFF DC    X'00FFF000'        COMP CODE MASK-SYS COMP CODE = FFF
IC16     DC    H'16'              INTERRUPT CODE OF 16
IC19     DC    H'19'              INTERRUPT CODE OF 19
CONST16  DC    H'16'              CONSTANT OF 16 - SUBTRACT FROM
*                                 INTERRUPT CODE TO CREATE INDEX
*                                 TO COMPLETION CODE (CCTABLE)
SVC13INC DC    H'13'              SVC 13 INTERRUPT CODE
         DS    0F
CCTABLE  DC    X'C4C4D2D3'        COMPLETION CODE TABLE TO MATCH
*                                  INTERRUPT CODES 16,17,18,19
CC0C0    DC    X'000000C0'        PREFIX FOR INTERRUPT CODES TO CONVERT
*                                  INTERRUPT CODE TO 0CX SERIES
CC0FC    DC    X'000FC000'        TRASERR COMP CODE            @ZA05351
CCC0D    DC    X'00000C0D'        COMPLETION CODE C0D
CC028    DC    X'00028000'        PAGING I/O ERROR DEFAULT COMP CODE
ASIDMASK DC    X'08000000'        ASID MASK - TEST CALLRTM FLAGS
CC071    DC    X'90071000'        RESTART COMPLETION CODE, FLAG MASK
DMPOMASK DC    X'20000000'        MASK TO CHECK CALLRTM FLGS - DUMPOPTS
RT1CPOOL DC    C'RT1',X'04'       CELL POOL ID USED TO FREE QUICK CELL
LENSVC   DC    F'2'               LENGTH OF A SVC INSTRUCTION
RTMS13AD DC    V(IEAVTRTA)        ADDRESS OF IEAVTRTM'S SVC 13 INSTR
RT1ID    DC    C'IEAVTRT1'        MODULE NAME FOR RECORDING
         DC    C'IEAVTRT1'        CSECT NAME FOR RECORDING
         DC    C'RT1FRR  '        LABEL ON FRR ROUTINE FOR RECORDING
         SPACE 2
*
*        FUNCTION CODES TO IDENTIFY EXIT TYPE TO IEAVTRT1
*
RETYEXIT DC    AL1(RT1RETRY)      FUNCTION CODE  FOR RETRY EXIT
DISPEXIT DC    AL1(RT1DISP)       FUNCTION CODE FOR DISPATCHER EXIT
SRBEXIT  DC    AL1(RT1SRBEX)      FUNCTION CODE FOR SRB EXIT
EXPROEX  DC    AL1(RT1EXPRO)      FUNCTION CODE FOR EXIT PROLOGUE EXIT
RESUMEEX DC    AL1(RT1RESUM)      FUNCTION CODE FOR RESTART RESUME EXIT
RETEXIT  DC    AL1(RT1RET)        FUNCTION CODE FOR RET TO CALLER EXIT
MCHEXIT  DC    AL1(RT1MCHEX)      FUNCTION CODE FOR MCH EXIT
         EJECT
*
*        MAPPING DSECTS USED BY IEAVTRT1
*
         SPACE 2
RT1T6WDS DSECT                    MAP 6 WORDS ESTABLISHED BY SETFRR
         SPACE 1
RT1TLPN  DS    X                  LOGICAL PHASE NUMBER
RT1TLPID DS    X                  LOGICAL PHASE RECOVERY ROUTINE ID
RT1TENPT DS    X                  ORIGINAL ENTRY POINT - FUNCTION CODE
RT1TACQR DS    X                  RESOURCES ACQUIRED BY IEAVTRT1
RT1TDISP EQU   X'80'              DISPATCHER LOCK OBTAINED BY IEAVTRT1
RT1TLLCK EQU   X'40'              LOCAL LOCK OBTAINED BY IEAVTRT1
RT1TRETY EQU   X'20'              RT1'S FRR ENTERED ONCE AND RETRIED
RT1TREGS DS    5F                 REGISTER CHECKPOINT AREA
         SPACE  4
EED      DSECT ,                  MAP EED(EXTENDED ERROR DESCRIPTOR)
*                                         FOR REGISTERS AND PSW
EEDFWRDP DS    F                  ADDRESS OF NEXT EED OR 0
EEDDES   DS    F                  DESCRIPTION OF CONTENTS OF EED
EEDERROR DS    F                  DESCRIPTION OF ERROR         @YM02626
EEDREGS  DS    16F                REGISTERS, 0-15
EEDPSW1  DS    2F                 FIRST PART OF PSW
EEDINILC DS    2F                 SECOND PART OF PSW
EEDNULL  EQU   1                  INDICATES MISSING EED
         SPACE 4
XABRREGS DSECT ,                  MAP IEAVTRTM REGS 0-6 ON CROSS
*                                  ADDRESS SPACE ABTERM REENTRY
XABRREG0 DS    F                  R0, FUNCTION - NOT USED
XABRREG1 DS    F                  R1, FLAGSCC  - USED
XABRREG2 DS    F                  R2, TARGASID - USED
XABRREG3 DS    F                  R3, TARGTCB  - USED
XABRREG4 DS    F                  R4, TRAKAREA - NOT USED
XABRREG5 DS    F                  R5, DUMPOPTS - USED
XABRREG6 DS    F                  R6, EEDCHAIN - USED
         EJECT
***********************************************************************
*                                                                     *
*        MAPPING MACROS                                               *
*                                                                     *
***********************************************************************
         SPACE 2
         IHAPSA
         EJECT
         IHALCCAT
         EJECT
         IHALCCA
         EJECT
         CVT   PREFIX=YES,DSECT=YES
         EJECT
         IHAASCB
         EJECT
         IHAASXB
         EJECT
         IHAWSAVT  CLASS=LOCAL
         EJECT
         IHAWSAVT  CLASS=CPU
         EJECT
         IHAFRRS
         EJECT
         IHASRB
         EJECT
         IHASDWA
         EJECT                                                 @YM06733
         IKJTCB                                                @YM06733
         END
