         TITLE 'IEAVTSDI-SDUMP INITIALIZATION RIM                      *
                        '
IEAVTSDI CSECT ,                                                   0001
@MAINENT BALR  @15,0                                               0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEAVTSDI  77.341'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @07,0                                               0001
@PSTART  LA    @10,4095(,@07)                                      0001
         USING @PSTART,@07                                         0001
         USING @PSTART+4095,@10                                    0001
*
* REFS ARE GENERATED FOR NVT FIELDS THAT CONTAIN ADDRESSES OF
* NIP SERVICE ROUTINES, SO IEAPMNIP MACRO CALLS TO THESE ROUTINES
* WILL ASSEMBLE PROPERLY.
*                                                                  0228
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SECTION OF CODE OBTAINS 4K OF STORAGE FROM SUBPOOL 245   */
*   /* SQA TO BE USED AS THE SDUMP 4K BUFFER AND STORE THE BUFFER    */
*   /* ADDRESS IN THE CVT. A GETMAIN IS ISSUED FOR SUBPOOL 231 CSA.  */
*   /* THE AMOUNT OF STORAGE OBTAINED IS DETERMINED BY A CONSTANT    */
*   /* DECLARED IN IEAVTSDI SDWLEN. THE SPACE BEING OBTAINED WILL BE */
*   /* USED AS THE SVC DUMP WORK AREA. THE ADDRESS OF THE WORK AREA  */
*   /* IS PLACED INTO THE RTCT. STORAGE IS OBTAINED FROM SUBPOOL 245 */
*   /* SQA FOR THE SUMMARY DUMP WORK AREA. THE ADDRESS OF THIS AREA  */
*   /* IS STORED IN THE RTCTSDSW FIELD OF THE RTCT.          @G33VPHD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0228
*   CVTSDBF=0;                      /* CLEAR BUFFER ADDRESS          */
*                                                                  0228
         SLR   @15,@15                                             0228
         ST    @15,CVTSDBF(,RCVT)                                  0228
*   /*****************************************************************/
*   /*                                                               */
*   /* GETMAIN FOR SDUMP 4K BUFFER FROM SQA                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0229
*   DO;                             /* GETMAIN (EU) BNDRY LV(4096) 0229
*                                      A(CVTSDBF) SP(245)            */
*     RESPECIFY                                                    0230
*      (GPR01P) RESTRICTED;                                        0230
*     I004=I004&&I004;              /* INIT LIST                     */
         XC    I004(10),I004                                       0231
*     I00404='10'X;                 /* TYPE                          */
         MVI   I00404,X'10'                                        0232
*     I00401=4096;                  /* LENGTH                        */
         MVC   I00401(4),@CF03750                                  0233
*     I00403=ADDR(CVTSDBF);         /* ADDR OF ADDR LIST             */
         LA    @15,CVTSDBF(,RCVT)                                  0234
         STCM  @15,7,I00403                                        0234
*     I00405=245;                   /* SUBPOOL VALUE                 */
         MVI   I00405,X'F5'                                        0235
*     GPR01P=ADDR(I004);            /* REG1 POINTS TO LIST           */
         LA    GPR01P,I004                                         0236
*     SVC(4);                       /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0237
*     RESPECIFY                                                    0238
*      (GPR01P) UNRESTRICTED;                                      0238
*   END;                            /* GETMAIN (EU) BNDRY LV(4096) 0239
*                                      A(CVTSDBF) SP(245)            */
*   CVTSDBF=CVTSDBF×'80000000'X;    /* TURN ON HI-ORDER BIT BECAUSE
*                                      THIS ROUTINE WILL USE THE   0240
*                                      BUFFER BIT INDICATES THAT THE
*                                      BUFFER IS IN USE              */
         L     @15,CVTSDBF(,RCVT)                                  0240
         O     @15,@CF03755                                        0240
         ST    @15,CVTSDBF(,RCVT)                                  0240
*   RTCTSDSW=0;                     /* CLEAR SUMDUMP WORK AREA     0241
*                                      ADDRESS               @G33VPHD*/
*                                                                  0241
         L     @15,CVTRTMCT(,RCVT)                                 0241
         SLR   @12,@12                                             0241
         ST    @12,RTCTSDSW(,@15)                                  0241
*   /*****************************************************************/
*   /*                                                               */
*   /* GETMAIN SQA WORK SPACE FOR SUMDUMP WORK AREA          @G33VPHD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0242
*   DO;                             /* GETMAIN (EU) LV(SMWKLEN)    0242
*                                      A(RTCTSDSW) SP(245)           */
*     RESPECIFY                                                    0243
*      (GPR01P) RESTRICTED;                                        0243
*     I004=I004&&I004;              /* INIT LIST                     */
         XC    I004(10),I004                                       0244
*     I00404='00'X;                 /* TYPE                          */
         MVI   I00404,X'00'                                        0245
*     I00401=SMWKLEN;               /* LENGTH                        */
         L     @12,SMWKLEN                                         0246
         ST    @12,I00401                                          0246
*     I00403=ADDR(RTCTSDSW);        /* ADDR OF ADDR LIST             */
         LA    @15,RTCTSDSW(,@15)                                  0247
         STCM  @15,7,I00403                                        0247
*     I00405=245;                   /* SUBPOOL VALUE                 */
         MVI   I00405,X'F5'                                        0248
*     GPR01P=ADDR(I004);            /* REG1 POINTS TO LIST           */
         LA    GPR01P,I004                                         0249
*     SVC(4);                       /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0250
*     RESPECIFY                                                    0251
*      (GPR01P) UNRESTRICTED;                                      0251
*   END;                            /* GETMAIN (EU) LV(SMWKLEN)    0252
*                                      A(RTCTSDSW) SP(245) OBTAIN  0252
*                                      SUMMARY DUMP WORK AREA SQA  0252
*                                      SPACE                 @G33VPHD*/
*   SMWK(1:256)=''B;                /* INITIALIZE            @ZA28457*/
         L     @15,CVTRTMCT(,RCVT)                                 0253
         L     @12,RTCTSDSW(,@15)                                  0253
         XC    SMWK(256,@12),SMWK(@12)                             0253
*   SMWK(257:512)=''B;              /* THE                   @ZA28457*/
         XC    SMWK+256(256,@12),SMWK+256(@12)                     0254
*   SMWK(513:768)=''B;              /* OLD                   @ZA28457*/
         XC    SMWK+512(256,@12),SMWK+512(@12)                     0255
*   SMWK(769:LENGTH(SMWK))=''B;     /* SMWK                  @ZA28457*/
         XC    SMWK+768(212,@12),SMWK+768(@12)                     0256
*   SMWKNAME='SMWK';                /* PUT SMWK NAME IN SUMDUMP WORK
*                                      AREA                  @G33VPHD*/
*                                                                  0257
         MVC   SMWKNAME(4,@12),@CC03761                            0257
*   /*****************************************************************/
*   /*                                                               */
*   /* GETMAIN CSA SPACE FOR SDUMP WORK AREA                 @G33VPHD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0258
*   DO;                             /* GETMAIN (EU) LV(SDWLEN)     0258
*                                      A(RTCTSDWK) SP(231)           */
*     RESPECIFY                                                    0259
*      (GPR01P) RESTRICTED;                                        0259
*     I004=I004&&I004;              /* INIT LIST                     */
         XC    I004(10),I004                                       0260
*     I00404='00'X;                 /* TYPE                          */
         MVI   I00404,X'00'                                        0261
*     I00401=SDWLEN;                /* LENGTH                        */
         LH    @12,SDWLEN                                          0262
         ST    @12,I00401                                          0262
*     I00403=ADDR(RTCTSDWK);        /* ADDR OF ADDR LIST             */
         LA    @15,RTCTSDWK(,@15)                                  0263
         STCM  @15,7,I00403                                        0263
*     I00405=231;                   /* SUBPOOL VALUE                 */
         MVI   I00405,X'E7'                                        0264
*     GPR01P=ADDR(I004);            /* REG1 POINTS TO LIST           */
         LA    GPR01P,I004                                         0265
*     SVC(4);                       /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0266
*     RESPECIFY                                                    0267
*      (GPR01P) UNRESTRICTED;                                      0267
*   END;                            /* GETMAIN (EU) LV(SDWLEN)     0268
*                                      A(RTCTSDWK) SP(231)   @G33VPHD*/
*   R5=CVTSDBF;                     /* SET ADDRESSABILITY FOR SQA  0269
*                                      SPACE FOR USE AS WORK SPACE BY
*                                      THIS MODULE                   */
         L     R5,CVTSDBF(,RCVT)                                   0269
*   WORKAREA=WORKAREA&&WORKAREA;    /* CLEAR WORK AREA               */
         XC    WORKAREA(152,R5),WORKAREA(R5)                       0270
*   SDIECB=0;                       /* INITIALIZE ECB        @G33VPHD*/
         SLR   @15,@15                                             0271
         ST    @15,SDIECB                                          0271
*   RFY                                                            0272
*     SDWORK BASED(RTCTSDWK);       /* ADDRESS SDUMP WORK AREA     0272
*                                                            @ZM44953*/
*   SDCNTRL(1:256)=''B;             /* INITIALIZE SDUMP WORK AREA  0273
*                                                            @ZM44953*/
         L     @15,CVTRTMCT(,RCVT)                                 0273
         L     @15,RTCTSDWK(,@15)                                  0273
         XC    SDCNTRL(256,@15),SDCNTRL(@15)                       0273
*   SDCNTRL(257:LENGTH(SDCNTRL))=''B;/* INITIALIZE SDUMP WORK AREA 0274
*                                                            @ZM44953*/
         XC    SDCNTRL+256(176,@15),SDCNTRL+256(@15)               0274
*   SAVNVTAD=RNVT;                  /* SAVE NVT ADDRESS IN WORK AREA
*                                                            @G33VPHD*/
         ST    RNVT,SAVNVTAD(,R5)                                  0275
*   SAVCVTAD=RCVT;                  /* SAVE CVT ADDRESS IN WORK AREA
*                                                            @G33VPHD*/
         ST    RCVT,SAVCVTAD(,R5)                                  0276
*   SVER13=R13;                     /* SAVE SAVE AREA ADDRESS      0277
*                                                            @G33VPHD*/
         ST    R13,SVER13(,R5)                                     0277
*   SDWORKEN=RTCTSDWK+LENGTH(SDWORK);/* GET SDWORK END ADDR  @G33VPHD*/
         AL    @15,@CF03855                                        0278
         ST    @15,SDWORKEN(,R5)                                   0278
*   GEN REFS(PSALITA);                                             0279
*                                                                  0279
*                      /*GET LOCAL LOCK FOR PGFIX INTERFACE @G33VPHD*/
GETLOCKA SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                       XX
               RELATED=(SDWORK,IEAVTSDI(FRELOCKA))
*   /*****************************************************************/
*   /*                                                               */
*   /* USE PGFIX BRANCH ENTRY TO PAGE FIX SDUMP WORK AREA    @G33VPHD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0280
*   RFY                                                            0280
*    (R0,                                                          0280
*     R1,                                                          0280
*     R4) RSTD;                     /* R2 IS ALREADY RSTD    @G33VPHD*/
*   R0=ADDR(SDIECB);                /* GET ECB ADDRESS FOR PGFIX   0281
*                                                            @G33VPHD*/
         LA    R0,SDIECB                                           0281
*   R1=RTCTSDWK;                    /* GET PGFIX BEGINNING ADDR    0282
*                                                            @G33VPHD*/
         L     @15,CVTRTMCT(,RCVT)                                 0282
         L     R1,RTCTSDWK(,@15)                                   0282
*   R1=R1×PGFIXFLG;                 /* OR ON BITS IN R1 FOR PGFIX  0283
*                                                            @G33VPHD*/
         O     R1,@CF00148                                         0283
*   R2=SDWORKEN;                    /* GET PGFIX ENDING ADDR @G33VPHD*/
         L     R2,SDWORKEN(,R5)                                    0284
*   R4=NULL;                        /* ZERO TCB ADDR FOR NO TCB    0285
*                                      AFFINITY              @G33VPHD*/
         SLR   R4,R4                                               0285
*   CALL IEAVPSIB;                  /* BRANCH ENTER PGFIX AND PAGE 0286
*                                      FIX SVC DUMP WORK AREA      0286
*                                                            @G33VPHD*/
         L     @12,PVTPTR(,RCVT)                                   0286
         L     @15,PVTPSIB(,@12)                                   0286
         BALR  @14,@15                                             0286
*   GEN REFS(PSALITA);                                             0287
*                       /*FREE LOCAL AFTER PGFIX RETURNS    @G33VPHD*/
FRELOCKA SETLOCK RELEASE,TYPE=LOCAL,                                  XX
               RELATED=(SDWORK,IEAVTSDI(GETLOCKA))
*   R1=ADDR(SDIECB);                /* FET ECB ADDRESS FOR WAIT    0288
*                                                            @G33VPHD*/
         LA    R1,SDIECB                                           0288
*   GEN(WAIT  1,ECB=(R1));          /* WAIT FOR PGFIX TO COMPLETE  0289
*                                                            @G33VPHD*/
         WAIT  1,ECB=(R1)
*   SDWORKEN=0;                     /* ZERO WORK AREA FIELD USED   0290
*                                                            @G33VPHD*/
         SLR   @15,@15                                             0290
         ST    @15,SDWORKEN(,R5)                                   0290
*   RNVT=SAVNVTAD;                  /* RESTORE NVT ADDRESS   @G33VPHD*/
         L     RNVT,SAVNVTAD(,R5)                                  0291
*                                                                  0292
*/********************************************************************/
*/*   THIS SEGMENT FINDS THE ADDRESSES OF LPALIB SVC DUMP MODULES    */
*/*   AND STORES THEIR ADDRESSES IN CONTROL BLOCKS AND WORK AREAS    */
*/*   FOR LATER USE. LOAD IS USED TO FIND THE ADDRESS AND LENGTH     */
*/*   OF THE MODULES. DELETE IS USED TO DELETE THE EXTRA CDE         */
*/*   ENTRIES CREATED BY LOADING THESE LPA MODULES.  MODULE          */
*/*   IEAVTSDR IS LOCATED AND ITS ADDRESS IS STORED IN THE CVT. IF   */
*/*   MODULE IEAVTSDR COULD NOT BE FOUND, MESSAGE IEA883I IS ISSUED. */
*/*   THE ADDRESS OF MODULE IEAVTSSD IS FOUND AND SAVED IN THE SMWK. */
*/*   IF IEAVTSSD COULD NOT BE FOUND, MESSAGE IEA883I IS ISSUED.     */
*/*   THE ENDING ADDRESS OF IEAVTSSD IS CALCULATED AND STORED IN THE */
*/*   SMWK. THE BEGINNING AND ENDING ADDRESSES OF THE SECTION OF THE */
*/*   LOAD MODULE TO BE PAGE FIXED (CSECTS: IEAVTSDT, IEAVTSDH,      */
*/*   IEAVTSDW, IEAVTSDO) ARE CALCULATED AND STORED IN THE SMWK.     */
*/*   IEAVTSSD AND THIS SECTION OF LOAD MODULE IGC0005A ARE PAGE     */
*/*   FIXED IN REAL STORAGE. IF MODULES IGC0005A OR IEAVTSDT ARE NOT */
*/*   FOUND MESSAGE IEA883I IS ISSUED.                               */
*/*                                                                  */
*/*   **NOTE**  IEAVTSDO, IEAVTSDT, IEAVTSDH, IEAVTSDW MUST BE THE   */
*/*             LAST 4 CSECTS OF LOAD MODULE IGC0005A. IEAVTSDT      */
*/*             MUST BE ON A PAGE BOUNDARY                           */
*/*                                                                  */
*/*   INCLUDE BY: TOP SEGMENT                                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0292
*   CVTSDRM=NULL;                   /* INITIALIZE SDR POINTER      0292
*                                                            @G33VPHD*/
         ST    @15,CVTSDRM(,RCVT)                                  0292
*   SMWKENTY=NULL;                  /* INITIALIZE SSD ADDRESS      0293
*                                                            @G33VPHD*/
         L     @12,CVTRTMCT(,RCVT)                                 0293
         L     @12,RTCTSDSW(,@12)                                  0293
         ST    @15,SMWKENTY(,@12)                                  0293
*   SMWKSSDE=NULL;                  /* INIT SSD END ADDRESS  @G33VPHD*/
         ST    @15,SMWKSSDE(,@12)                                  0294
*   SMWKPFXB=NULL;                  /* INIT IGC0005A FIXED AREA    0295
*                                                            @G33VPHD*/
         ST    @15,SMWKPFXB(,@12)                                  0295
*   SMWKPFXE=NULL;                  /* INIT END OF IGC0005A ADDR   0296
*                                                            @G33VPHD*/
         ST    @15,SMWKPFXE(,@12)                                  0296
*   SDRNAME='IEAVTSDR';             /* SET NAME TO SEARCH FOR SDUMP
*                                      RESOURCE MANAGER              */
*                                                                  0297
         MVC   SDRNAME(8,R5),@CC03764                              0297
*   /*****************************************************************/
*   /*                                                               */
*   /* LOAD MODULE IEAVTSDR                                  @G33VPHD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0298
*   DO;                             /* LOAD EP(SDRNAME)            0298
*                                      ERRET(NSDRLOAD)               */
*     RESPECIFY                                                    0299
*      (GPR00P,                                                    0299
*       GPR01P,                                                    0299
*       GPR15F) RESTRICTED;                                        0299
*     GPR00P=ADDR(SDRNAME);         /* LOAD ENTRY POINT NAME ADDRESS */
         LA    GPR00P,SDRNAME(,R5)                                 0300
*     GPR01P=0;                     /* JOBLIB OR LINKLIB DCB         */
         SLR   GPR01P,GPR01P                                       0301
*     GPR01P=GPR01P×'80000000'X;    /* ERROR RETURN LABEL SPECIFIED  */
         O     GPR01P,@CF03755                                     0302
*     SVC(8);                       /* ISSUE LOAD SVC                */
         SVC   8                                                   0303
*     IF GPR15F^=0 THEN             /* LOAD WAS UNSUCCESSFUL         */
         SLR   @12,@12                                             0304
         CR    GPR15F,@12                                          0304
         BNE   @RT00304                                            0304
*       GOTO NSDRLOAD;              /* BRANCH TO ERROR LOCATION      */
*     RESPECIFY                                                    0306
*      (GPR00P,                                                    0306
*       GPR01P,                                                    0306
*       GPR15F) UNRESTRICTED;                                      0306
*   END;                            /* LOAD EP(SDRNAME)            0307
*                                      ERRET(NSDRLOAD) OBTAIN ADDRESS
*                                      OF MODULE IEAVTSDR    @G33VPHD*/
*   CVTSDRM=R0+20;                  /* PUT RESOURCE MANAGER ENTRY  0308
*                                      ADDRESS IN CVT        @ZM45193*/
         LA    @15,20                                              0308
         ALR   @15,R0                                              0308
         ST    @15,CVTSDRM(,RCVT)                                  0308
*   IF CVTSDRM=NULL THEN            /* IF MODULE IEAVTSDR NOT FOUND
*                                                            @G33VPHD*/
         CR    @15,@12                                             0309
         BNE   @RF00309                                            0309
*     DO;                           /* ISSUE OPERATOR MESSAGE      0310
*                                                            @G33VPHD*/
*NSDRLOAD:                          /* LABEL BRANCHED TO IF NON-ZERO
*                                      RETURN CODE OBTAINED FROM LOAD
*                                                            @G33VPHD*/
*       RNVT=SAVNVTAD;              /* RESTORE NVT ADDRESS   @G33VPHD*/
NSDRLOAD L     RNVT,SAVNVTAD(,R5)                                  0311
*       GEN(IEAPMNIP TYPE=WTO,PARAM=MSG01);/* ISSUE MESSAGE  @G33VPHD*/
         IEAPMNIP TYPE=WTO,PARAM=MSG01
*     END;                          /* END OF SDR NOT FOUND  @G33VPHD*/
*   ELSE                                                           0314
*     DO;                           /* IF SDR FOUND DELETE IT      0314
*                                                            @G33VPHD*/
         B     @RC00309                                            0314
@RF00309 DS    0H                                                  0315
*       DO;                         /* DELETE EP(SDRNAME)            */
*         RESPECIFY                                                0316
*          (GPR00P) RESTRICTED;                                    0316
*         GPR00P=ADDR(SDRNAME);     /* ->ENTRY NAME                  */
         LA    GPR00P,SDRNAME(,R5)                                 0317
*         SVC(9);                   /* DELETE SVC                    */
         SVC   9                                                   0318
*         RESPECIFY                                                0319
*          (GPR00P) UNRESTRICTED;                                  0319
*       END;                        /* DELETE EP(SDRNAME) DELETE   0320
*                                      EXTRA CDE FOR SDR     @G33VPHD*/
*     END;                          /* END DELETE EXTRA CDE  @G33VPHD*/
*                                                                  0322
*/*  LOAD, PGFIX AND DELETE EXTRA CDE FOR MODULE IEAVTSSD    @G33VPHD*/
*                                                                  0322
*   DO;                             /* LOAD EP(SSDNAME)            0322
*                                      ERRET(NSSDLOAD)               */
@RC00309 DS    0H                                                  0323
*     RESPECIFY                                                    0323
*      (GPR00P,                                                    0323
*       GPR01P,                                                    0323
*       GPR15F) RESTRICTED;                                        0323
*     GPR00P=ADDR(SSDNAME);         /* LOAD ENTRY POINT NAME ADDRESS */
         LA    GPR00P,@CC00134                                     0324
*     GPR01P=0;                     /* JOBLIB OR LINKLIB DCB         */
         SLR   GPR01P,GPR01P                                       0325
*     GPR01P=GPR01P×'80000000'X;    /* ERROR RETURN LABEL SPECIFIED  */
         O     GPR01P,@CF03755                                     0326
*     SVC(8);                       /* ISSUE LOAD SVC                */
         SVC   8                                                   0327
*     IF GPR15F^=0 THEN             /* LOAD WAS UNSUCCESSFUL         */
         SLR   @12,@12                                             0328
         CR    GPR15F,@12                                          0328
         BNE   @RT00328                                            0328
*       GOTO NSSDLOAD;              /* BRANCH TO ERROR LOCATION      */
*     RESPECIFY                                                    0330
*      (GPR00P,                                                    0330
*       GPR01P,                                                    0330
*       GPR15F) UNRESTRICTED;                                      0330
*   END;                            /* LOAD EP(SSDNAME)            0331
*                                      ERRET(NSSDLOAD) GET IEAVTSSD
*                                      ADDR                  @G33VPHD*/
*   SMWKENTY=R0;                    /* OBTAIN SSD ADDRESS    @G33VPHD*/
         L     @15,CVTRTMCT(,RCVT)                                 0332
         L     @15,RTCTSDSW(,@15)                                  0332
         ST    R0,SMWKENTY(,@15)                                   0332
*   IF R0=NULL THEN                 /* IF MODULE IEAVTSSD NOT FOUND
*                                                            @G33VPHD*/
         CR    R0,@12                                              0333
         BNE   @RF00333                                            0333
*     DO;                           /* ISSUE OPERATOR MESSAGE      0334
*                                                            @G33VPHD*/
*NSSDLOAD:                          /* LABEL BRANCHED TO IF NON-ZERO
*                                      RETURN CODE RECEIVED FROM LOAD
*                                                            @G33VPHD*/
*       SMWKENTY=ADDR(CVTBRET);     /* DEFAULT SUMDUMP IS BR 14    0335
*                                                            @G33VPHD*/
NSSDLOAD L     @15,CVTRTMCT(,RCVT)                                 0335
         L     @15,RTCTSDSW(,@15)                                  0335
         LA    @12,CVTBRET(,RCVT)                                  0335
         ST    @12,SMWKENTY(,@15)                                  0335
*       RNVT=SAVNVTAD;              /* RESTORE NVT ADDRESS   @G33VPHD*/
         L     RNVT,SAVNVTAD(,R5)                                  0336
*       GEN(IEAPMNIP TYPE=WTO,PARAM=MSG12);/* ISSUE MESSAGE IEA883I
*                                      TO THE OPERATOR       @G33VPHD*/
         IEAPMNIP TYPE=WTO,PARAM=MSG12
*     END;                          /* END OF ISSUE OPERATOR MESSAGE
*                                                            @G33VPHD*/
*   ELSE                                                           0339
*     DO;                           /* MODULE IEAVTSSD WAS FOUND   0339
*                                                            @G33VPHD*/
         B     @RC00333                                            0339
@RF00333 DS    0H                                                  0340
*       R1=R1&HIBYTOFF;             /* CALC SSD MODULE LENGTH      0340
*                                                            @G33VPHD*/
         N     R1,@CF00132                                         0340
*       SLL(R1,3);                  /* MULTIPLY LENGTH BY 8 FOR    0341
*                                      PROPER LENGTH         @G33VPHD*/
         SLL   R1,3                                                0341
*       SMWKSSDE=SMWKENTY+R1;       /* OBTAIN ENDING SSD ADDR      0342
*                                                            @G33VPHD*/
         L     @15,CVTRTMCT(,RCVT)                                 0342
         L     @15,RTCTSDSW(,@15)                                  0342
         LR    @12,R1                                              0342
         AL    @12,SMWKENTY(,@15)                                  0342
         ST    @12,SMWKSSDE(,@15)                                  0342
*       SDIECB=0;                   /* INITIALIZE ECB        @G33VPHD*/
         SLR   @15,@15                                             0343
         ST    @15,SDIECB                                          0343
*       GEN REFS(PSALITA);                                         0344
*                                                                  0344
*                      /*GET LOCAL LOCK FOR PGFIX INTERFACE @G33VPHD*/
GETLOCKB SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                       XX
               RELATED=(IEAVTSSD,IEAVTSDI(FRELOCKB))
*       /*************************************************************/
*       /*                                                           */
*       /* USE PGFIX BRANCH ENTRY TO PAGE FIX IEAVTSSD MODULE        */
*       /*                                                   @G33VPHD*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0345
*       R0=ADDR(SDIECB);            /* GET ECB ADDRESS FOR PGFIX   0345
*                                                            @G33VPHD*/
         LA    R0,SDIECB                                           0345
*       R1=SMWKENTY;                /* GET PGFIX BEGINNING ADDR    0346
*                                                            @G33VPHD*/
         L     @15,CVTRTMCT(,RCVT)                                 0346
         L     @15,RTCTSDSW(,@15)                                  0346
         L     R1,SMWKENTY(,@15)                                   0346
*       R1=R1×PGFIXFLG;             /* OR ON BITS IN R1 FOR PGFIX  0347
*                                                            @G33VPHD*/
         O     R1,@CF00148                                         0347
*       R2=SMWKSSDE;                /* GET PGFIX ENDING ADDR @G33VPHD*/
         L     R2,SMWKSSDE(,@15)                                   0348
*       R4=NULL;                    /* ZERO TCB ADDR FOR NO TCB    0349
*                                      AFFINITY              @G33VPHD*/
         SLR   R4,R4                                               0349
*       CALL IEAVPSIB;              /* BRANCH ENTER PGFIX AND PAGE 0350
*                                      FIX SVC DUMP WORK AREA      0350
*                                                            @G33VPHD*/
         L     @12,PVTPTR(,RCVT)                                   0350
         L     @15,PVTPSIB(,@12)                                   0350
         BALR  @14,@15                                             0350
*       GEN REFS(PSALITA);                                         0351
*                       /*FREE LOCAL AFTER PGFIX RETURNS    @G33VPHD*/
FRELOCKB SETLOCK RELEASE,TYPE=LOCAL,                                  XX
               RELATED=(IEAVTSSD,IEAVTSDI(GETLOCKB))
*       R1=ADDR(SDIECB);            /* GET ECB ADDRESS FOR WAIT    0352
*                                                            @G33VPHD*/
         LA    R1,SDIECB                                           0352
*       GEN(WAIT  1,ECB=(R1));      /* WAIT FOR PGFIX OPERATION TO 0353
*                                      COMPLETE              @G33VPHD*/
         WAIT  1,ECB=(R1)
*       DO;                         /* DELETE EP(SSDNAME)            */
*         RESPECIFY                                                0355
*          (GPR00P) RESTRICTED;                                    0355
*         GPR00P=ADDR(SSDNAME);     /* ->ENTRY NAME                  */
         LA    GPR00P,@CC00134                                     0356
*         SVC(9);                   /* DELETE SVC                    */
         SVC   9                                                   0357
*         RESPECIFY                                                0358
*          (GPR00P) UNRESTRICTED;                                  0358
*       END;                        /* DELETE EP(SSDNAME) DELETE   0359
*                                      EXTRA CDE FOR SSD     @G33VPHD*/
*     END;                          /* END OF MODULE IEAVTSSD FOUND
*                                                            @G33VPHD*/
*                                                                  0361
*/*   LOAD MODULE IEAVTSDT AND OBTAIN PGFIX BEGINNING ADDR  @G33VPHD */
*                                                                  0361
*   DO;                             /* LOAD EP(SDTNAME)            0361
*                                      ERRET(NOVTSDT)                */
@RC00333 DS    0H                                                  0362
*     RESPECIFY                                                    0362
*      (GPR00P,                                                    0362
*       GPR01P,                                                    0362
*       GPR15F) RESTRICTED;                                        0362
*     GPR00P=ADDR(SDTNAME);         /* LOAD ENTRY POINT NAME ADDRESS */
         LA    GPR00P,@CC00136                                     0363
*     GPR01P=0;                     /* JOBLIB OR LINKLIB DCB         */
         SLR   GPR01P,GPR01P                                       0364
*     GPR01P=GPR01P×'80000000'X;    /* ERROR RETURN LABEL SPECIFIED  */
         O     GPR01P,@CF03755                                     0365
*     SVC(8);                       /* ISSUE LOAD SVC                */
         SVC   8                                                   0366
*     IF GPR15F^=0 THEN             /* LOAD WAS UNSUCCESSFUL         */
         SLR   @12,@12                                             0367
         CR    GPR15F,@12                                          0367
         BNE   @RT00367                                            0367
*       GOTO NOVTSDT;               /* BRANCH TO ERROR LOCATION      */
*     RESPECIFY                                                    0369
*      (GPR00P,                                                    0369
*       GPR01P,                                                    0369
*       GPR15F) UNRESTRICTED;                                      0369
*   END;                            /* LOAD EP(SDTNAME)            0370
*                                      ERRET(NOVTSDT) GET ADDRESS &
*                                      LENGTH OF IEAVTSDT    @G33VPHD*/
*   SMWKPFXB=R0;                    /* OBTAING IEAVTSDT ADDRESS    0371
*                                                            @G33VPHD*/
         L     @15,CVTRTMCT(,RCVT)                                 0371
         L     @15,RTCTSDSW(,@15)                                  0371
         ST    R0,SMWKPFXB(,@15)                                   0371
*   IF SMWKPFXB=NULL THEN           /* IF MODULE IEAVTSDT NOT FOUND
*                                                            @G33VPHD*/
         L     @15,CVTRTMCT(,RCVT)                                 0372
         L     @15,RTCTSDSW(,@15)                                  0372
         L     @15,SMWKPFXB(,@15)                                  0372
         CR    @15,@12                                             0372
         BNE   @RF00372                                            0372
*     DO;                           /* ISSUE OPERATOR MESSAGE      0373
*                                                            @G33VPHD*/
*NOVTSDT:                           /* LABEL BRANCHED TO IF NON-ZERO
*                                      RETURN CODE RECEIVED FROM LOAD
*                                                            @G33VPHD*/
*       RNVT=SAVNVTAD;              /* RESTORE NVT ADDRESS   @G33VPHD*/
NOVTSDT  L     RNVT,SAVNVTAD(,R5)                                  0374
*       GEN(IEAPMNIP TYPE=WTO,PARAM=MSG14);/* ISSUE MESSAGE IEA883I
*                                      TO OPERATOR           @G33VPHD*/
         IEAPMNIP TYPE=WTO,PARAM=MSG14
*     END;                          /* END OF MODULE IEAVTSDT NOT  0376
*                                      FOUND                 @G33VPHD*/
*   ELSE                                                           0377
*     DO;                           /* MODULE IEAVTSDT WAS FOUND SO
*                                      DELETE CDE            @G33VPHD*/
         B     @RC00372                                            0377
@RF00372 DS    0H                                                  0378
*       DO;                         /* DELETE EP(SDTNAME)            */
*         RESPECIFY                                                0379
*          (GPR00P) RESTRICTED;                                    0379
*         GPR00P=ADDR(SDTNAME);     /* ->ENTRY NAME                  */
         LA    GPR00P,@CC00136                                     0380
*         SVC(9);                   /* DELETE SVC                    */
         SVC   9                                                   0381
*         RESPECIFY                                                0382
*          (GPR00P) UNRESTRICTED;                                  0382
*       END;                        /* DELETE EP(SDTNAME) DELETE CDE
*                                      OF SDT                @G33VPHD*/
*     END;                          /* END OF MODULE IEAVTSDT WAS  0384
*                                      FOUND                 @G33VPHD*/
*                                                                  0385
*/*  LOAD MODULE IGC0005A AND OBTAIN PGFIX ENDING ADDRESS    @G33VPHD*/
*                                                                  0385
*   DO;                             /* LOAD EP(IGCNAME)            0385
*                                      ERRET(NOIGC05A)               */
@RC00372 DS    0H                                                  0386
*     RESPECIFY                                                    0386
*      (GPR00P,                                                    0386
*       GPR01P,                                                    0386
*       GPR15F) RESTRICTED;                                        0386
*     GPR00P=ADDR(IGCNAME);         /* LOAD ENTRY POINT NAME ADDRESS */
         LA    GPR00P,@CC00138                                     0387
*     GPR01P=0;                     /* JOBLIB OR LINKLIB DCB         */
         SLR   GPR01P,GPR01P                                       0388
*     GPR01P=GPR01P×'80000000'X;    /* ERROR RETURN LABEL SPECIFIED  */
         O     GPR01P,@CF03755                                     0389
*     SVC(8);                       /* ISSUE LOAD SVC                */
         SVC   8                                                   0390
*     IF GPR15F^=0 THEN             /* LOAD WAS UNSUCCESSFUL         */
         SLR   @12,@12                                             0391
         CR    GPR15F,@12                                          0391
         BNE   @RT00391                                            0391
*       GOTO NOIGC05A;              /* BRANCH TO ERROR LOCATION      */
*     RESPECIFY                                                    0393
*      (GPR00P,                                                    0393
*       GPR01P,                                                    0393
*       GPR15F) UNRESTRICTED;                                      0393
*   END;                            /* LOAD EP(IGCNAME)            0394
*                                      ERRET(NOIGC05A) GET ADDR &  0394
*                                      LENGTH IGC0005A       @G33VPHD*/
*   R1=R1&HIBYTOFF;                 /* AND OFF AUTH CODE FOR LEN   0395
*                                                            @G33VPHD*/
         N     R1,@CF00132                                         0395
*   SLL(R1,3);                      /* MULTIPLY R1 BY 8 FOR CORRECT
*                                      LENGTH                @G33VPHD*/
         SLL   R1,3                                                0396
*   SMWKPFXE=R0+R1;                 /* OBTAIN LAST ADDRESS OF LOAD 0397
*                                      MODULE THIS CODE IS DEPENDENT
*                                      ON MODULES IEAVTSDT, IEAVTSDW,
*                                      IEAVTSDH AND IEAVTSDO BEING AT
*                                      THE BOTTOM OF LOAD MODULE   0397
*                                      IGC0005A WITH IEAVTSDT ORDERED
*                                      TO BEGIN ON A PAGE BOUNDARY 0397
*                                                            @G33VPHD*/
         L     @15,CVTRTMCT(,RCVT)                                 0397
         L     @15,RTCTSDSW(,@15)                                  0397
         LR    @11,R0                                              0397
         ALR   @11,R1                                              0397
         ST    @11,SMWKPFXE(,@15)                                  0397
*   IF R0=NULL THEN                 /* IF MODULE IGC0005A NOT FOUND
*                                                            @G33VPHD*/
         CR    R0,@12                                              0398
         BNE   @RF00398                                            0398
*     DO;                           /* ISSUE OPERATOR MESSAGE AND  0399
*                                      DONT DO PGFIX         @G33VPHD*/
*NOIGC05A:                          /* LABEL BRANCHED TO IF NON-ZERO
*                                      RETURN CODE RECEIVED FROM LOAD
*                                                            @G33VPHD*/
*       RNVT=SAVNVTAD;              /* RESTORE NVT ADDRESS   @G33VPHD*/
NOIGC05A L     RNVT,SAVNVTAD(,R5)                                  0400
*       GEN(IEAPMNIP TYPE=WTO,PARAM=MSG13);/* ISSUE MESSAGE  @G33VPHD*/
         IEAPMNIP TYPE=WTO,PARAM=MSG13
*     END;                          /* END OF MODULE IGC0005A WAS NOT
*                                      FOUND BY LOAD         @G33VPHD*/
*   ELSE                                                           0403
*     DO;                           /* MODULE IGC0005A WAS FOUND   0403
*                                                            @G33VPHD*/
         B     @RC00398                                            0403
@RF00398 DS    0H                                                  0404
*       DO;                         /* DELETE EP(IGCNAME)            */
*         RESPECIFY                                                0405
*          (GPR00P) RESTRICTED;                                    0405
*         GPR00P=ADDR(IGCNAME);     /* ->ENTRY NAME                  */
         LA    GPR00P,@CC00138                                     0406
*         SVC(9);                   /* DELETE SVC                    */
         SVC   9                                                   0407
*         RESPECIFY                                                0408
*          (GPR00P) UNRESTRICTED;                                  0408
*       END;                        /* DELETE EP(IGCNAME) DELETE CDE
*                                      FOR IGC0005A          @G33VPHD*/
*     END;                          /* END OF MODUEL IGC0005A WAS  0410
*                                      FOUND                 @G33VPHD*/
*                                                                  0411
*/* PAGE FIX MODULES IEAVTSDT, IEAVTSDW,IEAVTSDO & IEAVTSDH  @G33VPHD*/
*                                                                  0411
*   IF SMWKPFXB^=NULL&SMWKPFXE^=NULL THEN/* IF BOTH MODULES IEAVTSDT
*                                      AND IGC0005A WERE FOUND     0411
*                                                            @G33VPHD*/
@RC00398 SLR   @15,@15                                             0411
         L     @12,CVTRTMCT(,RCVT)                                 0411
         L     @12,RTCTSDSW(,@12)                                  0411
         C     @15,SMWKPFXB(,@12)                                  0411
         BE    @RF00411                                            0411
         C     @15,SMWKPFXE(,@12)                                  0411
         BE    @RF00411                                            0411
*     DO;                           /* PAGE FIX MODULES WITH BRANCH
*                                      ENTRY                 @G33VPHD*/
*       SDIECB=0;                   /* INITIALIZE ECB        @G33VPHD*/
         ST    @15,SDIECB                                          0413
*       GEN REFS(PSALITA);                                         0414
*                                                                  0414
*                            /*GET LOCAL LOCK FOR PGFIX     @G33VPHD*/
GETLOCKC SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                       XX
               RELATED=(IEAVTSDT,IEAVTSDI(FRELOCKC))
*/*  USE PGFIX BRANCH ENTRY TO PAGE FIX MODULES              @G33VPHD*/
*                                                                  0415
*       R0=ADDR(SDIECB);            /* GET ECB ADDRESS FOR PGFIX   0415
*                                                            @G33VPHD*/
         LA    R0,SDIECB                                           0415
*       R1=SMWKPFXB;                /* GET PGFIX BEGINNING ADDR    0416
*                                                            @G33VPHD*/
         L     @15,CVTRTMCT(,RCVT)                                 0416
         L     @15,RTCTSDSW(,@15)                                  0416
         L     R1,SMWKPFXB(,@15)                                   0416
*       R1=R1×PGFIXFLG;             /* OR ON BITS IN R1 FOR PGFIX  0417
*                                                            @G33VPHD*/
         O     R1,@CF00148                                         0417
*       R2=SMWKPFXE;                /* GET PGFIX ENDING ADDR @G33VPHD*/
         L     R2,SMWKPFXE(,@15)                                   0418
*       R4=NULL;                    /* ZERO TCB ADDR FOR NO TCB    0419
*                                      AFFINITY              @G33VPHD*/
         SLR   R4,R4                                               0419
*       CALL IEAVPSIB;              /* BRANCH ENTER PGFIX AND PAGE 0420
*                                      FIX SVC DUMP WORK AREA      0420
*                                                            @G33VPHD*/
         L     @12,PVTPTR(,RCVT)                                   0420
         L     @15,PVTPSIB(,@12)                                   0420
         BALR  @14,@15                                             0420
*       GEN REFS(PSALITA);                                         0421
*                          /*FREE LOCAL AFTER PGFIX RETURNS @G33VPHD*/
FRELOCKC SETLOCK RELEASE,TYPE=LOCAL,                                  XX
               RELATED=(IEAVTSDT,IEAVTSDI(GETLOCKC))
*       R1=ADDR(SDIECB);            /* FET ECB ADDRESS FOR WAIT    0422
*                                                            @G33VPHD*/
         LA    R1,SDIECB                                           0422
*       GEN(WAIT  1,ECB=(R1));      /* WAIT FOR PGFIX OPERATION TO 0423
*                                      COMPLETE              @G33VPHD*/
         WAIT  1,ECB=(R1)
*     END;                          /* END OF PGFIX MODULES WITH   0424
*                                      BRANCH ENTRY          @G33VPHD*/
*   RNVT=SAVNVTAD;                  /* RESTORE NVT ADDRESS   @G33VPHD*/
@RF00411 L     RNVT,SAVNVTAD(,R5)                                  0425
*   RFY                                                            0426
*    (R0,                                                          0426
*     R1,                                                          0426
*     R4) UNRSTD;                                                  0426
*                                                                  0427
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE THE DUMP DATA SET TABLE TO ZERO AND INDICATE THE   */
*   /* TABLE IS NOT SET FOR SVC DUMP -IF ANY DUMP DATA SET IS PLACED */
*   /* IN THE TABLE THE RTCTSDNO BIT WILL BE TURNED OFF              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0427
*   RTCTSDNO='1'B;                  /* INDICATE SDUMP NO             */
*                                                                  0427
         L     @15,CVTRTMCT(,RCVT)                                 0427
         OI    RTCTSDNO(@15),B'10000000'                           0427
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE ROUTES CONTROL TO THE SDIVALID ROUTINE TO SCAN   */
*   /* THE DUMP DEVICES SPECIFIED BY THE OPERATOR AT IPL TIME IF NO  */
*   /* DEVICES HAVE BEEN SPECIFIED THE DEFAULT IS DASD IF OPTIONS ARE*/
*   /* DETERMINED TO BE INVALID THE OPERATOR IS PROMPTED TO RESPECIFY*/
*   /* THE DEVICES                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0428
*   DACTION=0;                      /* ZERO REQUEST FLAGS AND      0428
*                                      INTERNAL SWITCHES             */
         SLR   @15,@15                                             0428
         STH   @15,DACTION(,R5)                                    0428
*   IF NIPPTLST='1'B                /* WAS LIST SPECIFIED            */
*     THEN                          /* YES                           */
         L     @15,NVTPTAB(,RNVT)                                  0429
         TM    NIPPTLST+88(@15),B'01000000'                        0429
         BNO   @RF00429                                            0429
*     DUMPL='1'B;                   /* INDICATE SUCH IN FLAGS        */
         OI    DUMPL(R5),B'01000000'                               0430
*   BEGIN=NIPPTADR;                 /* OBTAIN ADDRESS OF DATA      0431
*                                      REQUESTED                     */
@RF00429 L     @15,NVTPTAB(,RNVT)                                  0431
         L     @15,NIPPTADR+88(,@15)                               0431
         ST    @15,BEGIN(,R5)                                      0431
*   CURRENT=BEGIN;                  /* SET POINTER TO FIRST ENTRY    */
         ST    @15,CURRENT(,R5)                                    0432
*   IF BEGIN=0                      /* ARE THERE ANY OPTIONS         */
*     THEN                          /* NO-USE DASD AND DO NOT SCAN   */
         LTR   @15,@15                                             0433
         BNZ   @RF00433                                            0433
*     DO;                                                          0434
*       ENDCOL=BEGIN;               /* SET ENDCOL TO BEGINNING OF THE
*                                      FIELD                         */
         ST    @15,ENDCOL(,R5)                                     0435
*       VALIDSW='1'B;               /* DEFAULT IS VALID              */
*       DUMPD='1'B;                 /* INDICATE DASD DEVICE ON Q     */
         OI    VALIDSW(R5),B'00100010'                             0437
*       CALL DASDINIT;              /* PUT DASD DEVICES ON THE QUEUE
*                                      TO BE VERIFIED                */
         BAL   @14,DASDINIT                                        0438
*     END;                                                         0439
*   ELSE                                                           0440
*     DO;                           /* OPTIONS HAVE BEEN SPECIFIED 0440
*                                      SET ENDCOL TO END OF DATA     */
         B     @RC00433                                            0440
@RF00433 DS    0H                                                  0441
*       DO WHILE(CURCHAR^='''');    /* END OF DATA IS INDICATED BY A
*                                      SINGLE QUOTE                  */
         B     @DE00441                                            0441
@DL00441 DS    0H                                                  0442
*         CURRENT=CURRENT+1;        /* UPDATE CURRENT BY ONE         */
         LA    @15,1                                               0442
         AL    @15,CURRENT(,R5)                                    0442
         ST    @15,CURRENT(,R5)                                    0442
*       END;                        /* END OF DO WHILE               */
@DE00441 L     @15,CURRENT(,R5)                                    0443
         CLI   CURCHAR(@15),C''''                                  0443
         BNE   @DL00441                                            0443
*       ENDCOL=CURRENT;             /* SET ENDING ADDRESS            */
         ST    @15,ENDCOL(,R5)                                     0444
*       CURRENT=BEGIN;              /* RESET CURRENT TO BEGINNING    */
         L     @15,BEGIN(,R5)                                      0445
         ST    @15,CURRENT(,R5)                                    0445
*     END;                                                         0446
*   DO WHILE(VALIDSW='0'B);         /* DO UNTIL THE OPTIONS ARE VALID*/
*                                                                  0447
@RC00433 B     @DE00447                                            0447
@DL00447 DS    0H                                                  0448
*     /***************************************************************/
*     /*                                                             */
*     /* THIS SECTION OF CODE VALIDITY SCANS THE DUMP PARAMETERS THAT*/
*     /* HAVE BEEN TYPED BY THE OPERATOR                             */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0448
*     DO WHILE(CURRENT^=ENDCOL);                                   0448
         B     @DE00448                                            0448
@DL00448 DS    0H                                                  0449
*       VALIDSW='0'B;               /* TURN OFF VALID SWITCH         */
         NI    VALIDSW(R5),B'11111101'                             0449
*       IF CURCHAR='(' THEN         /* IS THE CURRENT CHARACTER A  0450
*                                      LEFT PAREN ?                  */
         L     @15,CURRENT(,R5)                                    0450
         CLI   CURCHAR(@15),C'('                                   0450
         BNE   @RF00450                                            0450
*         DO;                       /* YES                           */
*                                                                  0451
*           /*********************************************************/
*           /*                                                       */
*           /* THIS SECTION OF CODE FINDS THE NEXT CHARACTER AFTER   */
*           /* THE PAREN IF THERE ARE BACK TO BACK PARENS THEY ARE   */
*           /* SCANNED OVER TO FIND THE NEXT CHAR THAT IS NOT A      */
*           /* PAREN. IF THE CHARACTER AFTER THE PAREN IS A T A CALL */
*           /* IS ISSUED TO TACHECK TO PLACE THE TA DEVICES ON THE   */
*           /* DEVICE QUEUE. ANY OTHER CHARACTERS THAT FOLLOW THE    */
*           /* PAREN MUST BE A-D-L-,-) AND THE RULES THAT APPLY TO   */
*           /* THOSE CHARACTERS ARE APPLICABLE. AFTER THE END OF THIS*/
*           /* SECTION CURRENT POINTS TO THE NEXT CHARACTER TO BE    */
*           /* SCANNED AND THE VALIDSW REMAINS OFF IN THE EVENT THE  */
*           /* NEXT CHARACTER IS NOT SCANNABLE.                      */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0452
*           DO WHILE(CURCHAR='(');  /* FIND FIRST CHAR THAT IS NOT A
*                                      (                             */
         B     @DE00452                                            0452
@DL00452 DS    0H                                                  0453
*             CURRENT=CURRENT+1;                                   0453
         LA    @15,1                                               0453
         AL    @15,CURRENT(,R5)                                    0453
         ST    @15,CURRENT(,R5)                                    0453
*           END;                                                   0454
@DE00452 L     @15,CURRENT(,R5)                                    0454
         CLI   CURCHAR(@15),C'('                                   0454
         BE    @DL00452                                            0454
*           IF CURCHAR=')' THEN     /* RIGHT PAREN NEXT ?            */
         CLI   CURCHAR(@15),C')'                                   0455
         BNE   @RF00455                                            0455
*             DO;                   /* YES                           */
*               IF DUMPL='0'B THEN  /* THIS SITUATION IS ONLY VALID
*                                      IF LIST HAS BEEN REQUESTED-IF
*                                      THE OPERATOR TYPED (,L) THE ,L
*                                      HAS BEEN REMOVED BY NIP AND 0457
*                                      INDICATED SUCH WITH THE     0457
*                                      NIPPTLST BIT BEING ON FOR THE
*                                      DUMP PARAMETERS               */
         TM    DUMPL(R5),B'01000000'                               0457
         BNZ   @RF00457                                            0457
*                 CURRENT=ENDCOL;   /* L HAS NOT BEEN SPECIFIED SO 0458
*                                      THIS IS AN ERROR              */
         L     @15,ENDCOL(,R5)                                     0458
         ST    @15,CURRENT(,R5)                                    0458
*             END;                                                 0459
*           ELSE                                                   0460
*             DO;                                                  0460
         B     @RC00455                                            0460
@RF00455 DS    0H                                                  0461
*               IF CURCHAR='T'      /* POSSIBLE TA REQUEST ?         */
*                 THEN              /* YES                           */
         L     @15,CURRENT(,R5)                                    0461
         CLI   CURCHAR(@15),C'T'                                   0461
         BNE   @RF00461                                            0461
*                 CALL TACHECK;     /* CALL TACHECK WITH CURRENT   0462
*                                      POINTING TO THE T AND VALIDSW
*                                      OFF                           */
         BAL   @14,TACHECK                                         0462
*             END;                                                 0463
@RF00461 DS    0H                                                  0464
*         END;                                                     0464
@RC00455 DS    0H                                                  0465
*       IF CURCHAR=')' THEN         /* IS THIS A RIGHT PAREN ?       */
@RF00450 L     @15,CURRENT(,R5)                                    0465
         CLI   CURCHAR(@15),C')'                                   0465
         BNE   @RF00465                                            0465
*         DO;                       /* YES                           */
*           VALIDSW='0'B;           /* PRESUPPOSE ERROR              */
*                                                                  0467
         NI    VALIDSW(R5),B'11111101'                             0467
*           /*********************************************************/
*           /*                                                       */
*           /* A RIGHT PAREN CAN ONLY BE FOLLOWED BY ANOTHER RIGHT   */
*           /* PAREN OR BE THE LAST CHARACTER TYPED FOR DUMP = IF    */
*           /* TAPE HAS BEEN SPECIFIED IE: (TA,XXX) THE RIGHT PAREN  */
*           /* IS CHECKED THEN AND BYPASSED SO THIS ROUTINE DOES NOT */
*           /* CHECK FOR THE ENSUING COMMA                           */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0468
*           CURRENT=CURRENT+1;      /* UPDATE TO NEXT CHARACTER      */
         AL    @15,@CF00055                                        0468
         ST    @15,CURRENT(,R5)                                    0468
*           IF CURRENT^=ENDCOL&CURCHAR^=')'/* IS THERE ANOTHER     0469
*                                      CHARACTER AND IS IT A RIGHT 0469
*                                      PAREN ?                       */
*             THEN                  /* NO ITS INVALID                */
         L     @12,ENDCOL(,R5)                                     0469
         CR    @15,@12                                             0469
         BE    @RF00469                                            0469
         CLI   CURCHAR(@15),C')'                                   0469
         BE    @RF00469                                            0469
*             CURRENT=ENDCOL;       /* OUT OF DO WHILE WITH VALID  0470
*                                      SWITCH OFF                    */
         ST    @12,CURRENT(,R5)                                    0470
*           ELSE                                                   0471
*             VALIDSW='1'B;         /* OTHERWISE INDICATE IT IS VALID*/
         B     @RC00469                                            0471
@RF00469 OI    VALIDSW(R5),B'00000010'                             0471
*         END;                                                     0472
@RC00469 DS    0H                                                  0473
*       IF CURCHAR=',' THEN         /* COMMA ?                       */
@RF00465 L     @15,CURRENT(,R5)                                    0473
         CLI   CURCHAR(@15),C','                                   0473
         BNE   @RF00473                                            0473
*         DO;                       /* YES                           */
*           VALIDSW='0'B;           /* PRESUPPOSE ERROR              */
         NI    VALIDSW(R5),B'11111101'                             0475
*           IF NXTCHAR^='D'&        /* NEXT CHAR CAN BE A-D-         */
*               NXTCHAR^='('        /* OR A -(-                      */
*             THEN                                                 0476
         CLI   NXTCHAR(@15),C'D'                                   0476
         BE    @RF00476                                            0476
         CLI   NXTCHAR(@15),C'('                                   0476
         BE    @RF00476                                            0476
*             DO;                   /* ANY OTHER CHAR IS INVALID     */
*               CURRENT=ENDCOL;                                    0478
         L     @15,ENDCOL(,R5)                                     0478
         ST    @15,CURRENT(,R5)                                    0478
*             END;                                                 0479
*           ELSE                    /* COMMA IS FOLLOWED BY A VALID
*                                      CHARACTER                     */
*             DO;                                                  0480
         B     @RC00476                                            0480
@RF00476 DS    0H                                                  0481
*               VALIDSW='1'B;       /* VALID SEQUENCE                */
         OI    VALIDSW(R5),B'00000010'                             0481
*               CURRENT=CURRENT+1;  /* UPDATE POINTER                */
         LA    @15,1                                               0482
         AL    @15,CURRENT(,R5)                                    0482
         ST    @15,CURRENT(,R5)                                    0482
*             END;                                                 0483
*         END;                                                     0484
@RC00476 DS    0H                                                  0485
*       IF CURCHAR='D' THEN         /* POSSIBLE DASD ?               */
@RF00473 L     @15,CURRENT(,R5)                                    0485
         CLI   CURCHAR(@15),C'D'                                   0485
         BNE   @RF00485                                            0485
*         DO;                       /* YES                           */
*           VALIDSW='0'B;           /* PRESUPPOSE ERROR              */
*                                                                  0487
         NI    VALIDSW(R5),B'11111101'                             0487
*           /*********************************************************/
*           /*                                                       */
*           /* THE CURRENT CHARACTER IS A D IN ORDER TO BE VALID IT  */
*           /* MUST BE FOLLOWED BY -ASD- TO INDICATE DASD. DASD MUST */
*           /* BE FOLLOWED BY A COMMA OR A RIGHT PAREN OR BE THE LAST*/
*           /* ENTRY IN THE TABLE IF ANY OF THESE RULES ARE VIOLATED */
*           /* OR IF DASD HAS BEEN SPECIFIED TWICE THE CURRENT       */
*           /* POINTER IS SET TO ENDCOL TO FORCE AN EXIT FROM THE DO */
*           /* WHILE WITH THE VALIDSW OFF TO PROMPT THE OPERATOR     */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0488
*           SCANBEG=CURRENT;        /* ADDRESS OF -D-                */
         ST    @15,SCANBEG(,R5)                                    0488
*           CURRENT=CURRENT+4;      /* ADDRESS OF NEXT ENTRY         */
         LA    @12,4                                               0489
         ALR   @12,@15                                             0489
         ST    @12,CURRENT(,R5)                                    0489
*           IF CURRENT>ENDCOL×      /* SHORT SPELLING ?              */
*               FIRST4^='DASD'      /* OR MISPELLED                  */
*             THEN                  /* YES- INVALID                  */
         C     @12,ENDCOL(,R5)                                     0490
         BH    @RT00490                                            0490
         CLC   FIRST4(4,@15),@CC03786                              0490
         BE    @RF00490                                            0490
@RT00490 DS    0H                                                  0491
*             CURRENT=ENDCOL;                                      0491
         L     @15,ENDCOL(,R5)                                     0491
         ST    @15,CURRENT(,R5)                                    0491
*           ELSE                                                   0492
*             DO;                                                  0492
         B     @RC00490                                            0492
@RF00490 DS    0H                                                  0493
*               IF DASDFND='1'B×    /* SECOND DASD ENTRY OR          */
*                   (CURRENT^=ENDCOL&/* THIS IS NOT THE LAST CHAR    */
*                   CURCHAR^=','&   /* AND IT IS NOT FOLLOWED BY A 0493
*                                      COMMA OR                      */
*                   CURCHAR^=')')   /* A RIGHT PAREN                 */
*                 THEN              /* IT IS INVALID                 */
         TM    DASDFND(R5),B'00000100'                             0493
         BO    @RT00493                                            0493
         L     @15,CURRENT(,R5)                                    0493
         C     @15,ENDCOL(,R5)                                     0493
         BE    @RF00493                                            0493
         CLI   CURCHAR(@15),C','                                   0493
         BE    @RF00493                                            0493
         CLI   CURCHAR(@15),C')'                                   0493
         BE    @RF00493                                            0493
@RT00493 DS    0H                                                  0494
*                 CURRENT=ENDCOL;                                  0494
         L     @15,ENDCOL(,R5)                                     0494
         ST    @15,CURRENT(,R5)                                    0494
*               ELSE                                               0495
*                 DO;                                              0495
         B     @RC00493                                            0495
@RF00493 DS    0H                                                  0496
*                   DASDFND='1'B;   /* INDICATE DASD FOUND           */
*                   DUMPD='1'B;                                    0497
*                   VALIDSW='1'B;   /* INDICATE VALID                */
         OI    DASDFND(R5),B'00100110'                             0498
*                   IF ENTDASD='0'B /* WAS DASD INIT ENTERED       0499
*                                      PREVIOUSLY BECAUSE AN L WAS 0499
*                                      FOUND                         */
*                     THEN          /* NO                            */
         TM    ENTDASD(R5),B'00001000'                             0499
         BNZ   @RF00499                                            0499
*                     DO;                                          0500
*                       ENTDASD='1'B;/* DASD INIT BEING ENTERED ONLY
*                                      ONE TIME                      */
         OI    ENTDASD(R5),B'00001000'                             0501
*                       CALL DASDINIT;                             0502
         BAL   @14,DASDINIT                                        0502
*                     END;                                         0503
*                 END;                                             0504
@RF00499 DS    0H                                                  0505
*             END;                                                 0505
@RC00493 DS    0H                                                  0506
*         END;                                                     0506
@RC00490 DS    0H                                                  0507
*       IF CURCHAR='N' THEN         /* POSSIBLE NO                   */
@RF00485 L     @15,CURRENT(,R5)                                    0507
         CLI   CURCHAR(@15),C'N'                                   0507
         BNE   @RF00507                                            0507
*         DO;                       /* YES                           */
*           VALIDSW='0'B;           /* PRESUPPOSE ERROR              */
*                                                                  0509
         NI    VALIDSW(R5),B'11111101'                             0509
*           /*********************************************************/
*           /*                                                       */
*           /* ONCE AN-N- HAS BEEN ENCOUNTERED THE ONLY VALID CHAR TO*/
*           /* FOLLOW IS AN O IF NO IS SPECIFIED NO OTHER PARAMETERS */
*           /* ARE ALLOWED                                           */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0510
*           SCANBEG=CURRENT;                                       0510
         ST    @15,SCANBEG(,R5)                                    0510
*           CURRENT=CURRENT+2;                                     0511
         LA    @12,2                                               0511
         ALR   @12,@15                                             0511
         ST    @12,CURRENT(,R5)                                    0511
*           IF(SCANBEG=BEGIN&       /* NO HAS TO BE FIRST            */
*               CURRENT=ENDCOL&     /* AND ONLY                      */
*               FIRST2='NO')        /* AND CORRECT           @ZA04824*/
*             THEN                  /* OKAY                          */
         C     @15,BEGIN(,R5)                                      0512
         BNE   @RF00512                                            0512
         C     @12,ENDCOL(,R5)                                     0512
         BNE   @RF00512                                            0512
         CLC   FIRST2(2,@15),@CC03788                              0512
         BNE   @RF00512                                            0512
*             DO;                                                  0513
*               DUMPN='1'B;         /* INDICATE DUMP-NO-             */
*               DUMPL='0'B;         /* LIST INCOMPATIBLE WITH DUMP=NO
*                                                            @ZA04824*/
*               VALIDSW='1'B;       /* AND VALID                     */
         OI    DUMPN(R5),B'10000010'                               0516
         NI    DUMPL(R5),B'10111111'                               0516
*             END;                                                 0517
*           ELSE                    /* INVALID                       */
*             CURRENT=ENDCOL;                                      0518
         B     @RC00512                                            0518
@RF00512 L     @15,ENDCOL(,R5)                                     0518
         ST    @15,CURRENT(,R5)                                    0518
*         END;                                                     0519
@RC00512 DS    0H                                                  0520
*       IF CURCHAR='L'              /* LIST SPECIFIED                */
*         THEN                                                     0520
@RF00507 L     @15,CURRENT(,R5)                                    0520
         CLI   CURCHAR(@15),C'L'                                   0520
         BNE   @RF00520                                            0520
*         DO;                       /* YES                           */
*           VALIDSW='0'B;           /* PRESUPPOSE ERROR              */
         NI    VALIDSW(R5),B'11111101'                             0522
*           IF DUMPL='1'B           /* SECOND TIME?                  */
*             THEN                  /* YES                           */
         TM    DUMPL(R5),B'01000000'                               0523
         BNO   @RF00523                                            0523
*             CURRENT=ENDCOL;                                      0524
         L     @15,ENDCOL(,R5)                                     0524
         ST    @15,CURRENT(,R5)                                    0524
*           ELSE                                                   0525
*             DO;                                                  0525
         B     @RC00523                                            0525
@RF00523 DS    0H                                                  0526
*               CURRENT=CURRENT+1;  /* UPDATE POINTER                */
         LA    @15,1                                               0526
         AL    @15,CURRENT(,R5)                                    0526
         ST    @15,CURRENT(,R5)                                    0526
*               IF CURCHAR=')'×     /* PAREN AFTER L OR              */
*                   CURCHAR=','×    /* A COMMA OR                    */
*                   CURCHAR=''''    /* IS IT THE END                 */
*                 THEN              /* CHARACTER AFTER L IS OKAY     */
         CLI   CURCHAR(@15),C')'                                   0527
         BE    @RT00527                                            0527
         CLI   CURCHAR(@15),C','                                   0527
         BE    @RT00527                                            0527
         CLI   CURCHAR(@15),C''''                                  0527
         BNE   @RF00527                                            0527
@RT00527 DS    0H                                                  0528
*                 DO;               /* CONTINUE WITH L PROCESSING    */
*                   VALIDSW='1'B;   /* VALID SEQUENCE                */
*                   DUMPL='1'B;                                    0530
*                   DUMPD='1'B;     /* INDICATE DASD                 */
         OI    VALIDSW(R5),B'01100010'                             0531
*                   IF ENTDASD='0'B /* IF DASD INIT HAS ALREADY BEEN
*                                      ENTERED BYPASS SECOND ENTRANCE*/
*                     THEN                                         0532
         TM    ENTDASD(R5),B'00001000'                             0532
         BNZ   @RF00532                                            0532
*                     DO;                                          0533
*                       ENTDASD='1'B;                              0534
         OI    ENTDASD(R5),B'00001000'                             0534
*                       CALL DASDINIT;                             0535
         BAL   @14,DASDINIT                                        0535
*                     END;                                         0536
*                 END;                                             0537
*               ELSE                /* CHARACTER AFTER L IS INVALID  */
*                 CURRENT=ENDCOL;   /* STOP SCANNING                 */
         B     @RC00527                                            0538
@RF00527 L     @15,ENDCOL(,R5)                                     0538
         ST    @15,CURRENT(,R5)                                    0538
*             END;                                                 0539
@RC00527 DS    0H                                                  0540
*         END;                                                     0540
@RC00523 DS    0H                                                  0541
*       IF VALIDSW='0'B             /* STILL INVALID?                */
*         THEN                      /* YES MAY BE AN UNSCANABLE    0541
*                                      CHARACTER                     */
@RF00520 TM    VALIDSW(R5),B'00000010'                             0541
         BNZ   @RF00541                                            0541
*         CURRENT=ENDCOL;           /* SO GET OUT OF LOOP            */
         L     @15,ENDCOL(,R5)                                     0542
         ST    @15,CURRENT(,R5)                                    0542
*     END;                          /* END OF DO WHILE               */
@RF00541 DS    0H                                                  0543
@DE00448 CLC   CURRENT(4,R5),ENDCOL(R5)                            0543
         BNE   @DL00448                                            0543
*     IF VALIDSW='0'B               /* ARE THE OPTIONS VALID ?       */
*       THEN                        /* NO PROMPT THE OPERATOR        */
         TM    VALIDSW(R5),B'00000010'                             0544
         BNZ   @RF00544                                            0544
*       DO;                                                        0545
*                                                                  0545
*         /***********************************************************/
*         /*                                                         */
*         /* IT HAS BEEN DETERMINED THAT THE OPTIONS SPECIFIED BY THE*/
*         /* OPERATOR ARE INCORRECT. IN ORDER TO PROCEED THE OPERATOR*/
*         /* IS PROMPTED TO RESPECIFY THE DUMP= PARAMETERS. THIS IS  */
*         /* DONE BY USING THE NIP PROMPT ROUTINE.THIS RESULTS IN A  */
*         /* COMPLETE RESCAN OF THE OPTIONS                          */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0546
*         DACTION=0;                /* INITIALIZE FLAGS              */
         SLR   @15,@15                                             0546
         STH   @15,DACTION(,R5)                                    0546
*         BEGIN=0;                  /* SET BEGIN ADDRESS TO 0        */
         ST    @15,BEGIN(,R5)                                      0547
*         ENDCOL=0;                                                0548
         ST    @15,ENDCOL(,R5)                                     0548
*         RQUEADD=0;                                               0549
         ST    @15,RQUEADD(,R5)                                    0549
*         CURSVE=0;                                                0550
         ST    @15,CURSVE(,R5)                                     0550
*         CURRENT=0;                                               0551
         ST    @15,CURRENT(,R5)                                    0551
*         SDRNAME='DUMP    ';       /* SET NAME TO DUMP SO THAT    0552
*                                      PROMPT KNOWS WHERE TO ENTER 0552
*                                      THE OPTIONS                   */
         MVC   SDRNAME(8,R5),@CC03790                              0552
*         R13=ADDR(REGSAVE);        /* SET SAVE AREA ADDRESS         */
         LA    R13,REGSAVE(,R5)                                    0553
*         NIPPTLST='0'B;            /* TURN OFF LIST IN PARM TAB   0554
*                                      BECAUSE PROMT DOES NOT        */
         L     @15,NVTPTAB(,RNVT)                                  0554
         NI    NIPPTLST+88(@15),B'10111111'                        0554
*         GEN(IEAPMNIP TYPE=PRMPT,PARAM=SDRNAME(R5),OPT=ERROR);    0555
         IEAPMNIP TYPE=PRMPT,PARAM=SDRNAME(R5),OPT=ERROR
*         IF RPARM<0×NIPPTCAN='1'B  /* DID PROMPT FIND DUMP IN PARM
*                                      TAB OR DID OPERATOR SAY AN EOB
*                                      ?                             */
*           THEN                                                   0556
         LTR   RPARM,RPARM                                         0556
         BM    @RT00556                                            0556
         L     @15,NVTPTAB(,RNVT)                                  0556
         TM    NIPPTCAN+88(@15),B'00100000'                        0556
         BO    @RT00556                                            0556
*           ;                       /* YES - USE DEFAULT             */
*         ELSE                      /* OPTIONS WERE RESPECIFIED      */
*           DO;                                                    0558
*             IF NIPPTLST='1'B      /* WAS LIST SPECIFIED ?          */
*               THEN                /* YES                           */
         L     @15,NVTPTAB(,RNVT)                                  0559
         TM    NIPPTLST+88(@15),B'01000000'                        0559
         BNO   @RF00559                                            0559
*               DO;                                                0560
*                 DUMPL='1'B;                                      0561
*                 DUMPD='1'B;       /* DASD IS IMPLIED               */
         OI    DUMPL(R5),B'01100000'                               0562
*               END;                                               0563
*             BEGIN=NIPPTADR;       /* SET TO BEGINNING OF DATA      */
@RF00559 L     @15,NVTPTAB(,RNVT)                                  0564
         L     @15,NIPPTADR+88(,@15)                               0564
         ST    @15,BEGIN(,R5)                                      0564
*             CURRENT=BEGIN;                                       0565
         ST    @15,CURRENT(,R5)                                    0565
*           END;                                                   0566
*         IF BEGIN=0                /* ANY DATA ?                    */
*           THEN                    /* NO                            */
@RT00556 L     @15,BEGIN(,R5)                                      0567
         LTR   @15,@15                                             0567
         BNZ   @RF00567                                            0567
*           DO;                                                    0568
*             VALIDSW='1'B;         /* USE DEFAULT                   */
*             DUMPD='1'B;                                          0570
*             ENTDASD='1'B;         /* INDICATE DASD INIT BEING    0571
*                                      ENTERED                       */
         OI    VALIDSW(R5),B'00101010'                             0571
*             CALL DASDINIT;                                       0572
         BAL   @14,DASDINIT                                        0572
*           END;                                                   0573
*         ELSE                                                     0574
*           DO;                     /* FIND LENGTH OF DATA           */
         B     @RC00567                                            0574
@RF00567 DS    0H                                                  0575
*             DO WHILE(CURCHAR^='''');/* FIND TRAILING QUOTE         */
         B     @DE00575                                            0575
@DL00575 DS    0H                                                  0576
*               CURRENT=CURRENT+1;  /* UPDATE TO NEXT ENTRY          */
         LA    @15,1                                               0576
         AL    @15,CURRENT(,R5)                                    0576
         ST    @15,CURRENT(,R5)                                    0576
*             END;                  /* END OF DO WHILE               */
@DE00575 L     @15,CURRENT(,R5)                                    0577
         CLI   CURCHAR(@15),C''''                                  0577
         BNE   @DL00575                                            0577
*             ENDCOL=CURRENT;       /* SAVE ADDRESS OF END OF DATA   */
         ST    @15,ENDCOL(,R5)                                     0578
*             CURRENT=BEGIN;                                       0579
         L     @15,BEGIN(,R5)                                      0579
         ST    @15,CURRENT(,R5)                                    0579
*           END;                                                   0580
*       END;                        /* END OF PROMT                  */
*     ELSE                                                         0582
*       DO;                                                        0582
         B     @RC00544                                            0582
@RF00544 DS    0H                                                  0583
*         IF DUMPL='1'B&ENTDASD='0'B/* WAS LIST SPECIFIED AND      0583
*                                      DASDINIT WAS NOT ENTERED    0583
*                                      BECAUSE DASD WAS NOT FOUND    */
*           THEN                                                   0583
         TM    DUMPL(R5),B'01000000'                               0583
         BNO   @RF00583                                            0583
         TM    ENTDASD(R5),B'00001000'                             0583
         BNZ   @RF00583                                            0583
*           DO;                     /* ENTER DASD INIT               */
*             DUMPD='1'B;                                          0585
*             ENTDASD='1'B;                                        0586
         OI    DUMPD(R5),B'00101000'                               0586
*             CALL DASDINIT;                                       0587
         BAL   @14,DASDINIT                                        0587
*           END;                                                   0588
*       END;                                                       0589
@RF00583 DS    0H                                                  0590
*   END;                            /* END OF DO WHILE INVALID       */
@RC00544 DS    0H                                                  0590
@DE00447 TM    VALIDSW(R5),B'00000010'                             0590
         BZ    @DL00447                                            0590
*   CNT1=1;                         /* SET INDEX FOR DATA SET TABLE
*                                      ARRAY                         */
         LA    CNT1,1                                              0591
*   DO WHILE(DUMPN='0'B&DUMPF='0'B);/* DO IF DUMP NO IS NOT SPECIFIED
*                                      OR WHILE DATA SETS ARE STILL
*                                      TO BE PROCESSED               */
         B     @DE00592                                            0592
@DL00592 DS    0H                                                  0593
*     IF DUMPD='1'B                 /* WAS DUMP DASD OR L OR ZERO  0593
*                                      SPECIFIED                     */
*       THEN                        /* YES DASD PROCESS TO OCCUR     */
         TM    DUMPD(R5),B'00100000'                               0593
         BNO   @RF00593                                            0593
*       DO;                                                        0594
*         RFY                                                      0595
*           R4 RSTD;                                               0595
*                                                                  0595
*         /***********************************************************/
*         /*                                                         */
*         /* ONCE A DASD DEVICE HAS BEEN PLACED ON THE DEVICE QUEUE  */
*         /* IT MUST BE PROCESSED BY THIS ROUTINE TO INSURE THE      */
*         /* STATUS OF THE DEVICE.CHECKS ARE MADE TO INSURE THAT THE */
*         /* DASD DEVICES ARE CATALOGED AND THAT THE DEVICE TYPE IS A*/
*         /* SUPPORTED DEVICE FOR SDUMP PROCESSING IF THE DEVICE IS  */
*         /* SUPPORTED AND MOUNTED AND THE DATA SET IS OPENED THEN   */
*         /* THE DEVICE IS CHECKED TO SEE IF THE DATASET IS EMPTY OR */
*         /* FULL                                                    */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0596
*         SKIP='0'B;                /* TURN OFF THE SKIP SWICH       */
*                                                                  0596
         NI    SKIP(R5),B'01111111'                                0596
*         /***********************************************************/
*         /*                                                         */
*         /* THIS ROUTINE NOW CHECKS THE DASD DEVICES TO INSURE THAT */
*         /* THEY ARE CATALOGED.THE DEVICE Q IS SEARCHED TO FIND THE */
*         /* NEXT DEVICE TO BE PROCESSED IF THERE ARE NO DEVICES THE */
*         /* DUMPF FLAG IS TURNED ON IF THE DEVICE IS NOT DASD THE   */
*         /* SKIP FLAG IS TURNED ON IF IT IS DASD A LOCATE MACRO IS  */
*         /* ISSUED TO INSURE THE DEVICE IS CATALOGED                */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0597
*         R4=RQUEADD;               /* GET ADDRESS OF QUEUE          */
         L     R4,RQUEADD(,R5)                                     0597
*         DO WHILE(R4^=0&DPROCSD='1'B);/* FIND NEXT DEVICE TO PROCESS*/
         B     @DE00598                                            0598
@DL00598 DS    0H                                                  0599
*           R4=NXTENTAD;            /* ADDRESS OF NEXT BLOCK         */
         L     R4,NXTENTAD(,R4)                                    0599
*         END;                                                     0600
@DE00598 LTR   R4,R4                                               0600
         BZ    @DC00598                                            0600
         TM    DPROCSD(R4),B'01000000'                             0600
         BO    @DL00598                                            0600
@DC00598 DS    0H                                                  0601
*         IF R4=0                   /* ANY DEVICES LEFT ON Q         */
*           THEN                                                   0601
         LTR   R4,R4                                               0601
         BNZ   @RF00601                                            0601
*           DO;                     /* NO                            */
*             DUMPF='1'B;           /* INDICATE FINISHED             */
         OI    DUMPF(R5),B'00000001'                               0603
*             SKIP='1'B;                                           0604
         OI    SKIP(R5),B'10000000'                                0604
*           END;                                                   0605
*         ELSE                      /* MORE TO PROCESS               */
*           DO;                                                    0606
         B     @RC00601                                            0606
@RF00601 DS    0H                                                  0607
*             IF DASDDV='0'B        /* IS IT DASD                    */
*               THEN                                               0607
         TM    DASDDV(R4),B'10000000'                              0607
         BNZ   @RF00607                                            0607
*               DO;                 /* NO                            */
*                 SKIP='1'B;                                       0609
         OI    SKIP(R5),B'10000000'                                0609
*               END;                                               0610
*             ELSE                  /* IT IS A DASD DEVICE           */
*               DO;                                                0611
         B     @RC00607                                            0611
@RF00607 DS    0H                                                  0612
*                 DPROCSD='1'B;     /* INDICATE THIS DEVICE AS BEING
*                                      PROCESSED                     */
         OI    DPROCSD(R4),B'01000000'                             0612
*                 LOCATBL(1:200)=''B;/* CLEAR LOCATE WORK AREA       */
         XC    LOCATBL(200),LOCATBL                                0613
*                 LOCATBL(201:LENGTH(LOCATBL))=''B;                0614
         XC    LOCATBL+200(65),LOCATBL+200                         0614
*                 DSNAME=SYS1DUMP;  /* SET NAME TO SYS1.DUMPXX FOR 0615
*                                      LOCATE                        */
         MVI   DSNAME+9,C' '                                       0615
         MVC   DSNAME+10(34),DSNAME+9                              0615
         MVC   DSNAME(9),@CC00283                                  0615
*                 DEVNUM=DVNAME;    /* UPDATE XX TO NUMBER INDICATED
*                                      BY DEVICE TABLE               */
         MVC   DEVNUM(3),DVNAME(R4)                                0616
*                 RFY                                              0617
*                   R15 RSTD;                                      0617
*                 GEN REFS(LIST) SETS(RPARM,R15,LOCATBL)(LOCATE LIST);
         LOCATE LIST
*                 IF R15^=0         /* DATA SET FOUND ?              */
*                   THEN            /* NO                            */
         LTR   R15,R15                                             0619
         BZ    @RF00619                                            0619
*                   SKIP='1'B;      /* SKIP THIS DEVICE              */
         OI    SKIP(R5),B'10000000'                                0620
*                 ELSE                                             0621
*                   DO;                                            0621
         B     @RC00619                                            0621
@RF00619 DS    0H                                                  0622
*                     IF NUMENTRY^=1×/* ONLY 1 ENTRY ALLOWED         */
*                         DEVCLAS^='20'X×/* MUST BE DASD             */
*                         (DEVCOD^='06'X&/* DEVICE A 2305 MOD 1      */
*                         DEVCOD^='07'X&/* OR A 2305 MOD 2           */
*                         DEVCOD^='08'X&/* OR 2319 - 2314            */
*                         DEVCOD^='09'X&/* OR 3330 -A                */
*                         DEVCOD^='0A'X&/* OR 3340                   */
*                         DEVCOD^='0B'X&/* OR 3350           @Z30RSTA*/
*                         DEVCOD^='0D'X)/* OR 3330 -C                */
*                       THEN        /* DEVICE IS NOT CORRECT FOR   0622
*                                      SDUMP                         */
         CLC   NUMENTRY(2),@CH00055                                0622
         BNE   @RT00622                                            0622
         CLI   DEVCLAS,32                                          0622
         BNE   @RT00622                                            0622
         CLI   DEVCOD,6                                            0622
         BE    @RF00622                                            0622
         CLI   DEVCOD,7                                            0622
         BE    @RF00622                                            0622
         CLI   DEVCOD,8                                            0622
         BE    @RF00622                                            0622
         CLI   DEVCOD,9                                            0622
         BE    @RF00622                                            0622
         CLI   DEVCOD,10                                           0622
         BE    @RF00622                                            0622
         CLI   DEVCOD,11                                           0622
         BE    @RF00622                                            0622
         CLI   DEVCOD,13                                           0622
         BE    @RF00622                                            0622
@RT00622 DS    0H                                                  0623
*                       DO;                                        0623
*                         SKIP='1'B;/* SKIP FURTHER PROCESS FOR THIS
*                                      DEVICE                        */
         OI    SKIP(R5),B'10000000'                                0624
*                         NSDEV=DVNAME;/* PUT DEVICE NUMBER IN     0625
*                                      MESSAGE 2                     */
         MVC   NSDEV(3),DVNAME(R4)                                 0625
*                         R13=ADDR(REGSAVE);                       0626
         LA    R13,REGSAVE(,R5)                                    0626
*                         GEN REFS(MSG02) SETS(RPARM,R14,R15)      0627
*                             (IEAPMNIP TYPE=WTO,PARAM=MSG02);     0627
         IEAPMNIP TYPE=WTO,PARAM=MSG02
*                       END;                                       0628
*                   END;                                           0629
@RF00622 DS    0H                                                  0630
*                 RFY                                              0630
*                   R15 UNRSTD;                                    0630
@RC00619 DS    0H                                                  0631
*               END;                                               0631
*           END;                                                   0632
@RC00607 DS    0H                                                  0633
*         IF SKIP='0'B              /* WAS DEVICE LOCATED PROPERLY   */
*           THEN                                                   0633
@RC00601 TM    SKIP(R5),B'10000000'                                0633
         BNZ   @RF00633                                            0633
*           DO;                     /* YES                           */
*                                                                  0634
*             /*******************************************************/
*             /*                                                     */
*             /* IT HAS BEEN DETERMINED THAT THIS DEVICE IS CATALOGED*/
*             /* AND SUPPORTED.NOW WE MUST INSURE THAT IT IS MOUNTED */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0635
*             RFY                                                  0635
*               R6 RSTD;                                           0635
*             R6=ADDR(MOUNTD);      /* GET ADDRESS OF NIP MOUNT    0636
*                                      PARAMETER LIST                */
         LA    R6,MOUNTD                                           0636
*             DSNAME(1:LENGTH(DSNAME))=' ';/* CLEAR 44 BYTES TO    0637
*                                      BLANK.                        */
         MVI   DSNAME+1,C' '                                       0637
         MVC   DSNAME+2(42),DSNAME+1                               0637
         MVI   DSNAME,C' '                                         0637
*             DUMPNAME=SYS1DUMP;    /* SET NAME TO SYS1.DUMP         */
         MVC   DUMPNAME(9),@CC00283                                0638
*             DEVNUM=DVNAME;        /* SET DUMP NUMBER IE-SYS1.DUMP06
*                                      -                             */
         MVC   DEVNUM(3),DVNAME(R4)                                0639
*             R6->NMNTVS=VOLSERNU;  /* SET VOLUME SERIAL NUMBER      */
         MVC   NMNTVS(6,R6),VOLSERNU                               0640
*             R6->NMNTDT=DVCOD;     /* SET TWO BYTE DEVICE CODE      */
         MVC   NMNTDT(2,R6),DVCOD                                  0641
*             R13=ADDR(REGSAVE);                                   0642
         LA    R13,REGSAVE(,R5)                                    0642
*             GEN REFS(DSNAME,MOUNTD) SETS(RPARM)                  0643
*                 (IEAPMNIP TYPE=MOUNT,PARAM=MOUNTD,OPT=(,LC,LI)); 0643
         IEAPMNIP TYPE=MOUNT,PARAM=MOUNTD,OPT=(,LC,LI)
*             UCBPTR=RPARM;         /* UCB ADDRESS RETURNED IN RPARM */
         ST    RPARM,UCBPTR(,R5)                                   0644
*             IF RPARM=0            /* UCB SUPPLIED                  */
*               THEN                /* NO                            */
         LTR   RPARM,RPARM                                         0645
         BNZ   @RF00645                                            0645
*               SKIP='1'B;          /* SKIP PROCESSING               */
         OI    SKIP(R5),B'10000000'                                0646
*             RFY                                                  0647
*               R6 UNRSTD;                                         0647
@RF00645 DS    0H                                                  0648
*           END;                                                   0648
*         IF SKIP='0'B              /* STILL OKAY TO CONTINUE ?      */
*           THEN                    /* YES                           */
@RF00633 TM    SKIP(R5),B'10000000'                                0649
         BNZ   @RF00649                                            0649
*           DO;                                                    0650
*                                                                  0650
*             /*******************************************************/
*             /*                                                     */
*             /* SYS1.DUMP DASD IS NOW OPENED VIA THE NIP OPEN       */
*             /* SERVICE ROUTINE AND THE UCB IS MARKED PERMENTLY     */
*             /* RESIDENT                                            */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0651
*             RFY                                                  0651
*               R6 RSTD;                                           0651
*             RTCTSDDS(CNT1)=''B;   /* CLEAR CURRENT ENTRY           */
         LR    @15,CNT1                                            0652
         MH    @15,@CH01192                                        0652
         L     @11,CVTRTMCT(,RCVT)                                 0652
         ST    @15,@TF00001                                        0652
         ALR   @15,@11                                             0652
         XC    RTCTSDDS-12(12,@15),RTCTSDDS-12(@15)                0652
*             R6=ADDR(DMPOPN);      /* ADDRESS OF OPEN PARMS         */
         LA    R6,DMPOPN                                           0653
*             R6->NOPNUCB=UCBPTR;   /* UCB ADDRESSIN OPEN PARMS      */
*                                                                  0654
         L     @15,UCBPTR(,R5)                                     0654
         ST    @15,NOPNUCB(,R6)                                    0654
*             /*******************************************************/
*             /*                                                     */
*             /* THE DCB ADDRESS IS COMPUTED BY SUBTRACTING THE      */
*             /* OFFSET OF DCBDEBAD FROM THE ADDRESS OF THE          */
*             /* RTCTDCB(CNT1) WHERE CNT1 = TO THE ARRAY ENTRY NUMBER*/
*             /* BEING FILLED IN.THIS RESULTS IN NIPOPEN PLACING THE */
*             /* DEB ADDRESS IN THE SPECIFIC RTCTDCB FIELD OF THE    */
*             /* DUMP DATASET TABLE ---- NOTE THIS IS A DUMMY DCB    */
*             /* BEING OPENED.                                       */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0655
*             R6->NOPNDCB=ADDR(RTCTDCB(CNT1))-44;/* PLACE DCB ADDRESS
*                                      IN OPEN PARMS                 */
         L     @15,@TF00001                                        0655
         LA    @15,RTCTDCB-12(@15,@11)                             0655
         SL    @15,@CF00288                                        0655
         ST    @15,NOPNDCB(,R6)                                    0655
*             DSNAME(1:LENGTH(DSNAME))=' ';/* CLEAR NAME FIELD       */
         MVI   DSNAME+1,C' '                                       0656
         MVC   DSNAME+2(42),DSNAME+1                               0656
         MVI   DSNAME,C' '                                         0656
*             DUMPNAME=SYS1DUMP;    /* SET FIRST 9 BYTES TO SYS1.DUMP*/
         MVC   DUMPNAME(9),@CC00283                                0657
*             DEVNUM=DVNAME;        /* SET NEXT 3 BYTES TO-XX - WHERE
*                                      XX= 00 -09                    */
         MVC   DEVNUM(3),DVNAME(R4)                                0658
*             GEN REFS(DSNAME,DMPOPN) SETS(RPARM);                 0659
      IEAPMNIP TYPE=OPEN,PARAM=DMPOPN,OPT=(NB,LB,LC,SX,,LI,,RS)
*             IF RPARM<0            /* IF OPEN FAILED RPARM IS     0660
*                                      NEGATIVE                      */
*               THEN                                               0660
         LTR   RPARM,RPARM                                         0660
         BNM   @RF00660                                            0660
*               SKIP='1'B;          /* SKIP FURTHER PROCESSING       */
         OI    SKIP(R5),B'10000000'                                0661
*             ELSE                                                 0662
*               DO;                                                0662
         B     @RC00660                                            0662
@RF00660 DS    0H                                                  0663
*                 RTCTDSNM(CNT1)=DVNAME;/* SET NAME IN DATA SET TBL  */
         LR    @15,CNT1                                            0663
         MH    @15,@CH01192                                        0663
         L     @11,CVTRTMCT(,RCVT)                                 0663
         ST    @15,@TF00001                                        0663
         ALR   @15,@11                                             0663
         MVC   RTCTDSNM-12(3,@15),DVNAME(R4)                       0663
*                 RTCTDETP(CNT1)='1'B;/* INDICATE IT IS DASD         */
         LR    @15,@11                                             0664
         AL    @15,@TF00001                                        0664
         OI    RTCTDETP-12(@15),B'00100000'                        0664
*                 RTCTDEV(CNT1)=DVCODE;/* PLACE DEVICE CODE IN TABLE */
         AL    @11,@TF00001                                        0665
         MVC   RTCTDEV-12(4,@11),DVCODE                            0665
*               END;                                               0666
*             RFY                                                  0667
*               R6 UNRSTD;                                         0667
@RC00660 DS    0H                                                  0668
*           END;                                                   0668
*         IF SKIP='0'B THEN                                        0669
@RF00649 TM    SKIP(R5),B'10000000'                                0669
         BNZ   @RF00669                                            0669
*           DO;                                                    0670
*                                                                  0670
*             /*******************************************************/
*             /*                                                     */
*             /* NOW THE FIRST RECORD OF THE DASD SYS1.DUMP DATA SET */
*             /* IS READ TO SEE IF THE DATA SET IS FULL OR EMPTY     */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0671
*             RPARM=ADDR(RCCWCHAN); /* SET REG 1 TO ADDRESS OF READ
*                                      CCW CHAIN                     */
         LA    RPARM,RCCWCHAN                                      0671
*             SRECNU='01'X;         /* SEARCH FOR RECORD 1           */
         MVI   SRECNU,X'01'                                        0672
*             CALL SDIEXCP;         /* ISSUE EXCP                    */
         BAL   @14,SDIEXCP                                         0673
*             IF ECBCC='7F'X        /* SUCCESSFUL READ ?             */
*               THEN                /* YES                           */
         L     @15,ECBPTR                                          0674
         CLI   ECBCC(@15),X'7F'                                    0674
         BNE   @RF00674                                            0674
*               DO;                                                0675
*                 RTCTDSUS(CNT1)='1'B;/* INDICATE DATA SET IS FULL 0676
*                                      AND USED              @ZM44949*/
         LR    @15,CNT1                                            0676
         MH    @15,@CH01192                                        0676
         L     @11,CVTRTMCT(,RCVT)                                 0676
         ALR   @11,@15                                             0676
         OI    RTCTDSUS-12(@11),B'01000000'                        0676
*                 CNT1=CNT1+1;      /* UP COUNTER TO ADDRESS NEXT  0677
*                                      ELEMENT IN DATA SET TABLE     */
         LA    CNT1,1(,CNT1)                                       0677
*               END;                                               0678
*             ELSE                  /* NOT A GOOD READ               */
*               DO;                                                0679
         B     @RC00674                                            0679
@RF00674 DS    0H                                                  0680
*                 IF UNITCHK='1'B×  /* UNIT CHECK OR                 */
*                     PGMCHK='1'B×  /* PROGRAM CHECK OR              */
*                     PROTECT='1'B× /* PROTECT CHECK OR              */
*                     DATACHK='1'B× /* CHANNEL DATA CHECK OR         */
*                     CONTROL='1'B× /* CHAN CONTROL CHECK OR         */
*                     INTFCHK='1'B× /* INTERFACE CNTRL CHECK OR      */
*                     CHAINCK='1'B× /* CHAIN CHECK OR                */
*                     UNITEXC='0'B  /* UNIT EXCEPTION IS NOT PRESENT */
*                   THEN            /* CANNOT READ THE FIRST RECORD
*                                      SO NOW TRY TO EMPTY IT BY   0680
*                                      WRITING AN EOF MARKER ON IT 0680
*                                                            @YM05431*/
         L     @15,IOBSTPTR                                        0680
         TM    UNITCHK(@15),B'00000010'                            0680
         BO    @RT00680                                            0680
         TM    PGMCHK(@15),B'00111111'                             0680
         BNZ   @RT00680                                            0680
         TM    UNITEXC(@15),B'00000001'                            0680
         BNZ   @RF00680                                            0680
@RT00680 DS    0H                                                  0681
*                   DO;             /*                       @YM05431*/
*                     DCBPTR=0;     /*                       @YM05431*/
         SLR   @15,@15                                             0682
         ST    @15,DCBPTR(,R5)                                     0682
*                     DEBPTR=RTCTDCB(CNT1);/* GET DEB ADDRESS      0683
*                                                            @YM05431*/
         LR    @15,CNT1                                            0683
         MH    @15,@CH01192                                        0683
         L     @11,CVTRTMCT(,RCVT)                                 0683
         L     @15,RTCTDCB-12(@15,@11)                             0683
         ST    @15,DEBPTR                                          0683
*                     DEBDAPTR=ADDR(DEBBASND);/*             @YM05431*/
         LA    DEBDAPTR,DEBBASND(,@15)                             0684
*                     BUFCH(1:2)=DEBSTRCC;/* CC TO WRITE     @YM05431*/
         MVC   BUFCH(2),DEBSTRCC(DEBDAPTR)                         0685
*                     BUFCH(3:4)=DEBSTRHH;/* HEAD NUMBER     @YM05431*/
         MVC   BUFCH+2(2),DEBSTRHH(DEBDAPTR)                       0686
*                     BUFCR='01'X;  /* RECORD 1              @YM05431*/
         MVI   BUFCR,X'01'                                         0687
*                     SRECNU='00'X; /* SEARCH REC 0          @YM05431*/
         MVI   SRECNU,X'00'                                        0688
*                     R1=ADDR(WRITECCW);/* POINT TO WRITE    @YM05431*/
         LA    R1,WRITECCW                                         0689
*                     CALL SDIEXCP; /* WRITE EOF             @YM05431*/
         BAL   @14,SDIEXCP                                         0690
*                     IF ECBCC^='7F'X/* ERROR ON WRITE?      @YM05431*/
*                       THEN        /* THIS ERROR CANNOT BE PROCESSED
*                                      BY SDUMP                      */
         L     @15,ECBPTR                                          0691
         CLI   ECBCC(@15),X'7F'                                    0691
         BE    @RF00691                                            0691
*                       DO;                                        0692
*                         NSDEV=RTCTDSNM(CNT1);/* PUT DEVICE NUMBER
*                                      IN MESSAGE IEA880I            */
         LR    @15,CNT1                                            0693
         MH    @15,@CH01192                                        0693
         L     @11,CVTRTMCT(,RCVT)                                 0693
         ALR   @11,@15                                             0693
         MVC   NSDEV(3),RTCTDSNM-12(@11)                           0693
*                         RPARM=ADDR(SDIIOB);                      0694
         LA    RPARM,SDIIOB                                        0694
*                         GENERATE REFS(RNVT,NVTSENSE,RPARM,SDIIOB)
*                             SETS(RPARM,R14,R15);                 0695
      IEAPMNIP TYPE=SENSE,PARAM=RPARM
      IEAPMNIP TYPE=WTO,PARAM=MSG02
*                         RTCTSDDS(CNT1)=''B;/* CLEAR THE CURRENT  0696
*                                      ENTRY IT IS NOT USED          */
         LR    @15,CNT1                                            0696
         MH    @15,@CH01192                                        0696
         L     @11,CVTRTMCT(,RCVT)                                 0696
         ALR   @11,@15                                             0696
         XC    RTCTSDDS-12(12,@11),RTCTSDDS-12(@11)                0696
*                       END;                                       0697
*                     ELSE          /* SUCCESSFUL WRITE      @YM05431*/
*                       DO;         /* USE THE DATA SET      @YM05431*/
         B     @RC00691                                            0698
@RF00691 DS    0H                                                  0699
*                         CNT1=CNT1+1;/* NEXT ENTRY TO USE@YM05431   */
         LA    CNT1,1(,CNT1)                                       0699
*                       END;        /*                       @YM05431*/
*                   END;            /*                       @YM05431*/
*                 ELSE              /* THE DEVICE IS EMPTY           */
*                   DO;                                            0702
         B     @RC00680                                            0702
@RF00680 DS    0H                                                  0703
*                     CNT1=CNT1+1;  /* UP COUNT TO NEXT ENTRY        */
         LA    CNT1,1(,CNT1)                                       0703
*                   END;                                           0704
*               END;                                               0705
@RC00680 DS    0H                                                  0706
*             IF CNT1=2             /* ANY ENTRIES YET               */
*               THEN                /* YES                           */
@RC00674 C     CNT1,@CF00069                                       0706
         BNE   @RF00706                                            0706
*               RTCTSDNO='0'B;      /* INDICATE THAT AT LEAST ONE  0707
*                                      DEVICE IS IN THE TABLE        */
         L     @15,CVTRTMCT(,RCVT)                                 0707
         NI    RTCTSDNO(@15),B'01111111'                           0707
*             IF CNT1>10            /* TEN ENTRIES DONE              */
*               THEN                /* YES                           */
@RF00706 C     CNT1,@CF01260                                       0708
         BNH   @RF00708                                            0708
*               DUMPF='1'B;         /* INDICATE FINISHED             */
         OI    DUMPF(R5),B'00000001'                               0709
*           END;                                                   0710
@RF00708 DS    0H                                                  0711
*         SKIP='0'B;                /* TURN OFF SKIP FLAG            */
@RF00669 NI    SKIP(R5),B'01111111'                                0711
*         RFY                                                      0712
*           R4 UNRSTD;                                             0712
*       END;                                                       0713
*     IF DUMPT='1'B                 /* WAS A TAPE DEVICE SPECIFIED   */
*       THEN                        /* YES PROCESS TAPE              */
@RF00593 TM    DUMPT(R5),B'00010000'                               0714
         BNO   @RF00714                                            0714
*       DO;                                                        0715
*         CALL SDITAPE;                                            0716
         BAL   @14,SDITAPE                                         0716
*       END;                                                       0717
*   END;                            /* END DO WHILE                  */
@RF00714 DS    0H                                                  0718
@DE00592 TM    DUMPN(R5),B'10000001'                               0718
         BZ    @DL00592                                            0718
*   CALL CHECKTBL;                  /* CHECK IF MORE DEVICES HAVE  0719
*                                      BEEN REQUESTED THEN CAN FIT 0719
*                                      INTO THE TABLE                */
         BAL   @14,CHECKTBL                                        0719
*   IF DUMPL='1'B                   /* WAS DUMP L SPECIFIED          */
*     THEN                          /* YES NOTIFY OPERATOR           */
         TM    DUMPL(R5),B'01000000'                               0720
         BNO   @RF00720                                            0720
*     DO;                                                          0721
*                                                                  0721
*       /*************************************************************/
*       /*                                                           */
*       /* IT HAS BEEN DETERMINED THAT THE OPERATOR HAS REQUESTED A  */
*       /* LIST OF THE STATUS FOR THE DASD DEVICES-THIS ROUTINE LIST */
*       /* THE DEVICE AND ITS STATUS EITHER EMPTY OR FULL THEN THE   */
*       /* OPERATOR CAN SPECIFY WHICH FULL DEVICES CAN BE MARKED     */
*       /* EMPTY THE OPERATOR CAN ALSO SPECIFY MORE TAPE DEVICES TO  */
*       /* BE ADDED TO THE DUMP DATA SET TABLE OR THE OPERATOR CAN   */
*       /* SPECIFY GO IF THE DUMP DATA SET TABLE SHOULD BE LEFT AS IT*/
*       /* IS                                                        */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0722
*       CNT2=1;                     /* SET SECOND COUNT TO 1         */
         LA    CNT2,1                                              0722
*       DO WHILE(CNT2^=CNT1);       /* DO UNTIL ALL ENTRIES IN THE 0723
*                                      TABLE HAVE BEEN SCANNED       */
         B     @DE00723                                            0723
@DL00723 DS    0H                                                  0724
*         IF RTCTDETP(CNT2)='1'B    /* IS THIS DASD                  */
*           THEN                    /* YES                           */
         LR    @15,CNT2                                            0724
         MH    @15,@CH01192                                        0724
         L     @11,CVTRTMCT(,RCVT)                                 0724
         ST    @15,@TF00001                                        0724
         ALR   @15,@11                                             0724
         TM    RTCTDETP-12(@15),B'00100000'                        0724
         BNO   @RF00724                                            0724
*           DO;                                                    0725
*             MS6DV=RTCTDSNM(CNT2); /* PUT DEVICE NAME IN MSG        */
         LR    @15,@11                                             0726
         AL    @15,@TF00001                                        0726
         MVC   MS6DV(3),RTCTDSNM-12(@15)                           0726
*             DUMPD='1'B;           /* INDICATE DASD                 */
         OI    DUMPD(R5),B'00100000'                               0727
*             IF RTCTDSUS(CNT2)='1'B/* IS DATA SET FULL AND USED?  0728
*                                                            @ZM44949*/
*               THEN                /* YES                           */
         AL    @11,@TF00001                                        0728
         TM    RTCTDSUS-12(@11),B'01000000'                        0728
         BNO   @RF00728                                            0728
*               DO;                                                0729
*                 MS6ID='5';        /* SET MESSAGE ID TO IEA875I     */
         MVI   MS6ID,C'5'                                          0730
*                 MS6ST='FULL ';    /* INDICATE DEVICE IS FULL       */
         MVC   MS6ST(5),@CC03801                                   0731
*               END;                                               0732
*             ELSE                                                 0733
*               DO;                 /* THE DEVICE IS EMPTY           */
         B     @RC00728                                            0733
@RF00728 DS    0H                                                  0734
*                 MS6ID='6';        /* ID FOR MESSAGE IEA876I        */
         MVI   MS6ID,C'6'                                          0734
*                 MS6ST='EMPTY';    /* DEVICE IS EMPTY               */
         MVC   MS6ST(5),@CC03803                                   0735
*               END;                                               0736
*                                                                  0736
*             /*******************************************************/
*             /*                                                     */
*             /* WRITE OUT DEVICE STATUS                             */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0737
*             GENERATE REFS(MSG06) SETS(RPARM,R14,R15);            0737
@RC00728 DS    0H                                                  0737
      IEAPMNIP TYPE=WTO,PARAM=MSG06
*           END;                                                   0738
*         CNT2=CNT2+1;              /* UP ARRAY INDEX                */
@RF00724 LA    CNT2,1(,CNT2)                                       0739
*       END;                        /* END OF DO WHILE CNT2^=CNT1    */
*                                                                  0740
@DE00723 CR    CNT2,CNT1                                           0740
         BNE   @DL00723                                            0740
*       /*************************************************************/
*       /*                                                           */
*       /* THE OPERATOR HAS NOW BEEN INFORMED OF THE STATUS OF EACH  */
*       /* OF THE DASD DEVICES PLACED IN THE DUMP DATA SET TABLE NOW */
*       /* ISSUE MESSAGE IEA877A TO ALLOW THE OPERATOR TO CHANGE THE */
*       /* STATUS OF THE TABLE                                       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0741
*       GENERATE REFS(MSG08,MSG09) SETS(RPARM,R14,R15);            0741
     IEAPMNIP TYPE=WTOR,PARAM=MSG09    ASK OPERATOR FOR ACTION
*       DACTION=0;                  /* SET FOR LOOP CONTROL TO SCAN
*                                      THE OPERATOR REPLY            */
         SLR   @15,@15                                             0742
         STH   @15,DACTION(,R5)                                    0742
*       DO WHILE(VALIDSW='0'B);     /* SCAN REPLY UNTIL VALID        */
         B     @DE00743                                            0743
@DL00743 DS    0H                                                  0744
*         BEGIN=RPARM;              /* REPLY AREA RETURNED IN REG 1  */
         ST    RPARM,BEGIN(,R5)                                    0744
*         CURRENT=RPARM;                                           0745
         ST    RPARM,CURRENT(,R5)                                  0745
*         ENDCOL=RPARM;                                            0746
         ST    RPARM,ENDCOL(,R5)                                   0746
*         DO WHILE(CURCHAR^='''');  /* REPLY IS TERMINATED BY A QUOTE*/
         B     @DE00747                                            0747
@DL00747 DS    0H                                                  0748
*           CURRENT=CURRENT+1;                                     0748
         LA    @15,1                                               0748
         AL    @15,CURRENT(,R5)                                    0748
         ST    @15,CURRENT(,R5)                                    0748
*         END;                      /* END OF DATA FOUND             */
@DE00747 L     @15,CURRENT(,R5)                                    0749
         CLI   CURCHAR(@15),C''''                                  0749
         BNE   @DL00747                                            0749
*         ENDCOL=CURRENT;                                          0750
         ST    @15,ENDCOL(,R5)                                     0750
*         CURRENT=BEGIN;                                           0751
*                                                                  0751
         L     @15,BEGIN(,R5)                                      0751
         ST    @15,CURRENT(,R5)                                    0751
*         /***********************************************************/
*         /*                                                         */
*         /* THE REPLY DATA TO MESSAGE IEA877A AND-OR IEA882A IS NOW */
*         /* SCANNED TO COUNT THE RIGHT AND LEFT PARENS TO INSURE    */
*         /* THEY APPEAR THE SAME NUMBER OF TIMES                    */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0752
*         CNT2=0;                   /* INITIALIZE LEFT COUNTER       */
         SLR   CNT2,CNT2                                           0752
*         CNT3=0;                   /* AND RIGHT                     */
         MVI   CNT3,X'00'                                          0753
*         DO WHILE(CURRENT^=ENDCOL);/* ENSURE LEFT AND RIGHT PARANS
*                                      NOT INTER-MIXED.              */
         B     @DE00754                                            0754
@DL00754 DS    0H                                                  0755
*           IF CURCHAR='('          /* LEFT PAREN                    */
*             THEN                  /* YES                           */
         L     @15,CURRENT(,R5)                                    0755
         CLI   CURCHAR(@15),C'('                                   0755
         BNE   @RF00755                                            0755
*             CNT2=CNT2+1;                                         0756
         LA    CNT2,1(,CNT2)                                       0756
*           ELSE                                                   0757
*             DO;                                                  0757
         B     @RC00755                                            0757
@RF00755 DS    0H                                                  0758
*               IF CURCHAR=')'      /* RIGHT PAREN                   */
*                 THEN              /* YES                           */
         L     @15,CURRENT(,R5)                                    0758
         CLI   CURCHAR(@15),C')'                                   0758
         BNE   @RF00758                                            0758
*                 CNT3=CNT3+1;                                     0759
         IC    @15,CNT3                                            0759
         LA    @15,1(,@15)                                         0759
         STC   @15,CNT3                                            0759
*             END;                                                 0760
@RF00758 DS    0H                                                  0761
*           IF CNT3>CNT2            /* IF THE RIGHT PAREN COUNTER  0761
*                                      EXCEEDS THE LEFT THEN THE   0761
*                                      PARENS ARE NOT POSITIONED   0761
*                                      PROPERLY                      */
*             THEN                  /* ERROR SITUATION               */
@RC00755 SLR   @15,@15                                             0761
         IC    @15,CNT3                                            0761
         CR    CNT2,@15                                            0761
         BNL   @RF00761                                            0761
*             CURRENT=ENDCOL;       /* FORCE LOOP EXIT               */
         L     @15,ENDCOL(,R5)                                     0762
         ST    @15,CURRENT(,R5)                                    0762
*           ELSE                    /* OKAY SO FAR                   */
*             CURRENT=CURRENT+1;                                   0763
         B     @RC00761                                            0763
@RF00761 LA    @15,1                                               0763
         AL    @15,CURRENT(,R5)                                    0763
         ST    @15,CURRENT(,R5)                                    0763
*         END;                      /* OF DO WHILE                   */
@RC00761 DS    0H                                                  0764
@DE00754 CLC   CURRENT(4,R5),ENDCOL(R5)                            0764
         BNE   @DL00754                                            0764
*         IF CNT2^=CNT3             /* PARANS BALANCED...            */
*           THEN                                                   0765
         SLR   @15,@15                                             0765
         IC    @15,CNT3                                            0765
         CR    CNT2,@15                                            0765
         BNE   @RT00765                                            0765
*           ;                       /* NO - LEAVE CURRENT = ENDCOL   */
*         ELSE                      /* OKAY                          */
*           CURRENT=BEGIN;          /* RESET CURRENT                 */
         L     @15,BEGIN(,R5)                                      0767
         ST    @15,CURRENT(,R5)                                    0767
*         IF CURCHAR=' '&NXTCHAR=''''/* AN EOB, BLANK FOLLOWED BY A
*                                      QUOTE, MEANS GO               */
*           THEN                    /* YES AN EOB IS THE RESPONSE    */
@RT00765 L     @15,CURRENT(,R5)                                    0768
         CLI   CURCHAR(@15),C' '                                   0768
         BNE   @RF00768                                            0768
         CLI   NXTCHAR(@15),C''''                                  0768
         BNE   @RF00768                                            0768
*           DO;                                                    0769
*             CURRENT=ENDCOL;       /* NO SCAN REQUIRED              */
         L     @15,ENDCOL(,R5)                                     0770
         ST    @15,CURRENT(,R5)                                    0770
*             VALIDSW='1'B;         /* AND AN EOB IS VALID           */
         OI    VALIDSW(R5),B'00000010'                             0771
*           END;                                                   0772
*                                                                  0772
*         /***********************************************************/
*         /*                                                         */
*         /* IF PARENS SYNTAX IS INVALID OR RESPONSE IS AN EOB THEN  */
*         /* CURRENT IS EQUAL TO ENDCOL TO BYPASS THE SCAN           */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0773
*         DO WHILE(CURRENT^=ENDCOL);                               0773
*                                                                  0773
@RF00768 B     @DE00773                                            0773
@DL00773 DS    0H                                                  0774
*           /*********************************************************/
*           /*                                                       */
*           /* THE OPERATOR REPLY TO MESSAGE IEA877A OR IEA882A IS   */
*           /* SCANNED TO INSURE THAT THE SYNTAX IS CORRECT AND THAT */
*           /* THE DEVICES SPECIFIED ARE VALID IE- DA DEVICES MUST BE*/
*           /* INDICATED AS BEING FULL IN THE DUMP DATA SET TABLE AND*/
*           /* THE TAPE DEVICES HAVE NOT ALREADY BEEN MADE AVAILABLE */
*           /* TO SVC DUMP                                           */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0774
*           VALIDSW='0'B;           /* INDICATE THE REQUEST IS     0774
*                                      INVALID.IF THE SWITCH IS OFF
*                                      AT THE END OF THE LOOP THE  0774
*                                      REQUEST IS INVALID            */
         NI    VALIDSW(R5),B'11111101'                             0774
*           IF CURCHAR='('          /* LEFT PAREN ?                  */
*             THEN                  /* YES                           */
         L     @15,CURRENT(,R5)                                    0775
         CLI   CURCHAR(@15),C'('                                   0775
         BNE   @RF00775                                            0775
*             DO;                                                  0776
*                                                                  0776
*               /*****************************************************/
*               /*                                                   */
*               /* THE ONLY CHARACTERS TO FOLLOW A LEFT PAREN ARE-   */
*               /* D,T, OR ( ANY OTHER CHARACTERS ARE INVALID        */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0777
*               IF NXTCHAR='('      /* IS THE NEXT CHARACTER ANOTHER
*                                      PAREN                         */
*                 THEN              /* YES -                         */
         CLI   NXTCHAR(@15),C'('                                   0777
         BNE   @RF00777                                            0777
*                 CURRENT=CURRENT+1;/* ONLY TWO LEFT PARENS ARE    0778
*                                      ALLOWED BACK TO BACK AFTER THE
*                                      SECOND PAREN THERE MUST BE A
*                                      -D,T OR G                     */
         AL    @15,@CF00055                                        0778
         ST    @15,CURRENT(,R5)                                    0778
*               IF NXTCHAR='T'      /* IS IT A-T-                    */
*                 THEN              /* YES                           */
@RF00777 L     @15,CURRENT(,R5)                                    0779
         CLI   NXTCHAR(@15),C'T'                                   0779
         BNE   @RF00779                                            0779
*                 DO;                                              0780
*                   CURRENT=CURRENT+1;                             0781
         AL    @15,@CF00055                                        0781
         ST    @15,CURRENT(,R5)                                    0781
*                   CALL TACHECK;   /* VALIDATE TA SYNTAX AND PLACE
*                                      DEVICES ON DEVICE Q           */
         BAL   @14,TACHECK                                         0782
*                 END;                                             0783
*               ELSE                                               0784
*                 DO;                                              0784
         B     @RC00779                                            0784
@RF00779 DS    0H                                                  0785
*                   IF NXTCHAR='D'  /* A D IS OKAY                   */
*                     THEN                                         0785
         L     @15,CURRENT(,R5)                                    0785
         CLI   NXTCHAR(@15),C'D'                                   0785
         BNE   @RF00785                                            0785
*                     CURRENT=CURRENT+1;                           0786
         AL    @15,@CF00055                                        0786
         ST    @15,CURRENT(,R5)                                    0786
*                   ELSE                                           0787
*                     DO;                                          0787
         B     @RC00785                                            0787
@RF00785 DS    0H                                                  0788
*                       CURRENT=ENDCOL;/* ANY OTHER CHARACTER IS   0788
*                                      INVALID                       */
         L     @15,ENDCOL(,R5)                                     0788
         ST    @15,CURRENT(,R5)                                    0788
*                     END;                                         0789
*                 END;                                             0790
@RC00785 DS    0H                                                  0791
*             END;                                                 0791
@RC00779 DS    0H                                                  0792
*           IF CURCHAR='G'          /* POSSIBLE GO REPLY ?           */
*             THEN                  /* YES                           */
@RF00775 L     @15,CURRENT(,R5)                                    0792
         CLI   CURCHAR(@15),C'G'                                   0792
         BNE   @RF00792                                            0792
*             DO;                                                  0793
*                                                                  0793
*               /*****************************************************/
*               /*                                                   */
*               /* IF GO IS SPECIFIED IT CAN BE THE ONLY PARAMETER   */
*               /* SPECIFIED                                         */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0794
*               IF NXTCHAR^='O'×    /* SPELLED CORRECTLY AND         */
*                   CURRENT^=BEGIN  /* BY ITSELF                     */
*                 THEN                                             0794
         CLI   NXTCHAR(@15),C'O'                                   0794
         BNE   @RT00794                                            0794
         C     @15,BEGIN(,R5)                                      0794
         BE    @RF00794                                            0794
@RT00794 DS    0H                                                  0795
*                 CURRENT=ENDCOL;   /* GET OUT WITH VALIDSW OFF      */
         L     @15,ENDCOL(,R5)                                     0795
         ST    @15,CURRENT(,R5)                                    0795
*               ELSE                                               0796
*                 DO;                                              0796
         B     @RC00794                                            0796
@RF00794 DS    0H                                                  0797
*                   CURRENT=CURRENT+2;/* POINT CURRENT TO AFTER GO   */
         LA    @15,2                                               0797
         AL    @15,CURRENT(,R5)                                    0797
         ST    @15,CURRENT(,R5)                                    0797
*                   IF CURRENT=ENDCOL/* WAS GO BY ITSELF             */
*                     THEN          /* YES                           */
         C     @15,ENDCOL(,R5)                                     0798
         BNE   @RF00798                                            0798
*                     VALIDSW='1'B;                                0799
         OI    VALIDSW(R5),B'00000010'                             0799
*                   ELSE            /* NOT BY ITSELF IS INVALID      */
*                     CURRENT=ENDCOL;/* GET OUT WITH VALID OFF       */
         B     @RC00798                                            0800
@RF00798 L     @15,ENDCOL(,R5)                                     0800
         ST    @15,CURRENT(,R5)                                    0800
*                 END;                                             0801
@RC00798 DS    0H                                                  0802
*               CURCHAR='''';       /* IF GO IS VALID OR INVALID NO
*                                      OTHER CHECKS SHOULD BE MADE SO
*                                      SET CURCHAR TO A QUOTE        */
@RC00794 L     @15,CURRENT(,R5)                                    0802
         MVI   CURCHAR(@15),C''''                                  0802
*             END;                                                 0803
*           IF CURCHAR='D'          /* POSSIBLE DA TO EMPTY ?        */
*             THEN                  /* YES                           */
@RF00792 L     @15,CURRENT(,R5)                                    0804
         CLI   CURCHAR(@15),C'D'                                   0804
         BNE   @RF00804                                            0804
*             DO;                                                  0805
*                                                                  0805
*               /*****************************************************/
*               /*                                                   */
*               /* ONCE A -D- HAS BEEN FOUND IT MUST BE FOLLOWED BY  */
*               /* A=( . AFTER THE SYNTAX HAS BEEN CHECKED THE RIGHT */
*               /* PAREN IS FOUND AND ALL THE DA DEVICES SPECIFIED   */
*               /* ARE CHECKED TO INSURE THAT THEY EXIST IN THE DUMP */
*               /* DATA SET TABLE AND THAT THEY ARE MARKED AS BEING  */
*               /* FULL.AFTER THE DEVICE IS VERIFIED IT IS PLACED ON */
*               /* THE DEVICE Q TO BE PROCESSED LATER.IF THE SAME    */
*               /* DEVICE IS SPECIFIED TWICE IT IS INVALID           */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0806
*               SCANBEG=CURRENT;    /* SAVE THE ADDRESS OF D         */
         ST    @15,SCANBEG(,R5)                                    0806
*               CURRENT=CURRENT+3;  /* POINT TO WHERE THE PAREN    0807
*                                      SHOULD BE                     */
         LA    @11,3                                               0807
         ALR   @11,@15                                             0807
         ST    @11,CURRENT(,R5)                                    0807
*               IF CURRENT>ENDCOL×  /* ENOUGH SPACE AVAILABLE        */
*                   FIRST4^='DA=('  /* AND PROPER SYNTAX             */
*                 THEN              /* NO                            */
         C     @11,ENDCOL(,R5)                                     0808
         BH    @RT00808                                            0808
         CLC   FIRST4(4,@15),@CC03806                              0808
         BE    @RF00808                                            0808
@RT00808 DS    0H                                                  0809
*                 CURRENT=ENDCOL;   /* INVALID                       */
         L     @15,ENDCOL(,R5)                                     0809
         ST    @15,CURRENT(,R5)                                    0809
*               DO WHILE(CURRENT^=ENDCOL&CURCHAR^=')');/* FIND RT  0810
*                                      PAREN IF SYNTAX OK            */
@RF00808 B     @DE00810                                            0810
@DL00810 DS    0H                                                  0811
*                 CURRENT=CURRENT+1;/* GET NEXT CHARACTER            */
         LA    @15,1                                               0811
         AL    @15,CURRENT(,R5)                                    0811
         ST    @15,CURRENT(,R5)                                    0811
*               END;                                               0812
@DE00810 L     @15,CURRENT(,R5)                                    0812
         C     @15,ENDCOL(,R5)                                     0812
         BE    @DC00810                                            0812
         CLI   CURCHAR(@15),C')'                                   0812
         BNE   @DL00810                                            0812
@DC00810 DS    0H                                                  0813
*               IF CURCHAR=')'      /* IF CLOSING PAREN FOUND        */
*                 THEN              /* CHECK NEXT CHARACTER          */
         L     @15,CURRENT(,R5)                                    0813
         CLI   CURCHAR(@15),C')'                                   0813
         BNE   @RF00813                                            0813
*                 DO;                                              0814
*                   CURRENT=CURRENT+1;                             0815
         AL    @15,@CF00055                                        0815
         ST    @15,CURRENT(,R5)                                    0815
*                   IF CURCHAR^=')'&/* IT MUST BE A -)-              */
*                       CURCHAR^=','&/* OR A-,-                      */
*                       CURRENT^=ENDCOL/* OR END OF DATA             */
*                     THEN          /* INVALID                       */
         CLI   CURCHAR(@15),C')'                                   0816
         BE    @RF00816                                            0816
         CLI   CURCHAR(@15),C','                                   0816
         BE    @RF00816                                            0816
         L     @11,ENDCOL(,R5)                                     0816
         CR    @15,@11                                             0816
         BE    @RF00816                                            0816
*                     DO;                                          0817
*                       CURRENT=ENDCOL;/* OUT WITH VALIDSW OFF       */
         ST    @11,CURRENT(,R5)                                    0818
*                     END;                                         0819
*                   ELSE                                           0820
*                     DO;                                          0820
         B     @RC00816                                            0820
@RF00816 DS    0H                                                  0821
*                       VALIDSW='1'B;/* VALID SO FAR                 */
         OI    VALIDSW(R5),B'00000010'                             0821
*                       SCANBEG=SCANBEG+4;/* POINT TO FIRST DA ENTRY */
         LA    @15,4                                               0822
         AL    @15,SCANBEG(,R5)                                    0822
         ST    @15,SCANBEG(,R5)                                    0822
*                     END;                                         0823
*                 END;                                             0824
@RC00816 DS    0H                                                  0825
*               IF VALIDSW='1'B     /* IS THE SYNTAX OK              */
*                 THEN                                             0825
@RF00813 TM    VALIDSW(R5),B'00000010'                             0825
         BNO   @RF00825                                            0825
*                 DO;               /* YES                           */
*                   CALL DALIST;    /* PUT DEVICES ON Q TO BE      0827
*                                      PROCESSED                     */
         BAL   @14,DALIST                                          0827
*                 END;                                             0828
*             END;                                                 0829
@RF00825 DS    0H                                                  0830
*           IF CURCHAR=','          /* COMMA ?                       */
*             THEN                  /* YES                           */
@RF00804 L     @15,CURRENT(,R5)                                    0830
         CLI   CURCHAR(@15),C','                                   0830
         BNE   @RF00830                                            0830
*             DO;                                                  0831
*               IF NXTCHAR='('×     /* IS IT FOLLOWED BY A ( OR      */
*                   NXTCHAR='D'     /* A D                           */
*                 THEN              /* IT IS OKAY                    */
         CLI   NXTCHAR(@15),C'('                                   0832
         BE    @RT00832                                            0832
         CLI   NXTCHAR(@15),C'D'                                   0832
         BNE   @RF00832                                            0832
@RT00832 DS    0H                                                  0833
*                 DO;                                              0833
*                   VALIDSW='1'B;                                  0834
         OI    VALIDSW(R5),B'00000010'                             0834
*                   CURRENT=CURRENT+1;/* POINT TO NEXT CHAR          */
         LA    @15,1                                               0835
         AL    @15,CURRENT(,R5)                                    0835
         ST    @15,CURRENT(,R5)                                    0835
*                 END;                                             0836
*               ELSE                /* IT IS AN INVALID SEQUENCE     */
*                 DO;                                              0837
         B     @RC00832                                            0837
@RF00832 DS    0H                                                  0838
*                   VALIDSW='0'B;                                  0838
         NI    VALIDSW(R5),B'11111101'                             0838
*                   CURRENT=ENDCOL; /* GET OUT OF LOOP               */
         L     @15,ENDCOL(,R5)                                     0839
         ST    @15,CURRENT(,R5)                                    0839
*                 END;                                             0840
*             END;                                                 0841
@RC00832 DS    0H                                                  0842
*           IF CURCHAR=')'          /* IS IT A RIGHT PAREN ?         */
*             THEN                  /* YES                           */
@RF00830 L     @15,CURRENT(,R5)                                    0842
         CLI   CURCHAR(@15),C')'                                   0842
         BNE   @RF00842                                            0842
*             DO;                                                  0843
*               IF NXTCHAR=''''     /* IS IT THE LAST CHARACTER TO BE
*                                      SCANNED.THE END OF DATA IS  0844
*                                      INDICATED BY A SINGLE QUOTE   */
*                 THEN              /* IT IS A VALID SEQUENCE        */
         CLI   NXTCHAR(@15),C''''                                  0844
         BNE   @RF00844                                            0844
*                 DO;                                              0845
*                   VALIDSW='1'B;                                  0846
         OI    VALIDSW(R5),B'00000010'                             0846
*                   CURRENT=CURRENT+1;                             0847
         AL    @15,@CF00055                                        0847
         ST    @15,CURRENT(,R5)                                    0847
*                 END;                                             0848
*               ELSE                /* IT IS INVALID                 */
*                 DO;                                              0849
         B     @RC00844                                            0849
@RF00844 DS    0H                                                  0850
*                   VALIDSW='0'B;                                  0850
         NI    VALIDSW(R5),B'11111101'                             0850
*                   CURRENT=ENDCOL;                                0851
         L     @15,ENDCOL(,R5)                                     0851
         ST    @15,CURRENT(,R5)                                    0851
*                 END;                                             0852
*             END;                                                 0853
@RC00844 DS    0H                                                  0854
*           IF VALIDSW='0'B         /* IS THE REQUEST STILL INVALID ?*/
*             THEN                  /* YES                           */
@RF00842 TM    VALIDSW(R5),B'00000010'                             0854
         BNZ   @RF00854                                            0854
*             CURRENT=ENDCOL;       /* GET OUT OF LOOP               */
         L     @15,ENDCOL(,R5)                                     0855
         ST    @15,CURRENT(,R5)                                    0855
*         END;                                                     0856
@RF00854 DS    0H                                                  0856
@DE00773 CLC   CURRENT(4,R5),ENDCOL(R5)                            0856
         BNE   @DL00773                                            0856
*         RPARM=BEGIN;              /* START OF AREA TO FREE         */
         L     RPARM,BEGIN(,R5)                                    0857
*         GEN SETS(RPARM,R14,R15);                                 0858
     IEAPMNIP TYPE=WTOR2,PARAM=RPARM,BUFREL=YES  FREE REPLY AREA
*         IF VALIDSW='0'B           /* WAS REPLY VALID ?             */
*           THEN                    /* NO- ISSUE MESSAGE IEA882A     */
         TM    VALIDSW(R5),B'00000010'                             0859
         BNZ   @RF00859                                            0859
*           DO;                                                    0860
*             RFY                                                  0861
*               R4 RSTD;                                           0861
*             GEN REFS(MSG10,MSG11) SETS(RPARM,R14,R15);           0862
     IEAPMNIP TYPE=WTOR,PARAM=MSG11   PROMPT OPERATOR
*             DACTION=0;            /* RESET ANY FLAGS THAT MAY HAVE
*                                      BEEN SET                      */
         SLR   @15,@15                                             0863
         STH   @15,DACTION(,R5)                                    0863
*             QSAVE=ADDR(RQUEADD);                                 0864
         LA    @15,RQUEADD(,R5)                                    0864
         ST    @15,QSAVE(,R5)                                      0864
*             R4=RQUEADD;                                          0865
*                                                                  0865
         L     R4,RQUEADD(,R5)                                     0865
*             /*******************************************************/
*             /*                                                     */
*             /* THE DEVICE QUEUE IS NOW SCANNED TO DETERMINE IF ANY */
*             /* DEVICES HAVE BEEN PLACED ON THE Q WHILE SCANNING THE*/
*             /* REQUEST. BECAUSE THIS REQUEST IS INVALID ALL THOSE  */
*             /* ENTRIES ADDED ARE LOGICALLY REMOVED                 */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0866
*             DO WHILE(R4^=0&DPROCSD='1'B);                        0866
         B     @DE00866                                            0866
@DL00866 DS    0H                                                  0867
*               QSAVE=R4;           /* THIS IS NOT A NEW ENTRY SO  0867
*                                      SAVE ITS ADDRESS              */
         ST    R4,QSAVE(,R5)                                       0867
*               R4=NXTENTAD;        /* ADDRESS OF NEXT BLOCK         */
         L     R4,NXTENTAD(,R4)                                    0868
*             END;                                                 0869
@DE00866 LTR   R4,R4                                               0869
         BZ    @DC00866                                            0869
         TM    DPROCSD(R4),B'01000000'                             0869
         BO    @DL00866                                            0869
@DC00866 DS    0H                                                  0870
*             IF R4^=0              /* WERE ANY DEVICES PLACED ON THE
*                                      Q                             */
*               THEN                /* YES                           */
         SLR   @15,@15                                             0870
         CR    R4,@15                                              0870
         BE    @RF00870                                            0870
*               DO;                                                0871
*                 QSAVE->NXTENTAD=0;/* TRUNCATE AT PREVIOUS ENTRY    */
         L     @11,QSAVE(,R5)                                      0872
         ST    @15,NXTENTAD(,@11)                                  0872
*               END;                                               0873
*             RFY                                                  0874
*               R4 UNRSTD;                                         0874
@RF00870 DS    0H                                                  0875
*           END;                                                   0875
*       END;                        /* OF DO WHILE VALID IS ZERO     */
@RF00859 DS    0H                                                  0876
@DE00743 TM    VALIDSW(R5),B'00000010'                             0876
         BZ    @DL00743                                            0876
*       IF DUMPD='1'B               /* ANY DA TO EMPTY               */
*         THEN                      /* YES                           */
         TM    DUMPD(R5),B'00100000'                               0877
         BNO   @RF00877                                            0877
*         DO;                                                      0878
*           RFY                                                    0879
*             R4 RSTD;                                             0879
*                                                                  0879
*           /*********************************************************/
*           /*                                                       */
*           /* THIS SECTION OF CODE WRITES AN EOF ON ALL THE DA      */
*           /* DEVICES THAT ARE FULL AND THE OPERATOR HAS REQUESTED  */
*           /* TO BE MARKED AS EMPTY VIA THE LIST REQUEST            */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0880
*           DUMPF='0'B;                                            0880
         NI    DUMPF(R5),B'11111110'                               0880
*           DO WHILE(DUMPF='0'B);   /* PROCESS ALL THE DA DEVICES  0881
*                                      REQUESTED                     */
         B     @DE00881                                            0881
@DL00881 DS    0H                                                  0882
*             R4=RQUEADD;           /* GET DVICE Q ADDRESS           */
         L     R4,RQUEADD(,R5)                                     0882
*             DO WHILE(R4^=0&(DPROCSD='1'B×DASDDV='0'B));/* FIND THE
*                                      FIRST ELIGIBLE DA DEVICE      */
         B     @DE00883                                            0883
@DL00883 DS    0H                                                  0884
*               R4=NXTENTAD;                                       0884
         L     R4,NXTENTAD(,R4)                                    0884
*             END;                                                 0885
@DE00883 LTR   R4,R4                                               0885
         BZ    @DC00883                                            0885
         TM    DPROCSD(R4),B'01000000'                             0885
         BNZ   @DL00883                                            0885
         TM    DASDDV(R4),B'10000000'                              0885
         BNO   @DL00883                                            0885
@DC00883 DS    0H                                                  0886
*             IF R4=0               /* IS THERE A DA TO PROCESS      */
*               THEN                /* NO                            */
         LTR   R4,R4                                               0886
         BNZ   @RF00886                                            0886
*               DUMPF='1'B;         /* INDICATE FINISHED FOR DASD    */
         OI    DUMPF(R5),B'00000001'                               0887
*             ELSE                  /* THERE IS A DA TO EMPTY        */
*               DO;                                                0888
         B     @RC00886                                            0888
@RF00886 DS    0H                                                  0889
*                 DPROCSD='1'B;     /* MARK THIS AS BEING PROCESS    */
         OI    DPROCSD(R4),B'01000000'                             0889
*                 CNT3=CNT1;        /* SAVE THE INDEX VALUE FOR THE
*                                      NEXT ENTRY OF THE DATASET   0890
*                                      TABLE IN THE RTCT             */
*                                                                  0890
         STC   CNT1,CNT3                                           0890
*                 /***************************************************/
*                 /*                                                 */
*                 /* NOW FIND THE ENTRY IN THE DUMP DATA SET TABLE   */
*                 /* THAT CORRESPONDS TO THE DEVICE FOUND IN THE     */
*                 /* DEVICE Q                                        */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0891
*                 CNT1=1;                                          0891
         LA    CNT1,1                                              0891
*                 DO WHILE(RTCTDSNM(CNT1)^=DVNAME);                0892
         B     @DE00892                                            0892
@DL00892 DS    0H                                                  0893
*                   CNT1=CNT1+1;                                   0893
         LA    CNT1,1(,CNT1)                                       0893
*                 END;                                             0894
@DE00892 LR    @15,CNT1                                            0894
         MH    @15,@CH01192                                        0894
         L     @11,CVTRTMCT(,RCVT)                                 0894
         ST    @15,@TF00001                                        0894
         ALR   @15,@11                                             0894
         CLC   RTCTDSNM-12(3,@15),DVNAME(R4)                       0894
         BNE   @DL00892                                            0894
*                 RTCTDSUS(CNT1)='0'B;/* MARK IT EMPTY AND UNUSED  0895
*                                                            @ZM44949*/
         LR    @15,@11                                             0895
         AL    @15,@TF00001                                        0895
         NI    RTCTDSUS-12(@15),B'10111111'                        0895
*                 DCBPTR=0;                                        0896
         SLR   @15,@15                                             0896
         ST    @15,DCBPTR(,R5)                                     0896
*                 DEBPTR=RTCTDCB(CNT1);/* GET DEB ADDRESS FOR THIS 0897
*                                      DEVICE                        */
         L     @15,@TF00001                                        0897
         L     @15,RTCTDCB-12(@15,@11)                             0897
         ST    @15,DEBPTR                                          0897
*                 DEBDAPTR=ADDR(DEBBASND);                         0898
         LA    DEBDAPTR,DEBBASND(,@15)                             0898
*                 BUFCH(1:2)=DEBSTRCC;/* SET THE CYLINDER TO WRITE   */
         MVC   BUFCH(2),DEBSTRCC(DEBDAPTR)                         0899
*                 BUFCH(3:4)=DEBSTRHH;/* SET HEAD FIELD FOR WRITE    */
         MVC   BUFCH+2(2),DEBSTRHH(DEBDAPTR)                       0900
*                 BUFCR='01'X;      /* RECORD ONE                    */
         MVI   BUFCR,X'01'                                         0901
*                 SRECNU='00'X;     /* SEARCH RECORD ZERO            */
         MVI   SRECNU,X'00'                                        0902
*                 R1=ADDR(WRITECCW);/* REG 1 POINTS TO THE WRITE CCW
*                                      CHAIN                         */
         LA    R1,WRITECCW                                         0903
*                 CALL SDIEXCP;     /* WRITE EOF                     */
         BAL   @14,SDIEXCP                                         0904
*                 CNT2=CNT1;        /* SAVE CNT1 FOR ERROR ON IO     */
         LR    CNT2,CNT1                                           0905
*                 CNT1=CNT3;        /* RESET CNT1                    */
         SLR   CNT1,CNT1                                           0906
         IC    CNT1,CNT3                                           0906
*                 IF ECBCC^='7F'X   /* DID AN IO ERROR OCCUR WHILE 0907
*                                      WRITING THE EOF               */
*                   THEN            /* YES-TAKE IT OUT OF THE RTCT   */
         L     @15,ECBPTR                                          0907
         CLI   ECBCC(@15),X'7F'                                    0907
         BE    @RF00907                                            0907
*                   DO;                                            0908
*                     NSDEV=RTCTDSNM(CNT2);/* PUT DEVICE NUMBER IN 0909
*                                      MSG IEA880I                   */
         LR    @15,CNT2                                            0909
         MH    @15,@CH01192                                        0909
         L     @11,CVTRTMCT(,RCVT)                                 0909
         ALR   @11,@15                                             0909
         MVC   NSDEV(3),RTCTDSNM-12(@11)                           0909
*                     RPARM=ADDR(SDIIOB);                          0910
         LA    RPARM,SDIIOB                                        0910
*                     GENERATE REFS(RNVT,NVTSENSE,RPARM,SDIIOB) SETS(
*                         RPARM,R14,R15);                          0911
*                                                                  0911
     IEAPMNIP TYPE=SENSE,PARAM=RPARM
     IEAPMNIP TYPE=WTO,PARAM=MSG02
*                     /***********************************************/
*                     /*                                             */
*                     /* BECAUSE AN ERROR OCCURRED ON THIS DEVICE IT */
*                     /* IS REMOVED FROM THE DUMP DATA SET TABLE     */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0912
*                     RFY                                          0912
*                      (R0,                                        0912
*                       R1,                                        0912
*                       RPARM,                                     0912
*                       RNVT,                                      0912
*                       R14) UNRSTD;/* RELEASE REGS 0,1,2,14         */
*                     CNT3=CNT2;    /* COUNT 2 CONTAINS THE INDEX  0913
*                                      VALUE FOR THE ENTRY IN ERR    */
         STC   CNT2,CNT3                                           0913
*                     CNT2=CNT2+1;  /* INDEX FOR NEXT ENTRY IN THE 0914
*                                      DUMP DATA SET TABLE           */
         LA    CNT2,1(,CNT2)                                       0914
*                     DO WHILE(CNT2^=CNT1);/* COMPRESS THE TABLE     */
         B     @DE00915                                            0915
@DL00915 DS    0H                                                  0916
*                       RTCTSDDS(CNT3)=RTCTSDDS(CNT2);/* MOVE THE  0916
*                                      NEXT ENTRY BACK ONE           */
         LA    @11,12                                              0916
         SLR   @01,@01                                             0916
         IC    @01,CNT3                                            0916
         MR    @00,@11                                             0916
         L     @02,CVTRTMCT(,RCVT)                                 0916
         ALR   @01,@02                                             0916
         LR    @09,@11                                             0916
         MR    @08,CNT2                                            0916
         ALR   @02,@09                                             0916
         MVC   @TS00001(12),RTCTSDDS-12(@02)                       0916
         MVC   RTCTSDDS-12(12,@01),@TS00001                        0916
*                       CNT3=CNT2;  /* INDEX FOR NEXT MOVE           */
         STC   CNT2,CNT3                                           0917
*                       CNT2=CNT2+1;                               0918
         LA    CNT2,1(,CNT2)                                       0918
*                     END;                                         0919
@DE00915 CR    CNT2,CNT1                                           0919
         BNE   @DL00915                                            0919
*                     CNT1=CNT3;    /* SET CNT1 TO NEXT AVAILABLE  0920
*                                      ENTRY IN THE TABLE            */
         SLR   CNT1,CNT1                                           0920
         IC    CNT1,CNT3                                           0920
*                     RTCTSDDS(CNT1)=''B;/* CLEAR TO ZERO            */
         LR    @11,CNT1                                            0921
         MH    @11,@CH01192                                        0921
         L     @06,CVTRTMCT(,RCVT)                                 0921
         ALR   @11,@06                                             0921
         XC    RTCTSDDS-12(12,@11),RTCTSDDS-12(@11)                0921
*                     IF CNT1=1     /* WAS THE ONLY ENTRY IN THE   0922
*                                      TABLE REMOVED ?               */
*                       THEN        /* YES                           */
         C     CNT1,@CF00055                                       0922
         BNE   @RF00922                                            0922
*                       RTCTSDNO='1'B;/* INDICATE NO DATA SETS IN THE
*                                      TABLE                         */
         OI    RTCTSDNO(@06),B'10000000'                           0923
*                     RFY                                          0924
*                      (R0,                                        0924
*                       R1,                                        0924
*                       RPARM,                                     0924
*                       RNVT,                                      0924
*                       R14) RSTD;                                 0924
@RF00922 DS    0H                                                  0925
*                     RNVT=SAVNVTAD;/* RESTORE NVT ADD               */
         L     RNVT,SAVNVTAD(,R5)                                  0925
*                   END;                                           0926
*               END;                                               0927
@RF00907 DS    0H                                                  0928
*           END;                    /* END OF DO WHILE DUMPF IS 0    */
@RC00886 DS    0H                                                  0928
@DE00881 TM    DUMPF(R5),B'00000001'                               0928
         BZ    @DL00881                                            0928
*           DUMPF='0'B;             /* RESET DUMPF                   */
         NI    DUMPF(R5),B'11111110'                               0929
*           RFY                                                    0930
*             R4 UNRSTD;                                           0930
*         END;                                                     0931
*       IF DUMPT='1'B               /* ANY TAPE TO BE ADDED ?        */
*         THEN                      /* YES                           */
@RF00877 TM    DUMPT(R5),B'00010000'                               0932
         BNO   @RF00932                                            0932
*         DO;                                                      0933
*           IF CNT1>10              /* TEN ALREADY IN TABLE?         */
*             THEN                  /* INDICATE FINISHED             */
         C     CNT1,@CF01260                                       0934
         BNH   @RF00934                                            0934
*             DUMPF='1'B;                                          0935
         OI    DUMPF(R5),B'00000001'                               0935
*           DO WHILE(DUMPF='0'B);   /* PROCESS TAPES UNTIL DUMP DATA
*                                      SET TABLE IS FULL OR NO MORE
*                                      TAPES                         */
@RF00934 B     @DE00936                                            0936
@DL00936 DS    0H                                                  0937
*             CALL SDITAPE;         /* PROCESS NEXT TAPE DEVICE      */
         BAL   @14,SDITAPE                                         0937
*           END;                                                   0938
@DE00936 TM    DUMPF(R5),B'00000001'                               0938
         BZ    @DL00936                                            0938
*         END;                                                     0939
*       CALL CHECKTBL;              /* CHECK DUMP DATA SET TABLE     */
@RF00932 BAL   @14,CHECKTBL                                        0940
*     END;                                                         0941
*   R13=SVER13;                     /* RESTORE REG SAVE PTR          */
@RF00720 L     R13,SVER13(,R5)                                     0942
*   CVTSDBF=CVTSDBF&'7FFFFFFF'X;    /* TURN OFF DUMP IN PROGRESS     */
         L     @15,CVTSDBF(,RCVT)                                  0943
         N     @15,@CF03808                                        0943
         ST    @15,CVTSDBF(,RCVT)                                  0943
*   RETURN CODE(0);                 /* RETURN TO INVOKER             */
         SLR   @15,@15                                             0944
         L     @14,12(,@13)                                        0944
         LM    @00,@12,20(@13)                                     0944
         BR    @14                                                 0944
*TACHECK:                                                          0945
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0945
*                                                                  0945
TACHECK  DS    0H                                                  0946
*   /*****************************************************************/
*   /*                                                               */
*   /* IT HAS BEEN DETERMINED THAT THE CURRENT CHARACTER IS A-T-     */
*   /* PRECEDED BY A -(- AND IT MUST BE FOLLOWED BY -A,XXX)- WHERE   */
*   /* XXX IS A TAPE DEVICE ADDRESS ANY NUMBER OF ADDRESSES ARE      */
*   /* ALLOWED SEPERATED BY COMMA THE LAST XXX IS FOLLOWED BY A RIGHT*/
*   /* PAREN AFTER THE RIGHT PAREN THERE MUST BE A-COMMA OR ANOTHER  */
*   /* RIGHT PAREN OR THE END OF DATA-IF ANY OF THE RULES ARE        */
*   /* VIOLATED THE CURRENT POINTER IS SET TO THE ENDCOL FORCING AN  */
*   /* EXIT FROM THE DO WHILE WITH THE VALIDSW OFF SO THAT THE       */
*   /* OPERATOR CAN BE PROMPTED                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0946
*   INTRET2=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,INTRET2(,R5)                                    0946
*   SCANBEG=CURRENT;                /* SCANBEG POINTS TO THE CURRENT
*                                      ENTRY                         */
         L     @15,CURRENT(,R5)                                    0947
         ST    @15,SCANBEG(,R5)                                    0947
*   DO WHILE(CURRENT^=ENDCOL&CURCHAR^=')');/* FIND END               */
         B     @DE00948                                            0948
@DL00948 DS    0H                                                  0949
*     CURRENT=CURRENT+1;                                           0949
         LA    @15,1                                               0949
         AL    @15,CURRENT(,R5)                                    0949
         ST    @15,CURRENT(,R5)                                    0949
*   END;                                                           0950
@DE00948 L     @15,CURRENT(,R5)                                    0950
         C     @15,ENDCOL(,R5)                                     0950
         BE    @DC00948                                            0950
         CLI   CURCHAR(@15),C')'                                   0950
         BNE   @DL00948                                            0950
@DC00948 DS    0H                                                  0951
*   IF(CURRENT-SCANBEG)<6 THEN      /* INVALID SIZE                  */
         L     @15,CURRENT(,R5)                                    0951
         SL    @15,SCANBEG(,R5)                                    0951
         C     @15,@CF00152                                        0951
         BNL   @RF00951                                            0951
*     CURRENT=ENDCOL;                                              0952
         L     @15,ENDCOL(,R5)                                     0952
         ST    @15,CURRENT(,R5)                                    0952
*   ELSE                                                           0953
*     DO;                                                          0953
         B     @RC00951                                            0953
@RF00951 DS    0H                                                  0954
*       IF FIRST3^='TA,'            /* TA OKAY?                      */
*         THEN                      /* INVALID                       */
         L     @15,SCANBEG(,R5)                                    0954
         CLC   FIRST3(3,@15),@CC03812                              0954
         BE    @RF00954                                            0954
*         CURRENT=ENDCOL;                                          0955
         L     @15,ENDCOL(,R5)                                     0955
         ST    @15,CURRENT(,R5)                                    0955
*     END;                                                         0956
@RF00954 DS    0H                                                  0957
*   IF CURRENT=ENDCOL               /* VALID SO FAR ?                */
*     THEN                                                         0957
@RC00951 CLC   CURRENT(4,R5),ENDCOL(R5)                            0957
         BE    @RT00957                                            0957
*     ;                             /* NO                            */
*   ELSE                            /* YES                           */
*     DO;                                                          0959
*       CURRENT=CURRENT+1;          /* SET TO CHAR FOLLOWING THE   0960
*                                      PAREN                         */
         LA    @15,1                                               0960
         AL    @15,CURRENT(,R5)                                    0960
         ST    @15,CURRENT(,R5)                                    0960
*       IF(CURCHAR^=''''&           /* IS IT A QUOTE OR              */
*           CURCHAR^=')'&           /* ANOTHER PAREN OR              */
*           CURCHAR^=',')           /* A COMMA                       */
*         THEN                      /* NOT A VALID SEQUENCE          */
         CLI   CURCHAR(@15),C''''                                  0961
         BE    @RF00961                                            0961
         CLI   CURCHAR(@15),C')'                                   0961
         BE    @RF00961                                            0961
         CLI   CURCHAR(@15),C','                                   0961
         BE    @RF00961                                            0961
*         CURRENT=ENDCOL;                                          0962
         L     @15,ENDCOL(,R5)                                     0962
         ST    @15,CURRENT(,R5)                                    0962
*       ELSE                                                       0963
*         DO;                       /* COMMA PAREN OR QUOTE IS VALID */
         B     @RC00961                                            0963
@RF00961 DS    0H                                                  0964
*           SCANBEG=SCANBEG+3;                                     0964
         LA    @15,3                                               0964
         AL    @15,SCANBEG(,R5)                                    0964
         ST    @15,SCANBEG(,R5)                                    0964
*           DO WHILE(SCANBEG^=CURRENT);                            0965
         B     @DE00965                                            0965
@DL00965 DS    0H                                                  0966
*             IF LASTCHAR^=')'&LASTCHAR^=',' THEN/* ADDRESS IS NOT 0966
*                                      FOLLOWED BY A PROPER DELIMITER*/
         L     @15,SCANBEG(,R5)                                    0966
         CLI   LASTCHAR(@15),C')'                                  0966
         BE    @RF00966                                            0966
         CLI   LASTCHAR(@15),C','                                  0966
         BE    @RF00966                                            0966
*               VALIDSW='0'B;                                      0967
         NI    VALIDSW(R5),B'11111101'                             0967
*             ELSE                  /* DELIMITER IS OK               */
*               DO;                                                0968
         B     @RC00966                                            0968
@RF00966 DS    0H                                                  0969
*                 VALIDSW='1'B;                                    0969
*                 DUMPT='1'B;                                      0970
         OI    VALIDSW(R5),B'00010010'                             0970
*                 CALL TAPEINIT;    /* PUT DEV ON DEV Q              */
         BAL   @14,TAPEINIT                                        0971
*                 IF VALIDSW='1'B   /* STILL VALID ?                 */
*                   THEN            /* YES                           */
         TM    VALIDSW(R5),B'00000010'                             0972
         BNO   @RF00972                                            0972
*                   DO;                                            0973
*                     IF LASTCHAR=')'/* LAST ONE PROCESSED           */
*                       THEN        /* YES                           */
         L     @15,SCANBEG(,R5)                                    0974
         CLI   LASTCHAR(@15),C')'                                  0974
         BNE   @RF00974                                            0974
*                       SCANBEG=CURRENT;                           0975
         L     @15,CURRENT(,R5)                                    0975
         ST    @15,SCANBEG(,R5)                                    0975
*                     ELSE          /* MORE YET TO PROCESS           */
*                       DO;                                        0976
         B     @RC00974                                            0976
@RF00974 DS    0H                                                  0977
*                         SCANBEG=SCANBEG+4;                       0977
         LA    @15,4                                               0977
         L     @11,SCANBEG(,R5)                                    0977
         ALR   @11,@15                                             0977
         ST    @11,SCANBEG(,R5)                                    0977
*                         IF(SCANBEG+4)>CURRENT/* VALID SYNTAX       */
*                           THEN    /* NO                            */
*                                                                  0978
         ALR   @11,@15                                             0978
         C     @11,CURRENT(,R5)                                    0978
         BNH   @RF00978                                            0978
*                           /*****************************************/
*                           /*                                       */
*                           /* THE PAREN FOUND EARLIER WAS IN THE    */
*                           /* WRONG PLACE IN ORDER TO OVERRUN THE   */
*                           /* CURRENT PTR                           */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0979
*                           DO;                                    0979
*                             VALIDSW='0'B;                        0980
         NI    VALIDSW(R5),B'11111101'                             0980
*                           END;                                   0981
*                       END;                                       0982
@RF00978 DS    0H                                                  0983
*                   END;                                           0983
@RC00974 DS    0H                                                  0984
*               END;                                               0984
@RF00972 DS    0H                                                  0985
*             IF VALIDSW='0'B       /* IF INVALID GET OUT            */
*               THEN                                               0985
@RC00966 TM    VALIDSW(R5),B'00000010'                             0985
         BNZ   @RF00985                                            0985
*               DO;                                                0986
*                 CURRENT=ENDCOL;                                  0987
         L     @15,ENDCOL(,R5)                                     0987
         ST    @15,CURRENT(,R5)                                    0987
*                 SCANBEG=CURRENT;                                 0988
         ST    @15,SCANBEG(,R5)                                    0988
*               END;                                               0989
*           END;                                                   0990
@RF00985 DS    0H                                                  0990
@DE00965 CLC   SCANBEG(4,R5),CURRENT(R5)                           0990
         BNE   @DL00965                                            0990
*         END;                                                     0991
*     END;                                                         0992
@RC00961 DS    0H                                                  0993
*   R14=INTRET2;                    /* RESTORE RETURN ADDRESS        */
@RT00957 L     R14,INTRET2(,R5)                                    0993
*   RETURN;                                                        0994
@EL00002 DS    0H                                                  0994
@EF00002 DS    0H                                                  0994
@ER00002 BR    @14                                                 0994
*   END TACHECK;                                                   0995
*DASDINIT:                                                         0996
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0996
*                                                                  0996
DASDINIT DS    0H                                                  0997
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS ENTERED TO PLACE THE DASD DEVICES ON A DEVICE */
*   /* ENTRY QUEUE-THE Q IS BUILT TO MAINTAIN THE DEVICES SPECIFIED  */
*   /* IN THE SEQUENCE SPECIFIED BY THE OPERATOR.THIS ROUTINE IS     */
*   /* ENTERED ONLY ONCE. BEFORE THIS ROUTINE IS CALLED A CHECK MUST */
*   /* BE MADE-IF ENTDASD = 1 B THEN BYPASS THE CALL OTHERWISE TURN  */
*   /* THE BIT ON AND ISSUE THE CALL                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0997
*   RFY                                                            0997
*     R4 RSTD;                                                     0997
*   R4=RQUEADD;                     /* THE Q IS BUILT IN THE 4K SQA
*                                      BUFFER AND RQUEADD POINTS TO
*                                      THE FIRST ELEMENT ON THE Q OR
*                                      IS 0                          */
         L     R4,RQUEADD(,R5)                                     0998
*   IF R4=0                         /* ANYTHING ON Q                 */
*     THEN                          /* NO                            */
         LTR   R4,R4                                               0999
         BNZ   @RF00999                                            0999
*     DO;                                                          1000
*       R4=ADDR(QBEGIN);            /* START AT Q BEGIN              */
         LA    R4,QBEGIN(,R5)                                      1001
*       RQUEADD=R4;                 /* POINT TO FIRST ELEMENT        */
         ST    R4,RQUEADD(,R5)                                     1002
*     END;                                                         1003
*   ELSE                                                           1004
*     DO;                                                          1004
         B     @RC00999                                            1004
@RF00999 DS    0H                                                  1005
*       DO WHILE(NXTENTAD^=0);      /* FIND THE END OF Q             */
         B     @DE01005                                            1005
@DL01005 DS    0H                                                  1006
*         R4=NXTENTAD;              /* POINT TO NEXT ELEMENT         */
         L     R4,NXTENTAD(,R4)                                    1006
*       END;                        /* END OF DO WHILE               */
@DE01005 L     @15,NXTENTAD(,R4)                                   1007
         LTR   @15,@15                                             1007
         BNZ   @DL01005                                            1007
*       NXTENTAD=R4+LENGTH(DVICERQT);/* Q IS BUILT SO THAT EACH    1008
*                                      ELEMENT IMMEDIATELY FOLLOWS IN
*                                      THE NEXT CORE LOCATION        */
         LA    @15,8                                               1008
         ALR   @15,R4                                              1008
         ST    @15,NXTENTAD(,R4)                                   1008
*       R4=NXTENTAD;                /* SET ADDRESS FOR NEXT ELEMENT  */
         LR    R4,@15                                              1009
*     END;                                                         1010
*   CNT1=0;                         /* START COUNT AT 0              */
@RC00999 SLR   CNT1,CNT1                                           1011
*   DO WHILE(DUMPF='0'B);           /* DO LOOP UNTIL 10 ENTRIES    1012
*                                      PLACED ON THE Q               */
         B     @DE01012                                            1012
@DL01012 DS    0H                                                  1013
*     DVICERQT=DVICERQT&&DVICERQT;  /* CLEAR ENTRY TO 0              */
         XC    DVICERQT(8,R4),DVICERQT(R4)                         1013
*     FLAG1='80'X;                  /* INDICATE DASD                 */
         MVI   FLAG1(R4),X'80'                                     1014
*     DVNAME='00 ';                 /* INITIALIZE NAME TO 00 BLANK   */
         MVC   DVNAME(3,R4),@CC03818                               1015
*     DCHAR2=DCHAR2×CNT1;           /* THE SECOND CHAR IN THE NAME 1016
*                                      FIELD IS CHANGED TO THE     1016
*                                      SPECIFIC SYS1.DUMP DATA SET 1016
*                                      IE- FOR DEVICE SYS1.DUMP 08 1016
*                                      THE NAME FIELD IS SET TO    1016
*                                      00(BLANK) THE AN 8 IS ORED TO
*                                      THE SECOND CHARACTER TO MAKE
*                                      IT A 08(BLANK)                */
         SLR   @15,@15                                             1016
         IC    @15,DCHAR2(,R4)                                     1016
         OR    @15,CNT1                                            1016
         STC   @15,DCHAR2(,R4)                                     1016
*     IF CNT1='09'X                 /* ALL TEN DEVICES DONE ?        */
*       THEN                        /* YES                           */
         C     CNT1,@CF03792                                       1017
         BNE   @RF01017                                            1017
*       DUMPF='1'B;                 /* INDICATE FINISHED             */
         OI    DUMPF(R5),B'00000001'                               1018
*     ELSE                                                         1019
*       DO;                                                        1019
         B     @RC01017                                            1019
@RF01017 DS    0H                                                  1020
*         NXTENTAD=R4+LENGTH(DVICERQT);/* POINT TO NEXT ENTRY        */
         LA    @15,8                                               1020
         ALR   @15,R4                                              1020
         ST    @15,NXTENTAD(,R4)                                   1020
*         R4=NXTENTAD;                                             1021
         LR    R4,@15                                              1021
*         CNT1=CNT1+1;              /* UP COUNT BY 1                 */
         LA    CNT1,1(,CNT1)                                       1022
*       END;                                                       1023
*   END;                                                           1024
@RC01017 DS    0H                                                  1024
@DE01012 TM    DUMPF(R5),B'00000001'                               1024
         BZ    @DL01012                                            1024
*   DUMPF='0'B;                     /* RESET FINISHED SWITCH         */
         NI    DUMPF(R5),B'11111110'                               1025
*   RETURN;                         /* RETURN TO INVOKER             */
@EL00003 DS    0H                                                  1026
@EF00003 DS    0H                                                  1026
@ER00003 BR    @14                                                 1026
*   RFY                                                            1027
*     R4 UNRSTD;                                                   1027
*   END DASDINIT;                                                  1028
*TAPEINIT:                                                         1029
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1029
*                                                                  1029
TAPEINIT DS    0H                                                  1030
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS PROCEDURE IS ENTERED TO PLACE A TAPE DEVICE ADDRESS ON   */
*   /* THE DEVICE Q- WHENEVER A TA, HAS BEEN FOUND BY THE SCAN       */
*   /* ROUTINES THIS ROUTINE IS INVOKED WITH THE POINTER CALLED      */
*   /* SCANBEG POINTING TO THE XXX OF TA,XXX WHERE XXX IS THE DEVICE */
*   /* ADDRESS THIS ROUTINE INSURES THAT THE DEVICE HAS NOT BEEN     */
*   /* SPECIFIED TWICE IF IT HAS THE REPROSS BIT IS INTERROGATED IT  */
*   /* MEANS THAT AN ERROR WAS ENCOUNTERED ON THIS DEVICE PREVIOUSLY */
*   /* AND THE OPERATOR WISHES TO RETRY IF THE REPROSS BIT IS OFF THE*/
*   /* VALIDSW IS TURNED OFF AND THE INVOKER IS RETURNED TO          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1030
*   RFY                                                            1030
*     R4 RSTD;                                                     1030
*   R4=RQUEADD;                     /* GET BEGINNING ADDRESS OF Q    */
         L     R4,RQUEADD(,R5)                                     1031
*   IF R4=0                         /* ANY Q                         */
*     THEN                          /* NO                            */
         LTR   R4,R4                                               1032
         BNZ   @RF01032                                            1032
*     DO;                                                          1033
*       R4=ADDR(QBEGIN);                                           1034
         LA    R4,QBEGIN(,R5)                                      1034
*       RQUEADD=R4;                                                1035
         ST    R4,RQUEADD(,R5)                                     1035
*       DVICERQT=DVICERQT&&DVICERQT;                               1036
         XC    DVICERQT(8,R4),DVICERQT(R4)                         1036
*       DVNAME=FIRST3;                                             1037
         L     @15,SCANBEG(,R5)                                    1037
         MVC   DVNAME(3,R4),FIRST3(@15)                            1037
*     END;                                                         1038
*   ELSE                            /* THERE IS A Q                  */
*     DO;                                                          1039
         B     @RC01032                                            1039
@RF01032 DS    0H                                                  1040
*       DO WHILE(R4^=0);            /* SCAN Q FOR THIS DEVICE        */
         B     @DE01040                                            1040
@DL01040 DS    0H                                                  1041
*         QSAVE=R4;                 /* SAVE ADDRESS                  */
         ST    R4,QSAVE(,R5)                                       1041
*         IF DVNAME=FIRST3&REPROCSS='0'B/* VALID RESPECIFY?          */
*           THEN                    /* NO CAN NOT BE ALLOWED TWICE   */
         L     @15,SCANBEG(,R5)                                    1042
         CLC   DVNAME(3,R4),FIRST3(@15)                            1042
         BNE   @RF01042                                            1042
         TM    REPROCSS(R4),B'00100000'                            1042
         BNZ   @RF01042                                            1042
*           DO;                                                    1043
*             VALIDSW='0'B;                                        1044
         NI    VALIDSW(R5),B'11111101'                             1044
*             R4=0;                                                1045
         SLR   R4,R4                                               1045
*           END;                                                   1046
*         ELSE                                                     1047
*           R4=NXTENTAD;            /* GET NEXT ADDRESS              */
         B     @RC01042                                            1047
@RF01042 L     R4,NXTENTAD(,R4)                                    1047
*       END;                                                       1048
@RC01042 DS    0H                                                  1048
@DE01040 LTR   R4,R4                                               1048
         BNZ   @DL01040                                            1048
*       IF VALIDSW='1'B             /* WAS DEVICE ALREADY ON Q       */
*         THEN                      /* NO                            */
         TM    VALIDSW(R5),B'00000010'                             1049
         BNO   @RF01049                                            1049
*         DO;                                                      1050
*           R4=QSAVE;                                              1051
         L     R4,QSAVE(,R5)                                       1051
*           NXTENTAD=R4+LENGTH(DVICERQT);                          1052
         LA    @15,8                                               1052
         ALR   @15,R4                                              1052
         ST    @15,NXTENTAD(,R4)                                   1052
*           R4=NXTENTAD;                                           1053
         LR    R4,@15                                              1053
*           DVICERQT=DVICERQT&&DVICERQT;                           1054
         XC    DVICERQT(8,R4),DVICERQT(R4)                         1054
*           DVNAME=FIRST3;                                         1055
         L     @15,SCANBEG(,R5)                                    1055
         MVC   DVNAME(3,R4),FIRST3(@15)                            1055
*         END;                                                     1056
*     END;                                                         1057
*   RETURN;                         /* RETURN TO INVOKER             */
@EL00004 DS    0H                                                  1058
@EF00004 DS    0H                                                  1058
@ER00004 BR    @14                                                 1058
*   RFY                                                            1059
*     R4 UNRSTD;                                                   1059
*   END TAPEINIT;                                                  1060
         B     @EL00004                                            1060
*CHECKTBL:                                                         1061
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1061
*                                                                  1061
CHECKTBL DS    0H                                                  1062
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS PROCEDURE IS ENTERED TO DETERMINE IF THERE ARE ANY       */
*   /* ELEMENTS ON THE DEVICE QUEUE THAT HAVE NOT BEEN PROCESSED. IF */
*   /* THIS IS TRUE THEN THE DATA SET TABLE HAS TEN ENTRIES,AND MORE */
*   /* HAVE BEEN SPECIFIED THAN CAN BE PROCESSED---THEN ISSUE MESSAGE*/
*   /* IEA881I. IF DASD HAS BEEN SPECIFIED AND NO DASD DEVICES HAVE  */
*   /* BEEN ACCEPTED THEN ISSUE MESSAGE IEA878I.                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1062
*   RFY                                                            1062
*    (R4,                                                          1062
*     R6) RSTD;                                                    1062
*   QSAVE=ADDR(RQUEADD);            /* INIT QSAVE PTR TO TRUNCATE Q  */
         LA    @15,RQUEADD(,R5)                                    1063
         ST    @15,QSAVE(,R5)                                      1063
*   R4=RQUEADD;                     /* GET BEGINNING OF Q            */
         L     R4,RQUEADD(,R5)                                     1064
*   R6=R14;                         /* SAVE RETURN ADDRESS           */
         LR    R6,R14                                              1065
*   DO WHILE(R4^=0);                                               1066
         B     @DE01066                                            1066
@DL01066 DS    0H                                                  1067
*     IF DPROCSD='0'B               /* HAS THIS BEEN PROCESSED ?     */
*       THEN                        /* NO                            */
         TM    DPROCSD(R4),B'01000000'                             1067
         BNZ   @RF01067                                            1067
*       DO;                         /* ISSUE TOO MANY DEVICES MSG    */
*         GEN REFS(MSG03,RPARM,R14,R15,RNVT)                       1069
*             ( IEAPMNIP TYPE=WTO,PARAM=MSG03);                    1069
          IEAPMNIP TYPE=WTO,PARAM=MSG03
*         R4=0;                     /* SET POINTER TO 0              */
         SLR   R4,R4                                               1070
*       END;                                                       1071
*     ELSE                          /* IT HAS BEEN PROCESSED         */
*       DO;                                                        1072
         B     @RC01067                                            1072
@RF01067 DS    0H                                                  1073
*         QSAVE=R4;                 /* SAVE QPTR                     */
         ST    R4,QSAVE(,R5)                                       1073
*         R4=NXTENTAD;              /* GET NEXT BLOCK TO CHECK       */
         L     R4,NXTENTAD(,R4)                                    1074
*       END;                                                       1075
*   END;                                                           1076
@RC01067 DS    0H                                                  1076
@DE01066 SLR   @15,@15                                             1076
         CR    R4,@15                                              1076
         BNE   @DL01066                                            1076
*   QSAVE->NXTENTAD=0;              /* IGNORE DEVICES NOT PROCESSED  */
         L     @11,QSAVE(,R5)                                      1077
         ST    @15,NXTENTAD(,@11)                                  1077
*   IF DUMPD='1'B                   /* WAS DASD SPECIFIED ?          */
*     THEN                          /* YES                           */
         TM    DUMPD(R5),B'00100000'                               1078
         BNO   @RF01078                                            1078
*     DO;                           /* DETERMINE IF ANY DASD HAVE  1079
*                                      BEEN PLACED IN THE DEVICE   1079
*                                      TABLE                         */
*       CNT3=1;                     /* SET INDEX TO FIRST ENTRY OF 1080
*                                      TABLE                         */
         MVI   CNT3,X'01'                                          1080
*       DO WHILE(CNT3^=CNT1);       /* DO UNTIL THE LAST ENTRY HAS 1081
*                                      BEEN INTERROGATED             */
         B     @DE01081                                            1081
@DL01081 DS    0H                                                  1082
*         IF RTCTDETP(CNT3)='1'B    /* IS IT A DASD DEVICE           */
*           THEN                    /* YES                           */
         SLR   @15,@15                                             1082
         IC    @15,CNT3                                            1082
         MH    @15,@CH01192                                        1082
         L     @11,CVTRTMCT(,RCVT)                                 1082
         ALR   @11,@15                                             1082
         TM    RTCTDETP-12(@11),B'00100000'                        1082
         BNO   @RF01082                                            1082
*           DO;                                                    1083
*             DUMPD='0'B;           /* SHOW DASD FOUND IN RTCT       */
         NI    DUMPD(R5),B'11011111'                               1084
*             CNT3=CNT1;            /* FORCE LOOP EXIT               */
         STC   CNT1,CNT3                                           1085
*           END;                                                   1086
*         ELSE                      /* NOT A DASD DEVICE             */
*           DO;                                                    1087
         B     @RC01082                                            1087
@RF01082 DS    0H                                                  1088
*             CNT3=CNT3+1;          /* GET NEXT ENTRY                */
         IC    @15,CNT3                                            1088
         LA    @15,1(,@15)                                         1088
         STC   @15,CNT3                                            1088
*           END;                                                   1089
*       END;                        /* END OF DO WHILE               */
@RC01082 DS    0H                                                  1090
@DE01081 SLR   @15,@15                                             1090
         IC    @15,CNT3                                            1090
         CR    CNT1,@15                                            1090
         BNE   @DL01081                                            1090
*       IF DUMPD='1'B               /* DASD SPEC BUT NONE ARE      1091
*                                      AVAILABLE                     */
*         THEN                      /* YES                           */
         TM    DUMPD(R5),B'00100000'                               1091
         BNO   @RF01091                                            1091
*         DO;                       /* WRITE NO DASD MSG             */
*           GENERATE REFS(MSG07) SETS(RPARM,R14,R15);              1093
      IEAPMNIP TYPE=WTO,PARAM=MSG07
*         END;                                                     1094
*     END;                                                         1095
@RF01091 DS    0H                                                  1096
*   R14=R6;                         /* RESTORE RETURN ADDRESS        */
@RF01078 LR    R14,R6                                              1096
*   RETURN;                                                        1097
@EL00005 DS    0H                                                  1097
@EF00005 DS    0H                                                  1097
@ER00005 BR    @14                                                 1097
*   RFY                                                            1098
*    (R4,                                                          1098
*     R6) UNRSTD;                                                  1098
*   END CHECKTBL;                                                  1099
*SDIEXCP:                                                          1100
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1100
*                                                                  1100
SDIEXCP  DS    0H                                                  1101
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS ENTERED TO BUILD AN IOB AND ISSUE EXCP REG 1  */
*   /* POINTS TO A CCW CHAIN TO BE EXECUTED UPON ENTRY THE INVOKER OF*/
*   /* THIS ROUTINE IS RESPONSIBLE FOR CHECKING FOR PROPER COMPLETION*/
*   /* OF THE IO OPERATION                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1101
*   INTRETAD=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,INTRETAD(,R5)                                   1101
*   SDIIOB=''B;                     /* CLEAR IOB AREA                */
         XC    SDIIOB(40),SDIIOB                                   1102
*   IOBFLAG1='42'X;                 /* CMD CHAIN AND UNRELATED       */
         L     @15,IOBSTPTR                                        1103
         MVI   IOBFLAG1(@15),X'42'                                 1103
*   IOBECBPT=ADDR(EXCPECB);         /* SET ECB ADDRESS               */
         LA    @11,EXCPECB                                         1104
         ST    @11,IOBECBPT(,@15)                                  1104
*   EXCPECB=EXCPECB&&EXCPECB;       /* 0 ECB                         */
         XC    EXCPECB(4),EXCPECB                                  1105
*   IOBSTART=RPARM;                 /* SET ADDRESS OF CCW STRING     */
         ST    RPARM,IOBSTART(,@15)                                1106
*   IOBDCBPT=ADDR(RTCTDCB(CNT1))-44;/* SET DUMMY DCB ADDRESS TO DEB
*                                      PTR MINUS THE OFFSET OF THE 1107
*                                      DEB FIELD OF THE DCB          */
         LR    @11,CNT1                                            1107
         MH    @11,@CH01192                                        1107
         L     @04,CVTRTMCT(,RCVT)                                 1107
         LA    @09,RTCTDCB-12(@11,@04)                             1107
         SL    @09,@CF00288                                        1107
         ST    @09,IOBDCBPT(,@15)                                  1107
*   DEBPTR=RTCTDCB(CNT1);           /* GET DEB ADDRESS               */
         L     @11,RTCTDCB-12(@11,@04)                             1108
         ST    @11,DEBPTR                                          1108
*   DEBDAPTR=ADDR(DEBBASND);        /* ADDR OF DEB EXTENSION         */
         LA    DEBDAPTR,DEBBASND(,@11)                             1109
*   SRCCHH(1:2)=DEBSTRCC;           /* SEARCH -CC ADDRESS            */
         MVC   SRCCHH(2),DEBSTRCC(DEBDAPTR)                        1110
*   SRCCHH(3:4)=DEBSTRHH;           /* SEARCH -HH ADDRESS            */
         MVC   SRCCHH+2(2),DEBSTRHH(DEBDAPTR)                      1111
*   IOBCC=DEBSTRCC;                 /* SEEK ADDRESS -CC              */
         MVC   IOBCC(2,@15),DEBSTRCC(DEBDAPTR)                     1112
*   IOBHH=DEBSTRHH;                 /* SEEK ADDRESS -HH              */
         MVC   IOBHH(2,@15),DEBSTRHH(DEBDAPTR)                     1113
*   RPARM=ADDR(SDIIOB);             /* REG1 POINTS TO IOB FOR EXCP   */
         LA    RPARM,SDIIOB                                        1114
*   GENERATE REFS(RPARM,SDIIOB,EXCPECB) SETS(R0,RPARM,SDIIOB,SDIIOB);
      EXCP  (RPARM)
      WAIT  1,ECB=EXCPECB
*   R14=INTRETAD;                   /* RESTORE RETURN ADDRESS        */
         L     R14,INTRETAD(,R5)                                   1116
*   RETURN;                                                        1117
@EL00006 DS    0H                                                  1117
@EF00006 DS    0H                                                  1117
@ER00006 BR    @14                                                 1117
*   END SDIEXCP;                                                   1118
*SDITAPE:                                                          1119
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1119
*                                                                  1119
SDITAPE  DS    0H                                                  1120
*   /*****************************************************************/
*   /*                                                               */
*   /* IF ANY TAPE DEVICES HAVE BEEN PLACED ON THE DEVICE Q THIS     */
*   /* ROUTINE IS ENTERED.THIS ROUTINE WILL DETERMINE IF THE NEXT    */
*   /* DEVICE TO BE PROCESSED IS TAPE.IF IT IS TAPE IT WILL VALIDATE */
*   /* THE DEVICE TYPE AND STATUS.                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1120
*   RFY                                                            1120
*     R4 RSTD;                                                     1120
*   INTRETAD=R14;                                                  1121
         ST    R14,INTRETAD(,R5)                                   1121
*   SKIP='0'B;                      /* TURN OFF THE SKIP FLAG        */
         NI    SKIP(R5),B'01111111'                                1122
*   IF DUMPF='1'B                   /* HAVE 10 DEVICES BEEN ACCEPTED
*                                      OR HAVE ALL THE REQUESTED   1123
*                                      DEVICES BEEN PROCESSED        */
*     THEN                          /* YES                           */
         TM    DUMPF(R5),B'00000001'                               1123
         BNO   @RF01123                                            1123
*     DO;                                                          1124
*       SKIP='1'B;                                                 1125
         OI    SKIP(R5),B'10000000'                                1125
*     END;                                                         1126
*   ELSE                            /* NOT FINISHED YET              */
*     DO;                                                          1127
*                                                                  1127
         B     @RC01123                                            1127
@RF01123 DS    0H                                                  1128
*       /*************************************************************/
*       /*                                                           */
*       /* THIS SECTION NOW SCANS THE DEVICE QUEUE TO FIND THE NEXT  */
*       /* ENTRY TO BE PROCESSED.IF THE QUEUE IS EMPTY OR IF THE     */
*       /* ENTRY IS A DASD TYPE DEVICE THE TAPE PROCESSING IS        */
*       /* BYPASSED                                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  1128
*       R4=RQUEADD;                 /* ADDRESS OF FIRST ELEMENT ON 1128
*                                      THE DEVICE Q                  */
         L     R4,RQUEADD(,R5)                                     1128
*       DO WHILE(R4^=0&DPROCSD='1'B);/* FIND FIRST ENTRY THAT HAS NOT
*                                      BEEN PROCESSED                */
         B     @DE01129                                            1129
@DL01129 DS    0H                                                  1130
*         R4=NXTENTAD;              /* NEXT ENTRY ADDRESS            */
         L     R4,NXTENTAD(,R4)                                    1130
*       END;                                                       1131
@DE01129 LTR   R4,R4                                               1131
         BZ    @DC01129                                            1131
         TM    DPROCSD(R4),B'01000000'                             1131
         BO    @DL01129                                            1131
@DC01129 DS    0H                                                  1132
*       IF R4=0                     /* ANY LEFT TO PROCESS           */
*         THEN                                                     1132
         LTR   R4,R4                                               1132
         BNZ   @RF01132                                            1132
*         DO;                       /* NO                            */
*           DUMPF='1'B;                                            1134
         OI    DUMPF(R5),B'00000001'                               1134
*           SKIP='1'B;                                             1135
         OI    SKIP(R5),B'10000000'                                1135
*         END;                                                     1136
*       ELSE                                                       1137
*         DO;                                                      1137
         B     @RC01132                                            1137
@RF01132 DS    0H                                                  1138
*           IF DASDDV='1'B          /* IS IT A DASD DEVICE           */
*             THEN                  /* YES                           */
         TM    DASDDV(R4),B'10000000'                              1138
         BNO   @RF01138                                            1138
*             SKIP='1'B;                                           1139
         OI    SKIP(R5),B'10000000'                                1139
*           ELSE                                                   1140
*             DPROCSD='1'B;         /* INDICATE THIS DEV IS PROCESSED*/
         B     @RC01138                                            1140
@RF01138 OI    DPROCSD(R4),B'01000000'                             1140
*         END;                                                     1141
@RC01138 DS    0H                                                  1142
*     END;                                                         1142
@RC01132 DS    0H                                                  1143
*   IF SKIP='0'B                    /* IS A TAPE TO BE PROCESSED     */
*     THEN                          /* YES                           */
@RC01123 TM    SKIP(R5),B'10000000'                                1143
         BNZ   @RF01143                                            1143
*     DO;                                                          1144
*                                                                  1144
*       /*************************************************************/
*       /*                                                           */
*       /* THE TAPE DEVICE SPECIFIED BY THE OPERATOR IS NOW CHECKED  */
*       /* TO INSURE THAT IT DOES EXIST AND IT IS MOUNTED AND THAT IT*/
*       /* IS A SUPPORTED DEVICE TYPE - IF THE DEVICE IS VALID IT IS */
*       /* OPENED AND THE DEVICE IS PLACED IN THE DUMP DATA SET TABLE*/
*       /* REG4 UPON ENTRY POINTS TO THE DEVICE ENTRY ON THE DEVICE  */
*       /* QUEUE                                                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  1145
*       TNAME1=DVNAME;              /* PLACE NAME IN FIELD TO LOAD IN
*                                      REGISTER EBCDIC NAME IN HI 3
*                                      BYTES                         */
         MVI   TNAME1+3(R5),C' '                                   1145
         MVC   TNAME1(3,R5),DVNAME(R4)                             1145
*       RPARM=TNAME1;                                              1146
         L     RPARM,TNAME1(,R5)                                   1146
*       GEN REFS(RPARM) SETS(RPARM,R14,R15)                        1147
*           ( IEAPMNIP TYPE=UCBFN,PARAM=RPARM);                    1147
          IEAPMNIP TYPE=UCBFN,PARAM=RPARM
*       UCBPTR=RPARM;               /* UCB ADDRESS RETURNED IN RPARM */
         ST    RPARM,UCBPTR(,R5)                                   1148
*       IF UCBPTR=0×                /* IS THERE A UCB AND            */
*           UCB3TAPE^='1'B×         /* IS IT TAPE                    */
*           (UCBTBYT4^='03'X&       /* 3400 TYPE?                    */
*           UCBTBYT4^='01'X)        /* OR 2400 TYPE ?                */
*         THEN                      /* NO                            */
         L     @15,UCBPTR(,R5)                                     1149
         LTR   @15,@15                                             1149
         BZ    @RT01149                                            1149
         TM    UCB3TAPE(@15),B'10000000'                           1149
         BNO   @RT01149                                            1149
         CLI   UCBTBYT4(@15),X'03'                                 1149
         BE    @RF01149                                            1149
         CLI   UCBTBYT4(@15),X'01'                                 1149
         BE    @RF01149                                            1149
@RT01149 DS    0H                                                  1150
*         SKIP='1'B;                                               1150
         OI    SKIP(R5),B'10000000'                                1150
*       ELSE                                                       1151
*         DO;                                                      1151
         B     @RC01149                                            1151
@RF01149 DS    0H                                                  1152
*           RFY                                                    1152
*             R6 RSTD;                                             1152
*           R6=ADDR(MOUNTT);        /* GET ADDRESS OF TAPE MOUNT   1153
*                                      PARMLIST                      */
         LA    R6,MOUNTT                                           1153
*           R6->NMNTUCB=UCBPTR;     /* PUT UCB ADDRESS IN MOUNT PARM
*                                      AREA                          */
         L     @15,UCBPTR(,R5)                                     1154
         STCM  @15,15,NMNTUCB(R6)                                  1154
*           R6->MNTDEC1=UCBTBYT3;   /* SET DEVICE CODE FOR MOUNT     */
         MVC   MNTDEC1(1,R6),UCBTBYT3(@15)                         1155
*           R6->MNTDEC2=UCBTBYT4;                                  1156
         MVC   MNTDEC2(1,R6),UCBTBYT4(@15)                         1156
*           GEN REFS(RPARM,MOUNTT) SETS(RPARM,R14,R15);            1157
      IEAPMNIP TYPE=MOUNT,PARAM=MOUNTT,OPT=(LB,LC)
*           IF RPARM=0              /* MOUNT FAIL                    */
*             THEN                  /* YES                           */
         LTR   RPARM,RPARM                                         1158
         BNZ   @RF01158                                            1158
*             SKIP='1'B;                                           1159
         OI    SKIP(R5),B'10000000'                                1159
*           ELSE                    /* OKAY MOUNT PROCESS            */
*             DO;                   /* NOW ISSUE NIP OPEN            */
         B     @RC01158                                            1160
@RF01158 DS    0H                                                  1161
*               DSNAME=SYS1DUMP;    /* PLACE SYS1.DUMP IN NAME       */
         MVI   DSNAME+9,C' '                                       1161
         MVC   DSNAME+10(34),DSNAME+9                              1161
         MVC   DSNAME(9),@CC00283                                  1161
*               R6=ADDR(DMPOPN);                                   1162
         LA    R6,DMPOPN                                           1162
*               R6->NOPNDCB=ADDR(RTCTTDCB(9))-44;/* SET DUMMY DCB  1163
*                                      ADDRESS IN OPEN PARMS         */
         L     @15,CVTRTMCT(,RCVT)                                 1163
         LA    @15,RTCTTDCB+32(,@15)                               1163
         SL    @15,@CF00288                                        1163
         ST    @15,NOPNDCB(,R6)                                    1163
*               R6->NOPNUCB=UCBPTR; /* PLACE UCB ADDRESS IN OPEN PARM
*                                      LIST                          */
         L     @15,UCBPTR(,R5)                                     1164
         ST    @15,NOPNUCB(,R6)                                    1164
*               GEN REFS(DMPOPN) SETS(RPARM,R14,R15);              1165
      IEAPMNIP TYPE=OPEN,PARAM=DMPOPN,OPT=(NB,LB,LC,SX,,LI,,RS)
*               IF RPARM<0          /* OPEN FAIL IS INDICATED BY   1166
*                                      RPARM BEING NEGATIVE          */
*                 THEN                                             1166
         LTR   RPARM,RPARM                                         1166
         BNM   @RF01166                                            1166
*                 SKIP='1'B;                                       1167
         OI    SKIP(R5),B'10000000'                                1167
*             END;                                                 1168
@RF01166 DS    0H                                                  1169
*         END;                                                     1169
@RC01158 DS    0H                                                  1170
*       IF SKIP='0'B                /* CAN THE DEVICE BE PUT IN THE
*                                      DUMP DATA SET TABLE ?         */
*         THEN                                                     1170
@RC01149 TM    SKIP(R5),B'10000000'                                1170
         BNZ   @RF01170                                            1170
*         DO;                       /* YES                           */
*           RTCTDSNM(CNT1)=DVNAME;  /* PUT NAME IN TABLE             */
         LR    @15,CNT1                                            1172
         MH    @15,@CH01192                                        1172
         L     @11,CVTRTMCT(,RCVT)                                 1172
         ST    @15,@TF00001                                        1172
         ALR   @15,@11                                             1172
         MVC   RTCTDSNM-12(3,@15),DVNAME(R4)                       1172
*           RTCTFLG(CNT1)='00'X;    /* INDICATE EMPTY TAPE ENTRY     */
         LR    @15,@11                                             1173
         AL    @15,@TF00001                                        1173
         MVI   RTCTFLG-12(@15),X'00'                               1173
*           RTCTDCB(CNT1)=RTCTTDCB(9);/* PUT DEB ADDRESS IN TABLE    */
         L     @15,RTCTTDCB+32(,@11)                               1174
         L     @09,@TF00001                                        1174
         ST    @15,RTCTDCB-12(@09,@11)                             1174
*           RTCTDEV(CNT1)=UCBTYP;   /* PLACE DEVICE CODE IN TABLE    */
         LR    @15,@11                                             1175
         AL    @15,@TF00001                                        1175
         L     @09,UCBPTR(,R5)                                     1175
         MVC   RTCTDEV-12(4,@15),UCBTYP(@09)                       1175
*           CNT1=CNT1+1;            /* UP ARRAY INDEX                */
         LA    CNT1,1(,CNT1)                                       1176
*           RTCTSDNO='0'B;          /* INDICATE DEVICE IS IN TABLE   */
*                                                                  1177
         NI    RTCTSDNO(@11),B'01111111'                           1177
*           /*********************************************************/
*           /*                                                       */
*           /* NOW THAT A TAPE HAS BEEN PUT INTO THE DUMP DATA SET   */
*           /* TABLE IT MUST BE REWOUND TO LOAD POINT SO THAT THE    */
*           /* FIRST RECORD ON TAPE WILL BE A DUMP RECORD AND NOT A  */
*           /* TAPE MARK                                     @YM04249*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  1178
*           SDIIOB=''B;             /* CLEAR IOB             @YM04249*/
         XC    SDIIOB(40),SDIIOB                                   1178
*           IOBUNREL='1'B;          /* UNRELATED             @YM04249*/
         L     @15,IOBSTPTR                                        1179
         OI    IOBUNREL(@15),B'00000010'                           1179
*           EXCPECB=EXCPECB&&EXCPECB;/* CLEAR ECB            @YM04249*/
         XC    EXCPECB(4),EXCPECB                                  1180
*           IOBECBPT=ADDR(EXCPECB); /* ECB IN IOB            @YM04249*/
         LA    @09,EXCPECB                                         1181
         ST    @09,IOBECBPT(,@15)                                  1181
*           IOBSTART=ADDR(REWCCW);  /* REW CCW               @YM04249*/
         LA    @09,REWCCW                                          1182
         ST    @09,IOBSTART(,@15)                                  1182
*           IOBDCBPT=ADDR(RTCTTDCB(9))-44;/* USE THE DUMMY DCB IN  1183
*                                      RTCT                  @YM04249*/
         LA    @09,RTCTTDCB+32(,@11)                               1183
         SL    @09,@CF00288                                        1183
         ST    @09,IOBDCBPT(,@15)                                  1183
*           IOBINCAM='0001'X;       /*                       @YM04249*/
         MVC   IOBINCAM(2,@15),@CH03833                            1184
*           RTCTTDCB(1)=0;          /* CLEAR BLOCK COUNT IN DCB    1185
*                                                            @YM04249*/
         SLR   @15,@15                                             1185
         ST    @15,RTCTTDCB(,@11)                                  1185
*           RPARM=ADDR(SDIIOB);     /* SET R1 FOR EXCP TO BE ISSUED
*                                                            @YM04249*/
         LA    RPARM,SDIIOB                                        1186
*           GEN REFS(RPARM,SDIIOB,EXCPECB) SETS(RPARM,SDIIOB);     1187
*                                                  /*       @YM04249*/
         EXCP (RPARM)
         WAIT 1,ECB=EXCPECB
*           IF CNT1>10              /* ALL 10 ENTRIES PROCESSED ?    */
*             THEN                  /* YES                           */
         C     CNT1,@CF01260                                       1188
         BNH   @RF01188                                            1188
*             DO;                                                  1189
*               DUMPF='1'B;         /* INDICATE FINISHED             */
         OI    DUMPF(R5),B'00000001'                               1190
*             END;                                                 1191
*         END;                                                     1192
@RF01188 DS    0H                                                  1193
*       RFY                                                        1193
*         R6 UNRSTD;                                               1193
@RF01170 DS    0H                                                  1194
*       IF SKIP='1'B                /* IS THE DEVICE VALID           */
*         THEN                      /* NO                            */
         TM    SKIP(R5),B'10000000'                                1194
         BNO   @RF01194                                            1194
*         DO;                                                      1195
*           CALL INVALTA;           /* PROCESS INVALID TAPE REQUEST  */
         BAL   @14,INVALTA                                         1196
*         END;                                                     1197
*     END;                                                         1198
@RF01194 DS    0H                                                  1199
*   SKIP='0'B;                      /* RESET SKIP FLAG               */
@RF01143 NI    SKIP(R5),B'01111111'                                1199
*   RFY                                                            1200
*     R4 UNRSTD;                                                   1200
*   R14=INTRETAD;                                                  1201
         L     R14,INTRETAD(,R5)                                   1201
*   RETURN;                                                        1202
@EL00007 DS    0H                                                  1202
@EF00007 DS    0H                                                  1202
@ER00007 BR    @14                                                 1202
*   END SDITAPE;                                                   1203
*INVALTA:                                                          1204
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1204
INVALTA  DS    0H                                                  1205
*   RFY                                                            1205
*    (R4,                                                          1205
*     R6) RSTD;                                                    1205
*                                                                  1205
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS ENTERED BECAUSE AN ERROR OCCURRED WHILE       */
*   /* PROCESSING A TAPE DEVICE.UPON ENTRY REG 4 POINTS TO THE ENTRY */
*   /* IN THE DEVICE Q BEING PROCESSED THE DEVICE ADDRESS IS PLACED  */
*   /* IN MESSAGE IEA879A AND THE OPERATOR CAN ENTER AN EOB TO BYPASS*/
*   /* THE DEVICE OR RESPECIFY THE SAME DEVICE.IF A DEVICE IS        */
*   /* SPECIFIED THAT HAS BEEN PREVIOUSLY SPECIFIED IT IS AN ERROR   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1206
*   R6=R14;                                                        1206
         LR    R6,R14                                              1206
*   INVTA=DVNAME;                   /* PLACE DEVICE ADDRESS IN     1207
*                                      MESSAGE                       */
         MVC   INVTA(3),DVNAME(R4)                                 1207
*   REPROCSS='1'B;                  /* INDICATE THAT THIS DEVICE CAN
*                                      BE RESPECIFIED                */
         OI    REPROCSS(R4),B'00100000'                            1208
*   ENTSAVE=R4;                     /* SAVE THE ADDRESS FOR THIS   1209
*                                      ELEMENT                       */
         ST    R4,ENTSAVE(,R5)                                     1209
*   VALIDSW='0'B;                   /* SET FOR LOOP CONTROL UNTIL  1210
*                                      OPERATOR RESPONDS CORRECTLY TO
*                                      MSG IEA879A                   */
         NI    VALIDSW(R5),B'11111101'                             1210
*   DO WHILE(VALIDSW='0'B);                                        1211
         B     @DE01211                                            1211
@DL01211 DS    0H                                                  1212
*     GENERATE REFS(MSG04,MSG05,RNVT) SETS(RPARM,R14,R15);         1212
     IEAPMNIP TYPE=WTOR,PARAM=MSG05   WRITE MESSAGE IEA879A
*     CURRENT=RPARM;                /* REPLY IS POINTED TO BY RPARM  */
         ST    RPARM,CURRENT(,R5)                                  1213
*     BEGIN=RPARM;                                                 1214
         ST    RPARM,BEGIN(,R5)                                    1214
*     ENDCOL=RPARM;                                                1215
         ST    RPARM,ENDCOL(,R5)                                   1215
*     IF CURCHAR=' '&NXTCHAR=''''   /* EOB IS INDICATED BY A BLANK 1216
*                                      QUOTE                         */
*       THEN                        /* YES IT IS AN EOB              */
         L     @15,CURRENT(,R5)                                    1216
         CLI   CURCHAR(@15),C' '                                   1216
         BNE   @RF01216                                            1216
         CLI   NXTCHAR(@15),C''''                                  1216
         BNE   @RF01216                                            1216
*       DO;                                                        1217
*         VALIDSW='1'B;             /* SKIP THE RETRY PROCESS        */
         OI    VALIDSW(R5),B'00000010'                             1218
*       END;                                                       1219
*     ELSE                          /* NOT AN EOB RESPONSE           */
*       DO;                         /* RESPONSE MUST BE IN THE FORMAT
*                                      (TA,DDD)                      */
         B     @RC01216                                            1220
@RF01216 DS    0H                                                  1221
*         DO WHILE(CURCHAR^='''');  /* FIND ENDING QUOTE             */
         B     @DE01221                                            1221
@DL01221 DS    0H                                                  1222
*           CURRENT=CURRENT+1;      /* GET NEXT BYTE                 */
         LA    @15,1                                               1222
         AL    @15,CURRENT(,R5)                                    1222
         ST    @15,CURRENT(,R5)                                    1222
*         END;                                                     1223
@DE01221 L     @15,CURRENT(,R5)                                    1223
         CLI   CURCHAR(@15),C''''                                  1223
         BNE   @DL01221                                            1223
*         ENDCOL=CURRENT;           /* SAVE ENDING ADDRESS           */
         ST    @15,ENDCOL(,R5)                                     1224
*         CURRENT=BEGIN+8;          /* RESPONSE MUST BE 8 CHAR       */
         LA    @11,8                                               1225
         AL    @11,BEGIN(,R5)                                      1225
         ST    @11,CURRENT(,R5)                                    1225
*         IF CURRENT^=ENDCOL        /* IS IT 8 BYTES LONG            */
*           THEN                    /* NO                            */
         CR    @11,@15                                             1226
         BE    @RF01226                                            1226
*           CURRENT=0;                                             1227
         SLR   @15,@15                                             1227
         ST    @15,CURRENT(,R5)                                    1227
*         ELSE                      /* IT IS 8 BYTES                 */
*           DO;                                                    1228
         B     @RC01226                                            1228
@RF01226 DS    0H                                                  1229
*             CURRENT=BEGIN;                                       1229
         L     @15,BEGIN(,R5)                                      1229
         ST    @15,CURRENT(,R5)                                    1229
*             SCANBEG=CURRENT+1;                                   1230
*                                                                  1230
         LA    @11,1                                               1230
         ALR   @11,@15                                             1230
         ST    @11,SCANBEG(,R5)                                    1230
*             /*******************************************************/
*             /*                                                     */
*             /* NOW CHECK FOR (TA,XXX)                              */
*             /*                                                     */
*             /*******************************************************/
*                                                                  1231
*             IF CURCHAR^='('×FIRST3^='TA,' THEN/* SYNTAX ERROR      */
         CLI   CURCHAR(@15),C'('                                   1231
         BNE   @RT01231                                            1231
         CLC   FIRST3(3,@11),@CC03812                              1231
         BE    @RF01231                                            1231
@RT01231 DS    0H                                                  1232
*               CURRENT=0;                                         1232
         SLR   @15,@15                                             1232
         ST    @15,CURRENT(,R5)                                    1232
*             ELSE                                                 1233
*               DO;                                                1233
         B     @RC01231                                            1233
@RF01231 DS    0H                                                  1234
*                 SCANBEG=SCANBEG+3;/* POINT TO DEV NUM              */
         LA    @15,3                                               1234
         AL    @15,SCANBEG(,R5)                                    1234
         ST    @15,SCANBEG(,R5)                                    1234
*                 IF LASTCHAR^=')'  /* FOLLOWED BY A PAREN           */
*                   THEN                                           1235
         CLI   LASTCHAR(@15),C')'                                  1235
         BE    @RF01235                                            1235
*                   CURRENT=0;      /* INVALID SYNTAX                */
         SLR   @15,@15                                             1236
         ST    @15,CURRENT(,R5)                                    1236
*               END;                                               1237
@RF01235 DS    0H                                                  1238
*           END;                                                   1238
@RC01231 DS    0H                                                  1239
*         IF CURRENT=0              /* VALID SO FAR                  */
*           THEN                    /* NO                            */
@RC01226 L     @15,CURRENT(,R5)                                    1239
         LTR   @15,@15                                             1239
         BNZ   @RF01239                                            1239
*           INVTA='   ';            /* PUT BLANKS IN MESSAGE FOR   1240
*                                      DEVICE ADDRESS                */
         MVC   INVTA(3),@CC03838                                   1240
*         ELSE                      /* SYNTAX IS CORRECT             */
*           DO;                                                    1241
         B     @RC01239                                            1241
@RF01239 DS    0H                                                  1242
*             R4=ENTSAVE;           /* GET ADDRESS OF ELEMENT IN   1242
*                                      DEVICE Q THAT ORIGNALLY     1242
*                                      ENCOUNTERED THE ERROR         */
         L     R4,ENTSAVE(,R5)                                     1242
*             IF FIRST3=DVNAME      /* SAVE DEVICE SPECIFIED         */
*               THEN                /* YES                           */
         L     @15,SCANBEG(,R5)                                    1243
         CLC   FIRST3(3,@15),DVNAME(R4)                            1243
         BNE   @RF01243                                            1243
*               DO;                                                1244
*                 FLAG1=0;          /* SET ENTRY IN DEVICE Q TO BE 1245
*                                      PROCESSED NEXT                */
         MVI   FLAG1(R4),X'00'                                     1245
*                 VALIDSW='1'B;                                    1246
         OI    VALIDSW(R5),B'00000010'                             1246
*               END;                                               1247
*             ELSE                  /* IT IS NOT THE SAME DEVICE     */
*               DO;                 /* SO INSURE IT IS NOT ON THE Q
*                                      ALREADY                       */
         B     @RC01243                                            1248
@RF01243 DS    0H                                                  1249
*                 R4=RQUEADD;       /* START AT BEGINNING OF THE Q   */
         L     R4,RQUEADD(,R5)                                     1249
*                 DO WHILE(R4^=0&DVNAME^=FIRST3);                  1250
         B     @DE01250                                            1250
@DL01250 DS    0H                                                  1251
*                   R4=NXTENTAD;    /* CHECK NEXT DEVICE ADDRESS     */
         L     R4,NXTENTAD(,R4)                                    1251
*                 END;                                             1252
@DE01250 LTR   R4,R4                                               1252
         BZ    @DC01250                                            1252
         L     @15,SCANBEG(,R5)                                    1252
         CLC   DVNAME(3,R4),FIRST3(@15)                            1252
         BNE   @DL01250                                            1252
@DC01250 DS    0H                                                  1253
*                 IF R4=0           /* END OF Q REACHED ?            */
*                   THEN            /* YES                           */
         LTR   R4,R4                                               1253
         BNZ   @RF01253                                            1253
*                   DO;             /* PUT NEW DEVICE ON Q IN THE  1254
*                                      SAME POSITION OF THE ORIGINAL
*                                      DEVICE                        */
*                     R4=ENTSAVE;                                  1255
         L     R4,ENTSAVE(,R5)                                     1255
*                     FLAG1=0;                                     1256
         MVI   FLAG1(R4),X'00'                                     1256
*                     DVNAME=FIRST3;/* PUT DEVICE ADDRESS IN THE   1257
*                                      ELEMENT                       */
         L     @15,SCANBEG(,R5)                                    1257
         MVC   DVNAME(3,R4),FIRST3(@15)                            1257
*                     VALIDSW='1'B;                                1258
         OI    VALIDSW(R5),B'00000010'                             1258
*                   END;                                           1259
*                 ELSE              /* ALREADY SPECIFIED -ERROR      */
*                   DO;                                            1260
         B     @RC01253                                            1260
@RF01253 DS    0H                                                  1261
*                     INVTA=FIRST3; /* PUT DEVICE SPECIFIED IN THE 1261
*                                      MESSAGE                       */
         L     @15,SCANBEG(,R5)                                    1261
         MVC   INVTA(3),FIRST3(@15)                                1261
*                   END;                                           1262
*               END;                                               1263
@RC01253 DS    0H                                                  1264
*           END;                                                   1264
@RC01243 DS    0H                                                  1265
*       END;                                                       1265
@RC01239 DS    0H                                                  1266
*     RPARM=BEGIN;                                                 1266
@RC01216 L     RPARM,BEGIN(,R5)                                    1266
*     GENERATE REFS(RPARM);                                        1267
*                                     /* RELEASE WTOR SQA REPLY BUF */
     IEAPMNIP TYPE=WTOR2,PARAM=RPARM,BUFREL=YES
*   END;                            /* END OF DO WHILE VALIDSW =0    */
@DE01211 TM    VALIDSW(R5),B'00000010'                             1268
         BZ    @DL01211                                            1268
*   R14=R6;                         /* RESTORE RETURN ADDRESS        */
         LR    R14,R6                                              1269
*   RETURN;                                                        1270
@EL00008 DS    0H                                                  1270
@EF00008 DS    0H                                                  1270
@ER00008 BR    @14                                                 1270
*   RFY                                                            1271
*    (R4,                                                          1271
*     R6) UNRSTD;                                                  1271
*   END INVALTA;                                                   1272
*DALIST:                                                           1273
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1273
*                                                                  1273
DALIST   DS    0H                                                  1274
*   /*****************************************************************/
*   /*                                                               */
*   /* ONCE THE SYNTAX OF A DA REQUEST HAS BEEN VERIFIED THE DEVICES */
*   /* REQUESTED ARE CHECKED TO INSURE THAT THEY ARE INDICATED AS DA */
*   /* TYPE AND THAT THEY ARE FULL.A CHECK IS ALSO MADE TO INSURE    */
*   /* THAT THEY ARE NOT SPECIFIED TWICE.THIS ROUTINE IS ENTERED WTIH*/
*   /* SCANBEG POINTING TO THE DEVICE ADDRESS REQUESTED BY THE       */
*   /* OPERATOR IE 00,01) SCANBEG POINTS TO 00                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1274
*   IF(SCANBEG+3>CURRENT)×(THIRD^=')'&/* ADDRESS DELIMITER MUST BE A
*                                      PAREN OR                      */
*       THIRD^=',')                 /* A COMMA                       */
*     THEN                          /* IF NEITHER ITS AN ERROR       */
         L     @15,SCANBEG(,R5)                                    1274
         LA    @11,3                                               1274
         ALR   @11,@15                                             1274
         C     @11,CURRENT(,R5)                                    1274
         BH    @RT01274                                            1274
         CLI   THIRD(@15),C')'                                     1274
         BE    @RF01274                                            1274
         CLI   THIRD(@15),C','                                     1274
         BE    @RF01274                                            1274
@RT01274 DS    0H                                                  1275
*     DO;                                                          1275
*       VALIDSW='0'B;                                              1276
         NI    VALIDSW(R5),B'11111101'                             1276
*       CURRENT=ENDCOL;             /* STOP ALL SCANS WITH VALIDSW 1277
*                                      OFF                           */
         L     @15,ENDCOL(,R5)                                     1277
         ST    @15,CURRENT(,R5)                                    1277
*       SCANBEG=CURRENT;                                           1278
         ST    @15,SCANBEG(,R5)                                    1278
*     END;                                                         1279
*   DO WHILE(SCANBEG^=CURRENT);     /* PROCESS ALL REQUESTED         */
@RF01274 B     @DE01280                                            1280
@DL01280 DS    0H                                                  1281
*     DEVNUM=FIRST2;                /* PUT TWO BYTE ADDRESS IN THREE
*                                      BYTE FIELD FOR COMPARE IN DATA
*                                      SET TABLE                     */
         MVI   DEVNUM+2,C' '                                       1281
         L     @15,SCANBEG(,R5)                                    1281
         MVC   DEVNUM(2),FIRST2(@15)                               1281
*     CNT2=1;                       /* START AT BEGIN OF TBL         */
         LA    CNT2,1                                              1282
*     VALIDSW='0'B;                 /* SET INVALID UNTIL PROVEN    1283
*                                      OTHERWISE                     */
         NI    VALIDSW(R5),B'11111101'                             1283
*     DO WHILE(CNT2^=CNT1);         /* SCAN TABLE                    */
         B     @DE01284                                            1284
@DL01284 DS    0H                                                  1285
*       IF RTCTDETP(CNT2)='1'B&     /* MUST BE DASD TYPE             */
*           RTCTDSUS(CNT2)='1'B&    /* AND FULL AND USED     @ZM44949*/
*           RTCTDSNM(CNT2)=DEVNUM   /* AND THE ONE REQUESTED         */
*         THEN                                                     1285
         LR    @15,CNT2                                            1285
         MH    @15,@CH01192                                        1285
         L     @11,CVTRTMCT(,RCVT)                                 1285
         ST    @15,@TF00001                                        1285
         ALR   @15,@11                                             1285
         TM    RTCTDETP-12(@15),B'01100000'                        1285
         BNO   @RF01285                                            1285
         AL    @11,@TF00001                                        1285
         CLC   RTCTDSNM-12(3,@11),DEVNUM                           1285
         BNE   @RF01285                                            1285
*         DO;                                                      1286
*           VALIDSW='1'B;                                          1287
         OI    VALIDSW(R5),B'00000010'                             1287
*           CNT2=CNT1;                                             1288
         LR    CNT2,CNT1                                           1288
*         END;                                                     1289
*       ELSE                                                       1290
*         DO;                                                      1290
         B     @RC01285                                            1290
@RF01285 DS    0H                                                  1291
*           CNT2=CNT2+1;            /* CHECK NEXT ENTRY              */
         LA    CNT2,1(,CNT2)                                       1291
*         END;                                                     1292
*     END;                                                         1293
@RC01285 DS    0H                                                  1293
@DE01284 CR    CNT2,CNT1                                           1293
         BNE   @DL01284                                            1293
*     RFY                                                          1294
*       R4 RSTD;                                                   1294
*     IF VALIDSW='1'B               /* IS DEVICE A FULL DASD         */
*       THEN                        /* YES- CONTINUE                 */
         TM    VALIDSW(R5),B'00000010'                             1295
         BNO   @RF01295                                            1295
*       DO;                                                        1296
*         R4=RQUEADD;               /* START AT BEGIN OF DEVICE Q    */
         L     R4,RQUEADD(,R5)                                     1297
*         DO WHILE(R4^=0&DPROCSD='1'B);/* FIND FIRST ENTRY THAT IS 1298
*                                      NOT PROCESSED IF ANY          */
         B     @DE01298                                            1298
@DL01298 DS    0H                                                  1299
*           QSAVE=R4;               /* SAVE THIS ENTRY ADD           */
         ST    R4,QSAVE(,R5)                                       1299
*           R4=NXTENTAD;            /* GET NEXT ENTRY                */
         L     R4,NXTENTAD(,R4)                                    1300
*         END;                                                     1301
@DE01298 LTR   R4,R4                                               1301
         BZ    @DC01298                                            1301
         TM    DPROCSD(R4),B'01000000'                             1301
         BO    @DL01298                                            1301
@DC01298 DS    0H                                                  1302
*         IF R4^=0                  /* IF ANY ARE NOT PROCCESS THEN
*                                      INSURE THAT THIS DEVICE IS NOT
*                                      AREADY ON THE DEVICE Q        */
*           THEN                                                   1302
         LTR   R4,R4                                               1302
         BZ    @RF01302                                            1302
*           DO;                                                    1303
*             DO WHILE(R4^=0&DVNAME^=DEVNUM);                      1304
         B     @DE01304                                            1304
@DL01304 DS    0H                                                  1305
*               QSAVE=R4;                                          1305
         ST    R4,QSAVE(,R5)                                       1305
*               R4=NXTENTAD;                                       1306
         L     R4,NXTENTAD(,R4)                                    1306
*             END;                                                 1307
@DE01304 LTR   R4,R4                                               1307
         BZ    @DC01304                                            1307
         CLC   DVNAME(3,R4),DEVNUM                                 1307
         BNE   @DL01304                                            1307
@DC01304 DS    0H                                                  1308
*             IF R4^=0              /* IF THE DEVICE HAS BEEN      1308
*                                      SPECIFIED TWICE R4 WOULD BE 1308
*                                      NON-ZERO                      */
*               THEN                /* YES - ERROR                   */
         LTR   R4,R4                                               1308
         BZ    @RF01308                                            1308
*               DO;                                                1309
*                 VALIDSW='0'B;                                    1310
         NI    VALIDSW(R5),B'11111101'                             1310
*               END;                                               1311
*           END;                                                   1312
@RF01308 DS    0H                                                  1313
*         IF VALIDSW='1'B           /* CAN DEVICE BE PUT ON THE Q?   */
*           THEN                    /* YES                           */
@RF01302 TM    VALIDSW(R5),B'00000010'                             1313
         BNO   @RF01313                                            1313
*           DO;                                                    1314
*             R4=QSAVE;                                            1315
         L     R4,QSAVE(,R5)                                       1315
*             NXTENTAD=R4+LENGTH(DVICERQT);/* ENQUE NEW              */
         LA    @15,8                                               1316
         ALR   @15,R4                                              1316
         ST    @15,NXTENTAD(,R4)                                   1316
*             R4=NXTENTAD;          /* DEVICE                        */
         LR    R4,@15                                              1317
*             DVICERQT=DVICERQT&&DVICERQT;/* CLEAR IT                */
         XC    DVICERQT(8,R4),DVICERQT(R4)                         1318
*             DASDDV='1'B;          /* INDICATE DA                   */
         OI    DASDDV(R4),B'10000000'                              1319
*             DVNAME=DEVNUM;        /* PUT NAME IN ENTRY             */
         MVC   DVNAME(3,R4),DEVNUM                                 1320
*             DUMPD='1'B;           /* INDICATE THERE IS A DA DEVICE
*                                      ON THE DEVICE Q TO BE EMPTIED */
         OI    DUMPD(R5),B'00100000'                               1321
*           END;                                                   1322
*       END;                                                       1323
@RF01313 DS    0H                                                  1324
*     RFY                                                          1324
*       R4 UNRSTD;                                                 1324
@RF01295 DS    0H                                                  1325
*     IF VALIDSW='1'B               /* WAS THE DEVICE VALID          */
*       THEN                        /* YES                           */
         TM    VALIDSW(R5),B'00000010'                             1325
         BNO   @RF01325                                            1325
*       DO;                                                        1326
*         IF THIRD=')'              /* WAS IT THE LAST ONE ?         */
*           THEN                    /* YES                           */
         L     @15,SCANBEG(,R5)                                    1327
         CLI   THIRD(@15),C')'                                     1327
         BNE   @RF01327                                            1327
*           SCANBEG=CURRENT;                                       1328
         L     @15,CURRENT(,R5)                                    1328
         ST    @15,SCANBEG(,R5)                                    1328
*         ELSE                      /* MORE TO PROCESS YET           */
*           DO;                                                    1329
         B     @RC01327                                            1329
@RF01327 DS    0H                                                  1330
*             SCANBEG=SCANBEG+3;                                   1330
         LA    @15,3                                               1330
         L     @11,SCANBEG(,R5)                                    1330
         ALR   @11,@15                                             1330
         ST    @11,SCANBEG(,R5)                                    1330
*             IF(SCANBEG+3>CURRENT)×/* 3 BYTES                       */
*                 (THIRD^=')'&      /* DELIMITER)                    */
*                 THIRD^=',')       /* OR ,                          */
*               THEN                /* NO                            */
         ALR   @15,@11                                             1331
         C     @15,CURRENT(,R5)                                    1331
         BH    @RT01331                                            1331
         CLI   THIRD(@11),C')'                                     1331
         BE    @RF01331                                            1331
         CLI   THIRD(@11),C','                                     1331
         BE    @RF01331                                            1331
@RT01331 DS    0H                                                  1332
*               VALIDSW='0'B;                                      1332
         NI    VALIDSW(R5),B'11111101'                             1332
*           END;                                                   1333
@RF01331 DS    0H                                                  1334
*       END;                                                       1334
@RC01327 DS    0H                                                  1335
*     IF VALIDSW='0'B               /* IF INVALID GET OUT            */
*       THEN                                                       1335
@RF01325 TM    VALIDSW(R5),B'00000010'                             1335
         BNZ   @RF01335                                            1335
*       DO;                                                        1336
*         CURRENT=ENDCOL;                                          1337
         L     @15,ENDCOL(,R5)                                     1337
         ST    @15,CURRENT(,R5)                                    1337
*         SCANBEG=CURRENT;                                         1338
         ST    @15,SCANBEG(,R5)                                    1338
*       END;                                                       1339
*   END;                            /* OF DO WHILE SCANBEG NOT EQUAL
*                                      TO CURRENT                    */
@RF01335 DS    0H                                                  1340
@DE01280 CLC   SCANBEG(4,R5),CURRENT(R5)                           1340
         BNE   @DL01280                                            1340
*   RETURN;                                                        1341
@EL00009 DS    0H                                                  1341
@EF00009 DS    0H                                                  1341
@ER00009 BR    @14                                                 1341
*   END DALIST;                                                    1342
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR15F FIXED(31) REG(15),                                    1343
*     GPR00P PTR(31) REG(0),                                       1343
*     GPR01P PTR(31) REG(1);                                       1343
*   DCL                                                            1344
*     1 I004 DEF(ILIST) BDY(WORD),  /* LIST FOR GETMAIN              */
*      2 I00401 PTR(31),            /* LENGTH                        */
*      2 I00402 CHAR(1),            /* HIARCHY                       */
*      2 I00403 PTR(24),            /* ADDR OF ADDR LIST             */
*      2 I00404 CHAR(1),            /* TYPE OF REQUEST               */
*      2 I00405 PTR(8);             /* SUBPOOL VALUE                 */
*   DECLARE                                                        1345
*     ILIST CHAR(10) BDY(DWORD);    /* STANDARD LIST                 */
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       1346
*     I031F FIXED(31) BASED,                                       1346
*     I031P PTR(31) BASED,                                         1346
*     I015F FIXED(15) BASED,                                       1346
*     I015P PTR(15) BASED,                                         1346
*     I008P PTR(8) BASED,                                          1346
*     I001C CHAR(1) BASED;                                         1346
*   END IEAVTSDI                                                   1347
*                                                                  1347
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (SDISPEC )                                       */
*/*%INCLUDE SYSLIB  (SDICONST)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHANVT  )                                       */
*/*%INCLUDE SYSLIB  (IHARTCT )                                       */
*/*%INCLUDE SYSLIB  (IHAECB  )                                       */
*/*%INCLUDE SYSLIB  (IEAPPNIP)                                       */
*/*%INCLUDE SYSLIB  (IEZIOB  )                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*/*%INCLUDE SYSLIB  (IHACDE  )                                       */
*/*%INCLUDE SYSLIB  (IHALPDE )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*/*%INCLUDE SYSLIB  (IHASDUMP)                                       */
*/*%INCLUDE SYSLIB  (IEAPMNIP)                                       */
*/*%INCLUDE SYSLIB  (IHAESTA )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHAPVT  )                                       */
*/*%INCLUDE SYSLIB  (IHASMDLR)                                       */
*/*%INCLUDE SYSLIB  (IHASDRSB)                                       */
*/*%INCLUDE SYSLIB  (IHASMWK )                                       */
*/*%INCLUDE SYSLIB  (IHASDWRK)                                       */
*/*%INCLUDE SYSLIB  (SDISPACE)                                       */
*/*%INCLUDE SYSLIB  (FINDMODS)                                       */
*/*%INCLUDE SYSLIB  (SDISCAN )                                       */
*/*%INCLUDE SYSLIB  (SDIVALID)                                       */
*/*%INCLUDE SYSLIB  (LFTPAREN)                                       */
*/*%INCLUDE SYSLIB  (RTPAREN )                                       */
*/*%INCLUDE SYSLIB  (DASDCHK )                                       */
*/*%INCLUDE SYSLIB  (NOCHK   )                                       */
*/*%INCLUDE SYSLIB  (SDIPRMPT)                                       */
*/*%INCLUDE SYSLIB  (SDIDASD )                                       */
*/*%INCLUDE SYSLIB  (SDILOCAT)                                       */
*/*%INCLUDE SYSLIB  (SDIMOUNT)                                       */
*/*%INCLUDE SYSLIB  (SDIOPEND)                                       */
*/*%INCLUDE SYSLIB  (FULLCHK )                                       */
*/*%INCLUDE SYSLIB  (SDILIST )                                       */
*/*%INCLUDE SYSLIB  (CNTPAREN)                                       */
*/*%INCLUDE SYSLIB  (SCANLIST)                                       */
*/*%INCLUDE SYSLIB  (PARENLFT)                                       */
*/*%INCLUDE SYSLIB  (GOCHK   )                                       */
*/*%INCLUDE SYSLIB  (CHKDA   )                                       */
*/*%INCLUDE SYSLIB  (EMPTYDA )                                       */
*/*%INCLUDE SYSLIB  (TACHECK )                                       */
*/*%INCLUDE SYSLIB  (DASDINIT)                                       */
*/*%INCLUDE SYSLIB  (TAPEINIT)                                       */
*/*%INCLUDE SYSLIB  (CHECKTBL)                                       */
*/*%INCLUDE SYSLIB  (SDIEXCP )                                       */
*/*%INCLUDE SYSLIB  (SDITAPE )                                       */
*/*%INCLUDE SYSLIB  (FNDTAPE )                                       */
*/*%INCLUDE SYSLIB  (VALTAPE )                                       */
*/*%INCLUDE SYSLIB  (INVALTA )                                       */
*/*%INCLUDE SYSLIB  (DALIST  )                                       */
*                                                                  1347
*       ;                                                          1347
@DATA    DS    0H
@CH01192 DC    H'12'
@CH03833 DC    XL2'0001'
         DS    0F
@TF00001 DS    F
         DS    0F
@CF00055 DC    F'1'
@CH00055 EQU   @CF00055+2
@CF00069 DC    F'2'
@CF00152 DC    F'6'
@CF01260 DC    F'10'
@CF00288 DC    F'44'
@CF03750 DC    F'4096'
@CF03855 DC    F'4544'
@CF00132 DC    XL4'00FFFFFF'
@CF00148 DC    XL4'52000000'
@CF03755 DC    XL4'80000000'
@CF03808 DC    XL4'7FFFFFFF'
@CF03792 DC    XL4'09'
         DS    0D
IOBSTPTR DC    AL4(SDIIOB)
IOBPRPTR DC    AL4(SDIIOB)
ECBPTR   DC    AL4(EXCPECB)
DEBPTR   DS    A
SMWKLEN  DC    AL4(980)
SDWLEN   DC    AL2(4544)
CNT3     DS    FL1
@TS00001 DS    CL12
@CC00283 DC    C'SYS1.DUMP'
@CC00134 DC    C'IEAVTSSD'
@CC00136 DC    C'IEAVTSDT'
@CC00138 DC    C'IGC0005A'
@CC03764 DC    C'IEAVTSDR'
@CC03790 DC    C'DUMP    '
@CC03801 DC    C'FULL '
@CC03803 DC    C'EMPTY'
@CC03761 DC    C'SMWK'
@CC03786 DC    C'DASD'
@CC03806 DC    C'DA=('
@CC03812 DC    C'TA,'
@CC03818 DC    C'00 '
@CC03838 DC    C'   '
@CC03788 DC    C'NO'
SRCHAD   DS    CL8
         ORG   SRCHAD
@NM00004 DC    X'000000'
SRCCHH   DS    CL4
SRECNU   DC    X'01'
         ORG   SRCHAD+8
         DS    CL3
EXCPECB  DS    CL4
         DS    CL4
RCCWCHAN DS    CL24
         ORG   RCCWCHAN
SRCHCCW1 DS    CL8
         ORG   SRCHCCW1
@NM00007 DC    X'31'
SADDR    DC    AL3(SRCCHH)
@NM00008 DC    X'40'
@NM00009 DC    X'000005'
         ORG   RCCWCHAN+8
TICCCW1  DS    CL8
         ORG   TICCCW1
@NM00010 DC    X'08'
@NM00011 DC    AL3(SRCHCCW1)
@NM00012 DC    X'40000000'
         ORG   RCCWCHAN+16
RDCCW1   DS    CL8
         ORG   RDCCW1
@NM00013 DC    X'06'
RADDR1   DC    XL3'000000'
@NM00014 DC    X'30001000'
         ORG   RCCWCHAN+24
WRITECCW DS    CL24
         ORG   WRITECCW
SRCHCCW2 DS    CL8
         ORG   SRCHCCW2
@NM00015 DC    X'31'
SADDR2   DC    AL3(SRCCHH)
@NM00016 DC    X'40'
@NM00017 DC    X'000005'
         ORG   WRITECCW+8
TICCCW2  DS    CL8
         ORG   TICCCW2
@NM00018 DC    X'08'
@NM00019 DC    AL3(SRCHCCW2)
@NM00020 DC    X'40000000'
         ORG   WRITECCW+16
WRCCW    DS    CL8
         ORG   WRCCW
@NM00021 DC    X'1D'
@NM00022 DC    AL3(WRBUF)
@NM00023 DC    X'00000008'
         ORG   WRITECCW+24
WRBUF    DC    X'0000000000000000'
         ORG   WRBUF
BUFCH    DS    CL4
BUFCR    DS    CL1
BUFKD    DS    CL3
         ORG   WRBUF+8
REWCCW   DS    CL8
         ORG   REWCCW
REWCMD   DC    X'07'
REWADDR  DC    AL3(0)
REWFLG   DC    X'20'
REWCNT   DC    X'000001'
         ORG   REWCCW+8
DSNAME   DS    CL44
         ORG   DSNAME
DUMPNAME DS    CL9
DEVNUM   DS    CL3
@NM00024 DS    CL32
         ORG   DSNAME+44
         DS    CL4
LOCATBL  DS    CL265
         ORG   LOCATBL
NUMENTRY DS    FL2
DVCODE   DS    CL4
         ORG   DVCODE
@NM00025 DS    CL2
DVCOD    DS    CL2
         ORG   DVCOD
DEVCLAS  DS    FL1
DEVCOD   DS    FL1
         ORG   LOCATBL+6
VOLSERNU DS    CL6
@NM00026 DS    CL253
         ORG   @NM00026
SDIIOB   DS    CL40
         ORG   LOCATBL+265
         DS    CL7
ILIST    DS    CL10
SDIPATCH DS    CL200
SMDWSAG  DC    AL2(6)
         DC    AL2(7)
         DC    AL2(8)
         DC    AL2(9)
         DC    AL2(10)
         DC    AL2(11)
         DC    AL2(12)
         DC    AL2(13)
         DC    AL2(14)
         DC    AL2(15)
         DC    AL2(16)
SMDWSAC  DC    AL2(17)
         DC    AL2(18)
         DC    AL2(19)
         DC    AL2(20)
         DC    AL2(21)
         DC    AL2(22)
         DC    AL2(23)
         DC    AL2(24)
         DC    AL2(25)
         DC    AL2(26)
         DC    AL2(27)
         DC    AL2(28)
         DC    AL2(29)
         DC    AL2(30)
         DC    AL2(54)
         DC    AL2(55)
SMDWSAL  DC    AL2(31)
         DC    AL2(32)
         DC    AL2(33)
         DC    AL2(34)
         DC    AL2(35)
         DC    AL2(36)
         DC    AL2(37)
         DC    AL2(38)
         DC    AL2(39)
         DC    AL2(40)
         DC    AL2(41)
         DC    AL2(42)
         DC    AL2(43)
         DC    AL2(44)
         DC    AL2(45)
IEAVTSDI CSECT
*                                                       /*  @G33VPHD*/
MSG01 IEAPMNIP TYPE=HEADER,MSGST=MSG01,MSGEND=M01END
       DC CL33'IEA883I MODULE IEAVTSDR NOT FOUND'
M01END EQU *
MSG02 IEAPMNIP TYPE=HEADER,MSGST=MSG02,MSGEND=M02END
       DC CL17'IEA880I SYS1.DUMP'
NSDEV  DC CL3'   '                 AREA FOR DEVICE NUMBER
       DC CL36'UNACCEPTABLE FOR A SYS1.DUMP DATASET'
M02END EQU *
MSG03 IEAPMNIP TYPE=HEADER,MSGST=MSG03,MSGEND=M03END
       DC CL36'IEA881I TOO MANY SYS1.DUMP DATA SETS'
M03END EQU *
MSG04 IEAPMNIP TYPE=HEADER,MSGST=MSG04,MSGEND=M04END,OPT=(,NBC)
       DC CL18'IEA879A DEVICE AT '
INVTA  DC CL3'000'                TAPE DEVICE ADDRESS GOES HERE
       DC CL47' UNACCEPTABLE FOR A SYS1.DUMP DATASET-RESPECIFY'
M04END EQU *
MSG05 IEAPMNIP TYPE=PLIST,MSGST=MSG04,RMSGST=SQARBUF
MSG06 IEAPMNIP TYPE=HEADER,MSGST=MSG06,MSGEND=M06END
       DC CL5'IEA87'
MS6ID  DC CL1' '       MESSAGE ID SET TO 5 OR 6
       DC CL11'I SYS1.DUMP'
MS6DV  DC CL3'   '          DEVICE ADDRESS GOES HERE
MS6ST  DC CL5'FULL '        EITHER FULL OR EMPTY DASD STATUS
M06END EQU *
MSG07 IEAPMNIP TYPE=HEADER,MSGST=MSG07,MSGEND=M07END
       DC CL44'IEA878I NO DASD SYS1.DUMP DATASETS AVAILABLE'
M07END EQU *
MSG08 IEAPMNIP TYPE=HEADER,MSGST=MSG08,MSGEND=M08END
       DC CL36'IEA877A SPECIFY FULL DASD SYS1.DUMP '
       DC CL23'DATASETS TO BE EMPTIED,'
       DC CL36' TAPE UNITS TO BE USED AS SYS1.DUMP '
       DC CL5'OR GO'
M08END EQU *
MSG09 IEAPMNIP TYPE=PLIST,MSGST=MSG08,RMSGST=SQARBUF
MSG10 IEAPMNIP TYPE=HEADER,MSGST=MSG10,MSGEND=M10END
       DC CL31'IEA882A REPLY FOR LIST REQUEST '
       DC CL32'OF DUMP OPTION INVALID-RESPECIFY'
M10END EQU *
MSG11 IEAPMNIP TYPE=PLIST,MSGST=MSG10,RMSGST=SQARBUF
MSG12 IEAPMNIP TYPE=HEADER,MSGST=MSG12,MSGEND=M12END
       DC CL33'IEA883I MODULE IEAVTSSD NOT FOUND'
M12END EQU *
MSG13 IEAPMNIP TYPE=HEADER,MSGST=MSG13,MSGEND=M13END
       DC CL33'IEA883I MODULE IGC0005A NOT FOUND'
M13END EQU *
MSG14 IEAPMNIP TYPE=HEADER,MSGST=MSG14,MSGEND=M14END
       DC CL33'IEA883I MODULE IEAVTSDT NOT FOUND'
M14END EQU *
IEAVTSDI CSECT
MOUNTD IEAPMNIP TYPE=MOUNTPL,PARAM=DSNAME,OPT=PTR
MOUNTT IEAPMNIP TYPE=MOUNTPL,PARAM=SYS1.DUMP
IEAVTSDI CSECT
DMPOPN IEAPMNIP TYPE=OPENPL,PARAM=DSNAME,OPT=PTR
IEAVTSDI CSECT
LIST   CAMLST NAME,DSNAME,,LOCATBL
IEAVTSDI CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
DEBDAPTR EQU   @06
CNT2     EQU   @06
CNT1     EQU   @12
R7       EQU   @07
R10      EQU   @10
RNVT     EQU   @02
RCVT     EQU   @03
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
RPARM    EQU   @01
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R11      EQU   @11
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
GPR01P   EQU   @01
GPR00P   EQU   @00
GPR15F   EQU   @15
RENTRY   EQU   @15
REXIT    EQU   @14
R12      EQU   @12
R8       EQU   @08
R9       EQU   @09
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
WORKAREA EQU   0
DACTION  EQU   WORKAREA
SFLG1    EQU   DACTION
DUMPN    EQU   SFLG1
DUMPL    EQU   SFLG1
DUMPD    EQU   SFLG1
DUMPT    EQU   SFLG1
ENTDASD  EQU   SFLG1
DASDFND  EQU   SFLG1
VALIDSW  EQU   SFLG1
DUMPF    EQU   SFLG1
SFLG2    EQU   DACTION+1
SKIP     EQU   SFLG2
BEGIN    EQU   WORKAREA+4
ENDCOL   EQU   WORKAREA+8
CURRENT  EQU   WORKAREA+12
SCANBEG  EQU   WORKAREA+16
INTRETAD EQU   WORKAREA+20
INTRET2  EQU   WORKAREA+24
SVER13   EQU   WORKAREA+28
SAVNVTAD EQU   WORKAREA+32
SAVCVTAD EQU   WORKAREA+36
CURSVE   EQU   WORKAREA+40
SDRNAME  EQU   WORKAREA+44
TNAME1   EQU   SDRNAME
DCBPTR   EQU   WORKAREA+52
UCBPTR   EQU   WORKAREA+56
ENTSAVE  EQU   WORKAREA+60
QSAVE    EQU   WORKAREA+64
RQUEADD  EQU   WORKAREA+68
REGSAVE  EQU   WORKAREA+72
QBEGIN   EQU   WORKAREA+144
DVICERQT EQU   0
NXTENTAD EQU   DVICERQT
FLAG1    EQU   DVICERQT+4
DASDDV   EQU   FLAG1
DPROCSD  EQU   FLAG1
REPROCSS EQU   FLAG1
DVNAME   EQU   DVICERQT+5
DCHAR2   EQU   DVNAME+1
IEAVPSIB EQU   0
DEBEXPTR EQU   0
DEBSBPTR EQU   0
SDUMPPTR EQU   0
ESTAPTR  EQU   0
SDWORK   EQU   0
SDCNTRL  EQU   SDWORK
SVCDOPTS EQU   SDCNTRL+100
SVCDOPT1 EQU   SVCDOPTS
SVCDOPT2 EQU   SVCDOPTS+1
FLAGSONE EQU   SDCNTRL+102
CVRT11   EQU   SDCNTRL+368
CVRT1    EQU   CVRT11+4
CVRT2    EQU   SDCNTRL+376
SDCVRT4  EQU   CVRT2+2
SVCNAME  EQU   SDCNTRL+392
SVCNM1T5 EQU   SVCNAME
SVCNM6T8 EQU   SVCNAME+5
SVCNM7T8 EQU   SVCNM6T8+1
CCWCHAIN EQU   SDCNTRL+400
CCW1     EQU   CCWCHAIN
FLAGS1   EQU   CCW1+4
CCW2     EQU   CCWCHAIN+8
FLAGS2   EQU   CCW2+4
CCW3     EQU   CCWCHAIN+16
FLAGS3   EQU   CCW3+4
SDOUTBUF EQU   SDWORK+432
RCDCCHH  EQU   SDOUTBUF
INCHAR   EQU   0
CURCHAR  EQU   INCHAR
NXTCHAR  EQU   INCHAR+1
SCANLINE EQU   0
FIRST4   EQU   SCANLINE
FIRST3   EQU   FIRST4
FIRST2   EQU   FIRST3
THIRD    EQU   FIRST3+2
LASTCHAR EQU   FIRST4+3
PARMTAB  EQU   0
DUMP     EQU   PARMTAB+88
@NM00102 EQU   PARMTAB+272
NIPPAFLG EQU   @NM00102
NIPPTE   EQU   0
NIPPTADR EQU   NIPPTE
NIPPTOPF EQU   NIPPTE+4
NIPPTLST EQU   NIPPTOPF
NIPPTCAN EQU   NIPPTOPF
NIPPTATF EQU   NIPPTE+5
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTBRET  EQU   CVTMAP+82
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
NVT      EQU   0
NVTNPATR EQU   NVT+54
NVTNPREN EQU   NVTNPATR
NVTFLLB  EQU   NVT+55
NVTABSAV EQU   NVT+140
NVTFLCN  EQU   NVT+211
NVTWTPSW EQU   NVT+224
NVTWPSW2 EQU   NVTWTPSW+4
NVTFLWSC EQU   NVTWPSW2+3
NVTLOAD  EQU   NVT+232
NVTSENSE EQU   NVT+236
NVTSWAIT EQU   NVT+240
NVTTIME  EQU   NVT+244
NVTUCBFN EQU   NVT+248
NVTWTO   EQU   NVT+252
NVTWTOR  EQU   NVT+256
NVTWTOR2 EQU   NVT+260
NVTOPEN  EQU   NVT+264
NVTMOUNT EQU   NVT+268
NVTVIRT  EQU   NVT+276
NVTREAL  EQU   NVT+280
NVTSCHED EQU   NVT+284
NVTOPIO  EQU   NVT+288
NVTPTAB  EQU   NVT+372
NVTXCTL  EQU   NVT+428
NVTLOCAT EQU   NVT+436
NVTFLPO  EQU   NVT+528
RTCT     EQU   0
RTCTPLIB EQU   RTCT+4
RTCTSAP  EQU   RTCTPLIB
RTCTSAP1 EQU   RTCTSAP
RTCTSAP2 EQU   RTCTSAP+1
RTCTSAP3 EQU   RTCTSAP+2
RTCTSUP  EQU   RTCTPLIB+4
RTCTSUP1 EQU   RTCTSUP
RTCTSUP2 EQU   RTCTSUP+1
RTCTSUP3 EQU   RTCTSUP+2
RTCTSYD  EQU   RTCTPLIB+8
RTCTSY01 EQU   RTCTSYD
RTCTSDDS EQU   RTCT+36
RTCTDSNM EQU   RTCTSDDS
RTCTFLG  EQU   RTCTSDDS+3
RTCTDSUS EQU   RTCTFLG
RTCTDETP EQU   RTCTFLG
RTCTDCB  EQU   RTCTSDDS+4
RTCTDEV  EQU   RTCTSDDS+8
RTCTSDPL EQU   RTCT+156
RTCTRFLG EQU   RTCT+176
RTCTSDSW EQU   RTCT+180
RTCTTDCB EQU   RTCT+184
RTCTSDWK EQU   RTCT+220
RTCTERID EQU   RTCT+224
RTCTOPT  EQU   RTCT+236
RTCTASO  EQU   RTCT+252
RTCTASO1 EQU   RTCTASO
RTCTASO2 EQU   RTCTASO+1
RTCTSDI  EQU   RTCT+254
RTCTSDF  EQU   RTCT+264
RTCTSDF1 EQU   RTCTSDF
RTCTSDNO EQU   RTCTSDF1
RTCTSDF2 EQU   RTCTSDF+1
RTCTSDF3 EQU   RTCT+268
RTCTSDF4 EQU   RTCTSDF3+2
RTCTMOPT EQU   0
RTCTMSAO EQU   RTCTMOPT
RTCTSASD EQU   RTCTMSAO
RTCTSAO1 EQU   RTCTSASD
RTCTSAO2 EQU   RTCTSASD+1
RTCTSAPD EQU   RTCTMSAO+2
RTCTSAO3 EQU   RTCTSAPD
RTCTSAO4 EQU   RTCTSAPD+1
RTCTSAMG EQU   RTCTSAO4
RTCTMSUO EQU   RTCTMOPT+4
RTCTSUSD EQU   RTCTMSUO
RTCTSUO1 EQU   RTCTSUSD
RTCTSUO2 EQU   RTCTSUSD+1
RTCTSUPD EQU   RTCTMSUO+2
RTCTSUO3 EQU   RTCTSUPD
RTCTSUO4 EQU   RTCTSUPD+1
RTCTSUMG EQU   RTCTSUO4
RTCTMSYO EQU   RTCTMOPT+8
RTCTSD01 EQU   RTCTMSYO
RTCTSD04 EQU   RTCTMSYO+3
RTCTSMMG EQU   RTCTSD04
RTCTMSDO EQU   RTCTMOPT+12
RTCTSDOD EQU   RTCTMSDO
RTCTSDO1 EQU   RTCTSDOD
RTCTSDO2 EQU   RTCTSDOD+1
RTCTSDO3 EQU   RTCTMSDO+2
RTCTSDO4 EQU   RTCTMSDO+3
RTCTSDMG EQU   RTCTSDO4
ECB      EQU   0
ECBRB    EQU   ECB
ECBEVTB  EQU   ECBRB
ECBEXTB  EQU   ECBEVTB
ECBCC    EQU   ECBEXTB
ECBCCCNT EQU   ECBEXTB+1
ECBRBA   EQU   ECBCCCNT
ECBEVTBA EQU   ECBRBA
ECBEXTBA EQU   ECBEVTBA
ECBBYTE3 EQU   ECBEXTBA+2
ECBEXTND EQU   ECBBYTE3
NIPPAHDR EQU   0
NIPPAREA EQU   0
NIPPABDL EQU   NIPPAREA+12
NIPPABDH EQU   NIPPABDL
NIPPAIOD EQU   NIPPAREA+32
NIPPAECB EQU   NIPPAIOD+84
IOBPREFX EQU   0
IOBCFLG1 EQU   IOBPREFX
IOBSTDRD EQU   0
IOBFLAG1 EQU   IOBSTDRD
IOBCYCCK EQU   IOBFLAG1
IOBUNREL EQU   IOBFLAG1
IOBRSTRT EQU   IOBFLAG1
IOBFLAG2 EQU   IOBSTDRD+1
IOBPURGE EQU   IOBFLAG2
IOBRDHA0 EQU   IOBFLAG2
IOBSENS0 EQU   IOBSTDRD+2
IOBS0B7  EQU   IOBSENS0
IOBSENS1 EQU   IOBSTDRD+3
IOBECBPT EQU   IOBSTDRD+4
IOBFLAG3 EQU   IOBSTDRD+8
IOBFL3   EQU   IOBFLAG3
IOBCNC   EQU   IOBFL3
IOBICL   EQU   IOBFL3
IOBCSW   EQU   IOBSTDRD+9
IOBIOCSW EQU   IOBCSW
IOBSTBYT EQU   IOBIOCSW+3
IOBUSTAT EQU   IOBSTBYT
IOBCSTAT EQU   IOBSTBYT+1
IOBSTART EQU   IOBSTDRD+16
IOBDCBPT EQU   IOBSTDRD+20
IOBFLAG4 EQU   IOBDCBPT
IOBRESTR EQU   IOBSTDRD+24
IOBINCAM EQU   IOBSTDRD+28
IOBBTAMF EQU   IOBINCAM
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCB3TAPE EQU   UCBDVCLS
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00114 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
CDENTRY  EQU   0
CDATTR   EQU   CDENTRY+28
CDATTR2  EQU   CDENTRY+29
LPDE     EQU   0
LPDEATTR EQU   LPDE+28
LPDEATT2 EQU   LPDE+29
LPDEMJNM EQU   LPDE+32
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBAPPAD EQU   DEBBASIC+28
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBSTRCC EQU   DEBDASD+6
DEBSTRHH EQU   DEBDASD+8
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
IHADCB   EQU   0
IHADCS00 EQU   0
DCBFDAD  EQU   IHADCS00+5
IHADCS01 EQU   0
DCBDVTBL EQU   IHADCS01
IHADCS02 EQU   0
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBIBPCT EQU   DCBIFLG
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
DCBIFPCT EQU   DCBIFLGS
IHADCS28 EQU   0
DCBOPTCD EQU   IHADCS28
DCBOPTZ  EQU   DCBOPTCD
SDUMP    EQU   0
SDUFLAG0 EQU   SDUMP
SDUFLAG1 EQU   SDUMP+1
SDUSDAT1 EQU   SDUMP+2
SDUSDAT2 EQU   SDUMP+3
SDUMASID EQU   SDUMP+20
NWTOHDR  EQU   0
NWTOFL   EQU   NWTOHDR+2
NWTORLST EQU   0
NWTORFL  EQU   NWTORLST+10
NIPSPE   EQU   0
NIPMNTPL EQU   0
NMNTDS   EQU   NIPMNTPL
NMNTVS   EQU   NIPMNTPL+12
NMNTUCB  EQU   NMNTVS
NMNTDT   EQU   NIPMNTPL+18
NMNTFL   EQU   NIPMNTPL+20
NIPOPNPL EQU   0
NOPNDS   EQU   NIPOPNPL
NOPNDCB  EQU   NIPOPNPL+12
NOPNUCB  EQU   NIPOPNPL+16
NOPNFL   EQU   NIPOPNPL+20
NIPSCHDL EQU   0
ESTA     EQU   0
ESTAEXT  EQU   ESTA
ESTAFLG1 EQU   ESTAEXT
ESTAIO   EQU   ESTAFLG1
ESTAFGRS EQU   ESTA+12
ESTAFLG2 EQU   ESTAFGRS
PVT      EQU   0
PVTFLAG1 EQU   PVT
PVTFLAG2 EQU   PVT+1
PVTPSIB  EQU   PVT+72
PVTQS    EQU   PVT+304
PVTWSAX  EQU   PVT+344
PVTPCBQS EQU   PVT+1852
SMDLR    EQU   0
SMDLRHDR EQU   SMDLR
SMWKRSCB EQU   0
SMWKFLGA EQU   SMWKRSCB
SMWKRSFM EQU   SMWKRSCB+16
SMWK     EQU   0
SMWKNAME EQU   SMWK
SMWKFLGS EQU   SMWK+4
SMWKFLG1 EQU   SMWKFLGS
SMWKENTY EQU   SMWK+152
SMWKSSDE EQU   SMWK+156
SMWKPFXB EQU   SMWK+160
SMWKPFXE EQU   SMWK+164
SMWKPSW  EQU   SMWK+168
SMWKREGS EQU   SMWK+676
DUMPTBL  EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
UCBBGN   EQU   0
CVTS01   EQU   CVTPGSIA
CVTPVTP  EQU   CVTS01+8
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTSDRM  EQU   CVTS01+192
CVTRTMCT EQU   CVTS01+224
CVTSDBF  EQU   CVTS01+240
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
PVTPTR   EQU   CVTPVTP
SDIECB   EQU   EXCPECB
SDWORKEN EQU   CURRENT
STATUSB  EQU   IOBSTBYT
UNITCHK  EQU   STATUSB
UNITEXC  EQU   STATUSB
PGMCHK   EQU   STATUSB+1
PROTECT  EQU   STATUSB+1
DATACHK  EQU   STATUSB+1
CONTROL  EQU   STATUSB+1
INTFCHK  EQU   STATUSB+1
CHAINCK  EQU   STATUSB+1
MNDEC    EQU   NMNTDT
MNTDEC1  EQU   MNDEC
MNTDEC2  EQU   MNDEC+1
IOBORG01 EQU   IOBPREFX+8
IOBNIOBA EQU   IOBORG01
IOBNFLG1 EQU   IOBNIOBA
IOBPRTOV EQU   IOBNFLG1
IOBORG02 EQU   IOBPREFX+8
IOBDQADA EQU   IOBORG02
IOBDEQIN EQU   IOBDQADA
IOBORG03 EQU   IOBPREFX+12
IOBORG04 EQU   IOBINCAM
IOBORG12 EQU   IOBINCAM
IOBFL4   EQU   IOBORG12
IOBEXTEN EQU   IOBSTDRD+32
IOBSEEK  EQU   IOBEXTEN
IOBBB    EQU   IOBSEEK+1
IOBCC    EQU   IOBSEEK+3
IOBHH    EQU   IOBSEEK+5
IOBORG05 EQU   IOBEXTEN
IOBORG06 EQU   IOBEXTEN
IOBNXTPT EQU   IOBORG06+4
IOBSTATA EQU   IOBNXTPT
IOBORG07 EQU   IOBEXTEN+8
W1IEXTEN EQU   IOBORG07
IOBORG08 EQU   IOBEXTEN+8
IOBINDCT EQU   IOBORG08+4
IOBUNSQR EQU   IOBORG08+5
IOBFCHAD EQU   IOBORG08+8
IOBORG09 EQU   IOBEXTEN+8
IOBDPLAD EQU   IOBORG09+4
IOBDTYPE EQU   IOBORG09+8
IOBDTYP2 EQU   IOBORG09+9
IOBDSTAT EQU   IOBORG09+10
IOBSTAT1 EQU   IOBDSTAT
IOBORG10 EQU   IOBEXTEN+8
IOBSEEK2 EQU   IOBORG10
IOBORG11 EQU   IOBEXTEN
IOBERCT  EQU   IOBORG11
IOBUCBXV EQU   IOBERCT
IOBNAME  EQU   IOBORG11+4
IOBORG13 EQU   IOBEXTEN
IOBSKADR EQU   IOBORG13
UCBOBS01 EQU   UCBDEV
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00113 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
PSARSVTE EQU   PSARSVT
I004     EQU   ILIST
I00401   EQU   I004
I00403   EQU   I004+5
I00404   EQU   I004+8
I00405   EQU   I004+9
FLC      EQU   PSA
*                                      START UNREFERENCED COMPONENTS
I00402   EQU   I004+4
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00113
UCBSKPFG EQU   @NM00113
UCBRIPND EQU   @NM00113
UCBRTIAC EQU   @NM00113
UCBRSV79 EQU   @NM00113
UCBRSV78 EQU   @NM00113
UCBRSV77 EQU   @NM00113
UCBOLTEP EQU   @NM00113
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBDQDSP EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00112 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVOLI  EQU   UCBOBS01+4
UCBVTOC  EQU   UCBOBS01
IOBSKSS  EQU   IOBSKADR+3
IOBSK0   EQU   IOBSKADR+2
IOBSKTT  EQU   IOBSKADR+1
IOBSKRV  EQU   IOBSKADR
IOBCSWSV EQU   IOBORG11+17
IOBSENSV EQU   IOBORG11+16
IOBRCD   EQU   IOBORG11+12
IOBMDREC EQU   IOBORG11+8
IOBNAMEA EQU   IOBNAME+1
IOBNAMSZ EQU   IOBNAME
IOBERCTA EQU   IOBERCT+1
IOBRTYPE EQU   IOBUCBXV
IOBRDCHP EQU   IOBORG10+20
IOBNEXTA EQU   IOBORG10+16
IOBREADA EQU   IOBORG10+12
IOBBUFC  EQU   IOBORG10+8
IOBSK2R  EQU   IOBSEEK2+7
IOBSK2HH EQU   IOBSEEK2+5
IOBSK2CC EQU   IOBSEEK2+3
IOBSK2BB EQU   IOBSEEK2+1
IOBSK2M  EQU   IOBSEEK2
IOBCHNPR EQU   IOBORG09+40
IOBDNCRF EQU   IOBORG09+32
IOBRSV35 EQU   IOBORG09+24
IOBDQPTR EQU   IOBORG09+20
IOBRSV34 EQU   IOBORG09+18
IOBDBYTN EQU   IOBORG09+16
IOBDCPND EQU   IOBORG09+12
IOBSTAT2 EQU   IOBDSTAT+1
IOBSIORT EQU   IOBSTAT1
IOBADDVU EQU   IOBSTAT1
IOBBUFF  EQU   IOBSTAT1
IOBENQUE EQU   IOBSTAT1
IOBPASS2 EQU   IOBSTAT1
IOBSYNCH EQU   IOBSTAT1
IOBNEWVL EQU   IOBSTAT1
IOBABNRM EQU   IOBSTAT1
IOBRELEX EQU   IOBDTYP2
IOBADDTY EQU   IOBDTYP2
IOBTYPE  EQU   IOBDTYP2
IOBRQUST EQU   IOBDTYP2
IOBSUFFX EQU   IOBDTYP2
IOBSBLKL EQU   IOBDTYP2
IOBSKEY  EQU   IOBDTYP2
IOBRELBL EQU   IOBDTYPE
IOBRDEXC EQU   IOBDTYPE
IOBDYNBF EQU   IOBDTYPE
IOBACTAD EQU   IOBDTYPE
IOBFDBCK EQU   IOBDTYPE
IOBEXTSC EQU   IOBDTYPE
IOBOVFLO EQU   IOBDTYPE
IOBVERFY EQU   IOBDTYPE
IOBDPLB  EQU   IOBDPLAD+1
IOBDAYLI EQU   IOBDPLAD
IOBDIOBS EQU   IOBORG09+2
IOBDBYTR EQU   IOBORG09
IOBBCHAD EQU   IOBORG08+12
IOBFCHNB EQU   IOBFCHAD+1
IOBCOUNT EQU   IOBFCHAD
IOBASYN  EQU   IOBORG08+7
IOBAPP   EQU   IOBORG08+6
IOBRSV32 EQU   IOBUNSQR
IOBRSV31 EQU   IOBUNSQR
IOBRSV30 EQU   IOBUNSQR
IOBKNRWR EQU   IOBUNSQR
IOBKNWR  EQU   IOBUNSQR
IOBNTAV2 EQU   IOBUNSQR
IOBNTAV1 EQU   IOBUNSQR
IOBCPBSY EQU   IOBUNSQR
IOBCHNNL EQU   IOBINDCT
IOBRSV29 EQU   IOBINDCT
IOBRSV28 EQU   IOBINDCT
IOBRSV27 EQU   IOBINDCT
IOBKEYAD EQU   IOBINDCT
IOBOVPTR EQU   IOBINDCT
IOBUNSCH EQU   IOBINDCT
IOBDEQCP EQU   IOBINDCT
IOBCCWAD EQU   IOBORG08
W1OEXTEN EQU   W1IEXTEN
IOBCCW   EQU   IOBORG06+8
IOBNXTPB EQU   IOBNXTPT+1
IOBRSV26 EQU   IOBSTATA
IOBRSV25 EQU   IOBSTATA
IOBRSV24 EQU   IOBSTATA
IOBRSV23 EQU   IOBSTATA
IOBRSV22 EQU   IOBSTATA
IOBRSV21 EQU   IOBSTATA
IOBRSV20 EQU   IOBSTATA
IOBAVLFL EQU   IOBSTATA
IOBRSV37 EQU   IOBORG06+1
IOBUCBXG EQU   IOBORG06
IOBCPA   EQU   IOBORG05+32
IOBERINF EQU   IOBORG05+16
IOBERCCW EQU   IOBORG05+8
IOBSNDPT EQU   IOBORG05+7
IOBRCVPT EQU   IOBORG05+6
IOBWORK  EQU   IOBORG05+1
IOBUCBX  EQU   IOBORG05
IOBR     EQU   IOBSEEK+7
IOBHH2   EQU   IOBHH+1
IOBHH1   EQU   IOBHH
IOBCC2   EQU   IOBCC+1
IOBCC1   EQU   IOBCC
IOBBB2   EQU   IOBBB+1
IOBBB1   EQU   IOBBB
IOBM     EQU   IOBSEEK
IOBRSV46 EQU   IOBFL4
IOBRSV47 EQU   IOBFL4
IOBENT   EQU   IOBFL4
IOBEQP   EQU   IOBFL4
IOBBUS   EQU   IOBFL4
IOBDCK   EQU   IOBFL4
IOBREJ   EQU   IOBFL4
IOBOVR   EQU   IOBFL4
IOBCRILC EQU   IOBORG04+1
IOBCRDCC EQU   IOBORG04
IOBGQECB EQU   IOBORG03
IOBSWAP  EQU   IOBORG02+4
IOBDQADB EQU   IOBDQADA+1
IOBRSV13 EQU   IOBDEQIN
IOBRSV12 EQU   IOBDEQIN
IOBRSV11 EQU   IOBDEQIN
IOBRSV10 EQU   IOBDEQIN
IOBRSV09 EQU   IOBDEQIN
IOBRSV08 EQU   IOBDEQIN
IOBRSV07 EQU   IOBDEQIN
IOBDEQ   EQU   IOBDEQIN
IOBNECB  EQU   IOBORG01+4
IOBNIOBB EQU   IOBNIOBA+1
IOBFIRST EQU   IOBNFLG1
IOBUPERR EQU   IOBNFLG1
IOBSPAN  EQU   IOBNFLG1
IOBBKSPC EQU   IOBNFLG1
IOBUPDAT EQU   IOBNFLG1
IOBREAD  EQU   IOBNFLG1
IOBWRITE EQU   IOBNFLG1
IOBSEGMT EQU   IOBPRTOV
@NM00006 EQU   STATUSB+1
@NM00005 EQU   STATUSB
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00193 EQU   SMWK+978
SMWKNSTB EQU   SMWK+976
SMWKNFFD EQU   SMWK+974
SMWKNTDQ EQU   SMWK+972
SMWKNTDI EQU   SMWK+970
SMWKNFUS EQU   SMWK+968
SMWKNFAQ EQU   SMWK+966
SMWKNFRQ EQU   SMWK+964
SMWKPSSE EQU   SMWK+960
SMWKTQE  EQU   SMWK+832
@NM00192 EQU   SMWK+828
SMWKTQEA EQU   SMWK+824
SMWKSVLN EQU   SMWK+820
SMWKNDIE EQU   SMWK+818
SMWKNFRE EQU   SMWK+816
SMWKNFRI EQU   SMWK+814
SMWKALEN EQU   SMWK+812
SMWKSCBF EQU   SMWK+810
SMWKREGN EQU   SMWK+808
SMWKIDX2 EQU   SMWK+806
SMWKIDX1 EQU   SMWK+804
SMWKSREG EQU   SMWKREGS
SMWKHEAD EQU   SMWK+656
SMWKSMVL EQU   SMWK+652
SMWKSMMV EQU   SMWK+648
SMWKSMBF EQU   SMWK+644
SMWKSMLS EQU   SMWK+640
SMWKSMRG EQU   SMWK+636
SMWKSMDT EQU   SMWK+632
SMWKSDMP EQU   SMWK+628
SMWKSMLK EQU   SMWK+624
@NM00191 EQU   SMWK+622
SMWKFRUS EQU   SMWK+620
SMWKRSIX EQU   SMWK+618
SMWKNFAV EQU   SMWK+616
SMWKRFAD EQU   SMWK+612
SMWKRSM  EQU   SMWK+196
SMWKCPUS EQU   SMWK+192
SMWKPEND EQU   SMWK+188
SMWKSAVA EQU   SMWK+184
SMWKENDA EQU   SMWK+180
SMWKVADR EQU   SMWK+176
SMWKPSWA EQU   SMWKPSW+4
@NM00190 EQU   SMWKPSW+2
SMWKPSWK EQU   SMWKPSW+1
SMWKPSWS EQU   SMWKPSW
SMWKSAV1 EQU   SMWK+80
SMWKSAVE EQU   SMWK+8
SMWKFLG4 EQU   SMWKFLGS+3
SMWKFLG3 EQU   SMWKFLGS+2
SMWKFLG2 EQU   SMWKFLGS+1
@NM00189 EQU   SMWKFLG1
@NM00188 EQU   SMWKFLG1
SMWKSTBK EQU   SMWKFLG1
SMWKSLCL EQU   SMWKFLG1
SMWKRSNM EQU   SMWKFLG1
SMWKRBFL EQU   SMWKFLG1
SMWKRBUF EQU   SMWKFLG1
SMWKSLCK EQU   SMWKFLG1
SMWKFRMA EQU   SMWKRSFM
SMWKPRSR EQU   SMWKRSCB+12
SMWKTSDS EQU   SMWKRSCB+8
SMWKFRPT EQU   SMWKRSCB+4
SMWKFRHD EQU   SMWKRSCB+2
SMWKFLGB EQU   SMWKRSCB+1
@NM00187 EQU   SMWKFLGA
SMWKEVRY EQU   SMWKFLGA
SMDLRDAT EQU   SMDLR+20
@NM00186 EQU   SMDLRHDR+17
SMDLRMSG EQU   SMDLRHDR+16
SMDLRPL  EQU   SMDLRHDR+12
SMDLRADR EQU   SMDLRHDR+8
SMDLRLEN EQU   SMDLRHDR+4
@NM00185 EQU   SMDLRHDR+2
SMDLRID  EQU   SMDLRHDR
PVTEND   EQU   PVT+1944
PVTTASID EQU   PVT+1942
PVTXXXXX EQU   PVT+1940
PVTMVCLC EQU   PVT+1936
PVTVCONS EQU   PVT+1896
PVTPRSB  EQU   PVT+1892
PVTCIOQL EQU   PVTPCBQS+36
PVTCIOQF EQU   PVTPCBQS+32
PVTGFADL EQU   PVTPCBQS+28
PVTGFADF EQU   PVTPCBQS+24
PVTFPCBL EQU   PVTPCBQS+20
PVTFPCBF EQU   PVTPCBQS+16
PVTPCBQR EQU   PVTPCBQS
PVTLPAFX EQU   PVT+1850
PVTLSQAF EQU   PVT+1848
PVTLPAR  EQU   PVT+1844
PVTLPAI  EQU   PVT+1840
PVTLPAFC EQU   PVT+1838
PVTCHUIC EQU   PVT+1836
PVTCOMFX EQU   PVT+1834
PVTSQAFX EQU   PVT+1832
PVTCNTFX EQU   PVT+1830
PVTDEFFX EQU   PVT+1828
PVTFIXOK EQU   PVT+1826
PVTPEROK EQU   PVT+1824
PVTMAXFX EQU   PVT+1822
PVTPERFX EQU   PVT+1820
PVTRSRB  EQU   PVT+1776
PVTRESV5 EQU   PVT+1773
PVTSRBS  EQU   PVT+1772
PVTSSRB  EQU   PVT+1768
PVTACA   EQU   PVTWSAX+1400
PVTSAVE  EQU   PVTWSAX+1328
PVTWSA18 EQU   PVTWSAX+1256
PVTWSA17 EQU   PVTWSAX+1184
PVTWSA16 EQU   PVTWSAX+1112
PVTWSA15 EQU   PVTWSAX+1040
PVTWSA14 EQU   PVTWSAX+968
PVTWSA13 EQU   PVTWSAX+896
PVTWSA12 EQU   PVTWSAX+824
PVTWSA11 EQU   PVTWSAX+752
PVTWSA10 EQU   PVTWSAX+672
PVTWSA9  EQU   PVTWSAX+592
PVTWSA8  EQU   PVTWSAX+504
PVTWSA7  EQU   PVTWSAX+432
PVTWSA6  EQU   PVTWSAX+360
PVTWSA5  EQU   PVTWSAX+288
PVTWSA4  EQU   PVTWSAX+216
PVTWSA3  EQU   PVTWSAX+144
PVTWSA2  EQU   PVTWSAX+72
PVTWSA1  EQU   PVTWSAX
PVTPFTQR EQU   PVTQS+20
PVTRSBQL EQU   PVTQS+18
PVTRSBQF EQU   PVTQS+16
PVTSQAQL EQU   PVTQS+14
PVTSQAQF EQU   PVTQS+12
PVTCFQL  EQU   PVTQS+10
PVTCFQF  EQU   PVTQS+8
PVTRSRVL EQU   PVTQS+6
PVTRSRVF EQU   PVTQS+4
PVTAFQL  EQU   PVTQS+2
PVTAFQF  EQU   PVTQS
PVTSPFR  EQU   PVT+302
PVTCFMCT EQU   PVT+300
PVTSPREC EQU   PVT+296
PVTCAREC EQU   PVT+292
PVTCAOUT EQU   PVT+288
PVTCAIN  EQU   PVT+284
PVTNSWPS EQU   PVT+280
PVTNPREC EQU   PVT+276
PVTSPOUT EQU   PVT+272
PVTSPIN  EQU   PVT+268
PVTVAMR  EQU   PVT+264
PVTVAMO  EQU   PVT+260
PVTVAMI  EQU   PVT+256
PVTNPOUT EQU   PVT+252
PVTNPIN  EQU   PVT+248
PVTPRSET EQU   PVT+244
PVTFRSLT EQU   PVT+240
PVTPAGIO EQU   PVT+236
PVTSWPIO EQU   PVT+232
PVTPSWPP EQU   PVT+228
PVTPPREF EQU   PVT+224
PVTPOPBR EQU   PVT+220
PVTPRELF EQU   PVT+216
PVTPRELV EQU   PVT+212
PVTPFREE EQU   PVT+208
PVTPRELS EQU   PVT+204
PVTPOUT  EQU   PVT+200
PVTPFXLD EQU   PVT+196
PVTPITAS EQU   PVT+192
PVTPSRBP EQU   PVT+188
PVTPDSEG EQU   PVT+184
PVTPCSGB EQU   PVT+180
PVTPCSEG EQU   PVT+176
PVTPINV  EQU   PVT+172
PVTPSWPC EQU   PVT+168
PVTPSOUT EQU   PVT+164
PVTPSWIN EQU   PVT+160
PVTPRCV  EQU   PVT+156
PVTPRCFI EQU   PVT+152
PVTPRCF  EQU   PVT+148
PVTPVRC  EQU   PVT+144
PVTPVRIN EQU   PVT+140
PVTPVRLS EQU   PVT+136
PVTPVEQR EQU   PVT+132
PVTPPIOI EQU   PVT+128
PVTPVRPO EQU   PVT+124
PVTPRFR  EQU   PVT+120
PVTPFP2  EQU   PVT+116
PVTPFP   EQU   PVT+112
PVTPFTE  EQU   PVT+108
PVTPCB   EQU   PVT+104
PVTREP2  EQU   PVT+100
PVTPIOCP EQU   PVT+96
PVTPIOP  EQU   PVT+92
PVTPGFAD EQU   PVT+88
PVTPGFA  EQU   PVT+84
PVTPSQA  EQU   PVT+80
PVTPSINT EQU   PVT+76
PVTSRBID EQU   PVT+68
PVTPCIWA EQU   PVT+64
PVTHQSA  EQU   PVT+62
PVTLQSA  EQU   PVT+60
PVTOROOT EQU   PVT+56
PVTPRCA  EQU   PVT+52
PVTREUS  EQU   PVT+48
PVTSQNPC EQU   PVT+47
PVTSQVRC EQU   PVT+46
PVTRSUS  EQU   PVT+44
PVTVROOT EQU   PVT+40
PVTPCBLO EQU   PVT+38
PVTPCBCT EQU   PVT+36
PVTDFRS  EQU   PVT+34
PVTRSQA  EQU   PVT+32
PVTPTLB  EQU   PVT+31
PVTPCBNO EQU   PVT+30
PVTSRBNO EQU   PVT+29
PVTSQDC  EQU   PVT+28
PVTLCSA  EQU   PVT+26
PVTLPRIV EQU   PVT+24
PVTLVR   EQU   PVT+22
PVTFVR   EQU   PVT+20
PVTLPFN  EQU   PVT+18
PVTFPFN  EQU   PVT+16
PVTPFTP  EQU   PVT+12
PVTSSPIN EQU   PVT+11
PVTPCBS  EQU   PVT+10
PVTPOOL  EQU   PVT+8
PVTAFCOK EQU   PVT+6
PVTAFCLO EQU   PVT+4
PVTAFC   EQU   PVT+2
@NM00184 EQU   PVTFLAG2
PVTRSMGM EQU   PVTFLAG2
PVTDUMP  EQU   PVTFLAG1
PVTSIT   EQU   PVTFLAG1
PVTLSI   EQU   PVTFLAG1
PVTAPREF EQU   PVTFLAG1
PVTPCBLT EQU   PVTFLAG1
PVTSRBIU EQU   PVTFLAG1
PVTBGMS  EQU   PVTFLAG1
PVTPMSG  EQU   PVTFLAG1
ESTARSVI EQU   ESTAFGRS+1
@NM00159 EQU   ESTAFLG2
ESTABRNT EQU   ESTAFLG2
@NM00158 EQU   ESTAFLG2
ESTAEREC EQU   ESTAFLG2
ESTATERM EQU   ESTAFLG2
@NM00157 EQU   ESTAFLG2
ESTAOWNR EQU   ESTA+8
ESTAPARM EQU   ESTA+4
ESTAEXIT EQU   ESTAEXT+1
ESTAHALT EQU   ESTAIO
ESTANOIO EQU   ESTAIO
ESTASYNC EQU   ESTAFLG1
@NM00156 EQU   ESTAFLG1
ESTAESTA EQU   ESTAFLG1
@NM00155 EQU   ESTAFLG1
ESTASTAR EQU   ESTAFLG1
ESTASTAI EQU   ESTAFLG1
NSCHDCPU EQU   NIPSCHDL+8
NSCHDPRM EQU   NIPSCHDL+4
NSCHDPTR EQU   NIPSCHDL
@NM00154 EQU   NIPOPNPL+22
NOPNRC   EQU   NIPOPNPL+21
NOPNFLSX EQU   NOPNFL
NOPNFLLC EQU   NOPNFL
NOPNFLLB EQU   NOPNFL
NOPNFLNB EQU   NOPNFL
NOPNFLI  EQU   NOPNFL
NOPNFLM  EQU   NOPNFL
NOPNFAU  EQU   NOPNFL
NOPNFRS  EQU   NOPNFL
NOPNDSA  EQU   NOPNDS
@NM00153 EQU   NIPMNTPL+21
NMNTFLB  EQU   NMNTFL
NMNTFLC  EQU   NMNTFL
NMNTFLI  EQU   NMNTFL
NMNTFUS  EQU   NMNTFL
@NM00152 EQU   NMNTFL
NMNTDSA  EQU   NMNTDS
NIPSPEA  EQU   NIPSPE+4
NIPSPEQ  EQU   NIPSPE
NWTORMSG EQU   NWTORLST+12
@NM00151 EQU   NWTORLST+11
@NM00150 EQU   NWTORFL
NWTORFLB EQU   NWTORFL
@NM00149 EQU   NWTORFL
NWTORFLA EQU   NWTORFL
NMTORRDL EQU   NWTORLST+8
NWTORECB EQU   NWTORLST+4
NWTORRPA EQU   NWTORLST
@NM00148 EQU   NWTOFL
NWTOFLNC EQU   NWTOFL
NWTOFLNH EQU   NWTOFL
NWTOLNG  EQU   NWTOHDR
SDUSYSMC EQU   SDUMP+36
SDUSYSMS EQU   SDUMP+32
SDUSUMLP EQU   SDUMP+28
SDUASIDP EQU   SDUMP+24
SDUTASID EQU   SDUMASID+2
SDUCASID EQU   SDUMASID
SDUECBAD EQU   SDUMP+16
SDUHDRAD EQU   SDUMP+12
SDUSTORA EQU   SDUMP+8
SDUDCBAD EQU   SDUMP+4
@NM00147 EQU   SDUSDAT2
SDUNASQA EQU   SDUSDAT2
SDUNAPSA EQU   SDUSDAT2
SDUNSMDP EQU   SDUSDAT2
SDUSMDMP EQU   SDUSDAT2
SDUSWA   EQU   SDUSDAT2
SDUCSA   EQU   SDUSDAT2
SDUTRT   EQU   SDUSDAT1
SDULPA   EQU   SDUSDAT1
SDURGN   EQU   SDUSDAT1
SDULSQA  EQU   SDUSDAT1
SDUSQA   EQU   SDUSDAT1
SDUNUC   EQU   SDUSDAT1
SDUPSA   EQU   SDUSDAT1
SDUALPSA EQU   SDUSDAT1
@NM00146 EQU   SDUFLAG1
SDUSLIP  EQU   SDUFLAG1
SDUSULST EQU   SDUFLAG1
SDUASLST EQU   SDUFLAG1
SDUNEW   EQU   SDUFLAG1
SDUABEND EQU   SDUFLAG1
DUMPTYPE EQU   SDUFLAG1
SDUBRANH EQU   SDUFLAG0
SDUQUIET EQU   SDUFLAG0
SDUASID  EQU   SDUFLAG0
SDUECB   EQU   SDUFLAG0
SDUHDR   EQU   SDUFLAG0
SDUSTOR  EQU   SDUFLAG0
SDUBUF   EQU   SDUFLAG0
SDUDCB   EQU   SDUFLAG0
@NM00145 EQU   IHADCS28+1
@NM00144 EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
@NM00143 EQU   DCBOPTCD
DCBDEBA  EQU   DCBDEBAD+1
@NM00142 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBCH12  EQU   DCBIFPCT
DCBCH9   EQU   DCBIFPCT
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00141 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBICH12 EQU   DCBIBPCT
DCBICH9  EQU   DCBIBPCT
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBRECL  EQU   DCBRECLA
DCBEODA  EQU   DCBEODAD+1
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00140 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00139 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00138 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00137 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
@NM00136 EQU   DCBDSRG1
@NM00135 EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBKEYLE EQU   DCBRELB
@NM00134 EQU   IHADCS02+19
DCBDEN   EQU   IHADCS02+18
@NM00133 EQU   IHADCS02+17
DCBTRTCH EQU   IHADCS02+16
DCBBLKCT EQU   IHADCS02+12
@NM00132 EQU   IHADCS02
DCBTRBAL EQU   IHADCS01+6
@NM00131 EQU   IHADCS01+5
@NM00130 EQU   IHADCS01+4
DCBDVTBA EQU   DCBDVTBL+1
@NM00129 EQU   DCBDVTBL
DCBKEYCN EQU   IHADCS00+4
DCBRELAD EQU   IHADCS00
@NM00128 EQU   IHADCB
DEBXSAMB EQU   DEBXTN+28
DEBXOPNJ EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXDSSI EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXCDCB EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBAMTYP EQU   DEBPREFX+13
DEBLNGTH EQU   DEBPREFX+12
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBESMVR EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00127 EQU   DEBACS08+12
@NM00126 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00125 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00124 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBLRECL EQU   DEBACSMD+14
DEBBLKSI EQU   DEBACSMD+12
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBBINUM EQU   DEBDASD+4
DEBUCBA  EQU   DEBUCBAD+1
DEBDVMOD EQU   DEBUCBAD
DEBAPPB  EQU   DEBAPPAD+1
DEBEXSCL EQU   DEBAPPAD
DEBDCBB  EQU   DEBDCBAD+1
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBNMEXT EQU   DEBUSRPG
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBDEBB  EQU   DEBDEBAD+1
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
LPDEXTAD EQU   LPDEMJNM+4
LPDEXTLN EQU   LPDEMJNM
LPDEATT3 EQU   LPDE+30
LPDEAUTH EQU   LPDEATT2
LPDESYSL EQU   LPDEATT2
@NM00123 EQU   LPDEATT2
@NM00122 EQU   LPDEATT2
LPDERLC  EQU   LPDEATT2
LPDEXLE  EQU   LPDEATT2
@NM00121 EQU   LPDEATT2
LPDENLR  EQU   LPDEATTR
@NM00120 EQU   LPDEATTR
LPDEMIN  EQU   LPDEATTR
@NM00119 EQU   LPDEATTR
LPDESER  EQU   LPDEATTR
LPDEREN  EQU   LPDEATTR
@NM00118 EQU   LPDEATTR
LPDENIP  EQU   LPDEATTR
@NM00117 EQU   LPDE+26
LPDEUSE  EQU   LPDE+24
LPDEXLP  EQU   LPDE+20
LPDENTP  EQU   LPDE+16
LPDENAME EQU   LPDE+8
LPDERBP  EQU   LPDE+4
LPDECHN  EQU   LPDE
CDATTR3  EQU   CDENTRY+30
CDAUTH   EQU   CDATTR2
CDSYSLIB EQU   CDATTR2
CDOLY    EQU   CDATTR2
@NM00116 EQU   CDATTR2
CDRLC    EQU   CDATTR2
CDXLE    EQU   CDATTR2
CDREL    EQU   CDATTR2
CDSPZ    EQU   CDATTR2
CDNLR    EQU   CDATTR
CDJPA    EQU   CDATTR
CDMIN    EQU   CDATTR
CDNFN    EQU   CDATTR
CDSER    EQU   CDATTR
CDREN    EQU   CDATTR
CDNIC    EQU   CDATTR
CDNIP    EQU   CDATTR
@NM00115 EQU   CDENTRY+26
CDUSE    EQU   CDENTRY+24
CDXLMJP  EQU   CDENTRY+20
CDENTPT  EQU   CDENTRY+16
CDNAME   EQU   CDENTRY+8
CDRRBP   EQU   CDENTRY+4
CDCHAIN  EQU   CDENTRY
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBFCBPE EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00114
UCBHALI  EQU   @NM00114
UCBRSV09 EQU   @NM00114
UCBRSV08 EQU   @NM00114
UCBRSV07 EQU   @NM00114
UCBRSV06 EQU   @NM00114
UCBRSV05 EQU   @NM00114
UCBRSV04 EQU   @NM00114
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00111 EQU   UCB
IOBERRCT EQU   IOBSTDRD+30
IOBRSV19 EQU   IOBINCAM+1
IOBOLTST EQU   IOBBTAMF
IOBRFTMG EQU   IOBBTAMF
IOBRSV17 EQU   IOBBTAMF
IOBRSV16 EQU   IOBBTAMF
IOBRSV15 EQU   IOBBTAMF
IOBRSV14 EQU   IOBBTAMF
IOBINUSE EQU   IOBBTAMF
IOBPRMER EQU   IOBBTAMF
IOBRSTRB EQU   IOBRESTR+1
IOBREPOS EQU   IOBRESTR
IOBDCBPB EQU   IOBDCBPT+1
IOBRSV44 EQU   IOBFLAG4
IOBJES3I EQU   IOBFLAG4
IOBRSV42 EQU   IOBFLAG4
IOBRSV41 EQU   IOBFLAG4
IOBRSV40 EQU   IOBFLAG4
IOBPMERR EQU   IOBFLAG4
IOBCC3WE EQU   IOBFLAG4
IOBGDPOL EQU   IOBFLAG4
IOBSTRTB EQU   IOBSTART+1
IOBSIOCC EQU   IOBSTART
IOBCSB7  EQU   IOBCSTAT
IOBCSB6  EQU   IOBCSTAT
IOBCSB5  EQU   IOBCSTAT
IOBCSB4  EQU   IOBCSTAT
IOBCSB3  EQU   IOBCSTAT
IOBCSB2  EQU   IOBCSTAT
IOBCSB1  EQU   IOBCSTAT
IOBCSB0  EQU   IOBCSTAT
IOBUSB7  EQU   IOBUSTAT
IOBUSB6  EQU   IOBUSTAT
IOBUSB5  EQU   IOBUSTAT
IOBUSB4  EQU   IOBUSTAT
IOBUSB3  EQU   IOBUSTAT
IOBUSB2  EQU   IOBUSTAT
IOBUSB1  EQU   IOBUSTAT
IOBUSB0  EQU   IOBUSTAT
IOBCMDA  EQU   IOBIOCSW
IOBLOG   EQU   IOBFL3
IOBJAM   EQU   IOBICL
IOBMSG   EQU   IOBFL3
IOBSDR   EQU   IOBCNC
IOBACU   EQU   IOBFL3
IOBCDC   EQU   IOBFL3
IOBICC   EQU   IOBFL3
IOBCCC   EQU   IOBFL3
IOBECBPB EQU   IOBECBPT+1
IOBECBCC EQU   IOBECBPT
IOBS1B7  EQU   IOBSENS1
IOBS1B6  EQU   IOBSENS1
IOBS1B5  EQU   IOBSENS1
IOBS1B4  EQU   IOBSENS1
IOBS1B3  EQU   IOBSENS1
IOBS1B2  EQU   IOBSENS1
IOBS1B1  EQU   IOBSENS1
IOBS1B0  EQU   IOBSENS1
IOBSNSC9 EQU   IOBS0B7
IOBS0B6  EQU   IOBSENS0
IOBS0B5  EQU   IOBSENS0
IOBS0B4  EQU   IOBSENS0
IOBS0B3  EQU   IOBSENS0
IOBS0B2  EQU   IOBSENS0
IOBS0B1  EQU   IOBSENS0
IOBS0B0  EQU   IOBSENS0
IOBPNCH  EQU   IOBFLAG2
IOBSTATO EQU   IOBFLAG2
IOBSKUPD EQU   IOBFLAG2
IOBALTTR EQU   IOBFLAG2
IOBRRT2  EQU   IOBRDHA0
IOBRRT3  EQU   IOBPURGE
IOBSENSE EQU   IOBFLAG2
IOBHALT  EQU   IOBFLAG2
IOBSPSVC EQU   IOBRSTRT
IOBIOERR EQU   IOBFLAG1
IOBFCREX EQU   IOBCYCCK
IOBRPSTN EQU   IOBFLAG1
IOBERRTN EQU   IOBFLAG1
IOBCMDCH EQU   IOBFLAG1
IOBDATCH EQU   IOBFLAG1
IOBCNOPA EQU   IOBPREFX+12
IOBCICB  EQU   IOBPREFX+8
IOBCECB  EQU   IOBPREFX+4
IOBCONOP EQU   IOBPREFX+3
IOBCINOP EQU   IOBPREFX+2
IOBRSV05 EQU   IOBPREFX+1
IOBPCI   EQU   IOBCFLG1
IOBRSTCH EQU   IOBCFLG1
IOBABAPP EQU   IOBCFLG1
IOBPTST  EQU   IOBCFLG1
IOBRSV04 EQU   IOBCFLG1
IOBRSV03 EQU   IOBCFLG1
IOBRSV02 EQU   IOBCFLG1
IOBRSV01 EQU   IOBCFLG1
NIPPABUF EQU   NIPPAREA+572
NIPPAPTB EQU   NIPPAREA+252
@NM00068 EQU   NIPPAREA+248
NIPPARCD EQU   NIPPAIOD+136
NIPPADEB EQU   NIPPAIOD+88
@NM00067 EQU   NIPPAECB+1
NIPPAECC EQU   NIPPAECB
NIPPADCB EQU   NIPPAIOD+80
NIPPAIOB EQU   NIPPAIOD+40
@NM00066 EQU   NIPPAIOD+37
NIPPASID EQU   NIPPAIOD+32
NIPPATXT EQU   NIPPAIOD
@NM00065 EQU   NIPPAREA+30
@NM00064 EQU   NIPPABDL+15
NIPPATTR EQU   NIPPABDL+12
NIPPANAM EQU   NIPPABDL+4
NIPPA2BF EQU   NIPPABDH
NIPPARC  EQU   NIPPAREA+8
@NM00063 EQU   NIPPAREA
NIPPABYT EQU   NIPPAHDR+4
NIPPAQ   EQU   NIPPAHDR
ECBEVNT  EQU   ECBEXTND
@NM00062 EQU   ECBEXTND
@NM00061 EQU   ECBBYTE3
@NM00060 EQU   ECBEXTBA
@NM00059 EQU   ECBCC
ECBPOSTB EQU   ECBCC
ECBWAITB EQU   ECBCC
RTCTISVC EQU   RTCTSDO4
RTCTSDOV EQU   RTCTSDMG
@NM00058 EQU   RTCTSDO4
@NM00057 EQU   RTCTSDO3
RTCTSDPH EQU   RTCTSDO3
RTCTSDPG EQU   RTCTSDO3
@NM00056 EQU   RTCTSDO2
RTCTSDPD EQU   RTCTSDO2
RTCTSDPC EQU   RTCTSDO2
RTCTSDPB EQU   RTCTSDO2
RTCTSDPA EQU   RTCTSDO2
RTCTSDP9 EQU   RTCTSDO2
RTCTSDP8 EQU   RTCTSDO2
RTCTSDP7 EQU   RTCTSDO1
RTCTSDP6 EQU   RTCTSDO1
RTCTSDP5 EQU   RTCTSDO1
RTCTSDP4 EQU   RTCTSDO1
RTCTSDP3 EQU   RTCTSDO1
RTCTSDP2 EQU   RTCTSDO1
RTCTSDP1 EQU   RTCTSDO1
RTCTSDP0 EQU   RTCTSDO1
RTCTISYM EQU   RTCTSD04
RTCTSMOV EQU   RTCTSMMG
@NM00055 EQU   RTCTSD04
RTCTSD03 EQU   RTCTMSYO+2
RTCTSD02 EQU   RTCTMSYO+1
RTCTSDS7 EQU   RTCTSD01
RTCTSDS6 EQU   RTCTSD01
RTCTSDS5 EQU   RTCTSD01
RTCTSDS4 EQU   RTCTSD01
RTCTSDS3 EQU   RTCTSD01
RTCTSDS2 EQU   RTCTSD01
RTCTSDS1 EQU   RTCTSD01
RTCTSDS0 EQU   RTCTSD01
RTCTISYU EQU   RTCTSUO4
RTCTSUOV EQU   RTCTSUMG
@NM00054 EQU   RTCTSUO4
RTCTSYDF EQU   RTCTSUO3
RTCTSYDE EQU   RTCTSUO3
RTCTSYDD EQU   RTCTSUO3
RTCTSYDC EQU   RTCTSUO3
RTCTSYDB EQU   RTCTSUO3
RTCTSYDA EQU   RTCTSUO3
RTCTSYD9 EQU   RTCTSUO3
RTCTSYD8 EQU   RTCTSUO3
@NM00053 EQU   RTCTSUO2
RTCTSYDH EQU   RTCTSUO2
RTCTSYDG EQU   RTCTSUO2
RTCTSYD7 EQU   RTCTSUO1
RTCTSYD6 EQU   RTCTSUO1
RTCTSYD5 EQU   RTCTSUO1
RTCTSYD4 EQU   RTCTSUO1
RTCTSYD3 EQU   RTCTSUO1
RTCTSYD2 EQU   RTCTSUO1
RTCTSYD1 EQU   RTCTSUO1
RTCTSYD0 EQU   RTCTSUO1
RTCTISAB EQU   RTCTSAO4
RTCTSAOV EQU   RTCTSAMG
@NM00052 EQU   RTCTSAO4
RTCTSADF EQU   RTCTSAO3
RTCTSADE EQU   RTCTSAO3
RTCTSADD EQU   RTCTSAO3
RTCTSADC EQU   RTCTSAO3
RTCTSADB EQU   RTCTSAO3
RTCTSADA EQU   RTCTSAO3
RTCTSAD9 EQU   RTCTSAO3
RTCTSAD8 EQU   RTCTSAO3
@NM00051 EQU   RTCTSAO2
RTCTSADH EQU   RTCTSAO2
RTCTSADG EQU   RTCTSAO2
RTCTSAD7 EQU   RTCTSAO1
RTCTSAD6 EQU   RTCTSAO1
RTCTSAD5 EQU   RTCTSAO1
RTCTSAD4 EQU   RTCTSAO1
RTCTSAD3 EQU   RTCTSAO1
RTCTSAD2 EQU   RTCTSAO1
RTCTSAD1 EQU   RTCTSAO1
RTCTSAD0 EQU   RTCTSAO1
RTCTZZZ5 EQU   RTCT+340
RTCTZZZ4 EQU   RTCT+336
RTCTMRMQ EQU   RTCT+332
RTCTSDF5 EQU   RTCTSDF3+3
RTCTSDDO EQU   RTCTSDF4
RTCTSDEN EQU   RTCTSDF4
RTCTSDEQ EQU   RTCTSDF4
RTCTSDTR EQU   RTCTSDF4
RTCTSDRM EQU   RTCTSDF4
RTCTSDAN EQU   RTCTSDF4
RTCTSDNC EQU   RTCTSDF4
RTCTSDSS EQU   RTCTSDF4
RTCTSDAS EQU   RTCTSDF3
RTCTZZZ3 EQU   RTCT+266
RTCTSDFX EQU   RTCTSDF2
RTCTSDRW EQU   RTCTSDF2
RTCTSDSL EQU   RTCTSDF2
RTCTSDWF EQU   RTCTSDF2
RTCTSDLA EQU   RTCTSDF2
RTCTSDDI EQU   RTCTSDF2
RTCTSDTQ EQU   RTCTSDF2
RTCTSDMR EQU   RTCTSDF2
RTCTSDSC EQU   RTCTSDF1
RTCTSDRS EQU   RTCTSDF1
RTCTSDSD EQU   RTCTSDF1
RTCTSDEP EQU   RTCTSDF1
RTCTSDMA EQU   RTCTSDF1
RTCTSDSH EQU   RTCTSDF1
RTCTSDND EQU   RTCTSDF1
RTCTZZZ2 EQU   RTCT+257
RTCTSDPR EQU   RTCTSDI+2
RTCTINDX EQU   RTCTSDI+1
RTCTSDNA EQU   RTCTSDI
@NM00050 EQU   RTCTASO2
RTCTASNQ EQU   RTCTASO2
RTCTASNA EQU   RTCTASO2
RTCTASNS EQU   RTCTASO2
RTCTASSU EQU   RTCTASO2
RTCTASSW EQU   RTCTASO2
RTCTASCS EQU   RTCTASO2
RTCTASTR EQU   RTCTASO1
RTCTASLP EQU   RTCTASO1
RTCTASRG EQU   RTCTASO1
RTCTASLS EQU   RTCTASO1
RTCTASSQ EQU   RTCTASO1
RTCTASNU EQU   RTCTASO1
RTCTASPS EQU   RTCTASO1
RTCTASAL EQU   RTCTASO1
RTCTSDO  EQU   RTCTOPT+12
RTCTSYO  EQU   RTCTOPT+8
RTCTSUO  EQU   RTCTOPT+4
RTCTSAO  EQU   RTCTOPT
RTCTXXX2 EQU   RTCT+234
RTCTETIM EQU   RTCTERID+6
RTCTEASD EQU   RTCTERID+4
RTCTECPU EQU   RTCTERID+2
RTCTESEQ EQU   RTCTERID
RTCTSEQ# EQU   RTCT+178
RTCTXXX1 EQU   RTCT+177
@NM00049 EQU   RTCTRFLG
RTCTRSTF EQU   RTCTRFLG
RTCTRPER EQU   RTCTRFLG
RTCTRTER EQU   RTCTRFLG
RTCTTEST EQU   RTCT+172
RTCTMSRB EQU   RTCT+168
RTCTMLCK EQU   RTCT+164
RTCTFMT  EQU   RTCT+160
RTCTSDIP EQU   RTCTSDPL
@NM00048 EQU   RTCTFLG
RTCTDSST EQU   RTCTFLG
RTCTRCB  EQU   RTCT+32
RTCTRECB EQU   RTCT+28
RTCTFASB EQU   RTCT+24
RTCTMECB EQU   RTCT+20
RTCTSDID EQU   RTCT+18
RTCTYYY1 EQU   RTCT+16
RTCTSY04 EQU   RTCTSYD+3
RTCTSY03 EQU   RTCTSYD+2
RTCTSY02 EQU   RTCTSYD+1
RTCTSYM7 EQU   RTCTSY01
RTCTSYM6 EQU   RTCTSY01
RTCTSYM5 EQU   RTCTSY01
RTCTSYM4 EQU   RTCTSY01
RTCTSYM3 EQU   RTCTSY01
RTCTSYM2 EQU   RTCTSY01
RTCTSYM1 EQU   RTCTSY01
RTCTSYM0 EQU   RTCTSY01
RTCTSUP4 EQU   RTCTSUP+3
RTCTSUDF EQU   RTCTSUP3
RTCTSUDE EQU   RTCTSUP3
RTCTSUDD EQU   RTCTSUP3
RTCTSUDC EQU   RTCTSUP3
RTCTSUDB EQU   RTCTSUP3
RTCTSUDA EQU   RTCTSUP3
RTCTSUD9 EQU   RTCTSUP3
RTCTSUD8 EQU   RTCTSUP3
@NM00047 EQU   RTCTSUP2
RTCTSUDH EQU   RTCTSUP2
RTCTSUDG EQU   RTCTSUP2
RTCTSUD7 EQU   RTCTSUP1
RTCTSUD6 EQU   RTCTSUP1
RTCTSUD5 EQU   RTCTSUP1
RTCTSUD4 EQU   RTCTSUP1
RTCTSUD3 EQU   RTCTSUP1
RTCTSUD2 EQU   RTCTSUP1
RTCTSUD1 EQU   RTCTSUP1
RTCTSUD0 EQU   RTCTSUP1
RTCTSAP4 EQU   RTCTSAP+3
RTCTSABF EQU   RTCTSAP3
RTCTSABE EQU   RTCTSAP3
RTCTSABD EQU   RTCTSAP3
RTCTSABC EQU   RTCTSAP3
RTCTSABB EQU   RTCTSAP3
RTCTSABA EQU   RTCTSAP3
RTCTSAB9 EQU   RTCTSAP3
RTCTSAB8 EQU   RTCTSAP3
@NM00046 EQU   RTCTSAP2
RTCTSABH EQU   RTCTSAP2
RTCTSABG EQU   RTCTSAP2
RTCTSAB7 EQU   RTCTSAP1
RTCTSAB6 EQU   RTCTSAP1
RTCTSAB5 EQU   RTCTSAP1
RTCTSAB4 EQU   RTCTSAP1
RTCTSAB3 EQU   RTCTSAP1
RTCTSAB2 EQU   RTCTSAP1
RTCTSAB1 EQU   RTCTSAP1
RTCTSAB0 EQU   RTCTSAP1
RTCTNAME EQU   RTCT
NVTLPAHA EQU   NVT+548
NVTLPALO EQU   NVT+544
NVTRMSG  EQU   NVT+540
NVTRLOCK EQU   NVT+536
NVTRCODE EQU   NVT+532
@NM00045 EQU   NVT+529
@NM00044 EQU   NVTFLPO
NVTFLWS  EQU   NVTFLPO
NVTFLQS  EQU   NVTFLPO
@NM00043 EQU   NVTFLPO
NVTSYSP  EQU   NVTFLPO
NVTFLLST EQU   NVTFLPO
NVTRSV48 EQU   NVT+524
NVTRSV47 EQU   NVT+520
NVTRSV46 EQU   NVT+516
@NM00042 EQU   NVT+512
NVTREALR EQU   NVT+508
NVTFASVT EQU   NVT+504
NVTRSV45 EQU   NVT+496
NVTVRLNG EQU   NVT+492
NVTVRREG EQU   NVT+488
NVTLVIRT EQU   NVT+484
NVTRSV4A EQU   NVT+480
NVTLPAND EQU   NVT+476
NVTRMSS  EQU   NVT+472
NVTRPQE  EQU   NVT+468
NVTRLLE  EQU   NVT+464
NVTRJPQ  EQU   NVT+460
NVTVMSS  EQU   NVT+456
NVTVPQE  EQU   NVT+452
NVTVLLE  EQU   NVT+448
NVTVJPQ  EQU   NVT+444
NVTLSEC  EQU   NVTLOCAT+4
NVTLFST  EQU   NVTLOCAT
NVTXSEC  EQU   NVTXCTL+4
NVTXFST  EQU   NVTXCTL
@NM00041 EQU   NVT+425
NVTLPACT EQU   NVT+424
NVTCSLPG EQU   NVT+420
NVTCSIOB EQU   NVT+416
NVTCSLNM EQU   NVT+412
NVTCSLIB EQU   NVT+408
NVTBLDL  EQU   NVT+404
NVTVRBLD EQU   NVT+400
@NM00040 EQU   NVT+392
NVTVRTCB EQU   NVT+388
NVTVVTCB EQU   NVT+384
NVTSPUCB EQU   NVT+382
NVTRSV44 EQU   NVT+380
NVTQSBUF EQU   NVT+376
NVTPAREA EQU   NVT+368
NVTRSV43 EQU   NVT+364
@NM00039 EQU   NVT+363
NVTABWS1 EQU   NVT+362
NVTABCD1 EQU   NVT+360
@NM00038 EQU   NVT+358
NVTCPUAD EQU   NVT+356
NVTTOD   EQU   NVT+352
NVTSPE   EQU   NVT+344
NVTMBEND EQU   NVT+340
NVTMBUF  EQU   NVT+336
NVTDCBSN EQU   NVT+332
NVTDCBOC EQU   NVT+328
NVTDCBIC EQU   NVT+324
@NM00037 EQU   NVT+308
NVTNMBLD EQU   NVT+304
NVTNIPM  EQU   NVT+292
NVTPRMPT EQU   NVT+272
NVTIX    EQU   NVTFLWSC
NVTFLWS1 EQU   NVTWPSW2+2
NVTIDPSW EQU   NVTWPSW2
NVTWPSW1 EQU   NVTWTPSW
NVTMCPSW EQU   NVT+216
@NM00036 EQU   NVT+212
@NM00035 EQU   NVTFLCN
NVTFLRAC EQU   NVTFLCN
NVTFLNCK EQU   NVTFLCN
NVTFLNHC EQU   NVTFLCN
NVTFLASM EQU   NVTFLCN
NVTMP    EQU   NVTFLCN
NVTFLIOC EQU   NVTFLCN
NVTFLAC  EQU   NVTFLCN
NVTFLSG  EQU   NVT+210
NVTTRACE EQU   NVT+208
NVTNXPTR EQU   NVT+204
NVTNXSIZ EQU   NVT+202
@NM00034 EQU   NVT+200
NVTSGPSA EQU   NVT+196
NVTN0MSG EQU   NVT+192
NVTVVPG1 EQU   NVT+188
NVTNBFND EQU   NVT+184
NVTNUCND EQU   NVT+180
NVTSTMAP EQU   NVT+176
NVTRTMSA EQU   NVT+172
NVTMFASA EQU   NVT+168
NVTLSPQE EQU   NVT+164
NVTALSQA EQU   NVT+160
NVTPQSAV EQU   NVT+156
NVTSVC60 EQU   NVT+148
NVTABSEC EQU   NVTABSAV+4
NVTABFST EQU   NVTABSAV
NVTNVSQA EQU   NVT+138
NVTRSVMN EQU   NVT+136
NVTNBMIN EQU   NVT+134
NVTRGNAV EQU   NVT+132
NVTLSQNO EQU   NVT+130
NVTSQANO EQU   NVT+128
NVTLSQAS EQU   NVT+124
NVTLNGFX EQU   NVT+120
NVTIGXER EQU   NVT+116
@NM00033 EQU   NVT+112
NVTRSV49 EQU   NVT+108
NVTNVRSZ EQU   NVT+104
NVTMFA   EQU   NVT+100
NVTDSSNG EQU   NVT+96
NVTMSLNK EQU   NVT+92
NVTVVMDI EQU   NVT+88
NVTIGCER EQU   NVT+84
NVTVBLDL EQU   NVT+80
NVTSVCTB EQU   NVT+76
NVTRSV42 EQU   NVT+72
NVTRSV41 EQU   NVT+68
NVTMASCB EQU   NVT+64
NVTCMTCB EQU   NVT+60
NVTMSTCB EQU   NVT+56
@NM00032 EQU   NVTFLLB
NVTFLSLB EQU   NVTFLLB
@NM00031 EQU   NVTNPATR
NVTNPREU EQU   NVTNPREN
@NM00030 EQU   NVTNPREN
NVTNPSFX EQU   NVT+53
@NM00029 EQU   NVT+52
NVTNPSUF EQU   NVT
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00028 EQU   CVTFIX+248
@NM00027 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTRV490 EQU   CVTMAP+388
CVTSU    EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTVS1B  EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
NIPPTSID EQU   NIPPTE+6
@NM00110 EQU   NIPPTATF
NIPPTMRG EQU   NIPPTATF
@NM00109 EQU   NIPPTOPF
NIPPTOPI EQU   NIPPTOPF
PTABEND  EQU   PARMTAB+312
@NM00108 EQU   PARMTAB+308
DUPLEX   EQU   PARMTAB+304
@NM00107 EQU   PARMTAB+300
PAGNUM   EQU   PARMTAB+296
@NM00106 EQU   PARMTAB+292
SWAP     EQU   PARMTAB+288
@NM00105 EQU   PARMTAB+284
RSU      EQU   PARMTAB+280
@NM00104 EQU   @NM00102+1
@NM00103 EQU   NIPPAFLG
NIPPAFL1 EQU   NIPPAFLG
@NM00101 EQU   PARMTAB+268
PURGE    EQU   PARMTAB+264
@NM00100 EQU   PARMTAB+260
WTORPLY  EQU   PARMTAB+256
@NM00099 EQU   PARMTAB+252
WTOBFRS  EQU   PARMTAB+248
@NM00098 EQU   PARMTAB+244
VRREGN   EQU   PARMTAB+240
@NM00097 EQU   PARMTAB+236
VAL      EQU   PARMTAB+232
@NM00096 EQU   PARMTAB+228
SYSP     EQU   PARMTAB+224
@NM00095 EQU   PARMTAB+220
SQA      EQU   PARMTAB+216
@NM00094 EQU   PARMTAB+212
SMF      EQU   PARMTAB+208
@NM00093 EQU   PARMTAB+204
REAL     EQU   PARMTAB+200
@NM00092 EQU   PARMTAB+196
PAGEO    EQU   PARMTAB+192
@NM00091 EQU   PARMTAB+188
PAGEP    EQU   PARMTAB+184
@NM00090 EQU   PARMTAB+180
OPT      EQU   PARMTAB+176
@NM00089 EQU   PARMTAB+172
OPI      EQU   PARMTAB+168
@NM00088 EQU   PARMTAB+164
NUCMAP   EQU   PARMTAB+160
@NM00087 EQU   PARMTAB+156
MLPA     EQU   PARMTAB+152
@NM00086 EQU   PARMTAB+148
MAXUSER  EQU   PARMTAB+144
@NM00085 EQU   PARMTAB+140
LOGLMT   EQU   PARMTAB+136
@NM00084 EQU   PARMTAB+132
LOGCLS   EQU   PARMTAB+128
@NM00083 EQU   PARMTAB+124
LNK      EQU   PARMTAB+120
@NM00082 EQU   PARMTAB+116
IPS      EQU   PARMTAB+112
@NM00081 EQU   PARMTAB+108
HARDCPY  EQU   PARMTAB+104
@NM00080 EQU   PARMTAB+100
FIX      EQU   PARMTAB+96
@NM00079 EQU   PARMTAB+92
@NM00078 EQU   PARMTAB+84
CVIO     EQU   PARMTAB+80
@NM00077 EQU   PARMTAB+76
CSA      EQU   PARMTAB+72
@NM00076 EQU   PARMTAB+68
CPQE     EQU   PARMTAB+64
@NM00075 EQU   PARMTAB+60
CONT     EQU   PARMTAB+56
@NM00074 EQU   PARMTAB+52
CMD      EQU   PARMTAB+48
@NM00073 EQU   PARMTAB+44
CLPA     EQU   PARMTAB+40
@NM00072 EQU   PARMTAB+36
BLDLF    EQU   PARMTAB+32
@NM00071 EQU   PARMTAB+28
BLDL     EQU   PARMTAB+24
@NM00070 EQU   PARMTAB+20
APG      EQU   PARMTAB+16
@NM00069 EQU   PARMTAB+12
APF      EQU   PARMTAB+8
PTABSTRT EQU   PARMTAB
SDBUFFER EQU   SDWORK+440
DATALEN  EQU   SDOUTBUF+6
KEYLEN   EQU   SDOUTBUF+5
RECORDNO EQU   SDOUTBUF+4
RCDHH    EQU   RCDCCHH+2
RCDCC    EQU   RCDCCHH
SDSMDECB EQU   SDCNTRL+428
SDSMBUFF EQU   SDCNTRL+424
BYTECNT3 EQU   CCW3+6
@NM00202 EQU   CCW3+5
PCI3     EQU   FLAGS3
SKIP3    EQU   FLAGS3
SLI3     EQU   FLAGS3
CC3      EQU   FLAGS3
CD3      EQU   FLAGS3
DATAADR3 EQU   CCW3+1
CMDCODE3 EQU   CCW3
BYTECNT2 EQU   CCW2+6
@NM00201 EQU   CCW2+5
PCI2     EQU   FLAGS2
SKIP2    EQU   FLAGS2
SLI2     EQU   FLAGS2
CC2      EQU   FLAGS2
CD2      EQU   FLAGS2
DATAADR2 EQU   CCW2+1
CMDCODE2 EQU   CCW2
BYTECNT1 EQU   CCW1+6
@NM00200 EQU   CCW1+5
PCI1     EQU   FLAGS1
SKIP1    EQU   FLAGS1
SLI1     EQU   FLAGS1
CMDC1    EQU   FLAGS1
CD1      EQU   FLAGS1
DATAADR1 EQU   CCW1+1
CMDCODE1 EQU   CCW1
SVCNM8   EQU   SVCNM7T8+1
SVCNM7   EQU   SVCNM7T8
SVCNM6   EQU   SVCNM6T8
SVCNM1T4 EQU   SVCNM1T5
@NM00199 EQU   SDCNTRL+388
SVC994ID EQU   SDCNTRL+384
CVRT2SGN EQU   SDCVRT4+5
@NM00198 EQU   SDCVRT4
@NM00197 EQU   CVRT2
SDCVRT1  EQU   CVRT1+2
@NM00196 EQU   CVRT1
@NM00195 EQU   CVRT11
CHCNT    EQU   SDCNTRL+366
TIMCNT   EQU   SDCNTRL+364
DSTINDEX EQU   SDCNTRL+360
SDWRGSV2 EQU   SDCNTRL+288
SDWRGSV1 EQU   SDCNTRL+216
SDRETCOD EQU   SDCNTRL+212
ADDADRWD EQU   SDCNTRL+208
ADDADRWC EQU   SDCNTRL+204
ADDADRWB EQU   SDCNTRL+200
ADDADRWA EQU   SDCNTRL+196
USEEND   EQU   SDCNTRL+192
USESTART EQU   SDCNTRL+188
SPQEADDR EQU   SDCNTRL+184
USERRETA EQU   SDCNTRL+180
PGFRRETA EQU   SDCNTRL+176
SPQERETA EQU   SDCNTRL+172
@NM00194 EQU   SDCNTRL+171
SDWKEY   EQU   SDCNTRL+170
AFFNSAV  EQU   SDCNTRL+168
FREERETA EQU   SDCNTRL+164
LPDERETA EQU   SDCNTRL+160
CDERETA  EQU   SDCNTRL+156
DISPRETA EQU   SDCNTRL+152
SDIORETA EQU   SDCNTRL+148
SVCDLPST EQU   SDCNTRL+136
SVCDMPNM EQU   SDCNTRL+128
ERRORWK  EQU   SDCNTRL+104
FLAGSTWO EQU   SDCNTRL+103
SDWPAGOT EQU   FLAGSONE
FLGFLAST EQU   FLAGSONE
FLGTAPEE EQU   FLAGSONE
FLGRTFUL EQU   FLAGSONE
SVCDNSQA EQU   SVCDOPT2
SVCDNAPA EQU   SVCDOPT2
SVCDNSMD EQU   SVCDOPT2
SVCDSMDP EQU   SVCDOPT2
SVCDSWA  EQU   SVCDOPT2
SVCDCSA  EQU   SVCDOPT2
SVCDTRT  EQU   SVCDOPT1
SVCDLPA  EQU   SVCDOPT1
SVCDRGN  EQU   SVCDOPT1
SVCDLSQA EQU   SVCDOPT1
SVCDSQA  EQU   SVCDOPT1
SVCDNUC  EQU   SVCDOPT1
SVCDPSA  EQU   SVCDOPT1
SVCDAPSA EQU   SVCDOPT1
SDWSDPL  EQU   SDCNTRL+96
SDSRBBAS EQU   SDCNTRL+92
SDSRBADR EQU   SDCNTRL+88
SVCDSRBA EQU   SDCNTRL+84
ENDADRNT EQU   SDCNTRL+80
RANGEPTR EQU   SDCNTRL+76
GLOBADDR EQU   SDCNTRL+72
LOCALADR EQU   SDCNTRL+68
NUCADDR  EQU   SDCNTRL+64
DACHARAD EQU   SDCNTRL+60
LSTESTAE EQU   SDCNTRL+44
SDIOB    EQU   SDCNTRL+4
SDECB    EQU   SDCNTRL
DCHAR3   EQU   DVNAME+2
DCHAR1   EQU   DVNAME
@NM00003 EQU   FLAG1
@NM00002 EQU   WORKAREA+2
@NM00001 EQU   SFLG2
@NM00183 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00182 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00181 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00180 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00179 EQU   FLCFSA
@NM00178 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00177 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00176 EQU   FLCIOA
@NM00175 EQU   FLCMCLA+15
@NM00174 EQU   FLCMCLA+14
@NM00173 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00172 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00171 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00170 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00169 EQU   FLCPER
@NM00168 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00167 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00166 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00165 EQU   FLCPIILC
@NM00164 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00163 EQU   FLCSVILC
@NM00162 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00161 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00160 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RT00304 EQU   NSDRLOAD
@RT00328 EQU   NSSDLOAD
@RT00367 EQU   NOVTSDT
@RT00391 EQU   NOIGC05A
@RF00457 EQU   @RC00455
@RF00532 EQU   @RC00527
@RC00567 EQU   @RC00544
@RC00691 EQU   @RC00680
@RC01032 EQU   @EL00004
@RF01049 EQU   @EL00004
@ENDDATA EQU   *
         END   IEAVTSDI,(C'PLS1734',0701,77341)
