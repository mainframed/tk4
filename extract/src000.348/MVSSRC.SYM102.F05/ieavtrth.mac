         TITLE 'IEAVTRTH                                               *
                        '
IEAVTRTH CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEAVTRTH  77.125'                                 0001
         DROP  @15
@PROLOG  BALR  @08,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@08                                         0001
*                                      IS GOTTEN FROM THE CPU WSAVT  */
*                                                                  0091
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THIS SEGMENT IS TO INITIALIZE THE ENVIRONMENT. */
*   /* THIS IS DONE MAINLY BY ESTABLISHING AN FRR AND PRESERVING     */
*   /* INFORMATION NECESSARY FOR RECOVERY. THE RECOVERY INFORMATION  */
*   /* STORED IN THE FRR IS AS FOLLOWS: THE LOGICAL PHASE NUMBER - TO*/
*   /* INDICATE THE RESTART POINT IF AN ERROR WERE TO OCCUR IN       */
*   /* PROCESSING, A RETRY FLAG - TO INDICATE WHETHER THE PROCESSING */
*   /* IS CURRENTLY IN THE RETRY PASS, THE ADDRESS OF THE FIRST EED  */
*   /* ACQUIRED OR 0, THE ADDRESS OF THE LOGREC BUFFER, AND THE      */
*   /* ADDRESS OF THE CPU RELATED SAVE AREA. INPUT TO THE SEGMENT    */
*   /* INCLUDES: THE TRAKAREA REGISTER (R4) - THIS POINTS TO THE     */
*   /* CURRENT TRACKING AREA, AND THE ADDRLRB REGISTER (R6) - THIS   */
*   /* POINTS TO THE LOGREC BUFFER. OUTPUT INCLUDES: THE TRAKAREA    */
*   /* REGISTER (R4) - THIS POINTS TO THE CURRENT TRACKING AREA, AND */
*   /* THE CPURTMSA REGISTER (R10) - THIS POINTS TO THE CPU RELATED  */
*   /* SAVE AREA.                                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0092
*RTHSTART:                          /* LABEL ON FIRST EXECUTABLE   0092
*                                      INSTRUCTION OF RTH TO ALLOW 0092
*                                      RTH'S FRR TO RESTORE THE VALUE
*                                      OF RTH'S BASE REG             */
*   DO;                                                            0092
RTHSTART DS    0H                                                  0093
*     R7=R14;                       /* PRESERVE ORIGINAL RETURN POINT
*                                      VALUE                         */
         LR    R7,R14                                              0093
*     RFY                                                          0094
*       R14 UNRSTD;                 /* RELEASE RETURN REG            */
*     RTHTREGS(TWO)=R6;             /* PLACE ADDRESS OF LOGREC BUFFER
*                                      IN TRACKING AREA              */
         ST    R6,RTHTREGS+4(,R4)                                  0095
*     R10=WSACRTMK;                 /* OBTAIN ADDRESS OF RTMS CPU  0096
*                                      RELATED SAVE AREA             */
         L     @12,PSALCCAV                                        0096
         L     @12,LCCACPUS(,@12)                                  0096
         L     R10,WSACRTMK(,@12)                                  0096
*     RTMCPUSA=''B;                 /* CLEAR THIS AREA               */
         XC    RTMCPUSA(88,R10),RTMCPUSA(R10)                      0097
*     RTHTREGS(THREE)=R10;          /* PLACE ADDR OF RTMS CPU RELATED
*                                      SAVE AREA IN TRACKING AREA    */
*                                                                  0098
         ST    R10,RTHTREGS+8(,R4)                                 0098
*     /***************************************************************/
*     /*                                                             */
*     /* INITIAL RTMTRACK                                            */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0099
*   END;                                                           0099
*EEDRP:                             /* THIS LABEL IS A RETURN POINT
*                                      FROM RTH'S RECOVERY ROUTINE 0100
*                                      FOR RETRY OF EED PROCESSING   */
*   RTHTLPN=RTHEEDS;                /* INDICATE EED PROCESSING PHASE */
EEDRP    MVI   RTHTLPN(R4),X'20'                                   0100
*   RFY                                                            0101
*     R5 RSTD;                      /* GET REG FOR EED POINTER       */
*   R5=NULL;                        /* INITIALIZE POINTER TO CHAIN OF
*                                      EEDS TO INDICATE NO EEDS ARE
*                                      PRESENT                       */
         SLR   R5,R5                                               0102
*   IF((LRBMHSTO='1'B&LRBMVST='1'B) /* STORAGE ERROR VALID   @G554P2M*/
*       ×LRBMHSPF='1'B)             /* OR STORAGE KEY ERROR  @G554P2M*/
*       &(LRBMCIC(1:1)=EXTDMG       /* AND EXTERNAL DAMAGE   @G554P2M*/
*       ×LRBMCIC(1:1)=SYSRECOV) THEN                               0103
         TM    LRBMHSTO(R6),B'00000100'                            0103
         BNO   @GL00002                                            0103
         TM    LRBMVST(R6),B'00000001'                             0103
         BO    @GL00001                                            0103
@GL00002 TM    LRBMHSPF(R6),B'00000010'                            0103
         BNO   @RF00103                                            0103
@GL00001 CLI   LRBMCIC(R6),X'04'                                   0103
         BE    @RT00103                                            0103
         CLI   LRBMCIC(R6),X'20'                                   0103
         BE    @RT00103                                            0103
*     ;                             /* OR SYSTEM RECOVERY    @G554P2M*/
*                                                                  0104
*   /*****************************************************************/
*   /*                                                               */
*   /* TYPE MACHINE CHECK                                    @G554P2M*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0105
*   ELSE                                                           0105
*     DO;                           /*                       @G554P2M*/
@RF00103 DS    0H                                                  0106
*       IF LRBMTERM^=NULL×          /* IF THE ERROR IS AN ACR ERROR  */
*           LRBMHARD^=NULL THEN                                    0106
*                                                                  0106
         CLI   LRBMTERM(R6),0                                      0106
         BNE   @RT00106                                            0106
         CLI   LRBMHARD(R6),0                                      0106
         BE    @RF00106                                            0106
@RT00106 DS    0H                                                  0107
*         /***********************************************************/
*         /*                                                         */
*         /* THE PURPOSE OF THIS SEGMENT IS TO OBTAIN 2 CELLS FOR    */
*         /* EEDS WHEN SOFTWARE PROCESSING WILL BE REQUIRED FOR      */
*         /* HARDWARE ERRORS. ONE EED WILL PRESERVE THE ENVIRONMENT  */
*         /* AT THE TIME OF THE HARDWARE FAILURE, AND ONE EED WILL BE*/
*         /* USED TO INDICATE THE REPAIR STATUS. IF ONLY ONE EED IS  */
*         /* OBTAINED, IT WILL BE CONSTRUCTED AS A REPAIR STATUS EED */
*         /* AND LATER RTM PROCESSING WILL CONTINUE AS IF NO         */
*         /* ENVIRONMENT WERE AVAILABLE. INPUT TO THIS SEGMENT       */
*         /* INCLUDES THE EEDLIST REGISTER (R5) WHICH INITIALLY HAS A*/
*         /* VALUE OF ZERO. OUTPUT FROM THE SEGMENT INCLUDES THE     */
*         /* EEDLIST REGISTER (R5) WHICH POINTS TO THE 1ST EED ON THE*/
*         /* CHAIN, IF ANY WERE ACQUIRED, OR CONTAINS THE VALUE OF   */
*         /* EEDNULL (1) INDICATING THAT THE ATTEMPT TO GET A CELL   */
*         /* FAILED. OUTPUT ALSO INCLUDES THE EEDRSTAT REGISTER (R3) */
*         /* WHICH POINTS TO THE REPAIR STATUS EED, IF ONE EXISTS.   */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0107
*         DO;                       /* ATTEMPT TO ACQUIRE EEDS       */
*           RFY                                                    0108
*            (R0,                                                  0108
*             R1,                                                  0108
*             R15) RSTD;            /* GET REGS FOR GETCELL          */
*           RFY                                                    0109
*             R13 RSTD;             /* GET REG FOR SAVE AREA POINTER */
*           R0=RT1CPOOL;            /* SET CELLPOOL ID FOR GETCELL   */
         L     R0,RT1CPOOL                                         0110
*           R13=ADDR(RTMKSV);       /* POINT TO STANDARD SAVE AREA   */
         LR    R13,R10                                             0111
*           GEN(GETCELL CPID=(0),BRANCH=YES);/* ATTEMPT TO GET A CELL*/
         GETCELL CPID=(0),BRANCH=YES
*           IF R15=QCELLNRM THEN    /* IF ONE CELL WAS OBTAINED      */
         LTR   R15,R15                                             0113
         BNZ   @RF00113                                            0113
*             DO;                                                  0114
*               R5=R1;              /* MAKE THIS CELL THE FIRST ONE
*                                      ON THE CHAIN                  */
         LR    R5,R1                                               0115
*               RFY                                                0116
*                 EED BASED(R5);    /* BASE THE EED MAPPING ON THE 0116
*                                      1ST CELL OF THE CHAIN         */
*               EED=''B;            /* CLEAR THE EED                 */
         XC    EED(92,R5),EED(R5)                                  0117
*               EEDID=HWREPTYP;     /* INDICATE THIS EED IS A REPAIR
*                                      STATUS EED                    */
         MVI   EEDID(R5),X'03'                                     0118
*               RFY                                                0119
*                 R3 RSTD;          /* GET REG TO POINT TO THE REPAIR
*                                      STATUS EED                    */
*               R3=R5;              /* INIT THIS REG TO THE ADDRESS
*                                      OF THE REPAIR STATUS EED      */
         LR    R3,R5                                               0120
*               RTHTREGS(FIVE)=R3;  /* CHECKPOINT ADDR OF REPAIR   0121
*                                      STATUS EED INTO TRACKING AREA */
         ST    R3,RTHTREGS+16(,R4)                                 0121
*               RTHTEED1='1'B;      /* INDICATE THAT THE INITIAL EED
*                                      HAS BEEN ACQUIRED             */
         OI    RTHTEED1(R4),B'00001000'                            0122
*               GEN(GETCELL CPID=(0),BRANCH=YES);/* ATTEMPT TO GET A
*                                      2ND QUICKCELL                 */
         GETCELL CPID=(0),BRANCH=YES
*               IF R15=QCELLNRM THEN/* IF THIS ATTEMPT IS ALSO     0124
*                                      SUCCESSFUL                    */
         LTR   R15,R15                                             0124
         BNZ   @RF00124                                            0124
*                 DO;                                              0125
*                   R5=R1;          /* MAKE THIS CELL THE 1ST ONE ON
*                                      THE CHAIN                     */
         LR    R5,R1                                               0126
*                   RFY                                            0127
*                    (R0,                                          0127
*                     R1,                                          0127
*                     R15) UNRSTD;  /* RELEASE REGS USED IN GETCELL  */
*                   RFY                                            0128
*                     R13 UNRSTD;   /* RELEASE REG USED AS SAVE AREA
*                                      POINTER                       */
*                   EED=''B;        /* CLEAR THIS EED                */
         XC    EED(92,R5),EED(R5)                                  0129
*                   EEDID=REGSPTYP; /* INDICATE THIS EED IS AN     0130
*                                      ENVIRONMENT EED               */
         MVI   EEDID(R5),X'01'                                     0130
*                   EEDFWRDP=R3;    /* CHAIN THE EEDS TOGETHER       */
         ST    R3,EEDFWRDP(,R5)                                    0131
*                 END;              /* END OF PROCESSING 2ND EED     */
*               ELSE                /* IF 2ND QUICKCELL WAS NOT    0133
*                                      OBTAINED                      */
*                 EEDFWRDP=EEDNULL; /* INDICATE EED INFORMATION WILL
*                                      BE LOST                       */
         B     @RC00124                                            0133
@RF00124 MVC   EEDFWRDP(4,R5),@CF00076                             0133
*             END;                  /* END OF PROCESSING NEW EEDS    */
*           ELSE                    /* IF NO QUICKCELLS WERE OBTAINED*/
*             R5=EEDNULL;           /* INDICATE EED INFORMATION WILL
*                                      BE LOST                       */
         B     @RC00113                                            0135
@RF00113 LA    R5,1                                                0135
*           RTHTREGS(FOUR)=R5;      /* PLACE ADDRESS OF 1ST EED IN 0136
*                                      TRACKING AREA                 */
@RC00113 ST    R5,RTHTREGS+12(,R4)                                 0136
*           RTHTEED2='1'B;          /* INDICATE THAT THE SECOND EED
*                                      HAS BEEN ACQUIRED             */
         OI    RTHTEED2(R4),B'00000100'                            0137
*         END;                      /* END OF EED PROCESSING         */
*     END;                          /*                       @G554P2M*/
@RF00106 DS    0H                                                  0140
*   RTHTRTRY='0'B;                  /* RESET RETRY BIT FOR NEXT PHASE*/
@RT00103 NI    RTHTRTRY(R4),B'11101111'                            0140
*TIMERP:                            /* THIS LABEL IS A RETURN POINT
*                                      FROM RTH'S RECOVERY ROUTINE 0141
*                                      FOR RETRY OF CLOCK REPAIR   0141
*                                      PHASE                         */
*   RTHTLPN=RTHTIMER;               /* INDICATE CLOCK REPAIR PHASE   */
TIMERP   MVI   RTHTLPN(R4),X'21'                                   0141
*   IF LRBMTERM^=NULL×              /* IF THE ERROR IS AN ACR ERROR  */
*       LRBMINTM^=NULL THEN         /* OR A TIMER ERROR              */
*                                                                  0142
         CLI   LRBMTERM(R6),0                                      0142
         BNE   @RT00142                                            0142
         CLI   LRBMINTM(R6),0                                      0142
         BE    @RF00142                                            0142
@RT00142 DS    0H                                                  0143
*     /***************************************************************/
*     /*                                                             */
*     /* THE PURPASE OF THIS SEGMENT IS TO SET UP THE CORRECT        */
*     /* INTERFACE AND CALL THE CLOCK REPAIR ROUTINE WHEN CERTAIN    */
*     /* TYPES OF HARDWARE ERRORS HAVE OCCURRED.                     */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0143
*     DO;                           /* ATTEMPT CLOCK REPAIR          */
*       RFY                                                        0144
*        (R0,                                                      0144
*         R1,                                                      0144
*         R13) RSTD;                /* GET REGS FOR CLOCK REPAIR   0144
*                                      PARAMETERS                    */
*       R0=PSACPUPA;                /* SET PHYSICAL CPU ADDRESS FOR
*                                      CLOCK REPAIR INTERFACE        */
         LH    R0,PSACPUPA                                         0145
*       R1=R6;                      /* SET ADDRESS OF LOGREC BUFFER  */
         LR    R1,R6                                               0146
*       R13=ADDR(RTMKSV);           /* POINT TO STANDARD SAVE AREA   */
         LR    R13,R10                                             0147
*       CALL IEAVRCLS;              /* CALL CLOCK REPAIR ROUTINE     */
         L     @15,@CV00095                                        0148
         BALR  @14,@15                                             0148
*       RFY                                                        0149
*        (R0,                                                      0149
*         R1,                                                      0149
*         R13) UNRSTD;              /* RELEASE REGS USED IN CLOCK  0149
*                                      REPAIR ROUTINE                */
*     END;                          /* END OF CLOCK REPAIR PROCESSING*/
*   RTHTRTRY='0'B;                  /* RESET RETRY BIT FOR NEXT PHASE*/
@RF00142 NI    RTHTRTRY(R4),B'11101111'                            0151
*STRG1RP:                           /* THIS LABEL IS A RETURN POINT
*                                      FROM RTH'S RECOVERY ROUTINE 0152
*                                      FOR RETRY OF STORAGE REPAIR 0152
*                                      PHASE                         */
*   RTHTLPN=RTHSTRG1;               /* INDICATE STORAGE REPAIR PHASE */
STRG1RP  MVI   RTHTLPN(R4),X'22'                                   0152
*   IF(LRBMHSTO='1'B&LRBMCIC(1:1)^=SYSRECOV)/* IF ERROR      @G554P2M
*                                      IS STORAGE ERROR NOT  @G554P2M
*                                      RECOVERED BY HARD-    @G554P2M*/
*       ×LRBMHSPF='1'B THEN         /* WARE OR A STORAGE KEY ERROR   */
*                                                                  0153
         TM    LRBMHSTO(R6),B'00000100'                            0153
         BNO   @GL00007                                            0153
         CLI   LRBMCIC(R6),X'20'                                   0153
         BNE   @RT00153                                            0153
@GL00007 TM    LRBMHSPF(R6),B'00000010'                            0153
         BNO   @RF00153                                            0153
@RT00153 DS    0H                                                  0154
*     /***************************************************************/
*     /*                                                             */
*     /* THE PURPOSE OF THIS SEGMENT IS TO SET UP THE INTERFACE AND  */
*     /* CALL THE REAL STORAGE RECONFIGURATION ROUTINE FOR STORAGE   */
*     /* ERRORS. THIS SEGMENT ALSO SAVES THE REPAIR STATUS AFTER THE */
*     /* CALL TO RSR IN THE LOGREC BUFFER AND ALSO IN THE REPAIR     */
*     /* STATUS EED, IF ONE EXISTS. INPUT TO THE SEGMENT INCLUDES THE*/
*     /* ERROR INFORMATION IN THE LRB. OUTPUT INCLUDES AN UPDATED LRB*/
*     /* AND ALSO AN UPDATED REPAIR STATUS EED, IF ONE EXISTS.       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0154
*     DO;                           /* ATTEMPT STORAGE REPAIR        */
*       RTHTRTRY='0'B;              /* RESET RETRY BIT FOR NEXT PHASE*/
         NI    RTHTRTRY(R4),B'11101111'                            0155
*PARMSRP:                           /* THIS LABEL IS A RETURN POINT
*                                      FROM RTH'S RECOVERY ROUTINE 0156
*                                      FOR RETRY OF BUILDING PARM  0156
*                                      LIST                          */
*       RTHTLPN=RTHPARMS;           /* INDICATE PHASE FOR          0156
*                                      CONSTRUCTION OF STORAGE REPAIR
*                                      PARM LIST                     */
PARMSRP  MVI   RTHTLPN(R4),X'23'                                   0156
*       IF LRBMHSPF='1'B THEN       /* IF STORAGE KEY ERROR          */
         TM    LRBMHSPF(R6),B'00000010'                            0157
         BNO   @RF00157                                            0157
*         RTMKSKYF='1'B;            /* THEN SET STORAGE KEY ERROR  0158
*                                      FLAG IN STATUS BYTE           */
         OI    RTMKSKYF(R10),B'10000000'                           0158
*       IF LRBMHSTO='1'B THEN       /* IF STORAGE DATA ERROR         */
@RF00157 TM    LRBMHSTO(R6),B'00000100'                            0159
         BNO   @RF00159                                            0159
*         RTMKSCK='1'B;             /* THEN SET STORAGE DATA ERROR 0160
*                                      FLAG IN STATUS BYTE           */
*                                                                  0160
         OI    RTMKSCK(R10),B'00010000'                            0160
*       /*************************************************************/
*       /*                                                           */
*       /* THE PURPOSE OF THIS SEGMENT IS TO CONSTRUCT THE PARAMETER */
*       /* LIST FOR THE CALL TO THE REAL STORAGE RECONFIGURATION     */
*       /* ROUTINE. DURING ITS PROCESSING, IT WILL ALSO STORE        */
*       /* ADDITIONAL INFORMATION IN THE REPAIR STATUS EED, WHEN ONE */
*       /* IS AVAILABLE. INPUT TO THE SEGMENT INCLUDES THE ERROR     */
*       /* INFORMATION IN THE LRB. OUTPUT INCLUDES THE PARAMETER LIST*/
*       /* FOR THE CALL TO RSR, AND AN UPDATED REPAIR STATUS EED IF  */
*       /* ONE EXISTS.                                               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0161
*       DO;                         /* BUILD STORAGE REPAIR PARM LIST*/
@RF00159 DS    0H                                                  0162
*         RSRPARMS=''B;             /* CLEAR AREA IN CPU RELATED SAVE
*                                      AREA USED FOR PARM LIST       */
         XC    RSRPARMS(12,R10),RSRPARMS(R10)                      0162
*         RBLOCKNO=(LRBMFSA/FOURK)*SIXTEEN;/* CALCULATE THE REAL   0163
*                                      BLOCK NUMBER OF THE ERROR AND
*                                      SAVE IT IN THE PARM LIST    0163
*                                                            @YM01853*/
         L     @12,LRBMFSA(,R6)                                    0163
         LR    @11,@12                                             0163
         SRL   @11,12                                              0163
         SLA   @11,4                                               0163
         STH   @11,RBLOCKNO(,R10)                                  0163
*         IF LRBMVFA='1'B THEN      /* DETERMINE STORAGE BOUNDS ONLY
*                                      IF THE FAILING STORAGE ADDRESS
*                                      IS VALID                      */
         TM    LRBMVFA(R6),B'10000000'                             0164
         BNO   @RF00164                                            0164
*           DO;                                                    0165
*             IF R5>EEDNULL THEN    /* IF REPAIR STATUS EED EXISTS   */
         C     R5,@CF00076                                         0166
         BNH   @RF00166                                            0166
*               DO;                                                0167
*                 RFY                                              0168
*                   EED BASED(R3);  /* USE REPAIR STATUS EED FOR   0168
*                                      MAPPING MACRO BASE            */
*                 EEDHRFSA=LRBMFSA; /* SAVE THE REAL FAILING STORAGE
*                                      ADDRESS IN THE EED            */
         ST    @12,EEDHRFSA(,R3)                                   0169
*                 RFY                                              0170
*                  (R1,                                            0170
*                   R15) RSTD;      /* GET REGS FOR CONVERSION     0170
*                                      ROUTINE PARMS                 */
*                 R1=LRBMFSA;       /* SET REAL ADDR FOR WHICH A   0171
*                                      VIRTUAL ADDR IS DESIRED       */
         LR    R1,@12                                              0171
*                 CALL CONVERT;     /* CALL THE TRANSLATE REAL TO  0172
*                                      VIRTUAL ROUTINE               */
*                                                                  0172
         L     @12,CVTPTR                                          0172
         L     @15,CVTPTRV(,@12)                                   0172
         BALR  @14,@15                                             0172
*                 /***************************************************/
*                 /*                                                 */
*                 /* RTMTRACK TO SET THE RETURN CODE AFTER THE CALL  */
*                 /* TO CONVERT                                      */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0173
*                 IF R15=CONVTNRM THEN/* IF CONVERSION WAS GOOD      */
         LTR   R15,R15                                             0173
         BNZ   @RF00173                                            0173
*                   DO;             /* THEN CALCULATE THE FAILING  0174
*                                      STORAGE RANGES                */
*                     RFY                                          0175
*                       R15 UNRSTD; /* RELEASE REG FOR RETN CODE     */
*                     RFY                                          0176
*                       R2 RSTD;    /* GET REG FOR WORD LENGTH       */
*                     IF LRBMHSPF='1'B THEN/* IF STORAGE KEY ERROR   */
         TM    LRBMHSPF(R6),B'00000010'                            0177
         BNO   @RF00177                                            0177
*                       R2=FOURK;   /* THEN ROUND TO 4K BOUNDARIES   */
         L     R2,@CF00085                                         0178
*                     ELSE          /* ELSE, IF STORAGE DATA ERROR   */
*                       R2=LRBMPWL; /* USE MACH DEPENDENT WORD LENGTH
*                                      INDICATION IN THE LRB         */
         B     @RC00177                                            0179
@RF00177 SLR   R2,R2                                               0179
         IC    R2,LRBMPWL(,R6)                                     0179
*                     EEDHSCKB=(R1/R2)*R2;/* CALCULATE AND SAVE THE
*                                      VIRTUAL STARTING ADDR OF THE
*                                      STORAGE CHECK                 */
@RC00177 LR    @15,R1                                              0180
         SLR   @14,@14                                             0180
         DR    @14,R2                                              0180
         MR    @14,R2                                              0180
         ST    @15,EEDHSCKB(,R3)                                   0180
*                     EEDHSCKE=EEDHSCKB+R2-1;/* CALCULATE AND SAVE 0181
*                                      THE VIRTUAL ENDING ADDRESS OF
*                                      THE STORAGE CHECK             */
         ALR   @15,R2                                              0181
         BCTR  @15,0                                               0181
         ST    @15,EEDHSCKE(,R3)                                   0181
*                     RFY                                          0182
*                       R2 UNRSTD;  /* RELEASE REG FOR WORDLNTH      */
*                     RTMKSRVL='1'B;/* INDICATE VALIDITY OF FAILING
*                                      ADDRESS AND STORAGE BOUNDS    */
         OI    RTMKSRVL(R10),B'10000000'                           0183
*                   END;                                           0184
*                 RFY                                              0185
*                   R1 UNRSTD;      /* RELEASE REG USED FOR CONVERT
*                                      ROUTINE                       */
@RF00173 DS    0H                                                  0186
*                 RFY                                              0186
*                   EED BASED(R5);  /* POINT TO 1ST EED IN LIST      */
*               END;                                               0187
*             FRAMECNT=1;           /* INDICATE THAT ONLY 1 FRAME  0188
*                                      WILL BE PASSED TO RSR         */
@RF00166 MVC   FRAMECNT(2,R10),@CH00076                            0188
*             IF LRBMHSPF='1'B THEN /* IF STORAGE KEY ERROR THEN     */
         TM    LRBMHSPF(R6),B'00000010'                            0189
         BNO   @RF00189                                            0189
*               KEYERR='1'B;        /* SET OPTION BIT FOR KEY ERROR  */
         OI    KEYERR(R10),B'00010000'                             0190
*             IF LRBMHSTO='1'B THEN /* IF STORAGE DATA ERROR THEN    */
@RF00189 TM    LRBMHSTO(R6),B'00000100'                            0191
         BNO   @RF00191                                            0191
*               DATAERR='1'B;       /* SET OPTION BIT FOR DATA ERROR */
         OI    DATAERR(R10),B'00100000'                            0192
*             STAT2PTR='1'B;        /* INDICATE THAT 3RD WORD OF LIST
*                                      POINTS TO 2ND STATUS BYTE     */
@RF00191 DS    0H                                                  0194
*             GLBLLOCK='1'B;        /* INDICATE TO RSR THAT SALLOC 0194
*                                      LOCK IS HELD                  */
         OI    STAT2PTR(R10),B'00000110'                           0194
*             STAT2ADD=ADDR(STAT2); /* PLACE ADDRESS OF 2ND STATUS 0195
*                                      BYTE INTO PARAMETER LIST      */
         LA    @12,STAT2(,R10)                                     0195
         ST    @12,STAT2ADD(,R10)                                  0195
*           END;                    /* END OF PROCESSING IF FAILING
*                                      ADDRESS IS VALID              */
*         ELSE                      /* IF THE FAILING STORAGE ADDRESS
*                                      IS NOT VALID                  */
*           RTMKRSRF='1'B;          /* INDICATE RSR IS TO BE BYPASSED*/
         B     @RC00164                                            0197
@RF00164 OI    RTMKRSRF(R10),B'00000100'                           0197
*       END;                        /* END OF PARM LIST CONSTRUCTION */
@RC00164 DS    0H                                                  0199
*       IF RTMKRSRF='0'B THEN       /* CONTINUE ONLY IF PARM LIST WAS
*                                      SUCCESSFULLY BUILT            */
         TM    RTMKRSRF(R10),B'00000100'                           0199
         BNZ   @RF00199                                            0199
*         DO;                                                      0200
*           RFY                                                    0201
*            (R11,                                                 0201
*             R12,                                                 0201
*             R14) RSTD;            /* GET REGS DESTROYED BY SETLOCK */
*           RFY                                                    0202
*             R13 RSTD;             /* GET REG FOR SETLOCK RETURN CD */
*           GEN;                                                   0203
*                                                                  0203
*                                   /* REQUEST THE SALLOC LOCK COND  */
         SETLOCK OBTAIN,TYPE=SALLOC,MODE=COND,RELATED=(RSR,            *
               RSRECON(RSRECON))
*           /*********************************************************/
*           /*                                                       */
*           /* RTMTRACK TO SET THE RETURN CODE AFTER ATTEMPT TO GET  */
*           /* THE SALLOC LOCK                                       */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0204
*           IF R13=STLOKNRM THEN    /* LOCK WAS GOTTEN MUST  @ZM45607*/
         LTR   R13,R13                                             0204
         BNZ   @RF00204                                            0204
*             RTMKSALC='1'B;        /* REMEMBER TO FREE LOCK @ZM45607*/
         OI    RTMKSALC(R10),B'00000010'                           0205
*           IF R13>LOCKHELD THEN    /* IF THE LOCK WAS NOT OBTAINED  */
@RF00204 C     R13,@CF00071                                        0206
         BNH   @RF00206                                            0206
*             DO;                   /* BECAUSE OTHER         @ZM45607
*                                      PROCESSOR HAS IT,     @ZM45607
*                                      ATTEMPT TO OBTAIN     @ZM45607
*                                      UNCONDITIONALLY       @ZM45607*/
*               IF LRBMTERM=NULL THEN/* ACR MUST NOT BE IN   @ZM45607*/
         CLI   LRBMTERM(R6),0                                      0208
         BNE   @RF00208                                            0208
*                 DO;               /* PROGRESS              @ZM45607
*                                      TEST IF ASM LOCK      @ZM45607*/
*                   GEN;                                           0210
*                                     /* HELD                 @ZM45607*
         SETLOCK TEST,TYPE=ASM                                @ZM45607
*                   IF R15=0 THEN   /* IF ASM LOCK HELD      @ZM45607*/
         LTR   R15,R15                                             0211
         BNZ   @RF00211                                            0211
*                     RTMKRSRF='1'B;/* RSR CANNOT BE         @ZM45607
*                                      CALLED                @ZM45607*/
         OI    RTMKRSRF(R10),B'00000100'                           0212
*                   ELSE                                           0213
*                     DO;           /* TEST IF DISP          @ZM45607*/
         B     @RC00211                                            0213
@RF00211 DS    0H                                                  0214
*                       GEN;                                       0214
*                                         /* LOCK HELD        @ZM45607*
         SETLOCK TEST,TYPE=DISP                               @ZM45607
*                       IF R15=0 THEN/* IF DISP LOCK         @ZM45607*/
         LTR   R15,R15                                             0215
         BNZ   @RF00215                                            0215
*                         RTMKRSRF='1'B;/* HELD RSR CANNOT   @ZM45607
*                                      BE CALLED             @ZM45607*/
         OI    RTMKRSRF(R10),B'00000100'                           0216
*                       ELSE                                       0217
*                         DO;       /* UNCOND OBTAIN         @ZM45607*/
         B     @RC00215                                            0217
@RF00215 DS    0H                                                  0218
*                           GEN;                                   0218
*                                         /*                  @ZM45607*
         SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,RELATED=(RSR,          *
               RSRECON(RSRECON))                              @ZM45607
*                           RTMKSALC='1'B;/* REMEMBER TO FREE LOCK 0219
*                                                            @ZM45607*/
         OI    RTMKSALC(R10),B'00000010'                           0219
*                         END;      /*                       @ZM45607*/
*                     END;          /*                       @ZM45607*/
*                 END;              /*                       @ZM45607*/
*               ELSE                                               0223
*                 RTMKRSRF='1'B;    /* ACR IN PROGRESS,      @ZM45607
*                                      INDICATE RSR CANNOT BE      0223
*                                                            @ZM45607
*                                      CALLED                @ZM45607*/
         B     @RC00208                                            0223
@RF00208 OI    RTMKRSRF(R10),B'00000100'                           0223
*             END;                  /*                       @ZM45607*/
@RC00208 DS    0H                                                  0225
*           RFY                                                    0225
*            (R11,                                                 0225
*             R12,                                                 0225
*             R14) UNRSTD;                                         0225
@RF00206 DS    0H                                                  0226
*           IF RTMKRSRF='0'B THEN   /* CONTINUE IF OK TO CALL      0226
*                                                            @ZM45607*/
         TM    RTMKRSRF(R10),B'00000100'                           0226
         BNZ   @RF00226                                            0226
*             DO;                   /* RSR                   @ZM45607*/
*               RFY                                                0228
*                (R1,                                              0228
*                 R15) RSTD;        /* GET REGS FOR RSR PARMS        */
*               R1=ADDR(RSRPARMS);  /* SET ADDRESS OF RSR PARM LIST  */
         LA    R1,RSRPARMS(,R10)                                   0229
*               R13=ADDR(RTMKSV);   /* POINT TO STANDARD SAVE AREA   */
         LR    R13,R10                                             0230
*               CALL RSR;           /* CALL THE REAL STORAGE       0231
*                                      RECONFIGURATION ROUTINE       */
*                                                                  0231
         L     @12,CVTPTR                                          0231
         L     @12,CVTPVTP(,@12)                                   0231
         L     @15,PVTPRCF(,@12)                                   0231
         BALR  @14,@15                                             0231
*               /*****************************************************/
*               /*                                                   */
*               /* RTMTRACK TO SET THE RETURN CODE AFTER THE CALL TO */
*               /* RSR                                               */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0232
*               RTHTSTGR='1'B;      /* INDICATE RSR HAS BEEN CALLED  */
*               RTHTRTRY='0'B;      /* RESET RETRY BIT FOR NEXT PHASE*/
         OI    RTHTSTGR(R4),B'00000010'                            0233
         NI    RTHTRTRY(R4),B'11101111'                            0233
*STRG2RP:                           /* THIS LABEL IS A RETURN POINT
*                                      FROM RTH'S RECOVERY ROUTINE 0234
*                                      FOR RETRY OF STORAGE REPAIR   */
*               RTHTLPN=RTHSTRG2;   /* INDICATE SECOND PART OF     0234
*                                      STORAGE REPAIR PHASE          */
STRG2RP  MVI   RTHTLPN(R4),X'24'                                   0234
*               IF R15=RSRNRM THEN  /* IF RECONFIGURATION WAS GOOD   */
         LTR   R15,R15                                             0235
         BNZ   @RF00235                                            0235
*                 RTMKINVP='1'B;    /* INDICATE THAT RSR HAS MARKED
*                                      THE PAGE AS INVALID           */
         OI    RTMKINVP(R10),B'00010000'                           0236
*               IF RTMKSALC='1'B THEN/* IF SALLOC LOCK WAS OBTAINED
*                                      BY RTH                        */
@RF00235 TM    RTMKSALC(R10),B'00000010'                           0237
         BNO   @RF00237                                            0237
*                 DO;                                              0238
*                   RFY                                            0239
*                    (R11,                                         0239
*                     R12,                                         0239
*                     R14) RSTD;    /* GET REGS DESTROYED BY SETLOCK */
*                   GEN;                                           0240
*                                   /* FREE THE SALLOC LOCK          */
         SETLOCK RELEASE,TYPE=SALLOC,DISABLED,RELATED=(RSR,            *
               RSRECON(RSRECON))
*                   RFY                                            0241
*                    (R11,                                         0241
*                     R12,                                         0241
*                     R13,                                         0241
*                     R14) UNRSTD;  /* RELEASE REGS DESTROYED BY   0241
*                                      SETLOCK                       */
*                 END;              /* END OF SECTION TO FREE LOCK   */
*               IF RTMKRSRF='0'B THEN/* IF RSR ROUTINE WAS ACTUALLY
*                                      CALLED                        */
@RF00237 TM    RTMKRSRF(R10),B'00000100'                           0243
         BNZ   @RF00243                                            0243
*                 RTMKRSRC='1'B;    /* INDICATE THAT RSR STATUS IS 0244
*                                      AVAILABLE                     */
         OI    RTMKRSRC(R10),B'00001000'                           0244
*               RFY                                                0245
*                (R1,                                              0245
*                 R15) UNRSTD;      /* RELEASE REGS USED IN RSR    0245
*                                      ROUTINE                       */
@RF00243 DS    0H                                                  0246
*               IF RTMKINVP='1'B&   /* RSR HAS INVALIDATED THE PAGE
*                                                            @G558P2M*/
*                   LRBMIBU='1'B&   /* BACKED-UP BIT ON      @G558P2M*/
*                   LRBMIDY='0'B&   /* NOT A DELAYED ERROR   @G558P2M*/
*                   LRBMHIPD='1'B&  /* INSTRUCTION PROCESSING DAMAGE
*                                                            @G558P2M*/
*                   LRBMHSD='0'B&   /* NO SYSTEM DAMAGE      @ZM45608*/
*                   LRBMSEXD='0'B&  /* NO EXTERNAL DAMAGE    @ZM45608*/
*                   LRBMINTM='00'X& /* NO TIMER OR CLOCK DAMAGE    0246
*                                                            @ZM45608*/
*                   LRBMHINV='0'B&  /* ALL INVALID STATUS BITS OFF 0246
*                                                            @G558P2M*/
*                   LRBMVST='1'B&   /* STORAGE LOGICAL VALIDITY ON 0246
*                                                            @G558P2M*/
*                   (RTMKSALC='1'B× /* EITHER SALLOC NOT HELD OR   0246
*                                                            @G558P2M*/
*                   PSWIO='1'B×     /* ENABLED AT TIME MACHINE CHECK
*                                      OCCURS                @G558P2M*/
*                   LRBMHSPF='1'B) THEN/* KEY ERROR          @G558P2M*/
         TM    RTMKINVP(R10),B'00010000'                           0246
         BNO   @RF00246                                            0246
         TM    LRBMIBU(R6),B'00000010'                             0246
         BNO   @RF00246                                            0246
         TM    LRBMIDY(R6),B'00000001'                             0246
         BNZ   @RF00246                                            0246
         TM    LRBMHIPD(R6),B'00000001'                            0246
         BNO   @RF00246                                            0246
         TM    LRBMHSD(R6),B'00010000'                             0246
         BNZ   @RF00246                                            0246
         TM    LRBMSEXD(R6),B'00001000'                            0246
         BNZ   @RF00246                                            0246
         CLI   LRBMINTM(R6),X'00'                                  0246
         BNE   @RF00246                                            0246
         TM    LRBMHINV(R6),B'00001000'                            0246
         BNZ   @RF00246                                            0246
         TM    LRBMVST(R6),B'00000001'                             0246
         BNO   @RF00246                                            0246
         TM    RTMKSALC(R10),B'00000010'                           0246
         BO    @RT00246                                            0246
         TM    PSWIO(R6),B'00000010'                               0246
         BO    @RT00246                                            0246
         TM    LRBMHSPF(R6),B'00000010'                            0246
         BNO   @RF00246                                            0246
@RT00246 DS    0H                                                  0247
*                 DO;               /*                       @G558P2M*/
*                   R0=RT1CPOOL;    /* GET CELLPOOL ID FOR FREECELL
*                                                            @G558P2M*/
         L     R0,RT1CPOOL                                         0248
*                   R13=ADDR(RTMKSV);/* PROVIDE SAVEAREA     @G558P2M*/
         LR    R13,R10                                             0249
*                   DO WHILE R5>EEDNULL;/* LOOP THRU EEDS    @G558P2M*/
         B     @DE00250                                            0250
@DL00250 DS    0H                                                  0251
*                     R1=R5;        /* INPUT REG FOR FREECELL      0251
*                                                            @G558P2M*/
         LR    R1,R5                                               0251
*                     R5=R1->EEDFWRDP;/* PTR TO NEXT EED(IF ANY)   0252
*                                                            @G558P2M*/
         L     R5,EEDFWRDP(,R1)                                    0252
*                     GEN(FREECELL CPID=(0),CELL=(1),BRANCH=YES);/*
*                                                            @G558P2M*/
         FREECELL CPID=(0),CELL=(1),BRANCH=YES
*                   END;            /*                       @G558P2M*/
@DE00250 C     R5,@CF00076                                         0254
         BH    @DL00250                                            0254
*                   RTHTEED1='0'B;  /* RESET RECOVERY INDICATORS TO
*                                                            @G558P2M*/
*                   RTHTEED2='0'B;  /* INDICATE NO EEDS      @G558P2M*/
         NI    RTHTEED1(R4),B'11110011'                            0256
*                   R5=NULL;        /* ENSURE EEDPTR ZERO    @G558P2M*/
         SLR   R5,R5                                               0257
*                   RTHTREGS(FOUR)=R5;/* ZERO EEDPTRS IN TRACKING  0258
*                                      AREA                  @G558P2M*/
         ST    R5,RTHTREGS+12(,R4)                                 0258
*                   RTHTREGS(FIVE)=R5;/*                     @G558P2M*/
         ST    R5,RTHTREGS+16(,R4)                                 0259
*                 END;              /*                       @G558P2M*/
*               LRBMRSR1=STAT1;     /* MOVE RSR STATUS BYTE 1 TO LRB */
@RF00246 IC    @12,STAT1(,R10)                                     0261
         STC   @12,LRBMRSR1(,R6)                                   0261
*               LRBMRSR2=STAT2;     /* MOVE RSR STATUS BYTE 2 TO LRB */
         IC    @12,STAT2(,R10)                                     0262
         STC   @12,LRBMRSR2(,R6)                                   0262
*               IF R5>EEDNULL THEN  /* IF REPAIR STAT EED EXISTS     */
         C     R5,@CF00076                                         0263
         BNH   @RF00263                                            0263
*                 R3->EEDHRSRS=SRSTATUS;/* MOVE STATUS BYTES IN      */
         LH    @12,SRSTATUS(,R10)                                  0264
         N     @12,@CF02712                                        0264
         STH   @12,EEDHRSRS(,R3)                                   0264
*             END;                  /* END OF SECTION FOR CALL TO RSR*/
@RF00263 DS    0H                                                  0266
*         END;                      /* END OF SECTION FOR          0266
*                                      SUCCESSFULLY BUILT PARAMETER
*                                      LIST                          */
@RF00226 DS    0H                                                  0267
*       LRBMPDAR=RTMKFL1;           /* MOVE REPAIR STATUS BYTE TO LRB*/
@RF00199 IC    @12,RTMKFL1(,R10)                                   0267
         STC   @12,LRBMPDAR(,R6)                                   0267
*     END;                          /* END OF STORG REPAIR PROCESSING*/
*   RTHTRTRY='0'B;                  /* RESET RETRY BIT FOR NEXT PHASE*/
@RF00153 NI    RTHTRTRY(R4),B'11101111'                            0269
*RECRDRP:                           /* THIS LABEL IS A RETURN POINT
*                                      FROM RTH'S RECOVERY ROUTINE 0270
*                                      FOR RETRY OF RECORDING        */
*   RTHTLPN=RTHRECRD;               /* INDICATE ERROR RECORDING PHASE*/
*                                                                  0270
RECRDRP  MVI   RTHTLPN(R4),X'25'                                   0270
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THIS SEGMENT IS TO UTILIZE THE RECORDING       */
*   /* FACILITY TO PLACE A RECORD OF THE HARDWARE FAILURE ON         */
*   /* SYS1.LOGREC FOR ALL TYPES OF ERRORS. DURING ITS PROCESSING, IT*/
*   /* WILL ALSO STORE ADDITIONAL INFORMATION IN THE REPAIR STATUS   */
*   /* EED, WHEN ONE IS AVAILABLE. IF THE ERROR WAS A HARD ERROR AND */
*   /* AN EED EXISTS, AN ERRORID IS GENERATED AND WRITTEN TO         */
*   /* SYS1.LOGREC. INPUT TO THE SEGMENT INCLUDES THE ERROR          */
*   /* INFORMATION IN THE LRB. OUTPUT FROM THE SEGMENT INCLUDES AN   */
*   /* UPDATED REPAIR STATUS EED, IF ONE EXISTS.                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0271
*   DO;                             /* RECORD THE HARDWARE ERROR     */
*     RFY                                                          0272
*      (R2,                                                        0272
*       R15,                                                       0272
*       R13) RSTD;                  /* GET REGS FOR ERROR RECORDING
*                                      AND FOR A POINTER TO A SAVE 0272
*                                      AREA                          */
*     R13=ADDR(RTMKSV);             /* POINT TO A STANDARD SAVE AREA */
         LR    R13,R10                                             0273
*     IF R5>EEDNULL THEN            /* IF A REPAIR STATUS EED EXISTS */
         C     R5,@CF00076                                         0274
         BNH   @RF00274                                            0274
*       DO;                         /* RECORD THE TIMESTAMP          */
*         RFY                                                      0276
*           R3 RSTD;                /* RESTRICT HARDWARE REPAIR    0276
*                                      STATUS EED POINTER    @G17EP5W*/
*         RFY                                                      0277
*           EED BASED(R3);          /* USE HARDWARE EED      @G17EP5W*/
*         R3->EEDHTIME=LRBMTIME;    /* PLACE TIMESTAMP IN REPAIR   0278
*                                      STATUS EED                    */
         MVC   EEDHTIME(8,R3),LRBMTIME+8(R6)                       0278
*         RTMKTSVL='1'B;            /* INDICATE VALIDITY OF TIMESTAMP*/
         OI    RTMKTSVL(R10),B'00100000'                           0279
*         IF PSAAOLD->ASCBASCB=NASCB THEN/* IF VALID ASCB ADDR     0280
*                                                            @G17EP5W*/
         L     @14,PSAAOLD                                         0280
         CLC   ASCBASCB(4,@14),@CC00088                            0280
         BNE   @RF00280                                            0280
*           EEDEASID=PSAAOLD->ASCBASID;/* GET ASID FOR ERRORID     0281
*                                                            @G17EP5W*/
         MVC   EEDEASID(2,R3),ASCBASID(@14)                        0281
*         ELSE                                                     0282
*           ;                       /* OTHERWISE,ASID=0      @G17EP5W*/
@RF00280 DS    0H                                                  0283
*         EEDECPUI=PSACPULA;        /* LOGICAL CPU ID        @G17EP5W*/
         LH    @14,PSACPULA                                        0283
         STH   @14,EEDECPUI(,R3)                                   0283
*         RFY                                                      0284
*          (R0,                                                    0284
*           R1) RSTD;               /* REGISTERS FOR MACROS  @G17EP5W*/
*         R2=ADDR(LRBMTIME);        /* ADDRESS OF TIMESTAMP  @G17EP5W*/
         LA    R2,8                                                0285
         ALR   R2,R6                                               0285
*         GEN;                                                     0286
*                                   /*FOR 4 BYTE CONVERSION  @G17EP5W*/
              CONTIME TIMER=(2),STCLOCK=NO    /*CONVERT TIME @G17EP5W*/
*         EEDETIME=R1;              /* THE CONVERTED TIME VALUE IS 0287
*                                      RETURNED IN R0 AND PUT IN THE
*                                      EED FOR ERRORID       @G17EP5W*/
         ST    R1,EEDETIME(,R3)                                    0287
*         RFY                                                      0288
*          (R11) RSTD;              /* REG USED FOR SEQ ADDR @G17EP5W*/
*         R11=ADDR(EEDESEQ#);       /* NEW SEQ#ADDR          @G17EP5W*/
         LA    R11,EEDESEQ#(,R3)                                   0289
*         GEN;                                                     0290
*                                   /*GET ERRORID SEQ#       @G17EP5W*/
             GETSEQ (11)            /*PUT SEQ# IN EED        @G17EP5W*/
*         RFY                                                      0291
*          (R0,                                                    0291
*           R1,                                                    0291
*           R11) UNRSTD;            /* FREE UP REGISTERS     @G17EP5W*/
*         EEDERFL=ON;               /* INDICATE ERRORID IN EED     0292
*                                                            @G17EP5W*/
         OI    EEDERFL(R3),B'10000000'                             0292
*         RFY                                                      0293
*           RCDPARM BASED((ADDR(EEDVARBL))+LENGTH(EEDHWREP));/* PUT
*                                      RECORD PARM IN EED    @G17EP5W*/
*         RCDERRID=EEDERRID;        /* MOVE IN ERRORID       @G17EP5W*/
         LA    @14,EEDVARBL(,R3)                                   0294
         AL    @14,@CF00435                                        0294
         MVC   RCDERRID(10,@14),EEDERRID(R3)                       0294
*         RCDATPTR=R6;              /* PUT ADDR OF LRB IN RECORD   0295
*                                      PARAMETER DATA ADDR   @G17EP5W*/
         ST    R6,RCDATPTR(,@14)                                   0295
*         R2=LRBMLNH;               /* LENGTH OF DATA TO BE RECORDED
*                                                            @G17EP5W*/
         L     R2,LRBMLNH(,R6)                                     0296
*         R6=ADDR(RCDPARM);         /* SET ADDR OF PARM LIST @G17EP5W*/
         LR    R6,@14                                              0297
*         GEN;                                                     0298
*                                   /*ISSUE RECORDING MACRO  @G17EP5W*/
             RECORD TYPE=LOGREC,RCVRY=SETFRR,PARMADR=(6),BUFFER=OPT,   C
               LENGTH=(2),ERRORID=YES   /*                   @G17EP5W*/
*         R6=RCDATPTR;              /* RESTORE LRB ADDR      @G17EP5W*/
         LA    @14,EEDVARBL(,R3)                                   0299
         AL    @14,@CF00435                                        0299
         L     R6,RCDATPTR(,@14)                                   0299
*         RCDPARM=RCDPARM&&RCDPARM; /* ZERO OUT EED AREA USED FOR  0300
*                                      RECORDING PARAMETER   @G17EP5W*/
         XC    RCDPARM(16,@14),RCDPARM(@14)                        0300
*       END;                        /* END RECORD W/ ERRORID @G17EP5W*/
*     ELSE                          /* IF NO EED'S EXIST THIS      0302
*                                                            @G17EP5W*/
*       DO;                         /* IS A SOFT ERROR, SO NO ERRORID
*                                      IS RECORDED           @G17EP5W*/
         B     @RC00274                                            0302
@RF00274 DS    0H                                                  0303
*         R2=LRBMLNH;               /* LENGTH OF RECORDED          0303
*                                      DATA@G17EP5W                  */
         L     R2,LRBMLNH(,R6)                                     0303
*         GEN;                                                     0304
*                                   /* ISSUE ERROR RECORDING MACRO   */
         RECORD TYPE=LOGREC,RCVRY=SETFRR,DATAADR=(6),BUFFER=OPT,       *
               LENGTH=(2)
*       END;                        /* END RECORD W/O ERRORID@G17EP5W*/
*                                                                  0305
*     /***************************************************************/
*     /*                                                             */
*     /* RTMTRACK TO SET THE RETURN CODE AFTER RECORDING             */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0306
*     IF R15<=RETCD4 THEN           /* IF ERROR RECORDING WAS GOOD   */
@RC00274 LA    @14,4                                               0306
         CR    R15,@14                                             0306
         BH    @RF00306                                            0306
*       DO;                                                        0307
*         IF R15=RETCD4 THEN        /* IF RECORDING RETURNED A CODE
*                                      OF 4 (INDICATING THAT THE MCH
*                                      BUFFER AREA WAS USED)         */
         CR    R15,@14                                             0308
         BNE   @RF00308                                            0308
*           RTMKREC4='1'B;          /* INIDCATE THIS IS FLAG BYTE    */
         OI    RTMKREC4(R10),B'00000001'                           0309
*       END;                        /* END OF SUCCESSFUL RECORDING 0310
*                                      PROCESSING                    */
*     ELSE                          /* IF RECORDING WAS UNSUCCESSFUL */
*       RTMKRCDF='1'B;              /* INDICATE THAT THE MCH RECORD
*                                      WAS NOT RECORDED              */
         B     @RC00306                                            0311
@RF00306 OI    RTMKRCDF(R10),B'01000000'                           0311
*     RFY                                                          0312
*      (R2,                                                        0312
*       R15,                                                       0312
*       R13) UNRSTD;                /* RELEASE REGS USED IN ERROR  0312
*                                      RECORDING                     */
@RC00306 DS    0H                                                  0313
*   END;                            /* END OF RECORDING PROCESSING   */
*   RTHTRTRY='0'B;                  /* RESET RETRY BIT FOR NEXT PHASE*/
         NI    RTHTRTRY(R4),B'11101111'                            0314
*SOFTWRP:                           /* THIS LABEL IS A RETURN POINT
*                                      FROM RTH'S RECOVERY ROUTINE 0315
*                                      FOR RETRY OF SOFTWARE       0315
*                                      INFORMATION GATHERING         */
*   RTHTLPN=RTHSOFTW;               /* INDICATE SOFTWARE INFORMATION
*                                      RECOVERY PHASE                */
*                                                                  0315
SOFTWRP  MVI   RTHTLPN(R4),X'26'                                   0315
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THIS SEGMENT IS TO COMPLETE THE ANALYSIS OF THE*/
*   /* LOGREC BUFFER ERROR WORD, SETTING THE BITS IN THE MACHINE     */
*   /* CHECK DATA FLAG BYTE ACCORDING TO THE NOTED ERRORS. IF THE    */
*   /* ERROR WAS A HARD OR ACR ERROR, THIS SEGMENT WILL SET UP THE   */
*   /* ENVIRONMENT IN THE CPU RELATED SAVE AREA FOR A RETURN TO RTM  */
*   /* AS A MACHCK REENTRY. IF THE ERROR WAS A TRANSPARENT ERROR,    */
*   /* I.E. ONE ON WHICH THE INTERRUPTED PROGRAM CAN BE RETURNED TO, */
*   /* THIS SEGMENT WILL ALSO SET UP THE ENVIRONMENT NECESSARY TO    */
*   /* RETURN CONTROL TO THE INTERRUPTED PROGRAM. INPUT TO THIS      */
*   /* SEGMENT INCLUDES THE ERROR INFORMATION IN THE LRB. OUTPUT FROM*/
*   /* THIS SEGMENT INCLUDES AN UPDATED REPAIR STATUS EED AND AN     */
*   /* UPDATED ENVIRONMENT EED, IF THEY EXIST, AND ALSO A COMPLETED  */
*   /* CPU RELATED SAVE AREA READY FOR RETURN TO RTM.                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0316
*   DO;                             /* COMPLETE SOFTWARE INFORMATION */
*     RTMKRETN=''B;                 /* CLEAR THE AREA RETURNED TO RTM*/
         XC    RTMKRETN(84,R10),RTMKRETN(R10)                      0317
*     IF R5=NULL THEN               /* IF NO ATTEMPT TO ACQUIRE EEDS
*                                      WAS MADE, THE ERROR WAS A SOFT
*                                      ERROR                         */
         LTR   R5,R5                                               0318
         BNZ   @RF00318                                            0318
*       DO;                         /* IN THIS CASE, RESTORE THE   0319
*                                      ENVIRONMENT FOR RETURN TO THE
*                                      INTERRUPTED PROGRAM           */
*         RTMKREGS=LRBGREGS;        /* RESTORE REGS AT TIME OF ERROR */
         LA    @12,LRBMFLO(,R6)                                    0320
         LA    @11,FLCGRSAV                                        0320
         LA    @02,FLCMCIC                                         0320
         SLR   @11,@02                                             0320
         ALR   @12,@11                                             0320
         MVC   RTMKREGS(64,R10),LRBGREGS(@12)                      0320
*         RTMKMPSW=LRBMMOSW;        /* RESTORE MACHINE CHECK OLD PSW */
         MVC   RTMKMPSW(8,R10),LRBMMOSW(R6)                        0321
*       END;                                                       0322
*     ELSE                          /* IF EEDS WERE REQUESTED THEN 0323
*                                      THE ERROR IS ONE REQUIRING  0323
*                                      FURTHER SOFTWARE PROCESSING   */
*       DO;                         /* FIRST COMPLETE INFORMATION FOR
*                                      THE FRR INTERFACE             */
         B     @RC00318                                            0323
@RF00318 DS    0H                                                  0324
*         IF LRBMTERM^=NULL THEN    /* IF ERROR WAS AN ACR ERROR     */
         CLI   LRBMTERM(R6),0                                      0324
         BE    @RF00324                                            0324
*           DO;                                                    0325
*             RTMKACR='1'B;         /* INDICATE ACR ERROR IN FLAGS   */
         OI    RTMKACR(R10),B'00001000'                            0326
*             RTMKCPID=PSACPUPA;    /* SAVE PHYSICAL CPU ADDRESS     */
         LH    @12,PSACPUPA                                        0327
         STH   @12,RTMKCPID(,R10)                                  0327
*           END;                                                   0328
*         IF LRBMHARD^=NULL×        /* IF ERROR WAS A HARD ERROR   0329
*                                                            @YM08141*/
*             LRBMTERM^=NULL THEN   /* OR AN ACR ERROR       @YM08141*/
@RF00324 CLI   LRBMHARD(R6),0                                      0329
         BNE   @RT00329                                            0329
         CLI   LRBMTERM(R6),0                                      0329
         BE    @RF00329                                            0329
@RT00329 DS    0H                                                  0330
*           DO;                     /* CHECK SPECIFIC HARD ERROR BITS*/
*             IF LRBMHIPD='1'B THEN /* IF INSTRUCTION PROCESSING   0331
*                                      DAMAGE IS INDICATED           */
         TM    LRBMHIPD(R6),B'00000001'                            0331
         BNO   @RF00331                                            0331
*               RTMKINSF='1'B;      /* MARK INSTRUCTION FAILURE FLAG */
         OI    RTMKINSF(R10),B'00000100'                           0332
*             IF LRBMVFP='0'B×      /* DETERMINE WHETHER ANY REGS    */
*                 LRBMVGR='0'B THEN /* ARE INVALID, IF SO            */
@RF00331 TM    LRBMVFP(R6),B'00011000'                             0333
         BO    @RF00333                                            0333
*               RTMKREGU='1'B;      /* MARK REGS AS UNPREDICTABLE    */
         OI    RTMKREGU(R10),B'01000000'                           0334
*             IF LRBMVWP='0'B×      /* DETERMINE WHETHER ANY PART    */
*                 LRBMVMS='0'B×     /* OF THE PSW IS INVALID, IF SO  */
*                 LRBMVPM='0'B×LRBMVIA='0'B THEN                   0335
@RF00333 TM    LRBMVWP(R6),B'00001111'                             0335
         BO    @RF00335                                            0335
*               RTMKPSWU='1'B;      /* MARK THE PSW AS UNPREDICTABLE */
         OI    RTMKPSWU(R10),B'00100000'                           0336
*           END;                    /* END OF HARD ERROR PROCESSING  */
@RF00335 DS    0H                                                  0338
*         IF LRBMINTM^=NULL THEN    /* IF THE ERROR WAS A TIMER ERROR*/
@RF00329 CLI   LRBMINTM(R6),0                                      0338
         BE    @RF00338                                            0338
*           RTMKTERR='1'B;          /* INDICATE TIMER ERROR IN FLAGS */
         OI    RTMKTERR(R10),B'00000001'                           0339
*         IF R5>EEDNULL THEN        /* IF A REPAIR STATUS EED EXISTS */
@RF00338 C     R5,@CF00076                                         0340
         BNH   @RF00340                                            0340
*           DO;                     /* FILL IN COMPLETE REPAIR STATUS*/
*             RFY                                                  0342
*               EED BASED(R3);      /* USE REPAIR STATUS EED         */
*             EEDHMCHS=RTMKFL1;     /* FILL IN SOFTWARE STATUS FLAGS */
         IC    @12,RTMKFL1(,R10)                                   0343
         STC   @12,EEDHMCHS(,R3)                                   0343
*             EEDHMCHD=RTMKFL2;     /* FILL IN MACHINE CHECK DATA    */
         IC    @12,RTMKFL2(,R10)                                   0344
         STC   @12,EEDHMCHD(,R3)                                   0344
*             EEDHCPID=RTMKCPID;    /* FILL IN ADDR OF DEAD CPU -  0345
*                                      GOOD ONLY IF ACR TYPE ERROR   */
         LH    @12,RTMKCPID(,R10)                                  0345
         STH   @12,EEDHCPID(,R3)                                   0345
*             RTMKR5=ADDR(EEDHWREP);/* FILL IN REG 5 SLOT TO POINT TO
*                                      THE REPAIR STATUS             */
         LA    @12,EEDHWREP(,R3)                                   0346
         ST    @12,RTMKR5(,R10)                                    0346
*             RFY                                                  0347
*               EED BASED(R5);      /* USE FIRST EED ON LIST         */
*             IF EEDID=REGSPTYP THEN/* IF ENVIRONMENT EED EXISTS     */
         CLI   EEDID(R5),1                                         0348
         BNE   @RF00348                                            0348
*               DO;                 /* THEN FILL IN ENVIRONMENT DATA */
*                 EEDREGS=LRBGREGS; /* FILL IN REGS AT TIME OF ERROR */
         LA    @12,LRBMFLO(,R6)                                    0350
         LA    @11,FLCGRSAV                                        0350
         LA    @02,FLCMCIC                                         0350
         SLR   @11,@02                                             0350
         ALR   @12,@11                                             0350
         MVC   EEDREGS(64,R5),LRBGREGS(@12)                        0350
*                 EEDPSW1=LRBMMOSW; /* FILL IN MACHINE CHECK OLD PSW */
         MVC   EEDPSW1(8,R5),LRBMMOSW(R6)                          0351
*                 RTMKR2=ADDR(EEDPSW1);/* FILL IN REG 2 SLOT TO POINT
*                                      TO PSW AT TIME OF ERROR - FOR
*                                      MACHCK REENTRY                */
         LA    @12,EEDPSW1(,R5)                                    0352
         ST    @12,RTMKR2(,R10)                                    0352
*                 RTMKR3=ADDR(EEDPSW2);/* FILL IN REG 3 SLOT TO POINT
*                                      TO THE PSW EXTENSION - IN THIS
*                                      CASE ZERO - FOR MACHCK REENTRY*/
         LA    @12,EEDPSW2(,R5)                                    0353
         ST    @12,RTMKR3(,R10)                                    0353
*                 RTMKR13=ADDR(EEDREGS);/* FILL IN REG 13 SLOT WITH
*                                      THE ADDR OF THE REGISTER SAVE
*                                      AREA - FOR MACHCK REENTRY     */
         LA    @12,EEDREGS(,R5)                                    0354
         ST    @12,RTMKR13(,R10)                                   0354
*               END;                /* COMPLETION OF ENVIRONMENT EED */
*           END;                    /* COMPLETION OF REPR STATUS EED */
*         ELSE                      /* IF NO REPAIR STATUS EED EXISTS*/
*           RTMKR5=RTMKSTAT;        /* THEN FILL IN REG 5 SLOT WITH
*                                      ABBREVIATED REPAIR STATUS - 0357
*                                      FOR MACHCK REENTRY            */
         B     @RC00340                                            0357
@RF00340 L     @12,RTMKSTAT(,R10)                                  0357
         ST    @12,RTMKR5(,R10)                                    0357
*         IF R5=EEDNULL×            /* IF NO EEDS WERE ACQUIRED OR   */
*             EEDFWRDP=EEDNULL THEN /* IF NO ENVIRONMENT EED EXISTS  */
@RC00340 LA    @12,1                                               0358
         CR    R5,@12                                              0358
         BE    @RT00358                                            0358
         C     @12,EEDFWRDP(,R5)                                   0358
         BNE   @RF00358                                            0358
@RT00358 DS    0H                                                  0359
*           DO;                     /* THEN POINT TO THE REGISTERS 0359
*                                      AND PSW IN THE LRB, SINCE MORE
*                                      OFTEN THAN NOT THIS         0359
*                                      INFORMATION WILL STILL BE   0359
*                                      CORRECT WHEN RTM IS REENTERED */
*             RTMKR2=ADDR(LRBMMOSW);/* FILL IN REG 2 SLOT TO POINT TO
*                                      PSW AT TIME OF ERROR - FOR  0360
*                                      MACHCK REENTRY                */
         LA    @12,LRBMMOSW(,R6)                                   0360
         ST    @12,RTMKR2(,R10)                                    0360
*             RTMKR13=ADDR(LRBGREGS);/* FILL IN REG 13 SLOT WITH THE
*                                      ADDR OF THE REGISTER SAVE AREA
*                                      - FOR MACHCK REENTRY          */
         LA    @12,LRBMFLO(,R6)                                    0361
         LA    @11,FLCGRSAV                                        0361
         LA    @02,FLCMCIC                                         0361
         SLR   @11,@02                                             0361
         ALR   @12,@11                                             0361
         ST    @12,RTMKR13(,R10)                                   0361
*           END;                                                   0362
*         RTMKR1=RENTRYCC;          /* FILL IN REG 1 SLOT WITH THE 0363
*                                      NECESSARY FLAGS AND COMP CODE
*                                      FOR MACHCK REENTRY            */
@RF00358 L     @12,RENTRYCC                                        0363
         ST    @12,RTMKR1(,R10)                                    0363
*         RTMKR6=R5;                /* FILL IN REG 6 SLOT TO POINT TO
*                                      THE CHAIN OF EEDS ACQUIRED, IF
*                                      ANY - FOR MACHCK REENTRY      */
         ST    R5,RTMKR6(,R10)                                     0364
*         RTMKMPSW=RENTRPSW;        /* FILL IN PSW SLOT TO CAUSE   0365
*                                      REENTRY INTO RTM              */
         MVC   RTMKMPSW(8,R10),RENTRPSW                            0365
*       END;                        /* COMPLETION OF ENVIRONMENT FOR
*                                      RETURN TO RTM                 */
*     IF RTMKREC4^='1'B THEN        /* IF RECORDING ROUTINE DID NOT
*                                      RETURN A CODE OF 4            */
@RC00318 TM    RTMKREC4(R10),B'00000001'                           0367
         BO    @RF00367                                            0367
*       LRBMACT='00'X;              /* MARK LRB AS USABLE            */
         MVI   LRBMACT(R6),X'00'                                   0368
*   END;                            /* END OF SOFTWARE INFORMATION 0369
*                                      PROCESSING                    */
@RF00367 DS    0H                                                  0370
*   RTHTRTRY='0'B;                  /* RESET RETRY BIT FOR NEXT PHASE*/
*                                                                  0370
         NI    RTHTRTRY(R4),B'11101111'                            0370
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THIS SEGMENT IS TO DELETE THE RECOVERY         */
*   /* ENVIRONMENT CREATED BY RTH AND TO PREPARE FOR RETURN TO RTM.  */
*   /* INPUT TO THIS SEGMENT INCLUDES: THE TRAKAREA REG (R4) WHICH   */
*   /* POINTS TO RTHS TRACKING AREA, AND THE EEDLIST REGISTER (R5)   */
*   /* WHICH POINTS TO THE CHAIN OF EEDS. OUTPUT FROM THIS SEGMENT   */
*   /* INCLUDES: THE TRAKAREA REGISTER (R4) WHICH POINTS TO THE      */
*   /* PREVIOUS TRACKING AREA, THE EEDCHAIN REGISTER (R6) WHICH      */
*   /* POINTS TO THE CHAIN OF EEDS FOR RETURN TO RTM, AND REGISTER R0*/
*   /* WHICH WILL BE RESTORED TO ITS VALUE ON ENTRY FROM RTM.        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0371
*EXITRP:                            /* THIS LABEL IS A RETURN POINT
*                                      FROM RTH'S RECOVERY ROUTINE 0371
*                                      FOR RETRY OF EXIT PROCESSING  */
*   DO;                             /* BEGIN EXIT PROCESSING         */
EXITRP   DS    0H                                                  0372
*     RTHTLPN=RTHEXIT;              /* INDICATE EXIT PHASE           */
         MVI   RTHTLPN(R4),X'27'                                   0372
*     R6=R5;                        /* SET UP REG THAT RTM EXPECTS TO
*                                      CONTAIN THE POINTER TO THE EED
*                                      CHAIN                         */
         LR    R6,R5                                               0373
*     RFY                                                          0374
*       R14 RSTD;                   /* GET REGISTER FOR RETURN VALUE */
*     R14=R7;                       /* RESTORE ORIGINAL RETURN POINT
*                                      VALUE                         */
         LR    R14,R7                                              0375
*     RFY                                                          0376
*       R0 RSTD;                    /* GET REG USED BY RTM FOR     0376
*                                      RESTORATION TO ITS ORIGINAL 0376
*                                      VALUE                         */
*     R0=RT1WMACH;                  /* PLACE ORIGINAL ENTRY POINT  0377
*                                      INDICATOR IN REGISTER         */
         LA    R0,20                                               0377
*     RFY                                                          0378
*      (R3,                                                        0378
*       R5,                                                        0378
*       R7) UNRSTD;                 /* RELEASE REGS USED INTERNALLY
*                                      BY RTH                        */
*   END;                            /* END OF EXIT PROCESSING        */
*   END IEAVTRTH                    /* END OF RTH                    */
*                                                                  0380
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (RTHSPEC )                                       */
*/*%INCLUDE SYSLIB  (RTHDCL  )                                       */
*/*%INCLUDE SYSLIB  (IHART1W )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (IHALCCA )                                       */
*/*%INCLUDE SYSLIB  (IHALRB  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHAPVT  )                                       */
*/*%INCLUDE SYSLIB  (IHARTCT )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IHAWSAVT)                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (ENTRY   )                                       */
*/*%INCLUDE SYSLIB  (EEDREQST)                                       */
*/*%INCLUDE SYSLIB  (CLOCKREP)                                       */
*/*%INCLUDE SYSLIB  (RSRECON )                                       */
*/*%INCLUDE SYSLIB  (BLDPLIST)                                       */
*/*%INCLUDE SYSLIB  (RECORDNG)                                       */
*/*%INCLUDE SYSLIB  (SOFTINFO)                                       */
*/*%INCLUDE SYSLIB  (EXIT    )                                       */
*                                                                  0380
*       ;                                                          0380
@EL00001 DS    0H                                                  0380
@EF00001 DS    0H                                                  0380
@ER00001 BR    @14                                                 0380
@DATA    DS    0H
@DATD    DSECT
         DS    0F
IEAVTRTH CSECT
         DS    0F
@CF00076 DC    F'1'
@CH00076 EQU   @CF00076+2
@CF00071 DC    F'4'
@CF00435 DC    F'28'
@CF00085 DC    F'4096'
@CF02712 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEAVTRTH CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00095 DC    V(IEAVRCLS)
@CV00096 DC    V(IEAVTRTN)
         DS    0D
RENTRYCC DS    FL4
         ORG   RENTRYCC
RENFLAGS DC    X'90'
RENCOMPC DC    X'0F3000'
         ORG   RENTRYCC+4
@CC00088 DC    C'ASCB'
RT1CPOOL DS    CL4
         ORG   RT1CPOOL
EBCDICNM DC    CL3'RT1'
HEXNM    DC    X'04'
         ORG   RT1CPOOL+4
RENTRPSW DS    CL8
         ORG   RENTRPSW
PSWWRD1  DC    X'040C0000'
ADDRENTR DC    VL4(IEAVTRTN)
         ORG   RENTRPSW+8
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R9       EQU   @09
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
R8       EQU   @08
         ENTRY RTHSTART
         ENTRY EEDRP
         ENTRY TIMERP
         ENTRY STRG1RP
         ENTRY PARMSRP
         ENTRY STRG2RP
         ENTRY RECRDRP
         ENTRY SOFTWRP
         ENTRY EXITRP
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCMCIC  EQU   FLCMCLA+64
FLCFSA   EQU   FLCMCLA+80
FLCGRSAV EQU   FLCMCLA+216
PSACPUPA EQU   PSA+516
PSACPULA EQU   PSA+518
PSALCCAV EQU   PSA+528
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
FRREPTR  EQU   0
FRRSPTR  EQU   0
LCCAPTR  EQU   0
LRBPTR   EQU   0
PVTPTR   EQU   0
ASCBPTR  EQU   0
SDWAPTR  EQU   0
RSR      EQU   0
CONVERT  EQU   0
RTHTRACK EQU   0
RTHTFLGS EQU   RTHTRACK
RTHTLPN  EQU   RTHTFLGS
RTHTBITS EQU   RTHTFLGS+3
RTHTRTRY EQU   RTHTBITS
RTHTEED1 EQU   RTHTBITS
RTHTEED2 EQU   RTHTBITS
RTHTSTGR EQU   RTHTBITS
RTHTREGS EQU   RTHTRACK+4
RTMCPUSA EQU   0
RTMVARBL EQU   RTMCPUSA
RTMKSV   EQU   RTMVARBL
RTMKPL   EQU   RTMVARBL+72
RTMKSTAT EQU   RTMCPUSA+84
RTMKFL1  EQU   RTMKSTAT
RTMKSRVL EQU   RTMKFL1
RTMKRCDF EQU   RTMKFL1
RTMKTSVL EQU   RTMKFL1
RTMKINVP EQU   RTMKFL1
RTMKRSRC EQU   RTMKFL1
RTMKRSRF EQU   RTMKFL1
RTMKSALC EQU   RTMKFL1
RTMKREC4 EQU   RTMKFL1
RTMKFL2  EQU   RTMKSTAT+1
RTMKSKYF EQU   RTMKFL2
RTMKREGU EQU   RTMKFL2
RTMKPSWU EQU   RTMKFL2
RTMKSCK  EQU   RTMKFL2
RTMKACR  EQU   RTMKFL2
RTMKINSF EQU   RTMKFL2
RTMKTERR EQU   RTMKFL2
RTMKCPID EQU   RTMKSTAT+2
LRBMTIME EQU   0
LRBGREGS EQU   0
RCDPARM  EQU   0
RCDERRID EQU   RCDPARM
RCDATPTR EQU   RCDPARM+12
RT1TRACK EQU   0
RT1TRECC EQU   RT1TRACK
RT1TACQR EQU   RT1TRECC+3
EED      EQU   0
EEDFWRDP EQU   EED
EEDDES   EQU   EED+4
EEDID    EQU   EEDDES
EEDFLAGS EQU   EEDDES+1
EEDERFL  EQU   EEDFLAGS
EEDERROR EQU   EED+8
EEDVARBL EQU   EED+12
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTPTRV  EQU   CVTMAP+288
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSRTMW EQU   FRRS+16
FRRSENTR EQU   0
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
LCCA     EQU   0
LCCAIHRC EQU   LCCA+520
LCCAIHR1 EQU   LCCAIHRC
LCCAIHR2 EQU   LCCAIHRC+1
LCCAIHR3 EQU   LCCAIHRC+2
LCCAIHR4 EQU   LCCAIHRC+3
LCCASPIN EQU   LCCA+524
LCCASPN1 EQU   LCCASPIN
LCCASPN2 EQU   LCCASPIN+1
LCCASPN3 EQU   LCCASPIN+2
LCCASPN4 EQU   LCCASPIN+3
LCCACPUS EQU   LCCA+536
LCCADSF1 EQU   LCCA+540
LCCADSF2 EQU   LCCA+541
LCCASPSA EQU   LCCA+544
LCCACRFL EQU   LCCA+692
LCCACREX EQU   LCCA+693
LCCALKFG EQU   LCCA+694
LCCASRBF EQU   LCCA+720
LRB      EQU   0
LRBHREL  EQU   LRB+1
LRBHSYS  EQU   LRBHREL
LRBHSW0  EQU   LRB+2
LRBHSW1  EQU   LRB+3
LRBHSW2  EQU   LRB+4
LRBMACT  EQU   LRBHSW2
LRBHSW3  EQU   LRB+5
LRBHDATE EQU   LRB+8
LRBHCPID EQU   LRB+16
LRBBASE  EQU   LRB+24
LRBCVAR  EQU   0
LRBCMP   EQU   LRBCVAR+8
PVT      EQU   0
PVTFLAG1 EQU   PVT
PVTPRCF  EQU   PVT+148
PVTQS    EQU   PVT+304
PVTWSAX  EQU   PVT+344
RTCT     EQU   0
RTCTSAP  EQU   RTCT+4
RTCTSAP1 EQU   RTCTSAP
RTCTSAP2 EQU   RTCTSAP+1
RTCTSUP  EQU   RTCT+6
RTCTSUP1 EQU   RTCTSUP
RTCTSUP2 EQU   RTCTSUP+1
RTCTSAO  EQU   RTCT+8
RTCTSAO1 EQU   RTCTSAO
RTCTSAO2 EQU   RTCTSAO+1
RTCTSUO  EQU   RTCT+10
RTCTSUO1 EQU   RTCTSUO
RTCTSUO2 EQU   RTCTSUO+1
RTCTSDO  EQU   RTCT+12
RTCTSDO1 EQU   RTCTSDO
RTCTSDO2 EQU   RTCTSDO+1
RTCTABD  EQU   RTCT+14
RTCTIDMP EQU   RTCTABD
RTCTSDF  EQU   RTCT+16
RTCTSDF1 EQU   RTCTSDF
RTCTSDF2 EQU   RTCTSDF+1
RTCTSDDS EQU   RTCT+36
RTCTFLG  EQU   RTCTSDDS+3
RTCTRFLG EQU   RTCT+176
RTCTERID EQU   RTCT+224
SDWA     EQU   0
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWAIOFS EQU   SDWA+238
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWAACF2 EQU   SDWAPARQ+1
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
WSAC     EQU   0
WSACRTMK EQU   WSAC+20
ASCB     EQU   0
ASCBASCB EQU   ASCB
ASCBSUPC EQU   ASCB+16
ASCBASID EQU   ASCB+36
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
CVTPTR   EQU   FLCCVT
LRBMMCH  EQU   LRBBASE
LRBMLNH  EQU   LRBMMCH
LRBMCEIA EQU   LRBMMCH+8
LRBMTERM EQU   LRBMCEIA
LRBMHARD EQU   LRBMCEIA+1
LRBMHSD  EQU   LRBMHARD
LRBMHINV EQU   LRBMHARD
LRBMHSTO EQU   LRBMHARD
LRBMHSPF EQU   LRBMHARD
LRBMHIPD EQU   LRBMHARD
LRBMINTM EQU   LRBMCEIA+2
LRBMSOFT EQU   LRBMCEIA+3
LRBMSEXD EQU   LRBMSOFT
LRBMPDAR EQU   LRBMMCH+12
LRBMRSR1 EQU   LRBMMCH+13
LRBMRSR2 EQU   LRBMMCH+14
LRBMPWL  EQU   LRBMMCH+15
LRBMMOSW EQU   LRBMMCH+16
LRBMFLO  EQU   LRBMMCH+24
LRBMCIC  EQU   LRBMFLO
@NM00043 EQU   LRBMCIC
@NM00045 EQU   LRBMCIC+1
LRBMIBU  EQU   @NM00045
LRBMIDY  EQU   @NM00045
@NM00047 EQU   LRBMCIC+2
LRBMVWP  EQU   @NM00047
LRBMVMS  EQU   @NM00047
LRBMVPM  EQU   @NM00047
LRBMVIA  EQU   @NM00047
@NM00049 EQU   LRBMCIC+3
LRBMVFA  EQU   @NM00049
LRBMVFP  EQU   @NM00049
LRBMVGR  EQU   @NM00049
LRBMVST  EQU   @NM00049
@NM00052 EQU   LRBMCIC+5
LRBMFSA  EQU   LRBMFLO+16
PSWMASK  EQU   LRBMMOSW
PSWIO    EQU   PSWMASK
RTMKRETN EQU   RTMVARBL
RTMKREGS EQU   RTMKRETN
RTMKR1   EQU   RTMKREGS+4
RTMKR2   EQU   RTMKREGS+8
RTMKR3   EQU   RTMKREGS+12
RTMKR5   EQU   RTMKREGS+20
RTMKR6   EQU   RTMKREGS+24
RTMKR13  EQU   RTMKREGS+52
RTMKMPSW EQU   RTMKRETN+64
RSRPARMS EQU   RTMKPL
RBLOCKNO EQU   RSRPARMS
FRAMECNT EQU   RSRPARMS+2
RSROPTS  EQU   RSRPARMS+4
DATAERR  EQU   RSROPTS
KEYERR   EQU   RSROPTS
STAT2PTR EQU   RSROPTS
GLBLLOCK EQU   RSROPTS
SRSTATUS EQU   RSRPARMS+6
STAT1    EQU   SRSTATUS
STAT2    EQU   SRSTATUS+1
STAT2ADD EQU   RSRPARMS+8
RT1W     EQU   FRRSRTMW
RT1WNPRS EQU   RT1W
RT1WPRSV EQU   RT1W+52
RT1WENTR EQU   RT1WPRSV+12
RT1WCOVR EQU   RT1WENTR+2
RT1RTRN  EQU   FRRSRTMW
RT1RTRRG EQU   RT1RTRN+4
EEDREGSP EQU   EEDVARBL
EEDREGS  EQU   EEDREGSP
EEDPSW   EQU   EEDREGSP+64
EEDPSW1  EQU   EEDPSW
EEDPSW2  EQU   EEDPSW+8
EEDINILC EQU   EEDPSW2
EEDDUMPO EQU   EEDVARBL
EEDSCDMP EQU   EEDDUMPO
EEDSDDAT EQU   EEDSCDMP+4
EEDHWREP EQU   EEDVARBL
EEDHSCKB EQU   EEDHWREP
EEDHSCKE EQU   EEDHWREP+4
EEDHMCHS EQU   EEDHWREP+8
EEDHMCHD EQU   EEDHWREP+9
EEDHCPID EQU   EEDHWREP+10
EEDHRSRS EQU   EEDHWREP+12
EEDHRSR1 EQU   EEDHRSRS
EEDHRSR2 EQU   EEDHRSRS+1
EEDHRFSA EQU   EEDHWREP+16
EEDHTIME EQU   EEDHWREP+20
EEDERMAP EQU   EEDVARBL
EEDERRID EQU   EEDERMAP+70
EEDESEQ# EQU   EEDERRID
EEDECPUI EQU   EEDERRID+2
EEDEASID EQU   EEDERRID+4
EEDETIME EQU   EEDERRID+6
CVTS01   EQU   CVTPGSIA
CVTPVTP  EQU   CVTS01+8
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRTMCT EQU   CVTS01+224
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
LRBHRSW1 EQU   LRBHSW1
LRBHCSW1 EQU   LRBHSW1
LRBHMSW1 EQU   LRBHSW1
LRBRDDR  EQU   LRBBASE
LRBCCCH  EQU   LRBBASE
LRBCCUA  EQU   LRBCCCH+49
LRBDMDR  EQU   LRBBASE
LRBNMIH  EQU   LRBBASE
LRBTTER  EQU   LRBBASE
PSARSVTE EQU   PSARSVT
PSACSTK  EQU   PSARSVTE
FLC      EQU   PSA
*                                      START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
LRBTUSR  EQU   LRBTTER+8
LRBTWSC  EQU   LRBTTER+4
LRBTLNH  EQU   LRBTTER
LRBNINT  EQU   LRBNMIH+24
LRBNDEVT EQU   LRBNMIH+20
LRBNVOL  EQU   LRBNMIH+14
LRBNCUA1 EQU   LRBNMIH+11
LRBNCUA2 EQU   LRBNMIH+8
LRBNJOB  EQU   LRBNMIH
LRBDSENS EQU   LRBDMDR+8
LRBDVOL  EQU   LRBDMDR+2
LRBDCUA1 EQU   LRBDMDR
LRBCCLOG EQU   LRBCCCH+56
LRBCLOGL EQU   LRBCCCH+54
LRBCHCUA EQU   LRBCCCH+52
LRBCCUA2 EQU   LRBCCUA+1
@NM00056 EQU   LRBCCUA
LRBCCHID EQU   LRBCCCH+48
LRBCDEVT EQU   LRBCCCH+44
LRBCECSW EQU   LRBCCCH+40
LRBCFCSW EQU   LRBCCCH+32
LRBCFCCW EQU   LRBCCCH+24
LRBCAIO  EQU   LRBCCCH+8
LRBCJOB  EQU   LRBCCCH
LRBRDEV2 EQU   LRBRDDR+32
LRBRCUA2 EQU   LRBRDDR+29
LRBRPH2  EQU   LRBRDDR+28
LRBRDEV1 EQU   LRBRDDR+24
LRBRCUA1 EQU   LRBRDDR+21
LRBRPH1  EQU   LRBRDDR+20
LRBRVOL2 EQU   LRBRDDR+14
LRBRVOL1 EQU   LRBRDDR+8
LRBRJOB  EQU   LRBRDDR
@NM00035 EQU   LRBHMSW1
LRBMSYST EQU   LRBHMSW1
@NM00034 EQU   LRBHMSW1
@NM00033 EQU   LRBHCSW1
LRBCERPP EQU   LRBHCSW1
LRBCDATA EQU   LRBHCSW1
LRBCICUA EQU   LRBHCSW1
LRBCNOSP EQU   LRBHCSW1
@NM00032 EQU   LRBHCSW1
LRBCINCO EQU   LRBHCSW1
LRBCMESG EQU   LRBHCSW1
@NM00031 EQU   LRBHRSW1
LRBRSYSI EQU   LRBHRSW1
LRBROPER EQU   LRBHRSW1
LRBRSEC  EQU   LRBHRSW1
LRBRPRIM EQU   LRBHRSW1
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00021 EQU   EEDERMAP
@NM00020 EQU   EEDHWREP+14
EEDHVERQ EQU   EEDHRSR2
EEDHPGFX EQU   EEDHRSR2
EEDHFLSQ EQU   EEDHRSR2
EEDHFSQA EQU   EEDHRSR2
EEDHNUCL EQU   EEDHRSR2
EEDHSPER EQU   EEDHRSR2
EEDHINTC EQU   EEDHRSR2
EEDHOFLN EQU   EEDHRSR2
EEDHCHNG EQU   EEDHRSR1
EEDHMSER EQU   EEDHRSR1
@NM00019 EQU   EEDHRSR1
EEDHTERR EQU   EEDHMCHD
EEDHSOFT EQU   EEDHMCHD
EEDHINSF EQU   EEDHMCHD
EEDHACR  EQU   EEDHMCHD
EEDHSCK  EQU   EEDHMCHD
EEDHPSWU EQU   EEDHMCHD
EEDHREGU EQU   EEDHMCHD
EEDHSKYF EQU   EEDHMCHD
@NM00018 EQU   EEDHMCHS
@NM00017 EQU   EEDHMCHS
EEDHRSRF EQU   EEDHMCHS
EEDRSRC  EQU   EEDHMCHS
EEDINVP  EQU   EEDHMCHS
EEDHTSVL EQU   EEDHMCHS
EEDHRCDF EQU   EEDHMCHS
EEDHSRVL EQU   EEDHMCHS
EEDSDPSL EQU   EEDDUMPO+8
EEDSPDAT EQU   EEDSDDAT+2
EEDSSDAT EQU   EEDSDDAT
EEDSDUMP EQU   EEDSCDMP
EEDTRANS EQU   EEDPSW2+4
EEDINTCD EQU   EEDINILC+2
EEDILC   EQU   EEDINILC+1
@NM00016 EQU   EEDINILC
EEDPSWIC EQU   EEDPSW1+4
EEDPSWMK EQU   EEDPSW1
EEDREG15 EQU   EEDREGS+60
EEDREG14 EQU   EEDREGS+56
EEDREG13 EQU   EEDREGS+52
EEDREG12 EQU   EEDREGS+48
EEDREG11 EQU   EEDREGS+44
EEDREG10 EQU   EEDREGS+40
EEDREG9  EQU   EEDREGS+36
EEDREG8  EQU   EEDREGS+32
EEDREG7  EQU   EEDREGS+28
EEDREG6  EQU   EEDREGS+24
EEDREG5  EQU   EEDREGS+20
EEDREG4  EQU   EEDREGS+16
EEDREG3  EQU   EEDREGS+12
EEDREG2  EQU   EEDREGS+8
EEDREG1  EQU   EEDREGS+4
EEDREG0  EQU   EEDREGS
RT1RTYAD EQU   RT1RTRRG+60
RT1R0R14 EQU   RT1RTRRG
@NM00013 EQU   RT1RTRN
@NM00012 EQU   RT1WENTR+3
@NM00011 EQU   RT1WCOVR
RT1WEREX EQU   RT1WCOVR
RT1TRTCA EQU   RT1WCOVR
RT1TLOCL EQU   RT1WCOVR
RT1WRTM  EQU   RT1WCOVR
RT1WCLUP EQU   RT1WCOVR
RT1WSRMD EQU   RT1WENTR+1
RT1WMODE EQU   RT1WENTR
RT1WEED  EQU   RT1WPRSV+8
RT1WSRBR EQU   RT1WPRSV+4
RT1WRTCA EQU   RT1WPRSV
RT1WVARI EQU   RT1WNPRS+32
RT1WPSW2 EQU   RT1WNPRS+28
RT1WPSW1 EQU   RT1WNPRS+24
RT1WLPTA EQU   RT1WNPRS
@NM00009 EQU   RSRPARMS+5
@NM00008 EQU   RSROPTS
@NM00007 EQU   RSROPTS
@NM00006 EQU   RSROPTS
@NM00005 EQU   RTMKRETN+72
RTMKR15  EQU   RTMKREGS+60
RTMKR14  EQU   RTMKREGS+56
RTMKR12  EQU   RTMKREGS+48
RTMKR11  EQU   RTMKREGS+44
RTMKR10  EQU   RTMKREGS+40
RTMKR9   EQU   RTMKREGS+36
RTMKR8   EQU   RTMKREGS+32
RTMKR7   EQU   RTMKREGS+28
RTMKR4   EQU   RTMKREGS+16
RTMKR0   EQU   RTMKREGS
@NM00002 EQU   PSWMASK
@NM00001 EQU   PSWMASK
LRBMCEL  EQU   LRBMMCH+304
@NM00055 EQU   LRBMFLO+20
@NM00054 EQU   LRBMFLO+8
LRBMCELL EQU   LRBMCIC+6
LRBMVCC  EQU   @NM00052
LRBMVPT  EQU   @NM00052
@NM00053 EQU   @NM00052
@NM00051 EQU   LRBMCIC+4
LRBMVLG  EQU   @NM00049
LRBMVCR  EQU   @NM00049
@NM00050 EQU   @NM00049
LRBMVRC  EQU   @NM00049
@NM00048 EQU   @NM00047
LRBMFKE  EQU   @NM00047
LRBMFSC  EQU   @NM00047
LRBMFSE  EQU   @NM00047
@NM00046 EQU   @NM00045
LRBMFWN  EQU   @NM00045
LRBMFDG  EQU   @NM00043
@NM00044 EQU   @NM00043
LRBMFED  EQU   @NM00043
LRBMFCD  EQU   @NM00043
LRBMFTD  EQU   @NM00043
LRBMFSR  EQU   @NM00043
LRBMFPD  EQU   @NM00043
LRBMFSD  EQU   @NM00043
LRBMVEQR EQU   LRBMRSR2
LRBMPGFX EQU   LRBMRSR2
LRBMLSQA EQU   LRBMRSR2
LRBMFSQA EQU   LRBMRSR2
LRBMNUCL EQU   LRBMRSR2
LRBMSPER EQU   LRBMRSR2
LRBMINTC EQU   LRBMRSR2
LRBMOFLN EQU   LRBMRSR2
LRBMCHNG EQU   LRBMRSR1
LRBMSER  EQU   LRBMRSR1
@NM00042 EQU   LRBMRSR1
@NM00041 EQU   LRBMPDAR
LRBMRSRF EQU   LRBMPDAR
LRBMRSRC EQU   LRBMPDAR
LRBMINVP EQU   LRBMPDAR
@NM00040 EQU   LRBMPDAR
LRBMSBUF EQU   LRBMSOFT
LRBMSHIR EQU   LRBMSOFT
LRBMSECC EQU   LRBMSOFT
@NM00039 EQU   LRBMSOFT
LRBMSSFT EQU   LRBMSOFT
LRBMIL80 EQU   LRBMINTM
LRBMICTM EQU   LRBMINTM
LRBMICKC EQU   LRBMINTM
LRBMITOD EQU   LRBMINTM
@NM00038 EQU   LRBMINTM
@NM00037 EQU   LRBMHARD
LRBMHHRD EQU   LRBMHARD
LRBMTINV EQU   LRBMTERM
LRBMTDMG EQU   LRBMTERM
LRBMTWRN EQU   LRBMTERM
LRBMTCKS EQU   LRBMTERM
LRBMTSEC EQU   LRBMTERM
LRBMTTHR EQU   LRBMTERM
@NM00036 EQU   LRBMTERM
LRBMWSC  EQU   LRBMMCH+4
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBEGIN EQU   ASCB
WSACASMS EQU   WSAC+60
WSACASMD EQU   WSAC+56
WSACCCH  EQU   WSAC+52
WSACRRSA EQU   WSAC+48
WSACREST EQU   WSAC+44
WSACRSTI EQU   WSAC+40
WSACABTM EQU   WSAC+36
WSACMF1  EQU   WSAC+32
WSACEDS0 EQU   WSAC+28
WSACIOS  EQU   WSAC+24
WSACACR  EQU   WSAC+16
WSACTIME EQU   WSAC+12
WSACOPTM EQU   WSAC+8
WSACGTF  EQU   WSAC+4
WSACCWSA EQU   WSAC
@NM00131 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00130 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
SDWAERTM EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00129 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00128 EQU   SDWADDAT+3
@NM00127 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00126 EQU   SDWADDAT+1
@NM00125 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00124 EQU   SDWADUMP+2
@NM00123 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00122 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
SDWASEQ# EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00121 EQU   SDWAACF3
@NM00120 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00119 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00118 EQU   SDWAACF2
SDWARCRD EQU   SDWAACF2
SDWARCDE EQU   SDWAPARQ
SDWALCPU EQU   SDWACPUA+2
@NM00117 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
SDWARTYA EQU   SDWA+240
SDWACPUI EQU   SDWA+239
@NM00116 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
SDWAERFL EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00115 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00114 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00113 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00112 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00111 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00110 EQU   SDWAINC2
@NM00109 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00108 EQU   SDWAILC2
@NM00107 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00106 EQU   SDWANXT2
@NM00105 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00104 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00103 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00102 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00101 EQU   SDWAINC1
@NM00100 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00099 EQU   SDWAILC1
@NM00098 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00097 EQU   SDWANXT1
@NM00096 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00095 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00094 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00093 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00092 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00091 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00090 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00089 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00088 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
SDWAPARM EQU   SDWA
RTCTXXX2 EQU   RTCT+234
RTCTETIM EQU   RTCTERID+6
RTCTEASD EQU   RTCTERID+4
RTCTECPU EQU   RTCTERID+2
RTCTESEQ EQU   RTCTERID
RTCTSDWK EQU   RTCT+220
RTCTTDCB EQU   RTCT+184
RTCTXYX2 EQU   RTCT+180
RTCTSEQ# EQU   RTCT+178
RTCTXXX1 EQU   RTCT+177
@NM00087 EQU   RTCTRFLG
RTCTRSTF EQU   RTCTRFLG
RTCTRPER EQU   RTCTRFLG
RTCTRTER EQU   RTCTRFLG
RTCTTEST EQU   RTCT+172
RTCTMSRB EQU   RTCT+168
RTCTMLCK EQU   RTCT+164
RTCTFMT  EQU   RTCT+160
RTCTSDPL EQU   RTCT+156
RTCTDEV  EQU   RTCTSDDS+8
RTCTDCB  EQU   RTCTSDDS+4
@NM00086 EQU   RTCTFLG
RTCTDETP EQU   RTCTFLG
RTCTDSUS EQU   RTCTFLG
RTCTDSST EQU   RTCTFLG
RTCTDSNM EQU   RTCTSDDS
RTCTRCB  EQU   RTCT+32
RTCTRECB EQU   RTCT+28
RTCTFASB EQU   RTCT+24
RTCTMECB EQU   RTCT+20
RTCTSDID EQU   RTCT+18
RTCTSDEP EQU   RTCTSDF2
RTCTSDDO EQU   RTCTSDF2
RTCTSDEN EQU   RTCTSDF2
RTCTSDTR EQU   RTCTSDF2
RTCTSDPT EQU   RTCTSDF2
RTCTSDSR EQU   RTCTSDF2
RTCTSDSS EQU   RTCTSDF2
RTCTSDSH EQU   RTCTSDF2
@NM00085 EQU   RTCTSDF1
RTCTSDND EQU   RTCTSDF1
RTCTSDNO EQU   RTCTSDF1
@NM00084 EQU   RTCTABD+1
@NM00083 EQU   RTCTIDMP
RTCTISVC EQU   RTCTIDMP
RTCTISYU EQU   RTCTIDMP
RTCTISAB EQU   RTCTIDMP
@NM00082 EQU   RTCTIDMP
@NM00081 EQU   RTCTSDO2
RTCTSDPB EQU   RTCTSDO2
RTCTSDPA EQU   RTCTSDO2
RTCTSDP9 EQU   RTCTSDO2
RTCTSDP8 EQU   RTCTSDO2
RTCTSDP7 EQU   RTCTSDO1
RTCTSDP6 EQU   RTCTSDO1
RTCTSDP5 EQU   RTCTSDO1
RTCTSDP4 EQU   RTCTSDO1
RTCTSDP3 EQU   RTCTSDO1
RTCTSDP2 EQU   RTCTSDO1
RTCTSDP1 EQU   RTCTSDO1
RTCTSDP0 EQU   RTCTSDO1
RTCTSYDF EQU   RTCTSUO2
RTCTSYDE EQU   RTCTSUO2
RTCTSYDD EQU   RTCTSUO2
RTCTSYDC EQU   RTCTSUO2
RTCTSYDB EQU   RTCTSUO2
RTCTSYDA EQU   RTCTSUO2
RTCTSYD9 EQU   RTCTSUO2
RTCTSYD8 EQU   RTCTSUO2
RTCTSYD7 EQU   RTCTSUO1
RTCTSYD6 EQU   RTCTSUO1
RTCTSYD5 EQU   RTCTSUO1
RTCTSYD4 EQU   RTCTSUO1
RTCTSYD3 EQU   RTCTSUO1
RTCTSYD2 EQU   RTCTSUO1
RTCTSYD1 EQU   RTCTSUO1
RTCTSYD0 EQU   RTCTSUO1
RTCTSADF EQU   RTCTSAO2
RTCTSADE EQU   RTCTSAO2
RTCTSADD EQU   RTCTSAO2
RTCTSADC EQU   RTCTSAO2
RTCTSADB EQU   RTCTSAO2
RTCTSADA EQU   RTCTSAO2
RTCTSAD9 EQU   RTCTSAO2
RTCTSAD8 EQU   RTCTSAO2
RTCTSAD7 EQU   RTCTSAO1
RTCTSAD6 EQU   RTCTSAO1
RTCTSAD5 EQU   RTCTSAO1
RTCTSAD4 EQU   RTCTSAO1
RTCTSAD3 EQU   RTCTSAO1
RTCTSAD2 EQU   RTCTSAO1
RTCTSAD1 EQU   RTCTSAO1
RTCTSAD0 EQU   RTCTSAO1
RTCTSUDF EQU   RTCTSUP2
RTCTSUDE EQU   RTCTSUP2
RTCTSUDD EQU   RTCTSUP2
RTCTSUDC EQU   RTCTSUP2
RTCTSUDB EQU   RTCTSUP2
RTCTSUDA EQU   RTCTSUP2
RTCTSUD9 EQU   RTCTSUP2
RTCTSUD8 EQU   RTCTSUP2
RTCTSUD7 EQU   RTCTSUP1
RTCTSUD6 EQU   RTCTSUP1
RTCTSUD5 EQU   RTCTSUP1
RTCTSUD4 EQU   RTCTSUP1
RTCTSUD3 EQU   RTCTSUP1
RTCTSUD2 EQU   RTCTSUP1
RTCTSUD1 EQU   RTCTSUP1
RTCTSUD0 EQU   RTCTSUP1
RTCTSABF EQU   RTCTSAP2
RTCTSABE EQU   RTCTSAP2
RTCTSABD EQU   RTCTSAP2
RTCTSABC EQU   RTCTSAP2
RTCTSABB EQU   RTCTSAP2
RTCTSABA EQU   RTCTSAP2
RTCTSAB9 EQU   RTCTSAP2
RTCTSAB8 EQU   RTCTSAP2
RTCTSAB7 EQU   RTCTSAP1
RTCTSAB6 EQU   RTCTSAP1
RTCTSAB5 EQU   RTCTSAP1
RTCTSAB4 EQU   RTCTSAP1
RTCTSAB3 EQU   RTCTSAP1
RTCTSAB2 EQU   RTCTSAP1
RTCTSAB1 EQU   RTCTSAP1
RTCTSAB0 EQU   RTCTSAP1
RTCTNAME EQU   RTCT
PVTEND   EQU   PVT+1840
PVTSPARE EQU   PVT+1838
PVTCHUIC EQU   PVT+1836
PVTCOMFX EQU   PVT+1834
PVTSQAFX EQU   PVT+1832
PVTCNTFX EQU   PVT+1830
PVTDEFFX EQU   PVT+1828
PVTFIXOK EQU   PVT+1826
PVTPEROK EQU   PVT+1824
PVTMAXFX EQU   PVT+1822
PVTPERFX EQU   PVT+1820
PVTRSRB  EQU   PVT+1776
PVTRESV5 EQU   PVT+1773
PVTSRBS  EQU   PVT+1772
PVTSSRB  EQU   PVT+1768
PVTACA   EQU   PVTWSAX+1400
PVTSAVE  EQU   PVTWSAX+1328
PVTWSA18 EQU   PVTWSAX+1256
PVTWSA17 EQU   PVTWSAX+1184
PVTWSA16 EQU   PVTWSAX+1112
PVTWSA15 EQU   PVTWSAX+1040
PVTWSA14 EQU   PVTWSAX+968
PVTWSA13 EQU   PVTWSAX+896
PVTWSA12 EQU   PVTWSAX+824
PVTWSA11 EQU   PVTWSAX+752
PVTWSA10 EQU   PVTWSAX+672
PVTWSA9  EQU   PVTWSAX+592
PVTWSA8  EQU   PVTWSAX+504
PVTWSA7  EQU   PVTWSAX+432
PVTWSA6  EQU   PVTWSAX+360
PVTWSA5  EQU   PVTWSAX+288
PVTWSA4  EQU   PVTWSAX+216
PVTWSA3  EQU   PVTWSAX+144
PVTWSA2  EQU   PVTWSAX+72
PVTWSA1  EQU   PVTWSAX
PVTCIOQL EQU   PVTQS+36
PVTCIOQF EQU   PVTQS+32
PVTGFADL EQU   PVTQS+28
PVTGFADF EQU   PVTQS+24
PVTFPCBL EQU   PVTQS+20
PVTFPCBF EQU   PVTQS+16
PVTSQAQL EQU   PVTQS+14
PVTSQAQF EQU   PVTQS+12
PVTCFQL  EQU   PVTQS+10
PVTCFQF  EQU   PVTQS+8
PVTRSRVL EQU   PVTQS+6
PVTRSRVF EQU   PVTQS+4
PVTAFQL  EQU   PVTQS+2
PVTAFQF  EQU   PVTQS
PVTSPFR  EQU   PVT+302
PVTCFMCT EQU   PVT+300
PVTSPREC EQU   PVT+296
PVTCAREC EQU   PVT+292
PVTCAOUT EQU   PVT+288
PVTCAIN  EQU   PVT+284
PVTNSWPS EQU   PVT+280
PVTNPREC EQU   PVT+276
PVTSPOUT EQU   PVT+272
PVTSPIN  EQU   PVT+268
PVTVAMR  EQU   PVT+264
PVTVAMO  EQU   PVT+260
PVTVAMI  EQU   PVT+256
PVTNPOUT EQU   PVT+252
PVTNPIN  EQU   PVT+248
PVTPRSET EQU   PVT+244
PVTFRSLT EQU   PVT+240
PVTPAGIO EQU   PVT+236
PVTSWPIO EQU   PVT+232
PVTPSWPP EQU   PVT+228
PVTPPREF EQU   PVT+224
PVTPOPBR EQU   PVT+220
PVTPRELF EQU   PVT+216
PVTPRELV EQU   PVT+212
PVTPFREE EQU   PVT+208
PVTPRELS EQU   PVT+204
PVTPOUT  EQU   PVT+200
PVTPFXLD EQU   PVT+196
PVTPITAS EQU   PVT+192
PVTPSRBP EQU   PVT+188
PVTPDSEG EQU   PVT+184
PVTPCSGB EQU   PVT+180
PVTPCSEG EQU   PVT+176
PVTPINV  EQU   PVT+172
PVTPSWPC EQU   PVT+168
PVTPSOUT EQU   PVT+164
PVTPSWIN EQU   PVT+160
PVTPRCV  EQU   PVT+156
PVTPRCFI EQU   PVT+152
PVTPVRC  EQU   PVT+144
PVTPVRIN EQU   PVT+140
PVTPVRLS EQU   PVT+136
PVTPVEQR EQU   PVT+132
PVTPPIOI EQU   PVT+128
PVTPVRPO EQU   PVT+124
PVTPRFR  EQU   PVT+120
PVTPFP2  EQU   PVT+116
PVTPFP   EQU   PVT+112
PVTPFTE  EQU   PVT+108
PVTPCB   EQU   PVT+104
PVTREP2  EQU   PVT+100
PVTPIOCP EQU   PVT+96
PVTPIOP  EQU   PVT+92
PVTPGFAD EQU   PVT+88
PVTPGFA  EQU   PVT+84
PVTPSQA  EQU   PVT+80
PVTPSINT EQU   PVT+76
PVTPSIB  EQU   PVT+72
PVTSRBID EQU   PVT+68
PVTPCIWA EQU   PVT+64
PVTHQSA  EQU   PVT+62
PVTLQSA  EQU   PVT+60
PVTOROOT EQU   PVT+56
PVTPRCA  EQU   PVT+52
PVTREUS  EQU   PVT+48
PVTRESV4 EQU   PVT+46
PVTRSUS  EQU   PVT+44
PVTVROOT EQU   PVT+40
PVTPCBLO EQU   PVT+38
PVTPCBCT EQU   PVT+36
PVTDFRS  EQU   PVT+34
PVTRSQA  EQU   PVT+32
PVTPTLB  EQU   PVT+31
PVTPCBNO EQU   PVT+30
PVTSRBNO EQU   PVT+29
PVTSQDC  EQU   PVT+28
PVTLCSA  EQU   PVT+26
PVTLPRIV EQU   PVT+24
PVTLVR   EQU   PVT+22
PVTFVR   EQU   PVT+20
PVTLPFN  EQU   PVT+18
PVTFPFN  EQU   PVT+16
PVTPFTP  EQU   PVT+12
PVTSSPIN EQU   PVT+11
PVTPCBS  EQU   PVT+10
PVTPOOL  EQU   PVT+8
PVTAFCOK EQU   PVT+6
PVTAFCLO EQU   PVT+4
PVTAFC   EQU   PVT+2
PVTFLAG2 EQU   PVT+1
PVTDUMP  EQU   PVTFLAG1
PVTSIT   EQU   PVTFLAG1
PVTLSI   EQU   PVTFLAG1
PVTRESV1 EQU   PVTFLAG1
PVTPCBLT EQU   PVTFLAG1
PVTSRBIU EQU   PVTFLAG1
PVTBGMS  EQU   PVTFLAG1
PVTPMSG  EQU   PVTFLAG1
LRBCMPCS EQU   LRBCMP+2
LRBCMPPA EQU   LRBCMP
LRBCMPNO EQU   LRBCVAR+6
LRBCMPF2 EQU   LRBCVAR+5
LRBCMPF1 EQU   LRBCVAR+4
LRBCRESD EQU   LRBCVAR+2
LRBCFT   EQU   LRBCVAR
LRBHMCEL EQU   LRBHCPID+6
LRBHMDL  EQU   LRBHCPID+4
LRBHCSER EQU   LRBHCPID+1
@NM00030 EQU   LRBHCPID
LRBHTIME EQU   LRB+12
@NM00029 EQU   LRB+7
LRBHCNT  EQU   LRB+6
LRBMCLB  EQU   LRBHSW3
LRBNDEM  EQU   LRBMACT
LRBNCEM  EQU   LRBMACT
@NM00028 EQU   LRBHSW0
LRBHTMC  EQU   LRBHSW0
@NM00027 EQU   LRBHSW0
LRBHNS   EQU   LRBHSW0
LRBHMORE EQU   LRBHSW0
@NM00026 EQU   LRBHSYS
LRBHSYSB EQU   LRBHSYS
LRBHTYPE EQU   LRB
LCCAR125 EQU   LCCA+964
LCCAR124 EQU   LCCA+960
LCCASGPR EQU   LCCA+896
LCCADRT2 EQU   LCCA+888
LCCADRT1 EQU   LCCA+880
LCCAR103 EQU   LCCA+876
LCCAESS2 EQU   LCCA+872
LCCASPLJ EQU   LCCA+868
LCCASMQJ EQU   LCCA+864
LCCAIRT  EQU   LCCA+736
LCCAASID EQU   LCCA+732
LCCARV89 EQU   LCCA+728
LCCAPGTA EQU   LCCASRBF+2
LCCASAFN EQU   LCCASRBF
LCCAECSA EQU   LCCA+716
LCCAICR0 EQU   LCCA+712
LCCALWTM EQU   LCCA+704
LCCARV78 EQU   LCCA+700
LCCAPINV EQU   LCCA+696
LCCARV88 EQU   LCCA+695
LCCARV87 EQU   LCCALKFG
LCCARV86 EQU   LCCALKFG
LCCARV85 EQU   LCCALKFG
LCCARV84 EQU   LCCALKFG
LCCALKRD EQU   LCCALKFG
LCCALKAQ EQU   LCCALKFG
LCCALKSA EQU   LCCALKFG
LCCALKDP EQU   LCCALKFG
LCCACRST EQU   LCCACREX
LCCACRDP EQU   LCCACREX
LCCACRLM EQU   LCCACREX
LCCACRIN EQU   LCCACREX
LCCACRRT EQU   LCCACREX
LCCACRLE EQU   LCCACREX
LCCACRRM EQU   LCCACREX
LCCACREF EQU   LCCACREX
LCCAVARY EQU   LCCACRFL
LCCARV73 EQU   LCCACRFL
LCCARV72 EQU   LCCACRFL
LCCARV71 EQU   LCCACRFL
LCCARV70 EQU   LCCACRFL
LCCARV69 EQU   LCCACRFL
LCCACLMS EQU   LCCACRFL
LCCACRTM EQU   LCCACRFL
LCCALCR0 EQU   LCCA+688
LCCACRLC EQU   LCCA+684
LCCARCPU EQU   LCCA+680
LCCADCPU EQU   LCCA+676
LCCASRBJ EQU   LCCA+672
LCCADSSR EQU   LCCA+668
LCCADSSC EQU   LCCA+660
LCCADSS3 EQU   LCCA+648
LCCADSS2 EQU   LCCA+636
LCCADSS1 EQU   LCCA+624
LCCAWTIM EQU   LCCA+616
LCCAITOD EQU   LCCA+608
LCCADTOD EQU   LCCA+600
LCCASTOD EQU   LCCA+592
LCCARIR5 EQU   LCCASPSA+44
LCCARIR4 EQU   LCCASPSA+40
LCCARIR3 EQU   LCCASPSA+36
LCCARIR2 EQU   LCCASPSA+32
LCCARPR5 EQU   LCCASPSA+28
LCCARPR4 EQU   LCCASPSA+24
LCCARPR3 EQU   LCCASPSA+20
LCCARPR2 EQU   LCCASPSA+16
LCCADSR5 EQU   LCCASPSA+12
LCCADSR4 EQU   LCCASPSA+8
LCCADSR3 EQU   LCCASPSA+4
LCCADSR2 EQU   LCCASPSA
LCCARV68 EQU   LCCA+543
LCCAPSMK EQU   LCCA+542
LCCARV67 EQU   LCCADSF2
LCCARV66 EQU   LCCADSF2
LCCARV65 EQU   LCCADSF2
LCCARV64 EQU   LCCADSF2
LCCADSRW EQU   LCCADSF2
LCCADSPL EQU   LCCADSF2
LCCAGSRB EQU   LCCADSF2
LCCASRBM EQU   LCCADSF2
LCCARV61 EQU   LCCADSF1
LCCARV60 EQU   LCCADSF1
LCCARV59 EQU   LCCADSF1
LCCARV58 EQU   LCCADSF1
LCCATIMR EQU   LCCADSF1
LCCADSS  EQU   LCCADSF1
LCCAVCPU EQU   LCCADSF1
LCCAACR  EQU   LCCADSF1
LCCAASCP EQU   LCCA+532
LCCAESSA EQU   LCCA+528
LCCARV55 EQU   LCCASPN4
LCCARV54 EQU   LCCASPN4
LCCARV53 EQU   LCCASPN4
LCCARV52 EQU   LCCASPN4
LCCARV51 EQU   LCCASPN4
LCCARV50 EQU   LCCASPN4
LCCARV49 EQU   LCCASPN4
LCCARV48 EQU   LCCASPN4
LCCARV47 EQU   LCCASPN3
LCCARV46 EQU   LCCASPN3
LCCARV45 EQU   LCCASPN3
LCCARV44 EQU   LCCASPN3
LCCARV43 EQU   LCCASPN3
LCCARV42 EQU   LCCASPN3
LCCARV41 EQU   LCCASPN3
LCCARV40 EQU   LCCASPN3
LCCARV39 EQU   LCCASPN2
LCCARV38 EQU   LCCASPN2
LCCARV37 EQU   LCCASPN2
LCCARV36 EQU   LCCASPN2
LCCARV35 EQU   LCCASPN2
LCCARV34 EQU   LCCASPN2
LCCARV33 EQU   LCCASPN2
LCCARV32 EQU   LCCASPN2
LCCARV31 EQU   LCCASPN1
LCCARV30 EQU   LCCASPN1
LCCAMFIO EQU   LCCASPN1
LCCARSTR EQU   LCCASPN1
LCCATSPN EQU   LCCASPN1
LCCALOCK EQU   LCCASPN1
LCCASIGP EQU   LCCASPN1
LCCAPTLB EQU   LCCASPN1
LCCARV27 EQU   LCCAIHR4
LCCARV26 EQU   LCCAIHR4
LCCARV25 EQU   LCCAIHR4
LCCARV24 EQU   LCCAIHR4
LCCARV23 EQU   LCCAIHR4
LCCARV22 EQU   LCCAIHR4
LCCARV21 EQU   LCCAIHR4
LCCARV20 EQU   LCCAIHR4
LCCARV19 EQU   LCCAIHR3
LCCARV18 EQU   LCCAIHR3
LCCARV17 EQU   LCCAIHR3
LCCARV16 EQU   LCCAIHR3
LCCARV15 EQU   LCCAIHR3
LCCARV14 EQU   LCCAIHR3
LCCARV13 EQU   LCCAIHR3
LCCARV12 EQU   LCCAIHR3
LCCARV11 EQU   LCCAIHR2
LCCARV10 EQU   LCCAIHR2
LCCARV09 EQU   LCCAIHR2
LCCARV08 EQU   LCCAIHR2
LCCARV07 EQU   LCCAIHR2
LCCARV06 EQU   LCCAIHR2
LCCARV05 EQU   LCCAIHR2
LCCARV04 EQU   LCCAIHR2
LCCARV03 EQU   LCCAIHR1
LCCARV02 EQU   LCCAIHR1
LCCARV01 EQU   LCCAIHR1
LCCAPPIE EQU   LCCAIHR1
LCCAPSG1 EQU   LCCAIHR1
LCCAPDAT EQU   LCCAIHR1
LCCAXRC2 EQU   LCCAIHR1
LCCAXRC1 EQU   LCCAIHR1
LCCAIOPS EQU   LCCA+512
LCCAGPGR EQU   LCCA+448
LCCAR133 EQU   LCCA+444
LCCAR132 EQU   LCCA+440
LCCAR131 EQU   LCCA+436
LCCAR130 EQU   LCCA+432
LCCAR129 EQU   LCCA+428
LCCAR128 EQU   LCCA+424
LCCAR127 EQU   LCCA+420
LCCAR126 EQU   LCCA+416
LCCARSGR EQU   LCCA+352
LCCAXGR3 EQU   LCCA+288
LCCAXGR2 EQU   LCCA+224
LCCAXGR1 EQU   LCCA+160
LCCACR0  EQU   LCCA+156
LCCAMCR1 EQU   LCCA+152
LCCAPVAD EQU   LCCA+148
LCCAPINT EQU   LCCA+144
LCCAPPSW EQU   LCCA+136
LCCAPGR2 EQU   LCCA+72
LCCAPGR1 EQU   LCCA+8
LCCARV77 EQU   LCCA+6
LCCACPUA EQU   LCCA+4
LCCALCCA EQU   LCCA
FRRSPARM EQU   FRRSENTR+8
@NM00025 EQU   FRRSFLGS+1
@NM00024 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSFRRA EQU   FRRSENTR
FRRSENTS EQU   FRRS+84
FRRSCURR EQU   FRRSHEAD+12
FRRSELEN EQU   FRRSHEAD+8
FRRSLAST EQU   FRRSHEAD+4
FRRSEMP  EQU   FRRSHEAD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00023 EQU   CVTFIX+248
@NM00022 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTRV490 EQU   CVTMAP+388
CVTSU    EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTVS1B  EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
EEDASID  EQU   EEDERROR+2
EEDERTYP EQU   EEDERROR+1
EEDMODE  EQU   EEDERROR
@NM00015 EQU   EEDDES+2
@NM00014 EQU   EEDFLAGS
RT1TREGS EQU   RT1TRACK+4
RT1TRETY EQU   RT1TACQR
RT1TLLCK EQU   RT1TACQR
RT1TDISP EQU   RT1TACQR
RT1TENPT EQU   RT1TRECC+2
RT1TLPID EQU   RT1TRECC+1
RT1TLPN  EQU   RT1TRECC
@NM00010 EQU   RCDPARM+10
LRBGR15  EQU   LRBGREGS+60
LRBGR14  EQU   LRBGREGS+56
LRBGR13  EQU   LRBGREGS+52
LRBGR12  EQU   LRBGREGS+48
LRBGR11  EQU   LRBGREGS+44
LRBGR10  EQU   LRBGREGS+40
LRBGR9   EQU   LRBGREGS+36
LRBGR8   EQU   LRBGREGS+32
LRBGR7   EQU   LRBGREGS+28
LRBGR6   EQU   LRBGREGS+24
LRBGR5   EQU   LRBGREGS+20
LRBGR4   EQU   LRBGREGS+16
LRBGR3   EQU   LRBGREGS+12
LRBGR2   EQU   LRBGREGS+8
LRBGR1   EQU   LRBGREGS+4
LRBGR0   EQU   LRBGREGS
RTMKSOFT EQU   RTMKFL2
@NM00004 EQU   RTHTBITS
RTHTENPT EQU   RTHTFLGS+2
@NM00003 EQU   RTHTFLGS+1
@NM00080 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00079 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00078 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00077 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00076 EQU   FLCFSA
@NM00075 EQU   FLCMCLA+72
@NM00074 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00073 EQU   FLCIOA
@NM00072 EQU   FLCMCLA+15
@NM00071 EQU   FLCMCLA+14
@NM00070 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00069 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00068 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00067 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00066 EQU   FLCPER
@NM00065 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00064 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00063 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00062 EQU   FLCPIILC
@NM00061 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00060 EQU   FLCSVILC
@NM00059 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00058 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00057 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RC00124 EQU   @RC00113
@RC00211 EQU   @RC00208
@RC00215 EQU   @RC00208
@RF00308 EQU   @RC00306
@RF00348 EQU   @RC00340
@ENDDATA EQU   *
         END   IEAVTRTH,(C'PLS1933',0701,77125)
