         TITLE 'IEAVTSDG-SVC DUMP GLOBAL STORAGE PROCESSING            *
                        '
IEAVTSDG CSECT ,                                                   0001
@MAINENT BALR  @15,0                                               0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEAVTSDG  78.188'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @09,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@09                                         0001
*   ERRBASE1=R9;                    /* SAVE BASE REGISTER FOR      0087
*                                      RECOVERY                      */
         ST    R9,ERRBASE1(,R3)                                    0087
*   SVCDMPNM=CSECTNAM;              /* SAVE MODULE NAME FOR RECOVERY
*                                      ROUTINE                       */
         MVC   SVCDMPNM(8,R7),@CC03120                             0088
*   RFY                                                            0089
*     SDUMP BASED(SDWSDPL);         /* BASE MAPPINGS ON PARMLST    0089
*                                      ADDRESS IN SDWORK     @G33VPHD*/
*   RFY                                                            0090
*     STORANGE BASED(RANGEPTR);     /* MAP ADDRESS RANGE TABLE       */
*   PRDASID=COMNASID;               /* PUT COMMON AREA ASID IN HEADER
*                                      RECORD FOR PRDMP      @G33VPHD*/
         L     @12,PRDINPTR(,R7)                                   0091
         MVC   PRDASID(2,@12),@CB03091                             0091
*   IF ERRENDMP='0'B THEN           /* IF NO ERRORS FOUND SO FAR     */
         TM    ERRENDMP(R3),B'01000000'                            0092
         BNZ   @RF00092                                            0092
*     DO;                                                          0093
*                                                                  0093
*/********************************************************************/
*/*   THIS SEGMENT BUILDS THE ADDRESS RANGE TABLE IN THE 4K SQA      */
*/*   BUFFER.  THE ADDRESS RANGE TABLE IS DIVIDED INTO THREE PARTS   */
*/*   THE FIRST PART IS COMPRISED OF ADDRESS RANGES FOR GLOBAL,      */
*/*   VOLATILE STORAGES AREAS (SQA,CSA,PSA) AND AMDPRDMP REQUIRED    */
*/*   CONTROL BLOCKS (CVT,ASVT,ASCB).  THE SECOND PART OF THE        */
*/*   ADDRESS RANGE TABLE IS COMPRISED OF ADDRESS RANGES FOR LOCAL   */
*/*   AREAS WITHIN THE PRIVATE AREA OF THE ADDRESS SPACE             */
*/*   (RGN,LSQA,SWA) AND MODULES, SVCS IN THE LINK PACK AREA (LPA)   */
*/*   THE THIRD PART OF THE ADDRESS RANGE TABLE CONTAINS ADDRESS     */
*/*   RANGES FOR THE NUCLEUS.                                        */
*/*                                                                  */
*/*   INPUT: SDUMP PARM LIST, 4K SQA BUFFER, SYSTEM CONTROL BLOCKS   */
*/*                                                                  */
*/*   OUTPUT: ADDRESS RANGE TABLE AND RETURN CODE, NULL - ADDRESS    */
*/*   RANGE TABLE COMPLETE, PARTDUMP - ADDRESS RANGE TABLE FILLED,   */
*/*   PARTIAL DUMP WILL BE TAKEN.                                    */
*/*   INCLUDED BY: TOP SEGMENT                                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0094
*       FLGRTFUL='0'B;              /* IND ADDR RANGE TABLE NOT FUL  */
         NI    FLGRTFUL(R7),B'01111111'                            0094
*       ERRRETRY=ADDR(RTYADR10);    /* NEXT RETRY LOCATION ADDRESS   */
         LA    @12,RTYADR10                                        0095
         ST    @12,ERRRETRY(,R3)                                   0095
*       IF SVCDSQA='1'B×SVCDCSA='1'B THEN/* IF SQA OR CSA TO BE    0096
*                                      DUMPED                        */
         TM    SVCDSQA(R7),B'00010000'                             0096
         BO    @RT00096                                            0096
         TM    SVCDCSA(R7),B'10000000'                             0096
         BNO   @RF00096                                            0096
@RT00096 DS    0H                                                  0097
*         DO;                                                      0097
*                                                                  0098
*/********************************************************************/
*/*   THIS SEGMENT WILL FIX THE SVC DUMP MODULE, IEAVAD00, AND       */
*/*   THE SVC DUMP WORK AREA IN REAL STORAGE.  THE SALLOC LOCK IS    */
*/*   OBTAINED WHEN SQA OR CSA IS TO BE INCLUDED IN THE DUMP.        */
*/*   REFERENCED PAGES ARE FIXED TO PREVENT A PAGE FAULT.            */
*/*                                                                  */
*/*   INPUT: NO LOCKS HELD                                           */
*/*                                                                  */
*/*   OUTPUT: FIXED PAGES, INDICATOR IN ERROR WORK AREA              */
*/*                                                                  */
*/*   INCLUDED BY: SDADDR                                            */
*/********************************************************************/
*                                                                  0098
*           RFY                                                    0098
*            (R0,                                                  0098
*             R1,                                                  0098
*             R2,                                                  0098
*             R1) RSTD;                                            0098
*           R0=ADDR(SDECB);         /* ADDR OF ECB, POSTED BY PGFIX  */
         LR    R0,R7                                               0099
*           SDECB=NULL;             /* CLEAR ECB FOR WAIT            */
         SLR   @12,@12                                             0100
         ST    @12,SDECB(,R7)                                      0100
*           R1=ADDR(IEAVTSDG);      /* START ADDRESS TO FIX          */
         L     R1,@CA00028                                         0101
*           R2=NULL;                /* NO END ADDRESS TO FIX         */
         SLR   R2,R2                                               0102
*           GEN;                                                   0103
         PGFIX R,LONG=Y,RELEASE=N,                                     X
               A=(R1),ECB=(R0)
*           R1=ADDR(SDECB);         /* ADDRESS OF ECB TO WAIT ON     */
         LR    R1,R7                                               0104
*           GEN(WAIT  1,ECB=(R1));  /* WAIT FOR PAGES TO BE FIXED    */
         WAIT  1,ECB=(R1)
*           ERRSDFIX='1'B;          /* INDICATE MODULE PAGES FIXED   */
         OI    ERRSDFIX(R3),B'00100000'                            0106
*           IF SDUABEND='0'B THEN   /* IF THIS NOT A SYSMDUMP REQUEST*/
         L     @12,SDWSDPL(,R7)                                    0107
         TM    SDUABEND(@12),B'01000000'                           0107
         BNZ   @RF00107                                            0107
*             DO;                   /* PGFIX WORK AREA IN ONE PIECE
*                                      OF STORAGE                    */
*               SDECB=NULL;         /* CLEAR ECB AFTER IT IS POSTED  */
         SLR   @12,@12                                             0109
         ST    @12,SDECB(,R7)                                      0109
*               R0=ADDR(SDECB);     /* ADDR OF ECB, POSTED BY PGFIX  */
         LR    R0,R7                                               0110
*               R1=R7;              /* START ADDRESS TO FIX  @G33SPHD*/
         LR    R1,R7                                               0111
*               R2=R7+SDWORKLN;     /* END ADDRESS TO FIX    @G33SPHD*/
         LR    R2,R7                                               0112
         AL    R2,SDWORKLN                                         0112
*               ERRWKFIX='1'B;      /* INDICATE WORKAREA FIXED       */
         OI    ERRWKFIX(R3),B'00010000'                            0113
*               GEN;                                               0114
         PGFIX R,LONG=Y,RELEASE=N,                                     X
               A=(R1),EA=(R2),ECB=(R0)
*               R1=ADDR(SDECB);     /* ADDRESS OF ECB TO WAIT ON     */
         LR    R1,R7                                               0115
*               GEN(WAIT  1,ECB=(R1));/* WAIT FOR PAGES TO BE FIXED  */
         WAIT  1,ECB=(R1)
*               SDECB=NULL;         /* CLEAR ECB AFTER IT IS POSTED  */
         SLR   @12,@12                                             0117
         ST    @12,SDECB(,R7)                                      0117
*             END;                  /* END OF THIS IS NOT A SYSMDUMP
*                                      REQUEST                       */
*           ELSE                                                   0119
*             DO;                   /* THIS IS A SYSMDUMP REQUEST SO
*                                      PGFIX BOTH AREAS              */
         B     @RC00107                                            0119
@RF00107 DS    0H                                                  0120
*               SDECB=NULL;         /* CLEAR ECB AFTER IT IS POSTED  */
         SLR   @12,@12                                             0120
         ST    @12,SDECB(,R7)                                      0120
*               R0=ADDR(SDECB);     /* ADDR OF ECB, POSTED BY PGFIX  */
         LR    R0,R7                                               0121
*               R1=R7;              /* START ADDRESS TO FIX  @G33SPHD*/
         LR    R1,R7                                               0122
*               R2=R7+LENGTH(SDCNTRL);/* END ADDRESS TO FIX          */
         LA    R2,432                                              0123
         ALR   R2,R7                                               0123
*               ERRWKFIX='1'B;      /* INDICATE WORKAREA FIXED       */
         OI    ERRWKFIX(R3),B'00010000'                            0124
*               GEN;                                               0125
         PGFIX R,LONG=Y,RELEASE=N,                                     X
               A=(R1),EA=(R2),ECB=(R0)
*               R1=ADDR(SDECB);     /* ADDRESS OF ECB TO WAIT ON     */
         LR    R1,R7                                               0126
*               GEN(WAIT  1,ECB=(R1));/* WAIT FOR PAGES TO BE FIXED  */
         WAIT  1,ECB=(R1)
*               SDECB=NULL;         /* CLEAR ECB AFTER IT IS POSTED  */
         SLR   @12,@12                                             0128
         ST    @12,SDECB(,R7)                                      0128
*               R0=ADDR(SDECB);     /* ADDR OF ECB, POSTED BY PGFIX  */
         LR    R0,R7                                               0129
*               R1=SDSMBUFF;        /* START ADDRESS TO FIX  @G33SPHD*/
         L     @12,SDSMBUFF(,R7)                                   0130
         LR    R1,@12                                              0130
*               R2=SDSMBUFF+LENGTH(SDBUFFER);/* END ADDRESS TO FIX   */
         AL    @12,@CF03032                                        0131
         LR    R2,@12                                              0131
*               GEN;                                               0132
         PGFIX R,LONG=Y,RELEASE=N,                                     X
               A=(R1),EA=(R2),ECB=(R0)
*               R1=ADDR(SDECB);     /* ADDRESS OF ECB TO WAIT ON     */
         LR    R1,R7                                               0133
*               GEN(WAIT  1,ECB=(R1));/* WAIT FOR PAGES TO BE FIXED  */
         WAIT  1,ECB=(R1)
*               SDECB=NULL;         /* CLEAR ECB AFTER IT IS POSTED  */
         SLR   @12,@12                                             0135
         ST    @12,SDECB(,R7)                                      0135
*             END;                  /* END OF THIS IS A SYSMDUMP   0136
*                                      REQUEST                       */
*           RFY                                                    0137
*            (R0,                                                  0137
*             R1,                                                  0137
*             R2,                                                  0137
*             R1) UNRSTD;                                          0137
@RC00107 DS    0H                                                  0138
*         END;                                                     0138
*       ELSE                                                       0139
*         ;                                                        0139
@RF00096 DS    0H                                                  0140
*RTYADR10:                                                         0140
*       ERRRETRY=ADDR(RTYENDMP);    /* NEXT RETRY LOCATION ADDRESS   */
RTYADR10 LA    @12,RTYENDMP                                        0140
         ST    @12,ERRRETRY(,R3)                                   0140
*       ERRLLOCK='1'B;              /* INDICATE LOCAL LOCK HELD      */
         OI    ERRLLOCK(R3),B'00000010'                            0141
*       GEN REFS(PSALITA);                                         0142
GETLOCK2 SETLOCK   OBTAIN,TYPE=LOCAL,MODE=UNCOND,                      X
               RELATED=(SVCDUMP,IEAVTSDG(FRELOCK2))
*       RFY                                                        0143
*        (R10,                                                     0143
*         R11) RSTD;                                               0143
*       ERRFRR='1'B;                /* INDICATE FRR PROTECT ACTIVE   */
         OI    ERRFRR(R3),B'10000000'                              0144
*       GEN(SETFRR A,FRRAD=ADDRFRR,WRKREGS=(R10,R11),PARMAD=(R3))  0145
*       REFS(ADDRFRR,PSACSTK,FRRSCURR,FRRSLAST,PSALSFCC,FRRS,FRRSPARM,
*           FRRSFRRA,FRRSENTR,PSA);                                0145
         SETFRR A,FRRAD=ADDRFRR,WRKREGS=(R10,R11),PARMAD=(R3)
*       RFY                                                        0146
*        (R10,                                                     0146
*         R11) UNRSTD;                                             0146
*       ERRWORK=ERRORWK;            /* STATUS FOR FRR ERROR EXIT     */
         MVC   ERRWORK(24,R3),ERRORWK(R7)                          0147
*                                                                  0148
*/********************************************************************/
*/*   THIS SEGMENT BUILDS THE GLOBAL PART OF THE ADDRESS RANGE       */
*/*   TABLE.  THE GLOBAL PART IS COMPRISED OF ADDRESS RANGES FOR     */
*/*   SQA, CSA, PSA, CVT, ASCB, ASVT AND SUPERVISOR TRACE TABLE.     */
*/*                                                                  */
*/*   INPUT: SDUMP PARM LIST, RANGEPTR-CONTAINING ADDRESS OF NEXT    */
*/*          AVAILABLE SLOT IN ADDRESS RANGE TABLE,                  */
*/*          GLOBADDR CONTAINS ADDRESS BEGINNING OF GLOBAL PART OF   */
*/*          ADDRESS RANGE TABLE.                                    */
*/*                                                                  */
*/*   OUTPUT: GLOBAL PART OF ADDRESS RANGE TABLE CONTAINS ADDRESS    */
*/*           RANGES FOR REQUESTED GLOBAL, VOLATILE AREAS            */
*/*           OF THE SYSTEM                                          */
*/********************************************************************/
*                                                                  0148
*       ERRRETRY=ADDR(RTYGLO10);    /* NEXT RETRY LOCATION ADDRESS   */
         LA    @12,RTYGLO10                                        0148
         ST    @12,ERRRETRY(,R3)                                   0148
*       IF ERRSDFIX='1'B&           /* IF THIS MODULE AND THE SVC  0149
*                                      DUMP                          */
*           ERRWKFIX='1'B THEN      /* WORK AREAS ARE FIXED IN REAL
*                                      STORAGE. IT IS SAFE TO OBTAIN
*                                      THE SALLOC LOCK               */
         TM    ERRSDFIX(R3),B'00110000'                            0149
         BNO   @RF00149                                            0149
*         DO;                       /* OBTAIN THE SALLOC LOCK        */
*           GEN REFS(PSALITA);                                     0151
GETLOCKD SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,                       X
               RELATED=(SVCDUMP,IEAVAD00(FRELOCKD,FRELOCKE))
*           ERRSLOCK='1'B;          /* INDICATE SALLOC LOCK HELD     */
         OI    ERRSLOCK(R3),B'00000001'                            0152
*         END;                                                     0153
*                                                                  0153
*       /*************************************************************/
*       /*                                                           */
*       /* PUT SQA ADDRESS RANGES IN THE ADDRESS RANGE TABLE         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0154
*RTYGLO10:                                                         0154
*       ERRRETRY=ADDR(RTYGLO30);    /* NEXT RETRY LOCATION ADDRESS   */
@RF00149 DS    0H                                                  0154
RTYGLO10 LA    @12,RTYGLO30                                        0154
         ST    @12,ERRRETRY(,R3)                                   0154
*       IF FLGRTFUL='0'B&           /* IF RANGE TABLE NOT FULL AND   */
*           SVCDNSQA='0'B THEN      /* SQA IS TO BE DUMPED           */
         TM    FLGRTFUL(R7),B'10000000'                            0155
         BNZ   @RF00155                                            0155
         TM    SVCDNSQA(R7),B'00000100'                            0155
         BNZ   @RF00155                                            0155
*         DO;                                                      0156
*           SPQEADDR=SQASPQEP;      /* ADDR OF FIRST SQA SPQE        */
         L     @12,CVTPTR                                          0157
         L     @12,GDAPTR(,@12)                                    0157
         L     @12,SQASPQEP(,@12)                                  0157
         ST    @12,SPQEADDR(,R7)                                   0157
*           CALL SDSPQE;            /* ADD SQA RANGES TO RANGE TABLE */
         BAL   @14,SDSPQE                                          0158
*         END;                                                     0159
*                                                                  0159
*       /*************************************************************/
*       /*                                                           */
*       /* PUT CSA STORAGE ADDRESSES IN THE ADDRESS RANGE TABLE      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0160
*RTYGLO30:                                                         0160
*       ERRRETRY=ADDR(RTYGLO40);    /* NEXT RETRY LOCATION ADDRESS   */
@RF00155 DS    0H                                                  0160
RTYGLO30 LA    @12,RTYGLO40                                        0160
         ST    @12,ERRRETRY(,R3)                                   0160
*       IF FLGRTFUL='0'B&           /* IF RANGE TABLE NOT FULL AND   */
*           SVCDCSA='1'B THEN       /* CSA IS TO BE DUMPED           */
         TM    FLGRTFUL(R7),B'10000000'                            0161
         BNZ   @RF00161                                            0161
         TM    SVCDCSA(R7),B'10000000'                             0161
         BNO   @RF00161                                            0161
*         DO;                                                      0162
*           SPQEADDR=CSASPQEP;      /* ADDR OF FIRST CSA SPQE        */
         L     @12,CVTPTR                                          0163
         L     @12,GDAPTR(,@12)                                    0163
         L     @12,CSASPQEP(,@12)                                  0163
         ST    @12,SPQEADDR(,R7)                                   0163
*           CALL SDSPQE;            /* ADD CSA RANGES TO RANGE TABLE */
         BAL   @14,SDSPQE                                          0164
*         END;                                                     0165
*                                                                  0165
*       /*************************************************************/
*       /*                                                           */
*       /* PUT SUPERVISOR TRACE TABLE ADDRESSES IN ADDRESS RANGE     */
*       /* TABLE IF TRACE IS ACTIVE                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0166
*RTYGLO40:                                                         0166
*       ERRRETRY=ADDR(RTYGLO50);    /* NEXT RETRY LOCATION ADDRESS   */
@RF00161 DS    0H                                                  0166
RTYGLO40 LA    @12,RTYGLO50                                        0166
         ST    @12,ERRRETRY(,R3)                                   0166
*       IF FLGRTFUL='0'B&           /* IF RANGE TABLE NOT FULL AND   */
*           SVCDTRT='1'B&           /* TRACE DATA TO BE DUMPED AND   */
*           CVTSDTRC='1'B THEN      /* SVC DUMP SET SUPERVISOR TRACE
*                                      INACTIVE EARLIER      @ZA19976*/
         TM    FLGRTFUL(R7),B'10000000'                            0167
         BNZ   @RF00167                                            0167
         TM    SVCDTRT(R7),B'00000001'                             0167
         BNO   @RF00167                                            0167
         L     @12,CVTPTR                                          0167
         TM    CVTSDTRC(@12),B'00000001'                           0167
         BNO   @RF00167                                            0167
*         DO;                                                      0168
*           STARTADR=FLCTRACE;      /* START ADDRESS OF TRACE TABLE  */
         L     @12,FLCTRACE                                        0169
         L     @08,RANGEPTR(,R7)                                   0169
         ST    @12,STARTADR(,@08)                                  0169
*           ENDADDR=TRTEND;         /* END ADDRESS OF TRACE TABLE    */
         L     @12,TRTEND(,@12)                                    0170
         ST    @12,ENDADDR(,@08)                                   0170
*           CALL SDADDADR;          /* ADD SUPERVISOR TRACE TABLE  0171
*                                      RANGE TO TABLE                */
         BAL   @14,SDADDADR                                        0171
*         END;                                                     0172
*RTYGLO50:                                                         0173
*       ERRRETRY=ADDR(RTYGLO60);    /* NEXT RETRY LOCATION ADDRESS   */
@RF00167 DS    0H                                                  0173
RTYGLO50 LA    @12,RTYGLO60                                        0173
         ST    @12,ERRRETRY(,R3)                                   0173
*       IF FLGRTFUL='0'B&           /* IF RANGE TABLE NOT FULL AND   */
*           SVCDNAPA='0'B THEN      /* ALL PSAS TO BE DUMPED         */
         TM    FLGRTFUL(R7),B'10000000'                            0174
         BNZ   @RF00174                                            0174
         TM    SVCDNAPA(R7),B'00001000'                            0174
         BNZ   @RF00174                                            0174
*         DO;                                                      0175
*                                                                  0175
*/********************************************************************/
*/*   THIS SEGMENT WILL CONVERT THE 'ALLPSA' SDATA OPTION ON THE     */
*/*   SDUMP MACRO TO ADDRESS RANGES.  AN ADDRESS RANGE FOR EACH      */
*/*   PSA, FOR EACH ALIVE CPU, WILL BE ADDED TO THE ADDRESS RANGE    */
*/*   TABLE.                                                         */
*/*                                                                  */
*/*   INPUT: CSDCPUAL CONTAINS A BIT MASK REFLECTING ALIVE CPUS.     */
*/*          PCCAT00P CONTAINS ADDRESSES OF ALL PCCAS.  EACH PCCA,   */
*/*          PCCAPSAV FIELD, CONTAINS ADDRESS OF CORRESPONDING PSA.  */
*/*                                                                  */
*/*   OUTPUT: STORAGE RANGE FOR EACH PSA ADDED TO ADDRESS RANGE      */
*/*           TABLE                                                  */
*/*                                                                  */
*/*   INCLUDED BY: SDGLOBAL                                          */
*/********************************************************************/
*                                                                  0176
*           RFY                                                    0176
*            (R10,                                                 0176
*             R11,                                                 0176
*             R4) RSTD;                                            0176
*           R10=NULL;               /* CLEAR REGISTER        @YM04725*/
         SLR   R10,R10                                             0177
*           R11=CSDCPUAL;           /* MASK IN ODD REG       @YM04725*/
         L     @12,CVTPTR                                          0178
         L     @12,CVTCSD(,@12)                                    0178
         LH    R11,CSDCPUAL(,@12)                                  0178
         N     R11,@CF03236                                        0178
*           GEN(SLL   R11,16);      /* MASK IN HIGH END      @YM04725*/
         SLL   R11,16
*           RFY                                                    0180
*             PCCA BASED(PCCAT00P(R4));                            0180
*                                                                  0180
*           /*********************************************************/
*           /*                                                       */
*           /* PROCESS ALL PSA AREAS FOR ALL CPUS. IF THE CPU IS     */
*           /* ALIVE ADD ITS PSA ADDRESS TO THE RANGE TABLE          */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0181
*           DO R4=1 TO MAXCPUS;     /* CHECK ALL ALLOWABLE CPUS      */
         LA    R4,1                                                0181
@DL00181 DS    0H                                                  0182
*             GEN(SLDL  R10,1);     /* ALIVE BIT IN R10      @YM04725*/
         SLDL  R10,1
*             IF R10^=NULL THEN     /* IF CPU IS ALIVE,      @YM04725*/
         LTR   R10,R10                                             0183
         BZ    @RF00183                                            0183
*               DO;                 /* LOCATE PSA            @YM04725*/
*                 STARTADR=PCCAPSAV;/* BEGIN ADDR OF PSA FOR CPU     */
         L     @12,RANGEPTR(,R7)                                   0185
         LR    @08,R4                                              0185
         SLA   @08,2                                               0185
         L     @06,CVTPTR                                          0185
         L     @06,CVTPCCAT(,@06)                                  0185
         AL    @06,@CF03237                                        0185
         L     @08,PCCAT00P(@08,@06)                               0185
         L     @08,PCCAPSAV(,@08)                                  0185
         ST    @08,STARTADR(,@12)                                  0185
*                 ENDADDR=STARTADR+FOURK;/* END ADDR OF PSA FOR CPU  */
         AL    @08,@CF00078                                        0186
         ST    @08,ENDADDR(,@12)                                   0186
*                 CALL SDADDADR;    /* ADD RANGE TO ADDRESS RANGE  0187
*                                      TABLE                         */
         BAL   @14,SDADDADR                                        0187
*                 R10=NULL;         /* RESET ALIVE IND       @YM04725*/
         SLR   R10,R10                                             0188
*                 IF FLGRTFUL='1'B THEN/* IF ADDR RANGE TABLE FULL,  */
         TM    FLGRTFUL(R7),B'10000000'                            0189
         BNO   @RF00189                                            0189
*                   R4=MAXCPUS;     /* END LOOP                      */
         LA    R4,16                                               0190
*                 ELSE                                             0191
*                   ;                                              0191
@RF00189 DS    0H                                                  0192
*               END;                                               0192
*             ELSE                                                 0193
*               ;                                                  0193
@RF00183 DS    0H                                                  0194
*           END;                                                   0194
         AL    R4,@CF00036                                         0194
         C     R4,@CF01069                                         0194
         BNH   @DL00181                                            0194
*           RFY                                                    0195
*             PCCA BASED;                                          0195
*           RFY                                                    0196
*            (R10,                                                 0196
*             R11,                                                 0196
*             R4) UNRSTD;                                          0196
*         END;                                                     0197
*                                                                  0197
*       /*************************************************************/
*       /*                                                           */
*       /* DUMP PSA FOR CURRENT CPU IF REQUESTED                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0198
*       IF FLGRTFUL='0'B&           /* IF RANGE TABLE NOT FULL AND   */
*           (SVCDPSA='1'B×SVCDNAPA='0'B) THEN/* PSA FOR CURRENT CPU
*                                      TO BE DUMPED          @ZA08467*/
@RF00174 TM    FLGRTFUL(R7),B'10000000'                            0198
         BNZ   @RF00198                                            0198
         TM    SVCDPSA(R7),B'01000000'                             0198
         BO    @RT00198                                            0198
         TM    SVCDNAPA(R7),B'00001000'                            0198
         BNZ   @RF00198                                            0198
@RT00198 DS    0H                                                  0199
*         DO;                                                      0199
*           STARTADR=NULL;          /* CURRENT PSA STARTS AT 0       */
         L     @12,RANGEPTR(,R7)                                   0200
         SLR   @08,@08                                             0200
         ST    @08,STARTADR(,@12)                                  0200
*           ENDADDR=FOURK;          /* CURRENT PSA ENDS AT 4K        */
         MVC   ENDADDR(4,@12),@CF00078                             0201
*           CALL SDADDADR;          /* ADD RANGE FOR CURRENT PSA TO
*                                      TABLE                         */
         BAL   @14,SDADDADR                                        0202
*         END;                                                     0203
*RTYGLO60:                                                         0204
*       ERRRETRY=ADDR(RTYGLO70);    /* NEXT RETRY LOCATION ADDRESS   */
@RF00198 DS    0H                                                  0204
RTYGLO60 LA    @12,RTYGLO70                                        0204
         ST    @12,ERRRETRY(,R3)                                   0204
*       IF ERRSLOCK='1'B THEN       /* IF SALLOC LOCK HELD   @ZA10812*/
         TM    ERRSLOCK(R3),B'00000001'                            0205
         BNO   @RF00205                                            0205
*         DO;                       /* FREE IT               @ZA10812*/
*           GEN REFS(PSALITA);                                     0207
*                                                         /* @ZA10812*/
FRELOCKD SETLOCK RELEASE,TYPE=SALLOC,                                  X
               RELATED=(SVCDUMP,IEAVAD00(GETLOCKD))
*           ERRSLOCK='0'B;          /* INDICATE LOCK FREED   @ZA10812*/
         NI    ERRSLOCK(R3),B'11111110'                            0208
*         END;                      /*                       @ZA10812*/
*                                                                  0209
*       /*************************************************************/
*       /*                                                           */
*       /* PROCESS USER STORAGE RANGES WHICH BEGIN WITHIN THE GLOBAL */
*       /* STORAGE AREA                                              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0210
*       IF FLGRTFUL='0'B&           /* IF RANGE TABLE NOT FULL AND   */
*           SDUSTOR='1'B THEN       /* CALLER SUPPLIED STOR RANGES   */
@RF00205 TM    FLGRTFUL(R7),B'10000000'                            0210
         BNZ   @RF00210                                            0210
         L     @12,SDWSDPL(,R7)                                    0210
         TM    SDUSTOR(@12),B'00100000'                            0210
         BNO   @RF00210                                            0210
*         DO;                                                      0211
*           USESTART=PASTRT+PASIZE; /* BEGIN ADDR FOR THIS PART TABLE*/
         L     @12,CVTPTR                                          0212
         L     @12,GDAPTR(,@12)                                    0212
         L     @08,PASTRT(,@12)                                    0212
         AL    @08,PASIZE(,@12)                                    0212
         ST    @08,USESTART(,R7)                                   0212
*           USEEND=ENDPART;         /* END ADDR FOR THIS PART TABLE  */
         MVC   USEEND(4,R7),@CF03099                               0213
*           CALL USERNGES;          /* GLOBAL USER RANGES INTO TABLE */
         BAL   @14,USERNGES                                        0214
*         END;                                                     0215
*RTYGLO70:                                                         0216
*       ERRRETRY=ADDR(RTYGLO80);    /* NEXT RETRY LOCATION ADDRESS   */
*                                                                  0216
@RF00210 DS    0H                                                  0216
RTYGLO70 LA    @12,RTYGLO80                                        0216
         ST    @12,ERRRETRY(,R3)                                   0216
*       /*************************************************************/
*       /*                                                           */
*       /* END THIS PART OF THE TABLE. ARRANGE AND COMPRESS THE      */
*       /* ADDRESSES IN THE TABLE                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0217
*       STARTADR=ENDPART;           /* END INDICATOR FOR THIS PART   */
         L     @12,RANGEPTR(,R7)                                   0217
         MVC   STARTADR(4,@12),@CF03099                            0217
*       ENDADDR=HIGHBIT1;           /* OF ADDRESS RANGE TABLE        */
         MVC   ENDADDR(4,@12),@CF03101                             0218
*       RANGEPTR=GLOBADDR;          /* ADDR OF GLOBAL PART TABLE     */
         L     @12,GLOBADDR(,R7)                                   0219
         ST    @12,RANGEPTR(,R7)                                   0219
*       CALL ARRANGE;               /* SORT/ARRANGE GLOBAL RANGES    */
         BAL   @14,ARRANGE                                         0220
*RTYGLO80:                                                         0221
*       ERRRETRY=ADDR(RTYADR30);    /* NEXT RETRY LOCATION ADDRESS   */
RTYGLO80 LA    @12,RTYADR30                                        0221
         ST    @12,ERRRETRY(,R3)                                   0221
*       IF ERRSDFIX='1'B THEN       /* IF ANY PAGES FIXED            */
         TM    ERRSDFIX(R3),B'00100000'                            0222
         BNO   @RF00222                                            0222
*         DO;                                                      0223
*           CALL SDPGFREE;          /* FREE FIXED PAGES              */
         BAL   @14,SDPGFREE                                        0224
*         END;                                                     0225
*       ELSE                                                       0226
*         ;                                                        0226
@RF00222 DS    0H                                                  0227
*       STARTADR=ENDPART;           /* END GLOBAL PART OF TABLE      */
         L     @12,RANGEPTR(,R7)                                   0227
         MVC   STARTADR(4,@12),@CF03099                            0227
*       ENDADDR=HIGHBIT1;           /* END GLOBAL PART OF TABLE    0228
*                                                            @ZM45082*/
         MVC   ENDADDR(4,@12),@CF03101                             0228
*RTYADR30:                                                         0229
*       ERRRETRY=ADDR(RTYADR50);    /* GET NEXT RETRY ADDR   @ZM45082*/
RTYADR30 LA    @12,RTYADR50                                        0229
         ST    @12,ERRRETRY(,R3)                                   0229
*       IF FLGRTFUL='0'B THEN       /* IF ADDR RANGE TABLE NOT FULL  */
         TM    FLGRTFUL(R7),B'10000000'                            0230
         BNZ   @RF00230                                            0230
*         DO;                                                      0231
*           RANGEPTR=RANGEPTR+LEN1ADRN;/* ADDRESS OF NEXT RANGE      */
         LA    @12,8                                               0232
         AL    @12,RANGEPTR(,R7)                                   0232
         ST    @12,RANGEPTR(,R7)                                   0232
*           NUCADDR=RANGEPTR;       /* BEGIN NUCLEUS PART OF TAB     */
         ST    @12,NUCADDR(,R7)                                    0233
*/********************************************************************/
*/*   THIS SEGMENT WILL BUILD THE NUCLEUS PART OF THE ADDRESS        */
*/*   RANGE TABLE.  THE NUCLEUS PART OF THE ADDRESS RANGE TABLE IS   */
*/*   COMPRISED OF CALLER SUPPLIED ADDRESS RANGES WHICH START        */
*/*   BELOW THE PRIVATE AREA OF THE ADDRESS SPACE AND AN ADDRESS     */
*/*   RANGE FOR THE NUC SDATA OPTION.  NOTE:  THE NUC SDATA          */
*/*   OPTION DOES NOT INCLUDE 0-4K(PSA) AND ANY UNUSED PAGES OF      */
*/*   NUCLEUS.                                                       */
*/*                                                                  */
*/*   INPUT: SDATA OPTIONS, RANGEPTR CONTAINS ADDRESS OF NUCLEUS     */
*/*          PART OF ADDRESS RANGE TABLE.                            */
*/*                                                                  */
*/*   OUTPUT: ADDRESS RANGES FOR DATA TO BE DUMPED WHICH LIES        */
*/*           BELOW THE PRIVATE AREA OF THE ADDRESS SPACE.           */
*/********************************************************************/
*                                                                  0234
*           ERRRETRY=ADDR(RTYNUC10);/* NEXT RETRY LOCATION ADDRESS   */
         LA    @08,RTYNUC10                                        0234
         ST    @08,ERRRETRY(,R3)                                   0234
*           IF SVCDNUC='1'B THEN    /* IF NUC REQUESTED, BUILD RANGE */
         TM    SVCDNUC(R7),B'00100000'                             0235
         BNO   @RF00235                                            0235
*             DO;                                                  0236
*               RFY                                                0237
*                (R10,                                             0237
*                 R11) RSTD;                                       0237
*               STARTADR=CVTIXAVL->IOCATTBL;/* START NUCLEUS       0238
*                                      ADDRESSES WHERE DEFAULT UCB 0238
*                                      AREAS ENDED           @ZM45046*/
         L     @08,CVTPTR                                          0238
         L     @06,CVTIXAVL(,@08)                                  0238
         L     @06,IOCATTBL(,@06)                                  0238
         ST    @06,STARTADR(,@12)                                  0238
*/* THIS LOOP WILL SEARCH DOWN FORM THE TOP OF THE NUCLEUS           */
*/* UNTIL IT FINDS THE FIRST USED PAGE. THIS ELIMINATES UNUSED       */
*/* NUCLEUS PAGES FROM THE DUMP                                      */
*                                                                  0239
*               DO R11=CVTNUCB-FOURK TO FOURK BY-FOURK;            0239
         L     R11,CVTNUCB(,@08)                                   0239
         SL    R11,@CF00078                                        0239
         B     @DE00239                                            0239
@DL00239 DS    0H                                                  0240
*                 GEN;                                             0240
*                                 /*SEE IF THIS PAGE IS USED         */
         LRA   R10,0(R11)
*                 BC(8,GOODCC);     /* IF PAGE IS USED EXIT LOOP     */
         BC    8,GOODCC                                            0241
*               END;                /* END OF NUCLEUS PAGE SEARCH    */
         AL    R11,@CF03227                                        0242
@DE00239 C     R11,@CF00078                                        0242
         BNL   @DL00239                                            0242
*GOODCC:                                                           0243
*               ENDADDR=R11+FOURK;  /* OBTAIN PROPER END ADDRESS     */
GOODCC   L     @12,RANGEPTR(,R7)                                   0243
         LR    @08,R11                                             0243
         AL    @08,@CF00078                                        0243
         ST    @08,ENDADDR(,@12)                                   0243
*               CALL SDADDADR;      /* ADD NUCLEUS RANGES TO TABLE   */
         BAL   @14,SDADDADR                                        0244
*               RFY                                                0245
*                (R10,                                             0245
*                 R11) UNRSTD;                                     0245
*             END;                                                 0246
*RTYNUC10:                                                         0247
*           ERRRETRY=ADDR(RTYNUC20);/* NEXT RETRY LOCATION ADDRESS   */
*                                                                  0247
@RF00235 DS    0H                                                  0247
RTYNUC10 LA    @12,RTYNUC20                                        0247
         ST    @12,ERRRETRY(,R3)                                   0247
*           /*********************************************************/
*           /*                                                       */
*           /* DUMP CALLER SUPPLED STORAGE RANGES THAT BEGIN IN THE  */
*           /* NUCLEUS                                               */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0248
*           IF FLGRTFUL='0'B&       /* IF RANGE TABLE NOT FULL AND   */
*               SDUSTOR='1'B THEN   /* CALLER SUPPLIED STOR RANGES   */
         TM    FLGRTFUL(R7),B'10000000'                            0248
         BNZ   @RF00248                                            0248
         L     @12,SDWSDPL(,R7)                                    0248
         TM    SDUSTOR(@12),B'00100000'                            0248
         BNO   @RF00248                                            0248
*             DO;                                                  0249
*               USESTART=NULL;      /* START ADDRESS IS LOCATION 0   */
         SLR   @12,@12                                             0250
         ST    @12,USESTART(,R7)                                   0250
*               USEEND=PASTRT;      /* END ADDR IS BEG PRIVATE AREA  */
         L     @12,CVTPTR                                          0251
         L     @12,GDAPTR(,@12)                                    0251
         L     @12,PASTRT(,@12)                                    0251
         ST    @12,USEEND(,R7)                                     0251
*               CALL USERNGES;      /* ADD USER STORAGE TO TABLE     */
         BAL   @14,USERNGES                                        0252
*             END;                                                 0253
*                                                                  0253
*           /*********************************************************/
*           /*                                                       */
*           /* END THE NUCLEUS PART OF THE ADDRESS RANGE TABLE       */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0254
*RTYNUC20:                                                         0254
*           ERRRETRY=ADDR(RTYADR50);/* NEXT RETRY LOCATION ADDRESS   */
@RF00248 DS    0H                                                  0254
RTYNUC20 LA    @12,RTYADR50                                        0254
         ST    @12,ERRRETRY(,R3)                                   0254
*           STARTADR=ENDPART;       /* END THIS PART OF ADDRESS      */
         L     @12,RANGEPTR(,R7)                                   0255
         MVC   STARTADR(4,@12),@CF03099                            0255
*           ENDADDR=HIGHBIT1;       /* RANGE TABLE                   */
         MVC   ENDADDR(4,@12),@CF03101                             0256
*           RANGEPTR=NUCADDR;       /* BEG ADDR OF NUC PART OF TAB   */
         L     @12,NUCADDR(,R7)                                    0257
         ST    @12,RANGEPTR(,R7)                                   0257
*           CALL ARRANGE;           /* SORT, ARRANGE THIS PART       */
         BAL   @14,ARRANGE                                         0258
*           STARTADR=ENDPART;       /* END NUCLEUS PART OF TABLE     */
         L     @12,RANGEPTR(,R7)                                   0259
         MVC   STARTADR(4,@12),@CF03099                            0259
*           ENDADDR=HIGHBIT1;                                      0260
         MVC   ENDADDR(4,@12),@CF03101                             0260
*         END;                                                     0261
*       ELSE                                                       0262
*         NUCADDR=RANGEPTR;         /* DUMMY NUC PART OF TABLE       */
         B     @RC00230                                            0262
@RF00230 L     @12,RANGEPTR(,R7)                                   0262
         ST    @12,NUCADDR(,R7)                                    0262
*RTYADR50:                                                         0263
*       ERRRETRY=ADDR(RTYDMP30);    /* GET NEXT RETRY ADDR   @ZM45082*/
@RC00230 DS    0H                                                  0263
RTYADR50 LA    @12,RTYDMP30                                        0263
         ST    @12,ERRRETRY(,R3)                                   0263
*       ERRORWK=ERRWORK;            /* STATUS FOR ESTAE ERROR EXIT   */
         MVC   ERRORWK(24,R7),ERRWORK(R3)                          0264
*       R3=ADDR(ERRORWK);           /* ADDR ESTAE ERROR WORKA AREA   */
         LA    R3,ERRORWK(,R7)                                     0265
*       RFY                                                        0266
*        (R10,                                                     0266
*         R11) RSTD;                                               0266
*       GEN(SETFRR D,WRKREGS=(R10,R11))                            0267
*       REFS(PSACSTK,FRRS,FRRSCURR,FRRSEMP,FRRSELEN);/* RELEASE FRR
*                                      PROTECTION                    */
         SETFRR D,WRKREGS=(R10,R11)
*       RFY                                                        0268
*        (R10,                                                     0268
*         R11) UNRSTD;                                             0268
*       ERRFRR='0'B;                /* FRR PROTECTION RELEASED       */
         NI    ERRFRR(R3),B'01111111'                              0269
*       GEN REFS(PSALITA);                                         0270
FRELOCK2 SETLOCK   RELEASE,TYPE=LOCAL,                                 X
               RELATED=(SVCDUMP,IEAVAD00(GETLOCK2))
*       ERRLLOCK='0'B;              /* LOCAL LOCK RELEASED           */
         NI    ERRLLOCK(R3),B'11111101'                            0271
*RTYDMP30:                                                         0272
*       ERRRETRY=ADDR(RTYDMP40);    /* NEXT RETRY LOC ADDRESS        */
RTYDMP30 LA    @12,RTYDMP40                                        0272
         ST    @12,ERRRETRY(,R3)                                   0272
*       RANGEPTR=GLOBADDR;          /* POINT TO GLOBAL ADDRESS IN IN
*                                      ADDRESS RANGE TABLE           */
         L     @12,GLOBADDR(,R7)                                   0273
         ST    @12,RANGEPTR(,R7)                                   0273
*       R13=ADDR(SDWRGSV2);         /* GET SAVE AREA ADDRESS @G33VPHD*/
         LA    R13,SDWRGSV2(,R7)                                   0274
*       CALL IEAVTSDO;              /* PUT OUT REQUESTED GLOBAL AREAS*/
         L     @15,@CV03144                                        0275
         BALR  @14,@15                                             0275
*       ERRBASE1=R9;                /* SAVE BASE REGISTER FOR      0276
*                                      RECOVERY                      */
         ST    R9,ERRBASE1(,R3)                                    0276
*       SVCDMPNM=CSECTNAM;          /* RESTORE CSECT NAME FOR      0277
*                                      RECOVERY                      */
         MVC   SVCDMPNM(8,R7),@CC03120                             0277
*     END;                                                         0278
*RTYDMP40:                                                         0279
*   ERRRETRY=ADDR(RTYDMP50);        /* NEXT RETRY LOC ADDRESS        */
@RF00092 DS    0H                                                  0279
RTYDMP40 LA    @12,RTYDMP50                                        0279
         ST    @12,ERRRETRY(,R3)                                   0279
*   IF RTCTSDND='1'B&               /* IF SVC DUMP SET SYS NON DISP  */
*       SDUABEND='0'B THEN          /* AND NOT A SYSMDUMP REQUEST  0280
*                                                            @G33SPHD*/
         L     @12,CVTPTR                                          0280
         L     @12,CVTRTMCT(,@12)                                  0280
         TM    RTCTSDND(@12),B'01000000'                           0280
         BNO   @RF00280                                            0280
         L     @12,SDWSDPL(,R7)                                    0280
         TM    SDUABEND(@12),B'01000000'                           0280
         BNZ   @RF00280                                            0280
*     DO;                                                          0281
*       GEN REFS(PSALITA);                                         0282
GENLOCKA SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        X
               RELATED=(SVCDUMP,IEAVTSDG(FRELOCKA))
*       CALL SETSDISP;              /* SET SYSTEM DISP AND NOTIFY SRM*/
         BAL   @14,SETSDISP                                        0283
*       GEN REFS(PSALITA);                                         0284
FRELOCKA SETLOCK RELEASE,TYPE=LOCAL,                                   X
               RELATED=(SVCDUMP,IEAVTSDG(GETLOCKA))
*     END;                                                         0285
*RTYDMP50:                                                         0286
*   ERRRETRY=ADDR(RTYENDMP);        /* NEXT RETRY LOCATION ADDRESS   */
@RF00280 DS    0H                                                  0286
RTYDMP50 LA    @12,RTYENDMP                                        0286
         ST    @12,ERRRETRY(,R3)                                   0286
*   IF ERRENDMP='0'B THEN           /* IF NO ERRORS FOUND SO FAR     */
         TM    ERRENDMP(R3),B'01000000'                            0287
         BNZ   @RF00287                                            0287
*     DO;                                                          0288
*       RANGEPTR=NUCADDR;           /* POINT TO NUCLEUS ADDRESSES    */
         L     @12,NUCADDR(,R7)                                    0289
         ST    @12,RANGEPTR(,R7)                                   0289
*       R13=ADDR(SDWRGSV2);         /* GET SAVE AREA ADDRESS @G33VPHD*/
         LA    R13,SDWRGSV2(,R7)                                   0290
*       CALL IEAVTSDO;              /* PUT OUT NUCLEUS STORAGE AREA  */
         L     @15,@CV03144                                        0291
         BALR  @14,@15                                             0291
*     END;                                                         0292
*RTYENDMP:                                                         0293
*   R13=ADDR(SDWRGSV1);             /* REUSE FIRST SAVE AREA @G33VPHD*/
@RF00287 DS    0H                                                  0293
RTYENDMP LA    R13,SDWRGSV1(,R7)                                   0293
*   RETURN;                                                        0294
@EL00001 DS    0H                                                  0294
@EF00001 DS    0H                                                  0294
@ER00001 LM    @14,@12,12(@13)                                     0294
         BR    @14                                                 0294
*   RFY                                                            0295
*     R14 RSTD;                     /* RESTRICT RETURN ADDRESS REG   */
*                                                                  0296
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SEGMENT WILL FREE PAGES FIXED WHILE THE SALLOC LOCK WAS  */
*   /* HELD. INPUT: LOCAL LOCK HELD, ANY OTHER LOCK (SALLOC OR       */
*   /* HIGHER) CANNOT BE HELD OUTPUT: PAGES FREED CALLED BY: SDGLOBAL*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0296
*SDPGFREE:                                                         0296
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0296
SDPGFREE DS    0H                                                  0297
*   PGFRRETA=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,PGFRRETA(,R7)                                   0297
*   ERRSDFIX='0'B;                  /* INDICATE SVCDUMP PAGES FREED  */
         NI    ERRSDFIX(R3),B'11011111'                            0298
*   RFY                                                            0299
*    (R0,                                                          0299
*     R1,                                                          0299
*     R2,                                                          0299
*     R4) RSTD;                                                    0299
*   R0=NULL;                        /* NO ECB ADDRESS                */
         SLR   R0,R0                                               0300
*   R1=ADDR(IEAVTSDG)×PGFREESW;     /* BEGIN ADDRESS TO FREE         */
         L     R1,@CA00028                                         0301
         O     R1,@CF03116                                         0301
*   R2=NULL;                        /* NO ENDING ADDRESS NEEDED      */
         SLR   R2,R2                                               0302
*   R4=PSATOLD;                     /* CURRENT TCB ADDRESS           */
         L     R4,PSATOLD                                          0303
*   CALL PAGEFREE;                  /* FREE SVC DUMP PAGES           */
         L     @12,CVTPTR                                          0304
         L     @12,PVTPTR(,@12)                                    0304
         L     @15,PVTPSIB(,@12)                                   0304
         BALR  @14,@15                                             0304
*   IF ERRWKFIX='1'B THEN           /* IF WORKAREA PAGES FIXED       */
         TM    ERRWKFIX(R3),B'00010000'                            0305
         BNO   @RF00305                                            0305
*     DO;                                                          0306
*       ERRWKFIX='0'B;              /* INDICATE WKAREA PAGES FREED   */
         NI    ERRWKFIX(R3),B'11101111'                            0307
*       IF SDUABEND='0'B THEN       /* IF THIS IS NOT A SYSMDUMP   0308
*                                      REQUEST                       */
         L     @15,SDWSDPL(,R7)                                    0308
         TM    SDUABEND(@15),B'01000000'                           0308
         BNZ   @RF00308                                            0308
*         DO;                       /* FREE WORK AREA ASSUMING ONE 0309
*                                      PIECE                         */
*           R1=R7×PGFREESW;         /* START ADDR TO FREE            */
         LR    R1,R7                                               0310
         O     R1,@CF03116                                         0310
*           R2=(R7+SDWORKLN)×PGLASTSW;/* END ADDR TO FREE            */
         LR    R2,R7                                               0311
         AL    R2,SDWORKLN                                         0311
         O     R2,@CF03101                                         0311
*           CALL PAGEFREE;          /* FREE WORKAREA PAGES           */
         L     @12,CVTPTR                                          0312
         L     @12,PVTPTR(,@12)                                    0312
         L     @15,PVTPSIB(,@12)                                   0312
         BALR  @14,@15                                             0312
*         END;                      /* END OF FREE WORK AREA IN ONE
*                                      PIECE                         */
*       ELSE                                                       0314
*         DO;                       /* IS A SYSMDUMP REQUEST SO    0314
*                                      PAGEFREE IN 2 PIECES          */
         B     @RC00308                                            0314
@RF00308 DS    0H                                                  0315
*           R1=R7×PGFREESW;         /* GET START ADDRESS TO FREE     */
         LR    R1,R7                                               0315
         O     R1,@CF03116                                         0315
*           R2=(R7+LENGTH(SDCNTRL))×PGLASTSW;/* END ADDRESS TO FREE  */
         LA    R2,432                                              0316
         ALR   R2,R7                                               0316
         O     R2,@CF03101                                         0316
*           CALL PAGEFREE;          /* FREE 1ST WORKAREA PAGE        */
         L     @12,CVTPTR                                          0317
         L     @12,PVTPTR(,@12)                                    0317
         L     @15,PVTPSIB(,@12)                                   0317
         BALR  @14,@15                                             0317
*           R1=SDSMBUFF×PGFREESW;   /* GET START ADDRESS TO FREE     */
         L     @15,SDSMBUFF(,R7)                                   0318
         LR    R1,@15                                              0318
         O     R1,@CF03116                                         0318
*           R2=(SDSMBUFF+LENGTH(SDBUFFER))×PGLASTSW;/* END ADDRESS TO
*                                      FREE                          */
         AL    @15,@CF03032                                        0319
         O     @15,@CF03101                                        0319
         LR    R2,@15                                              0319
*           CALL PAGEFREE;          /* FREE 1ST WORKAREA PAGE        */
         L     @12,CVTPTR                                          0320
         L     @12,PVTPTR(,@12)                                    0320
         L     @15,PVTPSIB(,@12)                                   0320
         BALR  @14,@15                                             0320
*         END;                      /* END OF FREE WORK AREA IN TWO
*                                      PIECES                        */
*     END;                                                         0322
*   ELSE                                                           0323
*     ;                                                            0323
@RF00305 DS    0H                                                  0324
*   RFY                                                            0324
*    (R0,                                                          0324
*     R1,                                                          0324
*     R2,                                                          0324
*     R4) UNRSTD;                                                  0324
@RC00305 DS    0H                                                  0325
*   R14=PGFRRETA;                   /* RESTORE RETURN ADDRESS        */
         L     R14,PGFRRETA(,R7)                                   0325
*   END SDPGFREE;                                                  0326
@EL00002 DS    0H                                                  0326
@EF00002 DS    0H                                                  0326
@ER00002 BR    @14                                                 0326
*                                                                  0327
*/********************************************************************/
*/*   THIS SEGMENT WILL ADD CALLER SUPPLIED ADDRESS RANGES TO THE    */
*/*   ADDRESS RANGE TABLE.  USER RANGES WILL BE ADDED TO THE PART    */
*/*   OF THE ADDRESS RANGE TABLE WHERE THEY BEST BELONG.  ADDRESS    */
*/*   RANGES WHICH HAVE A START ADDRESS GREATER THAN THE ADDRESS     */
*/*   OF THE END OF THE PRIVATE AREA WILL BE ADDED TO THE GLOBAL     */
*/*   PART OF THE ADDRESS RANGE TABLE.  ADDRESS RANGES WHICH HAVE    */
*/*   A START ADDRESS WHICH LIES IN THE PRIVATE AREA WILL BE ADDED   */
*/*   TO THE LOCAL PART OF THE ADDRESS RANGE TABLE.  ADDRESS         */
*/*   RANGES WHICH HAVE A START ADDRESS WHICH IS LESS THAN THE       */
*/*   ADDRESS OF THE BEGINNING OF THE PRIVATE AREA WILL BE ADDED     */
*/*   TO THE NUCLEUS PART OF THE ADDRESS RANGE TABLE.  THIS          */
*/*   ROUTINE WILL BE CALLED THREE TIMES, ONCE FOR EACH PART OF      */
*/*   THE ADDRESS RANGE TABLE, IF THE CALLER SUPPLIED STORAGE        */
*/*   ADDRESSES.                                                     */
*/*                                                                  */
*/*   INPUT: USER STORAGE RANGES, USESTART CONTAINS LOW ADDRESS      */
*/*         TO COMPARE AGAINST USER STORAGE RANGE START ADDRESS FOR  */
*/*         ADDING THE USER STORAGE RANGE TO THE ADDRESS RANGE TABLE,*/
*/*         USEEND CONTAINS HIGH ADDRESS TO COMPARE AGAINST USER     */
*/*         STORAGE START ADDRESS                                    */
*/*                                                                  */
*/*   OUTPUT: USER STORAGE RANGES ADDED TO ADDRESS RANGE TABLE       */
*/*                                                                  */
*/*   CALLED BY: SDGLOBAL,SDNUC                                      */
*/********************************************************************/
*                                                                  0327
*USERNGES:                                                         0327
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0327
USERNGES DS    0H                                                  0328
*   USERRETA=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,USERRETA(,R7)                                   0328
*   RFY                                                            0329
*     R10 RSTD;                                                    0329
*   R10=SDUSTORA;                   /* ADDR OF USER STOR ADDRESSES   */
         L     @15,SDWSDPL(,R7)                                    0330
         L     R10,SDUSTORA(,@15)                                  0330
*   DO WHILE R10^=NULL;             /* SEARCH USER STORAGE ADDRESSES
*                                      FOR INSERTION IN CURRENT PART
*                                      OF ADDRESS RANGE TABLE        */
         B     @DE00331                                            0331
@DL00331 DS    0H                                                  0332
*     IF R10->STARTADR>=USESTART&   /* IF USER START ADDR LIES IN    */
*         R10->STARTADR<USEEND THEN /* CURRENT STORAGE AREA          */
         L     @15,STARTADR(,R10)                                  0332
         C     @15,USESTART(,R7)                                   0332
         BL    @RF00332                                            0332
         L     @12,USEEND(,R7)                                     0332
         CR    @15,@12                                             0332
         BNL   @RF00332                                            0332
*       DO;                                                        0333
*         STARTADR=R10->STARTADR;   /* START ADDR, ADD TO TABLE      */
         L     @11,RANGEPTR(,R7)                                   0334
         ST    @15,STARTADR(,@11)                                  0334
*         IF(R10->ENDADDR&ENDPART)  /* IF ENDING ADDRESS     @ZA29803*/
*             <=USEEND THEN         /* ALSO IN THIS STORAGE AREA   0335
*                                                            @ZA29803*/
         L     @15,ENDADDR(,R10)                                   0335
         N     @15,@CF03099                                        0335
         CR    @15,@12                                             0335
         BH    @RF00335                                            0335
*           ENDADDR=(R10->ENDADDR&  /* USE CALLER SUPPLIED   @ZA29803*/
*               ENDPART);           /* END ADDRESS           @ZA29803*/
         ST    @15,ENDADDR(,@11)                                   0336
*         ELSE                                                     0337
*           ENDADDR=USEEND;         /* ENDING ADDRESS NOT IN RANGE SO
*                                      USE STORAGE AREA END ADDRESS
*                                      FOR NOW                       */
         B     @RC00335                                            0337
@RF00335 L     @15,RANGEPTR(,R7)                                   0337
         L     @12,USEEND(,R7)                                     0337
         ST    @12,ENDADDR(,@15)                                   0337
*         CALL SDADDADR;            /* ADD THIS RANGE TO ADDRESS   0338
*                                      RANGE TABLE                   */
@RC00335 BAL   @14,SDADDADR                                        0338
*       END;                                                       0339
*     ELSE                          /* START ADDRESS IS NOT IN THIS
*                                      STORAGE AREA                  */
*       IF R10->STARTADR<USESTART&  /* IF PART OF RANGE IS IN        */
*           (R10->ENDADDR&ENDPART)>=USESTART THEN/*          @ZA29803
*                                      THIS STORAGE AREA     @ZA29803*/
         B     @RC00332                                            0340
@RF00332 L     @15,USESTART(,R7)                                   0340
         C     @15,STARTADR(,R10)                                  0340
         BNH   @RF00340                                            0340
         L     @12,ENDADDR(,R10)                                   0340
         N     @12,@CF03099                                        0340
         CR    @12,@15                                             0340
         BL    @RF00340                                            0340
*         DO;                       /* PUT THIS PART OF CALLER RANGE
*                                      THE ADDRESS RANGE TABLE       */
*           STARTADR=USESTART;      /* START ADDRESS IS STORAGE ARE
*                                      START ADDRESS                 */
         L     @11,RANGEPTR(,R7)                                   0342
         ST    @15,STARTADR(,@11)                                  0342
*           IF(R10->ENDADDR&ENDPART)/* IF END ADDR IN        @ZA29803*/
*               <=USEEND THEN       /* IN RANGE              @ZA29803*/
         C     @12,USEEND(,R7)                                     0343
         BH    @RF00343                                            0343
*             ENDADDR=(R10->ENDADDR /* USE CALLERS END       @ZA29803*/
*                 &ENDPART);        /* ADDRESS               @ZA29803*/
         ST    @12,ENDADDR(,@11)                                   0344
*           ELSE                                                   0345
*             ENDADDR=USEEND;       /* END ADDR NOT IN RANGE USE   0345
*                                      RANGE END ADDRESS             */
         B     @RC00343                                            0345
@RF00343 L     @15,RANGEPTR(,R7)                                   0345
         L     @12,USEEND(,R7)                                     0345
         ST    @12,ENDADDR(,@15)                                   0345
*           CALL SDADDADR;          /* ADD THIS RANGE TO RANGE TABLE */
@RC00343 BAL   @14,SDADDADR                                        0346
*         END;                      /* END ADD PART OF CALLERS RANGE
*                                      TO TABLE                      */
*     IF FLGRTFUL='1'B×             /* IF ADDR RANGE TABLE FULL OR   */
*         R10->LASTRNGE='1'B THEN   /* END OF USER STOR ADDRESSES    */
@RF00340 DS    0H                                                  0348
@RC00332 TM    FLGRTFUL(R7),B'10000000'                            0348
         BO    @RT00348                                            0348
         TM    LASTRNGE(R10),B'10000000'                           0348
         BNO   @RF00348                                            0348
@RT00348 DS    0H                                                  0349
*       R10=NULL;                   /* END SEARCH OF USER STOR ADDR  */
         SLR   R10,R10                                             0349
*     ELSE                                                         0350
*       R10=R10+LEN1ADRN;           /* ADDR OF NEXT USER STOR RANGE  */
         B     @RC00348                                            0350
@RF00348 AL    R10,@CF00041                                        0350
*   END;                            /* END SEARCH ALL USER STORAGE 0351
*                                      RANGES                        */
@RC00348 DS    0H                                                  0351
@DE00331 LTR   R10,R10                                             0351
         BNZ   @DL00331                                            0351
*   R14=USERRETA;                   /* RESTORE RETURN ADDRESS        */
         L     R14,USERRETA(,R7)                                   0352
*   END USERNGES;                                                  0353
@EL00003 DS    0H                                                  0353
@EF00003 DS    0H                                                  0353
@ER00003 BR    @14                                                 0353
*                                                                  0354
*/********************************************************************/
*/*   THIS SEGMENT WILL SET THE SYSTEM DISPATCHABLE BY BRANCH        */
*/*   ENTRY TO STATUS AND INFORM THE SYS RES MGR THAT THE ADDRESS    */
*/*   SPACE CAN BE SWAPPED.                                          */
*/*                                                                  */
*/*   INPUT: LOCAL LOCK IS HELD                                      */
*/*                                                                  */
*/*   OUTPUT: SYSTEM IS SET DISPATCHABLE, ADDRESS SPACE CAN BE       */
*/*           SWAPPED                                                */
*/*                                                                  */
*/*   CALLED BY: SDUMP                                               */
*/********************************************************************/
*                                                                  0354
*SETSDISP:                                                         0354
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0354
SETSDISP DS    0H                                                  0355
*   DISPRETA=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,DISPRETA(,R7)                                   0355
*   RFY                                                            0356
*    (R0,                                                          0356
*     R1) RSTD;                                                    0356
*   R0=SYSDISP;                     /* SYSTEM DISPATCHABILITY CODE   */
         LA    R0,9                                                0357
*   R1=NULL×HIGHBIT1;               /* NO TCB ADDR, RESET FUNCTION   */
         L     R1,@CF03228                                         0358
*   R13=SDISPFLG;                   /* SVC DUMP DISPATCHABILITY FLG  */
         L     R13,@CF03106                                        0359
*   CALL STATUS;                    /* SET SYSTEM DISPATCHABLE       */
         L     @12,CVTPTR                                          0360
         L     @12,SCVTSPTR(,@12)                                  0360
         L     @15,SCVTSTAT(,@12)                                  0360
         BALR  @14,@15                                             0360
*   RTCTSDND='0'B;                  /* INDICATE SYSTEM IS          0361
*                                      DISPATCHABLE          @ZA04148*/
         L     @15,CVTPTR                                          0361
         L     @15,CVTRTMCT(,@15)                                  0361
         NI    RTCTSDND(@15),B'10111111'                           0361
*   IF RTCTSDFX='1'B THEN           /* ALLOW FOR ASYNCRONOUS @ZA27434*/
         TM    RTCTSDFX(@15),B'00000001'                           0362
         BNO   @RF00362                                            0362
*     DO;                           /* INTERRUPTS.           @ZA27434*/
*       PSATOLD->TCBFX='0'B;        /*                       @ZA27434*/
         L     @12,PSATOLD                                         0364
         NI    TCBFX(@12),B'11111110'                              0364
*       RTCTSDFX='0'B;              /*                       @ZA27434*/
         NI    RTCTSDFX(@15),B'11111110'                           0365
*     END;                          /*                       @ZA27434*/
*   ELSE                                                           0367
*     ;                             /*                       @ZA27434*/
@RF00362 DS    0H                                                  0368
*   RFY                                                            0368
*    (R0,                                                          0368
*     R1) UNRSTD;                                                  0368
*   R13=ADDR(SDWRGSV2);             /* SAVE AREA FOR SYS RES MGR     */
         LA    R13,SDWRGSV2(,R7)                                   0369
*   GEN REFS(CVT,CVTOPTE)(SYSEVENT OKSWAP,ENTRY=BRANCH);/* TELL SYS
*                                      RESOURCE MNGR OK TO SWAP A. S.*/
         SYSEVENT OKSWAP,ENTRY=BRANCH
*   R14=DISPRETA;                   /* RESTORE RETURN ADDRESS        */
         L     R14,DISPRETA(,R7)                                   0371
*   END SETSDISP;                                                  0372
@EL00004 DS    0H                                                  0372
@EF00004 DS    0H                                                  0372
@ER00004 BR    @14                                                 0372
*                                                                  0373
*/********************************************************************/
*/*   THIS SEGMENT WILL CONVERT SUBPOOLS TO ADDRESS RANGES AND       */
*/*   CALL SDADDADR TO INSERT EACH ADDRESS RANGE INTO THE ADDRESS    */
*/*   RANGE TABLE.  SUBPOOLS ARE DEFINED BY VSM CONTROL BLOCKS       */
*/*   SPQE AND DQE.                                                  */
*/*                                                                  */
*/*   INPUT: SPQEADDR CONTAINS ADDRESS OF FIRST SPQE ON SPQE CHAIN   */
*/*   TO SEARCH                                                      */
*/*                                                                  */
*/*   OUTPUT: ADDRESS RANGES ADDED TO ADDRESS RANGE TABLE            */
*/*                                                                  */
*/*   CALLED BY: SDGLOBAL,SDLOCAL,SDTCB                              */
*/********************************************************************/
*                                                                  0373
*SDSPQE:                                                           0373
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0373
SDSPQE   DS    0H                                                  0374
*   SPQERETA=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,SPQERETA(,R7)                                   0374
*   RFY                                                            0375
*    (R10,                                                         0375
*     R11,                                                         0375
*     R4,                                                          0375
*     R5) RSTD;                                                    0375
*   RFY                                                            0376
*     SPQESECT BASED(R4);                                          0376
*   RFY                                                            0377
*     DQESECT BASED(R5);                                           0377
*   R4=SPQEADDR;                    /* ADDR OF FIRST SPQE ON CHAIN   */
*                                                                  0378
         L     R4,SPQEADDR(,R7)                                    0378
*   /*****************************************************************/
*   /*                                                               */
*   /* SEARCH ALL SPQE'S FOR THIS SUBPOOL FINDING STORAGE TO DUMP    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0379
*   DO WHILE R4^=NULL;              /* SEARCH ALL SPQE ON CHAIN      */
         B     @DE00379                                            0379
@DL00379 DS    0H                                                  0380
*     R5=SPDQEAD;                   /* ADDRESS OF FIRST DQE OFF SPQE */
*                                                                  0380
         L     R5,SPDQEAD(,R4)                                     0380
*     /***************************************************************/
*     /*                                                             */
*     /* SEARCH EACH DQE AND PUT ADDRESSES IN THE ADDRESS RANGE TABLE*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0381
*     DO WHILE R5^=NULL;            /* SEARCH ALL DQES HUNG FROM SPQE*/
         B     @DE00381                                            0381
@DL00381 DS    0H                                                  0382
*       STARTADR=DQEBLKAD;          /* START ADDRESS FOR RANGE       */
         L     @15,RANGEPTR(,R7)                                   0382
         L     @12,DQEBLKAD(,R5)                                   0382
         ST    @12,STARTADR(,@15)                                  0382
*       ENDADDR=STARTADR+DQELNTH;   /* END ADDRESS FOR RANGE         */
         AL    @12,DQELNTH(,R5)                                    0383
         ST    @12,ENDADDR(,@15)                                   0383
*       CALL SDADDADR;              /* ADD RANGE TO ADDR RANGE TABLE */
         BAL   @14,SDADDADR                                        0384
*       IF FLGRTFUL='0'B THEN       /* IF RANGE TABLE NOT FULL,      */
         TM    FLGRTFUL(R7),B'10000000'                            0385
         BNZ   @RF00385                                            0385
*         R5=DQEPTR;                /* GET ADDRESS OF NEXT DQE       */
         L     R5,DQEPTR(,R5)                                      0386
*       ELSE                        /* RANGE TABLE FULL, END LOOP    */
*         R5=NULL;                  /* END DQE CHAIN SEARCH          */
         B     @RC00385                                            0387
@RF00385 SLR   R5,R5                                               0387
*     END;                          /* END SEARCH ALL DQES ON CHAIN  */
@RC00385 DS    0H                                                  0388
@DE00381 LTR   R5,R5                                               0388
         BNZ   @DL00381                                            0388
*     IF FLGRTFUL='0'B THEN         /* IF ADDR RANGE TABLE NOT FULL, */
         TM    FLGRTFUL(R7),B'10000000'                            0389
         BNZ   @RF00389                                            0389
*       R4=SPQEPTR;                 /* GET ADDRESS OF NEXT SPQE      */
         L     R4,SPQEPTR(,R4)                                     0390
*     ELSE                          /* RANGE TABLE FULL, END LOOP    */
*       R4=NULL;                    /* END SPQE CHAIN SEARCH         */
         B     @RC00389                                            0391
@RF00389 SLR   R4,R4                                               0391
*   END;                            /* END SEARCH ALL SPQES IN SUB 0392
*                                      POOL                          */
@RC00389 DS    0H                                                  0392
@DE00379 LTR   R4,R4                                               0392
         BNZ   @DL00379                                            0392
*   RFY                                                            0393
*    (SPQESECT,                                                    0393
*     DQESECT) BASED;                                              0393
*   RFY                                                            0394
*    (R10,                                                         0394
*     R11,                                                         0394
*     R4,                                                          0394
*     R5) UNRSTD;                                                  0394
*   R14=SPQERETA;                   /* RESTORE RETURN ADDRESS        */
         L     R14,SPQERETA(,R7)                                   0395
*   END SDSPQE;                                                    0396
@EL00005 DS    0H                                                  0396
@EF00005 DS    0H                                                  0396
@ER00005 BR    @14                                                 0396
*                                                                  0397
*/********************************************************************/
*/*   THIS SEGMENT WILL ADD AN ADDRESS RANGE TO THE ADDRESS RANGE    */
*/*   TABLE.  THE ADDRESSES TO BE ADDED ARE IN STARTADR AND          */
*/*   ENDADDR (IN THE ADDRESS RANGE TABLE).  IF THEIR IS ROOM IN     */
*/*   THE ADDRESS RANGE TABLE, THE START ADDRESS WILL BE ROUNDED     */
*/*   DOWN TO A 4K BOUNDARY AND THE END ADDRESS WILL BE ROUNDED UP   */
*/*   TO A 4K BOUNDARY.  IF THEIR IS NO MORE ROOM IN THE ADDRESS     */
*/*   RANGE TABLE, A RETURN CODE OF PARTDUMP WILL BE STORED IN       */
*/*   SDRETCOD.  IF THE START ADDRESS IS GREATER THAN THE END        */
*/*   ADDRESS A C0D ABEND WILL BE ISSUED.                            */
*/*                                                                  */
*/*   INPUT: RANGEPTR CONTAINS ADDRESS OF NEXT AVAILABLE SLOT IN     */
*/*   ADDRESS RANGE TABLE, ENDADRNT CONTAINS ADDRESS OF LAST SLOT    */
*/*   IN ADDRESS RANGE TABLE, STARTADR CONTAINS BEG ADDRESS OF       */
*/*   RANGE, ENDADDR CONTAINS END ADDRESS OF RANGE                   */
*/*                                                                  */
*/*   OUTPUT: RANGE ADDED TO ADDRESS RANGE TABLE, RANGEPTR           */
*/*   CONTAINS ADDRESS OF NEXT AVAILABLE SLOT OR RETURN CODE OF      */
*/*   PARTDUMP OR C0D ABEND                                          */
*/*                                                                  */
*/*   CALLED BY: SDALLPSA,USERNGES,SDSPQE,SDGLOBAL,SDNUC,            */
*/*                                                                  */
*/********************************************************************/
*                                                                  0397
*SDADDADR:                                                         0397
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0397
SDADDADR DS    0H                                                  0398
*   RFY                                                            0398
*    (R10,                                                         0398
*     R11,                                                         0398
*     R4,                                                          0398
*     R5,                                                          0398
*     R14) RSTD;                                                   0398
*   ADDADRWA=R10;                   /* SAVE WORK REGISTER            */
         ST    R10,ADDADRWA(,R7)                                   0399
*   ADDADRWB=R11;                   /* SAVE WORK REGISTER            */
         ST    R11,ADDADRWB(,R7)                                   0400
*   ADDADRWC=R4;                    /* SAVE WORK REGISTER            */
         ST    R4,ADDADRWC(,R7)                                    0401
*   ADDADRWD=R5;                    /* SAVE WORK REGISTER            */
         ST    R5,ADDADRWD(,R7)                                    0402
*   RFY                                                            0403
*    (R10,                                                         0403
*     R11,                                                         0403
*     R4,                                                          0403
*     R5) UNRSTD;                                                  0403
*   IF RANGEPTR<(ENDADRNT-LEN1ADRN) THEN/* IF RANGE TABLE NOT FULL   */
         L     @15,RANGEPTR(,R7)                                   0404
         L     @12,ENDADRNT(,R7)                                   0404
         SL    @12,@CF00041                                        0404
         CR    @15,@12                                             0404
         BNL   @RF00404                                            0404
*     DO;                                                          0405
*       STARTADR=STARTADR&FOURKBDY; /* ROUND START ADDR DOWN-4K BDY  */
         L     @12,@CF03112                                        0406
         L     @08,STARTADR(,@15)                                  0406
         NR    @08,@12                                             0406
         ST    @08,STARTADR(,@15)                                  0406
*       ENDADDR=ENDADDR&HIGHBIT0;   /* END ADDRESS IS AN ADDRESS     */
         L     @08,ENDADDR(,@15)                                   0407
         N     @08,@CF03099                                        0407
         ST    @08,ENDADDR(,@15)                                   0407
*       IF(ENDADDR//FOURK)^=NULL THEN/* IF END ADDR NOT ON 4K BDY,   */
         LR    @00,@08                                             0408
         SRDA  @00,32                                              0408
         D     @00,@CF00078                                        0408
         LTR   @00,@00                                             0408
         BZ    @RF00408                                            0408
*         ENDADDR=(ENDADDR+FOURK)&FOURKBDY;/* ROUND UP TO 4K BDY     */
         AL    @08,@CF00078                                        0409
         NR    @08,@12                                             0409
         ST    @08,ENDADDR(,@15)                                   0409
*       ELSE                                                       0410
*         ;                                                        0410
@RF00408 DS    0H                                                  0411
*       IF STARTADR>ENDADDR THEN    /* ERROR IF START > END          */
         L     @15,RANGEPTR(,R7)                                   0411
         CLC   STARTADR(4,@15),ENDADDR(@15)                        0411
         BNH   @RF00411                                            0411
*         GEN(ABEND X'C0D',DUMP,,SYSTEM);                          0412
         ABEND X'C0D',DUMP,,SYSTEM
*       ELSE                                                       0413
*         RANGEPTR=RANGEPTR+LEN1ADRN;/* ADDR OF NEXT SLOT IN TAB     */
         B     @RC00411                                            0413
@RF00411 LA    @15,8                                               0413
         AL    @15,RANGEPTR(,R7)                                   0413
         ST    @15,RANGEPTR(,R7)                                   0413
*     END;                                                         0414
*   ELSE                            /* IF ADDRESS RANGE TABLE FULL,  */
*     DO;                                                          0415
         B     @RC00404                                            0415
@RF00404 DS    0H                                                  0416
*       FLGRTFUL='1'B;              /* IND ADDRESS RANGE TABLE FULL  */
         OI    FLGRTFUL(R7),B'10000000'                            0416
*       SDRETCOD=PARTDUMP;          /* GIVE PERMANENT PARTIAL DUMP 0417
*                                                            @G33VPHD*/
         MVC   SDRETCOD(4,R7),@CF00054                             0417
*     END;                                                         0418
*   RFY                                                            0419
*    (R10,                                                         0419
*     R11,                                                         0419
*     R4,                                                          0419
*     R5) RSTD;                                                    0419
@RC00404 DS    0H                                                  0420
*   R10=ADDADRWA;                   /* RESTORE WORK REGISTER         */
         L     R10,ADDADRWA(,R7)                                   0420
*   R11=ADDADRWB;                   /* RESTORE WORK REGISTER         */
         L     R11,ADDADRWB(,R7)                                   0421
*   R4=ADDADRWC;                    /* RESTORE WORK REGISTER         */
         L     R4,ADDADRWC(,R7)                                    0422
*   R5=ADDADRWD;                    /* RESTORE WORK REGISTER         */
         L     R5,ADDADRWD(,R7)                                    0423
*   RFY                                                            0424
*    (R10,                                                         0424
*     R11,                                                         0424
*     R4,                                                          0424
*     R5,                                                          0424
*     R14) UNRSTD;                                                 0424
*   END SDADDADR;                                                  0425
@EL00006 DS    0H                                                  0425
@EF00006 DS    0H                                                  0425
@ER00006 BR    @14                                                 0425
*                                                                  0426
*/********************************************************************/
*/*   THIS SEGMENT WILL ARRANGE A PART OF THE ADDRESS RANGE TABLE.   */
*/*   THE ADDRESS RANGES WILL BE PLACED IN ASCENDING ORDER.          */
*/*   DUPLICATE RANGES WILL BE DELETED.  OVERLAPPING RANGES WILL     */
*/*   BE COMBINED INTO ONE RANGE.                                    */
*/*                                                                  */
*/*   INPUT: RANGEPTR CONTAINS ADDRESS OF FIRST ADDRESS RANGE IN     */
*/*   THE PART OF TABLE TO BE ARRANGED, LAST RANGE IN THE PART OF    */
*/*   THE TABLE IS INDICATED BY HAVING A STARTADR OF ENDPART         */
*/*   AND AN ENDADDR OF NULL WITH LASTRNGE FLAG ON.                  */
*/*                                                                  */
*/*   OUTPUT: COMPRESSED, ASCENDING ORDERED PART OF ADDRESS RANGE    */
*/*   TABLE WITH RANGEPTR CONTAINING ADDRESS OF LAST RANGE IN THIS   */
*/*   PART OF THE ADDRESS RANGE TABLE(ENDPART ADDRESS RANGE).        */
*/*   FLGRTFUL='1'B IF TABLE FULL ELSE FLGRTFUL='0'B.                */
*/*                                                                  */
*/*   CALLED BY: SDGLOBAL,SDNUC                                      */
*/********************************************************************/
*                                                                  0426
*ARRANGE:                                                          0426
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0426
ARRANGE  DS    0H                                                  0427
*   RFY                                                            0427
*    (R10,                                                         0427
*     R11,                                                         0427
*     R4) RSTD;                                                    0427
*                                                                  0427
*   /*****************************************************************/
*   /*                                                               */
*   /* PUT RANGES IN ASCENDING ORDER BY STARTADR WORKA - ADDRESS OF  */
*   /* CURRENT RANGE WORKB - ADDRESS OF NEXT RANGE WORKC - INDICATE A*/
*   /* SWITCH IN ORDER OF RANGES MADE                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0428
*   R4=ONE;                         /* INDICATE SWITCH-REG NON-ZERO  */
         LA    R4,1                                                0428
*   DO WHILE R4^=NULL;              /* PUT RANGES IN ASCEND ORDER    */
         B     @DE00429                                            0429
@DL00429 DS    0H                                                  0430
*     R10=RANGEPTR;                 /* ADDR OF FIRST CURRENT RANGE   */
         L     R10,RANGEPTR(,R7)                                   0430
*     R11=R10+LEN1ADRN;             /* ADDRESS OF NEXT RANGE         */
         LA    R11,8                                               0431
         ALR   R11,R10                                             0431
*     R4=NULL;                      /* NO SWITCH MADE                */
         SLR   R4,R4                                               0432
*     DO WHILE R10->LASTRNGE='0'B;  /* CHECK ALL RANGES IN THIS PART */
         B     @DE00433                                            0433
@DL00433 DS    0H                                                  0434
*       IF R11->STARTADR<           /* IF NEXT START ADDR LESS THAN  */
*           R10->STARTADR THEN      /* CURRENT START ADDRESS,        */
         CLC   STARTADR(4,R11),STARTADR(R10)                       0434
         BNL   @RF00434                                            0434
*         DO;                       /* SWITCH RANGES                 */
*           R10->STORANGE=R10->STORANGE&&R11->STORANGE;            0436
         XC    STORANGE(8,R10),STORANGE(R11)                       0436
*           R11->STORANGE=R11->STORANGE&&R10->STORANGE;            0437
         XC    STORANGE(8,R11),STORANGE(R10)                       0437
*           R10->STORANGE=R10->STORANGE&&R11->STORANGE;            0438
         XC    STORANGE(8,R10),STORANGE(R11)                       0438
*           R4=ONE;                 /* INDICATE SWITCH MADE          */
         LA    R4,1                                                0439
*         END;                                                     0440
*       ELSE                                                       0441
*         ;                                                        0441
@RF00434 DS    0H                                                  0442
*       R10=R11;                    /* UPDATE CURRENT RANGE POINTER  */
         LR    R10,R11                                             0442
*       R11=R11+LEN1ADRN;           /* UPDATE NEXT RANGE POINTER     */
         AL    R11,@CF00041                                        0443
*     END;                                                         0444
@DE00433 TM    LASTRNGE(R10),B'10000000'                           0444
         BZ    @DL00433                                            0444
*   END;                                                           0445
*                                                                  0445
@DE00429 LTR   R4,R4                                               0445
         BNZ   @DL00429                                            0445
*   /*****************************************************************/
*   /*                                                               */
*   /* REMOVE DUPLICATE RANGES, COMBINE OVERLAPPING RANGES. DELETED  */
*   /* RANGES WILL HAVE A ZEROED ENTRY IN THE TABLE. WORKA - ADDRESS */
*   /* OF CURRENT RANGE WORKB - ADDRESS OF NEXT RANGE                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0446
*   R10=RANGEPTR;                   /* ADDR OF FIRST CURRENT RANGE   */
         L     R10,RANGEPTR(,R7)                                   0446
*   R11=R10+LEN1ADRN;               /* ADDRESS OF NEXT RANGE         */
         LA    R11,8                                               0447
         ALR   R11,R10                                             0447
*   DO WHILE R10->LASTRNGE='0'B;    /* CHECK ALL RNGES IN THIS PART  */
         B     @DE00448                                            0448
@DL00448 DS    0H                                                  0449
*     IF R11->STARTADR<=            /* IF NEXT RANGE OVERLAPS CURR   */
*         R10->ENDADDR THEN                                        0449
         L     @12,ENDADDR(,R10)                                   0449
         C     @12,STARTADR(,R11)                                  0449
         BL    @RF00449                                            0449
*       DO;                         /* COMBINE RANGES                */
*         IF R11->ENDADDR>          /* IF NEXT RANGE ENDS AFTER      */
*             R10->ENDADDR THEN     /* CURRENT RANGE                 */
         L     @08,ENDADDR(,R11)                                   0451
         CR    @08,@12                                             0451
         BNH   @RF00451                                            0451
*           R10->ENDADDR=R11->ENDADDR;/* EXTEND CURR TO INCLUDE NEXT
*                                      RANGE                         */
         ST    @08,ENDADDR(,R10)                                   0452
*         ELSE                                                     0453
*           ;                       /* ZERO OVERLAPPING RANGE        */
@RF00451 DS    0H                                                  0454
*         R11->STORANGE=R11->STORANGE&&R11->STORANGE;              0454
         XC    STORANGE(8,R11),STORANGE(R11)                       0454
*         R11=R11+LEN1ADRN;         /* UPDATE NEXT RANGE POINTER     */
         AL    R11,@CF00041                                        0455
*       END;                                                       0456
*     ELSE                                                         0457
*       DO;                                                        0457
         B     @RC00449                                            0457
@RF00449 DS    0H                                                  0458
*         R10=R11;                  /* UPDATE CURRENT RANGE POINTER  */
         LR    R10,R11                                             0458
*         R11=R11+LEN1ADRN;         /* UPDATE NEXT RANGE POINTER     */
         AL    R11,@CF00041                                        0459
*       END;                                                       0460
*   END;                                                           0461
*                                                                  0461
@RC00449 DS    0H                                                  0461
@DE00448 TM    LASTRNGE(R10),B'10000000'                           0461
         BZ    @DL00448                                            0461
*   /*****************************************************************/
*   /*                                                               */
*   /* COMPRESS CURRENT PART OF ADDRESS RANGE TABLE, REMOVING ZEROED */
*   /* ENTRIES WORKA - ADDRESS OF SLOT TO BE OVERLAID IN CURRENT PART*/
*   /* WORKB - ADDRESS OF SLOT TO MOVE TO WHERE WORKA POINTS         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0462
*   R10=RANGEPTR;                   /* ADDR OF FIRST RANGE IN PART   */
         L     R10,RANGEPTR(,R7)                                   0462
*   DO WHILE(R10->LASTRNGE='0'B);   /* FIND FIRST ZEROED SLOT        */
         B     @DE00463                                            0463
@DL00463 DS    0H                                                  0464
*     IF R10->ENDADDR^=NULL THEN    /* IF SLOT NOT ZEROED,           */
         L     @12,ENDADDR(,R10)                                   0464
         LTR   @12,@12                                             0464
         BZ    @RF00464                                            0464
*       R10=R10+LEN1ADRN;           /* POINT TO NEXT SLOT            */
         AL    R10,@CF00041                                        0465
*     ELSE                          /* FOUND FIRST ZEROED SLOT       */
*       DO;                                                        0466
         B     @RC00464                                            0466
@RF00464 DS    0H                                                  0467
*         R11=R10;                  /* ADDRESS OF FIRST ZEROED SLOT  */
         LR    R11,R10                                             0467
*         R10=R10-LEN1ADRN;         /* BACKUP ONE SLOT-LOOP CONTROL  */
         SL    R10,@CF00041                                        0468
*         DO WHILE(R10->LASTRNGE='0'B);/* REMOVE ZEROED SLOTS        */
         B     @DE00469                                            0469
@DL00469 DS    0H                                                  0470
*           R10=R10+LEN1ADRN;       /* ADDR OF SLOT TO FILL          */
         AL    R10,@CF00041                                        0470
*           DO WHILE(R11->ENDADDR=NULL);/* FIND NEXT ^ ZERO SLOT     */
         B     @DE00471                                            0471
@DL00471 DS    0H                                                  0472
*             R11=R11+LEN1ADRN;                                    0472
         AL    R11,@CF00041                                        0472
*           END;                                                   0473
@DE00471 L     @12,ENDADDR(,R11)                                   0473
         LTR   @12,@12                                             0473
         BZ    @DL00471                                            0473
*           R10->STORANGE=R11->STORANGE;/* MOVE GOOD RANGE UP        */
         MVC   STORANGE(8,R10),STORANGE(R11)                       0474
*           R11=R11+LEN1ADRN;                                      0475
         AL    R11,@CF00041                                        0475
*         END;                                                     0476
@DE00469 TM    LASTRNGE(R10),B'10000000'                           0476
         BZ    @DL00469                                            0476
*       END;                                                       0477
*   END;                                                           0478
@RC00464 DS    0H                                                  0478
@DE00463 TM    LASTRNGE(R10),B'10000000'                           0478
         BZ    @DL00463                                            0478
*   RANGEPTR=R10;                   /* ADDR OF LAST RANGE IN PART    */
         ST    R10,RANGEPTR(,R7)                                   0479
*   IF RANGEPTR<(ENDADRNT-LEN1ADRN) THEN/* IF ADDR RANGE TAB NOT FULL*/
         L     @12,RANGEPTR(,R7)                                   0480
         L     @08,ENDADRNT(,R7)                                   0480
         SL    @08,@CF00041                                        0480
         CR    @12,@08                                             0480
         BNL   @RF00480                                            0480
*     FLGRTFUL='0'B;                /* INDICATE MORE ROOM EXISTS     */
         NI    FLGRTFUL(R7),B'01111111'                            0481
*   RFY                                                            0482
*    (R10,                                                         0482
*     R11,                                                         0482
*     R4) UNRSTD;                                                  0482
*   END ARRANGE;                                                   0483
@EL00007 DS    0H                                                  0483
@EF00007 DS    0H                                                  0483
@ER00007 BR    @14                                                 0483
*   DCL                                                            0484
*     PATCHLOC FIXED(31) STATIC;                                   0484
*   GEN DATA DEFS(PATCHLOC);                                       0485
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0486
*     I031F FIXED(31) BASED,                                       0486
*     I031P PTR(31) BASED,                                         0486
*     I015F FIXED(15) BASED,                                       0486
*     I015P PTR(15) BASED,                                         0486
*     I008P PTR(8) BASED,                                          0486
*     I001C CHAR(1) BASED;                                         0486
*   END IEAVTSDG                                                   0487
*                                                                  0487
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (SDGSPEC )                                       */
*/*%INCLUDE SYSLIB  (SDGDCL  )                                       */
*/*%INCLUDE SYSLIB  (AMDDATA )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IHASCVT )                                       */
*/*%INCLUDE SYSLIB  (IHADQE  )                                       */
*/*%INCLUDE SYSLIB  (IHAGDA  )                                       */
*/*%INCLUDE SYSLIB  (IHAWSAVT)                                       */
*/*%INCLUDE SYSLIB  (IHASPQE )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHAASVT )                                       */
*/*%INCLUDE SYSLIB  (IHAPVT  )                                       */
*/*%INCLUDE SYSLIB  (IHAPCCAT)                                       */
*/*%INCLUDE SYSLIB  (IHAPCCA )                                       */
*/*%INCLUDE SYSLIB  (IHACSD  )                                       */
*/*%INCLUDE SYSLIB  (IHARTCT )                                       */
*/*%INCLUDE SYSLIB  (IHALCCA )                                       */
*/*%INCLUDE SYSLIB  (IHALCCAT)                                       */
*/*%INCLUDE SYSLIB  (IHASDUMP)                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IECDIOCM)                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (IHAASXB )                                       */
*/*%INCLUDE SYSLIB  (IHAESTA )                                       */
*/*%INCLUDE SYSLIB  (IHASDWRK)                                       */
*/*%INCLUDE SYSLIB  (IHASDERR)                                       */
*/*%INCLUDE SYSLIB  (SDGADDR )                                       */
*/*%INCLUDE SYSLIB  (SDPGFIX )                                       */
*/*%INCLUDE SYSLIB  (SDGLOBAL)                                       */
*/*%INCLUDE SYSLIB  (SDALLPSA)                                       */
*/*%INCLUDE SYSLIB  (SDNUC   )                                       */
*/*%INCLUDE SYSLIB  (SDPGFREE)                                       */
*/*%INCLUDE SYSLIB  (USERNGES)                                       */
*/*%INCLUDE SYSLIB  (SETSDISP)                                       */
*/*%INCLUDE SYSLIB  (SDSPQE  )                                       */
*/*%INCLUDE SYSLIB  (SDADDADR)                                       */
*/*%INCLUDE SYSLIB  (ARRANGE )                                       */
*                                                                  0487
*       ;                                                          0487
         B     @EL00001                                            0487
@DATA    DS    0H
@DATD    DSECT
         DS    0F
IEAVTSDG CSECT
         DS    0F
@CF00036 DC    F'1'
@CF00054 DC    F'4'
@CF00041 DC    F'8'
@CF01069 DC    F'16'
@CF00078 DC    F'4096'
@CF03032 DC    F'4104'
@CF03228 DC    F'-2147483648'
@CF03227 DC    F'-4096'
@CF03237 DC    F'-4'
@CF03099 DC    XL4'7FFFFFFF'
@CF03101 DC    XL4'80000000'
@CF03106 DC    XL4'00002000'
@CF03112 DC    XL4'7FFFF000'
@CF03116 DC    XL4'20000000'
@CF03236 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
IEAVTSDG CSECT
         NOPR  ((@ENDDATD-@DATD)*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CA00028 DC    A(IEAVTSDG)
@CV03142 DC    V(SDFRRRTN)
@CV03144 DC    V(IEAVTSDO)
         DS    0D
SDWORKLN DC    AL4(4544)
ADDRFRR  DC    VL4(SDFRRRTN)
@CC03120 DC    C'IEAVTSDG'
@CB03091 DC    X'FFFF'
IEAVTSDG CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
@ENDDATD EQU   *
IEAVTSDG CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R3       EQU   @03
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R4       EQU   @04
R5       EQU   @05
R7       EQU   @07
R9       EQU   @09
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
R14      EQU   @14
R12      EQU   @12
R15      EQU   @15
R6       EQU   @06
R8       EQU   @08
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
FLCTRACE EQU   PSA+84
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSALCCAV EQU   PSA+528
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
PSALSFCC EQU   PSA+1012
PRDINPUT EQU   0
PRDHDRID EQU   PRDINPUT
PRDASID  EQU   PRDINPUT+2
PRDREGS  EQU   PRDINPUT+120
PRDFPR   EQU   PRDREGS
CVTMAP   EQU   0
CVT      EQU   CVTMAP
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIXAVL EQU   CVTMAP+124
CVTNUCB  EQU   CVTMAP+128
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTABEND EQU   CVTMAP+200
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCBPTR   EQU   0
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFX    EQU   TCBFLGS1
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
SCVTSECT EQU   0
SCVTSTAT EQU   SCVTSECT+148
DQESECT  EQU   0
DQEPTR   EQU   DQESECT+4
DQEBLKAD EQU   DQESECT+8
DQELNTH  EQU   DQESECT+12
DQESEPTR EQU   0
GDA      EQU   0
GVSMFLAG EQU   GDA
GDAFLAGS EQU   GVSMFLAG
PASTRT   EQU   GDA+16
PASIZE   EQU   GDA+20
SQASPQEP EQU   GDA+24
VRPOSTQ  EQU   GDA+32
VRWAITQ  EQU   GDA+40
CSASPQEP EQU   GDA+52
WSAL     EQU   0
WSAG     EQU   0
WSAC     EQU   0
SPQESECT EQU   0
SPQEAD   EQU   SPQESECT
SPQEPTR  EQU   SPQEAD
SPDQEPTR EQU   SPQESECT+4
SPDQEAD  EQU   SPDQEPTR
SPQEFLGS EQU   SPQESECT+8
SPQESPTR EQU   0
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBRSM  EQU   ASCB+52
ASCBRSMF EQU   ASCBRSM
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBASXB EQU   ASCB+108
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
ASVT     EQU   0
ASVTFRST EQU   ASVT+524
ASVTENTY EQU   ASVT+528
PVT      EQU   0
PVTFLAG1 EQU   PVT
PVTFLAG2 EQU   PVT+1
PVTPSIB  EQU   PVT+72
PVTQS    EQU   PVT+304
PVTWSAX  EQU   PVT+344
PVTPCBQS EQU   PVT+1852
PCCAVT   EQU   0
PCCAT00P EQU   PCCAVT
PCCA     EQU   0
PCCAPSAV EQU   PCCA+24
PCCATMST EQU   PCCA+128
PCCATMFL EQU   PCCATMST
PCCATODE EQU   PCCATMST+1
PCCACCE  EQU   PCCATMST+2
PCCAINTE EQU   PCCATMST+3
PCCAEMSB EQU   PCCA+136
PCCAEMSI EQU   PCCAEMSB
PCCARISP EQU   PCCAEMSI
PCCAEMS2 EQU   PCCAEMSI+1
PCCAEMS3 EQU   PCCAEMSI+2
PCCARMSB EQU   PCCAEMSI+3
PCCAWERP EQU   PCCA+280
PCCACHPF EQU   PCCAWERP+4
PCCACHBL EQU   PCCAWERP+5
PCCACHVA EQU   PCCAWERP+6
PCCACHTS EQU   PCCAWERP+7
PCCACHS1 EQU   PCCA+288
PCCACHS2 EQU   PCCA+289
PCCACHRB EQU   PCCA+290
PCCACHF1 EQU   PCCA+308
PCCACHF2 EQU   PCCA+309
PCCACHF3 EQU   PCCA+310
PCCACHF4 EQU   PCCA+311
PCCAPTR  EQU   0
CSD      EQU   0
CSDCPUAL EQU   CSD+8
CSDSCWRD EQU   CSD+12
CSDSCFL1 EQU   CSDSCWRD
CSDSCFL2 EQU   CSDSCWRD+1
CSDSCFL3 EQU   CSDSCWRD+2
CSDSCFL4 EQU   CSDSCWRD+3
CSDFLAGS EQU   CSD+23
RTCT     EQU   0
RTCTPLIB EQU   RTCT+4
RTCTSAP  EQU   RTCTPLIB
RTCTSAP1 EQU   RTCTSAP
RTCTSAP2 EQU   RTCTSAP+1
RTCTSAP3 EQU   RTCTSAP+2
RTCTSUP  EQU   RTCTPLIB+4
RTCTSUP1 EQU   RTCTSUP
RTCTSUP2 EQU   RTCTSUP+1
RTCTSUP3 EQU   RTCTSUP+2
RTCTSYD  EQU   RTCTPLIB+8
RTCTSY01 EQU   RTCTSYD
RTCTSDDS EQU   RTCT+36
RTCTFLG  EQU   RTCTSDDS+3
RTCTSDPL EQU   RTCT+156
RTCTRFLG EQU   RTCT+176
RTCTERID EQU   RTCT+224
RTCTOPT  EQU   RTCT+236
RTCTASO  EQU   RTCT+252
RTCTASO1 EQU   RTCTASO
RTCTASO2 EQU   RTCTASO+1
RTCTSDI  EQU   RTCT+254
RTCTSDF  EQU   RTCT+264
RTCTSDF1 EQU   RTCTSDF
RTCTSDND EQU   RTCTSDF1
RTCTSDF2 EQU   RTCTSDF+1
RTCTSDFX EQU   RTCTSDF2
RTCTR2D2 EQU   RTCTSDF+2
RTCTC3PO EQU   RTCTSDF+3
RTCTSDF3 EQU   RTCT+268
RTCTSDF4 EQU   RTCTSDF3+2
RTCTMOPT EQU   0
RTCTMSAO EQU   RTCTMOPT
RTCTSASD EQU   RTCTMSAO
RTCTSAO1 EQU   RTCTSASD
RTCTSAO2 EQU   RTCTSASD+1
RTCTSAPD EQU   RTCTMSAO+2
RTCTSAO3 EQU   RTCTSAPD
RTCTSAO4 EQU   RTCTSAPD+1
RTCTSAMG EQU   RTCTSAO4
RTCTMSUO EQU   RTCTMOPT+4
RTCTSUSD EQU   RTCTMSUO
RTCTSUO1 EQU   RTCTSUSD
RTCTSUO2 EQU   RTCTSUSD+1
RTCTSUPD EQU   RTCTMSUO+2
RTCTSUO3 EQU   RTCTSUPD
RTCTSUO4 EQU   RTCTSUPD+1
RTCTSUMG EQU   RTCTSUO4
RTCTMSYO EQU   RTCTMOPT+8
RTCTSD01 EQU   RTCTMSYO
RTCTSD04 EQU   RTCTMSYO+3
RTCTSMMG EQU   RTCTSD04
RTCTMSDO EQU   RTCTMOPT+12
RTCTSDOD EQU   RTCTMSDO
RTCTSDO1 EQU   RTCTSDOD
RTCTSDO2 EQU   RTCTSDOD+1
RTCTSDO3 EQU   RTCTMSDO+2
RTCTSDO4 EQU   RTCTMSDO+3
RTCTSDMG EQU   RTCTSDO4
LCCA     EQU   0
LCCAIHRC EQU   LCCA+520
LCCAIHR1 EQU   LCCAIHRC
LCCAIHR2 EQU   LCCAIHRC+1
LCCAIHR3 EQU   LCCAIHRC+2
LCCAIHR4 EQU   LCCAIHRC+3
LCCASPIN EQU   LCCA+524
LCCASPN1 EQU   LCCASPIN
LCCASPN2 EQU   LCCASPIN+1
LCCASPN3 EQU   LCCASPIN+2
LCCASPN4 EQU   LCCASPIN+3
LCCACPUS EQU   LCCA+536
LCCADSF1 EQU   LCCA+540
LCCADSF2 EQU   LCCA+541
LCCASPSA EQU   LCCA+544
LCCACRFL EQU   LCCA+692
LCCACREX EQU   LCCA+693
LCCALKFG EQU   LCCA+694
LCCASRBF EQU   LCCA+720
LCCAVT   EQU   0
SDUMP    EQU   0
SDUFLAG0 EQU   SDUMP
SDUSTOR  EQU   SDUFLAG0
SDUFLAG1 EQU   SDUMP+1
SDUABEND EQU   SDUFLAG1
SDUSDAT1 EQU   SDUMP+2
SDUSDAT2 EQU   SDUMP+3
SDUSTORA EQU   SDUMP+8
SDUHDRAD EQU   SDUMP+12
SDUMASID EQU   SDUMP+20
SDUMPPTR EQU   0
IOCOM    EQU   0
IOCATTBL EQU   IOCOM+68
IOCOMPTR EQU   0
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSEMP  EQU   FRRSHEAD
FRRSLAST EQU   FRRSHEAD+4
FRRSELEN EQU   FRRSHEAD+8
FRRSCURR EQU   FRRSHEAD+12
FRRSPTR  EQU   0
FRRSENTR EQU   0
FRRSFRRA EQU   FRRSENTR
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
FRRSPARM EQU   FRRSENTR+8
FRREPTR  EQU   0
ASXB     EQU   0
ASXBSPSA EQU   ASXB+112
ASXBAEQ  EQU   ASXB+168
ASXBSECR EQU   ASXB+199
ASCBSFLG EQU   ASXBSECR
ASXBCASW EQU   ASXB+216
ASXBCRB1 EQU   ASXBCASW
ESTA     EQU   0
ESTAEXT  EQU   ESTA
ESTAFLG1 EQU   ESTAEXT
ESTAIO   EQU   ESTAFLG1
ESTAFGRS EQU   ESTA+12
ESTAFLG2 EQU   ESTAFGRS
ESTAPTR  EQU   0
SDWORK   EQU   0
SDCNTRL  EQU   SDWORK
SDECB    EQU   SDCNTRL
NUCADDR  EQU   SDCNTRL+64
GLOBADDR EQU   SDCNTRL+72
RANGEPTR EQU   SDCNTRL+76
ENDADRNT EQU   SDCNTRL+80
SDWSDPL  EQU   SDCNTRL+96
SVCDOPTS EQU   SDCNTRL+100
SVCDOPT1 EQU   SVCDOPTS
SVCDPSA  EQU   SVCDOPT1
SVCDNUC  EQU   SVCDOPT1
SVCDSQA  EQU   SVCDOPT1
SVCDTRT  EQU   SVCDOPT1
SVCDOPT2 EQU   SVCDOPTS+1
SVCDCSA  EQU   SVCDOPT2
SVCDNAPA EQU   SVCDOPT2
SVCDNSQA EQU   SVCDOPT2
FLAGSONE EQU   SDCNTRL+102
FLGRTFUL EQU   FLAGSONE
ERRORWK  EQU   SDCNTRL+104
SVCDMPNM EQU   SDCNTRL+128
DISPRETA EQU   SDCNTRL+152
SPQERETA EQU   SDCNTRL+172
PGFRRETA EQU   SDCNTRL+176
USERRETA EQU   SDCNTRL+180
SPQEADDR EQU   SDCNTRL+184
USESTART EQU   SDCNTRL+188
USEEND   EQU   SDCNTRL+192
ADDADRWA EQU   SDCNTRL+196
ADDADRWB EQU   SDCNTRL+200
ADDADRWC EQU   SDCNTRL+204
ADDADRWD EQU   SDCNTRL+208
SDRETCOD EQU   SDCNTRL+212
SDWRGSV1 EQU   SDCNTRL+216
SDWRGSV2 EQU   SDCNTRL+288
CVRT11   EQU   SDCNTRL+368
CVRT1    EQU   CVRT11+4
CVRT2    EQU   SDCNTRL+376
SDCVRT4  EQU   CVRT2+2
SVCNAME  EQU   SDCNTRL+392
SVCNM1T5 EQU   SVCNAME
SVCNM6T8 EQU   SVCNAME+5
SVCNM7T8 EQU   SVCNM6T8+1
CCWCHAIN EQU   SDCNTRL+400
CCW1     EQU   CCWCHAIN
FLAGS1   EQU   CCW1+4
CCW2     EQU   CCWCHAIN+8
FLAGS2   EQU   CCW2+4
CCW3     EQU   CCWCHAIN+16
FLAGS3   EQU   CCW3+4
SDSMBUFF EQU   SDCNTRL+424
SDOUTBUF EQU   SDWORK+432
RCDCCHH  EQU   SDOUTBUF
SDBUFFER EQU   SDWORK+440
ERRWORK  EQU   0
ERRFLGS1 EQU   ERRWORK
ERRFRR   EQU   ERRFLGS1
ERRLLOCK EQU   ERRFLGS1
ERRSLOCK EQU   ERRFLGS1
ERRFLGS2 EQU   ERRWORK+1
ERRENDMP EQU   ERRFLGS2
ERRSDFIX EQU   ERRFLGS2
ERRWKFIX EQU   ERRFLGS2
ERRADDR  EQU   ERRWORK+4
ERRRETRY EQU   ERRADDR
ERRBASE1 EQU   ERRWORK+12
ERRFLAG3 EQU   ERRWORK+16
USERDATA EQU   0
STORANGE EQU   0
STARTADR EQU   STORANGE
ENDADDR  EQU   STORANGE+4
LASTRNGE EQU   ENDADDR
TRTPTRS  EQU   0
TRTCURR  EQU   TRTPTRS
TRTEND   EQU   TRTPTRS+8
TRTENTY  EQU   0
@NM00112 EQU   TRTENTY+20
PAGEFREE EQU   0
STATUS   EQU   0
DCBPTR   EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
RTYADDR  EQU   0
SNAPPTR  EQU   0
PRDINPTR EQU   SDSMBUFF
PRDFLC   EQU   PRDFPR
@NM00005 EQU   PRDHDRID
@NM00007 EQU   PRDHDRID
PRDFLAGS EQU   @NM00007+2
CVTPTR   EQU   FLCCVT
CVTS01   EQU   CVTPGSIA
CVTPVTP  EQU   CVTS01+8
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTSDTRC EQU   CVTCTLFG
CVTTRACE EQU   CVTS01+52
CVTOPTE  EQU   CVTS01+188
CVTASVT  EQU   CVTS01+208
CVTGDA   EQU   CVTS01+212
CVTRTMCT EQU   CVTS01+224
CVTCSD   EQU   CVTS01+312
CVTSPSA  EQU   CVTS01+336
CVTPCCAT EQU   CVTS01+416
CVTLCCAT EQU   CVTS01+420
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
SCVTSPTR EQU   CVTABEND
GDAPTR   EQU   CVTGDA
ASCBPTR  EQU   PSAAOLD
ASVTPTR  EQU   CVTASVT
PVTPTR   EQU   CVTPVTP
LCCAPTR  EQU   PSALCCAV
PSARSVTE EQU   PSARSVT
PSACSTK  EQU   PSARSVTE
ASXBPTR  EQU   ASCBASXB
FLC      EQU   PSA
TRTCVTWD EQU   CVTTRACE
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTAPG   EQU   CVTS01+51
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00013 EQU   @NM00007+8
PRDCPUAD EQU   @NM00007+6
@NM00012 EQU   @NM00007+4
@NM00011 EQU   @NM00007+3
@NM00010 EQU   PRDFLAGS
PRDGPRVL EQU   PRDFLAGS
PRDSSINV EQU   PRDFLAGS
PRDUNIPR EQU   PRDFLAGS
@NM00009 EQU   @NM00007+1
@NM00008 EQU   @NM00007
PRDDATA  EQU   @NM00005+8
PRDADDR  EQU   @NM00005+4
@NM00006 EQU   @NM00005+2
PRDKEY2  EQU   @NM00005+1
PRDKEY1  EQU   @NM00005
@NM00004 EQU   PRDFLC+12
PRDCAW   EQU   PRDFLC+8
PRDCSW   EQU   PRDFLC
CURRSTOP EQU   @NM00112
@NM00111 EQU   TRTENTY
TRTBEG   EQU   TRTPTRS+4
SDUSERDA EQU   USERDATA+1
SDUHDRLN EQU   USERDATA
ERRBASE2 EQU   ERRWORK+20
@NM00110 EQU   ERRWORK+18
ERRSAVE  EQU   ERRWORK+17
@NM00109 EQU   ERRFLAG3
ERRSRBSD EQU   ERRFLAG3
ERRDLOCK EQU   ERRFLAG3
ERRTRMNT EQU   ERRFLAG3
ERRCSDT  EQU   ERRFLAG3
ERRSDENQ EQU   ERRFLAG3
ERRENDSW EQU   ERRFLAG3
ERRNOTRM EQU   ERRFLAG3
ERRWKADR EQU   ERRWORK+8
ERRRUBSW EQU   ERRWORK+2
ERRCDOUT EQU   ERRFLGS2
ERRNORCD EQU   ERRFLGS2
ERRCUDMP EQU   ERRFLGS2
ERRCMSLK EQU   ERRFLGS2
ERRINIO  EQU   ERRFLGS2
ERRGTFGO EQU   ERRFLGS1
ERRTCBND EQU   ERRFLGS1
ERRBFBIT EQU   ERRFLGS1
ERRSDBIT EQU   ERRFLGS1
ERRESTAE EQU   ERRFLGS1
DATALEN  EQU   SDOUTBUF+6
KEYLEN   EQU   SDOUTBUF+5
RECORDNO EQU   SDOUTBUF+4
RCDHH    EQU   RCDCCHH+2
RCDCC    EQU   RCDCCHH
SDSMDECB EQU   SDCNTRL+428
BYTECNT3 EQU   CCW3+6
@NM00108 EQU   CCW3+5
PCI3     EQU   FLAGS3
SKIP3    EQU   FLAGS3
SLI3     EQU   FLAGS3
CC3      EQU   FLAGS3
CD3      EQU   FLAGS3
DATAADR3 EQU   CCW3+1
CMDCODE3 EQU   CCW3
BYTECNT2 EQU   CCW2+6
@NM00107 EQU   CCW2+5
PCI2     EQU   FLAGS2
SKIP2    EQU   FLAGS2
SLI2     EQU   FLAGS2
CC2      EQU   FLAGS2
CD2      EQU   FLAGS2
DATAADR2 EQU   CCW2+1
CMDCODE2 EQU   CCW2
BYTECNT1 EQU   CCW1+6
@NM00106 EQU   CCW1+5
PCI1     EQU   FLAGS1
SKIP1    EQU   FLAGS1
SLI1     EQU   FLAGS1
CMDC1    EQU   FLAGS1
CD1      EQU   FLAGS1
DATAADR1 EQU   CCW1+1
CMDCODE1 EQU   CCW1
SVCNM8   EQU   SVCNM7T8+1
SVCNM7   EQU   SVCNM7T8
SVCNM6   EQU   SVCNM6T8
SVCNM1T4 EQU   SVCNM1T5
@NM00105 EQU   SDCNTRL+388
SVC994ID EQU   SDCNTRL+384
CVRT2SGN EQU   SDCVRT4+5
@NM00104 EQU   SDCVRT4
@NM00103 EQU   CVRT2
SDCVRT1  EQU   CVRT1+2
@NM00102 EQU   CVRT1
@NM00101 EQU   CVRT11
CHCNT    EQU   SDCNTRL+366
TIMCNT   EQU   SDCNTRL+364
DSTINDEX EQU   SDCNTRL+360
@NM00100 EQU   SDCNTRL+171
SDWKEY   EQU   SDCNTRL+170
AFFNSAV  EQU   SDCNTRL+168
FREERETA EQU   SDCNTRL+164
LPDERETA EQU   SDCNTRL+160
CDERETA  EQU   SDCNTRL+156
SDIORETA EQU   SDCNTRL+148
SVCDLPST EQU   SDCNTRL+136
FLAGSTWO EQU   SDCNTRL+103
SDWPAGOT EQU   FLAGSONE
FLGFLAST EQU   FLAGSONE
FLGTAPEE EQU   FLAGSONE
SVCDNSMD EQU   SVCDOPT2
SVCDSMDP EQU   SVCDOPT2
SVCDSWA  EQU   SVCDOPT2
SVCDLPA  EQU   SVCDOPT1
SVCDRGN  EQU   SVCDOPT1
SVCDLSQA EQU   SVCDOPT1
SVCDAPSA EQU   SVCDOPT1
SDSRBBAS EQU   SDCNTRL+92
SDSRBADR EQU   SDCNTRL+88
SVCDSRBA EQU   SDCNTRL+84
LOCALADR EQU   SDCNTRL+68
DACHARAD EQU   SDCNTRL+60
LSTESTAE EQU   SDCNTRL+44
SDIOB    EQU   SDCNTRL+4
ESTARSVI EQU   ESTAFGRS+1
@NM00099 EQU   ESTAFLG2
ESTABRNT EQU   ESTAFLG2
@NM00098 EQU   ESTAFLG2
ESTAEREC EQU   ESTAFLG2
ESTATERM EQU   ESTAFLG2
@NM00097 EQU   ESTAFLG2
ESTAOWNR EQU   ESTA+8
ESTAPARM EQU   ESTA+4
ESTAEXIT EQU   ESTAEXT+1
ESTAHALT EQU   ESTAIO
ESTANOIO EQU   ESTAIO
ESTASYNC EQU   ESTAFLG1
@NM00096 EQU   ESTAFLG1
ESTAESTA EQU   ESTAFLG1
@NM00095 EQU   ESTAFLG1
ESTASTAR EQU   ESTAFLG1
ESTASTAI EQU   ESTAFLG1
ASXBEND  EQU   ASXB+232
ASXBRV25 EQU   ASXB+228
ASXBRV24 EQU   ASXB+224
ASXBPT0E EQU   ASXB+220
ASXBCRB4 EQU   ASXBCASW+3
ASXBCRB3 EQU   ASXBCASW+2
ASXBCRB2 EQU   ASXBCASW+1
ASXBCR06 EQU   ASXBCRB1
ASXBCR05 EQU   ASXBCRB1
ASXBCR04 EQU   ASXBCRB1
ASXBCR03 EQU   ASXBCRB1
ASXBCR02 EQU   ASXBCRB1
ASXBCR01 EQU   ASXBCRB1
ASXBTFD  EQU   ASXBCRB1
ASXBPIP  EQU   ASXBCRB1
ASXBCTDC EQU   ASXB+212
ASXBTDCB EQU   ASXB+208
ASXBRV19 EQU   ASXB+204
ASXBSENV EQU   ASXBSECR+1
ASXBRV34 EQU   ASCBSFLG
ASXBRV33 EQU   ASCBSFLG
ASXBRV32 EQU   ASCBSFLG
ASXBRV31 EQU   ASCBSFLG
ASXBRV30 EQU   ASCBSFLG
ASXBRV29 EQU   ASCBSFLG
ASXBRV28 EQU   ASCBSFLG
ASXBRV27 EQU   ASCBSFLG
ASXBUSER EQU   ASXB+192
ASXBLSRB EQU   ASXBAEQ+20
ASXBFSRB EQU   ASXBAEQ+16
ASXBLRQE EQU   ASXBAEQ+12
ASXBFRQE EQU   ASXBAEQ+8
ASXBLIQE EQU   ASXBAEQ+4
ASXBFIQE EQU   ASXBAEQ
ASXBETSK EQU   ASXB+164
ASXBSIRB EQU   ASXB+160
ASXBPSWD EQU   ASXB+152
ASXBPRG  EQU   ASXB+136
ASXBRV26 EQU   ASXB+132
ASXBOUSB EQU   ASXB+128
ASXBDDR  EQU   ASXB+124
ASXBRCTD EQU   ASXB+120
ASXBRSMD EQU   ASXB+116
ASXBFRWA EQU   ASXB+108
ASXBFLSA EQU   ASXB+36
ASXBIHSA EQU   ASXB+32
ASXBRV15 EQU   ASXB+28
ASXBRV14 EQU   ASXB+24
ASXBLWA  EQU   ASXB+20
ASXBMPST EQU   ASXB+16
ASXBRS00 EQU   ASXB+14
ASXBTCBS EQU   ASXB+12
ASXBLTCB EQU   ASXB+8
ASXBFTCB EQU   ASXB+4
ASXBASXB EQU   ASXB
ASXBEGIN EQU   ASXB
@NM00094 EQU   FRRSFLGS+1
@NM00093 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
IOCOEND  EQU   IOCOM+128
IOCPATCH EQU   IOCOM+124
IOCUCBBM EQU   IOCOM+120
IOCQCNT  EQU   IOCOM+116
IOCIOSDQ EQU   IOCOM+112
IOCIOSEQ EQU   IOCOM+108
IOCSVCF  EQU   IOCOM+104
IOCTCCW  EQU   IOCOM+100
IOCRSVTB EQU   IOCOM+96
IOCMFCNT EQU   IOCOM+92
IOCMFHK  EQU   IOCOM+88
IOCGENA  EQU   IOCOM+84
IOCCCH   EQU   IOCOM+80
IOCASYNQ EQU   IOCOM+76
IOCLCHTB EQU   IOCOM+72
IOCOMEX  EQU   IOCOM+64
IOCSYNCH EQU   IOCOM+56
IOCCATLK EQU   IOCOM+48
IOCPRGID EQU   IOCOM+44
IOCIOSCP EQU   IOCOM+40
IOCORMGT EQU   IOCOM+36
IOCVOID  EQU   IOCOM+32
IOCSTIO  EQU   IOCOM+28
IOCSCOMP EQU   IOCOM+24
IOCHD160 EQU   IOCOM+20
IOCINT   EQU   IOCOM+16
IOCCTBL  EQU   IOCOM+12
IOCHIO   EQU   IOCOM+8
IOCPST   EQU   IOCOM+4
IOCPGCT  EQU   IOCOM+2
IOCVOICT EQU   IOCOM
SDUSYSMC EQU   SDUMP+36
SDUSYSMS EQU   SDUMP+32
SDUSUMLP EQU   SDUMP+28
SDUASIDP EQU   SDUMP+24
SDUTASID EQU   SDUMASID+2
SDUCASID EQU   SDUMASID
SDUECBAD EQU   SDUMP+16
SDUDCBAD EQU   SDUMP+4
@NM00068 EQU   SDUSDAT2
SDUNASQA EQU   SDUSDAT2
SDUNAPSA EQU   SDUSDAT2
SDUNSMDP EQU   SDUSDAT2
SDUSMDMP EQU   SDUSDAT2
SDUSWA   EQU   SDUSDAT2
SDUCSA   EQU   SDUSDAT2
SDUTRT   EQU   SDUSDAT1
SDULPA   EQU   SDUSDAT1
SDURGN   EQU   SDUSDAT1
SDULSQA  EQU   SDUSDAT1
SDUSQA   EQU   SDUSDAT1
SDUNUC   EQU   SDUSDAT1
SDUPSA   EQU   SDUSDAT1
SDUALPSA EQU   SDUSDAT1
@NM00067 EQU   SDUFLAG1
SDUSLIP  EQU   SDUFLAG1
SDUSULST EQU   SDUFLAG1
SDUASLST EQU   SDUFLAG1
SDUNEW   EQU   SDUFLAG1
DUMPTYPE EQU   SDUFLAG1
SDUBRANH EQU   SDUFLAG0
SDUQUIET EQU   SDUFLAG0
SDUASID  EQU   SDUFLAG0
SDUECB   EQU   SDUFLAG0
SDUHDR   EQU   SDUFLAG0
SDUBUF   EQU   SDUFLAG0
SDUDCB   EQU   SDUFLAG0
LCCAT00P EQU   LCCAVT
LCCAR125 EQU   LCCA+964
LCCAR124 EQU   LCCA+960
LCCASGPR EQU   LCCA+896
LCCADRT2 EQU   LCCA+888
LCCADRT1 EQU   LCCA+880
LCCAR103 EQU   LCCA+876
LCCAESS2 EQU   LCCA+872
LCCASPLJ EQU   LCCA+868
LCCASMQJ EQU   LCCA+864
LCCAIRT  EQU   LCCA+736
LCCAASID EQU   LCCA+732
LCCARV89 EQU   LCCA+728
LCCAPGTA EQU   LCCASRBF+2
LCCASAFN EQU   LCCASRBF
LCCAECSA EQU   LCCA+716
LCCAICR0 EQU   LCCA+712
LCCALWTM EQU   LCCA+704
LCCARV78 EQU   LCCA+700
LCCAPINV EQU   LCCA+696
LCCARV88 EQU   LCCA+695
LCCARV87 EQU   LCCALKFG
LCCARV86 EQU   LCCALKFG
LCCARV85 EQU   LCCALKFG
LCCARV84 EQU   LCCALKFG
LCCALKRD EQU   LCCALKFG
LCCALKAQ EQU   LCCALKFG
LCCALKSA EQU   LCCALKFG
LCCALKDP EQU   LCCALKFG
LCCACRST EQU   LCCACREX
LCCACRDP EQU   LCCACREX
LCCACRLM EQU   LCCACREX
LCCACRIN EQU   LCCACREX
LCCACRRT EQU   LCCACREX
LCCACRLE EQU   LCCACREX
LCCACRRM EQU   LCCACREX
LCCACREF EQU   LCCACREX
LCCAVARY EQU   LCCACRFL
LCCARV73 EQU   LCCACRFL
LCCARV72 EQU   LCCACRFL
LCCARV71 EQU   LCCACRFL
LCCARV70 EQU   LCCACRFL
LCCARV69 EQU   LCCACRFL
LCCACLMS EQU   LCCACRFL
LCCACRTM EQU   LCCACRFL
LCCALCR0 EQU   LCCA+688
LCCACRLC EQU   LCCA+684
LCCARCPU EQU   LCCA+680
LCCADCPU EQU   LCCA+676
LCCASRBJ EQU   LCCA+672
LCCADSSR EQU   LCCA+668
LCCADSSC EQU   LCCA+660
LCCADSS3 EQU   LCCA+648
LCCADSS2 EQU   LCCA+636
LCCADSS1 EQU   LCCA+624
LCCAWTIM EQU   LCCA+616
LCCAITOD EQU   LCCA+608
LCCADTOD EQU   LCCA+600
LCCASTOD EQU   LCCA+592
LCCARIR5 EQU   LCCASPSA+44
LCCARIR4 EQU   LCCASPSA+40
LCCARIR3 EQU   LCCASPSA+36
LCCARIR2 EQU   LCCASPSA+32
LCCARPR5 EQU   LCCASPSA+28
LCCARPR4 EQU   LCCASPSA+24
LCCARPR3 EQU   LCCASPSA+20
LCCARPR2 EQU   LCCASPSA+16
LCCADSR5 EQU   LCCASPSA+12
LCCADSR4 EQU   LCCASPSA+8
LCCADSR3 EQU   LCCASPSA+4
LCCADSR2 EQU   LCCASPSA
LCCARV68 EQU   LCCA+543
LCCAPSMK EQU   LCCA+542
LCCARV67 EQU   LCCADSF2
LCCARV66 EQU   LCCADSF2
LCCARV65 EQU   LCCADSF2
LCCARV64 EQU   LCCADSF2
LCCADSRW EQU   LCCADSF2
LCCADSPL EQU   LCCADSF2
LCCAGSRB EQU   LCCADSF2
LCCASRBM EQU   LCCADSF2
LCCARV61 EQU   LCCADSF1
LCCARV60 EQU   LCCADSF1
LCCARV59 EQU   LCCADSF1
LCCARV58 EQU   LCCADSF1
LCCATIMR EQU   LCCADSF1
LCCADSS  EQU   LCCADSF1
LCCAVCPU EQU   LCCADSF1
LCCAACR  EQU   LCCADSF1
LCCAASCP EQU   LCCA+532
LCCAESSA EQU   LCCA+528
LCCARV55 EQU   LCCASPN4
LCCARV54 EQU   LCCASPN4
LCCARV53 EQU   LCCASPN4
LCCARV52 EQU   LCCASPN4
LCCARV51 EQU   LCCASPN4
LCCARV50 EQU   LCCASPN4
LCCARV49 EQU   LCCASPN4
LCCARV48 EQU   LCCASPN4
LCCARV47 EQU   LCCASPN3
LCCARV46 EQU   LCCASPN3
LCCARV45 EQU   LCCASPN3
LCCARV44 EQU   LCCASPN3
LCCARV43 EQU   LCCASPN3
LCCARV42 EQU   LCCASPN3
LCCARV41 EQU   LCCASPN3
LCCARV40 EQU   LCCASPN3
LCCARV39 EQU   LCCASPN2
LCCARV38 EQU   LCCASPN2
LCCARV37 EQU   LCCASPN2
LCCARV36 EQU   LCCASPN2
LCCARV35 EQU   LCCASPN2
LCCARV34 EQU   LCCASPN2
LCCARV33 EQU   LCCASPN2
LCCARV32 EQU   LCCASPN2
LCCARV31 EQU   LCCASPN1
LCCARV30 EQU   LCCASPN1
LCCAMFIO EQU   LCCASPN1
LCCARSTR EQU   LCCASPN1
LCCATSPN EQU   LCCASPN1
LCCALOCK EQU   LCCASPN1
LCCASIGP EQU   LCCASPN1
LCCAPTLB EQU   LCCASPN1
LCCARV27 EQU   LCCAIHR4
LCCARV26 EQU   LCCAIHR4
LCCARV25 EQU   LCCAIHR4
LCCARV24 EQU   LCCAIHR4
LCCARV23 EQU   LCCAIHR4
LCCARV22 EQU   LCCAIHR4
LCCARV21 EQU   LCCAIHR4
LCCARV20 EQU   LCCAIHR4
LCCARV19 EQU   LCCAIHR3
LCCARV18 EQU   LCCAIHR3
LCCARV17 EQU   LCCAIHR3
LCCARV16 EQU   LCCAIHR3
LCCARV15 EQU   LCCAIHR3
LCCARV14 EQU   LCCAIHR3
LCCARV13 EQU   LCCAIHR3
LCCARV12 EQU   LCCAIHR3
LCCARV11 EQU   LCCAIHR2
LCCARV10 EQU   LCCAIHR2
LCCARV09 EQU   LCCAIHR2
LCCARV08 EQU   LCCAIHR2
LCCARV07 EQU   LCCAIHR2
LCCARV06 EQU   LCCAIHR2
LCCARV05 EQU   LCCAIHR2
LCCARV04 EQU   LCCAIHR2
LCCARV03 EQU   LCCAIHR1
LCCARV02 EQU   LCCAIHR1
LCCARV01 EQU   LCCAIHR1
LCCAPPIE EQU   LCCAIHR1
LCCAPSG1 EQU   LCCAIHR1
LCCAPDAT EQU   LCCAIHR1
LCCAXRC2 EQU   LCCAIHR1
LCCAXRC1 EQU   LCCAIHR1
LCCAIOPS EQU   LCCA+512
LCCAGPGR EQU   LCCA+448
LCCAR133 EQU   LCCA+444
LCCAR132 EQU   LCCA+440
LCCAR131 EQU   LCCA+436
LCCAR130 EQU   LCCA+432
LCCAR129 EQU   LCCA+428
LCCAR128 EQU   LCCA+424
LCCAR127 EQU   LCCA+420
LCCAR126 EQU   LCCA+416
LCCARSGR EQU   LCCA+352
LCCAXGR3 EQU   LCCA+288
LCCAXGR2 EQU   LCCA+224
LCCAXGR1 EQU   LCCA+160
LCCACR0  EQU   LCCA+156
LCCAMCR1 EQU   LCCA+152
LCCAPVAD EQU   LCCA+148
LCCAPINT EQU   LCCA+144
LCCAPPSW EQU   LCCA+136
LCCAPGR2 EQU   LCCA+72
LCCAPGR1 EQU   LCCA+8
LCCARV77 EQU   LCCA+6
LCCACPUA EQU   LCCA+4
LCCALCCA EQU   LCCA
RTCTISVC EQU   RTCTSDO4
RTCTSDOV EQU   RTCTSDMG
@NM00066 EQU   RTCTSDO4
@NM00065 EQU   RTCTSDO3
RTCTSDPH EQU   RTCTSDO3
RTCTSDPG EQU   RTCTSDO3
@NM00064 EQU   RTCTSDO2
RTCTSDPD EQU   RTCTSDO2
RTCTSDPC EQU   RTCTSDO2
RTCTSDPB EQU   RTCTSDO2
RTCTSDPA EQU   RTCTSDO2
RTCTSDP9 EQU   RTCTSDO2
RTCTSDP8 EQU   RTCTSDO2
RTCTSDP7 EQU   RTCTSDO1
RTCTSDP6 EQU   RTCTSDO1
RTCTSDP5 EQU   RTCTSDO1
RTCTSDP4 EQU   RTCTSDO1
RTCTSDP3 EQU   RTCTSDO1
RTCTSDP2 EQU   RTCTSDO1
RTCTSDP1 EQU   RTCTSDO1
RTCTSDP0 EQU   RTCTSDO1
RTCTISYM EQU   RTCTSD04
RTCTSMOV EQU   RTCTSMMG
@NM00063 EQU   RTCTSD04
RTCTSD03 EQU   RTCTMSYO+2
RTCTSD02 EQU   RTCTMSYO+1
RTCTSDS7 EQU   RTCTSD01
RTCTSDS6 EQU   RTCTSD01
RTCTSDS5 EQU   RTCTSD01
RTCTSDS4 EQU   RTCTSD01
RTCTSDS3 EQU   RTCTSD01
RTCTSDS2 EQU   RTCTSD01
RTCTSDS1 EQU   RTCTSD01
RTCTSDS0 EQU   RTCTSD01
RTCTISYU EQU   RTCTSUO4
RTCTSUOV EQU   RTCTSUMG
@NM00062 EQU   RTCTSUO4
RTCTSYDF EQU   RTCTSUO3
RTCTSYDE EQU   RTCTSUO3
RTCTSYDD EQU   RTCTSUO3
RTCTSYDC EQU   RTCTSUO3
RTCTSYDB EQU   RTCTSUO3
RTCTSYDA EQU   RTCTSUO3
RTCTSYD9 EQU   RTCTSUO3
RTCTSYD8 EQU   RTCTSUO3
@NM00061 EQU   RTCTSUO2
RTCTSYDH EQU   RTCTSUO2
RTCTSYDG EQU   RTCTSUO2
RTCTSYD7 EQU   RTCTSUO1
RTCTSYD6 EQU   RTCTSUO1
RTCTSYD5 EQU   RTCTSUO1
RTCTSYD4 EQU   RTCTSUO1
RTCTSYD3 EQU   RTCTSUO1
RTCTSYD2 EQU   RTCTSUO1
RTCTSYD1 EQU   RTCTSUO1
RTCTSYD0 EQU   RTCTSUO1
RTCTISAB EQU   RTCTSAO4
RTCTSAOV EQU   RTCTSAMG
@NM00060 EQU   RTCTSAO4
RTCTSADF EQU   RTCTSAO3
RTCTSADE EQU   RTCTSAO3
RTCTSADD EQU   RTCTSAO3
RTCTSADC EQU   RTCTSAO3
RTCTSADB EQU   RTCTSAO3
RTCTSADA EQU   RTCTSAO3
RTCTSAD9 EQU   RTCTSAO3
RTCTSAD8 EQU   RTCTSAO3
@NM00059 EQU   RTCTSAO2
RTCTSADH EQU   RTCTSAO2
RTCTSADG EQU   RTCTSAO2
RTCTSAD7 EQU   RTCTSAO1
RTCTSAD6 EQU   RTCTSAO1
RTCTSAD5 EQU   RTCTSAO1
RTCTSAD4 EQU   RTCTSAO1
RTCTSAD3 EQU   RTCTSAO1
RTCTSAD2 EQU   RTCTSAO1
RTCTSAD1 EQU   RTCTSAO1
RTCTSAD0 EQU   RTCTSAO1
RTCTZZZ5 EQU   RTCT+340
RTCTZZZ4 EQU   RTCT+336
RTCTMRMQ EQU   RTCT+332
RTCTSDF5 EQU   RTCTSDF3+3
RTCTSDDO EQU   RTCTSDF4
RTCTSDEN EQU   RTCTSDF4
RTCTSDEQ EQU   RTCTSDF4
RTCTSDTR EQU   RTCTSDF4
RTCTSDRM EQU   RTCTSDF4
RTCTSDAN EQU   RTCTSDF4
RTCTSDNC EQU   RTCTSDF4
RTCTSDSS EQU   RTCTSDF4
RTCTSDAS EQU   RTCTSDF3
@NM00058 EQU   RTCTC3PO
@NM00057 EQU   RTCTR2D2
RTCTSDRW EQU   RTCTSDF2
RTCTSDSL EQU   RTCTSDF2
RTCTSDWF EQU   RTCTSDF2
RTCTSDLA EQU   RTCTSDF2
RTCTSDDI EQU   RTCTSDF2
RTCTSDTQ EQU   RTCTSDF2
RTCTSDMR EQU   RTCTSDF2
RTCTSDSC EQU   RTCTSDF1
RTCTSDRS EQU   RTCTSDF1
RTCTSDSD EQU   RTCTSDF1
RTCTSDEP EQU   RTCTSDF1
RTCTSDMA EQU   RTCTSDF1
RTCTSDSH EQU   RTCTSDF1
RTCTSDNO EQU   RTCTSDF1
RTCTZZZ2 EQU   RTCT+257
RTCTSDPR EQU   RTCTSDI+2
RTCTINDX EQU   RTCTSDI+1
RTCTSDNA EQU   RTCTSDI
@NM00056 EQU   RTCTASO2
RTCTASNQ EQU   RTCTASO2
RTCTASNA EQU   RTCTASO2
RTCTASNS EQU   RTCTASO2
RTCTASSU EQU   RTCTASO2
RTCTASSW EQU   RTCTASO2
RTCTASCS EQU   RTCTASO2
RTCTASTR EQU   RTCTASO1
RTCTASLP EQU   RTCTASO1
RTCTASRG EQU   RTCTASO1
RTCTASLS EQU   RTCTASO1
RTCTASSQ EQU   RTCTASO1
RTCTASNU EQU   RTCTASO1
RTCTASPS EQU   RTCTASO1
RTCTASAL EQU   RTCTASO1
RTCTSDO  EQU   RTCTOPT+12
RTCTSYO  EQU   RTCTOPT+8
RTCTSUO  EQU   RTCTOPT+4
RTCTSAO  EQU   RTCTOPT
RTCTXXX2 EQU   RTCT+234
RTCTETIM EQU   RTCTERID+6
RTCTEASD EQU   RTCTERID+4
RTCTECPU EQU   RTCTERID+2
RTCTESEQ EQU   RTCTERID
RTCTSDWK EQU   RTCT+220
RTCTTDCB EQU   RTCT+184
RTCTSDSW EQU   RTCT+180
RTCTSEQ# EQU   RTCT+178
RTCTXXX1 EQU   RTCT+177
@NM00055 EQU   RTCTRFLG
RTCTRSTF EQU   RTCTRFLG
RTCTRPER EQU   RTCTRFLG
RTCTRTER EQU   RTCTRFLG
RTCTTEST EQU   RTCT+172
RTCTMSRB EQU   RTCT+168
RTCTMLCK EQU   RTCT+164
RTCTFMT  EQU   RTCT+160
RTCTSDIP EQU   RTCTSDPL
RTCTDEV  EQU   RTCTSDDS+8
RTCTDCB  EQU   RTCTSDDS+4
@NM00054 EQU   RTCTFLG
RTCTDETP EQU   RTCTFLG
RTCTDSUS EQU   RTCTFLG
RTCTDSST EQU   RTCTFLG
RTCTDSNM EQU   RTCTSDDS
RTCTRCB  EQU   RTCT+32
RTCTRECB EQU   RTCT+28
RTCTFASB EQU   RTCT+24
RTCTMECB EQU   RTCT+20
RTCTSDID EQU   RTCT+18
RTCTYYY1 EQU   RTCT+16
RTCTSY04 EQU   RTCTSYD+3
RTCTSY03 EQU   RTCTSYD+2
RTCTSY02 EQU   RTCTSYD+1
RTCTSYM7 EQU   RTCTSY01
RTCTSYM6 EQU   RTCTSY01
RTCTSYM5 EQU   RTCTSY01
RTCTSYM4 EQU   RTCTSY01
RTCTSYM3 EQU   RTCTSY01
RTCTSYM2 EQU   RTCTSY01
RTCTSYM1 EQU   RTCTSY01
RTCTSYM0 EQU   RTCTSY01
RTCTSUP4 EQU   RTCTSUP+3
RTCTSUDF EQU   RTCTSUP3
RTCTSUDE EQU   RTCTSUP3
RTCTSUDD EQU   RTCTSUP3
RTCTSUDC EQU   RTCTSUP3
RTCTSUDB EQU   RTCTSUP3
RTCTSUDA EQU   RTCTSUP3
RTCTSUD9 EQU   RTCTSUP3
RTCTSUD8 EQU   RTCTSUP3
@NM00053 EQU   RTCTSUP2
RTCTSUDH EQU   RTCTSUP2
RTCTSUDG EQU   RTCTSUP2
RTCTSUD7 EQU   RTCTSUP1
RTCTSUD6 EQU   RTCTSUP1
RTCTSUD5 EQU   RTCTSUP1
RTCTSUD4 EQU   RTCTSUP1
RTCTSUD3 EQU   RTCTSUP1
RTCTSUD2 EQU   RTCTSUP1
RTCTSUD1 EQU   RTCTSUP1
RTCTSUD0 EQU   RTCTSUP1
RTCTSAP4 EQU   RTCTSAP+3
RTCTSABF EQU   RTCTSAP3
RTCTSABE EQU   RTCTSAP3
RTCTSABD EQU   RTCTSAP3
RTCTSABC EQU   RTCTSAP3
RTCTSABB EQU   RTCTSAP3
RTCTSABA EQU   RTCTSAP3
RTCTSAB9 EQU   RTCTSAP3
RTCTSAB8 EQU   RTCTSAP3
@NM00052 EQU   RTCTSAP2
RTCTSABH EQU   RTCTSAP2
RTCTSABG EQU   RTCTSAP2
RTCTSAB7 EQU   RTCTSAP1
RTCTSAB6 EQU   RTCTSAP1
RTCTSAB5 EQU   RTCTSAP1
RTCTSAB4 EQU   RTCTSAP1
RTCTSAB3 EQU   RTCTSAP1
RTCTSAB2 EQU   RTCTSAP1
RTCTSAB1 EQU   RTCTSAP1
RTCTSAB0 EQU   RTCTSAP1
RTCTNAME EQU   RTCT
@NM00051 EQU   CSD+160
CSDMASK  EQU   CSD+128
CSDUCNT  EQU   CSD+124
CSDTCNT  EQU   CSD+120
CSDGDTOD EQU   CSD+116
CSDGDINT EQU   CSD+112
CSDGDCC  EQU   CSD+108
CSDDDRCT EQU   CSD+106
CSDRV044 EQU   CSD+104
CSDMAFF  EQU   CSD+24
CSDRV038 EQU   CSDFLAGS
CSDRV037 EQU   CSDFLAGS
CSDRV036 EQU   CSDFLAGS
CSDRV035 EQU   CSDFLAGS
CSDRV034 EQU   CSDFLAGS
CSDRV033 EQU   CSDFLAGS
CSDRV032 EQU   CSDFLAGS
CSDMP    EQU   CSDFLAGS
CSDACR   EQU   CSD+22
CSDMF1CP EQU   CSD+20
CSDRV043 EQU   CSD+16
CSDRV030 EQU   CSDSCFL4
CSDRV029 EQU   CSDSCFL4
CSDRV028 EQU   CSDSCFL4
CSDRV027 EQU   CSDSCFL4
CSDRV026 EQU   CSDSCFL4
CSDRV025 EQU   CSDSCFL4
CSDRV024 EQU   CSDSCFL4
CSDRV023 EQU   CSDSCFL4
CSDRV022 EQU   CSDSCFL3
CSDRV021 EQU   CSDSCFL3
CSDRV020 EQU   CSDSCFL3
CSDRV019 EQU   CSDSCFL3
CSDRV018 EQU   CSDSCFL3
CSDRV017 EQU   CSDSCFL3
CSDRV016 EQU   CSDSCFL3
CSDRV015 EQU   CSDSCFL3
CSDRV014 EQU   CSDSCFL2
CSDRV013 EQU   CSDSCFL2
CSDRV012 EQU   CSDSCFL2
CSDRV011 EQU   CSDSCFL2
CSDRV010 EQU   CSDSCFL2
CSDRV009 EQU   CSDSCFL2
CSDRV008 EQU   CSDSCFL2
CSDRV007 EQU   CSDSCFL2
CSDRV006 EQU   CSDSCFL1
CSDRV005 EQU   CSDSCFL1
CSDRV004 EQU   CSDSCFL1
CSDRV003 EQU   CSDSCFL1
CSDRV002 EQU   CSDSCFL1
CSDRV001 EQU   CSDSCFL1
CSDSYSND EQU   CSDSCFL1
CSDRV042 EQU   CSDSCFL1
CSDCPUOL EQU   CSD+10
CSDSAFF  EQU   CSDCPUAL
CSDCHAD  EQU   CSD+6
CSDCPUJS EQU   CSD+4
CSDCSD   EQU   CSD
@NM00050 EQU   PCCA+512
PCCACAT  EQU   PCCA+384
PCCARV36 EQU   PCCA+380
PCCARV35 EQU   PCCA+378
PCCARV01 EQU   PCCA+377
PCCACPUM EQU   PCCA+376
PCCARV63 EQU   PCCA+372
PCCARV62 EQU   PCCA+368
PCCARV61 EQU   PCCA+364
PCCARV60 EQU   PCCA+360
PCCARV59 EQU   PCCA+356
PCCARV58 EQU   PCCA+352
PCCARV57 EQU   PCCA+348
PCCARV56 EQU   PCCA+344
PCCARV55 EQU   PCCA+340
PCCARV54 EQU   PCCA+336
PCCALOGA EQU   PCCA+332
PCCACHID EQU   PCCA+324
PCCACHSV EQU   PCCA+312
PCCARV79 EQU   PCCACHF4
PCCARV78 EQU   PCCACHF4
PCCARV77 EQU   PCCACHF4
PCCARV76 EQU   PCCACHF4
PCCARV75 EQU   PCCACHF4
PCCARV74 EQU   PCCACHF4
PCCARV73 EQU   PCCACHF4
PCCARV72 EQU   PCCACHF4
PCCARV71 EQU   PCCACHF3
PCCARV70 EQU   PCCACHF3
PCCARV69 EQU   PCCACHF3
PCCARV68 EQU   PCCACHF3
PCCARV67 EQU   PCCACHF3
PCCARV66 EQU   PCCACHF3
PCCARV65 EQU   PCCACHF3
PCCARV64 EQU   PCCACHF3
PCCACF28 EQU   PCCACHF2
PCCACF27 EQU   PCCACHF2
PCCACF26 EQU   PCCACHF2
PCCACF25 EQU   PCCACHF2
PCCACF24 EQU   PCCACHF2
PCCACF23 EQU   PCCACHF2
PCCACF22 EQU   PCCACHF2
PCCACF21 EQU   PCCACHF2
PCCACF18 EQU   PCCACHF1
PCCACF17 EQU   PCCACHF1
PCCACF16 EQU   PCCACHF1
PCCACF15 EQU   PCCACHF1
PCCACF14 EQU   PCCACHF1
PCCACF13 EQU   PCCACHF1
PCCACF12 EQU   PCCACHF1
PCCACF11 EQU   PCCACHF1
PCCARV05 EQU   PCCA+306
PCCACHPB EQU   PCCA+305
PCCALGP2 EQU   PCCA+304
PCCALGP1 EQU   PCCA+303
PCCALOGL EQU   PCCA+302
PCCARV80 EQU   PCCA+300
PCCACHW2 EQU   PCCA+296
PCCACHW1 EQU   PCCA+292
PCCAIOSI EQU   PCCA+291
PCCACNRB EQU   PCCACHRB
PCCACCVB EQU   PCCACHRB
PCCACSNB EQU   PCCACHRB
PCCARV52 EQU   PCCACHRB
PCCACHIB EQU   PCCACHRB
PCCACTIB EQU   PCCACHRB
PCCACINB EQU   PCCACHRB
PCCACSIB EQU   PCCACHRB
PCCARV51 EQU   PCCACHS2
PCCARV50 EQU   PCCACHS2
PCCACCRA EQU   PCCACHS2
PCCACURC EQU   PCCACHS2
PCCACNLG EQU   PCCACHS2
PCCACMOD EQU   PCCACHS2
PCCACALT EQU   PCCACHS2
PCCACIOR EQU   PCCACHS2
PCCARV47 EQU   PCCACHS1
PCCACUCB EQU   PCCACHS1
PCCACIBC EQU   PCCACHS1
PCCACAND EQU   PCCACHS1
PCCACNLS EQU   PCCACHS1
PCCACFRR EQU   PCCACHS1
PCCACNRE EQU   PCCACHS1
PCCACCMP EQU   PCCACHS1
PCCACSEQ EQU   PCCACHTS
PCCACDIN EQU   PCCACHTS
PCCARV44 EQU   PCCACHTS
PCCARV43 EQU   PCCACHTS
PCCACTEC EQU   PCCACHTS
PCCACDAV EQU   PCCACHVA
PCCACCHV EQU   PCCACHVA
PCCACCMD EQU   PCCACHVA
PCCACUNS EQU   PCCACHVA
PCCACSQV EQU   PCCACHVA
PCCARV42 EQU   PCCACHVA
PCCARV41 EQU   PCCACHVA
PCCACITF EQU   PCCACHVA
PCCARV40 EQU   PCCACHBL
PCCARV39 EQU   PCCACHBL
PCCARV38 EQU   PCCACHBL
PCCACCUE EQU   PCCACHBL
PCCACSTG EQU   PCCACHBL
PCCACSCU EQU   PCCACHBL
PCCACCHA EQU   PCCACHBL
PCCACCPU EQU   PCCACHBL
PCCACNOR EQU   PCCACHPF
PCCACCNT EQU   PCCACHPF
PCCACSNS EQU   PCCACHPF
PCCARV37 EQU   PCCACHPF
PCCACHIO EQU   PCCACHPF
PCCACTIO EQU   PCCACHPF
PCCACINT EQU   PCCACHPF
PCCACSIO EQU   PCCACHPF
PCCACHUB EQU   PCCAWERP
PCCACHEL EQU   PCCA+168
PCCALRBR EQU   PCCA+164
PCCALRBV EQU   PCCA+160
PCCAPWAR EQU   PCCA+156
PCCAPWAV EQU   PCCA+152
PCCAEMSA EQU   PCCAEMSB+12
PCCAEMSE EQU   PCCAEMSB+8
PCCAEMSP EQU   PCCAEMSB+4
PCCARMS  EQU   PCCARMSB
PCCARV34 EQU   PCCARMSB
PCCARV33 EQU   PCCARMSB
PCCARV32 EQU   PCCARMSB
PCCARV31 EQU   PCCARMSB
PCCARV30 EQU   PCCARMSB
PCCARV29 EQU   PCCARMSB
PCCARV28 EQU   PCCARMSB
PCCARV27 EQU   PCCAEMS3
PCCARV26 EQU   PCCAEMS3
PCCARV25 EQU   PCCAEMS3
PCCARV24 EQU   PCCAEMS3
PCCARV23 EQU   PCCAEMS3
PCCARV22 EQU   PCCAEMS3
PCCARV21 EQU   PCCAEMS3
PCCARV20 EQU   PCCAEMS3
PCCARV19 EQU   PCCAEMS2
PCCARV18 EQU   PCCAEMS2
PCCARV17 EQU   PCCAEMS2
PCCARV16 EQU   PCCAEMS2
PCCARV15 EQU   PCCAEMS2
PCCARV14 EQU   PCCAEMS2
PCCARV13 EQU   PCCAEMS2
PCCARV12 EQU   PCCAEMS2
PCCARV11 EQU   PCCARISP
PCCARV10 EQU   PCCARISP
PCCARV09 EQU   PCCARISP
PCCARV08 EQU   PCCARISP
PCCARV07 EQU   PCCARISP
PCCARV06 EQU   PCCARISP
PCCASERL EQU   PCCARISP
PCCAPARL EQU   PCCARISP
PCCARPB  EQU   PCCA+132
PCCACTIN EQU   PCCAINTE
PCCANFIN EQU   PCCAINTE
PCCANUIN EQU   PCCAINTE
PCCACTCC EQU   PCCACCE
PCCANFCC EQU   PCCACCE
PCCANUCC EQU   PCCACCE
PCCACTTD EQU   PCCATODE
PCCANFTD EQU   PCCATODE
PCCANUTD EQU   PCCATODE
PCCARV04 EQU   PCCATMFL
PCCARV03 EQU   PCCATMFL
PCCARV02 EQU   PCCATMFL
PCCAMINT EQU   PCCATMFL
PCCAMCC  EQU   PCCATMFL
PCCAVKIL EQU   PCCATMFL
PCCASYNC EQU   PCCATMFL
PCCAINIT EQU   PCCATMFL
PCCARV9E EQU   PCCA+124
PCCARV9D EQU   PCCA+120
PCCARV9C EQU   PCCA+116
PCCARV9B EQU   PCCA+112
PCCARV9A EQU   PCCA+108
PCCARV99 EQU   PCCA+104
PCCARV98 EQU   PCCA+100
PCCARV97 EQU   PCCA+96
PCCARV96 EQU   PCCA+92
PCCARV95 EQU   PCCA+88
PCCARV94 EQU   PCCA+84
PCCARV93 EQU   PCCA+80
PCCARV92 EQU   PCCA+76
PCCARV91 EQU   PCCA+72
PCCARV90 EQU   PCCA+68
PCCARV89 EQU   PCCA+64
PCCARV88 EQU   PCCA+60
PCCARV87 EQU   PCCA+56
PCCARV86 EQU   PCCA+52
PCCARV85 EQU   PCCA+48
PCCARV84 EQU   PCCA+44
PCCARV83 EQU   PCCA+40
PCCARV82 EQU   PCCA+36
PCCARV81 EQU   PCCA+32
PCCAPSAR EQU   PCCA+28
PCCATQEP EQU   PCCA+20
PCCACAFM EQU   PCCA+18
PCCACPUA EQU   PCCA+16
PCCACPID EQU   PCCA+4
PCCAPCCA EQU   PCCA
PVTEND   EQU   PVT+1944
PVTTASID EQU   PVT+1942
PVTXXXXX EQU   PVT+1940
PVTMVCLC EQU   PVT+1936
PVTVCONS EQU   PVT+1896
PVTPRSB  EQU   PVT+1892
PVTCIOQL EQU   PVTPCBQS+36
PVTCIOQF EQU   PVTPCBQS+32
PVTGFADL EQU   PVTPCBQS+28
PVTGFADF EQU   PVTPCBQS+24
PVTFPCBL EQU   PVTPCBQS+20
PVTFPCBF EQU   PVTPCBQS+16
PVTPCBQR EQU   PVTPCBQS
PVTLPAFX EQU   PVT+1850
PVTLSQAF EQU   PVT+1848
PVTLPAR  EQU   PVT+1844
PVTLPAI  EQU   PVT+1840
PVTLPAFC EQU   PVT+1838
PVTCHUIC EQU   PVT+1836
PVTCOMFX EQU   PVT+1834
PVTSQAFX EQU   PVT+1832
PVTCNTFX EQU   PVT+1830
PVTDEFFX EQU   PVT+1828
PVTFIXOK EQU   PVT+1826
PVTPEROK EQU   PVT+1824
PVTMAXFX EQU   PVT+1822
PVTPERFX EQU   PVT+1820
PVTRSRB  EQU   PVT+1776
PVTRESV5 EQU   PVT+1773
PVTSRBS  EQU   PVT+1772
PVTSSRB  EQU   PVT+1768
PVTACA   EQU   PVTWSAX+1400
PVTSAVE  EQU   PVTWSAX+1328
PVTWSA18 EQU   PVTWSAX+1256
PVTWSA17 EQU   PVTWSAX+1184
PVTWSA16 EQU   PVTWSAX+1112
PVTWSA15 EQU   PVTWSAX+1040
PVTWSA14 EQU   PVTWSAX+968
PVTWSA13 EQU   PVTWSAX+896
PVTWSA12 EQU   PVTWSAX+824
PVTWSA11 EQU   PVTWSAX+752
PVTWSA10 EQU   PVTWSAX+672
PVTWSA9  EQU   PVTWSAX+592
PVTWSA8  EQU   PVTWSAX+504
PVTWSA7  EQU   PVTWSAX+432
PVTWSA6  EQU   PVTWSAX+360
PVTWSA5  EQU   PVTWSAX+288
PVTWSA4  EQU   PVTWSAX+216
PVTWSA3  EQU   PVTWSAX+144
PVTWSA2  EQU   PVTWSAX+72
PVTWSA1  EQU   PVTWSAX
PVTPFTQR EQU   PVTQS+20
PVTRSBQL EQU   PVTQS+18
PVTRSBQF EQU   PVTQS+16
PVTSQAQL EQU   PVTQS+14
PVTSQAQF EQU   PVTQS+12
PVTCFQL  EQU   PVTQS+10
PVTCFQF  EQU   PVTQS+8
PVTRSRVL EQU   PVTQS+6
PVTRSRVF EQU   PVTQS+4
PVTAFQL  EQU   PVTQS+2
PVTAFQF  EQU   PVTQS
PVTSPFR  EQU   PVT+302
PVTCFMCT EQU   PVT+300
PVTSPREC EQU   PVT+296
PVTCAREC EQU   PVT+292
PVTCAOUT EQU   PVT+288
PVTCAIN  EQU   PVT+284
PVTNSWPS EQU   PVT+280
PVTNPREC EQU   PVT+276
PVTSPOUT EQU   PVT+272
PVTSPIN  EQU   PVT+268
PVTVAMR  EQU   PVT+264
PVTVAMO  EQU   PVT+260
PVTVAMI  EQU   PVT+256
PVTNPOUT EQU   PVT+252
PVTNPIN  EQU   PVT+248
PVTPRSET EQU   PVT+244
PVTFRSLT EQU   PVT+240
PVTPAGIO EQU   PVT+236
PVTSWPIO EQU   PVT+232
PVTPSWPP EQU   PVT+228
PVTPPREF EQU   PVT+224
PVTPOPBR EQU   PVT+220
PVTPRELF EQU   PVT+216
PVTPRELV EQU   PVT+212
PVTPFREE EQU   PVT+208
PVTPRELS EQU   PVT+204
PVTPOUT  EQU   PVT+200
PVTPFXLD EQU   PVT+196
PVTPITAS EQU   PVT+192
PVTPSRBP EQU   PVT+188
PVTPDSEG EQU   PVT+184
PVTPCSGB EQU   PVT+180
PVTPCSEG EQU   PVT+176
PVTPINV  EQU   PVT+172
PVTPSWPC EQU   PVT+168
PVTPSOUT EQU   PVT+164
PVTPSWIN EQU   PVT+160
PVTPRCV  EQU   PVT+156
PVTPRCFI EQU   PVT+152
PVTPRCF  EQU   PVT+148
PVTPVRC  EQU   PVT+144
PVTPVRIN EQU   PVT+140
PVTPVRLS EQU   PVT+136
PVTPVEQR EQU   PVT+132
PVTPPIOI EQU   PVT+128
PVTPVRPO EQU   PVT+124
PVTPRFR  EQU   PVT+120
PVTPFP2  EQU   PVT+116
PVTPFP   EQU   PVT+112
PVTPFTE  EQU   PVT+108
PVTPCB   EQU   PVT+104
PVTREP2  EQU   PVT+100
PVTPIOCP EQU   PVT+96
PVTPIOP  EQU   PVT+92
PVTPGFAD EQU   PVT+88
PVTPGFA  EQU   PVT+84
PVTPSQA  EQU   PVT+80
PVTPSINT EQU   PVT+76
PVTSRBID EQU   PVT+68
PVTPCIWA EQU   PVT+64
PVTHQSA  EQU   PVT+62
PVTLQSA  EQU   PVT+60
PVTOROOT EQU   PVT+56
PVTPRCA  EQU   PVT+52
PVTREUS  EQU   PVT+48
PVTSQNPC EQU   PVT+47
PVTSQVRC EQU   PVT+46
PVTRSUS  EQU   PVT+44
PVTVROOT EQU   PVT+40
PVTPCBLO EQU   PVT+38
PVTPCBCT EQU   PVT+36
PVTDFRS  EQU   PVT+34
PVTRSQA  EQU   PVT+32
PVTPTLB  EQU   PVT+31
PVTPCBNO EQU   PVT+30
PVTSRBNO EQU   PVT+29
PVTSQDC  EQU   PVT+28
PVTLCSA  EQU   PVT+26
PVTLPRIV EQU   PVT+24
PVTLVR   EQU   PVT+22
PVTFVR   EQU   PVT+20
PVTLPFN  EQU   PVT+18
PVTFPFN  EQU   PVT+16
PVTPFTP  EQU   PVT+12
PVTSSPIN EQU   PVT+11
PVTPCBS  EQU   PVT+10
PVTPOOL  EQU   PVT+8
PVTAFCOK EQU   PVT+6
PVTAFCLO EQU   PVT+4
PVTAFC   EQU   PVT+2
@NM00049 EQU   PVTFLAG2
PVTRSMGM EQU   PVTFLAG2
PVTDUMP  EQU   PVTFLAG1
PVTSIT   EQU   PVTFLAG1
PVTLSI   EQU   PVTFLAG1
PVTAPREF EQU   PVTFLAG1
PVTPCBLT EQU   PVTFLAG1
PVTSRBIU EQU   PVTFLAG1
PVTBGMS  EQU   PVTFLAG1
PVTPMSG  EQU   PVTFLAG1
ASVTEND  EQU   ASVT+528
ASVTAVAL EQU   ASVTENTY
ASVTAVAI EQU   ASVTFRST
ASVTRS00 EQU   ASVT+520
ASVTMAXU EQU   ASVT+516
ASVTASVT EQU   ASVT+512
ASVTBEGN EQU   ASVT+512
@NM00048 EQU   ASVT
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSMA EQU   ASCBRSM+1
ASCBRV54 EQU   ASCBRSMF
ASCBRV53 EQU   ASCBRSMF
ASCBRV52 EQU   ASCBRSMF
ASCBRV51 EQU   ASCBRSMF
ASCBVEQR EQU   ASCBRSMF
ASCBN2LP EQU   ASCBRSMF
ASCB1LPU EQU   ASCBRSMF
ASCB2LPU EQU   ASCBRSMF
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
SPQERES2 EQU   SPQESECT+12
SPQEKEY  EQU   SPQESECT+11
SPQEID   EQU   SPQESECT+10
SPQERES1 EQU   SPQESECT+9
SPQEOWN  EQU   SPQEFLGS
LASTSPQE EQU   SPQEFLGS
SPSHARE  EQU   SPQEFLGS
WSACASMS EQU   WSAC+60
WSACASMD EQU   WSAC+56
WSACCCH  EQU   WSAC+52
WSACRRSA EQU   WSAC+48
WSACREST EQU   WSAC+44
WSACRSTI EQU   WSAC+40
WSACABTM EQU   WSAC+36
WSACMF1  EQU   WSAC+32
WSACEDS0 EQU   WSAC+28
WSACIOS  EQU   WSAC+24
WSACRTMK EQU   WSAC+20
WSACACR  EQU   WSAC+16
WSACTIME EQU   WSAC+12
WSACOPTM EQU   WSAC+8
WSACGTF  EQU   WSAC+4
WSACCWSA EQU   WSAC
WSAGSCHE EQU   WSAG+40
WSAGREST EQU   WSAG+36
WSAGNQDQ EQU   WSAG+32
WSAGMEMT EQU   WSAG+28
WSAGOPTM EQU   WSAG+24
WSAGSTAT EQU   WSAG+20
WSAGEMS0 EQU   WSAG+16
WSAGSSRS EQU   WSAG+12
WSAGRSM  EQU   WSAG+8
WSAGGMFM EQU   WSAG+4
WSAGPGIO EQU   WSAG
WSALACHP EQU   WSAL+56
WSALRSM  EQU   WSAL+52
WSALEVNT EQU   WSAL+48
WSALSTAE EQU   WSAL+44
WSALSTAT EQU   WSAL+40
WSALWAIT EQU   WSAL+36
WSALPOST EQU   WSAL+32
WSALEXIT EQU   WSAL+28
WSALS2EE EQU   WSAL+24
WSALCIRB EQU   WSAL+20
WSALABTM EQU   WSAL+16
WSALSDMP EQU   WSAL+12
WSALRTM2 EQU   WSAL+8
WSALVALC EQU   WSAL+4
WSALCWSA EQU   WSAL
GBLCELCT EQU   GDA+60
GLBLCELL EQU   GDA+56
PFSTCPAB EQU   GDA+48
VRWLEL   EQU   VRWAITQ+4
VRWFEL   EQU   VRWAITQ
VRPLEL   EQU   VRPOSTQ+4
VRPFEL   EQU   VRPOSTQ
SQASPLFT EQU   GDA+28
VRPQEP   EQU   GDA+12
CSAPQEP  EQU   GDA+8
VRDREG   EQU   GDA+4
RESV     EQU   GVSMFLAG+1
@NM00047 EQU   GDAFLAGS
WAITQUE  EQU   GDAFLAGS
SQATHRS2 EQU   GDAFLAGS
SQATHRS1 EQU   GDAFLAGS
GDAFLAG2 EQU   GDAFLAGS
NIPFOURK EQU   GDAFLAGS
GDAFLAG1 EQU   GDAFLAGS
DQEHRID  EQU   DQEBLKAD
DQFQEPTR EQU   DQESECT
@NM00046 EQU   SCVTSECT+180
@NM00045 EQU   SCVTSECT+176
SCVTPIQE EQU   SCVTSECT+172
@NM00044 EQU   SCVTSECT+168
SCVTPTRM EQU   SCVTSECT+164
@NM00043 EQU   SCVTSECT+160
@NM00042 EQU   SCVTSECT+156
SCVTQCBR EQU   SCVTSECT+152
@NM00041 EQU   SCVTSECT+144
SCVTTQE  EQU   SCVTSECT+140
@NM00040 EQU   SCVTSECT+136
SCVTSVCT EQU   SCVTSECT+132
@NM00039 EQU   SCVTSECT+128
@NM00038 EQU   SCVTSECT+124
SCVTRXLQ EQU   SCVTSECT+120
@NM00037 EQU   SCVTSECT+116
SCVTCTCB EQU   SCVTSECT+112
@NM00036 EQU   SCVTSECT+108
@NM00035 EQU   SCVTSECT+104
@NM00034 EQU   SCVTSECT+100
@NM00033 EQU   SCVTSECT+96
SCVTCOMM EQU   SCVTSECT+92
@NM00032 EQU   SCVTSECT+88
@NM00031 EQU   SCVTSECT+84
@NM00030 EQU   SCVTSECT+80
@NM00029 EQU   SCVTSECT+76
@NM00028 EQU   SCVTSECT+72
SCVTGMBR EQU   SCVTSECT+68
SCVTRPTR EQU   SCVTSECT+64
SCVTHSKP EQU   SCVTSECT+60
@NM00027 EQU   SCVTSECT+56
@NM00026 EQU   SCVTSECT+52
SCVTLFRM EQU   SCVTSECT+48
SCVTCDCL EQU   SCVTSECT+44
@NM00025 EQU   SCVTSECT+40
SCVTRACE EQU   SCVTSECT+36
@NM00024 EQU   SCVTSECT+32
SCVTRMBR EQU   SCVTSECT+28
@NM00023 EQU   SCVTSECT+24
@NM00022 EQU   SCVTSECT+20
@NM00021 EQU   SCVTSECT+16
@NM00020 EQU   SCVTSECT+14
SCVTBR14 EQU   SCVTSECT+12
SCVTSPET EQU   SCVTSECT+8
SCVTPGWR EQU   SCVTSECT+4
SCVTPGTM EQU   SCVTSECT
@NM00019 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00018 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAWA EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00017 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00016 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00015 EQU   CVTFIX+248
@NM00014 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTRV490 EQU   CVTMAP+388
CVTSU    EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTVS1B  EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
@NM00003 EQU   PRDINPUT+382
@NM00002 EQU   PRDINPUT+334
PRDERRID EQU   PRDINPUT+324
@NM00001 EQU   PRDINPUT+292
PRDCVT   EQU   PRDINPUT+288
PRDPSW   EQU   PRDREGS+160
PRDCR    EQU   PRDREGS+96
PRDGPR   EQU   PRDREGS+32
PRDTITLE EQU   PRDINPUT+20
PRDTODVL EQU   PRDINPUT+12
PRDMODNM EQU   PRDINPUT+4
PRDRECID EQU   PRDINPUT+1
@NM00092 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00091 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00090 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00089 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00088 EQU   FLCFSA
@NM00087 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00086 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00085 EQU   FLCIOA
@NM00084 EQU   FLCMCLA+15
@NM00083 EQU   FLCMCLA+14
@NM00082 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00081 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00080 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00079 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00078 EQU   FLCPER
@NM00077 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00076 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00075 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00074 EQU   FLCPIILC
@NM00073 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00072 EQU   FLCSVILC
@NM00071 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00070 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00069 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00308 EQU   @RC00305
@RC00411 EQU   @RC00404
@RF00480 EQU   @EL00007
@ENDDATA EQU   *
         END   IEAVTSDG,(C'PLS1153',0701,78188)
