         TITLE 'IFCDIP00- SYS1.LOGREC INITIALIZATION                   *
                        '
IFCDIP00 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IFCDIP00  78.167'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @10,0                                               0001
@PSTART  LA    @11,4095(,@10)                                      0001
         LA    @12,4095(,@11)                                      0001
         USING @PSTART,@10                                         0001
         USING @PSTART+4095,@11                                    0001
         USING @PSTART+8190,@12                                    0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
WORK1    EQU   2
WORK2    EQU   3
WORK3    EQU   4
WORK4    EQU   5
WORK6    EQU   6
DEVTABLE EQU   7
DEBSTR   EQU   38                       START OF EXTENT - DEB OFFSET
DEBEND   EQU   42                       END OF EXTENT - DEB OFFSET
DEBNMTRK EQU   46                       NUMBER OF TRACK - DEB OFFSET
DEBEXT   EQU   36                      OFFSET OF EXTENT IN DEB
DCBDEBAD EQU   44                      OFFSET FOR DCB DEB POINTER
*  EQUATE TABLE
L0       EQU   0                        * THIS
L1       EQU   1                        *  SET
L2       EQU   2                        *   OF
L3       EQU   3                        *    EQUATES
L4       EQU   4                        *     IS
L5       EQU   5                        *      FOR
L6       EQU   6                        *       OFFSETS
L7       EQU   7                        *        AND
L8       EQU   8                        *         DISPLACEMENTS
L9       EQU   9                        *          AND
L14      EQU   14                       *           LENGTHS
L40      EQU   40
*RCODE = 0; /*INITIALIZE RETURN CODE TO SUCCESSFULL          @G51DGVS*/
         SLR   @15,@15                                             0069
         ST    @15,RCODE                                           0069
*PTRSPOT = R1; /*ESTABLISH ADDRESSABILITY TO PARM FIELD      @G51DGVS*/
         ST    R1,PTRSPOT                                          0070
*IF PARMLEN ^= ZERO THEN /*IF PARM FIELD EXISTS              @G51DGVS*/
         L     @14,PTRSPOT                                         0071
         L     @14,LISTPTR(,@14)                                   0071
         LH    @09,PARMLEN(,@14)                                   0071
         CR    @09,@15                                             0071
         BE    @RF00071                                            0071
*  DO;                                                     /*@G51DGVS*/
*    IF PARMLEN = SIX THEN  /*IF PARAMETER PROPER LENGTH THEN*/    0073
         C     @09,@CF00068                                        0073
         BNE   @RF00073                                            0073
*     DO;                                                  /*@G51DGVS*/
*      IF INARG = FRAMES THEN  /*IF PARAMETER IS FRAMES      @G51DGVS*/
         CLC   INARG(6,@14),@CC00069                               0075
         BNE   @RF00075                                            0075
*        FRAMEYES = ON;                                    /*@G51DGVS*/
         OI    FRAMEYES,B'10000000'                                0076
*      ELSE /*PARM IS IN BUT NOT FRAMES                      @G51DGVS*/
*       DO;                                                /*@G51DGVS*/
         B     @RC00075                                            0077
@RF00075 DS    0H                                                  0078
*        CALL ERRMSG(11);                                  /*@G51DGVS*/
         LA    @01,@AL00078                                        0078
         BAL   @14,ERRMSG                                          0078
*        RCODE = SIXTEEN;                                  /*@G51DGVS*/
         MVC   RCODE(4),@CF00075                                   0079
*       END;                                               /*@G51DGVS*/
*     END;                                                 /*@G51DGVS*/
*    ELSE /*NOT PROPER LENGTH                                @G51DGVS*/
*     DO;                                                  /*@G51DGVS*/
         B     @RC00073                                            0082
@RF00073 DS    0H                                                  0083
*      CALL ERRMSG(11); /*ISSUE IMPROPER PARM FIELD MESSAGE  @G51DGVS*/
         LA    @01,@AL00083                                        0083
         BAL   @14,ERRMSG                                          0083
*      RCODE = SIXTEEN;                                    /*@G51DGVS*/
         MVC   RCODE(4),@CF00075                                   0084
*     END;                                                 /*@G51DGVS*/
*  END;                                                    /*@G51DGVS*/
@RC00073 DS    0H                                                  0087
*IF RCODE = SUCCESS THEN                                           0087
@RF00071 L     @15,RCODE                                           0087
         LTR   @15,@15                                             0087
         BNZ   @RF00087                                            0087
*DO;                                                       /*@G51DGVS*/
*GEN(OPEN (DIPDCB,OUTPUT)); /*OPEN SYS1.LOGREC               @G51DGVS*/
         OPEN (DIPDCB,OUTPUT)
*IF (DIPDCBFL & OPENOK) = OPENOK THEN /*IF SUCCESSFULL OPEN  @G51DGVS*/
         MVC   @TS00001(1),DIPDCBFL                                0090
         NI    @TS00001,X'10'                                      0090
         CLI   @TS00001,X'10'                                      0090
         BNE   @RF00090                                            0090
*  DO;                                                     /*@G51DGVS*/
*    GEN(ENQ (RESID,LOGRECA,E,8,SYSTEM)); /*ENQUEUE SYS1.LOGREC. */
         ENQ (RESID,LOGRECA,E,8,SYSTEM)
*    /*LOCK OUT ALL OTHER USERS IN THE SYSTEM                @G51DGVS*/
*    CALL OLDDIP; /*CREATE HEADER RECORD AND TIME STAMP      @G51DGVS*/
         BAL   @14,OLDDIP                                          0093
*    IF RCODE = SUCCESS &  /*IF SUCCESSFULLY WROTE HEADER, TIME STAMP*/
*       FRAMEYES = ON THEN /*IF USER SPECIFIES WRITE FRAMES  @G51DGVS*/
         L     @15,RCODE                                           0094
         LTR   @15,@15                                             0094
         BNZ   @RF00094                                            0094
         TM    FRAMEYES,B'10000000'                                0094
         BNO   @RF00094                                            0094
*     DO;                                                  /*@VS48735*/
*      CALL NEWDIP; /*WRITE FRAMES TO SYS1.LOGREC            @G51DGVS*/
         BAL   @14,NEWDIP                                          0096
*      IF RCODE = FOUR THEN                                        0097
         CLC   RCODE(4),@CF00073                                   0097
         BNE   @RF00097                                            0097
*        RCODE = SUCCESS;                                  /*@VS48735*/
         SLR   @15,@15                                             0098
         ST    @15,RCODE                                           0098
*     END;                                                 /*@VS48735*/
@RF00097 DS    0H                                                  0100
*    GEN(DEQ (RESID,LOGRECA,8,SYSTEM)); /*OTHER USERS ALLOWED LOGREC*/
@RF00094 DS    0H                                                  0100
         DEQ (RESID,LOGRECA,8,SYSTEM)
*    IF RCODE > TWELVE × FRAMEYES = NO THEN                        0101
         L     @15,RCODE                                           0101
         C     @15,@CF00034                                        0101
         BH    @RT00101                                            0101
         TM    FRAMEYES,B'10000000'                                0101
         BNZ   @RF00101                                            0101
@RT00101 DS    0H                                                  0102
*      DO;                                                 /*@G51DGVS*/
*        RESPECIFY (R6,R7) RESTRICTED;                     /*@G51DGVS*/
*        GENERATE;                                         /*@G51DGVS*/
         L     DEVTABLE,DEVSTORE   GET DEVICE TABLE ENTRY ADDRESS
         L     WORK6,DEBADR        GET DATA EXTENT BLOCK ADDRESS
         MVC   FDAD(L4),DEBEND(WORK6) SET HIGH EXTENT FOR EOF
         MVC   TRBAL(L2),BT(DEVTABLE) SET TRACK BALANCE FOR EOF
*        RESPECIFY (R6,R7) UNRESTRICTED;                   /*@G51DGVS*/
*      END;                                                /*@G51DGVS*/
*    GEN(CLOSE (DIPDCB,DISP));                             /*@G51DGVS*/
@RF00101 DS    0H                                                  0107
         CLOSE (DIPDCB,DISP)
*    IF RCODE < SIXTEEN THEN /*IF LOGREC HAS BEEN INITIALIZED*/    0108
         L     @15,RCODE                                           0108
         C     @15,@CF00075                                        0108
         BNL   @RF00108                                            0108
*      CALL ERRMSG(1); /*ISSUE END OF JOB MESSAGE            @G51DGVS*/
         LA    @01,@AL00109                                        0109
         BAL   @14,ERRMSG                                          0109
*  END;                                                    /*@G51DGVS*/
*ELSE  /*UNSUCCESSFULL OPEN OF SYS1.LOGREC                   @G51DGVS*/
*  DO;                                                     /*@G51DGVS*/
         B     @RC00090                                            0111
@RF00090 DS    0H                                                  0112
*    CALL ERRMSG(2);                                       /*@G51DGVS*/
         LA    @01,@AL00112                                        0112
         BAL   @14,ERRMSG                                          0112
*    RCODE = SIXTEEN;                                      /*@G51DGVS*/
         MVC   RCODE(4),@CF00075                                   0113
*  END;                                                    /*@G51DGVS*/
*END;                                                      /*@G51DGVS*/
@RC00090 DS    0H                                                  0116
*R15 = RCODE;                                              /*@G51DGVS*/
@RF00087 L     R15,RCODE                                           0116
*OLDDIP: PROC; /*BUILD AND WRITE TIME STAMP RECORDS TO LOGREC, FIRST*/
         B     @PB00002                                            0117
OLDDIP   STM   @14,@12,@SA00002                                    0117
*              /*READ OF SRF                                 @G51DGVS*/
*CALL BUILDHDR; /*FORMAT SYS1.LOGREC HEADER FROM CONTROL BLOCK INFO*/
         BAL   @14,BUILDHDR                                        0118
*IF RCODE = SUCCESS THEN /*IF VALID SYSTEM RESIDENCE DEVICE  @G51DGVS*/
         L     @15,RCODE                                           0119
         LTR   @15,@15                                             0119
         BNZ   @RF00119                                            0119
*  CALL WRITELOG(40,WRITEPTR); /*WRITE HEADER TO LOGREC      @G51DGVS*/
         LA    @01,@AL00120                                        0120
         BAL   @14,WRITELOG                                        0120
*IF RCODE = SUCCESS THEN                                           0121
@RF00119 L     @15,RCODE                                           0121
         LTR   @15,@15                                             0121
         BNZ   @RF00121                                            0121
*  DO;                                                     /*@G51DGVS*/
*    BUF240 = (BUF240 && BUF240); /*CONSTRUCT TIME STAMP RECORD OF  */
         XC    BUF240(40),BUF240                                   0123
*                                 /*HEX ZEROS VIA EXCLUSIVE OR      */
*    CALL WRITELOG(40,WRITEPTR); /*WRITE TIME STAMP TO SYS1.LOGREC*/
         LA    @01,@AL00124                                        0124
         BAL   @14,WRITELOG                                        0124
*    IF RCODE = SUCCESS THEN                                       0125
         L     @15,RCODE                                           0125
         LTR   @15,@15                                             0125
         BNZ   @RF00125                                            0125
*      DO;                                                 /*@G51DGVS*/
*        IF FRAMEYES = ON THEN /*IF FRAMES TO BE WRITTEN TO LOGREC*/
         TM    FRAMEYES,B'10000000'                                0127
         BNO   @RF00127                                            0127
*                              /*FOR A MERIDIAN LIKE CPU WITH AN  */
*          DO;                 /*ACCESSIBLE SRF              @G51DGVS*/
*            CALL OPENSRF;         /*OPEN SYSTEM REFERENCE FILE   */
         BAL   @14,OPENSRF                                         0129
*            IF RCODE = SUCCESS THEN                               0130
         L     @15,RCODE                                           0130
         LTR   @15,@15                                             0130
         BNZ   @RF00130                                            0130
*              DO;                                         /*@G51DGVS*/
*                CALL GETSER; /*RETRIEVE CPU SERIAL NUMBER   @G51DGVS*/
         BAL   @14,GETSER                                          0132
*                CALL BUILDFRH; /*BUILD CONSTANT PART OF FRAME HEADER*/
         BAL   @14,BUILDFRH                                        0133
*                CALL VERBPROC;            /* PERFORM VERBAGE        */
         BAL   @14,VERBPROC                                        0134
*                CALL READSRF; /*READ FRAME TEXT ACROSS SYSTEM  */ 0135
         BAL   @14,READSRF                                         0135
*                               /*REFERENCE FILE INTERFACE. SET  */
*                               /*RETURN CODE IF EOF OR FAILURE. */
*                IF RCODE ^= SUCCESS THEN /*IF NOT RETRIEVE FRAME*/
         L     @15,RCODE                                           0136
         LTR   @15,@15                                             0136
         BZ    @RF00136                                            0136
*                  DO;                                     /*@G51DGVS*/
*                    IF RCODE = FOUR THEN /*IF EOF ON 1ST READ*/   0138
         C     @15,@CF00073                                        0138
         BNE   @RF00138                                            0138
*                      CALL ERRMSG(10);                    /*@G51DGVS*/
         LA    @01,@AL00139                                        0139
         BAL   @14,ERRMSG                                          0139
*                    ELSE  /*LEGITIMATE READ ERROR           @G51DGVS*/
*                      CALL ERRMSG(7);                     /*@G51DGVS*/
         B     @RC00138                                            0140
@RF00138 LA    @01,@AL00140                                        0140
         BAL   @14,ERRMSG                                          0140
*                    RCODE = TWELVE; /*INDICATE NO FRAMES RETRIEVED */
@RC00138 MVC   RCODE(4),@CF00034                                   0141
*                  END;                                    /*@G51DGVS*/
*                ELSE /*SUCCESSFUL READ OF A FRAME           @G51DGVS*/
*                  DO;                                     /*@G51DGVS*/
         B     @RC00136                                            0143
@RF00136 DS    0H                                                  0144
*                    READPTR = (READPTR && WRITEPTR);/*SHIFT READ,WRTE*
         L     @15,WRITEPTR                                        0144
         L     @14,READPTR                                         0144
         XR    @14,@15                                             0144
         ST    @14,READPTR                                         0144
*                    WRITEPTR = (WRITEPTR && READPTR);/*BUFFERS VIA 3*/
         XR    @15,@14                                             0145
         ST    @15,WRITEPTR                                        0145
*                    READPTR = (READPTR && WRITEPTR); /*EXCLUSIVE ORS*/
         XR    @14,@15                                             0146
         ST    @14,READPTR                                         0146
*                    RECCNT = 1; /*FIRST FRAME OF THE SET    @G51DGVS*/
         MVI   RECCNT,X'01'                                        0147
*                    SEQCNT = 1; /*FIRST FRAME FOR 50 FRAME LIMIT CK*/
         MVI   SEQCNT,X'01'                                        0148
*                  END;                                    /*@G51DGVS*/
*              END;                                        /*@G51DGVS*/
*            ELSE /*SRF COULD NOT BE OPENED                  @G51DGVS*/
*                CALL ERRMSG(6); /*SRF CANNOT BE OPENED      @G51DGVS*/
         B     @RC00130                                            0151
@RF00130 LA    @01,@AL00151                                        0151
         BAL   @14,ERRMSG                                          0151
*          END;                                            /*@G51DGVS*/
*      END;                                                /*@G51DGVS*/
*    ELSE /*ERROR WRITING TIME STAMP RECORD                  @G51DGVS*/
*      CALL ERRMSG(3);                                     /*@G51DGVS*/
         B     @RC00125                                            0154
@RF00125 LA    @01,@AL00154                                        0154
         BAL   @14,ERRMSG                                          0154
*  END;                                                    /*@G51DGVS*/
*ELSE /*ERROR WRITING HEADER RECORD                          @G51DGVS*/
*  CALL ERRMSG(3);                                         /*@G51DGVS*/
         B     @RC00121                                            0156
@RF00121 LA    @01,@AL00156                                        0156
         BAL   @14,ERRMSG                                          0156
*END; /*END OF PROC OLDDIP                                   @G51DGVS*/
@EL00002 DS    0H                                                  0157
@EF00002 DS    0H                                                  0157
@ER00002 LM    @14,@12,@SA00002                                    0157
         BR    @14                                                 0157
         EJECT
*NEWDIP: PROC; /*READ THE SRF TO GET FRAME TEXT, CONSTRUCT FRAME */
NEWDIP   STM   @14,@12,@SA00003                                    0158
*              /*RECORDS, WRITE THE RECORDS TO SYS1.LOGREC, AND  */
*              /*REWRITE THE SYS1.LOGREC HEADER TO REFLECT FRAMES*/
*        DO WHILE RCODE = SUCCESS; /*DO WHILE NOT EOF OR READ ERROR */
         B     @DE00159                                            0159
@DL00159 DS    0H                                                  0160
*                               /*OR WRITE ERROR.            @G51DGVS*/
*          CALL READSRF; /*READ FRAME ACROSS SYSTEM REFERENCE FILE  */
         BAL   @14,READSRF                                         0160
*                        /*AND IDENTIFY END OF FILE AND ERROR CONDIT*/
*          IF RCODE ^= SUCCESS THEN    /*IF SUCCESSFUL READ  @G51DGVS*/
         L     @15,RCODE                                           0161
         SLR   @14,@14                                             0161
         CR    @15,@14                                             0161
         BE    @RF00161                                            0161
*            DO;                                           /*@G51DGVS*/
*              RECNLST = OFF;/*INDICATE RECORD IN BUFFER IS LAST OF ST*
         NI    RECNLST,B'01111111'                                 0163
*              IF RCODE = FOUR &  /*IF END OF FILE           @G51DGVS*/
*                 FRAMTYPS = MCF THEN /*HAVE BEEN READING MCH FRMS*/
         C     @15,@CF00073                                        0164
         BNE   @RF00164                                            0164
         CLI   FRAMTYPS,X'02'                                      0164
         BNE   @RF00164                                            0164
*                  DO;                                     /*@G51DGVS*/
*                    FRAMTYPS = CCF; /*SET UP TO READ CCF FRAMES  */
         MVI   FRAMTYPS,X'01'                                      0166
*                    RCODE = SUCCESS; /*INDICATE SUCCESS, NOT COMPLETE*
         ST    @14,RCODE                                           0167
*                    SEQCNT = ZERO; /*RESET PHYSICAL SEQUENCE NUMBER  *
         MVI   SEQCNT,X'00'                                        0168
*                                   /*FOR NEXT SET OF FRAMES @G51DGVS*/
*                    CALL VERBPROC;        /* PERFORM VERBAGE        */
         BAL   @14,VERBPROC                                        0169
*                    CALL READSRF; /*READ SRF TO RESET SEQUENCING*/
         BAL   @14,READSRF                                         0170
*                    IF RCODE = FOUR THEN /*IF EOF, NO CCF FRAMES*/
         CLC   RCODE(4),@CF00073                                   0171
         BNE   @RF00171                                            0171
*                      DO;   /*RCODE ALREADY SET TO 8 IF HARD ERROR*/
*                        CALL ERRMSG(10); /*MISSING FRAME SET MESSAGE*/
         LA    @01,@AL00173                                        0173
         BAL   @14,ERRMSG                                          0173
*                        RCODE = EIGHT; /*INDICATE MISSING FRAMES*/
         MVC   RCODE(4),@CF00063                                   0174
*                      END;                                /*@G51DGVS*/
*                  END;                                    /*@G51DGVS*/
*            END;                                          /*@G51DGVS*/
*          ELSE  /*IF SUCCESSFUL READ                        @G51DGVS*/
*            IF RECCNT = MAXFRM THEN /*IF FRAME JUST READ IS ONE TOO*/
         B     @RC00161                                            0178
@RF00161 CLI   RECCNT,50                                           0178
         BNE   @RF00178                                            0178
*              DO;                   /*MANY FOR EREP1 THEN   @G51DGVS*/
*                CALL ERRMSG(8); /*MAXIMUM FRAME NUMBER EXCEEDED MESS*/
         LA    @01,@AL00180                                        0180
         BAL   @14,ERRMSG                                          0180
*                RCODE = EIGHT; /*INDICATE LOST FRAMES       @G51DGVS*/
         MVC   RCODE(4),@CF00063                                   0181
*                RECNLST = OFF; /*SET LAST FRAME SWITCH ON.  @G51DGVS*/
         NI    RECNLST,B'01111111'                                 0182
*                IF FRAMTYPS = MCF THEN /*IF CHANNEL FRAMES LEFT    */
         CLI   FRAMTYPS,X'02'                                      0183
         BNE   @RF00183                                            0183
*                  DO;                                     /*@G51DGVS*/
*                    RCODE = ZERO; /*CONTINUE IN LOOP        @G51DGVS*/
         SLR   @15,@15                                             0185
         ST    @15,RCODE                                           0185
*                    FRAMLOST = ON; /*INDICATE FRAMES LOST WITHOUT*/
         OI    FRAMLOST,B'01000000'                                0186
*                     /*USING RETURN CODE AND EXITING LOOP   @G51DGVS*/
*                    SEQCNT = ZERO; /*RESET FOR CHANNEL FRAMES*/   0187
         MVI   SEQCNT,X'00'                                        0187
*                    FRAMTYPS = CCF; /*PREPARE TO READ CHANNEL FRMS */
         MVI   FRAMTYPS,X'01'                                      0188
*                    CALL VERBPROC;        /* PERFORM VERBAGE        */
         BAL   @14,VERBPROC                                        0189
*                    CALL READSRF; /*READ FRAME OVERLAY TOO MANY FRAME*
         BAL   @14,READSRF                                         0190
*                    IF RCODE = FOUR THEN /*IF END OF FILE ON 1ST */
         CLC   RCODE(4),@CF00073                                   0191
         BNE   @RF00191                                            0191
*                      DO;                /*CCH FRAME READ THEN*/  0192
*                        CALL ERRMSG(10); /*ISSUE MISSING SET MESSAGE*/
         LA    @01,@AL00193                                        0193
         BAL   @14,ERRMSG                                          0193
*                        RCODE = EIGHT; /*INDICATE MISSING FRAMES AND*/
         MVC   RCODE(4),@CF00063                                   0194
*                                       /*EXIT THE LOOP      @G51DGVS*/
*                      END;                                /*@G51DGVS*/
*                  END;                                    /*@G51DGVS*/
*                ELSE /*NO MORE MACHINE FRAMES MUST BE READ  @G51DGVS*/
*                  RCODE = EIGHT; /*DONT ALLOW FRAME JUST READ OR ANY*/
         B     @RC00183                                            0197
@RF00183 MVC   RCODE(4),@CF00063                                   0197
*              END;               /*FURTHER FRAMES TO BE READ        */
@RC00183 DS    0H                                                  0199
*          RECHDR = RECBUILD; /*MOVE BUILT HEADER TO BUFFER  @G51DGVS*/
@RF00178 DS    0H                                                  0199
@RC00161 L     @01,WRITEPTR                                        0199
         MVC   RECHDR(24,@01),RECBUILD                             0199
*          RECCNT = SEQCNT + 1; /*UP INDEX FOR NEXT RECORD   @G51DGVS*/
         SLR   @01,@01                                             0200
         IC    @01,SEQCNT                                          0200
         LA    @01,1(,@01)                                         0200
         STC   @01,RECCNT                                          0200
*          SEQCNT = SEQCNT + 1; /*UP RUNNING SEQUENCE NUMBER OF RECRD*/
         STC   @01,SEQCNT                                          0201
*          RECNLST = ON; /*RESET LAST REC. SWITCH FOR NEXT RECORD*/
         OI    RECNLST,B'10000000'                                 0202
*          IF FRAMTYPS = CCF THEN /*IF NOW READING CHANNEL FRAMES   */
         CLI   FRAMTYPS,X'01'                                      0203
         BNE   @RF00203                                            0203
*            RECTYPE = 'B0'X;     /*THEN SET RECORD TYPE TO CCF FOR */
         MVI   RECTYPE,X'B0'                                       0204
*                                 /*FRAME WRITTEN NEXT LOOP ITERATION*/
*          CALL WRITELOG(1944,WRITEPTR); /*WRITE PREVIOUS FRAME TO LG*/
@RF00203 LA    @01,@AL00205                                        0205
         BAL   @14,WRITELOG                                        0205
*                               /*NOTE ITS LOCATION AND CHECK FOR   */
*                               /*OVERFLOW OF THE EXTENT.    @G51DGVS*/
*                               /*COUNT SUCCESSFUL WRITES OF FRAMES */
*          IF RCODE = SUCCESS THEN                                 0206
         L     @15,RCODE                                           0206
         LTR   @15,@15                                             0206
         BNZ   @RF00206                                            0206
*            ONEFRAME = ON;                                /*@VS48735*/
         OI    ONEFRAME,B'00100000'                                0207
*          READPTR = (READPTR && WRITEPTR); /*SWITCH READ,WRITE*/  0208
@RF00206 L     @15,WRITEPTR                                        0208
         L     @14,READPTR                                         0208
         XR    @14,@15                                             0208
         ST    @14,READPTR                                         0208
*          WRITEPTR = (WRITEPTR && READPTR); /*BUFFERS VIA THREE*/ 0209
         XR    @15,@14                                             0209
         ST    @15,WRITEPTR                                        0209
*          READPTR = (READPTR && WRITEPTR); /*EXCLUSIVE ORS  @G51DGVS*/
         XR    @14,@15                                             0210
         ST    @14,READPTR                                         0210
*         END; /*END OF READ, WRITE LOOP                     @G51DGVS*/
@DE00159 L     @15,RCODE                                           0211
         LTR   @15,@15                                             0211
         BZ    @DL00159                                            0211
*  CALL CLOSESRF; /*DISABLE AND CLOSE SRF                    @G51DGVS*/
         BAL   @14,CLOSESRF                                        0212
*  IF FRAMLOST = ON THEN /*IF FRAMES LOST BUT RCODE NOT SET  @G51DGVS*/
         TM    FRAMLOST,B'01000000'                                0213
         BNO   @RF00213                                            0213
*    RCODE = EIGHT; /*USE RCODE TO PASS RETURN CODE TO USER  @G51DGVS*/
         MVC   RCODE(4),@CF00063                                   0214
*  IF RCODE = EIGHT &   /*IF SOME FRAMES LOST                @G51DGVS*/
*     ONEFRAME = NO THEN /*IF NO FRAMES SUCCESSFULLY WRITTEN @G51DGVS*/
@RF00213 CLC   RCODE(4),@CF00063                                   0215
         BNE   @RF00215                                            0215
         TM    ONEFRAME,B'00100000'                                0215
         BNZ   @RF00215                                            0215
*    RCODE = TWELVE;      /*INDICATE NO FRAMES WRITTEN       @G51DGVS*/
         MVC   RCODE(4),@CF00034                                   0216
*  IF FRAMEYES = YES &  /*IF FRAMES TO BE WRITTEN            @G51DGVS*/
*     RCODE < TWELVE THEN /*IF AT LEAST ONE FRAME WRITTEN SUCCESSFULLY*
@RF00215 TM    FRAMEYES,B'10000000'                                0217
         BNO   @RF00217                                            0217
         L     @15,RCODE                                           0217
         C     @15,@CF00034                                        0217
         BNL   @RF00217                                            0217
*    DO;                                                   /*@G51DGVS*/
*     RESPECIFY (R6,R7) RESTRICTED;                        /*@G51DGVS*/
*     GENERATE;                                            /*@G51DGVS*/
         L     DEVTABLE,DEVSTORE GET DEVICE TABLE ENTRY ADDR.
         L     WORK6,DEBADR      GET DATA EXTENT BLOCK ADDRESS
         MVC   FDAD(L4),DEBEND(WORK6) SET HIGH EXTENT FOR EOF
         MVC   TRBAL(L2),BT(DEVTABLE) SET TRACK BALANCE FOR EOF
         CLOSE (DIPDCB,REREAD)     CLOSE LOGREC FOR NORMAL WRITING
         OPEN  (DIPDCB,UPDAT)    OPEN LOGREC TO REWRITE THE HEADER
         READ  LISTDECB,SF,DIPDCB,HDRSAVE,40,,,,MF=E
         CHECK LISTDECB
*     RESPECIFY (R6,R7) UNRESTRICTED;                      /*@G51DGVS*/
*     CALL REDOHDR; /*RECREATE LOGREC HEADER TO REFLECT FRAMES*/   0222
         BAL   @14,REDOHDR                                         0222
*     GENERATE;                                            /*@G51DGVS*/
         WRITE LISTDECB,SF,DIPDCB,HDRSAVE,40,,,,MF=E
         CHECK LISTDECB
*    END;                                                  /*@G51DGVS*/
*END; /*END OF NEWDIP PROC                                   @G51DGVS*/
@EL00003 DS    0H                                                  0225
@EF00003 DS    0H                                                  0225
@ER00003 LM    @14,@12,@SA00003                                    0225
         BR    @14                                                 0225
*BUILDHDR: PROC; /*FORMAT SYS1.LOGREC HEADER FROM INFO IN SYSTEM */
BUILDHDR STM   @14,@12,@SA00004                                    0226
*                /*CONTROL BLOCKS AND INTERNAL TABLES        @G51DGVS*/
*  CALL GETDEV; /*FIND ENTRY IN INTERNAL DEVICE TABLE FOR SYSRES*/ 0227
         BAL   @14,GETDEV                                          0227
*               /*FORMAT HEADER RECORD FIELDS BUILT FROM DEVTABLE*/
*               /*AND THE DATA EXTENT BLOCK                  @G51DGVS*/
*  CALL RECSTRT; /*CALCULATE START OF RECORD ENTRY AREA AND THE   */
         BAL   @14,RECSTRT                                         0228
*                /*FULL POINT OF SYS1.LOGREC                 @G51DGVS*/
*  GENERATE REFS(BUF240);                                  /*@G51DGVS*/
         MVC   BUF240(40),HDRSAVE      MOVE HEADER TO INITIAL WRITE BF
*END;                                                      /*@G51DGVS*/
@EL00004 DS    0H                                                  0230
@EF00004 DS    0H                                                  0230
@ER00004 LM    @14,@12,@SA00004                                    0230
         BR    @14                                                 0230
*WRITELOG: PROC(INPARM,WHERE);                             /*@G51DGVS*/
WRITELOG STM   @14,@12,@SA00005                                    0231
         MVC   @PC00005(8),0(@01)                                  0231
*                /*WRITE A RECORD TO SYS1.LOGREC USING BSAM. @G51DGVS*/
*                /*RETRIEVE THE ADDRESS OF THE RECORD USING NOTE   */
*                /*CHECK TO SEE IF SYS1.LOGREC EXTENT HAS OVERFLOWED*/
*                /*SET RETURN CODE IF WRITE ERROR OR OVERFLOW EXTENT*/
*DCL INPARM FIXED(31); /*LENGTH OF RECORD TO BE WRITTEN      @G51DGVS*/
*DCL WHERE  PTR(31);  /*WHERE RECORD IS                      @G51DGVS*/
*RESPECIFY (R1,R2,R3) RESTRICTED;                          /*@G51DGVS*/
*R2 = WHERE;  /*ADDRESS OF RECORD TO BE WRITTEN PUT IN REG2  @G51DGVS*/
         L     @15,@PC00005+4                                      0235
         L     R2,WHERE(,@15)                                      0235
*R3 = INPARM; /*LENGTH OF RECORD TO BE WRITTEN               @G51DGVS*/
         L     @15,@PC00005                                        0236
         L     R3,INPARM(,@15)                                     0236
*GENERATE;                                                 /*@G51DGVS*/
DWRITE   WRITE DIPDECB,SF,DIPDCB,(2),(3)
         CHECK DIPDECB
         NOTE  DIPDCB                   RETRIEVE TTR OF RECORD WRITTEN
*TTRSAVE = R1;     /*STORE RELATIVE DIRECT ACCESS LOCATION FROM NOTE*/
         ST    R1,TTRSAVE                                          0238
*RESPECIFY (R1,R2,R3) UNRESTRICTED;                        /*@G51DGVS*/
*IF FRAMEYES = ON &   /*IF FRAMES, CHECK TO SEE IF ENOUGH ROOM ON */
*   TTRSAVE = MAXTTR THEN /*ON LOGREC FOR NEXT WRITE. ASSUME AT   */
         TM    FRAMEYES,B'10000000'                                0240
         BNO   @RF00240                                            0240
         L     @15,TTRSAVE                                         0240
         C     @15,MAXTTR                                          0240
         BNE   @RF00240                                            0240
*                         /*LEAST ONE TRACK FOR HEADER AND TIME STMP*/
*  DO;                                                     /*@G51DGVS*/
*    CALL ERRMSG(4); /*NOT ENOUGH ROOM FOR FRAMES            @G51DGVS*/
         LA    @01,@AL00242                                        0242
         BAL   @14,ERRMSG                                          0242
*    RCODE = SIXTEEN; /*NO ROOM FOR ERROR RECORDS SO BETTER ABORT*/
         MVC   RCODE(4),@CF00075                                   0243
*  END;                                                    /*@G51DGVS*/
*ELSE IF FRAMEYES = ON THEN /*IF SUCCESSFUL WRITE OF A FRAME THEN*/
         B     @RC00240                                            0245
@RF00240 TM    FRAMEYES,B'10000000'                                0245
         BNO   @RF00245                                            0245
*  ONEFRAME = ON; /*AT LEAST ONE FRAME ON LOGREC SUCCESSFULLY*/    0246
         OI    ONEFRAME,B'00100000'                                0246
*GOTO ENDOPROC; /*BOUNCE AROUND THE NON=SYNCHRONOUS ERROR EXIT*/   0247
         B     ENDOPROC                                            0247
*LOGERR:; /*NON-STRUCTURED ASYNCHRONOUS ERROR EXIT           @G51DGVS*/
LOGERR   DS    0H                                                  0249
*IF TTRSAVE < THIRD THEN /*IF WRITING HEADER                 @G51DGVS*/
         L     @15,TTRSAVE                                         0249
         C     @15,THIRD                                           0249
         BNL   @RF00249                                            0249
*  DO;                                                     /*@G51DGVS*/
*    CALL ERRMSG(3);                                       /*@G51DGVS*/
         LA    @01,@AL00251                                        0251
         BAL   @14,ERRMSG                                          0251
*    RCODE = 16;                                           /*@G51DGVS*/
         MVC   RCODE(4),@CF00075                                   0252
*  END;                                                    /*@G51DGVS*/
*ELSE /*ATTEMPTING TO WRITE FRAME                            @G51DGVS*/
*  DO;                                                     /*@G51DGVS*/
         B     @RC00249                                            0254
@RF00249 DS    0H                                                  0255
*    CALL ERRMSG(5);                                       /*@G51DGVS*/
         LA    @01,@AL00255                                        0255
         BAL   @14,ERRMSG                                          0255
*    RCODE = 8;                                            /*@G51DGVS*/
         MVC   RCODE(4),@CF00063                                   0256
*  END;                                                    /*@G51DGVS*/
*ENDOPROC:;                                                /*@G51DGVS*/
*END; /*END OF WRITE TO LOGREC PROC                          @G51DGVS*/
@EL00005 DS    0H                                                  0259
@EF00005 DS    0H                                                  0259
@ER00005 LM    @14,@12,@SA00005                                    0259
         BR    @14                                                 0259
         EJECT
*READSRF: PROC; /*READ SRF, IDENTIFY END OF FILE AND ERROR CONDITIONS*/
READSRF  STM   @14,@12,@SA00006                                    0260
*IF RCODE = SUCCESS THEN DO;                               /*@VS48735*/
         SLR   @15,@15                                             0261
         C     @15,RCODE                                           0261
         BNE   @RF00261                                            0261
* SRFIOBCC = ADDR(RDVERB); /*SET ADDRESS OF FUNCTION SELECT CCW     */
         LA    @14,RDVERB                                          0263
         ST    @14,SRFIOBCC                                        0263
* SRFECB = ZERO; /*CLEAR THE EVENT CONTROL BLOCK             @G51DGVS*/
         ST    @15,SRFECB                                          0264
* RDADR  = READPTR + 24; /*PUT ADDR.OF READ BUFF.INTO CHANNEL PROGFRAM*
         L     @01,READPTR                                         0265
         LA    @01,24(,@01)                                        0265
         STCM  @01,7,RDADR                                         0265
* DO UNTIL POST ^= INTERCPT;/*DO UNTIL REQUEST NOT INTERCEPTED-44*/
@DL00266 DS    0H                                                  0267
*   GENERATE REFS(SRFECB,SRFIOB);                          /*@G51DGVS*/
         EXCP  SRFIOB      ISSUE SVC 0
         WAIT  ECB=SRFECB  WAIT UNTIL FRAME HAS BEEN READ
* END;                                                     /*@G51DGVS*/
@DE00266 CLI   POST,X'44'                                          0268
         BE    @DL00266                                            0268
* IF POST ^= OKAY THEN /*EITHER ERROR OR END OF FILE         @G51DGVS*/
         CLI   POST,X'7F'                                          0269
         BE    @RF00269                                            0269
*   DO;                                                    /*@G51DGVS*/
*     IF POST = EOFMAYBE THEN /*IF POST NON HARD ERROR       @G51DGVS*/
         CLI   POST,X'41'                                          0271
         BNE   @RF00271                                            0271
*       DO;                                                /*@G51DGVS*/
*         IF CHANEND = ON & /*IF CHANNEL END                 @G51DGVS*/
*            DEVEND  = ON & /*IF DEVICE END                  @G51DGVS*/
*            UNITEXCP = ON & /*IF UNIT EXCEPTION             @G51DGVS*/
*            UNCHK = OFF THEN /*IF NOT A UNIT CHECK          @G51DGVS*/
         TM    CHANEND,B'00001101'                                 0273
         BNO   @RF00273                                            0273
         TM    UNCHK,B'00000010'                                   0273
         BNZ   @RF00273                                            0273
*            RCODE = FOUR; /*LEGITIMATE END OF FILE          @G51DGVS*/
         MVC   RCODE(4),@CF00073                                   0274
*         ELSE /*ILLEGITIMATE                                @G51DGVS*/
*           DO;                                            /*@G51DGVS*/
         B     @RC00273                                            0275
@RF00273 DS    0H                                                  0276
*             RCODE = EIGHT; /*UNSUCCESSFUL FRAME READ       @G51DGVS*/
         MVC   RCODE(4),@CF00063                                   0276
*             CALL ERRMSG(7);                              /*@G51DGVS*/
         LA    @01,@AL00277                                        0277
         BAL   @14,ERRMSG                                          0277
*           END;                                           /*@G51DGVS*/
*       END;                                               /*@G51DGVS*/
*     ELSE /*HARD ERROR BY DEFAULT                           @G51DGVS*/
*       DO;                                                /*@G51DGVS*/
         B     @RC00271                                            0280
@RF00271 DS    0H                                                  0281
*         RCODE = EIGHT;                                   /*@G51DGVS*/
         MVC   RCODE(4),@CF00063                                   0281
*         CALL ERRMSG(7);                                  /*@G51DGVS*/
         LA    @01,@AL00282                                        0282
         BAL   @14,ERRMSG                                          0282
*       END;                                               /*@G51DGVS*/
*   END;                                                   /*@G51DGVS*/
*END;                                      /* END OF READ    @VS48735*/
*END; /*END OF PROC READSRF                                  @G51DGVS*/
@EL00006 DS    0H                                                  0286
@EF00006 DS    0H                                                  0286
@ER00006 LM    @14,@12,@SA00006                                    0286
         BR    @14                                                 0286
*VERBPROC:  PROC;         /* PERFORM VERBAGE CCW AND TEST FOR ERROR */
VERBPROC STM   @14,@12,@SA00007                                    0287
*IF FRAMTYPS = CCF THEN                                            0288
         CLI   FRAMTYPS,X'01'                                      0288
         BNE   @RF00288                                            0288
*  SRFIOBF1 = '02'X;                                       /*@VS48735*/
         MVI   SRFIOBF1,X'02'                                      0289
*SRFIOBCC = ADDR(VERBAGE);         /* SET ADDR OF VERBAGE CCW        */
@RF00288 LA    @15,VERBAGE                                         0290
         ST    @15,SRFIOBCC                                        0290
*SRFECB = ZERO;                    /* CLEAR EVENT CTRL BLOCK @VS48735*/
         SLR   @15,@15                                             0291
         ST    @15,SRFECB                                          0291
*DO UNTIL POST ^= INTERCPT;        /* LOOP UNTIL REQUEST NOT INTRCPTD*/
@DL00292 DS    0H                                                  0293
*  GENERATE REFS(SRFECB,SRFIOB);                           /*@VS48735*/
         EXCP  SRFIOB              ISSUE EXCP
         WAIT  ECB=SRFECB          WAIT UNTIL ECB IS POSTED
*END;                                                      /*@VS48735*/
@DE00292 CLI   POST,X'44'                                          0294
         BE    @DL00292                                            0294
*IF POST ^= OKAY THEN              /* IF FRAME READ FAILED   @VS48735*/
         CLI   POST,X'7F'                                          0295
         BE    @RF00295                                            0295
*  DO;                                                     /*@VS48735*/
*    CALL ERRMSG(12);                                      /*@VS48735*/
         LA    @01,@AL00297                                        0297
         BAL   @14,ERRMSG                                          0297
*    RCODE = EIGHT;                                        /*@VS48735*/
         MVC   RCODE(4),@CF00063                                   0298
*  END;                                                    /*@VS48735*/
*END;                              /* END OF VERBPROC PROC   @VS48735*/
@EL00007 DS    0H                                                  0300
@EF00007 DS    0H                                                  0300
@ER00007 LM    @14,@12,@SA00007                                    0300
         BR    @14                                                 0300
*ERRMSG: PROC(MSGNO); /*WRITE TO THE OPERATOR ERROR MESSAGES AND*/ 0301
ERRMSG   STM   @14,@12,@SA00008                                    0301
         MVC   @PC00008(4),0(@01)                                  0301
*                     /*END OF JOB TEXT                      @G51DGVS*/
*DCL MSGNO FIXED(31); /*MESSAGE NUMBER PASSED TO THIS PROC   @G51DGVS*/
*IF MSGNO = 1 THEN                                                 0303
         L     @15,@PC00008                                        0303
         CLC   MSGNO(4,@15),@CF00054                               0303
         BNE   @RF00303                                            0303
*  DO;                                                     /*@G51DGVS*/
*    CALL BUILDTXT; /*MODIFY WTO MESSAGE TEXT                @G51DGVS*/
         BAL   @14,BUILDTXT                                        0305
*    GENERATE;                                             /*@G51DGVS*/
* MSG ALIGNMENT=         *+19   *+26 *+31       *+42       *+53
         CNOP  0,4                      ALIGN MODIFIED TEXT
COMPLETE WTO   'IFC001I  D=XXXX N=0Y F=CCCCHHHH L=CCCCHHHH S=CCCCHHHH02X
                DIP COMPLETE',ROUTCDE=(1),DESC=(6)
*  END; /*END OF GENERATING MESSAGE 1                        @G51DGVS*/
*ELSE /*NOT MESSAGE ONE                                      @G51DGVS*/
*  DO;                                                     /*@G51DGVS*/
         B     @RC00303                                            0308
@RF00303 DS    0H                                                  0309
*    IF MSGNO = 2 THEN                                             0309
         L     @15,@PC00008                                        0309
         CLC   MSGNO(4,@15),@CF00098                               0309
         BNE   @RF00309                                            0309
*      DO;                                                 /*@G51DGVS*/
*        GENERATE;                                         /*@G51DGVS*/
         WTO   'IFC002I SYS1.LOGREC CANNOT BE OPENED',ROUTCDE=(1),     X
               DESC=(6)
*      END;                                                /*@G51DGVS*/
*    ELSE /*NOT 1 NOR 2                                      @G51DGVS*/
*      DO;                                                 /*@G51DGVS*/
         B     @RC00309                                            0313
@RF00309 DS    0H                                                  0314
*        IF MSGNO = 3 THEN                                         0314
         L     @15,@PC00008                                        0314
         CLC   MSGNO(4,@15),@CF00095                               0314
         BNE   @RF00314                                            0314
*          DO;                                             /*@G51DGVS*/
*            RCODE = SIXTEEN; /*PREVENT FURTHER PROCESSING   @G51DGVS*/
         MVC   RCODE(4),@CF00075                                   0316
*            GENERATE;                                     /*@G51DGVS*/
         WTO   'IFC003I SYS1.LOGREC HEADER WRITE ERROR',ROUTCDE=(1),   X
               DESC=(6)
*          END;                                            /*@G51DGVS*/
*        ELSE /*NOT 1,2,3                                    @G51DGVS*/
*          DO;                                             /*@G51DGVS*/
         B     @RC00314                                            0319
@RF00314 DS    0H                                                  0320
*            IF MSGNO = 5 THEN                                     0320
         L     @15,@PC00008                                        0320
         CLC   MSGNO(4,@15),@CF00244                               0320
         BNE   @RF00320                                            0320
*              DO;                                         /*@G51DGVS*/
*              GENERATE;                                   /*@G51DGVS*/
         WTO   'IFC005I SYS1.LOGREC FRAME WRITE ERROR',ROUTCDE=(1),    X
               DESC=(6)
*              END;                                        /*@G51DGVS*/
*            ELSE /*NOT 1,2,3,5                              @G51DGVS*/
*              DO;                                         /*@G51DGVS*/
         B     @RC00320                                            0324
@RF00320 DS    0H                                                  0325
*                IF MSGNO = 4 THEN                                 0325
         L     @15,@PC00008                                        0325
         CLC   MSGNO(4,@15),@CF00073                               0325
         BNE   @RF00325                                            0325
*                  DO;                                     /*@G51DGVS*/
*                    GENERATE;                             /*@G51DGVS*/
         WTO   'IFC004I SYS1.LOGREC ALLOCATION TOO SMALL FOR FRAMES',  X
               ROUTCDE=(1),DESC=(6)
*                  END;                                    /*@G51DGVS*/
*                ELSE /*NOT 1,2,3,4,5                        @G51DGVS*/
*                  DO;                                     /*@G51DGVS*/
         B     @RC00325                                            0329
@RF00325 DS    0H                                                  0330
*                    IF MSGNO = 6 THEN                             0330
         L     @15,@PC00008                                        0330
         CLC   MSGNO(4,@15),@CF00068                               0330
         BNE   @RF00330                                            0330
*                      DO;                                 /*@G51DGVS*/
*                      GENERATE;                           /*@G51DGVS*/
         WTO   'IFC006I SRF CANNOT BE OPENED',ROUTCDE=(1),DESC=(6)
*                      END;                                /*@G51DGVS*/
*                    ELSE /*NOT 1,2,3,4,5, OR 6              @G51DGVS*/
*                      DO;                                 /*@G51DGVS*/
         B     @RC00330                                            0334
@RF00330 DS    0H                                                  0335
*                        IF MSGNO = 7 THEN                         0335
         L     @15,@PC00008                                        0335
         CLC   MSGNO(4,@15),@CF00241                               0335
         BNE   @RF00335                                            0335
*                          DO;                             /*@G51DGVS*/
*                            CALL FILLMESS; /*FILL IN SPECIFICS OF MES*
         BAL   @14,FILLMESS                                        0337
*                            GENERATE;                     /*@G51DGVS*/
SRFWTO   WTO   'IFC007I SRF READ ERROR SENSE=SSSS,CSW=CCCCCCCCCCCCCC,DDX
               =FRAME   ',ROUTCDE=(1),DESC=(6)
*                          END;                            /*@G51DGVS*/
*                        ELSE /*NOT 1,2,3,4,5,6,7            @G51DGVS*/
*                          DO;                             /*@G51DGVS*/
         B     @RC00335                                            0340
@RF00335 DS    0H                                                  0341
*                            IF MSGNO = 8 THEN                     0341
         L     @15,@PC00008                                        0341
         CLC   MSGNO(4,@15),@CF00063                               0341
         BNE   @RF00341                                            0341
*                              DO;                         /*@G51DGVS*/
*                              GENERATE;                   /*@G51DGVS*/
         WTO   'IFC008I MORE THAN 50 FRAMES IN SET',ROUTCDE=(1),       *
               DESC=(6)
*                              END;                        /*@G51DGVS*/
*                            ELSE /*NOT 1,2,3,4,5,6,7,8      @G51DGVS*/
*                              DO;                         /*@G51DGVS*/
         B     @RC00341                                            0345
@RF00341 DS    0H                                                  0346
*                                IF MSGNO = 9 THEN                 0346
         L     @15,@PC00008                                        0346
         CLC   MSGNO(4,@15),@CF00296                               0346
         BNE   @RF00346                                            0346
*                                  DO;                     /*@G51DGVS*/
*                                  RCODE = SIXTEEN; /*ABORT  @G51DGVS*/
         MVC   RCODE(4),@CF00075                                   0348
*                                  GENERATE;               /*@G51DGVS*/
         WTO   'IFC009I INVALID SYSTEM RESIDENCE DEVICE',ROUTCDE=(1),  X
               DESC=(6)
*                                  END;                    /*@G51DGVS*/
*                                ELSE /*NOT 1,2,3,4,5,6,7,8,9*/    0351
*                                  DO;                     /*@G51DGVS*/
         B     @RC00346                                            0351
@RF00346 DS    0H                                                  0352
*                                    IF MSGNO = 10 THEN            0352
         L     @15,@PC00008                                        0352
         CLC   MSGNO(4,@15),@CF00032                               0352
         BNE   @RF00352                                            0352
*                                      DO;                 /*@G51DGVS*/
*                                      GENERATE;           /*@G51DGVS*/
         WTO   'IFC155I FRAME SET MISSING',ROUTCDE=(1),DESC=(6)
*                                      END;                /*@G51DGVS*/
*                                    ELSE IF MSGNO = 11 THEN       0356
         B     @RC00352                                            0356
@RF00352 L     @15,@PC00008                                        0356
         CLC   MSGNO(4,@15),@CF00033                               0356
         BNE   @RF00356                                            0356
*                                      DO;                 /*@G51DGVS*/
*                                      GENERATE;           /*@G51DGVS*/
         WTO   'IFC156I INVALID PARM FIELD',ROUTCDE=(1),DESC=(6)
*                                      END;                /*@G51DGVS*/
*                                  END;                    /*@G51DGVS*/
@RF00356 DS    0H                                                  0360
@RC00352 DS    0H                                                  0361
*                              END;                        /*@G51DGVS*/
@RC00346 DS    0H                                                  0362
*                          END;                            /*@G51DGVS*/
@RC00341 DS    0H                                                  0363
*                      END;                                /*@G51DGVS*/
@RC00335 DS    0H                                                  0364
*                  END;                                    /*@G51DGVS*/
@RC00330 DS    0H                                                  0365
*              END;                                        /*@G51DGVS*/
@RC00325 DS    0H                                                  0366
*          END;                                            /*@G51DGVS*/
@RC00320 DS    0H                                                  0367
*      END;                                                /*@G51DGVS*/
@RC00314 DS    0H                                                  0368
*   END;                                                   /*@G51DGVS*/
@RC00309 DS    0H                                                  0369
* IF MSGNO = TWELVE THEN                                           0369
@RC00303 L     @15,@PC00008                                        0369
         CLC   MSGNO(4,@15),@CF00034                               0369
         BNE   @RF00369                                            0369
*   DO;                                                    /*@G51DGVS*/
*     GENERATE;                                            /*@G51DGVS*/
         WTO   'IFC157I VERBAGE FAILURE',ROUTCDE=(1),DESC=(6)
*   END;                                                   /*@G51DGVS*/
*END; /*END OF PROC ERRMSG                                   @G51DGVS*/
@EL00008 DS    0H                                                  0373
@EF00008 DS    0H                                                  0373
@ER00008 LM    @14,@12,@SA00008                                    0373
         BR    @14                                                 0373
*FILLMESS: PROC; /*INSERT SENSE BYTES, CSW, AND DDNAME INTO  @G51DGVS*/
FILLMESS STM   @14,@12,@SA00009                                    0374
*                /*ERROR MESSAGE NUMBER SEVEN                @G51DGVS*/
*RESPECIFY (R2,R3,R5) RESTRICTED;                          /*@G51DGVS*/
*R5 = ADDR(SRFIOBS1); /*ADDRESS OF SENSE BYTE ONE FROM IOB   @G51DGVS*/
         LA    R5,SRFIOBS1                                         0376
*R2 = ADDR(DSENSE);   /*LOCATION TO BE PLACED IN GENERATED WTO*/   0377
         LA    R2,DSENSE                                           0377
*R3 = FOUR;           /*NUMBER OF PRINTABLE CHARACTERS       @G51DGVS*/
         LA    R3,4                                                0378
*CALL UNPACK;            /*ROUTINE TO CONVERT TO PRINTABLE CHARACTERS*/
         BAL   @14,UNPACK                                          0379
*R5 = ADDR(SRFIOBCS); /*ADDRESS OF LOW ORDER 7 BYTES OF CSW  @G51DGVS*/
         LA    R5,SRFIOBCS                                         0380
*R2 = ADDR(DCSW);     /*LOCATION TO BE PLACED IN GENERATED WTO*/   0381
         LA    R2,DCSW                                             0381
*R3 = EIGHT;          /*NUMBER OF PRINTABLE CHARACTERS       @G51DGVS*/
         LA    R3,8                                                0382
*CALL UNPACK;            /*CONVERT                           @G51DGVS*/
         BAL   @14,UNPACK                                          0383
*R5 = ADDR(SRFIOBCS) + 4; /* ADDR OF LAST THREE BYTES OF CSW @G51DGVS*/
         LA    R5,SRFIOBCS                                         0384
         AL    R5,@CF00073                                         0384
*R2 = ADDR(DCSW2);    /*WHERE PLACED IN WTO MESSAGE          @G51DGVS*/
         LA    R2,DCSW2                                            0385
*R3 = SIX;          /*3 BYTES LEFT TO BE CONVERTED           @G51DGVS*/
         LA    R3,6                                                0386
*CALL UNPACK;           /*CONVERT                            @G51DGVS*/
         BAL   @14,UNPACK                                          0387
*RESPECIFY (R2,R3,R5) UNRESTRICTED;                        /*@G51DGVS*/
*END;  /*END OF PROC FILLMESS                                @G51DGVS*/
@EL00009 DS    0H                                                  0389
@EF00009 DS    0H                                                  0389
@ER00009 LM    @14,@12,@SA00009                                    0389
         BR    @14                                                 0389
*GETSER: PROC; /*RETRIEVE AND FORMAT CPU SERIAL NUMBER AND CPU VERSION*
GETSER   STM   @14,@12,@SA00010                                    0390
*GENERATE REFS(STCPUID);                                   /*@G51DGVS*/
         MODESET MODE=SUP     CHANGE FROM PROBLEM TO SUPERVISOR STATE
*                             MUST BE AUTHORIZED PROGRAM
         STIDP STCPUID        ISSUE STORE CPU-ID
         MODESET MODE=PROB    CHANGE BACK TO PROBLEM PROGRAM STATE
*END; /*END OF PROC GETSER                                   @G51DGVS*/
@EL00010 DS    0H                                                  0392
@EF00010 DS    0H                                                  0392
@ER00010 LM    @14,@12,@SA00010                                    0392
         BR    @14                                                 0392
*OPENSRF: PROC; /*ISSUE OPEN AND ENABLE FOR SRF              @G51DGVS*/
OPENSRF  STM   @14,@12,@SA00011                                    0393
*GEN(OI   SRFDCB+49,X'0C'   SET IFLAGS);                   /*@ZA32455*/
         OI   SRFDCB+49,X'0C'   SET IFLAGS
*GEN(OPEN (SRFDCB,INPUT)); /*ISSUE OPEN MACRO                @G51DGVS*/
         OPEN (SRFDCB,INPUT)
*IF (SRFDCBFL & OPENOK) ^= OPENOK THEN /*IF OPEN WAS NOT SUCCESSFUL*/
         MVC   @TS00001(1),SRFDCBFL                                0396
         NI    @TS00001,X'10'                                      0396
         CLI   @TS00001,X'10'                                      0396
         BE    @RF00396                                            0396
*  RCODE = TWELVE; /*INDICATE NO FRAMES CAN BE RETRIEVED     @G51DGVS*/
         MVC   RCODE(4),@CF00034                                   0397
*ELSE /*SUCCESSFUL OPEN                                      @G51DGVS*/
* DO;                                                      /*@G51DGVS*/
         B     @RC00396                                            0398
@RF00396 DS    0H                                                  0399
*   /*POST IS INITIALIZED TO 00                              @G51DGVS*/
*   /*SRFIOBF1 INDICATING NEITHER COMMAND NOR DATA CHAINING IS ZERO*/
*   /*SRFIOBCC POINTS TO THE ENABLE CHANNEL PROGRAM          @G51DGVS*/
*   DO UNTIL POST ^= INTERCPT; /*LOOP UNTIL IO REQUEST HAS NOT BEEN*/
@DL00399 DS    0H                                                  0400
*                              /*INTERCEPTED                 @G51DGVS*/
*     GENERATE REFS(SRFIOB,SRFECB);                        /*@G51DGVS*/
         EXCP  SRFIOB         ISSUE SVC 0
         WAIT  ECB=SRFECB     WAIT UNTIL ENABLE HAS BEEN SUCCESSFUL
*   END;                                                   /*@G51DGVS*/
@DE00399 CLI   POST,X'44'                                          0401
         BE    @DL00399                                            0401
*   IF POST ^= OKAY THEN  /*IF POST NOT 7F THEN ENABLE FAILED*/    0402
         CLI   POST,X'7F'                                          0402
         BE    @RF00402                                            0402
*     RCODE = TWELVE;                                      /*@G51DGVS*/
         MVC   RCODE(4),@CF00034                                   0403
* END;                                                     /*@G51DGVS*/
*END; /*END OF PROC OPENSRF                                  @G51DGVS*/
@EL00011 DS    0H                                                  0405
@EF00011 DS    0H                                                  0405
@ER00011 LM    @14,@12,@SA00011                                    0405
         BR    @14                                                 0405
*CLOSESRF: PROC; /*DISABLE AND CLOSE THE SRF                 @G51DGVS*/
CLOSESRF STM   @14,@12,@SA00012                                    0406
*    SRFIOBF1 = '00'X; /*SPECIFY TYPE OF CHANNEL PROGRAM IN IOB*/  0407
         MVI   SRFIOBF1,X'00'                                      0407
*    SRFIOBCC = ADDR(DISABLE); /*LOCATE CHANNEL PROGRAM FOR IOB*/  0408
         LA    @15,DISABLE                                         0408
         ST    @15,SRFIOBCC                                        0408
*    SRFECB = ZERO; /*ZERO EVENT CONTROL BLOCK               @G51DGVS*/
         SLR   @15,@15                                             0409
         ST    @15,SRFECB                                          0409
*    DO UNTIL POST ^= INTERCPT; /*LOOP UNTIL IO REQUEST HAS NOT BEEN*/
@DL00410 DS    0H                                                  0411
*                            /*INTERCEPTED                   @G51DGVS*/
*      GENERATE REFS(SRFIOB,SRFECB);                       /*@G51DGVS*/
         EXCP  SRFIOB    ISSUE SVC 0
         WAIT  ECB=SRFECB  WAIT UNTIL DISABLE IS SUCCESSFULL. DONT
*                          CHECK IF FAILS WHO CARES
*    END;                                                  /*@G51DGVS*/
@DE00410 CLI   POST,X'44'                                          0412
         BE    @DL00410                                            0412
*    GEN(CLOSE (SRFDCB,LEAVE)); /*CLOSE SRF DEVICE           @G51DGVS*/
         CLOSE (SRFDCB,LEAVE)
*   END; /*END OF PROC CLOSESRF                              @G51DGVS*/
@EL00012 DS    0H                                                  0414
@EF00012 DS    0H                                                  0414
@ER00012 LM    @14,@12,@SA00012                                    0414
         BR    @14                                                 0414
*BUILDFRH: PROC; /*BUILD CONSTANT PORTION OF FRAME HEADER    @G51DGVS*/
BUILDFRH STM   @14,@12,@SA00013                                    0415
*RESPECIFY (R0,R1) RESTRICTED;                             /*@G51DGVS*/
*PACK(HOLD,CVTRELNO); /*PACK EBCDIC RELEASE NUMBER           @G51DGVS*/
         LA    @15,16                                              0417
         L     @15,CVTBASE(,@15)                                   0417
         AL    @15,@CF00358                                        0417
         PACK  HOLD(8),CVTRELNO-2(2,@15)                           0417
*CVB(RECSYSS,HOLD); /*PLACE BINARY RELEASE IN THE HEADING    @G51DGVS*/
         CVB   @15,HOLD                                            0418
         STC   @15,RECSYSS                                         0418
*GENERATE;                                                 /*@G51DGVS*/
         TIME  DEC                     ISSUE TIME MACRO
*        RECTIME = R0; /*GET HH MM SS TH TIME                @G51DGVS*/
         STCM  R0,15,RECTIME                                       0420
*        RECDAT  = R1; /*GET 00YYDDDC FROM TIME MACRO        @G51DGVS*/
         STCM  R1,15,RECDAT                                        0421
*RESPECIFY (R0,R1) UNRESTRICTED;                           /*@G51DGVS*/
*        IF (CVTDCB & '22'X) = '22'X THEN /*IF VS1 AND DYN.ADR.TRANS*/
         LA    @01,16                                              0423
         L     @01,CVTBASE(,@01)                                   0423
         MVC   @TS00001(1),CVTDCB(@01)                             0423
         NI    @TS00001,X'22'                                      0423
         CLI   @TS00001,X'22'                                      0423
         BNE   @RF00423                                            0423
*          RECSYS = (RECSYS × '40'X);  /*SET VS1 BITS ON     @G51DGVS*/
         OI    RECSYS,X'40'                                        0424
*        IF (CVTDCB & '12'X) = '12'X ×    /*IF MVS OR SVS AND DY.ADR*/
*           (CVTDCB & '11'X) = '11'X THEN /*IF MVS           @G51DGVS*/
@RF00423 LA    @01,16                                              0425
         L     @15,CVTBASE(,@01)                                   0425
         MVC   @TS00001(1),CVTDCB(@15)                             0425
         NI    @TS00001,X'12'                                      0425
         CLI   @TS00001,X'12'                                      0425
         BE    @RT00425                                            0425
         MVC   @TS00001(1),CVTDCB(@15)                             0425
         NI    @TS00001,X'11'                                      0425
         CLI   @TS00001,X'11'                                      0425
         BNE   @RF00425                                            0425
@RT00425 DS    0H                                                  0426
*          RECSYS = (RECSYS × '80'X);  /*SET VS2 BITS ON     @G51DGVS*/
         OI    RECSYS,X'80'                                        0426
*        RECCPU = STCPUID; /*PUT CPU VERSION, CPU MODEL ,CPU SERIAL, */
@RF00425 MVC   RECCPU(8),STCPUID                                   0427
*                         /*AND MAXIMUM EXTENDED LOGOUT LENGTH IN HDR*/
*END; /*END OF PROC BUILDFRH                                 @G51DGVS*/
@EL00013 DS    0H                                                  0428
@EF00013 DS    0H                                                  0428
@ER00013 LM    @14,@12,@SA00013                                    0428
         BR    @14                                                 0428
*REDOHDR:PROC; /*RECREATE HEADER TO REFLECT FRAMES           @G51DGVS*/
REDOHDR  STM   @14,@12,@SA00014                                    0429
*RESPECIFY (R0,R1,R2,R3,R14,R15) RESTRICTED;               /*@G51DGVS*/
*R0 = TTRSAVE; /*LOAD ADDRESS OF LAST WRITTEN RECORD         @G51DGVS*/
         L     R0,TTRSAVE                                          0431
*R2 = ADDR(MBBCCHHR); /*PASS CORE LOCATION FOR ABSOLUTE ADDRESS*/  0432
         LA    R2,MBBCCHHR                                         0432
*R15 = CVTPCNVT; /*LOAD ADDRESS OF CONVERSION ROUTINE        @G51DGVS*/
         LA    @09,16                                              0433
         L     @09,CVTBASE(,@09)                                   0433
         L     R15,CVTPCNVT(,@09)                                  0433
*GENERATE;                                                 /*@G51DGVS*/
         LA    1,DIPDCB   PUT SERERDS DCB ADDRESS IN REG 1
         L     1,DCBDEBAD(1) LOAD DATA EXTENT BLOCK ADDRESS FROM DCB
         LA    3,MYSAVE   ADDRESS MYSAVE WITHOUT NORMAL BASE REGISTER
         STM   9,13,0(3)  SAVE REGISTERS USED BY CONVERSION ROUTINE
         BALR  14,15      LINK TO RELATIVE TO ABSOLUTE D.A. CONV. ROUT.
         LM    9,13,0(3)  RESTORE DIP REGISTERS
*RESPECIFY (R0,R1,R2,R3,R14,R15) UNRESTRICTED;             /*@G51DGVS*/
*GENERATE REFS(BBCCHHR);                                   /*@G51DGVS*/
         MVC   RESTAREA(L7),BBCCHHR   RESTART ADDRESS IN HEADER
         MVC   LASTREU(L7),RESTAREA  LAST RECORD WRITTEN LOCATION
         MVC   BYTREM(L2),ARBSMALL   BYTES REMAINING ON LAST FRAME TRK
         OI    SWITCHES,HDFRSW       SET FRAMES EXIST SWITCH
*END; /*END OF PROC REDOHDR                                  @G51DGVS*/
@EL00014 DS    0H                                                  0437
@EF00014 DS    0H                                                  0437
@ER00014 LM    @14,@12,@SA00014                                    0437
         BR    @14                                                 0437
*GETDEV: PROC;                                             /*@G51DGVS*/
GETDEV   STM   @14,@12,@SA00015                                    0438
*RESPECIFY (R2,R4,R5,R6,R7) RESTRICTED;                    /*@G51DGVS*/
*GENERATE REFS(BADRES,ENDGETDV);                           /*@G51DGVS*/
*****************************************************************
*  THIS SECTION OBTAINS TABLE DATA CORRESPONDING TO THE         *
*  SPECIFIED DEVICE CODE. DEVICE CODE IS OBTAINED FROM THE      *
*  DCB FIELD DCBDEVT (DCB+17).                                  *
*****************************************************************
         MVC   DEVTYPE(L1),DCBDEVT      DEVICE TYPE CODE
         LA    WORK1,DEVTAB             DEVICE DATA TABLE
SEARCH   CLC   DEVTYPE(L1),L0(WORK1)    LOOK FOR ENTRY FOR DEVICE
         BE    SRCHFIN                  BR--SEARCH SUCCESSFUL
         LA    WORK1,L14(WORK1)         UPDATE FOR NEXT DEVICE
         CLI   L0(WORK1),CB            IS THIS THE END OF THE TABLE
         BE    BADRES                   BR--IMPROPER DEVICE
         B     SEARCH                   NEXT ENTRY
SRCHFIN  NI    DEVTYPE,DEVMASK          AND OUT HIGH DIGITS
         LR    DEVTABLE,WORK1           DEVICE TABLE REGISTER
***********************************************************************
*   THIS SECTION FORMATS HEADER RECORD INFORMATION RETRIEVED FROM     *
*   DEVTABLE AND THE DEB FOR SYS1.LOGREC                              *
***********************************************************************
         LA    WORK1,DIPDCB             DCB ADDRESS
         L     WORK6,DCBDEBAD(WORK1)    DEB ADDRESS
BLDHDR   MVC   EXTENT(L8),DEBSTR(WORK6) EXTENT OF SYS1.LOGREC
         MVC   BUFFER(L2),DEBNMTRK(WORK6) TOTAL TRACKS IN EXTENT
***********************************************************************
*THIS CODE ADDED TO ENSURE THAT DO NOT ATTEMPT TO WRITE PAST
*SYS1.LOGREC EXTENT WHEN WRITING FRAMES TO SYS1.LOGREC
         XR    WORK3,WORK3
         LH    WORK4,BT(DEVTABLE)      LOAD BYTES PER TRACK,SYSRES
         D     WORK3,BYTPFRM    DIVIDE BY BYTES PER FRAME PLUS IRG
         LH    WORK3,DEBNMTRK(WORK6)   GET TOTAL TRACKS IN LOGREC
         BCTR  WORK3,0         CHANGE TO RELATIVE TRACK NUMBER
         BCTR  WORK3,0         MAKE ROOM FOR DUMMY END OF FILE
         SLL   WORK3,16        MOVE TO HIGH ORDER HALF WORD IN REG
         SLL   WORK4,8         MOVE FRAMES PER TRACK TO REL. R LOC.
         OR    WORK3,WORK4     ASSEMBLE MAXIMUM TTR0 IN WORK3
         ST    WORK3,MAXTTR    SAVE FOR COMPARE WHILE WRITING
*CODE ABOVE CREATES ARTIFICIAL TTR0 FOR COMPARE TO NOTE RESULT
         MVC   TRKPERCY(L2),TC(DEVTABLE) TRACKS/CYLINDER
         MVC   BYTREM(L2),BTFT(DEVTABLE) BYTES REMAINING ON TRACK
         MVC   BYTONTRK(L2),BT(DEVTABLE) TOTAL BYTES ON TRACK
         MVC   DEVCODE(L1),DEVTYPE      DEVICE CODE
         MVI   CHKBYTE,CB               CHECK BYTE
         MVI   MSGCNT,HEX00      LOGREC FULL MSG COUNT
         ST    DEVTABLE,DEVSTORE SAVE DEVICE TABLE ENTRY ADDRESS
         ST    WORK6,DEBADR      SAVE DATA EXTENT BLOCK ADDRESS
         B     ENDGETDV          GO TO END OF THE PROC
*BADRES:;                                                  /*@G51DGVS*/
BADRES   DS    0H                                                  0442
*        CALL ERRMSG(9);   /* IDENTIFY ILLEGAL SYSRES DEVICE @G51DGVS*/
         LA    @01,@AL00442                                        0442
         BAL   @14,ERRMSG                                          0442
*        RCODE = SIXTEEN; /*DONT FORMAT SYS1.LOGREC          @G51DGVS*/
         MVC   RCODE(4),@CF00075                                   0443
*ENDGETDV:;                                                /*@G51DGVS*/
*RESPECIFY (R2,R4,R5,R6,R7) UNRESTRICTED;                  /*@G51DGVS*/
*END; /*END OF PROC GETDEV                                   @G51DGVS*/
@EL00015 DS    0H                                                  0446
@EF00015 DS    0H                                                  0446
@ER00015 LM    @14,@12,@SA00015                                    0446
         BR    @14                                                 0446
         EJECT
*RECSTRT: PROC;                                            /*@G51DGVS*/
RECSTRT  STM   @14,@12,@SA00016                                    0447
*RESPECIFY (R2,R3,R4,R6,R7) RESTRICTED;                    /*@G51DGVS*/
*GENERATE;                                                 /*@G51DGVS*/
***********************************************************************
*   THIS SECTION WILL COMPUTE THE START OF THE RECORD ENTRY AREA -    *
*   ALWAYS LOCATED AFTER THE HEADER RECORD. ALSO CALCULATION    *
*   OF THE 90 PERCENT FULL POINT OF THE DATA SET.               *
***********************************************************************
         L     DEVTABLE,DEVSTORE        GET DEVICE TABLE ENTRY ADDR.
         L     WORK6,DEBADR             GET DATA EXTENT BLOCK ADDR.
         MVC   RESTARCC(L4),EXTENT      MOVE LOW EXT INTO RESTART
         MVI   RESTARID,L2              ID OF TWO-HEADER RECORD-
         MVC   LASTREU(L7),RESTAREA     MAKE LAST USED THE SAME
         LH    WORK1,BT90P(DEVTABLE)    GET 90 PERCENT POINT
         MH    WORK1,BUFFER             MULTIPLY TO GET 90 PER
         LH    WORK2,BT(DEVTABLE)       BYTES/TRACK
         XR    WORK3,WORK3              CLEAR REG
UPDA     CLR   WORK1,WORK2              COMPARE BYTES/TRK WITH
*                                        90 PERCENT POINT
         BL    UPDAT                    BRANCH--90 PERCENT LOWER
         SR    WORK1,WORK2              SUBT BYTES
         LA    WORK3,L1(WORK3)          DEVELOP TTR-90 PER TRK
         B     UPDA                     AGAIN
UPDAT    SR    WORK2,WORK1              SUBTRACT FROM MAXIMUM
         STH   WORK2,BUFFER             SAVE REMAINDER BYTES
         MVC   EWMC(L2),BUFFER          EARLY WARN MESSAGE COUNT
         LH    WORK1,TC(DEVTABLE)       TRACKS/CYLINDER
         LH    WORK2,EXTENTLH           LOW EXTENT
         AR    WORK2,WORK3              ACTUAL TRK ADDRESS
         LA    WORK1,L1(WORK1)          ADD ONE FOR HIGH TRK ADR
         XR    WORK3,WORK3              CLEAR REG
UPDATE   CLR   WORK2,WORK1              COMPARE TRKS/CYL WITH
*                                        90 PERCENT TRACK
         BL    UPDATE1                  BRANCH--90 PERCENT LOW
         SR    WORK2,WORK1              SUBT TRACKS
         LA    WORK3,L1(WORK3)          DEVELOP CYLINDER INCR
         B     UPDATE                   CONTINUE
UPDATE1  STH   WORK2,BUFFERTA           SAVE TRACK ADDRESS
         LH    WORK2,EXTENT             STARTING CYLINDER ADR
         AR    WORK2,WORK3              ADD IN CYLINDER INCREMENT
         STH   WORK2,BUFFER             STORE IT
         MVC   EWMT(L4),BUFFER          MOVE IT TO 90 PERCENT
*                                        TRACK POINTER FIELD
         MVI   SWITCHES,L0              CLEAR SWITCH AREA
*RESPECIFY (R2,R3,R4,R6,R7) UNRESTRICTED;                  /*@G51DGVS*/
*END; /*END OF PROC RECSTRT                                  @G51DGVS*/
@EL00016 DS    0H                                                  0451
@EF00016 DS    0H                                                  0451
@ER00016 LM    @14,@12,@SA00016                                    0451
         BR    @14                                                 0451
         EJECT
*BUILDTXT: PROC;                                           /*@G51DGVS*/
BUILDTXT STM   @14,@12,@SA00017                                    0452
*RESPECIFY (R2,R3,R5,R7) RESTRICTED;                       /*@G51DGVS*/
*GENERATE;                                                 /*@G51DGVS*/
***********************************************************************
* CONVERT HEADER RECORD INFORMATION TO EBCDIC                         *
* PLACE EBCDIC IN WTO END OF JOB MESSAGE                              *
***********************************************************************
         L     WORK4,EXTENT             LOW EXTENT
         LA    WORK1,F                  IMAGE AREA
         LA    WORK2,L8                 NUMBER OF CHAR TO CONVERT
*        CALL  UNPACK;                  /*CONVERT TO PRINTABLE*/   0455
         BAL   @14,UNPACK                                          0455
*GENERATE;                                                 /*@G51DGVS*/
         LA    WORK2,L8                 NUMBER OF CHAR TO CONVERT
         L     WORK4,EXTENTHI           HIGH EXTENT
         LA    WORK1,L                  IMAGE AREA
*        CALL  UNPACK;                  /*CONVERT TO PRINTABLE*/   0457
         BAL   @14,UNPACK                                          0457
*GENERATE;                                                 /*@G51DGVS*/
         ICM   WORK4,15,RESTAREA+2         RESTART AREA IN HEADER
         LA    WORK2,L8                 MAKE CCHH PRINTABLE
         LA    WORK1,S                  LOCATION IN MESSAGE
*        CALL  UNPACK;                  /*CONVERT TO PRINTABLE*/   0459
         BAL   @14,UNPACK                                          0459
*GENERATE;                                                 /*@G51DGVS*/
         ICM   WORK4,15,RESTAREA+6         RESTART RECORD ADDR. IN HDR
         LA    WORK2,L2                 RECORD ADDRESS IS 2 PRINT DIG.
         LA    WORK1,S+8                WHERE TO PUT IN MESSAGE
*        CALL  UNPACK;                  /*CONVERT TO PRINTABLE*/   0461
         BAL   @14,UNPACK                                          0461
*GENERATE;                                                 /*@G51DGVS*/
         L     DEVTABLE,DEVSTORE        LOAD ENTRY ADDRESS OF SYSRES
         MVC   D(L4),DN(DEVTABLE)       DEVICE NAME
         MVC   N(L1),PDC(DEVTABLE)      DEVICE CODE
D        EQU   COMPLETE+19              DEVICE NAME
N        EQU   COMPLETE+27              DEVICE TYPE CODE
F        EQU   COMPLETE+31              FIRST TRACK ADDRESS
L        EQU   COMPLETE+42              LAST TRACK ADDRESS
S        EQU   COMPLETE+53              RECORD START ADDRESS+ID
*END; /*END OF PROC BUILDPROC                                @G51DGVS*/
@EL00017 DS    0H                                                  0463
@EF00017 DS    0H                                                  0463
@ER00017 LM    @14,@12,@SA00017                                    0463
         BR    @14                                                 0463
*UNPACK: PROC;                                             /*@G51DGVS*/
UNPACK   STM   @14,@12,@SA00018                                    0464
*RESPECIFY (R4) RESTRICTED;                                /*@G51DGVS*/
*GENERATE;                                                 /*@G51DGVS*/
***********************************************************************
*
***      ROUTINE TO UNPACK CHARACTERS FOR PRINT
*
*        WORK1 -   ADDRESS OF CONVERTED CHARACTERS                    *
*        WORK4 -   CONTAINS CHARACTERS TO BE CONVERTED                *
*        WORK2 -   CONTAINS NUMBER OF PRINTABLE CHARACTERS TO BE      *
*                  CREATED                                            *
***********************************************************************
UNPACK1  XR    WORK3,WORK3              CLEAR REG
         SLDL  WORK3,L4                 POSITION
         IC    WORK3,TABLE(WORK3)       PRINTABLE CHARACTER
         STC   WORK3,L0(WORK1)          STORE IT
         LA    WORK1,L1(WORK1)          UPDATE
         BCT   WORK2,UNPACK1            NEXT
*RESPECIFY (R2,R3,R4,R5) UNRESTRICTED;                     /*@G51DGVS*/
*END; /*END OF UNPACK PROC                                   @G51DGVS*/
@EL00018 DS    0H                                                  0468
@EF00018 DS    0H                                                  0468
@ER00018 LM    @14,@12,@SA00018                                    0468
         BR    @14                                                 0468
@PB00018 DS    0H                                                  0469
*GENERATE DATA DEFS(DSENSE,DCSW,DCSW2,DIPDCBFL,SRFDCB,SRFDCBFL,    0469
*                   TTRSAVE,MAXTTR,THIRD);                 /*@VS48735*/
*RESPECIFY (R2,R3,R4,R7) UNRESTRICTED;                     /*@G51DGVS*/
*END; /*END OF EXTERNAL PROC IFCDIP00                        @G51DGVS*/
@EL00001 L     @13,4(,@13)                                         0471
@EF00001 DS    0H                                                  0471
@ER00001 L     @14,12(,@13)                                        0471
         LM    @00,@12,20(@13)                                     0471
         BR    @14                                                 0471
@DATA    DS    0H
         DS    0F
@AL00078 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00083 DC    A(@CF00033)             LIST WITH   1 ARGUMENT(S)
@AL00109 DC    A(@CF00054)             LIST WITH   1 ARGUMENT(S)
@AL00112 DC    A(@CF00098)             LIST WITH   1 ARGUMENT(S)
@AL00120 EQU   *                       LIST WITH   2 ARGUMENT(S)
@AL00124 DC    A(@CF00195)             LIST WITH   2 ARGUMENT(S)
         DC    A(WRITEPTR)
@AL00139 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00173 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00193 DC    A(@CF00032)             LIST WITH   1 ARGUMENT(S)
@AL00140 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00277 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00282 DC    A(@CF00241)             LIST WITH   1 ARGUMENT(S)
@AL00151 DC    A(@CF00068)             LIST WITH   1 ARGUMENT(S)
@AL00154 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00156 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00251 DC    A(@CF00095)             LIST WITH   1 ARGUMENT(S)
@AL00180 DC    A(@CF00063)             LIST WITH   1 ARGUMENT(S)
@AL00205 DC    A(@CF00192)             LIST WITH   2 ARGUMENT(S)
         DC    A(WRITEPTR)
@AL00242 DC    A(@CF00073)             LIST WITH   1 ARGUMENT(S)
@AL00255 DC    A(@CF00244)             LIST WITH   1 ARGUMENT(S)
@AL00297 DC    A(@CF00034)             LIST WITH   1 ARGUMENT(S)
@AL00442 DC    A(@CF00296)             LIST WITH   1 ARGUMENT(S)
         DS    0F
@SA00001 DS    18F
@SA00008 DS    15F
@PC00008 DS    1F
@SA00002 DS    15F
@SA00003 DS    15F
@SA00004 DS    15F
@SA00005 DS    15F
@PC00005 DS    2F
@SA00011 DS    15F
@SA00010 DS    15F
@SA00013 DS    15F
@SA00007 DS    15F
@SA00006 DS    15F
@SA00012 DS    15F
@SA00014 DS    15F
@SA00015 DS    15F
@SA00016 DS    15F
@SA00017 DS    15F
@SA00009 DS    15F
@SA00018 DS    15F
         DS    0F
@CF00054 DC    F'1'
@CF00098 DC    F'2'
@CF00095 DC    F'3'
@CF00073 DC    F'4'
@CF00244 DC    F'5'
@CF00068 DC    F'6'
@CF00241 DC    F'7'
@CF00063 DC    F'8'
@CF00296 DC    F'9'
@CF00032 DC    F'10'
@CF00033 DC    F'11'
@CF00034 DC    F'12'
@CF00075 DC    F'16'
@CF00195 DC    F'40'
@CF00192 DC    F'1944'
@CF00358 DC    F'-4'
         DS    0D
RCODE    DC    F'0'
PTRSPOT  DC    A(0)
READPTR  DC    AL4(BUF1)
WRITEPTR DC    AL4(BUF2)
SEQCNT   DC    AL1(0)
         DS    CL7
SRFECB   DC    F'0'
         ORG   SRFECB
POST     DS    CL1
@NM00001 DS    CL3
         ORG   SRFECB+4
@TS00001 DS    CL1
@CC00069 DC    C'FRAMES'
LOGRECA  DC    CL8'RECORDER'
RESID    DC    CL8'LOGREC'
         DS    CL5
ENABLE   DS    CL8
         ORG   ENABLE
ENABLECC DC    X'A3'
ENABLE00 DC    X'000000'
ENABLFLG DC    X'2000'
ENABLCNT DC    H'1'
         ORG   ENABLE+8
DISABLE  DS    CL8
         ORG   DISABLE
DISABCC  DC    X'C3'
DISAB00  DC    X'000000'
DISAFLG  DC    X'2000'
DISACNT  DC    H'1'
         ORG   DISABLE+8
RDCPUID  DS    CL8
         ORG   RDCPUID
CPUCC    DC    X'FE'
CPUADR   DC    AL3(STCPUID)
CPUFLGS  DC    X'2000'
CPUCNT   DC    H'8'
         ORG   RDCPUID+8
STCPUID  DS    CL8
         ORG   STCPUID
STCPUVER DC    X'00'
STCPUSER DC    X'000000'
STCPUMOD DC    X'0000'
STCPUMCL DC    X'0000'
         ORG   STCPUID+8
VERBAGE  DS    CL8
         ORG   VERBAGE
VERBCC   DC    X'69'
VERBADR  DC    AL3(FRAMTYPS)
VERBFLG  DC    X'2000'
VERBCNT  DC    H'1'
         ORG   VERBAGE+8
FRAMTYPS DC    X'02'
         DS    CL7
RDVERB   DS    CL8
         ORG   RDVERB
RDCC     DC    X'32'
RDADR    DC    AL3(0)
RDFLG    DC    X'2000'
RDCNT    DC    H'1920'
         ORG   RDVERB+8
SWITCH   DC    X'0000'
         ORG   SWITCH
FRAMEYES DS    BL1
FRAMLOST EQU   SWITCH+0
ONEFRAME EQU   SWITCH+0
         ORG   SWITCH+2
         DS    CL6
SRFIOB   DS    CL32
         ORG   SRFIOB
SRFIOBF1 DC    X'00'
SRFIOBF2 DC    X'00'
SRFIOBS1 DC    X'00'
SRFIOBS2 DC    X'00'
SRFIOBEC DC    AL4(SRFECB)
         ORG   SRFIOBEC
SRFIOBCO DS    CL1
         ORG   SRFIOB+8
SRFIOBF3 DC    X'00'
SRFIOBCS DS    CL7
         ORG   SRFIOBCS
CCWADR   DC    X'000000'
CSWSTAT  DC    X'0000'
         ORG   CSWSTAT
ATTENTIN DS    BL1
STATMOD  EQU   CSWSTAT+0
CUEND    EQU   CSWSTAT+0
BUSY     EQU   CSWSTAT+0
CHANEND  EQU   CSWSTAT+0
DEVEND   EQU   CSWSTAT+0
UNCHK    EQU   CSWSTAT+0
UNITEXCP EQU   CSWSTAT+0
PCI      DS    BL1
ILC      EQU   CSWSTAT+1
PROGCHK  EQU   CSWSTAT+1
PROTEXP  EQU   CSWSTAT+1
CHANDCK  EQU   CSWSTAT+1
CHANCCK  EQU   CSWSTAT+1
INTCONCK EQU   CSWSTAT+1
CHAINCK  EQU   CSWSTAT+1
         ORG   SRFIOBCS+5
BYTCNT   DC    X'0000'
         ORG   SRFIOB+16
SRFIOBCC DC    AL4(ENABLE)
         ORG   SRFIOBCC
SRFIOBSI DS    CL1
         ORG   SRFIOB+20
SRFIOBDC DC    AL4(SRFDCB)
         ORG   SRFIOBDC
SRFIOBRS DS    CL1
         ORG   SRFIOB+24
SRFIOBRA DC    A(0)
         ORG   SRFIOBRA
SRFIOBRM DS    CL1
         ORG   SRFIOB+28
SRFIOBBC DC    X'0000'
SRFIOBNR DC    H'0'
         ORG   SRFIOB+32
BUF1     DS    CL1944
BUF2     DS    CL1944
         ORG   BUF2
BUF240   DS    CL40
         ORG   BUF2+1944
RECBUILD DS    CL24
         ORG   RECBUILD
RECTYPE  DC    X'A0'
RECSYS   DC    X'00'
RECSW0   DC    X'8800'
         ORG   RECSW0
RECNLST  DS    BL1
RECTOD   EQU   RECSW0+0
RECTRU   EQU   RECSW0+0
@NM00002 EQU   RECSW0+0
RECTIM   EQU   RECSW0+0
@NM00003 EQU   RECSW0+0
RECMP    EQU   RECSW0+1
RECCP    EQU   RECSW0+1
@NM00004 EQU   RECSW0+1
         ORG   RECBUILD+4
@NM00005 DC    X'0000'
RECCNT   DC    AL1(0)
@NM00006 DC    X'00'
RECDAT   DC    X'00000000'
RECTIME  DC    X'00000000'
RECCPU   DC    X'0000000000000000'
         ORG   RECBUILD+24
HOLD     DC    X'0000000000000000'
MBBCCHHR DS    CL8
         ORG   MBBCCHHR
M        DS    CL1
BBCCHHR  DS    CL7
         ORG   BBCCHHR
BB       DS    CL2
CCHHR    DS    CL5
         ORG   MBBCCHHR+8
IFCDIP00 CSECT
***********************************************************************
*   DEVICE TABLE - THIS TABLE CONTAINS DATA PERTAINING TO THE         *
*   DEVICES CURRENTLY SUPPORTED AS SYSTEM RESIDENCE DEVICES.          *
***********************************************************************
         DS    0D
* TABLE ENTRY - 2311 DISK STORAGE DRIVE
DEVTAB   DC    X'21'                    DEVICE CODE
         DC    C'1'                     PRINTABLE DEVICE CODE
         DC    AL2(3419)                BYTES/TRACK-FIRST TRACK
         DC    AL2(3625)                BYTES/TRACK
         DC    AL2(9)                   TRACKS/CYLINDER
         DC    AL2(3263)                BYTES/TRACK-90 PERCENT
         DC    C'2311'                  DEVICE NAME
         SPACE 1
* TABLE ENTRY - 2301 PARALLEL FILE
         DC    X'22'                    DEVICE CODE
         DC    C'2'                     PRINTABLE DEVICE CODE
         DC    AL2(20137)               BYTES/TRACK-FIRST TRACK
         DC    AL2(20483)               BYTES/TRACK
         DC    AL2(199)                 TRACKS/CYLINDER
         DC    AL2(18385)               BYTES/TRACK-90 PERCENT
         DC    C'2301'                  DEVICE NAME
         SPACE 1
* TABLE ENTRY - 2303 SERIAL DRUM
         DC    X'23'                    DEVICE CODE
         DC    C'3'                     PRINTABLE DEVICE CODE
         DC    AL2(4596)                BYTES/TRACK-FIRST TRACK
         DC    AL2(4892)                BYTES/TRACK
         DC    AL2(9)                   TRACKS/CYLINDER
         DC    AL2(4403)                BYTES/TRACK-90 PERCENT
         DC    C'2303'                  DEVICE NAME
         SPACE 1
* TABLE ENTRY - 2302 DISK STORAGE
         DC    X'24'                    DEVICE CODE
         DC    C'4'                     PRINTABLE DEVICE CODE
         DC    AL2(4778)                BYTES/TRACK-FIRST TRACK
         DC    AL2(4984)                BYTES/TRACK
         DC    AL2(45)                  TRACKS/CYLINDER
         DC    AL2(4486)                BYTES/TRACK-90 PERCENT
         DC    C'2302'                  DEVICE NAME
         SPACE 1
* TABLE ENTRY - 2305 DRUM (ZEUS) MODEL 1
         DC    X'26'                    DEVICE CODE
         DC    C'6'                     PRINTABLE DEVICE CODE
         DC    AL2(13192)               BYTES/TRACK-FIRST TRACK
         DC    AL2(14136)               BYTES/TRACK     XA01893/YA01527
         DC    AL2(7)                   TRACKS/CYLINDER XA01893/YA01527
         DC    AL2(13194)               BYTES/TRACK-90  XA01893/YA01527
         DC    C'2305'                  DEVICE NAME
         SPACE 1
* TABLE ENTRY - 2305 DRUM (ZEUS) MODEL 2
         DC    X'27'                    DEVICE CODE
         DC    C'7'                     PRINTABLE DEVICE CODE
         DC    AL2(14184)               BYTES/TRACK-FIRST TRACK
         DC    AL2(14660)               BYTES/TRACK     XA01893/YA01527
         DC    AL2(7)                   TRACKS/CYLINDER XA01893/YA01527
         DC    AL2(12723)               BYTES/TRACK-90  XA01893/YA01527
         DC    C'2305'                  DEVICE NAME
         SPACE 1
* TABLE ENTRY - 2314 DISK
         DC    X'28'                    DEVICE CODE
         DC    C'8'                     PRINTABLE DEVICE CODE
         DC    AL2(7008)                BYTES/TRACK-FIRST TRACK
         DC    AL2(7294)                BYTES/TRACK
         DC    AL2(19)                  TRACKS/CYLINDER
         DC    AL2(6565)                BYTES/TRACK-90 PERCENT
         DC    C'2314'                  DEVICE NAME
         SPACE 1
* TABLE ENTRY - 3330 DISK (MERLIN)
         DC    X'29'                   DEVICE CODE
         DC    C'9'                    PRINTABLE DEVICE CODE
         DC    AL2(12680)               BYTES/TRACK-FIRST TRACK
         DC    AL2(13030)              BYTES/TRACK
         DC    AL2(18)                 TRACK/CYLINDER
         DC    AL2(11727)              BYTES/TRACK-90 PERCENT
         DC    C'3330'                 DEVICE NAME
         SPACE
* TABLE ENTRY - 3340 DISK (WINCHESTER)
         DC    X'2A'                   DEVICE CODE              XL03130
         DC    C'A'                    PRINTABLE DEVICE CODE    XL03130
         DC    AL2(7954)                BYTES/TRACK-FIRST TRACK
         DC    AL2(8368)               BYTES/TRACK              XL03130
         DC    AL2(11)                 TRACK/CYLINDER           XL03130
         DC    AL2(7531)               BYTES/TRACK-90 PERCENT   XL03130
         DC    C'3340'                 DEVICE NAME              XL03130
         SPACE 1
** TABLE ENTRY - 3350 DISK(MADRID)
         DC    X'2B'               DEVICE CODE
         DC    C'B'                PRINTABLE DEVICE CODE
         DC    AL2(18800)          BYTES/TRACK-FIRST TRACK
         DC    AL2(19069)          BYTES/TRACK
         DC    AL2(29)             TRACKS/CYLINDER             X14318CG
         DC    AL2(17162)          BYTES/TRACK-90
         DC    C'3350'             DEVICE NAME
         SPACE
* TABLE ENTRY - 3330-1 DISK (ICEBERG)
         DC    X'2D'                   DEVICE CODE              XL03145
         DC    C'D'                    PRINTABLE DEVICE CODE    XL03145
         DC    AL2(12680)               BYTES/TRACK-FIRST TRACK
         DC    AL2(13030)              BYTES/TRACK              XL03145
         DC    AL2(18)                 TRACK/CYLINDER           XL03145
         DC    AL2(11727)              BYTES/TRACK-90 PERCENT   XL03145
         DC    C'3330'                 DEVICE NAME              XL03145
         SPACE
         DC    X'FF'                   TERMINATE TABLE
         SPACE
*
DC       EQU   0                        DEVICE CODE OFFSET
PDC      EQU   1                        PRINTABLE DEVICE CODE OFF
BTFT     EQU   2                        BYTES/TRK-FIRST TRK OFFSE
BT       EQU   4                        BYTES/TRACK OFFSET
TC       EQU   6                        TRACK/CYLINDER OFFSET
BT90P    EQU   8                        90 PERCENT BYTES/TRK OFFS
DN       EQU   10                       DEVICE NAME OFFSET
CB       EQU   X'FF'                    CHECK BYTE VALUE
HEX00    EQU   X'00'
HDFRSW   EQU   X'20'                    FRAMES EXIST SWITCH
***********************************************************************
*    THIS IS THE WRITE AREA FOR THE HEADER RECORD. THE BREAK-   *
*    DOWN IS DESCRIBED BELOW.                                   *
***********************************************************************
         DS    0F
         DC    X'0000'                  POSITION
HDRSAVE DC    X'FFFF'                  RECORD ID
         DC    5XL8'0'                  BUFFER
*
EXTENT   EQU   HDRSAVE+2               LOW AND HIGH EXTENT
MSGCNT   EQU   HDRSAVE+10       COUNT OF LOGREC FULL MSG      @XA07072
RESTAREA EQU   HDRSAVE+11              RE START AREA-BBCCHHR
BYTREM   EQU   HDRSAVE+18              BYTES REMAINING ON TRACK
BYTONTRK EQU   HDRSAVE+20              TOTAL BYTES ON TRACK
LASTREU  EQU   HDRSAVE+22              LAST RE USED-BBCCHHR
TRKPERCY EQU   HDRSAVE+29              TRACKS/CYLINDER
EWMC     EQU   HDRSAVE+31              90 PERCENT TRACK COUNT
DEVCODE  EQU   HDRSAVE+33              DEVICE CODE
EWMT     EQU   HDRSAVE+34              90 PERCENT TRACK-CCHH
SWITCHES EQU   HDRSAVE+38              SWITCHES
CHKBYTE  EQU   HDRSAVE+39              CHECK BYTE-'FF'
*
EXTENTLH EQU   EXTENT+2                 LOW EXTENT HEAD ADDRESS
EXTENTHI EQU   EXTENT+4                 HIGH EXTENT
RESTARCC EQU   RESTAREA+2               CCHH AREA OF HEADER
RESTARID EQU   RESTAREA+6               ID AREA OF HEADER
DSENSE   EQU   SRFWTO+37              WTO SENSE CHARACTERS
DCSW     EQU   SRFWTO+46              1ST 8 BYTES CSW
DCSW2    EQU   SRFWTO+54              LAST 6 BYTES CSW
*****************************************************************
*                                                               *
*        DCB FOR THE SYS1.LOGREC DATA SET                       *
*                                                               *
*****************************************************************
DIPDCB   DCB   DDNAME=SERERDS,                                         X
               DSORG=PS,                                               X
               MACRF=(RP,WP),                                          X
               RECFM=U,                                                X
               BLKSIZE=1944,                                           X
               DEVD=DA,                                                X
               SYNAD=LOGERR
*******************************************************************
*                                                                 *
*      DCB FOR READING THE SYSTEM REFERENCE FILE                  *
*                                                                 *
*******************************************************************
SRFDCB   DCB   MACRF=(E),       EXCP MACRO USED                        X
               IOBAD=SRFIOB,    INPUT OUTPUT BLOCK ADDRESS             X
               DSORG=PS,        ORGANIZATION IS PHYSICAL SEQUENTIAL    X
               DEVD=DA,         MOST GENERALIZED DCB USED FOR SAFETY   X
               RECFM=U,         UNDEFINED RECORDS                      X
               DDNAME=FRAMES    DATA DEFINITION NAME FROM DD CARD
               WRITE            LISTDECB,SF,DIPDCB,HDRSAVE,40,,,,MF=L
FDAD     EQU   DIPDCB+8                 FIRST AVAILABLE ADDRESS
DCBDEVT  EQU   DIPDCB+17                DEVICE TYPE FIELD
DEVMASK  EQU   X'0F'                    DEVICE TYPE MASK
TRBAL    EQU   DIPDCB+18                TRACK BALANCE ON TRACK
DIPDCBFL EQU   DIPDCB+48                FLAG FIELD
SRFDCBFL EQU   SRFDCB+48                FLAG FIELD FOR SRF DCB
OPEN     EQU   X'10'                    DCB OPEN FLAG
BUFFER   DS    1F                       TEMP WORK AREA
BUFFERTA EQU   BUFFER+2                 TEMP STORAGE -TRACK ADDR
PASS     DC    X'00'                    RECORD CONTROL
DIPKEY   DC    X'FFFF'                  KEY FOR HEADER
DEVTYPE  DC    X'00'                    DEVICE TYPE STORAGE
TABLE    DC    C'0123456789ABCDEF'      CONVERSION TABLE
BYTPFRM  DC    F'2500'      BYTES IN FRAME PLUS EST.MAX.IRG.
DEVSTORE DC    F'0'         DEVICE TABLE ENTRY ADDRESS
DEBADR   DC    F'0'         DATA EXTENT BLOCK ADDRESS
ARBSMALL DC    X'0014'      BYTES REMAINING SO NO RECORD WILL FIT
TTRSAVE  DC    F'0'
TTRLST   DC    F'0'         TTR OF LAST FRAME
MYSAVE   DS    5F           PROTECT SELF FROM TRACK CONVERSION ROUTINE
HDRSAV   DC    X'00000100'  TTR OF HEADER RECORD BY DEFINITION
MAXTTR   DC    X'00000000'  PLACE MAXIMUM RELATIVE LOCATION OF LOGREC
THIRD    DC    X'00000200'  TTR BEFORE 1ST FRAME. USED TO DETERMINE
*                           WHICH ERROR MESSAGE TO ISSUE. IF WRITE
*                           FAILS, NOTE WILL NOT BE EXECUTED AND TTR
*                           IN TTRSAVE WILL BE TTR FOR LAST RECORD OR
*                           ZERO IF HEADER WRITE FAIL.
PTCHAREA DC    20F'0'
PATCHLOC DC    S(PTCHAREA)  BASE DISPLACEMENT LOCATION OF PATCH AREA
RELREC   EQU   TTRSAVE+2
         ORG   DIPDCB
FAK1     DS    62C
DIPBLKSI DS    H            BLOCK SIZE OF RECORD IN DCB
FAK2     DS    18C
DIPLRECL DS    H            LOGICAL RECORD LENGTH IN DCB
IFCDIP00 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R14      EQU   @14
R15      EQU   @15
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R8       EQU   @08
R9       EQU   @09
PARAMS   EQU   0
PARMLEN  EQU   PARAMS
INARG    EQU   PARAMS+2
LISTPTR  EQU   0
RECORD   EQU   0
RECHDR   EQU   RECORD
CVTBASE  EQU   0
CVTOVL   EQU   0
CVTRELNO EQU   CVTOVL+2
CVTOVLL  EQU   0
CVTPCNVT EQU   CVTOVLL+28
CVTDCB   EQU   CVTOVLL+116
INPARM   EQU   0
WHERE    EQU   0
MSGNO    EQU   0
RECSYSS  EQU   RECSYS
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00008 EQU   CVTOVLL+32
@NM00007 EQU   CVTOVLL
CVTMODEL EQU   CVTOVL
RECFRAME EQU   RECORD+24
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00075 EQU   @RC00073
@RF00108 EQU   @RC00090
@RC00121 EQU   @EL00002
@RF00164 EQU   @RC00161
@RF00171 EQU   @RC00161
@RF00191 EQU   @RC00183
@RF00217 EQU   @EL00003
@RC00249 EQU   @EL00005
ENDOPROC EQU   @EL00005
@RF00261 EQU   @EL00006
@RF00269 EQU   @EL00006
@RC00271 EQU   @EL00006
@RF00295 EQU   @EL00007
@RF00369 EQU   @EL00008
@RC00396 EQU   @EL00011
@RF00402 EQU   @EL00011
ENDGETDV EQU   @EL00015
@PB00017 EQU   @PB00018
@RC00125 EQU   @RC00121
@RF00245 EQU   ENDOPROC
@RC00240 EQU   ENDOPROC
@RC00273 EQU   @RC00271
@PB00016 EQU   @PB00017
@RF00127 EQU   @RC00125
@RC00130 EQU   @RC00125
@PB00015 EQU   @PB00016
@RC00136 EQU   @RC00130
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IFCDIP00
