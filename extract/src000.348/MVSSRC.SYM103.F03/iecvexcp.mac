EXCP     TITLE '    IECVEXCP - EXCP PROCESSOR - PROLOGUE'
IECVEXCP CSECT
***********************************************************************
*                                                                     *
* MODULE NAME = IECVEXCP                                              *
*                                                                     *
* DESCRIPTIVE NAME = EXCP PROCESSOR DRIVER OF IOS                     *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS =  CHANGE LEVEL IS 0                                         *
*                                                                     *
* FUNCTION  --                                                        *
*    EXCP PROCESSOR PROVIDES COMPATABILITY BETWEEN OS/VS2 RELEASE     *
*    1 AND OS/VS2 RELEASE 2.  IT HANDLES THE EXCP AND EXCPVR          *
*    MACRO INSTRUCTIONS.  IT ACCEPTS THE IOB, DCB, DEB AND ECB AND    *
*    MAPS THEM INTO AN SRB - IOSB INTERFACE WHICH IT THEN PASSES TO   *
*    THE IOS CHANNEL SCHEDULER.                                       *
*    IOS POST STATUS PASSES CONTROL BACK TO EXCP FOR APPENDAGE        *
*    COMPATABILITY AND WHEN PROCESSING IS COMPLETE FOR A REQUEST.     *
*    EXCP CONTAINS ALL RELATED REQUEST PROCESSING OF WHICH THERE      *
*    ARE THREE TYPES:                                                 *
*    1. THE SIO APPENDAGE IS NOT EXECUTED BEFORE THE CHANNEL END      *
*    APPENDAGE FOR THE PREVIOUS REQUEST. FOR THIS TYPE, THE BACK END  *
*    OF EXCP RE-ENTERS THE FRONT END BEFORE THE SIO APPENDAGE AND     *
*    CCW TRANSLATION.                                                 *
*    2. THE SIO IS NOT DONE BEFORE THE CHANNEL END APPENDAGE FOR THE  *
*    PREVIOUS REQUEST. THE BACK END OF EXCP ENTERS THE FRONT END AT   *
*    THE POINT OF SCHEDULING THE CHANNEL SCHEDULER.                   *
*    3. THE SIO IS NOT DONE BEFORE RECEIVING THE CHANNEL END          *
*    INTERRUPT FOR THE PREVIOUS REQUEST. REDRIVE IS DONE FROM THE     *
*    DISABLED INTERRUPT EXIT.                                         *
*                                                                     *
* NOTES = NONE                                                        *
*                                                                     *
*    DEPENDENCIES = NONE                                              *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
*    REGISTER CONVENTIONS = SEE REGISTER EQUATES BELOW                *
*                                                                     *
*    PATCH-LABEL = PATCH                                              *
*                                                                     *
* MODULE TYPE = CONTROL, SVC                                          *
*                                                                     *
*    PROCESSOR = ASSEMBLER                                            *
*                                                                     *
*    MODULE SIZE = HEX13CC BYTES                               @YM07015
*                                                                     *
*    ATTRIBUTES  =                                                    *
*      REENTRANT, RUNS ENABLED UNDER LOCAL LOCK.                      *
*                                                                     *
* ENTRY POINT   =                                                     *
*         IGC000 - EXCP PROCESSING VIA SVC 0                          *
*         IGC092 - TSO RESTORE VIA SVC 92                             *
*         IGC114 - EXCPVR PROCESSING VIA SVC 114                      *
*         XCPEXT - EXTENT CHECK SUBROUTINE VIA BRANCH                 *
*         XCPPUR - PURGE SUBROUTINE VIA BRANCH                        *
*         XCPRES - RESTORE SUBROUTINE VIA BRANCH                      *
*         XCPBKE - RETURN RQE ROUTINE VIA BRANCH                      *
*                                                                     *
*    PURPOSE = SEE FUNCTION                                           *
*                                                                     *
*    LINKAGE = TYPE 1 SVC LINKAGE                                     *
*              BAL ENTRY FOR OTHER THAN SVCS                          *
*                                                                     *
*    INPUT  = (FOR SCV ENTRY)                                         *
*    REGISTER 1 CONTAINS A POINTER TO AN IOB                          *
*    REGISTER 4 CONTAINS A POINTER TO THE ASSOCIATED TCB              *
*    IF THE HIGH ORDER BYTE OF REGISTER 1 CONTAINS A F4, IT IS        *
*    AN EXCPVR REQUEST. FOR SVC 92, REGISTER 0 CONTAINS THE USER TCB. *
*                                                                     *
*    OUTPUT  =                                                        *
*    THE ECB IS POSTED WITH ONE OF THE FOLLOWING CODES DESCRIBING     *
*    COMPLETION OF THE I/O EVENT.                                     *
*         7F - NORMAL COMPLETION                                      *
*         41 - PERMANENT ERROR                                        *
*         42 - EXTENT VIOLATION                                       *
*         44 - INTERCEPT CONDITION                                    *
*         48 - PURGED REQUEST                                         *
*                                                                     *
*    EXIT-NORMAL  =                                                   *
*                                                                     *
*    IN THE FRONT END, EXIT IS TO TYPE 1 EXIT.                        *
*    IN THE BACK END, EXIT IS TO THE DISPATCHER.                      *
*                                                                     *
*    EXIT-ERROR  =                                                    *
*                                                                     *
*    SAME AS ABOVE EXCEPT THE REQUESTOR IS ABENDED WITH ONE OF        *
*    THE FOLLOWING CODES.                                             *
*                                                                     *
*         15C - AN SVC 92 WAS ISSUED AND REQUEST WAS NOT IN    @YM07015
*               THE SUPERVISOR STATE.                          @YM07015
*         172 - AN SVC 114 WAS ISSUED WITH ONE OF THE          @YM07015
*               FOLLOWING CONDITIONS:                          @YM07015
*               - PROTECT KEY WAS NOT ZERO                     @YM07015
*               - REQUEST NOT ISSUED IN SUPERVISOR STATE       @YM07015
*               - AUTHORIZATION BIT NOT SET IN JSCB            @YM07015
*         200 - PROTECT KEY OF A CONTROL BLOCK IS NOT ADMISSABLE.     *
*               (EITHER IOB,DCB OR ECB STORAGE PROTECT KEY NOT @YM07015
*               SAME AS PROTECT KEY IN REQUEST BLOCK OF CALLER)@YM07015
*         300 - PROTECT KEY OF DEB NOT ZERO OR DEB VALIDITY    @YM07015
*               CHECK ROUTINE(IFGDEBCK) RETURNED TO EXCP A     @YM07015
*               NON-ZERO RETURN CODE.                          @YM07015
*         400 - DCB POINTERS IN THE IOB AND DEB DO NOT MATCH.         *
*         500 - DEB DOES NOT POINT TO A VALID UCB.                    *
*         700 - A PROGRAM CHECK OCCURRED WHILE IN A            @YM07015
*               SUPERVISOR SERVICE ROUTINE CALLED BY EXCP.     @YM07015
*         800 - AN ERROR OCCURRED WHEN EXCP ATTEMPTED TO FIX   @YM07015
*               A PAGE FOR THIS EXCP REQUEST.                  @YM07015
*         A00 - A PROGRAM CHECK OCCURRED IN A USER APPENDAGE.  @YM07015
*         B00 - INDETERMINATE ERROR WHILE IN EXCP PROCESSING.  @YM07015
*         E00 - A PROGRAM CHECK IN IOS AND NO EXCP DEBUG AREA  @ZA05361
*               AVAILABLE AT THIS TIME.                        @ZA05361
*                                                                     *
* EXTERNAL REFERENCES  =                                              *
*
*    ROUTINES =
*       IECVTCCW - CCW TRANSLATOR                                     *
*                - PAGE FIX INTERFACE                                 *
*                - SMF ROUTINE                                        *
*                - POST ROUTINE                                       *
*        IECVSMGR - CORE MANAGEMENT                                   *
*                                                                     *
*    DATA-AREAS = SEE TABLES BELOW                                    *
*                                                                     *
*    CONTROL-BLOCKS = SEE TABLES BELOW                                *
*                                                                     *
* TABLES =                                                            *
*         IOB - INPUT OUTPUT BLOCK - DESCRIBES THE SPECIFIC I/O       *
*               REQUEST.                                              *
*         ECB - EVENT CONTROL BLOCK - POSTED UPON COMPLETION OF       *
*               A REQUEST.                                            *
*         DCB - DATA CONTROL BLOCK - DESCRIBES THE DATA SET THAT      *
*               IS REFERENCED IN THE REQUEST.                         *
*         DEB - DATA EXTENT BLOCK - DESCRIBES THE LOCATION OF A       *
*               DATA SET.                                             *
*         UCB - UNIT CONTROL BLOCK - DESCRIBES THE HARDWARE INTERFACE.*
*         TCB - TASK CONTROL BLOCK - DESCRIBES THE REQUESTOR.         *
*         JSCB - JOB SCHEDULER CONTROL BLOCK - AUTHORIZATION BLOCK.   *
*         IOSB - IOS BLOCK - DESCRIBES THE SPECIFIC REQUEST TO THE    *
*                CHANNEL SCHEDULER.                                   *
*         SRB - SERVICE REQUEST BLOCK - DESCRIBES AN EVENT.           *
*         IPIB - IOS PURGE INTERFACE BLOCK - DESCRIBES A PURGE        *
*                REQUEST TO ALL PROCESSORS.                           *
*         PIRL - PURGE I/O RESTORE LIST - RESTORE CHAINS FOR          *
*                I/O PROCESSORS.                                      *
*         ASCB - ADDRESS SPACE CONTROL BLOCK - DESCRIBES THE          *
*                ADDRESS SPACE WHICH IS OPERATING.                    *
*         CVT - COMMUNICATION VECTOR TABLE - INTERFACES BETWEEN       *
*               SYSTEM FUNCTIONS.                                     *
*         TCCW - TRANSLATION CONTROL BLOCK - INTERFACE BLOCK TO       *
*                 CCW TRANSLATOR.                                     *
*                                                                     *
* MACROS = SETFRR,GETMAIN,FREEMAIN,STARTIO,CALLRTM,SETLOCK,ABEND,     *
*          MODESET,WIEXCP                                             *
*                                                                     *
* CHANGE ACTIVITY  =                                                  *
*    NEW MODULE FOR VS2/2                                             *
*                                                                     *
***********************************************************************
         PRINT OFF
*/*IECVEXCP: CHART */
*/* HEADER
*/*                    EXCP PROCESSOR
*/*                                                      PAGE # */
*/*IGC092: E TSO RESTORE ENTRY */
*/* D (NO,IGC092B,YES,) SVC ISSUED BY RESTORE */
*/*IGC092A: P REPLACE TCB IN R4 WITH TCB IN R0 */
*/* D (NO,IGC114,YES,IGC000) IOB ADDRESS POSITIVE */
*/*IGC092B: P (,ABEND000) SET INVALID SVC 92 INDICATOR */
*/*IGC114: E EXCPVR ENTRY */
*/* S SETFRR: ESTABLISH FRR 12=SAVE AREA */
*/* P INDICATE FRONT END ENTRANCE */
*/* P LOAD APPENDAGE VECTOR TABLE ADDRESS */
*/* D (YES,IGC114B,NO,) AUTH BIT ON IN AVT */
*/* D (YES,IGC114B,NO,) PROTECT KEY ZERO */
*/* D (YES,IGC114B,NO,) SUPERVISOR STATE REQUEST */
*/* D (NO,IGC114C,YES,) JSCB AUTH BIT ON */
*/*IGC114B: P (,XCP000) INDICATE SVC114 ENTRY */
*/*IGC114C: P (,ABEND000) SET INVALID SVC 114 INDICATOR */
*/*IGC000: E EXCP ENTRY */
*/*IGC000A: D (NO,IGC000C,YES,) TCB INDICATE V=R */
*/* P FIND PQE REGION START + REGION SIZE */
*/* D (NO,IGC000C,YES,) FIRST CCW FALL WITHIN REGION */
*/*IGC000B: P (,IGC000D) INDICATE V=R REQUEST */
*/*IGC000C: P INDICATE VIRTUAL REQUEST */
*/*IGC000D: S SETFRR: ESTABLISH FRR 12=SAVE AREA */
*/* P INDICATE FRONT END ENTRANCE */
*/*XCP000: P ESTABLISH MODULE BASE */
*/* P ESTABLISH IOB REGISTER */
*/* P SAVE RETURN ADDR IN FRR AREA */
*/* P LOAD POINTER TO DCB FROM IOB */
*/* P LOAD POINTER TO DEB FROM DCB */
*/* D (YES,XCP010,NO,) IOBDCB = DEBDCB */
*/* P (,ABEND000) INDICATE INVALID DCB */
*/*XCP010: D (NO,XCP020,YES,) PROTECT KEY GT 7 */
*/* L (GOOD,XCP015,BAD,) IFGDEBCK: DEB VALIDITY CHECK */
*/*XCP013: P (,ABEND000) INDICATE INVALID DEB */
*/*XCP015: S XCPVALA: CHECK CONTROL BLOCK KEYS */
*/*XCP020: D (YES,XCP025,NO,) ANY EXTENTS IN DEB */
*/* P LOAD POINTER TO UCB FROM FIRST EXTENT */
*/* D (NO,XCP030,YES,) DISK, TP OR GRAPHICS */
*/*XCP025: D (YES,XCP013,NO,) IOBM GT MAX M FROM DEB */
*/* P LOAD UCB POINTER FROM PROPER EXTENT */
*/*XCP030: D (YES,XCP035,NO,) IS UCB POINTER VALID */
*/*XCP032: P (,ABEND000) INDICATE INVALID UCB */
*/*XCP035: P CLEAR CHANGEABLE IOB FIELDS AND ECB */
*/*XCPRQE: P SET UP TO GET AND RQE */
*/* L IECVSMGR: GET A 40 BYTE BLOCK */
*/* P INIT RQE WITH UCB,IOB DEB,TCB AND TYPE OF REQUEST */
*/* L IEASMFEX: RECORD THE REQUEST */
*/*XCPVAM: D (NO,XCP038,YES,) VAM REQUEST */
*/* P LOAD POINTER TO SMF ROUTINE */
*/* P MARK RQE AS A VAM REQUEST */
*/* L (+0,XCPVAMA,+4,XCPVAMB,+8,XCPVAMD) VAM WINDOW INTERCEPT */
*/*XCPVAMA: S XCPENVL: LOAD ENVIRONMENTAL REGISTERS */
*/* S (,XCPVAMC) XCPPOST: POST ECB COMPLETE */
*/*XCPVAMB: S XCPENVL: LOAD ENVIRONMENTAL REGISTERS */
*/*XCPVAMC: P RESTORE FRR WORK AREA ADDRESS */
*/* S (,XCPEXIT) XCPFREE: FREE RQE */
*/*XCPVAMD: P (,XCPEXIT) RESTORE FRR WORK AREA ADDRESS */
*/*XCP038: D (NO,XCP050,YES,) IS THE REQUEST RELATED */
*/* P STORE RELATED REQUEST TYPE IN RQE */
*/* P LOAD POINTER TO RELATED REQUEST QUEUE */
*/* D (YES,XCP040,NO,) IS THERE A QUEUE */
*/* D (NO,XCP039,YES,) IS THIS A 3525 ASSOCIATED DATA SET */
*/* S (YES,XCP040,NO,) XCP038A: CHECK FOR RRQ ON READ DEB */
*/* S (YES,XCP040,NO,) XCP038A: CHECK FOR RRQ ON PUNCH DEB */
*/* S (YES,XCP040,NO,XCP039) XCP038A: CHECK FOR RRQ ON PRINT DEB */
*/*XCP038A: E CHECK FOR 3525 RRQ */
*/* D (YES,%RTN,NO,) IS THIS THE PRESENT DEB */
*/* D (ZERO,%RTN,GT0,) DCB ADDRESS ZERO */
*/* D (NO,%RTN,YES,) DCB OPEN */
*/* D (NO,%RTN,YES,) RRQ POINTER IN DEB FOR THIS DCB */
*/* P (,XCP040) STORE RRQ POINTER IN PRESENT DEB */
*/*%RTN: R RETURN TO CALLER */
*/*XCP039: L GETMAIN: GET AN 8 BYTE BLOCK FOR RRQ */
*/* P STORE THE NEW RRQ ADDRESS IN DEB */
*/*XCP039A: P (,XCP045) STORE RQE ADDRESS IN RRQ AS FIRST */
*/*XCP040: P LOAD POINTER TO LAST IN QUEUE */
*/* D (YES,XCP039A,NO,) IS QUEUE EMPTY */
*/* P STORE RQE ADDR IN CHAIN OF LAST RQE */
*/*XCP045: P STORE RQE ADDR AS LAST IN QUEUE */
*/* P STORE END OF CHAIN INDICATOR IN RQE */
*/* D (YES,XCP046A,NO,) PERMANENT ERROR IN PREV REQUEST */
*/* D (YES,XCP050,NO,) THIS RQE AT THE TOP OF THE QUEUE */
*/* D (NO,XCP048,YES,) IS THIS A TYPE 2 OR 3 REL REQ */
*/* P ZERO A COUNT REGISTER */
*/* P LOAD POINTER TO FIRST RQE ON QUEUE */
*/*XCP046: D (YES,XCP047,NO,) THIS THE PRESENT RQE */
*/* D (NO,XCPEXIT,YES,) IS THIS A TYPE 2 OR 3 */
*/* P INCREMENT COUNT BY ONE */
*/* P (,XCP046) POINT TO NEXT RQE ON CHAIN */
*/*XCP046A: S (,XCPPUR) XCP205: EXECUTE ABNORMAL END APPENDAGE */
*/*XCP047: D (GT4,XCPEXIT,LT4,XCP050,=4,) NO RQES ABOVE THIS ONE */
*/*XCP048: D (YES,XCP050,NO,) CHE APP COMPLETE IN PREV REQ */
*/*XCPEXIT: D (NO,XCPEXITA,YES,) TERM RTN ENTRANCE */
*/* P STORE ADDR OF RQE AS PREVIOUS */
*/* D (NO,XCPEXITA,YES,) IS THERE AN RRQ */
*/* D (YES,XCPEXITA,NO,) PERM ERROR IN LAST REQUEST */
*/* D (YES,XCPEXITB,NO,) IS THER A COUNT OF TRANSL RQES */
*/* P LOAD FIRST RQE POINTER FROM RRQ */
*/*XCPEXITD: D (YES,XCPEXITA,NO,) END OF RQE CHAIN */
*/* D (NO,XCPEXITA,YES,) TYPE 2 OR 3 RELATED REQUEST */
*/* D (NO,XCPEXITC,YES,) RQE STARTABLE */
*/* P ADD ONE TO COUNT OF TRANSLATED RQES */
*/* P (,XCPEXITD) POINT AT NEXT RQE IN CHAIN */
*/*XCPEXITC: D (YES,XCPEXITE,NO,XCPEXITA) COUNT LT FOUR */
*/*XCPEXITB: D (NO,XCPEXITA,YES,) COUNT LESS THAN FOUR */
*/* D (NO,XCPEXITA,YES,) RQE A TYPE 2 OR 3 */
*/* D (NO,XCPEXITA,YES,) IS IT STARTABLE */
*/* P LOAD POINTER TO NEXT RQE */
*/* D (YES,XCPEXITA,NO,) END OF CHAIN */
*/*XCPEXITE: P (,XCP050) STORE RQE ADDRESS AS CURRENT */
*/*XCPEXITA: D (NO,XCPEXITF,YES,) ANY STORAGE TO FREE */
*/* L IECVSMGR: FREE 160 BYTE BLOCKS */
*/*XCPEXITF: D (NO,XCPEXITG,YES,) TERM RTN ENTRANCE */
*/*XCPEXITH: P FREE LOCAL LOCK */
*/*XCPEXITG: D (YES,%PRTN,NO,) COME FROM PURGE */
*/* P DELETE FRR FROM STACK */
*/*%PRTN: R RETURN TO TYPE 1 EXIT OR DISPATCHER */
*/*XCP050: D (YES,XCP105,NO,) RE-EXCP REQUEST */
*/* P SET NO OF 160 BYTE BLOCKS TO TWO */
*/* D (NO,XCP055,YES,) VIRTUAL REQUEST */
*/* P SET NO OF 160 BYTE BLOCKS TO FOUR */
*/*XCP055: D (NO,XCP060,YES,) ALREADY HAVE ENOUGH */
*/* P DECREMENT NO AVAIL BY NO NEEDED */
*/* P CHAIN BLOCKS NEEDED TOGETHER */
*/* P (,XCP065) STORE NEW AVAIL POINTER */
*/*XCP060: P PREPARE REGS TO GET REQUIRED BLOCKS */
*/* L IECVSMGR: GET 160 BYTE BLOCKS */
*/*XCP065: P STORE FIRST BLOCK AS SRB IN RQE */
*/* P LOAD IOSB REGISTER AS OFFSET FROM SRB */
*/* P LOAD POINTER TO NEXT BLOCK */
*/* P ZERO ENTIRE SRB BLOCK */
*/* P STORE TCB ADDRESS IN SRB */
*/* P STORE IOSB ADDRESS IN SRB */
*/* P STORE NEXT BLOCK ADDRESS AS TCCW IN RQE */
*/* D (NO,XCP070,YES,) VIRTUAL REQUEST */
*/* P STORE NEXT TWO BLOCKS AS BEB AND FIX IN TCCW */
*/*XCP070: P SET DRIVER ID TO EXCP */
*/* P STORE ASID IN IOSB */
*/* P STORE TERMINATION RTN ADDRESS IN PGAD */
*/* P STORE UCB ADDRESS AND PROTECT KEY FOR CHAN PGM */
*/* P STORE ADDR OF CHANNEL END APPENDAGE */
*/* P STORE ADDR OF ABNORMAL END APPENDAGE */
*/* P STORE DEB ADDRESS AS DSID */
*/* P SET FLAGS COMMON TO IOBFLAG1 AND IOSFLA */
*/* D (NO,XCP071,YES,) BYPASS IBM ERPS */
*/* P SET FLAG WHICH SAYS USE NO ERPS */
*/* XCP071: D (NO,XCP075,YES,) IS THIS A TYPE 3 REL REQ */
*/*XCP072: P (,XCP080) GET ADDRESS OF DIE ROUTINE */
*/*XCP075: D (YES,XCP080,NO,) VIRTUAL REQUEST */
*/* D (NO,XCP072,YES,) PCI APPENDAGE A NOP */
*/*XCP080: P STORE DIE ADDR OR ZEROS IN IOSB DIE RTN ADDR */
*/* P ZERO A REGISTER FOR STORE */
*/* D (NO,XCP085,YES,) VIRTUAL REQUEST */
*/* D (YES,XCP085,NO,) PCI APPENDAGE A NOP */
*/* P LOAD ZEROED REG WITH ADDR OF PCI COMP CODE */
*/*XCP085: P STORE ADDR OF PCI APPENDAGE OR ZEROS IN IOSB */
*/*XCPPFA: D (NO,XCP105,YES,) A PAGE FIX APPENDAGE */
*/* D (YES,XCP105,NO,) A V=R REQUEST */
*/* P LOAD PAGE FIX APPENDAGE ADDRESS */
*/* P LOAD SAVE AREA POINTER AND LIST POINTER */
*/* L EXECUTE PAGE FIX APPENDAGE */
*/* D (NO,XCP105,YES,) EXCPVR REQUEST */
*/* D (NO,XCP105,YES,) AND FIX ENTRIES */
*/* P SET END OF ENTRIES INDICATOR */
*/*XCP090: P GET ADDRESS OF FIRST PAGE IN ENTRY */
*/*XCP095: P ACCESS THE PAGE WITH NI */
*/* P INCREMENT TO NEXT PAGE IN LIST */
*/* D (NO,XCP095,YES,) END OF ENTRY */
*/* D (YES,XCP100,NO,) END OF LIST */
*/* P (,XCP090) INCREMENT TO NEXT ENTRY */
*/*XCP100: P SET FLAGS FOR SHORT TERM FIX */
*/* D (YES,XCP103,NO,) ENTERED FIX ONCE */
*/* P SET FIX STARTED FLAG IN RQE */
*/* L IEAVPSIB: FIX PAGES IN LIST */
*/* D (0,XCP103,4,,8,%HERE) RETURN CODE FROM FIX */
*/* P (,ABEND000) SET CANNOT FIX PAGES CODE */
*/*%HERE: P (,XCP090) ZERO DEB ADDRESS AND SET PARM REG */
*/*XCP103: P RESTORE RQE AND DEB ADDRESSES */
*/*XCP105: D (NO,XCP110,YES,) DIRECT ACCES DEVICE */
*/* P MOVE SEEK ADDRESS FROM IOB TO IOSB SEEK AND SEEKA */
*/* S XCPEXT: CHECK THE ADDRESS FOR WITHIN EXTENTS */
*/* D (BAD,,GOOD,XCP110) EXTENT WITHIN BOUNDS */
*/* D (YES,XCP505,NO,) IGNORE RETURN */
*/* S (,XCP510) XCP205: EXECUTE ABNORMAL END APPENDAGE */
*/*XCP110: P LOAD POINTER TO SAVE AREA */
*/* P POINT TO SEEK FIELD */
*/* P SET INDICATOR THAT SIO APPENDAGE HAS CONTROL */
*/* L (+0,XCP115,+4,XCP113,+8,XCP115) EXECUTE THE SIO APPENDAGE */
*/*XCP113: P (,XCP515) LOAD  TERMINATION BASE POINTER */
*/*XCP115: P RESET SIO APPENDAGE IN CONTROL BIT */
*/* P MOVE FILE MASK FROM DEB TO IOSB */
*/* P SET FIXING HAS STARTED FLAG IN RQE */
*/* D (NO,XCP145,YES,) VIRTUAL REQUEST */
*/* P INIT TCCW WITH TCB AND UCB */
*/* P GET IOBSTART AND STORE AS FIRST CCW TO XLAT */
*/* P SET INITIAL TRANSLATE OPTION */
*/*XCP120: L (+0,XCP140,+4+8,XCP135,+12,) IECVTCCW: TRANSLATE CCWS */
*/*XCP130: L IECVSMGR: GET A 160 BYTE BLOCK */
*/* P (,XCP120) PLACE BLOCK IN PARM REGISTER */
*/*XCP135: P (,ABEND000) GET THE PROPER ERROR CODE */
*/*XCP140: P STORE REAL ADDRESS IN IOSB */
*/* P (,XCP150) MOVE VIRTUAL ADDR OF REAL STRING TO IOSB */
*/*XCP145: P LOAD POINTER TO IOB START */
*/* P STORE AS VIRTUAL START IN IOSB */
*/* D (YES,XCP148,NO,) VIRTUAL = REAL REQUEST */
*/* P LOAD REAL ADDRESS OF IOBSTART */
*/*XCP148: P STORE REAL ADDRESS IN IOSB */
*/*XCP150: P MARK RQE AS STARTABLE */
*/* D (NO,XCP155,YES,) IS THE REQUEST RELATED */
*/* D (YES,XCP155,NO,) THIS RQE AT TOP OF QUEUE */
*/* D (NO,XCPEXIT,YES,) CHE APP COMPL ON PREV REQ */
*/*XCP155: P SET SRB SCHEDULED BIT IN RQE */
*/* L (,XCPEXIT) IECVSTIO: ISSUE STARTIO MACRO */
*/*XCPDIE: E EXCP DISABLED INTERRUPT EXIT */
*/* D (YES,,NO,%DIE2) SECOND ENTRY TO DIE */
*/* R RETURN TO IOS */
*/*%DIE2: P SAVE REGISTERS, ESTABL ADDRESSABILITY */
*/* P LOAD IOSB AND RQE REGISTERS */
*/* D (NO,XCPDIEB,YES,) VIRTUAL REQUEST */
*/*XCPDIEA: P SET RETURN CODE TO ZERO */
*/* D (NO,XCPDIEE,YES,) TYPE 3 RELATED REQUEST */
*/* D (NO,XCPDIEE,YES,) CHANNEL END IN INTERRUPT */
*/* D (YES,XCPDIEE,NO,) UNDERGOING RECOVERY */
*/* D (YES,XCPDIEE,NO,) STATUS OTHER THAN NORMAL */
*/* D (NO,XCPDIEE,YES,) ANOTHER RQE IN CHAIN */
*/* D (NO,XCPDIEE,YES,) CAN THIS RQE BE STARTED NOW */
*/* P SET BIT IN RQE SAYING SCHEDULED */
*/* P SET RETURN CODE FOUR */
*/* P (,XCPDIEF) LOAD POINTER TO SRB */
*/*XCPDIEB: D (NO,XCPDIEA,YES,) PCI IN INTERRUPT */
*/* D (YES,XCPDIEI,NO,) BEEN HERE FOR THIS INTERRUPT */
*/* S XCPENVL: LOAD ENVIRONMENTAL REGISTERS */
*/* D (YES,XCPDIEG,NO,) PROTECT KEY LT 8 */
*/* S XCPVAL: VALIDITY CHECK CONTROL BLOCKS */
*/*XCPDIEG: P INDICATE DIE EXIT  TO MAP RTN */
*/* S XCPMAP: MAP IOSB INTO IOB */
*/* P LOAD SAVE AREA ADDRESS */
*/* L EXECUTE PCI APPENDAGE */
*/* P STORE NEW START ADDRESS FROM IOB TO IOSB */
*/* D (YES,XCPDIEH,NO,) ANY STATUS OTHER THAN PCI */
*/* P SET IGNORE EXIT  INCREMENT */
*/*XCPDIEE: P RESTORE REGISTER 1 */
*/*XCPDIEF: P RESTORE REST OF REGISTERS */
*/* R RETURN TO IOS */
*/*XCPDIEH: D (NO,XCPDIEI,YES,) CHANNEL END IN STATUS */
*/* D (NO,XCPDIEA,YES,) DEVICE END IN STATUS */
*/* P (,XCPDIEA) SET SECOND ENTRY FLAG TO PCI */
*/*XCPDIEI: P (,XCPDIEA) RESET SECOND ENTRY TO PCI FLAG */
*/*XCPPCI: E PCI APPENDAGE COMP CODE */
*/* P SAVE REGS, ESTABLISH ADDRESSABILITY */
*/* S SETFRR: ESTABLISH FRR 12=SAVE AREA */
*/* P SET PCI APPENDAGE IN CONTROL */
*/* S XCPENVL: LOAD ENVIRONMENTAL REGS */
*/* D (YES,XCPPCIA,NO,) PROTECT KEY LT 8 */
*/* S XCPVAL: VALIDITY CHECK CONTROL BLOCKS */
*/*XCPPCIA: S XCPMAP: MAP IOSB TO IOB */
*/* P LOAD SAVE AREA POINTER */
*/* L EXECUTE PCI APPENDAGE */
*/* P LOAD TCB ADDRESS */
*/* L IEASMFEX: RECORD THE PCI */
*/* P DELETE THE FRR FROM THE STACK */
*/* P RESTORE REGISTERS */
*/* R RETURN TO POST STATUS */
*/*XCPABE: E ABE APP ENTRY */
*/* P LOAD INDICATOR FOR ABNORMAL END APPENDAGE ENTRY */
*/* P (,XCP200) LOAD ABNORMAL APPENDAGE ADDRESS */
*/*XCPCHE: E CHE APP ENTRY */
*/* P LOAD INDICATOR FOR CHANNEL END APPENDAGE ENTRY */
*/* P LOAD CHANNEL END APPENDAGE ADDRESS */
*/*XCP200: P ESTABLISH BASE FOR APPENDAGE PROCESS */
*/* S XCPFRR:SET FRR IN STACK 12=SAVE AREA */
*/* P SET WHICH APPENDAGE WAS ENTERED IN FRR AREA */
*/* P SET UP IOSB REG AND RQE REG */
*/* S XCPENVL: LOAD ENVIRONMENTAL REGS */
*/* D (YES,XCP202,NO,) SYSTEM RQE */
*/* S XCPVAL: VALIDITY CHECK CONTROL BLOCKS */
*/*XCP202: S XCPMAP: MAP IOSB TO IOB */
*/*XCP203: D (YES,XCPPUR,NO,)  PERM ERROR ON REL REQUEST */
*/*XCP203A: P SAVE CHAIN PTR FROM RQE */
*/* L (+0,XCP220,+4,XCP210,+8,XCP215,+12,XCP205) EXECUTE APPENDAGE */
*/*XCP205: P SET DONT FREE RQE FLAG */
*/* P DEQUEUE RQE USING SAVED CHAIN POINTER */
*/*XCP210: P SET DONT POST RQE FLAG */
*/* P (,XCP250) RESTORE FRR POINTER */
*/*XCP215: P SET RE-EXCP FLAG IN RQE */
*/* L (,XCP250) IEASMFEX: RECORD THE RETRY REQUEST */
*/*XCP220: P MOVE COMPAT FLAGS FROM IOB TO IOSB */
*/* P MOVE SEEK FIELD TO IOSB FROM IOB */
*/* D (NO,XCP255,YES,) IS EXCEPTION FLAG ON */
*/* D (NO,XCP222,YES,) ECB COMPL CODE SHOW PERM ERROR */
*/* P SET PERM ERROR FLAG IN DCB */
*/* D (NO,XCP255,YES,) 3525 WITH ASSOCIATED DS */
*/* P LOAD POINTER TO READ DCB */
*/* D (YES,XCP221A,NO,) IS IT ZERO */
*/* P SET PERMANENT ERROR IN THIS DCB */
*/*XCP221A: P LOAD POINTER TO PUNCH DCB */
*/* D (YES,XCP221B,NO,) IS IT ZERO */
*/* P SET PERMANENT ERROR IN PUNCH DCB */
*/*XCP221B: P LOAD POINTER TO PRINT DCB */
*/* D (YES,XCP222,NO,) IS IT ZERO */
*/* P SET PERMANENT ERROR IN PRINT DCB */
*/*XCP222: P MOVE STATUS BACK TO IOSB FROM IOB */
*/* P GET START OF CHANNEL PROGRAM FROM IOB */
*/* D (YES,XCP225,NO,) VIRTUAL REQUEST */
*/* P STORE VIRTUAL START AND REAL START AFTER LRA */
*/* P (,XCP255) MOVE CSW ADDRESS TO IOSB */
*/*XCP225: P LOAD POINTER TO TRANSLATION CONTROL BLOCK */
*/* P SET SINGLE ADDRESS TRANSLATION FUNCTION */
*/* P LOAD POINTER TO IOBSTART AS PARAMETER */
*/* L IECVTCCW: TRANSLATE START ADDRESS TO REAL */
*/* P STORE AS VIRTUAL START AND REAL START AFTER LRA */
*/*XCP230: P LOAD POINTER TO CSW ADDRESS */
*/* P SET SINGLE ADDRESS TRANSLATION */
*/* L IECVTCCW: TRANSLATE CSW TO REAL */
*/* P STORE TRANSLATED CSW INTO IOSB CSW FIELD */
*/* P (,XCP255) RESTORE RQE POINTER */
*/*XCP250: P RESET EXCEPTION FLAGS IN IOB AND IOSB */
*/*XCP255: P DELETE FRR FROM STACK */
*/* R RETURN TO POST STATUS */
*/*XCPPUR: P SET REL REQ PURGE INDICATOR */
*/* P SAVE APPENDAGE ADDRESS */
*/*XCP260: P LOAD PTR TO FIRST RQE ON RRQ */
*/*XCP265: D (YES,XCP275,NO,) END OF RQE CHAIN */
*/* D (NO,XCP270,YES,) SRB BEEN SCHEDULED */
*/* P (,XCP265) LOAD PTR TO NEXT RQE IN CHAIN */
*/*XCP270: L IECVRCHN: CHAIN IOB TO RESTORE CHAIN */
*/* P (,XCP510) SET PURGE CODE, RESET ANY SPECIAL FLAGS */
*/*XCP275: D (NO,XCP280,YES,) ANY 160 BYTE BLOCKS */
*/* L IECVSMGR: FREE ACCUMULATED 160 BYTE BLOCKS */
*/*XCP280: P (,XCP203A) RESTORE ORIGINAL RQE AND ENVIRONMENT */
*/*XCPMAP: E MAP TO IOB SUBROUTINE */
*/* P SET COMMON FLAGS IN IOSFLA INTO IOBFLAG1 */
*/* P MOVE THE CSW FROM IOSB TO IOB */
*/* D (NO,XCPMAP2,YES,) IS THIS ENTRY FROM DIE */
*/* L IEAPTRV: CONVERT REAL CSW ADDR TO VIRT */
*/* P STORE NEW ADDRESS IN CSW IN IOB */
*/*XCPMAP2: D (NO,XCPMAP1,YES,) VIRTUAL REQUEST */
*/* P POINT TO THE VIRTUAL ADDR IN REAL CCW STRING */
*/* L IECVTCCW: TRANSLATE CSW TO VIRTUAL */
*/* P STORE IN CSW ADDRESS IN IOB */
*/*XCPMAP1: P MOVE SENSE AND COND CODE TO IOB FROM IOSB */
*/* D (YES,%RTN2,NO,) CODE UNKNOWN TO CURRENT AM */
*/* P MOVE ECB COMPL CODE TO IOB */
*/*%RTN2: R RETURN TO CALLING ROUTINE */
*/*IECVEXTC: E EXTENT CHECK FROM DASD ERP */
*/* P SAVE REGS 4-14 ESTABLISH BASE REG */
*/* S XCPFRR: SET FRR AREA IN STACK 12=SAVE AREA */
*/* P LOAD POINTERS TO IOSB AND RQE */
*/* S XCPENVL: LOAD ENVIRONMENTAL REGS */
*/* D (YES,XCPEXTA,NO,) SYSTEM RQE */
*/* S XCPVAL: VALIDITY CHECK CONTROL BLOCKS */
*/*XCPEXTA: S XCPEXT: EXTENT CHECK SEEK ADDRESS */
*/* P DELETE FRR FROM STACK */
*/* P RESTORE REGS 4-14 AND 1 */
*/* R RETURN TO ERP  R 14 + R 15 */
*/*XCPEXT: E EXTENT CHECK SUBROUTINE */
*/* P CALCULATE EXTENT ADDRESS USING M FIELD */
*/* D (YES,XCPEXTE,NO,) SEEK ADR LT LOW CCHH */
*/* D (YES,XCPEXTE,NO,) SEEK ADR GT HIGH CCHH */
*/* D (NO,XCPEXTE,YES,) BIN NUMBER THE SAME */
*/* P (,%RTN3) ZERO REG 15 AS RETURN CODE */
*/*XCPEXTE: P LOAD SAVE AREA POINTER */
*/* P SET END OF EXTENT APPENDAGE EXECUTING */
*/* P SET REG 6 TO SEEK ADDRESS */
*/* L (+0,XCPEXTB,+4,XCPEXTS,+8,XCPEXTC) EXECUTE END OF EXTENT
*/*APPENDAGE */
*/*XCPEXTC: P RESTORE FRR WORK AREA ADDRESS */
*/* P (,XCPEXT) RESET EOE EXECUTING BIT AND RETURN ADDRESS */
*/*XCPEXTS: P RESTORE FRR WORK AREA ADDRESS RETURN ADDRESS */
*/* P INDICATE IGNORE RETURN IN RQEFLAG */
*/* P RESET EOE ROUTINE IN CONTROL */
*/*XCPEXTD: P RESET ERROR ROUTINE IN CONTROL */
*/* P SET RETURN CODE OF 4 */
*/*%RTN3: R RETURN TO CALLING ROUTINE */
*/*XCPEXTB: P RESET EOE TRACKING BIT GET FRR POINTER */
*/* P RESTORE RETURN ADDRESS */
*/* P (,XCPEXTD) SET EXTENT VIOLATION CODE */
*/*SETFRR: E ESTABLISH FRR */
*/* P STORE THE FRR ON THE STACK */
*/* P GIVE WORK AREA TO CALLER */
*/* P ZERO THE ENTIRE WORK AREA */
*/* R RETURN TO CALLING ROUTINE */
*/*XCPENVL: E ENVIRONMENTAL REG LOAD */
*/* P LOAD IOB, DEB AND UCB REGS FROM RQE */
*/* P LOAD DCB ADDRESS FROM DEB */
*/* R RETURN TO CALLING ROUTINE */
*/*XCPVAL: E VALIDITY CHECK ROUTINE */
*/* P MODESET TO USER KEY IN RQE */
*/*XCPVALA: P ACCESS THE IOB WITH NI */
*/* P ACCESS THE DCB WITH NI */
*/* P ACCESS THE ECB WITH NI */
*/* P MODESET BACK TO KEY ZERO */
*/* R RETURN TO CALLING ROUTINE */
*/*XCPPOST: E POST ROUTINE INTERFACE */
*/* P LOAD POINTER TO ECB */
*/* P LOAD THE COMPLETION CODE AND SHIFT */
*/* D (YES,XCPPSTA,NO,) PROTECT KEY LT 8 */
*/* P (,XCPPSTB) LOAD POST WITH VALCHK ENTRY */
*/*XCPPSTA: P LOAD POST WITH OUT VALCHK ENTRY */
*/*XCPPSTB: L IEA0PT0X: POST ECB COMPLETE */
*/* R RETURN TO CALLING ROUTINE */
*/*XCPFREE: E FREE RQE ROUTINE */
*/* D (NO,XCPFREEA,YES,) IPIB POINTER IN RQE */
*/* P DECREMENT COUNT IN IPIB BY ONE */
*/* D (NO,XCPFREEA,YES,) COUNT EQUAL ZERO */
*/*XCPFREEB: P POST THE ECB IN THE IPIB */
*/*XCPFREEA: P ZERO FIRST WORD OF RQE FOR NO CHAINING */
*/* L IECVSMGR: FREE 40 BYTE BLOCK */
*/* R RETURN TO CALLING ROUTINE */
*/*ABEND000: R ABEND REQUESTOR WITH SPEC ID */
*/*IECVX025: E ENTRY FROM STAGE 3 EXIT EFF */
*/* P SAVE REGS, ESTABLISH ADDRESSABILITY */
*/* P SAVE CONTENTS OF REGS NEEDED BY FREE RQE RTN */
*/* S XCPFREE: FREE RQE */
*/* P RESTORE REGISGERS 10-14, 2-5 */
*/* R RETURN TO STAGE 3 EXIT EFF */
*/*XCPTERM: E TERMINATION ROUTINE */
*/* P SET UP ADDRESSABILITY SAVE REG 14 */
*/* S SETFRR: ESTABLISH FRR AREA 12=FRR AREA */
*/*XCPTERMA: P GET THE LOCAL LOCK */
*/* P INIT FRR AREA WITH TERM RTN BIT, CRQE PTR SAVE AREA R 14 */
*/* P LOAD POINTER TO RQE */
*/* S XCPENVL: LOAD ENVIRONMENTAL REGISTERS */
*/* D (YES,XCPTERMB,NO,) SYSTEM RQE */
*/* S XCPVAL: VALIDITY CHECK CONTROL BLOCKS */
*/*XCPTERMB: D (NO,XCP500,YES,) PROGRAM CHECK IN EXCP OR IOS */
*/* P ABEND THE REQUESTOR VIA CALLRTM */
*/* P  RESTORE RQE ADDRESS */
*/*XCP500: D (NO,XCP505,YES,) TAPE DEVICE */
*/* P INCREMENT BLOCK COUNT BY NUMBER IN IOB */
*/*XCP505: D (YES,XCP570,NO,) RE-EXCP REQUEST */
*/*XCP510: D (YES,XCP515,YES,) NO POST FLAG ON */
*/* S XCPPOST: POST ECB COMPLETE */
*/*XCP515: D (NO,XCP530,YES,) FIXING BEEN DONE FOR RQE */
*/* D (NO,XCP520,YES,) VIRTUAL REQUEST */
*/* P SET TRANSLATOR OPTION TO UNFIX */
*/* L (,XCP525) IECVTCCW: UNFIX PAGES */
*/*XCP520: D (NO,XCP528,YES,) EXCPVR REQUEST */
*/* P LOAD POINTER TO FIX LIST AND SET UNFIX OPTION */
*/* L IEAVPSIB: UNFIX PAGES */
*/* D (0,XCP525,N-0,) RETURN CODE */
*/* P (,ABEND000) MARK UNFIX ERROR */
*/*XCP525: P RESTORE RQE ADDRESS */
*/*XCP528: P RESET FLAGS IN RQE DEPICTING STATUS */
*/*XCP530: D (NO,XCP545,YES,) WAS THERE A TCCW */
*/* P LOAD POINTER TO SRB */
*/* P STORE TCCW POINTER INTO SRB CHAIN FIELD */
*/* D (YES,XCP544,NO,) VIRTUAL REQUEST */
*/* P ZERO FIRST WORD OF TCCW FOR CHAIN */
*/*XCP544: S XCP700: FREE 160 BYTE BLOCKS */
*/*XCP545: D (YES,XCP560,NO,) RQE UNRELATED */
*/* P POINT TO DEB RRQ */
*/*XCP550: S XCP800: DEQUEUE RQE FROM RRQ */
*/*XCP560: D (YES,XCP565,NO,) NO FREE RQE FLAG ON */
*/* S XCPFREE: FREE THE RQE */
*/*XCP565: D (YES,XCPEXIT,NO,) REQUEST UNRELATED */
*/* D (NO,XCPEXIT,YES,) TERM RTN ENTRANCE */
*/* P LOAD POINTER TO RRQ */
*/* D (YES,XCPEXIT,NO,) EMPTY QUEUE */
*/* D (YES,XCP260,NO,) ENTERED FROM RR PURGE */
*/* P LOAD POINTER TO NEXT RQE AND STORE AS CURRENT */
*/* S XCPENVL: LOAD ENVIRONMENTAL REGISTERS */
*/* D (YES,XCPEXITA,NO,) PERM ERROR IN LAST REQUEST */
*/* D (YES,XCPEXIT,NO,) RQE ALREADY SCHEDULED */
*/* D (YES,XCP155,NO,XCP050) RQE STARTABLE */
*/*XCP570: D (NO,XCP590,YES,) VIRTUAL REQUEST */
*/* P SET UP FOR UNFIX */
*/* L IECVTCCW: UNFIX PAGES */
*/* P GET CHAIN FROM TCCW FIRST FIELD */
*/* P STORE TOP OF CHAIN AS BEB SECOND AS FIX */
*/* D (NO,XCP590,YES,) ANYTHING LEFT IN CHAIN */
*/* S XCP700: FREE CORE THAT IS LEFT */
*/*XCP590: D (NO,XCP105,YES,) RELATED REQUEST */
*/* D (YES,XCP565,NO,) ONLY RQE ON QUEUE */
*/*XCP600: S XCP800: DEQUEUE RQE FROM QUEUE */
*/*XCP620: P STORE RQE IN CHAIN OF LAST ON QUEUE */
*/* P STORE RQE AS LAST ON QUEUE */
*/* P (,XCP565) STORE END OF CHAIN POINTER IN RQE */
*/*XCP700: E QUEUE 160 BYTE BLOCKS */
*/* P ZERO COUNT REGISTER, COMPARE REGISTER */
*/*XCP720: P ADD ONE TO COUNT */
*/* D (YES,XCP740,NO,) END OF CHAIN */
*/* P (,XCP720) LOAD POINTER TO NEXT BLOCK */
*/*XCP740: P MOVE CURRENT POINTER TO CHAIN */
*/* P STORE NEW CURRENT POINTER */
*/* P INCREMENT COUNT OF BLOCKS */
*/* R RETURN TO CALLING ROUTINE */
*/*XCP800: E DEQUEUE RQE ROUTINE */
*/* P LOAD POINTER TO NEXT RQE */
*/* D (YES,%RTN4,NO,) END OF CHAIN */
*/* D (YES,XCP850,NO,) THIS THE PRESENT RQE */
*/* P (,XCP800) POINT TO NEXT RQE */
*/*XCP850: P MOVE CHAIN OF THIS TO PREVIOUS */
*/* D (YES,%RTN4,NO,) DONE WITH DEQUEUE */
*/* P STORE AS LAST IN RRQ */
*/*%RTN4: R RETURN TO CALLING ROUTINE */
*/*IECVXTRM: E PURGE ENTRY POINT */
*/* P (,XCP510) SET UP FRR AREA WITH FLAGS, RETURN AND SAVE PTRS */
*/*IECVEXCP: END */
         PRINT ON
         TITLE '    IECVEXCP - EXCP PROCESSOR - DSECTS'
         IEZIOB
         EJECT
         DCBD  DSORG=PS
         EJECT
UCB      DSECT
         IEFUCBOB
         EJECT
         IEZDEB LIST=NO                                        @ZA27456
         EJECT
         IKJTCB
         EJECT
         IHAPQE
         EJECT
         IEZJSCB
         EJECT
         CVT   DSECT=YES
         EJECT
         IECDIOCM
         EJECT
         IHAASCB
         EJECT
         IHAASXB
         EJECT
         IHARB
         EJECT
         IHAPSA
         EJECT
         IHASRB
         EJECT
         IECDEPCB                                              @ZA12705
         EJECT                                                 @ZA12705
         IECDIOSB                                              @ZA12705
         EJECT                                                 @ZA12705
         IECDIPIB                                              @ZA12705
         EJECT                                                 @ZA12705
         IECDPIRL                                              @ZA12705
         EJECT                                                 @ZA12705
         IECDRQE                                               @ZA12705
         EJECT                                                 @ZA12705
         IECDTCCW                                              @ZA12705
         EJECT                                                 @ZA12705
         IECDXDBA                                              @ZA12705
         EJECT                                                 @ZA12705
         IHAFRRS                                               @ZA12705
         EJECT                                                 @ZA12705
         IECDXFRR                                              @ZA12704
         EJECT                                                 @ZA12704
         IECDSFRR                                              @ZA12704
         EJECT
RRQ      DSECT
***********************************************************************
*                                                                     *
*        RELATED REQUEST QUEUE DSECT. THIS QUEUE RESIDES IN LSQA,     *
*        SUBPOOL 254. IT IS FREED BY CLOSE OR AT TASK TERMINATION     *
*                                                                     *
***********************************************************************
         SPACE 2
RRQFIRST DS    A                   FIRST RQE ON QUEUE
RRQLAST  DS    A                   LAST RQE ON QUEUE
RRQBL    EQU   *-RRQ               LENGTH OF THE RRQ
         TITLE '    IECVEXCP - EXCP PROCESSOR - EQUATES'
***********************************************************************
*                                                                     *
*                   REGISTER DEFINITIONS                              *
*                                                                     *
***********************************************************************
         SPACE 1
REG0     EQU   0                   PARAMETER REGISTER 0
TCBRG0   EQU   0                   TCB DURING VALIDITY CHECK
*
REG1     EQU   1                   PARAMETER REGISTER 1
RQEREG   EQU   1                   REQUEST ELEMENT ADDRESS
*
IOBREG   EQU   2                   IOB ADDRESS
*
DEBREG   EQU   3                   DEB ADDRESS
*
DCBREG   EQU   4                   DCB ADDRESS
TCBREG   EQU   4                   TCB ENVIRONMENTAL REGISTER
REG4     EQU   4                   IECVPST FRR REG.            @Y30IPLC
*
BASREG   EQU   5                   BASE REGISTER
*
SEEKRG   EQU   6                   SEEK ADDRESS POINTER
WKREG6   EQU   6                   WORKING REGISTER
*
UCBREG   EQU   7                   UCB REGISTER
WKREG7   EQU   7                   WORKING REGISTER.           @Y30IPLC
*
IOSBRG   EQU   8                   IOSB ADDRESS
*
WKREG9   EQU   9                   WORKING REGISTER
TERMBAS  EQU   9                   TERMINATION ROUTINE BASE REG
*
WKREGA   EQU   10                  WORKING REGISTER
*
ECBREG   EQU   11                  ECB ADDRESS                 @Y30IPLB
WKREGB   EQU   11                  WORKING REGISTER
*
FRRREG   EQU   12                  FRR WORK AREA ADDRESS
*
REG13    EQU   13                  SAVE AREA ADDRESS
*
LNKREG   EQU   14                  RETURN REGISTER
*
APBSRG   EQU   15                  BRANCHING REGISTER
         EJECT
***********************************************************************
*                                                                     *
*        EQUATES USED WITHIN EXCP PROCESSING                          *
*                                                                     *
***********************************************************************
         SPACE 2
*---------------------------------------------------------------------*
*        ECB DEFINITION                                               *
*---------------------------------------------------------------------*
         SPACE 1
ECBFL    EQU   0                   FLAGS
         SPACE
*---------------------------------------------------------------------*
*        DEFINITION OF COMPLETION CODES                               *
*---------------------------------------------------------------------*
         SPACE
ECBNORM  EQU   X'7F'               NORMAL COMPLETION
ECBINTC  EQU   X'7E'               INTERCEPT CODE
ECBPERM  EQU   X'41'               PERMANENT ERROR
ECBEXTR  EQU   X'42'               EXTENT ERROR
ECBINTP  EQU   X'44'               INTERCEPT POST CODE
ECBPGMCK EQU   X'45'               PROGRAM CHECK IN IOS OR EXCP
ECBPURG  EQU   X'48'               PURGED REQUEST
ECBMACH  EQU   X'50'               M.P. ERROR
PERM     EQU   X'20'               IN ECB, IF OFF, CONDITION IS @YM1141
*                                  PERMANENT                    @YM1141
         SPACE
*---------------------------------------------------------------------*
*        VARIOUS HEXIDECIMAL EQUATES                                  *
*---------------------------------------------------------------------*
         SPACE
PPKEY    EQU   X'80'               PROTECT KEY MASK            @OZ00836
SUPST    EQU   X'01'               PROBLEM PROGRAM STATE
UCB3525  EQU   X'0C'               3525 DEVICE TYPE DESCRIPTION
DCBASSOC EQU   X'04'               3525 ASSOCIATED DATA SETS
LASTENT  EQU   X'80'               LAST ENTRY INDICATOR FOR FIX LIST
UNFIXIND EQU   X'20'               UNFIX INDICATION TO PAGE FIX
LTFIX    EQU   X'02'               LONG TERM FIX INDICATOR     @YM07593
FIX      EQU   X'40'               FIX INDICATOR
F0       EQU   X'F0'               MASK OF F0                  @ZA06067
FF       EQU   X'FF'               MASK OF ALL BITS ON
F4       EQU   X'F4'               EXCPVR INDICATOR
DVE      EQU   X'04'               DEVICE END INTERRUPT
CHE      EQU   X'08'               CHANNEL END INTERRUPT
PCI      EQU   X'80'               PCI INTERRUPT BIT IN CSW
WAITBIT  EQU   X'80'               WAIT BIT IN ECB             @YM05629
SYSTMKEY EQU   X'7F'               SYSTEM PROTECT KEY MAXIMUM  @ZA06067
EXTMSK   EQU   X'FE'               MASK TO TEST FOR EXTENTS
UCB22503 EQU   X'02'               2250 MODEL 3
UEX      EQU   X'01'               UNIT EXCEPTION
WLR      EQU   X'40'               WRONG LENGTH RECORD
XCPX00   EQU   X'00'               BYTE FOR IMMEDIATE INSTRS.  @YM05514
XCPK0BYP EQU   X'02'               KEY 0, BYPASS SMF COUNTING  @ZA16147
         SPACE
*---------------------------------------------------------------------*
*        VARIOUS BINARY EQUATES                                       *
*---------------------------------------------------------------------*
         SPACE
XCP6     EQU   B'0110'             MASK FOR 'ICM' INSTRS       @Y30IPLB
XCP7     EQU   B'0111'             MASK FOR 'ICM' INSTRS       @YM06703
         SPACE
*---------------------------------------------------------------------*
*        MISCELLANEOUS CONSTANTS EQUATED                              *
*---------------------------------------------------------------------*
         SPACE
C0       EQU   0                   CONSTANT OF 0
C1       EQU   1                   CONSTANT OF 1
C2       EQU   2                   CONSTANT OF 2
C3       EQU   3                   CONSTANT OF 3
C4       EQU   4                   CONSTANT OF 4
C5       EQU   5                   CONSTANT OF 5
C6       EQU   6                   CONSTANT OF 6
C7       EQU   7                   CONSTANT OF 7
C8       EQU   8                   CONSTANT OF 8
C12      EQU   12                  CONSTANT OF 12
C16      EQU   16                  CONSTANT OF 16
C20      EQU   20                  CONSTANT OF 20
C24      EQU   24                  CONSTANT OF 24
C28      EQU   28                  CONSTANT OF 28
C60      EQU   60                  CONSTANT OF 60
C64      EQU   64                  CONSTANT OF 64
C68      EQU   68                  CONSTANT OF 68
SMFXCP   EQU   0                   OFFSET INTO SMF FOR INITIAL ENTRY
SMFAPP   EQU   4                   OFFSET INTO SMF FOR RE-EXCP
LORD3BYT EQU   7                   MASK TO LOAD 3 BYTE ADCONS
LORD2BYT EQU   3                   MASK TO LOAD 2 BYTES        @ZA07510
SMFPCI   EQU   8                   OFFSET INTO SMF FOR PCI-S
CVTADR   EQU   16                  OFFSET TO CVT PTR
XRQEGET  EQU   20                  IECVSMGR OFFSET FOR RQE OBTAIN
XRQEFREE EQU   24                  IECVSMGR OFFSET FOR RQE RELEASE
SVRALN   EQU   64                  LENGTH OF SAVE AREA
A0       EQU   160                 CONSTANT OF 160
IOBTYPS  EQU   IOBRRT2+IOBRRT3     RELATED REQUEST TYPES         YM1319
         EJECT
*---------------------------------------------------------------------*
*        VARIOUS ABEND CODES ISSUED BY THE EXCP PROCESSOR             *
*---------------------------------------------------------------------*
         SPACE
DUMPTCB  EQU   X'15C'              INVALID SVC 92 CALL         @Y30IPLB
DUMPSUBS EQU   X'172'              DUMP CODE FOR SUBSYSTEM     @Y30IPLB
DUMPDEB  EQU   X'300'              INVALID DEB ADDRESS         @Y30IPLB
DUMPDCB  EQU   X'400'              INVALID DCB ADDRESS         @Y30IPLB
DUMPUCB  EQU   X'500'              INVALID UCB ADDRESS         @Y30IPLB
NONXCPAB EQU   X'E00'              ABEND OUTSIDE EXCP WITHOUT  @ZA05361
*                                  DEBUG AREA                  @ZA05361
DUMPFUNF EQU   X'800'              PAGE FIX OR UNFIX FAILURE   @Y30IPLB
CODEA00  EQU   X'A00'              PROG CHECK IN USER APPENDAGE@Y30IPLB
         SPACE 4                                               @ZA06068
***************************************************************@ZA06068
*                                                             *@ZA06068
*  TEMPORARY EQUATE DEFINITION FOR IOSB BIT DEFINITION        *@ZA06068
*        - BIT 1 OF IOSDIE FIELD IN IOSB                      *@ZA06068
*                                                             *@ZA06068
IOSECEDE EQU   X'40'               PCI DIE WITH CE/DE         *@ZA06068
*                                   ENDING STATUS             *@ZA06068
*                                                             *@ZA06068
***************************************************************@ZA06068
         TITLE '    IECVEXCP -- EXCP PROCESSOR -- FRONT ENTRIES'
         SPACE 5
IECVEXCP CSECT
         SPACE
         ENTRY IGC000,IGC092,IGC114
         SPACE
         ENTRY IECVEXTC,IECVX025,IECXAPG,IECVXTRM
         SPACE
         ENTRY IECVEXP1,IECVEXP2
         ENTRY IECVEXP3,IECVEXP4                               @ZA12706
         ENTRY IECVEXP5,IECVEXP6                               @ZA12706
         ENTRY IECVEXP7,IECVEXP8                               @ZA27673
         SPACE
         DC    C'IECVEXCP'         STORAGE DUMP IDENTIFIER
         DC    C'&SYSDATE'                                     @ZA08150
         SPACE 3                                               @ZA06068
************************************************************** @ZA06068
*                                                            *
* TYPE 1 SVC ENTRY :  SVC 0, 92 AND 114                      *
* REGISTERS ON ENTRY -                                       *
*     0    SVC CALLERS, FOR SVC 92  TCB ADDRESS              *
*     1    IOB ADDRESS                                       *
*     3    CVT ADDRESS                                       *
*     4    TCB ADDRESS                                       *
*     5    CURRENT RB POINTER                                *
*     6    SVC ROUTINE ENTRY ADDRESS                         *
*     7    ASCB ADDRESS                                      *
*    13    SVC CALLER SAVE ADDRESS                           *
*    14    RETURN ADDRESS                                    *
*                                                            *
* REGISTERS 0, 1, 13 AND 15 - CONTENTS WHEN SVC EXECUTED     *
* REGISTERS 2, 8, 9, 10, 11 AND 12 UNPREDICTABLE             *
*                                                            *
* ALL THREE ENTERED WITH LOCAL LOCK, SUPERVISORY STATE, KEY 0*
*                                                            *
************************************************************** @ZA06068
         TITLE '    IECVEXCP -- EXCP PROCESSOR -- SVC 92 ENTRANCE'
***********************************************************************
*                                                                     *
* SVC 92 -- THIS ROUTINE USES THE TCB ADDRESS IN REGISTER ZERO        *
*           TO OVERLAY THE TCB ADDRESS IN THE ENVIRONMENTAL           *
*           REGISTER FOUR. THE REQUEST WILL BE PROCESSED AS A         *
*           NORMAL EXCP OR EXCPVR.                                    *
*                                                                     *
* ENTRY -   IGC092                                                    *
*                                                                     *
* INPUT -   REGISTER 0                                                *
*              BYTE 0 - RESERVED FOR OPTION FIELD                     *
*              BYTE 1-3 - TCB ADDRESS                                 *
*           REGISTER 1                                                *
*              IOB ADDRESS                                            *
*                                                                     *
***********************************************************************
         SPACE 2
IGC092   DS    0D                  ALIGN ON DOUBLE WORD BOUNDARY
*                                  FOR SVC ENTRY
         BALR  BASREG,REG0         ESTABLISH BASE REGISTER
         USING *,BASREG            ADDRESSABILITY FOR MODULE
         USING FLC,REG0            ADDRESSABILITY FOR LOW CORE
         USING TCB,TCBREG          ADDRESSABILITY TO TCB
         L     WKREGA,TCBRBP       POINT TO TOP RB ON CHAIN
         USING RBBASIC,WKREGA      ADDRESSABILITY TO RB
         TM    RBOPSW+C1,SUPST     SUPVR STATE CALLER          @YM06006
         BZ    IGC092A             YES,......CONTINUE          @Y30IPLB
         DROP  TCBREG,WKREGA       RELEASE REGISTERS
         SPACE
         LA    REG1,DUMPTCB        SET UP ABEND CODE           @Y30IPLB
         B     ABEND000            GO TO ABTERM
         SPACE 2
IGC092A  LR    TCBREG,TCBRG0       CHANGE TCB ADDRESSES
         LTR   REG1,REG1           IOB PARAMETER REGISTER NEGATIVE
         BP    IGC000              NO, HANDLE LIKE AN EXCP
*                                  YES, HANDLE LIKE AN EXCPVR  @Y30IPLB
         SPACE 2
         DROP BASREG
         TITLE '    IECVEXCP -- EXCP PROCESSOR -- SVC 114 ENTRANCE'
***********************************************************************
*                                                                     *
* SVC 114 -- THIS IS THE ENTRY POINT FOR EXCPVR REQUESTS. THE         *
*            USE OF EXCPVR IS VALIDITY CHECKED AND A FLAG IS          *
*            SET TO TELL MAINLINE THAT IT IS EXCPVR.                  *
*                                                                     *
* INPUT --   REGISTER 1 CONTAINS IN:                                  *
*                   BYTE 0 - X'F4'                                    *
*                   BYTES 1-3 - IOB ADDRESS                           *
*                                                                     *
* EXITS --   VALID EXCPVR REQUEST -- XBASE WITH WKREG6 SET TO SUBSYS  *
*            INVALID REQUEST -- ABEND000                              *
*                                                                     *
***********************************************************************
         SPACE 2
IGC114   CNOP  0,8                 ALIGN ON DBL WORD BOUNDARY  @ZA08150
*                                  FOR SVC ENTRY
         BALR  BASREG,REG0         ESTABLISH BASE REGISTER
         USING *,BASREG            ADDRESSABILITY FOR MODULE
         USING IOBSTDRD,REG1       ADDRESSABILITY TO IOB
*                                  TEST AUTHORIZATION          @YM07631
         USING TCB,TCBREG          ADDRESSABILITY TO TCB
         L     WKREGA,TCBRBP       POINT TO TOP RB ON CHAIN
         USING RBBASIC,WKREGA      ADDRESSABILITY TO RB
         LA    WKREG6,RQE114       SET INDICATOR FOR EXCPVR    @ZA16147
         TM    RBOPSW+C1,PPKEY     USER IN PROTECT KEY 0-7 ?   @OZ00836
         BZ    XCP000              YES, VALID EXCPVR REQUEST   @ZA16147
         TM    RBOPSW+C1,SUPST     USER IN SUPERVISOR STATE    @YM06006
         DROP  WKREGA              RELEASE REGISTER
         BZ    XCP000              YES, VALID EXCPVR REQUEST   @ZA16147
         L     WKREGA,TCBJSCB      GET ADDRESS OF JSCB IF ONE
         LA    WKREGA,C0(WKREGA)   ZERO HIGH BYTE OF REGISTER
         LTR   WKREGA,WKREGA       DOES THE JSCB EXIST
         BZ    IGC114A             NO,                         @ZA16147
         USING IEZJSCB,WKREGA      ADDRESSABILITY FOR JSCB
         TM    JSCBOPTS,JSCBAUTH   JSCB SHOW AUTHORIZATION
         BO    XCP000              YES, VALID EXCPVR REQUEST   @ZA16147
         SPACE 2
IGC114A  EQU   *                                               @ZA16147
         O     WKREG6,LISTFIX      INDICATE FURTHER EXCPVR     @ZA16147
         B     XCP000              TEST REQUIRED IN EXCP VAL   @ZA16147
*                                  CHECK COMMON CODE.          @ZA16147
         TITLE '    IECVEXCP -- EXCP PROCESSOR -- SVC 0 ENTRANCE'
***********************************************************************
*                                                                     *
* SVC 0 -- THIS IS THE ENTRY POINT FOR SVC 0. THIS ROUTINE            *
*          DETERMINES WHETHER THE REQUESTOR IS VIRTUAL OR REAL.       *
*                                                                     *
* INPUT -- REGISTER 1 SET TO IOB ADDRESS                              *
*                                                                     *
* OUTPUT -- WKREG6 SET TO EITHER REQVIRT OR REQ1TO1                   *
*                                                                     *
***********************************************************************
         SPACE 2
IGC000   DS    0D                  ALIGN ON DOUBLE WORD BOUNDARY
         BALR  BASREG,0            SET UP BASE REG
         USING *,BASREG            ADDRESSABILITY FOR MODULE
IGC000A  TM    TCBFLGS6,TCBRV      TEST FOR 1 TO 1 REQUEST
         BZ    IGC000C             NO, VIRTUAL REQUEST
         SPACE 2
         L     WKREG6,TCBPQE       LOCATE THE VIRTUAL EQUALS REAL
         USING PQESECT,WKREG6      REGION PQE. FROM THIS CONTROL
         L     WKREG6,PQEFPQE      BLOCK THE FIRST CCW ADDRESS IS
         L     WKREGA,PQEREGN      CHECKED FOR WITHIN THE REGION.
         A     WKREGA,PQESIZE      IF IT IS, THE REQUEST IS CNSIDRD
         CLM   WKREGA,LORD3BYT,IOBSTRTB  VIRTUAL EQUALS REAL.
         BNH   IGC000C             IF NOT, IT IS CONSIDERED VIRTUAL.
         SPACE 2
IGC000B  LA    WKREG6,RQE1TO1      SET REQUEST TYPE TO VIRTUAL=REAL
         B     XCP000              BRANCH TO COMMON SECTION
         SPACE 2
IGC000C  LA    WKREG6,RQEVIRT      SET REQUEST TYPE TO VIRTUAL
         DROP  WKREGA,REG1         RELEASE ADDRESSABILITY
         TITLE '    IECVEXCP -- EXCP PROCESSOR -- VALIDITY CHECK'
***********************************************************************
*                                                                     *
*                        EXCP VALIDITY CHECK                          *
*                                                                     *
* FUNCTION --                                                         *
*        THIS ROUTINE CHECK THE VALIDITY OF THE VARIOUS CONTROL       *
*        BLOCKS USED BY EXCP PROCESSOR. THESE BLOCK ARE THE IOB,      *
*        DCB, DEB, AND UCB. THE BLOCK ID IS CHECKED ON THE DEB        *
*        THE BACKLINK FROM THE DEB TO THE DCB IS CHECKED.             *
*        IF ANY OF THESE CHECKS FAIL, THE REQUESTOR IS ABENDED.       *
*                                                                     *
* ENTRY -- XCP000 -- ENTRY FROM EITHER EXCP OR EXCPVR SVCS            *
*                                                                     *
* EXITS --                                                            *
*        ABEND000 -- ABEND THE TASK                                   *
*        XCP050 -- GET REQUEST ELEMENT                                *
*                                                                     *
***********************************************************************
         SPACE 2
         USING FRREXCP,FRRREG      ADDRESSABILITY TO EXCP FRR  @ZA12704
XCP000   EQU   *                   BEGINNING OF COMMON CODE
         BALR  BASREG,REG0         ESTABLISH BASE REGISTER
         USING *,BASREG            SET UP ADDRESSABILITY
XCPBASE  LR    IOBREG,REG1         ESTABLISH IOB REGISTER
         BAL   LNKREG,SETFRR       ESTABLISH FRR AND INIT WORK AREA
         MVI   FRRFLAG,FRRFTE      SET FRONT END ENTRANCE
         L     WKREG9,ATYPE1EX     SET TO TYPE 1 EXIT
         ST    WKREG9,FRRRETR      ESTABLISH RETURN ADDRESS POINTER
         USING IOBSTDRD,IOBREG     ADDRESSABILITY FOR THE IOB
         LR    TCBRG0,TCBREG       PLACE TCB IN R0 FOR PGM CHECK
IECVEXP3 EQU   *                   START OF A VALIDITY CHECK   @ZA12706
         L     DCBREG,IOBDCBPT     LOAD DCB ADDRESS INTO REGISTER
         USING IHADCB,DCBREG       ADDRESSABILITY FOR DCB
         L     DEBREG,DCBDEBAD     LOAD DEB ADDRESS INTO REGISTER
         LA    DEBREG,0(DEBREG)    CLEAR HIGH ORDER BYTE     @YA02976
         USING DEBBASIC,DEBREG     ADDRESSABILITY FOR DEB
         CLM   DCBREG,LORD3BYT,DEBDCBAD+C1 DO DCB POINTERS MATCH
*                                  BETWEEN IOB AND DEB
         BE    XCP010              YES, CONTINUE VALIDITY CHECKS
         SPACE
IECVEXP4 EQU   *                   END OF A VALIDITY CHECK     @ZA12706
         LA    REG1,DUMPDCB        SET UP ABEND CODE           @Y30IPLB
         B     ABEND000            ABEND THE TASK
         SPACE 2
XCP010   EQU   *                   *
         L     WKREGA,PSATOLD      GET CURRENT TCB PTR        @YM06871
         USING TCB,WKREGA          ADDRESSABILITY TO TCB
         L     WKREGA,TCBRBP       LOAD POINTER TO TOP RB
         USING RBBASIC,WKREGA      ADDRESSABILITY TO RB
         MVZ   FRRWORK,RBOPSW+C1   ISOLATE PROTECTION KEY
         CLI   FRRWORK,SYSTMKEY    CHECK FOR KEY GREATER THAN 7
         BNH   XCP014              NO, DO NOT VAL CK THE DEB   @ZA16147
         SPACE 2
*              LINKAGE TO DEB VALIDITY CHECK SUBROUTINE
         LR    REG1,DEBREG         PLACE DEB IN PARM REGISTER@YA02976
         LR    WKREGA,REG0         PLACE TCB IN PARM REGISTER
         L     APBSRG,ADEBCHK      OBTAIN ADDRESS OF DEB CHK RTN
         BALR  LNKREG,APBSRG       LINK TO ROUTINE
         B     XCP014              NORMAL RETURN, DEB CK OK    @ZA16147
         SPACE 2
XCP013   LA    REG1,DUMPDEB        ABEND REQUESTOR, INVALID DEB@Y30IPLB
         B     ABEND000            ABEND HIM
         SPACE 2
XCP014   EQU   *                                               @ZA16147
         CL    WKREG6,XCP114RQ     EXCPVR REQUEST ENTRY ??
         BL    XCP016              NO,
*                                  YES, ADDITIONAL CK REQD     @ZA16147
         L     WKREGA,DEBAPPAD     LOAD PTR TO DEB APPEND TBL  @ZA16147
         USING DEBAVT,WKREGA       ESTABLISH ADDRESSABILITY    @ZA16147
         TM    DEBCEAB,DEBESMVR    DEB SHOW AUTHORIZATION ?    @ZA27456
         BZ    XCP015              NO, CHECK EXCPVR VALIDITY   @ZA16147
         MVI   FRRWORK,XCPK0BYP    YES, SET KEY TO 0 AND SET   @ZA16147
         B     XCP020              TO BYPASS SMF COUNTING.     @ZA16147
XCP015   EQU   *                                               @ZA16147
         LTR   WKREG6,WKREG6       FURTHER EXCPVR VAL CK REQD  @ZA16147
         BP    XCP016              NO, VALID EXCPVR REQUEST    @ZA16147
         LA    REG1,DUMPSUBS       YES, INVALID ISSUE ABEND172 @ZA16147
         B     ABEND000            ABEND TASK ISSUING EXCPVR   @ZA16147
         SPACE 1                                               @ZA16147
XCP016   EQU   *                                               @ZA16147
         TM    FRRWORK,PPKEY       REQUESTOR IN SYST KEY (0-7) @ZA16147
         BZ    XCP020              YES, BYPASS BLOCK VAL CHKS  @ZA16147
         MODESET SWAPKEY,KEYADDR=FRRWORK,WORKREG=15
         BAL   LNKREG,XCPVALA      VALIDITY CHECK THE BLOCKS
         SPACE 2
XCP020   EQU   *                                               @Y30IPLB
         L     WKREGB,IOBECBPT     LOAD ECB PTR FROM IOB,      @ZA09463
*                                  USED IN XCP035 ROUTINE TO   @ZA09463
*                                  ZERO ECB FIELD.             @ZA09463
         SPACE 1
         TM    DEBNMEXT,EXTMSK     TEST FOR ANY EXTENTS
         BNZ   XCP025              YES, USE M GT 1 DIRECTLY
         LA    UCBREG,DEBBASND     POINT TO FIRST EXTENT
         USING DEBDASD,UCBREG      ADDRESSABILITY TO SINGLE EXTENT
         L     UCBREG,DEBUCBA-C1   LOAD POINTER TO UCB
         LA    UCBREG,C0(UCBREG)   ZERO HIGH ORDER BYTE
         USING UCBOB,UCBREG        ADDRESSABILITY FOR UCB
         TM    UCBTBYT3,UCB3DISP+UCB3COMM+UCB3DACC DISK,TP OR GRAPHICS
         BZ    XCP030              NO, DOESNT HAVE AN M
***                                                            ***
*  USE THE IOBM FIELD TO INDEX INTO THE DEB TO LOCATE THE UCB    *
* FOR THIS IO REQUEST. THE IOBM FIELD SHOULD BE LESS THAN THE DEB*
*  EXTENT FIELD IN THAT IOBM IS INDEXED FROM 0 - , WHILE THE DEB *
*  IS INDEXED FROM 1 . TO SUPPORT HAND BUILT DEB'S, MUST CONSIDER*
*  DEB'S CONTAINING ZERO FOR THE EXTENT INDEX.                   *
***                                                            ***
         SPACE
XCP025   SLR   WKREG9,WKREG9       CLEAR REG FOR INSERT CHAR   @Y30IPLB
         SLR   WKREGA,WKREGA       PREPARE SHIFT REGISTER      @Y30IPLB
         IC    WKREG9,DEBNMEXT     GET NO. OF EXTENTS FROM DEB @Y30IPLB
         IC    WKREGA,IOBM         GET EXTENT INDEX
         CR    WKREGA,WKREG9       IOB EXTENT LOWER THAN MAX
         BL    XCP028              YES, VALID DEB
         CLI   IOBM,C0             STILL OK IF BOTH ZERO
         BNE   XCP013              NOT ZERO, INVALID DEB
XCP028   IC    WKREG9,DEBEXSCL     GET EXTENT SIZE
         SLL   WKREGA,C0(WKREG9)   MULTIPLY BY SIZE
         LA    UCBREG,DEBBASND(WKREGA) POINT TO EXTENT
         USING DEBDASD,UCBREG      ADDRESSABILITY TO SINGLE EXTENT
         L     UCBREG,DEBUCBA-C1   LOAD UCB FROM CORRECT EXTENT
         LA    UCBREG,C0(UCBREG)   ZERO HIGH ORDER BYTE
         USING UCBOB,UCBREG        ADDRESSABILITY FOR UCB
XCP030   TM    UCBID,UCBSTND        IS UCB VALID
         BO    XCP035              CONTINUE PROCESSING
         SPACE
         LA    REG1,DUMPUCB        SET UP ABEND CODE           @Y30IPLB
         B     ABEND000            ABEND THE REQUESTOR
         SPACE 2
*        ALL CONTROL BLOCKS ARE VALID AT THIS POINT. FIELDS THAT
*        REQUIRE SPECIFIC VALUES IN THE IOB ARE TO BE INITIALIZED
*        HERE.
XCP035   SLR   WKREGA,WKREGA       ZERO A REGISTER FOR USE HERE@Y30IPLB
         STH   WKREGA,IOBERRCT     CLEAR ERROR COUNT
         ST    WKREGA,IOBFLAG3     CLEAR FOUR BYTES
         ST    WKREGA,IOBCSW+C3    CLEAR 2ND HALF OF CSW
         STH   WKREGA,IOBSENS0     CLEAR SENSE AREA
         NI    IOBFLAG1,IOBDATCH+IOBCMDCH+IOBUNREL+IOBRSTRT CLEAR ALL
*                                  BYTE CHAIN AND RELATED
         NI    IOBFLAG2,IOBRRT2+IOBRRT3+IOBSENSE+IOBSTATO+IOBPNCH
*                                  TURN OFF THE ERP FLAGS
         MVI   IOBECBCC,ECBNORM    SET NORMAL COMPLETION FLAG
         MVI   IOBSIOCC,C0         ZERO SIO CONDITION CODE
*                                  WKREGB CONTAINS ECB ADDRESS @ZA09463
*                                  FROM IOB, LOADED ABOVE IN   @ZA09463
*                                  XCP020 ROUTINE.             @ZA09463
         ST    WKREGA,C0(WKREGB)   INSURE ECB IS ZERO ON       @YM08618
*                                  EXCP ENTRY
         TITLE '    IECVEXCP - EXCP PROCESSOR - GET RQE ROUTINE'
***********************************************************************
*                                                                     *
*                   GET REQUEST ELEMENT AND INITIALIZE                *
*                                                                     *
*        THIS ROUTINE INTERFACES WITH CORE MANAGEMENT TO GET A        *
*        REQUEST ELEMENT. TO DO THIS, IT IS NECESSARY TO HAVE THE     *
*        ADDRESS OF A SAVE AREA. SINCE THE LOCAL LOCK IS HELD, THAT   *
*        SAVE AREA IS USED. THE ADDRESSES OF THE IOB, DEB, AND TCB    *
*        ARE PLACED IN THE RQE AS ARE THE REQUEST TYPES AND FLAGS.    *
*                                                                     *
***********************************************************************
         SPACE 2
         L     APBSRG,ACOREMGT     GET ADDRESS OF STORAGE MANAGER
         L     REG13,PSAAOLD       FIND THE ASCB
         USING ASCB,REG13          ADDRESSABILITY FOR ASCB
         LH    WKREGB,ASCBASID     LOAD THE ASID
         L     REG13,ASCBASXB      GET THE ADDRESS OF THE ASXB
         USING ASXB,REG13          ADDRESSABILITY TO THE ASXB
         LA    REG13,ASXBFLSA      POINT TO THE LOCAL LOCK SAVE AREA
         ST    REG13,FRRLLSA       SAVE THE LOCAL LOCK SAVE AREA PTR
         OI    FRRTCNT,FRRG40      COVER SMGR WITH FRR
         BAL   LNKREG,XRQEGET(APBSRG)  GO TO STORAGE MANAGER
         NI    FRRTCNT,FF-FRRG40   TURN OFF COVER OF SMGR
         LR    RQEREG,WKREGB       PLACE RQE IN CORRECT REGISTER
         USING RQE,RQEREG          ADDRESSABILITY TO RQE
         SPACE 2
         ST    UCBREG,RQEUCB       STORE UCB ADDRESS
         ST    IOBREG,RQEIOB       STORE IOB PTR IN RQE        @ZA12705
         ST    DEBREG,RQEDEB       STORE DEB PTR IN RQE        @ZA12705
         ST    TCBRG0,RQETCB       SAVE TCB ADDRESS IN RQE
         ST    WKREGA,RQETCCW      ZERO TCCW FIELD IN RQE      @ZA12705
         ST    WKREGA,RQENRQE      ZERO NEXT RQE FLD IN RQE    @ZA12696
         ST    WKREGA,RQERRQ       ZERO RRQ FIELD IN RQE       @ZA12705
         ST    WKREGA,RQESRB       ZERO SRB FIELD IN RQE       @ZA12705
         ST    WKREGA,RQEIPIB      ZERO IPIB FIELD IN RQE      @ZA12705
         ST    WKREGA,RQEPRT       ZERO FLAG BYTES IN RQE      @ZA12705
         IC    WKREGA,FRRWORK      GET CALLERS PROTECT KEY     @ZA12705
         STC   WKREGA,RQEPRT       AND STORE IN RQE            @ZA12705
         STC   WKREG6,RQETYPE      STORE ENVIRONMENT TYPE FLAGS
         ST    RQEREG,FRRCRQE      STORE RQE ADDR AS CURRENT
         TITLE 'IECVEXCP - EXCP PROCESSOR - SMF INTERFACE ROUTINE'
**************  INTERFACE FOR THE SMF ROUTINE  ************************
*               REGISTERS AND THEIR CONTENTS ARE AS FOLLOWS           *
*                       R0    -   TCB ADDRESS                         *
*                       R1    -   COUNT OF 1                   @ZA05478
*                       R3    -   DEB ADDRESS                         *
*                       R4    -   DCB ADDRESS                         *
*                       R7    -   UCB ADDRESS                         *
*                       R14   -   RETURN ADDRESS                      *
*                       R15   -   ENTRY POINT                         *
*                                                                     *
*               NOTE: R10, R11, R12 AND R13 ARE DESTROYED             *
*                                                                     *
***********************************************************************
         SPACE
*******  CHECK FOR SMF RECORDING  *****************************@ZA06067
         SPACE 1                                               @ZA06067
         CLI   RQEPRT,XCPK0BYP     BYPASS SMF COUNTING ??      @ZA16147
         BE    XCPVAM                                          @ZA16147
         LR    WKREGA,TCBRG0       LOAD TCB ADDRESS            @ZA06067
         USING TCB,WKREGA                                      @ZA06067
         L     WKREGA,TCBRBP       LOAD TOP RB ON TCB CHAIN    @ZA06067
         DROP  WKREGA                                          @ZA06067
         USING RBBASIC,WKREGA                                  @ZA06067
         TM    RBSTAB1,RBFTSVRB    CHECK TOP RB FOR PRB OR     @ZA16147
         DROP  WKREGA              SVRB IN USER KEY -------    @ZA16147
         BZ    XCPSMF10            ZERO; PRB, DO EXCP COUNTING @ZA16147
         BNO   XCPVAM              MIXED, BYPASS COUNTING      @ZA16147
         TM    RQEPRT,PPKEY        SVRB RUNNING IN PP KEY ??   @ZA16147
         BZ    XCPVAM              NO, BYPASS COUNTING         @ZA16147
*                                  YES, DO EXCP COUNTING       @ZA16147
         SPACE 1                                               @ZA06067
XCPSMF10 EQU   *                   INTERFACE WITH SMF ROUTINE  @ZA06067
         OI    RQEPRT,RQESMFRQ     SET SMF RCDG REQD FLAG      @ZA06067
         L     APBSRG,ASMFEX       LOAD ADDRESS OF SMF ROUTINE
         LR    WKREG9,FRRREG       SAVE FRR REG
         LR    WKREG6,RQEREG       SAVE RQE REG OVER INTERFACE @ZA05478
         LA    REG1,C1             PASS TO SMF A COUNT OF 1    @ZA05478
         BAL   LNKREG,SMFXCP(APBSRG) RECORD THE EXCP
         LR    FRRREG,WKREG9       RESTORE FRR REG
         LR    RQEREG,WKREG6       RESTORE RQE REG             @ZA05478
         L     REG13,FRRLLSA       RESTORE REGISTER 13 AFTER   @YM03250
*                                  CALL TO SMF ROUTINE
         TITLE '    IECVEXCP -- EXCP PROCESSOR -- VAM WINDOW INTERCEPT'
***********************************************************************
*                                                                     *
*        DATA SETS WHICH EXIST AS A SUBSET OF VIRTUAL CORE ARE        *
*        HANDLED BY THE VIRTUAL ACCESS METHOD WHICH GETS CONTROL      *
*        AFTER THE INITIALIZATION OF THE RQE IS COMPLETED. EXCP       *
*        PROCESSOR CAN RECOGNIZE A VAM REQUEST BY CHECKING FOR        *
*        THE VIRTUAL UCB IDENTIFICATION. VAM IS TREATED AS AN         *
*        APPENDAGE WITH IOS PASSING THE FOLLOWING REGISTERS --        *
*              RQEREG, IOBREG,DEBREG,DCBREG,SAVEREG,LNKREG,           *
*              AND APBSRG.                                            *
*        UPON RETURN VAM WILL PASS THE RQEREG AND BASEREG WITH        *
*        BRANCHES AS FOLLOWS --                                       *
*              LNKREG+0 - POST, FREE, RETURN RQE                      *
*              LNKREG+4 - SKIP POST, FREE RQE                         *
*              LNKREG+8 - SKIP POST, SKIP FREE                        *
*                                                                     *
***********************************************************************
XCPVAM   TM    UCBJBNR,UCBVRDEV    IS THIS A VAM REQUEST
         BZ    XCP038              NO, CONTINUE MAIN LINE
         ST    FRRREG,RQEIPIB      SAVE THE FRR ADDRESS OF RQE
         L     FRRREG,ASMFEX       LOAD ADDRESS OF SMF ROUTINE
         ST    FRRREG,RQETCCW      STORE FOR WINDOW INTERCEPT USE
         OI    RQETYPE,RQEVAM      SET VAM IN CHARGE OF RQE    @YM05982
*        ENVIRONMENTAL REGISTERS ARE ALREADY SET UP
         WIEXCP                    CALL WINDOW INTERCEPT
         B     XCPVAMA             POST AND FREE THE RQE
         B     XCPVAMB             FREE THE RQE BUT DONT POST
         B     XCPVAMD             DONT POST, DONT FREE RQE
         SPACE 1
XCPVAMA  BAL   LNKREG,XCPENVL      LOAD ENVIRONMENTAL REGISTERS
         BAL   WKREG6,XCPPOST      POST THE ECB COMPLETE       @ZA11892
         B     XCPVAMC             SKIP TO FREE CALL
         SPACE 1
XCPVAMB  BAL   LNKREG,XCPENVL      LOAD ENVIRONMENTAL REGISTERS
XCPVAMC  LA    WKREGB,XCPFREE      GET FINAL DESTINATION ADDR  @Y30IPLB
         B     XCPVAME             ENTER COMMON CODE           @Y30IPLB
         SPACE
XCPVAMD  LA    WKREGB,XCPVAMF      GET DESTINATION ADDRESS     @Y30IPLB
XCPVAME  L     FRRREG,RQEIPIB      LOAD FRR ADDRESS            @Y30IPLB
         SLR   WKREG9,WKREG9       INITIALIZE A ZERO REG       @Y30IPLB
         ST    WKREG9,RQEIPIB      ZERO IBIP SO NOT MISLEADING @Y30IPLB
         BALR  LNKREG,WKREGB       PERFORM SPECIFIED REQUEST   @Y30IPLB
         SPACE
XCPVAMF  EQU   *                   RETURN LOCATION             @Y30IPLB
         B     XCPEXIT             DETERMINE MODE OF EXCP EXIT @Y30IPLB
         TITLE '    IECVEXCP -- EXCP PROCESSOR -- REQUEST QUEUEING'
***********************************************************************
*                                                                     *
*        IF THE REQUEST IS A RELATED REQUEST, IT IS HUNG OFF THE RRQ  *
*        WHICH IS POINTED TO FROM THE DEB.                            *
*                                                                     *
***********************************************************************
         SPACE 2
XCP038   TM    IOBFLAG1,IOBUNREL   IS THE REQUEST RELATED
         BO    XCP050              NO, NO QUEUEING NECESSARY
         SLR   WKREG9,WKREG9       ZERO A REGISTER FOR COMPARE @Y30IPLB
         MVC   FRRWORK,IOBFLAG2    BYTE CONTAINING RELATED FLAGS
         NI    FRRWORK,IOBTYPS     ZERO ALL BUT TYPES FIELD
         IC    WKREG9,FRRWORK      PLACE BITS IN A REGISTER
         SRL   WKREG9,C4           SHIFT TO LOW BITS
         LA    WKREG9,C1(WKREG9)   ADD ONE TO THE RESULT
         EX    WKREG9,RRTYPOR      OR THE RELATED REQUEST TYPE WITH
*                                  THE ENVIRONMENT TYPE
         L     WKREG9,DEBRRQ       LOCATE THE DEB R R QUEUE
         LA    WKREG9,C0(WKREG9)   ZERO HIGH BYTE
         LTR   WKREG9,WKREG9       THIS DEB
         BNZ   XCP040              YES, DO NOT HAVE TO GET ONE
         TM    UCBTBYT3,UCB3UREC   IS THIS A UNIT RECORD DEVICE
         BZ    XCP039              NO, CONTINUE PROCESSING
         SPACE 1
         CLI   UCBTBYT4,UCB3525    IS THIS A 3525
         BNE   XCP039              NO, CONTINUE PROCESSING
         SPACE 1
         USING IHADCB,DCBREG       ADDRESSABILITY TO DCB
         TM    DCBMACF1,DCBMRECP   IS ACCESS METHOD            @ZA25344
         BO    XCP039              EXCP? YES                   @ZA25344
         TM    DCBQSWS,DCBASSOC    ARE THERE ASSOCIATED DATA SETS
         BZ    XCP039              NO, SKIP SEARCHING FOR AN RRQ
         L     WKREG9,DEBRDCB      LOAD READ DCB ADDRESS
         BAL   LNKREG,XCP039B      CHECK FOR RRQ QUEUE         @Y30IPLB
         L     WKREG9,DEBPDCB      LOAD PUNCH DCB ADDRESS
         BAL   LNKREG,XCP039B      CHECK FOR RRQ QUEUE         @Y30IPLB
         L     WKREG9,DEBWDCB      LOAD PRINT DCB ADDRESS
         BAL   LNKREG,XCP039B      CHECK FOR RRQ QUEUE         @Y30IPLB
*                                  THERE ISNT ONE, GET ONE
         EJECT
* ISSUE A GETMAIN TO OBTAIN AN RRQ FROM SUBPOOL 254            @ZA08736
XCP039   LR    WKREG6,RQEREG       SAVE RQE ACROSS INTERFACE
         L     TCBREG,RQETCB       PLACE TCB INTO A REGISTER
         L     UCBREG,PSAAOLD      GET ASCB ADDRESS
         GETMAIN RU,LV=RRQBL,SP=254,BRANCH=YES,KEY=0
         SPACE 1
         LR    WKREG9,REG1         SAVE ADDRESS OF RRQ
         LR    RQEREG,WKREG6       RESTORE RQE ADDRESS
         L     UCBREG,RQEUCB       RESTORE UCB ADDRESS
         L     DEBREG,RQEDEB       RESTORE DEB REGISTER CONTENTS
         L     DCBREG,DEBDCBAD     RELOAD DCB ADDRESS
         STCM  WKREG9,LORD3BYT,DEBRRQ+C1 STORE ADDRESS OF RRQ IN DEB
         SPACE 1
         USING RRQ,WKREG9          ADDRESSABILITY TO RRQ
XCP039A  ST    RQEREG,RRQFIRST     STORE RQE AS FIRST ON QUEUE
         SLR   WKREG6,WKREG6       ZERO WKREG6,USED AS PARM REG@Y30IPLB
         B     XCP045              CONTINUE AS IF NOT FIRST ON QUE
         SPACE 2
XCP039B  CR    DCBREG,WKREG9       IS THIS THE PRESENT DCB     @Y30IPLB
         BER   LNKREG              YES,SKIP LOOKING AT THIS ONE@Y30IPLB
         LTR   WKREG9,WKREG9       IS THIS ONE OF THE DCBS
         BZR   LNKREG              NO, NOTHING TO LOOK AT      @Y30IPLB
         TM    DCBOFLGS-IHADCB(WKREG9),DCBOFOPN IS THE DCB OPEN
         BZR   LNKREG              NO, SKIP IT                 @Y30IPLB
         L     WKREGB,DCBDEBAD-IHADCB(WKREG9) LOAD THE DEB PTR @ZA08736
         L     WKREG9,DEBRRQ-DEBBASIC(WKREGB) LOAD THE RRQ PTR @ZA08736
         LA    WKREG9,C0(WKREG9)   ZERO THE HIGH BYTE
         LTR   WKREG9,WKREG9       IS THE POINTER ZERO
         BZR   LNKREG              NO, GET AN RRQ              @Y30IPLB
         EJECT
* AN RRQ ADDRESS WAS FOUND IN A DEB, NEED TO VALIDATE DEB.     @ZA08736
         CLI   RQEPRT,SYSTMKEY     SYSTEM REQUEST (KEYS 0-7)?  @ZA08736
         BNH   XCP039D              YES,  BYPASS DEB VAL CK    @ZA08736
         SPACE
* SETUP LINKAGE TO DEB VALIDITY CHECK SUBROUTINE               @ZA08736
         L     WKREGA,RQETCB       PLACE TCB IN PARM REG       @ZA08736
         LR    WKREG6,RQEREG       SAVE RQE ADDRESS            @ZA08736
         LR    RQEREG,WKREGB       PLACE DEB IN PARM REG       @ZA08736
         L     APBSRG,ADEBCHK      LOAD ADDR TO DEB CHK RTN    @ZA08736
         BALR  LNKREG,APBSRG       LINK TO DEB CHK ROUTINE     @ZA08736
         B     XCP039C             NORMAL RETURN, CONTINUE     @ZA08736
         B     XCP013              INVALID DEB, ABEND REQUEST  @ZA08736
         SPACE
XCP039C  EQU   *                                               @ZA08736
         LR    RQEREG,WKREG6       RESTORE RQE POINTER         @ZA08736
         SPACE 2
XCP039D  STCM  WKREG9,LORD3BYT,DEBECBB STORE RRQ AS THIS ONE   @ZA08736
         SPACE 2
XCP040   L     WKREG6,RRQLAST      LOAD ADDRESS OF LAST RQE ON CHN
         LA    WKREG6,C0(WKREG6)   CLEAR HI ORDER BYTE          @YM1138
         CR    WKREG9,WKREG6       IS THIS A POINTER TO BEGINNING
         BE    XCP039A             YES, STORE RQE AS FIRST
         ST    RQEREG,RQENRQE-RQE(WKREG6) STORE THIS RQE AD AS CHN
XCP045   ST    RQEREG,RRQLAST      STORE THIS RQE AS LAST ON CHN
         ST    WKREG6,FRRPRQE      STORE PRVS RQE IN FRR WORK AREA
         SLR   WKREGA,WKREGA       ZERO A REG IN PREPARATION   @Y30IPLB
         BCTR  WKREGA,REG0         MAKE REG ALL F'S AS END OF CH
         ST    WKREGA,RQENRQE      STORE AS END OF CHAIN
         ST    WKREG9,RQERRQ       SAVE RRQ ADDRESS IN RQE
         TITLE '   IECVEXCP -- EXCP PROCESSOR -- RELATED REQUEST CHECK'
***********************************************************************
*                                                                     *
*        THIS SECTION CHECK THE REQUEST TO SEE WHERE IT IS ON THE     *
*        RELATED REQUEST QUEUE IF RELATED AND TO SEE IF IT            *
*        CAN BE STARTED.                                              *
*                                                                     *
***********************************************************************
         TM    DCBIFLGS,DCBIFEC    PERM ERROR IN LAST REQUEST
         BO    XCP046A             YES, SET THIS AS PURGED
         C     RQEREG,RRQFIRST     RQE AT TOP OF QUEUE
         BE    XCP050              YES, CONTINUE PROCESSING
         TM    RQETYPE-RQE(WKREG6),RQETYP2 IS PREV RQE TYPE 2 OR 3
         BZ    XCPEXIT             NO, IT IS TYPE 1,  COMPLETE @YM03482
         SLR   APBSRG,APBSRG       ZERO A COUNT REGISTER       @Y30IPLB
         L     WKREGB,RRQFIRST     LOAD POINTER TO FIRST ON QUEUE
XCP046   CR    RQEREG,WKREGB       THIS THE PRESENT RQE
         BE    XCP047              YES, CHECK COUNT
         TM    RQETYPE-RQE(WKREGB),RQETYP2 IS THIS ONE TYPE 2 OR 3
         BZ    XCPEXIT             NO, TYPE 1, CANNOT GO FURTHER
         TM    RQETYPE-RQE(WKREGB),RQEEOEE   END OF EXTENT     @YM04681
*                                  ERROR TO BE PURGED?         @YM04681
         BO     XCPEXIT            YES, GO TEST FOR EXIT       @YM04681
         SPACE
         LA    APBSRG,C1(APBSRG)   INCREMENT COUNT BY 1
         L     WKREGB,RQENRQE-RQE(WKREGB) LOAD NEXT RQE POINTER
         B     XCP046              LOOP BACK TO LOOK FOR THIS ONE
         SPACE 2
XCP046A  MVI   IOBECBCC,ECBPURG    SET PURGE CODE IN IOB
         L     WKREGA,DEBAPPAD     LOAD POINTER TO AVT
         USING DEBAVT,WKREGA
         L     APBSRG,DEBXCEA      LOAD POINTER TO ABNORMAL END
         DROP  WKREGA
         B     XCP203              EXECUTE ABNORMAL END APPENDAGE
         SPACE 1
XCP046B  L     TERMBAS,XCPBASE2    POST AND FREE ROUTINE BASE  @ZA07510
         USING XCPTERM,TERMBAS     ADDRESSABILITY TO TERM RTN
         L     REG13,FRRLLSA       RESTORE SAVE AREA ADDRESS    @YM1480
         B     XCP508              ENTER TERMINATION ROUTINE   @YM03482
         SPACE 2
XCP047   LA    REG0,C4             LOAD MAX VALUE IN REGISTER
         CR    APBSRG,REG0         ENOUGH TRANSLATED YET
         BL    XCP050              NO, CONTINUE PROCESSING
         TITLE '    IECVEXCP -- EXCP PROCESSOR -- EXIT ROUTINE'
***********************************************************************
*                                                                     *
*        THIS SECTION CHECKS THE PLACE ENTERED TO SEE IF ANY REQUESTS *
*        CAN BE CONTINUED. IF YES, IT CHECKS TO SEE IF THERE ARE ANY  *
*        TO CONTINUE. AGAIN, IF YES, THE REQUEST IS TAKEN THROUGH     *
*        TRANSLATION BUT NOT STARTED. THIS LOOP IS CONTINUED UNTIL NO *
*        MORE REQUESTS EXIST OR THE MAXIMUM OF FOUR IS REACHED.       *
*                                                                     *
*        IF NO, OR AT THE END OF THE TRANSLATION LOOP DESCRIBED ABOVE,*
*        RESOURCES ARE FREED, THE LOCAL LOCK IS RELEASED IF OBTAINED, *
*        THE RETURN ADDRESS IS SAVED AND THE FRR IS DELETED.          *
*                                                                     *
***********************************************************************
         SPACE 2
XCPEXIT  TM    FRRFLAG,FRRBKE      IS THIS BACK END ENTRANCE
         BZ    XCPEXITB            NO, DO NOT TRY TO TRANSLATE @Y30IPLB
         CLI   FRRCRQE,FF          HAS TCB BEEN STORED IN RQE  @ZA12711
         BE    XCPEXITA            FREE ROUTINE; IF YES BYPASS @ZA12711
         MVC   FRRCRQE(C4),RQETCB  YES, SAVE TCB ADDR-SRB MODE @YM06742
         MVI   FRRCRQE,FF          INSURE NEGATIVE NO. FOR FRR @YM06742
*                                                              @ZA02391
XCPEXITA EQU   *                                               @ZA12711
         TM    FRRWORK,FRRUNREL    IS THIS A RELATED REQUEST?  @ZA15704
         BO    XCPEXITB            NO, DONOT TRY TO XLATE ANY  @Y30IPLB
         ST    RQEREG,FRRPRQE      STORE RQEREG AS PREVIOUS RQE
         L     WKREGB,DEBRRQ       LOAD A POINTER TO THE RRQ
         TM    DCBIFLGS,DCBIFEC    PERMANENT ERROR IN LAST REQUEST
         BZ    XCPEXITK            NO, CK FOR RRQ RQE XLATION  @ZA12712
         SPACE 2
XCPEXITB L     RQEREG,FRRSTRG      LOAD POINTER TO BLOCK CHAIN @Y30IPLB
         LTR   RQEREG,RQEREG       IS IT ZERO
         BZ    XCPEXITC            YES, CONTINUE EXIT          @Y30IPLB
         L     WKREGB,GET160       SPECIFY 160 BYTE BLOCK
         L     APBSRG,ACOREMGT     LOAD POINTER TO CORE MANAGER
         BAL   LNKREG,C4(APBSRG)   GO FREE THE BLOCKS IN THE CHAIN
         SPACE
XCPEXITC EQU   *                   *                           @Y30IPLB
         TM    FRRFLAG,FRRBKE      BACK END ENTRANCE
         BZ    XCPEXITE            NO, SKIP FREE OF LOCAL LOCK @Y30IPLB
         SPACE
         TM    FRRWORK,FRRPTERM    BACK END ENTERED AT XCPTERMA@YM30169
         BO    XCPEXITD            YES, THEN REL LOCAL LOCK    @YM30169
         SPACE
         LM     WKREG6,WKREG7,C64(REG13) GET IECVPST BASE AND  @Y30IPLC
*                                  FRR REGISTERS               @Y30IPLC
         LR    REG4,WKREG6         RESTORE IECVPST FRR REG.    @Y30IPLC
         L     WKREG6,FRRRETR      RESTORE RETURN ADDRESS      @Y30IPLC
         LA    WKREG6,C16(WKREG6)  POST STATUS RETURN VECTOR   @Y30IPLC
         B     XCPEXITJ            DELETE THE FRR.             @Y30IPLC
         SPACE
XCPEXITD LR    WKREG6,FRRREG       SAVE FRR REGISTER           @YM30169
         SETLOCK RELEASE,TYPE=LOCAL,                                   X
               RELATED=(ADDRSPC,IECVEXCP(XCPTERMA))
         LR    FRRREG,WKREG6       RESTORE FRR REGISTER        @YM30169
         SPACE
XCPEXITE L     WKREG6,FRRRETR      LOAD RETURN ADDRESS         @Y30IPLB
         LR    RQEREG,IOBREG       RESTORE IOB TO REG 1
         TM    FRRFLAG,FRREXPR     EXPR ENTRY FOR PURGE/TERM ? @ZA12704
         BOR   WKREG6              YES, RETURN TO IECVEXPR     @ZA12704
XCPEXITJ SETFRR D,WRKREGS=(WKREGA,WKREGB) DLETE FRR FROM CHAIN @Y30IPLC
         LR    BASREG,WKREG7       RESTORE IECVPST BASE REG.   @Y30IPLC
         BR    WKREG6              RETURN TO CALLER
         EJECT                                                 @ZA12712
************************************************************** @ZA12712
** ENTRY TO CHECK FOR RELATED REQUEST RQE TRANSLATION UP TO  * @ZA12712
**       A STARTABLE STATE FOR TYPE 2 AND 3 REQUESTS         * @ZA12712
************************************************************** @ZA12712
         SPACE 1                                               @ZA12712
XCPEXITK EQU   *                                               @ZA12712
         TM    FRRTCNT,FRRXLTA     RETURN FROM RQE XLATION ??  @ZA12712
         BZ    XCPEXITM            NO, GO DO 1ST TIME HDLING   @ZA12712
         TM    RQEFLAG,RQESTBL     WAS RQE XLATED TO STARTABLE @ZA12712
         BZ    XCPEXITB            CONDITION; IF ZERO, EXIT.   @ZA12712
         B     XCPEXITP            YES, CONTINUE               @ZA12712
XCPEXITM EQU   *                                               @ZA12712
         L     RQEREG,RRQFIRST-RRQ(WKREGB)  LD 1ST RQE ON RRQ  @ZA12712
XCPEXITN LTR   RQEREG,RQEREG       END OF RQE CHAIN (ALL F'S)? @ZA12712
         BM    XCPEXITB            YES, CLEAN UP AND EXIT      @ZA12712
XCPEXITP EQU   *                                               @ZA12712
         TM    RQETYPE,RQETYP2     REL RQE TYPE 2 OR 3 ??      @ZA12712
         BZ    XCPEXITB            NO, TYPE 1, EXIT.           @ZA12712
         TM    RQEFLAG,RQESTBL     IS RQE STARTABLE ??         @ZA12712
         BZ    XCPEXITR            NO, NEEDS TO BE XLATED      @ZA12712
         ST    RQEREG,FRRPRQE      STORE RQE AS PREVIOUS RQE   @ZA12712
         TM    FRRTCNT,FRRXLT      MAXIMUM COUNT REACHED ??    @ZA12712
         BO    XCPEXITB            BOTH BITS ON; YES, EXIT     @ZA12712
         IC    WKREGB,FRRTCNT      NO, LOAD XLATE COUNTER      @ZA12712
         AL    WKREGB,GETRQE       INCR COUNT BY ONE           @ZA12712
         STC   WKREGB,FRRTCNT      STORE UPDATED COUNT         @ZA12712
         L     RQEREG,RQENRQE      LOAD NEXT RQE ON RRQ        @ZA12712
         B     XCPEXITN            LOOP BACK TO CK RQE         @ZA12712
         SPACE 1                                               @ZA12712
XCPEXITR EQU   *                                               @ZA12712
         TM    RQETYPE,RQEEOEE     PURGE END OF EXTENT ERROR?  @YM04681
         BO    XCPEXITB            YES, CLEAN UP AND EXIT      @YM04681
         ST    RQEREG,FRRCRQE      NO, STORE AS CURRENT RQE    @ZA12712
         BAL   LNKREG,XCPENVL      LOAD ENVIRONMENTAL REGS     @YM05304
*                                  FROM RQE: IOB,DEB,DCB,UCB   @YM05304
         OI    FRRTCNT,FRRXLTA     SET RQE HDLING FLAG         @ZA12712
         TITLE '  IECVEXCP -- EXCP PROCESSOR -- GET SRB AND INITIALIZE'
***********************************************************************
*                                                                     *
*        GET AN SRB AND A TCCW. STORAGE MANAGEMENT ROUTINE OF IOS IS  *
*        USED TO DO THIS. EACH OF THE BLOCKS IS INITIALIZED TO THE    *
*        POINT OF ITS BEING USED LATER.                               *
*                                                                     *
***********************************************************************
         SPACE 2
XCP050   EQU   *
         LA    WKREGB,C2           NUMBER OF BLOCKS TO GET
         TM    RQETYPE,RQEVIRT     VIRTUAL REQUEST
         BZ    XCP055              NO, LEAVE NUMBER OF BLOCKS TO 2
         LA    WKREGB,C4           SET NUMBER OF BLOCKS TO 4
XCP055   SLR   WKREGA,WKREGA       ZERO A WORK REG             @Y30IPLB
         EX    WKREGB,XCPCMPR      NO. BLOCKS AVAIL GE TO REQ? @Y30IPLB
         BL    XCP060              NO,GO TO STORAGE MANAGER
         IC    WKREGA,FRRFCNT      GET THE COUNT IN REG
         SLR   WKREGA,WKREGB       DECREMENT NO AVAILABLE      @Y30IPLB
         STC   WKREGA,FRRFCNT      STORE NEW NUMBER AVAILABLE
         LR    WKREG6,WKREGB       PLACE COUNT IN DIFFERENT PLACE
         L     WKREGB,FRRSTRG      LOAD POINTER TO FIRST BLOCK
         LR    WKREGA,WKREGB       PLACE POINTER INTO SECOND REG
XCP058   EQU   *                                               @ZA13838
         LR    WKREG9,WKREGA       SAVE LAST 160 B BLOCK PTR   @ZA13838
         L     WKREGA,C0(WKREGA)   LOAD NEXT 160 B BLOCK ADDR  @ZA13838
         BCT   WKREG6,XCP058       FIND NUMBER BLOCKS NEEDED
         ST    WKREGA,FRRSTRG      STORE NEW BLOCK POINTER
         ST    WKREG6,C0(WKREG9)   ZERO LAST 160 B CHAIN PTR   @ZA13838
         L     WKREG6,PSAAOLD      GET ASCB POINTER            @YM02863
         USING ASCB,WKREG6         ESTABLISH ADDRESSABILITY    @YM02863
         LH    WKREG6,ASCBASID     GET THE ADDR SPACE ID       @YM02863
         B     XCP065              BRANCH TO FILL IN BLOCKS
         SPACE 2
XCP060   SLL   WKREGB,C28          SHIFT NUMBER TO HIGHEST NIBBLE
         L     WKREG6,PSAAOLD      GET POINTER TO ASCB
         LH    WKREGA,ASCBASID     LOAD ASID FROM ASCB         @YM30183
         LR    WKREG6,WKREGA       SAVE ASID IN WKREG6 UNTIL   @YM30183
*                                  INITIAL. OF IOSB ASID FIELD
         SLL   WKREGA,C8           THEN POSITION IN CENTER BYT @YM30183
         OR    WKREGB,WKREGA       OR THE TWO REGS SO HAVE NO-ASID
         IC    WKREGB,GET160+C3    160 TYPE, HAVE NO-ASID-TYPE
         L     APBSRG,ACOREMGT     GET ADDRESS OF STORAGE MANAGEMENT
         BALR  LNKREG,APBSRG       GO GET BLOCKS
XCP065   ST    WKREGB,RQESRB       STORE ADDRESS OF SRB IN RQE
         USING SRBSECT,WKREGB      ADDRESSABILITY TO SRB
         LA    IOSBRG,SRBSIZE(WKREGB) LOAD POINTER TO IOSB
         LR    WKREG9,WKREGB       ESTABLISH BASE FOR NOW
         L     WKREGB,C0(WKREGB)   GET POINTER TO NEXT BLOCK
         XC    C0(A0,WKREG9),C0(WKREG9) ZERO THE ENTIRE FIELD-SRB/IOSB
         L     WKREGA,RQETCB       LOAD POINTER TO TCB
         DROP  WKREGB              NO LONGER NEED ADDRESSABILITY
         USING SRBSECT,WKREG9      ADDRESSABILITY FOR SRB
         ST    IOSBRG,SRBPARM      POINT SRB TO IOSB
         ST    WKREGA,SRBPTCB      STORE POINTER TO TCB IN SRB
         DROP  WKREG9              END ADDRESSABILITY
         ST    WKREGB,RQETCCW      STORE ADDRESS OF TCCW
         USING TCCW,WKREGB         ADDRESSABILITY TO TCCW      @YM05514
         MVI   TCCWMODB,XCPX00     ZERO OUT TRANSLATION FLAGS  @YM05514
         TM    RQETYPE,RQEVIRT     IS IT A VIRTUAL REQUEST
         BZ    XCP068              NO, INITIALIZE IOSB         @ED00054
         L     WKREGA,C0(WKREGB)   LOAD POINTER TO NEXT BLOCK (BEB)
         ST    WKREGA,TCCWBEB      POINT TO BEB IN TCCW
         L     WKREGA,C0(WKREGA)   LOAD POINTER TO LAST BLOCK(FIX LIST)
         ST    WKREGA,TCCWFIX      POINT TO FIX LIST IN TCCW
         USING IOSB,IOSBRG         ADDRESSABILITY TO IOSB
*                                  CHECK FOR CC/3 PROCESS.     @ZD00054
XCP068   TM    IOBFLAG4,IOBCC3WE   DOES REQUESTOR WANT CC3     @ZD00054
         BNO   XCP070              PROCESSING TO BE SEEN?      @ZD00054
         OI    IOSFLC,IOSCC3WE     YES, MAP TO IOSB            @ZD00054
XCP070   MVI   IOSDVRID,IOSXCPID   SET DRIVER ID TO EXCP
         STH   WKREG6,IOSASID      STORE ASID IN IOSB
         L     WKREG6,XCPTRMAD    GET ADDR OF TERM ROUTINE     @ZA08736
         ST    WKREG6,IOSPGAD      STORE FOR POST STATUS RETURN@YM30169
         MVC   IOSCKEY,RQEPRT      PRTCK KEY FOR CHANNEL PROGRAM
         ST    UCBREG,IOSUCB       STORE UCB ADDRESS IN IOSB
         ST    RQEREG,IOSUSE       STORE ADDRESS OF RQE IN IOSB
         LA    WKREGA,XCPCHE       GET ADDRESS OF CHE APPENDAGE
*                                  ROUTINE COMPATABILITY CODE
         ST    WKREGA,IOSNRM       STORE AS NORMAL APPENDAGE
         LA    WKREGA,XCPABE       GET ADDRESS OF ABE APPENDAGE
*                                  ROUTINE COMPATABILITY CODE
         ST    WKREGA,IOSABN       STORE AS ABNORMAL APPENDAGE
         ST    DEBREG,IOSDSID      STORE DEB AS DATA SET ID
         IC    WKREG6,IOBFLAG1     LOAD FLAGS FROM IOB
         N     WKREG6,FLAGMASK     REMOVE NON COMPATABLE FLAGS
         EX    WKREG6,XCPFLGOR     SET THE FLAGS IN IOSB
         TM    DCBIFLGS,DCBIFIOE   USE IBM ERPS
         BZ    XCP071              YES, BYPASS THE SET
         OI    IOSOPT,IOSNERP      NO, BYPASS IBM ERPS
***                                                          ***
*   IOSDIE INITIALIZED WITH XCPDIE IF TYPE 3 RELATED REQUEST OR*
*   A NON-VIRTUAL EXCP REQUEST (EXCPVR OR 1 TO 1) WITH A VALID *
*   PCI APPENDAGE.                                             *
*                                                              *
*   IOSPCI INITIALIZED WITH XCPPCI IF A VIRTUAL REQUEST WITH A *
*   VALID PCI APPENDAGE.                                       *
***                                                          ***
XCP071   EQU   *                   INITIALIZE FOR DIE AND PCI
         SLR   WKREGA,WKREGA       ZERO REGISTER               @Y30IPLB
         L     WKREG6,DEBAPPAD     LOAD APPENDAGE ADDRESS
         USING DEBAVT,WKREG6       ADDRESSABILITY TO AVT
         L     WKREG6,DEBPCIA      GET PCI APPENDAGE ADDRESS
         TM    RQETYPE,RQETYP3     TYPE 3 RELATED REQUEST
         BO    XCP080              BRANCH YES, NEEDS DIE
         TM    RQETYPE,RQEVIRT     IS THIS A VIRTUAL REQUEST
         BO    XCP081              YES, STORE CONTENTS OF WKREGA
         CLC   C0(C2,WKREG6),BR14  IS IT A BR 14
         BE    XCP081              YES,NO DIE NEEDED
XCP080   L     WKREGA,XCPENDIE     GET ADDRESS OF DIE ROUTINE  @ZA12705
XCP081   ST    WKREGA,IOSDIE       STORE DIE ADDRESS IN IOSB
         SLR   WKREGA,WKREGA       ZERO REGISTER               @Y30IPLB
         TM    RQETYPE,RQEVIRT     VIRTUAL REQUEST
         BZ    XCP085              NO, SKIP PCI APPENDAGE
         CLC   C0(C2,WKREG6),BR14  IS IT A BR 14
         BE    XCP085              YES, ZERO RETURN FOR PCI
         L     WKREGA,XCPENPCI     GET PCI COMPATIBILITY CODE  @ZA12705
XCP085   ST    WKREGA,IOSPCI       STORE IN IOSB
         DROP  WKREG6
         TITLE 'IECVEXCP -- EXCP PROCESSOR -- PAGE FIX APPENDAGE INTERFX
               ACE'
***********************************************************************
*                                                                     *
*        PAGE FIX APPENDAGE INTERFACE - THIS IS ONLY VALID FOR EXCPVR.*
*        A DUMMY LIST IS SET FOR THE VIRTUAL USER. IF THE APPENDAGE   *
*        IS ENTERED AND AT EXIT,  THE REQUESTOR IS EXCPVR, EXCP       *
*        GOES TO FIX AND FIXES THE PAGES IN THE LIST PASSED.          *
*                                                                     *
***********************************************************************
         SPACE 2
         L     WKREGA,DEBAPPAD     GET APPENDAGE VECTOR TABLE  @Y30IPLB
         USING DEBAVT,WKREGA       ADDRESSABILITY TO THAT SECTION
         TM    RQETYPE,RQE1TO1     IS THIS A 1 TO 1 REQUEST    @YM05929
         BO    XCP100              YES, DO NOT ENTER PG FIX APP@YM05920
         TM    DEBSIOAB,DEBPGFX    IS THERE A PAGE FIX APPENDAGE
         BZ    XCP105              NO, CONTINUE PROCESSING
         L     APBSRG,DEBSIOA      LOAD THE PAGE FIX APP ADR
         DROP  WKREGA              DROP AVT ADDRESSABILITY
         L     WKREGA,RQETCCW      LOAD POINTER TO TCCW
         LA    WKREGA,TCCWSAVE-TCCW(WKREGA) FIX LIST AREA IF V=VYM01039
         SLR   WKREG9,WKREG9       ZERO REG 9 FOR APPENDAGE    @Y30IPLB
         OI    FRRFLAG,FRRPGFX+FRRAACT SET PAGE FIX APP EXEC   @YM05506
***
*   PAGE FIX APPENDAGE INTERFACE DEFINITION  -               ***
*     RQEREG - RQE, IOBREG - IOB, DEBREG - DEB, DCBREG - DCB,  *
*     UCBREG - UCB, LNKREG - RETURN, APBSRG - PGFX RTN ADDR,   *
*     REGS 10,11,AND 13 AS WORKREGISTERS                       *
***                                                          ***
         BAL   LNKREG,C4(APBSRG)   EXECUTE THE PAGE FIX APPENDAGE
         B     XCP088              REG 14 + 0 RETURN            YM01039
*        B     XCP088              REG 14 + 4 RETURN            YM01039
XCP088   EQU    *                                               YM01039
         L     REG13,FRRLLSA       LOAD POINTER TO L L SAVE AREA
         NI    FRRFLAG,FF-FRRPGFX-FRRAACT RESET PAGE FIX EXEC  @YM05506
         TM    RQETYPE,RQE114      IS THIS AN EXCPVR REQUEST
         BZ    XCP105              NO, SKIP PAGE FIX LOGIC
         SPACE
         L     TERMBAS,XCPFIXAD    GET @ PAGEFIX INTERFACE SRTN@YM05929
         B     C0(TERMBAS)         FIX PAGES SPECIFIED IN LIST @YM05929
         SPACE
         USING DEBAVT,WKREGA       ESTABLISH DEB ADDRESSABILITY@YM05929
XCP100   EQU   *                                               @YM05929
         TM    DEBSIOAB,DEBFIX     IS DEB ALREADY FIXED?       @YM05929
         BO    XCP105              YES, THEN BYPASS FIX        @YM05929
         L     TERMBAS,XCPFIXAD    GET ADDRESS OF FIX RTN      @YM05929
         B     C4(TERMBAS)         GO TO FIX THE DEB           @YM05929
         SPACE
         DROP  WKREGA
         TITLE '    IECVEXCP -- EXCP PROCESSOR -- EXTENT TEST SET UP'
***********************************************************************
*                                                                     *
*        THIS SECTION SETS UP IOSEEK AND IOSEEKA FROM IOBSEEK FIELD   *
*        AND THEN EXECUTES THE EXTENT CHECK SUBROUTINE.               *
*        NOTE: THIS IS THE RETURN POINT FROM THE BACK END ON          *
*        AN APPENDAGE REQUESTED RETRY LOGIC PATH.                     *
*                                                                     *
***********************************************************************
         SPACE 2
XCP105   NI    RQEFLAG,FF-RQERETRY-RQENOPST ZERO RETRY FLAG     YM3829P
         XC    IOSSNS(C2),IOSSNS   ZERO OUT SENSE IN CASE OF   @YM07886
*                                  RE-EXCP(COMPATIBILITY VS2-1)
         TM    UCBTBYT3,UCB3DACC   IS THIS A DIRECT ACCESS DEVICE
         BZ    XCP110              NO, NO EXTENT CHECK USED
         MVC   IOSEEK,IOBSEEK      MOVE SEEK FIELD TO IOSB FROM IOB
         MVC   IOSEEKA,IOSEEK      SET UP SEEK FIELD USED TO DO SEEK
         BAL   LNKREG,XCPEXT       CHECK THE EXTENT FOR DA
*                                  NOTE THAT THE BAL INSTRUCTN @ZA07510
*                                  CAUSES THE HIGH ORDER BIT   @ZA07510
*                                  TO BE SET ON IN LNKREG.     @ZA07510
*                                  THIS BIT IS USED IN XCPEXT  @ZA07510
*                                  TO DETERMINE CALLER. (HIGH  @ZA07510
*                                  ORDER 2 BITS IS INST LENGTH)@ZA07510
         LTR   APBSRG,APBSRG       EXTENT WITHIN BOUNDS
         BZ    XCP110              YES  CONTINUE                 YM1250
         SPACE
XCP105A  EQU   *                                               @YM05527
         L     WKREGA,DEBAPPAD     LOAD POINTER TO AVT           YM1250
         USING DEBAVT,WKREGA                                     YM1250
         L     APBSRG,DEBXCEA      LOAD POINTER TO ABNORMAL END  YM1250
         DROP  WKREGA                                            YM1250
         TM    RQEFLAG,RQEPURGE    IGNORE RETURN FROM EOE APPNDG@YM1398
         BO    XCP046B             BRANCH YES - TERMINATE       @YM1398
         L     REG13,FRRLLSA       GET PTR TO LOCAL LK SVAREA  @YM04681
         OI    FRRFLAG,FRRABE      SET ABNORMAL END APPEN FLG  @YM05506
         TM    RQETYPE,RQERRTYP    IS THIS A RELATED REQUEST?? @ZA15704
         BZ    XCP202A             NO, GET SAVE AREA PTR       @ZA15704
         SPACE
         L     WKREG9,DEBRRQ       GET PTR TO RRQ              @YM04681
         C     RQEREG,RRQFIRST-RRQ(WKREG9) RQE AT TOP OF Q?    @YM04681
         BE    XCP203AA            YES, GO TEST RELATED REQ    @YM04681
         SPACE
         OI    RQETYPE,RQEEOEE     SET FLG, END-OF EXTENT ERR  @YM04681
*                                  TO BE PURGED                @YM04681
         B     XCPEXIT             GO TEST WHICH EXIT          @YM04681
*                                  NOTE** AT THIS POINT WE ARE @YM04681
*                                  CURRENTLY SUSPENDING PROCESSING
*                                  WITH AN END-OF-EXTENT ERROR, TO BE
*                                  PURGED AND RESUMPTION OF PROCESSING
*                                  OCCURRS WHEN THE CURRENT RQE HAS
*                                  THE RQEEOEE ON.
         SPACE 5
         TITLE '    IECVEXCP -- EXCP PROCESSOR -- SIO APPENDAGE INTF'
***********************************************************************
*
*        SIO APPENDAGE INTERFACE -- THIS ROUTINE EXECUTES THE SIO     *
*        APPENDAGE AND CONTINUES PROCESSING ACCORDING TO THE EXITS    *
*        FROM IT.                                                     *
*        REGISTERS PASSED ON ENTRY ARE RQEREG,IOBREG,DEBREG,DCBREG    *
*        UCBREG, SAVREG, LNKREG AND APBSRG. REGISTERS THAT MAY BE     *
*        DESTROYED ARE WKREG6, WKREG9,WKREGA,WKREGB,SAVREG.           *
*        RETURNS ARE REGISTER 14 PLUS 0- NORMAL, 4- RETURN RQE AND    *
*        8- NORMAL                                                    *
*                                                                     *
***********************************************************************
         SPACE 2
XCP110   EQU   *                                               @YM05506
         L     REG13,FRRLLSA       GET SAVE AREA ADDRESS       @YM05144
         SLR   WKREG9,WKREG9       ZERO REG 9 FOR APPENDAGE    @Y30IPLB
         LA    WKREG6,IOSEEKA      SET ADDRESS TO SEEK FIELD
         L     APBSRG,DEBAPPAD     GET APPENDAGE ADDRESS
         USING DEBAVT,APBSRG       ADDRESSABILITY TO AVT
         L     APBSRG,DEBSIOA      GET SIO APPENDAGE ADDRESS
         OI    FRRFLAG,FRRSIO+FRRAACT SET SIO APPENDAGE EXEC   @YM05506
         BALR  LNKREG,APBSRG       GO TO SIO APPENDAGE
         B     XCP115              NORMAL EXIT CONTINUE
         B     XCP113              RETURN RQE
         B     XCP115              FORMER SIO EXTEND RETURN
         SPACE 2
XCP113   L     TERMBAS,XCPBASE2    LOAD TERMINATION RTN BASE   @ZA07510
         USING XCPTERM,TERMBAS     TEMPORARY ADDRESSABILITY
         NI    FRRFLAG,FF-FRRSIO-FRRAACT RESET SIO APPEND. EXEC@YM05506
         L     REG13,FRRLLSA       GET SAVE AREA FOR TERMINATION@YM1386
         B     XCP515              RETURN RQE
         TITLE '    IECVEXCP -- EXCP PROCESSOR -- TRANSLATOR INTERFACE'
***********************************************************************
*                                                                     *
*        CCW TRANSLATOR INTERFACE - CORE IS GOTTEN FOR THE FIX LIST   *
*        AND THE BEB. THE TCCW IS INITIALIZED AND EXCP BRANCHES TO THE*
*        TRANSLATOR WITH REGISTER 1 POINTING TO THE TCCW.             *
*        THERE ARE FOUR RETURNS FROM THE TRANSLATOR, THREE OF WHICH   *
*        ARE VALID FOR TRANSLATION. THEY ARE 0- TRANSLATION COMPLETE, *
*        4- TRANSLATION ERROR AND BLOCKS MUST BE FREED, AND C- NEED   *
*        MORE CORE.                                                   *
*                                                                     *
***********************************************************************
         SPACE 2
XCP115   L     WKREGB,RQETCCW      GET POINTER TO TCCW
         NI    FRRFLAG,FF-FRRSIO-FRRAACT RESET SIO APPEND. EXEC@YM05506
         SLR   WKREGA,WKREGA       ZERO A REGISTER             @Y30IPLB
         TM    UCBTBYT3,UCB3DACC   IS THIS A DA DEVICE           YMXXXX
         BZ    XCP117              NO, DO NOT CALCULATE EXTENT @Y30IPLB
         IC    WKREGA,IOBM         GET EXTENT INDEX              YMXXXX
         IC    WKREG9,DEBEXSCL     GET EXTENT SIZE               YMXXXX
         SLL   WKREGA,C0(WKREG9)   MULTIPLY BY SIZE              YMXXXX
XCP117   LA    WKREGA,DEBBASND(WKREGA) POINT TO  EXTENT        @Y30IPLB
         USING DEBDASD,WKREGA       ADDRESSABILITY TO SNGL EXTNT YMXXXX
         MVC   IOSFMSK,DEBDVMOD    SET FILE MASK IN IOSB         YMXXXX
         L     WKREG6,IOBSTART     GET POINTER TO CCWS
         TM    RQETYPE,RQEVIRT     IS THIS A VIRTUAL REQUEST
         BNO   XCP145              NO, EXCPVR OR 1 TO 1 DONT TRANSLATE
         OI    RQEFLAG,RQEFIXST    FIXING IS STD, FREEING NDED  @YM1621
         MVC   TCCWTCB,RQETCB      PLACE TCB INTO TCCW
         ST    UCBREG,TCCWUCB-C1   STORE UCB INTO TCCW
         MVI   TCCWOPTN,TCCWXLAT   SET FLAG TO TRANSLATE CCWS
         ST    WKREG6,TCCWFVC      STORE AS FIRST VIRTUAL CCW
         LR    WKREGA,RQEREG       SAVE ADDRESS OF RQE
         LR    REG1,WKREGB         PLACE TCCW IN PARM REG
XCP120   L     APBSRG,ACCWXLAT     GET ADDRESS OF CCW TRANSLATOR
         BALR  LNKREG,APBSRG       TRANSLATE CCWS
         B     XCP125(APBSRG)      BRANCH ACCORDING TO RETURN CODE
         SPACE 2
XCP125   B     XCP140              NORMAL, STORE REAL CCW ADDRESSES
         B     XCP135              ERROR, SET UP ERROR CODE,FREE BLOCKS
         B     XCP135              SHOULD NOT HAPPEN HERE
*        B     XCP130              GET MORE CORE RETURN
         SPACE 2
*        REQUEST FROM TCCW FOR A 160 B BLOCK                   @ZA12709
XCP130   EQU   *                                               @ZA12709
         L     WKREGB,FRRSTRG      160B BLOCK FREE CHAIN PTR   @ZA12709
         LTR   WKREGB,WKREGB       ANY BLOCKS ON FREE CHAIN ?? @ZA12709
         BZ    XCP131              NO, INTERFACE WITH SMGR     @ZA12709
         L     APBSRG,C0(WKREGB)   YES, REMOVE 1 160B BLOCK    @ZA12709
         ST    APBSRG,FRRSTRG      UPDATE FREE CHAIN PTR       @ZA12709
         IC    APBSRG,FRRFCNT      UPDATE FREE BLOCKS COUNT    @ZA12709
         BCTR  APBSRG,C0           DECREMENT BY ONE            @ZA12709
         STC   APBSRG,FRRFCNT      STORE UPDATED COUNT         @ZA12709
         LR    REG0,WKREGB         PLACE 160 B BLOCK IN REG 0  @ZA12709
         B     XCP120              RETURN TO TRANSLATOR        @ZA12709
XCP131   EQU   *                                               @ZA12709
         LH    WKREGB,IOSASID      LOAD ASID FROM IOSB         @ZA12709
         SLL   WKREGB,C8           CENTER ASID                 @YA03213
         O     WKREGB,GET160       GET ONE 160 BYTE BLOCK      @YA03213
         L     REG13,FRRLLSA       LOAD ADDRESS OF LOCAL LOCK SAVE AREA
         L     APBSRG,ACOREMGT     GET ADDRESS OF STORAGE MGMT
         BALR  LNKREG,APBSRG       GET ANOTHER BLOCK
         LR    REG0,WKREGB         PLACE BLOCK IN REG 0
         B     XCP120              GO BACK TO TRANSLATOR
         SPACE 2
XCP135   EQU   *                                               @YM07354
         NI    RQEFLAG-RQE(WKREGA),FF-RQEFIXST  RESET THE      @Y30IPLB
*                                  FIX STARTED FLAG
         B     ABENDSET            SET ABEND CODE AND ABEND    @YM05929
*                                  THE TASK
         SPACE 2
XCP140   ST    REG0,IOSRST         STORE ADDRESS OF REAL STRING
         LR    WKREGB,RQEREG       LOAD BASE FOR TCCW
         MVC   IOSVST,TCCWFRC      STORE VIRTUAL ADDR OF REAL STRING
         LR    RQEREG,WKREGA       RESTORE RQE ADDRESS
         B     XCP150              SCHEDULE SRB IF CAN
         TITLE '    IECVEXCP -- EXCP PROCESSOR -- STARTIO ROUTINE'
***********************************************************************
*                                                                     *
*        THIS ROUTINE CHECKS TO SEE IF THE REQUEST MAY BE SENT TO THE *
*        CHANNEL SCHEDULER. IF IT CAN THE STARTIO MACRO IS ISSUED     *
*        AND THE CORRECT EXIT IS TAKEN.                               *
*                                                                     *
***********************************************************************
         SPACE 2
XCP145   ST    WKREG6,IOSVST       STORE ADDRESS IN IOSB
         TM    RQETYPE,RQE1TO1     IS THIS A VIRTUAL=REAL REQUEST
         BO    XCP148              YES DO NOT DO LOAD REAL ADDRESS
         LRA   WKREG6,C0(WKREG6)   GET REAL ADDRESS OF CCW STRING
XCP148   ST    WKREG6,IOSRST       STORE IN IOSB
         SPACE 2
XCP150   OI    RQEFLAG,RQESTBL     MARK RQE AS STARTABLE
         TM    RQETYPE,RQERRTYP    IS THIS REQUEST RELATED
         BZ    XCP155              NO, START REQUEST
         L     WKREGB,DEBRRQ       POINT TO THE RELATED REQUEST QUEUE
         USING RRQ,WKREGB          ADDRESSABILITY TO RRQ
         L     WKREGB,RRQFIRST     GET FIRST RQE IN QUEUE
         DROP  WKREGB              DROP ADDRESSABILITY ON REG 11
         CR    RQEREG,WKREGB       IS THIS THE CURRENT RQE
         BNE   XCPEXIT             NO, CANNOT START NEXT ONE   @YM03482
         SPACE 2
XCP155   L     REG13,FRRLLSA       FIND THE LOCAL LOCK SAVE AREA
         OI    RQEFLAG,RQESRBS     SET THE REQUEST STARTED
         STM   REG1,FRRREG,C0(REG13) SAVE REGS ACROSS STARTIO
         L     REG1,RQESRB         LOAD POINTER TO SRB
         STARTIO SRB=(1),TCB=SRB   ISSUE STARTIO
         LM    REG1,FRRREG,C0(REG13) RESTORE REGS
         MVI   RQEFLAG3,RQEINIOS     SET REQUEST IN IOS        @ZM32371
         B     XCPEXIT             FINISHED THE RQE
         TITLE ' IECVEXCP -- EXCP PROCESSOR -- CHE/ABE APPENDAGE INTFC'
***********************************************************************
*                                                                     *
*        CHANNEL END - ABNORMAL END APPENDAGE INTERFACE -- THE IOSB   *
*        IS MAPPED TO THE IOB AND THE APPENDAGE IS ENTERED. ACCORDING *
*        TO THE RETURN CODE, THE FOLLOWING WORK IS DONE --            *
*        +0 - MAP BACK TO IOSB THE FLAG1,START, CSW, EXTENT, AND      *
*             CHECK THE EXTENT.                                       *
*        +4 - RESET IOSEX, SET FLAG TO SKIP POST                      *
*        +8 - RESET IOSEX, SET RE-EXCP FLAG FOR TERMINATION ROUTINE   *
*        +C - RESET IOSEX, SET SKIP POST, SKIP FREE                   *
*        RETURN IS TO POST STATUS PLUS ZERO.                          *
*                                                                     *
***********************************************************************
         SPACE 2
         USING XCPABE,APBSRG       ADDRESSABILITY TO BEGINNING SEGMT
XCPABE   STM   REG0,APBSRG,C0(REG13) SAVE REGISTERS FOR POST STATUS
         LA    IOBREG,FRRABE       SET TO ABNORMAL END ENTRY
         LR    IOSBRG,REG1         PLACE IOSB IN ITS BASE REGISTER
         L     DEBREG,IOSDSID      LOAD THE DEB ADDRESS
         L     WKREG6,DEBAPPAD     LOAD THE APPENDAGE VECTOR TABLE AD
         USING DEBAVT,WKREG6       ADDRESSABILITY TO AVT
         L     WKREGA,DEBXCEA      LOAD POINTER TO ABNORMAL APPENDAGE
         L     RQEREG,IOSUSE       LOAD ADDRESS OF RQE          @YM1398
         L     WKREG6,RQEIOB       GET IOB ADDRESS FOR TEST    @Y02DPLB
         DROP  IOBREG                                          @YM30404
         USING IOBSTDRD,WKREG6     TEMPORARY ADDRESSABILITY    @Z300134
         TM    IOBFLAG4,IOBJES3I   ORIGINAL CALLER JES3?       @Y02DPLB
         BNO   XCP180              BYPASS IOSB SETTING         @Y02DPLB
         OI    IOSPKEY,IOSPGDPX    SET INDICATOR DUPLEXED PAGE @Y02DPLB
         USING IOBSTDRD,IOBREG     RE-ESTABLISH ADDRESSABILITY @Z300134
         SPACE
XCP180   EQU   *                                               @Y02DPLB
         TM    RQEFLAG,RQEPURGE    IS APPENDAGE TO BE BYPASSED  @YM1398
*                                  * RQEPURGE SET BY END OF EXT @YM1398
*                                  * ON +4 RETURN FROM EOE APPEN@YM1398
*                                  * INDICATING IGNORE-POST ONLY@YM1398
         BZ    XCP200              GO TO COMMON APPENDAGE CODE
         LA    WKREGA,XCP220       FORCE APPENDAGE BYPASS       @YM1398
         NI    IOSFLA,FF-IOSEX     RESET EXCEPTION FLAG         @YM1398
         B     XCP200              ENTER COMMON CODE            @YM1398
         SPACE 2
         USING XCPCHE,APBSRG       ADDRESSABILITY TO BEGINNING SEGMT
XCPCHE   STM   REG0,APBSRG,C0(REG13) SAVE REGISTERS FOR POST STATUS
         LA    IOBREG,FRRCHE       SET TO CHANNEL END ENTRY
         LR    IOSBRG,REG1         PLACE IOSB IN ITS BASE REGISTER
         L     DEBREG,IOSDSID      LOAD THE DEB ADDRESS
         L     WKREG6,DEBAPPAD     GET THE ADDRESS OF THE AVT
         USING DEBAVT,WKREG6       REESTABLISH AVT ADDRESSABILITY
         L     WKREGA,DEBCEA       LOAD POINTER TO CHANNEL END APPNDG
         SPACE 2
XCP200   BALR  BASREG,REG0         ESTABLISH BASE FOR APPENDAGE
*                                  PROCESSING
         USING XCP201,BASREG       ADDRESSABILITY FOR THIS SECTION
XCP201   S     BASREG,ENDSDISP     POINT TO BEGINNING OF MODULE
         USING XCPBASE,BASREG      ADDRESSABILITY FROM BEGINNING
         DROP  APBSRG              DROP TEMPORARY
         LR    WKREGB,LNKREG       SAVE RETURN ADDRESS.        @Y30IPLC
         BAL   LNKREG,SETFRR       ESTABLISH FRR FOR APPENDAGE
         ST    WKREGB,FRRRETR      SAVE RETURN ADDRESS IN FRR  @Y30IPLC
         ST    REG13,FRRLLSA       STORE SAVE AREA FOR LATER
         STC   IOBREG,FRRFLAG      STORE WHICH APPENDAGE BIT
         L     RQEREG,IOSUSE       LOAD ADDRESS OF RQE
         MVI   RQEFLAG3,RQECLEAR   RESET REQUEST BACK FROM     @ZM32371
*                                  IOS                         @ZM32371
         ST    RQEREG,FRRCRQE      STORE RQE POINTER IN FRR
         BAL   LNKREG,XCPENVL      LOAD ENVIRONMENTAL REGISTERS
         CLI   RQEPRT,SYSTMKEY     IS THIS SYSTEM RQE
         BNH   XCP202              YES, SKIP VALIDITY CHECK
         BAL   LNKREG,XCPVAL       VALIDITY CHECK CONTROL BLOCKS
XCP202   LA    REG0,C1             SET NOT DIE FLAG
         BAL   LNKREG,XCPMAP       MAP IOSB TO IOB
         LR    APBSRG,WKREGA       LOAD APPENDAGE POINTER
XCP202A  EQU   *                                               @YM06220
         L     WKREG6,RQETCCW      LOCATE THE TCCW             @YM05527
         LA    REG13,TCCWSAVE-TCCW(WKREG6) SAVE AREA
XCP203   TM    FRRFLAG,FRRABE      ABNORMAL END APPENDAGE REQ   @YM1141
         BZ    XCP203A             NO, CHANNEL END,SKIP PRG     @YM1141
         TM    IOSCOD,PERM         PERM ERROR YET               @YM1141
         BO    XCP203A             NO, FIRST TIME IN            @YM1141
         L     WKREGA,IOSERP       LOAD ERP WORKAREA ADDRESS   @ZA16147
XCP203AA TM    RQETYPE,RQETYP3     RELATED REQUEST?            @YM04681
         BNZ   XCPPUR              YES, PURGE REL REQUESTS      @YM1141
XCP203A  MVC   FRRPRQE,RQENRQE     SAVE CHAIN ACROSS APPENDAGE  @YM1094
         LR    WKREG6,FRRREG       SAVE FRR ADDRESS             @YM1094
         SLR   WKREG9,WKREG9       ZERO REG 9 FOR APPENDAGE    @Y30IPLB
         OI    FRRFLAG,FRRAACT     SET APPENDAGE IS ACTIVE FLG @YM05506
         SPACE
*** THE CONDITION CODE MUST BE SET DEPICTING UNIT EXCEPTION AND WRONG
*** LENGTH RECORD FOR THE CHANNEL END APPENDAGE                 YMXXXXX
         TM    IOSFLA,IOSEX        IF NORMAL APPENDAGE,IOSEX
*                                  * IS SET ONLY FOR UEX OR WLR
         BALR  LNKREG,APBSRG       GO EXECUTE THE APPENDAGE    @Y30IPLB
         SPACE 2
         B     XCP220              +0 - NORMAL
         B     XCP215              +4 - DONT POST              @Y30IPLB
         B     XCP207              +8 - RE-EXCP                @Y30IPLB
         B     XCP208              +C - DONT POST, DONT FREE   @Y30IPLB
*        B     XCP205              +10 - RETRY FROM TOP OF RRQ @Y30IPLB
         SPACE 2
XCP205   OI    RQEFLAG,RQENOPST    INDICATE RETRY FROM         @Y30IPLB
*                                  TOP OF RRQ BY SETTING NOPST  YM3829P
*                                  AND ALLOWING THE NEXT INST   YM3829P
*                                  TO SET RETRY THUS INDICATING YM3829P
*                                  THE ACTION                   YM3829P
XCP207   OI    RQEFLAG,RQERETRY    SET RETRY FLAG FOR BACK END @Y30IPLB
         NI    IOSFLA,FF-IOSEX     RESET EXCEPTION FLAG        @YM05520
         NI    IOBFLAG1,FF-IOSEX   RESET EXCEPTION FLAG        @YM05520
         NI    FRRFLAG-FRREXCP(WKREG6),FF-FRRAACT  RESET       @ZA12704
*                                      ABN/CEA APPEND ACT FLAG @ZA12704
         SPACE 1                                               @ZA06067
******   CHECK FOR SMF RECORDING  *****************************@ZA06067
         TM    RQEPRT,RQESMFRQ     SMF RECORDING REQUIRED ??   @ZA06067
         BZ    XCP207A              NO, BYPASS RECORDING       @ZA06067
         SPACE 1                                               @ZA06067
         L     REG0,RQETCB         LOAD ADDRESS OF THE TCB FOR SMF
         L     APBSRG,ASMFEX       LOAD THE ADDRESS OF SMF ROUTINE
         LR    WKREG9,RQEREG       SAVE RQE REG OVER INTERFACE @ZA05478
         LA    REG1,C1             PASS TO SMF A COUNT OF 1    @ZA05478
         BALR  LNKREG,APBSRG       RECORD THE RE-EXCP            YM1095
         LR    RQEREG,WKREG9       RESTORE RQE REG             @ZA05478
XCP207A  EQU   *                                               @ZA05478
         LR    FRRREG,WKREG6       RESTORE FRR WORK AREA ADDR    YM1095
         B     XCP250              GO RESET IOSEX
         SPACE
XCP208   OI    RQEFLAG,RQENOFRE    SET DONT FREE FLAG IN RQE   @Y30IPLB
         L     REG0,FRRPRQE-FRREXCP(WKREG6)
*                                  GET CHAIN PTR TO DEQUEUE RQE@ZA12704
         TM    RQETYPE,RQETYP3     TEST IF A RELATED REQUEST    @YM1366
         BZ    XCP215              IF ZERO, REQUEST WAS NOT REL@Y30IPLB
         L     WKREGB,DEBRRQ       LOAD POINTER TO DEB REL REQ Q YM1094
         C     RQEREG,RRQFIRST-RRQ(WKREGB) IS PRESENT RQE TOP    YM1094
         BNE   XCP210              NO, SEARCH FOR PREVIOUS RQE @Y30IPLB
         ST    REG0,RRQFIRST-RRQ(WKREGB) YES, STORE NEXT AS TOP  YM1094
         LR    WKREGA,WKREGB       SET TOP POINTER               YM1094
         B     XCP213              GO CHECK FOR LAST IN QUEUE  @Y30IPLB
         SPACE 2
XCP210   L     WKREGA,RRQFIRST-RRQ(WKREGB) LOAD POINTER TO 1ST @Y30IPLB
XCP211   L     WKREG9,RQENRQE-RQE(WKREGA) GET CHAIN FROM RQE   @Y30IPLB
         CR    RQEREG,WKREG9       IS THIS ONE POINTING TO CURNT YM1094
         BE    XCP212              YES, SET NEXT POINTER       @Y30IPLB
         LR    WKREGA,WKREG9       SET POINTER TO NEXT RQE       YM1094
         B     XCP211              SEARCH FOR CURRENT          @Y30IPLB
         SPACE 2
XCP212   ST    REG0,RQENRQE-RQE(WKREGA) CHAIN NEXT TO PREVIOUS @Y30IPLB
XCP213   LTR   REG0,REG0           END OF CHAIN                @Y30IPLB
         BNM   XCP215              NO, DEQUEUE COMPLETE        @Y30IPLB
         ST    WKREGA,RRQLAST-RRQ(WKREGB) STORE NEW END POINTER  YM1094
         SPACE 2
XCP215   OI    RQEFLAG,RQENOPST    SET DONT POST FLAG IN RQE   @Y30IPLB
         NI    IOSFLA,FF-IOSEX     RESET EXCEPTION FLAG        @YM05520
         LR    FRRREG,WKREG6       RESTORE FRR POINTER
         NI    FRRFLAG,FF-FRRAACT  RESET ABNORMAL OR CHANNEL   @ZA06811
*                                  END APPENDAGE ACTIVE
         B     XCP250              GO TEST MODE OF ENTRY       @YM05506
         SPACE 2
XCP220   LR    FRRREG,WKREG6       RESTORE FRR WORK AREA ADDRESS
         NI    FRRFLAG,FF-FRRAACT  RESET ABNORMAL OR CHANNEL   @ZA06811
*                                  END APPENDAGE ACTIVE
         TM    FRRFLAG,FRRFTE+FRRBKE FRONT OR BACK END ENTRY?  @YM04681
         BNZ   XCP046B             YES, THEN SET UP TO ENTER   @YM05520
*                                  THE TERMINATION ROUTINE     @YM05520
         TM    IOBFLAG1,IOSEX      IS THE EXCEPTION FLAG ON
         BZ    XCP245              NO, DO NOT NEED TO MAP      @YM05520
         NI    IOSFLA,FF-IOSEX-IOSERR RESET EXCEPTION FLAGS      YM1800
         IC    WKREG6,IOBFLAG1     GET THE IOB FLAGS AS SET BY APP
         N     WKREG6,FLAGMASK     TURN OFF INCOMPATABLE FLAGS
         EX    WKREG6,XCPFLGOR     SET FLAGS IN IOSB TO FLAGS IIN IOB
         CLI   UCBTBYT3,UCB3DACC   IS THIS A DIRECT ACCESS     @ZA17802
         BNE   XCP221              DEVICE... NO                @ZA17802
         MVC   IOSEEK,IOBSEEK      YES. MOVE SEEK FIELD TO IOSB@ZA17802
XCP221   EQU   *                                               @ZA17802
         CLI   IOBECBCC,ECBMACH    PERMANENT ERROR
         BNL   XCP222              NO, MUST MAP BACK
         TM    RQETYPE,RQERRTYP    IS THIS A RELATED REQUEST?? @ZA15704
         BZ    XCP222              NO, THEN BYPASS SETTING     @ZA15704
*                                  ANY PERM. ERROR INDICATOR IN DCB
         OI    DCBIFLGS,DCBIFEC    SET DCB PERMANENT ERROR
         CLI   UCBTBYT3,UCB3UREC   UNIT RECORD DEVICE
         BNE   XCP235              NO, EXIT                    @Y30IPLC
*        HERE IS WHERE SET PERM ERR IN ALL 3525 DCBS
         CLI   UCBTBYT4,UCB3525    IS THIS A 3525
         BNE   XCP235              NO, NOTHING SPECIAL NEEDED  @Y30IPLC
         TM    DCBMACF1,DCBMRECP   IS ACCESS METHOD EXCP?      @ZA25344
         BO    XCP235              YES                         @ZA25344
         TM    DCBQSWS,DCBASSOC    ASSOCIATED DATA SETS
         BZ    XCP235              NO, SKIP SPECIAL PROCESSING @Y30IPLC
         SPACE
         L     WKREG6,DEBRDCB      TEST FOR A READ DATASET     @Y30IPLB
         BAL   WKREGB,XCP223       TEST SETTING OF DCBIFLG     @Y30IPLB
         L     WKREG6,DEBPDCB      TEST FOR A PUNCH DATASET    @Y30IPLB
         BAL   WKREGB,XCP223       TEST SETTING OF DCBIFLG     @Y30IPLB
         L     WKREG6,DEBWDCB      TEST FOR A WRITE DATASET    @Y30IPLB
         BAL   WKREGB,XCP223       TEST SETTING OF DCBIFLG     @Y30IPLB
XCP222   MVC   IOSTATUS(C4),IOBCSW+C3 MAP STATUS & RESID.COUNT @YM05538
         MVC   IOSSNS(C2),IOBSENS0 RESTORE IOSB SENSE            YM3833
         L     WKREG6,IOBSTART     GET START OF CHANNEL PROGRAM
         TM    RQETYPE,RQEVIRT     IS THIS A VIRTUAL REQUEST
         BO    XCP225              YES, MAP THROUGH TRANSLATE ROUTINE
         ST    WKREG6,IOSVST       STORE VIRTUAL START
         LRA   WKREG6,C0(WKREG6)   GET REAL ADDRESS OF REAL START
         ST    WKREG6,IOSRST       STORE AS REAL START
         MVC   IOSCSWCA,IOBCSW     MOVE ADDRESS TO IOSB
         B     XCP235              RETURN TO POST STATUS       @Y30IPLC
         SPACE
XCP223   EQU   *                                               @Y30IPLB
         LTR   WKREG6,WKREG6       DATASET SPECIFIED ZERO?     @Y30IPLB
         BZR   WKREGB              YES, GET NEXT DCB IF ONE    @Y30IPLB
         OI    DCBIFLGS-IHADCB(WKREG6),DCBIFEC SET PERMANENT   @Y30IPLB
*                                  ERROR INDICATOR
         BR    WKREGB              RETURN TO MAINLINE PATH     @Y30IPLB
         SPACE 2
XCP225   EQU   *                   *
         L     WKREGB,RQETCCW      LOAD POINTER TO TRANSLATION BLKS
         USING TCCW,WKREGB         ADDRESSABILITY TO TCCW
         LR    REG0,WKREG6         PLACE ADDRESS TO BE MAPPED IN R0
         LR    REG1,WKREGB         PLACE TCCW ADDRESS IN REG1
         MVI   TCCWOPTN,TCCWSATR   SET SINGLE ADDRESS TRANSLATION
         L     APBSRG,ACCWXLAT     LOAD ADDRESS OF TRANSLATOR
         BALR  LNKREG,APBSRG       GO TRANSLATE THE ADDRESS
         LTR   APBSRG,APBSRG       TEST FOR A FIND
         BNZ   XCP230              NON ZERO SKIP STORE
         ST    REG0,IOSVST         STORE NEW VIRTUAL ADDRESS
         LR    APBSRG,REG0         PLACE ADDRESS OF CCW IN DIFFRNT REG
         LRA   APBSRG,C0(APBSRG)   GET THE REAL ADDRESS OF THE CCW
         ST    APBSRG,IOSRST       STORE IN THE IOSB
         SPACE 2
XCP230   L     APBSRG,ACCWXLAT     GET ADDRESS OF TRANSLATOR
         MVI   TCCWOPTN,TCCWSATR   SET SINGLE ADDRESS TRANSLATION
         L     REG0,IOBCSW-C1      GET ADDRESS FROM CSW
         BCTR  REG0,0              SUBTRACT ONE FROM CSW ADDR
         BALR  LNKREG,APBSRG       TRANSLATE THAT ADDRESS
         LA    APBSRG,C1           SET INCREMENT TO ONE
         ALR   REG0,APBSRG         ADD ONE TO CSW ADDRESS      @Y30IPLB
         STCM  REG0,LORD3BYT,IOSCSWCA STORE IT INTO THE CSW IN IOSB
         SPACE 2
         L     RQEREG,FRRCRQE      LOAD THE RQE POINTER
XCP235   TM    IOSCOD,PERM         FIRST TIME IN.              @Y30IPLC
         BO    XCP255              YES, RETURN TO POST STATUS. @Y30IPLC
         B     XCP252              SET UP FOR TERMINATION      @Y30IPLC
         SPACE
XCP245   NI    IOSFLA,FF-IOSEX-IOSERR RESET EXCEPTION FLAGS    @YM05520
         SPACE 2
XCP250   EQU  *                    *
         TM    FRRFLAG,FRRFTE+FRRBKE FRONT OR BACK END ENTRY?    YM1250
         BM    XCP046B             YES, RETURN TO FRONT END     @YM1147
         SPACE
         DROP  TERMBAS             NEEDED FOR NEXT INSTRUCTION @Y30IPLC
         SPACE
XCP252   L     TERMBAS,XCPBASE2    SET UP ADDRESSABILITY FOR   @ZA07510
         USING XCPTERM,TERMBAS     TERMINATION PROCESSING.     @Y30IPLC
         L     REG13,FRRLLSA       RESTORE SAVE AREA ADDRESS.  @Y30IPLC
         LM    WKREGA,WKREGB,C16(REG13) SAVE IECVPST BASE AND  @Y30IPLC
         STM   WKREGA,WKREGB,C64(REG13) FRR WORK AREA REGS IN  @Y30IPLC
*                                  UNUSED PART OF SAVE AREA.   @Y30IPLC
         B     XCPTERM             EXECUTE TERMINATION PROCESS @Y30IPLC
         SPACE 2
XCP255   L     REG13,FRRLLSA       LOAD SAVE AREA ADDRESS
         SETFRR D,WRKREGS=(WKREGA,WKREGB) DELETE FRR
         LM    REG0,APBSRG,C0(REG13) RESTORE REGISTERS
         BR    LNKREG              RETURN TO POST STATUS
         TITLE 'IECVEXCP -- EXCP PROCESSOR -- RELATED REQUEST PURGE ROUX
               TINE'
*** THIS ROUTINE IS ENTERED FROM THE ABNORMAL END APPENDAGE INTERFACE
*** ROUTINE ON THE PREVIOUS PAGE TO PURGE RELATED REQUESTS TO THE
*** CURRENT REQUEST WHICH IS CONSIDERED A PERMANENT ERROR
XCPPUR   OI    FRRWORK,FRRRRP      SET PURGE INDICATOR SO      @YM30169
*                                  TERM RTN WILL RETURN HERE    @YM1141
         OI    DCBIFLGS,DCBIFEC    SET PERMA.ERROR FLG IN DCB  @YM03482
         LR    UCBREG,APBSRG       SAVE ADDRESS OF APPENDAGE IN @YM1141
*                                  RELATED REQUEST PURGE        @YM1141
         DROP  TERMBAS             INSURE CORRECT REG USAGE     @YM1141
XCP260   L     TERMBAS,XCPBASE2    SET TERM RTN ENTRY POINT    @ZA07510
         USING XCPTERM,TERMBAS     ADDRESSABILITY TO ROUTINE    @YM1141
         SPACE 1
         L     WKREG6,DEBRRQ       LOAD PTR TO DEB REL REQ QUEUE@YM3074
         L     RQEREG,RRQFIRST-RRQ(WKREG6) GET FIRST RQE        @YM1141
         LA    RQEREG,C0(RQEREG)   THERE IS AT LEAST THE        @YM1141
*                                  CURRENT RQE ON THE QUEUE     @YM1141
         SPACE 1
XCP265   L     RQEREG,RQENRQE      YES, LOAD PTR TO NEXT RQE    @YM1141
         LTR   RQEREG,RQEREG       END OF RQE CHAIN             @YM1141
         BM    XCP280              YES, RESTORE ABNORMAL END   @ZA30947
*                                  ENVIRONMENT                  @YM1141
         TM    RQEFLAG,RQESRBS     HAS THE SRB BEEN SCHEDULED   @YM1141
         BNZ   XCP265              LOOK AT THIS RQE             @YM1141
         SPACE
         SLR   REG0,REG0           INDICAT NO IPIB             @Y30IPLB
************************************************************** @ZA16350
*        L     APBSRG,ARCHN        GET ADDR OF RESTORE CHAIN * @ZA16350
*                                  BUILD ROUTINE             * @ZA16350
*        BALR  LNKREG,APBSRG       PLACE IOB ON RESTORE CHAIN* @ZA16350
************************************************************** @ZA16350
         BC    0,0(0,0)            REPLACE ABOVE DELETED       @ZA16350
         BCR   0,REG0              INSTRUCTIONS WITH NOP INST. @ZA16350
         LM    IOBREG,DEBREG,RQEIOB LOAD IOB AND DEB REGS       @YM1141
         MVI   IOBECBCC,ECBPURG    SET PURGED ECB CODE          @YM1141
         NI    RQEFLAG,FF-RQERETRY-RQENOPST-RQENOFRE INSURE     @YM1141
*                                  WORK GETS DONE               @YM1141
         B     XCP510              POST ECB, FREE STORAGE       @YM1141
         SPACE 1
XCP280   EQU   *                                               @ZA30947
         LR    APBSRG,UCBREG       RESTORE APPENDAGE ADDRESS   @ZA30947
         L     RQEREG,FRRCRQE      RESTORE CURRENT RQE ADDRESS  @YM1141
         BAL   LNKREG,XCPENVL      LOAD ENVIRONMENTAL REGS      @YM1141
         L     IOSBRG,RQESRB       RESTORE IOSBREG BY LOADING   @YM1141
         L     IOSBRG,SRBPARM-SRB(IOSBRG) OUT OF SRB            @YM1141
         NI    FRRWORK,FF-FRRRRP   RESET PURGE INDICATOR       @YM30169
         B     XCP203A             RETURN TO APPENDAGE PROCESS  @YM1141
         TITLE 'IECVEXCP -- EXCP PROCESSOR -- MAP IOSB TO IOB SUBROUTN'
***********************************************************************
*                                                                     *
*        MAP TO IOSB SUBROUTINE -- THIS SUBROUTINE MAPS THE IOSFLA    *
*        TO IOBFLAG1, IOSCSW TO IOBCSW, IOSSNS TO IOBSENS0, IOSCOD TO *
*        IOBECBCC EXCEPT FOR NON-COMPATABLE CODES WHICH ARE MAPPED    *
*        TO PERMANENT ERROR, IOSCC IS MAPPED TO IOBSIOCC. DCBPER IS   *
*        SET FOR RELATED REQUESTS WITH A POST CODE OF 41.             *
*                                                                     *
***********************************************************************
         SPACE 2
XCPMAP   IC    WKREG6,IOSFLA       GET THE FLAGS FROM THE IOSB
         N     WKREG6,FLAGMASK     REMOVE ALL NON-COMPATABLE FLAGS
         NI    IOBFLAG1,FF-IOSEX-IOSERR TURN OFF LIKE FLAGS
         EX    WKREG6,XCPIOBOR     SET THE FLAGS IN THE IOB THE SAME
         SPACE 2
         MVC   IOBCSW,IOSCSW       MOVE THE CSW TO THE IOB
         LTR   REG0,REG0           IS MAP FROM THE DIE
         BNZ   XCPMAPB             NO, SKIP TRANSLATE-VIRTUAL  @Y30IPLB
         L     WKREG6,RQETCCW      LOAD POINTER TO TCCW FIELD
         STM   LNKREG,IOBREG,TCCWRGSV-TCCW(WKREG6) SAVE REGS
*                                  ACROSS CONVERT REAL TO VIRTUAL
         L     RQEREG,IOBCSW-C1    LOAD POINTER TO CCW
         LA    RQEREG,C0(RQEREG)   ZERO THE HIGH BYTE
         LTR   RQEREG,RQEREG       IS THE POINTER ZERO
         BZ    XCPMAPA             YES, SKIP THE CONVERT       @Y30IPLB
         BCTR  RQEREG,C0           SUBTRACT ONE FOR PAGING
         L     APBSRG,CVTPTR       LOAD POINTER TO CVT
         L     APBSRG,CVTPTRV-CVT(APBSRG) LOAD CONVERT RTN
         BALR  LNKREG,APBSRG       EXIT TO CONVERT ROUTINE
         LTR   APBSRG,APBSRG       CONVERSION SUCCESSFUL?      @ZA05191
         BNZ   XCPMAPA             NO, BYPASS STORING ADDRESS  @ZA05191
         SPACE
         LA    RQEREG,C1(RQEREG)   INCREMENT TO CORRECT ADDR
         STCM  RQEREG,LORD3BYT,IOBCSW STORE VIRTUAL ADDR BACK
         SPACE
XCPMAPA  LM    LNKREG,IOBREG,TCCWRGSV-TCCW(WKREG6) RESTORE REGS@Y30IPLB
         SPACE
XCPMAPB  TM    RQETYPE,RQEVIRT     IS THIS A VIRTUAL REQUEST   @Y30IPLB
         BZ    XCPMAPC             NO, SKIP CSW TRANSLATE      @Y30IPLB
         L     REG0,IOBCSW-C1      GET THE ADDRESS OF THE INTERRUPT
         LR    WKREG6,RQEREG       SAVE THE RQE ADDRESS
         L     REG1,RQETCCW        PLACE THE TCCW IN PARM REG
         LR    WKREGB,LNKREG       SAVE REG 14
         MVI   TCCWOPTN-TCCW(REG1),TCCWCSWX SET TRANSLATE CSW OPTION
         L     APBSRG,ACCWXLAT     LOAD ADDRESS OF TRANSLATOR
         BALR  LNKREG,APBSRG       TRANSLATE THE CSW
         LR    LNKREG,WKREGB       RESTORE RETURN ADDRESS
         LR    RQEREG,WKREG6       RESTORE THE RQE ADDRESS
         LTR   APBSRG,APBSRG       TEST REG IF FOR ZERO
         BNZ   XCPMAPC             ADDRESS NOT WITHIN REAL CCWS@Y30IPLB
         STCM  REG0,LORD3BYT,IOBCSW SAVE THE VIRTUAL ADDRESS IN IOB
         SPACE
XCPMAPC  MVC   IOBSENS0(C2),IOSSNS PLACE SENSE IN IOB          @Y30IPLB
         MVC   IOBSIOCC,IOSCC      SET SIO CONDITION CODE IN IOB
         CLI   IOSCOD,IOSMIHC      A CODE UNKNOWN TO USERS
         BER   LNKREG              YES, DO NOT TOUCH           @Y30IPLB
         MVC   IOBECBCC,IOSCOD     SET COMPLETION CODE IN IOB
         CLI   IOBECBCC,IOSMIHCA   IS THIS A NEW ERROR CODE
         BNER  LNKREG              NO, RETURN                  @Y30IPLB
         MVI   IOBECBCC,ECBPERM    SET PERMANENT ERROR
         BR    LNKREG              RETURN TO APPENDAGE PROCESSOR
         TITLE ' IECVEXCP -- EXCP PROCESSOR -- EXTENT CHECK SUBROUTINE'
***********************************************************************
*                                                                     *
*        EXTENT CHECK SUBROUTINE -- CHECK TO SEE IF THE SEEK FIELD    *
*        IS WITHIN THE SPECIFIED EXTENT. IF NOT, THE END OF EXTENT    *
*        SUBROUTINE IS ENTERED WHICH DETERMINES WHAT TO DO.           *
*        FROM THE END OF EXTENT CHECK SUBROUTINE, THREE RETURNS       *
*        ARE SUPPORTED. THEY ARE:                                     *
*              +0 - SET TO EXTENT ERROR, DEQUEUE                      *
*              +4 - POST THE REQUESTOR                                *
*              +8 - CHECK AGAIN                                       *
*        RETURNS TO THE DA ERP ARE:                                   *
*              +0 - RETRY                                             *
*              +4 - POST THE REQUEST ( GO TO POST STATUS NO RETRY)    *
*                                                                     *
***********************************************************************
         SPACE 2
         USING IECVEXTC,APBSRG     ADDRESSABILITY TO BEGINNING
IECVEXTC L     IOBREG,IOSUSE-IOSB(REG1) LOAD RQE POINTER
         L     DEBREG,RQETCCW-RQE(IOBREG) LOAD TCCW ADDRESS
         STM   DCBREG,LNKREG,TCCWCCWA-TCCW(DEBREG) SAVE REGS 4 - 14
         LR    BASREG,APBSRG       ESTABLISH BASE REG
         S     BASREG,EXTDISP      POINT TO BEGINNING OF MODULE
         DROP APBSRG               DROP TEMPORARY ADDRESSABILITY
         LR    IOSBRG,REG1         ESTABLISH PERMANENT IOSB REGISTER
         BAL   LNKREG,SETFRR       ESTABLISH FRR
         L     RQEREG,IOSUSE       LOAD POINTER TO RQE
         ST    RQEREG,FRRCRQE      STORE AS CURRENT RQE
         BAL   LNKREG,XCPENVL      LOAD ENVIRONMENTAL REGISTER
         CLI   RQEPRT,SYSTMKEY     IS THIS SYSTEM RQE
         BNH   XCPEXTCK            YES, SKIP VALIDITY CHECK    @Y30IPLB
         BAL   LNKREG,XCPVAL       VALIDITY CHECK CONTROL BLOCKS
         SPACE
XCPEXTCK LA    LNKREG,XCPEXTRT     SET UP TO EXTENT CHECK THE  @ZA07510
         B     XCPEXT              SEEK ADDRESS. LA & B INSTR  @ZA07510
XCPEXTRT EQU   *                   USED SO HIGH ORDER BYTE OF  @ZA07510
*                                  LNKREG IS ZEROED. THE HIGH  @ZA07510
*                                  ORDER BIT IS USED IN XCPEXT @ZA07510
*                                  TO DETERMINE CALLER.        @ZA07510
         SPACE
         L     WKREGB,RQETCCW      LOAD TCCW ADDREES
         SETFRR D,WRKREGS=(WKREG6,WKREGA) DELETE FRR
         LR    RQEREG,IOSBRG       RESTORE PARAMETER REGISTER
         LM    DCBREG,LNKREG,TCCWCCWA-TCCW(WKREGB) LOAD REGISTERS
         B     C0(LNKREG,APBSRG)   RETURN TO DA ERP
         EJECT
XCPEXT   SLR   WKREGB,WKREGB       ZERO A WORK REG             @Y30IPLB
         IC    WKREGB,IOSEEKA      PICK UP THE M FIELD
         SLR   WKREGA,WKREGA       ZERO REG FOR INSERT         @Y30IPLB
         IC    WKREGA,DEBEXSCL     PICK UP EXTENT SCALE
         SLL   WKREGB,C0(WKREGA)   MULTIPLY EXTENT NO BY SCALE
         LA    WKREGA,DEBBASND(WKREGB) POINT TO DEB EXTENT
         USING DEBDASD,WKREGA      ADDRESSABILITY TO EXTENT
         SPACE 2
         CLC   IOSEEKA+C3(C4),DEBSTRCC SEEK ADDRESS LESS THAN LOW CCHH
         BL    XCPEXTA             YES, GO TO END OF EXTENT APP@Y30IPLB
         CLC   IOSEEKA+C3(C4),DEBENDCC SEEK ADDRESS GREATER THAN HIGH
         BH    XCPEXTA             YES, GO TO END OF EXTENT APP@Y30IPLB
         SLR   APBSRG,APBSRG       ZERO IN CASE EXT TEST PASSED@Y30IPLB
         CLC   IOSEEKA+C1(C2),DEBBINUM BIN NUMBER THE SAME
         BNE   XCPEXTA             NO, EXTENT ERROR            @ZA07510
         SPACE
         TM    DEBOFLGS,DEBSPLIT   SPLIT CYLINDER DATA SET?    @ZA07510
         BNOR  LNKREG              NO, RETURN TO CALLER        @ZA07510
         SPACE
         LTR   LNKREG,LNKREG       HIGH ORDER BIT OF LNKREG IS @ZA07510
         BNM   XCPEXTS3            USED TO DETERMINE CALLER.   @ZA07510
*                                  OFF = ENTERED THRU IECVEXTC @ZA07510
*                                  FROM DA ERP. ON = OTHERWISE.@ZA07510
         SPACE 2
*        BELOW PERFORM SPLIT CYL OPERATIONS FOR NON-ERP ENTRY  @ZA07510
         CLC   IOSEEKA+C5(C2),DEBENDHH SEEK GT DEB HIGH HH     @ZA07510
         BH    XCPEXTS2            YES, SET IT TO DEB LOW HH   @ZA07510
XCPEXTS1 CLC   IOSEEKA+C5(C2),DEBSTRHH SEEK LT DEB LOW HH ?    @ZA07510
         BNLR  LNKREG              NO, THUS IS WITHIN SPLIT    @ZA07510
XCPEXTS2 MVC   IOSEEKA+C5(C2),DEBSTRHH SET SEEK TO LOW DEB HH  @ZA07510
         BR    LNKREG              RETURN TO CALLER            @ZA07510
         SPACE
XCPEXTS3 EQU   *                   SPLIT CYL + FROM DA-ERP     @ZA07510
         CLC   IOSEEKA+C5(C2),DEBENDHH SEEK GT DEB HIGH HH?    @ZA07510
         BNH   XCPEXTS1            NO, GO CHECK FOR SEEK LOW   @ZA07510
*                                  WAS HIGH, UPDATE CYL + TRK  @ZA07510
         SLR   WKREG6,WKREG6       ZERO A WORK REG             @ZA07510
         ICM   WKREG6,LORD2BYT,IOSEEKA+C3  GET THE SEEKA CC    @ZA07510
         LA    WKREG6,C1(WKREG6)   ADD 1 TO THE SEEKA CC       @ZA07510
         STCM  WKREG6,LORD2BYT,IOSEEKA+C3 PUT UPDATED SEEKA CC @ZA07510
         B     XCPEXTS2            NOW GO UPDATE TRACK (HH)    @ZA07510
         SPACE 2
XCPEXTA  L     WKREGB,RQETCCW      POINT TO TCCW
         USING TCCW,WKREGB         ADDRESSABILITY TO TCCW
         ST    LNKREG,TCCWPLKR     SAVE RETURN ADDRESS
         LA    REG13,TCCWRGSV-C8   POINT TO SAVE AREA
         LTR   LNKREG,LNKREG                                   @ZA18819
         BM    XCPEXTA1                                        @ZA18819
         LA    REG0,C1                                         @ZA18819
         BAL   LNKREG,XCPMAP                                   @ZA18819
XCPEXTA1 EQU   *                                               @ZA18819
         LR    REG0,FRRREG         SAVE FRR REGISTER
         L     APBSRG,DEBAPPAD     GET APPENDAGE POINTER
         USING DEBAVT,APBSRG       ADDRESSABILITY TO AVT
         L     APBSRG,DEBEOEA      GET EOE APPENDAGE ADDRESS
         LA    WKREG6,IOSEEKA      POINT TO UCB SEEK EQUIVALENT
         SLR   WKREG9,WKREG9       ZERO REG 9 FOR APPENDAGE    @Y30IPLB
         OI    FRRFLAG,FRREOE+FRRAACT SET EOE APP. EXECUTING   @YM05506
         BALR  LNKREG,APBSRG       GO TO APPENDAGE
         SPACE 2
         B     XCPEXTE             EXTENT ERROR SET CODE       @Y30IPLB
         B     XCPEXTC             SKIP THIS OPERATION         @Y30IPLB
*        B     XCPEXTB             TRY EXTENT CHECK AGAIN      @Y30IPLB
         SPACE 2
XCPEXTB  EQU   *                                               @Y30IPLB
         SPACE
         BAL   WKREGA,XCPEXTG      ENTER COMMON EXTENT CODE    @Y30IPLB
         B     XCPEXT              EXTENT CHECK AGAIN
         SPACE 2
XCPEXTC  EQU   *                                               @Y30IPLB
         SPACE
         BAL   WKREGA,XCPEXTF      ENTER COMMON EXTENT CODE    @Y30IPLB
         OI    RQEFLAG,RQEPURGE    INDICATE RQE TO BE FLUSHED   @YM1398
*                                  * WITHOUT FURTHER APPENDAGE  @YM1398
*                                  * PROCESSING                 @YM1398
         SPACE
XCPEXTD  EQU   *                                               @Y30IPLB
         SPACE
         NI    IOSFLA,FF-IOSERR    RESET ERROR ROUTINE IN CONTROL
         NI    IOBFLAG1,FF-IOSERR  RESET ERROR ROUTINE IN CONTROL
         LA    APBSRG,C4           SET RETURN CODE FOUR
         BR    LNKREG              RETURN TO CALLER
         SPACE
XCPEXTE  EQU   *                                               @Y30IPLB
         SPACE
         BAL   WKREGA,XCPEXTF      ENTER COMMON EXTENT CODE    @Y30IPLB
         MVI   IOBECBCC,ECBEXTR    SET EXTENT VIOLATION POST CODE
         MVI   IOSCOD,ECBEXTR      SET EXTENT VIOLATION ERROR
         B     XCPEXTD             RETURN TO CALLER
         SPACE
XCPEXTF  EQU   *                                               @Y30IPLB
         SPACE
         MVC   IOSTATUS(C4),IOBCSW+C3  MOVE STATUS + RESIDUAL  @ZA10549
*                                  COUNT FIELDS BACK TO IOSB   @ZA10549
         SPACE
XCPEXTG  EQU   *                                               @Y30IPLB
         SPACE
         LR    FRRREG,REG0         LOAD FRR WK AREA ADDRESS    @Y30IPLB
         NI    FRRFLAG,FF-FRREOE-FRRAACT RESET EOE APPEN. EXEC @Y30IPLB
         L     WKREGB,RQETCCW      RESTORE TCCW ADDRESS        @Y30IPLB
         L     LNKREG,TCCWPLKR     RETORE RETURN ADDRESS       @Y30IPLB
         BR    WKREGA              RETURN TO EXTEXT MAIN PATH  @Y30IPLB
         TITLE 'IECVEXCP-- EXCP PROCESSOR -- MISCELLANEOUS SUBROUTINES'
***********************************************************************
*                                                                     *
*        SET FRR ROUTINE, OBTAINS THE FRR WORK AREA AND ZEROS IT      *
*         MUST NOT USE REGISTER 0 - RESTRICTION DUE TO XCPTERM **     *
*                                                                     *
***********************************************************************
         SPACE 3
SETFRR   SETFRR A,FRRAD=XCPFRR,PARMAD=(FRRREG),WRKREGS=(FRRREG,DEBREG)
         BR    LNKREG              RETURN TO MAIN LINE
         EJECT
***********************************************************************
*                                                                     *
*        ENVIRONMENTAL LOAD REGISTER ROUTINE. LOADS THE COMMON REGS   *
*        FOR EACH ROUTINE IN EXCP.                                    *
*                                                                     *
***********************************************************************
         SPACE 3
         USING IOBSTDRD,IOBREG     ADDRESSABILITY FOR IOB
         USING DEBBASIC,DEBREG     ADDRESSABILITY FOR DEB
XCPENVL  LM    IOBREG,DEBREG,RQEIOB LOAD IOB AND DEB REGISTER
         L     DCBREG,DEBDCBAD     LOAD DEB REGISTER
         L     UCBREG,RQEUCB       LOAD UCB REGISTERS
         BR    LNKREG              RETURN TO MAIN LINE
         EJECT
***********************************************************************
*                                                                     *
*        COMMON VALIDITY CHECK FOR EACH ENTRY INTO EXCP.              *
*                                                                     *
***********************************************************************
         SPACE 3
IECVEXP1 EQU   *                   START OF VALIDITY CHECK RTN @YM02855
         SPACE 2
XCPVAL   EQU   *                   VALIDITY CHECK ROUTINE
         MODESET SWAPKEY,KEYADDR=RQEPRT,WORKREG=15 SWAP TO USER KEY
XCPVALA  NI    IOBFLAG1,FF         ACCESS THE IOB
         NI    C0(DCBREG),FF       ACCESS THE DCB
         L     APBSRG,IOBECBPT     LOAD ECB POINTER
         NI    C0(APBSRG),FF       ACCESS THE ECB
         MODESET    EXTKEY=ZERO    SWAP BACK TO SYSTEM KEY 0   @ZA11892
         BR    LNKREG              RETURN TO MAIN LINE
         SPACE
IECVEXP2 EQU   *                   END OF VALIDITY CHECK RTN   @YM02855
         SPACE 2
         EJECT
***********************************************************************
*                                                                     *
*        ROUTINE WHICH INTERFACES WITH THE POST ROUTINE               *
*                                                                     *
***********************************************************************
         SPACE 3
XCPPOST  EQU   *                   POST ROUTINE INTERFACE
         L     WKREGB,IOBECBPT     LOAD POINTER TO ECB
         LA    WKREGB,C0(WKREGB)   ZERO THE HIGH BYTE
         TM    RQEPRT,PPKEY        USER KEY 8-15 ??            @ZA11892
         BZ    XCPPOST1             NO, BYP VAL CK OF ECB      @ZA11892
         SPACE 1                                               @ZA11892
IECVEXP5 EQU   *                   LIMIT CHECK FOR FRR         @ZA11892
         MODESET SWAPKEY,KEYADDR=RQEPRT,WORKREG=15  USERS KEY  @ZA11892
         NI    C0(WKREGB),FF       ACCESS ECB IN USERS KEY     @ZA11892
         MODESET EXTKEY=ZERO       SWAP BACK TO SYSTEM KEY     @ZA11892
IECVEXP6 EQU   *                                               @ZA11892
XCPPOST1 EQU   *                                               @ZA11892
         IC    WKREGA,IOBECBCC     GET THE COMPLETION CODE
         SLL   WKREGA,C24          PLACE IN HIGH BYTE
         L     APBSRG,AOPT02       GET ADDR OF POST WITH VALCHK
***                                                          ***
*   POST INTERFACE DEFINITION - REGS 0-9.12,13 TRANSPARENT     *
*                               REG 10 = COMPLETION CODE       *
*                               REG 11 = ECB,REG 14 = RETURN   *
*                               REG 15 = ENTRY POINT OF POST   *
***                                                          ***
         BALR  LNKREG,APBSRG       GO TO POST
         BR    WKREG6              RETURN TO CALLER            @ZA11892
         EJECT
***********************************************************************
*        COMMON FREE RQE ROUTINE - ENTERED BY  -                      *
*              VAM (WINDOW INTERCEPT) INTERFACE RETURN                *
*              EXCP TERMINATION ROUTINE                               *
***********************************************************************
         SPACE 3
XCPFREE  EQU   *                   FREE RQE ROUTINE INTERFACE
         C     RQEREG,FRRCRQE      FREEING CURRENT RQE ??      @ZA16415
         BNE   XCPFREEA            NO                          @ZA16415
         L     WKREGA,RQETCB       YES, SAVE TCB ADDR          @ZA16415
         ST    WKREGA,FRRCRQE           IN FRR FOR FRR ROUTINE @ZA16415
         MVI   FRRCRQE,FF          INDICATE FIELD IS NOW TCB   @ZA16415
XCPFREEA EQU   *                                               @ZA16415
         L     WKREGA,RQEIPIB      LOAD POINTER TO IPIB IF ONE
         LTR   WKREGA,WKREGA       IS THIS REQUEST UNDERGOING PURGE
         BNZ   XCPFREEB            BRANCH YES, MUST DECREMENT COUNT
XCPFREEC EQU   *                   RETURN FROM PURGE QUIESCE   @ZA16415
         ST    WKREGA,C0(RQEREG)   ZERO FIRST WORD OF RQE      @ZA16415
         ST    WKREGA,RQENRQE      ZERO NEXT RQE ON RRQ FIELD  @ZA16415
         LR    WKREGA,LNKREG       SAVE RETURN ADDRESS
         L     APBSRG,ACOREMGT     GET ADDRESS OF STORAGE MANAGER
XCPFREED OI    FRRTCNT,FRRF40      COVER SMGR FOR FREE RQE     @YM08112
         BAL   LNKREG,XRQEFREE(APBSRG)   RELEASE RQE
         NI    FRRTCNT,FF-FRRF40   TURN OFF SMGR COVER         @YM07224
         BR    WKREGA              RETURN VIA SAVED RETURN REG
         EJECT
***                                                           ***
*   RQE UNDERGOING PURGE QUISCE - INTERFACE WITH QUIESCE COUNT  *
*   DECREMENT SUBROUTINE TO DECREMENT THE COUNT AND POST PURGE  *
*   (IGC0001F) IF COUNT GOES TO ZERO.                           *
***                                                           ***
         SPACE 1
XCPFREEB STM   WKREG9,REG0,RQEIOB  SAVE REGS 9-15 AND 0 IN RQE
         LR    WKREG9,RQEREG       SAVE RQE
         LR    RQEREG,WKREGA       IPIB ADDRESS TO REG 1
         SLR   REG0,REG0           INDICATE LOCAL LOCK HELD    @Y30IPLB
         L     APBSRG,AQCNTDEC     GET DECREMENT ROUTINE ADDR
***                                                          ***
*   DECREMENT QUIESCE COUNT INTERFACE DEFINITION - REG0 = 0;   *
*   REG 1 = IPIB, REGS10-13 WORK REGISTERS, REG14 = RETURN,    *
*   REG15 = ENTRY POINT IECVQCNT                               *
***                                                          ***
         BALR  LNKREG,APBSRG       GO TO THE PURGE SUBROUTINE
         LR    RQEREG,WKREG9       RESTORE RQE ADDRESS
         LM    WKREG9,REG0,RQEIOB  RESTORE REGS SAVED ACROSS INTERFACE
         SLR   WKREGA,WKREGA       ZERO A REG                  @Y30IPLB
         CLI   RQEFLAG,FF          SVC 3 ENTRY TO FREE RQE     @ZA16415
         BNE   XCPFREEC            NO, RETURN TO COMM FREE RQE @ZA16415
         B     XCPSVC3A            YES, RETURN TO SVC 3 RTN    @ZA16415
         EJECT
***********************************************************************
*                                                                     *
*        ABEND INTERFACE                                              *
*                                                                     *
***********************************************************************
         SPACE 3
ABENDSET EQU   *                                               @YM05929
         SPACE
         LA    REG1,DUMPFUNF       SET CODE FOR FIX OR UNFIX   @Y30IPLB
*                                  FAILURE
         SPACE 2
ABEND000 ABEND (REG1),DUMP,,SYSTEM     ABEND REQUESTOR         @YM04203
         TITLE '    IECVEXCP - EXCP PROCESSOR - SVC3 FREE RQE ROUTINE'
***********************************************************************
*                                                                     *
*        FREE RQE FROM SVC 3 ROUTINE                                  *
*        ENTRY FROM PURGE (EXPR) TO FREE RQE                          *
*        INTERFACE DEFINITION CONSTRAINED BY IECVX025 ENTRY           *
*        INPUT - REG 1 = RQE ADDRESS, REG 14 = RETURN,13 = SAVE       *
*                REG 5 = BASE, NO OTHER REGS CAN BE ASSUMED           *
*                REGS DESTROYED = 10,15,1,14                          *
*                                                                     *
***********************************************************************
         SPACE 3
IECVX025 EQU   *                   SVC 3 ENTRY - RETURN RQE
***                                                           ***
*  INTERFACE DEFINITION - REG 1 = RQE ADDRESS,13=18 WORD SAVEAREA
*                           14= RETURN ADDRESS, 15= ENTRY POINT *
*        THE 18 WORD SAVEAREA PASSED BY SVC 3 MUST ALSO BE USED *
*        IN THE INTERFACE TO STORAGE MANAGER TO FREE THE RQE.   *
*        THUS, REGISTER USAGE IS CRITICAL.                      *
***                                                           ***
         USING *,APBSRG
         STM   REG0,LNKREG,C0(REG13) SAVE REGS 0-14 IN 1ST 15 WORDS
         ST    BASREG,C60(REG13)   RESAVE 5,10,14 IN UNUSED WORDS
         ST    WKREGA,C64(REG13)   * OF SAVE AREA - STORAGE MNGR
         ST    LNKREG,C68(REG13)   * ONLY USES 1ST 15 WORDS
         LR    BASREG,APBSRG       ESTABLISH BASE REGISTER START
         SH    BASREG,DISPX025     MAKE IT MATCH MODULE BASE
         DROP  APBSRG              RELEASE TEMPORARY ADDRESSABILITY
         MVI   RQEFLAG,FF          INDICATE ENTRY TO XCPFREE    @YM3145
*                                  * FROM SVC 3 INTERFACE       @YM3145
         L     WKREGA,RQEIPIB      LOAD IPIB FIELD FROM RQE    @ZA16415
         LTR   WKREGA,WKREGA       REQUEST UNDERGOING PURGE ?? @ZA16415
         BNZ   XCPFREEB            YES, MUST DECREMENT IPIB CT @ZA16415
XCPSVC3A EQU   *                                               @ZA16415
         ST    WKREGA,C0(RQEREG)   ZERO 1ST WORD IN RQE        @ZA16415
         ST    WKREGA,RQENRQE      ZERO NEXT RQE ON RRQ FIELD  @ZA16415
         L     APBSRG,ACOREMGT     LOAD ADDR TO STORAGE MGR    @ZA16415
         BAL   LNKREG,XRQEFREE(APBSRG)  RELEASE RQE            @ZA16415
         SPACE 2                                               @ZA16415
         LM    REG0,LNKREG,C0(REG13) RESTORE REGS 0-14
         L     BASREG,C60(REG13)   RESTORE REG 5
         L     WKREGA,C64(REG13)   RESTORE REG 10
         L     LNKREG,C68(REG13)   RESTORE REG 14
         BR    LNKREG              RETURN TO SVC 3
         EJECT
***********************************************************************
*                                                                     *
*        EXECUTED INSTRUCTIONS                                        *
*                                                                     *
***********************************************************************
         SPACE 2
RRTYPOR  OI    RQETYPE,C0          EXECUDED OR OF RELATED REQUEST FLAGS
XCPCMPR  CLI   FRRFCNT,C0          EXECUTED COMPARE OF NO OF BLOCKS AVL
XCPFLGOR OI    IOSFLA,C0           EXECUTED OR FROM IOSB TO IOB
XCPIOBOR OI    IOBFLAG1,C0         EXECUTED OR FROM IOB TO IOSB
         SPACE 2
***********************************************************************
*                                                                     *
*         CONSTANTS USED BY THE EXCP PROCESSOR                        *
*                                                                     *
***********************************************************************
         DS    0F
XCPTRMAD DC    A(XCPTERMA)      ADDRESS OF TERMINATION ROUTINE @ZA08736
FLAGMASK DC    X'000000FC'         MASK OF COMMON IOB - IOSB BITS
IEAPGFX  DC    V(IEAVPSIB)         ADDRESS OF PAGE FIX ROUTINE
IEAPGFR  DC    V(IEAVPSIF)         ADDRESS OF PAGE FREE RTN    @Y30IPLC
XCPFRR   DC    V(IECVXFRR)         ADDRESS OF EXCP FRR
GET160   DC    X'10000020'         MASK FOR GETTING 160 BYTE BLOCKS
GETRQE   DC    X'10000010'         MASK FOR GETTING 40 BYTE BLOCKS
ACOREMGT DC    V(IECVSMGR)         ADDRESS OF STORAGE MANAGER
ADEBCHK  DC    V(IFGDEBVR)         ADDRESS OF DEBCHECK ROUTINE
ATYPE1EX DC    V(IEAVEXPR)         TYPE 1 EXIT ADDRESS
AOPT02   DC    V(IEA0PT02)         POST WITH VALIDITY CHECK
AQCNTDEC DC    V(IECVQCNT)         QUISCE COUNT DECREMENT SUBRTN
XCPECB   DC    X'00000000'         EXCP'S ECB FOR PAFE FIX     @YM05168
ONEPAGE  DC    X'00001000'         CONSTANT FOR ONE PAGE
LISTFIX  DC    X'80000000'         MASK USED TO FIX A LIST
XCPATRUN DC    X'FFFFF000'         TRUNC ADDR TO 4K BOUNDARY   @ZA12454
XCP114RQ DC    X'00000080'         EXCPVR REQUEST              @ZA16147
ENDSDISP DC    A(XCP201-XCPBASE)   DISPLACEMENT TO CHE/ABE ROUTINE
ACCWXLAT DC    V(IECVTCCW)         CCW TRANSLATOR ADDRESS
EXTDISP  DC    A(IECVEXTC-XCPBASE) DISPLACEMENT TO EXTENT CHECK ROUTINE
XCPFIXAD DC    A(XCPFIX)           ADDRESS OF PAGE FIX SUBRTN  @YM05929
XCPBASE2 DC    A(XCPTERM)          BASE REG FOR TERMINATION    @ZA07510
XCPENDIE DC    A(XCPDIE)           IOSB ENTRY POINT FOR DIE    @ZA12705
XCPENPCI DC    A(XCPPCI)           IOSB ENTRY POINT FOR PCI    @ZA12705
NORMSTAT DC    X'0000737F'         MASK TO CHECK FOR ABNORMAL STATUS
PCISTAT  DC    X'0000FF7F'         MASK TO CHECK FOR OTHER THAN PCI
DAVTOFF  DC    Y(DEBBASIC-DEBAVT)  DISPLACEMENT TO END OF DEB  @YM05929
NRQEDISP DC    AL2(RQENRQE-RQE)    DISPLACEMENT TO NEXT RQE FIELD
DISPX025 DC    AL2(IECVX025-XCPBASE) DISPLACEMENT FROM MODULE BASE
BR14     DC    X'07FE'             DUMMY APPENDAGE POINTER
EIGHT    DC    H'8'                CONSTANT OF EIGHT
ZEROS    DC    X'00'               USED TO XWAP TO KEY ZERO
         EJECT
ASMFEX   DC    V(IEASMFEX)         ADDRESS OF SMF ROUTINE
         SPACE 2
IECXAPG  DC    A(BR14)             END OF EXTENT DUMMY APPENDAGE
         DC    A(BR14)             START I/O DUMMY APPENDAGE
         DC    A(BR14)             PCI INTERRUPT DUMMY APPENDAGE
         DC    A(BR14)             CHANNEL END DUMMY APPENDAGE
         DC    A(BR14)             ABNORMAL END DUMMY APPENDAGE
ARCHN    DC    V(IECVRCHN)         ADDRESS OF RESTORE CHAIN BLDR@YM1141
*NOTE - ANYTHING ABOVE THIS LINE MUST STAY AT THE EXACT
*   DISPLACEMENT FROM IECXAPG
         SPACE 2
PATCH    DC    4C'IECVEXCP PATCH  '  PATCH AREA                @ZA08150
         TITLE '    IECVEXCP -- EXCP PROCESSOR -- TERMINATION ROUTINE'
***********************************************************************
*                                                                     *
*        TERMINATION ROUTINE OF EXCP PROCESSOR - THIS ROUTINE IS      *
*        ENTERED FROM CHANNEL OR ABNORMAL END APPENDAGE        @Y30IPLC
*        PROCESSING, POST STATUS, EXIT AND VARIOUS POINTS WITHIN      *
*        THE SVC ENTERED SECTION OF IOS. ENTRY FROM POST STATUS       *
*        REQUIRES ACQUIRING THE LOCAL LOCK.                           *
*                                                                     *
*        ENTRY POINTS ARE                                             *
*                                                                     *
*              IECVX025 - ENTRY FROM EXIT TO FREE THE RQE.            *
*              XCPTERMA - EXCP PRE-TERMINATION ROUTINE ENTRY   @YM30169
*                         FROM POST STATUS                            *
*              XCPTERM  - EXCP TERMINATION ROUTINE ENTRY FROM  @Y30IPLC
*                         CHANNEL OR ABNORMAL END APPENDAGE    @Y30IPLC
*                                                                     *
***********************************************************************
         SPACE 2
         USING XCPTERMA,TERMBAS    TEMPORARY ADDRESSABILITY    @YM30169
XCPTERMA LR    BASREG,APBSRG       SAVE BASE ADDRESS           @YM30169
         LR    TERMBAS,APBSRG      PREP NEW BASE               @YM30169
         S     BASREG,TERMDISP     BACK OFF BASE TO BEGINNING  @YM30169
         LR    WKREG6,LNKREG       SAVE RETURN ADDRESS         @YM30169
         LR    IOSBRG,RQEREG       SET OF BASE FOR IOSB        @YM30169
         BAL   LNKREG,SETFRR       SET FRR FOR TERM RTN        @YM30169
         LTR   REG0,REG0           POST STATUS SEND LOCAL LOCK @YM30169
         BM    XCPTERMB            YES, SKIP OBTAINING LOCK    @YM30169
         SPACE
         LR    IOBREG,FRRREG       SAVE FRR POINTER            @YM30169
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        X
               RELATED=(ADDRSPC,IECVEXCP(XCPEXITD))
         LR    FRRREG,IOBREG       RESTORE FRR POINTER         @YM30169
         SPACE
XCPTERMB L     REG13,PSAAOLD       GET ASCB POINTER            @YM30169
         USING ASCB,REG13          ESTABLISH ASCB ADDRESS.     @YM30169
         L     REG13,ASCBASXB      LOAD POINTER TO ASXB        @YM30169
         USING ASXB,REG13          ESTABLISH ASXB ADDRESS.     @YM30169
         LA    REG13,ASXBFLSA      GET SAVEAREA POINTER        @YM30169
         ST    REG13,FRRLLSA       SAVE PTR L L SAVEAREA       @YM30169
         L     RQEREG,IOSUSE       GET RQE ADDRESS             @YM30169
         ST    RQEREG,FRRCRQE      SAVE CURRENT RQE ADDRESS    @YM30169
         OI    FRRWORK,FRRPTERM    SET PRE-TERMINATION FLAG    @YM30169
         ST    WKREG6,FRRRETR      SAVE RETURN ADDRESS IN FRR  @YM30169
         OI    FRRFLAG,FRRBKE      INDICATE BACK-END PROCESS.  @ZA03287
         BAL   LNKREG,XCPENVL      LOAD ENVIRONMENTAL REGISTERS@YM30169
         EJECT
         CLI   RQEPRT,SYSTMKEY     IS THIS A SYSTEM RQE?       @YM30169
         BNH   XCPTERMC            YES, ENTER MAIN TERMINATION @YM30169
         SPACE
         BAL   LNKREG,XCPVAL       NO,VALIDITY CHECK CNTRL BLKS@YM30169
XCPTERMC L     TERMBAS,XCPBASE2    RESET BASE REG FOR BACK END @ZA07510
         USING XCPTERM,TERMBAS     RE-ESTABLISH ADDRESSABILITY @YM30169
         SPACE
XCPTERM  OI    FRRFLAG,FRRBKE      SET BACK END PROCESSING     @Y30IPLC
         TM    RQETYPE,RQERRTYP    IS THIS A RELATED REQUEST?? @ZA15704
         BNZ   XCPTERMD            YES,                        @ZA15704
         OI    FRRWORK,FRRUNREL    NO, SET FLAG IND IN FRR     @ZA15704
XCPTERMD CLI   IOSCOD,ECBPGMCK     WAS THIS A PROGRAM CHECK    @ZA02391
*                                  DURING PROCESSING
         BNE   XCP500              NO, VALID TERMINATION, CONTINUE
         SPACE
         TM    RQETYPE,RQEDIE      ABEND IN PCI APPENDAGE?     @YM07285
         BNO   XCP480              NO, CONTINUE....            @YM07285
         SPACE
         LA    REG1,CODEA00        SET APPROPRIATE ABEND CODE  @Y30IPLB
         B     ABEND000            ABEND THE TASK
         SPACE
XCP480   EQU   *                                               @YM07285
         L     WKREGB,RQETCB       LOAD TCB ADDRESS
         L     WKREGA,TCBEXCPD-TCB(,WKREGB) GET EXCP DEBUG ->  @Y30IPLB
         LTR   WKREGA,WKREGA       ANY AREA
         BNZ   XCP490              BRANCH YES
         LA    REG1,NONXCPAB       NO, GET NO DEBUG AREA COMP CODE
         B     XCP495              GO CALL RTM TO ABEND TASK
XCP490   EQU   *                   *
         USING XDBA,WKREGA
         LH    REG1,XDBACOMP       GET XDBA COMP CODE
XCP495   EQU   *                   *                           @YM04201
         CALLRTM COMPCOD=(1),TCB=(11),TYPE=ABTERM
         L     REG1,FRRCRQE        RESTORE RQE REGISTER
         OI    RQEFLAG,RQENOPST    SET NO POST BIT IN RQE      @YM05535
         EJECT
XCP500   CLI   UCBTBYT3,UCB3TAPE   IS THIS A TAPE DEVICE
         BNE   XCP505              NO, CONTINUE PROCESSING
         L     WKREGA,DCBBLKCT     INCREMENT THE BLOCK COUNT
         AH    WKREGA,IOBINCAM     BY THE AMOUNT SPECIFIED
         ST    WKREGA,DCBBLKCT     IN THE IOB.
         SPACE 1
XCP505   L     WKREGB,IOSIPIB      LOAD IPIB ADDR FOR CK        YM3829P
         LTR   WKREGB,WKREGB       WAS THERE AN IPIB            YM3829P
         BNZ   XCP900              YES - CHECK FURTHER          YM3829P
XCP508   TM    RQEFLAG,RQERETRY    IS THIS A RETRY REQUEST FROM YM3829P
*                                  APPENDAGE
         BO    XCP570              YES, EXECUTE RETRY LOGIC
XCP510   EQU   *                                               @ZA15704
         TM    RQETYPE,RQERRTYP    IS THIS A RELATED REQUEST?? @ZA15704
         BNZ   XCP512              YES                         @ZA15704
         OI    FRRWORK,FRRUNREL    NO, SET FLAG IND IN FRR     @ZA15704
         SPACE 1
XCP512   TM    RQEFLAG,RQENOPST    DID APPENDAGE WANT POSTING  @ZA02391
         BO    XCP515              NO,SKIP POST INTERFACE
         BAL   WKREG6,XCPPOST      POST THE ECB WITH IOBECBCC  @ZA11892
         SPACE 1
XCP515   TM    RQEFLAG,RQEFIXST    FIXING BEEN DONE FOR THIS REQUEST
         BZ    XCP530              NO, NO UNFIX NEEDED
         LR    WKREG6,RQEREG       SAVE RQE ACROSS UNFIX
         TM    RQETYPE,RQEVIRT     NEED TO GO TO TRANSLATOR
         BZ    XCP520              NO, MUST BE EXCPVR
         L     APBSRG,ACCWXLAT     LOAD POINTER TO TRANSLATOR
         L     RQEREG,RQETCCW      POINT TO TCCW
         MVI   TCCWOPTN-TCCW(RQEREG),TCCWUNFX WANT TO UNFIX PAGES
         BALR  LNKREG,APBSRG       UNFIX PAGES, QUEUE BLOCKS
         B     XCP525              CONTINUE PROCESSINS
         EJECT
XCP520   TM    RQETYPE,RQE114      IS THIS A SUBSYSTEM TYPE REQUEST
         BZ    XCP528              NO, SKIP UNFIX PROCESS
         SLR   REG0,REG0           ZERO ECB ADDRES               Y02062
         SLR   TCBREG,TCBREG       ZERO THE TCB ADDRESS          Y02062
         L     WKREGB,RQETCCW      LOAD PARM LIST IN WORK REG
         L     RQEREG,TCCWFIX-TCCW(WKREGB) LIST ADDR IN R1      YM01039
         ST    TCBREG,C0(WKREGB)   ZERO THE CHAIN POINTER
         MVI   C0(RQEREG),UNFIXIND INDICATE AN UNFIX OPERATION
         O     RQEREG,LISTFIX      PLACE FLAGS NEEDED IN PARM REG
         L     APBSRG,IEAPGFR      GET ADDRESS OF PAGE SUPVSR  @Y30IPLC
         BALR  LNKREG,APBSRG       UNFIX PAGES FOR EXCPVR
         L     DCBREG,DEBDCBAD     RESTORE THE DCB ADDRESS       Y02062
         LTR   APBSRG,APBSRG       TEST RETURN CODE
         BNZ   ABENDSET            UNFIX UNSUCCESSFUL          @Y30IPLB
*                                  SET ABEND CODE & ABEND TASK
*                                  OTHERWISE.......
*                                  UNFIX SUCCESSFUL-CONTINUE
         SPACE 2
XCP525   LR    RQEREG,WKREG6       RESTORE REGISTERS
XCP528   NI    RQEFLAG,FF-RQEFIXST-RQESTBL-RQESRBS-RQECHEAC RESET FLAGS
         SPACE 2
XCP530   L     WKREGB,RQETCCW      LOAD POINTER TO TCCW
         LTR   WKREGB,WKREGB       WAS THERE A TCCW
         BZ    XCP545              NO, NO, SKIP FREE
         L     WKREGA,RQESRB       LOAD POINTER TO SRB
         ST    WKREGB,C0(WKREGA)   STORE TCCW POINTER INTO SRB
         L     IOSBRG,SRBPARM-SRB(WKREGA) GET IOSB ADDRESS     @YM30176
         L     WKREG6,IOSERP       PICK UP EWA ADDRESS.        @Y30IPLC
         LTR   WKREG6,WKREG6       WAS THERE AN EWA ?          @Y30IPLC
         BZ    XCP535              NO                          @Y30IPLC
         LR    APBSRG,WKREG6       SAVE FIRST EWA POINTER      @ZA05189
XCP532   L     LNKREG,C0(WKREG6)   GET NEXT BLOCK I.E. IDAL    @ZA06189
         LTR   LNKREG,LNKREG       IS THIS THE LAST BLOCK?     @ZA05189
         BZ    XCP533              YES, THE FORM FREE-CHAIN    @ZA05189
         LR    WKREG6,LNKREG       NO, MAKE THIS BLOCK CURRENT @ZA05189
         B     XCP532              RETURN TO SEE IF ANOTHER    @ZA05189
         SPACE
XCP533   ST    WKREGA,C0(WKREG6)   STORE SRB PTR IN LAST BLOCK @ZA05189
         ST    LNKREG,IOSERP       STORE ZEROS IN EWA PTR      @ZA05189
         LR    WKREGA,APBSRG       RESTORE START OF CHAIN      @ZA06221
XCP535   TM    RQETYPE,RQEVIRT     IS THIS A VIRTUAL REQUEST   @Y30IPLC
         BO    XCP544              YES, DOT NO ZERO CHAIN
         SLR   LNKREG,LNKREG       ZERO A REGISTER FOR STORE   @Y30IPLB
         ST    LNKREG,C0(WKREGB)   STORE ZEROS AS CHAIN
XCP544   BAL   LNKREG,XCP700       FREE CORE FOR 160 BYTE BLKS
         EJECT
XCP545   TM    RQETYPE,RQETYP3     IS THIS REQUEST RELATED     @YM06503
         BZ    XCP560              NO, SKIP DEQUEUE            @YM06503
         L     WKREGB,DEBRRQ       POINT TO DEB RRQ
         SH    WKREGB,NRQEDISP     NEXT RQE DISPLACEMENT
         BAL   LNKREG,XCP800       DEQUEUE RQE
         SPACE 2
XCP560   TM    RQEFLAG,RQENOFRE    APPENDAGE WANT RQE FREED
         BO    XCP565              NO, SKIP FREEING THE RQE
         BAL   LNKREG,XCPFREE      FREE THE RQE
         SPACE 2
XCP565   EQU   *                                               @ZA15704
         TM    FRRWORK,FRRUNREL    IS THIS A RELATED REQUEST?? @ZA15704
         BO    XCPEXIT             NO, EXIT EXCP
         TM    FRRWORK,FRRRRP      IS REL REQ PURGE IN CONTROL @YM30169
         BO    XCP260              YES, RETURN TO RR PURGE     @YM30169
         TM    DCBIFLGS,DCBIFEC    PERMANENT ERROR
         BO    XCPEXIT             YES, EXIT
         TM    FRRFLAG,FRRBKE      IS THIS REDRIVE FROM POST STATUS
         BZ    XCPEXIT             NO, EXIT EXCP
         L     WKREGB,DEBRRQ       LOAD POINTER TO RRQ
         LA    WKREGB,C0(WKREGB)   CLEAR HI ORDER BYTE
         CLM   WKREGB,LORD3BYT,RRQLAST-RRQ+C1(WKREGB) EMPTY CHN  YM1302
         BE    XCPEXIT             YES, NOTHING TO DO
         LTR   WKREGB,WKREGB       IS DEBRRQ FIELD ZERO ??     @ZA15704
         BZ    XCPEXIT             YES, EXIT, NO RRQ           @ZA15704
         L     RQEREG,RRQFIRST-RRQ(WKREGB) LOAD NEXT RQE POINTER
         ST    RQEREG,FRRCRQE      STORE AS CURRENT            @YM05527
         TM    RQETYPE,RQEEOEE     END-OF EXTENT ERROR, TO BE  @YM04681
*                                  PURGED?                     @YM04681
         BO    XCP105A            YES,SET ADDRESSABILITY TO ABE@YM05528
         SPACE
         BAL   LNKREG,XCPENVL      LOAD ENVIRONMENTAL REGISTERS
         TM    RQEFLAG,RQESRBS     HAS THE RQE ALREADY BEEN STARTED
         BO    XCPEXIT             YES, RETURN TO DISPATCHER
         TM    RQEFLAG,RQESTBL     IS THE RQE STARTABLE
         BO    XCP155              YES, GO START IT
         TM    RQEFLAG,RQERETRY    IS THIS A RETRY REQUEST.... @ZA16164
         BZ    XCP050              NO.                         @ZA16164
         L     IOSBRG,RQESRB       LOAD SRB IN PREP FOR IOSB.  @ZA16164
         L     IOSBRG,SRBPARM-SRB(IOSBRG) LOAD IOSB POINTER    @ZA16164
         B     XCP105                                          @ZA16164
         EJECT
*   APENDAGE REQUESTED RETRY LOGIC
*
XCP570   TM    RQETYPE,RQEVIRT     IS THIS A VIRTUAL REQUEST
         BZ    XCP590              NO, SKIP FREEING BLOCKS
         TM    RQEFLAG,RQEFIXST    PGFREE REQUIRED             @VS30159
         BZ    XCP590              NO,BYPASS CALL TO TCCW      @VS30159
         NI    RQEFLAG,FF-RQEFIXST TURN OFF FIX STARTED FLAG     YMXXXX
         LR    WKREG6,RQEREG       SAVE RQE ADDRESS
         L     RQEREG,RQETCCW      LOAD POINTER TO TCCW
         L     APBSRG,ACCWXLAT     LOAD POINTER TO TRANSLATOR
         MVI   TCCWOPTN-TCCW(REG1),TCCWUNFX STATE UNFIX REQUEST
         BALR  LNKREG,APBSRG       GO TO TRANSLATOR
*        TCCW HAS CHAINED 160B BLOCKS: TCCW IDAL FIX BEBS.     @ZA12707
*        FOR RETRY, REASSIGN A 160B BLOCK FOR BEB AND FIX AND  @ZA12707
*        SET REMAINING BLOCKS ON 160B FREE CHAIN               @ZA12707
         L     WKREGA,C0(RQEREG)   1ST BLOCK CHAINED TO TCCW   @ZA12707
         L     WKREGB,C0(WKREGA)   2ND BLOCK CHAINED OFF TCCW  @ZA12707
         ST    WKREGA,TCCWBEB-TCCW(RQEREG) BEB PTR IN TCCW     @ZA12707
         ST    WKREGB,TCCWFIX-TCCW(RQEREG) FIX PTR IN TCCW     @ZA12707
         LR    RQEREG,WKREG6       RESTORE RQE REGISTER        @ZA12707
         SLR   WKREG6,WKREG6       ZERO WORK REGISTER          @ZA12707
         ST    WKREG6,C0(WKREGA)   ZERO BEB CHAIN PTR          @ZA12707
         L     WKREGA,C0(WKREGB)   LOAD NEXT CHAINED BLOCK     @ZA12707
         LTR   WKREGA,WKREGA       ANY 160B BLOCKS LEFT ??     @ZA12707
         BZ    XCP590               NO                         @ZA12707
         ST    WKREG6,C0(WKREGB)   YES, ZERO FIX CHAIN PTR AND @ZA12707
         BAL   LNKREG,XCP700        ENQ BLOCKS ON FREE CHAIN   @ZA12707
         SPACE 1                                               @ZA12707
XCP590   NI    RQEFLAG,FF-RQESTBL-RQESRBS-RQECHEAC RESET FLAGS   YMXXXX
         NI    IOSDIE,FF-IOSECEDE  RESET DIE SECOND ENTRY FLAG @ZA17778
         TM    RQETYPE,RQETYP3     IS THIS A RELATED REQUEST     YMXXXX
         BZ    XCP105              NO, HANDLE IMMEDIATELY
         L     WKREGB,DEBRRQ       POINT TO DEB RRQ
         USING RRQ,WKREGB          ADDRESSABILITY ON REG 11 FOR RRQ
         CLC   RRQFIRST,RRQLAST    ONE RQE ON QUEUE
         BE    XCP565              YES, DONT RE-QUEUE IT
         TM    RQEFLAG,RQERETRY+RQENOPST IS THIS A RETRY FROM   YM3829P
*                                  THE TOP OF THE RRQ           YM3829P
         BO    XCP565              YES - DONT REQUEUE THE RQE   YM3829P
         SH    WKREGB,NRQEDISP     NEXT RQE DISPLACEMENT
         BAL   LNKREG,XCP800       DEQUEUE RQE
         L     WKREGB,DEBRRQ       RESTORE RRQ ADDRESS          @YM1355
         L     WKREG6,RRQLAST      LOAD ADDR OF LAST RQE ON CHN
         ST    RQEREG,RQENRQE-RQE(WKREG6) STORE THIS RQE AD AS CHN
         ST    RQEREG,RRQLAST      STORE THIS RQE AS LAST ON CHN
         ST    WKREG6,FRRPRQE      STORE PREVIOUS RQE IN FRR WORK AREA
         SLR   WKREG6,WKREG6       ZERO A REG IN PREPARATION   @Y30IPLB
         BCTR  WKREG6,REG0         MAKE REG ALL F'S AS END OF CH
         ST    WKREG6,RQENRQE      STORE AS END OF CHAIN
         B     XCP565              REDRIVE THIS DEB
         DROP  WKREGB              DROP ADDRESSABILITY
         TITLE '  IECVEXCP -- EXCP PROCESSOR -- TERM RTN SUBROUTINES'
***********************************************************************
*        COMMON QUEUEING ROUTINE FOR THE ENQUEUE OF 160 BYTE BLOCKS   *
*        WHICH HAVE BECOME FREE. THEY ARE CHAINED FROM THE FRR        *
*        WORK AREA                                                    *
***********************************************************************
         SPACE 2
XCP700   SLR   APBSRG,APBSRG       ZERO A COUNT REGISTER       @Y30IPLB
         LR    WKREGB,WKREGA       POINT TO TOP OF CHAIN
         SLR   REG0,REG0           COMPARE REGISTER            @Y30IPLB
XCP720   LA    APBSRG,C1(APBSRG)   ADD ONE TO COUNT
         C     REG0,C0(WKREGB)     END OF CHAIN
         BE    XCP740              YES, STORE IN FRR
         L     WKREGB,C0(WKREGB)   LOAD POINTER TO NEXT BLOCK
         B     XCP720              LOOP TO LOOK AT NEW BLOCK
         SPACE 2
XCP740   MVC   C0(C4,WKREGB),FRRSTRG PLACE POINTER IN LIST
         ST    WKREGA,FRRSTRG      STORE NEW TOP OF CHAIN POINTER
         IC    REG0,FRRFCNT        LOAD THE PRESENT COUNT
         ALR   REG0,APBSRG         INCREMENT BY # OF NEW BLOCKS@Y30IPLB
         STC   REG0,FRRFCNT        STORE IN FRR WORK AREA
         BR    LNKREG              RETURN TO CALLING RTN
         EJECT
*        COMMON DEQUEUE RQE ROUTINE. USED TO REMOVE AN RQE FROM THE
*        RELATED REQUEST QUEUE.
         SPACE 2
XCP800   TM    RQEFLAG,RQENOFRE    RQE ALREADY DEQUEUED          YM1094
         BOR   LNKREG              YES, RETURN                 @Y30IPLB
XCP820   L     WKREGA,RQENRQE-RQE(WKREGB) LOAD NEXT RQE POINTER  YM1094
         LTR   WKREGA,WKREGA       END OF CHAIN
         BMR   LNKREG              YES, CANT FIND RQE ON CHAIN @Y30IPLB
         CR    WKREGA,RQEREG       THIS THE PRESENT RQE
         BE    XCP850              YES, DEQUEUE THIS ONE
         LR    WKREGB,WKREGA       POINT TO NEXT RQE
         B     XCP820              LOOP LOOKING FOR THE RQE
         SPACE 2
XCP850   L     WKREG6,RQENRQE      GET CHAIN FROM THIS RQE
         ST    WKREG6,RQENRQE-RQE(WKREGB) STORE IN PREVIOUS RQE
         LTR   WKREG6,WKREG6       WAS THIS RQE AT END
         BNMR  LNKREG              NO, CONTINUE                @Y30IPLB
         LA    WKREGA,RQENRQE-RQE(WKREGB) POINT TO NEXT FIELD   @YM1355
         SLR   WKREG6,WKREG6       CLEAR REG FOR ICM            @YM1355
         ICM   WKREG6,LORD3BYT,DEBRRQ+C1 GET RELATED REQUEST    @YM1355
*                                  * QUEUE ADDRESS              @YM1355
         CR    WKREGA,WKREG6       IS QUEUE EMPTY               @YM1355
         BNE   XCP860              BRANCH NO                    @YM1355
         LR    WKREGB,WKREG6       INSURE RRQLST POINTS TO RRQ  @YM1355
XCP860   ST    WKREGB,RRQLAST-RRQ(WKREG6) *                     @YM1355
         BR    LNKREG              RETURN TO CALLING ROUTINE
         EJECT
**********
*        DETERMINE PROPER ROUTING FORREQUEST UNDERGOING PURGE   YM3829P
**********
XCP900   ST    WKREGB,RQEIPIB      INSURE RQE KNOWS ABOUT PURGE YM3829P
         USING IPIB,WKREGB                                      YM3829P
         TM    RQEFLAG,RQENOFRE    IS THE RQE MARKED FOR NOFREE YM3829P
         BZ    XCP950              NO - SHOULD Q ON TOP OF      YM3829P
*                                  PIRL ENTRY FOR EXCP          YM3829P
         TM    IPIBOPT,IPIBRBP     WAS AN RB PURGE REQUESTED    YM3829P
         BO    XCP508              YES - WAIT AND COUNT AFTER   YM3829P
*                                  AFTER ASYNCH PROCESS         YM3829P
         SPACE 3
**********
*        THE FOLLOWING CODE IS ENTERED IF THE REQUEST HAS       YM3829P
*        ALREADY BEEN INCLUDED IN THE PURGE COUNT BUT IS NOW    YM3829P
*        BEING SCHEDULED FOR ASYNCHRONOUS PROCESSING (RQENOFRE) YM3829P
*        AND THE RB PURGE OPTION WAS NOT REQUESTED (IPIBRBP).   YM3829P
*        IT IS NECESSARY TO ADJUST THE PURGE COUNT AND ZERO     YM3829P
*        THE RQEIPIB FIELD AT THIS TIME TO PREVENT POSSIBLE     YM3829P
*        INTERLOCK.                                             YM3829P
**********
         SLR   REG0,REG0           CLEAR REG FOR RTN INTERFACE  YM3829P
         ST    REG0,RQEIPIB        ZERO RQEIPIB                 YM3829P
         LR    WKREG6,FRRREG       SAVE THE FRR POINTER        @YM05534
         LR    RQEREG,WKREGB       LOAD IPIB ADDR IN IFACE REG  YM3829P
         L     APBSRG,AQCNTDEC     LOAD COUNT ADJUST RTN ADDR   YM3829P
         BALR  LNKREG,APBSRG       GO ADJUST COUNT              YM3829P
         LR    FRRREG,WKREG6       RESTORE FRR REG             @YM05534
         L     REG13,FRRLLSA       RESTORE REG 13               YM3829P
         L     RQEREG,FRRCRQE      GET CURRENT RQE POINTER     @YM05534
         B     XCP508              RETURN TO STANDARD PROCESSINGYM3829P
         SPACE 3
**********
*        IF THE APPENDAGE DID NOT REQUEST NOFREE AND THE        YM3829P
*        REQUEST IS UNDERGOING PURGE THE FOLLOWING CODE WILL    YM3829P
*        BE ENTERED. IT WILL INSURE THAT THIS REQUEST IS PLACED YM3829P
*        AT THE TOP OF THE EXCP PIRL ENTRY IF RETRY WAS         YM3829P
*        REQUESTED.                                             YM3829P
**********
XCP950   TM    RQEFLAG,RQERETRY    WAS RETRY REQUESTED          YM3829P
         BZ    XCP510              NO, SEE IF POSTING REQUESTD @YM05534
         LR    REG0,WKREGB         LOAD IPIB ADDRESS            YM3829P
         TM    RQEFLAG,RQERETRY+RQENOPST WAS A RETRY  AT  THE   YM3829P
*                                  THE TOP REQUESTED            YM3829P
         BNO   XCP970              NO - NORMAL QUEUEING         YM3829P
         O     REG0,LISTFIX        INDICATE Q ON TOP OF PIRL    YM3829P
XCP970   L     APBSRG,ARCHN        LOAD PIRL CHAIN RTN ADDR     YM3829P
         BALR  LNKREG,APBSRG       GO ENQ RQE                   YM3829P
         NI    RQEFLAG,FF-RQERETRY-RQENOPST-RQENOFRE RESET FLAGSYM3829P
         B     XCP515              RETURN TO FURTHER PROCESSING YM3829P
         DROP  WKREGB                                           YM3829P
         DROP  TERMBAS             RELEASE ADDRESSABILITY
         TITLE '    IECVEXCP -- EXCP PROCESSOR -- DIE ROUTINE'
***********************************************************************
*                                                                     *
*        DIE ROUTINE ENTERED FROM THE I/O SUPERVISOR AFTER AN         *
*        INTERRUPT OCCURRED FOR AN EXCP OR EXCPVR REQUEST.            *
*        A CHECK IS MADE FOR A VIRTUAL = REAL OR EXCPVR PCI REQUEST   *
*        IF YES, THE PCI APPENDAGE IS ENTERED. FOR CHANNEL END NORMAL *
*        CONDITIONS, THE RELATED REQUEST QUEUE IS CHECKED FOR ANY     *
*        TYPE THREE REQUESTS TO START.                                *
*                                                                     *
*        REGISTERS ON ENTRY ARE AS FOLLOWS;                           *
*                                                                     *
*        REGISTER  2  -  ADDRESS OF THE IOSB                          *
*        REGISTER  13 -  ADDRESS OF THE SAVE AREA                     *
*        REGISTER  14 -  RETURN ADDRESS                               *
*        REGISTER  15 -  ENTRY POINT ADDRESS                          *
*                                                                     *
***********************************************************************
         SPACE 2
XCPDIE   TM    IOSFLB-IOSB(IOBREG),IOSDIESE SECOND ENTRY TO DIE
         BOR   LNKREG              YES, RETURN - NOTHING TO DO @Y30IPLB
         STM   REG0,LNKREG,C0(REG13) SAVE REGISTERS
         USING XCPDIE,TERMBAS      ADDRESSABILITY TO MODULE    @ZA12705
         LR    TERMBAS,APBSRG      EST BASE FOR DIE ROUTINE    @ZA12705
         LR    BASREG,APBSRG       PLACE BASE IN BASE REGISTER
         S     BASREG,DIEDISP      SUBTRACT DISPLACEMENT TO FRONT OF
*                                  MODULE
         LR    IOSBRG,IOBREG       PLACE IOSB IN PROPER REGISTER
         L     RQEREG,IOSUSE       SET UP RQE REGISTER
         TM    RQETYPE,RQEVIRT     IS THIS REQUEST VIRTUAL
         BZ    XCPDIEB             NO, CHECK FOR PCI STATUS
XCPDIEA  SLR   APBSRG,APBSRG       ZERO REG FOR COMPARES       @Y30IPLB
         TM    RQETYPE,RQETYP3     TYPE 3 RELATED REQUEST      @Y30IPLB
         BNO   XCPDIEE             NO TYPE 3, EXIT NORMAL
         TM    IOSTSA,CHE          CHANNEL END IN INTERRUPT
         BZ    XCPDIEE             NO, RETURN
         TM    IOSFLA,IOSERR       UNDERGOING RECOVERY
         BO    XCPDIEE             YES,RETURN
         LH    WKREGB,IOSTATUS     LOAD CSW STATUS
         N     WKREGB,NORMSTAT     AND OFF NORMAL STATUS BITS
         BNZ   XCPDIEE             ERROR, DO NOT SCHEDULE NEXT
         C     APBSRG,IOSIPIB      IS IPIB ADDRESS ZERO?       @Y30IPLB
         BNE   XCPDIEE             NO, THEN RETURN TO IOS      @YM05532
         SPACE
         L     REG1,RQENRQE        GET NEXT RQE IN CHAIN
         LTR   REG1,REG1           IS THERE ANOTHER IN QUEUE
         BNP   XCPDIEE             NO, RETURN TO IOS
         TM    RQEFLAG,RQESRBS+RQESTBL IF THE REQUEST HAS BEEN
*              SCHEDULED AND IS STARTABLE OR IF IT HAS NOT BEEN
*              SCHEDULED AND IS NOT STARTABLE, RETURN TO IOS
*              IS NORMAL. BUT IF THE REQUEST IS STARTABLE BUT
*              NOT SCHEDULED, IT MAY BE SCHEDULED HERE.
         BNM   XCPDIEE             RETURN NORMAL
         OI    RQEFLAG,RQESRBS     SET THAT IT IS SCHEDULED
         L     REG1,RQESRB         LOAD POINTER TO ITS SRB
         LA    APBSRG,C4           SET RETURN CODE 4
         B     XCPDIEF             EXIT DO NOT RELOAD REG 1
         SPACE 2
XCPDIEB  TM    IOSTSB,PCI          WAS THIS A PCI APPENDAGE REQUEST
         BZ    XCPDIEA             NO, LOOK FOR TYPE 3 RELATED REQUEST
         TM    IOSDIE,IOSECEDE     IS SECOND ENTRY ON          @ZA06068
         BO    XCPDIEI             YES, DO NOT GO TO PCI APPENDAGE
         BAL   LNKREG,XCPENVL      LOAD ENVIRONMENTAL REGS
         CLI   RQEPRT,SYSTMKEY     IS THIS A SYSTEM RQE
         BNH   XCPDIEG             YES, SKIP VALIDITY CHECK
IECVEXP7 EQU   *                   DIE VALIDITY CHECK ROUTINE  @ZA27673
         MODESET SWAPKEY,KEYADDR=RQEPRT,WORKREG=15 SWAP TO     @ZA27673
         NI    IOBFLAG1,FF         USER KEY. STORE IN IOB BUT  @ZA27673
*                                  DONT CHANGE IT. STORE IN    @ZA27673
         NI    C0(DCBREG),FF       DCB BUT DONT CHANGE IT.     @ZA27673
         L     APBSRG,IOBECBPT     POINT TO IOB ECB.           @ZA27673
         L     LNKREG,C0(APBSRG)   LOAD ECB CONTENTS.          @ZA27673
DIEVAL   EQU   *                   STORE INTO ECB WITHOUT      @ZA27673
         LR    REG0,LNKREG         CHANGING ECB USING CS.      @ZA27673
         CS    LNKREG,REG0,C0(APBSRG) THE DIE DOES NOT HOLD    @ZA27673
         BNE   DIEVAL              THE LOCAL LOCK.             @ZA27673
         MODESET EXTKEY=ZERO       SWAP BACK TO SYSTEM KEY 0.  @ZA27673
IECVEXP8 EQU   *                                               @ZA27673
XCPDIEG  SLR   REG0,REG0           INDICATE DIE EXIT           @Y30IPLB
         BAL   LNKREG,XCPMAP       MAP IOSB TO IOB
         L     WKREG6,RQETCCW      GET ADDRESS OF TCCW BLOCK
         USING TCCW,WKREG6         ADDRESSABILITY TO TCCW
         ST    REG13,TCCWCBEB      SAVE SAVE ADDRESS
         LA    REG13,TCCWSAVE      GET SAVE AREA FOR APPENDAGE
         L     APBSRG,DEBAPPAD     LOAD APPENDAGE VECTOR TABLE ADDR
         USING DEBAVT,APBSRG       ADDRESSABILITY TO AVT
         L     APBSRG,DEBPCIA      LOAD PCI APPENDAGE ADDRESS
         SLR   WKREG9,WKREG9       ZERO REG 9 FOR APPENDAGE    @Y30IPLB
         OI    RQETYPE,RQEDIE      INDIC EXCP DIE GOING TO     @YM05537
*                                  PCI APPENDAGE
         DROP  APBSRG
         BALR  LNKREG,APBSRG       GO TO PCI APPENDAGE
         SPACE
         L     TERMBAS,XCPENDIE    RESTORE DIE BASE            @ZA12705
         NI    RQETYPE,FF-RQEDIE   INDIC PCI APPENDAGE RETURNED@YM05537
*                                  TO EXCP DIE RTN
         L     REG13,TCCWCBEB      LOAD SAVE AREA ADDRESS
         DROP  WKREG6
         L     WKREGB,IOBSTART     GET NEW START ADDRESS
         ST    WKREGB,IOSVST       STORE IN IOSB
         TM    RQETYPE,RQE1TO1     IS THIS A 1 TO 1 REQUEST
         BO    XCPDIEC             YES DO NOT DO LRA
         LRA   WKREGB,C0(WKREGB)   GET REAL ADDRESS
XCPDIEC  ST    WKREGB,IOSRST       STORE IN IOSB
         SPACE 2
         LH    WKREGB,IOSTATUS     FIND STATUS TO TEST
         N     WKREGB,PCISTAT      IS THERE ANY STATUS OTHER THAN PCI
         BNZ   XCPDIEH             YES, CHECK WHAT IT IS
         LA    APBSRG,C8           NO, SET IGNORE RETURN
         SPACE 1
XCPDIEE  L     REG1,C4(REG13)      RESTORE REGISTER 1
         SPACE 1
XCPDIEF  L     REG0,C0(REG13)      RESTORE REG 0
         LM    IOBREG,LNKREG,C8(REG13) RESTORE REST OF REGISTERS
         B     C0(LNKREG,APBSRG)   RETURN TO IOS
*                                  APBSRG CONTAINS -
*                                      0 = NORMAL
*                                      4 = ENQ NEW WORK
*                                      8 = IGNORE
         SPACE 2
XCPDIEH  TM    IOSTSA,CHE          CHANNEL END IN PCI
         BZ    XCPDIEI             NO, RESET THE BIT
         TM    IOSTSA,DVE          IS THERE A DEVICE END
         BZ    XCPDIEA             NO, DO THINGS NORMALLY
         OI    IOSDIE,IOSECEDE     SET SECOND ENTRY FLAG       @ZA06068
         B     XCPDIEA             RETURN TO NORMAL PATH
         SPACE 2
XCPDIEI  NI    IOSDIE,FF-IOSECEDE  RESET SECOND ENTRY          @ZA06068
         B     XCPDIEA             RETURN TO LOOK FOR OTHER STATUS
         DROP  TERMBAS                                         @ZA12705
         TITLE ' IECVEXCP -- EXCP PROCESSOR -- PCI APPENDAGE INTERFACE'
***********************************************************************
*                                                                     *
*        PCI APPENDAGE INTERFACE - THIS ROUTINE MAPS THE IOSB TO      *
*        THE IOB AND EXECUTES THE PCI APPENDAGE.                      *
*                                                                     *
***********************************************************************
         SPACE 2
XCPPCI   STM   REG0,APBSRG,C0(REG13) SAVE REGISTERS
         USING XCPPCI,TERMBAS      ADDRESSABILITY FOR ENTRY    @ZA12705
         LR    TERMBAS,APBSRG      EST BASE FOR PCI ROUTINE    @ZA12705
         LR    BASREG,APBSRG       PLACE BASE IN BASEREG
         S     BASREG,PCIDISP      POINT TO BEGINNING OF MODULE
         LR    IOSBRG,REG1         PLACE IOSB IN ITS BASE REGISTER
         LR    WKREGA,REG13        SAVE SAVE AREA ACROSS INTERFACE
         BAL   LNKREG,SETFRR       ESTABLISH FRR
         L     RQEREG,IOSUSE       LOAD THE ADDRESS OF THE RQE
         ST    RQEREG,FRRCRQE      ST CURRENT RQE IN CASE OF FAILURE
         ST    WKREGA,FRRRETR      SAVE SAVE ADDRESS FOR LATER
         BAL   LNKREG,XCPENVL      LOAD ENVIRONMENTAL REGISTERS
         CLI   RQEPRT,SYSTMKEY     IS THIS SYSTEM RQE
         BNH   XCPPCIA             YES, SKIP VALIDITY CHECK
         BAL   LNKREG,XCPVAL       VALIDITY CHECK CONTROL BLOCKS
XCPPCIA  LA    REG0,C1             SET NOT DIE ENTRY
         BAL   LNKREG,XCPMAP       MAP IOSB TO IOB
         LR    WKREG6,FRRREG       SAVE FRR POINTER
         L     REG13,RQETCCW       FIND THE SAVE AREA
         LA    REG13,TCCWSAVE-TCCW(REG13) IN THE TCCW
         L     WKREGB,DEBAPPAD     GET THE APPENDAGE VECTOR TABLE
         USING DEBAVT,WKREGB       ADDRESSABILITY TO THE AVT
         L     APBSRG,DEBPCIA      GET PCI APPENDAGE ADDRESS
         DROP  WKREGB
         SLR   WKREG9,WKREG9       ZERO REG 9 FOR APPENDAGE    @Y30IPLB
         OI    FRRFLAG,FRRPCI+FRRAACT  SET PCI APPENDAGE EXEC  @YM05506
         BALR  LNKREG,APBSRG       EXECUTE THE PCI APPENDAGE
         L     TERMBAS,XCPENPCI    RESTORE PCI BASE            @ZA12705
         L     REG0,RQETCB         LOAD THE ADDRESS OF THE TCB
         NI    FRRFLAG-FRREXCP(WKREG6),FF-FRRPCI-FRRAACT       @ZA12704
*                                  RESET PCI APPENDAGE ACTIVE  @ZA12704
         SPACE 1                                               @ZA06067
*******  CHECK FOR SMF RECORDING  *****************************@ZA06067
         TM    RQEPRT,RQESMFRQ     SMF RECORDING REQUIRED ??   @ZA06067
         BZ    XCPPCIB              NO, BYPASS RECORDING       @ZA06067
         SPACE
         L     APBSRG,ASMFEX       LOAD THE ADDRESS OF SMF ROUTINE
         LA    REG1,C1             PASS TO SMF A COUNT OF 1    @ZA05478
         BALR  LNKREG,APBSRG       RECORD THE PCI
         L     RQEREG,IOSUSE       RESTORE RQE REG             @ZA12705
         EJECT                                                 @ZA06067
XCPPCIB  EQU   *
         LR    FRRREG,WKREG6       RESTORE FRR WORK AREA POINTER YM1095
         L     REG13,FRRRETR       RESTORE SAVE AREA POINTER     YM1095
         SETFRR D,WRKREGS=(WKREGA,WKREGB) DELETE FRR
         LM    REG0,APBSRG,C0(REG13) RESTORE REGISTERS
         BR    LNKREG              RETURN TO POST STATUS
         DROP  TERMBAS                                         @ZA12705
         TITLE ' IECVEXCP -- TERMINATION INTERFACE FROM IECVEXPR'
*                                                              @ZA12705
***********************************************************************
*   TERMINATION ROUTINE INTERFACE FROM IECVEXPR - THE EXCP            *
*   PURGE SUBROUTINE. SET UP ENVIRONMENT TO FREE RESOURCES            *
*   AND TERMINATE AN I/O REQUEST THAT HAS BEEN PURGED.                *
*                                                                     *
*   INTERFACE DEFINITION - REG 1 = RQE, REG14 = RETURN, REG15 = EP    *
*             REGISTERS 13 AND 14 ARE ONLY REGS RETURNED              *
***********************************************************************
         SPACE 3
         USING IECVXTRM,APBSRG     TEMPORARY ADDRESSABILITY
IECVXTRM LR    BASREG,APBSRG       SET BASE REG TO HERE
         S     BASREG,XTRMDISP     SUBTRACT DISPLACEMENT FROM HERE
         DROP  APBSRG              DROP TEMPORARY ADDRESSABILITY
         USING XCPBASE,BASREG      ESTABLISH PERMANENT BASE REG
         L     TERMBAS,XCPBASE2    LOAD PTR TO SECOND BASE     @ZA07510
         USING XCPTERM,TERMBAS     ADDRESSABILITY TO SECOND SECTION
         LA    FRRREG,SVRALN(REG13) POINT TO DUMMY FRR AREA
         ST    LNKREG,FRRRETR      POINT TO RETURN ADDRESS
         ST    REG13,FRRLLSA       POINT TO SAVE AREA IN FRR
         SLR   REG0,REG0           ZERO REG FOR STORE          @Y30IPLB
         ST    REG0,FRRFLAG        ZERO FULL WORD FLAGS FLD
         MVI   FRRFLAG,FRREXPR     SET EXPR PURGE OR FRR       @ZA12704
*                                  TERMINATION FLAG            @ZA12704
         ST    REG1,FRRCRQE        POINT TO CURRENT RQE
         ST    REG0,FRRPRQE        ZERO PREVIOUS RQE POINTER
         ST    REG0,FRRSTRG        ZERO STORAGE AREA
         BAL   LNKREG,XCPENVL      LOAD ENVIRONMENTAL REGS
         B     XCP510              GO FREE RESOURCES
         SPACE 2                                               @ZA12705
TERMDISP DC    A(XCPTERMA-XCPBASE) DISPLACEMENT TO PRE-TERM RTN@YM30169
XTRMDISP DC    A(IECVXTRM-XCPBASE) DISPLACEMENT TO PURGE ENTRY
DIEDISP  DC    A(XCPDIE-XCPBASE)   DISPLACEMENT TO DIE ROUTINE @ZA12705
PCIDISP  DC    A(XCPPCI-XCPBASE)   DISPLACEMENT TO PCI ROUTINE @ZA12705
      TITLE '  IECVEXCP -- EXCP PROCESSOR -- PAGE FIX INTERFACE SUBRTN'
***********************************************************************
*        PAGE FIX INTERFACE SUBROUTINE   ---                   @YM05929
*        THE PAGE FIX INTERFACE SUBROUTINE IS ENTERED TO FIX PAGES    *
*        AS SPECIFIED IN THE FIX LIST BUILT BY THE EXCPVR PAGE FIX    *
*        APPENDAGE. IN ADDITION, THIS SUBROUTINE IS ALSO ENTERED      *
*        TO FIX THE DEB FOR VIRTUAL=REAL EXCP REQUESTS. THESE PAR-    *
*        TICULIAR AREAS REQUIRE FIXING IN THAT THE PCI APPENDAGE      *
*        IS ENTERED VIA THE DISABLED INTERRUPT EXIT OF THE I/O SUP-   *
*        ERVISOR'S INTERRUPT HANDLING PROCESS.                        *
*                                                                     *
*        ENTRY -  XCPFIX, FOR EXCPVR                                  *
*                 XCPFIX + 4, FOR VIRTUAL=REAL                        *
*                                                                     *
*        INPUT -  REGISTER 1  =  RQE                                  *
*                 REGISTER 3  =  DEB                                  *
*                 REGISTER 5  =  EXCP BASE REGISTER                   *
*                 REGISTER 9  =  EXCP FIX ADDRESS                     *
*                 REGISTER 10 =  FIX LIST ADDRESS (EXCPVR)            *
*                 REGISTER 10 =  DEB APPENDAGE VECTOR TABLE ADDR(V=R) *
*                 REGISTER 11 =  NUMBER OF FIX ENTRIES                *
*                 REGISTER 13 =  SAVE AREA ADDRESS                    *
*                                                                     *
*        REGISTERS DESTROYED - REGISTERS 0,6,10 AND 11                *
*                                                                     *
*        EXIT  -  XCP105 OR ABEND000                                  *
*                                                                     *
***********************************************************************
         SPACE 2
         USING *,TERMBAS           ESTABLISH SUBRTN ADDRESSABIL@YM05929
XCPFIX   B     XCPLSTFX            ENTRY FOR EXCPVR PAGE FIX   @YM05929
*        B     XCPDEBFX            ENTRY FOR V=R DEB FIX REQ   @YM05929
         SPACE
XCPDEBFX EQU   *                                               @YM05929
         USING DEBAVT,WKREGA       ADDRESS. FOR DEP APPEND VEC @YM05929
         L     WKREG6,DEBPCIA      GET ADDR OF PCI APPENDAGE   @YM05929
         CLC   C0(C2,WKREG6),BR14  IS APPEND JUST BR 14 RETURN?@YM05929
         BE    XCP105              YES, DO NOT HAVE TO FIX DEB @YM05929
         DROP  WKREGA                                          @YM05929
         L     WKREGA,RQETCCW      GET ADDR OF TCCW BLOCK(LIST)@YM05929
         LA    WKREGA,TCCWSAVE-TCCW(WKREGA) FIGURE LIST ADDR   @YM05929
         LR    WKREG6,DEBREG       SAVE CONTENTS(IF ENTERED)   @YM05929
         SH    WKREG6,DAVTOFF      DIFFERENCE-OFFSET TO APPEND @YM05929
         ST    WKREG6,C0(WKREGA)   STORE IN FIX LIST,1ST ENTRY @YM05929
         LA    WKREGB,DEBPREFX-DEBAVT(WKREG6) ADDR OF PREFIX   @YM05929
         SLR   REG0,REG0           INITIALIZE REG TO ZERO      @Y30IPLB
         IC    REG0,DEBLNGTH-DEBPREFX(WKREGB) CURRENTLY - -36  @YM05929
         SLL   REG0,C3             MULTIPLY BY EIGHT           @YM05929
         ALR   WKREG6,REG0         DETERMINE FAREREST ADDR     @Y30IPLB
         ST    WKREG6,C4(WKREGA)   STORE IN 2ND WORD OF LIST   @YM05929
         O     DEBREG,LISTFIX      INDICATE LIST-FIX (NEGATIVE)@YM05929
         SLR   WKREGB,WKREGB       INITIALIZE WORK REG TO ZERO @Y30IPLB
         B     XCP1020             GO TO FIX THE DEB           @YM05929
         SPACE 2
XCPLSTFX EQU   *                   EXCPVR PAGE FIX INTERFACE   @YM05929
         LA    DEBREG,C0(DEBREG)   INSURE POSITIVE FOR LIST FIX@YM08238
         L     APBSRG,RQETCCW      FIND THE TCCW AGAIN         @YM05929
         ST    WKREGA,TCCWFIX-TCCW(APBSRG) SAVE FIX LIST        YM01039
         LTR   WKREGB,WKREGB       WERE THERE ANY FIX ENTRIES  @YM05929
         BNP   XCP105              NO, DONT FIX                @YM05929
         BCTR  WKREGB,C0           SUBTRACT 1 FROM # OF ENTRIES@YM05929
         SLL   WKREGB,C3           MULTIPLY BY 8-POINT TO LAST @YM05929
*                                  ENTRY
XCP1020  EQU   *                                               @YM05929
         LA    WKREGB,C4(WKREGA,WKREGB) GET SECOND WORD IN LAST@YM05929
         OI    C0(WKREGB),LASTENT  SET END OF ENTRIES INDICATOR@YM05929
         LR    WKREG6,RQEREG       SAVE RQE ADDRESS            @YM05929
         LA    REG1,C0(WKREGA)     PLACE LIST ADDRESS IN REG1  @YM05929
XCP1030  L     WKREGB,C0(WKREGA)   GET ADDRESS OF FIRST PAGE   @YM05929
         N     WKREGB,XCPATRUN     TRUNC START ADDR PAGE BNDRY @ZA12454
XCP1040  TM    C0(WKREGB),FF       ACCESS THE PAGE             @ZA06068
         A     WKREGB,ONEPAGE      INCREMENT TO NEXT PAGE      @YM05929
         CLM   WKREGB,XCP7,C5(WKREGA) END OF ENTRY YET?        @YM06703
         BL    XCP1040             NO, ACCESS THE PAGE         @YM05929
         TM    C4(WKREGA),LASTENT  END OF LIST                 @YM05929
         BO    XCP1050             YES, FIX PAGES              @YM05929
         LA    WKREGA,C8(WKREGA)   INCREMENT TO NEXT ENTRY     @YM05929
         B     XCP1030             GET PAGES IN ENTRY          @YM05929
         SPACE 2
XCP1050  O     REG1,LISTFIX        SET FLAGS - FIX SHORT TERM  @YM05929
         MVI   C0(REG1),FIX        SET FIX FLAG IN LIST          Y02062
         LTR   DEBREG,DEBREG       ENTERED FIX ONCE            @YM05929
         BZ    XCP1080             YES, SKIP IT THIS TIME      @YM05929
         BP    XCP1060             NO, SET RQEFIX STARTED      @YM05929
         L     WKREGB,DEBAPPAD     GET AVT ADDRESS AGAIN       @YM05929
         OI    DEBSIOAB-DEBAVT(WKREGB),DEBFIX SET DEBFIX BIT   @YM05929
         L     TCBREG,C0(DEBREG)   GET TCB ADDRESS FOR FIX     @YM05929
         LA    TCBREG,C0(TCBREG)   ZERO OUT HI-ORDER BYTE      @YM05929
         OI    C0(REG1),LTFIX      INDICATE LONG TERM FIX      @YM05929
         B     XCP1070             AND CONTINUE--              @YM05929
         SPACE
XCP1060  EQU   *                                               @YM05929
         OI    RQEFLAG-RQE(WKREG6),RQEFIXST INDIC RQE FIX      @YM05029
         SLR   TCBREG,TCBREG       DO NOT ASSOC FIX WITH TCB   @Y30IPLB
         SPACE
XCP1070  EQU   *                                               @YM05929
         LA    REG0,XCPECB         GET ADDR OF ECB FOR PAGE FIX@YM05168
         L     APBSRG,IEAPGFX      GET ADDRESS OF FIX ROUTINE  @YM05929
         BALR  LNKREG,APBSRG       GO FIX PAGES                @YM05929
         LTR   APBSRG,APBSRG       GOOD RETURN CODE            @YM05929
         BZ    XCP1080             YES,CONTINUE PROCESSING     @YM05929
         CH    APBSRG,EIGHT        RETURN CODE 8               @YM05929
*                                  **** BE CAREFUL, DO NOT CHANGE CC **
         LA    DEBREG,C0           ZERO DEB REG                @YM05929
         LR    WKREGA,REG1         SET UP PARM REG             @YM05929
         BE    XCP1030             GO ACCESS THE PAGES         @YM05929
         SPACE
         B     ABENDSET            SET CODE-CANNOT FIX PAGE
*                                  AND ABEND THE TASK          @YM05929
         SPACE 2                                               @YM05929
XCP1080  LR    RQEREG,WKREG6       RESTORE RQE ADDRESS         @YM05929
         L     DEBREG,RQEDEB       RESTORE DEB ADDRESS         @YM05929
         L     DCBREG,DEBDCBAD     RE-ESTABLISH REGISTER 4     @YM05929
         B     XCP105              CON'T.. PERFORM EXTENT CHECK@YM05929
         SPACE
         DROP  TERMBAS
         DC    C'IECVEXCP'                                     @ZA08150
         DC    C' UZ17578  '       PTF NUMBER FOR 030/037      @ZA30947
         END
