IEEVSND5 CSECT
         TITLE  'IEEVSND5 - OPERATOR SEND COMMAND I/O ROUTINE'
*/*IEEVSND5:  CHART */
*/*HEADER
*/*IEEVSND5 - OPERATOR SEND COMMAND I/O ROUTINE */
*/*           E  IEEVSND5 */
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*    STATUS: CHANGE LEVEL 000                                         *
*                                                                     *
*    FUNCTION:                                                        *
*            THIS ROUTINE PERFORMS     I/O OPERATIONS FOR THE SEND    *
*            COMMAND.  FUNCTIONS PROVIDED ARE:                        *
*                                       READ                          *
*                   CLOSE               WRITE 'DI'                    *
*                                       WRITE 'DAF'                   *
*                                                                     *
*            NECESSARY INFORMATION FOR THE OPERATIONS DESIRED IS      *
*            SPECIFIED IN THE PARAMETER LIST POINTED TO BY REGISTER1: *
*                                                                     *
*                   ---------------------------                       *
*                   - FLAGS(2) KEY(1) FDBK(1) -                       *
*                   ---------------------------                       *
*                   -   RBA FOR READ/WRITE    -                       *
*                   -    RBA FOR FEEDBACK     -                       *
*                   ---------------------------                       *
*                   -      AREA ADDRESS       -                       *
*                   ---------------------------                       *
*                   -   DDNAME  (8 BYTES)     -                       *
*                   -                         -                       *
*                   ---------------------------                       *
*                   -      LIMIT COUNT        -                       *
*                   ---------------------------                       *
*                   -      DCB ADDRESS        -                       *
*                   ---------------------------                       *
*                   -     JFCB ADDRESS        -                       *
*                   ---------------------------                       *
*                                                                    *
*                                                                    *
*    ENTRY POINT: IEEVSND5                                           *
*                                                                    *
*                                                                    *
*    INPUT:  REGISTER 1 - ADDRESS OF PARAMETER LIST                  *
*            REGISTER 14- RETURN ADDRESS                             *
*            REGISTER 15- ENTRY POINT ADDRESS                        *
*                                                                    *
*                                                                    *
*    OUTPUT:                                                         *
*            REGISTER 1 - ADDRESS OF PARAMETER LIST                  *
*            REGISTER15 - RETURN CODE                                *
*                                                                    *
*    EXTERNAL REFERENCES:                                            *
*             GETMAIN, FREEMAIN,                                     *
*            READ, WRITE, CHECK, CLOSE,                              *
*                                                                    *
*                                                                    *
*    EXITS, NORMAL: CONTROL RETURNS TO CALLER                        *
*                                                                    *
*    EXITS, ERROR:                                                   *
*            THIS ROUTINE IS COVERED BY THE STAI SET UP IN IEEVGPSD. *
*            STAI EXIT ROUTINE RETURNS TO IEEVGPSD.                  *
*                                                                    *
*    TABLES/WORK AREAS:                                              *
*            CVT - TO GET PTR TO UCB LOOKUP TABLE                    *
*            DCB - DATA CONTROL BLOCK - FOR BROADCAST DATA SET       *
*            DECB - DATA EVENT CONTROL BLOCK                         *
*            ECB - EVENT CONTROL BLOCK - TO TEST EXCEPTION CODE      *
*                    BIT SETTINGS AFTER I/O OPERATION                *
*            JFCB - JOB FILE CONTROL BLOCK                           *
*            TCB - TASK CONTROL BLOCK - TO GET ADDRESS OF TIOT       *
*            TIOT - ENTRY FOR BROADCAST DATA SET IN MASTER'S TIOT    *
*            UCB - UNIT CONTROL BLOCK - ADDR IS PUT INTO TIOT ENTRY  *
*                                                                    *
*                                                                    *
*    ATTRIBUTES: REENTRANT                                           *
*                                                                     *
*    CHARACTER DEPENDENCY CODE:  NONE.                                *
*                                                                     *
*    NOTES:                                                           *
*         1. STANDARD LINKAGE CONVENTIONS USED.                       *
*         2. THIS ROUTINE IS CALLED BY OPERATOR SEND -                *
*                                       IEEVSND2, IEEVSND3, IEEVSND8  *
*                                                                     *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **
         EJECT
***********************************************************************
*                                                                     *
*                   R E G I S T E R    E Q U A T E S                  *
*                                                                     *
***********************************************************************
*                                                                     *
R0       EQU   0                   REGISTER USED IN GETMAIN, FREEMAIN
R1       EQU   1                   WORK REGISTER
R2       EQU   2                   WORK REGISTER
R3       EQU   3                   ADDRESS OF 129 BYTE READ/WRITE AREA
R4       EQU   4                   ADDRESS OF RBA (RELATIVE BLOCK
*                                     ADDRESS) OF DESIRED BLOCK
R5       EQU   5                   WORK REGISTER
R6       EQU   6                   RESERVED FOR MAINTENANCE
R7       EQU   7                   ADDRESS OF PARAMETER LIST
R8       EQU   8                   WORK REGISTER
R9       EQU   9                   BASE REG FOR VARIOUS CONTROL BLOCKS
R10      EQU   10                  BASE REGISTER FOR DSECT FOR DCB
R11      EQU   11                  BASE REGISTER FOR CSECT
R12      EQU   12                  BASE REGISTER FOR DATA AREA DSECT
R13      EQU   13                  ADDRESS OF THIS ROUTINE'S SAVE AREA
R14      EQU   14                  ADDRESS OF CALLING ROUTINE RETURN
R15      EQU   15                  RETURN CODE                        *
         EJECT
*                                                                     *
*                                                                     *
*/*           P  SAVE REGISTER CONTENTS */
         SAVE  (14,12)             SAVE ALL REGISTERS
         LR    R7,R1               SAVE ADDRESS OF PARMLIST IN REG7
         LR    R11,R15             R11 = ADDRESS IEEVSND5 CSECT
*/*           P  ESTABLISH ADDRESSIBILITY FOR CSECT */
         USING IEEVSND5,R11        SET ADDRESSABILITY FOR CSECT
         MODID  BRANCH=YES                                       Y01886
         LA    R5,DATAEND-DATABEG  R5 = LENGTH OF DATA AREA FOR GETMAIN
         SLL   R5,LENG8            SHIFT GETMAIN LENGTH
         LA    R4,SP252            REG4 = SUBPOOL INDICATOR = 252
         SRDL  R4,LENG8            GET SUBPOOL IN HI ORDER BYTE
*                                  OF REG5.   LENGTH IN LO ORDER
         LR    R0,R5               SET R0 FOR GETMAIN
         GETMAIN  R,LV=(0)         GET CORE FOR WORK AREA
         LR    R12,R1              MOVE ADDR OF GOTTEN CORE TO REG 12
         USING DATABEG,R12         SET ADDRESSABILITY FOR DATA AREA
         ST    R13,SAVER+OFFCALLR  SAVE ADDRESS OF CALLER'S SAVE AREA
         LR    R5,R13              GET ADDRESS CALLERS SAVE AREA
         LA    R13,SAVER           R13 = ADDR THIS RTN'S SAVE AREA
         ST    R13,OFFCALLD(R5)    SAVE ADDRESS OF THIS RTN'S SAVE AREA
         MVC   DECB1(LISTSL),DEC01 MOVE LISTS FOR MACRO INSTRUCTIONS
*                                  INTO GOTTEN CORE (DSECT)
         USING IHADCB,R10          ESTABLISH ADDRESSABILITY FOR IHADCB
         USING SDIOPARM,R7         SET ADDRESSABILITY FOR PARMLIST DSEC
         EJECT
TESTREAD DS    0H                  READ BY BLOCK ID
*/*TESTREAD:  D  (YES,,NO,TESTWRDI) IS READ REQUESTED */
         TM    PARM1,P1READ        IS READ REQUESTED
         BZ    TESTWRDI            NO, BRANCH
*/*           P  GET DCB PTR FROM PARM LIST */
         L     R10,PARMDCB         R10 = ADDRESS OF DCB FROM PARM
         L     R3,PARMIOAD         SET AREA ADDRESS FROM PARM LIST
         L     R4,PARMRBA          SET BLOCK ID (RBA) FROM PARM LIST
*/*           I  READ REQ'D RECORD */
         READ  DECB1,DIF,(R10),(R3),'S',0,(R4),MF=E  READ A RECORD
         CHECK DECB1               CHECK THE READ
         MVC   PARMFDBK(L'PARMFDBK),RECPOS(R4)   PUT FEEDBACK OF RECORD
*                                  POSITION ON TRACK INTO PARM LIST
*/*           P  (,ENDIO) RETURN CODE= 0 SUCCESSFUL PROCESSING */
         XC    RETCODE,RETCODE     SET RETCODE = 0 FOR OPERATION DONE
         B     ENDIO               END OF PROCESSING
         EJECT
TESTWRDI DS    0H                  WRITE BY BLOCK ID
*/*TESTWRDI:  D  (YES,,NO,TESTWRDA) IS WRITE 'DI' REQUESTED */
         TM    PARM2,P2WRDI        IS WRITE 'DI' REQUESTED
         BZ    TESTWRDA            NO, BRANCH
*/*           P  GET DCB PTR FROM PARM LIST */
         L     R10,PARMDCB         R10 = ADDRESS OF DCB FROM PARM
         L     R3,PARMIOAD         SET AREA ADDRESS FROM PARMLIST
         L     R4,PARMRBA          SET BLOCK ID (RBA) FROM PARMLIST
         MVC   KEY(L'PARMKEY),PARMKEY   SET KEY FROM PARMLIST
*/*           D  (NO,,YES,NOTDEL) IS WRITE A DELETION */
         TM    PARM2,P2DEL         TEST IF THIS WRITE IS A DELETION
         BNO   NOTDEL              NO, BRANCH AROUND FIRST BYTE SETTING
*/*           P  SET 1ST BYTE DATA = RECORD POSITION ON TRACK */
         MVC   0(L'PARMFDBK,R3),PARMFDBK  PUT POSITION OF RECORD ON
*                                  TRACK INTO FIRST BYTE OF DATA RECORD
*                                  TO SHOW 'AVAILABLE' TO BDAM
NOTDEL   DS    0H                  THIS WRITE IS NOT FOR A DELETION
*/*NOTDEL:    I  WRITE REQ'D RECORD */
         WRITE DECB2,DI,(R10),(R3),'S',KEY,(R4),MF=E  WRITE A RECORD
*                                                     BY BLOCK ID (RBA)
         CHECK DECB2               CHECK WRITE
*/*           P  (,ENDIO) RETURN CODE= 0 SUCCESSFUL PROCESSING */
         XC    RETCODE,RETCODE     SET RETCODE = 0 FOR OPERATION DONE
         B     ENDIO               END OF PROCESSING
         SPACE 4
TESTWRDA DS    0H                  WRITE 'DA'
*/*TESTWRDA:  D  (YES,,NO,TESTCLOS) IS WRITE 'DA' REQUESTED */
         TM    PARM2,P2WRDAF       IS WRITE 'DA' REQUESTED
         BZ    TESTCLOS            NO, BRANCH
*/*           P  GET DCB PTR FROM PARM LIST */
         L     R10,PARMDCB         R10 = ADDRESS OF DCB FROM PARM
         LA    R5,SYNWRDA          R5 = ADDR SPECIAL SYNAD RTN
         ST    R5,WORK4            CHANGE SYNAD ROUTINE ADDRESS IN DCB
         MVC   DCBSYNAD+NEXT(RBAL),WORK4+NEXT  PUT SYNAD ADDR IN DCB
*/*           P  SET LIMIT OF RECORDS TO BE SEARCHED TO FIND AVAILABLE
*/*SPACE */
         MVC   DCBLIMCT+NEXT(HALF),PARMLMCT+HALF  SET LIMIT COUNT IN
*                                  DCB FOR EXTENDED SEARCH
*                                  TO NO. RECORDS IN DAT SET FROM REC 1
         L     R3,PARMIOAD         SET AREA ADDR FROM PARMLIST
         L     R4,PARMRBA          SET BLOCK ID FROM PARMLIST
         MVC   KEY(L'PARMKEY),PARMKEY   SET KEY FROM PARMLIST
*/*           I  WRITE REQ'D RECORD */
         WRITE DECB3,DAF,(R10),(R3),'S',KEY,(R4),MF=E WRITE RECORD
         CHECK DECB3               CHECK THE WRITE
*                                  R4 = ADDRESS OF FEEDBACK RBA.
*                                  PUT FEEDBACK RBA INTO PARM LIST
         MVC   PARMRBA+NEXT(RBAL),ZER(R4)
         LA    R5,SYNAD1
         ST    R5,WORK4            CHANGE SYNAD ROUTINE ADDRESS IN DCB
         MVC   DCBSYNAD+NEXT(RBAL),WORK4+NEXT PUT SYNAD ADDR IN DCB
*/*           P  (,ENDIO) RETURN CODE= 0 SUCCESSFUL PROCESSING */
         XC    RETCODE,RETCODE     SET RETCODE = 0 FOR OPERATION DONE
         B     ENDIO               END OF PROCESSING
         EJECT
TESTCLOS DS    0H                  CLOSE
*/*TESTCLOS:  D  (YES,,NO,ENDIO) IS CLOSE REQUESTED */
         TM    PARM2,P2CLOSE       IS CLOSE REQUESTED
         BZ    ENDIO               NO, BRANCH
*                                  CLOSE SYS1.BRODCAST DATA SET
*/*           P  GET DCB PTR FROM PARM LIST */
         L     R10,PARMDCB         R10 = ADDRESS OF DCB FROM PARM
*/*           I  CLOSE BROADCAST DATA SET */
         CLOSE  ((R10)),MF=(E,CLOSEL)  CLOSE DATA SET
*/*           P  (,ENDIO) RETURN CODE= 0 SUCCESSFUL PROCESSING */
         XC    RETCODE,RETCODE     SET RETCODE = 0 FOR OPERATION DONE
FREEDCB  DS    0H                  FREE CORE GOTTEN FOR DCB
         LA    R5,DCBEND-IHADCB    R5 = LENGTH TO BE FREED
*/*FREEDCB:   P  FREEMAIN CORE FOR DCB */
         LA    R2,SP0              SET SUBPOOL INDICATOR FOR 0
         FREEMAIN  R,LV=(R5),A=(R10),SP=(R2) FREE CORE FOR DCB
*
*     CHECK IF JFCB CORE WAS GOTTEN VIA GETMAIN AND MUST BE FREED.
*
*/*           D   (YES,,NO,NOJFCB) WAS CORE GOTTEN FOR JFCB */
         TM    PARM2,P2JFCB        MUST JFCB CORE BE FREED?
         BZ    NOJFCB              NO, BRANCH AROUND FREEMAIN
*/*           P   FREE CORE FOR JFCB */
         L     R5,PARMJFCB         R5 = ADDRESS OF JFCB FROM PARM LIST
         LA    R8,JFCBLNG          R8 = JFCB LENGTH FOR FREEMAIN
         FREEMAIN  R,LV=(R8),A=(R5),SP=0    FREE CORE FOR JFCB
NOJFCB   DS    0H                  JFCB CORE HAS BEEN FREED
*/*NOJFCB:    P  (,ENDIO) DO CLEANUP PROCESSING */
         B     ENDIO               END OF PROCESSING
         EJECT
*/*ENDIO:     P  RELOAD CALLER REGISTERS */
ENDIO    DS    0H                  EXIT CODE
         L     R13,SAVER+OFFCALLR  RELOAD R13 WITH CALLER SAVE AREA ADD
         SR    R14,R14             CLEAR REG 14
         IC    R14,RETCODE         SAVE RETURN CODE IN REG 14
*                                  BEFORE ISSUING FREEMAIN
         LA    R8,DATAEND-DATABEG  SET R8 FOR FREEMAIN FOR WORK AREA
*        R12 HAS ADDRESS OF WORK AREA GOTTEN VIA GETMAIN
*/*           P  FREEMAIN CORE FOR WORK DSECT */
         LA    R6,SP252            LOAD SUBPOOL NUMBER
         FREEMAIN  R,LV=(R8),A=(R12),SP=(R6)   FREE CORE FOR WORK AREA
         LM    R0,R12,OFF0(R13)    RELOAD REGS ZERO THRU 12
*/*           P  PUT RETURN CODE IN REG 15 */
         LR    R15,R14             PUT RETURN CODE INTO REG 15
         L     R14,OFF14(R13)      RELOAD REG 14 FROM SAVEAREA
*/*           R  RETURN TO CALLER */
         BR    R14                 RETURN TO CALLER
         SPACE 4
*                                                                     *
*/*SYNWRDA:   P  SET PTR TO SYNAD RTN */
SYNWRDA  DS    0H                  SYNAD ROUTINE FOR WRITE 'DAF' TYPE
         LA    R5,SYNAD1           R5 = SYNAD ROUTINE ADDR
         ST    R5,WORK4            CHANGE SYNAD ROUTINE ADDRESS IN DCB
         MVC   DCBSYNAD+NEXT(RBAL),WORK4+NEXT PUT SYNAD ADDR IN DCB
         LR    R5,R0               REG0 = ADDRESS OF DECB
*/*           D  (YES,SYNAD1,NO,) IS ECB = 'SPACE NOT FOUND' */
         TM    NEXT(R5),ECBSPAC    TEST ECB FOR 'SPACE NOT FOUND'
         BNO   SYNAD1              IF OFF, BRANCH
*/*           P  (,ENDIO) SET RETURN CODE FOR 'DATA SET FULL' */
         OI    RETCODE,DSFULL      SET RETURN FOR DATA SET FULL
         B     ENDIO               END OF PROCESSING
         SPACE 4
*/*SYNAD1:    D  (YES,,NO,SYNA) I/O ERROR? */
SYNAD1   DS    0H                  SYNAD ROUTINE
         LR    R5,R0               REG0 = ADDRESS OF DECB
         TM    NEXT(R5),ECBIOERR   TEST ECB FOR IO ERROR
         BNO   SYNA                NO, BRANCH TO SET RETURN CODE
*/*           P  (,ENDIO) SET RETURN CODE FOR IO ERROR */
         OI    RETCODE,IOERR       SET RETURN CODE TO IO ERROR
         B     ENDIO               END OF PROCESSING
*                                                                     *
*/*SYNA:      P  (,ENDIO) SET RETURN CODE TO 'SEND ERROR' */
SYNA     DS    0H                  PROBLEM IN SEND PROCESSOR
         OI    RETCODE,SDERR       SET RETURN CODE FOR 'SEND ERROR'
         B     ENDIO               END OF PROCESSING
*                                                                     *
         SPACE 2
*/*BADGETM:   P  RELOAD REGISTER CONTENTS */
BADGETM  DS    0H                  UNSUCCESSFUL GETMAIN
         LM    R14,R12,OFF14(R13)  RELOAD REGS
*/*           R  RETURN TO CALLER */
         LA    R15,NOCORE          SET RETURN CODE
         BR    R14                 RETURN TO CALLER
         EJECT
JFCBLNG  EQU   176                 LENGTH OF JFCB
SP252    EQU   252                 INDICATOR FOR SUBPOOL 252
SP0      EQU   0                   INDICATOR OF SUBPOOL 0
R1RBA    DC    X'000000'           RELATIVE BLOCK ADDR OF FIRST RECORD
         EJECT
ZER      EQU   0                   USED FOR OFFSET OF ZERO
NEXT     EQU   1                   USED AS INCREMENT VALUE
HALF     EQU   2                   USED TO GET TO HALF WORD BDY
RBAL     EQU   3                   RELATIVE BLOCK ADDRESS LENGTH
OFFCALLR EQU   4                   OFFSET IN MY SAVE AREA TO ADDR OF
*                                  CALLER'S SAVE AREA
RECPOS   EQU   7                   POSITION OF RECORD BYTE IN
*                                  2-WORD FEEDBACK AREA AFTER READ
OFFCALLD EQU   8                   OFFSET IN SAVE AREA TO CALLED ADDR
LENG8    EQU   8                   LENGTH OF 8 BYTES FOR REG SHIFT
OFF0     EQU   20                  OFFSET TO REG0 IN SAVE AREA
OFF14    EQU   12                  OFFSET TO REG14 IN SAVE AREA
         EJECT
***********************************************************************
*                                                                     *
*  THE FOLLOWING ARE EXCEPTION CODE BIT SETTINGS IN ECB+1 WHICH ARE
*  TESTED IN THE SYNAD ROUTINES.
*                                                                     *
***********************************************************************
*                                                                     *
ECBRECL  EQU   X'40'               RECORD LENGTH CHECK
ECBSPAC  EQU   X'20'               SPACE NOT FOUND TO WRITE REC
ECBIOERR EQU   X'08'               UNCORRECTABLE I/O ERROR
         SPACE 2
***********************************************************************
*                                                                     *
*        THE FOLLOWING ARE USED TO SET THE RETURN CODE FOR CALLER     *
*                                                                     *
***********************************************************************
SDERR    EQU   X'80'               ERROR IN 'SEND' PROCESSOR
NOCORE   EQU   X'40'               NOT ENOUGH CORE FOR IO RTN
IOERR    EQU   X'08'               I/O ERROR - SYNAD ENTERED
NOTMNT   EQU   X'04'               BROADCAST VOLUME NOT MOUNTED
OPENERR  EQU   X'02'               ERROR OCCURRED DURING OPEN
DSFULL   EQU   X'01'               DATA SET FULL  ON   WRITE 'DA'
*                                                                     *
*                                                                     *
*                                                                     *
         EJECT
*                                                                     *
*        THE FOLLOWING ARE LIST FORMS OF MACROS WHICH ARE MOVED TO    *
*        GOTTEN CORE AT EXECUTION TIME.                               *
*        THE ORDER OF THE MACROS MUST, MUST NOT BE CHANGED            *
*                                                                     *
         READ  DEC01,DIF,,,,,,MF=L  READ BY BLOCK ID (RBA) LIST
         WRITE DEC02,DI,,,,,,MF=L  WRITE BY BLOCK ID (REL. BLOCK ADDR)
         WRITE DEC03,DAF,,,,,,MF=L WRITE TO ADD A RECORD W/FEEDBACK
         CLOSE (0),MF=L            CLOSE LIST FORM
         GETMAIN  EC,MF=L          GETMAIN LIST FORM
LISTSEND EQU   *                   END OF LISTS FOR MACRO INSTRUCTIONS
*                                  TO BE USED TO MOVE INTO DSECT
LISTSL   EQU   LISTSEND-DEC01      LENGTH OF LISTS FOR MACRO INSTRUCT.
         EJECT
***********************************************************************
*                                                                     *
*        DSECT FOR PARAMETER LIST FROM CALLER                         *
*                                                                     *
***********************************************************************
*                                                                     *
SDIOPARM DSECT                     DSECT FOR PARM LIST FROM IEEVSEND
*
PARM1    DS    1C                  FLAG1 FOR OPERATIONS TO BE PERFORMED
P1OPEN   EQU   X'80'               OPEN - INITIAL FORMATTING IF FIRST
*                                       TIME DATA SET HAS BEEN USED
P1READ   EQU   X'40'               READ SPECIFIED RECORD
P1OPENIN EQU   X'20'               OPEN DATA SET FOR INPUT
*                                                                     *
*                                                                     *
PARM2    DS    1C                  FLAG2 FOR OPERATIONS TO BE PERFORMED
P2WRDI   EQU   X'80'               WRITE SPECIFIED RECORD BY BLOCK ID
P2WRDAF  EQU   X'40'               WRITE SPECIFIED RECORD IN NEXT
*                                       AVAILABLE SPACE WITH FEEDBACK
P2CLOSE  EQU   X'20'               CLOSE
P2DEL    EQU   X'10'               DELETION OF THIS RECORD.
*                                  PUT PARMFDBK INTO FIRST BYTE OF DATA
P2JFCB   EQU   X'08'               FREE CORE FOR JFCB
PARMKEY  DS    C                   KEY FOR READ/WRITE INSTRUCTION
PARMFDBK DS    C                   FEEDBACK FROM READ - POSITION
*                                  OF RECORD ON TRACK.  PUT INTO
*                                  FIRST BYTE OF DATA FOR DELETE
PARMRBA  DS    F                   ADDRESS OF RBA FOR READ/WRITE
PARMIOAD DS    F                   ADDRESS OF BUFFER FOR IO INSTRUCTION
PARMDDNM DS    CL8                 DDNAME FOR BROADCAST DATA SET
*        THE FOLLOWING FIELDS ARE NEVER CLEARED FROM PARM LIST
PARMLMCT DS    F                   LIMIT COUNT FOR EXTENDED SEARCH
PARMDCB  DS    F                   ADDRESS OF DCB
PARMJFCB DS    F                   ADDRESS OF JFCB
         EJECT
***********************************************************************
*                                                                     *
DATABEG  DSECT                     DSECT FOR    WORK DATA AREA
         READ  DECB1,DIF,,,,,,MF=L  READ BY BLOCK ID (RBA) LIST
         WRITE DECB2,DI,,,,,,MF=L  WRITE BY BLOCK ID (REL. BLOCK ADDR)
         WRITE DECB3,DAF,,,,,,MF=L WRITE TO ADD A RECORD W/FEEDBACK
CLOSEL   CLOSE (0),MF=L            CLOSE LIST FORM
GETML    GETMAIN  EC,MF=L          GETMAIN LIST FORM
         EJECT
SAVER    DS    18F                 REGISTER SAVE AREA
WORK4    DS    F                   FULL WORD WORK AREA
KEY      DS    C                   KEY FOR READ / WRITE OPERATIONS
RETCODE  DS    C                   RETURN CODE TO BE PLACE IN REG15
         SPACE 4
DATAEND  DS    0H                  END OF WORK DATA AREA
*                                                                     *
***********************************************************************
         EJECT
         DCBD  DSORG=DA,DEVD=DA
DCBEND   EQU   *                   END OF DCB
DCBLNG   EQU   DCBEND-IHADCB       LENGTH OF DCB TO USE IN GETMAIN
*                                                                     *
*/*IEEVSND5:  END END OF IEEVSND5 */
         END
