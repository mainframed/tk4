         TITLE 'IEEVSEND - OPERATOR SEND COMMAND INITIALIZATION        *
                       '
IEEVSEND CSECT ,                                                   0001
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         LR    @10,@01                                             0001
         L     @00,@SIZDATD                                        0001
         GETMAIN R,LV=(0)
         LR    @12,@01                                             0001
         USING @DATD,@12                                           0001
         LR    @01,@10                                             0001
         ST    @13,@SA00001+4                                      0001
         LR    @13,@12                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MVC   @PC00001(4),0(@01)                                  0001
         MODID BRANCH=YES
REGS     DS    0H                                                  0038
*                                      RESTRICT REG 2  FOR INTERFACE
*                                      LIST TO STAE ROUTINE   Y01043 */
*         R1SAV   = R1;             /* SAVE ADDR SEND CSCB FROM REG1 */
         ST    R1,R1SAV                                            0048
*         R14SAV  = R14;            /* SAVE RETURN ADDRESS    Y01043 */
         ST    R14,R14SAV                                          0049
*         R0 = PARMAR;              /* MOVE SP AND LENGTH FOR GETMAIN
*                                      INTO REG 0             Y01043 */
         L     R0,PARMAR                                           0050
*        GEN(GETMAIN R,LV=(0));     /* GET CORE FOR STAE INTERFACE 0051
*                                      LIST                   Y01043 */
         GETMAIN R,LV=(0)
*        REG2 = REG1;               /* SET BASE TO AREA       Y01043 */
         LR    REG2,REG1                                           0052
*        COMMAND = ADDR(COMMNAME);  /* SET ADDR OF COMMANDNAME Y01043*/
         LA    @10,COMMNAME                                        0053
         ST    @10,COMMAND(,REG2)                                  0053
*        CSCBADR = R1SAV;           /* SET ADDR OF CSCB       Y01043 */
         MVC   CSCBADR(4,REG2),R1SAV                               0054
*        BASEADR = R11;             /* SAVE BASE ADDRESS      Y01043 */
         ST    R11,BASEADR(,REG2)                                  0055
*        COMAREA = R12;             /* SAVE ADDRESS OF DATA        0056
*                                      AREA                   Y01043 */
         ST    R12,COMAREA(,REG2)                                  0056
*        GEN(LOAD EP=IEECB860);     /* LOAD STAE ROUTINE      Y01043 */
         LOAD EP=IEECB860
*        R15 = R0;                  /* SET UP FOR BALR        Y01043 */
         LR    R15,R0                                              0058
*        REG1  = REG2;              /* INITIALIZE INTERFACE LIST   0059
*                                      ADDR                   Y01043 */
         LR    REG1,REG2                                           0059
*        GEN(BALR   14,15);         /* INVOKE STAE MODULE     Y01043 */
         BALR   14,15
*        RESTRICT (R6);             /* RESTRICT REG 6 FOR RETURN   0061
*                                      CODE FROM STAE         Y01043 */
*        R6 = R15;                  /* SAVE STAE RETURN CODE  Y01043 */
         LR    R6,R15                                              0062
*        R11 = REG1->BASEADR;       /* RESTORE BASE ADDRESS   Y01043 */
         L     R11,BASEADR(,REG1)                                  0063
*        R12 = REG1->COMAREA;       /* RESTORE DATA AREA ADDRESS   0064
*                                                             Y01043 */
         L     R12,COMAREA(,REG1)                                  0064
*        R0 = PARMAR;               /* MOVE SP AND LENGTH OF STAE  0065
*                                      AREA INTO REG 0 FOR FREEMAIN
*                                                             Y01043 */
         L     R0,PARMAR                                           0065
*        GEN(FREEMAIN R,LV=(0),A=(1));                             0066
         FREEMAIN R,LV=(0),A=(1)
*        IF R6 ^= 0                 /* WAS STAE SET UP?       Y01043 */
*          THEN                     /* YES,CONTINUE TO PROCESS Y01043*/
         LTR   R6,R6                                               0067
         BZ    @RF00067                                            0067
*            DO;                    /* NO, CLEANUP AND RETURN Y01043 */
*                                   /* DELETE THE STAE ROUTINE Y01043*/
*              GEN(DELETE EP=IEECB860); /*                    Y01043 */
         DELETE EP=IEECB860
*              GOTO EXITCODE;       /* EXIT QUICKLY                  */
         B     EXITCODE                                            0070
*            END;                   /*                        Y01043 */
*         RELEASE (R6);             /*                        Y01043 */
@RF00067 DS    0H                                                  0073
*         RELEASE (REG2);                                          0073
*  /*     GET CORE FOR COMMON DATA AREA TO BE USED BY                */
*  /*     OPERATOR SEND PROCESSING MODULES.                          */
*         R5 = LENGTH(COMMON);      /* SET REG 0 TO LENGTH OF COMMON
*                                      DATA AREA FOR USE IN GETMAIN  */
         LA    R5,484                                              0074
*         GEN (GETMAIN R,LV=(R5));  /* OBTAIN 'COMMON'               */
         GETMAIN R,LV=(R5)
*         COMPTR = R1;              /* SET 'COMMON' BASE             */
*                                                                  0076
         LR    COMPTR,R1                                           0076
*         COMMONA = COMMONA && COMMONA; /* CLEAR FIRST SECTION OF  0077
*                                          COMMON DATA AREA          */
         XC    COMMONA(160,COMPTR),COMMONA(COMPTR)                 0077
*         COMMONB = COMMONB && COMMONB; /* CLEAR SECOND SECTION OF 0078
*                                          COMMON DATA AREA          */
         XC    COMMONB(124,COMPTR),COMMONB(COMPTR)                 0078
*         COMMONC = COMMONC && COMMONC; /* CLEAR THIRD SECTION OF  0079
*                                          COMMON DATA AREA          */
         XC    COMMONC(200,COMPTR),COMMONC(COMPTR)                 0079
*         CSCBPTR = R1SAV;          /* SAVE CSCB ADDR IN COMMON      */
         MVC   CSCBPTR(3,COMPTR),R1SAV+1                           0080
*         RETVATT1 = R14SAV;        /* SAVE RETURN ADDR IN COMMON    */
         MVC   RETVATT1(3,COMPTR),R14SAV+1                         0081
*         GEN(EJECT);                                              0082
         EJECT
*/*                                                                  */
*/*       THE SYNTAX OF THE COMMAND IS:                              */
*/*              -                                       -           */
*/*             (                                         )          */
*/*             (         ×-                           -× )          */
*/*             (         ×                   ×-     -× × )          */
*/*             (         ×,ALL               ×,NOW   × × )          */
*/*             (         ×                   ×,LOGON × × )          */
*/*             (         ×,USER=(USERID LIST)×,SAVE  × × )          */
*/*             ( 'TEXT'  ×                   ×-     -× × )          */
*/*             (         ×                             × )          */
*/*             (         ×,BRDCST                      × )          */
*/*             (         ×                             × )          */
*/*             (         ×,OPERATOR=ROUTE CODE         × )          */
*/*             ( MESSAGE ×                             × )          */
*/*       SEND -( NUMBER  ×,CN=CONSOLE ID               × )-         */
*/*        OR   (         ×-                           -× )          */
*/*        SE   (                                         )          */
*/*             (         ×-     -×                       )          */
*/*             ( MESSAGE ×,LIST  ×                       )          */
*/*             ( NUMBER  ×,DELETE×                       )          */
*/*             (         ×-     -×                       )          */
*/*             ( LIST                                               */
*/*             (                                         )          */
*/*              -                                       -           */
*/*       ''TEXT'', 'MESSAGE NUMBER', OR 'LIST' MUST BE SPECIFIED.   */
*/*       DEFAULTS ARE 'ALL' AND 'NOW'.                              */
*/*                                                                  */
*        GEN(EJECT);                                               0083
         EJECT
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*      SCAN COMMAND BUFFER FOR PARAMETERS.                        */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*         KOMBUF= CHBUF;            /* MOVE COMMAND IMAGE FROM CSCB
*                                      TO BUFFER DATA AREA. QUOTES 0084
*                                      REMOVED HERE NOT IN CHBUF     */
         MVI   KOMBUF+124,C' '                                     0084
         L     @10,CSCBPTR-1(,COMPTR)                              0084
         LA    @10,0(,@10)                                         0084
         MVC   KOMBUF(124),CHBUF(@10)                              0084
*         /* SCAN COMMAND BUFFER TO FIRST NON-BLANK CHARACTER        */
*         I = 1;                    /* INIT. INDEX TO CIB(COMBUF)    */
         LA    I,1                                                 0085
*         DO I = I TO CBLENG;       /* SCAN TO FIRST NONBLANK CHAR   */
         B     @DE00086                                            0086
@DL00086 DS    0H                                                  0087
*           IF KOMBUF(I) ^= ' '     /* IS CHAR A NONBLANK            */
*             THEN                                                 0087
         LA    @10,KOMBUF-1(I)                                     0087
         CLI   0(@10),C' '                                         0087
         BNE   @RT00087                                            0087
*               GOTO SCAN1;         /* YES, EXIT LOOP                */
*         END;                                                     0089
         AH    I,@CH00047                                          0089
@DE00086 MVC   @ZT00003+3(1),CBLENG                                0089
         C     I,@ZT00003                                          0089
         BNH   @DL00086                                            0089
*         GOTO ERRSYN;              /* IF COMMAND BUFFER IS ALL BLANKS,
*                                      GIVE  'SYNTAX ERROR' MSG      */
         B     ERRSYN                                              0090
* SCAN1:                  /* CHECK FIRST CHARACTER IN COMMAND BUF    */
*         IF KOMBUF(I) = ''''       /* CHECK FIRST CHAR FOR A QUOTE  */
*           THEN                    /* YES, QUOTE FOUND              */
SCAN1    LA    @10,KOMBUF-1(I)                                     0091
         CLI   0(@10),C''''                                        0091
         BE    @RT00091                                            0091
*             GOTO TEXT;            /* GOTO CONTINUE SYNTAX SCAN     */
*         IF KOMBUF(I:I+3) = 'LIST' /* IS 'LIST' SPECIFIED           */
*           THEN                    /* YES, 'LIST' SPECIFIED         */
         LA    @10,KOMBUF-1(I)                                     0093
         CLC   0(4,@10),@CC00361                                   0093
         BNE   @RF00093                                            0093
*             DO;                                                  0094
*               FLIST = '1'B;       /* INDICATE 'LIST' SPEC'D        */
*               FLISTALL = '1'B;    /* INDICATE ALL NOTICES          */
         OI    FLIST(COMPTR),B'01100000'                           0096
*               I = I + 4;          /* STEP OVER KEYWORD             */
         AH    I,@CH00135                                          0097
*               GOTO OUTSCAN;       /* CHECK FINAL BYTE              */
         B     OUTSCAN                                             0098
*             END;                                                 0099
* /* IF NEITHER 'LIST' NOR TEXT IS SPECIFIED, ASSUME COMMAND IS IN   */
* /* MESSAGE NUMBER FORM                                             */
*         FMN = '1'B;               /* SET FLAG FOR MSG NO. FORMAT   */
@RF00093 OI    FMN(COMPTR),B'00010000'                             0100
*         J = 1;                    /* SET INDEX TO WORKER           */
         MVI   J,X'01'                                             0101
*         WORKER = WORKER && WORKER;/* CLEAR WORK AREA               */
         XC    WORKER(4),WORKER                                    0102
*         /* SCAN PAST LEADING ZEROES IN THE 'MSGNO' FIELD           */
*         DO I = I TO CBLENG;       /* LOOP TO SCAN PAST LEADING 0'S */
         B     @DE00103                                            0103
@DL00103 DS    0H                                                  0104
*           IF KOMBUF(I) ^= '0'     /* IS THIS CHAR A NON-ZERO?      */
*             THEN                  /* YES, NOT A LEADING ZERO       */
         LA    @10,KOMBUF-1(I)                                     0104
         CLI   0(@10),C'0'                                         0104
         BE    @RF00104                                            0104
*               DO;                 /* PREPARE FOR MSG NO. LOOP M1882*/
*                 MAXMSGLN = I+3;   /* SET LIMITING 'TO' VALUE FOR 0106
*                                      MSG LENGTH TO 4 DIGITS   M1882*/
         LA    @10,3                                               0106
         AR    @10,I                                               0106
         ST    @10,MAXMSGLN                                        0106
*                 GOTO MSGNOLP;     /* EXIT THIS SCAN LOOP           */
         B     MSGNOLP                                             0107
*               END;                /* END DO GROUP FOR 1ST DIGIT OF
*                                        MSG NO.                M1882*/
*             ELSE;                 /* NO, IT IS A LEADING ZERO,   0109
*                                        LOOP TO SCAN NEXT CHAR      */
@RF00104 DS    0H                                                  0110
*         END;                      /* END OF LOOP FOR LEADING 0'S   */
         AH    I,@CH00047                                          0110
@DE00103 MVC   @ZT00003+3(1),CBLENG                                0110
         C     I,@ZT00003                                          0110
         BNH   @DL00103                                            0110
*         GOTO ERRSYN;              /* GIVE 'SYNTAX ERROR' MSG       */
*                                                                  0111
         B     ERRSYN                                              0111
* MSGNOLP: DO I = I TO MAXMSGLN;    /* LOOP TO MOVE MSG NO. TO WORK
*                                      AREA                     M1882*/
MSGNOLP  B     @DE00112                                            0112
@DL00112 DS    0H                                                  0113
*         IF KOMBUF(I) > 'EF'X THEN /* IS THIS BYTE PART OF MSGNO    */
         LA    @10,KOMBUF-1(I)                                     0113
         CLI   0(@10),X'EF'                                        0113
         BNH   @RF00113                                            0113
*           DO;                     /* YES,                          */
*           WORKER(J) = KOMBUF(I);  /* MOVE DIGIT TO WORK AREA       */
         SR    @10,@10                                             0115
         IC    @10,J                                               0115
         LA    @02,WORKER-1(@10)                                   0115
         LA    @01,KOMBUF-1(I)                                     0115
         MVC   0(1,@02),0(@01)                                     0115
*           J = J+1;                /* BUMP INDEX TO NEXT BYTE       */
         AH    @10,@CH00047                                        0116
         STC   @10,J                                               0116
*           END;                                                   0117
*         ELSE                                                     0118
*           GOTO OUT2;              /* END OF MSGNO                  */
*         END;                                                     0119
         AH    I,@CH00047                                          0119
@DE00112 C     I,MAXMSGLN                                          0119
         BNH   @DL00112                                            0119
*                                   /* MSG NUMBER IS CONVERTED TO HEX*/
* OUT2:                             /* RIGHT ALIGN MSGNO IN WORKAREA */
*         IF J = 1                  /* CHECK IF A VALID DIGIT        */
*           THEN                    /* NO DIGIT WAS SPEC'D           */
OUT2     CLI   J,1                                                 0120
         BE    @RT00120                                            0120
*             GOTO ERRSYN;          /* SYNTAX ERROR, GIVE WARNING    */
*             J=J-1;                /* J = NO. DIGITS IN MSG NO.     */
         SR    @10,@10                                             0122
         IC    @10,J                                               0122
         BCTR  @10,0                                               0122
         STC   @10,J                                               0122
*             WORK8 = WORK8 && WORK8;/* CLEAR WORK AREA              */
         XC    WORK8(8),WORK8                                      0123
*             Z = 9-J;              /* SET 'TO' VALUE  FOR DO LOOP   */
         LCR   @10,@10                                             0124
         AH    @10,@CH00299                                        0124
         STC   @10,Z                                               0124
*             DO K = 8 TO Z BY -1;  /* MOVE MSGNO TO WORK AREA       */
         LA    @10,8                                               0125
         STC   @10,K                                               0125
         B     @DE00125                                            0125
@DL00125 DS    0H                                                  0126
*               WORK8(K) = WORKER(J);/* MOVE 1 CHAR OF MSGNO         */
         LA    @02,WORK8-1(@10)                                    0126
         SR    @15,@15                                             0126
         IC    @15,J                                               0126
         LA    @14,WORKER-1(@15)                                   0126
         MVC   0(1,@02),0(@14)                                     0126
*               J=J-1;              /* DECREMENT WORKAREA POINTER    */
         BCTR  @15,0                                               0127
         STC   @15,J                                               0127
*             END;                                                 0128
         BCTR  @10,0                                               0128
         STC   @10,K                                               0128
@DE00125 MVC   @ZT00003+3(1),Z                                     0128
         C     @10,@ZT00003                                        0128
         BNL   @DL00125                                            0128
*         GEN;                                                     0129
          PACK  WORK8(8),WORK8(8)   PACK THE MSG NUMBER
          CVB   R5,WORK8            CONVERT MSG NO. TO BINARY
          STH   R5,MSGNO            STORE MESSAGE NUMBER
*         CBCMSGNO = MSGNO;         /* SAVE MSGNO IN COMMON          */
         MVC   CBCMSGNO(2,COMPTR),MSGNO                            0130
*         DO I = I TO CBLENG;       /* SCAN FOR ZERO OR NON-BLANK    */
         B     @DE00131                                            0131
@DL00131 DS    0H                                                  0132
*           IF KOMBUF(I) = '00'X    /* CHECK FOR END OF COMMAND BUFR */
*             THEN                  /* END OF COMMAND BUFFER         */
         LA    @10,KOMBUF-1(I)                                     0132
         CLI   0(@10),X'00'                                        0132
         BE    @RT00132                                            0132
*               GOTO ALLNOW;        /* TAKE DEFAULT OF ALL/NOW       */
*         IF KOMBUF (I) = ' '       /*CHECK FOR BLANK                */
*           THEN                    /* BLANK FOUND AFTER MSGNO       */
         LA    @10,KOMBUF-1(I)                                     0134
         CLI   0(@10),C' '                                         0134
         BE    @RT00134                                            0134
*             GOTO ALLNOW;          /* TAKE DEFAULT OF ALL/NOW       */
*               ELSE                /* NON-BLANK FOUND AFTER MSGNO   */
*                 GOTO MN02;        /* SCAN NON-BLANK CHAR           */
         B     MN02                                                0136
*         END;                      /* END OF DO LOOP                */
         AH    I,@CH00047                                          0137
@DE00131 MVC   @ZT00003+3(1),CBLENG                                0137
         C     I,@ZT00003                                          0137
         BNH   @DL00131                                            0137
*         GOTO ALLNOW;              /* TAKE DEFAULT OF ALL/NOW       */
         B     ALLNOW                                              0138
* MN02:                       /* I POINTS TO A NON-BLANK AFTER MSGNO */
*         IF KOMBUF(I) = ','        /* IS COMMA SPEC'D               */
*           THEN                    /* COMMA FOUND                   */
MN02     LA    @10,KOMBUF-1(I)                                     0139
         CLI   0(@10),C','                                         0139
         BNE   @RF00139                                            0139
*             I = I+1;              /* BUMP INDEX PAST COMMA         */
         AH    I,@CH00047                                          0140
*           ELSE                    /* INVALID CHAR AFTER MSGNO      */
*             GOTO ERRSYN;          /* SYNTAX ERROR                  */
*         IF KOMBUF(I:I+3) = 'LIST' /* IS 'LIST' SPECIFIED           */
*           THEN                    /* YES,                          */
         LA    @10,KOMBUF-1(I)                                     0142
         CLC   0(4,@10),@CC00361                                   0142
         BNE   @RF00142                                            0142
*             DO;                                                  0143
*               FLIST = '1'B;       /* INDICATE 'LIST' SPEC'D        */
         OI    FLIST(COMPTR),B'00100000'                           0144
*               I = I + 4;          /* STEP OVER KEYWORD             */
         AH    I,@CH00135                                          0145
*               GOTO OUTSCAN;       /* CHECK FINAL BYTE              */
         B     OUTSCAN                                             0146
*             END;                                                 0147
*         IF KOMBUF(I:I+5) = 'DELETE' /* IS 'DELETE' SPEC'D          */
*           THEN                    /* YES                           */
@RF00142 LA    @10,KOMBUF-1(I)                                     0148
         CLC   0(6,@10),@CC00376                                   0148
         BNE   @RF00148                                            0148
*             DO;                                                  0149
*               FDEL = '1'B;        /* INDICATE 'DELETE' SPEC'D      */
         OI    FDEL(COMPTR),B'10000000'                            0150
*               I = I + 6;          /* STEP OVER KEYWORD             */
         AH    I,@CH00377                                          0151
*               GOTO OUTSCAN;       /* CHECK LAST BYTE               */
         B     OUTSCAN                                             0152
*             END;                                                 0153
*         GOTO TE2;                 /* SCAN FOR RECIPIENT            */
         B     TE2                                                 0154
* TEXT:                           /* MSG TEXT SPEC'D ON SEND COMMAND */
*         I = I+1;                  /* BUMP INDEX TO CHAR AFTER QUOTE*/
TEXT     AH    I,@CH00047                                          0155
*         TBEG = I;                 /* SET TEXT BEGINNING INDEX      */
         STC   I,TBEG(,COMPTR)                                     0156
*  /* 'TEXTLENG' AND 'VALCNT' ARE SET TO ZERO WHEN COMMON IS CLEARED */
*  /*     SCAN COMMAND BUFFER FOR CLOSING QUOTE TO MESSAGE TEXT      */
*         DO I = I TO CBLENG;       /* SCAN FOR CLOSING QUOTE ON TEXT*/
         B     @DE00157                                            0157
@DL00157 DS    0H                                                  0158
*         IF KOMBUF(I) = ''''       /* IS CHAR A SINGLE QUOTE        */
*         THEN                                                     0158
         LA    @10,KOMBUF-1(I)                                     0158
         CLI   0(@10),C''''                                        0158
         BE    @RT00158                                            0158
*            GOTO QUOTE;            /* SINGLE QUOTE FOUND            */
*TEXT3:                  /* TEXT HAS BEEN PACKED OVER DOUBLE QUOTE   */
*         TEXTLENG = TEXTLENG+1;    /* NO, BUMP TEXT LENGTH BY 1     */
TEXT3    LA    @10,1                                               0160
         MVC   @ZT00003+3(1),TEXTLENG(COMPTR)                      0160
         A     @10,@ZT00003                                        0160
         STC   @10,TEXTLENG(,COMPTR)                               0160
*         END;                                                     0161
         AH    I,@CH00047                                          0161
@DE00157 MVC   @ZT00003+3(1),CBLENG                                0161
         C     I,@ZT00003                                          0161
         BNH   @DL00157                                            0161
*         GOTO ERRSYN;              /* SYNTAX ERROR - NO CLOSING QUOTE
*                                      FOR MESSAGE TEXT              */
         B     ERRSYN                                              0162
*QUOTE:                             /* CHECK FOR DOUBLE QUOTES       */
*        IF KOMBUF(I+1) = ''''     /* IS NEXT CHAR A QUOTE           */
*          THEN                    /* YES, DOUBLE QUOTES, REMOVE 1   */
QUOTE    LA    @10,KOMBUF(I)                                       0163
         CLI   0(@10),C''''                                        0163
         BNE   @RF00163                                            0163
*            DO;                   /* SHIFT BUFFER 1 BYTE TO LEFT    */
*              KOMBUF (I:CBLENG-1) = KOMBUF (I+1:CBLENG);          0165
         LA    @10,KOMBUF-1(I)                                     0165
         SR    @02,@02                                             0165
         IC    @02,CBLENG                                          0165
         LR    @15,@02                                             0165
         SR    @15,I                                               0165
         BCTR  @15,0                                               0165
         LA    @01,KOMBUF(I)                                       0165
         EX    @15,@SM00474                                        0165
*              KOMBUF(CBLENG) = KOMBUF(CBLENG) && KOMBUF (CBLENG); 0166
         LA    @10,KOMBUF-1(@02)                                   0166
         XC    0(1,@10),0(@10)                                     0166
*              GOTO TEXT3;         /* CONTINUE SCAN LOOP             */
         B     TEXT3                                               0167
*            END;                                                  0168
*          ELSE;                   /* NEXT CHAR NOT A QUOTE, ASSUME
*                                     SINGLE QUOTE END OF MSG TEXT   */
@RF00163 DS    0H                                                  0170
* /* SCAN COMMAND BUFFER FOR PARAMETERS FOLLOWING MESSAGE TEXT       */
* ENDTEXT:                /* CLOSING QUOTE OF MSG TEXT WAS FOUND     */
*         IF TEXTLENG = 0           /* TEST IF NULL TEXT SPEC'D      */
*           THEN                    /* YES,                          */
ENDTEXT  CLI   TEXTLENG(COMPTR),0                                  0170
         BE    @RT00170                                            0170
*             GOTO ERRSYN;          /* GIVE 'SYNTAX ERROR' MSG       */
*           ELSE                    /* TEXT IS PRESENT               */
*             DO;                                                  0172
*               FTEXT = '1'B;       /* INDICATE TEXT PRESENT         */
         OI    FTEXT(COMPTR),B'00000010'                           0173
*               COMBUF = KOMBUF(1:CBLENG); /* COPY EDITED COMMAND    */
         MVI   COMBUF+1(COMPTR),C' '                               0174
         MVC   COMBUF+2(122,COMPTR),COMBUF+1(COMPTR)               0174
         SR    @10,@10                                             0174
         IC    @10,CBLENG                                          0174
         BCTR  @10,0                                               0174
         EX    @10,@SM00477                                        0174
*             END;                                                 0175
*          I=I+1;                   /* BUMP INDEX PAST END QUOTE     */
         AH    I,@CH00047                                          0176
*                                   /* SCAN CHAR AFTER MSG TEXT      */
*          IF KOMBUF(I) = '00'X     /* TEST FOR END OF COMBUF        */
*            THEN                   /* YES, NO PARMS AFTER MSG TEXT  */
         LA    @10,KOMBUF-1(I)                                     0177
         CLI   0(@10),X'00'                                        0177
         BE    @RT00177                                            0177
*              GOTO ALLNOW;         /* TAKE DEFAULTS-'ALL AND'NOW'   */
*         IF KOMBUF(I) = ' '        /* CHECK FOR BLANK               */
*           THEN                    /* BLANK FOUND, STOP SCAN        */
         LA    @10,KOMBUF-1(I)                                     0179
         CLI   0(@10),C' '                                         0179
         BE    @RT00179                                            0179
*             GOTO ALLNOW;          /* TAKE DEFAULTS OF ALL AND NOW  */
*           ELSE;                   /* NON BLANK FOUND               */
* TEXTEND:                /* CHECK FOR COMMA AFTER MSG TEXT ENDQUOTE */
*         IF KOMBUF(I) = ','        /* CHECK FOR COMMA               */
*           THEN                    /* COMMA FOUND                   */
TEXTEND  LA    @10,KOMBUF-1(I)                                     0182
         CLI   0(@10),C','                                         0182
         BNE   @RF00182                                            0182
*             DO;                                                  0183
*               I = I+1;            /* BUMP INDEX PAST COMMA         */
         AH    I,@CH00047                                          0184
*              GOTO TE2;            /* CONTINUE SCAN                 */
         B     TE2                                                 0185
*             END;                                                 0186
*           ELSE                    /* NOT A COMMA                   */
*             GOTO ERRSYN;          /* SYNTAX ERROR, COMMA MISSING   */
* ALLNOW:                          /* DEFAULT TO 'ALL' AND 'NOW'    */
*         FALL = '1'B;              /* SET FLAG FOR 'ALL' SPEC'D     */
ALLNOW   DS    0H                                                  0189
*         FNOW = '1'B;              /* SET FLAG FOR 'NOW'            */
         OI    FALL(COMPTR),B'00010100'                            0189
*         GOTO ENDCB;               /* GO TO SET MSG AND SEND TO ALL */
         B     ENDCB                                               0190
* TE2:                              /* CHECK FOR 'LOGON' OR 'NOW'    */
*         IF KOMBUF(I:I+4) = 'LOGON'/* IS 'LOGON' SPECIFIED          */
*           THEN                                                   0191
TE2      LA    @10,KOMBUF-1(I)                                     0191
         CLC   0(5,@10),@CC00390                                   0191
         BNE   @RF00191                                            0191
*           DO;                                                    0192
*              FLOGON = '1'B;      /* SET FLAG FOR LOGON             */
*              FNOW = '1'B;        /* SET FLAG FOR NOW ALSO          */
         OI    FLOGON(COMPTR),B'00011000'                          0194
*              I = I+5;            /* BUMP INDEX PAST 'LOGON'        */
         AH    I,@CH00375                                          0195
*              GOTO SCANMOR;       /* CONTINUE SCAN FOR MORE PARMS   */
         B     SCANMOR                                             0196
*           END;                                                   0197
*         IF KOMBUF(I:I+3) = 'SAVE' /* 'SAVE' SPEC'D                 */
*           THEN                    /* YES, 'SAVE' SPEC'D            */
@RF00191 LA    @10,KOMBUF-1(I)                                     0198
         CLC   0(4,@10),@CC00393                                   0198
         BNE   @RF00198                                            0198
*             DO;                                                  0199
*               FLOGON = '1'B;      /* INDICATE SAVE SPECIFIED       */
         OI    FLOGON(COMPTR),B'00001000'                          0200
*               I = I + 4;          /* STEP OVER KEYWORD             */
         AH    I,@CH00135                                          0201
*               GOTO SCANMOR;       /* CONTINUE SCAN                 */
         B     SCANMOR                                             0202
*             END;                                                 0203
*         ELSE                                                     0204
*           IF KOMBUF(I:I+2) = 'NOW'/* IS 'NOW' SPECIFIED            */
*             THEN                  /* YES, 'NOW' IS SPECIFIED       */
@RF00198 LA    @10,KOMBUF-1(I)                                     0204
         CLC   0(3,@10),@CC00394                                   0204
         BNE   @RF00204                                            0204
*               DO;                                                0205
*                 FNOW ='1'B;       /* SET FLAG FOR 'NOW' SPEC'D     */
         OI    FNOW(COMPTR),B'00010000'                            0206
*                 I = I+3;          /* BUMP INDEX PAST 'NOW'         */
         AH    I,@CH00254                                          0207
*                 GOTO SCANMOR;     /* CONTINUE SCAN FOR MORE PARMS  */
         B     SCANMOR                                             0208
*               END;                                               0209
*         IF KOMBUF (I:I+5) = 'USER=(' /* IS 'USER=(' SPECIFIED      */
*           THEN                    /* YES, THEN                     */
@RF00204 LA    @10,KOMBUF-1(I)                                     0210
         CLC   0(6,@10),@CC00395                                   0210
         BE    @RT00210                                            0210
*             GOTO TUSER;           /* GOTO SCAN USERID LIST         */
*         IF KOMBUF (I:I+2) = 'ALL' /* IS 'ALL' SPECIFIED            */
*           THEN                    /* YES, THEN                     */
         LA    @10,KOMBUF-1(I)                                     0212
         CLC   0(3,@10),@CC00397                                   0212
         BE    @RT00212                                            0212
*             GOTO TALL;            /* GOTO CHECK FOR END OF COMMAND
*                                      BUFFER OR NEXT PARM           */
*         IF KOMBUF(I:I+5) = 'BRDCST' /* 'BRDCST' SPEC'D             */
*           THEN                    /* YES, 'BRDCST' SPEC'D          */
         LA    @10,KOMBUF-1(I)                                     0214
         CLC   0(6,@10),@CC00399                                   0214
         BNE   @RF00214                                            0214
*             DO;                                                  0215
*               FBRDCST = '1'B;     /* INDICATE 'BRDCST' SPEC'D      */
         OI    FBRDCST(COMPTR),B'00001000'                         0216
*               I = I + 6;          /* STEP OVER KEYWORD             */
         AH    I,@CH00377                                          0217
*               GOTO OUTSCAN;       /* CHECK LAST BYTE               */
         B     OUTSCAN                                             0218
*             END;                                                 0219
*         IF KOMBUF(I:I+8) = 'OPERATOR=' /* 'OPERATOR=' SPEC'D       */
*           THEN                    /* YES, ROUTE CODE FOLLOWS       */
@RF00214 LA    @10,KOMBUF-1(I)                                     0220
         CLC   0(9,@10),@CC00400                                   0220
         BE    @RT00220                                            0220
*             GOTO TROUTE;          /* FINISH KEYWORD SCAN           */
*         IF KOMBUF(I:I+2) = 'CN='  /* 'CN=' SPEC'D                  */
*           THEN                    /* YES, 'CN=' SPEC'D             */
         LA    @10,KOMBUF-1(I)                                     0222
         CLC   0(3,@10),@CC00403                                   0222
         BE    @RT00222                                            0222
*             GOTO TOPER;           /* FINISH KEYWORD SCAN           */
*             GOTO ERRSYN;          /*INVALID CHARACTER/ERROR EXIT   */
         B     ERRSYN                                              0224
* SCANMOR:                       /* CHECK IF ANY MORE PARMS SPECIFIED*/
*         IF KOMBUF(I) = '00'X      /* CHECK FOR END OF COMBUF       */
*           THEN                    /* YES, END OF COMMAND           */
SCANMOR  LA    @10,KOMBUF-1(I)                                     0225
         CLI   0(@10),X'00'                                        0225
         BE    @RT00225                                            0225
*             GOTO TANOW;           /* TAKE DEFAULTS IF NECESSARY    */
*                                   /* NOT END OF BUFFER, SCAN ON    */
*         IF KOMBUF(I) = ','        /* IS THERE ANOTHER PARAM TO SCAN*/
*           THEN                    /* YES COMMA FOUND, CONTINUE SCAN*/
         LA    @10,KOMBUF-1(I)                                     0227
         CLI   0(@10),C','                                         0227
         BNE   @RF00227                                            0227
*               DO;                                                0228
*                 I=I+1;            /* BUMP I TO NEXT CHAR           */
         AH    I,@CH00047                                          0229
*                 GOTO SCANNEXT;    /*SCAN NEXT PARAM AT SCANNEXT    */
         B     SCANNEXT                                            0230
*               END;                /*END TO POSITIVE DO LOOP        */
*           IF KOMBUF(I) = ' '      /* IS CHAR A BLANK               */
*             THEN                  /* BLANK FOUND, STOP SCAN        */
@RF00227 LA    @10,KOMBUF-1(I)                                     0232
         CLI   0(@10),C' '                                         0232
         BE    @RT00232                                            0232
*               GOTO TANOW;          /* GO SET DEFAULTS              */
*             ELSE                   /* NOT A BLANK, CHAR IS INVALID */
*               GOTO ERRSYN;         /* SYNTAX ERROR, GIVE WARNING   */
*                                                                  0234
         B     ERRSYN                                              0234
*  SCANNEXT:      /* COMMA FOUND, SCAN FOR KEYWORD, 'USER' OR 'ALL'  */
*         IF KOMBUF(I:I+5) = 'USER=(' /* IS 'USER=(' SPECIFIED?      */
*           THEN                                                   0235
SCANNEXT LA    @10,KOMBUF-1(I)                                     0235
         CLC   0(6,@10),@CC00395                                   0235
         BE    @RT00235                                            0235
*             GOTO TUSER;           /* YES, GOTO SCAN USERID LIST    */
*         IF KOMBUF(I:I+2) = 'ALL'  /* IS 'ALL' SPEC'D               */
*           THEN                    /* 'ALL' SPEC'D ON SEND CMD      */
         LA    @10,KOMBUF-1(I)                                     0237
         CLC   0(3,@10),@CC00397                                   0237
         BE    @RT00237                                            0237
*             GOTO TALL;            /* SCAN FOR MORE PARMS           */
*           ELSE                    /* INVALID PARM AFTER COMMA      */
*             GOTO ERRSYN;          /* GIVE SYNTAX ERROR MESSAGE     */
         B     ERRSYN                                              0239
*TROUTE:                            /* RECOVER ROUTE CODE            */
*         I = I + 9;                /* STEP OVER 'OPERATOR='         */
TROUTE   AH    I,@CH00299                                          0240
*         WORK8 = WORK8 && WORK8;   /* CLEAR WORKAREA                */
         XC    WORK8(8),WORK8                                      0241
*         DO J = I TO I + 2;        /* SCAN ROUTING CODE             */
         LR    @10,I                                               0242
         B     @DE00242                                            0242
@DL00242 DS    0H                                                  0243
*           IF KOMBUF(J) = '00'X    /* END OF BUFFER                 */
*             THEN                  /* YES, END OF ID                */
         LA    @02,KOMBUF-1(@10)                                   0243
         CLI   0(@02),X'00'                                        0243
         BE    @RT00243                                            0243
*               GOTO ENDRTE;        /* EXIT ROUTE ID SCAN            */
*           IF KOMBUF(J) = ' '      /* BLANK DELIMETER               */
*             THEN                  /* YES, END OF ROUTE CODE        */
         LA    @02,KOMBUF-1(@10)                                   0245
         CLI   0(@02),C' '                                         0245
         BE    @RT00245                                            0245
*               GOTO ENDRTE;        /* EXIT ROUTE ID SCAN            */
*           IF KOMBUF(J) < 'F0'X    /* NOT NUMERIC                   */
*             THEN                  /* SYNTAX ERROR                  */
         LA    @02,KOMBUF-1(@10)                                   0247
         CLI   0(@02),X'F0'                                        0247
         BL    @RT00247                                            0247
*               GOTO ERRSYN;        /* TERMINATE SCAN                */
*           WORK8(7) = WORK8(8);    /* SHIFT DIGIT, IF PRESENT       */
         MVC   WORK8+6(1),WORK8+7                                  0249
*           WORK8(8) = KOMBUF(J);   /* COPY 'NEXT' DIGIT             */
         LA    @02,KOMBUF-1(@10)                                   0250
         MVC   WORK8+7(1),0(@02)                                   0250
*         END;                                                     0251
         AH    @10,@CH00047                                        0251
@DE00242 STC   @10,J                                               0251
         LA    @02,2                                               0251
         AR    @02,I                                               0251
         CR    @10,@02                                             0251
         BNH   @DL00242                                            0251
*         GOTO ERRSYN;              /* TOO MANY DIGITS OR          0252
*                                      INVALID DELIMITER             */
         B     ERRSYN                                              0252
*ENDRTE:                                                           0253
*         IF J = I                  /* NO ROUTE CODE FOUND           */
*           THEN                    /* SYNTAX ERROR                  */
ENDRTE   MVC   @ZT00003+3(1),J                                     0253
         C     I,@ZT00003                                          0253
         BE    @RT00253                                            0253
*             GOTO ERRSYN;          /* EXIT SCAN                     */
*         GEN;                      /* CONVERT ROUTE CODE TO BIN     */
          PACK WORK8(8),WORK8(8)    PACK CONSOLE ID
          CVB  R5,WORK8             CONVERT TO BINARY
*         IF R5 > 15 ×              /* ROUTE CODE OVER MAX           */
*            R5 < 1                 /* ROUTE CODE UNDER MIN          */
*           THEN                    /* SYNTAX ERROR                  */
         CH    R5,@CH00108                                         0256
         BH    @RT00256                                            0256
         LTR   R5,R5                                               0256
         BNP   @RT00256                                            0256
*             GOTO ERRSYN;          /* EXIT SCAN                     */
*         CBCCONID = R5;            /* SAVE ROUTE CODE               */
         STH   R5,CBCCONID(,COMPTR)                                0258
*         GOTO ENDCB;               /* SCAN IS OVER                  */
         B     ENDCB                                               0259
*TOPER:                             /* RECOVER CONSOLE ID            */
*         I = I + 3;                /* STEP OVER 'CN='               */
TOPER    AH    I,@CH00254                                          0260
*         FCNS = '1'B;              /* INDICATE 'CN=' SPECIFIED      */
         OI    FCNS(COMPTR),B'00000001'                            0261
*         WORK8 = WORK8 && WORK8;   /* SET WORKAREA TO ZEROES        */
         XC    WORK8(8),WORK8                                      0262
*         DO J = I TO I + 2;        /* SCAN CONSOLE ID               */
         LR    @10,I                                               0263
         B     @DE00263                                            0263
@DL00263 DS    0H                                                  0264
*           IF KOMBUF(J) = '00'X    /* END OF BUFFER                 */
*             THEN                  /* YES, END OF ID                */
         LA    @02,KOMBUF-1(@10)                                   0264
         CLI   0(@02),X'00'                                        0264
         BE    @RT00264                                            0264
*               GOTO ENDCNS;        /* EXIT CONSOLE ID SCAN          */
*           IF KOMBUF(J) = ' '      /* BLANK DELIMETER               */
*             THEN                  /* YES, END OF CONSOLE ID        */
         LA    @02,KOMBUF-1(@10)                                   0266
         CLI   0(@02),C' '                                         0266
         BE    @RT00266                                            0266
*               GOTO ENDCNS;        /* EXIT CONSOLE ID SCAN          */
*           IF KOMBUF(J) < 'F0'X    /* NOT NUMERIC                   */
*             THEN                  /* SYNTAX ERROR                  */
         LA    @02,KOMBUF-1(@10)                                   0268
         CLI   0(@02),X'F0'                                        0268
         BL    @RT00268                                            0268
*               GOTO ERRSYN;        /* TERMINATE SCAN                */
*           WORK8(7) = WORK8(8);    /* SHIFT DIGIT, IF PRESENT       */
         MVC   WORK8+6(1),WORK8+7                                  0270
*           WORK8(8) = KOMBUF(J);   /* COPY 'NEXT' DIGIT             */
         LA    @02,KOMBUF-1(@10)                                   0271
         MVC   WORK8+7(1),0(@02)                                   0271
*         END;                                                     0272
         AH    @10,@CH00047                                        0272
@DE00263 STC   @10,J                                               0272
         LA    @02,2                                               0272
         AR    @02,I                                               0272
         CR    @10,@02                                             0272
         BNH   @DL00263                                            0272
*         GOTO ERRSYN;              /* TOO MANY DIGITS OR          0273
*                                      INVALID DELIMETER             */
         B     ERRSYN                                              0273
*ENDCNS:                                                           0274
*         IF J = I                  /* NO CONSOLE ID FOUND           */
*           THEN                    /* SYNTAX ERROR                  */
ENDCNS   MVC   @ZT00003+3(1),J                                     0274
         C     I,@ZT00003                                          0274
         BE    @RT00274                                            0274
*             GOTO ERRSYN;          /* EXIT SCAN                     */
*         GEN;                      /* CONVERT CONSOLE ID TO BINARY  */
          PACK WORK8(8),WORK8(8)    PACK CONSOLE ID
          CVB   R5,WORK8            CONVERT TO BINARY
*         IF R5 > 64                /* CONSOLE ID OVER MAXIMUM       */
*           THEN                    /* SYNTAX ERROR                  */
         CH    R5,@CH00416                                         0277
         BH    @RT00277                                            0277
*             GOTO ERRSYN;          /* EXIT SCAN                     */
*         CBCCONID = R5;            /* SAVE CONSOLE ID               */
         STH   R5,CBCCONID(,COMPTR)                                0279
*         GOTO ENDCB;               /* SCAN IS OVER                  */
         B     ENDCB                                               0280
* TUSER:                          /* 'USER' SPEC'D. SCAN FOR USERIDS.*/
*         FUSER = '1'B;             /* SET FLAG FOR 'USER' SPEC'D    */
TUSER    OI    FUSER(COMPTR),B'00000100'                           0281
*         I = I+5;                  /* BUMP INDEX PAST 'USER='       */
*                                                                  0282
         AH    I,@CH00375                                          0282
*ULSCAN6:       /* FIRST CHARACTER OF USERID IS CHECKED FOR ALPHABETIC
*                  OR NATIONAL CHARACTER                      A48271 */
*         I = I+1;                  /* BUMP INDEX PAST THIS DELIMITER
*                                      CHARACTER                     */
ULSCAN6  AH    I,@CH00047                                          0283
* VALOOP1:                          /* CHECK FIRST CHAR OF USERID FOR
*                                      ALPHABETIC OR NAT CHAR  A48271*/
*         DO J = 1 TO VALEND1 BY 1; /* SCAN TABLE OF VALID CHARS   0284
*                                       FOR 1ST CHAR OF USERID A48271*/
VALOOP1  LA    @10,1                                               0284
         STC   @10,J                                               0284
         B     @DE00284                                            0284
@DL00284 DS    0H                                                  0285
*            IF KOMBUF(I)=VALCHAR(J)/* IS CHAR EQUAL THIS VALID    0285
*                                         ONE IN TABLE         A48271*/
*              THEN                 /* YES FIRST CHAR IS VALID A48271*/
         LA    @02,KOMBUF-1(I)                                     0285
         LA    @01,VALCHAR-1(@10)                                  0285
         CLC   0(1,@02),0(@01)                                     0285
         BE    @RT00285                                            0285
*                GOTO ULS8;         /* SET BEGIN OF USERID AND MOVE
*                                      CHAR INTO WORKID        A48271*/
*            ELSE;                  /* NOT EQUAL THIS ENTRY,       0287
*                                      LOOP AND TRY NEXT       A48271*/
*         END VALOOP1;              /*CHAR IS NOT IN VALID TBL A48271*/
         AH    @10,@CH00047                                        0288
         STC   @10,J                                               0288
@DE00284 MVC   @ZT00003+3(1),VALEND1                               0288
         C     @10,@ZT00003                                        0288
         BNH   @DL00284                                            0288
*         GOTO ULS7;                /* 1ST CHAR IS INVALID IN USERID
*                                                              A48271*/
         B     ULS7                                                0289
* ERRUID:                           /* THIS USERRD IS IN ERROR       */
*         L = L+ 1;                 /* INCREMENT INDEX PAST INVALID
*                                      CHARACTER               M0142 */
ERRUID   LA    @10,1                                               0290
         MVC   @ZT00003+3(1),L                                     0290
         A     @10,@ZT00003                                        0290
         STC   @10,L                                               0290
*         FERRID = '1'B;            /* SET FLAG FOR ERROR            */
         OI    FERRID(COMPTR),B'00000001'                          0291
*         GOTO ULS8A;               /* CONTINUE USERID SCAN          */
         B     ULS8A                                               0292
* ULS7:                   /* FIRST CHAR OF THIS USERID IS INVALID    */
*         FERRID = '1'B;            /* SET FLAG FOR INVALID USERID   */
ULS7     OI    FERRID(COMPTR),B'00000001'                          0293
* ULS8:                   /* ENTRY IF USERID FIRST CHAR IS VALID     */
*         ERRBEG = I;               /* SET BEGIN OF USERID IF ERROR  */
ULS8     STC   I,ERRBEG                                            0294
*         WORKID = ' ';             /* BLANK OUT USERID WORK AREA    */
         MVI   WORKID+1,C' '                                       0295
         MVC   WORKID+2(6),WORKID+1                                0295
         MVI   WORKID,C' '                                         0295
*         WORKID(1)  = KOMBUF(I);   /* ASSIGN FIRST CHAR OF USERID   */
         LA    @10,KOMBUF-1(I)                                     0296
         MVC   WORKID(1),0(@10)                                    0296
*         L = 2;                    /* SET INDEX TO USERID WORK AREA */
         MVI   L,X'02'                                             0297
*ULS8A:                             /* CONTINUE SCAN OF USERID       */
*         I = I+1;                  /* BUMP INDEX TO COMMAND BUFFER  */
ULS8A    AH    I,@CH00047                                          0298
*         DO I = I TO CBLENG;       /* SCAN COMMAND BUFFER FOR USERID*/
         B     @DE00299                                            0299
@DL00299 DS    0H                                                  0300
*           IF KOMBUF(I) = ','      /* IS NEXT CHAR A COMMA          */
*             THEN                                                 0300
         LA    @10,KOMBUF-1(I)                                     0300
         CLI   0(@10),C','                                         0300
         BE    @RT00300                                            0300
*               GOTO ULS9;          /* ADD USERID TO LIST            */
*         IF KOMBUF(I) = ')'        /* IS IT END OF USERID LIST      */
*           THEN                                                   0302
         LA    @10,KOMBUF-1(I)                                     0302
         CLI   0(@10),C')'                                         0302
         BE    @RT00302                                            0302
*             GOTO ULS9;            /* ADD USERID TO LIST            */
*         IF KOMBUF(I) = '00'X      /* IS CHAR A HEX ZERO            */
*           THEN                    /* YES, END OF BUFFER REACHED  0304
*                                      BEFORE CLOSING DELIMITERS     */
         LA    @10,KOMBUF-1(I)                                     0304
         CLI   0(@10),X'00'                                        0304
         BE    @RT00304                                            0304
*             GOTO ERRSYN;          /* GIVE SYNTAX ERROR MESSAGE     */
*         IF KOMBUF(I) = ' '        /* IS CHAR A BLANK               */
*           THEN                                                   0306
         LA    @10,KOMBUF-1(I)                                     0306
         CLI   0(@10),C' '                                         0306
         BE    @RT00306                                            0306
*             GOTO ERRUID;          /* YES, INVALID USERID           */
* VALOOP:                      /* CHECK IF CHAR IS VALID FOR USERID  */
*          DO J = 1 TO VALEND;      /* SCAN ENTIRE TABLE OF VALIDS   */
VALOOP   LA    @10,1                                               0308
         B     @DE00308                                            0308
@DL00308 DS    0H                                                  0309
*            IF KOMBUF(I) = VALCHAR(J)/* IS CHAR EQUAL THIS VALID 1  */
*              THEN                 /* YES, CHAR IN USERID IS VALID  */
         LA    @02,KOMBUF-1(I)                                     0309
         LA    @01,VALCHAR-1(@10)                                  0309
         CLC   0(1,@02),0(@01)                                     0309
         BE    @RT00309                                            0309
*                GOTO GOODCHAR;     /* MOVE CHAR INTO WORKID         */
*              ELSE;                /* NOT EQUAL THIS ENTRY, LOOP    */
*          END VALOOP;              /* CHAR IS NOT IN VALID TABLE    */
         AH    @10,@CH00047                                        0312
@DE00308 STC   @10,J                                               0312
         MVC   @ZT00003+3(1),VALEND                                0312
         C     @10,@ZT00003                                        0312
         BNH   @DL00308                                            0312
*          GOTO ERRUID;             /* USERID HAS INVALID CHARACTER  */
         B     ERRUID                                              0313
* GOODCHAR:                         /* CHARACTER IS VALID IN A USERID*/
*         WORKID(L) = KOMBUF(I);    /* ASSIGN CHARACTER TO USERID    */
GOODCHAR SR    @10,@10                                             0314
         IC    @10,L                                               0314
         LA    @02,WORKID-1(@10)                                   0314
         LA    @01,KOMBUF-1(I)                                     0314
         MVC   0(1,@02),0(@01)                                     0314
*         L = L+1;                  /* BUMP INDEX TO USERID WORK AREA*/
         AH    @10,@CH00047                                        0315
         STC   @10,L                                               0315
*         IF L > 8                  /* HAVE MORE THAN 7 CHARS OF USERID
*                                      BEEN MOVED INTO WORK AREA?    */
*           THEN                    /* YES,                          */
         CLI   L,8                                                 0316
         BNH   @RF00316                                            0316
*             DO;                   /* THEN,                         */
*               FERRID = '1'B;      /* SET FLAG FOR USERID ERROR   0318
*                                                               M6524*/
         OI    FERRID(COMPTR),B'00000001'                          0318
*               L = L-1;            /* DECREMENT L FOR USERID LENGTH
*                                      CONTROL                  M6524*/
         BCTR  @10,0                                               0319
         STC   @10,L                                               0319
*               GOTO ULS10;         /* BRANCH TO PUT USERID INTO   0320
*                                      ERROR MESSAGE.           M6524*/
         B     ULS10                                               0320
*             END;                  /* END DO                   M6524*/
*        END;                       /* LOOP TO SCAN NEXT CHAR        */
@RF00316 AH    I,@CH00047                                          0322
@DE00299 MVC   @ZT00003+3(1),CBLENG                                0322
         C     I,@ZT00003                                          0322
         BNH   @DL00299                                            0322
*        GOTO ERRSYN;               /* IF END OF COMMAND BUFFER IS 0323
*                                      REACHED, SYNTAX ERROR         */
         B     ERRSYN                                              0323
* ULS9:                             /* CHECK IF USERID IN ERROR      */
*         IF FERRID = '1'B          /* IS THIS USERID IN ERROR       */
*           THEN                    /* YES                           */
ULS9     TM    FERRID(COMPTR),B'00000001'                          0324
         BO    @RT00324                                            0324
*             GOTO ULS9A;           /* PUT USERID INTO ERROR MSG AREA*/
*         IF IDCNT = 20             /*TEST FOR MAX USERIDS ALLOWED-20*/
*           THEN                    /* MAXIMUM NO. USERIDS           */
         CLI   IDCNT(COMPTR),20                                    0326
         BNE   @RF00326                                            0326
*             DO;                                                  0327
*               FOVER20 = '1'B;     /* SET FLAG FOR WARNING MSG      */
         OI    FOVER20(COMPTR),B'00000010'                         0328
*               GOTO ULS9B;         /* IGNORE USERID                 */
         B     ULS9B                                               0329
*             END;                                                 0330
*         IDCNT = IDCNT+1;          /* BUMP COUNT OF USERIDS IN TABLE*/
@RF00326 LA    @10,1                                               0331
         MVC   @ZT00003+3(1),IDCNT(COMPTR)                         0331
         A     @10,@ZT00003                                        0331
         STC   @10,IDCNT(,COMPTR)                                  0331
*         IDUSRID(IDCNT) = WORKID;  /* PUT USERID INTO USERID TABLE  */
         SLA   @10,3                                               0332
         ALR   @10,COMPTR                                          0332
         MVC   IDUSRID-8(8,@10),WORKID                             0332
*ULS9B:                             /* SCAN FOR DELIMITER            */
*         IF KOMBUF(I) = ')'        /* IS CHARACTER A RIGHT PAREN?   */
*           THEN                    /* YES, ENDING DELIMITER FOUND   */
ULS9B    LA    @10,KOMBUF-1(I)                                     0333
         CLI   0(@10),C')'                                         0333
         BE    @RT00333                                            0333
*             GOTO ENDUL;           /* BRANCH TO DETERMINE IF ANY  0334
*                                      DUPLICATE USERIDS WERE SPEC'D */
*         IF KOMBUF(I) = ','        /* IS CHARACTER A COMMA?         */
*           THEN                    /* YES, THEN THERE ARE MORE USERIDS
*                                      SPECIFIED                     */
         LA    @10,KOMBUF-1(I)                                     0335
         CLI   0(@10),C','                                         0335
         BE    @RT00335                                            0335
*             GOTO ULSCAN6;         /* SCAN NEXT USERID SPEC'D       */
*         GOTO ERRSYN;              /* NO, SYNTAX ERROR, DELIMITER 0337
*                                      MISSING                       */
         B     ERRSYN                                              0337
* ULS9A:                            /* CHECK TO SEE IF THIS IS THE 0338
*                                      FIRST USERID IN ERROR         */
*         IF FANYINV = '1'B         /* WAS THERE A PREVIOUS INSERT OF
*                                      A USERID INTO THE ERROR MSG?  */
*           THEN                    /* YES, THEN THIS IS NOT THE FIRST
*                                      INVALID USERID ENCOUNTERED    */
ULS9A    TM    FANYINV(COMPTR),B'01000000'                         0338
         BO    @RT00338                                            0338
*             GOTO MSG1A;           /* BRANCH AROUND INITIALIZATION
*                                      OF ERROR MESSAGE              */
*         FANYINV = '1'B;           /* SET FLAG FOR INSERTION        */
         OI    FANYINV(COMPTR),B'01000000'                         0340
*         MSG1EXT(1) = ' ';         /* INSERT BLANK BEFORE USERIDS   */
         MVI   MSG1EXT(COMPTR),C' '                                0341
*         M1IND = 2;                /* INIT INDEX TO MSG1 INSERT     */
         MVI   M1IND(COMPTR),X'02'                                 0342
* MSG1A:                            /* PUT USERID INTO WARN MSG TEXT */
*         P = L-2;                  /* P = LENGTH OF THIS USERID     */
MSG1A    SR    @10,@10                                             0343
         IC    @10,L                                               0343
         LR    @02,@10                                             0343
         BCTR  @02,0                                               0343
         BCTR  @02,0                                               0343
         STH   @02,P                                               0343
*                                   /* PUT ERRONEOUS USERID INTO MSG */
*         MSG1EXT(M1IND:M1IND+P) = KOMBUF(ERRBEG:ERRBEG+P);        0344
         SR    @15,@15                                             0344
         IC    @15,M1IND(,COMPTR)                                  0344
         ALR   @15,COMPTR                                          0344
         SR    @01,@01                                             0344
         IC    @01,ERRBEG                                          0344
         LA    @14,KOMBUF-1(@01)                                   0344
         EX    @02,@SM00483                                        0344
*         MSG1EXT(M1IND+P+1) = ' '; /* INSERT BLANK AFTER USERID     */
         SR    @15,@15                                             0345
         IC    @15,M1IND(,COMPTR)                                  0345
         AR    @02,@15                                             0345
         ALR   @02,COMPTR                                          0345
         MVI   MSG1EXT(@02),C' '                                   0345
*         M1IND = M1IND+L;          /* BUMP INDEX TO MSG USERID AREA */
         AR    @15,@10                                             0346
         STC   @15,M1IND(,COMPTR)                                  0346
*         FERRID = '0'B;            /* TURN OFF FLAG FOR USERID ERROR*/
         NI    FERRID(COMPTR),B'11111110'                          0347
*         GOTO ULS9B;               /* CONTINUE COMMAND BUFFER SCAN  */
         B     ULS9B                                               0348
*ULS10:                             /* THIS LOOP ENTERED ONLY IF LENGTH
*                                      OF SPECIFIED USERID IS > 7  0349
*                                      CHARACTERS.              M6524*/
*        DO I = I TO CBLENG;        /* SCAN COMMAND BUFFER FOR     0349
*                                      DELIMITER                M6524*/
ULS10    B     @DE00349                                            0349
@DL00349 DS    0H                                                  0350
*         IF KOMBUF(I) = ','        /* IS THE NEXT CHARACTER A COMMA
*                                                               M6524*/
*           THEN                    /* YES,                     M6524*/
         LA    @10,KOMBUF-1(I)                                     0350
         CLI   0(@10),C','                                         0350
         BE    @RT00350                                            0350
*             GOTO ULS9;            /* BRANCH TO PUT USERID INTO ERROR
*                                      MESSAGE                  M6524*/
*         IF KOMBUF(I) = ')'        /* IS IT END OF USERID LIST M6524*/
*           THEN                    /* YES,                     M6524*/
         LA    @10,KOMBUF-1(I)                                     0352
         CLI   0(@10),C')'                                         0352
         BE    @RT00352                                            0352
*             GOTO ULS9;            /* BRANCH TO PUT USERID INTO ERROR
*                                      MESSAGE                  M6524*/
*         IF KOMBUF(I) = '00'X      /* IS CHAR A HEX ZERO       M6524*/
*           THEN                    /*YES, END OF BUFFER REACHED BEFORE
*                                     CLOSING DELIMITER IS FOUNDM6524*/
         LA    @10,KOMBUF-1(I)                                     0354
         CLI   0(@10),X'00'                                        0354
         BE    @RT00354                                            0354
*             GOTO ERRSYN;          /* GIVE SYNTAX ERROR MESSAGEM6524*/
*         L = L+1;                  /*INCREMENT LENGTH OF USERIDM6524*/
         LA    @10,1                                               0356
         MVC   @ZT00003+3(1),L                                     0356
         A     @10,@ZT00003                                        0356
         STC   @10,L                                               0356
*         END;                      /* END OF ULS10 LOOP. LOOP TO SCAN
*                                      NEXT CHARACTER           M6524*/
         AH    I,@CH00047                                          0357
@DE00349 MVC   @ZT00003+3(1),CBLENG                                0357
         C     I,@ZT00003                                          0357
         BNH   @DL00349                                            0357
*          GOTO ERRSYN;             /* END OF COMMAND BUFFER HAS BEEN
*                                      REACHED WITHOUT ENCOUNTERING AN
*                                      ENDING DELIMITER. SYNTAX ERROR
*                                                               M6524*/
         B     ERRSYN                                              0358
*ENDUL:                             /* COMBUF(I) = RIGHT PAREN       */
*         I = I+1;                  /* BUMP INDEX PAST RIGHT PAREN   */
ENDUL    LA    @10,1                                               0359
         AR    I,@10                                               0359
*           IF KOMBUF(I) = ','      /* IS CHAR A COMMA               */
*             THEN                  /* YES, COMMA FOUND              */
         LA    @02,KOMBUF-1(I)                                     0360
         CLI   0(@02),C','                                         0360
         BNE   @RF00360                                            0360
*               DO;                                                0361
*                 I = I+1;          /* BUMP INDEX PAST COMMA         */
         AR    I,@10                                               0362
*                 GOTO LASTSCAN;    /* CHECK FOR MORE PARMS          */
         B     LASTSCAN                                            0363
*               END;                                               0364
*           IF KOMBUF(I) = '00'X    /* IS IT END OF COMMAND BUFFER   */
*             THEN                  /* YES, END OF COMMAND BUFFER    */
@RF00360 LA    @10,KOMBUF-1(I)                                     0365
         CLI   0(@10),X'00'                                        0365
         BE    @RT00365                                            0365
*               GOTO LSTCK;         /* GO TO SET PARM FLAGS          */
*           IF KOMBUF(I) ^= ' '     /* IS NEXT CHAR A NONBLANK       */
*             THEN                  /* YES, SOME INVALID CHAR AFTER
*                                      THE USERID LIST               */
         LA    @10,KOMBUF-1(I)                                     0367
         CLI   0(@10),C' '                                         0367
         BNE   @RT00367                                            0367
*               GOTO ERRSYN;        /* GO TO GIVE SYNTAX ERROR MSG   */
*                                                                  0368
*LSTCK:   IF FLOGON = '0'B          /* TEST IF 'LOGON' SPEC'D        */
*           THEN                    /* 'LOGON' NOT SPEC'D            */
LSTCK    TM    FLOGON(COMPTR),B'00001000'                          0369
         BNZ   @RF00369                                            0369
*             FNOW = '1'B;          /* SET FLAG FOR DEFAULT OF 'NOW' */
         OI    FNOW(COMPTR),B'00010000'                            0370
*         GOTO ENDCB;               /*                               */
*                                                                  0371
         B     ENDCB                                               0371
* LASTSCAN:                   /* CHECK PARM SPEC'D AFTER USERID LIST */
*         IF FLOGON = '1'B × FNOW = '1'B /* PARAMETER REPEATED       */
*           THEN                    /* YES, SYNTAX ERROR             */
LASTSCAN TM    FLOGON(COMPTR),B'00011000'                          0372
         BNZ   @RT00372                                            0372
*             GOTO ERRSYN;          /* EXIT FROM SCAN                */
*         IF KOMBUF(I:I+4) = 'LOGON' /* IS 'LOGON' SPECIFIED         */
*            THEN                                                  0374
         LA    @10,KOMBUF-1(I)                                     0374
         CLC   0(5,@10),@CC00390                                   0374
         BNE   @RF00374                                            0374
*              DO;                  /*   YES, 'LOGON' SPECIFIED      */
*                FLOGON = '1'B;     /* SET FLAG FOR 'LOGON'          */
*                FNOW = '1'B;       /* INDICATE NOW ALSO             */
         OI    FLOGON(COMPTR),B'00011000'                          0377
*                I = I + 5;         /* STEP OVER KEYWORD             */
         AH    I,@CH00375                                          0378
*                GOTO OUTSCAN;      /* CHECK LAST BYTE               */
         B     OUTSCAN                                             0379
*              END;                                                0380
*         IF KOMBUF(I:I+3) = 'SAVE' /* 'SAVE' SPEC'D                 */
*           THEN                    /* YES, 'SAVE' SPEC'D            */
@RF00374 LA    @10,KOMBUF-1(I)                                     0381
         CLC   0(4,@10),@CC00393                                   0381
         BNE   @RF00381                                            0381
*             DO;                                                  0382
*               FLOGON = '1'B;      /* INDICATE 'SAVE' SPECIFIED     */
         OI    FLOGON(COMPTR),B'00001000'                          0383
*               I = I + 4;          /* STEP OVER KEYWORD             */
         AH    I,@CH00135                                          0384
*               GOTO OUTSCAN;       /* CHECK LAST BYTE               */
         B     OUTSCAN                                             0385
*             END;                                                 0386
*         IF KOMBUF(I:I+2) = 'NOW'  /* IS NOW SPECIFIED?       M0684 */
*           THEN                    /* YES                     M0684 */
@RF00381 LA    @10,KOMBUF-1(I)                                     0387
         CLC   0(3,@10),@CC00394                                   0387
         BNE   @RF00387                                            0387
*             DO;                                                  0388
*               FNOW = '1'B;        /* SET FLAG FOR 'NOW'            */
         OI    FNOW(COMPTR),B'00010000'                            0389
*               I = I + 3;          /* STEP OVER KEYWORD             */
         AH    I,@CH00254                                          0390
*               GOTO OUTSCAN;       /* CHECK LAST BYTE               */
         B     OUTSCAN                                             0391
*             END;                                                 0392
*               GOTO ERRSYN;        /* GO TO GIVE SYNTAX ERROR MSG 0393
*                                                              M0684 */
         B     ERRSYN                                              0393
* TALL:                             /*'ALL' SPECIFIED ON SEND COMMAND*/
*         FALL = '1'B;              /* SET FLAG FOR 'ALL' SPEC'D     */
TALL     OI    FALL(COMPTR),B'00000100'                            0394
*         I = I + 3;                /* BUMP I TO CHAR AFTER 'ALL'    */
         AH    I,@CH00254                                          0395
*         IF KOMBUF(I) = ' '        /* IS IT A BLANK                 */
*            THEN                   /* YES, ASSUME END OF PARAMETERS */
         LA    @10,KOMBUF-1(I)                                     0396
         CLI   0(@10),C' '                                         0396
         BE    @RT00396                                            0396
*              GOTO TANOW;          /* TAKE DEFAULT OF 'ALL NOW'     */
*         IF KOMBUF(I) = '00'X      /* IS NEXT CHAR HEX'00'          */
*            THEN                   /* YES, END OF PARAMETERS        */
         LA    @10,KOMBUF-1(I)                                     0398
         CLI   0(@10),X'00'                                        0398
         BE    @RT00398                                            0398
*              GOTO TANOW;          /* TAKE DEFAULT OF 'ALL NOW'     */
*         IF KOMBUF(I) = ','        /* IS NEXT CHAR A COMMA          */
*            THEN                   /* YES, MORE PARMS TO SCAN       */
         LA    @10,KOMBUF-1(I)                                     0400
         CLI   0(@10),C','                                         0400
         BNE   @RF00400                                            0400
*              I = I + 1;           /* BUMP INDEX PAST COMMA         */
         AH    I,@CH00047                                          0401
*            ELSE                   /* NO, SYNTAX ERROR              */
*             GOTO ERRSYN;          /* EXIT SCAN                     */
*         GOTO LASTSCAN;            /* CHECK FOR MORE PARMS          */
*                                                                  0403
         B     LASTSCAN                                            0403
* TANOW:                            /* CHECK FOR DEFAULTS            */
*         IF FLOGON = '0'B          /* TEST IF 'LOGON' WAS SPEC'D    */
*           THEN                    /* 'LOGON' NOT SPEC'D            */
TANOW    TM    FLOGON(COMPTR),B'00001000'                          0404
         BNZ   @RF00404                                            0404
*             FNOW = '1'B;          /* TAKE DEFAULT OF 'NOW'         */
         OI    FNOW(COMPTR),B'00010000'                            0405
*         IF FUSER = '0'B           /* WAS 'USER=' SPEC'D            */
*           THEN                    /* 'USER' NOT SPECIFIED          */
@RF00404 TM    FUSER(COMPTR),B'00000100'                           0406
         BNZ   @RF00406                                            0406
*             FALL = '1'B;          /* SET DEFAULT OF 'ALL'          */
         OI    FALL(COMPTR),B'00000100'                            0407
*         GOTO ENDCB;               /* SET UP BUFFER FOR SEND MSG    */
*                                                                  0408
*                                                                  0408
         B     ENDCB                                               0408
*OUTSCAN:                                                          0409
*         IF KOMBUF(I) = '00'X × KOMBUF(I) = ' ' /* VALID DELIMETER  */
*           THEN                    /* YES, BLANK OR BUFFER END      */
OUTSCAN  LA    @10,KOMBUF-1(I)                                     0409
         CLI   0(@10),X'00'                                        0409
         BE    @RT00409                                            0409
         LA    @10,KOMBUF-1(I)                                     0409
         CLI   0(@10),C' '                                         0409
         BE    @RT00409                                            0409
*             GOTO ENDCB;           /* CONTINUE PROCESSING           */
*ERRSYN:                            /* HANDLE SYNTAX ERROR           */
*         FMSG3 = '1'B;             /* SET ERROR MSG FLAG            */
ERRSYN   OI    FMSG3(COMPTR),B'01000000'                           0411
*         GOTO CLNUP;               /* CLEANUP AND EXIT              */
         B     CLNUP                                               0412
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*      ROUTE CONTROL THRU THE APPROPRIATE HANDLERS.               */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*ENDCB:                                                            0413
*         IF FUSER = '1'B & IDCNT = 0 /* 'USER=' SPEC'D BUT NO     0413
*                                      VALID USERIDS FOUND           */
*           THEN                    /* NO HANDLING REQUIRED          */
ENDCB    TM    FUSER(COMPTR),B'00000100'                           0413
         BNO   @RF00413                                            0413
         CLI   IDCNT(COMPTR),0                                     0413
         BE    @RT00413                                            0413
*             GOTO CLNUP;           /* BRANCH TO CLEANUP             */
* /*******************************************************************/
* /*                    DELETE NOTICE                                */
* /*******************************************************************/
*         IF FDEL = '1'B            /* 'DELETE' SPEC'D               */
*           THEN                    /* YES, DELETE NOTICE            */
@RF00413 TM    FDEL(COMPTR),B'10000000'                            0415
         BNO   @RF00415                                            0415
*             DO;                                                  0416
*               ACCESSOR = ADDR(IEEVSND8); /* INVOKE IEEVSND8        */
         L     @10,@CV00164                                        0417
         ST    @10,@TF00001                                        0417
         MVC   ACCESSOR(3,COMPTR),@TF00001+1                       0417
*               R1 = COMPTR;        /* SET COMMON PTR PARM           */
         LR    R1,COMPTR                                           0418
*               CALL IEEVSND9;      /* INVOKE ACCESS CONTROLLER      */
         L     @15,@CV00165                                        0419
         BALR  @14,@15                                             0419
*               GOTO CLNUP;         /* PROCESSING DONE               */
         B     CLNUP                                               0420
*             END;                                                 0421
* /*******************************************************************/
* /*                   RECOVER/LIST NOTICES                          */
* /*******************************************************************/
*         IF FMN = '1'B × FLIST = '1'B                             0422
*           THEN                    /* NOTICE TO BE RECOVERED OR   0422
*                                      LISTED                        */
@RF00415 TM    FMN(COMPTR),B'00010000'                             0422
         BO    @RT00422                                            0422
         TM    FLIST(COMPTR),B'00100000'                           0422
         BNO   @RF00422                                            0422
@RT00422 DS    0H                                                  0423
*             DO;                                                  0423
*               ACCESSOR = ADDR(IEEVSND3); /* INVOKE IEEVSND3        */
         L     @10,@CV00161                                        0424
         ST    @10,@TF00001                                        0424
         MVC   ACCESSOR(3,COMPTR),@TF00001+1                       0424
*               R1 = COMPTR;        /* SET COMMON PTR PARM           */
         LR    R1,COMPTR                                           0425
*               CALL IEEVSND9;      /* ENTER ACCESS CONTROLLER       */
         L     @15,@CV00165                                        0426
         BALR  @14,@15                                             0426
*             END;                                                 0427
* /*******************************************************************/
* /*                           ADD NOTICE                            */
* /*******************************************************************/
*SAVEMSG:                                                          0428
*         IF FLOGON = '1'B & FNOW = '0'B                           0428
*           THEN                    /* MSG TO BE SAVED IN          0428
*                                      SYS1.BRODCAST                 */
@RF00422 DS    0H                                                  0428
SAVEMSG  TM    FLOGON(COMPTR),B'00001000'                          0428
         BNO   @RF00428                                            0428
         TM    FNOW(COMPTR),B'00010000'                            0428
         BNZ   @RF00428                                            0428
*             IF FALL = '1'B        /* 'ALL' SPEC'D                  */
*               THEN                /* CREATE NOTICE                 */
         TM    FALL(COMPTR),B'00000100'                            0429
         BNO   @RF00429                                            0429
*                 DO;                                              0430
*                   /* IF IN MSG NUMBER MODE, DO NOT CREATE NOTICE.  */
*                   IF FMN = '1'B                                  0431
*                     THEN          /* MSG NUMBER MODE,              */
         TM    FMN(COMPTR),B'00010000'                             0431
         BO    @RT00431                                            0431
*                       GOTO CLNUP; /* DO NOT CREATE NOTICE          */
*                   ACCESSOR = ADDR(IEEVSND8); /* INVOKE IEEVSND8    */
         L     @10,@CV00164                                        0433
         ST    @10,@TF00001                                        0433
         MVC   ACCESSOR(3,COMPTR),@TF00001+1                       0433
*                   FADDBC = '1'B;  /* CREATE NOTICE                 */
         OI    FADDBC(COMPTR),B'00100000'                          0434
*                   R1 = COMPTR;    /* SET COMMON PTR PARM           */
         LR    R1,COMPTR                                           0435
*                   CALL IEEVSND9;  /* ENTER ACCESS CONTROLLER       */
         L     @15,@CV00165                                        0436
         BALR  @14,@15                                             0436
*                   GOTO CLNUP;     /* PROCESSING COMPLETE           */
         B     CLNUP                                               0437
*                 END;                                             0438
* /*******************************************************************/
* /*                         ADD MAIL                                */
* /*******************************************************************/
*               ELSE                /* NO, CREATE MAIL               */
*                 DO;                                              0439
@RF00429 DS    0H                                                  0440
*                   R1 = COMPTR;    /* SET COMMON PTR PARM           */
         LR    R1,COMPTR                                           0440
*                   CALL IEEVSND6;  /* GO SET OPERID FIELD & RETURN  */
         L     @15,@CV00163                                        0441
         BALR  @14,@15                                             0441
*                   ACCESSOR = ADDR(IEEVSND2); /* INVOKE IEEVSND2    */
         L     @10,@CV00160                                        0442
         ST    @10,@TF00001                                        0442
         MVC   ACCESSOR(3,COMPTR),@TF00001+1                       0442
*                   R1 = COMPTR;    /* SET COMMON PTR PARM           */
         LR    R1,COMPTR                                           0443
*                   CALL IEEVSND9;  /* ENTER ACCESS CONTROLLER       */
         L     @15,@CV00165                                        0444
         BALR  @14,@15                                             0444
*                   GOTO CLNUP;     /* PROCESSING COMPLETE           */
         B     CLNUP                                               0445
*                 END;                                             0446
* /*******************************************************************/
* /*                   SEND MESSAGE NOW                              */
* /*******************************************************************/
*         IF FTEXT = '1'B           /* TEXT PRESENT                  */
*           THEN                    /* YES, ISSUE MSG NOW            */
@RF00428 TM    FTEXT(COMPTR),B'00000010'                           0447
         BNO   @RF00447                                            0447
*             DO;                                                  0448
*               FTEXT = '0'B;       /* INDICATE 'NOW' HANDLED        */
         NI    FTEXT(COMPTR),B'11111101'                           0449
*               R1 = COMPTR;        /* SET COMMON PTR PARM           */
         LR    R1,COMPTR                                           0450
*               CALL IEEVSND6;      /* INVOKE 'NOW' PROCESSOR        */
         L     @15,@CV00163                                        0451
         BALR  @14,@15                                             0451
*               GOTO SAVEMSG;       /* MSG MAY HAVE TO BE SAVED      */
         B     SAVEMSG                                             0452
*             END;                                                 0453
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*      PROVIDE FEEDBACK IF REQUIRED.                              */
* /*      FREE THE COMMON DATA AREA AND RELEASE THE CSCB             */
* /*      CREATED FOR THIS COMMAND.                                  */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*CLNUP:                                                            0454
*         R1 = COMPTR;              /* SET COMMON PTR PARM           */
@RF00447 DS    0H                                                  0454
CLNUP    LR    R1,COMPTR                                           0454
*         CALL IEEVSND4;            /* INVOKE CLEANUP ROUTINE        */
         L     @15,@CV00162                                        0455
         BALR  @14,@15                                             0455
*         RESTRICT (R5,R6);                                        0456
*         R5 = LENGTH(COMMON);      /* SET LENGTH OF AREA TO FREE    */
         LA    R5,484                                              0457
*         GEN (FREEMAIN R,LV=(R5),A=(COMPTR),SP=0);                0458
         FREEMAIN R,LV=(R5),A=(COMPTR),SP=0
*                                   /* FREE COMMON DATA AREA         */
*EXITCODE:                          /* RELEASE CSCB                  */
*         R6 = R1SAV;               /* SET TEMP BASE FOR CSCB        */
EXITCODE L     R6,R1SAV                                            0459
*         R6->CHAD = '0'B;          /* TURN OFF ADD BIT              */
*         R6->CHABTERM = '0'B;      /* TURN OFF ABTERM FLAG          */
*         R6->CHDL = '0'B;          /* TURN OFF DELETE FLAG          */
*         R6->CHFC = '1'B;          /* INDICATE FREE CORE            */
         OI    CHFC(R6),B'00000010'                                0463
         NI    CHAD(R6),B'11110010'                                0463
*         R1 = R6;                  /* SET PARM REG                  */
         LR    R1,R6                                               0464
*         RELEASE (R5,R6);                                         0465
*         GEN(MGCR (1),CHAIN);      /* RELEASE CSCB                  */
         MGCR (1),CHAIN
*         R14 = R14SAV;             /* RESTORE RETURN ADDRESS        */
         L     R14,R14SAV                                          0467
*         RETURN CODE(0);                                          0468
*                                                                  0468
*                                                                  0468
         L     @13,4(,@13)                                         0468
         L     @00,@SIZDATD                                        0468
         LR    @01,@12                                             0468
         FREEMAIN R,LV=(0),A=(1)
         SR    @15,@15                                             0468
         BR    @14                                                 0468
*         GEN;                                                     0469
SPARE    DC    50X'00'              PATCH AREA
*          END   IEEVSEND                                          0470
*                                                                  0470
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IEECHAIN)                                        *
*;                                                                 0470
@EL00001 L     @13,4(,@13)                                         0470
@EF00001 L     @00,@SIZDATD                                        0470
         LR    @01,@12                                             0470
         FREEMAIN R,LV=(0),A=(1)
@ER00001 BR    @14                                                 0470
@DATA    DS    0H
@CH00047 DC    H'1'
@CH00254 DC    H'3'
@CH00135 DC    H'4'
@CH00375 DC    H'5'
@CH00377 DC    H'6'
@CH00299 DC    H'9'
@CH00108 DC    H'15'
@CH00416 DC    H'64'
@SM00474 MVC   0(0,@10),0(@01)
@SM00477 MVC   COMBUF(0,COMPTR),KOMBUF
@SM00483 MVC   MSG1EXT-1(0,@15),0(@14)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SAV001  EQU   @SA00001
@TF00001 DS    F
@ZTEMPS  DS    0F
@ZT00003 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
@TEMPS   EQU   @ZTEMPS
@L       EQU   @ZLEN
IEEVSEND CSECT
         DS    0F
@DATD    DSECT
         DS    0D
R1SAV    DS    A
R14SAV   DS    A
MAXMSGLN DS    F
MSGNO    DS    H
P        DS    H
ERRBEG   DS    AL1
J        DS    AL1
K        DS    AL1
Z        DS    AL1
L        DS    AL1
RETC     DS    AL1
         DS    CL2
KOMBUF   DS    CL125
         DS    CL3
WORK8    DS    CL8
WORKID   DS    CL8
WORKER   DS    CL4
WORK4    DS    CL4
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
@DATEND  EQU   *
IEEVSEND CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@SIZ001  EQU   @SIZDATD
@CV00160 DC    V(IEEVSND2)
@CV00161 DC    V(IEEVSND3)
@CV00162 DC    V(IEEVSND4)
@CV00163 DC    V(IEEVSND6)
@CV00164 DC    V(IEEVSND8)
@CV00165 DC    V(IEEVSND9)
         DS    0D
PARMAR   DC    XL4'00000010'
NEXT     DC    AL1(1)
VALEND1  DC    AL1(29)
VALEND   DC    AL1(39)
CBLENG   DC    AL1(124)
@CC00394 DC    C'NOW'
@CC00397 DC    C'ALL'
@CC00403 DC    C'CN='
@CC00361 DC    C'LIST'
@CC00393 DC    C'SAVE'
@CC00390 DC    C'LOGON'
@CC00376 DC    C'DELETE'
@CC00395 DC    C'USER=('
@CC00399 DC    C'BRDCST'
@CC00400 DC    C'OPERATOR='
         DS    CL3
COMMNAME DS    CL5
         ORG   COMMNAME
@NM00008 DC    XL1'04'
@NM00009 DC    CL4'SEND'
         ORG   COMMNAME+5
BLNKID   DC    CL7' '
VALCHAR  DC    CL1'A'
         DC    CL1'B'
         DC    CL1'C'
         DC    CL1'D'
         DC    CL1'E'
         DC    CL1'F'
         DC    CL1'G'
         DC    CL1'H'
         DC    CL1'I'
         DC    CL1'J'
         DC    CL1'K'
         DC    CL1'L'
         DC    CL1'M'
         DC    CL1'N'
         DC    CL1'O'
         DC    CL1'P'
         DC    CL1'Q'
         DC    CL1'R'
         DC    CL1'S'
         DC    CL1'T'
         DC    CL1'U'
         DC    CL1'V'
         DC    CL1'W'
         DC    CL1'X'
         DC    CL1'Y'
         DC    CL1'Z'
         DC    X'5B'
         DC    X'7B'
         DC    X'7C'
         DC    CL1'1'
         DC    CL1'2'
         DC    CL1'3'
         DC    CL1'4'
         DC    CL1'5'
         DC    CL1'6'
         DC    CL1'7'
         DC    CL1'8'
         DC    CL1'9'
         DC    CL1'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
@0       EQU   00
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
COMPTR   EQU   @03
REG1     EQU   @01
REG2     EQU   @02
R11      EQU   @11
R12      EQU   @12
R0       EQU   @00
R1       EQU   @01
I        EQU   @04
R5       EQU   @05
R6       EQU   @06
R14      EQU   @14
R15      EQU   @15
R2       EQU   @02
COMMON   EQU   0
COMMONA  EQU   COMMON
MSGFLAGS EQU   COMMONA+3
FMSG3    EQU   MSGFLAGS
FLAGS    EQU   COMMONA+4
FANYINV  EQU   FLAGS
FOVER20  EQU   FLAGS
@NM00002 EQU   FLAGS+1
FADDBC   EQU   @NM00002
FMN      EQU   @NM00002
FBRDCST  EQU   @NM00002
FUSER    EQU   @NM00002
FCNS     EQU   @NM00002
@NM00003 EQU   FLAGS+2
FDEL     EQU   @NM00003
FLISTALL EQU   @NM00003
FLIST    EQU   @NM00003
FNOW     EQU   @NM00003
FLOGON   EQU   @NM00003
FALL     EQU   @NM00003
FTEXT    EQU   @NM00003
FERRID   EQU   @NM00003
@NM00004 EQU   FLAGS+3
FSOURCE  EQU   @NM00004
M1IND    EQU   COMMONA+8
IDCNT    EQU   COMMONA+12
RETVATT1 EQU   COMMONA+17
TBEG     EQU   COMMONA+20
CSCBPTR  EQU   COMMONA+21
TEXTLENG EQU   COMMONA+28
ACCESSOR EQU   COMMONA+29
CBCMSGNO EQU   COMMONA+32
CBCCONID EQU   COMMONA+34
MSG1EXT  EQU   COMMONA+36
COMMONB  EQU   COMMON+160
COMBUF   EQU   COMMONB
COMMONC  EQU   COMMON+284
IDUSRID  EQU   COMMONC
SDIOPARM EQU   COMMONC+168
@NM00006 EQU   SDIOPARM
@NM00007 EQU   SDIOPARM+1
PARMLST  EQU   0
CSCBADR  EQU   PARMLST
COMMAND  EQU   PARMLST+4
COMAREA  EQU   PARMLST+8
BASEADR  EQU   PARMLST+12
CHAIN    EQU   0
CHFLG    EQU   CHAIN+4
CHSTS    EQU   CHFLG+2
CHAD     EQU   CHSTS
CHDL     EQU   CHSTS
CHFC     EQU   CHSTS
CHABTERM EQU   CHSTS
CHACT    EQU   CHFLG+3
CHKEY    EQU   CHAIN+8
CHPKE    EQU   CHAIN+28
CHTJID   EQU   CHAIN+30
CHACT1   EQU   CHAIN+35
CHASM    EQU   CHAIN+40
CHCIBP   EQU   CHASM+4
CHRGNSZ  EQU   CHASM+8
CHSHORT  EQU   CHASM+24
CHSWT    EQU   CHSHORT
SENDCSCB EQU   0
CHAINS01 EQU   CHASM
CHBUF    EQU   CHAINS01
CHTYPE   EQU   CHAINS01+124
CHTRSTAT EQU   CHAINS01+125
CHCSYSO  EQU   CHAINS01+134
*                                      START UNREFERENCED COMPONENTS
CHLAST   EQU   CHAINS01+136
CHSPA    EQU   CHAINS01+135
CHUSERID EQU   CHCSYSO
CHJB     EQU   CHCSYSO
CHDUMP   EQU   CHCSYSO
CHQUE    EQU   CHCSYSO
CHHOLD   EQU   CHCSYSO
CHOUT    EQU   CHCSYSO
CHINN    EQU   CHCSYSO
CHALL    EQU   CHCSYSO
CHINC    EQU   CHAINS01+132
CHPEND   EQU   CHAINS01+128
CHARID   EQU   CHAINS01+127
CHCNID   EQU   CHAINS01+126
@NM00013 EQU   CHTRSTAT
CHTSL    EQU   CHTRSTAT
CHTS     EQU   CHTRSTAT
CHINITL  EQU   CHTRSTAT
CHINIT   EQU   CHTRSTAT
CHJOBSL  EQU   CHTRSTAT
CHJOBS   EQU   CHTRSTAT
CHDEF    EQU   CHTYPE
CHHIAR   EQU   CHTYPE
CHARSV29 EQU   CHTYPE
CHARSV28 EQU   CHTYPE
CHARSV27 EQU   CHTYPE
CHARSV26 EQU   CHTYPE
CHARSV25 EQU   CHTYPE
CHDSTAT  EQU   CHTYPE
CHARSV16 EQU   CHSHORT+108
CHARSV15 EQU   CHSHORT+104
CHJSCBVS EQU   CHSHORT+100
CHUSCVS  EQU   CHSHORT+96
@NM00012 EQU   CHSHORT+92
@NM00011 EQU   CHSHORT+88
CHSQA    EQU   CHSHORT+52
CHQPA    EQU   CHSHORT+16
CHJCL    EQU   CHSHORT+12
CHSPC    EQU   CHSHORT+8
CHSPB    EQU   CHSHORT+4
CHTCB    EQU   CHSHORT+1
CHARSV23 EQU   CHSWT
CHARSV22 EQU   CHSWT
CHARSV21 EQU   CHSWT
CHAC     EQU   CHSWT
CHPSF    EQU   CHSWT
CHPSD    EQU   CHSWT
CHJCT    EQU   CHSWT
CHARSV20 EQU   CHSWT
CHCECB   EQU   CHASM+20
CHECB    EQU   CHASM+16
CHRGNAD  EQU   CHASM+12
CHARSV18 EQU   CHRGNSZ+1
CHRPRTY  EQU   CHRGNSZ
@NM00010 EQU   CHCIBP
CHEND    EQU   CHCIBP
CHECBP   EQU   CHASM
CHDER    EQU   CHAIN+36
CHARSV10 EQU   CHACT1
CHARSV09 EQU   CHACT1
CHARSV08 EQU   CHACT1
CHARSV07 EQU   CHACT1
CHARSV06 EQU   CHACT1
CHARSV05 EQU   CHACT1
CHARSV04 EQU   CHACT1
CHRDWTR  EQU   CHACT1
CHARSV30 EQU   CHAIN+34
CHQID    EQU   CHAIN+32
CHASID   EQU   CHTJID
CHUCMP   EQU   CHAIN+29
CHTRKID  EQU   CHPKE
CHCIBCTR EQU   CHAIN+27
CHUNIT   EQU   CHAIN+24
CHCLS    EQU   CHAIN+16
CHPARM   EQU   CHKEY
CHIFY    EQU   CHACT
CHAIFX   EQU   CHACT
CHCLD    EQU   CHACT
CHCL     EQU   CHACT
CHDSI    EQU   CHACT
CHDISC   EQU   CHACT
CHTERM   EQU   CHACT
CHSWAP   EQU   CHACT
CHQSPC   EQU   CHSTS
CHSOUT   EQU   CHSTS
CHSYS    EQU   CHSTS
CHAP     EQU   CHSTS
CHSZE    EQU   CHFLG+1
CHVCD    EQU   CHFLG
CHPTR    EQU   CHAIN
PARMRCD1 EQU   COMMONC+196
PARMDCB  EQU   COMMONC+192
PARMLMCT EQU   COMMONC+188
PARMDDNM EQU   SDIOPARM+12
PARMIOAD EQU   SDIOPARM+8
PARMRBA  EQU   SDIOPARM+4
PARMFDBK EQU   SDIOPARM+3
PARMKEY  EQU   SDIOPARM+2
P2DEVAD  EQU   @NM00007
P2DEL    EQU   @NM00007
P2CLOSE  EQU   @NM00007
P2WRDAF  EQU   @NM00007
P2WRDI   EQU   @NM00007
P1READ1  EQU   @NM00006
P1CREATE EQU   @NM00006
P1READ   EQU   @NM00006
P1OPEN   EQU   @NM00006
@NM00005 EQU   COMMONC+167
OPERID   EQU   COMMONC+160
COMBUFP  EQU   COMMONA+25
COMI     EQU   COMMONA+24
SDIORC   EQU   COMMONA+16
IDTBL    EQU   COMMONA+13
MSG1EXTP EQU   COMMONA+9
FBADTPUT EQU   @NM00004
FBADRITA EQU   @NM00004
FBADIO   EQU   @NM00004
FMSG1    EQU   @NM00004
FWTO2    EQU   @NM00004
FERRSYN  EQU   @NM00004
FCONSOL  EQU   FSOURCE
FTERM    EQU   FSOURCE
FMAILFL  EQU   @NM00002
FYESBCM  EQU   @NM00002
FNOMSG   EQU   @NM00002
FLISTING EQU   FLAGS
FENDUSL  EQU   FLAGS
FUPUSD   EQU   FLAGS
FCHNMSG  EQU   FLAGS
FBADSEND EQU   FLAGS
FOPEN    EQU   FLAGS
FMSGA    EQU   MSGFLAGS
FMSG9    EQU   MSGFLAGS
FMSG8    EQU   MSGFLAGS
FMSG6    EQU   MSGFLAGS
FMSG5    EQU   MSGFLAGS
FMSG4    EQU   MSGFLAGS
FMSG2    EQU   MSGFLAGS
VALCNT   EQU   COMMONA+2
TPUTRC   EQU   COMMONA+1
@NM00001 EQU   COMMONA
*                                      END UNREFERENCED COMPONENTS
@RT00087 EQU   SCAN1
@RT00091 EQU   TEXT
@RF00113 EQU   OUT2
@RT00120 EQU   ERRSYN
@RT00132 EQU   ALLNOW
@RT00134 EQU   ALLNOW
@RF00134 EQU   MN02
@RF00139 EQU   ERRSYN
@RF00148 EQU   TE2
@RT00158 EQU   QUOTE
@RT00170 EQU   ERRSYN
@RT00177 EQU   ALLNOW
@RT00179 EQU   ALLNOW
@RF00182 EQU   ERRSYN
@RT00210 EQU   TUSER
@RT00212 EQU   TALL
@RT00220 EQU   TROUTE
@RT00222 EQU   TOPER
@RT00225 EQU   TANOW
@RT00232 EQU   TANOW
@RF00232 EQU   ERRSYN
@RT00235 EQU   TUSER
@RT00237 EQU   TALL
@RF00237 EQU   ERRSYN
@RT00243 EQU   ENDRTE
@RT00245 EQU   ENDRTE
@RT00247 EQU   ERRSYN
@RT00253 EQU   ERRSYN
@RT00256 EQU   ERRSYN
@RT00264 EQU   ENDCNS
@RT00266 EQU   ENDCNS
@RT00268 EQU   ERRSYN
@RT00274 EQU   ERRSYN
@RT00277 EQU   ERRSYN
@RT00285 EQU   ULS8
@RT00300 EQU   ULS9
@RT00302 EQU   ULS9
@RT00304 EQU   ERRSYN
@RT00306 EQU   ERRUID
@RT00309 EQU   GOODCHAR
@RT00324 EQU   ULS9A
@RT00333 EQU   ENDUL
@RT00335 EQU   ULSCAN6
@RT00338 EQU   MSG1A
@RT00350 EQU   ULS9
@RT00352 EQU   ULS9
@RT00354 EQU   ERRSYN
@RT00365 EQU   LSTCK
@RT00367 EQU   ERRSYN
@RF00369 EQU   ENDCB
@RT00372 EQU   ERRSYN
@RF00387 EQU   ERRSYN
@RT00396 EQU   TANOW
@RT00398 EQU   TANOW
@RF00400 EQU   ERRSYN
@RF00406 EQU   ENDCB
@RT00409 EQU   ENDCB
@RT00413 EQU   CLNUP
@RT00431 EQU   CLNUP
@EL01    EQU   @EL00001
@ENDDATA EQU   *
         END   IEEVSEND
