         TITLE 'IKJEES11 - USER SEND CP, OPERATOR/CN/NOW               *
                       '
IKJEES11 CSECT ,                                                   0001
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN R,LV=(0)
         LR    @12,@01                                             0001
         USING @DATD,@12                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @12,8(,@13)                                         0001
         LR    @13,@12                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MVC   @PC00001(4),0(@01)                                  0001
         MODID BRANCH=YES
         EJECT
         EJECT
REGS     DS    0H                                                  0064
*         COMPTR = R1;              /* SAVE REG1 PARM LIST ADDRESS   */
         ST    R1,COMPTR                                           0070
*         RESPECIFY (J) RESTRICTED; /* LOOP CONTROL            Y02676*/
*         RESPECIFY (R5) RESTRICTED; /* GEN'D ARITHMETIC       Y02676*/
*         RESPECIFY (PDLPTRR) RESTRICTED; /* PDL BASE          Y02676*/
*         CPPLPTR = COMCPPL;        /* SET BASE FOR CPPL STRUCTURE   */
         L     @10,COMPTR                                          0074
         L     @10,COMCPPL(,@10)                                   0074
         ST    @10,CPPLPTR                                         0074
*         PSCBPTR  = CPPLPSCB;      /* SET BASE FOR PSCB STRUCTURE   */
         MVC   PSCBPTR(4),CPPLPSCB(@10)                            0075
*         SDECB = SDECB && SDECB;   /* CLEAR SEND ECB TO ZERO        */
         XC    SDECB(4),SDECB                                      0076
* GEN(EJECT);                                                      0077
         EJECT
* /*                 -    P    A    R    S    E    -                 */
* /*                                                                 */
* /*      THE FOLLOWING MACROS ARE USED TO BUILD A PCL AND MAP A     */
* /*      PDL FOR PARSE.                                             */
* /*      PARSE WILL USE THE PCL TO SYNTAX CHECK THE SEND COMMAND    */
* /*      ACCORDING TO THE FORMAT:                                   */
* /*                    ×-                    ×-     -× ×-      -×-× */
* /*                    × USER(USERID LIST)   × NOW   × × NOWAIT × × */
* /*                    ×                     ×       × ×        × × */
* /*                    ×                     × LOGON × × WAIT   × × */
* /*      SEND  'TEXT' -×                     ×       × ×-      -× ×-*/
* /*                    ×                     ×       ×            × */
* /*                    ×                     × SAVE  ×            × */
* /*                    ×                     ×-     -×            × */
* /*                    × OPERATOR(INTEGER)                        × */
* /*                    ×                                          × */
* /*                    × CN(INTEGER)                              × */
* /*                    ×-                                        -× */
* /*      DEFAULTS ARE OPERATOR(2), NOW, NOWAIT                Y02676*/
*         GOTO  DOPARS;             /* BRANCH AROUND PCL             */
         B     DOPARS                                              0078
*         GEN;                                                     0079
          USING SENDPDL,PDLPTRR     SET ADDRESSABILITY FOR PDL
SENDPCL  IKJPARM    DSECT=SENDPDL
PDLMSGT  IKJPOSIT  QSTRING,ASIS,                                       X
               PROMPT='MESSAGE TEXT ENCLOSED IN APOSTROPHES',          X
               HELP=('MESSAGE TEXT FOR SEND IN QUOTES')
PDLSDEE  IKJKEYWD   DEFAULT='OPERATOR'
          IKJNAME    'OPERATOR',SUBFLD=PDLCNSL
          IKJNAME    'USER',SUBFLD=PDLUSRID
          IKJNAME    'CN',SUBFLD=PDLOPER                         Y02676
PDLWHEN  IKJKEYWD   DEFAULT='NOW'
          IKJNAME    'NOW'
          IKJNAME    'LOGON'
          IKJNAME    'SAVE'                                      Y02676
PDLWAIT  IKJKEYWD   DEFAULT='NOWAIT'                             Y02676
          IKJNAME    'NOWAIT'                                    Y02676
          IKJNAME    'WAIT'                                      Y02676
PDLUSRID IKJSUBF
PDLLIST  IKJIDENT   'USERID',LIST,ASTERISK,                      Y02676X
               MAXLNTH=7,FIRST=ALPHA,OTHER=ALPHANUM,                   X
               PROMPT='USERID(S) TO WHOM MESSAGE IS TO BE SENT',       X
               HELP=('USERID(S) OF MESSAGE DESTINATION')
PDLCNSL  IKJSUBF
PDLRTCD  IKJIDENT   'ROUTING CODE',                              Y02676X
               MAXLNTH=2,FIRST=NUMERIC,OTHER=NUMERIC,                  X
               DEFAULT='2',                                            X
               HELP=('INTEGER FROM 1 TO 15 SPECIFYING ROUTING CODE OF CX
               ONSOLE TO RECEIVE MESSAGE')
PDLOPER  IKJSUBF
PDLCNID  IKJIDENT   'CONSOLE ID',                                Y02676X
               MAXLNTH=2,FIRST=NUMERIC,OTHER=NUMERIC,            Y02676X
               PROMPT='CONSOLE ID',                              Y02676X
               HELP=('INTEGER FROM 0 TO 64 SPECIFYING CONSOLE IDENTIFIEX
               R OF CONSOLE TO RECEIVE MESSAGE')                 Y02676
          IKJENDP
*         GEN(EJECT);                                              0080
         EJECT
*DOPARS:                            /* FROM ABOVE PCL                */
*         PPLPTR   = ADDR(AUTOPARS);/* SET BASE FOR PPL STRUCTURE    */
DOPARS   LA    @10,AUTOPARS                                        0081
         ST    @10,PPLPTR                                          0081
*         PPLUPT   = CPPLUPT;       /* PTR TO UPT                    */
         L     @07,CPPLPTR                                         0082
         MVC   PPLUPT(4,@10),CPPLUPT(@07)                          0082
*         PPLECT   = CPPLECT;       /* PTR TO ECT                    */
         MVC   PPLECT(4,@10),CPPLECT(@07)                          0083
*         PPLECB   = ADDR(SDECB);   /* PTR TO ECB FOR SEND           */
         LA    @15,SDECB                                           0084
         ST    @15,PPLECB(,@10)                                    0084
*         PPLPCL   = PCLPTR;        /* PTR TO PCL FROM PARSE MACROS  */
         MVC   PPLPCL(4,@10),PCLPTR                                0085
*         PPLANS   = ADDR(PDLPTR);  /* PTR TO ANSWER PLACE           */
         L     @01,COMPTR                                          0086
         LA    @15,PDLPTR(,@01)                                    0086
         ST    @15,PPLANS(,@10)                                    0086
*         PPLCBUF  = CPPLCBUF;      /* PTR TO COMMAND BUFFER         */
         MVC   PPLCBUF(4,@10),CPPLCBUF(@07)                        0087
*         PPLUWA   = 0;             /* PTR TO USER WORK AREA = ZERO  */
         SR    @07,@07                                             0088
         ST    @07,PPLUWA(,@10)                                    0088
*         R1 = ADDR(PPL);           /* SET REG 1 = PTR TO PARM LIST  */
         LR    R1,@10                                              0089
*         GEN;                                                     0090
          LINK   EP=IKJPARS
*         T15 = R15;                /* SAVE RET CODE FROM REG 15     */
         STC   R15,T15                                             0091
*         PDLPTRR = PDLPTR;         /* SET ADDR.OF PDL IN REGISTER   */
         L     @10,COMPTR                                          0092
         L     PDLPTRR,PDLPTR(,@10)                                0092
*         IF T15 > 0                /* CHECK RETURN CODE FROM PARSE  */
*           THEN                    /* RETURN CODE IS NOT ZERO       */
         CLI   T15,0                                               0093
         BH    @RT00093                                            0093
*             GOTO BADPARSE;        /* GIVE WARNING MSG -          0094
*                                      COMMAND SYSTEM ERROR          */
*         FPARS = '1'B;             /* SET FLAG FOR GOOD PARSE       */
         OI    FPARS(@10),B'00100000'                              0095
*         CPDLMSGT = ADDR(PDLMSGT); /* SAVE MSG TEXT PDE PTR   Y02676*/
         LA    @07,PDLMSGT                                         0096
         ST    @07,CPDLMSGT(,@10)                                  0096
*                                   /* MUST BE = SENDPDL AS    Y02676
*                                      USED FOR IKJRLSA              */
*         IF PDLMLL = 0             /* IF MSG TEXT LENGTH = 0        */
*           THEN                    /* MSG TEXT LENGTH = 0, NULL MSG */
         MVC   @TF00001(2),PDLMLL                                  0097
         LH    @10,@TF00001                                        0097
         LTR   @10,@10                                             0097
         BZ    @RT00097                                            0097
*             GOTO EXIT1;           /* NO MSG SPEC'D. NO ACTION DONE.*/
*         /* TEST IF 'USER' SPEC'D IN SEND COMMAND.                  */
*          IF PDLSDEE = 2           /* TEST PDE FOR 'USER' INDICATOR */
*           THEN                    /* PDE = 2, 'USER' SPEC'D        */
         CLC   PDLSDEE(2),@CH00082                                 0099
         BE    @RT00099                                            0099
*             GOTO TUSER;           /* CON'T PARM CHECK IN PDL       */
* GEN(EJECT);                                                      0101
         EJECT
*         WTOLIST = WTOLIST && WTOLIST; /* CLEAR WTO LIST      Y02676*/
         XC    WTOLIST(141),WTOLIST                                0102
*         WTOROUT = ROUTCD(2);      /* MASTER CNS INFO         Y02676*/
         MVC   WTOROUT(2),ROUTCD+2                                 0103
*         IF PDLSDEE ^= 3           /* CONSOLE ID SPEC'D       Y02676*/
*           THEN                    /* NO, HANDLE ROUTE CODE   Y02676*/
         CLC   PDLSDEE(2),@CH00084                                 0104
         BNE   @RT00104                                            0104
*             GOTO WTOL1;           /* SKIP CONSOLE HANDLING   Y02676*/
* /*                                                           Y02676*/
* /*         CONSOLE ID IS GOTTEN FROM PDL, CONVERTED, AND           */
* /*         LEFT IN RESTRICTED REGISTER R5                          */
* /*                                                                 */
*         WORK8 = WORK8 && WORK8;   /* CLEAR WORKAREA          Y02676*/
         XC    WORK8(8),WORK8                                      0106
*         IF PDLCLL = 1             /* CONSOLE ID 1 DIGIT      Y02676*/
*           THEN                    /* YES, 1 DIGIT TO COPY    Y02676*/
         CLC   PDLCLL(2),@CH00034                                  0107
         BNE   @RF00107                                            0107
*             WORK8(8) = PDLCPTR -> CONSID(1);                     0108
         L     @10,PDLCPTR                                         0108
         MVC   WORK8+7(1),CONSID(@10)                              0108
*           ELSE                    /* 2 DIGITS MUST BE COPIED Y02676*/
*             WORK8(7:8) = PDLCPTR -> CONSID;                      0109
         B     @RC00107                                            0109
@RF00107 L     @10,PDLCPTR                                         0109
         MVC   WORK8+6(2),CONSID(@10)                              0109
*         GEN;                                                     0110
@RC00107 DS    0H                                                  0110
          PACK  WORK8+6(2),WORK8+6(2)  PACK CONSOLE ID           Y02676
          CVB   R5,WORK8               CONVERT TO BINARY         Y02676
*         IF R5 <= 64               /* CONSOLE ID VALID        Y02676*/
*           THEN                    /* YES, USE CONSOLE ID     Y02676*/
         CH    R5,@CH00914                                         0111
         BH    @RF00111                                            0111
*             WTOMCSF1 = '1'B;      /* SET MCSFLAG             Y02676*/
         OI    WTOMCSF1,B'01000000'                                0112
*         GOTO WTOL2;               /* SKIP ROUTE CODE HANDLNG Y02676*/
         B     WTOL2                                               0113
*WTOL1:                             /* ASSUME 'OPERATOR'       Y02676*/
* /*                                                                 */
* /*         ROUTING CODE IS GOTTEN FROM PDL, CONVERTED, AND         */
* /*         PLACED IN WTO PARM LIST                                 */
* /*                                                                 */
*         WORK8 = WORK8 && WORK8;   /* SET WORK8 TO ZERO             */
WTOL1    XC    WORK8(8),WORK8                                      0114
*         IF PDLRLL = 1             /* IF ROUTE CODE IS 1 DIGIT ONLY */
*           THEN                    /* YES, ROUTE CODE IS 1 DIGIT    */
         CLC   PDLRLL(2),@CH00034                                  0115
         BNE   @RF00115                                            0115
*             WORK8(8) = PDLRPTR -> ROUTCODE(1);                   0116
         L     @10,PDLRPTR                                         0116
         MVC   WORK8+7(1),ROUTCODE(@10)                            0116
*           ELSE                    /* ROUTE CODE IS 2 DIGITS        */
*             WORK8(7:8)=PDLRPTR -> ROUTCODE;                      0117
         B     @RC00115                                            0117
@RF00115 L     @10,PDLRPTR                                         0117
         MVC   WORK8+6(2),ROUTCODE(@10)                            0117
*         GEN;                                                     0118
@RC00115 DS    0H                                                  0118
          PACK  WORK8+6(2),WORK8+6(2)  PACK THE ROUTING CODE SPEC'D
          CVB   R5,WORK8               CONVERT ROUTE CODE TO BINARY
*         IF R5 > 0 & R5 <= DIM(ROUTCD) /* ROUTE CODE VALID    Y02676*/
*           THEN                    /* YES, USE ROUTE CODE     Y02676*/
         LTR   R5,R5                                               0119
         BNP   @RF00119                                            0119
         CH    R5,@CH00073                                         0119
         BH    @RF00119                                            0119
*             WTOROUT = ROUTCD(R5); /* SET ROUTE CODE FOR WTO  Y02676*/
         LR    @10,R5                                              0120
         AR    @10,@10                                             0120
         LA    @07,ROUTCD-2(@10)                                   0120
         MVC   WTOROUT(2),0(@07)                                   0120
*WTOL2:                              /* TEXT + USERID + 1(BLANK) , 0121
*                                      IS THIS GREATER THAN WTOMAX   */
*         IF PDLMLL + PSCBUSRL + 1 > WTOMAX                        0121
*           THEN                    /* YES, 2 WTO'S ARE NEEDED       */
@RF00119 DS    0H                                                  0121
WTOL2    SR    @10,@10                                             0121
         IC    @10,WTOMAX                                          0121
         MVC   @TF00001(2),PDLMLL                                  0121
         LH    @07,@TF00001                                        0121
         L     @01,PSCBPTR                                         0121
         MVC   @ZT00003+3(1),PSCBUSRL(@01)                         0121
         A     @07,@ZT00003                                        0121
         AH    @07,@CH00034                                        0121
         CR    @07,@10                                             0121
         BNH   @RF00121                                            0121
*            DO;                    /* SET UP FOR 2 WTO'S            */
*             FWTO2 = '1'B;         /* SET FLAG FOR SECOND WTO       */
         L     @07,COMPTR                                          0123
         OI    FWTO2(@07),B'00001000'                              0123
*             IF PDLMLL > WTOMAX    /* IS MSG LENGTH MORE THAN MAX   */
*               THEN                /* YES, MSG TEXT LONGER THAN MAX */
         MVC   @TF00001(2),PDLMLL                                  0124
         LH    @07,@TF00001                                        0124
         MVC   @ZT00003+3(1),WTOMAX                                0124
         C     @07,@ZT00003                                        0124
         BNH   @RF00124                                            0124
*                 MLENG = WTOMAX;   /* SET WTO MSG LENG TO MAXIMUM   */
         STH   @10,MLENG                                           0125
*               ELSE                /* NO, MSG TEXT LESS THAN MAX    */
*                 MLENG = PDLMLL;   /* SET WTO MSG LENG TO TEXT LENG */
         B     @RC00124                                            0126
@RF00124 MVC   MLENG(2),PDLMLL                                     0126
*            END;                                                  0127
*           ELSE                    /*TEXT + USERID +1 (FOR BLANK  0128
*                                     BEFORE USERID) IS NOT GREATER
*                                     THAN MAX LENGTH FOR WTO MSG -
*                                     ONLY 1 WTO WILL BE USED.       */
*             MLENG = PDLMLL;       /* SET WTO MSG LENG TO TEXT LENG */
         B     @RC00121                                            0128
@RF00121 MVC   MLENG(2),PDLMLL                                     0128
*         MI = 1;                   /* SET INDEX TO WTO TEXT AREA    */
@RC00121 MVI   MI,X'01'                                            0129
*WTOL4:                             /* PUT MSG TEXT INTO WTO LIST    */
*                                   /* PUT MSG TEXT INTO WTO LIST    */
*         WTOTEXT(MI:MLENG) =  PDLMPTR -> PDLTEXT;                 0130
WTOL4    SR    @10,@10                                             0130
         IC    @10,MI                                              0130
         LA    @07,WTOTEXT-1(@10)                                  0130
         LH    @15,MLENG                                           0130
         LR    @14,@15                                             0130
         SR    @14,@10                                             0130
         L     @01,PDLMPTR                                         0130
         EX    @14,@SM00952                                        0130
*         MI = MI + MLENG;          /* BUMP INDEX TO CHAR AFTER TEXT */
         AR    @10,@15                                             0131
         STC   @10,MI                                              0131
*WTOL6:   IF FWTO2 = '0'B           /* IS FLAG FOR 2ND WTO OFF       */
*           THEN                    /* YES, ONLY 1 WTO IS NEEDED     */
WTOL6    L     @10,COMPTR                                          0132
         TM    FWTO2(@10),B'00001000'                              0132
         BNZ   @RF00132                                            0132
*            DO;                    /* PUT USERID BEHIND MSG TEXT    */
*             WTOTEXT(MI) = ' ';    /* INSERT BLANK BEFORE USERID OF
*                                      SENDER                        */
         SR    @10,@10                                             0134
         IC    @10,MI                                              0134
         LA    @07,WTOTEXT-1(@10)                                  0134
         MVI   0(@07),C' '                                         0134
*             MI = MI + 1;          /* BUMP INDEX PAST BLANK         */
         AH    @10,@CH00034                                        0135
         STC   @10,MI                                              0135
*             WTOTEXT(MI:MI+PSCBUSRL) = PSCBUSER(1:PSCBUSRL);      0136
         LA    @07,WTOTEXT-1(@10)                                  0136
         L     @15,PSCBPTR                                         0136
         SR    @14,@14                                             0136
         IC    @14,PSCBUSRL(,@15)                                  0136
         EX    @14,@SM00954                                        0136
*             MI = MI + PSCBUSRL;     /* BUMP INDEX TO NEXT CHAR     */
         AR    @10,@14                                             0137
         STC   @10,MI                                              0137
*            END;                                                  0138
*         WTOMCSF0 = '1'B;          /* SET BIT FOR ROUTING AND     0139
*                                      DESCRIPTOR CODES FOLLOW MSG 0139
*                                      TEXT IN BUFFER                */
*                                                                  0139
@RF00132 OI    WTOMCSF0,B'10000000'                                0139
*        WTOTEXT(MI:MI+1) = WTODESC; /* MOVE DESCRIPTOR CODE INTO  0140
*                                       WTO PARM LIST          M1641*/
         SR    @10,@10                                             0140
         IC    @10,MI                                              0140
         LA    @07,WTOTEXT-1(@10)                                  0140
         MVC   0(2,@07),WTODESC                                    0140
*        WTOTEXT(MI+2:MI+3) = WTOROUT; /* MOVE ROUTING CODE AFTER  0141
*                                         WTO MSG TEXT         M1641*/
         LA    @07,WTOTEXT+1(@10)                                  0141
         MVC   0(2,@07),WTOROUT                                    0141
*         WTOMSGL  = MI + 3;        /* MSG TEXT LENG + 4 = WTOMSGL   */
         AH    @10,@CH00084                                        0142
         STH   @10,WTOMSGL                                         0142
*         R1 = ADDR(WTOLIST);       /* REG 1 = ADDR WTO PARM LIST    */
         LA    R1,WTOLIST                                          0143
*         R0 = R5;                  /* REG0 = CONSOLE ID,      Y02676
*                                      IF SPECIFIED                  */
         LR    R0,R5                                               0144
*         GEN  (WTO ,MF=(E,(1)) );  /* ISSUE WTO                     */
         WTO ,MF=(E,(1))
*         IF FWTO2 = '0'B           /* TEST FLAG FOR ANOTHER WTO     */
*           THEN                    /* NO OTHER WTO NEEDED           */
         L     @10,COMPTR                                          0146
         TM    FWTO2(@10),B'00001000'                              0146
         BZ    @RT00146                                            0146
*             GOTO EXITCODE;        /* END PROCESSING                */
*         FWTO2 = '0'B;             /* TURN FLAG OFF FOR 2ND WTO     */
         NI    FWTO2(@10),B'11110111'                              0148
*         MLENG = PDLMLL - MLENG;   /* SET LENGTH STILL TO BE WTO'ED */
         MVC   @TF00001(2),PDLMLL                                  0149
         LH    @10,@TF00001                                        0149
         SH    @10,MLENG                                           0149
         STH   @10,MLENG                                           0149
*         MI =1;                    /* RESET INDEX TO WTO MSG TO 1   */
         MVI   MI,X'01'                                            0150
*         IF MLENG = 0              /* TEST IF ANY MORE MSG TEXT     */
*           THEN                    /* NO, ONLY THE USERID IS LEFT   */
         LTR   @10,@10                                             0151
         BZ    @RT00151                                            0151
*             GOTO WTOL6;           /* GOTO PUT OUT USERID OF SENDER */
*           ELSE;                   /* SOME MSG TEXT REMAINS         */
*         PDLMPTR = PDLMPTR + WTOMAX; /* BUMP PTR TO MSG TEXT IN PDL */
         SR    @10,@10                                             0154
         IC    @10,WTOMAX                                          0154
         A     @10,PDLMPTR                                         0154
         ST    @10,PDLMPTR                                         0154
*         GOTO WTOL4;               /* MOVE MSG TEXT AND USERID TO 0155
*                                      WTO PARM LIST                 */
         B     WTOL4                                               0155
* GEN(EJECT);                                                      0156
         EJECT
*TUSER:                             /* HANDLE 'USER'           Y02676*/
*         IF PDLMLL > MSGMAX        /* MSG TEXT TOO LONG       Y02676*/
*           THEN                    /* YES, TRUNCATE           Y02676*/
TUSER    LH    @10,MSGMAX                                          0157
         MVC   @TF00001(2),PDLMLL                                  0157
         CH    @10,@TF00001                                        0157
         BNL   @RF00157                                            0157
*             DO;                                                  0158
*               FMSG0 = '1'B;       /* SET FLAG FOR MSG        Y02676*/
         L     @07,COMPTR                                          0159
         OI    FMSG0(@07),B'00000001'                              0159
*               PDLMLL = MSGMAX;    /* SET LENGTH TO MAX       Y02676*/
         ST    @10,@TF00001                                        0160
         MVC   PDLMLL(2),@TF00001+2                                0160
*             END;                                                 0161
*         USLPTR = ADDR(PDLLIST);   /* SET BASE TO FIRST PDE IN LIST */
@RF00157 LA    @10,PDLLIST                                         0162
         ST    @10,USLPTR                                          0162
*IDLP:                              /* PUT USERID INTO IDUSRID       */
*         DO J = 1 TO DIM(IDUSRID);                                0163
IDLP     LA    J,1                                                 0163
@DL00163 DS    0H                                                  0164
*           IDUSRID(J) = ' ';       /* BLANK USERID            Y02676*/
         LR    @10,J                                               0164
         SLA   @10,3                                               0164
         L     @07,COMPTR                                          0164
         L     @07,IDTBL-1(,@07)                                   0164
         LA    @07,0(,@07)                                         0164
         ST    @10,@TF00001                                        0164
         ALR   @10,@07                                             0164
         AL    @10,@CF00959                                        0164
         MVI   IDUSRID+1(@10),C' '                                 0164
         MVC   IDUSRID+2(6,@10),IDUSRID+1(@10)                     0164
         MVI   IDUSRID(@10),C' '                                   0164
*           IDUSRID(J,1:USLLL) = USLUSPTR -> USERID(1:USLLL);      0165
         LR    @10,@07                                             0165
         AL    @10,@TF00001                                        0165
         AL    @10,@CF00959                                        0165
         L     @15,USLPTR                                          0165
         LH    @14,USLLL(,@15)                                     0165
         BCTR  @14,0                                               0165
         L     @01,USLUSPTR(,@15)                                  0165
         EX    @14,@SM00960                                        0165
*                                   /* COPY USERID FROM PDE    Y02676*/
*           IF IDUSRID(J,1) = '*'   /* ASTERISK SPEC'D         Y02676*/
*             THEN                  /* YES, SUBSTITUTE SENDER  Y02676
*                                      USERID FROM PSCB              */
         LR    @10,@07                                             0166
         AL    @10,@TF00001                                        0166
         AL    @10,@CF00959                                        0166
         CLI   IDUSRID(@10),C'*'                                   0166
         BNE   @RF00166                                            0166
*               IDUSRID(J) = PSCBUSER;                             0167
         AL    @07,@TF00001                                        0167
         AL    @07,@CF00959                                        0167
         MVI   IDUSRID+7(@07),C' '                                 0167
         L     @10,PSCBPTR                                         0167
         MVC   IDUSRID(7,@07),PSCBUSER(@10)                        0167
*           USLPTR = USLCHN;        /* STEP TO NEXT PDE        Y02676*/
@RF00166 L     @10,USLPTR                                          0168
         L     @10,USLCHN(,@10)                                    0168
         ST    @10,USLPTR                                          0168
*           IF USLPTR = LASTCHN     /* IS THIS THE LAST PDE?   Y02676*/
*             THEN                  /* YES,                   Y02676*/
         CL    @10,LASTCHN                                         0169
         BE    @RT00169                                            0169
*               GOTO SETCNT;        /* QUIT LOOP               Y02676*/
*         END;                                                     0171
         AH    J,@CH00034                                          0171
         CH    J,@CH00076                                          0171
         BNH   @DL00163                                            0171
*         FMSGE = '1'B;             /* SOME USERIDS IGNORED    Y02676*/
         L     @10,COMPTR                                          0172
         OI    FMSGE(@10),B'01000000'                              0172
*         J = J - 1;                /* ACTUAL COUNT            Y02676*/
         BCTR  J,0                                                 0173
*SETCNT:  IDCNT = J;                /* SET IDCNT = NO.ENTRIES IDUSRID*/
SETCNT   L     @10,COMPTR                                          0174
         STC   J,IDCNT(,@10)                                       0174
*         VALCNT = 0;               /* SET COUNT OF VALID USERIDS    */
         MVI   VALCNT(@10),X'00'                                   0175
*         IF PDLWHEN = 3            /* 'SAVE' SPECIFIED        Y02676*/
*           THEN                    /* YES, NO MSG NOW         Y02676*/
         CLC   PDLWHEN(2),@CH00084                                 0176
         BE    @RT00176                                            0176
*             GOTO DODAIR;          /* EXIT TO ACCESS          Y02676
*                                      SYS1.BRODCAST                 */
*         GEN(EJECT);                                              0178
         EJECT
*         M7IND  = 1;               /* SET INDEX TO MSG INSERT AREA  */
         L     @10,COMPTR                                          0179
         MVI   M7IND(@10),X'01'                                    0179
*         MDIND = 1;                /* INIT INSERT INDEX       Y02676*/
         MVI   MDIND(@10),X'01'                                    0180
*         TPUTREG0 = 0;             /* CLEAR DUMMY 'TJID'      Y02676*/
         SR    @10,@10                                             0181
         ST    @10,TPUTREG0                                        0181
*         TPUTREG1 = 0;             /* CLEAR FLAGS             Y02676*/
         ST    @10,TPUTREG1                                        0182
*         IF PDLWAIT = 1            /* 'NOWAIT' SPECIFIED      Y02676*/
*           THEN                    /* YES, SET OPTION FLAG    Y02676*/
         CLC   PDLWAIT(2),@CH00034                                 0183
         BNE   @RF00183                                            0183
*             FNOWAIT = '1'B;                                      0184
         OI    FNOWAIT,B'00010000'                                 0184
*         FUSERID = '1'B;           /* 1- USERID ADDR IN REG 15      */
@RF00183 OI    FUSERID,B'01000000'                                 0185
*         MSGTPTR = ADDR(MSGTEXT);  /* INIT TEXT/BUFFER PTR    Y02676*/
         LA    @10,MSGTEXT                                         0186
         ST    @10,@TF00001                                        0186
         MVC   MSGTPTR(3),@TF00001+1                               0186
*         MSGTEXT(1:PDLMLL) = PDLMPTR -> PDLTEXT; /* COPY MSG  Y02676*/
         MVC   @TF00001(2),PDLMLL                                  0187
         LH    @10,@TF00001                                        0187
         LR    @07,@10                                             0187
         BCTR  @07,0                                               0187
         L     @01,PDLMPTR                                         0187
         EX    @07,@SM00963                                        0187
*         MLENG = PDLMLL;           /* SET MSG LENGTH FROM PDE       */
         STH   @10,MLENG                                           0188
*         MI = MLENG+1;             /* SET INDEX TO END OF SEND MSG
*                                      TEXT IN BUFFER                */
         LA    @07,1                                               0189
         LR    @15,@10                                             0189
         AR    @15,@07                                             0189
         STC   @15,MI                                              0189
*         MSGTEXT(MI) = ' ';        /* INSERT BLANK BEFORE USERID    */
         LA    @14,MSGTEXT-1(@15)                                  0190
         MVI   0(@14),C' '                                         0190
*         MI = MI + 1;              /* BUMP INDEX PAST BLANK         */
         AR    @15,@07                                             0191
         STC   @15,MI                                              0191
*         MSGTEXT(MI:MI+PSCBUSRL) = PSCBUSER;  /* PUT USERID OF SENDER
*                                      IN BUFFER AFTER THE MSG TEXT  */
         LA    @14,MSGTEXT-1(@15)                                  0192
         L     @15,PSCBPTR                                         0192
         SR    @09,@09                                             0192
         IC    @09,PSCBUSRL(,@15)                                  0192
         EX    @09,@SM00965                                        0192
*         MLENG = MLENG + PSCBUSRL + 1; /* MLENG = LENGTH OF MSG TEXT
*                                          PLUS USERID OF SENDER     */
         AR    @10,@09                                             0193
         AR    @10,@07                                             0193
         STH   @10,MLENG                                           0193
*       DO J = 1 TO IDCNT;          /* LOOP THRU USERID LIST   Y02676*/
         LR    J,@07                                               0194
         B     @DE00194                                            0194
@DL00194 DS    0H                                                  0195
*         R15 = ADDR(IDUSRID(J));   /* SET UDERID ADDR         Y02676*/
         LR    @10,J                                               0195
         SLA   @10,3                                               0195
         L     @07,COMPTR                                          0195
         L     R15,IDTBL-1(,@07)                                   0195
         LA    R15,0(,R15)                                         0195
         AL    R15,@CF00959                                        0195
         LA    R15,IDUSRID(@10,R15)                                0195
*         R1 = TPUTREG1;            /* FLAGS AND BUFFER PTR    Y02676*/
         L     R1,TPUTREG1                                         0196
*         R0 = TPUTREG0;            /* BUFFER LENGTH           Y02676*/
         L     R0,TPUTREG0                                         0197
*         GEN (TPUT (1),(0),R);     /* ISSUE TPUT MACRO        Y02676*/
         TPUT (1),(0),R
*         T15 = R15;                /* SAVE RET CODE FROM REG 15     */
         STC   R15,T15                                             0199
*         IF T15 = 0                /* RETURN CODE = 0               */
*           THEN                    /* YES, SUCCESSFUL TPUT          */
         CLI   T15,0                                               0200
         BE    @RT00200                                            0200
*             GOTO UPVAL;           /* CONTINUE PROCESSING           */
*         IF T15 = '10'X            /* RETURN CODE = X'10'           */
*           THEN                    /* YES, BAD PARMS PASSED TO TPUT */
         CLI   T15,16                                              0202
         BE    @RT00202                                            0202
*             GOTO BADTPUT;         /* ISSUE WARNING MSG TO SENDER -
*                                      COMMAND SYSTEM ERROR          */
*         IF T15 = '0C'X            /* RETURN CODE = X'0C'           */
*           THEN                    /* YES, USER NOT ACCEPTING MSGS  */
         CLI   T15,12                                              0204
         BNE   @RF00204                                            0204
*            DO;                    /* USER IN 'NO INTERCOM' MODE    */
*             IF PDLWHEN = 2        /* IS 'LOGON' SPEC'D       Y02676*/
*               THEN                /* YES, MSG WILL BE SAVED FOR USER
*                                      IN BROADCAST DATA SET         */
         CLC   PDLWHEN(2),@CH00082                                 0206
         BE    @RT00206                                            0206
*                 GOTO SKPUPVAL;    /* STEP TO NEXT USERID     Y02676*/
*                                   /* 'LOGON' NOT SPEC'D.  USERID 0208
*                                      MUST BE PUT INTO WARNING MSG  */
*             FMSG7 = '1'B;         /* SET FLAG FOR MSG7 TO GO OUT   */
         L     @10,COMPTR                                          0208
         OI    FMSG7(@10),B'00010000'                              0208
*              /*  PUT USERID INTO INSERT FOR WARNING MSG      Y02676*/
*             MSG7INS(M7IND:M7IND+7) = IDUSRID(J);                 0209
         SR    @07,@07                                             0209
         IC    @07,M7IND(,@10)                                     0209
         L     @01,COMMSG7-1(,@10)                                 0209
         LA    @01,0(,@01)                                         0209
         ALR   @01,@07                                             0209
         AL    @01,@CF00967                                        0209
         LR    @15,J                                               0209
         SLA   @15,3                                               0209
         L     @14,IDTBL-1(,@10)                                   0209
         LA    @14,0(,@14)                                         0209
         ALR   @14,@15                                             0209
         AL    @14,@CF00959                                        0209
         MVC   MSG7INS(8,@01),IDUSRID(@14)                         0209
*             M7IND = M7IND + 8;    /* BUMP INDEX TO MSG INSERT AREA */
         AH    @07,@CH00056                                        0210
         STC   @07,M7IND(,@10)                                     0210
*             GOTO UPVAL;           /* STEP TO NEXT USERID     Y02676*/
         B     UPVAL                                               0211
*            END;                                                  0212
*         IF T15 = '04'X            /* BUFFERS UNAVAILABLE     Y02676*/
*           THEN                    /* YES, MSG NOT SENT       Y02676*/
@RF00204 CLI   T15,4                                               0213
         BNE   @RF00213                                            0213
*             DO;                                                  0214
*             IF PDLWHEN = 2        /* IS 'LOGON' SPEC'D       Y02676*/
*                 THEN              /* YES, MSG WILL BE SAVED      0215
*                                      FOR USER IN BROADCAST       0215
*                                      DATA SET                      */
         CLC   PDLWHEN(2),@CH00082                                 0215
         BE    @RT00215                                            0215
*                   GOTO SKPUPVAL;  /* STEP TO NEXT USERID     Y02676*/
*               FMSGD = '1'B;       /* REQUEST MSG             Y02676*/
         L     @10,COMPTR                                          0217
         OI    FMSGD(@10),B'00000100'                              0217
*               MSGDINS(MDIND:MDIND+7) = IDUSRID(J);               0218
         SR    @07,@07                                             0218
         IC    @07,MDIND(,@10)                                     0218
         L     @01,COMMSGD-1(,@10)                                 0218
         LA    @01,0(,@01)                                         0218
         ALR   @01,@07                                             0218
         AL    @01,@CF00967                                        0218
         LR    @15,J                                               0218
         SLA   @15,3                                               0218
         L     @14,IDTBL-1(,@10)                                   0218
         LA    @14,0(,@14)                                         0218
         ALR   @14,@15                                             0218
         AL    @14,@CF00959                                        0218
         MVC   MSGDINS(8,@01),IDUSRID(@14)                         0218
*                                   /* PUT USERID IN INSERT    Y02676*/
*               MDIND = MDIND + 8;  /* UPDATE INSERT INDEX     Y02676*/
         AH    @07,@CH00056                                        0219
         STC   @07,MDIND(,@10)                                     0219
*               GOTO UPVAL;         /* STEP TO NEXT USERID     Y02676*/
         B     UPVAL                                               0220
*             END;                                                 0221
*         IF T15 = '14'X            /* USERID NOT FOUND        Y02676*/
*           THEN                    /* YES, NOT LOGGED ON      Y02676*/
@RF00213 CLI   T15,20                                              0222
         BE    @RT00222                                            0222
*             GOTO SKPUPVAL;        /* USERID NOT PROCESSED    Y02676*/
*UPVAL:                             /* INCREMENT CNT OF VALID USERIDS*/
*         VALCNT = VALCNT+1;        /* BUMP CNT OF VALID USERIDS     */
UPVAL    L     @10,COMPTR                                          0224
         LA    @07,1                                               0224
         MVC   @ZT00003+3(1),VALCNT(@10)                           0224
         A     @07,@ZT00003                                        0224
         STC   @07,VALCNT(,@10)                                    0224
*         IDUSRID(J) = ' ';         /* BLANK ENTRY ON LIST     Y02676*/
         LR    @07,J                                               0225
         SLA   @07,3                                               0225
         L     @10,IDTBL-1(,@10)                                   0225
         LA    @10,0(,@10)                                         0225
         ALR   @10,@07                                             0225
         AL    @10,@CF00959                                        0225
         MVI   IDUSRID+1(@10),C' '                                 0225
         MVC   IDUSRID+2(6,@10),IDUSRID+1(@10)                     0225
         MVI   IDUSRID(@10),C' '                                   0225
*SKPUPVAL:                          /*                         Y02676*/
*       END;                                                       0226
SKPUPVAL AH    J,@CH00034                                          0226
@DE00194 L     @10,COMPTR                                          0226
         MVC   @ZT00003+3(1),IDCNT(@10)                            0226
         C     J,@ZT00003                                          0226
         BNH   @DL00194                                            0226
*         GEN(EJECT);                                              0227
         EJECT
*         IF VALCNT = IDCNT         /* IS VALID CNT EQUAL TOTAL CNT  */
*           THEN                    /* ALL SPEC'D USERS ARE DONE     */
         L     @10,COMPTR                                          0228
         CLC   VALCNT(1,@10),IDCNT(@10)                            0228
         BE    @RT00228                                            0228
*             GOTO EXITCODE;        /* CLEANUP AND RETURN TO TMP     */
*         IF PDLWHEN = 2            /* IS 'LOGON' SPECIFIED    Y02676*/
*           THEN                    /* YES, 'LOGON' SPECIFIED        */
         CLC   PDLWHEN(2),@CH00082                                 0230
         BE    @RT00230                                            0230
*             GOTO DODAIR;          /* ACCESS BROADCAST DATA SET     */
*           ELSE;                   /* 'LOGON' NOT SPECIFIED,      0232
*                                       ISSUE WARNING MSG -        0232
*                                       'USERS (USERID) NOT LOGGED ON*/
*         COMROUT = RMSG2OUT;       /* SET ROUTING INDICATOR FOR S10 */
         MVC   COMROUT(1,@10),RMSG2OUT                             0233
*         GOTO RETS10;              /* RETURN TO S10 TO FINISH       */
*                                                                  0234
         B     RETS10                                              0234
*EXITCODE:                          /* NORMAL RETURN TO IKJEES10     */
*         COMROUT = REXITCOD;       /* SET ROUTING INDICATOR FOR S10 */
EXITCODE L     @10,COMPTR                                          0235
         MVC   COMROUT(1,@10),REXITCOD                             0235
*         GOTO RETS10;              /* RETURN TO S10 TO FINISH       */
*                                                                  0236
         B     RETS10                                              0236
*EXIT1:                             /* ROUTE TO 'EXIT1' IN IKJEES10  */
*         COMROUT = REXIT1;         /* SET ROUTING INDICATOR FOR S10 */
EXIT1    L     @10,COMPTR                                          0237
         MVC   COMROUT(1,@10),REXIT1                               0237
*         GOTO RETS10;              /* RETURN TO S10 TO FINISH       */
*                                                                  0238
         B     RETS10                                              0238
*BADPARSE:                          /* UNSUCCESSFUL RETURN FROM PARSE*/
*         COMROUT = RPARSE;         /* SET ROUTING INDICATOR FOR S10 */
BADPARSE L     @10,COMPTR                                          0239
         MVC   COMROUT(1,@10),RPARSE                               0239
*         COMRETC = T15;            /* SET PARSE RET CODE IN COMMON  */
         SR    @07,@07                                             0240
         IC    @07,T15                                             0240
         STH   @07,COMRETC(,@10)                                   0240
*         GOTO RETS10;              /* RETURN TO S10 TO FINISH       */
*                                                                  0241
         B     RETS10                                              0241
*BADTPUT:                           /* NON-ZERO RETURN CODE FROM TPUT*/
*         COMROUT = RTPUT;          /* SET ROUTING INDICATOR FOR S10 */
BADTPUT  L     @10,COMPTR                                          0242
         MVC   COMROUT(1,@10),RTPUT                                0242
*         COMRETC = T15;            /* SET TPUT  RET CODE IN COMMON  */
         SR    @07,@07                                             0243
         IC    @07,T15                                             0243
         STH   @07,COMRETC(,@10)                                   0243
*         GOTO RETS10;              /* RETURN TO S10 TO FINISH       */
*                                                                  0244
         B     RETS10                                              0244
*                                   /* 'SAVE' SPEC'D OR        Y02676*/
*DODAIR:                            /* 'LOGON' SPEC'D, INVOKE DAIR   */
*         COMROUT = RDODAIR;        /* SET ROUTING INDICATOR FOR S10 */
*                                                                  0245
DODAIR   L     @10,COMPTR                                          0245
         MVC   COMROUT(1,@10),RDODAIR                              0245
*RETS10:                           /* RETURN TO S10 TO FINISH        */
*         RETURN;                   /* RETURN TO IKJEES10            */
@EL00001 L     @13,4(,@13)                                         0246
@EF00001 L     @00,@SIZDATD                                        0246
         LR    @01,@12                                             0246
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0246
         BR    @14                                                 0246
*         GEN;                                                     0247
SPARE    DC    50X'00'                 PATCH AREA                Y02676
*         END IKJEES11                                             0248
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJCPPL )                                        *
*/*%INCLUDE SYSLIB  (IKJPPL  )                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IKJPSCB )                                        *
*;                                                                 0248
         B     @EL00001                                            0248
@DATA    DS    0H
@CH00034 DC    H'1'
@CH00082 DC    H'2'
@CH00084 DC    H'3'
@CH00056 DC    H'8'
@CH00073 DC    H'15'
@CH00076 DC    H'20'
@CH00914 DC    H'64'
@SM00952 MVC   0(0,@07),PDLTEXT(@01)
@SM00954 MVC   0(0,@07),PSCBUSER(@15)
@SM00960 MVC   IDUSRID(0,@10),USERID(@01)
@SM00963 MVC   MSGTEXT(0),PDLTEXT(@01)
@SM00965 MVC   0(0,@14),PSCBUSER(@15)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SAV001  EQU   @SA00001
@TF00001 DS    F
@ZTEMPS  DS    0F
@ZT00003 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
@TEMPS   EQU   @ZTEMPS
@L       EQU   @ZLEN
IKJEES11 CSECT
         DS    0F
@CF00959 DC    F'-8'
@CF00967 DC    F'-1'
@DATD    DSECT
         DS    0D
COMPTR   DS    A
CPPLPTR  DS    A
PPLPTR   DS    A
PSCBPTR  DS    A
TPUTREG0 DS    FL4
         ORG   TPUTREG0
RECTJID  DS    FL2
MLENG    DS    FL2
         ORG   TPUTREG0+4
TPUTREG1 DS    FL4
         ORG   TPUTREG1
MSGFLAGS DS    BL1
         ORG   MSGFLAGS
@NM00014 DS    BL1
FUSERID  EQU   MSGFLAGS+0
@NM00015 EQU   MSGFLAGS+0
FNOWAIT  EQU   MSGFLAGS+0
@NM00016 EQU   MSGFLAGS+0
@NM00017 EQU   MSGFLAGS+0
@NM00018 EQU   MSGFLAGS+0
@NM00019 EQU   MSGFLAGS+0
         ORG   TPUTREG1+1
MSGTPTR  DS    AL3
         ORG   TPUTREG1+4
USLPTR   DS    A
T15      DS    AL1
MI       DS    AL1
         DS    CL2
AUTOPARS DS    CL28
         DS    CL4
WORK8    DS    CL8
SDECB    DS    CL4
WTOLIST  DS    CL141
         ORG   WTOLIST
WTOMSGL  DS    FL2
WTOMCSF  DS    BL2
         ORG   WTOMCSF
WTOMCSF0 DS    BL1
WTOMCSF1 EQU   WTOMCSF+0
WTOMCSF2 EQU   WTOMCSF+0
         ORG   WTOLIST+4
WTOTEXT  DS    CL137
         ORG   WTOLIST+141
WTOROUT  DS    CL2
MSGTEXT  DS    CL125
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
@DATEND  EQU   *
IKJEES11 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@SIZ001  EQU   @SIZDATD
         DS    0D
PCLPTR   DC    AL4(SENDPCL)
LASTCHN  DC    XL4'FF000000'
MSGMAX   DC    H'115'
REXITCOD DC    AL1(1)
REXIT1   DC    AL1(2)
REXIT3   DC    AL1(3)
RMSG2OUT DC    AL1(4)
RPARSE   DC    AL1(5)
RTPUT    DC    AL1(6)
RDODAIR  DC    AL1(7)
WTOMAX   DC    AL1(72)
WTODESC  DC    X'0005'
ROUTCD   DC    X'8000'
         DC    X'4000'
         DC    X'2000'
         DC    X'1000'
         DC    X'0800'
         DC    X'0400'
         DC    X'0200'
         DC    X'0100'
         DC    X'0080'
         DC    X'0040'
         DC    X'0020'
         DC    X'0010'
         DC    X'0008'
         DC    X'0004'
         DC    X'0002'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
@0       EQU   00
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
R1       EQU   @01
R0       EQU   @00
J        EQU   @04
R5       EQU   @05
PDLPTRR  EQU   @06
R15      EQU   @15
R14      EQU   @14
CVTPTR   EQU   16
COMMON   EQU   0
FLAGS    EQU   COMMON
FPARS    EQU   FLAGS
FMSG7    EQU   FLAGS
FWTO2    EQU   FLAGS
FMSGD    EQU   FLAGS
FMSG0    EQU   FLAGS
FMSGE    EQU   FLAGS+1
COMROUT  EQU   COMMON+2
VALCNT   EQU   COMMON+3
COMCPPL  EQU   COMMON+4
CPDLMSGT EQU   COMMON+8
PDLPTR   EQU   COMMON+12
@NM00001 EQU   COMMON+16
IDCNT    EQU   @NM00001
IDTBL    EQU   @NM00001+1
@NM00002 EQU   COMMON+20
M7IND    EQU   @NM00002
COMMSG7  EQU   @NM00002+1
@NM00003 EQU   COMMON+24
MDIND    EQU   @NM00003
COMMSGD  EQU   @NM00003+1
@NM00004 EQU   COMMON+28
COMRETC  EQU   @NM00004
IDUSRID  EQU   0
MSG7INS  EQU   0
MSGDINS  EQU   0
CPPL     EQU   0
CPPLCBUF EQU   CPPL
CPPLUPT  EQU   CPPL+4
CPPLPSCB EQU   CPPL+8
CPPLECT  EQU   CPPL+12
PPL      EQU   0
PPLUPT   EQU   PPL
PPLECT   EQU   PPL+4
PPLECB   EQU   PPL+8
PPLPCL   EQU   PPL+12
PPLANS   EQU   PPL+16
PPLCBUF  EQU   PPL+20
PPLUWA   EQU   PPL+24
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTTSCVT EQU   CVTMAP+228
CVTTSFLG EQU   CVTTSCVT
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTRSV90 EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   -256
CVTRELNO EQU   CVTFIX+252
PSCB     EQU   0
PSCBUSER EQU   PSCB
PSCBUSRL EQU   PSCB+7
PSCBATR1 EQU   PSCB+16
PDLTEXT  EQU   0
ROUTCODE EQU   0
CONSID   EQU   0
USLIST   EQU   0
USLUSPTR EQU   USLIST
@NM00023 EQU   USLIST+4
USLLL    EQU   @NM00023
USLCHN   EQU   USLIST+8
USERID   EQU   0
DUMPARM  EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV100 EQU   CVTS01+116
CVTRV109 EQU   CVTS01+117
CVTRV118 EQU   CVTS01+118
CVTRV127 EQU   CVTS01+119
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
PDLMSG   EQU   PDLMSGT
PDLMPTR  EQU   PDLMSG
@NM00020 EQU   PDLMSG+4
PDLMLL   EQU   @NM00020
PDLRTC   EQU   PDLRTCD
PDLRPTR  EQU   PDLRTC
@NM00021 EQU   PDLRTC+4
PDLRLL   EQU   @NM00021
PDLCNI   EQU   PDLCNID
PDLCPTR  EQU   PDLCNI
@NM00022 EQU   PDLCNI+4
PDLCLL   EQU   @NM00022
*                                      START UNREFERENCED COMPONENTS
PDLCRES  EQU   @NM00022+3
PDLCFL   EQU   @NM00022+2
PDLRRES  EQU   @NM00021+3
PDLRFL   EQU   @NM00021+2
PDLMRES  EQU   @NM00020+3
PDLMFL   EQU   @NM00020+2
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTRV301 EQU   CVTS01+475
CVTRV300 EQU   CVTS01+474
CVTRV299 EQU   CVTS01+473
CVTRV298 EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTRV202 EQU   CVTS01+394
CVTRV201 EQU   CVTS01+392
CVTRV200 EQU   CVTS01+390
CVTRV199 EQU   CVTS01+388
CVTRV198 EQU   CVTS01+386
CVTRV197 EQU   CVTS01+384
CVTRV196 EQU   CVTS01+383
CVTRV195 EQU   CVTS01+382
CVTRV194 EQU   CVTS01+381
CVTRV193 EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTWSAG  EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTRV514 EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTRV146 EQU   CVTS01+134
CVTRV145 EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTRV142 EQU   CVTS01+126
CVTRV141 EQU   CVTS01+125
CVTRV140 EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTRV135 EQU   CVTRV127
CVTRV134 EQU   CVTRV127
CVTRV133 EQU   CVTRV127
CVTRV132 EQU   CVTRV127
CVTRV131 EQU   CVTRV127
CVTRV130 EQU   CVTRV127
CVTRV129 EQU   CVTRV127
CVTRV128 EQU   CVTRV127
CVTRV126 EQU   CVTRV118
CVTRV125 EQU   CVTRV118
CVTRV124 EQU   CVTRV118
CVTRV123 EQU   CVTRV118
CVTRV122 EQU   CVTRV118
CVTRV121 EQU   CVTRV118
CVTRV120 EQU   CVTRV118
CVTRV119 EQU   CVTRV118
CVTRV117 EQU   CVTRV109
CVTRV116 EQU   CVTRV109
CVTRV115 EQU   CVTRV109
CVTRV114 EQU   CVTRV109
CVTRV113 EQU   CVTRV109
CVTRV112 EQU   CVTRV109
CVTRV111 EQU   CVTRV109
CVTRV110 EQU   CVTRV109
CVTRV108 EQU   CVTRV100
CVTRV107 EQU   CVTRV100
CVTRV106 EQU   CVTRV100
CVTRV105 EQU   CVTRV100
CVTRV104 EQU   CVTRV100
CVTRV103 EQU   CVTRV100
CVTRV102 EQU   CVTRV100
CVTRV101 EQU   CVTRV100
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTRSV82 EQU   CVTS01+98
CVTRSV81 EQU   CVTS01+96
CVTSYSWT EQU   CVTS01+92
CVTRV327 EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTRSVA2 EQU   CVTS01
USLRES   EQU   @NM00023+3
USLFL    EQU   @NM00023+2
PSCBU    EQU   PSCB+64
PSCBRSZ  EQU   PSCB+60
PSCBLINE EQU   PSCB+59
PSCBCHAR EQU   PSCB+58
PSCBUPTL EQU   PSCB+56
PSCBUPT  EQU   PSCB+52
PSCBRLGB EQU   PSCB+48
PSCBDEST EQU   PSCB+40
@NM00013 EQU   PSCB+36
@NM00012 EQU   PSCB+32
@NM00011 EQU   PSCB+28
PSCBLTI2 EQU   PSCB+24
PSCBLTIM EQU   PSCB+20
PSCBATR2 EQU   PSCB+18
@NM00010 EQU   PSCBATR1
@NM00009 EQU   PSCBATR1
@NM00008 EQU   PSCBATR1
PSCBATTN EQU   PSCBATR1
PSCBVMNT EQU   PSCBATR1
PSCBJCL  EQU   PSCBATR1
PSCBACCT EQU   PSCBATR1
PSCBCTRL EQU   PSCBATR1
PSCBGPNM EQU   PSCB+8
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00007 EQU   CVTFIX+248
@NM00006 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTRSVA1 EQU   CVTXTNT2+48
CVTRSVA0 EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTRSV90
CVTRSV9G EQU   CVTRSV90
CVTRSV9F EQU   CVTRSV90
CVTRSV9E EQU   CVTRSV90
CVTRSV9D EQU   CVTRSV90
CVTRSV9C EQU   CVTRSV90
CVTRSV9B EQU   CVTRSV90
CVTRSV9A EQU   CVTRSV90
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTRV484 EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTINTLA EQU   CVTMAP+320
CVTERPV  EQU   CVTMAP+316
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRSV37 EQU   CVTDMSR
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTRV319 EQU   CVTUSR
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTTSCVB EQU   CVTTSCVT+1
CVTRSV25 EQU   CVTTSFLG
CVTRSV24 EQU   CVTTSFLG
CVTRSV23 EQU   CVTTSFLG
CVTRSV22 EQU   CVTTSFLG
CVTRSV21 EQU   CVTTSFLG
CVTRSV20 EQU   CVTTSFLG
CVTRSV19 EQU   CVTTSFLG
CVTTSRDY EQU   CVTTSFLG
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTIERLC EQU   CVTMAP+144
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00005 EQU   @NM00004+2
FFLUSH   EQU   FLAGS+1
FBADPUTL EQU   FLAGS+1
FCHAIN   EQU   FLAGS+1
FENQUSD  EQU   FLAGS+1
FENQ1    EQU   FLAGS+1
FNOW     EQU   FLAGS
FOPEN    EQU   FLAGS
FLOGON   EQU   FLAGS
*                                      END UNREFERENCED COMPONENTS
@RT00093 EQU   BADPARSE
@RT00097 EQU   EXIT1
@RT00099 EQU   TUSER
@RT00104 EQU   WTOL1
@RF00111 EQU   WTOL2
@RC00124 EQU   @RC00121
@RT00146 EQU   EXITCODE
@RT00151 EQU   WTOL6
@RT00169 EQU   SETCNT
@RT00176 EQU   DODAIR
@RT00200 EQU   UPVAL
@RT00202 EQU   BADTPUT
@RT00206 EQU   SKPUPVAL
@RT00215 EQU   SKPUPVAL
@RT00222 EQU   SKPUPVAL
@RT00228 EQU   EXITCODE
@RT00230 EQU   DODAIR
RETS10   EQU   @EL00001
@EL01    EQU   @EL00001
@ENDDATA EQU   *
         END   IKJEES11
