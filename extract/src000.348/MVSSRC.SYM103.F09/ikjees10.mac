         TITLE 'IKJEES10 - USER SEND COMMAND MAIN PROCESSOR            *
                       '
IKJEES10 CSECT ,                                                   0001
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  LA    @09,4095(,@11)                                      0001
         USING @PSTART,@11                                         0001
         USING @PSTART+4095,@09                                    0001
         L     @00,@SIZDATD                                        0001
         GETMAIN R,LV=(0)
         LR    @12,@01                                             0001
         USING @DATD,@12                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @12,8(,@13)                                         0001
         LR    @13,@12                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MVC   @PC00001(4),0(@01)                                  0001
         MODID BRANCH=YES
         EJECT
         EJECT
         EJECT
         EJECT
REGS     DS    0H                                                  0123
*         CPPLPTR = R1;             /* SAVE REG1 PARM LIST ADDRESS   */
         ST    R1,CPPLPTR                                          0128
*         RESTRICT (I);             /* RESTRICT REG 4 FOR LOOP CNTRL */
*         RESTRICT (R5);            /* RESTRICT REG 5 FOR ARITHMETIC */
*         COMMON = COMMON && COMMON;  /* CLEAR COMMON AREA TO ZERO   */
         XC    COMMON(32),COMMON                                   0131
* /*                                                                 */
* /*      MOVE LISTS FOR MACRO INSTRUCTIONS TO AUTOMATIC STORAGE     */
* /*                                                                 */
*         GEN  (MVC   AUTOLIST(LISTEND-LISTBEG),LISTBEG  );        0132
         MVC   AUTOLIST(LISTEND-LISTBEG),LISTBEG
*         PSCBPTR  = CPPLPSCB;      /* SET BASE FOR PSCB STRUCTURE   */
         L     @10,CPPLPTR                                         0133
         MVC   PSCBPTR(4),CPPLPSCB(@10)                            0133
*         SDECB  = SDECB && SDECB;  /* SET SEND ECB TO ZERO          */
         XC    SDECB(4),SDECB                                      0134
*         IOPLPTR = ADDR(AUTOPARM); /*SET POINTER TO PARM LIST       */
         LA    @08,AUTOPARM                                        0135
         ST    @08,IOPLPTR                                         0135
*         IOPLUPT = CPPLUPT;        /* UPT ADDR                      */
         MVC   IOPLUPT(4,@08),CPPLUPT(@10)                         0136
*         IOPLECT = CPPLECT;        /* ECT ADDR                      */
         MVC   IOPLECT(4,@08),CPPLECT(@10)                         0137
*         IOPLECB = ADDR(SDECB);    /* ADDR OF SEND ECB              */
         LA    @15,SDECB                                           0138
         ST    @15,IOPLECB(,@08)                                   0138
*         COMCPPL = CPPLPTR;        /* SET ADDR CPPL IN COMMON       */
         ST    @10,COMCPPL                                         0139
*         IDTBL = ADDR(IDUSRID);    /* SET ADDR OF USERID TABLE    0140
*                                      IN COMMON FOR IKJEES11        */
         LA    @10,IDUSRID                                         0140
         ST    @10,@TF00001                                        0140
         MVC   IDTBL(3),@TF00001+1                                 0140
*         COMMSG7 = ADDR(MSG7INS);  /* SET ADDR USERID AREA FOR MSG7 */
         LA    @10,MSG7INS                                         0141
         ST    @10,@TF00001                                        0141
         MVC   COMMSG7(3),@TF00001+1                               0141
*         COMMSGD = ADDR(MSGDINS);  /* INIT MSGD INSERTS PTR   Y02676*/
         LA    @10,MSGDINS                                         0142
         ST    @10,@TF00001                                        0142
         MVC   COMMSGD(3),@TF00001+1                               0142
*         R1 = ADDR(COMMON);        /* SET REG 1 = ADDR COMMON PARM
*                                      LIST FOR IKJEES11             */
         LA    R1,COMMON                                           0143
*         CALL IKJEES11;                                           0144
         L     @15,@CV00467                                        0144
         BALR  @14,@15                                             0144
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*/*                                                                  */
*/*              -     R    O    U    T    E    R     -              */
*/*                                                                  */
*/*   CONTROL IS ROUTED ACCORDING TO 'COMROUT', USED AS AN INDEX     */
*/*   INTO THE WHERE-TO-GO TABLE                                     */
*/*                                                                  */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*                                                                  0145
*         ROUTE = WEARTOGO(COMROUT); /* SET BASE FOR NEXTPATH        */
         SR    @10,@10                                             0145
         IC    @10,COMROUT                                         0145
         SLA   @10,2                                               0145
         L     @10,WEARTOGO-4(@10)                                 0145
         ST    @10,ROUTE                                           0145
*         GOTO NEXTPATH;            /* ROUTE CONTROL TO NEXT PATH    */
         BR    @10                                                 0146
*DODAIR:                            /* SET UP FOR DAIR               */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*                 -    D    A    I    R    -                      */
* /*                                                                 */
* /*                                                                 */
* /*      GO TO DAIR WITH CODE X'08' TO REQUEST ALLOCATION OF        */
* /*      BROADCAST DATA SET.  SINCE THE DATA SET IS CATALOGED,      */
* /*      ONLY THE DSNAME AND DISPOSITION FIELDS NEED BE SUPPLIED.   */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*         DAPLPTR = ADDR(AUTODAPL); /* SET BASE FOR DAPL       Y02676*/
DODAIR   LA    @10,AUTODAPL                                        0147
         ST    @10,DAPLPTR                                         0147
*         DAPB0PTR = ADDR(AUTODAIR);/* SET BASE FOR DAIR PARM BL     */
         LA    @08,AUTODAIR                                        0148
         ST    @08,DAPB0PTR                                        0148
*         AUTODAIR=AUTODAIR && AUTODAIR;  /* CLEAR DAIR PARM BL M1861*/
         XC    AUTODAIR(84),AUTODAIR                               0149
*         DA08CD = DAIRCD08;        /* SET DAIR CODE = X'08'         */
         MVC   DA08CD(2,@08),DAIRCD08                              0150
*         DA08PDSN = ADDR(DAIRDSN); /* PTR TO DATA SET NAME          */
         LA    @15,DAIRDSN                                         0151
         ST    @15,DA08PDSN(,@08)                                  0151
*         DA08DDN  = ' ';           /* DDNAME FIELD = BLANK,       0152
*                                      DDNAME IS RETURNED HERE       */
         MVI   DA08DDN+1(@08),C' '                                 0152
         MVC   DA08DDN+2(6,@08),DA08DDN+1(@08)                     0152
         MVI   DA08DDN(@08),C' '                                   0152
*         DA08UNIT = ' ';           /* UNITNAME = BLANK              */
         MVI   DA08UNIT+1(@08),C' '                                0153
         MVC   DA08UNIT+2(6,@08),DA08UNIT+1(@08)                   0153
         MVI   DA08UNIT(@08),C' '                                  0153
*         DA08SER = ' ';            /* VOLUME SERIAL NO. = BLANK     */
         MVI   DA08SER+1(@08),C' '                                 0154
         MVC   DA08SER+2(6,@08),DA08SER+1(@08)                     0154
         MVI   DA08SER(@08),C' '                                   0154
*         DA08SHR = '1'B;           /* STATUS = SHARE                */
         OI    DA08SHR(@08),B'00001000'                            0155
*         DA08KEEP = '1'B;          /* NORMAL DISPOSITON = KEEP      */
         OI    DA08KEEP(@08),B'00001000'                           0156
*         DA08KEP = '1'B;           /* CONDITIONAL DISPOSITION = KEEP*/
         OI    DA08KEP(@08),B'00001000'                            0157
*         DA08MNM = ' ';            /* MEMBER NAME = BLANK           */
         MVI   DA08MNM+1(@08),C' '                                 0158
         MVC   DA08MNM+2(6,@08),DA08MNM+1(@08)                     0158
         MVI   DA08MNM(@08),C' '                                   0158
*         DA08PSWD = ' ';           /* DATA SET PASSWORD = BLANK     */
         MVI   DA08PSWD+1(@08),C' '                                0159
         MVC   DA08PSWD+2(6,@08),DA08PSWD+1(@08)                   0159
         MVI   DA08PSWD(@08),C' '                                  0159
*         DAPLUPT = CPPLUPT;        /* UPT PTR                       */
         L     @15,CPPLPTR                                         0160
         MVC   DAPLUPT(4,@10),CPPLUPT(@15)                         0160
*         DAPLECT = CPPLECT;        /* ECT PTR                       */
         MVC   DAPLECT(4,@10),CPPLECT(@15)                         0161
*         DAPLECB = ADDR(SDECB);    /* PTR TO THE SEND ECB           */
         LA    @14,SDECB                                           0162
         ST    @14,DAPLECB(,@10)                                   0162
*         DAPLPSCB = CPPLPSCB;      /* PTR TO PSCB                   */
         MVC   DAPLPSCB(4,@10),CPPLPSCB(@15)                       0163
*         DAPLDAPB = DAPB0PTR;      /* PTR TO DAIR PARM BLOCK        */
         ST    @08,DAPLDAPB(,@10)                                  0164
*         R1 = DAPLPTR;             /* SET REG1 = ADDR PARM LIST     */
         LR    R1,@10                                              0165
*         GEN (LINK  EP=IKJDAIR);  /* LINK TO DAIR WITH CODE'08'     */
         LINK  EP=IKJDAIR
*         DAIRRETC = R15;                                          0167
         ST    R15,DAIRRETC                                        0167
*         IF DAIRRETC > 0           /* TEST RETURN CODE FROM DAIR    */
*           THEN                    /* IF RET CODE NOT ZERO          */
         L     @10,DAIRRETC                                        0168
         LTR   @10,@10                                             0168
         BP    @RT00168                                            0168
*             GOTO BADDAIR;         /* ALLOCATION NOT SUCCESSFUL     */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*      CALL IO RTN TO OPEN BROADCAST DATA SET                     */
* /*      AND READ RECORD1                                           */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*         /* ENQ FOR SHARE ON RECORD 1.                        Y02676*/
*         GEN  (ENQ  (QNAME,RNRC1,S,3,SYSTEM),RET=HAVE,MF=(E,ENQSL) );
         ENQ  (QNAME,RNRC1,S,3,SYSTEM),RET=HAVE,MF=(E,ENQSL)
*                                   /*                         Y02676*/
*         FENQ1 = '1'B;             /* SET FLAG FOR ENQ ON RECORD 1  */
         OI    FENQ1,B'10000000'                                   0171
*         IOPBASE = ADDR(IOPAREA);  /* SET BASE FOR IO PARM LIST     */
         LA    @10,IOPAREA                                         0172
         ST    @10,IOPBASE                                         0172
*         IOPARML = IOPARML && IOPARML;  /*  CLEAR ENTIRE PARM AREA  */
         XC    IOPARML(32,@10),IOPARML(@10)                        0173
*         P1OPEN = '1'B;            /* SET PARM FLAG FOR OPEN        */
         OI    P1OPEN(@10),B'10000000'                             0174
*         PARMDDNM = DA08DDN;       /* SET DDNAME IN PARM LIST       */
         L     @08,DAPB0PTR                                        0175
         MVC   PARMDDNM(8,@10),DA08DDN(@08)                        0175
*         R1 = IOPBASE;             /* REG 1 = ADDR PARM LIST        */
         LR    R1,@10                                              0176
*         CALL  IEEVSDIO;           /* CALL IO RTN TO READ RECORD 1  */
         L     @15,@CV00471                                        0177
         BALR  @14,@15                                             0177
*         RETC = R15;               /* SAVE RETURN CODE FROM REG 15  */
         ST    R15,RETC                                            0178
*         IF RETC > 0               /* TEST RETURN CODE FROM IO RTN  */
*           THEN                    /* READ WAS NOT SUCCESSFUL       */
         L     @10,RETC                                            0179
         LTR   @10,@10                                             0179
         BP    @RT00179                                            0179
*             GOTO BADIO;           /* GO TO ANALYZE ERROR AND     0180
*                                      GIVE WARNING MSG              */
*         FOPEN = '1'B;             /* SET FLAG FOR GOOD OPEN  Y02676*/
         OI    FOPEN,B'01000000'                                   0181
*         R1PTR = PARMRCD1;         /* SET RECORD1 BASE        Y02676*/
         L     @10,IOPBASE                                         0182
         L     @10,PARMRCD1(,@10)                                  0182
         ST    @10,@TF00001                                        0182
         MVC   R1PTR(3),@TF00001+1                                 0182
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*      SET UP USER MAIL MESSAGE RECORD WITH SEND MSG TEXT AND     */
* /*      USERID OF SENDER.                                          */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*         MI = 1;                   /* INIT INDEX TO MSG TEXT        */
         LA    @08,1                                               0183
         STC   @08,MI                                              0183
*         USMPTR = ADDR(MSGAREA2);  /* SET MAIL MSG RCD BASE   Y02676*/
         LA    @15,MSGAREA2                                        0184
         ST    @15,@TF00001                                        0184
         MVC   USMPTR(3),@TF00001+1                                0184
*         USMTEXT = ' ';            /* BLANK OUT MSG TEXT AREA       */
         MVI   USMTEXT+1(@15),C' '                                 0185
         MVC   USMTEXT+2(123,@15),USMTEXT+1(@15)                   0185
         MVI   USMTEXT(@15),C' '                                   0185
*                                   /* MOVE MSG TEXT TO RECORD       */
*         USMTEXT(MI:PDLMLL) = MSGTEXT(1:PDLMLL);                  0186
         ALR   @08,@15                                             0186
         SR    @14,@14                                             0186
         IC    @14,MI                                              0186
         L     @07,CPDLMSGT                                        0186
         MVC   @TF00001(2),PDLMLL(@07)                             0186
         LH    @06,@TF00001                                        0186
         LR    @03,@06                                             0186
         SR    @03,@14                                             0186
         L     @01,PDLMPTR(,@07)                                   0186
         EX    @03,@SM00540                                        0186
*         MI = MI + PDLMLL;         /* BUMP INDEX PAST TEXT    Y02676*/
         AR    @14,@06                                             0187
         STC   @14,MI                                              0187
*         USMTEXT(MI) = ' ';        /* INSERT BLANK BEFORE USERID    */
         ALR   @14,@15                                             0188
         MVI   USMTEXT-1(@14),C' '                                 0188
*         MI = MI + 1;              /* BUMP INDEX TO NEXT BYTE       */
         SR    @08,@08                                             0189
         IC    @08,MI                                              0189
         AH    @08,@CH00035                                        0189
         STC   @08,MI                                              0189
*         USMTEXT(MI:MI+PSCBUSRL-1) =  PSCBUSER(1:PSCBUSRL);       0190
         ALR   @08,@15                                             0190
         L     @14,PSCBPTR                                         0190
         SR    @07,@07                                             0190
         IC    @07,PSCBUSRL(,@14)                                  0190
         LR    @06,@07                                             0190
         BCTR  @06,0                                               0190
         EX    @06,@SM00542                                        0190
*                                   /* APPEND USERID OF SENDER TO MSG*/
*         USMLNG = MI+PSCBUSRL;     /* LENGTH OF MSG TEXT PLUS USERID
*                                      EQUAL TOTAL MSG LENGTH        */
         SR    @08,@08                                             0191
         IC    @08,MI                                              0191
         AR    @08,@07                                             0191
         STC   @08,USMLNG(,@15)                                    0191
*         USMNEXT = 0;              /* NO 'NEXT' MSG           Y02676*/
         SR    @08,@08                                             0192
         ST    @08,@TF00001                                        0192
         MVC   USMNEXT(3,@15),@TF00001+1                           0192
*         RNUSD  = R1USPTR;         /* SET RNAME FOR ENQ FROM RECORD1*/
         MVC   RNUSD(3),R1USPTR(@10)                               0193
*                                   /* ENQ EXCLUSIVE ON USER DIRECT. */
*         GEN  (ENQ  (QNAME,RNUSD,E,3,SYSTEM),RET=HAVE,MF=(E,ENQEL) );
         ENQ  (QNAME,RNUSD,E,3,SYSTEM),RET=HAVE,MF=(E,ENQEL)
*         FENQUSD = '1'B;           /* SET FLAG FOR ENQ ON USER DIR  */
         OI    FENQUSD,B'00100000'                                 0195
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*      CALL IO RTN TO READ USER MAIL DIRECTORY RECORD             */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*READUSD:                           /* SET UP PARM LIST FOR IO RTN   */
*         SDIOPARM = SDIOPARM && SDIOPARM; /* CLEAR PARM AREA        */
READUSD  L     @10,IOPBASE                                         0196
         XC    SDIOPARM(20,@10),SDIOPARM(@10)                      0196
*         P1READ = '1'B;            /* SET PARM FLAG FOR READ        */
         OI    P1READ(@10),B'01000000'                             0197
*         PARMRBA = ADDR(RNUSD);    /* SET RBA OF RECORD TO BE READ  */
         LA    @08,RNUSD                                           0198
         ST    @08,@TF00001                                        0198
         MVC   PARMRBA(4,@10),@TF00001                             0198
*         PARMIOAD = ADDR(DIRAREA); /* SET AREA ADDR FOR RECORD      */
         LA    @08,DIRAREA                                         0199
         ST    @08,@TF00001                                        0199
         MVC   PARMIOAD(4,@10),@TF00001                            0199
*         R1 = IOPBASE;             /* REG 1 = ADDR PARM LIST        */
         LR    R1,@10                                              0200
*         CALL  IEEVSDIO;           /* CALL IO RTN                   */
         L     @15,@CV00471                                        0201
         BALR  @14,@15                                             0201
*         RETC = R15;               /* SAVE RETURN CODE FROM REG 15  */
         ST    R15,RETC                                            0202
*         IF RETC > 0               /* TEST IF RET CODE IS ZERO      */
*           THEN                    /* UNSUCCESSFUL READ             */
         L     @10,RETC                                            0203
         LTR   @10,@10                                             0203
         BP    @RT00203                                            0203
*             GOTO BADIO;           /* GO TO ANALYZE ERROR           */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*      SCAN USER MAIL DIRECTORY RECORD FOR SPECIFIED USERID       */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*SCANUSD:                           /* SCAN 1 USER MAIL DIR. RECORD  */
*         USDPTR = PARMIOAD;        /* SET MAIL DIR RCD BASE   Y02676*/
SCANUSD  L     @10,IOPBASE                                         0205
         MVC   USDPTR(3),PARMIOAD+1(@10)                           0205
*         ZERENT = ZERENT && ZERENT; /* UNUSED ENTRY MODEL     Y02676*/
         XC    ZERENT(13),ZERENT                                   0206
*SCUSD1: DO I = 1 TO DIM(USDENTRY); /* SCAN USERID ENTRIES IN  Y02676
*                                      THIS DIRECTORY RECORD         */
SCUSD1   LA    I,1                                                 0207
@DL00207 DS    0H                                                  0208
*         IF USDENTRY(I) = ZERENT   /* TEST IF THIS ENTRY = 0        */
*           THEN                    /* THIS USERID ENTRY IS ZERO     */
         LR    @10,I                                               0208
         MH    @10,@CH00205                                        0208
         L     @08,USDPTR-1                                        0208
         LA    @08,0(,@08)                                         0208
         ALR   @08,@10                                             0208
         AL    @08,@CF00545                                        0208
         CLC   USDENTRY(13,@08),ZERENT                             0208
         BE    @RT00208                                            0208
*             GOTO LPEND1;          /* LOOP TO CHECK NEXT ENTRY      */
*           ELSE                                                   0210
*SCUSD2:      DO J = 1 TO IDCNT;    /* SCAN ENTIRE LIST OF USERIDS 0210
*                                      SPECIFIED IN 'SEND' COMMAND   */
SCUSD2   LA    @10,1                                               0210
         B     @DE00210                                            0210
@DL00210 DS    0H                                                  0211
*             IF USDID(I) = IDUSRID(J,1:7)                         0211
*                                   /* IS THIS USERID          Y02676
*                                      EQUAL TO 1 SPEC'D IN SEND     */
*               THEN                /* USERIDS ARE EQUAL             */
         LR    @08,I                                               0211
         MH    @08,@CH00205                                        0211
         L     @01,USDPTR-1                                        0211
         LA    @01,0(,@01)                                         0211
         LR    @15,@10                                             0211
         SLA   @15,3                                               0211
         ALR   @01,@08                                             0211
         AL    @01,@CF00545                                        0211
         LA    @08,IDUSRID-8(@15)                                  0211
         CLC   USDID(7,@01),0(@08)                                 0211
         BE    @RT00211                                            0211
*                 GOTO VALIDID;     /* PUT MSG INTO DATA SET FOR THIS
*                                      USERID                        */
*             END SCUSD2;           /* END OF INNER LOOP             */
         AH    @10,@CH00035                                        0213
@DE00210 STC   @10,J                                               0213
         MVC   @ZT00003+3(1),IDCNT                                 0213
         C     @10,@ZT00003                                        0213
         BNH   @DL00210                                            0213
*LPEND1:                            /* THIS USERID IN DIRECTORY NOT
*                                      EQUAL TO ONE FROM PARM LIST   */
*         END SCUSD1;               /* END OF OUTER LOOP             */
LPEND1   AH    I,@CH00035                                          0214
         CH    I,@CH00034                                          0214
         BNH   @DL00207                                            0214
*         IF USDNEXT = 0            /* IS CHAIN PTR = 0        Y02676*/
*           THEN                    /* YES, LAST USER MAIL DIR. REC  */
         L     @10,USDPTR-1                                        0215
         LA    @10,0(,@10)                                         0215
         MVC   @ZT00001+1(3),USDNEXT(@10)                          0215
         L     @08,@ZT00001                                        0215
         LTR   @08,@08                                             0215
         BZ    @RT00215                                            0215
*             GOTO SCUSD3;          /* GO TO DEQ ON THIS RECORD      */
*         RNPREV = RNUSD;           /* SAVE RNAME FOR DEQ            */
         MVC   RNPREV(3),RNUSD                                     0217
*         RNUSD = USDNEXT;          /* RNAME FOR ENQ NEXT      Y02676
*                                      MAIL DIRECTORY RECORD         */
         MVC   RNUSD(3),USDNEXT(@10)                               0218
*                                   /* ENQ ON NEXT USER MAIL DIR. RC */
*         GEN ( ENQ  (QNAME,RNUSD,E,3,SYSTEM),RET=HAVE,MF=(E,ENQEL) );
          ENQ  (QNAME,RNUSD,E,3,SYSTEM),RET=HAVE,MF=(E,ENQEL)
*                                   /* DEQ ON PREVIOUS DIRECTORY REC */
*         GEN ( DEQ  (QNAME,RNPREV,3,SYSTEM),RET=HAVE,MF=(E,DEQL)  );
          DEQ  (QNAME,RNPREV,3,SYSTEM),RET=HAVE,MF=(E,DEQL)
*         GOTO READUSD;             /* READ NEXT DIRECTORY RECORD    */
         B     READUSD                                             0221
*SCUSD3:                  /* END OF USER DIRECTORY                   */
* GEN;                                                             0222
SCUSD3   DS    0H                                                  0222
                DEQ (QNAME,RNUSD,3,SYSTEM),RET=HAVE,MF=(E,DEQL)
*         FENQUSD = '0'B;           /* TURN ENQ FLAG OFF             */
         NI    FENQUSD,B'11011111'                                 0223
*         IF VALCNT = IDCNT         /* IS VALID CNT = TOTAL USER CNT */
*           THEN                    /* YES, ALL USERIDS ARE DONE     */
         CLC   VALCNT(1),IDCNT                                     0224
         BE    @RT00224                                            0224
*             GOTO EXITCODE;        /* CLEANUP AND RETURN TO TMP     */
*           ELSE;                   /* NOT ALL SPEC'D USERIDS WERE 0226
*                                      FOUND IN DIRECTORY. THOSE THAT
*                                      REMAIN ON IDUSRID ARE INVALID */
*                         /* ISSUE WARNING MSG FOR INVALID USERIDS   */
*         P = 1;                    /* SET INDEX TO PUTLINE BUFFER   */
         LA    @10,1                                               0227
         STC   @10,P                                               0227
*        PTLTEXT(P : TPNLNG) = MSG1TPN; /* PUT MSG ID INTO BUFR     */
         LA    @08,PTLTEXT-1(@10)                                  0228
         SR    @15,@15                                             0228
         IC    @15,TPNLNG                                          0228
         LR    @14,@15                                             0228
         SR    @14,@10                                             0228
         L     @07,@CA00303                                        0228
         L     @07,MSG1P-MSGTABLE(,@07)                            0228
         EX    @14,@SM00547                                        0228
*                                  /* PUT MSG TEXT IN PUTLINE BUFR  */
*        PTLTEXT(TPNLNG+1 : TPNLNG + MSG1LNG)   = MSG1TEXT;        0229
         LA    @08,PTLTEXT(@15)                                    0229
         SR    @06,@06                                             0229
         IC    @06,MSG1LNG(,@07)                                   0229
         LR    @14,@06                                             0229
         BCTR  @14,0                                               0229
         EX    @14,@SM00549                                        0229
*        P = P + MSG1LNG + TPNLNG; /* BUMP INDEX PAST MSG TEXT      */
         AR    @10,@06                                             0230
         AR    @10,@15                                             0230
         STC   @10,P                                               0230
*         PTLTEXT(P) = ' ';         /* INSERT BLANK BEFORE USERIDS   */
         LA    @08,PTLTEXT-1(@10)                                  0231
         MVI   0(@08),C' '                                         0231
*         P = P + 1;                /* BUMP INDEX PAST BLANK         */
         LA    @08,1                                               0232
         AR    @10,@08                                             0232
         STC   @10,P                                               0232
*         DO J = 1 TO IDCNT;        /* SCAN LIST OF SPEC'D USERIDS 0233
*                                      FOR ANY NOT FOUND IN DIRECTRY */
         B     @DE00233                                            0233
@DL00233 DS    0H                                                  0234
*         IF IDUSRID(J) ^= BLNKID   /* IS THIS USERID NONBLANK       */
*           THEN                    /* YES, THIS USERID IS INVALID   */
         SLA   @08,3                                               0234
         LA    @10,IDUSRID-8(@08)                                  0234
         CLC   0(8,@10),BLNKID                                     0234
         BE    @RF00234                                            0234
*             DO;                   /* ADD USERID TO WARN MSG        */
*             PTLTEXT(P:P+7) = IDUSRID(J);                         0236
         SR    @10,@10                                             0236
         IC    @10,P                                               0236
         LA    @01,PTLTEXT-1(@10)                                  0236
         LA    @15,IDUSRID-8(@08)                                  0236
         MVC   0(8,@01),0(@15)                                     0236
*             P = P+ 8;             /* BUMP INDEX PAST USERID        */
         AH    @10,@CH00055                                        0237
         STC   @10,P                                               0237
*             END;                                                 0238
*         END;                                                     0239
@RF00234 LA    @08,1                                               0239
         MVC   @ZT00003+3(1),J                                     0239
         A     @08,@ZT00003                                        0239
@DE00233 STC   @08,J                                               0239
         MVC   @ZT00003+3(1),IDCNT                                 0239
         C     @08,@ZT00003                                        0239
         BNH   @DL00233                                            0239
*        PTLTEXT(P) = LVL2IND;     /* INDICATE 2ND LEVEL INFORMATION
*                                     AVAILABLE BY A PLUS '+' SIGN  */
         SR    @10,@10                                             0240
         IC    @10,P                                               0240
         LA    @08,PTLTEXT-1(@10)                                  0240
         MVC   0(1,@08),LVL2IND                                    0240
*         PTLLL = P+4;              /* PUTLINE BUF LENG INCL HEADER  */
         AH    @10,@CH00152                                        0241
         STH   @10,PTLLL                                           0241
*         PTLOFFST = 0;             /* SET OFFSET = 0, NO MSG INSERT */
         SR    @10,@10                                             0242
         STH   @10,PTLOFFST                                        0242
*         PTLSCNT = 1;              /* NO. OF MSG SEGMENTS = 1       */
         LA    @08,1                                               0243
         ST    @08,PTLSCNT                                         0243
*         PTLSPTR = ADDR(PTLBUF);   /* SET PTR TO MSG SEGMENT        */
         LA    @15,PTLBUF                                          0244
         ST    @15,PTLSPTR                                         0244
*        PTLSNEXT = ADDR(PTLEVEL2);/* PTR TO 2ND LEVEL MSG SEG BLK  */
         LA    @15,PTLEVEL2                                        0245
         ST    @15,PTLSNEXT                                        0245
*        PL2NEXT = 0;              /* PTR TO 3RD LEVEL MSG = 0      */
         ST    @10,PL2NEXT                                         0246
*        PL2SCNT = 1;              /* NO. OF SEGMENTS = 1           */
         ST    @08,PL2SCNT                                         0247
*        PL2SPTR = MSG1L2(1);      /* PTR TO 2ND LEVEL MSG SEGMENT  */
         L     @10,@CA00303                                        0248
         L     @10,MSG1P-MSGTABLE(,@10)                            0248
         L     @10,MSG1LVL2(,@10)                                  0248
         MVC   PL2SPTR(4),MSG1L2(@10)                              0248
*         GOTO WARNMSG;             /* 'PUTLINE' WARNING MSG         */
         B     WARNMSG                                             0249
*VALIDID:                           /* USERID FOUND IN DATA SET      */
* /*                                                                 */
* /*                                                                 */
*         VALCNT = VALCNT + 1;      /* BUMP CNT OF VALID IDS         */
VALIDID  LA    @10,1                                               0250
         MVC   @ZT00003+3(1),VALCNT                                0250
         A     @10,@ZT00003                                        0250
         STC   @10,VALCNT                                          0250
*         IDUSRID(J) = BLNKID;      /* BLANK OUT USERID ENTRY        */
         SR    @10,@10                                             0251
         IC    @10,J                                               0251
         SLA   @10,3                                               0251
         LA    @08,IDUSRID-8(@10)                                  0251
         MVC   0(8,@08),BLNKID                                     0251
*         IF USDEND(I) = 0          /* PTR TO MSG CHAIN = 0    Y02676*/
*           THEN                    /* YES, NO MSGS FOR THIS USERID  */
         LR    @10,I                                               0252
         MH    @10,@CH00205                                        0252
         L     @08,USDPTR-1                                        0252
         LA    @08,0(,@08)                                         0252
         ALR   @08,@10                                             0252
         AL    @08,@CF00551                                        0252
         MVC   @ZT00001+1(3),USDEND-10(@08)                        0252
         L     @10,@ZT00001                                        0252
         LTR   @10,@10                                             0252
         BNZ   @RF00252                                            0252
*             DO;                                                  0253
*               FCHAIN = '0'B;      /* NO MSG UPDATE           Y02676*/
         NI    FCHAIN,B'11101111'                                  0254
*               GOTO NOCHN1;        /* SKIP READ OF OLD LAST   Y02676*/
         B     NOCHN1                                              0255
*             END;                                                 0256
*         FCHAIN = '1'B;            /* SET FLAG FOR MSG CHAIN        */
@RF00252 OI    FCHAIN,B'00010000'                                  0257
*         RNUSM = USDEND(I);        /* RBA FOR READ OF         Y02676
*                                      OLD LAST MSG                  */
         LR    @10,I                                               0258
         MH    @10,@CH00205                                        0258
         L     @08,USDPTR-1                                        0258
         LA    @08,0(,@08)                                         0258
         ALR   @08,@10                                             0258
         AL    @08,@CF00551                                        0258
         MVC   RNUSM(3),USDEND-10(@08)                             0258
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*      READ FORMER LAST MAIL MESSAGE RECORD                       */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*         SDIOPARM = SDIOPARM && SDIOPARM;  /* CLEAR PARM AREA       */
         L     @10,IOPBASE                                         0259
         XC    SDIOPARM(20,@10),SDIOPARM(@10)                      0259
*         P1READ = '1'B;            /* SET FLAG FOR READ             */
         OI    P1READ(@10),B'01000000'                             0260
*         PARMRBA = ADDR(RNUSM);    /* SET RBA ADDR OF REC TO BE READ*/
         LA    @08,RNUSM                                           0261
         ST    @08,@TF00001                                        0261
         MVC   PARMRBA(4,@10),@TF00001                             0261
*         PARMIOAD = ADDR(MSGAREA); /* SET AREA ADDR                 */
         LA    @08,MSGAREA                                         0262
         ST    @08,@TF00001                                        0262
         MVC   PARMIOAD(4,@10),@TF00001                            0262
*         R1 = IOPBASE;             /* REG 1 = ADDR PARM LIST        */
         LR    R1,@10                                              0263
*         CALL  IEEVSDIO;           /* CALL IO RTN TO READ USER MSG  */
         L     @15,@CV00471                                        0264
         BALR  @14,@15                                             0264
*         RETC = R15;               /* SAVE RETURN CODE REG 15       */
         ST    R15,RETC                                            0265
*         IF RETC > 0               /* IF RETURN CODE IS NOT ZERO    */
*           THEN                    /* IO OPERATION WAS NOT SUCCESS  */
         L     @10,RETC                                            0266
         LTR   @10,@10                                             0266
         BP    @RT00266                                            0266
*             GOTO BADIO;           /* ANALYZE ERROR AND GIVE WARNING*/
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*      WRITE NEW MAIL MESSAGE RECORD IN FIRST FREE SPACE          */
* /*      IN DATA SET                                                */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*NOCHN1:                            /* CHAIN FLAG HAS BEEN SET       */
*         SDIOPARM = SDIOPARM && SDIOPARM; /* CLEAR PARM AREA        */
NOCHN1   L     @10,IOPBASE                                         0268
         XC    SDIOPARM(20,@10),SDIOPARM(@10)                      0268
*         P2WRDAF = '1'B;           /* SET FLAG FOR WRITE TYPE 'DAF' */
         OI    P2WRDAF(@10),B'01000000'                            0269
*         PARMRBA  = ADDR(R1USPTR); /* SET RBA OF FIRST DIRECTORY REC
*                                      TO START BDAM EXTENDED SEARCH */
         L     @08,R1PTR-1                                         0270
         LA    @08,0(,@08)                                         0270
         LA    @08,R1USPTR(,@08)                                   0270
         ST    @08,@TF00001                                        0270
         MVC   PARMRBA(4,@10),@TF00001                             0270
*         PARMIOAD = ADDR(MSGAREA2);/* SET AREA ADDR                 */
         LA    @08,MSGAREA2                                        0271
         ST    @08,@TF00001                                        0271
         MVC   PARMIOAD(4,@10),@TF00001                            0271
*         PARMKEY  = USMKEY;        /* SET KEY TO BE WRITTEN         */
         MVC   PARMKEY(1,@10),USMKEY                               0272
*         R1 = IOPBASE;             /* REG 1 = ADDR PARM LIST        */
         LR    R1,@10                                              0273
*         CALL  IEEVSDIO;           /* CALL IO RTN TO WRITE          */
         L     @15,@CV00471                                        0274
         BALR  @14,@15                                             0274
*         RETC  = R15;              /* SAVE RETURN CODE REG 15       */
         ST    R15,RETC                                            0275
*         IF RETC > 0               /* IF RETURN CODE IS NOT ZERO    */
*           THEN                    /* IO OPERATION WAS NOT SUCCESS  */
         L     @10,RETC                                            0276
         LTR   @10,@10                                             0276
         BP    @RT00276                                            0276
*             GO TO BADIOA;         /* ANALYZE ERROR AND GIVE WARNING*/
*         USDEND(I) = PARMRBA(2:4); /* SET NEW CHAIN END PTR   Y02676*/
         L     @10,USDPTR-1                                        0278
         LA    @10,0(,@10)                                         0278
         LR    @08,I                                               0278
         MH    @08,@CH00205                                        0278
         L     @01,IOPBASE                                         0278
         MVC   @ZT00001+1(3),PARMRBA+1(@01)                        0278
         L     @15,@ZT00001                                        0278
         ST    @15,@TF00001                                        0278
         ST    @08,@TF00002                                        0278
         ALR   @08,@10                                             0278
         AL    @08,@CF00551                                        0278
         MVC   USDEND-10(3,@08),@TF00001+1                         0278
*         IF FCHAIN = '1'B          /* TEST MSG CHAIN FLAG           */
*           THEN                    /* YES, THERE IS PREVIOUS MSG    */
         TM    FCHAIN,B'00010000'                                  0279
         BO    @RT00279                                            0279
*             GOTO CHAIN3;          /* UPDATE PREVIOUS USER MAIL MSG
*                                      RECORD AND REWRITE IT         */
*         USDRBA(I) = PARMRBA(2:4); /* PUT FEEDBACK FROM WRITE INTO
*                                      DIRECTORY RECORD - START CHAIN*/
         ST    @15,@TF00001                                        0281
         AL    @10,@TF00002                                        0281
         AL    @10,@CF00554                                        0281
         MVC   USDRBA-7(3,@10),@TF00001+1                          0281
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*      WRITE DIRECTORY RECORD UPDATED WITH PTR TO MSG RECORD      */
* /*      JUST WRITTEN                                               */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*CHAIN5:                            /* DIRECTORY RECORD UPDATE Y02676*/
*         SDIOPARM = SDIOPARM && SDIOPARM; /* CLEAR PARM AREA        */
CHAIN5   L     @10,IOPBASE                                         0282
         XC    SDIOPARM(20,@10),SDIOPARM(@10)                      0282
*         P2WRDI = '1'B;            /* SET PARM FLAG FOR WRITE 'DI'  */
         OI    P2WRDI(@10),B'10000000'                             0283
*         PARMRBA = ADDR(RNUSD);    /* SET RBA OF RECORD TO WRITE    */
         LA    @08,RNUSD                                           0284
         ST    @08,@TF00001                                        0284
         MVC   PARMRBA(4,@10),@TF00001                             0284
*         PARMIOAD = ADDR(DIRAREA); /* AREA ADDR OF RECORD TO WRITE  */
         LA    @08,DIRAREA                                         0285
         ST    @08,@TF00001                                        0285
         MVC   PARMIOAD(4,@10),@TF00001                            0285
*         PARMKEY = USDKEY;         /* SET KEY FOR USER DIRECTORY    */
         MVC   PARMKEY(1,@10),USDKEY                               0286
*         R1 = IOPBASE;             /* REG 1 = ADDR PARM LIST        */
         LR    R1,@10                                              0287
*         CALL  IEEVSDIO;           /* CALL IO TO WRITE USER DIR. RC */
         L     @15,@CV00471                                        0288
         BALR  @14,@15                                             0288
*         RETC = R15;               /* SAVE RETURN CODE REG15        */
         ST    R15,RETC                                            0289
*         IF RETC > 0               /* IF RETURN CODE IS NOT ZERO    */
*           THEN                    /* IO OPERATION WAS NOT SUCCESS  */
         L     @10,RETC                                            0290
         LTR   @10,@10                                             0290
         BP    @RT00290                                            0290
*             GOTO BADIO;           /* ANALYZE ERROR AND GIVE WARNING*/
*         IF VALCNT = IDCNT         /* IS VALID CNT = TOTAL CNT      */
*           THEN                    /* ALL USERIDS HAVE BEEN DONE    */
         CLC   VALCNT(1),IDCNT                                     0292
         BE    @RT00292                                            0292
*             GOTO EXITCODE;        /* CLEANUP AND RETURN            */
*           ELSE                    /* MORE USERIDS TO PROCESS       */
*             GOTO SCUSD2;          /* CONTINUE SCAN OF USER DIR REC */
         B     SCUSD2                                              0294
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*      UPDATE CHAIN PTR IN PREVIOUS MSG RECORD AND WRITE          */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*CHAIN3:                            /* PREVIOUS MSG RECORD UPDATE    */
*         FCHAIN = '0'B;            /* TURN OFF CHAIN FLAG           */
CHAIN3   NI    FCHAIN,B'11101111'                                  0295
*         USMPTR = ADDR(MSGAREA);   /* SET BASE, LAST MSG RCD  Y02676*/
         LA    @10,MSGAREA                                         0296
         ST    @10,@TF00001                                        0296
         MVC   USMPTR(3),@TF00001+1                                0296
*         USMNEXT = PARMRBA(2:4);   /* NEW 'NEXT' FOR          Y02676
*                                      FORMER LAST MSG               */
         L     @08,IOPBASE                                         0297
         MVC   USMNEXT(3,@10),PARMRBA+1(@08)                       0297
*         SDIOPARM = SDIOPARM && SDIOPARM; /* CLEAR PARM AREA        */
         XC    SDIOPARM(20,@08),SDIOPARM(@08)                      0298
*         P2WRDI = '1'B;            /* SET PARM FLAG FOR WRITE 'DI'  */
         OI    P2WRDI(@08),B'10000000'                             0299
*         PARMKEY = USMKEY;         /* SET KEY FOR USER MAIL MSG REC */
         MVC   PARMKEY(1,@08),USMKEY                               0300
*         PARMRBA = ADDR(RNUSM);    /* SET RBA OF RECORD TO UPDATE   */
         LA    @15,RNUSM                                           0301
         ST    @15,@TF00001                                        0301
         MVC   PARMRBA(4,@08),@TF00001                             0301
*         PARMIOAD = ADDR(MSGAREA); /* SET AREA ADDRESS              */
         ST    @10,@TF00001                                        0302
         MVC   PARMIOAD(4,@08),@TF00001                            0302
*         R1 = IOPBASE;             /* REG 1 = ADDR PARM LIST        */
         LR    R1,@08                                              0303
*         CALL  IEEVSDIO;           /* CALL IO RTN TO WRITE          */
         L     @15,@CV00471                                        0304
         BALR  @14,@15                                             0304
*         RETC = R15;               /* SAVE RETURN CODE REG 15       */
         ST    R15,RETC                                            0305
*         IF RETC ^= 0              /* RETURN CODE BAD         Y02676*/
*           THEN                    /* YES, I/O FAILED         Y02676*/
         L     @10,RETC                                            0306
         LTR   @10,@10                                             0306
         BNZ   @RT00306                                            0306
*             GOTO BADIO;           /* GIVE WARNING            Y02676*/
*         GOTO CHAIN5;              /* DO DIR RCD UPDATE       Y02676*/
         B     CHAIN5                                              0308
* /*                         T E R M I N A L                         */
* /*                            E R R O R                            */
* /*                         M E S S A G E S                         */
* /*                                                                 */
*BADIOA:                  /*'WRITE IN NEXT FREE SPACE'NOT SUCCESSFUL */
*         FFLUSH = '1'B;            /* SET FLAG TO FLUSH STACK AND 0309
*                                      CLEAR THE INPUT QUEUE         */
BADIOA   OI    FFLUSH,B'00000100'                                  0309
*         IF RETC = DSFULL          /* CHECK RET CODE FROM IO RTN    */
*           THEN                    /* USER MAIL SECTION WAS FULL    */
         L     @10,RETC                                            0310
         MVC   @ZT00003+3(1),DSFULL                                0310
         C     @10,@ZT00003                                        0310
         BNE   @RF00310                                            0310
*             DO;                   /* ISSUE WARNING MSG TO SENDER   */
*            PTLTEXT(1:TPNLNG) = MSG4TPN; /* PUT MSG ID INTO BUFR   */
         SR    @10,@10                                             0312
         IC    @10,TPNLNG                                          0312
         LR    @08,@10                                             0312
         BCTR  @08,0                                               0312
         L     @15,@CA00303                                        0312
         L     @15,MSG4P-MSGTABLE(,@15)                            0312
         EX    @08,@SM00556                                        0312
*                                  /* PUT MSG TEXT IN PUTLINE BUFR  */
*             PTLTEXT(TPNLNG+1 : TPNLNG+MSG4LNG) = MSG4TEXT;       0313
         LA    @08,PTLTEXT(@10)                                    0313
         SR    @14,@14                                             0313
         IC    @14,MSG4LNG(,@15)                                   0313
         LR    @07,@14                                             0313
         BCTR  @07,0                                               0313
         EX    @07,@SM00558                                        0313
*             PTLTEXT(TPNLNG+MSG4SECT : TPNLNG+MSG4SECT+4) = MSG4MAIL;
         SR    @08,@08                                             0314
         IC    @08,MSG4SECT(,@15)                                  0314
         AR    @08,@10                                             0314
         LA    @01,PTLTEXT-1(@08)                                  0314
         MVC   0(5,@01),MSG4MAIL(@15)                              0314
*             PTLLL = MSG4LNG + TPNLNG + 1;                        0315
         LA    @08,1                                               0315
         AR    @14,@10                                             0315
         AR    @14,@08                                             0315
         STH   @14,PTLLL                                           0315
*             PTLOFFST = 0;         /* SET OFFSET = 0, NO MSG INSERT */
         SR    @10,@10                                             0316
         STH   @10,PTLOFFST                                        0316
*             PTLSNEXT = 0;         /* PTR TO 2ND LEVEL MSG = ZERO   */
         ST    @10,PTLSNEXT                                        0317
*             PTLSCNT = 1;          /* NO. OF MSG SEGMENTS = 1       */
         ST    @08,PTLSCNT                                         0318
*             PTLSPTR = ADDR(PTLBUF);   /* SET PTR TO MSG SEGMENT    */
         LA    @10,PTLBUF                                          0319
         ST    @10,PTLSPTR                                         0319
*             GOTO WARNMSG;         /* ISSUE PUTLINE TO SENDER       */
         B     WARNMSG                                             0320
*             END;                                                 0321
*           ELSE;                   /* DATA SET NOT FULL. CHECK FOR
*                                      OTHER ERRORS IN BADIO         */
@RF00310 DS    0H                                                  0323
*BADIO:                             /* TEST RETURN CODE FROM IO RTN  */
*         FFLUSH = '1'B;            /* SET FLAG TO FLUSH STACK AND 0323
*                                      CLEAR THE INPUT QUEUE         */
BADIO    OI    FFLUSH,B'00000100'                                  0323
*         IF RETC = NOCORE          /* TEST RET CODE FOR 'NO CORE'   */
*           THEN                    /* YES, IO ROUTINE DID NOT HAVE
*                                      ENOUGH CORE FOR ITS GETMAIN   */
         L     @10,RETC                                            0324
         MVC   @ZT00003+3(1),NOCORE                                0324
         C     @10,@ZT00003                                        0324
         BE    @RT00324                                            0324
*             GOTO NOMAIN;          /* ISSUE WARNING MSG -  NOT ENOUGH
*                                      MAIN STORAGE TO EXECUTE COMMAND*
*           ELSE                    /* ENOUGH CORE AVAILABLE,      0326
*                                      ERROR IN BROADCAST DATA SET,
*                                      NOT IN SEND PROCESSOR         */
*             GOTO NOTUSABL;        /* ISSUE WARNING MSG -         0326
*                                      BROADCAST DATA SET NOT USABLE */
*                                                                  0326
         B     NOTUSABL                                            0326
*NOMAIN:        /* NOT ENOUGH MAIN STORAGE TO EXECUTE COMMAND        */
*         PTLTEXT(1:TPNLNG) = MSGCTPN; /* PUT MSG ID INTO BUFFER     */
NOMAIN   SR    @10,@10                                             0327
         IC    @10,TPNLNG                                          0327
         LR    @08,@10                                             0327
         BCTR  @08,0                                               0327
         L     @15,@CA00303                                        0327
         L     @15,MSGCP-MSGTABLE(,@15)                            0327
         EX    @08,@SM00560                                        0327
*                                   /* PUT MSG TEXT IN PUTLINE BUFR  */
*         PTLTEXT(TPNLNG+1:TPNLNG+MSGCLNG) = MSGCTEXT;             0328
         LA    @08,PTLTEXT(@10)                                    0328
         SR    @14,@14                                             0328
         IC    @14,MSGCLNG(,@15)                                   0328
         LR    @07,@14                                             0328
         BCTR  @07,0                                               0328
         EX    @07,@SM00562                                        0328
*         PTLLL = MSGCLNG + TPNLNG +4; /* SET TOTAL LENGTH BUFFER    */
         AR    @14,@10                                             0329
         AH    @14,@CH00152                                        0329
         STH   @14,PTLLL                                           0329
*         PTLOFFST = 0;             /* SET OFFSET = 0, NO MSG INSERT */
         SR    @10,@10                                             0330
         STH   @10,PTLOFFST                                        0330
*         PTLSNEXT = 0;             /* PTR TO 2ND LEVEL MSG = ZERO   */
         ST    @10,PTLSNEXT                                        0331
*         PTLSCNT = 1;              /* NO. OF MSG SEGMENTS = 1       */
         MVC   PTLSCNT(4),@CF00035                                 0332
*         PTLSPTR = ADDR(PTLBUF);   /* SET PTR TO MSG SEGMENT        */
         LA    @10,PTLBUF                                          0333
         ST    @10,PTLSPTR                                         0333
*         GOTO WARNMSG;             /* ISSUE PUTLINE TO ACCOUNT TERM */
*                                                                  0334
         B     WARNMSG                                             0334
*BADDAIR:                 /* CALL TO DAIR NOT SUCCESSFUL             */
*         FFLUSH = '1'B;            /* SET FLAG TO FLUSH STACK AND 0335
*                                      CLEAR THE INPUT QUEUE         */
BADDAIR  OI    FFLUSH,B'00000100'                                  0335
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*/*                                                                  */
*/*  CALL IKJEFF18 TO ANALYZE THE DAIR FAILURE AND ISSUE WARNING MSG */
*/*                                                                  */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*         F18DAPL = ADDR(DAPL);     /* SET DAPL PTR PARM       Y02676*/
         MVC   F18DAPL(4),DAPLPTR                                  0336
*         F18DARC = ADDR(DAIRRETC); /* SET RET CODE PTR PARM   Y02676*/
         LA    @10,DAIRRETC                                        0337
         ST    @10,F18DARC                                         0337
*         F18F02A = ADDR(F18F02);   /* SET IKJEFF02 PTR PARM   Y02676*/
         LA    @10,F18F02                                          0338
         ST    @10,F18F02A                                         0338
*         F18CLNOA = ADDR(F18CLNO); /* SET CALL NUMBER PARM    Y02676*/
         LA    @10,F18CLNO                                         0339
         ST    @10,F18CLNOA                                        0339
*         R1 = ADDR(F18PARMS);      /* SET PARM REGISTER       Y02676*/
         LA    R1,F18PARMS                                         0340
*         GEN (LINK EP=IKJEFF18);   /* LINK TO DAIR ERROR      Y02676
*                                      ANALYSIS ROUTINE              */
         LINK EP=IKJEFF18
*         GOTO EXITCODE;            /* CLEANUP AND RETURN TO TMP     */
*                                                                  0342
*                                                                  0342
         B     EXITCODE                                            0342
*NOTUSABL:                /* BROADCAST DATA SET IS NOT USABLE NOW -
*                            ISSUE A WARNING MSG TO SENDER           */
*        PTLTEXT(1:TPNLNG) = MSG5TPN;   /* PUT MSG ID INTO BUFR     */
NOTUSABL SR    @10,@10                                             0343
         IC    @10,TPNLNG                                          0343
         LR    @08,@10                                             0343
         BCTR  @08,0                                               0343
         L     @15,@CA00303                                        0343
         L     @15,MSG5P-MSGTABLE(,@15)                            0343
         EX    @08,@SM00564                                        0343
*                                  /* PUT MSG TEXT IN PUTLINE BUFR  */
*        PTLTEXT(TPNLNG+1 : TPNLNG+MSG5LNG) = MSG5TEXT;            0344
         LA    @08,PTLTEXT(@10)                                    0344
         SR    @14,@14                                             0344
         IC    @14,MSG5LNG(,@15)                                   0344
         LR    @07,@14                                             0344
         BCTR  @07,0                                               0344
         EX    @07,@SM00566                                        0344
*                                  /* INDICATE 2ND LVL MSG WITH '+' */
*        PTLTEXT(TPNLNG+MSG5LNG+1 ) = LVL2IND;                     0345
         LR    @08,@10                                             0345
         AR    @08,@14                                             0345
         LA    @01,PTLTEXT(@08)                                    0345
         MVC   0(1,@01),LVL2IND                                    0345
*        PTLLL = MSG5LNG + TPNLNG + 5;  /* SET TOTAL LENGTH OF BUFR */
         AR    @14,@10                                             0346
         AH    @14,@CH00344                                        0346
         STH   @14,PTLLL                                           0346
*         PTLOFFST = 0;             /* SET OFFSET = 0, NO MSG INSERT */
         SR    @10,@10                                             0347
         STH   @10,PTLOFFST                                        0347
*         PTLSCNT = 1;              /* NO. OF MSG SEGMENTS = 1       */
         MVC   PTLSCNT(4),@CF00035                                 0348
*         PTLSPTR = ADDR(PTLBUF);   /* SET PTR TO MSG SEGMENT        */
         LA    @10,PTLBUF                                          0349
         ST    @10,PTLSPTR                                         0349
*/*      SET UP SECOND LEVEL MESSAGE                                */
*         IF RETC = BADFMT          /* TEST FOR BAD FORMAT     Y02676*/
*           THEN                    /* YES, BAD FORMAT DS      Y02676*/
         L     @10,RETC                                            0350
         MVC   @ZT00003+3(1),BADFMT                                0350
         C     @10,@ZT00003                                        0350
         BNE   @RF00350                                            0350
*             PL2SPTR = MSG5L2(3);  /* PTR TO 2ND LVL MSG SEG- Y02676
*                                      'BAD FORMAT'                  */
         L     @10,MSG5LVL2(,@15)                                  0351
         MVC   PL2SPTR(4),MSG5L2+8(@10)                            0351
*        IF RETC = OPENERR         /* TEST FOR OPEN ERROR           */
*          THEN                    /* YES, OPEN ERROR ON BROADCAST  */
@RF00350 L     @10,RETC                                            0352
         MVC   @ZT00003+3(1),OPENERR                               0352
         C     @10,@ZT00003                                        0352
         BNE   @RF00352                                            0352
*            PL2SPTR = MSG5L2(2);  /* PTR TO 2ND LVL MSG SEGMENT - 0353
*                                     'CANNOT OPEN DATA SET'        */
         L     @10,@CA00303                                        0353
         L     @10,MSG5P-MSGTABLE(,@10)                            0353
         L     @10,MSG5LVL2(,@10)                                  0353
         MVC   PL2SPTR(4),MSG5L2+4(@10)                            0353
*          ELSE                                                    0354
*            PL2SPTR = MSG5L2(1);  /* PTR TO 2ND LVL MSG SEGMENT - 0354
*                                     'I/O SYNAD ERROR'             */
*                                                                  0354
         B     @RC00352                                            0354
@RF00352 L     @10,@CA00303                                        0354
         L     @10,MSG5P-MSGTABLE(,@10)                            0354
         L     @10,MSG5LVL2(,@10)                                  0354
         MVC   PL2SPTR(4),MSG5L2(@10)                              0354
*MSG5OUT:               /* FINISH SETUP FOR PUTLINE                 */
*        PTLSNEXT = ADDR(PTLEVEL2); /* PTR TO 2ND LEVEL MSG         */
@RC00352 DS    0H                                                  0355
MSG5OUT  LA    @10,PTLEVEL2                                        0355
         ST    @10,PTLSNEXT                                        0355
*        PL2NEXT= 0;               /* PTR TO 3RD LEVEL MSG = 0      */
         SR    @10,@10                                             0356
         ST    @10,PL2NEXT                                         0356
*        PL2SCNT = 1;              /* SEGMENT COUNT = 1             */
         MVC   PL2SCNT(4),@CF00035                                 0357
*        GOTO WARNMSG;             /* PUTLINE MSG TO SENDER         */
*                                                                  0358
*                                                                  0358
         B     WARNMSG                                             0358
*BADPARSE:                        /* NON-ZERO RETURN CODE FROM PARSE */
*         FFLUSH = '1'B;            /* SET FLAG TO FLUSH STACK AND 0359
*                                      CLEAR THE INPUT QUEUE         */
BADPARSE OI    FFLUSH,B'00000100'                                  0359
*        IF COMRETC = PANOSPAC    /* CHECK RET CODE FOR 'NO SPACE'   */
*          THEN                   /* YES, NOT ENOUGH CORE FOR PARSE  */
         LH    @10,COMRETC                                         0360
         MVC   @ZT00003+3(1),PANOSPAC                              0360
         C     @10,@ZT00003                                        0360
         BE    @RT00360                                            0360
*            GOTO NOMAIN;         /* GIVE WARNING MSG                */
*        IF COMRETC = PANOPRMT    /* CHECK RET CODE FOR 'NO PROMPT'
*                                                               M2583*/
*          THEN                   /* YES, SENDER IN 'NO PROMPT' MODE
*                                                               M2583*/
         MVC   @ZT00003+3(1),PANOPRMT                              0362
         C     @10,@ZT00003                                        0362
         BE    @RT00362                                            0362
*            GOTO EXIT3;          /* TERMINATE WITH NO ACTION, REQUIRD
*                                    PROMPTING NOT POSSIBLE     M2583*/
*        PL2SPTR = MSGBL2(3);     /* SET PTR TO FIRST MSG SEGMENT  0364
*                                     FOR 2ND LEVEL MSG -          0364
*                                     'PARSE  ERROR CODE'            */
         L     @10,@CA00303                                        0364
         L     @10,MSGBP-MSGTABLE(,@10)                            0364
         L     @10,MSGBLVL2(,@10)                                  0364
         MVC   PL2SPTR(4),MSGBL2+8(@10)                            0364
*        GOTO CONVRETC;           /* CONVERT PARSE ERROR CODE FOR MSG*/
*                                                                  0365
*                                                                  0365
         B     CONVRETC                                            0365
*BADTPUT:                 /* NON-ZERO RETURN CODE FROM TPUT          */
*         FFLUSH = '1'B;            /* SET FLAG TO FLUSH STACK AND 0366
*                                      CLEAR THE INPUT QUEUE         */
BADTPUT  OI    FFLUSH,B'00000100'                                  0366
*        PL2SPTR = MSGBL2(2);     /* SET PTR TO FIRST MSG SEGMENT  0367
*                                     FOR 2ND LEVEL MSG -          0367
*                                     'TPUT   ERROR CODE'            */
         L     @10,@CA00303                                        0367
         L     @10,MSGBP-MSGTABLE(,@10)                            0367
         L     @10,MSGBLVL2(,@10)                                  0367
         MVC   PL2SPTR(4),MSGBL2+4(@10)                            0367
*        GOTO CONVRETC;           /* CONVERT TPUT ERROR CODE FOR MSG */
*                                                                  0368
*                                                                  0368
         B     CONVRETC                                            0368
*BADPUTL:                    /* NON-ZERO RETURN CODE FROM PUTLINE    */
*         FFLUSH = '1'B;            /* SET FLAG TO FLUSH STACK AND 0369
*                                      CLEAR THE INPUT QUEUE         */
BADPUTL  OI    FFLUSH,B'00000100'                                  0369
*        IF COMRETC = PUNOSPAC    /* CHECK RET CODE FOR 'NO SPACE'   */
*          THEN                   /* YES, NOT ENOUGH CORE FOR PUTLINE*/
         LH    @10,COMRETC                                         0370
         MVC   @ZT00003+3(1),PUNOSPAC                              0370
         C     @10,@ZT00003                                        0370
         BE    @RT00370                                            0370
*            GOTO NOMAIN;         /* GIVE WARNING MSG                */
*        IF FBADPUTL = '1'B       /* CHECK FOR PREVIOUS PUTLINE ERROR*/
*          THEN                   /* YES, 2ND PUTLINE ERROR          */
         TM    FBADPUTL,B'00001000'                                0372
         BO    @RT00372                                            0372
*            GOTO EXIT0;          /* CLEANUP AND EXIT QUIETLY        */
*        FBADPUTL = '1'B;         /* SET FLAG FOR PUTLINE ERROR      */
         OI    FBADPUTL,B'00001000'                                0374
*        PL2SPTR = MSGBL2(1);     /* SET PTR TO FIRST MSG SEGMENT  0375
*                                     FOR 2ND LEVEL MSG -          0375
*                                     'PUTLINE ERROR CODE'           */
         L     @10,@CA00303                                        0375
         L     @10,MSGBP-MSGTABLE(,@10)                            0375
         L     @10,MSGBLVL2(,@10)                                  0375
         MVC   PL2SPTR(4),MSGBL2(@10)                              0375
*                                 /* CONVERT PUTLINE ERR CODE FOR MSG*/
*                                                                  0376
*CONVRETC:                /* CONVERT RETURN CODE TO EBCDIC FOR MSG  */
*        R5 = COMRETC;             /* REG 5 = RETURN CODE FROM COMMON*/
CONVRETC LH    R5,COMRETC                                          0376
*        GEN;                                                      0377
         CVD   R5,WORK8               CONVERT RETURN CODE TO DECIMAL
         UNPK  WORK4(4),WORK8+5(3)    UNPACK INTO EBCDIC FORM
         OI    WORK4+3,X'F0'          CHANGE SIGN TO HEX'F0'
*        SRERRCD = WORK4(3:4);        /* SET FIELD FOR MSG INSERT  0378
*                                        OF ERROR CODE              */
         MVC   SRERRCD(2),WORK4+2                                  0378
*        SD2LL = 6;                   /* LENGTH OF BFR INCL HDR(4)  */
         MVC   SD2LL(2),@CH00513                                   0379
*        SD2OFFST = 29;               /* SET OFFSET FOR ERROR CODE 0380
*                                        INSERTION IN MSG TEXT     0380
*                                        FOR 2ND LEVEL MSG          */
         MVC   SD2OFFST(2),@CH00514                                0380
*        SD2TEXT = SRERRCD;           /* INSERTION TEXT, ERROR CODE */
*                                                                  0381
         MVC   SD2TEXT(2),SRERRCD                                  0381
*        PTLTEXT(1:TPNLNG) = MSGBTPN; /* PUT MSG ID INTO BUFFER     */
         SR    @10,@10                                             0382
         IC    @10,TPNLNG                                          0382
         LR    @08,@10                                             0382
         BCTR  @08,0                                               0382
         L     @15,@CA00303                                        0382
         L     @15,MSGBP-MSGTABLE(,@15)                            0382
         EX    @08,@SM00568                                        0382
*        PTLTEXT(TPNLNG+1 : MSGBLNG+TPNLNG) = MSGBTEXT;            0383
         LA    @08,PTLTEXT(@10)                                    0383
         SR    @14,@14                                             0383
         IC    @14,MSGBLNG(,@15)                                   0383
         AR    @14,@10                                             0383
         LCR   @10,@10                                             0383
         AR    @10,@14                                             0383
         BCTR  @10,0                                               0383
         EX    @10,@SM00570                                        0383
*        PTLOFFST = 0;                /* NO MSG INSERT ON LEVEL 1   */
         SR    @10,@10                                             0384
         STH   @10,PTLOFFST                                        0384
*        PTLLL = MSGBLNG + TPNLNG + 4; /* LENGTH OF BUFR INCL HDR(4)*/
         AH    @14,@CH00152                                        0385
         STH   @14,PTLLL                                           0385
*        PTLSNEXT = ADDR(PTLEVEL2);   /* PTR TO 2ND LEVEL MSG       */
         LA    @08,PTLEVEL2                                        0386
         ST    @08,PTLSNEXT                                        0386
*        PTLSCNT = 1;                 /* 1 SEGMENT FOR LEVEL 1      */
         MVC   PTLSCNT(4),@CF00035                                 0387
*        PTLSPTR = ADDR(PTLBUF);      /* PTR TO MSG SEGMENT         */
         LA    @08,PTLBUF                                          0388
         ST    @08,PTLSPTR                                         0388
*        PL2NEXT = 0;                 /* PTR TO 3RD LEVEL MSG = 0   */
         ST    @10,PL2NEXT                                         0389
*        PL2SCNT = 2;                 /* 2 SEGMENTS FOR LEVEL 2     */
         MVC   PL2SCNT(4),@CF00123                                 0390
*        PL2SPT2 = ADDR(SEGDESC2);    /* PTR TO MSG SEG 2 FOR LVL 2 */
         LA    @10,SEGDESC2                                        0391
         ST    @10,PL2SPT2                                         0391
*        GOTO WARNMSG;                /* 'PUTLINE' MSG TO SENDER   0392
*                                        'COMMAND SYSTEM ERROR+'    */
         B     WARNMSG                                             0392
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*            -    P    U    T    L    I    N    E    -            */
* /*                                                                 */
* /*      'PUTLINE' WARNING MSG TO TERMINAL THAT ISSUED 'SEND'       */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*WARNMSG:                 /* ISSUE WARNING MSG TO SENDER             */
*         R1 = IOPLPTR;   /* SET REG 1 TO IOPL ADDR FOR PUTLINE      */
WARNMSG  L     R1,IOPLPTR                                          0393
*                                   /* ISSUE PUTLINE                 */
* GEN;                                                             0394
          PUTLINE  PARM=PUTLL,OUTPUT=(PTLSEGBL,MULTLVL),MF=(E,(1))
*         COMRETC = R15;            /* SAVE REG 15 RETURN CODE       */
         STH   R15,COMRETC                                         0395
*         IF COMRETC > 0            /* CHECK PUTLINE RETURN CODE     */
*           THEN                    /* NON-ZERO RET CODE, ERROR      */
         LH    @10,COMRETC                                         0396
         LTR   @10,@10                                             0396
         BP    @RT00396                                            0396
*             GOTO BADPUTL;         /* ANALYZE PUTLINE ERROR         */
*         GOTO EXITCODE;            /* CLEANUP AND RETURN TO TMP     */
         B     EXITCODE                                            0398
* /*                         W A R N I N G                           */
* /*                        M E S S A G E S                          */
* /*                                                                 */
*MSG0OUT:                /* FORMAT WARNING MSG FOR TRUNCATED MSG TEXT*/
*        FMSG0 = '0'B;             /* TURN OFF MSG 0 FLAG           */
MSG0OUT  NI    FMSG0,B'11111110'                                   0399
*        PTLTEXT(1:TPNLNG) = MSGATPN;   /* PUT MSG ID INTO BUFR     */
         SR    @10,@10                                             0400
         IC    @10,TPNLNG                                          0400
         LR    @08,@10                                             0400
         BCTR  @08,0                                               0400
         L     @15,@CA00303                                        0400
         L     @15,MSGAP-MSGTABLE(,@15)                            0400
         EX    @08,@SM00573                                        0400
*                                  /* PUT MSG TEXT IN PUTLINE BUFR  */
*        PTLTEXT(TPNLNG+1 : TPNLNG+MSGALNG) = MSGATEXT;            0401
         LA    @08,PTLTEXT(@10)                                    0401
         SR    @14,@14                                             0401
         IC    @14,MSGALNG(,@15)                                   0401
         LR    @07,@14                                             0401
         BCTR  @07,0                                               0401
         EX    @07,@SM00575                                        0401
*        PTLLL = MSGALNG + TPNLNG + 4;  /* SET TOTAL LENGTH BUFR   0402
*                                      INCLUDING 4-BYTE HEADER       */
         AR    @14,@10                                             0402
         AH    @14,@CH00152                                        0402
         STH   @14,PTLLL                                           0402
*         PTLOFFST = 0;             /* SET OFFSET = 0, NO MSG INSERT */
         SR    @10,@10                                             0403
         STH   @10,PTLOFFST                                        0403
*         PTLSCNT = 1;              /* NO. OF MSG SEGMENTS = 1       */
         MVC   PTLSCNT(4),@CF00035                                 0404
*         PTLSPTR = ADDR(PTLBUF);   /* SET PTR TO MSG SEGMENT        */
         LA    @08,PTLBUF                                          0405
         ST    @08,PTLSPTR                                         0405
*         PTLSNEXT = 0;             /* PTR TO 2ND LEVEL MSG = ZERO   */
         ST    @10,PTLSNEXT                                        0406
*         GOTO WARNMSG;             /* ISSUE PUTLINE OF THIS MSG     */
*                                                                  0407
         B     WARNMSG                                             0407
*MSG2OUT:                           /*   FORMAT WARNING MSG -      0408
*                                       'USERS (USERID) NOT LOGGED ON*/
*         P = 1;                    /* INIT INDEX TO PUTLINE BUFFER  */
MSG2OUT  LA    @10,1                                               0408
         STC   @10,P                                               0408
*        PTLTEXT(P:TPNLNG) = MSG2TPN;   /* PUT MSG ID INTO BUFR     */
         LA    @08,PTLTEXT-1(@10)                                  0409
         SR    @15,@15                                             0409
         IC    @15,TPNLNG                                          0409
         LR    @14,@15                                             0409
         SR    @14,@10                                             0409
         L     @07,@CA00303                                        0409
         L     @07,MSG2P-MSGTABLE(,@07)                            0409
         EX    @14,@SM00577                                        0409
*                                  /* PUT MSG TEXT BEGINNING IN BUFR*/
*        PTLTEXT(TPNLNG+1 : TPNLNG + MSG2BEGL)= MSG2BEG;           0410
         LA    @08,PTLTEXT(@15)                                    0410
         SR    @06,@06                                             0410
         IC    @06,MSG2BEGL(,@07)                                  0410
         LR    @14,@06                                             0410
         BCTR  @14,0                                               0410
         EX    @14,@SM00579                                        0410
*        P = P + MSG2BEGL+ TPNLNG; /* BUMP INDEX PAST BEGINNING TEXT*/
         AR    @10,@06                                             0411
         AR    @10,@15                                             0411
         STC   @10,P                                               0411
*        PTLTEXT(P) = ' ';         /* INSERT BLANK BEFORE USERIDS   */
         LA    @08,PTLTEXT-1(@10)                                  0412
         MVI   0(@08),C' '                                         0412
*        P = P + 1;                /* BUMP INDEX PAST BLANK         */
         AH    @10,@CH00035                                        0413
         STC   @10,P                                               0413
*M2LOOP:                  /* LOOP TO PUT USERIDS INTO MSG2 TEXT      */
*         /* SCAN ENTIRE LIST OF USERIDS SPEC'D IN COMMAND, IDUSRID  */
*         DO J = 1 TO IDCNT;                                       0414
M2LOOP   LA    @10,1                                               0414
         B     @DE00414                                            0414
@DL00414 DS    0H                                                  0415
*         IF IDUSRID(J) ^= BLNKID   /* IS THIS USERID ENTRY NONBLANK */
*           THEN                    /* YES, THIS USER NOT HANDLED    */
         SLA   @10,3                                               0415
         LA    @08,IDUSRID-8(@10)                                  0415
         CLC   0(8,@08),BLNKID                                     0415
         BE    @RF00415                                            0415
*             DO;                   /* ADD THIS USERID TO WARN MSG   */
*               PTLTEXT(P:P+7) = IDUSRID(J); /* PUT USERID INTO MSG  */
         SR    @08,@08                                             0417
         IC    @08,P                                               0417
         LA    @01,PTLTEXT-1(@08)                                  0417
         LA    @15,IDUSRID-8(@10)                                  0417
         MVC   0(8,@01),0(@15)                                     0417
*               P = P+ 8;           /* BUMP BUFFER INDEX P           */
         AH    @08,@CH00055                                        0418
         STC   @08,P                                               0418
*             END;                  /* END OF INNER LOOP             */
*         END M2LOOP;               /* END OF OUTER LOOP             */
@RF00415 LA    @10,1                                               0420
         MVC   @ZT00003+3(1),J                                     0420
         A     @10,@ZT00003                                        0420
@DE00414 STC   @10,J                                               0420
         MVC   @ZT00003+3(1),IDCNT                                 0420
         C     @10,@ZT00003                                        0420
         BNH   @DL00414                                            0420
*                                  /* PUT MSG TEXT ENDING IN BUFR   */
*        PTLTEXT(P : P+MSG2ENDL-1) = MSG2END;                      0421
         SR    @10,@10                                             0421
         IC    @10,P                                               0421
         LA    @08,PTLTEXT-1(@10)                                  0421
         L     @15,@CA00303                                        0421
         L     @15,MSG2P-MSGTABLE(,@15)                            0421
         SR    @14,@14                                             0421
         IC    @14,MSG2ENDL(,@15)                                  0421
         LR    @07,@14                                             0421
         BCTR  @07,0                                               0421
         EX    @07,@SM00581                                        0421
*        P = P + MSG2ENDL -1;      /* BUMP INDEX TO LENGTH OF MSG   */
         AR    @10,@14                                             0422
         BCTR  @10,0                                               0422
         STC   @10,P                                               0422
*         PTLLL = P+4;              /* PUTLINE BUFFER LENGTH INCLUDING
*                                      4-BYTE HEADER                 */
         AH    @10,@CH00152                                        0423
         STH   @10,PTLLL                                           0423
*        PTLSNEXT = 0;             /* PTR TO 2ND LEVEL MSG = ZERO   */
         SR    @10,@10                                             0424
         ST    @10,PTLSNEXT                                        0424
*         PTLSCNT = 1;              /* NO. OF MSG SEGMENTS = 1       */
         MVC   PTLSCNT(4),@CF00035                                 0425
*         PTLOFFST = 0;             /* SET OFFSET = 0, NO MSG INSERT */
         STH   @10,PTLOFFST                                        0426
*         PTLSPTR = ADDR(PTLBUF);  /* SET PTR TO MSG SEGMENT        */
         LA    @10,PTLBUF                                          0427
         ST    @10,PTLSPTR                                         0427
*         GOTO WARNMSG;                                            0428
         B     WARNMSG                                             0428
*MSG7OUT:                           /* FORMAT WARNING MSG 7          */
*         FMSG7 = '0'B;             /* TURN MSG7 FLAG OFF            */
MSG7OUT  NI    FMSG7,B'11101111'                                   0429
*        PTLTEXT(1 : TPNLNG) = MSG7TPN; /* PUT MSG ID IN BUFR       */
         SR    @10,@10                                             0430
         IC    @10,TPNLNG                                          0430
         LR    @08,@10                                             0430
         BCTR  @08,0                                               0430
         L     @15,@CA00303                                        0430
         L     @15,MSG7P-MSGTABLE(,@15)                            0430
         EX    @08,@SM00583                                        0430
*                                  /* PUT BEGINNING MSG TEXT IN BUFR*/
*        PTLTEXT(TPNLNG+1 : TPNLNG+MSG7BEGL) = MSG7BEG;            0431
         LA    @08,PTLTEXT(@10)                                    0431
         SR    @14,@14                                             0431
         IC    @14,MSG7BEGL(,@15)                                  0431
         LR    @07,@14                                             0431
         BCTR  @07,0                                               0431
         EX    @07,@SM00585                                        0431
*        P = TPNLNG + MSG7BEGL + 1; /* BUMP INDEX PAST BEGINNING TXT*/
         LA    @08,1                                               0432
         AR    @10,@14                                             0432
         AR    @10,@08                                             0432
         STC   @10,P                                               0432
*        PTLTEXT(P) = ' ';         /* INSERT BLANK BEFORE USERIDS   */
         LA    @01,PTLTEXT-1(@10)                                  0433
         MVI   0(@01),C' '                                         0433
*        P = P+1;                  /* BUMP INDEX PAST BLANK         */
         AR    @10,@08                                             0434
         STC   @10,P                                               0434
*         PTLTEXT(P:P+M7IND) = MSG7INS;  /* PUT USERID INSERT INTO 0435
*                                           MSG7 TEXT                */
         LA    @01,PTLTEXT-1(@10)                                  0435
         SR    @14,@14                                             0435
         IC    @14,M7IND                                           0435
         EX    @14,@SM00587                                        0435
*         P = P+M7IND-1;           /* BUMP INDEX PAST USERID INSERT  */
         AR    @10,@14                                             0436
         BCTR  @10,0                                               0436
         STC   @10,P                                               0436
*                                  /* PUT MSG TEXT ENDING IN BUFFER */
*        PTLTEXT(P : P+MSG7ENDL) = MSG7END;                        0437
         LA    @01,PTLTEXT-1(@10)                                  0437
         SR    @14,@14                                             0437
         IC    @14,MSG7ENDL(,@15)                                  0437
         EX    @14,@SM00589                                        0437
*        P = P+ MSG7ENDL - 1;      /* BUMP P TO TOTAL MSG LENGTH   0438
*                                     INCLUDING USERID INSERT       */
         AR    @10,@14                                             0438
         BCTR  @10,0                                               0438
         STC   @10,P                                               0438
*         PTLLL = P+4;              /* TOTAL PUTLINE BUFFER LENGTH =
*                                      MSG TEXT LENGTH + 4 BYTES FOR
*                                      HEADER                        */
         AH    @10,@CH00152                                        0439
         STH   @10,PTLLL                                           0439
*         PTLOFFST = 0;             /* SET OFFSET = 0, NO MSG INSERT */
         SR    @10,@10                                             0440
         STH   @10,PTLOFFST                                        0440
*         PTLSNEXT = 0;             /* PTR TO 2ND LEVEL MSG = ZERO   */
         ST    @10,PTLSNEXT                                        0441
*         PTLSCNT = 1;              /* NO. OF MSG SEGMENTS = 1       */
         ST    @08,PTLSCNT                                         0442
*         PTLSPTR = ADDR(PTLBUF);   /* SET PTR TO MSG SEGMENT        */
         LA    @10,PTLBUF                                          0443
         ST    @10,PTLSPTR                                         0443
*         GOTO WARNMSG;             /* ISSUE PUTLINE OF THIS MSG     */
         B     WARNMSG                                             0444
*MSGDOUT:                           /* FORMAT WARNING MSG D    Y02676*/
*         FMSGD = '0'B;             /* TURN MSGD FLAG OFF      Y02676*/
MSGDOUT  NI    FMSGD,B'11111011'                                   0445
*         PTLTEXT(1:TPNLNG) = MSGDTPN; /* COPY MSG ID          Y02676*/
         SR    @10,@10                                             0446
         IC    @10,TPNLNG                                          0446
         LR    @08,@10                                             0446
         BCTR  @08,0                                               0446
         L     @15,@CA00303                                        0446
         L     @15,MSGDP-MSGTABLE(,@15)                            0446
         EX    @08,@SM00592                                        0446
*                                   /* COPY MSG D START        Y02676*/
*         PTLTEXT(TPNLNG+1:TPNLNG+MSGDBEGL) = MSGDBEG;             0447
         LA    @08,PTLTEXT(@10)                                    0447
         SR    @14,@14                                             0447
         IC    @14,MSGDBEGL(,@15)                                  0447
         LR    @07,@14                                             0447
         BCTR  @07,0                                               0447
         EX    @07,@SM00594                                        0447
*         P = TPNLNG + MSGDBEGL + 1; /* BUMP INDEX             Y02676*/
         LA    @08,1                                               0448
         AR    @10,@14                                             0448
         AR    @10,@08                                             0448
         STC   @10,P                                               0448
*         PTLTEXT(P) = ' ';         /* INSERT BLANK BEFORE     Y02676
*                                      INSERTS                       */
         LA    @01,PTLTEXT-1(@10)                                  0449
         MVI   0(@01),C' '                                         0449
*         P = P+1;                  /* BUMP INDEX PAST BLANK   Y02676*/
         AR    @10,@08                                             0450
         STC   @10,P                                               0450
*                                   /* COPY USERID INSERTS     Y02676*/
*         PTLTEXT(P:P+MDIND) = MSGDINS;                            0451
         LA    @01,PTLTEXT-1(@10)                                  0451
         SR    @14,@14                                             0451
         IC    @14,MDIND                                           0451
         EX    @14,@SM00596                                        0451
*         P = P+MDIND-1;            /* BUMP INDEX PAST INSERTS Y02676*/
         AR    @10,@14                                             0452
         BCTR  @10,0                                               0452
         STC   @10,P                                               0452
*                                   /* COPY MSG D END          Y02676*/
*         PTLTEXT(P:P+MSGDENDL) = MSGDEND;                         0453
         LA    @01,PTLTEXT-1(@10)                                  0453
         SR    @14,@14                                             0453
         IC    @14,MSGDENDL(,@15)                                  0453
         EX    @14,@SM00598                                        0453
*         P = P+ MSGDENDL - 1;      /* BUMP INDEX TO END       Y02676*/
         AR    @10,@14                                             0454
         BCTR  @10,0                                               0454
         STC   @10,P                                               0454
*         PTLLL = P+4;              /* PUTLINE BUFFER LENGTH   Y02676
*                                      IS TEXT LENGTH + HEADER       */
         AH    @10,@CH00152                                        0455
         STH   @10,PTLLL                                           0455
*         PTLOFFST = 0;             /* NO MSG INSERT           Y02676*/
         SR    @10,@10                                             0456
         STH   @10,PTLOFFST                                        0456
*         PTLSNEXT = 0;             /* NO 2ND LEVEL MSG        Y02676*/
         ST    @10,PTLSNEXT                                        0457
*         PTLSCNT = 1;              /* 1 MSG SEGMENT           Y02676*/
         ST    @08,PTLSCNT                                         0458
*         PTLSPTR = ADDR(PTLBUF);   /* SET PTR TO SEGMENT      Y02676*/
         LA    @10,PTLBUF                                          0459
         ST    @10,PTLSPTR                                         0459
*         GOTO WARNMSG;             /* ISSUE PUTLINE           Y02676*/
         B     WARNMSG                                             0460
*MSGEOUT:                           /* FORMAT WARNING MSG E    Y02676*/
*         FMSGE = '0'B;             /* TURN OFF MSG E FLAG     Y02676*/
MSGEOUT  NI    FMSGE,B'10111111'                                   0461
*         PTLTEXT(1:TPNLNG) = MSGETPN; /* COPY MSG ID          Y02676*/
         SR    @10,@10                                             0462
         IC    @10,TPNLNG                                          0462
         LR    @08,@10                                             0462
         BCTR  @08,0                                               0462
         L     @15,@CA00303                                        0462
         L     @15,MSGEP-MSGTABLE(,@15)                            0462
         EX    @08,@SM00601                                        0462
*                                   /* COPY MESSAGE TEXT       Y02676*/
*         PTLTEXT(TPNLNG+1:TPNLNG+MSGELNG) = MSGETEXT;             0463
         LA    @08,PTLTEXT(@10)                                    0463
         SR    @14,@14                                             0463
         IC    @14,MSGELNG(,@15)                                   0463
         LR    @07,@14                                             0463
         BCTR  @07,0                                               0463
         EX    @07,@SM00603                                        0463
*         PTLLL = MSGELNG + TPNLNG + 4; /* SET SEGMENT LENGTH  Y02676*/
         AR    @14,@10                                             0464
         AH    @14,@CH00152                                        0464
         STH   @14,PTLLL                                           0464
*         PTLOFFST = 0;             /* NO MSG INSERT           Y02676*/
         SR    @10,@10                                             0465
         STH   @10,PTLOFFST                                        0465
*         PTLSCNT = 1;              /* 1 MSG SEGMENT           Y02676*/
         MVC   PTLSCNT(4),@CF00035                                 0466
*         PTLSNEXT = 0;             /* NO 2ND LEVEL MSG        Y02676*/
         ST    @10,PTLSNEXT                                        0467
*         PTLSPTR = ADDR(PTLBUF);   /* SET PTR TO MSG SEGMENT  Y02676*/
         LA    @10,PTLBUF                                          0468
         ST    @10,PTLSPTR                                         0468
*         GOTO WARNMSG;             /* ISSUE PUTLINE           Y02676*/
         B     WARNMSG                                             0469
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*      CALL IO RTN TO CLOSE BROADCAST DATA SET                    */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*LCLOSE:                            /* CLOSE BROADCAST DATA SET      */
*         SDIOPARM = SDIOPARM && SDIOPARM; /* CLEAR PARM LIST AREA   */
LCLOSE   L     @10,IOPBASE                                         0470
         XC    SDIOPARM(20,@10),SDIOPARM(@10)                      0470
*         P2CLOSE = '1'B;           /* SET PARM FLAG FOR CLOSE       */
         OI    P2CLOSE(@10),B'00100000'                            0471
*         R1 = IOPBASE;             /* REG1 = ADDR PARM LIST         */
         LR    R1,@10                                              0472
*         CALL IEEVSDIO;            /* CALL IO RTN TO CLOSE DATA SET */
         L     @15,@CV00471                                        0473
         BALR  @14,@15                                             0473
*         FOPEN = '0'B;             /* TURN OPEN FLAG OFF            */
         NI    FOPEN,B'10111111'                                   0474
*         GOTO EXIT1;               /* CONTINUE CLEANUP              */
         B     EXIT1                                               0475
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /*            -    C    L    E    A    N    U    P    -            */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*EXITCODE:                          /* CLEANUP, DEQ, RETURN TO TMP   */
*         IF FMSG0 = '1'B           /* TEST FLAG FOR MSG 0           */
*           THEN                    /* SEND MSG TEXT WAS TRUNCATED   */
EXITCODE TM    FMSG0,B'00000001'                                   0476
         BO    @RT00476                                            0476
*             GOTO MSG0OUT;         /* SET UP WARNING MSG TO SENDER  */
*         IF FMSG7 = '1'B           /* TEST FLAG FOR MSG 7           */
*           THEN                    /* YES, SOME USERS NOT ACCEPTING
*                                      MSGS, GIVE WARNING TO SENDER  */
         TM    FMSG7,B'00010000'                                   0478
         BO    @RT00478                                            0478
*             GOTO MSG7OUT;         /* ISSUE WARNING MSG 7           */
*         IF FMSGE = '1'B           /* TEST MSGE FLAG          Y02676*/
*           THEN                    /* YES, SOME USERIDS       Y02676
*                                      IGNORED                       */
         TM    FMSGE,B'01000000'                                   0480
         BO    @RT00480                                            0480
*             GOTO MSGEOUT;         /* ISSUE WARNING MSG E     Y02676*/
*         IF FMSGD = '1'B           /* TEST MSGD FLAG          Y02676*/
*           THEN                    /* YES, SOME USERS COULD   Y02676
*                                      NOT GET MESSAGE               */
         TM    FMSGD,B'00000100'                                   0482
         BO    @RT00482                                            0482
*             GOTO MSGDOUT;         /* ISSUE WARNING MSG D     Y02676*/
*EXIT0:                             /* ENTRY AFTER 2 PUTLINE ERRORS  */
*         IF FENQUSD = '1'B         /* TEST ENQ FLAG FOR USER DIRECT.*/
*           THEN                    /* YES, USER DIRECT. IS ENQ'ED ON*/
EXIT0    TM    FENQUSD,B'00100000'                                 0484
         BNO   @RF00484                                            0484
*             DO;                   /* DEQ ON USER MAIL DIRECTORY    */
*               GEN( DEQ (QNAME,RNUSD,3,SYSTEM),RET=HAVE,MF=(E,DEQL) );
          DEQ (QNAME,RNUSD,3,SYSTEM),RET=HAVE,MF=(E,DEQL)
*               FENQUSD = '0'B;     /* TURN OFF ENQ FLAG             */
         NI    FENQUSD,B'11011111'                                 0487
*             END;                                                 0488
*         IF FENQ1 = '1'B           /* TEST ENQ FLAG FOR RECORD 1    */
*           THEN                    /* RECORD 1 IS ENQ'ED ON         */
@RF00484 TM    FENQ1,B'10000000'                                   0489
         BNO   @RF00489                                            0489
*             DO;                   /* DEQ ON RECORD 1               */
*               GEN( DEQ (QNAME,RNRC1,3,SYSTEM),RET=HAVE,MF=(E,DEQL) );
          DEQ (QNAME,RNRC1,3,SYSTEM),RET=HAVE,MF=(E,DEQL)
*               FENQ1 = '0'B;       /* TURN OFF ENQ FLAG             */
         NI    FENQ1,B'01111111'                                   0492
*             END;                                                 0493
*         IF FOPEN = '1'B           /* TEST FLAG FOR DATA SET OPEN   */
*           THEN                    /* BROADCAST DATA SET IS OPEN    */
@RF00489 TM    FOPEN,B'01000000'                                   0494
         BO    @RT00494                                            0494
*             GOTO LCLOSE;          /* CLOSE BROADCAST DATA SET      */
*EXIT1:                             /* DATA SET HAS BEEN CLOSED      */
*         IF FPARS = '1'B           /* HAS PARSE BEEN INVOKED        */
*           THEN                    /* PDL STORAGE IS ALLOCATED      */
EXIT1    TM    FPARS,B'00100000'                                   0496
         BNO   @RF00496                                            0496
*            DO;                    /* RELEASE STORAGE ALLOCATED FOR
*                                      PDL FROM SUBPOOL 1            */
*              R5 = ADDR(PDLPTR);   /* PUT PTR TO PDL INTO REG 5     */
         LA    R5,PDLPTR                                           0498
*              GEN   (  IKJRLSA  (R5) );                           0499
           IKJRLSA  (R5)
*              FPARS = '0'B;        /* TURN PARSE FLAG OFF           */
         NI    FPARS,B'11011111'                                   0500
*            END;                                                  0501
*                                                                  0501
*EXIT3:                             /* CLEANUP DONE, RETURN TO TMP   */
*         IF FFLUSH = '1'B          /* IS FLAG ON TO FLUSH STACK AND
*                                      CLEAR THE INPUT QUEUE?        */
*           THEN                    /* YES, ABNORMAL COMPLETION      */
@RF00496 DS    0H                                                  0502
EXIT3    TM    FFLUSH,B'00000100'                                  0502
         BNO   @RF00502                                            0502
*            DO;                    /* FLUSH STACK & CLEAR INPUT Q   */
*                                                                  0503
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
* /*                                                                 */
* /* ABNORMAL COMPLETION - FLUSH THE STACK AND CLEAR THE INPUT QUEUE */
* /*                                                                 */
* /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*FLUSHQ:                            /* FLUSH STACK, CLEAR INPUT Q   */
*        R1 = ADDR(AUTOPARM);       /* REG 1 = ADDR STACK PARM AREA */
FLUSHQ   LA    R1,AUTOPARM                                         0504
*        R5 = ADDR(STPBAREA);       /* SET PTR TO STACK PARM BLOCK  */
         LA    R5,STPBAREA                                         0505
*        GEN;                                                      0506
         STACK  PARM=(R5),MF=(E,(1))   FLUSH THE STACK
         TCLEARQ  INPUT                CLEAR THE INPUT QUEUE
*         RETURN CODE(12);          /* RETURN TO TMP WITH      Y02676
*                                      CODE 12                       */
         L     @13,4(,@13)                                         0507
         L     @00,@SIZDATD                                        0507
         LR    @01,@12                                             0507
         FREEMAIN R,LV=(0),A=(1)
         LA    @15,12                                              0507
         L     @14,12(,@13)                                        0507
         LM    @00,@12,20(@13)                                     0507
         BR    @14                                                 0507
*           END;                     /* END OF ABNORMAL COMPLETION  */
*EXIT4:                             /* BRANCH PT AFTER STACK & CLEARQ*/
*         RETURN CODE(0);           /* RETURN TO TMP WITH      Y02676
*                                      CODE 0                        */
*                                                                  0509
*                                                                  0509
@RF00502 DS    0H                                                  0509
EXIT4    L     @13,4(,@13)                                         0509
         L     @00,@SIZDATD                                        0509
         LR    @01,@12                                             0509
         FREEMAIN R,LV=(0),A=(1)
         SR    @15,@15                                             0509
         L     @14,12(,@13)                                        0509
         LM    @00,@12,20(@13)                                     0509
         BR    @14                                                 0509
*         GENERATE;                                                0510
LISTBEG  ENQ   (QNAME,,S,3,SYSTEM),RET=HAVE,MF=L                 Y02676
         ENQ   (QNAME,,E,3,SYSTEM),RET=HAVE,MF=L                 Y02676
         DEQ   (QNAME,,3,SYSTEM),RET=HAVE,MF=L                   Y02676
         PUTLINE  OUTPUT=(0,MULTLVL),MF=L
         STACK  DELETE=ALL,MF=L
LISTEND  EQU   *                   END OF LIST FORMS
SPARE    DC    50X'00'              PATCH AREA                   Y02676
*         END IKJEES10                                             0511
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJCPPL )                                        *
*/*%INCLUDE SYSLIB  (IKJDAPL )                                        *
*/*%INCLUDE SYSLIB  (IKJDAP08)                                        *
*/*%INCLUDE SYSLIB  (IKJIOPL )                                        *
*/*%INCLUDE SYSLIB  (IKJSTPB )                                        *
*/*%INCLUDE SYSLIB  (IKJZT301)                                        *
*/*%INCLUDE SYSLIB  (IKJZT304)                                        *
*/*%INCLUDE SYSLIB  (IKJZT305)                                        *
*/*%INCLUDE SYSLIB  (IKJPSCB )                                        *
*;                                                                 0511
@EL00001 L     @13,4(,@13)                                         0511
@EF00001 L     @00,@SIZDATD                                        0511
         LR    @01,@12                                             0511
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0511
         BR    @14                                                 0511
@DATA    DS    0H
@CH00152 DC    H'4'
@CH00344 DC    H'5'
@CH00513 DC    H'6'
@CH00055 DC    H'8'
@CH00034 DC    H'9'
@CH00205 DC    H'13'
@CH00514 DC    H'29'
@SM00540 MVC   USMTEXT-1(0,@08),MSGTEXT(@01)
@SM00542 MVC   USMTEXT-1(0,@08),PSCBUSER(@14)
@SM00547 MVC   0(0,@08),MSG1TPN(@07)
@SM00549 MVC   0(0,@08),MSG1TEXT(@07)
@SM00556 MVC   PTLTEXT(0),MSG4TPN(@15)
@SM00558 MVC   0(0,@08),MSG4TEXT(@15)
@SM00560 MVC   PTLTEXT(0),MSGCTPN(@15)
@SM00562 MVC   0(0,@08),MSGCTEXT(@15)
@SM00564 MVC   PTLTEXT(0),MSG5TPN(@15)
@SM00566 MVC   0(0,@08),MSG5TEXT(@15)
@SM00568 MVC   PTLTEXT(0),MSGBTPN(@15)
@SM00570 MVC   0(0,@08),MSGBTEXT(@15)
@SM00573 MVC   PTLTEXT(0),MSGATPN(@15)
@SM00575 MVC   0(0,@08),MSGATEXT(@15)
@SM00577 MVC   0(0,@08),MSG2TPN(@07)
@SM00579 MVC   0(0,@08),MSG2BEG(@07)
@SM00581 MVC   0(0,@08),MSG2END(@15)
@SM00583 MVC   PTLTEXT(0),MSG7TPN(@15)
@SM00585 MVC   0(0,@08),MSG7BEG(@15)
@SM00587 MVC   0(0,@01),MSG7INS
@SM00589 MVC   0(0,@01),MSG7END(@15)
@SM00592 MVC   PTLTEXT(0),MSGDTPN(@15)
@SM00594 MVC   0(0,@08),MSGDBEG(@15)
@SM00596 MVC   0(0,@01),MSGDINS
@SM00598 MVC   0(0,@01),MSGDEND(@15)
@SM00601 MVC   PTLTEXT(0),MSGETPN(@15)
@SM00603 MVC   0(0,@08),MSGETEXT(@15)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SAV001  EQU   @SA00001
@TF00001 DS    F
@TF00002 DS    F
@ZTEMPS  DS    0F
@ZT00001 DC    F'0'
@ZT00003 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
@TEMPS   EQU   @ZTEMPS
@L       EQU   @ZLEN
IKJEES10 CSECT
         DS    0F
@CF00545 DC    F'-13'
@CF00554 DC    F'-6'
@CF00551 DC    F'-3'
@CF00035 DC    F'1'
@CH00035 EQU   @CF00035+2
@CF00123 DC    F'2'
@DATD    DSECT
         DS    0D
ROUTE    DS    A
CPPLPTR  DS    A
DAPLPTR  DS    A
DAPB0PTR DS    A
DAIRRETC DS    A
IOPBASE  DS    A
IOPLPTR  DS    A
STPBPTR  DS    A
PSCBPTR  DS    A
RETC     DS    A
P        DS    AL1
R1PTR    DS    AL3
         DS    CL1
USDPTR   DS    AL3
         DS    CL1
USMPTR   DS    AL3
J        DS    AL1
MI       DS    AL1
         DS    CL2
COMMON   DS    CL32
         ORG   COMMON
FLAGS    DS    BL2
         ORG   FLAGS
FLOGON   DS    BL1
FOPEN    EQU   FLAGS+0
FPARS    EQU   FLAGS+0
FMSG7    EQU   FLAGS+0
FWTO2    EQU   FLAGS+0
FMSGD    EQU   FLAGS+0
FNOW     EQU   FLAGS+0
FMSG0    EQU   FLAGS+0
FENQ1    DS    BL1
FMSGE    EQU   FLAGS+1
FENQUSD  EQU   FLAGS+1
FCHAIN   EQU   FLAGS+1
FBADPUTL EQU   FLAGS+1
FFLUSH   EQU   FLAGS+1
         ORG   COMMON+2
COMROUT  DS    AL1
VALCNT   DS    AL1
COMCPPL  DS    AL4
CPDLMSGT DS    AL4
PDLPTR   DS    AL4
@NM00001 DS    CL4
         ORG   @NM00001
IDCNT    DS    AL1
IDTBL    DS    AL3
         ORG   COMMON+20
@NM00002 DS    CL4
         ORG   @NM00002
M7IND    DS    AL1
COMMSG7  DS    AL3
         ORG   COMMON+24
@NM00003 DS    CL4
         ORG   @NM00003
MDIND    DS    AL1
COMMSGD  DS    AL3
         ORG   COMMON+28
@NM00004 DS    CL4
         ORG   @NM00004
COMRETC  DS    FL2
@NM00005 DS    FL2
         ORG   COMMON+32
MSG7INS  DS    CL160
MSGDINS  DS    CL160
PTLBUF   DS    CL214
         ORG   PTLBUF
PTLLL    DS    FL2
PTLOFFST DS    FL2
PTLTEXT  DS    CL210
         ORG   PTLBUF+214
         DS    CL2
PTLSEGBL DS    CL16
         ORG   PTLSEGBL
PTLSNEXT DS    AL4
PTLSCNT  DS    FL4
PTLSPTR  DS    AL4
PTLSPTR2 DS    AL4
         ORG   PTLSEGBL+16
PTLEVEL2 DS    CL16
         ORG   PTLEVEL2
PL2NEXT  DS    AL4
PL2SCNT  DS    FL4
PL2SPTR  DS    AL4
PL2SPT2  DS    AL4
         ORG   PTLEVEL2+16
SEGDESC1 DS    CL34
         ORG   SEGDESC1
SD1LL    DS    FL2
SD1OFFST DS    FL2
SD1TEXT  DS    CL30
         ORG   SEGDESC1+34
         DS    CL2
SEGDESC2 DS    CL6
         ORG   SEGDESC2
SD2LL    DS    FL2
SD2OFFST DS    FL2
SD2TEXT  DS    CL2
         ORG   SEGDESC2+6
         DS    CL2
AUTODAPL DS    CL20
AUTODAIR DS    CL84
F18PARMS DS    CL16
         ORG   F18PARMS
F18DAPL  DS    AL4
F18DARC  DS    AL4
F18F02A  DS    AL4
F18CLNOA DS    AL4
         ORG   F18PARMS+16
IOPAREA  DS    CL32
AUTOPARM DS    CL16
DIRAREA  DS    CL129
         DS    CL3
MSGAREA  DS    CL129
         DS    CL3
MSGAREA2 DS    CL129
WORK4    DS    CL4
ZERENT   DS    CL13
         DS    CL2
SDECB    DS    CL4
AUTOLIST DS    CL64
         ORG   AUTOLIST
ENQSL    DS    CL12
ENQEL    DS    CL12
DEQL     DS    CL12
PUTLL    DS    CL12
STPBAREA DS    CL16
         ORG   AUTOLIST+64
RNUSD    DS    CL3
RNPREV   DS    CL3
RNUSM    DS    CL3
         DS    CL3
SRERRCD  DS    CL2
         DS    CL6
WORK8    DS    CL8
IDUSRID  DS    20CL8
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
@DATEND  EQU   *
IKJEES10 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@SIZ001  EQU   @SIZDATD
@CA00303 DC    A(MSGTABLE)
@CV00467 DC    V(IKJEES11)
@CV00471 DC    V(IEEVSDIO)
         DS    0D
F18F02   DC    A(0)
F18CLNO  DC    AL2(1)
TPNLNG   DC    AL1(9)
PANOPRMT DC    AL1(4)
PANOSPAC DC    AL1(16)
PUNOSPAC DC    AL1(16)
DAIRCD08 DC    X'0008'
DAIRDSN  DS    CL15
         ORG   DAIRDSN
DSLNGTH  DC    X'000D'
DSNAME   DC    CL13'SYS1.BRODCAST'
         ORG   DAIRDSN+15
SDERR    DC    X'80'
NOCORE   DC    X'40'
BADFMT   DC    X'10'
IOERR    DC    X'08'
OPENERR  DC    X'02'
DSFULL   DC    X'01'
USDKEY   DC    X'01'
USMKEY   DC    X'03'
LVL2IND  DC    CL1'+'
BLNKID   DC    CL8' '
QNAME    DC    CL8'SYSIKJBC'
RNRC1    DC    X'000000'
         DS    CL1
WEARTOGO DC    AL4(EXITCODE)
         DC    AL4(EXIT1)
         DC    AL4(EXIT3)
         DC    AL4(MSG2OUT)
         DC    AL4(BADPARSE)
         DC    AL4(BADTPUT)
         DC    AL4(DODAIR)
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
@0       EQU   00
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
R1       EQU   @01
I        EQU   @04
R5       EQU   @05
R15      EQU   @15
R0       EQU   @00
R14      EQU   @14
         EXTRN MSGTABLE
NEXTPATH EQU   0
CPPL     EQU   0
CPPLUPT  EQU   CPPL+4
CPPLPSCB EQU   CPPL+8
CPPLECT  EQU   CPPL+12
DAPL     EQU   0
DAPLUPT  EQU   DAPL
DAPLECT  EQU   DAPL+4
DAPLECB  EQU   DAPL+8
DAPLPSCB EQU   DAPL+12
DAPLDAPB EQU   DAPL+16
DAPB08   EQU   0
DA08CD   EQU   DAPB08
DA08FLG  EQU   DAPB08+2
DA08PDSN EQU   DAPB08+8
DA08DDN  EQU   DAPB08+12
DA08UNIT EQU   DAPB08+20
DA08SER  EQU   DAPB08+28
DA08MNM  EQU   DAPB08+52
DA08PSWD EQU   DAPB08+60
DA08DSP1 EQU   DAPB08+68
DA08SHR  EQU   DA08DSP1
DA08DPS2 EQU   DAPB08+69
DA08KEEP EQU   DA08DPS2
DA08DPS3 EQU   DAPB08+70
DA08KEP  EQU   DA08DPS3
DA08CTL  EQU   DAPB08+71
IOPARML  EQU   0
SDIOPARM EQU   IOPARML
@NM00027 EQU   SDIOPARM
P1OPEN   EQU   @NM00027
P1READ   EQU   @NM00027
@NM00028 EQU   SDIOPARM+1
P2WRDI   EQU   @NM00028
P2WRDAF  EQU   @NM00028
P2CLOSE  EQU   @NM00028
PARMKEY  EQU   SDIOPARM+2
PARMRBA  EQU   SDIOPARM+4
PARMIOAD EQU   SDIOPARM+8
PARMDDNM EQU   SDIOPARM+12
PARMRCD1 EQU   IOPARML+28
IOPL     EQU   0
IOPLUPT  EQU   IOPL
IOPLECT  EQU   IOPL+4
IOPLECB  EQU   IOPL+8
STPB     EQU   0
R1BC     EQU   0
R1BCPTRP EQU   R1BC
R1USPTRP EQU   R1BC+4
R1USPTR  EQU   R1USPTRP+1
USDIR    EQU   0
USDENTRY EQU   USDIR
USDID    EQU   USDENTRY
USDRBA   EQU   USDENTRY+7
USDEND   EQU   USDENTRY+10
USDNEXT  EQU   USDIR+126
USMSG    EQU   0
USMLNG   EQU   USMSG
USMTEXT  EQU   USMSG+1
USMNEXT  EQU   USMSG+126
MSG1     EQU   0
MSG1TPN  EQU   MSG1
MSG1LVL2 EQU   MSG1+16
MSG1LNG  EQU   MSG1+20
MSG1TEXT EQU   MSG1+21
MSG2     EQU   0
MSG2TPN  EQU   MSG2
MSG2BEGL EQU   MSG2+16
MSG2BEG  EQU   MSG2+17
MSG2ENDL EQU   MSG2+25
MSG2END  EQU   MSG2+26
MSG4     EQU   0
MSG4TPN  EQU   MSG4
MSG4LNG  EQU   MSG4+16
MSG4TEXT EQU   MSG4+17
MSG4SECT EQU   MSG4+52
MSG4MAIL EQU   MSG4+53
MSG5     EQU   0
MSG5TPN  EQU   MSG5
MSG5LVL2 EQU   MSG5+16
MSG5LNG  EQU   MSG5+20
MSG5TEXT EQU   MSG5+21
MSG7     EQU   0
MSG7TPN  EQU   MSG7
MSG7BEGL EQU   MSG7+16
MSG7BEG  EQU   MSG7+17
MSG7ENDL EQU   MSG7+25
MSG7END  EQU   MSG7+26
MSGA     EQU   0
MSGATPN  EQU   MSGA
MSGALNG  EQU   MSGA+16
MSGATEXT EQU   MSGA+17
MSGB     EQU   0
MSGBTPN  EQU   MSGB
MSGBLVL2 EQU   MSGB+16
MSGBLNG  EQU   MSGB+20
MSGBTEXT EQU   MSGB+21
MSGC     EQU   0
MSGCTPN  EQU   MSGC
MSGCLNG  EQU   MSGC+16
MSGCTEXT EQU   MSGC+17
MSGD     EQU   0
MSGDTPN  EQU   MSGD
MSGDBEGL EQU   MSGD+16
MSGDBEG  EQU   MSGD+17
MSGDENDL EQU   MSGD+25
MSGDEND  EQU   MSGD+26
MSGE     EQU   0
MSGETPN  EQU   MSGE
MSGELNG  EQU   MSGE+16
MSGETEXT EQU   MSGE+17
MSG1L2   EQU   0
MSG5L2   EQU   0
MSGBL2   EQU   0
PSCB     EQU   0
PSCBUSER EQU   PSCB
PSCBUSRL EQU   PSCB+7
PSCBATR1 EQU   PSCB+16
MSGTEXT  EQU   0
PDLMSG   EQU   0
PDLMPTR  EQU   PDLMSG
@NM00050 EQU   PDLMSG+4
PDLMLL   EQU   @NM00050
TMPLIST  EQU   0
MSG1P    EQU   MSGTABLE
MSG2P    EQU   MSGTABLE+4
MSG4P    EQU   MSGTABLE+12
MSG5P    EQU   MSGTABLE+16
MSG7P    EQU   MSGTABLE+24
MSGAP    EQU   MSGTABLE+36
MSGBP    EQU   MSGTABLE+40
MSGCP    EQU   MSGTABLE+44
MSGDP    EQU   MSGTABLE+48
MSGEP    EQU   MSGTABLE+52
MBL2SEGA EQU   MSGBL2
MBL2SEGB EQU   MSGBL2+4
MBL2SEGC EQU   MSGBL2+8
MSG9P    EQU   MSGTABLE+32
M1L2SEGA EQU   MSG1L2
M5L2SEGA EQU   MSG5L2
M5L2SEGB EQU   MSG5L2+4
M5L2SEGC EQU   MSG5L2+8
*                                      START UNREFERENCED COMPONENTS
PDLMRES  EQU   @NM00050+3
PDLMFL   EQU   @NM00050+2
PSCBU    EQU   PSCB+64
PSCBRSZ  EQU   PSCB+60
PSCBLINE EQU   PSCB+59
PSCBCHAR EQU   PSCB+58
PSCBUPTL EQU   PSCB+56
PSCBUPT  EQU   PSCB+52
PSCBRLGB EQU   PSCB+48
PSCBDEST EQU   PSCB+40
@NM00049 EQU   PSCB+36
@NM00048 EQU   PSCB+32
@NM00047 EQU   PSCB+28
PSCBLTI2 EQU   PSCB+24
PSCBLTIM EQU   PSCB+20
PSCBATR2 EQU   PSCB+18
@NM00046 EQU   PSCBATR1
@NM00045 EQU   PSCBATR1
@NM00044 EQU   PSCBATR1
PSCBATTN EQU   PSCBATR1
PSCBVMNT EQU   PSCBATR1
PSCBJCL  EQU   PSCBATR1
PSCBACCT EQU   PSCBATR1
PSCBCTRL EQU   PSCBATR1
PSCBGPNM EQU   PSCB+8
@NM00043 EQU   MSGE+9
@NM00042 EQU   MSGD+9
@NM00041 EQU   MSGC+9
@NM00040 EQU   MSGB+9
@NM00039 EQU   MSGA+9
@NM00038 EQU   MSG7+9
@NM00037 EQU   MSG5+9
@NM00036 EQU   MSG4+66
@NM00035 EQU   MSG4+58
@NM00034 EQU   MSG4+9
@NM00033 EQU   MSG2+9
@NM00032 EQU   MSG1+9
USDREND  EQU   USDIR+125
@NM00031 EQU   USDIR+117
@NM00030 EQU   R1BC+45
R1LEVEL  EQU   R1BC+38
R1DSN    EQU   R1BC+14
R1BCMAX  EQU   R1BC+12
R1RECNUM EQU   R1BC+8
R1USFLGS EQU   R1USPTRP
R1BCPTR  EQU   R1BCPTRP+1
R1BCFLGS EQU   R1BCPTRP
STPBOTDD EQU   STPB+12
STPBINDD EQU   STPB+8
STPBALSD EQU   STPB+4
@NM00029 EQU   STPB
IOPLIOPB EQU   IOPL+12
PARMDCB  EQU   IOPARML+24
PARMLMCT EQU   IOPARML+20
PARMFDBK EQU   SDIOPARM+3
P2DEVAD  EQU   @NM00028
P2DEL    EQU   @NM00028
P1READ1  EQU   @NM00027
P1CREATE EQU   @NM00027
DA08ALN  EQU   DAPB08+76
DA08DSO  EQU   DAPB08+75
@NM00026 EQU   DAPB08+72
@NM00025 EQU   DA08CTL
DA08ATRL EQU   DA08CTL
DA08DMMY EQU   DA08CTL
DA08PERM EQU   DA08CTL
DA08RLSE EQU   DA08CTL
DA08UID  EQU   DA08CTL
DA08ABKL EQU   DA08CTL
DA08TRKS EQU   DA08CTL
DA08UNCT EQU   DA08DPS3
DA08CATL EQU   DA08DPS3
DA08DELE EQU   DA08DPS3
@NM00024 EQU   DA08DPS3
@NM00023 EQU   DA08DPS3
@NM00022 EQU   DA08DPS3
@NM00021 EQU   DA08DPS3
DA08UCAT EQU   DA08DPS2
DA08CAT  EQU   DA08DPS2
DA08DEL  EQU   DA08DPS2
@NM00020 EQU   DA08DPS2
@NM00019 EQU   DA08DPS2
@NM00018 EQU   DA08DPS2
@NM00017 EQU   DA08DPS2
DA08OLD  EQU   DA08DSP1
DA08MOD  EQU   DA08DSP1
DA08NEW  EQU   DA08DSP1
@NM00016 EQU   DA08DSP1
@NM00015 EQU   DA08DSP1
@NM00014 EQU   DA08DSP1
@NM00013 EQU   DA08DSP1
DA08DQTY EQU   DAPB08+48
DA08SQTY EQU   DAPB08+44
DA08PQTY EQU   DAPB08+40
DA08BLK  EQU   DAPB08+36
DA08CTRC EQU   DAPB08+6
DA08DARC EQU   DAPB08+4
@NM00012 EQU   DA08FLG
@NM00011 EQU   DA08FLG
@NM00010 EQU   DA08FLG
@NM00009 EQU   DA08FLG
@NM00008 EQU   DA08FLG
@NM00007 EQU   DA08FLG
@NM00006 EQU   DA08FLG
DA08FPE  EQU   DA08FLG
CPPLCBUF EQU   CPPL
*                                      END UNREFERENCED COMPONENTS
@RT00168 EQU   BADDAIR
@RT00179 EQU   BADIO
@RT00203 EQU   BADIO
@RT00208 EQU   LPEND1
@RT00211 EQU   VALIDID
@RT00215 EQU   SCUSD3
@RT00224 EQU   EXITCODE
@RT00266 EQU   BADIO
@RT00276 EQU   BADIOA
@RT00279 EQU   CHAIN3
@RT00290 EQU   BADIO
@RT00292 EQU   EXITCODE
@RF00292 EQU   SCUSD2
@RT00306 EQU   BADIO
@RT00324 EQU   NOMAIN
@RF00324 EQU   NOTUSABL
@RT00360 EQU   NOMAIN
@RT00362 EQU   EXIT3
@RT00370 EQU   NOMAIN
@RT00372 EQU   EXIT0
@RT00396 EQU   BADPUTL
@RT00476 EQU   MSG0OUT
@RT00478 EQU   MSG7OUT
@RT00480 EQU   MSGEOUT
@RT00482 EQU   MSGDOUT
@RT00494 EQU   LCLOSE
@EL01    EQU   @EL00001
@ENDDATA EQU   *
         END   IKJEES10
