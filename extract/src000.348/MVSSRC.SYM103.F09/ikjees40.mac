         TITLE 'IKJEES40 - ACCOUNT/BROADCAST DATA SET INTERFACE      '
IKJEES40 CSECT ,                                                   0001
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN R,LV=(0)
         LR    @12,@01                                             0001
         USING @DATD,@12                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @12,8(,@13)                                         0001
         LR    @13,@12                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MVC   @PC00001(4),0(@01)                                  0001
         MODID BRANCH = YES
         EJECT
         EJECT
         EJECT
         EJECT
         EJECT
         EJECT
         EJECT
         EJECT
         EJECT
REGS     DS    0H                                                  0103
         EJECT
*         CPPLPTR = R1;             /* SAVE REG1 PARM LIST ADDRESS   */
         ST    R1,CPPLPTR                                          0108
*         UIDLPTR = UIDLPTRP;       /* SET BASE FOR DUIDL STRUCTURE
*                                      FROM ACCOUNT PARM LIST        */
         L     @10,CPPLPTR                                         0109
         MVC   UIDLPTR(4),UIDLPTRP(@10)                            0109
*         FLAGS = FLAGS && FLAGS;   /* CLEAR FLAG AREA TO ZERO       */
         XC    FLAGS(2),FLAGS                                      0110
*         RESTRICT (IOPBASE);       /* RESTRICT REG 3 FOR LOOP CNTRL */
*         RESTRICT (I);             /* RESTRICT REG 4 FOR LOOP CNTRL */
*         RESTRICT (R5);            /* RESTRICT REG 5 FOR ARITHMETIC */
*         /* MOVE LIST FORMS OF MACROS TO AUTOMATIC STORAGE          */
*         GEN  (MVC   AUTOLIST(LISTEND-LISTBEG),LISTBEG );         0114
         MVC   AUTOLIST(LISTEND-LISTBEG),LISTBEG
*         SDECB = SDECB && SDECB;   /* SET SEND ECB = 0              */
*                                                                  0115
         XC    SDECB(4),SDECB                                      0115
*         /* IF IN THE BACKGROUND, ASSIGN DDNAME = SYSLBC.           */
*         IF ECTBKGRD = '1'B                                       0116
*           THEN                    /* BACKGROUND,            Y02676 */
         L     @10,CPPLPTR                                         0116
         L     @10,ECTPTR(,@10)                                    0116
         TM    ECTBKGRD(@10),B'00000010'                           0116
         BNO   @RF00116                                            0116
*             DO;                                                  0117
*               BCDDNM = 'SYSLBC';  /* ASSIGN DDNAME = SYSLBC Y02676 */
         MVI   BCDDNM+6,C' '                                       0118
         MVI   BCDDNM+7,C' '                                       0118
         MVC   BCDDNM(6),@CC00376                                  0118
*               GOTO OPENBC;        /* SKIP DAIR              Y02676 */
         B     OPENBC                                              0119
*             END;                                                 0120
* GEN(EJECT);                                                      0121
@RF00116 DS    0H                                                  0121
         EJECT
* /*                                                                 */
* /*                 -    D    A    I    R    -                      */
* /*                                                                 */
* /*      GO TO DAIR WITH CODE X'08' TO REQUEST ALLOCATION OF        */
* /*      BROADCAST DATA SET.  SINCE THE DATA SET IS CATALOGED,      */
* /*      ONLY THE DSNAME AND DISPOSITION FIELDS NEED BE SUPPLIED.   */
* /*                                                                 */
*         DAPB0PTR = ADDR(AUTODAIR);/* SET BASE FOR DAIR PARM BL     */
         LA    @10,AUTODAIR                                        0122
         ST    @10,DAPB0PTR                                        0122
*         DAPB08=DAPB08 && DAPB08;  /* CLEAR DAIR PARM BL            */
         XC    DAPB08(84,@10),DAPB08(@10)                          0123
*         DA08CD = DAIRCD08;        /* SET DAIR CODE = X'08'         */
         MVC   DA08CD(2,@10),DAIRCD08                              0124
*         DA08PDSN = ADDR(DAIRDSN); /* PTR TO DATA SET NAME          */
         LA    @02,DAIRDSN                                         0125
         ST    @02,DA08PDSN(,@10)                                  0125
*         DA08DDN  = ' ';           /* DDNAME FIELD = BLANK,       0126
*                                      DDNAME IS RETURNED HERE       */
         MVI   DA08DDN+1(@10),C' '                                 0126
         MVC   DA08DDN+2(6,@10),DA08DDN+1(@10)                     0126
         MVI   DA08DDN(@10),C' '                                   0126
*         DA08UNIT = ' ';           /* UNITNAME = BLANK              */
         MVI   DA08UNIT+1(@10),C' '                                0127
         MVC   DA08UNIT+2(6,@10),DA08UNIT+1(@10)                   0127
         MVI   DA08UNIT(@10),C' '                                  0127
*         DA08SER = ' ';            /* VOLUME SERIAL NO. = BLANK     */
         MVI   DA08SER+1(@10),C' '                                 0128
         MVC   DA08SER+2(6,@10),DA08SER+1(@10)                     0128
         MVI   DA08SER(@10),C' '                                   0128
*         DA08MNM = ' ';            /* MEMBER NAME = BLANK           */
         MVI   DA08MNM+1(@10),C' '                                 0129
         MVC   DA08MNM+2(6,@10),DA08MNM+1(@10)                     0129
         MVI   DA08MNM(@10),C' '                                   0129
*         DA08PSWD = ' ';           /* DATA SET PASSWORD = BLANK     */
         MVI   DA08PSWD+1(@10),C' '                                0130
         MVC   DA08PSWD+2(6,@10),DA08PSWD+1(@10)                   0130
         MVI   DA08PSWD(@10),C' '                                  0130
*         DA08SHR = '1'B;           /* STATUS = SHARE                */
         OI    DA08SHR(@10),B'00001000'                            0131
*         DA08KEEP = '1'B;          /* NORMAL DISPOSITION = KEEP     */
         OI    DA08KEEP(@10),B'00001000'                           0132
*         DA08KEP = '1'B;           /* CONDITIONAL DISPOSITION = KEEP*/
         OI    DA08KEP(@10),B'00001000'                            0133
*         DAPLPTR = ADDR(AUTODAPL); /* SET PTR TO PARM LIST          */
         LA    @02,AUTODAPL                                        0134
         ST    @02,DAPLPTR                                         0134
*         DAPLUPT = CPPLUPT;        /* UPT ADDR                      */
         L     @15,CPPLPTR                                         0135
         MVC   DAPLUPT(4,@02),CPPLUPT(@15)                         0135
*         DAPLECT = CPPLECT;        /* ECT ADDR                      */
         MVC   DAPLECT(4,@02),CPPLECT(@15)                         0136
*         DAPLECB = ADDR(SDECB);    /* ADDR OF SEND ECB              */
         LA    @14,SDECB                                           0137
         ST    @14,DAPLECB(,@02)                                   0137
*         DAPLPSCB = CPPLPSCB;      /* PTR TO PSCB                   */
         MVC   DAPLPSCB(4,@02),CPPLPSCB(@15)                       0138
*         DAPLDAPB = DAPB0PTR;      /* PTR TO DAIR PARM BLOCK        */
         ST    @10,DAPLDAPB(,@02)                                  0139
*         R1 = DAPLPTR;             /* SET REG1 = ADDR PARM LIST     */
         LR    R1,@02                                              0140
*         GEN  (LINK  EP=IKJDAIR);  /* LINK TO DAIR '08' TO        0141
*                                      ALLOCATE BROADCAST DATA SET   */
         LINK  EP=IKJDAIR
*         DAIRRETC = R15;           /* SAVE RETURN CODE FROM REG 15  */
         ST    R15,DAIRRETC                                        0142
*         IF DAIRRETC > 0           /* TEST RETURN CODE FROM DAIR    */
*           THEN                    /* IF RET CODE NOT ZERO          */
         L     @10,DAIRRETC                                        0143
         LTR   @10,@10                                             0143
         BP    @RT00143                                            0143
*             GOTO BADDAIR;         /* ALLOCATION NOT SUCCESSFUL     */
*         BCDDNM = DA08DDN;         /* SAVE DDNAME FROM DAIR         */
         L     @10,DAPB0PTR                                        0145
         MVC   BCDDNM(8),DA08DDN(@10)                              0145
* GEN(EJECT);                                                      0146
         EJECT
* /*                                                                 */
* /*      CALL IO RTN TO OPEN BROADCAST DATA SET                     */
* /*      THE DCB FOR THIS OPEN SPECIFIES FEEDBACK IN RBA FORM.      */
* /*      READ FIRST RECORD OF BROADCAST DATA SET                    */
* /*                                                                 */
*OPENBC:  ;                         /* ENQ FOR SHARE ON FIRST RECORD */
OPENBC   DS    0H                                                  0148
*         GEN  (ENQ  (QNAME,RNRC1,S,3,SYSTEM),RET=HAVE,MF=(E,ENQSL) );
         ENQ  (QNAME,RNRC1,S,3,SYSTEM),RET=HAVE,MF=(E,ENQSL)
*         FENQ1 = '1'B;             /* SET FLAG FOR ENQ ON RECORD 1  */
         OI    FENQ1,B'01000000'                                   0149
*         IOPBASE = ADDR(IOPAREA);  /* SET BASE FOR IO PARM LIST     */
         LA    IOPBASE,IOPAREA                                     0150
*         IOPARML = IOPARML && IOPARML;   /* CLEAR ENTIRE PARM AREA  */
         XC    IOPARML(32,IOPBASE),IOPARML(IOPBASE)                0151
*         P1OPEN = '1'B;            /* SET PARM FLAG FOR OPEN        */
         OI    P1OPEN(IOPBASE),B'10000000'                         0152
*         PARMDDNM = BCDDNM;        /* SET DDNAME IN PARM LIST       */
         MVC   PARMDDNM(8,IOPBASE),BCDDNM                          0153
*         R1 = IOPBASE;             /* REG 1 = ADDR PARM LIST        */
         LR    R1,IOPBASE                                          0154
*         CALL  IEEVSDIO;           /* CALL IO RTN TO READ RECORD 1  */
         L     @15,@CV00381                                        0155
         BALR  @14,@15                                             0155
*         RETC = R15;               /* SAVE RETURN CODE FROM REG 15  */
         ST    R15,RETC                                            0156
*         IF RETC > 0               /* TEST RETURN CODE FROM IO RTN  */
*           THEN                    /* READ WAS NOT SUCCESSFUL       */
         L     @10,RETC                                            0157
         LTR   @10,@10                                             0157
         BP    @RT00157                                            0157
*             GOTO BADIO;           /* GO TO ANALYZE ERROR AND     0158
*                                      GIVE WARNING MSG              */
*         R1PTR = PARMRCD1;         /* SET BASE FOR RECORD1          */
         L     @10,PARMRCD1(,IOPBASE)                              0159
         ST    @10,@TF00001                                        0159
         MVC   R1PTR(3),@TF00001+1                                 0159
*         FOPEN = '1'B;             /* SET FLAG FOR GOOD OPEN        */
         OI    FOPEN,B'00000010'                                   0160
*         RNUSD = R1USPTR;          /* SET ADDR FIRST USER DIR RECORD*/
         MVC   RNUSD(3),R1USPTR(@10)                               0161
*SUBLIST:                 /* PROCESS 1 USERID SUBLIST OF PARM LIST   */
*         IF UIDLCT = 0             /* TEST NO. USERIDS IN THIS LIST */
*           THEN                    /* NO USERIDS IN THIS LIST       */
SUBLIST  L     @10,UIDLPTR                                         0162
         MVC   @ZT00002+2(2),UIDLCT(@10)                           0162
         L     @02,@ZT00002                                        0162
         LTR   @02,@02                                             0162
         BZ    @RT00162                                            0162
*             GOTO SUBLEND;         /* GET PTR TO NEXT PARM SUBLIST  */
*         JCNT = UIDLCT;            /* SET NO. USERIDS IN THIS LIST  */
         MVC   JCNT(1),UIDLCT+1(@10)                               0164
*         J = 0;                    /*INIT INDEX TO USERID LIST      */
         MVI   J,X'00'                                             0165
*         IF UIDADD = '1'B          /* TEST 'ADD' FLAG IN PARM LIST  */
*           THEN                    /* 'ADD' SPEC'D IN PARM LIST     */
         TM    UIDADD(@10),B'10000000'                             0166
         BNO   @RF00166                                            0166
*             FADD = '1'B;          /* SET FLAG FOR 'ADD' REQUESTED  */
         OI    FADD,B'10000000'                                    0167
*           ELSE                    /* 'ADD' NOT SPEC'D              */
*             IF UIDDEL = '1'B      /* TEST 'DELETE' FLAG IN PARM    */
*               THEN                /* 'DELETE' SPEC'D IN PARM LIST  */
         B     @RC00166                                            0168
@RF00166 L     @10,UIDLPTR                                         0168
         TM    UIDDEL(@10),B'01000000'                             0168
         BNO   @RF00168                                            0168
*                 FDEL = '1'B;      /* SET FLAG FOR 'DELETE' SPEC'D  */
         OI    FDEL,B'01000000'                                    0169
*               ELSE                /* 'DELETE' NOT SPEC'D           */
*                 IF UIDCHG = '1'B  /* TEST 'CHANGE' FLAG IN PARM    */
*                   THEN            /* 'CHANGE' SPEC'D IN PARM LIST  */
         B     @RC00168                                            0170
@RF00168 L     @10,UIDLPTR                                         0170
         TM    UIDCHG(@10),B'00100000'                             0170
         BNO   @RF00170                                            0170
*                     FCHNG = '1'B; /* SET FLAG FOR 'CHANGE SPEC'D   */
         OI    FCHNG,B'00100000'                                   0171
*                   ELSE            /* PARMLIST IS BAD               */
*                     GOTO SUBLEND; /* PROCESS NEXT USERID SUBLIST   */
*SUBL2:                   /* PROCESS 1 USERID FROM ACCT PARM LIST    */
*         J = J+1;                  /* BUMP INDEX TO USERID LIST     */
@RC00168 DS    0H                                                  0173
@RC00166 DS    0H                                                  0173
SUBL2    LA    @10,1                                               0173
         MVC   @ZT00003+3(1),J                                     0173
         A     @10,@ZT00003                                        0173
         STC   @10,J                                               0173
*         IF J > JCNT               /* CHECK FOR END OF THIS SUBLIST */
*           THEN                    /* END OF THIS USERID SUBLIST    */
         CLC   J(1),JCNT                                           0174
         BH    @RT00174                                            0174
*             GOTO SUBLEND;         /* GET PTR TO NEXT SUBLIST       */
*                                   /* ENQ 'E' ON USER MAIL DIRECTRY */
*         GEN (ENQ  (QNAME,RNUSD,E,3,SYSTEM),RET=HAVE,MF=(E,ENQEL) );
         ENQ  (QNAME,RNUSD,E,3,SYSTEM),RET=HAVE,MF=(E,ENQEL)
*         FENQUSD = '1'B;           /* SET FLAG FOR ENQ ON DIRECTORY */
         OI    FENQUSD,B'00010000'                                 0177
*READUSD:                 /* READ A USER MAIL DIRECTORY RECORD       */
* /*                                                                 */
* /*      CALL IO RTN TO READ USER DIRECTORY RECORD                  */
* /*                                                                 */
*         SDIOPARM = SDIOPARM && SDIOPARM; /* CLEAR PARM AREA        */
READUSD  XC    SDIOPARM(20,IOPBASE),SDIOPARM(IOPBASE)              0178
*         P1READ = '1'B;            /* SET PARM FLAG FOR READ        */
         OI    P1READ(IOPBASE),B'01000000'                         0179
*         PARMRBA = ADDR(RNUSD);    /* SET RBA OF RECORD TO BE READ  */
         LA    @10,RNUSD                                           0180
         ST    @10,@TF00001                                        0180
         MVC   PARMRBA(4,IOPBASE),@TF00001                         0180
*         PARMIOAD = ADDR(DIRAREA); /* SET AREA ADDR FOR RECORD      */
         LA    @10,DIRAREA                                         0181
         ST    @10,@TF00001                                        0181
         MVC   PARMIOAD(4,IOPBASE),@TF00001                        0181
*         R1 = IOPBASE;             /* REG 1 = ADDR PARM LIST        */
         LR    R1,IOPBASE                                          0182
*         CALL  IEEVSDIO;           /* CALL IO RTN                   */
         L     @15,@CV00381                                        0183
         BALR  @14,@15                                             0183
*         RETC = R15;               /* SAVE RETURN CODE FROM REG 15  */
         ST    R15,RETC                                            0184
*         IF RETC > 0               /* TEST IF RET CODE IS ZERO      */
*           THEN                    /* UNSUCCESSFUL READ             */
         L     @10,RETC                                            0185
         LTR   @10,@10                                             0185
         BP    @RT00185                                            0185
*             GOTO BADIO;           /* GO TO ANALYZE ERROR           */
*         USDPTR = ADDR(DIRAREA);   /* SET DIR RCD BASE              */
         LA    @10,DIRAREA                                         0187
         ST    @10,@TF00001                                        0187
         MVC   USDPTR(3),@TF00001+1                                0187
*         DO I = 1 TO DIM(USDENTRY); /* SCAN EVERY ENTRY             */
         LA    I,1                                                 0188
@DL00188 DS    0H                                                  0189
*         IF UIDUSER(J,1:7)=USDID(I)/* DOES USERID IN DIRECTORY EQUAL
*                                      USERID IN PARM LIST           */
*           THEN                    /* YES, USERIDS ARE EQUAL        */
         SR    @10,@10                                             0189
         IC    @10,J                                               0189
         SLA   @10,3                                               0189
         LR    @02,I                                               0189
         MH    @02,@CH00078                                        0189
         L     @01,USDPTR-1                                        0189
         LA    @01,0(,@01)                                         0189
         L     @15,UIDLPTR                                         0189
         ALR   @15,@10                                             0189
         ALR   @01,@02                                             0189
         AL    @01,@CF00457                                        0189
         CLC   UIDUSER-8(7,@15),USDID(@01)                         0189
         BE    @RT00189                                            0189
*             GOTO IDFND;           /* PROCESS THIS USERID           */
*         END;                      /* END OF THIS RECORD SCAN       */
         AH    I,@CH00034                                          0191
         CH    I,@CH00230                                          0191
         BNH   @DL00188                                            0191
*         IF USDNEXT = 0            /* IS PTR TO NEXT DIRECTORY    0192
*                                      RECORD = 0                    */
*           THEN                    /* YES, END OF USER DIRECTORY    */
         L     @10,USDPTR-1                                        0192
         LA    @10,0(,@10)                                         0192
         MVC   @ZT00001+1(3),USDNEXT(@10)                          0192
         L     @02,@ZT00001                                        0192
         LTR   @02,@02                                             0192
         BZ    @RT00192                                            0192
*             GOTO DIREND;          /* TAKE ACTION ACCORDING TO PARM */
*         RNPREV = RNUSD;           /* SAVE RBA OF THIS RECORD FOR 0194
*                                      LATER DEQ                     */
         MVC   RNPREV(3),RNUSD                                     0194
*         RNUSD = USDNEXT;          /* RNAME FOR NEXT ENQ            */
         MVC   RNUSD(3),USDNEXT(@10)                               0195
*                                   /* ENQ ON USER DIRECTORY RECORD  */
*         GEN (ENQ  (QNAME,RNUSD,E,3,SYSTEM),RET=HAVE,MF=(E,ENQEL) );
         ENQ  (QNAME,RNUSD,E,3,SYSTEM),RET=HAVE,MF=(E,ENQEL)
*                                   /* DEQ ON PREVIOUS DIRECTORY REC */
*         GEN (DEQ  (QNAME,RNPREV,3,SYSTEM),RET=HAVE,MF=(E,DEQL) );
         DEQ  (QNAME,RNPREV,3,SYSTEM),RET=HAVE,MF=(E,DEQL)
*         GOTO READUSD;             /* READ NEXT USER DIRECTORY REC  */
         B     READUSD                                             0198
* /*                                                                 */
* /*      USERID SPECIFIED IN PARM LIST FOUND IN DATA SET DIRECTORY  */
* /*                                                                 */
*IDFND:                   /* USERID FOUND IN DIRECTORY               */
*         IF FCHNG = '1'B           /* TEST 'CHANGE' FLAG            */
*           THEN                    /* 'CHANGE' SPEC'D IN PARM LIST  */
IDFND    TM    FCHNG,B'00100000'                                   0199
         BO    @RT00199                                            0199
*             GOTO CHNG1;           /* PROCESS THIS USERID FOR CHANGE*/
*           ELSE                    /* 'CHANGE' NOT REQUESTED        */
*             GOTO DELADD;          /* DO COMMON PROCESSING FOR    0201
*                                      'DELETE' AND 'ADD'            */
         B     DELADD                                              0201
*SUBLEND:                 /* END OF SUBLIST OF PARM LIST FROM ACCT   */
*         IF UIDLNEX = 0            /* IS CHAIN PTR = 0              */
*           THEN                    /* YES, END OF PARM LIST         */
SUBLEND  L     @10,UIDLPTR                                         0202
         L     @10,UIDLNEX(,@10)                                   0202
         LTR   @10,@10                                             0202
         BZ    @RT00202                                            0202
*             GOTO EXITCODE;        /* GOTO CLEANUP & RETURN TO ACCT */
*           ELSE;                   /* MORE USERID SUBLISTS REMAIN   */
*         UIDLPTR = UIDLNEX;        /* SET BASE FOR NEXT SUBLIST     */
         ST    @10,UIDLPTR                                         0205
*         GOTO SUBLIST;             /* PROCESS NEXT SUBLIST          */
         B     SUBLIST                                             0206
* GEN(EJECT);                                                      0207
         EJECT
* /*                                                                 */
*DIREND:                  /* END OF DIRECTORY REACHED WITHOUT FINDING
*                            USERID SPECIFIED IN PARM LIST FROM ACCT */
*         IF FDEL = '1'B            /* TEST DELETE FLAG              */
*           THEN                    /* 'DELETE' SPEC'D IN PARM LIST  */
DIREND   TM    FDEL,B'01000000'                                    0208
         BO    @RT00208                                            0208
*             GOTO DEQUSD;          /* DEQ ON DIRECTORY AND PROCESS
*                                      NEXT USERID. THIS USERID IS 0209
*                                      EFFECTIVELY DELETED SINCE IT
*                                      WAS NOT FOUND IN DIRECTORY    */
*         IF FCHNG = '1'B           /* TEST 'CHANGE' FLAG            */
*           THEN                    /* 'CHANGE' REQUESTED IN PARM    */
         TM    FCHNG,B'00100000'                                   0210
         BO    @RT00210                                            0210
*             GOTO CHNGEND;         /* PROCESS 'CHANGE'              */
*                         /* FALL THRU TO 'ADD' PROCESSING           */
* /*               -     A          D         D      -               */
* /*                                                                 */
* /*      'ADD' USERID TO DATA SET DIRECTORY                         */
* /*                                                                 */
*ADDUSR:  NEXTUSD = R1USPTR;        /* SET ADDR OF NEXT DIRECTORY REC
*                                      TO BE SCANNED IF NO FREE ENTRY
*                                      IS FOUND IN THIS RECORD.      */
ADDUSR   L     @10,R1PTR-1                                         0212
         LA    @10,0(,@10)                                         0212
         MVC   NEXTUSD(3),R1USPTR(@10)                             0212
*ADDUSR2:                 /* SCAN USER DIRECTORY RECORD              */
*         DO I = 1 TO DIM(USDENTRY); /* SCAN ALL ENTRIES             */
ADDUSR2  LA    I,1                                                 0213
@DL00213 DS    0H                                                  0214
*         IF USDENTRY(I) = ZERENT   /* IS THIS ENTRY = 0             */
*           THEN                    /* YES, THIS ENTRY IS AVAILABLE  */
         LR    @10,I                                               0214
         MH    @10,@CH00078                                        0214
         L     @02,USDPTR-1                                        0214
         LA    @02,0(,@02)                                         0214
         ALR   @02,@10                                             0214
         AL    @02,@CF00457                                        0214
         CLC   USDENTRY(13,@02),ZERENT                             0214
         BE    @RT00214                                            0214
*             GOTO ADDUSR3;         /* ADD NEW USERID HERE           */
*         END;                      /* END OF THIS RECORD SCAN, NO 0216
*                                      AVAILABLE ENTRY WAS FOUND     */
         AH    I,@CH00034                                          0216
         CH    I,@CH00230                                          0216
         BNH   @DL00213                                            0216
*         IF NEXTUSD = 0            /* IS PTR TO NEXT DIRECT. REC =0 */
*           THEN                    /* YES, END OF DIRECTORY         */
         L     @10,NEXTUSD-1                                       0217
         LA    @10,0(,@10)                                         0217
         LTR   @10,@10                                             0217
         BZ    @RT00217                                            0217
*             GOTO ADDUSD;          /* ADD A NEW USER DIRECTORY RECORD
*                                      TO DATA SET                   */
*                                   /* DEQ ON THIS DIRECTORY RECORD  */
*         GEN (DEQ  (QNAME,RNUSD,3,SYSTEM),RET=HAVE,MF=(E,DEQL) ); 0219
         DEQ  (QNAME,RNUSD,3,SYSTEM),RET=HAVE,MF=(E,DEQL)
*         RNUSD = NEXTUSD;          /* SET RNAME FOR NEXT DIRECT.REC */
         MVC   RNUSD(3),NEXTUSD                                    0220
*         GEN (ENQ  (QNAME,RNUSD,E,3,SYSTEM),RET=HAVE,MF=(E,ENQEL) );
         ENQ  (QNAME,RNUSD,E,3,SYSTEM),RET=HAVE,MF=(E,ENQEL)
*         FENQUSD = '1'B;           /* SET FLAG FOR ENQ ON DIRECTORY */
         OI    FENQUSD,B'00010000'                                 0222
*         SDIOPARM = SDIOPARM && SDIOPARM;  /* CLEAR IO PARM LIST */
         XC    SDIOPARM(20,IOPBASE),SDIOPARM(IOPBASE)              0223
*         P1READ = '1'B;           /* SET PARM FLAG FOR READ         */
         OI    P1READ(IOPBASE),B'01000000'                         0224
*         PARMRBA= ADDR(RNUSD);    /* SET RBA OF RECORD TO READ      */
         LA    @10,RNUSD                                           0225
         ST    @10,@TF00001                                        0225
         MVC   PARMRBA(4,IOPBASE),@TF00001                         0225
*         PARMIOAD = ADDR(DIRAREA);  /* SET AREA ADDR FOR READ       */
         LA    @10,DIRAREA                                         0226
         ST    @10,@TF00001                                        0226
         MVC   PARMIOAD(4,IOPBASE),@TF00001                        0226
*         R1 = IOPBASE;            /* R1 = ADDR IO PARM LIST         */
         LR    R1,IOPBASE                                          0227
*         CALL IEEVSDIO;           /* READ A USER MAIL DIRECTORY REC */
         L     @15,@CV00381                                        0228
         BALR  @14,@15                                             0228
*         RETC = R15;              /* SAVE RETURN CODE FROM IO       */
         ST    R15,RETC                                            0229
*         IF RETC > 0              /* TEST FOR SUCCESSFUL READ       */
*            THEN                  /* READ WAS NOT SUCCESSFUL        */
         L     @10,RETC                                            0230
         LTR   @10,@10                                             0230
         BP    @RT00230                                            0230
*               GOTO BADIO;        /* ANALYZE ERROR AND GIVE WARNING */
*         USDPTR = ADDR(DIRAREA);   /* SET BASE FOR DIR RCD          */
         LA    @10,DIRAREA                                         0232
         ST    @10,@TF00001                                        0232
         MVC   USDPTR(3),@TF00001+1                                0232
*         NEXTUSD = USDNEXT;        /* SET ADDR NEXT DIR RCD       0233
*                                      TO BE SCANNED AFTER THIS ONE  */
         MVC   NEXTUSD(3),USDNEXT(@10)                             0233
*         GOTO ADDUSR2;             /* SCAN THIS RECORD FOR FREE   0234
*                                      SPACE TO ADD USERID           */
         B     ADDUSR2                                             0234
* GEN(EJECT);                                                      0235
         EJECT
* /*                                                                 */
* /*      SET UP NEW DIRECTORY RECORD FOR ADDED USERID               */
* /*                                                                 */
*ADDUSD:                  /* ADD USERID TO NEW DIRECTORY RECORD      */
*         DIRAREA2 = DIRAREA2 && DIRAREA2 ; /* SET AREA TO ZERO      */
ADDUSD   XC    DIRAREA2(129),DIRAREA2                              0236
*         USDPTR = ADDR(DIRAREA2);  /* SET BASE FOR DIR RC         0237
*                                      TO BE FORMATTED               */
         LA    @10,DIRAREA2                                        0237
         ST    @10,@TF00001                                        0237
         MVC   USDPTR(3),@TF00001+1                                0237
*         USDID(1) = UIDUSER(J);    /* PUT ADDED USERID INTO FIRST 0238
*                                      ENTRY OF NEW DIRECTORY RECORD */
         SR    @02,@02                                             0238
         IC    @02,J                                               0238
         SLA   @02,3                                               0238
         L     @01,UIDLPTR                                         0238
         ALR   @01,@02                                             0238
         MVC   USDID(7,@10),UIDUSER-8(@01)                         0238
*         USDREND = '7F'X;         /* SET END OF RECORD INDICATOR    */
         MVI   USDREND(@10),X'7F'                                  0239
*         IF FOLDMSG = '1'B                                        0240
*           THEN                                                   0240
         TM    FOLDMSG,B'00010000'                                 0240
         BNO   @RF00240                                            0240
*             DO;                                                  0241
*             FOLDMSG = '0'B;                                      0242
         NI    FOLDMSG,B'11101111'                                 0242
*             USDRBA(1) = OLDCHN;   /* SET PTR TO MSG CHAIN          */
         MVC   USDRBA(3,@10),OLDCHN                                0243
*             USDEND(1) = OLDEND;   /* SET PTR TO MSG CHAIN END      */
         MVC   USDEND(3,@10),OLDEND                                0244
*             END;                                                 0245
* /*                                                                 */
* /*      WRITE NEW DIRECTORY RECORD                                 */
* /*                                                                 */
*         SDIOPARM = SDIOPARM && SDIOPARM; /* CLEAR PARM AREA        */
@RF00240 XC    SDIOPARM(20,IOPBASE),SDIOPARM(IOPBASE)              0246
*         P2WRDAF = '1'B;           /* SET FLAG FOR WRITE 'DAF'      */
         OI    P2WRDAF(IOPBASE),B'01000000'                        0247
*         PARMRBA = ADDR(R1USPTR);  /* SET RBA TO BEGIN SEARCH       */
         L     @10,R1PTR-1                                         0248
         LA    @10,0(,@10)                                         0248
         LA    @10,R1USPTR(,@10)                                   0248
         ST    @10,@TF00001                                        0248
         MVC   PARMRBA(4,IOPBASE),@TF00001                         0248
*         PARMIOAD = ADDR(DIRAREA2);/* SET AREA ADDR FOR RECORD      */
         LA    @10,DIRAREA2                                        0249
         ST    @10,@TF00001                                        0249
         MVC   PARMIOAD(4,IOPBASE),@TF00001                        0249
*         PARMKEY = USDKEY;         /* SET KEY FOR USER DIRECTORY    */
         MVC   PARMKEY(1,IOPBASE),USDKEY                           0250
*         R1 = IOPBASE;             /* REG 1 = ADDR PARM LIST        */
         LR    R1,IOPBASE                                          0251
*         CALL  IEEVSDIO;           /* CALL IO RTN                   */
         L     @15,@CV00381                                        0252
         BALR  @14,@15                                             0252
*         RETC = R15;               /* SAVE RETURN CODE FROM REG 15  */
         ST    R15,RETC                                            0253
*         IF RETC > 0               /* TEST IF RET CODE IS ZERO      */
*           THEN                    /* UNSUCCESSFUL READ             */
         L     @10,RETC                                            0254
         LTR   @10,@10                                             0254
         BP    @RT00254                                            0254
*             GOTO BADIOA;          /* GO TO ANALYZE ERROR           */
* /*                                                                 */
* /*      CHAIN NEW USER DIRECTORY RECORD                            */
* /*                                                                 */
*         USDPTR = ADDR(DIRAREA);   /* SET BASE FOR DIR RCD          */
         LA    @10,DIRAREA                                         0256
         ST    @10,@TF00001                                        0256
         MVC   USDPTR(3),@TF00001+1                                0256
*         USDNEXT = PARMRBA;        /* SET CHAIN PTR LAST DIR      0257
*                                      RECORD TO POINT TO NEW RECORD
*                                      JUST WRITTEN                  */
         MVC   USDNEXT(3,@10),PARMRBA+1(IOPBASE)                   0257
*                                   /* PARMRBA = FEEBACK FROM 'WRITE'*/
*         GOTO WRITUSD;             /* WRITE UPDATED DIRECTORY REC   */
         B     WRITUSD                                             0258
* GEN(EJECT);                                                      0259
         EJECT
*ADDUSR3:                /* ADD NEW USERID TO AVAILABLE ENTRY FOUND */
*         IF FOLDMSG = '1'B         /* FLAG FOR OLD MESSAGE CHAIN FOR
*                                      'FORMER'USERID IF 'CHANGE'    */
*           THEN                    /* THERE IS A MSG CHAIN TO ADD   */
ADDUSR3  TM    FOLDMSG,B'00010000'                                 0260
         BNO   @RF00260                                            0260
*             DO;                                                  0261
*             FOLDMSG = '0'B;       /* TURN FLAG OFF                 */
         NI    FOLDMSG,B'11101111'                                 0262
*             USDRBA(I) = OLDCHN;   /* PUT PTR TO MSG CHAIN FOR 'FORMER
*                                      USERID INTO DIRECTORY ENTRY FOR
*                                      NEW USERID JUST ADDED         */
         L     @10,USDPTR-1                                        0263
         LA    @10,0(,@10)                                         0263
         LR    @02,I                                               0263
         MH    @02,@CH00078                                        0263
         ST    @02,@TF00001                                        0263
         ALR   @02,@10                                             0263
         AL    @02,@CF00459                                        0263
         MVC   USDRBA-7(3,@02),OLDCHN                              0263
*             USDEND(I) = OLDEND;   /* SET PTR TO MSG CHAIN END      */
         AL    @10,@TF00001                                        0264
         AL    @10,@CF00460                                        0264
         MVC   USDEND-10(3,@10),OLDEND                             0264
*             END;                                                 0265
*         USDID(I) = UIDUSER(J);    /* PUT USERID TO BE ADDED INTO 0266
*                                      DIRECTORY ENTRY               */
@RF00260 LR    @10,I                                               0266
         MH    @10,@CH00078                                        0266
         L     @02,USDPTR-1                                        0266
         LA    @02,0(,@02)                                         0266
         ALR   @02,@10                                             0266
         AL    @02,@CF00457                                        0266
         SR    @10,@10                                             0266
         IC    @10,J                                               0266
         SLA   @10,3                                               0266
         L     @01,UIDLPTR                                         0266
         ALR   @01,@10                                             0266
         MVC   USDID(7,@02),UIDUSER-8(@01)                         0266
*         GOTO WRITUSD;             /* WRITE UPDATED DIRECTORY REC   */
         B     WRITUSD                                             0267
* /*                                                                 */
* /*      'CHANGE' - USERID NOT FOUND IN DIRECTORY                   */
* /*                                                                 */
*CHNGEND:                 /* 'CHANGE' - END OF DIRECTORY REACHED     */
*         S = J // 2;               /* DIVIDE J BY 2. REMAINDER IN S */
CHNGEND  SR    @00,@00                                             0268
         IC    @00,J                                               0268
         SRDA  @00,32                                              0268
         D     @00,@CF00073                                        0268
         STC   @00,S                                               0268
*         IF  S = 0                 /* IF REMAINDER IS 0, J IS EVEN,
*                                      AND USERID IS 'NEW' USERID  0269
*                                      OF THE PAIR SPEC'D FOR CHANGE */
*           THEN                    /* USERID IS 'NEW' FOR 'CHANGE'  */
         CLI   S,0                                                 0269
         BE    @RT00269                                            0269
*             GOTO ADDUSR;          /* ADD THIS USERID TO DIRECTORY  */
*           ELSE;                   /* USERID IS 'FORMER' FOR CHANGE */
*         FOLDMSG = '0'B;           /* SET FLAG OFF - NO MSG CHAIN 0272
*                                      FOR THIS FORMER(OLD) USERID   */
         NI    FOLDMSG,B'11101111'                                 0272
*         GOTO DEQUSD;              /* DEQ ON DIRECTORY RECORD AND 0273
*                                      PROCESS NEXT USERID           */
         B     DEQUSD                                              0273
* GEN(EJECT);                                                      0274
         EJECT
* /*                                                                 */
* /*            -    C    H    A    N    G    E    -                 */
* /*                                                                 */
*CHNG1:                   /* 'CHANGE' SPECIFIED IN PARM LIST         */
*         S = J // 2;               /* DIVIDE J BY 2. REMAINDER IN S */
CHNG1    SR    @00,@00                                             0275
         IC    @00,J                                               0275
         SRDA  @00,32                                              0275
         D     @00,@CF00073                                        0275
         STC   @00,S                                               0275
*         IF S = 0                  /* IF REMAINDER IS 0, J IS EVEN
*                                      AND USERID IS 'NEW' USERID  0276
*                                      OF THE PAIR SPEC'D FOR CHANGE */
*           THEN                    /* USERID IS 'NEW' FOR 'CHANGE'  */
         CLI   S,0                                                 0276
         BE    @RT00276                                            0276
*             GOTO CNEW;            /* PROCESS FOR 'NEW'             */
*           ELSE;                   /* J IS ODD, USERID IS 'FORMER'  */
*         IF USDRBA(I) = 0          /* IS PTR TO MSG CHAIN = 0       */
*           THEN                    /* NO MSGS FOR THIS USERID       */
         LR    @10,I                                               0279
         MH    @10,@CH00078                                        0279
         L     @02,USDPTR-1                                        0279
         LA    @02,0(,@02)                                         0279
         ALR   @02,@10                                             0279
         AL    @02,@CF00459                                        0279
         MVC   @ZT00001+1(3),USDRBA-7(@02)                         0279
         L     @10,@ZT00001                                        0279
         LTR   @10,@10                                             0279
         BNZ   @RF00279                                            0279
*             FOLDMSG = '0'B;       /* TURN OFF FLAG FOR MSG CHAIN   */
         NI    FOLDMSG,B'11101111'                                 0280
*           ELSE                    /* MSG CHAIN FOR THIS USERID     */
*             DO;                                                  0281
         B     @RC00279                                            0281
@RF00279 DS    0H                                                  0282
*             FOLDMSG = '1'B;       /* SET FLAG FOR MSG CHAIN FOR  0282
*                                      OLD ('FORMER') USERID         */
         OI    FOLDMSG,B'00010000'                                 0282
*             OLDCHN = USDRBA(I);   /* SAVE PTR TO MSG CHAIN TO ADD
*                                      TO END OF CHAIN OF MSGS FOR 0283
*                                      'NEW' USERID OF'CHANGE PAIR'  */
         L     @10,USDPTR-1                                        0283
         LA    @10,0(,@10)                                         0283
         LR    @02,I                                               0283
         MH    @02,@CH00078                                        0283
         ST    @02,@TF00001                                        0283
         ALR   @02,@10                                             0283
         AL    @02,@CF00459                                        0283
         MVC   OLDCHN(3),USDRBA-7(@02)                             0283
*             OLDEND = USDEND(I);   /* SAVE CURRENT END PTR          */
         AL    @10,@TF00001                                        0284
         AL    @10,@CF00460                                        0284
         MVC   OLDEND(3),USDEND-10(@10)                            0284
*             END;                                                 0285
*         GOTO DELENT;              /* DELETE THIS USERID DIRECTORY
*                                      ENTRY                         */
         B     DELENT                                              0286
* GEN(EJECT);                                                      0287
         EJECT
* /*                                                                 */
* /*      CHANGE -  USERID IS 'NEW'                                  */
* /*                                                                 */
*CNEW:                    /* USERID IS NEW OF PAIR FOR 'CHANGE'      */
*         IF FOLDMSG = '0'B         /* IS THERE MSG CHAIN FOR      0288
*                                      'FORMER' USERID OF CHANGE PAIR*/
*           THEN                    /* FLAG OFF, NO MSG CHAIN        */
CNEW     TM    FOLDMSG,B'00010000'                                 0288
         BZ    @RT00288                                            0288
*             GOTO DEQUSD;          /* DEQ ON DIRECTORY RECORD,    0289
*                                      PROCESSING DONE FOR THIS USRID*/
*           ELSE;                   /* FLAG ON, MSG CHAIN EXISTS     */
*         FOLDMSG = '0'B;           /* TURN FLAG OFF                 */
         NI    FOLDMSG,B'11101111'                                 0291
*         RNUSM = USDEND(I);        /* SET ADDR LAST MSG RECORD      */
         L     @10,USDPTR-1                                        0292
         LA    @10,0(,@10)                                         0292
         LR    @02,I                                               0292
         MH    @02,@CH00078                                        0292
         ST    @02,@TF00001                                        0292
         ALR   @02,@10                                             0292
         AL    @02,@CF00460                                        0292
         MVC   RNUSM(3),USDEND-10(@02)                             0292
*         USDEND(I) = OLDEND;       /* SET PTR TO NEW CHAIN END      */
         LR    @02,@10                                             0293
         AL    @02,@TF00001                                        0293
         AL    @02,@CF00460                                        0293
         MVC   USDEND-10(3,@02),OLDEND                             0293
*         IF USDRBA(I) = 0          /* IS MSG CHAIN PTR = 0          */
*           THEN                    /* NO MSGS FOR 'NEW' USERID      */
         LR    @02,@10                                             0294
         AL    @02,@TF00001                                        0294
         AL    @02,@CF00459                                        0294
         MVC   @ZT00001+1(3),USDRBA-7(@02)                         0294
         L     @02,@ZT00001                                        0294
         LTR   @02,@02                                             0294
         BNZ   @RF00294                                            0294
*             DO;                                                  0295
*             USDRBA(I) = OLDCHN;   /* PUT PTR TO MSG CHAIN FOR 'FORME
*                                    R'INTO DIRECTORY ENTRY FOR 'NEW'*/
         AL    @10,@TF00001                                        0296
         AL    @10,@CF00459                                        0296
         MVC   USDRBA-7(3,@10),OLDCHN                              0296
*             GOTO WRITUSD;         /* WRITE UPDATED DIRECTORY RECORD*/
         B     WRITUSD                                             0297
*             END;                                                 0298
* /*                                                                 */
* /*      CALL I/O RTN TO READ LAST USER MAIL MSG RECORD             */
* /*                                                                 */
*         SDIOPARM = SDIOPARM && SDIOPARM;  /* CLEAR PARM AREA       */
@RF00294 XC    SDIOPARM(20,IOPBASE),SDIOPARM(IOPBASE)              0299
*         P1READ = '1'B;            /* SET FLAG FOR READ             */
         OI    P1READ(IOPBASE),B'01000000'                         0300
*         PARMRBA = ADDR(RNUSM);    /* SET RBA ADDR OF REC TO BE READ*/
         LA    @10,RNUSM                                           0301
         ST    @10,@TF00001                                        0301
         MVC   PARMRBA(4,IOPBASE),@TF00001                         0301
*         PARMIOAD = ADDR(MSGAREA); /* SET AREA ADDR                 */
         LA    @10,MSGAREA                                         0302
         ST    @10,@TF00001                                        0302
         MVC   PARMIOAD(4,IOPBASE),@TF00001                        0302
*         R1 = IOPBASE;             /* REG 1 = ADDR PARM LIST        */
         LR    R1,IOPBASE                                          0303
*         CALL  IEEVSDIO;           /* CALL IO RTN TO READ USER MSG  */
         L     @15,@CV00381                                        0304
         BALR  @14,@15                                             0304
*         RETC = R15;               /* SAVE RETURN CODE REG 15       */
         ST    R15,RETC                                            0305
*         IF RETC > 0               /* IF RETURN CODE IS NOT ZERO    */
*           THEN                    /* IO OPERATION WAS NOT SUCCESS  */
         L     @10,RETC                                            0306
         LTR   @10,@10                                             0306
         BP    @RT00306                                            0306
*             GOTO BADIO;           /* ANALYZE ERROR AND GIVE WARNING*/
*         USMPTR = ADDR(MSGAREA);   /* SET BASE FOR USER MSG RCD     */
         LA    @10,MSGAREA                                         0308
         ST    @10,@TF00001                                        0308
         MVC   USMPTR(3),@TF00001+1                                0308
*         USMNEXT = OLDCHN;         /* PUT PTR MSG CHAIN FOR       0309
*                                      'FORMER' USERID INTO CHAIN PTR
*                                      FIELD OF LAST MSG RECORD FOR
*                                      'NEW' USERID                  */
         MVC   USMNEXT(3,@10),OLDCHN                               0309
* /*                                                                 */
* /*      CALL IO RTN TO WRITE UPDATED USER MSG RECORD               */
* /*                                                                 */
*         SDIOPARM = SDIOPARM && SDIOPARM; /* CLEAR PARM AREA        */
         XC    SDIOPARM(20,IOPBASE),SDIOPARM(IOPBASE)              0310
*         P2WRDI = '1'B;            /* SET PARM FLAG FOR WRITE 'DI'  */
         OI    P2WRDI(IOPBASE),B'10000000'                         0311
*         PARMKEY = USMKEY;         /* SET KEY FOR USER MSG RECORD   */
         MVC   PARMKEY(1,IOPBASE),USMKEY                           0312
*         PARMRBA = ADDR(RNUSM);    /* SET RBA OF RECORD TO UPDATE   */
         LA    @02,RNUSM                                           0313
         ST    @02,@TF00001                                        0313
         MVC   PARMRBA(4,IOPBASE),@TF00001                         0313
*         PARMIOAD = ADDR(MSGAREA); /* SET AREA ADDRESS              */
         ST    @10,@TF00001                                        0314
         MVC   PARMIOAD(4,IOPBASE),@TF00001                        0314
*         R1 = IOPBASE;             /* REG 1 = ADDR PARM LIST        */
         LR    R1,IOPBASE                                          0315
*         CALL  IEEVSDIO;           /* CALL IO RTN TO WRITE          */
         L     @15,@CV00381                                        0316
         BALR  @14,@15                                             0316
*         RETC = R15;               /* SAVE RETURN CODE REG 15       */
         ST    R15,RETC                                            0317
*         IF RETC > 0               /* TEST RETURN CODE FOR ZERO     */
*            THEN                                                  0318
         L     @10,RETC                                            0318
         LTR   @10,@10                                             0318
         BP    @RT00318                                            0318
*               GO TO BADIO;        /* GO TO ANALYZE ERROR           */
*           ELSE                    /* WRITE WAS SUCCESSFUL          */
*             GOTO WRITUSD;         /* END OF USER PROCESSING        */
         B     WRITUSD                                             0320
* GEN(EJECT);                                                      0321
         EJECT
*DELADD:                  /* 'DELETE' AND 'ADD' COMMON CODE          */
*         IF USDRBA(I) ^= 0         /* IS MSG CHAIN FIELD NON-ZERO   */
*           THEN                    /* YES, MSG CHAIN FOR THIS USERID*/
DELADD   LR    @10,I                                               0322
         MH    @10,@CH00078                                        0322
         L     @02,USDPTR-1                                        0322
         LA    @02,0(,@02)                                         0322
         ALR   @02,@10                                             0322
         AL    @02,@CF00459                                        0322
         MVC   @ZT00001+1(3),USDRBA-7(@02)                         0322
         L     @10,@ZT00001                                        0322
         LTR   @10,@10                                             0322
         BNZ   @RT00322                                            0322
*             GOTO DELMSG;          /* DELETE MSGS FOR THIS USERID   */
*           ELSE;                   /* NO MSGS FOR THIS USERID       */
*CHKREQ:  IF FADD = '1'B            /* TEST IF 'ADD' SPEC'D          */
*           THEN                    /* YES, 'ADD' FUNCTION REQUESTED */
CHKREQ   TM    FADD,B'10000000'                                    0325
         BO    @RT00325                                            0325
*             GOTO ADD1;            /* DELETE MSG CHAIN BUT NOT USRID*/
*           ELSE;                   /* 'DELETE' FUNCTION REQUESTED   */
* GEN(EJECT);                                                      0328
         EJECT
*DELENT:                  /* DELETE USERID FROM DIRECTORY            */
*         USDENTRY(I) = ZERENT;     /* ZERO OUT USERID ENTRY FROM  0329
*                                      DIRECTORY RECORD              */
DELENT   LR    @10,I                                               0329
         MH    @10,@CH00078                                        0329
         L     @02,USDPTR-1                                        0329
         LA    @02,0(,@02)                                         0329
         ALR   @02,@10                                             0329
         AL    @02,@CF00457                                        0329
         MVC   USDENTRY(13,@02),ZERENT                             0329
*         GOTO WRITUSD;             /* WRITE UPDATED DIRECTORY REC   */
         B     WRITUSD                                             0330
* /*                                                                 */
* /*                 -    A         D         D    -                 */
* /*                                                                 */
*ADD1:                    /* REMOVE CHAIN PTR FROM 'ADD'ED USERID. 0331
*                            ANY MESSAGES HAVE ALREADY BEEN DELETED  */
*         IF USDRBA(I) = 0          /* IS MSG CHAIN PTR = 0          */
*           THEN                    /* YES, NO MSG CHAIN TO DELETE,
*                                      NO UPDATE NEEDED TO DIRECTORY */
ADD1     L     @10,USDPTR-1                                        0331
         LA    @10,0(,@10)                                         0331
         LR    @02,I                                               0331
         MH    @02,@CH00078                                        0331
         ST    @02,@TF00001                                        0331
         ALR   @02,@10                                             0331
         AL    @02,@CF00459                                        0331
         MVC   @ZT00001+1(3),USDRBA-7(@02)                         0331
         L     @02,@ZT00001                                        0331
         LTR   @02,@02                                             0331
         BZ    @RT00331                                            0331
*             GOTO DEQUSD;          /* DEQ ON DIRECTORY RECORD       */
*           ELSE;                   /* MSG CHAIN PTR MUST BE DELETED,
*                                      MSG RECORDS ARE ALREADY DELETD*/
*         USDRBA(I) = ZERENT(1:3);  /* ZERO OUT PTR TO MSG CHAIN IN
*                                      DIRECTORY RECORD              */
         LR    @02,@10                                             0334
         AL    @02,@TF00001                                        0334
         AL    @02,@CF00459                                        0334
         MVC   USDRBA-7(3,@02),ZERENT                              0334
*         USDEND(I) = ZERENT(1:3);  /* ZERO PTR TO CHAIN END         */
         AL    @10,@TF00001                                        0335
         AL    @10,@CF00460                                        0335
         MVC   USDEND-10(3,@10),ZERENT                             0335
*         GOTO WRITUSD;             /* WRITE UPDATED DIRECTORY RECORD*/
         B     WRITUSD                                             0336
* /*                                                                 */
* /*      CALL IO RTN TO 'DELETE' MSG RECORD                         */
* /*                                                                 */
*DELMSG:                  /* DELETE MSG RECORDS FOR THIS USERID      */
*         RNUSM = USDRBA(I);        /* SET ADDR USER MSG RECORD      */
DELMSG   LR    @10,I                                               0337
         MH    @10,@CH00078                                        0337
         L     @02,USDPTR-1                                        0337
         LA    @02,0(,@02)                                         0337
         ALR   @02,@10                                             0337
         AL    @02,@CF00459                                        0337
         MVC   RNUSM(3),USDRBA-7(@02)                              0337
* /*                                                                 */
* /*        CLOSE THE DCB FOR FEEDBACK IN RBA FORM.                  */
* /*                                                                 */
*         SDIOPARM = SDIOPARM && SDIOPARM; /* CLEAR PARM LIST AREA   */
         XC    SDIOPARM(20,IOPBASE),SDIOPARM(IOPBASE)              0338
*         P2CLOSE = '1'B;           /* SET PARM FLAG FOR CLOSE       */
         OI    P2CLOSE(IOPBASE),B'00100000'                        0339
*         R1 = IOPBASE;             /* REG1 = ADDR PARM LIST         */
         LR    R1,IOPBASE                                          0340
*         CALL IEEVSDIO;            /* CALL IO RTN TO CLOSE DATA SET */
         L     @15,@CV00381                                        0341
         BALR  @14,@15                                             0341
*         FOPEN = '0'B;             /* INDICATE DCB CLOSED           */
         NI    FOPEN,B'11111101'                                   0342
* /*                                                                 */
* /*      OPEN DCB TO GET FEEDBACK IN ACTUAL DEVICE ADDR FORM        */
* /*                                                                 */
*         SDIOPARM = SDIOPARM && SDIOPARM; /* CLEAR PARM LIST AREA   */
         XC    SDIOPARM(20,IOPBASE),SDIOPARM(IOPBASE)              0343
*         P1OPEN = '1'B;            /* SET PARM FLAG FOR OPEN        */
         OI    P1OPEN(IOPBASE),B'10000000'                         0344
*         P2ACCT = '1'B;            /* SET INDICATOR SO I/O RTN WILL
*                                      USE PROPER DCB TO GET FEEDBACK
*                                      IN 'ACTUAL DEVICE ADDR' FORM  */
         OI    P2ACCT(IOPBASE),B'00001000'                         0345
*         PARMDDNM = BCDDNM;        /* SET DDNAME IN PARM LIST       */
         MVC   PARMDDNM(8,IOPBASE),BCDDNM                          0346
*         R1 = IOPBASE;             /* REG1 = ADDR PARM LIST         */
         LR    R1,IOPBASE                                          0347
*         CALL  IEEVSDIO;           /* CALL IO RTN TO OPEN DATA SET  */
         L     @15,@CV00381                                        0348
         BALR  @14,@15                                             0348
*         RETC = R15;               /* SAVE RETURN CODE FROM IO RTN  */
         ST    R15,RETC                                            0349
*         IF RETC > 0               /* RETURN CODE GREATER THAN ZERO */
*           THEN                    /* OPEN WAS NOT SUCCESSFUL       */
         L     @10,RETC                                            0350
         LTR   @10,@10                                             0350
         BP    @RT00350                                            0350
*             GOTO BADIO;           /* GOTO ANALYZE ERROR AND GIVE 0351
*                                      WARNING MSG                   */
*         FOPEN = '1'B;             /* INDICATE DATA SET OPEN        */
         OI    FOPEN,B'00000010'                                   0352
* /*                                                                 */
* /*      CALL IO RTN TO READ USER MAIL MSG RECORD                   */
* /*                                                                 */
*READMSG:                 /* READ USER MSG RECORD                    */
*         SDIOPARM = SDIOPARM && SDIOPARM; /* CLEAR PARM AREA        */
READMSG  XC    SDIOPARM(20,IOPBASE),SDIOPARM(IOPBASE)              0353
*         P1READ = '1'B;            /* SET FLAG FOR READ             */
         OI    P1READ(IOPBASE),B'01000000'                         0354
*         USMDEVAD(1:3) = RNUSM;    /* SET RBA OF MAIL MSG RECORD    */
         MVC   USMDEVAD(3),RNUSM                                   0355
*         PARMRBA = ADDR(USMDEVAD); /* SET RBA ADDR OF REC TO BE READ*/
         LA    @10,USMDEVAD                                        0356
         ST    @10,@TF00001                                        0356
         MVC   PARMRBA(4,IOPBASE),@TF00001                         0356
*         PARMIOAD = ADDR(MSGAREA); /* SET AREA ADDR                 */
         LA    @10,MSGAREA                                         0357
         ST    @10,@TF00001                                        0357
         MVC   PARMIOAD(4,IOPBASE),@TF00001                        0357
*         R1 = IOPBASE;             /* REG 1 = ADDR PARM LIST        */
         LR    R1,IOPBASE                                          0358
*         CALL  IEEVSDIO;           /* CALL IO RTN TO READ USER MSG  */
         L     @15,@CV00381                                        0359
         BALR  @14,@15                                             0359
*         RETC = R15;               /* SAVE RETURN CODE REG 15       */
         ST    R15,RETC                                            0360
*         IF RETC > 0               /* IF RETURN CODE IS NOT ZERO    */
*           THEN                    /* IO OPERATION WAS NOT SUCCESS  */
         L     @10,RETC                                            0361
         LTR   @10,@10                                             0361
         BP    @RT00361                                            0361
*             GOTO BADIO;           /* ANALYZE ERROR AND GIVE WARNING*/
*         MSGAREA2 = MSGAREA2 && MSGAREA2; /* SET MSG RECORD TO ZERO */
         XC    MSGAREA2(129),MSGAREA2                              0363
*         MSGAREA2(1) = PARMFDBK;   /* PUT FEEDBACK FROM READ INTO 1ST
*                                      BYTE OF DATA FOR DELETION     */
         MVC   MSGAREA2(1),PARMFDBK(IOPBASE)                       0364
*         P1READ = '0'B;            /* TURN OFF READ FLAG            */
         NI    P1READ(IOPBASE),B'10111111'                         0365
*         P2WRDI = '1'B;            /* SET PARM FLAG FOR WRITE 'DI'  */
*         P2DEL = '1'B;             /* SET PARM FLAG FOR DELETION    */
         OI    P2WRDI(IOPBASE),B'10010000'                         0367
*         PARMRBA = ADDR(RNUSM);    /* SET RBA OF RECORD TO DELETE   */
         LA    @10,RNUSM                                           0368
         ST    @10,@TF00001                                        0368
         MVC   PARMRBA(4,IOPBASE),@TF00001                         0368
*         PARMKEY = KEYFF;          /* SET KEY = 'FF' FOR RECORD TO
*                                      BE DELETED                    */
         MVC   PARMKEY(1,IOPBASE),KEYFF                            0369
*         PARMIOAD = ADDR(MSGAREA2);/* WRITE RECORD OF ALL ZEROES    */
         LA    @10,MSGAREA2                                        0370
         ST    @10,@TF00001                                        0370
         MVC   PARMIOAD(4,IOPBASE),@TF00001                        0370
*         R1 = IOPBASE;             /* REG 1 = ADDR PARM LIST        */
         LR    R1,IOPBASE                                          0371
*         CALL  IEEVSDIO;           /* CALL IO RTN                   */
         L     @15,@CV00381                                        0372
         BALR  @14,@15                                             0372
*         RETC = R15;               /* SAVE RETURN CODE FROM REG 15  */
         ST    R15,RETC                                            0373
*         IF RETC > 0               /* TEST IF RET CODE IS ZERO      */
*           THEN                                                   0374
         L     @10,RETC                                            0374
         LTR   @10,@10                                             0374
         BP    @RT00374                                            0374
*             GOTO BADIO;           /* GO TO ANALYZE ERROR           */
*         USMPTR = ADDR(MSGAREA);   /* SET BASE FOR USER MSG RCD     */
         LA    @10,MSGAREA                                         0376
         ST    @10,@TF00001                                        0376
         MVC   USMPTR(3),@TF00001+1                                0376
*         IF USMNEXT = 0            /* IS MSG CHAIN PTR = 0          */
*           THEN                    /* END OF MSG CHAIN              */
         MVC   @ZT00001+1(3),USMNEXT(@10)                          0377
         L     @02,@ZT00001                                        0377
         LTR   @02,@02                                             0377
         BZ    @RT00377                                            0377
*             GOTO CHKREQ;          /* CHECK PARMS REQUESTED         */
*         RNUSM = USMNEXT;          /* SET ADDR NEXT MSG RCD         */
         MVC   RNUSM(3),USMNEXT(@10)                               0379
*         GOTO READMSG;             /* READ NEXT USER MSG RECORD     */
         B     READMSG                                             0380
* GEN(EJECT);                                                      0381
         EJECT
*WRITUSD:                 /* WRITE USER MAIL DIRECTORY RECORD        */
*         SDIOPARM = SDIOPARM && SDIOPARM; /* CLEAR PARM AREA        */
WRITUSD  XC    SDIOPARM(20,IOPBASE),SDIOPARM(IOPBASE)              0382
*         P2WRDI = '1'B;            /* SET PARM FLAG FOR WRITE 'DI'  */
         OI    P2WRDI(IOPBASE),B'10000000'                         0383
*         PARMRBA = ADDR(RNUSD);    /* SET RBA OF RECORD TO WRITE    */
         LA    @10,RNUSD                                           0384
         ST    @10,@TF00001                                        0384
         MVC   PARMRBA(4,IOPBASE),@TF00001                         0384
*         PARMIOAD = ADDR(DIRAREA); /* AREA ADDR OF RECORD TO WRITE  */
         LA    @10,DIRAREA                                         0385
         ST    @10,@TF00001                                        0385
         MVC   PARMIOAD(4,IOPBASE),@TF00001                        0385
*         PARMKEY = USDKEY;         /* SET KEY FOR USER DIRECTORY    */
         MVC   PARMKEY(1,IOPBASE),USDKEY                           0386
*         R1 = IOPBASE;             /* REG 1 = ADDR PARM LIST        */
         LR    R1,IOPBASE                                          0387
*         CALL  IEEVSDIO;           /* CALL IO TO WRITE USER DIR. RC */
         L     @15,@CV00381                                        0388
         BALR  @14,@15                                             0388
*         RETC = R15;               /* SAVE RETURN CODE REG15        */
         ST    R15,RETC                                            0389
*TESTWRIT:                          /* TEST RET CODE AFTER WRITE     */
*         IF RETC > 0               /* IF RETURN CODE IS NOT ZERO    */
*           THEN                    /* IO OPERATION WAS NOT SUCCESS  */
TESTWRIT L     @10,RETC                                            0390
         LTR   @10,@10                                             0390
         BP    @RT00390                                            0390
*             GOTO BADIO;           /* ANALYZE ERROR AND GIVE WARNING*/
*DEQUSD:                   /* DEQUEUE ON USER MAIL DIRECTORY RECORD  */
*             GEN ( DEQ (QNAME,RNUSD,3,SYSTEM),RET=HAVE,MF=(E,DEQL) );
DEQUSD    DEQ (QNAME,RNUSD,3,SYSTEM),RET=HAVE,MF=(E,DEQL)
*             FENQUSD = '0'B;       /* TURN OFF ENQ FLAG             */
         NI    FENQUSD,B'11101111'                                 0393
*         RNUSD = R1USPTR;          /* SET RBA FOR NEXT ENQ AND READ */
         L     @10,R1PTR-1                                         0394
         LA    @10,0(,@10)                                         0394
         MVC   RNUSD(3),R1USPTR(@10)                               0394
*         GOTO SUBL2;               /* PROCESS NEXT USERID IN PARMLIS*/
         B     SUBL2                                               0395
*NOMAIN:        /* NOT ENOUGH MAIN STORAGE TO EXECUTE COMMAND        */
*         PTLTEXT(1:TPNLNG) = MSGCTPN; /* PUT MSG ID INTO BUFFER     */
NOMAIN   SR    @10,@10                                             0396
         IC    @10,TPNLNG                                          0396
         LR    @02,@10                                             0396
         BCTR  @02,0                                               0396
         L     @15,@CA00219                                        0396
         L     @15,MSGCP-MSGTABLE(,@15)                            0396
         EX    @02,@SM00463                                        0396
*                                   /* PUT MSG TEXT IN PUTLINE BUFR  */
*         PTLTEXT(TPNLNG+1:TPNLNG+MSGCLNG) = MSGCTEXT;             0397
         LA    @02,PTLTEXT(@10)                                    0397
         SR    @14,@14                                             0397
         IC    @14,MSGCLNG(,@15)                                   0397
         LR    @09,@14                                             0397
         BCTR  @09,0                                               0397
         EX    @09,@SM00465                                        0397
*         PTLLL = MSGCLNG + TPNLNG +4; /* SET TOTAL LENGTH BUFFER    */
         AR    @14,@10                                             0398
         AH    @14,@CH00118                                        0398
         STH   @14,PTLLL                                           0398
*         PTLOFFST = 0;             /* SET OFFSET = 0, NO MSG INSERT */
         SR    @10,@10                                             0399
         STH   @10,PTLOFFST                                        0399
*         PTLSNEXT = 0;             /* PTR TO 2ND LEVEL MSG = ZERO   */
         ST    @10,PTLSNEXT                                        0400
*         PTLSCNT = 1;              /* NO. OF MSG SEGMENTS = 1       */
         MVC   PTLSCNT(4),@CF00034                                 0401
*         PTLSPTR = ADDR(PTLBUF);   /* SET PTR TO MSG SEGMENT        */
         LA    @10,PTLBUF                                          0402
         ST    @10,PTLSPTR                                         0402
*         GOTO WARNMSG;             /* ISSUE PUTLINE TO ACCOUNT TERM */
*                                                                  0403
         B     WARNMSG                                             0403
*BADIOA:                  /*'WRITE IN NEXT FREE SPACE'NOT SUCCESSFUL */
*         IF RETC = DSFULL          /* CHECK RET CODE FROM IO RTN    */
*           THEN                    /* USER MAIL SECTION WAS FULL    */
BADIOA   L     @10,RETC                                            0404
         MVC   @ZT00003+3(1),DSFULL                                0404
         C     @10,@ZT00003                                        0404
         BNE   @RF00404                                            0404
*             DO;                   /* ISSUE WARNING MSG TO ACCOUNT  */
*               PTLTEXT(1:TPNLNG) = MSG4TPN; /* PUT MSG ID INTO BUFR */
         SR    @10,@10                                             0406
         IC    @10,TPNLNG                                          0406
         LR    @02,@10                                             0406
         BCTR  @02,0                                               0406
         L     @15,@CA00219                                        0406
         L     @15,MSG4P-MSGTABLE(,@15)                            0406
         EX    @02,@SM00467                                        0406
*                                   /* PUT MSG TEXT IN PUTLINE BUFR  */
*               PTLTEXT(TPNLNG+1:TPNLNG+MSG4LNG) = MSG4TEXT;       0407
         LA    @02,PTLTEXT(@10)                                    0407
         SR    @14,@14                                             0407
         IC    @14,MSG4LNG(,@15)                                   0407
         LR    @09,@14                                             0407
         BCTR  @09,0                                               0407
         EX    @09,@SM00469                                        0407
*               PTLTEXT(TPNLNG+MSG4SECT: TPNLNG+MSG4SECT+8) = MSG4USER;
         SR    @02,@02                                             0408
         IC    @02,MSG4SECT(,@15)                                  0408
         AR    @02,@10                                             0408
         LA    @01,PTLTEXT-1(@02)                                  0408
         MVI   8(@01),C' '                                         0408
         MVC   0(8,@01),MSG4USER(@15)                              0408
*               PTLLL = MSG4LNG + TPNLNG +4; /* SET TOTAL LENGTH BUFR*/
         AR    @14,@10                                             0409
         AH    @14,@CH00118                                        0409
         STH   @14,PTLLL                                           0409
*               PTLOFFST = 0;       /* SET OFFSET = 0, NO MSG INSERT */
         SR    @10,@10                                             0410
         STH   @10,PTLOFFST                                        0410
*               PTLSNEXT = 0;       /* PTR TO 2ND LEVEL MSG = ZERO   */
         ST    @10,PTLSNEXT                                        0411
*               PTLSCNT = 1;        /* NO. OF MSG SEGMENTS = 1       */
         MVC   PTLSCNT(4),@CF00034                                 0412
*               PTLSPTR = ADDR(PTLBUF);/* SET PTR TO MSG SEGMENT     */
         LA    @10,PTLBUF                                          0413
         ST    @10,PTLSPTR                                         0413
*               GOTO WARNMSG;       /* ISSUE PUTLINE TO ACCOUNT TERM */
         B     WARNMSG                                             0414
*             END;                                                 0415
*           ELSE;                   /* DATA SET NOT FULL. CHECK FOR
*                                      OTHER ERRORS IN BADIO         */
@RF00404 DS    0H                                                  0417
* /*                                                                 */
*BADIO:                             /* TEST RETURN CODE FROM IO RTN  */
*         IF RETC = NOCORE          /* TEST RET CODE FOR 'NO CORE'   */
*           THEN                    /* YES, IO ROUTINE DID NOT HAVE
*                                      ENOUGH CORE FOR ITS GETMAIN   */
BADIO    L     @10,RETC                                            0417
         MVC   @ZT00003+3(1),NOCORE                                0417
         C     @10,@ZT00003                                        0417
         BE    @RT00417                                            0417
*             GOTO NOMAIN;          /* ISSUE WARNING MSG -  NOT ENOUGH
*                                      MAIN STORAGE TO EXECUTE COMMAND*
*           ELSE                    /* ENOUGH CORE AVAILABLE,      0419
*                                      ERROR IN BROADCAST DATA SET,
*                                      NOT IN SEND PROCESSOR         */
*             GOTO NOTUSABL;        /* ISSUE WARNING MSG -         0419
*                                      BROADCAST DATA SET NOT USABLE */
         B     NOTUSABL                                            0419
*BADDAIR:                 /* CALL TO DAIR NOT SUCCESSFUL             */
*/*                                                                  */
*/*  CALL IKJEFF18 TO ANALYZE THE DAIR FAILURE AND ISSUE WARNING MSG */
*/*                                                                  */
*         F18DAPL = ADDR(DAPL);     /* SET DAPL PTR PARM             */
BADDAIR  MVC   F18DAPL(4),DAPLPTR                                  0420
*         F18DARC = ADDR(DAIRRETC); /* SET RET CODE PTR PARM         */
         LA    @10,DAIRRETC                                        0421
         ST    @10,F18DARC                                         0421
*         F18F02A = ADDR(F18F02);   /* SET IKJEFF02 PTR PARM         */
         LA    @10,F18F02                                          0422
         ST    @10,F18F02A                                         0422
*         F18CLNOA = ADDR(F18CLNO); /* SET CALL NUMBER PARM          */
         LA    @10,F18CLNO                                         0423
         ST    @10,F18CLNOA                                        0423
*         GEN (LINK EP=IKJEFF18);   /* LINK TO DAIR ERROR          0424
*                                      ANALYSIS ROUTINE              */
         LINK EP=IKJEFF18
*             GOTO EXITCODE;        /* CLEANUP AND RETURN TO ACCOUNT */
*                                                                  0425
         B     EXITCODE                                            0425
*NOTUSABL:                /* BROADCAST DATA SET IS NOT USABLE NOW -
*                            ISSUE A WARNING MSG TO SENDER           */
*        PTLTEXT(1:TPNLNG) = MSG5TPN;   /* PUT MSG ID INTO BUFR     */
NOTUSABL SR    @10,@10                                             0426
         IC    @10,TPNLNG                                          0426
         LR    @02,@10                                             0426
         BCTR  @02,0                                               0426
         L     @15,@CA00219                                        0426
         L     @15,MSG5P-MSGTABLE(,@15)                            0426
         EX    @02,@SM00471                                        0426
*                                  /* PUT MSG TEXT IN PUTLINE BUFR  */
*        PTLTEXT(TPNLNG+1 : TPNLNG+MSG5LNG) = MSG5TEXT;            0427
         LA    @02,PTLTEXT(@10)                                    0427
         SR    @14,@14                                             0427
         IC    @14,MSG5LNG(,@15)                                   0427
         LR    @09,@14                                             0427
         BCTR  @09,0                                               0427
         EX    @09,@SM00473                                        0427
*                                  /* INDICATE 2ND LVL MSG WITH '+' */
*        PTLTEXT(TPNLNG+MSG5LNG+1 ) = LVL2IND;                     0428
         LR    @02,@10                                             0428
         AR    @02,@14                                             0428
         LA    @01,PTLTEXT(@02)                                    0428
         MVC   0(1,@01),LVL2IND                                    0428
*        PTLLL = MSG5LNG + TPNLNG + 5;  /* SET TOTAL LENGTH OF BUFR */
         AR    @14,@10                                             0429
         AH    @14,@CH00240                                        0429
         STH   @14,PTLLL                                           0429
*         PTLOFFST = 0;             /* SET OFFSET = 0, NO MSG INSERT */
         SR    @10,@10                                             0430
         STH   @10,PTLOFFST                                        0430
*         PTLSCNT = 1;              /* NO. OF MSG SEGMENTS = 1       */
         MVC   PTLSCNT(4),@CF00034                                 0431
*         PTLSPTR = ADDR(PTLBUF);   /* SET PTR TO MSG SEGMENT        */
*                                                                  0432
         LA    @10,PTLBUF                                          0432
         ST    @10,PTLSPTR                                         0432
* /*   SET UP SECOND LEVEL MESSAGE                                   */
*         IF RETC = OPENERR         /* CHECK RET CODE FOR OPEN ERROR */
*           THEN                    /* YES, OPEN ERROR OCCURRED     */
         L     @10,RETC                                            0433
         MVC   @ZT00003+3(1),OPENERR                               0433
         C     @10,@ZT00003                                        0433
         BNE   @RF00433                                            0433
*                                   /* SET UP 2ND LEVEL MSG -      0434
*                                      'OPEN SVC ERROR'             */
*              PL2SPTR = MSG5L2(2); /* PTR TO 2ND LVL MSG SEG YM1846 */
         L     @10,MSG5LVL2(,@15)                                  0434
         MVC   PL2SPTR(4),MSG5L2+4(@10)                            0434
*         IF RETC = IOERR           /* CHECK FOR I/O ERROR           */
*           THEN                    /* YES, I/O ERROR OCCURRED       */
@RF00433 L     @10,RETC                                            0435
         MVC   @ZT00003+3(1),IOERR                                 0435
         C     @10,@ZT00003                                        0435
         BNE   @RF00435                                            0435
*                                   /* SET UP 2ND LEVEL MSG -      0436
*                                      'I/O ERROR'                   */
*              PL2SPTR = MSG5L2(1); /* PTR TO 2ND LVL MSG SEG YM1846 */
         L     @10,@CA00219                                        0436
         L     @10,MSG5P-MSGTABLE(,@10)                            0436
         L     @10,MSG5LVL2(,@10)                                  0436
         MVC   PL2SPTR(4),MSG5L2(@10)                              0436
*           ELSE                    /* SET UP 2ND LEVEL MSG -      0437
*                                      'INCORRECT FORMAT'            */
*              PL2SPTR = MSG5L2(3); /* PTR TO 2ND LVL MSG SEG YM1846 */
*                                                                  0437
         B     @RC00435                                            0437
@RF00435 L     @10,@CA00219                                        0437
         L     @10,MSG5P-MSGTABLE(,@10)                            0437
         L     @10,MSG5LVL2(,@10)                                  0437
         MVC   PL2SPTR(4),MSG5L2+8(@10)                            0437
*MSG5OUT:               /* FINISH SETUP FOR PUTLINE                  */
*         PTLSNEXT = ADDR(PTLEVEL2); /* SET PTR TO 2ND LEVEL MSG   0438
*                                       SEGMENT BLOCK                */
@RC00435 DS    0H                                                  0438
MSG5OUT  LA    @10,PTLEVEL2                                        0438
         ST    @10,PTLSNEXT                                        0438
*         PL2NEXT = 0;              /* PTR TO 3RD LEVEL MSG = 0      */
         SR    @10,@10                                             0439
         ST    @10,PL2NEXT                                         0439
*         PL2SCNT = 1;              /* NO. OF MSG SEGMENTS = 1       */
         MVC   PL2SCNT(4),@CF00034                                 0440
*                                   /* PUTLINE MSG TO ACCOUNT TERM   */
*                                                                  0441
* /*                                                                 */
* /*            -    P    U    T    L    I    N    E    -            */
* /*                                                                 */
* /*      'PUTLINE' WARNING MSG TO ACCOUNT TERMINAL.                 */
*WARNMSG:                 /* ISSUE WARNING MSG TO ACCOUNT TERMINAL   */
*         IOPLPTR = ADDR(AUTOPARM); /* SET POINTER TO PARM LIST      */
WARNMSG  LA    @10,AUTOPARM                                        0441
         ST    @10,IOPLPTR                                         0441
*         IOPLUPT = CPPLUPT;        /* UPT ADDR                      */
         L     @02,CPPLPTR                                         0442
         MVC   IOPLUPT(4,@10),CPPLUPT(@02)                         0442
*         IOPLECT = CPPLECT;        /* ECT ADDR                      */
         MVC   IOPLECT(4,@10),CPPLECT(@02)                         0443
*         IOPLECB = ADDR(SDECB);    /* ADDR OF SEND ECB              */
         LA    @02,SDECB                                           0444
         ST    @02,IOPLECB(,@10)                                   0444
*         R1 = IOPLPTR;             /* REG 1 = ADDR IOPL FOR PUTLINE */
         LR    R1,@10                                              0445
*                                   /* ISSUE PUTLINE                 */
*    GEN ( PUTLINE  PARM=PUTLL,OUTPUT=(PTLSEGBL,MULTLVL),MF=(E,(1)) );
          PUTLINE  PARM=PUTLL,OUTPUT=(PTLSEGBL,MULTLVL),MF=(E,(1))
*         RETC = R15;               /* PUTLINE RET CODE FROM REG 15  */
         ST    R15,RETC                                            0447
*         IF RETC = 0               /* CHECK RET CODE FOR ZERO       */
*           THEN                    /* YES, SUCCESSFUL PUTLINE RETURN*/
         L     @10,RETC                                            0448
         LTR   @10,@10                                             0448
         BZ    @RT00448                                            0448
*             GOTO EXITCODE;        /* CLEANUP AND END PROCESSING    */
*         IF RETC = PUNOSPAC        /* CHECK RET CODE FOR 'NO SPACE' */
*           THEN                    /* YES,NOT ENOUGH CORE FOR PUTLINE*
         MVC   @ZT00003+3(1),PUNOSPAC                              0450
         C     @10,@ZT00003                                        0450
         BE    @RT00450                                            0450
*             GOTO NOMAIN;          /* ISSUE WARNING MSG             */
*           ELSE;                   /* SOME PUTLINE ERROR OTHER THAN
*                                      INSUFFICIENT MAIN STORAGE     */
*                                                                  0452
*        IF FBADPUTL = '1'B       /* CHECK FOR PREVIOUS PUTLINE ERROR*/
*          THEN                   /* YES, 2ND PUTLINE ERROR          */
         TM    FBADPUTL,B'00000100'                                0453
         BO    @RT00453                                            0453
*            GOTO EXIT1;          /* CLEANUP AND EXIT QUIETLY        */
*        FBADPUTL = '1'B;         /* SET FLAG FOR PUTLINE ERROR      */
         OI    FBADPUTL,B'00000100'                                0455
*        PL2SPTR = MSGBL2(1);     /* SET PTR TO FIRST MSG SEGMENT  0456
*                                     FOR 2ND LEVEL MSG -          0456
*                                     'PUTLINE ERROR CODE'           */
         L     @02,@CA00219                                        0456
         L     @02,MSGBP-MSGTABLE(,@02)                            0456
         L     @02,MSGBLVL2(,@02)                                  0456
         MVC   PL2SPTR(4),MSGBL2(@02)                              0456
*                         /* CONVERT RETURN CODE TO EBCDIC FOR MSG  */
*        R5 = RETC;               /* REG 5 = RETURN CODE FROM COMMON*/
         LR    R5,@10                                              0457
*        GEN;                                                      0458
         CVD   R5,WORK8               CONVERT RETURN CODE TO DECIMAL
         UNPK  WORK4(4),WORK8+5(3)    UNPACK INTO EBCDIC FORM
         OI    WORK4+3,X'F0'          CHANGE SIGN TO HEX'F0'
*        SRERRCD = WORK4(3:4);        /* SET FIELD FOR MSG INSERT  0459
*                                        OF ERROR CODE              */
         MVC   SRERRCD(2),WORK4+2                                  0459
*        SD2LL = 6;                   /* LENGTH OF BFR INCL HDR(4)  */
         MVC   SD2LL(2),@CH00444                                   0460
*        SD2OFFST = 29;               /* SET OFFSET FOR ERROR CODE 0461
*                                        INSERTION IN MSG TEXT     0461
*                                        FOR 2ND LEVEL MSG          */
         MVC   SD2OFFST(2),@CH00445                                0461
*        SD2TEXT = SRERRCD;           /* INSERTION TEXT, ERROR CODE */
*                                                                  0462
         MVC   SD2TEXT(2),SRERRCD                                  0462
*        PTLTEXT(1:TPNLNG) = MSGBTPN; /* PUT MSG ID INTO BUFFER     */
         SR    @10,@10                                             0463
         IC    @10,TPNLNG                                          0463
         LR    @02,@10                                             0463
         BCTR  @02,0                                               0463
         L     @15,@CA00219                                        0463
         L     @15,MSGBP-MSGTABLE(,@15)                            0463
         EX    @02,@SM00476                                        0463
*        PTLTEXT(TPNLNG+1 : MSGBLNG+TPNLNG) = MSGBTEXT;            0464
         LA    @02,PTLTEXT(@10)                                    0464
         SR    @14,@14                                             0464
         IC    @14,MSGBLNG(,@15)                                   0464
         AR    @14,@10                                             0464
         LCR   @10,@10                                             0464
         AR    @10,@14                                             0464
         BCTR  @10,0                                               0464
         EX    @10,@SM00478                                        0464
*        PTLOFFST = 0;                /* NO MSG INSERT ON LEVEL 1   */
         SR    @10,@10                                             0465
         STH   @10,PTLOFFST                                        0465
*        PTLLL = MSGBLNG + TPNLNG + 4; /* LENGTH OF BUFR INCL HDR(4)*/
         AH    @14,@CH00118                                        0466
         STH   @14,PTLLL                                           0466
*        PTLSNEXT = ADDR(PTLEVEL2);   /* PTR TO 2ND LEVEL MSG       */
         LA    @02,PTLEVEL2                                        0467
         ST    @02,PTLSNEXT                                        0467
*        PTLSCNT = 1;                 /* 1 SEGMENT FOR LEVEL 1      */
         MVC   PTLSCNT(4),@CF00034                                 0468
*        PTLSPTR = ADDR(PTLBUF);      /* PTR TO MSG SEGMENT         */
         LA    @02,PTLBUF                                          0469
         ST    @02,PTLSPTR                                         0469
*        PL2NEXT = 0;                 /* PTR TO 3RD LEVEL MSG = 0   */
         ST    @10,PL2NEXT                                         0470
*        PL2SCNT = 2;                 /* 2 SEGMENTS FOR LEVEL 2     */
         MVC   PL2SCNT(4),@CF00073                                 0471
*        PL2SPT2 = ADDR(SEGDESC2);    /* PTR TO MSG SEG 2 FOR LVL 2 */
         LA    @10,SEGDESC2                                        0472
         ST    @10,PL2SPT2                                         0472
*        GOTO WARNMSG;                /* 'PUTLINE' MSG TO ACCOUNT   */
         B     WARNMSG                                             0473
*LCLOSE:                  /* CLOSE BROADCAST DATA SET                */
*         SDIOPARM = SDIOPARM && SDIOPARM; /* CLEAR PARM LIST AREA   */
LCLOSE   XC    SDIOPARM(20,IOPBASE),SDIOPARM(IOPBASE)              0474
*         P2CLOSE = '1'B;           /* SET PARM FLAG FOR CLOSE       */
         OI    P2CLOSE(IOPBASE),B'00100000'                        0475
*         R1 = IOPBASE;             /* REG1 = ADDR PARM LIST         */
         LR    R1,IOPBASE                                          0476
*         CALL IEEVSDIO;            /* CALL IO RTN TO CLOSE DATA SET */
         L     @15,@CV00381                                        0477
         BALR  @14,@15                                             0477
*         FOPEN = '0'B;             /* TURN OPEN FLAG OFF            */
         NI    FOPEN,B'11111101'                                   0478
*         GOTO EXIT1;               /* CONTINUE CLEANUP              */
         B     EXIT1                                               0479
*EXITCODE:                /* CLEANUP, DEQ, RELEASE DATA SET, RETURN  */
*         IF FENQUSD = '1'B         /* TEST ENQ FLAG FOR USER DIRECT.*/
*           THEN                    /* YES, USER DIRECT. IS ENQ'ED ON*/
EXITCODE TM    FENQUSD,B'00010000'                                 0480
         BNO   @RF00480                                            0480
*             DO;                   /* DEQ ON USER MAIL DIRECTORY    */
*              GEN ( DEQ (QNAME,RNUSD,3,SYSTEM),RET=HAVE,MF=(E,DEQL) );
          DEQ (QNAME,RNUSD,3,SYSTEM),RET=HAVE,MF=(E,DEQL)
*              FENQUSD = '0'B;      /* TURN OFF ENQ FLAG             */
         NI    FENQUSD,B'11101111'                                 0483
*             END;                                                 0484
*                                                                  0484
*         IF FENQ1 = '1'B           /* TEST ENQ FLAG FOR RECORD 1    */
*           THEN                    /* RECORD 1 IS ENQ'ED ON         */
@RF00480 TM    FENQ1,B'01000000'                                   0485
         BNO   @RF00485                                            0485
*             DO;                   /* DEQ ON RECORD 1               */
*              GEN ( DEQ (QNAME,RNRC1,3,SYSTEM),RET=HAVE,MF=(E,DEQL) );
          DEQ (QNAME,RNRC1,3,SYSTEM),RET=HAVE,MF=(E,DEQL)
*              FENQ1 = '0'B;         /* TURN OFF ENQ FLAG             *
         NI    FENQ1,B'10111111'                                   0488
*             END;                                                 0489
*         IF FOPEN = '1'B           /* TEST FLAG FOR DATA SET OPEN   */
*           THEN                    /* BROADCAST DATA SET IS OPEN    */
@RF00485 TM    FOPEN,B'00000010'                                   0490
         BO    @RT00490                                            0490
*             GOTO LCLOSE;          /* CLOSE BROADCAST DATA SET      */
*                                                                  0491
*EXIT1:                   /* DATA SET HAS BEEN CLOSED                */
*         RETURN CODE(0);           /* RETURN TO CALLER WITH       0492
*                                      CODE 0                        */
*                                                                  0492
*                                                                  0492
EXIT1    L     @13,4(,@13)                                         0492
         L     @00,@SIZDATD                                        0492
         LR    @01,@12                                             0492
         FREEMAIN R,LV=(0),A=(1)
         SR    @15,@15                                             0492
         L     @14,12(,@13)                                        0492
         LM    @00,@12,20(@13)                                     0492
         BR    @14                                                 0492
*         GEN;                                                     0493
SPARE    DC    50X'00'              PATCH AREA
*         END   IKJEES40                                           0494
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJECT  )                                        *
*/*%INCLUDE SYSLIB  (IKJEFUDL)                                        *
*/*%INCLUDE SYSLIB  (IKJIOPL )                                        *
*/*%INCLUDE SYSLIB  (IKJDAPL )                                        *
*/*%INCLUDE SYSLIB  (IKJDAP08)                                        *
*/*%INCLUDE SYSLIB  (IKJZT301)                                        *
*/*%INCLUDE SYSLIB  (IKJZT304)                                        *
*/*%INCLUDE SYSLIB  (IKJZT305)                                        *
*;                                                                 0494
@EL00001 L     @13,4(,@13)                                         0494
@EF00001 L     @00,@SIZDATD                                        0494
         LR    @01,@12                                             0494
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0494
         BR    @14                                                 0494
@DATA    DS    0H
@CH00118 DC    H'4'
@CH00240 DC    H'5'
@CH00444 DC    H'6'
@CH00230 DC    H'9'
@CH00078 DC    H'13'
@CH00445 DC    H'29'
@SM00463 MVC   PTLTEXT(0),MSGCTPN(@15)
@SM00465 MVC   0(0,@02),MSGCTEXT(@15)
@SM00467 MVC   PTLTEXT(0),MSG4TPN(@15)
@SM00469 MVC   0(0,@02),MSG4TEXT(@15)
@SM00471 MVC   PTLTEXT(0),MSG5TPN(@15)
@SM00473 MVC   0(0,@02),MSG5TEXT(@15)
@SM00476 MVC   PTLTEXT(0),MSGBTPN(@15)
@SM00478 MVC   0(0,@02),MSGBTEXT(@15)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SAV001  EQU   @SA00001
@TF00001 DS    F
@ZTEMPS  DS    0F
@ZT00001 DC    F'0'
@ZT00002 DC    F'0'
@ZT00003 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
@TEMPS   EQU   @ZTEMPS
@L       EQU   @ZLEN
IKJEES40 CSECT
         DS    0F
@CF00457 DC    F'-13'
@CF00459 DC    F'-6'
@CF00460 DC    F'-3'
@CF00034 DC    F'1'
@CH00034 EQU   @CF00034+2
@CF00073 DC    F'2'
@DATD    DSECT
         DS    0D
CPPLPTR  DS    A
UIDLPTR  DS    A
IOPLPTR  DS    A
DAPLPTR  DS    A
DAPB0PTR DS    A
DAIRRETC DS    A
RETC     DS    A
         DS    CL1
OLDCHN   DS    AL3
         DS    CL1
OLDEND   DS    AL3
         DS    CL1
NEXTUSD  DS    AL3
S        DS    AL1
J        DS    AL1
JCNT     DS    AL1
         DS    CL2
R1PTR    DS    AL3
         DS    CL1
USDPTR   DS    AL3
         DS    CL1
USMPTR   DS    AL3
AUTOPARM DS    CL16
AUTODAPL DS    CL20
         DS    CL4
AUTODAIR DS    CL84
BCDDNM   DS    CL8
F18PARMS DS    CL16
         ORG   F18PARMS
F18DAPL  DS    AL4
F18DARC  DS    AL4
F18F02A  DS    AL4
F18CLNOA DS    AL4
         ORG   F18PARMS+16
IOPAREA  DS    CL32
AUTOLIST DS    CL56
         ORG   AUTOLIST
ENQSL    DS    CL12
ENQEL    DS    CL12
DEQL     DS    CL12
PUTLL    DS    CL20
         ORG   AUTOLIST+56
PTLBUF   DS    CL104
         ORG   PTLBUF
PTLLL    DS    FL2
PTLOFFST DS    FL2
PTLTEXT  DS    CL100
         ORG   PTLBUF+104
PTLSEGBL DS    CL12
         ORG   PTLSEGBL
PTLSNEXT DS    AL4
PTLSCNT  DS    FL4
PTLSPTR  DS    AL4
         ORG   PTLSEGBL+12
PTLEVEL2 DS    CL16
         ORG   PTLEVEL2
PL2NEXT  DS    AL4
PL2SCNT  DS    FL4
PL2SPTR  DS    AL4
PL2SPT2  DS    AL4
         ORG   PTLEVEL2+16
SEGDESC2 DS    CL6
         ORG   SEGDESC2
SD2LL    DS    FL2
SD2OFFST DS    FL2
SD2TEXT  DS    CL2
         ORG   SEGDESC2+6
FLAGS    DS    BL2
         ORG   FLAGS
MYFLGS   DS    BL1
         ORG   MYFLGS
FADD     DS    BL1
FDEL     EQU   MYFLGS+0
FCHNG    EQU   MYFLGS+0
FOLDMSG  EQU   MYFLGS+0
@NM00033 EQU   MYFLGS+0
FBADPUTL EQU   MYFLGS+0
FOPEN    EQU   MYFLGS+0
@NM00034 EQU   MYFLGS+0
         ORG   FLAGS+1
@NM00035 DS    BL1
         ORG   @NM00035
@NM00036 DS    BL1
FENQ1    EQU   @NM00035+0
@NM00037 EQU   @NM00035+0
FENQUSD  EQU   @NM00035+0
         ORG   FLAGS+2
RNUSD    DS    CL3
RNPREV   DS    CL3
RNUSM    DS    CL3
USMDEVAD DS    CL8
         DS    CL3
SDECB    DS    CL4
WORK4    DS    CL4
SRERRCD  DS    CL2
DIRAREA2 DS    CL129
         DS    CL1
DIRAREA  DS    CL129
         DS    CL3
MSGAREA  DS    CL129
         DS    CL3
MSGAREA2 DS    CL129
         DS    CL7
WORK8    DS    CL8
IKJEES40 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@SIZ001  EQU   @SIZDATD
@CA00219 DC    A(MSGTABLE)
@CV00381 DC    V(IEEVSDIO)
         DS    0D
F18F02   DC    A(0)
F18CLNO  DC    AL2(1)
TPNLNG   DC    AL1(9)
PUNOSPAC DC    AL1(16)
         DS    CL1
RNAME    DS    AL3
@CC00376 DC    C'SYSLBC'
DAIRCD08 DC    X'0008'
DAIRDSN  DS    CL15
         ORG   DAIRDSN
DSLNGTH  DC    X'000D'
DSNAME   DC    CL13'SYS1.BRODCAST'
         ORG   DAIRDSN+15
SDERR    DC    X'80'
NOCORE   DC    X'40'
BADFMT   DC    X'10'
IOERR    DC    X'08'
OPENERR  DC    X'02'
DSFULL   DC    X'01'
LVL2IND  DC    CL1'+'
QNAME    DC    CL8'SYSIKJBC'
RNRC1    DC    X'000000'
KEYFF    DC    X'FF'
USDKEY   DC    X'01'
USMKEY   DC    X'03'
ZEROES   DC    13AL1(0)
@DATD    DSECT
IKJEES40 CSECT ,                   RESUME CSECT
LISTBEG   ENQ   (QNAME,RNAME,S,3,SYSTEM),RET=HAVE,MF=L
          ENQ   (QNAME,RNAME,E,3,SYSTEM),RET=HAVE,MF=L
          DEQ   (QNAME,RNAME,3,SYSTEM),RET=HAVE,MF=L
          PUTLINE   OUTPUT=(0,MULTLVL),MF=L
LISTEND  EQU   *                   END OF LIST FORMS
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
@DATEND  EQU   *
IKJEES40 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
@0       EQU   00
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
IOPBASE  EQU   @03
R1       EQU   @01
I        EQU   @04
R5       EQU   @05
R15      EQU   @15
R0       EQU   @00
         EXTRN MSGTABLE
ACCTCPPL EQU   0
CPPLUPT  EQU   ACCTCPPL+4
CPPLPSCB EQU   ACCTCPPL+8
CPPLECT  EQU   ACCTCPPL+12
UIDLPTRP EQU   ACCTCPPL+16
ECT      EQU   0
ECTSWS   EQU   ECT+28
ECTBKGRD EQU   ECTSWS
DUIDL    EQU   0
UIDLNEX  EQU   DUIDL
UIDLSWS  EQU   DUIDL+4
UIDADD   EQU   UIDLSWS
UIDDEL   EQU   UIDLSWS
UIDCHG   EQU   UIDLSWS
UIDLCT   EQU   DUIDL+6
UIDUSER  EQU   DUIDL+8
IOPL     EQU   0
IOPLUPT  EQU   IOPL
IOPLECT  EQU   IOPL+4
IOPLECB  EQU   IOPL+8
DAPL     EQU   0
DAPLUPT  EQU   DAPL
DAPLECT  EQU   DAPL+4
DAPLECB  EQU   DAPL+8
DAPLPSCB EQU   DAPL+12
DAPLDAPB EQU   DAPL+16
DAPB08   EQU   0
DA08CD   EQU   DAPB08
DA08FLG  EQU   DAPB08+2
DA08PDSN EQU   DAPB08+8
DA08DDN  EQU   DAPB08+12
DA08UNIT EQU   DAPB08+20
DA08SER  EQU   DAPB08+28
DA08MNM  EQU   DAPB08+52
DA08PSWD EQU   DAPB08+60
DA08DSP1 EQU   DAPB08+68
DA08SHR  EQU   DA08DSP1
DA08DPS2 EQU   DAPB08+69
DA08KEEP EQU   DA08DPS2
DA08DPS3 EQU   DAPB08+70
DA08KEP  EQU   DA08DPS3
DA08CTL  EQU   DAPB08+71
IOPARML  EQU   0
SDIOPARM EQU   IOPARML
@NM00025 EQU   SDIOPARM
P1OPEN   EQU   @NM00025
P1READ   EQU   @NM00025
@NM00026 EQU   SDIOPARM+1
P2WRDI   EQU   @NM00026
P2WRDAF  EQU   @NM00026
P2CLOSE  EQU   @NM00026
P2DEL    EQU   @NM00026
P2ACCT   EQU   @NM00026
PARMKEY  EQU   SDIOPARM+2
PARMFDBK EQU   SDIOPARM+3
PARMRBA  EQU   SDIOPARM+4
PARMIOAD EQU   SDIOPARM+8
PARMDDNM EQU   SDIOPARM+12
PARMRCD1 EQU   IOPARML+28
MSG4     EQU   0
MSG4TPN  EQU   MSG4
MSG4LNG  EQU   MSG4+16
MSG4TEXT EQU   MSG4+17
MSG4SECT EQU   MSG4+52
MSG4USER EQU   MSG4+66
MSG5     EQU   0
MSG5TPN  EQU   MSG5
MSG5LVL2 EQU   MSG5+16
MSG5LNG  EQU   MSG5+20
MSG5TEXT EQU   MSG5+21
MSGB     EQU   0
MSGBTPN  EQU   MSGB
MSGBLVL2 EQU   MSGB+16
MSGBLNG  EQU   MSGB+20
MSGBTEXT EQU   MSGB+21
MSGC     EQU   0
MSGCTPN  EQU   MSGC
MSGCLNG  EQU   MSGC+16
MSGCTEXT EQU   MSGC+17
MSG5L2   EQU   0
MSGBL2   EQU   0
R1BC     EQU   0
R1BCPTRP EQU   R1BC
R1USPTRP EQU   R1BC+4
R1USPTR  EQU   R1USPTRP+1
USDIR    EQU   0
USDENTRY EQU   USDIR
USDID    EQU   USDENTRY
USDRBA   EQU   USDENTRY+7
USDEND   EQU   USDENTRY+10
USDREND  EQU   USDIR+125
USDNEXT  EQU   USDIR+126
USMSG    EQU   0
USMNEXT  EQU   USMSG+126
PARM     EQU   0
ECTPTR   EQU   CPPLECT
MSG4P    EQU   MSGTABLE+12
MSG5P    EQU   MSGTABLE+16
MSGBP    EQU   MSGTABLE+40
MSGCP    EQU   MSGTABLE+44
ZERENT   EQU   ZEROES
MBL2SEGA EQU   MSGBL2
MSG9P    EQU   MSGTABLE+32
M5L2SEGA EQU   MSG5L2
M5L2SEGB EQU   MSG5L2+4
M5L2SEGC EQU   MSG5L2+8
*                                      START UNREFERENCED COMPONENTS
USMTEXT  EQU   USMSG+1
USMLNG   EQU   USMSG
@NM00039 EQU   USDIR+117
@NM00038 EQU   R1BC+45
R1LEVEL  EQU   R1BC+38
R1DSN    EQU   R1BC+14
R1BCMAX  EQU   R1BC+12
R1RECNUM EQU   R1BC+8
R1USFLGS EQU   R1USPTRP
R1BCPTR  EQU   R1BCPTRP+1
R1BCFLGS EQU   R1BCPTRP
@NM00032 EQU   MSGC+9
@NM00031 EQU   MSGB+9
@NM00030 EQU   MSG5+9
@NM00029 EQU   MSG4+58
@NM00028 EQU   MSG4+53
@NM00027 EQU   MSG4+9
PARMDCB  EQU   IOPARML+24
PARMLMCT EQU   IOPARML+20
P1READ1  EQU   @NM00025
P1CREATE EQU   @NM00025
DA08ALN  EQU   DAPB08+76
DA08DSO  EQU   DAPB08+75
@NM00024 EQU   DAPB08+72
@NM00023 EQU   DA08CTL
DA08ATRL EQU   DA08CTL
DA08DMMY EQU   DA08CTL
DA08PERM EQU   DA08CTL
DA08RLSE EQU   DA08CTL
DA08UID  EQU   DA08CTL
DA08ABKL EQU   DA08CTL
DA08TRKS EQU   DA08CTL
DA08UNCT EQU   DA08DPS3
DA08CATL EQU   DA08DPS3
DA08DELE EQU   DA08DPS3
@NM00022 EQU   DA08DPS3
@NM00021 EQU   DA08DPS3
@NM00020 EQU   DA08DPS3
@NM00019 EQU   DA08DPS3
DA08UCAT EQU   DA08DPS2
DA08CAT  EQU   DA08DPS2
DA08DEL  EQU   DA08DPS2
@NM00018 EQU   DA08DPS2
@NM00017 EQU   DA08DPS2
@NM00016 EQU   DA08DPS2
@NM00015 EQU   DA08DPS2
DA08OLD  EQU   DA08DSP1
DA08MOD  EQU   DA08DSP1
DA08NEW  EQU   DA08DSP1
@NM00014 EQU   DA08DSP1
@NM00013 EQU   DA08DSP1
@NM00012 EQU   DA08DSP1
@NM00011 EQU   DA08DSP1
DA08DQTY EQU   DAPB08+48
DA08SQTY EQU   DAPB08+44
DA08PQTY EQU   DAPB08+40
DA08BLK  EQU   DAPB08+36
DA08CTRC EQU   DAPB08+6
DA08DARC EQU   DAPB08+4
@NM00010 EQU   DA08FLG
@NM00009 EQU   DA08FLG
@NM00008 EQU   DA08FLG
@NM00007 EQU   DA08FLG
@NM00006 EQU   DA08FLG
@NM00005 EQU   DA08FLG
@NM00004 EQU   DA08FLG
DA08FPE  EQU   DA08FLG
IOPLIOPB EQU   IOPL+12
@NM00003 EQU   UIDLSWS
ECTBKPB  EQU   ECT+36
ECTUSER  EQU   ECT+32
ECTDDNUM EQU   ECT+29
@NM00002 EQU   ECTSWS
ECTNNOT  EQU   ECTSWS
ECTNMAL  EQU   ECTSWS
ECTLOGF  EQU   ECTSWS
ECTATRM  EQU   ECTSWS
@NM00001 EQU   ECTSWS
ECTNOPD  EQU   ECTSWS
ECTSCMD  EQU   ECT+20
ECTPCMD  EQU   ECT+12
ECTSMSG  EQU   ECT+9
ECTMSGF  EQU   ECT+8
ECTIOWA  EQU   ECT+4
ECTRTCD  EQU   ECT+1
ECTRCDF  EQU   ECT
CPPLECB  EQU   ACCTCPPL+20
CPPLCBUF EQU   ACCTCPPL
*                                      END UNREFERENCED COMPONENTS
@RT00143 EQU   BADDAIR
@RT00157 EQU   BADIO
@RT00162 EQU   SUBLEND
@RF00170 EQU   SUBLEND
@RT00174 EQU   SUBLEND
@RT00185 EQU   BADIO
@RT00189 EQU   IDFND
@RT00192 EQU   DIREND
@RT00199 EQU   CHNG1
@RF00199 EQU   DELADD
@RT00202 EQU   EXITCODE
@RT00208 EQU   DEQUSD
@RT00210 EQU   CHNGEND
@RT00214 EQU   ADDUSR3
@RT00217 EQU   ADDUSD
@RT00230 EQU   BADIO
@RT00254 EQU   BADIOA
@RT00269 EQU   ADDUSR
@RT00276 EQU   CNEW
@RC00279 EQU   DELENT
@RT00288 EQU   DEQUSD
@RT00306 EQU   BADIO
@RT00318 EQU   BADIO
@RF00318 EQU   WRITUSD
@RT00322 EQU   DELMSG
@RT00325 EQU   ADD1
@RT00331 EQU   DEQUSD
@RT00350 EQU   BADIO
@RT00361 EQU   BADIO
@RT00374 EQU   BADIO
@RT00377 EQU   CHKREQ
@RT00390 EQU   BADIO
@RT00417 EQU   NOMAIN
@RF00417 EQU   NOTUSABL
@RT00448 EQU   EXITCODE
@RT00450 EQU   NOMAIN
@RT00453 EQU   EXIT1
@RT00490 EQU   LCLOSE
@EL01    EQU   @EL00001
@ENDDATA EQU   *
         END   IKJEES40
