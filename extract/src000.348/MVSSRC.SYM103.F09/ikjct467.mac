*/*
*/*/*******************************************************************
*/**/
         TITLE     'IKJCT467     OUTPUT MESSAGE HANDLER'
*/*MODULE NAME= IKJCT467                                             */
*/*  CSECT NAME= IKJCT467                                            */
*/*              IKJCT4MC (MESSAGE CSECT)                            */
*/*DESCRIPTIVE NAME= MESSAGE PROCESSOR                               */
*/*COPYRIGHT = NONE                                                  */
*/*STATUS= CHANGE LEVEL 00                                           */
*/*                                                                  */
*/*FUNCTION= TO DETERMINE THE APPROPRIATE MESSAGE WHICH THE CALLER   */
*/*          DESIRES AND WRITE IT TO THE TERMINAL USER.              */
*/*  OPERATION= SET UP TO PRINT MESSAGE REQUESTED.                   */
*/*             IF SERVICE ROUTINE ERROR, DO FURTHER ANALYSIS OF     */
*/*               RETURN CODE TO CHOOSE APPROPRIATE MESSAGE.         */
*/*                                                                  */
*/*NOTES=                                                            */
*/*  DEPENDENCIES= 1. PSCB CAN BE ACCESSED ONLY IF CALLER IN PP      */
*/*                     KEY. THE PSCB IS NEEDED TO OBTAIN THE        */
*/*                     USERID FOR A MSG.                            */
*/*                2. MESSAGES CAN HAVE UP TO 3 INSERTS. IF MORE     */
*/*                     ARE NEEDED, THE FOLLOWING CHANGES ARE        */
*/*                     NECESSARY:                                   */
*/*                       A.  CODE SIMILAR TO THAT OF LABELS         */
*/*                           SEGMENT2, SEGMENT3, AND SEGMENT4       */
*/*                           MUST BE ADDED FOR EACH NEW INSERT.     */
*/*                       B.  ADD A PTR AND SEGMENT TO THE 'OLDMAP'  */
*/*                           DSECT AND INCREASE THE SIZE OF         */
*/*                           SAVOUTL1 AND SAVOUTL2 WHICH IT MAPS.   */
*/*                       C.  ADD NECESSARY INSERTS TO THE 'MSGCHAR' */
*/*                           DSECT AND ADD A HEX BYTE TO EACH ENTRY */
*/*                           IN THE MGCHAR TABLE WHICH IT MAPS.     */
*/*                       D.  ADD AN ENTRY IN THE BRANCH TABLE       */
*/*                           'BRTABVI', DOCUMENT THE OFFSET, AND    */
*/*                           ADD A ROUTINE TO RETRIEVE THE INSERT.  */
*/*                3. THE BASIC MESSAGE SEGMENT MUST NOT EXCEED      */
*/*                     A LENGTH OF 88 BYTES AND THE INSERTS MUST    */
*/*                     NOT EXCEED 48 BYTES. IF IT IS NECESSARY      */
*/*                     TO HAVE A LARGER SEGMENT THE  'OLDMAP'       */
*/*                     DSECT MUST BE INCREASED AND THE SIZE OF      */
*/*                     SAVOUTL1 AND SAVOUTL2 WHICH IT MAPS.         */
*/*                           NOTE:  IF THE INSTALLATION EXIT MSG IS */
*/*                                  USED AS AN INSERT AND EXCEEDS   */
*/*                                  44 CHARACTERS, THE EXCESS IS    */
*/*                                  TRUNCATED.                      */
*/*    CHARACTER-CODE DEPENDENCIES= EBCDIC CHARACTER SET USED.       */
*/*                                 REASSEMBLE IF ANOTHER CHAR SET   */
*/*                                 DESIRED.                         */
*/*  RESTRICTIONS=                                                   */
*/*  REGISTER CONVENTIONS= REGISTERS ARE DEFINED UNDER THE           */
*/*                        HEADING 'REGISTERS'                       */
*/*  PATCH LABEL= PATCH67                                            */
*/*                                                                  */
*/*MODULE TYPE=                                                      */
*/*  PROCESSOR= BAL                                                  */
*/*  MODULE SIZE= 5800 BYTES                                         */
*/*  ATTRIBUTES= REENTRANT, REFRESHABLE, REUSABLE                    */
*/*              KEY/STATE DEPENDS ON CALLER:                        */
*/*                PROB PROG KEY - PROB PROG STATE                   */
*/*                SCHED KEY 1 - SUPERVISOR STATE                    */
*/*                SUPR KEY 0 - SUPERVISOR STATE                     */
*/*                                                                  */
*/*ENTRY POINT= IKJCT467                                             */
*/*  PURPOSE= MAIN ENTRY TO ISSUE MESSAGES                           */
*/*  LINKAGE= STANDARD                                               */
*/*  INPUT= REG 1 HAS ADDRESS OF OUTCOMTB POINTER                    */
*/*  OUTPUT= THE REQUESTED MESSAGE IS ISSUED                         */
*/*  REGISTERS SAVED= ALL                                            */
*/*  REGISTER USAGE= SEE SECTION LABELED 'REGISTERS'                 */
*/*  REGISTERS RESTORED= ALL BUT 15                                  */
*/*                                                                  */
*/*EXIT - NORMAL=                                                    */
*/*  CONDITIONS= MESSAGE HAS BEEN ISSUED                             */
*/*  OUTPUT= A MESSAGE                                               */
*/*  RETURN CODES= 0                                                 */
*/*                                                                  */
*/*EXIT - ERROR= NONE                                                */
*/*                                                                  */
*/*EXTERNAL REFERENCES= IKJCT4MC - MESSAGE CSECT                     */
*/*  ROUTINES= IKJEFF18 (DAIRFAIL)                                   */
*/*            IKJEFF19 (VSAMFAIL)                                   */
*/*  DATA AREAS= OUTCOMTB (R,W) - COMMUNICATION TABLE FOR ALL OUTPUT */
*/*                OUTMSGID, OUTRTCD, OUTCPPL, IOPL, OUTCMDNM,       */
*/*                OUTWORK, OUTJBPDE, OSVDSPDE, OPRDSPDE, CLASBUFF,  */
*/*                OUTSOBH, OUTSOBSO, OUTSBBUF, OUTMACN, OUTXMSG,    */
*/*                OUTXRPLY, OUTDARB, OUTDAIR, OUTFLAGS(KEY1),       */
*/*                OUTSW(ERROR,SUBCMODE), OUTSW2(NONTERM)            */
*/*  CONTROL BLOCKS= IOPL (W) - INPUT OUTPUT PARAMETER LIST          */
*/*                    INTERFACE WITH THE I/O SERVICE RTNS FOR       */
*/*                    PUTLINE AND PUTGET.                           */
*/*                  PGPB (C-R) - PUTGET PARAMETER BLOCK             */
*/*                    PICKUP THE USER'S RESPONSE (INPUT BUFFER)     */
*/*                    TO A PUTGET MODE OR PUTGET PROMPT.            */
*/*                  CPPL (R) - CMD PROCESSOR PARM LIST USED TO      */
*/*                    LOCATE PSCB AND GET ADDRESSES TO BUILD IOPL   */
*/*                  PSCB (R) - PROTECTED STEP CTL BLK USED TO OBTAIN*/
*/*                    USERID                                        */
*/*                  SSOB (R) - SUBSYSTEM OPTIONS BLK USED TO        */
*/*                    FIND SSSO AND SSIB                            */
*/*                  SSIB (R) - SUBSYSTEM IDENTIFICATION BLK USED TO */
*/*                    FIND SUBSYSTEM NAME                           */
*/*                  PDE (R) - PARSE DESCRIPTOR ELEMENT USED TO FIND */
*/*                    JOBNAME, JOBID, PRINT/SAVE DSNAMES            */
*/*                                                                  */
*/*TABLES= YES                                                       */
*/*                                                                  */
*/*MACROS= SAVE, MODID, GETMAIN, FREEMAIN, PUTLINE, PUTGET,          */
*/*        LINK, RETURN, MODESET                                     */
*/*    SERIALIZATION= N/A                                            */
*/*                                                                  */
*/*MAPPING MACROS= IKJOCMTB, IKJPGPB, IKJCPPL, IKJPSCB,              */
*/*                IEFJSSOB, IEFJSSIB, IKJEFFGF, IKJEFFDF            */
*/*                                                                  */
*/*CHANGE ACTIVITY=                                                  */
*/*                C737601,742401,737001,743001,746601         @ZM30982
*/*                C799701-801701                              @ZM30982
*/*                C840801-842401                              @ZM30982
*/*                A827101-827301,614901,843301-843701         @ZM30982
*/*                A827011-827401,802201-802601                @ZM30982
*/*                A566641-568191,142603-142803                @ZM30982
*/*                                                                  */
*/*MESSAGES= CONTAINS TEXT FOR MESSAGES ISSUED BY OTHER MODULES      */
*/*          ALSO ISSUES ITS OWN MESSAGES:                           */
*/*      IKJ56312I - NOT ENOUGH VIRTUAL STORAGE TO EXECUTE COMMAND   */
*/*                     PUTGET RC=28.                                */
*/*      IKJ56313I - COMMAND SYSTEM ERROR - <PUTGET> ERROR           */
*/*                  CODE <XXX>                                      */
*/*                     NON ZERO PUTGET RC. (OTHER THAN 4,8,28)      */
*/*      IKJ56333I - UNABLE TO PROMPT FOR REPLY TO INSTALLATION      */
*/*                  EXIT MESSAGE <MSG TEXT>                         */
*/*                     USER IN NOPROMPT MODE, THEREFORE             */
*/*                     MSG REPLY  NOT RETRIEVED.                    */
*/*                                                                  */
*/*ABEND CODES= NONE                                                 */
*/********************************************************************/
         EJECT
IKJCT467 CSECT
         EJECT
***********************************************************************
*                 CONSTANTS                                           *
***********************************************************************
ZERO     EQU   0                   SET A FIELD TO ZERO
ONE      EQU   1                   INDEX INTO A FIELD
TWO2     EQU   2                   DISPLACEMENT
THREE    EQU   3                   DISPLACEMENT
FOUR4    EQU   4                   DISPLACEMENT
FIVE5    EQU   5                   CALCULATE LENGTHS
SIX6     EQU   6                   DISPLACEMENT
SEVEN    EQU   7                   USE FOR LENGTHS
EIGHT    EQU   8                   LENGTH IN 'MVC' INSTR
FORTY3   EQU   43                  USE FOR LENGTHS
SIXTY    EQU   60                  USE FOR SYNAD MSG LENGTH
ONEHNDRD EQU   100                 CHECK OUTMSGID
         SPACE
LEN2     EQU  2                    LENGTH IN 'UNPK' INSTR
LEN3     EQU  3                    LENGTH IN 'UNPK' INSTR
LEN4     EQU  4                    LENGTH IN 'TR' INSTR
LEN7     EQU  7                    LENGTH IN 'UNPK' INSTR
         SPACE
NOVAR    EQU   X'00'               CHECK FOR ABSENCE OF MSG INSERT VAR
QUOTES   EQU   X'40'               CHECK PDE FOR QUALIFIED DSNAME
OFF      EQU   X'00'               INIT SWITCHES TO ZERO
TERMINAL EQU   X'DF'               TURN OFF NONTERM BIT
         SPACE
SECPUTLA EQU   124                 PUTLINE SECURITY EXIT MESSAGE M328I
SECPUTLB EQU   143                 PUTLINE SECURITY EXIT MESSAGE M333I
         SPACE 2
RC0      EQU   0                   RETURN CODE 0
RC4      EQU   4                   RETURN CODE 4
RC8      EQU   8                   RETURN CODE 8
RC12     EQU   12                  RETURN CODE 12
RC16     EQU   16                  RETURN CODE 16
RC28     EQU   28                  RETURN CODE 28
         SPACE  2
M312S    EQU   111                 MSGID FOR SUBCMD FAILURE
M312C    EQU   112                 MSGID FOR CMD FAILURE
         EJECT
***********************************************************************
*                   REGISTERS                                         *
***********************************************************************
R0       EQU   0                   REGISTER 0 -WORK REG
R1       EQU   1                   REGISTER 1 -ADDR OF PARAMETER LISTS
*                                             -TEMP BASE FOR JEFF18PL
*                                             -TEMP BASE FOR PDE
*                                             -TEMP BASE FOR SSIB
*                                             -TEMP BASE FOR SSS0
*                                             -GENERAL WORK REG
R2       EQU   2                   REGISTER 2 -WORK REG
R3       EQU   3                   REGISTER 3 -TEMP BASE FOR SSOB
*                                             -INDEX INTO BRTAB
*                                             -INDEX INTO MSG CHAR TBL
*                                             -LENGTH VARIABLE INSERT
*                                             -GENERAL WORK REG
R4       EQU   4                   REGISTER 4 -TEMP BASE FOR PGPB
*                                             -TEMP BASE FOR GFPARMS
R5       EQU   5                   REGISTER 5 -WORK REG
R6       EQU   6                   REGISTER 6 -BRANCH REG (BAL)
R7       EQU   7                   REGISTER 7 -TEMP BASE FOR CPPL
*                                             -TEMP BASE FOR PSCB
*                                             -TEMP BASE FOR SSSO
*                                             -ADDR OF VARIABLE INSERT
*                                             -GENERAL WORK REG
R8       EQU   8                   REGISTER 8 -BASE FOR IKJEFFMC
R9       EQU   9                   REGISTER 9 -BASE FOR MSGCHAR
R10      EQU   10                  REGISTER 10-BASE FOR OUTCOMTB
R11      EQU   11                  REGISTER 11-BASE FOR OLD
R12      EQU   12                  REGISTER 12-BASE REG FOR IKJCT467
R13      EQU   13                  REGISTER 13-BASE FOR SAVEAREA
R14      EQU   14                  REGISTER 14-RETURN REG
R15      EQU   15                  REGISTER 15-RETURN CODE REG
         EJECT
***********************************************************************
*                                                                     *
*        ESTABLISH ADDRESSABILITY FOR IKJCT467                        *
*        OBTAIN GETMAIN STORAGE FOR SAVEAREA AND WORKAREA             *
*                                                                     *
***********************************************************************
         SAVE  (14,12)
         BALR  R12,0               ESTABLISH BASE ADDRESS
         USING *,R12
         MODID  BRANCH=YES
         L     R10,0(R1)           ADDR OF OUTCOMTB
         USING OUTCOMTB,R10        ADDRESSABILITY FOR OUTCOMTB
         GETMAIN R,LV=SAVLTH,SP=1  OBTAIN STORAGE
         USING SAVEAREA,R1         ADDRESSABILITY FOR NEW AREA
         ST    R13,SAVEBACK        STORE BACK PTR IN NEW AREA
         USING SAVEAREA,R13        ADDRESSABILITY FOR OLD AREA
         ST    R1,SAVEFORW         SAVE FORWARD PTR IN OLD AREA
         LR    R13,R1              ESTABLISH NEW SAVEAREA
         EJECT
***********************************************************************
*                                                                     *
*        H O U S E K E E P I N G                                      *
*                                                                     *
***********************************************************************
         L     R8,VMSGCON          ADDR OF MESSAGE CONSTANTS CSECT
         USING IKJCT4MC,R8
         MVI   SAVSW,SAVSWCLR      CLEAR STATUS SWITCHES
         USING MSGCHAR,R9          ADDRESSABILITY FOR MESSAGE
*                                  CHARACTERISTICS MAP
         LA    R11,SAVOUTL1        ADDR 1ST LEVEL MSG
         USING OLDMAP,R11          ADDRESS. FOR OUTPUT LINE DESCRIPTOR
         SPACE 2
***********************************************************************
*                       SET  UP  IOPL                                 *
***********************************************************************
         L     R7,OUTCPPL          ADDR CPPL
         USING CPPL,R7             ADDRESSABILITY FOR CPPL
         MVC   IOPLUPT,CPPLUPT     ADDR OF UPT
         MVC   IOPLECT,CPPLECT     ADDR OF ECT
         DROP  R7
         LA    R7,OUTATTN          GET ADDR OF  THE ECB
         ST    R7,IOPLECB          ADDR OF ATTN ECB TO PASS TO I/O
*                                    SERVICE RTNS
         LA    R7,SAVPUTGT
         ST    R7,IOPLIOPB         ADDR OF PGPB (LIST OF PUTGET)
*                                  UPDATE IF PTPB NEEDED (PUTLINE)
               EJECT
***********************************************************************
*                                                                     *
*        DETERMINE MESSAGE TO BE ISSUED                               *
*        IF OUTMSGID IS < 100, THEN A SERVICE ROUTINE WAS IN ERROR    *
*        AND A SPECIAL ROUTINE WILL HANDLE IT.                        *
*                                                                     *
***********************************************************************
MSGTYPE  EQU   *
         CLI   OUTMSGID,ONEHNDRD   IS MSG INFORMATION TYPE (>=100)
         BNL   IMSGS               YES-GO SET UP 'OLD' AND ISSUE MSG
         SR    R3,R3               NO - SET UP TO USE BRANCH TABLE
         IC    R3,OUTMSGID         ID OF MESSAGE OR MESSAGE TYPE
         B     BRTABSR(R3)         GO TO BRANCH TABLE FOR SERV RTNS
*                                    ANALYZE RC AND CHOOSE A MSG
         SPACE
***********************************************************************
*     SERVICE RTN ERROR MESSAGE - GO TO ROUTINE TO ANALYZE RETURN     *
*     CODE, CHOOSE APPROPRIATE MSG, AND SET OUTMSGID FIELD. THEN      *
*     PROCEED TO 'IMSGS' ROUTINE TO SET UP AND ISSUE MSG.             *
***********************************************************************
         DS    0F
BRTABSR  EQU   *
         B     OUTPUT              00      ISSUE 'OUTPUT' MESSAGE
         B     ATTACH              04      ISSUE ATTACH FAILURE MSG
         B     DYNALERR            08      ISSUE DYNALC FAILURE MSG
         B     PARS                12      ISSUE PARSE FAILURE MESSAGE
         B     DAIRERR             16      ISSUE DAIR FAILURE MESSAGE
         B     SCAN                20      ISSUE CMD SCAN FAILURE MSG
         B     PUTGC               24      ISSUE PUTGET FAILURE MESSAGE
         B     BADPOINT            28      ISSUE POINT FAILURE MESSAGE
         B     GETERROR            32      ISSUE GET FAILURE MESSAGE
         B     HELPF               36      ISSUE HELP FAILED MESSAGE
         B     STAERR              40      ISSUE ESTAE FAILURE MSG
         B     STAX                44      ISSUE STAX FAILURE MSG
         B     STATUS              48      ISSUE STATUS FAILURE MSG
         B     OPENFAIL            52      ISSUE OPEN FAILURE MSG
         B     JESM320I            56      ISSUE JES MSG 320   @ZM30982
         B     JESM339I            60      ISSUE JES MSG 339   @ZM30982
         B     JESM343I            64      ISSUE JES MSG 343   @ZM30982
         SPACE 2
***********************************************************************
*                                                                     *
*        INFORMATIONAL MESSAGE - GET ADDR OF                          *
*        'CHARACTERISTICS' FOR REQUIRED MSG                           *
*                                                                     *
***********************************************************************
IMSGS    EQU   *
         SR    R9,R9               CLEAR REGISTER
         IC    R9,OUTMSGID         LOAD MESSAGE ID
         SH    R9,HUNDRED          SUBTRACT 100
         MH    R9,TWELVE           MULTIPLY BY 12 (LENGTH OF EACH
*                                  ENTRY IN MSG CHAR.)
         LA    R3,MGCHAR           ADDR OF MSG CHARACTERISTICS
         AR    R9,R3               ADD TO OFFSET JUST CALCULATED
         EJECT
***********************************************************************
*                                                                     *
*        DETERMINE MSG FORMAT (SINGLE OR MULTI                        *
*        LEVEL) TO MAKE ADDRESSING ADJUSTMENTS                        *
*                                                                     *
***********************************************************************
MSGFORMT EQU   *
         L     R0,MSGC2LVP         ADDR OF 2ND LEVEL MSG-IF ONE EXISTS
         LTR   R0,R0               TEST FOR 2ND LEVEL MSG
         BNZ   MULTILVL            BRANCH - MSG IS MULTILEVEL
         SH    R11,FOUR            REDUCE BY 4 BASE FOR OUTPUT
*                                  LINE TO COMPENSATE FOR LACK OF
*                                  FWD PTR IN SINGLE LEVEL MSG
         B     SEGMENT1            START PROCESSING MSG
         SPACE 3
MULTILVL OI    SAVSW,SAVSET        INDICATE 2ND LVL MSG NOW BEING
*                                    PROCESSED & IT'S MULTILVL
         LA    R2,SAVOUTL2         ADDR OF 'OLD' FOR 2ND LEVEL MSG
         ST    R2,OLDNXTLV         STORE IN 1ST LEVEL 'OLD' TO
*                                    2ND LEVEL 'OLD' AS FWD PTR
         EJECT
***********************************************************************
*                                                                     *
*        FILL IN OUTPUT LINE WITH INFO FOR THE BASIC MESSAGE SEGMENT. *
*        THAT IS, FILL IN THE OUTPUT LINE DESCRIPTOR (MSGMAP)         *
*        AND THE INFO FOR THE FIRST SEGMENT.                          *
*                                                                     *
***********************************************************************
SEGMENT1 EQU   *
         MVC   OLDSEGNO,ONESEG     NO. OF SEGMENTS (1)
         LA    R2,MSGSEGAL         ADDR OF 1ST SEGMENT (A)
         ST    R2,OLDSEGA          STORE IN OUTPUT LINE
         L     R2,MSGCMSGP         ADDR OF MSG CONSTANTS
         LH    R3,0(R2)            LENGTH OF MESSAGE TEXT
         AH    R3,FOUR             ADD 4 TO GET LENGTH OF SEGMENT
         STH   R3,MSGSEGAL         STORE IN OUTPUT LINE
         MVC   MSGSEGAO,SEGAOFST   MOVE SEGMENT A OFFSET (0)
         LA    R2,TWO2(R2)         GET BY LL FIELD TO GET AT TEXT
         SH    R3,FIVE             GET LENGTH OF TEXT MINUS 1
         EX    R3,MVCTEXT          MOVE TEXT INTO OUTPUT LINE
         CLI   MSGCVAR1,NOVAR      CHECK FOR PRESENCE OF 1ST VAR
         BE    CHK2LVL             NO VAR INSERTS -GO CK FOR 2ND LEVEL
         SPACE 1
***********************************************************************
*                                                                     *
*        FILL IN OUTPUT LINE WITH INFO FOR 2ND MESSAGE SEGMENT        *
*       (1ST VARIABLE INSERT). FILL IN NO. SEGMENTS AND ADDRESS OF    *
*        SEGMENT B.                                                   *
*                                                                     *
***********************************************************************
SEGMENT2 EQU   *
         MVC   OLDSEGNO,TWOSEG     NO. OF SEGMENTS (2)
         LA    R2,MSGSEGBL         ADDR OF 2ND SEGMENT (B)
         ST    R2,OLDSEGB          STORE IN OUTPUT LINE
*                                GET VARIABLE AND PUT IN OUT LINE
         SR    R2,R2               ZERO REGISTER
         IC    R2,MSGCVAR1         INSER VARIABLE ID
         BAL   R6,BRTABVI(R2)      GO GET VARIABLE INSERT
*                                    R3 - LENGTH VARIABLE +4
*                                    R7 - ADDR OF VARIABLE INSERT
         STH   R3,MSGSEGBL         STORE SEGMENT LNTH IN OUTLINE
         SH    R3,FIVE             GET LEN OF VARIABLE, -1 FOR 'MVC'
         EX    R3,MVCVAR1          MOVE VARIABLE 1 IN OUTPUT LINE
*                                  GET OFFSET AND PUT IN OUT LINE
         L     R2,MSGCMSGP         ADDR OF MSG CONSTANT INFO
         LH    R3,0(R2)            LENGTH OF MESSAGE TEXT
         A     R3,TWOSEG           ADD 2 FOR HALF WORK LENGTH FIELD
         AR    R2,R3               SUM IS ADDR OF 1ST VAR OFFSET
         MVC   MSGSEGBO,0(R2)      MOVE OFFSET INTO OUTPUT LINE
         CLI   MSGCVAR2,NOVAR      CHECK FOR PRESENCE OF 2ND VAR
         BE    CHK2LVL             BRANCH -VARIABLE CODE IS 00
         SPACE 3
***********************************************************************
*                                                                     *
*        FILL IN OUTPUT LINE WITH INFO FOR 3RD MESSAGE SEGMENT        *
*        (VARIABLE INSERT). FILL IN NO. SEGMENTS AND ADDRESS          *
*        OF SEGMENT C.                                                *
*                                                                     *
***********************************************************************
SEGMENT3 EQU   *
         MVC   OLDSEGNO,THREESEG   NO. OF SEGMENTS (3)
         LA    R2,MSGSEGCL         ADDR OF 3RD SEGMENT (C)
         ST    R2,OLDSEGC          STORE IN OUTPUT LINE
*                                GET VARIABLE AND PUT IN OUT LINE
         SR    R2,R2               ZERO REGISTER
         IC    R2,MSGCVAR2         INSERT VARIABLE ID
         BAL   R6,BRTABVI(R2)      GO GET VARIABLE INSERT
*                                    R3 - LENGTH VARIABLE +4
*                                    R7 - ADDR OF VARIABLE INSERT
         STH   R3,MSGSEGCL         STORE SEGMENT LNTH IN OUTLINE
         SH    R3,FIVE             GET LNTH OF VARIABLE MINUS 1
         EX    R3,MVCVAR2          MOVE VARIABLE 2 IN OUTPUT LINE
*                                  GET OFFSET AND PUT IN OUT LINE
         L     R2,MSGCMSGP         ADDR OF MSG CONSTANT
         LH    R3,0(R2)            LENGTH OF MSG TEXT
         AH    R3,FOUR             ADD 4 TO FIND DISTANCE TO
*                                  THE 2ND VARIABLE OFFSET
         AR    R2,R3               SUM IS ADDR OF 2ND VAR OFFSET
         MVC   MSGSEGCO,0(R2)      MOVE OFFSET INTO OUTPUT LINE
         CLI   MSGCVAR3,NOVAR      CHECK FOR PRESENCE OF 2ND VAR
         BE    CHK2LVL             BRANCH-VARIABLE CODE IS 00
         SPACE 1
***********************************************************************
*                                                                     *
*        FILL IN OUTPUT LINE WITH INFO FOR 4TH MESSAGE SEGMENT        *
*        (VARIABLE INSERT). FILL IN NO. SEGMENTS AND ADDRESS          *
*        OF SEGMENT D.                                                *
*                                                                     *
***********************************************************************
SEGMENT4 EQU   *
         MVC   OLDSEGNO,FOURSEG    NO. OF SEGMENTS (4)
         LA    R2,MSGSEGDL         ADDR OF 4TH SEGMENT (D)
         ST    R2,OLDSEGD          STORE IN OUTPUT LINE
*                                GET VARIABLE AND PUT IN OUT LINE
         SR    R2,R2               ZERO REGISTER
         IC    R2,MSGCVAR3         INSERT VARIABLE ID
         BAL   R6,BRTABVI(R2)      GO GET VARIABLE INSERT
*                                    R3 - LENGTH VARIABLE +4
*                                    R7 - ADDR OF VARIABLE INSERT
         STH   R3,MSGSEGDL         STORE SEGMENT LNTH IN OUTLINE
         SH    R3,FIVE             GET LNTH OF VARIABLE MINUS 1
         EX    R3,MVCVAR3          MOVE VARIABLE 3 IN OUTPUT LINE
*                                  GET OFFSET AND PUT IN OUT LINE
         L     R2,MSGCMSGP         ADDR OF MSG CONSTANT
         LH    R3,0(R2)            LENGTH OF MSG TEXT
         AH    R3,SIX              ADD 6 TO FIND DISTANCE TO
*                                  THE 2ND VARIABLE OFFSET
         AR    R2,R3               SUM IS ADDR OF 3RD VAR OFFSET
         MVC   MSGSEGDO,0(R2)      MOVE OFFSET INTO OUTPUT LINE
         EJECT
***********************************************************************
*     DETERMINE IF MSG HAS ONE LEVEL OR TWO.                          *
*       IF ONE LEVEL, GO CHOSE PUTLINE OR PUTGET.                     *
*       IF TWO LEVELS, SET UP 2ND LEVEL 'OLD' BEFORE ISSUING MSG      *
***********************************************************************
CHK2LVL  EQU   *
         TM    SAVSW,SAV2LVL       WAS MSG THE 1ST OF 2 LEVELS
         BZ    CKPGPL              NO-GO CK IF PUTLINE OR PUTGET NEEDED
         LA    R11,SAVOUTL2        PUT ADDR OF  2ND LEVEL OUTPUT
*                                  LINE INTO THE MAP BASE REG
         L     R9,MSGC2LVP         PUT ADDR CHARARISTICS FOR 2ND
*                                  LVL MSG INTO THE MAP BASE REG
         XC    OLDNXTLV(FOUR4),OLDNXTLV  PUT ZEROS AS FWD PTR
*                                          FOR NXT 'OLD'
         NI    SAVSW,SAV2LVOF      TURN OFF 2ND LVL SWITCH TO AVOID
*                                    ANOTHER LOOP TO BUILD MSG SEGMENTS
         B     SEGMENT1            BRANCH
         SPACE 3
***********************************************************************
*     DECIDE IF PUTLINE OR PUTGET PROMPT (SEC EXIT MAY NEED PUTGET)   *
***********************************************************************
CKPGPL   EQU   *
         TM    SAVSW,SAVPTGTP      PUTGET PROMPT REQUEST?
         BO    PROMPT              YES-GO PUTGET (PROMPT)
         SPACE 3
***********************************************************************
*    DECIDE IF SINGLE LEVEL OR MULTI LEVEL PUTLINE NEEDED             *
***********************************************************************
PUTLINE  EQU   *                   ISSUE PUTLINE FOR SINGLE OR MULTI
*                                  LEVEL MESSAGE
*
         LA    R2,SAVOUTL1         ADDR OF OUTPUT LINE
         MVC   SAVPUTL(PUTLSIZE),PUTLINL LIST TO DYN CORE
         LA    R3,SAVPUTL          GET ADR OF PUTLINE LIST FORM
         ST    R3,IOPLIOPB         STOR ADR IN IOPL
         SPACE
         TM    SAVSW,SAVMULTI      CHECK IF MSG IS MULTI LEVEL
         BO    PUTMULTI            YES, USER PUTLINE MULTI-LEVEL
         EJECT
***********************************************************************
*   ISSUE PUTLINE - SINGLE LEVEL                                      *
***********************************************************************
         TM    OUTFLAGS,KEY1       WAS CALLER IN KEY 1?
         BZ    PUTLS               NO, NEED NOT MODESET
         SPACE
*      MODESET
         MODESET EXTKEY=SUPR       YES, GET IN SUPR KEY
         SPACE
PUTLS    EQU   *
         PUTLINE OUTPUT=((R2),SINGLE),MF=(E,IOPL)
         LR    R3,R15              SAVE PUTLINE RC
         SPACE
         TM    OUTFLAGS,KEY1       WAS CALLER IN KEY 1?
         BZ    CKPUTLRC            NO, THEREFORE MODESET NOT DONE
         SPACE
*      MODESET
         MODESET EXTKEY=SCHED      YES, GET BACK TO KEY1
         SPACE
         B     CKPUTLRC            GO CHECK PUTLINE RETURN CODES
         EJECT
***********************************************************************
*     ISSUE PUTLINE - MULTI LEVEL                                     *
***********************************************************************
PUTMULTI EQU   *
         NI    SAVSW,SAVMLVOF      TURN OFF MULTI LEVEL SWITCH
         TM    OUTFLAGS,KEY1       WAS CALLER IN KEY1 ?
         BZ    PUTLM               NO, NEED NOT MODESET
         SPACE
*      MODESET
         MODESET EXTKEY=SUPR       YES, GET IN SUPR KEY
         SPACE
PUTLM    EQU   *
         PUTLINE OUTPUT=((R2),MULTLVL),MF=(E,IOPL)
         SPACE
         LR    R3,R15              SAVE PUTLINE RC
         SPACE
         TM    OUTFLAGS,KEY1       WAS CALLER IN KEY 1 ?
         BZ    CKPUTLRC            NO, NEED NOT MODESET BACK
         SPACE
*      MODESET
         MODESET EXTKEY=SCHED      YES, GET IN KEY 1 AGAIN
         SPACE
         EJECT
***********************************************************************
*     ANALYZE PUTLINE RETURN CODE                                     *
***********************************************************************
CKPUTLRC EQU   *
         LTR   R3,R3               CHECK ZERO RETURN CODE
         BZ    RETURN              RETURN IF MSG ISSUED SUCCESSFULLY
         CH    R3,FOUR             WAS ECB POSTED - ATTN OCCURRED?
         BE    RETURN              RETURN IF ATTN
         TM    SAVSW,SAVPUTL1      ANY PREVIOUS UNSUCCESSFUL PUTLINES?
         BO    QUIT                YES, QUIT
*                                  NO, TRY ONCE MORE TO ISSUE MSG
         OI    SAVSW,SAVPUTL1      INDICATE 1ST PUTLINE FAILURE
         B     PUTLINE             GO TRY PUTLINE AGAIN
QUIT     EQU   *
         OI    OUTSW,ERROR         SET ERROR BIT TO END COMMAND
         B     RETURN              RETURN TO CALLER
         EJECT
***********************************************************************
*     ISSUE PUTGET - PROMPT (FOR SECURITY EXIT MSG)                   *
***********************************************************************
PROMPT   EQU   *
         NI    SAVSW,SAVPGPOF      TURN OFF PUTGET REQUEST SW
         NI    SAVSW,SAVMLVOF      TURN OFF MULTI LEVEL SWITCH-IN CASE
*                                  PUTGET FAILS AND A SINGLE LEVEL
*                                  MESSAGE IS NEEDED
         MVC   SAVPUTGT(PUTGSIZE),PUTGL MOVE PUTGET LIST TO DYN CORE
         LA    R2,SAVOUTL1         ADDR 'OLD' FOR PUTGET
         TM    OUTFLAGS,KEY1       IN KEY1?
         BZ    PRMPTMSG            NO, DON'T NEED MODESET FOR KEY0
         SPACE
*      MODESET
         MODESET EXTKEY=SUPR       YES, GET IN KEY0
         SPACE
PRMPTMSG EQU   *
         LA    R1,IOPL             ADDR IOPL
         PUTGET OUTPUT=((R2),MULTLVL,PROMPT),MF=(E,(1))
         SPACE
         STH   R15,OUTRTCD         SAVE PUTGET RC
         TM    OUTFLAGS,KEY1       IN KEY1 PRIOR TO CALLING IKJCT467?
         BZ    CKNOPRMP            NO, NEED NOT GET IN KEY1 AGAIN
         SPACE
*      MODESET
         MODESET EXTKEY=SCHED      YES, GET IN KEY1 AGAIN
         SPACE
CKNOPRMP EQU   *
         CLI   OUTRTCD+ONE,RC12    IN NOPROMPT MODE
         BNE   CKPUTGRC            NO, BRANCH
         SPACE
*                                ISSUE MESSAGE THAT INCLUDES UP TO
*                                40 CHARACTERS OF MSG FROM SECURITY
*                                EXIT AND QUIT COMMAND
         SPACE
         OI    OUTSW,ERROR         TURN ON ERROR SWITCH
         L     R2,OUTXMSG          ADDR OF SECURITY EXIT MESSAGE
         LH    R1,0(R2)            GET LL FIELD OF EXIT MSG
         CH    R1,FORTY2           MSG GTR THAN 40 (+2 FOR LL) CHARS ?
         BNH   SIZEOK              NO, MSG IS <= 40 CHARS.
         LH    R1,FORTY2           LOAD MAX SIZE +2
         STH   R1,0(R2)            STORE ADJUSTED LEN IN MSG LL FIELD
SIZEOK   EQU   *
         MVI   OUTMSGID,M333I      ISSUE 'UNABLE TO PROMPT' MSG
         LA    R11,SAVOUTL1        REINIT R11 TO 1ST LEVEL 'OLD' BASE
         B     IMSGS               ISSUE MESSAGE
         EJECT
***********************************************************************
*                                                                     *
*        SET UP TO ISSUE MODE MSG    -    USUALLY 'OUTPUT'            *
*          INITIALIZE THE 'OLD' AND MSG SEGMENTS                      *
***********************************************************************
OUTPUT   EQU   *
         SH    R11,FOUR            REDUCE R11 BASE FOR OUTPUT LINE MAP
*                                    TO COMPENSATE FOR LACK OF FORWARD
*                                    PTR IN A 1 LEVEL MSG
         MVC   SAVOUTL1(MODELN),MODEMSG   SET CONSTANTS IN 'OLD' & SEG1
         MVC   MSGSEGAT+1(EIGHT),OUTCMDNM     MOVE IN CMD NAME
*           COMMAND NAME STORED IN OUTCOMTB (FROM THE ECT)
         SPACE
         LA    R2,MSGSEGAL         ADDR OF 1ST SEGMENT (MSGID TEXT)
         ST    R2,OLDSEGA          STORE IN 'OLD'
         EJECT
***********************************************************************
*                      ISSUE PUTGET - MODE                            *
***********************************************************************
         SPACE
         MVC   SAVPUTGT(PUTGSIZE),PUTGL   MOVE PUTGET LIST TO DYN CORE
         TM    OUTFLAGS,KEY1       IN KEY 1?
         BZ    PTGTMMSG            NO -MODESET NOT NEEDED TO GET KEY 0
         SPACE
*      MODESET
         MODESET EXTKEY=SUPR       YES- GET IN KEY 0
         SPACE
PTGTMMSG EQU   *
         LA    R2,SAVOUTL1         ADDR OF 'OLD' FOR PUTGET
         LA    R1,IOPL             ADDR OF IOPL
         PUTGET OUTPUT=((R2),SINGLE,MODE),MF=(E,(1))
         STH   R15,OUTRTCD         SAVE RETURN CODE
         SPACE
         TM    OUTFLAGS,KEY1       IN KEY1 PRIOR TO CALLING IKJCT467?
         BZ    CKPUTGRC            NO -MODESET NOT NEEDED TO GET KEY 1
         SPACE
*      MODESET
         MODESET EXTKEY=SCHED      YES-GET IN KEY 1 AGAIN
         EJECT
***********************************************************************
*   ANALYZE PUTGET RETURN CODE  (MODE AND PROMPT)                     *
***********************************************************************
         SPACE
CKPUTGRC EQU   *
         CLI   OUTRTCD+ONE,RC0     IS PUTGET RC=0? - ALL OK
         BNE   PTGTRC4             NO, CHECK FURTHER
         NI    OUTSW2,TERMINAL     YES, TURN OFF BIT. INDICATE TERM
         B     CKBUF               GO CLEAN UP
PTGTRC4  EQU   *                   NO, CHECK FURTHER
         CLI   OUTRTCD+ONE,RC4     IS PUTGET RC=4(MODE ONLY)? - ALL OK
         BNE   PTGTRC8             NO - CHECK FOR RC=8
         OI    OUTSW2,NONTERM      YES-INDICATE OTHER THAN TERM INPUT
*                                    COULD BE A CLIST
         B     CKBUF               GO CLEAN UP
PTGTRC8  EQU   *
         CLI   OUTRTCD+ONE,RC8     IS PUTGET RC=8? - ATTN OCCURRED, SO
*                                    ATTN EXIT GOT COMMAND - RETURN
         BE    RETURN              FREE SAVEAREA & RETURN
         SPACE
OTHERRCS EQU   *                   OTHER POSSIBLE RETURN CODES:
*                                  PUTGET RC=12(MODE ONLY)? - COULD
*                                    NOT OBTAIN SUBCMD
*                                  PUTGET RC=16? - NO LINE PUT
*                                  PUTGET RC=20? - NO LINE RECEIVED
*                                  RC WAS 24, INV PARMS, OR 28,
*                                     GETMAIN FAILURE, OR OTHER RC?
         OI    OUTSW,ERROR         SET ERROR INDICATOR
         B     PUTGC               GO ISSUE APPROPRIATE MSG
         EJECT
***********************************************************************
*                                                                     *
*     THE FOLLOWING CODE PERFORMS THE NECESSARY PROCESSING            *
*       AFTER A SUCCESSFUL 'PUTGET'.                                  *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*     IF THERE WAS A BUFFER FROM A PREVIOUS SUBCOMMAND,               *
*       FREE IT BEFORE SAVING THE BUFFER ADDR OF THIS COMMAND         *
***********************************************************************
CKBUF    EQU   *
         L     R1,OUTSBBUF         YES- CHECK FOR AN EXISTING BUFFER
         LTR   R1,R1               WAS A BUFFER PREVIOUSLY GOTTEN?
         BZ    NOFREE              NO - DON'T BOTHER TO FREE IT
*                                  YES-SET UP TO FREE IT
         LH    R0,0(R1)            GET LENGTH - FIRST HALF OF BUFFER
         O     R0,SUBPOOL1         SET PUTGET BUFFER SUBPOOL
         SPACE
         FREEMAIN  R,LV=(0),A=(1)
         SPACE
***********************************************************************
*     SAVE BUFFER ADDR OF USER'S RESPONSE                             *
***********************************************************************
NOFREE   EQU   *
         LA    R4,SAVPUTGT
         USING PGPB,R4             ADDRESSABILITY FOR PUTGET PARM BLK
         MVC   OUTSBBUF,PGPBIBUF   ADDR SUBCMD BUF-MODE OR PROMPT REPLY
         SPACE
***********************************************************************
*     IF THE USER'S REPLY WAS FOR AN INSTALLATION EXIT MSG,           *
*       SAVE THE REPLY ADDR IN INST EXIT PARM LIST.                   *
***********************************************************************
         TM    SAVSW,SAVSECMG      WAS INST EXIT MSG REPLY RECEIVED?
         BZ    RETURN              NO - GO FREE SAVEAREA & RETURN
         SPACE
         L     R1,PGPBIBUF
         LH    R2,0(R1)            PICK UP LL OF REPLY BUFFER
         S     R2,TWO              DECREMENT OFFSET LENGTH FROM TOTAL
         STH   R2,TWO2(R1)         STORE LENGTH OVER OFFSET FIELD -
*                                    THE HALF WORD BEFORE THE TEXT
         LA    R2,TWO2(R1)         POINT TO HALF WORD BEFORE TEXT
         ST    R2,OUTXRPLY         PASS ADDR TO SECURITY EXIT
         DROP  R4
         B     RETURN              GO FREE SAVEAREA & RETURN
         EJECT
***********************************************************************
*          FREE CORE AND RETURN TO CALLER                             *
***********************************************************************
RETURN   EQU   *
         SR    R5,R5               ZERO RETURN CODE
         LR    R1,R13              ADDR OF CURRENT SAVE AREA
         L     R13,SAVEBACK        ADDR OF OLD SAVE AREA
         SPACE
         FREEMAIN R,LV=SAVLTH,A=(1),SP=1 FREE CURRENT SAVE AREA
         SPACE
         LR    R15,R5              TRANSFER RETURN CODE
         SPACE
         RETURN (14,12),T,RC=(15)  RETURN TO CALLER
         EJECT
***********************************************************************
*      SPECIAL ROUTINES FOLLOW TO FIND VARIABLES TO BE PLACED INTO    *
*      THE MESSAGE SEGMENT BEING BUILT.  ON EXIT, REG3 SHOULD CONTAIN *
*      THE VARIABLE LENGTH+4, AND REG7 SHOULD CONTAIN THE ADDRESS OF  *
*      THE VARIABLE.                                                  *
***********************************************************************
BRTABVI  DS    F                   BRANCH TABLE FOR VARIABLE FETCH
*                                  ROUTINES
*
         B     JOBNAME             FETCH JOBNAME                   04
         B     CLASSNAM            FETCH CLASSNAME                 08
         B     USERID              FETCH USERID                    0C
         B     CMDNM               FETCH COMMAND NAME              10
         B     R15CODE             FETCH R15 RETURN CODE           14
         B     RTNCODE             FETCH RETURN CODE               18
         B     DSNAME              FETCH DSNAME-PRINT/SAVE         1C
         B     DESTID              FETCH REMOTE STATION ID         20
         B     SRVRTN              FETCH SERVICE ROUTINE NAME      24
         DC    F'0'                UNUSED                          28
         B     JOBIDS              FETCH SYSTEM SUPPLIED JOBID     2C
         DC    F'0'                UNUSED                          30
         B     JOBIDU              FETCH USER SUPPLIED JOBID       34
         B     EXITMSG             FETCH SEC EXIT MSG              38
         DC    F'0'                UNUSED                          3C
         B     FIBMAC              FETCH FIB MACRO                 40
         B     SUBSYSTM            FETCH SUBSYS NAME               44
         B     DSNSYSO             FETCH SYSOUT DSNAME             48
         B     MEMBER              FETCH MEMBER NAME               4C
         B     SYNAD               FETCH SYNAD MESSAGE             50
         SPACE 3
***********************************************************************
*        GENERAL ROUTINE FOR FINDING SIZE OF VARIABLES                *
*        AFTER DELETING TRAILING BLANKS                               *
*         INPUT:                                                      *
*           R3 - MAXIMUM LENGTH OF VARIABLE MINUS 1                   *
*           R7 - ADDRESS OF VARIABLE                                  *
***********************************************************************
CHKSIZE  EQU   *
         LA    R3,0(R3,R7)         POINT TO LAST CHARACTER OF THE
*                                  FIELD CONTAINING THE VARIABLE
VARLN    EQU   *
         CLI   0(R3),C' '          BLANK CHAR?
         BNE   NONBLNK             EXIT LOOP AT 1ST NON BLANK
         BCT   R3,VARLN            LOOP UNTIL NON BLANK IS FOUND
NONBLNK  EQU   *
         SR    R3,R7               DIFF IS LENGTH MINUS 1
         LA    R3,FIVE5(R3)        ADD 5 TO GET LENGTH+4
         BR    R6                  RETURN TO CALLER (SEGMENT2,3,4 CODE)
*                                  OR VSAMERR ROUTINE
         EJECT
***********************************************************************
*        FIND JOBNAME FROM PDE                                        *
***********************************************************************
JOBNAME  EQU   *
         L     R1,OUTJBPDE         ADDR OF JOBNAME PDE
         USING PDE,R1              PDE ADDRESSABILITY
         L     R7,PDEAD            ADDR OF THE JOBNAME
         LH    R3,PDELEN           ITS LENGTH
         LA    R3,FOUR4(R3)        PLUS 4 TO JOBNAME LENGTH
         BR    R6                  RETURN TO CALLER (SEGMENT2,3,4 CODE)
         SPACE 2
***********************************************************************
*              FIND USER SUPPLIED JOBID FROM JOBNAME PDE              *
***********************************************************************
JOBIDU   EQU   *
         L     R1,OUTJBPDE         ADDR OF JOBNAME PDE
         USING PDE,R1              PDE ADDRESSABILITY
         L     R7,PDEAD2           ADDR OF ITEM
         LH    R3,PDELEN2          ITS LENGTH
         LA    R3,FOUR4(R3)        PLUS 4 TO ITEM'S LENGTH
         BR    R6                  RETURN TO CALLER (SEGMENT2,3,4 CODE)
         SPACE 2
***********************************************************************
*      FIND SYSTEM RETURNED JOBID FROM SSOB                           *
***********************************************************************
JOBIDS  EQU   *
         L     R3,OUTSOBH          ADDR OF SSOB HEADER
         USING SSOB,R3             SSOB HEADER ADDRESSABILITY
         L     R1,SSOBINDV         ADDR OF SSSO
         USING SSOBEXT,R1          SSSO ADDRESSABILITY
         LA    R7,SSSOJOBI         ADDR OF JOBID
         LA    R3,SEVEN            MAX LEN MINUS 1
         B     CHKSIZE             GO CALCULATE LENGTH
         DROP  R3
         DROP  R1
         SPACE 2
***********************************************************************
*    FIND CLASSNAME FROM CLASBUFF IN OUTCOMTB                         *
***********************************************************************
CLASSNAM EQU   *
         LA    R7,CLASBUFF         ADDR OF CLASSNAME
         LA    R3,FIVE5            CLASSNAME LENGTH PLUS FOUR
         BR    R6                  RETURN TO CALLER (SEGMENT2,3,4 CODE)
         EJECT
***********************************************************************
*            FIND DSNAME FOR PRINT OR SAVE FROM PDE                   *
***********************************************************************
DSNAME   EQU   *                   GET DSNAME VARIABLE
         TM    OUTSW,SUBCMODE      WAS IT A CMD OR SUBCMD?
         BZ    PRNTDS              IT WAS A CMD, GO GET PRNT PDE
         L     R1,OSVDSPDE         GET SAVE DSNAME PDE
         B     COMMON              RTN WHICH EXTRACTS PDE INFO
PRNTDS   EQU   *
         L     R1,OPRDSPDE         GET PRINT DSNAME PDE
         B     COMMON              RTN WHICH EXTRACTS PDE INFO
         SPACE 3
***********************************************************************
*    EXTRACT DSNAME PDE INFORMATION                                   *
***********************************************************************
COMMON   EQU   *                   COMMON ROUTINE TO ACCESS PDE FIELDS
*                                    THE SPECIFIC PDE ADDR IS ALREADY
*                                    IN R1
         USING PDE,R1              PDE ADDRESSABILITY
         L     R7,PDEAD            ADDR OF THE DSNAME
         LH    R3,PDELEN           ITS LENGTH
         TM    PDEFLGS,QUOTES      WAS DSN ENTERED QUALIFIED?
         BO    CALCLEN             YES, PRINT IT AS IT IS IN PDE
*                                  NO, DSN NOT ENTERED QUALIFIED.
*                                    STRIP THE QUALIFIER PARSE ADDED
*                                    BEFORE PRINTING
         LA    R2,1                FOR GENERAL DECREMENTING OF REGS
CKDOT    EQU   *
         CLI   0(R7),C'.'          IS THIS CHAR A PERIOD?
         BE    FOUND               YES, GO GET ADDR OF NEXT CHAR
         LA    R7,1(R7)            NO, INCRE ADDR AND CHECK NEXT CHAR
         SR    R3,R2               DECRE LENGTH OF DSN
         B     CKDOT
FOUND    EQU   *
         LA    R7,1(R7)           GET ADDR OF CHAR AFTER THE PERIOD
         SR    R3,R2              DECRE LENGTH
CALCLEN  EQU   *
         LA    R3,FOUR4(R3)        PLUS 4 TO DSNAME'S LENGTH
         BR    R6                  RETURN TO CALLER (SEGMENT2,3,4 CODE)
         SPACE 3
***********************************************************************
*              GET MEMBERNAME FOR 'SAVE' DATA SET FROM PDE            *
***********************************************************************
MEMBER   EQU   *
         L     R1,OSVDSPDE         GET SAVE DSNAME PDE
         USING PDE,R1
         L     R7,PDEAD2           GET ADDR MEMBER NAME
         LH    R3,PDELEN2          GET LENGTH MEMBER NAME
         LA    R3,FOUR4(R3)        LENGTH OF MEMBER NAME + 4
         BR    R6                  RETURN TO CALLER (SEGMENT2,3,4 CODE)
         DROP  R1
         EJECT
***********************************************************************
*  FIND USERID FROM PSCB - MUST BE IN KEY0 OR PROB PROG KEY TO READ   *
***********************************************************************
USERID   EQU   *                   GET USERID VARIABLE
         L     R7,OUTCPPL          ADDR OF CPPL
         USING CPPL,R7             ADDRESSABILITY FOR CPPL
         L     R7,CPPLPSCB         ADDR OF PSCB
         USING PSCB,R7             ADDRESSABILITY FOR PSCB
         SR    R3,R3               ZERO REGISTER
         IC    R3,PSCBUSRL         LENGTH OF USERID
         LA    R3,FOUR4(R3)        ADD 4 TO LENGTH OF USERID
         LA    R7,PSCBUSER         ADDR USERID
         BR    R6                  RETURN TO CALLER (SEGMENT2,3,4 CODE)
         SPACE 3
***********************************************************************
*    RETRIEVE COMMAND NAME IN OUTCOMTB (FROM ECT ORIGINALLY)          *
***********************************************************************
CMDNM    EQU   *                   GET COMMAND NAME
         LA    R7,OUTCMDNM         ADDR OF COMMAND NAME
         LA    R3,SEVEN            MAX LEN CMDNAME MINUS 1
         B     CHKSIZE             GO CALCULATE LENGTH
         EJECT
***********************************************************************
*          GET & CONVERT RETURN CODE FOR PRINTING                     *
*          THIS RETURN CODE COULD BE IN REG15, OR AN ERROR CODE IN A  *
*          CONTROL BLOCK (LIKE AN RPL ERROR CODE)                     *
*            RC MUST BE <= 153 DECIMAL OR <= X'99'                    *
***********************************************************************
R15CODE  EQU   *                   CONVERT R15 RTN CODE FROM
*                                  HEX TO DECIMAL
*
         LH    R1,OUTRTCD          LOAD RETURN CODE
         CVD   R1,SAVRTCD          CONVERT IT TO PACKED DECIMAL
         MVC   OUTRTCD,SAVRTCD+SIX6  MOVE THE 2 SIGNIFICANT BYTES OF
*                                    PACKED CODE
         UNPK  SAVRTCD(LEN3),OUTRTCD(LEN2)   PACKED DEC TO ZONED DEC
         OI    SAVRTCD+TWO2,X'F0'  SET SIGN TO PRINTABLE IN LAST BYTE
         LA    R7,SAVRTCD          ADDR OF RETURN CODE (NOW PRINTABLE)
         LA    R3,SEVEN            LNGTH OF VAR INSERT (CODE LEN 3 + 4)
         BR    R6                  RETURN TO CALLER (SEGMENT2,3,4 CODE)
         SPACE
***********************************************************************
*        GET & CONVERT ERROR CODE OR COMPLETION CODE FOR PRINTING     *
*          CODE MUST BE <= 3 PACKED DIGITS (1 1/2 BYTES)              *
***********************************************************************
RTNCODE  EQU   *                   PREPARE COMPLETION CODE FOR PRINTING
*
         UNPK  SAVRTCD(LEN7),OUTRTCD(LEN4)   PACKED CODE TO ZONED
         TR    SAVRTCD(LEN4),TABLE-C'0'      TRANSLATE 0-9, A-F
*                                  ACTUALLY, ANY NUMBERS IN THE RC ARE
*                                  ALREADY IN PRINTABLE FORM, THIS WILL
*                                  TRANSLATE ALPHABETICS WHICH HAVE
*                                  ZONES (FB TO C2). NOTE, COMPENSATION
*                                  FOR ABBREVIATED TRT TABLE.
         SPACE
         LA    R7,SAVRTCD          ADDR OF 4 DIGIT CODE (NOW PRINTABLE)
         LA    R7,ONE(R7)          GET ADDR OF THE 3 SIGNIFICANT DIGITS
         LA    R3,SEVEN            LEN OF 3 BYTE CODE + 4
         BR    R6                  RETURN TO CALLER (SEGMENT2,3,4 CODE)
         EJECT
***********************************************************************
*        FIND DSNAME FOR SYSOUT DATA SET FROM SSOB                    *
***********************************************************************
DSNSYSO  EQU   *
         L     R7,OUTSOBSO         GET ADDR OF SSSO SECTION
         USING SSOBEXT,R7
         LA    R7,SSSODSN          ADDR OF SYSOUT DSNAME
         LA    R3,FORTY3           MAX LENGTH OF SYSOUT DSNAME MINUS 1
         B     CHKSIZE             GO DELETE ANY TRAILING BLANKS
         SPACE 3
***********************************************************************
*          FIND SERVICE ROUTINE NAME                                  *
***********************************************************************
SRVRTN   EQU   *                   GET NAME OF SERVICE ROUTINE
         L     R7,SAVSVRTN         ADDR OF SERVICE RTN NAME
         LH    R3,0(R7)            LENGTH OF VARIABLE
         LA    R3,FOUR4(R3)        ADD 4 TO LENGTH
         LA    R7,TWO2(R7)         ADJUST ADDR TO GET BY LL
         BR    R6                  BRANCH TO CALLER(SEGMENT2,3,4 CODE)
         SPACE 3
***********************************************************************
*                 FIND REMOTE STATION ID FROM SSOB                    *
***********************************************************************
DESTID   EQU   *
         L     R7,OUTSOBSO         GET ADDR OF SSSO SECTION
         USING SSOBEXT,R7
         LA    R7,SSSODEST         ADDR OF DEST ID
         LA    R3,SEVEN            MAX LEN OF DESTID MINUS 1
*                                  (THE SSOB PROVIDES SPACE FOR 8
*                                  CHARS, TSO SUPPORTS 7)
         B     CHKSIZE             GO DELETE ANY TRAILING BLANKS
         EJECT
***********************************************************************
*          FIND SECURITY EXIT MESSAGE                                 *
***********************************************************************
EXITMSG  EQU   *
         L     R7,OUTXMSG          ADDRESS OF SECURITY EXIT MSG
         LH    R3,0(R7)            LL FIELD OF USER'S MSG
         S     R3,TWO              REDUCE BY 2 TO GET USER'S MSG LENGTH
         AH    R3,FOUR             MSG LENGTH PLUS 4 - FOR SEG2 LEN FLD
         LA    R7,TWO2(R7)         POINT TO MSG TEXT - 2 PAST LL FIELD
         CLI   OUTMSGID,SECPUTLA   IS REQUEST FOR A PUTLINE FOR M328I?
         BE    SETSW               YES, SKIP SET OF PUTGET PROMPT SW
         CLI   OUTMSGID,SECPUTLB   IS REQUEST FOR PUTLINE FOR M333I?
         BE    SETSW               YES, SKIP SET OF PUTGET PROMPT SW
         OI    SAVSW,SAVPTGTP      NO, SET SWITCH FOR PUTGET PROMPT
SETSW    OI    SAVSW,SAVSECMG      SET SW FOR SECURITY MSG BEING ISSUED
         BR    R6                  RETURN TO CALLER (SEGMENT2,3,4 CODE)
         SPACE 3
***********************************************************************
*    FIND SYNAD MESSAGE                                               *
***********************************************************************
SYNAD    EQU   *
         L     R7,OUTSYNMS         ADDR OF SYNAD MSG
         LA    R7,50(R7)           START AT JOBNAME WITHIN SYNAD MSG
         LA    R3,SIXTY            SIZE OF SYNAD RCD + 4
         BR    R6                  RETURN TO CALLER (SEGMENT2,3,4 CODE)
         EJECT
***********************************************************************
*              FIND NAME OF THE FIB SVC'S FAILING MACRO               *
***********************************************************************
FIBMAC   EQU   *
         LA    R7,OUTMACN          ADDR OF MACRO'S NAME
         LA    R3,SEVEN            MAX LEN OF MACRO MINUS 1
         B     CHKSIZE             GO CALCULATE LENGTH
         SPACE 3
***********************************************************************
*      FIND SUBSYSTEM NAME FROM SSIB                                  *
***********************************************************************
SUBSYSTM EQU   *
         L     R3,OUTSOBH          ADDR OF SSOB HEADER
         USING SSOB,R3             SSOB HEADER ADDRESSABILITY
         L     R1,SSOBSSIB         GET ADDR SSIB
         USING SSIB,R1             SSIB ADDRESSABILITY
         LA    R7,SSIBSSNM         GET SUBSYSTEM NAME ADDR
*  FIND SIZE OF SUBSYS NAME
         LR    R3,R7               COPY ADDR OF SUBSYS NAME
         LA    R3,THREE(R3)        POINT AT END OF 4 BYTE FIELD
VARLNG  CLI    0(R3),C' '          BLANK CHAR
         BNE   NONBLANK            EXIT LOOP AT 1ST NON BLANK
         BCT   R3,VARLNG           LOOP UNTIL NON BLANK IS FOUND
NONBLANK SR    R3,R7               DIFF IS LENGTH MINUS 1
         LA    R3,FIVE5(R3)        ADD 5 TO GET LENGTH + 4
         BR    R6                  RETURN TO CALLER (SEGMENT2,3,4 CODE)
         DROP  R3
         EJECT
***********************************************************************
*    FOR DAIR ERRORS, ISSUE MSGS VIA IKJEFF18 (DAIRFAIL)              *
*    THIS COMMON ROUTINE IS USED BY SEVERAL COMMAND PROCESSORS.       *
***********************************************************************
DAIRERR  EQU   *
         MVC   DFDAPLP,OUTDAIR     PASS ADDR OF DAPL
         SPACE
         LA    R2,F18RC            PASS ADDR OF RC
         ST    R2,DFRCP            ...
         LH    R15,OUTRTCD         SAVE REG15 RETURN CODE
         ST    R15,F18RC           ...
         SPACE
         LA    R2,F18MW            POINT TO MSG WTR POINTER
         ST    R2,DFJEFF02         ...
         LA    R2,ZERO
         ST    R2,F18MW            TELL '18 THAT IKJEFF02 IS NOT LOADED
         SPACE
         LA    R2,F18ID            POINT TO CODE
         ST    R2,DFIDP            ...
         LA    R2,DFDAIR           PASS A CODE OF 1 - DAIR ERROR
         STH   R2,F18ID            ...
         SPACE
         B     SETUPDF             GO SETUP FOR DAIRFAIL TO ISSUE MSG
         EJECT
***********************************************************************
*    FOR DYNAMIC ALLOCATION ERRORS, ISSUE MESSAGES VIA                *
*    IKJEFF18 (DAIRFAIL). THIS COMMON ROUTINE IS USED BY              *
*    SEVERAL COMMAND PROCESSORS.                                      *
***********************************************************************
DYNALERR EQU   *
         L     R3,OUTDARB          GET ADDR REQUEST BLOCK
         ST    R3,DFS99RBP         STORE IN PARMLIST
         SPACE
         LA    R3,F18RC            ADDR OF WORD WITH CODE
         ST    R3,DFRCP            STORE ADDR IN PARMLIST
         LH    R3,OUTRTCD          PICK UP DYNAC RC
         ST    R3,F18RC            STORE RC
         SPACE
         LA    R3,F18MW            POINT TO MSG WTR ADDR
         ST    R3,DFJEFF02
         LA    R3,ZERO
         ST    R3,F18MW            TELL '18 THAT IKJEFF02 IS NOT LOADED
         SPACE
         LA    R3,F18ID            ADDR OF WORD WITH CALLER ID
         ST    R3,DFIDP            STORE ADDR IN PARMLIST
         LA    R3,DFSVC99          PASS A CODE OF 50-DYNALC ERROR
         STH   R3,F18ID            STORE CALLERS ID
         SPACE
         L     R3,OUTCPPL          ADDR CPPL
         ST    R3,DFCPPLP         STORE ADDR IN PARMLIST
         SPACE
***********************************************************************
*              INVOKE IKJEFF18 (DAIRFAIL) FROM SYS1.LINKLIB           *
***********************************************************************
SETUPDF  EQU   *
         TM    OUTFLAGS,KEY1       IN KEY1 ?
         BZ    GODAIRFL            NO, MODESET NOT NEEDED FOR KEY0
         SPACE
*      MODESET
         MODESET EXTKEY=SUPR       YES, GET IN KEY0
         SPACE
GODAIRFL EQU   *
         LA    R1,DFPARMS          GET ADDR OF PARM LIST
         LINK EP=IKJEFF18          GOTO DAIRFAIL RTN & ISSUE MSG
         SPACE
         TM    OUTFLAGS,KEY1       IN KEY1 PRIOR TO CALLING IKJCT467?
         BZ    RETURN              NO, NEED NOT GET IN KEY1 AGAIN
         SPACE
*      MODESET
         MODESET EXTKEY=SCHED      YES, GET IN KEY1 AGAIN
         SPACE
         B     RETURN              RETURN TO CALLER
         EJECT
***********************************************************************
*     INITIALIZE UNIQUE VSAMFAIL PARMLIST FIELDS FOR OPEN FAILURES    *
***********************************************************************
OPENFAIL EQU   *
         LA    R2,GFOPEN           GET 'OPEN' ID
         STH   R2,GFCALLID         INDICATE OPEN FAILURE
         SPACE
         L     R2,OUTACB           PICK UP ADDR OF ACB
         ST    R2,GFCBPTR          PASS ACB ADDR ON AN OPEN ERROR
         SPACE
         B     VSAMERR             GO ISSUE MESSAGE
         SPACE 3
***********************************************************************
*    INITIALIZE UNIQUE VSAMFAIL PARMLIST FIELDS FOR POINT FAILURES    *
***********************************************************************
BADPOINT EQU   *
         LA    R2,GFPOINT          GET 'POINT' ID
         STH   R2,GFCALLID         INDICATE POINT FAILURE
         SPACE
         L     R2,OUTRPL           PICK UP ADDR OF RPL
         ST    R2,GFCBPTR          PASS RPL ADDR ON A POINT FAILURE
         SPACE
         B     VSAMERR             GO ISSUE MESSAGE
         SPACE 3
***********************************************************************
*     INITIALIZE UNIQUE VSAMFAIL PARMLIST FIELDS FOR GET FAILURES     *
***********************************************************************
GETERROR EQU   *
         LA    R2,GFGET            PICK UP 'GET' ID
         STH   R2,GFCALLID         INDICATE GET FAILURE
         SPACE
         L     R2,OUTRPL           PICK UP ADDR OF RPL
         ST    R2,GFCBPTR          PASS RPL ADDR ON A GET FAILURE
         SPACE 3
***********************************************************************
*     FOR OPEN/CLOSE ERRORS, AND POINT/GET ERRORS WITH THE            *
*     SYSOUT DATASET, ISSUE THE APPROPRIATE MESSAGE VIA               *
*     IKJEFF19 (VSAMFAIL).                                            *
***********************************************************************
VSAMERR  EQU   *
         LH    R2,OUTRTCD          GET REG15 ERROR CODE
         ST    R2,GFRCODE          PASS RETURN CODE
         SPACE
         LA    R2,ZERO
         ST    R2,GF02PTR          ZERO SINCE IKJEFF02 NOT LOADED
         SPACE
         NI    GFBITS,OFF          ZERO SWITCHES
         OI    GFBITS,GFKEYN08     TURN ON SWITCH IF NOT KEY0 OR 8
         OI    GFBITS,GFSUBSYS     TURN ON SWITCH IF USE VSAM-SUBSYS
*                                     INTERFACE
         SPACE
         LA    R2,ZERO
         STC   R2,GFRESV1          ZERO RESERVED FIELD
         SPACE
         L     R2,OUTCPPL          PICK UP CPPL PTR
         ST    R2,GFCPPLP          PASS CPPL PTR
         SPACE
         LA    R2,ZERO
         ST    R2,GFECBP           ZERO ECB PTR FOR PUTLINE
         SPACE
         BAL   R6,DSNSYSO          GO FIND ADDR OF SYSOUT DATASET NAME,
*                                  THEN FIND LENGTH VIA CHKSIZE RTN.
*                                  ON RETURN:
*                                    R3 - LENGTH DSN PLUS 4
*                                    R7 - ADDR DSN
         LA    R2,FOUR4
         SR    R3,R2               SUBTRACT 4 TO GET DSN LENGTH
         STH   R3,GFDSNLEN         PASS DSN LENGTH
         ST    R7,GFDSNP           PASS PTR TO DSN
         SPACE
         LA    R2,ZERO
         ST    R2,GFECBP           ZERO ECB PTR
         STH   R2,GFPGMNL          ZERO PGM NAME LENGTH
         ST    R2,GFPGMNP          ZERO PGM NAME - DEFAULT IS CMDNAME
         ST    R2,GFRESV2          ZERO RESERVED FIELD
         ST    R2,GFRESV3          ZERO RESERVED FIELD
         SPACE
         LA    R2,GFPARMS          ADDR OF PARMLIST
         ST    R2,OUTWORK          SAVE IN OUTWORK
         LA    R1,OUTWORK          REG1 PTS TO ADDR OF GFPARMS
         SPACE
         LINK  EP=IKJEFF19         GO TO VSAMFAIL RTN & ISSUE MSG
         SPACE
         B     RETURN              RETURN TO CALLER
         EJECT
***********************************************************************
*        JES MSG 320 - DECIDE IF JOBID CAN BE INSERTED                *
***********************************************************************
JESM320I EQU   *                                               @ZM30982
         L     R3,OUTSOBH          ADDR OF SSOB HEADER         @ZM30982
         USING SSOB,R3             SSOB HEADER ADDRESSABILITY  @ZM30982
         L     R7,SSOBINDV         ADDR OF SSSO                @ZM30982
         USING SSOBEXT,R7          SSSO ADDRESSABILITY         @ZM30982
         CLC   SSSOJOBI(8),NOJOBID IS THERE A JOBID?           @ZM30982
         BE    NOJID320            NO, ISSUE MSG W/O           @ZM30982
         MVI   OUTMSGID,M320I      YES, ISSUE MSG W/           @ZM30982
         B     IMSGS               GO ISSUE MSG                @ZM30982
NOJID320 EQU   *                                               @ZM30982
         MVI   OUTMSGID,M320A      ISSUE MSG W/O ID            @ZM30982
         B     IMSGS               GO ISSUE MSG                @ZM30982
         SPACE 3
***********************************************************************
*       JES MSG 339 - DECIDE IF JOBID CAN BE INSERTED                 *
***********************************************************************
JESM339I EQU   *                                               @ZM30982
         L     R3,OUTSOBH          ADDR OF SSOB HEADER         @ZM30982
         USING SSOB,R3             SSOB HEADER ADDRESSABILITY  @ZM30982
         L     R7,SSOBINDV         ADDR OF SSSO                @ZM30982
         USING SSOBEXT,R7          SSSO ADDRESSABILITY         @ZM30982
         CLC   SSSOJOBI(8),NOJOBID IS THERE A JOBID?           @ZM30982
         BE    NOJID339            NO, ISSUE MSG W/O           @ZM30982
         MVI   OUTMSGID,M339A      YES, ISSUE MSG W/           @ZM30982
         B     IMSGS               ISSUE MSG                   @ZM30982
NOJID339 EQU   *                                               @ZM30982
         MVI   OUTMSGID,M339I      ISSUE MSG W/O ID            @ZM30982
         B     IMSGS               ISSUE MSG                   @ZM30982
         SPACE 3
***********************************************************************
*        JES MSG 343 - DECIDE IF JOBID CAN BE INSERTED                *
***********************************************************************
JESM343I EQU   *                                               @ZM30982
         L    R3,OUTSOBH           ADDR OF SSOB HEADER         @ZM30982
         USING SSOB,R3             SSOB HEADER ADDRESSABILITY  @ZM30982
         L    R7,SSOBINDV          ADDR OF SSSO                @ZM30982
         USING SSOBEXT,R7          SSSO ADDRESSABILITY         @ZM30982
         CLC   SSSOJOBI(8),NOJOBID IS THERE A JOBID?           @ZM30982
         BE    NOJID343            NO, ISSUE MSG W/O           @ZM30982
         MVI   OUTMSGID,M343I      YES, ISSUE MSG W/           @ZM30982
         B     IMSGS               ISSUE MSG                   @ZM30982
NOJID343 EQU   *                                               @ZM30982
         MVI   OUTMSGID,M343A      ISSUE MSG W/O ID            @ZM30982
         B     IMSGS               ISSUE MSG                   @ZM30982
         EJECT
***********************************************************************
*              PICK UP 'STAX' INSERT FOR MESSAGE                      *
***********************************************************************
STAX     EQU   *
         LA    R2,STAXMAC          ADDR SERVICE RTN NAME
         ST    R2,SAVSVRTN         SAVE FOR MSG INSERT
         B     PRNT313I            GO ISSUE MSG 313I
         SPACE
***********************************************************************
*            PICK UP 'STATUS' INSERT FOR MESSAGE                      *
***********************************************************************
STATUS   EQU   *
         LA    R2,STAT             ADDR SERVICE RTN NAME
         ST    R2,SAVSVRTN         SAVE FOR MSG INSERT
         B     PRNT313I            GO ISSUE MSG 313I
         SPACE
***********************************************************************
*            PICK UP 'ATTACH' INSERT FOR MESSAGE                      *
***********************************************************************
ATTACH   EQU   *
         LA    R2,ATTCH            ADDR SERVICE RTN NAME
         ST    R2,SAVSVRTN         SAVE FOR MSG INSERT
         B     PRNT313I            GO ISSUE MSG 313I
         SPACE
***********************************************************************
*                 CHECK PUTGET RETURN CODES                           *
***********************************************************************
PUTGC    EQU   *
         CLI   OUTRTCD+ONE,RC28    IS FAILURE FOR GETMAIN ?
         BE    PRNT312I            BRANCH IF YES
         LA    R2,PUTGET           ADDR OF SERVICE ROUTINE NAME
         ST    R2,SAVSVRTN         SAVE FOR FETCH OF NAME
         B     PRNT313I            ISSUE MESSAGE
         SPACE
***********************************************************************
*                  CHECK PARSE RETURN CODES                           *
***********************************************************************
PARS     EQU   *
         CLI   OUTRTCD+ONE,RC16    IS FAILURE FOR GETMAIN ?
         BE    PRNT312I            YES, ISSUE MSG FOR GETMAIN FAILURE
         LA    R2,PARSE            ADDR OF SERVICE ROUTINE NAME
         ST    R2,SAVSVRTN         STORE FOR FETCH ROUTINE
         B     PRNT313I            NO, NOT GETMAIN FAILURE
         SPACE
***********************************************************************
*               SAVE 'COMMAND SCAN' INSERT VARIABLE                   *
***********************************************************************
SCAN     EQU   *
         LA    R2,SCAN1            ADDR OF SERVICE ROUTINE NAME
         ST    R2,SAVSVRTN         STORE FOR INSERT LATER
         B     PRNT313I            ISSUE MESSAGE
         SPACE
***********************************************************************
*               SAVE 'ESTAE MACRO' INSERT VARIABLE                    *
***********************************************************************
STAERR   EQU   *
         LA    R2,STAE             ADDR OF  'ESTAE MACRO'
         ST    R2,SAVSVRTN         STORE FOR INSERT LATER
         B     PRNT313I            BRANCH
         SPACE 3
***********************************************************************
*              SET UP 'HELP' INSERT FOR MESSAGE                       *
***********************************************************************
HELPF    EQU   *
         LA    R2,HELP              ADDR OF SERVICE ROUTINE NAME
         ST    R2,SAVSVRTN          STORE FOR FETCH ROUTINE
         MVI   OUTMSGID,M318B       'HELP ENDED' MSG
         B     IMSGS                ISSUE MESSAGE
         EJECT
***********************************************************************
*  SET UP MSGID FOR 'NOT ENOUGH VIRTUAL STORAGE' MSG                  *
***********************************************************************
PRNT312I EQU   *                   'NOT ENOUGH VIRTUAL STORAGE TO
*                                  EXECUTE'
         TM    OUTSW,SUBCMODE      WAS IT A CMD OR SUBCMD FAILURE
         BZ    COMDFAIL            BRANCH, IT WAS A CMD.
         MVI   OUTMSGID,M312S      MSG ID,SUBCOMMAND FAILURE
         B     IMSGS               ISSUE MESSAGE
COMDFAIL MVI   OUTMSGID,M312C      MSG ID, COMMAND FAILURE
         B     IMSGS               ISSUE MESSAGE
         SPACE
***********************************************************************
*    SET UP MSGID FOR 'CMD SYSTEM ERROR' MSG                          *
***********************************************************************
PRNT313I EQU   *                   'COMMAND SYSTEM ERROR   '
         MVI   OUTMSGID,M313I      ID FOR MESSAGE IKJ56313I
         B     IMSGS               ISSUE MESSAGE
         SPACE
         EJECT
***********************************************************************
*                                                                     *
*                          D E C L A R E S                            *
*                                                                     *
***********************************************************************
         DS    0F
PATCH67  DC    30C'ZAP67'          PATCH AREA FOR F.E. ZAPS
NOJOBID  DC    D'0'                NO JOBID IN SSSOJOBI        @ZM30982
FOUR     DC    H'4'                BASE ADDR ADJUSTMENT
FIVE     DC    H'5'                ADJUSTMENT
SIX      DC    H'6'                BASE ADDR ADJUSTMENT
TEN      DC    H'10'               SET OFFSETS FOR MSG SEGMENT
TWELVE   DC    H'12'               USE TO MULTIPLY, AND AS A LENGTH
FORTY2   DC    H'42'               CONSTANT
HUNDRED  DC    H'100'              SUBTRACT FROM MSGID ON INFO MSG
*
ONESEG   DC    F'1'                SEGMENT NO. FOR OUTPUT LINE
TWOSEG   DC    F'2'                SEGMENT NO. FOR OUTPUT LINE
TWO      EQU   TWOSEG              USED FOR SUBTRACTION
THREESEG DC    F'3'                SEGMENT NO. FOR OUTPUT LINE
FOURSEG  DC    F'4'                SEGMENT NO. FOR OUTPUT LINE
SEGAOFST DC    H'0'                OFFSET FOR SEGMENT A IN 'OLD' IS
*                                  ALWAYS 0
         DS    0F
SUBPOOL1 DC    X'01000000'         INDICATE SP 1 FOR FREEMAIN
TABLE    EQU   *                   TRANSLATE TABLE FOR RETURN CODES
         DC    C'0123456789ABCDEF' TRANSLATE TABLE
VMSGCON  DC    V(IKJCT4MC)         ADDR OF MESSAGE CONSTANTS CSECT
*
         EJECT
***********************************************************************
*     PUTGET/PUTLINE LIST FORMS                                       *
***********************************************************************
PUTLINL  PUTLINE  MF=L             LIST FORM OF PUTLINE MACRO
ENDPUTLN EQU   *
PUTLSIZE EQU   ENDPUTLN-PUTLINL    LENGTH OF PUTLINE MACRO
         SPACE
PUTGL    PUTGET MF=L               LIST FORM OF PUTGET MACRO
ENDPTGT  EQU   *
PUTGSIZE EQU   ENDPTGT-PUTGL       LENGTH OF PUTGET MACRO
         SPACE 6
***********************************************************************
*              CONSTANTS FOR MODE MSG 'OLD' & SEG1
***********************************************************************
MODEMSG  DC    F'1',4F'0',H'13',H'0',C'         '      MODE MSG CONST
MODELN   EQU   *-MODEMSG           LENGTH
         SPACE 2
         EJECT
***********************************************************************
*                                                                     *
*        EXECUTABLE 'MOVE INSTRUCTIONS' FOR THE CONSTANT AND THE      *
*        VARIABLE PORTIONS OF THE MESSAGE INTO THE PROPER SEGMENTS    *
*        WHICH THE 'OLD' POINTS TO.                                   *
*                                                                     *
***********************************************************************
MVCTEXT  MVC   MSGSEGAT(0),ZERO(R2)   MOVE SEG A TEXT INTO OUT LINE
MVCVAR1  MVC   MSGSEGBT(0),ZERO(R7)   MOVE SEG B VARIABLE INTO OUT L
MVCVAR2  MVC   MSGSEGCT(0),ZERO(R7)   MOVE SEG C VARIABLE INTO OUT L
MVCVAR3  MVC   MSGSEGDT(0),ZERO(R7)   MOVE SEG D VARIABLE INTO OUT L
         EJECT
***********************************************************************
*  MSG INSERTS - SERVICE ROUTINE NAMES                                *
***********************************************************************
PARSE    DC    H'5'                INSERT LENGTH
         DC    C'PARSE'            INSERT NAME
         SPACE
PUTGET   DC    H'6'                INSERT LENGTH
         DC    C'PUTGET'           INSERT NAME
         SPACE
SCAN1    DC    H'12'               INSERT LENGTH
         DC    C'COMMAND SCAN'     INSERT NAME
         SPACE
STAE     DC    H'11'               INSERT LENGTH
         DC    C'ESTAE MACRO'      INSERT NAME
         SPACE
HELP     DC    H'4'                INSERT LENGTH
         DC    C'HELP'             INSERT NAME
         SPACE
ATTCH    DC     H'6'               INSERT LENGTH
         DC    C'ATTACH'           INSERT NAME
         SPACE 2
STAXMAC  DC    H'10'               INSERT LENGTH
         DC    C'STAX MACRO'       INSERT NAME
         SPACE 2
STAT     DC    H'6'                INSERT LENGTH
         DC    C'STATUS'           INSERT NAME
         EJECT
***********************************************************************
*                                                                     *
*                                                                     *
*            SAVE AREA AND WORK AREA DSECT                            *
*                                                                     *
*                                                                     *
***********************************************************************
SAVEAREA DSECT
         SPACE 2
***********************************************************************
*                  REGISTER SAVE AREA                                 *
***********************************************************************
         DS    F                   REGISTER
SAVEBACK DS    F                   BACKWARD POINTER
SAVEFORW DS    F                   FORWARD POINTER
         DS    15F                 REGISTERS
         SPACE 2
***********************************************************************
*              OUTPUT LINE DESCRIPTORS (OLD) AND MESSAGE SEGMENTS     *
***********************************************************************
SAVOUTL1 DS    68F                  OLD FOR 1ST LEVEL MESSAGE
SAVOUTL2 DS    68F                  OLD FOR 2ND LEVEL MESSAGE
         SPACE 2
***********************************************************************
*             SWITCHES                                                *
***********************************************************************
SAVSW    DS    XL1                 SWITCH
SAVSWCLR EQU   X'00'               CLEAR SWITCH
SAVPUTL1 EQU   X'04'               ONE UNSUCCESSFUL PUTLINE-AVOID LOOP
SAVPTGTP EQU   X'08'               INDICATE PUTGET (PROMPT),NOT PUTLINE
SAVPGPOF EQU   X'F7'               TURN OFF PUTGET (PROMPT) REQ BIT
SAVSECMG EQU   X'10'               SECURITY EXIT MESSAGE PROCESSED
SAVMULTI EQU   X'40'               MULTI LEVEL
SAVMLVOF EQU   X'BF'               TURN OFF MULTI LEVEL SW
SAV2LVL  EQU   X'80'               2ND LEVEL MSG BEING PROCESSED
SAV2LVOF EQU   X'7F'               TURN OFF 2ND LEVEL BIT
SAVSET   EQU   X'C0'               SET BOTH ABOVE CONDITIONS
         SPACE 2
***********************************************************************
*             WORK AREAS AND MISCELLANEOUS                            *
***********************************************************************
SAVRTCD  DS    D                   UNPACKED DECIMAL RETURN CODE
         DS    0F
SAVSVRTN DS    A                   ADDR OF SERVICE ROUTINE VARIABLE
         SPACE 2
***********************************************************************
*            LIST FORMS                                               *
***********************************************************************
         DS    0F
SAVPUTGT PUTGET MF=L               PUTGET LIST - IN GETMAIN AREA
         SPACE 2
SAVPUTL  PUTLINE MF=L              PUTLINE LIST - IN GETMAIN AREA
         SPACE  5
***********************************************************************
*     CORE FOR VSAMFAIL PARAMETER LIST                                *
***********************************************************************
         IKJEFFGF
         SPACE  5
***********************************************************************
*     CORE FOR DAIRFAIL PARAMETER LIST
***********************************************************************
         IKJEFFDF    DFDSECT=NO
         SPACE 3
***********************************************************************
*        AREAS POINTED TO BY THE DAIRFAIL PARAMETER LIST              *
***********************************************************************
F18RC    DS    F                    REG15 RETURN CODE FROM DAIR/DYNALC
F18MW    DS    F                    ADDR OF IKJEFF02 OR ZEROS
F18ID    DS    H                    ID FOR DAIR OR DYNAMIC ALLOC
         SPACE 5
SAVLTH   EQU   *-SAVEAREA
         EJECT
***********************************************************************
*               MAP FOR MESSAGE CHARACTERISTICS -                     *
*               MAPS AN ENTRY IN THE MGCHAR TABLE BELOW               *
***********************************************************************
MSGCHAR  DSECT
         DS    0F
MSGCSEGN DS    XL1                 THIS FIELD IS NOT REFERENCED BY
*                                  THE PROGRAM, IT IS MERELY A
*                                  PLACEHOLDER WHICH INDICATES THE
*                                  NUMBER OF SEGMENTS THAT COM-
*                                  PRISE THE MESSAGE.
*                                  THE CODE IS AS FOLLOWS:
*
*                             00 -1 SEGMENT  (BASE OR CONSTANT TEXT)
*                             04 -2 SEGMENTS (1 VARIABLE INSERT)
*                             08 -3 SEGMENTS (2 VARIABLE INSERTS)
*                             0C -4 SEGMENTS (3 VARIABLE INSERTS)
         SPACE
MSGCVAR1 DS    XL1                 1ST VARIABLE - INDICATES THE
*                                  VARIABLE FIRST TO BE INSERTED
*                                  IN THE MESSAGE.  THE VALUES
*                                  ASSIGNED TO THE VARIABLES ARE
*                                  USED TO INDEX INTO BRTABVI TO
*                                  FIGURE THE VARIABLE TO INSERT.
*                                  THE ASSIGNMENTS ARE AS FOLLOWS:
*                                          00 - NONE
*                                          04 - JOBNAME
*                                          08 - CLASSNAME
*                                          0C - USERID
*                                          10 - COMMAND
*                                          14 - REGISTER RETURN CODE
*                                          18 - RETURN CODE
*                                          1C - DSNAME-PRINT/SAVE
*                                          20 - REMOTE STATION ID
*                                          24 - SERVICE ROUTINE
*                                          28 - UNUSED
*                                          2C - SYSTEM SUPPLIED JOBID
*                                          30 - RPL CODE
*                                          34 - USER SUPPLIED JOBID
*                                          38 - SECURITY EXIT MSG
*                                          3C - UNUSED
*                                          40 - FIB MACRO
*                                          44 - SUBSYSTEM
*                                          48 - DSNAME-SYSOUT DS
*                                          4C - MEMBER NAME
*                                          50 - SYNAD INFO-PRINT/SAVE
         SPACE
MSGCVAR2 DS    XL1                 2ND VARIABLE - INDICATES THE
*                                  SECOND INSERTED VARIABLE.  THE
*                                  VALUES GIVEN TO THE VARIABLES
*                                  ARE AS ABOVE
         SPACE
MSGCVAR3 DS    XL1                 3RD VARIABLE - INDICATES THE
*                                  THIRD INSERTED VARIABLE.  THE
*                                  VALUES GIVEN TO THE VARIABLES
*                                  ARE AS ABOVE
         SPACE
MSGCMSGP DS    AL4                 ADDR OF MESSAGE CONSTANTS
         SPACE
MSGC2LVP DS    AL4                 ADDR OF CHARACTERISTICS OF RE-
*                                  LATED 2ND LEVEL MESSAGE
         EJECT
***********************************************************************
*               MESSAGE CHARACTERISTICS - THE FOLLOWING               *
*               CONSTANTS DESCRIBE THE CHARACTERISTICS                *
*               OF THE MESSAGES ISSUED BY THIS ROUTINE.               *
*               THE 'MSGCHAR' DSECT ABOVE THE CONSTANTS               *
*               DESCRIBES THEIR FIELDS AS WELL AS PROVIDING           *
*               A MAP FOR THE AREA.                                   *
***********************************************************************
IKJCT4MC CSECT
         SPACE 3
***********************************************************************
*               1ST LEVEL MESSAGE CHARACTERISTICS                     *
***********************************************************************
         SPACE
*              NO.                       ADDR 2ND MSG       MSG
*              SEG.  VARIABLES MSG ADDR  CHARACTERISTICS    ID
*              ----  --------- --- ----  ---------------    --
*        SPACE 2
MGCHAR   DS    0F
         DS    12C                                          100
         DS    12C                                          101
         DC    X'04',X'040000',A(MSG340),A(0)               102
         DC    X'0C',X'104014',A(MSG342A),A(MGC342S1)       103
         DC    X'08',X'101400',A(MSG342B),A(MGC342S1)       104
         DS    12C                                          105
         DC    X'04',X'1C0000',A(MSG309),A(0)               106
         DC    X'04',X'1C0000',A(MSG357),A(0)               107
         DC    X'04',X'040000',A(MSG339A),A(0)              108@ZM30982
         DC    X'08',X'042C00',A(MSG339),A(0)               109@ZM30982
         DC    X'04',X'1C0000',A(MSG310),A(0)               110
         DC    X'00',X'000000',A(MSG312A),A(0)              111
         DC    X'00',X'000000',A(MSG312),A(0)               112
         DC    X'08',X'241400',A(MSG313),A(0)               113
         DC    X'08',X'101800',A(MSG318),A(MGC318S1)        114
         DC    X'08',X'241800',A(MSG318A),A(0)              115
         DC    X'08',X'101800',A(MSG318),A(MGC318S3)        116
         DC    X'08',X'101800',A(MSG318A),A(0)              117
         DC    X'0C',X'042C08',A(MSG320),A(0)               118@ZM30982
         DC    X'04',X'0C0000',A(MSG321),A(MGC321S1)        119
         DC    X'08',X'040800',A(MSG320A),A(0)              120@ZM30982
         DC    X'08',X'1C4C00',A(MSG325A),A(0)              121
         DC    X'04',X'1C0000',A(MSG325),A(0)               122
         DC    X'04',X'380000',A(MSG328A),A(MGC328S1)       123
         DC    X'04',X'380000',A(MSG328I),A(0)              124
         DS    12C                                          125
         DC    X'04',X'1C0000',A(MSG330),A(MGC330S1)        126
         DC    X'04',X'040000',A(MSG343A),A(0)              127@ZM30982
         DC    X'00',X'000000',A(MSG323),A(0)               128
         DC    X'04',X'040000',A(MSG350),A(0)               129
         DC    X'04',X'200000',A(MSG351),A(0)               130
         DC    X'08',X'042C00',A(MSG343),A(0)               131
         DC    X'04',X'480000',A(MSG344),A(MGC344S1)        132
         DC    X'08',X'441400',A(MSG345),A(MGC345S1)        133
         DC    X'08',X'441400',A(MSG346),A(MGC346S1)        134
         DC    X'04',X'440000',A(MSG347),A(MGC347S1)        135
         DC    X'04',X'040000',A(MSG348),A(MGC348S1)        136
         DC    X'08',X'043400',A(MSG349),A(MGC349S1)        137
         DC    X'04',X'140000',A(MSG353),A(MGC353S1)        138
         DS    12C                                          139
         DC    X'04',X'1C0000',A(MSG355),A(MGC355S1)        140
         DS    12C                                          141
         DC    X'04',X'140000',A(MSG332),A(0)               142
         DC    X'04',X'380000',A(MSG333),A(0)               143
         DS    12C                                          144
         DC    X'04',X'100000',A(MSG341),A(0)               145
         DC    X'04',X'140000',A(MSG358),A(MGC358S1)        146
         DS    12C                                          147
         DS    12C                                          148
         EJECT
***********************************************************************
*               2ND  LEVEL MESSAGE CHARACTERISTICS                    *
***********************************************************************
         SPACE
*               NO.
*               SEG. VARIABLES  MSG ADDR
*               ---- ---------  --- ----
         SPACE
         DS    0F
MGC318S1 DC    X'04',X'1C0000',A(MSG318S1)    2ND LEVEL CHARACTERISTICS
MGC318S3 DC    X'04',X'1C0000',A(MSG318S3)    2ND LEVEL CHARACTERISTICS
MGC321S1 DC    X'00',X'000000',A(MSG321S1)    2ND LEVEL CHARACTERISTICS
MGC328S1 DC    X'00',X'000000',A(MSG328S1)    2ND LEVEL CHARACTERISTICS
MGC330S1 DC    X'00',X'000000',A(MSG330S1)    2ND LEVEL CHARACTERISTICS
MGC342S1 DC    X'00',X'000000',A(MSG342S1)    2ND LEVEL CHARACTERISTICS
MGC344S1 DC    X'00',X'000000',A(MSG344S1)    2ND LEVEL CHARACTERISTICS
MGC345S1 DC    X'00',X'000000',A(MSG345S1)    2ND LEVEL CHARACTERISTICS
MGC346S1 DC    X'00',X'000000',A(MSG346S1)    2ND LEVEL CHARACTERISTICS
MGC347S1 DC    X'00',X'000000',A(MSG347S1)    2ND LEVEL CHARACTERISTICS
MGC348S1 DC    X'00',X'000000',A(MSG348S1)    2ND LEVEL CHARACTERISTICS
MGC349S1 DC    X'00',X'000000',A(MSG349S1)    2ND LEVEL CHARACTERISTICS
MGC353S1 DC    X'00',X'000000',A(MSG353S1)    2ND LEVEL CHARACTERISTICS
MGC355S1 DC    X'04',X'500000',A(MSG355S1)    2ND LEVEL CHARACTERISTICS
MGC358S1 DC    X'00',X'000000',A(MSG358S1)    2ND LEVEL CHARACTERISTICS
         EJECT
***********************************************************************
*                                                                     *
*                   MESSAGE CSECT                                     *
*                                                                     *
*      THE FOLLOWING CONTAINS THE CONSTANTS NEEDED FOR ALL FIRST      *
*      AND SECOND LEVEL MESSAGES.                                     *
*          1  THE FIRST LINE FOR EACH MESSAGE CONTAINS THE            *
*             TEXT LENGTH                                             *
*          2  THE SECOND (AND POSSIBLY THIRD) LINE CONTAINS           *
*             THE TEXT MINUS ANY VARIABLE INSERTS                     *
*          3  THE SUCCEEDING LINES CONTAIN THE OFFSET INTO THE        *
*             MESSAGE TEXT WHERE THE VARIABLES WILL BE PLACED         *
*                                                                     *
***********************************************************************
IKJCT4MC CSECT
         SPACE 3
MSG309   DC    H'34'
         DC    C'IKJ56309I UNABLE TO OPEN DATA SET '
         DC    X'0022'
         SPACE
MSG310   DC    H'70'
         DC    C'IKJ56310I INVALID DATA SET NAME,  EXCEEDS 44 '
         DC    C'CHARACTERS WHEN QUALIFIED'
         DC    X'0021'
         SPACE
MSG312   DC    H'55'
         DC    C'IKJ56312I NOT ENOUGH VIRTUAL STORAGE TO EXECUTE '
         DC    C'COMMAND'
         SPACE
MSG312A  DC    H'58'
         DC    C'IKJ56312I NOT ENOUGH VIRTUAL STORAGE TO EXECUTE '
         DC    C'SUBCOMMAND'
         SPACE
MSG313   DC    H'45'
         DC    C'IKJ56313I COMMAND SYSTEM ERROR -  ERROR CODE '
         DC    X'0021'
         DC    X'002E'
         SPACE
MSG318A  DC    H'49'
         DC    C'IKJ56318I  ENDED DUE TO ERROR, SYSTEM ABEND CODE '
         DC    X'000A'
         DC    X'0031'
         SPACE
MSG318   DC    H'50'
         DC    C'IKJ56318I  ENDED DUE TO ERROR, SYSTEM '
         DC    C'ABEND CODE +'
         DC    X'000A'
         DC    X'0031'
         SPACE
MSG318S1 DC    H'75'
         DC    C'IKJ56318I NOT ENOUGH DIRECT ACCESS SPACE TO '
         DC    C'CONTAIN ALL RECORDS IN DATASET '
         DC    X'004B'
         SPACE
MSG318S3 DC    H'49'
         DC    C'IKJ56318I INVALID PASSWORD SPECIFIED '
         DC    C'FOR DATASET '
         DC    X'0031'
         SPACE
MSG320   DC    H'45'                                           @ZM30982
        DC    C'IKJ56320I NO HELD OUTPUT FOR JOB () IN CLASS ' @ZM30982
         DC    X'0021'                                         @ZM30982
         DC    X'0022'                                         @ZM30982
         DC    X'002D'                                         @ZM30982
         SPACE
MSG320A  DC    H'43'                                           @ZM30982
         DC    C'IKJ56320I NO HELD OUTPUT FOR JOB  IN CLASS '  @ZM30982
         DC    X'0021'                                         @ZM30982
         DC    X'002B'                                         @ZM30982
         SPACE
MSG321   DC    H'38'
         DC    C'IKJ56321I COMMAND NOT AUTHORIZED FOR +'
         DC    X'0025'
         SPACE
MSG321S1 DC    H'62'
         DC    C'IKJ56321I YOUR INSTALLATION MUST AUTHORIZE USE '
         DC    C'OF THIS COMMAND'
         SPACE
MSG323   DC    H'28'
         DC    C'IKJ56323I INVALID SUBCOMMAND'
         SPACE
MSG325   DC    H'16'
         DC    C'IKJ56325I  SAVED'
         DC    X'000A'
         SPACE
MSG325A  DC    H'18'
         DC    C'IKJ56325I () SAVED'
         DC    X'000A'
         DC    X'000B'
         SPACE
MSG328A  DC    H'11'
         DC    C'IKJ56328A +'
         DC    X'000A'
         SPACE
MSG328S1 DC    H'43'
         DC    C'IKJ56328A ENTER REPLY FOR INSTALLATION EXIT'
         SPACE
MSG328I  DC    H'10'
         DC    C'IKJ56328I '
         DC    X'000A'
         SPACE
MSG330   DC    H'51'
         DC    C'IKJ56330I ORGANIZATION OF DATA SET  NOT '
         DC    C'ACCEPTABLE+'
         DC    X'0023'
         SPACE
MSG330S1 DC    H'56'
         DC    C'IKJ56330I ORGANIZATION MUST BE SEQUENTIAL'
         DC    C' OR PARTITIONED'
         SPACE
MSG332   DC    H'59'
         DC    C'IKJ56332I UNABLE TO DIAGNOSE INSTALLATION '
         DC    C'EXIT RETURN CODE '
         DC    X'003B'
         SPACE
MSG333   DC    H'68'
         DC    C'IKJ56333I UNABLE TO PROMPT FOR REPLY TO '
         DC    C'INSTALLATION EXIT MESSAGE '''''
         DC    X'0043'
         SPACE
MSG339   DC    H'36'                                           @ZM30982
         DC    C'IKJ56339I NO HELD OUTPUT FOR JOB () '         @ZM30982
         DC    X'0021'                                         @ZM30982
         DC    X'0022'                                         @ZM30982
         SPACE
MSG339A  DC    H'33'                                           @ZM30982
         DC    C'IKJ56339I NO HELD OUTPUT FOR JOB '            @ZM30982
         DC    X'0021'                                         @ZM30982
         SPACE
MSG340   DC    H'24'
         DC    C'IKJ56340I JOB  NOT FOUND'
         DC    X'000E'
         SPACE
MSG341   DC    H'54'
         DC    C'IKJ56341I  COMMAND INVALID DUE TO CONFLICTING '
         DC    C'KEYWORDS'
         DC    X'000A'
         SPACE
MSG342A  DC    H'53'
         DC    C'IKJ56342I  COMMAND ENDED DUE TO FIB SVC  '
         DC    C'ERROR CODE +'
         DC    X'000A'
         DC    X'0028'
         DC    X'0034'
         SPACE
MSG342B  DC    H'52'
         DC    C'IKJ56342I  COMMAND ENDED DUE TO FIB SVC '
         DC    C'ERROR CODE +'
         DC    X'000A'
         DC    X'0033'
         SPACE
MSG342S1 DC    H'68'
         DC    C'IKJ56342I REENTER COMMAND, THEN IF ERROR CALL '
         DC    C'YOUR SYSTEM PROGRAMMER'
         SPACE
MSG343   DC    H'58'                                           @ZM30982
         DC    C'IKJ56343I NO HELD OUTPUT FOR JOB () IN '      @ZM30982
         DC    C'CLASS(ES) REQUESTED'                          @ZM30982
         DC    X'0021'                                         @ZM30982
         DC    X'0022'                                         @ZM30982
         SPACE
MSG343A  DC    H'56'                                           @ZM30982
         DC    C'IKJ56343I NO HELD OUTPUT FOR JOB  IN '        @ZM30982
         DC    C'CLASS(ES) REQUESTED'                          @ZM30982
         DC    X'0021'                                         @ZM30982
         SPACE
MSG344   DC    H'72'
         DC    C'IKJ56344I DATA SET  SKIPPED, INTERRUPTED '
         DC    C'DURING PREVIOUS OUTPUT COMMAND+'
         DC    X'0013'
         SPACE
MSG344S1 DC    H'95'
         DC    C'IKJ56344I IF "KEEP" WAS SPECIFIED, RETRIEVE '
         DC    C'THE DATA SET BY REENTERING THE COMMAND '
         DC    C'WITH "BEGIN"'
         SPACE
MSG345   DC    H'51'
         DC    C'IKJ56345I  SUBSYSTEM INTERFACE ERROR, RETURN '
         DC    C'CODE +'
         DC    X'000A'
         DC    X'0032'
         SPACE
MSG345S1 DC    H'68'
         DC    C'IKJ56345I REENTER COMMAND, THEN IF ERROR CALL '
         DC    C'YOUR SYSTEM PROGRAMMER'
         SPACE
MSG346   DC    H'41'
         DC    C'IKJ56346I  SUBSYSTEM ERROR, RETURN CODE +'
         DC    X'000A'
         DC    X'0028'
         SPACE
MSG346S1 DC    H'68'
         DC    C'IKJ56346I REENTER COMMAND, THEN IF ERROR CALL '
         DC    C'YOUR SYSTEM PROGRAMMER'
         SPACE
MSG347   DC    H'49'
         DC    C'IKJ56347I COMMAND FAILED -  SUBSYSTEM NOT '
         DC    C'ACTIVE+'
         DC    X'001B'
         SPACE
MSG347S1 DC    H'40'
         DC    C'IKJ56347I RETRY WHEN SUBSYSTEM IS ACTIVE'
         SPACE
MSG348   DC    H'75'
         DC    C'IKJ56348I DUPLICATE JOBNAMES , CORRECT'
         DC    C' JOBNAME(JOBID) COMBINATION REQUIRED+'
         DC    X'001D'
         SPACE
MSG348S1 DC    H'61'
         DC    C'IKJ56348I STATUS COMMAND MAY BE USED TO '
         DC    C'OBTAIN A UNIQUE JOBID'
         SPACE
MSG349   DC    H'37'
         DC    C'IKJ56349I JOB () COMBINATION INVALID+'
         DC    X'000E'
         DC    X'000F'
         SPACE
MSG349S1 DC    H'61'
         DC    C'IKJ56349I STATUS COMMAND MAY BE USED TO '
         DC    C'OBTAIN A UNIQUE JOBID'
         SPACE
MSG350   DC    H'56'
         DC    C'IKJ56350I UNABLE TO PROCESS JOB  AT THIS TIME,'
         DC    C' TRY LATER'
         DC    X'0020'
         SPACE
MSG351   DC    H'36'
         DC    C'IKJ56351I INVALID REMOTE STATION ID '
         DC    X'0024'
         SPACE
MSG353   DC    H'65'
         DC    C'IKJ56353I SSOBRETN FIELD FROM SUBSYSTEM '
         DC    C'IS  - UNABLE TO DIAGNOSE+'
         DC    X'002B'
         SPACE
MSG353S1 DC    H'68'
         DC    C'IKJ56353I REENTER COMMAND, THEN IF ERROR CALL '
         DC    C'YOUR SYSTEM PROGRAMMER'
         SPACE
MSG355   DC    H'31'
         DC    C'IKJ56355I DATA SET  NOT USABLE+'
         DC    X'0013'
         SPACE
MSG355S1 DC    H'26'
         DC    C'IKJ56355I I/O SYNAD ERROR '
         DC    X'001A'
         SPACE
MSG357   DC    H'71'
         DC    C'IKJ56357I DATA SET  PARTITIONED,'
         DC    C' NO MEMBER NAME GIVEN - "TEMPNAME" USED'
         DC    X'0013'
         SPACE
MSG358   DC    H'51'
         DC    C'IKJ56358I INVALID SEARCH ARGUMENTS, SSOBRETN '
         DC    C'CODE +'
         DC    X'0032'
         SPACE
MSG358S1 DC    H'68'
         DC    C'IKJ56358I REENTER COMMAND, THEN IF ERROR CALL '
         DC    C'YOUR SYSTEM PROGRAMMER'
         EJECT
***********************************************************************
* MAPPING OF THE OUTPUT LINE DESCRIPTOR (OLD)                         *
***********************************************************************
OLDMAP   DSECT                MAP OF OUTPUT LINE FOR THE MAXIMUM
*                             LENGTH MESSAGE
OLDNXTLV DS    A                   LINK TO OLD FOR NEXT LEVEL
OLDSEGNO DS    F                   NO. OF SEGMENTS
OLDSEGA  DS    A                   ADDR OF SEGMENT A
OLDSEGB  DS    A                   ADDR OF SEGMENT B
OLDSEGC  DS    A                   ADDR OF SEGMENT C
OLDSEGD  DS    A                   ADDR OF SEGMENT D
         SPACE 5
***********************************************************************
*        THIS ENDS THE MAP OF THE OLD.  BELOW ARE AREAS POINTED       *
*        TO BY THE OLD FIELDS : OLDSEGA, OLDSEGB, OLDSEGC, OLDSEGD.   *
*        TO PROCESS MORE THAN 4 SEGMENTS, THE MAP MUST BE EXTENDED,   *
*        AND NEW CODE ADDED.                                          *
***********************************************************************
MSGSEGAL DS    H                   SEGMENT A LENGTH (TEXT + 4)
MSGSEGAO DS    H                   SEGMENT A OFFSET
MSGSEGAT DS    22F                 SEGMENT A TEXT
*
MSGSEGBL DS    H                   SEGMENT B LENGTH (TEXT + 4)
MSGSEGBO DS    H                   SEGMENT B OFFSET
MSGSEGBT DS    12F                 SEGMENT B TEXT
*
MSGSEGCL DS    H                   SEGMENT C LENGTH (TEXT + 4)
MSGSEGCO DS    H                   SEGMENT C OFFSET
MSGSEGCT DS    12F                 SEGMENT C TEXT
*
MSGSEGDL DS    H                   SEGMENT D LENGTH (TEXT + 4)
MSGSEGDO DS    H                   SEGMENT D OFFSET
MSGSEGDT DS    12F                 SEGMENT D TEXT
MSGLTH   EQU   *-OLDMAP            LENGTH OF MAP
         EJECT
***********************************************************************
*    MAPPING OF PDE                                                   *
***********************************************************************
PDE      DSECT                     MAP OF ANY IKJIDENT-LIKE PDE
PDEAD    DS    A                   ADDR OF MAIN ITEM
PDELEN   DS    H                   LENGTH OF MAIN ITEM
PDEFLGS  DS    H                   FLAGS, ETC
PDEAD2   DS    A                   ADDR OF 2ND ITEM
PDELEN2  DS    H                   LENGTH OF 2ND ITEM
         EJECT
         IKJPGPB                   PUTGET PARAMETER BLOCK
         EJECT
         IKJCPPL
         EJECT
         IKJPSCB
         EJECT
         IEFJSSOB    (SO),CONTIG=NO
         EJECT
         IEFJSSIB
         EJECT
         IKJOCMTB
         END  IKJCT467
