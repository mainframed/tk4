         TITLE ' IKJCT471 OUTPUT CP **PUT ROUTINE**                    *
                        '
IKJCT471 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKJCT471  78.048'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
         MVC   @PC00001(4),0(@01)                                  0001
*                                      FOR EASIER IDENTIFICATION     */
*                                                                  0027
*/********************************************************************/
*/*                                                                  */
*/*                                                                  */
*/*              BEGIN   CODE                                        */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0027
*   OCMTBPTR=OUTP;                  /* BASE OUTCOMTB ON REG          */
         L     @10,@PC00001                                        0027
         L     OCMTBPTR,OUTP(,@10)                                 0027
*   DCBPTR=OUTDCB(STRCTNUM);        /* BASE DCB DSECT                */
         L     @10,STRCTNUM(,OCMTBPTR)                             0028
         MH    @10,@CH00519                                        0028
         L     DCBPTR,OUTDCB-20(@10,OCMTBPTR)                      0028
*   DCBSYNA=ADDR(SYNADEXT);         /* PUT SYNAD EXIT ADDR IN DCB    */
         LA    @09,SYNADEXT                                        0029
         STCM  @09,7,DCBSYNA+52(DCBPTR)                            0029
*   SWITCHES=OFF;                   /* INITIALIZE SWITCHES TO ZERO   */
         MVI   SWITCHES,B'00000000'                                0030
*   BUFADR=OUTBUFA(STRCTNUM);       /* SAVE PUT BUFFER ADDR          */
         L     BUFADR,OUTBUFA-20(@10,OCMTBPTR)                     0031
*   BUFLEN=OUTBUFL(STRCTNUM);       /* SAVE PUT BUFFER LENGTH        */
         LH    BUFLEN,OUTBUFL-20(@10,OCMTBPTR)                     0032
*   AGAIN=YES;                      /* ALLOW FIRST TIME THROUGH LOOP */
         OI    AGAIN,B'10000000'                                   0033
*                                                                  0034
*/********************************************************************/
*/*    THE FOLLOWING 'DOWHILE' LOOP:                                 */
*/*          MOVES A RECORD TO THE OUTPUT BUFFER                     */
*/*               (EITHER BLANK LINE, INTERRUPT MSG, OR SYSOUT RCD)  */
*/*          ISSUES A PUT FOR THE OUTPUT BUFFER                      */
*/*          UPDATES 'PUT' COUNTERS                                  */
*/*                                                                  */
*/*    NOTE: A BLANK LINE REQUEST EXECUTES THE LOOP ONLY ONCE.       */
*/*          AN INTERRUPT MSG REQUEST EXECUTES LOOP AT LEAST TWICE,  */
*/*               ONCE FOR MSG, AND AT LEAST ONCE FOR SYSOUT RECORD. */
*/*          THE SYSOUT RECORD MAY TAKE MORE THAN ONE EXECUTION OF   */
*/*               THE LOOP TO PUT IT OUT IF IT IS LARGER THAN THE    */
*/*               PRINT OR SAVE RECORD.                              */
*/********************************************************************/
*                                                                  0034
*   DO WHILE AGAIN=YES&SYNADERR=NO; /* LOOP UNTIL SYSOUT RECLTH = 0.
*                                      IF ERROR BIT SET, SYNAD EXIT
*                                      ENTERED                       */
         B     @DE00034                                            0034
@DL00034 DS    0H                                                  0035
*     IF OUTRECV(STRCTNUM)=VARIBLFM THEN/* IF PRINT DS IS VARIABLE   */
         L     @10,STRCTNUM(,OCMTBPTR)                             0035
         MH    @10,@CH00519                                        0035
         ALR   @10,OCMTBPTR                                        0035
         TM    OUTRECV-20(@10),B'00010000'                         0035
         BNO   @RF00035                                            0035
*       DO;                                                        0036
*         BUFFER(ONE:TWO)=BUFLEN;   /* PUT REC LENGTH IN 1ST 2 BYTE  */
         STH   BUFLEN,BUFFER(,BUFADR)                              0037
*         BUFFER(THREE:FOUR)=ZERO;  /* ZERO SECOND 2 BYTES           */
         SLR   @10,@10                                             0038
         STH   @10,BUFFER+2(,BUFADR)                               0038
*         BUFADR=BUFADR+FOUR;       /* ADJ BUFFER POSITION SO AS     */
         LA    @10,4                                               0039
         ALR   BUFADR,@10                                          0039
*         BUFLEN=BUFLEN-FOUR;       /* NOT TO OVERLAY FIRST WORD     */
         SLR   BUFLEN,@10                                          0040
*         VARBLSW=YES;              /* SET PRINT DS VARIABLE LENGTH  */
         OI    VARBLSW,B'01000000'                                 0041
*       END;                        /* SWITCH                        */
*                                                                  0043
*     /***************************************************************/
*     /*                                                             */
*     /* IF EOD ON LAST DS, 'PUT' A BLANK SEPARATOR LINE AFTER IT    */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0043
*     IF EODSW=YES THEN             /* IKJCT462 CALLED FOR A BLANK 0043
*                                      SEPARATOR LINE                */
@RF00035 TM    EODSW(OCMTBPTR),B'00010000'                         0043
         BNO   @RF00043                                            0043
*       DO;                                                        0044
*         BLANKPTR=ADDR(BLANK);     /* INIT 'EVEN' REG WITH ADDR OF
*                                      AREA MOVING FROM              */
         LA    BLANKPTR,@CC00493                                   0045
*         FROMLEN=LENGTH(BLANK)×PADCHAR;/* INIT 'ODD' REG WITH LENGTH
*                                      OF AREA MOVING FROM - PAD CHAR
*                                      IN HI ORDER BYTE              */
         L     FROMLEN,@CF00527                                    0046
*         MVCL(BUFADR,BLANKPTR);    /* BLANK BUFFER                  */
         MVCL  BUFADR,BLANKPTR                                     0047
*         AGAIN=NO;                 /* DON'T LOOP TO 'PUT' ANY OTHER
*                                      RECORDS ON THIS CALL          */
         NI    AGAIN,B'01111111'                                   0048
*         BUFADR=OUTBUFA(STRCTNUM); /* RESTORE 'PUT' BUFFER ADDR   0049
*                                      AFTER MVCL INSTR              */
         L     @10,STRCTNUM(,OCMTBPTR)                             0049
         MH    @10,@CH00519                                        0049
         L     BUFADR,OUTBUFA-20(@10,OCMTBPTR)                     0049
*         BUFLEN=OUTBUFL(STRCTNUM); /* RESTORE 'PUT' BUFFER LENGTH 0050
*                                      AFTER MVCL INSTR              */
         LH    BUFLEN,OUTBUFL-20(@10,OCMTBPTR)                     0050
*       END;                                                       0051
*                                                                  0052
*     /***************************************************************/
*     /*                                                             */
*     /* IF OUTPUT INTERRUPTED - FILL 'PUT' BUFFER WITH MSG          */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0052
*     ELSE                                                         0052
*       IF INTRPMSG=YES THEN                                       0052
         B     @RC00043                                            0052
@RF00043 TM    INTRPMSG(OCMTBPTR),B'00000010'                      0052
         BNO   @RF00052                                            0052
*         DO;                                                      0053
*           MSGPTR=ADDR(PUTMSG);    /* INIT 'EVEN' REG WITH ADDR OF
*                                      AREA MOVING FROM (ADDR OF MSG)*/
         LA    MSGPTR,PUTMSG                                       0054
*           FROMLEN=LENGTH(PUTMSG)×PADCHAR;/* INIT 'ODD' REG WITH LEN
*                                      OF AREA MOVING FROM (MSG LEN)
*                                      - PAD CHAR IN HI ORDER BYTE   */
         L     FROMLEN,@CF00528                                    0055
*           MVCL(BUFADR,MSGPTR);    /* MOVE MSG INTO BUFFER          */
         MVCL  BUFADR,MSGPTR                                       0056
*           INTRPMSG=NO;            /* TURN FLAG OFF                 */
         NI    INTRPMSG(OCMTBPTR),B'11111101'                      0057
*           BUFADR=OUTBUFA(STRCTNUM);/* RESTORE 'PUT' BUFFER ADDR  0058
*                                      AFTER MVCL INSTRUCTION        */
         L     @10,STRCTNUM(,OCMTBPTR)                             0058
         MH    @10,@CH00519                                        0058
         L     BUFADR,OUTBUFA-20(@10,OCMTBPTR)                     0058
*           BUFLEN=OUTBUFL(STRCTNUM);/* RESTORE 'PUT' BUFFER LEN   0059
*                                      AFTER MVCL INSTRUCTION        */
         LH    BUFLEN,OUTBUFL-20(@10,OCMTBPTR)                     0059
*         END;                                                     0060
*                                                                  0061
*     /***************************************************************/
*     /*                                                             */
*     /* ELSE FILL 'PUT' BUFFER WITH SYSOUT RECORD                   */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0061
*       ELSE                                                       0061
*         DO;                                                      0061
         B     @RC00052                                            0061
@RF00052 DS    0H                                                  0062
*           RECRDPTR=OUTRECA;       /* INIT 'EVEN' REG WITH ADDR OF
*                                      AREA MOVING FROM (ADDR OF   0062
*                                      SYSOUT RCD)                   */
         L     RECRDPTR,OUTRECA(,OCMTBPTR)                         0062
*           FROMLEN=OUTRECL×PADCHAR;/* INIT 'ODD' REG WITH LEN OF  0063
*                                      AREA MOVING FROM (SYSOUT RCD)
*                                      - PAD CHAR IN HI ORDER BYTE   */
         LH    FROMLEN,OUTRECL(,OCMTBPTR)                          0063
         O     FROMLEN,@CF00496                                    0063
*           MVCL(BUFADR,RECRDPTR);  /* MOVE SYSOUT RECORD INTO BUFFER*/
         MVCL  BUFADR,RECRDPTR                                     0064
*           BUFADR=OUTBUFA(STRCTNUM);/* RESTORE PUT BUFFER ADDR AFTER
*                                      MVCL INSTRUCTION              */
         L     @10,STRCTNUM(,OCMTBPTR)                             0065
         MH    @10,@CH00519                                        0065
         L     BUFADR,OUTBUFA-20(@10,OCMTBPTR)                     0065
*           BUFLEN=OUTBUFL(STRCTNUM);/* RESTORE PUT BUFFER LENGTH  0066
*                                      AFTER MVCL INSTRUCTION        */
         LH    BUFLEN,OUTBUFL-20(@10,OCMTBPTR)                     0066
*           FROMLEN=FROMLEN&&PADCHAR;/* REMOVE PADDING CHAR FROM HI
*                                      BYTE BEFORE TESTING FOR A   0067
*                                      REMAINDER                     */
         X     FROMLEN,@CF00496                                    0067
*           IF FROMLEN>0 THEN       /* SYSOUT BUFFER NOT EMPTY       */
         LTR   FROMLEN,FROMLEN                                     0068
         BNP   @RF00068                                            0068
*             DO;                   /* PREPARE FOR NEXT LOOP THROUGH
*                                      MVCL                          */
*               OUTRECA=RECRDPTR;   /* SET INDEX TO POINT TO       0070
*                                      REMAINDER OF SYSOUT RECORD    */
         ST    RECRDPTR,OUTRECA(,OCMTBPTR)                         0070
*               OUTRECL=FROMLEN;    /* RESET RECORD LENGTH EQUAL TO
*                                      REMAINING LENGTH              */
         STH   FROMLEN,OUTRECL(,OCMTBPTR)                          0071
*             END;                                                 0072
*           ELSE                    /* SYSOUT BUFFER IS EMPTY        */
*             AGAIN=NO;             /* DO NOT LOOP AGAIN             */
         B     @RC00068                                            0073
@RF00068 NI    AGAIN,B'01111111'                                   0073
*         END;                                                     0074
@RC00068 DS    0H                                                  0075
*                                                                  0075
*     /***************************************************************/
*     /*                                                             */
*     /* SET UP TO ISSUE 'PUT'                                       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0075
*     IF OUTRECUN(STRCTNUM)=YES THEN/* IF UNDEFINED RECORD LENGTH    */
@RC00052 DS    0H                                                  0075
@RC00043 L     @10,STRCTNUM(,OCMTBPTR)                             0075
         MH    @10,@CH00519                                        0075
         ALR   @10,OCMTBPTR                                        0075
         TM    OUTRECUN-20(@10),B'00000001'                        0075
         BNO   @RF00075                                            0075
*       DCBLRECL=132;               /* MAKE THEM ALL 132 UNBLOCKED   */
*                                                                  0076
         MVC   DCBLRECL+72(2,DCBPTR),@CH00524                      0076
*     /***************************************************************/
*     /*                                                             */
*     /* ISSUE 'PUT'                                                 */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0077
*     REG1=OUTDCB(STRCTNUM);        /* PARAMETER FOR 'PUT'           */
@RF00075 L     @10,STRCTNUM(,OCMTBPTR)                             0077
         MH    @10,@CH00519                                        0077
         L     REG1,OUTDCB-20(@10,OCMTBPTR)                        0077
*     REG2=OUTBUFA(STRCTNUM);       /* ADDR OF DATA TO BE PUT        */
         L     REG2,OUTBUFA-20(@10,OCMTBPTR)                       0078
*     GEN(PUT (1),(2));             /* PUT                           */
         PUT (1),(2)
*                                                                  0080
*     /***************************************************************/
*     /*                                                             */
*     /* UPDATE CKPT CTRS IF PROCESSING FOR 'PRINT'                  */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0080
*     IF SUBCMODE=NO&SYNADERR=NO THEN/* PUT FOR PRINT, RATHER THAN 0080
*                                      SAVE PROCESSING, AND PUT WAS
*                                      SUCCESSFUL                    */
         TM    SUBCMODE(OCMTBPTR),B'01000000'                      0080
         BNZ   @RF00080                                            0080
         TM    SYNADERR(OCMTBPTR),B'10000000'                      0080
         BNZ   @RF00080                                            0080
*       DO;                         /* FOR PRINT, UPDATE CTRS TO THE
*                                      RBA CORRESPONDING TO APPROX 10
*                                      RCDS BACK IN CASE AN ATTN   0081
*                                      OCCURS AND WIPES OUT RCDS IN
*                                      THE TCAM BUFFERS              */
*         OUTBKCNT=OUTBKCNT+ONE;    /* INCRE CTR OF LINES PUT        */
         LA    @10,1                                               0082
         AL    @10,OUTBKCNT(,OCMTBPTR)                             0082
         ST    @10,OUTBKCNT(,OCMTBPTR)                             0082
*         IF OUTBKCNT>TEN THEN      /* MORE THAN 10 RCDS PUT SINCE 0083
*                                      LAST APPROXIMATION            */
         CH    @10,@CH00504                                        0083
         BNH   @RF00083                                            0083
*           DO;                                                    0084
*             OUTBKAPX=OUTBKNEW;    /* UPDATE OFFICIAL RBA OF 10   0085
*                                      LINES BACK.                   */
         MVC   OUTBKAPX(8,OCMTBPTR),OUTBKNEW(OCMTBPTR)             0085
*             OUTBKNEW=OUTHOLD;     /* UPDATE NEW APPROXIMATION      */
         MVC   OUTBKNEW(8,OCMTBPTR),OUTHOLD(OCMTBPTR)              0086
*             OUTBKCNT=ZERO;        /* SET RCD CTR BACK TO ZERO      */
         SLR   @10,@10                                             0087
         ST    @10,OUTBKCNT(,OCMTBPTR)                             0087
*           END;                                                   0088
*         ELSE                                                     0089
*           ;                       /* HAVE NOT PUT 10 RCDS SINCE  0089
*                                      LAST APPROXIMATION            */
@RF00083 DS    0H                                                  0090
*       END;                        /* END OF CTR UPDATES            */
*     ELSE                                                         0091
*       ;                           /* SAVE IS PROCESSING, OR PUT  0091
*                                      ERROR, DO NOT FIGURE A NEW  0091
*                                      APPROXIMATION                 */
@RF00080 DS    0H                                                  0092
*     IF AGAIN=NO THEN              /* IF END OF SYSOUT RECORD       */
         TM    AGAIN,B'10000000'                                   0092
         BNZ   @RF00092                                            0092
*       VARBLSW=NO;                 /* SET VARIABLE LENGTH SW OFF    */
         NI    VARBLSW,B'10111111'                                 0093
*   END;                            /* END DO WHILE LOOP TO        0094
*                                      COMPLETELY XFER SYSOUT RCD    */
@RF00092 DS    0H                                                  0094
@DE00034 TM    AGAIN,B'10000000'                                   0094
         BNO   @DC00034                                            0094
         TM    SYNADERR(OCMTBPTR),B'10000000'                      0094
         BZ    @DL00034                                            0094
@DC00034 DS    0H                                                  0095
*   OUTRTCD=ZERO;                                                  0095
         SLR   @10,@10                                             0095
         STH   @10,OUTRTCD(,OCMTBPTR)                              0095
*   RETURN CODE(OUTRTCD);                                          0096
         L     @13,4(,@13)                                         0096
         L     @00,@SIZDATD                                        0096
         LR    @01,@11                                             0096
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@10                                             0096
         L     @14,12(,@13)                                        0096
         LM    @00,@12,20(@13)                                     0096
         BR    @14                                                 0096
*                                                                  0097
*/********************************************************************/
*/*       SYNAD EXIT ROUTINE                                         */
*/********************************************************************/
*                                                                  0097
*SYNADEXT:                                                         0097
*   GEN(SYNADAF ACSMETH=QSAM);      /* PROVIDES A SAVE AREA, ANALYZES
*                                      ERROR, CREATES MSG, AND SETS
*                                      REG1=ADDR OF MSG              */
SYNADEXT SYNADAF ACSMETH=QSAM
*   OUTSYNMS=REG1;                  /* SAVE ADDR OF ERROR INFO MSG   */
         ST    REG1,OUTSYNMS(,OCMTBPTR)                            0098
*   OUTMSGID=140;                   /* TELL '67 TO ISSUE SYNAD MSG   */
         MVI   OUTMSGID(OCMTBPTR),X'8C'                            0099
*   CALL IKJCT467(OUTCOMTB);        /* CALL MSG HANDLER              */
         ST    OCMTBPTR,@AL00001                                   0100
         L     @15,@CV00477                                        0100
         LA    @01,@AL00001                                        0100
         BALR  @14,@15                                             0100
*   SYNADERR=YES;                   /* SET TERMINATION INDICATOR TO
*                                      STOP 71'S PUT LOOP            */
         OI    SYNADERR(OCMTBPTR),B'10000000'                      0101
*   GEN(SYNADRLS);                                                 0102
         SYNADRLS
*   END IKJCT471                    /* RETURN TO IKJCT462 OR '63   0103
*                                      DEPENDING ON WHO INITIATED THE
*                                      CALL                          */
*                                                                  0103
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IKJOCMTB)                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*                                                                  0103
*       ;                                                          0103
@EL00001 L     @13,4(,@13)                                         0103
@EF00001 L     @00,@SIZDATD                                        0103
         LR    @01,@11                                             0103
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0103
         BR    @14                                                 0103
@DATA    DS    0H
@CH00504 DC    H'10'
@CH00519 DC    H'20'
@CH00524 DC    H'132'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@AL00001 DS    1A
IKJCT471 CSECT
         DS    0F
@CF00527 DC    F'1073741825'
@CF00528 DC    F'1073741861'
@CF00496 DC    XL4'40000000'
@DATD    DSECT
         DS    0D
SWITCHES DS    BL1
         ORG   SWITCHES
AGAIN    DS    BL1
VARBLSW  EQU   SWITCHES+0
         ORG   SWITCHES+1
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKJCT471 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@CV00477 DC    V(IKJCT467)
         DS    0D
@CC00493 DC    C' '
PUTMSG   DC    CL37'IKJ56319I INTERRUPTED OUTPUT RESUMED'
PATCH71  DS    CL100
         ORG   PATCH71
PTCHINIT DC    20CL5'ZAP71'
         ORG   PATCH71+100
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
DCBPTR   EQU   @08
OCMTBPTR EQU   @03
REG1     EQU   @01
REG2     EQU   @02
BUFADR   EQU   @04
BUFLEN   EQU   @05
BLANKPTR EQU   @06
MSGPTR   EQU   @06
RECRDPTR EQU   @06
FROMLEN  EQU   @07
OUTCOMTB EQU   0
OUTMSGID EQU   OUTCOMTB+4
OUTFLAGS EQU   OUTCOMTB+5
OUTRTCD  EQU   OUTCOMTB+6
OUTATTN  EQU   OUTCOMTB+24
OUTHOLD  EQU   OUTCOMTB+68
OUTBKNEW EQU   OUTCOMTB+76
OUTBKAPX EQU   OUTCOMTB+84
OUTBKCNT EQU   OUTCOMTB+92
STRCTNUM EQU   OUTCOMTB+96
O73PARM  EQU   OUTCOMTB+100
OUTDCB   EQU   O73PARM
OUTBUFA  EQU   O73PARM+12
@NM00002 EQU   O73PARM+16
OUTRECV  EQU   @NM00002+1
OUTRECUN EQU   @NM00002+1
OUTBUFL  EQU   @NM00002+2
OUTRECA  EQU   OUTCOMTB+140
OUTRECL  EQU   OUTCOMTB+144
OUTKEYWD EQU   OUTCOMTB+146
OUTSW    EQU   OUTCOMTB+148
SUBCMODE EQU   OUTSW
SYNADERR EQU   OUTSW+1
OUTIDSSW EQU   OUTCOMTB+150
EODSW    EQU   OUTIDSSW
INTRPMSG EQU   OUTIDSSW
OUTXMSG  EQU   OUTCOMTB+164
OUTSYNMS EQU   OUTXMSG
OUTPLIST EQU   OUTCOMTB+260
IHADCB   EQU   0
IHADCS00 EQU   0
DCBFDAD  EQU   IHADCS00+5
IHADCS01 EQU   0
DCBDVTBL EQU   IHADCS01
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBIBPCT EQU   DCBIFLG
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
DCBIFPCT EQU   DCBIFLGS
IHADCS26 EQU   0
DCBWRITE EQU   IHADCS26
DCBREAD  EQU   DCBWRITE
DCBWRITA EQU   DCBREAD+1
IHADCS27 EQU   0
DCBGET   EQU   IHADCS27
DCBPUT   EQU   DCBGET
DCBGETA  EQU   DCBPUT+1
IHADCS36 EQU   0
DCBGERR  EQU   IHADCS36
DCBPERR  EQU   DCBGERR
DCBCHECK EQU   DCBPERR
DCBOPTCD EQU   DCBCHECK
DCBOPTH  EQU   DCBOPTCD
DCBOPTO  EQU   DCBOPTH
DCBOPTZ  EQU   DCBOPTCD
DCBGERRA EQU   DCBCHECK+1
DCBPERRA EQU   DCBGERRA
DCBSYNAD EQU   IHADCS36+4
DCBSYNA  EQU   DCBSYNAD+1
DCBCIND1 EQU   IHADCS36+8
DCBCIND2 EQU   IHADCS36+9
DCBIOBA  EQU   IHADCS36+16
DCBCICB  EQU   DCBIOBA
IHADCS52 EQU   0
DCBDIRCT EQU   IHADCS52
DCBQSWS  EQU   DCBDIRCT
DCBUSASI EQU   DCBQSWS
DCBQADFS EQU   DCBUSASI
DCBBUFOF EQU   DCBDIRCT+1
IHADCS37 EQU   0
DCBFLAG1 EQU   IHADCS37
IHADCS38 EQU   0
DCBEOBR  EQU   IHADCS38
DCBLRECL EQU   IHADCS38+10
DCBPOINT EQU   IHADCS38+12
DCBCNTRL EQU   DCBPOINT
IHADCS40 EQU   0
DCBEOBAD EQU   IHADCS40
DCBCCCW  EQU   IHADCS40+4
DCBRECAD EQU   DCBCCCW
DCBRECBT EQU   DCBRECAD
DCBRCREL EQU   DCBRECBT
@NM00033 EQU   IHADCS40+12
DCBEROPT EQU   @NM00033
BUFFER   EQU   0
OUTP     EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
DCBEOB   EQU   IHADCS40+20
DCBPRECL EQU   IHADCS40+18
@NM00036 EQU   IHADCS40+16
@NM00035 EQU   @NM00033+1
@NM00034 EQU   DCBEROPT
DCBERABE EQU   DCBEROPT
DCBERSKP EQU   DCBEROPT
DCBERACC EQU   DCBEROPT
@NM00032 EQU   IHADCS40+10
@NM00031 EQU   IHADCS40+9
@NM00030 EQU   IHADCS40+8
DCBRECA  EQU   DCBRECAD+1
@NM00029 EQU   DCBRECBT
DCBRCFGT EQU   DCBRCREL
DCBRCTRU EQU   DCBRCREL
DCBLCCW  EQU   DCBEOBAD
DCBNOTE  EQU   DCBCNTRL
@NM00028 EQU   IHADCS38+8
DCBEOBW  EQU   IHADCS38+4
DCBEOBRA EQU   DCBEOBR+1
DCBNCP   EQU   DCBEOBR
@NM00027 EQU   DCBFLAG1
DCBSTFLS EQU   DCBFLAG1
DCBSTQCK EQU   DCBFLAG1
DCBDIRCQ EQU   DCBBUFOF
DCBQSTRU EQU   DCBUSASI
@NM00026 EQU   DCBUSASI
DCBQADF3 EQU   DCBQADFS
DCBQADF2 EQU   DCBQADFS
DCBQADF1 EQU   DCBQADFS
DCBBLBP  EQU   DCBUSASI
@NM00025 EQU   DCBUSASI
DCBCICBA EQU   DCBCICB+1
@NM00024 EQU   DCBCICB
DCBOFFSW EQU   IHADCS36+15
DCBOFFSR EQU   IHADCS36+14
DCBWCPL  EQU   IHADCS36+13
DCBWCPO  EQU   IHADCS36+12
DCBBLKSI EQU   IHADCS36+10
DCBCNQSM EQU   DCBCIND2
DCBCNFEO EQU   DCBCIND2
DCBCNCHS EQU   DCBCIND2
DCBCNBFP EQU   DCBCIND2
DCBCNIOE EQU   DCBCIND2
DCBCNCLO EQU   DCBCIND2
DCBCNWRO EQU   DCBCIND2
DCBCNSTO EQU   DCBCIND2
DCBCNEXB EQU   DCBCIND1
@NM00023 EQU   DCBCIND1
DCBCNBRM EQU   DCBCIND1
@NM00022 EQU   DCBCIND1
DCBCNEVA EQU   DCBCIND1
DCBCNEVB EQU   DCBCIND1
DCBCNSRD EQU   DCBCIND1
DCBCNTOV EQU   DCBCIND1
DCBIOBL  EQU   DCBSYNAD
DCBCHCKA EQU   DCBPERRA
DCBOPTJ  EQU   DCBOPTCD
DCBOPTT  EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
DCBOPTQ  EQU   DCBOPTCD
DCBBCKPT EQU   DCBOPTO
DCBOPTC  EQU   DCBOPTCD
DCBOPTU  EQU   DCBOPTCD
DCBOPTW  EQU   DCBOPTCD
DCBPUTA  EQU   DCBGETA
@NM00021 EQU   DCBPUT
DCBREADA EQU   DCBWRITA
@NM00020 EQU   DCBREAD
DCBDEBA  EQU   DCBDEBAD+1
@NM00019 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBCH12  EQU   DCBIFPCT
DCBCH9   EQU   DCBIFPCT
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00018 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBICH12 EQU   DCBIBPCT
DCBICH9  EQU   DCBIBPCT
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBRECL  EQU   DCBRECLA
DCBEODA  EQU   DCBEODAD+1
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00017 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00016 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00015 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00014 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
@NM00013 EQU   DCBDSRG1
@NM00012 EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBKEYLE EQU   DCBRELB
DCBTRBAL EQU   IHADCS01+6
@NM00011 EQU   IHADCS01+5
@NM00010 EQU   IHADCS01+4
DCBDVTBA EQU   DCBDVTBL+1
@NM00009 EQU   DCBDVTBL
DCBKEYCN EQU   IHADCS00+4
DCBRELAD EQU   IHADCS00
@NM00008 EQU   IHADCB
IOPLAREA EQU   OUTCOMTB+296
IOPLPTR  EQU   OUTCOMTB+292
EWAPTR   EQU   OUTCOMTB+288
OSVDSPDE EQU   OUTCOMTB+284
OUTCLPDE EQU   OUTCOMTB+280
OUTJBPDE EQU   OUTCOMTB+276
ODESTPDE EQU   OUTPLIST+12
ONEWCPDE EQU   OUTPLIST+8
OPRDSPDE EQU   OUTPLIST+4
OUTCPDE1 EQU   OUTPLIST
OSYSODDN EQU   OUTCOMTB+252
CLASBUFF EQU   OUTCOMTB+244
OUTWORK  EQU   OUTCOMTB+196
OUTSTAE  EQU   OUTCOMTB+188
OUTSBBUF EQU   OUTCOMTB+184
OUTSBPDL EQU   OUTCOMTB+180
OHELPECB EQU   OUTCOMTB+176
OUTTCBH  EQU   OUTCOMTB+172
OUTXRPLY EQU   OUTCOMTB+168
OUTPDL   EQU   OUTCOMTB+160
OUTDAIR  EQU   OUTCOMTB+156
OUTDARB  EQU   OUTCOMTB+152
@NM00007 EQU   OUTIDSSW
ALLOC    EQU   OUTIDSSW
TERM     EQU   OUTIDSSW
@NM00006 EQU   OUTIDSSW
@NM00005 EQU   OUTIDSSW
POINT    EQU   OUTIDSSW
ENDLIST  EQU   OUTSW+1
WORKDONE EQU   OUTSW+1
NONTERM  EQU   OUTSW+1
OPENED   EQU   OUTSW+1
HASPABND EQU   OUTSW
NOWORK   EQU   OUTSW
ENDKEEP  EQU   OUTSW
ERROR    EQU   OUTSW
ENDSW    EQU   OUTSW
UNALCALL EQU   OUTSW
SUBSYS   EQU   OUTSW
SUBNEXT  EQU   OUTKEYWD+1
SUBBEGN  EQU   OUTKEYWD+1
SUBHERE  EQU   OUTKEYWD+1
SUBCONT  EQU   OUTKEYWD+1
DEST     EQU   OUTKEYWD+1
KEEP     EQU   OUTKEYWD+1
NEWCLASS EQU   OUTKEYWD
PRINT    EQU   OUTKEYWD
DELETE   EQU   OUTKEYWD
NEXT     EQU   OUTKEYWD
BEGIN    EQU   OUTKEYWD
HERE     EQU   OUTKEYWD
HOLD     EQU   OUTKEYWD
PAUSE    EQU   OUTKEYWD
NOMEMNAM EQU   @NM00002+1
NEWDS    EQU   @NM00002+1
NEEDFREE EQU   @NM00002+1
DSOPEN   EQU   @NM00002+1
DSALLOC  EQU   @NM00002+1
@NM00004 EQU   @NM00002+1
@NM00003 EQU   @NM00002
PRINTDDN EQU   O73PARM+4
OUTEMPSB EQU   OUTCOMTB+64
OUTACBL  EQU   OUTCOMTB+60
OUTACB   EQU   OUTCOMTB+56
OUTRPLL  EQU   OUTCOMTB+52
OUTRPL   EQU   OUTCOMTB+48
OUTSOBSO EQU   OUTCOMTB+44
OUTSOBH  EQU   OUTCOMTB+40
OUTEMPMN EQU   OUTCOMTB+32
OUTEXTRA EQU   OUTCOMTB+28
POSTED   EQU   OUTATTN
@NM00001 EQU   OUTATTN
OUTCMDNM EQU   OUTCOMTB+16
OUTMACN  EQU   OUTCOMTB+8
KEY1     EQU   OUTFLAGS
OUTCPPL  EQU   OUTCOMTB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   IKJCT471,(C'PLS1455',0701,78048)
