         TITLE 'IKTCAS20 - VTAM INTERFACE DRIVER'
IKTCAS20 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKTCAS20  80.232'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
         EJECT
*/********************************************************************/
*/*                                                                  */
*/*        THIS ROUTINE MANIPULATES THE QUEUES  ACCORDING TO         */
*/*        THE PRIORITY OF THE QUEUES :                              */
*/*            SYNCHRONOUS QUEUE                                     */
*/*            TPEND QUEUE                                           */
*/*            TERMINAL HANDLING QUEUE - GLOBAL                      */
*/*            TERMINAL HANDLING QUEUE - LOCAL                       */
*/*                                                                  */
*/********************************************************************/
*    /*                                                              */
*    /*      ESTABLISH TCAS WORK AREA ADDRESSIBILITY AND SET         */
*    /*      FOOTPRINT FOR ESTAI EXIT ROUTINE BY STORE DRIVER        */
*    /*      FUNCTION CODE WITHOUT RETRY ADDRESS. THAT MEANS         */
*    /*      ESTAI EXIT WILL ABEND THE TASK WITHOUT RETRY.           */
*    /*                                                              */
*      TWAPTR=R1 ;                     /* LOAD TWA ADDR PASSED IN R1 */
         LR    TWAPTR,R1                                           0017
*      IKTWAPTR=TWAPTR ;               /* STORE TWA PTR              */
         ST    TWAPTR,IKTWAPTR                                     0018
*      TCASTPTR=TWATCAST ;             /* TCAST POINTER              */
         L     TCASTPTR,TWATCAST(,TWAPTR)                          0019
*      TWAVEIFC(1)=FCVIDI ;            /* SET FOOTPRINT FOR ESTAI    */
         MVI   TWAVEIFC(TWAPTR),X'01'                              0020
*      TCASTTQH=0 ;                    /* INITIALIZE TO ZERO         */
         SLR   @07,@07                                             0021
         ST    @07,TCASTTQH(,TCASTPTR)                             0021
*      SWITCH='00'X ;                  /* INITIALIZE SWITCH          */
         MVI   SWITCH,X'00'                                        0022
*      DO WHILE (SWWAIT='0'B) ;        /* LOOP UNTIL BYPASS WAIT     */
         B     @DE00023                                            0023
@DL00023 DS    0H                                                  0024
*      DO WHILE (SWPRQS='0'B) ;        /* LOOP UNTIL BYPASS PROCESS  */
         B     @DE00024                                            0024
@DL00024 DS    0H                                                  0025
*                                      /* THE QUEUES                 */
*      DO WHILE (SWPRTPEQ='0'B);       /* LOOP UNTIL BYPASS PROCESS  */
         B     @DE00025                                            0025
@DL00025 DS    0H                                                  0026
*                                      /* THE TPEND QUEUE            */
*      /*                                                            */
*      /*    PROCESS  SYNCHRONOUS  QUEUE                             */
*    /*                                                              */
*      DO WHILE (TWASYNQH^=0 &         /* LOPP WHILE Q IS NOT EMPTY  */
*                SWPRQS='0'B ) ;       /*   AND NOT TO BE BYPASSED   */
         B     @DE00026                                            0026
@DL00026 DS    0H                                                  0027
*      RFY WESTD BASED(TWASYNQH);      /* BASED ON FIRST W.E. ON Q   */
*      R10=TWASYNQH ;                  /* R10 PTR TO FIRST W.E.      */
         L     @07,TWASYNQH(,TWAPTR)                               0028
         LR    R10,@07                                             0028
*      SWDEQ='0'B ;                    /* INITIALIZE DEQ BYPASS BIT  */
         NI    SWDEQ,B'11101111'                                   0029
*      IF WECODE1T=TCVI                /* IS THIS W.E. FOR VI SUBTASK*/
*         THEN DO ;                    /* YES, PROCESS               */
         CLI   WECODE1T(@07),X'02'                                 0030
         BNE   @RF00030                                            0030
*        IF WECDMAF=FCVIACB            /* IS THIS ACB CONTROL FUNCT  */
*            THEN DO ;                 /* YES, PROCESS               */
         TM    WECDMAF(@07),B'00010000'                            0032
         BNO   @RF00032                                            0032
         TM    WECDMAF(@07),B'11100000'                            0032
         BNZ   @RF00032                                            0032
*            WA2=WECODE1  ;            /* RETAIN FUNCTION CODE       */
         MVC   WA2(2),WECODE1(@07)                                 0034
*            CALL IKTCAS21 ;           /* CALL ACB CONTROL FUNCTION  */
         L     @15,@CV00307                                        0035
         BALR  @14,@15                                             0035
*            IF WA2^=WECODE1           /* IF THE FUNCTION CODE CHANGE*/
*               THEN SWDEQ='1'B ;      /* DONT DEQ,SET BYPASS BIT ON */
         L     @07,TWASYNQH(,TWAPTR)                               0036
         CLC   WA2(2),WECODE1(@07)                                 0036
         BE    @RF00036                                            0036
         OI    SWDEQ,B'00010000'                                   0037
*            END;                                                  0038
*            ELSE                      /* NOT ACB CONTROL FUNCTION   */
*              IF WECODE1F=FCVIDE      /* IS THIS EOT W.E.           */
*                 THEN DO ;            /* YES                        */
         B     @RC00032                                            0039
@RF00032 L     @07,TWASYNQH(,TWAPTR)                               0039
         CLI   WECODE1F(@07),X'03'                                 0039
         BNE   @RF00039                                            0039
*                 SWPRTPEQ='1'B ;      /* BYPASS PROCESS TPEND  Q    */
*                 SWPRQS='1'B ;        /* BYPASS ALL THE QUEUES      */
*                 SWWAIT='1'B;         /* BYPASS WAIT                */
         OI    SWPRTPEQ,B'11100000'                                0043
*                 END ;                                            0044
*         END ;                                                    0045
*         ELSE                         /* W.E. IS FOR OTHER TASK     */
*           IF WECODE1T=TCML           /* IS THIS W.E. FOR MAIN TASK */
*              THEN DO ;               /* YES                        */
         B     @RC00030                                            0046
@RF00030 L     @07,TWASYNQH(,TWAPTR)                               0046
         CLI   WECODE1T(@07),X'01'                                 0046
         BNE   @RF00046                                            0046
*              RFY (R14,R15,R0,R1) RSTD  /* RESTRICT PARA REG*/ ;  0048
*              R8=ADDR(TWAMECB);       /* MAIN TASK ECB ADDR         */
         LA    R8,TWAMECB(,TWAPTR)                                 0049
*              GEN ;                                               0050
         POST  (R8)                   POST MAIN TASK
*              RFY (R14,R15,R0,R1) UNRSTD /*UNRESTRI PARA R */ ;   0051
*              SWDEQ='1'B ;           /* BYPASS DEQ THE W.E.        */
*              SWPRTPEQ='1'B;          /* BYPASS PROCESS TPEND Q     */
*              SWPRQS='1'B ;          /* BYPASS PROCESS ALL QS      */
         OI    SWDEQ,B'01110000'                                   0054
*              END;                                                0055
*              ELSE                    /* NOT MAIN TASK              */
*                IF WECODE1T=TCUI      /* IS THIS USER INT SU@YM03216*/
*                   THEN DO ;          /* YES                        */
         B     @RC00046                                            0056
@RF00046 L     @07,TWASYNQH(,TWAPTR)                               0056
         CLI   WECODE1T(@07),X'03'                                 0056
         BNE   @RF00056                                            0056
*                   RFY (R14,R15,R0,R1) RSTD  /* RESTRICT PARA REG*/ ;
*                   R8=ADDR(TWAUECB) ; /* USER INT SUBTASK ECB ADDR  */
         LA    R8,TWAUECB(,TWAPTR)                                 0059
*                   GEN ;                                          0060
         POST  (R8)                   POST USER INT SUBTASK
*                   RFY (R14,R15,R0,R1) UNRSTD /*UNRESTRI PARA R */ ;
*                   SWDEQ='1'B ;       /* BYPASS DEQ W.E.            */
*                   SWPRTPEQ='1'B ;    /* BYPASS PROCESS TPEND Q     */
*                   SWPRQS='1'B ;      /* BYPASS PROCESS ALL QS      */
         OI    SWDEQ,B'01110000'                                   0064
*                   END ;                                          0065
*                   ELSE               /* NOT USER INT SUBTASK       */
*                   IF WECODE1T=TCCI   /* IS THIS CON COMM SUBTASK   */
*                      THEN DO ;       /* YES                        */
         B     @RC00056                                            0066
@RF00056 L     @07,TWASYNQH(,TWAPTR)                               0066
         CLI   WECODE1T(@07),X'04'                                 0066
         BNE   @RF00066                                            0066
*                      RFY (R14,R15,R0,R1) RSTD  /* RESTRICT PARA REG*/
*;                                                                 0068
*                      R8=ADDR(TWACECB); /* CON COMM SUBTASK ECB ADDR*/
         LA    R8,TWACECB(,TWAPTR)                                 0069
*                      GEN ;                                       0070
         POST  (R8)                   POST CON COMM SUBTASK
*                      RFY (R14,R15,R0,R1) UNRSTD /*UNRESTRI PARA R */
*                      SWDEQ='1'B ;    /* BYPASS DEQ W.E.            */
*                      SWPRTPEQ='1'B ; /* BYPASS PROCESS TPEND Q     */
*                      SWPRQS='1'B ;   /* BYPASS PROCESS ALL QS      */
         OI    SWDEQ,B'01110000'                                   0074
*                      END ;                                       0075
*      IF SWDEQ='0'B                   /* IS DEQ W.E. NOT BYPASS     */
*         THEN DO ;                    /* NO, GO AHEAD DEQ           */
@RF00066 DS    0H                                                  0076
@RC00056 DS    0H                                                  0076
@RC00046 DS    0H                                                  0076
@RC00030 TM    SWDEQ,B'00010000'                                   0076
         BNZ   @RF00076                                            0076
*         R8=ADDR(TWASYNQH) ;          /* SYNCHRONOUS Q HEADER ADDR  */
         LA    R8,TWASYNQH(,TWAPTR)                                0078
*         GEN SETS(TWASYNQH);          /* COMPARE SWAP TO DEQ        */
         L     10,0(8)                LOAD ADDR OF FIRST W.E.
CSLOOP   L     9,4(10)                LOAD ADDR OF NEXT W.E.
         CS    10,9,0(8)              DEQ FIRST W.E.
         BNE   CSLOOP                 LOOP IF NOT SUCCESSFUL
*         IF R9=0                      /* IS THIS LAST W.E. ON THE Q */
*            THEN DO ;                 /* YES, POST ALL OTHER SUBTASK*/
         LTR   R9,R9                                               0080
         BNZ   @RF00080                                            0080
*            R8=ADDR(TWAUECB) ;        /* ADDR OF USER INT ECB       */
         LA    R8,TWAUECB(,TWAPTR)                                 0082
*            R9=ADDR(TWACECB) ;        /* ADDR OF CON COMM ECB       */
         LA    R9,TWACECB(,TWAPTR)                                 0083
*            RFY (R14,R15,R0,R1) RSTD  /* RESTRICT PARA REG*/ ;    0084
*            GEN ;                                                 0085
         POST  (R8)                   POST USER INT SUBTASK
         POST  (R9)                   POST CON COMM SUBTASK
*            RFY (R14,R15,R0,R1) UNRSTD /*UNRESTRI PARA R */ ;     0086
*            END ;                                                 0087
*         END ;                                                    0088
@RF00080 DS    0H                                                  0089
*      END ;                           /* END OF SYNC Q PROCESS LOOP */
@RF00076 DS    0H                                                  0089
@DE00026 L     @07,TWASYNQH(,TWAPTR)                               0089
         LTR   @07,@07                                             0089
         BZ    @DC00026                                            0089
         TM    SWPRQS,B'01000000'                                  0089
         BZ    @DL00026                                            0089
@DC00026 DS    0H                                                  0090
*    /*                                                              */
*    /*      PROCESS  ASYNCHRONOUS  QUEUES                           */
*    /*                                                              */
*/*                                                                  */
*/*            PROCESS  TPEND QUEUE                                  */
*/*                                                                  */
*      IF SWPRTPEQ='0'B                /* NOT TO BYPASS TPEND Q PROC */
*         THEN DO ;                    /* NO, GO AHEAD PROCESS       */
         TM    SWPRTPEQ,B'00100000'                                0090
         BNZ   @RF00090                                            0090
*         RFY R1 RSTD ;                /* R1 PTR TO THE Q HEADER TO  */
*         R1=ADDR(TWAVTEQH) ;          /* BE DEQ WHEN DEQ ROUTINE    */
         LA    R1,TWAVTEQH(,TWAPTR)                                0093
*         CALL DEQASYN ;               /* IS CALLED                  */
         BAL   @14,DEQASYN                                         0094
*         IF R1 ^=0                    /* IF Q IS EMPTY,R1 IS ZERO   */
*            THEN DO;                  /* NO, Q IS NOT EMPTY, AND W.E*/
         LTR   R1,R1                                               0095
         BZ    @RF00095                                            0095
*            R10=R1 ;                  /*   ADDR IS RETURNED IN R1   */
         LR    R10,R1                                              0097
*            R1=0 ;                    /* WHEN TPEND ROUTINE CALLED, */
         SLR   R1,R1                                               0098
*                                      /*   R1=0 MEANS CALLED BY     */
*                                      /*   DRIVER NOT VTAM          */
*            CALL IKTCAS24 ;           /* CALL TPEND PROCESSING AND  */
         L     @15,@CV00309                                        0099
         BALR  @14,@15                                             0099
*                                      /* R10 POINTS THE W.E.        */
*            END ;                                                 0100
*            ELSE SWPRTPEQ='1'B;       /* Q IS EMPTY,BYPASS SET      */
         B     @RC00095                                            0101
@RF00095 OI    SWPRTPEQ,B'00100000'                                0101
*         RFY R1 UNRSTD ;                                          0102
@RC00095 DS    0H                                                  0103
*         END ;                                                    0103
*      END ;                           /* END OF PROCESS TPEND Q LOOP*/
@RF00090 DS    0H                                                  0104
@DE00025 TM    SWPRTPEQ,B'00100000'                                0104
         BZ    @DL00025                                            0104
*      SWPRTPEQ='0'B ;                 /* RESET TPEND BYPASS BIT     */
         NI    SWPRTPEQ,B'11011111'                                0105
*      IF SWPRQS='0'B                  /* IF ALL OTHER QS NOT BYPASS */
*         THEN DO ;                    /* PROCESS                    */
         TM    SWPRQS,B'01000000'                                  0106
         BNZ   @RF00106                                            0106
*/*                                                                  */
*/*          PROCESS  TERMINAL HANDLING  QUEUE - GLOBAL              */
*/*            THE WORK ELEMENT IS THE REQUEST FROM TSO              */
*/*            USER ADDRESS SPACE                                    */
*/*                                                                  */
*         RFY R1 RSTD ;                /* SET PARAMETER REG          */
*         R1=ADDR(TCASTTQH) ;          /* R1 CONTAINS ADDR OF Q      */
         LA    R1,TCASTTQH(,TCASTPTR)                              0109
*                                      /*   HEADER TO BE DEQED       */
*         CALL DEQASYN ;               /* CALL DEQ ROUTINE           */
         BAL   @14,DEQASYN                                         0110
*         IF R1^=0                     /* ON RETURN,R1=0 IF Q EMPTY  */
*                                      /*   R1=ADDR OF WE IF NOT EMP */
*            THEN DO ;                 /* Q IS NOT EMPTY             */
         LTR   R1,R1                                               0111
         BZ    @RF00111                                            0111
*            RFY R5 RSTD;              /* RESTRICT REG 5    @ZA19531 */
*            R10=R1 ;                  /* R10 POINTS TO THE W.E.     */
         LR    R10,R1                                              0114
*            R5=0;                /* TELL TCAS22 TO FREE WE @ZA19531 */
         SLR   R5,R5                                               0115
*            CALL IKTCAS22 ;           /* CALL TERMINAL HANDLING     */
         L     @15,@CV00308                                        0116
         BALR  @14,@15                                             0116
*            RFY R5 UNRSTD;            /* FREE REGISTER 5   @ZA19531 */
*            END ;                                                 0118
*/*                                                                  */
*/*          PROCESS  TERMINAL  HANDLING  QUEUE - LOCAL              */
*/*                                                                  */
*         R1=ADDR(TWAVTHQH) ;          /* ADDR OF Q HEADER TO BE DEQ */
@RF00111 LA    R1,TWAVTHQH(,TWAPTR)                                0119
*         CALL DEQASYN ;               /* CALL DEQ ROUTINE           */
         BAL   @14,DEQASYN                                         0120
*         IF R1^=0                     /* ON RETURN,R1=0 IF Q EMPTY  */
*                                      /*   R1=ADDR OF WE IF DEQED   */
*            THEN DO ;                 /* NOT EMPTY                  */
         LTR   R1,R1                                               0121
         BZ    @RF00121                                            0121
*            RFY R5 RSTD;              /* RESTRICT REG 5     @ZA19531*/
*            R10=R1 ;                  /* R10 POINTS TO W.E.         */
         LR    R10,R1                                              0124
*            R5='80000000'X;    /* TELL TCAS22 NOT TO FREE WE@ZA19531*/
         L     R5,@CF00330                                         0125
*            CALL IKTCAS22 ;           /* CALL TERMINAL HANDLING     */
         L     @15,@CV00308                                        0126
         BALR  @14,@15                                             0126
*            RFY R5 UNRSTD;            /* FREE REGISTER 5    @ZA19531*/
*            END ;                                                 0128
*            ELSE                      /* IF Q IS EMPTY AND          */
*              IF TCASTTQH=0           /* GLOBAL TERM Q IS EMPTY TOO */
*                 THEN SWPRQS='1'B;    /* THEN TURN ON BYPASS ALL Q  */
         B     @RC00121                                            0129
@RF00121 L     @07,TCASTTQH(,TCASTPTR)                             0129
         LTR   @07,@07                                             0129
         BNZ   @RF00129                                            0129
         OI    SWPRQS,B'01000000'                                  0130
*                                      /*   PROCESSING               */
*         RFY R1 UNRSTD ;                                          0131
@RF00129 DS    0H                                                  0131
@RC00121 DS    0H                                                  0132
*         END ;                                                    0132
*      END ;                           /* END OF ALL Q PROCESS LOOP  */
@RF00106 DS    0H                                                  0133
@DE00024 TM    SWPRQS,B'01000000'                                  0133
         BZ    @DL00024                                            0133
*    /*                                                              */
*    /*        WAIT  FOR  WORK - WAIT ON AN ECB. IF POSTED,          */
*    /*                          MEANS MORE WORK AND W.E. ARE QUEUED */
*    /*                                                              */
*      IF SWWAIT='0'B                  /* WAIT NOT TO BE BYPASSED    */
*         THEN DO ;                    /* NO, GO WAIT                */
         TM    SWWAIT,B'10000000'                                  0134
         BNZ   @RF00134                                            0134
*         RFY (R14,R15,R0,R1) RSTD  /* RESTRICT PARA REG*/ ;       0136
*         R8=ADDR(TWAVECB) ;           /* ECB ADDRESS                */
         LA    R8,TWAVECB(,TWAPTR)                                 0137
*         GEN ;                                                    0138
         WAIT  ECB=(R8)               WAIT FOR MORE WORK
*         RFY (R14,R15,R0,R1) UNRSTD /*UNRESTRI PARA R */ ;        0139
*         TWAVECB=''B ;                /* ZERO ECB                   */
         XC    TWAVECB(4,TWAPTR),TWAVECB(TWAPTR)                   0140
*         SWITCH='00'X ;               /* RESET SWITCHES             */
         MVI   SWITCH,X'00'                                        0141
*         END ;                                                    0142
*      END ;                           /* END OF WAIT LOOP           */
@RF00134 DS    0H                                                  0143
@DE00023 TM    SWWAIT,B'10000000'                                  0143
         BZ    @DL00023                                            0143
         EJECT
*    /*                                                              */
*    /*        ROUTINE TO DE-CHAIN THE LAST WE ON ASYCHRONOUS QUEUE  */
*    /*                                                              */
*    /*        INPUT: R1 ADDRESS OF ASY QUEUE                        */
*    /*               R14 RETURN ADDR                                */
*    /*               R13 A SAVE AREA CONTAINS AT LEAST 6 WORDS BUT  */
*    /*                   ONLY LAST 4 WORDS TO BE USED               */
*    /*                                                              */
*    /*        OUTPUT: R1 ADDRESS OF THE WE DE-CHAINED OR ZERO       */
*    /*                   IF ZERO, ASY QUEUE WAS EMPTY               */
*    /*                                                              */
*DEQASYN : PROC OPTIONS(SAVE(R14),NOSAVEAREA) ;                    0144
@EL00001 L     @13,4(,@13)                                         0144
@EF00001 DS    0H                                                  0144
@ER00001 LM    @14,@12,12(@13)                                     0144
         BR    @14                                                 0144
DEQASYN  ST    @14,12(,@13)                                        0144
*      RFY R1 RSTD ;                                               0145
*      R9=0  ;                         /* ZERO FOR COMPARE SWAP      */
         SLR   R9,R9                                               0146
*                                      /* INSTRUCTION TO DEQ W.E.    */
*      SW='1'B ;                       /* SET SWITCH                 */
         OI    SW,B'00001000'                                      0147
*      DO WHILE (SW='1'B ) ;            /* LOOP UNTIL CS WORK        */
         B     @DE00148                                            0148
@DL00148 DS    0H                                                  0149
*         R8=R1 ;                       /* ADDR OF QUEUE HEADER      */
         LR    R8,R1                                               0149
*         R10=R8 -> WA1 ;               /* LOAD ADDR OF FIRST WE     */
         L     R10,WA1(,R8)                                        0150
*         IF R10 ^=0                    /* IS Q EMPTY                */
*            THEN DO ;                  /* NO                        */
         LTR   R10,R10                                             0151
         BZ    @RF00151                                            0151
*            RFY WESTD BASED (R10) ;    /* WE BASE                   */
*            DO WHILE (WENEXT ^=0 ) ;   /* FIND LAST WE              */
         B     @DE00154                                            0154
@DL00154 DS    0H                                                  0155
*            R8=ADDR(WENEXT) ;          /* ADDR OF ADDR OF NEXT WE   */
         LA    R8,WENEXT(,R10)                                     0155
*            R10=WENEXT ;               /* RELOAD POINTER            */
         L     R10,WENEXT(,R10)                                    0156
*            END ;                      /* FOUND LAST ONE            */
@DE00154 L     @07,WENEXT(,R10)                                    0157
         LTR   @07,@07                                             0157
         BNZ   @DL00154                                            0157
*            CS(R10,R9,R8->WA1) ;      /* DEQ THE W.E.               */
         CS    R10,@09,WA1(R8)                                     0158
*            BC(8,DEQ1) ;               /* SUCCESSFUL BRANCH         */
         BC    8,DEQ1                                              0159
*            END ;                                                 0160
*            ELSE SW='0'B ;             /* QUEUE EMPTY               */
         B     @RC00151                                            0161
@RF00151 NI    SW,B'11110111'                                      0161
*      END ;                            /* LOOP AROUND               */
@RC00151 DS    0H                                                  0162
@DE00148 TM    SW,B'00001000'                                      0162
         BO    @DL00148                                            0162
*DEQ1 :R1=R10  ;                        /* ADDR OF THE WE DEQ        */
DEQ1     LR    R1,R10                                              0163
*      RFY R1 UNRSTD ;                                             0164
*      END DEQASYN ;                                               0165
@EL00002 DS    0H                                                  0165
@EF00002 DS    0H                                                  0165
@ER00002 L     @14,12(,@13)                                        0165
         BR    @14                                                 0165
*      END IKTCAS20                                                0166
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKTTCAST)                                        *
*/*%INCLUDE SYSLIB  (IKTCASWA)                                        *
*;                                                                 0166
@DATA    DS    0H
         DS    0F
@SA00001 DS    18F
         DS    0F
@CF00330 DC    XL4'80000000'
@CV00307 DC    V(IKTCAS21)
@CV00308 DC    V(IKTCAS22)
@CV00309 DC    V(IKTCAS24)
         DS    0D
IKTWAPTR DS    F
WA2      DS    BL2
SWITCH   DS    BL1
         ORG   SWITCH
SWWAIT   DS    BL1
SWPRQS   EQU   SWITCH+0
SWPRTPEQ EQU   SWITCH+0
SWDEQ    EQU   SWITCH+0
SW       EQU   SWITCH+0
@NM00011 EQU   SWITCH+0
         ORG   SWITCH+1
         DS    CL1
PATCH    DC    18F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
TCASTPTR EQU   @06
TWAPTR   EQU   @11
R0       EQU   @00
R1       EQU   @01
R5       EQU   @05
R8       EQU   @08
R9       EQU   @09
R10      EQU   @10
R14      EQU   @14
R15      EQU   @15
R12      EQU   @12
R13      EQU   @13
         ENTRY IKTWAPTR
TCAST    EQU   0
TCASUSER EQU   TCAST+4
TCASFLG1 EQU   TCAST+88
TCASTTQH EQU   TCAST+104
TWAR     EQU   0
TWASYNQH EQU   TWAR+4
TWATCAST EQU   TWAR+20
TWAMECB  EQU   TWAR+64
TWAMFL   EQU   TWAR+80
TWAVFL   EQU   TWAR+81
TWAUFL   EQU   TWAR+82
TWACFL   EQU   TWAR+83
TWAM     EQU   TWAR+84
TWAME    EQU   TWAM+68
TWAMEI   EQU   TWAME
TWAV     EQU   TWAR+184
TWAVE    EQU   TWAV+68
TWAVEI   EQU   TWAVE
TWAVEIFC EQU   TWAVEI
TWAVI    EQU   TWAR+284
TWAVECB  EQU   TWAVI
TWAVTEQH EQU   TWAVI+4
TWAVTHQH EQU   TWAVI+8
TWAU     EQU   TWAR+300
TWAUE    EQU   TWAU+68
TWAUEI   EQU   TWAUE
TWAUI    EQU   TWAR+400
TWAUECB  EQU   TWAUI
TWAC     EQU   TWAR+408
TWACE    EQU   TWAC+68
TWACEI   EQU   TWACE
TWACI    EQU   TWAR+508
TWACECB  EQU   TWACI
WESTD    EQU   0
WECODE1  EQU   WESTD
WECODE1T EQU   WECODE1
WECODE1F EQU   WECODE1+1
WECDMAF  EQU   WECODE1F
WECODE2  EQU   WESTD+2
WECODE2F EQU   WECODE2+1
WENEXT   EQU   WESTD+4
WERC     EQU   WESTD+8
WELBUF   EQU   WESTD+12
WEVNIB   EQU   WESTD+16
WA1      EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
WEVRPL   EQU   WESTD+20
WEUECB   EQU   WEVNIB
WEUASCB  EQU   WELBUF
WELEN    EQU   WESTD+10
WERC2    EQU   WERC+1
WERC1    EQU   WERC
WECD2MIF EQU   WECODE2F
WECD2MAF EQU   WECODE2F
WECODE2T EQU   WECODE2
WECDMIF  EQU   WECODE1F
TWAEND   EQU   TWAR+536
TWAWORKE EQU   TWAR+524
@NM00010 EQU   TWACI+13
TWACSKIP EQU   TWACI+12
TWACMODQ EQU   TWACI+8
TWACSTPQ EQU   TWACI+4
TWACERRS EQU   TWACE+4
TWACERA  EQU   TWACEI+1
TWACEIFC EQU   TWACEI
TWACRTFC EQU   TWAC+60
TWACABFC EQU   TWAC+56
TWACTWA  EQU   TWAC+52
TWACEWA  EQU   TWAC+4
TWACID   EQU   TWAC
TWAUACQH EQU   TWAUI+4
TWAUERRS EQU   TWAUE+4
TWAUERA  EQU   TWAUEI+1
TWAUEIFC EQU   TWAUEI
TWAURTFC EQU   TWAU+60
TWAUABFC EQU   TWAU+56
TWAUTWA  EQU   TWAU+52
TWAUEWA  EQU   TWAU+4
TWAUID   EQU   TWAU
TWAVACQH EQU   TWAVI+12
TWAVERRS EQU   TWAVE+4
TWAVERA  EQU   TWAVEI+1
TWAVRTFC EQU   TWAV+60
TWAVABFC EQU   TWAV+56
TWAVTWA  EQU   TWAV+52
TWAVEWA  EQU   TWAV+4
TWAVID   EQU   TWAV
TWAMERRS EQU   TWAME+4
TWAMERA  EQU   TWAMEI+1
TWAMEIFC EQU   TWAMEI
TWAMRTFC EQU   TWAM+60
TWAMABFC EQU   TWAM+56
TWAMTWA  EQU   TWAM+52
TWAMEWA  EQU   TWAM+4
TWAMID   EQU   TWAM
@NM00009 EQU   TWACFL
TWACFL4  EQU   TWACFL
TWACFL2  EQU   TWACFL
TWACFL1  EQU   TWACFL
@NM00008 EQU   TWAUFL
TWAUFL4  EQU   TWAUFL
TWAUFL3  EQU   TWAUFL
TWAUFL2  EQU   TWAUFL
TWAUFL1  EQU   TWAUFL
@NM00007 EQU   TWAVFL
TWAVFL6  EQU   TWAVFL
TWAVFL5  EQU   TWAVFL
TWAVFL4  EQU   TWAVFL
TWAVFL3  EQU   TWAVFL
TWAVFL2  EQU   TWAVFL
TWAVFL1  EQU   TWAVFL
@NM00006 EQU   TWAMFL
TWAMFL1  EQU   TWAMFL
TWACCOMP EQU   TWAR+76
TWAUCOMP EQU   TWAR+72
TWAVCOMP EQU   TWAR+68
TWACTCB  EQU   TWAR+60
TWAUTCB  EQU   TWAR+56
TWAVTCB  EQU   TWAR+52
TWAMSG   EQU   TWAR+48
TWADEQAS EQU   TWAR+44
TWAEESR  EQU   TWAR+40
TWAPPSR  EQU   TWAR+36
TWATCSR  EQU   TWAR+32
TWATTSR  EQU   TWAR+28
TWAINIT  EQU   TWAR+24
TWACSCB  EQU   TWAR+16
TWAASCB  EQU   TWAR+12
TWAPASQH EQU   TWAR+8
TWARSON  EQU   TWAR+2
TWACOMP  EQU   TWAR
TCASTEND EQU   TCAST+148
TCASTTYO EQU   TCAST+144
TCAS767O EQU   TCAST+140
TCAS767I EQU   TCAST+136
TCASDUMP EQU   TCAST+132
TCASSCHD EQU   TCAST+128
TCASTPND EQU   TCAST+124
TCASOMJR EQU   TCAST+120
@NM00005 EQU   TCAST+118
TCASBR14 EQU   TCAST+116
TCASATTN EQU   TCAST+112
TCASASCI EQU   TCAST+108
@NM00004 EQU   TCAST+102
@NM00003 EQU   TCAST+100
TCASTGTF EQU   TCAST+96
TCASASCB EQU   TCAST+92
TCASFLG4 EQU   TCAST+91
TCASFLG3 EQU   TCAST+90
TCASFLG2 EQU   TCAST+89
TCASCONF EQU   TCASFLG1
@NM00002 EQU   TCASFLG1
TCASHAST EQU   TCASFLG1
TCASNACT EQU   TCASFLG1
TCASVSD  EQU   TCASFLG1
TCASABND EQU   TCASFLG1
TCASMDSW EQU   TCASFLG1
TCASBKMD EQU   TCASFLG1
TCASLTE  EQU   TCAST+84
TCASEXIT EQU   TCAST+80
TCASOQM  EQU   TCAST+76
TCASIQM  EQU   TCAST+72
TCASTSB  EQU   TCAST+68
TCASTTL  EQU   TCAST+64
TCASWA   EQU   TCAST+60
TCASFRR  EQU   TCAST+56
TCASMSGS EQU   TCAST+52
TCASDATO EQU   TCAST+48
TCASDATI EQU   TCAST+44
TCASXECB EQU   TCAST+40
TCASTID  EQU   TCAST+32
@NM00001 EQU   TCAST+31
TCASCHNL EQU   TCAST+30
TCASCRSZ EQU   TCAST+28
TCASLBUF EQU   TCAST+24
TCASHBUF EQU   TCAST+20
TCASCLSZ EQU   TCAST+18
TCASRCON EQU   TCAST+16
TCASACBP EQU   TCAST+8
TCASUMAX EQU   TCASUSER+2
TCASUSEC EQU   TCASUSER
TCASID   EQU   TCAST
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00039 EQU   @RC00030
@RC00032 EQU   @RC00030
@PB00002 EQU   @EL00001
@RF00036 EQU   @RC00032
@ENDDATA EQU   *
         END   IKTCAS20,(C'PLS1925',0702,80232)
