         TITLE '     IKTCAS24 - VTAM TPEND EXIT'
IKTCAS24 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKTCAS24  80.232'                                 0001
         DROP  @15
@PROLOG  DS    0H                                                  0002
         BALR  R15,0
         USING *,R15
         STM   R0,R14,SAVE1      SAVE CALLERS REGISTERS
         BALR  R12,R0            BASE REG
         USING *,R12
         LA    R13,SAVE2         SAVEAREA ADDR
*   ENTCON=R1;                      /* SAVE ENTRY CONDITION          */
         LR    ENTCON,R1                                           0042
*   TWAPTR=IKTWAPTR;                /* GET TWA PTR                   */
         L     @06,@CA00051                                        0043
         L     TWAPTR,IKTWAPTR-IKTWAPTR(,@06)                      0043
*   RFY                                                            0044
*     WESTD BASED(R10);             /* ADDR FOR W.E.         @ZM21019*/
*   IF ENTCON^=0 THEN               /* ENTRY FROM VTAM       @ZM21019*/
         SLR   @06,@06                                             0045
         CR    ENTCON,@06                                          0045
         BE    @RF00045                                            0045
*     DO;                           /* PROCESS VTAM ENTRY    @ZM44523*/
*       TCASVSD='1'B;               /* SET VTAM SHUTTING DOWN      0047
*                                      INDICATOR             @ZM44523*/
         L     @15,TCASTPTR(,TWAPTR)                               0047
         OI    TCASVSD(@15),B'00010000'                            0047
*       IF VTAMRSN^=0 THEN          /* IF NOT HALT NORMAL    @ZM45607*/
         C     @06,VTAMRSN(,ENTCON)                                0048
         BE    @RF00048                                            0048
*         TCASHAST='1'B;            /* SET HALT ISSUED, ADDRESS SPACE
*                                      TERMINATED            @ZM45607*/
         OI    TCASHAST(@15),B'00000100'                           0049
*       IF VTAMRSN=8 THEN           /* FOR HALT CANCEL       @ZM21019*/
@RF00048 CLC   VTAMRSN(4,ENTCON),@CF00061                          0050
         BNE   @RF00050                                            0050
*         DO;                       /* BUILD WORK ELEMENT FOR STOP 0051
*                                      QUEUE                 @ZM21019*/
*           GEN CODE;                                              0052
*                                        /*                 @ZM21019*/
        GETMAIN RU,LV=16,SP=4            /* GET W.E.        @ZM21019*/
*           R10=R1;                 /* SAVE W.E. ADDR        @ZM21019*/
         LR    R10,R1                                              0053
*           WECODE1T=TCCONSLE;      /* COMMUN. TASK ID       @ZM21019*/
         MVI   WECODE1T(R10),X'04'                                 0054
*           WECODE1F=FCCIVT;        /* HALT CANCEL ID        @ZM21019*/
         MVI   WECODE1F(R10),X'12'                                 0055
*           WECODE2T=TCCONSLE;      /* SET COMMUNICATIONS SUBPOOL  0056
*                                      NUMBER                @ZM21019*/
         MVI   WECODE2T(R10),X'04'                                 0056
*           WECODE2F=0;             /* NO 2ND FUNCTION       @ZM21019*/
         MVI   WECODE2F(R10),X'00'                                 0057
*           WERC=0;                 /* 0 RETURN CODE         @ZM21019*/
         SLR   @06,@06                                             0058
         STH   @06,WERC(,R10)                                      0058
*           WELEN=16;               /* LENGTH OF W.E.        @ZM21019*/
         MVC   WELEN(2,R10),@CH00098                               0059
*STOPTOP:                           /* TOP OF CS LOOP        @ZM21019*/
*           TEMPPTR=TWACSTPQ;       /* ADDR OF TOP WE        @ZM21019*/
STOPTOP  L     TEMPPTR,TWACSTPQ(,TWAPTR)                           0060
*           WENEXT=TEMPPTR;         /* ADDR OF NEXT WE       @ZM21019*/
         ST    TEMPPTR,WENEXT(,R10)                                0061
*           CS(TEMPPTR,R10,TWACSTPQ);/* CS WE TO Q TOP       @ZM21019*/
         CS    TEMPPTR,@10,TWACSTPQ(TWAPTR)                        0062
*           BC(7,STOPTOP);          /* LOOP TIL DONE         @ZM21019*/
         BC    7,STOPTOP                                           0063
*           RFY                                                    0064
*             R2 RSTD;              /* USE R2 FOR POST       @ZM21019*/
*           R2=ADDR(TWACECB);       /* COMMUNICAT. ECB       @ZM21019*/
         LA    R2,TWACECB(,TWAPTR)                                 0065
*           GEN CODE EXIT REFS(R2);                                0066
*                                        /* POST ECB,RETURN @ZM21019*/
          POST (R2)                      /* POST COMMUN ECB @ZM21019*/
          LA   R15,0                     /* 0 RETURN CODE   @ZM21019*/
          LM   R0,R14,SAVE1              /* RESTORE REGS    @ZM21019*/
          BR   R14                       /* RETURN TO VTAM  @ZM21019*/
*           RFY                                                    0067
*             R2 UNRSTD;            /* FREE UP REG2          @ZM21019*/
*         END;                      /* END HALT CANCEL       @ZM21019*/
*       ELSE                        /* MUST BE HALT OR HALT QUICK  0069
*                                      VTAMRSN=0 OR 4        @ZM21019*/
*         DO;                       /*                       @ZM21019*/
         B     @RC00050                                            0069
@RF00050 DS    0H                                                  0070
*           TSBPTR=TCASTSB;         /* POINT TO FIRST TSB ON TSO/VTAM
*                                      CHAIN                 @ZM21019*/
         L     @15,TCASTPTR(,TWAPTR)                               0070
         L     TSBPTR,TCASTSB(,@15)                                0070
*           DO WHILE TSBPTR^=0;     /* CHECK EACH TSB        @ZM21019*/
         B     @DE00071                                            0071
@DL00071 DS    0H                                                  0072
*             IF TSBXWREC='1'B THEN /* WAITING FOR RECONNECT?      0072
*                                                            @ZM21019*/
         L     @15,TSBEXTNT(,TSBPTR)                               0072
         TM    TSBXWREC(@15),B'00010000'                           0072
         BNO   @RF00072                                            0072
*               DO;                 /*                       @ZM21019*/
*                 RFY                                              0074
*                  (R2,                                            0074
*                   R3,                                            0074
*                   R4) RSTD;       /* RESTRICT REGS         @ZM21019*/
*                 R2=ADDR(TSBXECB); /* GET ADDRESS OF RECONNECT ECB
*                                                            @ZM21019*/
         LA    R2,TSBXECB(,@15)                                    0075
*                 R3=TSBASCB;       /* ADDRESS OF ASCB       @ZM21019*/
         L     R3,TSBASCB-1(,TSBPTR)                               0076
         LA    R3,0(,R3)                                           0076
*                 R4=ADDR(TCASBR14);/* USE A BR14 INSTRUCTION FOR THE
*                                      ERRET PARAMETER               */
         L     R4,TCASTPTR(,TWAPTR)                                0077
         LA    R4,TCASBR14(,R4)                                    0077
*                 GEN CODE REFS(R2,R3,R4) SETS(R0,R1);             0078
*                                                    /*     @ZM21019*/
                POST (R2),ASCB=(R3),ERRET=(R4) /*TIMER ECB  @ZM21019*/
*                 RFY                                              0079
*                  (R2,                                            0079
*                   R3,                                            0079
*                   R4) UNRSTD;     /* FREE UP REGS          @ZM21019*/
*               END;                /* END POST              @ZM21019*/
*             ELSE                                                 0081
*               ;                   /* GO TO NEXT TSB        @ZM21019*/
@RF00072 DS    0H                                                  0082
*             TSBPTR=TSBXFWD;       /* GET ADDRESS OF THE NEXT TSB 0082
*                                                            @ZM21019*/
         L     @15,TSBEXTNT(,TSBPTR)                               0082
         L     @00,TSBXFWD(,@15)                                   0082
         LR    TSBPTR,@00                                          0082
*           END;                    /* END OF TSB LOOP       @ZM21019*/
@DE00071 LTR   TSBPTR,TSBPTR                                       0083
         BNZ   @DL00071                                            0083
*         END;                      /* END OF HALT OR HALT QUICK   0084
*                                      PROCESSING            @ZM21019*/
*     END;                          /* END VTAM ENTRY        @ZM44523*/
@RC00050 DS    0H                                                  0086
*   CALL ADDSYN;                    /* ADD CLOSE ACB W.E. TO Q       */
@RF00045 BAL   @14,ADDSYN                                          0086
*/*  *****************************************************************/
*/*   IF THE SYNCHRONOUS (SYNC) QUEUE WAS NOT EMPTY, THE COMPARE     */
*/*   AND SWAP USED TO ADD THE CLOSE ACB W.E. TO THAT QUEUE WILL     */
*/*   FAIL (TEMPTR^=0). IN THAT CASE, A WORK ELEMENT IS OBTAINED,    */
*/*   ITS ADDRESS PUT INTO REG10, AND IT IS PLACED IN THE            */
*/*   ASYNCHRONOUS QUEUE. WHEN IT IS PICKED OFF THE ASYNC QUEUE      */
*/*   BY IKTCAS20, IKTCAS24 WILL BE RE-DRIVEN, WITH ITS ADDRESS IN   */
*/*   REG10 AND IKTCAS24 WILL RE-TRY PUTTING THE CLOSE ACB W.E.      */
*/*   ON THE SYNC QUEUE. IF THAT TRY FAILS AGAIN, THE WORK ELEMENT   */
*/*   POINTED TO BY REG10 IS RE-USED, AND PLACED AGAIN ON THE ASYNC  */
*/*   QUEUE TO CAUSE IKTCAS24 TO BE DRIVEN AGAIN.  THIS PROCESS      */
*/*   CONTINUES UNTIL THE CLOSE ACB W.E. FOR TCAS CAN SUCCESSFULLY   */
*/*   BE PLACED ON THE SYNC QUEUE.                                   */
*/*  *****************************************************************/
*                                                                  0087
*   IF TEMPPTR^=0 THEN              /* IF CS NOT SUCCESSFUL          */
         SLR   @06,@06                                             0087
         CR    TEMPPTR,@06                                         0087
         BE    @RF00087                                            0087
*     DO;                           /* DO THE FOLLOWING              */
*       IF ENTCON^=0 THEN           /* IS CALLED BY VTAM             */
         CR    ENTCON,@06                                          0089
         BE    @RF00089                                            0089
*         DO;                       /* YES-GET WORK ELEMENT FOR ASYNC
*                                      QUEUE                         */
*           RESPECIFY                                              0091
*            (R2,                                                  0091
*             R3) RESTRICTED;       /* FREEZE FOR GETMAIN            */
*           R2=16;                  /* LENGTH OF W.E.'S              */
         LA    R2,16                                               0092
*           R3=5;                   /* SUBPOOL NUMBER                */
         LA    R3,5                                                0093
*           GEN(GETMAIN EU,LV=(R2),A=GSPTR,SP=(R3))/* GET SPACE      */
*           SETS(GSPTR);                                           0094
         GETMAIN EU,LV=(R2),A=GSPTR,SP=(R3)
*           R10=GSPTR;              /* W.E. PTR                      */
         L     R10,GSPTR                                           0095
*           RESPECIFY                                              0096
*            (R2,                                                  0096
*             R3) UNRESTRICTED;     /* FREE UP                       */
*           WECODE1T=TCVTAM;        /* SETUP                         */
         MVI   WECODE1T(R10),X'02'                                 0097
*           WECODE1F=FCVTPEND;      /* TPEND                         */
         MVI   WECODE1F(R10),X'41'                                 0098
*           WECODE2T=TCVTAM;        /* W.E. TO RE-DRIVE THIS         */
         MVI   WECODE2T(R10),X'02'                                 0099
*           WECODE2F=FCVTPEND;      /* MODULE.                       */
         MVI   WECODE2F(R10),X'41'                                 0100
*           WERC=0;                 /* .                             */
         SLR   @15,@15                                             0101
         STH   @15,WERC(,R10)                                      0101
*           WELEN=16;               /* .                             */
         MVC   WELEN(2,R10),@CH00098                               0102
*           WENEXT=0;               /* .                             */
         ST    @15,WENEXT(,R10)                                    0103
*         END;                                                     0104
*                                                                  0104
*       /*************************************************************/
*       /*                                                           */
*       /* AT THIS POINT, THE ATTEMPT TO PUT TCAS TERMINATION WORK   */
*       /* ELEMENTS ON THE SYNC QUEUE HAS FAILED. EITHER REG 10      */
*       /* POINTS TO THE WORK ELEMENT JUST OBTAINED AND INITIALIZED, */
*       /* OR REG 10 STILL POINTS TO A WORK ELEMENT OBTAINED BY A    */
*       /* PREVIOUS CALL TO IKTCAS24. IN EITHER CASE, THAT WORK      */
*       /* ELEMENT IS PLACED ON THE ASYNC QUEUE FOR THE PURPOSE OF   */
*       /* RE-DRIVING THIS MODULE.                                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0105
*       CALL ADDASYN;               /* PROCESS W.E.                  */
@RF00089 BAL   @14,ADDASYN                                         0105
*     END;                                                         0106
*   ELSE                            /* CS SUCCESSFUL                 */
*     IF ENTCON=0 THEN              /* CALLED BY DRIVER              */
         B     @RC00087                                            0107
@RF00087 LTR   ENTCON,ENTCON                                       0107
         BNZ   @RF00107                                            0107
*       DO;                         /* FREE ASYNC QUEUE WORK ELEMENT,
*                                      IT IS NO LONGER NEEDED        */
*         GSPTR=R10;                /* FREEMAIN PTR                  */
         ST    R10,GSPTR                                           0109
*         RFY                                                      0110
*          (R2,                                                    0110
*           R3) RSTD;                                              0110
*         R2=WELEN;                 /* FREEMAIN LENGTH               */
         LH    R2,WELEN(,R10)                                      0111
*         R3=5;                     /* SP NUMBER                     */
         LA    R3,5                                                0112
*         GEN SETS(GSPTR);                                         0113
        FREEMAIN E,A=GSPTR,LV=(R2),SP=(R3)    FREEMAIN W.E.AREA
*         RFY                                                      0114
*          (R2,                                                    0114
*           R3) UNRSTD;                                            0114
*       END;                                                       0115
         EJECT
*                                                                  0116
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS PROCEDURE ADD A W.E. TO THE ASYNCHRONOUS Q               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0116
*ADDASYN:                                                          0116
*   PROC OPTIONS(SAVE(14));         /* ADD A W.E. TO TPEND Q         */
         B     @PB00002                                            0116
ADDASYN  ST    @14,12(,@13)                                        0116
*   RFY                                                            0117
*     WESTD BASED(R10);                                            0117
*ADDLOOP:                                                          0118
*   TEMPPTR=TWAVTEQH;               /* W.E.                          */
ADDLOOP  L     TEMPPTR,TWAVTEQH(,TWAPTR)                           0118
*   WENEXT=TEMPPTR;                 /* ON                            */
         ST    TEMPPTR,WENEXT(,R10)                                0119
*   CS(TEMPPTR,R10,TWAVTEQH);       /* ASYNC Q                       */
         CS    TEMPPTR,@10,TWAVTEQH(TWAPTR)                        0120
*   BC(7,ADDLOOP);                  /* AND                           */
         BC    7,ADDLOOP                                           0121
*   END ADDASYN;                    /* EXIT                          */
@EL00002 DS    0H                                                  0122
@EF00002 DS    0H                                                  0122
@ER00002 L     @14,12(,@13)                                        0122
         BR    @14                                                 0122
         EJECT
*                                                                  0123
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS PROCEDURE ADD A W.E. TO THE SYNCHRONOUS QUEUE            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0123
*ADDSYN:                                                           0123
*   PROC OPTIONS(SAVE(14));         /* ADD W.E. TO SYNC Q            */
ADDSYN   ST    @14,@SA00003                                        0123
*   RFY                                                            0124
*     WESTD BASED(ADDR(WEAREA));                                   0124
*   WECODE1F=FCVIAC;                /* CLOSE ACB W.E.                */
         LA    @06,WEAREA                                          0125
         MVI   WECODE1F(@06),X'12'                                 0125
*   WECODE1T=TCVTAM;                /* VTAM INT CODE                 */
         MVI   WECODE1T(@06),X'02'                                 0126
*   WECODE2T='00'X;                 /* DUMMY OUT                     */
         MVI   WECODE2T(@06),X'00'                                 0127
*   WELEN=12;                       /* W.E. LENGTH                   */
         MVC   WELEN(2,@06),@CH00072                               0128
*   WERC=0;                         /* NO OP                         */
         SLR   @02,@02                                             0129
         STH   @02,WERC(,@06)                                      0129
*   TEMPPTR=0;                      /* ZERO FOR COMPARE SWAP         */
         SLR   TEMPPTR,TEMPPTR                                     0130
*   RFY                                                            0131
*     R2 RSTD;                                                     0131
*   R2=ADDR(WEAREA);                /* ADDR OF W.E. TO BE Q          */
         LR    R2,@06                                              0132
*   CS(TEMPPTR,R2,TWASYNQH);        /* Q W.E. TO SYNC Q              */
         CS    TEMPPTR,@02,TWASYNQH(TWAPTR)                        0133
*   IF TEMPPTR=0 THEN               /* IF CS SUCCESSFUL              */
         SLR   @06,@06                                             0134
         CR    TEMPPTR,@06                                         0134
         BNE   @RF00134                                            0134
*     DO;                           /* THEN DO                       */
*       R2=24;                      /* GETMAIN LENGTH        @YM03217*/
         LA    R2,24                                               0136
*       GEN;                                                       0137
         GETMAIN R,LV=(R2),SP=5    GETMAIN FOR BUILDING W.E.@YM03217
         XC    0(24,R1),0(R1)      CLEAR STORAGE            @YM03217
*       WENEXT=R1;                  /* NEXT W.E. PTR                 */
         LA    @06,WEAREA                                          0138
         ST    R1,WENEXT(,@06)                                     0138
*       RFY                                                        0139
*         WESTD BASED(R1);                                         0139
*       WECODE1T=TCMAIN;            /* MAIN TASK CODE                */
         MVI   WECODE1T(R1),X'01'                                  0140
*       WECODE1F=FCMLTT;            /* TCAS TERMINATION FUNC         */
         MVI   WECODE1F(R1),X'80'                                  0141
*       WELEN=12;                   /* W.E. LENGTH                   */
         LA    @06,12                                              0142
         STH   @06,WELEN(,R1)                                      0142
*       WERC=7;                     /* TERMINATION ROUTINE ENTRY CODE*/
         MVC   WERC(2,R1),@CH00122                                 0143
*       WENEXT=R1+12;               /* NEXT W.E. PTR                 */
         LR    @00,R1                                              0144
         ALR   @00,@06                                             0144
         ST    @00,WENEXT(,R1)                                     0144
*       R1=R1+12;                   /* UPDATE PTR TO NEXT WE         */
         ALR   R1,@06                                              0145
*       WECODE1T=TCMAIN;            /* MAIN TASK CODE                */
         MVI   WECODE1T(R1),X'01'                                  0146
*       WECODE1F=FCMLET;            /* END MAIN TASK FUNCTION        */
         MVI   WECODE1F(R1),X'91'                                  0147
*       WELEN=12;                   /* W.E. LENGTH                   */
         STH   @06,WELEN(,R1)                                      0148
*       WERC2=RCTPEND;              /* TERMINATION REASON CODE       */
         MVI   WERC2(R1),X'3C'                                     0149
*       R1=9;                       /* MESSAGE NUMBER                */
         LA    R1,9                                                0150
*       CALL MSGBLK;                /* ADDR OF LIST FORM OF MSG      */
         L     @15,TWAMSG(,TWAPTR)                                 0151
         BALR  @14,@15                                             0151
*       R1=ADDR(IKT009I);           /* ADDR OF MSG                   */
         LA    @06,IKT009I(,R1)                                    0152
         LR    R1,@06                                              0152
*       R2=ADDR(TWAVECB);           /* VTAM INT SUBTASK ECB          */
         LA    R2,TWAVECB(,TWAPTR)                                 0153
*       GEN;                                                       0154
         WTO   MF=(E,(1))    ISSUE TPEND MSG
         POST  (R2)          POST VTAM INT TASK TO CLOSE ACB
*     END;                                                         0155
*   RFY                                                            0156
*     R2 UNRSTD;                                                   0156
*   END ADDSYN;                                                    0157
@EL00003 DS    0H                                                  0157
@EF00003 DS    0H                                                  0157
@ER00003 L     @14,@SA00003                                        0157
         BR    @14                                                 0157
@PB00003 DS    0H                                                  0157
         EJECT
*   GEN;                                                           0158
         LA    R15,0           RETURN CODE
         LM    R0,R14,SAVE1    RESTORE REGISTERS
         BR    R14             RETURN TO CALLER
*   END IKTCAS24                                                   0159
*                                                                  0159
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IKTCASWA)                                       */
*/*%INCLUDE SYSLIB  (IKJTSB  )                                       */
*/*%INCLUDE SYSLIB  (IKTTSBX )                                       */
*/*%INCLUDE SYSLIB  (IKTTCAST)                                       */
*                                                                  0159
*       ;                                                          0159
@DATA    DS    0H
@CH00122 DC    H'7'
@CH00072 DC    H'12'
@CH00098 DC    H'16'
         DS    0F
@SA00003 DS    1F
         DS    0F
@CF00061 DC    F'8'
@CA00051 DC    A(IKTWAPTR)
         DS    0D
GSPTR    DS    A
WEAREA   DS    CL12
SAVE1    DS    15A
SAVE2    DS    18A
PATCH    DC    13A(0)
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
TSBPTR   EQU   @06
ENTCON   EQU   @07
TEMPPTR  EQU   @03
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R10      EQU   @10
TWAPTR   EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
         EXTRN IKTWAPTR
MSGBLK   EQU   0
@NM00001 EQU   0
VTAMRSN  EQU   @NM00001+4
@NM00002 EQU   0
MSGDATA  EQU   @NM00002+4
WESTD    EQU   0
WECODE1T EQU   WESTD
WECODE1F EQU   WESTD+1
WECODE2T EQU   WESTD+2
WECODE2F EQU   WESTD+3
WENEXT   EQU   WESTD+4
WERC     EQU   WESTD+8
WERC2    EQU   WERC+1
WELEN    EQU   WESTD+10
TWAR     EQU   0
TWASYNQH EQU   TWAR+4
TWATCAST EQU   TWAR+20
TWAMSG   EQU   TWAR+48
TWAMFL   EQU   TWAR+80
TWAVFL   EQU   TWAR+81
TWAUFL   EQU   TWAR+82
TWACFL   EQU   TWAR+83
TWAM     EQU   TWAR+84
TWAME    EQU   TWAM+68
TWAMEI   EQU   TWAME
TWAV     EQU   TWAR+184
TWAVE    EQU   TWAV+68
TWAVEI   EQU   TWAVE
TWAVI    EQU   TWAR+284
TWAVECB  EQU   TWAVI
TWAVTEQH EQU   TWAVI+4
TWAU     EQU   TWAR+300
TWAUE    EQU   TWAU+68
TWAUEI   EQU   TWAUE
TWAUI    EQU   TWAR+400
TWAC     EQU   TWAR+408
TWACE    EQU   TWAC+68
TWACEI   EQU   TWACE
TWACI    EQU   TWAR+508
TWACECB  EQU   TWACI
TWACSTPQ EQU   TWACI+4
TSB      EQU   0
TSBASCBA EQU   TSB
TSBSTAT  EQU   TSBASCBA
TSBASCB  EQU   TSBASCBA+1
TSBFLG1  EQU   TSB+4
TSBFLG2  EQU   TSB+16
TSBFLG3  EQU   TSB+24
TSBFLG5  EQU   TSB+25
TSBTERMC EQU   TSB+26
TSBTERM1 EQU   TSBTERMC
TSBTERM2 EQU   TSBTERMC+1
TSBSTCC  EQU   TSB+34
TSBFLG4  EQU   TSB+41
TSBRCB   EQU   TSB+64
TSBLINKA EQU   TSBRCB+4
TSBTPOST EQU   TSB+72
TSBTPFLG EQU   TSBTPOST
TSBMINL  EQU   TSB+84
TSBEXTNT EQU   TSB+96
TSBX     EQU   0
TSBXFWD  EQU   TSBX
TSBXECB  EQU   TSBX+8
TSBXFLG1 EQU   TSBX+32
TSBXWREC EQU   TSBXFLG1
TSBXTIM  EQU   TSBX+40
TSBXTOM  EQU   TSBX+44
TSBXTERM EQU   TSBX+72
TCAST    EQU   0
TCASUSER EQU   TCAST+4
TCASTSB  EQU   TCAST+68
TCASFLG1 EQU   TCAST+88
TCASVSD  EQU   TCASFLG1
TCASHAST EQU   TCASFLG1
TCASBR14 EQU   TCAST+116
IKT009I  EQU   MSGDATA
TCASTPTR EQU   TWATCAST
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
TCASTEND EQU   TCAST+148
TCASTTYO EQU   TCAST+144
TCAS767O EQU   TCAST+140
TCAS767I EQU   TCAST+136
TCASDUMP EQU   TCAST+132
TCASSCHD EQU   TCAST+128
TCASTPND EQU   TCAST+124
TCASOMJR EQU   TCAST+120
@NM00030 EQU   TCAST+118
TCASATTN EQU   TCAST+112
TCASASCI EQU   TCAST+108
TCASTTQH EQU   TCAST+104
@NM00029 EQU   TCAST+102
@NM00028 EQU   TCAST+100
TCASTGTF EQU   TCAST+96
TCASASCB EQU   TCAST+92
TCASFLG4 EQU   TCAST+91
TCASFLG3 EQU   TCAST+90
TCASFLG2 EQU   TCAST+89
TCASCONF EQU   TCASFLG1
@NM00027 EQU   TCASFLG1
TCASNACT EQU   TCASFLG1
TCASABND EQU   TCASFLG1
TCASMDSW EQU   TCASFLG1
TCASBKMD EQU   TCASFLG1
TCASLTE  EQU   TCAST+84
TCASEXIT EQU   TCAST+80
TCASOQM  EQU   TCAST+76
TCASIQM  EQU   TCAST+72
TCASTTL  EQU   TCAST+64
TCASWA   EQU   TCAST+60
TCASFRR  EQU   TCAST+56
TCASMSGS EQU   TCAST+52
TCASDATO EQU   TCAST+48
TCASDATI EQU   TCAST+44
TCASXECB EQU   TCAST+40
TCASTID  EQU   TCAST+32
@NM00026 EQU   TCAST+31
TCASCHNL EQU   TCAST+30
TCASCRSZ EQU   TCAST+28
TCASLBUF EQU   TCAST+24
TCASHBUF EQU   TCAST+20
TCASCLSZ EQU   TCAST+18
TCASRCON EQU   TCAST+16
TCASACBP EQU   TCAST+8
TCASUMAX EQU   TCASUSER+2
TCASUSEC EQU   TCASUSER
TCASID   EQU   TCAST
TSBXEND  EQU   TSBX+128
@NM00025 EQU   TSBX+124
TSBXDMMO EQU   TSBX+120
TSBXDMMI EQU   TSBX+116
TSBXBIND EQU   TSBX+80
TSBXRPL  EQU   TSBX+76
TSBXTMBF EQU   TSBXTERM+2
TSBXSUBT EQU   TSBXTERM+1
TSBXTMTP EQU   TSBXTERM
TSBXAIND EQU   TSBX+70
TSBXRSZO EQU   TSBX+69
TSBXRSZI EQU   TSBX+68
TSBXLBUF EQU   TSBX+64
TSBXCSAP EQU   TSBX+60
TSBXSRB  EQU   TSBX+56
TSBXSRBI EQU   TSBX+52
@NM00024 EQU   TSBX+48
TSBXDPMO EQU   TSBXTOM
TSBXDPMI EQU   TSBXTIM
TSBXTVWA EQU   TSBX+36
TSBXFLG4 EQU   TSBX+35
TSBXFLG3 EQU   TSBX+34
TSBXFLG2 EQU   TSBX+33
@NM00023 EQU   TSBXFLG1
TSBXTGTF EQU   TSBXFLG1
TSBXNOSW EQU   TSBXFLG1
TSBXLOGF EQU   TSBXFLG1
TSBXACTV EQU   TSBXFLG1
TSBXASCI EQU   TSBXFLG1
TSBXUID  EQU   TSBX+24
TSBXLMOD EQU   TSBX+16
TSBXNIB  EQU   TSBX+12
TSBXBCK  EQU   TSBX+4
TSBEND   EQU   TSB+120
TSBSF1   EQU   TSB+112
TSBTRMID EQU   TSB+104
TSBALTC  EQU   TSB+103
TSBALTR  EQU   TSB+102
TSBPRMC  EQU   TSB+101
TSBPRMR  EQU   TSB+100
TSBPSWD  EQU   TSB+88
TSBLECB  EQU   TSBMINL
TSBLINE  EQU   TSB+82
TSBSTAX  EQU   TSB+81
TSBATTNC EQU   TSB+80
TSBF1V   EQU   TSBTPOST+7
TSBF1M   EQU   TSBTPOST+6
TSBF2V   EQU   TSBTPOST+5
TSBF2M   EQU   TSBTPOST+4
TSBFLAGV EQU   TSBTPOST+3
TSBFLAGM EQU   TSBTPOST+2
@NM00022 EQU   TSBTPOST+1
@NM00021 EQU   TSBTPFLG
@NM00020 EQU   TSBTPFLG
@NM00019 EQU   TSBTPFLG
@NM00018 EQU   TSBTPFLG
TSBNEWID EQU   TSBTPFLG
TSBTPAYI EQU   TSBTPFLG
TSBTPQCB EQU   TSBTPFLG
TSBPOSTO EQU   TSBTPFLG
TSBLINKB EQU   TSBLINKA+1
TSBPRI   EQU   TSBLINKA
TSBRQCB  EQU   TSBRCB
TSBCTCB  EQU   TSB+60
TSBERSDS EQU   TSB+56
TSBAUTOI EQU   TSB+52
TSBAUTOS EQU   TSB+48
TSBATNCC EQU   TSB+44
TSBASRCE EQU   TSB+42
TSBHLDL  EQU   TSBFLG4
TSBGETBF EQU   TSBFLG4
TSBCANC  EQU   TSBFLG4
TSBHOLD  EQU   TSBFLG4
TSBHUNG  EQU   TSBFLG4
TSBOWAIT EQU   TSBFLG4
TSBIWAIT EQU   TSBFLG4
TSBOCAB  EQU   TSBFLG4
TSBLNNO  EQU   TSB+40
TSBATNTC EQU   TSB+38
TSBATNLC EQU   TSB+36
TSBCHDCC EQU   TSBSTCC+1
TSBLNDCC EQU   TSBSTCC
TSBWTJID EQU   TSB+32
TSBECB   EQU   TSB+28
TSBC1050 EQU   TSBTERM2
@NM00017 EQU   TSBTERM2
@NM00016 EQU   TSBTERM2
@NM00015 EQU   TSBTERM2
@NM00014 EQU   TSBTERM2
TSBCTWX  EQU   TSBTERM2
@NM00013 EQU   TSBTERM2
@NM00012 EQU   TSBTERM2
@NM00011 EQU   TSBTERM1
@NM00010 EQU   TSBTERM1
@NM00009 EQU   TSBTERM1
TSBC2741 EQU   TSBTERM1
TSBC5041 EQU   TSBTERM1
TSBCATTN EQU   TSBTERM1
TSBCBRK  EQU   TSBTERM1
TSBCIHBN EQU   TSBTERM1
TSBVTAM  EQU   TSBFLG5
TSBKEYS  EQU   TSBFLG5
TSBNEDIT EQU   TSBFLG5
TSBQRY   EQU   TSBFLG5
@NM00008 EQU   TSBFLG5
TSBSPF   EQU   TSBFLG5
TSBATMP  EQU   TSBFLG5
TSBNFLOP EQU   TSBFLG3
TSBNOBRK EQU   TSBFLG3
TSBTPUT  EQU   TSBFLG3
TSBAWOIP EQU   TSBFLG3
TSBNBKSP EQU   TSBFLG3
TSBSPIT  EQU   TSBFLG3
TSBTJMSG EQU   TSBFLG3
TSBATTN  EQU   TSBFLG3
TSBIBFP  EQU   TSB+21
TSBNIBF  EQU   TSB+20
TSBITBFP EQU   TSB+17
TSBSATN2 EQU   TSBFLG2
TSBSATN1 EQU   TSBFLG2
TSBSTAUT EQU   TSBFLG2
TSBAUTOC EQU   TSBFLG2
TSBAULST EQU   TSBFLG2
TSBBRKIN EQU   TSBFLG2
TSBAUTON EQU   TSBFLG2
TSBBIPI  EQU   TSBFLG2
TSBOBFP  EQU   TSB+13
TSBNOBF  EQU   TSB+12
TSBOTBFP EQU   TSB+9
TSBLNSZ  EQU   TSB+8
TSBWTCB  EQU   TSB+5
TSBTJBF  EQU   TSBFLG1
TSBTJIP  EQU   TSBFLG1
TSBTJOW  EQU   TSBFLG1
TSBIFLSH EQU   TSBFLG1
TSBWOWIP EQU   TSBFLG1
TSBOWIP  EQU   TSBFLG1
TSBOFLSH EQU   TSBFLG1
TSBANSR  EQU   TSBFLG1
TSBATNLD EQU   TSBSTAT
TSB3270  EQU   TSBSTAT
TSBDISC  EQU   TSBSTAT
TSBITOFF EQU   TSBSTAT
TSBNOBUF EQU   TSBSTAT
TSBDSPLY EQU   TSBSTAT
TSBLWAIT EQU   TSBSTAT
TSBINUSE EQU   TSBSTAT
TWAEND   EQU   TWAR+536
TWAWORKE EQU   TWAR+524
@NM00007 EQU   TWACI+13
TWACSKIP EQU   TWACI+12
TWACMODQ EQU   TWACI+8
TWACERRS EQU   TWACE+4
TWACERA  EQU   TWACEI+1
TWACEIFC EQU   TWACEI
TWACRTFC EQU   TWAC+60
TWACABFC EQU   TWAC+56
TWACTWA  EQU   TWAC+52
TWACEWA  EQU   TWAC+4
TWACID   EQU   TWAC
TWAUACQH EQU   TWAUI+4
TWAUECB  EQU   TWAUI
TWAUERRS EQU   TWAUE+4
TWAUERA  EQU   TWAUEI+1
TWAUEIFC EQU   TWAUEI
TWAURTFC EQU   TWAU+60
TWAUABFC EQU   TWAU+56
TWAUTWA  EQU   TWAU+52
TWAUEWA  EQU   TWAU+4
TWAUID   EQU   TWAU
TWAVACQH EQU   TWAVI+12
TWAVTHQH EQU   TWAVI+8
TWAVERRS EQU   TWAVE+4
TWAVERA  EQU   TWAVEI+1
TWAVEIFC EQU   TWAVEI
TWAVRTFC EQU   TWAV+60
TWAVABFC EQU   TWAV+56
TWAVTWA  EQU   TWAV+52
TWAVEWA  EQU   TWAV+4
TWAVID   EQU   TWAV
TWAMERRS EQU   TWAME+4
TWAMERA  EQU   TWAMEI+1
TWAMEIFC EQU   TWAMEI
TWAMRTFC EQU   TWAM+60
TWAMABFC EQU   TWAM+56
TWAMTWA  EQU   TWAM+52
TWAMEWA  EQU   TWAM+4
TWAMID   EQU   TWAM
@NM00006 EQU   TWACFL
TWACFL4  EQU   TWACFL
TWACFL2  EQU   TWACFL
TWACFL1  EQU   TWACFL
@NM00005 EQU   TWAUFL
TWAUFL4  EQU   TWAUFL
TWAUFL3  EQU   TWAUFL
TWAUFL2  EQU   TWAUFL
TWAUFL1  EQU   TWAUFL
@NM00004 EQU   TWAVFL
TWAVFL6  EQU   TWAVFL
TWAVFL5  EQU   TWAVFL
TWAVFL4  EQU   TWAVFL
TWAVFL3  EQU   TWAVFL
TWAVFL2  EQU   TWAVFL
TWAVFL1  EQU   TWAVFL
@NM00003 EQU   TWAMFL
TWAMFL1  EQU   TWAMFL
TWACCOMP EQU   TWAR+76
TWAUCOMP EQU   TWAR+72
TWAVCOMP EQU   TWAR+68
TWAMECB  EQU   TWAR+64
TWACTCB  EQU   TWAR+60
TWAUTCB  EQU   TWAR+56
TWAVTCB  EQU   TWAR+52
TWADEQAS EQU   TWAR+44
TWAEESR  EQU   TWAR+40
TWAPPSR  EQU   TWAR+36
TWATCSR  EQU   TWAR+32
TWATTSR  EQU   TWAR+28
TWAINIT  EQU   TWAR+24
TWACSCB  EQU   TWAR+16
TWAASCB  EQU   TWAR+12
TWAPASQH EQU   TWAR+8
TWARSON  EQU   TWAR+2
TWACOMP  EQU   TWAR
WERC1    EQU   WERC
MSGLNGTH EQU   @NM00002
VTAMACB  EQU   @NM00001
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@PB00002 EQU   @PB00003
@RF00134 EQU   @EL00003
@RF00107 EQU   @PB00002
@RC00087 EQU   @PB00002
@ENDDATA EQU   *
         END   IKTCAS24,(C'PLS1944',0702,80232)
