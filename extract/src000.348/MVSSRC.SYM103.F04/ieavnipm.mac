         TITLE 'IEAVNIPM - NIP CONTROL/SERVICE ROUTINES                *
                        '
         MACRO
         NIPMENTR   &SAVE,&LABEL
         BALR  RENTRY,0
         BCTR  RENTRY,0
         BCTR  RENTRY,0
         STM   RNVT,RPARM,&SAVE-&LABEL.(RENTRY)  SAVE REGISTERS
         LM    RBASE,RBASE2,NVTNIPM-NVT(RNVT)
         MEND
IEAVNIPM CSECT ,                                                   0006
@MAINENT DS    0H                                                  0006
         USING *,@15                                               0006
         B     @PROLOG                                             0006
         DC    AL2(@EP00006-@MAINENT)
         DC    AL1(16)                                             0006
         DC    C'IEAVNIPM  77.111'                                 0006
NIPXCDIC DS    0H                                                  0006
         USING *,@15                                               0006
         B     @PROLOG                                             0006
         DC    AL2(@EP00604-NIPXCDIC)
         ENTRY NIPXCDIC
NIPEBCDX DS    0H                                                  0006
         USING *,@15                                               0006
         B     @PROLOG                                             0006
         DC    AL2(@EP00612-NIPEBCDX)
         ENTRY NIPEBCDX
         DROP  @15
@PROLOG  BALR  @10,0                                               0006
@PSTART  LA    @11,4095(,@10)                                      0006
         LA    @12,4095(,@11)                                      0006
         USING @PSTART,@10                                         0006
         USING @PSTART+4095,@11                                    0006
         USING @PSTART+8190,@12                                    0006
         AH    @15,4(,@15)                                         0006
         BR    @15                                                 0006
@EP00006 DS    0H                                                  0007
RBPRFXLN EQU 64
RBPRFLNA EQU 32
PRBLEN   EQU 136
SIRBLEN  EQU 200
TIRBLEN  EQU 136
IRBLEN   EQU 128
SVRBLEN  EQU 224
         LA   RSAVE,NIPSAVE
         STM  RBASE,RBASE2,NVTNIPM
*   NVTFTCHA=REG5;                  /*                       @ZM00857*/
*                                                                  0420
         ST    REG5,NVTFTCHA                                       0420
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE INITIAL NVT FROM NIP0 TO IEAVNIPM                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0421
*/*                                                           YM2448 */
*                                                                  0421
*   N=ADDR(NVTIX)-ADDR(NVT)+1;      /* COMPUTE INVT LENGTH           */
         LA    @05,232                                             0421
         ST    @05,N                                               0421
*   NVT(1:N)=INVT(1:N);             /* MOVE INVT DATA TO NVT         */
         BCTR  @05,0                                               0422
         EX    @05,@SM05051                                        0422
*   RNVT=ADDR(NVT);                 /* SET POINTER TO NVT            */
*                                                                  0423
         LA    RNVT,NVT                                            0423
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE SYS1.NUC DEB EXTENT AND SYSTEM APPENDAGE TABLE ADDR TO   */
*   /* NIPM                                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0424
*   RPARM=RPARM->DCBDEBAD;          /* LOAD SYS1.NUC DEB ADDRESS     */
         L     @05,DCBDEBAD-1(,RPARM)                              0424
         LA    @05,0(,@05)                                         0424
         LR    RPARM,@05                                           0424
*   RNIPM=ADDR(NIPDEBSN);           /* LOAD PTR TO NIPM DEB          */
         LA    RNIPM,NIPDEBSN                                      0425
*   RNIPM->DEBAPPAD=RPARM->DEBAPPAD;/* MOVE APPENDAGE ADDR           */
         L     @05,DEBAPPAD(,RPARM)                                0426
         ST    @05,DEBAPPAD(,RNIPM)                                0426
*   RNIPM->DEBAPFIN='1'B;           /* SET APF FLAG                  */
         OI    DEBAPFIN(RNIPM),B'00000010'                         0427
*   RESPECIFY                                                      0428
*     DEBBASIC BASED(RPARM);        /* POINT TO NIP0 DEB             */
*   RPARM=ADDR(DEBBASND);           /* ADDRESS OF NIP0 DEB EXTENT    */
         LA    @05,DEBBASND(,RPARM)                                0429
         LR    RPARM,@05                                           0429
*   RESPECIFY                                                      0430
*     DEBBASIC BASED(RNIPM);        /* POINT TO NIPM DEB             */
*   RNIPM=ADDR(DEBBASND);           /* ADDRESS OF NIPM DEB EXTENT    */
         LA    @05,DEBBASND(,RNIPM)                                0431
         LR    RNIPM,@05                                           0431
*   RNIPM->DEBDASD=RPARM->DEBDASD;  /* MOVE DEB EXTENT               */
*                                                                  0432
         MVC   DEBDASD(16,RNIPM),DEBDASD(RPARM)                    0432
*   /*****************************************************************/
*   /*                                                               */
*   /* CALCULATE THE SIZE OF THE LOGREC RECORD FOR SYSTEM TERMINATION*/
*   /* PROCESSING, AND ALLOCATE SPACE IN THE TOP OF THE NUCLEUS      */
*   /* BUFFER FOR IT. THIS RECORD IS USED BY THE NIPSWAIT ROUTINE TO */
*   /* PASS INFORMATION TO THE RMS SYSTEM TERMINATION ROUTINE WHEN   */
*   /* TERMINATING THE IPL.                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0433
*   NVTNBFND=(NVTNBFND-(LENGTH(LRB)+LENGTH(LRBTTER)))×7&&7;        0433
         LA    @05,7                                               0433
         LA    @15,32                                              0433
         L     @00,NVTNBFND                                        0433
         SLR   @00,@15                                             0433
         OR    @00,@05                                             0433
         XR    @00,@05                                             0433
         ST    @00,NVTNBFND                                        0433
*   NVTNBFND->LRB=NVTNBFND->LRB&&NVTNBFND->LRB;/* SET TO 0'S         */
         LR    @05,@00                                             0434
         XC    LRB(24,@05),LRB(@05)                                0434
*   NVTNBFND->LRBHTYPE=LRBHTER;     /* IDENTIFY RECORD AS SYS TER    */
         LR    @05,@00                                             0435
         MVI   LRBHTYPE(@05),X'81'                                 0435
*   NVTNBFND->LRBTLNH=LENGTH(LRB)+LENGTH(LRBTTER);                 0436
*                                                                  0436
         LR    @05,@00                                             0436
         ST    @15,LRBTLNH(,@05)                                   0436
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING CODE SETS THE MACHINE CHECK TRAPS FOR THE       */
*   /* REMAINDER OF NIP PROCESSING. IT REPLACES THE MACHINE CHECK NEW*/
*   /* PSW ADDRESS PORTION WITH A POINTER TO THE NIP MACHINE CHECK   */
*   /* TRAP. IT SEARCHES FOR ALL CPUS THAT ARE ONLINE AND SETS THE   */
*   /* TRAP FOR EACH CPU. THIS TRAP IS RESET AT THE END OF NIP       */
*   /* PROCESSING BY IEAVNP06 (MCH RIM).                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0437
*   DO I=1 BY 1 TO 16;              /* SEARCH FOR ONLINE CPUS        */
         LA    @05,1                                               0437
         ST    @05,I                                               0437
@DL00437 DS    0H                                                  0438
*     RNIPM=PCCAT00P(I);            /* ADDRESS OF PCCA               */
         SLA   @05,2                                               0438
         L     @15,CVTPTR                                          0438
         L     @15,CVTPCCAT(,@15)                                  0438
         AL    @15,@CF05054                                        0438
         L     RNIPM,PCCAT00P(@05,@15)                             0438
*     IF RNIPM^=0                   /* IS THIS CPU ONLINE?           */
*       THEN                        /* IF SO, SET THE MCH TRAP       */
         LTR   RNIPM,RNIPM                                         0439
         BZ    @RF00439                                            0439
*       ADDR(RNIPM->PCCAPSAV->FLCMNPSW)->NPMCADDR=ADDR(NPMMCTRP);  0440
         L     @05,PCCAPSAV(,RNIPM)                                0440
         LA    @00,NPMMCTRP                                        0440
         ST    @00,NPMCADDR+112(,@05)                              0440
*     ELSE                                                         0441
*       ;                                                          0441
@RF00439 DS    0H                                                  0442
*   END;                                                           0442
         LA    @05,1                                               0442
         AL    @05,I                                               0442
         ST    @05,I                                               0442
         C     @05,@CF00081                                        0442
         BNH   @DL00437                                            0442
*   ADDR(FLCMNPSW)->NPMCADDR=ADDR(NPMMCTRP);/* TRAP THIS CPU         */
*                                                                  0443
         LA    @05,112                                             0443
         LA    @00,NPMMCTRP                                        0443
         ST    @00,NPMCADDR(,@05)                                  0443
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE MALFUNCTION ALERT ADDR TO POINT TO TRAP            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0444
*   NVTMFA->MFAADDR=ADDR(NPMMFA);                                  0444
*                                                                  0444
         LA    @05,NPMMFA                                          0444
         L     @15,NVTMFA                                          0444
         ST    @05,MFAADDR(,@15)                                   0444
*   /*****************************************************************/
*   /*                                                               */
*   /* SET TRAP FOR RTM1 BRANCH ENTRIES. IEAVNIP0 HAS ALREADY SAVED  */
*   /* THE REAL RTM1 BRANCH TABLE ADDRESS IN THE NVT.                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0445
*   CVTBTERM=ADDR(NPRTMTAB);        /* SETUP RTM1 TRAP ROUTINE       */
         L     @05,CVTPTR                                          0445
         LA    @00,NPRTMTAB                                        0445
         ST    @00,CVTBTERM(,@05)                                  0445
*   CVTBTERM->RTMBMACH=NVTRTMSA->RTMBMACH;/* OPEN M/C ENTRY          */
*                                                                  0446
         L     @15,NVTRTMSA                                        0446
         L     @15,RTMBMACH(,@15)                                  0446
         LR    @14,@00                                             0446
         ST    @15,RTMBMACH(,@14)                                  0446
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE XCTL AND TYPE 3 & 4 SVC TRAPS                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0447
*   RNIPM=CVTABEND->SCVTSVCT;       /* LOAD ADDR OF SVC TABLE FROM 0447
*                                      SECONDARY CVT                 */
*                                                                  0447
         L     @15,CVTABEND(,@05)                                  0447
         L     RNIPM,SCVTSVCT(,@15)                                0447
*   /*****************************************************************/
*   /*                                                               */
*   /* SAVE LOCATE SVC ENTRY IN NVT AND MOVE IN TRAP ENTRY           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0448
*   NVTLOCAT=NPLOCENT;              /* SAVE OLD ENTRY                */
         MVC   NVTLOCAT(8),NPLOCENT(RNIPM)                         0448
*   NPLOCENT=LOCTRAP;               /* SET NIP LOCATE TRAP (SETS TO
*                                      TYPE 3 AND 4 SVC)             */
         MVC   NPLOCENT(8,RNIPM),LOCTRAP                           0449
*   NVTXCTL=XCTLEP;                 /* SAVE XCTL ENTRY POINT IN NVT  */
         MVC   NVTXCTL(8),XCTLEP(RNIPM)                            0450
*   XCTLADDR=ADDR(NIPSVC);          /* SET XCTL ENTRY TO ADDR OF   0451
*                                      NIPSVCX ROUTINE               */
*                                                                  0451
         LA    @05,NIPSVC                                          0451
         STCM  @05,15,XCTLADDR(RNIPM)                              0451
*   /*****************************************************************/
*   /*                                                               */
*   /* FIND TYPE 3 AND 4 SVC'S IN TABLE AND SET ADDRESSES TO POINT TO*/
*   /* NIPSVC ROUTINE                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0452
*   TOTCOUNT='0100'X;               /* GET TOTAL NUMBER OF IBM SVC   */
         MVC   TOTCOUNT(2),@CH04814                                0452
*NPMSVC:                            /* SVC ENTRY TEST LOOP           */
*                                                                  0453
*   /*****************************************************************/
*   /*                                                               */
*   /* HAVE ALL ENTRIES BEEN CHECKED ?                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0453
*   IF TOTCOUNT^=0                  /* COUNT DECREMENTED TO ZERO?    */
*     THEN                          /* NO - CONTINUE                 */
NPMSVC   LH    @05,TOTCOUNT                                        0453
         LTR   @05,@05                                             0453
         BZ    @RF00453                                            0453
*     DO;                           /* CHECK SVC TYPE                */
*                                                                  0454
*       /*************************************************************/
*       /*                                                           */
*       /* IS THIS A TYPE 3 OR 4                                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0455
*       IF SVCTYPE='1100'B          /* TYPE 3 OR 4 ?                 */
*         THEN                      /* YES - SET TRAP                */
         TM    SVCTYPE(RNIPM),B'11000000'                          0455
         BNO   @RF00455                                            0455
         TM    SVCTYPE(RNIPM),B'00110000'                          0455
         BNZ   @RF00455                                            0455
*         SVCAD=ADDR(NIPSVC);       /* POINT SVC TO NIPSVC ROUTINE   */
         LA    @05,NIPSVC                                          0456
         ST    @05,SVCAD(,RNIPM)                                   0456
*       TOTCOUNT=TOTCOUNT-'0001'X;  /* DECREMENT COUNT               */
@RF00455 LH    @05,TOTCOUNT                                        0457
         BCTR  @05,0                                               0457
         STH   @05,TOTCOUNT                                        0457
*       RNIPM=RNIPM+8;              /* POINT TO NEXT ENTRY           */
         AL    RNIPM,@CF00125                                      0458
*       GO TO NPMSVC;               /* CONTINUE SEARCH               */
         B     NPMSVC                                              0459
*     END;                                                         0460
*                                                                  0460
*   /*****************************************************************/
*   /*                                                               */
*   /* SET TRAP FOR UNEXPECTED ABEND REQUESTS                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0461
*   RNIPM=CVTABEND->SCVTSVCT;       /* LOAD ADDRESS OF SVC TABLE FROM
*                                      SECONDARY CVT                 */
@RF00453 L     @15,CVTPTR                                          0461
         L     @14,CVTABEND(,@15)                                  0461
         L     RNIPM,SCVTSVCT(,@14)                                0461
*   ABEND=ABENDAD;                  /* STORE TRAP IN SVC TABLE       */
*                                                                  0462
         MVC   ABEND(8,RNIPM),ABENDAD                              0462
*   /*****************************************************************/
*   /*                                                               */
*   /* SET TRAP FOR SVC 60 (ESTAE) ENTRIES                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0463
*   SVC60AD=ADDR(NPMSVC60);         /* SET SVC TABLE ENTRY           */
         LA    @05,NPMSVC60                                        0463
         ST    @05,SVC60AD(,RNIPM)                                 0463
*   CVTSV60=ADDR(NPMSVC60);         /* SET CVT BRANCH ENTRY          */
*                                                                  0464
         ST    @05,CVTSV60(,@15)                                   0464
*   /*****************************************************************/
*   /*                                                               */
*   /* SET TRAP FOR SQA EXPANSION REQUEST. REQUEST IS INVALID UNTIL  */
*   /* THE PAGING SUPERVISIOR HAS BEEN INITIALIZED.                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0465
*   NVTPQSAV=CVTPVTP->PVTPSQA;      /* SAVE PAGING SUPERVISOR'S    0465
*                                      GET-SQA-PAGE RTN IN NVT     0465
*                                      (ALREADY BACKED BY 2 SEGS)    */
         L     @05,CVTPVTP(,@15)                                   0465
         L     @00,PVTPSQA(,@05)                                   0465
         ST    @00,NVTPQSAV                                        0465
*   CVTPVTP->PVTPSQA=ADDR(NIPSQEND);/* SET TRAP FOR SQA EXPANSION    */
*                                                                  0466
         LA    @00,NIPSQEND                                        0466
         ST    @00,PVTPSQA(,@05)                                   0466
*   /*****************************************************************/
*   /*                                                               */
*   /* PRIME THE V=V AND V=R TCB PTRS WITH MASTERS ADDRESS           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0467
*   NVTVVTCB=NVTMSTCB;                                             0467
         L     @05,NVTMSTCB                                        0467
         ST    @05,NVTVVTCB                                        0467
*   NVTVRTCB=NVTMSTCB;                                             0468
*                                                                  0468
         ST    @05,NVTVRTCB                                        0468
*   /*****************************************************************/
*   /*                                                               */
*   /* GET TOD CLOCK VALUE FROM A GOOD CLOCK AND SAVE IN NVT         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0469
*   TOTCOUNT=0;                     /* INIT COUNT OF CPU'S SEARCHED
*                                      FOR GOOD CLOCK                */
         SLR   @05,@05                                             0469
         STH   @05,TOTCOUNT                                        0469
*   NVTCPUAD=PSAPCCAV->PCCACPUA;    /* SAVE CPU ADDRESS IN NVT FOR 0470
*                                      NIPTIME                       */
         L     @05,PSAPCCAV(,@05)                                  0470
         LH    @05,PCCACPUA(,@05)                                  0470
         STH   @05,NVTCPUAD                                        0470
*NPMTTIME:                                                         0471
*   GEN(IEAPMNIP TYPE=TIME,PARAM=DEC,MOD=NIPM);                    0471
NPMTTIME IEAPMNIP TYPE=TIME,PARAM=DEC,MOD=NIPM
*   IF NVTFLNCK^='1'B               /* CLOCK INOPERATIVE FLAG ON?    */
*     THEN                          /* IF NOT,                       */
         TM    NVTFLNCK,B'00000100'                                0472
         BO    @RF00472                                            0472
*     NVTTOD=CONSTANT;              /* SAVE GOOD CLOCK VALUE.        */
         L     @05,CONSTANT                                        0473
         ST    @05,NVTTOD                                          0473
*   ELSE                            /* IF CLOCK INOPERATIVE,         */
*     IF NVTMP='1'B                 /* CHECK FOR MP.                 */
*       THEN                        /* IF MP, SEARCH FOR A           */
         B     @RC00472                                            0474
@RF00472 TM    NVTMP,B'00100000'                                   0474
         BNO   @RF00474                                            0474
*       DO;                         /* GOOD CLOCK ON ANOTHER CPU.    */
*         IF TOTCOUNT=0             /* IS THIS FIRST CPU SRCHED      */
*           THEN                    /* IF FIRST CPU,                 */
         LH    @05,TOTCOUNT                                        0476
         LTR   @05,@05                                             0476
         BNZ   @RF00476                                            0476
*           IPLEDCPU=NVTCPUAD;      /* SAVE IPLED CPU ADDR           */
         MVC   IPLEDCPU(2),NVTCPUAD                                0477
*NPMPFIND:                                                         0478
*         IF TOTCOUNT<'0010'X       /* ARE ALL CPU'S SEARCHED?       */
*           THEN                    /* NO, CONTINUE SEARCH           */
@RF00476 DS    0H                                                  0478
NPMPFIND LH    @05,TOTCOUNT                                        0478
         C     @05,@CF04822                                        0478
         BNL   @RF00478                                            0478
*           DO;                                                    0479
*                                                                  0479
*             /*******************************************************/
*             /*                                                     */
*             /* UPDATE PTR TO PCCA VECTOR TABLE ENTRY               */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0480
*             RNIPM=CVTPCCAT+(TOTCOUNT*4);                         0480
         LR    RNIPM,@05                                           0480
         SLA   RNIPM,2                                             0480
         L     @15,CVTPTR                                          0480
         AL    RNIPM,CVTPCCAT(,@15)                                0480
*             IF RNIPM->PCCAT00P(1)=0/* OFFLINE CPU                  */
*               THEN                /* YES, GO TRY NEXT ONE          */
         L     @00,PCCAT00P(,RNIPM)                                0481
         LTR   @00,@00                                             0481
         BNZ   @RF00481                                            0481
*               DO;                                                0482
*                 TOTCOUNT=TOTCOUNT+'0001'X;                       0483
         AL    @05,@CF04818                                        0483
         STH   @05,TOTCOUNT                                        0483
*                 GO TO NPMPFIND;                                  0484
         B     NPMPFIND                                            0484
*               END;                                               0485
*             ELSE                  /* NO, PICKUP CPU ADDR           */
*               DO;                                                0486
@RF00481 DS    0H                                                  0487
*                 IF RNIPM->PCCAT00P(1)->PCCACPUA=IPLEDCPU THEN/* IF
*                                      IPLED CPU, SKIP TO NXT        */
         L     @05,PCCAT00P(,RNIPM)                                0487
         CLC   PCCACPUA(2,@05),IPLEDCPU                            0487
         BNE   @RF00487                                            0487
*                   DO;                                            0488
*                     TOTCOUNT=TOTCOUNT+'0001'X;                   0489
         LA    @05,1                                               0489
         AH    @05,TOTCOUNT                                        0489
         STH   @05,TOTCOUNT                                        0489
*                     GO TO NPMPFIND;                              0490
         B     NPMPFIND                                            0490
*                   END;                                           0491
*                 ELSE              /* TRY THE NEW CPU               */
*                   DO;                                            0492
@RF00487 DS    0H                                                  0493
*                     NVTCPUAD=RNIPM->PCCAT00P(1)->PCCACPUA;       0493
         L     @05,PCCAT00P(,RNIPM)                                0493
         LH    @05,PCCACPUA(,@05)                                  0493
         STH   @05,NVTCPUAD                                        0493
*                     TOTCOUNT=TOTCOUNT+'0001'X;                   0494
         LA    @05,1                                               0494
         AH    @05,TOTCOUNT                                        0494
         STH   @05,TOTCOUNT                                        0494
*                     NVTFLNCK='0'B;                               0495
         NI    NVTFLNCK,B'11111011'                                0495
*                     GO TO NPMTTIME;                              0496
         B     NPMTTIME                                            0496
*                   END;                                           0497
*               END;                                               0498
*           END;                                                   0499
*         ELSE                                                     0500
*           ;                                                      0500
@RF00478 DS    0H                                                  0501
*       END;                                                       0501
*     ELSE                                                         0502
*       ;                                                          0502
*                                                                  0502
@RF00474 DS    0H                                                  0503
*   /*****************************************************************/
*   /*                                                               */
*   /* GET STORAGE TO MOVE FETCH FROM NIP0 TO GETMAINED STORAGE FOR  */
*   /* USE UNTIL NP05 HAS BUILT PLPA                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0503
*   REG5=NPFTCHE-NPFTCHB;           /* LENGTH OF STORAGE     @ZM00857*/
@RC00472 L     @15,NVTFTCHA                                        0503
         L     REG5,NPFTCHE(,@15)                                  0503
         SL    REG5,NPFTCHB(,@15)                                  0503
*   GEN(GETMAIN R,LV=(5),SP=252);   /* GET STORAGE FOR FETCH @ZM00857*/
         GETMAIN R,LV=(5),SP=252
*   FTCHSTRT=RPARM;                 /* SAVE START ADDRESS    @ZM00857*/
*                                                                  0505
         ST    RPARM,FTCHSTRT                                      0505
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP TO MOVE FETCH TO NEW AREA                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0506
*   RFY                                                            0506
*    (REG4,                                                        0506
*     REG5,                                                        0506
*     REG6,                                                        0506
*     REG7) RSTD;                                                  0506
*   REG4=FTCHSTRT;                  /* START OF NEW AREA     @ZM00857*/
         L     @15,FTCHSTRT                                        0507
         LR    REG4,@15                                            0507
*   REG6=NPFTCHB;                   /* FROM ADDRESS          @ZM00857*/
         L     @15,NVTFTCHA                                        0508
         L     @14,NPFTCHB(,@15)                                   0508
         LR    REG6,@14                                            0508
*   REG5=NPFTCHE-NPFTCHB;           /* LENGTH OF MOVE        @ZM00857*/
         LCR   @14,@14                                             0509
         AL    @14,NPFTCHE(,@15)                                   0509
         LR    REG5,@14                                            0509
*   REG7=REG5;                      /* LENGTH OF MOVE        @ZM00857*/
         LR    REG7,REG5                                           0510
*   GEN(MVCL REG4,REG6);            /* MOVE FETCH            @ZM00857*/
*                                                                  0511
         MVCL REG4,REG6
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE APPENDAGES TO NUC BUFFER                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0512
*   REG4=NVTNUCND;                  /* ADDRESS OF NUC BUFFER @ZM00857*/
         L     REG4,NVTNUCND                                       0512
*   REG5=(NPFTCHT-NPFTCHA);         /* LENGTH OF TABLE       @ZM00857*/
         L     @15,NVTFTCHA                                        0513
         L     @14,NPFTCHA(,@15)                                   0513
         L     REG5,NPFTCHT(,@15)                                  0513
         SLR   REG5,@14                                            0513
*   REG6=NPFTCHA;                   /* ADDRESS OF APPENDAGES @ZM00857*/
         LR    REG6,@14                                            0514
*   REG7=REG5;                      /* LENGTH OF MOVE        @ZM00857*/
         LR    REG7,REG5                                           0515
*   GEN(MVCL REG4,REG6);            /* MOVE APPENDAGES       @ZM00857*/
         MVCL REG4,REG6
*   RFY                                                            0517
*    (REG4,                                                        0517
*     REG5,                                                        0517
*     REG6,                                                        0517
*     REG7) UNRSTD;                                                0517
*   ADCONBAS=NVTNUCND;              /* ADDRESS OF ADCONS     @ZM00857*/
         L     @05,NVTNUCND                                        0518
         ST    @05,ADCONBAS                                        0518
*   DO I=5 TO 1 BY-1;               /* LOOP TO UPDATE 5 ADCONS     0519
*                                                            @ZM00857*/
         LA    @05,5                                               0519
         ST    @05,I                                               0519
@DL00519 DS    0H                                                  0520
*     FTCHADCN=FTCHADCN-(NPFTCHA-NVTNUCND);/* ADD NEW OFFSET @ZM00857*/
         L     @15,ADCONBAS                                        0520
         L     @14,NVTFTCHA                                        0520
         L     @00,NPFTCHA(,@14)                                   0520
         SL    @00,NVTNUCND                                        0520
         LCR   @00,@00                                             0520
         AL    @00,FTCHADCN(,@15)                                  0520
         ST    @00,FTCHADCN(,@15)                                  0520
*     ADCONBAS=ADCONBAS+4;          /* INCREMENT TO NEXT ADCON     0521
*                                                            @ZM00857*/
         AL    @15,@CF00109                                        0521
         ST    @15,ADCONBAS                                        0521
*   END;                                                           0522
*                                                                  0522
         BCTR  @05,0                                               0522
         ST    @05,I                                               0522
         LTR   @05,@05                                             0522
         BP    @DL00519                                            0522
*   /*****************************************************************/
*   /*                                                               */
*   /* UPDATE ADDRESS OF ADCON TABLE IN FETCH CSECT WHICH WAS MOVED  */
*   /* TO NIP TRANSIENT AREA                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0523
*   ADCONBAS=FTCHSTRT+(NPFTCHA-NPFTCHB)-4;/* ADDR OF ADCON PTR     0523
*                                                            @ZM00857*/
         L     @05,FTCHSTRT                                        0523
         L     @15,NVTFTCHA                                        0523
         L     @14,NPFTCHA(,@15)                                   0523
         LR    @00,@14                                             0523
         SL    @00,NPFTCHB(,@15)                                   0523
         ALR   @00,@05                                             0523
         SL    @00,@CF00109                                        0523
         ST    @00,ADCONBAS                                        0523
*   FTCHADCN=NVTNUCND;              /* POINT TO NEW LOCATION @ZM00857*/
*                                                                  0524
         L     @09,NVTNUCND                                        0524
         LR    @08,@00                                             0524
         ST    @09,FTCHADCN(,@08)                                  0524
*   /*****************************************************************/
*   /*                                                               */
*   /* UPDATE NUC END ADDRESS                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0525
*   NVTNUCND=NVTNUCND+(NPFTCHT-NPFTCHA)+7×7&&7;/* ROUND UP   @ZM00857*/
*                                                                  0525
         LA    @08,7                                               0525
         LCR   @14,@14                                             0525
         AL    @14,NPFTCHT(,@15)                                   0525
         ALR   @09,@14                                             0525
         ALR   @09,@08                                             0525
         OR    @09,@08                                             0525
         XR    @09,@08                                             0525
         ST    @09,NVTNUCND                                        0525
*   /*****************************************************************/
*   /*                                                               */
*   /* UPDATE CVT TO POINT TO NEW FETCH                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0526
*   CVTFETCH=FTCHSTRT;              /* NEW LOCATION OF FETCH @ZM00857*/
*                                                                  0526
         L     @15,CVTPTR                                          0526
         ST    @05,CVTFETCH(,@15)                                  0526
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE STORAGE MAP FROM NIP0 OVER TO GETMAINED AREA             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0527
*   GEN(  GETMAIN  R,LV=4096,SP=252);/* GETMAIN FOR STORAGE MAP TO BE
*                                      MOVED.                        */
           GETMAIN  R,LV=4096,SP=252
*   DO I=0 BY 1 TO 15;              /* MOVE MAP TO NEW AREA          */
         SLR   @05,@05                                             0528
         ST    @05,I                                               0528
@DL00528 DS    0H                                                  0529
*     RPARM->STORMAP(1+I*256:256+I*256)=NVTSTMAP->STORMAP(1+I*256:256+I
*         *256);                                                   0529
         LR    @15,@05                                             0529
         SLA   @15,8                                               0529
         ST    @15,@TF00001                                        0529
         ALR   @15,RPARM                                           0529
         L     @14,NVTSTMAP                                        0529
         AL    @14,@TF00001                                        0529
         MVC   STORMAP(256,@15),STORMAP(@14)                       0529
*   END;                                                           0530
         AL    @05,@CF00144                                        0530
         ST    @05,I                                               0530
         C     @05,@CF00122                                        0530
         BNH   @DL00528                                            0530
*   NVTSTMAP=RPARM;                 /* UPDATE NVT POINTER TO MAP     */
         ST    RPARM,NVTSTMAP                                      0531
*   IF NVTSGPSA^=0                  /* SEE IF PSA WAS SAVED          */
*     THEN                          /* IF SO, MOVE IT TO NIP REGN    */
         L     @05,NVTSGPSA                                        0532
         LTR   @05,@05                                             0532
         BZ    @RF00532                                            0532
*     DO;                                                          0533
*       GEN( GETMAIN R,LV=4096,SP=252);/* GETMAIN PSA AREA           */
          GETMAIN R,LV=4096,SP=252
*       DO I=0 BY 1 TO 15;                                         0535
         SLR   @05,@05                                             0535
         ST    @05,I                                               0535
@DL00535 DS    0H                                                  0536
*         RPARM->NIPSGPSA(1+I*256:256+I*256)=NVTSGPSA->NIPSGPSA(1+I*256
*             :256+I*256);                                         0536
         LR    @15,@05                                             0536
         SLA   @15,8                                               0536
         ST    @15,@TF00001                                        0536
         ALR   @15,RPARM                                           0536
         L     @14,NVTSGPSA                                        0536
         AL    @14,@TF00001                                        0536
         MVC   NIPSGPSA(256,@15),NIPSGPSA(@14)                     0536
*       END;                                                       0537
         AL    @05,@CF00144                                        0537
         ST    @05,I                                               0537
         C     @05,@CF00122                                        0537
         BNH   @DL00535                                            0537
*       NVTSGPSA=RPARM;             /* SAVE NEW ADDRESS OF PSA MAP   */
         ST    RPARM,NVTSGPSA                                      0538
*     END;                                                         0539
*   ELSE                                                           0540
*     ;                                                            0540
@RF00532 DS    0H                                                  0541
*                                                                  0541
*   /*****************************************************************/
*   /*                                                               */
*   /* LOAD, EXECUTE AND DELETE NIP PROCESSOR MODULES                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0541
*   SFXINDEX=1;                     /* INIT. SUFFIX LIST INDEX       */
         MVC   SFXINDEX(4),@CF00144                                0541
*NPMNEXT:                           /* LOAD NEXT PROCESSOR           */
*   SUFFIX=SUFXLIST(SFXINDEX);      /* OBTAIN PROCESSOR SUFFIX       */
NPMNEXT  L     @05,SFXINDEX                                        0542
         ALR   @05,@05                                             0542
         LA    @15,SUFXLIST-2(@05)                                 0542
         MVC   SUFFIX(2),0(@15)                                    0542
*   RPARM=ADDR(NIPMNAME);           /* PLACE PROCESSOR NAME ADDR IN
*                                      PARAMETER REGISTER            */
         LA    RPARM,NIPMNAME                                      0543
*NPMLOAD:                           /* CALL FIND-AND-LOAD PROCESSOR
*                                      MODULE ROUTINE                */
*   CALL NIPLOAD;                   /* CALL LOAD ROUTINE             */
NPMLOAD  BAL   @14,NIPLOAD                                         0544
*   GENERATE;                                                      0545
*                                                                  0545
*                                      /* GEN LINKAGE TO MODULE      */
          LR    RENTRY,RPARM              LOAD BRANCH ADDRESS
          BALR  REXIT,RENTRY              BRANCH TO PROCESSOR
*   /*****************************************************************/
*   /*                                                               */
*   /* DELETE PROCESSOR ON ITS RETURN                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0546
*   GEN( DELETE DE=NIPMNAME);       /* DELETE PROCESSOR MODULE       */
*                                                                  0546
          DELETE DE=NIPMNAME
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR SPECIAL CONDITIONS TO HANDLE IN SUBROUTINES         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0547
*   IF NVTPAREA^=0                  /* IF PARMAREA HAS BEEN CREATED
*                                      (SET UP BY IEAVNP03)          */
*     THEN                                                         0547
         L     @05,NVTPAREA                                        0547
         LTR   @05,@05                                             0547
         BZ    @RF00547                                            0547
*     NVTPAREA->NIPPAFL1='0'B;      /* TURN OFF SPIO SPECIAL FLAG    */
         NI    NIPPAFL1(@05),B'01111111'                           0548
*   SFXINDEX=SFXINDEX+1;            /* INCREMENT SUFFIX INDEX        */
@RF00547 LA    @05,1                                               0549
         AL    @05,SFXINDEX                                        0549
         ST    @05,SFXINDEX                                        0549
*   IF SUFFIX='01'                  /* IF IEAVNPA1 WAS LAST MODULE   */
*     THEN                          /* THEN INITIATE OPERATOR        */
         CLC   SUFFIX(2),@CC04830                                  0550
         BNE   @RF00550                                            0550
*     CALL NIPOPIOC;                /* COMMUNICATION.                */
         BAL   @14,NIPOPIOC                                        0551
*   IF SUFFIX='B2'                  /* IF IEAVNP01 WAS LAST MODULE   */
*     THEN                          /* THEN OPEN SVCLIB AND LOGREC 0552
*                                      (PSEUDO OPEN - BUILDS PARTIAL
*                                      DEB)                          */
@RF00550 CLC   SUFFIX(2),@CC04831                                  0552
         BNE   @RF00552                                            0552
*     CALL NPMOPLIB;                /* DATA SETS.                    */
         BAL   @14,NPMOPLIB                                        0553
*/*                                                           YM01632*/
*                                                                  0554
*   IF SUFFIX='03'                  /* IF LAST MODULE WAS IEAVNP03   */
*     THEN                          /* THEN CHECK FOR CLPA AND       */
@RF00552 CLC   SUFFIX(2),@CC04832                                  0554
         BNE   @RF00554                                            0554
*     DO;                           /* PARAMETERS.            YM01632*/
*       IF NVTPTAB->CLPA=0          /* WAS CLPA SPECIFIED ?YM01632   */
*         THEN                      /* IF SO, SET QS FLAG.    YM01632*/
         L     @05,NVTPTAB                                         0556
         L     @05,CLPA(,@05)                                      0556
         LTR   @05,@05                                             0556
         BNZ   @RF00556                                            0556
*         NVTFLQS='1'B;             /* SET QS FLAG ON.        YM01632*/
         OI    NVTFLQS,B'00001000'                                 0557
*       IF NVTPTAB->CVIO=0          /* WAS CVAM SPECIFIED     YM01632*/
*         THEN                      /* IF SO SET WS FLAG      YM01632*/
@RF00556 L     @05,NVTPTAB                                         0558
         L     @05,CVIO(,@05)                                      0558
         LTR   @05,@05                                             0558
         BNZ   @RF00558                                            0558
*         NVTFLWS='1'B;             /* SET WS FLAG ON.        YM01632*/
         OI    NVTFLWS,B'00000100'                                 0559
*     END;                                                         0560
*                                                                  0560
@RF00558 DS    0H                                                  0561
*/*                                                           YM00138*/
*                                                                  0561
*   IF SUFXLIST(SFXINDEX)='10'      /* IF IEAVNP10 IS NEXT   @Z40WPXA*/
*     THEN                          /* THEN BUILD PFTES AND SETUP    */
@RF00554 L     @05,SFXINDEX                                        0561
         ALR   @05,@05                                             0561
         LA    @15,SUFXLIST-2(@05)                                 0561
         CLC   0(2,@15),@CC04833                                   0561
         BNE   @RF00561                                            0561
*     CALL NPMPFTBL;                /* FOR PAGING.                   */
         BAL   @14,NPMPFTBL                                        0562
*   IF SUFXLIST(SFXINDEX)='04' THEN /* IF NP04 IS NEXT       @Z40WPXA*/
@RF00561 L     @05,SFXINDEX                                        0563
         ALR   @05,@05                                             0563
         LA    @15,SUFXLIST-2(@05)                                 0563
         CLC   0(2,@15),@CC04834                                   0563
         BNE   @RF00563                                            0563
*     CALL NPMPREP4;                /* GO LOAD ILRPREAD      @Z40WPXA*/
         BAL   @14,NPMPREP4                                        0564
*   IF SUFXLIST(SFXINDEX)='A8'      /* IF NEXT MODULE IS IEAVNPA8    */
*     THEN                          /* THEN SETUP FOR SQA ANALYSIS   */
@RF00563 L     @05,SFXINDEX                                        0565
         ALR   @05,@05                                             0565
         LA    @15,SUFXLIST-2(@05)                                 0565
         CLC   0(2,@15),@CC04836                                   0565
         BNE   @RF00565                                            0565
*     CALL NPMPREP8;                /* AND INITIALIZATION OF C.B.S   */
         BAL   @14,NPMPREP8                                        0566
*   IF SUFXLIST(SFXINDEX)='05'      /* IF NEXT MODULE IS IEAVNP05    */
*     THEN                          /* THEN SETUP FOR QUICK START    */
@RF00565 L     @05,SFXINDEX                                        0567
         ALR   @05,@05                                             0567
         LA    @15,SUFXLIST-2(@05)                                 0567
         CLC   0(2,@15),@CC04837                                   0567
         BNE   @RF00567                                            0567
*     CALL NPMPREP5;                /* PROCESSING.                   */
         BAL   @14,NPMPREP5                                        0568
*   IF SUFFIX='05'                  /* IF IEAVNP05 WAS LAST MODULE   */
*     THEN                          /* THEN CLEANUP V=V REGION       */
@RF00567 CLC   SUFFIX(2),@CC04837                                  0569
         BNE   @RF00569                                            0569
*     CALL NPMCLNUP;                /* AND FREE QUICK START RECORD   */
         BAL   @14,NPMCLNUP                                        0570
*   IF SUFXLIST(SFXINDEX)='C8'      /* IF NEXT MODULE IS IEAVNPC8    */
*     THEN                          /* THEN SETUP V=R VALUES FOR     */
@RF00569 L     @05,SFXINDEX                                        0571
         ALR   @05,@05                                             0571
         LA    @15,SUFXLIST-2(@05)                                 0571
         CLC   0(2,@15),@CC04838                                   0571
         BNE   @RF00571                                            0571
*     CALL NPMVRREG;                /* IT TO PROCESS.                */
         BAL   @14,NPMVRREG                                        0572
*   IF SUFXLIST(SFXINDEX)='XX'      /* IF NEXT MODULE IS IEAVNIPX    */
*     THEN                          /* THEN PICK UP NAME OF NIPX     */
@RF00571 L     @05,SFXINDEX                                        0573
         ALR   @05,@05                                             0573
         LA    @15,SUFXLIST-2(@05)                                 0573
         CLC   0(2,@15),@CC04839                                   0573
         BNE   @RF00573                                            0573
*     DO;                                                          0574
*       RPARM=ADDR(NIPXNAME);       /* ADDRESS OF NIPX               */
         LA    RPARM,NIPXNAME                                      0575
*       GO TO NPMLOAD;              /* GO LOAD THE LAST MODULE       */
         B     NPMLOAD                                             0576
*     END;                                                         0577
*   GO TO NPMNEXT;                  /* GO TO RETRIEVE NEXT SUFFIX    */
         B     NPMNEXT                                             0578
*                                                                  0579
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE TRAPS OUT SVC CALLS TO TYPE 3 AND 4        SVC'S.*/
*   /* IF THE CALL IS TO THE SYSTEM LOCATE ROUTINE (SVC 26), IT LOADS*/
*   /* THE LOCATE RIM (IEAVNP12) AND GIVES IT CONTROL TO DO THE      */
*   /* LOCATE FUNCTION. IF THE CALL IS FOR ANY OTHER TYPE 3 OR 4 SVC,*/
*   /* IT IS AN ERROR AND THE SYSTEM IS PLACED IN A DISABLED WAIT    */
*   /* STATE. THIS TRAP IS REMOVED BY IEAVNP05 WHEN THE LPA HAS BEEN */
*   /* CONSTRUCTED AND THE SVC ROUTINES RESIDING THERE ARE AVAILABLE.*/
*   /* LOCATE TRAP AND ABEND TRAP NOT TAKEN OUT UNTIL NIPX.          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0579
*/*           RESTRICT REGISTERS FOR NIPSVC ROUTINE                  */
*                                                                  0579
*   RESPECIFY                                                      0579
*    (RPARM,                        /* PARAMETER REGISTER            */
*     RUCB,                         /* UCB POINTER                   */
*     RBSECPTR,                     /* RB POINTER                    */
*     ENTPT6) RESTRICTED;           /* ENTRY ADDRESS                 */
*NIPSVC:                                                           0580
*   GENERATE REFS(SVCREGS,FLCCVT,RBLINK);                          0580
NIPSVC   DS    0H                                                  0580
          STM   RNVT,RPARM,SVCREGS-NIPSVC(ENTPT6)  SAVE REGISTERS
          LR    RBASE,ENTPT6
          LA    RBASE2,NIPSVC-@PSTART    FIND SUBROUTINE OFFSET
          SR    RBASE,RBASE2             LOAD NIPM BASE 1
          LA    RBASE1,4095(0,RBASE)     LOAD NIPM BASE 2
          LA    RBASE2,4095(0,RBASE1)    LOAD NIPM BASE 3
          LA    RNVT,NVT                 SET NVT PTR
          L     RCVT,FLCCVT              SET CVT PTR
          L     RBSECPTR,RBLINK(5)        LINK BACK TO PREVIOUS RB
          LA    RSAVE,NSVCSAV             SETUP TEMPORARY SAVE AREA
*   IF RBINTCOD='001A'X             /* IF IT IS THE LOCATE SVC       */
*     THEN                          /* PASS BACK VOLSER.             */
         LR    @07,RBSECPTR                                        0581
         BCTR  @07,0                                               0581
         BCTR  @07,0                                               0581
         CLC   RBINTCOD-62(2,@07),@CB04842                         0581
         BNE   @RF00581                                            0581
*     DO;                                                          0582
*                                                                  0582
*       /*************************************************************/
*       /*                                                           */
*       /* CHECK TO SEE IF NP12 HAS ALREADY BEEN LOADED. IF SO PICK  */
*       /* UP ADDRESS AND BALR                                       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0583
*       IF NP12EP^=0 THEN           /* NIP12 LOADED?         @ZM30464*/
         L     @07,NP12EP                                          0583
         LTR   @07,@07                                             0583
         BZ    @RF00583                                            0583
*         DO;                                                      0584
*           PARMSAVE=RPARM;         /* SAVE PARM REG         @ZM30464*/
         ST    RPARM,PARMSAVE                                      0585
*           RPARM=NP12EP;           /* PICK UP NIP12 EP      @ZM30464*/
         LR    RPARM,@07                                           0586
*         END;                                                     0587
*       ELSE                                                       0588
*                                                                  0588
*         /***********************************************************/
*         /*                                                         */
*         /* NIP12 HAS NOT BEEN LOADED. LOAD MODULE, AND SAVE IT'S   */
*         /* ENTRY POINT FOR FOLLOWING CALLS                         */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0588
*         DO;                                                      0588
         B     @RC00583                                            0588
@RF00583 DS    0H                                                  0589
*           PARMSAVE=RPARM;         /* SAVE PARAMETER LIST           */
         ST    RPARM,PARMSAVE                                      0589
*           RPARM=ADDR(NPLOCMOD);   /* ADDR OF IEAVNP12 NAME         */
         LA    RPARM,NPLOCMOD                                      0590
*           CALL NIPLOAD;           /* DOES BLDL AND LOADS THE MODULE*/
         BAL   @14,NIPLOAD                                         0591
*           NP12EP=RPARM;           /* SAVE ENTRY POINT      @ZM30464*/
         ST    RPARM,NP12EP                                        0592
*         END;                                                     0593
*       GENERATE;                                                  0594
@RC00583 DS    0H                                                  0594
         LR    RENTRY,RPARM             GET ADDRESS OF IEAVNP12
         L     RPARM,PARMSAVE           RESTORE PARAMETER LIST
         BALR  REXIT,RENTRY             GO TO LOCATE ROUTINE
         ST    RENTRY,SVCREGS+52        SAVE RETURN CODE
         LM    RNVT,RPARM,SVCREGS       RESTORE REGISTERS
         BR    REXIT                    RETURN TO CALLER
*SVCREGS:                           /* SAVEAREA FOR THIS RTN         */
*       GEN(DS 16F);                                               0595
SVCREGS  DS 16F
*NSVCSAV:                                                          0596
*       GEN(DS  18F);               /* TEMPORARY SAVE AREA           */
NSVCSAV  DS  18F
*     END;                          /* END OF 'DO' CODE              */
*   ELSE                                                           0598
*     ;                                                            0598
@RF00581 DS    0H                                                  0599
*   CALL NIPLKCHK;                  /* GO GET NIP LOCK               */
         BAL   @14,NIPLKCHK                                        0599
*   NPMIDPSW=RBINTCOD;              /* PUT SVC CODE IN PSW           */
         LR    @07,RBSECPTR                                        0600
         BCTR  @07,0                                               0600
         BCTR  @07,0                                               0600
         MVC   NPMIDPSW(2),RBINTCOD-62(@07)                        0600
*   NPMFLWSC=NVTWCN12;              /* SET WAIT STATE CODE           */
         MVI   NPMFLWSC,X'65'                                      0601
*   GEN(IEAPMNIP TYPE=SWAIT,MOD=NIPM);/* GO TO DISABLED WAIT         */
         IEAPMNIP TYPE=SWAIT,MOD=NIPM
*   RESPECIFY                                                      0603
*    (RUCB,                                                        0603
*     RBSECPTR,                                                    0603
*     ENTPT6) UNRESTRICTED;                                        0603
*NIPXCDIC:                                                         0604
*   ENTRY;                          /* HEX TO EBCDIC CONVERT         */
*                                                                  0604
@EP00604 DS    0H                                                  0605
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE CONVERTS UP TO 4 HEXADECIMAL BYTES TO EBCDIC     */
*   /* REPRESENTATION.                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0605
*   GEN(STM  RNVT,RPARM,HEXSAV);    /* SAVE CALLERS REGISTERS        */
         STM  RNVT,RPARM,HEXSAV
*   GEN(UNPK CONVERT(9),CONVERT(5));/* UNPACK THE HEX CHAR           */
*                                                                  0606
         UNPK CONVERT(9),CONVERT(5)
*   /*****************************************************************/
*   /*                                                               */
*   /* LOOP THRU UNPACKED DIGITS CONVERTING ANY OCCURENCE OF DIGITS  */
*   /* 'FA'-'FF' TO 'C1'-'C6' (LETTERS 'A'-'F')                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0607
*   DO I=DIGITS TO 1 BY-1;          /* LOOP THRU UNPACKED DIGITS     */
         L     @05,DIGITS                                          0607
         ST    @05,I                                               0607
         B     @DE00607                                            0607
@DL00607 DS    0H                                                  0608
*     IF CONVERT(I)>'F9'X           /* IF CHAR IS NOT NUMERIC        */
*       THEN                        /* CONVERT IT TO LETTER          */
*                                                                  0608
         LA    @15,CONVERT-1(@05)                                  0608
         CLI   0(@15),X'F9'                                        0608
         BNH   @RF00608                                            0608
*       /*************************************************************/
*       /*                                                           */
*       /* CONVERT UNPACKED HEX LETTER TO EBCDIC                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0609
*       CONVERT(I)=CONVERT(I)-'39'X;                               0609
         SLR   @00,@00                                             0609
         IC    @00,CONVERT-1(@05)                                  0609
         SL    @00,@CF02070                                        0609
         STC   @00,CONVERT-1(@05)                                  0609
*   END;                            /* END OF CONVERT DO LOOP        */
@RF00608 SLR   @05,@05                                             0610
         BCTR  @05,0                                               0610
         AL    @05,I                                               0610
         ST    @05,I                                               0610
@DE00607 LTR   @05,@05                                             0610
         BP    @DL00607                                            0610
*   GENERATE;                                                      0611
*                                      /* GENERATE EXIT LINKAGE      */
           LM   RNVT,RPARM,HEXSAV         RESTORE CALLERS REGS
           BR  REXIT                      RETURN TO CALLER
*NIPEBCDX:                                                         0612
*   ENTRY;                          /* CONVERT EBCDIC TO HEX         */
*                                                                  0612
@EP00612 DS    0H                                                  0613
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS TO CONVERT EBCDIC TO HEXADECIMAL.             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0613
*   GEN(STM RNVT,RPARM,HEXSAV);     /* SAVE CALLERS REGISTERS        */
         STM RNVT,RPARM,HEXSAV
*   CUA=RPARM;                      /* STORE EBCDIC UNIT NAME        */
*                                                                  0614
         ST    RPARM,CUA                                           0614
*   /*****************************************************************/
*   /*                                                               */
*   /* LOOP THRU CONVERT AREA. CONVERT ANY OCCURENCE OF BYTES        */
*   /* 'C1'-'C6' TO 'CA'-'CF'. THAT IS, CONVERT NUMERIC PORTION TO   */
*   /* HEX (CONVERTABLE INPUT ASSUMED).                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0615
*   DO I=1 TO 3;                    /* LOOP THRU 3 BYTES             */
*                                                                  0615
         LA    @05,1                                               0615
         ST    @05,I                                               0615
@DL00615 DS    0H                                                  0616
*     /***************************************************************/
*     /*                                                             */
*     /* IF LETTER IS LESS THAN NUMERIC, ASSUME IT IS A-F.           */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0616
*     IF LETTER(I)<'F0'X            /* LETTER NOT NUMERAL ?          */
*       THEN                        /* THEN IS ALPHABETIC            */
         SLR   @15,@15                                             0616
         IC    @15,LETTER-1(@05)                                   0616
         C     @15,@CF01887                                        0616
         BNL   @RF00616                                            0616
*       LETTER(I)=LETTER(I)+9;      /* CONVERT NUMERIC DIGIT TO HEX
*                                      VALUE                         */
         AL    @15,@CF01418                                        0617
         STC   @15,LETTER-1(@05)                                   0617
*   END;                            /* END OF CONVERT DO LOOP        */
@RF00616 LA    @05,1                                               0618
         AL    @05,I                                               0618
         ST    @05,I                                               0618
         C     @05,@CF00381                                        0618
         BNH   @DL00615                                            0618
*   GEN(PACK CUA(4),CUA(4));        /* PACK THE BYTES TO COMPLETE THE
*                                      CONVERSION                    */
         PACK CUA(4),CUA(4)
*   RPARM=CUA;                      /* PUT RESULT IN INTERFACE REG   */
         L     RPARM,CUA                                           0620
*   GENERATE;                                                      0621
*                                                                  0621
*                                      /* GENERATE EXIT LINKAGE      */
           LM    RNVT,RZERO,HEXSAV        RESTORE CALLERS REGS
           BR    REXIT                    RETURN TO CALLER
*
*                PROCEDURE  SAVEAREAS
*
NIPSAVE  DS    18F           SAVE AREA FOR NIP PROCESSORS
HEXSAV   DS    16F           SAVE AREA FOR HEX CONVERT RTNS
*   /*****************************************************************/
*   /*                                                               */
*   /* RELEASE REGISTERS FOR NIPM MAINLINE                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0622
*   RESPECIFY                                                      0622
*    (RPARM,                        /* PARM INTERFACE REGISTER       */
*     RNVT,                         /* NVT BASE REGISTER             */
*     RCVT,                         /* CVT BASE REGISTER             */
*     RNIPM) UNRESTRICTED;          /* NIPM WORK REGISTER            */
*NIPLOAD:                           /* PROCESSOR LOAD ROUTINE        */
*                                                                  0623
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS ENTERED FROM THE IEAVNIPM CONTROL TO FIND AND */
*   /* LOAD INDIVIDUAL NIP PROCESSOR MODULES. NIPLOAD RECEIVES, AS   */
*   /* INPUT, A POINTER IN REGISTER RPARM TO AN AREA CONTAINING THE  */
*   /* EIGHT-CHARACTER NAME OF THE MODULE WHICH IS TO BE LOADED.     */
*   /* NIPLOAD CAN ALSO BE ENTERED FROM NIP PROCESSORS, WITH THE SAME*/
*   /* INPUT, TO LOAD THE NIPOPEN, NIPMOUNT, AND NIPPAGIO SERVICE    */
*   /* ROUTINES.                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0623
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);/* PROC STATEMENT              */
*                                                                  0623
         B     @PB00002                                            0623
NIPLOAD  DS    0H                                                  0624
*   /*****************************************************************/
*   /*                                                               */
*   /* RESTRICT REGISTERS FOR NIPLOAD SUBROUTINE                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0624
*   RESPECIFY                                                      0624
*    (RPARM,                        /* PARM INTERFACE REGISTER       */
*     RNVT,                         /* NVT BASE REGISTER             */
*     RCVT,                         /* CVT BASE REGISTER             */
*     RNIPM) RESTRICTED;            /* NIPM WORK REGISTER            */
*   GEN(NIPMENTR  LOADSAV,NIPLOAD); /* GEN ENTRY LINKAGE             */
         NIPMENTR  LOADSAV,NIPLOAD
*   NAME=RPARM->MODNAME;            /* PUT MOD NAME IN BLDL AREA     */
         MVC   NAME(8),MODNAME(RPARM)                              0626
*   RPARM=NVTDCBSN;                 /* LOAD SYS1.NUCLEUS DCB ADDR    */
         L     RPARM,NVTDCBSN                                      0627
*   GEN( BLDL  (1),NPMLBLDL );      /* ISSUE BLDL                    */
*                                                                  0628
          BLDL  (1),NPMLBLDL
*   /*****************************************************************/
*   /*                                                               */
*   /* TEST FOR ERROR CODE INDICATING ENTRY NOT FOUND                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0629
*   IF RENTRY=4                     /* IF MODULE NOT FOUND           */
*     THEN                          /* IF NOT, WRITE MESSAGE         */
         C     RENTRY,@CF00109                                     0629
         BNE   @RF00629                                            0629
*     DO;                           /* AND LOAD WAIT STATE           */
*       MODNAM2=NAME;               /* MOVE MOD NAME TO MSG AREA     */
         MVC   MODNAM2(8),NAME                                     0631
*       NVTFLWSC=NVTFLWNN;          /* SET NVT WAIT STATE CODE       */
         MVI   NVTFLWSC,X'32'                                      0632
*       RPARM=ADDR(IEA301I);        /* LOAD MSG HEADER ADDRESS       */
         LA    RPARM,IEA301I                                       0633
*       RENTRY=NVTWTO;              /* LOAD WTO ROUTINE ADDR         */
         L     RENTRY,NVTWTO                                       0634
*       GEN(BALR REXIT,RENTRY);     /* BALR TO WRITE MSG             */
         BALR REXIT,RENTRY
*       GO TO NPMLXIT;              /* BRANCH TO EXIT ROUTINE        */
         B     NPMLXIT                                             0636
*     END;                                                         0637
*                                                                  0637
*   /*****************************************************************/
*   /*                                                               */
*   /* TEST FOR ERROR CODE INDICATING INPUT/OUTPUT ERROR             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0638
*   IF RENTRY=8                     /* I/O ERROR ON BLDL ?           */
*     THEN                          /* IF SO, WRITE MSG AND -        */
@RF00629 C     RENTRY,@CF00125                                     0638
         BNE   @RF00638                                            0638
*     DO;                           /* LOAD WAIT STATE               */
*       MODNAM1=NAME;               /* MOVE MOD NAME TO MSG AREA     */
         MVC   MODNAM1(8),NAME                                     0640
*       NVTFLWSC=NVTFLWBN;          /* SET NVT WAIT STATE CODE       */
         MVI   NVTFLWSC,X'33'                                      0641
*       RPARM=ADDR(IEA300I);        /* LOAD MSG HEADER ADDRESS       */
         LA    RPARM,IEA300I                                       0642
*       RENTRY=NVTWTO;              /* LOAD WTO ROUTINE ADDR         */
         L     RENTRY,NVTWTO                                       0643
*       GEN(BALR REXIT,RENTRY) ;    /* BALR TO WRITE MSG             */
         BALR REXIT,RENTRY
*       GO TO NPMLXIT;              /* BRANCH TO EXIT ROUTINE        */
         B     NPMLXIT                                             0645
*     END;                                                         0646
*                                                                  0646
*   /*****************************************************************/
*   /*                                                               */
*   /* THE NEXT 3 STATEMENTS SET THE PDS ATTRIBUTE FLAGS FROM THE    */
*   /* VALUES IN THE NVT                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0647
*   BMASK=NVTNPATR&'C0'X;           /* 'AND' IN NVT ATTRIBUTES       */
@RF00638 MVC   BMASK(1),NVTNPATR                                   0647
         NI    BMASK,X'C0'                                         0647
*   ATTRIB=ATTRIB&'3F'X;            /* CLEAR ATTRIBUTE FLAGS         */
         NI    ATTRIB,X'3F'                                        0648
*   ATTRIB=ATTRIB×BMASK;            /* 'OR' NVT VALUES TO FLAGS      */
         OC    ATTRIB(1),BMASK                                     0649
*   NVTNPREN='11'B;                 /* SET NVT ATTRIBUTES TO RENT SO
*                                      THAT SP252 IS USED            */
         OI    NVTNPREN,B'11000000'                                0650
*   RPARM=NVTDCBSN;                 /* LOAD SYS1.NUCLEUS DCB ADDR    */
*                                                                  0651
         L     RPARM,NVTDCBSN                                      0651
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE SVC LOAD FOR MODULE                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0652
*   GEN(LOAD  DE=NAME,DCB=(1));                                    0652
         LOAD  DE=NAME,DCB=(1)
*   RPARM=RZERO;                    /* PUT MODULE ADR IN PARM REG    */
         LR    RPARM,RZERO                                         0653
*   GEN(LM  RNVT,RZERO,LOADSAV);    /* RESTORE CALLER'S REGS         */
         LM  RNVT,RZERO,LOADSAV
*   GEN(BR REXIT);                  /* RETURN TO CALLER              */
*                                                                  0655
         BR REXIT
*   /*****************************************************************/
*   /*                                                               */
*   /* GENERATE NIPLOAD REGISTER SAVEAREA                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0656
*LOADSAV:                                                          0656
*   GEN(DS    16F    NIPLOAD SAVEAREA);                            0656
LOADSAV  DS    16F    NIPLOAD SAVEAREA
*NPMLXIT:                           /* LOAD WAIT STATE EXIT          */
*                                                                  0657
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE THE IDENTIFIER FOR THE NAME OF THE MODULE FOR WHICH BLDL */
*   /* FAILED INTO THE WAIT STATE PSW (NVTIDPSW) IN THE NVT          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0657
*   HMASK=NAMSUFF;                  /* MOVE NAME SUFFIX TO WORK      */
NPMLXIT  LH    @05,NAMSUFF                                         0657
         N     @05,@CF05060                                        0657
         STH   @05,HMASK                                           0657
*   IF NAMSUFF='PX'                 /* SEE IF NIPX WAS MODULE        */
*     THEN                          /* IF SO, TREAT SPECIAL          */
         CLC   NAMSUFF(2),@CC04863                                 0658
         BNE   @RF00658                                            0658
*     DO;                                                          0659
*       HMASK=HMASK&'0FFF'X;        /* TURN OFF HIGH 4 BITS          */
         NC    HMASK(2),@CB04864                                   0660
*       NVTIDPSW=HMASK;             /* MOVE TO PSW ID FIELD          */
         LH    @05,HMASK                                           0661
         N     @05,@CF05060                                        0661
         STH   @05,NVTIDPSW                                        0661
*       GEN( IEAPMNIP TYPE=SWAIT,MOD=NIPM);/* TERMINATE IPL          */
          IEAPMNIP TYPE=SWAIT,MOD=NIPM
*     END;                                                         0663
*   ELSE                                                           0664
*     ;                                                            0664
@RF00658 DS    0H                                                  0665
*   RPARM=HMASKCON;                 /* SETUP FOR CONVERSION          */
         L     RPARM,HMASKCON                                      0665
*   CALL NIPEBCDX;                  /* CONVERT IT TO HEXIDECIMAL     */
         L     @15,@CA04765                                        0666
         BALR  @14,@15                                             0666
*   GEN( SRL  RPARM,12);            /* SHIFT OUT UNUSED BITS         */
          SRL  RPARM,12
*   HMASK=RPARM;                    /* MOVE SIGNIFICANT BITS BACK TO
*                                      WORKAREA.                     */
         STH   RPARM,HMASK                                         0668
*   NVTIDPSW=NVTIDPSW&'F000'X;      /* CLEAR 12 BITS IN NVT          */
         NC    NVTIDPSW(2),@CB04865                                0669
*   NVTIDPSW=NVTIDPSW×HMASK;        /* 'OR' SUFFIX INTO NVT          */
         OC    NVTIDPSW(2),HMASK                                   0670
*   GEN(IEAPMNIP TYPE=SWAIT,MOD=NIPM);/* TERMINATE THE IPL           */
         IEAPMNIP TYPE=SWAIT,MOD=NIPM
*NIPABEND:                                                         0672
*   ENTRY;                          /* ABEND TRAP ROUTINE            */
*                                                                  0672
         B     @EC00672                                            0672
NIPABEND DS    0H                                                  0672
@EC00672 DS    0H                                                  0673
*   /*****************************************************************/
*   /*                                                               */
*   /* IF AN ATTEMPT IS MADE TO INVOKE THE ABEND SVC DURING NIP      */
*   /* PROCESSING AFTER THE IEAVNIPM CONTROL ROUTINE HAS ENTERED,    */
*   /* THIS ROUTINE IS ENTERED AS A TYPE 2 SVC FROM SVC SLIH AS IF IT*/
*   /* WERE, IN FACT, THE ABEND SVC. IT OBTAINS THE NIP LOCK AND SETS*/
*   /* UP THE ABEND CODE IN A PARAMETER LIST ALONG WITH THE WAIT     */
*   /* STATE CODE FOR ABENDS, TO PASS TO THE NIPSWAIT ROUTINE TO     */
*   /* TERMINATE THE IPL PROCESS. WHEN THE SYSTEM IS PLACED IN THE   */
*   /* WAIT STATE, THE ABEND CODE AND WAIT STATE CODE WILL BE IN THE */
*   /* ADDRESS PORTION OF THE WAIT STATE PSW. A MESSAGE IS ALSO      */
*   /* PREPARED AND PASSED TO NIPSWAIT TO BE WRITTEN TO A CONSOLE BY */
*   /* THE RMS SYSTEM TERMINATION ROUTINE IF POSSIBLE.               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0673
*/*           RESTRICT TCBPTR FOR NIPABEND ROUTINE                   */
*                                                                  0673
*   RESPECIFY                                                      0673
*     TCBPTR RESTRICTED;                                           0673
*   GENERATE;                                                      0674
*                                      /* GENERATE ENTRY LINKAGE     */
         BALR  RENTRY,0                   SET TEMP ADDRESSABILITY
NPMAB    L     RNVT,NPMABADC-NPMAB(0,RENTRY)     LOAD NVT ADDRESS
         LM    RBASE,RBASE2,NVTNIPM-NVT(RNVT)  SET UP BASE REGS
*   CALL NIPLKCHK;                  /* GO GET THE NIP LOCK           */
         BAL   @14,NIPLKCHK                                        0675
*   GEN(SRL RPARM,12);              /* SHIFT COMPLETION CODE TO LOW
*                                      END OF REGISTER 1             */
         SRL RPARM,12
*   BITFLD=RPARM;                   /* STORE ABEND CODE IN HWORD     */
         ST    RPARM,BITFLD                                        0677
*   CODE=CODE&'0FFF'X;              /* 'AND' OUT TOP 4 BITS          */
         NC    CODE(2),@CB04864                                    0678
*   NPMIDPSW=NPMIDPSW×CODE;         /* 'OR' IN 12 BIT ABEND CODE     */
         OC    NPMIDPSW(2),CODE                                    0679
*   NPMFLWSC=NVTFLWAM;              /* SET WAIT STATE CODE IN PSW    */
         MVI   NPMFLWSC,X'40'                                      0680
*   RPARM=NPMWPSW2;                 /* MOVE ABEND CODE TO REG 1      */
         L     RPARM,NPMWPSW2                                      0681
*   GEN(SLL  RPARM,4);              /* SHIFT TO HIGH ORDER POS.      */
         SLL  RPARM,4
*   CONVERT(1:4)=RPARM;             /* STORE IN CONVERT AREA         */
         STCM  RPARM,15,CONVERT                                    0683
*   DIGITS=LENGTH(CODE303I);        /* SET CONVERT LENGTH            */
         MVC   DIGITS(4),@CF00381                                  0684
*   RPARM=ADDR(DIGITS);             /* LOAD PARM REG WITH ADDR       */
         LA    RPARM,DIGITS                                        0685
*   CALL NIPXCDIC;                  /* CALL HEX-TO-EBCDIC ROUTINE    */
         L     @15,@CA04764                                        0686
         BALR  @14,@15                                             0686
*   CODE303I=CONVERT(1:LENGTH(CODE303I));/* MOVE TO MSG              */
         MVC   CODE303I(3),CONVERT                                 0687
*   NPSWAITM=ADDR(IEA303I);         /* LOAD MSG HEADER ADDRESS       */
         LA    @05,IEA303I                                         0688
         ST    @05,NPSWAITM                                        0688
*   GEN( IEAPMNIP TYPE=SWAIT,MOD=NIPM);/* TERMINATE IPL              */
          IEAPMNIP TYPE=SWAIT,MOD=NIPM
*NPMABADC:                                                         0690
*   GEN( DC  A(NVT));               /* ADCON FOR NVT                 */
*                                                                  0690
NPMABADC  DC  A(NVT)
*   /*****************************************************************/
*   /*                                                               */
*   /* RELEASE REGISTERS USED IN NIPLOAD ROUTINE                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0691
*   RESPECIFY                                                      0691
*    (RPARM,                        /* PARM INTERFACE REGISTER       */
*     RNVT,                         /* NVT BASE REGISTER             */
*     RCVT,                         /* CVT BASE REGISTER             */
*     RNIPM,                        /* NIPM WORK REGISTER            */
*     TCBPTR) UNRESTRICTED;         /* TCB BASE (NIPABEND)           */
*   END NIPLOAD;                    /* END - NIPLOAD PROCEDURE       */
@EL00002 DS    0H                                                  0692
@EF00002 DS    0H                                                  0692
@ER00002 BR    @14                                                 0692
*                                                                  0693
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE OPENS SYS1.LOGREC AND SYS1.SVCLIB AND BUILDS A   */
*   /* BASIC DEB FOR SYS1.LINKLIB BY INVOKING THE NIPOPEN SERVICE    */
*   /* ROUTINE.                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0693
*NPMOPLIB:                                                         0693
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             0693
NPMOPLIB DS    0H                                                  0694
*   RESPECIFY                       /* RESTRICT REGISTERS            */
*    (RNIPM,                        /* WORK REGISTER                 */
*     RNVT,                         /* NVT POINTER                   */
*     RCVT,                         /* CVT POINTER                   */
*     RDCB) RESTRICTED;             /* DCB POINTER                   */
*   GEN(NIPMENTR OPLIBSAV,NPMOPLIB);/* ENTRY LINKAGE                 */
         NIPMENTR OPLIBSAV,NPMOPLIB
*   RESPECIFY                                                      0696
*     NIPOPNPL BASED(NPMPPTR);      /* BASE FOR OPEN LIST            */
*   RESPECIFY                                                      0697
*     DUMMYDCB BASED(DCBPTR1);      /* BASE FOR DCB MAP              */
*   NPMPPTR=ADDR(LIBOPL);           /* ADDRESS OF OPEN LIST          */
         LA    @15,LIBOPL                                          0698
         ST    @15,NPMPPTR                                         0698
*   NOPNUCB=CVTSYSAD;               /* ADDRESS OF SYSRES UCB         */
         L     @14,CVTPTR                                          0699
         L     @09,CVTSYSAD(,@14)                                  0699
         ST    @09,NOPNUCB(,@15)                                   0699
*   NOPNDS=LOGREC;                  /* EBCDIC DSNAME- LOGREC-        */
         MVC   NOPNDS(12,@15),LOGREC                               0700
*   RDCB=CVTDCBA;                   /* ADDRESS OF LOGREC DCB         */
         L     RDCB,CVTDCBA-1(,@14)                                0701
         LA    RDCB,0(,RDCB)                                       0701
*   NOPNDCB=RDCB;                   /* PUT ADDRESS IN OPEN LIST      */
         ST    RDCB,NOPNDCB(,@15)                                  0702
*   RNIPM=RDCB->DCBDEBAD;           /* GET DEB ADDRESS FROM DCB      */
         L     RNIPM,DCBDEBAD-1(,RDCB)                             0703
         LA    RNIPM,0(,RNIPM)                                     0703
*   RNIPM->DEBAPPB=CVTXAPG;         /* GET ADDR. OF APP. VECT. TAB.  */
         MVC   DEBAPPB(3,RNIPM),CVTXAPG+1(@14)                     0704
*   RESPECIFY                                                      0705
*    (RDCB) UNRESTRICTED;                                          0705
*                                                                  0705
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING TWO OPENS CANT BE DONE UNTIL AFTER NP01 CONSOLE */
*   /* INITIALIZATION CALL NIPOPEN TO CREATE DEB FOR LOGREC DATA SET */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0706
*   GENERATE REFS(RNVT,NVTOPEN,LIBOPL) SETS(RPARM,REXIT,RENTRY,NOPNFL)
*       (IEAPMNIP TYPE=OPEN,PARAM=LIBOPL,OPT=(,,,SX,,,,RS),MOD=NIPM);
         IEAPMNIP TYPE=OPEN,PARAM=LIBOPL,OPT=(,,,SX,,,,RS),MOD=NIPM
*   NOPNDCB=CVTSVDCB;               /* PUT SVCLIB DCB IN OPEN LIST   */
         L     @05,NPMPPTR                                         0707
         L     @01,CVTPTR                                          0707
         L     @15,CVTSVDCB(,@01)                                  0707
         ST    @15,NOPNDCB(,@05)                                   0707
*   NOPNDS=SVCLIB;                  /* EBCDIC DSNAME- SVCLIB -       */
*                                                                  0708
         MVC   NOPNDS(12,@05),SVCLIB                               0708
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL NIPOPEN TO CREATE DEB FOR SVCLIB DATA SET FOR NP05       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0709
*   GENERATE REFS(RNVT,NVTOPEN,LIBOPL) SETS(RPARM,REXIT,RENTRY,NOPNFL)
*(IEAPMNIP TYPE=OPEN,PARAM=LIBOPL,OPT=(NB,LB,,,,,AU,RS),MOD=NIPM); 0709
*                                                                  0709
         IEAPMNIP TYPE=OPEN,PARAM=LIBOPL,OPT=(NB,LB,,,,,AU,RS),MOD=NIPM
*   /*****************************************************************/
*   /*                                                               */
*   /* DUMMY SYS1.LINKLIB DEFINITION                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0710
*   NOPNDCB=CVTLINK;                /* PTR TO LINKLIB DCB            */
*                                                                  0710
         L     @05,NPMPPTR                                         0710
         L     @01,CVTPTR                                          0710
         L     @15,CVTLINK(,@01)                                   0710
         ST    @15,NOPNDCB(,@05)                                   0710
*   /*****************************************************************/
*   /*                                                               */
*   /* SET DSNAME TO ZERO TO SIGNAL NIPOPEN TO CONSTRUCT ONLY THE    */
*   /* BASIC PORTION OF THE DEB.                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0711
*   NOPNDS=NOPNDS&&NOPNDS;          /* SET DSNAME FIELD TO ZEROES    */
*                                                                  0711
         XC    NOPNDS(12,@05),NOPNDS(@05)                          0711
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL NIPOPEN TO CREATE BASIC DEB FOR SYS1.LINKLIB             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0712
*   GENERATE REFS(RNVT,NVTOPEN,LIBOPL) SETS(RPARM,REXIT,RENTRY,NOPNFL)
*       (IEAPMNIP TYPE=OPEN,PARAM=LIBOPL,OPT=(NB,LB,,,,,AU),MOD=NIPM);
*                                                                  0712
         IEAPMNIP TYPE=OPEN,PARAM=LIBOPL,OPT=(NB,LB,,,,,AU),MOD=NIPM
*   /*****************************************************************/
*   /*                                                               */
*   /* UPDATE NVTNUCND TO REFLECT SPACE TAKEN FROM THE NUCLEUS BUFFER*/
*   /* FOR THE BASIC DEB. THIS IS NOT DONE BY NIPOPEN WITH A REQUEST */
*   /* FOR A DASD BASIC DEB ONLY.                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0713
*   NVTNUCND=NOPNDCB->DCBDEBAD+LENGTH(DEBDASD);                    0713
         L     @05,NPMPPTR                                         0713
         L     @05,NOPNDCB(,@05)                                   0713
         LA    @15,16                                              0713
         L     @05,DCBDEBAD-1(,@05)                                0713
         LA    @05,0(,@05)                                         0713
         ALR   @15,@05                                             0713
         ST    @15,NVTNUCND                                        0713
*   NVTFLSLB='1'B;                  /* TURN LIBRARY ACTIVE FLAG ON   */
         OI    NVTFLSLB,B'10000000'                                0714
*   GEN(LM RNVT,RPARM,OPLIBSAV);    /* RESTORE REGISTERS             */
         LM RNVT,RPARM,OPLIBSAV
*   GEN(BR REXIT);                  /* RETURN TO CALLER              */
         BR REXIT
*OPLIBSAV:                                                         0717
*   GEN(DS 16F);                    /* SAVEAREA FOR THIS ROUTINE.    */
OPLIBSAV DS 16F
*   RESPECIFY                       /* UNRESTRICT REGISTERS          */
*    (RNIPM,                        /* WORK REGISTER                 */
*     RNVT,                         /* NVT POINTER                   */
*     RCVT) UNRESTRICTED;           /* CVT POINTER                   */
*   END NPMOPLIB;                   /* END OF PROCEDURE-NPMOPLIB-    */
@EL00003 DS    0H                                                  0719
@EF00003 DS    0H                                                  0719
@ER00003 BR    @14                                                 0719
*                                                                  0720
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS CALLED BY IEAVNP01 AFTER A MASTER CONSOLE HAS */
*   /* BEEN FOUND SO THAT THE INITIAL OPERATOR COMMUNICATIONS CAN BE */
*   /* ESTABLISHED AND SYSTEM PARAMETER INPUT FROM THE OPERATOR CAN  */
*   /* BEGIN. THE OPERATOR REPLY IS NOT WAITED ON BY THIS ROUTINE,   */
*   /* BUT IS WAITED ON AFTER IEAVNP01 COMPLETES ITS PROCESSING OF   */
*   /* ALTERNATE CONSOLES THUS ALLOWING SOME OVERLAP OF PROCESSING   */
*   /* WITH THE OPERATOR RESPONSE ACTIVITY.                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0720
*NIPOPIO:                                                          0720
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             0720
NIPOPIO  DS    0H                                                  0721
*   RESPECIFY                       /* RESTRICT REGISTERS NEEDED     */
*    (RPARM,                        /* PARAMETER REGISTER            */
*     RNIPM,                        /* WORK REGISTER                 */
*     RNVT,                         /* NVT POINTER                   */
*     RCVT) RESTRICTED;             /* CVT POINTER                   */
*   GEN(NIPMENTR OPIOSAV,NIPOPIO);  /* ENTRY PROCESSING              */
         NIPMENTR OPIOSAV,NIPOPIO
*   IF NVTFLNCK='1'B                /* TOD CLOCK INOPERATIVE?        */
*     THEN                          /* YES, PUT OUT MESSAGE          */
         TM    NVTFLNCK,B'00000100'                                0723
         BNO   @RF00723                                            0723
*     GEN( IEAPMNIP TYPE=WTO,PARAM=IEA302I,MOD=NIPM);              0724
          IEAPMNIP TYPE=WTO,PARAM=IEA302I,MOD=NIPM
*   RENTRY=NVTWTO;                  /* GET ADDR OF NIPWTO ROUTINE    */
@RF00723 L     RENTRY,NVTWTO                                       0725
*   RNIPM=NVTN0MSG;                 /* GET PTR TO NIP0 MSG LIST      */
         L     RNIPM,NVTN0MSG                                      0726
*   RPARM=RNIPM->NP0MSGS;           /* PTR TO FIRST NIP0 MSG         */
         L     RPARM,NP0MSGS(,RNIPM)                               0727
*   DO WHILE RPARM^=0&RNIPM^=0;     /* PROCESS MESSAGES              */
         B     @DE00728                                            0728
@DL00728 DS    0H                                                  0729
*     GEN(BALR  REXIT,RENTRY);      /* GO WRITE A MESSAGE            */
         BALR  REXIT,RENTRY
*     RNIPM=RNIPM+4;                /* GET NEXT MSG PTR IN LIST      */
         AL    RNIPM,@CF00109                                      0730
*     RPARM=RNIPM->NP0MSGS;         /* GET ADDR OF NEXT MESSAGE      */
         L     RPARM,NP0MSGS(,RNIPM)                               0731
*   END;                                                           0732
@DE00728 SLR   @05,@05                                             0732
         CR    RPARM,@05                                           0732
         BE    @DC00728                                            0732
         CR    RNIPM,@05                                           0732
         BNE   @DL00728                                            0732
@DC00728 DS    0H                                                  0733
*   RELNO1=CVTNUMB;                 /* PUT RELEASE NO. IN IEA101A    */
         L     @05,CVTPTR                                          0733
         SL    @05,@CF01069                                        0733
         MVC   RELNO1(2),CVTNUMB(@05)                              0733
*   RELNO2=CVTLEVL;                 /* PUT RELEASE LEVEL IN MSG      */
         MVC   RELNO2(2),CVTLEVL(@05)                              0734
*   WTORPTR=ADDR(LIST1);            /* SAVE ADDRESS OF CURRENT WTOR
*                                      PARAMETER LIST                */
*                                                                  0735
         LA    @05,LIST1                                           0735
         ST    @05,WTORPTR                                         0735
*   /*****************************************************************/
*   /*                                                               */
*   /* WRITE IEA101A SPECIFY SYSTEM PARAMETERS MESSAGE               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0736
*   GENERATE REFS(RNVT,NVTWTOR,LIST1) SETS(RPARM,REXIT,RENTRY)     0736
*       (IEAPMNIP TYPE=WTOR,PARAM=LIST1,MOD=NIPM);                 0736
         IEAPMNIP TYPE=WTOR,PARAM=LIST1,MOD=NIPM
*   GEN(LM RNVT,RPARM,OPIOSAV);     /* RESTORE REGISTERS             */
         LM RNVT,RPARM,OPIOSAV
*   GEN(BR REXIT);                  /* RETURN TO CALLER              */
         BR REXIT
*OPIOSAV:                                                          0739
*   GEN(DS 16F);                    /* SAVE AREA FOR THIS ROUTINE    */
OPIOSAV  DS 16F
*   RESPECIFY                       /* FREE REGISTERS FOR USE        */
*    (RPARM,                        /* PARAMETER REGISTER            */
*     RNIPM,                        /* WORK REGISTER                 */
*     RNVT,                         /* NVT POINTER                   */
*     RCVT) UNRESTRICTED;           /* CVT POINTER                   */
*   END NIPOPIO;                    /* END OF PROCEDURE              */
@EL00004 DS    0H                                                  0741
@EF00004 DS    0H                                                  0741
@ER00004 BR    @14                                                 0741
*                                                                  0742
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS CALLED BY NIP MAINLINE TO WAIT ON THE OPERATOR*/
*   /* RESPONSE(S) TO THE 'SPECIFY SYSTEM PARAMETERS' MESSAGE. IT    */
*   /* PROCESSES EACH LINE OF THE RESPONSE AND QUEUES THEM UP TO BE  */
*   /* LATER PROCESSED BY THE NIP PARAMETER SIFT AND ANALYSIS ROUTINE*/
*   /* (IEAVNP03).                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0742
*NIPOPIOC:                                                         0742
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             0742
NIPOPIOC DS    0H                                                  0743
*   RESPECIFY                       /* RESTRICT REGISTERS USED       */
*    (RPARM,                        /* PARAMETER REGISTER            */
*     RNVT,                         /* NVT POINTER                   */
*     RCVT) RESTRICTED;             /* CVT POINTER                   */
*   GEN(NIPMENTR OPIOCSAV,NIPOPIOC);/* ENTRY PROCESSING              */
         NIPMENTR OPIOCSAV,NIPOPIOC
*OPIOCENT:                                                         0745
*   RPARM=WTORPTR;                  /* GET PTR TO MOST RECENT WTOR 0745
*                                      PARAMETER LIST.               */
*                                                                  0745
OPIOCENT L     RPARM,WTORPTR                                       0745
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL THE NIPWTOR2 ROUTINE TO BUFFER THE REPLY                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0746
*   GENERATE REFS(RNVT,NVTWTOR2) SETS(REXIT,RENTRY)                0746
*       (IEAPMNIP TYPE=WTOR2,PARAM=RPARM,BUFREL=NO,MOD=NIPM);      0746
         IEAPMNIP TYPE=WTOR2,PARAM=RPARM,BUFREL=NO,MOD=NIPM
*   RHOLD=RPARM;                    /* SAVE PTR TO OPERATOR REPLY    */
         ST    RPARM,RHOLD                                         0747
*   RNEXTSPE=ADDR(NVTSPE);          /* OBTAIN PTR TO SYSTEM-PARAM  0748
*                                      ELEMENT (SPE) IN THE NVT      */
*                                                                  0748
         LA    @00,NVTSPE                                          0748
         ST    @00,RNEXTSPE                                        0748
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR NO ELEMENTS ON THE SPE QUEUE                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0749
*   IF RNEXTSPE->NIPSPEA=0          /* IF NO DATA PTR IN THE NVT     */
*     THEN                          /* SET REQUIRED 8 BYTES TO NIP   */
         LR    @15,@00                                             0749
         L     @15,NIPSPEA(,@15)                                   0749
         LTR   @15,@15                                             0749
         BNZ   @RF00749                                            0749
*     DO;                           /* SPE QUEUE.                    */
*       RNEXTSPE->NIPSPEA=RPARM;    /* PUT REPLY ADDR IN ADDRESS     */
         LR    @15,@00                                             0751
         ST    RPARM,NIPSPEA(,@15)                                 0751
*       GO TO NP1SCAN;              /* BRANCH TO REPLY SCAN RTN      */
         B     NP1SCAN                                             0752
*     END;                                                         0753
*                                                                  0753
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE GETMAIN FOR 8 BYTE SPE                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0754
*   GEN( GETMAIN EU,LV=8,A=SPEBUF,SP=245);                         0754
@RF00749 DS    0H                                                  0754
          GETMAIN EU,LV=8,A=SPEBUF,SP=245
*NP1SPEL:                           /* CHECK FOR A NIPSPE QUEUE    0755
*                                      ELEMENT WITH NO FORWARD PTR   */
*   IF RNEXTSPE->NIPSPEQ^=0         /* LAST ELEMENT OF CHAIN?        */
*     THEN                          /* IF NOT -                      */
NP1SPEL  L     @15,RNEXTSPE                                        0755
         L     @15,NIPSPEQ(,@15)                                   0755
         LTR   @15,@15                                             0755
         BZ    @RF00755                                            0755
*     DO;                           /* CHAIN TO LAST                 */
*       RNEXTSPE=RNEXTSPE->NIPSPEQ; /* SET PTR TO NEXT               */
         ST    @15,RNEXTSPE                                        0757
*       GO TO NP1SPEL;              /* CONTINUE CHAIN TO LAST        */
         B     NP1SPEL                                             0758
*     END;                                                         0759
*   RNEXTSPE->NIPSPEQ=SPEBUF;       /* SET CHAIN PTR TO NEW ELEMNT   */
@RF00755 L     @15,SPEBUF                                          0760
         L     @14,RNEXTSPE                                        0760
         ST    @15,NIPSPEQ(,@14)                                   0760
*   RNEXTSPE=SPEBUF;                /* SET PTR TO NEW ELEMENT        */
         ST    @15,RNEXTSPE                                        0761
*   RNEXTSPE->NIPSPEQ=0;            /* ZERO CHAIN PTR IN NEW ELMNT   */
         SLR   @00,@00                                             0762
         ST    @00,NIPSPEQ(,@15)                                   0762
*   RNEXTSPE->NIPSPEA=RHOLD;        /* SET PARAMETER PTR TO OPERATORS
*                                      REPLY.                        */
*                                                                  0763
         L     @00,RHOLD                                           0763
         ST    @00,NIPSPEA(,@15)                                   0763
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR END OF LINE INDICATION                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0764
*NP1SCAN:                                                          0764
*   IF OPREPLY1=QUOTE               /* IS THIS A QUOTE               */
*     THEN                          /* IF SO -                       */
NP1SCAN  L     @15,RHOLD                                           0764
         CLC   OPREPLY1(1,@15),QUOTE                               0764
         BE    @RT00764                                            0764
*     GO TO OPIOCXIT;               /* DONE, EXIT THIS ROUTINE       */
*                                                                  0765
*   /*****************************************************************/
*   /*                                                               */
*   /* IF NEXT CHARACTER IS BLANK OR COMMA, SEE IF CONT FOLLOWS      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0766
*   IF OPREPLY1=' '×OPREPLY1=',' THEN                              0766
         CLI   OPREPLY1(@15),C' '                                  0766
         BE    @RT00766                                            0766
         CLI   OPREPLY1(@15),C','                                  0766
         BNE   @RF00766                                            0766
@RT00766 DS    0H                                                  0767
*     DO;                                                          0767
*       RHOLD=RHOLD+'0001'X;                                       0768
*                                                                  0768
         LA    @00,1                                               0768
         AL    @00,RHOLD                                           0768
         ST    @00,RHOLD                                           0768
*       /*************************************************************/
*       /*                                                           */
*       /* CHECK FOR CONTINUATION OF PARAMETERS- CONT                */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0769
*       IF OPREPLY1=CONTCHAR        /* IS THIS CONT OF PARAMETERS    */
*         THEN                      /* IF SO -                       */
         LR    @15,@00                                             0769
         CLC   OPREPLY1(5,@15),CONTCHAR                            0769
         BNE   @RF00769                                            0769
*         DO;                       /* SETUP FOR MORE PARAMETERS     */
*           RPARM=ADDR(LIST2);      /* SET PARM INTERFACE REG TO   0771
*                                      ADDR. OF PARAMETER LIST       */
         LA    RPARM,LIST2                                         0771
*           WTORPTR=RPARM;          /* SAVE CURRENT LIST POINTER     */
*                                                                  0772
         ST    RPARM,WTORPTR                                       0772
*           /*********************************************************/
*           /*                                                       */
*           /* CALL THE NIP WTOR SERVICE ROUTINE                     */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0773
*           GENERATE REFS(RNVT,NVTWTOR,LIST2) SETS(REXIT,RENTRY)   0773
*               (IEAPMNIP TYPE=WTOR,PARAM=LIST2,MOD=NIPM);         0773
         IEAPMNIP TYPE=WTOR,PARAM=LIST2,MOD=NIPM
*           GO TO OPIOCENT;         /* GO PROCESS NEW REPLY          */
         B     OPIOCENT                                            0774
*         END;                                                     0775
*       ELSE                        /* NOT CONT AND NOT A QUOTE.   0776
*                                      UPDATE SCAN POINTER TO RE-DO
*                                      SCAN CHECK.                   */
*         GO TO NP1SCAN;            /* BRANCH TO SCAN CYCLE          */
*     END;                                                         0777
*   ELSE                                                           0778
*     DO;                                                          0778
@RF00766 DS    0H                                                  0779
*       RHOLD=RHOLD+'0001'X;        /* UPDATE SCAN POINTER           */
         LA    @00,1                                               0779
         AL    @00,RHOLD                                           0779
         ST    @00,RHOLD                                           0779
*       GO TO NP1SCAN;              /* BRANCH TO SCAN CYCLE          */
         B     NP1SCAN                                             0780
*     END;                                                         0781
*OPIOCXIT:                          /* EXIT PROCESSING               */
*   GEN(LM RNVT,RPARM,OPIOCSAV);    /* RESTORE REGISTERS             */
OPIOCXIT LM RNVT,RPARM,OPIOCSAV
*   GEN(BR REXIT);                  /* RETURN TO CALLER              */
         BR REXIT
*OPIOCSAV:                                                         0784
*   GEN(DS 16F);                    /* LOCAL SAVEAREA                */
OPIOCSAV DS 16F
*   RESPECIFY                       /* UNRESTRICT REGISTERS          */
*    (RPARM,                        /* PARAMETER REGISTER            */
*     RNVT,                         /* NVT PTR                       */
*     RCVT) UNRESTRICTED;           /* CVT PTR                       */
*   END NIPOPIOC;                   /* END OF NIPOPIOC PROCEDURE     */
@EL00005 DS    0H                                                  0786
@EF00005 DS    0H                                                  0786
@ER00005 BR    @14                                                 0786
*                                                                  0787
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE ESTABLISHES LINKAGE TO THE NIP PROMPT ROUTINE,   */
*   /* IEAVNP03. IT LOADS THE PROMPT MODULE, GIVES IT CONTROL, AND   */
*   /* DELETES IT WHEN IT HAS COMPLETED. IT THEN RETURNS CONTROL TO  */
*   /* THE CALLER OF NIPPRMPT WITH THE CONTENTS OF RPARM (REG 1) AS  */
*   /* IT WAS LEFT BY IEAVNP03.                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0787
*NIPPRMPT:                          /* NIPPRMPT ROUTINE ENTRY        */
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             0787
NIPPRMPT DS    0H                                                  0788
*   RESPECIFY                       /* RESTRICT REGISTERS            */
*    (RPARM,                        /* PARAMETER REGISTER            */
*     RNVT,                         /* POINTER TO NVT                */
*     RCVT,                         /* POINTER TO CVT                */
*     RNIPM) RESTRICTED;            /* WORK REGISTER                 */
*   GEN(NIPMENTR PRMPTSAV,NIPPRMPT);/* ENTRY LINKAGE                 */
         NIPMENTR PRMPTSAV,NIPPRMPT
*   GEN(LA   RSAVE,PRMPTTEM);       /* SETUP LOCAL SAVE AREA         */
         LA   RSAVE,PRMPTTEM
*   RNIPM=RPARM;                    /* SAVE PARAMETER REGISTER       */
         LR    RNIPM,RPARM                                         0791
*   RPARM=ADDR(NPRMPTRT);           /* GET ADDR OF NAME OF PROMPT  0792
*                                      MODULE, IEAVNP03.             */
         LA    RPARM,NPRMPTRT                                      0792
*   RENTRY=NVTLOAD;                 /* ADDRESS OF LOAD ROUTINE       */
         L     RENTRY,NVTLOAD                                      0793
*   GEN(BALR REXIT,RENTRY);         /* GO LOAD THE MODULE            */
         BALR REXIT,RENTRY
*   RENTRY=RPARM;                   /* MOVE ADDR OF IEAVNP03         */
         LR    RENTRY,RPARM                                        0795
*   RPARM=RNIPM;                    /* RESTORE PARAMETER REG         */
         LR    RPARM,RNIPM                                         0796
*   GEN(BALR REXIT,RENTRY);         /* CALL NIP PROMPT MODULE        */
         BALR REXIT,RENTRY
*   GEN(DELETE DE=NPRMPTRT);        /* DELETE THE MODULE             */
         DELETE DE=NPRMPTRT
*   GEN(LM   RNVT,RZERO,PRMPTSAV);  /* RESTORE REGS EXCEPT 1         */
         LM   RNVT,RZERO,PRMPTSAV
*   GEN(BR   REXIT);                /* RETURN TO CALLER              */
         BR   REXIT
*PRMPTSAV:                                                         0801
*   GEN(DS   16F);                  /* SAVE AREA - LOCAL             */
PRMPTSAV DS   16F
*PRMPTTEM:                                                         0802
*   GEN(DS   18F);                  /* LOCAL SAVEAREA FOR PROMPT     */
PRMPTTEM DS   18F
*   RESPECIFY                       /* UNRESTRICT REGISTERS          */
*    (RPARM,                                                       0803
*     RNVT,                                                        0803
*     RCVT,                                                        0803
*     RNIPM) UNRESTRICTED;          /* REGISTERS UNRESTRICTED        */
*   END NIPPRMPT;                   /* END OF NIPPRMPT               */
@EL00006 DS    0H                                                  0804
@EF00006 DS    0H                                                  0804
@ER00006 BR    @14                                                 0804
*                                                                  0805
*   /*****************************************************************/
*   /*                                                               */
*   /* ALLOCATE PAGE FRAME TABLE. SPACE FOR THE PAGE FRAME TABLE IS  */
*   /* ALLOCATED FROM THE NEXT AVAILABLE SPACE IN THE NUCLEUS BUFFER.*/
*   /* THE SPACE REQUIRED TO DESCRIBE THE PAGES FROM THE START OF THE*/
*   /* PFT TO THE END OF STORAGE IS CALUCULATED, AND THEN            */
*   /* RECALCULATED EXCLUDING THE SPACE REQUIRED FOR THE PFT ITSELF. */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0805
*NPMPFTBL:                          /* PFT BUILD ROUTINE START       */
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             0805
NPMPFTBL DS    0H                                                  0806
*   RESPECIFY                       /* RESTRICT REGISTERS            */
*    (RPARM,                        /* REG 1 IS A WORK REGISTER      */
*     RNVT,                         /* REG 2 POINTS TO NVT           */
*     RCVT,                         /* REG 3 POINTS TO CVT           */
*     PFTEPTR2,                     /* REG 4 IS A WORK REGISTER      */
*     PFTEPTR,                      /* REG 5 IS BASE FOR PFTE        */
*     RWRK1,                        /* REG 6 IS A WORK REGISTER      */
*     RWRK4) RESTRICTED;            /* REG 7 IS A WORK REGISTER      */
*   GEN(NIPMENTR PFTBLSAV,NPMPFTBL);/* ENTRY PROCESSING              */
*                                                                  0807
         NIPMENTR PFTBLSAV,NPMPFTBL
*   /*****************************************************************/
*   /*                                                               */
*   /* BEGIN PFT AT FIRST 16 BYTE BOUNDARY IN NUCLEUS BUFFER         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0808
*   PFTEPTR=((NVTNUCND+15)×15)&&15;                                0808
*                                                                  0808
         LA    @15,15                                              0808
         L     PFTEPTR,NVTNUCND                                    0808
         ALR   PFTEPTR,@15                                         0808
         OR    PFTEPTR,@15                                         0808
         XR    PFTEPTR,@15                                         0808
*   /*****************************************************************/
*   /*                                                               */
*   /* 1ST CALCULATION: FIND SIZE OF PFT TO DESCRIBE START OF PFT TO */
*   /* END OF STORAGE.                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0809
*   RPFTAR=CVTEORM-PFTEPTR;         /* NUMBER OF BYTES               */
*                                                                  0809
         L     @15,CVTPTR                                          0809
         L     RPFTAR,CVTEORM(,@15)                                0809
         SLR   RPFTAR,PFTEPTR                                      0809
*   /*****************************************************************/
*   /*                                                               */
*   /* ROUND THE NUMBER OF BYTES UP TO A PAGE BOUNDARY               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0810
*   RPFTAR=((RPFTAR+4095)×4095)&&4095;                             0810
*                                                                  0810
         LA    @15,4095                                            0810
         LR    @00,RPFTAR                                          0810
         ALR   @00,@15                                             0810
         OR    @00,@15                                             0810
         XR    @00,@15                                             0810
         LR    RPFTAR,@00                                          0810
*   /*****************************************************************/
*   /*                                                               */
*   /* FIND THE SIZE FROM END OF PFT TO END OF STORAGE               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0811
*   RPFTAR=RPFTAR                   /* SIZE = 1ST SIZE MINUS         */
*       -(RPFTAR/4096)*LENGTH(PFTE);/* SIZE OF PFT                   */
*                                                                  0811
         LR    @00,RPFTAR                                          0811
         SRL   @00,12                                              0811
         SLA   @00,4                                               0811
         SLR   RPFTAR,@00                                          0811
*   /*****************************************************************/
*   /*                                                               */
*   /* 2ND CALCULATION: FIND TRUE SIZE OF PFT ( END OF PFT TO END OF */
*   /* STORAGE). UPDATE NUCLEUS BUFFER POINTER                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0812
*   RPFTAR=((RPFTAR+4095)×4095)&&4095;                             0812
         LR    @00,RPFTAR                                          0812
         ALR   @00,@15                                             0812
         OR    @00,@15                                             0812
         XR    @00,@15                                             0812
         LR    RPFTAR,@00                                          0812
*   NVTNUCND=PFTEPTR+(RPFTAR/4096)*LENGTH(PFTE);                   0813
         LR    @00,RPFTAR                                          0813
         SRL   @00,12                                              0813
         SLA   @00,4                                               0813
         ALR   @00,PFTEPTR                                         0813
         ST    @00,NVTNUCND                                        0813
*   NVTNUCND=NVTNUCND+16;           /* NUCLEUS DUMMY PFTE.   @G559P2L*/
         AL    @00,@CF00081                                        0814
         ST    @00,NVTNUCND                                        0814
*   NPMPFTAD=PFTEPTR;               /* SAVE PFT BASE POINTER         */
*                                                                  0815
         ST    PFTEPTR,NPMPFTAD                                    0815
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE IF SPACE EXISTS IN NUCLEUS BUFFER TO HOLD THE PFT.  */
*   /* IF NOT, WRITE MESSAGE TO OPERATOR AND CALL NIPSWAIT ROUTINE TO*/
*   /* PUT SYSTEM INTO WAIT STATE.                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0816
*   IF NVTNUCND>NVTNBFND            /* ENOUGH SPACE?                 */
*     THEN                          /* IF NOT -                      */
         C     @00,NVTNBFND                                        0816
         BNH   @RF00816                                            0816
*     DO;                                                          0817
*       GENERATE REFS(NVTWTO) SETS(RPARM,REXIT,RENTRY)             0818
*           (IEAPMNIP TYPE=WTO,PARAM=IEA340I,MOD=NIPM);            0818
*                                                                  0818
         IEAPMNIP TYPE=WTO,PARAM=IEA340I,MOD=NIPM
*       /*************************************************************/
*       /*                                                           */
*       /* NOW SET WAIT STATE CODE AND LOAD DISABLED WAIT            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0819
*       NVTFLWSC=NVTFLWRS;          /* SET WAIT STATE CODE           */
         MVI   NVTFLWSC,X'38'                                      0819
*       GENERATE REFS(NVTSWAIT) SETS(REXIT,RENTRY)                 0820
*           (IEAPMNIP TYPE=SWAIT,MOD=NIPM);/* PUT SYSTEM IN WAIT   0820
*                                      STATE                         */
         IEAPMNIP TYPE=SWAIT,MOD=NIPM
*     END;                                                         0821
*   RPFTAR=NVTNUCND-PFTEPTR;        /* GET SIZE OF PFT               */
*                                                                  0822
@RF00816 L     RPFTAR,NVTNUCND                                     0822
         SLR   RPFTAR,PFTEPTR                                      0822
*   /*****************************************************************/
*   /*                                                               */
*   /* ZERO OUT THE PFT AREA                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0823
*   DO RPFTAR=RPFTAR TO 1 BY-1;     /* ZERO ONE BYTE AT A TIME       */
         B     @DE00823                                            0823
@DL00823 DS    0H                                                  0824
*     PFT(RPFTAR)='00'X;            /* SET BYTE TO ZERO              */
         LR    @15,PFTEPTR                                         0824
         ALR   @15,RPFTAR                                          0824
         BCTR  @15,0                                               0824
         MVI   PFT(@15),X'00'                                      0824
*   END;                                                           0825
*                                                                  0825
         BCTR  RPFTAR,0                                            0825
@DE00823 LTR   RPFTAR,RPFTAR                                       0825
         BP    @DL00823                                            0825
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD PAGE FRAME TABLE. THE PFT IS BUILT IN THE REGION        */
*   /* ALLOCATED FROM THE NUCLEUS BUFFER. THE INITIAL PFT BUILT BY   */
*   /* IEAVNIP0 CONTAINS PAGE ENTRIES FOR THE SQA PAGES AND MUST BE  */
*   /* MOVED INTO THE PERMANENT PFT BEING CONSTRUCTED. THE NIP       */
*   /* STORAGE MAP IS USED TO FIND OFFLINE STORAGE SO THAT THE PFTES */
*   /* FOR THOSE FRAMES CAN BE MARKED AS OFFLINE. THE RESERVED PAGE  */
*   /* FRAMES ARE NOW MADE AVAILABLE ON THE AVAILABLE PAGE FRAME     */
*   /* QUEUE, AND THE PAGES OCCUPIED BY NIP ARE MARKED AS V=R        */
*   /* ALLOCATED.                                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0826
*   RPARM=ADDR(NPLOCKSV);           /* GET ADDR OF A TEMP SAVEAREA   */
         LA    RPARM,NPLOCKSV                                      0826
*   GENERATE REFS(NPLOCKSV,PSALITA,FLC);                           0827
*                                                /*GET SALLOC LOCK   */
          STM 0,15,0(RPARM)             /*SAVE REGISTERS             */
NPBPFTGL  SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,                      *
               RELATED=(RSM,IEAVNIPM(NPBPFTFL))
          LM  0,15,0(RPARM)             RESTORE REGISTERS
*   PVTPTR=CVTPVTP;                 /* GET PVT BASE POINTER          */
         L     @15,CVTPTR                                          0828
         L     @00,CVTPVTP(,@15)                                   0828
         ST    @00,PVTPTR                                          0828
*   RWRK1=(NVTSQANO+NVTLSQNO)*LENGTH(PFTE);/* SIZE OF PFTE'S         */
         LH    RWRK1,NVTSQANO                                      0829
         AH    RWRK1,NVTLSQNO                                      0829
         SLA   RWRK1,4                                             0829
*   RINDX1=PVTLPFN-RWRK1+LENGTH(PFTE);/* INDEX OF FIRST SQA PAGE PFTE*/
         LR    @15,@00                                             0830
         LH    RINDX1,PVTLPFN(,@15)                                0830
         N     RINDX1,@CF05060                                     0830
         SLR   RINDX1,RWRK1                                        0830
         AL    RINDX1,@CF00081                                     0830
*   PFTEPTR=NPMPFTAD;               /* LOAD PFT BEGIN ADDRESS        */
*                                                                  0831
         L     PFTEPTR,NPMPFTAD                                    0831
*   /*****************************************************************/
*   /*                                                               */
*   /* CALCULATE FIRST PFTE INDEX                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0832
*   RWRK4=NVTNUCND;                 /* LOAD ADDRESS FOR 1ST PFTE     */
         L     RWRK4,NVTNUCND                                      0832
*   GEN(SRL RWRK4,12);              /* SHIFT TO FORM PAGE FRAME NO   */
         SRL RWRK4,12
*   PFNSAVE=RWRK4;                  /* TO UPDATE ONLINE FRAME COUNT,
*                                      SAVE PAGE FRAME NUMBER FOR  0834
*                                      NPMVRREG ROUNTINE      YM06075*/
         ST    RWRK4,PFNSAVE                                       0834
*   GEN(SLL RWRK4,4);               /* SHIFT TO FORM PFT INDEX       */
*                                                                  0835
         SLL RWRK4,4
*   /*****************************************************************/
*   /*                                                               */
*   /* POINT TO FIRST SQA PAGE IN NEW PFT                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0836
*   PFTEPTR=PFTEPTR-RWRK4+RINDX1;   /* NEW SQA PFTE POINTER          */
         LR    @00,PFTEPTR                                         0836
         SLR   @00,RWRK4                                           0836
         ALR   @00,RINDX1                                          0836
         LR    PFTEPTR,@00                                         0836
*   PFTEPTR2=PVTPFTP+RINDX1;        /* OLD SQA PFTE POINTER          */
*                                                                  0837
         LR    PFTEPTR2,RINDX1                                     0837
         L     @15,PVTPTR                                          0837
         AL    PFTEPTR2,PVTPFTP(,@15)                              0837
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE SQA PFTES TO THE NEW PAGE FRAME TABLE                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0838
*   DO WHILE(RWRK1>256);            /* MOVE 256 BYTES                */
         B     @DE00838                                            0838
@DL00838 DS    0H                                                  0839
*     PFT1(1:256)=PFTEPTR2->PFT1(1:256);                           0839
         MVC   PFT1(256,PFTEPTR),PFT1(PFTEPTR2)                    0839
*     RWRK1=RWRK1-256;              /* DECREMENT BYTE COUNTER        */
         LA    @15,256                                             0840
         SLR   RWRK1,@15                                           0840
*     PFTEPTR=PFTEPTR+256;          /* BUMP PFTE POINTER             */
         ALR   PFTEPTR,@15                                         0841
*     PFTEPTR2=PFTEPTR2+256;        /* BUMP SECOND PFTE PTR          */
         ALR   PFTEPTR2,@15                                        0842
*   END;                                                           0843
@DE00838 C     RWRK1,@CF01069                                      0843
         BH    @DL00838                                            0843
*   PFT1(1:RWRK1)=PFTEPTR2->PFT1(1:RWRK1);                         0844
         LR    @15,RWRK1                                           0844
         BCTR  @15,0                                               0844
         EX    @15,@SM05062                                        0844
*   PVTFPFN=RWRK4;                  /* RESET 1ST PFTE RBN IN PVT     */
         L     @15,PVTPTR                                          0845
         STH   RWRK4,PVTFPFN(,@15)                                 0845
*   PVTPFTP=NPMPFTAD-RWRK4;         /* RESET PFT APPARENT ORIGIN     */
         L     @00,NPMPFTAD                                        0846
         SLR   @00,RWRK4                                           0846
         ST    @00,PVTPFTP(,@15)                                   0846
*   PFTEPTR2=0;                     /* PREVIOUS AVAIL PFTE = 0       */
*                                                                  0847
         SLR   PFTEPTR2,PFTEPTR2                                   0847
*   /*****************************************************************/
*   /*                                                               */
*   /* FIND PAGE FRAME INDEX OF FIRST V=V PAGE                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0848
*   RWRK4=NVTVVPG1;                 /* 1ST V=V PAGE ADDRESS          */
         L     RWRK4,NVTVVPG1                                      0848
*   GEN(SRL RWRK4,12);              /* SHIFT TO FORM FRAME NUMBER    */
         SRL RWRK4,12
*   GEN(SLL RWRK4,4);               /* SHIFT TO FORM PFTE INDEX      */
         SLL RWRK4,4
*   NPMVVNDX=RWRK4;                 /* RETAIN V=V PAGE INDEX         */
*                                                                  0851
         ST    RWRK4,NPMVVNDX                                      0851
*   /*****************************************************************/
*   /*                                                               */
*   /* CALCULATE INDEX OF HIGHEST POSSIBLE PAGE TO USE FOR ENTRY TO  */
*   /* THE PAGE BUILD LOOP. ALSO POINT TO BYTE IN STORAGE MAP THAT   */
*   /* CORRESPONDS TO THIS PAGE. THIS IS DONE TO CHECK FOR OFFLINE   */
*   /* STORAGE EXISTING ON THE TOP END OR IN THE MIDDLE OF REAL      */
*   /* ONLINE STORAGE ADDRESS RANGES.                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0852
*   RINDX1=CVTEORM×4095&&4095;      /* ROUND DOWN TO PAGE BNDRY      */
         LA    @15,4095                                            0852
         L     @14,CVTPTR                                          0852
         L     RINDX1,CVTEORM(,@14)                                0852
         OR    RINDX1,@15                                          0852
         XR    RINDX1,@15                                          0852
*   GEN(SRL RINDX1,12);             /* SHIFT TO GET PAGE FRAME NO.   */
         SRL RINDX1,12
*   RWRK1=NVTSTMAP+RINDX1;          /* OFFSET INTO STORAGE MAP       */
         LR    RWRK1,RINDX1                                        0854
         AL    RWRK1,NVTSTMAP                                      0854
*   GEN(SLL RINDX1,4);              /* SHIFT TO FORM PAGE INDEX      */
         SLL RINDX1,4
*   PVTLPFN=RINDX1;                 /* SET PVT LAST PAGE INDEX       */
         L     @15,PVTPTR                                          0856
         STH   RINDX1,PVTLPFN(,@15)                                0856
*   PFTEPTR=PVTPFTP+RINDX1;         /* PTR TO LAST PFTE              */
         LR    PFTEPTR,RINDX1                                      0857
         AL    PFTEPTR,PVTPFTP(,@15)                               0857
*   RSUCNT=PVTRSUS;                 /* SET UP COUNTER        @YD03005*/
         LH    @00,PVTRSUS(,@15)                                   0858
         N     @00,@CF05060                                        0858
         ST    @00,RSUCNT                                          0858
*   GO TO NPMPFTLP;                 /* GO START PFTE BUILD LOOP      */
         B     NPMPFTLP                                            0859
*NPMBPIPG:                          /* PFT BUILD LOOP RE-ENTRY       */
*   RINDX1=RINDX1-LENGTH(PFTE);     /* DECREMENT PFTE INDEX          */
NPMBPIPG LA    @15,16                                              0860
         SLR   RINDX1,@15                                          0860
*   PFTEPTR=PFTEPTR-LENGTH(PFTE);   /* DECREMENT PFTE PTR            */
         SLR   PFTEPTR,@15                                         0861
*   RWRK1=RWRK1-1;                  /* DECREMENT STORAGE MAP PTR     */
*                                                                  0862
         BCTR  RWRK1,0                                             0862
*   /*****************************************************************/
*   /*                                                               */
*   /* SEE IF FRAME IS BELOW LAST FRAME MAPPED, AND IF SO WE ARE ALL */
*   /* DONE.                                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0863
*   IF RINDX1<PVTFPFN               /* IS INDEX LOWER THAN 1ST       */
*     THEN                          /* IF SO, ALL DONE               */
         L     @15,PVTPTR                                          0863
         LH    @00,PVTFPFN(,@15)                                   0863
         N     @00,@CF05060                                        0863
         CR    RINDX1,@00                                          0863
         BL    @RT00863                                            0863
*     GO TO NPMPFTXT;               /* GO DO EXIT PROCESSING         */
*   ELSE                                                           0865
*     ;                                                            0865
*                                                                  0865
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK CURRENT FRAME BYTE IN STORAGE MAP TO DETERMINE IF IT IS */
*   /* OFFLINE STORAGE. IF NOT, CHECK THE PFTE TO SEE IF IT IS ONE   */
*   /* SETUP BY IEAVNIP0 (SQA AND LSQA). IF NOT, CHECK PFTE INDEX TO */
*   /* SEE IF IT IS BELOW V=R LINE AND IF NOT, QUEUE IT ON AVAILABLE */
*   /* FRAME QUEUE.                                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0866
*NPMPFTLP:                                                         0866
*   IF RWRK1->STORMAP1='01'X THEN   /* IF OFFLINE PAGE,              */
NPMPFTLP CLI   STORMAP1(RWRK1),X'01'                               0866
         BNE   @RF00866                                            0866
*     DO;                           /* SET PFTE OFFLINE FLAG         */
*       PFTOFFLN='1'B;              /* PAGE OFFLINE FLAG SET         */
         OI    PFTOFFLN(PFTEPTR),B'01000000'                       0868
*       PFTQNDX=PFTNQN;             /* SET INDEX AS NOT QUEUED       */
         MVI   PFTQNDX(PFTEPTR),X'FF'                              0869
*       GO TO NPMBPIPG;             /* GO TRY NEXT PAGE              */
         B     NPMBPIPG                                            0870
*     END;                                                         0871
*   IF RSUCNT>0 THEN                /* CNT GREATER THAN 0    @YD03005*/
@RF00866 L     @15,RSUCNT                                          0872
         LTR   @15,@15                                             0872
         BNP   @RF00872                                            0872
*     DO;                           /*                       @YD03005*/
*       RSUCNT=RSUCNT-1;            /* DECREMENT COUNTER     @YD03005*/
         BCTR  @15,0                                               0874
         ST    @15,RSUCNT                                          0874
*       PFTPREF='1'B;               /* SET PROTECTED         @YD03005*/
         OI    PFTPREF(PFTEPTR),B'00000100'                        0875
*     END;                          /*                       @YD03005*/
*   ELSE                                                           0877
*     ;                             /*                       @YD03005*/
@RF00872 DS    0H                                                  0878
*   NDYNAMCT=NDYNAMCT+1;            /* KEEP COUNT OF ONLINE FRAMES   */
         LH    @15,NDYNAMCT                                        0878
         LA    @15,1(,@15)                                         0878
         STH   @15,NDYNAMCT                                        0878
*   IF PFTASID^='0000'X             /* SEE IF PFTE IS INITIALIZED    */
*     THEN                          /* IF SO,                        */
         LH    @00,PFTASID(,PFTEPTR)                               0879
         N     @00,@CF05060                                        0879
         LTR   @00,@00                                             0879
         BNZ   @RT00879                                            0879
*     GO TO NPMBPIPG;               /* GO TRY NEXT PAGE FRAME        */
*   IF RINDX1^<NPMVVNDX             /* INDEX LOWER THAN V=R LINE?    */
*     THEN                          /* IF NOT, PUT ON AVAILABLE Q    */
         C     RINDX1,NPMVVNDX                                     0881
         BNL   @RT00881                                            0881
*     GO TO NPMQPFTE;               /* GO TO QUEUEING ROUTINE        */
*NPMBPNIP:                          /* PAGE MUST BE IN NIP REGION    */
*                                                                  0883
*   /*****************************************************************/
*   /*                                                               */
*   /* PUT THE PAGE IN NIP REGION.                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0883
*   PFTVBN=RINDX1;                  /* SET VBN IN PFTE - 1 TO 1    0883
*                                      MAPPING                       */
NPMBPNIP STH   RINDX1,PFTVBN(,PFTEPTR)                             0883
*   PFTASID=NVTMASCB->ASCBASID;     /* PUT IN M.S. ASID              */
         L     @15,NVTMASCB                                        0884
         LH    @00,ASCBASID(,@15)                                  0884
         N     @00,@CF05060                                        0884
         STH   @00,PFTASID(,PFTEPTR)                               0884
*   PFTVRALC='1'B;                  /* SET V=R ALLOCATED FLAG        */
         OI    PFTVRALC(PFTEPTR),B'00000010'                       0885
*   PFTQNDX=PFTNQN;                 /* SET INDEX AS NOT QUEUED       */
         MVI   PFTQNDX(PFTEPTR),X'FF'                              0886
*   GO TO NPMBPIPG;                 /* CONTINUE PFT BUILD            */
         B     NPMBPIPG                                            0887
*NPMQPFTE:                          /* PLACE PFTE ON AVAILABLE Q     */
*                                                                  0888
*   /*****************************************************************/
*   /*                                                               */
*   /* PLACE THE PFTE ON THE AVAILABLE QUEUE. IF THIS IS THE FIRST   */
*   /* TIME ENTERED, PUT A PFTE ON THE SQA RESERVED QUEUE. SET CHAIN */
*   /* POINTER AND QUEUE INDEX OF PFTES.                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0888
*   IF PFTEPTR2=0                   /* PREVIOUS PTR ZERO?            */
*     THEN                          /* IF SO,                        */
*                                                                  0888
NPMQPFTE LTR   PFTEPTR2,PFTEPTR2                                   0888
         BNZ   @RF00888                                            0888
*     /***************************************************************/
*     /*                                                             */
*     /*                                                     @Z40WPXA*/
*     /* CHECK IF ALL RESERVED FRAMES HAVE BEEN SAVED                */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0889
*     IF PVTRSRVF='0000'X           /* ANY ON SQA RESERVED QUEUE?    */
*       THEN                        /* IF NOT, PUT ONE ON            */
         L     @15,PVTPTR                                          0889
         CLC   PVTRSRVF(2,@15),@CB02240                            0889
         BNE   @RF00889                                            0889
*       DO;                                                        0890
*         PVTRSRVL=RINDX1;          /* LAST ONE ON QUEUE             */
         STH   RINDX1,PVTRSRVL(,@15)                               0891
*         PVTRSRVF=RINDX1;          /* FIRST ONE ON QUEUE            */
         STH   RINDX1,PVTRSRVF(,@15)                               0892
*         PFTQNDX=PFTSRQN;          /* SET QUEUE IDENTIFIER          */
         MVI   PFTQNDX(PFTEPTR),X'04'                              0893
*         GO TO NPMBPIPG;           /* GO GET NEXT PAGE FRAME        */
         B     NPMBPIPG                                            0894
*       END;                                                       0895
*     ELSE                                                         0896
*       PVTAFQF=RINDX1;             /* FIRST ON AVAILABLE QUEUE      */
@RF00889 L     @15,PVTPTR                                          0896
         STH   RINDX1,PVTAFQF(,@15)                                0896
*   ELSE                            /* NOT FIRST ON AVAILABLE Q      */
*     DO;                           /* DOUBLE CHAIN TO PREVIOUS      */
         B     @RC00888                                            0897
@RF00888 DS    0H                                                  0898
*       PFTEPTR2->PFTFQPTR=RINDX1;  /* FOWARD CHAIN                  */
         STH   RINDX1,PFTFQPTR(,PFTEPTR2)                          0898
*       PFTBQPTR=PFTEPTR2-PVTPFTP;  /* BACK CHAIN                    */
         LR    @00,PFTEPTR2                                        0899
         L     @15,PVTPTR                                          0899
         SL    @00,PVTPFTP(,@15)                                   0899
         STH   @00,PFTBQPTR(,PFTEPTR)                              0899
*     END;                                                         0900
*   PFTONAVQ='1'B;                  /* FLAG AS AVAILABLE QUEUE       */
@RC00888 OI    PFTONAVQ(PFTEPTR),B'10000000'                       0901
*   PFTQNDX=PFTAFQN;                /* SET AVAILABLE QUEUE INDEX     */
         MVI   PFTQNDX(PFTEPTR),X'00'                              0902
*   PFTEPTR2=PFTEPTR;               /* SET CURRENT AS PREVIOUS       */
         LR    PFTEPTR2,PFTEPTR                                    0903
*   PVTAFQL=RINDX1;                 /* LAST ON QUEUE IS CURRENT      */
         L     @15,PVTPTR                                          0904
         STH   RINDX1,PVTAFQL(,@15)                                0904
*   PVTAFC=PVTAFC+1;                /* INCREMENT AVAILABLE COUNT     */
         LA    @00,1                                               0905
         AH    @00,PVTAFC(,@15)                                    0905
         STH   @00,PVTAFC(,@15)                                    0905
*   GO TO NPMBPIPG;                 /* CONTINUE PFT BUILD            */
         B     NPMBPIPG                                            0906
*NPMPFTXT:                          /* EXIT PROCESSING               */
*                                                                  0907
*   /*****************************************************************/
*   /*                                                               */
*   /* INIT NUCLEUS PAGEOUT DUMMY PFTE                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0907
*   PFTEPTR=PVTPFTP+PVTLPFN+16;     /* DUMMY PFTE PTR.       @G559P2L*/
NPMPFTXT L     @15,PVTPTR                                          0907
         LH    PFTEPTR,PVTLPFN(,@15)                               0907
         N     PFTEPTR,@CF05060                                    0907
         AL    PFTEPTR,PVTPFTP(,@15)                               0907
         AL    PFTEPTR,@CF00081                                    0907
*   PFTASID=NVTMASCB->ASCBASID;     /* INIT TO MASTER'S ID   @G559P2L*/
         L     @14,NVTMASCB                                        0908
         LH    @00,ASCBASID(,@14)                                  0908
         N     @00,@CF05060                                        0908
         STH   @00,PFTASID(,PFTEPTR)                               0908
*   PFTVRALC='1'B;                  /* INIT TO V=R ALLOCATED.      0909
*                                                            @G559P2L*/
         OI    PFTVRALC(PFTEPTR),B'00000010'                       0909
*   PFTQNDX=PFTNQN;                 /* INIT TO NOT ON ANY QUEUE.   0910
*                                                            @G559P2L*/
*                                                                  0910
         MVI   PFTQNDX(PFTEPTR),X'FF'                              0910
*   /*****************************************************************/
*   /*                                                               */
*   /* SET FINAL FIELDS IN PVT NECESSARY TO GET PAGING GOING AND     */
*   /* RELEASE THE LOCK.                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0911
*   PVTPOOL=NDYNAMCT;               /* DYNAMIC PAGE(ONLINE) COUNT    */
*                                                                  0911
         LH    @00,NDYNAMCT                                        0911
         STH   @00,PVTPOOL(,@15)                                   0911
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING FIELDS, PVTLQSA AND PVTHQSA, ARE SET TO A HIGH  */
*   /* VALUE BECAUSE RSM CHECKS THE PVTLQSA AND ASSUMES THAT ALL     */
*   /* PAGES ASSIGNED TO VIRTUAL ADDRESSES ABOVE THE VALUE ARE IN THE*/
*   /* READ ONLY AREA AND SHOULD NOT BE PAGED OUT. THESE VALUES ARE  */
*   /* RESET AFTER IEAVNP05 COMPLETES THE PLPA TO ALLOW PLPA TO BE   */
*   /* PAGED OUT (COLD START).                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0912
*   PVTLQSA='FFF0'X;                /* SET LPA LOW ADDR HIGH         */
         MVC   PVTLQSA(2,@15),@CB04917                             0912
*   PVTHQSA='FFF0'X;                /* SET LPA HIGH ADDR HIGH        */
*                                                                  0913
         MVC   PVTHQSA(2,@15),@CB04917                             0913
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING BLOCK OF CODE SELECTS A NUMBER OF REAL PAGE     */
*   /* FRAMES OFF THE FRONT END OF THE AVAILABLE QUEUE AND RESERVES  */
*   /* THEM ON THE IEAVNIPM QUEUES, NPMAFQF AND NPMAFQL, WHICH ARE   */
*   /* USED TO CONTROL THE ASSIGNMENT OF PAGE FRAMES TO LSQA AND SQA.*/
*   /* THE PAGES THAT ARE SELECTED FOR THIS QUEUE ARE THE HIGHEST    */
*   /* AVAILABLE PAGE FRAMES IN REAL MEMORY, AND ARE ASSIGNED FROM   */
*   /* THE TOP DOWN IN ORDER TO PREVENT POLUTION OF THE POTENTIAL V=R*/
*   /* AREA WITH LONG FIXED PAGES.                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0914
*   IF PVTAFC/2<NPMLFPGN            /* SEE IF HALF OF AVAILABLE      */
*     THEN                          /* PAGE FRAMES IS LESS THAN      */
         LA    @14,2                                               0914
         LH    @15,PVTAFC(,@15)                                    0914
         LR    @08,@15                                             0914
         SRDA  @08,32                                              0914
         DR    @08,@14                                             0914
         CH    @09,NPMLFPGN                                        0914
         BNL   @RF00914                                            0914
*     RWRK1=PVTAFC/2;               /* CONSTANT NUMBER.              */
         LR    @08,@15                                             0915
         SRDA  @08,32                                              0915
         DR    @08,@14                                             0915
         LR    RWRK1,@09                                           0915
*   ELSE                            /* IF NOT, SELECT THE ASSIGNED   */
*     RWRK1=NPMLFPGN;               /* CONSTANT NUMBER TO RESERVE.   */
         B     @RC00914                                            0916
@RF00914 LH    RWRK1,NPMLFPGN                                      0916
*   NPMAFC=RWRK1;                   /* SET AVAILABLE CNT IN NIPM.    */
@RC00914 STH   RWRK1,NPMAFC                                        0917
*   PVTAFC=PVTAFC-RWRK1;            /* DECREMENT REAL AVAIL. CNT.    */
         L     @15,PVTPTR                                          0918
         LH    @00,PVTAFC(,@15)                                    0918
         SLR   @00,RWRK1                                           0918
         STH   @00,PVTAFC(,@15)                                    0918
*   PFTEPTR=PVTPFTP+PVTAFQF;        /* ADDR OF FIRST PFTE ON Q       */
         LH    PFTEPTR,PVTAFQF(,@15)                               0919
         N     PFTEPTR,@CF05060                                    0919
         AL    PFTEPTR,PVTPFTP(,@15)                               0919
*   DO I=RWRK1 BY-1 TO 1;           /* FIND PFTE'S TO STEAL          */
         LR    @00,RWRK1                                           0920
         ST    @00,I                                               0920
         B     @DE00920                                            0920
@DL00920 DS    0H                                                  0921
*     PFTEPTR=PVTPFTP+PFTFQPTR;     /* GET ADDR OF NEXT PFTE         */
         LH    @15,PFTFQPTR(,PFTEPTR)                              0921
         N     @15,@CF05060                                        0921
         L     @14,PVTPTR                                          0921
         AL    @15,PVTPFTP(,@14)                                   0921
         LR    PFTEPTR,@15                                         0921
*   END;                            /* SEARCH ALL DONE               */
         BCTR  @00,0                                               0922
         ST    @00,I                                               0922
@DE00920 LTR   @00,@00                                             0922
         BP    @DL00920                                            0922
*   NPMAFQF=PVTAFQF;                /* SAVE INDEX OF 1ST PFTE        */
         L     @15,PVTPTR                                          0923
         MVC   NPMAFQF(2),PVTAFQF(@15)                             0923
*   PFTEPTR2=PVTPFTP+PFTBQPTR;      /* ADDR OF LAST PFTE       STOLEN*/
         LH    PFTEPTR2,PFTBQPTR(,PFTEPTR)                         0924
         N     PFTEPTR2,@CF05060                                   0924
         AL    PFTEPTR2,PVTPFTP(,@15)                              0924
*   PVTAFQF=PFTEPTR2->PFTFQPTR;     /* REMOVE FROM RSM QUEUES        */
         MVC   PVTAFQF(2,@15),PFTFQPTR(PFTEPTR2)                   0925
*   PFTEPTR2->PFTFQPTR=0;           /* UNHOOK SELECTED PFTES         */
         SLR   @14,@14                                             0926
         STH   @14,PFTFQPTR(,PFTEPTR2)                             0926
*   NPMAFQL=PFTBQPTR;               /* SET LAST PFTE INDEX (NIPM)    */
         MVC   NPMAFQL(2),PFTBQPTR(PFTEPTR)                        0927
*   PFTBQPTR=0;                     /* ZERO BACK CHAIN TO PFTES    0928
*                                      STOLEN FOR USE BY NIPM.       */
         STH   @14,PFTBQPTR(,PFTEPTR)                              0928
*   PVTPSQA=ADDR(NPMSQBCK);         /* SET TRAP TO INTERCEPT LSQA SQA
*                                      PAGE BACKING REQUESTS.        */
         LA    @00,NPMSQBCK                                        0929
         ST    @00,PVTPSQA(,@15)                                   0929
*   PVTLPRIV=NPMVVNDX;              /* SET START OF PRIVATE AREA   0930
*                                      EQUAL TO FIRST V=V PAGE       */
         L     @14,NPMVVNDX                                        0930
         STH   @14,PVTLPRIV(,@15)                                  0930
*   PVTFVR=PVTFPFN;                 /* SET FIRST V=R EQUAL TO FIRST
*                                      PFTER INDEX.                  */
         MVC   PVTFVR(2,@15),PVTFPFN(@15)                          0931
*   PVTLVR=NPMVVNDX-LENGTH(PFTE);   /* SET LAST V=R EQUAL TO HIGH NIP
*                                      PAGE INDEX                    */
         SL    @14,@CF00081                                        0932
         STH   @14,PVTLVR(,@15)                                    0932
*   PVTLCSA=PVTLPRIV;               /* END OF PRIVATE AREA EQUALS  0933
*                                      START OF PRIVATE AREA.        */
*                                                                  0933
         MVC   PVTLCSA(2,@15),PVTLPRIV(@15)                        0933
*   /*****************************************************************/
*   /*                                                               */
*   /* RELEASE THE SALLOC LOCK                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0934
*   RPARM=ADDR(NPLOCKSV);           /* ADDR OF TEMP SAVEAREA         */
         LA    RPARM,NPLOCKSV                                      0934
*   GENERATE REFS(NPLOCKSV,PSALITA,FLC);                           0935
          STM  0,15,0(RPARM)            SAVE REGISTERS
NPBPFTFL  SETLOCK RELEASE,TYPE=SALLOC,RELATED=(RSM,IEAVNIPM(NPBPFTGL))
          LM   0,15,0(RPARM)            RESTORE REGISTERS
*   CVTGDA->NIPFOURK='0'B;          /* REMOVE FREE SQA PAGE TRAP - NO
*                                      INTERFACE TO RSM TO FREE PAGES
*                                      UNTIL BIT IS TURNED OFF       */
         L     @15,CVTPTR                                          0936
         L     @15,CVTGDA(,@15)                                    0936
         NI    NIPFOURK(@15),B'11011111'                           0936
*   RPARM=NVTSTMAP;                 /* GET ADDRESS OF STORAGE MAP    */
         L     RPARM,NVTSTMAP                                      0937
*   GEN(FREEMAIN R,LV=4096,A=(1),SP=252);/* FREE THE MAP             */
         FREEMAIN R,LV=4096,A=(1),SP=252
*   GEN(LM RNVT,RPARM,PFTBLSAV);    /* RESTORE REGISTERS             */
         LM RNVT,RPARM,PFTBLSAV
*   GEN(BR REXIT);                  /* RETURN TO CALLER              */
         BR REXIT
*PFTBLSAV:                          /* SAVE AREA LABEL               */
*   GEN(DS 16F);                    /* SAVE AREA                     */
PFTBLSAV DS 16F
*   RESPECIFY                                                      0942
*    (RPARM,                                                       0942
*     RNVT,                                                        0942
*     RCVT,                         /* UNRESTRICT REGISTERS          */
*     PFTEPTR2,                                                    0942
*     PFTEPTR,                                                     0942
*     RPFTAR,                                                      0942
*     RWRK1) UNRESTRICTED;                                         0942
*   END NPMPFTBL;                   /* END OF NPMPFTBL               */
@EL00007 DS    0H                                                  0943
@EF00007 DS    0H                                                  0943
@ER00007 BR    @14                                                 0943
*                                                                  0944
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE LOADS THE MODULE ILRPREAD WHICH WILL BE USED BY  */
*   /* THE ASM RIM IEAVNP04 AND BY THE RSM RIM IEAVNP05.     @Z40WPXA*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0944
*NPMPREP4:                                                         0944
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);/*                     @Z40WPXA*/
NPMPREP4 DS    0H                                                  0945
*   RFY                                                            0945
*    (RPARM,                                                       0945
*     RNVT,                                                        0945
*     RCVT,                                                        0945
*     RNIPM) RSTD;                  /*                       @Z40WPXA*/
*   GEN(NIPMENTR  PREP4SAV,NPMPREP4);/*                      @Z40WPXA*/
         NIPMENTR  PREP4SAV,NPMPREP4
*   RZERO=ADDR(PREAD);              /* ADDRESS OF NAME       @Z40WPXA*/
         LA    RZERO,PREAD                                         0947
*   RPARM=0;                        /*                       @Z40WPXA*/
         SLR   RPARM,RPARM                                         0948
*   GEN(SVC  8);                    /* LOAD ILRPREAD         @Z40WPXA*/
         SVC  8
*   GEN(LM  RNVT,RPARM,PREP4SAV);   /*                       @Z40WPXA*/
         LM  RNVT,RPARM,PREP4SAV
*   GEN(BR  REXIT);                 /*                       @Z40WPXA*/
         BR  REXIT
*PREP4SAV:                                                         0952
*   GEN(DS  16F);                   /*                       @Z40WPXA*/
PREP4SAV DS  16F
*   RFY                                                            0953
*    (RPARM,                                                       0953
*     RNVT,                                                        0953
*     RCVT,                                                        0953
*     RNIPM) UNRSTD;                /*                       @Z40WPXA*/
*   END NPMPREP4;                   /*                       @Z40WPXA*/
@EL00008 DS    0H                                                  0954
@EF00008 DS    0H                                                  0954
@ER00008 BR    @14                                                 0954
*                                                                  0955
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE CONSTRUCTS CONTROL BLOCKS FOR THE V=V COMMON AREA*/
*   /* REGION, INCLUDING THE PLPA AREA IF IT IS A COLD START.        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0955
*NPMPREP5:                          /* NPMPREP5 SUBROUTINE           */
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             0955
NPMPREP5 DS    0H                                                  0956
*   RESPECIFY                       /* RESTRICT REGISTERS            */
*    (RPARM,                        /* PARAMETER REGISTERS           */
*     RNVT,                         /* POINTER TO NVT                */
*     RCVT,                         /* POINTER TO CVT                */
*     RNIPM) RESTRICTED;            /* WORK REGISTER                 */
*   GEN(NIPMENTR PREP5SAV,NPMPREP5);/* ENTRY LINKAGE                 */
*                                                                  0957
         NIPMENTR PREP5SAV,NPMPREP5
*   /*****************************************************************/
*   /*                                                               */
*   /* IF QUICK START, SET UP NVTLVIRT WITH LOW ADDR OF PLPA.        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0958
*   IF NVTFLQS='1'B                 /* IF QUICK START        @Z40WPXA*/
*     THEN                          /*                       @Z40WPXA*/
         TM    NVTFLQS,B'00001000'                                 0958
         BNO   @RF00958                                            0958
*     DO;                           /* DO QS. PROCESSING     @Z40WPXA*/
*       NVTLVIRT=NVTLPALO;          /* LOW ADDR OF PLPA      @Z40WPXA*/
         L     @06,NVTLPALO                                        0960
         ST    @06,NVTLVIRT                                        0960
*     END;                          /*                       @Z40WPXA*/
*                                                                  0961
*   /*****************************************************************/
*   /*                                                               */
*   /* GET AREA FOR V=V REGION CONTROL BLOCKS AND INITIALIZE THEM TO */
*   /* DESCRIBE EVERYTHING ABOVE 8 MEGS, UP TO SQA IF A COLD START,  */
*   /* OR UP TO PLPA IF A QUICK START                        @Z40WPXA*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0962
*   NGETLEN=LENGTH(PQESECT)+LENGTH(FBQESECT)+8;/* AREA SIZE          */
@RF00958 MVC   NGETLEN(3),@CF03004+1                               0962
*   RZERO=NGETSIZE;                 /* SETUP FOR GETMAIN-SP 245      */
         L     RZERO,NGETSIZE                                      0963
*   GEN(GETMAIN R,LV=(0));          /* GET AREA FOR CONTROL BLOCKS   */
         GETMAIN R,LV=(0)
*   RPARM=RPARM-8;                  /* BACK OFF ADDR FOR DPQE        */
         SL    RPARM,@CF00125                                      0965
*   NVTVPQE=RPARM;                  /* SAVE ADDR OF DPQE FOR REGN    */
*                                                                  0966
         ST    RPARM,NVTVPQE                                       0966
*   /*****************************************************************/
*   /*                                                               */
*   /* ZERO THE BACK POINTER                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0967
*   RPARM->PQEBPQE=RPARM->PQEBPQE&&RPARM->PQEBPQE;                 0967
*                                                                  0967
         L     @06,PQEBPQE(,RPARM)                                 0967
         LR    @05,@06                                             0967
         XR    @05,@06                                             0967
         ST    @05,PQEBPQE(,RPARM)                                 0967
*   /*****************************************************************/
*   /*                                                               */
*   /* SET FORWARD CHAIN POINTER IN DPQE                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0968
*   RPARM->PQEFPQE=RPARM+16;                                       0968
*                                                                  0968
         LA    @06,16                                              0968
         LR    @05,RPARM                                           0968
         ALR   @05,@06                                             0968
         ST    @05,PQEFPQE(,RPARM)                                 0968
*   /*****************************************************************/
*   /*                                                               */
*   /* ALSO PUT PQE PTR IN LDA TO INSURE THAT GETMAIN/FREEMAIN WILL  */
*   /* FIND THE CORRECT PQE FOR THE V=V REGION WHETHER THEY SEARCH   */
*   /* FROM THE LDA OR TCBPQE FIELD TO FIND IT. THE PQE POINTER      */
*   /* ORIGINALLY SETUP IN LDA IS SAVED AND RESTORED LATER IN THE    */
*   /* NPMCLNUP ROUTINE WHICH CLEANS UP AFTER IEAVNP05 HAS BUILT THE */
*   /* PLPA.                                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0969
*   NLDAPQEA=NVTMASCB->ASCBLDA->ASDPQE;/* SAVE CURRENT PTR           */
         L     @15,NVTMASCB                                        0969
         L     @15,ASCBLDA(,@15)                                   0969
         L     @00,ASDPQE(,@15)                                    0969
         ST    @00,NLDAPQEA                                        0969
*   NVTMASCB->ASCBLDA->ASDPQE=RPARM+16;/* SET PTR TO V=V PQE         */
*                                                                  0970
         ST    @05,ASDPQE(,@15)                                    0970
*   /*****************************************************************/
*   /*                                                               */
*   /* BUMP UP BASE TO REAL PQE FOR REGION                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0971
*   RPARM=RPARM+16;                                                0971
*                                                                  0971
         ALR   RPARM,@06                                           0971
*   /*****************************************************************/
*   /*                                                               */
*   /* SET PQE TO ZEROES                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0972
*   RPARM->PQESECT=RPARM->PQESECT&&RPARM->PQESECT;                 0972
*                                                                  0972
         XC    PQESECT(32,RPARM),PQESECT(RPARM)                    0972
*   /*****************************************************************/
*   /*                                                               */
*   /* SET CHAIN POINTERS TO FBQE                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0973
*   RPARM->PQEFFBQE=RPARM+LENGTH(PQESECT);                         0973
         LA    @05,32                                              0973
         LR    @14,RPARM                                           0973
         ALR   @14,@05                                             0973
         ST    @14,PQEFFBQE(,RPARM)                                0973
*   RPARM->PQEBFBQE=RPARM+LENGTH(PQESECT);                         0974
*                                                                  0974
         ST    @14,PQEBFBQE(,RPARM)                                0974
*   /*****************************************************************/
*   /*                                                               */
*   /* SET BACK CHAIN PQE POINTER TO DPQE                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0975
*   RPARM->PQEBPQE=RPARM-16;                                       0975
         LCR   @06,@06                                             0975
         ALR   @06,RPARM                                           0975
         ST    @06,PQEBPQE(,RPARM)                                 0975
*   RPARM->PQETCB=NVTVVTCB;         /* SET POINTER TO TCB            */
         L     @06,NVTVVTCB                                        0976
         ST    @06,PQETCB(,RPARM)                                  0976
*   RPARM->PQESIZE=NVTLVIRT-NVTVVPG1;/* SIZE OF V=V REGION           */
         L     @06,NVTLVIRT                                        0977
         L     @14,NVTVVPG1                                        0977
         LR    @09,@06                                             0977
         SLR   @09,@14                                             0977
         ST    @09,PQESIZE(,RPARM)                                 0977
*   RPARM->PQEREGN=NVTVVPG1;        /* ADDR OF START OF REGION       */
         ST    @14,PQEREGN(,RPARM)                                 0978
*   RPARM=RPARM+LENGTH(PQESECT);    /* SET BASE TO FBQE              */
*                                                                  0979
         ALR   RPARM,@05                                           0979
*   /*****************************************************************/
*   /*                                                               */
*   /* CLEAR THE FBQE FORWARD CHAIN POINTER TO ZEROES                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0980
*   RPARM->FBQESECT=RPARM->FBQESECT&&RPARM->FBQESECT;              0980
         XC    FBQESECT(16,RPARM),FBQESECT(RPARM)                  0980
*   RPARM->FWDPTR=RPARM-LENGTH(PQESECT);/* SET BACK CHAIN            */
         LCR   @05,@05                                             0981
         ALR   @05,RPARM                                           0981
         ST    @05,FWDPTR(,RPARM)                                  0981
*   RPARM->BCKPTR=RPARM-LENGTH(PQESECT);/* POINT BACK TO PQE         */
         ST    @05,BCKPTR(,RPARM)                                  0982
*   RPARM->SIZE=NVTLVIRT-NVTVVPG1;  /* SET SIZE OF AREA              */
         ST    @09,SIZE(,RPARM)                                    0983
*   RPARM->FBQAREA=NVTVVPG1;        /* ADDRESS OF AREA               */
         ST    @14,FBQAREA(,RPARM)                                 0984
*   NVTMASCB->ASCBLDA->CURRGNTP=NVTLVIRT;/* SET CURRENT TOP          */
*                                                                  0985
         ST    @06,CURRGNTP(,@15)                                  0985
*   /*****************************************************************/
*   /*                                                               */
*   /* INCREASE PASIZE VALUE IN GDA TO INCLUDE V=V AREA FOR BUILDING */
*   /* THE PLPA. THIS WILL KEEP FREEMAIN FROM GETTING CONFUSED.      */
*   /* PASIZE MUST INCLUDE AREA FROM PASTRT TO BOTTOM OF SQA.        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0986
*   CVTGDA->PASIZE=NVTLVIRT-CVTGDA->PASTRT;                        0986
         L     @05,CVTPTR                                          0986
         L     @05,CVTGDA(,@05)                                    0986
         SL    @06,PASTRT(,@05)                                    0986
         ST    @06,PASIZE(,@05)                                    0986
*   GEN(LM  RNVT,RPARM,PREP5SAV);   /* RESTORE REGISTERS             */
         LM  RNVT,RPARM,PREP5SAV
*   GEN(BR REXIT);                  /* RETURN TO CALLER              */
         BR REXIT
*PREP5SAV:                                                         0989
*   GEN(DS  16F);                   /* SAVE AREA                     */
PREP5SAV DS  16F
*   RESPECIFY                       /* UNRESTRICT REGISTERS          */
*    (RPARM,                                                       0990
*     RNVT,                                                        0990
*     RCVT,                                                        0990
*     RNIPM) UNRESTRICTED;          /* REGISTERS UNRESTRICTED        */
*   END NPMPREP5;                   /* END OF NPMPREP5 PROC          */
@EL00009 DS    0H                                                  0991
@EF00009 DS    0H                                                  0991
@ER00009 BR    @14                                                 0991
*                                                                  0992
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE GETS CONTROL AFTER THE LPAS ARE BUILT (THE CSA   */
*   /* NOT ALLOCATED YET). IT SWAPS ITSELF TO V=V STATUS AND FREES   */
*   /* THE PART OF THE AREA ALLOCATED FOR UPPER COMMON THAT WAS NOT  */
*   /* USED BY ISSUING A FREEMAIN FOR THE SPACE FROM SP 252. THIS    */
*   /* FREES THE PAGE TABLES CONSTRUCTED FOR THIS UNUSED PORTION. THE*/
*   /* SUBPOOL DEFINITION BLOCKS ARE FREED BY IEAVNIPX. THE PLPA IS  */
*   /* ALSO ESTABLISHED AS A READ ONLY AREA BY SETTING THE NECESSARY */
*   /* FIELDS IN THE PVT. HEREAFTER, NO PAGE OUTS WILL BE HONORED FOR*/
*   /* THE PLPA AREA BY RSM.                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0992
*NPMCLNUP:                          /* NPMCLNUP SUBROUTINE           */
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             0992
NPMCLNUP DS    0H                                                  0993
*   RESPECIFY                       /* RESTRICT REGISTERS            */
*    (RPARM,                        /* PARAMETER REGISTER            */
*     RNIPM,                        /* WORK REGISTER                 */
*     RNVT,                         /* NVT POINTER                   */
*     RCVT,                         /* CVT POINTER                   */
*     RZERO) RESTRICTED;            /* FREEMAIN REGISTER             */
*   GEN(NIPMENTR CLNUPSAV,NPMCLNUP);/* ENTRY LINKAGE                 */
*                                                                  0994
         NIPMENTR CLNUPSAV,NPMCLNUP
*   /*****************************************************************/
*   /*                                                               */
*   /* SWAP TO V=V STATUS                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0995
*   GEN(IEAPMNIP TYPE=VIRT,MOD=NIPM);                              0995
*                                                                  0995
         IEAPMNIP TYPE=VIRT,MOD=NIPM
*   /*****************************************************************/
*   /*                                                               */
*   /* IF PSA HAS BEEN SAVED BY IEAVNIP0, MOVE IT TO V=V AREA        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0996
*   IF NVTSGPSA^=0                  /* WAS PSA SAVED                 */
*     THEN                          /* YES, COPY IT TO V=V           */
         SLR   @06,@06                                             0996
         C     @06,NVTSGPSA                                        0996
         BE    @RF00996                                            0996
*     DO;                                                          0997
*       NVTLVIRT=((NVTLVIRT-4096)×4095)&&4095;/* ROUND DOWN          */
         LA    @05,4095                                            0998
         L     @15,NVTLVIRT                                        0998
         SL    @15,@CF04798                                        0998
         OR    @15,@05                                             0998
         XR    @15,@05                                             0998
         ST    @15,NVTLVIRT                                        0998
*       DO I=0 BY 1 TO 15;          /* MOVE A FULL PAGE              */
         ST    @06,I                                               0999
@DL00999 DS    0H                                                  1000
*         NVTLVIRT->NIPSGPSA(1+I*256:256+I*256)=NVTSGPSA->NIPSGPSA(1+I*
*             256:256+I*256);                                      1000
         LR    @05,@06                                             1000
         SLA   @05,8                                               1000
         L     @15,NVTLVIRT                                        1000
         ALR   @15,@05                                             1000
         L     @14,NVTSGPSA                                        1000
         ALR   @14,@05                                             1000
         MVC   NIPSGPSA(256,@15),NIPSGPSA(@14)                     1000
*       END;                                                       1001
*                                                                  1001
         AL    @06,@CF00144                                        1001
         ST    @06,I                                               1001
         C     @06,@CF00122                                        1001
         BNH   @DL00999                                            1001
*       /*************************************************************/
*       /*                                                           */
*       /* SET CVTVPSA FIELD TO ADDRESS OF PSA PAGE                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  1002
*       CVTVPSA=NVTLVIRT;                                          1002
         L     @06,NVTLVIRT                                        1002
         L     @05,CVTPTR                                          1002
         ST    @06,CVTVPSA(,@05)                                   1002
*     END;                                                         1003
*   ELSE                                                           1004
*     ;                                                            1004
@RF00996 DS    0H                                                  1005
*   RNIPM=NVTLVIRT/256;             /* VBN FOR LOWEST USED V=V       */
         L     @06,NVTLVIRT                                        1005
         LR    RNIPM,@06                                           1005
         SRL   RNIPM,8                                             1005
*   CVTPVTP->PVTLCSA=RNIPM;         /* PLACE IN PVTLCSA SO THAT RSM
*                                      WILL DESTROY PAGE TABLES AND
*                                      SGT ENTRIES ON FREEMAIN       */
         L     @05,CVTPTR                                          1006
         L     @05,CVTPVTP(,@05)                                   1006
         STH   RNIPM,PVTLCSA(,@05)                                 1006
*   NPMFRLEN=NVTLVIRT-NVTVVPG1;     /* SIZE OF AREA TO FREE          */
         SL    @06,NVTVVPG1                                        1007
         STCM  @06,7,NPMFRLEN                                      1007
*   RZERO=NPMFRRGN;                 /* INPUT TO FREEMAIN             */
         L     RZERO,NPMFRRGN                                      1008
*   GEN(FREEMAIN R,LV=(0),A=NVTVVPG1);                             1009
         FREEMAIN R,LV=(0),A=NVTVVPG1
*   RNIPM=NVTVVPG1/256;             /* RECONSTRUCT ORIGINAL VALUE    */
         L     RNIPM,NVTVVPG1                                      1010
         SRL   RNIPM,8                                             1010
*   CVTPVTP->PVTLCSA=RNIPM;         /* RETURN VALUE TO PVTLCSA       */
         L     @06,CVTPTR                                          1011
         L     @06,CVTPVTP(,@06)                                   1011
         STH   RNIPM,PVTLCSA(,@06)                                 1011
*   GEN(IEAPMNIP TYPE=REAL,MOD=NIPM);/* SWAP BACK TO V=R             */
*                                                                  1012
         IEAPMNIP TYPE=REAL,MOD=NIPM
*   /*****************************************************************/
*   /*                                                               */
*   /* AS A RESULT OF RESETTING THE PVTLCSA FIELD, ABOVE, PRIOR TO   */
*   /* THE FREEMAIN, RSM MADE ADJUSTMENTS TO THE COUNTS ASSOCIATED   */
*   /* WITH THE WRONG QUEUES. ANY REAL PAGE FRAMES ASSIGNED TO THE   */
*   /* AREA BEING FREED, WERE ACCOUNTED FOR ON THE COMMON QUEUE      */
*   /* COUNT, PVTCFMCT, BUT SINCE PVTLCSA WAS RESET ABOVE THE AREA   */
*   /* BEING FREED SO THAT PAGE TABLES WOULD BE DESTROYED, ANY REAL  */
*   /* PAGES BEING RELEASED AS A RESULT OF THE FREEMAIN WILL RESULT  */
*   /* IN THE LOCAL QUEUE COUNT, ASCBFMCT, BEING DECREMENTED. THIS   */
*   /* ROUTINE MUST THEREFORE ADJUST THESE COUNTS TO MAKE THEM RIGHT.*/
*   /* THE LOCAL QUEUE COUNT, ASCBFMCT, SHOULD ONLY REFLECT THE      */
*   /* INITIAL LSQA PAGES SETUP BY IEAVNIP0, SO BY SUBTRACTING OUT   */
*   /* THE COUNT FOR THESE PAGES, AND THEN ADDING THE RESULT TO THE  */
*   /* COMMON QUEUE COUNT, PVTCFMCT, AND THEN SETTING THE LOCAL QUEUE*/
*   /* COUNT TO THE NUMBER OF LSQA PAGES ASSIGNED BOTH QUEUE COUNTS  */
*   /* SHOULD BE CORRECT. THE SALLOC LOCK MUST BE HELD SINCE SOME    */
*   /* PAGING COULD BE GOING ON AT THIS TIME TO CLEANUP THE LPA.     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1013
*   RPARM=ADDR(NPLOCKSV);           /* SETLOCK SAVE AREA      YM02651*/
         LA    RPARM,NPLOCKSV                                      1013
*/*                                                           YM02651*/
*                                                                  1014
*   GENERATE REFS(PSALITA,FLC);                                    1014
*                                                                  1014
           STM 0,15,0(RPARM)             SAVE REGS              YM02651
NPMCLNGL  SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,                      *
               RELATED=(RSM,IEAVNIPM(NPMCLNFL))                 YM02651
          LM   0,15,0(RPARM)             RESTORE REGISTERS      YM02651
*/*                                                          @OZ00057*/
*                                                                  1015
*   CVTPVTP->PVTCFMCT=CVTPVTP->PVTCFMCT+NVTMASCB->ASCBFMCT-NVTLSQNO;
         L     @06,CVTPTR                                          1015
         L     @05,CVTPVTP(,@06)                                   1015
         LH    @15,NVTLSQNO                                        1015
         L     @14,NVTMASCB                                        1015
         LH    @09,PVTCFMCT(,@05)                                  1015
         AH    @09,ASCBFMCT(,@14)                                  1015
         SLR   @09,@15                                             1015
         STH   @09,PVTCFMCT(,@05)                                  1015
*                                   /* ADJUST COMMON QUEUE COUNT     */
*   NVTMASCB->ASCBFMCT=NVTLSQNO;    /* SET LOCAL QUEUE CNT    YM02651*/
*                                                                  1016
         STH   @15,ASCBFMCT(,@14)                                  1016
*   /*****************************************************************/
*   /*                                                               */
*   /* NOW THE SLOT COUNTS IN MASTERS ASCB AND THE ASMVT MUST BE     */
*   /* ADJUSTED. NO LOCAL PAGING I/O HAS OCCURED YET, SO THE COUNTS  */
*   /* ARE SET TO ZERO AT THIS POINT.                        @Z40WPXA*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1017
*   NVTMASCB->ASCBNVSC=0;           /* SET SLOT COUNT IN ASCB TO ZERO
*                                                            @Z40WPXA*/
         SLR   @05,@05                                             1017
         STH   @05,ASCBNVSC(,@14)                                  1017
*   CVTASMVT->ASMNVSC=0;            /* SET SLOT COUNT IN ASMVT TO 0
*                                                            @Z40WPXA*/
         L     @06,CVTASMVT(,@06)                                  1018
         ST    @05,ASMNVSC(,@06)                                   1018
*   RPARM=ADDR(NPLOCKSV);           /* SETLOCK SAVE AREA      YM02651*/
         LA    RPARM,NPLOCKSV                                      1019
*/*                                                           YM02651*/
*                                                                  1020
*   GENERATE REFS(PSALITA,FLC);                                    1020
*                                                                  1020
           STM  0,15,0(RPARM)           SAVE REGS               YM02651
*                                                               YM02651
NPMCLNFL  SETLOCK RELEASE,TYPE=SALLOC,RELATED=(RSM,IEAVNIPM(NPMCLNGL))
           LM   0,15,0(RPARM)           RESTORE REGISTERS       YM02651
*   /*****************************************************************/
*   /*                                                               */
*   /* IF PSA PAGE WAS SAVED PREVIOUSLY, FREEMAIN THE SAVEAREA       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1021
*   IF NVTSGPSA^=0 THEN                                            1021
         L     @06,NVTSGPSA                                        1021
         LTR   @06,@06                                             1021
         BZ    @RF01021                                            1021
*     DO;                                                          1022
*       RPARM=NVTSGPSA;             /* GET ADDRESS OF AREA TO FREE   */
         LR    RPARM,@06                                           1023
*       GEN( FREEMAIN R,LV=4096,A=(1),SP=252);                     1024
          FREEMAIN R,LV=4096,A=(1),SP=252
*     END;                                                         1025
*   ELSE                                                           1026
*     ;                                                            1026
@RF01021 DS    0H                                                  1027
*   RNIPM=(NVTLPALO/4096)*16;       /* VBN FOR LOW PLPA      @Z40WPXA*/
         L     RNIPM,NVTLPALO                                      1027
         SRL   RNIPM,12                                            1027
         SLA   RNIPM,4                                             1027
*   CVTPVTP->PVTLQSA=RNIPM;         /* SET LOW READ-ONLY AREA ADDR   */
         L     @06,CVTPTR                                          1028
         L     @06,CVTPVTP(,@06)                                   1028
         STH   RNIPM,PVTLQSA(,@06)                                 1028
*   RNIPM=(NVTLPAND/4096)*16;       /* VBN FOR HIGH PLPA     @Z40WPXA*/
         L     RNIPM,NVTLPAND                                      1029
         SRL   RNIPM,12                                            1029
         SLA   RNIPM,4                                             1029
*   CVTPVTP->PVTHQSA=RNIPM;         /* SET HIGH ADDR OF READ-ONLY    */
*                                                                  1030
         STH   RNIPM,PVTHQSA(,@06)                                 1030
*   /*****************************************************************/
*   /*                                                               */
*   /* RESTORE THE PQE PTR IN THE MASTERS LDA TO POINT TO THE PQE IN */
*   /* LDA. IT WAS MODIFIED TO POINT TO THE V=V PQE BUILT FOR        */
*   /* CONSTRUCTION OF THE PLPA BEFORE IEAVNP05 WAS LOADED AND       */
*   /* EXECUTED.                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1031
*   NVTMASCB->ASCBLDA->ASDPQE=NLDAPQEA;/* RESTORE PQE PTR            */
         L     @06,NVTMASCB                                        1031
         L     @06,ASCBLDA(,@06)                                   1031
         L     @05,NLDAPQEA                                        1031
         ST    @05,ASDPQE(,@06)                                    1031
*   RZERO=ADDR(PREAD);              /*                       @Z40WPXA*/
         LA    RZERO,PREAD                                         1032
*   GEN(SVC 9);                     /* DELETE ILRPREAD       @Z40WPXA*/
         SVC 9
*   GEN(LM  RNVT,RPARM,CLNUPSAV);   /* RESTORE REGISTERS             */
         LM  RNVT,RPARM,CLNUPSAV
*   GEN(BR   REXIT);                /* RETURN TO CALLER              */
         BR   REXIT
*CLNUPSAV:                                                         1036
*   GEN(DS   16F);                  /* SAVEAREA FOR THIS ROUTINE     */
CLNUPSAV DS   16F
*   RESPECIFY                       /* UNRESTRICT REGISTERS          */
*    (RPARM,                                                       1037
*     RNVT,                                                        1037
*     RNIPM,                                                       1037
*     RCVT,                                                        1037
*     RZERO) UNRESTRICTED;                                         1037
*   END NPMCLNUP;                   /* END OF NPMCLNUP ROUTINE       */
@EL00010 DS    0H                                                  1038
@EF00010 DS    0H                                                  1038
@ER00010 BR    @14                                                 1038
*                                                                  1039
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE SCHEDULES AN SRB AND SERIALIZES ITS EXECUTION.   */
*   /* THE SRB IS SCHEDULED WITH CPU AFFINITY TO THE CPU SPECIFIED IN*/
*   /* THE INPUT PARAMETER LIST. AFTER THE SRB IS SCHEDULED, A WAIT  */
*   /* IS ISSUED FROM THIS ROUTINE ON AN ECB THAT IS POSTED (BRANCH  */
*   /* ENTRY) WHEN THE ROUTINE RUNNING UNDER THE SRB COMPLETES.      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1039
*NIPSCHED:                          /* NIP SCHED ROUTINE             */
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             1039
NIPSCHED DS    0H                                                  1040
*   RESPECIFY                       /* RESTRICT REGISTERS            */
*    (RPARM,                        /* PARAMETER REGISTER            */
*     RNVT,                         /* POINTER TO NVT                */
*     RCVT,                         /* POINTER TO CVT                */
*     RWRK1,                        /* WORK REGISTER                 */
*     RNIPM) RESTRICTED;            /* WORK REGISTER                 */
*   GEN(NIPMENTR SCHEDSAV,NIPSCHED);/* ENTRY PROCESSING              */
         NIPMENTR SCHEDSAV,NIPSCHED
*   PARMHOLD=RPARM;                 /* SAVE CALLERS PARM LIST        */
         ST    RPARM,PARMHOLD                                      1042
*   NSRBSP=245;                     /* GET SUBPOOL ID-SRB SHOULD BE
*                                      PLACED IN SP245 SO THAT IT IS
*                                      ADDRESSABLE BY ALL (GLOBAL) 1043
*                                                            @YM08126*/
         MVI   NSRBSP,X'F5'                                        1043
*   NSRBLEN=LENGTH(SRB);            /* GET SIZE OF SRB               */
         MVC   NSRBLEN(3),@CF02923+1                               1044
*   RZERO=GETWORD;                  /* GET SIZE AND SP IN REG 0      */
         L     RZERO,GETWORD                                       1045
*   GEN(GETMAIN R,LV=(0));          /* GETMAIN THE AREA FOR SRB      */
*                                                                  1046
         GETMAIN R,LV=(0)
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE THE SRB TO RUN LOCALLY AT SYSTEM PRIORITY.         */
*   /* ESTABLISH CPU AFFINITY WITH CPU SPECIFIED IN PARAMETER LIST   */
*   /* PASSED TO THIS ROUTINE BY THE CALLER. SET ENTRY POINT IN SRB  */
*   /* TO POINT TO LABEL NPSRBENT IN THIS ROUTINE. THE CODE AT LABEL */
*   /* NPSRBENT WILL THEN IN TURN CALL THE ROUTINE (BALR) THAT THE   */
*   /* CALLER OF NIPSCHED SPECIFIED IN THE PARAMETER LIST.           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1047
*   RPARM->SRB=RPARM->SRB&&RPARM->SRB;/* ZERO THE AREA               */
         XC    SRB(44,RPARM),SRB(RPARM)                            1047
*   RPARM->SRBID='SRB ';            /* SRB IDENTIFIER FIELD          */
         MVC   SRBID(4,RPARM),@CC04940                             1048
*   RPARM->SRBASCB=NVTMASCB;        /* ASCB ADDRESS INTO SRB         */
         L     @05,NVTMASCB                                        1049
         ST    @05,SRBASCB(,RPARM)                                 1049
*   RPARM->SRBEP=ADDR(NPSRBENT);    /* ENTRY POINT ADDRESS           */
         LA    @05,NPSRBENT                                        1050
         ST    @05,SRBEP(,RPARM)                                   1050
*   RPARM->SRBPRIOR=0;              /* SYSTEM LEVEL PRIORITY         */
         MVI   SRBPRIOR(RPARM),X'00'                               1051
*   RNIPM=NAFFMASK;                 /* PUT AFFINITY MASK IN REG      */
         L     RNIPM,NAFFMASK                                      1052
*   RWRK1=PARMHOLD->NSCHDCPU;       /* GET CPU ADDR                  */
*                                                                  1053
         L     @05,PARMHOLD                                        1053
         LH    RWRK1,NSCHDCPU(,@05)                                1053
         N     RWRK1,@CF05060                                      1053
*   /*****************************************************************/
*   /*                                                               */
*   /* CONVERT THE CPU ADDRESS (2 BYTES) INTO AN AFFINITY MASK THAT  */
*   /* CAN BE PLACED INTO THE SRB.                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1054
*   DO WHILE RWRK1^=0;              /* CONVERT ADDR TO MASK VALUE    */
         B     @DE01054                                            1054
@DL01054 DS    0H                                                  1055
*     GEN(SRL  RNIPM,1);            /* SHIFT TO NEXT MASK VALUE      */
         SRL  RNIPM,1
*     RWRK1=RWRK1-1;                /* DECREMENT ADDR UNTIL ZERO     */
         BCTR  RWRK1,0                                             1056
*   END;                                                           1057
@DE01054 LTR   RWRK1,RWRK1                                         1057
         BNZ   @DL01054                                            1057
*   NCPUAFF=RNIPM;                  /* MOVE MASK TO STORAGE          */
         ST    RNIPM,NCPUAFF                                       1058
*   RPARM->SRBCPAFF=NSRBAFF;        /* PUT MASK INTO SRB             */
         LH    @05,NSRBAFF                                         1059
         STH   @05,SRBCPAFF(,RPARM)                                1059
*   RPARM->SRBPARM=ADDR(SCHEDSAV);  /* PASS SAVEARE AS PARAM         */
         LA    @05,SCHEDSAV                                        1060
         ST    @05,SRBPARM(,RPARM)                                 1060
*   RNIPM=RPARM;                    /* SAVE SRB ADDRESS              */
         LR    RNIPM,RPARM                                         1061
*   NPMECB=NPMECB&&NPMECB;          /* CLEAR ECB FIELD               */
*                                                                  1062
         L     @05,NPMECB                                          1062
         LR    @00,@05                                             1062
         XR    @00,@05                                             1062
         ST    @00,NPMECB                                          1062
*   /*****************************************************************/
*   /*                                                               */
*   /* SCHEDULE THE SRB (LOCAL, SYSTEM PRIORITY, CPU AFFINITY)       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1063
*   GEN REFS(CVTLSMQ,SRBFLNK)(SCHEDULE SRB=(1));                   1063
*                                                                  1063
         SCHEDULE SRB=(1)
*   /*****************************************************************/
*   /*                                                               */
*   /* WAIT FOR SRB ROUTINE TO COMPLETE PROCESSING                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1064
*   GEN(WAIT  ECB=NPMECB);          /* WAIT ON COMPLETION            */
         WAIT  ECB=NPMECB
*   RPARM=RNIPM;                    /* GET BACK THE SRB ADDRESS      */
         LR    RPARM,RNIPM                                         1065
*   RZERO=GETWORD;                  /* GET SUPPOOL ID AND SIZE       */
         L     RZERO,GETWORD                                       1066
*   GEN(FREEMAIN R,LV=(0),A=(1));   /* FREE THE SRB AREA             */
         FREEMAIN R,LV=(0),A=(1)
*   GEN(LM RNVT,RPARM,SCHEDSAV);    /* RESTORE REGISTERS             */
         LM RNVT,RPARM,SCHEDSAV
*   GEN(BR REXIT);                  /* RETURN TO CALLER              */
*                                                                  1069
         BR REXIT
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING BLOCK OF CODE GETS CONTROL UNDER THE THE SRB    */
*   /* THAT WAS SCHEDULED. IT PASSES CONTROL TO THE ROUTINE SPECIFIED*/
*   /* BY THE CALLER OF NIPSCHED, AND WHEN CONTROL RETURNS, POSTS THE*/
*   /* WAITING TASK AND EXITS.                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1070
*NPSRBENT:                          /* ENTERED IN SRB MODE           */
*   GEN(LM  RNVT,RSAVE,0(RPARM));   /* SETUP ADDRESSABILITY          */
NPSRBENT LM  RNVT,RSAVE,0(RPARM)
*   GEN(LM RBASE,RBASE2,NVTNIPM-NVT(RNVT));/* GET BASES              */
         LM RBASE,RBASE2,NVTNIPM-NVT(RNVT)
*   NSRBEXIT=REXIT;                 /* SAVE ADDR OF SRB EXIT RTN     */
         ST    REXIT,NSRBEXIT                                      1072
*   RENTRY=PARMHOLD->NSCHDPTR;      /* GET ENTRY TO CALLERS RTN      */
         L     @05,PARMHOLD                                        1073
         L     RENTRY,NSCHDPTR(,@05)                               1073
*   RPARM=PARMHOLD->NSCHDPRM;       /* GET PTR TO CALLERS PARMLIST   */
         L     RPARM,NSCHDPRM(,@05)                                1074
*   GEN(BALR  REXIT,RENTRY);        /* GO TO CALLERS SRB ROUTINE     */
         BALR  REXIT,RENTRY
*NPSRBRTN:                                                         1076
*   GEN(LM    RNVT,RSAVE,SCHEDSAV-NPSRBRTN(REXIT));                1076
NPSRBRTN LM    RNVT,RSAVE,SCHEDSAV-NPSRBRTN(REXIT)
*   GEN(LM RBASE,RBASE2,NVTNIPM-NVT(RNVT));/* GET BASES              */
         LM RBASE,RBASE2,NVTNIPM-NVT(RNVT)
*   GEN(ST    RENTRY,SCHEDSAV+52);  /* SAVE RETURN CODE              */
         ST    RENTRY,SCHEDSAV+52
*   RENTRY=CVT0PT01;                /* GET BRANCH ENTRY TO POST      */
         L     @05,CVTPTR                                          1079
         L     RENTRY,CVT0PT01(,@05)                               1079
*   GENERATE REFS(NPMECB,NSRBEXIT,PSALITA);                        1080
         LA    5,NPLOCKSV              MOVE SAVEAREA ADDR TO A
*                                      NON-VOLATILE REGISTER.
         STM   0,15,NPLOCKSV           SAVE REGISTERS LOCALLY
NPSET1   SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        *
               RELATED=(POST,IEAVNIPM(NPREL1))
         LM    0,15,0(5)             RESTORE REGISTERS
         SR    10,10                   NO COMP CODE FOR POST ENTRY
         LA    11,NPMECB               ADDR OF ECB TO BE POSTED
         BALR  14,15                   BRANCH TO POST ECB
         LM    0,15,0(5)               RESTORE REGISTERS
NPREL1   SETLOCK RELEASE,TYPE=LOCAL,RELATED=(POST,IEAVNIPM(NPSET1))
         LM    0,15,0(5)               RESTORE REGISTERS
         L     REXIT,NSRBEXIT          GET ADDR OF SRB EXIT ROUTINE
         BR    REXIT                   EXIT FROM SRB PROCESSING
*SCHEDSAV:                          /* SAVE AREA LABEL               */
*   GEN(DS 16F);                    /* SAVE AREA                     */
SCHEDSAV DS 16F
*   RESPECIFY                       /* UNRESTRICT REGISTERS          */
*    (RPARM,                                                       1082
*     RNVT,                                                        1082
*     RCVT,                                                        1082
*     RNIPM,                                                       1082
*     RWRK1) UNRESTRICTED;                                         1082
*   END NIPSCHED;                   /* END OF NIPSCHED ROUTINE       */
@EL00011 DS    0H                                                  1083
@EF00011 DS    0H                                                  1083
@ER00011 BR    @14                                                 1083
*                                                                  1084
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE SWAPS THE TCB FIELDS OF THE MASTER SCHEDULER TCB */
*   /* UNDER WHICH NIP IS RUNNING TO V=V                      STATUS.*/
*   /* A V=V REGION HAS PREVIOUSLY BEEN DEFINED AND THE ADDRESS OF   */
*   /* THE CONTROL BLOCKS SAVED IN THE NVT. IF THE TCB IS ALREADY IN */
*   /* V=V STATE, THEN THE SWAP DOES NOT TAKE PLACE.                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1084
*NIPVIRT:                           /* NIP VIRT ROUTINE (VR TO VV)   */
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             1084
NIPVIRT  DS    0H                                                  1085
*   RESPECIFY                       /* RESTRICT REGISTERS            */
*    (RPARM,                        /* PARAMETER REGISTER            */
*     RNVT,                         /* POINTER TO NVT                */
*     RCVT,                         /* POINTER TO CVT                */
*     RNIPM) RESTRICTED;            /* WORK REGISTER                 */
*   GEN(NIPMENTR VIRTSAV,NIPVIRT);  /* ENTRY PROCESSING              */
*                                                                  1086
         NIPMENTR VIRTSAV,NIPVIRT
*   /*****************************************************************/
*   /*                                                               */
*   /* SET LOCK GOES HERE TO DISABLE PROCESSING                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1087
*   IF NVTMSTCB->TCBRV^='1'B        /* SEE IF ALREADY IN V=V STATE   */
*     THEN                          /* IF SO, RETURN TO CALLER       */
         L     @06,NVTMSTCB                                        1087
         TM    TCBRV(@06),B'10000000'                              1087
         BNO   @RT01087                                            1087
*     GO TO NPMSCHXT;               /* GO TO EXIT                    */
*   RPARM=ADDR(NPLOCKSV);           /* ADDR OF SAVEAREA              */
         LA    RPARM,NPLOCKSV                                      1089
*   GENERATE REFS(PSALITA,FLC);                                    1090
          STM  0,15,0(RPARM)           SAVE THE REGISTERS
NPVIRTGL  SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,                        *
               RELATED=(TCB,IEAVNIPM(NPVIRTFL))   GET DISPATCHER LOCK
          LM   0,15,0(RPARM)      RESTORE REGISTERS
*   RNIPM=NVTMSTCB;                 /* GET POINTER TO TCB            */
         L     RNIPM,NVTMSTCB                                      1091
*   NVTRMSS=RNIPM->TCBMSS;          /* SAVE V=R TCB MSS FIELD        */
         L     @06,TCBMSS(,RNIPM)                                  1092
         ST    @06,NVTRMSS                                         1092
*   NVTRJPQ=RNIPM->TCBJPQ;          /* SAVE V=R TCB JPQ FIELD        */
         L     @06,TCBJPQ(,RNIPM)                                  1093
         ST    @06,NVTRJPQ                                         1093
*   NVTRPQE=RNIPM->TCBPQE;          /* SAVE V=R TCB PQE FIELD        */
         L     @06,TCBPQE(,RNIPM)                                  1094
         ST    @06,NVTRPQE                                         1094
*   NVTRLLE=RNIPM->TCBLLS;          /* SAVE V=R TCB LLS FIELD        */
         L     @06,TCBLLS(,RNIPM)                                  1095
         ST    @06,NVTRLLE                                         1095
*   RNIPM->TCBRV='0'B;              /* SET TCB V=V STATUS FLAG       */
         NI    TCBRV(RNIPM),B'01111111'                            1096
*   RNIPM->TCBMSS=NVTVMSS;          /* SET TCB MSS FIELD TO V=V      */
         L     @06,NVTVMSS                                         1097
         ST    @06,TCBMSS(,RNIPM)                                  1097
*   RNIPM->TCBJPQ=NVTVJPQ;          /* SET TCB JPQ FIELD TO V=V      */
         L     @06,NVTVJPQ                                         1098
         ST    @06,TCBJPQ(,RNIPM)                                  1098
*   RNIPM->TCBPQE=NVTVPQE;          /* SET TCB PQE FIELD TO V=V      */
         L     @06,NVTVPQE                                         1099
         ST    @06,TCBPQE(,RNIPM)                                  1099
*   RNIPM->TCBLLS=NVTVLLE;          /* SET TCB LLS FIELD TO V=V      */
         L     @06,NVTVLLE                                         1100
         ST    @06,TCBLLS(,RNIPM)                                  1100
*   RPARM=ADDR(NPLOCKSV);           /* SAVE ADDR OF SAVEAREA         */
         LA    RPARM,NPLOCKSV                                      1101
*   GENERATE REFS(PSALITA,FLC);                                    1102
*                                       /*FREE DISPATCHER LOCK       */
          STM  0,15,0(RPARM)           SAVE REGISTERS
NPVIRTFL  SETLOCK RELEASE,TYPE=DISP,RELATED=(TCB,IEAVNIPM(NPVIRTGL))
          LM   0,15,0(RPARM)      RESTORE REGISTERS
*NPMSCHXT:                          /* EXIT PROCESSING               */
*   GEN(LM RNVT,RPARM,VIRTSAV);     /* RESTORE REGISTERS             */
NPMSCHXT LM RNVT,RPARM,VIRTSAV
*   GEN(BR REXIT);                  /* RETURN TO CALLER              */
         BR REXIT
*VIRTSAV:                           /* SAVE AREA LABEL               */
*   GEN(DS 16F);                    /* SAVE AREA                     */
VIRTSAV  DS 16F
*   RESPECIFY                       /* UNRESTRICT REGISTERS          */
*    (RPARM,                                                       1106
*     RNVT,                                                        1106
*     RCVT,                                                        1106
*     RNIPM) UNRESTRICTED;                                         1106
*   END NIPVIRT;                    /* END NIPVIRT ROUTINE           */
@EL00012 DS    0H                                                  1107
@EF00012 DS    0H                                                  1107
@ER00012 BR    @14                                                 1107
*                                                                  1108
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE SWAPS THE MASTERS TCB FROM V=V STATUS BACK TO THE*/
*   /* NORMAL V=R STATUS THAT NIP NORMALLY RUNS UNDER. IT FIRST      */
*   /* CHECKS TO SEE IF THE TCB IS ALREADY IN V=R STATUS AND IF IT   */
*   /* IS, EXITS WITHOUT SWAPPING.                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1108
*NIPREAL:                           /* NIP REAL (VV TO VR) ROUTINE   */
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             1108
NIPREAL  DS    0H                                                  1109
*   RESPECIFY                       /* RESTRICT REGISTERS            */
*    (RPARM,                        /* PARAMETER REGISTER            */
*     RNVT,                         /* POINTER TO NVT                */
*     RCVT,                         /* POINTER TO CVT                */
*     RNIPM) RESTRICTED;            /* WORK REGISTER                 */
*   GEN(NIPMENTR REALSAV,NIPREAL);  /* ENTRY PROCESSING              */
         NIPMENTR REALSAV,NIPREAL
*   IF NVTMSTCB->TCBRV='1'B         /* SEE IF ALREADY V=R STATUS     */
*     THEN                          /* YES, GO RETURN TO CALLER      */
         L     @06,NVTMSTCB                                        1111
         TM    TCBRV(@06),B'10000000'                              1111
         BO    @RT01111                                            1111
*     GO TO NPMREALX;               /* RETURN TO CALLER              */
*   RPARM=ADDR(NPLOCKSV);           /* SAVE ADDR OF SAVEAREA         */
         LA    RPARM,NPLOCKSV                                      1113
*   GENERATE REFS(PSALITA,FLC);                                    1114
*                                       /* ISSUE SETLOCK INSTRUCTION */
          STM  0,15,0(RPARM)           SAVE REGISTERS
NPREALGL  SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,                        *
               RELATED=(TCB,IEAVNIPM(NPREALFL))
          LM   0,15,0(RPARM)       RESTORE REGISTERS
*   RNIPM=NVTMSTCB;                 /* GET TCB ADDRESS               */
         L     RNIPM,NVTMSTCB                                      1115
*   NVTVMSS=RNIPM->TCBMSS;          /* SAVE V=V TCB MSS FIELD        */
         L     @06,TCBMSS(,RNIPM)                                  1116
         ST    @06,NVTVMSS                                         1116
*   NVTVJPQ=RNIPM->TCBJPQ;          /* SAVE V=V TCB JPQ FIELD        */
         L     @06,TCBJPQ(,RNIPM)                                  1117
         ST    @06,NVTVJPQ                                         1117
*   NVTVPQE=RNIPM->TCBPQE;          /* SAVE V=V TCB PQE FIELD        */
         L     @06,TCBPQE(,RNIPM)                                  1118
         ST    @06,NVTVPQE                                         1118
*   NVTVLLE=RNIPM->TCBLLS;          /* SAVE V=V TCB LLS FIELD        */
         L     @06,TCBLLS(,RNIPM)                                  1119
         ST    @06,NVTVLLE                                         1119
*   RNIPM->TCBRV='1'B;              /* SET TCB STATUS FLAG TO V=R    */
         OI    TCBRV(RNIPM),B'10000000'                            1120
*   RNIPM->TCBMSS=NVTRMSS;          /* RESTORE V=R TCB MSS FIELD     */
         L     @06,NVTRMSS                                         1121
         ST    @06,TCBMSS(,RNIPM)                                  1121
*   RNIPM->TCBJPQ=NVTRJPQ;          /* RESTORE V=R TCB JPQ FIELD     */
         L     @06,NVTRJPQ                                         1122
         ST    @06,TCBJPQ(,RNIPM)                                  1122
*   RNIPM->TCBPQE=NVTRPQE;          /* RESTORE V=R TCB PQE FIELD     */
         L     @06,NVTRPQE                                         1123
         ST    @06,TCBPQE(,RNIPM)                                  1123
*   RNIPM->TCBLLS=NVTRLLE;          /* RESTORE V=R TCB LLS FIELD     */
         L     @06,NVTRLLE                                         1124
         ST    @06,TCBLLS(,RNIPM)                                  1124
*   RPARM=ADDR(NPLOCKSV);           /* SAVE ADDR OF SAVEAREA         */
         LA    RPARM,NPLOCKSV                                      1125
*   GENERATE REFS(PSALITA,FLC);                                    1126
           STM  0,15,0(RPARM)           SAVE REGISTERS
NPREALFL  SETLOCK RELEASE,TYPE=DISP,RELATED=(TCB,IEAVNIPM(NPREALGL))
          LM   0,15,0(RPARM)      RESTORE REGISTERS
*NPMREALX:                          /* EXIT PROCESSING               */
*   GEN( LM RNVT,RPARM,REALSAV);    /* RESTORE REGISTERS             */
NPMREALX  LM RNVT,RPARM,REALSAV
*   GEN( BR   REXIT);               /* RETURN TO CALLER              */
          BR   REXIT
*REALSAV:                           /* SAVE AREA LABEL               */
*   GEN(DS 16F);                    /* SAVE AREA                     */
REALSAV  DS 16F
*   RESPECIFY                       /* UNRESTRICT REGISTERS          */
*    (RPARM,                                                       1130
*     RNVT,                                                        1130
*     RCVT,                                                        1130
*     RPARM) UNRESTRICTED;                                         1130
*   END NIPREAL;                    /* END OF NIP REAL ROUTINE       */
@EL00013 DS    0H                                                  1131
@EF00013 DS    0H                                                  1131
@ER00013 BR    @14                                                 1131
*                                                                  1132
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE SETS THE LOW VIRTUAL ADDRESS FIELD IN THE NVT    */
*   /* WITH THE BOTTOM OF THE INITIAL SQA THAT IEAVNIP0 SETS UP. IT  */
*   /* ALSO ESTABLISHES THE LOW WATER MARK FOR ALLOCATING COMMON     */
*   /* VIRTUAL STORAGE. THESE VALUES ARE USED FOR ALLOCATING SQA, THE*/
*   /* LPA'S AND THE CSA AREA.                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1132
*NPMPREP8:                          /* START OF NPMPREP8             */
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             1132
NPMPREP8 DS    0H                                                  1133
*   RESPECIFY                       /* RESTRICT REGISTERS            */
*    (RPARM,                        /* PARAMETER REGISTER            */
*     RNVT,                         /* POINTER TO NVT                */
*     RCVT,                         /* POINTER TO CVT                */
*     RNIPM) RESTRICTED;            /* WORK REGISTER                 */
*   GEN(NIPMENTR PREP8SAV,NPMPREP8);/* ENTRY PROCESSING              */
*                                                                  1134
         NIPMENTR PREP8SAV,NPMPREP8
*   /*****************************************************************/
*   /*                                                               */
*   /* SET LOW VIRTUAL ADDRESS TO 16 MEGS MINUS THE NUMBER OF SQA    */
*   /* SEGMENTS ALLOCATED BY IEAVNIP0. THEN SET THE LOW WATER MARK   */
*   /* FOR ALLOCATING COMMON VIRTUAL MEMORY.                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1135
*   NVTLVIRT=16777216-(NVTNVSQA*65536);                            1135
         LH    @06,NVTNVSQA                                        1135
         SLA   @06,16                                              1135
         LCR   @06,@06                                             1135
         AL    @06,@CF04964                                        1135
         ST    @06,NVTLVIRT                                        1135
*   NPMVVPG1=NVTVVPG1;              /* SAVE NVTVVPG1 FIELD           */
*                                                                  1136
         L     @06,NVTVVPG1                                        1136
         ST    @06,NPMVVPG1                                        1136
*   /*****************************************************************/
*   /*                                                               */
*   /* USE THE TOP OF M.S. LSQA FOR LOW WATER MARK FOR BUILDING THE  */
*   /* UPPER COMMON AREA (SQA, LPA CSA, ETC.)                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1137
*   NVTVVPG1=NVTLSQAS;              /* SET IT TO HIGH LSQA @         */
*                                                                  1137
         L     @06,NVTLSQAS                                        1137
         ST    @06,NVTVVPG1                                        1137
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE SYSEVENT 22 TO PASS RSM CONSTANTS TO THE SYSTEM RESOURSE*/
*   /* MANAGER. THIS SYSEVENT IS ISSUED IN THIS ROUTINE INSTEAD OF   */
*   /* THE NPMPFTBL ROUTINE WHERE THEY ARE DETERMINED, BECAUSE THE   */
*   /* SRM RIM IEAVNP10 HAD NOT BEEN EXECUTED AT THAT TIME.          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1138
*   NAVFRMCT=CVTPVTP->PVTAFCOK;     /* GET AVAILABLE FRAME CNT     1138
*                                                             YM05617*/
         L     @06,CVTPTR                                          1138
         L     @06,CVTPVTP(,@06)                                   1138
         LH    @06,PVTAFCOK(,@06)                                  1138
         STH   @06,NAVFRMCT                                        1138
*   RPARM=NSYSEV22;                 /* PUT VALUES IN REGISTER        */
         L     RPARM,NSYSEV22                                      1139
*   GEN REFS(CVTOPTE,CVT)           /* ISSUE SYSEVENT 22             */
*       ( SYSEVENT RSMCNSTS,ENTRY=BRANCH);                         1140
*                                                                  1140
          SYSEVENT RSMCNSTS,ENTRY=BRANCH
*   /*****************************************************************/
*   /*                                                               */
*   /* EXIT FROM THIS ROUTINE.                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1141
*   GEN(LM RNVT,RPARM,PREP8SAV);    /* RESTORE REGISTERS             */
         LM RNVT,RPARM,PREP8SAV
*   GEN(BR REXIT);                  /* RETURN TO CALLER              */
         BR REXIT
*PREP8SAV:                          /* SAVEAREA LABEL                */
*   GEN(DS 16F);                    /* SAVEAREA FOR REGISTERS        */
PREP8SAV DS 16F
*   RESPECIFY                       /* UNRESTRICT REGISTERS          */
*    (RPARM,                                                       1144
*     RNVT,                                                        1144
*     RCVT,                                                        1144
*     RNIPM) UNRESTRICTED;                                         1144
*   END NPMPREP8;                   /* END OF NPMPREP8 ROUTINE       */
@EL00014 DS    0H                                                  1145
@EF00014 DS    0H                                                  1145
@ER00014 BR    @14                                                 1145
*                                                                  1146
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE SET UP VALUES FOR VRREGN PROCESSING. IT ROUNDS UP*/
*   /* THE TOP NUCLEUS ADDRESS TO A SEGMENT BOUNDARY AND SAVES IT IN */
*   /* THE CVT AND NVT. IT THEN DETERMINES THE NUMBER OF PAGES       */
*   /* AVAILABLE FOR V=R ALLOCATION AND SAVES THE VALUE IN THE NVT.  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1146
*NPMVRREG:                          /* ENTER NPMVRREG ROUTINE        */
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             1146
NPMVRREG DS    0H                                                  1147
*   RESPECIFY                       /* RESTRICT REGISTERS            */
*    (RPARM,                        /* PARAMETER REGISTER            */
*     RNVT,                         /* POINTER TO THE NVT            */
*     RCVT,                         /* POINTER TO THE CVT            */
*     PFTEPTR,                      /* POINTER FOR PFTE BASE         */
*     RNIPM) RESTRICTED;            /* WORK REGISTER                 */
*   GEN(NIPMENTR VRREGSAV,NPMVRREG);/* ENTRY PROCESSING              */
*                                                                  1148
         NIPMENTR VRREGSAV,NPMVRREG
*   /*****************************************************************/
*   /*                                                               */
*   /* ROUND NUCLEUS END ADDRESS UP TO A SEGMENT BOUNDARY            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1149
*   RNIPM=((NVTNUCND+65535)×65535)&&65535;                         1149
         L     @06,@CF04971                                        1149
         L     @15,NVTNUCND                                        1149
         LR    RNIPM,@15                                           1149
         ALR   RNIPM,@06                                           1149
         OR    RNIPM,@06                                           1149
         XR    RNIPM,@06                                           1149
*   CVTNUCB=RNIPM;                  /* PLACE RESULT IN CVT           */
         L     @06,CVTPTR                                          1150
         ST    RNIPM,CVTNUCB(,@06)                                 1150
*   NVTVRREG=RNIPM;                 /* AND IN THE NVT.               */
*                                                                  1151
         ST    RNIPM,NVTVRREG                                      1151
*   /*****************************************************************/
*   /*                                                               */
*   /* SET PVTFPFN TO RBN OF FIRST PAGE ABOVE THE USED PORTION OF THE*/
*   /* NUCLEUS BUFFER. THIS VALUE WILL REFLECT THE ACTUAL END OF THE */
*   /* NUCLEUS IN REAL MEMORY.                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1152
*   RNIPM=(((NVTNUCND+4095)×4095)&&4095)/256;                      1152
         LA    @14,4095                                            1152
         LR    @08,@15                                             1152
         ALR   @08,@14                                             1152
         OR    @08,@14                                             1152
         XR    @08,@14                                             1152
         SRL   @08,8                                               1152
         LR    RNIPM,@08                                           1152
*   CVTPVTP->PVTFPFN=RNIPM;         /* SET PVTFPFN FIELD TO RBN      */
         L     @06,CVTPVTP(,@06)                                   1153
         STH   RNIPM,PVTFPFN(,@06)                                 1153
*   PVTPOOL=PVTPOOL-((RNIPM/16)-PFNSAVE);/* UPDATE DYNAMIC PAGE COUNT
*                                      TO REFLECT SHIFT OF NUCLEUS 1154
*                                      END IN REAL MEMORY (IF ANY) 1154
*                                      SINCE NPMPFTBL ROUTINE YM06075*/
*                                                                  1154
         L     @06,PVTPTR                                          1154
         LR    @00,RNIPM                                           1154
         SRL   @00,4                                               1154
         SL    @00,PFNSAVE                                         1154
         LCR   @00,@00                                             1154
         AH    @00,PVTPOOL(,@06)                                   1154
         STH   @00,PVTPOOL(,@06)                                   1154
*   /*****************************************************************/
*   /*                                                               */
*   /* REPLACE ANY PAGE FRAMES RESERVED BY NIPM TO BE USED IN THE    */
*   /* LSQA/SQA TRAP ROUTINE, NPMSQBCK, BACK ON THE RSM PFTE         */
*   /* AVAILABLE QUEUE, AND UPDATE COUNTS ACCORDINGLY. THEN DETERMINE*/
*   /* THE POTENTIAL V=R AREA TO BE USED BY IEAVNPC8 IN PROCESSING   */
*   /* THE REAL SYSTEM PARAMETER.                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1155
*   RPARM=ADDR(NPLOCKSV);           /* SET SAVE AREA FOR SETLOCK     */
         LA    RPARM,NPLOCKSV                                      1155
*   GENERATE REFS(PSALITA,FLC);                                    1156
            STM 0,15,0(RPARM)          SAVE REGISTERS ACCROSS SETLOCK
NPMVRRGL    SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,                    *
               RELATED=(RSM,IEAVNIPM(NPMVRRFL))
            LM 0,15,0(RPARM)              RESTORE REGISTERS
*   IF NPMAFQF^=0                   /* ANY NIPM FRAMES TO RETURN     */
*     THEN                          /* IF SO, GIVE THEM TO RSM.      */
         ICM   @06,3,NPMAFQF                                       1157
         BZ    @RF01157                                            1157
*     DO;                                                          1158
*       IF PVTAFQF=0                /* IS RSM QUEUE EMPTY            */
*         THEN                      /* IF SO , MAKES IT EASY         */
         L     @06,PVTPTR                                          1159
         LH    @00,PVTAFQF(,@06)                                   1159
         N     @00,@CF05060                                        1159
         LTR   @00,@00                                             1159
         BNZ   @RF01159                                            1159
*         DO;                                                      1160
*           PVTAFQF=NPMAFQF;        /* FIRST PFTE INDEX              */
         MVC   PVTAFQF(2,@06),NPMAFQF                              1161
*           PVTAFQL=NPMAFQL;        /* LAST PFTE INDEX               */
         MVC   PVTAFQL(2,@06),NPMAFQL                              1162
*         END;                                                     1163
*       ELSE                                                       1164
*         DO;                       /* ADD TO FRONT OF RSM QUEUE     */
         B     @RC01159                                            1164
@RF01159 DS    0H                                                  1165
*           PFTEPTR=PVTPFTP+PVTAFQF;/* ADDR OF RSM 1ST PFTE          */
         L     @06,PVTPTR                                          1165
         L     @08,PVTPFTP(,@06)                                   1165
         LH    PFTEPTR,PVTAFQF(,@06)                               1165
         N     PFTEPTR,@CF05060                                    1165
         ALR   PFTEPTR,@08                                         1165
*           PFTBQPTR=NPMAFQL;       /* BACK CHAIN TO LAST NIPM PFTE  */
         MVC   PFTBQPTR(2,PFTEPTR),NPMAFQL                         1166
*           PFTEPTR=PVTPFTP+NPMAFQL;/* ADDR OF LAST PFTE             */
         SLR   PFTEPTR,PFTEPTR                                     1167
         ICM   PFTEPTR,3,NPMAFQL                                   1167
         ALR   @08,PFTEPTR                                         1167
         LR    PFTEPTR,@08                                         1167
*           PFTFQPTR=PVTAFQF;       /* FORWARD CHAIN TO RSM FIRST    */
         MVC   PFTFQPTR(2,PFTEPTR),PVTAFQF(@06)                    1168
*           PVTAFQF=NPMAFQF;        /* FIRST PFTE INDEX              */
         MVC   PVTAFQF(2,@06),NPMAFQF                              1169
*         END;                                                     1170
*     END;                                                         1171
*   ELSE                                                           1172
*     ;                                                            1172
@RF01157 DS    0H                                                  1173
*   PVTAFC=PVTAFC+NPMAFC;           /* UPDATE RSM FRAME COUNT        */
@RC01157 L     @06,PVTPTR                                          1173
         LH    @00,PVTAFC(,@06)                                    1173
         AH    @00,NPMAFC                                          1173
         STH   @00,PVTAFC(,@06)                                    1173
*   PVTPSQA=NVTPQSAV;               /* RESET TRAP TO RSM ADDRESS     */
         L     @00,NVTPQSAV                                        1174
         ST    @00,PVTPSQA(,@06)                                   1174
*   IF NPMAFQF=0                    /* NONE ON NIPM QUEUE            */
*     THEN                          /* USE LAST ONE THAT WAS RESERVED
*                                      AS TOP OF V=R ELECT           */
         ICM   @06,3,NPMAFQF                                       1175
         BNZ   @RF01175                                            1175
*     NVTVRLNG=(NPMAFQL-(NVTVRREG/256))/LENGTH(PFTE);/* GIVES NO. OF
*                                      4K PAGES IN THAT AREA         */
         L     @06,NVTVRREG                                        1176
         SRL   @06,8                                               1176
         LR    @14,@06                                             1176
         LCR   @14,@14                                             1176
         SLR   @06,@06                                             1176
         ICM   @06,3,NPMAFQL                                       1176
         ALR   @14,@06                                             1176
         SRDA  @14,32                                              1176
         D     @14,@CF00081                                        1176
         ST    @15,NVTVRLNG                                        1176
*   ELSE                            /* OTHERWISE, USE THE LAST ONE 1177
*                                      ASSIGNED.                     */
*     NVTVRLNG=(NPMAFQF-(NVTVRREG/256))/LENGTH(PFTE);/*      @ZA10750*/
         B     @RC01175                                            1177
@RF01175 L     @06,NVTVRREG                                        1177
         SRL   @06,8                                               1177
         LR    @14,@06                                             1177
         LCR   @14,@14                                             1177
         SLR   @06,@06                                             1177
         ICM   @06,3,NPMAFQF                                       1177
         ALR   @14,@06                                             1177
         SRDA  @14,32                                              1177
         D     @14,@CF00081                                        1177
         ST    @15,NVTVRLNG                                        1177
*   RPARM=ADDR(NPLOCKSV);           /* SETUP SAVEAREA FOR SETLOCK    */
@RC01175 LA    RPARM,NPLOCKSV                                      1178
*   GENERATE REFS(PSALITA,FLC);                                    1179
            STM 0,15,0(RPARM)          SAVE REGISTERS DURING SETLOCK
NPMVRRFL SETLOCK RELEASE,TYPE=SALLOC,RELATED=(RSM,IEAVNIPM(NPMVRRGL))
            LM 0,15,0(RPARM)           RESTORE REGISTERS
*   NVTVVPG1=NPMVVPG1;              /* RESTORE VVPG1 TO ORIGINAL - 1180
*                                      NOW POINTING TO TOP OF NIP  1180
*                                      TRANSIENT AREA                */
         L     @06,NPMVVPG1                                        1180
         ST    @06,NVTVVPG1                                        1180
*   GEN(LM RNVT,RPARM,VRREGSAV);    /* RESTORE REGISTERS             */
         LM RNVT,RPARM,VRREGSAV
*   GEN(BR REXIT);                  /* RETURN TO CALLER              */
         BR REXIT
*VRREGSAV:                          /* SAVE AREA LABEL               */
*   GEN(DS 16F);                    /* SAVE AREA FOR REGISTERS       */
VRREGSAV DS 16F
*   RESPECIFY                       /* UNRESTRICT REGISTERS          */
*    (RPARM,                                                       1184
*     RNVT,                                                        1184
*     RCVT,                                                        1184
*     PFTEPTR,                                                     1184
*     RNIPM) UNRESTRICTED;                                         1184
*   END NPMVRREG;                   /* END OF NPMVRREG ROUTINE       */
@EL00015 DS    0H                                                  1185
@EF00015 DS    0H                                                  1185
@ER00015 BR    @14                                                 1185
*NPMMCTRP:                                                         1186
*                                                                  1186
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS THE MACHINE CHECK TRAP ROUTINE FOR NIP. UPON  */
*   /* ENTRY TO IEAVNIPM FROM IEAVNIP0, THE MACHINE CHECK NEW PSW IN */
*   /* THE PSA FOR EACH ACTIVE CPU IS POINTED TO A TRAP IN IEAVNIP0  */
*   /* THAT WILL LOAD A WAIT STATE PSW. IEAVNIPM RESETS ALL THESE    */
*   /* PSW'S TO POINT TO THIS TRAP ROUTINE. THE SYSGENED MACHINE     */
*   /* CHECK NEW PSW WAS SAVED BY IEAVNIP0 IN THE NVTMCPSW FIELD OF  */
*   /* THE NVT, AND IS RESTORED BY IEAVNP06. THIS ROUTINE WILL       */
*   /* ATTEMPT TO GET THE NIP LOCK AND THEN TAKE THE CPU LOGICAL     */
*   /* ADDRESS AND A WAIT STATE CODE AND PASS IT TO THE NIPSWAIT     */
*   /* ROUTINE WHICH WILL IN TURN INVOKE THE RMS SYSTEM TERMINATION  */
*   /* ROUTINE. WHEN THE SYSTEM IS PLACED IN A DISABLED WAIT STATE,  */
*   /* THE LOGICAL CPU ADDR AND THE WAIT STATE CODE WILL BE          */
*   /* DISPLAYED.                                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1186
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             1186
NPMMCTRP DS    0H                                                  1187
*   GENERATE;                                                      1187
*                                       /* SETUP ADDRESSABILITY      */
          BALR  15,0
NPMMC     L     RNVT,NPMMCADC-NPMMC(0,15) /* GET NVT ADDRESS         */
          LM    RBASE,RBASE2,NVTNIPM-NVT(RNVT) GET BASE REGISTERS
*   CALL NIPLKCHK;                  /* GO GET THE NIP LOCK-PREVENTS
*                                      RECURSION IF 2 CPUS GET HITS
*                                      ONLY 1 WILL GO TO SYS TERM    */
         BAL   @14,NIPLKCHK                                        1188
*   IF NVTMP='1'B THEN              /* STAP EXECUTABLE?      @ZA10135*/
         TM    NVTMP,B'00100000'                                   1189
         BNO   @RF01189                                            1189
*     STAP(NPMCHCPU);               /* GET PHYS. ADDR OF THE CPU THIS
*                                      CODE IS EXECUTING ON. @ZA10135*/
         STAP  NPMCHCPU                                            1190
*   NPMIDPSW=NPMCHCPU+'40'X;        /* GET LOGICAL CPU ADDR  @ZA10135*/
@RF01189 LA    @06,64                                              1191
         LH    @08,NPMCHCPU                                        1191
         N     @08,@CF05060                                        1191
         ALR   @06,@08                                             1191
         STH   @06,NPMIDPSW                                        1191
*   NPMFLWSC=NVTWCN14;              /* SET WAIT STATE CODE           */
         MVI   NPMFLWSC,X'44'                                      1192
*   GEN( IEAPMNIP TYPE=SWAIT,MOD=NIPM);/* TERMINATE THE IPL          */
          IEAPMNIP TYPE=SWAIT,MOD=NIPM
*NPMMCADC:                                                         1194
*   GEN( DC  A(NVT));               /* ADCON FOR NVT                 */
NPMMCADC  DC  A(NVT)
*   END NPMMCTRP;                   /* END OF ROUTINE                */
@EL00016 DS    0H                                                  1195
@EF00016 DS    0H                                                  1195
@ER00016 BR    @14                                                 1195
*NPMMFA:                                                           1196
*                                                                  1196
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS THE MALFUNCTION ALERT TRAP FOR NIP. IEAVNIP0  */
*   /* SAVES THE ADDRESS TO THE SYSTEM MFA ROUTINE IN THE NVTMFASA   */
*   /* FIELD OF THE NVT AND REPLACES IT WITH A POINTER TO A TRAP     */
*   /* ROUTINE. IEAVNIPM REPLACES THE IEAVNIP0 TRAP ROUTINE POINTER  */
*   /* WITH A POINTER TO THIS ROUTINE. IEAVNIPX WILL REPLACE THE MFA */
*   /* TRAP ADDRESS WITH THE ADDRESS OF THE REAL SYSTEM MFA ROUTINE  */
*   /* BEFORE EXIT TO IEEVIPL AT THE END OF NIP. THIS ROUTINE SAVES  */
*   /* THE CPUAD OF THE FAILING CPU, AND CONVERTS IT TO A LOGICAL CPU*/
*   /* ADDRESS. THE LOGICAL CPU ADDRESS AND THE WAIT STATE CODE FOR  */
*   /* MFA ARE PASSED TO THE NIPSWAIT ROUTINE WHICH WILL TERMINATE   */
*   /* THE SYSTEM. WHEN THE SYSTEM IS PLACED IN A DISABLED WAIT      */
*   /* STATE, THE LOGICAL CPU ADDRESS AND WAIT STATE CODE WILL BE IN */
*   /* THE ADDRESS PORTION OF THE WAIT STATE PSW.                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1196
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             1196
NPMMFA   DS    0H                                                  1197
*   GENERATE;                                                      1197
*                                       /* SETUP ADDRESSABILITY      */
           BALR  15,0
NPMMFA1    L     RNVT,NPMMFADC-NPMMFA1(0,15) /* GET ADDRESS OF NVT   */
           LM    RBASE,RBASE2,NVTNIPM-NVT(RNVT) SETUP BASE REGISTERS
*   CALL NIPLKCHK;                  /* GO GET NIP LOCK               */
         BAL   @14,NIPLKCHK                                        1198
*   NPMIDPSW=PSASPAD+'40'X;         /* GET LOGICAL CPU ADDRESS - MFA
*                                      STORES FAILING CPU @          */
         SLR   @06,@06                                             1199
         LA    @08,64                                              1199
         AH    @08,PSASPAD(,@06)                                   1199
         STH   @08,NPMIDPSW                                        1199
*   NPMFLWSC=NVTF0MFA;              /* SAVE WAIT STATE CODE          */
         MVI   NPMFLWSC,X'47'                                      1200
*   GEN( IEAPMNIP TYPE=SWAIT,MOD=NIPM);/* TERMINATE THE IPL          */
          IEAPMNIP TYPE=SWAIT,MOD=NIPM
*NPMMFADC:                                                         1202
*   GEN( DC A(NVT));                /* ADCON FOR NVT                 */
NPMMFADC  DC A(NVT)
*   END NPMMFA;                     /* END OF ROUTINE                */
@EL00017 DS    0H                                                  1203
@EF00017 DS    0H                                                  1203
@ER00017 BR    @14                                                 1203
@PB00017 DS    0H                                                  1204
*   GEN( DS  0F);                   /* ALLIGN RTM TRAP ON FULLWORD   */
          DS  0F
*NPRTMTAB:                                                         1205
*                                                                  1205
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE CONSISTS OF A TABLE USED TO REPLACE THE RTM1     */
*   /* TABLE POINTED TO BY CVTBTERM, AND CODE TO DIAGNOSE THE ENTRY  */
*   /* TAKEN AND INTERFACE WITH NIPSWAIT TO TERMINATE THE IPL        */
*   /* PROCESS. ALL ENTRIES TO RTM1 ARE TRAPPED TO PREVENT FRR'S FROM*/
*   /* GETTING CONTROL DURING NIP WHEN THE THE SYSTEM IS IN A        */
*   /* VARIABLE STATE OF INITIALIZATION. IF FRR'S WERE ALLOWED TO    */
*   /* EXECUTE AT THIS TIME, RESOURCES REQUIRED BY THEM MIGHT NOT BE */
*   /* AVAILABLE RESULTING IN THE PROPAGATION OF FURTHUR ERRORS.     */
*   /* ALSO, THE RTM IS NOT FULLY INITIALIZED UNTIL MID WAY THROUGH  */
*   /* NIP PROCESSING. IT IS ASSUMED THAT ALL ENTRIES TO THE RTM     */
*   /* INDICATE THAT AN ERROR IN THE SYSTEM SOFTWARE/HARDWARE HAS    */
*   /* OCCURRED. THE POSSIBLE EXCEPTION TO THIS IS TASK TERMINATION  */
*   /* WHICH SHOULD NOT BE ENTERED DURING NIP SINCE NIP AND ASM ARE  */
*   /* THE ONLY FUNCTIONS RUNNING AT THAT TIME. THIS ROUTINE, AFTER  */
*   /* TRAPPING THE ENTRY TO RTM1, GENERATES A CODE INDICATING WHICH */
*   /* ENTRY WAS TAKEN, AND PASSES THE CODE AND A WAIT STATE CODE TO */
*   /* THE NIPSWAIT ROUTINE. WHEN THE SYSTEM IS PLACED IN A WAIT     */
*   /* STATE, THE RIGHT HALF OF THE WAIT STATE PSW WILL CONTAIN THE  */
*   /* RTM TRAP ENTRY CODE AND A WAIT STATE CODE IDENTIFYING THE WAIT*/
*   /* STATE CONDITION.                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1205
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             1205
         B     @PB00018                                            1205
NPRTMTAB DS    0H                                                  1206
*   RESPECIFY                                                      1206
*    (RPARM,                                                       1206
*     RNVT,                                                        1206
*     RENTRY,                                                      1206
*     RCVT) RESTRICTED;                                            1206
*   GENERATE;                                                      1207
         BALR  15,0               COMPATIBLE ABTERM ENTRY
         DC    XL2'0700'          USE UP REST OF FULLWORD
         DC    XL2'47FF'          UNCONDITIONAL BRANCH OP
         DC    AL2((NPRTTRAP-NPRTMTAB)-2) DISPLACEMENT TO ROUTINE
         DC    A(NPRTENT2)         RTM1 ENTRY 2 ADDRESS
         DC    A(NPRTENT3)         RTM1 ENTRY 3 TRAP ADDRESS
         DC    A(NPRTENT4)         RTM1 ENTRY 4 TRAP ADDRESS
         DC    A(NPRTENT5)         RTM1 ENTRY 5 TRAP ADDRESS
         DC    A(NPRTENT6)         RTM1 ENTRY 6 TRAP ADDRESS
         DC    A(NPRTENT7)         RTM1 ENTRY 7 TRAP ADDRESS
         DC    A(NPRTENT8)         RTM1 ENTRY 8 TRAP ADDRESS
         DC    A(NPRTENT9)         RTM1 ENTRY 9 TRAP ADDRESS
         DC    A(NPRTEN10)         RTM1 ENTRY 10 TRAP ADDRESS
         DC    A(NPRTEN11)         RTM1 ENTRY 11 TRAP ADDRESS
         DC    A(NPRTEN12)         RTM1 ENTRY 12 TRAP ADDRESS
         DC    A(NPRTEN13)         RTM1 ENTRY 13 TRAP ADDRESS
         DC    A(NPRTEN14)         RTM1 ENTRY 14 TRAP ADDRESS
         DC    A(NPRTEN15)         RTM1 ENTRY 15 TRAP ADDRESS
NPRTTRAP BALR  15,0                FIRST ENTRY TO RTM ROUTINE
NPRTENT1 STM   0,15,NPRTMSAV-NPRTENT1(RENTRY) SAVE CALLERSREGS @YM08196
         LA    RPARM,1             INDICATE ENTRY 1 CALLED
         L     15,NPRTADCN-NPRTENT1(0,RENTRY) GET ADDR OF NIP RTM
         BR    RENTRY              GO PROCESS ERROR
NPRTENT2 STM   0,15,NPRTMSAV-NPRTENT2(RENTRY) SAVE CALLERSREGS @YM08196
         L     RENTRY,NPRTADCN-NPRTENT2(0,RENTRY) ADDR OF NIP RTM
         LA    RPARM,2             INDICATE ENTRY 2 CALLED
         BR    RENTRY              GO PROCESS ERROR
NPRTENT3 STM   0,15,NPRTMSAV-NPRTENT3(RENTRY) SAVE CALLERSREGS @YM08196
         L     RENTRY,NPRTADCN-NPRTENT3(0,RENTRY) ADDR OF NIP RTM
         LA    RPARM,3             INDICATE ENTRY 3 CALLED
         BR    RENTRY              GO PROCESS ERROR
NPRTENT4 STM   0,15,NPRTMSAV-NPRTENT4(RENTRY) SAVE CALLERSREGS @YM08196
         L     RENTRY,NPRTADCN-NPRTENT4(0,RENTRY) ADDR OF NIP RTM
         LA    RPARM,4             INDICATE ENTRY 4 CALLED
         BR    RENTRY              GO PROCESS ERROR
NPRTENT5 STM   0,15,NPRTMSAV-NPRTENT5(RENTRY) SAVE CALLERSREGS @YM08196
         L     RENTRY,NPRTADCN-NPRTENT5(0,RENTRY) ADDR OF NIP RTM
         LA    RPARM,5             INDICATE ENTRY 5 CALLED
         BR    RENTRY              GO PROCESS ERROR
NPRTENT6 STM   0,15,NPRTMSAV-NPRTENT6(RENTRY) SAVE CALLERSREGS @YM08196
         L     RENTRY,NPRTADCN-NPRTENT6(0,RENTRY) ADDR OF NIP RTM
         LA    RPARM,6             INDICATE ENTRY 6 CALLED
         BR    RENTRY              GO PROCESS ERROR
NPRTENT7 STM   0,15,NPRTMSAV-NPRTENT7(RENTRY) SAVE CALLERSREGS @YM08196
         L     RENTRY,NPRTADCN-NPRTENT7(0,RENTRY) ADDR OF NIP RTM
         LA    RPARM,7             INDICATE ENTRY 7 CALLED
         BR    RENTRY              GO PROCESS ERROR
NPRTENT8 STM   0,15,NPRTMSAV-NPRTENT8(RENTRY) SAVE CALLERSREGS @YM08196
         L     RENTRY,NPRTADCN-NPRTENT8(0,RENTRY) ADDR OF NIP RTM
         LA    RPARM,8             INDICATE ENTRY 8 CALLED
         BR    RENTRY              GO PROCESS ERROR
NPRTENT9 STM   0,15,NPRTMSAV-NPRTENT9(RENTRY) SAVE CALLERSREGS @YM08196
         L     RENTRY,NPRTADCN-NPRTENT9(0,RENTRY) ADDR OF NIP RTM
         LA    RPARM,9             INDICATE ENTRY 9 CALLED
         BR    RENTRY              GO PROCESS ERROR
NPRTEN10 STM   0,15,NPRTMSAV-NPRTEN10(RENTRY) SAVE CALLERSREGS @YM08196
         L     RENTRY,NPRTADCN-NPRTEN10(0,RENTRY) ADDR OF NIP RTM
         LA    RPARM,10            INDICATE ENTRY 10 CALLED
         BR    RENTRY              GO PROCESS ERROR
NPRTEN11 STM   0,15,NPRTMSAV-NPRTEN11(RENTRY) SAVE CALLERSREGS @YM08196
         L     RENTRY,NPRTADCN-NPRTEN11(0,RENTRY) ADDR OF NIP RTM
         LA    RPARM,11            INDICATE ENTRY 11 CALLED
         BR    RENTRY              GO PROCESS ERROR
NPRTEN12 STM   0,15,NPRTMSAV-NPRTEN12(RENTRY) SAVE CALLERSREGS @YM08196
         L     RENTRY,NPRTADCN-NPRTEN12(0,RENTRY) ADDR OF NIP RTM
         LA    RPARM,12            INDICATE ENTRY 12 CALLED
         BR    RENTRY              GO PROCESS ERROR
NPRTEN13 STM   0,15,NPRTMSAV-NPRTEN13(RENTRY) SAVE CALLERSREGS @YM08196
         L     RENTRY,NPRTADCN-NPRTEN13(0,RENTRY) ADDR OF NIP RTM
         LA    RPARM,13            INDICATE ENTRY 13 CALLED
         BR    RENTRY              GO PROCESS ERROR
NPRTEN14 STM   0,15,NPRTMSAV-NPRTEN14(RENTRY) SAVE CALLERSREGS @YM08196
         L     RENTRY,NPRTADCN-NPRTEN14(0,RENTRY) ADDR OF NIP RTM
         LA    RPARM,14            INDICATE ENTRY 14 CALLED
         BR    RENTRY              GO PROCESS ERROR
NPRTEN15 STM   0,15,NPRTMSAV-NPRTEN15(RENTRY) SAVE CALLERSREGS @YM08196
         L     RENTRY,NPRTADCN-NPRTEN15(0,RENTRY) ADDR OF NIP RTM
         LA    RPARM,15            INDICATE ENTRY 15 CALLED
         BR    RENTRY              GO PROCESS ERROR
NPRTADCN DC    A(NIPRTMTR)         ADDRESS OF RTM TRAP ROUTINE
*                                                                  1208
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE GETS CONTROL VIA THE NIP RTM1 TRAP TABLE THAT IS */
*   /* DEFINED ABOVE WHEN THE RTM IS CALLED FROM WITHIN THE SYSTEM.  */
*   /* IT TAKES THE RTM1 ENTRY CODE PLACED IN RPARM BY THE NIP RTM   */
*   /* TRAPS AND PASSES IT ALONG WITH A WAIT STATE CODE TO THE       */
*   /* NIPSWAIT ROUTINE TO TERMINATE THE IPL PROCESS.                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1208
*NIPRTMTR:                                                         1208
*   GENERATE;                                                      1208
NIPRTMTR DS    0H                                                  1208
*                                      /* SETUP ADDRESSABILITY      */
         BALR RENTRY,0
NPMRTM   L    RNVT,NPRTMNVT-NPMRTM(0,RENTRY) GET ADDRESS OF NVT
         LM   RBASE,RBASE2,NVTNIPM-NVT(RNVT) SETUP BASE REGS FOR NIPM
*   CALL NIPLKCHK;                  /* GO GET NIP LOCK               */
         BAL   @14,NIPLKCHK                                        1209
*   NPMIDPSW=RPARM;                 /* SAVE ENTRY IDENTIFIER         */
         STH   RPARM,NPMIDPSW                                      1210
*   NPMFLWSC=NVTWCN11;              /* SET WAIT STATE CODE           */
         MVI   NPMFLWSC,X'64'                                      1211
*   GEN( IEAPMNIP TYPE=SWAIT,MOD=NIPM);/* TERMINATE THE IPL          */
          IEAPMNIP TYPE=SWAIT,MOD=NIPM
*NPRTMNVT:                                                         1213
*   GEN( DC  A(NVT));               /* ADCON FOR NVT                 */
NPRTMNVT  DC  A(NVT)
*NPRTMSAV:                                                         1214
*   GEN( DS  16F);                  /* CALLERS REG SAVE AREA @YM06975*/
NPRTMSAV  DS  16F
*   END NPRTMTAB;                   /* END OF RTM TRAP ROUTINE       */
@EL00018 DS    0H                                                  1215
@EF00018 DS    0H                                                  1215
@ER00018 BR    @14                                                 1215
*   RESPECIFY                                                      1216
*    (RPARM,                                                       1216
*     RNVT,                                                        1216
*     RENTRY,                                                      1216
*     RCVT) UNRESTRICTED;                                          1216
*NIPLKCHK:                                                         1217
*                                                                  1217
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS CALLED BY OTHER NIP ABNORMAL CONDITION        */
*   /* DETECTION ROUTINES TO OBTAIN THE NIP LOCK AND THUS BLOCK      */
*   /* RECURSIVE ENTRIES TO THE NIP TERMINATION PROCESS. THE NIP LOCK*/
*   /* IS OBTAINED ONLY ONCE AND NEVER FREED. IF A RECURSION OCCURS, */
*   /* THE CPU DETECTING THE ERROR IS PLACED IN A DISABLED WAIT      */
*   /* STATE. IF THE LOCK IS OBTAINED, THIS ROUTINE RETURNS TO CALLER*/
*   /* AND WITH THIS CPU DISABLED FOR I/O AND EXTERNAL INTERRUPTS.   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1217
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             1217
NIPLKCHK DS    0H                                                  1218
*   RESPECIFY                       /* RESTRICT REGISTES USED        */
*    (RCS1,                         /* WORK REG                      */
*     RCS3,                         /* WORK REG                      */
*     RNVT) RESTRICTED;             /* ADDR OF NVT                   */
*   GEN REFS(NIPDISAB)( STNSM NIPDISAB,X'FC');/* DISABLE             */
          STNSM NIPDISAB,X'FC'
*   RCS3=PSACPULA;                  /* GET ADDRESS OF THIS CPU       */
         SLR   @06,@06                                             1220
         LH    RCS3,PSACPULA(,@06)                                 1220
*   RCS1=0;                         /* CS ARGUMENT IS 0              */
         SLR   RCS1,RCS1                                           1221
*   GENERATE REFS(NIPLOCK,RCS1,RCS3,REXIT);                        1222
            CS RCS1,RCS3,NIPLOCK        GET THE NIP LOCK
            BCR 8,REXIT                 GOT IT, RETURN TO CALLER
*   IF NPMFLWSC^=0                  /* ERROR TRAP IN PROGESS?        */
*     THEN                          /* IF SO, PICK THAT PSW          */
         CLI   NPMFLWSC,0                                          1223
         BE    @RF01223                                            1223
*     GEN( LPSW NPMWTPSW);          /* PUT SYSTEM IN WAIT STATE      */
*                                                                  1224
          LPSW NPMWTPSW
*   /*****************************************************************/
*   /*                                                               */
*   /* OTHER WISE, A NIP MODULE DETECTED AN ERROR AND IS GOING       */
*   /* THROUGH SYSTEM TERMINATION PROCESS, SO SELECT THE PSW FROM THE*/
*   /* NVT AND STOP THIS CPU.                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1225
*   GEN( LPSW NVTWTPSW);            /* PUT SYSTEM IN WAIT STATE      */
@RF01223 DS    0H                                                  1225
          LPSW NVTWTPSW
*   RESPECIFY                                                      1226
*    (RCS1,                                                        1226
*     RCS3,                                                        1226
*     RNVT) UNRESTRICTED;           /* FREE REGISTERS                */
*   END NIPLKCHK;                   /* END OF NIPLKCHK ROUTINE       */
@EL00019 DS    0H                                                  1227
@EF00019 DS    0H                                                  1227
@ER00019 BR    @14                                                 1227
*NIPSQEND:                          /* GET-SQA TRAP ROUTINE          */
*                                                                  1228
*   /*****************************************************************/
*   /*                                                               */
*   /* THE NIPSQEND SUBROUTINE GAINS CONTROL IF AN ATTEMPT HAS BEEN  */
*   /* MADE TO INVOKE THE PAGING SUPERVISION GET- SQA-PAGE ROUTINE   */
*   /* PRIOR TO COMPLETION OF PAGING SUPERVISOR INITIALIZATION. IT   */
*   /* OBTAINS THE NIP LOCK AND SETS UP A WAIT STATE CODE TO BE      */
*   /* PASSED TO THE NIPSWAIT ROUTINE FOR SYSTEM TERMINATION. THIS   */
*   /* TRAP IS REMOVED AFTER THE PAGE FRAME TABLE HAS BEEN CREATED   */
*   /* AND SQA CAN NOW BE EXPANDED AS NEEDED.                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1228
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);/* PROC STATEMENT              */
*                                                                  1228
NIPSQEND DS    0H                                                  1229
*   /*****************************************************************/
*   /*                                                               */
*   /* RESTRICT RNVT FOR NIPSQEND SUBROUTINE                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1229
*   RESPECIFY                                                      1229
*     RNVT RESTRICTED;                                             1229
*   GENERATE;                                                      1230
*                                      /* GEN ENTRY LINKAGE          */
         BALR  RENTRY,0                   SET TEMP ADDRESSABILITY
NPMSQ    L     RNVT,ADDRNVT-NPMSQ(0,RENTRY)     LOAD NVT ADDRESS
         LM    RBASE,RBASE2,NVTNIPM-NVT(RNVT) RESTORE BASE REGS
*   CALL NIPLKCHK;                  /* GO GET NIP LOCK               */
         BAL   @14,NIPLKCHK                                        1231
*   NPMFLWSC=NVTFLWSQ;              /* SET WAIT STATE CODE IN NVT    */
         MVI   NPMFLWSC,X'36'                                      1232
*   GEN( IEAPMNIP TYPE=SWAIT,MOD=NIPM);/* TERMINATE THE IPL          */
          IEAPMNIP TYPE=SWAIT,MOD=NIPM
*   GENERATE;                                                      1234
*                                      /* GENERATE NVT ADDRESS       */
ADDRNVT  DC    A(NVT)                     NVT ADDRESS
*   RESPECIFY                                                      1235
*     RNVT UNRESTRICTED;                                           1235
*   END NIPSQEND;                   /* END - NIPSQEND PROCEDURE      */
@EL00020 DS    0H                                                  1236
@EF00020 DS    0H                                                  1236
@ER00020 BR    @14                                                 1236
*NPMSQBCK:                          /* SQA/LSQA PAGE BACKING TRAP    */
*                                                                  1237
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS BRANCH ENTERED BY VSM VIA THE PVTPSQA FIELD OF*/
*   /* THE PVT, WHEN A GETMAIN REQUEST HAS BEEN MADE FOR LSQA/SQA    */
*   /* STORAGE. SQA/LSQA STORAGE IS LONG TERM FIXED STORAGE THAT IS  */
*   /* BACKED UP IMMEDIATELY UPON REQUEST BY VSM BY ENTERING RSM     */
*   /* THROUGH THE PVTPSQA FIELD OF THE PVT. IEAVNIPM TRAPS THESE    */
*   /* REQUESTS AND CONTROLS THE ASSIGNMENT OF REAL PAGE FRAMES TO   */
*   /* BACK LSQA/SQA BY PLACING A PFTE REPRESENTING PAGE FRAMES      */
*   /* PREVIOUSLY RESERVED FOR THIS PURPOSE, ON THE FRONT OF THE     */
*   /* AVAILABLE QUEUE (PVTAFQF). RSM IS GIVEN CONTROL AT THE END OF */
*   /* THIS ROUTINES PROCESSING, AS IF CONTROL HAD COME DIRECTLY FROM*/
*   /* VSM. RSM SELECTS THE FIRST PAGE FRAME IT FINDS, SEARCHING THE */
*   /* AVAILABLE QUEUE, THAT IS WITHIN THE PREFERRED AREA (ABOVE THE */
*   /* PVTLRA VALUE). THE FRAME THAT THIS ROUTINE PLACES ON THE      */
*   /* AVAILABLE QUEUE WILL BE SELECTED BY RSM, BECAUSE IT WILL BE   */
*   /* THE FIRST ONE CHECKED, AND WILL MEET ALL THE CRITERIA FOR     */
*   /* SELECTION. THE PURPOSE OF THIS ROUTINE IS TO FORCE LONG FIXED */
*   /* PAGES ASSIGNED DURING NIP TO BE PLACED IN THE UPPER PORTION OF*/
*   /* REAL STORAGE. THIS PREVENTS POLUTION OF THE POTENTIAL V=R AREA*/
*   /* DURING NIP PROCESS- ING. SUBROUTINE NPMPFTBL RESERVES PAGES TO*/
*   /* BE USED BY THIS ROUTINE FOR SQA/LSQA ASSIGNMENT. THE NPMVRREG */
*   /* ROUTINE OF NIP WILL RESET THE TRAP AND UPDATE THE RSM QUEUES  */
*   /* AND COUNTS.                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1237
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             1237
NPMSQBCK DS    0H                                                  1238
*   GENERATE;                                                      1238
*                                                                  1238
            STM 0,15,NPMSQSAV-NPMSQBCK(15)  SAVE REGISTERS
            L   RNVT,NPMSQADC-NPMSQBCK(15)  GET NVT ADDRESS
            LM  RBASE,RBASE2,NVTNIPM-NVT(RNVT) GET BASE REGISTERS
*   /*****************************************************************/
*   /*                                                               */
*   /* PVTPTR ALREADY POINTS TO THE PVT, SETUP BY NPMPFTBL.          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1239
*   RESPECIFY                       /* RESTRICT REGISTERS USED       */
*    (RNVT,                         /* ADDR OF NVT                   */
*     PFTEPTR) RESTRICTED;          /* WORK REG FOR PFTE ADDR.       */
*   IF PVTAFQF=0                    /* IF NO PFTES ON AVAILABLE      */
*     THEN                          /* QUEUE,                        */
         L     @06,PVTPTR                                          1240
         LH    @04,PVTAFQF(,@06)                                   1240
         N     @04,@CF05060                                        1240
         LTR   @04,@04                                             1240
         BZ    @RT01240                                            1240
*     GO TO NPMSQ01;                /* SKIP QUEUE SEARCH.            */
*   PFTEPTR=PVTAFQF+PVTPFTP;        /* ADDRESS OF FIRST AV. PFTE     */
         AL    @04,PVTPFTP(,@06)                                   1242
         LR    PFTEPTR,@04                                         1242
*   IF PFTPREF='1'B                 /* SEE IF FIRST PFTE ON THE    1243
*                                                            @YD03005*/
*     THEN                          /* AVAILABLE QUEUE IS OK.        */
         TM    PFTPREF(PFTEPTR),B'00000100'                        1243
         BO    @RT01243                                            1243
*     GO TO NPMSQXIT;               /* IF SO, WE ARE ALL DONE.       */
*                                                                  1244
*   /*****************************************************************/
*   /*                                                               */
*   /* FIRST, SEARCH AVAILABLE QUEUE FOR PFTE'S REPRESENTING PAGE    */
*   /* FRAMES THAT ARE IN THE PREFERRED AREA. IF ONE IS FOUND, THIS  */
*   /* MEANS SOME SQA MUST HAVE BEEN RELEASED FREEING UP A PAGE FRAME*/
*   /* THAT IS HIGHER IN STORAGE THAN THE ONES RESERVED FOR THIS     */
*   /* ROUTINE. IF ONE IS FOUND, THEN THIS ROUTINE EXITS TO RSM TO   */
*   /* ALLOW THE PAGE TO BE SELECTED.                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1245
*   DO WHILE PFTFQPTR^=0;           /* SEARCH FOR FRAME              */
         B     @DE01245                                            1245
@DL01245 DS    0H                                                  1246
*     IF PFTPREF='1'B               /* IS FRAME IN PREFERRED AREA  1246
*                                                            @YD03005*/
*       THEN                                                       1246
         TM    PFTPREF(PFTEPTR),B'00000100'                        1246
         BO    @RT01246                                            1246
*       GO TO NPMSQXIT;             /* IF SO, EXIT TO RSM            */
*     ELSE                          /* OTHERWISE, CHECK NEXT FRAME   */
*       PFTEPTR=PFTFQPTR+PVTPFTP;   /* CALCULATE NEW ADDR            */
         LH    @06,PFTFQPTR(,PFTEPTR)                              1248
         N     @06,@CF05060                                        1248
         L     @04,PVTPTR                                          1248
         AL    @06,PVTPFTP(,@04)                                   1248
         LR    PFTEPTR,@06                                         1248
*   END;                            /* GO TRY AGAIN.                 */
*                                                                  1249
@DE01245 LH    @06,PFTFQPTR(,PFTEPTR)                              1249
         N     @06,@CF05060                                        1249
         LTR   @06,@06                                             1249
         BNZ   @DL01245                                            1249
*   /*****************************************************************/
*   /*                                                               */
*   /* NONE AVAILABLE ON RSM QUEUES, SO SELECT A FRAME FROM THE NIPM */
*   /* QUEUES. FIRST, SEE IF THE NIPM FRAMES ARE ALL USED UP. IF SO, */
*   /* RESET TRAP TO NORMAL RSM ADDRESS AND EXIT.                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1250
*NPMSQ01:                                                          1250
*   IF NPMAFQF=0                    /* ANY PAGE FRAMES LEFT          */
*     THEN                          /* IF NOT, RSM IS ON ITS OWN AND
*                                      POLLUTION COULD OCCUR.        */
NPMSQ01  ICM   @06,3,NPMAFQF                                       1250
         BNZ   @RF01250                                            1250
*     DO;                                                          1251
*       PVTPSQA=NVTPQSAV;           /* RESET TRAP TO NORMAL RSM @    */
         L     @06,NVTPQSAV                                        1252
         L     @04,PVTPTR                                          1252
         ST    @06,PVTPSQA(,@04)                                   1252
*       GO TO NPMSQXIT;             /* GO EXIT THIS ROUTINE          */
         B     NPMSQXIT                                            1253
*     END;                                                         1254
*   ELSE                                                           1255
*     ;                                                            1255
@RF01250 DS    0H                                                  1256
*   IF PVTAFQF=0                    /* SEE IF NONE ON RSM QUEUE      */
*     THEN                          /* IF SO, MAKES IT EASY          */
         L     @06,PVTPTR                                          1256
         LH    @04,PVTAFQF(,@06)                                   1256
         N     @04,@CF05060                                        1256
         LTR   @04,@04                                             1256
         BNZ   @RF01256                                            1256
*     DO;                                                          1257
*       PVTAFQF=NPMAFQF;            /* PUT FIRST ONE ON RSM QUEUE    */
         MVC   PVTAFQF(2,@06),NPMAFQF                              1258
*       PVTAFQL=NPMAFQF;            /* SAME ONE IS LAST ON RSM Q     */
         MVC   PVTAFQL(2,@06),NPMAFQF                              1259
*       PFTEPTR=PVTPFTP+NPMAFQF;    /* GET ADDR OF PFTE              */
         SLR   PFTEPTR,PFTEPTR                                     1260
         ICM   PFTEPTR,3,NPMAFQF                                   1260
         AL    PFTEPTR,PVTPFTP(,@06)                               1260
*       NPMAFQF=PFTFQPTR;           /* UPDATE NIPM TO NEXT PFTE      */
         MVC   NPMAFQF(2),PFTFQPTR(PFTEPTR)                        1261
*       PFTFQPTR=0;                 /* TAKE PFTE OFF NIPM QUEUE      */
         SLR   @06,@06                                             1262
         STH   @06,PFTFQPTR(,PFTEPTR)                              1262
*     END;                                                         1263
*   ELSE                            /* NORMAL CASE LOGIC FOLLOWS     */
*     DO;                           /* BOTH QUEUES CONTAIN PFTE'S    */
         B     @RC01256                                            1264
@RF01256 DS    0H                                                  1265
*       PFTEPTR=PVTPFTP+PVTAFQF;    /* ADDR OF RSM FIRST PFTE        */
         L     @06,PVTPTR                                          1265
         L     @03,PVTPFTP(,@06)                                   1265
         LH    @08,PVTAFQF(,@06)                                   1265
         N     @08,@CF05060                                        1265
         ALR   @08,@03                                             1265
         LR    PFTEPTR,@08                                         1265
*       PFTBQPTR=NPMAFQF;           /* BACK CHAIN TO NIPM PFTE       */
         MVC   PFTBQPTR(2,PFTEPTR),NPMAFQF                         1266
*       PFTEPTR=NPMAFQF+PVTPFTP;    /* ADDR OF NIPM PFTE             */
         SLR   PFTEPTR,PFTEPTR                                     1267
         ICM   PFTEPTR,3,NPMAFQF                                   1267
         ALR   @03,PFTEPTR                                         1267
         LR    PFTEPTR,@03                                         1267
*       NPMAFQF=PFTFQPTR;           /* NIPM UPDATED TO NEXT PFTE     */
         MVC   NPMAFQF(2),PFTFQPTR(PFTEPTR)                        1268
*       PFTFQPTR=PVTAFQF;           /* NIPM PFTE CHAINED TO RSM Q    */
         MVC   PFTFQPTR(2,PFTEPTR),PVTAFQF(@06)                    1269
*       PFTEPTR=PVTPFTP+PVTAFQF;    /* ADDR OF RSM PFTE              */
         LR    PFTEPTR,@08                                         1270
*       PVTAFQF=PFTBQPTR;           /* RSM Q NOW INCLUDES NEW PFTE   */
         MVC   PVTAFQF(2,@06),PFTBQPTR(PFTEPTR)                    1271
*     END;                                                         1272
*                                                                  1272
*   /*****************************************************************/
*   /*                                                               */
*   /* A PFTE HAS NOW BEEN TRANSFERRED FROM NIPM QUEUES TO RSM       */
*   /* AVAILABLE QUEUE. CLEAN UP NIPM QUEUE, DO ACCOUNTING, AND EXIT */
*   /* TO RSM.                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1273
*   PFTEPTR=PVTPFTP+NPMAFQF;        /* ADDR OF NEW NIPM FIRST        */
@RC01256 SLR   @06,@06                                             1273
         ICM   @06,3,NPMAFQF                                       1273
         L     @03,PVTPTR                                          1273
         L     PFTEPTR,PVTPFTP(,@03)                               1273
         ALR   PFTEPTR,@06                                         1273
*   IF NPMAFQF^=0                   /* SEE IF QUEUE IS EMPTY         */
*     THEN                          /* IF NOT, ZERO BACK CHAIN       */
         LTR   @06,@06                                             1274
         BZ    @RF01274                                            1274
*     PFTBQPTR=0;                   /* IN NEW FIRST PFTE             */
         SLR   @06,@06                                             1275
         STH   @06,PFTBQPTR(,PFTEPTR)                              1275
*   ELSE                                                           1276
*     ;                                                            1276
@RF01274 DS    0H                                                  1277
*   PVTAFC=PVTAFC+1;                /* UP RSM FRAME COUNT            */
         L     @06,PVTPTR                                          1277
         LA    @04,1                                               1277
         AH    @04,PVTAFC(,@06)                                    1277
         STH   @04,PVTAFC(,@06)                                    1277
*   NPMAFC=NPMAFC-1;                /* DECREMENT NIPM FRAME CNT      */
         LH    @06,NPMAFC                                          1278
         BCTR  @06,0                                               1278
         STH   @06,NPMAFC                                          1278
*NPMSQXIT:                          /* EXIT FROM THIS ROUTINE        */
*   RENTRY=NVTPQSAV;                /* GET SAVED ADDR OF RSM         */
NPMSQXIT L     RENTRY,NVTPQSAV                                     1279
*   GEN(LM 0,14,NPMSQSAV);          /* RESTORE REGISTERS             */
         LM 0,14,NPMSQSAV
*   GEN( BR RENTRY);                /* GO TO RSM                     */
          BR RENTRY
*NPMSQSAV:                                                         1282
*   GEN(DS 16F);                    /* SAVE AREA FOR NPMSQBCK        */
NPMSQSAV DS 16F
*NPMSQADC:                                                         1283
*   GEN(DC A(NVT));                 /* NVT ADDRESS CONSTANT          */
NPMSQADC DC A(NVT)
*   RESPECIFY                       /* UNRESTRICT REGISTERS          */
*    (RNVT,                                                        1284
*     PFTEPTR) UNRESTRICTED;                                       1284
*   END NPMSQBCK;                   /* END OF NPMSQBCK PROC          */
@EL00021 DS    0H                                                  1285
@EF00021 DS    0H                                                  1285
@ER00021 BR    @14                                                 1285
*NIPSWAIT:                          /* LOAD DISABLED WAIT ROUTINE    */
*                                                                  1286
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS ENTERED FROM OTHER IEAVNIPM ROUTINES AND NIP  */
*   /* PROCESSOR MODULES TO PLACE THE SYSTEM IN A DISABLED WAIT      */
*   /* STATE. THE NIP WAIT STATE PSW IN THE NVT MUST BE INITIALIZED  */
*   /* WITH APPLICABLE VARIABLES (MODULE ID, ABEND CODE OR SYSTEM    */
*   /* FAILURE ID, AND/OR WAIT STATE CODE) PRIOR TO ENTRY TO         */
*   /* NIPSWAIT.                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1286
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);/* PROC STATEMENT              */
NIPSWAIT DS    0H                                                  1287
*   DCL                                                            1287
*     WAITLVL2 CHAR(64) GENERATED;  /* NIPSWAIT SAVEAREA 2           */
*                                                                  1287
*   /*****************************************************************/
*   /*                                                               */
*   /* RESTRICT REGISTERS FOR NIPSWAIT SUBROUTINE                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1288
*   RESPECIFY                                                      1288
*    (RPARM,                        /* PARM INTERFACE REGISTER       */
*     RNVT,                         /* NVT BASE REGISTER             */
*     RCVT) RESTRICTED;             /* CVT BASE REGISTER             */
*   GEN(NIPMENTR WAITLVL2,NIPSWAIT);/* GEN ENTRY LINKAGE             */
         NIPMENTR WAITLVL2,NIPSWAIT
*   IF NIPLOCK1^=PSACPULA           /* IF NIP LOCK NOT HELD, THEN    */
*     THEN                          /* THIS IS AN EXTERNAL CALL      */
         SLR   @06,@06                                             1290
         CLC   NIPLOCK1(2),PSACPULA(@06)                           1290
         BE    @RF01290                                            1290
*     CALL NIPLKCHK;                /* RIM REQUEST, GO GET LOCK      */
*                                                                  1291
         BAL   @14,NIPLKCHK                                        1291
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE WAIT STATE CODE TO HEX-TO-EBCDIC CONVERT AREA            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1292
*   IF NPSWAITM=0                   /* SEE IF MESSAGE WAS PASSED     */
*     THEN                          /* IF NOT, CREATE MESSAGE        */
@RF01290 L     @06,NPSWAITM                                        1292
         LTR   @06,@06                                             1292
         BNZ   @RF01292                                            1292
*     DO;                                                          1293
*       IF NPMFLWSC=0               /* ERROR TRAP TAKEN?             */
*         THEN                      /* IF NOT, USE NVT INFO.         */
         CLI   NPMFLWSC,0                                          1294
         BNE   @RF01294                                            1294
*         NPMPSW2=NVTWPSW2;         /* COPY PSW TO NIPSWAIT AREA     */
         L     @06,NVTWPSW2                                        1295
         ST    @06,NPMPSW2                                         1295
*       CONVERT=NPMWPSW2;           /* CONVERT PSW ID PORTION        */
@RF01294 MVI   CONVERT+4,C' '                                      1296
         MVC   CONVERT+5(15),CONVERT+4                             1296
         MVC   CONVERT(4),NPMWPSW2                                 1296
*       DIGITS=LENGTH(CODE304W);    /* SET CONVERT LENGTH            */
         MVC   DIGITS(4),@CF00125                                  1297
*       RPARM=ADDR(DIGITS);         /* SET RPARM TO LENGTH ADDR      */
         LA    RPARM,DIGITS                                        1298
*       CALL NIPXCDIC;              /* CALL CONVERT TO EBCDIC RTN    */
         L     @15,@CA04764                                        1299
         BALR  @14,@15                                             1299
*       CODE304W=CONVERT(1:LENGTH(CODE304W));/* PUT IN MSG           */
         MVC   CODE304W(8),CONVERT                                 1300
*       NPSWAITM=ADDR(IEA304W);     /* LOAD MSG HEADER ADDRESS       */
         LA    @06,IEA304W                                         1301
         ST    @06,NPSWAITM                                        1301
*     END;                                                         1302
*   ELSE                                                           1303
*     ;                                                            1303
@RF01292 DS    0H                                                  1304
*   NVTNBFND->LRBTWSC=NPMPSW2;      /* MOVE PSW WAIT CODE TO LRB     */
         L     @06,NVTNBFND                                        1304
         L     @00,NPMPSW2                                         1304
         ST    @00,LRBTWSC(,@06)                                   1304
*   NPMSTLRB=NVTNBFND;              /* ADDR OF LRB IN PARAM LIST     */
         ST    @06,NPMSTLRB                                        1305
*   NPMSTADD=CVTRMS->RVTPTERM;      /* PUT ADDR OF SYS TER IN PSW    */
         L     @06,CVTPTR                                          1306
         L     @06,CVTRMS(,@06)                                    1306
         L     @06,RVTPTERM(,@06)                                  1306
         ST    @06,NPMSTADD                                        1306
*   RPARM=ADDR(NPMSTLST);           /* GET ADDRESS OF PARM LIST      */
         LA    RPARM,NPMSTLST                                      1307
*   GEN(LPSW  NPMSTPSW);            /* GO TO SYS TERM ROUTINE        */
         LPSW  NPMSTPSW
*   GENERATE;                                                      1309
*                                                                  1309
*                                      /* GEN NIPSWAIT SAVEAREAS     */
WAITLVL2 DS    16F                        NIPSWAIT SAVEAREA2
*   /*****************************************************************/
*   /*                                                               */
*   /* RELEASE REGISTERS USED IN NIPSWAIT SUBROUTINE                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1310
*   RESPECIFY                                                      1310
*    (RPARM,                        /* PARM INTERFACE REGISTER       */
*     RNVT,                         /* NVT BASE REGISTER             */
*     RCVT) UNRESTRICTED;           /* CVT BASE REGISTER             */
*   END NIPSWAIT;                   /* END - NIPSWAIT PROCEDURE      */
@EL00022 DS    0H                                                  1311
@EF00022 DS    0H                                                  1311
@ER00022 BR    @14                                                 1311
*NIPUCBFN:                          /* UCB FIND SUBROUTINE           */
*                                                                  1312
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS ENTERED FROM NIP PROCESSORS TO FIND A UCB     */
*   /* RELATED TO A SPECIFIC DEVICE. THE CALLER OF NIPUCBFN SUPPLIES,*/
*   /* AS INPUT, EITHER THE EBCDIC UNIT NAME OR THE HEXADECIMAL UNIT */
*   /* ADDRESS (CUA) IN REGISTER RPARM.                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1312
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);/* PROC STATEMENT              */
*                                                                  1312
NIPUCBFN DS    0H                                                  1313
*   /*****************************************************************/
*   /*                                                               */
*   /* RESTRICT REGISTERS FOR UCB FIND SUBROUTINE                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1313
*   RESPECIFY                                                      1313
*    (RPARM,                        /* PARM INTERFACE REGISTER       */
*     RCVT) RESTRICTED;             /* CVT BASE REGISTER             */
*   GEN(NIPMENTR UCBFNSAV,NIPUCBFN);/* GEN ENTRY LINKAGE             */
         NIPMENTR UCBFNSAV,NIPUCBFN
*   GEN(LA  RSAVE,NIOSSAV);         /* SETUP SAVE AREA               */
*                                                                  1315
         LA  RSAVE,NIOSSAV
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS IF STATEMENT DETERMINES WHETHER THE PARAMETER PASSED IS  */
*   /* AN EBCDIC UNIT NAME OR A HEXADECIMAL ADDR                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1316
*   IF RPRM1>=0                     /* PARM REGISTER POSITIVE ?      */
*     THEN                          /* IF SO, HEX UNIT ADDRESS       */
         LTR   RPRM1,RPRM1                                         1316
         BNM   @RT01316                                            1316
*     GO TO NIPMLOOK;               /* GO TO LOOKUP ALGORITHM        */
*                                                                  1317
*   /*****************************************************************/
*   /*                                                               */
*   /* CONVERT EBCDIC UNIT ADDRESS TO HEXADECIMAL                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1318
*   CALL NIPEBCDX;                                                 1318
         L     @15,@CA04765                                        1318
         BALR  @14,@15                                             1318
*   GEN(SRL  RPARM,8);              /* RIGHT ADJUST IN REGISTER 1    */
         SRL  RPARM,8
*   GEN REFS(CVTILK1,CVTILK2,CVTIXAVL,IOCOM,IOCOMEX,CVTMAP,IOX,IOCUCBBM
*       ,                           /*                        YM02128*/
*       IOXHICH,                    /*                        YM06032*/
*       UCBOB,UCBCHAN,UCBFL5,UCBLCI,CVTILCH,LCH,LCHTCH);           1320
*NIPMLOOK:                                                         1321
*   GENERATE;                                                      1321
NIPMLOOK DS    0H                                                  1321
*                                      /* GEN LINKAGE FOR LOOKUP     */
         IOSGEN  UCBLOOK,UCB=(7),REG=(1)
         LTR   REG15,REG15                TEST RETURN CODE
         BZ    NPMHVUCB                   0 RETURN CODE, HAVE A UCB
         SR    7,7                        INDICATE NO UCB
NPMHVUCB LR    RPARM,7                    LOAD RESULT IN RPARM
*   GEN(LM  RNVT,RZERO,UCBFNSAV);   /* RESTORE REGISTERS             */
         LM  RNVT,RZERO,UCBFNSAV
*   GEN(BR REXIT);                  /* RETURN TO CALLER              */
         BR REXIT
*NIOSSAV:                                                          1324
*   GEN(DS   16F);                  /* IOS SAVE AREA                 */
NIOSSAV  DS   16F
*UCBFNSAV:                                                         1325
*   GEN(DS    16F);                 /* NIPUCBFN SAVEAREA             */
*                                                                  1325
UCBFNSAV DS    16F
*   /*****************************************************************/
*   /*                                                               */
*   /* RELEASE REGISTERS RESTRICTED FOR NIPUCBFN ROUTINE             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1326
*   RESPECIFY                                                      1326
*    (RPARM,                        /* PARM INTERFACE REGISTER       */
*     RCVT) UNRESTRICTED;           /* CVT BASE REGISTER             */
*   END NIPUCBFN;                   /* END - NIPUCBFN PROCEDURE      */
@EL00023 DS    0H                                                  1327
@EF00023 DS    0H                                                  1327
@ER00023 BR    @14                                                 1327
*NIPTIME:                           /* TIMING SERVICE ROUTINE        */
*                                                                  1328
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS ENTERED TO PROVIDE EITHER THE TIME IN DECIMAL */
*   /* AS INDICATED BY THE TIME OF DAY CLOCK OR TO PROVIDE A FULLWORD*/
*   /* BINARY VALUE WHICH IS BASED ON THE TOD CLOCK AND WHICH        */
*   /* REFLECTS THE NUMBER OF 100THS OF SECONDS ELAPSED SINCE        */
*   /* IEAVNIPM WAS FIRST ENTERED FOR THE CURRENT IPL PROCESS. THE   */
*   /* MEASURE OF TIME REQUESTED IS DETERMINED BY THE CODE IN THE    */
*   /* PARAMETER REGISTER, RPARM (ZERO FOR DECIMAL REQUESTS AND FOUR */
*   /* FOR BINARY REQUESTS).                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1328
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);/* PROC STATEMENT              */
*                                                                  1328
NIPTIME  DS    0H                                                  1329
*   /*****************************************************************/
*   /*                                                               */
*   /* RESTRICT REGISTERS USED IN NIPTIME ROUTINE                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1329
*   RESPECIFY                                                      1329
*    (RPARM,                        /* PARM INTERFACE REGISTER       */
*     RNIPM,                        /* NIPM WORK REGISTER            */
*     RNVT,                         /* NVT BASE REGISTER             */
*     RCVT,                         /* CVT BASE REGISTER             */
*     REVEN,                        /* EVEN OF EVEN-ODD PAIR         */
*     RODD) RESTRICTED;             /* ODD OF EVEN-ODD PAIR          */
*   GEN(NIPMENTR TIMESAV,NIPTIME);  /* GEN ENTRY LINKAGE             */
*                                                                  1330
         NIPMENTR TIMESAV,NIPTIME
*   /*****************************************************************/
*   /*                                                               */
*   /* TEST IF TOD CLOCK INOPERATIVE FLAG IS ON. IF SO, THIS IS ENTRY*/
*   /* FROM NIPWTO WHILE WRITING CLOCK INOPERATIVE MESSAGE. KEEP A   */
*   /* 'PSEUDOCLOCK' RUNNING SO THAT WTO WOULD EVENTUALLY TIME OUT.  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1331
*NIPTODCK:                                                         1331
*   IF NVTFLNCK='1'B                /* TOD CLOCK INOPERATIVE ?       */
*     THEN                          /* IF SO -                       */
NIPTODCK TM    NVTFLNCK,B'00000100'                                1331
         BNO   @RF01331                                            1331
*     DO;                           /* TEST TYPE OF REQUEST          */
*                                                                  1332
*       /*************************************************************/
*       /*                                                           */
*       /* TEST FOR BINARY REQUEST. IF SO, INCREMENT 'CLOCK'         */
*       /* (WORKTIME) FOR EACH 10000TH ENTRY.                        */
*       /*                                                           */
*       /*************************************************************/
*                                                                  1333
*       IF RPARM=4                  /* BINARY REQUEST ?              */
*         THEN                      /* IF SO -                       */
         C     RPARM,@CF00109                                      1333
         BNE   @RF01333                                            1333
*         DO;                       /* INCREMENT 'PSEUDOCLOCK'       */
*           WORKTIME=WORKTIME+1;    /* ADD 1 TO SUM                  */
         LA    @06,1                                               1335
         AL    @06,WORKTIME                                        1335
         ST    @06,WORKTIME                                        1335
*           RPARM=WORKTIME/C10000;  /* MICROS TO 100THS              */
         LR    @00,@06                                             1336
         SRDA  @00,32                                              1336
         D     @00,C10000                                          1336
*           GO TO NIPTRSR;          /* BRANCH TO RESTORE REGS        */
         B     NIPTRSR                                             1337
*         END;                                                     1338
*       RPARM=0;                    /* DEC. REQUEST - ZERO RPARM     */
@RF01333 SLR   RPARM,RPARM                                         1339
*       GO TO NIPTRSR;              /* BRANCH TO RESTORE REGS        */
         B     NIPTRSR                                             1340
*     END;                                                         1341
*                                                                  1341
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL THE NIPSCHED ROUTINE TO GET DISPATCHED ON THE CPU THAT WE*/
*   /* KNOW HAS A GOOD CLOCK.                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1342
*   RNIPM=ADDR(NPMSCHDL);           /* GET ADDRESS OF NIPSCHED     1342
*                                      PARAMETER LIST.               */
@RF01331 LA    RNIPM,NPMSCHDL                                      1342
*   RNIPM->NSCHDPRM=RNVT;           /* PASS ADDRESS OF NVT TO ROUTINE
*                                      TO BE SCHEDULED.              */
         ST    RNVT,NSCHDPRM(,RNIPM)                               1343
*   RNIPM=ADDR(NVTCPUAD);           /* ADDRESS OF CPU ADDRESS        */
*                                                                  1344
         LA    RNIPM,NVTCPUAD                                      1344
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL THE NIPSCHED ROUTINE TO GET TOD CODE DISPATCHED          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1345
*   GEN(IEAPMNIP TYPE=SCHED,PARAM=NPMSCHDL,CPUID=RNIPM,MOD=NIPM);  1345
         IEAPMNIP TYPE=SCHED,PARAM=NPMSCHDL,CPUID=RNIPM,MOD=NIPM
*   GEN(L RPARM,PARMSAV);           /* RESTORE RAPARM TO ORIG. VALUE */
         L RPARM,PARMSAV
*   IF NVTFLNCK='1'B                /* IF CLOCK IS INOPERATIVE       */
*     THEN                          /* PROCESS AS INOPERATIVE        */
         TM    NVTFLNCK,B'00000100'                                1347
         BO    @RT01347                                            1347
*     GO TO NIPTODCK;               /* GO TO EXIT PROCESSING         */
*   GO TO NIPTOP;                   /* GO PROCESS THE TOD            */
         B     NIPTOP                                              1349
*                                                                  1350
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING CODE IS EXECUTED UNDER AN SRB SCHEDULED BY THE  */
*   /* NIPSCHED SERVICE ROUTINE ON A PARTICULAR CPU.                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1350
*NIPTTOD:                                                          1350
*   ENTRY;                                                         1350
NIPTTOD  DS    0H                                                  1351
*   RNVT=RPARM;                     /* RESTORE NVT POINTER WITH    1351
*                                      ADDRESS PASSED IN RPARM.      */
         LR    RNVT,RPARM                                          1351
*   GENERATE;                                                      1352
            USING  NVT,RNVT
            LM  RBASE,RBASE2,NVTNIPM   RESTORE BASE REGISTERS
            DROP   RNVT
            STCK TIME                  STORE CLOCK VALUE
            BC   12,NIPTEND            IF GOOD CLOCK, RETURN
*   NVTFLNCK='1'B;                  /* INDICATE CLOCK INOPERATIVE    */
         OI    NVTFLNCK,B'00000100'                                1353
*NIPTEND:                                                          1354
*   GEN(BR REXIT);                  /* RETURN TO CALLER              */
*                                                                  1354
NIPTEND  BR REXIT
*   /*****************************************************************/
*   /*                                                               */
*   /* IF TOD CLOCK IS OPERATIVE, THIS ROUTINE PROCESSES TIME        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1355
*NIPTOP:                            /* TOD CLOCK OPERATIVE           */
*   IF NVTTOD=0                     /* SEE IF WE ARE IN MAINLINES    */
*     THEN                          /* SEARCH FOR A GOOD CLOCK.      */
NIPTOP   L     @06,NVTTOD                                          1355
         SLR   @05,@05                                             1355
         CR    @06,@05                                             1355
         BE    @RT01355                                            1355
*     GO TO NIPTRSR;                /* YES, RETURN WITHOUT CONVERT 1356
*                                      ING THE TIME.                 */
*                                                                  1356
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR TYPE OF TIME VALUE TO BE RETURNED TO CALLER         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1357
*   IF RPARM=0                      /* DECIMAL TIME REQUEST ?        */
*     THEN                          /* IF SO -                       */
         CR    RPARM,@05                                           1357
         BE    @RT01357                                            1357
*     GO TO NIPTDEC;                /* BRANCH TO DECIMAL TIME RTN    */
*                                                                  1358
*   /*****************************************************************/
*   /*                                                               */
*   /* BINARY ELAPSED TIME ROUTINE SUBTRACT NVT-STORED HIGH ORDER    */
*   /* WORD FROM CURRENT TIME                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1359
*   CONSTANT=CONSTANT-NVTTOD;                                      1359
         LCR   @06,@06                                             1359
         AL    @06,CONSTANT                                        1359
         ST    @06,CONSTANT                                        1359
*   GENERATE;                                                      1360
*                                      /* CONVERT TO 100THS OF SECS  */
          LM    REVEN,RODD,TIME           LOAD REL. TIME INTO REGS
          SRDL  REVEN,12                  SHIFT OUT UNUSED LOW BITS
          D     REVEN,C10000              CONVERT TO 100THS SEC
*   RPARM=RODD;                     /* PUT TIME IN PARM REG          */
         LR    RPARM,RODD                                          1361
*   GO TO NIPTRSR;                  /* BRANCH TO RESTORE REGS        */
         B     NIPTRSR                                             1362
*NIPTDEC:                           /* DECIMAL TIME OF DAY ROUTINE   */
*                                                                  1363
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE CONVERTS BINARY CLOCK TIME INTO HOURS, MINUTES,  */
*   /* SECONDS, 10THS, AND 100THS OF SECONDS IN HEXADECIMAL FORMAT - */
*   /* HHMMSSTH                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1363
*   GENERATE;                                                      1363
*                                                                  1363
NIPTDEC  DS    0H                                                  1363
*                                      /* FIND ELAPSED TIME          */
         LM    REVEN,RODD,TIME    GET CLOCK VALUE
         SRDL  REVEN,12           REMOVE UNUSED BITS
         D     REVEN,C60MIL       DIVIDE BY # OF USECS. IN  1  MIN. TO
*                                   DETERMINE # OF MINS SINCE JAN 1900.
         ST    REVEN,TIME         SAVE REMAINDER (# OF USECS LEFT OVER)
         SR    REVEN,REVEN        CLEAR REG FOR DIVIDE
         D     REVEN,C1440        DIVIDE BY # MINS PER DAY. REMAINDER
*                                   IS # MINS SINCE MIDNIGHT.
         LR    RODD,REVEN         SAVE MINS SINCE MIDNIGHT
         M     REVEN,C60MIL       CONVERT MIN SINCE MIDNIGHT TO USECS.
         AL    RODD,TIME          ADD # USECS INTO NEXT MIN TO LOW
*                                   ORDER WORD OF USECS SINCE MIDNIGHT
         BC    12,NOVRFLOW        CHECK FOR OVERFLOW
         LA    REVEN,1(REVEN)     COMPENSATE FOR OVERFLOW
*   /*****************************************************************/
*   /*                                                               */
*   /* REVEN AND RODD NOW CONTAIN THE NUMBER OF MICRO SECONDS ELAPSED*/
*   /* SINCE MIDNIGHT THE FOLLOWING CODE DERIVES 8 DECIMAL DIGITS (IN*/
*   /* THE FORM HHMMSSTH) FROM THE BINARY TIME OF DAY VALUE. THIS IS */
*   /* DONE BY SUCCESSIVELY DIVIDING THE BINARY TIME BY              */
*   /* 10,10,10,6,10,6,10,AND 6 AND RETAINING THE REMAINDER OF THE   */
*   /* DIVISIONS FOR THE RESULT.                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1364
*   GENERATE;                                                      1364
*                                                                  1364
*                                      /* CONVERT TO 100TH OF SECS   */
NOVRFLOW  D     REVEN,C10000              REDUCE VALUE TO 100THS
          SR    REVEN,REVEN               CLEAR REMAINDER
*   /*****************************************************************/
*   /*                                                               */
*   /* BEGIN SUCCESSIVE DIVISIONS                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1365
*   DIVISOR=10;                     /* DEFINE INITIAL DIVISOR        */
*                                                                  1365
         MVC   DIVISOR(4),@CF04594                                 1365
*   /*****************************************************************/
*   /*                                                               */
*   /* LOOP TO DO THE FIRST THREE DIVSIONS BY 10                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1366
*   DO I=1 TO 3;                    /* DIVIDE BY 10 3 TIMES          */
         LA    @06,1                                               1366
         ST    @06,I                                               1366
@DL01366 DS    0H                                                  1367
*     GEN(D  REVEN,DIVISOR);        /* DIVIDE - GET REMAINDER        */
         D  REVEN,DIVISOR
*     GEN(LR  RZERO,REVEN);         /* MOVE DIGIT TO REGISTER        */
         LR  RZERO,REVEN
*     GEN(SR  REVEN,REVEN);         /* CLEAR REMAINDER               */
         SR  REVEN,REVEN
*     GEN(SRDL  RZERO,4);           /* SHIFT DIGIT INTO PARM REG     */
         SRDL  RZERO,4
*   END;                            /* END OF FIRST LOOP             */
*                                                                  1371
         LA    @06,1                                               1371
         AL    @06,I                                               1371
         ST    @06,I                                               1371
         C     @06,@CF00381                                        1371
         BNH   @DL01366                                            1371
*   /*****************************************************************/
*   /*                                                               */
*   /* SECOND DO LOOP. DIVIDE BY 6,10,6,10,6                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1372
*   DO I=1 TO 5;                    /* DO 5 DIVISIONS                */
*                                                                  1372
         LA    @06,1                                               1372
         ST    @06,I                                               1372
@DL01372 DS    0H                                                  1373
*     /***************************************************************/
*     /*                                                             */
*     /* DIVIDE ALTERNATELY BY 6 AND 10                              */
*     /*                                                             */
*     /***************************************************************/
*                                                                  1373
*     IF DIVISOR=10                 /* WAS LAST DIVISOR 10 ?         */
*       THEN                        /* IF SO -                       */
         CLC   DIVISOR(4),@CF04594                                 1373
         BNE   @RF01373                                            1373
*       DIVISOR=6;                  /* MAKE NEXT ONE 6               */
         MVC   DIVISOR(4),@CF01156                                 1374
*     ELSE                          /* IF NOT, IT WAS 6              */
*       DIVISOR=10;                 /* MAKE NEXT ONE 10              */
         B     @RC01373                                            1375
@RF01373 MVC   DIVISOR(4),@CF04594                                 1375
*     GEN(D  REVEN,DIVISOR);        /* GET DECIMAL REMAINDER         */
@RC01373 DS    0H                                                  1376
         D  REVEN,DIVISOR
*     GEN(LR  RZERO,REVEN);         /* MOVE DIGIT TO REGISTER        */
         LR  RZERO,REVEN
*     GEN(SR  REVEN,REVEN);         /* CLEAR REMAINDER               */
         SR  REVEN,REVEN
*     GEN(SRDL  RZERO,4);           /* SHIFT DIGIT TO PARM REG       */
         SRDL  RZERO,4
*   END;                            /* END OF SECOND DIVIDE LOOP     */
         LA    @06,1                                               1380
         AL    @06,I                                               1380
         ST    @06,I                                               1380
         C     @06,@CF01507                                        1380
         BNH   @DL01372                                            1380
*NIPTRSR:                           /* THIS CODE RESTORES REGISTERS
*                                      AND RETURNS TO CALLER         */
*   GEN(LM  RNVT,RZERO,TIMESAV);    /* RESTORE CALLER'S REGS         */
NIPTRSR  LM  RNVT,RZERO,TIMESAV
*   GEN(BR  REXIT);                 /* RETURN CONTROL TO CALLER      */
         BR  REXIT
*TIMESAV:                                                          1383
*   GEN(DS  15F);                   /* NIPTIME SAVEAREA              */
TIMESAV  DS  15F
*PARMSAV:                                                          1384
*   GEN(DS  F);                     /* RPARM SAVE AREA               */
*                                                                  1384
PARMSAV  DS  F
*   /*****************************************************************/
*   /*                                                               */
*   /* RELEASE REGISTERS USED IN NIPTIME ROUTINE                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1385
*   RESPECIFY                                                      1385
*    (RPARM,                        /* PARM INTERFACE REGISTER       */
*     RNIPM,                        /* NIPM WORK REGISTER            */
*     RNVT,                         /* NVT BASE REGISTER             */
*     RCVT,                         /* CVT BASE REGISTER             */
*     REVEN,                        /* EVEN OF EVEN-ODD PAIR         */
*     RODD) UNRESTRICTED;           /* ODD OF EVEN-ODD PAIR          */
*   END NIPTIME;                    /* END - NIPTIME PROCEDURE       */
@EL00024 DS    0H                                                  1386
@EF00024 DS    0H                                                  1386
@ER00024 BR    @14                                                 1386
*NIPSENSE:                          /* PRINT SENSE INFO ROUTINE      */
*                                                                  1387
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS ENTERED FROM NIP PROCESSOR MODULES TO WRITE AN*/
*   /* INTERPRETIVE I/O ERROR MESSAGE TO THE MASTER CONSOLE. INPUT IS*/
*   /* THE ADDRESS OF AN IOB (WHICH REPRE- SENTS THE FAILING I/O     */
*   /* OPERATION) IN REGISTER RPARM.                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1387
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);/* PROC STATEMENT              */
*                                                                  1387
NIPSENSE DS    0H                                                  1388
*   /*****************************************************************/
*   /*                                                               */
*   /* RESTRICT REGISTERS FOR NIPSENSE SUBROUTINE                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1388
*   RESPECIFY                                                      1388
*    (RPARM,                        /* PARM INTERFACE REGISTER       */
*     RNVT,                         /* NVT BASE REGISTER             */
*     RCVT,                         /* CVT BASE REGISTER             */
*     RUCB,                         /* UCB BASE REGISTER             */
*     RIOB) RESTRICTED;             /* IOB BASE REGISTER             */
*   GEN(NIPMENTR SENSESAV,NIPSENSE);/* GEN ENTRY LINKAGE             */
*                                                                  1389
         NIPMENTR SENSESAV,NIPSENSE
*   /*****************************************************************/
*   /*                                                               */
*   /* LOCATE UCB FOR DEVICE ASSOCIATED WITH I/O FAILURE             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1390
*   RUCB=RPARM->IOBDCBPT->DCBDEBAD->DEBSUCBB;                      1390
         L     @06,IOBDCBPT(,RPARM)                                1390
         L     @06,DCBDEBAD-1(,@06)                                1390
         L     RUCB,DEBSUCBB-1(,@06)                               1390
         LA    RUCB,0(,RUCB)                                       1390
*   ADR306I=UCBNAME;                /* MOVE UNIT NAME TO MESSAGE     */
         MVC   ADR306I(3),UCBNAME(UCBPTR)                          1391
*   RIOB=RPARM;                     /* SET IOB POINTER               */
         LR    RIOB,RPARM                                          1392
*   RPARM=IOBCSWCA-8;               /* LOCATE ADDR OF FAILING CCW    */
*                                                                  1393
         L     RPARM,IOBCSWCA-1(,RIOB)                             1393
         LA    RPARM,0(,RPARM)                                     1393
         SL    RPARM,@CF00125                                      1393
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE CCW COMMAND CODE TO CONVERT TO EBCDIC AREA               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1394
*   CONVERT(1)=RPARM->P;                                           1394
         IC    @06,P(,RPARM)                                       1394
         STC   @06,CONVERT                                         1394
*   DIGITS=LENGTH(CM306I);          /* SET NUMBER OF CHARACTERS      */
         MVC   DIGITS(4),@CF00265                                  1395
*   CALL NIPXCDIC;                  /* CALL CONVERT-TO-EBCDIC RTN    */
         L     @15,@CA04764                                        1396
         BALR  @14,@15                                             1396
*   CM306I=CONVERT(1:LENGTH(CM306I));/* MOVE CODE TO MSG             */
         MVC   CM306I(2),CONVERT                                   1397
*   CONVERT(1:2)=IOBCSWST;          /* MOVE IOB CSW STATUS           */
         MVC   CONVERT(2),IOBCSWST(RIOB)                           1398
*   DIGITS=LENGTH(STA306I);         /* SET NUMBER OF CHARACTERS      */
         MVC   DIGITS(4),@CF00109                                  1399
*   CALL NIPXCDIC;                  /* CALL CONVERT-TO-EBCDIC RTN    */
         L     @15,@CA04764                                        1400
         BALR  @14,@15                                             1400
*   STA306I=CONVERT(1:LENGTH(STA306I));/* MOVE STAT TO MSG           */
*                                                                  1401
         MVC   STA306I(4),CONVERT                                  1401
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR TYPE OF MESSAGE ENDING TO BE USED IF UNIT CHECK, ADD*/
*   /* SENSE DATA TO MESSAGE                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1402
*   IF IOBCSWUC='1'B                /* UNIT CHECK BIT ON ?           */
*     THEN                          /* IF SO -                       */
         TM    IOBCSWUC(RIOB),B'00000010'                          1402
         BNO   @RF01402                                            1402
*     DO;                           /* ISSUE MSG WITH SENSE BYTES    */
*       CONVERT(1)=IOBSENS0;        /* MOVE SENSE BYTE 1 TO AREA     */
         MVC   CONVERT(1),IOBSENS0(RIOB)                           1404
*       CONVERT(2)=IOBSENS1;        /* MOVE SENSE BYTE 2 TO AREA     */
         MVC   CONVERT+1(1),IOBSENS1(RIOB)                         1405
*       DIGITS=LENGTH(SENS306I);    /* SET NO OF CHARACTERS          */
         MVC   DIGITS(4),@CF00109                                  1406
*       CALL NIPXCDIC;              /* CALL CONVERT-TO-EBCDIC RTN    */
*                                                                  1407
         L     @15,@CA04764                                        1407
         BALR  @14,@15                                             1407
*       /*************************************************************/
*       /*                                                           */
*       /* MOVE SENSE BYTES TO ERROR MESSAGE                         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  1408
*       SENS306I=CONVERT(1:LENGTH(SENS306I));                      1408
         MVC   SENS306I(4),CONVERT                                 1408
*       SER306I=UCBVOLI;            /* MOVE VOL SERIAL NUMBER        */
         MVC   SER306I(6),UCBVOLI(UCBPTR)                          1409
*       VRB306I=UCBON;              /* MOVE ENDING TO MESSAGE        */
         MVC   VRB306I(11),UCBON                                   1410
*     END;                                                         1411
*   ELSE                            /* NOT ON UNIT CHECK             */
*     DO;                           /* WRITE NO SENSE BYTES          */
         B     @RC01402                                            1412
@RF01402 DS    0H                                                  1413
*       SRL306I=UCBVOLI;            /* MOVE VOL SERIAL NO. TO END    */
         MVC   SRL306I(6),UCBVOLI(UCBPTR)                          1413
*       VRB306I=UCBOFF;             /* MOVE ENDING TO MESSAGE        */
         MVC   VRB306I(11),UCBOFF                                  1414
*     END;                                                         1415
*   RPARM=ADDR(IEA306I);            /* LOAD MSG HEADER ADDRESS       */
@RC01402 LA    RPARM,IEA306I                                       1416
*   CALL NIPWTO;                    /* CALL NIPWTO ROUTINE           */
         L     @15,@CV00098                                        1417
         BALR  @14,@15                                             1417
*   GEN(LM  RNVT,RPARM,SENSESAV);   /* RESTORE CALLER'S REGS         */
         LM  RNVT,RPARM,SENSESAV
*   GEN(BR  REXIT);                 /* RETURN TO CALLING PROGRAM     */
         BR  REXIT
*SENSESAV:                                                         1420
*   GEN(DS   16F);                  /* NIPSENSE SAVEAREA             */
*                                                                  1420
SENSESAV DS   16F
*   /*****************************************************************/
*   /*                                                               */
*   /* RELEASE REGISTERS USED IN NIPSENSE SUBROUTINE                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1421
*   RESPECIFY                                                      1421
*    (RPARM,                        /* PARM INTERFACE REGISTER       */
*     RNVT,                         /* NVT BASE REGISTER             */
*     RCVT,                         /* CVT BASE REGISTER             */
*     RUCB,                         /* UCB BASE REGISTER             */
*     RIOB) UNRESTRICTED;           /* IOB BASE REGISTER             */
*   END NIPSENSE;                   /* END - NIPSENSE PROCEDURE      */
@EL00025 DS    0H                                                  1422
@EF00025 DS    0H                                                  1422
@ER00025 BR    @14                                                 1422
*   END IEAVNIPM;                   /* END - IEAVNIPM PROCEDURE      */
@EL00001 DS    0H                                                  1423
@EF00001 DS    0H                                                  1423
@ER00001 BR    @14                                                 1423
*/*IEAVNIPM:   CHART (SEQ)                                           */
*/*HEADER                                                          1424
*/*                                                                1424
*/*                                                       PAGE #   1424
*/*                                                                1424
*/*                                                                1424
*/*3.1.1.1.17 DETAILED FLOWCHART - NIP CONTROL/SERVICE ROUTINES    1424
*/*(IEAVNIPM)                                                        */
*/*FOOTING                                                         1424
*/*                                                                1424
*/*                                                                  */
*/* E IEAVNIPM                                                       */
*/* N ENTERED FROM IEAVNIP0                                          */
*/* P MOVE INITIAL NVT FROM IEAVNIP0                                 */
*/* P MOVE SYS1.NUCLEUS DEB EXTENT TO IEAVNIPM                       */
*/* P MOVE SYS1.NUCLEUS APPENDAGE TABLE ADDRESS TO IEAVNIPM          */
*/* P CALCULATE LOGREC RECORD SIZE                                   */
*/* P ALLOCATE SPACE FOR LOGREC RECORD IN TOP OF NUCLEUS BUFFER      */
*/* N MACHINE CHECK TRAPS SET - RESET BY IEAVNP06                    */
*/* P SET COUNTER TO 16                                              */
*/*%CPUCHK: D (YES,,NO,%DECRE) CPU ONLINE                            */
*/* P SET MACHINE CHECK TRAP FOR CPU                                 */
*/*%DECRE: P DECREMENT COUNT BY ONE                                  */
*/* D (YES,,NO,%CPUCHK) COUNTER = 0                                  */
*/* P PUT PTR TO MCH CHK TRAP IN ADDR PORTION OF NEW PSW             */
*/* P PUT MALFUNTION ALERT TRAP ROUTINE ADDR INTO NVT                */
*/* N SET TRAP FOR RTM1 BRANCH ENTRIES                               */
*/* P PUT ADDR OF RTM1 TRAP ROUTINES INTO THE CVT (CVTBTERM)         */
*/* P OPEN MACHINE CHECK ENTRY                                       */
*/* N INITIALIZE XCTL AND TYPE 3 AND 4 SVC TRAPS                     */
*/* P SAVE ADDR OF LOCATE SVC IN NVT                                 */
*/* P SET NIPM LOCATE TRAP                                           */
*/* P SAVE XCTL ENTRY POINT IN NVT                                   */
*/* P SET XCTL ENTRY POINT TO NIPMS NIPSVC ROUTINE                   */
*/* P SET COUNTER TO TOTAL NUMBER OF IBM SVCS                        */
*/*%CHKCNT: D (YES,%ABEND,NO,) COUNTER ZERO                          */
*/* D (YES,,NO,%MINUS1) SVC TYPE 3 OR 4                              */
*/* P POINT SVC TO NIPSVC ROUTINE                                    */
*/*%MINUS1: P DECREMENT COUNT BY ONE                                 */
*/* P (,%CHKCNT) POINT TO NEXT SVC ENTRY (ADD EIGHT TO POINTER)      */
*/*%ABEND: N SET TRAP FOR UNEXPECTED ABEND REQUESTS                  */
*/* P STORE ADDR OF ABEND TRAP IN SVC TABLE                          */
*/* N SET TRAP FOR SVC 60 (ESTAE) ENTRIES                            */
*/* P PUT SVC 60 TRAP ADDR INTO SVC TABLE                            */
*/* P PUT ADDR OF SVC 60 TRAP INTO CVT (CVTSV60)                     */
*/* N SET SQA EXPANSION REQUEST TRAP                                 */
*/* N REQUEST INVALID UNTIL AFTER PAGING SPVR INITIALIZED            */
*/* P SAVE GET-SQA-PAGE ROUTINE ADDR IN NVT (NVTPQSAV)               */
*/* P PUT ADDR OF NIPSQEND TRAP ROUTINE INTO PVT (PVTPSQA)           */
*/* P PUT MASTERS TCB ADDR INTO V=V TCB POINTER (NVTVVTCB)           */
*/* P PUT MASTERS TCB ADDR INTO V=R TCB POINTER (NVTVRTCB)           */
*/* N GET TOD CLOCK VALUE FROM A GOOD CLOCK AND SAVE IN NVT          */
*/* P INITIALIALIZE CPU COUNT TO ZERO                                */
*/* P SAVE CPU ADDR FOR NIPTIME IN NVT (NVTCPUAD)                    */
*/*%TIME: L IEAPMNIP: TYPE = TIME                                    */
*/* D (YES,%CLKINOP,NO,) CLOCK INOPERATIVE FLAG ON                   */
*/* P (,%MOVEFET) PUT GOOD CLOCK VALUE IN NVT (NVTTOD)               */
*/*%CLKINOP: D (YES,,NO,%MOVEFET) MP ENVIRONMENT                     */
*/* D (YES,,NO,%ALLCPU) FIRST CPU CHECKED - CNT = ZERO               */
*/* P SAVE IPLED CPU ADDRESS                                         */
*/*%ALLCPU: D (YES,%MOVEMAP,NO,)  ALL CPUS CHECKED (COUNT = 16)      */
*/* P UPDATE PCCA VECTOR TABLE ENTRY POINTER                         */
*/* D (YES,,NO,%IPLED) CPU OFFLINE                                   */
*/*%PLUS1: P (,%ALLCPU) INCREMENT COUNT BY ONE                       */
*/*%IPLED: D (YES,%PLUS1,NO,) IS THIS IPLED CPU                      */
*/* P PUT CPU ADDR INTO NVT (NVTCPUAD                                */
*/* P INCREASE CPU COUNT BY ONE                                      */
*/* P (,%TIME) TURN CLOCK INOPERATIVE FLAG OFF (NVTFLNCK)            */
*/*%MOVEFET: N MOVE FETCH FROM NIP0 TO GETMAINED STG               1424
*/*FOR USE UNTIL NP05 BUILDS PLPA                                    */
*/* P GETMAIN STORAGE AND MOVE FETCH (IEWFTMIN)                      */
*/* P MOVE APPENDAGES TO NUCLEUS BUFFER                              */
*/* P UPDATE @ OF ADCON TABLE IN FETCH CSECT                         */
*/* P UPDATE NUCLEUS END ADDRESS                                     */
*/* P UPDATE CVT (CVTFETCH) TO POINT TO NEW FETCH                    */
*/* N MOVE STORAGE MAP FROM IEAVNIP0                                 */
*/* L GETMAIN: GET AREA FOR STORAGE MAP TO BE MOVED                  */
*/* P MOVE MAP TO NEW AREA                                           */
*/* P UPDATE POINTER TO MAP (NVTSTMAP)                               */
*/* D (YES,,NO,%SUFFIX) PSA SAVED                                    */
*/* L GETMAIN: GET AREA FOR PSA TO BE MOVED                          */
*/* P MOVE PSA TO NEW AREA                                           */
*/* P UPDATE ADDRESS OF PSA IN NVT (NVTSGPSA)                        */
*/*%SUFFIX: P INITIALIZE SUFFIX LIST INDEX TO ONE                    */
*/*%NXTSFX: P GET RIM SUFFIX FROM SUFFIX LIST (SUFXLIST)             */
*/* P PUT ADDR OF RIM NAME INTO PARAMETER REGISTER ONE               */
*/* S NIPLOAD: FIND - AND - LOAD - RIM ROUTINE                       */
*/* L DELETE: DELETE RIM ON ITS RETURN                               */
*/* N CHECK FOR SPECIAL CONDITIONS TO BE MET FOR RIMS                */
*/* D (YES,,NO,%ADDONE)  PARMAREA CREATED BY IEAVNP03                */
*/* P TURN OFF SPIO SPECIAL FLAG                                     */
*/*%ADDONE: P INCREMENT SUFFIX LIST POINTER BY ONE                   */
*/* D (YES,,NO,%B2) IEAVNPA1 LAST MODULE LOADED                      */
*/* S NIPOPIOC: INITIATE OPERATOR COMMUNICATIONS                     */
*/*%B2: D (YES,,NO,%R03) IEAVNP01 LAST MODULE LOADED                 */
*/* S NPMOPLIB: OPEN SVCLIB AND LOGREC                               */
*/*%R03: D (YES,,N,%R04) IEAVNP03 LAST MODULE LOADED                 */
*/* D (YES,%CVIO,NO,) CLPA SPECIFIED                                 */
*/* P SET QUICKSTART FLAG ON (NVTFLQS)                               */
*/*%CVIO: D (YES,%R04,NO,) CVIO SPECIFIED                            */
*/* P SET WARMSTART FLAG ON (NVTFLWS)                                */
*/*%R04: D (YES,,NO,%A8) IEAVNP10 NEXT MODULE                        */
*/* S NPMPFTBL: BUILD PFTES AND SETUP FOR PAGING                     */
*/*%A8: D (YES,,NO,%R05) NEXT MODULE IEAVNPA8                        */
*/* S NPMPREP8: SET FOR SQA ANALYSIS                                 */
*/*%R05: D (YES,,NO,%RR05) NEXT MODULE IEAVNP05                      */
*/* S NPMPREP5: SET UP FOR QUICKSTART                                */
*/*%RR05: D (YES,,NO,%C8) IEAVNP05 LAST MODULE LOADED                */
*/* S NPMCLNUP: CLEANUP V=V REGION AND FREE QSR                      */
*/*%C8: D (YES,,NO,%XX) NEXT MODULE IEAVNPC8                         */
*/* S NPMVVREG: SETUP V=R VALUES                                     */
*/*%XX: D (YES,,NO,%NXTSFX) NEXT MODULE IEAVNIPX                     */
*/* P PUT ADDR OF IEAVNIPX INTO PARM REG                             */
*/* N CONTROL GOES TO IEAVNIPX AND NIPM IS DELETED                   */
*/* R EXIT TO IEAVNIPX                                               */
*/*NIPSVC: E ENTRY TO TYPE 3 AND 4 SVC TRAP                          */
*/* N TRAP IS REMOVED BY IEAVNP05 WHEN LPA IS BUILT                  */
*/* N LOCATE AND ABEND TRAPS REMOVED BY IEAVNIPX                     */
*/* D (YES,,NO,%NIPLOCK) LOCATE SVC                                  */
*/* P PUT ADDRESS OF IEAVNP12 (LOCATE RIM) INTO PARM REG             */
*/* S NIPLOAD: FIND - AND - LOAD - RIM ROUTINE                       */
*/* L DELETE: DELETE RIM ON ITS RETURN                               */
*/* R RETURN TO CALLER                                               */
*/*%NIPLOCK: S NIPLKCHK: GET NIP LOCK                                */
*/* P PUT SVC CODE INTO PSW                                          */
*/* P SET WAITSTATE CODE X'65' IN PSW (INVALID SVC ISSUED)           */
*/* L IEAPMNIP: TYPE = SWAIT                                         */
*/* R GO INTO DISABLED WAIT                                          */
*/*NIPXCDIC: E ROUTINE TO CONVERT 4 HEX BYTES TO EBCDIC              */
*/* P UNPACK THE HEX CHARACTERS                                      */
*/* N CONVERT ANY UNPACKED DIGITS FA-FF TO C1-C6                     */
*/*%D: D (YES,%RET,NO,) DIGIT COUNT ZERO                             */
*/* D (YES,,NO,%DIGIT) DIGIT GREATER THAN X'C9'                      */
*/* P CONVERT UNPACKED HEX LETTER TO EBCDIC                          */
*/*%DIGIT: P (,%D) DECREMENT DIGIT COUNT AND ADJUST POINTER BY ONE   */
*/*%RET: R RETURN TO CALLER                                          */
*/*NIPEBCDX: E CONVERT 3 EBCDIC BYTES TO HEX ROUTINE                 */
*/* N CONVERT ANY BYTES C1-C6 TO CA-CF                               */
*/*%BYTECNT: D (YES,%PACK,NO,) BYTE COUNT 3                          */
*/* N IF LETTER LESS THAN NUMERIC ASSUME IT IS A - F                 */
*/* D (YES,,NO,%BYTE) BYTE LESS THAN X'F0'                           */
*/* P CONVERT NUMERICAL DIGIT TO HEX VALUE                           */
*/*%BYTE: P (,%BYTECNT) INCREMENT BYTE COUNT AND POINTER BY ONE      */
*/*%PACK: P PACK THE BYTES TO COMPLETE CONVERSION                    */
*/* R RETURN TO CALLER                                               */
*/*NIPLOAD: E FIND AND LOAD NIP PROCESSOR RIMS                       */
*/* P PUT MODULE NAME IN BLDL AREA                                   */
*/* P PUT ADDR OF SYS1.NUCLEUS DCB INTO PARM REG                     */
*/* L BLDL: FIND MODULE IN BLDL LIST                                 */
*/* D (YES,%IOERR,NO,) ENTRY FOUND BY BLDL                           */
*/* P PUT MODULE NAME IN MESSAGE                                     */
*/* P SET NVT WAIT STATE CODE IN PSW (X'32')                         */
*/* S NIPWTO: WRITE IEA301I MSG                                      */
*/*%NPX: D (YES,,NO,%CNVERT) BLDL DIDNT FIND NIPX                    */
*/*%PUTNAME: P PUT NAME SUFFIX OF MODULE INTO PSW                    */
*/* L IEAPMNIP: TYPE = SWAIT                                         */
*/* R GO INTO DISABLED WAIT                                          */
*/*%CNVERT: P PUT SUFFIX OF MODULE INTO PARM REG                     */
*/* S (,%PUTNAME) NIPEBCDX: CONVERT SUFFIX TO HEX                    */
*/*%IOERR: D (YES,,NO,%ATTRIB) I/O ERROR ON BLDL                     */
*/* P PUT MODULE NAME IN MESSAGE                                     */
*/* P SET NVT WAIT STATE CODE IN PSW (X'33')                         */
*/* S (,%NPX) NIPWTO: WRITE IEA300I MSG                              */
*/*%ATTRIB: P SET NVT ATTRIBUTES TO RENT SO THAT SP252 IS USED       */
*/* P PUT ADDR OF SYS1.NUCLEUS DCB INTO PARM REG                     */
*/* L LOAD: LOAD MODULE                                              */
*/* P PUT MODULE ADDR FROM REG 0 INTO PARM REG                       */
*/* R RETURN TO CALLER                                               */
*/*NIPABEND: E ABEND TRAP ROUTINE                                    */
*/* S NIPLKCHK: GET NIP LOCK                                         */
*/* N ABEND CODE IS PASSED TO TRAP ROUTINE IN PARM REG 1             */
*/* P PUT ABEND CODE IN TO PSW                                       */
*/* P SET NVT WAIT STATE CODE IN PSW (X'40')                         */
*/* P PUT ABEND CODE WITH TOP 4 BITS ANDED OUT IN PARM REG           */
*/* P SET CONVERSION LENGTH                                          */
*/* S NIPXCDIC: HEX TO EBCDIC ROUTINE                                */
*/* P MOVE CONVERTED ABEND CODE TO MESSAGE IEA303I                   */
*/* P LOAD MSG HEADER ADDR                                           */
*/* L IEAPMNIP: TYPE = SWAIT                                         */
*/* R GO INTO DISABLED WAIT                                          */
*/*NPMOPLIB: E OPEN SYS1.LOCREC AND SYS1.SVCLIB                      */
*/* P POINT TO OPEN LIST                                             */
*/* P GET ADDR OF SYSRES UCB FROM CVT (CVTSYSAD)                     */
*/* P PUT EBCDIC NAME OF LOGREC INTO OPEN LIST                       */
*/* P GET ADDR OF LOGREC DCB FROM CVT (CVTDCBA)                      */
*/* P PUT ADDR OF LOGREC DCB INTO OPEN LIST                          */
*/* P GET DEB ADDR FROM LOCREC DCB (DCBDEBAD)                        */
*/* N LOGREC AND SVCLIB CANT BE OPENED UNTIL AFTER NP01 CONSOLE INIT */
*/* N CALL NIPOPEN TO CREATE LOGREC DEB                              */
*/* L IEAPMNIP: TYPE = OPEN                                          */
*/* P GET ADDR OF SVCLIB DCB FROM CVT (CVTSVDCB)                     */
*/* P PUT ADDR OF SVCLIB DCB INTO OPEN LIST                          */
*/* P PUT EBCDIC NAME OF SVCLIB INTO OPEN LIST                       */
*/* N CALL NIPOPEN TO CREATE SVCLIB DEB                              */
*/* L IEAPMNIP: TYPE = OPEN                                          */
*/* P GET ADDR OF LINKLIB DCB FROM CVT (CVTLINK)                     */
*/* P PUT ADDR OF LINKLIB DCB INTO OPEN LIST                         */
*/* N NIPOPEN WILL CONSTRUCT ONLY BASIC DEB FOR LINKLIB              */
*/* P SET LINKLIB DSNAME TO ZERO IN OPEN LIST                        */
*/* N CALL NIPOPEN TO CREATE LINKLIB BASIC DEB                       */
*/* L IEAPMNIP: TYPE = OPEN                                          */
*/* P UPDATE END OF NUC BUF TO INDICATE SPACE FOR LINKLIB BASIC DEB  */
*/* P TURN LIBRARY ACTIVE FLAG ON (NVTFLSLB)                         */
*/* R RETURN TO CALLER                                               */
*/*NIPOPIO: E ESTABLISH INIT OPERATOR COMMUNICATIONS                 */
*/* N CALLED BY NP01 AFTER MASTER CONSOLE INITIALIZATION             */
*/* D (YES,,NO,%NWTO) TOD CLOCK INOPERATIVE                          */
*/* N ISSUE MSG IEA302I                                              */
*/* S IEAPMNIP: TYPE = WTO                                           */
*/*  P POINT TO FIRST NIP0 MSG                                       */
*/*%NWTO:  D (YES,,NO,%RELNO) NIP0 MSG                               */
*/* S IEAPMNIP: TYPE = WTO                                           */
*/* P GET NEXT MSG POINTER                                           */
*/* P (,%NWTO)  GET ADDR OF NEXT MSG                                 */
*/*%RELNO: P PUT RELEASE NUMBER (FROM CVTNUMB) INTO MSG IEA101A      */
*/* P PUT LEVEL NUMBER (FROM CVTLEVL) INTO MSG IEA101A               */
*/* N WRITE IEA101A SPECIFY SYSTEM PARAMETERS MSG                    */
*/* S IEAPMNIP: TYPE = WTOR                                          */
*/* R RETURN TO CALLER                                               */
*/*NIPOPIOC: E PROCESS PARAMETER RESPONSE                            */
*/*%OPIOC: P PUT PTR TO MOST RECENT WTOR PARM LIST INTO PARM REG     */
*/* N CALL NIPWTOR2 ROUTINE TO BUFFER REPLY                          */
*/* S IEAPMNIP: TYPE = WTOR2                                         */
*/* P GET PTR TO SPE FROM NVT (NVTSPE)                               */
*/* D (YES,,NO,%GETM) DATA PTR IN NVT = ZERO                         */
*/* P SET REQD 8 BYTES TO NIP SPE QUEUE                              */
*/* P (,%SCAN) POINT TO REPLY ADDRESS                                */
*/*%GETM: L GETMAIN: GET 8 BYTES FOR SPE                             */
*/*%LASTEL: D (YES,,NO,%NEXTSPE) NOT LAST SPE ON CHAIN               */
*/* P (,%LASTEL) SET PTR TO NEXT SPE ON CHAIN                        */
*/*%NEXTSPE: P SET CHAIN PTR TO NEW ELEMENT                          */
*/* P SET PTR TO NEW ELEMENT                                         */
*/* P SET PARM PTR TO OPERATORS REPLY                                */
*/* N CHECK FOR END OF LINE INDICATION                               */
*/*%SCAN: D (YES,%GOBACK,NO,) IS THIS A QUOTE                        */
*/* D (YES,,NO,%UPDAT) BLANK OR COMMA                                */
*/* P UPDATE PARM POINTER BY ONE                                     */
*/* D (YES,,NO,%SCAN) CONT OF PARAMETERS                             */
*/* P PUT PARM LIST ADDR INTO PARM REG                               */
*/* S (,%OPIOC) IEAPMNIP: TYPE = WTOR                                */
*/*%UPDAT: P (,%SCAN) UPDATE PARM POINTER BY ONE                     */
*/*%GOBACK: R RETURN TO CALLER                                       */
*/*NIPPRMPT: E IEAVNP03 LINKAGE                                      */
*/* P SAVE CONTENTS OF PARM REG UPON ENTRY TO ROUTINE                */
*/* P PUT ADDR OF IEAVNP03 PROMPT MODULE INTO PARM REG               */
*/* S NIPLOAD: LOAD IEAVNP03                                         */
*/* P RESTORE CONTENTS OF PARM REG SAVED UPON ENTRY TO ROUTINE       */
*/* S IEAVNP03: NIP PROMPT MODULE                                    */
*/* L DELETE: DELETE PROMPT MODULE                                   */
*/* N CONTROL RETURNED TO CALLER WITH PARM REG SET BY IEAVNP03       */
*/* R RETURN TO CALLER                                               */
*/*NPMPFTBL: E PAGE FRAME TABLE BUILD                                */
*/* P SET PFT PTR TO 1ST 16 BYTE BOUNDARY IN NUCLEUS BUFFER          */
*/* P SUBTRACT PFT PTR FROM CVTEORM (START OF PFT TO STORAGE END)    */
*/* P ROUND NUMBER OF BYTES UP TO A PAGE BOUNDARY                    */
*/* P SUBTRACT SIZE OF PFT FROM PREVIOUS NUMBER                      */
*/* P ROUND UP THAT NUMBER TO A PAGE BOUNDARY                        */
*/* P ADD TRUE SIZE OF PFT TO PFT PTR (1ST 16 BYTE BOUNDARY IN NUC BUF)
*/*                                                                  */
*/* P SAVE PFT BASE POINTER                                          */
*/* D (YES,%PFTSIZE,NO,) ENOUGH SPACE FOR PFT IN NUC BUF             */
*/* N NOT ENOUGH SPACE WRITE MSG IEA340I                             */
*/* L IEAPMNIP: TYPE = WTO                                           */
*/* P SET WAITSTATE CODE X'38' IN PSW (INSUFFICIENT REAL STORAGE)    */
*/* L IEAPMNIP: TYPE = SWAIT                                         */
*/* R GO INTO DISABLED WAIT                                          */
*/*%PFTSIZE: P SUBTRACT PFT PTR FROM END OF NUC BUFFER (NVTNUCND)    */
*/* P ZERO OUT THE PFT AREA ONE BYTE AT A TIME                       */
*/* N BUILD PAGE FRAME TABLE                                         */
*/* L SETLOCK: TYPE = SALLOC (GET SALLOCK LOCK)                      */
*/* P GET PVT BASE POINTER FROM CVT (CVTPVTP)                        */
*/* P SIZE OF PFTES = NO OF SQA AND LSQA PAGES TIMES LENGTH OF PFTE  */
*/* N FIRST SQA PAGE PFTE INDEX IS THE FOLLOWING:                    */
*/* P  LAST PFTE IN PFT INDEX - SIZE OF PFTES + ONE PFTE LENGTH      */
*/* P PUT BEGIN ADDR OF PFTES BUILT BY NIP0 INTO PFTE PTR            */
*/* P ADDR OF END OF NUC BUF IS ADDR FOR 1ST PFTE TO BE MOVED        */
*/* P SHIFT ADDR 12 BITS TO FORM PAGE FRAME NUMBER                   */
*/* P SAVE PAGE FRAME NO. FOR NPMVRREG ROUTINE TO UPDATE PVTPOOL     */
*/* P SHIFT ADDR 4 BITS LEFT TO FORM PFT INDEX                       */
*/* P NEW SQA PFTE PTR = PFTE PTR - ADDR OF 1ST PFTE + 1ST SQA PAGE
*/*PFTE INDEX                                                        */
*/* P OLD SQA PFTE PTR = ORIGIN OF PFT + INDEX OF 1ST SQA PFTE       */
*/* P MOVE SQA PFTES TO NEW PAGE FRAME TABLE IN INCREMENTS OF 256  1424
*/*BYTES                                                             */
*/* P RESET 1ST PFTE RBN IN PVT (PVTFPFN)                            */
*/* P  PFT APPARENT ORIGIN = PFT BEGINNING ADDR  - 1ST PFTE ADDR     */
*/* P SET PREVIOUS AVAILABLE PFTE = ZERO                             */
*/* N FIND PAGE FRAME INDEX OF FIRST V=V PAGE                        */
*/* P GET FIRST V=V PAGE ADDRESS                                     */
*/* P SHIFT ADDR 12 BITS TO FORM PAGE FRAME NUMBER                   */
*/* P SHIFT ADDR 4 BITS LEFT TO FORM PFT INDEX                       */
*/* P ROUND DOWN CVTEORM TO PAGE BOUNDARY                            */
*/* P SHIFT ADDR 12 BITS TO FORM PAGE FRAME NUMBER                   */
*/* P ADD STORAGE MAP ADDR TO CVTEORM TO GET OFFSET INTO STORAGE MAP */
*/* P SHIFT ADDR 4 BITS LEFT TO FORM PFT INDEX                       */
*/* P SET PVT LAST PAGE INDEX (PVTLPFN) = ROUNDED DOWN CVTEORM       */
*/* P PTR TO LAST PFTE = ROUNDED DOWN CVTEORM + PFT APPARENT ORIGIN  */
*/* P SET UP COUNTER FOR SETTING PREFERRED FLAG ON IN PFTE           */
*/*%OFFLIN: D (YES,,NO,%CNTZERO) PAGE OFFLINE                        */
*/* P SET PAGE OFFLINE FLAG ON (PFTOFFLN)                            */
*/* P (,%NEXTPG) SET PFT INDEX AS NOT QUEUED (PFTQNDX)               */
*/*%CNTZERO: D (YES,,NO,%DYNAM) COUNTER GREATER THAN ZERO            */
*/* P DECREMENT COUNTER BY ONE                                       */
*/* P (,%DYNAM) SET PREFERRED FLAG ON (PFTPREF = ON) IN PAGE FRAME 1424
*/*TABLE ENTRY                                                       */
*/*%NEXTPG: P DECREMENT PFTE INDEX BY LENGTH OF PFTE                 */
*/* P DECREMENT PFTE PTR BY LENGTH OF PFTE                           */
*/* P DECREMENT STORAGE MAP POINTER BY ONE                           */
*/* D (YES,%PFTEXT,NO,%OFFLIN) PFTE INDEX LOWER THAN 1ST             */
*/*%DYNAM: P INCREMENT COUNT OF ONLINE FRAMES BY ONE                 */
*/* D (YES,%NEXTPG,NO,) PFTE INITIALIZED                             */
*/* D (YES,%NIPREG,NO,%QUEUE) PAGE INDEX LOWER THAN V=R LINE         */
*/*%NIPREG: N PUT PAGE IN NIP REGION                                 */
*/* P SET VBN (PFTVBN) = PAGE INDEX                                  */
*/* P PUT MS ASID INTO PFT (PFTASID)                                 */
*/* P SET V=R ALLOCATED FLAG ON (PFTVRALC)                           */
*/* P (,%NEXTPG) SET PFT INDEX AS NOT QUEUED (PFTQNDX)               */
*/*%QUEUE: N PLACE PFTE ON AVAILABLE QUEUE                           */
*/* D (YES,,NO,%CHAIN) 1ST PFTE ON AVAIL QUEUE                       */
*/* D (YES,%FRST,NO,) ANY ON SQA RESERVED QUEUE                      */
*/* P SET LAST PAGE ON QUEUE (PVTRSRVL) = PAGE INDEX                 */
*/* P SET FIRST PAGE ON QUEUE (PVTRSRVF) = PAGE INDEX                */
*/* P (,%NEXTPG) PUT QUEUE IDENTIFIER (PFTSRQN) INTO PFTQNDX         */
*/*%FRST: P (,%FLAGON) SET PAGE INDEX AS FIRST ON AVAILABE QUEUE   1424
*/*(PVTAFQF)                                                         */
*/*%CHAIN: P SET PFTE FORWARD CHAIN = PAGE INDEX                     */
*/* P SET BACK CHAIN = PFTE PTR - PAGE FRAME APPARENT ORIGIN         */
*/*%FLAGON: P SET AVAILABLE FLAG ON (PFTONAVQ)                       */
*/* P SET AVAILABLE QUEUE INDEX FLAG ON (PFTQNDX)                    */
*/* P SET CURRENT PFTE PTR = PREVIOUS PFTE PTR                       */
*/* P SET LAST ON QUEUE (PVTAFQL) = CURRENT PAGE INDEX               */
*/* P (,%NEXTPG) INCREMENT AVAILABE COUNT BY ONE (PVTAFC)            */
*/*%PFTEXT: P PUT NUMBER OF ONLINE FRAMES INTO PVT (PVTPOOL)         */
*/* N PVTLQSA AND PVTHQSA SET HIGH SO RSM DOESNT PAGE OUT ANYTHING 1424
*/*HIGHER                                                            */
*/* N THESE VALUES ARE RESET BY IEAVNP05 AFTER THE PLPA IS BUILT     */
*/* P SET LPA LOW ADDR (PVTLQSA) HIGH (X'FFF0')                      */
*/* P SET LPA HIGH ADDR (PVTHQSA) HIGH (X'FFF0')                     */
*/* N SELECT BLOCK OF REAL PAGE FRAMES FOR NIPM RESERVE QUEUE        */
*/* D (YES,,NO,%NOT) HALF OF AVAIL PAGE FRAMES <20                   */
*/* P (,%SETCNT) NUMBER OF PAGE FRAMES SELECTED IS HALF OF THE     1424
*/*AVAILABLE (PVTAFC/2)                                              */
*/*%NOT: P NUMBER OF PAGE FRAMES SELECTED IS 20                      */
*/*%SETCNT: P SAVE COUNT FOR LATER USE                               */
*/* P DECREMENT REAL AVAIL PAGE FRAME COUNT BY NO. PAGES SELECTED    */
*/* P 1ST AVAIL PAGE FRAME PTR = PAGE FRAME APPARENT ORIGIN + FIRST
*/*AVAIL                                                             */
*/*%DONE: D (YES,%SAVEIDX,NO,) RESERVE NUMBER ZERO                   */
*/* P DECREMENT RESERVE NUMBER BY ONE                                */
*/* P (,%DONE) PTR TO NEXT PFTE = PAGE FRAME APPARENT ORIGIN + FORWARD
*/*PTR                                                               */
*/*%SAVEIDX: P SAVE INDEX OF 1ST AVAIL PFTE (PVTAFQF)                */
*/* P PTR TO LAST SELECTED PFTE = PAGE FRAME APP ORIGIN + BACK PTR   */
*/* P SET 1ST AVAIL PFTE (PVTAFQF) = FORWARD POINTER                 */
*/* P SET FORWARD POINTER OF SELECTED PAGE FRAMES TO ZERO            */
*/* P SAVE LAST PFTE INDEX FOR LATER USE                             */
*/* P SET BACK CHAIN TO PFTES SELECTED BY NIPM TO ZERO               */
*/* P PUT ADDR OF LSQA REQUEST INTERCEPT TRAP IN PVT (PVTPSQA)       */
*/* P SET START OF PRIVATE AREA (PVTLPRIV) = TO 1ST V=V PAGE         */
*/* P SET 1ST V=R AREA (PVTFVR) = 1ST PFTE INDEX (PVTFPFN)           */
*/* P SET LAST V=R AREA (PVTLVR) = 1ST V=V PAGE - LENGTH OF PFTE     */
*/* P END OF PRIVATE AREA (PVTLCSA) = PRIVATE AREA START (PVTLPRIV)  */
*/* N RELEASE THE SALLOC LOCK                                        */
*/* L SETLOCK: RELEASE TYPE = SALLOC                                 */
*/* N REMOVE FREE SQA PAGE TRAP - BIT MUST BE TURNED OFF IN GDA      */
*/* P TURN OFF BIT (NIPFOURK) IN GDA (POINTED TO BY CVTGDA)          */
*/* P PUT ADDR OF NIP0 STORAGE MAP INTO PARM REG                     */
*/* L FREEMAIN: FREE STORAGE MAP AREA                                */
*/* R RETURN TO CALLER                                               */
*/*NPMPREP5: E CHECK FOR QUICK START                                 */
*/* D (YES,,NO,%GETLEN) QUICK START (NVTFLQS = ON)                   */
*/* P GET LPA LOW ADDR FROM NVTLPALO AND PUT INTO NVTLVIRT           */
*/*%GETLEN: N GET AREA FOR V=V REGION CONTROL BLOCKS                 */
*/* P AREA SIZE = PQE LENGTH + FBQE LENGTH + EIGHT                   */
*/* L GETMAIN: GET AREA FOR V=V REGION CBS                           */
*/* P SUBTRACT 8 FROM AREA ADDR FOR DPQE                             */
*/* P SAVE DPQE ADDR IN NVT (NVTVPQE)                                */
*/* P ZERO THE DPQE BACK POINTER                                     */
*/* P ADD 16 TO ADDR OF DPQE AND PUT IN DPQE FORWARD CHAIN PTR       */
*/* P SAVE CURRENT PQE PTR THAT IS IN THE LDA                        */
*/* N WILL BE RESTORED LATER IN THE NPMCLNUP ROUTINE                 */
*/* P SET PTR TO V=V PQE PLUS 16 INTO THE LDA                        */
*/* P ADD 16 TO ADDR OF DPQE                                         */
*/* P SET PQE AREA TO ZEROS                                          */
*/* P FBQE FORWARD PTR = DPQE ADDR + 16 + PQE LENGTH                 */
*/* P FBQE BACKWARD PTR = DPQE ADDR + 16 + PQE LENGTH                */
*/* P BACK CHAIN PQE PTR = ADDR OF DPQE                              */
*/* P PUT V=V TCB ADDR (NVTVVTCB) INTO PQE (PQETCB)                  */
*/* P V=V REGION SIZE (PQESIZE) = LPA LOW ADDR - START OF V=V REGION */
*/* P PUT ADDR OF START OF V=V REGION (NVTVVREG) INTO PQE (PQEREGN)  */
*/* P BASE PTR TO FBQE = ADDR OF DPQE + PQE LENGTH                   */
*/* P ZERO FBQE FORWARD CHAIN POINTER                                */
*/* P SET A FORWARD PTR = ADDR OF FBQE - PQE LENGTH                  */
*/* P SET A BACKWARD PTR = ADDR OF FBQE - PQE LENGTH                 */
*/* P V=V REGION SIZE = LPA LOW ADDR - START OF V=V REGION           */
*/* P GET ADDR OF START OF V=V REGION (NVTVVREG)                     */
*/* P SET CURRENT V=V TOP VALUE (NVTLVIRT) IN LDA                    */
*/* N INCREASE PASIZE IN GDA TO INCLUDE V=V AREA FOR BUILDING PLPA   */
*/* N PASIZE MUST INCLUDE AREA FROM PASTRT TO SQA                  1424
*/*BOTTOM                                                            */
*/* P PASIZE = V=V AREA TOP VALUE - START OF PLPA                    */
*/* R RETURN TO CALLER                                               */
*/*NPMCLNUP: E NIPM CLEANUP ROUTINE                                  */
*/* N CONTROL RECEIVED AFTER LPAS ARE BUILT (CSA NOT ALLOCATED YET)  */
*/* N SWAP TO V=V STATUS                                             */
*/* L IEAPMNIP: TYPE = VIRT                                          */
*/* D (YES,,NO,%VBN) PSA SAVED BY NIP0                               */
*/* P ROUND DOWN LOW ADDR OF LPA (NVTLVIRT) TO A PAGE BOUNDARY       */
*/* P COPY PSA TO V=V REGION IN STEPS OF 256 BYTES FOR A FULL PAGE   */
*/* P PUT ADDR OF PSA PAGE (NVTLVIRT) INTO CVT (CVTVPSA)             */
*/*%VBN: P DIVIDE LOW ADDR OF LPA (NVTLVIRT) BY 256 TO GET VBN       */
*/* P PUT VBN INTO PVT (PVTLCSA)                                     */
*/* P SIZE OF AREA TO FREE = LOW ADDR OF LPA - START OF V=V REGION ADDR
*/*                                                                  */
*/* P PUT SIZE INTO INPUT REG FOR FREEMAIN                           */
*/* L FREEMAIN: FREE UPPER COMMON AREA NOT USED                      */
*/* P DIVIDE START OF V=V REGION (NVTVVPG1) BY 256                   */
*/* P PUT THIS VBN INTO PVT (PVTLCSA)                                */
*/* N SWAP BACK TO V=R                                               */
*/* L IEAPMNIP: TYPE = REAL                                          */
*/* L SETLOCK: TYPE = SALLOC (GET SALLOCK LOCK)                      */
*/* N RSM ADJUSTED COUNTS OF WRONG QUEUES - THESE MUST NOW BE      1424
*/*READJUSTED                                                        */
*/* P COMMON QUEUE COUNT = COMMON QUEUE COUNT + LOCAL QUEUE COUNT -
*/*NVTLSQNO                                                          */
*/* P SET LOCAL QUEUE COUNT = NUMBER OF LSQ PAGES (NVTLSQNO)         */
*/* N RELEASE THE SALLOC LOCK                                        */
*/* L SETLOCK: RELEASE TYPE = SALLOC                                 */
*/* D (YES,,NO,%ASSLGN) PSA PAGE SAVED PREVIOUSLY                    */
*/* P PUT ADDR OF PSA AREA TO BE FREED INTO PARM REG                 */
*/* L FREEMAIN: FREE PREVIOUS PSA PAGE                               */
*/* P DIVIDE LOW ADDR OF LPA (NVTLPALO) BY 256 TO GET VBN            */
*/* P PUT VBN INTO PVT (PVTLQSA) AS LOW READ ONLY AREA ADDR          */
*/* P DIVIDE HIGH ADDR OF LPA (NVTLPAND) BY 256 TO GET VBN           */
*/* P PUT VBN INTO PVT (PVTHQSA) AS HIGH READ ONLY AREA ADDR         */
*/* N RESTORE PQE PTR IN MASTERS LDA TO POINT TO PQE IN LDA          */
*/* P PUT SAVED PQE PTR INTO LDA (ASDPQE)                            */
*/* R RETURN TO CALLER                                               */
*/*NIPSCHED: E SCHEDULES AN SRB                                      */
*/* P SAVE CONTENTS OF INPUT PARM REG                                */
*/* P PUT SIZE OF SRB AND SUBPOOL NUMBER INTO REG 0 FOR GETMAIN      */
*/* L GETMAIN: GET AREA FOR SRB                                      */
*/* P ZERO THE SRB AREA                                              */
*/* P PUT 'SRB' IDENTIFIER INTO SRB AREA                             */
*/* P PUT ASCB ADDR (NVTMASCB) INTO SRB (SRBASCB)                    */
*/* P PUT ADDR OF NIPMS SRB ROUTINE (NPSRBENT) INTO SRB (SRBEP)      */
*/* P PUT SYSTEM LEVEL PRIORITY INTO SRB (SRBPRIOR)                  */
*/* P CONVERT CPU ADDR (INPUT) INTO AN AFFINITY MASK                 */
*/* P PUT AFFINITY MASK INTO SRB (SRBCPAFF)                          */
*/* P PASS NIPSCHED SAVE AREA AS A PARAMETER                         */
*/* P SAVE SRB ADDRESS                                               */
*/* P ZERO OUT ECB FIELD                                             */
*/* L SCHEDULE: SCHEDULE THE SRB                                     */
*/* L WAIT: WAIT FOR SRB ROUTINE TO COMPLETE                         */
*/* P GET BACK SRB ADDR AND PUT INTO PARM REG                        */
*/* P GET SUBPOOL ID AND SIZE AND PUT INTO REG 0                     */
*/* L FREEMAIN: FREE THE SRB AREA                                    */
*/* R RETURN TO CALLER                                               */
*/*NPSRBENT: E ENTERED IN SRB MODE                                   */
*/* N GETS CONTROL UNDER SRB THAT WAS SCHEDULED                      */
*/* N PASSES CONTROL TO ROUTINE SPECIFIED BY CALLER                  */
*/* P SAVE ADDR OF SRB EXIT ROUTINE WHICH IS IN EXIT REG             */
*/* P PUT ENTRY TO CALLERS ROUTINE (INPUT) INTO ENTRY REG            */
*/* P PUT PTR TO CALLERS PARAMETER LIST INTO PARM REG                */
*/* S SRB ROUTINE: CALLERS SRB ROUTINE                               */
*/* P PUT BRANCH ENTRY TO POST (CVT0PT01) INTO ENTRY REG             */
*/* L SETLOCK: OBTAIN LOCAL LOCK                                     */
*/* P BRANCH TO POST ECB                                             */
*/* L SETLOCK: RELEASE LOCAL LOCK                                    */
*/* P PUT SAVED ADDR OF SRB EXIT ROUTINE BACK INTO EXIT REG          */
*/* R BRANCH TO SRB EXIT ROUTINE                                     */
*/*NIPVIRT: E SWAP TO V=V STATUS                                     */
*/* D (YES,%VVRET,NO,) ALREADY V=V (TCBRV NOT ON)                    */
*/* N OBTAIN DISPATCHER LOCK                                         */
*/* L SETLOCK: OBTAIN TYPE = DISP                                    */
*/* P GET POINTER TO TCB (NVTMSTCB)                                  */
*/* P SAVE V=R TCB MSS FIELD IN NVT (NVTRMSS)                        */
*/* P SAVE V=R TCB JPQ FIELD IN NVT (NVTRJPQ)                        */
*/* P SAVE V=R TCB PQE FIELD IN NVT (NVTRPQE)                        */
*/* P SAVE V=R TCB LLS FIELD IN NVT (NVTRLLE)                        */
*/* P SET TCB V=R FLAG OFF (TCBRV)                                   */
*/* P SET TCB V=V MSS FIELD FROM NVT (NVTVMSS)                       */
*/* P SET TCB V=V JPQ FIELD FROM NVT (NVTVJPQ)                       */
*/* P SET TCB V=V PQE FIELD FROM NVT (NVTVPQE)                       */
*/* P SET TCB V=V LLS FIELD FROM NVT (NVTVLLE)                       */
*/* N RELEASE DISPATCHER LOCK                                        */
*/* L SETLOCK: RELEASE TYPE=DISP                                     */
*/*%VVRET: R RETURN TO CALLER                                        */
*/*NIPREAL: E SWAP TO V=R STATUS                                     */
*/* D (YES,%VRRET,NO,) ALREADY V=R (TCBRV ON)                        */
*/* N OBTAIN DISPATCHER LOCK                                         */
*/* L SETLOCK: OBTAIN TYPE = DISP                                    */
*/* P GET POINTER TO TCB (NVTMSTCB)                                  */
*/* P SAVE V=V TCB MSS FIELD IN NVT (NVTVMSS)                        */
*/* P SAVE V=V TCB JPQ FIELD IN NVT (NVTVJPQ)                        */
*/* P SAVE V=V TCB PQE FIELD IN NVT (NVTVPQE)                        */
*/* P SAVE V=V TCB LLS FIELD IN NVT (NVTVLLE)                        */
*/* P SET TCB V=R FLAG ON (TCBRV)                                    */
*/* P SET TCB V=R MSS FIELD FROM NVT (NVTRMSS)                       */
*/* P SET TCB V=R JPQ FIELD FROM NVT (NVTRJPQ)                       */
*/* P SET TCB V=R PQE FIELD FROM NVT (NVTRPQE)                       */
*/* P SET TCB V=R LLS FIELD FROM NVT (NVTRLLE)                       */
*/* N RELEASE DISPATCHER LOCK                                        */
*/* L SETLOCK: RELEASE TYPE=DISP                                     */
*/*%VRRET: R RETURN TO CALLER                                        */
*/*NPMPREP8: E SETUP PRIOR TO IEAVNPA8                               */
*/* P SET LOW VIRTUAL ADDR (NVTLVIRT) = 16 MEGS - NO. OF SQA SEQMENTS
*/*SET BY NIP0                                                       */
*/* P SAVE ADDR OF 1ST V=V PAGE (NVTVVPG1)                           */
*/* N HIGH LSQA @ (NVTLSQAS) IS USED TO BUILD UPPER                1424
*/*COMMON AREA (SQA,LPA, CSA)                                        */
*/*%HGHLSQA: P SET ADDR OF 1ST V=V PAGE (NVTVVPG1) = HIGH LSQA ADDR
*/*(NVTLSQAS)                                                        */
*/* N ISSUE SYSEVENT 22 TO PASS RSM CONSTANTS TO SYSTEM RESOURSE MGR */
*/* N THIS SYSEVENT IS ISSUED HERE BECAUSE IEAVNP10 HAS BEEN EXECUTED
*/*                                                                  */
*/* P GET AVAILABLE PAGE FRAME COUNT THRESHOLD (PVTAFCOK)            */
*/* P PUT THRESHOLD AND DYNAMIC PAGE COUNT INTO PARM REG             */
*/* L SYSEVENT: SYSEVENT 22                                          */
*/* R RETURN TO CALLER                                               */
*/*NPMVRREG: E V=R REGION PROCESSING                                 */
*/* P ROUND UP TOP NUCLEUS ADDR (NVTNUCND) TO A SEGMENT BOUNDARY     */
*/* P PLACE THIS VALUE IN THE CVT (CVTNUCB)                          */
*/* P PLACE THIS VALUE IN THE NVT (NVTVRREG)                         */
*/* P ROUND UP NVTNUCND TO PAGE BOUNDARY THEN DIVIDE BY 256 TO     1424
*/*GET RBN                                                           */
*/* N THIS VALUE REFLECTS ACTUAL END OF NUCLEUS IN REAL MEMORY       */
*/* P PUT RBN INTO PVT (PVTFPFN)                                     */
*/* P SUBTRACT SAVED PAGE FRAME NO. FROM CURRENT VALUE (PVTFPFN /16) */
*/* P SUBTRACT THAT VALUE FROM ONLINE FRAME COUNT (UPDATE PVTPOOL)   */
*/* L SETLOCK: TYPE = SALLOC (GET SALLOCK LOCK)                      */
*/* N REPLACE NIPMS RESERVED PAGE FRAMES BACK ON RSM PFTE AVAILABLE
*/*QUEUE                                                             */
*/* D (YES,,NO,%FRAMECT) ANY NIPM FRAMES TO RETURN                   */
*/* D (YES,,NO,%ADDTO) RSM QUEUE EMPTY (PVTAFQF = 0)                 */
*/* P SET NIPMS 1ST FRAME = RSMS 1ST FRAME IN QUEUE (PVTAFQF)        */
*/* P (,%FRAMECT) SET NIPMS LAST FRAME = RSMS LAST FRAME IN QUEUE  1424
*/*(PVTAFQL)                                                         */
*/*%ADDTO: P ADDR OF RSM 1ST PFTE = APPARENT ORIGIN OF PAGE FRAME + 1ST
*/* PFTE INDEX                                                       */
*/* P BACK CHAIN (PFTBQPTR) TO LAST NIPM PFTE                        */
*/* P ADDR OF LAST PFTE + APPARENT ORIGIN OF PAGE FRAME + LAST PFTE
*/*INDEX                                                             */
*/* P FORWARD CHAIN (PFTFQPTR) TO FIRST RSM PFTE                     */
*/* P SET FIRST PFTE INDEX (PVTAFQF) = NIPMS FIRST PFTE INDEX        */
*/*%FRAMECT: P ADD NIPMS FRAME COUNT TO RSMS FRAME COUNT (PVTAFC)    */
*/* P RESET SQA TRAP (PVTPSQA) TO RSM ADDR (NVTPQSAV)                */
*/* N DETERMINE NUMBER OF PAGES AVAILABLE FOR V=R ALLOCATION         */
*/* N DETERMINE LOWEST RBN IN PREFERRED AREA AS FOLLOWS              */
*/* P RBN = HIGHEST RBN + PFTE LENGTH - (RSM LONG FIX AREA SIZE)   1424
*/* /256                                                             */
*/* D (YES,,NO,%ELSE) NO FRAMES ON NIPMS QUEUE                       */
*/* N USE LAST ONE RESERVED AS V=R                                   */
*/* N DETERMINE NOUMBER OF PAGES AVAIL FOR V=R AREA AS FOLLOWS       */
*/* P PAGES = (NIPMS LAST PFTE INDEX (ADDR OF V=R REGION /256))    1424
*/* / PFTE LENGTH                                                    */
*/*%ELSE: N USE THE LAST ONE ASSIGNED                                */
*/* N DETERMINE NOUMBER OF PAGES AVAIL FOR V=R AREA AS FOLLOWS       */
*/* P PAGES = (NIPMS 1ST PFTE INDEX V=R REG ADDR /256)) / PFTE LENGTH
*/*                                                                  */
*/* L SETLOCK: RELEASE TYPE = SALLOC                                 */
*/* P RESTORE ADDR OF 1ST V=V PAGE                                   */
*/* R RETURN TO CALLER                                               */
*/*NPMMCTRP: E MACHINE CHECK TRAP ROUTINE                            */
*/* S NIPLKCHK: GET NIP LOCK                                         */
*/* P GET LOGICAL CPU ADDR FROM PSA (PSACPULA) AND PUT INTO PSW      */
*/* P SET WAIT STATE CODE (X'44') IN PSW (MACHINE CHECK)             */
*/* L IEAPMNIP: TYPE =SWAIT                                          */
*/* R GO INTO DISABLED WAIT                                          */
*/*NPMMFA: E MALFUNCTION ALERT TRAP ROUTINE                          */
*/* S NIPLKCHK: GET NIP LOCK                                         */
*/* P GET LOGICAL CPU ADDR FROM PSA (PSASPAD + X'40') AND PUT INTO PSW
*/*                                                                  */
*/* P SET WAIT STATE CODE (X'47') IN PSW (MALFUNTION ALERT)          */
*/* L IEAPMNIP: TYPE =SWAIT                                          */
*/* R GO INTO DISABLED WAIT                                          */
*/*NPRTMTAB: E RTM TRAP TABLE                                        */
*/* N ROUTINE CONSISTS OF A TABLE USED TO REPLACE THE RTM1 TABLE     */
*/* N THIS TABLE IS POINTED TO BY CVTBTERM                           */
*/* N ALL ENTRIES TO RTM ARE TRAPPED HERE                            */
*/* N A CODE SHOWING WHICH ENTRY WAS TAKEN IS SET AND NIPRTMTR IS  1424
*/* CALLED                                                           */
*/* P PUT ADDR OF NIP RTM TRAP ROUTINE INTO ENTRY REG                */
*/* P PUT RTM ENTRY CODE INTO PARM REG                               */
*/* R EXIT TO NIPRTMTR ROUTINE                                       */
*/*NIPRTMTR: E RTM TRAP ROUTINE                                      */
*/* S NIPLKCHK: GET NIP LOCK                                         */
*/* P PUT RTM ENTRY IDENTIFIER (PASSED IN PARM REG) INTO PSW         */
*/* P SET WAIT STATE CODE (X'64') IN PSW (RTM ENTERED AT NIP)        */
*/* L IEAPMNIP: TYPE =SWAIT                                          */
*/* R GO INTO DISABLED WAIT                                          */
*/*NIPLKCHK: E OBTAIN NIP LOCK ROUTINE                               */
*/* N THIS ROUTINE BLOCKS RECURSIVE ENTRIES TO NIP TERM PROCESS      */
*/* P DISABLE I/O AND EXTERNAL INTERUPTS WITH STNSM INSTR (X'FC')    */
*/* P PASS ADDR OF CPU FROM PSA (PSACPULA) AS AN ARGUMENT            */
*/* P SET COMPARE AND SWAP (CS) ARGUMENT TO ZERO                     */
*/* P USING CS INSTR GET THE NIP LOCK                                */
*/* D (YES,,NO,%DISABL) LOCK OBTAINED                                */
*/* R RETURN TO CALLER                                               */
*/*%DISABL: D (YES,,NO,%STOPCPU) ERROR TRAP IN PROGRESS (W S CODE ^= 0)
*/*                                                                  */
*/* P (,%WAITST) LOAD NIPMS PSW                                      */
*/*%STOPCPU: N NIP MODULE DETECTED ERROR AND IS GOING TO SYSTEM TERM */
*/* P LOAD PSW IN NVT (NVTWTPSW)                                     */
*/*%WAITST: R GO INTO DISABLED WAIT                                  */
*/*NIPSQEND: E GET SQA PAGE TRAP ROUTINE                             */
*/* S NIPLKCHK: GET NIP LOCK                                         */
*/* P SET WAIT STATE CODE (X'36') IN PSW (INITIAL SQA PAGES EXHAUSTED)
*/*                                                                  */
*/* L IEAPMNIP: TYPE =SWAIT                                          */
*/* R GO INTO DISABLED WAIT                                          */
*/*NPMSQBCK: E SQA/LSQA PAGE BACKING TRAP                            */
*/* N ENTERED BY VSM REQUEST FOR SQA/LSQA STORAGE VIA PVTPSQA FIELD  */
*/* N THIS ROUTINE USES PAGES RESERVED BY NIPM IN NPMPFTBL RTNE      */
*/* D (YES,%SQ01,NO,) NO PFTES ON QUEUE (PVTAFQF = 0)                */
*/* N GET ADDRESS OF FIRST AVAILABLE PFTE                            */
*/* P 1ST AVAIL PFTE = RBN OF 1ST AVAIL PFTE + APPARENT ORIGIN OF PAGE
*/*FRAMES                                                            */
*/* D (YES,%SQEXT,NO,) 1ST PFTE PREFERRED (PFTPREF = ON)             */
*/*%PTR0: D (YES,%SQ01,NO,) FORWARD PFTE CHAIN PTR 0                 */
*/* D (YES,%SQEXT,NO,) FRAME IN PREFERRED AREA                       */
*/* P (,%PTR0) NEXT PFTE = FWD QUEUE PTR (PFTEFQPTR) + APPARENT ORIGIN
*/*OF PAGE FRAME                                                     */
*/*%SQ01: N NO FRAMES AVAIL ON RSM QUEUE SO USE NIPMS RESERVED FRAMES
*/*                                                                  */
*/* D (YES,,NO,%RSMQ) NO FRAMES LEFT ON NIPMS QUEUE                  */
*/* P RESET TRAP TO NORMAL RSM ADDR (PVTPSQA) SAVED IN NVT (NVTPQSAV)
*/*                                                                  */
*/*%RSMQ: D (YES,,NO,%YESRSM) NONE ON RSM QUEUE (PVTAFQF = 0)        */
*/* P 1ST RSM PFTE (PVTAFQF) = NIPMS FIRST PFTE ON QUEUE             */
*/* P SET LAST ON RSMS QUEUE = NIPMS FIRST PFTE ON QUEUE             */
*/* P ADDR OF PFTE = 1ST PFTE ON NIPMS QUEUE + APPAR ORIGIN OF PAGE
*/*FRAME                                                             */
*/* P UPDATE NIPMS 1ST PFTE PTR TO NEXT PFTE ON NIPMS QUEUE          */
*/* P (,%NEW1ST) TAKE PFTE OFF NIPMS QUEUE BY SETTING ITS FORWARD CHAIN
*/* PTR TO ZERO                                                      */
*/*%YESRSM: N BOTH QUEUES CONTAIN PFTES                              */
*/* P RSMS 1ST PFTE ADDR = 1ST PFTE PTR (PVTAFQF) + PAGE FRAME APPAR
*/*ORIGIN                                                            */
*/* P BACK CHAIN (PFTBQPTR) TO NIPMS PFTE (NPMAFQF)                  */
*/* P NIPM PFTE ADDR = NIPMS PFTE + APPAR ORIGIN OF PAGE FRAME       */
*/* P UPDATE NIPMS FORWARD CHAIN PTR TO NEXT PFTE                    */
*/* P SET PFTE FORWARD QUEUE PTR (PFTFQPTR) TO RSMS QUEUE (PVTAFQF)  */
*/* P RSM PFTE ADDR = PAGE FRAME APPAR ORIGIN + 1ST PFTE ON RSMS QUEUE
*/*                                                                  */
*/* P SET PFTE BACK CHAIN PTR (PFTBQPTR) = RBN OF 1ST PFTE ON AVAIL
*/*QUEUE                                                             */
*/*%NEW1ST: N A PFTE HAS NOW BEEN TRANSFERRED FROM NIPMS TO RSMS QUEUE
*/*                                                                  */
*/* P NEW NIPMS 1ST PFTE ADDR = APPAR ORIGIN OF PAGE FRAME + 1ST   1424
*/*PFTE INDEX                                                        */
*/* D (YES,,NO,%UPCNT) NIPMS QUEUE NOT EMPTY                         */
*/* P ZERO BACK CHAIN IN NIPMS NEW 1ST PFTE (PFTBQPTR = 0)           */
*/*%UPCNT: P ADD ONE TO RSM FRAME COUNT (PVTAFC)                     */
*/* P DECREMENT NIPM FRAME COUNT BY ONE                              */
*/*%SQEXT: P PUT SAVED ADDR OF RSM FROM NVT (NVTPQSAV) INTO ENTRY REG
*/*                                                                  */
*/* R EXIT TO RSM                                                    */
*/*NIPSWAIT: E LOAD DISABLED WAIT ROUTINE                            */
*/* N UPON ENTRY THE NIP WAIT STATE PSW IN THE NVT MUST BE INITIALIZED
*/*                                                                  */
*/* D (YES,%MOVEWT,NO,) NIP LOCK HELD                                */
*/* S NIPLKCHK: GET NIP LOCK                                         */
*/*%MOVEWT: D (YES,%MOVEPSW,NO,) MESSAGE PASSED                      */
*/* D (YES,%CVRT,NO,) ERROR TRAP TAKEN                               */
*/* P COPY PSW (NVTWPSW2) INTO NIPSWAIT AREA (NPMPSW2)               */
*/*%CVRT: N SET UP PSW ID PORTION FOR CONVERSION TO EBCDIC           */
*/* P PUT PSW ID PORTION INTO CONVERT PARAMETER FIELD                */
*/* P SET CONVERSION LENGTH PARAMETER                                */
*/* P PUT ADDR OF CONVERSION LENGTH INTO PARM REG                    */
*/* S NIPXCDIC: CONVERT TO EBCDIC                                    */
*/* P PUT CONVERTED PSW ID INTO MESSAGE IEA304I                      */
*/* P LOAD MSG HEADER ADDRESS                                        */
*/*%MOVEPSW: P PUT PSW WAIT STATE CODE (NPMPSW2) INTO LRB (LRBTWSC)  */
*/* P PUT ADDR OF LRB (NVTNBFND) INTO PARAMETER LIST                 */
*/* P PUT ADDR OF SYS TERM (RVTPTERM) INTO PARAM LIST                */
*/* P PUT ADDR OF PARM LIST INTO PARM REG                            */
*/* P LOAD SYS TERM ROUTINE PSW                                      */
*/* R EXIT TO SYSTEM TERM                                            */
*/*NIPUCBFN: E UCB FIND ROUTINE                                      */
*/* N INPUT IS EBCDIC UNIT NAME OR HEX UNIT ADDR (CUA) IN PARM REG   */
*/* D (YES,%LOOK,NO,) HEX UNIT ADDR (PARM REG +)                     */
*/* N CONVERT EBCDIC UNIT ADDR TO HEX                                */
*/* S NIPEBCDX: CONVERT TO HEX                                       */
*/* P SHIFT CONTENTS OF PARM REG 8 BITS TO THE RIGHT                 */
*/*%LOOK: L IOSGEN: UCBLOOK                                          */
*/* D (YES,%UCB,NO,) UCB OBTAINED                                    */
*/* P ZERO OUT PARM REG                                              */
*/*%CALLER: R RETURN TO CALLER                                       */
*/*%UCB: P (,%CALLER) PUT UCBLOOKS REG RESULTS INTO PARM REG         */
*/*NIPTIME: E TIMING SERVICE ROUTINE                                 */
*/* N ROUTINE PROVIDES TIME IN DECIMAL INDICATED BY TOD CLOCK OR     */
*/* N BINARY VALUE (100THS OF SECS ELASPED FOR NIPM DURING         1424
*/*THIS IPL)                                                         */
*/* N INPUT PARM REG HAS ZERO FOR DECIMAL REQUEST OR FOUR FOR BINARY
*/*REQUEST                                                           */
*/*%INOP: D (YES,,NO,%GOODCLK) TOD CLOCK INOPERATIVE                 */
*/* D (YES,,NO,%ZEROREG) BINARY REQUEST (PARM REG INPUT)             */
*/* P INCREMENT PSUEDOCLOCK BY ONE                                   */
*/* P (,%TIMERET) DIVIDE PSUEDO CLOCK VALUE TO GO FROM MICROS TO 100THS
*/*AND PUT IN PARM REG                                               */
*/*%GOODCLK: P GET ADDR OF NIPSCHED PARM LIST                        */
*/* P PUT ADDR OF NVT (FROM REG 2 - RNVT) INTO PARM LIST             */
*/* P PUT ADDR OF CPU WITH GOOD CLOCK INTO REG                       */
*/* S IEAPMNIP: TYPE = SCHED                                         */
*/* D (YES,%INOP,NO,%TOD) TOD CLOCK INOPERATIVE                      */
*/*%TOD: D (YES,%TIMERET,NO,) MAINLINE CODE SEARCH FOR GOOD CLOCK    */
*/* D (YES,%DECTIME,NO,) DECIMAL TIME REQUEST                        */
*/* N CONVERT TIME TO 100THS OF A SECOND                             */
*/* P LOAD RELATIVE TIME INTO A REG                                  */
*/* P SHIFT OUT UNUSED LOW BITS                                      */
*/* P DIVIDE TO GET TIME IN 100THS                                   */
*/* P (,%TIMERET) PUT CONVERTED TIME INTO PARM REG                   */
*/*%DECTIME: N FOLLOWING CONVERTS BINARY TIME INTO HHMMSS - HEX FORMAT
*/*                                                                  */
*/* P PUT BINARY TIME INTO REG                                       */
*/* P REMOVE UNUSED BITS                                             */
*/* P DIVIDE BY MICRO SECS TO GET MINUTES SINCE JAN 1900             */
*/* P DIVIDE (NUMBER OF MICRO SECS LEFT OVER) REMAINDER BY MINUTES PER
*/*DAY                                                               */
*/* P SAVE MINUTES SINCE MIDNIGHT                                    */
*/* P CONVERT MIN SINCE MIDNIGHT TO MICRO SECS                       */
*/* P ADD MICRO SECS INTO NEXT MINUTE TO MICRO SECS SINCE MIDUTE     */
*/* D (YES,%OVERFL,NO,) OVERFLOW                                     */
*/* P COMPENSATE FOR OVERFLOW                                        */
*/*%OVERFL: P REDUCE VALUE TO 100TH OF SECONDS                       */
*/* N GET 8 DECIMAL DIGITS (HHMMSSTH) FROM BINARY TOD VALUE          */
*/* N THIS IS DONE BY SUCCESSIVELY DIVIDING THE BINARY TIME BY:      */
*/* N 10, 10, 10, 6, 10, 6, 10 AND 6 (REMAINDER OF DIVISIONS SAVED FOR
*/*RESULT)                                                           */
*/* P LOOP TO DO THE FIRST THREE DIVISIONS BY TEN                    */
*/* P LOOP AGAIN TO DIVIDE BY 6, 10, 6, 10, AND 6                    */
*/* P DIVIDE ALTERNATELY BY 6 AND 10                                 */
*/* P (,%TIMERET) PUT CONVERTED BINARY VALUE INTO PARM REG ZERO FOR
*/*CALLER                                                            */
*/*%ZEROREG: P DECIMAL REQUEST - ZERO PARM REG                       */
*/*%TIMERET: R RETURN TO CALLER                                      */
*/*NIPTTOD: E STORE CLOCK ROUTINE                                    */
*/* N FOLLOWING IS EXECUTED UNDER A SCHEDULED SRB ON A CPU           */
*/* P PUT ADDR OF NVT (IN RPARM) BACK INTO NVT REG 2)                */
*/* P STORE CLOCK VALUE (STCK)                                       */
*/* D (YES,%STCKRET,NO,) GOOD CLOCK                                  */
*/* P TURN ON CLOCK INOPERATIVE FLAG (NVTFLNCK)                      */
*/*%STCKRET: R RETURN TO CALLER                                      */
*/*NIPSENSE: E PRINT SENSE INFO ROUTINE                              */
*/* N ROUTINE WRITES AN INTERPRETIVE MSG TO MASTER CONSOLE           */
*/* N INPUT IS ADDR OF AN IOB WHICH REPRESENTS FAILING I/O OPERATION */
*/* P GET ADDR OF UCB FOR DEVICE ASSOCIATED WITH I/O FAILURE         */
*/* P MOVE UNIT NAME TO MSG IEA306I                                  */
*/* P SAVE IOB POINTER                                               */
*/* P ADDR OF FAILING CCW = CCW POINTED TO BY CSW IN IOB - CCW LENGTH
*/*                                                                  */
*/* P PUT CCW COMMAND CODE IN PARAM LIST FOR CONVERSION TO EBCDIC    */
*/* P SET CONVERSION LENGTH  IN PARM LIST                            */
*/* S NIPXCDIC: CONVERT TO EBCDIC                                    */
*/* P MOVE CONVERTED CCW CODE TO MSG                                 */
*/* P MOVE IOB CSW STATUS TO CONVERT PARM LIST                       */
*/* P SET NUMBER OF CHARS TO BE CONVERTED INTO PARM LIST             */
*/* S NIPXCDIC: CONVERT TO EBCDIC                                    */
*/* P MOVE CONVERTED CSW STATUS TO MSG                               */
*/* D (YES,,NO,%MOVEVOL) UNIT CHECK BIT ON                           */
*/*  P MOVE FIRST SENSE BYTE TO CONVERT PARM LIST                    */
*/*  P MOVE SECOND SENSE BYTE TO CONVERT PARM LIST                   */
*/* P SET NUMBER OF CHARS TO BE CONVERTED INTO PARM LIST             */
*/* S NIPXCDIC: CONVERT TO EBCDIC                                    */
*/* P MOVE CONVERTED SENSE BYTES TO MSG                              */
*/* P MOVE VOLUME SERIAL NUMBER TO MSG                               */
*/* P (,%MSGHDR) MOVE MESSAGE ENDING TO MSG                          */
*/*%MOVEVOL: P MOVE VOLUME SERIAL NUMBER TO MSG                      */
*/* P MOVE MESSAGE ENDING TO MSG (UNIT CHECK BIT OFF)                */
*/*%MSGHDR: P LOAD MSG HEADER ADDR INTO PARM REG                     */
*/* S NIPWTO: WRITE IEA306I MSG                                      */
*/* R RETURN TO CALLER                                               */
*/*IEAVNIPM:  END                                                    */
@DATA    DS    0H
@CH04814 DC    XL2'0100'
@SM05051 MVC   NVT(0),INVT(RNVT)
@SM05062 MVC   PFT1(0,PFTEPTR),PFT1(PFTEPTR2)
         DS    0F
@TF00001 DS    F
         DS    0F
@CF00144 DC    F'1'
@CF00265 DC    F'2'
@CF00381 DC    F'3'
@CF00109 DC    F'4'
@CF01507 DC    F'5'
@CF01156 DC    F'6'
@CF00125 DC    F'8'
@CF01418 DC    F'9'
@CF04594 DC    F'10'
@CF00122 DC    F'15'
@CF00081 DC    F'16'
@CF02923 DC    F'44'
@CF03004 DC    F'56'
@CF01069 DC    F'256'
@CF04798 DC    F'4096'
@CF04971 DC    F'65535'
@CF04964 DC    F'16777216'
@CF05054 DC    F'-4'
@CF05060 DC    XL4'0000FFFF'
@CF04818 DC    XL4'0001'
@CF04822 DC    XL4'0010'
@CF01887 DC    XL4'F0'
@CF02070 DC    XL4'39'
@CA04764 DC    A(NIPXCDIC)
@CA04765 DC    A(NIPEBCDX)
@CV00098 DC    V(NIPWTO)
@CV00099 DC    V(NIPWTOR)
@CV00100 DC    V(NIPWTOR2)
@CV00101 DC    V(NIPDCBIC)
@CV00102 DC    V(NIPDCBOC)
@CV00103 DC    V(NIPOPEN)
@CV00104 DC    V(NIPMOUNT)
         DS    0D
PVTPTR   DS    A
SCVTSPTR DS    A
ECBPTR   DS    A
DCBPTR1  DS    A
NPMPPTR  DS    A
ASCBPTR  DS    A
FBQESPTR DS    A
GDAPTR   DS    A
IOCOMPTR DS    A
IOCXPTR  DS    A
LCHPTR   DS    A
LDAPTR   DS    A
LRBPTR   DS    A
PCCAPTR  DS    A
PQESEPTR DS    A
RSMHDPTR DS    A
RVTPTR   DS    A
SRBPTR   DS    A
NIPLOCK  DC    A(0)
         ORG   NIPLOCK
@NM00230 DS    CL2
NIPLOCK1 DS    CL2
         ORG   NIPLOCK+4
I        DS    F
N        DS    F
WTORPTR  DC    A(0)
RHOLD    DC    A(0)
RNEXTSPE DC    A(0)
SPEBUF   DC    A(0)
NPMPFTAD DC    A(0)
NPMVVNDX DC    A(0)
NPMVVPG1 DC    A(0)
NLDAPQEA DC    A(0)
PFNSAVE  DC    A(0)
NVTFTCHA DS    A
PARMHOLD DS    A
GETWORD  DC    A(0)
         ORG   GETWORD
NSRBSP   DS    AL1
NSRBLEN  DS    AL3
         ORG   GETWORD+4
NCPUAFF  DS    FL4
         ORG   NCPUAFF
@NM00233 DS    FL2
NSRBAFF  DS    FL2
         ORG   NCPUAFF+4
NAFFMASK DC    XL4'00008000'
NPMECB   DS    F
NSRBEXIT DS    A
PARMSAVE DS    F
NSYSEV22 DC    F'0'
         ORG   NSYSEV22
NDYNAMCT DS    FL2
NAVFRMCT DS    FL2
         ORG   NSYSEV22+4
NGETSIZE DS    FL4
         ORG   NGETSIZE
NGETSP   DC    XL1'F5'
NGETLEN  DC    AL3(0)
         ORG   NGETSIZE+4
NPMFRRGN DS    FL4
         ORG   NPMFRRGN
@NM00240 DC    XL1'FC'
NPMFRLEN DC    AL3(0)
         ORG   NPMFRRGN+4
HMASKCON DS    FL4
         ORG   HMASKCON
HMASK    DS    CL2
@NM00241 DS    CL2
         ORG   HMASKCON+4
NP12EP   DC    A(0)
WORKTIME DC    F'0'
DIVISOR  DS    F
C10000   DC    F'10000'
C60MIL   DC    F'60000000'
C1440    DC    F'1440'
CZERO    DC    F'0'
SFXINDEX DC    F'0'
RSUCNT   DC    F'0'
FTCHSTRT DS    A
ADCONBAS DS    A
NPMAFC   DC    H'0'
NPMLFPGN DC    H'20'
TOTCOUNT DS    H
RSVCT    DC    H'0'
NPMCHCPU DC    AL2(0)
         DS    CL3
CDENTPTR DS    AL3
@CC04940 DC    C'SRB '
@CC04830 DC    C'01'
@CC04831 DC    C'B2'
@CC04832 DC    C'03'
@CC04833 DC    C'10'
@CC04834 DC    C'04'
@CC04836 DC    C'A8'
@CC04837 DC    C'05'
@CC04838 DC    C'C8'
@CC04839 DC    C'XX'
@CC04863 DC    C'PX'
@CB02240 DC    X'0000'
@CB04842 DC    X'001A'
@CB04864 DC    X'0FFF'
@CB04865 DC    X'F000'
@CB04917 DC    X'FFF0'
         DS    CL2
NVT      DS    CL552
         ORG   NVT
NVTNPSUF DS    26CL2
@NM00052 DS    CL1
NVTNPSFX DS    AL1
NVTNPATR DS    CL1
         ORG   NVTNPATR
NVTNPREN DS    BL1
         ORG   NVTNPREN
@NM00053 DS    BL1
NVTNPREU EQU   NVTNPREN+0
         ORG   NVTNPATR+0
@NM00054 EQU   NVTNPATR+0
         ORG   NVT+55
NVTFLLB  DS    CL1
         ORG   NVTFLLB
NVTFLSLB DS    BL1
@NM00055 EQU   NVTFLLB+0
         ORG   NVT+56
NVTMSTCB DS    AL4
NVTCMTCB DS    AL4
NVTMASCB DS    AL4
NVTRSV41 DS    AL4
NVTRSV42 DS    AL4
NVTSVCTB DS    AL4
NVTVBLDL DS    AL4
NVTIGCER DS    AL4
NVTVVMDI DS    AL4
NVTMSLNK DS    AL4
NVTDSSNG DS    AL4
NVTMFA   DS    AL4
NVTNVRSZ DS    AL4
NVTRSV49 DS    AL4
@NM00056 DS    AL4
NVTIGXER DS    AL4
NVTLNGFX DS    FL4
NVTLSQAS DS    AL4
NVTSQANO DS    FL2
NVTLSQNO DS    FL2
NVTRGNAV DS    FL2
NVTNBMIN DS    FL2
NVTRSVMN DS    FL2
NVTNVSQA DS    FL2
NVTABSAV DS    CL8
         ORG   NVTABSAV
NVTABFST DS    AL4
NVTABSEC DS    CL4
         ORG   NVT+148
NVTSVC60 DS    CL8
NVTPQSAV DS    FL4
NVTALSQA DS    AL4
NVTLSPQE DS    AL4
NVTMFASA DS    AL4
NVTRTMSA DS    AL4
NVTSTMAP DS    AL4
NVTNUCND DS    AL4
NVTNBFND DS    AL4
NVTVVPG1 DS    AL4
NVTN0MSG DS    AL4
NVTSGPSA DS    AL4
@NM00057 DS    FL2
NVTNXSIZ DS    FL2
NVTNXPTR DS    AL4
NVTTRACE DS    FL2
NVTFLSG  DS    CL1
NVTFLCN  DS    CL1
         ORG   NVTFLCN
NVTFLAC  DS    BL1
NVTFLIOC EQU   NVTFLCN+0
NVTMP    EQU   NVTFLCN+0
NVTFLASM EQU   NVTFLCN+0
NVTFLNHC EQU   NVTFLCN+0
NVTFLNCK EQU   NVTFLCN+0
NVTFLRAC EQU   NVTFLCN+0
@NM00058 EQU   NVTFLCN+0
         ORG   NVT+212
@NM00059 DS    AL4
NVTMCPSW DS    CL8
NVTWTPSW DS    CL8
         ORG   NVTWTPSW
NVTWPSW1 DS    CL4
NVTWPSW2 DS    FL4
         ORG   NVTWPSW2
NVTIDPSW DS    CL2
NVTFLWS1 DS    CL1
NVTFLWSC DS    CL1
         ORG   NVTFLWSC
NVTIX    DS    CL1
         ORG   NVT+232
NVTLOAD  DC    AL4(NIPLOAD)
NVTSENSE DC    AL4(NIPSENSE)
NVTSWAIT DC    AL4(NIPSWAIT)
NVTTIME  DC    AL4(NIPTIME)
NVTUCBFN DC    AL4(NIPUCBFN)
NVTWTO   DC    VL4(NIPWTO)
NVTWTOR  DC    VL4(NIPWTOR)
NVTWTOR2 DC    VL4(NIPWTOR2)
NVTOPEN  DC    VL4(NIPOPEN)
NVTMOUNT DC    VL4(NIPMOUNT)
NVTPRMPT DC    AL4(NIPPRMPT)
NVTVIRT  DC    AL4(NIPVIRT)
NVTREAL  DC    AL4(NIPREAL)
NVTSCHED DC    AL4(NIPSCHED)
NVTOPIO  DC    AL4(NIPOPIO)
NVTNIPM  DC    A(0)
@NM00060 DC    A(0)
@NM00061 DC    A(0)
NVTNMBLD DC    AL4(NPMLBLDL)
@NM00062 DC    4F'0'
NVTDCBIC DC    VL4(NIPDCBIC)
NVTDCBOC DC    VL4(NIPDCBOC)
NVTDCBSN DC    AL4(NIPDCBSN)
NVTMBUF  DC    A(0)
NVTMBEND DC    A(0)
NVTSPE   DC    2A(0)
NVTTOD   DC    F'0'
NVTCPUAD DC    X'0000'
@NM00063 DC    X'0000'
NVTABCD1 DC    H'0'
NVTABWS1 DC    X'00'
@NM00064 DC    X'00'
NVTRSV43 DS    AL4
NVTPAREA DC    A(0)
NVTPTAB  DC    A(0)
NVTQSBUF DC    A(0)
NVTRSV44 DS    FL2
NVTSPUCB DC    AL2(0)
NVTVVTCB DC    A(0)
NVTVRTCB DC    A(0)
@NM00065 DC    2A(0)
NVTVRBLD DC    A(0)
NVTBLDL  DC    A(0)
NVTCSLIB DC    A(0)
NVTCSLNM DC    A(0)
NVTCSIOB DC    A(0)
NVTCSLPG DC    A(0)
NVTLPACT DC    X'00'
@NM00066 DC    AL3(0)
NVTXCTL  DC    X'0000000000000000'
         ORG   NVTXCTL
NVTXFST  DS    AL4
NVTXSEC  DS    CL4
         ORG   NVT+436
NVTLOCAT DC    X'0000000000000000'
         ORG   NVTLOCAT
NVTLFST  DS    AL4
NVTLSEC  DS    CL4
         ORG   NVT+444
NVTVJPQ  DC    A(0)
NVTVLLE  DC    A(0)
NVTVPQE  DC    A(0)
NVTVMSS  DC    A(0)
NVTRJPQ  DC    A(0)
NVTRLLE  DC    A(0)
NVTRPQE  DC    A(0)
NVTRMSS  DC    A(0)
NVTLPAND DC    A(0)
NVTRSV4A DS    AL4
NVTLVIRT DC    A(0)
NVTVRREG DC    A(0)
NVTVRLNG DC    F'0'
NVTRSV45 DS    CL8
NVTFASVT DC    A(0)
NVTREALR DC    A(0)
@NM00067 DC    A(0)
NVTRSV46 DS    AL4
NVTRSV47 DS    AL4
NVTRSV48 DS    AL4
NVTFLPO  DC    X'00'
         ORG   NVTFLPO
NVTFLLST DS    BL1
NVTSYSP  EQU   NVTFLPO+0
@NM00068 EQU   NVTFLPO+0
NVTFLQS  EQU   NVTFLPO+0
NVTFLWS  EQU   NVTFLPO+0
@NM00069 EQU   NVTFLPO+0
         ORG   NVT+529
@NM00070 DC    X'000000'
NVTRCODE DC    AL4(NPMPSW2)
NVTRLOCK DC    AL4(NIPLOCK)
NVTRMSG  DC    AL4(NPSWAITM)
NVTLPALO DC    A(0)
NVTLPAHA DC    F'0'
         ORG   NVT+552
NPMLBLDL DS    CL62
         ORG   NPMLBLDL
FF       DC    H'1'
LL       DC    H'58'
NAME     DS    CL8
         ORG   NAME
@NM00238 DS    CL6
NAMSUFF  DS    CL2
         ORG   NPMLBLDL+12
USER1    DS    CL14
ATTRIB   DS    CL1
         ORG   ATTRIB
FORMAT   DS    BL1
@NM00239 EQU   ATTRIB+0
         ORG   NPMLBLDL+27
USER2    DS    CL35
         ORG   NPMLBLDL+62
         DS    CL2
@NM00081 DS    CL44
         ORG   @NM00081
NPBNIOBF DS    CL4
         ORG   NPBNIOBF
NPBNIFB0 DC    AL1(0)
NPBNIFB1 DC    X'00'
         ORG   NPBNIFB1
NIPDSTAT DS    BL1
NIPDFEST EQU   NPBNIFB1+0
NIPDRTY  EQU   NPBNIFB1+0
NIPDERR  EQU   NPBNIFB1+0
NIPDMOD  EQU   NPBNIFB1+0
@NM00082 EQU   NPBNIFB1+0
         ORG   NPBNIOBF+2
NPBNIFB2 DC    X'00'
NPBNIFB3 DC    X'00'
         ORG   NPBNIFB3
NIPDUNAV DS    BL1
NIPDCREJ EQU   NPBNIFB3+0
NIPDOFFL EQU   NPBNIFB3+0
@NM00083 EQU   NPBNIFB3+0
         ORG   @NM00081+4
NIPIOBSN DS    CL40
         ORG   NIPIOBSN
NPBNIOB  DS    CL40
         ORG   NPBNIOB
NPBNFGSN DC    X'42000000'
NPBNECBA DC    AL4(NPBNECB)
NPBNIOB1 DC    X'0000000000000000'
NPBNCPAD DC    A(0)
NPBNDCBP DC    AL4(NPBNDCB1-40)
NPBNREST DC    X'0000000000000000'
NPBNSEEK DC    X'0000000000000000'
         ORG   @NM00081+44
NIPECBSN DS    CL4
         ORG   NIPECBSN
NPBNECB  DS    CL4
         ORG   NPBNECB
NPBNCPCD DC    X'00'
NPBNRBAD DC    AL3(0)
         ORG   NIPECBSN+4
         DS    CL4
@NM00084 DS    CL64
         ORG   @NM00084
NPBNLNTH DC    X'06'
NPBNRSVD DC    AL3(0)
NIPDEBSN DS    CL60
         ORG   NIPDEBSN
NPBNDEB  DS    CL60
         ORG   NPBNDEB
NPBNDEB1 DC    A(0)
NPBNAMLN DC    X'00'
NPBNDEB2 DC    AL3(0)
NPBNOFLG DC    X'00'
NPBNDEB3 DC    X'00000000000000'
NPBNNMXT DC    X'01'
NPBNDEB4 DC    AL3(0)
NPBNPRTY DC    X'00'
NPBNDEB5 DC    AL3(0)
NPBNKYID DC    X'0F'
NPBNDCBA DC    AL3(NPBNDCB1-40)
NPBNXSCL DC    X'00'
NPBNAPAD DC    AL3(0)
NPBNDVMD DC    X'18'
NPBNUCBA DC    AL3(0)
NPBNBINM DC    X'0000'
NPBNSTCC DC    X'0000'
NPBNSTHH DC    X'0000'
NPBNNDCC DC    X'FFFF'
NPBNNDHH DC    X'FFFF'
NPBNNTRK DC    XL2'7FFF'
NPBNDCB1 DS    CL12
         ORG   NPBNDCB1
NPBNMACR DC    X'00008000'
NPBNIFGS DC    X'00'
NPBNDEBA DC    AL3(NPBNDEB)
NPBNOFGS DC    X'12000000'
         ORG   @NM00084+64
TIME     DS    CL8
         ORG   TIME
CONSTANT DS    FL4
DROP     DS    FL4
         ORG   TIME+8
         DS    CL4
NPMWTPSW DS    CL8
         ORG   NPMWTPSW
@NM00227 DC    X'00020000'
NPMPSW2  DC    A(0)
         ORG   NPMPSW2
NPMWPSW2 DS    CL4
         ORG   NPMWPSW2
NPMIDPSW DS    CL2
@NM00228 DS    CL1
NPMFLWSC DS    CL1
         ORG   NPMWTPSW+8
NPMSTPSW DS    CL8
         ORG   NPMSTPSW
@NM00229 DC    X'00080000'
NPMSTADD DC    A(0)
         ORG   NPMSTPSW+8
NIPDISAB DC    X'00'
         DS    CL3
NPMSTLST DS    CL8
         ORG   NPMSTLST
NPSWAITM DC    A(0)
NPMSTLRB DC    A(0)
         ORG   NPMSTLST+8
NPMAFQF  DC    X'00'
         DC    XL1'0'
NPMAFQL  DC    X'00'
         DC    XL1'0'
ABENDAD  DS    CL8
         ORG   ABENDAD
@NM00234 DC    AL4(NIPABEND)
@NM00235 DC    X'80000000'
         ORG   ABENDAD+8
LOCTRAP  DS    CL8
         ORG   LOCTRAP
@NM00236 DC    AL4(NIPSVC)
@NM00237 DC    X'80000000'
         ORG   LOCTRAP+8
LOGREC   DC    CL12'SYS1.LOGREC'
SVCLIB   DC    CL12'SYS1.SVCLIB'
NIPMNAME DS    CL8
         ORG   NIPMNAME
BASE     DC    CL6'IEAVNP'
SUFFIX   DS    CL2
         ORG   NIPMNAME+8
NIPXNAME DC    CL8'IEAVNIPX'
NPLOCMOD DC    CL8'IEAVNP12'
NPRMPTRT DC    CL8'IEAVNP03'
PREAD    DC    CL8'ILRPREAD'
BMASK    DS    CL1
QUOTE    DC    CL1''''
CONTCHAR DC    CL5'CONT'''
IPLEDCPU DC    X'0000'
UCBON    DS    CL11
         ORG   UCBON
SENS306I DS    CL4
@NM00243 DC    CL1','
SER306I  DS    CL6
         ORG   UCBON+11
UCBOFF   DS    CL11
         ORG   UCBOFF
@NM00244 DC    CL1','
SRL306I  DS    CL6
@NM00245 DC    CL4'    '
         ORG   UCBOFF+11
         DS    CL1
CONSVC   DS    CL8
         ORG   CONSVC
@NM00246 DS    CL6
CONSVC1  DS    CL2
         ORG   CONSVC+8
BITFLD   DS    CL4
         ORG   BITFLD
@NM00247 DS    CL2
CODE     DS    CL2
         ORG   BITFLD+4
@NM00248 DS    CL24
         ORG   @NM00248
DIGITS   DS    FL4
CONVERT  DS    CL20
         ORG   @NM00248+24
NIPMSWS  DC    X'00'
         ORG   NIPMSWS
NIPMABRE DS    BL1
NPSWTSV1 EQU   NIPMSWS+0
NPSWTSV2 EQU   NIPMSWS+0
NPMUSER  EQU   NIPMSWS+0
NPMXCTL  EQU   NIPMSWS+0
@NM00249 EQU   NIPMSWS+0
         ORG   NIPMSWS+1
SUFFICES DC    CL50'A201B211031004A805B8A606B6A1070913161719151BC8C6XX'
         ORG   SUFFICES
SUFXLIST DS    25CL2
         ORG   SUFFICES+50
         DS    CL1
CUA      DS    CL4
         ORG   CUA
LETTER   DS    4AL1
         ORG   CUA+4
NPLOCKSV DS    16A
IEAVNIPM CSECT
*                                      /* GEN ERROR MESSAGES         */
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* *                                                                   *
* *          ERROR  MESSAGES  ISSUED  BY  IEAVNIPM  CSECT             *
* *                                                                   *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* *
* *
IEA300I  DS    0H                         ALIGN MESSAGE HEADER
         IEAPMNIP  TYPE=HEADER,MSGST=IEA300I,MSGEND=END300I
         DC    CL17'IEA300I I/O ERROR'    MESSAGE TEXT
         DC    CL17' DURING BLDL FOR '    MESSAGE TEXT
MODNAM1  DS    CL8'        '              MODULE NAME
         DC    CL4' IN '                  MESSAGE TEXT
DSNAME1  DC    CL12'SYS1.NUCLEUS'         DATASET NAME
END300I  EQU   *                          * END OF MESSAGE *
* *
* *
IEA301I  DS    0H                         ALIGN MESSAGE HEADER
         IEAPMNIP  TYPE=HEADER,MSGST=IEA301I,MSGEND=END301I
         DC    CL8'IEA301I '              MESSAGE TEXT
MODNAM2  DS    CL8'        '              MODULE NAME
         DC    CL14' NOT FOUND IN '       MESSAGE TEXT
DSNAME2  DC    CL12'SYS1.NUCLEUS'         DATASET NAME
END301I  EQU   *                          * END OF MESSAGE *
* *
* *
IEA302I  DS    0H                         ALIGN MESSAGE HEADER
         IEAPMNIP  TYPE=HEADER,MSGST=IEA302I,MSGEND=END302I
         DC    CL12'IEA302I TOD '         MESSAGE TEXT
         DC    CL17'CLOCK INOPERATIVE'    MESSAGE TEXT
END302I  EQU   *                          * END OF MESSAGE *
* *
* *
IEA303I  DS    0H                         ALIGN MESSAGE HEADER
         IEAPMNIP  TYPE=HEADER,MSGST=IEA303I,MSGEND=END303I
         DC    CL14'IEA303W ABEND '       MESSAGE TEXT
CODE303I DS    CL3'   '                   ABEND CODE
         DC    CL18' DURING SUPERVISOR'   MESSAGE TEXT
         DC    CL15' INITIALIZATION'      MESSAGE TEXT
END303I  EQU   *                          * END OF MESSAGE *
* *
* *
IEA304W  DS    0H                         ALIGN MESSAGE HEADER
         IEAPMNIP  TYPE=HEADER,MSGST=IEA304W,MSGEND=END304W
         DC    CL15'IEA304W SYSTEM '      MESSAGE TEXT
         DC    CL18'WAIT STATE - CODE '   MESSAGE TEXT
CODE304W DS    CL8'        '              WAIT STATE CODE
END304W  EQU   *                          * END OF MESSAGE *
* *
* *
IEA306I  DS    0H                         ALIGN MESSAGE HEADER
         IEAPMNIP  TYPE=HEADER,MSGST=IEA306I,MSGEND=END306I
         DC    CL8'IEA306I '              MESSAGE TEXT
ADR306I  DS    CL3'   '                   UNIT ADDRESS
         DC    CL13', I/O ERROR, '        MESSAGE TEXT
CM306I   DS    CL2'  '                    COMMAND CODE
         DC    C','                       MESSAGE TEXT
STA306I  DS    CL4'    '                  STATUS FLAGS
         DC    C','                       MESSAGE TEXT
VRB306I  DS    CL11'           '          SENSE BITS,VOLID
END306I  EQU   *                          * END OF MESSAGE *
IEA101A  DS    0F                         MESSAGE IEA101A
         IEAPMNIP TYPE=HEADER,MSGST=IEA101A,MSGEND=MSG1END
MSG1ST   DC    CL23'IEA101A SPECIFY SYSTEM ' MESSAGE TEXT
         DC    CL23'PARAMETERS FOR RELEASE ' MESSAGE TEXT
RELNO1   DS    CL2                        SYSTEM RELEASE NUMBER
         DC    C'.'                       MESSAGE TEXT
RELNO2   DS    CL2                        RELEASE LEVEL NUMBER
         DC    CL4'.VS2'                  MESSAGE TEXT         @YM08603
MSG1END  EQU   *                          END OF MESSAGE
IEA344I  DS    0F                         MESSAGE IEA344I
         IEAPMNIP TYPE=HEADER,MSGST=IEA344I,MSGEND=M344IEND
         DC    CL31'IEA344I LPA QUICK START FAILED;'
         DC    CL21' COLD START INITIATED'
M344IEND EQU   *
IEA116A  DS    0F                         MESSAGE IEA116A
         IEAPMNIP TYPE=HEADER,MSGST=IEA116A,MSGEND=MSG2END
MSG2ST   DC    CL17'IEA116A CONTINUE '    MESSAGE TEXT
         DC    CL17'SYSTEM PARAMETERS'    MESSAGE TEXT
MSG2END  EQU   *                          END OF MESSAGE
IEA340I  DS    0F                         MESSAGE IEA340I
         IEAPMNIP TYPE=HEADER,MSGST=IEA340I,MSGEND=END340I
         DC    CL24'IEA340I REAL OR VIRTUAL ' MESSAGE TEXT
         DC    CL29'STORAGE NOT AVAILABLE FOR PFT' MESSAGE TEXT
END340I  EQU   *
LIST1    DS    0F                         PARM LIST FOR IEA101A
         IEAPMNIP TYPE=PLIST,MSGST=IEA101A,RMSGST=SQARBUF,ASYNCH=YES
LIST2    DS    0F                         PARM LIST FOR IEA116A
         IEAPMNIP TYPE=PLIST,MSGST=IEA116A,RMSGST=SQARBUF,ASYNCH=YES
         DS    0F
LIBOPL   IEAPMNIP TYPE=OPENPL
         DS    0F
NPMSCHDL IEAPMNIP TYPE=SCHEDL,ADDR=NIPTTOD  GENERATE NIPSCHED PARM LIST
NPMSVC60 DS    0H                       NIP SVC60 (ESTAE) TRAP
         SR    15,15                    SET RETURN CODE 0
         BR    14                       RETURN TO CALLER
IEAVNIPM CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RBASE    EQU   @10
RBASE1   EQU   @11
RBASE2   EQU   @12
RZERO    EQU   @00
RPARM    EQU   @01
RPRM1    EQU   @01
RINDX1   EQU   @01
RNIPM    EQU   @04
TCBPTR   EQU   @04
UCBPTR   EQU   @04
RUCB     EQU   @04
PFTEPTR2 EQU   @04
PFTEPTR  EQU   @05
RCS1     EQU   @04
RCS3     EQU   @05
RDCB     EQU   @05
RIOB     EQU   @05
RWRK1    EQU   @06
RPFTAR   EQU   @07
RWRK4    EQU   @07
NAMEPTR  EQU   @09
ENTPT6   EQU   @06
REVEN    EQU   @08
RODD     EQU   @09
RSAVE    EQU   @13
REG15    EQU   @15
DEBPTR   EQU   @04
DEBDAPTR EQU   @04
DEBEXPTR EQU   @04
DEBSBPTR EQU   @04
IOBPRPTR EQU   @05
IOBSTPTR EQU   @05
RBSECPTR EQU   @05
REG4     EQU   @04
REG5     EQU   @05
REG6     EQU   @06
REG7     EQU   @07
RNVT     EQU   @02
RCVT     EQU   @03
REXIT    EQU   @14
RENTRY   EQU   @15
DCBPTR   EQU   @07
SCANPTR  EQU   @04
UCBDCPTR EQU   @04
CVTPTR   EQU   16
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBASID EQU   ASCB+36
ASCBLDA  EQU   ASCB+48
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBNVSC EQU   ASCB+122
ASCBLKGP EQU   ASCB+128
ASCBFMCT EQU   ASCB+152
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
ASMVT    EQU   0
ASMFLAG1 EQU   ASMVT
ASMFLAG2 EQU   ASMVT+1
ASMSTAGQ EQU   ASMVT+32
ASMPCCWQ EQU   ASMVT+64
ASMNVSC  EQU   ASMVT+120
ASMLSAI  EQU   ASMVT+144
ASMGOSQS EQU   ASMVT+152
ASMWKSA1 EQU   ASMVT+368
ASMWKSA2 EQU   ASMVT+448
ASMWKSA3 EQU   ASMVT+528
ASMWKSA4 EQU   ASMVT+608
ASMWKSA5 EQU   ASMVT+688
ASMPOOLS EQU   0
ASMCPAVQ EQU   ASMPOOLS+8
ASMCPRSQ EQU   ASMPOOLS+16
CDENTRY  EQU   0
CDATTR   EQU   CDENTRY+28
CDATTR2  EQU   CDENTRY+29
CVTMAP   EQU   0
CVT      EQU   CVTMAP
CVTLINK  EQU   CVTMAP+8
CVTXAPG  EQU   CVTMAP+20
CVTILK1  EQU   CVTMAP+36
CVTILK2  EQU   CVTMAP+40
CVTSYSAD EQU   CVTMAP+48
CVTBTERM EQU   CVTMAP+52
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTSVDCB EQU   CVTMAP+84
CVTDCB   EQU   CVTMAP+116
CVTDCBA  EQU   CVTMAP+117
CVTIOQET EQU   CVTMAP+120
CVTIXAVL EQU   CVTMAP+124
CVTNUCB  EQU   CVTMAP+128
CVTILCH  EQU   CVTMAP+140
CVTIERLC EQU   CVTMAP+144
CVT0PT01 EQU   CVTMAP+152
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTQLPAQ EQU   CVTMAP+188
CVTABEND EQU   CVTMAP+200
CVTRMS   EQU   CVTMAP+224
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTEORM  EQU   CVTMAP+312
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
CVTNUMB  EQU   CVTRELNO
CVTLEVL  EQU   CVTRELNO+2
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBAPFIN EQU   DEBFLGS1
DEBUSRPG EQU   DEBBASIC+16
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBAPPAD EQU   DEBBASIC+28
DEBAPPB  EQU   DEBAPPAD+1
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
ECB      EQU   0
ECBRB    EQU   ECB
ECBEVTB  EQU   ECBRB
ECBEXTB  EQU   ECBEVTB
ECBCC    EQU   ECBEXTB
ECBCCCNT EQU   ECBEXTB+1
ECBRBA   EQU   ECBCCCNT
ECBEVTBA EQU   ECBRBA
ECBEXTBA EQU   ECBEVTBA
ECBBYTE3 EQU   ECBEXTBA+2
ECBEXTND EQU   ECBBYTE3
FBQESECT EQU   0
FWDPTR   EQU   FBQESECT
BCKPTR   EQU   FBQESECT+4
SIZE     EQU   FBQESECT+8
FBQAREA  EQU   FBQESECT+12
GDA      EQU   0
GVSMFLAG EQU   GDA
GDAFLAGS EQU   GVSMFLAG
NIPFOURK EQU   GDAFLAGS
PASTRT   EQU   GDA+16
PASIZE   EQU   GDA+20
VRPOSTQ  EQU   GDA+32
VRWAITQ  EQU   GDA+40
IOBPREFX EQU   0
IOBCFLG1 EQU   IOBPREFX
IOBSTDRD EQU   0
IOBFLAG1 EQU   IOBSTDRD
IOBCYCCK EQU   IOBFLAG1
IOBRSTRT EQU   IOBFLAG1
IOBFLAG2 EQU   IOBSTDRD+1
IOBPURGE EQU   IOBFLAG2
IOBRDHA0 EQU   IOBFLAG2
IOBSENS0 EQU   IOBSTDRD+2
IOBS0B7  EQU   IOBSENS0
IOBSENS1 EQU   IOBSTDRD+3
IOBECBPT EQU   IOBSTDRD+4
IOBFLAG3 EQU   IOBSTDRD+8
IOBFL3   EQU   IOBFLAG3
IOBCNC   EQU   IOBFL3
IOBICL   EQU   IOBFL3
IOBCSW   EQU   IOBSTDRD+9
IOBIOCSW EQU   IOBCSW
IOBSTBYT EQU   IOBIOCSW+3
IOBUSTAT EQU   IOBSTBYT
IOBCSTAT EQU   IOBSTBYT+1
IOBSTART EQU   IOBSTDRD+16
IOBDCBPT EQU   IOBSTDRD+20
IOBFLAG4 EQU   IOBDCBPT
IOBRESTR EQU   IOBSTDRD+24
IOBINCAM EQU   IOBSTDRD+28
IOBBTAMF EQU   IOBINCAM
IOCOM    EQU   0
IOCOMEX  EQU   IOCOM+64
IOCUCBBM EQU   IOCOM+120
IOCX     EQU   0
IOX      EQU   IOCX
IOXHICH  EQU   IOCX+4
LCH      EQU   0
LCHENTRY EQU   LCH
LCHTCH   EQU   LCH+16
LCHFLA   EQU   LCH+21
LDA      EQU   0
LVSMFLAG EQU   LDA
ASDPQE   EQU   LDA+8
CURRGNTP EQU   LDA+1472
LRB      EQU   0
LRBHTYPE EQU   LRB
LRBHREL  EQU   LRB+1
LRBHSYS  EQU   LRBHREL
LRBHSW0  EQU   LRB+2
LRBHSW1  EQU   LRB+3
LRBHSW2  EQU   LRB+4
LRBMACT  EQU   LRBHSW2
LRBHSW3  EQU   LRB+5
LRBHCPID EQU   LRB+16
LRBBASE  EQU   LRB+24
LRBCVAR  EQU   0
LRBCMP   EQU   LRBCVAR+8
PCCA     EQU   0
PCCACPUA EQU   PCCA+16
PCCAPSAV EQU   PCCA+24
PCCATMST EQU   PCCA+128
PCCATMFL EQU   PCCATMST
PCCATODE EQU   PCCATMST+1
PCCACCE  EQU   PCCATMST+2
PCCAINTE EQU   PCCATMST+3
PCCAEMSB EQU   PCCA+136
PCCAEMSI EQU   PCCAEMSB
PCCARISP EQU   PCCAEMSI
PCCAEMS2 EQU   PCCAEMSI+1
PCCAEMS3 EQU   PCCAEMSI+2
PCCARMSB EQU   PCCAEMSI+3
PCCAWERP EQU   PCCA+280
PCCACHPF EQU   PCCAWERP+4
PCCACHBL EQU   PCCAWERP+5
PCCACHVA EQU   PCCAWERP+6
PCCACHTS EQU   PCCAWERP+7
PCCACHS1 EQU   PCCA+288
PCCACHS2 EQU   PCCA+289
PCCACHRB EQU   PCCA+290
PCCACHF1 EQU   PCCA+308
PCCACHF2 EQU   PCCA+309
PCCACHF3 EQU   PCCA+310
PCCACHF4 EQU   PCCA+311
PCCAATTR EQU   PCCA+376
PCCAVT   EQU   0
PCCAT00P EQU   PCCAVT
PFTE     EQU   0
PFTPGID  EQU   PFTE
PFTASID  EQU   PFTPGID
PFTVBN   EQU   PFTPGID+2
PFTQPTRS EQU   PFTE+4
PFTFQPTR EQU   PFTQPTRS
PFTBQPTR EQU   PFTQPTRS+2
PFTFLAG1 EQU   PFTE+12
PFTONAVQ EQU   PFTFLAG1
PFTVRALC EQU   PFTFLAG1
PFTFLAG2 EQU   PFTE+13
PFTOFFLN EQU   PFTFLAG2
PFTPREF  EQU   PFTFLAG2
PFTQNDX  EQU   PFTE+14
NWTOHDR  EQU   0
NWTOFL   EQU   NWTOHDR+2
NWTORLST EQU   0
NWTORFL  EQU   NWTORLST+10
NIPSPE   EQU   0
NIPSPEQ  EQU   NIPSPE
NIPSPEA  EQU   NIPSPE+4
NIPMNTPL EQU   0
NMNTDS   EQU   NIPMNTPL
NMNTVS   EQU   NIPMNTPL+12
NMNTFL   EQU   NIPMNTPL+20
NIPOPNPL EQU   0
NOPNDS   EQU   NIPOPNPL
NOPNDCB  EQU   NIPOPNPL+12
NOPNUCB  EQU   NIPOPNPL+16
NOPNFL   EQU   NIPOPNPL+20
NIPSCHDL EQU   0
NSCHDPTR EQU   NIPSCHDL
NSCHDPRM EQU   NIPSCHDL+4
NSCHDCPU EQU   NIPSCHDL+8
NIPPAHDR EQU   0
NIPPAREA EQU   0
NIPPABDL EQU   NIPPAREA+12
NIPPABDH EQU   NIPPABDL
NIPPAIOD EQU   NIPPAREA+32
NIPPAECB EQU   NIPPAIOD+84
PARMTAB  EQU   0
CLPA     EQU   PARMTAB+40
CVIO     EQU   PARMTAB+80
@NM00124 EQU   PARMTAB+272
NIPPAFLG EQU   @NM00124
NIPPAFL1 EQU   NIPPAFLG
NIPPTE   EQU   0
NIPPTOPF EQU   NIPPTE+4
NIPPTATF EQU   NIPPTE+5
PQESECT  EQU   0
PQEFFBQE EQU   PQESECT
PQEBFBQE EQU   PQESECT+4
PQEFPQE  EQU   PQESECT+8
PQEBPQE  EQU   PQESECT+12
PQETCB   EQU   PQESECT+16
PQESIZE  EQU   PQESECT+20
PQEREGN  EQU   PQESECT+24
VMMFLGS  EQU   PQESECT+30
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
FLCMNPSW EQU   PSA+112
PSAEEPSW EQU   PSA+132
PSASPAD  EQU   PSAEEPSW
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSACPULA EQU   PSA+518
PSAPCCAV EQU   PSA+520
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
PVT      EQU   0
PVTFLAG1 EQU   PVT
PVTAFC   EQU   PVT+2
PVTAFCOK EQU   PVT+6
PVTPOOL  EQU   PVT+8
PVTPFTP  EQU   PVT+12
PVTFPFN  EQU   PVT+16
PVTLPFN  EQU   PVT+18
PVTFVR   EQU   PVT+20
PVTLVR   EQU   PVT+22
PVTLPRIV EQU   PVT+24
PVTLCSA  EQU   PVT+26
PVTRSUS  EQU   PVT+44
PVTLQSA  EQU   PVT+60
PVTHQSA  EQU   PVT+62
PVTPSQA  EQU   PVT+80
PVTCFMCT EQU   PVT+300
PVTQS    EQU   PVT+304
PVTAFQF  EQU   PVTQS
PVTAFQL  EQU   PVTQS+2
PVTRSRVF EQU   PVTQS+4
PVTRSRVL EQU   PVTQS+6
PVTWSAX  EQU   PVT+344
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
XRBPSW   EQU   RBOPSW
RBOPSWB2 EQU   XRBPSW+1
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
RBPREFIX EQU   0
RBRSV019 EQU   RBPREFIX+14
RBRSV028 EQU   RBPREFIX+15
RBRSV041 EQU   RBPREFIX+27
RBRSV054 EQU   RBPREFIX+39
RBRTOPSW EQU   RBPREFIX+40
RBRTPSW2 EQU   RBRTOPSW+8
RBRTICIL EQU   RBRTPSW2
RBFLAGS1 EQU   RBPREFIX+56
RBINTCDA EQU   RBPREFIX+61
RBINTCOD EQU   RBINTCDA+1
RBSECT   EQU   0
RBPPSAV  EQU   RBSECT
@NM00169 EQU   RBSECT+10
@NM00170 EQU   @NM00169
RBTRSVRB EQU   @NM00170
@NM00172 EQU   @NM00169+1
RBETXR   EQU   @NM00172
RBEP     EQU   RBSECT+12
RBPGMQ   EQU   RBSECT+24
@NM00179 EQU   RBSECT+28
@NM00180 EQU   @NM00179
IRBEND   EQU   RBSECT+96
@NM00183 EQU   RBSECT+96
RBRSV138 EQU   @NM00183+7
RBSCBB   EQU   RBSECT+144
RBSPARM  EQU   RBSCBB+8
RBSFLGS1 EQU   RBSPARM
RBSIOPRC EQU   RBSFLGS1
RBSOWNR  EQU   RBSCBB+12
RBSFLGS2 EQU   RBSOWNR
RBSDATA  EQU   RBSCBB+16
RBSFLG3  EQU   RBSDATA
RBRSV150 EQU   RBSECT+167
RSMHD    EQU   0
RSMFLG1  EQU   RSMHD+12
RSMQS    EQU   RSMHD+20
RSMLFQ   EQU   RSMQS
RSMLSQA  EQU   RSMQS+4
RSMLIOQ  EQU   RSMQS+8
RTMBRTAB EQU   0
RTMBTERM EQU   RTMBRTAB
RTMBMACH EQU   RTMBRTAB+16
RVT      EQU   0
RVTPTERM EQU   RVT+36
SCVTSECT EQU   0
SCVTSVCT EQU   SCVTSECT+132
SRBSECT  EQU   0
SRB      EQU   SRBSECT
SRBID    EQU   SRB
SRBFLNK  EQU   SRB+4
SRBASCB  EQU   SRB+8
SRBFLC   EQU   SRB+12
SRBCPAFF EQU   SRBFLC
SRBEP    EQU   SRB+20
SRBPARM  EQU   SRB+28
SRBPRIOR EQU   SRB+37
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBLLS   EQU   TCB+36
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBPQE   EQU   TCB+152
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBRV    EQU   TCBFLGS6
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBLCI   EQU   UCBOB+10
UCBWGT   EQU   UCBOB+12
UCBNAME  EQU   UCBOB+13
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00222 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
DUMMYDCB EQU   0
DCBDEBAD EQU   DUMMYDCB+45
PFT      EQU   0
@NM00231 EQU   0
NPMCADDR EQU   @NM00231+4
@NM00242 EQU   0
NPFTCHB  EQU   @NM00242
NPFTCHE  EQU   @NM00242+4
NPFTCHA  EQU   @NM00242+8
NPFTCHT  EQU   @NM00242+12
P        EQU   0
OPREPLY1 EQU   0
FTCHADCN EQU   0
INVT     EQU   0
ABEND    EQU   104
NPLOCENT EQU   208
SVC60AD  EQU   480
XCTLEP   EQU   56
XCTLADDR EQU   XCTLEP
SVCENTRY EQU   0
SVCAD    EQU   SVCENTRY
SVCTYPE  EQU   SVCENTRY+4
STORMAP  EQU   0
STORMAP1 EQU   STORMAP
NIPSGPSA EQU   0
PFT1     EQU   0
NP0MSGS  EQU   0
MODNAME  EQU   0
MFAADDR  EQU   0
IEAQLPAQ EQU   0
MODADDR  EQU   0
NCPUADDR EQU   0
SRCHNAME EQU   0
UCBBGN   EQU   0
CVTS01   EQU   CVTPGSIA
CVTPVTP  EQU   CVTS01+8
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTOPTE  EQU   CVTS01+188
CVTGDA   EQU   CVTS01+212
CVTSV60  EQU   CVTS01+228
CVTLSMQ  EQU   CVTS01+268
CVTASMVT EQU   CVTS01+356
CVTFETCH EQU   CVTS01+372
CVTPCCAT EQU   CVTS01+416
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTVPSA  EQU   CVTS01+560
CVTGSDA  EQU   CVTS01+600
ASMVTPTR EQU   CVTASMVT
ASM1WKSV EQU   ASMWKSA1
ASM1RGSV EQU   ASM1WKSV
ASM1WRKA EQU   ASM1WKSV+60
ASM2WKSV EQU   ASMWKSA2
ASM2WRKA EQU   ASM2WKSV+52
ASM2FLGS EQU   ASM2WRKA+12
ASM3WKSV EQU   ASMWKSA3
ASM4WKSV EQU   ASMWKSA4
ASM4RGSV EQU   ASM4WKSV
ASM5WKSV EQU   ASMWKSA5
ASM5RGSV EQU   ASM5WKSV
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBSUCBB EQU   DEBSUCBA+1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
IOBORG01 EQU   IOBPREFX+8
IOBNIOBA EQU   IOBORG01
IOBNFLG1 EQU   IOBNIOBA
IOBPRTOV EQU   IOBNFLG1
IOBORG02 EQU   IOBPREFX+8
IOBDQADA EQU   IOBORG02
IOBDEQIN EQU   IOBDQADA
IOBORG03 EQU   IOBPREFX+12
IOBORG04 EQU   IOBINCAM
IOBORG12 EQU   IOBINCAM
IOBFL4   EQU   IOBORG12
IOBEXTEN EQU   IOBSTDRD+32
IOBSEEK  EQU   IOBEXTEN
IOBBB    EQU   IOBSEEK+1
IOBCC    EQU   IOBSEEK+3
IOBHH    EQU   IOBSEEK+5
IOBORG05 EQU   IOBEXTEN
IOBORG06 EQU   IOBEXTEN
IOBNXTPT EQU   IOBORG06+4
IOBSTATA EQU   IOBNXTPT
IOBORG07 EQU   IOBEXTEN+8
W1IEXTEN EQU   IOBORG07
IOBORG08 EQU   IOBEXTEN+8
IOBINDCT EQU   IOBORG08+4
IOBUNSQR EQU   IOBORG08+5
IOBFCHAD EQU   IOBORG08+8
IOBORG09 EQU   IOBEXTEN+8
IOBDPLAD EQU   IOBORG09+4
IOBDTYPE EQU   IOBORG09+8
IOBDTYP2 EQU   IOBORG09+9
IOBDSTAT EQU   IOBORG09+10
IOBSTAT1 EQU   IOBDSTAT
IOBORG10 EQU   IOBEXTEN+8
IOBSEEK2 EQU   IOBORG10
IOBORG11 EQU   IOBEXTEN
IOBERCT  EQU   IOBORG11
IOBUCBXV EQU   IOBERCT
IOBNAME  EQU   IOBORG11+4
IOBORG13 EQU   IOBEXTEN
IOBSKADR EQU   IOBORG13
LRBHRSW1 EQU   LRBHSW1
LRBHCSW1 EQU   LRBHSW1
LRBHMSW1 EQU   LRBHSW1
LRBMMCH  EQU   LRBBASE
LRBMCEIA EQU   LRBMMCH+8
LRBMTERM EQU   LRBMCEIA
LRBMHARD EQU   LRBMCEIA+1
LRBMINTM EQU   LRBMCEIA+2
LRBMSOFT EQU   LRBMCEIA+3
LRBMPDAR EQU   LRBMMCH+12
LRBMRSR1 EQU   LRBMMCH+13
LRBMRSR2 EQU   LRBMMCH+14
LRBMFLO  EQU   LRBMMCH+24
LRBMCIC  EQU   LRBMFLO
@NM00038 EQU   LRBMCIC
@NM00040 EQU   LRBMCIC+1
@NM00042 EQU   LRBMCIC+2
@NM00044 EQU   LRBMCIC+3
@NM00047 EQU   LRBMCIC+5
LRBRDDR  EQU   LRBBASE
LRBCCCH  EQU   LRBBASE
LRBCCUA  EQU   LRBCCCH+49
LRBDMDR  EQU   LRBBASE
LRBNMIH  EQU   LRBBASE
LRBTTER  EQU   LRBBASE
LRBTLNH  EQU   LRBTTER
LRBTWSC  EQU   LRBTTER+4
NIPDCBSN EQU   NPBNOFLG
FLC      EQU   PSA
PSARSVTE EQU   PSARSVT
RBSECS03 EQU   RBEP
RBCDE    EQU   RBSECS03
RBCDFLGS EQU   RBCDE
RBSECS05 EQU   RBPGMQ
RBSQE    EQU   RBSECS05
RBSECS06 EQU   RBPGMQ
RBIQE    EQU   RBSECS06
RBSECS07 EQU   RBPGMQ
RBIQE2   EQU   RBSECS07
RBSECS08 EQU   IRBEND
RBSECS09 EQU   IRBEND
UCBOBS01 EQU   UCBDEV
UCBVOLI  EQU   UCBOBS01+4
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00221 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
NCSWMAP  EQU   IOBCSW
IOBCSWCA EQU   NCSWMAP
IOBCSWST EQU   NCSWMAP+3
IOBCSWUC EQU   IOBCSWST
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
IOBCSWCT EQU   NCSWMAP+5
@NM00226 EQU   IOBCSWST+1
IOBCSWUE EQU   IOBCSWST
@NM00225 EQU   IOBCSWST
IOBCSWCE EQU   IOBCSWST
@NM00224 EQU   IOBCSWST
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00221
UCBSKPFG EQU   @NM00221
UCBRIPND EQU   @NM00221
UCBRTIAC EQU   @NM00221
UCBRSV79 EQU   @NM00221
UCBRSV78 EQU   @NM00221
UCBRSV77 EQU   @NM00221
UCBOLTEP EQU   @NM00221
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBRV038 EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00220 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVTOC  EQU   UCBOBS01
RBRSV161 EQU   RBSECS09+64
RBSIRBWA EQU   RBSECS09
RBIQEWRK EQU   RBSECS08+4
RBNEXAV  EQU   RBSECS08
RBIQEA   EQU   RBIQE2
RBIQE1   EQU   RBIQE+1
RBUSE    EQU   RBIQE
RBSQEA   EQU   RBSQE+1
@NM00184 EQU   RBSQE
RBCDE1   EQU   RBCDE+1
RBCDLOAD EQU   RBCDFLGS
RBCDXCTL EQU   RBCDFLGS
RBCDSYNC EQU   RBCDFLGS
RBCDNODE EQU   RBCDFLGS
RBRSV010 EQU   RBCDFLGS
RBCDATCH EQU   RBCDFLGS
RBRSV009 EQU   RBCDFLGS
RBNOCELL EQU   RBCDFLGS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
NPBNDCB  EQU   NIPDCBSN
LRBTUSR  EQU   LRBTTER+8
LRBNINT  EQU   LRBNMIH+24
LRBNDEVT EQU   LRBNMIH+20
LRBNVOL  EQU   LRBNMIH+14
LRBNCUA1 EQU   LRBNMIH+11
LRBNCUA2 EQU   LRBNMIH+8
LRBNJOB  EQU   LRBNMIH
LRBDSENS EQU   LRBDMDR+8
LRBDVOL  EQU   LRBDMDR+2
LRBDCUA1 EQU   LRBDMDR
LRBCCLOG EQU   LRBCCCH+56
LRBCLOGL EQU   LRBCCCH+54
LRBCHCUA EQU   LRBCCCH+52
LRBCCUA2 EQU   LRBCCUA+1
@NM00051 EQU   LRBCCUA
LRBCCHID EQU   LRBCCCH+48
LRBCDEVT EQU   LRBCCCH+44
LRBCECSW EQU   LRBCCCH+40
LRBCFCSW EQU   LRBCCCH+32
LRBCFCCW EQU   LRBCCCH+24
LRBCAIO  EQU   LRBCCCH+8
LRBCJOB  EQU   LRBCCCH
LRBRDEV2 EQU   LRBRDDR+32
LRBRCUA2 EQU   LRBRDDR+29
LRBRPH2  EQU   LRBRDDR+28
LRBRDEV1 EQU   LRBRDDR+24
LRBRCUA1 EQU   LRBRDDR+21
LRBRPH1  EQU   LRBRDDR+20
LRBRVOL2 EQU   LRBRDDR+14
LRBRVOL1 EQU   LRBRDDR+8
LRBRJOB  EQU   LRBRDDR
LRBMCEL  EQU   LRBMMCH+304
@NM00050 EQU   LRBMFLO+20
LRBMFSA  EQU   LRBMFLO+16
@NM00049 EQU   LRBMFLO+8
LRBMCELL EQU   LRBMCIC+6
LRBMVCC  EQU   @NM00047
LRBMVPT  EQU   @NM00047
@NM00048 EQU   @NM00047
@NM00046 EQU   LRBMCIC+4
LRBMVST  EQU   @NM00044
LRBMVLG  EQU   @NM00044
LRBMVCR  EQU   @NM00044
LRBMVGR  EQU   @NM00044
LRBMVFP  EQU   @NM00044
@NM00045 EQU   @NM00044
LRBMVRC  EQU   @NM00044
LRBMVFA  EQU   @NM00044
LRBMVIA  EQU   @NM00042
LRBMVPM  EQU   @NM00042
LRBMVMS  EQU   @NM00042
LRBMVWP  EQU   @NM00042
@NM00043 EQU   @NM00042
LRBMFKE  EQU   @NM00042
LRBMFSC  EQU   @NM00042
LRBMFSE  EQU   @NM00042
LRBMIDY  EQU   @NM00040
LRBMIBU  EQU   @NM00040
@NM00041 EQU   @NM00040
LRBMFWN  EQU   @NM00040
LRBMFDG  EQU   @NM00038
@NM00039 EQU   @NM00038
LRBMFED  EQU   @NM00038
LRBMFCD  EQU   @NM00038
LRBMFTD  EQU   @NM00038
LRBMFSR  EQU   @NM00038
LRBMFPD  EQU   @NM00038
LRBMFSD  EQU   @NM00038
LRBMMOSW EQU   LRBMMCH+16
LRBMPWL  EQU   LRBMMCH+15
LRBMVEQR EQU   LRBMRSR2
LRBMPGFX EQU   LRBMRSR2
LRBMLSQA EQU   LRBMRSR2
LRBMFSQA EQU   LRBMRSR2
LRBMNUCL EQU   LRBMRSR2
LRBMSPER EQU   LRBMRSR2
LRBMINTC EQU   LRBMRSR2
LRBMOFLN EQU   LRBMRSR2
LRBMCHNG EQU   LRBMRSR1
LRBMSER  EQU   LRBMRSR1
@NM00037 EQU   LRBMRSR1
@NM00036 EQU   LRBMPDAR
LRBMRSRF EQU   LRBMPDAR
LRBMRSRC EQU   LRBMPDAR
LRBMINVP EQU   LRBMPDAR
@NM00035 EQU   LRBMPDAR
LRBMSBUF EQU   LRBMSOFT
LRBMSHIR EQU   LRBMSOFT
LRBMSECC EQU   LRBMSOFT
LRBMSEXD EQU   LRBMSOFT
@NM00034 EQU   LRBMSOFT
LRBMSSFT EQU   LRBMSOFT
LRBMIL80 EQU   LRBMINTM
LRBMICTM EQU   LRBMINTM
LRBMICKC EQU   LRBMINTM
LRBMITOD EQU   LRBMINTM
@NM00033 EQU   LRBMINTM
LRBMHIPD EQU   LRBMHARD
LRBMHSPF EQU   LRBMHARD
LRBMHSTO EQU   LRBMHARD
LRBMHINV EQU   LRBMHARD
LRBMHSD  EQU   LRBMHARD
@NM00032 EQU   LRBMHARD
LRBMHHRD EQU   LRBMHARD
LRBMTINV EQU   LRBMTERM
LRBMTDMG EQU   LRBMTERM
LRBMTWRN EQU   LRBMTERM
LRBMTCKS EQU   LRBMTERM
LRBMTSEC EQU   LRBMTERM
LRBMTTHR EQU   LRBMTERM
@NM00031 EQU   LRBMTERM
LRBMWSC  EQU   LRBMMCH+4
LRBMLNH  EQU   LRBMMCH
@NM00030 EQU   LRBHMSW1
LRBMSYST EQU   LRBHMSW1
@NM00029 EQU   LRBHMSW1
@NM00028 EQU   LRBHCSW1
LRBCERPP EQU   LRBHCSW1
LRBCDATA EQU   LRBHCSW1
LRBCICUA EQU   LRBHCSW1
LRBCNOSP EQU   LRBHCSW1
@NM00027 EQU   LRBHCSW1
LRBCINCO EQU   LRBHCSW1
LRBCMESG EQU   LRBHCSW1
@NM00026 EQU   LRBHRSW1
LRBRSYSI EQU   LRBHRSW1
LRBROPER EQU   LRBHRSW1
LRBRSEC  EQU   LRBHRSW1
LRBRPRIM EQU   LRBHRSW1
IOBSKSS  EQU   IOBSKADR+3
IOBSK0   EQU   IOBSKADR+2
IOBSKTT  EQU   IOBSKADR+1
IOBSKRV  EQU   IOBSKADR
IOBCSWSV EQU   IOBORG11+17
IOBSENSV EQU   IOBORG11+16
IOBRCD   EQU   IOBORG11+12
IOBMDREC EQU   IOBORG11+8
IOBNAMEA EQU   IOBNAME+1
IOBNAMSZ EQU   IOBNAME
IOBERCTA EQU   IOBERCT+1
IOBRTYPE EQU   IOBUCBXV
IOBRDCHP EQU   IOBORG10+20
IOBNEXTA EQU   IOBORG10+16
IOBREADA EQU   IOBORG10+12
IOBBUFC  EQU   IOBORG10+8
IOBSK2R  EQU   IOBSEEK2+7
IOBSK2HH EQU   IOBSEEK2+5
IOBSK2CC EQU   IOBSEEK2+3
IOBSK2BB EQU   IOBSEEK2+1
IOBSK2M  EQU   IOBSEEK2
IOBCHNPR EQU   IOBORG09+40
IOBDNCRF EQU   IOBORG09+32
IOBRSV35 EQU   IOBORG09+24
IOBDQPTR EQU   IOBORG09+20
IOBRSV34 EQU   IOBORG09+18
IOBDBYTN EQU   IOBORG09+16
IOBDCPND EQU   IOBORG09+12
IOBSTAT2 EQU   IOBDSTAT+1
IOBSIORT EQU   IOBSTAT1
IOBADDVU EQU   IOBSTAT1
IOBBUFF  EQU   IOBSTAT1
IOBENQUE EQU   IOBSTAT1
IOBPASS2 EQU   IOBSTAT1
IOBSYNCH EQU   IOBSTAT1
IOBNEWVL EQU   IOBSTAT1
IOBABNRM EQU   IOBSTAT1
IOBRELEX EQU   IOBDTYP2
IOBADDTY EQU   IOBDTYP2
IOBTYPE  EQU   IOBDTYP2
IOBRQUST EQU   IOBDTYP2
IOBSUFFX EQU   IOBDTYP2
IOBSBLKL EQU   IOBDTYP2
IOBSKEY  EQU   IOBDTYP2
IOBRELBL EQU   IOBDTYPE
IOBRDEXC EQU   IOBDTYPE
IOBDYNBF EQU   IOBDTYPE
IOBACTAD EQU   IOBDTYPE
IOBFDBCK EQU   IOBDTYPE
IOBEXTSC EQU   IOBDTYPE
IOBOVFLO EQU   IOBDTYPE
IOBVERFY EQU   IOBDTYPE
IOBDPLB  EQU   IOBDPLAD+1
IOBDAYLI EQU   IOBDPLAD
IOBDIOBS EQU   IOBORG09+2
IOBDBYTR EQU   IOBORG09
IOBBCHAD EQU   IOBORG08+12
IOBFCHNB EQU   IOBFCHAD+1
IOBCOUNT EQU   IOBFCHAD
IOBASYN  EQU   IOBORG08+7
IOBAPP   EQU   IOBORG08+6
IOBRSV32 EQU   IOBUNSQR
IOBRSV31 EQU   IOBUNSQR
IOBRSV30 EQU   IOBUNSQR
IOBKNRWR EQU   IOBUNSQR
IOBKNWR  EQU   IOBUNSQR
IOBNTAV2 EQU   IOBUNSQR
IOBNTAV1 EQU   IOBUNSQR
IOBCPBSY EQU   IOBUNSQR
IOBCHNNL EQU   IOBINDCT
IOBRSV29 EQU   IOBINDCT
IOBRSV28 EQU   IOBINDCT
IOBRSV27 EQU   IOBINDCT
IOBKEYAD EQU   IOBINDCT
IOBOVPTR EQU   IOBINDCT
IOBUNSCH EQU   IOBINDCT
IOBDEQCP EQU   IOBINDCT
IOBCCWAD EQU   IOBORG08
W1OEXTEN EQU   W1IEXTEN
IOBCCW   EQU   IOBORG06+8
IOBNXTPB EQU   IOBNXTPT+1
IOBRSV26 EQU   IOBSTATA
IOBRSV25 EQU   IOBSTATA
IOBRSV24 EQU   IOBSTATA
IOBRSV23 EQU   IOBSTATA
IOBRSV22 EQU   IOBSTATA
IOBRSV21 EQU   IOBSTATA
IOBRSV20 EQU   IOBSTATA
IOBAVLFL EQU   IOBSTATA
IOBRSV37 EQU   IOBORG06+1
IOBUCBXG EQU   IOBORG06
IOBCPA   EQU   IOBORG05+32
IOBERINF EQU   IOBORG05+16
IOBERCCW EQU   IOBORG05+8
IOBSNDPT EQU   IOBORG05+7
IOBRCVPT EQU   IOBORG05+6
IOBWORK  EQU   IOBORG05+1
IOBUCBX  EQU   IOBORG05
IOBR     EQU   IOBSEEK+7
IOBHH2   EQU   IOBHH+1
IOBHH1   EQU   IOBHH
IOBCC2   EQU   IOBCC+1
IOBCC1   EQU   IOBCC
IOBBB2   EQU   IOBBB+1
IOBBB1   EQU   IOBBB
IOBM     EQU   IOBSEEK
IOBRSV46 EQU   IOBFL4
IOBRSV47 EQU   IOBFL4
IOBENT   EQU   IOBFL4
IOBEQP   EQU   IOBFL4
IOBBUS   EQU   IOBFL4
IOBDCK   EQU   IOBFL4
IOBREJ   EQU   IOBFL4
IOBOVR   EQU   IOBFL4
IOBCRILC EQU   IOBORG04+1
IOBCRDCC EQU   IOBORG04
IOBGQECB EQU   IOBORG03
IOBSWAP  EQU   IOBORG02+4
IOBDQADB EQU   IOBDQADA+1
IOBRSV13 EQU   IOBDEQIN
IOBRSV12 EQU   IOBDEQIN
IOBRSV11 EQU   IOBDEQIN
IOBRSV10 EQU   IOBDEQIN
IOBRSV09 EQU   IOBDEQIN
IOBRSV08 EQU   IOBDEQIN
IOBRSV07 EQU   IOBDEQIN
IOBDEQ   EQU   IOBDEQIN
IOBNECB  EQU   IOBORG01+4
IOBNIOBB EQU   IOBNIOBA+1
IOBFIRST EQU   IOBNFLG1
IOBUPERR EQU   IOBNFLG1
IOBSPAN  EQU   IOBNFLG1
IOBBKSPC EQU   IOBNFLG1
IOBUPDAT EQU   IOBNFLG1
IOBREAD  EQU   IOBNFLG1
IOBWRITE EQU   IOBNFLG1
IOBSEGMT EQU   IOBPRTOV
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSDVM  EQU   DEBSUCBA
ASM5FLGS EQU   ASM5WKSV+64
ASM5AIA  EQU   ASM5WKSV+60
ASM5GCTR EQU   ASM5WKSV+56
ASM5SR14 EQU   ASM5WKSV+52
@NM00004 EQU   ASM5RGSV+4
ASM5RG2  EQU   ASM5RGSV
@NM00003 EQU   ASM4RGSV+4
ASM4RG2  EQU   ASM4RGSV
ASM3SR13 EQU   ASM3WKSV+28
ASM3R14B EQU   ASM3WKSV+24
ASM3R14A EQU   ASM3WKSV+20
ASM3GRPA EQU   ASM3WKSV+16
ASM3TMPA EQU   ASM3WKSV+12
ASM3PIOP EQU   ASM3WKSV+8
ASM3GENQ EQU   ASM3WKSV+4
ASM3SWPQ EQU   ASM3WKSV
ASM2SR14 EQU   ASM2WRKA+16
@NM00002 EQU   ASM2WRKA+13
ASM2WFLG EQU   ASM2FLGS
ASM2RFLG EQU   ASM2FLGS
ASM2DUPQ EQU   ASM2WRKA+8
ASM2CAQ  EQU   ASM2WRKA+4
ASM2PAQ  EQU   ASM2WRKA
ASM2RGSV EQU   ASM2WKSV
ASM1NXTA EQU   ASM1WRKA+4
ASM1ASCB EQU   ASM1WRKA
ASM1RG15 EQU   ASM1RGSV+56
@NM00001 EQU   ASM1RGSV+4
ASM1RG1  EQU   ASM1RGSV
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00253 EQU   STORMAP+1
@NM00252 EQU   SVCENTRY+5
@NM00251 EQU   SVCENTRY+4
@NM00250 EQU   XCTLEP+4
@NM00232 EQU   @NM00231
@NM00223 EQU   DUMMYDCB
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00222
UCBHALI  EQU   @NM00222
UCBRSV09 EQU   @NM00222
UCBRSV08 EQU   @NM00222
UCBRSV07 EQU   @NM00222
UCBRSV06 EQU   @NM00222
UCBRSV05 EQU   @NM00222
UCBRSV04 EQU   @NM00222
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00219 EQU   UCB
@NM00218 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00217 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAWA EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00216 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00215 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
@NM00214 EQU   SRB+40
@NM00213 EQU   SRB+38
SRBPKF   EQU   SRB+36
SRBSAVE  EQU   SRB+32
SRBRMTR  EQU   SRB+24
SRBPTCB  EQU   SRBFLC+4
SRBPASID EQU   SRBFLC+2
@NM00212 EQU   SCVTSECT+180
@NM00211 EQU   SCVTSECT+176
SCVTPIQE EQU   SCVTSECT+172
@NM00210 EQU   SCVTSECT+168
SCVTPTRM EQU   SCVTSECT+164
@NM00209 EQU   SCVTSECT+160
@NM00208 EQU   SCVTSECT+156
SCVTQCBR EQU   SCVTSECT+152
SCVTSTAT EQU   SCVTSECT+148
@NM00207 EQU   SCVTSECT+144
SCVTTQE  EQU   SCVTSECT+140
@NM00206 EQU   SCVTSECT+136
@NM00205 EQU   SCVTSECT+128
@NM00204 EQU   SCVTSECT+124
SCVTRXLQ EQU   SCVTSECT+120
@NM00203 EQU   SCVTSECT+116
SCVTCTCB EQU   SCVTSECT+112
@NM00202 EQU   SCVTSECT+108
@NM00201 EQU   SCVTSECT+104
@NM00200 EQU   SCVTSECT+100
@NM00199 EQU   SCVTSECT+96
SCVTCOMM EQU   SCVTSECT+92
@NM00198 EQU   SCVTSECT+88
@NM00197 EQU   SCVTSECT+84
@NM00196 EQU   SCVTSECT+80
@NM00195 EQU   SCVTSECT+76
@NM00194 EQU   SCVTSECT+72
SCVTGMBR EQU   SCVTSECT+68
SCVTRPTR EQU   SCVTSECT+64
SCVTHSKP EQU   SCVTSECT+60
@NM00193 EQU   SCVTSECT+56
@NM00192 EQU   SCVTSECT+52
SCVTLFRM EQU   SCVTSECT+48
SCVTCDCL EQU   SCVTSECT+44
@NM00191 EQU   SCVTSECT+40
SCVTRACE EQU   SCVTSECT+36
@NM00190 EQU   SCVTSECT+32
SCVTRMBR EQU   SCVTSECT+28
@NM00189 EQU   SCVTSECT+24
@NM00188 EQU   SCVTSECT+20
@NM00187 EQU   SCVTSECT+16
@NM00186 EQU   SCVTSECT+14
SCVTBR14 EQU   SCVTSECT+12
SCVTSPET EQU   SCVTSECT+8
SCVTPGWR EQU   SCVTSECT+4
SCVTPGTM EQU   SCVTSECT
RVTMIH2  EQU   RVT+108
RVTMIH   EQU   RVT+104
RVTCCHCR EQU   RVT+100
RVTCCHDA EQU   RVT+96
RVTMSGLN EQU   RVT+92
RVTMSGPT EQU   RVT+88
RVTLRBPT EQU   RVT+84
RVTRWAPT EQU   RVT+80
RVT01MMM EQU   RVT+76
RVT00MMM EQU   RVT+72
RVTPEXIT EQU   RVT+68
RVTPKREF EQU   RVT+64
RVTPBUCR EQU   RVT+60
RVTPXMFA EQU   RVT+56
RVTPTAIM EQU   RVT+52
RVTPTCON EQU   RVT+48
RVTPTREC EQU   RVT+44
RVTPTSIG EQU   RVT+40
RVTPMKTA EQU   RVT+32
RVTPMMSG EQU   RVT+28
RVTPMTHA EQU   RVT+24
RVTPMPFX EQU   RVT+20
RVTPMSCA EQU   RVT+16
RVTPMHCA EQU   RVT+12
RVTPMFRS EQU   RVT+8
RVTPMRTM EQU   RVT+4
RVTPMCIH EQU   RVT
RTMBXABT EQU   RTMBRTAB+44
RTMBACR  EQU   RTMBRTAB+40
RTMBPROG EQU   RTMBRTAB+36
RTMBMEMT EQU   RTMBRTAB+32
RTMBCABT EQU   RTMBRTAB+28
RTMBPGIO EQU   RTMBRTAB+24
RTMBSVC  EQU   RTMBRTAB+20
RTMBREST EQU   RTMBRTAB+12
RTMBDAT  EQU   RTMBRTAB+8
RTMBPAD2 EQU   RTMBTERM+6
RTMBBRAN EQU   RTMBTERM+2
RTMBBALR EQU   RTMBTERM
RSMASMHD EQU   RSMHD+40
RSMFOEQ  EQU   RSMHD+36
RSMLIOQL EQU   RSMLIOQ+4
RSMLIOQF EQU   RSMLIOQ
RSMLSQAL EQU   RSMLSQA+2
RSMLSQAF EQU   RSMLSQA
RSMLFQL  EQU   RSMLFQ+2
RSMLFQF  EQU   RSMLFQ
RSMRSV2  EQU   RSMHD+16
RSMCNTFX EQU   RSMHD+14
RSMRSV1  EQU   RSMHD+13
@NM00185 EQU   RSMFLG1
RSMFAIL  EQU   RSMFLG1
RSMGFADD EQU   RSMFLG1
RSMCPNC  EQU   RSMFLG1
RSMCPNU  EQU   RSMFLG1
RSMGFAD  EQU   RSMFLG1
RSMIOCPC EQU   RSMFLG1
RSMIOCPU EQU   RSMFLG1
RSMASCB  EQU   RSMHD+8
RSMSPCT  EQU   RSMHD+4
RSMVSTO  EQU   RSMHD
SVRBEND  EQU   RBSECT+192
RBFEPARM EQU   RBSECT+168
SIRBEND  EQU   RBSECT+168
RBRSV158 EQU   RBRSV150
RBRSV157 EQU   RBRSV150
RBRSV156 EQU   RBRSV150
RBRSV155 EQU   RBRSV150
RBRSV154 EQU   RBRSV150
RBRSV153 EQU   RBRSV150
RBRSV152 EQU   RBRSV150
RBRSV151 EQU   RBRSV150
RBRSV149 EQU   RBSECT+166
RBRSV148 EQU   RBSECT+164
RBRSV169 EQU   RBSDATA+3
RBSID    EQU   RBSDATA+2
RBSPKEY  EQU   RBSDATA+1
RBRSV168 EQU   RBSFLG3
RBSTERMO EQU   RBSFLG3
RBSBRNTR EQU   RBSFLG3
RBSPRNTR EQU   RBSFLG3
RBSCNCEL EQU   RBSFLG3
RBSRECRD EQU   RBSFLG3
RBSTERMI EQU   RBSFLG3
RBRSV167 EQU   RBSFLG3
RBSOWNRA EQU   RBSOWNR+1
RBSSUPER EQU   RBSFLGS2
RBSKEY0  EQU   RBSFLGS2
RBRSV166 EQU   RBSFLGS2
RBRSV165 EQU   RBSFLGS2
RBSINUSE EQU   RBSFLGS2
RBRSV164 EQU   RBSFLGS2
RBSXCTL2 EQU   RBSFLGS2
RBRSV163 EQU   RBSFLGS2
RBSPARMA EQU   RBSPARM+1
RBSHALT  EQU   RBSIOPRC
RBSNOIOP EQU   RBSIOPRC
RBSASYNC EQU   RBSFLGS1
RBRSV162 EQU   RBSFLGS1
RBSESTAE EQU   RBSFLGS1
RBSDUMMY EQU   RBSFLGS1
RBSSTAR  EQU   RBSFLGS1
RBSSTAI  EQU   RBSFLGS1
RBSEXIT  EQU   RBSCBB+4
RBSCHAIN EQU   RBSCBB
TIRBEND  EQU   @NM00183+8
PRBEND   EQU   @NM00183+8
RBRSV146 EQU   RBRSV138
RBRSV145 EQU   RBRSV138
RBRSV144 EQU   RBRSV138
RBRSV143 EQU   RBRSV138
RBRSV142 EQU   RBRSV138
RBRSV141 EQU   RBRSV138
RBRSV140 EQU   RBRSV138
RBRSV139 EQU   RBRSV138
RBRSV137 EQU   @NM00183+6
RBRSV136 EQU   @NM00183+4
RBRSV135 EQU   @NM00183
@NM00182 EQU   RBSECT+32
@NM00181 EQU   @NM00179+1
RBSCF    EQU   @NM00180
RBPGMQ1  EQU   RBPGMQ+1
@NM00178 EQU   RBPGMQ
@NM00177 EQU   RBSECT+16
@NM00176 EQU   @NM00172
@NM00175 EQU   @NM00172
RBIQETP  EQU   @NM00172
RBUSIQE  EQU   RBETXR
RBATTN   EQU   @NM00172
@NM00174 EQU   @NM00172
@NM00173 EQU   @NM00172
RBPMSVRB EQU   @NM00170
RBATNXIT EQU   @NM00170
@NM00171 EQU   @NM00170
RBWAITP  EQU   @NM00170
RBFNSVRB EQU   RBTRSVRB
RBFTP    EQU   @NM00170
RBSIZE   EQU   RBSECT+8
RBABOPSW EQU   RBSECT+4
RBPPSAV1 EQU   RBPPSAV+1
@NM00168 EQU   RBPPSAV
RBPRFXND EQU   RBPREFIX+64
RBINLNTH EQU   RBINTCDA
RBWCSA   EQU   RBPREFIX+60
RBRSV004 EQU   RBPREFIX+57
RBSSSYN  EQU   RBFLAGS1
RBSCB    EQU   RBFLAGS1
RBLONGWT EQU   RBFLAGS1
RBASIR   EQU   RBFLAGS1
RBRSV159 EQU   RBFLAGS1
RBABEND  EQU   RBFLAGS1
RBXWAIT  EQU   RBFLAGS1
RBSLOCK  EQU   RBFLAGS1
RBRTRAN  EQU   RBRTPSW2+4
RBRTINCD EQU   RBRTICIL+2
RBRTILC  EQU   RBRTICIL+1
RBRSV160 EQU   RBRTICIL
RBRTPSW1 EQU   RBRTOPSW
RBRSV062 EQU   RBRSV054
RBRSV061 EQU   RBRSV054
RBRSV060 EQU   RBRSV054
RBRSV059 EQU   RBRSV054
RBRSV058 EQU   RBRSV054
RBRSV057 EQU   RBRSV054
RBRSV056 EQU   RBRSV054
RBRSV055 EQU   RBRSV054
RBRSV053 EQU   RBPREFIX+38
RBRSV052 EQU   RBPREFIX+36
RBRSV051 EQU   RBPREFIX+32
RBPRFXST EQU   RBPREFIX+32
RBRSV050 EQU   RBPREFIX+28
RBRSV049 EQU   RBRSV041
RBRSV048 EQU   RBRSV041
RBRSV047 EQU   RBRSV041
RBRSV046 EQU   RBRSV041
RBRSV045 EQU   RBRSV041
RBRSV044 EQU   RBRSV041
RBRSV043 EQU   RBRSV041
RBRSV042 EQU   RBRSV041
RBRSV040 EQU   RBPREFIX+26
RBRSV039 EQU   RBPREFIX+24
RBRSV038 EQU   RBPREFIX+20
RBRSV037 EQU   RBPREFIX+16
RBRSV036 EQU   RBRSV028
RBRSV035 EQU   RBRSV028
RBRSV034 EQU   RBRSV028
RBRSV033 EQU   RBRSV028
RBRSV032 EQU   RBRSV028
RBRSV031 EQU   RBRSV028
RBRSV030 EQU   RBRSV028
RBRSV029 EQU   RBRSV028
RBRSV027 EQU   RBRSV019
RBRSV026 EQU   RBRSV019
RBRSV025 EQU   RBRSV019
RBRSV024 EQU   RBRSV019
RBRSV023 EQU   RBRSV019
RBRSV022 EQU   RBRSV019
RBRSV021 EQU   RBRSV019
RBRSV020 EQU   RBRSV019
RBRSV018 EQU   RBPREFIX+13
RBRSV017 EQU   RBPREFIX+12
RBSRV016 EQU   RBPREFIX+11
RBRSV015 EQU   RBPREFIX+10
RBRSV014 EQU   RBPREFIX+8
RBRSV013 EQU   RBPREFIX+4
RBRSV012 EQU   RBPREFIX
RBEXSAVE EQU   XRBESA
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00167 EQU   RBBASIC+24
RBOPSWPS EQU   RBOPSWB2
@NM00166 EQU   RBOPSWB2
@NM00165 EQU   XRBPSW
@NM00164 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00163 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00162 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00161 EQU   XSTAB1
@NM00160 EQU   RBBASIC+8
@NM00159 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00158 EQU   RBPRFX
PVTEND   EQU   PVT+1840
PVTSPARE EQU   PVT+1838
PVTCHUIC EQU   PVT+1836
PVTCOMFX EQU   PVT+1834
PVTSQAFX EQU   PVT+1832
PVTCNTFX EQU   PVT+1830
PVTDEFFX EQU   PVT+1828
PVTFIXOK EQU   PVT+1826
PVTPEROK EQU   PVT+1824
PVTMAXFX EQU   PVT+1822
PVTPERFX EQU   PVT+1820
PVTRSRB  EQU   PVT+1776
PVTRESV5 EQU   PVT+1773
PVTSRBS  EQU   PVT+1772
PVTSSRB  EQU   PVT+1768
PVTACA   EQU   PVTWSAX+1400
PVTSAVE  EQU   PVTWSAX+1328
PVTWSA18 EQU   PVTWSAX+1256
PVTWSA17 EQU   PVTWSAX+1184
PVTWSA16 EQU   PVTWSAX+1112
PVTWSA15 EQU   PVTWSAX+1040
PVTWSA14 EQU   PVTWSAX+968
PVTWSA13 EQU   PVTWSAX+896
PVTWSA12 EQU   PVTWSAX+824
PVTWSA11 EQU   PVTWSAX+752
PVTWSA10 EQU   PVTWSAX+672
PVTWSA9  EQU   PVTWSAX+592
PVTWSA8  EQU   PVTWSAX+504
PVTWSA7  EQU   PVTWSAX+432
PVTWSA6  EQU   PVTWSAX+360
PVTWSA5  EQU   PVTWSAX+288
PVTWSA4  EQU   PVTWSAX+216
PVTWSA3  EQU   PVTWSAX+144
PVTWSA2  EQU   PVTWSAX+72
PVTWSA1  EQU   PVTWSAX
PVTCIOQL EQU   PVTQS+36
PVTCIOQF EQU   PVTQS+32
PVTGFADL EQU   PVTQS+28
PVTGFADF EQU   PVTQS+24
PVTFPCBL EQU   PVTQS+20
PVTFPCBF EQU   PVTQS+16
PVTSQAQL EQU   PVTQS+14
PVTSQAQF EQU   PVTQS+12
PVTCFQL  EQU   PVTQS+10
PVTCFQF  EQU   PVTQS+8
PVTSPFR  EQU   PVT+302
PVTSPREC EQU   PVT+296
PVTCAREC EQU   PVT+292
PVTCAOUT EQU   PVT+288
PVTCAIN  EQU   PVT+284
PVTNSWPS EQU   PVT+280
PVTNPREC EQU   PVT+276
PVTSPOUT EQU   PVT+272
PVTSPIN  EQU   PVT+268
PVTVAMR  EQU   PVT+264
PVTVAMO  EQU   PVT+260
PVTVAMI  EQU   PVT+256
PVTNPOUT EQU   PVT+252
PVTNPIN  EQU   PVT+248
PVTPRSET EQU   PVT+244
PVTFRSLT EQU   PVT+240
PVTPAGIO EQU   PVT+236
PVTSWPIO EQU   PVT+232
PVTPSWPP EQU   PVT+228
PVTPPREF EQU   PVT+224
PVTPOPBR EQU   PVT+220
PVTPRELF EQU   PVT+216
PVTPRELV EQU   PVT+212
PVTPFREE EQU   PVT+208
PVTPRELS EQU   PVT+204
PVTPOUT  EQU   PVT+200
PVTPFXLD EQU   PVT+196
PVTPITAS EQU   PVT+192
PVTPSRBP EQU   PVT+188
PVTPDSEG EQU   PVT+184
PVTPCSGB EQU   PVT+180
PVTPCSEG EQU   PVT+176
PVTPINV  EQU   PVT+172
PVTPSWPC EQU   PVT+168
PVTPSOUT EQU   PVT+164
PVTPSWIN EQU   PVT+160
PVTPRCV  EQU   PVT+156
PVTPRCFI EQU   PVT+152
PVTPRCF  EQU   PVT+148
PVTPVRC  EQU   PVT+144
PVTPVRIN EQU   PVT+140
PVTPVRLS EQU   PVT+136
PVTPVEQR EQU   PVT+132
PVTPPIOI EQU   PVT+128
PVTPVRPO EQU   PVT+124
PVTPRFR  EQU   PVT+120
PVTPFP2  EQU   PVT+116
PVTPFP   EQU   PVT+112
PVTPFTE  EQU   PVT+108
PVTPCB   EQU   PVT+104
PVTREP2  EQU   PVT+100
PVTPIOCP EQU   PVT+96
PVTPIOP  EQU   PVT+92
PVTPGFAD EQU   PVT+88
PVTPGFA  EQU   PVT+84
PVTPSINT EQU   PVT+76
PVTPSIB  EQU   PVT+72
PVTSRBID EQU   PVT+68
PVTPCIWA EQU   PVT+64
PVTOROOT EQU   PVT+56
PVTPRCA  EQU   PVT+52
PVTREUS  EQU   PVT+48
PVTRESV4 EQU   PVT+46
PVTVROOT EQU   PVT+40
PVTPCBLO EQU   PVT+38
PVTPCBCT EQU   PVT+36
PVTDFRS  EQU   PVT+34
PVTRSQA  EQU   PVT+32
PVTPTLB  EQU   PVT+31
PVTPCBNO EQU   PVT+30
PVTSRBNO EQU   PVT+29
PVTSQDC  EQU   PVT+28
PVTSSPIN EQU   PVT+11
PVTPCBS  EQU   PVT+10
PVTAFCLO EQU   PVT+4
PVTFLAG2 EQU   PVT+1
PVTDUMP  EQU   PVTFLAG1
PVTSIT   EQU   PVTFLAG1
PVTLSI   EQU   PVTFLAG1
PVTRESV1 EQU   PVTFLAG1
PVTPCBLT EQU   PVTFLAG1
PVTSRBIU EQU   PVTFLAG1
PVTBGMS  EQU   PVTFLAG1
PVTPMSG  EQU   PVTFLAG1
@NM00157 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00156 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00155 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00154 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00153 EQU   FLCFSA
@NM00152 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00151 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00150 EQU   FLCIOA
@NM00149 EQU   FLCMCLA+15
@NM00148 EQU   FLCMCLA+14
@NM00147 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00146 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00145 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00144 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00143 EQU   FLCPER
@NM00142 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00141 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00140 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00139 EQU   FLCPIILC
@NM00138 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00137 EQU   FLCSVILC
@NM00136 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
@NM00135 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00134 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
PQERSVD  EQU   PQESECT+31
VVVRFLG  EQU   VMMFLGS
@NM00133 EQU   VMMFLGS
PQEHRID  EQU   PQESECT+29
PQERFLGS EQU   PQESECT+28
NIPPTSID EQU   NIPPTE+6
@NM00132 EQU   NIPPTATF
NIPPTMRG EQU   NIPPTATF
@NM00131 EQU   NIPPTOPF
NIPPTCAN EQU   NIPPTOPF
NIPPTLST EQU   NIPPTOPF
NIPPTOPI EQU   NIPPTOPF
NIPPTADR EQU   NIPPTE
PTABEND  EQU   PARMTAB+312
@NM00130 EQU   PARMTAB+308
DUPLEX   EQU   PARMTAB+304
@NM00129 EQU   PARMTAB+300
PAGNUM   EQU   PARMTAB+296
@NM00128 EQU   PARMTAB+292
SWAP     EQU   PARMTAB+288
@NM00127 EQU   PARMTAB+284
RSU      EQU   PARMTAB+280
@NM00126 EQU   @NM00124+1
@NM00125 EQU   NIPPAFLG
@NM00123 EQU   PARMTAB+268
PURGE    EQU   PARMTAB+264
@NM00122 EQU   PARMTAB+260
WTORPLY  EQU   PARMTAB+256
@NM00121 EQU   PARMTAB+252
WTOBFRS  EQU   PARMTAB+248
@NM00120 EQU   PARMTAB+244
VRREGN   EQU   PARMTAB+240
@NM00119 EQU   PARMTAB+236
VAL      EQU   PARMTAB+232
@NM00118 EQU   PARMTAB+228
SYSP     EQU   PARMTAB+224
@NM00117 EQU   PARMTAB+220
SQA      EQU   PARMTAB+216
@NM00116 EQU   PARMTAB+212
SMF      EQU   PARMTAB+208
@NM00115 EQU   PARMTAB+204
REAL     EQU   PARMTAB+200
@NM00114 EQU   PARMTAB+196
PAGEO    EQU   PARMTAB+192
@NM00113 EQU   PARMTAB+188
PAGEP    EQU   PARMTAB+184
@NM00112 EQU   PARMTAB+180
OPT      EQU   PARMTAB+176
@NM00111 EQU   PARMTAB+172
OPI      EQU   PARMTAB+168
@NM00110 EQU   PARMTAB+164
NUCMAP   EQU   PARMTAB+160
@NM00109 EQU   PARMTAB+156
MLPA     EQU   PARMTAB+152
@NM00108 EQU   PARMTAB+148
MAXUSER  EQU   PARMTAB+144
@NM00107 EQU   PARMTAB+140
LOGLMT   EQU   PARMTAB+136
@NM00106 EQU   PARMTAB+132
LOGCLS   EQU   PARMTAB+128
@NM00105 EQU   PARMTAB+124
LNK      EQU   PARMTAB+120
@NM00104 EQU   PARMTAB+116
IPS      EQU   PARMTAB+112
@NM00103 EQU   PARMTAB+108
HARDCPY  EQU   PARMTAB+104
@NM00102 EQU   PARMTAB+100
FIX      EQU   PARMTAB+96
@NM00101 EQU   PARMTAB+92
DUMP     EQU   PARMTAB+88
@NM00100 EQU   PARMTAB+84
@NM00099 EQU   PARMTAB+76
CSA      EQU   PARMTAB+72
@NM00098 EQU   PARMTAB+68
CPQE     EQU   PARMTAB+64
@NM00097 EQU   PARMTAB+60
CONT     EQU   PARMTAB+56
@NM00096 EQU   PARMTAB+52
CMD      EQU   PARMTAB+48
@NM00095 EQU   PARMTAB+44
@NM00094 EQU   PARMTAB+36
BLDLF    EQU   PARMTAB+32
@NM00093 EQU   PARMTAB+28
BLDL     EQU   PARMTAB+24
@NM00092 EQU   PARMTAB+20
APG      EQU   PARMTAB+16
@NM00091 EQU   PARMTAB+12
APF      EQU   PARMTAB+8
PTABSTRT EQU   PARMTAB
NIPPABUF EQU   NIPPAREA+572
NIPPAPTB EQU   NIPPAREA+252
@NM00090 EQU   NIPPAREA+248
NIPPARCD EQU   NIPPAIOD+136
NIPPADEB EQU   NIPPAIOD+88
@NM00089 EQU   NIPPAECB+1
NIPPAECC EQU   NIPPAECB
NIPPADCB EQU   NIPPAIOD+80
NIPPAIOB EQU   NIPPAIOD+40
@NM00088 EQU   NIPPAIOD+37
NIPPASID EQU   NIPPAIOD+32
NIPPATXT EQU   NIPPAIOD
@NM00087 EQU   NIPPAREA+30
@NM00086 EQU   NIPPABDL+15
NIPPATTR EQU   NIPPABDL+12
NIPPANAM EQU   NIPPABDL+4
NIPPA2BF EQU   NIPPABDH
NIPPARC  EQU   NIPPAREA+8
@NM00085 EQU   NIPPAREA
NIPPABYT EQU   NIPPAHDR+4
NIPPAQ   EQU   NIPPAHDR
@NM00080 EQU   NIPOPNPL+22
NOPNRC   EQU   NIPOPNPL+21
NOPNFLSX EQU   NOPNFL
NOPNFLLC EQU   NOPNFL
NOPNFLLB EQU   NOPNFL
NOPNFLNB EQU   NOPNFL
NOPNFLI  EQU   NOPNFL
NOPNFLM  EQU   NOPNFL
NOPNFAU  EQU   NOPNFL
NOPNFRS  EQU   NOPNFL
NOPNDSA  EQU   NOPNDS
@NM00079 EQU   NIPMNTPL+21
NMNTFLB  EQU   NMNTFL
NMNTFLC  EQU   NMNTFL
NMNTFLI  EQU   NMNTFL
NMNTFUS  EQU   NMNTFL
@NM00078 EQU   NMNTFL
NMNTDT   EQU   NIPMNTPL+18
NMNTUCB  EQU   NMNTVS
NMNTDSA  EQU   NMNTDS
NWTORMSG EQU   NWTORLST+12
@NM00077 EQU   NWTORLST+11
@NM00076 EQU   NWTORFL
NWTORFLB EQU   NWTORFL
@NM00075 EQU   NWTORFL
NWTORFLA EQU   NWTORFL
NMTORRDL EQU   NWTORLST+8
NWTORECB EQU   NWTORLST+4
NWTORRPA EQU   NWTORLST
@NM00074 EQU   NWTOFL
NWTOFLNC EQU   NWTOFL
NWTOFLNH EQU   NWTOFL
NWTOLNG  EQU   NWTOHDR
PFTUIC   EQU   PFTE+15
@NM00073 EQU   PFTFLAG2
@NM00072 EQU   PFTFLAG2
PFTSTEAL EQU   PFTFLAG2
PFTIRRG  EQU   PFTFLAG2
PFTVR    EQU   PFTFLAG2
PFTDFRLS EQU   PFTFLAG2
PFTOFINT EQU   PFTFLAG1
PFTBADPG EQU   PFTFLAG1
PFTPCBSI EQU   PFTFLAG1
PFTLNGFX EQU   PFTFLAG1
PFTLSQA  EQU   PFTFLAG1
PFTVRINT EQU   PFTFLAG1
PFTRSV1  EQU   PFTE+10
PFTFXCT  EQU   PFTE+8
@NM00071 EQU   PCCA+512
PCCACAT  EQU   PCCA+384
PCCARV36 EQU   PCCA+380
PCCARV35 EQU   PCCA+378
PCCARV01 EQU   PCCA+377
PCCAR105 EQU   PCCAATTR
PCCAR104 EQU   PCCAATTR
PCCAR103 EQU   PCCAATTR
PCCAR102 EQU   PCCAATTR
PCCAR101 EQU   PCCAATTR
PCCAR100 EQU   PCCAATTR
PCCAIO   EQU   PCCAATTR
PCCACPUM EQU   PCCAATTR
PCCARV63 EQU   PCCA+372
PCCARV62 EQU   PCCA+368
PCCARV61 EQU   PCCA+364
PCCARV60 EQU   PCCA+360
PCCARV59 EQU   PCCA+356
PCCARV58 EQU   PCCA+352
PCCARV57 EQU   PCCA+348
PCCARV56 EQU   PCCA+344
PCCARV55 EQU   PCCA+340
PCCARV54 EQU   PCCA+336
PCCALOGA EQU   PCCA+332
PCCACHID EQU   PCCA+324
PCCACHSV EQU   PCCA+312
PCCARV79 EQU   PCCACHF4
PCCARV78 EQU   PCCACHF4
PCCARV77 EQU   PCCACHF4
PCCARV76 EQU   PCCACHF4
PCCARV75 EQU   PCCACHF4
PCCARV74 EQU   PCCACHF4
PCCARV73 EQU   PCCACHF4
PCCARV72 EQU   PCCACHF4
PCCARV71 EQU   PCCACHF3
PCCARV70 EQU   PCCACHF3
PCCARV69 EQU   PCCACHF3
PCCARV68 EQU   PCCACHF3
PCCARV67 EQU   PCCACHF3
PCCARV66 EQU   PCCACHF3
PCCARV65 EQU   PCCACHF3
PCCARV64 EQU   PCCACHF3
PCCACF28 EQU   PCCACHF2
PCCACF27 EQU   PCCACHF2
PCCACF26 EQU   PCCACHF2
PCCACF25 EQU   PCCACHF2
PCCACF24 EQU   PCCACHF2
PCCACF23 EQU   PCCACHF2
PCCACF22 EQU   PCCACHF2
PCCACF21 EQU   PCCACHF2
PCCACF18 EQU   PCCACHF1
PCCACF17 EQU   PCCACHF1
PCCACF16 EQU   PCCACHF1
PCCACF15 EQU   PCCACHF1
PCCACF14 EQU   PCCACHF1
PCCACF13 EQU   PCCACHF1
PCCACF12 EQU   PCCACHF1
PCCACF11 EQU   PCCACHF1
PCCARV05 EQU   PCCA+306
PCCACHPB EQU   PCCA+305
PCCALGP2 EQU   PCCA+304
PCCALGP1 EQU   PCCA+303
PCCALOGL EQU   PCCA+302
PCCARV80 EQU   PCCA+300
PCCACHW2 EQU   PCCA+296
PCCACHW1 EQU   PCCA+292
PCCAIOSI EQU   PCCA+291
PCCACNRB EQU   PCCACHRB
PCCACCVB EQU   PCCACHRB
PCCACSNB EQU   PCCACHRB
PCCARV52 EQU   PCCACHRB
PCCACHIB EQU   PCCACHRB
PCCACTIB EQU   PCCACHRB
PCCACINB EQU   PCCACHRB
PCCACSIB EQU   PCCACHRB
PCCARV51 EQU   PCCACHS2
PCCARV50 EQU   PCCACHS2
PCCACCRA EQU   PCCACHS2
PCCACURC EQU   PCCACHS2
PCCACNLG EQU   PCCACHS2
PCCACMOD EQU   PCCACHS2
PCCACALT EQU   PCCACHS2
PCCACIOR EQU   PCCACHS2
PCCARV47 EQU   PCCACHS1
PCCACUCB EQU   PCCACHS1
PCCACIBC EQU   PCCACHS1
PCCACAND EQU   PCCACHS1
PCCACNLS EQU   PCCACHS1
PCCACFRR EQU   PCCACHS1
PCCACNRE EQU   PCCACHS1
PCCACCMP EQU   PCCACHS1
PCCACSEQ EQU   PCCACHTS
PCCACDIN EQU   PCCACHTS
PCCARV44 EQU   PCCACHTS
PCCARV43 EQU   PCCACHTS
PCCACTEC EQU   PCCACHTS
PCCACDAV EQU   PCCACHVA
PCCACCHV EQU   PCCACHVA
PCCACCMD EQU   PCCACHVA
PCCACUNS EQU   PCCACHVA
PCCACSQV EQU   PCCACHVA
PCCARV42 EQU   PCCACHVA
PCCARV41 EQU   PCCACHVA
PCCACITF EQU   PCCACHVA
PCCARV40 EQU   PCCACHBL
PCCARV39 EQU   PCCACHBL
PCCARV38 EQU   PCCACHBL
PCCACCUE EQU   PCCACHBL
PCCACSTG EQU   PCCACHBL
PCCACSCU EQU   PCCACHBL
PCCACCHA EQU   PCCACHBL
PCCACCPU EQU   PCCACHBL
PCCACNOR EQU   PCCACHPF
PCCACCNT EQU   PCCACHPF
PCCACSNS EQU   PCCACHPF
PCCARV37 EQU   PCCACHPF
PCCACHIO EQU   PCCACHPF
PCCACTIO EQU   PCCACHPF
PCCACINT EQU   PCCACHPF
PCCACSIO EQU   PCCACHPF
PCCACHUB EQU   PCCAWERP
PCCACHEL EQU   PCCA+168
PCCALRBR EQU   PCCA+164
PCCALRBV EQU   PCCA+160
PCCAPWAR EQU   PCCA+156
PCCAPWAV EQU   PCCA+152
PCCAEMSA EQU   PCCAEMSB+12
PCCAEMSE EQU   PCCAEMSB+8
PCCAEMSP EQU   PCCAEMSB+4
PCCARMS  EQU   PCCARMSB
PCCARV34 EQU   PCCARMSB
PCCARV33 EQU   PCCARMSB
PCCARV32 EQU   PCCARMSB
PCCARV31 EQU   PCCARMSB
PCCARV30 EQU   PCCARMSB
PCCARV29 EQU   PCCARMSB
PCCARV28 EQU   PCCARMSB
PCCARV27 EQU   PCCAEMS3
PCCARV26 EQU   PCCAEMS3
PCCARV25 EQU   PCCAEMS3
PCCARV24 EQU   PCCAEMS3
PCCARV23 EQU   PCCAEMS3
PCCARV22 EQU   PCCAEMS3
PCCARV21 EQU   PCCAEMS3
PCCARV20 EQU   PCCAEMS3
PCCARV19 EQU   PCCAEMS2
PCCARV18 EQU   PCCAEMS2
PCCARV17 EQU   PCCAEMS2
PCCARV16 EQU   PCCAEMS2
PCCARV15 EQU   PCCAEMS2
PCCARV14 EQU   PCCAEMS2
PCCARV13 EQU   PCCAEMS2
PCCARV12 EQU   PCCAEMS2
PCCARV11 EQU   PCCARISP
PCCARV10 EQU   PCCARISP
PCCARV09 EQU   PCCARISP
PCCARV08 EQU   PCCARISP
PCCARV07 EQU   PCCARISP
PCCARV06 EQU   PCCARISP
PCCASERL EQU   PCCARISP
PCCAPARL EQU   PCCARISP
PCCARPB  EQU   PCCA+132
PCCACTIN EQU   PCCAINTE
PCCANFIN EQU   PCCAINTE
PCCANUIN EQU   PCCAINTE
PCCACTCC EQU   PCCACCE
PCCANFCC EQU   PCCACCE
PCCANUCC EQU   PCCACCE
PCCACTTD EQU   PCCATODE
PCCANFTD EQU   PCCATODE
PCCANUTD EQU   PCCATODE
PCCARV04 EQU   PCCATMFL
PCCARV03 EQU   PCCATMFL
PCCARV02 EQU   PCCATMFL
PCCAMINT EQU   PCCATMFL
PCCAMCC  EQU   PCCATMFL
PCCAVKIL EQU   PCCATMFL
PCCASYNC EQU   PCCATMFL
PCCAINIT EQU   PCCATMFL
PCCARV9E EQU   PCCA+124
PCCARV9D EQU   PCCA+120
PCCARV9C EQU   PCCA+116
PCCARV9B EQU   PCCA+112
PCCARV9A EQU   PCCA+108
PCCARV99 EQU   PCCA+104
PCCARV98 EQU   PCCA+100
PCCARV97 EQU   PCCA+96
PCCARV96 EQU   PCCA+92
PCCARV95 EQU   PCCA+88
PCCARV94 EQU   PCCA+84
PCCARV93 EQU   PCCA+80
PCCARV92 EQU   PCCA+76
PCCARV91 EQU   PCCA+72
PCCARV90 EQU   PCCA+68
PCCARV89 EQU   PCCA+64
PCCARV88 EQU   PCCA+60
PCCARV87 EQU   PCCA+56
PCCARV86 EQU   PCCA+52
PCCARV85 EQU   PCCA+48
PCCARV84 EQU   PCCA+44
PCCARV83 EQU   PCCA+40
PCCARV82 EQU   PCCA+36
PCCARV81 EQU   PCCA+32
PCCAPSAR EQU   PCCA+28
PCCATQEP EQU   PCCA+20
PCCACAFM EQU   PCCA+18
PCCACPID EQU   PCCA+4
PCCAPCCA EQU   PCCA
LRBCMPCS EQU   LRBCMP+2
LRBCMPPA EQU   LRBCMP
LRBCMPNO EQU   LRBCVAR+6
LRBCMPF2 EQU   LRBCVAR+5
LRBCMPF1 EQU   LRBCVAR+4
LRBCRESD EQU   LRBCVAR+2
LRBCFT   EQU   LRBCVAR
LRBHMCEL EQU   LRBHCPID+6
LRBHMDL  EQU   LRBHCPID+4
LRBHCSER EQU   LRBHCPID+1
@NM00025 EQU   LRBHCPID
LRBHTIME EQU   LRB+12
LRBHDATE EQU   LRB+8
@NM00024 EQU   LRB+7
LRBHCNT  EQU   LRB+6
LRBMCLB  EQU   LRBHSW3
LRBNDEM  EQU   LRBMACT
LRBNCEM  EQU   LRBMACT
@NM00023 EQU   LRBHSW0
LRBHTMC  EQU   LRBHSW0
@NM00022 EQU   LRBHSW0
LRBHNS   EQU   LRBHSW0
LRBHMORE EQU   LRBHSW0
@NM00021 EQU   LRBHSYS
LRBHSYSB EQU   LRBHSYS
LDAEND   EQU   LDA+1496
LCLCELCT EQU   LDA+1492
LCLCELL  EQU   LDA+1488
LDALIMIT EQU   LDA+1484
LDARSVPT EQU   LDA+1480
LDASRPQE EQU   LDA+1476
VVREGSZ  EQU   LDA+1468
LSQAPTR  EQU   LDA+1464
CFAPWKAR EQU   LDA+1164
CSAVE    EQU   LDA+1100
OBFRSAVE EQU   LDA+1036
GFRESAVE EQU   LDA+972
GMREPSAV EQU   LDA+908
FBQSAVE  EQU   LDA+844
G4KSAVE  EQU   LDA+780
FSAVE    EQU   LDA+716
BSAVE    EQU   LDA+652
SAVEREG2 EQU   LDA+588
BRANCHSV EQU   LDA+524
GMFMWKAR EQU   LDA+24
LDARES2  EQU   LDA+21
LDACBSP  EQU   LDA+20
LDARQSTA EQU   LDA+16
LDATCB   EQU   LDA+12
PASCBSV  EQU   LDA+4
@NM00020 EQU   LVSMFLAG+1
LDABRSW  EQU   LVSMFLAG
LDAFPFM  EQU   LVSMFLAG
LDAFLAGS EQU   LVSMFLAG
LDASTART EQU   LDA
LCHEND   EQU   LCH+32
LCHPYBSY EQU   LCH+30
LCHLGBSY EQU   LCH+28
LCHRSV03 EQU   LCH+26
LCHTOTAL EQU   LCH+24
LCHRSV02 EQU   LCH+22
@NM00019 EQU   LCHFLA
LCHLKHLD EQU   LCHFLA
LCHCHCNT EQU   LCH+20
LCHRSV01 EQU   LCH+12
LCHLOCK  EQU   LCH+8
LCHLST   EQU   LCH+4
LCHFST   EQU   LCHENTRY
IOXEND   EQU   IOCX+32
IOXPSIF  EQU   IOCX+28
IOXPSIX  EQU   IOCX+24
IOXSTIDC EQU   IOCX+20
IOXCRHD  EQU   IOCX+16
IOXCRHA  EQU   IOCX+12
IOXTCQSC EQU   IOCX+8
@NM00018 EQU   IOCX+6
IOXLCHCT EQU   IOCX+5
IOXCHMSK EQU   IOCX+2
IOXOFSET EQU   IOX
IOCOEND  EQU   IOCOM+128
IOCPATCH EQU   IOCOM+124
IOCQCNT  EQU   IOCOM+116
IOCIOSDQ EQU   IOCOM+112
IOCIOSEQ EQU   IOCOM+108
IOCSVCF  EQU   IOCOM+104
IOCTCCW  EQU   IOCOM+100
IOCRSVTB EQU   IOCOM+96
IOCMFCNT EQU   IOCOM+92
IOCMFHK  EQU   IOCOM+88
IOCGENA  EQU   IOCOM+84
IOCCCH   EQU   IOCOM+80
IOCASYNQ EQU   IOCOM+76
IOCLCHTB EQU   IOCOM+72
IOCATTBL EQU   IOCOM+68
IOCSYNCH EQU   IOCOM+56
IOCCATLK EQU   IOCOM+48
IOCPRGID EQU   IOCOM+44
IOCIOSCP EQU   IOCOM+40
IOCORMGT EQU   IOCOM+36
IOCVOID  EQU   IOCOM+32
IOCSTIO  EQU   IOCOM+28
IOCSCOMP EQU   IOCOM+24
IOCHD160 EQU   IOCOM+20
IOCINT   EQU   IOCOM+16
IOCCTBL  EQU   IOCOM+12
IOCHIO   EQU   IOCOM+8
IOCPST   EQU   IOCOM+4
IOCPGCT  EQU   IOCOM+2
IOCVOICT EQU   IOCOM
IOBERRCT EQU   IOBSTDRD+30
IOBRSV19 EQU   IOBINCAM+1
IOBOLTST EQU   IOBBTAMF
IOBRFTMG EQU   IOBBTAMF
IOBRSV17 EQU   IOBBTAMF
IOBRSV16 EQU   IOBBTAMF
IOBRSV15 EQU   IOBBTAMF
IOBRSV14 EQU   IOBBTAMF
IOBINUSE EQU   IOBBTAMF
IOBPRMER EQU   IOBBTAMF
IOBRSTRB EQU   IOBRESTR+1
IOBREPOS EQU   IOBRESTR
IOBDCBPB EQU   IOBDCBPT+1
IOBRSV44 EQU   IOBFLAG4
IOBJES3I EQU   IOBFLAG4
IOBRSV42 EQU   IOBFLAG4
IOBRSV41 EQU   IOBFLAG4
IOBRSV40 EQU   IOBFLAG4
IOBPMERR EQU   IOBFLAG4
IOBCC3WE EQU   IOBFLAG4
IOBGDPOL EQU   IOBFLAG4
IOBSTRTB EQU   IOBSTART+1
IOBSIOCC EQU   IOBSTART
IOBCSB7  EQU   IOBCSTAT
IOBCSB6  EQU   IOBCSTAT
IOBCSB5  EQU   IOBCSTAT
IOBCSB4  EQU   IOBCSTAT
IOBCSB3  EQU   IOBCSTAT
IOBCSB2  EQU   IOBCSTAT
IOBCSB1  EQU   IOBCSTAT
IOBCSB0  EQU   IOBCSTAT
IOBUSB7  EQU   IOBUSTAT
IOBUSB6  EQU   IOBUSTAT
IOBUSB5  EQU   IOBUSTAT
IOBUSB4  EQU   IOBUSTAT
IOBUSB3  EQU   IOBUSTAT
IOBUSB2  EQU   IOBUSTAT
IOBUSB1  EQU   IOBUSTAT
IOBUSB0  EQU   IOBUSTAT
IOBCMDA  EQU   IOBIOCSW
IOBLOG   EQU   IOBFL3
IOBJAM   EQU   IOBICL
IOBMSG   EQU   IOBFL3
IOBSDR   EQU   IOBCNC
IOBACU   EQU   IOBFL3
IOBCDC   EQU   IOBFL3
IOBICC   EQU   IOBFL3
IOBCCC   EQU   IOBFL3
IOBECBPB EQU   IOBECBPT+1
IOBECBCC EQU   IOBECBPT
IOBS1B7  EQU   IOBSENS1
IOBS1B6  EQU   IOBSENS1
IOBS1B5  EQU   IOBSENS1
IOBS1B4  EQU   IOBSENS1
IOBS1B3  EQU   IOBSENS1
IOBS1B2  EQU   IOBSENS1
IOBS1B1  EQU   IOBSENS1
IOBS1B0  EQU   IOBSENS1
IOBSNSC9 EQU   IOBS0B7
IOBS0B6  EQU   IOBSENS0
IOBS0B5  EQU   IOBSENS0
IOBS0B4  EQU   IOBSENS0
IOBS0B3  EQU   IOBSENS0
IOBS0B2  EQU   IOBSENS0
IOBS0B1  EQU   IOBSENS0
IOBS0B0  EQU   IOBSENS0
IOBPNCH  EQU   IOBFLAG2
IOBSTATO EQU   IOBFLAG2
IOBSKUPD EQU   IOBFLAG2
IOBALTTR EQU   IOBFLAG2
IOBRRT2  EQU   IOBRDHA0
IOBRRT3  EQU   IOBPURGE
IOBSENSE EQU   IOBFLAG2
IOBHALT  EQU   IOBFLAG2
IOBSPSVC EQU   IOBRSTRT
IOBUNREL EQU   IOBFLAG1
IOBIOERR EQU   IOBFLAG1
IOBFCREX EQU   IOBCYCCK
IOBRPSTN EQU   IOBFLAG1
IOBERRTN EQU   IOBFLAG1
IOBCMDCH EQU   IOBFLAG1
IOBDATCH EQU   IOBFLAG1
IOBCNOPA EQU   IOBPREFX+12
IOBCICB  EQU   IOBPREFX+8
IOBCECB  EQU   IOBPREFX+4
IOBCONOP EQU   IOBPREFX+3
IOBCINOP EQU   IOBPREFX+2
IOBRSV05 EQU   IOBPREFX+1
IOBPCI   EQU   IOBCFLG1
IOBRSTCH EQU   IOBCFLG1
IOBABAPP EQU   IOBCFLG1
IOBPTST  EQU   IOBCFLG1
IOBRSV04 EQU   IOBCFLG1
IOBRSV03 EQU   IOBCFLG1
IOBRSV02 EQU   IOBCFLG1
IOBRSV01 EQU   IOBCFLG1
GBLCELCT EQU   GDA+60
GLBLCELL EQU   GDA+56
CSASPQEP EQU   GDA+52
PFSTCPAB EQU   GDA+48
VRWLEL   EQU   VRWAITQ+4
VRWFEL   EQU   VRWAITQ
VRPLEL   EQU   VRPOSTQ+4
VRPFEL   EQU   VRPOSTQ
SQASPLFT EQU   GDA+28
SQASPQEP EQU   GDA+24
VRPQEP   EQU   GDA+12
CSAPQEP  EQU   GDA+8
VRDREG   EQU   GDA+4
RESV     EQU   GVSMFLAG+1
@NM00017 EQU   GDAFLAGS
WAITQUE  EQU   GDAFLAGS
SQATHRS2 EQU   GDAFLAGS
SQATHRS1 EQU   GDAFLAGS
GDAFLAG2 EQU   GDAFLAGS
GDAFLAG1 EQU   GDAFLAGS
ECBEVNT  EQU   ECBEXTND
@NM00016 EQU   ECBEXTND
@NM00015 EQU   ECBBYTE3
@NM00014 EQU   ECBEXTBA
@NM00013 EQU   ECBCC
ECBPOSTB EQU   ECBCC
ECBWAITB EQU   ECBCC
DEBXSAMB EQU   DEBXTN+28
DEBXOPNJ EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXDSSI EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXCDCB EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBAMTYP EQU   DEBPREFX+13
DEBLNGTH EQU   DEBPREFX+12
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBESMVR EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00012 EQU   DEBACS08+12
@NM00011 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00010 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00009 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBLRECL EQU   DEBACSMD+14
DEBBLKSI EQU   DEBACSMD+12
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBUCBA  EQU   DEBUCBAD+1
DEBDVMOD EQU   DEBUCBAD
DEBEXSCL EQU   DEBAPPAD
DEBDCBB  EQU   DEBDCBAD+1
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBNMEXT EQU   DEBUSRPG
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBDEBB  EQU   DEBDEBAD+1
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
CVTMDL   EQU   CVTFIX+250
@NM00008 EQU   CVTFIX+248
@NM00007 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTRV490 EQU   CVTMAP+388
CVTSU    EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQCDSR EQU   CVTMAP+184
CVTVS1B  EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTSV76M EQU   CVTIOQET
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTXTLER EQU   CVTMAP+44
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CDATTR3  EQU   CDENTRY+30
CDAUTH   EQU   CDATTR2
CDSYSLIB EQU   CDATTR2
CDOLY    EQU   CDATTR2
@NM00006 EQU   CDATTR2
CDRLC    EQU   CDATTR2
CDXLE    EQU   CDATTR2
CDREL    EQU   CDATTR2
CDSPZ    EQU   CDATTR2
CDNLR    EQU   CDATTR
CDJPA    EQU   CDATTR
CDMIN    EQU   CDATTR
CDNFN    EQU   CDATTR
CDSER    EQU   CDATTR
CDREN    EQU   CDATTR
CDNIC    EQU   CDATTR
CDNIP    EQU   CDATTR
@NM00005 EQU   CDENTRY+26
CDUSE    EQU   CDENTRY+24
CDXLMJP  EQU   CDENTRY+20
CDENTPT  EQU   CDENTRY+16
CDNAME   EQU   CDENTRY+8
CDRRBP   EQU   CDENTRY+4
CDCHAIN  EQU   CDENTRY
ASMCPRES EQU   ASMCPRSQ+4
ASMCPTAK EQU   ASMCPRSQ
ASMCPCNT EQU   ASMCPAVQ+4
ASMCPAVL EQU   ASMCPAVQ
ASMCPEXT EQU   ASMPOOLS+6
ASMCPSIZ EQU   ASMPOOLS+4
ASMCPID  EQU   ASMPOOLS
ASMRSV12 EQU   ASMVT+1000
ASMSAVE  EQU   ASMVT+928
ASMWKSA7 EQU   ASMVT+848
ASMWKSA6 EQU   ASMVT+768
ASMACEPC EQU   ASMVT+344
ASMSWKPC EQU   ASMVT+328
ASMBWKPC EQU   ASMVT+312
ASMIOEPC EQU   ASMVT+296
ASMRSV10 EQU   ASMVT+280
ASMPVACE EQU   ASMVT+276
ASMPIOFR EQU   ASMVT+272
ASMPVACQ EQU   ASMVT+268
ASMPMSGS EQU   ASMVT+264
ASMPMSG0 EQU   ASMVT+260
ASMPFRLG EQU   ASMVT+256
ASMPRLG  EQU   ASMVT+252
ASMPACT  EQU   ASMVT+248
ASMPSAV  EQU   ASMVT+244
ASMPCMP  EQU   ASMVT+240
ASMPCMPA EQU   ASMVT+236
ASMPCMPN EQU   ASMVT+232
ASMPCMPD EQU   ASMVT+228
ASMPEX   EQU   ASMVT+224
ASMVRMTR EQU   ASMVT+220
ASMPSRBC EQU   ASMVT+216
ASMPSRMT EQU   ASMVT+212
ASMPSWPD EQU   ASMVT+208
ASMPTM   EQU   ASMVT+204
ASMPFRSW EQU   ASMVT+200
ASMPFRSL EQU   ASMVT+196
ASMPQIOE EQU   ASMVT+192
ASMRSV8  EQU   ASMVT+188
ASMVSAMW EQU   ASMVT+184
ASMTASCB EQU   ASMVT+180
ASMRLGWQ EQU   ASMVT+176
ASMRLGRQ EQU   ASMVT+172
ASMTMECB EQU   ASMVT+168
ASMTCBPT EQU   ASMVT+164
ASMREQCT EQU   ASMVT+160
ASMGOSWK EQU   ASMGOSQS+4
ASMGOSWT EQU   ASMGOSQS
ASMLSAIH EQU   ASMLSAI+4
ASMLSAIL EQU   ASMLSAI
ASMCINV  EQU   ASMVT+140
ASMSTGXA EQU   ASMVT+136
ASMLGVT  EQU   ASMVT+132
ASMSLOTV EQU   ASMVT+128
ASMERRS  EQU   ASMVT+124
ASMVSC   EQU   ASMVT+116
ASMSLOTS EQU   ASMVT+112
ASMBKSLT EQU   ASMVT+108
ASMRSV7  EQU   ASMVT+92
ASMPSRB  EQU   ASMVT+88
ASMSRBCT EQU   ASMVT+84
ASMIOCNT EQU   ASMVT+80
ASMBURST EQU   ASMVT+76
ASMPCCWN EQU   ASMVT+72
ASMPCCWC EQU   ASMPCCWQ+4
ASMPCCWA EQU   ASMPCCWQ
ASMRSV6  EQU   ASMVT+48
ASMIORQC EQU   ASMVT+44
ASMIORQR EQU   ASMVT+40
ASMSTAGL EQU   ASMSTAGQ+4
ASMSTAGF EQU   ASMSTAGQ
ASMRSV5  EQU   ASMVT+28
ASMMSGBF EQU   ASMVT+24
ASMEREC  EQU   ASMVT+20
ASMTRPAG EQU   ASMVT+16
ASMGOS   EQU   ASMVT+12
ASMPART  EQU   ASMVT+8
ASMSART  EQU   ASMVT+4
ASMDSSFS EQU   ASMVT+2
ASMWARM  EQU   ASMFLAG2
ASMQUICK EQU   ASMFLAG2
ASMNOTPT EQU   ASMFLAG2
ASMNOTMR EQU   ASMFLAG2
ASMNOSAV EQU   ASMFLAG2
ASMCALLQ EQU   ASMFLAG2
ASMPLPAS EQU   ASMFLAG1
ASMCOMMF EQU   ASMFLAG1
ASMPLPAF EQU   ASMFLAG1
ASMNODPX EQU   ASMFLAG1
ASMRSV1  EQU   ASMFLAG1
ASMNOLCL EQU   ASMFLAG1
ASMNOCWQ EQU   ASMFLAG1
ASMDUPLX EQU   ASMFLAG1
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00573 EQU   NPMNEXT
@RT00764 EQU   OPIOCXIT
@RF00769 EQU   NP1SCAN
@RT00863 EQU   NPMPFTXT
@RT00879 EQU   NPMBPIPG
@RT00881 EQU   NPMQPFTE
@RT01087 EQU   NPMSCHXT
@RT01111 EQU   NPMREALX
@RC01159 EQU   @RC01157
@PB00016 EQU   @PB00017
@RT01240 EQU   NPMSQ01
@RT01243 EQU   NPMSQXIT
@RT01246 EQU   NPMSQXIT
@RT01316 EQU   NIPMLOOK
@RT01347 EQU   NIPTODCK
@RT01355 EQU   NIPTRSR
@RT01357 EQU   NIPTDEC
@PB00025 EQU   @EL00001
@PB00015 EQU   @PB00016
@PB00024 EQU   @PB00025
@PB00014 EQU   @PB00015
@PB00023 EQU   @PB00024
@PB00013 EQU   @PB00014
@PB00022 EQU   @PB00023
@PB00012 EQU   @PB00013
@PB00021 EQU   @PB00022
@PB00011 EQU   @PB00012
@PB00020 EQU   @PB00021
@PB00010 EQU   @PB00011
@PB00019 EQU   @PB00020
@PB00009 EQU   @PB00010
@PB00018 EQU   @PB00019
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IEAVNIPM,(C'PLS1242',0701,77111)
