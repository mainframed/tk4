         TITLE 'IEAVEEXP-THIS IS THE EXIT PROLOGUE'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVEEXP
*
*02*     CSECT-NAME = IEAVEXPR
*
*01*  DESCRIPTIVE-NAME = TYPE 1 EXIT/EXIT PROLOGUE
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = VERSION 1
*
*01*  FUNCTION = SEE ENTRY POINT PURPOSES BELOW
*
*02*     OPERATION = EXIT PROLOGUE RECEIVES CONTROL VIA A BRANCH FROM
*        AN EXITING SVC ROUTINE . IF THE SVC EXITING WAS A TYPE 1 SVC,
*        THEN THE EXIT PROLOGUE DISABLES THE PSW, CLEARS THE TYPE 1
*        SWITCH, MOVES REGISTERS 0,1,15 TO THE TCB REGISTER SAVE AREA,
*        FREES ALL OF THE LOCKS CURRENTLY HELD, AND IF THE FORCE
*        DISPATCHER SWITCH WAS SET OR IF THE TASK IS NON DISPATCHABLE
*        OR IF THE STAGE III EXIT EFFECTOR SWITCH IS SET, PASSES
*        CONTROL TO THE DISPATCHER.
*        IF NONE OF THE ABOVE CONDITIONS IS TRUE, THE CURRENT TASK
*        IS REDISPATCHED BY EXIT PROLOGUE.
*
*        IF THE SVC WAS TYPE 2, 3, OR 4 AND THE RB IS NOT THE LAST RB,
*        THE EXIT PROLOGUE MOVES REGISTERS 0,1,15 TO THE TCB,
*        PERFORMS SVRB EXIT FUNCTIONS (MOVE REGS TO TCB, FREE RB, ETC)
*        AND THEN PERFORMS TYPE 1 EXIT FUNCTIONS AS ABOVE.
*                                                              @Z40FPYK
*        IF THE SVC WAS TYPE 6, EXIT PROLOGUE PERFORMS ONLY    @Z40FPYK
*        NORMAL TYPE 1 DISPATCHER FUNCTIONS.                   @Z40FPYK
*
*01*   NOTES = SEE ENTRY POINT DESCRIPTIONS BELOW
*
*02*     DEPENDENCIES =
*
*        1. THE LOCK MANAGER HAS AN ENTRY THAT WILL FREE THE LOCAL LOCK
*        THE ENTRY IS MADE DISABLED.
*        2. THE LOCAL LOCK BIT IN THE HEIRARCHY MASK IS BIT 31 AND
*        NOT OTHER BITS IN THE HEIRARCHY MASK WORD WILL BE SET IF ONLY
*        THE LOCAL LOCK IS HELD.
*
*
*02*     RESTRICTIONS = NONE
*
*02*     REGISTER-CONVENTIONS = SEE EQUATE SECTION OF MODULE
*
*02*     PATCH-LABEL = NONE(NUCLEUS RESIDENT)
*
*01*  MODULE-TYPE = PROCEDURE
*
*02*     PROCESSOR = ASSEMBLER
*
*02*     MODULE-SIZE = REFERENCE ESD LENGTH IN BEGINNING OF MODULE
*
*02*     ATTRIBUTES = NUCLEUS , ZERO PROTECT KEY,REFRESHABLE,
*        ADDRSPC=FIXED,SUPERVISOR MODE
*
*01*  ENTRY-POINT = IEAVEXPR
*
*02*     PURPOSE = THIS ENTRY ROUTINE PROVIDES THE NORMAL TYPE 1
*        EXITING PROCESS FOR TYPE 1S OR WILL PERFORM NORMAL SVC 3
*        PROCESSING  FOR NON-TYPE 1S IF NOT LAST RB ON TCB. IN EITHER
*        CASE ALL LOCKS ARE RELEASED THAT ARE CURRENTLY HELD.
*        THIS ENTRY WILL CAUSE THE TASK TO BE REDISPATCHED IF IT IS
*        DISPATCHABLE AND THE STAGE III EXIT EFFECTOR BIT IS NOT SET.
*        THE FORCE DISPATCHER SWITCH IS RESET ON ENTRY
*
*02*     LINKAGE = SEE INPUT SECTION BELOW
*
*02*     INPUT =
*
*02*     OUTPUT = NONE UNIQUE TO THIS ENTRY
*
*01*  ENTRY-POINT = IEAVEXP1
*
*02*     PURPOSE = THIS ENTRY PROVIDES SVC ROUTINES THE ABILITY TO
*        ENTER THE DISPATCHER AFTER PERFORMING EXIT FUNCTIONS
*        REGARDLESS OF THE DISPATCHABILITY OF THE CURRENT TASK.
*        OTHERWISE, THE FUNCTION IS IDENTICAL TO IEAVEXPR.
*        THE FORCE DISPATCHER SWITCH IS SET ON ENTRY.
*
*01*  ENTRY-POINT = IEAVEXSV
*
*02*     PURPOSE = THIS ENTRY PROVIDES AN INTERFACE TO THE ESR
*        ROUTINE. CALLERS OF THE CALLDISP SVC DESIRE TO
*        ENTER THE DISPATCHER AFTER PERFORMING EXIT FUNCTIONS
*        REGARDLESS OF THE DISPATCHABILITY OF THE CURRENT TASK.
*        OTHERWISE, THE FUNCTION IS IDENTICAL TO IEAVEXPR.
*        THE FORCE DISPATCHER SWITCH IS SET ON ENTRY.
*
*01*  ENTRY-POINT = IEAVFRLK
*
*02*     PURPOSE = THIS ENTRY WILL FREE ALL LOCKS HELD BY THE CPU. IT
*        WILL DO THIS WITH THE DISABLED OPTION THROUGH A SPECIFIED
*        PARAMETER.
*
*02*     LINKAGE = SEE INPUT SECTION BELOW
*
*02*     INPUT =
*
*
*02*     OUTPUT = NONE UNIQUE TO THIS ENTRY
*
*01*  ENTRY-POINT = EXPEPAT6                                   @Z40FPYK
*                                                              @Z40FPYK
*02*     PURPOSE = THIS ENTRY IS FOR TYPE 6 SVC RETURN=CALLER  @Z40FPYK
*        OPTION. THIS ENTRY IS SOLELY FOR USE BY THE SVC FLIH  @Z40FPYK
*        IEAVESVC.                                             @Z40FPYK
*                                                              @Z40FPYK
*02*     LINKAGE = SEE INPUT SECTION BELOW                     @Z40FPYK
*                                                              @Z40FPYK
*02*     INPUT =   REGISTERS ARE REQUIRED TO BE AS FOLLOWS:    @Z40FPYK
*                  REGISTERS 0-3 =UNUSED                       @Z40FPYK
*                  REGISTER 4    =TCB ADDRESS                  @Z40FPYK
*                  REGISTERS 5-6 =UNUSED                       @Z40FPYK
*                  REGISTER 7    =ASCB ADDRESS                 @Z40FPYK
*                  REGISTERS 9-13=UNUSED                       @Z40FPYK
*                  REGISTER 14   =EPA OF EXIT PROGLOGUE        @Z40FPYK
*                  REGISTER 15   =UNUSED                       @Z40FPYK
*                                                              @Z40FPYK
*02*     OUTPUT = NONE UNIQUE TO THIS ENTRY                    @Z40FPYK
*                                                              @Z40FPYK
*01*  EXIT-NORMAL = IEA0DS
*
*02*     CONDITIONS = THE TYPE 1 SVC WAS EXITING  OR EXIT PROCESSING
*        COMPLETE FOR OTHER SVC TYPES AND ALL NECESSARY
*        CLEAN UP HAS BEEN PERFORMED. EXIT IS TO THE DISPATCHER IF
*        THE FORCE DISPATCHER SWITCH IS SET OR IF THE CURRENT TASK
*        IS NON DISPATCHABLE OR THE STAGE III EXIT EFFECTOR SWITCH IS
*        SET.
*
*02*     OUTPUT =
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-NORMAL = SVC 3
*
*02*     CONDITIONS = TO COMPLETE EXITING PROCESSING FOR A NON-TYPE1
*        SVC ROUTINE AND RB IS LAST IN RB CHAIN
*
*02*     OUTPUT =
*        OUTPUT DATA-NONE
*        OUTPUT REGISTERS-0,1,15 AS PASSED TO EXIT PROLOGUE
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-NORMAL = REDISPATCH CURRENT TASK (SVC CALLER)
*
*02*  CONDITIONS = SVC ROUTINE HAS COMPLETED EXIT FUNCTIONS
*     (ANY TYPE SVC) AND THE TASK IS DISPATCHABLE
*     AND THE FORCE ENTRY SWITCH IS OFF.
*
*02*  OUTPUT =
*     OUTPUT DATA = NONE
*     OUTPUT REGISTERS = 0,1,AND 15 AS PASSED TO EXIT PROLOGUE;
*                        2-14 AS IN SVRB FOR 2,3,4 SVCS; AS IN
*                        TCB FOR TYPE 1-S.
*     OUTPUT ENVIRONMENT = UNLOCKED, PSW AS IN TOP RB (RBOPSW)
*
*01*  EXIT-NORMAL = RETURN TO CALLER
*
*02*     CONDITIONS = IEAVFRLK HAS BEEN ENTERED TO RELEASE ALL LOCKS
*        HELD
*
*02*     OUTPUT =
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-ERROR = ABEND 0F9 REGISTER 15=4 FOR INVALID SVRB    @Z40FPYK
*
*01*  EXTERNAL-REFERENCES = SEE ROUTINES,DATA AREAS,CONTROL-BLOCKS
*     BELOW
*
*02*     ROUTINES =
*        LRELEXPR (SETLOCK BRANCH ENTRY TO RELEASE LOCAL LOCK)
*        IEAVESS (STATUS STOP SYNCH ENTRY)
*        FREECELL (FREE SVRB SPACE)
*        FREEMAIN (FREE SVRB SPACE)
*        SCBPURGE (FREE STAE CONTROL BLOCK)
*        GTF (HOOK IEADISP4 FOR EXIT PROLOGUE RE-DISP TASK)
*        TRDISP (TRACE DISPATCH TASK ENTRY)
*
*02*     DATA-AREAS =  INCLUDED IN CONTROL-BLOCKS BELOW
*              PLUS SAVE AREA FROM EXIT IGC003-IEAVEOR
*
*02*     CONTROL-BLOCKS =
*
*01*  TABLES = NONE
*
*01*  MACROS =
*
*
*        SETFRR
*
*01*  CHANGE-ACTIVITY = Y02715,Y02751,Y02752,Z40FPYK
*
*01*  MESSAGES = NONE
*
*01*  ABEND-CODES = 0F9 WITH REGISTER 15=4                     @Z40FPYK
*
**** END OF SPECIFICATIONS ***/
IEAVEEXP CSECT
         MODID BR=NO
            SPACE 2
*/*IEAVEEXP: CHART EXIT PROLOG */
*/* HEADER
*/*
*/*
*/*
*/*                                                SECTION 3.1.8.4
*/* TYPE 1 EXIT/EXIT PROLOG
*/*                                                PAGE # */
         SPACE 2
         ENTRY IEAVEXPR
         ENTRY IEAVEXP1
*        REGISTER EQUATES
SWTREG   EQU   10                      REGISTER FOR ENTRY SWITCH
BASEREG  EQU   9                       BASE REGISTER
EPREG    EQU   14                      ENTRY POINT ADDRESS
XTCBREG  EQU   4                       TCB BASE REGISTER
ASCBREG  EQU   7                       ASCB ADDRESS REG
JRBREG   EQU   5                       RB ADDR REG
XCVTR    EQU   3                       CVT ADDR REG
DISPRTN  EQU   15                      DISPATCHER ENTRY REG
CCABASE  EQU   11                      LCAA BASE REG
R2       EQU   2                       REGISTER REFERENCE
R10      EQU   10                      REGISTER REFERENCE
R0       EQU   0                       REGISTER REFERENCE
R1       EQU   1                       REGISTER REFERENCE
R11      EQU   11                      REGISTER REFERENCE
R13      EQU   13                      REGISTER REFERENCE
R15      EQU   15                      REGISTER REFERENCE
WORKREG1 EQU   11                      ALL PURPOSE REGISTER
DISREG   EQU   1                       DISABLED INDICATOR
RETREG   EQU   14                      RETURN ADDRESS
EPREG2   EQU   15                      FREE LOCK ROUTINE ENTRY POINT
RETURNRG EQU   14                      RETURN ADDRESS FROM FREE LOCK
*                                      ROUTINE                 @Z40FPYK
R12      EQU   12                      REGISTER 12             @Z40FPYK
R14      EQU   14                      REGISTER 14             @Z40FPYK
TEMPREG  EQU   0                       SAVED RETURN ADDRESS REGISTER
*        CONSTANT EQUATES
C0       EQU   0                       CONSTANT VALUE
C8       EQU   8                       CONSTANT
C1       EQU   1                       CONSTANT
C4       EQU   4                       CONSTANT
REGL214  EQU   52                      LENGTH OF BYTES FOR REGS 2-14
M15      EQU   15                      MASK VALUE
CXFF     EQU   X'FF'                   CONSTANT VALUE
DSTRACEM EQU   X'FA'                   TRACE ENABLED FLAG
ENABLE   EQU   X'03'                   ENABLE MASK
EXIT     EQU   3                       SVC 3 EXIT
M4       EQU   4                       MASK VALUE
LKINDEX1 EQU   600                     OFFSET INTO LOCK INT. TABLE
LKINDEX2 EQU   612                     OFFSET INTO LOCK INT. TABLE
ABENDCND EQU   4                       CONDITION CODE FOR 0F9  @Z40FPYK
*                                      INVALID SVRB ABEND      @Z40FPYK
BADINPUT EQU   X'0F9'                  INVALID SVRB ABEND CODE @Z40FPYK
         EJECT
         ENTRY IEAVEXSV                SVC CALLDISP ENTRY
*/*IEAVEXSV: E FORCE DISPATCHER SVC ENTRY*/
IEAVEXSV DS    0H                      CALLDISP SVC ENTRY LABEL
*/*IEAVEXP1: E FORCE DISP ENTRY */
IEAVEXP1 DS    0H                   TESTLABEL
         SPACE 2
*/* P ESTABLISH ADDRESSABILITY */
         SPACE 2
         USING PSA,0
         BALR  BASEREG,C0              GET ENTRY POINT ADDRESS
         USING *,BASEREG
         L     BASEREG,ADREXPR      GET ADDRESS OF NORM ENTRY+2
         USING IEAVEXPR+2,BASEREG
         SPACE 2
*/* P (,NRMPRO) SET FORCE DISPATCHER SWITCH*/
         SPACE 2
         L     SWTREG,SWFORCE       SET FORCE ENTRY SWITCH
         B     NRMPRO               ENTER MAINLINE CODE
         SPACE 2
*/*IEAVEXPR: E NORMAL PROLOGUE ENTRY*/
IEAVEXPR DS    0H                   TESTLABEL
         SPACE 2
*/* P ESTABLISH ADDRESSABILITY */
         SPACE 2
         USING PSA,0
         BALR  BASEREG,C0              GET ENTRY POINT ADDRESS
         USING IEAVEXPR+2,BASEREG
*/* P RESET FORCE DISPATCHER SWITCH */
         SLR   SWTREG,SWTREG           SET REG TO ZERO FOR SWIT
*/*NRMPRO: P ESTAB TCB,RB,ASCB ADDR, SAVE CALLER R15-1 IN TCB */
NRMPRO   L     XTCBREG,PSATOLD         GET ADDR OF CURRENT TCB
         USING TCB,XTCBREG
QJ71     L     ASCBREG,PSAAOLD         GET ADDR OF CURRENT ASCB
         USING ASCB,ASCBREG
         ST    R0,TCBGRS0              SAVE 0  IN TCB
         ST    R1,TCBGRS1              SAVE REG 1 FOR USER
         ST    R15,TCBGRS15            SAVE 15 IN TCB
         SPACE 2
*/* P RESET NON PREEMPTIBLE TCB BITS */                        @Z40FPYK
         SPACE 2                                               @Z40FPYK
         NI    TCBFLGS1,CXFF-TCBNONPR RESET NP TCB CONDITION   @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* D (NO,TISTY234,YES,) LOCAL LOCK HELD */
         SPACE 2
QJ6      SETLOCK TEST,TYPE=LOCAL,BRANCH=(NOTHELD,TISTY234)
         SPACE 2
*/*TYP1TEST: D (YES,,NO,TY234) TYPE 1 SVC EXITING */
         SPACE 2
TYP1TEST TM    ASCBFLG1,ASCBTYP1       TEST ASCB FOR TYP1 FLAG
         BZ    TY234                   BR IF NOT TYP1 SVC
         SPACE 2
*/*GOTYP1: P DISABLE */
         SPACE 2
GOTYP1   L     CCABASE,PSALCCAV        GET LCCA VIRTUAL ADDRESS
         USING LCCA,CCABASE
QJ10     STNSM LCCAPSMK,CXFF-ENABLE    DISABLE PSW
         SPACE 2
*/* P RESET TYPE 1 SWITCH */
         SPACE 2
         NI    ASCBFLG1,CXFF-ASCBTYP1   CLEAR TYPE 1 SWIT
         SPACE 2
*/* D (YES,,NO,GORELALL) IS LOCAL LOCK THE ONLY LOCK HELD*/
         SPACE 2
*
*              THE HEIRARCHY MASK IS EQUAL F'1' IF ONLY THE LOCAL
*              LOCK IS HELD.
*
         L     R13,PSAHLHI             GET HEIRARCHY MASK      @YM03564
         BCT   R13,GORELALL            BRANCH IF MORE THAN LOCA@YM03564
         SPACE 2
*/* S LRELEXPR:DISABLED ENTRY TO RELEASE LOCAL LOCK */         @Z40FPYK
*              THIS IS A SPECIAL LOCK MANAGER DISABLED ENTRY FOR
*              EXIT PROLOGUE.  EXIT PROL SETS UP THE BASE FOR THE
*              LOCK MANAGER AND BALR ON REG 11 WITH RET IN 14.
         SPACE 2
         L     R13,LLBASE              SET BASE FOR LOCK RTN   @YM03564
         L     R11,LLSENTY             SPECIAL ENTRY ADDR      @YM03564
         BALR  RETREG,R11              LINK THERE              @YM03564
         SPACE 2
*/*ALGON: D (YES,GODISP,NO,) FORCE DISPATCHER SWITCH SET */
         SPACE 2
ALGON    LTR   SWTREG,SWTREG           TEST SWITCH REG
         BM    GODISP                  GO TO DISPATCHER ENTRY
         SPACE 2
*/*STG3TEST: D (YES,GODISP,NO,) IS STAGE 3 BIT SET IN ASCB ?*/ @Z40FPYK
*
*        CAN NOT RELY ON INDIVIDUAL SVC ROUTINES TO GET        @Z40FPYK
*        TO THE DISPATCHER TO GET IRBS EXECUTED.
*
STG3TEST DS 0H                                                 @Z40FPYK
         TM    ASCBFLG1,ASCBS3S        STAGE III BIT ON        @YM03356
         BO    GODISP                  YES, GO TO THE DISP     @YM03356
         SPACE 2
*/* D (YES,,NO,GODISP) IS TASK DISPATCHABLE */
*/* N DISPATACHABLE MEANS PRIM. DISP BITS=0 AND RBWCF =0*/
         SPACE 2
         SLR   WORKREG1,WORKREG1       CLEAR FOR TEST
         CH    WORKREG1,TCBFLGS4       TEST FOR ANY BITS ON
         BNZ   GODISP                  TO DISP IF ANY PRIM BITS ON
         L     JRBREG,TCBRBP           GET TOP RB POINTER
         USING RBSECT,JRBREG
         CLI   RBWCF,C0                TEST WAIT COUNT FOR ZERO
         BNE   GODISP                  GO TO DISP IF NOT ZERO
         SPACE 2
*/* P SET UP TO REDISPATCH THIS TASK */
         SPACE 2
*
*        THINGS THAT EXIT PROLOGUE DOES THAT THE DISP DOES:
*              - MOVE PSW TO LO CORE
*              - TRACE IF ACTIVE
*              - ISSUE HOOK FOR GTF
*              - SET UP FRR STACK
*              - RELOAD GEN PURP REGS
*              - LPSW
*
         SPACE 2
*/* P MOVE RBOPSW TO LO CORE */
         SPACE 2
QJ15     MVC   PSAPSWSV(C8),RBOPSW     SET LOW CORE PSW IMAGE
         SPACE 2
*/* D (NO,NOTRCE,YES,) TRACE ACTIVE */
         SPACE 2
QJ16     L     XCVTR,FLCCVT            GET CVT ADDRESS
         USING CVT,XCVTR
         CLI   CVTTRACE+C1,DSTRACEM   IS TRACE ACTIVE
         BNE   NOTRCE                  NO, BYPASS TRACE
         SPACE 2
*/* S TRDISP: TRACE TCB ACTIVITY */
         SPACE 2
         L     R10,DSTRDISP            TCB TRACE ENTRY POINT
         L     R0,TCBGRS0              GET REG 0               @Z40FPYK
         L     R1,TCBGRS1              GET REG 1               @Z40FPYK
         L     R15,TCBGRS15            GET REG 15
Q13      BALR  R11,R10                 GO TO TRACE OR BR 11 RETURN
         SPACE 2
*/*NOTRCE: S IEADISP4: GTF INTERFACE */
*
*/* N USE SPECIAL EXIT PROLOGUE GTF HOOK TO DIFFER. FROM DISP HOOKS*/
*
         SPACE 2
NOTRCE   DS    0H                      TESTING LABEL
         HOOK  EID=IEADISP4,TYPE=P     TO GTF VIA HOOK
         SPACE 2
*/*  P PURGE OLD NORMAL FRR STACK */
         SPACE 2
QJ14     SETFRR F,WRKREGS=(R1,R2)      FLUSH NORM STACK
         SPACE 2
*/* P RELOAD THE GENERAL PURPOSE REGISTERS */
         SPACE 2
         LM    R0,R15,TCBGRS           RELOAD G.P. REGS
         SPACE 2
*/* R LOAD TASKS PSW AND RET TO CALLER */
         SPACE 2
Q13Z     DS    0H                      TEST LABEL
         LPSW  PSAPSWSV                LOAD PSW TO RETURN TO SVC CALLER
         EJECT                                                 @Z40FPYK
*/*GORELALL: S (,ALGON) SETLOCK: RELEASE ALL LOCKS DISABLED */
         SPACE 2
GORELALL SETLOCK RELEASE,TYPE=ALL,DISABLED,RELATED=(QJ1,'LOCK MAY HAVE *
               BEEN OBTAINED BY SVC ROUTINE OR BY SVC FLIH')
         B     ALGON                   BACK TO MAINLINE        @YM03564
         SPACE 2
*/*GODISP: R RETURN TO DISPATCHER */
         SPACE 2
GODISP   L     DISPRTN,AIEA0DS          GET DISPATCHER ADDRESS
         BR    DISPRTN                 RETURN TO DISPATCHER
         EJECT
*/*TISTY234: S SETLOCK: RELEASE ALL LOCKS NOW HELD*/
         SPACE 2
TISTY234 SETLOCK RELEASE,TYPE=SPIN,RELATED=('SVC ROUTINE HAS OBTAINED Lx
               OCKS')                                          @Z40FPYK
         SPACE 2
*/* S SETLOCK: OBTAIN LOCAL LOCK */
         SPACE 2
QJ1      SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=(QJ9,'RELEASED I*
               N TYPE 1 EXIT PROLOGUE')
         SPACE 2
*/*TY234: P SET TYPE ONE SWITCH */
         SPACE 2
TY234    OI    ASCBFLG1,ASCBTYP1    SETTYPE ONE SWITCH
         SPACE 2
*/* D (YES,GOTOSVC3,NO,) IS THIS THE LAST RB ON CHAIN */
         SPACE 2
         USING RBSECT,JRBREG
         L     JRBREG,TCBRBP           GET ADDR OF TOP RB
         TM    RBSTAB2,RBTCBNXT        TEST IF THIS IS THE LAST ONE
         BO    GOTOSVC3                GO TO ISSUE SVC3 IF LAST
         SPACE 2
*/* P SET UP ENVIRONMENTAL REGS */
         SPACE 2
         L     XCVTR,FLCCVT            GET ADDR OF CVT
         USING CVT,XCVTR
         SPACE 2
*/* N COMPLETE BARRED STOPS IF PERMITTED */
*/* D (NO,,YES,CKRBWAIT) ANY OTHER RBATTN SET */
         SPACE 2
         DROP  JRBREG
         LR    WORKREG1,JRBREG         SET REG
         USING RBSECT,WORKREG1
CKMRB    L     WORKREG1,RBLINK         GET ADDR OF NEXT IN CHAIN
         TM    RBSTAB2,RBATTN          TEST FOR ATTN SET
         BO    CKRBWAIT                BR IF STOPS STILL BARRED
         TM    RBSTAB2,RBTCBNXT        TEST IF AT LAST RB
         BZ    CKMRB                   BR IF NOT TO GET NEXT BR PTR
         DROP  WORKREG1
         USING RBSECT,JRBREG
*/* P RESET TCBATT, PERMIT STOPS AND ATTNS*/
         SPACE 2
         NI    TCBTSFLG,CXFF-TCBATT  RESET ATTN BIT TO PERMIT STOPS
         SPACE 2
*/*CKSTPP: D (YES,,NO,CKRBWAIT) ANY STOPS PENDING */
         SPACE 2
CKSTPP   TM    TCBTSFLG,TCBSTPPR       CHECK FOR STOPS PENDING
         BZ    CKRBWAIT                BR IF NONE PENDING
         SPACE 2
*/* P RESET STOP PENDING, MAKE TCB NON-DISP BY STOP*/
         SPACE 2
         NI    TCBTSFLG,CXFF-TCBSTPPR RESET STOP PENDING BIT
         OI    TCBNDSP2,TCBSTPP        SET SECONDARY BIT TO SAY STOP
         OI    TCBFLGS5,TCBPNDSP       SET PRIMARY BIT
         SPACE 2
*/* S IEAVESSS: STATUS ENTRY FOR STOP SYNCH */
         SPACE 2
         L     R15,AIEAVESS            GET STATUS ENTRY ADDR
QJ72     BALR  RETREG,R15              LINK TO STATUS
         B     DECRTCBC                GO TO DECR READY TCB COUNT
         SPACE 2
*/*CKRBWAIT: D (YES,,NO,RBDQUE) IS  NEXT RB WAITING */
         SPACE 2
CKRBWAIT L     WORKREG1,RBLINK         GET POINTER TO NEXT RB IN CHAIN
         DROP  JRBREG
         USING RBSECT,WORKREG1
         CLI   RBWCF,C0                IS IT ZERO,IE NOT WAITING
         BZ    RBDQUE                  BR IF NOT WAITING
         DROP  WORKREG1
         USING RBSECT,JRBREG
         SPACE 2
*/*DECRTCBC: P DECRMENT COUNT OF READY TCBS IN MEMORY*/
         SPACE 2
DECRTCBC L     R0,ASCBTCBS             GET PRESENT COUNT OF READY TCBS
DECRTCB0 LR    R1,R0                   SET TO DECR
         BCTR  R1,C0                   DECR BY ONE
QJ2      CS    R0,R1,ASCBTCBS          CS NEW COUNT
         BNE   DECRTCB0                BR TO TRY AGAIN IF DIDNT MAKE IT
         L     WORKREG1,RBLINK         GET POINTER TO NEXT RB IN CHAIN
         SPACE 2
*/*RBDQUE: P DEQUEUE RB FROM CHAIN */
         SPACE 2
RBDQUE   ST    WORKREG1,TCBRBP         SET AS TOP RB ON TCB CHAIN
*/* D (YES,,NO,CKDYN) STAE ISSUED */
         SPACE 2
         LA    R0,RBPRFLNA                  SET PREFIX CONSTANT
         LR    R1,JRBREG               SET RB ADDRESS IN R1
         SLR   R1,R0                   SUBTRACT SIZE OF PREFIX
         TM    RBFLAGS1-RBPRFXST(R1),RBSCB  CHECK FOR STAE ISSSUED
         BZ    CKDYN                   BRANCH IF NOT
         SPACE 2
*/* S SCBPURGE: PURGE STAE CONTROL BLOCK */
         SPACE 2
*/* N EXIT PROLOGUE USES EXIT (IGC003) SAVE AREA */
         SPACE 2
         L     R13,ASCBASXB            GET ADDR OF ASXB
         L     R13,ASXBSPSA-ASXB(,R13) ADDR OF SPSA
         L     R13,WSALEXIT-WSAL(,R13)  ADDR OF EXIT SAVE AREA
         LR    R0,JRBREG               SET ADDR OF RB FOR PURGE
         SLR   R1,R1                   INDICATE NOT XCTL
         L     R15,CVTSCBP             GET SCBPURGE ENTRY
QJ73     BALR  RETREG,R15              LINK TO PURGE
         EJECT                                                 @Z40FPYK
*/*CKDYN: P MOVE REGS 2-14 TO TCB FROM EXITING RB*/
         SPACE 2
CKDYN    DS    0H
         MVC   TCBGRS2(REGL214),RBGRS2  SET TCBREGS AS IN RB SAVE
         SPACE 2
*/* D (YES,,NO,ENDRB) IS RB DYNAMIC; RBFDYN=1 ? */             @ZA09499
         SPACE 2
         USING RBPRFXST,JRBREG                                 @Z40FPYK
         S     JRBREG,PRESIZE          ALIGN TO START OF SVRB  @ZM41810
         TM    RBSTAB2,RBFDYN          DETERMINE IF RB FREEABLE@Z40FPYK
         BZ    ENDRB                   BRANCH IF NOT           @ZA09499
         SPACE 2
*/* D (YES,FREEMSVB,NO,) PGM MGR SVRB ? */                     @Z40FPYK
         SPACE 2
         TM    RBCDFLGS,RBNOCELL       PGM MGR SVRB ?          @Z40FPYK
         BO    FREEMSVB                YES, FREEMAIN THE SVRB  @Z40FPYK
         SPACE 2
*/* P SET CONDITIONS IN ORDER TO VALIDITY CHECK SVRB */        @Z40FPYK
         SPACE 2
         L     R12,VALSVRB             PICK UP SVRB ID         @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P ALIGN SVRB TO ID FIELD */                                @Z40FPYK
         SPACE 2                                               @Z40FPYK
         S     JRBREG,PREFSIZE         ALIGN SVRB TO THE ID    @Z40FPYK
*                                      FIELD FOR VALIDITY      @Z40FPYK
*                                      CHECK                   @Z40FPYK
         DROP  JRBREG                                          @ZM41810
         USING MBCB,JRBREG                                     @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* D (YES,,NO,ABEND) IS THE SVRB FROM SVRB POOL ? */          @Z40FPYK
         SPACE 2                                               @Z40FPYK
         C     R12,MBCBID              SVRB FROM SVRB POOL  ?  @Z40FPYK
         BNE   ABEND                   NO, ABEND               @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P SET UP FOR CHAINING PROCESS */                           @Z40FPYK
         SPACE 2                                               @Z40FPYK
         L     R12,ASCBSVRB            GET NEXT SVRB IN CHAIN  @Z40FPYK
         L     R13,ASCBSYNC            SYNCHRONIZATION COUNTER @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/*FREESVRB: P CHAIN BACKWARD SVRB TO POOL */                  @Z40FPYK
         SPACE 2                                               @Z40FPYK
FREESVRB DS    0H                                              @Z40FPYK
         ST    R12,MBCBLINK            CHAIN CURRENT SVRB'S TO @Z40FPYK
*                                      THIS POOL               @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P BUMP SYNCHRONIZATION COUNT */                            @Z40FPYK
         SPACE 2                                               @Z40FPYK
         LA    R15,C1(R13)             BUMP SYNCHRONIZATION    @Z40FPYK
*                                      COUNTER FOR MP SYSTEMS  @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P FREE THE RETURNING SVRB */                               @Z40FPYK
         SPACE 2                                               @Z40FPYK
         LR    R14,JRBREG              FREE RETURNING RB       @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* D (YES,GOTYP1,NO,FREESVRB) UPDATE SVRB POOL ? */           @Z40FPYK
         SPACE 2                                               @Z40FPYK
         CDS   R12,R14,ASCBSUPC        UPDATE THE SVRB POOL    @Z40FPYK
         BE    GOTYP1                  OK -- YES, PROCESS AS   @Z40FPYK
*                                      A TYPE 1 SVC--SVRB IS   @Z40FPYK
*                                      NOW RETURNED TO POOL    @Z40FPYK
         B     FREESVRB                POOL WAS UPDATED BY     @Z40FPYK
*                                      ANOTHER CPU, TRY        @Z40FPYK
*                                      AGAIN TO RETURN THE     @Z40FPYK
*                                      SVRB TO THE POOL        @Z40FPYK
         EJECT                                                 @Z40FPYK
*/*FREEMSVB: S (,GOTYP1) FREEMAIN:FREE SVRB */                 @Z40FPYK
         SPACE 2                                               @Z40FPYK
         CNOP  0,8                                             @Z40FPYK
FREEMSVB DS    0H                                              @Z40FPYK
         DROP  JRBREG                                          @ZM41810
         USING RBPRFXST,JRBREG                                 @ZM41810
         LH    R0,RBSIZE               GET SIZE OF RB          @Z40FPYK
         SLL   R0,3                    DWORDS TIMES 8 = BYTES  @Z40FPYK
         FREEMAIN RC,LV=(0),A=(JRBREG),SP=255,BRANCH=YES       @Z40FPYK
         B     GOTYP1                  BACK TO MAINLINE        @Z40FPYK
         SPACE 2
*/*ENDRB: P (,GOTYP1) INDICATE RB COMPLETE; RBFACTV = 0 */
         SPACE 2
ENDRB    DS    0H                                              @ZA09499
         NI    RBSTAB2,CXFF-RBFACTV    MARK RB INACTIVE        @ZA09499
         B     GOTYP1                  GOTO DISPATCH TASK      @ZA09499
         EJECT                                                 @Z40FPYK
*/*ABEND: P SET UP ABEND CODE 0F9 - R15 = 4 */                 @Z40FPYK
         SPACE 2                                               @Z40FPYK
ABEND    DS    0H                                              @Z40FPYK
         LA    R1,BADINPUT             SET UP ABEND CODE       @Z40FPYK
         LA    R15,ABENDCND            SET UP ABEND CONDITION  @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* R ABEND 0F9 - R15=4 */                                     @Z40FPYK
         SPACE 2                                               @Z40FPYK
         ABEND (1),DUMP,,SYSTEM        ABEND CALLER -- INVALID @Z40FPYK
*                                      SVRB GIVEN AS INPUT     @Z40FPYK
         EJECT                                                 @Z40FPYK
*/*GOTOSVC3: P RESET TYPE 1 SWIT, SAVE REGS 15-1 */
         SPACE 2                                               @Z40FPYK
         DROP  JRBREG                                          @Z40FPYK
         USING RBSECT,JRBREG                                   @Z40FPYK
GOTOSVC3 ST    R0,RBGRSAVE             SAVE REGISTER 0         @YM02939
         ST    R1,RBGRSAVE+C4          SAVE REGISTER 1         @Z40FPYK
         ST    R15,RBGRS15             SAVE 15                 @YM02039
         SPACE 2
         NI    ASCBFLG1,CXFF-ASCBTYP1  RESET TYPE 1 SWITCH
         SPACE 2
*/* S IEAVFRLK: RELEASE ALL LOCKS ENABLED*/
         SPACE 2
         SLR   DISREG,DISREG           CLEAR TO SAY ENABLED
         LA    EPREG2,IEAVFRLK         SET ADDR OF FREELOACK ROUTINE
         BALR  RETREG,EPREG2           LINK TO FREE LOCKS
         SPACE 2
*/* P RESTORE REGS 15-1 */
         SPACE 2
         L     R15,RBGRS15             GET SAVED REG 15        @YM02039
         L     R0,RBGRSAVE             GET SAVED REGISTERS     @YM02039
         L     R1,RBGRSAVE+C4          ZERO AND ONE            @Z40FPYK
         SPACE 2
*/* R ISSUE SVC 3 TO COMPLETE EXIT PROCESSING */
         SPACE 2
QJEXIT   SVC   EXIT                    GO TO IGC003 THROUGH SVC
         EJECT
*/*IEAVFRLK: E ENTRY IEAVFRLK */
         SPACE 2
         ENTRY IEAVFRLK
IEAVFRLK DS    0H
         SPACE 2
*/* P ESTABLISH ADDRESSABILITY */
         SPACE 2
         DROP  BASEREG
         USING *,EPREG2                ESTABLISH ADDRESSABILITY
         SPACE 2
*/* P SAVE RETURN REG */
         LR    TEMPREG,RETREG          SAVE RETURN
*/* D (YES,,NO,RELENB) ENABLED FREELOCK */
         LTR   DISREG,DISREG           TEST FOR ZERO
         BNZ   RELENB                  BR IF DISABLED RELEASE
*/* S SETLOCK: RELEASE ALL LOCKS ENABLED */
QJZ4     SETLOCK RELEASE,TYPE=ALL,RELATED=('ROUTINE CALLER HAS GOTTEN L*
               OCKS')
*/*RETR: R RETURN TO CALLER */
RETR     LR    RETREG,TEMPREG          RESET RETURN REG
         BR    RETREG                  RETURN
*/*
*/*RELENB: S (,RETR) SETLOCK: RELEASE ALL LOCKS DISABLED */
RELENB   SETLOCK RELEASE,TYPE=ALL,DISABLED,RELATED=('ROUTINE CALLER HAS*
                GOTTEN LOCKS')
         LR    RETREG,TEMPREG          SET RETURN REG
         BR    RETREG                  RETURN
         EJECT                                                 @Z40FPYK
*/*EXPEPAT6: E TYPE 6 SVC ENTRY */                             @Z40FPYK
         SPACE 2                                               @Z40FPYK
* SPECIAL ENTRY FOR TYPE 6 SVC TO USE COMMON EXIT PROLOGUE     @Z40FPYK
* FUNCTIONS TO RETURN TO THE CALLER OF THE SVC.                @Z40FPYK
         SPACE 2                                               @Z40FPYK
EXPEPAT6 DS    0H                                              @Z40FPYK
         ENTRY EXPEPAT6                                        @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P ESTABLISH ADDRESSIBILITY FOR THIS ENTRY POINT */         @Z40FPYK
         SPACE 2                                               @Z40FPYK
         BALR  BASEREG,C0              ESTABLISH ADDR          @Z40FPYK
         USING *,BASEREG                                       @Z40FPYK
         L     BASEREG,ADREXPR         SET UP TO MAINLINE      @Z40FPYK
*                                      EXIT PROLOGUE BASE      @Z40FPYK
         USING IEAVEXPR+2,BASEREG                              @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P (,STG3TEST) GO TEST FOR DISPATCHABILITY */               @Z40FPYK
         SPACE 2                                               @Z40FPYK
         B     STG3TEST                TEST FOR DISPATCHABILITY@Z40FPYK
         EJECT                                                 @Z40FPYK
*/* FOOTING
*/*
*/*  */
*/*IEAVEEXP: END EXIT PROLOG */
         SPACE 2
         EXTRN IEA0DS
DSTRDISP DC    V(TRDISP)               TASK ENTRY TO TRACE
LLBASE   DC    V(LLREL)                LOCAL LOCK REL BASE     @YM03564
LLSENTY  DC    V(LRELEXPR)             LOCAL LOCK SPEC ENTRY   @YM03564
AIEA0DS  DC    A(IEA0DS)               DISPATCHER MAIN ENTRY
AIEAVESS DC    V(IEAVESSS)             STATUS STOP SYNCH COMP.ENTRY
ADREXPR  DC    A(IEAVEXPR+2)           EXIT PROLOGUE BASE ADDR
SWFORCE  DC    F'-1'                   SWITCH SETTING
         SPACE 2                                               @Z40FPYK
***********************************************************************
*                                                                     *
*        CONSTANTS FOR IEAVEEXP FUNCTION                              *
*                                                                     *
***********************************************************************
         SPACE 2                                               @Z40FPYK
PREFSIZE DC    AL4(MBCBPXLN)           SVRB POOL PREFIX        @ZM41810
VALSVRB  DC    C'SVRB'                 SVRB VALIDITY CHECK ID  @Z40FPYK
PRESIZE  DC    AL4(RBPRFLNA)           SVRB PREFIX             @ZM41810
         EJECT                                                 @Z40FPYK
         CVT   DSECT=YES
         IHAASXB
         IHAWSAVT
         IHAFRRS
         IHAPSA
         IHALCCA
         IHAASCB
         IKJTCB
         IKJRB
         IHAMBCB                                               @Z40FPYK
         END
