         TITLE 'IEAVEIO- I/O FIRST LEVEL INTERRUPT HANDLER'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVEIO
*
*02*     CSECT-NAME = IEAVEIO
*
*01*  DESCRIPTIVE-NAME = I/O FIRST LEVEL INTERRUPT HANDLER
*
*01*  COPYRIGHT = NONE
*01*  STATUS = VERSION 1
*
*01*  FUNCTION = SEE ENTRY POINT PURPOSES BELOW.
*
*02*     OPERATION = THE I/O FIRST LEVEL INTERRUPT HANDLER RECEIVES
*        CONTROL VIA I/O NEW PSW AFTER AN I/O INTERRUPT. ITS MAIN
*        FUNCTION IS TO SAVE THE STATUS OF THE INTERRUPTED PROGRAM,
*        ENTER IOS TO PROCESS THE INTERRUPT AND UPON INTERRUPT
*        PROCESSING COMPLETION DECIDE WHETHER TO RETURN TO THE
*        INTERRUPTED PROGRAM OR TO THE DISPATCHER.
*
*01*   NOTES = SEE ENTRY POINT DESCRIPTIONS BELOW.
*
*02*        DEPENDENCIES =
*
*           GENERAL I/O FLIH DEPENDENCIES:
*           1. LOCAL LOCK MAY NOT BE ASKED FOR (NOR CMS LOCK) OR
*           ASSUMED THAT IT IS HELD.
*           2. DISABLEMENT MUST BE PRESERVED (EXCEPT IOS WHO MAY
*           ENABLE FOR MORE I/O INTERRUPTS).
*           3. SUPERVISOR STATE,KEY 0 MUST BE MAINTAINED ACROSS
*           INTERFACES.
*           4. NO SVCS CAN BE ISSUED.
*
*           IOS(IECINT ENTRY):
*           1. IOS MUST RETURN TO THE ENTRY POINT DISMISS IN THE
*           SAME STATE AND KEY AS ON INITIAL IOS ENTRY.
*           2. THE SERVICE MANAGER MUST BE USED TO DO WORK IN ANOTHER
*           ADDRESS SPACE.
*
*           DISPATCHER(IEAPDS7 ENTRY):
*           1. THE DISPATCHER MUST SAVE ALL NECESSARY STATUS OTHER
*           THAN THE GENERAL REGISTERS AND PSW IF SWITCHING AWAY
*           FROM THE CURRENT TASK.
*           2. FOR A LOCALLY LOCKED TCB, THE INTERRUPT ID (X'FF..FF')
*           MUST BE PLACED IN THE LOCKWORD ASCBLOCK AND THE CMS LOCK
*           HELD INDICATOR MUST BE SET (ASCBCMSH), IF THE CMS LOCK IS
*           HELD, PLUS UPDATE ALL NECESSARY LOCK TABLES.
*           3. THE DISPATCHER MUST STORE THE TOD CLOCK VALUE IN
*           LCCADTOD WHEN DISPATCHING A TCB INCLUDING THE WAIT-TCB.
*
*02*     REGISTER-CONVENTIONS = REFERENCE EQUATE SECTION OF CODE.
*
*03*        CHARACTER-CODE-DEPENDENCIES = NONE
*
*02*     RESTRICTIONS = NONE
*
*02*     REGISTER-CONVENTIONS = REFERENCE EQUATE SECTION OF CODE.
*
*02*     PATCH-LABEL = NONE (NUCLEUS RESIDENT)
*01*  MODULE-TYPE = PROCEDURE
*
*02*     PROCESSOR = ASSEMBLER
*
*02*     MODULE-SIZE = REFERENCE THE ESD LENGTH AT BEGINNING OF
*                      ASSEMBLY.
*
*02*     ATTRIBUTES = NUCLEUS, ZERO PROTECT KEY, DISABLED, REFRESHABLE,
*                     ADDRSPC=FIXED, SUPERVISOR MODE
*
*01*  ENTRY-POINT = IEAQIO00
*
*02*     PURPOSE = THIS IS THE MAIN ENTRY TO THE I/O FLIH. ITS MAIN
*        FUNCTION IS TO SAVE ALL THE STATUS AT INTERRUPT TIME AND THEN
*        PROCEED TO IOS. IOS MAY CAUSE RECURSIVE INTERRUPTS IN WHICH
*        CASE IOS IS RECURSIVELY ENTERED.
*
*02*     LINKAGE = REFERENCE INPUT SECTION BELOW.
*
*02*     INPUT =
*        INPUT ENVIRONMENT:
*             STATE-DISABLED,SUPERVISOR
*             KEY-0
*             LOCKS REQUIRED-NONE
*        INPUT DATA:
*             ALL CONTROL BLOCKS REFERENCED IN CONTROL BLOCK SECTION.
*        INPUT REGISTERS: NONE
*
*02*     OUTPUT = NONE UNIQUE TO ENTRY.
*
*01*  ENTRY-POINT = DISMISS
*
*02*     PURPOSE = THIS ENTRY IS USED BY IOS WHEN  IT HAS FINISHED
*        ENABLING FOR MORE I/O INTERRUPTS AND ITS PROCESSING IS
*        COMPLETE. THE ENTRY WILL DECIDE WHETHER TO RETURN TO THE
*        INTERRUPTED ROUTINE(SRB ROUTINE), OR RETURN TO THE DISPATCHER.
*        CPU WAIT-TIME IS ALSO COLLECTED IF NECESSARY.
*
*02*     LINKAGE = REFERENCE INPUT SECTION BELOW.
*
*02*     INPUT =  SAME AS INPUT FOR PREVIOUS ENTRY.
*
*02*     OUTPUT = NONE UNIQUE TO THIS ENTRY.
*
*01*  EXIT-NORMAL = IECINT
*
*02*     CONDITIONS = IOS IS ENTERED TO PROCESS THE I/O INTERRUPTION.
*        IT WILL HANDLE RECURSIVE I/O INTERRUPTIONS IF IT HAD ENABLED
*        FOR MORE.
*
*02*     OUTPUT =
*        OUTPUT DATA-NONE.
*        OUTPUT REGISTERS- 5-ENTRY POINT ADDRESS. 4-RETURN ADDRESS
*        OUTPUT ENVIRONMENT - SAME AS ON ENTRY.
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-NORMAL = IEAPDS7
*
*02*     CONDITIONS = THE DISPATCHER IS ENTERED WHEN INTERRUPTION
*        PROCESSING HAS COMPLETED THE TASK IS TO BE PREEMPTED.
*
*02*     OUTPUT = OUTPUT DATA- NONE DIRECTLY.
*        OUTPUT REGISTERS- NONE.
*        OUTPUT ENVIRONMENT- DISABLED, SUPERVISOR STATE,KEY 0,LOCAL AND
*                            CMS LOCKS MAY BE HELD BY TCB.
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-NORMAL = BACK TO INTERRUPTED RUOTINE (VIA LPSW).
*
*02*     CONDITIONS = SRB MODE OR TASK NOT TO BE PREEMPTED.
*
*02*     OUTPUT = NONE
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-ERROR = NONE
*
*01*  EXTERNAL-REFERENCES = SEE ROUTINES,DATA AREAS,CONTROL BLOCKS
*                           BELOW.
*
*02*     ROUTINES =  IECINT(IOS ENTRY), IEAQWAIT(CPU
*                   WAIT-TIME COLLECTION), IEAPDS7 (DISPATCHER ENTRY).
*
*02*     DATA-AREAS = NONE OTHER THAN CONTROL-BLOCKS BELOW.
*
*02*     CONTROL-BLOCKS =
*        PSA R/W
*        LCCA R/W
*        ASCB R
*        ASXB R
*        IHSA W
*        TCB R/W
*        RB W
*        PCCA R
*
*01*  TABLES = NONE
*
*01*  MACROS =
*        HOOK
*
*01*  CHANGE-ACTIVITY = Y02715,Y02751,Y02752
*
*01*  MESSAGES = NONE
*
*01*  ABEND-CODES = NONE
*
**** END OF SPECIFICATIONS ***/
         EJECT
IEAVEIO CSECT
         MODID BR=NO
*/*IEAVEIO: CHART I/O FLIH */
*/* HEADER
*/*
*/*
*/*
*/*                                              SECTION 3.1.8.2
*/* I/O FLIH
*/*                                              PAGE # */
               SPACE 2
*/*IEAQIO00: E IEAQIO00 */
         SPACE 2
         ENTRY IEAQIO00
IEAQIO00 DS    0H
***********************************************************************
*                                                                     *
*                      REGISTER EQUATES                               *
*                                                                     *
***********************************************************************
R0       EQU   0                       GENERAL REGISTER
R2       EQU   2                       GENERAL REGISTER
R8       EQU   8                       GENERAL REGISTER 8      @Z40FPXI
R9       EQU   9                       GENERAL REGISTER
R15      EQU   15                      GENERAL REGISTER
BASEREG  EQU   9                       BASE REGISTER
DISPRTN  EQU   13                      DISPATCHER ENTRY ADDR   @Z40FPXI
CCABASE  EQU   8                       LCCA ADDRESS            @Z40FPXI
WORKREG2 EQU   8                       WORK REGISTER
RBPTR    EQU   5                       RB ADDRESS
XIOS     EQU   5                       IOS ENTRY ADDRESS
XDISMISS EQU   4                       DISMISS ENTRY ADDRESS
CCABASE2 EQU   15                      LCCA BASE ADDRESS
WORKREG  EQU   14                      WORK REGISTER
XWAIT    EQU   6                       WAIT ENTRY ADDRESS
XWAITRT  EQU   2                       WAIT RETURN ADDRESS
LHTOD    EQU   2                       LEFT HALF TIME OF DAY   @Z40FPXI
RHTOD    EQU   3                       RIGHT HALF TIME OF DAY  @Z40FPXI
***********************************************************************
*                                                                     *
*                      CONSTANT EQUATES                               *
*                                                                     *
***********************************************************************
L8       EQU   8                       LENGTH VALUE
L64      EQU   64                      LENGTH VALUE            @Z40FPXI
C0       EQU   0                       DISPLACEMENT VALUE
C4       EQU   4                       DISPLACEMENT VALUE      @Z40FPXI
CXFF     EQU   X'FF'                   MASK VALUE
C32      EQU   32                      DISPLACEMENT VALUE      @Z40FPXI
C36      EQU   36                      DISPLACEMENT VALUE      @Z40FPXI
CC11     EQU   11                      CONDITION CODE = 11     @Z40FPXI
***********************************************************************
*                                                                     *
*                      I/O FLIH MAINLINE                              *
*                                                                     *
***********************************************************************
         USING PSA,0
         SPACE 2
*/* P SAVE 2 REGS FOR ADDR IN PSAGPREG */
         SPACE 2
         ST    R8,PSAGPREG             FREE A WORK REGISTER    @Z40FPXI
         ST    R9,PSAGPREG+C4          FREE A BASE REGISTER    @Z40FPXI
         SPACE 2
*/* P ESTABLISH ADDRESSABILITY */
         SPACE 2
         BALR  BASEREG,C0              ESTABLISH
         USING *,BASEREG               ADDRESSABILITY
         SPACE 2
*/*RECTEST: D (YES,IOPROCES,NO,) I/O RECURSION? */
         SPACE 2
RECTEST  DS    0H                      TEST LABEL
         TM    PSASUP1,PSAIO           IS THIS A RECURSIVE ENTRY
REC      DS    0H                      TEST LABEL
         BO    IOPROCES                IF SO PROCESS RECURSIVE ENTRY
               SPACE 2
*/*NOREC: P MAKE I/O FLIH STACK CURRENT */
               SPACE 2
NOREC    DS    0H                      TEST LABEL
         L     R8,PSASSTK              GET IO FLIH STACK PT    @Z40FPXI
         ST    R8,PSACSTK              IO FLIH STACK = CURRENT @Z40FPXI
         SPACE 2
*/* P SET I/O FLIH BIT PSAIO=1 */
         SPACE 2
         OI    PSASUP1,PSAIO           SET IO FLIH FLAG-RECURSION FLAG
               SPACE 2
*/* P GET LCCA ADDR FROM PSALCCAV */
               SPACE 2
         L     CCABASE,PSALCCAV        GET LOGICAL CCA VIRTUAL ADDRESS
         USING LCCA,CCABASE            ESTABLISH BASE TO LOGICAL CCA
               SPACE 2
*/*SRBMODE: P SAVE GPRS IN LCCAGPGR AND IOOPSW IN LCCAIOPS */
               SPACE 2
SRBMODE  DS    0H                      TEST LABEL
         STM   R0,R15,LCCAGPGR         SAVE REGS IN SAVE AREA
         L     WORKREG,PSAGPREG        REG 8 SAVED INITIALLY   @Z40FPXI
         ST    WORKREG,LCCAGPGR+C32    MOVED TO SAVE AREA      @Z40FPXI
         L     WORKREG,PSAGPREG+C4     REG 9 SAVED INITIALLY   @Z40FPXI
         ST    WORKREG,LCCAGPGR+C36    MOVED TO SAVE AREA      @Z40FPXI
         MVC   LCCAIOPS(L8),FLCIOPSW   SAVE PSW IN SAVE AREA
         SPACE 2
*/*SRBTEST: D (NO,IOLOCAL,YES,IOPROCES) SRB MODE? */
               SPACE 2
SRBTEST  DS    0H                      TEST LABEL
         TM    LCCADSF2,LCCASRBM       IS SRB MODE INDICATED
         BO    IOPROCES                GO TO IOS TO PROCESS    @Z40FPXI
               SPACE 2
*/*IOLOCAL: P STORE TOD CLOCK IN LCCAITOD FOR SMF */
               SPACE 2
IOLOCAL  STCK  LCCAITOD                SAVE TOD CLOCK FOR SMF WAIT TIME
               SPACE 2
*/* D (NO,CLKERR1,YES,IOPROCES) TOD CLOCK WORKING ? */         @ZA18148
               SPACE 2
         BNZ   CLKERR1                                         @ZA18148
               SPACE 2
*/*IOPROCES: P GET IOS ENTRY POINT IN REG 5 */
               SPACE 2
IOPROCES DC    0H'0'
         L     XIOS,IEAVEIOI           GET IOS ENTRY POINT
               SPACE 2
*/*IOSEP: R EXIT TO IECINT */
               SPACE 2
IOSEP    DS    0H                      TEST LABEL
         BALR  XDISMISS,XIOS           GO TO IOS
               SPACE 2
         TITLE 'IEAVEIO- DISMISS ROUTINE'
         ENTRY DISMISS
               SPACE 2
*/*DISMISS: E DISMISS */
*/* P ESTABLISH ADDRESSABILITY USING REG 4 (ENTRY ADDR) */
               SPACE 2
DISMISS  DS    0H
         USING *,XDISMISS              REESTABLISH ADDRESSABILITY
               SPACE 2
*/* P GET LCCA ADDR FROM PSALCCAV INTO REG 15 */
               SPACE 2
         L     CCABASE2,PSALCCAV       GET LOGICAL CCA ADDRESS
         DROP  CCABASE
         USING LCCA,CCABASE2           ESTABLISH BASE TO LCCA VIA REG15
               SPACE 2
*/*SRBTEST2: D (NO,IOTCB,YES,SRBMODE2) SRB MODE? */
               SPACE 2
SRBTEST2 DS    0H                      TEST LABEL
         TM    LCCADSF2,LCCASRBM       IS SRB MODE INDICATED
         BZ    IOTCB                   IF NOT DO TCB EXIT PROCESS
               SPACE 2
*/*SRBMODE2: P MOVE LCCAIOPS TO IOOPSW TO ALLOW FOR LPSW */
               SPACE 2
SRBMODE2 DS    0H                      TEST LABEL
         MVC   FLCIOPSW(L8),LCCAIOPS   MOVE PSW BACK TO IO OLD PSW
*                                      FIELD TO ALLOW FOR LPSW
               SPACE 2
*/* P LOAD REGS FROM LCCAGPGR  */
               SPACE 2
         LM    R0,R15,LCCAGPGR         RESTORE ALL REGS
               SPACE 2
*/* P CLEAR I/O FLIH BIT */
               SPACE 2
         NI    PSASUP1,CXFF-PSAIO      CLEAR I/O FLAG
               SPACE 2
*/* P RESTORE NORMAL STACK TO CURRENT */
               SPACE 2
         MVC   PSACSTK(4),PSANSTK      RESTORE NRM STACK AS CURRENT
               SPACE 2
*/*SRBFIN2: R LPSW BACK TO SRB */
               SPACE 2
SRBFIN2  DS    0H                      TEST LABEL
         LPSW  FLCIOPSW                RETURN TO SRB ROUTINE
               SPACE 2
*/*IOTCB: P GET TCB ADDRESS FROM PSATOLD */
               SPACE 2
IOTCB    DS    0H
         L     WORKREG,PSATOLD         GET CURRENT TCB ADDRESS
         USING TCB,WORKREG                                     @Z40FPXI
               SPACE 2
*/*WAITCK: D (NO,,YES,WAITPROC) CURRENT TCB = WAIT? */         @Z40FPXI
               SPACE 2
WAITCK   DS    0H                      TEST LABEL
         C     WORKREG,AWAITTCB        IS TCB EQUAL TO WAIT TCB
         BE    WAITPROC                GO PROCESS WAIT TASK    @Z40FPXI
         SPACE 2
*/*CHKCLOCK: D (NO,BADCLOCK,YES,) TOD CLOCK WORKING? */        @ZA18148
         SPACE 2
CHKCLOCK L     WORKREG2,PSAPCCAV       GET PCCA ADDRESS TO     @ZA18148
         USING PCCA,WORKREG2           CHECK CLOCK CONDITION   @ZA18148
         TM    PCCATODE,PCCANUTD       TOD CLOCK WORKING?      @ZA18148
         BO    BADCLOCK                NO - CHECK NONPREEMT    @ZA18148
         DROP  WORKREG2                RELEASE WORK REGISTER   @ZA18148
         SPACE 2
*/* P CALCULATE EXECUTION TIME SINCE DISPATCH */               @Z40FPXI
         SPACE 2
         L     LHTOD,LCCAITOD          GET INTERRUPT TOD       @Z40FPXI
         L     RHTOD,LCCAITOD+C4       LEFT AND RIGHT HALVES   @Z40FPXI
         SL    LHTOD,LCCADTOD          SUBTRACT DISPATCH TOD   @Z40FPXI
         SL    RHTOD,LCCADTOD+C4       LEFT AND RIGHT HALVES   @Z40FPXI
         BC    CC11,COMPARE            CARRY -- SMALL DELTA    @Z40FPXI
         BCTR  LHTOD,C0                DECREMENT LH IF NO CARRY@Z40FPXI
         SPACE 2
*/*COMPARE: D (YES,NONPREMT,NO,) EXECUTION INTERVAL > CONSTANT? */
         SPACE 2
COMPARE  DS    0H                                              @Z40FPXI
         C     RHTOD,DELTA              INTERVAL > CONSTANT    @Z40FPXI
         BH    NONPREMT                 TOO BIG--GO DISPATCHER @Z40FPXI
         LTR   LHTOD,LHTOD              CHECK LEFT HALF TOO BIG@Z40FPXI
         BNZ   NONPREMT                 TOO BIG--GO DISPATCHER @Z40FPXI
         SPACE 2
*/*FIXTOD: P STORE THE CLOCK IN LCCADTOD */                    @Z40FPXI
         SPACE 2
FIXTOD   DS    0H
         STCK  LCCADTOD                TIME STAMP = TOD NOW    @Z40FPXI
         SPACE 2
*/* D (NO,CLRITOD,YES,) TOD CLOCK WORKING? */                  @ZA18148
         SPACE 2
         BNZ   CLRITOD                 CLOCK IS BAD            @ZA18148
         SPACE 2
*/* P             ADJUST DISPATCH TOD TO ELIMINATE INTERRUPT TIME */
         SPACE 2
         LCR   LHTOD,LHTOD             COMPLEMENT LH INTERVAL  @Z40FPXI
         LCR   RHTOD,RHTOD             COMPLEMTNT INTERVAL     @Z40FPXI
         AL    LHTOD,LCCADTOD          ADJUST DISPATCH TOD     @Z40FPXI
         AL    RHTOD,LCCADTOD+C4       NEW TOD = NEW - INTERVAL@Z40FPXI
         ST    RHTOD,LCCADTOD+C4       STORE RH DISPATCH TOD   @Z40FPXI
         BC    CC11,STDTOD             NO CARRY -- STORE LH    @Z40FPXI
         BCTR  LHTOD,C0                DECREMENT BY ONE        @Z40FPXI
STDTOD   ST    LHTOD,LCCADTOD          ADJUST LEFT HALF        @Z40FPXI
         SPACE 2
*/* P (,SRBMODE2) ZERO INTERRUPT TOD */                        @Z40FPXI
         SPACE 2
CLRITOD  SLR   WORKREG2,WORKREG2       ZERO A REGISTER         @ZA18148
         ST    WORKREG2,LCCAITOD       ZERO INTERRUPT TOD      @Z40FPXI
         ST    WORKREG2,LCCAITOD+C4    LEFT AND RIGHT HALVES   @Z40FPXI
         B     SRBMODE2                RETURN INTERRUPTED RTN  @Z40FPXI
         SPACE 2
*/*NONPREMT: D (YES,FIXTOD,NO,) NON-PREEMPTABLE */             @ZA18148
         SPACE 2
NONPREMT TM    TCBFLGS1,TCBNONPR       CHECK IF NONPREEMPTABLE @Z40FPXE
         BO    FIXTOD                  ADJUST TOD DO NOT PREMPT@Z40FPXE
         SPACE 2
*/*DISPRET: P GET DISPATCHER ADDRESS */                        @Z40FPXI
         SPACE 2
DISPRET  DS    0H
         L     DISPRTN,AIEAPDS7        GET DISPATCHER ADDRESS  @Z40FPXI
         SPACE 2
*/*LOCKTEST: D (YES,LLHELD,NO,) SETLOCK-- LOCAL LOCK HELD? */  @Z40FPXI
         SPACE 2
LOCKTEST DS    0H
         SETLOCK TEST,TYPE=LOCAL,BRANCH=(HELD,LLHELD)          @Z40FPXI
         SPACE 2
*/*NOLOCAL: P (,DISPRET) SAVE GPRS IN TCB AND IOOPSW IN RB */  @Z40FPXI
         SPACE 2
         MVC   TCBGRS(L64),LCCAGPGR    MOVE REGS TO TCB        @Z40FPXI
         L     RBPTR,TCBRBP            ADDRESS INTERRUPTED RB  @Z40FPXI
         USING RBSECT,RBPTR
         MVC   RBOPSW(L8),LCCAIOPS     MOVE PSW TO RB          @Z40FPXI
         B     IOEXIT                  RETURN TO DISPATCHER    @Z40FPXI
         SPACE 2
*/*LLHELD: P OBTAIN IHSA ADDRESS FROM ASXB             */      @Z40FPXI
         SPACE 2
LLHELD   DS    0H
         L     WORKREG2,PSAAOLD        GET CURRENT ASCB ADDRESS@Z40FPXI
         USING ASCB,WORKREG2           ESTABLISH BASE TO ASCB  @Z40FPXI
         L     WORKREG2,ASCBASXB       GET ASXB ADDRESS        @Z40FPXI
         USING ASXB,WORKREG2           ESTABLISH BASE TO ASXB  @Z40FPXI
         L     WORKREG2,ASXBIHSA       GET ASXB SAVE AREA ADDR @Z40FPXI
         USING IHSA,WORKREG2           ESTABLISH BASE TO SAVE AREA
         SPACE 2
*/* P (,DISPRET) SAVE GPRS IN IHSAGPRS AND IOOPSW IN IHSACPSW */
         SPACE  2
         MVC   IHSAGPRS(L64),LCCAGPGR  MOVE REGISTERS TO IHSA  @Z40FPXI
         MVC   IHSACPSW(L8),LCCAIOPS   MOVE PSW TO IHSA        @Z40FPXI
         B     IOEXIT                  RETURN TO  DISPATCHER   @Z40FPXI
               SPACE 2
*/*WAITPROC: D (YES,DISPRET,NO,) IS CLOCK BAD? */
               SPACE 2
WAITPROC DS    0H
         L     R2,PSAPCCAV             GET PCCA ADDRESS
         L     DISPRTN,AIEAPDS7        GET DISPATCHER ADDRESS  @Z40FPXI
         TM    PCCATODE-PCCA(R2),PCCANUTD IS CLOCK FUNCTIONING
         BO    IOEXIT                  IF NOT BRANCH AROUND IEAQWAIT
               SPACE 2
*/* P REG 2= PTR(RETURN) REG 6= PTR(IEAQWAIT) */
               SPACE 2
         L     XWAIT,AQWAIT            GET IEAQWAIT ADDRESS
               SPACE 2
*/*WAITRTN: L EP=IEAQWAIT-- CALCULATE CPU WAIT TIME */
               SPACE 2
WAITRTN  DS    0H                      TEST LABEL
         BALR  XWAITRT,XWAIT           GO TO IEAQWAIT
               SPACE 2
*/*IOEXIT: P CLEAR I/O FLIH BIT */
               SPACE 2
IOEXIT   NI    PSASUP1,CXFF-PSAIO      CLEAR I/O FLIH FLAG
               SPACE 2
*/*TCBFIN: R EXIT TO DISPATCHER */
               SPACE 2
TCBFIN   DS    0H                      TEST LABEL
         BR    DISPRTN                 EXIT TO DISPATCHER
               SPACE 2
*/*CLKERR1: P (,IOPROCES) CLEAR INTERRUPT TOD */               @ZA18148
               SPACE 2                                         @ZA18148
         USING LCCA,CCABASE            LCCA ADDRESSABILITY     @ZA18148
         DROP  CCABASE2                                        @ZA18148
CLKERR1  SLR   WORKREG,WORKREG         CLOCK BAD - CLEAR ITOD  @ZA18148
         ST    WORKREG,LCCAITOD        ZERO LEFT HALF ITOD     @ZA18148
         ST    WORKREG,LCCAITOD+C4     ZERO RIGHT HALF ITOD    @ZA18148
         DROP  CCABASE                                         @ZA18148
         B     IOPROCES                CONTINUE PROCESSING I/O @ZA18148
               SPACE 2
*/*BADCLOCK: D (YES,CLRITOD,NO,DISPRET) NON-PREEMPTABLE? */    @ZA18148
               SPACE 2
************** HERE IF CLOCK IS BAD *************************  @ZA18148
* IF CLOCK IS BAD AND TASK IS NON-PREEMPTABLE, THEN RETURN TO  @ZA18148
* THE INTERRUPTED TASK. HOWEVER, IF THE CLOCK IS BAD AND THE   @ZA18148
* TASK IS PREEMPTABLE, THEN AN ACCURATE TIME SLICE CANNOT BE   @ZA18148
* CALCULATED. THUS CONTROL WILL BE GIVEN TO THE DISPATCHER     @ZA18148
               SPACE 2
BADCLOCK TM    TCBFLGS1,TCBNONPR       NON-PREEMPTABLE TASK    @ZA18148
         BO    CLRITOD                 YES - RETURN TO IT      @ZA18148
         B     DISPRET                 NO - RETURN TO DISP     @ZA18148
               SPACE 2
*/* FOOTING
*/*
*/* */
*/*IEAVEIO: END I/O FLIH */
               SPACE 2
***********************************************************************
*                                                                     *
*                    CONSTANTS AND STORAGE                            *
*                                                                     *
***********************************************************************
         EXTRN IECINT
         ENTRY IEAVEIOI
IEAVEIOI DC    A(IECINT)               IOS ENTRY ADDRESS
         EXTRN TRIO
ATRIO    DC    A(TRIO)                 TRACE ENTRY ADDRESS
         EXTRN WAITTCB
AWAITTCB DC    A(WAITTCB)              WAIT TCB ADDRESS
         EXTRN IEAQWAIT
AQWAIT   DC    A(IEAQWAIT)             IEAQWAIT ADDRESS
         EXTRN IEAPDS7
AIEAPDS7 DC    A(IEAPDS7)              DISPATCH ENTRY
DELTA    DC    X'00070000'             EXECUTION INTERVAL      @Z40FPXI
         TITLE 'IEAVEIO- PSA MAPPING'
         IHAPSA
         TITLE 'IEAVEIO- LCCA DSECT MAPPING'
         IHALCCA
         TITLE 'IEAVEIO- PCCA DSECT MAPPING'
         IHAPCCA
         TITLE 'IEAVEIO- ASCB DSECT MAPPING'
         IHAASCB
         TITLE 'IEAVEIO- ASXB DSECT MAPPING'
         IHAASXB
         TITLE 'IEAVEIO- IHSA DSECT MAPPING'
         IHAIHSA
         TITLE 'IEAVEIO- TCB DSECT MAPPING'
         IKJTCB
         TITLE 'IEAVEIO- RB DSECT MAPPING'
         IKJRB
         END
