         TITLE 'IEAVERES-RESTART FIRST LEVEL INTERRUPT HANDLER'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVERES
*
*02*     CSECT-NAME = IEAVERES
*
*01*  DESCRIPTIVE-NAME = RESTART FIRST LEVEL INTERRUPT HANDLER
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = VERSION 1
*
*01*  FUNCTION = SEE ENTRY POINT PURPOSES BELOW
*
*02*     OPERATION = THE RESTART FLIH RECEIVES CONTROL WHEN THE RESTART
*        KEY IS HIT BY THE OPERATOR OR A RESTART SIGP IS ISSUED. THE
*        GENERAL REGISTERS OF THE INTERRUPTED PROGRAM ARE SAVED IN A
*        LCCA AREA, AND THE OLD PSW IS MOVED TO ANOTHER LOCATION IN
*        THEPSA.  THE FLIH DETERMINES IF CONTROL IS TO BE PASSED TO
*        DYNAMIC SUPPORT SYSTEM (DSS), RECOVERY TERMINATION MANAGER
*        (RTM), OR THE INTERRUPTION IS TO BE IGNORED (IF THE RESTART
*        RESOURCE IS ALREADY OWNED) AND EXITS ACCORDINGLY.DSS WILL
*        NO LONGER BE INITIALIZED. THE RESTART FLIH WILL NOT ROUTE
*        CONTROL TO DSS SINCE IT IS NOT SUPPORTED FOR SU7. @ZM43089
*
*01*   NOTES = SEE ENTRY POINT DESCRIPTIONS BELOW
*
*02*     DEPENDENCIES =
*        rtm(restart entry):
*        1. ALL STATUS SAVING NECESSARY OTHER THAN THE GENERAL
*        REGISTERS WILL BE DONE BY RTM.
*        2. RTM WILL CLEAR THE RESTART RECURSION BYTE
*
*        DSS(IQARIH00 ENTRY):
*        1. DSS WILL CLEAR THE RECURSION BYTE AND RESTORE THE FRR STACK
*        (EXCEPT WHEN CONTROL IS TO BE PASSED TO RTM THROUGH THE FLIH).
*        2. IF CONTROL IS TO  BE PASSED TO RTM, DSS WILL RE-ENTER THE
*        THE RESTART FLIH AT RESDSSNO WITH THE REGISTERS THE SAME
*        AS WHEN THE FLIH PASSED CONTROL TO DSS.  IN ADDITION, RTM MUST
*        OWN THE RESTART LOCK WORD.
*
*03*        CHARACTER-CODE-DEPENDENCIES = NONE
*
*02*     RESTRICTIONS = NONE
*
*02*     REGISTER-CONVENTIONS = SEE EQUATE SECTION OF MODULE
*
*02*     PATCH-LABEL = NONE (NUCLEUS RESIDENT)
*01*  MODULE-TYPE = PROCEDURE
*
*02*     PROCESSOR = ASSEMBLER
*
*02*     MODULE-SIZE = REFERENCE ESD LENGTH AT BEGINNING OF MODULE
*
*02*     ATTRIBUTES = NUCLEUS ,ZERO PROTECT KEY,DISABLED,REFRESHABLE,
*        ADDRSPC=FIXED,SUPERVISOR MODE
*
*01*  ENTRY-POINT = IEAVRSTR
*
*02*     PURPOSE = THIS IS THE ENTRY TAKEN ON A RESTART INTERRUPT. ITS
*        FUNCTION IS TO SAVE THE GENERAL REGISTERS IN THE LCCA, AND
*        ROUTE CONTROL.  THE RESTART FLIH PASSES CONTROL TO DSS IF IT
*        IS MONITORING THE SYSTEM, OR TO RTM IF DSS IS NOT ACTIVE.
*
*02*     LINKAGE = SEE INPUT SECTION BELOW
*
*02*     INPUT =
*        INPUT ENVIRONMENT:
*        STATE-DISABLED,SUPERVISOR
*        KEY-0
*        LOCKS REQUIRED-NONE
*        INPUT DATA:
*        ALL CONTROL BLOCKS LISTED BELOW
*        INPUT REGISTERS:
*        NONE
*
*02*     OUTPUT = NONE UNIQUE TO THIS ENTRY
*
*01*  1. EXIT-NORMAL = RTM(RESTART)
*
*02*     CONDITIONS = RTM IS ENTERED TO PROCESS THE RESTART INTERRUPT
*        AFTER GENERAL REGISTERS HAVE BEEN SAVED, THE PSW MOVED, AND
*        THE RESTART RESOURCE ACQUIRED FOR RTM.
*
*02*     OUTPUT =
*        OUTPUT DATA-LCCARSGR CONTAINS GENERAL REGS
*                    PSARPSW CONTAINS THE PSW
*                    CURRENT FRR STACK = RESTORED
*                    RESTART RECURSION BYTE SET
*                    RESTART LOCK WORD HELD BY RTM
*        NO OTHER OUTPUT
*
*02*     RETURN CODES = NONE
*
*01*  2. EXIT-NORMAL = DSS(IQARIH00)
*
*02*     CONDITIONS = DSS IS ENTERED TO MONITOR THE RESTART INTERRUPT
*        AFTER GENERAL REGISTERS HAVE BEEN SAVED AND THE PSW MOVED.
*
*02*     OUTPUT =
*        OUTPUT DATA-LCCARSGR CONTAINS GENERAL REGS
*                    PSARPSW CONTAINS THE PSW
*                    CURRENT FRR STACK = RESTART FLIH
*                    RESTART RECURSION BYTE SET
*                    RESTART LOCK WORD HELD BY DSS
*        NO OTHER OUTPUT
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-ERROR = NONE
*
*01*  EXTERNAL-REFERENCES = SEE ROUTINES,DATA AREAS,CONTROL-BLOCKS
*     BELOW
*
*02*     ROUTINES = RTM(RESTART)
*                   DSS(IQARIH00)
*
*02*     DATA-AREAS = ALL INCLUDED IN CONTROL-BLOCKS BELOW
*
*02*     CONTROL-BLOCKS =
*        PSA R/W
*        LCCA R/W
*        CVT R/W
*
*01*  TABLES = NONE
*
*01*  MACROS = CALLRTM
*
*02*    SERIALIZATION = DISABLE
*
*01*  CHANGE-ACTIVITY = Y02715,Y02751,Y02752
*
*01*  MESSAGES = NONE
*
*01*  ABEND-CODES = NONE
*
**** END OF SPECIFICATIONS ***/
         EJECT
IEAVERES CSECT
         MODID BR=NO
            SPACE 2
*/*IEAVERES: CHART RESTART FLIH */
*/* HEADER
*/*
*/*
*/*
*/*                                                SECTION 3.1.8.3
*/* RESTART FLIH
*/*                                                PAGE # */
*/*IEAVRSTR: E IEAVRSTR */
            SPACE 2
         ENTRY IEAVRSTR
IEAVRSTR DS    0H
***********************************************************************
*                                                                     *
*                          EQUATES                                    *
*                                                                     *
***********************************************************************
R0       EQU   0                  GENERAL REG 0
R1       EQU   1                  GENERAL REG 1
R5       EQU   5                  GENERAL REGISTER 5
R6       EQU   6                  GENERAL REGISTER 6
R9       EQU   9                  GENERAL REG 9
R14      EQU   14                 GENERAL REG 14
R15      EQU   15                 GENERAL REG 15
CVTBASE  EQU   7                  BASE FOR CVT DSECT
TEMP     EQU   8                  TEMPORARY WORK REGISTER
LCCABASE EQU   8                  BASE FOR LCCA DSECT
RESTWD   EQU   3                  RESTART WORD CONTROLS RESOURCE
RRSTWD   EQU   4                  RIGHT HALF OF RESTART WORD
OWNER    EQU   2                  CURRENT OWNER OF RESTART RESOURCE
RECURON  EQU   X'FF'              MASK FOR PSARECUR BIT ON
ZERO     EQU   X'00'              MASK FOR PSARECUR BIT OFF
MRIGHT   EQU   B'0011'            MASK FOR RIGHT HALF OF RESTART WORD
FMASK    EQU   B'0001'            MASK FOR F IN RESTART WORD ID FIELD
SIXTN    EQU   16                 CONSTANT VALUE
CX04     EQU   X'04'              MASK TO ENABLE FOR DAT       @YM08516
CXE0     EQU   X'E0'              DISABLE SWITCH SET ON        @YM08516
C4       EQU   4                  CONSTANT VALUE               @YM08516
L4       EQU   4                  LENGTH VALUE                 @YM08516
L8       EQU   8                  LENGTH VALUE                 @YM08516
L24      EQU   24                 LENGTH VALUE
***********************************************************************
*                                                                     *
*                      IEAVERES MAINLINE                              *
*                                                                     *
***********************************************************************
         USING PSA,0
         USING CVT,CVTBASE
         SPACE 2
*/* P SAVE A REG IN PSA FOR TEMPORARY ADDRESSABILITY */
         SPACE 2
         ST    TEMP,PSARSREG      SAVE REG IN PSA
         BALR  TEMP,0             ESTABLISH ADDRESSABILITY
         USING *,TEMP
         SPACE 2
*/* PSACHK: D (YES,RECURCHK,NO,) IS PSA REFRESH DISABLED? */
         SPACE 2
PSACHK   DS    0H
         TM    PSADSSFL,CXE0      IS PSA REF DISABLED?         @YM08516
         BM    RECURCHK                                        @YM08516
         SPACE 2
*/* D (NO,RECURCHK,YES,NPSWREF) DAMAGE TO NPSW'S? */
         SPACE 2
         CLC   FLCENPSW(L8),EXTNPSWD     VERIFY EXT NPSW       @YM08516
         BNE   NPSWREF                                         @YM08516
         CLC   FLCINPSW(L8),IONPSWD     VERIFY I/O NPSW        @YM08516
         BNE   NPSWREF                                         @YM08516
         CLC   FLCSNPSW(L8),SVCNPSWD    VERIFY SVC NPSW        @YM08516
         BNE   NPSWREF                                         @YM08516
         CLC   FLCPNPSW(L8),PCNPSWD  VERIFY PC NPSW            @YM08516
         BE    RECURCHK                                        @YM08516
         SPACE 2
*/*NPSWREF: P REFRESH NPSW'S */
         SPACE 2
NPSWREF  MVC   FLCENPSW(L24),EXTNPSWD REFRESH THE PSW'S        @YM08516
         MVC   FLCINPSW(L8),IONPSWD                            @YM08516
         MVC   FLCCVT(L4),ADDRCVT REFRESH CVT ADDRESS          @YM08516
         EJECT
*/*RECURCHK: D (NO,PSACHK,YES,) RESTART RECURSION BYTE ON? */
         SPACE 2
RECURCHK DS    0H
         CLI   PSARECUR,ZERO      IS RESTART FLIH RECURSION BYTE ON?
         BE    NORECUR            IF NOT, CONTINUE
         SPACE 2
*/* P RESTORE REGISTER */
         SPACE 2
         L     TEMP,PSARSREG      RESTORE REGISTER USED
         SPACE 2
*/* R LPSW FROM RESTART OPSW */
         SPACE 2
         LPSW  FLCROPSW           IF ALREADY ON, IGNORE INTERUPT
         EJECT
*
*                                 NOTE: THERE IS A SEQUENCE PROBLEM
*                                   IN FLIPPING THE FRR STACK AND
*                                   SETTING THE RECURSION INDICATOR.
*
*                                 A)SET BYTE AND FLIP STACK -- IF
*                                   RECOVERY IS INITIATED IN BETWEEN
*                                   FRR WILL NEVER GET TO THE RESTART
*                                   STACK TO CLEAR THE RECURSION BYTE
*                                   THUS RESTART WILL BE DISABLED
*                                   UNTIL NEXT IPL.
*
*                                 B)FLIP STACK AND SET BYTE -- IF
*                                   RESTART IS HIT IN BETWEEN, THE
*                                   STACK MAY BE SET TWICE
*
         SPACE 2
*/*NORECUR: P FRR STACK = RESTART STACK */
         SPACE 2
NORECUR  L     TEMP,PSACSTK       STORE CURRENT FRR IN RES FRR SA
         ST    TEMP,PSARSAV
         L     TEMP,PSARSTK       MAKE RESTART FRR CURRENT
         ST    TEMP,PSACSTK
         DROP  TEMP
         SPACE 2
*/* P TURN ON RECURSION BIT */
         SPACE 2
         OI    PSARECUR,RECURON   SET RES FLIH RECUR BIT ON
         SPACE 2
*/* P SAVE GP REGS IN LCCA */
         SPACE 2
         USING LCCA,LCCABASE
         L     LCCABASE,PSALCCAV  GET VIRTUAL ADDR OF LCCA
         STM   R0,R15,LCCARSGR    SAVE ALL REGS IN LCCARSGR
         SPACE 2
*/* P ESTABLISH ADDRESSABILITY */
         SPACE 2
         BALR  9,0                ESTABLISH ADDRESSABILITY
         USING *,9                REG 9 IS BASE REG
         L     R1,PSARSREG        GET INITIALLY SAVED REG
         ST    R1,LCCARSGR+32     SAVE IT IN LCCA SAVE AREA
         SPACE 2
*/* P SAVE RESTART OPSW IN PSA */
         SPACE 2
         MVC   PSARSPSW(8),FLCROPSW SAVE RESTART OPSW IN PSA
         SPACE 2
*/* P PUT CPUID IN LEFT HALF OF MODEL RESTART WORD */
         SPACE 2
         L     CVTBASE,FLCCVT     BASE FOR CVT FROM LOC 16 IN FLC
         MVC   FLCTRACE,CVTTRCA   REFRESH TRACE TABLE HEADER   @YA02352
         LH    RESTWD,PSACPULA    GET LOGICAL CPU ID
         SLL   RESTWD,SIXTN       SHIFT TO LEFT HALF OF RES WD
         SPACE 2
*/* D (NO,RESDSSNO,YES,) IS DSS ACTIVE? */
         SPACE 2
         CLI   CVTDSSAC,ZERO      CHECK IF DSS ACTIVE
         BE    RESDSSNO           DSS NOT ACTIVE
         SPACE 2
*/* P CONSTRUCT DSS RESTART WORD */
         SPACE 2
         O     RESTWD,X00DF       PUT DSS ID IN RIGHT HALF RESTART WORD
         SPACE 2
*/* P (SUCC,DSSEXIT,UNSC,) CS ON DSS RESTART WORD */
         SPACE 2
         SR    OWNER,OWNER        CLEAR OWNER REGISTER
*                                 COMPARE AND SWAP DSS RESTART WORD
*                                 TO ONE IN CVT
         CS    OWNER,RESTWD,CVTRSTWD
         BZ    DSSEXIT            SUCCESS -- CONTROL PASED TO DSS
         SPACE 2
*/* D (NO,IGNORE,YES,) RTM OR DSS ALREADY OWNS RESTART? */
         SPACE 2
         CLM   OWNER,FMASK,RF+1   CHECK IF DSS OR RTM IS THE OWNER
         BNE   IGNORE             IF NOT, IGNORE THE INTERRUPT
         SPACE 2
*/*DSSEXIT: R PASS CONTROL TO DSS */
         SPACE 2
DSSEXIT  L     R15,DSSEP          SUCCESS -- CONTROL PASSED TO DSS
         BALR  R14,R15            RETURN ADDR IN REG 14
         SPACE 2
*/*RESDSSNO: D (YES,,NO,RTMEXIT) DSS TO BE INITIALIZED? */
         SPACE 2
         ENTRY RESDSSNO
RESDSSNO NOPR  R0                 DSS NOT ACTIVE
         CLI   PSADSSGO,ZERO      CHECK IF FLIH SHOULD INITIALIZE DSS
         BE    RTMEXIT            IF NOT, PASS CONTROL TO RTM @ZA14259
         SPACE 2
*/*DSSGO: P CONSTRUCT DSS RESTART WORD */
         SPACE 2
DSSGO    ICM   RESTWD,MRIGHT,DF   PUT DSS ID IN RIGHT HALF RESTART WORD
         SR    OWNER,OWNER        CLEAR THE OWNER REGISTER
         SPACE 2
*/* P (SUCC,DSSEXIT,UNSC,) CS ON DSS RESTART WORD */
         SPACE 2
         CS    OWNER,RESTWD,CVTRSTWD
*                                 COMPARE AND SWAP DSS RESTART WORD
*                                 TO THE ONE IN CVT
         BZ    DSSEXIT            SUCCESS -- PASS CONTROL TO DSS
         SPACE 2
*/*RTMEXIT: P CONSTRUCT RTM RESTART WORD */
         SPACE 2
RTMEXIT  ICM   RESTWD,MRIGHT,RF   PUT RTM ID IN RIGHT HALF RESTART WORD
         SPACE 2
*/* P (SUCC,RESRTMXT,UNSC,) CS ON RTM RESTART WORD */
         SPACE 2
         SR    OWNER,OWNER        CLEAR THE OWNER REGISTER
*                                 COMPARE AND SWAP RTM RESTART WORD
*                                 TO ONE IN CVT
         CS    OWNER,RESTWD,CVTRSTWD
         BZ    RESRTMXT           SUCCESS -- CONTROL PASSED TO RTM
         SPACE 2
*/* D (NO,IGNORE,YES,) DOES RTM OWN RESTART ALREADY? */
         SPACE 2
         CLM   OWNER,MRIGHT,RF    CHECK IF RTM ALREADY OWNS RESTART
         BNE   IGNORE             IF NOT,IGNORE INTERRUPT
         SPACE 2
*/* P UPDATE CPUID IN RESTART WORD */
         SPACE 2
         ST    RESTWD,CVTRSTWD    IF SO, UPDATE CPU ID IN RESTART WORD
         SPACE 2
*/*RESRTMXT: P RESTORE FRR STACK */
         SPACE 2
RESRTMXT MVC   PSACSTK(4),PSARSAV RESTORE FRR STACK
         SPACE 2
*/* L () CALL RTM(RESTART) */
         SPACE 2
*                                 PROCEED TO RTM TO INITIATE THE
         CALLRTM TYPE=RESTART          RECOVERY PROCESS
         SPACE 2
*/*IGNORE: P RESTORE GENERAL REGISTERS */
         SPACE 2
IGNORE   DS    0H                 TEST LABEL
         LM    R0,R15,LCCARSGR    RESTORE GP REGISTERS FROM LCCA
         ST    R9,PSARSREG        SAVE A REG IN PSA
         SPACE 2
*/* P RESTORE FRR STACK */
         SPACE 2
         L     R9,PSARSAV         OBTAIN OLD CURRENT FRR
         ST    R9,PSACSTK         RESTORE TO CURRENT FRR
         L     R9,PSARSREG        RESTORE THE REGISTER FROM PSA
         SPACE 2
*/* P TURN OFF RECURSION BYTE */
         SPACE 2
         NI    PSARECUR,ZERO      TURN OFF RES FLIH RECUR BYTE
         SPACE 2
*/* R LPSW FROM RESTART OPSW */
         SPACE 2
         LPSW  PSARSPSW           RETURN VIA LPSW FROM RES OLD PSW
         SPACE 2
*/* FOOTING
*/*
*/*  */
*/*IEAVERES: END RESTART FLIH */
         SPACE 2
***********************************************************************
*                                                                     *
*                       CONSTANTS AND STORAGE                         *
*                                                                     *
***********************************************************************
         EXTRN IQARIH00           DSS ENTRY POINT
DSSEP    DC    V(IQARIH00)
RF       DC    CL2'RF'            RTM ID FOR RESTART WORD
X00DF    DS    0F                 ALLIGN TO FULL WORD
         DC    H'00'
DF       DC    CL2'DF'            DSS ID FOR RESTART WORD
         DS    0F                 ALLIGN TO FULL WORD          @YM08516
         EXTRN IEACVT
ADDRCVT  DC    V(IEACVT)          ADDRESS OF CVT               @YM08516
EXTNPSWD DC    XL4'040C0000'
AIEAQEX  DC    V(IEAQEX00)
SVCNPSWD DC    XL4'040C0000'
AIEAQSC  DC    V(IEAQSC00)
PCNPSWD  DC    XL4'000C0000'
AIEAQPK  DC    V(IEAQPK00)
IONPSWD  DC    XL4'040C0000'
AIEAQIO  DC    V(IEAQIO00)
         TITLE 'IEAVERES- PSA MAPPING'
         IHAPSA
         TITLE 'IEAVERES- LCCA DSECT MAPPING'
         IHALCCA
         TITLE 'IEAVERES- CVT DSECT MAPPING'
         CVT   DSECT=YES,PREFIX=NO,LIST=YES
         END
