         TITLE 'IEAVEMS0 - PROLOGUE'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVEMS0
*
*02*     CSECT-NAME = IEAVEMS0
*
*01*  DESCRIPTIVE-NAME = MEMORY SWITCH
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = CHANGE LEVEL 0
*
*01*  FUNCTION = THIS MODULE NOTIFIES THE DISPATCHER THAT IT SHOULD
*     SWITCH INTO ANOTHER ADDRESS SPACE OR START SEARCHING FOR WORK AT
*     THE TOP OF THE ASCB DISPATCHING QUEUE BY MODIFYING THE "PSAANEW"
*     FIELD.  WHEN THE INPUT TO THIS MODULE IS AN ASCB ADDRESS, IT
*     SEARCHES FOR THE CPU RUNNING THE LOWEST PRIORITY ADDRESS
*     SPACE AND, IF THE INPUT ASCB IS OF HIGHER PRIORITY, STORES THE
*     INPUT ASCB ADDRESS INTO THE "PSAANEW" FIELD OF THE CHOSEN CPU.
*     WHEN THE INPUT TO THIS MODULE IS ZERO (IN THE INPUT REGISTER  -
*     ONE), IT STORES ZEROS INTO THE "PSAANEW" FIELDS OF ALL THE CPU'S.
*     IT THEN SIGNALS THE CPU(S) TO ENTER THE DISPATCHER. WHEN THE
*     DISPATCHER SCANS FOR WORK, THE "PSAANEW" AND "PSAAOLD" FIELDS
*     WILL BE DIFFERENT, AND, IF THERE IS AN ASCB ADDRESS IN "PSAANEW",
*     THE DISPATCHER WILL SWITCH TO THE NEW ADDRESS SPACE.  IF THERE IS
*     A ZERO IN "PSAANEW", THE DISPATCHER WILL SCAN FROM THE TOP OF THE
*     ASCB DISPATCHING QUEUE TO FIND THE HIGHEST PRIORITY READY ADDRESS
*     SPACE.
*
*02*     OPERATION = THIS MODULE USES THE "CPU'S ALIVE" MASK (CSDCPUAL)
*        TO DETERMINE THE CPUS WHICH ARE AVAILABLE TO EXECUTE IN THE
*        ADDRESS SPACE.  THE 16-BIT MASK IS LOADED INTO THE HIGH ORDER
*        TWO BYTES OF A REGISTER, AN "ALR" INSTRUCTION IS DONE ON THE
*        REGISTER AND THE CONDITION CODE INIDCATES WHETHER OR NOT THE
*        CPU IS AVAILABLE.  THE PCCA VECTOR TABLE IS ALSO SCANNED AT
*        THE SAME TIME AND THE CORRESPONDING ENTRY IS PICKED UP WHEN
*        THE CONDITION CODE INDICATES THAT THERE IS A CPU ALIVE.  THE
*        PCCA IS USED TO ADDRESS THE PSA'S OF OTHER CPU'S TO ACCESS THE
*        "PSAANEW" FIELDS. THE SEQUENCE NUMBER OF THE ASCB WHOSE
*        ADDRESS APPEARS IN "PSAANEW" IS COMPARED AGAINST THE SEQUENCE
*        NUMBER OF THE ASCB WHICH WAS INPUT TO MEMORY SWITCH.  IF THE
*        SEQUENCE OF "PSAANEW"'S ASCB IS HIGHER THAN THE INPUT ASCB, IT
*        IS OF LOWER PRIORITY AND THEREFORE CAN BE PREEMPTED BY THE NEW
*        ADDRESS SPACE.  IF THE CPU CHOSEN TO BE PREEMPTED IS OTHER
*        THAN THE CURRENT CPU ON WHICH MEMORY SWITCH IS RUNNING, THE
*        CPU IS SIGNALLED TO REENTER THE DISPATCHER THROUGH THE IPC
*        FUNCTION.
*
*01*   NOTES = REGISTER 9 IS USED AS A BASE REGISTER, REGISTER 10 IS
*      USED TO ADDRESS THE CVT, REGISTER 11 IS USED TO ADDRESS THE
*      PCCAVT AND REGISTER 12 IS USED AS THE BASE ADDRESS FOR THE CSD.
*      REGISTERS 2 THROUGH 14 ARE SAVED INTO THE GLOBAL SAVE AREA
*      SET ASIDE FOR MEMORY SWITCH.  REGISTERS 0,1 AND 15 ARE NOT
*      RETURNED TO THE CALLER.
*
*02*     DEPENDENCIES = THE GLOBAL DISPATCHER LOCK MUST BE HELD ON
*        ENTRY TO MEMORY SWITCH BECAUSE THE "PSAANEW" FIELDS ARE
*        CONTROLLED UNDER THE LOCK.
*
*03*        CHARACTER-CODE-DEPENDENCIES = MEMORY SWITCH IS CHARACTER
*           CODE INDEPENDENT.
*
*02*     RESTRICTIONS = NONE
*
*02*     REGISTER-CONVENTIONS = THIS TOPIC IS COVERED UNDER THE SECTION
*        ENTITLED "CSECT - EQUATES".
*
*02*     PATCH-LABEL = NUCLEUS PATCH AREA
*
*01*  MODULE-TYPE = PROCEDURE
*
*02*     PROCESSOR = ASSEMBLER-370R
*
*02*     MODULE-SIZE = SEE MODULE ESD LISTING FOR SIZE
*
*02*     ATTRIBUTES = NUCLEUS×DISABLED×ZERO PROTECT KEY×REFRESHABLE×
*        FIXED×SUPERVISOR MODE
*
*01*  ENTRY-POINT = IEAVEMS0
*
*02*     PURPOSE = MAIN MEMORY SWITCH ENTRY POINT - ENTERED TO CAUSE
*        THE ROUTINE TO INDICATE A MEMORY SWITCH.
*
*02*     LINKAGE = REGISTER ONE MAY CONTAIN EITHER AN ASCB ADDRESS, A
*        COMPLEMENTED ASCB ADDRESS OR ZERO.  IF REGISTER ONE IS
*        COMPLEMENTED, REGISTER ZERO MUST CONTAIN THE CPU AFFINITY MASK
*        INDICATING THE CPU(S) ON WHICH THIS ADDRESS SPACE IS TO RUN.
*        REGISTER 14 CONTAINS THE RETURN ADDRESS.
*
*02*     INPUT = NONE OTHER THAN THE REGISTERS LISTED UNDER "LINKAGE".
*
*02*     OUTPUT = THE "PSAANEW" FIELD(S) MAY BE MODIFIED EITHER TO ZERO
*        OR TO THE ADDRESS OF THE INPUT ASCB.
*
*02*     REGISTERS-SAVED = 2 - 14 ARE SAVED INTO THE GLOBAL SAVE AREA
*        SET ASIDE FOR MEMORY SWITCH.
*
*02*     REGISTER-USAGE = REGISTER ZERO MAY CONTAIN THE CPU AFFINITY
*        INDICATOR, REGISTER ONE WILL CONTAIN EITHER AN ASCB ADDRESS OR
*        ZERO, REGISTER NINE IS USED AS A BASE REGISTER, REGISTER TEN
*        IS USED TO ADDRESS THE CVT, REGISTER ELEVEN IS USED TO ADDRESS
*        THE PCCAVT, REGISTER TWELVE IS USED TO ADDRESS THE CSD,
*        REGISTER THIRTEEN IS USED TO KEEP TRACK OF THE REGISTER SAVE
*        AREA ADDRESS, AND THE OTHER REGISTERS ARE USED AS WORK
*        REGISTERS.
*
*02*     REGISTERS-RESTORED = REGISTERS 2 THROUGH 14.
*
*01*  ENTRY-POINT = IEAVEMS1
*
*02*     PURPOSE = THIS ENTRY POINT IS USED BY IPC (SWITCH) FOR THE
*        SOLE PURPOSE OF CAUSING THE CPU TO GO THROUGH THE DISPATCHER.
*        WHEN AN "IPC SWITCH" IS ISSUED ON ONE CPU, THE IPC SERVICE
*        ROUTINE WILL CAUSE AN EXTERNAL INTERRUPT ON THE OTHER CPU.
*        WHEN THE EXTERNAL FLIH IS ENTERED IT WILL PASS CONTROL TO THE
*        IPC RECEIVING ROUTINE WHICH WILL DETERMINE THE TYPE OF
*        FUNCTION REQUESTED AND PASS CONTROL TO ENTRY POINT IEAVEMS1.
*        IEAVEMS1 SIMPLY RETURNS ON REGISTER 14 TO IPC WHICH EXITS
*        THROUGH THE EXTERNAL FLIH WHICH, IN TURN, EXITS TO THE
*        DISPATCHER. THE DISPATCHER WILL THEN CHECK FOR AN ADDRESS
*        SPACE SWITCH INDICATION BY TESTING "PSAANEW" AGAINST
*        "PSAAOLD".
*
*02*     LINKAGE = IEAVEMS1 IS ENTERED BY A BRANCH AND LINK ON 14,15.
*        IT CLEARS 15 AND BRANCHES IMMEDIATELY BACK ON 14. THE ONLY
*        CALLER OF THIS FUNCTION IS IPC.
*
*02*     INPUT = REGISTER 14 CONTAINS THE RETURN ADDRESS.
*
*02*     OUTPUT = REGISTER 15 IS SET TO ZERO.
*
*02*     REGISTERS-SAVED = NONE
*
*02*     REGISTER-USAGE = REGISTER 14 IS THE RETURN REGISTER.
*
*02*     REGISTERS-RESTORED = NONE NEEDED
*
*01*  EXIT-NORMAL = RETURN TO CALLER ON REGISTER 14.
*
*02*     CONDITIONS = RETURN TO CALLER ON REGISTER 14.
*
*02*     OUTPUT = NONE
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-ERROR = NONE
*
*01*  EXTERNAL-REFERENCES = DEFINED UNDER ROUTINES-CONTROL BLOCKS
*
*02*     ROUTINES = IEAVERP - TO CAUSE ANOTHER CPU TO ENTER IEAVEMS1
*        WHICH WILL EVENTUALLY CAUSE IT TO ENTER THE DISPATCHER. THE
*        LINKAGE IS GENERATED BY THE "RPSGNL" MACRO AND IS A BALR 14,
*        15.
*
*02*     DATA-AREAS = WSAGEMS0 - MEMORY SWITCH REGISTER SAVE AREA.
*
*02*     CONTROL-BLOCKS = ASCB(R), CVT(R), CSD(R), LCCA(R), PCCA(R),
*        PCCAVT(R), PSA(R/W).
*
*01*  TABLES = NONE
*
*01*  MACROS = RPSGNL AND MODID
*
*02*    SERIALIZATION = THE GLOBAL DISPATCHER LOCK MUST BE HELD ON
*       ENTRY TO MEMORY SWITCH AND IS HELD THROUGHOUT IT'S PROCESSING.
*
*01*  CHANGE-ACTIVITY = SUPPORT CODES - Y02751,Y02752,Y02715
*                     = APARS -OZ30882-WHEN PSAANEW IS ZERO AND REG1
*                                     IS NON-ZERO, RETURN TO CALLER.
*                                    -CODE FOR @YM03564 WAS DELETED
*
*                             OZ18849-ISSUE SIGP FOR OTHER PROCESSOR
*                                     IF INPUT ASCB IS OF HIGHER
*                                     DISPATCHING PRIORITY.
*
*01*  MESSAGES = NONE
*
*01*  ABEND-CODES = NONE
*
**** END OF SPECIFICATIONS ***/
         TITLE 'IEAVEMS0 - CSECT - EQUATES'
IEAVEMS0 CSECT
         SPACE 4
*/*IEAVEMS0: CHART MEMORY SWITCH */
*/* HEADER
*/*
*/*
*/*
*/*                                         SECTION: 3.1.8.3
*/*      MEMORY SWITCH
*/*                                      PAGE # */
*/*IEAVEMS0: E ENTRY */
         SPACE 4
*  REGISTER EQUATES
R0       EQU   0                   INPUT CPU AFFINITY INDICATOR
R1       EQU   1                   INPUT ASCB ADDRESS
R2       EQU   2                   WORK REGISTER
R3       EQU   3                   WORK REGISTER
R4       EQU   4                   WORK REGISTER
R5       EQU   5                   WORK REGISTER
R6       EQU   6                   WORK REGISTER
R7       EQU   7                   WORK REGISTER
R8       EQU   8                   INDEX REGISTER
R9       EQU   9                   BASE REGISTER
RA       EQU   10                  CVT ADDRESS REGISTER
RB       EQU   11                  PCCA ADDRESS REGISTER
RC       EQU   12                  CSD ADDRESS REGISTER
RD       EQU   13                  SAVE AREA ADDRESS REGISTER
RE       EQU   14                  RETURN ADDRESS REGISTER
RF       EQU   15                  REGISTER USED TO ACCESS SAVE AREA
*  MISCELLANEOUS EQUATES
MSI1     EQU   1                   INDEX 1
MSL0     EQU   0                   LENGTH 0
MSL1     EQU   1                   LENGTH 1
MSL2     EQU   2                   LENGTH 2
MSL4     EQU   4                   LENGTH 4
MSMSK3   EQU   3                   MASK 1/2
MSMSK4   EQU   4                   MASK 4
MSMSK8   EQU   8                   MASK 8
MSMSK12  EQU   12                  MASK 8/4
         TITLE 'IEAVEMS0 - MAINLINE CODE'
         USING FLC,R0              FLC/PSA ADDRESSING.
         SPACE 2
*/* D (NO,MS01,YES,) IS THIS A UNIPROCESSOR? */
         SPACE 2
         L     RF,CVTPTR           CVT ADDRESS
         USING CVT,RF              CVT ADDRESSABILITY
         L     RF,CVTCSD           CSD ADDRESS
         DROP  RF                  DROP CVT ADDRESSABILITY
         USING CSD,RF              CSD ADDRESSABILITY
         CLI   CSDCPUOL+MSL1,X'01' TEST FOR ONE CPU
         DROP  RF                  DROP CSD ADDRESSABILITY
         BALR  RF,0                ESTABLISH BRANCHING CAPABILITY
*  NOTE:  THE BALR INSTRUCTION DOES NOT CHANGE THE CONDITION CODE.
         USING *,RF                ESTABLISH MODULE ADDRESSABILITY
         BNE   MS01                NOT ONE CPU. GO TO MP SWITCH.
         SPACE 2
*/* D (YES,MS00,NO,) IS INPUT REG 1 EQUAL ZERO? */
         SPACE 2
         LPR   R1,R1               TEST FOR ZERO AND MAKE SURE OF POSI-
*                                       TIVE ASCB ADDRESS.
         BZ    MS00                ZERO. GO TO SET PSAANEW EQUAL ZERO.
         SPACE 2
*/* D (NO,RETURN,YES,) IS INPUT ASCB HIGHER PRIORITY? */
         SPACE 2
         USING ASCB,R1             ASCB ADDRESSABILITY.
         L     RF,PSAANEW          CURRENT ASCB TO DISPATCH.
         LTR   RF,RF               IS PSAANEW ZERO?            @ZA30882
         BZR   RE                  YES - RETURN                @ZA30882
         DROP  RF                  DROP MODULE ADDRESSABILITY.
         CLC   ASCBSEQN(MSL2),ASCBSEQN-ASCB(RF) COMPARE SEQUENCE NBRS.
         BNLR  RE                  HIGH OR EQUAL - RETURN.
         SPACE 2
*/*MS00: P (,RETURN) STORE REGISTER ONE INTO PSAANEW. */
         SPACE 2
MS00     DC    0H'0'
         ST    R1,PSAANEW          SET PSAANEW TO NEW ADDRESS.
         SPACE 2
*/*RETURN: R RETURN */
         SPACE 2
         BR    RE                  RETURN.
         SPACE 4
IEAVEMS0 MODID BR=NO               MODULE IDENTIFICATION
         EJECT
*/*MS01: P SAVE REGISTERS 2 THROUGH 14 IN WSAC */              @Z40FPXN
         SPACE 2
MS01     DC    0H'0'
         SPACE
         L     RF,PSALCCAV         *                           @Z40FPXN
         USING LCCA,RF             *                           @Z40FPXN
         L     RF,LCCACPUS         *          SAVE             @Z40FPXN
         USING WSAC,RF             *                REGISTERS  @Z40FPXN
         L     RF,WSACCWSA         *                           @Z40FPXN
         DROP  RF                  *                           @Z40FPXN
         STM   R2,RE,MSL0(RF)      *                           @Z40FPXN
         LR    RD,RF               *                           @Z40FPXN
         SPACE 2
*/* P ESTABLISH MODULE BASE - REGISTER 9 */
         SPACE 2
         BALR  R9,R0               BASE
         USING *,R9                     REGISTER.
         SPACE 2
*/* P ESTABLISH ADDRESSABILITY TO CVT, PCCAVT AND CSD */
         SPACE 2
         L     RA,FLCCVT           CVT ADDRESS
         USING CVT,RA
         SPACE
         L     RB,CVTPCCAT         PCCA VECTOR TABLE ADDRESS
         SPACE
         L     RC,CVTCSD           CSD ADDRESS
         USING CSD,RC
         SPACE
         SR    R8,R8               CLEAR INDEX REGISTER.
MST00    DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P GET CPU'S ALIVE MASK FROM THE CSD */
         SPACE 2
         ICM   R8,MSMSK12,CSDCPUAL CPU'S ALIVE MASK.
         SPACE 2
*/* D (YES,MS013,NO,MS02) IS INPUT REGISTER ONE ZERO? */
         SPACE 2
         LTR   R1,R1               TEST FOR TYPE OF REQUEST
         BNZ   MS02                AN ASCB ADDRESS IS INPUT. GO TO
*                                       SECTION WHICH HANDLES.
MST01    DC    0H'0'               *** TEST LABEL ***
         B     MS013               GO TO BEGIN SCAN.
         SPACE 2
*/*MS012: P INDEX TO NEXT PCCAVT ENTRY */
         SPACE 2
MS012    DC    0H'0'               ENTER FOR LOOP THROUGH PCCAVT.
         LA    RB,MSL4(RB)         INDEX TO NEXT PCCAVT ENTRY.
         SPACE 2
*/*MS013: D (CRY,MS015,NCRY,MS012,END,) TEST FOR CPU'S ONLINE */
         SPACE 2
MS013    DC    0H'0'               BEGIN SCAN ENTER.
         ALR   R8,R8               TEST FOR CPU'S ONLINE.
         BC    MSMSK3,MS015        CARRY. FOUND ACTIVE CPU.
MST02    DC    0H'0'               *** TEST LABEL ***
         BC    MSMSK4,MS012        NO CARRY. NOT ZERO. TRY AGAIN.
*  FALL THROUGH TO MS014 ON NO CARRY, ZERO - NONE LEFT.
         SPACE 2
*/*MS014: P RESTORE REGISTERS 2 THROUGH 14 */
         SPACE 2
MS014    DC    0H'0'               EXIT POINT.
         LM    R2,RE,MSL0(RD)      RESTORE REGISTERS.
MST02A   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* R RETURN */
         SPACE 2
         BR    RE                  RETURN.
         SPACE 4
*/*MS015: P GET PCCA ADDRESS FROM PCCAVT */
         SPACE 2
MS015    DC    0H'0'               ENTER FOR ALIVE CPU.
         L     R6,MSL0(RB)         GET PCCA ADDRESS FROM PCCAVT.
         SPACE 2
*/* D (NO,MS016,YES,) IS THIS MY CPU? */
         SPACE 2
         C     R6,PSAPCCAV         IS THIS MY CPU?
         BNE   MS016               NO. GO TO SEE IF SIGP IS NECESSARY.
MST03    DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,MS012) SET MY "PSAANEW" TO ZERO */
         SPACE 2
         L     R4,PSAANEW          CURRENT VALUE OF 'ANEW'     @Z40FPXN
MST03B   CS    R4,R1,PSAANEW       REPLACE CURR 'ANEW' WITH 0  @Z40FPXN
         BNZ   MST03B              IF FAILED, TRY AGAIN        @Z40FPXN
         B     MS012               GO TO TRY NEXT ENTRY.
         SPACE 2
*/*MS016: P GET OTHER CPU'S PSA BASE */
         SPACE 2
MS016    DS    0H'0'               ENTER FOR CPU OTHER THAN MINE.
         USING PCCA,R6             PCCA ADDRESSING.
         L     R5,PCCAPSAV         OTHER CPU'S PSA BASE.
         SPACE 2
*/* P STORE ZERO INTO CPU'S "PSAANEW" FIELD */
         SPACE 2
MS016A   CS    RE,R1,PSAANEW-FLC(R5) REPLACE ANEW WITH ZERO    @Z40FPXN
         BNZ   MS016A              IF FAILED, TRY AGAIN        @Z40FPXN
         SPACE 2
*/* P GET ADDRESS OF OTHER CPU'S LCCA */
         SPACE 2
         L     R4,PSALCCAV-FLC(R5) LCCA ADDRESS OF OTHER CPU.
         USING LCCA,R4             OTHER CPU'S LCCA ADDRESSING.
         SPACE 2
*/* D (YES,MS012,NO,MS017) IS OTHER CPU IN SRB MODE? */
         SPACE 2
         TM    LCCADSF2,LCCASRBM   IS OTHER CPU IN SRB MODE.
         BO    MS012               YES. GO TO TRY NEXT PCCAVT ENTRY.
         SPACE 2
*/*MS017: S SWITCH:RPSGNL TO OTHER CPU */
         SPACE 2
MS017    DC    0H'0'               ENTER FOR SIGP TO OTHER CPU.
         LR    R1,R6               PCCA ADDRESS.
MST03A   DC    0H'0'               *** TEST LABEL ***
         RPSGNL SWITCH,CPU=(1)     SIGNAL OTHER CPU.
MST04    DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,MS012) RESET REGISTER ONE TO ZERO */
         SPACE 2
         SR    R1,R1               RESTORE REGISTER ONE.
         B     MS012               GO TO TRY NEXT ENTRY.
         EJECT
*/*MS02: D (NO,MS021,YES,) IS CPU AFFINITY SPECIFIED? */
         SPACE 2
MS02     DC    0H'0'               ENTER FOR ASCB ADDRESS IN REG 1.
*  CONDITION CODE SET BY PREVIOUS LTR BEFORE ENTRY TO MS02.
         BH    MS021               R1 IS POSITIVE. NO AFFINITY. BYPASS
MST05    DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,MS0215) RECOMPLEMENT ASCB ADDRESS */
         SPACE 2
         LCR   R1,R1               RE-COMPLEMENT REGISTER 1 (ASCB ADDR)
         B     MS0215              CONTINUE.
         SPACE 2
*/*MS021: P CLEAR REG 0 TO INDICATE NO AFFINITY */
         SPACE 2
MS021    DC    0H'0'
         SR    R0,R0               INDICATE NO AFFINITY.
         SPACE 2
*/*MS0215: P (,MS0225) CLEAR WORK REGISTER FOR CHOSEN ASCB */
         SPACE 2
MS0215   DC    0H'0'
         SR    R7,R7               CLEAR WORK REG FOR CHOSEN ASCB.
         B     MS0225              START TO SCAN PCCAVT.
         SPACE 2
*/*MS022: P INDEX TO NEXT PCCAVT ENTRY */
         SPACE 2
MS022    DC    0H'0'               ENTER FOR LOOP THROUGH PCCAVT.
         LA    RB,MSL4(RB)         INDEX TO NEXT ENTRY.
         SPACE 2
*/*MS0225: D (CRY,MS023,NCRY,MS022,END,MS030) TEST FOR ALIVE CPU */
         SPACE 2
MS0225   DC    0H'0'
         ALR   R8,R8               TEST FOR ALIVE CPU.
         BC    MSMSK3,MS023        CARRY. ACTIVE CPU FOUND.
MST06    DC    0H'0'               *** TEST LABEL ***
         BC    MSMSK4,MS022        NO CARRY. NOT ZERO. TRY AGAIN.
MST07    DC    0H'0'               *** TEST LABEL ***
         B     MS030               NO CARRY. ZERO. DONE.
         SPACE 2
*/*MS023: P GET PCCA ADDRES FROM PCCA VECTOR TABLE */
         SPACE 2
MS023    DC    0H'0'
         L     R6,MSL0(RB)         GET PCCA ADDRESS.
         SPACE 2
*/* D (YES,MS024,NO,) IS THIS MY CPU? */
         SPACE 2
         C     R6,PSAPCCAV         IS THIS MY CPU?
         BE    MS024               YES. GO TO CLEAR PSA BASE.
MST08    DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,MS025) GET OTHER CPU'S PSA ADDRESS */
         SPACE 2
         USING PCCA,R6             PCCA ADDRESSING.
         L     R5,PCCAPSAV         OTHER CPU'S PSA.
         B     MS025               GO TO GET "ANEW".
         SPACE 2
*/*MS024: P CLEAR PSA ADDRESS FOR MY CPU ADDRESSING */
         SPACE 2
MS024    DC    0H'0'               ENTER FOR MY CPU.
         SR    R5,R5               USE BASE ZERO.
         SPACE 2
*/*MS025: P GET "PSAANEW" */
         SPACE 2
MS025    DC    0H'0'
         L     RF,PSAANEW-FLC(R5)  GET ASCB "NEW".
         SPACE 2
*/* D (YES,MS022,NO,) IS IT ZERO? */
         SPACE 2
         C     RF,MSZEROS          IS IT ZERO?
         BE    MS022               YES. LEAVE IT. TRY NEXT.
MST09    DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* D (LO,MS022,HI,MS027,EQU,) TEST "PSAANEW" SEQ VS INPUT SEQ */
         SPACE 2
         CLC   ASCBSEQN-ASCB(MSL2,RF),ASCBSEQN-ASCB(R1)    TEST FOR
*                                       FOUND ASCB SEQN GTR/LESS/EQU
*                                       TO INPUT ASCB.
         BL    MS022               LOWER SEQ. HGHR PRTY. TRY NEXT.
MST10    DC    0H'0'               *** TEST LABEL ***
         BH    MS027               HIGHER SEQ. CAN BE PREEMPTED.
MST11    DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P GET LCCA ADDRESS */
         SPACE 2
         L     R4,PSALCCAV-FLC(R5) EQUAL. GET LCCA ADDRESS.
         USING LCCA,R4             LCCA ADDRESSING.
         SPACE 2
*/* D (YES,MS022,NO,MS027) IS EQU PRTY CPU IN SRB MODE? */
         SPACE 2
         TM    LCCADSF2,LCCASRBM   IS EQU PRTY ASCB IN SRB MODE.
         BO    MS022               YES. GO TO TRY NEXT.
         SPACE 2
*/*MS027: D (NO,MS028,YES,) TEST FOR PREVIOUSLY CHOSEN ASCB */
         SPACE 2
MS027    DC    0H'0'
         LTR   R7,R7               TEST FOR PREVIOUSLY CHOSEN ASCB.
         BZ    MS028               NO. CONTINUE.
MST12    DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* D (LOEQ,MS022,HI,MS028) TEST NEW ASCB SEQ VS PREVIOUS ASCB */
         SPACE 2
         CLC   ASCBSEQN-ASCB(MSL2,RF),ASCBSEQN-ASCB(R7)    TEST FOR
*                                      NEW ASCB OF LOWER SEQUENCE.
         BNH   MS022               LOWER SEQN. HIGHER PRI. GET NEXT.
         SPACE 2
*/*MS028: D (NO,MS029,YES,) TEST FOR CPU AFFINITY */
         SPACE 2
MS028    DC    0H'0'
         LTR   R0,R0               TEST FOR CPU AFFINITY.
         BZ    MS029               NO. CONTINUE.
MST13    DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P GET CPU AFFINITY MASK FROM THE PCCA */
         SPACE 2
         LH    RE,PCCACAFM         GET CPU AFFINITY BIT MASK.
         SPACE 2
*/* D (NO,MS022,YES,MS029) DOES AFFINITY MATCH REG 0? */
         SPACE 2
         NR    RE,R0               TEST FOR AFFINITY.
         BZ    MS022               NO. GO TRY NEXT.
         SPACE 2
*/*MS029: P (,MS022) SAVE ASCB AND PCCA ADDRESSES */
         SPACE 2
MS029    DC    0H'0'
         LR    R7,RF               ASCB ADDRESS TO WORK.
         LR    R3,R6               PCCA ADDRESS TO SAVE.
         B     MS022               GO TO TRY NEXT.
         DROP  R4,R6
         SPACE 4
*/*MS030: D (NO,MS031,YES,) HAS A CPU BEEN FOUND? */
         SPACE 2
MS030    DC    0H'0'
         LTR   R7,R7               HAS A CPU BEEN FOUND.
         BZ    MS031               NO. GO TO EXIT.
MST14    DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* D (YES,MS0305,NO,) IS IT MY CPU? */
         SPACE 2
         C     R3,PSAPCCAV         IS THIS MY CPU?
         BE    MS0305              YES. GO TO SAVE ASCB IN MY PSA.
MST15    DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P STORE INPUT ASCB ADDRESS INTO CHOSEN CPU'S PSAANEW FIELD */
         SPACE 2
         L     R5,PCCAPSAV-PCCA(R3)     PSA ADDRESS OF FOUND CPU.
MST15A   DC    0H'0'                                           @Z40FPXN
         CS    R7,R1,PSAANEW-FLC(R5)    UPDATE ANEW WITH NEW ASCB ADDR
*                                       UNLESS ANEW HAS CHANGED@Z40FPXN
         BZ    MST15B              UPD WAS SUCCESSFUL          @Z40FPXN
         LTR   R7,R7               UPD WAS NOT SUCCESSFUL AND
*                                  HAS ANEW BEEN REPLACED WITH ZEROS?
*                                                              @Z40FPXN
         BZ    MS031               YES, EXIT                   @Z40FPXN
         CLC   ASCBSEQN-ASCB(MSL2,R7),ASCBSEQN-ASCB(R1) NO, COMPARE
*                                  PRIORITY OF NEW ANEW WITH THE ONE
*                                  YOU WERE GOING TO REPLACE   @Z40FPXN
         BH    MST15A              NEW ANEW IS LOWER, SO TRY AGAIN
*                                                              @Z40FPXN
MST15B   DC    0H'0'                                           @Z40FPXN
         SPACE 2
*/* D (YES,MS031,NO,) IS THE CPU IN SRB MODE? */
         SPACE 2
         L     R4,PSALCCAV-FLC(R5) LCCA ADDRESS.
         TM    LCCADSF2-LCCA(R4),LCCASRBM  IS CPU IN SRB MODE?
         BO    MS031               YES. GO TO EXIT.
         SPACE 2
*/* D (NO,MS031,YES,) IS READY ASCB HIGHER DISP PRTY ? */
         SPACE 2
         L     RE,PSAAOLD-FLC(R5)  CURRENT ASCB                @Z40FPXN
         CLC   ASCBDP-ASCB(MSL1,RE),ASCBDP-ASCB(R1)            @ZA18849
         BNL   MS031              AOLD HIGHER PRTY, AVOID SIGP @ZA18849
MST16    DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* S (,MS031) SWITCH:RPSGNL TO OTHER CPU */
         SPACE 2
         LR    R1,R3               PCCA ADDRESS FOR OTHER CPU.
MST16A   DC    0H'0'               *** TEST LABEL ***
         RPSGNL SWITCH,CPU=(1)     SIGNAL OTHER CPU.
MST17    DC    0H'0'               *** TEST LABEL ***
         B     MS031               GO TO RETURN.
         SPACE 2
*/*MS0305: P STORE INPUT ASCB ADDRESS INTO MY PSAANEW FIELD */
         SPACE 2
MS0305   DC    0H'0'               ENTER FOR MY CPU.
         CS    R7,R1,PSAANEW       UPDATE MY ANEW UNLESS
*                                  IT HAS CHANGED              @Z40FPXN
         BZ    MS031               UPDATE SUCCESSFUL, EXIT     @Z40FPXN
         LTR   R7,R7               UPDATE NOT SUCCESSFUL,
*                                  HAS ANEW BEEN REPLACED WITH 0'S?
*                                                              @Z40FPXN
         BZ    MS031               YES, EXIT                   @Z40FPXN
         CLC   ASCBSEQN-ASCB(MSL2,R7),ASCBSEQN-ASCB(R1) NO, COMPARE
*                                  PRIORITY OF THE NEW
*                                  ANEW WITH THE ONE
*                                  YOU WERE GOING TO REPLACE IT WITH
*                                                              @Z40FPXN
         BH    MS0305              NEW ANEW IS LOWER IN PRIORITY, SO
*                                  GO TRY AGAIN                @Z40FPXN
         SPACE 2
*/*MS031: P RESTORE REGISTERS 2 THROUGH 14 */
         SPACE 2
MS031    DC    0H'0'
         LM    R2,RE,MSL0(RD)      RESTORE REGISTERS.          @Z40FPXN
MST18    DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* R RETURN */
         SPACE 2
         BR    RE                  RETURN
         EJECT
MSZEROS  DC    F'0'                ZERO
         TITLE 'IEAVEMS0 - IEAVEMS1 ENTRY'
***********************************************************************
*                                                                     *
*        IEAVEMS1 - ENTERED FROM THE RPSGNL PROCESSOR OF IPC WHEN     *
*              THE SWITCH OPTION IS SPECIFIED.  THIS ROUTINE RETURNS  *
*              DIRECTLY TO IPC VIA A BR 14 FOR THE SOLE PURPOSE OF    *
*              RETURNING THROUGH THE EXTERNAL INTERRUPT HANDLER WHICH *
*              IN TURN WILL RETURN THROUGH THE DISPATCHER WHICH WILL  *
*              PICK UP THE ADDRESS SPACE SWITCH INDICATION BY TESTING *
*              THE PSAANEW FIELD TO SEE IF IT IS DIFFERENT FROM       *
*              PSAAOLD OR HAS BEEN MADE ZERO.                         *
*                                                                     *
***********************************************************************
         SPACE 4
IEAVEMS1 CSECT
         SR    RF,RF               CLEAR RETURN CODE INDICATION.
         BR    RE                  RETURN.
         SPACE 4
         TITLE 'IEAVEMS0 - LCCA'
         IHALCCA
         TITLE 'IEAVEMS0 - PCCA'
         IHAPCCA
         TITLE 'IEAVEMS0 - WSAVT'
         IHAWSAVT DSECT=YES,CLASS=CPU
         TITLE 'IEAVEMS0 - FLC/PSA'
         IHAPSA
         TITLE 'IEAVEMS0 - PCCA VECTOR TABLE'
         IHAPCCAT
         TITLE 'IEAVEMS0 - CVT'
         CVT   DSECT=YES,LIST=YES
         TITLE 'IEAVEMS0 - ASCB'
         IHAASCB
         TITLE 'IEAVEMS0 - CSD'
         IHACSD
         TITLE 'IEAVEMS0 - END'
*/* END */
         END
