         TITLE 'PROLOG'
         MACRO
         PROLOG
         TITLE 'PROLOGUE'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVESC0
*
*02*     CSECT-NAME = IEAVESC1
*
*01*  DESCRIPTIVE-NAME = SCHEDULE SERVICE ROUTINE
*
*01*  COPYRIGHT = NONE
*01*  STATUS = VS2, RELEASE 2.0
*
*01*  FUNCTION = THE FUNCTION OF THIS MODULE IS TO COMPLETE THE
*     SCHEDULING OPERATION INITIATED BY THE SCHEDULE MACRO. IT MOVES
*     SRBS TO THE APPROPRIATE SERVICE PRIORITY LIST (SPL) AT THE
*     SPECIFIED PRIORITY LEVEL. IT ALSO HANDLES OTHER FUNCTIONS
*     INCLUDED IN INTRODUCING DISPATCHABLE WORK INTO THE SYSTEM,WHICH
*     INCLUDES:
*        1. ALERTING A CPU DISPATCHED TO THE WAIT ADDRESS SPACE THAT
*        THERE IS WORK TO BE DISPATCHED.
*        2. CALLING THE MEMORY SWITCH ROUTINE WHEN MAKING A SWAPPED-IN
*        ADDRESS SPACE READY.
*        3. CALLING THE SRM WHEN A SWAPPED-OUT ADDRESS SPACE IS
*        READY.
*
*02*     OPERATION =
*        GLOBAL SCHEDULE-
*          1. INPUT SRBS ARE QUEUED TO THE GLOBAL SPL.
*          2. IF THE WAIT ADDRESS SPACE IS DISPATCHED,THEN EVERY CPU
*          DISPATCHED TO THE WAIT ADDRESS SPACE WILL BE SIGNALLED VIA
*          THE RPSGNL FUNCTION.
*
*        LOCAL SCHEDULE -
*          1. INPUT SRBS WILL BE QUEUED TO THE CORRECT LOCAL SPL.
*          2.  IF AN SRB IS BEING SCHEDLED TO AN ADDRESS SPACE THAT IS
*          ON THE IN-CORE QUEUE, THEN MEMORY SWITCH WILL BE INVOKED.
*          3. IF AN SRB IS BEING SCHEDULED TO A SWAPPED-OUT ADDRESS
*          SPACE,  THEN A SYSEVENT WILL BE ISSUED TO NOTIFY THE
*          SRM THAT THE ADDRESS SPACE CAN BE SWAPPED IN.
*
*
*01*   NOTES =
*
*02*     DEPENDENCIES =
*        1. THE DISPATCHER LOCK MUST BE HELD ON ENTRY
*        2. THE PSW MUST BE SUPERVISOR STATE,KEY 0
*
*03*        CHARACTER-CODE-DEPENDENCIES = NONE
*
*02*     RESTRICTIONS = THIS ROUTINE MAY BE INVOKED BY ONLY THE
*        DISPATCHER. HE MUST OWN THE GLOBAL DISPATCHER LOCK ON ENTRY.
*
*02*     REGISTER-CONVENTIONS = SEE SEGMENT REGSTERS FOR DESCRIPTION OF
*        REGISTER USAGE.
*
*02*     PATCH-LABEL = NUCLEUS PATCH AREA
*
*01*  MODULE-TYPE = PROCEDURE
*
*02*     PROCESSOR = ASSEMBLER-370R
*
*02*     MODULE-SIZE = 400 BYTES
*
*02*     ATTRIBUTES = NUCLEUS ,ZERO PROTECT KEY, REFRESHABLE,
*        SUPERVISOR MODE
*
*01*  ENTRY-POINT = IEAVESC1
*
*02*     PURPOSE = SCHEDULE GLOBAL PRIORITY SRBS
*
*02*     LINKAGE =
*        REGISTER 3 = RETURN ADDRESS TO DISPATCHER
*        REGISTER 4 = ENTRY POINT OF IEAVESC1
*        REGISTER 5 = A QUEUE OF SRBS REMOVED FROM THE GSMQ
*        REGISTER 7 = ADDRESS OF LCCA.
*
*        UPON RETURN , REGISTERS ARE AS FOLLOWS:
*        R3,R7,R8,R9 = UNCHANGED
*        R1,R1,R4-R6,R10-R15 = VOLATILE
*
*02*     INPUT = NONE
*
*02*     OUTPUT = NONE
*
*02*     REGISTERS-SAVED = NONE
*
*02*     REGISTER-USAGE = SEE SEGMENT 'REGSTERS' FOR DESCRIPTION OF
*        REGISTER USAGE
*
*02*     REGISTERS-RESTORED = NONE
*
*01*  ENTRY-POINT = IEAVESC2
*
*02*     PURPOSE = SCHEDULES LOCAL SRBS
*
*02*     LINKAGE =
*        REGISTERS ON ENTRY ARE AS FOLLOWS:
*        R3 = RETURN REGISTER
*        R4 = ENTRY POINT ADDRESS OF IEAVESC2
*        R5 = POINTER TO A QUEUE OF SRBS REMOVED FROM THE LSMQ
*        R7 = ADDRESS OF LCCA.
*
*        REGISTERS ON RETURN ARE AS FOLLOWS:
*          R3,R7-R9 = UNCHANGED
*          R1,R2,R4-R6,R10-R15 = UNPREDICATABLE
*
*02*     INPUT = NONE
*
*02*     OUTPUT = NONE
*
*02*     REGISTERS-SAVED = NONE
*
*02*     REGISTER-USAGE = SEE SEGMENT 'REGSTERS' FOR DESCRIPTION
*
*02*     REGISTERS-RESTORED = NONE
*01*  EXIT-NORMAL = TO CALLER VIA BR 14
*
*02*     CONDITIONS =
*        1. DISPATCHER LOCK HELD
*        2. SUPERVISOR STATE,KEY ZERO
*
*02*     OUTPUT = SEE LINKAGE SECTION
*
*02*     RETURN-CODES = NONE
*01*  EXIT-ERROR = ABEND (SVC 13)
*02*     CONDITIONS = IF AN INVALID SRB IS DETECTED, LOCAL SCHEDULE
*        WILL ISSUE A X'C0D' ABEND WHICH WILL RESULT IN SCHEDULE
*        RECOVERY GETTING CONTROL. THE RECOVERY ROUTINE WILL VALIDATE
*        THE SRB QUEUES, REMOVING THE BAD ELEMENT AND RECORDING THE
*        ERROR. THE SYSTEM WILL THEN RETRY THE OPERATION FROM THE
*        DISPATCHER MAIN ENTRY POINT.
*
*02*     OUTPUT = NONE
*
*01*  EXTERNAL-REFERENCES =
*
*02*     ROUTINES =
*        1. RPSGNL - USED TO SIGNAL CPU DISPATCHED TO WAIT TASK.
*        2. MEMORY SWITCH (IEAVEMS0) - INFORMS DISPATCHER  THAT HIGHER
*        PRIORITY WORK MAY BE AVAILABLE.
*        3. SYSEVENT - INFORMS SRM THAT A SWAPPED-OUT ADDRESS
*        SPACE MAY HAVE READY WORK.
*
*02*     DATA-AREAS = NONE
*
*02*     CONTROL-BLOCKS =
*        WORK SAVE AREA VECTOR TABLE - WSAVT - (R)
*        SERVICE REQUEST BLOCK - SRB - (R/W)
*        SERVICE PRIORITY LIST - SPL - (R/W)
*        PHYSICAL CONFIGURATION COMMUNICATION AREA - PCCA -(R)
*        COMMON SYSTEM DATA AREA - CSD - (R)
*        PREFIXED STORAGE AREA - PSA - (R)
*        ADDRESS SPACE CONTROL BLOCK - ASCB - (R/W)
*        COMMUNICATIONS VECTOR TABLE - CVT - (R)
*        LOGICAL CONFIGURATION COMMUNICATION AREA - LCCA -(R/W)
*
*01*  TABLES = A 72-BYTE GLOBAL SAVE AREA IS PASSED TO THE SRM
*     FOR THE SYSEVENT INTERFACE. IT IS POINTED TO BY WSAGSCHE.
*
*01*  MACROS =
*        SYSEVENT
*        RPSGNL
*
*02*    SERIALIZATION = NO LOCKS OBTAINED, BUT DISPATCHER LOCK IS
*       OBTAINED TO SERIALIZE ON THE SPL AND SERVICE MANAGER QUEUES.
*
*01*  CHANGE-ACTIVITY =
*        S/D CODES:
*          Y02715 - SERVICE MANAGER SUPPORT
*          Y02751 - SUPERVISOR MP SUPPORT
*          Y02752 - MULTIPLE ADDRESS SPACE SUPPORT
*
*01*  MESSAGES = NONE
*
*01*  ABEND-CODES = X'C0D' IS USED TO RECORD AN INVALID SRB
**** END OF SPECIFICATIONS ***/
***********************************************************************
*                             END PROLOG                              *
***********************************************************************
         MEND
         TITLE 'MASKEQUS'
         MACRO
         MASKEQUS
         TITLE 'EQUATES FOR MASKS'
***********************************************************************
*        MASKEQUS                                                     *
***********************************************************************
*
*  BIT MASKS
ON       EQU   X'FF'          ON MASK
*
*  ICM-STCM MASKS
B4       EQU   1              FOURTH BYTE
B3       EQU   2              THIRD BYTE
B2       EQU   4              SECOND BYTE
B1       EQU   8              FIRST BYTE
***********************************************************************
*              END OF MASK EQUATES                                    *
***********************************************************************
         MEND
         TITLE 'REGSTERS'
         MACRO
         REGSTERS
         TITLE 'EQUATED REGISTERS'
***********************************************************************
*              REGISTER EQUATES                                       *
***********************************************************************
R0       EQU   0              REGISTER 0
WORKREG1 EQU   1              WORK REGISTER
R1       EQU   1              REGISTER 1
PSAPTR1  EQU   1              PSA BASE
PCCAPTR2 EQU   2              PCCA BASE
SRBPTR2  EQU   2              SRB BASE
RETREG3  EQU   3              RETURN REGISTER
BASEREG4 EQU   4              BASE REGISTER
HDRREG5  EQU   5             CONTAINS ADDR OF SRB LIST FROM DISPATCHER
ASCBPTR6 EQU   6              ASCB BASE
CPUID6   EQU   6              CPU COUNTER
LCCAPTR7 EQU   7                   POINTS TO LCCA
ZERORGA  EQU   10             USED FOR A ZERO COMPARE
MASKRGA  EQU   10             CONTAINS ONLINE MASK
R13      EQU   13             REGISTER 13
LEVELRGF EQU   15             POINTS TO PRIORITY LEVEL
WRKREGF  EQU   15             WORK REGISTER
R15      EQU   15             REGISTER 15
***********************************************************************
*              END OF REG EQUATES                                     *
***********************************************************************
         MEND
         TITLE 'MAPMACS'
         MACRO
         MAPMACS
         TITLE 'MAPPING MACROS'
***********************************************************************
*              MAPPING MACROS                                         *
***********************************************************************
         IHAWSAVT  CLASS=GLOBAL
         IHASRB
         IHASPL
         IHAPCCA
         IHACSD
         IHAPSA
         IHAASCB
         IHALCCA
         CVT   DSECT=YES,LIST=YES
         USING FLC,PSAPTR1
         USING SRBSECT,SRBPTR2
         USING ASCB,ASCBPTR6
         USING LCCA,LCCAPTR7
         MEND
         TITLE 'GLOBAL'
         MACRO
         GLOBAL
         TITLE 'SCHEDULING GLOBAL SRBS'
***********************************************************************
*                                                                     *
*   GLOBAL-                                                           *
*        THIS ROUTINE IS THE MAINLINE CODE FOR SCHEDULING             *
*        A GLOBAL PRIORITY SRB.
*                                                                     *
*        INPUT-                                                       *
*          REGS-SEE PROLOGUE                                          *
*                                                                     *
*        FIELDS REF-                                                  *
*              SRBFLNK-SRB FORWARD CHAIN FIELD                        *
*              GLOBAL PRIORITY INDEX TABLE                            *
*                                                                     *
*        OUTPUT-                                                      *
*          REGS-SEE PROLOGUE                                          *
*                                                                     *
*        FIELDS CHG-                                                  *
*              NONE                                                   *
*                                                                     *
*        SUBROUTINES/LOCAL MACROS-                                    *
*              QSRB- QUEUES AN SRB TO THE SPL                         *
*              WAKEUP- SEARCHES FOR AND SIGNALS CPUS                  *
*                   DISPATCHED TO THE WAIT ADDRESS SPACE              *
*        SYSTEM INTERFACES-                                           *
*              NONE                                                   *
*                                                                     *
***********************************************************************
*/*SCH02: CHART GLOBAL SCHEDULE */
*/*IEAVESC1: E GLOBAL SCHEDULE */
*/*GLOOP1: P DEQUEUE THE TOP SRB */
*/* P JOURNAL REMAINDER OF THE QUEUE */
*/* P CALCULATE THE PRIORITY OF THE SRB */
*/* S QSRB:QUEUE THE SRB TO THE SPL */
*/* D (YES,GLOOP1,NO,) ANY MORE SRB'S ON THE QUEUE? */
*/* D (NO,NOWAIT,YES,) WAIT ASCB DISPATCHED? */
*/* S WAKEUP:WAKE UP WAITING CPU'S */
*/*NOWAIT: R RETURN TO DISPATCHER */
*/*SCH02: END GLOBAL SCHEDULE */
         ENTRY IEAVESC1
IEAVESC1 DS    0H
         USING *,BASEREG4
         LR    SRBPTR2,HDRREG5      GET ADDR OF TOP SRB
GLOOP1   L     HDRREG5,SRBFLNK      DEQUEUE THE TOP SRB
         ST    HDRREG5,LCCASMQJ    JOURNAL QUEUE
         SR    LEVELRGF,LEVELRGF    CLEAR REGISTER
         ICM   LEVELRGF,B4,SRBPRIOR GET THE PRIORITY VALUE
         L     LEVELRGF,GPIT(LEVELRGF)  GET THE ADDRESS OF THE
*                                       PRIORITY LEVEL
*        QUEUE THE SRB TO THE SPL
QGLOBL   QSRB  1
         LTR   SRBPTR2,HDRREG5       TEST FOR SRBS
         BNZ   GLOOP1                IF MORE,GO GET THEM
         L     ASCBPTR6,WAITASCB     GET ADDR OF WAIT ASCB
         TM    ASCBCPUS+3,ON       ANY CPUS DISPATCHED TO WAIT ASCB ?
         BZ    NOWAIT              NO,THEN DONT WAKE UP CPUS
*  SEARCH FOR CPUS DISPATCHED TO THE WAIT ADDRESS SPACE
         WAKEUP
NOWAIT   EQU   *
         BR    RETREG3              RETURN TO DISPATCHER
***********************************************************************
*              END GLOBAL                                             *
***********************************************************************
         MEND
         TITLE 'LOCAL'
         MACRO
         LOCAL
***********************************************************************
*   LOCAL-
*        THIS ROUTINE FINISHES THE SCHEDULING OF LOCAL
*        PRIORITY SRBS.   IT IS ENTERED FROM THE DISPATCHER AT ENTRY
*        POINT IEAVESC2.  IT MOVES SRBS FROM THE SERVICE MANAGER QUEUE
*        TO THE CORRECT LOCAL SPL.  IT WILL ALSO NOTIFY
*        THE SRM WHEN AN SRB IS BEING SCHEDULED TO  A
*        SWAPPED OUT ADDRESS SPACE.  IT WILL CALL MEMORY SWITCH ON
*        A SCHEDULE TO A SWAPPED IN ADDRESS SPACE.
*        INPUT-
*          REGS-SEE PROLOG
*
*          FIELDS-
*              SRBFLNK  -  FIELD USED FOR QUEUEING.
*              SRBPRIOR  -  INDICATES PRIORITY LEVEL OF SRB.
*              SRBASCB    -  INDICATES THE ADDRESS SPACE BEING
*                          SCHEDULED TO
*
*              LPIT  -  LOCAL PRIORITY INDEX TABLE.  THIS IS AN
*                    INTERNAL TABLE WHICH INDICATES
*                     THE OFFSET OF A SPECIFIC PRIORITY LEVEL
*                    IN THE LOCAL SPL.
*              ASCBNOQ  -  WHEN THIS BIT IS ON, THE ASCB IS   NOT ON
*                          THE IN-CORE QUEUE.  MEMORY SWITCH SHOULD NOT
*                          BE CALLED.
*              ASCBSPL  - CONTAINS THE ADDRESS OF THE LOCAL SPL.
*              ASCBOUT  - WHEN FLAG IS ON, A USERRDY SYSEVENT SHOULD BE
*                         ISSUED.
*        OUTPUT
*          REGS-SEE PROLGO
*        SUBROUTINE/LOCAL MACROS-
*              QSRB
*              OPTINT
*              MEMSW
***********************************************************************
*/*SCH03: CHART LOCAL SCHEDULE */
*/*IEAVESC2: E LOCAL SCHEDULE */
*/*LOCAL1: P DEQUEUE THE TOP SRB */
*/* P JOURNAL REMAINDER OF THE QUEUE */
*/* P FIND THE CORRECT LSPL */
*/* P GET ADDRESS OF THE CORRECT PROIRITY LEVEL */
*/* S QSRB:QUEUE SRB TO LSPL */
*/* D (NO,LOCAL2,YES,) ADDRESS SPACE SWAPPED OUT? */
*/* S OPTINT:INTERFACE WITH SRM */
*/*LOCAL2: D (NO,LOCAL3,YES,) IS ASCB ON IN-CORE QUEUE? */
*/* S MEMSW:CALL MEMORY SWITCH */
*/*LOCAL3: D (YES,LOCAL1,NO,) ANY MORE SRB'S? */
*/* R RETURN TO DISPATCHER */
*/*SCH03: END LOCAL SCHEDULE */
         SPACE 3
         ENTRY IEAVESC2
IEAVESC2 DS    0H
         USING *,BASEREG4
*                                  X
         L     BASEREG4,BASEADDR   LOAD BASE ADDRESS
         USING IEAVESC1,BASEREG4
*   DEQUEUE TOP SRB
         LR    SRBPTR2,HDRREG5      GET ADDR OF TOP SRB
LOCAL1  DS   0H
         L     ASCBPTR6,SRBASCB    GET ASCB ADDRESS
         L     WORKREG1,ASCBASCB   GET THE ASCB ACRONYM
         C     WORKREG1,CHARASCB   IS IT VALID ?
         BNE   ABND1               IF NOT, CLEAN UP AND RECORD
         L     HDRREG5,SRBFLNK      POP TOP SRB
         ST    HDRREG5,LCCASMQJ    JOURNAL QUEUE
         SR    LEVELRGF,LEVELRGF    CLEAR REG
         ICM   LEVELRGF,B4,SRBPRIOR PUT PRIORITY IN LOW ORDER BYTE
         L     LEVELRGF,LPIT(LEVELRGF)  GET ENTRY IN LPIT
         A     LEVELRGF,ASCBSPL     GET ADDR OF ENTRY IN LSPL
*  QUEUE  THE  SRB   TO THE LOCAL SPL
QLOCAL   QSRB  2
*  TEST FOR SWAP-OUT
         TM    ASCBRCTF,ASCBOUT    SHOULD USERRDY BE ISSUED ?
         BNO   LOCAL2              NO, THEN SKIP
*  INTERFACE WITH THE SRM
OPT1     OPTINT
LOCAL2   TM    ASCBDSP1,ASCBNOQ    IS ASCB ON THE IN-CORE QUEUE ?
         BO    LOCAL3              NO,THEN SKIP MEMSW
*   INTERFACE WITH MEMORY SWITCH
MS1      MEMSW
LOCAL3   DS    0H
*  CHECK FOR MORE SRBS
         LTR   SRBPTR2,HDRREG5     QUEUE EMPTY ?
         BNZ   LOCAL1              NO,THEN LOOP
         BR    RETREG3             RETURN TO THE DISPATCHER
* issue an abeND TO CLEAN UP THE QUEUE AND RECORD THE ERROR
ABND1    ABEND X'C0D',,,SYSTEM
***********************************************************************
*              END LOCAL ROUTINE                                      *
***********************************************************************
         MEND
         TITLE 'QSRB'
         MACRO
&NAME    QSRB  &A
***********************************************************************
*
*   QSRB ROUTINE
*        FUNCTION-
*              QUEUE THE SRB TO A SPECIFIED LEVEL OF THE SPL.
*        INPUT  REGS
*              BASEREG4 (R4) -BASE REGISTER
*              LEVELRGF (R15) -ADDRESS OF ENTRY IN THE SPL.
*              SRBPTR2 (R2) -ADDR OF SRB TO BE ENQUEUED
*        OUTPUT-
*              WORKREG1 (R1) -VOLATILE
*              ZERORGA (R10) -SET TO ZERO
*        FIELDS REF/CHG-
*              SPLFSRB  - ADDRESS OF  FIRST SRB
*              SPLLSRB  - ADDRESS OF LAST SRB
*              SRBFLNK-FORWARD CHAIN FIELD IN SRB
*
*        SUBROUTINES/LOCAL MACROS-NONE
*
***********************************************************************
         SPACE 3
*/*SCH11: CHART SCHEDULE QSRB */
*/*QSRB: E QSRB */
*/* D (NO,NOTFST,YES,) QUEUE EMPTY? */
*/* P (,ENDNF) STORE SRB ADDRESS INTO SPLFSRB / SPLLSRB */
*/*NOTFST: P STORE ADDRESS OF SRB INTO SPLLSRB */
*/* P STORE ADDRESS OF SRB INTO THE LAST SRB */
*/*ENDNF: P STORE ZERO INTO THE CHAIN OF QUEUED SRB'S */
*/* R RETURN */
*/*SCH11: END SCHEDULE QSRB */
         SPACE 3
         USING SPLENTRY,LEVELRGF
&NAME    SR    ZERORGA,ZERORGA     CLEAR REG
         C     ZERORGA,SPLLSRB     QUEUE EMPTY ?
         BNE   NOTFST&A            NO,THEN BRANCH
*        QUEUE TO AN EMPTY QUEUE
         ST    SRBPTR2,SPLFSRB     SET FIRST SRB POINTER
         ST    SRBPTR2,SPLLSRB     SET LAST SRB POINTER
         B     ENDNF&A             GO TO ENDNF
*   QUEUE TO NON-EMPTY QUEUE
NOTFST&A L     WORKREG1,SPLLSRB    GET ADDRESS OF LAST SRB
         ST    SRBPTR2,SRBFLNK-SRBSECT(WORKREG1)  STORE SRB ADDR IN
*                                  LAST SRB
         ST    SRBPTR2,SPLLSRB     STORE ADDRESS OF LAST SRB
*   ZERO  SRBFLNK    IN LAST SRB
ENDNF&A  ST    ZERORGA,SRBFLNK     ZERO SRBFLNK
         MEND
         TITLE 'WAKEUP'
         MACRO
&NAME    WAKEUP
***********************************************************************
*   WAKEUP-
*        THIS ROUTINE SEARCHES FOR CPUS DISPATCHED TO THE WAIT ASCB.
*        IT SIGNALS THOSE WAITING CPUS,EXCLUSIVE OF THE CURRENT CPU.
*
*        INPUT
*          REGS-BASEREG4 (R4)
*          FIELDS-
*              CVTPTR-LOC 16-ADDR OF CVT
*              CVTCSD-ADDR OF CSD
*              CVTPCCAT- ADDR OF PCCA VECTOR TABLE
*              CSDCPUAL-THE ALIVE CPU MASK
*              PSACPUPA-PHYSICAL ADDR OF CPU
*              PCCAVT-VECTOR TABLE                                    *
*              PCCAPSAV-VIRTUAL ADDR OF PSA                           *
*        OUTPUT                                                       *
*              R0,R1,R2,R6,R10,R14,R15-VOLATILE                       *
*              R3-R5,R7-R9,R11-R13-  UNCHANGED                        *
*        SUBROUTINES/MACROS                                           *
*              RPSIG- IS CALLED TO SIGNAL A SPECIFIC CPU TO           *
*                   GET IT OFF THE WAIT ASCB. IT IS PASSED THE        *
*                   PCCA ENTRY ADDR AS INPUT.                         *
*                                                                     *
*        SYSTEM INTERFACES-NONE                                       *
***********************************************************************
         SPACE 3
*/*SCH12: CHART SCHEDULE WAKEUP */
*/*WAKEUP: E WAKEUP */
*/* P GET CPU ALIVE MASK FROM CSD */
*/* P SET CPUID=0 */
*/*WKUPL1: D (NO,NOMORE,YES,) ANY MORE CPU'S? */
*/* D (NO,NOL,YES,) CURRENT CPU IN SCAN ALIVE? */
*/* D (YES,NOL,NO,) IS IT MY OWN CPU? */
*/* P GET ADDRESS OF PSA FOR CPU IN SCAN */
*/* D (NO,NOL,YES,) IS THE CPU WAITING? */
*/* S RPSIG:SIGNAL THE CPU */
*/*NOL: P (,WKUPL1) GET NEXT CPU */
*/*NOMORE: R RETURN */
*/*SCH12: END SCHEDULE WAKEUP */
         SPACE 3
&NAME    DS    0H
         USING PCCA,PCCAPTR2
         SR    CPUID6,CPUID6       SET COUNTER TO ZERO
         L     MASKRGA,CVTPTR      GET CVT ADDR
         L     MASKRGA,CVTCSD-CVT(MASKRGA) GET CSD ADDR
         L     MASKRGA,CSDCPUAL-CSD(MASKRGA)    GET ALIVE MASK
         ICM   MASKRGA,B3+B4,HW0   ZERO LOW ORDER BYTES
* START LOOP THROUGH CPUS
WKUPL1   EQU   *
         ALR   MASKRGA,MASKRGA     EST HI ORDER BIT AND SHIFT LEFT
         BZ    NOMORE              WHOLE REG IS ZERO,NO MORE ALIVE CPUS
         BM    NOL                 HI ORDER BIT ZERO,NOT ALIVE
* CPU IS ALIVE
         DROP  PSAPTR1
         USING FLC,0
ONLINE   CH    CPUID6,PSACPUPA     IS IT THIS CPU?
         DROP  0
         USING FLC,PSAPTR1
         BE    NOL                 YES,THEN SKIP
         LR    PCCAPTR2,CPUID6     GET CPUID
         SLL   PCCAPTR2,2          MULTIPLY BY FOUR
         L     WRKREGF,CVTPTR      GET CVT ADDR
         L     WRKREGF,CVTPCCAT-CVT(WRKREGF) GET ADDR OF PCCAVT
         L     PCCAPTR2,0(PCCAPTR2,WRKREGF) GET ADDR OF PCCA
         L     PSAPTR1,PCCAPSAV    GET ADDR OF PSA
         CLC   PSAAOLD,WAITASCB    IS IT WAIT ASCB ?
         BNE   NOL                 NO,THEN SKIP
*  SIGNAL THE  CPU
SIGNAL   RPSIG
* GET NEXT CPU
NOL      LA    CPUID6,1(CPUID6)    ADD ONE TO COUNTER
         B     WKUPL1              TRY AGAIN
NOMORE   EQU   *                   NO MORE CPUS
         USING SRBSECT,SRBPTR2
***********************************************************************
*              END WAKEUP ROUTINE                                     *
***********************************************************************
         MEND
         TITLE 'MEMSW'
         MACRO
&NAME    MEMSW
***********************************************************************
*  MEMSW-                                                             *
*        THIS  ROUTINE INTERFACES WITH MEMORY SWITCH.                 *
*        SINCE THE SCHEDULING OF THE SRB MAY BE INTRODUCING
*        DISPATCHABLE WORK INTO THE ADDRESS SPACE, MEMORY SWITCH
*        MUST BE INVOKED TO INSURE THAT THE HIGHEST PRIORITY ADDRESS
*        SPACES ARE BEING DISPATCHED.
*        IT RECOGNIZES IF THE SCHEDULED SRB HAS CPU AFFINITY. IF      *
*        SO, MEMORY SWITCH IS INFORMED THAT THE NEW WORK MAY ONLY RUN
*        ON THE SPECIFIED CPUS.
*                                                                     *
*        INPUT-                                                       *
*          REGISTERS                                                  *
*              ASCBPTR6 (R6) -CONTAINS ADDR OF READIED ASCB.          *
*              BASEREG4  (R4) -  BASE REGISTER                        *
*              SRBPTR2 (R2) - ADDR OF SRB  BEING SCHEDULED.
*          FIELDS-                                                    *
*              SRBCPAFF-CONTAINS CPU AFFINITY DESCRIPTION             *
*                                                                     *
*        OUTPUT-                                                      *
*              R0,R14,R15,R1-VOLATILE                                 *
*                                                                     *
*        SUBROUTINES/MACRO CALLS-NONE                                 *
*        INTERFACES- IEAVEMS0 (MEMORY SWITCH)                         *
***********************************************************************
         SPACE 3
*/*SCH13: CHART SCHEDULE MEMSW */
*/*MEMSW: E MEMSW */
*/* P PLACE ASCB ADDRESS IN REG 1 */
*/* D (NO,NOAFF,YES,) SRB HAS CPU AFFINITY? */
*/* P PLACE AFFINITY MASK IN REG 0 */
*/* P COMPLEMENT REG 1 */
*/*NOAFF: L IEAVEMS0:CALL MEMORY SWITCH */
*/* R RETURN */
*/*SCH12: END SCHEDULE MEMSW */
         SPACE 3
&NAME    LA    R1,0(ASCBPTR6)      PUT ASCB ADDR IN R1
         CLC   SRBCPAFF,HW0        DOES SRB HAVE AFFINITY
         BZ    NOAFF               NO AFFINITY
*
* CPU AFFINITY
         LH    R0,SRBCPAFF         GET AFFINITY INDICATOR
         LCR   R1,R1               COMPLEMENT ASCB  ADDRESS
*
NOAFF    EQU   *
         L     R15,MSADDR          GET ADDR OF IEAVEMS0
         BALR  14,15               CALL IEAVEMS0
***********************************************************************
*              END OF MEMSW ROUTINE                                   *
***********************************************************************
         MEND
         TITLE 'OPTINT'
         MACRO
&NAME    OPTINT
***********************************************************************
*  OPTINT-                                                            *
*        THIS ROUTINE INTERFACES WITH SRM.                      *
*        IT ISSUES THE USERRDY SYSEVENT AND TURNS OFF THE             *
*         LONG WAIT FLAG TO INDICATE TO TIMER MANAGER THAT THE        *
*        ADDRESS SPACE IS NO LONGER IN LONG WAIT.                     *
*                                                                     *
*        INPUT  REGS-                                                 *
*              ASCBPTR6 (R6) -ADDR OF ASCB OF A.S. MADE READY         *
*        FIELDS REF-                                                  *
*              CVTPTR (LOCATION 16) -ADDR OF CVT                      *
*              CVTOPTE- ADDR OF SYSEVENT BRANCH ENTRY                *
*              ASCBASID- ASID FOR ADDRESS SPACE MADE READY            *
*        OUTPUT REGS                                                  *
*              R0,R1,R13,R14,R15-VOLATILE                             *
*        FIELDS CHG-                                                  *
*              ASCBTMLW- LONG WAIT BIT TURNED OFF                     *
***********************************************************************
         SPACE 3
*/*SCH14: CHART SCHEDULE OPTINT */
*/*OPTINT: E OPTINT */
*/* P TURN OFF LONG WAIT INDICATOR ASCBTMLW */
*/* P PLACE ADDRESS OF SAVE AREA IN RB */
*/* P PLACE ASID IN REG 0 */
*/* L SYSEVENT USERRDY,ASID=(0),ENTRY=BRANCH */
*/* R RETURN */
*/*SCH14: END SCHEDULE OPTINT */
         SPACE 3
*                                  *
&NAME    DS    0H
         L     R15,ASCBFW1         GET WORD WITH LONG WAIT BIT
&NAME.1  LR    R13,R15
         N     R13,OFFTMLW         TURN OFF LONG WAIT BIT
         CS    R15,R13,ASCBFW1     STORE BACK IF UNCHANGED
         BNE   &NAME.1             IF NOT SUCCESSFUL,TRY AGAIN
*  GET ADDRESS OF SAVE AREA NEEDED FOR SYSEVENT
         L     R13,CVTPTR
         L     R13,CVTSPSA-CVT(R13)
         L     R13,WSAGSCHE-WSAG(R13)
         ICM   R0,B3+B4,ASCBASID   GET ASID FOR INTERFACE
         SYSEVENT  USERRDY,ASID=(0),ENTRY=BRANCH
***********************************************************************
*              END OPTINT ROUTINE                                     *
***********************************************************************
         MEND
         TITLE 'RPSIG'
         MACRO
&NAME    RPSIG
***********************************************************************
*  RPSIG-                                                             *
*        THIS ROUTINE CALLS IPC TO SIGNAL THE CPU DISPATCHED          *
*        TO THE WAIT TASK.  THIS IS DONE TO CAUSE AN EXTERNAL
*        INTERRUPT ON THE CPU IN THE WAIT STATE,THEREBY CAUSING
*        IT TO ENTER THE DISPATCHER.
*        INPUT-REGS-                                                  *
*              PCCAPTR2 (R2) -CONTAINS ADDR OF PCCA                   *
*                   FOR CPU BEING SIGNALLED.                          *
*        FIELDS REF- NONE                                             *
*        OUTPUT REGS                                                  *
*              R0,R1,R14,R15-VOLATILE                                 *
*              OTHERS UNCHANGED                                       *
*        SUBROUTINES/LOCAL MACROS-NONE                                *
*        INTERFACES-                                                  *
*           IPC VIA RPSGNL MACRO                                      *
*                                                                     *
***********************************************************************
         SPACE 3
*/*SCH21: CHART SCHEDULE RPSIG */
*/*RPSIG: E RPSIG */
*/* L ISSUE RPSGNL SWITCH TO WAITING CPU */
*/* R RETURN */
*/*SCH21: END SCHEDULE RPSIG */
         SPACE 3
&NAME     RPSGNL  SWITCH,CPU=0(PCCAPTR2)
***********************************************************************
*              END RPSIG ROUTINE                                      *
***********************************************************************
         MEND
         TITLE 'ACONS'
         MACRO
         ACONS
***********************************************************************
* ASSEMBLED CONSTANTS                                                 *
*                                                                     *
***********************************************************************
FW0      DS    0F                  FULLWORD OF ZEROES
HW0      DC    H'0'
         DC    H'0'
CHARASCB DC    C'ASCB'             USED FOR ASCB VALIDITY CHECK
BASEADDR DC    A(IEAVESC1)         BASE ADDRESS
* VCONS
MSADDR   DC    V(IEAVEMS0)         ADDR OF MEMORY SWITCH ROUTINE
WAITASCB DC    V(IEAWASCB)         ADDR OF WAIT ASCB
*        TABLES
*        GLOBAL PRIORITY INDEX TABLE
GPIT     DS    0A
         DC    V(IEASMSY)          ADDR OF SYSTEM PRIORITY LEVEL
         DC    V(IEASMNQ)          ADDR OF NONQ PRIORITY LEVEL
*        LOCAL PRIORITY INDEX TABLE
LPIT     DS    0A
         DC    A(LSPLSYS-LSPL)     OFFSET OF SYSTEM LEVEL
         DC    A(LSPLNQ-LSPL)      OFFSET OF NONQ LEVEL
* MISCELLANEOUS
* THIS WORD IS UESED TO TURN OFF THE LONG WAIT BIT
OFFTMLW  DS    0A
         DC    XL2'FFFF'
         DC    AL1(255-ASCBTMLW)
         DC    XL1'FF'
         MEND
         EJECT
         MACRO
         MAINLINE
***********************************************************************
*              THIS IS THE MAINLINE                                   *
***********************************************************************
         START
         PROLOG                    PROLOGUE
         REGSTERS                  REGISTER EQUATES
         MAPMACS                   MAPPING MACROS
         MASKEQUS                  EQUATED CONSTANTS AND MASKS
IEAVESC0 CSECT
IEAVESC0 MODID   BR=NO
         GLOBAL                    GLOBAL SCHEDULE ROUTINE
         LOCAL                     LOCAL  SCHEDULE ROUTINE
         ACONS                     ASSEMBLED CONSTANTS
         MEND
***********************************************************************
*              END OF MAINLINE                                        *
***********************************************************************
         MAINLINE
         END
***********************************************************************
