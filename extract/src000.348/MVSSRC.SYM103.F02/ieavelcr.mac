           TITLE   'IEAVELCR-LOW CORE REFRESH ROUTINE'
* /* START OF SPECIFICATIONS ****
*        MODULE NAME=   IEAVELCR
*
*             CSECT NAME=    IEAVELCR
*
*        DESCRIPTIVE NAME=   LOW-CORE, COMMON AREA REFRESH ROUTINE
*
*        COPYRIGHT=     NONE
*
*        STATUS=   VERSION 1
*
*        FUNCTION=
*             THE  LOW-CORE,  COMMON  AREA  REFRESH  ROUTINE  HAS  THE
*             CAPABILITY  OF  REFRESHING  SYSTEM  AND  CPU  VCONS, AND
*             GLOBAL AND CPU AREAS WHOSE VALUES HAVE BEEN DUPLEXED  AT
*             SYSTEM  OR  CPU  INITIALIZATION  TIME.   CURRENTLY,  THE
*             FIELDS LISTED  BELOW  IN  THE  OUTPUT  SECTION  WILL  BE
*             REFRESHED.
*
*        OPERATION=
*
*             IEAVELCR ENTRY=
*                  SAVE ALL REGISTERS;
*                  DO FOR ALL VCON VALUES;
*                  IF VCONS ARE VALID
*                       THEN
*                            REFRESH VALUE FROM VCON;
*                       ELSE
*                            REFRESH VCONS FROM VALUE;
*                  END;
*                  DO FOR ALL DUPLEXED VALUES;
*                  IF DUPLEXES ARE VALID
*                       THEN
*                            REFRESH VALUE FROM DUPLEX;
*                       ELSE
*                            REFRESH DUPLEXES FROM VALUES;
*                  END;
*                  GO TO SETLOCK ROUTINE (IEAVELKR);
*
*        NOTES=    SERIALIZATION IS NOT REQUIRED ON THE DUPLEXED AREAS
*                  AS LONG AS MULTI-CYCLE INSTRUCTIONS ARE NOT USED TO
*                  UPDATE THESE AREAS.
*
*                  ALSO SEE ENTRY POINT DESCRIPTIONS BELOW
*
*             DEPENDENCIES=
*
*                  RTM=
*                       1.  REGISTER  15  CAN  BE   DESTROYED   ACROSS
*                            INTERFACE.
*                       2.  RTM  MUST SUPPLY RECURSION LOGIC SUCH THAT
*                            THIS ROUTINE IS NOT RECURSIVELY  ENTERED.
*
*                  NIP0 AND NIP09=
*                       1.  THE HIGH ORDER BIT (BIT 0) OF ALL DUPLEXED
*                            VALUES IN THE AREA GSDA MUST  BE  SET  ON
*                            WHEN THE VALUE IS PLACED IN THIS AREA.
*
*                  NIP0=
*
*
*                       1.  THE  FOLLOWING  FIELDS MUST BE DUPLEXED BY
*                            NIP0 INTO THE AREA GSDA=
*                            CVTASVT             CVTCSD
*                            CVTPCCAT            CVTLCCAT
*                            CVTGDA
*                       2. THE FIELD CVTGSDA MUST  BE  INITIALIZED  BY
*                       NIP0  AND  THE HIGH ORDER BIT OF THIS FIELD BE
*                       SET AFTER ITS INITIALIZATION.
*                  NIP09=
*                       1. THE FOLLOWING FIELDS MUST  BE  DUPLEXED  BY
*                            MEMORY REQUEST INTO THE AREA GSDA=
*                            ASVTMAX (MAXUSER)
*
*             CHARACTER CODE DEPENDENCIES=  NONE
*
*             RESTRICTIONS=  NONE
*
*             REGISTER CONVENTIONS=    REFERENCE  EQUATE  SECTION   OF
*                                      MODULE.
*
*        MODULE TYPE=   PROCEDURE
*
*        PROCESSOR=     ASSEMBLER
*
*        MODULE SIZE=   REFERENCE ESD LENGTH AT BEGINNING OF MODULE
*
*        ATTRIBUTES=    NUCLEUS
*                       ZERO PROTECT KEY
*                       DISABLED
*                       REFRESHABLE
*                       ADDRESS SPACE = FIXED
*                       SUPERVISOR MODE
*
*        ENTRY POINT=   IEAVELCR
*
*             PURPOSE=  THIS IS THE ONLY ENTRY TO THE LOW-CORE REFRESH
*                       ROUTINE.   IT  WILL  REFRESH  SYSTEM  AND  CPU
*                       VCONS,  AND  GLOBAL AND CPU AREAS WHOSE VALUES
*                       HAVE  BEEN   DUPLEXED   AT   SYSTEM   OR   CPU
*                       INITIALIZATION TIME.
*
*             LINKAGE=  SEE INPUT SECTION BELOW
*
*             INPUT=
*
*                  ENVIRONMENT=   DISABLED
*                                 SUPERVISOR STATE
*                                 KEY 0
*                                 NO LOCKS REQUIRED
*
*                  DATA=     GSDA CONTROL BLOCK
*
*                  REGISTERS=     14 = RETURN ADDRESS
*                                 15 = ENTRY POINT ADDRESS
*                                 ALL OTHERS IRRELEVANT
*
*             OUTPUT=   SEE EXIT -- NORMAL
*
*        REGISTERS SAVED=    ALL SAVED EXCEPT 15
*
*
*
*        REGISTERS USED=     ALL
*
*        REGISTERS RESTORED= NONE
*
*        EXIT -- NORMAL=     SETLOCK VERIFICATION (IEAVELKR)
*
*             CONDITIONS=    EXIT WILL ALWAYS BE TO SETLOCK
*
*             OUTPUT=
*                  DATA=     THIS ROUTINE WILL REFRESH  THE  FOLLOWING
*                            FIELDS=
*                            CVTTCBP   CVTASCBH  CVT0EF00  CVTEXPRO
*                            CVT0VL00  CVTGSMQ   CVTLSMQ
*                            CVT0DS    CVTGSPL   CVTABEND  CVTGLMN
*                            CVT0VL01  CVTIPCDS  CVTGETCL  CVTIPCRI
*                            CVTFRECL  CVTIPCRP  CVTCRMN   CVTRMBR
*                            CVTGMBR   CVTLFRM   CVTOPTE   CVTSPSA
*                            CVTASVT   CVTCSD    CVTPCCAT  CVTLCCAT
*                            CVTGDA    ASVTMAXU
*
*                  REGISTERS=
*                       13-ADDRESS OF RTM'S SAVED REGISTERS
*                       15-SETLOCK RECOVERY ADDRESS(IEAVELKR)
*
*             RETURN CODE=   NONE
*
*        EXIT -- ERROR= NONE
*
*        EXTERNAL REFERENCES=
*
*             ROUTINES= IEAVELKR  =  SETLOCK'S   REPAIR   ROUTINE   IS
*                       BRANCHED  TO  AS  THE  NEXT STEP OF THE REPAIR
*                       ROUTINE.
*
*             DATA AREAS=    NONE
*
*             CONTROL BLOCKS=     GSDA R/W
*                                 CVT R/W
*                                 ASVT R/W
*                                 LCCA R
*                                 WSAC R
*
*        TABLES=   INTERNAL VCON TABLE AND INTERNAL OFFSET TABLES
*
*        MACROS=   NONE
*
*        SERIALIZATION= DISABLE
*
*        MESSAGES= NONE
*
*        ABEND CODES=   NONE
*
**** END OF SPECIFICATIONS ***/
*/*IEAVELCR: CHART LOW CORE REFRESH */
*/* HEADER
*/*
*/*
*/*
*/*                                             SECTION 3.1.8
*/* LOW CORE REFRESH
*/*                                             PAGE # */
*/*IEAVELCR: E IEAVELCR */
         SPACE 2
IEAVELCR CSECT
         USING PSA,0
         USING CVT,TARGREG
         USING GSDA,REFRREG
         USING ASVT,ASVTREG
*        EQUATE SECTION
R0       EQU   0                       REGISTER 0
TARGREG  EQU   2                       ADDRESS OF TARGET AREA
REFRREG  EQU   3                       ADDRESS OF DUPLEX AREA
INDEXREG EQU   4                       ADDRESS OF OFFSET
COUNTREG EQU   5                       NUMBER IN AREA TO BE DUPLEXED
ASVTREG  EQU   6                       ADDRESS OF ASVT
BASEREG  EQU   9                       BASE REGISTER
WORKREG  EQU   10                      GENERAL WORK REG
WORKREG2 EQU   11                      GENERAL WORK REG
WORKREG3 EQU   12                      GENERAL WORK REG
R13      EQU   13                      REGISTER 13
R14      EQU   14                      REGISTER 14
R15      EQU   15                      REGISTER 15
*        VALUE SECTION
ZERO     EQU   0                       DISPLACEMENT VALUE
ONE      EQU   1                       DISPLACEMENT VALUE
TWO      EQU   2                       DISPLACEMENT VALUE
FOUR     EQU   4                       DISPLACEMENT VALUE
HIGHON   EQU   8                       MASK VALUE
         SPACE 2
*/* P SAVE RTM'S REGS IN SAVE AREA */
         SPACE 2
         L     R15,PSALCCAV            GET LCCA ADDRESS
         L     R15,LCCACPUS-LCCA(R15)  GET WSAC ADDRESS
         L     R15,WSACRRSA-WSAC(R15)  GET SAVE AREA ADDRESS
         STM   R0,R15,ZERO(R15)        SAVE RTM REGISTERS
         SPACE 2
*/* P ESTABLISH ADDRESSABILITY */
         SPACE 2
         BALR  BASEREG,ZERO            ESTABLISH
         USING *,BASEREG               ADDRESSABILITY
         LR    R13,R15                 PUT SAVE AREA ADDRESS IN 13
         SPACE 2
*/* P SET UP FOR SUBROUTINE TO REFRESH VCONS */
         SPACE 2
*        VCON  REFRESH ROUTINE
         L     TARGREG,FLCCVT          GET CVT ADDRESS
         LA    REFRREG,VCONTAB         GET ADDR OF VCON TABLE
         LA    INDEXREG,VINDXTAB       GET ADDR OF INDEX TAB FOR VCONS
         LA    COUNTREG,VCVTIND        GET NUMBER OF ENTRIES
         SPACE 2
*/* S REFRESH:GO TO INTERNAL REFRESH ROUTINE */
         SPACE 2
         BAL   R14,REFRESH             GO TO REFRESH SUBROUTINE
         SPACE 2
*/* D (NO,EXIT,YES,) GSDA POINTER OK? */
         SPACE 2
         L     TARGREG,FLCCVT          GET CVT ADDRESS
         L     REFRREG,CVTGSDA         GET GSDA ADDRESS
         LTR   REFRREG,REFRREG         IS HIGH BIT ON,ON IF VALID
         BNM   EXIT                    IF NOT ON FINISHED
         SPACE 2
*/* P SET UP TO REFRESH CVT FROM GSDA */
         SPACE 2
         LA    INDEXREG,GINDXTAB       GET ADDR OF INDEX TAB FOR DUP
         LA    COUNTREG,GSDA001N       GET NUMBER OF ENTRIES
         SPACE 2
*/* S REFRESH:GO TO INTERNAL REFRESH SUBROUTINE */
         SPACE 2
         BAL   R14,REFRESH             GO TO REFRESH SUBROUTINE
         SPACE 2
*/* D (NO,BACKREF,YES,) IS DUPLEX MAXUSER VALID? */
*/* P REFRESH ASVTMAXU FROM GSDAMAXU */
         SPACE 2
         L     REFRREG,CVTGSDA         GET GSDA ADDRESS
         L     ASVTREG,CVTASVT         GET ASVT ADDRESS
         TM    GSDAMAX,GSDAMAXB        IS DUPLEXED VALUE VALID
         BNO   BACKREF                 IF NOT REFR DUPLEX
         SPACE 2
*/*EXIT: P GET SETLOCK REPAIR RTN ADDRESS */
         SPACE 2
         LH    WORKREG,GSDAMAXU        GET GOOD VALUE
         ST    WORKREG,ASVTMAXU        STORE IN ASVT FIELD
EXIT     L     R14,LOCKADDR            GET LOCK REPAIR RTN ADDRESS
         SPACE 2
*/* P (,FINI) EXIT FROM ROUTINE */
         SPACE 2
         BR    R14                     GO TO SETLOCK ROUTINE
         SPACE 2
*/*BACKREF: P (,EXIT) REFRESH GSDAMAXU FROM ASVTMAXU */
         SPACE 2
BACKREF  LH    WORKREG,ASVTMAXU+TWO    GET GOOD VALUE
         ICM   WORKREG,HIGHON,HBITON   SET HIGH BIT
         ST    WORKREG,GSDAMAX         STORE GOOD DUPLEX VALUE
         B     EXIT                    FINISHED
*/*FINI: R END THIS ROUTINE */
         SPACE 2
*/*REFRESH: E INTERNAL REFRESH ROUTINE */
         SPACE 2
REFRESH  DS    0H
         SLR   WORKREG,WORKREG         CLEAR REG
         SPACE 2
*/*NEXTENT: D (YES,FINI2,NO,) HAVE ALL BEEN REFRESHED? */
         SPACE 2
NEXTENT  CR    WORKREG,COUNTREG        ARE WE FINISHED
         BNLR  R14                     IF SO,RETURN
         SPACE 2
*/* D (NO,REFDUP,YES,) IS DUPLEX VALUE VALID? */
         SPACE 2
         L     WORKREG3,ZERO(REFRREG)  GET DUPLEX VALUE
         LTR   WORKREG3,WORKREG3       IS DUPLEX VALID VALUE
         BNM   REFDUP                  IF NOT,REFRESH DUPLEX
         SPACE 2
*/* P REFRESH VALUE FROM DUPLEX */
         SPACE 2
         LA    WORKREG3,ZERO(WORKREG3) CLEAR HIGH BIT
         LH    WORKREG2,ZERO(INDEXREG) GET OFFSET VALUE
         ST    WORKREG3,ZERO(WORKREG2,TARGREG) PUT INTO AREA
         SPACE 2
*/*LOOPINC: P (,NEXTENT) INCREMENT COUNTER AND OFFSETS */
         SPACE 2
LOOPINC  LA    WORKREG,ONE(WORKREG)    INCREMENT COUNTER
         LA    INDEXREG,TWO(INDEXREG)  GET ADDRESS OF NEXT OFFSET
         LA    REFRREG,FOUR(REFRREG)   GET ADDRESS OF NEXT VALUE
         B     NEXTENT                 LOOP
         SPACE 2
*/*REFDUP: P (,LOOPINC) REFRESH DUPLEX FROM VALUE */
         SPACE 2
REFDUP   LH    WORKREG2,ZERO(INDEXREG) GET INDEX VALUE
         L     WORKREG2,ZERO(WORKREG2,TARGREG) GET TRUE VALUE
         ICM   WORKREG2,HIGHON,HBITON
         ST    WORKREG2,ZERO(REFRREG)  UPDATE DUPLEX AREA
         B     LOOPINC                 GO TO NEXT ENTRY
         SPACE 2
*/*FINI2: R END REFRESH ROUTINE */
         SPACE 2
*/*IEAVELCR: END LOW CORE REFRESH */
         SPACE 2
LOCKADDR DC    V(IEAVELKR)             ADDR OF SETLOCK REPAIR RTN
VCONTAB  EQU   *                       START VCON TABLE
         DC    X'80'                   SET HIGH BIT ON
VIPCDS   DC    VL3(IEAVEDR)            ADDR OF DIRECT SIGNAL
         DC    X'80'                   SET HIGH BIT ON
VIPCRI   DC    VL3(IEAVERI)            ADDR OF REMOTE IMMEDIATE
         DC    X'80'                   SET HIGH BIT ON
VIPCRP   DC    VL3(IEAVERP)            ADDR OF REMOTE PENDABLE
         DC    X'80'                   SET HIGH BIT ON
VLFRM    DC    VL3(FMBRANCH)           LIST FORM FREEMAIN BRANCH ENTRY
         DC    X'80'                   SET HIGH BIT ON
VRMBR    DC    VL3(RMBRANCH)           ADDR OF REGMAIN BRANCH ENTRY
         DC    X'80'                   SET HIGH BIT ON
VTCBP    DC    VL3(IEATCBP)            ADDRESS OF NEXT AND CURRENT TCBS
         DC    X'80'                   SET HIGH BIT ON
V0EF00   DC    VL3(IEA0EF00)           ADDR OF STAGE 2 EXIT EFFECTORS
         DC    X'80'                   SET HIGH BIT ON
V0VL00   DC    VL3(IEA0VL00)           ADDR OF VALIDITY CHECK ROUTINE
         DC    X'80'                   SET HIGH BIT ON
VODS     DC    VL3(IEA0DS)             ADDR OF MAIN DISPATCHER ENTRY
         DC    X'80'                   SET HIGH BIT ON
VABEND   DC    VL3(IEABEND)            ADDR OF SECONDARY CVT
         DC    X'80'                   SET HIGH BIT ON
V0VL01   DC    VL3(IEA0VL01)           ADDR OF VALIDITY CHECK RTN 2
         DC    X'80'                   SET HIGH BIT ON
VGETCL   DC    VL3(IEAVGTCL)           ADDR OF GETCELL RTN
         DC    X'80'                   SET HIGH BIT ON
VFRECL   DC    VL3(IEAVFRCL)           ADDR OF FREECELL RTN
         DC    X'80'                   SET HIGH BIT ON
VCRMN    DC    VL3(CRBRANCH)           ADDR OF SVC 120 BRANCH ENTRY
         DC    X'80'                   SET HIGH BIT ON
VOPTE    DC    VL3(IRARMI00)           ADDR OF SYSEVENT
         DC    X'80'                   SET HIGH BIT ON
VASCBH   DC    VL3(IEAMASCB)           HEAD OF ASCB QUEUE
         DC    X'80'                   SET HIGH BIT ON
VEXPRO   DC    VL3(IEAVEXPR)           ADDR OF EXIT PROLOGUE
         DC    X'80'                   SET HIGH BIT ON
VGSMQ    DC    VL3(IEAGSMQ)            ADDR OF GLOBAL SERVICE MANAGER Q
         DC    X'80'                   SET HIGH BIT ON
VLSMQ    DC    VL3(IEALSMQ)            ADDR OF LOCAL SERVICE MANAGER Q
         DC    X'80'                   SET HIGH BIT ON
VGSPL    DC    VL3(IEAGSPL)            ADDR OF GLOBAL SER. PRIOR. LIST
         DC    X'80'                   SET HIGH BIT ON
VGLMN    DC    VL3(GLBRANCH)           GLOBAL ENTRY TO GETMAIN/FREEMAIN
         DC    X'80'                   SET HIGH BIT ON
VSPSA    DC    VL3(IEAVGWSA)           ADDR OF GLOBAL WORK/SAVE AREAS
         DC    X'80'                   SET HIGH BIT ON
VGMBR    DC    VL3(GMBRANCH)           LIST FORM GETMAIN BRANCH ENTRY
VCONTEND EQU   *                       END VCON TABLE
VCVTIND  EQU   (VCONTEND-VCONTAB)/4    NUMBER OF VCONS REFRESHED
VINDXTAB EQU   *                       START OFFSET TABLE FOR VCONS
         DC    AL2(CVTIPCDS-CVT)       OFFSET FOR CVTIPCDS
         DC    AL2(CVTIPCRI-CVT)       OFFSET FOR CVTIPCRI
         DC    AL2(CVTIPCRP-CVT)       OFFSET FOR CVTIPCRP
         DC    AL2(CVTLFRM-CVT)        OFFSET FOR CVTLFRM
         DC    AL2(CVTRMBR-CVT)        OFFSET FOR CVTRMBR
         DC    AL2(CVTTCBP-CVT)        OFFSET FOR CVTTCBP
         DC    AL2(CVT0EF00-CVT)       OFFSET FOR CVT0EF00
         DC    AL2(CVT0VL00-CVT)       OFFSET FOR CVT0VL00
         DC    AL2(CVT0DS-CVT)         OFFSET FOR CVT0DS
         DC    AL2(CVTABEND-CVT)       OFFSET FOR CVTABEND
         DC    AL2(CVT0VL01-CVT)       OFFSET FOR CVT0VL01
         DC    AL2(CVTGETCL-CVT)       OFFSET FOR CVTGETCL
         DC    AL2(CVTFRECL-CVT)       OFFSET FOR CVTFRECL
         DC    AL2(CVTCRMN-CVT)        OFFSET FOR CVTCRMN
         DC    AL2(CVTOPTE-CVT)        OFFSET FOR CVTOPTE
         DC    AL2(CVTASCBH-CVT)       OFFSET FOR CVTASCBH
         DC    AL2(CVTEXPRO-CVT)       OFFSET FOR CVTEXPRO
         DC    AL2(CVTGSMQ-CVT)        OFFSET FOR CVTGSMQ
         DC    AL2(CVTLSMQ-CVT)        OFFSET FOR CVTLSMQ
         DC    AL2(CVTGSPL-CVT)        OFFSET FOR CVTGSPL
         DC    AL2(CVTGLMN-CVT)        OFFSET FOR CVTGLMN
         DC    AL2(CVTSPSA-CVT)        OFFSET FOR CVTSPSA
         DC    AL2(CVTGMBR-CVT)        OFFSET FOR CVTGMBR
GINDXTAB EQU   *                       START OFFSET TABLE FOR GSDA
         DC    AL2(CVTASVT-CVT)        OFFSET FOR CVTASVT
         DC    AL2(CVTPCCAT-CVT)       OFFSET FOR CVTPCCT
         DC    AL2(CVTGDA-CVT)         OFFSET FOR CVTGDA
         DC    AL2(CVTCSD-CVT)         OFFSET FOR CVTCSD
         DC    AL2(CVTLCCAT-CVT)       OFFSET FOR CVTLCCT
HBITON   DC    X'80'                   HIGH BIT ON FOR DUPLEX REFRESH
         IHAGSDA
         IHAASVT
         IHALCCA
         IHAPSA
         IHAWSAVT DSECT=YES,CLASS=CPU
         CVT DSECT=YES
         END
