         TITLE 'IEAVEDS0 - PROLOGUE'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVEDS0
*
*02*     CSECT-NAME = IEAVEDS0
*
*01*  DESCRIPTIVE-NAME = DISPATCHER
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = CHANGE LEVEL 0
*
*01*  FUNCTION = DISPATCHES TASKS, LOCAL SUPERVISOR ROUTINES AND SRB'S.
*
*02*     OPERATION =THE DISPATCHER SCANS VARIOUS INDICATORS FOR WORK TO
*        BE DONE WHENEVER IT IS ENTERED.  IT STARTS BY TESTING FOR ANY
*        SPECIAL EXITS WHICH MAY HAVE BEEN INDICATED BY SOME SYSTEM
*        FUNCTION SUCH AS VARY CPU PROCESSING OR ACR.  IF NONE OF THE
*        SPECIAL EXITS HAVE BEEN SPECIFIED THE DISPATCHER SCANS ITS
*        VARIOUS QUEUES FOR SRBS, LOCAL SUPERVISOR ROUTINES OR TASKS TO
*        DISPATCH.  QUEUES ARE SCANNED IN THIS ORDER; THE GLOBAL
*        SERVICE MANAGER QUEUE, THE GLOBAL SERVICE PRIORITY LIST, THE
*        LOCAL SERVICE MANAGER QUEUE, THE PSAANEW FIELD (FOR ADDRESS
*        SPACE SWITCH), THE LOCAL SERVICE PRIORITY LIST, THE LOCAL LOCK
*        IS CHECKED FOR LOCAL SUPERVISOR ROUTINES, AND THE TCB
*        DISPATCHING QUEUE IS SCANNED FOR READY TASKS.  IF NO WORK IS
*        FOUND IN THE SYSTEM, THE WAIT TASK IS DISPATCHED.
*
*01*   NOTES =
*
*02*     DEPENDENCIES = NONE
*
*03*        CHARACTER-CODE-DEPENDENCIES = CHARACTER CODE INDEPENDENT
*
*02*     RESTRICTIONS = NONE
*
*02*     REGISTER-CONVENTIONS = DEFINED IN THE EQUATES SECTION OF THIS
*        MODULE
*
*02*     PATCH-LABEL = NUCLEUS PATCH AREA
*
*01*  MODULE-TYPE = PROCEDURE
*
*02*     PROCESSOR = ASSEMBLER-370R
*
*02*     MODULE-SIZE = SEE ESD FOR THIS MODULE
*
*02*     ATTRIBUTES = NUCLEUS×SUPERVISOR MODE×REFRESHABLE×FIXED×
*        ZERO PROTECT KEY×DISABLED
*
*01*  ENTRY-POINT = IEA0DS
*
*02*     PURPOSE = MAIN DISPATCHER ENTRY POINT. DISABLED, KEY ZERO,
*        SUPERVISOR MODE AND NO LOCKS EXCEPT PERHAPS THE LOCAL LOCK
*        WHEN A LOCAL SUPERVISOR ROUTINE IS BEING PREEMPTED.
*
*02*     LINKAGE = THE DISPATCHER IS ENTERED VIA A BRANCH.  NO
*        PARAMETERS ARE PASSED INTO IT.  MODULES ENTERING THE
*        DISPATCHER AT THIS POINT ARE: THE INTERRUPT HANDLERS, EXIT
*        PROLOG, VARY CPU PROCESSOR, THE LOCK MANAGER, ETC.
*
*02*     INPUT = THE DISPATCHER DOES NOT LOOK AT ANY INPUT REGISTERS ON
*        ENTRY.  DATA REQUIRED FOR IT'S PROCESSING IS OBTAINED FROM THE
*        SPECIAL EXITS INDICATORS IN THE LCCA, THE GLOBAL SERVICE
*        MANAGER QUEUE HEADER, THE GLOBAL SERVICE PRIORITY LIST, THE
*        LOCAL SERVICE MANAGER QUEUE HEADER, THE PSAANEW AND PSAAOLD
*        FIELDS, THE LOCAL SERVICE PRIORITY LISTS, THE CONDITION OF THE
*        LOCAL LOCK AND THE QUEUE OF TASKS IN AN ADDRESS SPACE.
*
*02*     OUTPUT = THE DISPATCHER RESTORES THE STATUS (REGISTERS,
*        FLOATING POINT REGISTERS, CPU INTERVAL TIMER VALUE, LOCKING
*        STATUS AND PSW) OF THE UNIT BEING DISPATCHED.  THE UNIT BEING
*        DISPATCHED MAY OR MAY NOT BE THE UNIT WHICH WAS CURRENTLY
*        ACTIVE WHEN THE DISPATCHER WAS ENTERED.  IF THE UNIT WAS THE
*        CURRENTLY ACTIVE TASK OR LOCAL SUPERVISOR ROUTINE, THE GENERAL
*        PURPOSE REGISTERS AND PSW ARE RESTORED.  IF THE UNIT CHOSEN TO
*        BE DISPATCHED WAS NOT THE CURRENT TASK OR LOCAL SUPERVISOR
*        ROUTINE, THE FLOATING POINT REGISTERS, CPU INTERVAL VALUE AND
*        LOCKING STATUS FOR THE UNIT BEING PREEMPTED IS STORED INTO
*        EITHER THE TCB, FOR A TASK, OR INTO THE INTERRUPT HANDLER SAVE
*        AREA (IHSA), FOR A LOCAL SUPERVISOR ROUTINE.  THIS INFORMATION
*        MUST ALSO BE RESTORED FOR THE NEW UNIT BEING DISPATCHED.
*
*02*     REGISTERS-SAVED = NONE
*
*02*     REGISTER-USAGE = REG 9 - BASE REGISTER , REGISTER 8 - CURRENT
*        ASCB ADDRESS, REGISTER 7 - LCCA ADDRESS.  ALL OTHER REGISTER
*        USAGE VARIES AT DIFFERENT POINTS WITHIN THE MODULE.
*
*02*     REGISTERS-RESTORED = ALL OF THE REGISTERS FOR A LOCAL
*        SUPERVISOR ROUTINE, A SUSPENDED SRB, OR A TASK ARE RESTORED AT
*        DISPATCH.  ON THE INITIAL DISPATCH OF AN SRB, REGISTER 0 IS
*        SET TO THE ADDRESS OF THE SRB, REGISTER 1 CONTAINS THE ADDRESS
*        IN THE PARM FIELD OF THE SRB, REGISTER 14 CONTAINS THE RETURN
*        ADDRESS TO THE DISPATCHER AND REGISTER 15 CONTAINS THE ENTRY
*        POINT ADDRESS OF THE SRB ROUTINE.  ON THE DISPATCH OF THE WAIT
*        TASK, ALL REGISTERS ARE SET TO ZERO.
*
*01*  ENTRY-POINT = IEAVDSTC                                   @Z40FPXJ
*                                                              @Z40FPXJ
*02*     PURPOSE = ENTRY POINT FOR TCTL FUNCTION IN ORDER TO   @Z40FPXJ
*        DISPATCH A TASK, THE ADDRESS OF WHICH IS PASSED IN    @Z40FPXJ
*        REGISTER 6. THIS ENTRY IS WITHIN THE PORTION OF THE   @Z40FPXJ
*        TASK DISPATCHER AFTER A DISPATCHABLE TASK HAS BEEN    @Z40FPXJ
*        CHOSEN.(THE TCTL FUNCTION ALLOWS AN SRB TO GIVE CON-  @Z40FPXJ
*        TROL DIRECTLY TO A TASK BY USING THE DISPATCHER       @Z40FPXJ
*        FACILITIES).                                          @Z40FPXJ
*                                                              @Z40FPXJ
*02*     LINKAGE = THIS IS A BRANCH ENTRY POINT                @Z40FPXJ
*                                                              @Z40FPXJ
*02*     INPUT = THE FOLLOWING REGISTERS ARE SET UP BY TCTL    @Z40FPXJ
*        PRIOR TO ENTERING THE DISPATCHER AT THIS POINT:       @Z40FPXJ
*        REG 5 - RB ADDRESS, REG 6 - TCB ADDRESS, REG 7 -      @Z40FPXJ
*        LCCA ADDRESS, REG 8 - ASCB ADDRESS, REG 9 - DISPATCH- @Z40FPXJ
*        ER BASE ADDRESS, REG 13 - NON-ZERO (USED TO DETERMINE @Z40FPXJ
*        IF ENTRY WAS FROM TCTL FOR LOCAL LOCK PROCESSING      @Z40FPXJ
*                                                              @Z40FPXJ
*02*     REGISTERS-SAVED = NONE                                @Z40FPXJ
*                                                              @Z40FPXJ
*02*     REGISTER-RESTORED = ALL OF THE REGISTERS FOR A TASK   @X40FPXJ
*        ARE RESTORED ON EXIT FROM THE DISPATCHER              @Z40FPXJ
*                                                              @Z40FPXJ
*01*  ENTRY-POINT = DSSRBRTN                                   @Z40FPXJ
*                                                              @Z40FPXJ
*02*     PURPOSE = ENTRY POINT FOR TYPE 6 SVC. THIS ENTRY IS   @Z40FPXJ
*        USED BY THE SVC FLIH WHEN A TYPE 6 SVC ISSUES A       @Z40FPXJ
*        SCHEDULE FOR AN SRB.                                  @Z40FPXJ
*                                                              @Z40FPXJ
*02*     LINKAGE = THIS IS A BRANCH ENTRY POINT                @Z40FPXJ
*                                                              @Z40FPXJ
*02*     INPUT = THE FOLLOWING REGISTERS ARE SET UP BY TYPE 6  @Z40FPXJ
*        PRIOR TO ENTERING THE DISPATCHER AT THIS POINT:       @Z40FPXJ
*        REG 2 -SRB ADDRESS, REG 5 -ASCB ADDRESS, REG 7 -      @Z40FPXJ
*        LCCA ADDRESS, REG 8 - ASCB ADDRESS, REG 9 - DISPATCH- @Z40FPXJ
*        ER BASE ADDRESS.                                      @Z40FPXJ
*                                                              @Z40FPXJ
*02*     REGISTERS-SAVED = NONE                                @Z40FPXJ
*                                                              @Z40FPXJ
*02*     REGISTER-RESTORED = ALL OF THE REGISTERS FOR AN SRB   @X40FPXJ
*        ARE RESTORED ON EXIT FROM THE DISPATCHER              @Z40FPXJ
*                                                              @Z40FPXJ
*01*  ENTRY-POINT = IEAPDS6
*
*02*     PURPOSE = THIS ENTRY POINT IS USED BY END-OF-TASK (EOT) WHEN
*        IT HAS DELETED A TASK.  THE PURPOSE OF THIS ENTRY IS TO
*        PROVIDE THE FOLLOWING FUNCTIONS: JOB STEP TIMING, CLEARING
*        OF PSATNEW AND PSATOLD AND DECREMENTING OF THE COUNT OF THE
*        NUMBER OF CPUS DISPATCHED IN THE ADDRESS SPACE.  ENTRY
*        CONDITIONS ARE: DISABLED, KEY ZERO, SUPERVISOR MODE AND NO
*        LOCKS HELD.
*
*02*     LINKAGE = THE DISPATCHER IS ENTERED VIA A BRANCH.  NO
*        PARAMETERS ARE PASSED INTO IT.  EOT IS THE ONLY USER OF THIS
*        ENTRY POINT.
*
*02*     INPUT = THE DISPATCHER DOES NOT LOOK AT ANY INPUT REGISTERS ON
*        ENTRY.  DATA REQUIRED FOR IT'S PROCESSING IS OBTAINED FROM THE
*        SPECIAL EXITS INDICATORS IN THE LCCA, THE GLOBAL SERVICE
*        MANAGER QUEUE HEADER, THE GLOBAL SERVICE PRIORITY LIST, THE
*        LOCAL SERVICE MANAGER QUEUE HEADER, THE PSAANEW AND PSAAOLD
*        FIELDS, THE LOCAL SERVICE PRIORITY LISTS, THE CONDITION OF THE
*        LOCAL LOCK AND THE QUEUE OF TASKS IN AN ADDRESS SPACE.
*
*02*     OUTPUT = THE DISPATCHER RESTORES THE STATUS (REGISTERS AND
*        PSW) OF THE UNIT BEING DISPATCHED.
*
*02*     REGISTERS-SAVED = NONE
*
*02*     REGISTER-USAGE = REG 9 - BASE REGISTER , REGISTER 8 - CURRENT
*        ASCB ADDRESS, REGISTER 7 - LCCA ADDRESS.  ALL OTHER REGISTER
*        USAGE VARIES AT DIFFERENT POINTS WITHIN THE MODULE.
*
*02*     REGISTERS-RESTORED = ALL OF THE REGISTERS FOR A LOCAL
*        SUPERVISOR ROUTINE, A SUSPENDED SRB, OR A TASK ARE RESTORED ON
*        EXIT FROM THE DISPATCHER.  ON THE INITIAL DISPATCH OF AN SRB,
*        REGISTER 0 IS SET TO THE ADDRESS OF THE SRB, REGISTER 1
*        CONTAINS THE ADDRESS IN THE PARM FIELD OF THE SRB AND REGISTER
*        14 CONTAINS THE RETURN POINT TO THE DISPATCHER.  ON THE
*        DISPATCH OF THE WAIT TASK, ALL REGISTERS ARE SET TO ZERO.
*
*01*  ENTRY-POINT = IEAPDS7
*
*02*     PURPOSE = THIS ENTRY POINT IS USED BY THE I/O AND SVC FLIH'S
*        ON THEIR NORMAL RETURN TO THE DISPATCHER.  THE PURPOSE OF
*        THIS ENTRY IS TO BYPASS THE RESTORING OF THE SUPERSTACK
*        ADDRESS BY THE DISPATCHER SINCE IT IS ALREADY HELD BY THE
*        FLIH'S.  ENTRY CONDITIONS ARE THE SAME AS FOR THE IEA0DS
*        ENTRY.
*
*02*     LINKAGE = THE DISPATCHER IS ENTERED VIA A BRANCH.  NO
*        PARAMETERS ARE PASSED INTO IT.  I/0 AND SVC FLIH'S ARE THE
*        ONLY USERS OF THIS ENTRY POINT.
*
*02*     INPUT = THE DISPATCHER DOES NOT LOOK AT ANY INPUT REGISTERS ON
*        ENTRY.  DATA REQUIRED FOR IT'S PROCESSING IS OBTAINED FROM THE
*        SPECIAL EXITS INDICATORS IN THE LCCA, THE GLOBAL SERVICE
*        MANAGER QUEUE HEADER, THE GLOBAL SERVICE PRIORITY LIST, THE
*        LOCAL SERVICE MANAGER QUEUE HEADER, THE PSAANEW AND PSAAOLD
*        FIELDS, THE LOCAL SERVICE PRIORITY LISTS, THE CONDITION OF THE
*        LOCAL LOCK AND THE QUEUE OF TASKS IN AN ADDRESS SPACE.
*
*02*     OUTPUT = THE DISPATCHER RESTORES THE STATUS (REGISTERS AND
*        PSW) OF THE UNIT BEING DISPATCHED.
*
*02*     REGISTERS-SAVED = NONE
*
*02*     REGISTER-USAGE = REG 9 - BASE REGISTER , REGISTER 8 - CURRENT
*        ASCB ADDRESS, REGISTER 7 - LCCA ADDRESS.  ALL OTHER REGISTER
*        USAGE VARIES AT DIFFERENT POINTS WITHIN THE MODULE.
*
*02*     REGISTERS-RESTORED = ALL OF THE REGISTERS FOR A LOCAL
*        SUPERVISOR ROUTINE, A SUSPENDED SRB, OR A TASK ARE RESTORED ON
*        EXIT FROM THE DISPATCHER.  ON THE INITIAL DISPATCH OF AN SRB,
*        REGISTER 0 IS SET TO THE ADDRESS OF THE SRB, REGISTER 1
*        CONTAINS THE ADDRESS IN THE PARM FIELD OF THE SRB AND REGISTER
*        14 CONTAINS THE RETURN POINT TO THE DISPATCHER.  ON THE
*        DISPATCH OF THE WAIT TASK, ALL REGISTERS ARE SET TO ZERO.
*
*01*  ENTRY-POINT = IEAPDSRT
*
*02*     PURPOSE = RETURN POINT IN THE DISPATCHER FOR ALL SRB ROUTINES.
*        THE DISPATCHER RESETS ALL SRB MODE INDICATORS AND DOES THE JOB
*        STEP TIMING FOR THE ADDRESS SPACE UNDER WHICH THE SRB WAS
*        RUNNING.  ENTRY CONDITIONS ARE: ENABLED OR DISABLED, NO LOCKS,
*        SUPERVISOR MODE.
*
*02*     LINKAGE = THE DISPATCHER IS ENTERED VIA A BRANCH.  NO
*        PARAMETERS ARE PASSED INTO IT.  ALL SRB ROUTINES RETURN TO
*        THIS ENTRY POINT.
*
*02*     INPUT = THE DISPATCHER DOES NOT LOOK AT ANY INPUT REGISTERS ON
*        ENTRY.  DATA REQUIRED FOR IT'S PROCESSING IS OBTAINED FROM THE
*        SPECIAL EXITS INDICATORS IN THE LCCA, THE GLOBAL SERVICE
*        MANAGER QUEUE HEADER, THE GLOBAL SERVICE PRIORITY LIST, THE
*        LOCAL SERVICE MANAGER QUEUE HEADER, THE PSAANEW AND PSAAOLD
*        FIELDS, THE LOCAL SERVICE PRIORITY LISTS, THE CONDITION OF THE
*        LOCAL LOCK AND THE QUEUE OF TASKS IN AN ADDRESS SPACE.
*
*02*     OUTPUT = THE DISPATCHER RESTORES THE STATUS (REGISTERS AND
*        PSW) OF THE UNIT BEING DISPATCHED.
*
*02*     REGISTERS-SAVED = NONE
*
*02*     REGISTER-USAGE = REG 9 - BASE REGISTER , REGISTER 8 - CURRENT
*        ASCB ADDRESS, REGISTER 7 - LCCA ADDRESS.  ALL OTHER REGISTER
*        USAGE VARIES AT DIFFERENT POINTS WITHIN THE MODULE.
*
*02*     REGISTERS-RESTORED = ALL OF THE REGISTERS FOR A LOCAL
*        SUPERVISOR ROUTINE, A SUSPENDED SRB, OR A TASK ARE RESTORED ON
*        EXIT FROM THE DISPATCHER.  ON THE INITIAL DISPATCH OF AN SRB,
*        REGISTER 0 IS SET TO THE ADDRESS OF THE SRB, REGISTER 1
*        CONTAINS THE ADDRESS IN THE PARM FIELD OF THE SRB AND REGISTER
*        14 CONTAINS THE RETURN POINT TO THE DISPATCHER.  ON THE
*        DISPATCH OF THE WAIT TASK, ALL REGISTERS ARE SET TO ZERO.
*
*
*01*  EXIT-NORMAL = GLOBAL SRB DISPATCH
*
*02*     CONDITIONS = LOAD PSW TO THE SRB ROUTINE, ENABLED, SUPERVISOR
*        MODE, AND IN THE KEY SPECIFIED IN THE SRB.
*
*02*     OUTPUT = REGISTER 0 CONTAINS THE ADDRESS OF THE SRB, REGISTER
*        1 CONTAINS THE PARM FIELD FROM THE SRB, REGISTER 14 CONTAINS
*        THE RETURN ADDRESS TO THE DISPATCHER AND REGISTER 15 CONTAINS
*        THE SRB ENTRY POINT ADDRESS.
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-NORMAL = SUSPENDED SRB DISPATCH
*
*02*     CONDITIONS = LOAD PSW AND ALL REGISTERS TO RE-ESTABLISH THE
*        ENVIRONMENT OF THE SRB WHEN IT WAS SUSPENDED.
*
*02*     OUTPUT = PSW AND REGISTERS RETURNED TO THEIR STATUS AT
*        SUSPEND.
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-NORMAL = LOCAL SUPERVISOR DISPATCH
*
*02*     CONDITIONS = LOAD PSW AND ALL REGISTERS TO RE-ESTABLISH THE
*        ENVIRONMENT FOR THE LOCAL SUPERVISOR ROUTINE.  THE LOCAL LOCK
*        AND, IF IT WAS HELD, THE CMS LOCK IS ALSO RESTORED.
*
*02*     OUTPUT = THE ENVIRONMENT IS RESTABLISHED TO WHAT IT WAS WHEN
*        THE LOCAL SUPERVISOR ROUTINE WAS PREEMPTED.
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-NORMAL = TASK DISPATCH
*
*02*     CONDITIONS = LOAD PSW AND ALL REGISTERS TO RE-ESTABLISH THE
*        ENVIRONMENT OF THE INTERRUPTED TASK.
*
*02*     OUTPUT = ENVIRONMENT (REGISTERS AND PSW) RESTORED.
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-NORMAL = WAIT TASK DISPATCH
*
*02*     CONDITIONS = LOAD WAIT PSW AND ZERO ALL REGISTERS.
*
*02*     OUTPUT = ENABLED WAIT STATE PSW LOADED AND ALL REGISTERS SET
*        TO ZERO.
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-ERROR = NONE
*
*02*     RETURN-CODES = NONE
*
*01*  EXTERNAL-REFERENCES =
*        IEAGSMQ - GLOBAL SERVICE MANAGER QUEUE HEADER
*        IEALSMQ - LOCAL SERVICE MANAGER QUEUE HEADER
*        IEAGSPL - GLOBAL SERVICE PRIORITY LIST
*        IEAWTCB - WAIT TCB
*        IEAWPSW - WAIT PSW
*        IEAWASCB - WAIT ASCB
*        IEAMASCB - MASTER'S ASCB
*        IEACMSLK - CMS LOCK
*
*02*     ROUTINES =
*       IEAVESC1 - GLOBAL SCHEDULE
*              REASON - PLACE GLOBAL SRB'S ONTO THE GLOBAL SPL QUEUE
*              LINKAGE - BRANCH AND LINK R3,R4
*       IEAVESC2 - LOCAL SCHEDULE
*              REASON - PLACE LOCAL SRB'S ONTO THE LOCAL SPL QUEUES
*              LINKAGE - BRANCH AND LINK R3,R4
*       IEA0EF03 - STAGE THREE EXIT EFFECTOR
*              REASON - PLACE IRB'S ONTO THE RB QUEUE
*              LINKAGE BRANCH AND LINK VIA REGISTERS 10,11
*       IEAVRSPN - TIMER RECOVERY SPIN ROUTINE
*              REASON - TO SYNCHRONIZE THE CLOCKS DURING A RECOVERY
*              SEQUENCE.
*              LINKAGE - BRANCH ON REGISTER 15
*       IEAVEMS0 - MEMORY SWITCH
*              REASON - TO CAUSE A SWITCH TO THE MASTER'S ADDRESS SPACE
*              LINKAGE - BRANCH AND LINK ON REGISTERS 14,15
*       TRDISP - TASK TRACE ENTRY
*              REASON - TO TRACE TASK AND LOCAL SUPERVISOR ACTIVITY
*              LINKAGE - BRANCH AND LINK ON REGISTERS 11,10
*       TRSRB1 - INITIAL SRB TRACE ENTRY
*              REASON - TO TRACE INITIAL SRB DISPATCH ACTIVITY
*              LINKAGE - BRANCH AND LINK ON REGISTERS 11,10
*       TRSRB2 - SUSPENDED SRB TRACE ENTRY
*              REASON - TO TRACE ACTIVITY OF SUSPENDED SRBS
*              LINKAGE - BRANCH AND LINK ON REGISTERS 11,10
*       IEADISP1 - INITIAL SRB GTF ENTRY
*              REASON - TO ALLOW GTF TO TRACK INITIAL SRB ACTIVITY
*              LINKAGE - HOOK MACRO
*       IEADISP2 - SUSPENDED SRB GTF ENTRY
*              REASON - TO ALLOW GTF TO TRACK SUSPENDED SRB ACTIVITY
*              LINKAGE - HOOK MACRO
*       IEADISP3 - TCB/LOCAL SUPERVISOR GTF ENTRY
*              REASON - TO ALLOW GTF TO TRACK TASK ACTIVITY
*              LINKAGE - HOOK MACRO
*
*02*     DATA-AREAS = NONE
*
*02*     CONTROL-BLOCKS =
*              1. PSA - W/R
*              2. LCCA - W/R
*              3. PCCA - R
*              4. CVT - R
*              5. ASCB - W/R
*              6. ASXB - R
*              7. TCB - W/R
*              8. RB - R
*              9. TQE - W/R
*             10. SRB - R
*             11. SSRB - R/D
*             12. IHSA - W/R
*             13. IEAVBK - W/R
*             14. IHAFRRS - W/R
*             15. CSD - W/R
*             16. SPL - W/R
*             17. WSAVT - R
*
*01*  TABLES = WSACEDS0 - DISPATCHER'S REGISTER SAVE AREA.
*
*01*  MACROS =
*              1. HOOK - GTF INTERFACE
*              2. MODESET - RESET TO KEY ZERO ON RETURN FROM SRB
*                 ROUTINE
*              3. SETLOCK - OBTAIN AND RELEASE OF VARIOUS LOCKS
*              4. CALLRTM - RTM INTERFACE
*              5. SCHEDULE - SCHEDULE SRB TO LOCAL QUEUE
*              6. SETFRR - PURGE FRR STACK
*              7. FREECELL - FREE SUSPENDED SRB AND SAVE AREA
*              8. FREEMAIN - FREE SUSPENDED SRB AND SAVE AREA
*
*02*    SERIALIZATION =
*              1. GLOBAL DISPATCHER LOCK - SERIALIZE ON THE ASCB
*                 DISPATCHING QUEUE AND THE SPL QUEUES
*              2. LOCAL LOCK - SERIALIZE ON THE TCB DISPATCHING QUEUE
*              3. SALLOC LOCK - SERIALIZE FREEMAIN
*
*01*  CHANGE-ACTIVITY = SUPPORT CODES - Y02715,Y02751,Y02752
*
*01*  MESSAGES = NONE
*
*01*  ABEND-CODES =
*              1. 22F - ISSUED WHEN AN SRB IS FOUND ON THE SPL QUEUES
*                 WHICH HAS AFFINITY TO A CPU WHICH IS NOT CURRENTLY
*                 ONLINE.
*              2. 072 - ISSUED WHEN A TASK IS FOUND WHICH HAS SPECIFIED
*                 USE OF THE CPU INTERVAL TIMER AND THERE ARE CURRENTLY
*                 NO CPU TIMERS WORKING ON ANY CPUS.
*
**** END OF SPECIFICATIONS ***/
         TITLE 'IEAVEDS0 - CSECT - ENTRIES'
IEAVEDS0 CSECT
         SPACE 4
*/*IEAVEDS0: CHART DISPATCHER */
*/* HEADER
*/*
*/*
*/*
*/*                                        SECTION: 3.1.8.2
*/*         DISPATCHER
*/*                                      PAGE # */
         SPACE 4
         MODID BR=NO               MODULE IDENTIFICATION
         SPACE 4
*   BRANCH ENTRY POINTS TO THE DISPATCHER
         ENTRY IEA0DS
         ENTRY DSBASE
         ENTRY IEAPDS2
         ENTRY IEAPDS6
         ENTRY IEAPDS7
         ENTRY IEAPDSRT
         ENTRY IEAVDSTC                                        @Z40FPXJ
         SPACE 2
*   RANGE OF INSTRUCTINS FOR JOB STEP TIMING
         ENTRY IEAVEDS1
         ENTRY IEAVEDS2
         SPACE 2
*  WAIT PSW ALTERED BY NIP PROCESSING
         ENTRY DSWPSW
         SPACE 2
*   LPSW POINTS
         ENTRY LWAITPSW
         ENTRY LISRBPSW
         ENTRY LSSRBPSW
         ENTRY LLSPVPSW
         ENTRY LTASKPSW
         TITLE 'IEAVEDS0 - EQUATES'
*  REGISTER EQUATES
R0       EQU   0                   REGISTER 0
R1       EQU   1                   REGISTER 1
R2       EQU   2                   REGISTER 2
R3       EQU   3                   REGISTER 3
R4       EQU   4                   REGISTER 4
R5       EQU   5                   REGISTER 5
R6       EQU   6                   REGISTER 6
R7       EQU   7                   LCCA ADDRESS
R8       EQU   8                   ASCB ADDRESS
R9       EQU   9                   BASE REGISTER
RA       EQU   10                  REGISTER 10
RB       EQU   11                  * REGISTERS *
RC       EQU   12                  * USED BY   *
RD       EQU   13                  * LOCK      *
R13      EQU   13                   * REG 13                 @Z40FPXJ
RE       EQU   14                  * MANAGER   *
RF       EQU   15                  REGISTER 15
*  HEX EQUATES
DSX0     EQU   X'00'               HEX ZERO
DSXFF    EQU   X'FF'               HEX FF
*  LENGTH EQUATES
DSL0     EQU   0                   LENGTH 0
DSL1     EQU   1                   LENGTH 1
DSL2     EQU   2                   LENGTH 2
DSL3     EQU   3                   LENGTH 3
DSL4     EQU   4                   LENGTH 4
DSL6     EQU   6                   LENGTH 6
DSL8     EQU   8                   LENGTH 8
DSL60    EQU   60                  LENGTH 60
*  INCREMENT EQUATES
DSI0     EQU   0                   INCREMENT 0
DSI1     EQU   1                   INCREMENT 1
*  CONDITION CODE MASK EQUATES
DSCC1    EQU   1                   CONDITION CODE 3     - MASK 1
DSCC2    EQU   2                   CONDITION CODE 2     - MASK 2
DSCC3    EQU   3                   CONDITION CODE 2/3   - MASK 3
DSCC4    EQU   4                   CONDITION CODE 1     - MASK 4
DSCC6    EQU   6                   CONDITION CODE 1/2   - MASK 6
DSCC7    EQU   7                   CONDITION CODE 1/2/3 - MASK 7
DSCC8    EQU   8                   CONDITION CODE 0     - MASK 8
DSCC11   EQU   11                  CONDITION CODE 0/2/3 - MASK 11
DSCC12   EQU   12                  CONDITION CODE 0/1   - MASK 12
*  MISCELLANEOUS EQUATES
DSO3     EQU   3                       OFFSET 3
DSLLHI   EQU   1                       LOCAL LOCK HELD INDICATOR
DSCMSHI  EQU   2                       CMS LOCK HELD INDICATOR
GSPLSIZ2 EQU   8                   NO. BYTES COMPARED FOR SPL TEST
LSPLSIZ2 EQU   8                   NO. BYTES COMPARED FOR SPL TEST
DSPSWMSK EQU   B'11111100'         PSW MASK WITH I/O AND EXT DISABLED.
DSPSWIOE EQU   B'00000011'         PSW MASK TO ENABLE I/O AND EXT.
DSLSAV   EQU   64                  DISPATCHER'S SAVE AREA LENGTH.
DSRSTKL  EQU   340                 *
DSRSTKM1 EQU   256                 *     RECOVERY STACK MOVE MASKS.
DSRSTKM2 EQU   DSRSTKL-DSRSTKM1    *
*  NOTE THAT DSRSTKL IS PLACED HERE AS AN ABSOLUTE VALUE AND
*        SHOULD BE REPLACED WHEN A MACRO EQUATE BECOMES AVAILABLE.
DSTRACEM EQU   X'FA'               TRACE ACTIVE MASK.
         TITLE 'IEAVEDS0 - ENTRY IEA0DS'
***********************************************************************
*                                                                     *
*        IEA0DS - MAIN DISPATCHER ENTRY POINT                         *
*                                                                     *
***********************************************************************
         SPACE 2
*/*IEA0DS: E MAIN DISPATCHER ENTRY POINT */
         SPACE 2
IEA0DS   DC    0H'0'               MAIN DISPATCHER ENTRY POINT
         SPACE
*/* P ESTABLISH ADDRESSABILITY TO THE FLC */
         SPACE
         USING FLC,R0              FLC-PSA ADDRESSABILITY
LOADPSA  DC    0H'0'               ***** FOR TSO TEST *****
         SPACE 2
*/* P SET SUPER RECOVERY STACK ADDRESS */
         SPACE 2
         L     R1,PSASSTK          SUPER STACK ADDRESS.
         ST    R1,PSACSTK          SET CURRENT TO SUPER STACK ADDRESS.
         SPACE 4
***********************************************************************
*                                                                     *
*        IEAPDS7 - ENTERED FROM THE I/O AND SVC FLIH'S.   THIS IS THE *
*              NORMAL ENTRY POINT FROM THESE FLIH'S.  THE SUPER FRR   *
*              STACK HAS BEEN ESTABLISHED AS CURRENT PRIOR TO ENTRY   *
*              TO THE DISPATCHER.                                     *
*                                                                     *
***********************************************************************
         SPACE 2
*/*IEAPDS7: E ENTRY FROM SVC AND I/O FLIH'S */
         SPACE 2
IEAPDS7  DC    0H'0'               SVC AND I/O FLIH ENTRY POINT.
         SPACE 2
*/* P SET DISPATCHER INDICATOR */
         SPACE 2
         OI    PSASUP1,PSADISP     SET DISPATCHER INDICATOR
         SPACE 2
*/* P ESTABLISH BASE - REGISTER 9 */
         SPACE 2
         BALR  R9,R0               BASE REGISTER - 9
DSBASE   DC    0H'0'
         USING DSBASE,R9           ADDRESSABILITY
         SPACE 2
*/* P ESTABLISH ADDRESSABILITY TO THE LCCA AND ASCB */
         SPACE 2
         L     R8,PSAAOLD          ASCB
         USING ASCB,R8                ADDRESSING
         SPACE
         L     R7,PSALCCAV         LCCA
         USING LCCA,R7                ADDRESSABILITY
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST FOR SPECIAL EXITS                                       *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS01: D (YES,DS011,NO,) TEST FOR SPECIAL EXITS */
         SPACE 2
DS01     DC    0H'0'               ENTER FOR SPECIAL EXITS TEST
         CLI   LCCADSF1,DSX0       TEST FOR SPECIAL EXITS.
         BNE   DS011               YES. GO TO TEST SPECIFIC EXIT.
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST FOR SRB'S ON THE GSMQ                                   *
*                                                                     *
***********************************************************************
         SPACE 2
*/* D (YES,DS021,NO,) TEST FOR SRB'S ON THE GSMQ */
         SPACE 2
DST001   DC    0H'0'               *** TEST LABEL ***
         L     R6,DSGSMQ           ADDRESS OF START OF GSMQ.
         L     R5,0(R6)            FIRST ENTRY.
         LTR   R5,R5               TEST FOR SRB'S.
         BNZ   DS021               MAY BE SRB'S. GO TO COMPARE AND SWAP
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST FOR SRB'S ON THE GSPL                                   *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS03: D (YES,DS031,NO,) TEST FOR SRB'S ON THE GSPL */
         SPACE 2
DS03     DC    0H'0'
         L     R4,DSGSPL           ADDRESS OF GSPL
         L     R0,DSL4(R4)         ANY NON-Q SRBS?             @YM03564
         O     R0,DSL8(R4)         OR SYSTEM SRBS?             @YM03564
         BNZ   DS031               SRBS. GO CHECK FURTHER.     @YM03564
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST FOR SRB'S ON THE LOCAL SMQ                              *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS04: D (YES,DS041,NO,) TEST FOR SRB'S ON THE LSMQ */
         SPACE 2
DS04     DC    0H'0'
         L     R6,DSLSMQ           ADDRESS OF START OF LSMQ.
         L     R5,0(R6)            FIRST ENTRY.
         LTR   R5,R5               TEST FOR SRB'S.
         BNZ   DS041               MAY BE SRB'S. GO TO COMPARE AND SWAP
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST FOR ADDRESS SPACE SWITCH.                               *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS05: D (YES,DS051,NO,) TEST FOR ADDRESS SPACE SWITCH */
         SPACE 2
DS05     DC    0H'0'
         C     R8,PSAANEW          DOES CURRENT MATCH THE ASCB IN "NEW"
         BNE   DS051               NO. GO TO SWITCH ADDRESS SPACES.
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST FOR SRB'S ON THE LSPL                                   *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS06: D (YES,DS061,NO,) TEST FOR SRB'S ON THE LSPL */
         SPACE 2
DS06     DC    0H'0'
         L     R4,ASCBSPL          ADDRESS OF LOCAL SPL
         L     R0,DSL4(R4)         ANY NON-Q SRBS?             @YM03564
         O     R0,DSL8(R4)         OR SYSTEM SRBS?             @YM03564
         BNZ   DS061               NOT ZERO. GO TO CHECK FURTHER.
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST FOR LOCAL SUPERVISOR                                    *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS07: D (YES,DS08,NO,) TEST FOR LOCAL LOCK AVAILABLE */
         SPACE 2
DS07     DC    0H'0'
         L     R1,ASCBLOCK         CURRENT LOCKWORD VALUE      @YM03564
         LH    R3,PSACPULA         LOGICAL CPU ADDRESS.
         LTR   R1,R1               IS LOCK AVAILABLE?          @YM03564
         BZ    DS08                LOCK IS AVAILABLE, OBTAIN IT
         SPACE 2                                               @YM03564
*/* D (YES,DS08A,NO,) TEST FOR LOCAL SUPERVISOR */
         SPACE 2                                               @YM03564
         BM    DS08A               INTERRUPT ID, GO OBTAIN IT  @YM03564
         SPACE 2                                               @YM03564
*/* D (YES,,NO,DS08B) WAS LOCK OWNED BY THIS CPU? */           @ZA24768
         SPACE 2                                               @YM03564
         CR    R1,R3               WAS LOCAL LOCK OWNED BY THIS CPU?
         BNE   DS08B               NO, LOCK IS NOT AVAILABLE.  @ZA24768
         SPACE 2                                               @YM03564
*/* D (NO,DS081,YES,) RE-DISP AFTER I/O OR EXT INTERRUPT? */   @ZA24768
         SPACE 2                                               @ZA24768
         L     R1,LCCAITOD         GET INTERRUPT TOD VALUE.    @ZA24768
         LTR   R1,R1               IF ZERO, NOT RE-DISP AFTER  @ZA24768
         BZ    DS081                    I/O OR EXT INTERRUPT.  @ZA24768
         SPACE 2                                               @ZA24768
*/* S DSJST: ADJUST JST TO EXCLUDE INTERRUPT PROCESSING */     @ZA24768
         SPACE 2                                               @ZA24768
         BAL   RE,DSJST            ADJUST JOB STEP TIMING.     @ZA24768
         SPACE 2                                               @ZA24768
*/* P (,DS081) UPDATE DTOD VALUE FOR RE-DISPATCH */            @ZA24768
         SPACE 2                                               @ZA24768
         STCK  LCCADTOD            SET DTOD FOR RE-DISPATCH.   @ZA24768
         B     DS081               GO TO LOCAL SUPV DISPATCHER.@ZA24768
         SPACE 2                                               @ZA24768
*/*DS08: D (YES,DS08X,NO,) ANY READY TCBS TO DISPATCH? */      @ZA16871
         SPACE 2                                               @YM03564
DS08     DC    0H'0'                                           @YM03564
         L     R4,ASCBTCBS         GET READY TCB COUNT         @YM07654
         C     R4,ASCBCPUS         IS IT GREATER THAN CPUS     @YM07654
         BNL   DS08X               YES. FOUND WORK FOR THIS CPU@ZA16871
         SPACE 2                                               @YM03564
*/* D (YES,,NO,DS08B) ANY ASYNCH EXITS TO DISPATCH? */         @ZA16871
         SPACE 2                                               @ZA16871
         TM    ASCBFLG1,ASCBS3S    TEST FOR ASYNCH EXITS       @ZA16871
         BNO   DS08B               NONE. NO WORK IN THIS ASCB  @ZA16871
         SPACE 2                                               @ZA16871
*/*DS08X: D (YES,DS09,NO,DS08B) OBTAIN LOCAL LOCK SUCCESSFUL? */
         SPACE 2                                               @YM03564
DS08X    DC    0H'0'                                           @YM07654
         CS    R1,R3,ASCBLOCK      OBTAIN FREE LOCK WITH CPUID @YM03564
         BC    DSCC7,DS08B         LOCK WAS NOT AVAILABLE      @YM03564
         OI    PSAHLHI+DSL3,DSLLHI INDICATE LOCAL LOCK NOW OWNED
         B     DS09                GO TO TASK DISPATCHER       @YM03564
         SPACE 2                                               @YM03564
*/*DS08A: D (YES,DS071,NO,) INTERRUPT ID STILL IN LOCK? */
         SPACE 2                                               @YM03564
DS08A    DC    0H'0'                                           @YM03564
         CS    R1,R3,ASCBLOCK      TEST FOR ID.
         BC    DSCC8,DS071         YES.ID WAS IN LOCK. CPU ADDRESS NOW
*                                       IS. GO TO RESTORE LOCAL SUPVR.
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST RECURSION THROUGH WAIT TASK                             *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS08B: D (NO,DS08C,YES,) WAIT TASK ACTIVE?*/
         SPACE 2
DS08B    DC    0H'0'                                           @YM03564
         L     R3,PSATOLD          TEST CURRENT TCB PTR TO SEE IF IT
         C     R3,DSWTCB                IS THE WAIT TCB.
         BNE   DS08C               NO. GO TO GET NEXT ADDRESS SPACE.
         SPACE 2                                               @YM03564
*/*DS08B2: D (NO,DS05C,YES,)  ANY WORK ON RECURSIVE SEARCH?*/
         SPACE 2                                               @YM03564
DS08B2   DC    0H'0'                                           @ZA09433
         SPACE 1
DST0035  DC    0H'0'               *** TEST LABEL ***
         TM    LCCADSF2,LCCADSRW       RECUSIVE SEARCH OF READY QUEUE
*                                      WAS ANY WORK FOUND.
         BZ    DS05C               NO. RECURSION. GO TO DISPATCH WAIT
*                                       TASK.
         NI    LCCADSF2,DSXFF-LCCADSRW TURN OFF READY WORK IND.
         BAL   RF,DSSAVE           SAVE STATUS                 @YM03564
         SPACE 2
*/*DSLOCKW: S SETLOCK:OBTAIN THE GLOBAL DISPATCHER LOCK */
         SPACE 2
DSLOCKW  DC    0H'0'
*        SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=('ASCB QUEUE/GSPL*
               /LSPL/PSAANEW',IEAVEDS0,(DSLOCK8,DSLOCK11,DSLOCK14,DSLOC*
               K16,DSLOCK17,DSLOCK18,DSLOCK19))
         L     RD,AGSLDISP         OBTAIN DISPATCHER SPECIAL ENTRY PT
         BALR  RE,RD               LOCK MANAGER'S SPECIAL DISP ENTRY
         ST    RD,PSAANEW          ZERO ANEW TO FORCE TOP OF QUEUE
         B     DSRT01              RE-SEARCH QUEUE FOR READY WORK
         SPACE 2                                               @YM03564
*/*DS08C: S DSSAVE:SAVE PREVIOUS STATUS */
         SPACE 2                                               @YM03564
DS08C    DC    0H'0'                                           @YM03564
         BAL   RF,DSSAVE           SAVE PREVIOUS TASK'S STATUS @YM03564
         SPACE 2                                               @YM03564
*/*S SETLOCK:OBTAIN THE DISPATCHER LOCK */
         SPACE 2                                               @YM03564
         L     RD,AGSLDISP         LOCK MANAGER'S SPECIAL DISP ENTRY PT
         BALR  RE,RD               UNCOND OBTAIN DISPATCHER LOCK
         L     R6,FLCCVT           CVT POINTER FOR MEMORY DISP @YM03564
         L     R5,CVTCSD-CVT(R6)   CSD ADDR FOR MEMORY DISP    @YM03564
         L     R8,ASCBFWDP         NEXT ASCB TO BE PROCESSED   @YM03564
         SPACE 2                                               @YM03564
*/* P (,DS054) SET UP FOR MEMORY DISPATCHER */
         SPACE 2                                               @YM03564
         B     DS054                                           @YM03564
         TITLE 'IEAVEDS0 - ENTRY IEAPDS2'                      @YM03564
***********************************************************************
*                                                                     *
*        IEAPDS2 - ENTERED FROM THE LOCK MANAGER WHEN SUSPENDING      *
*              A CALLER WHICH HAS REQUESTED A BOUNCE LOCK AND CANNOT  *
*              GET IT.  THE GLOBAL DISPATCHER LOCK IS HELD ON THIS    *
*              ENTRY.                                                 *
*                                                                     *
***********************************************************************
         SPACE 2
*/*IEAPDS2: E ENTRY FROM LOCK MANAGER */
         SPACE 2
IEAPDS2  DC    0H'0'
         SPACE 2
*/* P SET SUPER FRR STACK */
         SPACE 2
         L     R1,PSASSTK          SUPER STACK ADDRESS.
         ST    R1,PSACSTK          SET TO CURRENT.
         SPACE 2
*/* P SET THE DISPATCHER INDICATOR */
         SPACE 2
         OI    PSASUP1,PSADISP     DISPATCHER INDICATOR
         SPACE 2
*/* P ESTABLISH MODULE ADDRESSABILITY */
         SPACE 2
         BALR  R9,R0               ESTABLISH LOCAL ADDRESSABILITY
         USING *,R9
         L     R9,DSBASEAD         DISPATCHER BASE ENTRY
         USING DSBASE,R9           ESTABLISH DISPATCHER ADDRESSABILITY.
         SPACE 2
*/* P ESTABLISH ASCB AND LCCA ADDRESSABILITY */
         SPACE 2
         L     R8,PSAAOLD          CURRENT ASCB ADDRESSABILITY
         L     R7,PSALCCAV         LCCA ADDRESSABILITY
         SPACE
DST004   DC    0H'0'               *** TEST LABEL ***
         B     DSRT01              GO TO SRB RETURN MAINLINE.
         TITLE 'IEAVEDS0 - ENTRY IEAPDS6'
***********************************************************************
*                                                                     *
*        IEAPDS6 - ENTERED FROM END-OF-TASK (EOT).  NO LOCKS ARE HELD *
*              ON THIS ENTRY. THE DISPATCHER CLEARS THE PSATNEW AND   *
*              PSATOLD FIELDS, RESETS THE CPU INTERVAL TIMER TO A HIGH*
*              VALUE, DECREMENTS THE COUNT OF THE NUMBER OF CPU'S IN  *
*              THE ADDRESS SPACE AND CALCULATES THE JOB STEP TIME ON  *
*              THIS ENTRY.                                            *
*                                                                     *
***********************************************************************
         SPACE 2
*/*IEAPDS6: E ENTRY FROM EOT */
         SPACE 2
IEAPDS6  DC    0H'0'
         SPACE 2
*/* P SET SUPER RECOVERY STACK ADDRESS */
         SPACE 2
         L     R1,PSASSTK          SUPER STACK ADDRESS.
         ST    R1,PSACSTK          SET CURRENT TO SUPER STACK ADDRESS.
         SPACE 2
*/* P SET DISPATCHER INDICATOR */
         SPACE 2
         OI    PSASUP1,PSADISP     SET DISPATCHER INDICATOR
         SPACE 2
*/* P ESTABLISH MODULE ADDRESSABILITY */
         SPACE 2
         BALR  R9,R0               ESTABLISH LOCAL ADDRESSABILITY
         USING *,R9
         L     R9,DSBASEAD         DISPATCHER BASE ENTRY
         USING DSBASE,R9           ESTABLISH DISPATCHER ADDRESSABILITY
         SPACE 2
*/* P ESTABLISH ASCB AND LCCA ADDRESSABILITY */
         SPACE 2
         L     R8,PSAAOLD          CURRENT ASCB ADDRESSABILITY
         L     R7,PSALCCAV         LCCA ADDRESSABILITY
         SPACE 2
*/* P CLEAR THE PSATNEW/PSATOLD FIELDS */
         SPACE 2
         SR    R1,R1
         ST    R1,PSATNEW          CLEAR THE PSATNEW AND PSATOLD FIELDS
         ST    R1,PSATOLD          SO STATUS WILL NOT BE STORED.
         SPACE 2
*/* P STORE A HIGH VALUE IN THE CPU INTERVAL TIMER */
         SPACE 2
         SPT   DSHITIME            SET HIGH VALUE INTO CPU INTVL TIMER
*                                  SO TIMER WONT POP FOR NEXT GUY.
         SPACE
DS601    DC    0H'0'
         SPACE 2
*/*DS601: P DECREMENT COUNT OF NUMBER OF CPU'S DISPATCHED IN ADDRESS
*/*SPACE*/
         SPACE 2
         L     R2,ASCBCPUS         *
         LR    R3,R2               *   DECREMENT COUNT OF NUMBER OF
         BCTR  R2,R0               *       CPUS DISPATCHED IN
DST0075  DC    0H'0'               *** TEST LABEL ***
         CS    R3,R2,ASCBCPUS      *       THE ADDRESS SPACE.
         BC    DSCC4,DS601         *
         SPACE
DST008   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* S (,DS01) DSJST:CALCULATE JOB STEP TIME */
         SPACE 2
         BAL   RE,DSJST            GO TO CALCULATE JOB STEP TIME
*   DSJST USES REGISTERS 0,1,2,3 AND 14.
         SPACE
DST009   DC    0H'0'               *** TEST LABEL ***
         B     DS01                RETURN TO MAINLINE.
         TITLE 'IEAVEDS0 - ENTRY IEAPDSRT'
***********************************************************************
*                                                                     *
*        IEAPDSRT - ENTERED ON THE RETURN FROM AN SRB ROUTINE.  THE   *
*              RETURN MUST BE IN SUPERVISOR MODE BUT MAY BE IN A NON  *
*              ZERO KEY.  THE DISPATCHER ON THIS ENTRY GETS THE GLOBAL*
*              DISPATCHER LOCK AND PERFORMS A PARALLEL SERIES OF TESTS*
*              AS AT ENTRY POINT IEA0DS.  THE TESTS AT IEA0DS ARE DONE*
*              WITHOUT THE GLOBAL DISPATCHER LOCK.                    *
*                                                                     *
***********************************************************************
         SPACE 2
*/*IEAPDSRT: E ENTRY FOR SRB RETURN */
         SPACE 2
IEAPDSRT DC    0H'0'
         SPACE 2
*/* S MODESET:GET INTO KEY ZERO */
         SPACE 2
         MODESET  EXTKEY=SUPR      GET INTO KEY ZERO
         SPACE 2
*/*DSLOCK6: S SETLOCK:OBTAIN THE GLOBAL DISPATCHER LOCK */
         SPACE 2
DSLOCK6  DC    0H'0'
         SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=('ASCB QUEUE/GSPL*
               /LSPL/PSAANEW',IEAVEDS0,(DSLOCK8,DSLOCK11,DSLOCK14,DSLOC*
               K16,DSLOCK17,DSLOCK18,DSLOCK19))
DST010   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P SET SUPER RECOVERY STACK ADDRESS */
         SPACE 2
         L     R1,PSASSTK          SUPER STACK ADDRESS.
         ST    R1,PSACSTK          SET CURRENT TO SUPER STACK ADDRESS.
         SPACE 2
*/* P SET THE DISPATCHER INDICATOR */
         SPACE 2
         OI    PSASUP1,PSADISP     SET DISPATCHER INDICATOR
         SPACE 2
*/* P ESTABLISH LOCAL ADDRESSABILITY */
         SPACE 2
         BALR  R9,R0               LOCAL ADDRESSABILITY
         USING *,R9
         SPACE
DST0095  DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P ESTABLISH MODULE ADDRESSABILITY */
         SPACE 2
         L     R9,DSBASEAD         DISPATCHER BASE ENTRY
         USING DSBASE,R9           ESTABLISH DISPATCHER ADDRESSABILITY
         SPACE 2
*/* P ESTABLISH LCCA AND ASCB ADDRESSABILITY */
         SPACE 2
         L     R8,PSAAOLD          ASCB ADDRESSABILITY
         L     R7,PSALCCAV         LCCA ADDRESSABILITY
         SPACE
DST0105  DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* S DSJST:CALCULATE JOB STEP TIME */
         SPACE 2
         BAL   RE,DSJST            GO TO CALCULATE JOB STEP TIME
*   DSJST USES REGISTERS 0,1,2,3 AND 14.
         SPACE 2
*/* P RESET THE SRB MODE BITS */
         SPACE 2
         NI    LCCADSF2,DSXFF-LCCASRBM-LCCAGSRB   RESET SRB BITS
         SPACE 2
*/* P DECREMENT COUNT OF NUMBER OF SRB'S IN THE ADDRESS SPACE */
         SPACE 2
DST011   DC    0H'0'               *** TEST LABEL ***
         LH    R4,ASCBSRBS         *  DECREMENT COUNT
         BCTR  R4,DSI0             *    OF THE NUMBER OF SRB'S
         STH   R4,ASCBSRBS         *    DISPATCHED IN THE ADDRESS SPACE
         SPACE 2
*/* D (NO,DSRT01,YES,) ARE TCB'S STOPPED? */
         SPACE 2
         TM    ASCBFLG1,ASCBSTND   ARE TCB'S STOPPED BECAUSE A STATUS
*                                       STOP SRB'S IS IN PROCESS?
         BZ    DSRT01               NO. CONTINUE.
         SPACE 2
*/* D (YES,DSRT005,NO,) IS COUNT OF SRB'S EQUAL ZERO */
         SPACE 2
*   ENTER FOR TCB'S STOPPED BECAUSE OF STATUS STOP SRB'S
DST012   DC    0H'0'               *** TEST LABEL ***
         LTR   R4,R4               IS COUNT OF SRB'S EQUAL ZERO
         BZ    DSRT005             YES. GO TO SET TCB'S DISPATCHABLE.
DST013   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* D (YES,DSRT01,NO,) ARE THERE MORE LOCAL SRB'S? */
         SPACE 2
         L     R3,ASCBSPL          LOCAL SPL ADDRESS.
         L     R0,DSL4(R3)         ANY NON-Q SRBS?             @YM03564
         O     R0,DSL8(R3)         OR SYSTEM SRBS?             @YM03564
         BNZ   DSRT01              YES. GO TO DISPATCHING TESTS.
         SPACE 2
*/* D (YES,DSRT01,NO,) IS ADDRESS SPACE SWITCH SET UP? */
         SPACE 2
DST014   DC    0H'0'               *** TEST LABEL ***
         C     R8,PSAANEW          TEST FOR ADDRESS SPACE SWITCH SET UP
         BNE   DSRT01              YES. GO TO DISPATCHING TESTS.
DST015   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,DSRT01) STORE ZERO INTO "PSAANEW" - DISP WILL SCAN FROM TOP OF
*/*QUEUE */
         SPACE 2
         SR    R3,R3               NO SWITCH SET UP.  FORCE DISP TO
         ST    R3,PSAANEW               SCAN FROM TOP OF QUEUE.
         B     DSRT01              GO TO DISP TESTS
         SPACE 2
*/*DSRT005: P TURN OFF TCB'S NON-DISPATCH. BIT */
         SPACE 2
DSRT005  DC    0H'0'               ENTER TO SET TCB'S DISPATCHABLE.
         NI    ASCBFLG1,DSXFF-ASCBSTND  TURN OFF TCB'S NON-DISPATCHABLE
         SPACE 2
*/* D (YES,DSRT01,NO,) SET UP TO CONTINUE IN THE ADDRESS SPACE */
         SPACE 2
         C     R8,PSAANEW          ARE WE SET UP TO CONTINUE IN THIS
*                                       ADDRESS SPACE?
         BE    DSRT01              YES. GO TO DISPATCHABLE TESTS
DST016   DC    0H'0'               *** TEST LABEL ***
         LR    R1,R8               ASCB ADDRESS.
         L     RF,DSMS0            MEMORY SWITCH ADDRESS
         SPACE 2
*/* S IEAVEMS0:SWITCH TO THIS ADDRESS SPACE */
         SPACE 2
DSTMEMSW DC    0H'0'               *** TEST LABEL ***
         BALR  RE,RF               GO TO MEMORY SWITCH
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST FOR SPECIAL EXITS                                       *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DSRT01: D (NO,DSRT015,YES,) TEST FOR SPECIAL EXITS */
         SPACE 2
DSRT01   DC    0H'0'
         CLI   LCCADSF1,DSX0       TEST FOR SPECIAL EXITS
         BE    DSRT015             NO. CONTINUE
         SPACE 2
*/*DSLOCK19: S (,DS012) SETLOCK:RELEASE GLOBAL DISPATCHER LOCK */
         SPACE 2
DSLOCK19 DC    0H'0'
*        SETLOCK RELEASE,TYPE=DISP,RELATED=('ASCB QUEUE/GSPL/LSPL/PSAAN*
               EW',IEAVEDS0,(DSLOCK5,DSLOCK6,DSLOCK7,DSLOCK9,DSLOCK10,D*
               SLOCK12,DSLOCK13,DSLOCK22,DSLOCK3))
         L     RB,DSDISPLK         OBTAIN DISP LOCK ADDR       @YM03564
         SLR   RD,RD               ZERO A REGISTER             @YM03564
         ST    RD,DSL0(RB)         FREE LOCK VIA STORE ZEROS   @YM03564
         NI    PSAHLHI+DSL2,X'EF'  INDICATE DISPATCHER LOCK NOT HELD
DST017   DC    0H'0'               *** TEST LABEL ***
         B     DS012               GO TO TEST SPECIFIC EXIT.
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST FOR SRB'S ON THE GSMQ                                   *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DSRT015: D (NONE,DSRT017,YES,DS021A) TEST FOR SRB'S ON THE GSMQ */
         SPACE 2
DSRT015  DC    0H'0'
         L     R6,DSGSMQ           ADDRESS OF START OF GSMQ
         L     R5,0(R6)            FIRST ENTRY
         LTR   R5,R5               TEST FOR SRB'S
         BNZ   DS021A              SRB'S. GO TO DEQUEUE.
*   NO SRB'S ON GSMQ.  FALL THROUGH TO TEST FOR SRB'S ON GSPL.
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST FOR SRB'S ON THE GSPL                                   *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DSRT017: D (YES,DS032,NO,) TEST FOR SRB'S ON THE GSPL */
         SPACE 2
DSRT017  DC    0H'0'
         L     R4,DSGSPL           ADDRESS OF GSPL
         L     R0,DSL4(R4)         ANY NON-Q SRBS?             @YM03564
         O     R0,DSL8(R4)         OR SYSTEM SRBS?             @YM03564
         BNZ   DS032               GO TO DEQUEUE AN SRB UNDER THE GDL
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST FOR SRB'S ON THE LOCAL SMQ                              *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DSRT0173: D (NONE,DSRT0177,YES,DS0411) TEST FOR SRB'S ON THE LSMQ */
         SPACE 2
DSRT0173 DC    0H'0'
         L     R6,DSLSMQ           ADDRESS OF START OF LSMQ
         L     R5,0(R6)            FIRST ENTRY
         LTR   R5,R5               TEST FOR SRB'S
         BNZ   DS0411              SRB'S. GO TO DEQUEUE.
*   NO SRB'S ON LSMQ.  FALL THROUGH TO TEST ADDRESS SPACE SWITCH.
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST FOR ADDRESS SPACE SWITCH.                               *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DSRT0177: D (YES,DS052,NO,) TEST FOR ADDRESS SPACE SWITCH INDICATED
*/**/
         SPACE 2
DSRT0177 DC    0H'0'
         C     R8,PSAANEW          DOES OLD ASCB EQUAL NEW ASCB
         BNE   DS052               NO. GO TO MEMORY DISPATCHER
         SPACE 2
***********************************************************************
*                                                                     *
*  TEST FOR SRB'S ON THE LSPL                                         *
*                                                                     *
***********************************************************************
         SPACE 2
*/* D (YES,DS062,NO,) TEST FOR SRB'S ON THE LSPL */
         SPACE 2
DST022   DC    0H'0'               *** TEST LABEL ***
         L     R4,ASCBSPL
         L     R0,DSL4(R4)         ANY NON-Q SRBS?             @YM03564
         O     R0,DSL8(R4)         OR SYSTEM SRBS?             @YM03564
         BNZ   DS062               NOT ZERO. GO TO DEQUEUE SRB'S
         SPACE 2                                               @YM03564
*/* D (YES,DSLOCK8,NO,) ANY READY TCB'S IN ASCB? */            @ZA16871
         SPACE 2                                               @YM03564
         L     RD,ASCBTCBS         GET NUMBER OF TCBS          @YM03564
         C     RD,ASCBCPUS         ANY READY WORK IN MEMORY    @YM03564
         BH    DSLOCK8             YES. GO TRY TO DISPATCH TCB @ZA16871
         SPACE 2
*/* D (YES,,NO,DS052) ANY ASYNCH EXITS TO DISPATCH? */         @ZA16871
         SPACE 2                                               @ZA16871
         TM    ASCBFLG1,ASCBS3S    TEST FOR ASYNCH EXITS       @ZA16871
         BZ    DS052               NONE. NO WORK IN THIS ASCB  @ZA16871
         SPACE 2                                               @ZA16871
*/*DSLOCK8: S SETLOCK: RELEASE THE GLOBAL DISPATCHER LOCK */   @ZA16871
         SPACE 2
DSLOCK8  DC    0H'0'
*        SETLOCK RELEASE,TYPE=DISP,RELATED=('ASCB QUEUE/GSPL/LSPL/PSAAN*
               EW',IEAVEDS0,(DSLOCK5,DSLOCK6,DSLOCK9,DSLOCK10,DSLOCK12)*
               )
         L     RB,DSDISPLK         OBTAIN DISP LOCK ADDR       @YM03564
         SLR   RD,RD               ZERO A REGISTER             @YM03564
         ST    RD,DSL0(RB)         FREE LOCK VIA STORE ZEROS   @YM03564
         NI    PSAHLHI+DSL2,X'EF'  INDICATE DISPATCHER LOCK NOT HELD
         SPACE 2                                               @ZA16871
*/* D (YES,DSRT02,NO,) TEST FOR LOCAL LOCK AVAILABLE */        @ZA16871
         SPACE 2
DST023   DC    0H'0'               *** TEST LABEL ***          @ZA16871
         L     R1,ASCBLOCK         CURRENT LOCKWORD VALUE      @ZA16871
         LH    R3,PSACPULA         LOGICAL CPU ADDRESS.        @ZA16871
         LTR   R1,R1               IS LOCK AVAILABLE?          @ZA16871
         BZ    DSRT02              LOCK IS AVAILABLE, OBTAIN IT@ZA16871
         SPACE 2                                               @ZA16871
*/* D (YES,DSRT025,NO,) TEST FOR LOCAL SUPERVISOR */           @ZA16871
         SPACE 2                                               @ZA16871
         BM    DSRT025             INTERRUPT ID, GO OBTAIN IT  @ZA16871
         SPACE 2                                               @ZA16871
*/* D (YES,DS081,NO,DS08B) WAS LOCAL LOCK HELD BY THIS CPU? */ @ZA16871
         SPACE 2                                               @ZA16871
         CR    R1,R3               LOCAL LOCK HELD BY THIS CPU?@ZA16871
         BE    DS081               YES. GO DISPATCH LOCAL      @ZA16871
*                                    SUPERVISOR ROUTINE.       @ZA16871
         B     DS08B               LOCK IS NOT AVAILABLE. GO   @ZA16871
*                                    TEST WAIT TASK RECURSION. @ZA16871
         SPACE 2                                               @ZA16871
*/*DSRT02: D (YES,DS09,NO,DS08B) OBTAIN LCL LOCK SUCCESSFUL? */@ZA16871
         SPACE 2                                               @ZA16871
DSRT02   DC    0H'0'                                           @ZA16871
         CS    R1,R3,ASCBLOCK      OBTAIN FREE LOCK WITH CPUID @ZA16871
         BC    DSCC7,DS08B         LOCK WAS NOT AVAILABLE. GO  @ZA16871
*                                    TEST WAIT TASK RECURSION. @ZA16871
         OI    PSAHLHI+DSL3,DSLLHI INDICATE LCL LOCK NOW OWNED @ZA16871
         B     DS09                GO TO TASK DISPATCHER       @ZA16871
         SPACE 2                                               @ZA16871
*/*DSRT025: D (YES,DS071,NO,DS08B) INTRUPT ID STILL IN LOCK? */@ZA16871
         SPACE 2                                               @ZA16871
DSRT025  DC    0H'0'                                           @ZA16871
         CS    R1,R3,ASCBLOCK      COMPARE ID : SWAP IN CPULA  @ZA16871
         BC    DSCC8,DS071         SUCCESS. GO RESTROR LOCAL   @ZA16871
*                                      SUPERVISOR.             @ZA16871
         B     DS08B               GO TEST WAIT TASK RECURSION @ZA16871
         TITLE 'IEAVEDS0 - SPECIAL EXITS'
***********************************************************************
*                                                                     *
*        THIS SECTION TESTS FOR SPECIAL EXITS.                        *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS011: S DSSAVE:SAVE STATUS OF PREVIOUS TASK */
         SPACE 2
DS011    DC    0H'0'
         BAL   RF,DSSAVE           SAVE STATUS OF PREVIOUS TASK.
*   DSSAVE USES REGISTERS 0,1,2,3,14 AND 15.
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST FOR ACR                                                 *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS012: D (NO,DS013,YES,DSTCLRTM) TEST FOR ACR */
         SPACE 2
DS012    DC    0H'0'
         TM    LCCADSF1,LCCAACR    TEST FOR ACR
         BZ    DS013               NO. GO TO TRY NEXT SPECIAL EXIT
         SPACE 2
*/*DSTCLRTM: R CALLRTM - EXIT TO ACR */
         SPACE 2
DSTCLRTM DC    0H'0'
         NI    PSASUP1,DSXFF-PSADISP    RESET DISPATCHER INDICATOR.
         CALLRTM   TYPE=ACRDISP    GO TO ACR PROCESSOR.
*  NOTE - ACR DOES NOT RETURN HERE - CONTROL WILL COME BACK
*        EVENTUALLY TO IEA0DS.
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST FOR VARY CPU PROCESSING                                 *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS013: D (NO,DS014,YES,) TEST FOR VARY CPU */
         SPACE 2
DS013    DC    0H'0'
         TM    LCCADSF1,LCCAVCPU   TEST FOR VARY CPU
         BZ    DS014               NO. GO TO TRY NEXT SPECIAL EXIT
DST025   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/*DSLOCK20: S SETLOCK:OBTAIN GLOBAL DISPATCHER LOCK */
         SPACE 2
DSLOCK20 DC    0H'0'
*        SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=(PSAANEW,IEAVEDS0*
               ,(DSLOCK21))
         L     RD,AGSLDISP         OBTAIN DISPATCHER SPECIAL ENTRY PT
         BALR  RE,RD               LOCK MANAGER'S SPECIAL DISP ENTRY
DST025A  DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P TRANSFER TO MASTER'S ADDRESS SPACE */
         SPACE 2
         L     R8,DSMASCB          MASTER'S ASCB ADDRESS
         ST    R8,PSAAOLD          SET PSAAOLD
         ST    R8,PSAANEW          SET PSAANEW
         LCTL  R1,R1,PSASTOR       MASTER'S SEG TABLE ORIGIN REG.
         SPACE 2
*/*DSLOCK21: S SETLOCK:RELEASE GLOBAL DISPATCHER LOCK */
         SPACE 2
DSLOCK21 DC    0H'0'
*        SETLOCK RELEASE,TYPE=DISP,RELATED=(PSAANEW,IEAVEDS0,(DSLOCK20)*
               )
         L     RB,DSDISPLK         OBTAIN DISP LOCK ADDR       @YM03564
         SLR   RD,RD               ZERO A REGISTER             @YM03564
         ST    RD,DSL0(RB)         FREE LOCK VIA STORE ZEROS   @YM03564
         NI    PSAHLHI+DSL2,X'EF'  INDICATE DISPATCHER LOCK NOT HELD
DST025B  DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P RESET THE DISPATCHER INDICATOR */
         SPACE 2
         NI    PSASUP1,DSXFF-PSADISP    RESET DISPATCHER INDICATOR.
         SPACE 2
*/* R EXIT TO VARY CPU PROCESSOR */
         SPACE 2
         L     RB,FLCCVT               LOCATE THE CVT
         USING CVT,RB
         L     RF,CVTQUIT          VARY CPU ENTRY POINT
         DROP  RB
         BR    RF                  EXIT.
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST FOR DSS IN PROCESS                                      *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS014: D (NO,DS015,YES,) TEST FOR DSS IN PROCESS */
         SPACE 2
DS014    DC    0H'0'
         TM    LCCADSF1,LCCADSS    TEST FOR DSS IN PROCESS
         BZ    DS015               NO. GO TO TRY NEXT SPECIAL EXIT.
         SPACE 2
*/*DSLOCK7: S SETLOCK:OBTAIN GLOBAL DISPATCHER LOCK */
         SPACE 2
DSLOCK7  DC    0H'0'
*        SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=('ASCB QUEUE/GSPL*
               /LSPL/PSAANEW',IEAVEDS0,(DSLOCK11,DSLOCK14,DSLOCK16,DSLO*
               CK17,DSLOCK18,DSLOCK19))
         L     RD,AGSLDISP         OBTAIN DISPATCHER SPECIAL ENTRY PT
         BALR  RE,RD               LOCK MANAGER'S SPECIAL DISP ENTRY
DST026   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* S IEAVEMS0:SWITCH TO MASTER'S ADDRESS SPACE */
         SPACE 2
         L     R1,DSMASCB          MASTER'S ASCB ADDRESS
         L     RF,DSMS0            MEMORY SWITCH ADDRESS
         BALR  RE,RF               SWITCH TO MASTER'S ADDRESS SPACE
DST027   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,DSRT015) RESET THE DSS IN PROCESS BIT */
         SPACE 2
         NI    LCCADSF1,DSXFF-LCCADSS   TURN OFF DSS IN PROGRESS BIT
         B     DSRT015             GO TO DISP. TESTS UNDER THE GDL LOCK
         SPACE 2
***********************************************************************
*                                                                     *
*        TEST FOR TIMER RECOVERY                                      *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS015: D (NO,DS016,YES,) TEST FOR TIMER RECOVERY */
         SPACE 2
DS015    DC    0H'0'
         TM    LCCADSF1,LCCATIMR   TEST FOR TIMER RECOVERY.
         BZ    DS016               NO. GO TO TRY NEXT SPECIAL EXIT.
         SPACE 2
*/* R EXIT TO TIMER RECOVERY */
         SPACE 2
DST028   DC    0H'0'               *** TEST LABEL ***
         NI    PSASUP1,DSXFF-PSADISP    RESET DISPATCHER INDICATOR.
         L     RF,DSRSPN           TIMER RECOVERY ROUTINE ENTRY PT.
         BR    RF                  EXIT TO TIMER RECOVERY.
         SPACE 2
*/*DS016: R ADDITIONAL SPECIAL EXITS GO HERE */
         SPACE 2
DS016    DC    0H'0'
*
*  PLACE ADDITIONAL SPECIAL EXITS TESTS HERE
*
         MVI   LCCADSF1,DSX0       CLEAR THE SPECIAL EXITS INDICATOR
         B     DS01                GO FIND SOME WORK.
         TITLE 'IEAVEDS0 - GLOBAL SMQ'
***********************************************************************
*                                                                     *
*  THIS SECTION IS ENTERED WHEN THERE ARE FOUND TO BE SRB'S ON        *
*        THE GLOBAL SERVICE MANAGER QUEUE                             *
*                                                                     *
*  ON ENTRY :                                                         *
*        R5 - FIRST SRB ADDRESS  (CONTENTS OF GSMQ HEADER)            *
*        R6 - ADDRESS OF GSMQ                                         *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS021: S DSSAVE:SAVE STATUS OF PREVIOUS TASK */
         SPACE 2
DS021    DC    0H'0'
         BAL   RF,DSSAVE           GO TO SAVE PREVIOUS TASK'S STATUS.
*   DSSAVE USES REGISTERS 0,1,2,3,14 AND 15.
         SPACE 2
*/*DSLOCK9: S SETLOCK: OBTAIN GLOBAL DISPATCHER LOCK */
         SPACE 2
DSLOCK9  DC    0H'0'
*        SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=('ASCB QUEUE/GSPL*
               /LSPL/PSAANEW',IEAVEDS0,(DSLOCK8,DSLOCK11,DSLOCK14,DSLOC*
               K16,DSLOCK17,DSLOCK18,DSLOCK19))
         L     RD,AGSLDISP         OBTAIN DISPATCHER SPECIAL ENTRY PT
         BALR  RE,RD               LOCK MANAGER'S SPECIAL DISP ENTRY
         SPACE 2
*/*DS021A: P CLEAR REG FOR COMPARE AND SWAP */
         SPACE 2
DS021A   DC    0H'0'
         SR    R3,R3               PREPARE TO STORE ZERO INTO GSMQ HDR.
         SPACE 2
*/*DS021B: P (OK,DS021C,ZERO,DSRT017,ADD,DS021B) COMPARE AND SWAP GSMQ
*/**/
         SPACE 2
DS021B   DC    0H'0'
         CS    R5,R3,DSL0(R6)      COMPARE & SWAP TO PICK UP SRB CHAIN.
         BC    DSCC8,DS021C        OK. CONTINUE.
DST029   DC    0H'0'               *** TEST LABEL ***
         LTR   R5,R5               TEST FOR SRB PICKED UP IN C&S.
         BNZ   DS021B              YES. SCHEDULE HAS ADDED ONE. GO TO
*                                       DEQUEUE AGAIN.
DST030   DC    0H'0'               *** TEST LABEL ***
         B     DSRT017             NO. ANOTHER CPU HAS DEQUEUED THEM.
*                                        RETURN TO MAINLINE.
         SPACE
***********************************************************************
*                                                                     *
*  THE SRB'S HAVE BEEN DEQUEUED FROM THE GSMQ PREPARE TO MOVE THEM    *
*        TO THE GSPL AND DISPATCH THEM.                               *
*                                                                     *
*  SET UP TO GO TO GLOBAL SCHEDULE                                    *
*        R3 -  RETURN ADDRESS                                         *
*        R4 -  ENTRY POINT ADDRESS                                    *
*        R5 -  CONTENTS OF GSMQ (FIRST SRB ADDRESS)                   *
*        R7 -  LCCA ADDRESS                                           *
*        R8 -  ASCB ADDRESS                                           *
*        R9 -  DISPATCHER BASE ADDRESS                                *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS021C: S IEAVESC1:GLOBAL SCHEDULE */
         SPACE 2
DS021C   DC    0H'0'
         ST    R5,LCCASMQJ             JOURNAL SMQ ENTRY
         L     R4,DSVESC1          GLOBAL SCHEDULE ADDRESS
         BALR  R3,R4               GO TO GLOBAL SCHEDULE
DST031   DC    0H'0'               *** TEST LABEL ***
*
*        REGISTERS 7,8 AND 9 ARE RETURNED FROM GLOBAL SCHEDULE
*
         SPACE 2
*/* P (,DS032) SET GSPL ADDRESS */
         SPACE 2
         L     R4,DSGSPL           SET UP GSPL ADDRESS IN REG 4.
         SPACE
         B     DS032               GO TO DEQUEUE AN SRB FROM THE SPL.
         TITLE 'IEAVEDS0 - GLOBAL SPL'
***********************************************************************
*                                                                     *
*  THIS SECTION IS ENTERED WHEN THERE ARE SRB'S ON THE GLOBAL         *
*        SERVICE PRIORITY LIST.                                       *
*        R4 - CONTAINS THE ADDRESS OF THE GSPL.                       *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS031: S DSSAVE:SAVE PREVIOUS TASK'S STATUS */
         SPACE 2
DS031    DC    0H'0'
         BAL   RF,DSSAVE           GO TO SAVE PREVIOUS TASKS STATUS.
*   DSSAVE USES REGISTERS 0,1,2,3,14 AND 15.
         SPACE
*/*DSLOCK10: S SETLOCK:OBTAIN THE GLOBAL DISPATCHER LOCK */
         SPACE 2
DSLOCK10 DC    0H'0'
*        SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=('ASCB QUEUE/GSPL*
               /LSPL/PSAANEW',IEAVEDS0,(DSLOCK8,DSLOCK11,DSLOCK14,DSLOC*
               K16,DSLOCK17,DSLOCK18,DSLOCK19))
         L     RD,AGSLDISP         OBTAIN DISPATCHER SPECIAL ENTRY PT
         BALR  RE,RD               LOCK MANAGER'S SPECIAL DISP ENTRY
         SPACE
*
*  DEQUEUE SRB FROM THE GLOBAL SERVICE PRIORITY LIST
*
         SPACE 2
*/*DS032: P SET UP TO INDEX THROUGH SRB'S */
         SPACE 2
DS032    DC    0H'0'
         L     R3,FLCCVT           CVT ADDRESS
         USING CVTMAP,R3
         L     R6,CVTCSD           CSD ADDRESS
         DROP  R3                  DROP CVT ADDRESSING
         USING CSD,R6
         LA    R3,GSPLSIZE(R4)     END OF GSPL
         SPACE 2
*/*DS0321: P GET SRB ADDRESS */
         SPACE 2
DS0321   DC    0H'0'
         L     R2,DSL0(R4)         SRB ADDRESS
         SPACE 2
*/*DS0322: D (YES,DS03225,NO,) IS THERE AN SRB? */
         SPACE 2
DS0322   DC    0H'0'               ENTER FOR LOOP.
         LTR   R2,R2               SRB ?
         BNZ   DS03225             YES. CONTINUE.
         SPACE 2
*/* D (NO,DS0321,YES,DSRT0173) END OF SPL? */
         SPACE 2
DST032   DC    0H'0'               *** TEST LABEL ***
         LA    R4,DSL8(R4)         GET NEXT SPL ENTRY ADDRESS
         CLR   R4,R3               FINISHED ?
         BNE   DS0321              NO. GO TO TEST FOR SRB'S AT THIS LVL
DST033   DC    0H'0'               *** TEST LABEL ***
         B     DSRT0173            DONE. NO SRB'S FOUND.
         SPACE 2
*/*DS03225: P GET SRB'S ASCB ADDRESS */
         SPACE 2
DS03225  DC    0H'0'
         USING SRBSECT,R2          SRB ADDRESSABILITY.
         L     R5,SRBASCB          SRB'S ASCB ADDRESS.
         DROP  R8                  TEMP DROP 8 AS ASCB ADDRESS REG.
         USING ASCB,R5             TEMP SET ASCB ADDRESSABILITY TO 5
         SPACE 2
*/* D (NO,DS0323,YES,) IS SYSTEM NON DISPATCH? */
         SPACE 2
         TM    CSDSCFL1,CSDSYSND   IS SYSTEM NON-DISPATCHABLE.
         BZ    DS0323              NO. GO AROUND EXEMPT CHECK
DST034   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* D (NO,DS0329,YES,DS0323) IS ADDRESS SPACE EXEMPT? */
         SPACE 2
         TM    ASCBFLG2,ASCBXMPT   YES. TEST IF ADDRESS SPACE IS EXEMPT
         BZ    DS0329              NOT EXEMPT. GO TO GET NEXT SRB.
         SPACE 2
*/*DS0323: D (YES,DS0329,NO,) IS ADDR SPACE NON DISPATCH? */
         SPACE 2
DS0323   DC    0H'0'               ENTER FOR SYSTEM DISPATCHABLE.
         CLI   ASCBDSP1,DSX0       IS THIS ADDRESS SPACE NON-DISPATCH.
         BNE   DS0329              YES. GO TO GET NEXT SRB.
         SPACE 2
*/* D (YES,DS0329,NO,) ARE ALL SRB'S STOPPED IN ASCB? */
         SPACE 2
         TM    ASCBFLG2,ASCBSNQS   ARE ALL SRB'S STOPPED IN ASCB?
         BO    DS0329              YES. GO TO GET NEXT SRB.
         SPACE 2
*/* D (YES,DS0324,NO,) IS SRB NON QUIESC? */
         SPACE 2
         CLI   SRBPRIOR,SRBPNONQ   IS THIS SRB NON-QUIESCEABLE.
         BE    DS0324              YES. GO AROUND SYSTEM SRB CHECKS.
         SPACE 2
*/* D (YES,DS0329,NO,DS0324) STOP QUIES. SRB'S IN ASCB? */
         SPACE 2
         LH    R1,ASCBSSRB         STOP QUIESCEABLE SRB'S IN THIS ASCB?
         LTR   R1,R1               TEST COUNT GTR THAN ZERO.
         BNZ   DS0329              YES. GO TO GET NEXT SRB.
         SPACE 2
*/*DS0324: D (NO,DS0325,YES,) IS CPU AFFIN SPEC? */
         SPACE 2
DS0324   DC    0H'0'
         LH    RB,SRBCPAFF         SRB'S CPU AFFINITY MASK.
         LTR   RB,RB               ANY?
         BZ    DS0325              NOT SPECIFIED. BYPASS AFFINITY CHECK
DST038   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P GET CPU'S AFFINITY MASK */
         SPACE 2
         L     RE,PSAPCCAV         PCCA ADDRESS
         USING PCCA,RE
         LH    RF,PCCACAFM         CPU'S MASK.
         DROP  RE
         SPACE 2
*/* D (NO,DS032A,YES,DS0325) CAN SRB RUN ON THIS CPU? */
         SPACE 2
         NR    RF,RB               CAN SRB RUN ON THIS CPU?
         BC    DSCC8,DS032A        NO. GO TO TEST FOR ANY CPU.
         SPACE 2
*/*DS0325: D (YES,DS03251,NO,) IS THIS TOP SRB ON SPL? */
         SPACE 2
DS0325   DC    0H'0'
         C     R2,DSL0(R4)         IS THIS TOP SRB ON SPL?
         BE    DS03251             YES. CONTINUE.
DST039   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,DS032F) SET RETURN TO GLOBAL SRB DISP */
         SPACE 2
         LA    RD,DS033            SET RTN TO GLBL SRB DISP.
         B     DS032F              GO TO DEQ SRB NOT TOP.
         SPACE 2
*/*DS03251: P CHAIN NEXT SRB TO SPL */
         SPACE 2
DS03251  DC    0H'0'               ENTER FOR DEQ OF TOP SRB.
         L     RC,SRBFLNK          FORWARD CHAIN POINTER.
         ST    RC,DSL0(R4)         RE-CHAIN TO SPL.
         SPACE 2
*/* D (NO,DS0326,YES,) IS THE LAST SRB? */
         SPACE 2
         LTR   RC,RC               IS THIS THE ONLY (LAST) SRB?
         BNZ   DS0326              NO. GO AROUND CLEARING LAST PTR.
DST040   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,DS033) CLEAR POINTER TO LAST SRB */
         SPACE 2
         ST    RC,DSL4(R4)         CLEAR PTR TO LAST SRB.
         B     DS033               GO TO GLOBAL SRB DISPATCHER
         SPACE 2
*/*DS0326: P (,DS033) CLEAR SRB CHAIN ADDRESS */
         SPACE 2
DS0326   DC    0H'0'               ENTER FOR LAST SRB ON SPL.
         SR    RE,RE
         ST    RE,SRBFLNK          CLEAR SRB CHAIN ADDRESS.
         B     DS033               GO TO GLOBAL SRB DISPATCHER.
         SPACE 4
*/*DS0329: D (YES,DS03290,NO,) IS THIS THE TOP SRB? */
         SPACE 2
DS0329   DC    0H'0'               ENTER TO DEQ SRB & SCHEDULE LOCALLY
         C     R2,DSL0(R4)         IS THIS THE TOP SRB ON SPL?
         BE    DS03290             YES. CONTINUE.
DST041   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,DS032F) SET RETURN TO DS03291 */
         SPACE 2
         LA    RD,DS03291          NO. SET RTN.
         B     DS032F              GO TO DEQ SRB NOT ON TOP OF SPL.
         SPACE 2
*/*DS03290: P CHAIN NEXT SRB TO SPL */
         SPACE 2
DS03290  DC    0H'0'               ENTER FOR TOP SRB ON SPL.
         L     RC,SRBFLNK          FORWARD CHAIN POINTER.
         ST    RC,DSL0(R4)         RE-CHAIN TO SPL.
         SPACE 2
*/* D (NO,DS03291,YES,) IS THIS THE ONLY SRB? */
         SPACE 2
         LTR   RC,RC               IS THIS THE ONLY (LAST) SRB?
         BNZ   DS03291             NO. GO AROUND CLEARING LAST POINTER.
DST042   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P CLEAR SPL POINTER TO LAST SRB */
         SPACE 2
         ST    RC,DSL4(R4)         DEQ'D LAST SRB. CLEAR SPL PTR TO LAS
         SPACE 2
*/*DS03291: S SCHEDULE:SCHEDULE SRB TO LSMQ */
         SPACE 2
DS03291  DC    0H'0'               ENTER FOR SCHEDULING SRB LOCALLY.
         LR    R1,R2               THIS SRB ADDRESS.
         SCHEDULE SRB=(1),SCOPE=LOCAL  SCHEDULE SRB TO LOCAL QUEUE.
         SPACE 2
*/* P (,DS0322) GET NEXT SRB */
         SPACE 2
         LR    R2,RC               GET NEXT SRB.
         B     DS0322              GO TO SEE IF THIS SRB WILL RUN.
         SPACE 4
*/*DS032A: P GET SYSTEM WIDE CPU AFFINITY MASK */
         SPACE 2
DS032A   DC    0H'0'               ENTER FOR SRB AFFINITY CHECK.
         LH    RF,CSDCPUAL         SYSTEM WIDE CPU AFFINITY MASK.
         SPACE 2
*/* D (NO,DS0325,YES,) CAN SRB RUN ON ANY CPU? */
         SPACE 2
         NR    RF,RB               CAN SRB RUN ON ANY CPU.
         BC    DSCC8,DS0325        NO. GO TO DISPATCH AND ABEND.
DST043   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,DS0322) GET NEXT SRB */
         SPACE 2
         L     R2,SRBFLNK          SRB CAN RUN ON OTHER CPU.  GET NEXT.
         B     DS0322              GO TO CHECK NEXT SRB DISPATCHIBILITY
         SPACE 4
*
*  ENTER FOR NOT TOP SRB ON SPL QUEUE.
*
         SPACE 2
*/*DS032F: P GET TOP SRB */
         SPACE 2
DS032F   DC    0H'0'
         L     RE,DSL0(R4)         TOP SRB.
         SPACE 2
*/*DS032F1: P GET NEXT SRB */
         SPACE 2
DS032F1  DC    0H'0'
         L     RF,SRBFLNK-SRBSECT(RE)  NEXT SRB.
         SPACE 2
*/* D (YES,DS032F2,NO,) IS IT THE CURRENT SRB? */
         SPACE 2
         CLR   RF,R2               IS IT CURRENT?
         BE    DS032F2             YES. RE HAS ADDRESS OF PREVIOUS.
DST044   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,DS032F1) SET UP TO SCAN NEXT SRB */
         SPACE 2
         LR    RE,RF               NO. SET UP TO SCAN NEXT SRB.
         B     DS032F1             GO TO GET NEXT SRB.
         SPACE 2
*/*DS032F2: P CHAIN NEXT SRB TO PREVIOUS */
         SPACE 2
DS032F2  DC    0H'0'
         L     RC,SRBFLNK          NEXT SRB FROM CURRENT.
         ST    RC,SRBFLNK-SRBSECT(RE)  CHAIN UP TO PREVIOUS
         SPACE 2
*/* D (NO,DST045A,YES,) WAS SRB LAST ON QUEUE? */
         SPACE 2
         LTR   RC,RC               WAS CURRENT SRB LAST ON QUEUE?
DST044A  DC    0H'0'               *** TEST LABEL ***
         BCR   DSCC7,RD            NO. DONE. GO BACK TO CALLER
DST045   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P STORE PREVIOUS SRB ADDRESS INTO SPL */
         SPACE 2
         ST    RE,DSL4(R4)         YES. STORE PREVIOUS SRB ADDRESS
*                                       INTO SPL.
         SPACE 2
*/*DST045A: R RETURN TO CALLER */
         SPACE 2
DST045A  DC    0H'0'               *** TEST LABEL ***
         BR    RD                  GO BACK TO CALLER
         DROP  R5
         USING ASCB,R8             RE-ESTABLISH ASCB ADDRESSABILITY
         TITLE 'IEAVEDS0 - GLOBAL SRB DISPATCHER'
***********************************************************************
*                                                                     *
*  GLOBAL SRB DISPATCHER                                              *
*        R2 HAS SRB ADDRESS   R5 HAS ASCB ADDRESS                     *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS033: P SET SRB MODE INDICATORS */
         SPACE 2
         ENTRY DSSRBRTN                                        @Z40FPXJ
DSSRBRTN DS    0H                                              @Z40FPXJ
DS033    DC    0H'0'
         OI    LCCADSF2,LCCASRBM+LCCAGSRB+LCCADSRW SET SRBMODE AND
*                                  GLOBAL SRB MODE INDICATORS
         ST    R2,LCCASPLJ             JOURNAL GLOBAL ENTRY
         SPACE 2
*/* P RELOAD ASCB ADDRESS FOR ADDRESSABILITY */
         SPACE 2
         LR    R8,R5               RELOAD ASCB FOR ADDRESSABILITY
         SPACE 2
*/* P SET PSAAOLD TO ADDRESS OF ASCB IN SRB */
         SPACE 2
         ST    R5,PSAAOLD          SET "CURRENT" ASCB ADDRESS
         SPACE 2
*/* P LOAD CONTROL REGISTER WITH NEW ASCB'S STOR */
         SPACE 2
         LCTL  R1,R1,ASCBSTOR      LOAD FOR NEW ADDRESS SPACE ADDRESS-
*                                       ABILITY                @YM06905
         SPACE 2
*/*DS0331: P INCREMENT COUNT OF SRB'S IN ADDR. SPACE */
         SPACE 2
DS0331   DC    0H'0'
         LH    R3,ASCBSRBS         *    INCREMENT COUNT OF THE
         LA    R3,DSI1(R3)         *         NUMBER OF SRB'S DISPATCHED
         STH   R3,ASCBSRBS         *         IN THIS ADDRESS SPACE.
DST046   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P BUILD MODEL PSW IN LOW CORE */
         SPACE 2
         L     R4,DSSRBPSW         MODEL PSW
         ST    R4,PSAPSWSV         MOVE TO LOW CORE.
         SPACE
         OC    PSAPSWSV+DSL1(DSL1),SRBPKF    SET PROTECT KEY AS
*                                  SPECIFIED IN THE SRB.
         SPACE
         L     RF,SRBEP            *
         LA    RF,DSL0(RF)         *   SET PSW ENTRY ADDRESS
         ST    RF,PSAPSWSV+DSL4    *
         SPACE 2
*/* P MOVE SRB AFFIN, PURGE ASID/TCB ADDRS TO LCCA */
         SPACE 2
         MVC   LCCASRBF(DSL8),SRBFLC   MOVE SRB AFFINITY, PURGE ASID
*                                       AND PURGE TCB ADDR TO LCCA.
         SPACE 2
*/* P PURGE THE NORMAL STACK */
         SPACE 2
         SETFRR F,WRKREGS=(R3,R4)  PURGE THE NORMAL STACK
         SPACE 2
*/* P RESET THE DISPATCHER INDICATOR */
         SPACE 2
         NI    PSASUP1,DSXFF-PSADISP    RESET DISPATCHER INDICATOR
         SPACE 2
*/* P ZERO SPL JOURNAL WORD */
         SPACE 2
         SR    R4,R4                   ZERO A REGISTER
         ST    R4,LCCASPLJ             ZERO THE SPL JOURNAL WORD
         SPACE 2
*/* P RESET SUPER STACK TO NORMAL */
         SPACE 2
LISRBPSW DC    0H'0'
         L     R3,PSANSTK              OBTAIN NORMAL STACK ADDR
         ST    R3,PSACSTK          SET CURRENT STACK TO NORMAL ADDR.
         SPACE 2
*/* P SET R0 = SRB ADDRESS, R1 = PARM ADDRESS AND R14 = RETURN ADDR */
         SPACE 2
         LR    R0,R2               SRB ADDRESS
         L     R1,SRBPARM          PARAMETER ADDRESS
         SPACE 2
*/* P GET ADDRESSABILITY TO CVT */
         SPACE 2
         L     RB,FLCCVT           CVT ADDRESSABILITY TO GET
         USING CVT,RB                   CVT TRACE ENTRY
         SPACE 2
*/* D (NO,DS03315,YES,) DOES SRB HAVE AFFINITY? */
         SPACE 2
         LH    RA,SRBCPAFF         SRB'S CPU AFFINITY MASK.
         LTR   RA,RA               TEST FOR AFFINITY SPECIFIED.
         BZ    DS03315             NO. GO TO TEST TRACE ACTIVE.
         SPACE 2
*/* P GET CPU'S AFFINITY MASK FROM THE PCCA */
         SPACE 2
         L     R5,PSAPCCAV         PCCA'S ADDRESS FROM PSA.
         USING PCCA,R5             ESTABLISH PCCA ADDRESSABILITY.
         LH    R5,PCCACAFM         CPU'S AFFINITY MASK.
         DROP  R5                  DROP PCCA ADDRESSABILITY.
         SPACE 2
*/* D (YES,DS03315,NO,) CAN SRB RUN ON THIS CPU? */
         SPACE 2
         NR    R5,RA               TEST SRB MASK AGAINST CPU MASK.
         BNZ   DS03315             MATCH. SRB CAN RUN ON THIS CPU.
         SPACE 2
*/* P SET REG 1 TO 072 ABEND CODE */
         SPACE 2
         L     R1,DSABAFFN         LOAD REGISTER 1 WITH 072 ABEND CODE
         SPACE 2
*/* P SET SRB'S PSW TO POINT TO SVC ABEND INSTRUCTION IN CVT */
         SPACE 2
         LA    R5,CVTQABST         ADDRESS OF SVC D INST IN CVT.
         ST    R5,PSAPSWSV+DSL4    SET PSW TO GO TO SVC D.
         SPACE 2
*/* P REMOVE SRB'S AFFN TO OFFLINE CPU IN LCCA FOR ABEND */    @ZA25275
         SPACE 2                                               @ZA25275
         SLR   R5,R5               ZERO A REGISTER.            @ZA25275
         STH   R5,LCCASRBF         ZERO SRB'S INVALID AFFN     @ZA25275
*                                       SET IN LCCA.           @ZA25275
         SPACE 2                                               @ZA25275
*/*DS03315: D (NO,DS0332,YES,) IS TRACE ACTIVE? */
         SPACE 2
DS03315  DC    0H'0'
         CLI   CVTTRACE+DSL1,DSTRACEM   IS TRACE ACTIVE?
         BNE   DS0332              NO. BYPASS.
         DROP  RB                  DROP CVT BASE.
         SPACE 2
*/* S TRSRB1:TRACE SRB DISPATCH */
         SPACE 2
         L     RA,DSTRSRB1         TRACE SRB ENTRY ADDRESS
DST046A  DC    0H'0'               *** TEST LABEL ***
         BALR  RB,RA               GO TO TRACE
LOADPSA1 DC    0H'0'               ***** FOR TSO TEST *****
         SPACE 2
*/*DS0332: S IEADISP1:GTF INTERFACE */
         SPACE 2
DS0332   DC    0H'0'
         HOOK  EID=IEADISP1,TYPE=P      GO TO GTF
         SPACE 2
*/* P STORE TOD CLOCK INTO LCCA FOR JOB STEP TIMING */
         SPACE 2
         STCK  LCCADTOD            STORE TOD CLOCK FOR JOB STEP TIMING
         SPACE 2
*/*DSLOCK11: S SETLOCK:RELEASE GLOBAL DISPATCHER LOCK */
         SPACE 2
DSLOCK11 DC    0H'0'
*        SETLOCK RELEASE,TYPE=DISP,RELATED=('ASCB QUEUE/GSPL/LSPL/PSAAN*
               EW',IEAVEDS0,(DSLOCK5,DSLOCK6,DSLOCK7,DSLOCK9,DSLOCK10))
         L     RB,DSDISPLK         OBTAIN DISP LOCK ADDR       @YM03564
         SLR   RD,RD               ZERO A REGISTER             @YM03564
         ST    RD,DSL0(RB)         FREE LOCK VIA STORE ZEROS   @YM03564
         NI    PSAHLHI+DSL2,X'EF'  INDICATE DISPATCHER LOCK NOT HELD
         SPACE 2
***********************************************************************
*                                                                     *
*              LOAD PSW FOR INITIAL DISPATCH OF AN SRB                *
*                                                                     *
***********************************************************************
         SPACE 2
*/*ISRBPSW: R LPSW */
         SPACE 2
ISRBPSW  DC    0H'0'
         LA    RE,IEAPDSRT         RETURN ADDRESS
         LPSW  PSAPSWSV            INITIAL SRB DISPATCH
         TITLE 'IEAVEDS0 - SRBS ON LSMQ'
***********************************************************************
*                                                                     *
*  LOCAL SRB'S ON THE LOCAL SERVICE MANAGER QUEUE PROCESSING.         *
*              R5 - HAS FIRST SRB ADDRESS                             *
*              R6 - HAS LSMQ ADDRESS                                  *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS041: S DSSAVE:SAVE STATUS OF PREVIOUS TASK */
         SPACE 2
DS041    DC    0H'0'
         BAL   RF,DSSAVE           SAVE STATUS OF PREVIOUS TASK.
*   DSSAVE USES REGISTERS 0,1,2,3,14 AND 15.
         SPACE 2
*/*DSLOCK12: S SETLOCK: OBTAIN GLOBAL DISPATCHER LOCK */
         SPACE 2
DSLOCK12 DC    0H'0'
*        SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=('ASCB QUEUE/GSPL*
               /LSPL/PSAANEW',IEAVEDS0,(DSLOCK8,DSLOCK14,DSLOCK16,DSLOC*
               K17,DSLOCK18,DSLOCK19))
         L     RD,AGSLDISP         OBTAIN DISPATCHER SPECIAL ENTRY PT
         BALR  RE,RD               LOCK MANAGER'S SPECIAL DISP ENTRY
         SPACE 2
*/*DS0411: P SET UP FOR COMPARE AND SWAP */
         SPACE 2
DS0411   DC    0H'0'
         SR    R3,R3               CLEAR FOR COMPARE AND SWAP
         SPACE 2
*/*DS0412: P (OK,DS042,ZERO,DSRT0177,ADD,DS0412) CMPR & SWAP LSMQ */
         SPACE 2
DS0412   DC    0H'0'
         CS    R5,R3,DSL0(R6)      DEQUEUE ENTIRE QUEUE
         BC    DSCC8,DS042         OK. CONTINUE.
DST050   DC    0H'0'               *** TEST LABEL ***
         LTR   R5,R5               TEST FOR SRB PICKED UP IN CS
         BNZ   DS0412              YES. SCHED HAS ADDED ONE. GO TO TRY
*                                      AGAIN.
DST051   DC    0H'0'               *** TEST LABEL ***
         B     DSRT0177            NO. ANOTHER CPU HAS DEQUEUED THEM.
*                                      GO TO TEST MEMORY SWITCH.
         SPACE
***********************************************************************
*                                                                     *
*  SET UP TO GO TO LOCAL SCHEDULE                                     *
*        R3 -  RETURN ADDRESS                                         *
*        R4 -  ENTRY POINT ADDRESS                                    *
*        R5 -  CONTENTS OF LSMQ (FIRST SRB ADDRESS)                   *
*        R7 -  LCCA ADDRESS                                           *
*        R8 -  ASCB ADDRESS                                           *
*        R9 -  DISPATCHER BASE ADDRESS                                *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS042: S IEAVESC2:LOCAL SCHEDULE TO MOVE SRB'S TO LSPL'S */
         SPACE 2
DS042    DC    0H'0'
         ST    R5,LCCASMQJ             JOURNAL LOCAL SMQ ENTRY
         L     R4,DSVESC2          LOCAL SCHEDULE ADDRESS
         BALR  R3,R4               GO.
DST052   DC    0H'0'               *** TEST LABEL ***
*
*        REGISTERS 7,8 AND 9 ARE RETURNED FROM LOCAL SCHEDULE
*
         SPACE 2
*/*DS043: D (YES,DS052,NO,) TEST FOR MEMORY SWITCH */
         SPACE 2
DS043    DC    0H'0'
         C     R8,PSAANEW          TEST FOR MEMORY SWITCH.
         BNE   DS052               YES. GO TO MEMORY DISPATCHER.
DST053   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* D (YES,DS062,NO,DSLOCK18) ANY LOCAL SPL ADDRESS */         @ZA20174
         SPACE 2
         L     R4,ASCBSPL          NO. GET LOCAL SPL ADDRESS.
         L     R0,DSL4(R4)         ANY NON-Q SRBS?             @YM03564
         O     R0,DSL8(R4)         OR SYSTEM SRBS?             @YM03564
         BNZ   DS062               YES GO TO LOCAL SPL PROCESSOR
         B     DSLOCK18            NO GO TO PROCESS MEMORY     @YM03564
         TITLE 'IEAVEDS0 - MEMORY DISPATCHER'
***********************************************************************
*                                                                     *
*  MEMORY DISPATCHER SECTION  - THIS SECTION IS ENTERED WHEN AN       *
*        ADDRESS SPACE SWITCH HAS BEEN INDICATED BY PSAANEW NOT BEING *
*        EQUAL TO PSAAOLD.                                            *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS051: S DSSAVE:SAVE STATUS OF PREVIOUS TASK */
         SPACE 2
DS051    DC    0H'0'
         BAL   RF,DSSAVE           GO TO SAVE STATUS OF PREVIOUS TASK.
*   DSSAVE USES REGISTERS 0,1,2,3,14 AND 15.
         SPACE 2
*/*DSLOCK13: S SETLOCK:OBTAIN GLOBAL DISPATCHER LOCK */
         SPACE 2
DSLOCK13 DC    0H'0'
*        SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=('ASCB QUEUE/GSPL*
               /LSPL/PSAANEW',IEAVEDS0,(DSLOCK14,DSLOCK16,DSLOCK17,DSLO*
               CK18,DSLOCK19))
         L     RD,AGSLDISP         OBTAIN DISPATCHER SPECIAL ENTRY PT
         BALR  RE,RD               LOCK MANAGER'S SPECIAL DISP ENTRY
         SPACE 2
*/*DS052: P SET UP CVT AND CSD ADDRESSING */
         SPACE 2
DS052    DC    0H'0'
         L     R6,FLCCVT           CVT
         USING CVT,R6                   ADDRESSING.
         L     R5,CVTCSD           CSD
         USING CSD,R5                   ADDRESSING.
         SPACE 2
*/* P GET PSAANEW */
         SPACE 2
         L     R8,PSAANEW          NEXT ASCB TO DISPATCH.
         SPACE 2
*/* D (NO,DS054,YES,DS053) IS PSAANEW EQUAL ZERO? */
         SPACE 2
         LTR   R8,R8               TEST FOR "PSAANEW"=0 - START FROM
*                                       TOP OF ASCB DISPATCHING QUEUE?
         BNZ   DS0543              NO. GO AROUND               @Z40FPXJ
         SPACE 2
*/*DS053: P GET HEAD OF ASCB DISP QUEUE FROM CVT */
         SPACE 2
DS053    DC    0H'0'
         L     R8,CVTASCBH         HEAD OF ASCB DISPATCHING QUEUE.
         SPACE 2
*/*DS054: D (YES,DS05B,NO,) TEST FOR END OF QUEUE */
         SPACE 2
DS054    DC    0H'0'
         LTR   R8,R8               HAVE WE SCANNED ALL ASCB'S AND
*                                       FOUND NO WORK?
         BZ    DS05B               YES. GO TO DISPATCH WAIT TASK.
         SPACE
DST054   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* D (YES,DS053,NO,) IS ASCB OFF QUEUE? */
         SPACE 2
DS0543   DS    0H                                              @Z40FPXJ
         TM    ASCBDSP1,ASCBNOQ    HAS THE ASCB FROM PSAANEW BEEN
*                                       REMOVED FROM THE DISPATCHING Q.
         BO    DS053               YES. GO TO START AT HEAD OF QUEUE.
         SPACE
DST055   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* D (NO,DS0545,YES,) HAS ASCB FAILED? */
         SPACE 2
         TM    ASCBDSP1,ASCBFAIL   IS THIS ASCB IN FAILURE MODE AND IN
*                                       THE PROCESS OF BEING REMOVED
*                                       FROM THE QUEUE OUT OF MASTER.
         BZ    DS0545              NO. CONTINUE.
DST056   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,DS054) GET NEXT ASCB */
         SPACE 2
         L     R8,ASCBFWDP         GET NEXT ASCB.
         B     DS054               GO TO TEST IT'S DISPATCHABILITY.
         SPACE 2
*/*DS0545: D (NO,DS055,YES,) IS SYS NON DISP? */
         SPACE 2
DS0545   DC    0H'0'
         TM    CSDSCFL1,CSDSYSND   IS THE SYSTEM NON-DISPATCHABLE?
         BZ    DS055               NO.  GO AROUND.
DST057   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* D (YES,DS055,NO,) IS ASCB EXEMPT? */
         SPACE 2
         TM    ASCBFLG2,ASCBXMPT   IS THIS ADDRESS SPACE EXEMPT FROM
*                                       BEING SET NON-DISPATCHABLE?
         BO    DS055               YES. CONTINUE.
DST058   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,DS054) GET NEXT ASCB */
         SPACE 2
         L     R8,ASCBFWDP         GET NEXT ASCB.
         B     DS054               GO TO TEST IT'S DISPATCHABILITY.
         SPACE 2
*/*DS055: P GET LOCAL SPL ADDRESS */
         SPACE 2
DS055    DC    0H'0'
         L     R4,ASCBSPL          LOCAL SPL ADDRESS
         SPACE 2
*/* D (NO,DS0551,YES,) ANY LOCAL SRB'S? */
         SPACE 2
         L     R0,DSL4(R4)         ANY NON-Q SRBS?             @YM03564
         O     R0,DSL8(R4)         OR SYSTEM SRBS?             @YM03564
         BZ    DS0551              NO. CONTINUE.               @YM03564
         SPACE 2
*/* D (YES,DS0551,NO,) ARE ALL SRB'S STOPPED IN ASCB? */
         SPACE 2
         TM    ASCBFLG2,ASCBSNQS   ARE ALL SRB'S STOPPED?
         BO    DS0551              YES CONTINUE                @YM03564
         SPACE 2                                               @YM03564
*/*P SET PSAANEW AND PSAAOLD */
         SPACE 2                                               @YM03564
         ST    R8,PSAAOLD          SET "CURRENT".              @YM03564
         ST    R8,PSAANEW          SET "NEXT".                 @YM03564
         SPACE 2                                               @YM03564
*/* P (,DS062A) LOAD CONTROL REGISTER WITH NEW STOR */
         SPACE 2                                               @YM03564
         LCTL  R1,R1,ASCBSTOR      NEW SEGMENT TABLE ORIGIN.   @YM06905
         B     DS062A              GO TO LOCAL SPL PROCESSOR   @YM03564
         SPACE 2                                               @YM03564
*/*DS0551: D (YES,DS056,NO,) IS INTRPT ID IN LCL LOCK? */
         SPACE 2
DS0551   DC    0H'0'
         L     R3,ASCBLOCK         LOCAL LOCK
         C     R3,DSINTPID         DOES IT CONTAIN INTERRUPTED ID.
         BE    DS056               YES. GO TO DISPATCH LOCAL SUPVR.
         SPACE
DST060   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* D (YES,DS0552,NO,) IS LOCAL LOCK AVAILABLE? */
         SPACE 2
         LTR   R3,R3               IS THE LOCAL LOCK AVAILABLE?
         BZ    DS0552              YES. GO AROUND.
DST061   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,DS054) GET NEXT ASCB */
         SPACE 2
         L     R8,ASCBFWDP         GET NEXT ASCB.
         B     DS054               GO TO TEST IT'S DISPATCHABILITY.
         SPACE 2
*/*DS0552: D (YES,DS0554,NO,) ARE TCB'S DISPATCH? */
         SPACE 2
DS0552   DC    0H'0'
         TM    ASCBFLG1,ASCBSTND   ARE TCB'S DISPATCHABLE?
         BZ    DS0554              YES. GO AROUND.
DST062   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,DS054) GET NEXT ASCB */
         SPACE 2
         L     R8,ASCBFWDP         GET NEXT ASCB.
         B     DS054               GO TO TEST IT'S DISPATCHABILITY.
         SPACE 2
*/*DS0554: D (YES,DS056,NO,) ASYNCH EXITS? */
         SPACE 2
DS0554   DC    0H'0'
         TM    ASCBFLG1,ASCBS3S    ARE THERE ASYNCHRONOUS EXITS?
         BO    DS056               YES. GO TO DISPATCH ADDRESS SPACE.
DST063   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* D (YES,DS056,NO,) IS NBR TCB'S GTR NBR CPU'S? */
         SPACE 2
         L     RD,ASCBTCBS         NUMBER OF TCBS READY        @YM03564
         C     RD,ASCBCPUS         IS NUMBER TCB'S GTR NUMBER CPU'S.
         BH    DS056               YES. GO TO DISPATCH THE ADDR SPACE
DST064   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,DS054) GET NEXT ASCB */
         SPACE 2
         L     R8,ASCBFWDP         GET NEXT ASCB.
         B     DS054               GO TO TEST IT'S DISPATCHABILITY.
         SPACE
         DROP  R5                  DROP CSD ADDRESSING
         DROP  R6                  DROP CVT ADDRESSING
         SPACE
*
*  DISPATCH THE ADDRESS SPACE
*        R4 HAS LOCAL SPL ADDRESS
*
DS056    DC    0H'0'
         SPACE 2
*/*DS056: P SET PSAANEW AND PSAAOLD */
         SPACE 2
         ST    R8,PSAAOLD          SET "CURRENT".
         ST    R8,PSAANEW          SET "NEXT".
         SPACE 2
*/* P LOAD CONTROL REGISTER WITH NEW STOR */
         SPACE 2
         LCTL  R1,R1,ASCBSTOR      NEW SEGMENT TABLE ORIGIN.   @YM06905
         SPACE 2
*/*DSLOCK18: S (,DS07) SETLOCK:RELEASE GLOBAL DISPATCHER LOCK */
         SPACE 2
DSLOCK18 DC    0H'0'
*        SETLOCK RELEASE,TYPE=DISP,RELATED=('ASCB QUEUE/GSPL/LSPL/PSAAN*
               EW',IEAVEDS0,(DSLOCK5,DSLOCK6,DSLOCK7,DSLOCK9,DSLOCK10,D*
               SLOCK12,DSLOCK13,DSLOCK22,DSLOCK3))
         L     RB,DSDISPLK         OBTAIN DISP LOCK ADDR       @YM03564
         SLR   RD,RD               ZERO A REGISTER             @YM03564
         ST    RD,DSL0(RB)         FREE LOCK VIA STORE ZEROS   @YM03564
         NI    PSAHLHI+DSL2,X'EF'  INDICATE DISPATCHER LOCK NOT HELD
DST065   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* D (YES,DS08X,NO,) TEST FOR LOCAL LOCK AVAILABLE */
         SPACE 2
         L     R1,ASCBLOCK         CURRENT LOCKWORD VALUE      @YM07654
         LH    R3,PSACPULA         LOGICAL CPU ADDRESS.        @YM07654
         LTR   R1,R1               IS LOCK AVAILABLE?          @YM07654
         BZ    DS08X               LOCK IS AVAILABLE, OBTAIN IT@YM07654
         SPACE 2                                               @YM07654
*/* D (YES,DS08A,NO,) TEST FOR LOCAL SUPERVISOR */
         SPACE 2                                               @YM07654
         BM    DS08A               INTERRUPT ID, GO OBTAIN IT  @YM07654
         SPACE 2                                               @YM07654
*/* D (YES,DS081,NO,DS08B) WAS LOCK OWNED BY THIS CPU? */
         SPACE 2                                               @YM07654
         CR    R1,R3               WAS LOCAL LOCK OWNED BY THIS CPU?
         BE    DS081               YES. GO TO LOCAL SUPVR DISPATCHER
         B     DS08B               LOCK IS NOT AVAILABLE       @YM07654
         TITLE 'IEAVEDS0 - WAIT DISPATCHER'
***********************************************************************
*                                                                     *
*  PREPARE TO DISPATCH THE WAIT TASK                                  *
*        THIS SECTION IS ENTERED WHEN NO WORK HAS BEEN FOUND          *
*        IN THE INITIAL SCAN.  THE WAIT TASK IS SET UP AND THE        *
*        QUEUES ARE SCANNED ONCE MORE TO PICK UP ANY SRB'S WHICH      *
*        MAY HAVE BEEN SCHEDULED DURING THE FIRST SCAN.               *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS05B: P PICK UP ADDRESS OF WAIT TCB AND ASCB */
         SPACE 2
DS05B    DC    0H'0'
         L     R8,DSWASCB          WAIT ASCB ADDRESS
         L     R5,DSWTCB           WAIT TCB ADDRESS
*/*DS05BB: P OBTAIN OLD CPUS COUNT */
         SPACE 2
DS05BB   DC    0H'0'
         L     R4,ASCBCPUS         NUMBER OF CPUS DISPATCHED TO WAIT
         SPACE 2
*/*DS05B1: P (CHNG,DS05B1,,) COMPARE AND SWAP # CPU'S IN WAIT */
         SPACE 2
DS05B1   DC    0H'0'
         LA    R3,DSI1(R4)         INCREMENT COUNT OF NUMBER CPUS.
         CS    R4,R3,ASCBCPUS      UPDATE COUNT
         BC    DSCC4,DS05B1        CHANGED.  GO TRY AGAIN
         SPACE 2
*/*DS05B2: P STORE WAIT ASCB ADDRESS INTO PSAANEW AND PSAAOLD */
         SPACE 2
DS05B2   DC    0H'0'
         ST    R8,PSAAOLD          SET PSAAOLD
         ST    R8,PSAANEW          SET PSAANEW
         SPACE 2
*/* P LOAD MASTER'S STOR */
         SPACE 2
         LCTL  R1,R1,PSASTOR       MASTER'S STOR.              @YM06905
         SPACE 2
*/* P STORE WAIT TCB ADDRESS INTO PSATNEW AND PSATOLD */
         SPACE 2
         ST    R5,PSATOLD          SET PSATOLD
         ST    R5,PSATNEW          SET PSATNEW
         SPACE 2
*/*DSLOCK14: S (,DS08B2) SETLOCK:RELEASE GLOBAL DISP LOCK */
         SPACE 2
DSLOCK14 DC    0H'0'
*        SETLOCK RELEASE,TYPE=DISP,RELATED=('ASCB QUEUE/GSPL/LSPL/PSAAN*
               EW',IEAVEDS0,(DSLOCK5,DSLOCK6,DSLOCK7,DSLOCK9,DSLOCK10,D*
               SLOCK12,DSLOCK13,DSLOCK22,DSLOCK3))
         L     RB,DSDISPLK         OBTAIN DISP LOCK ADDR       @YM03564
         SLR   RD,RD               ZERO A REGISTER             @YM03564
         ST    RD,DSL0(RB)         FREE LOCK VIA STORE ZEROS   @YM03564
         NI    PSAHLHI+DSL2,X'EF'  INDICATE DISPATCHER LOCK NOT HELD
DST066   DC    0H'0'               *** TEST LABEL ***
         SPACE
         B     DS08B2              GO TO RECURSE.              @ZA09433
         EJECT
***********************************************************************
*                                                                     *
*  DISPATCH THE WAIT TASK                                             *
*        THIS SECTION IS ENTERED TO DISPATCH THE WAIT TASK AFTER A    *
*        SECOND SCAN HAS BEEN MADE OF THE DISPATCHING QUEUES.         *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS05C: P MOVE WAIT PSW TO LOW CORE */
         SPACE 2
DS05C    DC    0H'0'
         MVC   PSAPSWSV(DSL8),DSWPSW   WAIT PSW TO LOW CORE.   @YM03464
         SPACE 2
*/* D (BAD,DS053,GOOD,) TEST FOR GOOD TOD CLOCK */
         SPACE 2
         L     R5,PSAPCCAV         ADDRESS OF PCCA.
         USING PCCA,R5             PCCA ADDRESSABILITY.
         TM    PCCATODE,PCCANUTD   TEST FOR BAD TOD CLOCK.
         BO    DS05C3              BAD. BYPASS TOD CLOCK SETTING.
         DROP  R5                  DROP PCCA ADDRESSABILITY.
         SPACE 2
*/* P STORE TOD CLOCK INTO THE LCCA */
         SPACE 2
         STCK  LCCADTOD            TIME OF DAY
         SPACE 2                                               @YM03564
*/* P INDICATE WORK DISPATCHED */
         SPACE 2                                               @YM03564
         OI    LCCADSF2,LCCADSRW   READY WORK DISPATCHED       @YM03564
         SPACE 2
*/*DS05C3: P GET ADDRESSABILITY TO CVT. */
         SPACE 2
DS05C3   DC    0H'0'
         L     R6,FLCCVT           CVT
         USING CVT,R6                   ADDRESSING.
         SPACE 2
*/* D (NO,DS05C5,YES,) IS TRACE ACTIVE? */
         SPACE 2
         CLI   CVTTRACE+DSL1,DSTRACEM   IS TRACE ACTIVE?
         BNE   DS05C5              NO. BYPASS.
         DROP  R6
         SPACE 2
*/* S TRDISP:TRACE ENTRY TO WAIT STATE */
         SPACE 2
         L     RA,DSTRDISP         TRACE ENTRY POINT.
         SLR   RF,RF               ZERO REGISTER 15 FOR TRACE  @YM03564
         SLR   R0,R0               ZERO REGISTER 0             @YM03564
         SLR   R1,R1               ZERO REGISTER 1             @YM03564
DST066A  DC    0H'0'               *** TEST LABEL ***
         BALR  RB,RA               GO TO TRACE
LOADPSA2 DC    0H'0'               ***** FOR TSO TEST *****
         SPACE 2
*/*DS05C5: S IEADISP3:MONITOR CALL TO GTF */
         SPACE 2
DS05C5   DC    0H'0'
         HOOK  EID=IEADISP3,TYPE=P GO TO GTF
         SPACE 2                                               @YM03564
*/* P PURGE THE NORMAL STACK */
         SPACE 2                                               @YM03564
         SETFRR F,WRKREGS=(R1,R2)                              @YM03564
         SPACE 2
*/* P CLEAR ALL REGISTERS TO ZERO */
         SPACE 2
         SLR   R0,R0               ZERO ALL REGISTERS          @YM03564
         SLR   R1,R1               ZERO REGISTER 1             @YM03564
         SLR   R2,R2               ZERO REGISTER 2             @YM03564
         SLR   R3,R3               ZERO REGISTER 3             @YM03564
         SLR   R4,R4               ZERO REGISTER 4             @YM03564
         SLR   R5,R5               ZERO REGISTER 5             @YM03564
         SLR   R6,R6               ZERO REGISTER 6             @YM03564
         SLR   R7,R7               ZERO REGISTER 7             @YM03564
         SLR   R8,R8               ZERO REGISTER 8             @YM03564
         SLR   R9,R9               ZERO REGISTER 9             @YM03564
         SLR   RA,RA               ZERO REGISTER 10            @YM03564
         SLR   RB,RB               ZERO REGISTER 11            @YM03564
         SLR   RC,RC               ZERO REGISTER 12            @YM03564
         SLR   RD,RD               ZERO REGISTER 13            @YM03564
         SLR   RE,RE               ZERO REGISTER 14            @YM03564
         SLR   RF,RF               ZERO REGISTER 15            @YM03564
         SPACE 2
*/* P RESET THE DISPATCHER INDICATOR */
         SPACE 2
         NI    PSASUP1,DSXFF-PSADISP    RESET DISPATCHER INDICATOR.
         SPACE 2
*/* P RESET FRR STACK POINTER TO NORMAL */
         SPACE 2
LWAITPSW DC    0H'0'
         MVC   PSACSTK(DSL4),PSANSTK    MAKE NORMAL STACK CURRENT.
         SPACE 2
***********************************************************************
*                                                                     *
*              LOAD PSW TO DISPATCH THE WAIT TASK                     *
*                                                                     *
***********************************************************************
         SPACE 2
*/*WAITPSW: R LOAD WAIT PSW */
         SPACE 2
WAITPSW  DC    0H'0'
         LPSW  PSAPSWSV            LOAD WAIT PSW.
         TITLE 'IEAVEDS0 - LSPL'
***********************************************************************
*                                                                     *
*  LOCAL SRB'S ON THE LOCAL SERVICE PRIORITY LIST                     *
*        R4 - HAS THE ADDRESS OF THE LOCAL SPL                        *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS061: S DSSAVE:SAVE STATUS OF PREVIOUS TASK */
         SPACE 2
DS061    DC    0H'0'
         BAL   RF,DSSAVE           SAVE STATUS OF PREVIOUS TASK
*   DSSAVE USES REGISTERS 0,1,2,3,14 AND 15.
         SPACE 2
*/*DSLOCK15: S SETLOCK:OBTAIN GLOBAL DISPATCHER LOCK */
         SPACE 2
DSLOCK15 DC    0H'0'
*        SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=('ASCB QUEUE/GSPL*
               /LSPL/PSAANEW',IEAVEDS0,(DSLOCK16,DSLOCK17))
         L     RD,AGSLDISP         OBTAIN DISPATCHER SPECIAL ENTRY PT
         BALR  RE,RD               LOCK MANAGER'S SPECIAL DISP ENTRY
         SPACE 2
*/*DS062: D (YES,DS06235,NO,) ARE ALL SRB'S STOPPED IN ASCB? */
         SPACE 2
DS062    DC    0H'0'
*        R4 HAS ADDRESS OF LOCAL SPL
         TM    ASCBFLG2,ASCBSNQS   ARE ALL SRB'S STOPPED?
         BO    DS06235             YES. GO TO RELEASE GLOBAL DISP LOCK.
         SPACE 2
*/* P SET UP CVT AND CSD ADDRESSING */
         SPACE 2
         L     R6,FLCCVT           CVT                         @YM03564
         USING CVT,R6                   ADDRESSING             @YM03564
         L     R5,CVTCSD           CSD ADDRESSING              @YM03564
         DROP  R6                                              @YM03564
         USING CSD,R5                                          @YM03564
         SPACE 2
*/*DS062A: P SET UP TO INDEX TO END OF LSPL */
         SPACE 2                                               @YM03564
DS062A   DC    0H'0'                                           @YM03564
         LA    R3,LSPLSIZE(R4)     END OF LSPL
         SPACE 2
*/*DS0621: P GET SRB ADDRESS */
         SPACE 2
DS0621   DC    0H'0'
         L     R2,DSL0(R4)         SRB ADDRESS
         SPACE 2
*/*DS0622: D (YES,DS0624,NO,DS0623) ANY SRB'S AT THIS SPL LEVEL? */
         SPACE 2
DS0622   DC    0H'0'
         LTR   R2,R2               ANY SRB'S
         BNZ   DS0624              YES.GO AROUND
         SPACE 2
*/*DS0623: P GET NEXT SPL ENTRY */
         SPACE 2
DS0623   DC    0H'0'
         LA    R4,DSL8(R4)         GET NEXT SPL ENTRY.
         SPACE 2
*/* D (NO,DS0621,YES,) END OF SPL? */
         SPACE 2
         CLR   R4,R3               END OF SPL?
         BNE   DS0621              NO. GO CHECK SRB'S.
         SPACE 2
*/*DS06235: S (,DS07) SETLOCK:(DSLOCK16) RELEASE GLOBAL DISPATCHER LOCK
*/**/
         SPACE 2
DS06235  DC    0H'0'
DSLOCK16 DC    0H'0'
*        SETLOCK RELEASE,TYPE=DISP,RELATED=('ASCB QUEUE/GSPL/LSPL/PSAAN*
               EW',IEAVEDS0,(DSLOCK5,DSLOCK6,DSLOCK7,DSLOCK9,DSLOCK10,D*
               SLOCK12,DSLOCK13,DSLOCK15,DSLOCK22,DSLOCK3))
         L     RB,DSDISPLK         OBTAIN DISP LOCK ADDR       @YM03564
         SLR   RD,RD               ZERO A REGISTER             @YM03564
         ST    RD,DSL0(RB)         FREE LOCK VIA STORE ZEROS   @YM03564
         NI    PSAHLHI+DSL2,X'EF'  INDICATE DISPATCHER LOCK NOT HELD
         B     DS07                GO TO CHECK THE LOCAL LOCK.
         SPACE 2
*/*DS0624: D (YES,DS0625,NO,) IS SRB NON QUIESC.? */
         SPACE 2
DS0624   DC    0H'0'
         CLI   SRBPRIOR,SRBPNONQ   IS SRB NON-QUIESCEABLE.
         BE    DS0625              YES. GO AROUND.
DST068   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P GET COUNT OF NUMBER OF STATUS STOP Q SRB'S */
         SPACE 2
         LH    R1,ASCBSSRB         COUNT OF NUMBER OF LOCAL STATUS STOP
*                                       QUIESCEABLE SRB'S.
         SPACE 2
*/* D (YES,DS0623,NO,DS0625) IS COUNT GTR THAN ZERO? */
         SPACE 2
         LTR   R1,R1               IS COUNT GTR THAN ZERO.
         BNZ   DS0623              YES. GO GET NEXT SPL LEVEL.
         SPACE 2
*/*DS0625: P GET SRB'S CPU AFFINITY MASK */
         SPACE 2
DS0625   DC    0H'0'               ENTER TO TEST AFFINITY.
         LH    RB,SRBCPAFF         SRB'S AFFINITY MASK
         SPACE 2
*/* D (NO,DS0626,NO,) IS CPU AFFIN SPEC? */
         SPACE 2
         LTR   RB,RB               AFFINITY SPECIFIED?
         BZ    DS0626              NO. BYPASS AFFINITY CHECK.
DST070   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P GET CPU'S AFFINITY MASK FROM PCCA */
         SPACE 2
         L     RC,PSAPCCAV         PCCA
         USING PCCA,RC                  ADDRESSING
         LH    RC,PCCACAFM         CPU'S AFFINITY MASK.
         DROP  RC
         SPACE 2
*/* D (NO,DS0628,YES,DS0626) CAN SRB RUN ON THIS CPU? */
         SPACE 2
         NR    RC,RB               CAN SRB RUN ON THIS CPU?
         BC    DSCC8,DS0628        NO. GO TO TEST FOR ANY CPU
         SPACE 2
*/*DS0626: D (YES,DS0627,NO,) IS THIS THE TOP SRB? */
         SPACE 2
DS0626   DC    0H'0'               ENTER TO DEQUEUE AN SRB.
         C     R2,DSL0(R4)         IS THIS THE TOP SRB
         BE    DS0627              YES. GO AROUND DEQUEUE FROM MIDDLE
DST071   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P GET ADDRESS OF TOP SRB */
         SPACE 2
*  ENTER FOR NOT TOP SRB ON SPL QUEUE
         L     RE,DSL0(R4)         TOP SRB
         SPACE 2
*/*DS06261: P GET NEXT SRB */
         SPACE 2
DS06261  DC    0H'0'
         L     RF,SRBFLNK-SRBSECT(RE)  NEXT SRB.
         SPACE 2
*/* D (YES,DS06262,NO,) IS IT THE CURRENT SRB? */
         SPACE 2
         CLR   RF,R2               IS IT CURRENT?
         BE    DS06262             YES. RE HAS ADDRESS OF PREVIOUS
DST072   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,DS06261) SET UP TO SCAN FOR NEXT SRB */
         SPACE 2
         LR    RE,RF               NO. SET UP TO SCAN FOR NEXT.
         B     DS06261             GO TO GET NEXT SRB
         SPACE 2
*/*DS06262: P CHAIN NEXT SRB TO PREVIOUS */
         SPACE 2
DS06262  DC    0H'0'
         L     RC,SRBFLNK          NEXT SRB FROM CURRENT
         ST    RC,SRBFLNK-SRBSECT(RE)  CHAIN UP TO PREVIOUS
         SPACE 2
*/* D (NO,DS06263,YES,) WAS CURRENT SRB LAST ONE ON QUEUE? */
         SPACE 2
         LTR   RC,RC               WAS CURRENT SRB LAST ONE  ON QUEUE.
         BNZ   DS06263             NO. DONE. GO TO CLEAR  SRBFLNK.
DST073   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,DS063) DEQUEUED LAST SRB. STORE PREVIOUS INTO SPL LAST FIELD */
         SPACE 2
         ST    RE,DSL4(R4)         LAST SRB. STORE PREVIOUS INTO SPL.
         B     DS063               GO TO LOCAL SRB DISPATCHER.
         SPACE 2
*/*DS06263: P (,DS063) CLEAR SRBFLNK TO PREVENT ACCESS TO OTHER SRB'S
*/**/
         SPACE 2
DS06263  DC    0H'0'               ENTER FOR CLEAR OF SRBFLNK
         SR    R3,R3
         ST    R3,SRBFLNK          CLEAR SRBFLNK TO PREVENT ACCESS TO
*                                       OTHER SRB'S.
         B     DS063               GO TO LOCAL SRB DISPATCHER.
         SPACE
*  ENTER FOR TOP SRB ON SPL QUEUE.
         SPACE 2
*/*DS0627: P CHAIN NEXT SRB TO SPL */
         SPACE 2
DS0627   DC    0H'0'
         L     RC,SRBFLNK          FORWARD CHAIN POINTER.
         ST    RC,DSL0(R4)         RECHAIN TO SPL.
         SPACE 2
*/* D (NO,DS06263,YES,) IS THIS THE ONLY SRB ON SPL? */
         SPACE 2
         LTR   RC,RC               IS THIS THE ONLY SRB ON THE LSPL?
         BNZ   DS06263             NO. DON'T CLEAR PTR TO LAST IN LSPL.
DST074   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,DS063) CLEAR SPL PTR TO LAST SRB */
         SPACE 2
         ST    RC,DSL4(R4)         CLEAR PTR TO LAST SRB.
*                                  SRBFLNK FIELD IS ALREADY ZERO.
         B     DS063               GO TO LOCAL SRB DISPATCHER.
         SPACE
*  ENTER FOR FURTHER CPU AFFINITY TESTS.
         SPACE 2
*/*DS0628: D (NO,DS0629,YES,) CAN SRB RUN ON ANY OTHER CPU? */
         SPACE 2
DS0628   DC    0H'0'
         LH    RC,CSDCPUAL         SYSTEM-WIDE CPU AFFINITY MASK.
         NR    RC,RB               CAN SRB RUN ON ANY OTHER CPU?
         BC    DSCC8,DS0629        NO. GO TO ABEND SRB/TASK.
DST075   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P (,DS0622) GET NEXT SRB */
         SPACE 2
         L     R2,SRBFLNK          YES. GET NEXT SRB.
         B     DS0622              GO TO TEST DISPATCHABILITY.
         SPACE 2
*  ENTER FOR ABEND OF SRB/TASK WHOSE AFFINITY SPECIFICATION DOES NOT
*        MATCH ANY CPU CURRENTLY AVAILABLE TO RUN SRB'S.
         SPACE 2
*/*DS0629: D (NO,DS0626,YES,) IS THIS A SUSPENDED SRB? */
         SPACE 2
DS0629   DC    0H'0'
         L     RC,SRBRMTR          RMTR ADDRESS IF A SUSPENDED SRB
         L     RB,DSRMTR           GET COMMMON SUSPEND'S RMTR ADR
         CR    RB,RC               TEST FOR SUSPENDED SRB
         BNE   DS0626              NO. GO TO DISPATCH AND SET UP FOR
*                                       ABEND IN GLOBAL SRB DISPATCHER
         SPACE 2
*/* P GET ADDRESSABILITY TO CVT */
         SPACE 2
         L     RC,FLCCVT           CVT ADDRESS
         USING CVT,RC              CVT ADDRESSABILITY.
         SPACE 2
*/* P SET SRB PSW TO POINT TO SVC ABEND INSTRUCTION IN CVT */
         SPACE 2
         LA    RB,CVTQABST         ADDRESS OF SVC D INSTRUCTION.
         ST    RB,SSRBCPSW+DSL4    SET PSW TO ADDRESS OF SVC D.
         DROP  RC                  DROP CVT ADDRESSABILITY.
         SPACE 2
*/* P SET SRB'S REG 1 TO 072 ABEND CODE. */                    @ZA25275
         SPACE 2
         L     RB,DSABAFFN         072 ABEND CODE.
         ST    RB,SSRBGPRS+DSL4    STORE INTO REG 1 SLOT IN SSRBSAVE.
         SPACE 2                                               @ZA25275
*/* P (,DSO626) REMOVE SRB'S AFFN TO OFFLINE CPU FOR ABEND */  @ZA25275
         SPACE 2                                               @ZA25275
         SLR   RB,RB               ZERO A REGISTER.            @ZA25275
         STH   RB,SRBCPAFF         ZERO SRB'S INVALID AFFN.    @ZA25275
         B     DS0626              GO TO DISPATCH AND ABEND SRB.
         TITLE 'IEAVEDS0 - LOCAL (SUSPENDED) SRB'
***********************************************************************
*                                                                     *
*  LOCAL (SUSPENDED) SRB DISPATCHER                                   *
*        R2 - CONTAINS SRB ADDRESS                                    *
*        R6 - CONTAINS CSD ADDRESS                                    *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS063: P SET SRB MODE INDICATOR (LCCASRBM) */
         SPACE 2
DS063    DC    0H'0'               ENTER
         OI    LCCADSF2,LCCASRBM+LCCADSRW SET SRB MODE INDICATOR.
         ST    R2,LCCASPLJ             JOURNAL LOCAL SPL ENTRY
         SPACE 2
*/* D (YES,,NO,DS0331) IS THIS A SUSPENDED SRB? */
         SPACE 2
         L     R5,SRBRMTR          IF THIS SRB HAS AN SUSPENDED RMTR
         L     R1,DSRMTR               (SUSPENDED RMTR ADDR)
         CR    R1,R5                    ADDR IT IS A SUSPENDED SRB. IF
*                                       NOT, IT IS AN INITIAL DISPATCH.
         BNE   DS0331              GO TO GLOBAL SRB DISPATCH.
         SPACE 2
*  ENTER FOR DISPATCH OF A SUSPENDED SRB.
         SPACE 2
*/* P RESTORE THE FLOATING POINT REGISTERS */
         SPACE 2
         LD    R0,SSRBFPR0         *    RESTORE
         LD    R2,SSRBFPR2         *         FLOATING
         LD    R4,SSRBFPR4         *              POINT
         LD    R6,SSRBFPR6         *                   REGISTERS
         SPACE 2
*/* P RESTORE SRB'S FRR STACK */
         SPACE 2
         LA    R4,SSRBFRRS             ADDRESS OF SAVED STACK
         L     R5,FRRSCURR-FRRS(R4)    ADDR OF CURRENT ENTRY   @YM03564
         L     RD,FRRSELEN-FRRS(R4)    LENGTH OF AN ENTRY      @YM03564
         AR    R5,RD                   ADDRESS OF END OF STACK @YM03564
         L     RC,PSANSTK              ADDRESS OF NORMAL STACK
         SR    R5,RC                   LENGTH OF SAVED STACK   @YM03564
         LA    RD,DSL0(R5)             DUPLICATE LENGTH        @YM03564
         MVCL  RC,R4                   MOVE THE SAVED STACK
         SPACE 2
*/* P MOVE CPU AFFIN MASK AND PURGE ASID/TCB TO LCCA */
         SPACE 2
         MVC   LCCASRBF(DSL8),SRBFLC   MOVE SRB AFFINITY, PURGE ASID
*                                       AND PURGE TCB ADDR TO LCCA.
         SPACE 2
*/* P MOVE PSW TO LOW CORE */
         SPACE 2
         MVC   PSAPSWSV,SSRBCPSW   MOVE PSW FOR DISPATCH.
*/* D (NO,DS0631,YES,) DOES SRB HOLD LOCAL LOCK? */
         SPACE 2
         TM    SSRBFLG1,SSRBLLH    IS THE LOCAL LOCK HELD BY THIS SRB.
         BZ    DS0631              NO. GO AROUND LOCK RESTORE.
         SPACE 2
*/* P STORE CPUID INTO THE LOCAL LOCK */
         SPACE 2
         LH    R4,PSACPULA         CPU ID.
         ST    R4,ASCBLOCK         STORE INTO LOCAL LOCKWORD.
         SPACE 2
*/* P SET  LOCKS HELD INDICATOR TO LOCAL LOCK */
         SPACE 2
         OI    PSAHLHI+DSO3,DSLLHI     TURN ON LOCAL LK HELD INDICATOR
         SPACE 2
*/* D (NO,DS0631,YES,) IS THE CMS LOCK ALSO HELD? */
         SPACE 2
         TM    ASCBFLG1,ASCBCMSH   IS THE CMS LOCK ALSO HELD?
         BZ    DS0631              NO. GO AROUND CMS LOCK PROCESSING
         SPACE 2
*/* P SET LOCK HELD INDICATOR FOR CMS LOCK */
         SPACE 2
         OI    PSAHLHI+DSO3,DSCMSHI    TURN ON CMS LOCK HELD INDICATOR
         SPACE 2
*/* P TURN OFF CMS LOCK HELD BIT IN ASCB */
         SPACE 2
         NI    ASCBFLG1,DSXFF-ASCBCMSH  TURN OFF CMS LOCK HELD BIT.
         SPACE 2
*/*DS0631: P RESET DISPATCHER INDICATOR */
         SPACE 2
DS0631   DC    0H'0'
         NI    PSASUP1,DSXFF-PSADISP    RESET DISPATCHER INDICATOR.
         SPACE 2
*/* P ZERO THE SPL JOURNAL WORD */
         SPACE 2
         SR    R1,R1                   ZERO A REGISTER
         ST    R1,LCCASPLJ             ZERO THE JOURNAL SPL WORD
         SPACE 2
*/* P RESET FRR STACK TO NORMAL */
         SPACE 2
LSSRBPSW DC    0H'0'
         MVC   PSACSTK(DSL4),PSANSTK    RESET FRR STACK TO NORMAL.
         SPACE 2
*/*DSLOCK17: S SETLOCK:RELEASE GLOBAL DISPATCHER LOCK */
         SPACE 2
DSLOCK17 DC    0H'0'
*        SETLOCK RELEASE,TYPE=DISP,RELATED=('ASCB QUEUE/GSPL/LSPL/PSAAN*
               EW',IEAVEDS0,(DSLOCK5,DSLOCK6,DSLOCK7,DSLOCK9,DSLOCK10,D*
               SLOCK12,DSLOCK13,DSLOCK15,DSLOCK22,DSLOCK3)),DISABLED
         L     RB,DSDISPLK         OBTAIN DISP LOCK ADDR       @YM03564
         SLR   RD,RD               ZERO A REGISTER             @YM03564
         ST    RD,DSL0(RB)         FREE LOCK VIA STORE ZEROS   @YM03564
         NI    PSAHLHI+DSL2,X'EF'  INDICATE DISPATCHER LOCK NOT HELD
         SPACE 2
*/* P MOVE GENERAL PURPOSE REGISTERS TO CPU SAVE AREA */
         SPACE 2
         L     R5,LCCACPUS         CPU SAVE AREA VECTOR TABLE ADDRESS.
         USING WSAC,R5
         L     R5,WSACEDS0         DISPATCHER'S SAVE AREA ADDRESS.
         DROP  R5
         MVC   DSL0(DSLSAV,R5),SSRBGPRS SAVE SRB'S REGISTERS.
         SPACE 2
         SPACE 2
*/*DS0632: D (NO,DS0633,YES,) WAS SSRB GETMAINED? */
         SPACE 2
DS0632   DC    0H'0'
         TM    SSRBFLG1,SSRBMAIN   WAS SSRB GOTTEN FROM MAIN STORE?
         BZ    DS0633              NO. GO TO FREECELL.
         SPACE 2
*/*DSLOCK23: S SETLOCK:OBTAIN SALLOC LOCK */
         SPACE 2
DSLOCK23 DC    0H'0'
         SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,RELATED=('MAIN STORAGE'*
               ,IEAVEDS0,(DSLOCK24))
         SPACE 2
*/* S FREEMAIN:FREEMAIN SSRB */
         SPACE 2
         LA    R0,SSRBLEN          SSRB LENGTH
         LR    R1,R2               SSRB ADDRESS
         SPACE
         FREEMAIN RC,SP=245,LV=(0),A=(1),BRANCH=(YES,GLOBAL)
*  REGISTERS 0-4 AND 14-15 HAVE BEEN DESTROYED.
         SPACE 2
*/*DSLOCK24: S (,DS0634) SETLOCK:RELEASE SALLOC LOCK */
         SPACE 2
DSLOCK24 DC    0H'0'
         SETLOCK RELEASE,TYPE=SALLOC,RELATED=('MAIN STORAGE',IEAVEDS0,(*
               DSLOCK23)),DISABLED                             @YM03564
         B     DS0634              GO TO STORE TOD CLOCK.
         SPACE 2
*/*DS0633: S FREECELL:FREE THE SRB AND SAVE AREA */
         SPACE 2
DS0633   DC    0H'0'
         L     R0,DSCELLID         SRB CELLPOOL ID.
         LR    R1,R2               SRB ADDRESS
         SPACE
         FREECELL CPID=(0),CELL=(1),SAVE=NO,BRANCH=YES
         SPACE
*  REGISTERS 0-4 AND 14-15 HAVE BEEN DESTROYED.
         SPACE
         SPACE 2
*/*DS0634: P STORE TOD CLOCK FOR JOB STEP TIMING */
         SPACE 2
DS0634   DC    0H'0'
         STCK  LCCADTOD            STORE TOD CLOCK FOR JOB STEP TIMING.
         SPACE 2
*/* D (NO,DS0635,YES,) IS TRACE ACTIVE? */
         SPACE 2
         L     RE,FLCCVT           CVT ADDRESS
         USING CVT,RE
         CLI   CVTTRACE+DSL1,DSTRACEM   IS TRACE ACTIVE?
         BNE   DS0635              NO. BYPASS.
         DROP  RE
         SPACE 2
*/* S TRSRB2:TRACE SRB ACTIVITY */
         SPACE 2
         LM    R0,R1,DSL0(R5)      RESTORE 0 AND 1 FOR TRACE.
         L     RA,DSTRSRB2         TRACE ENTRY POINT ADDRESS.
DST083A  DC    0H'0'               *** TEST LABEL ***
         BALR  RB,RA               GO TO TRACE.
LOADPSA3 DC    0H'0'               ***** FOR TSO TEST *****
         SPACE 2
*/*DS0635: S IEADISP1:GTF INTERFACE */
         SPACE 2
*  GTF INTERFACE
DS0635   DC    0H'0'
         SR    R0,R0               INDICATE SUSPENDED SRB TO GTF.
         HOOK  EID=IEADISP1,TYPE=P
         SPACE 2
*/* P RESTORE THE GENERAL PURPOSE REGISTERS */
         SPACE 2
         LM    R0,RF,DSL0(R5)      RESTORE SRB'S GENERAL PURPOSE REGS.
         SPACE 4
***********************************************************************
*                                                                     *
*              LOAD PSW TO DISPATCH A SUSPENDED SRB                   *
*                                                                     *
***********************************************************************
         SPACE 2
*/*SSRBPSW: R LOAD SRB'S PSW */
         SPACE 2
SSRBPSW  DC    0H'0'
         LPSW  PSAPSWSV            DISPATCH THE SUSPENDED SRB.
         TITLE 'IEAVEDS0 - INTERRUPTED LOCAL SUPERVISOR'
***********************************************************************
*                                                                     *
*  INTERRUPTED LOCAL SUPERVISOR                                       *
*        THIS SEQUENCE IS ENTERED TO RESTORE THE STATUS OF AN         *
*        INTERRUPTED LOCAL SUPERVISOR ROUTINE WHICH HAD BEEN PRE-     *
*        EMPTED FOR HIGHER PRIORITY WORK.  STATUS IS RESTORED FROM    *
*        THE INTERRUPT HANDLER SAVE AREA.                             *
*                                                                     *
*    ON ENTRY:                                                        *
*        THE LOCAL LOCK IS HELD BY THIS CPU (CPU ID WAS STORED INTO   *
*        THE LOCAL LOCKWORD PRIOR TO ENTRY TO THIS SEQUENCE).         *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS071: S DSSAVE:SAVE STATUS OF PREVIOUS TASK */
         SPACE 2
DS071    DC    0H'0'
         SPACE
         BAL   RF,DSSAVE           SAVE STATUS OF PREVIOUS TASK.
*   DSSAVE USES REGISTERS 0,1,2,3,14 AND 15.
         SPACE 2
*/* P GET ADDRESSABILITY TO IHSA */
         SPACE 2
         L     RC,ASCBASXB         ASXB
         USING ASXB,RC                  ADDRESSABILITY.
         L     RC,ASXBIHSA         IHSA ADDRESS
         DROP  RC                  DROP ASXB ADDRESSABILITY
         USING IHSA,RC             IHSA ADDRESSABILITY.
         SPACE 2
*/* P GET ADDRESSABILITY TO TCB */
         SPACE 2
         L     R5,IHSAOTCB         TCB ADDRESS
         SPACE 2
*/* D (NO,DS074,YES,) IS THERE A TCB? */
         SPACE 2
         LTR   R5,R5               IS THERE A TCB?
         BZ    DS074               NO. GO AROUND.
         SPACE 2
*/* P ESTABLISH ADDRESSABILITY TO PCCA */
         SPACE 2
         L     R6,PSAPCCAV         PCCA ADDRESS FROM PSA.
         USING PCCA,R6             PCCA ADDRESSABILITY.
         SPACE 2
*/* P GET CPU AFFINITY INDICATOR FROM THE TCB */
         SPACE 2
         USING TCB,R5              TCB ADDRESSABILITY
         LH    R4,TCBAFFN          CPU AFFINITY MASK
         SPACE 2
*/* D (NO,DS0724,YES,) IS CPU AFFINITY SPECIFIED? */
         SPACE 2
         C     R4,DSCPUAFF         IS CPU AFFINITY SPECIFIED?  @YM04737
         BE    DS0724              NO. CONTINUE.               @YM04737
         LTR   R4,R4               IS CPU AFFINITY SPECIFIED?
         BZ    DS0724              NO. CONTINUE.
         SPACE 2
*/* P GET CPU'S AFFINITY MASK */
         SPACE 2
         LH    RE,PCCACAFM         CPU'S AFFINITY MASK
         SPACE 2
*/* D (YES,DS0724,NO,) DOES AFFINITY MATCH THIS CPU? */
         SPACE 2
         NR    RE,R4               TEST FOR MATCHING AFFINITY.
         BNZ   DS0724              AFFINITY TO THIS CPU. CONTINUE.
         SPACE 2
*/* P GET SYSTEM WIDE CPU ALIVES MASK */
         SPACE 2
         L     R3,FLCCVT               LOCATE THE CVT
         USING CVT,R3
         L     R1,CVTCSD               CSD MASK
         LH    R2,CSDCPUAL-CSD(R1)     CPU ALIVES MASK
         SPACE 2
*/* D (YES,DS0723,NO,) CAN TASK RUN ON ANY CPU? */
         SPACE 2
         NR    R2,R4                   CAN TASK RUN ON ANY CPU?
         BNZ   DS0723                  YES, BUT NOT THIS ONE,
*                                      RESTORE STATUS AND LOOK FOR
*                                      READY WORK
         SPACE 2
*/* P REMOVE AFFINITY IN ORDER TO DISP ABEND */
         SPACE 2
         STH   R2,TCBAFFN              REMOVE AFFINITY AND ABEND
         SPACE 2
*/* P SET R1 FOR 072 ABEND AND PSW TO SVC D */
         SPACE 2
         L     R1,DSABAFFN             072 ABEND CODE
         ST    R1,IHSAGPRS+DSL4        STORE INTO REG 1 SLOT IN IHSA
         LA    R2,CVTQABST             ADDRESS OF SVC D INSTR
         DROP  R3
         ST    R2,IHSACPSW+DSL4        SET PSW TO POINT TO SVC D
         SPACE 2
*/* P (,DS0724) CONTINUE WITH TASK DISPATCH */
         SPACE 2
         B     DS0724                  CONTINUE WITH DISPATCH
         SPACE 2
*/*DS0723: P RESTORE INTERRUPT CODE TO LOCAL LOCK */
         SPACE 2
DS0723   DC    0H'0'
         LH    R1,PSACPULA         LOGICAL CPU ADDRESS.
         L     R3,DSINTPID         INTERRUPT ID.
         CS    R1,R3,ASCBLOCK      RESTORE INTERRUPT ID.
         SPACE 2
*/*DSLOCK22: S SETLOCK:OBTAIN GLOBAL DISPATCHER LOCK */
         SPACE 2
DSLOCK22 DC    0H'0'
*        SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=('ASCB QUEUE/GSPL*
               /LSPL/PSAANEW',IEAVEDS0,(DSLOCK14,DSLOCK16,DSLOCK17,DSLO*
               CK18,DSLOCK19))
         L     RD,AGSLDISP         OBTAIN DISPATCHER SPECIAL ENTRY PT
         BALR  RE,RD               LOCK MANAGER'S SPECIAL DISP ENTRY
         SPACE 2
*/* P SET UP ADDRESSABILITY TO CVT AND CSD */
         SPACE 2
         L     R6,FLCCVT           CVT ADDRESS
         L     R5,CVTCSD-CVT(R6)   CSD ADDRESS
         SPACE 2
*/* P (,DS054) GET ADDRESS OF NEXT ASCB */
         SPACE 2
         L     R8,ASCBFWDP         GET ADDRESS OF NEXT ASCB
         B     DS054               GO TO MEMORY DISPATCHER.
         SPACE 2
*/*DS0724: D (NO,DS07247,YES,) DOES TCB HAVE A TQE? */
         SPACE 2
DS0724   DC    0H'0'
         L     R2,TCBTME           TQE ADDRESS FROM THE TCB.
         LTR   R2,R2               IS THE A TQE?
         BNH   DS07247             NO. CONTINUE.
         SPACE 2
*/* D (NO,DS07243,YES,) IS THE CPU TIMER ON THIS CPU BAD? */
         SPACE 2
         TM    PCCAINTE,PCCANUIN   IS THE CPU TIMER BAD?
         BZ    DS07243             NO. GO TO SET CLOCK.
         SPACE 2
*/* D (YES,DS07241,NO,) MUST TASK RUN ONLY ON THIS CPU? */
         SPACE 2
         L     R4,FLCCVT           CVT ADDRESS.
         USING CVT,R4              CVT ADDRESSABILITY.
         CLC   PCCACAFM(DSL2),TCBAFFN TEST FOR MATCHING AFFINITY MASKS
         BE    DS07241             YES. TCB MUST RUN ON THIS CPU. GO
*                                       TO ABEND TASK SINCE CLOCK IS
*                                       BAD ON THIS CPU.
         SPACE 2
*/* D (YES,DS07247,NO,) ARE THERE ANY CPU TIMERS WORKING? */
         SPACE 2
         L     R3,CVTCSD           CSD ADDRESS.
         USING CSD,R3              CSD ADDRESSABILITY.
         L     R1,CSDGDINT         COUNT OF GOOD CPU TIMERS.
         LTR   R1,R1               ARE THERE ANY?
         BNZ   DS07247             YES. BYPASS CLOCK SETTING THIS
*                                       DISPATCH.
         DROP  R3                  DROP CSD ADDRESSABILITY.
         DROP  R6                  DROP PCCA ADDRESSABILITY.
         SPACE 2
*/*DS07241: P SET REGISTER ONE TO 22F ABEND CODE. */
         SPACE 2
DS07241  DC    0H'0'
         L     R1,DSABTIME         22F ABEND CODE.
         ST    R1,IHSAGPRS+DSL4    R1 IN IHSA. LOADED AT DISPATCH.
         SPACE 2
*/* P (,DS07247) SET PSW TO POINT TO ABEND INSTRUCTION IN CVT */
         SPACE 2
         LA    R1,CVTQABST         ADDRESS OF SVC D INSTRUCTION.
         ST    R1,IHSACPSW+DSL4    SET PSW TO POINT TO SVC D.
         B     DS07247             CONTINUE WITH DISPATCH.
         DROP  R4                  DROP CVT ADDRESSABILITY.
         SPACE 2
*/*DS07243: P RESET THE CPU INTERVAL TIMER. */
         SPACE 2
DS07243  DC    0H'0'
         SPT   IHSACPUT            RESET CPU INTERVAL TIMER.
         SPACE 2
*/*DS07247: P STORE CPUID INTO THE TCB */
         SPACE 2
DS07247  DC    0H'0'
         LH    R6,PSACPULA         CPU ID.
         STH   R6,TCBCCPVI         STORE INTO TCB.
         SPACE 2
*/*DS074: P RESTORE PSATNEW AND PSATOLD */
         SPACE 2
DS074    DC    0H'0'
         ST    R5,PSATNEW          RESTORE TCBNEW.
         ST    R5,PSATOLD          RESTORE TCBOLD.
DS0725   DC    0H'0'
         SPACE 2
*/* P RESTORE FLOATING POINT REGISTERS */
         SPACE 2
         LD    R0,IHSAFPR0         *     RESTORE
         LD    R2,IHSAFPR2         *          FLOATING
         LD    R4,IHSAFPR4         *               POINT
         LD    R6,IHSAFPR6         *                    REGISTERS
         SPACE 2
*/* P RESTORE LOCAL SUPERVISOR'S FRR STACK */
         SPACE 2
         LA    R2,IHSAFRRS             ADDRESS OF SAVED STACK
         L     R3,FRRSCURR-FRRS(R2)    ADDRESS OF CURRENT ENTRY
         L     R4,FRRSELEN-FRRS(R2)    LENGTH OF AN ENTRY      @YM03564
         AR    R3,R4               ADDRESS OF END OF STACK     @YM03564
         L     RA,PSANSTK          ADDRESS OF NORMAL STK       @YM03564
         SR    R3,RA               LENGTH OF SAVED STACK       @YM03564
         LA    RB,DSL0(R3)         DUPLICATE LENGTH            @YM03564
         MVCL  RA,R2               MOVED FOR SAVED NRM STACK   @YM03564
         SPACE 2                                               @YM03564
*/* D (NO,DS073,YES,) IS THE CMS LOCK ALSO HELD? */
         SPACE 2
         TM    ASCBFLG1,ASCBCMSH   IS THE CMS LOCK ALSO HELD?
         BZ    DS073               NO. GO AROUND.
DST085   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P STORE CPU LOCKS HELD IND INTO HIGHEST LOCK HELD IND */
         SPACE 2
*  ENTER FOR CMS LOCK HELD
         OI    PSAHLHI+DSO3,DSCMSHI  TURN ON CMS & LOCAL LK
*                                      HELD INDICATORS
         SPACE 2
*/* P (,DS075) TURN OFF CMS LOCK HELD FLAG */
         SPACE 2
         NI    ASCBFLG1,DSXFF-ASCBCMSH  TURN OFF CMS LOCK HELD FLAG.
         SPACE
         SPACE 2
*/*DS073: P INCREMENT NO. OF CPUS IN THE ADDRESS SPACE */
         SPACE 2
DS073    DC    0H'0'
         L     R1,ASCBCPUS             OBTAIN COUNT OF ACTIVE CPUS
DS073LP  DC    0H'0'
         LR    R2,R1                   DUPLICATE THE COUNT
         LA    R2,DSI1(R2)             INCREMENT THE COUNT BY 1
         CS    R1,R2,ASCBCPUS          UPDATE THE COUNT VIA C&S
         BNZ   DS073LP                 COUNT HAS CHANGED, REPEAT
         SPACE 2
*/* P SET CPU LOCKS HELD IND INTO HIGH LOCK HELD IND */
         SPACE 2
         OI    PSAHLHI+DSO3,DSLLHI    TURN ON LOCAL LK HELD IND
         SPACE 2
*/*DS075: P (,DS082) STORE TOD CLOCK FOR JOB STEP TIMING */
         SPACE 2
DS075    DC    0H'0'
         STCK  LCCADTOD            STORE TOD CLOCK FOR JOB STEP TIMING.
         B     DS082               GO TO LOCAL SUPERVISOR DISPATCHER.
         DROP  RC                  DROP IHSA ADDRESSABILITY
         DROP  R5                  DROP TCB ADDRESSABILITY
         TITLE 'IEAVEDS0 - LOCAL SUPERVISOR DISPATCHER'
***********************************************************************
*                                                                     *
*  LOCAL SUPERVISOR DISPATCHER                                        *
*        THIS SEQUENCE IS ENTERED TO DISPATCH A PREEMPTED LOCAL       *
*        SUPERVISOR WHOSE STATUS HAS BEEN RESTORED IN THE SECTION     *
*        ENTITLED 'INTERRUPTED LOCAL SUPERVISOR' AND TO RE-           *
*        DISPATCH A LOCAL SUPERVISOR ROUTINE WHICH WAS INTERRUPTED    *
*        BUT NOT PREEMPTED.                                           *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS081: P GET ADDRESSABILITY TO THE IHSA */
         SPACE 2
DS081    DC    0H'0'
         L     RC,ASCBASXB         *
         USING ASXB,RC             *     INTERRUPT HANDLER SAVE AREA
         L     RC,ASXBIHSA         *          ADDRESSABILITY.
         DROP  RC                  *
         USING IHSA,RC             *
         SPACE 2
*/*DS082: P MOVE PSW TO LOW CORE */
         SPACE 2
DS082    DC    0H'0'
         MVC   PSAPSWSV(DSL8),IHSACPSW  MOVE PSW TO LOW CORE.
         SPACE 2
*/* D (NO,DS083,YES,) IS TRACE ACTIVE? */
         SPACE 2
         L     R5,FLCCVT           CVT ADDRESS
         USING CVT,R5              CVT ADDRESSING
         CLI   CVTTRACE+DSL1,DSTRACEM   IS TRACE ACTIVE?
         BNE   DS083               NO. BYPASS.
         DROP  R5                  DROP CVT ADDRESSING
         SPACE 2
*/* S TRDISP:TRACE LOCAL SUPERVISOR ACTIVITY */
         SPACE 2
         L     RA,DSTRDISP         TRACE ADDRESS
         LM    R0,R1,IHSAGPRS      LOAD 0 AND 1 FOR TRACE
         L     RF,IHSAGPRS+DSL60   LOAD 15 FOR TRACE
         BALR  RB,RA               GO TO TRACE
*/*DS083: S IEADISP2:GTF INTERFACE */
         SPACE 2
DS083    DC    0H'0'
         HOOK  EID=IEADISP2,TYPE=P      GO TO GTF
         SPACE 2
*/* P SET READY WORK DISPATCHED INDICATOR */
         SPACE 2
         OI    LCCADSF2,LCCADSRW       TURN ON READY WORK IND.
         SPACE 2
*/* P RESTORE THE GENERAL PURPOSE REGISTERS */
         SPACE 2
         LM    R0,RF,IHSAGPRS      RESTORE GENERAL PURPOSE REGISTERS.
         SPACE 2
*/* P RESET THE DISPATCHER INDICATOR */
         SPACE 2
         NI    PSASUP1,DSXFF-PSADISP    RESET DISPATCHER INDICATOR.
         SPACE 2
*/* P RESET CURRENT STACK POINTER TO NORMAL */
         SPACE 2
LLSPVPSW DC    0H'0'
         MVC   PSACSTK(DSL4),PSANSTK    RESTORE NORMAL STACK ADDRESS
         SPACE 2
***********************************************************************
*                                                                     *
*          LOAD PSW TO DISPATCH A LOCAL SUPERVISOR ROUTINE            *
*                                                                     *
***********************************************************************
         SPACE 2
*/*LSUPVPSW: R LOAD SUPERVISOR PSW */
         SPACE 2
LSUPVPSW DC    0H'0'
         LPSW  PSAPSWSV            DISPATCH THE LOCAL SUPERVISOR.
         SPACE 4
         DROP  RC                  DROP IHSA REGISTER
         TITLE 'IEAVEDS0 - TASK DISPATCHER'
***********************************************************************
*                                                                     *
*   TASK DISPATCHER                                                   *
*        THIS SEQUENCE IS ENTERED TO SEARCH FOR A READY TASK ON THE   *
*        TCB DISPATCHING QUEUE WITHIN THE ADDRESS SPACE.  THE TASK'S  *
*        STATUS IS RESTORED FROM THE TCB/RB AND THE TASK IS RE-       *
*        DISPATCHED.                                                  *
*                                                                     *
*        THE LOCAL LOCK IS HELD ON ENTRY TO THIS SECTION.             *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DS09: D (NO,DS091,YES,) ANY ASYNCH EXITS? */
         SPACE 2
DS09     DC    0H'0'
         OI    LCCADSF2,LCCADSPL       INDICATE DISP OBTAINED LOCAL LK
         TM    ASCBFLG1,ASCBS3S    TEST FOR ASYNCHRONOUS EXITS
         BZ    DS091               NO.  CONTINUE.
         SPACE 2
*/* D (YES,DS091,NO,) ARE QUIESCE. SRB'S STOPPED? */
         SPACE 2
         SR    R1,R1               CLEAR R1
         CH    R1,ASCBSSRB         TEST FOR STOP QUIESCEABLE SRBS
         BNE   DS091               YES. BYPASS STAGE 3.
         SPACE 2
***********************************************************************
*                                                                     *
*  EXIT TO STAGE III EXIT EFFECTOR.                                   *
*                                                                     *
*  INTERFACE                                                          *
*        R7 - LCCA ADDRESS                                            *
*        R8 - ASCB ADDRESS                                            *
*        R9 - DISPATCHER BASE                                         *
*        R14 - RETURN ADDRESS                                         *
*        R15 - STAGE 3 EP                                             *
*        ALL OTHERS UNDEFINED AND MAY BE DESTROYED IN STAGE 3.        *
*                                                                     *
***********************************************************************
         SPACE
         SPACE 2
*/* S IEA0EF03:STAGE 3 EXIT EFFECTOR */
         SPACE 2
         L     RF,DS0EF03          STAGE 3 EXIT EFFECTOR ENTRY POINT
         BALR  RE,RF               GO TO STAGE 3 EE
         SPACE
*
*        REGISTERS 7, 8 AND 9 ARE RETURNED BY STAGE 3 EE
*
         SPACE
*  FALL THROUGH TO SCAN FOR READY TCB
         SPACE 2
*
*  BEGIN SCAN FOR TOP READY TASK.
*
         SPACE 2
*/*DS091: P GET ADDRESS OF TOP TCB ON ASCB DISP QUEUE */
         SPACE 2
DS091    DC    0H'0'
         L     R6,ASCBASXB         ADDRESS OF THE ASXB.
         USING ASXB,R6             ASXB ADDRESSABILITY.
         L     R6,ASXBFTCB         ADDRESS OF FIRST TCB.
         DROP  R6                  DROP ASXB ADDRESSABILITY.
         SPACE 2
*/* D (NO,DS0921,YES,) TEST FOR END OF TCB QUEUE */
         SPACE 2
         LTR   R6,R6               TEST FOR END OF TCB QUEUE.
         BNZ   DS0921              NO. CONTINUE.
         SPACE
*  EXIT FROM TASK DISPATCHER TO ADDRESS SPACE DISPATCHER
         SPACE 2
*/* D (NO,,YES,DSLOCK25) SUS Q EMPTY REL LK NO STLK */         @Z40FPXJ
*/*DS092: S SETLOCK:(DSLOCK2) RELEASE THE LOCAL LOCK */
         SPACE 2
DS092    DC    0H'0'
DSLOCK2  DC    0H'0'
         SLR   R2,R2               ZERO REG FOR CS             @Z40FPXJ
         SLR   R3,R3               ZERO REG FOR CS             @Z40FPXJ
         L     R4,ASCBLOCK         GET LOCKWORK FOR CS         @Z40FPXJ
         SLR   R5,R5               ZERO REG FOR CS             @Z40FPXJ
         CDS   R4,R2,ASCBLOCK      FREE LOCK IF Q EMPTY        @Z40FPXJ
         BZ    DSLOCK25            Q WAS EMPTY LOCK FREE       @Z40FPXJ
*        SETLOCK RELEASE,TYPE=LOCAL,RELATED=('TCB QUEUE',IEAVEDS0,(DSLO*
               CK1))               RELEASE THE LOCAL LOCK.
         L     RD,DSLLREL          LOCK MANAGER'S BASE REGISTER
         L     RB,DSLLRELD         DISPATCHER SPECIAL ENTRY    @YM03564
         BALR  RE,RB               ENTER L.M. AT SPECIAL ENTRY FOR DISP
DSLOCK25 DS    0H                                              @Z40FPXJ
         NI    PSAHLHI+3,DSXFF-DSLLHI                          @Z40FPXJ
         NI    LCCADSF2,DSXFF-LCCADSPL DISP RELEASED LOCAL LK
DST092   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/*DSLOCK25: S DSSAVE:SAVE STATUS OF PREEMPTED TASK */
         SPACE 2
         BAL   RF,DSSAVE           SAVE STATUS OF PREEMPTED TASK
*   DSSAVE USES REGISTERS 0,1,2,3,14 AND 15.
         SPACE 2
*/*DSLOCK3: S SETLOCK:OBTAIN GLOBAL DISPATCHER LOCK */
         SPACE 2
DSLOCK3  DC    0H'0'
*        SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=('ASCB QUEUE/GSPL*
               /LSPL/PSAANEW',IEAVEDS0,(DSLOCK14,DSLOCK16,DSLOCK17,DSLO*
               CK18,DSLOCK19))
         L     RD,AGSLDISP         OBTAIN DISPATCHER SPECIAL ENTRY PT
         BALR  RE,RD               LOCK MANAGER'S SPECIAL DISP ENTRY
DST093   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* D (YES,DS052,NO,) WAS MEMORY SWITCH REQUIRED? */
         SPACE 2
         L     R5,PSAANEW          TEST FOR MEMORY SWITCH      @YM02483
         C     R5,PSAAOLD          MEMORY SW IF NE             @YM02483
         BNE   DS052               START AT TOP OF QUEUE       @YM02483
         SPACE 2
*/* P SET UP ADDRESSABILITY TO THE CVT AND CSD */
         SPACE 2
         L     R6,FLCCVT           CVT ADDRESS
         USING CVT,R6              CVT ADDRESSABILITY
         L     R5,CVTCSD           CSD ADDRESS
         DROP  R6                  DROP CVT ADDRESS REGISTER
         SPACE 2
*/* P (,DS054) GET NEXT ASCB ADDRESS */
         SPACE 2
         L     R8,ASCBFWDP         GET NEXT ASCB.
         B     DS054               GO TO TEST IT'S DISPATCHABILITY IN
*                                       THE ADDRESS SPACE DISPATCHER.
         SPACE 2
*/*DS0921: P GET ADDRESS OF TOP RB */
         SPACE 2
DS0921   DC    0H'0'               ENTER FOR RB WAITING TEST
         USING TCB,R6              TCB ADDRESSABILITY.
         L     R5,TCBRBP           LOAD ADDRESS OF TOP RB.
         USING RBSECT,R5           RB ADDRESSABILITY.
         SPACE 2
*/* D (NO,DS0922,YES,) IS RB WAITING? */
         SPACE 2
         CLI   RBWCF,DSX0          IS THE RB WAITING.
         BE    DS0922              NO. CONTINUE.
DST094   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P GET ADDRESS OF NEXT TCB */
         SPACE 2
         L     R6,TCBTCB           RB IS WAITING. GET NEXT TCB.
         SPACE 2
*/* D (YES,DS092,NO,DS0921) IS THIS THE END OF TCB QUEUE? */
         SPACE 2
         LTR   R6,R6               IS THIS THE END OF TCB QUEUE?
         BNZ   DS0921              NO. GO TO TEST WAIT COUNT.
         B     DS092               END OF QUEUE. GO TO MEMORY DISP.
         SPACE 2
*/*DS0922: D (NO,DS093,YES,) IS TCB NON DISPTACH.? */
         SPACE 2
DS0922   DC    0H'0'               ENTER FOR DISPATCHABILITY TESTS.
         LH    RD,TCBFLGS4        TEST TO SEE IF ANY PRIMARY NON-
*                                       DISPATCHABILITY BITS ARE SET.
         LTR   RD,RD               ANY BITS ON?                @YM03564
         BZ    DS093               NO. DISPATCHABLE. CONTINUE. @YM03564
DST095   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P GET ADDRESS OF NEXT TCB */
         SPACE 2
         L     R6,TCBTCB           NOT DISPATCHABLE.  GET NEXT TCB.
         SPACE 2
*/* D (YES,DS092,NO,DS0921) IS THIS THE END OF TCB QUEUE? */
         SPACE 2
         LTR   R6,R6               IS THIS THE END OF TCB QUEUE?
         BNZ   DS0921              NO. GO TO TEST WAIT COUNT.
         B     DS092               END OF QUEUE. GO TO MEMORY DISP.
         SPACE 2
*/* N CS WILL SET ACTIVE ON AND UPDATE CPU ID */               @Z40FPXJ
*/*DS093: D (NO,DS0932,YES,) IS TCB ACTIVE? */
         SPACE 2
DS093    DC    0H'0'               ENTER FOR TCB ACTIVE TEST.
         L     R1,TCBXSCT          TCB ACT & CPU ADDR WORD     @Z40FPXJ
         LR    R2,R1               SECOND COPY OF WORD         @Z40FPXJ
         IC    R1,PSACPULA+1       GET CPU LOGICAL ADDR THIS   @Z40FPXJ
*                                  INST ASSUMES THAT THE CPU   @Z40FPXJ
*                                  ADDR WILL REMAIN 1 BYTE     @Z40FPXJ
*                                  IF IT CHANGES THIS INST     @Z40FPXJ
*                                  WILL HAVE TO CHANGE ALSO    @Z40FPXJ
         O     R1,ACTONMSK         TURN ON TCB ACTIVE BIT      @Z40FPXJ
         N     R2,ACTOFMSK         TURN OFF TCB ACTIVE BIT     @Z40FPXJ
         CS    R2,R1,TCBXSCT       CS ACT BIT ON IF NOT        @Z40FPXJ
*                                  ALREADY ON                  @Z40FPXJ
         BZ    DS0932              TCB WAS NOT ACTIVE. BIT     @Z40FPXJ
*                                  HAS NOW BEEN TURNED ON      @Z40FPXJ
DST096   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* D (NO,DS0931,YES,) IS IT A REDISPATCH? */
         SPACE 2
         C     R6,PSATOLD          COMPARE CHOSEN TCB AGAINST OLD.
         BNE   DS0931              NOT A RE-DISPATCH.          @YM07640
DST097   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* D (NO,DS094,YES,) IO OR EXT INT CAUSED ENTRY? */           @Z40FPXJ
         SPACE 2
         L     R1,LCCAITOD         IS THIS RE-DISP A RESULT OF AN
*                                  IO OR EXT INTERRUPT. R1 NE ZERO
*                                  IF SO, MUST JST             @YM07640
         LTR   R1,R1               IS IT ZERO                  @YM07640
         BZ    DS094               YES, DON'T JST              @Z40FPXJ
         SPACE 2
*/* S           DSJST: CALCULATE JST FOR TCB */                @Z40FPXJ
*/* P SET TOD CLOCK FOR JOB STEP TIMING */                     @Z40FPXJ
*/*DS094: P (,DS095) MOVE RB OLD PSW TO LOW CORE */            @Z40FPXJ
         SPACE 2
         BAL   RE,DSJST            CALCULATE JST               @YM07640
         STCK  LCCADTOD            SET TOD CLOCK FOR JST       @Z40FPXJ
DS094    DS    0H                                              @Z40FPXJ
         MVC   PSAPSWSV(DSL8),RBOPSW MOVE RB OLD PSW TO L.C.   @Z40FPXJ
         B     DS095               CONTINUE WITH REDISPATCH    @YM07640
         SPACE 2
*/*DS0931: P GET ADDRESS OF NEXT TCB */
         SPACE 2
DS0931   DC    0H'0'
         L     R6,TCBTCB           ACTIVE ON ANOTHER CPU. GET ANOTHER.
         SPACE 2
*/* D (YES,DS092,NO,DS0921) IS THIS THE END OF TCB QUEUE? */
         SPACE 2
         LTR   R6,R6               IS THIS THE END OF TCB QUEUE?
         BNZ   DS0921              NO. GO TO TEST WAIT COUNT.
         B     DS092               END OF QUEUE. GO TO MEMORY DISP.
         SPACE 2
*/*DS0932: P GET TCB'S AFFINITY MASK */
         SPACE 2
DS0932   DC    0H'0'
         LH    RC,TCBAFFN          TCB'S AFFINITY MASK.
         SPACE 2
*/* D (NO,DS09325,YES,) IS TCB AFFINITY SPECIFIED? */
         SPACE 2
         C     RC,DSCPUAFF         IS TCB AFFINITY SPECIFIED?  @YM04737
         BE    DS09325             NO. CONTINUE.               @YM04737
         LTR   RC,RC               IS TCB AFFINITY SPECIFIED?
         BZ    DS09325             NO. CONTINUE.
         SPACE 2
*/* P GET CPU'S AFFINTIY MASK */
         SPACE 2
         L     RE,PSAPCCAV         PCCA ADDRESS
         USING PCCA,RE             PCCA ADDRESSABILITY
         LH    RE,PCCACAFM         CPU'S AFFINITY MASK
         DROP  RE                  DROP PCCA ADDRESSABILITY
         SPACE 2
*/* D (YES,DS09325,NO,) DOES AFFINITY MATCH THIS CPU? */
         SPACE 2
         NR    RE,RC               TEST FOR MATCHING AFFINITY  @YM04737
         BNZ   DS09325             AFFINITY MATCH. CONTINUE WITH DISP
         SPACE 2
*/* P GET SYSTEM WIDE CPU ALIVES MASK */
         SPACE 2
         L     R3,FLCCVT               LOCATE THE CVT
         USING CVT,R3
         L     R1,CVTCSD               CSD MASK
         LH    R2,CSDCPUAL-CSD(R1)     CPU ALIVES MASK
         SPACE 2
*/* D (YES,DS092,NO,) CAN TASK RUN ON ANY CPU? */
         SPACE 2
         NR    R2,RC                   CAN TASK RUN ON ANY CPU?
         BZ    DS09322                 YES, BUT NOT THIS ONE,  @Z40FPXJ
*                                      RELEASE LOCAL LK AND LOOK FOR
*                                      READY WORK
         NI    TCBXSCT1-TCB(R6),DSXFF-TCBACTIV ACTIVE=OFF      @Z40FPXJ
         B     DS092                   LOOK FOR READY WORK     @Z40FPXJ
         SPACE 2
*/* P REMOVE AFFINITY IN ORDER TO DISP ABEND */
         SPACE 2
DS09322  DS    0H                                              @Z40FPXJ
         STH   R2,TCBAFFN              REMOVE AFFINITY AND ABEND
         SPACE 2
*/* P SET R1 FOR 072 ABEND AND PSW TO SVC D */
         SPACE 2
         L     R1,DSABAFFN             22F ABEND CODE
         ST    R1,TCBGRS1              STORE INTO REG 1 SLOT IN IHSA
         LA    R2,CVTQABST             ADDRESS OF SVC D INSTR
         DROP  R3
         ST    R2,RBOPSW+DSL4          SET PSW TO POINT TO SVC D
         SPACE 2
*/* P (,DS09325) CONTINUE WITH TASK DISPATCH */
         SPACE 2
         EJECT
*
*  A DISPATCHABLE TASK HAS BEEN CHOSEN - BEGIN TO RESTORE IT'S STATUS
*
         SPACE 2
*/*DS09325: D (NO,DS0933,YES,) PREEMPT ANOTHER TASK IN SAME MEMORY? */
         SPACE 2
DS09325  DC    0H'0'
         SR    R1,R1                                           @Z40FPXJ
         C     R1,PSATOLD          ARE WE PREEMPTING LWR PRTY  @Z40FPXJ
*                                       TASK WITHIN THIS ADDRESS SPACE.
         BE    DS0933              NO. CONTINUE.
DST097A  DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* S DSSAV1:SAVE TASK'S STATUS */
         SPACE 2
*  SAVE STATUS OF PREEMPTED TASK IN THE SAME ADDRESS SPACE
         BAL   RF,DSSAV1           GO TO SPECIAL SAVE STATUS ENTRY.
*   DSSAV1 USES REGISTERS 0,1,2,3,14 AND 15.
DS0933   DC    0H'0'
         SPACE 2
IEAVDSTC DS    0H                  ENTRY FOR TCTL              @Z40FPXJ
******** THIS ENTRY POINT IS FOR TCTL. TCTL HAS SELECTED       @Z40FPXJ
******** A TCB TO BE DISPATCHED AND HAS SET UP ALL REGS        @Z40FPXJ
******** FOR THE DISPATCHER. THE TCB HAS PASSED ALL TESTS      @Z40FPXJ
******** FOR DISPATCHABILITY. THIS IS ASSURED BY TCTL          @Z40FPXJ
         SPACE 2
*/*DS0933: P RESTORE THE FLOATING POINT REGISTERS */
         SPACE 2
*  RESTORE FLOATING POINT REGISTERS
         L     R3,DSPREFIX         TCB PREFIX DECREMENT VALUE.
         AR    R3,R6               TCB PREFIX ADDRESS.
         USING TCBFIX,R3
         LD    R0,TCBFRS0          LOAD
         LD    R2,TCBFRS2               FLOATING
         LD    R4,TCBFRS4                    POINT
         LD    R6,TCBFRS6                         REGISTERS.
         DROP  R3
         SPACE 2
*/* D (NO,DS0938,YES,) IS THERE A TQE? */
         SPACE 2
         L     R4,TCBTME           ADDRESS OF TQE
         LTR   R4,R4               TEST FOR POSITIVE ADDRESS.
         BNH   DS0938              NO. CONTINUE.
         SPACE 2
*/* D (YES,DS0937,NO,) IS THE CPU TIMER GOOD? */
         SPACE 2
         L     R3,PSAPCCAV         PCCA ADDRESS FROM THE PSA.
         USING PCCA,R3             PCCA ADDRESSABILITY.
         TM    PCCAINTE,PCCANUIN   IS TIMER OK?
         BZ    DS0937              YES. GO TO SET TIMER.
         SPACE 2
*/* D (YES,DS0936,NO,) MUST TASK RUN ONLY ON THIS CPU? */
         SPACE 2
         L     R4,FLCCVT           CVT ADDRESS.
         USING CVT,R4              CVT ADDRESSABILITY.
         CLC   PCCACAFM(DSL2),TCBAFFN TEST FOR MATCHING AFFINITY MASKS
         BE    DS0936              YES. TCB HAS SPECIFIED AFFINITY TO
*                                       THIS CPU ONLY. GO TO ABEND TASK
*                                       SINCE THIS CPU'S TIMER IS BAD.
         DROP  R3                  DROP PCCA ADDRESSABILITY.
         SPACE 2
*/* D (YES,DS0938,NO,) ARE THERE ANY GOOD CPU TIMERS? */
         SPACE 2
         L     R3,CVTCSD           CSD ADDRESS.
         USING CSD,R3              CSD ADDRESSABILITY.
         L     R1,CSDGDINT         COUNT OF GOOD CPU TIMERS.
         LTR   R1,R1               ARE THERE ANY GOOD TIMERS?
         BNZ   DS0938              YES. BYPASS SETTING OF TIMER ON
*                                       THIS CPU THIS DISPATCH.
         DROP  R3                  DROP CSD ADDRESSABILITY.
         SPACE 2
*/*DS0936: P SET REG 1 TO 22F ABEND CODE */
         SPACE 2
DS0936   DC    0H'0'
         L     R1,DSABTIME         22F ABEND CODE.
         ST    R1,TCBGRS1          STORE INTO TCB - TO BE LOADED AT
*                                       DISPATCH.
         SPACE 2
*/* P (,DS0938) SET RBOPSW TO POINT TO SVC ABEND INSTRUCTION IN CVT */
         SPACE 2
         LA    R1,CVTQABST         ADDRESS OF SVC D INSTR IN CVT.
         ST    R1,RBOPSW+DSL4      STORE INTO RBOPSW.
         B     DS0938              CONTINUE DISPATCH.
         DROP  R4                  DROP CVT ADDRESSABILITY.
         SPACE 2
*/*DS0937: P SET CPU INTERVAL TIMER */
         SPACE 2
DS0937   DC    0H'0'
*  STORE TQE TIME REMAINING INTO CPU INTERVAL TIMER.
         USING TQE,R4              TQE ADDRESSABILITY.
         SPT   TQEVAL              SET CPU INTERVAL TIMER.
         DROP  R4
         SPACE 2
         SPACE 2
DS0938   DC    0H'0'
         SPACE 2
*/*DS0938: P SET PSATNEW AND PSATOLD TO THIS TCB'S ADDRESS */
         SPACE 2
         ST    R6,PSATNEW          SET PSATNEW AND PSATOLD TO THE
         ST    R6,PSATOLD               ADDRESS OF THIS TCB.
         SPACE 2
*/* P STORE TOD CLOCK FOR JOB STEP TIMING */
         SPACE 2
         STCK  LCCADTOD            SET TOD CLOCK FOR JOB STEP TIMING.
*  FALL THROUGH TO NEXT SECTION TO CONTINUE DISPATCH OF TASK.
*
         SPACE 2
*/* P MOVE RB OPSW TO LOW CORE */
         SPACE 2
         MVC   PSAPSWSV(DSL8),RBOPSW    MOVE RB OLD PSW TO LOW CORE
         SPACE 2
*/*DS0935: P (CHNG,DS0935,OK,) CS TO INCR NUMBER OF CPUS */    @Z40FPXJ
         SPACE 2                                               @ZA20174
         L     R1,ASCBCPUS         NUMB CPUS IN ADDRESS SPACE  @Z40FPXJ
DS0935   DS    0H                                              @Z40FPXJ
         LA    R3,DSI1(R1)         INCREMENT FOR THIS CPU.     @Z40FPXJ
         CS    R1,R3,ASCBCPUS      REPLACE UPDATED COUNT       @Z40FPXJ
         BC    DSCC4,DS0935        CHANGED. GO TRY AGAIN.      @Z40FPXJ
         SPACE 2                                               @ZA20174
*/* D (NO,DS095,YES,) WAS ENTRY FROM TCTL ? */                 @ZA18126
         SPACE 2                                               @ZA20174
         SETLOCK TEST,TYPE=LOCAL,BRANCH=(HELD,DS095)           @ZA18126
         SPACE 1                                               @ZA18126
*        DISPATCHER HAS BEEN ENTERED FROM IEAVETCL. BECAUSE    @ZA18126
*        OF AN INTERSECT BETWEEN TCTL AND STATUS THIS          @ZA18126
*        EVENT SEQUENCE MUST REMAIN IN ORDER:                  @ZA18126
*            1. INCREMENT ASCBCPUS                             @ZA18126
*            2. CLEAR CDAL OF TCTL BIT                         @ZA18126
         SPACE 2                                               @ZA18126
*/* P (,DS0955) TURN OFF CDALTCTL BIT */                       @ZA18126
         SPACE 2                                               @ZA20174
         L     R2,PSACDAL          THIS CPU'S CDAL ADDRESS     @ZA18126
         USING CDAL,R2             CDAL ADDRESSABILITY         @ZA18126
         NI    CDALDSP4,DSXFF-CDALTCTL TURN OFF TCTL BIT       @ZA18126
         B     DS0955              LOCAL LOCK NOT HELD - SKIP  @ZA18126
         DROP  R2                                              @ZA18126
         SPACE 2                                               @ZA18126
*/*DS095: D (NO,DSLOCK4,YES,) LCL LOCK SUSPEND Q EMPTY?*/      @ZA20174
*/* P (,DSLOCK45) RELEASE LOCAL LOCK NO SETLOCK*/              @ZA20174
         SPACE 2                                               @ZA20174
DS095    DS    0H                                              @Z40FPXJ
         SLR   R2,R2               ZERO REG FOR CS             @Z40FPXJ
         SLR   R3,R3               ZERO REG FOR CS             @Z40FPXJ
         L     R4,ASCBLOCK         GET LOCKWORD FOR CS         @Z40FPXJ
         SLR   R5,R5               ZERO REG FOR CS             @Z40FPXJ
         CDS   R4,R2,ASCBLOCK      FREE LK IF Q IS EMPTY       @Z40FPXJ
         BZ    DSLOCK45            Q EMPTY LOCK IS FREE        @Z40FPXJ
         SPACE 2                                               @ZA20174
*/*DSLOCK4: S SETLOCK:RELEASE LOCAL LOCK */
         SPACE 2
DSLOCK4  DS    0H                                              @Z40FPXJ
*        SETLOCK RELEASE,TYPE=LOCAL,RELATED=('TCB QUEUE',IEAVEDS0,(DSLO*
               CK1))
         L     RD,DSLLREL          LOCK MANAGER'S BASE REGISTER
         L     RB,DSLLRELD         DISPATCHER SPECIAL ENTRY    @YM03564
         BALR  RE,RB               ENTER L.M. AT SPECIAL ENTRY FOR DISP
DSLOCK45 DS    0H                                              @Z40FPXJ
         NI    PSAHLHI+3,DSXFF-DSLLHI                          @Z40FPXJ
         NI    LCCADSF2,DSXFF-LCCADSPL CLEAR DISP OBTAINED LOCAL LK
DST100   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/*DS0955: P CHECK FOR TRACE ACTIVE */                         @Z40FPXJ
*/*DSLOCK45: D (NO,DS096,YES,) IS TRACE ACTIVE? */
         SPACE 2
DS0955   DS    0H                                              @Z40FPXJ
         L     RB,FLCCVT           CVT ADDRESS.
         USING CVT,RB
         CLI   CVTTRACE+DSL1,DSTRACEM   IS TRACE ACTIVE?
         BNE   DS096               NO. BYPASS.
DST100A  DC    0H'0'               *** TEST LABEL ***
         DROP  RB
         SPACE 2
*/* S TRDISP:TRACE TCB ACTIVITY */
         SPACE 2
         L     RA,DSTRDISP         TCB TRACE ENTRY POINT.
         LM    R0,R1,TCBGRS0       RESET 0 AND 1 FOR TRACE
         L     RF,TCBGRS15         RESET 15 FOR TRACE
DST100B  DC    0H'0'               *** TEST LABEL ***
         BALR  RB,RA               GO TO TRACE OR BR11 RETURN.
DST101   DC    0H'0'               *** TEST LABEL ***
LOADPSA5 DC    0H'0'               ***** FOR TSO TEST *****
         SPACE 2
*/*DS096: S IEADISP3:GTF INTERFACE */
         SPACE 2
DS096    DC    0H'0'
         HOOK  EID=IEADISP3,TYPE=P   GO TO GTF THROUGH THE MC INSTR.
         SPACE 2
*/* P SET READY WORK DISPATCHED INDICATOR */
         SPACE 2
         OI    LCCADSF2,LCCADSRW       TURN ON READY WORK IND.
         SPACE 2
*/* P PURGE OLD NORMAL FRR STACK */
         SPACE 2
         SETFRR F,WRKREGS=(R1,R2)  PURGE THE NORMAL STACK
         SPACE 2
*/* P RELOAD THE GENERAL PURPOSE REGISTERS */
         SPACE 2
         LM    R0,RF,TCBGRS        RELOAD GENERAL PURPOSE REGISTERS
         DROP  R6                  DROP TCB BASE REGISTER.
         DROP  R5                  DROP RB ADDRESSABILITY.
         SPACE 2
*/* P RESET DISPATCHER INDICATOR */
         SPACE 2
         NI    PSASUP1,DSXFF-PSADISP-PSATCTL RESET DISP & TCTL @Z40FPXJ
         SPACE 2
*/* P RESET NORMAL STACK TO CURRENT */
         SPACE 2
LTASKPSW DC    0H'0'
         MVC   PSACSTK(DSL4),PSANSTK    RESET NORMAL STACK TO CURRENT.
         SPACE 2
***********************************************************************
*                                                                     *
*              LOAD PSW TO DISPATCH A TASK                            *
*                                                                     *
***********************************************************************
         SPACE 2
*/*TASKPSW: R LOAD TASK'S PSW */
         SPACE 2
TASKPSW  DC    0H'0'
DSTSKPSW DC    0H'0'
         LPSW  PSAPSWSV            DISPATCH THE TASK
         TITLE 'IEAVEDS0 - SAVE STATUS'
***********************************************************************
*                                                                     *
*    SAVE STATUS SUBROUTINE                                           *
*                                                                     *
*        THIS SUBROUTINE IS ENTERED TO SAVE THE STATUS OF A TASK      *
*        OR LOCAL SUPERVISOR ROUTINE WHICH IS BEING PREEMPTED FOR     *
*        HIGHER PRIORITY WORK.  STATUS SAVING OF THE SYSTEM WAIT      *
*        TASK IS ALSO DONE IN THIS SUBROUTINE.                        *
*                                                                     *
*        INPUT:                                                       *
*              R7 - LCCA ADDRESS                                      *
*              R8 - ASCB ADDRESS                                      *
*              R9 - BASE                                              *
*              R15 - RETURN ADDRESS                                   *
*        WORK:                                                        *
*              R0 - R3 - WORK REGS                                    *
*              R14 - USED AS RETURN REGISTER FROM JOB STEP TIMING     *
*              NO OTHER REGISTERS ARE USED IN THIS SEQUENCE.          *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DSSAVE: D (YES,DSSAV2,NO,) IS LOCAL LOCK HELD? */
         SPACE 2
DSSAVE   DC    0H'0'
         SR    R1,R1
         SETLOCK TEST,TYPE=LOCAL,BRANCH=(HELD,DSSAV2)
         SPACE 2
*/* D (NO,DST106A,YES,) IS THERE A TCB? */
         SPACE 2
         C     R1,PSATOLD          TEST FOR A TCB
DST101A  DC    0H'0'               *** TEST LABEL ***
         BCR   DSCC8,RF            NONE. RETURN.
         SPACE
DST102   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* D (YES,DSSAV3,NO,) IS IT THE WAIT TASK? */
         SPACE 2
         C     R8,DSWASCB          TEST FOR THE WAIT TASK.
         BE    DSSAV3              YES. GO TO SPECIAL WAIT PROCESSING
DST103   DC    0H'0'               *** TEST LABEL ***
         EJECT
*
*  SAVE STATUS FOR A PREEMPTED TASK
*
         SPACE 2
*/*DSSAV1: P SAVE STATUS FOR A PREEMPTED TASK */
         SPACE 2
DSSAV1   DC    0H'0'
         SPACE
         L     R3,PSATOLD          TCB ADDRESS.
         USING TCB,R3              TCB ADDRESSING.
         SPACE 2
*/* P SAVE FLOATING POINT REGISTERS */
         SPACE 2
*  SAVE FLOATING POINT REGS
         L     R2,DSPREFIX         PREFIX VALUE
         AR    R2,R3               TCB PREFIX ADDRESSING.
         USING TCBFIX,R2           TCB PREFIX ADDRESSING.
         STD   R0,TCBFRS0          *  SAVE
         STD   R2,TCBFRS2          *    FLOATING
         STD   R4,TCBFRS4          *      POINT
         STD   R6,TCBFRS6          *        REGISTERS
         SPACE
         DROP  R2                  DROP TCB PREFIX REG.
         SPACE 2
*/* D (NO,DSSAV10,YES,) TEST FOR TQE */
         SPACE 2
         L     R2,TCBTME           TQE ADDRESS
         LTR   R2,R2               TEST FOR POSITIVE ADDRESS
         BNH   DSSAV10             NO. CONTINUE.
         SPACE 2
*/* D (NO,DSSAV10,YES,) IS CPU TIMER WORKING? */
         SPACE 2
         L     R1,PSAPCCAV         PCCA ADDRESS.
         USING PCCA,R1             PCCA ADDRESSABILITY.
         TM    PCCAINTE,PCCANUIN   IS THIS CPU'S TIMER OK?
         BO    DSSAV10             NO. BYPASS SAVING OF TIMER.
         DROP  R1                  DROP PCCA ADDRESSABILITY.
         SPACE 2
*/* P SAVE CPU INTERVAL TIMER VALUE INTO TQE */
         SPACE 2
         USING TQE,R2              R2 HAS TQE ADDRESS
         STPT  TQEVAL              SAVE TIMER VALUE
         DROP  R2
         SPACE 2                                               @YM03564
*/* P RESET TIMER TO A HIGH VALUE */
         SPACE 2                                               @YM03564
         SPT   DSHITIME            SET CPU TIMER TO HIGH VALUE @YM03564
         SPACE 2
*/*DSSAV10: S DSJST:CALCULATE JOB STEP TIME */
         SPACE 2
DSSAV10  DC    0H'0'
         BAL   RE,DSJST            GO TO CALCULATE JOB STEP TIME.
*   DSJST USES REGISTERS 0,1,2,3 AND 14.
         SPACE 2
*/*DSSAV11: P (CHNG,DSSAV11,OK,) C & S TO CLEAR TCB ACTIVE BIT AND
*/*CPU ID*/                                                    @ZA20174
         SPACE 2
DST106   DC    0H'0'               *** TEST LABEL ***
         L     R3,PSATOLD              REEST TCB ADDR
         L     R0,TCBXSCT          GET TCB INTERSECT WORD      @ZA20174
DSSAV11  DC    0H'0'                                           @ZA20174
         LR    R2,R0               COPY VALUE FOR SWAP OP INIT @ZA20174
         N     R2,ACTCPVOF         CLEAR ACTIV/CCPVI IN SWAP OP@ZA20174
         CS    R0,R2,TCBXSCT       CLEAR ACTIV/CCPVI IN TCB    @ZA20174
         BC    DSCC4,DSSAV11       UPDATE FAILED, RETRY        @ZA20174
         DROP  R3                  DROP TCB BASE REGISTER.
         SPACE 2
*/*DSSAV12: P (CHNG,DSSAV12,OK,) C & S TO DECREMENT COUNT OF CPU'S IN
*/*ASCB */
         SPACE 2
         L     R3,ASCBCPUS         *
DSSAV12  DC    0H'0'               *
         LR    R2,R3               *  DECREMENT COUNT OF THE
         BCTR  R2,DSI0             *    NUMBER OF CPU'S ACTIVE
         CS    R3,R2,ASCBCPUS      *    IN THIS ADDRESS SPACE.
         BC    DSCC4,DSSAV12       *
         SPACE 2
*/*DSSAV13: P ZERO PSATNEW AND PSATOLD */                      @ZA20174
         SPACE 2
DSSAV13  DC    0H'0'                                           @ZA20174
         ST    R1,PSATNEW          ZERO OUT PSATNEW
         ST    R1,PSATOLD          ZERO OUT PSATOLD
         SPACE 2
*/*DST106A: R RETURN */
DST106A  DC    0H'0'               *** TEST LABEL ***
         BR    RF                  RETURN
         EJECT
*
*  SAVE LOCAL SUPERVISOR INFORMATION
*        R1 IS  ZERO ON ENTRY.
*
DSSAV2   DC    0H'0'
         SPACE 2
*/*DSSAV2: P GET IHSA ADDRESS */
         SPACE 2
         L     R3,ASCBASXB         ASXB ADDRESS
         USING ASXB,R3
         L     R3,ASXBIHSA         IHSA ADDRESS
         DROP  R3
         USING IHSA,R3
         SPACE 2
*/* P STORE FLOATING POINT REGISTERS */
         SPACE 2
         STD   R0,IHSAFPR0         *    STORE
         STD   R2,IHSAFPR2         *         FLOATING
         STD   R4,IHSAFPR4         *              POINT
         STD   R6,IHSAFPR6         *                   REGISTERS.
         SPACE 2
*/* P SAVE PSATNEW AND PSATOLD */
         SPACE 2
         L     R2,PSATNEW          *    STORE
         L     RE,PSATOLD          *         PSATNEW
         ST    R2,IHSANTCB         *              AND
         ST    RE,IHSAOTCB         *                   PSATOLD
         SPACE 2
*/* D (NO,DSSAV22,YES,) IS THERE A TCB? */
         SPACE 2
         LTR   RE,RE               TEST FOR TCB ADDRESS.
         BZ    DSSAV22             NO. BYPASS TIMER TESTS.
         SPACE 2
*/* D (NO,DSSAV22,YES,) IS THERE A TQE FOR THIS TCB? */
         SPACE 2
         USING TCB,RE              TCB ADDRESSABILITY.
         L     R2,TCBTME           TQE ADDRESS FROM TCB.
         LTR   R2,R2               IS THERE A TQE?
         BNH   DSSAV22             NO. BYPASS TIMER SETTING.
         DROP  RE                  DROP TCB ADDRESSABILITY.
         SPACE 2
*/* D (NO,DSSAV22,YES,) IS THIS CPU'S TIMER OK? */
         SPACE 2
         L     R1,PSAPCCAV         PCCA ADDRESS.
         USING PCCA,R1             PCCA ADDRESSABILITY.
         TM    PCCAINTE,PCCANUIN   IS THE CPU TIMER OK?
         BO    DSSAV22             NO. BYPASS TIMER SETTINGS.
         SPACE 2
*/* P SAVE CPU INTERVAL TIMER INTO IHSA */
         SPACE 2
         STPT  IHSACPUT            SAVE CPU INTERVAL TIMER VALUE
         SPACE 2                                               @YM03564
*/* P SET CPU TIMER TO HIGH VALUE */
         SPACE 2                                               @YM03564
         SPT   DSHITIME            SET CPU INTERVAL TIMER TO X'7F---F'
         SPACE 2
*/*DSSAV22: P SAVE LOCAL SUPERVISOR'S FRR STACK */
         SPACE 2
DSSAV22  DC    0H'0'
         LR    R1,RF                   SAVE REG 15             @YM03564
         LA    R2,IHSAFRRS             LOCATE FRR SAVE AREA ADDR
         L     RE,PSANSTK          NORMAL STACK LOCATION       @YM03564
         L     R3,FRRSCURR-FRRS(RE) CURRENT ENTRY              @YM03564
         L     RF,FRRSELEN-FRRS(RE) LENGTH OF CURRENT ENTRY    @YM03564
         AR    R3,RF               ADDRESS OF LAST BYTE        @YM03564
         SR    R3,RE               LENGTH OF STACK TO SAVE     @YM03564
         LA    RF,DSL0(R3)         DUPLICATE LENGTH            @YM03564
         MVCL  R2,RE                   MOVE THE STACK TO SAVE AREA
         LR    RF,R1                   RESTORE R15
         SPACE 2
*/* S DSJST:CALCULATE JOB STEP TIME */
         SPACE 2
         BAL   RE,DSJST            GO TO CALCULATE JOB STEP TIME
*   DSJST USES REGISTERS 0,1,2,3 AND 14.
         SPACE
         SPACE 2
*/* P DECREMENT COUNT OF CPUS ACTIVE IN ADDR SPACE */
         SPACE 2
         L     R1,ASCBCPUS             OBTAIN CURRENT CPUS COUNT
DSSAV22A DC    0H'0'
         LR    R2,R1                   DUPLICATE THE COUNT
         BCTR  R2,DSL0                 DECREMENT THE COUNT
         CS    R1,R2,ASCBCPUS          UPDATE THE COUNT
         BNZ   DSSAV22A                REPEAT IF COUNT HAD CHANGED
*                                       GO TO CLEAR HLHI.
         SPACE 2
*/* D (NO,DSSAV20,YES,) IS CMS LOCK HELD? */
         SPACE 2
         TM    PSAHLHI+DSO3,DSCMSHI     IS THE CMS LOCK HELD?
         BZ    DSSAV20                 NO, CONTINUE.
DST108   DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* P SET CMS LOCK HELD BIT IN ASCB */
         SPACE 2
         OI    ASCBFLG1,ASCBCMSH   SET CMS LOCK HELD BIT IN THE ASCB
         SPACE 2
*/*DSSAV20: P STORE INTERRUPT ID INTO LOCAL LOCK */
         SPACE 2
DSSAV20  DC    0H'0'               ENTER TO CLEAR HLHI.
         L     R1,DSINTPID         YES. STORE INTERRUPT ID
         ST    R1,ASCBLOCK              INTO THE LOCAL LOCK.
         SPACE 2
*/* P CLEAR CMS AND LOCAL LOCK HELD INDICATORS */
         SPACE 2
         NI    PSAHLHI+DSO3,DSXFF-DSCMSHI-DSLLHI TURN OF CMS AND LOCAL
*                                      LOCK HELD INDICATORS
         SPACE 2
*/* P CLEAR PSATNEW AND PSATOLD FIELDS */
         SPACE 2
         LA    R1,DSL0                 ZERO R1
         ST    R1,PSATNEW          *    CLEAR PSANEW
         ST    R1,PSATOLD          *         AND PSAOLD
         SPACE 2
*/*DSSAV23: R RETURN */
         SPACE 2
DSSAV23  DC    0H'0'
         BR    RF                  RETURN.
         EJECT
*
*  WAIT STATE SAVE SECTION
*        R1 IS ZERO ON ENTRY TO THIS SEQUENCE
*
         SPACE 2
*/*DSSAV3: P (CHNG,DSSAV3,OK,) C & S TO DECREMENT COUNT OF CPU'S IN
*/*WAIT */
         SPACE 2
DSSAV3   DC    0H'0'
         L     R3,ASCBCPUS         *
         LR    R2,R3               *     DECREMENT COUNT OF THE NUMBER
         BCTR  R3,DSI0             *          OF CPUS DISPATCHED TO
DST110B  DC    0H'0'               *** TEST LABEL ***
         CS    R2,R3,ASCBCPUS      *          THE WAIT ADDRESS SPACE
         BC    DSCC4,DSSAV3        *
         SPACE 2
*/* P CLEAR PSATNEW AND PSATOLD */
         SPACE 2
DST111   DC    0H'0'               *** TEST LABEL ***
         ST    R1,PSATNEW          CLEAR PSATNEW
         ST    R1,PSATOLD          CLEAR PSATOLD
         ST    R1,LCCAITOD         CLEAR INT TOD
         SPACE
DST111A  DC    0H'0'               *** TEST LABEL ***
         SPACE 2
*/* R RETURN */
         SPACE 2
         BR    RF                  RETURN.
         TITLE 'IEAVEDS0 - JOB STEP TIMING'
***********************************************************************
*                                                                     *
*  JOB STEP TIMING SUBROUTINE                                         *
*        THIS SUBROUTINE IS ENTERED TO ACCUMULATE THE JOB STEP        *
*        TIME FOR THE CURRENT ADDRESS SPACE.                          *
*                                                                     *
*  DEPENDENCIES:  IEESTPRS AND DSS                                    *
*        IF CURRENT PSW IS BETWEEN IEAVEDS1 AND IEAVEDS2 BOTH MUST    *
*        UPDATE LCCADTOD AND (LCCAITOD,IF ANY VALUE IS PRESENT) BY    *
*        THE ELAPSED TOD AND RESET THE IC TO IEAVEDS1.                *
*                                                                     *
*  ENTRY REGISTERS:                                                   *
*        R7 - LCCA ADDRESS                                            *
*        R8 - ASCB ADDRESS                                            *
*        R9 - BASE REGISTER                                           *
*        RE - RETURN ADDRESS                                          *
*  WORK REGISTERS:                                                    *
*        R0 THRU R3                                                   *
*  NO OTHER REGISTERS ARE USED IN THIS SEQUENCE.                      *
*                                                                     *
***********************************************************************
         SPACE 2
*/*DSJST: D (BAD,DSJSTRTN,GOOD,) TEST FOR GOOD TOD CLOCK */
         SPACE 2
         ENTRY   DSJSTCSR
DSJSTCSR DC    0H'0'
         SPACE 2
*/* P ESTABLISH LOCAL ADDRESSABILITY */
         SPACE 2
         BALR  R9,R0               LOCAL ADDRESSABILITY
         USING *,R9
         SPACE 2
*/* P ESTABLISH MODULE ADDRESSABILITY */
         SPACE 2
         L     R9,DSBASEAD         DISPATCHER BASE ENTRY
         USING DSBASE,R9           ESTABLISH DISPATCHER ADDRESSABILITY
DSJST    DC    0H'0'
*                                                              @YM05197
         L     R1,PSAPCCAV         PCCA ADDRESS.
         USING PCCA,R1             PCCA ADDRESSABILITY.
         TM    PCCATODE,PCCANUTD   TEST FOR GOOD TOD CLOCK.
         BC    DSCC1,DSJSTCLR      BAD CLOCK. BYPASS JOB STEP TIMING.
         DROP  R1                  DROP PCCA ADDRESSABILITY.
*   FALL THROUGH ON GOOD TOD CLOCK TO DO JOB STEP TIMING.
IEAVEDS1  DC  0H'0'
         SPACE 2
*/* D (YES,DSJSTSRB,NO,) SRB MODE? */
         SPACE 2
         TM    LCCADSF2,LCCASRBM   SRB MODE?                   @YM07640
         BO    DSJSTSRB            SRB MODE                    @YM07640
         SPACE 2
*/* D (YES,DSJSTCLR,NO,) RCT TASK? */
         SPACE 2
         L     R1,ASCBASXB         ADDRESS THE ASXB            @YM07640
         L     R2,ASXBFTCB-ASXB(R1) OBTAIN RCT'S ADDRESS       @YM07640
         C     R2,PSATOLD          IS CURRENT TASK THE RCT?    @YM07640
         BE    DSJSTCLR            RCT, DO NOT TIME            @YM07640
         SPACE 2
*/* D (NO,DSJSTSTC,YES,) IS ENTRY FROM A FLIH? */
         SPACE 2
         L     R2,LCCAITOD         IS INTERRUPT TIME STORED?   @YM07640
         LTR   R2,R2               IF SO, R2 WILL HAVE A VALUE @YM07640
         BZ    DSJSTSTC            NO, GO STORE TOD            @YM07640
         L     R3,LCCAITOD+DSL4    OBTAIN FULL TOD VALUE       @YM07640
         SPACE 2
*/*DSJST01: P SUBTRACT TOD AT DISPATCH (LCCADTOD) FROM TOD NOW */
         SPACE 2
DSJST01  DC    0H'0'
*                                  LCCADTOD - TOD CLOCK AT DISPATCH.
         SL    R2,LCCADTOD         LEFT HALF VALUES.
         SL    R3,LCCADTOD+DSL4    RIGHT HALF VALUES.
         BC    DSCC11,DSJST02      BRANCH IF CARRY. COMPLEMENTED SMALL
DST112   DC    0H'0'               *** TEST LABEL ***
*                                       VALUE ADDED TO ASCBEWST.
         BCTR  R2,DSI0             DECREMENT HIGH ORDER VALUE.
         SPACE 2
*/*DSJST02: P ADD TO ACCUMULATED JOB STEP TIME (ASCBEJST) */
         SPACE 2
DSJST02  DC    0H'0'
         LM    R0,R1,ASCBEJST      ELAPSED JOB STEP TIME.
         ALR   R2,R0               LEFT HALF ELAPSED JOB STEP TIME.
         ALR   R3,R1               RIGHT HALF ELAPSED JOB STEP TIME.
         BC    DSCC12,DSJST03      BRANCH IF NO CARRY.
DST113   DC    0H'0'               *** TEST LABEL ***
         LA    R2,DSI1(R2)         INCREMENT HIGH ORDER VALUE.
         SPACE 2
*/*DSJST03: P (CHNG,DSJST01,OK,DSJSTRTN) C & S TO UPDATE ASCBEJST */
         SPACE 2
DSJST03  DC    0H'0'
         CDS   R0,R2,ASCBEJST      C&S NEW ELAPSED JOB STEP TIME.
         SPACE 2
*/*DSJSTRTN: D (YES,DSJSTCLR,NO,DSJST01) DID CDS UPDATE EJST? */
         SPACE 2
DSJSTRTN DC    0H'0'
         BC    DSCC8,DSJSTCLR      VALUE UPDATED - RETURN.     @YM07640
         L     R2,LCCAITOD         IS INTERRUPT TIME STORED?   @YM07640
         LTR   R2,R2               IF SO, R2 WILL HAVE A VALUE @YM07640
         BZ    DSJSTLDC            NO, GO STORE TOD            @YM07640
         L     R3,LCCAITOD+DSL4    OBTAIN FULL TOD VALUE       @YM07640
DST114   DC    0H'0'               *** TEST LABEL ***
         B     DSJST01             VALUE WAS CHANGED - TRY AGAIN.
         SPACE 2
*/*DSJSTSTC: P (,DSJST01) STORE TOD CLOCK INTO ASCBEWST */
         SPACE 2
DSJSTSTC DC    0H'0'
         STCK  ASCBEWST            TOD CLOCK VALUE NOW.        @YM07640
DSJSTLDC DC    0H'0'
         L     R2,ASCBEWST         OBTAIN TOD                  @YM07640
         L     R3,ASCBEWST+DSL4    OBTAIN TOD                  @YM07640
         B     DSJST01             CALCULATE ELASPED JST       @YM07640
         SPACE 3
***********************************************************************
*        DSJSTSRB - THIS ROUTINE CALCULATES JST FOR A SRB WHICH IS    *
*        ACCUMULATED SEPARATELY FROM JST FOR TASKS.                   *
***********************************************************************
         SPACE 2
*/*DSJSTSRB: P CALCULATE JST FOR A SRB */
         SPACE 2
DSJSTSRB DC    0H'0'
         STCK  ASCBEWST            STORE TOD                   @YM07640
         SPACE 2
*/*DSJST03A: P OBTAIN TOD */
         SPACE 2
DSJST03A DC    0H'0'
         L     R2,ASCBEWST         OBTAIN TOD                  @YM07640
         L     R3,ASCBEWST+DSL4    OBTAIN TOD                  @YM07640
         SL    R2,LCCADTOD         LEFT HALF VALUES.           @YM07640
         SL    R3,LCCADTOD+DSL4    RIGHT HALF VALUES.          @YM07640
         BC    DSCC11,DSJST03B     BRANCH IF CARRY. COMPLEMENTED SMALL
         BCTR  R2,DSI0             DECREMENT HIGH ORDER VALUE. @YM07640
         SPACE 2
*/*DSJST03B: P ADD TO ACCUMULATED JOB STEP TIME (ASCBSRBT) */
DSJST03B DC    0H'0'
         LM    R0,R1,ASCBSRBT      ELAPSED JOB STEP TIME.      @YM07640
         ALR   R2,R0               LEFT HALF ELAPSED JOB STEP TIME.
         ALR   R3,R1               RIGHT HALF ELAPSED JOB STEP TIME.
         BC    DSCC12,DSJST04      BRANCH IF NO CARRY.         @YM07640
DST115   DC    0H'0'               *** TEST LABEL ***          @YM07640
         LA    R2,DSI1(R2)         INCREMENT HIGH ORDER VALUE. @YM07640
         SPACE 2
*/*DSJST04: P (CHNG,DSJST01,OK,DSJSTRTS) C & S TO UPDATE ASCBEJST */
         SPACE 2
DSJST04  DC    0H'0'
         CDS   R0,R2,ASCBSRBT      C&S NEW ELAPSED JST         @YM07640
         SPACE 2
*/*DSJSTRTS: R RETURN */
         SPACE 2
DSJSTRTS DC    0H'0'
         BCR   DSCC8,RE            VALUE UPDATED - RETURN.     @YM07640
DST116   DC    0H'0'               *** TEST LABEL ***
         B     DSJST03A            VALUE CHANGED - TRY AGAIN.  @YM07640
IEAVEDS2  DC  0H'0'
         SPACE 2
*/*DSJSTCLR: R CLEAR ITOD AND RETURN */
DSJSTCLR DC    0H'0'
* THIS PROCESSING MUST BE OUTSIDE THE ENTRY POINTS IEAVEDS1 AND
* IEAVEDS2 DUE TO STOP RESTART SUBROUTINE (IEESTPRS) DEPENDIENCES.
         SLR   R1,R1               CLEAR R1                    @YM07640
         ST    R1,LCCAITOD         CLEAR ITOD                  @YM07640
         BR    RE                  RETURN TO CALLER            @YM07640
         TITLE 'IEAVEDS0 - VCONS/ADCONS'
***********************************************************************
*                                                                     *
*                       VCONS/ADCONS                                  *
*                                                                     *
***********************************************************************
DSGSMQ   DC    V(IEAGSMQ)          GLOBAL SERVICE MANAGER QUEUE
DSLSMQ   DC    V(IEALSMQ)          LOCAL SERVICE MANAGER QUEUE
DSGSPL   DC    V(IEAGSPL)          GLOBAL SERVICE PARAMETER LIST
DSWTCB   DC    V(IEAWTCB)          WAIT TCB
DSWASCB  DC    V(IEAWASCB)         WAIT ASCB
DSMASCB  DC    V(IEAMASCB)         MASTER'S ASCB
DSCMSLK  DC    V(CMSLOCK)          CMS LOCK
         SPACE
DSLLREL  DC    V(LLREL)            BASE ENTRY FOR LOCAL LOCK RELEASE
DSLLRELD DC    V(LRELDISP)         DISP ENTRY FOR LOCAL LOCK RELEASE
DSDISPLK DC    V(DISPLOCK)         DISP LOCKWORD ADDRESS       @YM03564
AGSLDISP DC    V(GSLSDISP)         DISP ENTRY FOR DISP LOCK OBTAIN
DSVESC1  DC    V(IEAVESC1)         GLOBAL SCHEDULE ENTRY POINT
DSVESC2  DC    V(IEAVESC2)         LOCAL SCHEDULE ENTRY POINT
DS0EF03  DC    V(IEA0EF03)         STAGE 3 EXIT EFFECTOR ENTRY POINT
DSRSPN   DC    V(IEAVRSPN)         TIMER RECOVERY SPIN ENTRY POINT
DSMS0    DC    V(IEAVEMS0)         MEMORY SWITCH ENTRY POINT
DSTRDISP DC    V(TRDISP)           TASK ENTRY TO TRACE
DSTRSRB1 DC    V(TRSRB1)           INITIAL SRB ENTRY TO TRACE
DSTRSRB2 DC    V(TRSRB2)           SUSPENDED SRB ENTRY TO TRACE
DSRMTR   DC    V(IEAVEFRE)         SUSPENDED SRB'S RMTR ADDR
         SPACE
DSBASEAD DC    A(DSBASE)           ADCON FOR DISPATCHER ADDRESSABILITY
         TITLE 'IEAVEDS0 - CONSTANTS'
***********************************************************************
*                                                                     *
*                           CONSTANTS                                 *
*                                                                     *
***********************************************************************
         SPACE
DSHITIME DS    0D                  HIGH VALUE FOR CPU INTERVAL TIMER.
         DC    X'7FFFFFFFFFFFFFFF' HIGH VALUE FOR CPU INTERVAL TIMER.
         SPACE
DSSRBPSW DC    0D'0'               LEFT HALF OF SRB PSW WITH EC MODE
         DC    B'00000111000011000000000000000000'    AND MCH BITS ON -
*                                       USED TO BUILD PSW ON INITIAL
*                                       SRB DISPATCH.
         SPACE
DSCPUAFF DS    0F
DSINTPID DS    0F                  LOCAL LOCK INTERRUPT ID.
         DC    X'FFFFFFFF'         LOCAL LOCK INTERRUPT ID.
         SPACE
DSFOUR   DC    F'4'                FOUR
         SPACE
DSPREFIX DC    A(-(TCB-TCBFRS))    TCB PREFIX DECREMENT VALUE
         SPACE
DSABTIME DS    0F                  22F ABEND CODE FOR TASKS USING CPU
         DC    X'8022F000'              TIMER WHICH HAS GONE BAD.
         SPACE
DSABAFFN DS    0F                  072 ABEND CODE FOR SRB'S WHICH HAVE
         DC    X'80072000'              SPECIFIED AFFINITY TO A CPU
*                                       WHICH HAS GONE OFFLINE.
         SPACE
DSWPSW   DC    X'070E000000000000' WAIT PSW                    @YM03464
         SPACE
DSCELLID DC    0F'0'               *     CELL POOL
         DC    C'SRB'              *            ID FOR
         DC    X'00'               *                  SUSPENDED SRB'S.
ACTONMSK DC    X'80000000'         TCBACTIV MASK CHECK         @Z40FPXJ
ACTOFMSK DC    X'7FFFFFFF'         TCBACTIV MASK OFF           @Z40FPXJ
ACTCPVOF DC    AL1(255-(TCBACTIV)),X'FF0000' TCBACTIV/TCBCCPVI MASK OFF
*                                                              @ZA20174
         TITLE 'IEAVEDS0 - ASCB'
         IHAASCB
         TITLE 'IEAVEDS0 - ASXB'
         IHAASXB
         TITLE 'IEAVEDS0 - IHSA'
         IHAIHSA
         TITLE 'IEAVEDS0 - FLC/PSA'
         IHAPSA
         TITLE 'IEAVEDS0 - LCCA'
         IHALCCA
         TITLE 'IEAVEDS0 - PCCA'
         IHAPCCA
         TITLE 'IEAVEDS0 - SRB/SSRB'
         IHASSRB
         TITLE 'IEAVEDS0 - WSAVT(GLOBAL)'
         IHAWSAVT CLASS=GLOBAL,DSECT=YES
         TITLE 'IEAVEDS0 - WSAVT(CPU)'
         IHAWSAVT CLASS=CPU,DSECT=YES
         TITLE 'IEAVEDS0 - TCB'
         IKJTCB
         TITLE 'IEAVEDS0 - RB'
         IKJRB
         TITLE 'IEAVEDS0 - TQE'
         IHATQE
         TITLE 'IEAVEDS0 - CSD'
         IHACSD
         TITLE 'IEAVEDS0 - CDAL'                               @ZA18126
         CDAL                                                  @ZA18126
         TITLE 'IEAVEDS0 - GSPL/LSPL'
         IHASPL
         TITLE 'IEAVEDS0 - FRRS'
         IHAFRRS
         TITLE 'IEAVEDS0 - CVT'
         CVT   DSECT=YES,LIST=YES
         TITLE 'IEAVEDS0 - END'
*/* END */
         END
