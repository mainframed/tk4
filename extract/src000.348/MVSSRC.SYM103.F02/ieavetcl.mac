         TITLE 'SUSPEND/RESUME/TCTL PROCESSOR'
IEAVETCL CSECT
         MODID  BR=NO
         AGO   .SKIPFL1
*/*IEAVETCL: CHART SUSPEND/RESUME/TCTL */
*/*HEADER
*/*
*/*
*/*                                     SECTION:3.1.8.11.3.14.3
*/*        SUSPEND/RESUME/TCTL
*/*                                        PAGE # */
*/*IEAVSUSP: E SUSPEND ENTRY */
*/* N R1=0=CURRENT R1^=0=PREVIOUS */
*/* P USE REG 15 FOR ADDRESSABILITY */
*/* D (PREV,PREVIOUS,CURR,) RB=? */
*/* P GET CURRENT ASCB */
*/* COMMENT (4,19,) PSAAOLD */
*/*SUSP001: P (FAIL,SUSP001,OK,)
*/* #1C×   ASCBTCBS
*/* #2 ×
*/* #3-×------------
*/* #4S×   ASCBTCBS-1
*/* #5 ×   */
*/* P GET CURRENT TCB */
*/* COMMENT (4,19,) PSATOLD */
*/* P GET CURRENT RB */
*/* COMMENT (4,19,) TCBRBP */
*/*SUSP002: P (FAIL,SUSP002,OK,)
*/* #1C×   RBSCF
*/* #2 ×
*/* #3-×------------
*/* #4S×   RBSCF+1
*/* #5 ×   */
*/* P MAKE SURE R0=@TCB AND R1=@RB */
*/* R RETURN TO CALLER */
*/*PREVIOUS: P GET CURRENT TCB */
*/* COMMENT (4,19,) PSATOLD */
*/* P GET CURRENT RB */
*/* COMMENT (4,19,) TCBRBP */
*/* D (Y,SUSABEND,N,) RB POINT TO TCB? */
*/* COMMENT (4,19,) RBTCBNXT */
*/* P GET PREVIOUS RB */
*/* COMMENT (4,19,) RBLINK */
*/*SUSP003: P (FAIL,SUSP003,OK,)
*/* #1C×   RBSCF
*/* #2 ×
*/* #3-×------------
*/* #4S×   RBSCF+1
*/* #5 ×   */
*/* P MAKE SURE R0=@TCB AND R1=@RB */
*/* R RETURN TO CALLER */
*/*SUSABEND: P SET UP ERROR CODE _ NO PREVIOUS RB */
*/* R ABEND CALLER */
*/*IEAVRSME: E RESUME ENTRY */
*/* N #1     R4=@TCB#2     R5=@RB#3     R14=RETURN OR 0#4     R15=EP */
*/* P ESTABLISH COMMON ADDRESSABILITY */
*/* P REFERENCE RB FOR VALIDITY CHECK (OI X'00') */
*/*RESU001: P
*/* #1C×   ACTIV OFF
*/* #2 ×   S3A OFF
*/* #3-×------------
*/* #4S× ACTIV + S3A ON
*/* #5 × CCPVI=CPULA */
*/* COMMENT (4,19,) TCBXSCT */
*/* D  (YES,GETLOCK,NO,) FAIL? */
*/RESU002:  D (Y,RESU006,N,) RBSCF=0 ? */
*/*RESU002: P (FAIL,RESU002,OK,)
*/* #1C×   RBSCF
*/* #2 ×
*/* #3-×------------
*/* #4S×   RBSCF-1
*/* #5 ×             */
*/*RESU003: D (N,RESU005,Y,) TOP RB ? */
*/* D (N,RESU011A,Y,) TCB DISPATCHABLE ? */
*/* COMMENT (4,19,) TCBFLGS4 */
*/* D (N,RESU011A,Y,) RB DISPATCHABLE ? */
*/* COMMENT (4,19,) RBWCF */
*/* D (N,RESU011A,Y,) ASCB DISPATCHABLE ? */
*/* COMMENT (4,19,) ASCBSTND */
*/*RESU004: P (FAIL,RESU004,OK,)
*/* #1C×   ASCBTCBS
*/* #2 ×
*/* #3-×------------
*/* #4S×   ASCBTCBS+1
*/* #5 ×   */
*/*RESU005: D (N,RESU006,Y,) RETURN= ? */
*/* P TURN OFF ACTIV AND S3A */
*/* R RETURN TO CALLER */
*/*RESU006: D (Y,RESU0061,N,) CALLER SRB ? */
*/* COMMENT (4,19,) LCCADSF2 */
*/* P TURN OFF ACTIV AND S3A */
*/* COMMENT (4,19,) TCBXSCT */
*/*RESABEND: P SET UP ERROR CODE */
*/* R ABEND CALLER */
*/*RESU0061: P SET UP SUPER FRR AND FLAGS */                   @ZA18126
*/* COMMENT (3,19,) PSACSTK */
*/* COMMENT (4,19,) PSASUP1 */
*/* P SET CDAL FLAG     (STATUS INTERSECT) */
*/* COMMENT (4,19,) CDALTCTL */
*/* D (Y,TCTL003,N,TCTL002) STATUS RUNNING ? */
*/*GETLOCK: D (N,RESU001,Y,) ACTIV/ S3A STILL ON ? */
*/* P SHOW LOCK HELD, IN CASE SETLOCK SKIPPED */
*/* D (Y,RESU007A,N,) IS THIS CPU ACTIVE? */
*/* P SAVE RETURN ADDRESS */
*/* S SETLOCK: GET LOCAL LOCK */
*/* N RETURN CODE MAY SHOW LOCK ALREADY HELD */
*/*RESU007A: D (Y,RESU010,N,) RBSCF=0 ? */
*/*RESU007: P (FAIL,RESU007,OK,)
*/* #1C×   RBSCF
*/* #2 ×
*/* #3-×------------
*/* #4S×   RBSCF-1
*/* #5 ×             */
*/*RESU008: P
*/* #1C×   ACTIV OFF
*/* #2 ×
*/* #3-×------------
*/* #4S× ACTIV + S3A ON
*/* #5 × CCPVI=CPULA   */
*/* COMMENT (4,19,) TCBXSCT */
*/* D (OTHR,RESU008,ACT,RESU012,N,) FAIL ? */
*/* COMMENT (7,22,) ACTIV */
*/* COMMENT (9,22,) ON */
*/* D (N,RESU003,Y,) LOCK ACQUIRED ? */
*/* S (,RESU008A) SETLOCK: RELEASE LOCAL LOCK */
*/*RESU012: D (N,RESU010,Y,) RB = TOP RB ? */
*/*RESU009: P (FAIL,RESU009,OK,)
*/* #1C×   ASCBTCBS
*/* #2 ×
*/* #3-×------------
*/* #4S×   ASCBTCBS+1
*/* #5 ×   */
*/*RESU010: D (N,RESU011,Y,) LOCK ACQUIRED ? */
*/* S SETLOCK: RELEASE LOCAL LOCK */
*/* P RESTORE RETURN ADDRESS */
*/*RESU011: D (N,RESU013,Y,) RETURN=? */
*/* R RETURN TO CALLER */
*/*RESU013: D (N,RESABEND,Y,) SRB MODE ? */
*/* R SRB EXIT */
*/*RESU011A: P TURN OFF INTERSECT FLAGS */
*/* D (NO,RESU013,YES,) RETURN REQUESTED ? */
*/* R RETURN TO CALLER */
*/*RESU008A: P (,RESU003) RESTORE RETURN ADDRESS */
*/*IEAVTCTL: E TCTL ENTRY */
*/* D (N,TCTABEND,Y,) SRB MODE ? */
*/* P SET KEY TO ZERO */
*/* P GET @LCCA (INTO REG 7) */
*/* P DISABLE FOR INTERRUPTS */
*/* COMMENT (4,19,) LCCAPSMK */
*/* P SET UP SUPER FRR AND FLAGS */
*/* COMMENT (3,19,) PSACSTK */
*/* COMMENT (3,19,) PSASUP1 */
*/* P ESTABLISH COMMON ADDRESSABILITY */
*/* P SET CDAL FLAG (STATUS INTERSECT) */
*/* D (Y,TCTL003,N,) STATUS RUNNING ? */
*/* COMMENT (4,19,) ASCBSTA */
*/*TCTL001: P
*/* #1C×   ACTIV OFF
*/* #2 ×   S3A OFF
*/* #3-×------------
*/* #4S× ACTIV + S3A ON
*/* #5 × CCPVI=CPULA */
*/* COMMENT (4,19,) TCBXSCT */
*/*TCTL002: D (N,TCTL003,Y,) TCB DISPATCHABLE ? */
*/* COMMENT (4,19,) TCBFLGS4 */
*/* D (Y,TCTL003,N,) TCB AFFINITY TO OTHER PROCESSOR ? */     @ZA16831
*/* D (N,TCTL003,Y,) RB DISPATCHABLE ? */
*/* COMMENT (4,19,) RBWCF */
*/* D (N,TCTL003,Y,) ASCB DISPATCHABLE ? */
*/* COMMENT (4,19,) ASCBSTND */
*/* L DISPATCHER JOB STEP TIMING ROUTINE */
*/* N REG 9 NOW HAS DISPATCHER BASE */
*/* P RESET SRB MODE FLAGS */
*/* S SETLOCK: GET DISP LOCK    */
*/* P DECREMENT COUNT OF SRBS IN MEMORY */
*/* D (GE,%SET2,LT,) COMPARE ASCBSEQN OF AOLD:ANEW */         @ZA16832
*/* P UPDATE PSAANEW TO EQUAL PSAAOLD */                      @ZA16832
*/*%SET2: S SETLOCK: RELEASE DISP LOCK */
*/* N */                                                      @ZA18126
*/* COMMENT (7,6,) CDAL IS CLEARED IN */                      @ZA18126
*/* COMMENT (8,5,) THE DISPATCHER AFTER */                    @ZA18126
*/* COMMENT (9,4,) ASCBCPUS IS INCREMENTED */                 @ZA18126
*/* R SPECIAL DISPATCHER EP */
*/*TCTL003: P TURN OFF INTERSECT FLAGS */
*/* P CLEAR CDAL */
*/* COMMENT (4,19,) CDALCPUX */
*/* P RESTORE FRR AND FLAGS */
*/* COMMENT (3,19,) PSACSTK */
*/* COMMENT (4,19,) PSASUP1 */
*/* P ENABLE */
*/* R NORMAL SRB EXIT */
*/*TCTABEND: P SET UP ABEND CODE */
*/* R ABEND */
.SKIPFL1  ANOP
*        SPACE 2
*             MODULE PROLOG
*
*  MODULE NAME = IEAVETCL
*
*  DESCRIPTIVE NAME = SUSPEND/RESUME/TCTL PROCESSOR
*
*  COPYRIGHT = NONE
*
*  STATUS = SEE CHANGE ACTIVITY AT END OF PROLOGUE.            @ZA31944
*
*  FUNCTION = THIS MODULE CONTAINS THE SUSPEND, RESUME AND
*             TCTL FUNCTIONS.
*
*           SUSPEND: THE FUNCTION OF SUSPEND IS TO INCREMENT
*           THE RESCF COUNT. THIS CAUSES THE ROUTINE TO ENTER
*           A SUSPENDED STATE WHEN IT LOSES CONTROL TO THE
*           DISPATCHER. IF THE CURRENT RB IS SUSPENDED,
*           ASCBTCBS IS ALSO DECREMENTED BY 1.
*
*           RESUME: RESUME'S PRIMARY FUNCTION IS TO DECREMENT
*           THE SUSPEND COUNT (RBSCF) IN THE RB'S
*           WAIT COUNT FIELD. IF THIS CAUSES THE TCB/RB
*           TO BECOME DISPATCHABLE, THEN THE COUNT OF
*           READY TCB'S (ASCBTCBS) MUST BE INCREMENTED.
*
*           TCTL: THE TCTL FUNCTION PASSES CONTROL
*           DIRECTLY FROM AN SRB TO A READY TCB. ONLY
*           SRB'S MAY INVOKE IT AS A MEANS OF EXITING
*           FROM THE SRB PROCESS. NO DISPATCH AS SUCH
*           WILL BE DONE, ALTHOUGH SOME COMMON DISPATCHER
*           CODE WILL BE USED TO PASS CONTROL TO THE REQUESTED TCB.
*
*  DEPENDENCIES =
*           LOCAL LOCK MAY BE ACQUIRED, THEREFORE NO LOCK
*           HIGHER IN HIERARCHY MAY BE HELD ON ENTRY.
*
*  CHARACTER CODE DEPENDENCIES = NONE
*
*  RESTRICTIONS = NONE
*
*  PROCESSOR = ASSEMBLER-370R
*
*  MODULE SIZE = SEE EXTERNAL SYMBOL DICTIONARY
*
*  ATTRIBUTES = NUCLEUS,ZERO PSQ PROTECT KEY, DISABLED
*               (TCTL ONLY), SUPERVISOR MODE
*
*  ENTRY POINT = IEAVSPND
*
*  ENTRY POINT = IEAVSPND
*
*     PURPOSE = PERFORM SUSPEND FUNCTION
*
*     LINKAGE = VIA SUSPEND MACRO
*
*     INPUT   = REGISTER:  1  =  0 IF RB = CURRENT
*                                4 IF RB = PREVIOUS
*                         14  =  RETURN ADDRESS
*                         15  =  ENTRY POINT
*
*     OUTPUT  = REGISTERS UNCHANGED
*                       2,3,4,5,6,7,8,9,10,11,12
*               REGISTER:  0  =  TCB ADDRESS
*                          1  =  ADDRESS OF SUSPENDED RB
*                         13  =  N/A
*                         14  =  RETURN ADDRESS
*                         15  =  N/A
*               - RBSCF COUNT INCREMENTED
*               - ASCBTCB5 COUNT MAY BE DECREMENTED
*
*     EXITS-NORMAL  =  RETURN TO CALLER
*
*     EXITS-ERROR   =  ABEND 070 WITH REGISTER 15 = 0 IF RB = PREVIOUS
*                      WAS SPECIFIED BUT NO PREVIOUS RB EXISTED.
*
*     ROUTINES      =  NONE
*
*     DATA AREAS    =  NONE
*
*     CONTROL BLOCKS =   FIELD         REF     MACRO
*
*         ASCB         ASCBTCBS         W     IHAASCB
*
*         PSA          PSAAOLD          R     IHAPSA
*                      PSATOLD
*
*         RB           RBLINK           R     IHARB
*                      RBSCF
*
*         TCB          TCBRBP           R     IKJTCB
*
*     MACROS         =   ABEND
*
*     SERIALIZATION  =   CS SERIALIZES USE OF ASCBTCBS.
*                        THE TCB/RB CHAIN IS PROTECTED BY THE
*                        TCBACTIV FLAG, SINCE SUSPEND CAN
*                        ONLY BE ISSUED BY THE CURRENT
*                        ACTIVE TCB.
*
*  ENTRY POINT       =   IEAVRSME
*
*     PURPOSE        =   PERFORM RESUME FUNCTION
*
*     LINKAGE        =   VIA RESUME MACRO
*
*     INPUT          =   REGISTER:  4   =   TCB ADDRESS
*                                   5   =   RB ADDRESS
*                                  14   =   RETURN ADDRESS OR 0
*                                  15   =   ENTRY POINT
*                         0,1,11,12,13  =   WORK REGISTERS
*
*     OUTPUT         =   REGISTERS UNCHANGED:
*                                2,3,4,5,6,7,8,9,10,14
*                           - RBSCF COUNT DECREMENTED
*                           - ASCBTCBS COUNT MAY BE INCREMENTED
*                           - NO RETURN CODE IS PASSED FROM RESUME
*
*     EXITS-NORMAL   =
*          -    RETURN TO CALLER IF REGISTER 14 IS NON-0;
*               OTHERWISE:
*          -    IF CALLER IS IN SRB MODE, TRY TO TCTL TO
*               THE TCB BEING RESUME'D;
*
*     EXITS-ERROR    =   ABEND 070 WITH REGISTER 15 = 4 IF NON-SRB MODE
*                        CALLER ISSUES A RESUME RETURN = N.
*
*  EXTERNAL REFERENCES = NONE
*
*     ROUTINES       =   RESUME BRANCHES TO AN INTERNAL ENTRY POINT
*                        IN THE TCTL LOGIC WHEN PROCESSING AN SRB
*                        MODE CALLER WITH NO RETURN ADDRESS. CONTROL
*                        IS NOT RETURNED TO RESUME.
*
*     DATA-AREAS     =   NONE
*
*     CONTROL BLOCKS   =      FIELD       REF        MACRO
*
*        ASCB                ASCBSTA       C        IHAASCB
*                            ASCBSTND      C
*                            ASCBTCBS      C,W
*
*        CVT                 CVTSRBRT      R        CVT
*
*        LCCA                LCCADSF2      C        IHALCCA
*                            LCCAPSMK      W
*
*        PSA                 PSACPULA      R        IHAPSA
*                            PSACSTK       W
*                            PSASSTK       R
*                            PSASUP1       W
*
*        RB                  RBSCF         C,W      IHARB
*
*        TCB                 TCBACTIV      C,W      IKJTCB
*                            TCBCCPVI      W
*                            TCBFLGS4      C
*                            TCBFLGS5      C
*                            TCBS3A        C, W
*
*     MACROS         =   ABEND,SETLOCK
*
*     SERIALIZATION  =   TCBACTIV FLAG IS USED TO SERIALIZE THE
*                        TCB/RB BETWEEN DISPATCHER AND RESUME.
*
*                        TCBS3A FLAG IS USED TO SERIALIZE THE
*                        TCB/RB BETWEEN STAGE 3 AND RESUME.
*
*                        THE LOCAL LOCK IS USED TO SERIALIZE
*                        THE TCB/RB IF EITHER ABOVE FLAG IS
*                        ALREADY ON WHEN RESUME CHECKS IT VIA
*                        COMPARE AND SWAP.
*
*     ENTRY POINT    =   IEAVTCTL
*
*        PURPOSE     =   PERFORM TCTL FUNCTION
*
*        LINKAGE     =   VIA TCTL MACRO
*
*        INPUT       =   REGISTER:   4  =  TCB ADDRESS
*                                   15  =  ENTRY POINT
*                                   (ALL OTHERS AVAILABLE FOR WORK)
*
*  OUTPUT            =   (SEE EXTERNAL-REFERENCES FOR INPUT TO
*                         DISPATCHER)
*
*        EXITS-NORMAL  =
*             - IF TCB/RB IS DISPATCHABLE, INTERFACE WITH
*               DISPATCHER TO PASS CONTROL TO TCB;
*               OTHERWISE:
*               - RETURN TO SRB EXIT.
*
*        EXITS-ERROR   =
*               - ABEND 070 WITH REGISTER 15 = 4 IF TCTL
*                 CALLER IS NOT IN SRB MODE.
*
*        EXTERNAL REFERENCES =
*               DISPATCHER JOB STEP TIMING ROUTINE:
*                    THIS ROUTINE IS USED TO ACCUMULATE THE
*                    JOB STEP TIME FOR THE CURRENT ADDRESS
*                    SPACE.
*               INPUT:
*                    REGISTER  7  =  LCCA ADDRESS
*                    REGISTER  8  =  ASCB ADDRESS
*                    REGISTER 14  =  RETURN ADDRESS
*                    (THIS ROUTINE SETS UP ITS OWN
*                    ADDRESSABILITY)
*
*               ON RETURN FROM JOB STEP TIMING, REGISTER 9
*               CONTAINS THE DISPATCHERS BASE ADDRESS. THIS
*               IS SAVED AS INPUT TO THE FOLLOWING EXTERNAL
*               REFERENCE.
*
*               DISPATCHER TCB STATUS RESTORE:
*                    THIS ROUTINE RESTORES THE STATUS OF A
*                    DISPATCHABLE TCB AND GIVES CONTROL TO ITS
*                    TOP RB VIA LPSW.
*               INPUT:
*                    REGISTER  5  =  RB ADDRESS
*                    REGISTER  6  =  TCB ADDRESS
*                    REGISTER  7  =  LCCA ADDRESS
*                    REGISTER  8  =  ASCB ADDRESS
*                    REGISTER  9  =  BASE ADDRESS OF DISPATCHER
*                    REGISTER 13  =  NON-ZERO VALUE (USED AS FLAG
*                                    THAT ROUTINE WAS EXTERNALLY
*                                    ENTERED)
*
*               LOCK MGR SPECIAL ENTRY FOR DISP LOCK:
*                    THIS ROUTINE ACQUIRES THE DISPATCHER
*                    LOCK WITHOUT VALIDITY CHECKS.
*               INPUT:
*                    REGISTER 13 = ENTRY POINT
*                    REGISTER 14 = RETURN ADDRESS
*
*        DATA AREAS    =    NONE
*
*     CONTROL BLOCKS   =     FIELD        REF       MACRO
*
*          ASCB             ASCBSTA        C       IHAASCB
*                           ASCBSTND       C
*                           ASCBTCBS       C,W
*
*          CDAL             CDALASCB       W       IHACDAL
*
*          CVT              CVTSRBRT       R       CVT
*
*          LCCA             LCCADSF2       C       IHALCCA
*                           LCCAPSMK       W
*
*          PSA              PSACPULA       R       IHAPSA
*                           PSACSTK        W
*                           PSASSTK        R
*                           PSASUP1        W
*
*          RB               RBWCF          C       IHARB
*
*          TCB              TCBACTIV       C,W     IKJTCB
*                           TCBCCPVI       W
*                           TCBFLGS4       C
*                           TCBFLGS5       C
*                           TCBS3A         C,W
*
*     MACROS       =    ABEND
*
*     SERIALIZATION =   TCBACTIV FLAG IS USED TO SERIALIZE THE
*                       TCB/RB BETWEEN DISPATCHER AND TCTL
*
*                       TCBS3A FLAG IS USED TO SERIALIZE THE
*                       TCB/RB BETWEEN STAGE 3 AND TCTL
*                       CDALASCB FIELD IS USED TO PREVENT AN
*                       INTERSECT WITH STATUS.
*
*                       IF EITHER ABOVE FLAG IS ALREADY ON, NO
*                       OTHER SERIALIZATION IS ATTEMPTED, AND
*                       TCTL ESCAPES TO THE NORMAL SRB EXIT.
*
*     CHANGE ACTIVITY =                                        @ZA31944
*          OZ11326                                             @ZA31944
*          OZ11584                                             @ZA31944
*          OZ14227                                             @ZA31944
*          OZ14983                                             @ZA31944
*          OZ16831-CHANGE TO CHECK FOR TCB AFFINITY BEFORE     @ZA31944
*                  PERFORMING TCTL.                            @ZA31944
*          OZ16832                                             @ZA31944
*          OZ17792-ON RESUME RET=NO OR TCTL TO TASK WITH       @ZA31944
*                  AFFINITY TO ANOTHER PROCESSOR, ASCBLOCK HAD @ZA31944
*                  BEEN ZEROED EVEN WHEN THE LOCAL LOCK WAS    @ZA31944
*                  NOT OWNED.                                  @ZA31944
*          OZ18126-IMPROPER SERIALIZATION WITH IEAVSETS OF     @ZA31944
*                  FIELD TCBXSCT.                              @ZA31944
*          OZ18162-SUSPEND DID NOT INCREMENT SHORT WAIT COUNT  @ZA31944
*                  WHEN ASCBTCBS GOES TO ZERO.                 @ZA31944
*          OZ25947-CHANGE TO SAVE SYSTEM MASK WHEN RESUME      @ZA31944
*                  OBTAINS THE LOCAL LOCK, BECAUSE THE PSA IS  @ZA31944
*                  NOT SERIALIZED THEN.                        @ZA31944
*          OZ31944-THE SYSTEM MASK SAVED BY RESUME IN THE PSA  @ZA31944
*                  MAY BE OVERLAID BY OTHER DISABLED MODULES   @ZA31944
*                  WHICH MAY BE INVOKED WHEN THE LOCAL LOCK IS @ZA31944
*                  RELEASED.                                   @ZA31944
         TITLE 'SUSPEND PROCESSOR'
*        REGISTER EQUATES
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 2                                               @ZA18162
         ENTRY IEAVSPND
IEAVSPND DS    0H                    SUSPEND ENTRY POINT
         SPACE
*        THIS ROUTINE IS ENTERED BY THE SUSPEND MACRO
*        TO PLACE AN RB IN THE SUSPENDED STATE.
         SPACE
         USING PSA,0
         USING *,R15                 USE ENTRY REG FOR ADDRESSABILITY
         LTR   R1,R1                 RB=CURRENT IF ZERO
         BNZ   PREVIOUS              RB=PREVIOUS IF NON-ZERO
         SPACE 2
*        CURRENT RB IS GOING TO BE SUSPENDED. THEREFORE
*        ASCBTCBS COUNT MUST BE DECREMENTED.
         SPACE
         L     R13,PSAAOLD           CURRENT ASCB
         USING ASCB,R13
         L     R0,ASCBTCBS           GET COUNT OF TCBS
SUSP001  LTR   R1,R0                 ASCBTCBS=0?               @ZA14983
         BNP   SUSPINCR              YES, DO NOT DECR COUNT    @ZA14983
         BCTR  R1,0                  DECREMENT IT BY ONE
         CS    R0,R1,ASCBTCBS        REPLACE OLD COUNT
         BNE   SUSP001               REPEAT IF COMPARE FAILS
         LTR   R1,R1                 ASCBTCBS=0?               @ZM43088
         BNZ   SUSPINCR              NO, WORK ON SUSP CT       @ZM43088
         LH    R1,ASCBSWCT           PICK UP SHORT WAIT CONT   @ZM43088
         LA    R1,C1(R1)             BUMP BY 1                 @ZA18162
         STH   R1,ASCBSWCT           RESTORE                   @ZM43088
SUSPINCR DS    0H                                              @ZM43088
         SPACE
*        NOW THE SUSPEND COUNT IN THE RB MUST BE INCREMENTED
         SPACE
         L     R1,PSATOLD            GET CURRENT TCB
         USING TCB,R1
         L     R1,TCBRBP             GET CURRENT RB
         USING RBSECT,R1
         L     R13,RBSCF             GET SUSPEND CT AND LINK FIELD
SUSP002  LR    R0,R13                COPY FIELD
         AL    R0,HIBYTE1            ADD ONE TO HIGH BYTE
         CS    R13,R0,RBSCF          REPLACE OLD COUNT
         BNE   SUSP002               REPEAT IF COMPARE FAILS
         L     R0,PSATOLD            @TCB IN REG 0 FOR CALLER
*                                    @RB ALREADY IN REG 1 FOR CALLER
         BR    R14                   RETURN TO CALLER
         DROP  R1,R13
         SPACE 2
*        PREVIOUS RB IS GOING TO BE SUSPENDED. IF NO PREVIOUS
*        RB EXISTS, THE CALLER IS ABENDED.
         SPACE
PREVIOUS L     R1,PSATOLD            GET CURRENT TCB
         USING TCB,R1
         L     R1,TCBRBP             GET CURRENT RB
         USING RBSECT,R1
         TM    RBSTAB2,RBTCBNXT      IS THERE A PREVIOUS RB?
         BO    SUSABEND              NO, ABEND CALLER
         L     R1,RBLINK             GET PREVIOUS RB
         L     R13,RBSCF             GET SUSPEND CT AND LINK FIELD
SUSP003  LR    R0,R13                COPY FIELD
         AL    R0,HIBYTE1            ADD ONE TO HIGH BYTE
         CS    R13,R0,RBSCF          REPLACE OLD COUNT
         BNE   SUSP003               REPEAT IF COMPARE FAILS
         L     R0,PSATOLD            @TCB IN REG 0 FOR CALLER
*                                    @RB ALREADY IN REG 1 FOR CALLER
         BR    R14                   RETURN TO CALLER
         DROP  R1,R15
         SPACE 2
*        NO PREVIOUS RB EXISTS; ABEND CALLER
         SPACE
SUSABEND SLR   R15,R15               CODE FOR ABOVE ERROR
         ABEND  X'070',DUMP,,SYSTEM  ABEND CALLER
         TITLE 'RESUME PROCESSOR'
         ENTRY IEAVRSME
IEAVRSME DS    0H                    RESUME ENTRY POINT
         SPACE
*        THIS ROUTINE IS ENTERED BY THE RESUME MACRO TO
*        REMOVE AN RB FROM THE SUSPENDED STATE
         SPACE
         USING IEAVRSME,R15          COMMON ADDRESSABILITY IS
*                                    USED BY RESUME AND TCTL SINCE
*                                    RESUME MAY EXIT TO TCTL
         USING TCB,R4                @TCB IS IN R4 ON ENTRY
         USING RBSECT,R5             @RB IS IN R5 ON ENTRY
         OI    RBSIZE,X'00'          DUMMY REFERENCE OF RB AS  @ZA11584
*                                    VALIDITY CHECK BEFORE THE
*                                    ACTIV FLAG IS SET
         STNSM PSAIPCR+C1,DISABLE    DISABLE FOR I/O + EXT INT @ZA11584
RESU001  L     R1,TCBXSCT            LOAD INTERSECT FLAGS
         N     R1,MASK1              TURN OFF ACTIV/S3A FLAGS IN REG
         LR    R0,R1                 COPY REG FOR CS
         O     R0,MASK2              TURN ON ACTIV/S3A FLAGS IN REG
         IC    R0,PSACPULA+1         INSERT CPUID INTO REG
*                                    ONLY LOW BYTE HAS VALUE, SO
*                                    IC MAY BE USED; IF VALUE IS
*                                    EVER EXPANDED TO TWO BYTES,
*                                    IC MUST BE CHANGED TO ICM.
         CS    R1,R0,TCBXSCT         IF ACTIV/S3A FLAGS ARE OFF,
*                                    SET THEM AND CCPVI.
         BNE   GETLOCK               INTERFACE FLAGS MAY BE ON,  SO
*                                    CHECK IF TCB IS IN USE.
         SPACE 2
*        IF SUSPEND COUNT IS NOT ZERO, DECREMENT IT VIA CS
         SPACE
         L     R0,RBSCF              GET COUNT AND LINK FIELD
RESU002  LR    R1,R0                 COPY REGISTER FOR CS
         LA    R1,0(R1)              ZERO COUNT IN ONE REGISTER
         CR    R1,R0                 IS COUNT ZERO?
         BE    RESU005               YES, EXIT FROM RESUME
         LR    R1,R0                 RECOPY REGISTER
         SL    R1,HIBYTE1            SUBTRACT 1 FROM HIGH BYTE
         CS    R0,R1,RBSCF           REPLACE COUNT
         BNE   RESU002               RETRY IF FIELD CHANGES
         SPACE 2
*        IF THE RESUME IS FOR THE TOP RB, CHECK THE DISPATCHABILITY
*        OF THIS UNIT OF WORK TO SEE IF ASCBTCBS MUST BE INCREMENTED
         SPACE
RESU003  C     R5,TCBRBP             IS RB THE CURRENT RB?
         BNE   RESU005               NO, EXIT FROM RESUME
         LH    R1,TCBFLGS4           TEST TCB
         LTR   R1,R1                    DISPATCHABILITY FLAGS
         BNZ   RESU011A              EXIT; NOT DISPATCHABLE
         CLI   RBWCF,X'00'           IS RB WAITING/SUSPENDED
         BNE   RESU011A              YES, EXIT RESUME
         L     R13,PSAAOLD           GET CURRENT ASCB
         USING ASCB,R13
         TM    ASCBFLG1,ASCBSTND     ASCB DISPATCHABLE?
         BO    RESU011A              NO, EXIT FROM RESUME
         L     R1,ASCBTCBS           GET COUNT OF READY TCBS
RESU004  LA    R0,1(R1)              ADD 1 TO COUNT IN 2ND REGISTER
         CS    R1,R0,ASCBTCBS        REPLACE OLD COUNT
         BNE   RESU004               REPEAT IF CS FAILS
         SPACE
RESU005  LTR   R14,R14               RETURN TO CALLER?
         BZ    RESU006               NO RETURN REQUESTED
         NI    TCBXSCT1,X'FF'-(TCBACTIV+TCBS3A) TURN OFF INTERSECT
*                                    FLAGS. CS IS NOT NEEDED SINCE THE
*                                    FLAGS CANNOT BE CHANGED BY ANYONE
*                                    WHILE WE HAVE THEM ON
         EX    R0,PSAIPCR            RESTORE CALLER'S STATE    @ZA11584
         BR    R14                   RETURN TO CALLER
         DROP  R13
         EJECT
*        RETURN=NO WAS REQUESTED ON RESUME MACRO. THIS IS ONLY
*        ALLOWED FOR SRB MODE ISSUERS. IF NOT IN SRB MODE,
*        THE CALLER IS ABENDED.
         SPACE
RESU006  L     R7,PSALCCAV           GET @LCCA                 @ZA11584
         USING LCCA,R7
         TM    LCCADSF2,LCCASRBM     SRB MODE?
         BNO   RESU0062              NO, ABEND CALLER
         SPACE
*        CALLER IS IN SRB MODE. SET UP TO ENTER THE TCTL FUNCTION
*        IN BEHALF OF THE RESUMED TCB.
         SPACE
         L     R1,PSASSTK            PLACE SUPER STACK
         ST    R1,PSACSTK               IN CURRENT FRR STACK
         OI    PSASUP1,PSADISP+PSATCTL  TURN ON FRR FLAGS
         L     R10,PSACDAL           GET COMMON DISPATCHER ACTIVE LIST
         USING CDAL,R10
         OI    CDALDSP4,CDALTCTL     INDICATE TO  STATUS THAT  A
*                                    DISPATCHER(TCTL) IS  ACTIVE FOR
*                                    THIS MEMORY
         L     R8,PSAAOLD            PICK UP ASCB ADDRESS
         USING ASCB,R8
         TM    ASCBSRQ1,ASCBSTA      IS STATUS RUNNING?
         BNO   TCTL002               NO, GO  TO TCTL
         B     TCTL003               EXIT SRB THRU TCTL
         DROP  R7,R8,R10
         EJECT
*        NON-SRB MODE USER ISSUED RESUME WITH RETURN=NO
         SPACE
RESU0062 NI    TCBXSCT1,X'FF'-(TCBACTIV+TCBS3A) TURN OFF FLAGS
RESABEND STOSM  TCTLPSMK,ENABLE      ENABLE                    @ZM43116
         LA    R15,4                 CODE FOR ABOVE ERROR      @ZM43116
         ABEND  X'070',DUMP,,SYSTEM
         EJECT
*        IF THE DISPATCHER OR STAGE 3 INTERSECT FLAG WAS ON
*        (TCBACTIV,TCBS3A) THE LOCAL LOCK MUST BE ACQUIRED TO
*        SYNCHRONIZE THE RESUME FUNCTION. THE TCB FLAGS THEMSELVES
*        ARE TESTED TO SEE IF THEY CAUSED THE CS TO FAIL. THIS
*        WAY, IF THEY GET TURNED OFF BEFORE THE FOLLOWING TEST,
*        THE CS IS RETRIED RATHER THAN THE LOCAL LOCK ACQUIRED.
         SPACE
GETLOCK  TM    TCBXSCT1,TCBACTIV+TCBS3A  ARE FLAGS ON?
         BZ    RESU001               NO,RETRY THE CS
         LR    R0,R14                SAVE RETURN REGISTER
         LA    R13,4                 SET UP LOCKHELD CODE IN CASE WE
*                                    SKIP THE SETLOCK
         C     R4,PSATOLD            ARE WE THE ACTIVE TCB? IN OTHER
*                                    WORDS, DID CALLER RESUME HIMSELF
         BE    RESU007A              YES, SKIP SETLOCK
*
*        IT IS NO LONGER NECESSARY TO SAVE PSAIPCR+1           @ZA31944
*        BECAUSE PSAIPCR+1 WILL BE RESET TO X'03' AFTER THE    @ZA31944
*        LOCAL LOCK IS RELEASED.                               @ZA31944
         STOSM TCTLPSMK,ENABLE       ENABLE FOR SETLOCK OBTAIN @ZA25947
SETLOCK1 SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        X
               RELATED=(SETLOCK2,SETLOCK3,'GET LOCAL LOCK')
         SPACE
*        REGISTER 13 NOW CONTAINS A 0 IF WE OBTAINED THE LOCK; OR
*        A 4 IF THE LOCK WAS OWNED BY THE CALLER. ONCE THE LOCK IS
*        ACQUIRED, SUSPEND COUNT MAY BE DECREMENTED.
         SPACE 2
         STNSM TCTLPSMK,DISABLE      DISABLE AGAIN AFTER LOCK  @ZA25947
*                                    IS OBTAINED               @ZA25947
         SPACE 1                                               @ZA25947
*        IF SUSPEND COUNT IS NOT ZERO, DECREMENT IT VIA CS
         SPACE
RESU007A L     R14,RBSCF             GET COUNT AND LINK FIELD
RESU007  LR    R1,R14                COPY REGISTER FOR CS
         LA    R1,0(R1)              ZERO COUNT IN ONE REGISTER
         CR    R1,R14                IS COUNT ZERO?
         BE    RESU010               YES, EXIT FROM RESUME
         LR    R1,R14                RECOPY REGISTER
         SL    R1,HIBYTE1            SUBTRACT 1 FROM HIGH BYTE
         CS    R14,R1,RBSCF          REPLACE COUNT
         BNE   RESU007               RETRY IF FIELD CHANGES
         SPACE
*        TRY AGAIN  TO  TURN ON INTERSECT FLAGS
         SPACE
RESU008  L     R1,TCBXSCT            LOAD INTERSECT FLAGS
         N     R1,MASK1              TURN OFF ACTIV/S3A FLAGS IN REG
         LR    R14,R1                COPY REG FOR CS
         O     R14,MASK2             TURN ON ACTIV/S3A FLAGS IN REG
         IC    R14,PSACPULA+1        INSERT CPUID INTO REG
*                                    ONLY LOW BYTE HAS VALUE, SO
*                                    IC MAY BE USED; IF VALUE IS
*                                    EVER EXPANDED TO TWO BYTES,
*                                    IC MUST BE CHANGED TO ICM.
         CS    R1,R14,TCBXSCT        IF ACTIV/S3A FLAGS ARE OFF,
*                                    SET THEM AND CCPVI.
         BNE   RESU012               INTERFACE FLAGS ON, EXIT
         SPACE 2
*        WE SUCCEEDED IN TURNING ON THE INTERSECT FLAGS WHILE
*        HOLDING THE LOCAL LOCK. WE CAN NOW RELEASE THE LOCAL LOCK
*        AND CONTINUE WITH NORMAL PROCESSING.
         SPACE
         LTR   R13,R13               DID CALLER HOLD LOCK?
         BNZ   RESU008A              YES, GO RESTORE RETURN ADDR
SETLOCK2 SETLOCK  RELEASE,TYPE=LOCAL,RELATED=(SETLOCK1,'RELEASE LOCK')
*
*        IT IS NECESSARY TO RESET THE SYSTEM MASK AT PASIPCR+1 @ZA31944
*        BECAUSE IT MAY HAVE BEEN OVERLAID WHEN THE LOCK WAS   @ZA31944
*        RELEASED. FOR EXAMPLE, IN SU 7, IEAVELK MAY INVOKE    @ZA31944
*        IEAVEMS0 WHICH MAY INVOKE IEAVERP WHICH WILL SAVE THE @ZA31944
*        CURRENT (DISABLED) SYSTEM MASK AT PSAIPCR+1.          @ZA31944
*
*        UNLESS OTHER CODE CHANGES WERE MADE, IT WOULD NOT BE  @ZA31944
*        CORRECT TO SAVE AND RESTORE PSAIPCR+1 OR TO DO AN OI. @ZA31944
*        THIS MIGHT                                            @ZA31944
*        CAUSE VALID CHANGES TO THE SYSTEM MASK TO BE LOST.    @ZA31944
*        THE MVI IS VALID BECAUSE INITIALLY IEAVETCL           @ZA31944
*        DISABLED THE SYSTEM MASK. WHEN STOSM IS ISSUED AT     @ZA31944
*        EXIT FROM IEAVETCL WITH A MASK OF 3,                  @ZA31944
*        THE SYSTEM MASK WILL THEN BE RESTORED TO BEING        @ZA31944
*        ENABLED BUT WILL NOT OTHERWISE BE ALTERED.            @ZA31944
*        (IT IS DOCUMENTED THAT IF RESUME MAY REQUIRE THE      @ZA31944
*        LOCAL LOCK, THE CALLER MUST BE ENABLED.)              @ZA31944
*
*        NOTE THAT THE MASK AT PSAIPCR+1 MUST BE RESTORED AT   @ZA31944
*        BOTH PLACES AT WHICH THE LOCAL LOCK IS RELEASED.      @ZA31944
*
         MVI   PSAIPCR+C1,ENABLE                               @ZA31944
         SPACE
RESU008A LR    R14,R0                RESTORE RETURN ADDRESS
         B     RESU003               BACK TO MAINLINE
         EJECT
*        WE FAILED TO TURN ON THE INTERSECT FLAGS, EVEN UNDER THE
*        LOCAL LOCK. WE MUST NOW DO SOME CLEANUP AND EXIT.
*        IF THE RB BEING RESUMED IS THE TOP RB, AND WE COULD NOT
*        TURN ON THE ACTIV FLAG, THIS MEANS THAT THE RB ISSUED
*        A SUSPEND, BUT IS STILL RUNNING. IN THIS CASE, RESUME
*        MUST INCREMENT THE TCB READY COUNT.
         SPACE 2
RESU012  C     R5,TCBRBP             IS RB THE CURRENT RB?
         BNE   RESU010               NO, DONT INCREMENT TCB COUNT
         L     R11,PSAAOLD           GET ASCB ADDRESS
         USING ASCB,R11
         L     R1,ASCBTCBS           GET COUNT OF READY TCBS
RESU009  LA    R14,1(R1)             ADD 1 TO COUNT IN 2ND REGISTER
         CS    R1,R14,ASCBTCBS       REPLACE OLD COUNT
         BNE   RESU009               REPEAT IF CS FAILS
         DROP  R11
         SPACE
RESU010  LTR   R13,R13               DID CALLER HOLD LOCK?
         BNZ   RESU011               YES, GO TO MAINLINE
SETLOCK3 SETLOCK  RELEASE,TYPE=LOCAL,RELATED=(SETLOCK1,'RELEASE LOCK')
         SPACE
         MVI   PSAIPCR+C1,ENABLE     RESET MASK FOR STOSM     @ZA31944
         SPACE
RESU011  EX    R0,PSAIPCR            RESTORE CALLER MODE      @ZA11584
         LTR   R14,R0                RETURN TO CALLER? & RESTORE R14
         BNZR  R14                   YES
         SPACE 2
*        RETURN=NO WAS REQUESTED ON RESUME MACRO. THIS IS ONLY
*        ALLOWED FOR SRB MODE ISSUERS. IF NOT IN SRB MODE,
*        THE CALLER IS ABENDED.
         SPACE
         STNSM TCTLPSMK,DISABLE      DISABLE                  @ZM43116
RESU013  L     R13,PSALCCAV          GET @LCCA                @ZA11584
         USING LCCA,R13
         TM    LCCADSF2,LCCASRBM     SRB MODE?
         BNO   RESABEND              NO, ABEND CALLER
         SPACE
*        CALLER IS IN SRB MODE. SET UP TO ENTER NORMAL SRB EXIT
         SPACE
         L     R14,FLCCVT            GET CVT ADDRESS
         USING CVT,R14
         L     R14,CVTSRBRT          GET SRB EXIT ADDRESS
         BR    R14                   GO TO SRB EXIT
         SPACE 2
*        UNIT OF WORK WAS FOUND TO BE NON-DISPATCHABLE
         SPACE
RESU011A NI    TCBXSCT1,X'FF'-(TCBACTIV+TCBS3A) TURN OFF INTERSECT FLGS
         LTR   R14,R14               RETURN TO CALLER?
         BZ    RESU013               NO, CONTINUE              @ZA11584
         EX    R0,PSAIPCR            RESTORE CALLER MODE       @ZA11584
         BR    R14                   RETURN TO THE CALLER
         DROP  R4,R5,R13,R14
         TITLE 'TCTL PROCESSOR'
         ENTRY IEAVTCTL
IEAVTCTL DS    0H                    TCTL ENTRY
         SPACE
*        THIS ROUTINE IS ENTERED BY THE TCTL MACRO TO PASS CONTROL
*        FROM AN SRB DIRECTLY TO A TCB. IT IS ALSO ENTERED AT
*        AN INTERNAL ENTRY POINT BY THE RESUME FUNCTION FOR THE
*        SAME PURPOSE.
         SPACE 2
         MODESET  EXTKEY=ZERO        SET UP ZERO PROTECT KEY  @ZM43116
         USING TCB,R4                REG 4 HAS TCB ON ENTRY
         USING IEAVTCTL,R15
         STNSM TCTLPSMK,DISABLE      DISABLE FOR INTERRUPTS   @ZM43116
         L     R15,COMMADDR          SET UP COMMON ADDRESSABILITY
         USING IEAVRSME,R15
         L     R7,PSALCCAV           GET @LCCA
         USING LCCA,R7
         TM    LCCADSF2,LCCASRBM     SRB MODE?
         BNO   TCTABEND              NO, ABEND CALLER
         SPACE
*        CALLER IS IN SRB MODE. SET UP TO   DO  THE TCTL FUNCTION
*        IN BEHALF OF THE REQUESTED TCB.
         SPACE
         L     R1,PSASSTK            PLACE SUPER STACK
         ST    R1,PSACSTK               IN CURRENT FRR STACK
         OI    PSASUP1,PSADISP+PSATCTL  TURN ON FRR FLAGS
         L     R10,PSACDAL           GET COMMON DISPATCHER ACTIVE LIST
         USING CDAL,R10
         OI    CDALDSP4,CDALTCTL     INDICATE TO  STATUS THAT  A
*                                    DISPATCHER(TCTL) IS  ACTIVE FOR
*                                    THIS MEMORY
*        REGS 8 AND 10 ARE NOW SET UP FOR LATER DISPATCHER INTERFACE.
         SPACE
         L     R8,PSAAOLD            PICK UP ASCB ADDRESS
         USING ASCB,R8
         TM    ASCBSRQ1,ASCBSTA      IS STATUS RUNNING?
         BO    TCTL003A              YES, EXIT  TCTL           @ZA11584
TCTL001  L     R1,TCBXSCT            LOAD INTERSECT FLAGS
         N     R1,MASK1              TURN OFF ACTIV/S3A FLAGS IN REG
         LR    R0,R1                 COPY REG FOR CS
         O     R0,MASK2              TURN ON ACTIV/S3A FLAGS IN REG
         IC    R0,PSACPULA+1         INSERT CPUID INTO REG
*                                    ONLY LOW BYTE HAS VALUE, SO
*                                    IC MAY BE USED; IF VALUE IS
*                                    EVER EXPANDED TO TWO BYTES,
*                                    IC MUST BE CHANGED TO ICM.
         CS    R1,R0,TCBXSCT         IF ACTIV/S3A FLAGS ARE OFF,
*                                    SET THEM AND CCPVI.
         BNE   TCTL006               INTERFACE FLAGS MAY BE ON,  SO
*                                    CHECK IF TCB IS IN USE.
         DROP  R4
         SPACE 2
TCTL002  LR    R6,R4                 MOVE @TCB FOR DISPATCHER
         USING TCB,R6
         LH    R1,TCBFLGS4           TEST TCB
         LTR   R1,R1                    DISPATCHABILITY FLAGS
         BNZ   TCTL003               EXIT; NOT DISPATCHABLE
         LH    R1,TCBAFFN            TCBS AFFINITY MASK        @ZA16831
         C     R1,CPUAFFN            TEST TCB AFFINITY         @ZA16831
         BE    TESTRB                NONE, GO TEST RBWCF       @ZA16831
         LTR   R1,R1                 TEST TCB AFFINITY         @ZA16831
         BZ    TESTRB                NONE, GO TEST RBWCF       @ZA16831
         SPACE 1
*        TCB HAS PROCESSOR AFFINITY. CANNOT TCTL TO TCB        @ZA16831
*        IF AFFINITY IS TO ANOTHER PROCESSOR.                  @ZA16831
         SPACE 1
         L     R2,PSAPCCAV           GET PCCA ADDRESS          @ZA16831
         USING PCCA,R2               PCCA ADDRESSABILITY       @ZA16831
         LH    R2,PCCACAFM           GET CPUS AFFINITY MASK    @ZA16831
         DROP  R2                    DROP PCCA ADDRESSABILITY  @ZA16831
         NR    R1,R2                 TEST PROCESSOR AFFINITY   @ZA16831
         BZ    TCTL003               AFFINITY TO OTHER CPU,EXIT@ZA16831
TESTRB   DS    0H                    CONTINUE DISP TESTS       @ZA16831
         L     R5,TCBRBP             GET CURRENT RB
         USING RBSECT,R5
         CLI   RBWCF,X'00'           IS RB WAITING/SUSPENDED
         BNE   TCTL003               YES, EXIT TCTL
         TM    ASCBFLG1,ASCBSTND     ASCB DISPATCHABLE?
         BO    TCTL003               NO, EXIT FROM TCTL
         SPACE 2
*        THE FOLLOWING CODE DUPLICATES THE SRB EXIT CODE IN THE
*        DISPATCHER. THE JOB STEP TIMING ROUTINE IS INVOKED. THIS
*        ROUTINE REQUIRES THE FOLLOWING INPUT:
*        REG 7  = @LCCA
*        REG 8  = @ASCB
*        REG 14 = RETURN @
*        REGS 0-3 ARE USED AS WORK REGS
*        REG 9 IS SET UP WITH THE COMMON DISPATCHER BASE ADDRESS.
*        THIS ADDRESS IS USED AS INPUT TO THE FINAL EXIT TO THE
*        DISPATCHER.
         SPACE
         L     R14,DISPJST           GET @ JOB STEP TIME ROUTINE
         BALR  R14,R14               CALL IT
         NI    LCCADSF2,X'FF'-(LCCASRBM+LCCAGSRB)
*                                    RESET SRB MODE FLAG       @ZA11326
*        THE DISPATCHER LOCK IS GOTTEN HERE TO PROTECT AGAINST
*        DISPATCHER INTERFERENCE WHILE UPDATING ASCBSRBS. IF CS IS
*        EVER USED BY DISPATCHER TO UPDATE ASCBSRBS, THE LOCK HERE
*        MAY BE REPLACED BY CS.
*        THE DISPATCHER LOCK ALSO SERIALIZES PSAANEW WHICH     @ZA16832
*        MUST BE UPDATED TO EQUAL PSAAOLD IF AOLDS POSITION    @ZA16832
*        ON THE DISPATCHING QUEUE IS HIGHER THAN ANEWS.        @ZA16832
         SPACE
SET1     DS    0H                    RELATED= LABEL
*        SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,                        -
*              RELATED=('ASCBSRBS,PSAANEW',SET2)               @ZA16832
         L     R13,AGSLDISP          LOCK MGR SPECIAL DISP ENTRY
         BALR  R14,R13               GO GET LOCK
         LH    R1,ASCBSRBS           GET COUNT OF SRBS
         BCTR  R1,0                  DECREMENT IT BY ONE
         STH   R1,ASCBSRBS           REPLACE OLD COUNT
         L     R1,PSAANEW            GET PSAANEW               @ZA16832
         LTR   R1,R1                 TEST FOR MEMORY SWITCH    @ZA16832
         BZ    SET2                  INDICATED, NO ANEW UPDATE @ZA16832
         CLC   ASCBSEQN(L2),ASCBSEQN-ASCB(R1) TEST SEQ NUMBERS @ZA16832
         BNL   SET2                  AOLDS SEQN NOT GREATER,   @ZA16832
*                                    THEN DO NOT UPDATE ANEW   @ZA16832
         ST    R8,PSAANEW            UPDATE ANEW TO HIGHER ASCB@ZA16832
SET2     DS    0H                    RELATED= LABEL
*        SETLOCK RELEASE,TYPE=DISP,RELATED=(SET1)
         L     R11,DSDISPLK          ADDR OF DISPATCER LOCKWORD
         SLR   R13,R13               CLEAR A REGISTER
         ST    R13,0(R11)            CLEAR LOCKWORD
         NI    PSAHLHI+2,DISPOFF     TURN OFF DISP LOCK HELD FLAG
         SPACE
*        TCB IS NOW READY TO BE DISPATCHED. TCBACTIV IS        @ZA18126
*        SUFFICIENT SERIALIZATION FOR THE TASK.                @ZA18126
         SPACE
         NI    TCBXSCT1,X'FF'-TCBS3A TURN OFF S3A INTERSECT    @ZA18126
*                                    FLAG. ACTIV WILL NOW      @ZA18126
*                                    PREVENT INTERSECT.        @ZA18126
         L     R15,DISPTCB           ADDRESS OF DISPATCH-TCB ROUTINE
         BR    R15                   EXIT TO DISPATCH THE TCB  @ZA16831
         SPACE
*        NOTE: CDAL IS CLEARED IN DISPATCHER AFTER ASCBCPUS    @ZA18126
*        IS INCREMENTED. THIS SEQUENCE IS REQUIRED TO PREVENT  @ZA18126
*        IMPROPER INTERSECT WITH STATUS.                       @ZA18126
         SPACE 1                                               @ZA18126
         DROP  R6
         EJECT
*        THIS CODE IS ENTERED IF THE CS OF THE INTERSECT FLAGS FAILS.
*        THE FLAGS ARE RETESTED, AND IF OFF, THS CS IS RETRIED
         SPACE
         USING TCB,R4
TCTL006  TM    TCBXSCT1,TCBACTIV+TCBS3A  ARE FLAGS ON?
         BZ    TCTL001               NO, RETRY CS
         SPACE
*        THE FOLLOWING CODE EXITS TO THE NORMAL SRB EXIT, IF THE
*        REQUESTED TCB CANNOT BE DISPATCHED.
         SPACE
TCTL003A DS    0H                    CLEAR THE
         NI    CDALDSP4,X'FF'-CDALTCTL       CDALTCTL FLAG
         NI    PSASUP1,X'FF'-(PSADISP+PSATCTL)  TURN OFF FRR FLAGS
         L     R1,PSANSTK            GET NORMAL STACK
         ST    R1,PSACSTK            SET CURRENT TO NORMAL
         STOSM TCTLPSMK,ENABLE       ENABLE                    @ZA25947
         L     R15,FLCCVT            GET CVT ADDRESS
         USING CVT,R15
         L     R15,CVTSRBRT          GET NORMAL SRB EXIT ADDRESS
         BR    R15                   EXIT
         DROP  R15
         USING IEAVRSME,R15
TCTL003  NI    TCBXSCT1,X'FF'-(TCBACTIV+TCBS3A) TURN OFF       @ZA18126
*                                    INTERSECT FLAGS           @ZA18126
         B     TCTL003A              CONTINUE EXIT
         SPACE 2
*        ABEND THE NON-SRB MODE CALLER OF TCTL
         SPACE
TCTABEND STOSM  TCTLPSMK,ENABLE      ENABLE                    @ZM43116
         LA    R15,4                 CODE FOR ABOVE ERROR      @ZM43116
         ABEND  X'070',DUMP,,SYSTEM  ISSUE ABEND
         EJECT
*        CONSTANTS, ADCONS, VCONS, EQUATES
         SPACE 2
DISPJST  DC    V(DSJSTCSR)           JOB STEP TIME ROUTINE
DSDISPLK DC    V(DISPLOCK)           DISP LOCKWORD ADDRESS
AGSLDISP DC    V(GSLSDISP)           ENTRY FOR DISP LOCK OBTAIN
DISPTCB  DC    V(IEAVDSTC)           DIRECTED DISPATCH OF TCB
COMMADDR DC    A(IEAVRSME)           COMMON BASE ADDRESS
HIBYTE1  DC    X'01000000'           MASK TO ADD 1 TO HIGH BYTE
CPUAFFN  DC    X'FFFFFFFF'           NO PROCESSOR AFFINITY     @ZA16831
*        MASKS TO TURN INTERSECT FLAGS ON AND OFF
MASK1    DC    AL1(255-(TCBACTIV+TCBS3A)),X'FFFFFF'
MASK2    DC    AL1(TCBACTIV+TCBS3A),X'000000'
C1       EQU   1                     CONSTANT 1                @ZA11584
L2       EQU   2                     LENGTH OPERAND OF TWO     @ZA16832
ENABLE   EQU   X'03'                 MASK TO ENABLE
DISABLE  EQU   X'FF'-ENABLE          MASK TO DISABLE
DISPOFF  EQU   X'EF'                 MASK TO TURN OFF DISP LOCK FLAG
TCTLPSMK DC    X'00'                 STNSM AREA                @ZM43116
         TITLE 'IEAVETCL - ASCB'                               @ZA18162
         IHAASCB
         TITLE 'IEAVETCL - CDAL'                               @ZA18162
         CDAL
         TITLE 'IEAVETCL - CVT'                                @ZA18162
         CVT   DSECT=YES
         TITLE 'IEAVETCL - LCCA'                               @ZA18162
         IHALCCA
         TITLE 'IEAVETCL - PCCA'                               @ZA18162
         IHAPCCA                                               @ZA16831
         TITLE 'IEAVETCL - PSA'                                @ZA18162
         IHAPSA
         TITLE 'IEAVETCL - RP'                                 @ZA18162
         IHARB
         TITLE 'IEAVETCL - TCB'                                @ZA18162
         IKJTCB
         END
