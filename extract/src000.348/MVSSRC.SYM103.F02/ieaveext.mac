         TITLE 'IEAVEEXT- EXTERNAL INTERRUPT HANDLER'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVEEXT
*
*02*     CSECT-NAME = IEAVEEXT
*
*01*  DESCRIPTIVE-NAME = EXTERNAL FIRST LEVEL INTERRUPT HANDLER
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = VERSION 1
*
*01*  FUNCTION = SEE ENTRY POINT PURPOSES BELOW
*
*02*     OPERATION = THE EXTERNAL FLIH WILL RECEIVE CONTROL AFTER AN
*        EXTERNAL INTERRUPT HAS OCCURED VIA THE EXTERNAL NEW PSW. ITS
*        MAIN FUNCTION IS TO SAVE THE STATUS OF THE INTERRUPTED PGM
*        DECIDE WHAT KIND OF AN EXTERNAL INTERRUPT OCCURED AND GIVE THE
*        PROPER SLIH CONTROL. UPON COMPLETION OF THE INTERRUPT PROCESS
*        IT WILL DECIDE WHETHER TO RETURN TO THE INTERRUPTED PROGRAM OR
*        TO THE DISPATCHER.
*
*01*   NOTES = SEE ENTRY POINT DESCRIPTIONS BELOW.
*
*02*        DEPENDENCIES =
*
*           GENERAL EXTERNAL FLIH DEPENDENCIES:
*           1. THE LOCAL LOCK MAY NOT BE REQUESTED OR ASSUMED HELD.
*           2. NO INTERFACES CAN CHANGE CONTROL REGISTERS UNLESS THEY
*           ARE RESTORED BEFORE RETURNING TO THE FLIH.
*           3. ALL SLIHS MUST INTERROGATE OR SAVE THE INTERRUPT CODE
*           OR PROCESSOR ADDRESS PRIOR TO ISSUING A SETLOCK OBTAIN
*           OR OPENING AN EMS/MFA WINDOW.
*           4. DISABLEMENT MUST BE PRESERVED(EXCEPT FOR THE PROCESSORS
*           THAT HAVE BEEN IDENTIFIED THAT NEED TO OPEN AN EMS/MFA
*           WINDOW.)
*
*           MALFUNCTION ALERT PROCESSOR(IGFPXMFA):
*           1. DISABLEMENT MUST BE PRESERVED.
*           2. NO LOCKS MAY BE OBTAINED.
*
*           EMERGENCY SIGNAL PROCESSOR(IEAVEES):
*           1. NO LOCKS MAY BE OBTAINED BY EITHER THE EMS PROCESSOR
*           OR ITS CALLERS.
*           2. THE FOLLOWING EMS ROUTINES MAY OPEN AN EMS/MFA WINDOW:
*                PTLB PROCESSOR
*                REFERENCE THE IPC SPEC 3.1.7.13.
*
*           TIMER(IEA0TI00):
*           1. DISABLEMENT MUST BE PRESERVED.
*
*           EXTERNAL CALL PROCESSOR(IEAVEXS):
*           1. DISABLEMENT MUST BE PRESERVED.
*
*           DISPATCHER(IEA0DS):
*           1. THE DISPATCHER MUST SAVE ALL NECESSARY STATUS OTHER
*           THAN THE GENERAL REGISTERS AND PSW IF SWITCHING AWAY FROM
*           THE CURRENT TASK.
*           2. FOR A LOCALLY LOCKED TCB THE INTERRUPT ID(X'FF..FF')
*           MUST BE PLACED IN THE LOCKWORD ASCBLOCK AND THE CMS LOCK
*           HELD INDICATOR MUST BE SET(ASCBCMSH) IF THE CMS LOCK WAS
*           HELD.
*           3. THE DISPATCHER MUST STORE THE TOD CLOCK VALUE IN
*           LCCADTOD WHEN DISPATCHING A TCB INCLUDING THE WAIT-TCB.
*
*           ALL SPIN ROUTINES:
*           1. THE FOLLOWING ROUTINES MAY PERFORM A SPIN(EMS/MFA
*           WINDOW):
*              A. LOCK MANAGER
*              B. SIGP PROCESSOR
*              C. PTLB PROCESSOR
*              EACH OF THE ABOVE MUST SET THEIR UNIQUE SPIN BIT IN
*           LCCASPIN BEFORE OPENING THE WINDOW AND CLEAR THE BIT AFTER
*           CLOSING THE WINDOW. THIS INSURES THAT THE FLIH WILL RETURN
*           TO THE SPIN AFTER ANY EMS/MFA SIGNAL HAS BEEN HANDLED.
*           2. THE FOLLOWING ROUTINES HAVE A SPIN BIT FOR THE PURPOSES
*           OF ALLOWING AN EXTERNAL INTERRUPT AND THEN GETTING RETURN
*           TO THEIR ROUTINE AFTER INTERRUPTION PROCESSING HAS BEEN
*           COMPLETED:
*                A. VARY-ON-LINE(ALLOWING TOD SYNCH CHECKS)
*
*           MACHINE CHECK AND RTM:
*           1. MUST REMAIN DISABLED AND CAN NOT OPEN ANY WINDOWS.
*
*           FRRS:
*           1. SAME RESTRICTIONS AS THE ASSOCIATED MODULES.
*
*03*        CHARACTER-CODE-DEPENDENCIES = NONE .
*
*02*     RESTRICTIONS = ONLY 2 LEVELS OF RECURSIONS PERMITED.
*
*02*     REGISTER-CONVENTIONS = REFERENCE EQUATE SECTION OF MODULE.
*
*02*     PATCH-LABEL = NONE(NUCLEUS RESIDENT)
*
*01*  MODULE-TYPE = PROCEDURE
*
*02*     PROCESSOR = ASSEMBLER
*
*02*     MODULE-SIZE = REFERENCE ESD LENGTH AT BEGINNING OF MODULE.
*
*02*     ATTRIBUTES = NUCLEUS ,ZERO PROTEXT KEY, DISABLED, REFRESHABLE,
*                     ADDRSPC=FIXED, SUPERVISOR MODE
*
*01*  ENTRY-POINT = IEAQEX00
*
*02*     PURPOSE = THIS IS THE ONLY ENTRY TO THE EXTERNAL FLIH. IT WILL
*        DECIDE WHAT TYPE OF INTERRUPTION HAS OCCURRED AND GIVE THE
*        APPROPRIATE PROCESSOR CONTROL. 2 LEVELS OF RECURSION CAN BE
*        HANDLED. CPU WAIT-TIME IS ACCUMULATED IF NECESSARY.
*
*02*     LINKAGE = SEE INPUT SECTION BELOW.
*
*02*     INPUT =
*        INPUT ENVIRONMENT:
*             STATE-DISABLED,SUPERVISOR
*             KEY-0
*             LOCKS REQUIRED-NONE
*        INPUT DATA:
*             ALL CONTROL-BLOCKS LISTED BELOW.
*        INPUT REGISTERS: NONE
*
*02*     OUTPUT = NONE UNIQUE TO THIS ENTRY.
*
*01*  EXIT-NORMAL = IEA0DS
*
*02*     CONDITIONS = THE DISPATCHER IS ENTERED WHEN THE INTERRUPTION
*        PROCESS HAS COMPLETED AND NEITHER SRB MODE IS INDICATED NOR
*        ANY OF THE SPIN BITS IN THE WORD LCCASPIN IS ON.
*
*02*     OUTPUT =
*        OUTPUT DATA-NONE DIRECTLY
*        OUTPUT REGISTERS- NONE
*        OUTPUT ENVIRONMENT-
*             STATE - DISABLED, SUPERVISOR
*             KEY - 0
*             LOCKS - LOCAL (AND CMS) LOCK(S) MAY BE HELD
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-NORMAL = BACK TO SRB ROUTINE(VIA LPSW)
*
*02*     CONDITIONS = IF AN SRB ROUTINE HAS BEEN INTERRUPTED, RETURN IS
*        BACK TO THE SRB ROUTINE AFTER THE INTERRUPTION HAS BEEN
*        PROCESSED.
*
*02*     OUTPUT = NO OUTPUT TO SRB ROUTINE.
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-NORMAL = BACK TO SPIN ROUTINE (VIA LPSW)
*
*02*     CONDITIONS = IF ANY OF THE SPIN BITS IN THE SPIN WORD IS ON,
*        AFTER THE INTERRUPT HAS BEEN PROCESSED, RETURN IS TO THE
*        INTERRUPTED SPINNING ROUTINE.
*
*02*     OUTPUT = NONE BACK TO THE SPIN ROUTINE.
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-ERROR = NONE
*
*01*  EXTERNAL-REFERENCES = SEE ROUTINES,DATA AREAS,CONTROL-BLOCKS
*     BELOW.
*
*02*     ROUTINES =
*             TREX (TRACE ROUTINE)
*             IEAQWAIT (CPU WAIT-TIME COLLECTION ROUTINE)
*             IEAVEES (EMS PROCESSOR)
*             IEA0TI00 (TIMER SLIH)
*             IEAVEXS (EXTERNAL CALL PROCESSOR)
*             IGFPXMFA (MFA PROCESSOR)
*             IEEBC1PE (COMMUNICATIONS TASK SLIH)
*             GTF (GENERAL TRACE FACILITY)
*
*02*     DATA-AREAS = ALL INCLUDED IN CONTROL-BLOCKS BELOW.
*
*02*     CONTROL-BLOCKS =
*        PSA R/W
*        LCCA R/W
*        PCCA R
*        ASCB R
*        ASXB R
*        TCB R/W
*        CVT R
*        IHSA W
*        RB W
*
*01*  TABLES = NONE
*
*01*  MACROS =
*        HOOK
*
*01*  CHANGE-ACTIVITY = Y02715,Y02751,Y02752
*
*01*  MESSAGES = NONE
*
*01*  ABEND-CODES = NONE
*
**** END OF SPECIFICATIONS ***/
         EJECT
IEAVEEXT CSECT
         SPACE 2
*/*IEAVEEXT: CHART EXTES FLIH */
*/* HEADER
*/*
*/*
*/*
*/*                                                SECTION 3.1.8.3
*/* EXTERNAL FLIH
*/*                                                PAGE # */
         SPACE 2
*/*IEAQEX00: E IEAQEX00 */
         SPACE 2
         MODID BR=NO
         ENTRY IEAQEX00
IEAQEX00 DS    0H
***********************************************************************
*                                                                     *
*                      REGISTER EQUATES                               *
*                                                                     *
***********************************************************************
R0       EQU   0                       REGISTER REFERENCE
R2       EQU   2                       REGISTER REFERENCE
EXSLIHRT EQU   2                       SLIH RETURN ADDRESS REGISTER
CCABASE  EQU   7                       LCCA BASE REGISTER
R15      EQU   15                      REGISTER REFERENCE
WORKREG  EQU   14                      ALL PURPOSE REGISTER
BASEREG  EQU   9                       BASE REGISTER
CVTREG   EQU   13                      CVT BASE REGISTER
XTRBASE  EQU   10                      TRACE ENTRY ADDRESS
XTRET    EQU   11                      CVT TRACE ENTRY-RETURN ADDRESS
EXSLIHET EQU   10                      SLIH ENTRY POINT ADDRESS
CCABASE2 EQU   15                      LCCA BASE REGISTER WHEN EXITING
XTCBREG  EQU   4                       TCB BASE REGISTER
RBPTR    EQU   5                       RB BASE REGISTER
XWAIT    EQU   6                       IEAQWAIT ENTRY ADDRESS
XWAITRT  EQU   2                       IEAQWAIT RETURN ADDRESS
DISPRTN  EQU   15                      DISPATCHER ENTRY ADDRESS
         SPACE 6
***********************************************************************
*                                                                     *
*                      CONSTANT EQUATES                               *
*                                                                     *
***********************************************************************
C0       EQU   0                       CONSTANT VALUE
C1       EQU   1                       CONSTANT VALUE
C28      EQU   28                      CONSTANT VALUE
C48      EQU   48                      CONSTANT VALUE
L64      EQU   64                      LENGTH VALUE
L8       EQU   8                       LENGTH VALUE
L2       EQU   2                       LENGTH VALUE
M15      EQU   15                      MASK VALUE
CXFF     EQU   X'FF'                   CONSTANT VALUE
CXFA     EQU   X'FA'                   CONSTANT VALUE
TIMERCD  EQU   X'10'                   TIMER INTERRUPT CODE
INTKEY   EQU   X'40'                   INTERRUPT KEY CODE
         EJECT
***********************************************************************
*                                                                     *
*                       IEAVEEXT MAINLINE                             *
*                                                                     *
***********************************************************************
         USING PSA,0
         SPACE 2
*/* P SAVE ONE REGISTER (7) TO SET LCCA ADDR IN PSAGPREG */
         SPACE 2
         ST    CCABASE,PSAGPREG        SAVE ONE REGISTER IN THE PSA
         L     CCABASE,PSALCCAV        GET VIRTUAL ADDRESS OF LOG. CCA
         USING LCCA,CCABASE            ESTABLISH BASE TO LOGICAL CCA
         SPACE 2
*/* P SAVE ALL GPRS IN LCCAXGR1 */
         SPACE 2
         STM   R0,R15,LCCAXGR1         SAVE ALL REGS
         L     WORKREG,PSAGPREG        GET REGISTER SAVED INITALLY
         ST    WORKREG,LCCAXGR1+C28    SAVE REGISTER USED
         SPACE 2
*/* P ESTABLISH ADDRESSABILITY */
         SPACE 2
         BALR  BASEREG,C0              ESTABLISH
         USING *,BASEREG               ADDRESSABILITY
         SPACE 2
*/*ADDRESS: P GET CVT ADDR IN REG 11 */
         SPACE 2
ADDRESS  DC    0H'0'
         L     CVTREG,FLCCVT           GET CVT ADDRESS
         USING CVT,CVTREG              ESTABLISH BASE TO CVT
         SPACE 2
*/*CKREC1: D (YES,XTRACE,NO,) IS THIS A RECURSION ENTRY? */
         SPACE 2
CKREC1   DS    0H                      TEST LABEL              @VM07640
         TM    LCCAIHR1,LCCAXRC1       IS THIS A RECURSION ENTRY
         BO    XTRACE                  IF SO PROCESS RECURSIVE ENTRY
         SPACE 2
*/*SPINTST1: D (YES,NOCLK,NO,) ANY SPIN BITS ON? */
         SPACE 2
SPINTST1 DS    0H                      TEST LABEL              @VM07640
         TM    LCCASPN1,CXFF           ARE ANY SPIN BITS ON    @VM07640
         BNZ   NOCLK                   IF SO DON'T STORE TOD CLOCK VAL
         SPACE 2
*/* D (NO,CLK,YES,NOCLK) SRB MODE? */
         SPACE 2
         TM    LCCADSF2,LCCASRBM       SRB MODE INDICATED      @VM07640
         BO    NOCLK                   IF SRB DON'T STORE CLOCK@VM07640
         SPACE 2
*/*CLK: P STORE TOD CLOCK IN LCCAITOD */
         SPACE 2
CLK      DS    0H                      TEST LABEL              @VM07640
         STCK  LCCAITOD                STORE TOD CLOCK IN SMF AREA
         SPACE 2
*/*NOCLK: D (NO,NORECURS,YES,) IS TRACE TO BE DONE? */
         SPACE 2
NOCLK    DS    0H
         CLI   CVTTRACE+C1,CXFA        IS TRACE TO BE ENTERED  @VM07640
         BNE   NORECURS                IF NOT DONT TRACE       @VM07640
         SPACE 2
*/* P GET TREX ENTRY POINT TO TRACE IN REG 10 */
         SPACE 2
         L     XTRBASE,ATREX           GET EXT TRACE ENTRY ADDR@VM07640
         SPACE 2
*/*TRACEEP: L CVTTRACE-- VIA BALR 11,10 */
         SPACE 2
TRACEEP  DS    0H                      TEST LABEL              @VM07640
         BALR  XTRET,XTRBASE           BRANCH TO BR INSTRUCTION IN CVT
         SPACE 2
*/*NORECURS: P FLIP FRR STACK TO EXT FLIH 1 STACK */
         SPACE 2
NORECURS L     WORKREG,PSACSTK         GET CURRENT STACK PTR
         ST    WORKREG,PSAESAV1        SAVE CURRENT STACK PTR
         L     WORKREG,PSAESTK1        GET EXT FLIH STACK1 PTR
         ST    WORKREG,PSACSTK         MAKE EXT STACK1 CURRENT
         SPACE 2
*/* P SET EXT FLIH BIT */
         SPACE 2
         OI    PSASUP1,PSAEXT          TURN ON EXTERNAL FLIH BIT
         OI    LCCAIHR1,LCCAXRC1       TURN ON RECURSION1 FLAG
         SPACE 2
*/* P MOVE GPRS TO LCCAXGR2 */
         SPACE 2
         MVC   LCCAXGR2(L64),LCCAXGR1  MOVE REGISTERS INTO SAFE AREA
         SPACE 2
*/* P MOVE EXOPSW TO PSAEXPS1 */
         SPACE 2
         MVC   PSAEXPS1(L8),FLCEOPSW   SAVE EXTERNAL OLD PSW
         LA    EXSLIHRT,EXRTN1         PUT ADDRESS OF RETURN ADDRESS IN
*                                      SLIH RETURN REGISTER
         SPACE 2
*/*INITPR: S (,EXRTN1) PROCESS:INVOKE SLIH */
         SPACE 2
INITPR   DS    0H                      TEST LABEL
         TITLE 'IEAVEEXT- PROCESS:INVOKE SLIH TO PROCESS INTERRUPT'
         SPACE 2
*/*PROCESS: E PROCESS */
         SPACE 2
PROCESS  DS    0H                      PROCESS INTERRUPTION
         SPACE 2
*/*GTFHOOK: L ISSUE HOOK-- EID=IEAEINT TYPE=P */
         SPACE 2
GTFHOOK  DS    0H                      TEST LABEL
         HOOK  EID=IEAEINT,TYPE=BPN    GTF TRACE EXTERNAL INTERRUPT
         SPACE 2
*/* D (YES,EMSIGP,NO,) EMERGENCY SIGNAL? */
         SPACE 2
         CLC   FLCEICOD(L2),EMSIGNAL   IS INTERRUT AN EMERGENCY SIGNAL
         BE    EMSIGP                  BRANCH TO GO TO SIGP PROCESSOR
         SPACE 2
*/* D (YES,EXTIME,NO,) TIMER TYPE? */
         SPACE 2
         CLI   FLCEICOD,TIMERCD        IS INTERRUPT A TIMER TYPE
         BE    EXTIME                  BRANCH TO GO TO TIMER SLIH
         SPACE 2
*/* D (YES,EXTSIGP,NO,) EXTERNAL CALL? */
         SPACE 2
         CLC   FLCEICOD(L2),EXCALL     IS INTERRUPT AN EXTERNAL CALL
         BE    EXTSIGP                 BRANCH TO GO TO SIGP PROCESSOR
         SPACE 2
*/* D (YES,EXMFA,NO,) MALFUNCTION ALERT? */
         SPACE 2
         CLC   FLCEICOD(L2),MFA        IS INTERRUPT A MALFUNCTION ALERT
         BE    EXMFA                   BRANCH TO MFA PROCESSOR.
         SPACE 2
*/* D (YES,INTKEYTS,NO,) INTERRUPT KEY? */
         SPACE 2
         TM    FLCEICOD,CXFF           COULD INTERRUPT BE AN INTERRT
*                                      KEY INTERRUPT
         SPACE 2
*/*%PEND: R RETURN */
         SPACE 2
         BNZR  EXSLIHRT                IF NO IGNORE INTERRUPT
         TM    FLCEICOD+C1,INTKEY      IS INTERRUPT AN INTERRUPT KEY
         BZR   EXSLIHRT                IF NOT IGNORE INTERRUPT
         L     EXSLIHET,ASLKEY         GET COMM TASK ENTRY POINT
         SPACE 2
*/*INTKEYTS: L (,%PEND) EP=IEEBC1PE-- COMM TASK */
         SPACE 2
INTKEYTS DS    0H                      TEST LABEL
         BR    EXSLIHET                BRANCH TO COMM TASK
         SPACE 2
*/*EMSIGP: L (,%PEND) EP=IEAVEES-- EMERGENCY SIGNAL PROCESSOR */
         SPACE 2
EMSIGP   L     EXSLIHET,ASEMSIG        GET SIGNAL SIGP ENTRY POINT
         BR    EXSLIHET                BRANCH TO SIGP PROCESSOR
         SPACE 2
*/*EXTIME: L (,%PEND) EP=IEA0TI00-- TIMER SLIH */
         SPACE 2
EXTIME   L     EXSLIHET,ASLTIMER       GET TIMESLIH ENTRY POINT
         BR    EXSLIHET                BRANCH TO TIMER SLIH
         SPACE 2
*/*EXTSIGP: L (,%PEND) EP=IEAVEXS-- EXTERNAL CALL PROCESSOR */
         SPACE 2
EXTSIGP  L     EXSLIHET,ASEXCALL       GET EXTERNAL CALL ENTRY POINT
         BR    EXSLIHET                BRANCH TO SIGP PROCESSOR.
         SPACE 2
*/*EXMFA: L (,%PEND) EP=IGFPXMFA--  MFA PROCESSOR */
         SPACE 2
EXMFA    L     EXSLIHET,IEAVMFA        GET MFA PROCESSOR ENTRY POINT
         BR    EXSLIHET                BRANCH TO MFA PROCESSOR
         TITLE 'IEAVEEXT- EXTERNAL INTERRUPT HANDLER'
         SPACE 2
*/*EXRTN1: P RE-ESTABLISH ADDRESSABILITY */
         SPACE 2
EXRTN1   DS    0H
         USING *,EXSLIHRT              REESTABLISH ADDRESSABILITY
         L     BASEREG,AADDRESS        GET ORIGINAL BASE ADDRESS
         DROP  EXSLIHRT
         SPACE 2
*/* P CLEAR REC1 BIT */
         SPACE 2
         L     CCABASE,PSALCCAV        GET POINTER TO LOGICAL CCA
         NI    LCCAIHR1,CXFF-LCCAXRC1  CLEAR RECURSION FLAG
         SPACE 2
*/*SPINTST2: D (YES,EXINRTN,NO,SRBTST) ANY SPIN BITS ON? */
         SPACE 2
SPINTST2 DS    0H                      TEST LABEL
         TM    LCCASPN1,CXFF           ARE ANY SPIN BITS ON
         BNZ   EXINRTN                 IF SO BRANCH BACK TO INT. PROG.
         SPACE 2
*/*SRBTST: D (NO,EXDISP,YES,EXINRTN) SRB MODE? */
         SPACE 2
SRBTST   DS    0H                      TEST LABEL
         TM    LCCADSF2,LCCASRBM       SRB MODE INDICATED
         BZ    EXDISP                  IF NOT BRANCH TO RETURN TO DISP.
         SPACE 2
*/*EXINRTN: P LOAD REGS FROM LCCAXGR2 */
         SPACE 2
EXINRTN  DS    0H
         LR    CCABASE2,CCABASE        LOAD BASE TO CCA INTO REG 15
         LM    R0,R15,LCCAXGR2-LCCA(CCABASE2) RELOAD ALL REGISTERS
         SPACE 2
*/* P CLEAR EXT BIT */
         SPACE 2
         NI    PSASUP1,CXFF-PSAEXT     CLEAR EXTERNAL FLIH FLAG
         SPACE 2
*/* P RESTORE FRR STACK TO CALLER'S STACK */
         SPACE 2
         MVC   PSACSTK(4),PSAESAV1     RESTORE SAVED STACK PTR
         SPACE 2
*/*FIN2: R LPSW FROM PSAEXPS1 */
         SPACE 2
FIN2     DS    0H                      TEST LABEL
         LPSW  PSAEXPS1                RETURN TO INTERRUPTED PROGRAM
         SPACE 2
*/*EXDISP: P GET TCB ADDR FROM PSATOLD */
         SPACE 2
EXDISP   DS    0H
         L     XTCBREG,PSATOLD         GET CURRENT TCB ADDRESS
         L     DISPRTN,AIEA0DS         GET DISPATCHER ADDRESS
         SPACE 2
*/*LLTST: L (NO,NOLOCAL,YES,) SETLOCK-- LOCAL LOCK HELD? */
         SPACE 2
LLTST    DS    0H                      TEST LABEL
         SETLOCK TEST,TYPE=LOCAL,BRANCH=(NOTHELD,NOLOCAL)
*                                      IS LOCAL LOCK HELD?
         SPACE 2
*/*LLHELD: P GET ASCB ADDR FROM PSATOLD GET ASXB ADDR FROM ASCBASXB */
         SPACE 2
LLHELD   DS    0H                      TEST LABEL
         L     WORKREG,PSAAOLD         GET CURRENT ASCB ADDRESS
         USING ASCB,WORKREG            ESTABLISH BASE TO ASCB
         L     WORKREG,ASCBASXB        GET ADDRESS OF THE ASXB
         USING ASXB,WORKREG            ESTABLISH BASE TO ASXB
         SPACE 2
*/* P GET IHSA ADDR FROM ASXBIHSA */
         SPACE 2
         L     WORKREG,ASXBIHSA        GET IHSA AREA ADDRESS
         USING IHSA,WORKREG
         SPACE 2
*/* P (,EXWAIT) SAVE GPRS IN IHSAGPRS AND PSAEXPS1 IN IHSACPSW */
         SPACE 2
         MVC   IHSAGPRS(L64),LCCAXGR2  MOVE REGS TO ASXB
         MVC   IHSACPSW(L8),PSAEXPS1   MOVE PSW TO ASXB
ENDLL    DS    0H                      TEST LABEL
         B     EXWAIT                  CHECK IF WAIT-TCB
         SPACE 2
*/*NOLOCAL: P SAVE GPRS IN TCBGRS AND PSAEXPS1 IN RBOPSW */
         SPACE 2
NOLOCAL  DS    0H
         USING TCB,XTCBREG             ESTABLISH BASE TO TCB
         MVC   TCBGRS(L64),LCCAXGR2    MOVE REGS TO TCB
         L     RBPTR,TCBRBP            GET CURRENT RB ADDRESS
         USING RBSECT,RBPTR            ESTABLISH BASE TO RB
         MVC   RBOPSW(L8),PSAEXPS1     MOVE PSW TO RB
         SPACE 2
*/*EXWAIT: D (NO,EXEXIT,YES,) CURRENT TCB = WAIT? */
         SPACE 2
EXWAIT   DS    0H
         C     XTCBREG,AWAITTCB        IS CURRENT TCB THE WAIT-TCB
         BNE   EXEXIT                  BRANCH TO EXIT
         L     R2,PSAPCCAV             GET PCCA ADDRESS
         SPACE 2
*/* D (YES,EXEXIT,NO,) IS CLOCK BAD? */
         SPACE 2
         TM    PCCATODE-PCCA(R2),PCCANUTD IS CLOCK FUNCTIONING
         BO    EXEXIT                  IF NOT BRANCH AROUND IEAQWAIT
         SPACE 2
*/* P REG2= PTR(RETURN)    REG6= PTR(IEAQWAIT) */
         SPACE 2
         L     XWAIT,AQWAIT            GET IEAQWAIT ADDRESS
         SPACE 2
*/*WAITRTN: L EP=IEAQWAIT--  CALCULATE CPU WAIT TIME */
         SPACE 2
WAITRTN  DS    0H                      TEST LABEL
         BALR  XWAITRT,XWAIT           GO TO IEAQWAIT
         SPACE 2
*/*EXEXIT: P CLEAR EXTERNAL FLIH */
         SPACE 2
EXEXIT   DS    0H
         NI    PSASUP1,CXFF-PSAEXT     CLEAR EXTERNAL FLIH BIT
         SPACE 2
*/*FIN: R EXIT TO DISPATCHER */
         SPACE 2
FIN      DS    0H                      TEST LABEL
         BR    DISPRTN                 EXIT TO DISPATCHER
         TITLE 'IEAVEEXT- FIRST LEVEL OF RECURSION'
         SPACE 2
*/*XTRACE: D (NO,CKREC1,YES,) IS TRACE TO BE DONE? */
         SPACE 2
XTRACE   DS    0H
         CLI   CVTTRACE+C1,CXFA        IS TRACE TO BE ENTERED
         BNE   RECURSE1                IF NOT DONT TRACE
         SPACE 2
*/* P GET TREX ENTRY POINT TO TRACE IN REG 10 */
         SPACE 2
         L     XTRBASE,ATREX           GET EXT TRACE ENTRY ADDRESS
         SPACE 2
*/*TRACEEP2: L CVTTRACE-- VIA BALR 11,10 */
         SPACE 2
TRACEEP2 DS    0H                      TEST LABEL
         BALR  XTRET,XTRBASE           BRANCH TO BR INSTRUCTION IN CVT
         SPACE 2
*/*RECURSE1: D (YES,RECURSE2,NO,NOREC2) IS THIS A REC2? */
         SPACE 2
RECURSE1 DS    0H
         TM    LCCAIHR1,LCCAXRC2       IS THIS A SECOND RECURSION
         BO    RECURSE2                IF SO PROCESS 2ND RECURSION
         SPACE 2
*/*NOREC2: P FLIP FRR STACK TO EXT FLIH STACK 2 */
         SPACE 2
NOREC2   DS    0H                      TEST LABEL
         L     WORKREG,PSAESTK2        GET EXT FLIH STACK2 PTR
         ST    WORKREG,PSACSTK         MAKE EXT STACK2 CURRENT
         SPACE 2
*/* P SET REC2 BIT */
         SPACE 2
         OI    LCCAIHR1,LCCAXRC2       TURN ON RECURSION2 FLAG
         SPACE 2
*/* P MOVE GPRS TO LCCAXGR3 */
         SPACE 2
         MVC   LCCAXGR3(L64),LCCAXGR1  MOVE REGS TO SAFE AREA
         SPACE 2
*/* P MOVE EXOPSW TO PSAEXPS2 */
         SPACE 2
         MVC   PSAEXPS2(L8),FLCEOPSW   SAVE EXTERNAL OLD PSW
         LA    EXSLIHRT,PROCESS        PVT PROCESS ADDRESS IN REGISTER
         SPACE 2
*/*REC1PR: S PROCESS:INVOKE SLIH */
         SPACE 2
REC1PR   DS    0H                      TEST LABEL
         BALR  EXSLIHRT,EXSLIHRT       BRANCH TO PROCESS PUTTING RETURN
*                                      ADDRESS IN REGISTER
EXRTN2   DS    0H
         L     CCABASE2,PSALCCAV       GET CCA ADDRESS
         SPACE 2
*/* P CLEAR REC2 BIT */
         SPACE 2
         NI    LCCAIHR1-LCCA(CCABASE2),CXFF-LCCAXRC2  CLEAR RECURSION2
*                                      FLAG
         SPACE 2
*/* P LOAD REGS FROM LCCAXGR3 */
         SPACE 2
         LM    R0,R15,LCCAXGR3-LCCA(CCABASE2) LOAD REGISTERS
         SPACE 2
*/* P RESTORE FRR STACK TO EXT STACK 1 */
         SPACE 2
         MVC   PSACSTK(4),PSAESTK1     RESTORE EXT STACK1 PTR
         SPACE 2
*/*REC1FIN: R LPSW FROM PSAEXPS2 */
         SPACE 2
REC1FIN  DS    0H                      TEST LABEL
         LPSW  PSAEXPS2                RETURN TO INTERRUPTED EXTERNAL
*                                      INTERRUPT PROCESSOR
         TITLE 'IEAVEEXT- SECOND LEVEL OF RECURSION'
         SPACE 2
*/*RECURSE2: P FLIP FRR STACK TO EXT FLIH STACK 3 */
         SPACE 2
RECURSE2 DS    0H
         L     WORKREG,PSAESTK3        GET EXT FLIH STACK3 PTR
         ST    WORKREG,PSACSTK         MAKE EXT STACK3 CURRENT
         LA    EXSLIHRT,PROCESS        PUT PROCESS ADDRESS IN REGISTER
         SPACE 2
*/*REC2PR: S PROCESS:INVOKE SLIH */
         SPACE 2
REC2PR   DS    0H                      TEST LABEL
         BALR  EXSLIHRT,EXSLIHRT       BRANCH TO PROCESS PUTTING RETURN
*                                      ADDRESS IN REGISTER
         SPACE 2
*/*REC2RTN: P LOAD REGS FROM LCCAXGR1 */
         SPACE 2
REC2RTN  DS    0H                      TEST LABEL
         L     CCABASE2,PSALCCAV       GET CCA ADDRESS
         LM    R0,R15,LCCAXGR1-LCCA(CCABASE2) LOAD REGISTERS
         SPACE 2
*/* P RESTORE FRR STACK TO EXT FLIH STACK 2 */
         SPACE 2
         MVC   PSACSTK(4),PSAESTK2     RESTORE EXT STACK2 PTR
         SPACE 2
*/*REC2FIN: R LPSW FROM EXOPSW */
         SPACE 2
REC2FIN  DS    0H                      TEST LABEL
         LPSW  FLCEOPSW                RETURN TO INTERRUPTED EXTERNAL
*                                      INTERRUPT PROCESSOR
         SPACE 2
*/* FOOTING
*/*
*/*  */
*/*IEAVEEXT: END EXT FLIH */
         TITLE 'IEAVEEXT- CONSTANTS AND STORAGE'
***********************************************************************
*                                                                     *
*                     CONSTANTS & STORAGE                             *
*                                                                     *
***********************************************************************
         EXTRN TREX
ATREX    DC    A(TREX)                 TRACE ENTRY
IEACON2  DC    V(AHLMCIHB)             ADDRESS FOR GTF HOOK
         EXTRN IEEBC1PE
ASLKEY   DC    A(IEEBC1PE)             COMM TASK ENTRY
         EXTRN IEAVEES
ASEMSIG  DC    A(IEAVEES)              EMERGENCY SIGP ENTRY
         EXTRN IEA0TI00
ASLTIMER DC    A(IEA0TI00)             TIMER SLIH ENTRY
         EXTRN IEAVEXS
ASEXCALL DC    A(IEAVEXS)              EXTERNAL CALL SIGP ENTRY
         ENTRY IEAVMFA                 ENTRY FOR NIP
IEAVMFA  DC    V(IGFPXMFA)             MFA ENTRY POINT
         EXTRN WAITTCB
AWAITTCB DC    A(WAITTCB)              WAIT-TCB ADDRESS
         EXTRN IEAQWAIT
AQWAIT   DC    A(IEAQWAIT)             SMF WAIT-TIME ROUTINE ENTRY
         EXTRN IEA0DS
AIEA0DS  DC    A(IEA0DS)               DISPATCHER MAIN ENTRY
AADDRESS DC    A(ADDRESS)              ADCON FOR ADDRESSABILITY
MFA      DC    X'1200'                 MALFUNCTION ALERT INTERRUPT CODE
EMSIGNAL DC    X'1201'                 EMERGENCY SIGNAL INTERRUPT CODE
EXCALL   DC    X'1202'                 EXTERNAL CALL INTERRUPT CODE
         TITLE 'IEAVEEXT- PSA MAPPING'
         IHAPSA
         TITLE 'IEAVEEXT- LCCA DSECT MAPPING'
         IHALCCA
         TITLE 'IEAVEEXT- PCCA DSECT MAPPING'
         IHAPCCA
         TITLE 'IEAVEEXT- ASCB DSECT MAPPING'
         IHAASCB
         TITLE 'IEAVEEXT- ASXB DSECT MAPPING'
         IHAASXB
         TITLE 'IEAVEEXT- IHSA DSECT MAPPING'
         IHAIHSA
         TITLE 'IEAVEEXT- RB DSECT MAPPING'
         IKJRB
         TITLE 'IEAVEEXT- TCB DSECT MAPPING'
         IKJTCB
         TITLE 'IEAVEEXT- CVT DSECT MAPPING'
         CVT   DSECT=YES,PREFIX=NO,LIST=YES
         END
