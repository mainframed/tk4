         TITLE 'IEAVEVAL- VALIDITY CHECK ROUTINE'
*/** START OF SPECIFICATIONS ******************************************
*
*01*  MODULE NAME=
*             IEAVEVAL
*02*      CSECT NAME=
*             IEAVEVAL
*01*  DESCRIPTIVE NAME=
*                  VALIDITY CHECK
*01*  COPYRIGHT=
*           N/A
*01*  STATUS=
*        VS2-RELEASE2
*01*  FUNCTION=
*          VALIDITY CHECK VALIDATES AN ADDRESS OR ADDRESS RANGE BY
*          DETERMINING IF THE STORAGE KEY AND PROTECT KEY MATCH
*02*      OPERATION=
*           VALIDITY CHECK MUST BE ENTERED WITH THE LOCAL LOCK.
*           REGISTERS ARE SAVED IN A SUPERVISOR SAVE AREA FOR THE
*           MEMORY. THE INTEGRITY OF THIS SAVE AREA IS MAINTAINED BY
*           THE LOCAL LOCK.
*
*           VALIDITY CHECK SWITCHES TO THE TCBPKF KEY AND THEN FETCHES
*           AND STORES INTO THAT PAGE. AN INVALID FETCH OR STORE WILL
*           BE HANDLED BY THE FRR ROUTINE.
*
*           IF A RANGE IS SPECIFIED, EACH PAGE WITHIN THAT RANGE WILL
*           HAVE ITS STORAGE KEY CHECKED AGAINST THE TCB PROTECT KEY
*           A ZERO CONDITION CODE IS SET FOR A VALID ADDRESS OR RANGE
*           OF ADDRESSES AND A NON ZERO CONDITION CODE FOR ANY INVALID
*           SITUATION ENCOUNTERED
*01*  NOTES:
*02*      DEPENDENCIES=
*                    1= A PREALLOCATED SAVE AREA, ADDRESSABLE THROUGH
*                       THE ASXB
*                    2- BOTH 2K SEGMENTS OF A PAGE HAVE SAME STORAGE
*                       PROTECT KEY
*                    3- CONTROL BLOCKS AND MAPPING MACROS
*                         TCB
*03*          CHARACTER CODE DEPENDENCIES=
*                                   MODULE MUST BE REASSEMBLED IF ANY
*                                   CHARACTER CODE OTHER THAN EBCDIC
*                                   IS USED
*02*      RESTRICTIONS=
*                    NONE
*02*      REGISTER CONVENTIONS=
*                            R1= STARTING ADDRESS
*                            R2= ENDING ADDRESS
*                            R4= TCB ADDRESS
*                            R13= SAVE AREA ADDRESS
*                            R14= RETURN ADDRESS
*                            R15= ENTRY POINT ADDRESS
*02*      PATCH LABEL=
*                   PATCH
*01*  MODULE TYPE=
*             CSECT
*02*      PROCESSOR=
*                 ASSEMBLER
*02*      MODULE SIZE=
*                   N/A
*02*      ATTRIBUTES=
*                  NUCLEUS, ZERO PSW PROTECT KEY, REENTRANT,
*                  SUPERVISOR MODE
*
*01*  ENTRY POINT=
*              IEA0VL00
*02*      PURPOSE=
*               IEA0VL00 WILL COMPARE THE TCB PROTECT KEY WITH THE
*               STORAGE PROTECT KEY OF THE ADDRESS PASSED TO THE
*               ROUTINE TO DETERMINE IF THEY MATCH. IF THE RANGE SPANS
*               A PAGE THE SAME TEST ON PROTECT KEYS IS MADE FOR EACH
*               PAGE SPANNED.
*02*      LINKAGE=
*               BRANCH ENTERED- ADDRESS OF ENTRY POINT IN CVT0VL00
*02*      INPUT DATA=
*                  R1= STARTING ADDRESS
*                  R2= ENDING ADDRESS OR ZERO IF NO RANGE SPECIFIED
*                  R4= TCB ADDRESS OR ZERO  CURRENT TCB WILL BE USED
*                      IF ZERO IS SPECIFIED
*                  R14= RETURN ADDRESS
*02*      REGISTERS SAVED=
*                       R14-R12
*02*      REGISTER CONTENTS DURING PROCESSING=
*                                          R1= STARTING ADDRESS
*                                          R2= ENDING ADDRESS
*                                          R4= TCB ADDRESS
*                                          R13= SAVE AREA ADDRESS
*                                          R14= RETURN ADDRESS
*02*      REGISTERS RESTORED=
*                          R14-R12
*01*  ENTRY POINT=
*             IEA0VL01
*02*      PURPOSE=
*               IEA0VL01 WILL DETERMINE IF STARTING ADDRESS IS ON A
*               FULL WORD BOUNDARY AND THEN COMPARE TCB PROTECT KEY
*               WITH STORAGE PROTECT KEY OF THE ADDRESS PASSED  TO THE
*               ROUTINE TO DETERMINE IF THEY MATCH. IF THE RANGE SPANS
*               A PAGE THE SAME TEST ON PROTECT KEYS IS MADE FOR EACH
*               PAGE SPANNED.
*02*      LINKAGE=
*               BRANCH ENTERED- ADDRESS OF ENTRY POINT IN CVT0VL01
*02*      INPUT DATA=
*                  R1= STARTING ADDRESS
*                  R2= ENDING ADDRESS OR ZERO IF NO RANGE SPECIFIED
*                  R4= TCB ADDRESS OR ZERO. CURRENT TCB WILL BE USED
*                      IF ZERO IS SPECIFIED
*                  R14= RETURN ADDRESS
*02*      REGISTERS SAVED=
*                       R14-R12
*02*      REGISTER CONTENTS DURING PROCESSING=
*                                           R1= STARTING ADDRESS
*                                           R2= ENDING ADDRESS
*                                           R4= TCB ADDRESS
*                                           R13= SAVE AREA ADDRESS
*                                           R14= RETURN ADDRESS
*02*      REGISTERS RESTORED=
*                          R14-R12
*01*  EXIT- NORMAL=
*              CALLER
*02*      CONDITIONS=
*                   TCB PROTECT KEY MATCHED STORAGE PROTECT KEY FOR
*                   ALL PAGES WITHIN RANGE AND STARTING ADDRESS WAS
*                   ON FULLWORD BOUNDARY IF ENTRY POINT WAS IEA0VL01
*02*      OUTPUT DATA=
*                   R0-R3 UNCHANGED
*                   R4    TCB ADDRESS
*                   R5-R14 UNCHANGED
*                   R15   UNPREDICTABLE
*02*      RETURN CODES=
*                    NONE
*                    CONDITION CODE SET TO ZERO
*01*  EXIT- ERROR=
*             CALLER
*02*      CONDITIONS=
*                   ADDRESS WAS INVALID BECAUSE TCB PROTECT KEY DID
*                   NOT MATCH STORAGE PROTECT KEY,   ADDRESS WAS IN
*                   AN UNASSIGNED PAGE, ADDRESS WAS IN AN INVALID
*                   SEGMENT, OR ERROR RETURN CODE FROM FINDPAGE
*02*      OUTPUT DATA=
*                   R0-R3 UNCHANGED
*                   R4-   UNCHANGED IF TCB ADDRESS SPECIFIED OR IF
*                         ZERO SPECIFIED AND STARTING ADDRESS WAS
*                         NOT ON FULWORD BOUNDARY FOR IEAOVL01
*                         ENTRY POINT. OTHERWISE, CONTAINS ADDRESS OF
*                         CURRENT TCB
*                   R5-R14 UNCHANGED
*                   R15   UNPREDICTABLE
*02*      RETURN CODES=
*                    NONE
*                    CONDITION CODE SET TO NONZERO
*01*  EXTERNAL REFERENCES
*02*      ROUTINES=
*                NONE
*02*      DATA AREAS=
*                  NONE
*02*      CONTROL BLOCKS= C-CREATED, U-USED, D-DELETED, M- MODIFIED
*
*                       TCB  -U
*01*  TABLES=
*               NONE
*01*  MACROS=
*              NONE
*02*      SERIALIZATION=
*                  LOCAL LOCK
*01*  CHANGE LEVEL=
*                    REPLACES ENTRY POINTS FOR VALIDITY CHECK IN
*                    IEAVNU00
*01*  MESSAGES=
*          NONE
*01*  ABEND CODES=
*             NONE
*01*  SYSGEN=
*        LOAD MODULE= IEANUC01
*        MODULE NAME= IEAVEVAL
*
***** END OF SPECIFICATIONS ******************************************/
         EJECT
*/*IEAVEVAL: CHART VALIDITY CHECK */
*/* HEADER
*/* SEC. 3.1.8.8.17                     VALIDITY CHECK FLOWCHART
*/*                                                    PAGE  # */
*/*IEAVL01: E TEST FOR FULLWORD BOUNDARY */
*/* D (NO,,YES,VL00) ADDRESS ON FULLWORD BOUNDARY */
*/* R RETURN TO CALLER- CC NE 0 */
*/*IEAVL00: E TEST FOR VALID ADDRESS */
*/*VL00: D (NO,,YES,VL001) TCB ADDRESS SPECIFIED */
*/* P GET CURRENT TCB POINTER */
*/*VL001: P GET ADDRESS OF SAVE AREA */
*/* P SAVE CALLER'S REGISTERS */
*/* P ROUND STARTING ADDRESS DOWN TO WORD BDY */
*/* P ROUND ENDING ADDRESS DOWN  TO WORD BDY */
*/* D (YES,,NO,VL002) RANGE SPECIFIED */
*/* P DETERMINE # OF PAGES IN RANGE */
*/*VL002: P ADD 1 TO NUMBER OF PAGES */
*/* L SETFRR- ADD FRR */
*/* L MODESET- SWITCH TO TCB KEY */
*/*VL003: P CS INTO PAGE */
*/* D (YES,,NO,VL003) CS SUCCESSFUL */
*/* P ROUND TO PAGE BOUNDARY */
*/* P ADD SIZE OF PAGE TO ADDRESS */
*/* D (YES,,NO,VL003) ALL PAGES CHECKED */
*/* L MODESET- SWITCH BACK TO KEY 0 */
*/* L SETFRR- DELETE FRR */
*/* P INDICATE SUCCESS- CC=0 */
*/* R RETURN TO CALLER */
*/*VLCKFRR: CHART VALIDITY CHECK FRR */
*/* HEADER
*/* SEC. 3.1.8.8.17                VALIDITY CHECK FRR
*/*                                                       PAGE   #   */
*/*VLCKFRR: E START OF FRR ROUTINE */
*/* P SET UP ADDRESSABILITY */
*/* P SET UP POINTER TO PARM AREA */
*/* D (YES,,NO,CONTERM) CAN RETRY BE DONE */
*/* D (NO,,YES,CONTERM) RECURSIVE ABEND */
*/* P SET RECURSIVE INDICATOR */
*/* D (YES,,NO,CONTERM) PROGRAM CHECK */
*/* D (NO,,YES,RETRY) PROTECTION EXCEPTION */
*/* D (NO,,YES,RETRY) ADDRESSING EXCEPTION */
*/* D (NO,,YES,RETRY) SEGMENT TRANSLATION ERROR */
*/* D (YES,,NO,CONTERM) PAGE TRANSLATION ERROR */
*/*RETRY: P SET UP SAVE AREA ADDRESS IN SDWA */
*/* L SETRP RETRY AT VALRETRY */
*/* R RETURN TO RTM */
*/*CONTERM: P MOVE MODULE NAME TO SDWA */
*/* P MOVE CSECT NAME TO SDWA */
*/* L SETRP CONTINUE WITH TERMINATION */
*/* R RETURN TO RTM
*/*VLCKFRR: END FRR CHART */
*/*VALRETRY: CHART RETRY ROUTINE */
*/* HEADER
*/* SEC. 3.1.8.8.17           VALIDITY CHECK RETRY ROUTINE
*/*                                                    PAGE  #       */
*/*VALRETRY: E START OF RETRY ROUTINE */
*/* L MODESET SWITCH BACK TO KEY 0 */
*/* L SETFRR DELETE FRR */
*/* P SET CONDITION CODE TO NONZERO */
*/* P RESTORE REGISTERS */
*/* R RETURN TO CALLER */
*/*VALRETRY: END RETRY CHART */
*/*IEAVEVAL: END   END VALIDITY CHECK FLOWCHART       */
         EJECT
         IKJTCB
         EJECT
         IHAWSAVT
         EJECT
         IHAASCB
         EJECT
         IHAASXB
         EJECT
         IHAPSA
         EJECT
         IHAFRRS
         EJECT
         IHASDWA
         EJECT
PARMFRR  DSECT                        FRR PARAMETER AREA
SAVEPTR  DS    F                      REGISTER 13 SAVE AREA
FLAGS    DS    B                      FLAG FIELD
RECURSB  EQU   X'80'                  RECURSIVE INDICATOR
         EJECT
IEAVEVAL CSECT                  VALIDITY CHECK
* C 133000,134000 A 133600-133900                              @YM01958
         MODID BR=NO            MODULE IDENTIFIER
         ENTRY IEA0VL00,IEA0VL01  PRIMARY ENTRY POINTS
***********************************************************************
*                                                                     *
*                             E Q U A T E S                           *
*                                                                     *
***********************************************************************
ONE      EQU   1                CONSTANT 1
DISPL0   EQU   0                DISPLACEMENT ZERO
DISPL20  EQU   20               DISPLACEMENT 20
NOTZERO  EQU   5                MASK AFTER TM IF NOT ZEROS
HEX00    EQU   0                CONSTANT 0
PGBITS   EQU   12               DIVIDE BY SIZE OF PAGE
R0       EQU   0                REGISTER 0
R1       EQU   1                REGISTER 1
R2       EQU   2                REGISTER 2
R3       EQU   3                REGISTER 3
R4       EQU   4                REGISTER 4
R5       EQU   5                REGISTER 5
R6       EQU   6                REGISTER 6
R7       EQU   7                REGISTER 7
R8       EQU   8                REGISTER 8
R9       EQU   9                REGISTER 9
R10      EQU   10               REGISTER 10
R11      EQU   11               REGISTER 11
R12      EQU   12               REGISTER 12
R13      EQU   13               REGISTER 13
R14      EQU   14               REGISTER 14
R15      EQU   15               REGISTER 15
         EJECT
***********************************************************************
*                                                                     *
*       ENTRY POINT -IEA0VL01  TEST FOR STARTING ADDRESS ON A FULLWORD*
*                    BOUNDARY THEN TEST PROTECT KEYS                  *
*                                                                     *
***********************************************************************
IEA0VL01 DS    0H               ENTRY FOR FULL WORD BDY TEST
         USING *,R15            MODULE ADDRESSABILITY
         USING TCB,R4           ADDRESSABILITY FOR TCB
         USING FLC,0            ADDRESSABILITY FOR LOW CORE
***********************************************************************
*        EXECUTE A TM USING THE LOW ORDER BYTE OF THE STARTING ADDRESS*
*        AS THE MASK AND A X'03' AS THE ARGUMENT BYTE                 *
***********************************************************************
         EX    R1,VLWRDTST      STARTING ADDRESS ON FULLWORD BOUNDARY?*
         BCR   NOTZERO,R14      NO, EXIT BY R14  CC NE 0
         LA    R15,IEA0VL00     GET ADDRESS OF IEA0VL00
         BR    R15              BRANCH TO VALIDATE ADDRESS
***********************************************************************
*                        DATA FOR FULLWORD BOUNDARY TEST              *
***********************************************************************
VLWRDTST TM    VLWORD,HEX00     TEST FOR FULL WORD BOUNDARY
VLWORD   DC    X'03'            MASK TO DETERMINE IF ADDRESS ON FULL
*                               WORD BOUNDARY
        EJECT
***********************************************************************
*                                                                     *
*       ENTRY POINT- IEA0VL00  TEST FOR MATCH OF PROTECT KEYS FOR     *
*                    STARTING ADDRESS AND RANGE OF ADDRESSES          *
*                                                                     *
***********************************************************************
IEA0VL00 DS    0H               ENTRY FOR MAIN FUNCTION
         USING *,R15            MODULE ADDRESSABILITY
        EJECT
***********************************************************************
*       DETERMINE IF TCB ADDRESS SPECIFIED. IF NOT GET CURRENT TCB PTR*
***********************************************************************
         LTR   R4,R4            TCB ADDRESS SPECIFIED?
         BNZ   VLCK00           YES, BRANCH TO START VALIDITY CHECKING
         L     R4,PSATOLD       GET ADDRESS OF CURRENT TCB
        EJECT
***********************************************************************
*                  SAVE CALLER'S REGISTERS                            *
***********************************************************************
VLCK00   DS    0H
         L     R15,PSAAOLD      GET ADDRESS OF CURRENT ASCB
         USING ASCB,R15         SET UP ADDRESSABILITY FOR THE ASCB
         L     R15,ASCBASXB     GET ADDRESS OF ASXB
         USING ASXB,R15         SET UP ADDRESSABILITY FOR THE ASXB
         L     R15,ASXBSPSA     GET ADDRESS OF WSAVT
         USING WSAL,R15         SET UP ADDRESSABILITY FOR THE WSAVT
         L     R15,WSALVALC     GET ADDRESS OF VALIDITY CHECK'S SAVE
*                               AREA
         STM   R0,R15,DISPL0(R15) SAVE REGISTERS 0- 15
         LR    R10,R15          SAVE ADDRESS OF SAVE AREA
         DROP  R15
         BALR  R12,0
         USING *,R12            ESTABLISH MODULE ADDRESSABILITY
        EJECT
***********************************************************************
*                   DETERMINE RANGE FOR CHECK                         *
***********************************************************************
         SR    R8,R8            CLEAR RANGE COUNTER
         LA    R1,DISPL0(R1)    CLEAR STARTING ADDRESS         @YM03647
         LA    R2,DISPL0(R2)    CLEAR ENDING ADDRESS           @YM03647
         N     R1,WORDBDY       ROUND STARTING ADDRESS DOWN TO WORD BDY
         N     R2,PGEBDY        ROUND ENDING ADDRESS DOWN TO PAGE BDY
         BZ    VLCK02           BRANCH IF NO RANGE SPECIFIED
         LR    R3,R1            SAVE STARTING ADDRESS
         N     R3,PGEBDY        ROUND STARTING ADDRESS DOWN TO PAGE BDY
         CR    R3,R2            STARTING & ENDING ADDRESS ON SAME PAGE
         BE    VLCK02           YES, ONLY VALIDITY CHECK ONE PAGE
         LR    R8,R2            SET UP RANGE COUNTER
         SR    R8,R3            GET SIZE OF RANGE
         SRL   R8,PGBITS        DIVIDE BY SIZE OF PAGE
VLCK02   DS    0H
         LA    R8,ONE(R8)       ADD 1 TO NUMBER PAGES TO BE VALIDATED
        EJECT
***********************************************************************
*                  ESTABLISH FUNCTIONAL RECOVERY ROUTINE              *
***********************************************************************
         LA    R6,VLCKFRR       GET ADDRESS OF FRR ROUTINE
*                               ESTABLISH FRR
         SETFRR A,FRRAD=(R6),PARMAD=(R5),WRKREGS=(R5,R7)
         USING PARMFRR,R5          SET UP ADDRESSABILITY TO PARM AREA
         ST    R10,SAVEPTR         SAVE ADDRESS OF SAVE AREA
        EJECT
***********************************************************************
*              SWITCH TO TCBPKF KEY                                   *
***********************************************************************
         MODESET EXTKEY=TCB,WORKREG=6
        EJECT
***********************************************************************
*                        FETCH AND STORE TEST                         *
***********************************************************************
VLCK03   DS    0H               PAGE TEST LOOP
         L     R6,DISPL0(R1)    PICK UP WORD FROM PAGE
VLCK04   DS    0H
         CS    R6,R6,DISPL0(R1) PERFORM FETCH AND STORE
         BNZ   VLCK04           REPEAT TEST IF COMPARE UNEQUAL
***********************************************************************
*        IF CS INSTRUCTION DID NOT CAUSE A PROGRAM CHECK TEST IS      *
*        SUCCESSFUL. FRR ROUTINE WILL INTERCEPT PROGRAM CHECKS        *
***********************************************************************
         N     R1,PGEBDY        ROUND TO PAGE BOUNDARY FOR
*                               REMAINING PAGES
         A     R1,PGESIZE       INCREASE STARTING ADDRESS BY PAGE
         BCT   R8,VLCK03        REPEAT TEST IF MORE PAGES TO CHECK
        EJECT
***********************************************************************
*              SWITCH BACK TO KEY 0                                   *
***********************************************************************
         MODESET EXTKEY=SUPR        SWITCH BACK TO KEY 0
        EJECT
***********************************************************************
*                    DELETE FRR                                       *
***********************************************************************
VLCK06   DS    0H
         SETFRR D,WRKREGS=(R5,R7)     DELETE FRR
        EJECT
***********************************************************************
*                        SET CONDITION CODE                           *
***********************************************************************
         SR    R0,R0            SET CONDITION CODE EQ 0
        EJECT
***********************************************************************
*                        RESTORE REGISTERS AND RETURN                 *
***********************************************************************
VLCK08   DS    0H
*        REG 4 WAS UPDATED BEFORE REGISTERS WERE STORED               *
         LM    R0,R15,DISPL0(R10) RESTORE REGISTERS 0-15
         BR    14               RETURN TO CALLER
        EJECT
***********************************************************************
*                                                                     *
*                 S T O R A G E  C O N S T A N T S                    *
*                                                                     *
***********************************************************************
         DS    0F
WORDBDY  DC    X'FFFFFFFC'      CONSTANT TO RESET VALUE TO WORD BDY
PGEBDY   DC    X'FFFFF000'      CONSTANT TO RESET VALUE TO PAGE BDY
PGESIZE  DC    F'4096'          SIZE OF FULL PAGE
PATCH    DC    40X'00'          PATCH AREA FOR ROUTINE
         EJECT
***********************************************************************
*                                                                     *
*                        FRR ROUTINE                                  *
*                                                                     *
***********************************************************************
VLCKFRR  DS    0H
         BALR  R12,R0           ESTABLISH ADDRESSABILITY
         USING *,R12
         LR    R11,R1           SET UP PTR TO SDWA
         USING SDWA,R11
         L     R10,SDWAPARM     SET UP PTR TO PARM AREA
         USING PARMFRR,R10
         TM    SDWAERRD,SDWACLUP  CAN RETRY BE DONE?
         BNZ   CONTERM          NO, CONTINUE WITH TERMINATION
         TM    FLAGS,RECURSB    RECURSIVE ABEND?
         BO    CONTERM          YES, CONTINUE WITH TERMINATION
         OI    FLAGS,RECURSB    SET RECURSIVE INDICATOR
         TM    SDWAERRA,SDWAPCHK PROGRAM CHECK?
         BNO   CONTERM          NO, CONTINUE WITH TERMINATION
        EJECT
***********************************************************************
*                                                                     *
*                          PROGRAM CHECK                              *
*                                                                     *
***********************************************************************
         CLI   SDWAICD1,PROTERR PROTECTION EXCEPTION
         BE    RETRY            YES, EXPECTED ABEND- RETRY
         CLI   SDWAICD1,ADDRERR ADDRESSING EXCEPTION
         BE    RETRY            YES, EXPECTED ABEND- RETRY
         CLI   SDWAICD1,SEGERR  SEGMENT TRANSLATION ERROR
         BE    RETRY            YES, EXPECTED ABEND- RETRY
         CLI   SDWAICD1,PAGERR  PAGE TRANSLATION ERROR
         BNE   CONTERM          NO, NOT AN EXPECTED PGM CHECK
        EJECT
***********************************************************************
*                                                                     *
*                         EXPECTED PROGRAM CHECK                      *
*                          0C4, 0C5, 0D0, OR 0D1                      *
*                                                                     *
***********************************************************************
RETRY    DS    0H               RETRY AT VALRETRY
         L     R8,SAVEPTR       RESTORE SAVE AREA PTR IN
         ST    R8,SDWASR10      REGISTERS TO BE USED FOR RETRY
         SETRP RETADDR=VALRETRY,RECORD=NO,DUMP=NO,RETREGS=YES,RC=4,    *
               WKAREA=(R11)
         BR    R14              RETURN TO RTM
        EJECT
***********************************************************************
*                                                                     *
*                       UNEXPECTED ABEND                              *
*                                                                     *
***********************************************************************
CONTERM  DS    0H               CONTINUE WITH TERMINATION
         MVC   SDWAMODN,MODNAME INITIALIZE MODULE NAME
         MVC   SDWACSCT,CSCTNAME INITIALIZE CSECT NAME
         MVC   SDWAREXN,RECNAME  INITIALIZE RECOVERY RTN NAME
         SETRP DUMP=YES,RECORD=YES,RC=0,WKAREA=(R11)       @ZA09451
         BR    R14                RETURN TO RTM
        EJECT
***********************************************************************
*                                                                     *
*                             STORAGE CONSTANTS                       *
*                                                                     *
***********************************************************************
         DS    0D
MODNAME  DC    CL8'IEAVEVAL'    LOAD MODULE NAME
CSCTNAME DC    CL8'IEAVEVAL'    CSECT NAME
RECNAME  DC    CL8'VLCKFRR'     RECOVERY ROUTINE NAME
PROTERR  EQU   X'04'            PROTECTION ERROR INTERRUPT CODE
ADDRERR  EQU   X'05'            ADDRESSING ERROR INTERRUPT CODE
SEGERR   EQU   X'10'            SEGMENT TRANSLATION INTERRUPT CODE
PAGERR   EQU   X'11'            PAGING TRANSLATION INTERRUPT CODE
         EJECT
***********************************************************************
*                                                                     *
*                             RETRY ROUTINE                           *
*                                                                     *
***********************************************************************
VALRETRY DS    0H
         BALR  R12,0            ESTABLISH ADDRESSABILITY
         USING *,12
         MODESET EXTKEY=SUPR    RETURN TO KEY 0
         SETFRR D,WRKREGS=(R5,R7) DELETE FRR
         LTR   R10,R10          SET NONZERO CONDITION CODE
         LM    R0,R15,DISPL0(R10) RESTORE REGISTERS
         BR    R14              RETURN TO CALLER
         END
