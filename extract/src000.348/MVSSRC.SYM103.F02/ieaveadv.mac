IEAVEADV START
         TITLE 'IEAVEADV - ADDRESS VERIFIER'
*/*  START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVEADV
*
*02*     CSECT-NAME = IEAVEADV
*
*01*  DESCRIPTIVE-NAME = ADDRESS VERIFIER
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = 0
*
*01*  FUNCTION = THIS ROUTINE INVESTIGATES A PIECE OF STORAGE TO
*                DETERMINE:
*                   1) WHETHER THAT STORAGE IS ASSOCIATED WITH A
*                      STORAGE CHECK
*                   2) WHETHER A PAGE FAULT OR SEGMENT EXCEPTION
*                      WILL OCCUR WHEN THE STORAGE RANGE IS REFERENCED
*
*02*     OPERATION = THE STORAGE CHECK INVESTIFATION IS PERFORMED
*                    AS FOLLOWS:
*
*                      - INSURING THAT A STORAGE ERROR OCCURRED
*                      - INSURING SDWA STORAGE ERROR RANGE CONTAINS
*                        VALID DATA
*                      - NOTIFYING THE CALLER WHEN THE INPUT STORAGE
*                        RANGE INTERSECTS WITH THE STORAGE ERROR
*                        RANGE INDICATED IN THE SDWA (RETURN CODE=8)
*
*                    THE PAGE FAULT AND SEGMENT EXCEPTION
*                    INVESTIGATION IS PERFORMED AS FOLLOWS:
*
*                      - PERFORM LOAD REAL ADDRESS (LRA) ON BEGINNING
*                        ADDRESS OF INPUT RANGE AND NOTIFY CALLER IF
*                        UNSUCCESSFUL (RETURN CODE=4)
*                      - USE INPUT LENGTH OR 4095 (WHICHEVER IS LESS)
*                        TO CALCULATE ENDING ADDRESS OF INPUT STORAGE
*                        RANGE
*                      - PERFORM LRA ON ENDING ADDRESS OF STORAGE
*                        RANGE AND NOTIFY CALLER IF UNSUCCESSFUL
*                        (RETURN CODE=4)
*                    WHEN ALL TESTS WERE PASSED NOTIFY CALLER
*                        (RETURN CODE=0)
*
*01*   NOTES
*
*02*     DEPENDENCIES = THIS MODULE DOES NOT CONTAIN ANY HARDWARE
*                       DEPENDENCIES. THE SOFTWARE DEPENDENCIES ARE
*                       AS FOLLOWS;
*                       (1) THE CALLER MUST ACQUIRE THE SERIALIZATION
*                           MECHANISM (LOCK(S) IF ANY ARE REQUIRED)
*                           FOR THE STORAGE BEING REFERENCED.
*
*03*        CHARACTER=CODE=DEPENDENCIES = THIS MODULE IS NOT
*                                         CHARACTER CODE DEPENDENT
*
*02*     RESTRICTIONS = THIS MODULE IS CODED TO SUPPORT 24 BIT
*                       ADDRESSING
*
*                       INPUT LENGTH OF ZERO OR WRAP AROUND (HIGH
*                       ADDRESS TO LOW) STORAGE RANGES ARE NOT
*                       SUPPORTED - INDETERMINATE RESULTS
*
*                       INPUT LENGTH GREATER THAN 4095 IS NOT
*                       SUPPORTED - ONLY FIRST 4095 BYTES ARE CHECKED
*
*02*     REGISTER-CONVENTIONS = REFER TO "REGISTER EQUATES" PORTION
*                               OF THIS MODULE.
*
*02*     PATCH-LABEL = NONE WITHIN THIS MODULE.  COMMON NUCLEUS PATCH
*                      AREA SHOULD BE USED (IEAPATCH).
*
*01*  MODULE-TYPE = MODULE
*
*02*     PROCESSOR-TYPE = ASSEMBLER
*
*02*     MODULE-SIZE = APPROXIMATELY 136 BYTES OF WHICH 132 BYTES ARE
*                      EXECUTABLE AND 4 BYTES ARE DATA.
*
*02*     ATTRIBUTES = NUCLEUS CODE, REFRESHABLE, SUPERVISOR MODE,
*                     INVOKERS KEY, AND INVOKERS INTERRUPT STATUS
*
*01*  ENTRY-POINT = IEAVEADV
*
*02*     PURPOSE = PERFORM FUNCTION OF MODULE
*
*02*     LINKAGE = ANY ROUTINE CAN INVOKE THIS MODULE, VIA THE CVTADV
*                  FIELD OF THE CVT.
*
*        INPUT = THE FOLLOWING REGISTER CONTENTS ARE THE ONLY INPUT
*                TO THIS MODULE:
*
*                REGISTER 0 - LENGTH OF STORAGE RANGE
*                         1 - ADDRESS OF SDWA
*                         2 - BEGINNING ADDRESS OF STORAGE RANGE
*                      3-13 - IRRELEVANT
*                        14 - RETURN ADDRESS
*                        15 - ENTRY POINT ADDRESS
*
*02*     OUTPUT = THE FOLLOWING REGISTER CONTENTS ARE THE ONLY
*                 OUTPUT FROM THIS ENTRY POINT:
*
*                 REGISTER 0-2 - UNCHANGED
*                            3 - UNPREDICTABLE
*                         4-14 - UNCHANGED
*                           15 - RETURN CODE
*                                  0 - ADDRESS RANGE PASSED ALL TESTS
*                                  4 - PAGE FAULT OR SEGMENT EXCEPTION
*                                      WILL OCCUR IF THE STORAGE IS
*                                      REFERENCED
*                                  8 - ADDRESS RANGE IDENTIFIED WITH
*                                      STORAGE CHECK
*
*02*     REGISTER-USAGE = REFER TO THE "REGISTER EQUATES" PORTION
*                         OF THE MODULE.
*
*02*     REGISTERS-RESTORAGED = NONE
*
*01*  EXIT-NORMAL = ENDADV
*
*02*     CONDITIONS = RETURN TO CALLER, VIA BRANCH TO RETURN ADDRESS,
*                     WHEN MODULE FUNCTION IS COMPLETE
*
*02*     OUTPUT = REGISTER CONTENTS ONLY. SEE "ENTRY-POINT OUTPUT".
*
*02*     RETURN-CODES = 0 - ADDRESS RANGE PASSED ALL TESTS
*                       4 - PAGE FAULT OR SEGMENT EXCEPTION WILL
*                           OCCUR IF THE STORAGE IS REFERENCED
*                       8 - ADDRESS RANGE IDENTIFIED WITH STORAGE
*                           CHECK
*
*01*  EXIT-ERROR = NONE
*
*01*  EXTERNAL-REFERENCES
*
*02*     ROUTINES = NONE
*
*02*     DATA-AREAS = NO DATA AREAS ARE USED BY THIS MODULE
*
*02*     CONTROL-BLOCKS = SDWA   R
*
*01*  TABLES = NONE
*
*01*  MACROS = NONE
*
*02*     SERIALIZATION = NO LOCKS OR RESOURCES ARE OBTAINED BY THIS
*                        MODULE. IT IS THE CALLERS RESPONSIBILITY TO
*                        ESTABLISH THE SERIALIZATION MECHANISM PRIOR
*                        TO INVOKING THIS ROUTINE (IE - LOCAL LOCK
*                        SHOULD BE HELD WHEN VERIFYING LOCAL STORAGE)
*
*01*  CHANGE-ACTIVITY = THIS IS A NEW MODULE WRITTEN FOR VS2/R2.
*                       THE S/D CODE IS Y02753.
*
*01*  MESSAGES = NO MESSAGES ARE WRITTEN BY THIS MODULE.
*
*01*  ABEND-CODES = NO ABENDS ARE ISSUED BY THIS MODULE.
*
**** END OF SPECIFICATIONS **                                        */
* A-000000-999999                                               @Y02753
         EJECT
***********************************************************************
*              REGISTER EQUATES                                       *
***********************************************************************
R0       EQU   0                       USED TO ESTABLISH BASE ADDRESS
*                                      AND DECREMENT REGISTER CONTENTS
LENGTHR0 EQU   0                       LENGTH OF STORAGE BEING VERIFIED
SDWAR1   EQU   1                       SDWA ADDRESS
CTLBLKR2 EQU   2                       CONTROL BLOCK ADDRESS
BASER3   EQU   3                       BASE REGISTER
* AS INTERFACE INDICATES - REGISTERS 4-13 ARE NOT USED
RETPTR14 EQU   14                      RETURN ADDRESS
RCR15    EQU   15                      CALLER'S RETURN CODE
WORK15   EQU   15                      WORK REGISTER
***********************************************************************
*              GENERAL EQUATES                                        *
***********************************************************************
ZERO     EQU   0                       USED FOR NULL DISPLACEMENT
FOUR     EQU   4                       USED TO SET RETURN CODE OF 4
EIGHT    EQU   8                       USED TO SET RETURN CODE OF 8
         EJECT
         BALR  BASER3,R0               ESTABLISH BASE ADDRESS
         USING *,BASER3                ESTABLISH BASE FOR CODE
         MODID BRANCH=YES
         USING SDWA,SDWAR1             ESTABLISH BASE FOR SDWA
         TITLE 'IEAVEADV - ADDRESS VERIFICATION ROUTINE'
         TM    SDWAMCHD,SDWASCK+SDWASKYF STORAGE CHECK?
         BZ    LRAPREP                 NO, SKIP CHECKING OF ERROR RANGE
         TM    SDWAMCHS,SDWASRVL       IS ERROR RANGE VALID?
         BZ    LRAPREP                 NO, SKIP CHECKING OF ERROR RANGE
         LA    WORK15,ZERO(CTLBLKR2)   CLEAR HIGH ORDER BYTE WITHOUT
*                                      MODIFYING INPUT CTL BLK ADDRESS
         C     WORK15,SDWASCKE         IS BEGINNING OF CONTROL BLOCK
*                                      GREATER THAN ENDING ADDRESS OF
*                                      ERROR RANGE?
         BH    LRAPREP                 YES, PASSED TEST - GO PREPARE
*                                      FOR NEXT FUNCTION
         AR    WORK15,LENGTHR0         ADDRESS OF BYTE PAST END OF
*                                      CONTROL BLOCK
         BCTR  WORK15,R0               BACK-UP TO LAST BYTE OF CTL BLK
         C     WORK15,SDWASCKB         IS END OF CONTROL BLOCK LESS
*                                      THAN BEGINNING ADDRESS OF
*                                      ERROR RANGE?
         BL    LRAPREP                 YES, PASSED TEST - GO PREPARE
*                                      FOR NEXT FUNCTION
         LA    RCR15,EIGHT             CONTROL BLOCK IDENTIFIED WITH
*                                      ERROR RANGE
         B     ENDADV                  GO PREPARE TO RETURN TO CALLER
LRAPREP  LA    WORK15,ZERO(CTLBLKR2)   CLEAR HIGH ORDER BYTE WITHOUT
*                                      MODIFYING  INPUT CONTROL BLOCK
*                                      ADDRESS
         LRA   WORK15,ZERO(WORK15)     IS BEGINNING ADDRESS OF CONTROL
*                                      BLOCK IN STORAGE
         BNZ   SET4                    NO, GO SET APPROPRIATE RETURN
*                                      CODE
         LA    WORK15,ZERO(CTLBLKR2)   CLEAR HIGH ORDER BYTE WITHOUT
*                                      MODIFYING INPUT CONTROL BLOCK
*                                      ADDRESS
         C     LENGTHR0,N4095          IS INPUT LENGTH GREATER THAN
*                                      4095?
         BH    USE4095                 YES, GO USE 4095 FOR LENGTH
         AR    WORK15,LENGTHR0         SUM BEGINNING ADDRESS AND LENGTH
*                                      RESULTS IN BEING ONE BYTE PAST
*                                      END OF BLOCK
         B     DOLRA                   GO PERFORM LOAD REAL ADDRESS
USE4095  A     WORK15,N4095            SUM BEGINNING ADDRESS AND 4095
*                                      TO OBTAIN ENDING ADDRESS OF
*                                      CONTROL BLOCK
DOLRA    BCTR  WORK15,R0               BACK-UP TO LAST BYTE OF CONTROL
*                                      BLOCK
         LRA   WORK15,ZERO(WORK15)     END ADDRESS OF CONTROL BLOCK
*                                      IN STORAGE?
         BNZ   SET4                    NO, GO SET APPROPRIATE RETURN
*                                      CODE
         SR    RCR15,RCR15             SET RETURN CODE INDICATING
*                                      CONTROL BLOCK PASSED ALL TESTS
         B     ENDADV                  GO PREPARE TO RETURN TO CALLER
SET4     LA    RCR15,FOUR              SET RETURN CODE TO INDICATE
*                                      LRA FAILURE
ENDADV   BR    RETPTR14                RETURN TO CALLER
         EJECT
***********************************************************************
*              CONSTANTS                                              *
***********************************************************************
N4095    DC    F'4095'                 MAXIMUM INPUT LENGTH
         EJECT
         IHASDWA
         END
