TLCB     TITLE 'IGTLCB -- VPSS SNAP FORMATTER                          *
                        '
IGTLCB   CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'IGTLCB    77.093'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @07,0                                            01S0001
@PSTART  LA    @08,4095(,@07)                                   01S0001
         USING @PSTART,@07                                      01S0001
         USING @PSTART+4095,@08                                 01S0001
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
*   RSSNAME=R0F;                    /* SAVE SUBSYSTEM NAME           */
         LR    RSSNAME,R0F                                      01S0223
*   RABDPLPT=R1P;                   /* SAVE ABDPL ADDRESS            */
         LR    RABDPLPT,R1P                                     01S0224
*   RFY                                                         01S0225
*    (R0F,                                                      01S0225
*     R1P) UNRSTD;                  /* FINISHED WITH INPUT REGISTERS */
*   RFY                                                         01S0226
*     ABDPL BASED(RABDPLPT);        /* TELL PL/S OF POINTER          */
         EJECT
*                                                               01S0227
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE SAVEAREA/WORKAREA AND SAVE INPUT VALUES            */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0227
*   DO;                             /* START OF SEGMENT              */
*                                                               02S0227
*     /***************************************************************/
*     /*                                                             */
*     /* BUILD A PLS SAVEAREA/WORKAREA. THEN SAVE THE INPUT          */
*     /* PARAMETERS.                                                 */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0228
*     RFY                                                       02S0228
*       R1P RSTD;                   /* GETMAIN INTERFACE             */
*     IF ADPLSNPR=BOFF THEN         /* IF SNAP ENTRY, USE            */
         TM    ADPLSNPR(RABDPLPT),B'10000000'                   02S0229
         BNZ   @RF00229                                         02S0229
*       DO;                         /* VPSS STORAGE MANAGEMENT.      */
*         GEN(MODESET EXTKEY=SCHED)                             02S0231
*         NOREFS NOSETS;            /* RUN KEY-1                     */
*                                                               02S0231
         MODESET EXTKEY=SCHED
*         /***********************************************************/
*         /*                                                         */
*         /* BUILD A STANDARD SAVEAREA/WORKAREA USING IGTUAF. INPUT  */
*         /* TO IGTUAF IS: BYTE-0 OF R0 = SUBPOOL, BYTES 1-3 OF R0 = */
*         /* LENGTH, R1 HAS THE DYNAMIC STORAGE ADDRESS. ON RETURN,  */
*         /* R1 HAS THE ADDRESS OF THE APSC.                         */
*         /*                                                         */
*         /***********************************************************/
*                                                               02S0232
*         RFY                                                   02S0232
*          (R0F,                                                02S0232
*           R1P) RSTD;              /* WORK REGISTERS                */
*         R0F=CPGSIZE×(CSP*'01000000'X);/* GETMAIN REQUIRED          */
         L     R0F,@CF05331                                     02S0233
*         GEN(GETMAIN R,LV=(0));    /* OBTAIN THE STORAGE            */
         GETMAIN R,LV=(0)
*         R0F=CPGSIZE×(CSP*'01000000'X);/* INPUT TO IGTUAF.          */
         L     R0F,@CF05331                                     02S0235
*         CALL APCVZUAF;            /* BUILD SAVEAREA/WORKAREA       */
         L     @15,APCTZUAF(,APCTPTR)                           02S0236
         BALR  @14,@15                                          02S0236
*         RFY                                                   02S0237
*           R0F UNRSTD;             /* FINISHED                      */
*         R1P->APSCCRSZ=(APSVLN+APSCLN+@SIZDATD+7)/* REQUIRED        */
*             &'0000FFF8'X;         /* SIZE ROUNDED TO DOUBLEWORD    */
         LA    @06,95                                           02S0238
         AL    @06,@SIZDATD                                     02S0238
         N     @06,@CF05102                                     02S0238
         STH   @06,APSCCRSZ(,R1P)                               02S0238
*         R1P=R1P+APSCLN;           /* SKIP THE APSC                 */
         LA    R1P,8(,R1P)                                      02S0239
*         GEN(MODESET EXTKEY=ZERO)                              02S0240
*         NOREFS NOSETS;            /* PREVIOUS SAVEAREA KEY-0       */
         MODESET EXTKEY=ZERO
*         APSVNEXT=R1P;             /* CHAIN SAVEAREA                */
         ST    R1P,APSVNEXT(,APSVPTR)                           02S0241
*         GEN(MODESET EXTKEY=SCHED)                             02S0242
*         NOREFS NOSETS;            /* NEW KEY                       */
         MODESET EXTKEY=SCHED
*         R1P->APSVPREV=APSVPTR;    /* BACK POINTER                  */
         ST    APSVPTR,APSVPREV(,R1P)                           02S0243
*         APSVPTR=R1P;              /* POINT TO NEW SAVEAREA         */
         LR    APSVPTR,R1P                                      02S0244
*       END;                        /* SAVEAREA BUILT                */
*     ELSE                          /* IF PRDMP ENTRY                */
*       DO;                         /* USE NORMAL GETMAIN.           */
         B     @RC00229                                         02S0246
@RF00229 DS    0H                                               02S0247
*         RFY                                                   02S0247
*           R0F RSTD;               /* SET R0F = REQUIRED SIZE       */
*         R0F=APSVLN+@SIZDATD;      /* (SAVEAREA + DYNAMIC AREA)     */
         LA    R0F,80                                           02S0248
         AL    R0F,@SIZDATD                                     02S0248
*         GEN(GETMAIN R,LV=(0));    /* GET STORAGE. R1P->AREA.       */
         GETMAIN R,LV=(0)
*         RFY                                                   02S0250
*           R0F UNRSTD;                                         02S0250
*         APSVNEXT=R1P;             /* CHAIN THE                     */
         ST    R1P,APSVNEXT(,APSVPTR)                           02S0251
*         R1P->APSVPREV=APSVPTR;    /* SAVEAREAS TOGETHER            */
         ST    APSVPTR,APSVPREV(,R1P)                           02S0252
*         APSVPTR=R1P;              /* POINT TO NEW SAVEAREA         */
         LR    APSVPTR,R1P                                      02S0253
*       END;                                                    02S0254
*     RFY                                                       02S0255
*       R1P UNRSTD;                 /* FINISHED WITH POINTER         */
*                                                               02S0255
@RC00229 DS    0H                                               02S0256
*     /***************************************************************/
*     /*                                                             */
*     /* BUILD DYNAMIC AREA                                          */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0256
*     RFY                                                       02S0256
*       APDATA RSTD;                /* PL/S DYNAMIC AREA POINTER     */
*     APDATA=ADDR(APSV)+APSVLN;     /* AREA AFTER EXTENDED SAVEAREA  */
         LA    APDATA,80(,APSVPTR)                              02S0257
*     GEN(USING @DATD,APDATA)                                   02S0258
*     REFS(APDATA) NOSETS;          /* TELL THE ASSEMBLER            */
*                                                               02S0258
         USING @DATD,APDATA
*     /***************************************************************/
*     /*                                                             */
*     /* SAVE INPUT VALUES                                           */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0259
*     DSSNAME=RSSNAME;              /* SUBSYSTEM NAME                */
         STCM  RSSNAME,15,DSSNAME                               02S0259
*     DABDPLPT=ADDR(ABDPL);         /* SNAP/PRDMP COMPONENT PARM LIST*/
         ST    RABDPLPT,DABDPLPT                                02S0260
*     RFY                                                       02S0261
*       ABDPL BASED(DABDPLPT);      /* TELL PLS                      */
*     RFY                                                       02S0262
*      (RSSNAME,                                                02S0262
*       RABDPLPT) UNRSTD;           /* DONE WITH REGISTER POINTERS   */
*                                                               02S0262
*     /***************************************************************/
*     /*                                                             */
*     /* INITIALIZE DYNAMIC AREA VARIABLES                           */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0263
*     DFMTSW=''B;                   /* CLEAR FORMAT SWITCHES         */
         MVI   DFMTSW,X'00'                                     02S0263
*     DLINEX=CLINEX;                /* CLEAR PRINT LINE              */
         MVC   DLINEX(120),CLINEX                               02S0264
*     DSW=''B;                      /* CLEAR PROCESSING SWITCHES     */
         MVI   DSW,X'00'                                        02S0265
*     IF ADPLSNPR=BON THEN          /* IF PRDMP ENTRY, THEN          */
         L     @15,DABDPLPT                                     02S0266
         TM    ADPLSNPR(@15),B'10000000'                        02S0266
         BNO   @RF00266                                         02S0266
*       DPRDMP=BON;                 /* SHOW RUNNING FOR PRDMP        */
         OI    DPRDMP,B'10000000'                               02S0267
*     DABNDCDE='80000FFF'X;         /* DEFAULT ABEND CODE            */
@RF00266 MVC   DABNDCDE(4),@CF05106                             02S0268
*   END;                            /* SAVEAREA BUILT                */
         EJECT
*                                                               01S0270
*   /*****************************************************************/
*   /*                                                               */
*   /* PROVIDE ESTAE PROTECTION                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0270
*   DO;                             /* START OF CODE SEGMENT         */
*                                                               02S0270
*     /***************************************************************/
*     /*                                                             */
*     /* ESTABLISH RECOVERY ENVIRONMENT. THIS EXIT WILL GAIN CONTROL */
*     /* IF AN ABEND OCCURS. A DUMP IS TAKEN, THE APPROPRIATE ERROR  */
*     /* FLAGS SET, AND CONTROL PASSED TO THE CLEANUP ROUTINE TO     */
*     /* RELEASE RESOURCES BEFORE RETURNING TO THE CALLER.           */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0271
*                                                               02S0271
*     /***************************************************************/
*     /*                                                             */
*     /* BUILD ESTAE/FRR EXIT PARAMETER LIST                         */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0271
*     GEN(MVC   DXSTAE,CXSTAE)                                  02S0271
*     REFS(CXSTAE) SETS(DXSTAE);    /* INITIALIZE ESTAE PARM LIST    */
         MVC   DXSTAE,CXSTAE
*     RFY                                                       02S0272
*      (R0P,                                                    02S0272
*       R1F,                                                    02S0272
*       R14P,                                                   02S0272
*       R15F) RSTD;                 /* INITIALIZE APES BLOCK         */
*     R0P=ADDR(APES);               /* TO ZEROS                      */
         LA    R0P,APES                                         02S0273
*     R1F=LENGTH(APES);             /* USE MVCL TO                   */
         LA    R1F,648                                          02S0274
*     R15F=0;                       /* CLEAR, SINCE FIELD            */
         SLR   R15F,R15F                                        02S0275
*     MVCL(R0P,R14P);               /* MORE THAN 256 BYTES LONG      */
         MVCL  R0P,R14P                                         02S0276
*     RFY                                                       02S0277
*      (R0P,                                                    02S0277
*       R1F,                                                    02S0277
*       R14P,                                                   02S0277
*       R15F) UNRSTD;               /* FINISHED WITH MVCL REGS       */
*     APESID=APESIDC;               /* IN-CORE ID                    */
         MVC   APESID(4),@CC04824                               02S0278
*     APESADDR=ADDR(APES);          /* ESTAE PARM VALUE              */
         LA    @15,APES                                         02S0279
         ST    @15,APESADDR                                     02S0279
*     APESAPMV=ADDR(CMBRXZZZ);      /* MESSAGE INDEX TABLE           */
         LA    @15,CMBRXZZZ                                     02S0280
         ST    @15,APESAPMV                                     02S0280
*     APESMXCD=CERRN99;             /* MAXIMUM APESCODE VALUE        */
         MVI   APESMXCD,X'01'                                   02S0281
*     APESFREC=BON;                 /* RECORD ON LOGREC              */
*     APESFSDP=BON;                 /* SDUMP ON ERROR                */
         OI    APESFREC,B'01100000'                             02S0283
*     APESMOD='IGTLCB  ';           /* MODULE IN CONTROL             */
         MVC   APESMOD(8),@CC05112                              02S0284
*     APESPROC='IGTLCB  ';          /* CSECT IN CONTROL              */
         MVC   APESPROC(8),@CC05112                             02S0285
*     APESFRR='        ';           /* NO FRR ID                     */
         MVC   APESFRR(8),@CC04846                              02S0286
*     APESREGP=ADDR(APESREGZ);      /* DEFAULT REGISTER SAVEAREA     */
         LA    @15,APESREGZ                                     02S0287
         ST    @15,APESREGP                                     02S0287
*     RFY                                                       02S0288
*      (R15P) RSTD;                 /* SET REGISTER 15 TO            */
*     R15P=ADDR(ERRDUMP);           /* BACKOUT ROUTINE               */
         LA    R15P,ERRDUMP                                     02S0289
*     STM(R0F,R15F,APESREGZ);       /* SAVE REGISTERS FOR RETRY      */
         STM   R0F,R15F,APESREGZ                                02S0290
*     RFY                                                       02S0291
*       R15P UNRSTD;                /* FINISHED WITH 15              */
*     APESCODE=CERRN99;             /* 'UNKNOWN' ERROR               */
         MVI   APESCODE,X'01'                                   02S0292
*     IF DPRDMP=BOFF THEN           /* IF RUNNING FOR SNAP,          */
         TM    DPRDMP,B'10000000'                               02S0293
         BNZ   @RF00293                                         02S0293
*       DO;                         /* ISSUE ESTAE.                  */
*         RFY                                                   02S0295
*           RIGTUKA RSTD;           /* POINTS TO EXIT ROUTINE        */
*         RIGTUKA=ADDR(APCVZUKA);   /* (IGTUKA).                     */
         L     RIGTUKA,APCTZUKA(,APCTPTR)                       02S0296
*         GEN REFS(APESADDR,APSVPTR,DXSTAE,RIGTUKA,FLCCVT,PSA,CVTSV60,
*             CVTMAP) SETS(DXSTAE);                             02S0297
*                                   /*
         IGTYSTAE (RIGTUKA),       IGTUKA IS EXIT ROUTINE              *
               PARAM=APESADDR,     ADDR OF APES IS PARAMETER LIST      *
               BRANCH=YES,         BRANCH ENTRY                        *
               SVEAREA=(APSVPTR),  USE REGISTER 13 SAVEAREA            *
               KEY=1,              CURRENTLY IN KEY-1 - RESET          *
               MF=(E,DXSTAE)       EXECUTE FORM OF THE MACRO
*         RFY                                                   02S0298
*          (R15F) RSTD;             /* ESTAE RETURN CODE             */
*         RFY                                                   02S0299
*           RIGTUKA UNRSTD;         /* DONE WITH EXIT POINTER        */
*         IF R15F^=0 THEN           /* IF ESTAE FAILED,              */
         LTR   R15F,R15F                                        02S0300
         BNZ   @RT00300                                         02S0300
*           GOTO NODUMP;            /* THEN DO NOT FORMAT BLOCKS     */
*         ELSE                      /* IF ESTAE WORKED,              */
*           APESFSTE=BON;           /* SHOW IT.                      */
         OI    APESFSTE,B'00000010'                             02S0302
*         RFY                                                   02S0303
*           R15F UNRSTD;            /* ESTAE RETURN CODE PROCESSED   */
*       END;                        /* SNAP'S ESTAE ISSUED.          */
*   END;                            /* ESTAE ENVIRONMENT SET         */
@RF00293 DS    0H                                               02S0306
         EJECT
*                                                               01S0306
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD SNAP/PRDMP MEMORY ACCESS BLOCKS                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0306
*   DO;                             /* START OF SEGMENT              */
*                                                               02S0306
*     /***************************************************************/
*     /*                                                             */
*     /* BUILD CONTROL BLOCKS REQUIRED TO ACCESS MEMORY FOR SNAP OR  */
*     /* PRDMP EXECUTION. THIS ALLOWS THE MAINLINE CODE TO RUN       */
*     /* INDEPENDANT OF THE CALLER (SNAP.PRDMP).                     */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0307
*                                                               02S0307
*     /***************************************************************/
*     /*                                                             */
*     /* SET DXLATOR TO ADDRESS OF 'SNAPXLT' OR 'PRDMPXLT'. THESE    */
*     /* ROUTINES TRANSLATE THE SPECIFIED 'RMEMORY' ADDRESS TO A     */
*     /* CURRENT ADDRESS (PRDMP COMPATIBILITY).                      */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0307
*     IF DPRDMP=BOFF THEN           /* IF SNAP ENTRY,                */
         TM    DPRDMP,B'10000000'                               02S0307
         BNZ   @RF00307                                         02S0307
*       DXLATOR=ADDR(SNAPXLT);      /* USE SNAPXLT TO TRANSLATE.     */
         LA    @15,SNAPXLT                                      02S0308
         ST    @15,DXLATOR                                      02S0308
*     ELSE                          /* IS PRDMP, USE PRDMPXLT TO     */
*       DO;                         /* CONVERT DUMP ADDRESS TO       */
         B     @RC00307                                         02S0309
@RF00307 DS    0H                                               02S0310
*         DXLATOR=ADDR(PRDMPXLT);   /* PRDMP BUFFER ADDRESS.         */
         LA    @15,PRDMPXLT                                     02S0310
         ST    @15,DXLATOR                                      02S0310
*         DXLATVIR='FFFFFFFF'X;     /* FORCE CALL TO PRDMP MEMORY
*                                      ACCESS ROUTINE ON 1ST CALL.   */
         MVC   DXLATVIR(4),@CF05118                             02S0311
*       END;                        /* TRANSLATE RTN SET             */
*     RFY                                                       02S0313
*       RMEMORY RSTD;               /* ADDRESS TRANSLATION REGISTER  */
*                                                               02S0313
@RC00307 DS    0H                                               02S0314
*     /***************************************************************/
*     /*                                                             */
*     /* SAVE THE BOUNDS OF GLOABAL STORAGE. THE FOLLOWING TWO RANGES*/
*     /* DENOTE GLOBAL (ADDRESSABLE FROM ALL ADDRESS SPACES) AREAS:  */
*     /* (1) 0-CVTNUCB (1ST BYTE PAST NUCLEUS) AND (2)               */
*     /* CVTSHRVM-'00FFFFFF'X (CSA THRU END OF VIRTUAL MEMORY).      */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0314
*     DASID=ADPLASID;               /* SAVE INPUT ASID               */
         L     @15,DABDPLPT                                     02S0314
         LH    DASID,ADPLASID(,@15)                             02S0314
*     DNUCEND='00FFFFFF'X;          /* FORCE CURRENT ACCESSES TO     */
         L     DNUCEND,@CF05120                                 02S0315
*     DCSABEG=0;                    /* ASSUME GLOBAL MEMORY          */
         SLR   DCSABEG,DCSABEG                                  02S0316
*     DXBLKID=CXCVT;                /* FIND RANGE OF GLOBAL          */
         MVI   DXBLKID,X'0A'                                    02S0317
*     DBLKADDR=ADDR(ADPLCVT->CVT);  /* MEMORY FROM THE CVT           */
         L     @15,ADPLCVT(,@15)                                02S0318
         ST    @15,DBLKADDR                                     02S0318
*     RMEMORY=ADDR(ADPLCVT->CVTNUCB);/* SHOULD BE NO PROBLEM         */
         LA    RMEMORY,CVTNUCB(,@15)                            02S0319
*     CALL XLTE;                    /* REFERENCING CVT SINCE         */
         L     @15,DXLATOR                                      02S0320
         BALR  @14,@15                                          02S0320
*     DNUCEND=RMEMORY->I031P-1;     /* PREVIOUS PROGRAMS HAVE        */
         L     DNUCEND,I031P(,RMEMORY)                          02S0321
         BCTR  DNUCEND,0                                        02S0321
*     RMEMORY=ADDR(ADPLCVT->CVTSHRVM);/* REFERENCED IT.              */
         L     @01,DABDPLPT                                     02S0322
         L     RMEMORY,ADPLCVT(,@01)                            02S0322
         LA    RMEMORY,CVTSHRVM(,RMEMORY)                       02S0322
*     CALL XLTE;                    /* (FORMAT COMMAND REQUIRES      */
         L     @15,DXLATOR                                      02S0323
         BALR  @14,@15                                          02S0323
*     DCSABEG=RMEMORY->I031P;       /* CVT TO EXIST).                */
*                                                               02S0324
         L     DCSABEG,I031P(,RMEMORY)                          02S0324
*     /***************************************************************/
*     /*                                                             */
*     /* OBTAIN ABEND CODE FROM APCT. USED FOR RECURSION             */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0325
*     DXBLKID=CXAPCT;               /* BLOCK BEING REFERENCED        */
         MVI   DXBLKID,X'01'                                    02S0325
*     DBLKADDR=ADDR(APCT);          /* ADDRESS OF BLOCK              */
         ST    APCTPTR,DBLKADDR                                 02S0326
*     RMEMORY=ADDR(APCTABND);       /* FIND ABEND CODE               */
         LA    RMEMORY,APCTABND(,APCTPTR)                       02S0327
*     CALL XLTE;                    /* SET RMEMORY = ADDR(APCTABND)  */
         L     @15,DXLATOR                                      02S0328
         BALR  @14,@15                                          02S0328
*     DABNDCDE=RMEMORY->I031F;      /* SAVE FOR RECURSION ERROR      */
         L     @15,I031F(,RMEMORY)                              02S0329
         ST    @15,DABNDCDE                                     02S0329
*   END;                            /* END OF SEGMENT                */
         EJECT
*                                                               01S0331
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE IF USER OR MONITOR. IF NEITHER, EXIT.               */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0331
*   DO;                             /* START OF SEGMENT              */
*                                                               02S0331
*     /***************************************************************/
*     /*                                                             */
*     /* DETERMINE IF CURRENT ADDRESS SPACE IS USER OR MONITOR. ALSO */
*     /* SAVE INDICATOR FOR USER OR MONITOR.                         */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0332
*     DXBLKID=CXAPCT;               /* BLOCK BEING REFERENCED        */
         MVI   DXBLKID,X'01'                                    02S0332
*     DBLKADDR=ADDR(APCT);          /* ADDRESS OF BLOCK              */
         ST    APCTPTR,DBLKADDR                                 02S0333
*     RMEMORY=ADDR(APCTAPVU);       /* APVU POINTER OFFSET           */
         LA    RMEMORY,APCTAPVU(,APCTPTR)                       02S0334
*     CALL XLTE;                    /* TRANSLATE IT                  */
         L     @15,DXLATOR                                      02S0335
         BALR  @14,@15                                          02S0335
*     RMEMORY=RMEMORY->I031F;       /* POINT TO APVU                 */
         L     RMEMORY,I031F(,RMEMORY)                          02S0336
*     DXBLKID=CXAPVU;               /* BLOCK BEING REFERENCED        */
         MVI   DXBLKID,X'02'                                    02S0337
*     DBLKADDR=RMEMORY;             /* ADDRESS OF BLOCK              */
         ST    RMEMORY,DBLKADDR                                 02S0338
*     RMEMORY=ADDR(RMEMORY->APVUAUSE(ADPLASID));/* FIND APVU ENTRY   */
         L     @01,DABDPLPT                                     02S0339
         LH    @15,ADPLASID(,@01)                               02S0339
         SLA   @15,2                                            02S0339
         LA    @15,APVUAUSE-4(@15,RMEMORY)                      02S0339
         LR    RMEMORY,@15                                      02S0339
*     CALL XLTE;                    /* TRANSLATE IT                  */
         L     @15,DXLATOR                                      02S0340
         BALR  @14,@15                                          02S0340
*     DVUAUSE=(RMEMORY->I031F);     /* SAVE APVU ENTRY (1-WORD)      */
         L     @15,I031F(,RMEMORY)                              02S0341
         ST    @15,DVUAUSE                                      02S0341
*     IF DVUSER=BOFF&               /* IF BOTH FLAGS OFF,            */
*         DVUMON=BOFF THEN          /* JUST EXIT.                    */
         TM    DVUSER,B'11000000'                               02S0342
         BZ    @RT00342                                         02S0342
*       GOTO NODUMP;                /* (NO FORMATTING REQUIRED)      */
*     IF DVUMON=BON THEN            /* IF MONITOR, SET INDICATOR     */
@RF00342 TM    DVUMON,B'01000000'                               02S0344
         BNO   @RF00344                                         02S0344
*       DMONITOR=BON;               /* ELSE IS USER.                 */
         OI    DMONITOR,B'01000000'                             02S0345
*   END;                            /* ASCB USES 3838 SUBSYSTEM      */
@RF00344 DS    0H                                               02S0347
         EJECT
*                                                               01S0347
*   /*****************************************************************/
*   /*                                                               */
*   /* MEMORY EITHER USER OR MONITOR. PRINT TITLE.                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0347
*   DO;                             /* START OF SEGMENT              */
*                                                               02S0347
*     /***************************************************************/
*     /*                                                             */
*     /* PRINT THE HEADER LINE: SSSS CONTROL BLOCKS                  */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0348
*     CALL SKIP(3);                 /* SKIP 3 LINES                  */
         LA    @01,@AL00348                                     02S0348
         BAL   @14,SKIP                                         02S0348
*     DLINE1=CLINE1;                /* SSSS CONTROL BLOCKS           */
         MVC   DLINE1(19),CLINE1                                02S0349
*     DLINE1A=DSSNAME;              /* REPLACE SSSS WITH SUBSYS NAME */
         MVC   DLINE1A(4),DSSNAME                               02S0350
*     CALL PRINT;                   /* PRINT TITLE                   */
         BAL   @14,PRINT                                        02S0351
*     CALL SKIP(2);                 /* SKIP 2 MORE LINES             */
         LA    @01,@AL00352                                     02S0352
         BAL   @14,SKIP                                         02S0352
*   END;                            /* TITLE PRINTED                 */
*   APESRTRY=ADDR(ERRDUMP);         /* PRINT MSG IF FAILURE          */
         LA    @15,ERRDUMP                                      01S0354
         L     @14,APESREGP                                     01S0354
         ST    @15,APESRTRY(,@14)                               01S0354
*   GEN(SPACE 1)                                                01S0355
*   NOREFS NOSETS FLOWS(ERRDUMP) SEQFLOW;/* SHOW PL/S ERROR FLOW     */
         SPACE 1
*                                                               01S0356
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS EITHER MONITOR OR USER CONTROL BLOCKS                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0356
*   IF DMONITOR=BOFF THEN           /* IF NOT MONITOR, MUST          */
         TM    DMONITOR,B'01000000'                             01S0356
         BZ    @RT00356                                         01S0356
*     GOTO USERDUMP;                /* BE USER SO GO PROCESS.        */
         EJECT
*                                                               01S0358
*   /*****************************************************************/
*   /*                                                               */
*   /* MONITOR CONTROL BLOCKS                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0358
*   DO;                             /* PRINT MONITOR CONTROL BLOCKS  */
*                                                               02S0358
*     /***************************************************************/
*     /*                                                             */
*     /* VPSS MONITOR HAS REQUESTED A SNAP. THE FOLLOWING CONTROL    */
*     /* BLOCKS ARE FORMATTED: APCT, APVU, APUB, APDS, AND APIO.     */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0359
*                                                               02S0359
*     /***************************************************************/
*     /*                                                             */
*     /* SET OPTIONS ON WHICH CONTROL BLOCKS ARE TO BE PRINTED       */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0359
*     DXBLKID=CXAPCT;               /* CONTROL BLOCK BEING REFERENCED*/
         MVI   DXBLKID,X'01'                                    02S0359
*     DBLKADDR=ADDR(APCT);          /* ADDRESS OF BLOCK              */
         ST    APCTPTR,DBLKADDR                                 02S0360
*     RMEMORY=ADDR(APCTDMPM);       /* ADDRESS OF DUMP OPTIONS       */
         LA    RMEMORY,APCTDMPM(,APCTPTR)                       02S0361
*     CALL XLTE;                    /* FIND THEM                     */
         L     @15,DXLATOR                                      02S0362
         BALR  @14,@15                                          02S0362
*     DPRTFLGS=RMEMORY->I031F;      /* SAVE OPTIONS                  */
*                                                               02S0363
         L     @15,I031F(,RMEMORY)                              02S0363
         ST    @15,DPRTFLGS                                     02S0363
*     /***************************************************************/
*     /*                                                             */
*     /* PRINT THE APCT                                              */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0364
*     CALL DMPAPCT;                 /* PRINT THE APCT                */
*                                                               02S0364
         BAL   @14,DMPAPCT                                      02S0364
*     /***************************************************************/
*     /*                                                             */
*     /* PRINT THE APVU                                              */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0365
*     CALL DMPAPVU;                 /* PRINT THE APVU                */
*                                                               02S0365
         BAL   @14,DMPAPVU                                      02S0365
*     /***************************************************************/
*     /*                                                             */
*     /* PRINT ALL THE APUBS.                                        */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0366
*     DXBLKID=CXAPCT;               /* BLOCK BEING REFERENCED        */
         MVI   DXBLKID,X'01'                                    02S0366
*     DBLKADDR=ADDR(APCT);          /* ADDRESS OF BLOCK              */
         ST    APCTPTR,DBLKADDR                                 02S0367
*     RMEMORY=ADDR(APCTAPUB);       /* FIND FIRST MASTER APUB        */
         LA    RMEMORY,APCTAPUB(,APCTPTR)                       02S0368
*     CALL XLTE;                    /* POINT TO IT                   */
         L     @15,DXLATOR                                      02S0369
         BALR  @14,@15                                          02S0369
*     DAPUBMST=RMEMORY->I031P;      /* FIRST MASTER APUB             */
         L     @15,I031P(,RMEMORY)                              02S0370
         ST    @15,DAPUBMST                                     02S0370
*     DO WHILE(DAPUBMST^=0);        /* SCAN ALL APUB ENTRIES         */
         B     @DE00371                                         02S0371
@DL00371 DS    0H                                               02S0372
*       DAPUBPTR=ADDR(DAPUBMST->APUB);/* PRINT MASTER APUB           */
         L     @15,DAPUBMST                                     02S0372
         ST    @15,DAPUBPTR                                     02S0372
*       CALL DMPAPUB;               /* (SUBCHANNEL 0)                */
         BAL   @14,DMPAPUB                                      02S0373
*       DXBLKID=CXAPUB;             /* BLOCK NAME                    */
         MVI   DXBLKID,X'04'                                    02S0374
*       DBLKADDR=ADDR(DAPUBMST->APUB);/* BLOCK ADDRESS               */
         L     @15,DAPUBMST                                     02S0375
         ST    @15,DBLKADDR                                     02S0375
*       RMEMORY=ADDR(DAPUBMST->APUBAPUB);/* ADDRESS OF 1ST           */
         LA    RMEMORY,APUBAPUB(,@15)                           02S0376
*       CALL XLTE;                  /* SUBCHANNEL FOR THIS 3838      */
         L     @15,DXLATOR                                      02S0377
         BALR  @14,@15                                          02S0377
*       DAPUBSUB=RMEMORY->I031P;    /* POINT TO IT                   */
         L     DAPUBSUB,I031P(,RMEMORY)                         02S0378
*       DO WHILE(DAPUBSUB^=0);      /* PROCESS ALL SUBCHANNELS       */
         B     @DE00379                                         02S0379
@DL00379 DS    0H                                               02S0380
*         DAPUBPTR=ADDR(DAPUBSUB->APUB);/* POINT TO SUBCHANNEL APUB  */
         ST    DAPUBSUB,DAPUBPTR                                02S0380
*         CALL DMPAPUB;             /* FORMAT IT                     */
         BAL   @14,DMPAPUB                                      02S0381
*         DXBLKID=CXAPUB;           /* BLOCK BEING REFERENCED        */
         MVI   DXBLKID,X'04'                                    02S0382
*         DBLKADDR=ADDR(DAPUBSUB->APUB);/* ADDRESS OF BLOCK          */
         ST    DAPUBSUB,DBLKADDR                                02S0383
*         RMEMORY=ADDR(DAPUBSUB->APUBAPUB);/* NEXT SUBCHANNEL ADDR   */
         LA    RMEMORY,APUBAPUB(,DAPUBSUB)                      02S0384
*         CALL XLTE;                /* FIND IT                       */
         L     @15,DXLATOR                                      02S0385
         BALR  @14,@15                                          02S0385
*         DAPUBSUB=RMEMORY->I031P;  /* POINT TO SUBCHANNEL           */
         L     DAPUBSUB,I031P(,RMEMORY)                         02S0386
*       END;                        /* PROCESS ALL SUBCHANNELS       */
@DE00379 LTR   DAPUBSUB,DAPUBSUB                                02S0387
         BNZ   @DL00379                                         02S0387
*       DXBLKID=CXAPUB;             /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'04'                                    02S0388
*       DBLKADDR=ADDR(DAPUBMST->APUB);/* ADDRESS OF BLOCK            */
         L     @15,DAPUBMST                                     02S0389
         ST    @15,DBLKADDR                                     02S0389
*       RMEMORY=ADDR(DAPUBMST->APUBMSTR);/* FIND NEXT MASTER         */
         LA    RMEMORY,APUBMSTR(,@15)                           02S0390
*       CALL XLTE;                  /* SUBCHANNEL (PORT-0)           */
         L     @15,DXLATOR                                      02S0391
         BALR  @14,@15                                          02S0391
*       DAPUBMST=RMEMORY->I031P;    /* POINT TO IT.                  */
         L     @15,I031P(,RMEMORY)                              02S0392
         ST    @15,DAPUBMST                                     02S0392
*     END;                          /* CONTINUE LOOP                 */
*                                                               02S0393
@DE00371 L     @15,DAPUBMST                                     02S0393
         LTR   @15,@15                                          02S0393
         BNZ   @DL00371                                         02S0393
*     /***************************************************************/
*     /*                                                             */
*     /* PRINT ALL THE APDS ENTRIES. ISSUE ENQ ON SYSZSSSS/APUB TO   */
*     /* PREVENT APDS CHAIN MODIFICATION.                            */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0394
*     CALL ENQAPUB;                 /* PREVENT MODIFY OF APDS CHAIN  */
         BAL   @14,ENQAPUB                                      02S0394
*     DXBLKID=CXAPCT;               /* BLOCK BEING REFERENCED        */
         MVI   DXBLKID,X'01'                                    02S0395
*     DBLKADDR=ADDR(APCT);          /* ADDRESS OF BLOCK              */
         ST    APCTPTR,DBLKADDR                                 02S0396
*     RMEMORY=ADDR(APCTAPDS);       /* FIND APCTAPDS                 */
         LA    RMEMORY,APCTAPDS(,APCTPTR)                       02S0397
*     CALL XLTE;                    /* RMEMORY->APCTAPDS             */
         L     @15,DXLATOR                                      02S0398
         BALR  @14,@15                                          02S0398
*     DAPDSPTR=RMEMORY->I031P;      /* POINT TO 1ST APDS             */
         L     DAPDSPTR,I031P(,RMEMORY)                         02S0399
*     RFY                                                       02S0400
*       APDS BASED(DAPDSPTR);       /* CHAIN POINTER                 */
*     DO WHILE(DAPDSPTR^=0);        /* SCAN ALL APDS ENTRIES         */
         B     @DE00401                                         02S0401
@DL00401 DS    0H                                               02S0402
*       CALL DMPAPDS;               /* FORMAT THE APDS               */
         BAL   @14,DMPAPDS                                      02S0402
*       DXBLKID=CXAPDS;             /* BLOCK BEING REFERENCED        */
         MVI   DXBLKID,X'03'                                    02S0403
*       DBLKADDR=ADDR(APDS);        /* ADDRESS OF BLOCK              */
         ST    DAPDSPTR,DBLKADDR                                02S0404
*       RMEMORY=ADDR(DAPDSPTR->APDSAPDS);/* NEXT POINTER             */
         LA    RMEMORY,APDSAPDS(,DAPDSPTR)                      02S0405
*       CALL XLTE;                  /* CONVERT IT                    */
         L     @15,DXLATOR                                      02S0406
         BALR  @14,@15                                          02S0406
*       DAPDSPTR=RMEMORY->I031P;    /* NEXT APDS                     */
         L     DAPDSPTR,I031P(,RMEMORY)                         02S0407
*     END;                          /* SCAN ALL APDS ENTRIES         */
@DE00401 LTR   DAPDSPTR,DAPDSPTR                                02S0408
         BNZ   @DL00401                                         02S0408
*     RFY                                                       02S0409
*       APDS;                       /* FINISHED WITH APDS            */
*     CALL DEQAPUB;                 /* FINISHED WITH APDS CHAIN      */
*                                                               02S0410
         BAL   @14,DEQAPUB                                      02S0410
*     /***************************************************************/
*     /*                                                             */
*     /* PRINT ALL THE APIO ENTRIES.                                 */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0411
*     DXBLKID=CXAPCT;               /* BLOCK BEING REFERENCED        */
         MVI   DXBLKID,X'01'                                    02S0411
*     DBLKADDR=ADDR(APCT);          /* ADDRESS OF BLOCK              */
         ST    APCTPTR,DBLKADDR                                 02S0412
*     RMEMORY=ADDR(APCTAPIO);       /* FIND APCTAPIO                 */
         LA    RMEMORY,APCTAPIO(,APCTPTR)                       02S0413
*     CALL XLTE;                    /* RMEMORY->APCTAPIO             */
         L     @15,DXLATOR                                      02S0414
         BALR  @14,@15                                          02S0414
*     DAPIOPTR=RMEMORY->I031P;      /* POINT TO 1ST APIO             */
         L     DAPIOPTR,I031P(,RMEMORY)                         02S0415
*     RFY                                                       02S0416
*       APIO BASED(DAPIOPTR);       /* CHAIN POINTER                 */
*     DO WHILE(DAPIOPTR^=0);        /* SCAN ALL APIO ENTRIES         */
         B     @DE00417                                         02S0417
@DL00417 DS    0H                                               02S0418
*       CALL DMPAPIO;               /* FORMAT THE APIO               */
         BAL   @14,DMPAPIO                                      02S0418
*       DXBLKID=CXAPIO;             /* BLOCK BEING REFERENCED        */
         MVI   DXBLKID,X'05'                                    02S0419
*       DBLKADDR=ADDR(APIO);        /* ADDRESS OF BLOCK              */
         ST    DAPIOPTR,DBLKADDR                                02S0420
*       RMEMORY=ADDR(DAPIOPTR->APIOAPIO);/* NEXT POINTER             */
         LA    RMEMORY,APIOAPIO(,DAPIOPTR)                      02S0421
*       CALL XLTE;                  /* CONVERT IT                    */
         L     @15,DXLATOR                                      02S0422
         BALR  @14,@15                                          02S0422
*       DAPIOPTR=RMEMORY->I031P;    /* NEXT APIO                     */
         L     DAPIOPTR,I031P(,RMEMORY)                         02S0423
*     END;                          /* SCAN ALL APIO ENTRIES         */
@DE00417 LTR   DAPIOPTR,DAPIOPTR                                02S0424
         BNZ   @DL00417                                         02S0424
*     RFY                                                       02S0425
*       APIO;                       /* FINISHED WITH APIO            */
*                                                               02S0425
*     /***************************************************************/
*     /*                                                             */
*     /* MONITOR SNAP PROCESSING COMPLETE                            */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0426
*   END;                            /* MONITOR CONTROL BLOCKS PRINTED*/
*   GOTO DONEDUMP;                  /* SKIP USER FORMATTING          */
         B     DONEDUMP                                         01S0427
         EJECT
*USERDUMP:                          /* 3838 SUBSYSTEM USER           */
*                                                               01S0428
*   /*****************************************************************/
*   /*                                                               */
*   /* USER CONTROL BLOCKS                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0428
*   DO;                             /* FORMAT USER CONTROL BLOCKS    */
*                                                               02S0428
USERDUMP DS    0H                                               02S0429
*     /***************************************************************/
*     /*                                                             */
*     /* VPSS USER REQUESTED SNAP. THE FOLLOWING CONTROL BLOCKS ARE  */
*     /* DUMPED: APCT, APVU, APDS, APDX, APUB, APIO, CHANNEL PROGRAM,*/
*     /* AND RELATED DATA.                                           */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0429
*                                                               02S0429
*     /***************************************************************/
*     /*                                                             */
*     /* SET OPTIONS ON WHICH CONTROL BLOCKS ARE TO BE PRINTED       */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0429
*     DXBLKID=CXAPCT;               /* CONTROL BLOCK BEING REFERENCED*/
         MVI   DXBLKID,X'01'                                    02S0429
*     DBLKADDR=ADDR(APCT);          /* ADDRESS OF BLOCK              */
         ST    APCTPTR,DBLKADDR                                 02S0430
*     RMEMORY=ADDR(APCTDMPU);       /* ADDRESS OF DUMP OPTIONS       */
         LA    RMEMORY,APCTDMPU(,APCTPTR)                       02S0431
*     CALL XLTE;                    /* FIND THEM                     */
         L     @15,DXLATOR                                      02S0432
         BALR  @14,@15                                          02S0432
*     DPRTFLGS=RMEMORY->I031F;      /* SAVE OPTIONS                  */
*                                                               02S0433
         L     @15,I031F(,RMEMORY)                              02S0433
         ST    @15,DPRTFLGS                                     02S0433
*     /***************************************************************/
*     /*                                                             */
*     /* PRINT THE APCT                                              */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0434
*     CALL DMPAPCT;                 /* PRINT THE APCT                */
*                                                               02S0434
         BAL   @14,DMPAPCT                                      02S0434
*     /***************************************************************/
*     /*                                                             */
*     /* PRINT THE APVU                                              */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0435
*     CALL DMPAPVU;                 /* PRINT THE APVU                */
*                                                               02S0435
         BAL   @14,DMPAPVU                                      02S0435
*     /***************************************************************/
*     /*                                                             */
*     /* IF RUNNING FOR PRDMP, FIND THE USER'S JOBSTEP TCB (LOWEST   */
*     /* JOBSTEP TCB IN THE ADDRESS SPACE). IF EXECUTING FOR SNAP,   */
*     /* THE TCB ADDRESS IS IN THE INPUT PARAMETER LIST (ADPLTCB).   */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0436
*     IF DPRDMP=BON THEN            /* IF EXECUTING FOR PRDMP,       */
         TM    DPRDMP,B'10000000'                               02S0436
         BNO   @RF00436                                         02S0436
*       DO;                         /* THEN FIND JOBSTEP TCB.        */
*         DXBLKID=CXCVT;            /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'0A'                                    02S0438
*         DBLKADDR=ADDR(ADPLCVT->CVT);/* BLOCK ADDRESS               */
         L     @01,DABDPLPT                                     02S0439
         L     @15,ADPLCVT(,@01)                                02S0439
         ST    @15,DBLKADDR                                     02S0439
*         RMEMORY=ADDR(ADPLCVT->CVTASVT);/* VECTOR TABLE POINTER     */
         LA    RMEMORY,CVTASVT(,@15)                            02S0440
*         CALL XLTE;                /* FIND ITS ADDRESS              */
         L     @15,DXLATOR                                      02S0441
         BALR  @14,@15                                          02S0441
*         RMEMORY=RMEMORY->I031P;   /* RMEMORY POINTS TO ASVT.       */
         L     RMEMORY,I031P(,RMEMORY)                          02S0442
*         DXBLKID=CXASVT;           /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'0D'                                    02S0443
*         DBLKADDR=ADDR(RMEMORY->ASVT);/* BLOCK ADDRESS              */
         ST    RMEMORY,DBLKADDR                                 02S0444
*         RMEMORY=ADDR(RMEMORY->ASVTENTY(ADPLASID));/* FIND ADDR     */
         L     @01,DABDPLPT                                     02S0445
         LH    @15,ADPLASID(,@01)                               02S0445
         SLA   @15,2                                            02S0445
         LA    @15,ASVTENTY-4(@15,RMEMORY)                      02S0445
         LR    RMEMORY,@15                                      02S0445
*         CALL XLTE;                /* OF ASVT SLOT (ASCB POINTER)   */
         L     @15,DXLATOR                                      02S0446
         BALR  @14,@15                                          02S0446
*         RMEMORY=RMEMORY->I031P;   /* RMEMORY POINTS TO ASCB.       */
         L     RMEMORY,I031P(,RMEMORY)                          02S0447
*         DXBLKID=CXASCB;           /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'0B'                                    02S0448
*         DBLKADDR=ADDR(RMEMORY->ASCB);/* BLOCK ADDRESS              */
         ST    RMEMORY,DBLKADDR                                 02S0449
*         RMEMORY=ADDR(RMEMORY->ASCBASXB);/* ASCB EXTENSION ADDRESS  */
         LA    @15,ASCBASXB(,RMEMORY)                           02S0450
         LR    RMEMORY,@15                                      02S0450
*         CALL XLTE;                /* FIND ITS ADDRESS              */
         L     @15,DXLATOR                                      02S0451
         BALR  @14,@15                                          02S0451
*         RMEMORY=RMEMORY->I031P;   /* RMEMORY POINTS TO ASXB.       */
         L     RMEMORY,I031P(,RMEMORY)                          02S0452
*         DXBLKID=CXASXB;           /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'0C'                                    02S0453
*         DBLKADDR=ADDR(RMEMORY->ASXB);/* BLOCK ADDRESS              */
         ST    RMEMORY,DBLKADDR                                 02S0454
*         RMEMORY=ADDR(RMEMORY->ASXBLTCB);/* FIND ADDR OF LOWEST     */
         LA    @15,ASXBLTCB(,RMEMORY)                           02S0455
         LR    RMEMORY,@15                                      02S0455
*         CALL XLTE;                /* TCB IN TCB READY QUEUE.       */
         L     @15,DXLATOR                                      02S0456
         BALR  @14,@15                                          02S0456
*         RMEMORY=RMEMORY->I031P;   /* RMEMORY POINTS TO TCB.        */
         L     RMEMORY,I031P(,RMEMORY)                          02S0457
*         DTCBPTR=RMEMORY;          /* DTCBPTR ALSO -> TCB.          */
         ST    RMEMORY,DTCBPTR                                  02S0458
*         DXBLKID=CXTCB;            /* FIND LOWEST DAUGHTER          */
         MVI   DXBLKID,X'0E'                                    02S0459
*         DO WHILE(RMEMORY^=0);     /* FIND LOWEST DAUGHTER BY       */
         B     @DE00460                                         02S0460
@DL00460 DS    0H                                               02S0461
*           DBLKADDR=ADDR(RMEMORY->TCB);/* FOLLOWING TCBLTC CHAIN    */
         ST    RMEMORY,DBLKADDR                                 02S0461
*           DTCBPTR=ADDR(RMEMORY->TCB);/* UNTIL 0 FOUND.             */
         ST    RMEMORY,DTCBPTR                                  02S0462
*           RMEMORY=ADDR(RMEMORY->TCBLTC);/* TCB WITH TCBLTC=0 IS    */
         LA    @15,TCBLTC(,RMEMORY)                             02S0463
         LR    RMEMORY,@15                                      02S0463
*           CALL XLTE;              /* USER TCB.                     */
         L     @15,DXLATOR                                      02S0464
         BALR  @14,@15                                          02S0464
*           RMEMORY=RMEMORY->I031P; /* GET TCB POINTER               */
         L     RMEMORY,I031P(,RMEMORY)                          02S0465
*         END;                      /* CONTINUE UNTIL OUT OF TCBS.   */
@DE00460 SLR   @15,@15                                          02S0466
         CR    RMEMORY,@15                                      02S0466
         BNE   @DL00460                                         02S0466
*         IF DTCBPTR=0 THEN         /* IF NO USER TCB, THEN          */
         C     @15,DTCBPTR                                      02S0467
         BNE   @RF00467                                         02S0467
*           DO;                     /* FINISHED DUMPING.             */
*             GOTO DONEDUMP;        /* FINISHED THE DUMP             */
         B     DONEDUMP                                         02S0469
*           END;                    /* DUMPING COMPLETE.             */
*         DBLKADDR=ADDR(DTCBPTR->TCB);/* FIND THE JOBSTEP TCB FOR    */
@RF00467 L     @15,DTCBPTR                                      02S0471
         ST    @15,DBLKADDR                                     02S0471
*         RMEMORY=ADDR(DTCBPTR->TCBJSTCB);/* FOR THE USER'S TCB.     */
         LA    RMEMORY,TCBJSTCB(,@15)                           02S0472
*         CALL XLTE;                /* USE THIS TCB FOR PROCESSING.  */
         L     @15,DXLATOR                                      02S0473
         BALR  @14,@15                                          02S0473
*         DTCBPTR=RMEMORY->I031P;   /* DTCBPTR POINTS TO THE TCB     */
         L     @15,I031P(,RMEMORY)                              02S0474
         ST    @15,DTCBPTR                                      02S0474
*       END;                        /* PRDMP TCB FOUND.              */
*     ELSE                          /* IF RUNNING FOR SNAP, TCB      */
*       DTCBPTR=ADPLTCB;            /* ADDRESS IS IN THE INPUT PARMS.*/
*                                                               02S0476
         B     @RC00436                                         02S0476
@RF00436 L     @01,DABDPLPT                                     02S0476
         L     @15,ADPLTCB(,@01)                                02S0476
         ST    @15,DTCBPTR                                      02S0476
*     /***************************************************************/
*     /*                                                             */
*     /* FIND THE ADDRESS OF DSAB Q-HEADER FIRST ENTRY (QDBFELMP)    */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0477
*     DXBLKID=CXTCB;                /* BLOCK ID BEING REFERENCED     */
@RC00436 MVI   DXBLKID,X'0E'                                    02S0477
*     DBLKADDR=ADDR(DTCBPTR->TCB);  /* BLOCK ADDRESS                 */
         L     @15,DTCBPTR                                      02S0478
         ST    @15,DBLKADDR                                     02S0478
*     RMEMORY=ADDR(DTCBPTR->TCBJSCB);/* FIND JSCB                    */
         LA    RMEMORY,TCBJSCB(,@15)                            02S0479
*     CALL XLTE;                    /* FIND JOBSTEP CONTROL BLOCK    */
         L     @15,DXLATOR                                      02S0480
         BALR  @14,@15                                          02S0480
*     RMEMORY=RMEMORY->I031P;       /* ADDRESS.                      */
         L     RMEMORY,I031P(,RMEMORY)                          02S0481
*     IF RMEMORY=0 THEN             /* IF NO JSCB, THERE IS          */
         LTR   RMEMORY,RMEMORY                                  02S0482
         BNZ   @RF00482                                         02S0482
*       DO;                         /* NOTHING MORE TO PRINT.        */
*         GOTO DONEDUMP;            /* DUMP COMPLETE                 */
         B     DONEDUMP                                         02S0484
*       END;                        /* NO JSCB PROCESSED             */
*     DXBLKID=CXJSCB;               /* BLOCK ID BEING REFERENCED     */
@RF00482 MVI   DXBLKID,X'0F'                                    02S0486
*     DBLKADDR=ADDR(RMEMORY->IEZJSCB);/* BLOCK ADDRESS               */
         ST    RMEMORY,DBLKADDR                                 02S0487
*     RMEMORY=ADDR(RMEMORY->JSCBACT);/* FIND ACTIVE JSCB             */
         LA    @15,JSCBACT(,RMEMORY)                            02S0488
         LR    RMEMORY,@15                                      02S0488
*     CALL XLTE;                    /* FIND IT                       */
         L     @15,DXLATOR                                      02S0489
         BALR  @14,@15                                          02S0489
*     RMEMORY=RMEMORY->I031P;       /* POINT TO ACTIVE JSCB          */
         L     RMEMORY,I031P(,RMEMORY)                          02S0490
*     DBLKADDR=ADDR(RMEMORY->IEZJSCB);/* BLOCK ADDRESS               */
         ST    RMEMORY,DBLKADDR                                 02S0491
*     RMEMORY=ADDR(RMEMORY->JSCDSABQ);/* FIND DSAB Q HEADER          */
         LA    @15,JSCDSABQ(,RMEMORY)                           02S0492
         LR    RMEMORY,@15                                      02S0492
*     CALL XLTE;                    /* FIND IT                       */
         L     @15,DXLATOR                                      02S0493
         BALR  @14,@15                                          02S0493
*     RMEMORY=RMEMORY->I031P;       /* POINT TO QDB                  */
         L     RMEMORY,I031P(,RMEMORY)                          02S0494
*     IF RMEMORY=0 THEN             /* IF NO QDB, THERE IS           */
         LTR   RMEMORY,RMEMORY                                  02S0495
         BNZ   @RF00495                                         02S0495
*       DO;                         /* NOTHING MORE TO PRINT.        */
*         GOTO DONEDUMP;            /* DUMP COMPLETE                 */
         B     DONEDUMP                                         02S0497
*       END;                        /* NO-QDB PROCESSED              */
*     DQDBPTR=ADDR(RMEMORY->QDB);   /* SAVE QDB ADDRESS              */
@RF00495 ST    RMEMORY,DQDBPTR                                  02S0499
*     DXBLKID=CXQDB;                /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'10'                                    02S0500
*     DBLKADDR=ADDR(RMEMORY->QDB);  /* BLOCK ADDRESS                 */
         ST    RMEMORY,DBLKADDR                                 02S0501
*     DDSABPT1=ADDR(RMEMORY->QDBFELMP);/* SAVE ADDRESS OF QUEUE 02S0502
*                                      HEADER NOTE: NOT 1ST DSAB.    */
         LA    @15,QDBFELMP(,RMEMORY)                           02S0502
         ST    @15,DDSABPT1                                     02S0502
         EJECT
*                                                               02S0503
*     /***************************************************************/
*     /*                                                             */
*     /* SCAN THE DSAB CHAIN. FOR EACH VPSS TIOT ENTRY, PRINT THE    */
*     /* ASSOCIATED CONTROL BLOCKS.                                  */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0503
*     DDSABCT1=0;                   /* NO DSABS PROCESSED YET        */
         SLR   @15,@15                                          02S0503
         STH   @15,DDSABCT1                                     02S0503
*     DO UNTIL(DDSABPTR=0);         /* SCAN ALL DSAB ENTRIES         */
@DL00504 DS    0H                                               02S0505
*       CALL ENQTIOT;               /* FREEZE DSAB MODIFICATION      */
         BAL   @14,ENQTIOT                                      02S0505
*       DXBLKID=CXQDB;              /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'10'                                    02S0506
*       DBLKADDR=DDSABPT1-          /* BLOCK ADDRESS. NOTE: DDSABPT1 */
*           (ADDR(DDSABPT1->QDBFELMP)-/* POINTS TO QDBFELMP NOT THE  */
*           ADDR(DDSABPT1->QDB));   /* QDB.                          */
         L     @15,DDSABPT1                                     02S0507
         LR    @14,@15                                          02S0507
         SL    @14,@CF03201                                     02S0507
         ST    @14,DBLKADDR                                     02S0507
*       RMEMORY=DDSABPT1;           /* QDBFELMP ADDRESS              */
         LR    RMEMORY,@15                                      02S0508
*       CALL XLTE;                  /* GET ITS ADDRESS               */
         L     @15,DXLATOR                                      02S0509
         BALR  @14,@15                                          02S0509
*       RMEMORY=RMEMORY->I031P;     /* POINT TO FIRST DSAB.          */
*                                                               02S0510
         L     RMEMORY,I031P(,RMEMORY)                          02S0510
*       /*************************************************************/
*       /*                                                           */
*       /* SKIP THE NUMBER OF DSAB ENTRIES ALREADY PROCESSED OR UNTIL*/
*       /* THE END OF THE DSAB CHAIN IS REACHED. NOTE: SINCE THE DSAB*/
*       /* CHAIN IS DYNAMIC, THE CHAIN MAY HAVE CHANGED.             */
*       /*                                                           */
*       /*************************************************************/
*                                                               02S0511
*       DXBLKID=CXDSAB;             /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'11'                                    02S0511
*       DO DDSABCT2=1 TO DDSABCT1 BY 1/* SKIP NUMBER OF ENTRIES      */
*             WHILE(RMEMORY^=0);    /* PROCESSED OR UNTIL END OF     */
         LA    @15,1                                            02S0512
         STH   @15,DDSABCT2                                     02S0512
         B     @DE00512                                         02S0512
@DL00512 LTR   RMEMORY,RMEMORY                                  02S0512
         BZ    @DC00512                                         02S0512
*         DBLKADDR=ADDR(RMEMORY->DSAB);/* BLOCK ADDRESS              */
         ST    RMEMORY,DBLKADDR                                 02S0513
*         RMEMORY=ADDR(RMEMORY->DSABFCHN);/* NEXT DSAB POINTER       */
         LA    @15,DSABFCHN(,RMEMORY)                           02S0514
         LR    RMEMORY,@15                                      02S0514
*         CALL XLTE;                /* GET ITS ADDRESS               */
         L     @15,DXLATOR                                      02S0515
         BALR  @14,@15                                          02S0515
*         RMEMORY=RMEMORY->I031P;   /* NEXT DSAB ADDRESS             */
         L     RMEMORY,I031P(,RMEMORY)                          02S0516
*       END;                        /* PREVIOUSLY PROCESSED DSAB
*                                      ENTRIES PROCESSED.            */
*                                                               02S0517
         LA    @15,1                                            02S0517
         AH    @15,DDSABCT2                                     02S0517
         STH   @15,DDSABCT2                                     02S0517
@DE00512 CH    @15,DDSABCT1                                     02S0517
         BNH   @DL00512                                         02S0517
@DC00512 DS    0H                                               02S0518
*       /*************************************************************/
*       /*                                                           */
*       /* FIND THE NEXT ENTRY FOR THIS SUBSYSTEM (DSSNAME)          */
*       /*                                                           */
*       /*************************************************************/
*                                                               02S0518
*       RFY                                                     02S0518
*         RDSABPTR RSTD;            /* USE REGISTER SCAN POINTER     */
*       RFY                                                     02S0519
*         DSAB BASED(RDSABPTR);     /* TELL PL/S                     */
*       RDSABPTR=0;                 /* THIS SUBSYSTEM DSAB NOT FOUND */
         SLR   RDSABPTR,RDSABPTR                                02S0520
*       DO WHILE(RMEMORY^=0);       /* SCAN TO END OF CHAIN OR MATCH */
         B     @DE00521                                         02S0521
@DL00521 DS    0H                                               02S0522
*         RDSABPTR=ADDR(RMEMORY->DSAB);/* CURRENT DSAB ADDRESS       */
         LR    RDSABPTR,RMEMORY                                 02S0522
*         DXBLKID=CXDSAB;           /* BLOCK BEING REFERENCED        */
         MVI   DXBLKID,X'11'                                    02S0523
*         DBLKADDR=ADDR(DSAB);      /* BLOCK ADDRESS                 */
         ST    RDSABPTR,DBLKADDR                                02S0524
*         RMEMORY=ADDR(DSABSSNM);   /* PTR TO SUBSYSTEM NAME         */
         LA    RMEMORY,DSABSSNM(,RDSABPTR)                      02S0525
*         CALL XLTE;                /* FIND ITS ADDRESS              */
         L     @15,DXLATOR                                      02S0526
         BALR  @14,@15                                          02S0526
*         IF DSSNAME=RMEMORY->I256C(1:LENGTH(DSSNAME)) THEN/* IF     */
         CLC   DSSNAME(4),I256C(RMEMORY)                        02S0527
         BNE   @RF00527                                         02S0527
*           DO;                     /* SUBSYSTEM NAME MATCHES, THEN  */
*             RMEMORY=ADDR(DSABTIOT);/* INSURE SUBSYSTEM             */
         LA    RMEMORY,DSABTIOT(,RDSABPTR)                      02S0529
*             CALL XLTE;            /* DATASET. TIOT ENTRY INDICATES */
         L     @15,DXLATOR                                      02S0530
         BALR  @14,@15                                          02S0530
*             RMEMORY=RMEMORY->I031P;/* IF SUBSYSTEM DATASET.        */
         L     RMEMORY,I031P(,RMEMORY)                          02S0531
*             DXBLKID=CXTIOT;       /* BLOCK BEING REFERENCED        */
         MVI   DXBLKID,X'12'                                    02S0532
*             DBLKADDR=ADDR(RMEMORY->TIOENTRY);/* TIOT ENTRY         */
         ST    RMEMORY,DBLKADDR                                 02S0533
*             RMEMORY=ADDR(RMEMORY->TIOESSDS);/* SUBSYSTEM FLAG      */
         LA    @02,TIOESSDS(,RMEMORY)                           02S0534
         LR    RMEMORY,@02                                      02S0534
*             CALL XLTE;            /* FIND ITS ADDRESS              */
         L     @15,DXLATOR                                      02S0535
         BALR  @14,@15                                          02S0535
*             IF EVAL(RMEMORY-      /* IF THIS IS A                  */
*                 (ADDR(DBLKADDR->TIOESSDS)-/* SUBSYSTEM DATASET     */
*                 ADDR(DBLKADDR->TIOENTRY)))->TIOESSDS=BON THEN 02S0536
         LR    @02,RMEMORY                                      02S0536
         SL    @02,@CF00073                                     02S0536
         TM    TIOESSDS(@02),B'00000010'                        02S0536
         BNO   @RF00536                                         02S0536
*               RMEMORY=0;          /* THEN FORMAT IT.               */
         SLR   RMEMORY,RMEMORY                                  02S0537
*           END;                    /* ENTRY CHECKED                 */
@RF00536 DS    0H                                               02S0539
*         IF RMEMORY^=0 THEN        /* IF MATCH NOT FOUND, THEN      */
@RF00527 LTR   RMEMORY,RMEMORY                                  02S0539
         BZ    @RF00539                                         02S0539
*           DO;                     /* CHECK NEXT DSAB ENTRY.        */
*             DXBLKID=CXDSAB;       /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'11'                                    02S0541
*             DBLKADDR=ADDR(DSAB);  /* BLOCK ADDRESS                 */
         ST    RDSABPTR,DBLKADDR                                02S0542
*             RMEMORY=ADDR(DSABFCHN);/* CHAIN PTR                    */
         LA    RMEMORY,DSABFCHN(,RDSABPTR)                      02S0543
*             CALL XLTE;            /* FIND IT                       */
         L     @15,DXLATOR                                      02S0544
         BALR  @14,@15                                          02S0544
*             RMEMORY=RMEMORY->I031P;/* POINTING AT NEXT DSAB ENTRY  */
         L     RMEMORY,I031P(,RMEMORY)                          02S0545
*             RDSABPTR=0;           /* NO MATCH SO FAR               */
         SLR   RDSABPTR,RDSABPTR                                02S0546
*             DDSABCT1=DDSABCT1+1;  /* INCREMENT COUNT DSABS CHECKED */
         LH    @02,DDSABCT1                                     02S0547
         LA    @02,1(,@02)                                      02S0547
         STH   @02,DDSABCT1                                     02S0547
*           END;                    /* NOW AT NEXT DSAB              */
*       END;                        /* MATCH FOUND OR END OF CHAIN   */
@RF00539 DS    0H                                               02S0549
@DE00521 LTR   RMEMORY,RMEMORY                                  02S0549
         BNZ   @DL00521                                         02S0549
*       DDSABCT1=DDSABCT1+1;        /* SHOW NEXT ENTRY PROCESSED     */
         LH    @02,DDSABCT1                                     02S0550
         LA    @02,1(,@02)                                      02S0550
         STH   @02,DDSABCT1                                     02S0550
*       DDSABPTR=RDSABPTR;          /* SAVE NEW DSAB ADDRESS         */
         ST    RDSABPTR,DDSABPTR                                02S0551
*       RFY                                                     02S0552
*         RDSABPTR UNRSTD;          /* DONE WITH SCAN REGISTER       */
*       CALL DEQTIOT;               /* RELEASE THE DSAB CHAIN        */
         BAL   @14,DEQTIOT                                      02S0553
         EJECT
*       IF DDSABPTR^=0 THEN         /* IF DSAB ENTRY EXISTS,         */
         L     @15,DDSABPTR                                     02S0554
         LTR   @15,@15                                          02S0554
         BZ    @RF00554                                         02S0554
*         DO;                       /* THEN PROCESS.                 */
*                                                               02S0555
*           /*********************************************************/
*           /*                                                       */
*           /* ENTRY FOR THIS SUBSYSTEM FOUND. FORMAT THE ASSOCIATED */
*           /* 3838-SUBYSTEM CONTROL BLOCKS                          */
*           /*                                                       */
*           /*********************************************************/
*                                                               02S0556
*           RFY                                                 02S0556
*             DSAB BASED(DDSABPTR); /* NEW DSAB POINTER              */
*           DXBLKID=CXDSAB;         /* BLOCK BEING REFERENCED        */
         MVI   DXBLKID,X'11'                                    02S0557
*           DBLKADDR=ADDR(DSAB);    /* BLOCK ADDRESS                 */
         ST    @15,DBLKADDR                                     02S0558
*           RMEMORY=ADDR(DSABSSCM); /* SUBSYSTEM DATA                */
         LA    RMEMORY,DSABSSCM(,@15)                           02S0559
*           CALL XLTE;              /* SUBSYSTEM DATA IS ADDRESS OF  */
         L     @15,DXLATOR                                      02S0560
         BALR  @14,@15                                          02S0560
*           DAPDSPTR=RMEMORY->I031P;/* APDS.                         */
         L     DAPDSPTR,I031P(,RMEMORY)                         02S0561
*           IF DAPDSPTR^=0 THEN     /* IF APDS EXISTS,               */
         LTR   DAPDSPTR,DAPDSPTR                                02S0562
         BZ    @RF00562                                         02S0562
*             DO;                   /* THEN PROCESS IT.              */
*               RFY                                             02S0564
*                 APDS BASED(DAPDSPTR);/* TELL PL/S                  */
*               CALL DMPAPDS;       /* FORMAT THE APDS               */
         BAL   @14,DMPAPDS                                      02S0565
*               DXBLKID=CXAPDS;     /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'03'                                    02S0566
*               DBLKADDR=ADDR(APDS);/* BLOCK ADDRESS                 */
         ST    DAPDSPTR,DBLKADDR                                02S0567
*               RMEMORY=ADDR(APDSDEB);/* DEB ADDRESS                 */
         LA    RMEMORY,APDSDEB(,DAPDSPTR)                       02S0568
*               CALL XLTE;          /* FIND ADDRESS OF DEB           */
         L     @15,DXLATOR                                      02S0569
         BALR  @14,@15                                          02S0569
*               DAPDXPTR=RMEMORY->I031P;/* (ONLY IF OPEN)            */
         L     DAPDXPTR,I031P(,RMEMORY)                         02S0570
*               IF DAPDXPTR^=0 THEN /* IF DEB EXISTS,                */
         LTR   DAPDXPTR,DAPDXPTR                                02S0571
         BZ    @RF00571                                         02S0571
*                 DO;               /* THEN FIND APDX.               */
*                   DXBLKID=CXDEB;  /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'13'                                    02S0573
*                   DBLKADDR=ADDR(DAPDXPTR->DEB);/* BLOCK ADDRESS    */
         ST    DAPDXPTR,DBLKADDR                                02S0574
*                   RMEMORY=ADDR(DAPDXPTR->DEBIRBAD);/* APDX ADDRESS */
         LA    RMEMORY,DEBIRBAD(,DAPDXPTR)                      02S0575
*                   CALL XLTE;      /* FIND ADDRESS OF APDX          */
         L     @15,DXLATOR                                      02S0576
         BALR  @14,@15                                          02S0576
*                   DAPDXPTR=EVAL(RMEMORY-/* (ONLY IF OPEN). NOTE    */
*                       (ADDR(RMEMORY->DEBIRBAD)-/* LOW 3 BYTES      */
*                       ADDR(RMEMORY->DEBBASIC)))->DEBIRBB;     02S0577
         LR    @02,RMEMORY                                      02S0577
         SL    @02,@CF00037                                     02S0577
         L     DAPDXPTR,DEBIRBB-1(,@02)                         02S0577
         LA    DAPDXPTR,0(,DAPDXPTR)                            02S0577
*                   IF DAPDXPTR^=0 THEN/* IF APDX EXISTS,            */
         LTR   DAPDXPTR,DAPDXPTR                                02S0578
         BZ    @RF00578                                         02S0578
*                     DO;           /* THEN CONTINUE.                */
*                       RFY                                     02S0580
*                         APDX BASED(DAPDXPTR);/* TELL PL/S          */
*                       DXBLKID=CXAPDS;/* SEE IF EXCLUSIVE USER      */
         MVI   DXBLKID,X'03'                                    02S0581
*                       DBLKADDR=ADDR(APDS);/* BY CHECKING           */
         ST    DAPDSPTR,DBLKADDR                                02S0582
*                       RMEMORY=ADDR(APDSOWN);/* APDS                */
         LA    RMEMORY,APDSOWN(,DAPDSPTR)                       02S0583
*                       CALL XLTE;  /* RMEMORY POINTS TO FLAG        */
         L     @15,DXLATOR                                      02S0584
         BALR  @14,@15                                          02S0584
*                       IF EVAL(RMEMORY-/* IF THIS IS EXCLUSIVE      */
*                           (ADDR(APDSOWN)-ADDR(APDS)))->APDSOWN=BON
*                         THEN      /* USER, APUB DEDICATED.         */
         LR    @04,RMEMORY                                      02S0585
         SL    @04,@CF00215                                     02S0585
         TM    APDSOWN(@04),B'10000000'                         02S0585
         BNO   @RF00585                                         02S0585
*                         RMEMORY=0;/* SET INDICATOR.                */
         SLR   RMEMORY,RMEMORY                                  02S0586
*                       IF RMEMORY=0 THEN/* IF EXCLUSIVE USER,       */
@RF00585 LTR   RMEMORY,RMEMORY                                  02S0587
         BNZ   @RF00587                                         02S0587
*                         DO;       /* FORMAT THE APUB.              */
*                           DXBLKID=CXAPDS;/* APDS POINTS TO         */
         MVI   DXBLKID,X'03'                                    02S0589
*                           DBLKADDR=ADDR(APDS);/* APUB              */
         ST    DAPDSPTR,DBLKADDR                                02S0590
*                           RMEMORY=ADDR(APDSAPUB);/* POINTER        */
         LA    RMEMORY,APDSAPUB(,DAPDSPTR)                      02S0591
*                           CALL XLTE;/* FIND IT.                    */
         L     @15,DXLATOR                                      02S0592
         BALR  @14,@15                                          02S0592
*                           DAPUBPTR=RMEMORY->I031P;/* FIND APUB     */
         L     @04,I031P(,RMEMORY)                              02S0593
         ST    @04,DAPUBPTR                                     02S0593
*                           IF DAPUBPTR^=0 THEN/* IF APUB EXISTS     */
         LTR   @04,@04                                          02S0594
         BZ    @RF00594                                         02S0594
*                             CALL DMPAPUB;/* FORMAT THE APUB        */
         BAL   @14,DMPAPUB                                      02S0595
*                         END;      /* APUB FORMATTED                */
@RF00594 DS    0H                                               02S0597
*                       CALL DMPAPDX;/* FORMAT THE APDX              */
@RF00587 BAL   @14,DMPAPDX                                      02S0597
*                       DXBLKID=CXAPDX;/* BLOCK BEING REFERENCED     */
         MVI   DXBLKID,X'08'                                    02S0598
*                       DBLKADDR=ADDR(APDX);/* ADDRESS               */
         ST    DAPDXPTR,DBLKADDR                                02S0599
*                       RMEMORY=ADDR(APDXIOCT);/* APIO CT            */
         LA    RMEMORY,APDXIOCT(,DAPDXPTR)                      02S0600
*                       CALL XLTE;  /* FIND COUNT                    */
         L     @15,DXLATOR                                      02S0601
         BALR  @14,@15                                          02S0601
*                       DAPIOCT1=RMEMORY->I015F;/* SAVE COUNT        */
         LH    @04,I015F(,RMEMORY)                              02S0602
         STH   @04,DAPIOCT1                                     02S0602
*                       DO DAPIOCT1=DAPIOCT1 TO 1 BY-1;/* APIOS      */
         B     @DE00603                                         02S0603
@DL00603 DS    0H                                               02S0604
*                         DXBLKID=CXAPDX;/* REFERENCE BLOCK ID       */
         MVI   DXBLKID,X'08'                                    02S0604
*                         DBLKADDR=ADDR(APDX);/* BLOCK ADDR          */
         ST    DAPDXPTR,DBLKADDR                                02S0605
*                         RMEMORY=ADDR(APDXAPIO(DAPIOCT1));     02S0606
         SLA   @04,2                                            02S0606
         LA    RMEMORY,APDXAPIO-4(@04,DAPDXPTR)                 02S0606
*                         CALL XLTE;/* FIND APDXAPIO ADDRESS         */
         L     @15,DXLATOR                                      02S0607
         BALR  @14,@15                                          02S0607
*                         DAPIOPTR=RMEMORY->I031P;/* APIO ADDRESS    */
         L     DAPIOPTR,I031P(,RMEMORY)                         02S0608
*                         IF DAPIOPTR^=0 THEN/* IF APIO EXISTS,      */
         LTR   DAPIOPTR,DAPIOPTR                                02S0609
         BZ    @RF00609                                         02S0609
*                           DO;     /* THEN FORMAT BLOCKS            */
*                             RFY                               02S0611
*                               APIO BASED(DAPIOPTR);/* TELL PL/S    */
*                             CALL DMPAPIO;/* APIO                   */
         BAL   @14,DMPAPIO                                      02S0612
*                             CALL DMPAPCI;/* 3838 CONTROL TABLE     */
         BAL   @14,DMPAPCI                                      02S0613
*                             CALL DMPIOFD;/* CCW, APXL, VSL, ETC    */
         BAL   @14,DMPIOFD                                      02S0614
*                             RFY                               02S0615
*                               APIO;/* FINISHED WITH APIO           */
*                           END;    /* APIO DATA FORMATTED           */
*                       END;        /* ALL APIO ENTRIES PROCESSED    */
@RF00609 SLR   @04,@04                                          02S0617
         BCTR  @04,0                                            02S0617
         AH    @04,DAPIOCT1                                     02S0617
         STH   @04,DAPIOCT1                                     02S0617
@DE00603 LTR   @04,@04                                          02S0617
         BP    @DL00603                                         02S0617
*                       RFY                                     02S0618
*                         APDX;     /* FINISHED WITH APDX            */
*                     END;          /* APDX PROCESSED                */
*                 END;              /* FINISHED WITH DEB             */
@RF00578 DS    0H                                               02S0621
*               RFY                                             02S0621
*                 APDS;             /* FINISHED WITH APDS POINTER    */
@RF00571 DS    0H                                               02S0622
*             END;                  /* FINISHED WITH APDS            */
*           RFY                                                 02S0623
*             DSAB;                 /* FINISHED WITH DSAB POINTER    */
@RF00562 DS    0H                                               02S0624
*         END;                      /* DSAB PROCESSED                */
*     END;                          /* ALL DSAB ENTRIES PROCESSED    */
*                                                               02S0625
@RF00554 DS    0H                                               02S0625
@DE00504 L     @15,DDSABPTR                                     02S0625
         LTR   @15,@15                                          02S0625
         BNZ   @DL00504                                         02S0625
*     /***************************************************************/
*     /*                                                             */
*     /* USER CONTROL BLOCKS DUMPED. GO TO THE EXIT ROUTINE.         */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0626
*   END;                            /* USER BLOCKS FORMATTED         */
*   GOTO DONEDUMP;                  /* SKIP ERROR RECOVERY           */
         B     DONEDUMP                                         01S0627
         EJECT
*ERRDUMP:                           /* ERROR TAKING DUMP             */
*                                                               01S0628
*   /*****************************************************************/
*   /*                                                               */
*   /* ERROR TAKING FORMATTED 3838 DUMP. GIVE AN ERROR MESSAGE AND   */
*   /* TERMINATE.                                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0628
*   DO;                             /* ENTRY FROM ESTAE/FRR RETRY    */
*                                                               01S0628
ERRDUMP  DS    0H                                               01S0629
*     /***************************************************************/
*     /*                                                             */
*     /* ENTRY FROM ESTAE/FRR RETRY (IGTUKA). RETRY DOES NOT INSURE  */
*     /* REGISTERS 0-5, 9-11, 14-15 VALID SINCE NOT SAVED IN         */
*     /* APESREGS. ISSUE DUMMY RESTRICT TO WIPE PL/S OPTIMIZATION    */
*     /* MEMORY OF CURRENT REGISTER VALUES                           */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0629
*     RFY                                                       01S0629
*      (R0RSTD,                                                 01S0629
*       R1RSTD,                                                 01S0629
*       R2RSTD,                                                 01S0629
*       R3RSTD,                                                 01S0629
*       R4RSTD,                                                 01S0629
*       R5RSTD,                     /* 6-8 BASES                     */
*       R9RSTD,                                                 01S0629
*       R10RSTD,                                                01S0629
*       R11RSTD,                    /* 12-13 APCT/APSV PTRS          */
*       R14RSTD,                                                01S0629
*       R15RSTD) RSTD;              /* KEEP PL/S FROM CARRYING DATA  */
*     IF DPRDMP=BOFF THEN           /* IF RUNNING UNDER SNAP         */
         TM    DPRDMP,B'10000000'                               01S0630
         BNZ   @RF00630                                         01S0630
*       GEN(MODESET EXTKEY=SCHED)                               01S0631
*       NOREFS NOSETS;              /* SWITCH TO STANDARD KEY (1)    */
         MODESET EXTKEY=SCHED
*     RFY                                                       01S0632
*      (R0RSTD,                                                 01S0632
*       R1RSTD,                                                 01S0632
*       R2RSTD,                                                 01S0632
*       R3RSTD,                                                 01S0632
*       R4RSTD,                                                 01S0632
*       R5RSTD,                     /* 6-8 BASES                     */
*       R9RSTD,                                                 01S0632
*       R10RSTD,                                                01S0632
*       R11RSTD,                    /* 12-13 APCT/APSV PTRS          */
*       R14RSTD,                                                01S0632
*       R15RSTD) UNRSTD;            /* ALLOW PL/S TO USE REGS AGAIN  */
@RF00630 DS    0H                                               01S0633
*   END;                            /* RETRY ENVIRONMENT SET         */
*   APESRTRY=ADDR(DONEDUMP);        /* JUST TERMINATE IF ERROR NOW   */
         LA    @15,DONEDUMP                                     01S0634
         L     @14,APESREGP                                     01S0634
         ST    @15,APESRTRY(,@14)                               01S0634
*   DO;                             /* ERROR RECOVERY COMPLETE       */
*     APESFPRV=BOFF;                /* RESET RECURSION FLAG.         */
         NI    APESFPRV,B'10111111'                             01S0636
*     APESCODE=CERRN99;             /* RESET ERROR CODE              */
         MVI   APESCODE,X'01'                                   01S0637
*     APESFREC=BON;                 /* RESET DUMP/LOG FLAGS          */
*     APESFSDP=BON;                 /* (ALL ON)                      */
         OI    APESFREC,B'01100000'                             01S0639
*   END;                            /* ALL INDICATORS RESET          */
*   DO;                             /* START OF SEGMENT              */
*                                                               01S0641
*     /***************************************************************/
*     /*                                                             */
*     /* ERROR TAKING FORMATTED 3838 DUMP OR SCANNING CONTROL BLOCK  */
*     /* CHAIN. OUTPUT AN ERROR MESSAGE GIVING THE CONTROL BLOCK     */
*     /* BEING ACCESSED AND ITS ADDRESS. IF NOT REFERENCING A CONTROL*/
*     /* BLOCK (DREFBLK=0), GIVE AN 'INDETERMINATE ERROR' MESSAGE.   */
*     /* THIS MESSAGE IS PLACED IN THE NORMAL SYSOUT DATASET USING   */
*     /* THE SNAP.PRDMP WRITER.                                      */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0642
*     DLINEX=CLINEX;                /* CLEAR THE PRINT LINE          */
         MVC   DLINEX(120),CLINEX                               01S0642
*     CALL SKIP(2);                 /* SPACING FOR BETTER NOTICE     */
         LA    @01,@AL00643                                     01S0643
         BAL   @14,SKIP                                         01S0643
*     IF DREFBLK=BOFF THEN          /* IF NOT REFERENCING CONTROL    */
         TM    DREFBLK,B'00010000'                              01S0644
         BNZ   @RF00644                                         01S0644
*       DLINE6=CLINE6;              /* BLOCK, GIVE GENERAL ERROR MSG */
         MVC   DLINE6(27),CLINE6                                01S0645
*     ELSE                          /* OTHERWISE BUILD MESSAGE GIVING*/
*       DO;                         /* CONTROL BLOCK BEING REFERENCED*/
         B     @RC00644                                         01S0646
@RF00644 DS    0H                                               01S0647
*         DREFBLK=BOFF;             /* RESET FLAG - BLOCK NOT BEING
*                                      REF                           */
         NI    DREFBLK,B'11101111'                              01S0647
*         DLINE5=CLINE5;            /* INITIALIZE THE MESSAGE        */
         MVC   DLINE5(44),CLINE5                                01S0648
*         DLINE5A=MBLKID(DXBLKID);  /* BLOCK BEING REFERENCED        */
         SLR   @15,@15                                          01S0649
         IC    @15,DXBLKID                                      01S0649
         SLA   @15,3                                            01S0649
         LA    @14,MBLKID-8(@15)                                01S0649
         MVC   DLINE5A(8),0(@14)                                01S0649
*         RFY                                                   01S0650
*          (R0P,                                                01S0650
*           R1P) RSTD;              /* ADDRESS CONVERTER REGISTERS   */
*         R0P=DBLKADDR;             /* ADDRESS OF BAD CONTROL BLOCK  */
         L     R0P,DBLKADDR                                     01S0651
*         R1P=ADDR(DLINE5B);        /* PLACE PRINTABLE ADDRESS HERE  */
         LA    R1P,DLINE5B                                      01S0652
*         CALL CNVTADR;             /* CONVERT TO PRINTABLE HEX      */
         BAL   @14,CNVTADR                                      01S0653
*         RFY                                                   01S0654
*          (R0P,                                                01S0654
*           R1P) UNRSTD;            /* FINISHED WITH REGISTERS       */
*       END;                        /* ERROR MESSAGE BUILD           */
*     CALL PRINT;                   /* PRINT IT                      */
@RC00644 BAL   @14,PRINT                                        01S0656
*     CALL SKIP(4);                 /* LEAVE MORE SPACE              */
         LA    @01,@AL00657                                     01S0657
         BAL   @14,SKIP                                         01S0657
*   END;                            /* ERROR RECORDED                */
         EJECT
*DONEDUMP:                          /* USER/MONITOR FORMATTING DONE  */
*                                                               01S0659
*   /*****************************************************************/
*   /*                                                               */
*   /* DUMP COMPLETE                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0659
*NODUMP:                            /* FORMATTED DUMP NOT REQUIRED   */
*                                                               01S0659
*   /*****************************************************************/
*   /*                                                               */
*   /* NO DUMP REQUIRED                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0659
*CANESTAE:                          /* CANCEL ESTAE (RETRY POINT)    */
*                                                               01S0659
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESSING COMPLETE. RELEASE RESOURCES.                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0659
*   DO;                             /* ENTRY FROM ESTAE/FRR RETRY    */
*                                                               01S0659
DONEDUMP DS    0H                                               01S0659
NODUMP   DS    0H                                               01S0659
CANESTAE DS    0H                                               01S0660
*     /***************************************************************/
*     /*                                                             */
*     /* ENTRY FROM ESTAE/FRR RETRY (IGTUKA). RETRY DOES NOT INSURE  */
*     /* REGISTERS 0-5, 9-11, 14-15 VALID SINCE NOT SAVED IN         */
*     /* APESREGS. ISSUE DUMMY RESTRICT TO WIPE PL/S OPTIMIZATION    */
*     /* MEMORY OF CURRENT REGISTER VALUES                           */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0660
*     RFY                                                       01S0660
*      (R0RSTD,                                                 01S0660
*       R1RSTD,                                                 01S0660
*       R2RSTD,                                                 01S0660
*       R3RSTD,                                                 01S0660
*       R4RSTD,                                                 01S0660
*       R5RSTD,                     /* 6-8 BASES                     */
*       R9RSTD,                                                 01S0660
*       R10RSTD,                                                01S0660
*       R11RSTD,                    /* 12-13 APCT/APSV PTRS          */
*       R14RSTD,                                                01S0660
*       R15RSTD) RSTD;              /* KEEP PL/S FROM CARRYING DATA  */
*     IF DPRDMP=BOFF THEN           /* IF RUNNING UNDER SNAP         */
         TM    DPRDMP,B'10000000'                               01S0661
         BNZ   @RF00661                                         01S0661
*       GEN(MODESET EXTKEY=SCHED)                               01S0662
*       NOREFS NOSETS;              /* SWITCH TO STANDARD KEY (1)    */
         MODESET EXTKEY=SCHED
*     RFY                                                       01S0663
*      (R0RSTD,                                                 01S0663
*       R1RSTD,                                                 01S0663
*       R2RSTD,                                                 01S0663
*       R3RSTD,                                                 01S0663
*       R4RSTD,                                                 01S0663
*       R5RSTD,                     /* 6-8 BASES                     */
*       R9RSTD,                                                 01S0663
*       R10RSTD,                                                01S0663
*       R11RSTD,                    /* 12-13 APCT/APSV PTRS          */
*       R14RSTD,                                                01S0663
*       R15RSTD) UNRSTD;            /* ALLOW PL/S TO USE REGS AGAIN  */
@RF00661 DS    0H                                               01S0664
*   END;                            /* RETRY ENVIRONMENT SET         */
*   DO;                             /* START OF SEGMENT              */
*                                                               02S0665
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESSING COMPLETE. DELETE THE ESTAE RECOVERY PROTECTION.  */
*     /* THE REMAINING CODE (FREE THE WORKAREA AND SET THE REGISTER  */
*     /* RETURN CODE) IS NOT CRITCAL TO SYSTEM PERFORMANCE AND IS NOT*/
*     /* REQUIRED TO BE UNDER THE ESTAE UMBRELLA.                    */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0666
*     IF DPRDMP=BOFF&               /* IF RUNNING FOR SNAP,          */
*         APESFSTE=BON THEN         /* ESTAE ACTIVE,                 */
         TM    DPRDMP,B'10000000'                               02S0666
         BNZ   @RF00666                                         02S0666
         TM    APESFSTE,B'00000010'                             02S0666
         BNO   @RF00666                                         02S0666
*       DO;                         /* THEN CANCEL ESTAE.            */
*         APESFSTE=BOFF;            /* SHOW ESTAE NOT ACTIVE         */
         NI    APESFSTE,B'11111101'                             02S0668
*         GEN REFS(FLCCVT,PSA,CVTSV60,CVTMAP,APSVPTR);          02S0669
*                                                    /*
         IGTYSTAE 0,                  CANCEL THE ESTAE ENVIRONMENT     *
               BRANCH=YES,            BRANCH ENTRY USED                *
               SVEAREA=(APSVPTR),     USE REGISTER 13 SAVEAREA         *
               KEY=1                  CURRENTLY IN KEY-1 -- RESET
*       END;                        /* ESTAE CANCELLED               */
*     APESFSTE=BOFF;                /* SHOW ESTAE NOT ACTIVE         */
@RF00666 NI    APESFSTE,B'11111101'                             02S0671
*                                                               02S0672
*     /***************************************************************/
*     /*                                                             */
*     /* FREE THE SAVEAREA/WORKAREA USED FOR PROCESSING              */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0672
*     RFY                                                       02S0672
*      (R0F,                                                    02S0672
*       R1P) RSTD;                  /* FREEMAIN REGISTERS            */
*     R1P=ADDR(APSV);               /* ADDRESS OF ACQUIRED AREA      */
         LR    R1P,APSVPTR                                      02S0673
*     APSVPTR=APSVPREV;             /* RESTORE INPUT SAVEAREA ADDRESS*/
         L     APSVPTR,APSVPREV(,APSVPTR)                       02S0674
*     IF DPRDMP=BON THEN            /* IF RUNNING FOR PRDMP,         */
         TM    DPRDMP,B'10000000'                               02S0675
         BNO   @RF00675                                         02S0675
*       DO;                         /* USE FREEMAIN.                 */
*         R0F=APSVLN+@SIZDATD;      /* ACQUIRED LENGTH               */
         LA    R0F,80                                           02S0677
         AL    R0F,@SIZDATD                                     02S0677
*         GEN(FREEMAIN R,LV=(0),A=(1));/* FREE THE STORAGE           */
         FREEMAIN R,LV=(0),A=(1)
*       END;                        /* FREEMAIN ISSUED               */
*     ELSE                          /* IF RUNNING FOR SNAP,          */
*       DO;                         /* USE IGTYFSV.                  */
         B     @RC00675                                         02S0680
@RF00675 DS    0H                                               02S0681
*         DO;                       /* IGTYFSV A(R1P->APSV)          */
*           RFY                                                 02S0682
*             GPR01P RSTD;          /* REG 1 SET TO AREA ADDRESS     */
*           GPR01P=ADDR(R1P->APSV); /* SET REG 1 TO ADDR OF AREA TO
*                                      FREE                          */
*           CALL APCVZUAC;          /* FREE THE SAVEAREA-WORKAREA    */
         L     @15,APCTZUAC(,APCTPTR)                           02S0684
         BALR  @14,@15                                          02S0684
*           RFY                                                 02S0685
*             GPR01P UNRSTD;        /* FINISHED WITH REG 1           */
*         END;                      /* SAVEAREA-WORKAREA FREED FREE
*                                      THE STORAGE                   */
*         GEN(MODESET EXTKEY=ZERO)                              02S0687
*         NOREFS NOSETS;            /* RESUME INPUT KEY              */
         MODESET EXTKEY=ZERO
*       END;                        /* SNAP STORAGE FREED.           */
*     RFY                                                       02S0689
*      (R0F,                                                    02S0689
*       R1P) UNRSTD;                /* DONE WITH FREEMAIN REGS       */
@RC00675 DS    0H                                               02S0690
*   END;                            /* RESOURCES RELEASED            */
*   RETURN CODE(0);                 /* RETURN TO CALLER              */
         SLR   @15,@15                                          01S0691
         L     @14,12(,@13)                                     01S0691
         LM    @00,@12,20(@13)                                  01S0691
         BR    @14                                              01S0691
         EJECT
*                                                               01S0692
*   /*****************************************************************/
*   /*                                                               */
*   /* INTERNAL SUBROUTINES                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0692
*DMPAPCT:                           /* FORMAT THE APCT               */
*   PROC;                           /* NO INPUT PARM LIST            */
*                                                               02S0692
DMPAPCT  STM   @14,@12,@SA00002                                 02S0692
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT THE VPSS COMMUNICATIONS VECTOR TABLE                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0693
*   IF DPRTAPCT=BON THEN            /* IF APCT TO BE PRINTED,        */
         TM    DPRTAPCT,B'10000000'                             02S0693
         BNO   @RF00693                                         02S0693
*     DO;                           /* THEN DO --                    */
*       DXBLKNM=CXAPCT;             /* BLOCK NAME                    */
         MVI   DXBLKNM,X'01'                                    02S0695
*       DXBLKID=CXAPCT;             /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'01'                                    02S0696
*       DBLKADDR=ADDR(APCT);        /* ADDRESS OF BLOCK              */
         ST    APCTPTR,DBLKADDR                                 02S0697
*       RMEMORY=ADDR(APCTSIZE);     /* APCTSIZE CONTAINS APCT SIZE   */
         LA    RMEMORY,APCTSIZE(,APCTPTR)                       02S0698
*       CALL XLTE;                  /* FIND IT                       */
         L     @15,DXLATOR                                      02S0699
         BALR  @14,@15                                          02S0699
*       DSIZE=RMEMORY->I015F;       /* SIZE OF BLOCK TO FORMAT       */
         LH    DSIZE,I015F(,RMEMORY)                            02S0700
*       DADDR=ADDR(APCT);           /* ADDRESS OF BLOCK TO FORMAT    */
         LR    DADDR,APCTPTR                                    02S0701
*       CALL FORMAT;                /* FORMAT THE CONTROL BLOCK      */
         BAL   @14,FORMAT                                       02S0702
*     END;                          /* CONTROL BLOCK FORMATTED       */
*   RETURN;                         /* RETURN TO CALLER              */
@EL00002 DS    0H                                               02S0704
@EF00002 DS    0H                                               02S0704
@ER00002 LM    @14,@12,@SA00002                                 02S0704
         BR    @14                                              02S0704
*   END DMPAPCT;                    /* APCT FORMATTER                */
         B     @EL00002                                         02S0705
         EJECT
*DMPAPVU:                           /* PRINT THE VPSS USER TABLE     */
*   PROC;                           /* (APVU)                        */
*                                                               02S0706
DMPAPVU  STM   @14,@12,@SA00003                                 02S0706
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT THE VPSS USER TABLE (APVU). POINTED TO BY APCTAPVU.    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0707
*   IF DPRTAPVU=BON THEN            /* IF APVU TO BE PRINTED,        */
         TM    DPRTAPVU,B'01000000'                             02S0707
         BNO   @RF00707                                         02S0707
*     DO;                           /* THEN DO --                    */
*       DXBLKNM=CXAPVU;             /* BLOCK NAME                    */
         MVI   DXBLKNM,X'02'                                    02S0709
*       DXBLKID=CXAPCT;             /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'01'                                    02S0710
*       DBLKADDR=ADDR(APCT);        /* ADDRESS OF BLOCK              */
         ST    APCTPTR,DBLKADDR                                 02S0711
*       RMEMORY=ADDR(APCTAPVU);     /* APVU POINTER                  */
         LA    RMEMORY,APCTAPVU(,APCTPTR)                       02S0712
*       CALL XLTE;                  /* FIND IT                       */
         L     @15,DXLATOR                                      02S0713
         BALR  @14,@15                                          02S0713
*       RMEMORY=RMEMORY->I031P;     /* POINT TO APVU (IF ANY)        */
         L     RMEMORY,I031P(,RMEMORY)                          02S0714
*       IF RMEMORY^=0 THEN          /* IF APVU EXISTS, THEN          */
         LTR   RMEMORY,RMEMORY                                  02S0715
         BZ    @RF00715                                         02S0715
*         DO;                       /* FORMAT THE CONTROL BLOCK      */
*           DADDR=ADDR(RMEMORY->APVU);/* ADDRESS OF APVU             */
         LR    DADDR,RMEMORY                                    02S0717
*           DXBLKID=CXAPVU;         /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'02'                                    02S0718
*           DBLKADDR=ADDR(RMEMORY->APVU);/* ADDRESS OF BLOCK         */
         ST    RMEMORY,DBLKADDR                                 02S0719
*           RMEMORY=ADDR(RMEMORY->APVUSPLN);/* APVU SIZE & SUBPOOL   */
         LA    @05,APVUSPLN(,RMEMORY)                           02S0720
         LR    RMEMORY,@05                                      02S0720
*           CALL XLTE;              /* GET IT                        */
         L     @15,DXLATOR                                      02S0721
         BALR  @14,@15                                          02S0721
*           DSIZE=RMEMORY->I031F&'00FFFFFF'X;/* CLEAR SUBPOOL        */
         L     DSIZE,I031F(,RMEMORY)                            02S0722
         N     DSIZE,@CF05120                                   02S0722
*           CALL FORMAT;            /* PRINT IT                      */
         BAL   @14,FORMAT                                       02S0723
*         END;                      /* APVU PRINTED                  */
*     END;                          /* APVU PROCESSING COMPLETE      */
*   RETURN;                         /* RETURN TO THE CALLER          */
@EL00003 DS    0H                                               02S0726
@EF00003 DS    0H                                               02S0726
@ER00003 LM    @14,@12,@SA00003                                 02S0726
         BR    @14                                              02S0726
*   END DMPAPVU;                    /* END OF INTERNAL SUBROUTINE    */
         B     @EL00003                                         02S0727
         EJECT
*DMPAPUB:                           /* PRINT THE VPSS UNIT BLOCK     */
*   PROC;                           /* (APUB)                        */
*                                                               02S0728
DMPAPUB  STM   @14,@12,@SA00004                                 02S0728
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT THE APUB POINTED TO BY 'DAPUBPTR'                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0729
*   IF DPRTAPUB=BON THEN            /* IF APUB TO BE PRINTED,        */
         TM    DPRTAPUB,B'00100000'                             02S0729
         BNO   @RF00729                                         02S0729
*     DO;                           /* THEN DO --                    */
*       DXBLKNM=CXAPUB;             /* BLOCK NAME                    */
         MVI   DXBLKNM,X'04'                                    02S0731
*       RFY                                                     02S0732
*         APUB BASED(DAPUBPTR);     /* TELL PL/S OF POINTER          */
*       DXBLKID=CXAPUB;             /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'04'                                    02S0733
*       DBLKADDR=ADDR(APUB);        /* ADDRESS OF BLOCK              */
         L     @15,DAPUBPTR                                     02S0734
         ST    @15,DBLKADDR                                     02S0734
*       RMEMORY=ADDR(APUBSIZE);     /* LENGTH OF APUB                */
         LA    RMEMORY,APUBSIZE(,@15)                           02S0735
*       CALL XLTE;                  /* FIND IT                       */
         L     @15,DXLATOR                                      02S0736
         BALR  @14,@15                                          02S0736
*       DSIZE=RMEMORY->I015F;       /* APUB SIZE                     */
         LH    DSIZE,I015F(,RMEMORY)                            02S0737
*       RMEMORY=ADDR(APUBUCB);      /* ADDRESS OF ASSOCIATED UCB     */
         L     RMEMORY,DAPUBPTR                                 02S0738
         LA    RMEMORY,APUBUCB(,RMEMORY)                        02S0738
*       CALL XLTE;                  /* FIND IT                       */
         L     @15,DXLATOR                                      02S0739
         BALR  @14,@15                                          02S0739
*       RMEMORY=RMEMORY->I031P;     /* POINT TO IT                   */
         L     RMEMORY,I031P(,RMEMORY)                          02S0740
*       DXBLKID=CXUCB;              /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'09'                                    02S0741
*       DBLKADDR=ADDR(RMEMORY->UCBOB);/* ADDRESS OF BLOCK            */
         ST    RMEMORY,DBLKADDR                                 02S0742
*       DUCBPTR=ADDR(RMEMORY->UCBOB);/* SAVE FOR UCB PRINT           */
         ST    RMEMORY,DUCBPTR                                  02S0743
*       RMEMORY=ADDR(RMEMORY->UCBNAME);/* ADDRESS OF UCB NAME        */
         LA    @11,UCBNAME(,RMEMORY)                            02S0744
         LR    RMEMORY,@11                                      02S0744
*       CALL XLTE;                  /* FIND IT                       */
         L     @15,DXLATOR                                      02S0745
         BALR  @14,@15                                          02S0745
*       DBLKINFO=RMEMORY->I256C(1:LENGTH(UCBNAME));/* SAVE CUU       */
         MVI   DBLKINFO+3,C' '                                  02S0746
         MVC   DBLKINFO+4(4),DBLKINFO+3                         02S0746
         MVC   DBLKINFO(3),I256C(RMEMORY)                       02S0746
*       DINFOL2=BON;                /* 'DBLKINFO' HAS VALID DATA     */
         OI    DINFOL2,B'00010000'                              02S0747
*       DADDR=ADDR(APUB);           /* POINT TO APUB                 */
         L     DADDR,DAPUBPTR                                   02S0748
*       CALL FORMAT;                /* FORMAT THE CONTROL BLOCK      */
         BAL   @14,FORMAT                                       02S0749
*       CALL DMPUCB;                /* PRINT THE UCB POINTED TO BY
*                                      'DUCBPTR'.                    */
         BAL   @14,DMPUCB                                       02S0750
*       RFY                                                     02S0751
*         APUB;                     /* FINISHED WITH APUB            */
*     END;                          /* APUB PRINTED IF WANTED        */
*   RETURN;                         /* RETURN TO CALLER              */
@EL00004 DS    0H                                               02S0753
@EF00004 DS    0H                                               02S0753
@ER00004 LM    @14,@12,@SA00004                                 02S0753
         BR    @14                                              02S0753
*   END DMPAPUB;                    /* END OF INTERNAL SUBROUTINE    */
         B     @EL00004                                         02S0754
         EJECT
*DMPUCB:                            /* PRINT THE UNIT CONTROL BLOCK  */
*   PROC;                           /* AND EXTENSION                 */
*                                                               02S0755
DMPUCB   STM   @14,@12,@SA00005                                 02S0755
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT THE UCB POINTED TO BY 'DUCBPTR'                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0756
*   IF DPRTUCB=BON THEN             /* IF UCB TO BE PRINTED,         */
         TM    DPRTUCB,B'10000000'                              02S0756
         BNO   @RF00756                                         02S0756
*     DO;                           /* THEN DO --                    */
*       DXBLKNM=CXUCB;              /* BLOCK NAME                    */
         MVI   DXBLKNM,X'09'                                    02S0758
*       RFY                                                     02S0759
*         UCBOB BASED(DUCBPTR);     /* TELL PL/S OF POINTER          */
*       DADDR=ADDR(UCBOB);          /* POINT TO UCB PROPER           */
         L     DADDR,DUCBPTR                                    02S0760
*       DSIZE=LENGTH(UCBOB)+        /* LENGTH OF CONTROL BLOCK       */
*           8;                      /* (ALLOW FOR UCBIOSBA)          */
         LA    DSIZE,32                                         02S0761
*       CALL FORMAT;                /* PRINT THE UCB                 */
         BAL   @14,FORMAT                                       02S0762
*       DXBLKNM=CXUCBX;             /* BLOCK NAME                    */
         MVI   DXBLKNM,X'14'                                    02S0763
*       DXBLKID=CXUCB;              /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'09'                                    02S0764
*       DBLKADDR=ADDR(UCBOB);       /* ADDRESS OF BLOCK              */
         L     @15,DUCBPTR                                      02S0765
         ST    @15,DBLKADDR                                     02S0765
*       RMEMORY=ADDR(UCBEXTPT);     /* ADDRESS OF EXTENSION          */
         LA    RMEMORY,UCBEXTPT(,@15)                           02S0766
*       CALL XLTE;                  /* FIND IT                       */
         L     @15,DXLATOR                                      02S0767
         BALR  @14,@15                                          02S0767
*       DADDR=EVAL(RMEMORY-         /* ADDRESS OF UCB EXTENSION      */
*           (ADDR(UCBEXTPT)-ADDR(UCBOB)))/* CONTAINED IN             */
*           ->UCBEXTP;              /* UCB PROPER.                   */
         LA    @11,20                                           02S0768
         LR    @15,RMEMORY                                      02S0768
         SLR   @15,@11                                          02S0768
         L     DADDR,UCBEXTP-1(,@15)                            02S0768
         LA    DADDR,0(,DADDR)                                  02S0768
*       DSIZE=LENGTH(UCBCMEXT);     /* SIZE OF EXTENSION             */
         LR    DSIZE,@11                                        02S0769
*       CALL FORMAT;                /* FORMAT THE CONTROL BLOCK      */
         BAL   @14,FORMAT                                       02S0770
*       RFY                                                     02S0771
*         UCBOB;                    /* FINISHED WITH UCB             */
*     END;                          /* UCB PRINTED IF WANTED         */
*   RETURN;                         /* RETURN TO CALLER              */
@EL00005 DS    0H                                               02S0773
@EF00005 DS    0H                                               02S0773
@ER00005 LM    @14,@12,@SA00005                                 02S0773
         BR    @14                                              02S0773
*   END DMPUCB;                     /* END OF INTERNAL SUBROUTINE    */
         B     @EL00005                                         02S0774
         EJECT
*DMPAPDS:                           /* PRINT THE VPSS DATASET ENTRY  */
*   PROC;                           /* (APDS)                        */
*                                                               02S0775
DMPAPDS  STM   @14,@12,@SA00006                                 02S0775
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT THE APDS POINTED TO BY 'DAPDSPTR'                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0776
*   IF DPRTAPDS=BON THEN            /* IF APDS TO BE PRINTED,        */
         TM    DPRTAPDS,B'00010000'                             02S0776
         BNO   @RF00776                                         02S0776
*     DO;                           /* THEN DO --                    */
*       DXBLKNM=CXAPDS;             /* BLOCK NAME                    */
         MVI   DXBLKNM,X'03'                                    02S0778
*       RFY                                                     02S0779
*         APDS BASED(DAPDSPTR);     /* TELL PL/S OF POINTER          */
*       DXBLKID=CXAPDS;             /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'03'                                    02S0780
*       DBLKADDR=ADDR(APDS);        /* ADDRESS OF BLOCK              */
         ST    DAPDSPTR,DBLKADDR                                02S0781
*       RMEMORY=ADDR(APDSSIZE);     /* LENGTH OF APDS                */
         LA    RMEMORY,APDSSIZE(,DAPDSPTR)                      02S0782
*       CALL XLTE;                  /* FIND IT                       */
         L     @15,DXLATOR                                      02S0783
         BALR  @14,@15                                          02S0783
*       DSIZE=RMEMORY->I015F;       /* APDS SIZE                     */
         LH    DSIZE,I015F(,RMEMORY)                            02S0784
*       DADDR=ADDR(APDS);           /* POINT TO APDS                 */
         LR    DADDR,DAPDSPTR                                   02S0785
*       CALL FORMAT;                /* FORMAT THE CONTROL BLOCK      */
         BAL   @14,FORMAT                                       02S0786
*       RFY                                                     02S0787
*         APDS;                     /* FINISHED WITH APDS            */
*     END;                          /* APDS PRINTED IF WANTED        */
*   RETURN;                         /* RETURN TO CALLER              */
@EL00006 DS    0H                                               02S0789
@EF00006 DS    0H                                               02S0789
@ER00006 LM    @14,@12,@SA00006                                 02S0789
         BR    @14                                              02S0789
*   END DMPAPDS;                    /* END OF INTERNAL SUBROUTINE    */
         B     @EL00006                                         02S0790
         EJECT
*DMPAPDX:                           /* PRINT THE VPSS DEB EXTENSION  */
*   PROC;                           /* (APDX)                        */
*                                                               02S0791
DMPAPDX  STM   @14,@12,@SA00007                                 02S0791
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT THE APDX POINTED TO BY 'DAPDXPTR'                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0792
*   IF DPRTAPDX=BON THEN            /* IF APDX TO BE PRINTED,        */
         TM    DPRTAPDX,B'00000001'                             02S0792
         BNO   @RF00792                                         02S0792
*     DO;                           /* THEN DO --                    */
*       DXBLKNM=CXAPDX;             /* BLOCK NAME                    */
         MVI   DXBLKNM,X'08'                                    02S0794
*       RFY                                                     02S0795
*         APDX BASED(DAPDXPTR);     /* TELL PL/S OF POINTER          */
*       DXBLKID=CXAPDX;             /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'08'                                    02S0796
*       DBLKADDR=ADDR(APDX);        /* ADDRESS OF BLOCK              */
         ST    DAPDXPTR,DBLKADDR                                02S0797
*       RMEMORY=ADDR(APDXSIZE);     /* LENGTH OF APDX                */
         LA    RMEMORY,APDXSIZE(,DAPDXPTR)                      02S0798
*       CALL XLTE;                  /* FIND IT                       */
         L     @15,DXLATOR                                      02S0799
         BALR  @14,@15                                          02S0799
*       DSIZE=RMEMORY->I015F;       /* APDX SIZE                     */
         LH    DSIZE,I015F(,RMEMORY)                            02S0800
*       DADDR=ADDR(APDX);           /* POINT TO APDX                 */
         LR    DADDR,DAPDXPTR                                   02S0801
*       CALL FORMAT;                /* FORMAT THE CONTROL BLOCK      */
         BAL   @14,FORMAT                                       02S0802
*       RFY                                                     02S0803
*         APDX;                     /* FINISHED WITH APDX            */
*     END;                          /* APDX PRINTED IF WANTED        */
*   RETURN;                         /* RETURN TO CALLER              */
@EL00007 DS    0H                                               02S0805
@EF00007 DS    0H                                               02S0805
@ER00007 LM    @14,@12,@SA00007                                 02S0805
         BR    @14                                              02S0805
*   END DMPAPDX;                    /* END OF INTERNAL SUBROUTINE    */
         B     @EL00007                                         02S0806
         EJECT
*DMPAPIO:                           /* PRINT THE VPSS STARTIO BLOCK  */
*   PROC;                           /* (APIO)                        */
*                                                               02S0807
DMPAPIO  STM   @14,@12,@SA00008                                 02S0807
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT THE APIO POINTED TO BY 'DAPIOPTR'                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0808
*   IF DPRTAPIO=BON THEN            /* IF APIO TO BE PRINTED,        */
         TM    DPRTAPIO,B'00001000'                             02S0808
         BNO   @RF00808                                         02S0808
*     DO;                           /* THEN DO --                    */
*       DXBLKNM=CXAPIO;             /* BLOCK NAME                    */
         MVI   DXBLKNM,X'05'                                    02S0810
*       RFY                                                     02S0811
*         APIO BASED(DAPIOPTR);     /* TELL PL/S OF POINTER          */
*       DXBLKID=CXAPIO;             /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'05'                                    02S0812
*       DBLKADDR=ADDR(APIO);        /* ADDRESS OF BLOCK              */
         ST    DAPIOPTR,DBLKADDR                                02S0813
*       RMEMORY=ADDR(APIOSIZE);     /* LENGTH OF APIO                */
         LA    RMEMORY,APIOSIZE(,DAPIOPTR)                      02S0814
*       CALL XLTE;                  /* FIND IT                       */
         L     @15,DXLATOR                                      02S0815
         BALR  @14,@15                                          02S0815
*       DSIZE=RMEMORY->I015F;       /* APIO SIZE                     */
         LH    DSIZE,I015F(,RMEMORY)                            02S0816
*       DADDR=ADDR(APIO);           /* POINT TO APIO                 */
         LR    DADDR,DAPIOPTR                                   02S0817
*       CALL FORMAT;                /* FORMAT THE CONTROL BLOCK      */
         BAL   @14,FORMAT                                       02S0818
*       RFY                                                     02S0819
*         APIO;                     /* FINISHED WITH APIO            */
*     END;                          /* APIO PRINTED IF WANTED        */
*   RETURN;                         /* RETURN TO CALLER              */
@EL00008 DS    0H                                               02S0821
@EF00008 DS    0H                                               02S0821
@ER00008 LM    @14,@12,@SA00008                                 02S0821
         BR    @14                                              02S0821
*   END DMPAPIO;                    /* END OF INTERNAL SUBROUTINE    */
         B     @EL00008                                         02S0822
         EJECT
*DMPAPCI:                           /* PRINT THE 3838 CONTROL TABLE  */
*   PROC;                           /* ASSOCIATED WITH THE APIO.     */
*                                                               02S0823
DMPAPCI  STM   @14,@12,@SA00009                                 02S0823
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT THE 3838 CONTROL TABLE (APCI) ASSOCIATED WITH THE APIO */
*   /* POINTED TO BY 'DAPIOPTR'.                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0824
*   IF DPRTAPCI=BON THEN            /* IF APCI TO BE PRINTED,        */
         TM    DPRTAPCI,B'00000010'                             02S0824
         BNO   @RF00824                                         02S0824
*     DO;                           /* THEN DO --                    */
*       DXBLKNM=CXAPCI;             /* BLOCK ID BEING PRINTED        */
         MVI   DXBLKNM,X'07'                                    02S0826
*       DPGMCHK=BON;                /* PGM CHECK VALID SINCE USER    */
         OI    DPGMCHK,B'01000000'                              02S0827
*       RFY                                                     02S0828
*         APIO BASED(DAPIOPTR);     /* TELL PL/S OF POINTER          */
*       DXBLKID=CXAPIO;             /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'05'                                    02S0829
*       DBLKADDR=ADDR(APIO);        /* ADDRESS OF BLOCK              */
         ST    DAPIOPTR,DBLKADDR                                02S0830
*       RMEMORY=ADDR(IOSCKEY);      /* APCI (USER) KEY IN IOSB       */
         LA    RMEMORY,IOSCKEY(,DAPIOPTR)                       02S0831
*       CALL XLTE;                  /* (PART OF APIO).               */
         L     @15,DXLATOR                                      02S0832
         BALR  @14,@15                                          02S0832
*       DPROTKEY=RMEMORY->I001C;    /* SAVE PROTECT KEY              */
         IC    @03,I001C(,RMEMORY)                              02S0833
         STC   @03,DPROTKEY                                     02S0833
*       RMEMORY=ADDR(APIOAPCI);     /* ADDRESS OF APCI               */
         LA    RMEMORY,APIOAPCI(,DAPIOPTR)                      02S0834
*       CALL XLTE;                  /* FIND IT                       */
         L     @15,DXLATOR                                      02S0835
         BALR  @14,@15                                          02S0835
*       DADDR=RMEMORY->I031P;       /* APCI ADDRESS                  */
         L     DADDR,I031P(,RMEMORY)                            02S0836
*       RMEMORY=ADDR(APIOCISZ);     /* APCI SIZE IN APIO TOO         */
         LA    RMEMORY,APIOCISZ(,DAPIOPTR)                      02S0837
*       CALL XLTE;                  /* POINT TO APCI SIZE            */
         L     @15,DXLATOR                                      02S0838
         BALR  @14,@15                                          02S0838
*       DSIZE=RMEMORY->I015F;       /* APCI SIZE                     */
         LH    DSIZE,I015F(,RMEMORY)                            02S0839
*       DPROTSW=BON;                /* APCI FETCH PROTECTED          */
*       DPGMCHK=BON;                /* PGM CHECK VALID SINCE USER    */
         OI    DPROTSW,B'11000000'                              02S0841
*       CALL FORMAT;                /* FORMAT THE CONTROL BLOCK      */
         BAL   @14,FORMAT                                       02S0842
*       RFY                                                     02S0843
*         APIO;                     /* FINISHED WITH APIO            */
*     END;                          /* APCI PRINTED IF WANTED        */
*   RETURN;                         /* RETURN TO CALLER              */
@EL00009 DS    0H                                               02S0845
@EF00009 DS    0H                                               02S0845
@ER00009 LM    @14,@12,@SA00009                                 02S0845
         BR    @14                                              02S0845
*   END DMPAPCI;                    /* END OF INTERNAL SUBROUTINE    */
         B     @EL00009                                         02S0846
         EJECT
*DMPIOFD:                           /* PRINT THE FIELDS ASSOCIATED   */
*   PROC;                           /* WITH THE APIO (CCWS, APXL)    */
*                                                               02S0847
DMPIOFD  STM   @14,@12,@SA00010                                 02S0847
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT THE FIELDS ASSOCIATED WITH THE APIO POINTED TO BY      */
*   /* 'DAPIOPTR'.                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0848
*   IF DPRTCCW=BON THEN             /* IF CCW, APXL, VSL TO BE       */
         TM    DPRTCCW,B'00000100'                              02S0848
         BNO   @RF00848                                         02S0848
*     DO;                           /* PRINTED, THEN DO --           */
*       DXBLKNM=CXCPGM;             /* BLOCK NAME                    */
         MVI   DXBLKNM,X'06'                                    02S0850
*       RFY                                                     02S0851
*         APIO BASED(DAPIOPTR);     /* TELL PL/S OF POINTER          */
*       DXBLKID=CXAPIO;             /* BLOCK ID BEING REFERENCED     */
         MVI   DXBLKID,X'05'                                    02S0852
*       DBLKADDR=ADDR(APIO);        /* ADDRESS OF BLOCK              */
         ST    DAPIOPTR,DBLKADDR                                02S0853
*       RMEMORY=ADDR(APIOGMAD);     /* ADDRESS OF CCWS/APXL/VSL      */
         LA    RMEMORY,APIOGMAD(,DAPIOPTR)                      02S0854
*       CALL XLTE;                  /* FIND THEM                     */
         L     @15,DXLATOR                                      02S0855
         BALR  @14,@15                                          02S0855
*       DADDR=RMEMORY->I031P;       /* CHANNEL PROGRAM ADDRESS       */
         L     DADDR,I031P(,RMEMORY)                            02S0856
*       RMEMORY=ADDR(APIOGMS1);     /* SIZE IN APIO TOO              */
         LA    RMEMORY,APIOGMS1(,DAPIOPTR)                      02S0857
*       CALL XLTE;                  /* POINT TO SIZE FIELD           */
         L     @15,DXLATOR                                      02S0858
         BALR  @14,@15                                          02S0858
*       DSIZE=RMEMORY->I015F;       /* CHANNEL PROGRAM SIZE          */
         LH    DSIZE,I015F(,RMEMORY)                            02S0859
*       CALL FORMAT;                /* FORMAT THE CONTROL BLOCK      */
         BAL   @14,FORMAT                                       02S0860
*       RFY                                                     02S0861
*         APIO;                     /* FINISHED WITH APIO            */
*     END;                          /* CHANNEL PGM PRINTED IF WANTED */
*   RETURN;                         /* RETURN TO CALLER              */
@EL00010 DS    0H                                               02S0863
@EF00010 DS    0H                                               02S0863
@ER00010 LM    @14,@12,@SA00010                                 02S0863
         BR    @14                                              02S0863
*   END DMPIOFD;                    /* END OF INTERNAL SUBROUTINE    */
         B     @EL00010                                         02S0864
         EJECT
*ENQAPUB:                           /* ISSUE ENQ ON SYSZSSSS/APUB    */
*   PROC;                           /* TO PREVENT APDS CHAIN MODS    */
*                                                               02S0865
ENQAPUB  STM   @14,@12,@SA00011                                 02S0865
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE SHARED ENQ ON SYSZSSSS/APUB TO PREVENT THE APDS CHAIN   */
*   /* FROM BEING MODIFIED. THIS ALLOWS THE MONITOR TO DUMP A STATIC */
*   /* APDS CHAIN. IF RESOURCE ALREADY OWNED, DO NOT FREE ON EXIT.   */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0866
*   IF DPRDMP=BOFF THEN             /* IF SNAP DUMP,                 */
         TM    DPRDMP,B'10000000'                               02S0866
         BNZ   @RF00866                                         02S0866
*     DO;                           /* ISSUE ENQ.                    */
*       APESEXRA=ADDR(CLRXENQ);     /* ESTAE EXIT MUST FREE          */
         LA    @15,CLRXENQ                                      02S0868
         ST    @15,APESEXRA                                     02S0868
*       APESFEXR=BON;               /* SHOW EXIT EXISTS              */
         OI    APESFEXR,B'00000100'                             02S0869
*       GEN REFS(CXENQ,APCTENQM,APCT,APCTPTR) SETS(DXENQ);      02S0870
*                                   /*
         MVC   DXENQ,CXENQ         INITIALIZE PARAMETER LIST
         ENQ   (APCTENQM-APCT(,APCTPTR),,,,), ISSUE ENQUEUE FOR        *
               MF=(E,DXENQ)        SYSZSSSS/APUB TO KEEP STABLE APDS
*       RFY                                                     02S0871
*         R15F RSTD;                /* ENQ RETURN CODE               */
*       IF R15F=0 THEN              /* IF ENQ WORKED,                */
         LTR   R15F,R15F                                        02S0872
         BNZ   @RF00872                                         02S0872
*         DENQAPUB=BON;             /* SHOW DEQ REQUIRED.            */
         OI    DENQAPUB,B'00100000'                             02S0873
*       ELSE                        /* IF ENQ FAILED, ASSUME RESOURCE*/
*         APESFEXR=BOFF;            /* ALREADY OWNED, DO NOT FREE.   */
         B     @RC00872                                         02S0874
@RF00872 NI    APESFEXR,B'11111011'                             02S0874
*       RFY                                                     02S0875
*         R15F UNRSTD;              /* FINISHED WITH RETURN CODE     */
@RC00872 DS    0H                                               02S0876
*       GEN(SPACE 1)                                            02S0876
*       FLOWS(CLRXENQ) SEQFLOW;     /* SHOW CLRXENQ FLOW ALLOWED     */
         SPACE 1
*     END;                          /* ENQ ISSUED.                   */
*   RETURN;                         /* RETURN TO THE CALLER          */
@EL00011 DS    0H                                               02S0878
@EF00011 DS    0H                                               02S0878
@ER00011 LM    @14,@12,@SA00011                                 02S0878
         BR    @14                                              02S0878
*   END ENQAPUB;                    /* END OF INTERNAL SUBROUTINE    */
         B     @EL00011                                         02S0879
*DEQAPUB:                           /* ISSUE DEQ ON SYSZSSSS/APUB    */
*   PROC;                           /* SINCE FINISHED WITH APDS.     */
*                                                               02S0880
DEQAPUB  STM   @14,@12,@SA00012                                 02S0880
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE DEQ ON SYSZSSSS/APUB IF THE PREVIOUS ENQ (ENQAPUB)      */
*   /* WORKED. THE APDS CHAINS HAS BEEN DUMPED.                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0881
*   IF DENQAPUB=BON THEN            /* IF ENQ ISSUED AND WORKED,     */
         TM    DENQAPUB,B'00100000'                             02S0881
         BNO   @RF00881                                         02S0881
*     DO;                           /* ISSUE DEQ.                    */
*       GEN REFS(DXENQ);                                        02S0883
*                                   /*
         DEQ   ,RET=NONE,          RETURN CODES NOT WANTED --          *
               MF=(E,DXENQ)        * DEQ MUST WORK
*       DENQAPUB=BOFF;              /* SHOW RESOURCE NOT OWNED       */
         NI    DENQAPUB,B'11011111'                             02S0884
*       APESFEXR=BOFF;              /* ESTAE EXIT NOT NEEDED.        */
         NI    APESFEXR,B'11111011'                             02S0885
*     END;                          /* DEQ ISSUED.                   */
*   RETURN;                         /* RETURN TO THE CALLER          */
@EL00012 DS    0H                                               02S0887
@EF00012 DS    0H                                               02S0887
@ER00012 LM    @14,@12,@SA00012                                 02S0887
         BR    @14                                              02S0887
*   END DEQAPUB;                    /* END OF INTERNAL SUBROUTINE    */
         B     @EL00012                                         02S0888
*CLRXENQ:                           /* EXTENDED ESTAE EXIT ROUTINE   */
*   PROC OPTIONS(NOSAVEAREA);       /* (CALLED BY IGTUKA).           */
*                                                               02S0889
CLRXENQ  STM   @14,@12,12(@13)                                  02S0889
*   /*****************************************************************/
*   /*                                                               */
*   /* ERROR OCCURRED WHILE OWNING SYSZSSSS/APUB RESOURCE. THIS      */
*   /* ROUTINE GAINS CONTROL AS AN EXTENSION OF THE ESTAE EXIT       */
*   /* ROUTINE -- IGTUKA. THIS ROUTINE IS ENTERED IN KEY-0 SUPERVISOR*/
*   /* STATE, ENABLED. REGISTERS 2-13 ARE AS SAVED IN APESREGS.      */
*   /* REGISTER 14 HAS THE RETURN ADDRESS TO IGTUKA. ISSUE A         */
*   /* CONDITIONAL DEQ FOR SYSZSSSS/APUB AND RETURN CONTROL TO IGTUKA*/
*   /* FOR NORMAL PROCESSING.                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0890
*   IF DENQAPUB=BON THEN            /* IF RESOURCE OWNED BY THIS     */
         TM    DENQAPUB,B'00100000'                             02S0890
         BNO   @RF00890                                         02S0890
*     DO;                           /* MODULE, FREE IT.              */
*       GEN(DEQ   ,RET=HAVE,MF=(E,DXENQ))                       02S0892
*       REFS(DXENQ) SETS(DXENQ);    /* ISSUE CONDITIONAL DEQUEUE.    */
         DEQ   ,RET=HAVE,MF=(E,DXENQ)
*       DENQAPUB=BOFF;              /* RESOURCE NO LONGER OWNED      */
         NI    DENQAPUB,B'11011111'                             02S0893
*     END;                          /* CRITICAL RESOURCE RELEASED    */
*   RETURN;                         /* RETURN TO IGTUKA              */
@EL00013 DS    0H                                               02S0895
@EF00013 DS    0H                                               02S0895
@ER00013 LM    @14,@12,12(@13)                                  02S0895
         BR    @14                                              02S0895
*   END CLRXENQ;                    /* END OF SUBROUTINE             */
         B     @EL00013                                         02S0896
         EJECT
*ENQTIOT:                           /* ISSUE ENQ ON SYSZTIOT/ASID    */
*   PROC;                           /* TO PREVENT DSAB CHAIN MODS    */
*                                                               02S0897
ENQTIOT  STM   @14,@12,@SA00014                                 02S0897
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE SHARED ENQ ON SYSZTIOT/ASID-QDB TO PREVENT THE DSAB     */
*   /* CHAIN FROM BEING MODIFIED. THIS ALLOWS A STATIC DSAB CHAIN TO */
*   /* BE SEARCHED. THIS RESOURCE MAY NOT BE HELD ACCROSS PRINT      */
*   /* PROCESSING SINCE EOV COULD BE REQUIRED (WHICH ALSO NEEDS THIS */
*   /* RESOURCE)                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0898
*   IF DPRDMP=BOFF THEN             /* IF SNAP DUMP,                 */
         TM    DPRDMP,B'10000000'                               02S0898
         BNZ   @RF00898                                         02S0898
*     DO;                           /* ISSUE ENQ.                    */
*       DTIOTEQA=ADPLASID;          /* ASID BEING PROCESSED          */
         L     @01,DABDPLPT                                     02S0900
         LH    @15,ADPLASID(,@01)                               02S0900
         STH   @15,DTIOTEQA                                     02S0900
*       DTIOTEQJ=DQDBPTR;           /* ADDRESS OF QDB                */
         L     @15,DQDBPTR                                      02S0901
         ST    @15,DTIOTEQJ                                     02S0901
*       APESEXRA=ADDR(CLRYENQ);     /* ESTAE EXIT MUST FREE          */
         LA    @15,CLRYENQ                                      02S0902
         ST    @15,APESEXRA                                     02S0902
*       APESFEXR=BON;               /* SHOW EXIT EXISTS              */
         OI    APESFEXR,B'00000100'                             02S0903
*       GEN REFS(CYENQ,DTIOTEQ) SETS(DYENQ);                    02S0904
*                                   /*
         MVC   DYENQ,CYENQ         INITIALIZE PARAMETER LIST
         ENQ   (,DTIOTEQ,,,),      ISSUE ENQUEUE FOR SYSZTIOT/         *
               MF=(E,DYENQ)        ASID-QDB TO KEEP STABLE DSAB
*       RFY                                                     02S0905
*         R15F RSTD;                /* ENQ RETURN CODE               */
*       IF R15F=0 THEN              /* IF ENQ WORKED,                */
         LTR   R15F,R15F                                        02S0906
         BNZ   @RF00906                                         02S0906
*         DENQTIOT=BON;             /* SHOW DEQ REQUIRED.            */
         OI    DENQTIOT,B'00001000'                             02S0907
*       ELSE                        /* IF ENQ FAILED, ASSUME RESOURCE*/
*         APESFEXR=BOFF;            /* ALREADY OWNED, DO NOT FREE.   */
         B     @RC00906                                         02S0908
@RF00906 NI    APESFEXR,B'11111011'                             02S0908
*       RFY                                                     02S0909
*         R15F UNRSTD;              /* FINISHED WITH RETURN CODE     */
@RC00906 DS    0H                                               02S0910
*       GEN(SPACE 1)                                            02S0910
*       FLOWS(CLRYENQ) SEQFLOW;     /* SHOW CLRYENQ FLOW ALLOWED     */
         SPACE 1
*     END;                          /* ENQ ISSUED.                   */
*   RETURN;                         /* RETURN TO THE CALLER          */
@EL00014 DS    0H                                               02S0912
@EF00014 DS    0H                                               02S0912
@ER00014 LM    @14,@12,@SA00014                                 02S0912
         BR    @14                                              02S0912
*   END ENQTIOT;                    /* END OF INTERNAL SUBROUTINE    */
         B     @EL00014                                         02S0913
*DEQTIOT:                           /* ISSUE DEQ ON SYSZTIOT/ASID    */
*   PROC;                           /* SINCE FINISHED WITH DSAB.     */
*                                                               02S0914
DEQTIOT  STM   @14,@12,@SA00015                                 02S0914
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE DEQ ON SYSZTIOT/ASID-QDB IF THE PREVIOUS ENQ (ENQTIOT)  */
*   /* WORKED. THE DSAB CHAIN HAS BEEN SCANNED.                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0915
*   IF DENQTIOT=BON THEN            /* IF ENQ ISSUED AND WORKED,     */
         TM    DENQTIOT,B'00001000'                             02S0915
         BNO   @RF00915                                         02S0915
*     DO;                           /* ISSUE DEQ.                    */
*       GEN REFS(DYENQ);                                        02S0917
*                                   /*
         DEQ   ,RET=NONE,          RETURN CODES NOT WANTED --          *
               MF=(E,DYENQ)        * DEQ MUST WORK
*       DENQTIOT=BOFF;              /* SHOW RESOURCE NOT OWNED       */
         NI    DENQTIOT,B'11110111'                             02S0918
*       APESFEXR=BOFF;              /* ESTAE EXIT NOT NEEDED.        */
         NI    APESFEXR,B'11111011'                             02S0919
*     END;                          /* DEQ ISSUED.                   */
*   RETURN;                         /* RETURN TO THE CALLER          */
@EL00015 DS    0H                                               02S0921
@EF00015 DS    0H                                               02S0921
@ER00015 LM    @14,@12,@SA00015                                 02S0921
         BR    @14                                              02S0921
*   END DEQTIOT;                    /* END OF INTERNAL SUBROUTINE    */
         B     @EL00015                                         02S0922
*CLRYENQ:                           /* EXTENDED ESTAE EXIT ROUTINE   */
*   PROC OPTIONS(NOSAVEAREA);       /* (CALLED BY IGTUKA).           */
*                                                               02S0923
CLRYENQ  STM   @14,@12,12(@13)                                  02S0923
*   /*****************************************************************/
*   /*                                                               */
*   /* ERROR OCCURRED WHILE OWNING SYSZTIOT/ASIS-QDB RESOURCE. THIS  */
*   /* ROUTINE GAINS CONTROL AS AN EXTENSION OF THE ESTAE EXIT       */
*   /* ROUTINE -- IGTUKA. THIS ROUTINE IS ENTERED IN KEY-0 SUPERVISOR*/
*   /* STATE, ENABLED. REGISTERS 2-13 ARE AS SAVED IN APESREGS.      */
*   /* REGISTER 14 HAS THE RETURN ADDRESS TO IGTUKA. ISSUE A         */
*   /* CONDITIONAL DEQ FOR SYSZTIOT/ASID AND RETURN CONTROL TO IGTUKA*/
*   /* FOR NORMAL PROCESSING.                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0924
*   IF DENQTIOT=BON THEN            /* IF RESOURCE OWNED BY THIS     */
         TM    DENQTIOT,B'00001000'                             02S0924
         BNO   @RF00924                                         02S0924
*     DO;                           /* MODULE, FREE IT.              */
*       GEN(DEQ   ,RET=HAVE,MF=(E,DYENQ))                       02S0926
*       REFS(DYENQ) SETS(DYENQ);    /* ISSUE CONDITIONAL DEQUEUE.    */
         DEQ   ,RET=HAVE,MF=(E,DYENQ)
*       DENQTIOT=BOFF;              /* RESOURCE NO LONGER OWNED      */
         NI    DENQTIOT,B'11110111'                             02S0927
*     END;                          /* CRITICAL RESOURCE RELEASED    */
*   RETURN;                         /* RETURN TO IGTUKA              */
@EL00016 DS    0H                                               02S0929
@EF00016 DS    0H                                               02S0929
@ER00016 LM    @14,@12,12(@13)                                  02S0929
         BR    @14                                              02S0929
*   END CLRYENQ;                    /* END OF SUBROUTINE             */
         B     @EL00016                                         02S0930
         EJECT
*FORMAT:                            /* CONVERT CONTROL BLOCK TO      */
*   PROC;                           /* PRINTABLE HEX & PRINT IT.     */
*                                                               02S0931
FORMAT   STM   @14,@12,@SA00017                                 02S0931
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT & PRINT A CONTROL BLOCK. ON ENTRY, DADDR HAS THE       */
*   /* ADDRESS OF THE BLOCK TO PRINT AND DSIZE ITS LENGTH. DFMTSW HAS*/
*   /* THE PROCESSING OPTIONS. DXBLKNM IS SET TO THE MBLKID INDEX OF */
*   /* THE BLOCK LABEL BEING FORMATTED.                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0932
*   DRETRY(02)=APESRTRY;            /* SAVE CURRENT RETRY ADDRESS    */
         L     @11,APESREGP                                     02S0932
         L     @05,APESRTRY(,@11)                               02S0932
         ST    @05,DRETRY+4                                     02S0932
*   APESRTRY=ADDR(FORMATZ);         /* SET NEW RETRY FOR THIS RTN    */
         LA    @05,FORMATZ                                      02S0933
         ST    @05,APESRTRY(,@11)                               02S0933
*   GEN(SPACE 1)                                                02S0934
*   NOREFS NOSETS SEQFLOW FLOWS(FORMATZ);/* NO CODE -- FLOW ONLY     */
         SPACE 1
*   DSIZE=DSIZE&'00FFFFFF'X;        /* CLEAR HI ORDER BYTE           */
         N     DSIZE,@CF05120                                   02S0935
*   DADDR=DADDR&'7FFFFFFF'X;        /* CLEAR EXTRANEOUS BIT          */
         N     DADDR,@CF05231                                   02S0936
*   DSIZE0=DSIZE;                   /* SIZE OF CONTROL BLOCK         */
         ST    DSIZE,DSIZE0                                     02S0937
*   DADDR0=DADDR;                   /* ADDRESS OF CONTROL BLOCK      */
         LR    DADDR0,DADDR                                     02S0938
*   IF DSIZE0>CMXBLKSZ THEN         /* INSURE BLOCK SIZE NOT         */
         L     @10,DSIZE0                                       02S0939
         L     @05,@CF05085                                     02S0939
         CR    @10,@05                                          02S0939
         BNH   @RF00939                                         02S0939
*     DSIZE0=CMXBLKSZ;              /* CLOBBERED.                    */
         ST    @05,DSIZE0                                       02S0940
*   DSIZE4=0;                       /* CLEAR PRINT LINE              */
*                                                               02S0941
@RF00939 SLR   @10,@10                                          02S0941
         ST    @10,DSIZE4                                       02S0941
*   /*****************************************************************/
*   /*                                                               */
*   /* PRINT CONTROL BLOCK TITLE                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0942
*   IF DNONAME=BOFF THEN            /* IF TITLE LINE NOT SUPPRESSED  */
         TM    DNONAME,B'00100000'                              02S0942
         BNZ   @RF00942                                         02S0942
*     DO;                           /* THEN PRINT IT                 */
*       CALL SKIP(2);               /* BLANK LINES                   */
         LA    @01,@AL00944                                     02S0944
         BAL   @14,SKIP                                         02S0944
*       DLINE2=CLINE2;              /* INITIALIZE HEADER             */
         MVC   DLINE2(36),CLINE2                                02S0945
*       DLINE2A=MBLKID(DXBLKNM);    /* CONTROL BLOCK NAME            */
         SLR   @10,@10                                          02S0946
         IC    @10,DXBLKNM                                      02S0946
         SLA   @10,3                                            02S0946
         LA    @05,MBLKID-8(@10)                                02S0946
         MVC   DLINE2A(8),0(@05)                                02S0946
*       IF DINFOL2=BON THEN         /* IF 'DBLKINFO' HAS VALID DATA, */
         TM    DINFOL2,B'00010000'                              02S0947
         BNO   @RF00947                                         02S0947
*         DLINE2B=DBLKINFO;         /* THEN MOVE TO DATA LINE.       */
         MVC   DLINE2B(8),DBLKINFO                              02S0948
*       RFY                                                     02S0949
*        (R0P,                                                  02S0949
*         R1P) RSTD;                /* PUT ADDRESS OF                */
@RF00947 DS    0H                                               02S0950
*       R0P=DADDR0;                 /* BLOCK IN TITLE LINE           */
         LR    R0P,DADDR0                                       02S0950
*       R1P=ADDR(DLINE2C);          /* (MAKE 6-DIGIT HEX)            */
         LA    R1P,DLINE2C                                      02S0951
*       CALL CNVTADR;                                           02S0952
         BAL   @14,CNVTADR                                      02S0952
*       RFY                                                     02S0953
*        (R0P,                                                  02S0953
*         R1P) UNRSTD;                                          02S0953
*       CALL PRINT;                 /* PRINT TITLE                   */
         BAL   @14,PRINT                                        02S0954
*       CALL SKIP(1);               /* SEPARATE FROM DATA            */
         LA    @01,@AL00955                                     02S0955
         BAL   @14,SKIP                                         02S0955
*     END;                          /* TITLE PROCESSED               */
*   DNONAME=BOFF;                   /* RESET NO-TITLE INDICATOR      */
*                                                               02S0957
@RF00942 NI    DNONAME,B'11011111'                              02S0957
*   /*****************************************************************/
*   /*                                                               */
*   /* LOOP THRU BLOCK AND PRINT 20 CHARACTERS (HEX) PER LINE        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0958
*   DO WHILE(DSIZE0>0);                                         02S0958
*                                                               02S0958
         B     @DE00958                                         02S0958
@DL00958 DS    0H                                               02S0959
*     /***************************************************************/
*     /*                                                             */
*     /* FIND SIZE TO PRINT THIS LINE (DSIZE2)                       */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0959
*     IF DSIZE0<LENGTH(DT1LINE3) THEN/* IF FULL LINE NOT             */
         L     @10,DSIZE0                                       02S0959
         LA    @05,32                                           02S0959
         CR    @10,@05                                          02S0959
         BNL   @RF00959                                         02S0959
*       DO;                         /* REMAINING, PRINT REST.        */
*         DSIZE2=DSIZE0;            /* SET DSIZE4 TO AMOUNT OF LINE  */
         ST    @10,DSIZE2                                       02S0961
*         DSIZE4=LENGTH(DT1LINE3)-DSIZE2;/* LINE NOT TO PRINT.       */
         SLR   @05,@10                                          02S0962
         ST    @05,DSIZE4                                       02S0962
*       END;                        /* (FOR 0C4 & SECURITY)          */
*     ELSE                          /* IF AT LEAST FULL LINE LEFT,   */
*       DSIZE2=LENGTH(DT1LINE3);    /* PRINT ENTIRE BUFFER.          */
*                                                               02S0964
         B     @RC00959                                         02S0964
@RF00959 MVC   DSIZE2(4),@CF00126                               02S0964
*     /***************************************************************/
*     /*                                                             */
*     /* MOVE DATA TO DT1LINE3                                       */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0965
*     IF DPGMCHK=BON THEN           /* IF PROGRAM CHECK              */
@RC00959 TM    DPGMCHK,B'01000000'                              02S0965
         BNO   @RF00965                                         02S0965
*       DO;                         /* ALLOWED (USER DATA)           */
*         APESFSDP=BOFF;            /* DONOT RECORD OR TAKE          */
*         APESFREC=BOFF;            /* SDUMP                         */
         NI    APESFSDP,B'10011111'                             02S0968
*       END;                        /* APES UPDATED                  */
*     IF DPRDMP=BON THEN            /* IF RUNNING FOR PRDMP,         */
@RF00965 TM    DPRDMP,B'10000000'                               02S0970
         BNO   @RF00970                                         02S0970
*       DO;                         /* USE MEMORY ACCESS             */
*                                                               02S0971
*         /***********************************************************/
*         /*                                                         */
*         /* PRDMP MOVE -- FIND MOVE SIZES ON BOTH SIDES OF PRDMP    */
*         /* BUFFER                                                  */
*         /*                                                         */
*         /***********************************************************/
*                                                               02S0972
*         DSIZE5=((DADDR0+(CPDBUFSZ-1))&CPDBUFRN)/* AMOUNT           */
*             -DADDR0;              /* IN FIRST PRDMP BUFFER         */
         LA    @10,2047                                         02S0972
         ALR   @10,DADDR0                                       02S0972
         N     @10,@CF05081                                     02S0972
         SLR   @10,DADDR0                                       02S0972
         ST    @10,DSIZE5                                       02S0972
*         IF DSIZE5>DSIZE2 THEN     /* SET DSIZE5 = AMOUNT TO PRINT  */
         L     @05,DSIZE2                                       02S0973
         CR    @10,@05                                          02S0973
         BNH   @RF00973                                         02S0973
*           DSIZE5=DSIZE2;          /* IN FIRST BUFFER.              */
         ST    @05,DSIZE5                                       02S0974
*         DSIZE6=DSIZE2-DSIZE5;     /* 2ND BUFFER AMOUNT TO PRINT    */
@RF00973 L     @10,DSIZE5                                       02S0975
         L     @05,DSIZE2                                       02S0975
         SLR   @05,@10                                          02S0975
         ST    @05,DSIZE6                                       02S0975
*         IF DSIZE5>0 THEN          /* IF ANY IN INITIAL BUFFER      */
         LTR   @10,@10                                          02S0976
         BNP   @RF00976                                         02S0976
*           DO;                     /* THEN SAVE IT.                 */
*             RMEMORY=DADDR0;       /* CONVERT ADDRESS TO            */
         LR    RMEMORY,DADDR0                                   02S0978
*             CALL XLTE;            /* PRDMP BUFFER ADDRESS          */
         L     @15,DXLATOR                                      02S0979
         BALR  @14,@15                                          02S0979
*             MVC(DT1LINE3(1:DSIZE5),RMEMORY->I256C);/* SAVE IT      */
         L     @10,DSIZE5                                       02S0980
         BCTR  @10,0                                            02S0980
         EX    @10,@SM05352                                     02S0980
*           END;                    /* FIRST BUFFER SAVED            */
*         IF DSIZE6>0 THEN          /* IF ANY DATA IN 2ND BUFFER     */
@RF00976 L     @10,DSIZE6                                       02S0982
         LTR   @10,@10                                          02S0982
         BNP   @RF00982                                         02S0982
*           DO;                     /* THEN SAVE IT.                 */
*             RMEMORY=DADDR0+DSIZE5;/* CONVERT VIRTUAL ADDRESS       */
         LR    RMEMORY,DADDR0                                   02S0984
         AL    RMEMORY,DSIZE5                                   02S0984
*             CALL XLTE;            /* TO BUFFER ADDRESS             */
         L     @15,DXLATOR                                      02S0985
         BALR  @14,@15                                          02S0985
*             MVC(DT1LINE3(DSIZE5+1:DSIZE2),RMEMORY->I256C);/* SAVE  */
         L     @10,DSIZE5                                       02S0986
         LA    @05,DT1LINE3(@10)                                02S0986
         L     @10,DSIZE2                                       02S0986
         SL    @10,DSIZE5                                       02S0986
         BCTR  @10,0                                            02S0986
         EX    @10,@SM05354                                     02S0986
*           END;                    /* 2ND BUFFER PROCESSED          */
*       END;                        /* PRDMP DATA SAVED              */
*     ELSE                          /* IF SNAP FORMATTING            */
*       DO;                         /* THEN PROCESS HERE --          */
*                                                               02S0989
         B     @RC00970                                         02S0989
@RF00970 DS    0H                                               02S0990
*         /***********************************************************/
*         /*                                                         */
*         /* EXECUTING UNDER SNAP -- JUST MOVE DATA                  */
*         /*                                                         */
*         /***********************************************************/
*                                                               02S0990
*         IF DPROTSW=BOFF THEN      /* IF DATA NOT FETCH PROTECTED,  */
         TM    DPROTSW,B'10000000'                              02S0990
         BNZ   @RF00990                                         02S0990
*           MVC(DT1LINE3(1:DSIZE2),DADDR0->I256C);/* JUST MOVE IT.   */
         L     @10,DSIZE2                                       02S0991
         BCTR  @10,0                                            02S0991
         EX    @10,@SM05356                                     02S0991
*         ELSE                      /* OTHERWISE MUST LOOP USING     */
*           DO;                     /* MODESET BETWEEN REF & STORE   */
         B     @RC00990                                         02S0992
@RF00990 DS    0H                                               02S0993
*             RFY                                               02S0993
*              (R0P,                                            02S0993
*               R1F,                                            02S0993
*               R14P,                                           02S0993
*               R15P) RSTD;         /* LOOP REGISTERS                */
*             R14P=ADDR(DT1LINE3);  /* 'TO' POINTER                  */
         LA    R14P,DT1LINE3                                    02S0994
*             R15P=DADDR0;          /* 'FROM' POINTER                */
         LR    R15P,DADDR0                                      02S0995
*             R1F=DPROTKEY;         /* STORAGE PROTECT KEY           */
         SLR   R1F,R1F                                          02S0996
         IC    R1F,DPROTKEY                                     02S0996
*             DO DSIZE7=1 TO DSIZE2;/* SCAN 'FROM' FIELD             */
         LA    DSIZE7,1                                         02S0997
         B     @DE00997                                         02S0997
@DL00997 DS    0H                                               02S0998
*               SPKA(R1F);          /* SWITCH TO STORAGE KEY         */
         SPKA  0(R1F)                                           02S0998
*               GEN(IC    R0F,0(,R15P))                         02S0999
*               REFS(R15P) SETS(R0F);/* SAVE 1-BYTE                  */
         IC    R0F,0(,R15P)
*               GEN(MODESET EXTKEY=SCHED)                       02S1000
*               NOREFS NOSETS;      /* RESUME OUR KEY                */
         MODESET EXTKEY=SCHED
*               APESFREC=BON;       /* RESET APES. TAKE SDUMP        */
*               APESFSDP=BON;       /* AND LOG ON ERRORS             */
         OI    APESFREC,B'01100000'                             02S1002
*               R14P->I001C=R0F;    /* MOVE DATA TO OUR BUFFER       */
         STC   R0F,I001C(,R14P)                                 02S1003
*               R14P=R14P+1;        /* INCREMENT DATA &              */
         LA    @10,1                                            02S1004
         ALR   R14P,@10                                         02S1004
*               R15P=R15P+1;        /* BUFFER ADDRESSES.             */
         ALR   R15P,@10                                         02S1005
*             END;                  /* LOOP THRU ALL OF DATA         */
         AL    DSIZE7,@CF00068                                  02S1006
@DE00997 C     DSIZE7,DSIZE2                                    02S1006
         BNH   @DL00997                                         02S1006
*             RFY                                               02S1007
*              (R0P,                                            02S1007
*               R1F,                                            02S1007
*               R14P,                                           02S1007
*               R15P) UNRSTD;       /* LOOP DONE                     */
*           END;                    /* PROTECTED DATA SAVED          */
*       END;                        /* SNAP DATA SAVED               */
@RC00990 DS    0H                                               02S1010
*     APESFREC=BON;                 /* RESET DUMP/RECORD FLAGS       */
@RC00970 DS    0H                                               02S1011
*     APESFSDP=BON;                 /* IF PREVIOUSLY SET OFF.        */
*                                                               02S1011
         OI    APESFREC,B'01100000'                             02S1011
*     /***************************************************************/
*     /*                                                             */
*     /* CONVERT HEX TO PRINTABLE HEX. MOVE INTO TEMPORARY AREA.     */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S1012
*     RFY                                                       02S1012
*      (R0F,                                                    02S1012
*       R14P,                                                   02S1012
*       R15P) RSTD;                 /* LOOP REGISTERS                */
*     R14P=ADDR(DT2LINE3);          /* 'TO' LOCATION                 */
         LA    R14P,DT2LINE3                                    02S1013
*     R15P=ADDR(DT1LINE3);          /* 'FROM' LOCATION               */
         LA    R15P,DT1LINE3                                    02S1014
*     DO R0F=8 TO 1 BY-1;           /* PROCESS LINE                  */
         LA    R0F,8                                            02S1015
@DL01015 DS    0H                                               02S1016
*       UNPK(R14P->I256C(1:9),R15P->I256C(1:5));/* MAKE 1->2 BYTES   */
         UNPK  I256C(9,R14P),I256C(5,R15P)                      02S1016
*       R14P=R14P+8;                /* NEXT OUTPUT                   */
         LA    R14P,8(,R14P)                                    02S1017
*       R15P=R15P+4;                /* NEXT INPUT                    */
         LA    R15P,4(,R15P)                                    02S1018
*     END;                          /* CONTINUE LOOP                 */
         BCTR  R0F,0                                            02S1019
         LTR   R0F,R0F                                          02S1019
         BP    @DL01015                                         02S1019
*     RFY                                                       02S1020
*      (R0F,                                                    02S1020
*       R14P,                                                   02S1020
*       R15P) UNRSTD;               /* FINISHED WITH LOOP REGS       */
*     TR(DT2LINE3,CPRHEX);          /* MAKE CHARACTERS A-F, 0-9      */
         TR    DT2LINE3(64),CPRHEX                              02S1021
*     TR(DT1LINE3,CPRCHAR);         /* ELIMINATE UNPRINTABLES        */
*                                                               02S1022
         TR    DT1LINE3(32),CPRCHAR                             02S1022
*     /***************************************************************/
*     /*                                                             */
*     /* IF LAST LINE, ELIMINATE ENDING PORTION                      */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S1023
*     IF DSIZE4>0 THEN              /* IF PARTIAL LAST LINE          */
         L     @10,DSIZE4                                       02S1023
         LTR   @10,@10                                          02S1023
         BNP   @RF01023                                         02S1023
*       DO;                         /* ELIMINATE EXCESS              */
*         MVC(DT1LINE3(LENGTH(DT1LINE3)+1-DSIZE4:/* SET UNUSED       */
*             LENGTH(DT1LINE3)),CBLANK);/* PORTIONS OF BOTH HEX      */
         LA    @05,33                                           02S1025
         SLR   @05,@10                                          02S1025
         LA    @01,DT1LINE3-1(@05)                              02S1025
         LA    @05,33                                           02S1025
         SL    @05,DSIZE4                                       02S1025
         LCR   @05,@05                                          02S1025
         AL    @05,@CF00126                                     02S1025
         EX    @05,@SM05358                                     02S1025
*         MVC(DT2LINE3(LENGTH(DT2LINE3)+1-2*DSIZE4:/* AND CHARACTER  */
*             LENGTH(DT2LINE3)),CBLANK);/* TO BLANKS.                */
         ALR   @10,@10                                          02S1026
         LCR   @10,@10                                          02S1026
         AL    @10,@CF03824                                     02S1026
         LA    @05,DT2LINE3-1(@10)                              02S1026
         L     @10,DSIZE4                                       02S1026
         ALR   @10,@10                                          02S1026
         LCR   @10,@10                                          02S1026
         AL    @10,@CF03824                                     02S1026
         LCR   @10,@10                                          02S1026
         AL    @10,@CF00215                                     02S1026
         EX    @10,@SM05360                                     02S1026
*       END;                        /* LAST LINE PROCESSED           */
*                                                               02S1027
*     /***************************************************************/
*     /*                                                             */
*     /* MOVE TO PRINT LINE                                          */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S1028
*     DLINE3=CLINE3;                /* INITIALIZE PRINT LINE         */
*                                                               02S1028
@RF01023 MVC   DLINE3(120),CLINE3                               02S1028
*     /***************************************************************/
*     /*                                                             */
*     /* MOVE PRINTABLE HEX TO PRINT LINE. ALSO CHARACTER VALUES.    */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S1029
*     DLINE3B=DT2LINE3(01:08);      /* MOVE IN GROUPS                */
         MVC   DLINE3B(8),DT2LINE3                              02S1029
*     DLINE3C=DT2LINE3(09:16);      /* OF 4-BYTES                    */
         MVC   DLINE3C(8),DT2LINE3+8                            02S1030
*     DLINE3D=DT2LINE3(17:24);      /* (8-CHARACTERS).               */
         MVC   DLINE3D(8),DT2LINE3+16                           02S1031
*     DLINE3E=DT2LINE3(25:32);      /* PUT EXTRA SPACE               */
         MVC   DLINE3E(8),DT2LINE3+24                           02S1032
*     DLINE3F=DT2LINE3(33:40);      /* BETWEEN                       */
         MVC   DLINE3F(8),DT2LINE3+32                           02S1033
*     DLINE3G=DT2LINE3(41:48);      /* X'10' BYTES                   */
         MVC   DLINE3G(8),DT2LINE3+40                           02S1034
*     DLINE3H=DT2LINE3(49:56);      /* (HALFWAY).                    */
         MVC   DLINE3H(8),DT2LINE3+48                           02S1035
*     DLINE3I=DT2LINE3(57:64);      /* UNUSED FIELDS BLANK           */
         MVC   DLINE3I(8),DT2LINE3+56                           02S1036
*     DLINE3J=DT1LINE3;             /* SAVE CHARACTER FORMAT         */
*                                                               02S1037
         MVC   DLINE3J(32),DT1LINE3                             02S1037
*     /***************************************************************/
*     /*                                                             */
*     /* PUT OFFSET INTO CONTROL BLOCK IN THE PRINT LINE             */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S1038
*     RFY                                                       02S1038
*      (R0F,                                                    02S1038
*       R1P) RSTD;                  /* CONTROL REGISTERS             */
*     R1P=ADDR(DLINE3A);            /* PUT OFFSET HERE               */
         LA    R1P,DLINE3A                                      02S1039
*     R0F=DADDR0-DADDR;             /* OFFSET                        */
         LR    R0F,DADDR0                                       02S1040
         SLR   R0F,DADDR                                        02S1040
*     CALL CNVTADR;                 /* CONVERT TO PRINTABLE HEX      */
         BAL   @14,CNVTADR                                      02S1041
*     DLINE3A(1:1)=' ';             /* FIRST CHARACTER MUST BE BLANK */
         MVI   DLINE3A,C' '                                     02S1042
*     R1P=ADDR(DLINE3A)+1;          /* SCAN OFFSET & REPLACE LEADING */
         LA    R1P,DLINE3A                                      02S1043
         LA    R1P,1(,R1P)                                      02S1043
*     DO R0F=LENGTH(DLINE3A)-2 TO 1 BY-1/* ZEROS WITH BLANKS         */
*           WHILE(R1P->I001C='0');  /* IF ALL ZEROS, LEAVE           */
         LA    R0F,4                                            02S1044
@DL01044 CLI   I001C(R1P),C'0'                                  02S1044
         BNE   @DC01044                                         02S1044
*       R1P->I001C=' ';             /* 1-BLANK                       */
         MVI   I001C(R1P),C' '                                  02S1045
*       R1P=R1P+1;                                              02S1046
         LA    R1P,1(,R1P)                                      02S1046
*     END;                                                      02S1047
         BCTR  R0F,0                                            02S1047
         LTR   R0F,R0F                                          02S1047
         BP    @DL01044                                         02S1047
@DC01044 DS    0H                                               02S1048
*     R1P=R1P-1;                    /* POINT TO LAST BLANK SPOT      */
         BCTR  R1P,0                                            02S1048
*     R1P->I001C='+';               /* SHOW OFFSET, NOT ADDRESS.     */
         MVI   I001C(R1P),C'+'                                  02S1049
*     RFY                                                       02S1050
*      (R0F,                                                    02S1050
*       R1P) UNRSTD;                /* FINSIHED WITH REGISTERS       */
*                                                               02S1050
*     /***************************************************************/
*     /*                                                             */
*     /* PRINT THE LINE                                              */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S1051
*     CALL PRINT;                   /* PRINT DATA LINE               */
*                                                               02S1051
         BAL   @14,PRINT                                        02S1051
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS THE NEXT LINE                                       */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S1052
*     DADDR0=DADDR0+LENGTH(DT1LINE3);/* NEXT CNTRL BLK LOCATION      */
         LA    @10,32                                           02S1052
         ALR   DADDR0,@10                                       02S1052
*     DSIZE0=DSIZE0-LENGTH(DT1LINE3);/* REMAINING SIZE               */
         LCR   @10,@10                                          02S1053
         AL    @10,DSIZE0                                       02S1053
         ST    @10,DSIZE0                                       02S1053
*   END;                            /* CONTINUE PRINT LINE           */
*                                                               02S1054
@DE00958 L     @10,DSIZE0                                       02S1054
         LTR   @10,@10                                          02S1054
         BP    @DL00958                                         02S1054
*   /*****************************************************************/
*   /*                                                               */
*   /* CONTROL BLOCK PRINTED. RETURN TO CALLER.                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S1055
*FORMATX:                           /* ERROR-EXIT RETURN LABLE       */
*   DO;                             /* ENTRY FROM ESTAE/FRR RETRY    */
*                                                               02S1055
FORMATX  DS    0H                                               02S1056
*     /***************************************************************/
*     /*                                                             */
*     /* ENTRY FROM ESTAE/FRR RETRY (IGTUKA). RETRY DOES NOT INSURE  */
*     /* REGISTERS 0-5, 9-11, 14-15 VALID SINCE NOT SAVED IN         */
*     /* APESREGS. ISSUE DUMMY RESTRICT TO WIPE PL/S OPTIMIZATION    */
*     /* MEMORY OF CURRENT REGISTER VALUES                           */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S1056
*     RFY                                                       02S1056
*      (R0RSTD,                                                 02S1056
*       R1RSTD,                                                 02S1056
*       R2RSTD,                                                 02S1056
*       R3RSTD,                                                 02S1056
*       R4RSTD,                                                 02S1056
*       R5RSTD,                     /* 6-8 BASES                     */
*       R9RSTD,                                                 02S1056
*       R10RSTD,                                                02S1056
*       R11RSTD,                    /* 12-13 APCT/APSV PTRS          */
*       R14RSTD,                                                02S1056
*       R15RSTD) RSTD;              /* KEEP PL/S FROM CARRYING DATA  */
*     IF DPRDMP=BOFF THEN           /* IF RUNNING UNDER SNAP         */
         TM    DPRDMP,B'10000000'                               02S1057
         BNZ   @RF01057                                         02S1057
*       GEN(MODESET EXTKEY=SCHED)                               02S1058
*       NOREFS NOSETS;              /* SWITCH TO STANDARD KEY (1)    */
         MODESET EXTKEY=SCHED
*     RFY                                                       02S1059
*      (R0RSTD,                                                 02S1059
*       R1RSTD,                                                 02S1059
*       R2RSTD,                                                 02S1059
*       R3RSTD,                                                 02S1059
*       R4RSTD,                                                 02S1059
*       R5RSTD,                     /* 6-8 BASES                     */
*       R9RSTD,                                                 02S1059
*       R10RSTD,                                                02S1059
*       R11RSTD,                    /* 12-13 APCT/APSV PTRS          */
*       R14RSTD,                                                02S1059
*       R15RSTD) UNRSTD;            /* ALLOW PL/S TO USE REGS AGAIN  */
@RF01057 DS    0H                                               02S1060
*   END;                            /* RETRY ENVIRONMENT SET         */
*   APESRTRY=DRETRY(02);            /* RESTORE RETRY ADDRESS         */
         L     @15,DRETRY+4                                     02S1061
         L     @14,APESREGP                                     02S1061
         ST    @15,APESRTRY(,@14)                               02S1061
*   DO;                             /* ERROR RECOVERY COMPLETE       */
*     APESFPRV=BOFF;                /* RESET RECURSION FLAG.         */
         NI    APESFPRV,B'10111111'                             02S1063
*     APESCODE=CERRN99;             /* RESET ERROR CODE              */
         MVI   APESCODE,X'01'                                   02S1064
*     APESFREC=BON;                 /* RESET DUMP/LOG FLAGS          */
*     APESFSDP=BON;                 /* (ALL ON)                      */
         OI    APESFREC,B'01100000'                             02S1066
*   END;                            /* ALL INDICATORS RESET          */
*   DFMTSW='00'X;                   /* RESET PROCESSING FLAGS        */
         MVI   DFMTSW,X'00'                                     02S1068
*   RETURN;                         /* RETURN -- BLOCK PRINTED       */
@EL00017 DS    0H                                               02S1069
@EF00017 DS    0H                                               02S1069
@ER00017 LM    @14,@12,@SA00017                                 02S1069
         BR    @14                                              02S1069
         EJECT
*FORMATZ:                           /* RETRY -- ERROR FORMATTING BLK */
*   DO;                             /* ENTRY FROM ESTAE/FRR RETRY    */
*                                                               02S1070
FORMATZ  DS    0H                                               02S1071
*     /***************************************************************/
*     /*                                                             */
*     /* ENTRY FROM ESTAE/FRR RETRY (IGTUKA). RETRY DOES NOT INSURE  */
*     /* REGISTERS 0-5, 9-11, 14-15 VALID SINCE NOT SAVED IN         */
*     /* APESREGS. ISSUE DUMMY RESTRICT TO WIPE PL/S OPTIMIZATION    */
*     /* MEMORY OF CURRENT REGISTER VALUES                           */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S1071
*     RFY                                                       02S1071
*      (R0RSTD,                                                 02S1071
*       R1RSTD,                                                 02S1071
*       R2RSTD,                                                 02S1071
*       R3RSTD,                                                 02S1071
*       R4RSTD,                                                 02S1071
*       R5RSTD,                     /* 6-8 BASES                     */
*       R9RSTD,                                                 02S1071
*       R10RSTD,                                                02S1071
*       R11RSTD,                    /* 12-13 APCT/APSV PTRS          */
*       R14RSTD,                                                02S1071
*       R15RSTD) RSTD;              /* KEEP PL/S FROM CARRYING DATA  */
*     IF DPRDMP=BOFF THEN           /* IF RUNNING UNDER SNAP         */
         TM    DPRDMP,B'10000000'                               02S1072
         BNZ   @RF01072                                         02S1072
*       GEN(MODESET EXTKEY=SCHED)                               02S1073
*       NOREFS NOSETS;              /* SWITCH TO STANDARD KEY (1)    */
         MODESET EXTKEY=SCHED
*     RFY                                                       02S1074
*      (R0RSTD,                                                 02S1074
*       R1RSTD,                                                 02S1074
*       R2RSTD,                                                 02S1074
*       R3RSTD,                                                 02S1074
*       R4RSTD,                                                 02S1074
*       R5RSTD,                     /* 6-8 BASES                     */
*       R9RSTD,                                                 02S1074
*       R10RSTD,                                                02S1074
*       R11RSTD,                    /* 12-13 APCT/APSV PTRS          */
*       R14RSTD,                                                02S1074
*       R15RSTD) UNRSTD;            /* ALLOW PL/S TO USE REGS AGAIN  */
@RF01072 DS    0H                                               02S1075
*   END;                            /* RETRY ENVIRONMENT SET         */
*   DREFBLK=BOFF;                   /* CLEAR REFERENCE ERROR FLAG    */
         NI    DREFBLK,B'11101111'                              02S1076
*   APESRTRY=ADDR(FORMATX);         /* JUST LEAVE IF 2ND ERROR       */
         LA    @15,FORMATX                                      02S1077
         L     @14,APESREGP                                     02S1077
         ST    @15,APESRTRY(,@14)                               02S1077
*   DO;                             /* ERROR RECOVERY COMPLETE       */
*     APESFPRV=BOFF;                /* RESET RECURSION FLAG.         */
         NI    APESFPRV,B'10111111'                             02S1079
*     APESCODE=CERRN99;             /* RESET ERROR CODE              */
         MVI   APESCODE,X'01'                                   02S1080
*     APESFREC=BON;                 /* RESET DUMP/LOG FLAGS          */
*     APESFSDP=BON;                 /* (ALL ON)                      */
         OI    APESFREC,B'01100000'                             02S1082
*   END;                            /* ALL INDICATORS RESET          */
*   GEN(SPACE 1)                                                02S1084
*   NOREFS NOSETS FLOWS(FORMATX);   /* SHOW FLOW                     */
*                                                               02S1084
         SPACE 1
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD & PRINT ERROR MESSAGE                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S1085
*   CALL SKIP(1);                   /* PRINT 1 BLANK LINE            */
         LA    @01,@AL01085                                     02S1085
         BAL   @14,SKIP                                         02S1085
*   DLINEX=CLINEX;                  /* CLEAR PRINT LINE              */
         MVC   DLINEX(120),CLINEX                               02S1086
*   DLINE4=CLINE4;                  /* ERROR MESSAGE                 */
         MVC   DLINE4(32),CLINE4                                02S1087
*   CALL PRINT;                     /* PRINT IT                      */
         BAL   @14,PRINT                                        02S1088
*   GOTO FORMATX;                   /* RETURN TO CALLER              */
         B     FORMATX                                          02S1089
*   END FORMAT;                     /* END OF FORMATTER              */
         EJECT
*CNVTADR:                                                       02S1091
*   PROC OPTIONS(PARMREG);          /* PRINTABLE HEX (6 CHARACTERS)  */
*                                                               02S1091
CNVTADR  STM   @14,@12,12(@13)                                  02S1091
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE CONVERTS THE ADDRESS CONTAINED IN REGISTER 0  */
*   /* TO CHARACTER HEXADECIMAL (6 CHARACTERS) AND PLACES THE VALUE  */
*   /* AT THE ADDRESS SPECIFIED IN GENERAL REGISTER 1.               */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S1092
*   DCL                             /* INTERNAL DYNAMIC AREA VALUES  */
*     1 DCNVT1 CHAR(5) BDY(WORD),   /* ADDRESS TO CONVERT            */
*      2 DCNVT1A FIXED(31),         /* ADDRESS TO CONVERT            */
*      2 * CHAR(1),                 /* EXTRA BYTE FOR UNPACK         */
*     1 DCNVT2 CHAR(9) BDY(BYTE),   /* CONVERTED ADDRESS (8 CHAR)    */
*      2 * CHAR(2),                 /* ALWAYS 00 -- NOT USED         */
*      2 DCNVT2A CHAR(6),           /* CONVERTED ADDRESS (6-CHAR)    */
*      2 * CHAR(1);                 /* EXTRA BYTE FOR UNPACK         */
*   RFY                                                         02S1093
*    (R0F,                                                      02S1093
*     R1P) RSTD;                    /* INPUT VALUES                  */
*   DCNVT1A=R0F;                    /* SAVE ADDRESS TO CONVERT       */
         ST    R0F,DCNVT1A                                      02S1094
*   UNPK(DCNVT2,DCNVT1);            /* MAKE 1->2 BYTES               */
         UNPK  DCNVT2(9),DCNVT1(5)                              02S1095
*   TR(DCNVT2A,CPRHEX);             /* MAKE PRINTABLE HEX            */
         TR    DCNVT2A(6),CPRHEX                                02S1096
*   R1P->I256C(1:LENGTH(DCNVT2A))=DCNVT2A;/* MOVE TO OUTPUT LINE     */
         MVC   I256C(6,R1P),DCNVT2A                             02S1097
*   RFY                                                         02S1098
*    (R0F,                                                      02S1098
*     R1P) UNRSTD;                  /* FINISHED WITH INPUT PARMS     */
*   RETURN;                         /* RETURN TO CALLER              */
@EL00018 DS    0H                                               02S1099
@EF00018 DS    0H                                               02S1099
@ER00018 LM    @14,@12,12(@13)                                  02S1099
         BR    @14                                              02S1099
*   END CNVTADR;                    /* END OF INTERNAL SUBROUTINE    */
         EJECT
*SKIP:                              /* SKIP 'SKIPNO' LINES           */
*   PROC(SKIPNO);                   /* NOTE: NO CARRIAGE CNTRL       */
*                                                               02S1101
SKIP     STM   @14,@12,@SA00019                                 02S1101
         MVC   @PC00019(4),0(@01)                               02S1101
*   /*****************************************************************/
*   /*                                                               */
*   /* SKIP 'SKIPNO' LINES BY PRINTING BLANK LINES. CARRIAGE CONTROL */
*   /* CHARACTERS CANNOT BE USED FOR THIS PURPOSE.                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S1102
*   DCL                                                         02S1102
*     SKIPNO FIXED(31);             /* INPUT PARAMETER               */
*   RFY                                                         02S1103
*     RSKIPCT RSTD;                 /* LOOP COUNTER                  */
*   RSKIPCT=SKIPNO;                 /* NUMBER OF LINES TO SKIP       */
         L     @15,@PC00019                                     02S1104
         L     RSKIPCT,SKIPNO(,@15)                             02S1104
*   DO RSKIPCT=RSKIPCT TO 1 BY-1;   /* PRINT 'SKIPNO' LINES          */
         B     @DE01105                                         02S1105
@DL01105 DS    0H                                               02S1106
*     RFY                                                       02S1106
*       R1P RSTD;                   /* INTERFACE REGISTER            */
*     R1P=ADDR(ABDPL);              /* POINT TO PARAMETER LIST       */
         L     R1P,DABDPLPT                                     02S1107
*     IF DPRDMP=BOFF THEN           /* IF SNAP,                      */
         TM    DPRDMP,B'10000000'                               02S1108
         BNZ   @RF01108                                         02S1108
*       GEN(MODESET EXTKEY=ZERO)                                02S1109
*       NOREFS NOSETS;              /* SWITCH TO SNAP KEY (0).       */
         MODESET EXTKEY=ZERO
*     R1P->ADPLBUF->I256C(1:LENGTH(CLINEX))=CLINEX;/* BLANK LINE     */
@RF01108 L     @02,ADPLBUF(,R1P)                                02S1110
         MVC   I256C(120,@02),CLINEX                            02S1110
*     CALL R1P->ADPLPRNT->PRINTRTN; /* PRINT A BLANK LINE            */
         L     @15,ADPLPRNT(,R1P)                               02S1111
         BALR  @14,@15                                          02S1111
*     IF DPRDMP=BOFF THEN           /* IF SNAP,                      */
         TM    DPRDMP,B'10000000'                               02S1112
         BNZ   @RF01112                                         02S1112
*       GEN(MODESET EXTKEY=SCHED)                               02S1113
*       NOREFS NOSETS;              /* SWITCH TO STANDARD KEY (1).   */
         MODESET EXTKEY=SCHED
*     RFY                                                       02S1114
*       R1P UNRSTD;                 /* DONE WITH REGISTER            */
@RF01112 DS    0H                                               02S1115
*   END;                            /* CONTINUE LOOP                 */
         BCTR  RSKIPCT,0                                        02S1115
@DE01105 LTR   RSKIPCT,RSKIPCT                                  02S1115
         BP    @DL01105                                         02S1115
*   RFY                                                         02S1116
*     RSKIPCT UNRSTD;               /* FINISHED WITH COUNTER         */
*   RETURN;                         /* RETURN TO CALLER              */
@EL00019 DS    0H                                               02S1117
@EF00019 DS    0H                                               02S1117
@ER00019 LM    @14,@12,@SA00019                                 02S1117
         BR    @14                                              02S1117
*   END SKIP;                       /* END OF INTERNAL SUBROUTINE    */
         EJECT
*PRINT:                             /* PRINT THE LINE                */
*   PROC;                           /* 'DLINEX'                      */
*                                                               02S1119
PRINT    STM   @14,@12,@SA00020                                 02S1119
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE THE PRINT LINE 'DLINEX' TO THE ACTUAL PRINT BUFFER AND   */
*   /* THEN CALL THE SNAP/PRDMP PRINT ROUTINE. ON RETURN, CLEAR THE  */
*   /* BUFFER.                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S1120
*   IF DPRDMP=BOFF THEN             /* IF EXECUTING FOR SNAP,        */
         TM    DPRDMP,B'10000000'                               02S1120
         BNZ   @RF01120                                         02S1120
*     GEN(MODESET EXTKEY=ZERO)                                  02S1121
*     NOREFS NOSETS;                /* SWITCH TO BUFFER KEY (0).     */
         MODESET EXTKEY=ZERO
*   RFY                                                         02S1122
*     R1P RSTD;                     /* INTERFACE REGISTER            */
@RF01120 DS    0H                                               02S1123
*   R1P=ADDR(ABDPL);                /* POINT TO SNAP/PRDMP PARM LIST */
         L     R1P,DABDPLPT                                     02S1123
*   R1P->ADPLBUF->I256C(1:LENGTH(DLINEX))=DLINEX;/* MOVE DATA TO
*                                      SNAP/PRDMP OUTPUT BUFFER.     */
         L     @15,ADPLBUF(,R1P)                                02S1124
         MVC   I256C(120,@15),DLINEX                            02S1124
*   CALL R1P->ADPLPRNT->PRINTRTN;   /* PRINT IT                      */
         L     @15,ADPLPRNT(,R1P)                               02S1125
         BALR  @14,@15                                          02S1125
*   RFY                                                         02S1126
*     R1P UNRSTD;                   /* DONE WITH INTERFACE REGISTER  */
*   IF DPRDMP=BOFF THEN             /* IF EXECUTING FOR SNAP,        */
         TM    DPRDMP,B'10000000'                               02S1127
         BNZ   @RF01127                                         02S1127
*     GEN(MODESET EXTKEY=SCHED)                                 02S1128
*     NOREFS NOSETS;                /* RESUME STANDARD KEY           */
         MODESET EXTKEY=SCHED
*   DLINEX=CLINEX;                  /* CLEAR INTERNAL BUFFER         */
@RF01127 MVC   DLINEX(120),CLINEX                               02S1129
*   RETURN;                         /* RETURN TO CALLER              */
@EL00020 DS    0H                                               02S1130
@EF00020 DS    0H                                               02S1130
@ER00020 LM    @14,@12,@SA00020                                 02S1130
         BR    @14                                              02S1130
*   END PRINT;                      /* END OF INTERNAL SUBROUTINE    */
         EJECT
*SNAPXLT:                           /* SNAP MEMORY ACCESS            */
*                                                               02S1132
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS IS A DUMMY ROUTINE TO CONVERT THE ADDRESS IN 'RMEMORY' TO*/
*   /* A CURRENT VIRTUAL ADDRESS. THIS PROVIDES COMPATIBILITY WITH   */
*   /* ROUTINE 'PRDMPXLT' WHICH INTERFACES WITH THE PRDMP MEMORY     */
*   /* ACCESS ROUTINE. SNAPXLT REFERENCES THE INPUT STORAGE TO INSURE*/
*   /* IT IS VALID. THEN CONTROL RETURNS TO THE CALLER WITH THE      */
*   /* REGISTERS UNCHANGED (OUTPUT ADDRESS = INPUT ADDRESS).         */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S1132
*   PROC OPTIONS(NOSAVE,            /* DO NOT SAVE INPUT REGS        */
*       NOSAVEAREA);                /* NO SAVEAREA NEEDED            */
SNAPXLT  DS    0H                                               02S1133
*   DREFBLK=BON;                    /* SHOW REFERENCING CONTROL BLOCK*/
         OI    DREFBLK,B'00010000'                              02S1133
*   GEN(CLI   0(RMEMORY),*-*)                                   02S1134
*   REFS(RMEMORY) NOSETS;           /* INSURE VALID STORAGE.         */
         CLI   0(RMEMORY),*-*
*   DREFBLK=BOFF;                   /* STORAGE OK IF HERE.           */
         NI    DREFBLK,B'11101111'                              02S1135
*   RMEMORY=RMEMORY;                /* OUTPUT=INPUT                  */
*   RETURN;                         /* RETURN TO CALLER              */
@EL00021 DS    0H                                               02S1137
@EF00021 DS    0H                                               02S1137
@ER00021 BR    @14                                              02S1137
*   END SNAPXLT;                    /* SNAP ADDRESS CONVERTED        */
*PRDMPXLT:                          /* PRDMP MEMORY ACCESS           */
*   PROC OPTIONS(NOSAVE(RMEMORY));  /* RMEMORY IS OUTPUT             */
*                                                               02S1139
PRDMPXLT STM   @14,@08,@SA00022                                 02S1139
         STM   @10,@12,@SA00022+44                              02S1139
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE INTERFACES WITH THE PRDMP MEMORY ACCESS ROUTINE  */
*   /* TO CONVERT INPUT ADDRESSES (IN 'RMEMORY') TO CURRENT PRDMP    */
*   /* BUFFER ADDRESS. IF THE TRANSLATION FAILS (NON-ZERO RETURN CODE*/
*   /* FROM MEMORY ACCESS) SIMULATE AN ESTAE RETRY BY LOADING        */
*   /* 'APESREGS' AND GOING TO THE REGISTER-15 ADDRESS. IF RECURSION */
*   /* WOULD OCCUR, ABEND. ON NORMAL EXIT, 'RMEMORY' CONTAINS THE    */
*   /* PRDMP BUFFER ADDRESS.                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S1140
*   IF(RMEMORY&CPDBUFRN)=DXLATVIR THEN/* IF SAME BUFFER AS LAST      */
         LR    @15,RMEMORY                                      02S1140
         N     @15,@CF05081                                     02S1140
         C     @15,DXLATVIR                                     02S1140
         BNE   @RF01140                                         02S1140
*     RMEMORY=(RMEMORY&CPDBUFDF)+DXLATBUF;/* ADJUST POINTER          */
         LR    @15,RMEMORY                                      02S1141
         N     @15,@CF05079                                     02S1141
         AL    @15,DXLATBUF                                     02S1141
         LR    RMEMORY,@15                                      02S1141
*   ELSE                            /* OTHERWISE CALL PRDMP          */
*     DO;                           /* MEMORY ACCESS ROUTINE.        */
         B     @RC01140                                         02S1142
@RF01140 DS    0H                                               02S1143
*       RFY                                                     02S1143
*        (R0P,                                                  02S1143
*         R1P) RSTD;                /* MEMORY ACCESS INPUT           */
*       R0P=RMEMORY&CPDBUFRN;       /* R0P = ADDRESS TO TRANSLATE    */
         LR    R0P,RMEMORY                                      02S1144
         N     R0P,@CF05081                                     02S1144
*       DXLATVIR=R0P;               /* SAVE FOR NEXT SUBROUTINE CALL */
         ST    R0P,DXLATVIR                                     02S1145
*       R1P=ADDR(ABDPL);            /* PRDMP PARM LIST               */
         L     R1P,DABDPLPT                                     02S1146
*       CALL R1P->ADPLMEMA->XLTERTN;/* CALL MEMORY ACCESS            */
         L     @15,ADPLMEMA(,R1P)                               02S1147
         BALR  @14,@15                                          02S1147
*       RFY                                                     02S1148
*        (R15F) RSTD;               /* RETURN CODE                   */
*       RFY                                                     02S1149
*         R1P UNRSTD;               /* DONE WITH CALL INTERFACE      */
*       IF R15F=0 THEN              /* IF TRANSLATION WORKED         */
         LTR   R15F,R15F                                        02S1150
         BNZ   @RF01150                                         02S1150
*         DO;                       /* (BUFFER PRIMED), THEN         */
*           DXLATBUF=R0P;           /* SAVE FOR NEXT CALL.           */
         ST    R0P,DXLATBUF                                     02S1152
*           RMEMORY=(RMEMORY&CPDBUFDF)+R0P;/* BUFFER OFFSET          */
         LR    @14,RMEMORY                                      02S1153
         N     @14,@CF05079                                     02S1153
         ALR   @14,R0P                                          02S1153
         LR    RMEMORY,@14                                      02S1153
*         END;                      /* 'REMORY SET                   */
*       ELSE                        /* IF UNABLE TO TRANSLATE,       */
*         DO;                       /* SIMULATE ESTAE EXIT (IGTUKA)  */
         B     @RC01150                                         02S1155
@RF01150 DS    0H                                               02S1156
*           DREFBLK=BON;            /* SHOW ERROR DETECTED           */
         OI    DREFBLK,B'00010000'                              02S1156
*           DXLATVIR='FFFFFFFF'X;   /* FORCE NEXT CALL THRU PRDMP    */
         MVC   DXLATVIR(4),@CF05118                             02S1157
*           IF APESFPRV=BOFF THEN   /* IF THIS IS NOT RECURSION,     */
         TM    APESFPRV,B'01000000'                             02S1158
         BNZ   @RF01158                                         02S1158
*             DO;                   /* THEN GO TO RETRY RTN.         */
*               APESFPRV=BON;       /* SET RECURSION FLAG            */
         OI    APESFPRV,B'01000000'                             02S1160
*               LM(R0F,R15F,APESREGS);/* RELOAD SAVED REGS           */
         L     @14,APESREGP                                     02S1161
         LM    R0F,R15F,APESREGS(@14)                           02S1161
*               GEN(BR    R15P)                                 02S1162
*               NOSETS REFS(R15P) NOSEQFLOW EXIT;/* GOTO RETRY       */
         BR    R15P
*             END;                  /* NON-RECURSION PROCESSED       */
*           ELSE                    /* RECURSION PROCESSING --       */
*             DO;                   /* FORCE ABEND TO LOG ERROR &
*                                      PASS CONTROL TO THE (E)STAE OR
*                                      FRR EXIT ROUTINE.             */
@RF01158 DS    0H                                               02S1165
*               DO;                 /* ABEND(DABNDCDE)               */
*                 RESPECIFY                                     02S1166
*                  (GPR01F) RESTRICTED;                         02S1166
*                 GPR01F=DABNDCDE;  /* COMP CODE IN REG 1            */
         L     GPR01F,DABNDCDE                                  02S1167
*                 SVC(13);          /* ISSUE ABEND SVC               */
         SVC   13                                               02S1168
*                 RESPECIFY                                     02S1169
*                  (GPR01F) UNRESTRICTED;                       02S1169
*               END;                /* ABEND(DABNDCDE) FORCE ABEND   */
*               GEN NOREFS NOSETS NOSEQFLOW FLOWS(APCVZUKA);    02S1171
*                                                  /* NO CODE
*             END;                  /* ABEND ISSUED                  */
*         END;                      /* ERROR PROCESSED               */
*       RFY                                                     02S1174
*        (R0P,                                                  02S1174
*         R15F) UNRSTD;             /* DONE WITH MEMORY REGS.        */
@RC01150 DS    0H                                               02S1175
*     END;                          /* RMEMORY -> DATA               */
*   RETURN;                         /* RETURN TO CALLER              */
@EL00022 DS    0H                                               02S1176
@EF00022 DS    0H                                               02S1176
@ER00022 LM    @14,@08,@SA00022                                 02S1176
         LM    @10,@12,@SA00022+44                              02S1176
         BR    @14                                              02S1176
*   END PRDMPXLT;                   /* PRDMP MEMORY ACCESS COMPLETE  */
         B     @EL00022                                         02S1177
         EJECT
*                                   /* IGTXEPLG                      */
*                                                               01S1178
*   /*****************************************************************/
*   /*                                                               */
*   /* SYSTEM DECLARES                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S1178
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR01F FIXED(31) REG(1),                                  01S1178
*     GPR01P PTR(31) REG(1);                                    01S1178
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                    01S1179
*     I031F FIXED(31) BASED,                                    01S1179
*     I031P PTR(31) BASED,                                      01S1179
*     I015F FIXED(15) BASED,                                    01S1179
*     I015P PTR(15) BASED,                                      01S1179
*     I008P PTR(8) BASED,                                       01S1179
*     I001C CHAR(1) BASED;                                      01S1179
*                                                               01S1180
*   /*****************************************************************/
*   /*                                                               */
*   /* MODULE PATCH AREA                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S1180
*   DCL                                                         01S1180
*     APPATCH CHAR(*) INT STATIC LOCAL GEND;                    01S1180
*   GENERATE DATA DEFS(APPATCH);                                01S1181
*                                                               01S1182
*   /*****************************************************************/
*   /*                                                               */
*   /* GENERAL REGISTER DECLARES                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S1182
*   DCL                                                         01S1182
*     R0F FIXED(31) REG(0),                                     01S1182
*     R0P PTR(24) REG(0),                                       01S1182
*     R0RSTD PTR(31) REG(0),                                    01S1182
*     R1F FIXED(31) REG(1),                                     01S1182
*     R1P PTR(24) REG(1),                                       01S1182
*     R1RSTD PTR(31) REG(1),                                    01S1182
*     R2F FIXED(31) REG(2),                                     01S1182
*     R2P PTR(24) REG(2),                                       01S1182
*     R2RSTD PTR(31) REG(2),                                    01S1182
*     R3F FIXED(31) REG(3),                                     01S1182
*     R3P PTR(24) REG(3),                                       01S1182
*     R3RSTD PTR(31) REG(3),                                    01S1182
*     R4F FIXED(31) REG(4),                                     01S1182
*     R4P PTR(24) REG(4),                                       01S1182
*     R4RSTD PTR(31) REG(4),                                    01S1182
*     R5F FIXED(31) REG(5),                                     01S1182
*     R5P PTR(24) REG(5),                                       01S1182
*     R5RSTD PTR(31) REG(5),                                    01S1182
*     R6F FIXED(31) REG(6),                                     01S1182
*     R6P PTR(24) REG(6),                                       01S1182
*     R6RSTD PTR(31) REG(6),                                    01S1182
*     R7F FIXED(31) REG(7),                                     01S1182
*     R7P PTR(24) REG(7),                                       01S1182
*     R7RSTD PTR(31) REG(7),                                    01S1182
*     R8F FIXED(31) REG(8),                                     01S1182
*     R8P PTR(24) REG(8),                                       01S1182
*     R8RSTD PTR(31) REG(8),                                    01S1182
*     R9F FIXED(31) REG(9),                                     01S1182
*     R9P PTR(24) REG(9),                                       01S1182
*     R9RSTD PTR(31) REG(9),                                    01S1182
*     R10F FIXED(31) REG(10),                                   01S1182
*     R10P PTR(24) REG(10),                                     01S1182
*     R10RSTD PTR(31) REG(10),                                  01S1182
*     R11F FIXED(31) REG(11),                                   01S1182
*     R11P PTR(24) REG(11),                                     01S1182
*     R11RSTD PTR(31) REG(11),                                  01S1182
*     R12F FIXED(31) REG(12),                                   01S1182
*     R12P PTR(24) REG(12),                                     01S1182
*     R12RSTD PTR(31) REG(12),                                  01S1182
*     R13F FIXED(31) REG(13),                                   01S1182
*     R13P PTR(24) REG(13),                                     01S1182
*     R13RSTD PTR(31) REG(13),                                  01S1182
*     R14F FIXED(31) REG(14),                                   01S1182
*     R14P PTR(24) REG(14),                                     01S1182
*     R14RSTD PTR(31) REG(14),                                  01S1182
*     R15F FIXED(31) REG(15),                                   01S1182
*     R15P PTR(24) REG(15),                                     01S1182
*     R15RSTD PTR(31) REG(15),                                  01S1182
*                                                               01S1182
*     /***************************************************************/
*     /*                                                             */
*     /* VPSS CONTROL BLOCK POINTER DECLARES                         */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S1182
*     APSMPTR PTR(24) REG(01),      /* STORAGE MANAGEMENT BLOCK 01S1182
*                                      (SUGGESTED POINTER)           */
*     APSCPTR PTR(24) REG(01),      /* STORAGE MANAGEMENT CONTROL
*                                      WORD (SUGGESTED POINTER)      */
*     APINPTR PTR(24) REG(01),      /* USER'S INPUT PARAMETER LIST
*                                      (SUGGESTED POINTER)           */
*/*                                                                  */
*                                                               01S1182
*     APDATA PTR(24) REG(06),       /* ADDRESS OF DYNAMIC DATA  01S1182
*                                      WORKAREA (DATAREG)            */
*     APCODE PTR(24) REG(07),       /* PROGRAM CODE BASE REGISTER
*                                      (CODEREG)                     */
*     APDEBPTR PTR(24) REG(08),     /* VPSS DEB (SUGGESTED POINTER)  */
*     APNPPTR PTR(24) REG(08),      /* SUBSYSTEM INITIALIZATION 01S1182
*                                      WORKAREA BLOCK (ONLY USED BY
*                                      SUBSYSTEM INITIALIZATION)     */
*     APRLPTR PTR(24) REG(08),      /* VPSS ACB REQUEST LIST    01S1182
*                                      (SUGGESTED POINTER)           */
*     APCIPTR PTR(24) REG(08),      /* 3838 CONTROL TABLE (SUGGESTED
*                                      POINTER)                      */
*     APCWPTR PTR(24) REG(08),      /* CALL INTERFACE WORKAREA  01S1182
*                                      (SUGGESTED POINTER)           */
*     APERPTR PTR(24) REG(08),      /* ERP/IO APPENDAGE WORKAREA
*                                      (SUGGESTED POINTER)           */
*     APACBPTR PTR(24) REG(09),     /* VPSS ACB (SUGGESTED POINTER)  */
*     APCQPTR PTR(24) REG(09),      /* COMMAND QUEUE ELEMENT    01S1182
*                                      (SUGGESTED POINTER)           */
*     APOTPTR PTR(24) REG(09),      /* OPTION TABLE (SUGGESTED  01S1182
*                                      POINTER)                      */
*     APIOPTR PTR(24) REG(10),      /* I/O ELEMENT (SUGGESTED   01S1182
*                                      POINTER)                      */
*     APEXLPTR PTR(24) REG(10),     /* VPSS EXLST (SUGGESTED POINTER)*/
*     APUBPTR PTR(24) REG(10),      /* UNIT BLOCK (SUGGESTED POINTER)*/
*     APAXPTR PTR(24) REG(10),      /* VPSS ACB EXTENSION (SUGGESTED
*                                      POINTER)                      */
*     APCPPTR PTR(24) REG(10),      /* VPSS CALL PROCESSING     01S1182
*                                      INDICATORS (SUGGESTED POINTER)*/
*     APOCPTR PTR(24) REG(10),      /* VPSS OPEN/CLOSE SUBSYSTEM
*                                      WORKAREA (REQUIRED POINTER)   */
*     APATPTR PTR(24) REG(11),      /* VPSS ACB TABLE (SUGGESTED
*                                      POINTER)                      */
*     APLBPTR PTR(24) REG(11),      /* LABEL RESOLUTION TABLE   01S1182
*                                      (SUGGESTED POINTER)           */
*     APUTPTR PTR(24) REG(11),      /* USER TABLE (SUGGESTED POINTER)*/
*     APDSPTR PTR(24) REG(11),      /* VPSS DATASET ENTRY (SUGGESTED
*                                      POINTER)                      */
*     APXLPTR PTR(24) REG(11),      /* TRANSLATION TABLE (SUGGESTED
*                                      POINTER)                      */
*     APDXPTR PTR(24) REG(11),      /* VPSS DEB EXTENSION (SUGGESTED
*                                      POINTER)                      */
*     APCTPTR PTR(24) REG(12) RSTD, /* CONTROL TABLE (REQUIRED  01S1182
*                                      POINTER)                      */
*     APSVPTR PTR(24) REG(13) RSTD, /* OS/VPSS SAVEAREA/WORKAREA
*                                      (REQUIRED POINTER)            */
*     APRETURN PTR(24) REG(14),     /* RETURN ADDRESS FOR SUBROUTINE
*                                      LINKAGE                       */
*     APENTRY PTR(24) REG(15),      /* SUBROUTINE ENTRY POINT LINKAGE*/
*     APRCODE PTR(24) REG(15);      /* CONTAINS SUBROUTINE RETURN
*                                      CODE                          */
*                                                               01S1183
*   /*****************************************************************/
*   /*                                                               */
*   /* USER REGISTER DECLARES                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S1183
*   DCL                             /* LOCAL REGISTERS               */
*     RSSNAME FIXED(31) REG(03),    /* HOLDS SSNAME TEMPORARILY      */
*     RABDPLPT PTR(31) REG(04),     /* HOLDS ABDPL ADDRESS      01S1183
*                                      TEMPORARILY                   */
*     RIGTUKA PTR(31) REG(03),      /* ESTAE EXIT ADDRESS FOR ESTAE  */
*     RDSABPTR PTR(31) REG(03),     /* DSAB SCANNER                  */
*     RSKIPCT PTR(31) REG(03),      /* PRINTING BLANK LINES          */
*     APCODE1 PTR(31) REG(08) RSTD, /* 2ND BASE REGISTER             */
*     RMEMORY PTR(31) REG(09) RSTD; /* MEMORY TRANSLATOR REGISTERS   */
*   END IGTLCB                      /* END OF CONTROL BLOCK FORMATTER*/
*                                                               01S1184
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHAASVT )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHAASXB )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*/*%INCLUDE SYSLIB  (IEZJSCB )                                       */
*/*%INCLUDE SYSLIB  (IHAQDB  )                                       */
*/*%INCLUDE SYSLIB  (IHADSAB )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IEFJSCVT)                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IHAABDPL)                                       */
*/*%INCLUDE SYSLIB  (IECDIOSB)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCC)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCI)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCM)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCT)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCV)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPDS)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPDX)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPIO)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPSC)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPSV)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPUB)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPVU)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPES)                                       */
*/*%INCLUDE SYSUT5  (BSAWA   )                                       */
*/*%INCLUDE SYSUT5  (INITSTAE)                                       */
*/*%INCLUDE SYSUT5  (INITMEM )                                       */
*/*%INCLUDE SYSUT5  (CHKUSER )                                       */
*/*%INCLUDE SYSUT5  (PRNTHDR )                                       */
*/*%INCLUDE SYSUT5  (MONDUMP )                                       */
*/*%INCLUDE SYSUT5  (USERDUMP)                                       */
*/*%INCLUDE SYSUT5  (CLRREGS )                                       */
*/*%INCLUDE SYSUT5  (CLRREGS )                                       */
*/*%INCLUDE SYSUT5  (CLRREGS )                                       */
*/*%INCLUDE SYSUT5  (CLRREGS )                                       */
*/*%INCLUDE SYSUT5  (CLRSTAE )                                       */
*/*%INCLUDE SYSUT5  (CLRSTAE )                                       */
*/*%INCLUDE SYSUT5  (CLRSTAE )                                       */
*/*%INCLUDE SYSUT5  (ERRDUMP )                                       */
*/*%INCLUDE SYSUT5  (EXIT    )                                       */
*/*%INCLUDE SYSUT5  (SUBRTNS )                                       */
*/*%INCLUDE SYSUT5  (DMPAPCT )                                       */
*/*%INCLUDE SYSUT5  (DMPAPVU )                                       */
*/*%INCLUDE SYSUT5  (DMPAPUB )                                       */
*/*%INCLUDE SYSUT5  (DMPUCB  )                                       */
*/*%INCLUDE SYSUT5  (DMPAPDS )                                       */
*/*%INCLUDE SYSUT5  (DMPAPDX )                                       */
*/*%INCLUDE SYSUT5  (DMPAPIO )                                       */
*/*%INCLUDE SYSUT5  (DMPAPCI )                                       */
*/*%INCLUDE SYSUT5  (DMPIOFD )                                       */
*/*%INCLUDE SYSUT5  (ENQDEQ  )                                       */
*/*%INCLUDE SYSUT5  (FORMAT  )                                       */
*/*%INCLUDE SYSUT5  (CNVTADR )                                       */
*/*%INCLUDE SYSUT5  (SKIP    )                                       */
*/*%INCLUDE SYSUT5  (PRINT   )                                       */
*/*%INCLUDE SYSUT5  (MEMORY  )                                       */
*/*%INCLUDE SYSUT5  (DOSTAE  )                                       */
*                                                               01S1184
*       ;                                                       01S1184
@EL00001 DS    0H                                               01S1184
@EF00001 DS    0H                                               01S1184
@ER00001 LM    @14,@12,12(@13)                                  01S1184
         BR    @14                                              01S1184
@DATA    DS    0H
@SM05352 MVC   DT1LINE3(0),I256C(RMEMORY)
@SM05354 MVC   0(0,@05),I256C(RMEMORY)
@SM05356 MVC   DT1LINE3(0),I256C(DADDR0)
@SM05358 MVC   0(0,@01),CBLANK
@SM05360 MVC   0(0,@05),CBLANK
         DS    0F
@AL00348 DC    A(@CF00073)             LIST WITH   1 ARGUMENT(S)
@AL00352 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00643 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00944 DC    A(@CF00109)             LIST WITH   1 ARGUMENT(S)
@AL00657 DC    A(@CF00045)             LIST WITH   1 ARGUMENT(S)
@AL00955 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01085 DC    A(@CF00068)             LIST WITH   1 ARGUMENT(S)
@DATD    DSECT
         DS    0F
@SA00022 DS    14F
@SA00019 DS    15F
@PC00019 DS    1F
@SA00020 DS    15F
@SA00002 DS    15F
@SA00003 DS    15F
@SA00004 DS    15F
@SA00011 DS    15F
@SA00006 DS    15F
@SA00012 DS    15F
@SA00008 DS    15F
@SA00014 DS    15F
@SA00015 DS    15F
@SA00007 DS    15F
@SA00009 DS    15F
@SA00010 DS    15F
@SA00017 DS    15F
@SA00005 DS    15F
IGTLCB   CSECT
         DS    0F
@CF00068 DC    F'1'
@CF00109 DC    F'2'
@CF00073 DC    F'3'
@CF00045 DC    F'4'
@CF00037 DC    F'8'
@CF03201 DC    F'12'
@CF00126 DC    F'32'
@CF00215 DC    F'64'
@CF03824 DC    F'65'
@CF05085 DC    F'8192'
@CF05331 DC    F'-436203520'
@CF05079 DC    XL4'000007FF'
@CF05081 DC    XL4'00FFF800'
@CF05102 DC    XL4'0000FFF8'
@CF05106 DC    XL4'80000FFF'
@CF05118 DC    XL4'FFFFFFFF'
@CF05120 DC    XL4'00FFFFFF'
@CF05231 DC    XL4'7FFFFFFF'
@DATD    DSECT
         DS    0D
DABDPLPT DS    A
DDSABPTR DS    A
DAPUBPTR DS    A
DUCBPTR  DS    A
DAPUBMST DS    A
DBLKADDR DS    A
DXLATBUF DS    A
DXLATVIR DS    A
DXLATOR  DS    A
DTCBPTR  DS    A
DQDBPTR  DS    A
DDSABPT1 DS    A
DSIZE0   DS    F
DSIZE2   DS    F
DSIZE4   DS    F
DSIZE5   DS    F
DSIZE6   DS    F
DABNDCDE DS    F
DDSABCT1 DS    H
DDSABCT2 DS    H
DAPIOCT1 DS    H
DXBLKID  DS    FL1
DXBLKNM  DS    FL1
DPROTKEY DS    FL1
         DS    CL1
DTIOTEQ  DS    CL6
         ORG   DTIOTEQ
DTIOTEQA DS    FL2
DTIOTEQJ DS    AL4
         ORG   DTIOTEQ+6
APES     DS    CL648
         ORG   APES
APESID   DS    CL4
APESUSER DS    FL4
APESADDR DS    AL4
APESAPMV DS    AL4
APESFLGS DS    BL2
         ORG   APESFLGS
APESFLG0 DS    BL1
         ORG   APESFLG0
APESFDMP DS    BL1
APESFREC EQU   APESFLG0+0
APESFSDP EQU   APESFLG0+0
@NM00226 EQU   APESFLG0+0
APESFRTY EQU   APESFLG0+0
APESFEXR EQU   APESFLG0+0
@NM00227 EQU   APESFLG0+0
         ORG   APESFLGS+1
APESFLG1 DS    BL1
         ORG   APESFLG1
APESFFRR DS    BL1
APESFPRV EQU   APESFLG1+0
APESFLLK EQU   APESFLG1+0
APESFXLK EQU   APESFLG1+0
APESFGM  EQU   APESFLG1+0
APESFSDI EQU   APESFLG1+0
APESFSTE EQU   APESFLG1+0
@NM00228 EQU   APESFLG1+0
         ORG   APES+18
APESSUID DS    BL1
         ORG   APESSUID
APESSU33 DS    BL1
@NM00229 EQU   APESSUID+0
         ORG   APES+19
APESCODE DS    FL1
APESCOD1 DS    FL1
APESCNTR DS    FL1
APESMXCD DS    FL1
@NM00230 DS    FL1
@NM00231 DS    AL4
@NM00232 DS    AL4
@NM00233 DS    AL4
APESEXRA DS    AL4
APESR14S DS    AL4
APESREGP DS    AL4
APESREGZ DS    CL64
APESMOD  DS    CL8
APESPROC DS    CL8
APESFRR  DS    CL8
APESSDWA DS    CL512
         ORG   APES+648
DLINEX   DS    CL120
DBLKINFO DS    CL8
DSSNAME  DS    CL4
DFMTSW   DS    BL1
         ORG   DFMTSW
DPROTSW  DS    BL1
DPGMCHK  EQU   DFMTSW+0
DNONAME  EQU   DFMTSW+0
DINFOL2  EQU   DFMTSW+0
@NM00290 EQU   DFMTSW+0
         ORG   DFMTSW+1
DSW      DS    BL1
         ORG   DSW
DPRDMP   DS    BL1
DMONITOR EQU   DSW+0
DENQAPUB EQU   DSW+0
DREFBLK  EQU   DSW+0
DENQTIOT EQU   DSW+0
@NM00291 EQU   DSW+0
         ORG   DSW+1
         DS    CL2
DVUAUSE  DS    BL4
         ORG   DVUAUSE
DVUSER   DS    BL1
DVUMON   EQU   DVUAUSE+0
         ORG   DVUAUSE+4
DPRTFLGS DS    BL4
         ORG   DPRTFLGS
DPRTAPCT DS    BL1
DPRTAPVU EQU   DPRTFLGS+0
DPRTAPUB EQU   DPRTFLGS+0
DPRTAPDS EQU   DPRTFLGS+0
DPRTAPIO EQU   DPRTFLGS+0
DPRTCCW  EQU   DPRTFLGS+0
DPRTAPCI EQU   DPRTFLGS+0
DPRTAPDX EQU   DPRTFLGS+0
DPRTUCB  DS    BL1
         ORG   DPRTFLGS+4
@NM00292 DS    CL33
         ORG   @NM00292
DT1LINE3 DS    CL32
@NM00293 DS    CL1
         ORG   @NM00292+33
@NM00294 DS    CL65
         ORG   @NM00294
DT2LINE3 DS    CL64
@NM00295 DS    CL1
         ORG   @NM00294+65
         DS    CL2
DCNVT1   DS    CL5
         ORG   DCNVT1
DCNVT1A  DS    FL4
@NM00296 DS    CL1
         ORG   DCNVT1+5
DCNVT2   DS    CL9
         ORG   DCNVT2
@NM00297 DS    CL2
DCNVT2A  DS    CL6
@NM00298 DS    CL1
         ORG   DCNVT2+9
         DS    CL2
DRETRY   DS    10A
IGTLCB   CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC04846 DC    C'        '
@CC05112 DC    C'IGTLCB  '
@CC04824 DC    C'APES'
CMBRXZZZ DS    CL8
         ORG   CMBRXZZZ
@NM00219 DS    CL8
         ORG   @NM00219
@NM00220 DC    H'36'
@NM00221 DC    H'0'
@NM00222 DC    AL1(0)
@NM00223 DC    AL1(8)
@NM00224 DC    H'210'
         ORG   CMBRXZZZ+8
CAPUBID  DC    CL4'APUB'
SYSZTIOT DC    CL8'SYSZTIOT'
CLINEX   DC    CL120' '
CLINE1   DS    CL19
         ORG   CLINE1
CLINE1A  DC    CL4'VPSS'
@NM00236 DC    CL15' CONTROL BLOCKS'
         ORG   CLINE1+19
CLINE2   DS    CL36
         ORG   CLINE2
CLINE2A  DC    CL8'        '
@NM00238 DC    CL1' '
CLINE2B  DC    CL8'        '
@NM00239 DC    CL13' AT LOCATION '
CLINE2C  DC    CL6'      '
         ORG   CLINE2+36
CLINE3   DS    CL120
         ORG   CLINE3
CLINE3A  DC    CL6'000000'
@NM00242 DC    CL3'   '
CLINE3B  DC    CL8'00000000'
@NM00243 DC    CL1' '
CLINE3C  DC    CL8'00000000'
@NM00244 DC    CL1' '
CLINE3D  DC    CL8'00000000'
@NM00245 DC    CL1' '
CLINE3E  DC    CL8'00000000'
@NM00246 DC    CL4'    '
CLINE3F  DC    CL8'00000000'
@NM00247 DC    CL1' '
CLINE3G  DC    CL8'00000000'
@NM00248 DC    CL1' '
CLINE3H  DC    CL8'00000000'
@NM00249 DC    CL1' '
CLINE3I  DC    CL8'00000000'
@NM00250 DC    CL3'   '
@NM00251 DC    CL1'*'
CLINE3J  DC    CL32' '
@NM00252 DC    CL1'*'
         ORG   CLINE3+120
CLINE4   DS    CL32
         ORG   CLINE4
CLINE4A  DC    CL32'ERROR FORMATTING CONTROL BLOCK '
         ORG   CLINE4+32
CLINE5   DS    CL44
         ORG   CLINE5
@NM00264 DC    CL17'UNABLE TO ACCESS '
CLINE5A  DC    CL8'        '
@NM00265 DC    CL13' AT LOCATION '
CLINE5B  DC    CL6'      '
         ORG   CLINE5+44
CLINE6   DS    CL27
         ORG   CLINE6
@NM00268 DC    CL27'IGTLCB INTERNAL LOGIC ERROR'
         ORG   CLINE6+27
ZBLKID   DS    CL160
         ORG   ZBLKID
@NM00270 DC    CL8'APCT'
@NM00271 DC    CL8'APVU'
@NM00272 DC    CL8'APDS'
@NM00273 DC    CL8'APUB'
@NM00274 DC    CL8'APIO'
@NM00275 DC    CL8'CHAN PGM'
@NM00276 DC    CL8'APCI'
@NM00277 DC    CL8'APDX'
@NM00278 DC    CL8'UCB'
@NM00279 DC    CL8'CVT '
@NM00280 DC    CL8'ASCB'
@NM00281 DC    CL8'ASXB'
@NM00282 DC    CL8'ASVT'
@NM00283 DC    CL8'TCB '
@NM00284 DC    CL8'JSCB'
@NM00285 DC    CL8'QDB '
@NM00286 DC    CL8'DSAB'
@NM00287 DC    CL8'TIOT'
@NM00288 DC    CL8'DEB '
@NM00289 DC    CL8'UCB EXTN'
         ORG   ZBLKID+160
@DATD    DSECT
*                                     /*
DXSTAE1  IGTYSTAE MF=L                 LIST FORMAT OF THE MACRO
DXSTAE   EQU   DXSTAE1,*-DXSTAE1,C'C'  MAKE DXSTAE START AT ESTAE      *
                                       MACRO & COVER ENTIRE EXPANSION
IGTLCB   CSECT
*                                      /*
CXSTAE1  IGTYSTAE ,                    EXIT ROUTINE                    *
               PURGE=NONE,             NO I/O PURGE                    *
               ASYNCH=NO,              NO ASYNCHRONOUS EXITS           *
               TERM=YES,               ALWAYS GAIN CONTROL             *
               MF=L                    LIST FORMAT OF THE MACRO
CXSTAE   EQU   CXSTAE1,*-CXSTAE1,C'C'  MAKE CXSTAE START AT ESTAE      *
                                       MACRO & COVER ENTIRE EXPANSION
@DATD    DSECT
*                                     /*
DXENQ1   ENQ   (*-*,*-*,S,4,SYSTEM),   SYSZSSSS/APUB - SHARED - GLOBAL *
               RET=HAVE,MF=L           GET ONLY IF NOT ALREADY OWNED
DXENQ    EQU   DXENQ1,*-DXENQ1,C'C'    MAKE DXENQ START AT ENQ/DEQ     *
                                       MACRO & COVER ENTIRE EXPANSION
IGTLCB   CSECT
*                                      /*
CXENQ1   ENQ   (*-*,                   MAJOR = APCTENQM -- SYSZSSSS    *
               CAPUBID,                MINOR = 'APUB'                  *
               S,                      SHARED ENQ                      *
               ,                       USE 'CAPUBID' LENGTH FOR MINOR  *
               SYSTEM),                GLOBAL SCOPE                    *
               RET=HAVE,               OBTAIN ONLY IF NOT ALREADY OWNED*
               MF=L                    LIST FORM OF MACRO
CXENQ    EQU   CXENQ1,*-CXENQ1,C'C'    MAKE CXENQ START AT ENQ         *
                                       MACRO & COVER ENTIRE EXPANSION
@DATD    DSECT
*                                     /*
DYENQ1   ENQ   (*-*,*-*,S,6,SYSTEM),   SYSZTIOT/ASID-JSCDSABQ - GLOBAL *
               RET=HAVE,MF=L           GET ONLY IF NOT ALREADY OWNED
DYENQ    EQU   DYENQ1,*-DYENQ1,C'C'    MAKE DYENQ START AT ENQ/DEQ     *
                                       MACRO & COVER ENTIRE EXPANSION
IGTLCB   CSECT
*                                           /*
CYENQ1   ENQ   (SYSZTIOT,              MAJOR = SYSZTIOT                *
               *-*,                    MINOR = ASID × JSCDSABQ         *
               S,                      SHARED ENQ                      *
               L'DTIOTEQ,              MINOR ENQ LENGTH (6)            *
               SYSTEM),                GLOBAL SCOPE                    *
               RET=HAVE,               OBTAIN ONLY IF NOT ALREADY OWNED*
               MF=L                    LIST FORM OF MACRO
CYENQ    EQU   CYENQ1,*-CYENQ1,C'C'    MAKE CYENQ START AT ENQ         *
                                       MACRO & COVER ENTIRE EXPANSION
IGTLCB   CSECT
*                                   /* TABLES */
CPRHEX   EQU   *-X'F0',256,C'C'     CONVERT 'F_'X TO 'C_'X OR 'F_'X
         DC    C'0123456789ABCDEF'  'FA'X -> 'A', 'F0'X -> '0' */
         SPACE 2
CPRCHAR  DC    256C'.'              SET UNPRINTABLES TO CHARACTER '.'
         ORG   CPRCHAR+C' '         LEAVE THE FOLLOWING UNCHANGED:
         DC    C' '                 *  BLANK
         ORG   CPRCHAR+C'A'         *  A-Z
         DC    C'ABCDEFGHI'         *  0-9
         ORG   CPRCHAR+C'J'         *
         DC    C'JKLMNOPQR'         *
         ORG   CPRCHAR+C'S'         *
         DC    C'STUVWXYZ'          *
         ORG   CPRCHAR+C'0'         *
         DC    C'0123456789'        *
         ORG   ,                    GOTO END OF TABLE
IGTLCB   CSECT
*                                   /* GENERATE PATCH
         IGTXZAP ,                 GENERATE PATCH AREA
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IGTLCB   CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
DASID    EQU   @02
DSIZE7   EQU   @02
DSIZE    EQU   @10
DCSABEG  EQU   @02
DNUCEND  EQU   @02
DADDR0   EQU   @11
DADDR    EQU   @04
DAPUBSUB EQU   @02
DAPDXPTR EQU   @05
DAPDSPTR EQU   @03
DAPIOPTR EQU   @02
APCODE   EQU   @07
APCODE1  EQU   @08
ASCBPTR  EQU   @00
TIOTPTR  EQU   @00
UCBPTR   EQU   @00
DSABPTR  EQU   @00
DEBPTR   EQU   @00
DEBDAPTR EQU   @00
DEBEXPTR EQU   @00
DEBSBPTR EQU   @00
SSCTPTR  EQU   @00
SDWAPTR  EQU   @00
ABDPLPTR EQU   @00
IOSBPTR  EQU   @00
APCTPTR  EQU   @12
APSVPTR  EQU   @13
R0F      EQU   @00
R1P      EQU   @01
RSSNAME  EQU   @03
RABDPLPT EQU   @04
APDATA   EQU   @06
R0P      EQU   @00
R1F      EQU   @01
R14P     EQU   @14
R15F     EQU   @15
R15P     EQU   @15
RIGTUKA  EQU   @03
RMEMORY  EQU   @09
RDSABPTR EQU   @03
R0RSTD   EQU   @00
R1RSTD   EQU   @01
R2RSTD   EQU   @02
R3RSTD   EQU   @03
R4RSTD   EQU   @04
R5RSTD   EQU   @05
R9RSTD   EQU   @09
R10RSTD  EQU   @10
R11RSTD  EQU   @11
R14RSTD  EQU   @14
R15RSTD  EQU   @15
GPR01P   EQU   @01
RSKIPCT  EQU   @03
GPR01F   EQU   @01
APACBPTR EQU   @09
APATPTR  EQU   @11
APAXPTR  EQU   @10
APCIPTR  EQU   @08
APCPPTR  EQU   @10
APCQPTR  EQU   @09
APCWPTR  EQU   @08
APDEBPTR EQU   @08
APDSPTR  EQU   @11
APDXPTR  EQU   @11
APENTRY  EQU   @15
APERPTR  EQU   @08
APEXLPTR EQU   @10
APINPTR  EQU   @01
APIOPTR  EQU   @10
APLBPTR  EQU   @11
APNPPTR  EQU   @08
APOCPTR  EQU   @10
APOTPTR  EQU   @09
APRCODE  EQU   @15
APRETURN EQU   @14
APRLPTR  EQU   @08
APSCPTR  EQU   @01
APSMPTR  EQU   @01
APUBPTR  EQU   @10
APUTPTR  EQU   @11
APXLPTR  EQU   @11
R10F     EQU   @10
R10P     EQU   @10
R11F     EQU   @11
R11P     EQU   @11
R12F     EQU   @12
R12P     EQU   @12
R12RSTD  EQU   @12
R13F     EQU   @13
R13P     EQU   @13
R13RSTD  EQU   @13
R14F     EQU   @14
R2F      EQU   @02
R2P      EQU   @02
R3F      EQU   @03
R3P      EQU   @03
R4F      EQU   @04
R4P      EQU   @04
R5F      EQU   @05
R5P      EQU   @05
R6F      EQU   @06
R6P      EQU   @06
R6RSTD   EQU   @06
R7F      EQU   @07
R7P      EQU   @07
R7RSTD   EQU   @07
R8F      EQU   @08
R8P      EQU   @08
R8RSTD   EQU   @08
R9F      EQU   @09
R9P      EQU   @09
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
CVTMAP   EQU   0
CVT      EQU   CVTMAP
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTNUCB  EQU   CVTMAP+128
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
ASVT     EQU   0
ASVTFRST EQU   ASVT+524
ASVTENTY EQU   ASVT+528
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBASXB EQU   ASCB+108
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
ASXB     EQU   0
ASXBLTCB EQU   ASXB+8
ASXBAEQ  EQU   ASXB+168
ASXBSECR EQU   ASXB+199
ASCBSFLG EQU   ASXBSECR
ASXBCASW EQU   ASXB+216
ASXBCRB1 EQU   ASXBCASW
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBLTC   EQU   TCB+136
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
TIOT1    EQU   0
TIOENTRY EQU   0
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOELINK EQU   TIOERLOC+1
TIOESYOT EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
POOLSTAR EQU   TIOENTRY+20
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBNAME  EQU   UCBOB+13
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBEXTP  EQU   UCBEXTPT+1
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00037 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBDCB  EQU   JSCBSEC1+36
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBEND1 EQU   IEZJSCB+260
QDB      EQU   0
QDBFELMP EQU   QDB+12
DSAB     EQU   0
DSABFCHN EQU   DSAB+4
DSABTIOT EQU   DSAB+16
DSABGIDP EQU   DSAB+24
DSABANMP EQU   DSAB+28
DSABORG  EQU   DSAB+32
DSABORG1 EQU   DSABORG
DSABORG2 EQU   DSABORG+1
DSABFLG1 EQU   DSAB+34
DSABFLG2 EQU   DSAB+35
DSABFLG3 EQU   DSAB+36
DSABFLG4 EQU   DSAB+37
DSABSSNM EQU   DSAB+48
DSABSSCM EQU   DSAB+52
DSABANMI EQU   0
DSABGIDL EQU   0
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBIRBB  EQU   DEBIRBAD+1
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBAPPAD EQU   DEBBASIC+28
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
SSCT     EQU   0
SSCTFLG1 EQU   SSCT+12
SDWA     EQU   0
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWAIOFS EQU   SDWA+238
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWAACF2 EQU   SDWAPARQ+1
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWASDA0 EQU   SDWASDAT
SDWASDA1 EQU   SDWASDAT+1
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
ABDPL    EQU   0
ADPLTCB  EQU   ABDPL
ADPLASID EQU   ABDPL+4
ADPLFLAG EQU   ABDPL+7
ADPLSNPR EQU   ADPLFLAG
ADPLBUF  EQU   ABDPL+8
ADPLPRNT EQU   ABDPL+12
ADPLCVT  EQU   ABDPL+16
ADPLMEMA EQU   ABDPL+20
IOSB     EQU   0
IOSFLA   EQU   IOSB
IOSACHN  EQU   IOSFLA
IOSFLB   EQU   IOSB+1
IOSFLC   EQU   IOSB+2
IOSDVALT EQU   IOSFLC
IOSPKEY  EQU   IOSB+12
IOSOPT   EQU   IOSB+14
IOSOPT2  EQU   IOSB+15
@NM00097 EQU   IOSB+20
IOSCSW   EQU   @NM00097+1
IOSTATUS EQU   IOSCSW+3
IOSIPIB  EQU   IOSB+44
IOSDIE   EQU   IOSB+68
IOSDIEFG EQU   IOSDIE
IOSPATH  EQU   IOSB+86
IOSCHN   EQU   IOSPATH
IOSCKEY  EQU   IOSB+89
IOSEEKA  EQU   IOSB+100
IOSCCHH  EQU   IOSEEKA+3
IOSSKHH  EQU   IOSCCHH+2
APCI     EQU   0
APCIHDR  EQU   APCI
APCIHFGS EQU   APCIHDR+2
APCIHFG0 EQU   APCIHFGS
APCIHFG1 EQU   APCIHFGS+1
APCT     EQU   0
APCTENQM EQU   APCT+12
APCTSMIN EQU   APCT+32
APCTSMAD EQU   APCT+36
APCTZ@@@ EQU   APCT+40
APCTU@@@ EQU   APCT+440
APCTBR14 EQU   APCT+840
APCTAPUB EQU   APCT+848
APCTAPDS EQU   APCT+860
APCTERRS EQU   APCT+876
@NM00142 EQU   APCT+936
APCTSTAT EQU   @NM00142
APCTPRSW EQU   @NM00142+1
APCTAPCQ EQU   APCT+944
APCTCQAQ EQU   APCT+952
APCTSIZE EQU   APCT+1046
APCTAPIO EQU   APCT+1064
APCTABND EQU   APCT+1072
APCTZ@@1 EQU   APCT+1120
APCTAPVU EQU   APCT+1520
APCTDMPM EQU   APCT+1532
APCTDMPU EQU   APCT+1536
APCVZUAC EQU   0
APCVZUAF EQU   0
APCVZUKA EQU   0
APDS     EQU   0
APDSAPDS EQU   APDS+4
APDSTD   EQU   APDS+16
APDSDEB  EQU   APDSTD+4
APDSAPUB EQU   APDS+48
APDSFLGS EQU   APDS+64
APDSFLG0 EQU   APDSFLGS
APDSOWN  EQU   APDSFLG0
APDSFLG1 EQU   APDSFLGS+1
APDSSIZE EQU   APDS+92
APDX     EQU   0
APDX252A EQU   APDX+28
APDXDXL  EQU   APDX+32
APDXSIZE EQU   APDXDXL+2
APDXIOCT EQU   APDX+128
APDXSWS  EQU   APDX+130
APDXSW0  EQU   APDXSWS
APDXSW1  EQU   APDXSWS+1
APDXAPIO EQU   APDX+136
APIO     EQU   0
APIOIOCB EQU   APIO
APIOAPIO EQU   APIO+200
APIOAPCI EQU   APIO+224
APIOFLGS EQU   APIO+248
APIOFLGA EQU   APIOFLGS
APIOFLG0 EQU   APIOFLGA
APIOFLG2 EQU   APIOFLGA+2
APIOFLG3 EQU   APIOFLGA+3
APIOFLGB EQU   APIOFLGS+4
APIOFLG7 EQU   APIOFLGB+3
APIOINDX EQU   APIO+288
APIOSAVE EQU   APIOINDX
APIOTR   EQU   APIO+360
APIOSIZE EQU   APIO+368
APIOCISZ EQU   APIO+370
APIOGMAD EQU   APIO+372
APIOGMSZ EQU   APIO+376
APIOGMS1 EQU   APIOGMSZ+2
APIONBR  EQU   APIO+384
APSC     EQU   0
APSCCRSZ EQU   APSC+2
APSV     EQU   0
APSVPREV EQU   APSV+4
APSVNEXT EQU   APSV+8
APSVREGS EQU   APSV+12
APUB     EQU   0
APUBAPUB EQU   APUB+4
APUBMSTR EQU   APUB+8
APUBUCB  EQU   APUB+28
APUBERRS EQU   APUB+52
APUBALFG EQU   APUB+80
APUBALF0 EQU   APUBALFG
APUBALF1 EQU   APUBALFG+1
APUBALF2 EQU   APUBALFG+2
APUBALF3 EQU   APUBALFG+3
APUBSTAT EQU   APUB+84
APUBIOFG EQU   APUB+88
APUBIOF0 EQU   APUBIOFG
APUBIOF1 EQU   APUBIOFG+1
APUBIOF2 EQU   APUBIOFG+2
APUBIOF3 EQU   APUBIOFG+3
APUBDCB  EQU   APUB+96
APUBSIZE EQU   APUB+102
APVU     EQU   0
APVUSPLN EQU   APVU+8
APVUAUSE EQU   APVU+3040
APESREGS EQU   0
APESREGF EQU   APESREGS+60
APESRTRY EQU   APESREGF
APESMV   EQU   0
PRINTRTN EQU   0
XLTERTN  EQU   0
XLTE     EQU   0
I031P    EQU   0
I031F    EQU   0
I256C    EQU   0
I015F    EQU   0
I001C    EQU   0
APCVZDAL EQU   0
APCVZDAP EQU   0
APCVZDBK EQU   0
APCVZDDA EQU   0
APCVZDDQ EQU   0
APCVZDEQ EQU   0
APCVZDID EQU   0
APCVZDIO EQU   0
APCVZDIP EQU   0
APCVZDMD EQU   0
APCVZDMM EQU   0
APCVZDQR EQU   0
APCVZDRI EQU   0
APCVZDUA EQU   0
APCVZDUL EQU   0
APCVZDWI EQU   0
APCVZDWT EQU   0
APCVZDX1 EQU   0
APCVZDX2 EQU   0
APCVZDX3 EQU   0
APCVZDX4 EQU   0
APCVZD10 EQU   0
APCVZD20 EQU   0
APCVZD4E EQU   0
APCVZD40 EQU   0
APCVZD41 EQU   0
APCVZD42 EQU   0
APCVZD43 EQU   0
APCVZD44 EQU   0
APCVZD45 EQU   0
APCVZD46 EQU   0
APCVZD47 EQU   0
APCVZD48 EQU   0
APCVZD49 EQU   0
APCVZD60 EQU   0
APCVZD80 EQU   0
APCVZD81 EQU   0
APCVZD82 EQU   0
APCVZD83 EQU   0
APCVZJAA EQU   0
APCVZJAD EQU   0
APCVZJAG EQU   0
APCVZJAJ EQU   0
APCVZJAM EQU   0
APCVZJAP EQU   0
APCVZJAX EQU   0
APCVZJAY EQU   0
APCVZJBA EQU   0
APCVZJBD EQU   0
APCVZJBG EQU   0
APCVZJBJ EQU   0
APCVZJBM EQU   0
APCVZJDA EQU   0
APCVZJDD EQU   0
APCVZJDG EQU   0
APCVZJDJ EQU   0
APCVZJDM EQU   0
APCVZJHC EQU   0
APCVZJHE EQU   0
APCVZJHF EQU   0
APCVZJHO EQU   0
APCVZJHQ EQU   0
APCVZJHR EQU   0
APCVZJHT EQU   0
APCVZJHW EQU   0
APCVZJH0 EQU   0
APCVZJH6 EQU   0
APCVZJI0 EQU   0
APCVZJI3 EQU   0
APCVZJJ0 EQU   0
APCVZKAA EQU   0
APCVZKBA EQU   0
APCVZKBB EQU   0
APCVZKBC EQU   0
APCVZKBD EQU   0
APCVZKBE EQU   0
APCVZKBF EQU   0
APCVZKCA EQU   0
APCVZKDA EQU   0
APCVZKGA EQU   0
APCVZKGB EQU   0
APCVZKGC EQU   0
APCVZKGD EQU   0
APCVZLCA EQU   0
APCVZLCB EQU   0
APCVZMBA EQU   0
APCVZMBD EQU   0
APCVZMBG EQU   0
APCVZMBH EQU   0
APCVZMBK EQU   0
APCVZMBM EQU   0
APCVZMIB EQU   0
APCVZMIC EQU   0
APCVZMIF EQU   0
APCVZMJB EQU   0
APCVZMJC EQU   0
APCVZMJH EQU   0
APCVZMJI EQU   0
APCVZMMA EQU   0
APCVZUAA EQU   0
APCVZUAB EQU   0
APCVZUAD EQU   0
APCVZUAE EQU   0
APCVZUAG EQU   0
APCVZUBB EQU   0
APCVZUFA EQU   0
APCVZUHA EQU   0
APCVZUHB EQU   0
APCVZUJA EQU   0
APCV1CMD EQU   0
APCV1JAA EQU   0
APCV1JBJ EQU   0
APCV1JHC EQU   0
APCV1JHL EQU   0
APCV1JHT EQU   0
APCV1MAB EQU   0
APCV1MBD EQU   0
APCV2JHC EQU   0
APCV2JHL EQU   0
APCV2MBD EQU   0
I008P    EQU   0
I015P    EQU   0
UCBBGN   EQU   0
SKIPNO   EQU   0
PSARSVTE EQU   PSARSVT
CVTPTR   EQU   ADPLTCB
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTSHRVM EQU   CVTS01+68
CVTASVT  EQU   CVTS01+208
CVTSV60  EQU   CVTS01+228
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
ASVTPTR  EQU   CVTASVT
ASXBPTR  EQU   ASCBASXB
TCBPTR   EQU   ADPLTCB
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
UCBOBS01 EQU   UCBDEV
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00036 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBFBYT EQU   JSCBSEC3+10
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCDSABQ EQU   JSCBSEC3+60
JSCSCT   EQU   JSCBSEC3+68
JSCBACT  EQU   JSCBSEC3+88
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
QDBPTR   EQU   JSCDSABQ
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
IOSATTSC EQU   IOSIPIB
IOSWTOWA EQU   IOSIPIB
IOSPCISC EQU   IOSIPIB
@NM00107 EQU   APCI
APCIOPID EQU   @NM00107
APCIODTA EQU   @NM00107+4
APCIXDTA EQU   APCIODTA
APCIXIMM EQU   APCIXDTA+4
APCIXCC  EQU   APCIXDTA+8
APCIIDTA EQU   APCIODTA
APCIISZ  EQU   APCIIDTA+2
APCIADTA EQU   APCIODTA
APCIASO  EQU   APCIADTA
APCIASO0 EQU   APCIASO
APCIASO1 EQU   APCIASO+1
APCIAVCT EQU   APCIADTA+4
APCIAFS  EQU   APCIAVCT+8
APCIAF0  EQU   APCIAFS
APCIAF1  EQU   APCIAFS+1
@NM00114 EQU   APCIAVCT
APCIAV1  EQU   @NM00114
APCIAFS1 EQU   APCIAV1+8
APCIAF01 EQU   APCIAFS1
APCIAF11 EQU   APCIAFS1+1
APCIAV2  EQU   @NM00114+16
APCIAFS2 EQU   APCIAV2+8
APCIAF02 EQU   APCIAFS2
APCIAF12 EQU   APCIAFS2+1
APCIAV3  EQU   @NM00114+32
APCIAFS3 EQU   APCIAV3+8
APCIAF03 EQU   APCIAFS3
APCIAF13 EQU   APCIAFS3+1
APCIZDTA EQU   APCIODTA
APCIZV1  EQU   APCIZDTA+4
APCIZFS1 EQU   APCIZV1+8
APCIZF01 EQU   APCIZFS1
APCIZF11 EQU   APCIZFS1+1
APCIZV2  EQU   APCIZDTA+20
APCIZFS2 EQU   APCIZV2+8
APCIZF02 EQU   APCIZFS2
APCIZF12 EQU   APCIZFS2+1
APCTZ    EQU   APCTZ@@@
APCTZUAA EQU   APCTZ
APCTZUAB EQU   APCTZ+4
APCTZUAC EQU   APCTZ+8
APCTZUAD EQU   APCTZ+12
APCTZUAE EQU   APCTZ+16
APCTZUBB EQU   APCTZ+24
APCTZD10 EQU   APCTZ+28
APCTZD20 EQU   APCTZ+32
APCTZD40 EQU   APCTZ+36
APCTZD41 EQU   APCTZ+40
APCTZD42 EQU   APCTZ+44
APCTZD43 EQU   APCTZ+48
APCTZD44 EQU   APCTZ+52
APCTZD45 EQU   APCTZ+56
APCTZD46 EQU   APCTZ+60
APCTZD47 EQU   APCTZ+64
APCTZD48 EQU   APCTZ+68
APCTZD49 EQU   APCTZ+72
APCTZD60 EQU   APCTZ+76
APCTZD80 EQU   APCTZ+80
APCTZD4E EQU   APCTZ+84
APCTZMBA EQU   APCTZ+88
APCTZMBD EQU   APCTZ+92
APCTZMBG EQU   APCTZ+96
APCTZDX1 EQU   APCTZ+104
APCTZDX2 EQU   APCTZ+108
APCTZDX3 EQU   APCTZ+112
APCTZDX4 EQU   APCTZ+116
APCTZMBH EQU   APCTZ+120
APCTZMBK EQU   APCTZ+124
APCTZMBM EQU   APCTZ+128
APCTZMJB EQU   APCTZ+132
APCTZMJC EQU   APCTZ+136
APCTZMJH EQU   APCTZ+140
APCTZMMA EQU   APCTZ+144
APCTZDMD EQU   APCTZ+148
APCTZD81 EQU   APCTZ+152
APCTZDID EQU   APCTZ+156
APCTZDRI EQU   APCTZ+160
APCTZMJI EQU   APCTZ+164
APCTZDWT EQU   APCTZ+168
APCTZDMM EQU   APCTZ+172
APCTZDAL EQU   APCTZ+176
APCTZDBK EQU   APCTZ+180
APCTZDIP EQU   APCTZ+184
APCTZDDA EQU   APCTZ+188
APCTZDUL EQU   APCTZ+192
APCTZDEQ EQU   APCTZ+196
APCTZDDQ EQU   APCTZ+200
APCTZDUA EQU   APCTZ+204
APCTZUAF EQU   APCTZ+208
APCTZUAG EQU   APCTZ+212
APCTZDIO EQU   APCTZ+216
APCTZUHA EQU   APCTZ+220
APCTZUHB EQU   APCTZ+224
APCTZJAA EQU   APCTZ+232
APCTZJAD EQU   APCTZ+236
APCTZJAG EQU   APCTZ+240
APCTZJAJ EQU   APCTZ+244
APCTZJAM EQU   APCTZ+248
APCTZJAP EQU   APCTZ+252
APCTZJAY EQU   APCTZ+256
APCTZUFA EQU   APCTZ+260
APCTZUJA EQU   APCTZ+264
APCTZDAP EQU   APCTZ+268
APCTZKAA EQU   APCTZ+272
APCTZD82 EQU   APCTZ+276
APCTZMIB EQU   APCTZ+280
APCTZMIC EQU   APCTZ+284
APCTZD83 EQU   APCTZ+288
APCTZMIF EQU   APCTZ+296
APCTZJH0 EQU   APCTZ+300
APCTZJI0 EQU   APCTZ+304
APCTZJI3 EQU   APCTZ+308
APCTZJJ0 EQU   APCTZ+312
APCTZJBA EQU   APCTZ+316
APCTZJBD EQU   APCTZ+320
APCTZJBG EQU   APCTZ+324
APCTZJBJ EQU   APCTZ+328
APCTZJBM EQU   APCTZ+332
APCTZKCA EQU   APCTZ+340
APCTZKDA EQU   APCTZ+344
APCTZJDA EQU   APCTZ+356
APCTZJDJ EQU   APCTZ+360
APCTZJH6 EQU   APCTZ+364
APCTZJHO EQU   APCTZ+368
APCTZJHF EQU   APCTZ+372
APCTZJHE EQU   APCTZ+376
APCTZDQR EQU   APCTZ+380
APCTZJHR EQU   APCTZ+384
APCTZJHT EQU   APCTZ+388
APCTZJHW EQU   APCTZ+392
APCTZ1   EQU   APCTZ@@1
APCTZKBA EQU   APCTZ1
APCTZKBC EQU   APCTZ1+4
APCTZKBB EQU   APCTZ1+8
APCTZJHC EQU   APCTZ1+20
APCTZJHQ EQU   APCTZ1+24
APCTZKBD EQU   APCTZ1+28
APCTZKBE EQU   APCTZ1+40
APCTZUKA EQU   APCTZ1+56
APCTZKBF EQU   APCTZ1+60
APCTZJDD EQU   APCTZ1+64
APCTZJDG EQU   APCTZ1+68
APCTZJDM EQU   APCTZ1+72
APCTZLCA EQU   APCTZ1+76
APCTZLCB EQU   APCTZ1+80
APCTZDWI EQU   APCTZ1+84
APCTZJAX EQU   APCTZ1+88
APCTZKGA EQU   APCTZ1+92
APCTZKGB EQU   APCTZ1+96
APCTZKGC EQU   APCTZ1+100
APCTZKGD EQU   APCTZ1+104
APCTU    EQU   APCTU@@@
APCT1MAB EQU   APCTU
APCT1MBD EQU   APCTU+4
APCT2MBD EQU   APCTU+8
APCT1CMD EQU   APCTU+12
APCT1JAA EQU   APCTU+20
APCT1JHC EQU   APCTU+24
APCT2JHC EQU   APCTU+28
APCT1JHT EQU   APCTU+32
APCT1JHL EQU   APCTU+36
APCT2JHL EQU   APCTU+40
APCT1JBJ EQU   APCTU+44
@NM00195 EQU   APIOIOCB
APIOIOSB EQU   @NM00195
@NM00196 EQU   APIOIOCB
CMBRX    EQU   CMBRXZZZ
CBLANK   EQU   CLINEX
DLINE1   EQU   DLINEX
DLINE1A  EQU   DLINE1
DLINE2   EQU   DLINEX
DLINE2A  EQU   DLINE2
DLINE2B  EQU   DLINE2+9
DLINE2C  EQU   DLINE2+30
DLINE3   EQU   DLINEX
DLINE3A  EQU   DLINE3
DLINE3B  EQU   DLINE3+9
DLINE3C  EQU   DLINE3+18
DLINE3D  EQU   DLINE3+27
DLINE3E  EQU   DLINE3+36
DLINE3F  EQU   DLINE3+48
DLINE3G  EQU   DLINE3+57
DLINE3H  EQU   DLINE3+66
DLINE3I  EQU   DLINE3+75
DLINE3J  EQU   DLINE3+87
DLINE4   EQU   DLINEX
DLINE5   EQU   DLINEX
DLINE5A  EQU   DLINE5+17
DLINE5B  EQU   DLINE5+38
DLINE6   EQU   DLINEX
MBLKID   EQU   ZBLKID
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00269 EQU   DLINE6
@NM00267 EQU   DLINE5+25
@NM00266 EQU   DLINE5
DLINE4A  EQU   DLINE4
@NM00263 EQU   DLINE3+119
@NM00262 EQU   DLINE3+86
@NM00261 EQU   DLINE3+83
@NM00260 EQU   DLINE3+74
@NM00259 EQU   DLINE3+65
@NM00258 EQU   DLINE3+56
@NM00257 EQU   DLINE3+44
@NM00256 EQU   DLINE3+35
@NM00255 EQU   DLINE3+26
@NM00254 EQU   DLINE3+17
@NM00253 EQU   DLINE3+6
@NM00241 EQU   DLINE2+17
@NM00240 EQU   DLINE2+8
@NM00237 EQU   DLINE1+4
CMBXRCN  EQU   CMBRX+6
CMBXRCT  EQU   CMBRX+5
@NM00225 EQU   CMBRX+4
CMBRKT   EQU   CMBRX+2
CMBRMT   EQU   CMBRX
APIOIOB  EQU   @NM00196+160
@NM00197 EQU   @NM00196
APIOSRB  EQU   @NM00195+128
@NM00174 EQU   APCTU+48
APCT1MBM EQU   APCTU+16
@NM00173 EQU   APCTZ1+108
@NM00172 EQU   APCTZ1+52
@NM00171 EQU   APCTZ1+48
@NM00170 EQU   APCTZ1+44
@NM00169 EQU   APCTZ1+36
@NM00168 EQU   APCTZ1+32
@NM00167 EQU   APCTZ1+16
@NM00166 EQU   APCTZ1+12
@NM00165 EQU   APCTZ+396
@NM00164 EQU   APCTZ+352
@NM00163 EQU   APCTZ+348
@NM00162 EQU   APCTZ+336
@NM00161 EQU   APCTZ+292
APCTZJFA EQU   APCTZ+228
APCTZMBR EQU   APCTZ+100
@NM00160 EQU   APCTZ+20
APCIZXN2 EQU   APCIZV2+14
APCIZXD2 EQU   APCIZV2+12
APCIZXB2 EQU   APCIZV2+10
@NM00129 EQU   APCIZF12
@NM00128 EQU   APCIZF02
APCIZST2 EQU   APCIZF02
APCIZTC2 EQU   APCIZF02
@NM00127 EQU   APCIZF02
APCIZFN2 EQU   APCIZF02
APCIZFP2 EQU   APCIZF02
APCIZRS2 EQU   APCIZF02
APCIZNB2 EQU   APCIZV2+6
APCIZDL2 EQU   APCIZV2+4
APCIZBS2 EQU   APCIZV2
APCIZXN1 EQU   APCIZV1+14
APCIZXD1 EQU   APCIZV1+12
APCIZXB1 EQU   APCIZV1+10
@NM00126 EQU   APCIZF11
@NM00125 EQU   APCIZF01
APCIZST1 EQU   APCIZF01
APCIZTC1 EQU   APCIZF01
@NM00124 EQU   APCIZF01
APCIZFN1 EQU   APCIZF01
APCIZFP1 EQU   APCIZF01
APCIZRS1 EQU   APCIZF01
APCIZNB1 EQU   APCIZV1+6
APCIZDL1 EQU   APCIZV1+4
APCIZBS1 EQU   APCIZV1
APCIZX2  EQU   APCIZDTA+2
APCIZX1  EQU   APCIZDTA
APCIAXN3 EQU   APCIAV3+14
APCIAXD3 EQU   APCIAV3+12
APCIAXB3 EQU   APCIAV3+10
@NM00123 EQU   APCIAF13
@NM00122 EQU   APCIAF03
APCIAST3 EQU   APCIAF03
APCIATC3 EQU   APCIAF03
@NM00121 EQU   APCIAF03
APCIAFN3 EQU   APCIAF03
APCIAFP3 EQU   APCIAF03
APCIARS3 EQU   APCIAF03
APCIANB3 EQU   APCIAV3+6
APCIADL3 EQU   APCIAV3+4
APCIABS3 EQU   APCIAV3
APCIAXN2 EQU   APCIAV2+14
APCIAXD2 EQU   APCIAV2+12
APCIAXB2 EQU   APCIAV2+10
@NM00120 EQU   APCIAF12
@NM00119 EQU   APCIAF02
APCIAST2 EQU   APCIAF02
APCIATC2 EQU   APCIAF02
@NM00118 EQU   APCIAF02
APCIAFN2 EQU   APCIAF02
APCIAFP2 EQU   APCIAF02
APCIARS2 EQU   APCIAF02
APCIANB2 EQU   APCIAV2+6
APCIADL2 EQU   APCIAV2+4
APCIABS2 EQU   APCIAV2
APCIAXN1 EQU   APCIAV1+14
APCIAXD1 EQU   APCIAV1+12
APCIAXB1 EQU   APCIAV1+10
@NM00117 EQU   APCIAF11
@NM00116 EQU   APCIAF01
APCIAST1 EQU   APCIAF01
APCIATC1 EQU   APCIAF01
@NM00115 EQU   APCIAF01
APCIAFN1 EQU   APCIAF01
APCIAFP1 EQU   APCIAF01
APCIARS1 EQU   APCIAF01
APCIANB1 EQU   APCIAV1+6
APCIADL1 EQU   APCIAV1+4
APCIABS1 EQU   APCIAV1
@NM00113 EQU   APCIADTA+20
APCIAXN  EQU   APCIAVCT+14
APCIAXD  EQU   APCIAVCT+12
APCIAXB  EQU   APCIAVCT+10
@NM00112 EQU   APCIAF1
@NM00111 EQU   APCIAF0
APCIASTR EQU   APCIAF0
APCIATCM EQU   APCIAF0
@NM00110 EQU   APCIAF0
APCIAFNG EQU   APCIAF0
APCIAFPS EQU   APCIAF0
APCIARSN EQU   APCIAF0
APCIANBR EQU   APCIAVCT+6
APCIADLT EQU   APCIAVCT+4
APCIABSA EQU   APCIAVCT
APCIADO  EQU   APCIADTA+2
@NM00109 EQU   APCIASO1
APCIASSK EQU   APCIASO1
@NM00108 EQU   APCIASO0
APCIASCE EQU   APCIASO0
APCIASUD EQU   APCIASO0
APCIASUF EQU   APCIASO0
APCIASOV EQU   APCIASO0
APCIIBSA EQU   APCIIDTA+4
APCIIX2  EQU   APCIISZ
APCIIX   EQU   APCIIDTA
APCIXBRO EQU   APCIXDTA+10
APCIXBSX EQU   APCIXCC
APCIXBSA EQU   APCIXIMM
APCIXID2 EQU   APCIXDTA+2
APCIXID1 EQU   APCIXDTA
APCIOPSZ EQU   @NM00107+2
APCIOPCD EQU   APCIOPID+1
APCIOPTP EQU   APCIOPID
IOSPCIWA EQU   IOSPCISC+44
IOSPCIRS EQU   IOSPCISC+8
@NM00102 EQU   IOSPCISC+4
@NM00101 EQU   IOSPCISC
IOSWRNDR EQU   IOSWTOWA+4
IOSWTOPT EQU   IOSWTOWA+3
IOSWTOCP EQU   IOSWTOWA+2
IOSWTOCH EQU   IOSWTOWA
IOSATTWA EQU   IOSATTSC+40
@NM00100 EQU   IOSATTSC+24
IOSATTSN EQU   IOSATTSC
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCBASWA EQU   JSCBSEC3+96
JSCBUFPT EQU   JSCBSEC3+92
JSCBSWSP EQU   JSCBSEC3+87
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCTMCOR EQU   JSCBSEC3+72
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCBSSIB EQU   JSCBSEC3+56
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00041 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00040 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCBRV08 EQU   JSCBSEC3+11
JSCBRV07 EQU   JSCBFBYT
JSCBRV06 EQU   JSCBFBYT
JSCBRV05 EQU   JSCBFBYT
JSCBRV04 EQU   JSCBFBYT
JSCBRV03 EQU   JSCBFBYT
JSCBRV02 EQU   JSCBFBYT
JSCBADSP EQU   JSCBFBYT
JSCBRV01 EQU   JSCBFBYT
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00036
UCBSKPFG EQU   @NM00036
UCBRIPND EQU   @NM00036
UCBRTIAC EQU   @NM00036
UCBRSV79 EQU   @NM00036
UCBRSV78 EQU   @NM00036
UCBRSV77 EQU   @NM00036
UCBOLTEP EQU   @NM00036
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBRV038 EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00035 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBMAT   EQU   UCBFL4
UCBHOLD  EQU   UCBFL4
UCBATTN  EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVOLI  EQU   UCBOBS01+4
UCBVTOC  EQU   UCBOBS01
TIOUCBP  EQU   TIOEDEVE+1
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
@NM00235 EQU   APESMV+6
@NM00234 EQU   APESMV+4
APESMVKW EQU   APESMV+2
APESMVMS EQU   APESMV
APESREGE EQU   APESREGS+56
APESREGD EQU   APESREGS+52
APESREGC EQU   APESREGS+48
APESREGB EQU   APESREGS+44
APESREGA EQU   APESREGS+40
APESREG9 EQU   APESREGS+36
APESREG8 EQU   APESREGS+32
APESREG7 EQU   APESREGS+28
APESREG6 EQU   APESREGS+24
APESREG5 EQU   APESREGS+20
APESREG4 EQU   APESREGS+16
APESREG3 EQU   APESREGS+12
APESREG2 EQU   APESREGS+8
APESREG1 EQU   APESREGS+4
APESREG0 EQU   APESREGS
@NM00218 EQU   APVU+3040
@NM00217 EQU   APVUAUSE
APVUAPIO EQU   APVUAUSE
APVUMON  EQU   APVUAUSE
APVUVUSE EQU   APVUAUSE
APVUWORK EQU   APVU+40
@NM00216 EQU   APVU+16
@NM00215 EQU   APVU+14
APVUANUM EQU   APVU+12
APVULEN  EQU   APVUSPLN+1
APVUSPNO EQU   APVUSPLN
APVUUSER EQU   APVU+4
APVUID   EQU   APVU
@NM00214 EQU   APUB+120
@NM00213 EQU   APUB+112
APUBJBNM EQU   APUB+104
APUBRSVD EQU   APUB+100
APUBASCB EQU   APUBDCB
@NM00212 EQU   APUBIOFG+4
@NM00211 EQU   APUBIOF3
APUBISHR EQU   APUBIOF3
APUBIRIP EQU   APUBIOF3
@NM00210 EQU   APUBIOF2
APUBIEXC EQU   APUBIOF2
@NM00209 EQU   APUBIOF1
APUBIIPL EQU   APUBIOF1
APUBIERR EQU   APUBIOF1
@NM00208 EQU   APUBIOF0
APUBICNL EQU   APUBIOF0
APUBINRG EQU   APUBIOF0
APUBIDAB EQU   APUBIOF0
APUBIDWN EQU   APUBIOF0
@NM00207 EQU   APUB+85
@NM00206 EQU   APUBSTAT
APUBQISC EQU   APUBSTAT
APUBPDMP EQU   APUBSTAT
APUBFDMP EQU   APUBSTAT
APUBRIPL EQU   APUBSTAT
@NM00205 EQU   APUBALF3
APUBSCAL EQU   APUBALF3
APUBSCAV EQU   APUBALF3
APUBBIST EQU   APUBALF3
APUBBTST EQU   APUBALF3
@NM00204 EQU   APUBALF2
APUBBOPT EQU   APUBALF2
APUBBREQ EQU   APUBALF2
APUBBYT1 EQU   APUBALF2
@NM00203 EQU   APUBALF1
APUBUNLP EQU   APUBALF1
APUBDSBP EQU   APUBALF1
APUBBERR EQU   APUBALF1
APUBUNLD EQU   APUBALF1
APUBDSBL EQU   APUBALF1
APUBZRGN EQU   APUBALF1
@NM00202 EQU   APUBALF0
APUBOWN  EQU   APUBALF0
APUBSBCH EQU   APUBALF0
APUBCPU  EQU   APUB+78
APUBINIT EQU   APUB+76
APUBIPL  EQU   APUB+74
APUBERRJ EQU   APUBERRS+20
APUBERRD EQU   APUBERRS+18
APUBERRC EQU   APUBERRS+16
APUBERRB EQU   APUBERRS+14
APUBERRA EQU   APUBERRS+12
APUBERR9 EQU   APUBERRS+10
APUBERR3 EQU   APUBERRS+8
APUBERR2 EQU   APUBERRS+6
APUBERR1 EQU   APUBERRS+4
APUBERR0 EQU   APUBERRS+2
@NM00201 EQU   APUBERRS
@NM00200 EQU   APUB+50
APUBRGN  EQU   APUB+48
APUBERRT EQU   APUB+44
APUBMSTP EQU   APUB+40
APUBUBAP EQU   APUB+36
APUBAPDS EQU   APUB+32
APUBIOCT EQU   APUB+24
APUBAPCT EQU   APUB+20
APUBUSER EQU   APUB+16
APUBNXIO EQU   APUB+12
APUBID   EQU   APUB
APSVWORK EQU   APSV+80
@NM00199 EQU   APSV+80
APSVFREE EQU   APSV+76
APSVAPSM EQU   APSV+72
APSVRG12 EQU   APSVREGS+56
APSVRG11 EQU   APSVREGS+52
APSVRG10 EQU   APSVREGS+48
APSVRG9  EQU   APSVREGS+44
APSVRG8  EQU   APSVREGS+40
APSVRG7  EQU   APSVREGS+36
APSVRG6  EQU   APSVREGS+32
APSVRG5  EQU   APSVREGS+28
APSVRG4  EQU   APSVREGS+24
APSVRG3  EQU   APSVREGS+20
APSVRG2  EQU   APSVREGS+16
APSVRG1  EQU   APSVREGS+12
APSVRG0  EQU   APSVREGS+8
APSVRG15 EQU   APSVREGS+4
APSVRG14 EQU   APSVREGS
APSVAPSC EQU   APSV
@NM00198 EQU   APSC+8
APSCAPSC EQU   APSC+4
APSCMXSZ EQU   APSC
@NM00194 EQU   APIO+424
@NM00193 EQU   APIO+400
APIOTMEE EQU   APIO+396
APIOTMES EQU   APIO+392
APIOXTME EQU   APIO+388
APIONBRI EQU   APIONBR+2
APIONBRX EQU   APIONBR
APIOAPCT EQU   APIO+380
@NM00192 EQU   APIOGMSZ+1
APIOGMSP EQU   APIOGMSZ
APIORB   EQU   APIOTR+4
APIOTCB  EQU   APIOTR
APIOECB  EQU   APIO+356
APIOTERM EQU   APIO+352
APIOASCB EQU   APIO+348
APIOTCSW EQU   APIOSAVE
APIOSNSE EQU   APIO+256
APIOACTV EQU   APIOFLG7
APIOFLG6 EQU   APIOFLGB+2
APIOFLG5 EQU   APIOFLGB+1
APIOFLG4 EQU   APIOFLGB
@NM00191 EQU   APIOFLG3
APIOPGFS EQU   APIOFLG3
APIOPGIP EQU   APIOFLG3
APIORSME EQU   APIOFLG3
APIORET  EQU   APIOFLG3
APIONPST EQU   APIOFLG3
APIOIOCT EQU   APIOFLG3
@NM00190 EQU   APIOFLG2
APIODMPT EQU   APIOFLG2
APIODUMP EQU   APIOFLG2
APIOCSWT EQU   APIOFLG2
APIOVINX EQU   APIOFLG2
APIOVSNS EQU   APIOFLG2
APIOEXCL EQU   APIOFLG2
APIOFLG1 EQU   APIOFLGA+1
@NM00189 EQU   APIOFLG0
APIOSU50 EQU   APIOFLG0
APIOSYNC EQU   APIOFLG0
APIOFXED EQU   APIOFLG0
@NM00188 EQU   APIO+246
APIOOLAP EQU   APIO+244
APIOIOAP EQU   APIO+240
APIORGN  EQU   APIO+236
APIOPGFL EQU   APIO+232
APIOPGFX EQU   APIO+228
APIOCCW  EQU   APIO+220
APIODEB  EQU   APIO+216
APIOAPXL EQU   APIO+212
APIOVCSW EQU   APIO+208
APIOAPUB EQU   APIO+204
APIOUSER EQU   APIO+196
APIOID   EQU   APIO+192
@NM00187 EQU   APDX+136
@NM00186 EQU   APDX+133
@NM00185 EQU   APDX+132
@NM00184 EQU   APDXSW1
@NM00183 EQU   APDXSW0
APDXSSMF EQU   APDXSW0
APDXSEOT EQU   APDXSW0
APDXSOPN EQU   APDXSW0
@NM00182 EQU   APDX+52
@NM00181 EQU   APDX+50
APDXNDMP EQU   APDX+48
APDXDEB  EQU   APDX+44
APDXAPOC EQU   APDX+40
APDXDXA  EQU   APDX+36
@NM00180 EQU   APDXDXL
APDXAPMF EQU   APDX252A
APDX252L EQU   APDX+24
APDX000A EQU   APDX+20
APDX000L EQU   APDX+16
APDXAPDS EQU   APDX+12
APDXAPCT EQU   APDX+8
APDXUSER EQU   APDX+4
APDXID   EQU   APDX
@NM00179 EQU   APDS+144
@NM00178 EQU   APDS+100
APDSAPEP EQU   APDS+96
@NM00177 EQU   APDS+94
APDSJBNM EQU   APDS+84
APDSITCB EQU   APDS+80
APDSMSK  EQU   APDS+72
@NM00176 EQU   APDS+69
APDSIOFS EQU   APDS+68
APDSDUMP EQU   APDS+67
APDSPGFX EQU   APDS+66
@NM00175 EQU   APDSFLG1
APDSFRST EQU   APDSFLG1
APDSSLPS EQU   APDSFLG0
APDSLSR  EQU   APDSFLG0
APDSIER  EQU   APDSFLG0
APDSARS  EQU   APDSFLG0
APDSVPER EQU   APDSFLG0
APDSVLER EQU   APDSFLG0
APDSTPGM EQU   APDSFLG0
APDSDSAP EQU   APDS+60
APDSREG  EQU   APDS+56
APDSASCB EQU   APDS+52
APDSPERR EQU   APDS+40
APDSLERR EQU   APDS+32
APDSDDNM EQU   APDS+24
APDSTCB  EQU   APDSTD
APDSAPCT EQU   APDS+12
APDSUSER EQU   APDS+8
APDSID   EQU   APDS
@NM00159 EQU   APCT+1556
APCTSVCT EQU   APCT+1552
APCTDAVT EQU   APCT+1548
APCTLOGL EQU   APCT+1544
@NM00158 EQU   APCT+1540
APCTNDMP EQU   APCT+1530
APCTASID EQU   APCT+1528
APCTLGPG EQU   APCT+1526
APCTLGLN EQU   APCT+1524
APCTABR  EQU   APCT+1116
APCTACTR EQU   APCT+1112
APCTLOGD EQU   APCT+1108
APCTDCLD EQU   APCT+1104
APCTIOAP EQU   APCT+1100
@NM00157 EQU   APCT+1080
@NM00156 EQU   APCT+1078
APCTKCAX EQU   APCT+1076
@NM00155 EQU   APCT+1068
APCTCSCT EQU   APCT+1060
APCTSTDF EQU   APCT+1056
APCTSTMX EQU   APCT+1052
APCTRGMX EQU   APCT+1048
APCTCTUB EQU   APCT+1045
APCTMFID EQU   APCT+1044
APCTMFSZ EQU   APCT+1040
APCTCRTN EQU   APCT+1036
APCTAPCP EQU   APCT+1032
APCTAMNA EQU   APCT+1028
APCTEMNA EQU   APCT+1024
APCTAALP EQU   APCT+1020
APCTEALP EQU   APCT+1016
@NM00154 EQU   APCT+1012
@NM00153 EQU   APCT+1008
@NM00152 EQU   APCT+1004
APCTEIPL EQU   APCT+1000
@NM00151 EQU   APCT+996
@NM00150 EQU   APCT+992
@NM00149 EQU   APCT+988
@NM00148 EQU   APCT+984
@NM00147 EQU   APCT+980
APCTECPW EQU   APCT+976
APCTEULD EQU   APCT+972
APCTECPT EQU   APCT+968
APCTEALC EQU   APCT+964
APCTECBL EQU   APCT+960
APCTECIT EQU   APCT+956
APCTCQAF EQU   APCTCQAQ
APCTCQL  EQU   APCTAPCQ+4
APCTCQF  EQU   APCTAPCQ
APCTCQLK EQU   APCT+940
@NM00146 EQU   @NM00142+2
@NM00145 EQU   APCTPRSW
APCTAPST EQU   APCTPRSW
@NM00144 EQU   APCTPRSW
@NM00143 EQU   APCTSTAT
APCTWARM EQU   APCTSTAT
APCTTERM EQU   APCTSTAT
APCTHALT EQU   APCTSTAT
APCTQSCE EQU   APCTSTAT
APCTSTRT EQU   APCTSTAT
APCTACT  EQU   APCTSTAT
@NM00141 EQU   APCT+935
APCTSOUT EQU   APCT+934
APCTDAID EQU   APCT+933
APCTSV34 EQU   APCT+932
APCTMJOB EQU   APCT+928
APCTTCB  EQU   APCT+924
APCTASCB EQU   APCT+920
APCTDCNW EQU   APCT+918
APCTDCNR EQU   APCT+916
@NM00140 EQU   APCT+912
@NM00139 EQU   APCT+908
@NM00138 EQU   APCT+904
@NM00137 EQU   APCT+900
@NM00136 EQU   APCTERRS+22
APCTERTJ EQU   APCTERRS+20
APCTERTD EQU   APCTERRS+18
APCTERTC EQU   APCTERRS+16
APCTERTB EQU   APCTERRS+14
APCTERTA EQU   APCTERRS+12
APCTERT9 EQU   APCTERRS+10
APCTERT3 EQU   APCTERRS+8
APCTERT2 EQU   APCTERRS+6
APCTERT1 EQU   APCTERRS+4
APCTERT0 EQU   APCTERRS+2
APCTERTT EQU   APCTERRS
APCTDSAP EQU   APCT+872
APCTISUB EQU   APCT+868
APCTUBAP EQU   APCT+864
APCTUBIC EQU   APCT+856
APCTUBIS EQU   APCT+852
APCTUBLK EQU   APCT+844
APCTBR1A EQU   APCTBR14+2
@NM00135 EQU   APCTBR14
APCTSMSZ EQU   APCTSMAD+2
@NM00134 EQU   APCTSMAD+1
@NM00133 EQU   APCTSMAD
APCTSMIS EQU   APCTSMIN+2
@NM00132 EQU   APCTSMIN+1
APCTSMSP EQU   APCTSMIN
@NM00131 EQU   APCT+30
APCTLINE EQU   APCT+28
APCTLBSZ EQU   APCT+24
APCTREG  EQU   APCT+20
APCTSSID EQU   APCTENQM+4
@NM00130 EQU   APCTENQM
APCTSSVT EQU   APCT+8
APCTUSER EQU   APCT+4
APCTID   EQU   APCT
APCIHELM EQU   APCI+4
@NM00106 EQU   APCIHDR+4
@NM00105 EQU   APCIHFG1
@NM00104 EQU   APCIHFG0
@NM00103 EQU   APCIHDR
IOSEND   EQU   IOSB+108
IOSSKR   EQU   IOSEEKA+7
IOSSKH2  EQU   IOSSKHH+1
IOSSKH1  EQU   IOSSKHH
IOSSKCC  EQU   IOSCCHH
IOSSKBB  EQU   IOSEEKA+1
IOSSKM   EQU   IOSEEKA
IOSEEK   EQU   IOSB+92
IOSMDM   EQU   IOSB+91
IOSMDB   EQU   IOSB+90
IOSCKEY7 EQU   IOSCKEY
IOSCKEY6 EQU   IOSCKEY
IOSCKEY5 EQU   IOSCKEY
IOSCKEY4 EQU   IOSCKEY
@NM00099 EQU   IOSCKEY
IOSFMSK  EQU   IOSB+88
IOSCUDEV EQU   IOSPATH+1
@NM00098 EQU   IOSCHN
IOSPATH3 EQU   IOSCHN
IOSPATH2 EQU   IOSCHN
IOSEXP   EQU   IOSCHN
IOSGDP   EQU   IOSCHN
IOSAFF   EQU   IOSB+85
IOSRSS1B EQU   IOSB+84
IOSDSID  EQU   IOSB+80
IOSVST   EQU   IOSB+76
IOSRST   EQU   IOSB+72
IOSNOTRS EQU   IOSDIEFG
IOSABN   EQU   IOSB+64
IOSNRM   EQU   IOSB+60
IOSPCI   EQU   IOSB+56
IOSERP   EQU   IOSB+52
IOSPCHN  EQU   IOSB+48
IOSSNS   EQU   IOSB+42
IOSAPMSK EQU   IOSB+40
IOSRES4A EQU   IOSB+36
IOSUSE   EQU   IOSB+32
IOSSRB   EQU   IOSB+28
IOSCSWRC EQU   IOSCSW+5
IOSTSB   EQU   IOSTATUS+1
IOSTSA   EQU   IOSTATUS
IOSCSWCA EQU   IOSCSW
IOSCC    EQU   @NM00097
IOSUCB   EQU   IOSB+16
IOSOPT2X EQU   IOSOPT2
IOSHTP   EQU   IOSOPT2
IOSRELSE EQU   IOSOPT
IOSAPR   EQU   IOSOPT
IOSTSLL  EQU   IOSOPT
IOSNERP  EQU   IOSOPT
IOSPSLL  EQU   IOSOPT
IOSQISCE EQU   IOSOPT
IOSDEP   EQU   IOSOPT
IOSBYP   EQU   IOSOPT
IOSCOD   EQU   IOSB+13
IOSPKY7  EQU   IOSPKEY
IOSPGDPX EQU   IOSPKEY
IOSIDR   EQU   IOSPKEY
IOSLCL   EQU   IOSPKEY
@NM00096 EQU   IOSPKEY
IOSPGAD  EQU   IOSB+8
IOSASID  EQU   IOSB+6
IOSPRLVL EQU   IOSB+5
IOSDVRID EQU   IOSB+4
IOSPROC  EQU   IOSB+3
IOSFLC7  EQU   IOSFLC
IOSCTCNR EQU   IOSFLC
IOSRWAIT EQU   IOSFLC
IOSTP    EQU   IOSFLC
IOSCC3WE EQU   IOSFLC
IOSVERIF EQU   IOSDVALT
IOSDVMNT EQU   IOSFLC
IOSLOG   EQU   IOSFLB
IOSBDCST EQU   IOSFLB
IOSMSG   EQU   IOSFLB
IOSFLB4  EQU   IOSFLB
IOSFLB3  EQU   IOSFLB
IOSFLB2  EQU   IOSFLB
IOSSDR   EQU   IOSFLB
IOSDIESE EQU   IOSFLB
IOSIOSB  EQU   IOSFLA
IOSDOM   EQU   IOSFLA
IOSEX    EQU   IOSFLA
IOSSMDB  EQU   IOSFLA
IOSSMDA  EQU   IOSFLA
IOSERR   EQU   IOSFLA
IOSCCHN  EQU   IOSACHN
IOSDCHN  EQU   IOSACHN
ADPLABDA EQU   ABDPL+56
ADPLEXT  EQU   ABDPL+52
ADPLFMT2 EQU   ABDPL+48
ADPLFMT1 EQU   ABDPL+44
ADPLCOM4 EQU   ABDPL+40
ADPLCOM3 EQU   ABDPL+36
ADPLCOM2 EQU   ABDPL+32
ADPLCOM1 EQU   ABDPL+28
ADPLFRMT EQU   ABDPL+24
@NM00095 EQU   ADPLFLAG
ADPLDMGT EQU   ADPLFLAG
ADPLSYTM EQU   ADPLFLAG
ADPLSBPL EQU   ABDPL+6
@NM00094 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00093 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
SDWAERTM EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00092 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00091 EQU   SDWADDAT+3
@NM00090 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00089 EQU   SDWASDA1
SDWAERR  EQU   SDWASDA1
SDWAIO   EQU   SDWASDA1
SDWADM   EQU   SDWASDA0
SDWAQQS  EQU   SDWASDA0
SDWACBS  EQU   SDWASDA0
SDWAGTF  EQU   SDWASDA0
SDWASWA  EQU   SDWASDA0
SDWALSQA EQU   SDWASDA0
SDWASQA  EQU   SDWASDA0
SDWANUC  EQU   SDWASDA0
@NM00088 EQU   SDWADUMP+2
@NM00087 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00086 EQU   SDWADPFS
SDWAENSN EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
SDWASEQ# EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00085 EQU   SDWAACF3
@NM00084 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00083 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00082 EQU   SDWAACF2
SDWARCRD EQU   SDWAACF2
SDWARCDE EQU   SDWAPARQ
SDWALCPU EQU   SDWACPUA+2
@NM00081 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
SDWARTYA EQU   SDWA+240
SDWACPUI EQU   SDWA+239
@NM00080 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
SDWAERFL EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00079 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00078 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00077 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00076 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00075 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00074 EQU   SDWAINC2
@NM00073 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00072 EQU   SDWAILC2
@NM00071 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00070 EQU   SDWANXT2
@NM00069 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00068 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00067 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00066 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00065 EQU   SDWAINC1
@NM00064 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00063 EQU   SDWAILC1
@NM00062 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00061 EQU   SDWANXT1
@NM00060 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00059 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00058 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00057 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00056 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00055 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00054 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00053 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00052 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
SDWAPARM EQU   SDWA
SSCTSUSE EQU   SSCT+20
SSCTSSVT EQU   SSCT+16
SSCTRSV1 EQU   SSCT+13
@NM00051 EQU   SSCTFLG1
SSCTUPSS EQU   SSCTFLG1
SSCTSFOR EQU   SSCTFLG1
SSCTSNAM EQU   SSCT+8
SSCTSCTA EQU   SSCT+4
SSCTID   EQU   SSCT
DEBXSAMB EQU   DEBXTN+28
DEBXOPNJ EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXDSSI EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXCDCB EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBAMTYP EQU   DEBPREFX+13
DEBLNGTH EQU   DEBPREFX+12
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBESMVR EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00050 EQU   DEBACS08+12
@NM00049 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00048 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00047 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBLRECL EQU   DEBACSMD+14
DEBBLKSI EQU   DEBACSMD+12
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBUCBA  EQU   DEBUCBAD+1
DEBDVMOD EQU   DEBUCBAD
DEBAPPB  EQU   DEBAPPAD+1
DEBEXSCL EQU   DEBAPPAD
DEBDCBB  EQU   DEBDCBAD+1
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBNMEXT EQU   DEBUSRPG
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBDEBB  EQU   DEBDEBAD+1
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
DSABGRID EQU   DSABGIDL+4
DSABLLEN EQU   DSABGIDL
DSABANAM EQU   DSABANMI+1
DSABANML EQU   DSABANMI
DSABRS04 EQU   DSAB+68
DSABSIOT EQU   DSAB+64
DSABRS03 EQU   DSAB+62
DSABDCBM EQU   DSAB+56
DSABPTTR EQU   DSAB+44
DSABTCBP EQU   DSAB+40
DSABRS02 EQU   DSAB+38
@NM00046 EQU   DSABFLG4
DSABCKSI EQU   DSABFLG4
DSABCKVL EQU   DSABFLG4
DSABCKDS EQU   DSABFLG4
@NM00045 EQU   DSABFLG3
DSABJSCT EQU   DSABFLG3
DSABCATL EQU   DSABFLG3
DSABVMSC EQU   DSABFLG3
DSABVAM  EQU   DSABFLG3
DSABPASS EQU   DSABFLG3
DSABDEFR EQU   DSABFLG3
@NM00044 EQU   DSABFLG2
DSABUNAL EQU   DSABFLG2
DSABIRM  EQU   DSABFLG2
DSABOPEN EQU   DSABFLG2
DSABNUSE EQU   DSABFLG1
DSABCATM EQU   DSABFLG1
DSABPCAT EQU   DSABFLG1
DSABDCAT EQU   DSABFLG1
DSABCONV EQU   DSABFLG1
DSABDCNV EQU   DSABFLG1
DSABPALC EQU   DSABFLG1
DSABDALC EQU   DSABFLG1
@NM00043 EQU   DSABORG2
DSABTR   EQU   DSABORG2
DSABAM   EQU   DSABORG2
@NM00042 EQU   DSABORG2
DSABTQ   EQU   DSABORG2
DSABTX   EQU   DSABORG2
DSABGS   EQU   DSABORG2
DSABU    EQU   DSABORG1
DSABPO   EQU   DSABORG1
DSABMQ   EQU   DSABORG1
DSABCQ   EQU   DSABORG1
DSABCX   EQU   DSABORG1
DSABDA   EQU   DSABORG1
DSABPS   EQU   DSABORG1
DSABIS   EQU   DSABORG1
DSABSSVA EQU   DSAB+21
DSABRS01 EQU   DSAB+20
DSABOPCT EQU   DSAB+14
DSABLNTH EQU   DSAB+12
DSABBCHN EQU   DSAB+8
DSABID   EQU   DSAB
QDBRV002 EQU   QDB+28
QDBPRDS  EQU   QDB+26
QDBPRSZ  EQU   QDB+24
QDBBPTDS EQU   QDB+22
QDBFPTDS EQU   QDB+20
QDBLELMP EQU   QDB+16
QDBNELMS EQU   QDB+8
QDBRV001 EQU   QDB+6
QDBATTR  EQU   QDB+4
QDBQDB   EQU   QDB
JSCBCSCB EQU   JSCBSEC1+68
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00039 EQU   JSCBSEC1+60
JSCBQMPI EQU   JSCBSEC1+56
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBPASS EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBSTEP EQU   JSCBSEC1+40
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBTCBP EQU   JSCBSEC1+20
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCBSHR  EQU   JSCBSEC1+8
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00038 EQU   IEZJSCB
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBMIHTI EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00037
UCBHALI  EQU   @NM00037
UCBRSV09 EQU   @NM00037
UCBRSV08 EQU   @NM00037
UCBRSV07 EQU   @NM00037
UCBRSV06 EQU   @NM00037
UCBRSV05 EQU   @NM00037
UCBRSV04 EQU   @NM00037
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00034 EQU   UCB
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00033 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00032 EQU   POOLSTAR
TIOEFSRT EQU   TIOENTRY+17
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOEJFCB EQU   TIOENTRY+12
TIOEDDNM EQU   TIOENTRY+4
TIOTREM  EQU   TIOELINK
TIOESYIN EQU   TIOELINK
TIOEQNAM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOTTERM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOEWTCT EQU   TIOERLOC
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
TIOELNGH EQU   TIOENTRY
TIOCSTEP EQU   TIOT1+8
TIOCNJOB EQU   TIOT1
@NM00031 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00030 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAWA EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00029 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00028 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
ASXBEND  EQU   ASXB+232
ASXBRV25 EQU   ASXB+228
ASXBRV24 EQU   ASXB+224
ASXBPT0E EQU   ASXB+220
ASXBCRB4 EQU   ASXBCASW+3
ASXBCRB3 EQU   ASXBCASW+2
ASXBCRB2 EQU   ASXBCASW+1
ASXBCR06 EQU   ASXBCRB1
ASXBCR05 EQU   ASXBCRB1
ASXBCR04 EQU   ASXBCRB1
ASXBCR03 EQU   ASXBCRB1
ASXBCR02 EQU   ASXBCRB1
ASXBCR01 EQU   ASXBCRB1
ASXBTFD  EQU   ASXBCRB1
ASXBPIP  EQU   ASXBCRB1
ASXBCTDC EQU   ASXB+212
ASXBTDCB EQU   ASXB+208
ASXBRV19 EQU   ASXB+204
ASXBSENV EQU   ASXBSECR+1
ASXBRV34 EQU   ASCBSFLG
ASXBRV33 EQU   ASCBSFLG
ASXBRV32 EQU   ASCBSFLG
ASXBRV31 EQU   ASCBSFLG
ASXBRV30 EQU   ASCBSFLG
ASXBRV29 EQU   ASCBSFLG
ASXBRV28 EQU   ASCBSFLG
ASXBRV27 EQU   ASCBSFLG
ASXBUSER EQU   ASXB+192
ASXBLSRB EQU   ASXBAEQ+20
ASXBFSRB EQU   ASXBAEQ+16
ASXBLRQE EQU   ASXBAEQ+12
ASXBFRQE EQU   ASXBAEQ+8
ASXBLIQE EQU   ASXBAEQ+4
ASXBFIQE EQU   ASXBAEQ
ASXBETSK EQU   ASXB+164
ASXBSIRB EQU   ASXB+160
ASXBPSWD EQU   ASXB+152
ASXBPRG  EQU   ASXB+136
ASXBRV26 EQU   ASXB+132
ASXBOUSB EQU   ASXB+128
ASXBDDR  EQU   ASXB+124
ASXBRCTD EQU   ASXB+120
ASXBRSMD EQU   ASXB+116
ASXBSPSA EQU   ASXB+112
ASXBFRWA EQU   ASXB+108
ASXBFLSA EQU   ASXB+36
ASXBIHSA EQU   ASXB+32
ASXBRV15 EQU   ASXB+28
ASXBRV14 EQU   ASXB+24
ASXBLWA  EQU   ASXB+20
ASXBMPST EQU   ASXB+16
ASXBRS00 EQU   ASXB+14
ASXBTCBS EQU   ASXB+12
ASXBFTCB EQU   ASXB+4
ASXBASXB EQU   ASXB
ASXBEGIN EQU   ASXB
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
ASVTEND  EQU   ASVT+528
ASVTAVAL EQU   ASVTENTY
ASVTAVAI EQU   ASVTFRST
ASVTRS00 EQU   ASVT+520
ASVTMAXU EQU   ASVT+516
ASVTASVT EQU   ASVT+512
ASVTBEGN EQU   ASVT+512
@NM00027 EQU   ASVT
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00026 EQU   CVTFIX+248
@NM00025 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
@NM00024 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00023 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00022 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00021 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00020 EQU   FLCFSA
@NM00019 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00018 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00017 EQU   FLCIOA
@NM00016 EQU   FLCMCLA+15
@NM00015 EQU   FLCMCLA+14
@NM00014 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00013 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00012 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00011 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00010 EQU   FLCPER
@NM00009 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00008 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00007 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00006 EQU   FLCPIILC
@NM00005 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00004 EQU   FLCSVILC
@NM00003 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00002 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00001 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00300 EQU   NODUMP
@RT00342 EQU   NODUMP
@RT00356 EQU   USERDUMP
@RF00693 EQU   @EL00002
@RF00707 EQU   @EL00003
@RF00715 EQU   @EL00003
@RF00729 EQU   @EL00004
@RF00756 EQU   @EL00005
@RF00776 EQU   @EL00006
@RF00792 EQU   @EL00007
@RF00808 EQU   @EL00008
@RF00824 EQU   @EL00009
@RF00848 EQU   @EL00010
@RF00866 EQU   @EL00011
@RF00881 EQU   @EL00012
@RF00890 EQU   @EL00013
@RF00898 EQU   @EL00014
@RF00915 EQU   @EL00015
@RF00924 EQU   @EL00016
@RF00982 EQU   @RC00970
@RC01140 EQU   @EL00022
@ENDDATA EQU   *
         END   IGTLCB,(C'PLS1214',0701,77093)
