TUAB     TITLE 'IGTUAB -- GET SAVEAREA/WORKAREA'
IGTUAB   CSECT ,
*/* * START OF SPECIFICATIONS ************************************** */
*/*                                                                  */
*/*   MODULE-NAME = IGTUAB                                           */
*/*                                                                  */
*/*   DESCRIPTIVE-NAME = GET SAVEAREA/WORKAREA (NOT INITIAL)         */
*/*                      (IGTYGSV MACRO SUPPORT)                     */
*/*                                                                  */
*/*   COPYRIGHT = NONE                                               */
*/*                                                                  */
*/*   STATUS = RELEASE 1, MODIFICATION LEVEL 0.                      */
*/*                                                                  */
*/*   FUNCTION = THIS ROUTINE WILL PROVIDE A SAVEAREA-WORKAREA       */
*/*       FOR THE CALLING ROUTINE.  AN ATTEMPT WILL BE MADE TO       */
*/*       ACQUIRE THE AREA FROM THE CURRENT APSM.  IF UNAVAILABLE,   */
*/*       A NEW APSM WILL BE OBTAINED TO HOLD THE NEW SAVEAREA.      */
*/*       THE STORAGE FOR THIS APSM WILL BE RELEASED WHEN THE        */
*/*       SUBROUTINE EXITS. THIS ROUTINE SUPPORTS THE IGTYGSV        */
*/*       MACRO WITH INITIAL=NO (THE DEFAULT) CODED.                 */
*/*       STORAGE MANAGEMENT IS LIFO (LAST ACQUIRED STORAGE MUST     */
*/*       BE INITIALLY RELEASED STORAGE).                            */
*/*                                                                  */
*/*   NOTES =                                                        */
*/*     THIS MACRO MUST SUPPORT PARAMETERS GENERATED BY THE          */
*/*     GETMAIN R,LV= MACRO (USED FOR PL/S WITH STACK OPTION)        */
*/*                                                                  */
*/*     DEPENDENCIES =                                               */
*/*        REGISTER 13 MUST POINT TO A VPSS EXTENDED SAVEAREA        */
*/*        (APSV) WHICH HAS BEEN CREATED BY IGTUAA, IGTUAB, OR       */
*/*        IGTUAF.                                                   */
*/*                                                                  */
*/*     RESTRICTIONS =                                               */
*/*        SINCE THIS ROUTINE MAY BE ENTERED IN EITHER PROBLEM OR    */
*/*        SUPERVISOR STATE AND IN ANY KEY, THIS PROGRAM MAY NOT     */
*/*        ISSUE PRIVLEDGED INSTRUCTIONS OR UPDATE SYSTEM CONTROL    */
*/*        BLOCKS.                                                   */
*/*                                                                  */
*/*     REGISTER-CONVENTIONS = STANDARD VPSS CONVENTIONS             */
*/*                                                                  */
*/*     PATCH-LABEL = APPATCH                                        */
*/*                                                                  */
*/*   MODULE-TYPE = CSECT                                            */
*/*                                                                  */
*/*     PROCESSOR = VS/2 ASSEMBLER                                   */
*/*                                                                  */
*/*     MODULE SIZE = SEE END OF ASSEMBLER LISTING                   */
*/*                                                                  */
*/*     ATTRIBUTES = RE-ENTRANT.                                     */
*/*                                                                  */
*/*   ENTRY-POINT = IGTUAB                                           */
*/*                                                                  */
*/*     PURPOSE = SAME AS FUNCTION                                   */
*/*                                                                  */
*/*     LINKAGE = ENTERED UNLOCKED, TASK MODE, ENABLED. MAY BE       */
*/*               IN ANY KEY AND EITHER PROBLEM OR SUPERVISOR        */
*/*               STATE.                                             */
*/*                                                                  */
*/*     INPUT = THE FOLLOWING REGISTERS ARE INITIALIZED ON ENTRY     */
*/*             (SET BY MACRO IGTYGSV INITIAL=NO) --                 */
*/*         REGISTER  0 - BYTE-0 IGNORED. STORAGE ACQUIRED FROM      */
*/*                       SAME SUBPOOL AS INITIAL=YES REQUESTOR.     */
*/*                       BYTES 1-3 CONTAIN THE REQUIRED LENGTH      */
*/*                       OF THE SAVEAREA/WORKAREA.                  */
*/*         REGISTER  1 - IGNORED.                                   */
*/*         REGISTER 12 - ADDRESS OF THE APCT.                       */
*/*         REGISTER 13 - ADDRESS OF CURRENT APSV (VPSS EXTENDED     */
*/*                       SAVEAREA).                                 */
*/*         REGISTER 14 - RETURN ADDRESS                             */
*/*         REGISTER 15 - ADDRESS OF THIS ROUTINE (IGTUAB).          */
*/*                                                                  */
*/*     OUTPUT = A NEW APSV AND APSC ARE CONSTRUCTED.  IF THE        */
*/*              REQUIRED STORAGE WAS NOT AVAILABLE IN THE CURRENT   */
*/*              APSM, A NEW STORAGE BLOCK WAS GETMAINED AND AN      */
*/*              APSM BUILT TO DESCRIBE IT.  THIS STORAGE WILL BE    */
*/*              FREED WHEN THE NEW SUBROUTINE EXITS.                */
*/*                                                                  */
*/*   EXIT-NORMAL = THE FOLLOWING REGISTERS ARE RETURNED TO THE      */
*/*                 CALLER --                                        */
*/*                 REGISTER  0 - UNPREDICTABLE                      */
*/*                 REGISTER  1 - ADDRESS OF NEW SAVEAREA            */
*/*                 REGISTER 2-13 - SAME AS ON INPUT                 */
*/*                 REGISTER 14 - RETURN ADDRESS                     */
*/*                 REGISTER 15 - UNPREDICTABLE                      */
*/*                                                                  */
*/*   EXIT-ERROR  = NONE.                                            */
*/*                                                                  */
*/*   EXTERNAL-REFERENCES = THE FOLLOWING ROUTINES AND               */
*/*                         CONTROL BLOCKS ARE USED.                 */
*/*                                                                  */
*/*     ROUTINES = NONE.                                             */
*/*                                                                  */
*/*     DATA-AREAS = NONE                                            */
*/*                                                                  */
*/*     CONTROL-BLOCKS =                                             */
*/*         APCT     - R                                             */
*/*         APSC     - R,       C                                    */
*/*         APSM     - R,       C                                    */
*/*         APSV     - R,       C                                    */
*/*                                                                  */
*/*   TABLES = NONE                                                  */
*/*                                                                  */
*/*   MACROS =                                                       */
*/*       IGTXEPLG                                                   */
*/*       GETMAIN                                                    */
*/*                                                                  */
*/*   CHANGE-ACTIVITY = NONE                                         */
*/*                                                                  */
*/*   MESSAGES = NONE                                                */
*/*                                                                  */
*/*   ABEND-CODES = NONE                                             */
*/*                                                                  */
*/* * END OF SPECIFICATIONS **************************************** */
         EJECT ,
IGTUAB   CSECT ,
         COPY  IGTXSYSO            DEFINE SCP CHARACTERISTICS
         SPACE 2
         USING APCT,APCTPTR        VPSS CONTROL TABLE
         USING APSV,APSVPTR        VPSS SAVE AREA
         USING IGTUAB,APENTRY      BASE REGISTER FOR IGTUAB
         B     STARTUP             SKIP IDENTIFIER
         DC    YL1(COREIDE-*-1)    LENGTH OF ID
         DC    C'IGTUAB'           CSECT NAME
         DC    C' &SYSDATE'        ASSEMBLY DATE
COREIDE  EQU   *                   END OF ID
         SPACE 2
STARTUP  DS    0H                  START OF CODE
         AH    RCORESZ,EXTRA       ADD EXTRA STOREAGE REQUIREMENT
*                                  * FOR APSC AND FOR
*                                  * DOUBLEWORD ROUND-UP
         N     RCORESZ,ROUND       ROUND TO DOUBLEWORD. ALSO
*                                  * ELIMINATE SUBPOOL
         L     APSCPTR,APSVAPSC    POINT TO CURRENT STORAGE
*                                  * MANAGEMENT CONTROL WORD
         USING APSC,APSCPTR        TELL ASSEMBLER
         AH    RCORESZ,APSCCRSZ    = REQUIRED_LN + CURRENT_LN
         CH    RCORESZ,APSCMXSZ    GREATER THAN MAXIMUM SIZE ?
         BH    NEWAPSM             YES, GO GET NEW APSM
         SPACE 3
*
** NEW SAVEAREA/WORKAREA FITS IN CURRENT EXTRA WORKAREA
** CONSTRUCT NEW SAVE AREA, AND ADJUST SIZE FIELDS.
*
         PUSH  USING               SAVE CURRENT USING VALUES
         DROP  APENTRY             CHANGING BASE REGISTER VALUE
*                                  * NOTE: NO BASE REGISTER USED
         LH    RCOREDIF,APSCCRSZ   CURRENT SAVEAREA SIZE
         SR    RCORESZ,RCOREDIF    RCORESZ = USER'S REQUEST SIZE
*                                  * + APSC SIZE, ROUNDED-
*                                  * UP TO DOUBLE WORD BOUNDARY
         SH    RCOREDIF,APSCMXSZ   SET RCOREDIF = APSCMXSZ-APSCCRSZ
         LCR   RCOREDIF,RCOREDIF   * = MAX SIZE OF NEW SAVEAREA-
*                                  * WORKAREA
         AH    APSCPTR,APSCCRSZ    POINT TO NEW APSC
         STH   RCOREDIF,APSCMXSZ   NEW MAXIMUM LENGTH
         STH   RCORESZ,APSCCRSZ    NEW CURRENT LENGTH
         SR    RTEMPA,RTEMPA       CLEAR PREVIOUS POINTER
         ST    RTEMPA,APSCAPSC     * SINCE FIRST APSC THIS APSV
         ST    APSCPTR,APSVAPSC-APSV+APSC+APSCLN SET NEW
*                                  * SAVEAREA STORAGE MANAGEMENT
*                                  * CONTROL WORD POINTER TO
*                                  * THIS APSC
         LA    RNEWAPSV,APSCLN(,APSCPTR) SKIP APSC.
*                                  * NOW POINTING TO NEW
*                                  * SAVEAREA/WORKAREA
         ST    RTEMPA,APSVFREE-APSV(,RNEWAPSV) * NO APSM BLOCKS
*                                  * TO FREE WHEN APSV FREED
         L     RTEMPA,APSVAPSM     NEW APSVAPSM IS SAME AS
         ST    RTEMPA,APSVAPSM-APSV(,RNEWAPSV) * PREVIOUS
*                                  * APSVAPSM SINCE USING
*                                  * SAME APSM.
*                                  * FREED.
*
** PROCESSING COMPLETE. REG 1 POINTS TO NEW SAVEAREA/WORKAREA.
** NON-STANDARD OS SAVEAREA FIELDS HAVE BEEN INITIALIZED.
*
         BR    APRETURN            RETURN TO CALLER
*                                  * REG 1 -> NEW SAVEAREA
         SPACE 2
         POP   USING               RE-ESTABLISH ASSEMBLER POINTERS
         EJECT ,
NEWAPSM  EQU   *                   CURRENT APSM WILL NOT
*                                  * HOLD NEW SAVEAREA/WORKAREA
*                                  * GETMAIN NEW BLOCK.
         SH    RCORESZ,APSCCRSZ    RESTORE REQUIRED SIZE
         DROP  APENTRY             MODIFYING OLD BASE
         L     RTEMPB,APSVAPSM     CURRENT APSM
         L     RTEMPB,APSMREGS-APSM(,RTEMPB) POINT TO REGISTER
*                                  * SAVE AREA
         STM   R2,R14,4*(R2-R0)(RTEMPB) SAVE INPUT REGISTERS
         LR    RREGSPTR,RTEMPB     SAVE REGISTER POINTER
         SPACE 3
         BALR  APCODE,0            ESTABLISH BASE REGISTER
         USING *,APCODE            TELL ASSEMBLER
*
         LR    RUSERREQ,RCORESZ    SAVE USER'S REQUEST SIZE
         AH    RCORESZ,CAPSMLN     ALLOW FOR HEADER INFORMATION
         L     RGETSIZE,APCTSMAD   MINIMUM REQUEST SIZE
         CLR   RCORESZ,RGETSIZE    COMPARE REQUESTED:MINIMUM SIZES
         BNH   USEAPCT             USE MAXIMUM OF THE
         LR    RGETSIZE,RCORESZ    * TWO VALUES
USEAPCT  EQU   *                   RGETSIZE = MAX
         A     RGETSIZE,CARNDPGE   ROUND UPWARD TO
         N     RGETSIZE,CRNDPGE    * PAGE BOUNDARY
         AIF   ('&VPSSSYS' NE 'MVS').VS1A IF MVS SCP, USE SVC 120
         L     RTEMPE,APSVAPSM     USE SUBPOOL FROM PREVIOUS
         IC    R15,APSMSIZE-APSM(RTEMPE) * APSM (MUST BE REG 15)
*                                  * (PROPOGATED FROM INITIAL=YES CALL)
         LR    RCORESZ,RGETSIZE    ALSO SET RCORESZ = MAX
         ICM   RGETSIZE,BYTE0,APSMSIZE-APSM(RTEMPE) SAVE SP FOR FREE
         GETMAIN RU,               UNCONDITIONALLY OBTAIN STORAGE      *
               LV=(0),             * REQUEST LENGTH IN REG 0           *
               SP=(15),            * SUBPOOL IN REGISTER 15            *
               BNDRY=PAGE          * START ON PAGE BOUNDARY
         AGO   .SYSA               SKIP VS1 GENERATE
.VS1A    ANOP  ,                   GENERATE VS1 GETMAIN
         L     RTEMPE,APSVAPSM     USE SUBPOOL FROM PREVIOUS
         ICM   RGETSIZE,BYTE0,APSMSIZE-APSM(RTEMPE) * APSM
*                                  * (PROPOGATED FROM INITIAL=YES CALL)
         LR    RCORESZ,RGETSIZE    ALSO SET RCORESZ = MAX
         GETMAIN R,LV=(0)          OBTAIN REQUESTED STORAGE
.SYSA    ANOP  ,                   GETMAIN GENERATED
*                                  * REG1 -> ACQUIRED AREA
*
** CONSTRUCT NEW APSM AND CHAIN TO PREVIOUS APSM CONTROL BLOCKS
** IN LIFO ORDER. THEN CONSTRUCT USER'S SAVE AREA - WORK AREA.
*
         USING APSM,APSMPTR        USE TO CONSTRUCT APSM
         ST    RGETSIZE,APSMSIZE   LENGTH OF APSM
         L     RTEMPC,ID           FILL-IN STORAGE IDENTIFIER
         ST    RTEMPC,APSMID       * ('APSM')
         SR    RTEMPC,RTEMPC       SHOW NO MORE APSM ENTRIES
         ST    RTEMPC,APSMAPSV     * OWNED BY THIS APSV
         ST    RTEMPC,APSMNEXT     SHOW END OF APSM CHAIN
         L     RTAPSM,APSVAPSM     POINT TO CURRENT APSM
         ST    RTAPSM,APSMPREV     CHAIN THE APSM ENTRIES
*                                  * TOGETHER (FORWARD & BACKWARD)
         ST    APSMPTR,APSMNEXT-APSM(,RTAPSM) * TOGETHER (LIFO)
*                                  * USE FORWARD & BACKWARD CHAINS
         ST    RREGSPTR,APSMREGS   PASS STORAGE MANAGEMENT REGISTER
*                                  * SAVEAREA POINTER TO NEW APSM.
*
** CONSTRUCT USER SAVEAREA-WORKAREA
*
         DROP  APSVPTR             PREVENT USE OF R13
         USING APSV-APSMLN0-APSCLN,APSMPTR SAVEAREA AFTER
*                                  * HEADER & APSC
         ST    APSMPTR,APSVAPSM    START OF APSM
         ST    APSMPTR,APSVFREE    FREE APSM AT SUBROUTINE TERMINATION
         LA    APSCPTR,APSMLN0(,APSMPTR) SKIP APSM HEADER
         USING APSV,APSVPTR        RE-ESTABLISH REG 13
         USING APSC,APSCPTR        NOW POINTING AT APSC
         SH    RGETSIZE,CAPSMLN    ELIMINATE HEADER SIZE
         STH   RGETSIZE,APSCMXSZ   LENGTH OF AVAILABLE AREA
         STH   RUSERREQ,APSCCRSZ   CURRENT LENGTH
         SR    RTEMPD,RTEMPD       FIRST NO PREVIOUS APSC
         ST    RTEMPD,APSCAPSC     * THIS APSV
         ST    APSCPTR,APSVAPSC-APSV+APSCLN(,APSCPTR) POINTER
*                                  * TO CURRENT APSC
         LA    RNEWAPSV,APSCLN(,APSCPTR) POINT TO NEW
*                                  * SAVEAREA/WORKAREA
         LM    R2,R14,4*(R2-R0)(RREGSPTR) RE-LOAD INPUT REGS
*                                  * REG 1 -> NEW SAVEAREA/WORKAREA
         BR    APRETURN            RETURN TO CALLER.
         EJECT ,
********************************************************************* *
**                                                                    *
**       CONSTANTS                                                    *
**                                                                    *
********************************************************************* *
         SPACE 2
CAPSMLN  DC    Y(APSMLN0)          LENGTH OF APSM HEADER
EXTRA    DC    Y(7+APSCLN)         ALLOW FOR APSC AND ROUND TO
ROUND    DC    A(X'00007FF8')      * MULTIPLE OF 8 (DOUBLEWORD) AND
*                                  * CLEAR THE SUBPOOL NUMBER.
ID       DC    CL4'APSM'           CONTROL BLOCK IN-CORE ID
         AIF   ('&VPSSSYS' NE 'MVS').VS1B IF MVS PAGE=4K
CARNDPGE DC    A(X'00000FFF')      FORCE UPWARD TO PAGE
CRNDPGE  DC    A(X'00007000')      FORCE TO PAGE
         AGO   .SYSB               SKIP VS1 CONSTANT GENERATES
.VS1B    ANOP  ,                   IF VS1, PAGE=2K
CARNDPGE DC    A(X'000007FF')      FORCE UPWARD TO PAGE
CRNDPGE  DC    A(X'00007800')      FORCE TO PAGE
.SYSB    ANOP  ,                   PAGE ROUND CONSTANTS GENERATED
         SPACE 5
********************************************************************* *
**                                                                    *
**       EQUATES                                                      *
**                                                                    *
********************************************************************* *
         SPACE 2
BYTE0    EQU   B'1000'             BYTE 0 OF WORD
BYTE1    EQU   B'0100'             BYTE 1 OF WORD
BYTE2    EQU   B'0010'             BYTE 2 OF WORD
BYTE3    EQU   B'0001'             BYTE 3 OF WORD
         SPACE 5
********************************************************************* *
**                                                                    *
**       DEFINE REQUESTED VPSS DSECTS                                 *
**                                                                    *
********************************************************************* *
         SPACE 2
         IGTXDSCT IGTXAPCT         CONTROL TABLE
         IGTXDSCT IGTXAPSC         STORAGE MANAGEMENT CONTROL WORD
         IGTXDSCT IGTXAPSM         STORAGE MANAGEMENT CONTROL BLOCK
         IGTXDSCT IGTXAPSV         SAVEAREA/WORKAREA
         EJECT ,
         IGTXEPLG ,                DSECTS AND REGISTER EQUATES
RCORESZ  EQU   R0                  REQUESTED DYNAMIC STORAGE SIZE
RTEMPC   EQU   R0                  TEMPORARY VALUE HOLDER
RTEMPD   EQU   R0                  TEMPORARY VALUE HOLDER
RTEMPE   EQU   R1                  TEMPORARY VALUE HOLDER
RNEWAPSV EQU   R1                  NEW APSV ADDRESS
*                                  * (RETURNED TO USER)
RREGSPTR EQU   R3                  POINTER TO SAVE REGISTERS
RGETSIZE EQU   R8                  GETMAIN SIZE (INCLUDES SUBPOOL)
RUSERREQ EQU   R9                  USER STORAGE REQUEST SIZE
RTAPSM   EQU   R10                 TEMPORARY POINTER TO APSM
RCOREDIF EQU   R15                 REMAINING EXTRA WORKAREA SPACE
RTEMPA   EQU   R15                 TEMPORARY VALUE HOLDER
RTEMPB   EQU   R15                 TEMPORARY VALUE HOLDER
         SPACE 5
         END   ,
