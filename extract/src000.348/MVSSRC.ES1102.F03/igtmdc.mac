TMDC     TITLE 'IGTMDC - PROCESS NTH ZERO CROSSING REQUEST             *
                        '
IGTMDC   CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'IGTMDC    77.231'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @07,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@07                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         IGTYGSV  R,LV=(0)
         LR    @06,@01                                          01S0001
         USING @DATD,@06                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         LM    @00,@01,20(@13)                                  01S0001
         ST    @06,8(,@13)                                      01S0001
         LR    @13,@06                                          01S0001
         MVC   @PC00001(4),0(@01)                               01S0001
*   APCWPTR=ADDR(DAPCW);            /* GET APCW PTR                  */
         L     APCWPTR,@PC00001                                 01S0046
*   RFY                                                         01S0047
*     APCW BASED(APCWPTR);          /* MAP APCW                      */
*   RFY                                                         01S0048
*     APEM BASED(ADDR(APCWEMSG));   /* MAP APEM - MSG FORMAT         */
*   INPUTPTR=APCWAPIN;              /* POINTER TO USER PARAMETER LIST*/
         L     INPUTPTR,APCWAPIN(,APCWPTR)                      01S0049
*   RFY                                                         01S0050
*     APCI BASED(ADDR(CITENTRY(1)));/* MAP APCI ON WORKAREA          */
*   RFY                                                         01S0051
*     APIN BASED(INPUTPTR);         /* MAP APIN - CALL FORMAT        */
*   RFY                                                         01S0052
*     APAL BASED(APCWAPAL);         /* MAP APAL - SWITCHES           */
*                                                               01S0052
*   /*****************************************************************/
*   /*                                                               */
*   /* ZERO CIT WORKAREA                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0053
*   APCIZDTA=APCIZDTA&&APCIZDTA;    /* ZERO NZC CIT WORKAREA         */
*                                                               01S0053
         LA    @09,CITENTRY                                     01S0053
         XC    APCIZDTA(36,@09),APCIZDTA(@09)                   01S0053
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD HEADER PORTION OF CIT ENTRY                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0054
*                                                               02S0054
*/********************************************************************/
*/*                                                                  */
*/* THIS SEGMENT INSERTS THE OP CODE AND ENTRY LENGTH(HALFWORDS)     */
*/* INTO THE APPROPRIATE SLOTS IN THE CIT ENTRY.                     */
*/*                                                                  */
*/********************************************************************/
*                                                               02S0054
*   DO;                             /* BUILD NZC CIT HEADER          */
*     APCIOPID=APCWAPOP;            /* INSERT OP CODE                */
         MVC   APCIOPID(2,@09),APCWAPOP(APCWPTR)                02S0055
*     APCIOPSZ=APALCISZ;            /* INSERT ENTRY LENGTH(HALFWORDS */
         L     @03,APCWAPAL(,APCWPTR)                           02S0056
         LH    @03,APALCISZ(,@03)                               02S0056
         STH   @03,APCIOPSZ(,@09)                               02S0056
*   END;                            /* END HEADER PROCESSING         */
*                                                               01S0058
*   /*****************************************************************/
*   /*                                                               */
*   /* VALIDATE RESULT INDEXES IVAL1 AND IVAL2. INSERT INTO CIT IF OK*/
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0058
*                                                               02S0058
*/********************************************************************/
*/*                                                                  */
*/* THIS SEGMENT VERIFIES THAT THE RESULT INDEXES IVAL1 AND IVAL2    */
*/* AS PASSED BY THE USER ARE VALID AND EXCLUSIVE. IF INCORRECT, THE */
*/* STANDARD VPSS ERROR INDICATORS ARE SET AND A RETURN IS MADE TO   */
*/* THE CALLER. IF OK, INSERT THE INDEX IDS INTO THE CIT ENTRY.      */
*/*                                                                  */
*/********************************************************************/
*                                                               02S0058
*   DO;                             /* VALIDATE & INSERT RESULT INDEX
*                                      IDS INTO CIT ENTRY            */
*                                                               02S0058
*     /***************************************************************/
*     /*                                                             */
*     /* ESTABLISH ADDRESSABILITY ON FIRST FOUR PARAMETERS. PARM1 IS */
*     /* IFUNC, PARM2 IS IUNIT, PARM3 IS IVAL1, PARM4 IS IVAL2. NOTE */
*     /* THAT THE IUNIT AND IFUNC HAVE ALREADY BEEN VALIDATED BY THE */
*     /* CALL ROUTER                                                 */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0059
*     RFY                                                       02S0059
*       PARM1 BASED(APINAP1);       /* APINAP1 POINTS TO IUNIT. PARM1
*                                      IS NOW IUNIT                  */
*     RFY                                                       02S0060
*       PARM2 BASED(APINAP2);       /* APINAP2 POINTS TO IFUNC. PARM2
*                                      IS NOW IFUNC                  */
*     RFY                                                       02S0061
*       PARM3 BASED(APINAP3);       /* APINAP3 POINTS TO IVAL1. PARM3
*                                      IS NOW IVAL1                  */
*     RFY                                                       02S0062
*       PARM4 BASED(APINAP4);       /* APINAP4 POINTS TO IFUNC. PARM4
*                                      IS NOW IVAL2                  */
*                                                               02S0062
*     /***************************************************************/
*     /*                                                             */
*     /* VALIDATE IVAL1 - INSERT INTO CIT IF VALID                   */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0063
*     IF(PARM3<1)×(PARM3>15) THEN   /* VALIDITY CHECK IVAL1 RANGE    */
         L     @09,APINAP3(,INPUTPTR)                           02S0063
         L     @09,PARM3(,@09)                                  02S0063
         LTR   @09,@09                                          02S0063
         BNP   @RT00063                                         02S0063
         C     @09,@CF00109                                     02S0063
         BNH   @RF00063                                         02S0063
@RT00063 DS    0H                                               02S0064
*       DO;                         /* IVAL1 IS NOT A VALID INDEX ID
*                                      - SET ERROR INDICATORS        */
*         APCWRCN=APCCA018;         /* SET ERROR NUMBER FOR IVAL1 OUT
*                                      OF RANGE                      */
         MVI   APCWRCN(APCWPTR),X'12'                           02S0065
*         APEMMSGN=APCMA018;        /* SET MESSAGE NUMBER FOR OUT OF
*                                      RANGE                         */
         LA    @09,112                                          02S0066
         ALR   @09,APCWPTR                                      02S0066
         MVC   APEMMSGN(4,@09),@CF00089                         02S0066
*         APEMVALN=APCMK038;        /* SET KEYWORD NUMBER FOR IVAL1  */
         MVC   APEMVALN(4,@09),@CF00208                         02S0067
*         CALL NZCERR;              /* NZCERR TO SET COMMON FLAGS AND
*                                      INDICATORS                    */
         BAL   @14,NZCERR                                       02S0068
*         RETURN;                   /* RETURN TO CALLER              */
@EL00001 L     @13,4(,@13)                                      02S0069
@EF00001 L     @00,@SIZDATD                                     02S0069
         LR    @01,@06                                          02S0069
         IGTYFSV  R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                  02S0069
         BR    @14                                              02S0069
*       END;                        /* END INVALID IVAL1 PROCESSING  */
*     ELSE                          /* IVAL1 IS VALID INDEX ID       */
*       APCIZX1=PARM3;              /* INSERT IVAL1 INTO CIT ENTRY   */
*                                                               02S0071
@RF00063 LA    @09,CITENTRY                                     02S0071
         L     @03,APINAP3(,INPUTPTR)                           02S0071
         L     @03,PARM3(,@03)                                  02S0071
         STH   @03,APCIZX1(,@09)                                02S0071
*     /***************************************************************/
*     /*                                                             */
*     /* VALIDATE IVAL2 - INSERT INTO CIT IF VALID                   */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0072
*     IF(PARM4<1)×(PARM4>15) THEN   /* VALIDITY CHECK IVAL2 RANGE    */
         L     @09,APINAP4(,INPUTPTR)                           02S0072
         L     @09,PARM4(,@09)                                  02S0072
         LTR   @09,@09                                          02S0072
         BNP   @RT00072                                         02S0072
         C     @09,@CF00109                                     02S0072
         BNH   @RF00072                                         02S0072
@RT00072 DS    0H                                               02S0073
*       DO;                         /* IVAL2 IS NOT A VALID INDEX ID
*                                      - SET ERROR INDICATORS        */
*         APCWRCN=APCCA019;         /* SET ERROR NUMBER FOR IVAL2 OUT
*                                      OF RANGE                      */
         MVI   APCWRCN(APCWPTR),X'13'                           02S0074
*         APEMMSGN=APCMA019;        /* SET MESSAGE NUMBER FOR OUT OF
*                                      RANGE                         */
         LA    @09,112                                          02S0075
         ALR   @09,APCWPTR                                      02S0075
         MVC   APEMMSGN(4,@09),@CF00089                         02S0075
*         APEMVALN=APCMK039;        /* SET KEYWORD NUMBER FOR IVAL2  */
         MVC   APEMVALN(4,@09),@CF00210                         02S0076
*         CALL NZCERR;              /* NZCERR TO SET COMMON FLAGS AND
*                                      INDICATORS                    */
         BAL   @14,NZCERR                                       02S0077
*         RETURN;                   /* RETURN TO CALLER              */
         B     @EL00001                                         02S0078
*       END;                        /* END INVALID IVAL2 PROCESSING  */
*     ELSE                          /* IVAL2 IS VALID INDEX ID       */
*       IF(PARM4=PARM3) THEN        /* IF IVAL2 = IVAL1, THE CALL IS
*                                      IN ERROR SINCE RESULTS ARE
*                                      RETURNED TO THESE INDEXES     */
@RF00072 L     @09,APINAP4(,INPUTPTR)                           02S0080
         L     @03,APINAP3(,INPUTPTR)                           02S0080
         CLC   PARM4(4,@09),PARM3(@03)                          02S0080
         BNE   @RF00080                                         02S0080
*         DO;                       /* ERROR - IVAL2 = IVAL1, SET
*                                      ERROR INDICATORS FOR IVAL2
*                                      INVALID VALUE                 */
*           APCWRCN=APCCA023;       /* SET RETURN CODE NUMBER FOR
*                                      IVAL2 INVALID VALUE           */
         MVI   APCWRCN(APCWPTR),X'17'                           02S0082
*           APEMMSGN=APCMA023;      /* SET MSG. NO. FOR INVALID VALUE*/
         LA    @09,112                                          02S0083
         ALR   @09,APCWPTR                                      02S0083
         MVC   APEMMSGN(4,@09),@CF00040                         02S0083
*           APEMVALN=APCMK039;      /* SET KYWD. NO. FOR IVAL2       */
         MVC   APEMVALN(4,@09),@CF00210                         02S0084
*           CALL NZCERR;            /* NZCERR SETS COMMON FLAGS &
*                                      VALUES                        */
         BAL   @14,NZCERR                                       02S0085
*           RETURN;                 /* RETURN TO CALLER              */
         B     @EL00001                                         02S0086
*         END;                      /* END IVAL2 = IVAL1 ERROR  02S0087
*                                      PROCESSING                    */
*       ELSE                        /* GOOD INDEXES - IVAL2 NE IVAL1 */
*         APCIZX2=PARM4;            /* MOVE IVAL2 FROM USER PARAMETER
*                                      LIST TO CIT                   */
@RF00080 LA    @09,CITENTRY                                     02S0088
         L     @03,APINAP4(,INPUTPTR)                           02S0088
         L     @03,PARM4(,@03)                                  02S0088
         STH   @03,APCIZX2(,@09)                                02S0088
*   END;                            /* END RESULT INDEX PROCESSING   */
*                                                               01S0090
*   /*****************************************************************/
*   /*                                                               */
*   /* BUMP INPUT POINTER TO ACCESS NEXT FOUR PARAMETERS. PARM1 WILL */
*   /* CONTAIN IFMX - X VECTOR FORMAT SPECIFICATION. PARM2 WILL      */
*   /* CONTAIN XARRV - X VECTOR BULK STORE ADDRESS. PARM3 WILL       */
*   /* CONTAIN ICTXV - X VECTOR LENGTH. PARM4 WILL POINT TO EITHER   */
*   /* XARRVX - BULK STORE ADDRESS INDEX, ICTXX - X VECTOR COUNT     */
*   /* INDEX, OR IFMU - U VECTOR FORMAT SPECIFICATION DEPENDING ON   */
*   /* WHAT IS SPECIFIED IN IFMX.                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0090
*   INPUTPTR=INPUTPTR+16;           /* BUMP INPUT POINTER - NOW 01S0090
*                                      POINTS TO 5TH PARAMETER - IFMX*/
*                                                               01S0090
         AL    INPUTPTR,@CF00111                                01S0090
*   /*****************************************************************/
*   /*                                                               */
*   /* VALIDATE X VECTOR PARAMETERS AND BUILD X VECTOR PORTION OF CIT*/
*   /* ENTRY IF ALL PARAMETERS ARE VALID                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0091
*                                                               02S0091
*/********************************************************************/
*/*                                                                  */
*/* THIS SEGMENT VERIFIES INPUT PARAMETERS WHICH APPLY TO THE X      */
*/* VECTOR AND INSERTS THE APPROPRIATE VALUES INTO THE NZC CIT ENTRY */
*/*                                                                  */
*/********************************************************************/
*                                                               02S0091
*   DO;                             /* VALIDATE & INSERT X VECTOR
*                                      PARMS INTO CIT ENTRY          */
*     RFY                                                       02S0092
*       IFMFMT BASED(ADDR(PARM1));  /* MAP IFMX                      */
*                                                               02S0092
*     /***************************************************************/
*     /*                                                             */
*     /* VERIFY NO INVALID BITS ARE SET IN IFMX FOR THIS OPERATION   */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0093
*     IF((DELTANDX=ON)&(APALXFXD=OFF))×((COUNTNDX=ON)&(APALXFXC=OFF))×(
*         (STARTNDX=ON)&(APALXFXS=OFF))×((APALXFSO=OFF)&(FORCENEG=ON×
*         REVSIGN=ON×FORCEPOS=ON))×((FXPTTRUE=ON)&(APALXFFT=OFF))×((
*         FXPTTWOS=ON)&(APALXFFX=OFF)) THEN/* DETERMINE IF INVALID
*                                      BITS ARE SET IN IFMX USING THE
*                                      SWITCHES SET IN APAL FOR NZC  */
         L     @09,APINAP1(,INPUTPTR)                           02S0093
         TM    DELTANDX(@09),B'10000000'                        02S0093
         BNO   @GL00007                                         02S0093
         L     @09,APCWAPAL(,APCWPTR)                           02S0093
         TM    APALXFXD(@09),B'00000001'                        02S0093
         BZ    @RT00093                                         02S0093
@GL00007 L     @09,APINAP1(,INPUTPTR)                           02S0093
         TM    COUNTNDX(@09),B'01000000'                        02S0093
         BNO   @GL00006                                         02S0093
         L     @09,APCWAPAL(,APCWPTR)                           02S0093
         TM    APALXFXC(@09),B'00000010'                        02S0093
         BZ    @RT00093                                         02S0093
@GL00006 L     @09,APINAP1(,INPUTPTR)                           02S0093
         TM    STARTNDX(@09),B'00100000'                        02S0093
         BNO   @GL00005                                         02S0093
         L     @09,APCWAPAL(,APCWPTR)                           02S0093
         TM    APALXFXS(@09),B'00000100'                        02S0093
         BZ    @RT00093                                         02S0093
@GL00005 L     @09,APCWAPAL(,APCWPTR)                           02S0093
         TM    APALXFSO(@09),B'00001000'                        02S0093
         BNZ   @GL00004                                         02S0093
         L     @09,APINAP1(,INPUTPTR)                           02S0093
         TM    FORCENEG(@09),B'00011100'                        02S0093
         BNZ   @RT00093                                         02S0093
@GL00004 L     @09,APINAP1(,INPUTPTR)                           02S0093
         TM    FXPTTRUE(@09),B'00000010'                        02S0093
         BNO   @GL00003                                         02S0093
         L     @09,APCWAPAL(,APCWPTR)                           02S0093
         TM    APALXFFT(@09),B'00100000'                        02S0093
         BZ    @RT00093                                         02S0093
@GL00003 L     @09,APINAP1(,INPUTPTR)                           02S0093
         TM    FXPTTWOS(@09),B'00000001'                        02S0093
         BNO   @RF00093                                         02S0093
         L     @09,APCWAPAL(,APCWPTR)                           02S0093
         TM    APALXFFX(@09),B'01000000'                        02S0093
         BNZ   @RF00093                                         02S0093
@RT00093 DS    0H                                               02S0094
*       DO;                         /* IFMX IS INVALID - SET ERROR
*                                      INDICATORS AND RETURN         */
*         APCWRCN=APCCA013;         /* SET ERROR NUMBER FOR IFMX
*                                      INVALID                       */
         MVI   APCWRCN(APCWPTR),X'0D'                           02S0095
*         APEMMSGN=APCMA013;        /* SET MESSAGE NUMBER FOR INVALID
*                                      VALUE                         */
         LA    @09,112                                          02S0096
         ALR   @09,APCWPTR                                      02S0096
         MVC   APEMMSGN(4,@09),@CF00040                         02S0096
*         APEMVALN=APCMK023;        /* SET KEYWORD NUMBER FOR IFMX   */
         MVC   APEMVALN(4,@09),@CF00125                         02S0097
*         CALL NZCERR;              /* NZCERR TO SET COMMON FLAGS AND
*                                      INDICATORS                    */
         BAL   @14,NZCERR                                       02S0098
*         RETURN;                   /* RETURN TO CALLER              */
         B     @EL00001                                         02S0099
*       END;                        /* END INVALID IFMX PROCESSING   */
*     ELSE                                                      02S0101
*       ;                           /* IFMX IS OK                    */
*                                                               02S0101
@RF00093 DS    0H                                               02S0102
*     /***************************************************************/
*     /*                                                             */
*     /* SET APPROPRIATE FLAGS IN CIT FOR IFMX FLAGS                 */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0102
*     DO;                           /* SET FORMAT SPECIFICATION FLAGS*/
*       IF STARTNDX=ON THEN         /* IS START INDEX USE INDICATED? */
         L     @09,APINAP1(,INPUTPTR)                           02S0103
         TM    STARTNDX(@09),B'00100000'                        02S0103
         BNO   @RF00103                                         02S0103
*         USESTART=ON;              /* YES - SET FLAG                */
         OI    USESTART,B'10000000'                             02S0104
*       ELSE                        /* START INDEX NOT USED          */
*         USESTART=OFF;             /* CLEAR FLAG                    */
         B     @RC00103                                         02S0105
@RF00103 NI    USESTART,B'01111111'                             02S0105
*       IF COUNTNDX=ON THEN         /* IS COUNT INDEX USE INDICATED? */
@RC00103 L     @09,APINAP1(,INPUTPTR)                           02S0106
         TM    COUNTNDX(@09),B'01000000'                        02S0106
         BNO   @RF00106                                         02S0106
*         USECOUNT=ON;              /* YES - SET FLAG                */
         OI    USECOUNT,B'10000000'                             02S0107
*       ELSE                        /* COUNT INDEX NOT USED          */
*         USECOUNT=OFF;             /* CLEAR FLAG                    */
         B     @RC00106                                         02S0108
@RF00106 NI    USECOUNT,B'01111111'                             02S0108
*       IF FORCENEG=ON THEN         /* IS FORCE NEGATIVE REQUESTED   */
@RC00106 L     @09,APINAP1(,INPUTPTR)                           02S0109
         TM    FORCENEG(@09),B'00010000'                        02S0109
         BNO   @RF00109                                         02S0109
*         APCIZFN1=ON;              /* YES - SET BIT IN CIT          */
         LA    @09,CITENTRY                                     02S0110
         OI    APCIZFN1(@09),B'00100000'                        02S0110
*       IF REVSIGN=ON THEN          /* IS REVERSE SIGN REQUESTED?    */
@RF00109 L     @09,APINAP1(,INPUTPTR)                           02S0111
         TM    REVSIGN(@09),B'00001000'                         02S0111
         BNO   @RF00111                                         02S0111
*         APCIZRS1=ON;              /* YES - SET BIT IN CIT          */
         LA    @09,CITENTRY                                     02S0112
         OI    APCIZRS1(@09),B'10000000'                        02S0112
*       IF FORCEPOS=ON THEN         /* IS FORCE POSITIVE REQUESTED   */
@RF00111 L     @09,APINAP1(,INPUTPTR)                           02S0113
         TM    FORCEPOS(@09),B'00000100'                        02S0113
         BNO   @RF00113                                         02S0113
*         APCIZFP1=ON;              /* YES - SET BIT IN CIT          */
         LA    @09,CITENTRY                                     02S0114
         OI    APCIZFP1(@09),B'01000000'                        02S0114
*       IF FXPTTRUE=ON THEN         /* IS X FIXED POINT SIGNED TRUE? */
@RF00113 L     @09,APINAP1(,INPUTPTR)                           02S0115
         TM    FXPTTRUE(@09),B'00000010'                        02S0115
         BNO   @RF00115                                         02S0115
*         APCIZST1=ON;              /* YES - SET BIT IN CIT          */
         LA    @09,CITENTRY                                     02S0116
         OI    APCIZST1(@09),B'00000100'                        02S0116
*       IF FXPTTWOS=ON THEN         /* IS X FIXED POINT 2'S COMP?    */
@RF00115 L     @09,APINAP1(,INPUTPTR)                           02S0117
         TM    FXPTTWOS(@09),B'00000001'                        02S0117
         BNO   @RF00117                                         02S0117
*         APCIZTC1=ON;              /* YES - SET BIT IN CIT          */
         LA    @09,CITENTRY                                     02S0118
         OI    APCIZTC1(@09),B'00001000'                        02S0118
*     END;                          /* END FORMAT SPECIFICATION 02S0119
*                                      PROCESSING                    */
*                                                               02S0119
@RF00117 DS    0H                                               02S0120
*     /***************************************************************/
*     /*                                                             */
*     /* RESOLVE AND INSERT X VECTOR BULK STORE ADDRESS INTO CIT     */
*     /* ENTRY IF VALID                                              */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0120
*     DO;                           /* RESOLVE AND SET X BULK STORE
*                                      ADDRESS                       */
*       APCIZBS1=APINAP2;           /* X BULK STORE ADDR PTR TO CIT  */
         LA    @09,CITENTRY                                     02S0121
         L     @03,APINAP2(,INPUTPTR)                           02S0121
         ST    @03,APCIZBS1(,@09)                               02S0121
*       CALL APCVZMIF(APCIZBS1,RSOLVERR);/* RESOLVE XARRV            */
         LA    @09,APCIZBS1(,@09)                               02S0122
         ST    @09,@AL00001                                     02S0122
         LA    @09,RSOLVERR                                     02S0122
         ST    @09,@AL00001+4                                   02S0122
         L     @15,APCTZMIF(,APCTPTR)                           02S0122
         LA    @01,@AL00001                                     02S0122
         BALR  @14,@15                                          02S0122
*       IF RSOLVERR^=0 THEN         /* IF MIF DETECTED AN ERROR,
*                                      DETERMINE THE TYPE OF ERROR
*                                      AND SET ERROR INDICATORS      */
         L     @09,RSOLVERR                                     02S0123
         LTR   @09,@09                                          02S0123
         BZ    @RF00123                                         02S0123
*         DO;                       /* SET ERROR INDICATORS FOR BAD
*                                      XARRV                         */
*           APEMVALN=APCMK024;      /* SET KEYWORD NUMBER FOR XARRV  */
         MVC   APEMVALN+112(4,APCWPTR),@CF00055                 02S0125
*           CALL NZCERR;            /* SET COMMON ERROR FLAGS        */
         BAL   @14,NZCERR                                       02S0126
*           IF RSOLVERR=BDYERROR THEN/* BOUNDARY ERROR               */
         CLC   RSOLVERR(4),@CF00046                             02S0127
         BNE   @RF00127                                         02S0127
*             DO;                   /* SET ERROR INDICATORS FOR XARRV
*                                      NOT ON A WORD BOUNDARY        */
*               APCWRCN=APCCA016;   /* SET ERROR NUMBER FOR XARRV NOT
*                                      A WORD BOUNDARY               */
         MVI   APCWRCN(APCWPTR),X'10'                           02S0129
*               APEMMSGN=APCMA016;  /* SET MESSAGE NUMBER FOR NOT A
*                                      WORD BOUNDARY                 */
         MVC   APEMMSGN+112(4,APCWPTR),@CF00421                 02S0130
*             END;                  /* END OF SEGMENT                */
*           ELSE                    /* CHECK FOR RANGE ERROR         */
*             IF RSOLVERR=RNGERROR THEN/* RANGE ERROR?               */
         B     @RC00127                                         02S0132
@RF00127 CLC   RSOLVERR(4),@CF00066                             02S0132
         BNE   @RF00132                                         02S0132
*               DO;                 /* SET UP FOR XARRV OUT OF RANGE */
*                 APCWRCN=APCCA021; /* SET ERROR NUMBER FOR XARRV OUT
*                                      OF RANGE                      */
         MVI   APCWRCN(APCWPTR),X'15'                           02S0134
*                 APEMMSGN=APCMA021;/* SET MESSAGE NUMBER FOR OUT OF
*                                      RANGE                         */
         MVC   APEMMSGN+112(4,APCWPTR),@CF00089                 02S0135
*               END;                /* END OF SEGMENT                */
*             ELSE                                              02S0137
*               ;                   /* NULL                          */
@RF00132 DS    0H                                               02S0138
*           RETURN;                 /* RETURN TO CALLER              */
         B     @EL00001                                         02S0138
*         END;                      /* END OF SEGMENT                */
*       ELSE                                                    02S0140
*         ;                         /* NULL - NO MIF ERROR           */
@RF00123 DS    0H                                               02S0141
*     END;                          /* END X VECTOR BULK STORE  02S0141
*                                      ADDRESS PROCESSING            */
*                                                               02S0141
*     /***************************************************************/
*     /*                                                             */
*     /* INSERT X VECTOR LENGTH AND ELEMENT SPACING INTO CIT. VERIFY */
*     /* LENGTH IS IN RANGE (-32768 <-> +65536 ). SPACING IS ALWAYS  */
*     /* ONE ELEMENT.                                        @ZA25370*/
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0142
*     DO;                           /* SET X LENGTH AND DELTA        */
*       IF(PARM3<-32768)×           /* VERIFY RANGE          @ZA25370*/
*           (PARM3>65536) THEN      /* OF ICTX               @ZA25370*/
         L     @09,APINAP3(,INPUTPTR)                           02S0143
         L     @09,PARM3(,@09)                                  02S0143
         C     @09,@CF01713                                     02S0143
         BL    @RT00143                                         02S0143
         C     @09,@CF01714                                     02S0143
         BNH   @RF00143                                         02S0143
@RT00143 DS    0H                                               02S0144
*         DO;                       /* VECTOR LENGTH IN ERROR - SET
*                                      ERROR INDICATORS FOR ICTX OUT
*                                      OF RANGE                      */
*           APCWRCN=APCCA025;       /* SET RETURN CODE NUMBER FOR
*                                      ICTX OUT OF RANGE             */
         MVI   APCWRCN(APCWPTR),X'19'                           02S0145
*           APEMMSGN=APCMA025;      /* SET MSG. NO. FOR OUT OF RANGE */
         LA    @09,112                                          02S0146
         ALR   @09,APCWPTR                                      02S0146
         MVC   APEMMSGN(4,@09),@CF00089                         02S0146
*           APEMVALN=APCMK025;      /* SET KYWD. NO. FOR ICTX        */
         MVC   APEMVALN(4,@09),@CF00128                         02S0147
*           CALL NZCERR;            /* NZCERR SETS COMMON ERROR FLAGS
*                                      AND VALUES                    */
         BAL   @14,NZCERR                                       02S0148
*           RETURN;                 /* RETURN TO CALLER              */
         B     @EL00001                                         02S0149
*         END;                      /* END ICTX RANGE ERROR     02S0150
*                                      PROCESSING                    */
*       ELSE                        /* ICTX IS IN VALID RANGE        */
*         APCIZNB1=PARM3;           /* MOVE ICTX FROM USER PARAMETER
*                                      LIST TO WORKING CIT ENTRY     */
@RF00143 LA    @09,CITENTRY                                     02S0151
         L     @03,APINAP3(,INPUTPTR)                           02S0151
         L     @03,PARM3(,@03)                                  02S0151
         STH   @03,APCIZNB1(,@09)                               02S0151
*       APCIZDL1=1;                 /* X VECTOR DELTA(SPACING)       */
         MVC   APCIZDL1(2,@09),@CH00046                         02S0152
*     END;                          /* END LENGTH,DELTA PROCESSING   */
*                                                               02S0153
*     /***************************************************************/
*     /*                                                             */
*     /* USING IFMX, DETERMINE IF BULK STORE START ADDRESS AND LENGTH*/
*     /* INDEXES ARE TO BE USED. IF SO, VALIDITY CHECK THEM INSERT IN*/
*     /* CIT ENTRY IF VALID                                          */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0154
*     DO;                           /* CHECK IF BULK STORE ADDRESS
*                                      AND COUNT INDEX TO BE USED,
*                                      VERIFY THEM IF USED AND STORE
*                                      IN CIT                        */
*       IF USESTART=ON THEN         /* IS USE OF START INDEX    02S0155
*                                      SPECIFIED?                    */
         TM    USESTART,B'10000000'                             02S0155
         BNO   @RF00155                                         02S0155
*         IF(PARM4<0)×(PARM4>15) THEN/* YES - VALIDATE               */
         L     @09,APINAP4(,INPUTPTR)                           02S0156
         L     @09,PARM4(,@09)                                  02S0156
         LTR   @09,@09                                          02S0156
         BM    @RT00156                                         02S0156
         C     @09,@CF00109                                     02S0156
         BNH   @RF00156                                         02S0156
@RT00156 DS    0H                                               02S0157
*           DO;                     /* XARRVX - BULK STORE ADDRESS
*                                      INDEX INVALID - SET ERROR
*                                      INDICATORS AND RETURN         */
*             APCWRCN=APCCA006;     /* SET ERROR NUMBER FOR XARRVX
*                                      OUT OF RANGE                  */
         MVI   APCWRCN(APCWPTR),X'06'                           02S0158
*             APEMMSGN=APCMA006;    /* SET MESSAGE NUMBER FOR OUT OF
*                                      RANGE                         */
         LA    @09,112                                          02S0159
         ALR   @09,APCWPTR                                      02S0159
         MVC   APEMMSGN(4,@09),@CF00089                         02S0159
*             APEMVALN=APCMK027;    /* SET KEYWORD NUMBER FOR XARRVX */
         MVC   APEMVALN(4,@09),@CF00132                         02S0160
*             CALL NZCERR;          /* NZCERR TO SET COMMON FLAGS AND
*                                      INDICATORS                    */
         BAL   @14,NZCERR                                       02S0161
*             RETURN;               /* RETURN TO CALLER              */
         B     @EL00001                                         02S0162
*           END;                    /* END INVALID XARRVX PROCESSING */
*         ELSE                      /* USE OF START INDEX IS    02S0164
*                                      REQUESTED AND THE INDEX IS
*                                      VALID                         */
*           DO;                     /* STORE XARRVX IN CIT ENTRY AND
*                                      BUMP INPUT POINTER            */
@RF00156 DS    0H                                               02S0165
*             APCIZXB1=PARM4;       /* STORE XARRVX IN CIT ENTRY     */
         LA    @09,CITENTRY                                     02S0165
         L     @03,APINAP4(,INPUTPTR)                           02S0165
         L     @03,PARM4(,@03)                                  02S0165
         STH   @03,APCIZXB1(,@09)                               02S0165
*             INPUTPTR=INPUTPTR+4;  /* PARM4 NOW HOLDS TO ICTXX IF
*                                      PRESENT                       */
         AL    INPUTPTR,@CF00075                                02S0166
*           END;                                                02S0167
*       ELSE                                                    02S0168
*         ;                         /* START INDEX NOT TO BE USED    */
@RF00155 DS    0H                                               02S0169
*       IF USECOUNT=ON THEN         /* IS USE OF COUNT INDEX    02S0169
*                                      SPECIFIED?                    */
         TM    USECOUNT,B'10000000'                             02S0169
         BNO   @RF00169                                         02S0169
*         IF(PARM4<0)×(PARM4>15) THEN/* YES - VALIDATE               */
         L     @09,APINAP4(,INPUTPTR)                           02S0170
         L     @09,PARM4(,@09)                                  02S0170
         LTR   @09,@09                                          02S0170
         BM    @RT00170                                         02S0170
         C     @09,@CF00109                                     02S0170
         BNH   @RF00170                                         02S0170
@RT00170 DS    0H                                               02S0171
*           DO;                     /* ICTXX - VECTOR LENGTH INDEX IS
*                                      INVALID - SET ERROR INDICATORS
*                                      AND RETURN                    */
*             APCWRCN=APCCA007;     /* SET ERROR NUMBER FOR ICTXX OUT
*                                      OF RANGE                      */
         MVI   APCWRCN(APCWPTR),X'07'                           02S0172
*             APEMMSGN=APCMA007;    /* SET MESSAGE NUMBER FOR OUT OF
*                                      RANGE                         */
         LA    @09,112                                          02S0173
         ALR   @09,APCWPTR                                      02S0173
         MVC   APEMMSGN(4,@09),@CF00089                         02S0173
*             APEMVALN=APCMK028;    /* SET KEYWORD NUMBER FOR ICTXX  */
         MVC   APEMVALN(4,@09),@CF00134                         02S0174
*             CALL NZCERR;          /* NZCERR TO SET COMMON FLAGS AND
*                                      INDICATORS                    */
         BAL   @14,NZCERR                                       02S0175
*             RETURN;               /* RETURN TO CALLER              */
         B     @EL00001                                         02S0176
*           END;                    /* END INVALID ICTXX PROCESSING  */
*         ELSE                      /* USE OF COUNT INDEX IS    02S0178
*                                      REQUESTED AND THE INDEX IS
*                                      VALID                         */
*           DO;                     /* STORE ICTXX IN CIT ENTRY AND
*                                      BUM INPUT POINTER             */
@RF00170 DS    0H                                               02S0179
*             APCIZXN1=PARM4;       /* STORE ICTXX IN CIT ENTRY      */
         LA    @09,CITENTRY                                     02S0179
         L     @03,APINAP4(,INPUTPTR)                           02S0179
         L     @03,PARM4(,@03)                                  02S0179
         STH   @03,APCIZXN1(,@09)                               02S0179
*             INPUTPTR=INPUTPTR+4;  /* PARM4 NOW HOLDS IFMU - IN ANY
*                                      CASE                          */
         AL    INPUTPTR,@CF00075                                02S0180
*           END;                                                02S0181
*       ELSE                                                    02S0182
*         ;                         /* COUNT INDEX NOT TO BE USED    */
@RF00169 DS    0H                                               02S0183
*     END;                          /* END X VECTOR INDEX PROCESSING */
*   END;                            /* END X VECTOR PROCESSING       */
*                                                               01S0185
*   /*****************************************************************/
*   /*                                                               */
*   /* SINCE WE HAVE REACHED THE BEGINNING EXAMPLE WHERE THE USER MAY*/
*   /* HAVE LESS THAN THE REQUIRED NUMBER OF PARAMETERS DUE TO USE OF*/
*   /* INDEXES, VERIFY MORE PARAMETERS EXIST. THE CALL ROUTER HAS    */
*   /* VERIFIED THAT WE HAVE HAD EVERYTHING WE NEED TO THIS POINT    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0185
*   IF APINAP4E=ON THEN             /* HAVE WE REACHED LAST PARM -
*                                      STILL NEED MORE               */
         TM    APINAP4E(INPUTPTR),B'10000000'                   01S0185
         BNO   @RF00185                                         01S0185
*     DO;                           /* TOO FEW PARAMTERS - SET ERROR
*                                      INDICATORS AND RETURN         */
*       APCWRCN=APCCA002;           /* SET ERROR NUMBER FOR INVALID
*                                      NUMBER OF PARAMETERS          */
         MVI   APCWRCN(APCWPTR),X'02'                           01S0187
*       APEMMSGN=APCMA002;          /* SET MESSAGE NUMBER FOR INVALID
*                                      NUMBER OF PARAMETERS          */
         MVC   APEMMSGN+112(4,APCWPTR),@CF00099                 01S0188
*       CALL NZCERR;                /* NZCERR TO SET COMMON FLAGS AND
*                                      ERROR INDICATORS              */
         BAL   @14,NZCERR                                       01S0189
*       RETURN;                     /* RETURN TO CALLER              */
         B     @EL00001                                         01S0190
*     END;                          /* END ERROR PROCESSING          */
*   ELSE                                                        01S0192
*     ;                             /* MORE PARAMETERS EXIST         */
*                                                               01S0192
@RF00185 DS    0H                                               01S0193
*   /*****************************************************************/
*   /*                                                               */
*   /* BUMP INPUT POINTER SO THAT PARM1 HOLDS IFMU, PARM2 HOLDS UARRV*/
*   /* AND PARM3 HOLDS UARRVX IF SPECIFIED IN IFMU                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0193
*   INPUTPTR=INPUTPTR+12;           /* BUMP TO U VECTOR PARAMETERS   */
*                                                               01S0193
         AL    INPUTPTR,@CF00080                                01S0193
*   /*****************************************************************/
*   /*                                                               */
*   /* VALIDATE U VECTOR PARAMETERS AND BUILD U VECTOR PORTION OF CIT*/
*   /* ENTRY IF ALL PARAMETERS ARE VALID                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0194
*                                                               02S0194
*/********************************************************************/
*/*                                                                  */
*/* THIS SEGMENT VERIFIES INPUT PARAMETERS WHICH APPLY TO THE U      */
*/* VECTOR AND INSERTS THE APPROPRIATE VALUES INTO THE NZC CIT ENTRY */
*/*                                                                  */
*/********************************************************************/
*                                                               02S0194
*   DO;                             /* VALIDATE & INSERT U VECTOR
*                                      PARMS INTO CIT ENTRY          */
*     RFY                                                       02S0195
*       IFMFMT BASED(ADDR(PARM1));  /* MAP IFMU                      */
*                                                               02S0195
*     /***************************************************************/
*     /*                                                             */
*     /* VERIFY NO INVALID BITS ARE SET IN IFMU FOR THIS OPERATION   */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0196
*     IF((DELTANDX=ON)&(APALUFXD=OFF))×((COUNTNDX=ON)&(APALUFXC=OFF))×(
*         (STARTNDX=ON)&(APALUFXS=OFF))×((APALUFSO=OFF)&(FORCENEG=ON×
*         REVSIGN=ON×FORCEPOS=ON))×((FXPTTRUE=ON)&(APALUFFT=OFF))×((
*         FXPTTWOS=ON)&(APALUFFX=OFF)) THEN/* DETERMINE IF INVALID
*                                      BITS ARE SET IN IFMU USING THE
*                                      SWITCHES SET IN APAL FOR NZC  */
         L     @09,APINAP1(,INPUTPTR)                           02S0196
         TM    DELTANDX(@09),B'10000000'                        02S0196
         BNO   @GL00021                                         02S0196
         L     @09,APCWAPAL(,APCWPTR)                           02S0196
         TM    APALUFXD(@09),B'00000001'                        02S0196
         BZ    @RT00196                                         02S0196
@GL00021 L     @09,APINAP1(,INPUTPTR)                           02S0196
         TM    COUNTNDX(@09),B'01000000'                        02S0196
         BNO   @GL00020                                         02S0196
         L     @09,APCWAPAL(,APCWPTR)                           02S0196
         TM    APALUFXC(@09),B'00000010'                        02S0196
         BZ    @RT00196                                         02S0196
@GL00020 L     @09,APINAP1(,INPUTPTR)                           02S0196
         TM    STARTNDX(@09),B'00100000'                        02S0196
         BNO   @GL00019                                         02S0196
         L     @09,APCWAPAL(,APCWPTR)                           02S0196
         TM    APALUFXS(@09),B'00000100'                        02S0196
         BZ    @RT00196                                         02S0196
@GL00019 L     @09,APCWAPAL(,APCWPTR)                           02S0196
         TM    APALUFSO(@09),B'00001000'                        02S0196
         BNZ   @GL00018                                         02S0196
         L     @09,APINAP1(,INPUTPTR)                           02S0196
         TM    FORCENEG(@09),B'00011100'                        02S0196
         BNZ   @RT00196                                         02S0196
@GL00018 L     @09,APINAP1(,INPUTPTR)                           02S0196
         TM    FXPTTRUE(@09),B'00000010'                        02S0196
         BNO   @GL00017                                         02S0196
         L     @09,APCWAPAL(,APCWPTR)                           02S0196
         TM    APALUFFT(@09),B'00100000'                        02S0196
         BZ    @RT00196                                         02S0196
@GL00017 L     @09,APINAP1(,INPUTPTR)                           02S0196
         TM    FXPTTWOS(@09),B'00000001'                        02S0196
         BNO   @RF00196                                         02S0196
         L     @09,APCWAPAL(,APCWPTR)                           02S0196
         TM    APALUFFX(@09),B'01000000'                        02S0196
         BNZ   @RF00196                                         02S0196
@RT00196 DS    0H                                               02S0197
*       DO;                         /* IFMU IS INVALID - SET ERROR
*                                      INDICATORS AND RETURN         */
*         APCWRCN=APCCA014;         /* SET ERROR NUMBER FOR IFMU
*                                      INVALID                       */
         MVI   APCWRCN(APCWPTR),X'0E'                           02S0198
*         APEMMSGN=APCMA014;        /* SET MESSAGE NUMBER FOR INVALID
*                                      VALUE                         */
         LA    @09,112                                          02S0199
         ALR   @09,APCWPTR                                      02S0199
         MVC   APEMMSGN(4,@09),@CF00040                         02S0199
*         APEMVALN=APCMK030;        /* SET KEYWORD NUMBER FOR IFMU   */
         MVC   APEMVALN(4,@09),@CF00421                         02S0200
*         CALL NZCERR;              /* NZCERR TO SET COMMON FLAGS AND
*                                      INDICATORS                    */
         BAL   @14,NZCERR                                       02S0201
*         RETURN;                   /* RETURN TO CALLER              */
         B     @EL00001                                         02S0202
*       END;                        /* END INVALID IFMU PROCESSING   */
*     ELSE                                                      02S0204
*       ;                           /* IFMU IS OK                    */
*                                                               02S0204
@RF00196 DS    0H                                               02S0205
*     /***************************************************************/
*     /*                                                             */
*     /* SET APPROPRIATE FLAGS IN CIT FOR IFMU FLAGS                 */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0205
*     DO;                           /* SET FORMAT SPECIFICATION FLAGS*/
*       IF STARTNDX=ON THEN         /* IS START INDEX USE INDICATED? */
         L     @09,APINAP1(,INPUTPTR)                           02S0206
         TM    STARTNDX(@09),B'00100000'                        02S0206
         BNO   @RF00206                                         02S0206
*         USESTART=ON;              /* YES - SET FLAG                */
         OI    USESTART,B'10000000'                             02S0207
*       ELSE                        /* START INDEX NOT USED          */
*         USESTART=OFF;             /* CLEAR FLAG                    */
         B     @RC00206                                         02S0208
@RF00206 NI    USESTART,B'01111111'                             02S0208
*       IF FORCENEG=ON THEN         /* IS FORCE NEGATIVE REQUESTED   */
@RC00206 L     @09,APINAP1(,INPUTPTR)                           02S0209
         TM    FORCENEG(@09),B'00010000'                        02S0209
         BNO   @RF00209                                         02S0209
*         APCIZFN2=ON;              /* YES - SET BIT IN CIT          */
         LA    @09,CITENTRY                                     02S0210
         OI    APCIZFN2(@09),B'00100000'                        02S0210
*       IF REVSIGN=ON THEN          /* IS REVERSE SIGN REQUESTED?    */
@RF00209 L     @09,APINAP1(,INPUTPTR)                           02S0211
         TM    REVSIGN(@09),B'00001000'                         02S0211
         BNO   @RF00211                                         02S0211
*         APCIZRS2=ON;              /* YES - SET BIT IN CIT          */
         LA    @09,CITENTRY                                     02S0212
         OI    APCIZRS2(@09),B'10000000'                        02S0212
*       IF FORCEPOS=ON THEN         /* IS FORCE POSITIVE REQUESTED   */
@RF00211 L     @09,APINAP1(,INPUTPTR)                           02S0213
         TM    FORCEPOS(@09),B'00000100'                        02S0213
         BNO   @RF00213                                         02S0213
*         APCIZFP2=ON;              /* YES - SET BIT IN CIT          */
         LA    @09,CITENTRY                                     02S0214
         OI    APCIZFP2(@09),B'01000000'                        02S0214
*       IF FXPTTRUE=ON THEN         /* IS U FIXED POINT SIGNED TRUE? */
@RF00213 L     @09,APINAP1(,INPUTPTR)                           02S0215
         TM    FXPTTRUE(@09),B'00000010'                        02S0215
         BNO   @RF00215                                         02S0215
*         APCIZST2=ON;              /* YES - SET BIT IN CIT          */
         LA    @09,CITENTRY                                     02S0216
         OI    APCIZST2(@09),B'00000100'                        02S0216
*       IF FXPTTWOS=ON THEN         /* IS U FIXED POINT 2'S COMP?    */
@RF00215 L     @09,APINAP1(,INPUTPTR)                           02S0217
         TM    FXPTTWOS(@09),B'00000001'                        02S0217
         BNO   @RF00217                                         02S0217
*         APCIZTC2=ON;              /* YES - SET BIT IN CIT          */
         LA    @09,CITENTRY                                     02S0218
         OI    APCIZTC2(@09),B'00001000'                        02S0218
*     END;                          /* END FORMAT SPECIFICATION 02S0219
*                                      PROCESSING                    */
*                                                               02S0219
@RF00217 DS    0H                                               02S0220
*     /***************************************************************/
*     /*                                                             */
*     /* RESOLVE AND INSERT U VECTOR BULK STORE ADDRESS INTO CIT     */
*     /* ENTRY IF VALID                                              */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0220
*     DO;                           /* RESOLVE AND SET U BULK STORE
*                                      ADDRESS                       */
*       IF APINAP1E=ON THEN         /* MORE PARAMETERS?              */
         TM    APINAP1E(INPUTPTR),B'10000000'                   02S0221
         BNO   @RF00221                                         02S0221
*         DO;                       /* NO - INVALID NUMBER OF   02S0222
*                                      PARAMETERS SET ERROR     02S0222
*                                      INDICATORS AND RETURN         */
*           APCWRCN=APCCA002;       /* SET ERROR NUMBER FOR INVALID
*                                      NUMBER OF PARAMETERS          */
         MVI   APCWRCN(APCWPTR),X'02'                           02S0223
*           APEMMSGN=APCMA002;      /* SET MESSAGE NUMBER FOR INVALID
*                                      NUMBER OF PARAMETERS          */
         MVC   APEMMSGN+112(4,APCWPTR),@CF00099                 02S0224
*           CALL NZCERR;            /* NZCERR TO SET COMMON ERROR
*                                      INDICATORS                    */
         BAL   @14,NZCERR                                       02S0225
*           RETURN;                 /* RETURN TO CALLER              */
         B     @EL00001                                         02S0226
*         END;                      /* END ERROR PROCESSING          */
*       ELSE                                                    02S0228
*         ;                         /* MORE PARAMETERS EXIST         */
@RF00221 DS    0H                                               02S0229
*       APCIZBS2=APINAP2;           /* U BULK STORE ADDR PTR TO CIT  */
         LA    @09,CITENTRY                                     02S0229
         L     @03,APINAP2(,INPUTPTR)                           02S0229
         ST    @03,APCIZBS2(,@09)                               02S0229
*       CALL APCVZMIF(APCIZBS2,RSOLVERR);/* RESOLVE UARRV            */
         LA    @09,APCIZBS2(,@09)                               02S0230
         ST    @09,@AL00001                                     02S0230
         LA    @09,RSOLVERR                                     02S0230
         ST    @09,@AL00001+4                                   02S0230
         L     @15,APCTZMIF(,APCTPTR)                           02S0230
         LA    @01,@AL00001                                     02S0230
         BALR  @14,@15                                          02S0230
*       IF RSOLVERR^=0 THEN         /* IF MIF DETECTED AN ERROR,
*                                      DETERMINE THE TYPE OF ERROR
*                                      AND SET ERROR INDICATORS      */
         L     @09,RSOLVERR                                     02S0231
         LTR   @09,@09                                          02S0231
         BZ    @RF00231                                         02S0231
*         DO;                       /* SET ERROR INDICATORS FOR BAD
*                                      UARRV                         */
*           APEMVALN=APCMK031;      /* SET KEYWORD NUMBER FOR UARRV  */
         MVC   APEMVALN+112(4,APCWPTR),@CF00041                 02S0233
*           CALL NZCERR;            /* SET COMMON ERROR FLAGS        */
         BAL   @14,NZCERR                                       02S0234
*           IF RSOLVERR=BDYERROR THEN/* BOUNDARY ERROR               */
         CLC   RSOLVERR(4),@CF00046                             02S0235
         BNE   @RF00235                                         02S0235
*             DO;                   /* SET ERROR INDICATORS FOR UARRV
*                                      NOT ON A WORD BOUNDARY        */
*               APCWRCN=APCCA017;   /* SET ERROR NUMBER FOR UARRV NOT
*                                      A WORD BOUNDARY               */
         MVI   APCWRCN(APCWPTR),X'11'                           02S0237
*               APEMMSGN=APCMA017;  /* SET MESSAGE NUMBER FOR NOT A
*                                      WORD BOUNDARY                 */
         MVC   APEMMSGN+112(4,APCWPTR),@CF00421                 02S0238
*             END;                  /* END OF SEGMENT                */
*           ELSE                    /* CHECK FOR RANGE ERROR         */
*             IF RSOLVERR=RNGERROR THEN/* RANGE ERROR?               */
         B     @RC00235                                         02S0240
@RF00235 CLC   RSOLVERR(4),@CF00066                             02S0240
         BNE   @RF00240                                         02S0240
*               DO;                 /* SET UP FOR UARRV OUT OF RANGE */
*                 APCWRCN=APCCA022; /* SET ERROR NUMBER FOR UARRV OUT
*                                      OF RANGE                      */
         MVI   APCWRCN(APCWPTR),X'16'                           02S0242
*                 APEMMSGN=APCMA022;/* SET MESSAGE NUMBER FOR O OF
*                                      RANGE                         */
         MVC   APEMMSGN+112(4,APCWPTR),@CF00089                 02S0243
*               END;                /* END OF SEGMENT                */
*             ELSE                                              02S0245
*               ;                   /* NULL                          */
@RF00240 DS    0H                                               02S0246
*           RETURN;                 /* RETURN TO CALLER              */
         B     @EL00001                                         02S0246
*         END;                      /* END OF SEGMENT                */
*       ELSE                                                    02S0248
*         ;                         /* NULL - NO MIF ERROR           */
@RF00231 DS    0H                                               02S0249
*     END;                          /* END U VECTOR BULK STORE  02S0249
*                                      ADDRESS PROCESSING            */
*                                                               02S0249
*     /***************************************************************/
*     /*                                                             */
*     /* INSERT FIXED U VECTOR LENGTH AND DEFAULT SPACING INTO THE   */
*     /* CIT ENTRY                                                   */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0250
*     DO;                           /* U VECTOR LENGTH, DELTA TO CIT */
*       APCIZNB2=APALUCNT;          /* APPLY DEFAULT U LENGTH        */
         LA    @09,CITENTRY                                     02S0251
         L     @03,APCWAPAL(,APCWPTR)                           02S0251
         LH    @03,APALUCNT(,@03)                               02S0251
         STH   @03,APCIZNB2(,@09)                               02S0251
*       APCIZDL2=1;                 /* APPLY DEFAULT U SPACING       */
         MVC   APCIZDL2(2,@09),@CH00046                         02S0252
*     END;                          /* END U VECTOR LENGTH,DELTA
*                                      PROCESSING                    */
*                                                               02S0253
*     /***************************************************************/
*     /*                                                             */
*     /* CHECK FOR U VECTOR BULK STORE START ADDRESS INDEX. IF TO BE */
*     /* USED, VALIDATE IT AND STORE INTO CIT ENTRY. VERIFY CORRECT  */
*     /* NUMBER OF PARAMETERS HAVE BEEN INPUT                        */
*     /*                                                             */
*     /***************************************************************/
*                                                               02S0254
*     DO;                           /* U START INDEX PROCESSING      */
*       IF USESTART=ON THEN         /* IS USE OF START INDEX    02S0255
*                                      REQUESTED VIA IFMU            */
         TM    USESTART,B'10000000'                             02S0255
         BNO   @RF00255                                         02S0255
*         DO;                       /* PROCESS U VECTOR START INDEX
*                                      REQUEST                       */
*           IF APINAP2E=ON THEN     /* IS THERE ANOTHER PARAMETER OR
*                                      WAS UARRV LAST?               */
         TM    APINAP2E(INPUTPTR),B'10000000'                   02S0257
         BNO   @RF00257                                         02S0257
*             DO;                   /* NO MORE PARAMETERS - ERROR -
*                                      INVALID NUMBER OF PARAMETERS  */
*               APCWRCN=APCCA002;   /* SET ERROR NUMBER FOR NZC 02S0259
*                                      INVALID NUMBER OF PARAMETERS  */
         MVI   APCWRCN(APCWPTR),X'02'                           02S0259
*               APEMMSGN=APCMA002;  /* SET MESSAGE NUMBER FOR INVLD
*                                      NBR PARMS                     */
         MVC   APEMMSGN+112(4,APCWPTR),@CF00099                 02S0260
*               CALL NZCERR;        /* NZCERR TO SET COMMON ERROR
*                                      INDICATORS                    */
         BAL   @14,NZCERR                                       02S0261
*               RETURN;             /* RETURN TO CALLER              */
         B     @EL00001                                         02S0262
*             END;                  /* END ERROR PROCESSING          */
*           ELSE                    /* AT LEAST ONE MORE PARAMETER
*                                      EXISTS - VERIFY IT IS LAST -
*                                      VALIDATE THE INDEX ID AND
*                                      STORE IN CIT ENTRY            */
*             DO;                   /* FINISH REQUEST                */
@RF00257 DS    0H                                               02S0265
*               IF APINAP3E=OFF THEN/* MORE PARAMETERS?              */
         TM    APINAP3E(INPUTPTR),B'10000000'                   02S0265
         BNZ   @RF00265                                         02S0265
*                 DO;               /* MORE PARAMETERS IS AN ERROR   */
*                   APCWRCN=APCCA002;/* SET ERROR NUMBER FOR NZC
*                                      INVALID NUMBER OF PARAMETERS  */
         MVI   APCWRCN(APCWPTR),X'02'                           02S0267
*                   APEMMSGN=APCMA002;/* SET MESSAGE NUMBER FOR INVLD
*                                      NBR PARMS                     */
         MVC   APEMMSGN+112(4,APCWPTR),@CF00099                 02S0268
*                   CALL NZCERR;    /* NZCERR TO SET COMMON ERROR
*                                      INDICATORS                    */
         BAL   @14,NZCERR                                       02S0269
*                   RETURN;         /* RETURN TO CALLER              */
         B     @EL00001                                         02S0270
*                 END;              /* END ERROR PROCESSING          */
*               ELSE                /* UARRVX IS LAST PARAMETER      */
*                 DO;               /* VALIDATE AND STORE IN CIT     */
@RF00265 DS    0H                                               02S0273
*                   IF(PARM3<0)×(PARM3>15) THEN/* TEST IF UARRVX IS
*                                      OUT OF RANGE                  */
         L     @09,APINAP3(,INPUTPTR)                           02S0273
         L     @09,PARM3(,@09)                                  02S0273
         LTR   @09,@09                                          02S0273
         BM    @RT00273                                         02S0273
         C     @09,@CF00109                                     02S0273
         BNH   @RF00273                                         02S0273
@RT00273 DS    0H                                               02S0274
*                     DO;           /* UARRVX IS INVALID - SET  02S0274
*                                      INDICATORS AND RETURN         */
*                       APCWRCN=APCCA009;/* SET ERROR NUMBER FOR
*                                      UARRVX OUT OF RANGE           */
         MVI   APCWRCN(APCWPTR),X'09'                           02S0275
*                       APEMMSGN=APCMA009;/* SET MESSAGE NUMBER FOR
*                                      OUT OF RANGE                  */
         LA    @09,112                                          02S0276
         ALR   @09,APCWPTR                                      02S0276
         MVC   APEMMSGN(4,@09),@CF00089                         02S0276
*                       APEMVALN=APCMK034;/* SET KEYWORD NUMBER FOR
*                                      UARRVX                        */
         MVC   APEMVALN(4,@09),@CF00200                         02S0277
*                       CALL NZCERR;/* NZCERR TO SET COMMON ERROR
*                                      INDICATORS                    */
         BAL   @14,NZCERR                                       02S0278
*                       RETURN;     /* RETURN TO CALLER              */
         B     @EL00001                                         02S0279
*                     END;          /* END ERROR PROCESSING          */
*                   ELSE            /* INDEX ID IS OK                */
*                     APCIZXB2=PARM3;/* FILL IN START INDEX          */
@RF00273 LA    @09,CITENTRY                                     02S0281
         L     @03,APINAP3(,INPUTPTR)                           02S0281
         L     @03,PARM3(,@03)                                  02S0281
         STH   @03,APCIZXB2(,@09)                               02S0281
*                 END;              /* END UARRVX PROCESSING         */
*             END;                  /* END UARRVX PROCESSING         */
*         END;                      /* END UARRVX PROCESSING         */
*       ELSE                        /* U START ADDRESS INDEX NOT
*                                      REQUESTED                     */
*         DO;                       /* ENSURE UARRV WAS LAST    02S0285
*                                      PARAMETER                     */
         B     @RC00255                                         02S0285
@RF00255 DS    0H                                               02S0286
*           IF APINAP2E=OFF THEN    /* IS THERE ANOTHER PARAMETER OR
*                                      WAS UARRV LAST?               */
         TM    APINAP2E(INPUTPTR),B'10000000'                   02S0286
         BNZ   @RF00286                                         02S0286
*             DO;                   /* MORE PARAMETERS - ERROR -
*                                      INVALID NUMBER OF PARAMETERS  */
*               APCWRCN=APCCA002;   /* SET ERROR NUMBER FOR NZC 02S0288
*                                      INVALID NUMBER OF PARAMETERS  */
         MVI   APCWRCN(APCWPTR),X'02'                           02S0288
*               APEMMSGN=APCMA002;  /* SET MESSAGE NUMBER FOR INVLD
*                                      NBR PARMS                     */
         MVC   APEMMSGN+112(4,APCWPTR),@CF00099                 02S0289
*               CALL NZCERR;        /* NZCERR TO SET COMMON ERROR
*                                      INDICATORS                    */
         BAL   @14,NZCERR                                       02S0290
*               RETURN;             /* RETURN TO CALLER              */
         B     @EL00001                                         02S0291
*             END;                  /* END ERROR PROCESSING          */
*           ELSE                                                02S0293
*             ;                     /* NUMBER OF PARMS OK            */
@RF00286 DS    0H                                               02S0294
*         END;                      /* END PARM CHECK FOR NO UARRVX
*                                      USED                          */
*     END;                          /* END UARRVX PROCESSING         */
@RC00255 DS    0H                                               02S0296
*   END;                            /* END U VECTOR PROCESSING       */
*                                                               01S0297
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE CIT ENTRY FROM WORKAREA TO APPLICATION PROGRAM           */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0297
*   DO;                             /* CALL IGTMIC TO MOVE CIT ENTRY
*                                      TO APPLICATION PROGRAM        */
*     CITLNGTH=APALCISZ/2;          /* NUMBER OF WORDS TO MOVE       */
         L     @09,APCWAPAL(,APCWPTR)                           01S0298
         LH    @00,APALCISZ(,@09)                               01S0298
         SRDA  @00,32                                           01S0298
         D     @00,@CF00066                                     01S0298
         ST    @01,CITLNGTH                                     01S0298
*     CALL APCVZMIC(CITENTRY,CITLNGTH,ERRORBIT);/* CALL IGTMIC       */
         LA    @09,CITENTRY                                     01S0299
         ST    @09,@AL00001                                     01S0299
         LA    @09,CITLNGTH                                     01S0299
         ST    @09,@AL00001+4                                   01S0299
         LA    @09,ERRORBIT                                     01S0299
         ST    @09,@AL00001+8                                   01S0299
         L     @15,APCTZMIC(,APCTPTR)                           01S0299
         LA    @01,@AL00001                                     01S0299
         BALR  @14,@15                                          01S0299
*   END;                            /* END MOVE OF CIT ENTRY         */
*NZCERR:                                                        01S0301
*   PROC;                           /* PROCEDURE TO SET COMMON ERROR
*                                      INDICATORS                    */
         B     @PB00002                                         01S0301
NZCERR   STM   @14,@12,12(@13)                                  01S0301
*   DO;                             /* SET COMMON INDICATORS         */
*     APCWZAM=ON;                   /* INDICATE TO CALL ROUTER THAT
*                                      AN ERROR WAS DETECTED         */
         OI    APCWZAM(APCWPTR),B'00000001'                     01S0303
*     APCWR15C=APCCRERR;            /* R15 RETURN CODE - ERROR       */
         MVC   APCWR15C(4,APCWPTR),@CF00078                     01S0304
*     APCWRCT=APCCTLOG;             /* INDICATE ERROR TYPE AS LOGICAL*/
         MVI   APCWRCT(APCWPTR),X'08'                           01S0305
*     APCWRCC=APCCA;                /* INDICATE COMPONENT DETECTING
*                                      ERROR WAS NZC PROCESSOR       */
         MVI   APCWRCC(APCWPTR),X'01'                           01S0306
*   END;                            /* END SETTING OF COMMON ERROR
*                                      INDICATORS                    */
*   END NZCERR;                     /* END COMMON ERROR FLAGS   01S0308
*                                      PROCEDURE                     */
@EL00002 DS    0H                                               01S0308
@EF00002 DS    0H                                               01S0308
@ER00002 LM    @14,@12,12(@13)                                  01S0308
         BR    @14                                              01S0308
@PB00002 DS    0H                                               01S0309
*                                   /* IGTXEPLG                      */
*                                                               01S0309
*   /*****************************************************************/
*   /*                                                               */
*   /* SYSTEM DECLARES                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0309
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                    01S0309
*     I031F FIXED(31) BASED,                                    01S0309
*     I031P PTR(31) BASED,                                      01S0309
*     I015F FIXED(15) BASED,                                    01S0309
*     I015P PTR(15) BASED,                                      01S0309
*     I008P PTR(8) BASED,                                       01S0309
*     I001C CHAR(1) BASED;                                      01S0309
*                                                               01S0310
*   /*****************************************************************/
*   /*                                                               */
*   /* MODULE PATCH AREA                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0310
*   DCL                                                         01S0310
*     APPATCH CHAR(*) INT STATIC LOCAL GEND;                    01S0310
*   GENERATE DATA DEFS(APPATCH);                                01S0311
*                                                               01S0312
*   /*****************************************************************/
*   /*                                                               */
*   /* GENERAL REGISTER DECLARES                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0312
*   DCL                                                         01S0312
*     R0F FIXED(31) REG(0),                                     01S0312
*     R0P PTR(24) REG(0),                                       01S0312
*     R0RSTD PTR(31) REG(0),                                    01S0312
*     R1F FIXED(31) REG(1),                                     01S0312
*     R1P PTR(24) REG(1),                                       01S0312
*     R1RSTD PTR(31) REG(1),                                    01S0312
*     R2F FIXED(31) REG(2),                                     01S0312
*     R2P PTR(24) REG(2),                                       01S0312
*     R2RSTD PTR(31) REG(2),                                    01S0312
*     R3F FIXED(31) REG(3),                                     01S0312
*     R3P PTR(24) REG(3),                                       01S0312
*     R3RSTD PTR(31) REG(3),                                    01S0312
*     R4F FIXED(31) REG(4),                                     01S0312
*     R4P PTR(24) REG(4),                                       01S0312
*     R4RSTD PTR(31) REG(4),                                    01S0312
*     R5F FIXED(31) REG(5),                                     01S0312
*     R5P PTR(24) REG(5),                                       01S0312
*     R5RSTD PTR(31) REG(5),                                    01S0312
*     R6F FIXED(31) REG(6),                                     01S0312
*     R6P PTR(24) REG(6),                                       01S0312
*     R6RSTD PTR(31) REG(6),                                    01S0312
*     R7F FIXED(31) REG(7),                                     01S0312
*     R7P PTR(24) REG(7),                                       01S0312
*     R7RSTD PTR(31) REG(7),                                    01S0312
*     R8F FIXED(31) REG(8),                                     01S0312
*     R8P PTR(24) REG(8),                                       01S0312
*     R8RSTD PTR(31) REG(8),                                    01S0312
*     R9F FIXED(31) REG(9),                                     01S0312
*     R9P PTR(24) REG(9),                                       01S0312
*     R9RSTD PTR(31) REG(9),                                    01S0312
*     R10F FIXED(31) REG(10),                                   01S0312
*     R10P PTR(24) REG(10),                                     01S0312
*     R10RSTD PTR(31) REG(10),                                  01S0312
*     R11F FIXED(31) REG(11),                                   01S0312
*     R11P PTR(24) REG(11),                                     01S0312
*     R11RSTD PTR(31) REG(11),                                  01S0312
*     R12F FIXED(31) REG(12),                                   01S0312
*     R12P PTR(24) REG(12),                                     01S0312
*     R12RSTD PTR(31) REG(12),                                  01S0312
*     R13F FIXED(31) REG(13),                                   01S0312
*     R13P PTR(24) REG(13),                                     01S0312
*     R13RSTD PTR(31) REG(13),                                  01S0312
*     R14F FIXED(31) REG(14),                                   01S0312
*     R14P PTR(24) REG(14),                                     01S0312
*     R14RSTD PTR(31) REG(14),                                  01S0312
*     R15F FIXED(31) REG(15),                                   01S0312
*     R15P PTR(24) REG(15),                                     01S0312
*     R15RSTD PTR(31) REG(15),                                  01S0312
*                                                               01S0312
*     /***************************************************************/
*     /*                                                             */
*     /* VPSS CONTROL BLOCK POINTER DECLARES                         */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0312
*     APSMPTR PTR(24) REG(01),      /* STORAGE MANAGEMENT BLOCK 01S0312
*                                      (SUGGESTED POINTER)           */
*     APSCPTR PTR(24) REG(01),      /* STORAGE MANAGEMENT CONTROL
*                                      WORD (SUGGESTED POINTER)      */
*     APINPTR PTR(24) REG(01),      /* USER'S INPUT PARAMETER LIST
*                                      (SUGGESTED POINTER)           */
*/*                                                                  */
*                                                               01S0312
*     APDATA PTR(24) REG(06),       /* ADDRESS OF DYNAMIC DATA  01S0312
*                                      WORKAREA (DATAREG)            */
*     APCODE PTR(24) REG(07),       /* PROGRAM CODE BASE REGISTER
*                                      (CODEREG)                     */
*     APDEBPTR PTR(24) REG(08),     /* VPSS DEB (SUGGESTED POINTER)  */
*     APNPPTR PTR(24) REG(08),      /* SUBSYSTEM INITIALIZATION 01S0312
*                                      WORKAREA BLOCK (ONLY USED BY
*                                      SUBSYSTEM INITIALIZATION)     */
*     APRLPTR PTR(24) REG(08),      /* VPSS ACB REQUEST LIST    01S0312
*                                      (SUGGESTED POINTER)           */
*     APCIPTR PTR(24) REG(08),      /* 3838 CONTROL TABLE (SUGGESTED
*                                      POINTER)                      */
*     APCWPTR PTR(24) REG(08),      /* CALL INTERFACE WORKAREA  01S0312
*                                      (SUGGESTED POINTER)           */
*     APERPTR PTR(24) REG(08),      /* ERP/IO APPENDAGE WORKAREA
*                                      (SUGGESTED POINTER)           */
*     APACBPTR PTR(24) REG(09),     /* VPSS ACB (SUGGESTED POINTER)  */
*     APCQPTR PTR(24) REG(09),      /* COMMAND QUEUE ELEMENT    01S0312
*                                      (SUGGESTED POINTER)           */
*     APOTPTR PTR(24) REG(09),      /* OPTION TABLE (SUGGESTED  01S0312
*                                      POINTER)                      */
*     APIOPTR PTR(24) REG(10),      /* I/O ELEMENT (SUGGESTED   01S0312
*                                      POINTER)                      */
*     APEXLPTR PTR(24) REG(10),     /* VPSS EXLST (SUGGESTED POINTER)*/
*     APUBPTR PTR(24) REG(10),      /* UNIT BLOCK (SUGGESTED POINTER)*/
*     APAXPTR PTR(24) REG(10),      /* VPSS ACB EXTENSION (SUGGESTED
*                                      POINTER)                      */
*     APCPPTR PTR(24) REG(10),      /* VPSS CALL PROCESSING     01S0312
*                                      INDICATORS (SUGGESTED POINTER)*/
*     APOCPTR PTR(24) REG(10),      /* VPSS OPEN/CLOSE SUBSYSTEM
*                                      WORKAREA (REQUIRED POINTER)   */
*     APATPTR PTR(24) REG(11),      /* VPSS ACB TABLE (SUGGESTED
*                                      POINTER)                      */
*     APLBPTR PTR(24) REG(11),      /* LABEL RESOLUTION TABLE   01S0312
*                                      (SUGGESTED POINTER)           */
*     APUTPTR PTR(24) REG(11),      /* USER TABLE (SUGGESTED POINTER)*/
*     APDSPTR PTR(24) REG(11),      /* VPSS DATASET ENTRY (SUGGESTED
*                                      POINTER)                      */
*     APXLPTR PTR(24) REG(11),      /* TRANSLATION TABLE (SUGGESTED
*                                      POINTER)                      */
*     APDXPTR PTR(24) REG(11),      /* VPSS DEB EXTENSION (SUGGESTED
*                                      POINTER)                      */
*     APCTPTR PTR(24) REG(12) RSTD, /* CONTROL TABLE (REQUIRED  01S0312
*                                      POINTER)                      */
*     APSVPTR PTR(24) REG(13) RSTD, /* OS/VPSS SAVEAREA/WORKAREA
*                                      (REQUIRED POINTER)            */
*     APRETURN PTR(24) REG(14),     /* RETURN ADDRESS FOR SUBROUTINE
*                                      LINKAGE                       */
*     APENTRY PTR(24) REG(15),      /* SUBROUTINE ENTRY POINT LINKAGE*/
*     APRCODE PTR(24) REG(15);      /* CONTAINS SUBROUTINE RETURN
*                                      CODE                          */
*                                                               01S0313
*   /*****************************************************************/
*   /*                                                               */
*   /* USER REGISTER DECLARES                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0313
*   END IGTMDC                                                  01S0313
*                                                               01S0313
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IGTXAPCC)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCM)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCT)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCV)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCW)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPEM)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPIN)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPAL)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCI)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPSV)                                       */
*/*%INCLUDE SYSUT5  (BLDHDR  )                                       */
*/*%INCLUDE SYSUT5  (INDEXES )                                       */
*/*%INCLUDE SYSUT5  (BLDXVEC )                                       */
*/*%INCLUDE SYSUT5  (BLDUVEC )                                       */
*                                                               01S0313
*       ;                                                       01S0313
         B     @EL00001                                         01S0313
@DATA    DS    0H
@DATD    DSECT
         DS    0F
@SA00001 DS    20F
@PC00001 DS    1F
@AL00001 DS    3A
IGTMDC   CSECT
         DS    0F
@CF00046 DC    F'1'
@CH00046 EQU   @CF00046+2
@CF00066 DC    F'2'
@CF00089 DC    F'3'
@CF00075 DC    F'4'
@CF00078 DC    F'8'
@CF00099 DC    F'9'
@CF00040 DC    F'11'
@CF00080 DC    F'12'
@CF00109 DC    F'15'
@CF00111 DC    F'16'
@CF00125 DC    F'23'
@CF00055 DC    F'24'
@CF00128 DC    F'25'
@CF00132 DC    F'27'
@CF00134 DC    F'28'
@CF00421 DC    F'30'
@CF00041 DC    F'31'
@CF00200 DC    F'34'
@CF00208 DC    F'38'
@CF00210 DC    F'39'
@CF01714 DC    F'65536'
@CF01713 DC    F'-32768'
@DATD    DSECT
         DS    0D
CITLNGTH DS    F
RSOLVERR DS    F
USESTART DS    BL1
USECOUNT DS    BL1
ERRORBIT DS    BL1
         DS    CL1
CITENTRY DS    11F
IGTMDC   CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
IGTMDC   CSECT
*                                  /* GENERATE PATCH
         IGTXZAP ,                 GENERATE PATCH AREA
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IGTMDC   CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
INPUTPTR EQU   @02
APDATA   EQU   @06
APCODE   EQU   @07
APCTPTR  EQU   @12
APSVPTR  EQU   @13
APCWPTR  EQU   @08
APACBPTR EQU   @09
APATPTR  EQU   @11
APAXPTR  EQU   @10
APCIPTR  EQU   @08
APCPPTR  EQU   @10
APCQPTR  EQU   @09
APDEBPTR EQU   @08
APDSPTR  EQU   @11
APDXPTR  EQU   @11
APENTRY  EQU   @15
APERPTR  EQU   @08
APEXLPTR EQU   @10
APINPTR  EQU   @01
APIOPTR  EQU   @10
APLBPTR  EQU   @11
APNPPTR  EQU   @08
APOCPTR  EQU   @10
APOTPTR  EQU   @09
APRCODE  EQU   @15
APRETURN EQU   @14
APRLPTR  EQU   @08
APSCPTR  EQU   @01
APSMPTR  EQU   @01
APUBPTR  EQU   @10
APUTPTR  EQU   @11
APXLPTR  EQU   @11
R0F      EQU   @00
R0P      EQU   @00
R0RSTD   EQU   @00
R1F      EQU   @01
R1P      EQU   @01
R1RSTD   EQU   @01
R10F     EQU   @10
R10P     EQU   @10
R10RSTD  EQU   @10
R11F     EQU   @11
R11P     EQU   @11
R11RSTD  EQU   @11
R12F     EQU   @12
R12P     EQU   @12
R12RSTD  EQU   @12
R13F     EQU   @13
R13P     EQU   @13
R13RSTD  EQU   @13
R14F     EQU   @14
R14P     EQU   @14
R14RSTD  EQU   @14
R15F     EQU   @15
R15P     EQU   @15
R15RSTD  EQU   @15
R2F      EQU   @02
R2P      EQU   @02
R2RSTD   EQU   @02
R3F      EQU   @03
R3P      EQU   @03
R3RSTD   EQU   @03
R4F      EQU   @04
R4P      EQU   @04
R4RSTD   EQU   @04
R5F      EQU   @05
R5P      EQU   @05
R5RSTD   EQU   @05
R6F      EQU   @06
R6P      EQU   @06
R6RSTD   EQU   @06
R7F      EQU   @07
R7P      EQU   @07
R7RSTD   EQU   @07
R8F      EQU   @08
R8P      EQU   @08
R8RSTD   EQU   @08
R9F      EQU   @09
R9P      EQU   @09
R9RSTD   EQU   @09
PARM1    EQU   0
PARM2    EQU   0
PARM3    EQU   0
PARM4    EQU   0
IFMFMT   EQU   0
DELTANDX EQU   IFMFMT+3
COUNTNDX EQU   IFMFMT+3
STARTNDX EQU   IFMFMT+3
FORCENEG EQU   IFMFMT+3
REVSIGN  EQU   IFMFMT+3
FORCEPOS EQU   IFMFMT+3
FXPTTRUE EQU   IFMFMT+3
FXPTTWOS EQU   IFMFMT+3
APCT     EQU   0
APCTENQM EQU   APCT+12
APCTSMIN EQU   APCT+32
APCTSMAD EQU   APCT+36
APCTZ@@@ EQU   APCT+40
APCTU@@@ EQU   APCT+440
APCTBR14 EQU   APCT+840
APCTERRS EQU   APCT+876
@NM00013 EQU   APCT+936
APCTSTAT EQU   @NM00013
APCTPRSW EQU   @NM00013+1
APCTAPCQ EQU   APCT+944
APCTCQAQ EQU   APCT+952
APCTZ@@1 EQU   APCT+1120
APCVZMIC EQU   0
APCVZMIF EQU   0
APCW     EQU   0
APCWAPIN EQU   APCW+8
APCWACB  EQU   APCW+20
APCWAPAL EQU   APCW+40
APCWSWS  EQU   APCW+46
APCWSW0  EQU   APCWSWS
APCWOPF  EQU   APCW+62
APCWAPOP EQU   APCWOPF
APCWR15C EQU   APCW+64
APCWRCDE EQU   APCW+68
APCWRCT  EQU   APCWRCDE+1
APCWRCC  EQU   APCWRCDE+2
APCWRCN  EQU   APCWRCDE+3
APCWINTV EQU   APCW+72
APCWINT0 EQU   APCWINTV
APCWZAM  EQU   APCWINT0
APCWINT1 EQU   APCWINTV+1
APCWINT2 EQU   APCWINTV+2
APCWINT3 EQU   APCWINTV+3
APCWAPEM EQU   APCW+112
APCWEMSG EQU   APCWAPEM
APEM     EQU   0
APEMMSG  EQU   APEM+92
APEMMSGN EQU   APEMMSG
APEMVALU EQU   APEM+108
APEMVALN EQU   APEMVALU+4
APIN     EQU   0
APINAUNT EQU   APIN
APINAFNC EQU   APIN+4
APINFMTS EQU   APIN+8
APAL     EQU   0
APALCISZ EQU   APAL+4
APALDATA EQU   APAL+8
APALALG  EQU   APAL+8
APALSTAT EQU   APALALG
APALY    EQU   APALALG+4
APALYFSW EQU   APALY
APALYVS  EQU   APALY+1
APALYCT  EQU   APALY+2
APALYDL  EQU   APALY+3
APALYFMT EQU   APALY+4
APALX    EQU   APALALG+16
APALXFSW EQU   APALX
APALXFFX EQU   APALXFSW
APALXFFT EQU   APALXFSW
APALXFSO EQU   APALXFSW
APALXFXS EQU   APALXFSW
APALXFXC EQU   APALXFSW
APALXFXD EQU   APALXFSW
APALXVS  EQU   APALX+1
APALXCT  EQU   APALX+2
APALXDL  EQU   APALX+3
APALXFMT EQU   APALX+4
APALU    EQU   APALALG+28
APALUFSW EQU   APALU
APALUFFX EQU   APALUFSW
APALUFFT EQU   APALUFSW
APALUFSO EQU   APALUFSW
APALUFXS EQU   APALUFSW
APALUFXC EQU   APALUFSW
APALUFXD EQU   APALUFSW
APALUVS  EQU   APALU+1
APALUCT  EQU   APALU+2
APALUDL  EQU   APALU+3
APALUFMT EQU   APALU+4
APALUCNT EQU   APALU+10
APCI     EQU   0
APCIHDR  EQU   APCI
APCIHFGS EQU   APCIHDR+2
APCIHFG0 EQU   APCIHFGS
APCIHFG1 EQU   APCIHFGS+1
APSV     EQU   0
APSVREGS EQU   APSV+12
APCVZDAL EQU   0
APCVZDAP EQU   0
APCVZDBK EQU   0
APCVZDDA EQU   0
APCVZDDQ EQU   0
APCVZDEQ EQU   0
APCVZDID EQU   0
APCVZDIO EQU   0
APCVZDIP EQU   0
APCVZDMD EQU   0
APCVZDMM EQU   0
APCVZDQR EQU   0
APCVZDRI EQU   0
APCVZDUA EQU   0
APCVZDUL EQU   0
APCVZDWI EQU   0
APCVZDWT EQU   0
APCVZDX1 EQU   0
APCVZDX2 EQU   0
APCVZDX3 EQU   0
APCVZDX4 EQU   0
APCVZD10 EQU   0
APCVZD20 EQU   0
APCVZD4E EQU   0
APCVZD40 EQU   0
APCVZD41 EQU   0
APCVZD42 EQU   0
APCVZD43 EQU   0
APCVZD44 EQU   0
APCVZD45 EQU   0
APCVZD46 EQU   0
APCVZD47 EQU   0
APCVZD48 EQU   0
APCVZD49 EQU   0
APCVZD60 EQU   0
APCVZD80 EQU   0
APCVZD81 EQU   0
APCVZD82 EQU   0
APCVZD83 EQU   0
APCVZJAA EQU   0
APCVZJAD EQU   0
APCVZJAG EQU   0
APCVZJAJ EQU   0
APCVZJAM EQU   0
APCVZJAP EQU   0
APCVZJAX EQU   0
APCVZJAY EQU   0
APCVZJBA EQU   0
APCVZJBD EQU   0
APCVZJBG EQU   0
APCVZJBJ EQU   0
APCVZJBM EQU   0
APCVZJDA EQU   0
APCVZJDD EQU   0
APCVZJDG EQU   0
APCVZJDJ EQU   0
APCVZJDM EQU   0
APCVZJHC EQU   0
APCVZJHE EQU   0
APCVZJHF EQU   0
APCVZJHO EQU   0
APCVZJHQ EQU   0
APCVZJHR EQU   0
APCVZJHT EQU   0
APCVZJHW EQU   0
APCVZJH0 EQU   0
APCVZJH6 EQU   0
APCVZJI0 EQU   0
APCVZJI3 EQU   0
APCVZJJ0 EQU   0
APCVZKAA EQU   0
APCVZKBA EQU   0
APCVZKBB EQU   0
APCVZKBC EQU   0
APCVZKBD EQU   0
APCVZKBE EQU   0
APCVZKBF EQU   0
APCVZKCA EQU   0
APCVZKDA EQU   0
APCVZKGA EQU   0
APCVZKGB EQU   0
APCVZKGC EQU   0
APCVZKGD EQU   0
APCVZLCA EQU   0
APCVZLCB EQU   0
APCVZMBA EQU   0
APCVZMBD EQU   0
APCVZMBG EQU   0
APCVZMBH EQU   0
APCVZMBK EQU   0
APCVZMBM EQU   0
APCVZMIB EQU   0
APCVZMJB EQU   0
APCVZMJC EQU   0
APCVZMJH EQU   0
APCVZMJI EQU   0
APCVZMMA EQU   0
APCVZUAA EQU   0
APCVZUAB EQU   0
APCVZUAC EQU   0
APCVZUAD EQU   0
APCVZUAE EQU   0
APCVZUAF EQU   0
APCVZUAG EQU   0
APCVZUBB EQU   0
APCVZUFA EQU   0
APCVZUHA EQU   0
APCVZUHB EQU   0
APCVZUJA EQU   0
APCVZUKA EQU   0
APCV1CMD EQU   0
APCV1JAA EQU   0
APCV1JBJ EQU   0
APCV1JHC EQU   0
APCV1JHL EQU   0
APCV1JHT EQU   0
APCV1MAB EQU   0
APCV1MBD EQU   0
APCV2JHC EQU   0
APCV2JHL EQU   0
APCV2MBD EQU   0
APINACI  EQU   0
APINACW  EQU   0
APINAPRL EQU   0
APINBIV  EQU   0
APINBLB  EQU   0
APINCHB  EQU   0
APINCHC  EQU   0
APINCHS  EQU   0
APINCHX  EQU   0
APINCXC  EQU   0
APINCXS  EQU   0
APINCXX  EQU   0
APINDLB  EQU   0
APINDSV  EQU   0
APINERR  EQU   0
APINFUNC EQU   0
APINICI  EQU   0
APINICW  EQU   0
APINKYVF EQU   0
APINKYVL EQU   0
APINKYVP EQU   0
APINKYWD EQU   0
APINPXB  EQU   0
APINPXC  EQU   0
APINPXF  EQU   0
APINPXP  EQU   0
APINSTB  EQU   0
APINSTD  EQU   0
APINUNIT EQU   0
APINUST  EQU   0
APINXBS  EQU   0
APINXBX  EQU   0
APINXCD  EQU   0
APINXCT  EQU   0
APINXID  EQU   0
APINXI1  EQU   0
APINXI2  EQU   0
APINXLB  EQU   0
APINXST  EQU   0
APINYST  EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
DAPCW    EQU   0
APCTZ    EQU   APCTZ@@@
APCTZUAA EQU   APCTZ
APCTZUAB EQU   APCTZ+4
APCTZUAC EQU   APCTZ+8
APCTZUAD EQU   APCTZ+12
APCTZUAE EQU   APCTZ+16
APCTZUBB EQU   APCTZ+24
APCTZD10 EQU   APCTZ+28
APCTZD20 EQU   APCTZ+32
APCTZD40 EQU   APCTZ+36
APCTZD41 EQU   APCTZ+40
APCTZD42 EQU   APCTZ+44
APCTZD43 EQU   APCTZ+48
APCTZD44 EQU   APCTZ+52
APCTZD45 EQU   APCTZ+56
APCTZD46 EQU   APCTZ+60
APCTZD47 EQU   APCTZ+64
APCTZD48 EQU   APCTZ+68
APCTZD49 EQU   APCTZ+72
APCTZD60 EQU   APCTZ+76
APCTZD80 EQU   APCTZ+80
APCTZD4E EQU   APCTZ+84
APCTZMBA EQU   APCTZ+88
APCTZMBD EQU   APCTZ+92
APCTZMBG EQU   APCTZ+96
APCTZDX1 EQU   APCTZ+104
APCTZDX2 EQU   APCTZ+108
APCTZDX3 EQU   APCTZ+112
APCTZDX4 EQU   APCTZ+116
APCTZMBH EQU   APCTZ+120
APCTZMBK EQU   APCTZ+124
APCTZMBM EQU   APCTZ+128
APCTZMJB EQU   APCTZ+132
APCTZMJC EQU   APCTZ+136
APCTZMJH EQU   APCTZ+140
APCTZMMA EQU   APCTZ+144
APCTZDMD EQU   APCTZ+148
APCTZD81 EQU   APCTZ+152
APCTZDID EQU   APCTZ+156
APCTZDRI EQU   APCTZ+160
APCTZMJI EQU   APCTZ+164
APCTZDWT EQU   APCTZ+168
APCTZDMM EQU   APCTZ+172
APCTZDAL EQU   APCTZ+176
APCTZDBK EQU   APCTZ+180
APCTZDIP EQU   APCTZ+184
APCTZDDA EQU   APCTZ+188
APCTZDUL EQU   APCTZ+192
APCTZDEQ EQU   APCTZ+196
APCTZDDQ EQU   APCTZ+200
APCTZDUA EQU   APCTZ+204
APCTZUAF EQU   APCTZ+208
APCTZUAG EQU   APCTZ+212
APCTZDIO EQU   APCTZ+216
APCTZUHA EQU   APCTZ+220
APCTZUHB EQU   APCTZ+224
APCTZJAA EQU   APCTZ+232
APCTZJAD EQU   APCTZ+236
APCTZJAG EQU   APCTZ+240
APCTZJAJ EQU   APCTZ+244
APCTZJAM EQU   APCTZ+248
APCTZJAP EQU   APCTZ+252
APCTZJAY EQU   APCTZ+256
APCTZUFA EQU   APCTZ+260
APCTZUJA EQU   APCTZ+264
APCTZDAP EQU   APCTZ+268
APCTZKAA EQU   APCTZ+272
APCTZD82 EQU   APCTZ+276
APCTZMIB EQU   APCTZ+280
APCTZMIC EQU   APCTZ+284
APCTZD83 EQU   APCTZ+288
APCTZMIF EQU   APCTZ+296
APCTZJH0 EQU   APCTZ+300
APCTZJI0 EQU   APCTZ+304
APCTZJI3 EQU   APCTZ+308
APCTZJJ0 EQU   APCTZ+312
APCTZJBA EQU   APCTZ+316
APCTZJBD EQU   APCTZ+320
APCTZJBG EQU   APCTZ+324
APCTZJBJ EQU   APCTZ+328
APCTZJBM EQU   APCTZ+332
APCTZKCA EQU   APCTZ+340
APCTZKDA EQU   APCTZ+344
APCTZJDA EQU   APCTZ+356
APCTZJDJ EQU   APCTZ+360
APCTZJH6 EQU   APCTZ+364
APCTZJHO EQU   APCTZ+368
APCTZJHF EQU   APCTZ+372
APCTZJHE EQU   APCTZ+376
APCTZDQR EQU   APCTZ+380
APCTZJHR EQU   APCTZ+384
APCTZJHT EQU   APCTZ+388
APCTZJHW EQU   APCTZ+392
APCTZ1   EQU   APCTZ@@1
APCTZKBA EQU   APCTZ1
APCTZKBC EQU   APCTZ1+4
APCTZKBB EQU   APCTZ1+8
APCTZJHC EQU   APCTZ1+20
APCTZJHQ EQU   APCTZ1+24
APCTZKBD EQU   APCTZ1+28
APCTZKBE EQU   APCTZ1+40
APCTZUKA EQU   APCTZ1+56
APCTZKBF EQU   APCTZ1+60
APCTZJDD EQU   APCTZ1+64
APCTZJDG EQU   APCTZ1+68
APCTZJDM EQU   APCTZ1+72
APCTZLCA EQU   APCTZ1+76
APCTZLCB EQU   APCTZ1+80
APCTZDWI EQU   APCTZ1+84
APCTZJAX EQU   APCTZ1+88
APCTZKGA EQU   APCTZ1+92
APCTZKGB EQU   APCTZ1+96
APCTZKGC EQU   APCTZ1+100
APCTZKGD EQU   APCTZ1+104
APCTU    EQU   APCTU@@@
APCT1MAB EQU   APCTU
APCT1MBD EQU   APCTU+4
APCT2MBD EQU   APCTU+8
APCT1CMD EQU   APCTU+12
APCT1JAA EQU   APCTU+20
APCT1JHC EQU   APCTU+24
APCT2JHC EQU   APCTU+28
APCT1JHT EQU   APCTU+32
APCT1JHL EQU   APCTU+36
APCT2JHL EQU   APCTU+40
APCT1JBJ EQU   APCTU+44
APINFMT1 EQU   APINFMTS
APINAERR EQU   APINFMT1
@NM00062 EQU   APINFMT1+4
APINAKYW EQU   @NM00062
APINAKYV EQU   @NM00062+4
APINFMT2 EQU   APINFMTS
APINAAR  EQU   APINFMT2
APINFMT3 EQU   APINFMTS
APINASTB EQU   APINFMT3
APINAACW EQU   APINFMT3+4
APINAICW EQU   APINFMT3+8
APINAACI EQU   APINFMT3+12
APINAICI EQU   APINFMT3+16
APINFMT4 EQU   APINFMTS
APINAXI1 EQU   APINFMT4
APINAXI2 EQU   APINFMT4+4
APINAXLB EQU   APINFMT4+8
APINAXCD EQU   APINFMT4+12
APINFMT5 EQU   APINFMTS
APINADLB EQU   APINFMT5
APINFMT6 EQU   APINFMTS
APINABIV EQU   APINFMT6
APINABLB EQU   APINFMT6+4
APINFMT7 EQU   APINFMTS
APINACHS EQU   APINFMT7
APINACHC EQU   APINFMT7+4
APINACHB EQU   APINFMT7+8
APINACHX EQU   APINFMT7+12
APINFMT8 EQU   APINFMTS
APINACXS EQU   APINFMT8
APINACXC EQU   APINFMT8+4
APINACXX EQU   APINFMT8+8
APINFMT9 EQU   APINFMTS
APINASTD EQU   APINFMT9
APINADSV EQU   APINFMT9+4
APINAYST EQU   APINFMT9+8
APINAXST EQU   APINFMT9+12
APINAUST EQU   APINFMT9+16
APINFM10 EQU   APINFMTS
APINAXBS EQU   APINFM10
APINAXCT EQU   APINFM10+4
APINAXBX EQU   APINFM10+8
APINAXID EQU   APINFM10+12
APINAPMS EQU   APIN
APINAP1  EQU   APINAPMS
APINAP1E EQU   APINAP1
APINAP2  EQU   APINAPMS+4
APINAP2E EQU   APINAP2
APINAP3  EQU   APINAPMS+8
APINAP3E EQU   APINAP3
APINAP4  EQU   APINAPMS+12
APINAP4E EQU   APINAP4
APALLGCL EQU   APALDATA
APALLI1F EQU   APALLGCL+2
APALLI2F EQU   APALLGCL+3
APALIOXF EQU   APALDATA
APALIOTP EQU   APALIOXF
APALIOCH EQU   APALIOXF+1
@NM00096 EQU   APCI
APCIOPID EQU   @NM00096
APCIOPSZ EQU   @NM00096+2
APCIODTA EQU   @NM00096+4
APCIXDTA EQU   APCIODTA
APCIXIMM EQU   APCIXDTA+4
APCIXCC  EQU   APCIXDTA+8
APCIIDTA EQU   APCIODTA
APCIISZ  EQU   APCIIDTA+2
APCIADTA EQU   APCIODTA
APCIASO  EQU   APCIADTA
APCIASO0 EQU   APCIASO
APCIASO1 EQU   APCIASO+1
APCIAVCT EQU   APCIADTA+4
APCIAFS  EQU   APCIAVCT+8
APCIAF0  EQU   APCIAFS
APCIAF1  EQU   APCIAFS+1
@NM00103 EQU   APCIAVCT
APCIAV1  EQU   @NM00103
APCIAFS1 EQU   APCIAV1+8
APCIAF01 EQU   APCIAFS1
APCIAF11 EQU   APCIAFS1+1
APCIAV2  EQU   @NM00103+16
APCIAFS2 EQU   APCIAV2+8
APCIAF02 EQU   APCIAFS2
APCIAF12 EQU   APCIAFS2+1
APCIAV3  EQU   @NM00103+32
APCIAFS3 EQU   APCIAV3+8
APCIAF03 EQU   APCIAFS3
APCIAF13 EQU   APCIAFS3+1
APCIZDTA EQU   APCIODTA
APCIZX1  EQU   APCIZDTA
APCIZX2  EQU   APCIZDTA+2
APCIZV1  EQU   APCIZDTA+4
APCIZBS1 EQU   APCIZV1
APCIZDL1 EQU   APCIZV1+4
APCIZNB1 EQU   APCIZV1+6
APCIZFS1 EQU   APCIZV1+8
APCIZF01 EQU   APCIZFS1
APCIZRS1 EQU   APCIZF01
APCIZFP1 EQU   APCIZF01
APCIZFN1 EQU   APCIZF01
APCIZTC1 EQU   APCIZF01
APCIZST1 EQU   APCIZF01
APCIZF11 EQU   APCIZFS1+1
APCIZXB1 EQU   APCIZV1+10
APCIZXN1 EQU   APCIZV1+14
APCIZV2  EQU   APCIZDTA+20
APCIZBS2 EQU   APCIZV2
APCIZDL2 EQU   APCIZV2+4
APCIZNB2 EQU   APCIZV2+6
APCIZFS2 EQU   APCIZV2+8
APCIZF02 EQU   APCIZFS2
APCIZRS2 EQU   APCIZF02
APCIZFP2 EQU   APCIZF02
APCIZFN2 EQU   APCIZF02
APCIZTC2 EQU   APCIZF02
APCIZST2 EQU   APCIZF02
APCIZF12 EQU   APCIZFS2+1
APCIZXB2 EQU   APCIZV2+10
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
APCIZXN2 EQU   APCIZV2+14
APCIZXD2 EQU   APCIZV2+12
@NM00118 EQU   APCIZF12
@NM00117 EQU   APCIZF02
@NM00116 EQU   APCIZF02
APCIZXD1 EQU   APCIZV1+12
@NM00115 EQU   APCIZF11
@NM00114 EQU   APCIZF01
@NM00113 EQU   APCIZF01
APCIAXN3 EQU   APCIAV3+14
APCIAXD3 EQU   APCIAV3+12
APCIAXB3 EQU   APCIAV3+10
@NM00112 EQU   APCIAF13
@NM00111 EQU   APCIAF03
APCIAST3 EQU   APCIAF03
APCIATC3 EQU   APCIAF03
@NM00110 EQU   APCIAF03
APCIAFN3 EQU   APCIAF03
APCIAFP3 EQU   APCIAF03
APCIARS3 EQU   APCIAF03
APCIANB3 EQU   APCIAV3+6
APCIADL3 EQU   APCIAV3+4
APCIABS3 EQU   APCIAV3
APCIAXN2 EQU   APCIAV2+14
APCIAXD2 EQU   APCIAV2+12
APCIAXB2 EQU   APCIAV2+10
@NM00109 EQU   APCIAF12
@NM00108 EQU   APCIAF02
APCIAST2 EQU   APCIAF02
APCIATC2 EQU   APCIAF02
@NM00107 EQU   APCIAF02
APCIAFN2 EQU   APCIAF02
APCIAFP2 EQU   APCIAF02
APCIARS2 EQU   APCIAF02
APCIANB2 EQU   APCIAV2+6
APCIADL2 EQU   APCIAV2+4
APCIABS2 EQU   APCIAV2
APCIAXN1 EQU   APCIAV1+14
APCIAXD1 EQU   APCIAV1+12
APCIAXB1 EQU   APCIAV1+10
@NM00106 EQU   APCIAF11
@NM00105 EQU   APCIAF01
APCIAST1 EQU   APCIAF01
APCIATC1 EQU   APCIAF01
@NM00104 EQU   APCIAF01
APCIAFN1 EQU   APCIAF01
APCIAFP1 EQU   APCIAF01
APCIARS1 EQU   APCIAF01
APCIANB1 EQU   APCIAV1+6
APCIADL1 EQU   APCIAV1+4
APCIABS1 EQU   APCIAV1
@NM00102 EQU   APCIADTA+20
APCIAXN  EQU   APCIAVCT+14
APCIAXD  EQU   APCIAVCT+12
APCIAXB  EQU   APCIAVCT+10
@NM00101 EQU   APCIAF1
@NM00100 EQU   APCIAF0
APCIASTR EQU   APCIAF0
APCIATCM EQU   APCIAF0
@NM00099 EQU   APCIAF0
APCIAFNG EQU   APCIAF0
APCIAFPS EQU   APCIAF0
APCIARSN EQU   APCIAF0
APCIANBR EQU   APCIAVCT+6
APCIADLT EQU   APCIAVCT+4
APCIABSA EQU   APCIAVCT
APCIADO  EQU   APCIADTA+2
@NM00098 EQU   APCIASO1
APCIASSK EQU   APCIASO1
@NM00097 EQU   APCIASO0
APCIASCE EQU   APCIASO0
APCIASUD EQU   APCIASO0
APCIASUF EQU   APCIASO0
APCIASOV EQU   APCIASO0
APCIIBSA EQU   APCIIDTA+4
APCIIX2  EQU   APCIISZ
APCIIX   EQU   APCIIDTA
APCIXBRO EQU   APCIXDTA+10
APCIXBSX EQU   APCIXCC
APCIXBSA EQU   APCIXIMM
APCIXID2 EQU   APCIXDTA+2
APCIXID1 EQU   APCIXDTA
APCIOPCD EQU   APCIOPID+1
APCIOPTP EQU   APCIOPID
@NM00091 EQU   APALIOXF+8
@NM00090 EQU   APALIOXF+2
@NM00089 EQU   APALIOCH
APALIOWR EQU   APALIOCH
APALIORD EQU   APALIOCH
@NM00088 EQU   APALIOTP
APALIOX  EQU   APALIOTP
APALIOBS EQU   APALIOTP
@NM00087 EQU   APALLGCL+4
@NM00086 EQU   APALLI2F
APALLI2S EQU   APALLI2F
APALLI2I EQU   APALLI2F
APALLI2X EQU   APALLI2F
@NM00085 EQU   APALLI1F
APALLI1S EQU   APALLI1F
APALLI1I EQU   APALLI1F
APALLI1X EQU   APALLI1F
APALLTYP EQU   APALLGCL
APINAP4P EQU   APINAP4+1
@NM00066 EQU   APINAP4
APINAP3P EQU   APINAP3+1
@NM00065 EQU   APINAP3
APINAP2P EQU   APINAP2+1
@NM00064 EQU   APINAP2
APINAP1P EQU   APINAP1+1
@NM00063 EQU   APINAP1
@NM00045 EQU   APCTU+48
APCT1MBM EQU   APCTU+16
@NM00044 EQU   APCTZ1+108
@NM00043 EQU   APCTZ1+52
@NM00042 EQU   APCTZ1+48
@NM00041 EQU   APCTZ1+44
@NM00040 EQU   APCTZ1+36
@NM00039 EQU   APCTZ1+32
@NM00038 EQU   APCTZ1+16
@NM00037 EQU   APCTZ1+12
@NM00036 EQU   APCTZ+396
@NM00035 EQU   APCTZ+352
@NM00034 EQU   APCTZ+348
@NM00033 EQU   APCTZ+336
@NM00032 EQU   APCTZ+292
APCTZJFA EQU   APCTZ+228
APCTZMBR EQU   APCTZ+100
@NM00031 EQU   APCTZ+20
APSVWORK EQU   APSV+80
@NM00119 EQU   APSV+80
APSVFREE EQU   APSV+76
APSVAPSM EQU   APSV+72
APSVRG12 EQU   APSVREGS+56
APSVRG11 EQU   APSVREGS+52
APSVRG10 EQU   APSVREGS+48
APSVRG9  EQU   APSVREGS+44
APSVRG8  EQU   APSVREGS+40
APSVRG7  EQU   APSVREGS+36
APSVRG6  EQU   APSVREGS+32
APSVRG5  EQU   APSVREGS+28
APSVRG4  EQU   APSVREGS+24
APSVRG3  EQU   APSVREGS+20
APSVRG2  EQU   APSVREGS+16
APSVRG1  EQU   APSVREGS+12
APSVRG0  EQU   APSVREGS+8
APSVRG15 EQU   APSVREGS+4
APSVRG14 EQU   APSVREGS
APSVNEXT EQU   APSV+8
APSVPREV EQU   APSV+4
APSVAPSC EQU   APSV
APCIHELM EQU   APCI+4
@NM00095 EQU   APCIHDR+4
@NM00094 EQU   APCIHFG1
@NM00093 EQU   APCIHFG0
@NM00092 EQU   APCIHDR
@NM00084 EQU   APALU+5
@NM00083 EQU   APALUFMT
APALUFOP EQU   APALUFMT
APALUFRQ EQU   APALUFMT
@NM00082 EQU   APALUDL
APALUDOP EQU   APALUDL
APALUDRQ EQU   APALUDL
APALUCSD EQU   APALUCT
@NM00081 EQU   APALUCT
APALUCOP EQU   APALUCT
APALUCRQ EQU   APALUCT
@NM00080 EQU   APALUVS
APALUVOP EQU   APALUVS
APALUVRQ EQU   APALUVS
APALUFSR EQU   APALUFSW
APALUFFL EQU   APALUFSW
APALXCNT EQU   APALX+10
@NM00079 EQU   APALX+5
@NM00078 EQU   APALXFMT
APALXFOP EQU   APALXFMT
APALXFRQ EQU   APALXFMT
@NM00077 EQU   APALXDL
APALXDOP EQU   APALXDL
APALXDRQ EQU   APALXDL
APALXCSD EQU   APALXCT
@NM00076 EQU   APALXCT
APALXCOP EQU   APALXCT
APALXCRQ EQU   APALXCT
@NM00075 EQU   APALXVS
APALXVOP EQU   APALXVS
APALXVRQ EQU   APALXVS
APALXFSR EQU   APALXFSW
APALXFFL EQU   APALXFSW
APALYCNT EQU   APALY+10
@NM00074 EQU   APALY+5
@NM00073 EQU   APALYFMT
APALYFOP EQU   APALYFMT
APALYFRQ EQU   APALYFMT
@NM00072 EQU   APALYDL
APALYDOP EQU   APALYDL
APALYDRQ EQU   APALYDL
APALYCSD EQU   APALYCT
@NM00071 EQU   APALYCT
APALYCOP EQU   APALYCT
APALYCRQ EQU   APALYCT
@NM00070 EQU   APALYVS
APALYVOP EQU   APALYVS
APALYVRQ EQU   APALYVS
APALYFXD EQU   APALYFSW
APALYFXC EQU   APALYFSW
APALYFXS EQU   APALYFSW
APALYFSO EQU   APALYFSW
APALYFSR EQU   APALYFSW
APALYFFT EQU   APALYFSW
APALYFFX EQU   APALYFSW
APALYFFL EQU   APALYFSW
@NM00069 EQU   APALALG+1
@NM00068 EQU   APALSTAT
APALSDIV EQU   APALSTAT
APALSCON EQU   APALSTAT
APALSUNF EQU   APALSTAT
APALSOVF EQU   APALSTAT
APALSTKO EQU   APALSTAT
APALSTKR EQU   APALSTAT
@NM00067 EQU   APAL+6
APALUSER EQU   APAL
@NM00061 EQU   APEM+128
APEMSSNM EQU   APEM+124
APEMCM17 EQU   APEM+123
APEMAPRL EQU   APEM+117
APEMCM16 EQU   APEM+116
APEMVALP EQU   APEMVALU
APEMCM15 EQU   APEM+107
@NM00060 EQU   APEMMSG+4
APEMCM13 EQU   APEM+91
APEMCCWC EQU   APEM+85
APEMCM12 EQU   APEM+84
APEMDDN  EQU   APEM+76
APEMCM11 EQU   APEM+75
APEMDVTP EQU   APEM+73
APEMCM10 EQU   APEM+72
APEMUNIT EQU   APEM+69
APEMCM09 EQU   APEM+68
APEMSTEP EQU   APEM+60
APEMCM08 EQU   APEM+59
APEMJOB  EQU   APEM+51
APEMCM07 EQU   APEM+50
APEMCICT EQU   APEM+48
APEMCM06 EQU   APEM+47
APEMCIOP EQU   APEM+43
APEMCM05 EQU   APEM+42
APEMCINM EQU   APEM+38
APEMCM04 EQU   APEM+37
APEMNAME EQU   APEM+33
APEMCM03 EQU   APEM+32
APEMERCD EQU   APEM+26
APEMCM02 EQU   APEM+25
APEMTIME EQU   APEM+18
APEMCM01 EQU   APEM+17
APEMDATE EQU   APEM+12
APEMREG1 EQU   APEM+8
APEMZ2   EQU   APEM+6
APEMSZ2  EQU   APEM+4
APEMZ1   EQU   APEM+2
APEMSZ1  EQU   APEM
@NM00059 EQU   APCW+240
@NM00058 EQU   APCW+112
@NM00057 EQU   APCW+80
@NM00056 EQU   APCW+76
APCWZCNV EQU   APCWINT3
APCWZFLO EQU   APCWINT3
APCWZFLU EQU   APCWINT3
APCWZFLD EQU   APCWINT3
APCWZIDX EQU   APCWINT3
APCWZFLN EQU   APCWINT3
@NM00055 EQU   APCWINT3
APCWZLGC EQU   APCWINT2
APCWZHDW EQU   APCWINT2
APCWZUKN EQU   APCWINT2
@NM00054 EQU   APCWINT2
@NM00053 EQU   APCWINT1
@NM00052 EQU   APCWINT0
APCWRC0  EQU   APCWRCDE
APCWR15B EQU   APCWR15C+3
@NM00051 EQU   APCWR15C
@NM00050 EQU   APCW+60
APCWAPFN EQU   APCW+56
@NM00049 EQU   APCW+52
APCWNBRI EQU   APCW+48
APCWSW1  EQU   APCWSWS+1
@NM00048 EQU   APCWSW0
APCWSVAL EQU   APCWSW0
APCWSIX  EQU   APCWSW0
@NM00047 EQU   APCW+44
@NM00046 EQU   APCW+36
APCWAPCP EQU   APCW+32
APCWAPIO EQU   APCW+28
APCWAPRL EQU   APCW+24
APCWACBF EQU   APCWACB
APCWAPSV EQU   APCW+16
APCWAPUT EQU   APCW+12
APCWUSER EQU   APCW+4
APCWID   EQU   APCW
@NM00030 EQU   APCT+1556
APCTSVCT EQU   APCT+1552
APCTDAVT EQU   APCT+1548
APCTLOGL EQU   APCT+1544
@NM00029 EQU   APCT+1540
APCTDMPU EQU   APCT+1536
APCTDMPM EQU   APCT+1532
APCTNDMP EQU   APCT+1530
APCTASID EQU   APCT+1528
APCTLGPG EQU   APCT+1526
APCTLGLN EQU   APCT+1524
APCTAPVU EQU   APCT+1520
APCTABR  EQU   APCT+1116
APCTACTR EQU   APCT+1112
APCTLOGD EQU   APCT+1108
APCTDCLD EQU   APCT+1104
APCTIOAP EQU   APCT+1100
@NM00028 EQU   APCT+1080
@NM00027 EQU   APCT+1078
APCTKCAX EQU   APCT+1076
APCTABND EQU   APCT+1072
@NM00026 EQU   APCT+1068
APCTAPIO EQU   APCT+1064
APCTCSCT EQU   APCT+1060
APCTSTDF EQU   APCT+1056
APCTSTMX EQU   APCT+1052
APCTRGMX EQU   APCT+1048
APCTSIZE EQU   APCT+1046
APCTCTUB EQU   APCT+1045
APCTMFID EQU   APCT+1044
APCTMFSZ EQU   APCT+1040
APCTCRTN EQU   APCT+1036
APCTAPCP EQU   APCT+1032
APCTAMNA EQU   APCT+1028
APCTEMNA EQU   APCT+1024
APCTAALP EQU   APCT+1020
APCTEALP EQU   APCT+1016
@NM00025 EQU   APCT+1012
@NM00024 EQU   APCT+1008
@NM00023 EQU   APCT+1004
APCTEIPL EQU   APCT+1000
@NM00022 EQU   APCT+996
@NM00021 EQU   APCT+992
@NM00020 EQU   APCT+988
@NM00019 EQU   APCT+984
@NM00018 EQU   APCT+980
APCTECPW EQU   APCT+976
APCTEULD EQU   APCT+972
APCTECPT EQU   APCT+968
APCTEALC EQU   APCT+964
APCTECBL EQU   APCT+960
APCTECIT EQU   APCT+956
APCTCQAF EQU   APCTCQAQ
APCTCQL  EQU   APCTAPCQ+4
APCTCQF  EQU   APCTAPCQ
APCTCQLK EQU   APCT+940
@NM00017 EQU   @NM00013+2
@NM00016 EQU   APCTPRSW
APCTAPST EQU   APCTPRSW
@NM00015 EQU   APCTPRSW
@NM00014 EQU   APCTSTAT
APCTWARM EQU   APCTSTAT
APCTTERM EQU   APCTSTAT
APCTHALT EQU   APCTSTAT
APCTQSCE EQU   APCTSTAT
APCTSTRT EQU   APCTSTAT
APCTACT  EQU   APCTSTAT
APCTVUNX EQU   APCT+935
APCTSOUT EQU   APCT+934
APCTDAID EQU   APCT+933
APCTSV34 EQU   APCT+932
APCTMJOB EQU   APCT+928
APCTTCB  EQU   APCT+924
APCTASCB EQU   APCT+920
APCTDCNW EQU   APCT+918
APCTDCNR EQU   APCT+916
@NM00012 EQU   APCT+912
@NM00011 EQU   APCT+908
@NM00010 EQU   APCT+904
@NM00009 EQU   APCT+900
@NM00008 EQU   APCTERRS+22
APCTERTJ EQU   APCTERRS+20
APCTERTD EQU   APCTERRS+18
APCTERTC EQU   APCTERRS+16
APCTERTB EQU   APCTERRS+14
APCTERTA EQU   APCTERRS+12
APCTERT9 EQU   APCTERRS+10
APCTERT3 EQU   APCTERRS+8
APCTERT2 EQU   APCTERRS+6
APCTERT1 EQU   APCTERRS+4
APCTERT0 EQU   APCTERRS+2
APCTERTT EQU   APCTERRS
APCTDSAP EQU   APCT+872
APCTISUB EQU   APCT+868
APCTUBAP EQU   APCT+864
APCTAPDS EQU   APCT+860
APCTUBIC EQU   APCT+856
APCTUBIS EQU   APCT+852
APCTAPUB EQU   APCT+848
APCTUBLK EQU   APCT+844
APCTBR1A EQU   APCTBR14+2
@NM00007 EQU   APCTBR14
APCTSMSZ EQU   APCTSMAD+2
@NM00006 EQU   APCTSMAD+1
@NM00005 EQU   APCTSMAD
APCTSMIS EQU   APCTSMIN+2
@NM00004 EQU   APCTSMIN+1
APCTSMSP EQU   APCTSMIN
@NM00003 EQU   APCT+30
APCTLINE EQU   APCT+28
APCTLBSZ EQU   APCT+24
APCTREG  EQU   APCT+20
APCTSSID EQU   APCTENQM+4
@NM00002 EQU   APCTENQM
APCTSSVT EQU   APCT+8
APCTUSER EQU   APCT+4
APCTID   EQU   APCT
@NM00001 EQU   IFMFMT
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00127 EQU   @EL00001
@RC00235 EQU   @EL00001
@ENDDATA EQU   *
         END   IGTMDC,(C'PLS1124',0701,77231)
