TUAD     TITLE 'IGTUAD -- GET DYNAMIC STORAGE'
IGTUAD   CSECT ,                   GET CORE ROUTINE
*/* * START OF SPECIFICATIONS ************************************** */
*/*                                                                  */
*/*   MODULE-NAME = IGTUAD                                           */
*/*                                                                  */
*/*   DESCRIPTIVE-NAME = GET DYNAMIC STORAGE                         */
*/*                      (IGTYGSTK MACRO SUPPORT)                    */
*/*                                                                  */
*/*   COPYRIGHT = NONE                                               */
*/*                                                                  */
*/*   STATUS = RELEASE 1, MODIFICATION LEVEL 0.                      */
*/*                                                                  */
*/*   FUNCTION = THIS ROUTINE PROVIDEDS THE CALLER WITH A DYNAMIC    */
*/*       WORKAREA.  IF POSSIBLE, THE STORAGE WILL COME FROM         */
*/*       THE EXTRA STORAGE IN THE CURRENT APSM.  OTHERWISE A NEW    */
*/*       STORAGE BLOCK IS ACQUIRED BY A GETMAIN AND DESCRIBED       */
*/*       BY A NEW APSM.  THIS NEWLY ACQUIRED AREA WILL BE RELEASED  */
*/*       WHEN THE CURRENT SUBROUTINE EXITS.                         */
*/*       THIS ROUTINE SUPPORTS THE IGTYGSTK MACRO.                  */
*/*       STORAGE MANAGEMENT IS LIFO (LAST ACQUIRED STORAGE MUST     */
*/*       BE INITIALLY RELEASED STORAGE).                            */
*/*                                                                  */
*/*   NOTES =                                                        */
*/*     THIS MACRO SUPPORTS THE PARAMETERS REQUIRED FOR THE          */
*/*     GETMAIN R,LV= MACRO.                                         */
*/*                                                                  */
*/*     DEPENDENCIES =                                               */
*/*        REGISTER 13 MUST POINT TO A VPSS EXTENDED SAVEAREA        */
*/*        (APSV) WHICH HAS BEEN CREATED BY IGTUAA, IGTUAD, OR       */
*/*        IGTUAF.                                                   */
*/*                                                                  */
*/*     RESTRICTIONS =                                               */
*/*        SINCE THIS ROUTINE MAY BE ENTERED IN EITHER PROBLEM OR    */
*/*        SUPERVISOR STATE AND IN ANY KEY, THIS PROGRAM MAY NOT     */
*/*        ISSUE PRIVLEDGED INSTRUCTIONS OR UPDATE SYSTEM CONTROL    */
*/*        BLOCKS.                                                   */
*/*        STORAGE MANAGEMENT IS LIFO (LAST ACQUIRED STORAGE MUST    */
*/*        BE INITIALLY RELEASED STORAGE).                           */
*/*                                                                  */
*/*     REGISTER-CONVENTIONS = STANDARD VPSS CONVENTIONS             */
*/*                                                                  */
*/*     PATCH-LABEL = APPATCH                                        */
*/*                                                                  */
*/*   MODULE-TYPE = CSECT                                            */
*/*                                                                  */
*/*     PROCESSOR = VS/2 ASSEMBLER                                   */
*/*                                                                  */
*/*     MODULE SIZE = SEE END OF ASSEMBLER LISTING                   */
*/*                                                                  */
*/*     ATTRIBUTES = RE-ENTRANT.                                     */
*/*                                                                  */
*/*   ENTRY-POINT = IGTUAD                                           */
*/*                                                                  */
*/*     PURPOSE = SAME AS FUNCTION                                   */
*/*                                                                  */
*/*     LINKAGE = ENTERED UNLOCKED, TASK MODE, ENABLED. MAY BE       */
*/*               IN ANY KEY AND EITHER PROBLEM OR SUPERVISOR        */
*/*               STATE.                                             */
*/*                                                                  */
*/*     INPUT = THE FOLLOWING REGISTERS ARE INITIALIZED ON ENTRY     */
*/*             (SET BY MACRO IGTYGSTK) --                           */
*/*         REGISTER  0 - BYTE-0 IGNORED. STORAGE ACQUIRED FROM      */
*/*                       SAME SUBPOOL AS THE SAVEAREA (APSV).       */
*/*                       BYTES 1-3 CONTAIN THE REQUIRED LENGTH      */
*/*                       OF THE NEW WORKAREA.                       */
*/*         REGISTER  1 - IGNORED.                                   */
*/*         REGISTER 12 - ADDRESS OF THE APCT.                       */
*/*         REGISTER 13 - ADDRESS OF CURRENT APSV (VPSS EXTENDED     */
*/*                       SAVEAREA).                                 */
*/*         REGISTER 14 - RETURN ADDRESS                             */
*/*         REGISTER 15 - ADDRESS OF THIS ROUTINE (IGTUAD).          */
*/*                                                                  */
*/*     OUTPUT = A DYNAMIC AREA IS RETURNED TO THE CALLER.  IF       */
*/*              POSSIBLE THE AREA IS CARVED FROM THE REMAINING      */
*/*              FREEAREA IN THE CURRENT APSM.  OTHERWISE A          */
*/*              NEW APSM IS CREATED FOR THE NEWLY ACQUIRED STORAGE. */
*/*              THE NEW APSM IS FREED WHEN THE CURRENT SUBROUTINE   */
*/*              EXITS (OR A IGTYFSTK IS ISSUED).                    */
*/*                                                                  */
*/*   EXIT-NORMAL = THE FOLLOWING REGISTERS ARE RETURNED TO THE      */
*/*                 CALLER --                                        */
*/*                 REGISTER  0 - UNPREDICTABLE                      */
*/*                 REGISTER  1 - ADDRESS OF ACQUIRED DYNAMIC AREA   */
*/*                 REGISTER 2-13 - SAME AS ON INPUT                 */
*/*                 REGISTER 14 - RETURN ADDRESS                     */
*/*                 REGISTER 15 - UNPREDICTABLE                      */
*/*                                                                  */
*/*   EXIT-ERROR  = NONE.                                            */
*/*                                                                  */
*/*   EXTERNAL-REFERENCES = THE FOLLOWING ROUTINES AND               */
*/*                         CONTROL BLOCKS ARE USED.                 */
*/*                                                                  */
*/*     ROUTINES = NONE.                                             */
*/*                                                                  */
*/*     DATA-AREAS = NONE                                            */
*/*                                                                  */
*/*     CONTROL-BLOCKS =                                             */
*/*         APCT     - R                                             */
*/*         APSC     - R, M,    C                                    */
*/*         APSM     - R, M,    C                                    */
*/*         APSV     - R, M                                          */
*/*                                                                  */
*/*   TABLES = NONE                                                  */
*/*                                                                  */
*/*   MACROS =                                                       */
*/*       IGTXEPLG                                                   */
*/*       GETMAIN                                                    */
*/*                                                                  */
*/*   CHANGE-ACTIVITY = NONE                                         */
*/*                                                                  */
*/*   MESSAGES = NONE                                                */
*/*                                                                  */
*/*   ABEND-CODES = NONE                                             */
*/*                                                                  */
*/* * END OF SPECIFICATIONS **************************************** */
         EJECT ,
         COPY  IGTXSYSO            DEFINE SCP CHARACTERISTICS
         SPACE 2
         USING APCT,APCTPTR        VPSS CONTROL TABLE
         USING APSV,APSVPTR        VPSS SAVE AREA
         USING IGTUAD,APENTRY      BASE REGISTER
         SPACE 5
         B     STARTUP             SKIP IDENTIFIER
         DC    YL1(COREIDE-*-1)    LENGTH OF ID
         DC    C'IGTUAD'           CSECT NAME
         DC    C' &SYSDATE'        ASSEMBLY DATE
COREIDE  EQU   *                   END OF ID
         SPACE 2
STARTUP  DS    0H                  START OF CODE
         L     APSCPTR,APSVAPSC    POINT TO STORAGE MANAGEMENT
         USING APSC,APSCPTR        * CONTROL WORD
         AH    RCORESZ,EXTRA       ROUND REQUEST UP TO
         N     RCORESZ,ROUND       * DOUBLEWORD BOUNDARY
         AH    RCORESZ,APSCCRSZ    = AMOUNT OF APSM USED
         CH    RCORESZ,APSCMXSZ    TOO MUCH ?
         BH    TOOMUCH             YES--GO GET NEW BLOCK
*
** NEW WORKAREA CAN BE OBTAINED FROM CURRENT APSM
*
         PUSH  USING               SAVE CURRENT STATUS
         DROP  APENTRY             MODIFYING BASE REGISTER
*                                  * NOTE: NO BASE REGISTER EXISTS
         LH    RTEMPA,APSCCRSZ     SAVE CURRENT USED LENGTH
         STH   RCORESZ,APSCCRSZ    NEW 'CURRENTLY USED' SIZE
         AR    APSCPTR,RTEMPA      DYNAMIC AREA = START OF
*                                  * APSC + PREVIOUS_APSCCRSZ
*                                  * REG 1 -> DYNAMIC AREA
         SPACE 2
         BR    APRETURN            DONE SO RETURN TO CALLER
         SPACE 2
         POP   USING               RESET REG USEAGE
         EJECT ,
TOOMUCH  EQU   *                   CANNOT USE CURRENT APSM
*                                  * MUST ACQUIRE NEW APSM
         SH    RCORESZ,APSCCRSZ    RESTORE REQUIRED SIZE
         DROP  APENTRY             MODIFYING OLD BASE
         L     RTEMPB,APSVAPSM     CURRENT APSM
         L     RTEMPB,APSMREGS-APSM(,RTEMPB) POINT TO
*                                  * REGISTER SAVEAREA
         STM   R2,R14,4*(R2-R0)(RTEMPB) SAVE INPUT REGISTERS
         LR    RREGSPTR,RTEMPB     SAVE POINTER TO REGS
         SPACE 3
         BALR  APCODE,0            ESTABLISH NEW BASE
         USING *,APCODE            TELL ASSEMBLER
*
         LR    RUSERREQ,RCORESZ    SAVE USER'S REQUEST SIZE
         AH    RCORESZ,CAPSMLN1    ALLOW FOR HEADER INFORMATION + APSC
         L     RGETSIZE,APCTSMAD   MINIMUM REQUEST SIZE
         CLR   RCORESZ,RGETSIZE    COMPARE REQUESTED:MINIMUM SIZES
         BNH   USEAPCT             USE MAXIMUM OF THE
         LR    RGETSIZE,RCORESZ    * TWO VALUES
USEAPCT  EQU   *                   RGETSIZE = MAX
         A     RGETSIZE,CARNDPGE   ROUND REQUEST UP TO
         N     RGETSIZE,CRNDPGE    * PAGE SIZE MULTIPLE
         AIF   ('&VPSSSYS' NE 'MVS').VS1A IF MVS SCP, USE SVC 120
         L     RTEMPE,APSVAPSM     USE SUBPOOL FROM PREVIOUS
         IC    R15,APSMSIZE-APSM(RTEMPE) * APSM (MUST BE REG 15)
*                                  * (PROPOGATED FROM INITIAL=YES CALL)
         LR    RCORESZ,RGETSIZE    ALSO SET RCORESZ = MAX
         ICM   RGETSIZE,BYTE0,APSMSIZE-APSM(RTEMPE) SAVE SP FOR FREE
         GETMAIN RU,               UNCONDITIONALLY OBTAIN STORAGE      *
               LV=(0),             * REQUEST LENGTH IN REG 0           *
               SP=(15),            * SUBPOOL IN REGISTER 15            *
               BNDRY=PAGE          * START ON PAGE BOUNDARY
         AGO   .SYSA               SKIP VS1 GENERATE
.VS1A    ANOP  ,                   GENERATE VS1 GETMAIN
         L     RTEMPE,APSVAPSM     USE SUBPOOL FROM PREVIOUS
         ICM   RGETSIZE,BYTE0,APSMSIZE-APSM(RTEMPE) * APSM
*                                  * (PROPOGATED FROM INITIAL=YES CALL)
         LR    RCORESZ,RGETSIZE    ALSO SET RCORESZ = MAX
         GETMAIN R,LV=(0)          OBTAIN REQUESTED STORAGE
.SYSA    ANOP  ,                   GETMAIN GENERATED
*                                  * REG1 -> ACQUIRED AREA
*
** CONSTRUCT NEW APSM AND CHAIN TO PREVIOUS APSM CONTROL BLOCKS
** IN LIFO ORDER. THEN CONSTRUCT USER'S DYNAMIC AREA.
*
         USING APSM,APSMPTR        POINTING TO NEW APSM
         L     RTEMPC,ID           FILL-IN STORAGE IDENTIFIER
         ST    RTEMPC,APSMID       * ('APSM')
         ST    RGETSIZE,APSMSIZE   LENGTH OF APSM
         L     RTEMPC,APSVFREE     FREE THIS APSM WHEN OWNING
         ST    RTEMPC,APSMAPSV     * SUBROUTINE EXITS.
         ST    APSMPTR,APSVFREE    * (LIFO QUEUE).
         L     RTAPSM,APSVAPSM     GET 'CURRENT' APSM
         ST    APSMPTR,APSVAPSM    SHOW NEW 'CURRENT' APSM
         ST    APSMPTR,APSMNEXT-APSM(,RTAPSM) CHAIN APSM ENTRIES
         ST    RTAPSM,APSMPREV     * TOGETHER (FORWARD & BACKWARD)
         SR    RTEMPC,RTEMPC       SHOW NEW APSM IS
         ST    RTEMPC,APSMNEXT     * CURRENT END OF CHAIN.
         ST    RREGSPTR,APSMREGS   PASS STORAGE MANAGEMENT REGISTER
*                                  * SAVEAREA POINTER TO NEW APSM.
*
** OBTAIN USER'S DYNAMIC AREA
*
         LA    APSCPTR,APSMLN0(,APSMPTR) POINT TO APSC
         USING APSC,APSCPTR        * FOLLOWING APSM HEADER
         L     RTEMPD,APSVAPSC     SAVE ADDRESS OF CURRENT
         ST    RTEMPD,APSCAPSC     * APSC (LIFO CHAIN).
         SH    RGETSIZE,CAPSMLN    ELIMINATE HEADER SIZE
         STH   RGETSIZE,APSCMXSZ   MAX LENGTH IN APSC
         LA    RUSERREQ,APSCLN(,RUSERREQ) INCREMENT USER REQUEST
*                                  * SIZE BY SIZE OF APSC
         STH   RUSERREQ,APSCCRSZ   CURRENT LENGTH
         ST    APSCPTR,APSVAPSC-APSV+APSCLN(,APSCPTR) UPDATE
*                                  * SAVEAREA TO POINT TO NEW APSC
         LA    RUSRAREA,APSCLN(,APSCPTR) POINT TO USER'S AREA
         SPACE 2
         LM    R2,R14,4*(R2-R0)(RREGSPTR) RELOAD INPUT REGS
*                                  * REG 1 -> DYNAMIC AREA
         BR    APRETURN            RETURN TO CALLER
         EJECT ,
********************************************************************* *
**                                                                    *
**       CONSTANTS                                                    *
**                                                                    *
********************************************************************* *
         SPACE 2
CAPSMLN1 DC    Y(APSMLN0+APSCLN)   INCREASE USER REQUEST FOR
*                                  * EXTRA CONTROL BLOCKS
CAPSMLN  DC    Y(APSMLN0)          ELIMINATE APSM HEADER FROM
*                                  MAXIMUM SIZE IN APSC
EXTRA    DC    Y(7)                USED TO ROUND VALUE TO MULTIPLE
ROUND    DC    A(X'00007FF8')      * OF 8 (DOUBLEWORD) AND TO CLEAR
*                                  * THE SUBPOOL NUMBER
ID       DC    CL4'APSM'           CONTROL BLOCK IN-CORE IDENTIFIER
         AIF   ('&VPSSSYS' NE 'MVS').VS1B IF MVS, PAGE = 4K
CARNDPGE DC    A(X'00000FFF')      ROUND UP TO PAGE BOUNDARY
CRNDPGE  DC    A(X'00007000')      * CONSTANTS
         AGO   .SYSB               SKIP VS1 VERSIONS OF CONSTANTS
.VS1B    ANOP  ,                   VS1 PAGE SIZE = 2K
CARNDPGE DC    A(X'000007FF')      ROUND UP TO PAGE BOUNDARY
CRNDPGE  DC    A(X'00007800')      * CONSTANTS
.SYSB    ANOP  ,                   PAGE SIZE CONSTANTS GENERATED
         SPACE 5
********************************************************************* *
**                                                                    *
**       EQUATES                                                      *
**                                                                    *
********************************************************************* *
         SPACE 2
BYTE0    EQU   B'1000'             BYTE 0 OF WORD
BYTE1    EQU   B'0100'             BYTE 1 OF WORD
BYTE2    EQU   B'0010'             BYTE 2 OF WORD
BYTE3    EQU   B'0001'             BYTE 3 OF WORD
         SPACE 5
********************************************************************* *
**                                                                    *
**       DEFINE REQUESTED VPSS DSECTS                                 *
**                                                                    *
********************************************************************* *
         SPACE 2
         IGTXDSCT IGTXAPCT         CONTROL TABLE
         IGTXDSCT IGTXAPSC         STORAGE MANAGEMENT CONTROL WORD
         IGTXDSCT IGTXAPSM         STORAGE MANAGEMENT CONTROL BLOCK
         IGTXDSCT IGTXAPSV         SAVEAREA/WORKAREA
         EJECT ,
         IGTXEPLG ,                DSECTS & REGISTERS
RCORESZ  EQU   R0                  REQUESTED DYNAMIC STORAGE SIZE
RTEMPC   EQU   R0                  TEMPORARY VALUE HOLDER
RTEMPD   EQU   R0                  TEMPORARY VALUE HOLDER
RTEMPE   EQU   R1                  TEMPORARY VALUE HOLDER
RUSRAREA EQU   R1                  RETURN POINTER TO USER'S
*                                  * ACQUIRED AREA
RREGSPTR EQU   R3                  POINTER TO SAVE REGISTERS
RGETSIZE EQU   R8                  GETMAIN SIZE (INCLUDES SUBPOOL)
RUSERREQ EQU   R9                  USER STORAGE REQUEST SIZE
RTAPSM   EQU   R10                 TEMPORARY POINTER TO APSM
RTEMPA   EQU   R15                 TEMPORARY VALUE HOLDER
RTEMPB   EQU   R15                 TEMPORARY VALUE HOLDER
         SPACE 5
         END   ,
