TMDB     TITLE 'IGTMDB --- PROCESS CHANNEL TRANSFER REQUEST            *
                        '
IGTMDB   CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'IGTMDB    77.286'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @07,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@07                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         IGTYGSV  R,LV=(0)
         LR    @06,@01                                          01S0001
         USING @DATD,@06                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         LM    @00,@01,20(@13)                                  01S0001
         ST    @06,8(,@13)                                      01S0001
         LR    @13,@06                                          01S0001
         MVC   @PC00001(4),0(@01)                               01S0001
*/*                                                                  */
*/*                                                                  */
*/* END OF APRL                                                      */
*/*                                                                  */
*                                                               01S0040
*                                                               01S0040
*   /*****************************************************************/
*   /*                                                               */
*   /* SET POINTERS FOR CONTROL BLOCKS                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0040
*   DO;                                                         01S0040
*     RFY                                                       01S0041
*       APCWPTR RSTD;                                           01S0041
*     APCWPTR=ADDR(DAPCW);          /* GET APCW                      */
         L     APCWPTR,@PC00001                                 01S0042
*     RFY                                                       01S0043
*       APCW BASED(APCWPTR);                                    01S0043
*     RFY                                                       01S0044
*       APAL BASED(APCWAPAL);       /* GET APAL                      */
*     RFY                                                       01S0045
*       APIN BASED(APCWAPIN);       /* GET APIN                      */
*     RFY                                                       01S0046
*       APEM BASED(ADDR(APCWAPEM)); /* GET APEM                      */
*     RFY                                                       01S0047
*       IFGACB BASED(APCWACB);      /* GET ACB                       */
*     RFY                                                       01S0048
*       APAX BASED(ACBAMWAP);       /* GET APAX                      */
*   END;                                                        01S0049
*                                                               01S0049
*   /*****************************************************************/
*   /*                                                               */
*   /* ZERO WORK AREAS                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0050
*   DO;                                                         01S0050
*     CIT=CIT&&CIT;                 /* ZERO CIT WORK AREA            */
         XC    CIT(12),CIT                                      01S0051
*     CCWENTRY=CCWENTRY&&CCWENTRY;  /* ZERO CCW WORK AREA            */
         XC    CCWENTRY(8),CCWENTRY                             01S0052
*   END;                                                        01S0053
*                                                               01S0053
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD THE CIT AND CCW ENTRIES FOR THIS CALL                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0054
*   DO;                                                         01S0054
*                                                               01S0054
*     /***************************************************************/
*     /*                                                             */
*     /* SET COMMON FIELDS IN THE CIT AND CCW - FUNCTION CODE,CIT    */
*     /* LENGTH AND CCW COMMAND CODE                                 */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0055
*     OPID=APCWAPOP;                /* FUNCTION CODE TO CIT          */
         LH    @09,APCWAPOP(,APCWPTR)                           01S0055
         N     @09,@CF01849                                     01S0055
         STH   @09,OPID                                         01S0055
*     NTRYLGTH=APALCISZ;            /* CIT ENTRY LENGTH(HWORDS) TO
*                                      CIT)                          */
         L     @09,APCWAPAL(,APCWPTR)                           01S0056
         LH    @15,APALCISZ(,@09)                               01S0056
         STH   @15,NTRYLGTH                                     01S0056
*     IF APALIORD=ON THEN           /* IS THIS A READ OPERATION?     */
         TM    APALIORD(@09),B'10000000'                        01S0057
         BNO   @RF00057                                         01S0057
*       CMDCODE=READCCW;            /* YES - SET CCW CODE TO READ    */
         MVI   CMDCODE,X'02'                                    01S0058
*     ELSE                                                      01S0059
*       CMDCODE=WRITECCW;           /* NO - SET CCW CODE TO WRITE    */
*                                                               01S0059
         B     @RC00057                                         01S0059
@RF00057 MVI   CMDCODE,X'01'                                    01S0059
*     /***************************************************************/
*     /*                                                             */
*     /* USE SWITCH IN APAL TO DETERMINE IF THIS IS AN INDEX TRANSFER*/
*     /* OR DATA TRANSFER. IF INDEX TRANSFER, FALL THROUGH AND       */
*     /* EXECUTE FOLLOWING CODE                                      */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0060
*     IF APALIOX=ON THEN            /* IS THIS AN INDEX TRANSFER?    */
@RC00057 L     @09,APCWAPAL(,APCWPTR)                           01S0060
         TM    APALIOX(@09),B'01000000'                         01S0060
         BNO   @RF00060                                         01S0060
*       DO;                         /* YES - BUILD CIT AND CCW FOR
*                                      INDEX TRANSFER                */
*                                                               01S0061
*         /***********************************************************/
*         /*                                                         */
*         /* CIT FORMAT FOR INDEX TRANSFERS IS AS FOLLOWS:           */
*         /* -------------------------------------------- × FUNCTION */
*         /* CODE × ENTRY LENGTH(HWORDS)×                            */
*         /* -------------------------------------------- × 1ST INDEX*/
*         /* ID × 2ND INDEX ID ×                                     */
*         /* -------------------------------------------- FUNCTION   */
*         /* CODE IS X'03' FOR XWR AND X'04 FOR XRD ENTRY LENGTH IS  */
*         /* ALWAYS 4 HALFWORDS INDEX IDS MUST BE IN THE RANGE OF 1  */
*         /* TO 15                                                   */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0062
*         IF(APINCXX>=1)&(APINCXX<=15) THEN                     01S0062
*                                                               01S0062
         L     @09,APCWAPIN(,APCWPTR)                           01S0062
         L     @09,APINACXX(,@09)                               01S0062
         L     @09,APINCXX(,@09)                                01S0062
         C     @09,@CF00061                                     01S0062
         BL    @RF00062                                         01S0062
         C     @09,@CF00107                                     01S0062
         BH    @RF00062                                         01S0062
*           /*********************************************************/
*           /*                                                       */
*           /* IS INDEX ID VALID?                                    */
*           /*                                                       */
*           /*********************************************************/
*                                                               01S0063
*           INDEXID1=APINCXX;       /* YES - MOVE IT TO CIT          */
         STH   @09,INDEXID1                                     01S0063
*         ELSE                                                  01S0064
*           DO;                     /* NO - SET ERROR INDICATORS AND
*                                      RETURN                        */
         B     @RC00062                                         01S0064
@RF00062 DS    0H                                               01S0065
*             APCWR15C=APCCRERR;    /* PROVIDE R15 RETURN CODE       */
         MVC   APCWR15C(4,APCWPTR),@CF00056                     01S0065
*             APCWRCT=APCCTLOG;     /* INDICATE ERROR TYPE AS LOGICAL*/
         MVI   APCWRCT(APCWPTR),X'08'                           01S0066
*             APCWRCC=APCCZ;        /* INDICATE COMPONENT ID         */
         MVI   APCWRCC(APCWPTR),X'08'                           01S0067
*             APCWRCN=APCCZ001;     /* SET ERROR NUMBER              */
         MVI   APCWRCN(APCWPTR),X'01'                           01S0068
*             APCWZAM=ON;           /* SET FLAG TO INDICATE ERROR    */
         OI    APCWZAM(APCWPTR),B'00000001'                     01S0069
*             APEMMSGN=APCMZ001;    /* SET MESSAGE NUMBER FOR OUT OF
*                                      RANGE                         */
         LA    @09,112                                          01S0070
         ALR   @09,APCWPTR                                      01S0070
         MVC   APEMMSGN(4,@09),@CF00129                         01S0070
*             APEMVALN=APCMK038;    /* SET KEYWORD NUMBER - IVAL     */
         MVC   APEMVALN(4,@09),@CF00950                         01S0071
*             RETURN;               /* RETURN TO CALLER              */
@EL00001 L     @13,4(,@13)                                      01S0072
@EF00001 L     @00,@SIZDATD                                     01S0072
         LR    @01,@06                                          01S0072
         IGTYFSV  R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                  01S0072
         BR    @14                                              01S0072
*           END;                                                01S0073
*         INDEXID2=APINCXX+APINCXC-1;                           01S0074
*                                                               01S0074
@RC00062 L     @09,APCWAPIN(,APCWPTR)                           01S0074
         L     @01,APINACXX(,@09)                               01S0074
         L     @09,APINACXC(,@09)                               01S0074
         L     @15,APINCXX(,@01)                                01S0074
         AL    @15,APINCXC(,@09)                                01S0074
         BCTR  @15,0                                            01S0074
         STH   @15,INDEXID2                                     01S0074
*         /***********************************************************/
*         /*                                                         */
*         /* DETERMINE END INDEX VALUE USING ICTY - NUMBER OF INDEXES*/
*         /* TO TRANSFER                                             */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0075
*         IF(INDEXID2<INDEXID1)×(INDEXID2>15) THEN              01S0075
*                                                               01S0075
         CLC   INDEXID2(2),INDEXID1                             01S0075
         BL    @RT00075                                         01S0075
         C     @15,@CF00107                                     01S0075
         BNH   @RF00075                                         01S0075
@RT00075 DS    0H                                               01S0076
*           /*********************************************************/
*           /*                                                       */
*           /* IS END INDEX ID VALID?                                */
*           /*                                                       */
*           /*********************************************************/
*                                                               01S0076
*           DO;                     /* NO SET ERROR INDICATORS TO
*                                      CAUSE OUTPUT OF MESSAGE " OUT
*                                      OF RANGE "                    */
*             APCWR15C=APCCRERR;    /* PROVIDE R15 RETURN CODE       */
         MVC   APCWR15C(4,APCWPTR),@CF00056                     01S0077
*             APCWRCT=APCCTLOG;     /* SET ERROR TYPE AS LOGICAL     */
         MVI   APCWRCT(APCWPTR),X'08'                           01S0078
*             APCWRCC=APCCZ;        /* INDICATE COMPONENT ID         */
         MVI   APCWRCC(APCWPTR),X'08'                           01S0079
*             APCWRCN=APCCZ002;     /* INDICATE ERROR NUMBER         */
         MVI   APCWRCN(APCWPTR),X'02'                           01S0080
*             APCWZAM=ON;           /* SET FLAG TO INDICATE ERROR
*                                      DETECTED                      */
         OI    APCWZAM(APCWPTR),B'00000001'                     01S0081
*             APEMMSGN=APCMZ002;    /* SET MESSAGE NUMBER FOR OUT OF
*                                      RANGE                         */
         LA    @09,112                                          01S0082
         ALR   @09,APCWPTR                                      01S0082
         MVC   APEMMSGN(4,@09),@CF00129                         01S0082
*             APEMVALN=APCMK018;    /* SET KEYWORD NUMBER FOR ICTY   */
         MVC   APEMVALN(4,@09),@CF00860                         01S0083
*             RETURN;               /* RETURN TO CALLER              */
         B     @EL00001                                         01S0084
*           END;                                                01S0085
*         ELSE                                                  01S0086
*           ;                       /* NO ERROR - CONTINUE           */
@RF00075 DS    0H                                               01S0087
*         DATADDR=APINACXS;         /* STORE S/370 DATA ADDRESS IN
*                                      CCW                           */
         L     @09,APCWAPIN(,APCWPTR)                           01S0087
         MVC   DATADDR(3),APINACXS+1(@09)                       01S0087
*         CCFLAG=ON;                /* TURN ON COMMAND CHAIN FLAG    */
         OI    CCFLAG,B'01000000'                               01S0088
*         BYTCOUNT=4*APINCXC;       /* SET CCW BYTE COUNT AS NUMBER
*                                      OF INDEXES TO BE TRANSFERRED
*                                      TIMES FOUR BYTES/INDEX ID     */
         L     @09,APINACXC(,@09)                               01S0089
         L     @09,APINCXC(,@09)                                01S0089
         SLA   @09,2                                            01S0089
         STH   @09,BYTCOUNT                                     01S0089
*         APAXIOCT=APAXIOCT&&APAXIOCT;                          01S0090
*                                                               01S0090
         L     @09,APCWACB(,APCWPTR)                            01S0090
         L     @09,ACBAMWAP(,@09)                               01S0090
         L     @15,APAXIOCT(,@09)                               01S0090
         LR    @14,@15                                          01S0090
         XR    @14,@15                                          01S0090
         ST    @14,APAXIOCT(,@09)                               01S0090
*         /***********************************************************/
*         /*                                                         */
*         /* SET NUMBER OF WORDS IN CURRENT DATA TO ZERO (NO DATA    */
*         /* CHAINING FOR INDEX TRANSFERS)                           */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0091
*         CALL APCVZMIB(CCWENTRY,ERRORBIT);/* MOVE CCW FROM WORK AREA
*                                      TO USER'S CCW TABLE           */
         LA    @09,CCWENTRY                                     01S0091
         ST    @09,@AL00001                                     01S0091
         LA    @09,ERRORBIT                                     01S0091
         ST    @09,@AL00001+4                                   01S0091
         L     @15,APCTZMIB(,APCTPTR)                           01S0091
         LA    @01,@AL00001                                     01S0091
         BALR  @14,@15                                          01S0091
*         IF ERRORBIT=ON THEN       /* TEST IF MOVE WAS SUCCESSFUL   */
         TM    ERRORBIT,B'10000000'                             01S0092
         BO    @RT00092                                         01S0092
*           RETURN;                 /* NO - RETURN TO CALLER         */
*         ELSE                                                  01S0094
*           ;                       /* YES - CONTINUE                */
*         CITLGTH=NTRYLGTH/2;       /* INDICATE NUMBER OF WORDS TO
*                                      MOVE FROM WORK AREA TO CIT    */
         LH    @09,NTRYLGTH                                     01S0095
         N     @09,@CF01849                                     01S0095
         SRL   @09,1                                            01S0095
         ST    @09,CITLGTH                                      01S0095
*         CALL APCVZMIC(CIT,CITLGTH,ERRORBIT);/* MOVE CIT ENTRY FROM
*                                      WORK AREA TO USER'S CIT       */
         LA    @09,CIT                                          01S0096
         ST    @09,@AL00001                                     01S0096
         LA    @09,CITLGTH                                      01S0096
         ST    @09,@AL00001+4                                   01S0096
         LA    @09,ERRORBIT                                     01S0096
         ST    @09,@AL00001+8                                   01S0096
         L     @15,APCTZMIC(,APCTPTR)                           01S0096
         LA    @01,@AL00001                                     01S0096
         BALR  @14,@15                                          01S0096
*         IF ERRORBIT=ON THEN       /* WAS MOVE SUCCESSFUL?          */
         TM    ERRORBIT,B'10000000'                             01S0097
         BO    @RT00097                                         01S0097
*           RETURN;                 /* NO - RETURN                   */
*         ELSE                                                  01S0099
*           ;                       /* NO - THIS CONCLUDES IGTMDB
*                                      WORK FOR INDEX TRANSFERS      */
*       END;                                                    01S0100
*                                                               01S0100
*     /***************************************************************/
*     /*                                                             */
*     /* EXECUTE THE FOLLOWING CODE FOR VPUT AND VGET. CCWS ARE      */
*     /* CONSTRUCTED AS FOLLOWS: THE PREVIOUS CIT ENTRY IS EXAMINED  */
*     /* TO DETERMINE IF THIS REQUEST CAN BE CHAINED OR COMBINED WITH*/
*     /* THE PREVIOUS REQUEST. IT CAN BE CHAINED IF THE OPERATION    */
*     /* CODES ARE THE SAME, THE INDEX IDS ARE THE SAME AND BULK     */
*     /* STORE ADDRESSES ARE CONTIGUOUS. IT CAN BE COMBINED IF THE   */
*     /* PREVIOUS QUALIFICATIONS ARE MET AND AND S/370 ADDRESSES ARE */
*     /* ALSO CONTIGUOUS. CHAINING IS RESTRICTED TO 65532 WORDS SINCE*/
*     /* THIS IS THE MAXIMUM NUMBER OF WORDS ALLOWED IN THE 3838 IOCW*/
*     /* CHAIN. IF THE MAXIMUM IS EXCEEDED, A NEW CIT ENTRY IS BUILT,*/
*     /* THE CHAIN IS ENDED AND A NEW CHAIN IS STARTED. CCWS ARE     */
*     /* RESTRICTED TO A MAXIMUM BYTE COUNT FOR THIS SYSTEM. IF IT IS*/
*     /* EXCEEDED, A NEW CCW WILL BE ADDED TO THE CURRENT CCW CHAIN. */
*     /* CIT FORMAT FOR VPUT AND VGET IS:                            */
*     /* ----------------------------------------------- × FUNCTION  */
*     /* CODE × ENTRY LENGTH(HWORDS) ×                               */
*     /* ----------------------------------------------- × INDEX ID ×*/
*     /* WORD COUNT × -----------------------------------------------*/
*     /* × RELATIVE 3838 BULK STORE ADDRESS ×                        */
*     /* ----------------------------------------------- FUNCTION    */
*     /* CODE IS X'01' FOR VPUT, X'02' FOR VGET ENTRY LENGTH IS 6    */
*     /* HALFWORDS INDEX ID MUST BE IN RANGE OF 0 TO 15 WORD COUNT   */
*     /* MUST BE LESS THAN OR EQUAL 65532                            */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0101
*     ELSE                                                      01S0101
*       DO;                         /* BUILD CIT AND CCWS            */
         B     @RC00060                                         01S0101
@RF00060 DS    0H                                               01S0102
*         IF(APINCHX>=0)&(APINCHX<=15) THEN                     01S0102
*                                                               01S0102
         L     @09,APCWAPIN(,APCWPTR)                           01S0102
         L     @09,APINACHX(,@09)                               01S0102
         L     @09,APINCHX(,@09)                                01S0102
         LTR   @09,@09                                          01S0102
         BM    @RF00102                                         01S0102
         C     @09,@CF00107                                     01S0102
         BH    @RF00102                                         01S0102
*           /*********************************************************/
*           /*                                                       */
*           /* IS INDEX ID VALID?                                    */
*           /*                                                       */
*           /*********************************************************/
*                                                               01S0103
*           INDEXID1=APINCHX;       /* YES - MOVE IT TO CIT          */
         STH   @09,INDEXID1                                     01S0103
*         ELSE                      /* NO - SET ERROR INDICATORS TO
*                                      CAUSE OUTPUT OF ERROR MESSAGE
*                                      "OUT OF RANGE"                */
*           DO;                                                 01S0104
         B     @RC00102                                         01S0104
@RF00102 DS    0H                                               01S0105
*             APCWR15C=APCCRERR;    /* PROVIDE R15 RETURN CODE       */
         MVC   APCWR15C(4,APCWPTR),@CF00056                     01S0105
*             APCWRCT=APCCTLOG;     /* INDICATE ERROR TYPE AS LOGICAL*/
         MVI   APCWRCT(APCWPTR),X'08'                           01S0106
*             APCWRCC=APCCZ;        /* INDICATE COMPONENT ID         */
         MVI   APCWRCC(APCWPTR),X'08'                           01S0107
*             APCWRCN=APCCZ004;     /* GIVE ERROR NUMBER             */
         MVI   APCWRCN(APCWPTR),X'04'                           01S0108
*             APCWZAM=ON;           /* INDICATE ERROR DETECTED       */
         OI    APCWZAM(APCWPTR),B'00000001'                     01S0109
*             APEMMSGN=APCMZ004;    /* SET MESSAGE NUMBER            */
         LA    @09,112                                          01S0110
         ALR   @09,APCWPTR                                      01S0110
         MVC   APEMMSGN(4,@09),@CF00129                         01S0110
*             APEMVALN=APCMK027;    /* INDICATE KEYWORD IN ERROR AS
*                                      XARRVX                        */
         MVC   APEMVALN(4,@09),@CF00876                         01S0111
*             RETURN;               /* RETURN TO CALLER              */
         B     @EL00001                                         01S0112
*           END;                                                01S0113
*         COUNT=APINCHC;            /* GET WORD COUNT FOR THIS CALL  */
@RC00102 L     @09,APCWAPIN(,APCWPTR)                           01S0114
         L     @09,APINACHC(,@09)                               01S0114
         L     COUNT,APINCHC(,@09)                              01S0114
*         IF COUNT<=0 THEN          /* IF TRANSFER COUNT IS  @ZA25371*/
         LTR   COUNT,COUNT                                      01S0115
         BP    @RF00115                                         01S0115
*           DO;                     /* NON-POSITIVE, IS ERROR.  01S0116
*                                                            @ZA25371*/
*             APCWR15C=APCCRERR;    /* R15 RETURN CODE       @ZA25371*/
         MVC   APCWR15C(4,APCWPTR),@CF00056                     01S0117
*             APCWRCT=APCCTLOG;     /* LOGICAL ERROR         @ZA25371*/
         MVI   APCWRCT(APCWPTR),X'08'                           01S0118
*             APCWRCC=APCCZ;        /* COMPONENT ID          @ZA25371*/
         MVI   APCWRCC(APCWPTR),X'08'                           01S0119
*             APCWRCN=APCCZ002;     /* ERROR NUMBER          @ZA25371*/
         MVI   APCWRCN(APCWPTR),X'02'                           01S0120
*             APCWZAM=ON;           /* SHOW ERROR DETECTED   @ZA25371*/
         OI    APCWZAM(APCWPTR),B'00000001'                     01S0121
*             APEMMSGN=APCMZ002;    /* SET MESSAGE NUMBER FOR   01S0122
*                                                            @ZA25371
*                                      OUT OF RANGE          @ZA25371*/
         LA    @09,112                                          01S0122
         ALR   @09,APCWPTR                                      01S0122
         MVC   APEMMSGN(4,@09),@CF00129                         01S0122
*             APEMVALN=APCMK018;    /* KEYWORD = ICTY        @ZA25371*/
         MVC   APEMVALN(4,@09),@CF00860                         01S0123
*             RETURN;               /* RETURN TO CALLER      @ZA25371*/
         B     @EL00001                                         01S0124
*           END;                    /* ERROR PROCESSED               */
*         BULKSTOR=APINACHB;        /* GET BULK STORE ADDRESS        */
@RF00115 L     @09,APCWAPIN(,APCWPTR)                           01S0126
         L     @09,APINACHB(,@09)                               01S0126
         ST    @09,BULKSTOR                                     01S0126
*         CALL APCVZMIF(BULKSTOR,RSOLVERR);/* RESOLVE 3838 ADDRESS   */
         LA    @09,BULKSTOR                                     01S0127
         ST    @09,@AL00001                                     01S0127
         LA    @09,RSOLVERR                                     01S0127
         ST    @09,@AL00001+4                                   01S0127
         L     @15,APCTZMIF(,APCTPTR)                           01S0127
         LA    @01,@AL00001                                     01S0127
         BALR  @14,@15                                          01S0127
*         IF RSOLVERR^=0 THEN       /* IF ERROR RETURN WORD INDICATES
*                                      ERROR. DETERMINE WHAT THE
*                                      ERROR IS AND SET UP THE ERROR
*                                      INDICATORS                    */
         L     @09,RSOLVERR                                     01S0128
         LTR   @09,@09                                          01S0128
         BZ    @RF00128                                         01S0128
*           DO;                     /* SET ERROR INDICATORS          */
*             APCWZAM=ON;           /* FLAG ERROR TO CALL ROUTER     */
         OI    APCWZAM(APCWPTR),B'00000001'                     01S0130
*             APCWR15C=APCCRERR;    /* PROVIDE REGISTER 15 RETURN
*                                      CODE                          */
         MVC   APCWR15C(4,APCWPTR),@CF00056                     01S0131
*             APCWRCT=APCCTLOG;     /* INDICATE LOGICAL ERROR TYPE   */
         MVI   APCWRCT(APCWPTR),X'08'                           01S0132
*             APCWRCC=APCCZ;        /* INDICATE COMPONENT ID AS 01S0133
*                                      CHANNEL TRANSFER BUILD        */
         MVI   APCWRCC(APCWPTR),X'08'                           01S0133
*             APEMVALN=APCMK024;    /* KEYWORD NUMBER FOR XARRV      */
         LA    @15,112                                          01S0134
         ALR   @15,APCWPTR                                      01S0134
         MVC   APEMVALN(4,@15),@CF00058                         01S0134
*             IF RSOLVERR=BDYERROR THEN/* BOUNDARY PROBLEM?          */
         C     @09,@CF00061                                     01S0135
         BNE   @RF00135                                         01S0135
*               DO;                 /* YES - SET ERROR INDICATORS FOR
*                                      XARRV NOT A WORD BOUNDARY     */
*                 APCWRCN=APCCZ003; /* ERROR NUMBER FOR XARRV NOT ON
*                                      A WORD BOUNDARY               */
         MVI   APCWRCN(APCWPTR),X'03'                           01S0137
*                 APEMMSGN=APCMZ003;/* MESSAGE NUMBER FOR NOT A WORD
*                                      BOUNDARY                      */
         MVC   APEMMSGN(4,@15),@CF00081                         01S0138
*               END;                /* END OF SEGMENT                */
*             ELSE                  /* CHECK RANGE                   */
*               IF RSOLVERR=RNGERROR THEN/* RANGE ERROR?             */
         B     @RC00135                                         01S0140
@RF00135 CLC   RSOLVERR(4),@CF00083                             01S0140
         BNE   @RF00140                                         01S0140
*                 DO;               /* SET ERROR INDICATORS FOR XARRV
*                                      OUT OF RANGE                  */
*                   APCWRCN=APCCZ005;/* ERROR NUMBER FOR XARRV OUT OF
*                                      RANGE                         */
         MVI   APCWRCN(APCWPTR),X'05'                           01S0142
*                   APEMMSGN=APCMZ005;/* MESSAGE NUMBER FOR OUT OF OF
*                                      RANGE                         */
         MVC   APEMMSGN+112(4,APCWPTR),@CF00129                 01S0143
*                 END;              /* END OF SEGMENT                */
*               ELSE                                            01S0145
*                 ;                 /* NULL                          */
@RF00140 DS    0H                                               01S0146
*             RETURN;               /* RETURN TO CALLER              */
         B     @EL00001                                         01S0146
*           END;                    /* END OF SEGMENT                */
*         ELSE                                                  01S0148
*           ;                       /* NULL - NO MIF ERROR           */
@RF00128 DS    0H                                               01S0149
*         START=APINACHS;           /* GET ADDRESS OF S/370 DATA AREA*/
*                                                               01S0149
         L     @09,APCWAPIN(,APCWPTR)                           01S0149
         L     @09,APINACHS(,@09)                               01S0149
         ST    @09,START                                        01S0149
*         /***********************************************************/
*         /*                                                         */
*         /* DATA CHAINING ON A TWO BYTE MULTIPLEXER CHANNEL REQUIRES*/
*         /* THAT DATA IN S/370 BE ON A FULLWORD BOUNDARY. THUS, IT  */
*         /* IS MADE TO BE A RESTRICTION FOR ALL VPUT AND VGET CALLS */
*         /* SO THAT MOST EFFICIENT USE WILL BE MADE OF THE CHANNEL  */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0150
*         IF WORDBITS^=WORDBDY THEN /* TEST IF YARRV IS ON A FULLWORD
*                                      BOUNDARY                      */
         TM    WORDBITS,B'00000011'                             01S0150
         BZ    @RF00150                                         01S0150
*           DO;                     /* SET ERROR INDICATORS FOR NOT A
*                                      WORD BDY - YARRV              */
*             APCWZAM=ON;           /* FLAG ERROR TO CALL ROUTER     */
         OI    APCWZAM(APCWPTR),B'00000001'                     01S0152
*             APCWR15C=APCCRERR;    /* PROVIDE REGISTER 15 RETURN
*                                      CODE                          */
         MVC   APCWR15C(4,APCWPTR),@CF00056                     01S0153
*             APCWRCT=APCCTLOG;     /* FLAG AS LOGICAL ERROR         */
         MVI   APCWRCT(APCWPTR),X'08'                           01S0154
*             APCWRCC=APCCZ;        /* SET COMPONENT ID AS CHANNEL
*                                      TRANSFER BUILD PROCESSING     */
         MVI   APCWRCC(APCWPTR),X'08'                           01S0155
*             APCWRCN=APCCZ006;     /* SET ERROR NUMBER FOR YARRV NOT
*                                      ON A WORD BOUNDARY            */
         MVI   APCWRCN(APCWPTR),X'06'                           01S0156
*             APEMMSGN=APCMZ006;    /* SET MESSAGE NUMBER FOR NOT A
*                                      WORD BOUNDARY                 */
         LA    @09,112                                          01S0157
         ALR   @09,APCWPTR                                      01S0157
         MVC   APEMMSGN(4,@09),@CF00081                         01S0157
*             APEMVALN=APCMK017;    /* SET KEYWORD NUMBER FOR YARRV  */
         MVC   APEMVALN(4,@09),@CF00858                         01S0158
*             RETURN;               /* RETURN TO CALLER              */
         B     @EL00001                                         01S0159
*           END;                    /* END OF YARRV BOUNDARY ERROR
*                                      PROCESSING                    */
*         ELSE                                                  01S0161
*           ;                       /* YARRV IS ON A FULLWORD   01S0161
*                                      BOUNDARY                      */
@RF00150 DS    0H                                               01S0162
*         RFY                                                   01S0162
*           APRL BASED(R1P);        /* DUMMY POINTER         @ZA26916*/
*         NOCHAIN=OFF;              /* SET NOCHAIN ON        @ZA26916*/
         NI    NOCHAIN,B'01111111'                              01S0163
*         IF((ADDR(APAXSTAT)-(ADDR(APRLOPTZ)-ADDR(APRL)))->/*   01S0164
*                                                            @ZA26916*/
*             APRLRXLT)=ON THEN     /* IF RE-TRANSLATION     @ZA26916*/
         L     @09,APCWACB(,APCWPTR)                            01S0164
         L     @09,ACBAMWAP(,@09)                               01S0164
         LA    @09,APAXSTAT(,@09)                               01S0164
         TM    APRLRXLT-56(@09),B'00000100'                     01S0164
         BNO   @RF00164                                         01S0164
*           NOCHAIN=ON;             /* REQUESTED BY USER.    @ZA26916*/
         OI    NOCHAIN,B'10000000'                              01S0165
*         ELSE                                                  01S0166
*           ;                       /* OTHERWISE ALLOW DC.   @ZA26916*/
@RF00164 DS    0H                                               01S0167
*         RFY                                                   01S0167
*           APRL;                   /* DONE WITH APRL        @ZA26916*/
*         IF(NOCHAIN=ON)&((COUNT*4)>MAXBYTES) THEN/* IF      @ZA26916*/
         TM    NOCHAIN,B'10000000'                              01S0168
         BNO   @RF00168                                         01S0168
         LR    @09,COUNT                                        01S0168
         SLA   @09,2                                            01S0168
         C     @09,@CF00096                                     01S0168
         BNH   @RF00168                                         01S0168
*           DO;                     /* DATA CHAINING NOT     @ZA26916*/
*             APCWR15C=APCCRERR;    /* ALLOWED, COUNT MUST   @ZA26916*/
         MVC   APCWR15C(4,APCWPTR),@CF00056                     01S0170
*             APCWRCT=APCCTLOG;     /* BE TRANSFERRABLE IN   @ZA26916*/
         MVI   APCWRCT(APCWPTR),X'08'                           01S0171
*             APCWRCC=APCCZ;        /* ONE CCW, ELSE IS AN   @ZA26916*/
         MVI   APCWRCC(APCWPTR),X'08'                           01S0172
*             APCWZAM=ON;           /* ERROR.                @ZA26916*/
         OI    APCWZAM(APCWPTR),B'00000001'                     01S0173
*             APCWRCN=APCCZ002;     /* SET ERROR CODES AND   @ZA26916*/
         MVI   APCWRCN(APCWPTR),X'02'                           01S0174
*             APEMMSGN=APCMZ002;    /* RETURN TO THE CALLER  @ZA26916*/
         LA    @09,112                                          01S0175
         ALR   @09,APCWPTR                                      01S0175
         MVC   APEMMSGN(4,@09),@CF00129                         01S0175
*             APEMVALN=APCMK018;    /*                       @ZA26916*/
         MVC   APEMVALN(4,@09),@CF00860                         01S0176
*             RETURN;               /*                       @ZA26916*/
         B     @EL00001                                         01S0177
*           END;                    /* ERROR PROCESSED       @ZA26916*/
*         ELSE                                                  01S0179
*           ;                       /* COUNT OK.             @ZA26916*/
@RF00168 DS    0H                                               01S0180
*         RFY                                                   01S0180
*           LASTCCW BASED(APAXCCWN-8);/* ACCESS LAST CCW             */
*         RFY                                                   01S0181
*           LASTCIT BASED(APAXLCIT);/* ACCESS LAST CIT ENTRY         */
*                                                               01S0181
*         /***********************************************************/
*         /*                                                         */
*         /* TEST IF THIS OPERATION QUALIFIES FOR DATA CHAINING TO   */
*         /* THE LAST 3838 OPERATION. REQUIREMENTS ARE: 1) MUST BE A */
*         /* CONSECUTIVE VPUT OR VGET , 2) INDEX IDS USED MUST MUST  */
*         /* BE ALIKE, 3) 3838 BULK STORE ADDRESSES MUST BE          */
*         /* CONTIGUOUS. THE FOLLOWING MUST ALSO BE TRUE IN ORDER TO */
*         /* SATISFY A TWO BYTE MULTIPLEXER CHANNEL INTERFACE: THE   */
*         /* BYTE COUNT MUST EXCEED A CERTAIN THRESHHOLD (THRESHHOLDS*/
*         /* DIFFER FOR READ AND WRITE - SEE APCT). THIS RESTRICTION */
*         /* IS FOLLOWED IN SUBSEQUENT STEPS WHEN THE CCWS ARE       */
*         /* ACTUALLY BUILT                                          */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0182
*         IF(LASTOPID=OPID)&        /* TEST ELIGIBILITY FOR          */
*             (NOCHAIN=OFF)&        /* DATA CHAINING OK &    @ZA26916*/
*             (LASTNDEX=INDEXID1)&  /* DATA CHAINING TO LAST         */
*             (BULKSTOR=LASTBULK+LASTCNT)&/* OPERATION               */
*             (((CMDCODE=READCCW)&((COUNT*4)>=APCTDCNR))×((CMDCODE=
*             WRITECCW)&((COUNT*4)>=APCTDCNW))) THEN            01S0182
         L     @09,APCWACB(,APCWPTR)                            01S0182
         L     @09,ACBAMWAP(,@09)                               01S0182
         L     @09,APAXLCIT(,@09)                               01S0182
         CLC   LASTOPID(2,@09),OPID                             01S0182
         BNE   @RF00182                                         01S0182
         TM    NOCHAIN,B'10000000'                              01S0182
         BNZ   @RF00182                                         01S0182
         CLC   LASTNDEX(2,@09),INDEXID1                         01S0182
         BNE   @RF00182                                         01S0182
         LH    @02,LASTCNT(,@09)                                01S0182
         N     @02,@CF01849                                     01S0182
         AL    @02,LASTBULK(,@09)                               01S0182
         C     @02,BULKSTOR                                     01S0182
         BNE   @RF00182                                         01S0182
         CLI   CMDCODE,2                                        01S0182
         BNE   @GL00009                                         01S0182
         LR    @09,COUNT                                        01S0182
         SLA   @09,2                                            01S0182
         CH    @09,APCTDCNR(,APCTPTR)                           01S0182
         BNL   @RT00182                                         01S0182
@GL00009 CLI   CMDCODE,1                                        01S0182
         BNE   @RF00182                                         01S0182
         LR    @09,COUNT                                        01S0182
         SLA   @09,2                                            01S0182
         CH    @09,APCTDCNW(,APCTPTR)                           01S0182
         BL    @RF00182                                         01S0182
@RT00182 DS    0H                                               01S0183
*           DO;                     /* YES - RESET TO USE LAST CCW
*                                      AND REBUILD IT                */
*             LASTCC=OFF;           /* TURN OFF COMMAND CHAINING     */
*             LASTCD=ON;            /* TURN ON DATA CHAINING         */
         L     @09,APCWACB(,APCWPTR)                            01S0185
         L     @09,ACBAMWAP(,@09)                               01S0185
         L     @02,APAXCCWN(,@09)                               01S0185
         SL    @02,@CF00056                                     01S0185
         OI    LASTCD(@02),B'10000000'                          01S0185
         NI    LASTCC(@02),B'10111111'                          01S0185
*             APAXCIN=APAXLCIT;     /* RESET POINTER TO NEXT CIT
*                                      ENTRY TO ADDRESS OF LAST CIT
*                                      ENTRY                         */
         L     @15,APAXLCIT(,@09)                               01S0186
         ST    @15,APAXCIN(,@09)                                01S0186
*             BULKSTOR=LASTBULK;    /* BACK UP TO LAST BULK STORE
*                                      ADDRESS                       */
         L     @15,LASTBULK(,@15)                               01S0187
         ST    @15,BULKSTOR                                     01S0187
*             IF START=LASTADDR+LASTXCNT THEN/* TEST IF CCW MODIFI-
*                                      CATION APPLIES - ARE S/370
*                                      ADDRESSES ALSO CONTIGUOUS?    */
         L     @15,LASTADDR-1(,@02)                             01S0188
         LA    @15,0(,@15)                                      01S0188
         LH    @14,LASTXCNT(,@02)                               01S0188
         N     @14,@CF01849                                     01S0188
         LR    @11,@15                                          01S0188
         ALR   @11,@14                                          01S0188
         C     @11,START                                        01S0188
         BNE   @RF00188                                         01S0188
*               DO;                 /* YES - RESET TO USE LAST CCW   */
*                 START=LASTADDR;   /* USE LAST S/370 DATA ADDRESS   */
         ST    @15,START                                        01S0190
*                 COUNT=COUNT+LASTXCNT/4;/* RESET WORD COUNT TO THE
*                                      WORD COUNT FOR THIS CALL PLUS
*                                      THE WORD COUNT OF LAST CALL   */
         LR    @15,@14                                          01S0191
         SRL   @15,2                                            01S0191
         ALR   COUNT,@15                                        01S0191
*                 APAXIOCT=APAXIOCT-LASTXCNT/4;/* BACK UP THE COUNT
*                                      OF WORDS IN THE DATA CHAIN    */
         SRL   @14,2                                            01S0192
         LCR   @14,@14                                          01S0192
         AL    @14,APAXIOCT(,@09)                               01S0192
         ST    @14,APAXIOCT(,@09)                               01S0192
*                 APAXCCWN=APAXCCWN-8;/* RESET POINTER TO NEXT CCW TO
*                                      THE ADDRESS OF THE LAST CCW   */
         ST    @02,APAXCCWN(,@09)                               01S0193
*               END;                                            01S0194
*             ELSE                                              01S0195
*               ;                                               01S0195
@RF00188 DS    0H                                               01S0196
*           END;                                                01S0196
*         ELSE                      /* NO DATA CHAINING OR MODI-
*                                      FICATION                      */
*           APAXIOCT=0;             /* SET COUNT OF WORDS IN DATA
*                                      CHAIN TO ZERO                 */
         B     @RC00182                                         01S0197
@RF00182 L     @09,APCWACB(,APCWPTR)                            01S0197
         L     @09,ACBAMWAP(,@09)                               01S0197
         SLR   @02,@02                                          01S0197
         ST    @02,APAXIOCT(,@09)                               01S0197
*         DO UNTIL COUNT=0;         /* LOOP THROUGH THE FOLLOWING
*                                      CODE UNTIL ENOUGH CIT ENTRIES
*                                      AND CCWS ARE SET UP TO   01S0198
*                                      TRANSFER THE NUMBER OF WORDS
*                                      IN COUNT                      */
@RC00182 DS    0H                                               01S0198
@DL00198 DS    0H                                               01S0199
*           IF(APAXIOCT+COUNT)<=MAXIOCW THEN/* TEST IF THERE IS ROOM
*                                      IN THE CURRENT CCW CHAIN      */
         L     @09,@CF00096                                     01S0199
         L     @02,APCWACB(,APCWPTR)                            01S0199
         L     @02,ACBAMWAP(,@02)                               01S0199
         L     @15,APAXIOCT(,@02)                               01S0199
         LR    @14,COUNT                                        01S0199
         ALR   @14,@15                                          01S0199
         CR    @14,@09                                          01S0199
         BH    @RF00199                                         01S0199
*             IF MAXBYTES<=(4*COUNT) THEN/* YES - IS COUNT GREATER
*                                      THAN MAXIMUM NUMBER OF WORDS
*                                      THAT CAN BE TRANSFERRED IN A
*                                      SINGLE CCW                    */
         LR    @14,COUNT                                        01S0200
         SLA   @14,2                                            01S0200
         CR    @14,@09                                          01S0200
         BL    @RF00200                                         01S0200
*               DO;                 /* YES - BUILD A CCW TO TRANSFER
*                                      THE MAXIMUM                   */
*                 APAXIOCT=APAXIOCT+(MAXBYTES/4);/* SET NUMBER OF
*                                      WORDS NOW IN DATA CHAIN       */
         L     @14,@CF01845                                     01S0202
         ALR   @15,@14                                          01S0202
         ST    @15,APAXIOCT(,@02)                               01S0202
*                 CCFLAG=OFF;       /* COMMAND CHAINING OFF          */
*                 CDFLAG=ON;        /* DATA CHAINING ON              */
         OI    CDFLAG,B'10000000'                               01S0204
         NI    CCFLAG,B'10111111'                               01S0204
*                 WORDCNT=APAXIOCT; /* SET WORDCOUNT IN CIT          */
         STH   @15,WORDCNT                                      01S0205
*                 DATADDR=START;    /* SET S/370 ADDRESS IN CCW      */
         L     @02,START                                        01S0206
         STCM  @02,7,DATADDR                                    01S0206
*                 START=START+MAXBYTES;/* SET S/370 ADDRESS FOR NEXT
*                                      CCW TO BE BUILT               */
         ALR   @02,@09                                          01S0207
         ST    @02,START                                        01S0207
*                 BYTCOUNT=MAXBYTES;/* SET BYTE COUNT IN CCW         */
         STH   @09,BYTCOUNT                                     01S0208
*                 COUNT=COUNT-(MAXBYTES/4);/* DECREMENT COUNT OF
*                                      WORDS LEFT TO PROCESS         */
*                                                               01S0209
         SLR   COUNT,@14                                        01S0209
*                 /***************************************************/
*                 /*                                                 */
*                 /* IF LESS THAN THRESHHOLD - TURN OFF DATA CHAINING*/
*                 /* AND START NEW CCW AND CIT ENTRY                 */
*                 /*                                                 */
*                 /***************************************************/
*                                                               01S0210
*                 IF((CMDCODE=READCCW)&((COUNT*4)<APCTDCNR))×((CMDCODE=
*                     WRITECCW)&((COUNT*4)<APCTDCNW)) THEN      01S0210
         CLI   CMDCODE,2                                        01S0210
         BNE   @GL00012                                         01S0210
         LR    @09,COUNT                                        01S0210
         SLA   @09,2                                            01S0210
         CH    @09,APCTDCNR(,APCTPTR)                           01S0210
         BL    @RT00210                                         01S0210
@GL00012 CLI   CMDCODE,1                                        01S0210
         BNE   @RF00210                                         01S0210
         LR    @09,COUNT                                        01S0210
         SLA   @09,2                                            01S0210
         CH    @09,APCTDCNW(,APCTPTR)                           01S0210
         BNL   @RF00210                                         01S0210
@RT00210 DS    0H                                               01S0211
*                   DO;             /* RESET FOR NO DATA CHAINING    */
*                     CCFLAG=ON;    /* COMMAND CHAINING ON           */
*                     CDFLAG=OFF;   /* DATA CHAINING OFF             */
         OI    CCFLAG,B'01000000'                               01S0213
         NI    CDFLAG,B'01111111'                               01S0213
*                     APAXIOCT=APAXIOCT&&APAXIOCT;/* RESET DATA CHAIN
*                                      WORD COUNT                    */
         L     @09,APCWACB(,APCWPTR)                            01S0214
         L     @09,ACBAMWAP(,@09)                               01S0214
         L     @02,APAXIOCT(,@09)                               01S0214
         LR    @15,@02                                          01S0214
         XR    @15,@02                                          01S0214
         ST    @15,APAXIOCT(,@09)                               01S0214
*                     CITLGTH=NTRYLGTH/2;/* CIT ENTRY LENGTH IN WORDS
*                                      FOR IGTMIC CALL               */
         LH    @09,NTRYLGTH                                     01S0215
         N     @09,@CF01849                                     01S0215
         SRL   @09,1                                            01S0215
         ST    @09,CITLGTH                                      01S0215
*                     CALL APCVZMIC(CIT,CITLGTH,ERRORBIT);/* MOVE CIT
*                                      ENTRY                         */
         LA    @09,CIT                                          01S0216
         ST    @09,@AL00001                                     01S0216
         LA    @09,CITLGTH                                      01S0216
         ST    @09,@AL00001+4                                   01S0216
         LA    @09,ERRORBIT                                     01S0216
         ST    @09,@AL00001+8                                   01S0216
         L     @15,APCTZMIC(,APCTPTR)                           01S0216
         LA    @01,@AL00001                                     01S0216
         BALR  @14,@15                                          01S0216
*                     IF ERRORBIT=ON THEN/* RETURN TO CALLER IF MIC  */
         TM    ERRORBIT,B'10000000'                             01S0217
         BO    @RT00217                                         01S0217
*                       RETURN;     /* FLAGGED AN ERROR              */
*                     BULKSTOR=BULKSTOR+MAXBYTES/4;/* SET BULK STORE
*                                      ADDRESS FOR NEXT CIT ENTRY    */
         L     @09,@CF01845                                     01S0219
         AL    @09,BULKSTOR                                     01S0219
         ST    @09,BULKSTOR                                     01S0219
*                   END;            /* END OF RESET SEGMENT          */
*                 ELSE                                          01S0221
*                   ;               /* OK TO DATA CHAIN              */
@RF00210 DS    0H                                               01S0222
*                 CALL APCVZMIB(CCWENTRY,ERRORBIT);/* MOVE THE CCW TO
*                                      USER'S CCW TABLE              */
         LA    @09,CCWENTRY                                     01S0222
         ST    @09,@AL00001                                     01S0222
         LA    @09,ERRORBIT                                     01S0222
         ST    @09,@AL00001+4                                   01S0222
         L     @15,APCTZMIB(,APCTPTR)                           01S0222
         LA    @01,@AL00001                                     01S0222
         BALR  @14,@15                                          01S0222
*                 IF ERRORBIT=ON THEN/* ERROR DETECTED ON CALL?      */
         TM    ERRORBIT,B'10000000'                             01S0223
         BO    @RT00223                                         01S0223
*                   RETURN;         /* YES - RETURN TO CALLER        */
*                 ELSE                                          01S0225
*                   ;               /* NO - CONTINUE NORMALLY        */
*               END;                                            01S0226
*             ELSE                  /* SET UP CCW AND CIT TO TRANS-
*                                      FER NUMBER OF WORDS REMAIN-
*                                      ING IN COUNT                  */
*               DO;                                             01S0227
         B     @RC00200                                         01S0227
@RF00200 DS    0H                                               01S0228
*                 CCFLAG=ON;        /* COMMAND CHAINING ON           */
*                 CDFLAG=OFF;       /* DATA CHAINING OFF             */
         OI    CCFLAG,B'01000000'                               01S0229
         NI    CDFLAG,B'01111111'                               01S0229
*                 APAXIOCT=APAXIOCT+COUNT;/* BUMP COUNT OF WORDS IN
*                                      CURRENT CCW CHAIN             */
         L     @09,APCWACB(,APCWPTR)                            01S0230
         L     @09,ACBAMWAP(,@09)                               01S0230
         LR    @02,COUNT                                        01S0230
         AL    @02,APAXIOCT(,@09)                               01S0230
         ST    @02,APAXIOCT(,@09)                               01S0230
*                 WORDCNT=APAXIOCT; /* SET CIT WORD COUNT TO NUMBER
*                                      OF WORDS IN THE CCW CHAIN     */
         STH   @02,WORDCNT                                      01S0231
*                 DATADDR=START;    /* SET S/370 ADDRESS IN CCW      */
         MVC   DATADDR(3),START+1                               01S0232
*                 BYTCOUNT=4*COUNT; /* PUT BYTE COUNT IN CCW         */
         LR    @09,COUNT                                        01S0233
         SLA   @09,2                                            01S0233
         STH   @09,BYTCOUNT                                     01S0233
*                 COUNT=0;          /* SET COUNT TO ZERO TO END THIS
*                                      DO LOOP                       */
         SLR   COUNT,COUNT                                      01S0234
*                 CALL APCVZMIB(CCWENTRY,ERRORBIT);/* MOVE THE CCW TO
*                                      USER'S CCW TABLE              */
         LA    @09,CCWENTRY                                     01S0235
         ST    @09,@AL00001                                     01S0235
         LA    @09,ERRORBIT                                     01S0235
         ST    @09,@AL00001+4                                   01S0235
         L     @15,APCTZMIB(,APCTPTR)                           01S0235
         LA    @01,@AL00001                                     01S0235
         BALR  @14,@15                                          01S0235
*                 IF ERRORBIT=ON THEN/* WAS THERE AN ERROR?          */
         TM    ERRORBIT,B'10000000'                             01S0236
         BO    @RT00236                                         01S0236
*                   RETURN;         /* YES - RETURN                  */
*                 ELSE                                          01S0238
*                   ;               /* NO - CONTINUE                 */
*                 CITLGTH=NTRYLGTH/2;/* PASS LENGTH IN WORDS OF THE
*                                      CIT ENTRY                     */
         LH    @09,NTRYLGTH                                     01S0239
         N     @09,@CF01849                                     01S0239
         SRL   @09,1                                            01S0239
         ST    @09,CITLGTH                                      01S0239
*                 CALL APCVZMIC(CIT,CITLGTH,ERRORBIT);/* MOVE THE CIT
*                                      ENTRY TO USER'S CIT           */
         LA    @09,CIT                                          01S0240
         ST    @09,@AL00001                                     01S0240
         LA    @09,CITLGTH                                      01S0240
         ST    @09,@AL00001+4                                   01S0240
         LA    @09,ERRORBIT                                     01S0240
         ST    @09,@AL00001+8                                   01S0240
         L     @15,APCTZMIC(,APCTPTR)                           01S0240
         LA    @01,@AL00001                                     01S0240
         BALR  @14,@15                                          01S0240
*                 IF ERRORBIT=ON THEN/* ERROR DETECTED ON CALL?      */
         TM    ERRORBIT,B'10000000'                             01S0241
         BO    @RT00241                                         01S0241
*                   RETURN;         /* YES - RETURN                  */
*                 ELSE                                          01S0243
*                   ;               /* NO - CONTINUE                 */
*               END;                                            01S0244
*           ELSE                    /* COUNT WOULD OVERFLOW MAX 01S0245
*                                      ALLOWED IN CHAIN. CLOSE OUT
*                                      THIS CHAIN BY ADDING WHAT WILL
*                                      FIT AND START A NEW ONE       */
*             IF COUNT>=(MAXBYTES/4) THEN/* TEST IF COUNT EXCEEDS MAX
*                                      ALLOWED IN A SINGLE CCW       */
         B     @RC00199                                         01S0245
@RF00199 L     @09,@CF01845                                     01S0245
         CR    COUNT,@09                                        01S0245
         BL    @RF00245                                         01S0245
*               IF(APAXIOCT+MAXBYTES/4)<MAXIOCW THEN/* YES - TEST IF
*                                      THIS MAXIMIUM FITS IN CHAIN   */
         L     @02,@CF00096                                     01S0246
         L     @01,APCWACB(,APCWPTR)                            01S0246
         L     @15,ACBAMWAP(,@01)                               01S0246
         L     @14,APAXIOCT(,@15)                               01S0246
         ALR   @14,@09                                          01S0246
         CR    @14,@02                                          01S0246
         BNL   @RF00246                                         01S0246
*                 DO;               /* YES - SET UP CCW TO TRANSFER
*                                      THE MAXIMUM BYTE COUNT        */
*                   APAXIOCT=APAXIOCT+MAXBYTES/4;/* BUMP THE COUNT IN
*                                      THE CURRENT DATA CHAIN        */
         ST    @14,APAXIOCT(,@15)                               01S0248
*                   CDFLAG=ON;      /* TURN THE DATA CHAIN FLAG ON   */
*                   CCFLAG=OFF;     /* COMMAND CHAIN FLAG OFF        */
         OI    CDFLAG,B'10000000'                               01S0250
         NI    CCFLAG,B'10111111'                               01S0250
*                   WORDCNT=APAXIOCT;/* STORE WORD COUNT IN CHAIN IN
*                                      THE CIT ENTRY                 */
         STH   @14,WORDCNT                                      01S0251
*                   DATADDR=START;  /* S/370 ADDRESS TO CCW          */
         L     @15,START                                        01S0252
         STCM  @15,7,DATADDR                                    01S0252
*                   START=START+MAXBYTES;/* BUMP S/370 ADDRESS FOR
*                                      NEXT CCW                      */
         ALR   @15,@02                                          01S0253
         ST    @15,START                                        01S0253
*                   COUNT=COUNT-MAXBYTES/4;/* SET NUMBER OF WORDS
*                                      LEFT TO PROCESS               */
         SLR   COUNT,@09                                        01S0254
*                   BYTCOUNT=MAXBYTES;/* SET BYTE COUNT IN CCW       */
*                                                               01S0255
         STH   @02,BYTCOUNT                                     01S0255
*                   /*************************************************/
*                   /*                                               */
*                   /* IF LESS THAN THRESHHOLD - TURN OFF DATA       */
*                   /* CHAINING AND START NEW CCW AND CIT ENTRY      */
*                   /*                                               */
*                   /*************************************************/
*                                                               01S0256
*                   IF((CMDCODE=READCCW)&((COUNT*4)<APCTDCNR))×((
*                       CMDCODE=WRITECCW)&((COUNT*4)<APCTDCNW)) THEN
         CLI   CMDCODE,2                                        01S0256
         BNE   @GL00015                                         01S0256
         LR    @09,COUNT                                        01S0256
         SLA   @09,2                                            01S0256
         CH    @09,APCTDCNR(,APCTPTR)                           01S0256
         BL    @RT00256                                         01S0256
@GL00015 CLI   CMDCODE,1                                        01S0256
         BNE   @RF00256                                         01S0256
         LR    @09,COUNT                                        01S0256
         SLA   @09,2                                            01S0256
         CH    @09,APCTDCNW(,APCTPTR)                           01S0256
         BNL   @RF00256                                         01S0256
@RT00256 DS    0H                                               01S0257
*                     DO;           /* RESET FOR NO DATA CHAINING    */
*                       CCFLAG=ON;  /* COMMAND CHAINING ON           */
*                       CDFLAG=OFF; /* DATA CHAINING OFF             */
         OI    CCFLAG,B'01000000'                               01S0259
         NI    CDFLAG,B'01111111'                               01S0259
*                       APAXIOCT=APAXIOCT&&APAXIOCT;/* RESET DATA
*                                      CHAIN WORD COUNT              */
         L     @09,APCWACB(,APCWPTR)                            01S0260
         L     @09,ACBAMWAP(,@09)                               01S0260
         L     @02,APAXIOCT(,@09)                               01S0260
         LR    @15,@02                                          01S0260
         XR    @15,@02                                          01S0260
         ST    @15,APAXIOCT(,@09)                               01S0260
*                       CITLGTH=NTRYLGTH/2;/* CIT ENTRY LENGTH IN
*                                      WORDS FOR IGTMIC CALL         */
         LH    @09,NTRYLGTH                                     01S0261
         N     @09,@CF01849                                     01S0261
         SRL   @09,1                                            01S0261
         ST    @09,CITLGTH                                      01S0261
*                       CALL APCVZMIC(CIT,CITLGTH,ERRORBIT);/* MOVE
*                                      CIT ENTRY                     */
         LA    @09,CIT                                          01S0262
         ST    @09,@AL00001                                     01S0262
         LA    @09,CITLGTH                                      01S0262
         ST    @09,@AL00001+4                                   01S0262
         LA    @09,ERRORBIT                                     01S0262
         ST    @09,@AL00001+8                                   01S0262
         L     @15,APCTZMIC(,APCTPTR)                           01S0262
         LA    @01,@AL00001                                     01S0262
         BALR  @14,@15                                          01S0262
*                       IF ERRORBIT=ON THEN/* RETURN TO CALLER IF    */
         TM    ERRORBIT,B'10000000'                             01S0263
         BO    @RT00263                                         01S0263
*                         RETURN;   /* MIC FLAGGED ERROR             */
*                       BULKSTOR=BULKSTOR+MAXBYTES/4;/* SET BULK
*                                      STORE ADDR FOR NEXT CIT ENTRY */
         L     @09,@CF01845                                     01S0265
         AL    @09,BULKSTOR                                     01S0265
         ST    @09,BULKSTOR                                     01S0265
*                     END;          /* END OF RESET SEGMENT          */
*                   ELSE                                        01S0267
*                     ;             /* OK TO DATA CHAIN              */
@RF00256 DS    0H                                               01S0268
*                   CALL APCVZMIB(CCWENTRY,ERRORBIT);/* MOVE THE CCW */
         LA    @09,CCWENTRY                                     01S0268
         ST    @09,@AL00001                                     01S0268
         LA    @09,ERRORBIT                                     01S0268
         ST    @09,@AL00001+4                                   01S0268
         L     @15,APCTZMIB(,APCTPTR)                           01S0268
         LA    @01,@AL00001                                     01S0268
         BALR  @14,@15                                          01S0268
*                   IF ERRORBIT=ON THEN/* RETURN IF CCW TABLE FULL   */
         TM    ERRORBIT,B'10000000'                             01S0269
         BO    @RT00269                                         01S0269
*                     RETURN;                                   01S0270
*                   ELSE                                        01S0271
*                     ;                                         01S0271
*                 END;                                          01S0272
*               ELSE                /* SET UP CCW TO TRANSFER NUMBER
*                                      OF WORDS WHICH WILL WILL FIT
*                                      IN CHAIN                      */
*                 DO;                                           01S0273
         B     @RC00246                                         01S0273
@RF00246 DS    0H                                               01S0274
*                   WORDCNT=MAXIOCW;/* SET CIT WORD COUNT TO THE
*                                      MAXIMUM                       */
         L     @09,@CF00096                                     01S0274
         STH   @09,WORDCNT                                      01S0274
*                   DATADDR=START;  /* STORE S/370 ADDRESS IN CCW    */
         L     @02,START                                        01S0275
         STCM  @02,7,DATADDR                                    01S0275
*                   CCFLAG=ON;      /* COMMAND CHAINING ON           */
*                   CDFLAG=OFF;     /* DATA CHAINING OFF - THIS IS
*                                      LAST IN CHAIN                 */
         OI    CCFLAG,B'01000000'                               01S0277
         NI    CDFLAG,B'01111111'                               01S0277
*                   BYTCOUNT=(MAXIOCW-APAXIOCT)*4;/* SET CCW BYTE
*                                      COUNT TO NUMBER OF BYTES WHICH
*                                      FIT IN CHAIN                  */
         L     @01,APCWACB(,APCWPTR)                            01S0278
         L     @01,ACBAMWAP(,@01)                               01S0278
         L     @15,APAXIOCT(,@01)                               01S0278
         LR    @14,@09                                          01S0278
         SLR   @14,@15                                          01S0278
         SLA   @14,2                                            01S0278
         STH   @14,BYTCOUNT                                     01S0278
*                   COUNT=APAXIOCT+COUNT-MAXIOCW;/* RESET COUNT OF
*                                      WORDS LEFT TO PROCESS         */
         ALR   @15,COUNT                                        01S0279
         SLR   @15,@09                                          01S0279
         LR    COUNT,@15                                        01S0279
*                   START=START+BYTCOUNT;/* S/370 ADDRESS TO CCW     */
         ALR   @02,@14                                          01S0280
         ST    @02,START                                        01S0280
*                   CALL APCVZMIB(CCWENTRY,ERRORBIT);/* MOVE THE CCW */
         LA    @09,CCWENTRY                                     01S0281
         ST    @09,@AL00001                                     01S0281
         LA    @09,ERRORBIT                                     01S0281
         ST    @09,@AL00001+4                                   01S0281
         L     @15,APCTZMIB(,APCTPTR)                           01S0281
         LA    @01,@AL00001                                     01S0281
         BALR  @14,@15                                          01S0281
*                   IF ERRORBIT=ON THEN/* RETURN IF ERROR DETECTED   */
         TM    ERRORBIT,B'10000000'                             01S0282
         BO    @RT00282                                         01S0282
*                     RETURN;                                   01S0283
*                   ELSE                                        01S0284
*                     ;                                         01S0284
*                   CITLGTH=NTRYLGTH/2;                         01S0285
         LH    @09,NTRYLGTH                                     01S0285
         N     @09,@CF01849                                     01S0285
         SRL   @09,1                                            01S0285
         ST    @09,CITLGTH                                      01S0285
*                   CALL APCVZMIC(CIT,CITLGTH,ERRORBIT);/* MOVE THE
*                                      CIT ENTRY                     */
         LA    @09,CIT                                          01S0286
         ST    @09,@AL00001                                     01S0286
         LA    @09,CITLGTH                                      01S0286
         ST    @09,@AL00001+4                                   01S0286
         LA    @09,ERRORBIT                                     01S0286
         ST    @09,@AL00001+8                                   01S0286
         L     @15,APCTZMIC(,APCTPTR)                           01S0286
         LA    @01,@AL00001                                     01S0286
         BALR  @14,@15                                          01S0286
*                   IF ERRORBIT=ON THEN/* RETURN IF ERROR DETECTED   */
         TM    ERRORBIT,B'10000000'                             01S0287
         BO    @RT00287                                         01S0287
*                     RETURN;                                   01S0288
*                   ELSE                                        01S0289
*                     ;                                         01S0289
*                   BULKSTOR=BULKSTOR+MAXIOCW;/* SET BULK STORE 01S0290
*                                      ADDRESS FOR NEXT CIT ENTRY    */
         L     @09,@CF00096                                     01S0290
         AL    @09,BULKSTOR                                     01S0290
         ST    @09,BULKSTOR                                     01S0290
*                   APAXIOCT=APAXIOCT&&APAXIOCT;/* RESET COUNT OF
*                                      WORDS IN NEW CHAIN TO ZERO    */
         L     @09,APCWACB(,APCWPTR)                            01S0291
         L     @09,ACBAMWAP(,@09)                               01S0291
         L     @02,APAXIOCT(,@09)                               01S0291
         LR    @15,@02                                          01S0291
         XR    @15,@02                                          01S0291
         ST    @15,APAXIOCT(,@09)                               01S0291
*                 END;                                          01S0292
*             ELSE                  /* SET UP CCW TO TRANSFER WHAT
*                                      WILL FIT IN CHAIN AND THEN
*                                      START A NEW ONE               */
*               DO;                                             01S0293
         B     @RC00245                                         01S0293
@RF00245 DS    0H                                               01S0294
*                 WORDCNT=MAXIOCW;  /* SET CIT WORD COUNT TO MAXIMUM */
         L     @09,@CF00096                                     01S0294
         STH   @09,WORDCNT                                      01S0294
*                 DATADDR=START;    /* S/370 DATA ADDRESS TO CCW     */
         L     @02,START                                        01S0295
         STCM  @02,7,DATADDR                                    01S0295
*                 CCFLAG=ON;        /* COMMAND CHAINING ON           */
*                 CDFLAG=OFF;       /* DATA CHAIN FLAG OFF           */
         OI    CCFLAG,B'01000000'                               01S0297
         NI    CDFLAG,B'01111111'                               01S0297
*                 BYTCOUNT=(MAXIOCW-APAXIOCT)*4;/* CCW BYTE COUNT =
*                                      WHAT WILL FIT IN CHAIN        */
         L     @01,APCWACB(,APCWPTR)                            01S0298
         L     @01,ACBAMWAP(,@01)                               01S0298
         L     @15,APAXIOCT(,@01)                               01S0298
         LR    @14,@09                                          01S0298
         SLR   @14,@15                                          01S0298
         SLA   @14,2                                            01S0298
         STH   @14,BYTCOUNT                                     01S0298
*                 COUNT=APAXIOCT+COUNT-MAXIOCW;/* REDUCE NUMBER OF
*                                      WORDS LEFT TO PROCESS         */
         ALR   @15,COUNT                                        01S0299
         SLR   @15,@09                                          01S0299
         LR    COUNT,@15                                        01S0299
*                 START=START+BYTCOUNT;/* BUMP S/370 ADDRESS FOR NEXT
*                                      CCW                           */
         ALR   @02,@14                                          01S0300
         ST    @02,START                                        01S0300
*                 CALL APCVZMIB(CCWENTRY,ERRORBIT);/* MOVE THE CCW   */
         LA    @09,CCWENTRY                                     01S0301
         ST    @09,@AL00001                                     01S0301
         LA    @09,ERRORBIT                                     01S0301
         ST    @09,@AL00001+4                                   01S0301
         L     @15,APCTZMIB(,APCTPTR)                           01S0301
         LA    @01,@AL00001                                     01S0301
         BALR  @14,@15                                          01S0301
*                 IF ERRORBIT=ON THEN/* RETURN IF ERROR              */
         TM    ERRORBIT,B'10000000'                             01S0302
         BO    @RT00302                                         01S0302
*                   RETURN;                                     01S0303
*                 ELSE                                          01S0304
*                   ;                                           01S0304
*                 CITLGTH=NTRYLGTH/2;                           01S0305
         LH    @09,NTRYLGTH                                     01S0305
         N     @09,@CF01849                                     01S0305
         SRL   @09,1                                            01S0305
         ST    @09,CITLGTH                                      01S0305
*                 CALL APCVZMIC(CIT,CITLGTH,ERRORBIT);/* MOVE THE CIT
*                                      ENTRY                         */
         LA    @09,CIT                                          01S0306
         ST    @09,@AL00001                                     01S0306
         LA    @09,CITLGTH                                      01S0306
         ST    @09,@AL00001+4                                   01S0306
         LA    @09,ERRORBIT                                     01S0306
         ST    @09,@AL00001+8                                   01S0306
         L     @15,APCTZMIC(,APCTPTR)                           01S0306
         LA    @01,@AL00001                                     01S0306
         BALR  @14,@15                                          01S0306
*                 IF ERRORBIT=ON THEN/* RETURN ON ERROR              */
         TM    ERRORBIT,B'10000000'                             01S0307
         BO    @RT00307                                         01S0307
*                   RETURN;                                     01S0308
*                 ELSE                                          01S0309
*                   ;                                           01S0309
*                 BULKSTOR=BULKSTOR+MAXIOCW;/* BUMP BULK STORE  01S0310
*                                      ADDRESS FOR NEXT CHAIN        */
         L     @09,@CF00096                                     01S0310
         AL    @09,BULKSTOR                                     01S0310
         ST    @09,BULKSTOR                                     01S0310
*                 APAXIOCT=0;       /* INITIALIZE CHAIN WORD COUNT
*                                      FOR NEXT CHAIN                */
         L     @09,APCWACB(,APCWPTR)                            01S0311
         L     @09,ACBAMWAP(,@09)                               01S0311
         SLR   @02,@02                                          01S0311
         ST    @02,APAXIOCT(,@09)                               01S0311
*               END;                                            01S0312
*         END;                                                  01S0313
@RC00245 DS    0H                                               01S0313
@RC00199 DS    0H                                               01S0313
@DE00198 LTR   COUNT,COUNT                                      01S0313
         BNZ   @DL00198                                         01S0313
*       END;                                                    01S0314
*   END;                                                        01S0315
@RC00060 DS    0H                                               01S0316
*                                   /* IGTXEPLG                      */
*                                                               01S0316
*   /*****************************************************************/
*   /*                                                               */
*   /* SYSTEM DECLARES                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0316
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                    01S0316
*     I031F FIXED(31) BASED,                                    01S0316
*     I031P PTR(31) BASED,                                      01S0316
*     I015F FIXED(15) BASED,                                    01S0316
*     I015P PTR(15) BASED,                                      01S0316
*     I008P PTR(8) BASED,                                       01S0316
*     I001C CHAR(1) BASED;                                      01S0316
*                                                               01S0317
*   /*****************************************************************/
*   /*                                                               */
*   /* MODULE PATCH AREA                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0317
*   DCL                                                         01S0317
*     APPATCH CHAR(*) INT STATIC LOCAL GEND;                    01S0317
*   GENERATE DATA DEFS(APPATCH);                                01S0318
*                                                               01S0319
*   /*****************************************************************/
*   /*                                                               */
*   /* GENERAL REGISTER DECLARES                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0319
*   DCL                                                         01S0319
*     R0F FIXED(31) REG(0),                                     01S0319
*     R0P PTR(24) REG(0),                                       01S0319
*     R0RSTD PTR(31) REG(0),                                    01S0319
*     R1F FIXED(31) REG(1),                                     01S0319
*     R1P PTR(24) REG(1),                                       01S0319
*     R1RSTD PTR(31) REG(1),                                    01S0319
*     R2F FIXED(31) REG(2),                                     01S0319
*     R2P PTR(24) REG(2),                                       01S0319
*     R2RSTD PTR(31) REG(2),                                    01S0319
*     R3F FIXED(31) REG(3),                                     01S0319
*     R3P PTR(24) REG(3),                                       01S0319
*     R3RSTD PTR(31) REG(3),                                    01S0319
*     R4F FIXED(31) REG(4),                                     01S0319
*     R4P PTR(24) REG(4),                                       01S0319
*     R4RSTD PTR(31) REG(4),                                    01S0319
*     R5F FIXED(31) REG(5),                                     01S0319
*     R5P PTR(24) REG(5),                                       01S0319
*     R5RSTD PTR(31) REG(5),                                    01S0319
*     R6F FIXED(31) REG(6),                                     01S0319
*     R6P PTR(24) REG(6),                                       01S0319
*     R6RSTD PTR(31) REG(6),                                    01S0319
*     R7F FIXED(31) REG(7),                                     01S0319
*     R7P PTR(24) REG(7),                                       01S0319
*     R7RSTD PTR(31) REG(7),                                    01S0319
*     R8F FIXED(31) REG(8),                                     01S0319
*     R8P PTR(24) REG(8),                                       01S0319
*     R8RSTD PTR(31) REG(8),                                    01S0319
*     R9F FIXED(31) REG(9),                                     01S0319
*     R9P PTR(24) REG(9),                                       01S0319
*     R9RSTD PTR(31) REG(9),                                    01S0319
*     R10F FIXED(31) REG(10),                                   01S0319
*     R10P PTR(24) REG(10),                                     01S0319
*     R10RSTD PTR(31) REG(10),                                  01S0319
*     R11F FIXED(31) REG(11),                                   01S0319
*     R11P PTR(24) REG(11),                                     01S0319
*     R11RSTD PTR(31) REG(11),                                  01S0319
*     R12F FIXED(31) REG(12),                                   01S0319
*     R12P PTR(24) REG(12),                                     01S0319
*     R12RSTD PTR(31) REG(12),                                  01S0319
*     R13F FIXED(31) REG(13),                                   01S0319
*     R13P PTR(24) REG(13),                                     01S0319
*     R13RSTD PTR(31) REG(13),                                  01S0319
*     R14F FIXED(31) REG(14),                                   01S0319
*     R14P PTR(24) REG(14),                                     01S0319
*     R14RSTD PTR(31) REG(14),                                  01S0319
*     R15F FIXED(31) REG(15),                                   01S0319
*     R15P PTR(24) REG(15),                                     01S0319
*     R15RSTD PTR(31) REG(15),                                  01S0319
*                                                               01S0319
*     /***************************************************************/
*     /*                                                             */
*     /* VPSS CONTROL BLOCK POINTER DECLARES                         */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0319
*     APSMPTR PTR(24) REG(01),      /* STORAGE MANAGEMENT BLOCK 01S0319
*                                      (SUGGESTED POINTER)           */
*     APSCPTR PTR(24) REG(01),      /* STORAGE MANAGEMENT CONTROL
*                                      WORD (SUGGESTED POINTER)      */
*     APINPTR PTR(24) REG(01),      /* USER'S INPUT PARAMETER LIST
*                                      (SUGGESTED POINTER)           */
*/*                                                                  */
*                                                               01S0319
*     APDATA PTR(24) REG(06),       /* ADDRESS OF DYNAMIC DATA  01S0319
*                                      WORKAREA (DATAREG)            */
*     APCODE PTR(24) REG(07),       /* PROGRAM CODE BASE REGISTER
*                                      (CODEREG)                     */
*     APDEBPTR PTR(24) REG(08),     /* VPSS DEB (SUGGESTED POINTER)  */
*     APNPPTR PTR(24) REG(08),      /* SUBSYSTEM INITIALIZATION 01S0319
*                                      WORKAREA BLOCK (ONLY USED BY
*                                      SUBSYSTEM INITIALIZATION)     */
*     APRLPTR PTR(24) REG(08),      /* VPSS ACB REQUEST LIST    01S0319
*                                      (SUGGESTED POINTER)           */
*     APCIPTR PTR(24) REG(08),      /* 3838 CONTROL TABLE (SUGGESTED
*                                      POINTER)                      */
*     APCWPTR PTR(24) REG(08),      /* CALL INTERFACE WORKAREA  01S0319
*                                      (SUGGESTED POINTER)           */
*     APERPTR PTR(24) REG(08),      /* ERP/IO APPENDAGE WORKAREA
*                                      (SUGGESTED POINTER)           */
*     APACBPTR PTR(24) REG(09),     /* VPSS ACB (SUGGESTED POINTER)  */
*     APCQPTR PTR(24) REG(09),      /* COMMAND QUEUE ELEMENT    01S0319
*                                      (SUGGESTED POINTER)           */
*     APOTPTR PTR(24) REG(09),      /* OPTION TABLE (SUGGESTED  01S0319
*                                      POINTER)                      */
*     APIOPTR PTR(24) REG(10),      /* I/O ELEMENT (SUGGESTED   01S0319
*                                      POINTER)                      */
*     APEXLPTR PTR(24) REG(10),     /* VPSS EXLST (SUGGESTED POINTER)*/
*     APUBPTR PTR(24) REG(10),      /* UNIT BLOCK (SUGGESTED POINTER)*/
*     APAXPTR PTR(24) REG(10),      /* VPSS ACB EXTENSION (SUGGESTED
*                                      POINTER)                      */
*     APCPPTR PTR(24) REG(10),      /* VPSS CALL PROCESSING     01S0319
*                                      INDICATORS (SUGGESTED POINTER)*/
*     APOCPTR PTR(24) REG(10),      /* VPSS OPEN/CLOSE SUBSYSTEM
*                                      WORKAREA (REQUIRED POINTER)   */
*     APATPTR PTR(24) REG(11),      /* VPSS ACB TABLE (SUGGESTED
*                                      POINTER)                      */
*     APLBPTR PTR(24) REG(11),      /* LABEL RESOLUTION TABLE   01S0319
*                                      (SUGGESTED POINTER)           */
*     APUTPTR PTR(24) REG(11),      /* USER TABLE (SUGGESTED POINTER)*/
*     APDSPTR PTR(24) REG(11),      /* VPSS DATASET ENTRY (SUGGESTED
*                                      POINTER)                      */
*     APXLPTR PTR(24) REG(11),      /* TRANSLATION TABLE (SUGGESTED
*                                      POINTER)                      */
*     APDXPTR PTR(24) REG(11),      /* VPSS DEB EXTENSION (SUGGESTED
*                                      POINTER)                      */
*     APCTPTR PTR(24) REG(12) RSTD, /* CONTROL TABLE (REQUIRED  01S0319
*                                      POINTER)                      */
*     APSVPTR PTR(24) REG(13) RSTD, /* OS/VPSS SAVEAREA/WORKAREA
*                                      (REQUIRED POINTER)            */
*     APRETURN PTR(24) REG(14),     /* RETURN ADDRESS FOR SUBROUTINE
*                                      LINKAGE                       */
*     APENTRY PTR(24) REG(15),      /* SUBROUTINE ENTRY POINT LINKAGE*/
*     APRCODE PTR(24) REG(15);      /* CONTAINS SUBROUTINE RETURN
*                                      CODE                          */
*                                                               01S0320
*   /*****************************************************************/
*   /*                                                               */
*   /* USER REGISTER DECLARES                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0320
*   END IGTMDB                                                  01S0320
*                                                               01S0320
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCW)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPIN)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPAL)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPAX)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCV)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCC)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCM)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPEM)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPSV)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCT)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPRL)                                       */
*                                                               01S0320
*       ;                                                       01S0320
         B     @EL00001                                         01S0320
@DATA    DS    0H
@DATD    DSECT
         DS    0F
@SA00001 DS    20F
@PC00001 DS    1F
@AL00001 DS    3A
IGTMDB   CSECT
         DS    0F
@CF00061 DC    F'1'
@CF00083 DC    F'2'
@CF00129 DC    F'3'
@CF00056 DC    F'8'
@CF00107 DC    F'15'
@CF00858 DC    F'17'
@CF00860 DC    F'18'
@CF00058 DC    F'24'
@CF00876 DC    F'27'
@CF00081 DC    F'30'
@CF00950 DC    F'38'
@CF01845 DC    F'16383'
@CF00096 DC    F'65532'
@CF01849 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
CITLGTH  DS    F
START    DS    AL4
         ORG   START
@NM00001 DS    BL4
WORDBITS EQU   START+3
         ORG   START+4
RSOLVERR DS    F
CIT      DS    CL12
         ORG   CIT
OPID     DS    FL2
NTRYLGTH DS    FL2
INDEXID1 DS    FL2
INDEXID2 DS    FL2
BULKSTOR DS    FL4
         ORG   CIT+12
CCWENTRY DS    CL8
         ORG   CCWENTRY
CMDCODE  DS    FL1
DATADDR  DS    FL3
CCWFLAGS DS    FL2
         ORG   CCWFLAGS
CDFLAG   DS    BL1
CCFLAG   EQU   CCWFLAGS+0
SLIGLAG  EQU   CCWFLAGS+0
SKIPFLAG EQU   CCWFLAGS+0
PCIFLAG  EQU   CCWFLAGS+0
         ORG   CCWENTRY+6
BYTCOUNT DS    FL2
         ORG   CCWENTRY+8
NOCHAIN  DS    BL1
ERRORBIT DS    BL1
IGTMDB   CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
IGTMDB   CSECT
*                                 /* GENERATE PATCH
         IGTXZAP ,                 GENERATE PATCH AREA
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IGTMDB   CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
COUNT    EQU   @03
APDATA   EQU   @06
APCODE   EQU   @07
APSVPTR  EQU   @13
APCTPTR  EQU   @12
APCWPTR  EQU   @08
R1P      EQU   @01
APACBPTR EQU   @09
APATPTR  EQU   @11
APAXPTR  EQU   @10
APCIPTR  EQU   @08
APCPPTR  EQU   @10
APCQPTR  EQU   @09
APDEBPTR EQU   @08
APDSPTR  EQU   @11
APDXPTR  EQU   @11
APENTRY  EQU   @15
APERPTR  EQU   @08
APEXLPTR EQU   @10
APINPTR  EQU   @01
APIOPTR  EQU   @10
APLBPTR  EQU   @11
APNPPTR  EQU   @08
APOCPTR  EQU   @10
APOTPTR  EQU   @09
APRCODE  EQU   @15
APRETURN EQU   @14
APRLPTR  EQU   @08
APSCPTR  EQU   @01
APSMPTR  EQU   @01
APUBPTR  EQU   @10
APUTPTR  EQU   @11
APXLPTR  EQU   @11
R0F      EQU   @00
R0P      EQU   @00
R0RSTD   EQU   @00
R1F      EQU   @01
R1RSTD   EQU   @01
R10F     EQU   @10
R10P     EQU   @10
R10RSTD  EQU   @10
R11F     EQU   @11
R11P     EQU   @11
R11RSTD  EQU   @11
R12F     EQU   @12
R12P     EQU   @12
R12RSTD  EQU   @12
R13F     EQU   @13
R13P     EQU   @13
R13RSTD  EQU   @13
R14F     EQU   @14
R14P     EQU   @14
R14RSTD  EQU   @14
R15F     EQU   @15
R15P     EQU   @15
R15RSTD  EQU   @15
R2F      EQU   @02
R2P      EQU   @02
R2RSTD   EQU   @02
R3F      EQU   @03
R3P      EQU   @03
R3RSTD   EQU   @03
R4F      EQU   @04
R4P      EQU   @04
R4RSTD   EQU   @04
R5F      EQU   @05
R5P      EQU   @05
R5RSTD   EQU   @05
R6F      EQU   @06
R6P      EQU   @06
R6RSTD   EQU   @06
R7F      EQU   @07
R7P      EQU   @07
R7RSTD   EQU   @07
R8F      EQU   @08
R8P      EQU   @08
R8RSTD   EQU   @08
R9F      EQU   @09
R9P      EQU   @09
R9RSTD   EQU   @09
LASTCIT  EQU   0
LASTOPID EQU   LASTCIT
LASTNDEX EQU   LASTCIT+4
LASTCNT  EQU   LASTCIT+6
LASTBULK EQU   LASTCIT+8
LASTCCW  EQU   0
LASTADDR EQU   LASTCCW+1
LASTFLGS EQU   LASTCCW+4
LASTCD   EQU   LASTFLGS
LASTCC   EQU   LASTFLGS
LASTXCNT EQU   LASTCCW+6
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBIBCT  EQU   ACBJWA
ACBAMWAP EQU   ACBIBCT
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
ACBAPID  EQU   ACBCOMN+72
APCW     EQU   0
APCWAPIN EQU   APCW+8
APCWACB  EQU   APCW+20
APCWAPAL EQU   APCW+40
APCWSWS  EQU   APCW+46
APCWSW0  EQU   APCWSWS
APCWOPF  EQU   APCW+62
APCWAPOP EQU   APCWOPF
APCWR15C EQU   APCW+64
APCWRCDE EQU   APCW+68
APCWRCT  EQU   APCWRCDE+1
APCWRCC  EQU   APCWRCDE+2
APCWRCN  EQU   APCWRCDE+3
APCWINTV EQU   APCW+72
APCWINT0 EQU   APCWINTV
APCWZAM  EQU   APCWINT0
APCWINT1 EQU   APCWINTV+1
APCWINT2 EQU   APCWINTV+2
APCWINT3 EQU   APCWINTV+3
APCWAPEM EQU   APCW+112
APIN     EQU   0
APINAUNT EQU   APIN
APINAFNC EQU   APIN+4
APINFMTS EQU   APIN+8
APINCHC  EQU   0
APINCHX  EQU   0
APINCXC  EQU   0
APINCXX  EQU   0
APAL     EQU   0
APALCISZ EQU   APAL+4
APALDATA EQU   APAL+8
APALALG  EQU   APAL+8
APALSTAT EQU   APALALG
APALY    EQU   APALALG+4
APALYFSW EQU   APALY
APALYVS  EQU   APALY+1
APALYCT  EQU   APALY+2
APALYDL  EQU   APALY+3
APALYFMT EQU   APALY+4
APALX    EQU   APALALG+16
APALXFSW EQU   APALX
APALXVS  EQU   APALX+1
APALXCT  EQU   APALX+2
APALXDL  EQU   APALX+3
APALXFMT EQU   APALX+4
APALU    EQU   APALALG+28
APALUFSW EQU   APALU
APALUVS  EQU   APALU+1
APALUCT  EQU   APALU+2
APALUDL  EQU   APALU+3
APALUFMT EQU   APALU+4
APAX     EQU   0
APAXCCWN EQU   APAX+16
APAXCIN  EQU   APAX+28
APAXFLGS EQU   APAX+45
APAXFLG0 EQU   APAXFLGS
APAXFLG1 EQU   APAXFLGS+1
APAXFLG2 EQU   APAXFLGS+2
APAXSTAT EQU   APAX+48
APAXLCIT EQU   APAX+56
APAXIOCT EQU   APAX+60
APCVZMIB EQU   0
APCVZMIC EQU   0
APCVZMIF EQU   0
APEM     EQU   0
APEMMSG  EQU   APEM+92
APEMMSGN EQU   APEMMSG
APEMVALU EQU   APEM+108
APEMVALN EQU   APEMVALU+4
APSV     EQU   0
APSVREGS EQU   APSV+12
APCT     EQU   0
APCTENQM EQU   APCT+12
APCTSMIN EQU   APCT+32
APCTSMAD EQU   APCT+36
APCTZ@@@ EQU   APCT+40
APCTU@@@ EQU   APCT+440
APCTBR14 EQU   APCT+840
APCTERRS EQU   APCT+876
APCTDCNR EQU   APCT+916
APCTDCNW EQU   APCT+918
@NM00076 EQU   APCT+936
APCTSTAT EQU   @NM00076
APCTPRSW EQU   @NM00076+1
APCTAPCQ EQU   APCT+944
APCTCQAQ EQU   APCT+952
APCTZ@@1 EQU   APCT+1120
APRL     EQU   0
APRLECB  EQU   APRL+8
APRLECBC EQU   APRLECB
APRLFDBK EQU   APRL+12
APRLOPTS EQU   APRL+40
APRLOPT0 EQU   APRLOPTS
APRLOPT1 EQU   APRLOPTS+1
APRLOPT2 EQU   APRLOPTS+2
APRLOPT3 EQU   APRLOPTS+3
APRLOPTZ EQU   APRL+56
APRLOPT4 EQU   APRLOPTZ
APRLOPT5 EQU   APRLOPTZ+1
APRLOPT6 EQU   APRLOPTZ+2
APRLOPT7 EQU   APRLOPTZ+3
APRLRXLT EQU   APRLOPT7
APRLEXTS EQU   APRL+68
APCVZDAL EQU   0
APCVZDAP EQU   0
APCVZDBK EQU   0
APCVZDDA EQU   0
APCVZDDQ EQU   0
APCVZDEQ EQU   0
APCVZDID EQU   0
APCVZDIO EQU   0
APCVZDIP EQU   0
APCVZDMD EQU   0
APCVZDMM EQU   0
APCVZDQR EQU   0
APCVZDRI EQU   0
APCVZDUA EQU   0
APCVZDUL EQU   0
APCVZDWI EQU   0
APCVZDWT EQU   0
APCVZDX1 EQU   0
APCVZDX2 EQU   0
APCVZDX3 EQU   0
APCVZDX4 EQU   0
APCVZD10 EQU   0
APCVZD20 EQU   0
APCVZD4E EQU   0
APCVZD40 EQU   0
APCVZD41 EQU   0
APCVZD42 EQU   0
APCVZD43 EQU   0
APCVZD44 EQU   0
APCVZD45 EQU   0
APCVZD46 EQU   0
APCVZD47 EQU   0
APCVZD48 EQU   0
APCVZD49 EQU   0
APCVZD60 EQU   0
APCVZD80 EQU   0
APCVZD81 EQU   0
APCVZD82 EQU   0
APCVZD83 EQU   0
APCVZJAA EQU   0
APCVZJAD EQU   0
APCVZJAG EQU   0
APCVZJAJ EQU   0
APCVZJAM EQU   0
APCVZJAP EQU   0
APCVZJAX EQU   0
APCVZJAY EQU   0
APCVZJBA EQU   0
APCVZJBD EQU   0
APCVZJBG EQU   0
APCVZJBJ EQU   0
APCVZJBM EQU   0
APCVZJDA EQU   0
APCVZJDD EQU   0
APCVZJDG EQU   0
APCVZJDJ EQU   0
APCVZJDM EQU   0
APCVZJHC EQU   0
APCVZJHE EQU   0
APCVZJHF EQU   0
APCVZJHO EQU   0
APCVZJHQ EQU   0
APCVZJHR EQU   0
APCVZJHT EQU   0
APCVZJHW EQU   0
APCVZJH0 EQU   0
APCVZJH6 EQU   0
APCVZJI0 EQU   0
APCVZJI3 EQU   0
APCVZJJ0 EQU   0
APCVZKAA EQU   0
APCVZKBA EQU   0
APCVZKBB EQU   0
APCVZKBC EQU   0
APCVZKBD EQU   0
APCVZKBE EQU   0
APCVZKBF EQU   0
APCVZKCA EQU   0
APCVZKDA EQU   0
APCVZKGA EQU   0
APCVZKGB EQU   0
APCVZKGC EQU   0
APCVZKGD EQU   0
APCVZLCA EQU   0
APCVZLCB EQU   0
APCVZMBA EQU   0
APCVZMBD EQU   0
APCVZMBG EQU   0
APCVZMBH EQU   0
APCVZMBK EQU   0
APCVZMBM EQU   0
APCVZMJB EQU   0
APCVZMJC EQU   0
APCVZMJH EQU   0
APCVZMJI EQU   0
APCVZMMA EQU   0
APCVZUAA EQU   0
APCVZUAB EQU   0
APCVZUAC EQU   0
APCVZUAD EQU   0
APCVZUAE EQU   0
APCVZUAF EQU   0
APCVZUAG EQU   0
APCVZUBB EQU   0
APCVZUFA EQU   0
APCVZUHA EQU   0
APCVZUHB EQU   0
APCVZUJA EQU   0
APCVZUKA EQU   0
APCV1CMD EQU   0
APCV1JAA EQU   0
APCV1JBJ EQU   0
APCV1JHC EQU   0
APCV1JHL EQU   0
APCV1JHT EQU   0
APCV1MAB EQU   0
APCV1MBD EQU   0
APCV2JHC EQU   0
APCV2JHL EQU   0
APCV2MBD EQU   0
APINACI  EQU   0
APINACW  EQU   0
APINAPRL EQU   0
APINBIV  EQU   0
APINBLB  EQU   0
APINCHB  EQU   0
APINCHS  EQU   0
APINCXS  EQU   0
APINDLB  EQU   0
APINDSV  EQU   0
APINERR  EQU   0
APINFUNC EQU   0
APINICI  EQU   0
APINICW  EQU   0
APINKYVF EQU   0
APINKYVL EQU   0
APINKYVP EQU   0
APINKYWD EQU   0
APINPXB  EQU   0
APINPXC  EQU   0
APINPXF  EQU   0
APINPXP  EQU   0
APINSTB  EQU   0
APINSTD  EQU   0
APINUNIT EQU   0
APINUST  EQU   0
APINXBS  EQU   0
APINXBX  EQU   0
APINXCD  EQU   0
APINXCT  EQU   0
APINXID  EQU   0
APINXI1  EQU   0
APINXI2  EQU   0
APINXLB  EQU   0
APINXST  EQU   0
APINYST  EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
DAPCW    EQU   0
WORDCNT  EQU   INDEXID2
APINFMT1 EQU   APINFMTS
APINAERR EQU   APINFMT1
@NM00026 EQU   APINFMT1+4
APINAKYW EQU   @NM00026
APINAKYV EQU   @NM00026+4
APINFMT2 EQU   APINFMTS
APINAAR  EQU   APINFMT2
APINFMT3 EQU   APINFMTS
APINASTB EQU   APINFMT3
APINAACW EQU   APINFMT3+4
APINAICW EQU   APINFMT3+8
APINAACI EQU   APINFMT3+12
APINAICI EQU   APINFMT3+16
APINFMT4 EQU   APINFMTS
APINAXI1 EQU   APINFMT4
APINAXI2 EQU   APINFMT4+4
APINAXLB EQU   APINFMT4+8
APINAXCD EQU   APINFMT4+12
APINFMT5 EQU   APINFMTS
APINADLB EQU   APINFMT5
APINFMT6 EQU   APINFMTS
APINABIV EQU   APINFMT6
APINABLB EQU   APINFMT6+4
APINFMT7 EQU   APINFMTS
APINACHS EQU   APINFMT7
APINACHC EQU   APINFMT7+4
APINACHB EQU   APINFMT7+8
APINACHX EQU   APINFMT7+12
APINFMT8 EQU   APINFMTS
APINACXS EQU   APINFMT8
APINACXC EQU   APINFMT8+4
APINACXX EQU   APINFMT8+8
APINFMT9 EQU   APINFMTS
APINASTD EQU   APINFMT9
APINADSV EQU   APINFMT9+4
APINAYST EQU   APINFMT9+8
APINAXST EQU   APINFMT9+12
APINAUST EQU   APINFMT9+16
APINFM10 EQU   APINFMTS
APINAXBS EQU   APINFM10
APINAXCT EQU   APINFM10+4
APINAXBX EQU   APINFM10+8
APINAXID EQU   APINFM10+12
APINAPMS EQU   APIN
APINAP1  EQU   APINAPMS
APINAP2  EQU   APINAPMS+4
APINAP3  EQU   APINAPMS+8
APINAP4  EQU   APINAPMS+12
APALLGCL EQU   APALDATA
APALLI1F EQU   APALLGCL+2
APALLI2F EQU   APALLGCL+3
APALIOXF EQU   APALDATA
APALIOTP EQU   APALIOXF
APALIOX  EQU   APALIOTP
APALIOCH EQU   APALIOXF+1
APALIORD EQU   APALIOCH
APCTZ    EQU   APCTZ@@@
APCTZUAA EQU   APCTZ
APCTZUAB EQU   APCTZ+4
APCTZUAC EQU   APCTZ+8
APCTZUAD EQU   APCTZ+12
APCTZUAE EQU   APCTZ+16
APCTZUBB EQU   APCTZ+24
APCTZD10 EQU   APCTZ+28
APCTZD20 EQU   APCTZ+32
APCTZD40 EQU   APCTZ+36
APCTZD41 EQU   APCTZ+40
APCTZD42 EQU   APCTZ+44
APCTZD43 EQU   APCTZ+48
APCTZD44 EQU   APCTZ+52
APCTZD45 EQU   APCTZ+56
APCTZD46 EQU   APCTZ+60
APCTZD47 EQU   APCTZ+64
APCTZD48 EQU   APCTZ+68
APCTZD49 EQU   APCTZ+72
APCTZD60 EQU   APCTZ+76
APCTZD80 EQU   APCTZ+80
APCTZD4E EQU   APCTZ+84
APCTZMBA EQU   APCTZ+88
APCTZMBD EQU   APCTZ+92
APCTZMBG EQU   APCTZ+96
APCTZDX1 EQU   APCTZ+104
APCTZDX2 EQU   APCTZ+108
APCTZDX3 EQU   APCTZ+112
APCTZDX4 EQU   APCTZ+116
APCTZMBH EQU   APCTZ+120
APCTZMBK EQU   APCTZ+124
APCTZMBM EQU   APCTZ+128
APCTZMJB EQU   APCTZ+132
APCTZMJC EQU   APCTZ+136
APCTZMJH EQU   APCTZ+140
APCTZMMA EQU   APCTZ+144
APCTZDMD EQU   APCTZ+148
APCTZD81 EQU   APCTZ+152
APCTZDID EQU   APCTZ+156
APCTZDRI EQU   APCTZ+160
APCTZMJI EQU   APCTZ+164
APCTZDWT EQU   APCTZ+168
APCTZDMM EQU   APCTZ+172
APCTZDAL EQU   APCTZ+176
APCTZDBK EQU   APCTZ+180
APCTZDIP EQU   APCTZ+184
APCTZDDA EQU   APCTZ+188
APCTZDUL EQU   APCTZ+192
APCTZDEQ EQU   APCTZ+196
APCTZDDQ EQU   APCTZ+200
APCTZDUA EQU   APCTZ+204
APCTZUAF EQU   APCTZ+208
APCTZUAG EQU   APCTZ+212
APCTZDIO EQU   APCTZ+216
APCTZUHA EQU   APCTZ+220
APCTZUHB EQU   APCTZ+224
APCTZJAA EQU   APCTZ+232
APCTZJAD EQU   APCTZ+236
APCTZJAG EQU   APCTZ+240
APCTZJAJ EQU   APCTZ+244
APCTZJAM EQU   APCTZ+248
APCTZJAP EQU   APCTZ+252
APCTZJAY EQU   APCTZ+256
APCTZUFA EQU   APCTZ+260
APCTZUJA EQU   APCTZ+264
APCTZDAP EQU   APCTZ+268
APCTZKAA EQU   APCTZ+272
APCTZD82 EQU   APCTZ+276
APCTZMIB EQU   APCTZ+280
APCTZMIC EQU   APCTZ+284
APCTZD83 EQU   APCTZ+288
APCTZMIF EQU   APCTZ+296
APCTZJH0 EQU   APCTZ+300
APCTZJI0 EQU   APCTZ+304
APCTZJI3 EQU   APCTZ+308
APCTZJJ0 EQU   APCTZ+312
APCTZJBA EQU   APCTZ+316
APCTZJBD EQU   APCTZ+320
APCTZJBG EQU   APCTZ+324
APCTZJBJ EQU   APCTZ+328
APCTZJBM EQU   APCTZ+332
APCTZKCA EQU   APCTZ+340
APCTZKDA EQU   APCTZ+344
APCTZJDA EQU   APCTZ+356
APCTZJDJ EQU   APCTZ+360
APCTZJH6 EQU   APCTZ+364
APCTZJHO EQU   APCTZ+368
APCTZJHF EQU   APCTZ+372
APCTZJHE EQU   APCTZ+376
APCTZDQR EQU   APCTZ+380
APCTZJHR EQU   APCTZ+384
APCTZJHT EQU   APCTZ+388
APCTZJHW EQU   APCTZ+392
APCTZ1   EQU   APCTZ@@1
APCTZKBA EQU   APCTZ1
APCTZKBC EQU   APCTZ1+4
APCTZKBB EQU   APCTZ1+8
APCTZJHC EQU   APCTZ1+20
APCTZJHQ EQU   APCTZ1+24
APCTZKBD EQU   APCTZ1+28
APCTZKBE EQU   APCTZ1+40
APCTZUKA EQU   APCTZ1+56
APCTZKBF EQU   APCTZ1+60
APCTZJDD EQU   APCTZ1+64
APCTZJDG EQU   APCTZ1+68
APCTZJDM EQU   APCTZ1+72
APCTZLCA EQU   APCTZ1+76
APCTZLCB EQU   APCTZ1+80
APCTZDWI EQU   APCTZ1+84
APCTZJAX EQU   APCTZ1+88
APCTZKGA EQU   APCTZ1+92
APCTZKGB EQU   APCTZ1+96
APCTZKGC EQU   APCTZ1+100
APCTZKGD EQU   APCTZ1+104
APCTU    EQU   APCTU@@@
APCT1MAB EQU   APCTU
APCT1MBD EQU   APCTU+4
APCT2MBD EQU   APCTU+8
APCT1CMD EQU   APCTU+12
APCT1JAA EQU   APCTU+20
APCT1JHC EQU   APCTU+24
APCT2JHC EQU   APCTU+28
APCT1JHT EQU   APCTU+32
APCT1JHL EQU   APCTU+36
APCT2JHL EQU   APCTU+40
APCT1JBJ EQU   APCTU+44
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00108 EQU   APCTU+48
APCT1MBM EQU   APCTU+16
@NM00107 EQU   APCTZ1+108
@NM00106 EQU   APCTZ1+52
@NM00105 EQU   APCTZ1+48
@NM00104 EQU   APCTZ1+44
@NM00103 EQU   APCTZ1+36
@NM00102 EQU   APCTZ1+32
@NM00101 EQU   APCTZ1+16
@NM00100 EQU   APCTZ1+12
@NM00099 EQU   APCTZ+396
@NM00098 EQU   APCTZ+352
@NM00097 EQU   APCTZ+348
@NM00096 EQU   APCTZ+336
@NM00095 EQU   APCTZ+292
APCTZJFA EQU   APCTZ+228
APCTZMBR EQU   APCTZ+100
@NM00094 EQU   APCTZ+20
@NM00055 EQU   APALIOXF+8
@NM00054 EQU   APALIOXF+2
@NM00053 EQU   APALIOCH
APALIOWR EQU   APALIOCH
@NM00052 EQU   APALIOTP
APALIOBS EQU   APALIOTP
@NM00051 EQU   APALLGCL+4
@NM00050 EQU   APALLI2F
APALLI2S EQU   APALLI2F
APALLI2I EQU   APALLI2F
APALLI2X EQU   APALLI2F
@NM00049 EQU   APALLI1F
APALLI1S EQU   APALLI1F
APALLI1I EQU   APALLI1F
APALLI1X EQU   APALLI1F
APALLTYP EQU   APALLGCL
APINAP4P EQU   APINAP4+1
@NM00030 EQU   APINAP4
APINAP4E EQU   APINAP4
APINAP3P EQU   APINAP3+1
@NM00029 EQU   APINAP3
APINAP3E EQU   APINAP3
APINAP2P EQU   APINAP2+1
@NM00028 EQU   APINAP2
APINAP2E EQU   APINAP2
APINAP1P EQU   APINAP1+1
@NM00027 EQU   APINAP1
APINAP1E EQU   APINAP1
@NM00125 EQU   APRL+80
@NM00124 EQU   APRL+76
APRLEMSP EQU   APRL+72
APRLEMSL EQU   APRL+70
APRLACTV EQU   APRL+69
@NM00123 EQU   APRLEXTS
APRLEXTA EQU   APRLEXTS
@NM00122 EQU   APRL+60
APRLPGFX EQU   APRLOPT7
APRLDUMP EQU   APRLOPT7
@NM00121 EQU   APRLOPT7
@NM00120 EQU   APRLOPT6
@NM00119 EQU   APRLOPT5
@NM00118 EQU   APRLOPT4
@NM00117 EQU   APRL+52
@NM00116 EQU   APRL+48
APRLAPRL EQU   APRL+44
@NM00115 EQU   APRLOPT3
@NM00114 EQU   APRLOPT2
@NM00113 EQU   APRLOPT1
APRLNRC  EQU   APRLOPT0
@NM00112 EQU   APRLOPT0
APRLXIO  EQU   APRLOPT0
APRLASY  EQU   APRLOPT0
@NM00111 EQU   APRLOPT0
APRLCCW  EQU   APRL+36
APRLAPIO EQU   APRL+32
APRLTCB  EQU   APRL+28
APRLACB  EQU   APRL+24
APRLURCP EQU   APRL+20
APRLVALN EQU   APRL+18
APRLMSGN EQU   APRL+16
APRLRCN  EQU   APRLFDBK+3
APRLRCC  EQU   APRLFDBK+2
APRLRCT  EQU   APRLFDBK+1
@NM00110 EQU   APRLFDBK
APRLECBA EQU   APRLECB+1
@NM00109 EQU   APRLECBC
APRLECBP EQU   APRLECBC
APRLECBW EQU   APRLECBC
APRLUSER EQU   APRL+4
APRLID   EQU   APRL
@NM00093 EQU   APCT+1556
APCTSVCT EQU   APCT+1552
APCTDAVT EQU   APCT+1548
APCTLOGL EQU   APCT+1544
@NM00092 EQU   APCT+1540
APCTDMPU EQU   APCT+1536
APCTDMPM EQU   APCT+1532
APCTNDMP EQU   APCT+1530
APCTASID EQU   APCT+1528
APCTLGPG EQU   APCT+1526
APCTLGLN EQU   APCT+1524
APCTAPVU EQU   APCT+1520
APCTABR  EQU   APCT+1116
APCTACTR EQU   APCT+1112
APCTLOGD EQU   APCT+1108
APCTDCLD EQU   APCT+1104
APCTIOAP EQU   APCT+1100
@NM00091 EQU   APCT+1080
@NM00090 EQU   APCT+1078
APCTKCAX EQU   APCT+1076
APCTABND EQU   APCT+1072
@NM00089 EQU   APCT+1068
APCTAPIO EQU   APCT+1064
APCTCSCT EQU   APCT+1060
APCTSTDF EQU   APCT+1056
APCTSTMX EQU   APCT+1052
APCTRGMX EQU   APCT+1048
APCTSIZE EQU   APCT+1046
APCTCTUB EQU   APCT+1045
APCTMFID EQU   APCT+1044
APCTMFSZ EQU   APCT+1040
APCTCRTN EQU   APCT+1036
APCTAPCP EQU   APCT+1032
APCTAMNA EQU   APCT+1028
APCTEMNA EQU   APCT+1024
APCTAALP EQU   APCT+1020
APCTEALP EQU   APCT+1016
@NM00088 EQU   APCT+1012
@NM00087 EQU   APCT+1008
@NM00086 EQU   APCT+1004
APCTEIPL EQU   APCT+1000
@NM00085 EQU   APCT+996
@NM00084 EQU   APCT+992
@NM00083 EQU   APCT+988
@NM00082 EQU   APCT+984
@NM00081 EQU   APCT+980
APCTECPW EQU   APCT+976
APCTEULD EQU   APCT+972
APCTECPT EQU   APCT+968
APCTEALC EQU   APCT+964
APCTECBL EQU   APCT+960
APCTECIT EQU   APCT+956
APCTCQAF EQU   APCTCQAQ
APCTCQL  EQU   APCTAPCQ+4
APCTCQF  EQU   APCTAPCQ
APCTCQLK EQU   APCT+940
@NM00080 EQU   @NM00076+2
@NM00079 EQU   APCTPRSW
APCTAPST EQU   APCTPRSW
@NM00078 EQU   APCTPRSW
@NM00077 EQU   APCTSTAT
APCTWARM EQU   APCTSTAT
APCTTERM EQU   APCTSTAT
APCTHALT EQU   APCTSTAT
APCTQSCE EQU   APCTSTAT
APCTSTRT EQU   APCTSTAT
APCTACT  EQU   APCTSTAT
APCTVUNX EQU   APCT+935
APCTSOUT EQU   APCT+934
APCTDAID EQU   APCT+933
APCTSV34 EQU   APCT+932
APCTMJOB EQU   APCT+928
APCTTCB  EQU   APCT+924
APCTASCB EQU   APCT+920
@NM00075 EQU   APCT+912
@NM00074 EQU   APCT+908
@NM00073 EQU   APCT+904
@NM00072 EQU   APCT+900
@NM00071 EQU   APCTERRS+22
APCTERTJ EQU   APCTERRS+20
APCTERTD EQU   APCTERRS+18
APCTERTC EQU   APCTERRS+16
APCTERTB EQU   APCTERRS+14
APCTERTA EQU   APCTERRS+12
APCTERT9 EQU   APCTERRS+10
APCTERT3 EQU   APCTERRS+8
APCTERT2 EQU   APCTERRS+6
APCTERT1 EQU   APCTERRS+4
APCTERT0 EQU   APCTERRS+2
APCTERTT EQU   APCTERRS
APCTDSAP EQU   APCT+872
APCTISUB EQU   APCT+868
APCTUBAP EQU   APCT+864
APCTAPDS EQU   APCT+860
APCTUBIC EQU   APCT+856
APCTUBIS EQU   APCT+852
APCTAPUB EQU   APCT+848
APCTUBLK EQU   APCT+844
APCTBR1A EQU   APCTBR14+2
@NM00070 EQU   APCTBR14
APCTSMSZ EQU   APCTSMAD+2
@NM00069 EQU   APCTSMAD+1
@NM00068 EQU   APCTSMAD
APCTSMIS EQU   APCTSMIN+2
@NM00067 EQU   APCTSMIN+1
APCTSMSP EQU   APCTSMIN
@NM00066 EQU   APCT+30
APCTLINE EQU   APCT+28
APCTLBSZ EQU   APCT+24
APCTREG  EQU   APCT+20
APCTSSID EQU   APCTENQM+4
@NM00065 EQU   APCTENQM
APCTSSVT EQU   APCT+8
APCTUSER EQU   APCT+4
APCTID   EQU   APCT
APSVWORK EQU   APSV+80
@NM00064 EQU   APSV+80
APSVFREE EQU   APSV+76
APSVAPSM EQU   APSV+72
APSVRG12 EQU   APSVREGS+56
APSVRG11 EQU   APSVREGS+52
APSVRG10 EQU   APSVREGS+48
APSVRG9  EQU   APSVREGS+44
APSVRG8  EQU   APSVREGS+40
APSVRG7  EQU   APSVREGS+36
APSVRG6  EQU   APSVREGS+32
APSVRG5  EQU   APSVREGS+28
APSVRG4  EQU   APSVREGS+24
APSVRG3  EQU   APSVREGS+20
APSVRG2  EQU   APSVREGS+16
APSVRG1  EQU   APSVREGS+12
APSVRG0  EQU   APSVREGS+8
APSVRG15 EQU   APSVREGS+4
APSVRG14 EQU   APSVREGS
APSVNEXT EQU   APSV+8
APSVPREV EQU   APSV+4
APSVAPSC EQU   APSV
@NM00063 EQU   APEM+128
APEMSSNM EQU   APEM+124
APEMCM17 EQU   APEM+123
APEMAPRL EQU   APEM+117
APEMCM16 EQU   APEM+116
APEMVALP EQU   APEMVALU
APEMCM15 EQU   APEM+107
@NM00062 EQU   APEMMSG+4
APEMCM13 EQU   APEM+91
APEMCCWC EQU   APEM+85
APEMCM12 EQU   APEM+84
APEMDDN  EQU   APEM+76
APEMCM11 EQU   APEM+75
APEMDVTP EQU   APEM+73
APEMCM10 EQU   APEM+72
APEMUNIT EQU   APEM+69
APEMCM09 EQU   APEM+68
APEMSTEP EQU   APEM+60
APEMCM08 EQU   APEM+59
APEMJOB  EQU   APEM+51
APEMCM07 EQU   APEM+50
APEMCICT EQU   APEM+48
APEMCM06 EQU   APEM+47
APEMCIOP EQU   APEM+43
APEMCM05 EQU   APEM+42
APEMCINM EQU   APEM+38
APEMCM04 EQU   APEM+37
APEMNAME EQU   APEM+33
APEMCM03 EQU   APEM+32
APEMERCD EQU   APEM+26
APEMCM02 EQU   APEM+25
APEMTIME EQU   APEM+18
APEMCM01 EQU   APEM+17
APEMDATE EQU   APEM+12
APEMREG1 EQU   APEM+8
APEMZ2   EQU   APEM+6
APEMSZ2  EQU   APEM+4
APEMZ1   EQU   APEM+2
APEMSZ1  EQU   APEM
@NM00061 EQU   APAX+72
@NM00060 EQU   APAX+68
@NM00059 EQU   APAX+64
APAXAPRL EQU   APAX+52
@NM00058 EQU   APAXFLG2
APAXBDSW EQU   APAXFLG2
@NM00057 EQU   APAXFLG1
@NM00056 EQU   APAXFLG0
APAXSVSW EQU   APAX+44
APAXARBL EQU   APAX+40
APAXAPLB EQU   APAX+36
APAXCIE  EQU   APAX+32
APAXCIS  EQU   APAX+24
APAXCCWE EQU   APAX+20
APAXCCWS EQU   APAX+12
APAXAPSV EQU   APAX+8
APAXUSER EQU   APAX+4
APAXID   EQU   APAX
APALUCNT EQU   APALU+10
@NM00048 EQU   APALU+5
@NM00047 EQU   APALUFMT
APALUFOP EQU   APALUFMT
APALUFRQ EQU   APALUFMT
@NM00046 EQU   APALUDL
APALUDOP EQU   APALUDL
APALUDRQ EQU   APALUDL
APALUCSD EQU   APALUCT
@NM00045 EQU   APALUCT
APALUCOP EQU   APALUCT
APALUCRQ EQU   APALUCT
@NM00044 EQU   APALUVS
APALUVOP EQU   APALUVS
APALUVRQ EQU   APALUVS
APALUFXD EQU   APALUFSW
APALUFXC EQU   APALUFSW
APALUFXS EQU   APALUFSW
APALUFSO EQU   APALUFSW
APALUFSR EQU   APALUFSW
APALUFFT EQU   APALUFSW
APALUFFX EQU   APALUFSW
APALUFFL EQU   APALUFSW
APALXCNT EQU   APALX+10
@NM00043 EQU   APALX+5
@NM00042 EQU   APALXFMT
APALXFOP EQU   APALXFMT
APALXFRQ EQU   APALXFMT
@NM00041 EQU   APALXDL
APALXDOP EQU   APALXDL
APALXDRQ EQU   APALXDL
APALXCSD EQU   APALXCT
@NM00040 EQU   APALXCT
APALXCOP EQU   APALXCT
APALXCRQ EQU   APALXCT
@NM00039 EQU   APALXVS
APALXVOP EQU   APALXVS
APALXVRQ EQU   APALXVS
APALXFXD EQU   APALXFSW
APALXFXC EQU   APALXFSW
APALXFXS EQU   APALXFSW
APALXFSO EQU   APALXFSW
APALXFSR EQU   APALXFSW
APALXFFT EQU   APALXFSW
APALXFFX EQU   APALXFSW
APALXFFL EQU   APALXFSW
APALYCNT EQU   APALY+10
@NM00038 EQU   APALY+5
@NM00037 EQU   APALYFMT
APALYFOP EQU   APALYFMT
APALYFRQ EQU   APALYFMT
@NM00036 EQU   APALYDL
APALYDOP EQU   APALYDL
APALYDRQ EQU   APALYDL
APALYCSD EQU   APALYCT
@NM00035 EQU   APALYCT
APALYCOP EQU   APALYCT
APALYCRQ EQU   APALYCT
@NM00034 EQU   APALYVS
APALYVOP EQU   APALYVS
APALYVRQ EQU   APALYVS
APALYFXD EQU   APALYFSW
APALYFXC EQU   APALYFSW
APALYFXS EQU   APALYFSW
APALYFSO EQU   APALYFSW
APALYFSR EQU   APALYFSW
APALYFFT EQU   APALYFSW
APALYFFX EQU   APALYFSW
APALYFFL EQU   APALYFSW
@NM00033 EQU   APALALG+1
@NM00032 EQU   APALSTAT
APALSDIV EQU   APALSTAT
APALSCON EQU   APALSTAT
APALSUNF EQU   APALSTAT
APALSOVF EQU   APALSTAT
APALSTKO EQU   APALSTAT
APALSTKR EQU   APALSTAT
@NM00031 EQU   APAL+6
APALUSER EQU   APAL
@NM00025 EQU   APCW+240
APCWEMSG EQU   APCWAPEM
@NM00024 EQU   APCW+112
@NM00023 EQU   APCW+80
@NM00022 EQU   APCW+76
APCWZCNV EQU   APCWINT3
APCWZFLO EQU   APCWINT3
APCWZFLU EQU   APCWINT3
APCWZFLD EQU   APCWINT3
APCWZIDX EQU   APCWINT3
APCWZFLN EQU   APCWINT3
@NM00021 EQU   APCWINT3
APCWZLGC EQU   APCWINT2
APCWZHDW EQU   APCWINT2
APCWZUKN EQU   APCWINT2
@NM00020 EQU   APCWINT2
@NM00019 EQU   APCWINT1
@NM00018 EQU   APCWINT0
APCWRC0  EQU   APCWRCDE
APCWR15B EQU   APCWR15C+3
@NM00017 EQU   APCWR15C
@NM00016 EQU   APCW+60
APCWAPFN EQU   APCW+56
@NM00015 EQU   APCW+52
APCWNBRI EQU   APCW+48
APCWSW1  EQU   APCWSWS+1
@NM00014 EQU   APCWSW0
APCWSVAL EQU   APCWSW0
APCWSIX  EQU   APCWSW0
@NM00013 EQU   APCW+44
@NM00012 EQU   APCW+36
APCWAPCP EQU   APCW+32
APCWAPIO EQU   APCW+28
APCWAPRL EQU   APCW+24
APCWACBF EQU   APCWACB
APCWAPSV EQU   APCW+16
APCWAPUT EQU   APCW+12
APCWUSER EQU   APCW+4
APCWID   EQU   APCW
ACBAMAX  EQU   ACBAPID
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00011 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00010 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00009 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00008 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00007 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00006 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00005 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00004 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00003 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00002 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
LASTPCI  EQU   LASTFLGS
LASTSKIP EQU   LASTFLGS
LASTSLI  EQU   LASTFLGS
LASTCODE EQU   LASTCCW
LASTLGTH EQU   LASTCIT+2
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00092 EQU   @EL00001
@RT00097 EQU   @EL00001
@RC00135 EQU   @EL00001
@RT00217 EQU   @EL00001
@RT00223 EQU   @EL00001
@RT00236 EQU   @EL00001
@RT00241 EQU   @EL00001
@RC00200 EQU   @RC00199
@RT00263 EQU   @EL00001
@RT00269 EQU   @EL00001
@RT00282 EQU   @EL00001
@RT00287 EQU   @EL00001
@RC00246 EQU   @RC00245
@RT00302 EQU   @EL00001
@RT00307 EQU   @EL00001
@ENDDATA EQU   *
         END   IGTMDB,(C'PLS1939',0701,77286)
