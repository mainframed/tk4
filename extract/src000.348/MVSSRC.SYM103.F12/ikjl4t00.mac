IKJL4T00 TITLE 'SIC SRB ROUTINE'
***********************************************************************
*
* MODULE NAME = IKJL4T00
*
* DESCRIPTIVE NAME = SYSTEM INITIATED CANCEL SRB ROUTINE
*
* COPYRIGHT = NONE
*
* STATUS = OS/VS2 - TSO/SNA (SU13)                             @ZA08182
*
*
* FUNCTION = TO PROVIDE SYNCHRONIZATION OF EVENTS BETWEEN TIOC,
*            LOGON SCHEDULER AND ITS SUBTASKS, SO THAT ORDERLY
*            CANCELLATION OF A TSO USER CAN OCCUR. BESIDES
*            BEING INVOKED DURING CANCEL OF A TS USER, THIS
*            ROUTINE IS ALSO INVOKED IN A LINE DROP SITUATION  @ZA07126
*            OR TO ASSIST CANCELLATION OF A BACKGROUND JOB.    @ZA07126
*
* OPERATION = .ESTABLISH RECOVERY ENVIRONMENT
*             .OBTAIN THE LOCAL AND CMS LOCKS.
*             .VERIFY THAT CSCB FOR CANCELLED TS USER OR BACKGROUND
*              JOB STILL EXISTS.
*             .IF RCT PURGE IN PROGRESS, STATUS RESET ALL      @ZA07126
*              SUBTASKS DISPATCHABLE.                          @ZA07126
*             .OBTAIN LOGON SCHEDULER TASK TCB ADDRESS
*             .IF THE TS USER IS NOT A VTAM USER OR IF BIT     @Z40DQSS
*             'LWASCICSP' IS ON (SHORT PATH WANTED) THEN       @Z40DQSS
*               1) BRANCH ENTER STATUS TO SET NONDISPATCHABLE  @Z40DQSS
*                  SCHEDULER AND ALL ITS SUBTASKS VIA          @Z40DQSS
*                  SECONDARY MASK WITH IWAIT AND OWAIT BITS    @Z40DQSS
*                  BOTH ON, BECAUSE THERE MAY EXIST NO LINE    @Z40DQSS
*                  FOR TPUTS.                                  @Z40DQSS
*               2) BRANCH ENTER QTIP WITH ENTRY CODE 24 TO     @Z40DQSS
*                  REMOVE FROM OWAIT ANY TASK WHICH HAS SEND   @Z40DQSS
*                  A TPUT TO THEGTS USER BEING CANCELLED AND   @Z40DQSS
*                  ALSO TO SET TSBCANC BIT FOR THIS USER.      @Z40DQSS
*             .BRANCH ENTER POST TO POST CANCEL ECB FOR THIS
*             USER.
*             .IF THE TS USER IS NOT A VTAM USER OR IF BIT     @Z40DQSS
*             'LWASCICSP' IS ON (SHORT PATH WANTED) THEN       @Z40DQSS
*               1) ISSUE STATUS (BRANCH ENTRY) TO RESET        @Z40DQSS
*                  NONDISPATCHABLE LOGON SCHEDULER TO MAKE THE @Z40DQSS
*                  LOGON SCHEDULER DISPATCHABLE.               @Z40DQSS
*               2) OBTAIN ADDRESS OF LOGON PROMPTER FROM LWA   @Z40DQSS
*                  AND VERIFY THAT IT IS THE DAUGHTER TCB TO   @Z40DQSS
*                  LOGON SCHEDULER, THUS VERIFYING THAT IT IS  @Z40DQSS
*                  THE LOGON PROMPTER.                         @Z40DQSS
*               3) IF SO, ISSUE STATUS (BRANCH ENTRY) TO RESET @Z40DQSS
*                  NONDISPATCHABLE LOGON PROMPTER.             @Z40DQSS
*             .FREEMAIN SRB.
*             .RELEASE LOCAL AND CMS LOCKS.
*             .RETURN TO SUPERVISOR ON BR14.
***********************************************************************
         EJECT
***********************************************************************
*
* NOTES = SEE BELOW
*
*    DEPENDENCIES = SETLOCK
*                   QTIP ENTRY CODE 24
*                   STATUS BRANCH ENTRY
*                   FREEMAIN
*                   SETFRR
*                   SRM TO GIVE FRR ROUTINE CONTROL
*                   PURGEDEQ TO GIVE RMTR ROUTINE CONTROL
*                   POST
*                   LOGON FOR LWA INITIALIZATION
*                   SCHEDULE FOR SRB DISPATCHING
*                   EBCDIC CHARACTER CODE DEPENDENCE CORRECTABLE
*                   BY REASSEMBLY.
*    RESTRICTIONS = ALL RESTRICTIONS APPLYING TO SRB ROUTINES.
*
*    REGISTER CONVENTIONS = SEE INPUT DATA
*
*    PATCH LABEL = PTCHL4T0 A DC STATEMENT.
*
* MODULE TYPE = SRB CSECT
*
* MODDULE SIZE = 2B0 HEX
*
* ATTRIBUTES = REENTRANT, PAGED LPA, ZERO PSW KEY, SUPERVISOR
*              MODE.
**********************************************************************
         EJECT
**********************************************************************
*
* ENTRY POINT = IKJL4T00 FROM SUPERVISOR SRB SCHEDULING ROUTINE.
*
* PURPOSE = SEE FUNCTION.
*
* LINKAGE = STANDARD LINKAGE CONVENTIONS.
*
* INPUT DATA = R0 CONTAINS ADDRESS OF SRB
*              R1 CONTAINS CONTENTS OF SRBPARM FIELD.
*              R14 CONTAINS RETURN ADDRESS TO SRB EXIT ROUTINE.
*              R15 CONTAINS ENTRY POINT OF ASYNCHRONOUS ROUTINE.
*              SRBPARM FIELD POINTS TO TWO WORD PARM LIST -
*                 WORD ONE = ADDRESS OF CSCB TO CANCEL.
*                 WORD TWO = POST CODE, RIGHT JUSTIFIED.
*
* REGISTERS SAVED = R14
*
* REGISTER CONTENTS DURING PROCESSING = SETFRR USES R4,R11,R12.
*                                       SETLOCK USES R11,R12,R13
*                                         AND R14.
*                                       STATUS USES R0,R1,R13,R14
*                                         AND R15.
*                                       QTIP USES R0,R5,R14,R15,
*                                         AND SAVES R2-R14.
*                                       POST USES R10,R11,R14,
*                                         AND R15 AND SAVES R0-R9
*                                         PLUS R14.
*                                       FREEMAIN USES R0,R1,R3,R4,
*                                         R7,R14,R15.
*
*
* REGISTERS RESTORED = R14
*
**********************************************************************
* ENTRY POINT = IKJL4T01 FROM PURGEDEQ
*
* PURPOSE = FREEMAIN SRB AS PART OF RMTR ROUTINE FUNCTION
*           WHICH GETS CONTROL IF SCHEDULE FAILS. AN RMTR
*           ROUTINE IS AN ERROR EXIT ROUTINE REQUIRED OF
*           EVERY SRB ROUTINE.
*
* LINKAGE = FROM PURGEDEQ
*
* INPUT = R1  - ADDRESS OF SRB OF DEQ'D SRB
*         R2  - CONTENTS OF SRBPARM OF DEQ'D SRB
*         R14 = RETURN ADDRESS TO PURGEDEQ
*         R15 = ENTRY POINT ADDRESS OF IKJL4T01
*
**********************************************************************
         EJECT
**********************************************************************
* ENTRY POINT = IKJL4T02 FROM SRM
*
* PURPOSE = FREEMAIN SRB AS PART OF FRR ROUTINE WHICH
*           GETS CONTROL FROM THE SRM (SYSTEM RECOVERY
*           MANAGER) IF THE SCHEDULED SRB ROUTINE FAILS.
*
* LINKAGE = FROM SRM
*
* INPUT = R1 - CONTAINS A POINTER TO THE SDWA. FIRST WORD OF
*         SDWA POINTS TO FRR PARMLIST.
*
**********************************************************************
* EXIT - NORMAL = RETEXIT, RETURN TO SRB EXIT ROUTINE.
*
* CONDITIONS = NORMAL COMPLETION OF FUNCTION
*
* OUTPUT DATA = NONE
*
* RETURN CODE = NONE
*
**********************************************************************
* EXIT - ERROR = RMTREXIT
*
* CONDITIONS = COMPLETION OF RMTR PROCESSING FREEING
*              SRB
* OUTPUT DATA = NONE
*
* RETURN CODE = NONE
*
**********************************************************************
* EXIT - ERROR = FRREXIT
*
* CONDITIONS = COMPLETION OF FRR PROCESSING FREEING
*              SRB
*
* OUTPUT DATA = NONE
*
* RETURN CODE = NONE
*
**********************************************************************
         EJECT
**********************************************************************
* EXTERNAL REFERENCES = SEE BELOW
*
*    ROUTINES = STATUS BRANCH ENTRY
*               QTIP BRANCH ENTRY
*               POST BRANCH ENTRY
*
*    DATA AREAS = FRRPARM: INTERNAL LIST TO FRR ROUTINE: WRITE
*
*    CONTROL BLOCKS = IHASRB    SRB              READ
*                     IKJTCB    TCB              READ
*                     IHASDWA   SDWA             READ
*                     IKJEFLWA  LWA              READ
*                     CVT       CVT              READ
*                     IHASCVT   SECONDARY CVT    READ
*                     IHAFRRS   FRR STACK        READ
*                     IHAPSA    PSA              READ
*                     IKJTIOCP  TIOCRPT          READ
*                     TTCXD     TCX              READ
*                     IHAASCB   ASCB             READ
*                     IEECHAIN  CSCB             READ
*                     IHAASXB   ASXB             READ
*                     IKJTSB    TSB              READ          @Z40DQSS
*
*    TABLES = NONE
*
*    MACROS = MODID
*             SETLOCK
*             FREEMAIN BRANCH ENTRY
*             SETFRR
*
* MESSAGES = NONE
*
* CHANGE-ACTIVITY = Y02651 GENERAL MP SYNCHRONIZATION SUPPORT
*                 = YM01528 TCB VALIDITY CHECKING, ENTRY,
*                   NO POST BYPASS IF NO LWA
*                 = YM01821 STATUS NEEDS SECONDARY NONDISPATCHIBILITY
*                   MASK OF ONE WORD, NOT JUST ONE BYTE. TEST IF
*                   TCAM INITIALIZED BEFORE ENTERING QTIP.
*                 = ZA02119, ZA07126, ZA06994,ZA08182          @ZA08182
*                 = Z40DQSS TSO/SNA SUPPORT                    @Z40DQSS
*
* SYSGEN = IKJL4T00 IS INCLUDED IN LOAD IKJEFLF BY SYSGEN
*          MACRO SGIKJ441. DISLIB IS AOST4. TARGLIB IS LPALIB.
*
***********************************************************************
         TITLE 'SERVICE REQUEST BLOCK'
         IHASRB
         TITLE 'TASK CONTROL BLOCK'
         IKJTCB
         TITLE 'LOGON WORK AREA'
         IKJEFLWA
         TITLE 'FUNCTIONAL RECOVERY ROUTINE STACK'
         IHAFRRS
         TITLE 'PREFIX SAVE AREA'
         IHAPSA
         TITLE 'STAE DIAGNOSTIC WORK AREA'
         IHASDWA
         TITLE 'CVT'
         CVT   DSECT=YES
         TITLE 'SECONDARY CVT'
         IHASCVT
         TITLE 'TCAM CVT EXTENSION'
         TTCXD
         TITLE 'TIOC REFERENCE POINTER TABLE'
         IKJTIOCP LIST=YES
         TITLE 'ADDRESS SPACK CONTROL BLOCK'
         IHAASCB
         TITLE 'COMMAND SCHEDULING CONTROL BLOCK'
CSCB     DSECT
         IEECHAIN
         TITLE 'ADDRESS SPACE EXTENSION BLOCK'
         IHAASXB
         EJECT
         IKJTSB LIST=YES                                       @Z40DQSS
         TITLE 'MODULE DEFINED SRB PARM AREA'
***********************************************************************
*
* PARMSECT IS THE PARM AREA USED BY THE SCHEDULE ROUTINE. THE CORE
* IS GOTTEN IN THE ROUTINE WHICH SCHEDULES IKJL4T00 AT THE SAME
* TIME THAT CORE FOR THE SRB BLOCK IS OBTAINED.  THE MODULE WHICH
* PERFORMS THE SCHEDULE AND THE GETMAIN (SUBPOOL 239) IS IKJEFLF.
* IKJEFLF ALSO INITIALIZES THE PARMAREA.
*
***********************************************************************
PARMSECT DSECT                    SRB PARM AREA DSECT
PARMCSCB DS    F                  POINTER TO CSCB FOR THIS MEMORY
PARMPOST DS    F                  CONTAINS POST CODE
PARMR14  DS    F                  USED TO SAVE R14
         DS    F                  RESERVED
PARMEND  EQU   *
PARMSIZE EQU   PARMEND-PARMSECT   SIZE OF PARMAREA
         TITLE 'MODULE DEFINED FRR PARM AREA'
**********************************************************************
*
* FRRPARM IS AN AREA RETURNED TO IKJL4T00 AFTER EXECUTION OF THE
* SETFRR MACRO. IT IS 24 BYTES IN LENGTH. IT IS INITIALIZED IN
* IKJL4T00 IMMEDIATELY AFTER THE SETFRR MACRO. IN THE CASE OF
* FAILURE OF IKJL4T00, A POINTER TO FRRPARM IS PASSED TO THE
* FRR ROUTINE (IKJL4T02) IN THE FIRST WORD OF THE SDWA. THIS
* POINTER IS SET UP BY SETFRR.
*
**********************************************************************
FRRPARM  DSECT                    FRR ROUTINE PARMLIST
FRRSRB   DS    F                  POINTER TO SRB BLOCK
FRRASCB  DS    F                  MEMORY ID. FOR FREEMAIN
         DS    4F                 RESERVED
FRREND   EQU   *
FRRSIZE  EQU   FRREND-FRRPARM     SIZE OF FRR PARMAREA
         TITLE 'SRB ROUTINE PROCESSING FOR SIC'
IKJL4T00 CSECT
         ENTRY IKJL4T01
* A 000000-999999                                                Y02651
* A - 070999-071199,082920,082924                              @ZA02119
* A PROCESSING CHANGED AT- NEAR LABEL TESTTSO                  @ZA07126
* IKJL4T01(C) ADDED LOCAL LOCKS                                @ZA06994
* D C TESTLWA APPROX 070899                                    @ZA08182
* C   CONTSTAT APPROX 082922                                   @ZA08182
**********************************************************************
*                        REGISTER EQUATES
**********************************************************************
         SPACE
R0       EQU   0                  INPUT PTR TO SRB: SPVSR SERVICES
R1       EQU   1                  INPUT PTR SRBPARM: SPVSR SERVICES
R2       EQU   2                  SRB BASE REG
R3       EQU   3                  SRBPARM BASE REG,SPVSR SERVICES
R4       EQU   4                  FRRPARM BASE REG,SPVSR SERVICES
R5       EQU   5                  ASID FOR QTIP, PROMPTER TCB PTR
R6       EQU   6                  ASCB BASE
R7       EQU   7                  CSCB BASE,LWA BASE,SPVSR
R8       EQU   8                  SECONDARY CVT BASE REG
R9       EQU   9                  PROGRAM ADDRESSIBILITY
R10      EQU   10                 POST CODE FOR BRANCH ENTRY
R11      EQU   11                 SUPERVISOR SERVICES
R12      EQU   12                 SUPERVISOR SERVICES
R13      EQU   13                 SUPERVISOR SERVICES
R14      EQU   14                 SUPERVISOR SERVICES
R15      EQU   15                 SUPERVISOR SERVICES
         SPACE
**********************************************************************
*              DISPLACEMENTS AND EQUATES.
**********************************************************************
         SPACE
D0       EQU   0                  USED FOR LA INSTRUCTION
D4       EQU   4                  ASCB PTR LENGTH FOR MVC
D8       EQU   8                  USED BY SHIFT INSTRUCTION     YM01821
CODE10   EQU   10                 ENTRY CODE 10 FOR STATUS
CODE11   EQU   11                 ENTRY CODE 11 FOR STATUS
CODE24   EQU   24                 ENTRY CODE 24 FOR QTIP
NONDISP  EQU   TCBIWAIT+TCBOWAIT  NONDISPATCHIBILITY MASK FOR STATUS
         EJECT
**********************************************************************
* THIS PAGE OF CODE ESTABLISHES ADDRESSIBILITY FOR THE PROGRAM,
* THE SRB CONTROL BLOCK, AND THE SRB PARM AREA CREATED BY IKJEFLF.
* IT SAVES R14 IN THE PARMAREA, AND SETS UP AN FRR ENVIRONMENT FOR
* THE SRB ROUTINE.
**********************************************************************
         BALR  R9,D0              PROGRAM ADDRESSIBILITY
         USING *,R9               PROGRAM BASED ON R9
ENTRYSRB EQU   *
         MODID BRANCH=YES
         LR    R2,R0              INPUT PTR TO SRB BLOCK SAVED
         USING SRBSECT,R2         SRB ADDRESSIBILITY ESTABLISHED
         LR    R3,R1              INPUT PTR TO SRB PARM BLOCK
         USING PARMSECT,R3        SRB PARM ADDRESSIBILITY
         ST    R14,PARMR14        SAVE RETURN ADDRESS IN PARM
         LA    R11,IKJL4T02       ENTRY POINT FRR ROUTINE
         SETFRR A,FRRAD=(11),PARMAD=(4),WRKREGS=(4,12)
         EJECT
***********************************************************************
* THIS SECTION OF CODE INITIALIZES THE FRR PARMAREA
* RETURNED BY SETFRR WITH THE SRB AND ASCB POINTERS WHICH THE
* FRR ROUTINE WILL NEED.
***********************************************************************
         USING FRRPARM,R4         FRR PARM ADDRESSIBILITY
         ST    R2,FRRSRB          SAVE SRB PTR IN FRR PARM
*                                 SAVE ASCB PTR IN FRR PARM
         MVC   FRRASCB(D4),SRBASCB
         DROP  R4
         EJECT
***********************************************************************
*
*          THIS SECTION OF CODE OBTAINS THE LOCAL AND CMS LOCKS
*
***********************************************************************
GETLOCK  EQU   *
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        *
               RELATED=(CANTSO,IKJL4T00(CLRLOCK))
         SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,                          *
               RELATED=(QTIP,IKJL4T00(CLRLOCK))
         EJECT
**********************************************************************
*
* THE FOLLOWING CODE PERFORMS VALIDITY CHECKING. FIRST IT MUST
* BE VERIFIED THAT THE ASCBCSCB POINTER IN THE INPUT ASCB IS VALID,
*                                                              @ZA07126
* IF RCT PURGE IS IN PROGRESS (ASXBPIP=1), SET ASXBTFD TO ONE  @ZA07126
* TO INDICATE TO RCT THAT ITS SUBTASKS HAVE BEEN FORCED        @ZA07126
* DISPATCHABLE.                                                @ZA07126
*
**********************************************************************
         L     R6,SRBASCB         GET INPUT ASCB PTR FROM SRB
         USING ASCB,R6            ESTABLISH ASCB ADDRESSIBILITY
         L     R7,ASCBCSCB        GET CSCB PTR FROM THAT ASCB
         LTR   R7,R7              VERIFY THAT CSCB STILL EXISTS.
*                                 CSCB TERMINATION COULD HAVE
*                                 OCCURRED BETWEEN SCHEDULE AND
*                                 DISPATCH OF SRB.
         BZ    RESTREGS           RETURN IF ZERO
         L     R7,ASCBASXB        GET ASXB PTR FROM ASCB
         USING ASXB,R7            ESTABLISH ASXB ADDRESSIBILITY
CSLOOP   L     R4,ASXBCASW        LOAD WORD CONTAINING BYTE    @ZA07126
         TM    ASXBCASW,ASXBPIP   IS RCT PURGE IN PROCESS      @ZA07126
         BZ    TESTTSO            NO THEN CHECK FOR TSO        @ZA07126
         LA    R5,ASXBTFD         LOAD MASK IN LOW ORDER BYTE  @ZA07126
         SLL   R5,24              SHIFT MASK TO HIGH ORDER     @ZA07126
         OR    R5,R4              OR WORD CONTAINING BYTE      @ZA07126
         CS    R4,R5,ASXBCASW     COMPARE AND SWAP ASXBTFD ON  @ZA07126
         BNE   CSLOOP             GO BACK TO LOAD THE SC WORD  @ZA07126
         EJECT                                                 @ZA07126
***************************************************************@ZA07126
*
*      THIS SECTION OF CODE WILL SET ALL OF RCT'S SUBTASKS     @ZA07126
*      DISPATCHABLE VIA BRANCH ENTRY TO STATUS WITH REGS SET   @ZA07126
*      AS FOLLOWS:
*                 - REGISTER 0                                 @ZA07126
*                     BYTE 2-3   ENTRY CODE 0A INDICATING A    @ZA07126
*                                SECONDARY NON-DISPATCHABILITY @ZA07126
*                                FLAG IS TO BE RESET IN ALL OF @ZA07126
*                                RCT'S SUBTASKS'S.             @ZA07126
*                 - REGISTER 1                                 @ZA07126
*                     BIT    0   1 - RESET IS BEING REQUESTED. @ZA07126
*                     BYTES  1-3 ADDRESS OF RCT'S TCB.         @ZA07126
*                 - REGISTER 13                                @ZA07126
*                     X'00001000' INDICATES THE TCBNDTS BIT OF @ZA07126
*                                 THE TCBNDSP2 FLAG IS TO BE   @ZA07126
*                                 RESET.                       @ZA07126
*                 - ISSUE A CALL TO THE STATUS ROUTINE USING   @ZA07126
*                   ITS BRANCH ENTRY TO RESTART SUBTASKS.      @ZA07126
*                                                              @ZA07126
*      THIS IS DONE TO ASSURE THAT THE INITIATOR TASK IS       @ZA07126
*      DISPATCHABLE IN THE EVENT THAT RCT QUIESCE FOR SWAPOUT  @ZA07126
*      OF THE CURRENT ADDRESS SPACE IS HUNG BECAUSE OF AN I/O  @ZA07126
*      DEVICE FAILURE.                                         @ZA07126
*                                                              @ZA07126
***************************************************************@ZA07126
         LA    R0,CODE10      RESET DISPATCHABLE ALL SUBTASKS  @ZA07126
         L     R1,ASXBFTCB    GET RCT'S TCB ALL SUBTASKS ARE   @ZA07126
         O     R1,HIORDER     GOING TO BE RESET DISPATCHABLE   @ZA07126
         LH    R13,TCBNDTSB   TURN OFF TCBNDTS IN TCBNDSP2     @ZA07126
         L     R5,CVTPTR           GET CVT                     @ZA07126
         USING CVT,R5              USE IT                      @ZA07126
         L     R5,CVTABEND         GET SECONDARY CVT           @ZA07126
         USING SCVTSECT,R5         USE IT                      @ZA07126
         L     R15,SCVTSTAT   GET BRANCH ENTRY TO STATUS       @ZA07126
         BALR  R14,R15                                         @ZA07126
TESTTSO  L     R8,ASCBCSCB        GET CSCB                     @ZA07126
         USING CHAIN,R8           ADDRESS THE CSCB             @ZA07126
         CLI   CHTRKID,CHTSID     CHECK FOR A TSO MEMORY       @ZA07126
         BNE   RESTREGS           NO EXIT                      @ZA07126
         DROP  R8                                              @ZA07126
         EJECT
***********************************************************************
* THEN THE TSB IS CHECKED FOR EXISTENCE. (I.E. NON-ZERO ADDR   @Z40DQSS
* IN THE ASCB). IF IT DOES NOT EXIST THEN SKIP THE TEST FOR    @Z40DQSS
* VTAM TSB. IF THE TSB EXISTS THEN TEST TO SEE IF IT IS A VTAM @Z40DQSS
* TSB. IF THE TSB EXISTS THEN TEST TO SEE IF IT IS A VTAM TSB. @Z40DQSS
* IF IT IS, THEN SKIP THE QTIP ROUTINE AND ISSUE THE CANCEL    @Z40DQSS
* POST. IF IT IS NOT A VTAM TSB THEN THE LWA (LOGON WORK AREA) @Z40DQSS
* IS CHECKED FOR A NON-ZERO TCB ADDRESS FOR THE LOGON          @Z40DQSS
* SCHEDULER. IF THE POINTERS ARE NON-ZERO, A BRANCH ENTRY TO   @Z40DQSS
* TO STATUS IS SET UP TO SET NON-DISPATCHABLE THE LOGON        @Z40DQSS
* SCHEDULER AND ALL OF ITS SUBTASKS. IF THE POINTERS ARE ZERO  @Z40DQSS
* CONTROL GOES TO THE POST AND QTIP ROUTINES AND WILL BYPASS   @Z40DQSS
* THE STATUS RESET ROUTINE.                                    @Z40DQSS
*
***********************************************************************
         L     R7,ASCBTSB       GET TSB PTR FROM ASCB          @Z40DQSS
         LR    R8,R7            SAVE TSB ADDR FOR USE AFTER    @Z40DQSS
*                               THE POST ROUTINE               @Z40DQSS
         LTR   R7,R7            VERITY THAT TSB EXISTS         @Z40DQSS
         BZ    TESTLWA          IF NO TSB, SKIP VTAM TEST      @Z40DQSS
         USING TSB,R7           ESTABLISH TSB ADDRESSIBILITY   @Z40DQSS
         TM    TSBFLG5,TSBVTAM  THIS A VTAM TSB?               @Z40DQSS
         BO    POSTRTN          YES, ISSUE CANCEL POST         @Z40DQSS
TESTLWA  EQU   *
         L     R7,ASCBASXB        GET ADDR OF ASXB             @Z40DQSS
         USING ASXB,R7            GET ADDRESABILITY TO ASXB    @Z40DQSS
         L     R7,ASXBLWA         GET LWA PTR FROM ASXB
         LTR   R7,R7              VERIFY LWA CREATED IN MEMORY
         BZ    QTIPRTN            IF NO LWA, GO TO QTIP         YM01528
         USING LWA,R7             ESTABLISH LWA ADDRESSIBILITY
         EJECT
**********************************************************************
*
* THE FOLLOWING CODE SETS UP THE PARAMETERS IN REGISTERS
* FOR A BRANCH ENTRY TO THE STATUS FUNCTION.
*
**********************************************************************
         TM    LWAFLGS4,LWASICSP  BYPASS STATUS START,STOP?    @ZA08182
         BO    QTIPRTN            YES, ISSUE QTIP 24           @ZA08182
         L     R1,LWASTCB         GET PTR TO LOGON SCHEDULER TCB
         LA    R1,D0(R1)          CLEAR HI-ORDER BYTE FOR STATUS
         LTR   R1,R1              VERIFY ITS EXISTENCE.
         BZ    QTIPRTN            IF NO TCB, GO TO QTIP         YM01528
         LA    R13,NONDISP        SECONDARY MASK IN LO-ORDER BYTE
         SLL   R13,D8             POSITION MASK FOR STATUS TO   YM01821
*                                 OR IN TCBSCNDY WORD OF        YM01821
*                                 NONDISPATCHIBILITY BITS       YM01821
         LA    R0,CODE10          ENTRY CODE FOR STATUS PROCESSING
         L     R6,CVTPTR          GET PTR TO CVT
         USING CVT,R6             ESTABLISH CVT ADDRESSIBILITY
         L     R6,CVTABEND        GET PTR TO SECONDARY CVT
         USING SCVTSECT,R6        SECONDARY CVT ADDRESSIBILITY
         L     R15,SCVTSTAT       GET ENTRY POINT OF STATUS
         BALR  R14,R15            BRANCH ENTER STATUS
         EJECT
**********************************************************************
*
* THE FOLLOWING CODE SETS UP THE INTERFACE FOR QTIP CANCEL
* PROCESSING. QTIP WILL SET THE TSBCANC BIT IN THE TSB AND WILL
* REMOVE FROM OWAIT CONDITIONS ANY TASK WHICH HAS DONE A TPUT TO
* THE USER BEING CANCELLED.
*
**********************************************************************
QTIPRTN  EQU   *                                                YM01528
         LA    R0,CODE24          CANCEL ENTRY CODE
         SR    R5,R5              CLEAR REG 5 FOR QTIP
         LH    R5,SRBPASID        GIVE ASID OF USER CANCELLED
         L     R4,CVTPTR          CVT POINTER
         USING CVT,R4             ESTABLISH CVT ADDRESSIBILITY
         L     R4,CVTAQAVT        PTR TO TCAM CVT EXTENSION
         LTR   R4,R4              IS TCAM UP?                   YM01821
         BZ    POSTRTN            NO, BYPASS QTIP ENTRY         YM01821
         USING IEDQTCX,R4         ADDRESSIBILITY TO TCAM BLOCK
         L     R4,TCXRPT          PTR: TIOC REFERENCE PTR TABLE
         LTR   R4,R4              IS RPT INITIALIZED?           YM01821
         BZ    POSTRTN            NO, BYPASS QTIP ENTRY         YM01821
         USING TIOCRPT,R4         ADDRESSIBILITY TO TIOC BLOCK
         L     R15,TIOCQTIP       GET ENTRY POINT TO QTIP
         BALR  R14,R15            BRANCH ENTER QTIP
         EJECT
**********************************************************************
*
* THE FOLLOWING CODE SETS UP THE PARAMETERS FOR A BRANCH ENTRY TO
* POST. THE POST CODE ORIGINATES FROM SVC 34 CANCEL (IEE3703D)
* OR TIOC AND IS PASSED TO IKJEFLF WHO PASSES IT TO THIS ROUTINE.
* THE ASCB ALSO PASSED TO IKJEFLF FROM CANCEL AND TIOC. THE CSCB
* IS OBTAINED FROM THE ASCB: THE CANCEL ECB IS IN THE CSCB.
*
**********************************************************************
POSTRTN  EQU   *                                                YM01821
         L     R10,PARMPOST       POST CODE FROM IKJEFLF
         L     R4,PARMCSCB        CSCB PTR FROM IKJEFLF
         USING CHAIN,R4           ESTABLISH CSCB ADDRESSIBILITY
         LA    R11,CHCECB         ADDRESS CANCEL ECB FOR POST
         L     R5,CVTPTR          GET CVT POINTER
         USING CVT,R5             ESTABLISH CVT ADDRESSIBILITY
         L     R15,CVT0PT01       GET ENTRY POINT OF POST
         BALR  R14,R15            BRANCH ENTER POST
         EJECT
**********************************************************************
*
* THE FOLLOWING CODE ISSUES A BRANCH ENTRY FOR STATUS RESET FOR
* THE LOGON SCHEDULER. THIS WILL REMOVE THE NONDISPATCHIBILITY
* BIT SETTINGS IN THE LOGON SCHEDULER'S TCB.
* IF THE LOGON SCHEDULER TCB OR THE LWA EXIST OR THE USER IS A @Z40DQSS
* VTAM TSO USER, THEN CONTROL GOES TO EXIT ROUTINE, AND        @Z40DQSS
* BYPASSES THE NEXT STATUS ROUTINES.                           @Z40DQSS
*
**********************************************************************
         LTR   R8,R8              IS THERE A TSB?              @Z40DQSS
         BZ    CONTSTAT           NO, SKIP TEST FOR VTAM USER  @Z40DQSS
         USING TSB,R8             SET ADDRESSIBILITY TO TSB    @Z40DQSS
         TM    TSBFLG5,TSBVTAM    A VTAM TSB?                  @Z40DQSS
         BO    RESTREGS           YES, RETURN                  @Z40DQSS
         DROP  R8                                              @Z40DQSS
CONTSTAT EQU   *                                               @Z40DQSS
         LTR   R7,R7              IS THERE AN LWA?              YM01528
         BZ    RESTREGS           NO, GO TO RETURN              YM01528
         TM    LWAFLGS4,LWASICSP  BYPASS STATUS START          @ZA08182
         BO    RESTREGS           YES, RETURN                  @ZA08182
         L     R1,LWASTCB         IS THERE A LOGON SCHED TCB?   YM01528
         LA    R1,D0(R1)          CLEAR HI ORDER                YM01528
         LTR   R1,R1              DOES LWASTCB CONTAIN ZERO?    YM01528
         BZ    RESTREGS           NO, GO TO RETURN              YM01528
         LA    R0,CODE11          ENTRY CODE FOR STATUS RESET
         O     R1,HIORDER         SET HI-ORDER BIT FOR RESET
         LA    R13,NONDISP        LOAD NONDISPATCHIBILITY MASK
         SLL   R13,D8             POSITION MASK FOR STATUS      YM01821
         L     R15,SCVTSTAT       GET STATUS BRANCH ENTRY POINT
         BALR  R14,R15            BRANCH AND LINK TO STATUS
         EJECT
**********************************************************************
*
* THE FOLLOWING ROUTINE VALIDITY CHECKS TO SEE IF THE LOGON
* PROMPTER TCB IS PRESENT. IF IT IS, THE STATUS RESET WHICH
* WAS ISSUED FOR THE LOGON SCHEDULER IS ALSO ISSUED FOR THE
* LOGON PROMPTER. THAT IS THE PROMPTER WILL BE REMOVED FROM
* IWAIT AND OWAIT.
*
**********************************************************************
         L     R8,LWASTCB         GET LOGON SCHEDULER TCB       YM01528
         USING TCB,R8             SCHEDULER TCB ADDRESSIBILITY  YM01528
         L     R10,LWAPTID        GET LOGON PROMPTER TCB        YM01528
         LA    R10,D0(R10)        CLEAR HIGH ORDER BYTE         YM01528
         LTR   R10,R10            TEST IF PROMPTER PRESENT      YM01528
         BZ    RESTREGS           IF NOT, GO TO CLEAN-UP RTN    YM01528
         L     R5,TCBLTC          GET LAST DAUGHTER OF SCHEDULERYM01528
         LTR   R5,R5              WAS THERE A DAUGHTER?         YM01528
         BZ    RESTREGS           IF NOT, GO TO CLEAN-UP RTN    YM01528
         LA    R5,D0(R5)          CLEAR HIGH ORDER BYTE         YM01528
         CR    R5,R10             VERIFY DAUGHTER OF SCHEDULER  YM01528
*                                 IS LOGON PROMPTER, AND/OR     YM01528
*                                 IS NOT YET DETACHED           YM01528
         BNE   RESTREGS           IF NOT, GO TO CLEANUP RTN
         LA    R0,CODE11          STATUS ENTRY CODE
         LR    R1,R5              PROMPTER TCB ADDRESS          YM01528
         O     R1,HIORDER         SET HI-ORDER BIT FOR RESET
         LA    R13,NONDISP        NONDISPATCHIBILITY MASK
         SLL   R13,D8             POSITION MASK FOR STATUS      YM01821
         L     R15,SCVTSTAT       GET STATUS BRANCH ENTRY POINT
         BALR  R14,R15            BALR TO STATUS
         EJECT
**********************************************************************
*
* THE FOLLOWING ROUTINE FREEMAINS THE SRB AND THE PARMAREA TO THE
* SRB ROUTINE, AND RELEASES THE LOCAL AND THE CMS LOCKS.
*
**********************************************************************
RESTREGS EQU   *
         SR    R4,R4              CLEAR REG4 FOR FREEMAIN
         L     R7,SRBASCB         ASCB PTR IN R7 FOR FREEMAIN
         L     R8,PARMR14         GET RETURN POINT FROM PARMAREA
         LA    R1,SRB             GET ADDR SRB PLUS PARMAREA
*                                 GET LENGTH SRB PLUS PARMAREA
         LA    R0,SRBSIZE+PARMSIZE
         DROP  R2
         FREEMAIN RC,LV=(0),A=(1),SP=239,BRANCH=YES
CLRLOCK  EQU   *
         SETLOCK RELEASE,TYPE=CMS,RELATED=(QTIP,IKJL4T00(GETLOCK))
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=(CANTSO,IKJL4T00(GETLOCK))
         EJECT
**********************************************************************
*
* THE FOLLOWING ROUTINE DELETES THE FRR ENVIRONMENT ESTABLISHED
* AT ENTRY TO THIS SRB ROUTINE AND RETURNS TO THE CALLER.
*
**********************************************************************
         SETFRR D,WRKREGS=(4,12)
         LR    R14,R8             RESTORE RETURN ADDRESS
RETEXIT  EQU   *
         BR    R14                RETURN TO SRB DISPATCHER
         EJECT
***********************************************************************
*
* THE FOLLOWING ROUTINE IS THE RMTR ROUTINE. THIS IS REQUIRED OF
* EVERY SRB ROUTINE. IT IS GIVEN CONTROL BY PURGEDEQ DURING MEMORY
* TERMINATION. IT IS PROVIDED IN CASE THE MEMORY TERMINATES BEFORE
* THE SRB IS DISPATCHED. PURPOSE IS TO FREEMAIN THE SRB AND RETURN
* TO PURGEDEQ. INPUT IS  A POINTER TO THE DEQ'D SRB IN R1 CONTENTS
* OF SRBPARM IN R2, RETURN ADDRESS TO PURGEDEQ IN R14.
*
***********************************************************************
IKJL4T01 EQU   *                  RMTR ROUTINE
         BALR  R9,D0              SET BASE REG TO CURRENT ADDRESS
ENRMTR   EQU   *
         LA    R6,ENRMTR-ENTRYSRB SUBTRACT OFFSET INTO PROGRAM
         SR    R9,R6              RESET BASEREG TO BEGINNING
         LTR   R1,R1              IS SRB POINTER PASSED?
         BZ    RMTREXIT           IF ZERO RETURN
         USING SRBSECT,R1         SET SRB ADDRESSIBILITY
*                                 GET LENGTH SRB PLUS PARMAREA
         LA    R0,SRBSIZE+PARMSIZE
         USING PSA,R0              PSA ADDRESSABILITY          @ZA06994
         L     R7,PSAAOLD          ASCB TO REG                 @ZA06994
         DROP  R0                                              @ZA06994
         SR    R4,R4              CLEAR REG4 FOR FREEMAIN
         LR    R2,R14             SAVE RETURN ADDRESS
LOCKON   EQU   *
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        *
               RELATED=(CANTSO,IKJL4T00(LOCKOFF))              @ZA06994
         FREEMAIN RC,LV=(0),A=(1),SP=239,BRANCH=YES
LOCKOFF  EQU   *
         SETLOCK RELEASE,TYPE=LOCAL,                                   *
               RELATED=(CANTSO,IKJL4T00(LOCKON))               @ZA06994
         LR    R14,R2             RESTORE RETURN ADDRESS
RMTREXIT EQU   *
         BR    R14                RETURN TO PURGEDEQ
         EJECT
***********************************************************************
* THE FUNCTION OF THE FOLLOWING FRR ROUTINE IS TO FREEMAIN
* THE SRB AND RETURN TO SRM. INPUT IS A POINTER TO THE
* SDWA IN REGISTER 1. ALSO FREED IS THE SRB PARMAREA.
* THESE TWO AREAS ARE CONTIGUOUS. THE GETMAIN FOR THEM IS
* DONE IN IKJEFLF.
***********************************************************************
IKJL4T02 EQU   *
         BALR  R9,D0              SET BASEREG TO CURRENT ADDRESS
ENFRR    EQU   *
         LA    R6,ENFRR-ENTRYSRB  GET OFFSET TO BEGINNING
         SR    R9,R6              RESET BASEREG TO BEGINNING
         LTR   R1,R1              IS SDWA SUPPLIED?
         BZ    FRREXIT            IF NOT, RETURN
         LR    R2,R14             SAVE RETURN ADDRESS
         USING SDWA,R1            SET ADDRESSIBILITY TO SDWA
         L     R5,SDWAPARM        GET PTR TO PARMAREA
         USING FRRPARM,R5         SET ADDRESSIBILITY TO PARMAREA
         L     R1,FRRSRB          GET PTR TO SRB BLOCK
*                                 SIZE TO FREEMAIN
         LA    R0,SRBSIZE+PARMSIZE
         L     R7,FRRASCB         ASCB PTR IN R7 FOR FREEMAIN
         SR    R4,R4              CLEAR REG4 FOR FREEMAIN
         FREEMAIN RC,LV=(0),A=(1),SP=239,BRANCH=YES
         LR    R14,R2             RESTORE RETURN ADDRESS
FRREXIT  EQU   *
         BR    R14                RETURN TO SYSTEM RECOVERY MGR
         EJECT
         DS    0D
HIORDER  DC    X'80000000'        USED TO TURN ON HI-ORDER BIT
TCBNDTSB DC    AL2(4096)      INDICATE TCBNDTS IN TCBNDSP2     @ZA07126
PTCHL4T0 DC    CL50' * * * IKJL4T00 * * *'
         END
