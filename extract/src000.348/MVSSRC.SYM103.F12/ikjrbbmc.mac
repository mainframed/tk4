         TITLE 'IKJRBBMC,  DATASET I/O ROUTINE                         *
                        '
IKJRBBMC CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKJRBBMC  78.173'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
         MVC   @PC00001(16),0(@01)                                 0001
*                                                                  0022
*   /*****************************************************************/
*   /*                                                               */
*   /* START EXECUTABLE CODE                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0022
*   SWS=''B;                        /* CLEAR ALL SWITCHES            */
         MVI   SWS,X'00'                                           0022
*   FIRST=YES;                      /* SET FIRST SWITCH              */
         OI    FIRST,B'01000000'                                   0023
*   CALL FINDDCB;                   /* FIND APPROPRIATE DCB          */
         BAL   @14,FINDDCB                                         0024
*   IF ERROR=NO THEN                /* IF OK SO FAR                  */
         TM    ERROR,B'10000000'                                   0025
         BNZ   @RF00025                                            0025
*     IF FUNC=0 THEN                /* IF GET FUNCTION THEN CALL     */
         L     @10,@PC00001+12                                     0026
         L     @10,FUNC(,@10)                                      0026
         LTR   @10,@10                                             0026
         BNZ   @RF00026                                            0026
*       CALL GETRTN;                /* GET ROUTINE                   */
         BAL   @14,GETRTN                                          0027
*     ELSE                          /* OTHERWISE CALL PUTRTN         */
*       CALL PUTRTN;                /*                               */
         B     @RC00026                                            0028
@RF00026 BAL   @14,PUTRTN                                          0028
*   ELSE                            /* OTHERWISE                     */
*     DO;                           /*                               */
         B     @RC00025                                            0029
@RF00025 DS    0H                                                  0030
*       CALL IKJEFT30(0,ECTX,0,STCKL);/* DELETE TOP ELEMENT RELIES ON
*                                      T30 NOT CHECKING UPT OR ECB   */
         MVC   @AL00001(16),@AL00030                               0030
         L     @10,@PC00001+8                                      0030
         ST    @10,@AL00001+4                                      0030
         L     @15,@CV00517                                        0030
         LA    @01,@AL00001                                        0030
         BALR  @14,@15                                             0030
*       RETCODE=4;                  /* FAKE END OF FILE RETURN CODE  */
         LA    RETCODE,4                                           0031
*     END;                                                         0032
*   RETURN CODE(RETCODE);           /* RETURN TO CALLER              */
@RC00025 L     @13,4(,@13)                                         0033
         L     @00,@SIZDATD                                        0033
         LR    @01,@11                                             0033
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@08                                             0033
         L     @14,12(,@13)                                        0033
         LM    @00,@12,20(@13)                                     0033
         BR    @14                                                 0033
*                                                                  0034
*   /*****************************************************************/
*   /*                                                               */
*   /* FINDDCB: THIS ROUTINE IS USED TO FIND THE DCB THAT WILL BE    */
*   /* USED FOR THIS ENTRY TO IKJRBBMC. THIS ROUTINE ASSUMES THAT IF */
*   /* A DCBPRESENT BIT IS ON IN THE TOP ELEMENT IF THE STACK, THAT A*/
*   /* DCB IS PRESENT THERE OR ON THE BOTTOM OF THE STACK. THE FINDCB*/
*   /* ROUTINE SETS OPENADR WHICK IS THE BASE FOR THE DCBD           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0034
*FINDDCB:                                                          0034
*   PROC OPTIONS(NOSAVE(OPENADR));                                 0034
@EL00001 L     @13,4(,@13)                                         0034
@EF00001 L     @00,@SIZDATD                                        0034
         LR    @01,@11                                             0034
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0034
         BR    @14                                                 0034
FINDDCB  STM   @14,@01,12(@13)                                     0034
         STM   @03,@06,32(@13)                                     0034
         STM   @08,@12,52(@13)                                     0034
*   IODSDPTR=INSADLSD;              /* POINT TO CURRENT IODSD        */
         L     @10,@PC00001+8                                      0035
         L     @10,IOSRLPTR(,@10)                                  0035
         L     @10,IOSTELM(,@10)                                   0035
         L     IODSDPTR,INSADLSD-1(,@10)                           0035
         LA    IODSDPTR,0(,IODSDPTR)                               0035
*   IF FUNC=0 THEN                  /* IF FUNCTION IS GET, GET THE   */
         SLR   @06,@06                                             0036
         L     @03,@PC00001+12                                     0036
         C     @06,FUNC(,@03)                                      0036
         BNE   @RF00036                                            0036
*     DO;                           /* INPUT DCB                     */
*       IF IODSDPTR=0×INSDATA=NO×   /* IF TMPS IODSD                 */
*           DSDOPTS(3)=NO THEN      /* IF ORIGINAL INDCB THEN USE    */
         CR    IODSDPTR,@06                                        0038
         BE    @RT00038                                            0038
         TM    INSDATA(@10),B'10000000'                            0038
         BZ    @RT00038                                            0038
         TM    DSDOPTS(IODSDPTR),B'00100000'                       0038
         BNZ   @RF00038                                            0038
@RT00038 DS    0H                                                  0039
*         DO;                       /* ELEMENT HAS THE DCB           */
*           RFY                                                    0040
*             INSTACK BASED(IOSBELM);/* SET BASE TO BOTTOM           */
*           IODSDPTR=INSADLSD;      /* BOTTOM ELEMENTS IODSD         */
         L     @10,@PC00001+8                                      0041
         L     @10,IOSRLPTR(,@10)                                  0041
         L     @10,IOSBELM(,@10)                                   0041
         L     IODSDPTR,INSADLSD-1(,@10)                           0041
         LA    IODSDPTR,0(,IODSDPTR)                               0041
*           RFY                                                    0042
*             INSTACK BASED(IOSTELM);/* RESET BASE FOR STACK         */
*         END;                                                     0043
*       IF DSDQSAM=YES THEN         /* IF USING QSAM DCB             */
@RF00038 TM    DSDQSAM(IODSDPTR),B'00100000'                       0044
         BNO   @RF00044                                            0044
*         OPENADR=ADDR(INDCB);      /* USE QSAM DCB                  */
         LA    OPENADR,16                                          0045
         ALR   OPENADR,IODSDPTR                                    0045
*       ELSE                        /* OTHERWISE                     */
*         OPENADR=ADDR(BPAMDCB);    /* USE BPAM DCB                  */
         B     @RC00044                                            0046
@RF00044 L     OPENADR,DSDBPAM(,IODSDPTR)                          0046
         LA    OPENADR,BPAMDCB(,OPENADR)                           0046
*     END;                          /*                               */
*   ELSE                            /* IF NOT GET FUNCTION, ASSUME   */
*     DO;                           /* PUT FUNCTION                  */
         B     @RC00036                                            0048
@RF00036 DS    0H                                                  0049
*       IF IODSDPTR=0×INSDATA=NO×   /* IF TMPS IODSD                 */
*           DSDOPTS(4)=NO THEN      /*                               */
         LTR   IODSDPTR,IODSDPTR                                   0049
         BZ    @RT00049                                            0049
         L     @10,@PC00001+8                                      0049
         L     @10,IOSRLPTR(,@10)                                  0049
         L     @10,IOSTELM(,@10)                                   0049
         TM    INSDATA(@10),B'10000000'                            0049
         BZ    @RT00049                                            0049
         TM    DSDOPTS(IODSDPTR),B'00010000'                       0049
         BNZ   @RF00049                                            0049
@RT00049 DS    0H                                                  0050
*         DO;                       /* ELEMENT HAS THE DCB           */
*           RFY                                                    0051
*             INSTACK BASED(IOSBELM);/* SET BASE TO BOTTOM           */
*           IODSDPTR=INSADLSD;      /* SET IODSD ADDR                */
         L     @10,@PC00001+8                                      0052
         L     @10,IOSRLPTR(,@10)                                  0052
         L     @10,IOSBELM(,@10)                                   0052
         L     IODSDPTR,INSADLSD-1(,@10)                           0052
         LA    IODSDPTR,0(,IODSDPTR)                               0052
*           RFY                                                    0053
*             INSTACK BASED(IOSTELM);/* RESET BASED FOR STACK        */
*         END;                      /*                               */
*       OPENADR=ADDR(OTDCB);        /* ADDR OF OUTPUT DCB            */
@RF00049 L     @10,@CA00148                                        0055
         LR    OPENADR,IODSDPTR                                    0055
         AL    OPENADR,INLEN-INLEN(,@10)                           0055
         AL    OPENADR,@CF00198                                    0055
*     END;                          /*                               */
*   IF DCBOFOPN=NO THEN             /* IF DCB IS NOT OPEN            */
@RC00036 TM    DCBOFOPN+40(OPENADR),B'00010000'                    0057
         BNZ   @RF00057                                            0057
*     ERROR=YES;                    /* NO DICE - DON''T ALLOW        */
         OI    ERROR,B'10000000'                                   0058
*   END FINDDCB;                    /*                               */
@EL00002 DS    0H                                                  0059
@EF00002 DS    0H                                                  0059
@ER00002 LM    @14,@01,12(@13)                                     0059
         LM    @03,@06,32(@13)                                     0059
         LM    @08,@12,52(@13)                                     0059
         BR    @14                                                 0059
*                                                                  0060
*   /*****************************************************************/
*   /*                                                               */
*   /* GETRTN: THE GETRTN GETS THE INPUT LINE FROM THE DATASET AND   */
*   /* SCANS BACK TO FIRST NONBLANK. RECFM VXX RECORDS ARE SCANNED   */
*   /* EVEN THOUGH THERE ARE NO TRAILING BLANKS IN MOST CASES TO     */
*   /* PROVIDE FIX FOR APAR OZ10464                          @ZA10464*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0060
*GETRTN:                                                           0060
*   PROC;                           /* GETALINE ROUTINE              */
GETRTN   STM   @14,@07,@SA00003                                    0060
         STM   @09,@12,@SA00003+40                                 0060
*   RETCODE=4;                      /* SET RETCODE TO EOF            */
         LA    RETCODE,4                                           0061
*   DCBEODA=ADDR(EOF);              /* SET EOF RETURN POINT          */
         LA    @10,EOF                                             0062
         STCM  @10,7,DCBEODA+28(OPENADR)                           0062
*   RFY                                                            0063
*    (R1) RSTD;                     /* RESTRICT REG 1                */
*   IF DSDQSAM=YES THEN             /* IF MEMBER PROCESSING NOT USED */
         TM    DSDQSAM(IODSDPTR),B'00100000'                       0064
         BNO   @RF00064                                            0064
*     GEN REFS(OPENADR) FLOWS(EOF)(GET  (OPENADR));/* GET A LINE     */
         GET  (OPENADR)
*   ELSE                            /* IF NOT USING QSAM, GET REC    */
*     DO;                           /* FROM BPAM BUFFER              */
         B     @RC00064                                            0066
@RF00064 DS    0H                                                  0067
*       IF DSDFRST=YES THEN         /* IF FIRST CHECK NOT DONE       */
         TM    DSDFRST(IODSDPTR),B'00010000'                       0067
         BNO   @RF00067                                            0067
*         DO;                       /* CHECK FIRST READ              */
*           DSDFRST=NO;             /* RESET FIRST CHECK SWITCH      */
         NI    DSDFRST(IODSDPTR),B'11101111'                       0069
*           RFY                                                    0070
*            (R4) RSTD;             /* RESTRICT REG                  */
*           R4=ADDR(CURDECB(1));    /* POINT TO FIRST DECB           */
         L     R4,DSDBPAM(,IODSDPTR)                               0071
         LA    R4,CURDECB(,R4)                                     0071
*           GEN REFS(R4) FLOWS(EOF)(CHECK (R4));/* CHECK FIRST READ  */
         CHECK (R4)
*           NEXTREC=CURBLK(1);      /* POINT TO FIRST BLOCK          */
         L     @10,DSDBPAM(,IODSDPTR)                              0073
         L     @09,CURBLK(,@10)                                    0073
         ST    @09,NEXTREC(,@10)                                   0073
*           DECBINDX=1;             /* POINT TO FIRST DECB           */
         MVC   DECBINDX(2,@10),@CH00036                            0074
*           IF DCBRECL=V THEN       /* FOR VARIABLE LENGTH   @ZA03285*/
         TM    DCBRECL+28(OPENADR),B'01000000'                     0075
         BNO   @RF00075                                            0075
         TM    DCBRECL+28(OPENADR),B'10000000'                     0075
         BNZ   @RF00075                                            0075
*             DO;                   /* RECORDS               @ZA03285*/
*               EOBLK=NEXTREC+NEXTREC->LL;/* CALC END OF BUFR@ZA03285*/
         ICM   @06,12,LL(@09)                                      0077
         SRA   @06,16                                              0077
         ALR   @06,@09                                             0077
         ST    @06,EOBLK(,@10)                                     0077
*               NEXTREC=NEXTREC+4;  /* BYPASS BLOCK LENGTH   @ZA03285*/
         AL    @09,@CF00117                                        0078
         ST    @09,NEXTREC(,@10)                                   0078
*             END;                  /*                       @ZA03285*/
*           ELSE                    /* FOR FIXED LENGTH RECS @ZA03285*/
*             EOBLK=NEXTREC-RESIDCNT+DCBBLKSI;/* CALC EOB    @ZA03285*/
         B     @RC00075                                            0080
@RF00075 L     @10,DSDBPAM(,IODSDPTR)                              0080
         LH    @09,DECBINDX(,@10)                                  0080
         MH    @09,@CH00133                                        0080
         ALR   @09,@10                                             0080
         ICM   @06,15,IOBPTR-20(@09)                               0080
         L     @09,NEXTREC(,@10)                                   0080
         SH    @09,RESIDCNT(,@06)                                  0080
         AH    @09,DCBBLKSI+52(,OPENADR)                           0080
         ST    @09,EOBLK(,@10)                                     0080
*         END;                                                     0081
@RC00075 DS    0H                                                  0082
*       IF NEXTREC>=EOBLK THEN      /* IF AT END OF BLOCK            */
@RF00067 L     @10,DSDBPAM(,IODSDPTR)                              0082
         CLC   NEXTREC(4,@10),EOBLK(@10)                           0082
         BL    @RF00082                                            0082
*         DO;                       /*                               */
*           RFY                                                    0084
*            (R4,                                                  0084
*             R5) RSTD;             /* RESTRICT REG 5                */
*           R5=CURBLK(DECBINDX);    /* SAVE USED BUFFER ADDR         */
         LH    @09,DECBINDX(,@10)                                  0085
         LR    @06,@09                                             0085
         SLA   @06,2                                               0085
         L     R5,CURBLK-4(@06,@10)                                0085
*           R4=ADDR(CURDECB(DECBINDX));/* GET USED DECB              */
         MH    @09,@CH00133                                        0086
         LA    R4,CURDECB-20(@09,@10)                              0086
*           GEN REFS(OPENADR,R4,R5)(READ (R4),SF,(OPENADR),(R5),MF=E);
         READ (R4),SF,(OPENADR),(R5),MF=E
*           IF DECBINDX=DECBMAX THEN/* IF ALL USED, GO BACK TO       */
         L     @10,DSDBPAM(,IODSDPTR)                              0088
         CLC   DECBINDX(2,@10),DECBMAX(@10)                        0088
         BNE   @RF00088                                            0088
*             DECBINDX=1;           /* FIRST DECB                    */
         MVC   DECBINDX(2,@10),@CH00036                            0089
*           ELSE                    /* OTHERWISE                     */
*             DECBINDX=DECBINDX+1;  /* GO TO NEXT DECB               */
         B     @RC00088                                            0090
@RF00088 L     @10,DSDBPAM(,IODSDPTR)                              0090
         LA    @09,1                                               0090
         AH    @09,DECBINDX(,@10)                                  0090
         STH   @09,DECBINDX(,@10)                                  0090
*           R4=ADDR(CURDECB(DECBINDX));/* GET NEW CURRENT DECB       */
@RC00088 L     @10,DSDBPAM(,IODSDPTR)                              0091
         LH    @09,DECBINDX(,@10)                                  0091
         MH    @09,@CH00133                                        0091
         LA    R4,CURDECB-20(@09,@10)                              0091
*           GEN REFS(R4) FLOWS(EOF)(CHECK (R4));/* CHECK READ        */
         CHECK (R4)
*           RFY                                                    0093
*            (R4,                                                  0093
*             R5) UNRSTD;           /* RELEASE REGS                  */
*           NEXTREC=CURBLK(DECBINDX);/* SET FIRST REC                */
         L     @10,DSDBPAM(,IODSDPTR)                              0094
         LH    @06,DECBINDX(,@10)                                  0094
         SLA   @06,2                                               0094
         L     @06,CURBLK-4(@06,@10)                               0094
         ST    @06,NEXTREC(,@10)                                   0094
*           IF DCBRECL=V THEN       /* FOR VARIABLE LENGTH   @ZA03285*/
         TM    DCBRECL+28(OPENADR),B'01000000'                     0095
         BNO   @RF00095                                            0095
         TM    DCBRECL+28(OPENADR),B'10000000'                     0095
         BNZ   @RF00095                                            0095
*             DO;                   /* RECORDS               @ZA03285*/
*               EOBLK=NEXTREC+NEXTREC->LL;/* CALC END OF BUFR@ZA03285*/
         ICM   @03,12,LL(@06)                                      0097
         SRA   @03,16                                              0097
         ALR   @03,@06                                             0097
         ST    @03,EOBLK(,@10)                                     0097
*               NEXTREC=NEXTREC+4;  /* BYPASS BLOCK LENGTH   @ZA03285*/
         AL    @06,@CF00117                                        0098
         ST    @06,NEXTREC(,@10)                                   0098
*             END;                  /*                       @ZA03285*/
*           ELSE                    /* FOR FIXED LENGTH RECS @ZA03285*/
*             EOBLK=NEXTREC-RESIDCNT+DCBBLKSI;/* CALC EOB    @ZA03285*/
         B     @RC00095                                            0100
@RF00095 L     @10,DSDBPAM(,IODSDPTR)                              0100
         LH    @06,DECBINDX(,@10)                                  0100
         MH    @06,@CH00133                                        0100
         ALR   @06,@10                                             0100
         ICM   @03,15,IOBPTR-20(@06)                               0100
         L     @06,NEXTREC(,@10)                                   0100
         SH    @06,RESIDCNT(,@03)                                  0100
         AH    @06,DCBBLKSI+52(,OPENADR)                           0100
         ST    @06,EOBLK(,@10)                                     0100
*         END;                                                     0101
@RC00095 DS    0H                                                  0102
*       R1=NEXTREC;                                                0102
@RF00082 L     @10,DSDBPAM(,IODSDPTR)                              0102
         L     @06,NEXTREC(,@10)                                   0102
         LR    R1,@06                                              0102
*       IF DCBRECL=V THEN           /* FOR VARIABLE RECORDS          */
         TM    DCBRECL+28(OPENADR),B'01000000'                     0103
         BNO   @RF00103                                            0103
         TM    DCBRECL+28(OPENADR),B'10000000'                     0103
         BNZ   @RF00103                                            0103
*         DO;                       /*                               */
*           NEXTREC=NEXTREC+R1->LL; /*                               */
         ICM   @03,12,LL(R1)                                       0105
         SRA   @03,16                                              0105
         ALR   @06,@03                                             0105
         ST    @06,NEXTREC(,@10)                                   0105
*           DCBLRECL=R1->LL;        /* SET DCBLRECL FOR RECORD       */
         STH   @03,DCBLRECL+72(,OPENADR)                           0106
*         END;                      /*                               */
*       ELSE                        /* FOR OTHER                     */
*         NEXTREC=NEXTREC+DCBLRECL; /*                               */
         B     @RC00103                                            0108
@RF00103 L     @10,DSDBPAM(,IODSDPTR)                              0108
         LH    @06,DCBLRECL+72(,OPENADR)                           0108
         AL    @06,NEXTREC(,@10)                                   0108
         ST    @06,NEXTREC(,@10)                                   0108
*     END;                                                         0109
@RC00103 DS    0H                                                  0110
*   RETCODE=0;                      /* SET NORMAL RETCODE            */
@RC00064 SLR   RETCODE,RETCODE                                     0110
*   PTRA=R1;                        /* SET BASE OF I/O BFRS          */
         LR    PTRA,R1                                             0111
*   RFY                                                            0112
*    (R1) UNRSTD;                   /* RELEASE REGISTER ONE          */
*   IF DCBRECL=V THEN               /* IF RECFM=F X X                */
         LA    @10,28                                              0113
         ALR   @10,OPENADR                                         0113
         TM    DCBRECL(@10),B'01000000'                            0113
         BNO   @RF00113                                            0113
         TM    DCBRECL(@10),B'10000000'                            0113
         BNZ   @RF00113                                            0113
*     DO;                           /* LOGICALLY REMOVE SEQ NO       */
*       IF DCBRECCC=A&DSDCNTL=NO THEN/* ALSO BYPASS C/C CHAR         */
         TM    DCBRECCC(@10),B'00000100'                           0115
         BNO   @RF00115                                            0115
         TM    DCBRECCC(@10),B'00000010'                           0115
         BNZ   @RF00115                                            0115
         TM    DSDCNTL(IODSDPTR),B'01000000'                       0115
         BNZ   @RF00115                                            0115
*         MOVED=9;                  /* BYPASS C/C AND SEQ NO         */
         LA    MOVED,9                                             0116
*       ELSE                        /* ONLY BYPASS SEQ NO            */
*         MOVED=8;                  /*                               */
         B     @RC00115                                            0117
@RF00115 LA    MOVED,8                                             0117
*       IF DCBLRECL-MOVED<=4×       /* IF A RECORD THAT IS LESS THAN */
*           DSDSEQ=YES THEN         /* 8 DATA CHARS OR SEQ NUMBERS   */
@RC00115 LH    @10,DCBLRECL+72(,OPENADR)                           0118
         SLR   @10,MOVED                                           0118
         C     @10,@CF00117                                        0118
         BNH   @RT00118                                            0118
         TM    DSDSEQ(IODSDPTR),B'10000000'                        0118
         BNO   @RF00118                                            0118
@RT00118 DS    0H                                                  0119
*         MOVED=MOVED-8;            /* REQUIRED,DONT STRIP SEQ     0119
*                                      NUMBERS                       */
         SL    MOVED,@CF00063                                      0119
*       LEN=MAX(0,((MIN(DSDMINBF,DCBLRECL))-(MOVED+4)));/* LEN FOR   */
@RF00118 L     @10,@PC00001+4                                      0120
         LH    @09,DSDMINBF(,IODSDPTR)                             0120
         LH    @06,DCBLRECL+72(,OPENADR)                           0120
         CR    @09,@06                                             0120
         BNH   *+6
         LR    @09,@06                                             0120
         LA    @06,4                                               0120
         ALR   @06,MOVED                                           0120
         SLR   @09,@06                                             0120
         SLR   @06,@06                                             0120
         CR    @09,@06                                             0120
         BNL   *+6
         LR    @09,@06                                             0120
         ST    @09,LEN(,@10)                                       0120
*       DO LEN=LEN TO 1 BY-1 WHILE BFRVA(LEN)=' ';/* SCAN    @ZA10464*/
         B     @DE00121                                            0121
@DL00121 L     @10,@PC00001+4                                      0121
         L     @10,LEN(,@10)                                       0121
         LR    @09,PTRA                                            0121
         ALR   @09,MOVED                                           0121
         ALR   @09,@10                                             0121
         CLI   BFRVA-1(@09),C' '                                   0121
         BNE   @DC00121                                            0121
*       END;                        /* OFF TRAILING BLANKS   @ZA10464*/
         L     @10,@PC00001+4                                      0122
         SLR   @09,@09                                             0122
         BCTR  @09,0                                               0122
         AL    @09,LEN(,@10)                                       0122
         L     @10,@PC00001+4                                      0122
         ST    @09,LEN(,@10)                                       0122
@DE00121 LTR   @09,@09                                             0122
         BP    @DL00121                                            0122
@DC00121 DS    0H                                                  0123
*       CALL MOVE(BFRVA,OUTBUF,LEN,LEN);/* COPY BUFFER               */
         LR    @10,PTRA                                            0123
         ALR   @10,MOVED                                           0123
         LA    @10,BFRVA(,@10)                                     0123
         ST    @10,@AL00001                                        0123
         L     @10,@PC00001                                        0123
         BCTR  @10,0                                               0123
         L     @10,BFRA(,@10)                                      0123
         LA    @10,0(,@10)                                         0123
         ST    @10,@AL00001+4                                      0123
         L     @10,@PC00001+4                                      0123
         ST    @10,@AL00001+8                                      0123
         ST    @10,@AL00001+12                                     0123
         LA    @01,@AL00001                                        0123
         BAL   @14,MOVE                                            0123
*     END;                          /* END RECFM=V X X PROCESS       */
*   ELSE                            /* IF RECFM=F OR RECFM= U        */
*     DO;                           /* REMOVE SEQ NO FROM RIGHT      */
         B     @RC00113                                            0125
@RF00113 DS    0H                                                  0126
*       IF DCBRECL=F&DCBLRECL>8&DSDSEQ=NO THEN/* FIXED OF SUFFIC-    */
         TM    DCBRECL+28(OPENADR),B'10000000'                     0126
         BNO   @RF00126                                            0126
         TM    DCBRECL+28(OPENADR),B'01000000'                     0126
         BNZ   @RF00126                                            0126
         LA    @10,8                                               0126
         LH    @09,DCBLRECL+72(,OPENADR)                           0126
         CR    @09,@10                                             0126
         BNH   @RF00126                                            0126
         TM    DSDSEQ(IODSDPTR),B'10000000'                        0126
         BNZ   @RF00126                                            0126
*         LEN=DCBLRECL-8;           /* IENT LENGTH, STRIP SEQ NUMBERS*/
         L     @06,@PC00001+4                                      0127
         SLR   @09,@10                                             0127
         ST    @09,LEN(,@06)                                       0127
*       ELSE                        /* FOR ALL OTHERS, DO NO         */
*         LEN=DCBLRECL;             /* SET RECORD LENGTH             */
         B     @RC00126                                            0128
@RF00126 L     @10,@PC00001+4                                      0128
         LH    @09,DCBLRECL+72(,OPENADR)                           0128
         ST    @09,LEN(,@10)                                       0128
*       IF DCBRECCC=A&DSDCNTL=NO THEN/* IF CARRIAGE CNTL TO BE     0129
*                                      STRIPPED                      */
@RC00126 TM    DCBRECCC+28(OPENADR),B'00000100'                    0129
         BNO   @RF00129                                            0129
         TM    DCBRECCC+28(OPENADR),B'00000010'                    0129
         BNZ   @RF00129                                            0129
         TM    DSDCNTL(IODSDPTR),B'01000000'                       0129
         BNZ   @RF00129                                            0129
*         DO;                       /* SET MOVED                     */
*           LEN=LEN-1;              /* DECREMENT LEN RETURNED        */
         L     @10,@PC00001+4                                      0131
         L     @09,LEN(,@10)                                       0131
         BCTR  @09,0                                               0131
         ST    @09,LEN(,@10)                                       0131
*           MOVED=1;                /* UP BFRA BASE BY 1             */
         LA    MOVED,1                                             0132
*         END;                      /*                               */
*       ELSE                        /* OTHERWISE SET MOVED           */
*         MOVED=0;                  /* TO ZERO                       */
         B     @RC00129                                            0134
@RF00129 SLR   MOVED,MOVED                                         0134
*       DO LEN=LEN TO 1 BY-1 WHILE BFRFA(LEN)=' ';/* SCAN            */
@RC00129 L     @10,@PC00001+4                                      0135
         L     @10,LEN(,@10)                                       0135
         B     @DE00135                                            0135
@DL00135 L     @10,@PC00001+4                                      0135
         L     @10,LEN(,@10)                                       0135
         LR    @09,PTRA                                            0135
         ALR   @09,MOVED                                           0135
         ALR   @09,@10                                             0135
         BCTR  @09,0                                               0135
         CLI   BFRFA(@09),C' '                                     0135
         BNE   @DC00135                                            0135
*       END;                        /* BACK TO LAST NONBLANK         */
         L     @09,@PC00001+4                                      0136
         SLR   @10,@10                                             0136
         BCTR  @10,0                                               0136
         AL    @10,LEN(,@09)                                       0136
         L     @09,@PC00001+4                                      0136
         ST    @10,LEN(,@09)                                       0136
@DE00135 LTR   @10,@10                                             0136
         BP    @DL00135                                            0136
@DC00135 DS    0H                                                  0137
*       CALL MOVE(BFRFA,OUTBUF,LEN,LEN);/* MOVE BFR                  */
         LR    @10,PTRA                                            0137
         ALR   @10,MOVED                                           0137
         ST    @10,@AL00001                                        0137
         L     @10,@PC00001                                        0137
         BCTR  @10,0                                               0137
         L     @10,BFRA(,@10)                                      0137
         LA    @10,0(,@10)                                         0137
         ST    @10,@AL00001+4                                      0137
         L     @10,@PC00001+4                                      0137
         ST    @10,@AL00001+8                                      0137
         ST    @10,@AL00001+12                                     0137
         LA    @01,@AL00001                                        0137
         BAL   @14,MOVE                                            0137
*     END;                                                         0138
*EOF:                                                              0139
*   END GETRTN;                                                    0139
@EL00003 DS    0H                                                  0139
@EF00003 DS    0H                                                  0139
@ER00003 LM    @14,@07,@SA00003                                    0139
         LM    @09,@12,@SA00003+40                                 0139
         BR    @14                                                 0139
*                                                                  0140
*   /*****************************************************************/
*   /*                                                               */
*   /* PUTRTN: THE PUTRTN IS USED TO PUT A LINE OUT TO A DATASET.    */
*   /* SPECIAL PROCESSING OCCURS IF THE LINE TO BE PUT OUT IS GREATER*/
*   /* THAN DCBLRECL FOR RECFM=F OR DCBBLKSI FOR RECFM=V             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0140
*PUTRTN:                                                           0140
*   PROC;                           /* THIS IS THE PUTRTN            */
PUTRTN   STM   @14,@07,@SA00004                                    0140
         STM   @09,@12,@SA00004+40                                 0140
*   SPOOL=SP01;                     /* SET FOR SUPBOOL 1             */
         MVI   SPOOL,X'01'                                         0141
*   IF DCBRECL=V THEN               /* FOR RECFM = V                 */
         TM    DCBRECL+28(OPENADR),B'01000000'                     0142
         BNO   @RF00142                                            0142
         TM    DCBRECL+28(OPENADR),B'10000000'                     0142
         BNZ   @RF00142                                            0142
*     LENG=LEN+5;                   /* GET MAXIMUM BUFFER            */
         L     @10,@PC00001+4                                      0143
         L     @10,LEN(,@10)                                       0143
         LA    @10,5(,@10)                                         0143
         STCM  @10,7,LENG                                          0143
*   ELSE                            /* FOR OTHER RECFMS              */
*     LENG=MAX(LEN+1,DCBLRECL);     /* SET LENG AT LEAST DCBLRECL    */
         B     @RC00142                                            0144
@RF00142 L     @10,@PC00001+4                                      0144
         LA    @06,1                                               0144
         AL    @06,LEN(,@10)                                       0144
         LH    @10,DCBLRECL+72(,OPENADR)                           0144
         CR    @06,@10                                             0144
         BNL   *+6
         LR    @06,@10                                             0144
         STCM  @06,7,LENG                                          0144
*   RFY                                                            0145
*    (R0,                                                          0145
*     R1) RSTD;                     /* RESTRICT GETMAIN REGS         */
@RC00142 DS    0H                                                  0146
*   R0=GETPARM;                     /* LOAD R0 WITH GETMAIN PARMS    */
         L     R0,GETPARM                                          0146
*   GEN REFS(R0) SETS(R1)(GETMAIN R,LV=(0));/* ISSUE GETMAIN         */
         GETMAIN R,LV=(0)
*   LINEPTR=R1;                     /* SET BASE POINTER              */
         LR    LINEPTR,R1                                          0148
*   RFY                                                            0149
*    (R0,                                                          0149
*     R1) UNRSTD;                   /* RELEASE REGS                  */
*   PTRA=LINEPTR;                   /* SET I/O BUFFER BASE           */
         LR    PTRA,LINEPTR                                        0150
*   LEFT=LEN;                       /* SET AMOUNT TO MOVE            */
         L     @10,@PC00001+4                                      0151
         L     @10,LEN(,@10)                                       0151
         ST    @10,LEFT                                            0151
*   IF DCBRECCC=A&DSDCNTL=NO THEN   /* IF CARRIAGE BYTE NEEDED       */
         TM    DCBRECCC+28(OPENADR),B'00000100'                    0152
         BNO   @RF00152                                            0152
         TM    DCBRECCC+28(OPENADR),B'00000010'                    0152
         BNZ   @RF00152                                            0152
         TM    DSDCNTL(IODSDPTR),B'01000000'                       0152
         BNZ   @RF00152                                            0152
*     CCN=1;                        /* SET XTRA BYTE AMOUNT          */
         LA    CCN,1                                               0153
*   ELSE                            /* OTHERWISE SET XTRA BYTE       */
*     CCN=0;                        /* AMOUNT TO ZERO                */
         B     @RC00152                                            0154
@RF00152 SLR   CCN,CCN                                             0154
*   CALL CARRIAGE;                  /* PROCESS CARRIAGE CNTL         */
@RC00152 BAL   @14,CARRIAGE                                        0155
*   IF DCBRECL=V THEN               /* PROCESS FOR RECFM=V           */
         TM    DCBRECL+28(OPENADR),B'01000000'                     0156
         BNO   @RF00156                                            0156
         TM    DCBRECL+28(OPENADR),B'10000000'                     0156
         BNZ   @RF00156                                            0156
*     DO;                           /*                               */
*       LINEPTR->OO=0;              /* SET OFSET TO ZERO             */
         SLR   @10,@10                                             0158
         STCM  @10,3,OO(LINEPTR)                                   0158
*       CALL MOVE(INBUF,BFRV,LEN,LEN);/* COPY BUFFER INTO OUTAREA    */
         L     @10,@PC00001                                        0159
         BCTR  @10,0                                               0159
         L     @10,BFRA(,@10)                                      0159
         LA    @10,0(,@10)                                         0159
         ST    @10,@AL00001                                        0159
         LA    @10,BFRV(,PTRA)                                     0159
         ST    @10,@AL00001+4                                      0159
         L     @10,@PC00001+4                                      0159
         ST    @10,@AL00001+8                                      0159
         ST    @10,@AL00001+12                                     0159
         LA    @01,@AL00001                                        0159
         BAL   @14,MOVE                                            0159
*       DO WHILE LEFT^=0;           /* PUTOUT LOOP                   */
         B     @DE00160                                            0160
@DL00160 DS    0H                                                  0161
*         RFY                                                      0161
*          (R0) RSTD;               /* RESTRICT FOR PUT              */
*         R0=LINEPTR;               /* SET OUTAREA ADDRESS           */
         LR    R0,LINEPTR                                          0162
*         GEN REFS(OPENADR,R0)(PUT  (OPENADR),(R0));/* ISSUE PUT     */
         PUT  (OPENADR),(R0)
*         RFY                                                      0164
*          (R0) UNRSTD;             /* RELEASE REG ZERO              */
*         LEFT=LEFT-MOVED;          /* SUBTRACT AMOUNT PUT OUT       */
         L     @10,LEFT                                            0165
         SLR   @10,MOVED                                           0165
         ST    @10,LEFT                                            0165
*         IF LEFT^=0 THEN           /* IF MORE TO GO                 */
         LTR   @10,@10                                             0166
         BZ    @RF00166                                            0166
*           DO;                     /* MOVE DOWN UNPUT PART OF BFR   */
*             CALL MOVE(BFRVA,BFRV,LEFT,LEFT);                     0168
         LR    @10,PTRA                                            0168
         ALR   @10,MOVED                                           0168
         LA    @10,BFRVA(,@10)                                     0168
         ST    @10,@AL00001                                        0168
         LA    @10,BFRV(,PTRA)                                     0168
         ST    @10,@AL00001+4                                      0168
         LA    @10,LEFT                                            0168
         ST    @10,@AL00001+8                                      0168
         LA    @10,LEFT                                            0168
         ST    @10,@AL00001+12                                     0168
         LA    @01,@AL00001                                        0168
         BAL   @14,MOVE                                            0168
*             CALL CARRIAGE;        /* PROCESS C/C CHAR              */
         BAL   @14,CARRIAGE                                        0169
*           END;                    /*                               */
*       END;                        /*                               */
@RF00166 DS    0H                                                  0171
@DE00160 L     @10,LEFT                                            0171
         LTR   @10,@10                                             0171
         BNZ   @DL00160                                            0171
*     END;                          /*                               */
*                                                                  0173
*   /*****************************************************************/
*   /*                                                               */
*   /* PUTRTN OTHER THAN RECFM=V                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0173
*   ELSE                            /* OTHERWISE ASSUME RECFM=F OR U */
*     DO;                           /* PUT OUT A LINE                */
         B     @RC00156                                            0173
@RF00156 DS    0H                                                  0174
*       CALL MOVE(INBUF,BFRF,LEN,MAX(LEN,DCBLRECL-CCN));/* COPY BFR  */
         L     @10,@PC00001                                        0174
         BCTR  @10,0                                               0174
         L     @10,BFRA(,@10)                                      0174
         LA    @10,0(,@10)                                         0174
         ST    @10,@AL00001                                        0174
         ST    PTRA,@AL00001+4                                     0174
         L     @10,@PC00001+4                                      0174
         ST    @10,@AL00001+8                                      0174
         LH    @09,DCBLRECL+72(,OPENADR)                           0174
         SLR   @09,CCN                                             0174
         L     @10,LEN(,@10)                                       0174
         CR    @10,@09                                             0174
         BNL   *+6
         LR    @10,@09                                             0174
         ST    @10,@AFTEMPS                                        0174
         LA    @10,@AFTEMPS                                        0174
         ST    @10,@AL00001+12                                     0174
         LA    @01,@AL00001                                        0174
         BAL   @14,MOVE                                            0174
*       DO WHILE LEFT^=0;           /* DO UNTIL DONE                 */
         B     @DE00175                                            0175
@DL00175 DS    0H                                                  0176
*         RFY                                                      0176
*          (R0) RSTD;               /* RESTRICT REG ZERO             */
*         R0=LINEPTR;               /* SET OUTAREA ADDR              */
         LR    R0,LINEPTR                                          0177
*         GEN REFS(OPENADR,R0)(PUT  (OPENADR),(R0));/* ISSUE PUT     */
         PUT  (OPENADR),(R0)
*         RFY                                                      0179
*          (R0) UNRSTD;             /* RELEASE REGS                  */
*         LEFT=LEFT-MOVED;          /* UPDATE LEFT                   */
         L     @10,LEFT                                            0180
         SLR   @10,MOVED                                           0180
         ST    @10,LEFT                                            0180
*         IF LEFT^=0 THEN           /* IF REC TOO LONG, PUT REST     */
         LTR   @10,@10                                             0181
         BZ    @RF00181                                            0181
*           DO;                     /* MOVE DOWN REST OF BUFFER      */
*             CALL MOVE(BFRFA,BFRF,LEFT,MAX(LEFT,DCBLRECL-CCN));   0183
         LR    @09,PTRA                                            0183
         ALR   @09,MOVED                                           0183
         ST    @09,@AL00001                                        0183
         ST    PTRA,@AL00001+4                                     0183
         LA    @09,LEFT                                            0183
         ST    @09,@AL00001+8                                      0183
         LH    @09,DCBLRECL+72(,OPENADR)                           0183
         SLR   @09,CCN                                             0183
         CR    @10,@09                                             0183
         BNL   *+6
         LR    @10,@09                                             0183
         ST    @10,@AFTEMPS                                        0183
         LA    @10,@AFTEMPS                                        0183
         ST    @10,@AL00001+12                                     0183
         LA    @01,@AL00001                                        0183
         BAL   @14,MOVE                                            0183
*             CALL CARRIAGE;        /* PROCESS C/C CHAR              */
         BAL   @14,CARRIAGE                                        0184
*           END;                    /*                               */
*       END;                        /*                               */
@RF00181 DS    0H                                                  0186
@DE00175 L     @10,LEFT                                            0186
         LTR   @10,@10                                             0186
         BNZ   @DL00175                                            0186
*     END;                          /*                               */
*   RFY                                                            0188
*    (R0,                                                          0188
*     R1) RSTD;                     /* RESTRICT REGS                 */
@RC00156 DS    0H                                                  0189
*   R0=GETPARM;                     /* SET LENG AND SPOOL            */
         L     R0,GETPARM                                          0189
*   R1=LINEPTR;                     /* SET FREE ADDR                 */
         LR    R1,LINEPTR                                          0190
*   GEN REFS(R0,R1)(FREEMAIN R,LV=(0),A=(1));/* ISSUE FREEMAIN       */
         FREEMAIN R,LV=(0),A=(1)
*   RFY                                                            0192
*    (R0,                                                          0192
*     R1) UNRSTD;                   /* RELEASE REGS                  */
*   RETCODE=0;                      /*                               */
         SLR   RETCODE,RETCODE                                     0193
*   END PUTRTN;                     /* END PUT PROCESSING            */
@EL00004 DS    0H                                                  0194
@EF00004 DS    0H                                                  0194
@ER00004 LM    @14,@07,@SA00004                                    0194
         LM    @09,@12,@SA00004+40                                 0194
         BR    @14                                                 0194
*                                                                  0195
*   /*****************************************************************/
*   /*                                                               */
*   /* CARRIAGE: THE CARRIAGE ROUTINE IS USED TO DETERMINE IF        */
*   /* CARRIAGE CONTROL IS NECESSARY. IF IT IS THEN THE I/O BUFFER   */
*   /* BASE IS UPPED BY ONE ON THE FIRST ENTRY. ALSO THE FUNCTION OF */
*   /* SETTING AMOUNT MOVED IS DONE HERE                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0195
*CARRIAGE:                                                         0195
*   PROC;                           /* SETS C/C AND MOVED            */
CARRIAGE STM   @14,@02,12(@13)                                     0195
         STM   @05,@12,40(@13)                                     0195
*   IF CCN=1 THEN                   /* IF C/C CHAR NECESSARY         */
         LA    @10,1                                               0196
         CR    CCN,@10                                             0196
         BNE   @RF00196                                            0196
*     DO;                           /* THEN TEST IF FIRST ENTRY      */
*       IF FIRST=YES THEN           /* IF IT IS, THEN INCR           */
         TM    FIRST,B'01000000'                                   0198
         BNO   @RF00198                                            0198
*         DO;                       /* UPDATE PTRA BASE              */
*           PTRA=PTRA+1;            /* AND RESET FIRST SWITCH        */
         ALR   PTRA,@10                                            0200
*           FIRST=NO;               /*                               */
         NI    FIRST,B'10111111'                                   0201
*         END;                      /*                               */
*       IF DSDLINES>55 THEN         /* IF READY TO SKIP TO NEW PG    */
@RF00198 CLI   DSDLINES(IODSDPTR),55                               0203
         BNH   @RF00203                                            0203
*         DO;                       /* RESET LINES TO 1 AND          */
*           DSDLINES=1;             /* SET CCX TO CHAR '1'           */
         MVI   DSDLINES(IODSDPTR),X'01'                            0205
*           CCX='1';                /*                               */
         MVI   CCX,C'1'                                            0206
*         END;                      /*                               */
*       ELSE                        /* OTHERWISE SET CCX TO BLANK    */
*         DO;                       /* AND RESET LINES TO 1          */
         B     @RC00203                                            0208
@RF00203 DS    0H                                                  0209
*           DSDLINES=1+DSDLINES;    /*                               */
         LA    @10,1                                               0209
         SLR   @09,@09                                             0209
         IC    @09,DSDLINES(,IODSDPTR)                             0209
         ALR   @10,@09                                             0209
         STC   @10,DSDLINES(,IODSDPTR)                             0209
*           CCX=' ';                /*                               */
         MVI   CCX,C' '                                            0210
*         END;                      /*                               */
*       IF DCBRECL=V THEN           /* USE APPROPRIATE BUFFER FOR    */
@RC00203 TM    DCBRECL+28(OPENADR),B'01000000'                     0212
         BNO   @RF00212                                            0212
         TM    DCBRECL+28(OPENADR),B'10000000'                     0212
         BNZ   @RF00212                                            0212
*         LINEPTR->BFRV(1)=CCX;     /* SET C/C FOR RECFM=V           */
         MVC   BFRV(1,LINEPTR),CCX                                 0213
*       ELSE                        /*                               */
*         LINEPTR->BFRF(1)=CCX;     /* SET C/C FOR RECFM=F OR U      */
         B     @RC00212                                            0214
@RF00212 MVC   BFRF(1,LINEPTR),CCX                                 0214
*     END;                          /*                               */
@RC00212 DS    0H                                                  0216
*   IF DCBRECL=V THEN               /* FOR RECFM=V                   */
@RF00196 TM    DCBRECL+28(OPENADR),B'01000000'                     0216
         BNO   @RF00216                                            0216
         TM    DCBRECL+28(OPENADR),B'10000000'                     0216
         BNZ   @RF00216                                            0216
*     DO;                           /*                               */
*       LINEPTR->LL=MIN(DCBBLKSI-4,LEFT+4+CCN);/* SET LL FOR LINE    */
         LA    @10,4                                               0218
         LH    @09,DCBBLKSI+52(,OPENADR)                           0218
         SLR   @09,@10                                             0218
         L     @06,LEFT                                            0218
         ALR   @06,@10                                             0218
         ALR   @06,CCN                                             0218
         CR    @09,@06                                             0218
         BNH   *+6
         LR    @09,@06                                             0218
         STCM  @09,3,LL(LINEPTR)                                   0218
*       MOVED=LINEPTR->LL-(4+CCN);  /* SET AMT PUT OUT               */
         ALR   @10,CCN                                             0219
         SLR   @09,@10                                             0219
         LR    MOVED,@09                                           0219
*     END;                          /*                               */
*   ELSE                            /* SET MOVED TO DCBLRECL-CC      */
*     DO;                           /*                               */
         B     @RC00216                                            0221
@RF00216 DS    0H                                                  0222
*       IF DCBRECL=U THEN           /* FOR RECFM=U                   */
         TM    DCBRECL+28(OPENADR),B'11000000'                     0222
         BNO   @RF00222                                            0222
*         DCBLRECL=MIN(DCBBLKSI,LEFT+CCN);/* SET DCBLRECL            */
         LR    @10,CCN                                             0223
         AL    @10,LEFT                                            0223
         LH    @09,DCBBLKSI+52(,OPENADR)                           0223
         CR    @09,@10                                             0223
         BNH   *+6
         LR    @09,@10                                             0223
         STH   @09,DCBLRECL+72(,OPENADR)                           0223
*       MOVED=MIN(DCBLRECL-CCN,LEFT);/* SET MOVED                    */
@RF00222 LH    MOVED,DCBLRECL+72(,OPENADR)                         0224
         SLR   MOVED,CCN                                           0224
         L     @10,LEFT                                            0224
         CR    MOVED,@10                                           0224
         BNH   *+6
         LR    MOVED,@10                                           0224
*     END;                          /*                               */
*   END CARRIAGE;                   /* END C/C CHAR PROCESSING       */
@EL00005 DS    0H                                                  0226
@EF00005 DS    0H                                                  0226
@ER00005 LM    @14,@02,12(@13)                                     0226
         LM    @05,@12,40(@13)                                     0226
         BR    @14                                                 0226
*                                                                  0227
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE: THE MOVE ROUTINE IS USED TO MOVE I/O BUFFERS AROUND.    */
*   /* THIS ROUTINE DECLARES ITS OWN REGISTERS TO KEEP THE SEPARATE  */
*   /* FROM MAINLINE PROCESSING                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0227
*MOVE:                                                             0227
*   PROC(FROM,TO,LENFR,LENTO);      /* MOVE ROUTINE                  */
MOVE     STM   @14,@12,@SA00006                                    0227
         MVC   @PC00006(16),0(@01)                                 0227
*   DCL                             /*                               */
*     FROM CHAR(*),                 /* FROM BUFFER                   */
*     TO CHAR(*),                   /* TO BUFFER                     */
*     LENFR FIXED(31),              /* NUMBER OF BYTES TO MOVE       */
*     LENTO FIXED(31),              /* NUMBER OF BYTES TO MOVE       */
*     BLANKS BIT(32) CONSTANT('40000000'X);/* PADDING CHAR           */
*   RFY                                                            0229
*    (R4,                                                          0229
*     R5,                                                          0229
*     R6,                                                          0229
*     R7) RSTD;                     /* RESTRICT REGS FOR MVCL        */
*   R4=ADDR(TO(1));                 /* ADDRESS OF TO BUFFER          */
         L     R4,@PC00006+4                                       0230
*   R6=ADDR(FROM(1));               /* ADDRESS OF FROM BUFFER        */
         L     R6,@PC00006                                         0231
*   R5=LENTO;                       /* NUMBER OF BYTES TO MOVE       */
         L     @10,@PC00006+12                                     0232
         L     R5,LENTO(,@10)                                      0232
*   R7=BLANKS×LENFR;                /* SET LEN AND PADD CHAR         */
         L     @10,@PC00006+8                                      0233
         L     R7,LENFR(,@10)                                      0233
         O     R7,@CF00557                                         0233
*   GEN(MVCL  R4,R6);               /* ISSUE MVCL INSTRUCTION        */
         MVCL  R4,R6
*   RFY                                                            0235
*    (R4,                                                          0235
*     R5,                                                          0235
*     R6,                                                          0235
*     R7) UNRSTD;                   /* RELEASE REGS                  */
*   END MOVE;                       /*                               */
@EL00006 DS    0H                                                  0236
@EF00006 DS    0H                                                  0236
@ER00006 LM    @14,@12,@SA00006                                    0236
         BR    @14                                                 0236
*   END IKJRBBMC                    /*                               */
*                                                                  0237
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IKJECT  )                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*                                                                  0237
*       ;                                                          0237
@DATA    DS    0H
@CH00036 DC    H'1'
@CH00133 DC    H'20'
         DS    0F
@AL00030 DC    A(@CF00511)             LIST WITH   4 ARGUMENT(S)
         DS    F
         DC    A(@CF00511)
         DC    A(STCKL)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    4F
@SA00003 DS    14F
@SA00004 DS    14F
@SA00006 DS    15F
@PC00006 DS    4F
@AL00001 DS    4A
@AFTEMPS DS    1F
IKJRBBMC CSECT
         DS    0F
@CF00511 DC    F'0'
@CF00117 DC    F'4'
@CF00063 DC    F'8'
@CF00198 DC    F'16'
@CF00557 DC    XL4'40000000'
@DATD    DSECT
         DS    0D
LEFT     DS    F
GETPARM  DS    FL4
         ORG   GETPARM
SPOOL    DS    FL1
LENG     DS    FL3
         ORG   GETPARM+4
ECTPTR   DS    A
DCBPTR   DS    A
CCX      DS    CL1
SWS      DS    CL1
         ORG   SWS
ERROR    DS    BL1
FIRST    EQU   SWS+0
         ORG   SWS+1
IKJRBBMC CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@CA00148 DC    A(INLEN)
@CV00517 DC    V(IKJEFT30)
         DS    0D
PATCH    DC    8A(0)
IKJRBBMC CSECT
STCKL    STACK   DELETE=TOP,MF=L
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKJRBBMC CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
IODSDPTR EQU   @07
PTRA     EQU   @04
LINEPTR  EQU   @05
RETCODE  EQU   @08
CCN      EQU   @08
MOVED    EQU   @03
R0       EQU   @00
R1       EQU   @01
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
OPENADR  EQU   @02
         EXTRN INLEN
OUTBUF   EQU   0
INBUF    EQU   0
BFRF     EQU   0
BFRFA    EQU   0
@NM00002 EQU   0
BFRVA    EQU   @NM00002+4
INSTACK  EQU   0
INSCODE  EQU   INSTACK
INSDATA  EQU   INSCODE
INSADLSD EQU   INSTACK+1
IOSRL    EQU   0
IOSTELM  EQU   IOSRL
IOSBELM  EQU   IOSRL+4
DSDFLAGS EQU   0
DSDSEQ   EQU   DSDFLAGS
DSDCNTL  EQU   DSDFLAGS
DSDQSAM  EQU   DSDFLAGS
DSDFRST  EQU   DSDFLAGS
DSDOPTS  EQU   DSDFLAGS+1
DSDLINES EQU   DSDFLAGS+3
DSDMINBF EQU   DSDFLAGS+4
DSDBPAM  EQU   DSDFLAGS+12
BPAMBLK  EQU   0
NEXTREC  EQU   BPAMBLK
EOBLK    EQU   BPAMBLK+4
@NM00009 EQU   BPAMBLK+8
DECBINDX EQU   @NM00009
DECBMAX  EQU   @NM00009+2
CURBLK   EQU   BPAMBLK+12
CURDECB  EQU   BPAMBLK+36
IOBPTR   EQU   CURDECB+16
BPAMDCB  EQU   BPAMBLK+156
@NM00012 EQU   0
RESIDCNT EQU   @NM00012+14
INDCB    EQU   0
OTDCB    EQU   0
ECT      EQU   0
ECTIOWA  EQU   ECT+4
ECTSWS   EQU   ECT+28
ECTSWS2  EQU   ECT+40
ECTSWS21 EQU   ECTSWS2
IHADCB   EQU   0
IHADCS00 EQU   0
DCBFDAD  EQU   IHADCS00+5
IHADCS01 EQU   0
DCBDVTBL EQU   IHADCS01
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBEODA  EQU   DCBEODAD+1
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
DCBRECL  EQU   DCBRECLA
DCBRECCC EQU   DCBRECFM
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBIBPCT EQU   DCBIFLG
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
DCBIFPCT EQU   DCBIFLGS
IHADCS26 EQU   0
DCBWRITE EQU   IHADCS26
DCBREAD  EQU   DCBWRITE
DCBWRITA EQU   DCBREAD+1
IHADCS27 EQU   0
DCBGET   EQU   IHADCS27
DCBPUT   EQU   DCBGET
DCBGETA  EQU   DCBPUT+1
IHADCS36 EQU   0
DCBGERR  EQU   IHADCS36
DCBPERR  EQU   DCBGERR
DCBCHECK EQU   DCBPERR
DCBOPTCD EQU   DCBCHECK
DCBOPTH  EQU   DCBOPTCD
DCBOPTO  EQU   DCBOPTH
DCBOPTZ  EQU   DCBOPTCD
DCBGERRA EQU   DCBCHECK+1
DCBPERRA EQU   DCBGERRA
DCBSYNAD EQU   IHADCS36+4
DCBCIND1 EQU   IHADCS36+8
DCBCIND2 EQU   IHADCS36+9
DCBBLKSI EQU   IHADCS36+10
DCBIOBA  EQU   IHADCS36+16
DCBCICB  EQU   DCBIOBA
IHADCS52 EQU   0
DCBDIRCT EQU   IHADCS52
DCBQSWS  EQU   DCBDIRCT
DCBUSASI EQU   DCBQSWS
DCBQADFS EQU   DCBUSASI
DCBBUFOF EQU   DCBDIRCT+1
IHADCS37 EQU   0
DCBFLAG1 EQU   IHADCS37
IHADCS38 EQU   0
DCBEOBR  EQU   IHADCS38
DCBLRECL EQU   IHADCS38+10
DCBPOINT EQU   IHADCS38+12
DCBCNTRL EQU   DCBPOINT
IHADCS40 EQU   0
DCBEOBAD EQU   IHADCS40
DCBCCCW  EQU   IHADCS40+4
DCBRECAD EQU   DCBCCCW
DCBRECBT EQU   DCBRECAD
DCBRCREL EQU   DCBRECBT
@NM00045 EQU   IHADCS40+12
DCBEROPT EQU   @NM00045
BLKLEN   EQU   0
BFRA     EQU   0
LEN      EQU   0
ECTX     EQU   0
FUNC     EQU   0
FROM     EQU   0
TO       EQU   0
LENFR    EQU   0
LENTO    EQU   0
@NM00001 EQU   BFRF
LL       EQU   @NM00001
OO       EQU   @NM00001+2
BFRV     EQU   @NM00001+4
IOSRLPTR EQU   ECTIOWA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
DCBEOB   EQU   IHADCS40+20
DCBPRECL EQU   IHADCS40+18
@NM00048 EQU   IHADCS40+16
@NM00047 EQU   @NM00045+1
@NM00046 EQU   DCBEROPT
DCBERABE EQU   DCBEROPT
DCBERSKP EQU   DCBEROPT
DCBERACC EQU   DCBEROPT
@NM00044 EQU   IHADCS40+10
@NM00043 EQU   IHADCS40+9
@NM00042 EQU   IHADCS40+8
DCBRECA  EQU   DCBRECAD+1
@NM00041 EQU   DCBRECBT
DCBRCFGT EQU   DCBRCREL
DCBRCTRU EQU   DCBRCREL
DCBLCCW  EQU   DCBEOBAD
DCBNOTE  EQU   DCBCNTRL
@NM00040 EQU   IHADCS38+8
DCBEOBW  EQU   IHADCS38+4
DCBEOBRA EQU   DCBEOBR+1
DCBNCP   EQU   DCBEOBR
@NM00039 EQU   DCBFLAG1
DCBSTFLS EQU   DCBFLAG1
DCBSTQCK EQU   DCBFLAG1
DCBDIRCQ EQU   DCBBUFOF
DCBQSTRU EQU   DCBUSASI
@NM00038 EQU   DCBUSASI
DCBQADF3 EQU   DCBQADFS
DCBQADF2 EQU   DCBQADFS
DCBQADF1 EQU   DCBQADFS
DCBBLBP  EQU   DCBUSASI
@NM00037 EQU   DCBUSASI
DCBCICBA EQU   DCBCICB+1
@NM00036 EQU   DCBCICB
DCBOFFSW EQU   IHADCS36+15
DCBOFFSR EQU   IHADCS36+14
DCBWCPL  EQU   IHADCS36+13
DCBWCPO  EQU   IHADCS36+12
DCBCNQSM EQU   DCBCIND2
DCBCNFEO EQU   DCBCIND2
DCBCNCHS EQU   DCBCIND2
DCBCNBFP EQU   DCBCIND2
DCBCNIOE EQU   DCBCIND2
DCBCNCLO EQU   DCBCIND2
DCBCNWRO EQU   DCBCIND2
DCBCNSTO EQU   DCBCIND2
DCBCNEXB EQU   DCBCIND1
@NM00035 EQU   DCBCIND1
DCBCNBRM EQU   DCBCIND1
@NM00034 EQU   DCBCIND1
DCBCNEVA EQU   DCBCIND1
DCBCNEVB EQU   DCBCIND1
DCBCNSRD EQU   DCBCIND1
DCBCNTOV EQU   DCBCIND1
DCBSYNA  EQU   DCBSYNAD+1
DCBIOBL  EQU   DCBSYNAD
DCBCHCKA EQU   DCBPERRA
DCBOPTJ  EQU   DCBOPTCD
DCBOPTT  EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
DCBOPTQ  EQU   DCBOPTCD
DCBBCKPT EQU   DCBOPTO
DCBOPTC  EQU   DCBOPTCD
DCBOPTU  EQU   DCBOPTCD
DCBOPTW  EQU   DCBOPTCD
DCBPUTA  EQU   DCBGETA
@NM00033 EQU   DCBPUT
DCBREADA EQU   DCBWRITA
@NM00032 EQU   DCBREAD
DCBDEBA  EQU   DCBDEBAD+1
@NM00031 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBCH12  EQU   DCBIFPCT
DCBCH9   EQU   DCBIFPCT
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00030 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBICH12 EQU   DCBIBPCT
DCBICH9  EQU   DCBIBPCT
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00029 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00028 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00027 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00026 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
@NM00025 EQU   DCBDSRG1
@NM00024 EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBKEYLE EQU   DCBRELB
DCBTRBAL EQU   IHADCS01+6
@NM00023 EQU   IHADCS01+5
@NM00022 EQU   IHADCS01+4
DCBDVTBA EQU   DCBDVTBL+1
@NM00021 EQU   DCBDVTBL
DCBKEYCN EQU   IHADCS00+4
DCBRELAD EQU   IHADCS00
@NM00020 EQU   IHADCB
@NM00019 EQU   ECT+52
@NM00018 EQU   ECT+48
@NM00017 EQU   ECT+44
@NM00016 EQU   ECTSWS2+1
@NM00015 EQU   ECTSWS21
ECTTABND EQU   ECTSWS21
ECTDEFCS EQU   ECTSWS21
ECTBKPB  EQU   ECT+36
ECTUSER  EQU   ECT+32
ECTDDNUM EQU   ECT+29
ECTATTN  EQU   ECTSWS
ECTBKGRD EQU   ECTSWS
ECTNNOT  EQU   ECTSWS
ECTNMAL  EQU   ECTSWS
ECTLOGF  EQU   ECTSWS
ECTATRM  EQU   ECTSWS
@NM00014 EQU   ECTSWS
ECTNOPD  EQU   ECTSWS
ECTSCMD  EQU   ECT+20
ECTPCMD  EQU   ECT+12
ECTSMSG  EQU   ECT+9
ECTMSGF  EQU   ECT+8
ECTRTCD  EQU   ECT+1
ECTRCDF  EQU   ECT
@NM00013 EQU   @NM00012
@NM00011 EQU   CURDECB+8
DECBBLK  EQU   CURDECB+6
@NM00010 EQU   CURDECB
@NM00008 EQU   DSDFLAGS+8
@NM00007 EQU   DSDFLAGS+6
@NM00006 EQU   DSDFLAGS+2
@NM00005 EQU   DSDFLAGS
@NM00004 EQU   IOSRL+12
IOSNELM  EQU   IOSRL+10
IOSTLEN  EQU   IOSRL+8
INSLIST  EQU   INSCODE
INSPROC  EQU   INSCODE
INSPROM  EQU   INSCODE
INSRSVD  EQU   INSCODE
INSOTDD  EQU   INSCODE
INSINDD  EQU   INSCODE
INSSTOR  EQU   INSCODE
@NM00003 EQU   @NM00002
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00026 EQU   @RC00025
@RC00044 EQU   @RC00036
@RF00057 EQU   @EL00002
@RC00113 EQU   @EL00003
EOF      EQU   @EL00003
@RC00216 EQU   @EL00005
@ENDDATA EQU   *
         END   IKJRBBMC,(C'PLS1908',0701,78173)
