         TITLE 'IKJEFT80 -- TERMINAL COMMAND PROCESSOR                 *
                        '
        LCLA  &T,&SPN
&SPN    SETA  1
IKJEFT80 CSECT ,                                                   0002
@MAINENT DS    0H                                                  0002
         USING *,@15                                               0002
         B     @PROLOG                                             0002
         DC    AL1(16)                                             0002
         DC    C'IKJEFT80  78.177'                                 0002
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0002
         STM   @00,@12,20(@13)                                     0002
         BALR  @10,0                                               0002
@PSTART  LA    @11,4095(,@10)                                      0002
         USING @PSTART,@10                                         0002
         USING @PSTART+4095,@11                                    0002
         L     @00,@SIZDATD                                        0002
         GETMAIN  R,LV=(0)
         LR    @09,@01                                             0002
         USING @DATD,@09                                           0002
         ST    @13,@SA00001+4                                      0002
         LM    @00,@01,20(@13)                                     0002
         ST    @09,8(,@13)                                         0002
         LR    @13,@09                                             0002
         MVC   @PC00001(4),0(@01)                                  0002
        EJECT
*                                                                  0059
*/********************************************************************/
*/*                                                                  */
*/*MAINLINE-                                                         */
*/*          IKJEFT80/TERMINAL                                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0059
*   CPPLPTR=R1;                     /* INITIALIZE CP PARAMETER LIST
*                                      POINTER                       */
         ST    R1,CPPLPTR                                          0059
*   ECTPTR=CPPLECT;                                                0060
         L     @12,CPPLPTR                                         0060
         L     @08,CPPLECT(,@12)                                   0060
         ST    @08,ECTPTR                                          0060
*   CPECB=0;                        /* INITIALIZE ECB TO ZERO        */
         SLR   @15,@15                                             0061
         ST    @15,CPECB                                           0061
*   STATUS=CONTINUE;                /* STATUS IS CONTINUE    @Z40DQKC*/
         ST    @15,STATUS                                          0062
*   RETCODE=ZERO;                   /* RETURN CODE IS ZERO   @Z40DQKC*/
         ST    @15,RETCODE                                         0063
*   #PAIRS=ZERO;                    /* NO XLATE PAIRS YET    @Z40DQKC*/
         ST    @15,#PAIRS                                          0064
*   RFY                                                            0065
*    (R2,                                                          0065
*     R3) RSTD;                     /* RESTRICT REGS FOR USAGE       */
*                                                                  0065
*   /*****************************************************************/
*   /*                                                               */
*   /* THE ECTNOPD BIT IS SET BY THE TMP TO INDICATE THE PRESENCE OF */
*   /* OPERANDS                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0066
*   IF ECTNOPD='1'B                 /* CHECK FOR OPERANDS            */
*     THEN                          /* NO OPERANDS WERE SPECIFIED    */
         TM    ECTNOPD(@08),B'10000000'                            0066
         BO    @RT00066                                            0066
*     GO TO IGNOREM;                /* GO TO ISSUE THE WARNING     0067
*                                      MESSAGE                       */
*                                                                  0067
*   /*****************************************************************/
*   /*                                                               */
*   /* COMPLETE THE INITIALIZATION OF POINTERS                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0068
*   PPLPTR=ADDR(PPLWA2);            /* PPL FOR CHKCHAR       @Z40DQKC*/
         LA    PPLPTR,PPLWA2                                       0068
*   PPLECT=CPPLECT;                 /* PTR TO ECT            @Z40DQKC*/
         ST    @08,PPLECT(,PPLPTR)                                 0069
*   PPLUPT=CPPLUPT;                 /* PTR TO UPT            @Z40DQKC*/
         L     @05,CPPLUPT(,@12)                                   0070
         ST    @05,PPLUPT(,PPLPTR)                                 0070
*   PPLECB=ADDR(CPECB);             /* PTR TO ECB            @Z40DQKC*/
         LA    @15,CPECB                                           0071
         ST    @15,PPLECB(,PPLPTR)                                 0071
*   PPLCBUF=ADDR(PAIRBUF);          /* PTR TO BUFFER         @Z40DQKC*/
         LA    @14,PAIRBUF                                         0072
         ST    @14,PPLCBUF(,PPLPTR)                                0072
*   PPLPCL=ADDR(TERMPCL2);          /* PTR TO PCL            @Z40DQKC*/
         L     @14,@CV02097                                        0073
         ST    @14,PPLPCL(,PPLPTR)                                 0073
*   PPLANS=ADDR(PDLPTR1);           /* PTR TO ANSWER         @Z40DQKC*/
         LA    @14,PDLPTR1                                         0074
         ST    @14,PPLANS(,PPLPTR)                                 0074
*   PPLUWA=ADDR(CHKCHARS);          /* CHKCHAR SAVE AREA     @Z40DQKC*/
         LA    @14,CHKCHARS                                        0075
         ST    @14,PPLUWA(,PPLPTR)                                 0075
*   PPLPTR=ADDR(PPLWA);             /* INITIALIZE THE PARSE PARM LIST*/
         LA    PPLPTR,PPLWA                                        0076
*   PPLECT=CPPLECT;                 /* INITIALIZE ECT PTR            */
         ST    @08,PPLECT(,PPLPTR)                                 0077
*   PPLUPT=CPPLUPT;                 /* INITIALIZE UPT PTR            */
         ST    @05,PPLUPT(,PPLPTR)                                 0078
*   PPLECB=ADDR(CPECB);             /* INITIALIZE ECB PTR            */
         ST    @15,PPLECB(,PPLPTR)                                 0079
*   PPLCBUF=CPPLCBUF;               /* INITIALIZE COMMAND BUFFER PTR */
         L     @12,CPPLCBUF(,@12)                                  0080
         ST    @12,PPLCBUF(,PPLPTR)                                0080
*   PPLPCL=ADDR(TERMPCL);           /* INITIALIZE IKJPARS PCL PTR    */
         L     @12,@CV02096                                        0081
         ST    @12,PPLPCL(,PPLPTR)                                 0081
*   PPLANS=ADDR(PDEPTR);            /* INITIALIZE PTR TO ANSWER PLACE*/
         LA    @12,PDEPTR                                          0082
         ST    @12,PPLANS(,PPLPTR)                                 0082
*   PPLUWA=R13;                     /* INITIALIZE TERMINAL SAVE AREA
*                                      PTR                           */
         ST    R13,PPLUWA(,PPLPTR)                                 0083
*   R1=PPLPTR;                      /* GET PTR TO IKJPARS PARAMETER
*                                      LIST                          */
         LR    R1,PPLPTR                                           0084
*   GENERATE(LINK EP=IKJPARS);      /* GO TO PARSE THE OPERANDS      */
         LINK EP=IKJPARS
*   IF R15^=0                       /* TEST RETURN CODE FOR SUCCESS  */
*     THEN                          /* RESULT IS INVALID             */
         LTR   R15,R15                                             0086
         BZ    @RF00086                                            0086
*     DO;                                                          0087
*       SUBCODE=R15;                /* SAVE THE RETURN CODE          */
         ST    R15,SUBCODE                                         0088
*       IF SUBCODE=4                /* DID USER SPECIFY NOPROMPT   0089
*                                      MODE?                         */
*         THEN                                                     0089
         L     @12,SUBCODE                                         0089
         C     @12,@CF00049                                        0089
         BE    @RT00089                                            0089
*         GO TO RET12;              /* SET RETURN CODE OF 12 AND   0090
*                                      RETURN                        */
*       CVD(SUBCODE,WORKAREA);      /* '000C'X -> '012F'X    @Z40DQKC*/
         CVD   @12,WORKAREA                                        0091
*       UNPK(CODE,WORKAREA);        /* '012F'X -> 'F0F1F2'X  @Z40DQKC*/
         UNPK  CODE(5),WORKAREA(8)                                 0092
*       CODE(LENGTH(CODE))='F0'X×   /* SET ZONES             @Z40DQKC*/
*           CODE(LENGTH(CODE));                                    0093
         OI    CODE+4,X'F0'                                        0093
*       CODELEN=LENGTH(CODEMSG);    /* LENGTH OF INSERT      @Z40DQKC*/
         MVC   CODELEN(2),@CH02086                                 0094
*       CODEOFF=27;                 /* GET LENGTH OF CODE    @Z40DQKC*/
         MVC   CODEOFF(2),@CH01952                                 0095
*       SEGMENT=ADDR(INVPMSG);      /* GET MESSAGE POINTER           */
         L     @12,@CV01896                                        0096
         LA    @12,INVPMSG(,@12)                                   0096
         ST    @12,SEGMENT                                         0096
*       LEVELNP=NONEXTLM;           /* INDICATE NO NEXT LEVEL MESSAGE*/
         L     @12,NONEXTLM                                        0097
         ST    @12,LEVELNP                                         0097
*       SEGMENT2=ADDR(ERRCODE);     /* GET ERROR MESSAGE POINTER     */
         L     @12,@CV01896                                        0098
         LA    @12,ERRCODE(,@12)                                   0098
         ST    @12,SEGMENT2                                        0098
*       SEGMENT3=ADDR(CODEMSG);     /* GET CODE MESSAGE POINTER      */
         LA    @12,CODEMSG                                         0099
         ST    @12,SEGMENT3                                        0099
*       NUMSEG2=2;                  /* GET NUMBER OF SEGMENTS        */
         MVC   NUMSEG2(4),@CF00174                                 0100
*       LEVEL2P=ADDR(LEVELNP);      /* GET NEXT LEVEL MESSAGE POINTER*/
         LA    @12,LEVELNP                                         0101
         ST    @12,LEVEL2P                                         0101
*       CALL PUT2MSG;               /* GO ISSUE THE MESSAGE          */
         BAL   @14,PUT2MSG                                         0102
*       GO TO RET12;                /* RETURN TO TMP SET RETURN CODE
*                                      TO 12                         */
         B     RET12                                               0103
*     END;                          /* END PARSE ERROR CHECK         */
*                                                                  0104
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR NO OPERAND INDICATION FROM IKJPARS                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0105
*   IF PDEPTR=0                     /* IS PDL EMPTY                  */
*     THEN                          /* NO OPERANDS                   */
@RF00086 L     @12,PDEPTR                                          0105
         LTR   @12,@12                                             0105
         BNZ   @RF00105                                            0105
*     DO;                                                          0106
*IGNOREM:                                                          0107
*       SEGMENT=ADDR(MSG1);         /* ISSUE MESSAGE AND RETURN TO 0107
*                                      TMP                           */
IGNOREM  L     @12,@CV01896                                        0107
         ST    @12,SEGMENT                                         0107
*       LEVEL2P=NONEXTLM;           /* INDICATE NO NEXT LEVEL MESSAGE*/
         L     @12,NONEXTLM                                        0108
         ST    @12,LEVEL2P                                         0108
*       CALL PUT2MSG;               /* GO TO ISSUE THE MESSAGE       */
         BAL   @14,PUT2MSG                                         0109
*       GO TO RET;                  /* RETURN TO TMP SET RETURN CODE
*                                      OF 0                          */
         B     RET                                                 0110
*     END;                          /* END EMPTY PDE CHECK           */
*                                                                  0111
*   /*****************************************************************/
*   /*                                                               */
*   /* ********ROUTINE FOR ISSUING TERMINAL STATUS MACROS**********  */
*   /* THE PARAMETERS THAT ARE SPECIFIED IN THESE MACROS DEPEND ON   */
*   /* THE OUTPUT FROM IKJPARS. THIS ROUTINE DETERMINES WHICH        */
*   /* KEYWORDS WERE SPECIFIED AND ISSUES THE CORRESPONDING FORM OF  */
*   /* THE APPROPRIATE MACRO.                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0112
*   IF LNE=1                        /* WAS LINE KEYWORD SPECIFIED?   */
*     THEN                          /* LINE WAS SPECIFIED            */
@RF00105 L     @12,PDEPTR                                          0112
         CLC   LNE(2,@12),@CH00083                                 0112
         BNE   @RF00112                                            0112
*     DO;                                                          0113
*       R3=LINVALUE;                /* SET LINE VALUE                */
         LH    R3,LINVALUE                                         0114
*       GO TO STLATTN;              /* ISSUE STATTN WITH LINE      0115
*                                      PARAMETER                     */
         B     STLATTN                                             0115
*     END;                                                         0116
*   IF LNE=2                        /* NOLINE KEYWORD SPECIFIED?     */
*     THEN                          /* NOLINE KEYWORD WAS SPECIFIED  */
@RF00112 L     @12,PDEPTR                                          0117
         CLC   LNE(2,@12),@CH00174                                 0117
         BNE   @RF00117                                            0117
*     DO;                                                          0118
*       R3=0;                       /* GET LINE-CANCEL VALUE         */
         SLR   R3,R3                                               0119
*STLATTN:                           /* ISSUE STATTN MACRO WITH LINE
*                                      PARAMETER SPECIFIED           */
*       GENERATE(STATTN LINES=(3));                                0120
STLATTN  STATTN LINES=(3)
*       IF R15=8                    /* CHECK FOR INVALID RETRUN CODE
*                                      Z40DQ                         */
*         THEN                                                     0121
         C     R15,@CF00063                                        0121
         BNE   @RF00121                                            0121
*         DO;                                                      0122
*           SEGMENT=ADDR(MSGLINE);  /* GET LINE IGNORED MSGZ40DQJD   */
         L     @12,@CV01896                                        0123
         LA    @12,MSGLINE(,@12)                                   0123
         ST    @12,SEGMENT                                         0123
*           LEVEL2P=NONEXTLM;       /* NO NEXT LEVEL MSG Z40DQJD     */
         L     @12,NONEXTLM                                        0124
         ST    @12,LEVEL2P                                         0124
*           CALL PUT2MSG;           /* GO TO ISSUE MSG Z40DQJD       */
         BAL   @14,PUT2MSG                                         0125
*         END;                                                     0126
*     END;                                                         0127
@RF00121 DS    0H                                                  0128
*   IF SECSNO=1                     /* SECONDS KEYWORD SPECIFIED?    */
*     THEN                          /* SECONDS WERE SPECIFIED        */
@RF00117 L     @12,PDEPTR                                          0128
         CLC   SECSNO(2,@12),@CH00083                              0128
         BNE   @RF00128                                            0128
*     DO;                                                          0129
*       R3=SECVALUE;                /* GET SECONDS                   */
         LH    R3,SECVALUE                                         0130
*       R3=R3+FIVE;                 /* PREPARE TO ROUND TO NEAREST 0131
*                                      FIVE                          */
         AH    R3,FIVE                                             0131
*       R3=R3/TEN;                  /* GET NUMBER OF TEN SECONDS     */
         LR    @01,R3                                              0132
         SLR   @00,@00                                             0132
         LH    @12,TEN                                             0132
         DR    @00,@12                                             0132
         LR    R3,@01                                              0132
*       GO TO STSATTN;                                             0133
         B     STSATTN                                             0133
*     END;                                                         0134
*   IF SECSNO=2                     /* NOSECONDS SPECIFIED?          */
*     THEN                          /* NOSECONDS WERE SPECIFIED      */
@RF00128 L     @12,PDEPTR                                          0135
         CLC   SECSNO(2,@12),@CH00174                              0135
         BNE   @RF00135                                            0135
*     DO;                                                          0136
*       R3=0;                       /* PREPARE TO CANCEL SECONDS     */
         SLR   R3,R3                                               0137
*STSATTN:                           /* ISSUE STATTN MACRO WITH THE 0138
*                                      NUMBER OF TEN SECONDS         */
*       GENERATE(STATTN TENS=(3));                                 0138
STSATTN  STATTN TENS=(3)
*       IF R15=8                    /* CHECK FOR BAD RETURN        0139
*                                      CODEZ40DQJD                   */
*         THEN                                                     0139
         C     R15,@CF00063                                        0139
         BNE   @RF00139                                            0139
*         DO;                                                      0140
*           SEGMENT=ADDR(MSGSECS);  /* GET SEC IGNORED Z40DQJD       */
         L     @12,@CV01896                                        0141
         LA    @12,MSGSECS(,@12)                                   0141
         ST    @12,SEGMENT                                         0141
*           LEVEL2P=NONEXTLM;       /* NO NEXT LEVEL MSG Z40DQJD     */
         L     @12,NONEXTLM                                        0142
         ST    @12,LEVEL2P                                         0142
*           CALL PUT2MSG;           /* ISSUE MESSAGE Z40DQJD         */
         BAL   @14,PUT2MSG                                         0143
*         END;                                                     0144
*     END;                                                         0145
@RF00139 DS    0H                                                  0146
*   IF IPUT=1                       /* INPUT KEYWORD SPECIFIED?      */
*     THEN                          /* INPUT KEYWORD WAS SPECIFIED   */
@RF00135 L     @12,PDEPTR                                          0146
         CLC   IPUT(2,@12),@CH00083                                0146
         BNE   @RF00146                                            0146
*     DO;                                                          0147
*       VALUE2=BLANK;               /* PREPARE TO GET INPUT STRING 0148
*                                      PTR                           */
         MVI   VALUE2+1,C' '                                       0148
         MVC   VALUE2+2(2),VALUE2+1                                0148
         MVI   VALUE2,C' '                                         0148
*       VALUE2(1:INPUT2)=INPUT1->NUM;/* GET STRING                   */
         LH    @08,INPUT2(,@12)                                    0149
         BCTR  @08,0                                               0149
         L     @12,INPUT1(,@12)                                    0149
         EX    @08,@SM02283                                        0149
*       R3=ADDR(VALUE2);            /* GET STRING POINTER            */
         LA    R3,VALUE2                                           0150
*       GO TO STIATTN;              /* ISSUE STATTN WITH INPUT     0151
*                                      PARAMETER                     */
         B     STIATTN                                             0151
*     END;                                                         0152
*   IF IPUT=2                       /* NOINPUT KEYWORD SPECIFIED?    */
*     THEN                          /* NOINPUT WAS SPECIFIED         */
@RF00146 L     @12,PDEPTR                                          0153
         CLC   IPUT(2,@12),@CH00174                                0153
         BNE   @RF00153                                            0153
*     DO;                                                          0154
*       R3=0;                       /* PREPARE TO CANCEL INPUT       */
         SLR   R3,R3                                               0155
*STIATTN:                           /* ISSUE STATTN MACRO WITH INPUT
*                                      PARAMETER                     */
*       GENERATE(STATTN INPUT=(3));                                0156
STIATTN  STATTN INPUT=(3)
*       IF R15=8                    /* INVALID RETURN CODE Z40DQJD   */
*         THEN                                                     0157
         C     R15,@CF00063                                        0157
         BNE   @RF00157                                            0157
*         DO;                                                      0158
*           SEGMENT=ADDR(MSGINPT);  /* INPUT IGNORED MSGZ40DQJD      */
         L     @12,@CV01896                                        0159
         LA    @12,MSGINPT(,@12)                                   0159
         ST    @12,SEGMENT                                         0159
*           LEVEL2P=NONEXTLM;       /* NO NEXT LEVEL MSG Z40DQJD     */
         L     @12,NONEXTLM                                        0160
         ST    @12,LEVEL2P                                         0160
*           CALL PUT2MSG;           /* ISSUE MSG Z40DQJD             */
         BAL   @14,PUT2MSG                                         0161
*         END;                                                     0162
*     END;                                                         0163
@RF00157 DS    0H                                                  0164
*STBRK:                             /* CHECK FOR BREAK OPERAND       */
*   IF BRK=1                        /* WAS BREAK KEYWORD SPECIFIED?  */
*     THEN                          /* BREAK WAS SPECIFIED           */
@RF00153 DS    0H                                                  0164
STBRK    L     @12,PDEPTR                                          0164
         CLC   BRK(2,@12),@CH00083                                 0164
         BNE   @RF00164                                            0164
*     DO;                                                          0165
*       GENERATE(STBREAK YES);      /* ISSUE STBREAK MACRO -YES      */
         STBREAK YES
*       IF R15=8                    /* CHECK FOR INVALID RETURN      */
*         THEN                      /* RETURN CODE IS INVALID        */
         C     R15,@CF00063                                        0167
         BNE   @RF00167                                            0167
*         DO;                                                      0168
*           SEGMENT=ADDR(MSG5);     /* GET INVALID ERROR MESSAGE     */
         L     @12,@CV01896                                        0169
         LA    @12,MSG5(,@12)                                      0169
         ST    @12,SEGMENT                                         0169
*           LEVEL2P=NONEXTLM;       /* INDICATE NO NEXT LEVEL MSG    */
         L     @12,NONEXTLM                                        0170
         ST    @12,LEVEL2P                                         0170
*           CALL PUT2MSG;           /* GO TO ISSUE MESSAGE           */
         BAL   @14,PUT2MSG                                         0171
*           GO TO CHKTIMEO;         /* GO TO CHECK NEXT OPERAND      */
         B     CHKTIMEO                                            0172
*         END;                      /* END ERROR CHECK               */
*     END;                          /* END CHECK FOR BREAK OPERAND   */
@RF00167 DS    0H                                                  0175
*   IF BRK=2                        /* NOBREAK SPECIFIED?            */
*     THEN                          /* ISSUE STBREAK MACRO -NO       */
@RF00164 L     @12,PDEPTR                                          0175
         CLC   BRK(2,@12),@CH00174                                 0175
         BNE   @RF00175                                            0175
*     DO;                           /* ISSUE MACRO                   */
*       GENERATE(STBREAK NO);       /* ISSUE MACRO WITH NO BREAK     */
         STBREAK NO
*       IF R15=8                    /* CHECK FOR INVALID RETURN CODE */
*         THEN                      /* RETURN CODE IS INVALID        */
         C     R15,@CF00063                                        0178
         BNE   @RF00178                                            0178
*         DO;                       /* ISSUE ERROR MESSAGE           */
*           SEGMENT=ADDR(MSG6);     /* GET ERROR MESSAGE POINTER     */
         L     @12,@CV01896                                        0180
         LA    @12,MSG6(,@12)                                      0180
         ST    @12,SEGMENT                                         0180
*           LEVEL2P=NONEXTLM;       /* INDICATE NO NEXT LEVEL MSG    */
         L     @12,NONEXTLM                                        0181
         ST    @12,LEVEL2P                                         0181
*           CALL PUT2MSG;           /* GO TO ISSUE MESSAGE           */
         BAL   @14,PUT2MSG                                         0182
*         END;                      /* END CHECK FOR ERROR CONDITION */
*     END;                          /* END CHECK FOR NOBREAK OPERAND */
@RF00178 DS    0H                                                  0185
*CHKTIMEO:                                                         0185
*   IF TIMOUT=1                     /* TIMEOUT SPECIFIED?            */
*     THEN                          /* TIMEOUT WAS SPECIFIED         */
@RF00175 DS    0H                                                  0185
CHKTIMEO L     @12,PDEPTR                                          0185
         CLC   TIMOUT(2,@12),@CH00083                              0185
         BNE   @RF00185                                            0185
*     DO;                                                          0186
*       GENERATE(STTIMEOU YES);     /* ISSUE STTIMEOU MACRO -YES     */
         STTIMEOU YES
*       IF R15=8                    /* CHECK FOR INVALID RETURN CODE */
*         THEN                      /* RETURN CODE IS INVALID        */
         C     R15,@CF00063                                        0188
         BNE   @RF00188                                            0188
*         DO;                       /* ISSUE ERROR MESSAGE           */
*           SEGMENT=ADDR(MSG7);     /* GET ERROR MESSAGE POINTER     */
         L     @12,@CV01896                                        0190
         LA    @12,MSG7(,@12)                                      0190
         ST    @12,SEGMENT                                         0190
*           LEVEL2P=NONEXTLM;       /* INDICATE NO NEXT LEVEL MSG    */
         L     @12,NONEXTLM                                        0191
         ST    @12,LEVEL2P                                         0191
*           CALL PUT2MSG;           /* GO TO ISSUE MESSAGE           */
         BAL   @14,PUT2MSG                                         0192
*           GO TO CHKCLEAR;         /* GO CHECK CLEAR OPERAND        */
         B     CHKCLEAR                                            0193
*         END;                      /* END CHECK FOR ERROR CONDITION */
*     END;                          /* END CHECK FOR NOBREAK OPERAND */
@RF00188 DS    0H                                                  0196
*   IF TIMOUT=2                     /* NOTIMEOUT SPECIFIED?          */
*     THEN                          /* ISSUE STTIMEOU MACRO -NO      */
@RF00185 L     @12,PDEPTR                                          0196
         CLC   TIMOUT(2,@12),@CH00174                              0196
         BNE   @RF00196                                            0196
*     DO;                                                          0197
*       GENERATE(STTIMEOU NO);      /* ISSUE THE TIMEOUT MACRO       */
         STTIMEOU NO
*       IF R15=8                    /* CHECK FOR INVALID RETURN CODE */
*         THEN                      /* RETURN CODE IS INVALID        */
         C     R15,@CF00063                                        0199
         BNE   @RF00199                                            0199
*         DO;                       /* ISSUE ERROR MESSAGE           */
*           SEGMENT=ADDR(MSG8);     /* GET ERROR MESSAGE POINTER     */
         L     @12,@CV01896                                        0201
         LA    @12,MSG8(,@12)                                      0201
         ST    @12,SEGMENT                                         0201
*           LEVEL2P=NONEXTLM;       /* INDICATE NO NEXT LEVEL MSG    */
         L     @12,NONEXTLM                                        0202
         ST    @12,LEVEL2P                                         0202
*           CALL PUT2MSG;           /* GO TO ISSUE MESSAGE           */
         BAL   @14,PUT2MSG                                         0203
*         END;                      /* END CHECK FOR ERROR CONDITION */
*     END;                          /* END CHECK FOR NOBREAK OPERAND */
@RF00199 DS    0H                                                  0206
*CHKCLEAR:                                                         0206
*   IF CLRE=1                       /* CLEAR KEYWORD?                */
*     THEN                          /* CLEAR KEYWORD WAS SPECIFIED   */
@RF00196 DS    0H                                                  0206
CHKCLEAR L     @12,PDEPTR                                          0206
         CLC   CLRE(2,@12),@CH00083                                0206
         BNE   @RF00206                                            0206
*     DO;                           /* PREPARE TO GET CLEAR STRING 0207
*                                      PTR                           */
*       VALUE2=BLANK;               /* INITIALIZE AREA TO BLANKS     */
         MVI   VALUE2+1,C' '                                       0208
         MVC   VALUE2+2(2),VALUE2+1                                0208
         MVI   VALUE2,C' '                                         0208
*       VALUE2(1:CLR2)=CLR1->NUM;   /* GET CLEAR STRING              */
         LH    @08,CLR2(,@12)                                      0209
         BCTR  @08,0                                               0209
         L     @12,CLR1(,@12)                                      0209
         EX    @08,@SM02283                                        0209
*       R3=ADDR(VALUE2);            /* GET STRING POINTER            */
         LA    R3,VALUE2                                           0210
*       GO TO STCLEAR;              /* ISSUE STCLEAR MACRO           */
         B     STCLEAR                                             0211
*     END;                          /* END CLEAR OPERAND CHECK       */
*   IF CLRE=2                       /* NOCLEAR SPECIFIED?            */
*     THEN                          /* NOCLEAR WAS SPECIFIED         */
@RF00206 L     @12,PDEPTR                                          0213
         CLC   CLRE(2,@12),@CH00174                                0213
         BNE   @RF00213                                            0213
*     DO;                                                          0214
*       R3=0;                       /* PREPARE TO CANCEL CLEAR       */
         SLR   R3,R3                                               0215
*STCLEAR:                           /* ISSUE STCLEAR MACRO           */
*       GENERATE(STCLEAR STRING=(3));                              0216
STCLEAR  STCLEAR STRING=(3)
*       IF R15=8                    /* INVALID RETURN CODE Z40DQJD   */
*         THEN                                                     0217
         C     R15,@CF00063                                        0217
         BNE   @RF00217                                            0217
*         DO;                                                      0218
*           SEGMENT=ADDR(MSGCLER);  /* CLEAR IGNORED MSGZ40DQJD      */
         L     @12,@CV01896                                        0219
         LA    @12,MSGCLER(,@12)                                   0219
         ST    @12,SEGMENT                                         0219
*           LEVEL2P=NONEXTLM;       /* NO SECOND LEVEL MSGZ40DQJD    */
         L     @12,NONEXTLM                                        0220
         ST    @12,LEVEL2P                                         0220
*           CALL PUT2MSG;           /* ISSUE MSG Z40DQJD             */
         BAL   @14,PUT2MSG                                         0221
*         END;                                                     0222
*     END;                          /* END CHECK FOR NOCLEAR OPERAND */
@RF00217 DS    0H                                                  0224
*   IF LINSZ=1                      /* LINESIZE KEYWORD?             */
*     THEN                          /* LINESIZE WAS SPECIFIED        */
@RF00213 L     @12,PDEPTR                                          0224
         CLC   LINSZ(2,@12),@CH00083                               0224
         BNE   @RF00224                                            0224
*     DO;                                                          0225
*       R3=SIZVALUE;                /* GET LINE SIZE VALUE           */
         L     R3,SIZVALUE                                         0226
*       GENERATE(STSIZE SIZE=(3));  /* ISSUE STSIZE MACRO            */
         STSIZE SIZE=(3)
*       IF R15=8                    /* WAS LINESIZE OPERAND VALID?   */
*         THEN                      /* LINESIZE NOT VALID            */
         C     R15,@CF00063                                        0228
         BNE   @RF00228                                            0228
*         DO;                       /* ISSUE INVALID MESSAGE         */
*           SEGMENT=ADDR(MSG2);     /* GET MESSAGE POINTER           */
         L     @12,@CV01896                                        0230
         LA    @12,MSG2(,@12)                                      0230
         ST    @12,SEGMENT                                         0230
*           LEVEL2P=NONEXTLM;       /* INDICATE NO NEXT LEVEL MSG    */
         L     @12,NONEXTLM                                        0231
         ST    @12,LEVEL2P                                         0231
*           CALL PUT2MSG;           /* GO TO ISSUE THE ERROR MESSAGE */
         BAL   @14,PUT2MSG                                         0232
*           GO TO FREEUP;           /* GO TO FREE PDL CORE           */
         B     FREEUP                                              0233
*         END;                      /* END CHECK FOR INVALID RETURN
*                                      CODE                          */
*     END;                          /* END CHECK FOR LINESIZE OPERAND*/
@RF00228 DS    0H                                                  0236
*   IF SCN=1                        /* SCREEN SPECIFIED?             */
*     THEN                          /* SCREEN SIZE WAS SPECIFIED     */
@RF00224 L     @12,PDEPTR                                          0236
         CLC   SCN(2,@12),@CH00083                                 0236
         BNE   @RF00236                                            0236
*     DO;                           /* GET ROW AND LINE VALUES       */
*       R3=SIZEVAL1;                /* NUMBER OF ROWS                */
         LH    R3,SIZEVAL1                                         0238
*       R4=SIZEVAL2;                /* LENGTH OF ROWS                */
*                                                                  0239
         LH    R4,SIZEVAL2                                         0239
*       /*************************************************************/
*       /*                                                           */
*       /* ISSUE MACRO TO SET LINES,ROWS                             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0240
*       GENERATE(STSIZE SIZE=(4),LINE=(3));                        0240
         STSIZE SIZE=(4),LINE=(3)
*       IF R15=8                    /* CHECK FOR VALID SCREEN OPERAND*/
*         THEN                      /* SCREEN OPERAND IS INVALID     */
         C     R15,@CF00063                                        0241
         BNE   @RF00241                                            0241
*         DO;                       /* ISSUE INVALID MESSAGE         */
*           SEGMENT=ADDR(MSG3);     /* GET MESSAGE POINTER           */
         L     @12,@CV01896                                        0243
         LA    @12,MSG3(,@12)                                      0243
         ST    @12,SEGMENT                                         0243
*           LEVEL2P=NONEXTLM;       /* INDICATE NO NEXT LEVEL MSG    */
         L     @12,NONEXTLM                                        0244
         ST    @12,LEVEL2P                                         0244
*           CALL PUT2MSG;           /* GO TO ISSUE ERROR MESSAGE     */
         BAL   @14,PUT2MSG                                         0245
*         END;                      /* END CHECK FOR INVALID RESULTS */
*       IF R15=12                   /* IS SCREEN VALUE STANDARD      */
*         THEN                      /* SCREEN VALUE IS NOT STANDARD  */
@RF00241 C     R15,@CF02156                                        0247
         BNE   @RF00247                                            0247
*         DO;                       /* ISSUE THE NOT STANDARD MESSAGE*/
*           SEGMENT=ADDR(MSG4);     /* GET ERROR MESSAGE POINTER     */
         L     @12,@CV01896                                        0249
         LA    @12,MSG4(,@12)                                      0249
         ST    @12,SEGMENT                                         0249
*           LEVEL2P=NONEXTLM;       /* NO NEXT LEVEL MESSAGE         */
         L     @12,NONEXTLM                                        0250
         ST    @12,LEVEL2P                                         0250
*           CALL PUT2MSG;           /* GO TO ISSUE ERROR MESSAGE     */
         BAL   @14,PUT2MSG                                         0251
*         END;                      /* CHECK FOR NON STANDARD VALUE  */
*     END;                          /* END CHECK FOR SCRSIZE OPERAND */
@RF00247 DS    0H                                                  0254
*   IF KEYCHR=2&                    /* NOCHAR KEYWORD        @Z40DQKC*/
*       KEYTRN^=1                   /* NO TRAN KEYWORD       @Z40DQKC*/
*     THEN                                                         0254
@RF00236 L     @12,PDEPTR                                          0254
         CLC   KEYCHR(2,@12),@CH00174                              0254
         BNE   @RF00254                                            0254
         CLC   KEYTRN(2,@12),@CH00083                              0254
         BE    @RF00254                                            0254
*     CALL NOCHAR;                  /* PERFORM NOCHAR FUNCTION     0255
*                                                            @Z40DQKC*/
         BAL   @14,NOCHAR                                          0255
*   ELSE                                                           0256
*     IF KEYCHR=1                   /* CHAR KEYWORD          @Z40DQKC*/
*       THEN                                                       0256
         B     @RC00254                                            0256
@RF00254 L     @12,PDEPTR                                          0256
         CLC   KEYCHR(2,@12),@CH00083                              0256
         BNE   @RF00256                                            0256
*       CALL KEYCHAR;               /* PERFORM CHAR FUNCTION @Z40DQKC*/
         BAL   @14,KEYCHAR                                         0257
*   IF KEYTRN=2                     /* NOTRAN KEYWORD        @Z40DQKC*/
*     THEN                                                         0258
@RF00256 DS    0H                                                  0258
@RC00254 L     @12,PDEPTR                                          0258
         CLC   KEYTRN(2,@12),@CH00174                              0258
         BNE   @RF00258                                            0258
*     CALL NOTRAN;                  /* PERFORM NOTRAN FUNCTION     0259
*                                                            @Z40DQKC*/
         BAL   @14,NOTRAN                                          0259
*FREEUP:                            /* ISSUE IKJRLSA TO FREE       0260
*                                      PARAMETER DESCRIPTOR LIST CORE*/
*   GENERATE(IKJRLSA  PDEPTR);                                     0260
@RF00258 DS    0H                                                  0260
FREEUP   IKJRLSA  PDEPTR
*RET:                               /* PREPARE TO RETURN TO THE TMP
*                                      WITH NORMAL RETURN CODE = 0   */
*   R15=0;                          /* SET VALID RETURN CODE         */
RET      SLR   R15,R15                                             0261
*   RETURN;                         /* RETURN TO THE TMP             */
*                                                                  0262
@EL00001 L     @13,4(,@13)                                         0262
@EF00001 L     @00,@SIZDATD                                        0262
         LR    @01,@09                                             0262
         FREEMAIN R,LV=(0),A=(1)
@ER00001 L     @14,12(,@13)                                        0262
         LM    @00,@12,20(@13)                                     0262
         BR    @14                                                 0262
*   /*****************************************************************/
*   /*                                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0263
*RET12:                             /* PREPARE TO RETURN TO THE TMP
*                                      WITH ABNORMAL RETURN CODE=12  */
*                                                                  0263
*   /*****************************************************************/
*   /*                                                               */
*   /* FLUSH THE STACK AND CLEAR THE INPUT QUEUE                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0263
*   IOPLPTR=ADDR(IOPLWA);                                          0263
RET12    LA    @12,IOPLWA                                          0263
         LR    IOPLPTR,@12                                         0263
*   IOPLUPT=CPPLUPT;                /* GET UPT POINTER               */
         L     @08,CPPLPTR                                         0264
         L     @04,CPPLUPT(,@08)                                   0264
         ST    @04,IOPLUPT(,IOPLPTR)                               0264
*   IOPLECT=CPPLECT;                /* GET ECT POINTER               */
         L     @08,CPPLECT(,@08)                                   0265
         ST    @08,IOPLECT(,IOPLPTR)                               0265
*   IOPLECB=ADDR(CPECB);            /* GET ECB POINTER               */
         LA    @08,CPECB                                           0266
         ST    @08,IOPLECB(,IOPLPTR)                               0266
*   IOPLIOPB=ADDR(STPBWA);                                         0267
         LA    @08,STPBWA                                          0267
         ST    @08,IOPLIOPB(,IOPLPTR)                              0267
*   R1=ADDR(IOPLWA);                                               0268
         LR    R1,@12                                              0268
*   GEN(STACK DELETE=ALL,MF=(E,(1)));/* FLUSH THE STACK              */
         STACK DELETE=ALL,MF=(E,(1))
*   SUBCODE=R15;                                                   0270
         ST    R15,SUBCODE                                         0270
*   GEN(TCLEARQ);                   /* CLEAR THE INPUT QUEUE         */
         TCLEARQ
*   R15=12;                         /* SET INVALID RETURN CODE       */
         LA    R15,12                                              0272
*   RETURN;                         /* RETURN TO THE TMP             */
         B     @EL00001                                            0273
*   GENERATE;                                                      0274
*                                                                  0274
      EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING IS THE MESSAGE CSECT FOR THE TERMINAL COMMAND   */
*   /* PROCESSOR. MESSAGES ARE RETRIEVED BY WAY OF THE MAP- MESSAGES */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0275
*   GENERATE;                                                      0275
TERMMSGS   CSECT
TMSG1 DC   H'42'                LENGTH OF MESSAGE         /*@Z40DQKC*/
      DC   H'0'                 OFF SET TO MESSAGE
      DC   CL38'IKJ56655I NO OPERANDS, COMMAND IGNORED'
TMSG2 DC   H'51'                LENGTH OF MESSAGE         /*@Z40DQKC*.
      DC   H'0'                 OFF SET TO MESSAGE
      DC   CL47'IKJ56656I INVALID LINESIZE OPERAND, USE SCRSIZE'
TMSG3 DC   H'51'                LENGTH OF MESSAGE         /*@Z40DQKC*/
      DC   H'0'                 OFF SET TO MESSAGE
      DC   CL47'IKJ56657I INVALID SCRSIZE OPERAND, USE LINESIZE'
TMSG4 DC   H'70'                LENGTH OF MESSAGE         /*@Z40DQKC*/
      DC   H'0'                 OFF SET TO MESSAGE
      DC CL55'IKJ56658I SCREEN SIZE NOT STANDARD, SCREEN CONTROL ERRO'
      DC   CL11'R MAY OCCUR'
TMSG5 DC   H'45'                LENGTH OF MESSAGE         /*@Z40DQKC*/
      DC   H'0'                 OFF SET TO MESSAGE
      DC   CL41'IKJ56659I BREAK INVALID FOR THIS TERMINAL'
TMSG6 DC   H'47'                LENGTH OF MESSAGE         /*@Z40DQKC*/
      DC   H'0'                 OFF SET TO MESSAGE
      DC   CL43'IKJ56660I NOBREAK INVALID FOR THIS TERMINAL'
TMSG7 DC   H'47'                LENGTH OF MESSAGE         /*@Z40DQKC*/
      DC   H'0'                 OFF SET TO MESSAGE
      DC   CL43'IKJ56661I TIMEOUT INVALID FOR THIS TERMINAL'
TMSG8 DC   H'49'                LENGTH OF MESSAGE         /*@Z40DQKC*/
      DC   H'0'                 OFF SET TO MESSAGE
      DC   CL45'IKJ56662I NOTIMEOUT INVALID FOR THIS TERMINAL'
TMSG9 DC   H'36'                LENGTH OF MESSAGE         /*@Z40DQKC*/
      DC   H'0'                 OFF SET TO MESSAGE
      DC   CL32'IKJ56663I INVALID NUMBER OF ROWS'
TMSG0 DC   H'35'                LENGTH OF MESSAGE         /*@Z40DQKC*/
      DC   H'0'                 OFF SET TO MESSAGE
      DC   CL31'IKJ56664I INVALID LENGTH OF ROW'
TINVPMSG DC H'35'               COMMAND ERROR MESSAGE     /*@Z40DQKC*/
      DC   H'0'                 OFF SET TO MESSAGE
      DC   CL31'IKJ56667I COMMAND SYSTEM ERROR+'
TERRCODE DC H'31'               PARSE ERROR MESSAGE       /*@Z40DQKC*/
      DC   H'0'                 OFF SET TO MESSAGE
      DC   CL27'IKJ56667I PARSE ERROR CODE '
TMSGLINE DC H'51'                                         /*@Z40DQKC*/
      DC   H'0'                 OFFSET TO MESSAGE
      DC   C'IKJ56668I LINE/NOLINE INVALID FOR THIS TERMINAL'
TMSGSECS DC H'55'                                         /*@Z40DQKC*/
      DC    H'0'                OFFSET TO MESSAGE
      DC    C'IKJ56669I SECOND/NOSECOND INVALID FOR THIS TERMINAL'
TMSGCLER DC H'53'                                         /*@Z40DQKC*/
      DC    H'0'                OFFSET TO MESSAGE
      DC    C'IKJ56665I CLEAR/NOCLEAR INVALID FOR THIS TERMINAL'
TMSGINPT DC H'53'                                         /*@Z40DQKC*/
      DC    H'0'                OFFSET TO MESSAGE
      DC    C'IKJ56666I INPUT/NOINPUT INVALID FOR THIS TERMINAL'
TMSGESTA DC   H'31'                                           @Z40DQKC
        DC    H'0'                                            @Z40DQKC
        DC    CL27'IKJ56667I ESTAE ERROR CODE '               @Z40DQKC
TMSGSTTR DC   H'32'                                           @Z40DQKC
        DC    H'0'                                            @Z40DQKC
        DC    CL28'IKJ56667I STTRAN ERROR CODE '              @Z40DQKC
TMSGTRAN DC   H'51'
        DC    H'0'                                            @Z40DQKC
        DC    CL47'IKJ56667I TRAN/NOTRAN INVALID FOR THIS TERMINAL'
TMSGCHAR DC   H'51'                                           @Z40DQKC
        DC    H'0'                                            @Z40DQKC
        DC    CL47'IKJ56667I CHAR/NOCHAR INVALID FOR THIS TERMINAL'
TCODEMSG DC H'8'                ERROR CODE MESSAGE        /*@Z40DQKC*/
      DC   H'26'                OFF SET TO MESSAGE
      DC   C' '                 FIRST BYTE OF CODE IS BLANK
      DS   CL4                  CODE
TMSGSIZE DC   H'54'
         DC   H'0'
         DC   CL50'IKJ56668I TRANSLATE TABLE SIZE LESS THAN 516 BYTES'
TMSGBDCH DC   H'78'
         DC   H'0'
         DC   CL48'IKJ56670I TRANSLATE TABLE MUST HAVE NUMBER AND '
         DC   CL26'UPPER CASE LETTERS DEFINED'
TMSGNTRN DC   H'60'
         DC   H'0'
         DC   CL43'IKJ56671I NOCHAR INVALID, DEFAULT TRANSLATE'
         DC   CL13' TABLE IN USE'
IKJEFT80   CSECT
      DS   0H                   CONTINUE IKJEFT80 PROCESSING
*   GENERATE;                                                      0276
*                                                                  0276
      EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* ***********LIST FORM OF PUTLINE MACRO***********************  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0277
*   GENERATE;                                                      0277
*                                                                  0277
PUTLIST    PUTLINE   OUTPUT=(PUTLIST),MF=L
PUTEND     EQU       *
PUTLNG     DC        AL2(PUTEND-PUTLIST)
*   /*****************************************************************/
*   /*                                                               */
*   /* *****************ENTER PARSE PCL****************************  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0278
*   GENERATE;                                                      0278
TERMPCL    IKJPARM   DSECT=TERMPDL
LINE       IKJKEYWD
           IKJNAME   'LINES',SUBFLD=LINNUM
           IKJNAME   'NOLINES'
SECS       IKJKEYWD
           IKJNAME   'SECONDS',SUBFLD=SECNO
           IKJNAME   'NOSECONDS'
INPUT      IKJKEYWD
           IKJNAME   'INPUT',SUBFLD=INP
           IKJNAME   'NOINPUT'
LINSZE     IKJKEYWD
           IKJNAME   'LINESIZE',SUBFLD=LINESIZ
BREAK      IKJKEYWD
           IKJNAME   'BREAK'
           IKJNAME   'NOBREAK'
TIME       IKJKEYWD
           IKJNAME   'TIMEOUT'
           IKJNAME   'NOTIMEOUT'
CLEAR      IKJKEYWD
           IKJNAME   'CLEAR',SUBFLD=CLR
           IKJNAME   'NOCLEAR'
SCREEN     IKJKEYWD
           IKJNAME   'SCRSIZE',SUBFLD=SCRN
* TRAN AND CHAR ARE NEW FOR VS2 R4 SNA SUPPORT                @Z40DQKC
#TRAN   IKJKEYWD
        IKJNAME  'TRAN',SUBFLD=@TRAN
        IKJNAME  'NOTRAN'
#CHAR   IKJKEYWD
        IKJNAME  'CHAR',SUBFLD=@CHAR
        IKJNAME  'NOCHAR'
LINNUM     IKJSUBF
LINENO     IKJIDENT  'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=3,  **
               PROMPT='NUMBER OF LINES, MAXIMUM IS 255',              **
               HELP='NUMBER OF LINES TO PRINT BEFORE ATTENTION',      **
               VALIDCK=LINNOCHK
SECNO      IKJSUBF
SECNUM     IKJIDENT  'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=4,  **
               PROMPT='NUMBER OF SECONDS, MAXIMUM IS 2550',           **
               HELP='NUMBER OF SECONDS TO ELASPE BEFORE ATTENTION',   **
               VALIDCK=SECNOCHK
INP        IKJSUBF
INPT       IKJIDENT  'CHARACTER',ASIS,FIRST=ANY,OTHER=ANY,MAXLNTH=4,  **
               PROMPT='INPUT STRING, MAXIMUM IS 4',                   **
               HELP='STRING TO BE USED FOR ATTENTION'
LINESIZ    IKJSUBF
LINSIZE    IKJIDENT  'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=3,  **
               VALIDCK=LINSZCHK,PROMPT='LINESIZE, MAXIMUM IS 255',    **
               HELP='LENGTH OF LINE'
CLR        IKJSUBF
CLRST      IKJIDENT  'CHARACTER',ASIS,FIRST=ANY,OTHER=ANY,MAXLNTH=4,  **
               PROMPT='CLEAR STRING, MAXIMUM IS 4',                   **
               HELP='STRING TO BE USED TO CLEAR SCREEN'
SCRN       IKJSUBF
SCRN1      IKJIDENT  'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=3,  **
               PROMPT='NUMBER OF ROWS, MAXIMUM IS 255',VALIDCK=SCNCK1
SCRN2      IKJIDENT  'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=3,  **
               PROMPT='LENGTH OF ROW, MAXIMUM IS 255',VALIDCK=SCNCK2
* TRAN AND CHAR ARE NEW FOR VS2 R4 SNA SUPPORT                @Z40DQKC
@TRAN   IKJSUBF
$TRAN   IKJIDENT  'TRANSLATE TABLE NAME',MAXLNTH=8,OTHER=ALPHANUM,    **
               VALIDCK=CHKTRAN,PROMPT='TRANSLATE TABLE NAME',         **
               HELP=' MEMBER NAME OF TRANSLATE TABLE TO REPLACE CURRENTT
                TABLE IN EFFECT'
@CHAR   IKJSUBF
$CHAR   IKJPOSIT  PSTRING,LIST,ASIS,VALIDCK=CHKCHAR,                  **
               PROMPT='CHARACTER TRANSLATION PAIRS',                  **
               HELP='CHARACTER TRANSLATION PAIRS IN THE FOLLOWING ORDERR
                (CURRENT CHAR , NEW CHAR) WHERE NEW CHAR WILL REPLACE TT
               HE CURRENT CHAR'
PARSPCL    IKJENDP
*                                                                  0279
*/********************************************************************/
*/*                                                                  */
*/*PCL DEFINITION-                                                   */
*/*          TERMPCL2                                                */
*/*                                                                  */
*/*PURPOSE-                                                          */
*/*          FOR PARSING OF EACH CHAR PAIR BY THE VALIDITY CHECK     */
*/*          EXITS                                                   */
*/*                                                                  */
*/*CHANGE ACTIVITY-                                                  */
*/*      @Z40DQKC-                                                   */
*/*          NEW FOR VS2 RELEASE 4 SNA SUPPORT                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0279
*   DECLARE                                                        0279
*     PCL2 STATIC GEND;                                            0279
*   GENERATE DATA DEFS(PCL2);                                      0280
*PUT2MSG:                                                          0281
*   PROCEDURE                       /* INTERNAL PROCEDURE            */
*       OPTIONS(DONTSAVE);          /* OPTION GET NO SAVE AREA       */
*                                                                  0281
         B     @PB00002                                            0281
PUT2MSG  DS    0H                                                  0282
*   /*****************************************************************/
*   /*                                                               */
*   /* OPTION DONTSAVE REGISTERS ********************MESSAGE SET     */
*   /* UP************************** THIS SUBROUTINE SETS UP THE      */
*   /* INTERFACE WITH THE PUTLINE SERVICE ROUTINE MACRO AND ISSUES   */
*   /* THE MACRO. THIS MARCO INVOKES THE IKJPUTL MODULE WHICH PUTS   */
*   /* THE MESSAGE OUT TO THE TERMINAL USER.                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0282
*   RFY                                                            0282
*    (R1,                                                          0282
*     R3,                                                          0282
*     R4) RSTD;                     /* REGISTERS USED IN THIS ROUTINE*/
*   R4=R14;                         /* SAVE RETURN ADDRESS           */
         LR    R4,R14                                              0283
*   NUMSEG=1;                       /* GET NUMBER OF SEGMENTS        */
         MVC   NUMSEG(4),@CF00083                                  0284
*   IOPLPTR=ADDR(IOPLWA);           /* GET POINTER TO I/O PARAMETER
*                                      LIST                          */
         LA    IOPLPTR,IOPLWA                                      0285
*   IOPLUPT=CPPLUPT;                /* GET UPT POINTER               */
         L     @12,CPPLPTR                                         0286
         L     @08,CPPLUPT(,@12)                                   0286
         ST    @08,IOPLUPT(,IOPLPTR)                               0286
*   IOPLECT=CPPLECT;                /* GET ECT POINTER               */
         L     @12,CPPLECT(,@12)                                   0287
         ST    @12,IOPLECT(,IOPLPTR)                               0287
*   PTPBPTR=ADDR(PUTPARM);                                         0288
         LA    PTPBPTR,PUTPARM                                     0288
*   IOPLECB=ADDR(CPECB);            /* GET ECB POINTER               */
         LA    @12,CPECB                                           0289
         ST    @12,IOPLECB(,IOPLPTR)                               0289
*   PUTPARM(1:PUTLNG)=PUTLIST;      /* INITIALIZE PUTLINE PARM LIST  */
         LH    @12,PUTLNG                                          0290
         BCTR  @12,0                                               0290
         EX    @12,@SM02285                                        0290
*   IOPLIOPB=PTPBPTR;               /* GET PTR TO PARAMETER LIST     */
         ST    PTPBPTR,IOPLIOPB(,IOPLPTR)                          0291
*   R3=ADDR(MSGLIST);               /* GET PTR TO MSG SEGMENTS       */
         LA    R3,MSGLIST                                          0292
*   R1=IOPLPTR;                     /* GET PTR TO PUTLINE PARM LIST  */
*                                                                  0293
         LR    R1,IOPLPTR                                          0293
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE THE PUTLINE MACRO TO INFORM THE TERMINAL USER           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0294
*   GENERATE;                                                      0294
              PUTLINE OUTPUT=((3),MULTLVL),TERMPUT=(EDIT),MF=(E,(1))
*   R14=R4;                         /* RESTORE RETURN ADDRESS        */
         LR    R14,R4                                              0295
*   END PUT2MSG;                    /* END PUT2MSG PROCEDURE         */
*                                                                  0296
@EL00002 DS    0H                                                  0296
@EF00002 DS    0H                                                  0296
@ER00002 BR    @14                                                 0296
*   /*****************************************************************/
*   /*                                                               */
*   /* ****************VALIDITY CHECK ROUTINES*********************  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0297
*LINNOCHK:                                                         0297
*                                                                  0297
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS VALIDITY CHECKING ROUTINE IS ENTERED BY IKJPARS WHENEVER */
*   /* THE TERMINAL USER SPECIFIES THE 'LINES' KEYWORD ON THE        */
*   /* TERMINAL COMMAND. THE VALUE MUST BE A NUMBER BETWEEN 1 AND    */
*   /* 255. IF NOT, A RETURN CODE OF 4 IS RETURNED TO IKJPARS        */
*   /* SPECIFYING THAT THE INPUT IS INVALID. IKJPARS THEN ISSUES A   */
*   /* 'PROMPT' MESSAGE AND WAITS FOR VALID INPUT. IF THE NUMBER IS A*/
*   /* VALID ONE, A RETURN CODE OF 0 IS SENT TO IKJPARS AND          */
*   /* PROCESSING OF OTHER OPERANDS CONTINUE.                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0297
*   PROCEDURE                       /* REGISTER 1 POINTS TO A 2-WORD */
*                                                                  0297
*   /*****************************************************************/
*   /*                                                               */
*   /* PARAMETER LIST.1. PDE PTR, 2. SAVE AREA PTR                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0297
*       OPTIONS(DONTSAVE(15),       /* OPTION DONT SAVE REGISTER 15  */
*       NOSAVEAREA);                /* OPTION NOSAVERAE              */
LINNOCHK ST    @14,12(,@13)                                        0297
         STM   @00,@12,20(@13)                                     0297
*   RFY                                                            0298
*    (GPR01P,                                                      0298
*     GPR02P,                                                      0298
*     R3,                                                          0298
*     GPR12P) RSTD;                 /*                       @Z40DQKC*/
*   LM(GPR02P,GPR12P,UWAUWA);       /* RESTORE REGISTERS /*@Z40DQKC  */
         L     @08,CHKUWA(,GPR01P)                                 0299
         LM    GPR02P,GPR12P,UWAUWA(@08)                           0299
*   R3=CHKPDE;                      /* GET PTR TO PDE /*@Z40DQKC     */
         L     R3,CHKPDE(,GPR01P)                                  0300
*   RFY                                                            0301
*    (GPR01P,                                                      0301
*     GPR02P,                                                      0301
*     GPR12P) UNRSTD;               /*                       @Z40DQKC*/
*   CALL ICONVERT;                  /* COVERT EBCDIC TO BINARY       */
         BAL   @14,ICONVERT                                        0302
*   IF R3<=TWO55                    /* MAXIMUM LINE NUMBER IS 255    */
*       &R3>=ONE                    /* MINIMUM LINE NUMBER IS 1      */
*     THEN                          /* NUMBER IS VALID               */
         CH    R3,TWO55                                            0303
         BH    @RF00303                                            0303
         CH    R3,ONE                                              0303
         BL    @RF00303                                            0303
*     DO;                                                          0304
*       LINVALUE=R3;                /* STORE THE LINE VALUE          */
         STH   R3,LINVALUE                                         0305
*       R15=0;                      /* INDICATE LINE NUMBER IS VALID */
         SLR   R15,R15                                             0306
*       RETURN;                     /* RETURN TO IKJPARS             */
@EL00003 DS    0H                                                  0307
@EF00003 DS    0H                                                  0307
@ER00003 L     @14,12(,@13)                                        0307
         LM    @00,@12,20(@13)                                     0307
         BR    @14                                                 0307
*     END;                                                         0308
*   R15=4;                          /* LINE NUMBER IS INVALID,PROMPT */
@RF00303 LA    R15,4                                               0309
*   RETURN;                         /* RETURN TO IKJPARS             */
         B     @EL00003                                            0310
*   END LINNOCHK;                   /* END LINE NUMBER PROCEDURE     */
*SECNOCHK:                                                         0312
*                                                                  0312
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS VALIDITY CHECKING ROUTINE IS ENTERED BY IKJPARS WHENEVER */
*   /* THE TERMINAL USER SPECIFIES THE 'SECONDS' KEYWORD ON THE      */
*   /* TERMINAL COMMAND. THE VALUE MUST BE A NUMBER BETWEEN 10 AND   */
*   /* 2550.IF NOT A RETURN CODE OF 4 IS RETURNED TO IKJPARS         */
*   /* SPECIFYING THAT THE INPUT IS INVALID. IIKJPARS THEN ISSUES A  */
*   /* 'PROMPT' MESSAGE AND WAITS FOR VALID INPUT. IF THE NUMBER IS A*/
*   /* VALID ONE, A RETURN CODE OF 0 IS SENT TO IKJPARS AND          */
*   /* PROCESSING OF OTHER OPERANDS CONTINUE.                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0312
*   PROCEDURE                       /* REGISTER 1 POINTS TO A 2-WORD */
*                                                                  0312
*   /*****************************************************************/
*   /*                                                               */
*   /* PARAMETER LIST.1. PDE PTR, 2. SAVE AREA PTR                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0312
*       OPTIONS(DONTSAVE(15),       /* DONT SAVE REGISTER 15         */
*       NOSAVEAREA);                /* OPTION GET NO SAVEAREA        */
SECNOCHK ST    @14,12(,@13)                                        0312
         STM   @00,@12,20(@13)                                     0312
*   RFY                                                            0313
*    (GPR01P,                                                      0313
*     GPR02P,                                                      0313
*     R3,                                                          0313
*     GPR12P) RSTD;                 /*                       @Z40DQKC*/
*   LM(GPR02P,GPR12P,UWAUWA);       /* RESTORE REGISTERS /*@Z40DQKC  */
         L     @08,CHKUWA(,GPR01P)                                 0314
         LM    GPR02P,GPR12P,UWAUWA(@08)                           0314
*   R3=CHKPDE;                      /* GET PTR TO PDE /*@Z40DQKC     */
         L     R3,CHKPDE(,GPR01P)                                  0315
*   RFY                                                            0316
*    (GPR01P,                                                      0316
*     GPR02P,                                                      0316
*     GPR12P) UNRSTD;               /*                       @Z40DQKC*/
*   CALL ICONVERT;                  /* CONVERT INPUT TO BINARY DIGITS*/
         BAL   @14,ICONVERT                                        0317
*   IF R3<=TWO550                   /* MAXIMUM SECONDS IS 2550       */
*       &R3>=TEN                    /* MINIMUM SECONDS IS 10         */
*     THEN                          /* IS THE NUMBER VALID           */
         CH    R3,TWO550                                           0318
         BH    @RF00318                                            0318
         CH    R3,TEN                                              0318
         BL    @RF00318                                            0318
*     DO;                           /* NUMBER IS VALID               */
*       SECVALUE=R3;                /* STORE THE NUMBER              */
         STH   R3,SECVALUE                                         0320
*       R15=0;                      /* INDICAT THAT THE NUMBER IS  0321
*                                      VALID                         */
         SLR   R15,R15                                             0321
*       RETURN;                     /* RETURN TO IKJPARS             */
@EL00004 DS    0H                                                  0322
@EF00004 DS    0H                                                  0322
@ER00004 L     @14,12(,@13)                                        0322
         LM    @00,@12,20(@13)                                     0322
         BR    @14                                                 0322
*     END;                          /* END TEST FOR INVALID NUMBER   */
*   R15=4;                          /* ELSE THE NUMBER IS INVALID    */
@RF00318 LA    R15,4                                               0324
*   RETURN;                         /* RETURN TO IKJPARS             */
         B     @EL00004                                            0325
*   END SECNOCHK;                   /* END SECONDS CHECK ROUTINE     */
*LINSZCHK:                                                         0327
*                                                                  0327
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS VALIDITY CHECKING ROUTINE IS ENTERED BY IKJPARS WHENEVER */
*   /* THE TERMINAL USER SPECIFIES THE 'LINESIZE' KEYWORD ON THE     */
*   /* TERMINAL COMMAND. THE VALUE MUST BE A NUMBER BETWEEN 1 AND    */
*   /* 255.IF NOT A RETURN CODE OF 4 IS RETURNED TO IKJPARS          */
*   /* SPECIFYING THAT THE INPUT IS INVALID. IKJPARS THEN ISSUES A   */
*   /* 'PROMPT' MESSAGE AND WAITS FOR VALID INPUT. IF THE NUMBER IS A*/
*   /* VALID ONE, A RETURN CODE OF 0 IS SENT TO IKJPARS AND          */
*   /* PROCESSING OF OTHER OPERANDS CONTINUE.                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0327
*   PROCEDURE                       /* REGISTER 1 POINTS TO A 2-WORD */
*                                                                  0327
*   /*****************************************************************/
*   /*                                                               */
*   /* PARAMETER LIST.1. PDE PTR, 2. SAVE AREA PTR                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0327
*       OPTIONS(NOSAVEAREA,DONTSAVE(15));/* DONT SAVE REGISTER 15    */
LINSZCHK ST    @14,12(,@13)                                        0327
         STM   @00,@12,20(@13)                                     0327
*   RFY                                                            0328
*    (GPR01P,                                                      0328
*     GPR02P,                                                      0328
*     R3,                                                          0328
*     GPR12P) RSTD;                 /*                       @Z40DQKC*/
*   LM(GPR02P,GPR12P,UWAUWA);       /* RESTORE REGISTERS /*@Z40DQKC  */
         L     @08,CHKUWA(,GPR01P)                                 0329
         LM    GPR02P,GPR12P,UWAUWA(@08)                           0329
*   R3=CHKPDE;                      /* GET PTR TO PDE /*@Z40DQKC     */
         L     R3,CHKPDE(,GPR01P)                                  0330
*   RFY                                                            0331
*    (GPR01P,                                                      0331
*     GPR02P,                                                      0331
*     GPR12P) UNRSTD;               /*                       @Z40DQKC*/
*   CALL ICONVERT;                  /* CONVERT INPUT TO BINARY DIGITS*/
         BAL   @14,ICONVERT                                        0332
*   IF R3<=TWO55                    /* MAXIMUM NUMBER IS 255         */
*       &R3>=ONE                    /* MINIMUM NUMBER IS 1           */
*     THEN                          /* IS THE NUMBER VALID           */
         CH    R3,TWO55                                            0333
         BH    @RF00333                                            0333
         CH    R3,ONE                                              0333
         BL    @RF00333                                            0333
*     DO;                           /* NUMBER IS VALID               */
*       SIZVALUE=R3;                /* STORE THE NUMBER              */
         ST    R3,SIZVALUE                                         0335
*       R15=0;                      /* INDICATE THE NUMBER IS VALID  */
         SLR   R15,R15                                             0336
*       RETURN;                     /* RETURN TO IKJPARS             */
@EL00005 DS    0H                                                  0337
@EF00005 DS    0H                                                  0337
@ER00005 L     @14,12(,@13)                                        0337
         LM    @00,@12,20(@13)                                     0337
         BR    @14                                                 0337
*     END;                          /* END CHECK FOR VALID LINESIZE  */
*   R15=4;                          /* NUMBER IS INVALID,PROMPT USER */
@RF00333 LA    R15,4                                               0339
*   RETURN;                         /* RETURN TO IKJPARS             */
         B     @EL00005                                            0340
*   END LINSZCHK;                   /* END LINE SIZE CHECK ROUTINE   */
*SCNCK1:                                                           0342
*                                                                  0342
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS VALIDITY CHECKING ROUTINE IS ENTERED BY IKJPARS WHENEVER */
*   /* THE TERMINAL USER SPECIFIES THE 'SCREEN' KEYWORD ON THE       */
*   /* TERMINAL COMMAND.THIS CHECKS NUMBER OF ROWS WHICH MUST BE A   */
*   /* NUMBER BETWEEN 1 AND 255.IF NOT, A RETURN CODE OF 4 IS        */
*   /* RETURNED TO IKJPARS SPECIFYING THAT THE INPUT IS INVALID.     */
*   /* IKJPARS THEN ISSUES A 'PROMPT' MESSAGE AND WAITS FOR VALID    */
*   /* INPUT. IF THE NUMBER IS A VALID ONE, A RETURN CODE OF 0 IS    */
*   /* SENT TO IKJPARS AND PROCESSING OF OTHER OPERANDS CONTINUE.    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0342
*   PROCEDURE                       /* REGISTER 1 POINTS TO A 2-WORD */
*                                                                  0342
*   /*****************************************************************/
*   /*                                                               */
*   /* PARAMETER LIST.1. PDE PTR, 2. SAVE AREA PTR                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0342
*       OPTIONS(NOSAVEAREA,DONTSAVE(15));/* OPTION- DONT SAVE      0342
*                                      REGISTER 15                   */
SCNCK1   ST    @14,12(,@13)                                        0342
         STM   @00,@12,20(@13)                                     0342
*   DCL                                                            0343
*     SCNCK1SA(18) FIXED(31);       /* LOCAL SAVEAREA                */
*   RFY                                                            0344
*    (GPR01P,                                                      0344
*     GPR02P,                                                      0344
*     R3,                                                          0344
*     GPR12P) RSTD;                 /*                       @Z40DQKC*/
*   LM(GPR02P,GPR12P,UWAUWA);       /* RESTORE REGISTERS     @Z40DQKC*/
         L     @08,CHKUWA(,GPR01P)                                 0345
         LM    GPR02P,GPR12P,UWAUWA(@08)                           0345
*   SCNCK1SA(2)=GPR13P;             /* FORWARD CHAIN SAVEAREAS       */
         ST    GPR13P,SCNCK1SA+4                                   0346
*   GPR13P=ADDR(SCNCK1SA);          /* R13 -> NEW SAVEAREA           */
         LA    GPR13P,SCNCK1SA                                     0347
*   R3=CHKPDE;                      /* GET PTR TO PDE        @Z40DQKC*/
         L     R3,CHKPDE(,GPR01P)                                  0348
*   RFY                                                            0349
*    (GPR01P,                                                      0349
*     GPR02P,                                                      0349
*     GPR12P) UNRSTD;               /*                       @Z40DQKC*/
*   CALL ICONVERT;                  /* CONVERT INPUT TO BINARY DIGITS*/
         BAL   @14,ICONVERT                                        0350
*   IF R3>=ONE                      /* MINIMUM NUMBER IS 1           */
*       &R3<=TWO55                  /* MAXIMUM IS 255                */
*     THEN                          /* IS THE NUMBER VALID           */
         CH    R3,ONE                                              0351
         BL    @RF00351                                            0351
         CH    R3,TWO55                                            0351
         BH    @RF00351                                            0351
*     DO;                                                          0352
*       SIZEVAL1=R3;                /* STORE THE VALUE               */
         STH   R3,SIZEVAL1                                         0353
*       R15=0;                      /* INDICATE THE NUMBER IS VALID  */
         SLR   R15,R15                                             0354
*       GPR13P=SCNCK1SA(2);         /* GET PASSED SA PTR IN R13      */
         L     GPR13P,SCNCK1SA+4                                   0355
*       RETURN;                     /* RETURN TO IKJPARS             */
@EL00006 DS    0H                                                  0356
@EF00006 DS    0H                                                  0356
@ER00006 L     @14,12(,@13)                                        0356
         LM    @00,@12,20(@13)                                     0356
         BR    @14                                                 0356
*     END;                          /* END CHECK FOR VALID NUMBER    */
*   SEGMENT=ADDR(MSG9);             /* GET ERROR MESSAGE POINTER     */
@RF00351 L     @12,@CV01896                                        0358
         LA    @12,MSG9(,@12)                                      0358
         ST    @12,SEGMENT                                         0358
*   LEVEL2P=NONEXTLM;               /* INDICATE NO NEXT LEVEL MESSAGE*/
         L     @12,NONEXTLM                                        0359
         ST    @12,LEVEL2P                                         0359
*   CALL PUT2MSG;                   /* GO TO ISSUE THE ERROR MESSAGE */
         BAL   @14,PUT2MSG                                         0360
*   R15=8;                          /* NUMBER IS INVALID,PROMPT      */
         LA    R15,8                                               0361
*   GPR13P=SCNCK1SA(2);             /* GET PASSED SA PTR IN R13      */
         L     GPR13P,SCNCK1SA+4                                   0362
*   RETURN;                         /* RETURN TO IKJPARS             */
         B     @EL00006                                            0363
*   END SCNCK1;                     /* END CHECK FOR VALID ROWS    0364
*                                      NUMBER                        */
*SCNCK2:                                                           0365
*                                                                  0365
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS VALIDITY CHECKING ROUTINE IS ENTERED BY IKJPARS WHENEVER */
*   /* THE TERMINAL USER SPECIFIES THE 'SCRSIZE' KEYWORD ON THE      */
*   /* TERMINAL COMMAND.THIS CHECKS LENGTH OF A ROW WHICH MUST BE A  */
*   /* NUMBER BETWEEN 1 AND 255.IF NOT, A RETURN CODE OF 8 IS        */
*   /* RETURNED TO IKJPARS SPECIFYING THAT THE INPUT IS INVALID.     */
*   /* IKJPARS THEN ISSUES A 'PROMPT' MESSAGE AND WAITS FOR VALID    */
*   /* INPUT. IF THE NUMBER IS A VALID ONE, A RETURN CODE OF 0 IS    */
*   /* SENT TO IKJPARS AND PROCESSING OF OTHER OPERANDS CONTINUE.    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0365
*   PROCEDURE                       /* REGISTER 1 POINTS TO A 2-WORD */
*                                                                  0365
*   /*****************************************************************/
*   /*                                                               */
*   /* PARAMETER LIST.1. PDE PTR, 2. SAVE AREA PTR                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0365
*       OPTIONS(NOSAVEAREA,DONTSAVE(15));/* OPTION- DONT SAVE      0365
*                                      REGISTER 15                   */
SCNCK2   ST    @14,12(,@13)                                        0365
         STM   @00,@12,20(@13)                                     0365
*   DCL                                                            0366
*     SCNCK2SA(18) FIXED(31);       /* LOCAL SAVE AREA               */
*   RFY                                                            0367
*    (GPR01P,                                                      0367
*     GPR02P,                                                      0367
*     R3,                                                          0367
*     GPR12P) RSTD;                 /*                       @Z40DQKC*/
*   LM(GPR02P,GPR12P,UWAUWA);       /* RESTORE REGISTERS     @Z40DQKC*/
         L     @08,CHKUWA(,GPR01P)                                 0368
         LM    GPR02P,GPR12P,UWAUWA(@08)                           0368
*   SCNCK2SA(2)=GPR13P;             /* FORWARD CHAIN SAVE AREA       */
         ST    GPR13P,SCNCK2SA+4                                   0369
*   GPR13P=ADDR(SCNCK2SA);          /* R13 -> NEW SAVE AREA          */
         LA    GPR13P,SCNCK2SA                                     0370
*   R3=CHKPDE;                      /* GET PTR TO PDE        @Z40DQKC*/
         L     R3,CHKPDE(,GPR01P)                                  0371
*   RFY                                                            0372
*    (GPR01P,                                                      0372
*     GPR02P,                                                      0372
*     GPR12P) UNRSTD;               /*                       @Z40DQKC*/
*   CALL ICONVERT;                  /* CONVERT INPUT TO BINARY DIGITS*/
         BAL   @14,ICONVERT                                        0373
*   IF R3>=ONE                      /* MINIMUM NUMBER IS 1           */
*       &R3<=TWO55                  /* MAXIMUM IS 255                */
*     THEN                          /* IS THE NUMBER VALID           */
         CH    R3,ONE                                              0374
         BL    @RF00374                                            0374
         CH    R3,TWO55                                            0374
         BH    @RF00374                                            0374
*     DO;                                                          0375
*       SIZEVAL2=R3;                /* STORE THE VALUE               */
         STH   R3,SIZEVAL2                                         0376
*       R15=0;                      /* INDICATE THE NUMBER IS VALID  */
         SLR   R15,R15                                             0377
*       GPR13P=SCNCK2SA(2);         /* GET PASSED SA BACK IN R13     */
         L     GPR13P,SCNCK2SA+4                                   0378
*       RETURN;                     /* RETURN TO IKJPARS             */
@EL00007 DS    0H                                                  0379
@EF00007 DS    0H                                                  0379
@ER00007 L     @14,12(,@13)                                        0379
         LM    @00,@12,20(@13)                                     0379
         BR    @14                                                 0379
*     END;                          /* END CHECK FOR VALID NUMBER    */
*   SEGMENT=ADDR(MSG0);             /* GET ERROR MESSAGE POINTER     */
@RF00374 L     @12,@CV01896                                        0381
         LA    @12,MSG0(,@12)                                      0381
         ST    @12,SEGMENT                                         0381
*   LEVEL2P=NONEXTLM;               /* INDICATE NO NEXT LEVEL MESSAGE*/
         L     @12,NONEXTLM                                        0382
         ST    @12,LEVEL2P                                         0382
*   CALL PUT2MSG;                   /* GO TO ISSUE THE ERROR MESSAGE */
         BAL   @14,PUT2MSG                                         0383
*   R15=8;                          /* NUMBER IS INVALID,PROMPT      */
         LA    R15,8                                               0384
*   GPR13P=SCNCK2SA(2);             /* RESTORE SA PASSED TO R13      */
         L     GPR13P,SCNCK2SA+4                                   0385
*   RETURN;                         /* RETURN TO IKJPARS             */
         B     @EL00007                                            0386
*   END SCNCK2;                     /* END CHECK FOR LENGTH OF ROW   */
*ICONVERT:                                                         0388
*                                                                  0388
*   /*****************************************************************/
*   /*                                                               */
*   /* **************INPUT CONVERSION ROUTINE******************** THE*/
*   /* PURPOSE OF THIS PROCEDURE IS TO ACCEPT THE TERMINAL USER'S    */
*   /* INPUT WHICH IS IN EBCDIC AND CONVERT IT TO BINARY FORM. UPON  */
*   /* EXIT FROM THIS ROUTINE, REGISTER 3 WILL CONTAIN THE CONVERTED */
*   /* INPUT.                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0388
*   PROCEDURE                       /* REGISTER 3 HAS PTR TO INPUT   */
*       OPTIONS(DONTSAVE,           /* OPTION- DONT SAVE REGISTERS   */
*       NOSAVEAREA);                /* GET NO SAVE AREA              */
ICONVERT DS    0H                                                  0389
*   RFY                                                            0389
*    (R2,                                                          0389
*     R3,                                                          0389
*     R7) RSTD;                     /* REGISTERS USED IN PROCEDURE   */
*   R7=R14;                         /* SAVE RETURN ADDRESS           */
         LR    R7,R14                                              0390
*   PPDEPTR=R3;                     /* INITIALIZE INPUT POINTER      */
         LR    PPDEPTR,R3                                          0391
*   VALUE3(1:ENTLEN)=INPUTPTR->NUM; /* GET EBCDIC INPUT              */
         LH    @12,ENTLEN(,PPDEPTR)                                0392
         LR    @08,@12                                             0392
         BCTR  @08,0                                               0392
         L     @06,INPUTPTR(,PPDEPTR)                              0392
         EX    @08,@SM02287                                        0392
*   VALUE2='F0F0F0F0'X;             /* ALLIGN ON DOUBLE WORD         */
         MVC   VALUE2(4),@CB02191                                  0393
*   R2=ADDR(VALUE);                 /* GET PTR TO WORKAREA           */
         LA    R2,VALUE                                            0394
*   R3=ADDR(VALUE2)+ENTLEN;         /* GET PTR TO INPUT              */
         LA    R3,VALUE2                                           0395
         ALR   R3,@12                                              0395
*   GENERATE;                                                      0396
*                             /* ISSUE PACK AND CVB INSTRUCTIONS    */
        PACK 0(8,2),0(4,3)       PACK EBCDIC DIGITS                *
        CVB  3,0(2)              CONVERT TO BINARY                 *
        BR   R7                  RETURN TO CALLER
*   END ICONVERT;                                                  0397
@EL00008 DS    0H                                                  0397
@EF00008 DS    0H                                                  0397
@ER00008 BR    @14                                                 0397
*                                                                  0398
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT-                                                          */
*/*          NOCHAR                                                  */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          HANDLE THE NOCHAR KEYWORD                               */
*/*                                                                  */
*/*OPERATION-                                                        */
*/*          FOR THE NOCHAR KEYWORD ISSUE THE STTRAN MACRO TO        */
*/*          OBTAIN THE NAME OF THE TABLE THAT MAY HAVE BEEN         */
*/*          MODIFIED BY CHARACTER PAIRS.RELOAD THE TABLE AND PASS   */
*/*          THE FRESH TABLE BACK TO STTRAN                          */
*/*                                                                  */
*/*CHANGE ACTIVITY-                                                  */
*/*      @Z40DQKC-                                                   */
*/*          NEW SUPPORT FOR OS/VS2 RELEASE 4 TSO/VTAM               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0398
*NOCHAR:                                                           0398
*   PROCEDURE;                                                     0398
NOCHAR   STM   @14,@12,@SA00009                                    0398
*   IF ECTDEFCS=YES                 /* = YES IMPLIES VTAM NOT TCAM   */
*     THEN                                                         0399
         L     @12,ECTPTR                                          0399
         TM    ECTDEFCS(@12),B'10000000'                           0399
         BNO   @RF00399                                            0399
*     DO;                                                          0400
*       RFY                                                        0401
*        (GPR15P) RSTD;                                            0401
*       GEN SETS(STTRANL,TRANAME)   /* GET NAME OF TABLE             */
*           (STTRAN NOCHAR,NAME=TRANAME,MF=(E,STTRANL));           0402
         STTRAN NOCHAR,NAME=TRANAME,MF=(E,STTRANL)
*       RETCODE=GPR15P;             /* SAVE RETURN CODE              */
         ST    GPR15P,RETCODE                                      0403
*       RFY                                                        0404
*        (GPR15P) UNRSTD;                                          0404
*       IF TRANAME='00'X            /* DID STTRAN GIVE A NAME ??     */
*         THEN                                                     0405
         CLI   TRANAME,X'00'                                       0405
         BNE   @RF00405                                            0405
*         RETCODE=32;               /* NO, SET INDICATOR             */
         MVC   RETCODE(4),@CF00074                                 0406
*       IF RETCODE=ZERO             /* STTRAN SUCCESSFUL             */
*         THEN                                                     0407
@RF00405 L     @12,RETCODE                                         0407
         LTR   @12,@12                                             0407
         BNZ   @RF00407                                            0407
*         DO;                                                      0408
*           CALL LOAD;              /* LOAD THE TABLE                */
         BAL   @14,LOAD                                            0409
*           RFY                                                    0410
*            (GPR02P,                                              0410
*             GPR15P) RSTD;                                        0410
*           GPR02P=STTTABP;         /* ADDRESS OF TABLE              */
         L     GPR02P,STTTABP                                      0411
*           GEN SETS(STTRANL)       /* PASS TAB                      */
*               (STTRAN TAB=(2),NAME=TRANAME,MF=(E,STTRANL));      0412
         STTRAN TAB=(2),NAME=TRANAME,MF=(E,STTRANL)
*           RETCODE=GPR15P;         /* SAVE THE RETURN CODE          */
         ST    GPR15P,RETCODE                                      0413
*           RFY                                                    0414
*            (GPR02P,                                              0414
*             GPR15P) UNRSTD;                                      0414
*           IF RETCODE^=ZERO        /* ERROR IN STTRAN               */
*             THEN                                                 0415
         L     @12,RETCODE                                         0415
         LTR   @12,@12                                             0415
         BZ    @RF00415                                            0415
*             STATUS=ERRSTTRN;      /* INDICATE ERROR STATUS         */
         L     @12,ERRSTTRN                                        0416
         ST    @12,STATUS                                          0416
*           DO;                     /* DELETE EP(TRANAME)            */
@RF00415 DS    0H                                                  0418
*             RESPECIFY                                            0418
*              (GPR00P) RESTRICTED;                                0418
*             GPR00P=ADDR(TRANAME); /* ->ENTRY NAME                  */
         LA    GPR00P,TRANAME                                      0419
*             SVC(9);               /* DELETE SVC                    */
         SVC   9                                                   0420
*             RESPECIFY                                            0421
*              (GPR00P) UNRESTRICTED;                              0421
*           END;                    /* DELETE EP(TRANAME)            */
*         END;                                                     0423
*       ELSE                                                       0424
*         IF RETCODE=32 THEN        /* IS DEFAULT TRAN TAB IN EFFECT */
         B     @RC00407                                            0424
@RF00407 CLC   RETCODE(4),@CF00074                                 0424
         BNE   @RF00424                                            0424
*           RETCODE=0;              /* ZERO RETURN CODE FIELD        */
         SLR   @12,@12                                             0425
         ST    @12,RETCODE                                         0425
*         ELSE                                                     0426
*           STATUS=ERRSTTRN;        /* ELSE STTRAN ERROR             */
         B     @RC00424                                            0426
@RF00424 L     @12,ERRSTTRN                                        0426
         ST    @12,STATUS                                          0426
*     END;                                                         0427
*   ELSE                                                           0428
*     STATUS=IGNCHAR;               /* IGNORE NOCHAR KYWD FOR VTAM   */
         B     @RC00399                                            0428
@RF00399 L     @12,IGNCHAR                                         0428
         ST    @12,STATUS                                          0428
*   IF STATUS^=CONTINUE             /* EN ERROR HAS OCCURRED         */
*     THEN                                                         0429
@RC00399 L     @12,STATUS                                          0429
         LTR   @12,@12                                             0429
         BZ    @RF00429                                            0429
*     CALL HANDLERR;                /* SEND AN ERROR MESSAGE         */
         BAL   @14,HANDLERR                                        0430
*   END NOCHAR;                                                    0431
@EL00009 DS    0H                                                  0431
@EF00009 DS    0H                                                  0431
@ER00009 LM    @14,@12,@SA00009                                    0431
         BR    @14                                                 0431
*                                                                  0432
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT-                                                          */
*/*          CHKCHAR                                                 */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          VALIDITY CHECK THE CHARACTER PAIRS FOR STTRAN           */
*/*                                                                  */
*/*OPERATION-                                                        */
*/*          A SAVE AREA IS NEEDED BECAUSE OF THE CALLING OF PARSE   */
*/*                                                                  */
*/*          BUILD A COMMAND BUFFER FROM THE PSTRING AND CALL PARSE  */
*/*          TO PARSE THE PSTRING.CALL STTRAN WITH THE CHARACTERS    */
*/*          THAT WERE FOUND                                         */
*/*                                                                  */
*/*CHANGE ACTIVITY-                                                  */
*/*      @Z40DQKC-                                                   */
*/*          NEW FOR VS2 RELEASE 4 SNA SUPPORT                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0432
*CHKCHAR:                                                          0432
*   PROCEDURE OPTIONS(NOSAVEAREA);                                 0432
CHKCHAR  STM   @14,@12,12(@13)                                     0432
*   RFY                                                            0433
*    (GPR01P,                                                      0433
*     GPR02P,                                                      0433
*     GPR12P,                                                      0433
*     GPR13P) RSTD;                                                0433
*   LM(GPR02P,GPR12P,UWAUWA);       /* RESTORE CALLER OF PARSE REGS  */
         L     @08,CHKUWA(,GPR01P)                                 0434
         LM    GPR02P,GPR12P,UWAUWA(@08)                           0434
*   RFY                                                            0435
*    (GPR02P,                                                      0435
*     GPR12P) UNRSTD;                                              0435
*   GPR13P->UWAF13=ADDR(CHKCHARS);  /* PARSE SA -> CHKCHAR SA        */
         LA    @12,CHKCHARS                                        0436
         ST    @12,UWAF13(,GPR13P)                                 0436
*   ADDR(CHKCHARS)->UWAB13=GPR13P;  /* CHKCHAR SA -> PARSE SA        */
         ST    GPR13P,UWAB13(,@12)                                 0437
*   GPR13P=ADDR(CHKCHARS);          /* POINT TO NEW SAVE AREA        */
         LR    GPR13P,@12                                          0438
*   IF ECTDEFCS=YES                 /* = YES IMPLIES VTAM, NOT TCAM  */
*     THEN                                                         0439
         L     @12,ECTPTR                                          0439
         TM    ECTDEFCS(@12),B'10000000'                           0439
         BNO   @RF00439                                            0439
*     DO;                                                          0440
*       PDEPTR1=CHKPDE;             /* POINTER TO PDE FOR PSTRING    */
         L     @12,CHKPDE(,GPR01P)                                 0441
         ST    @12,PDEPTR1                                         0441
*       PDLPTR1=ZERO;               /* NO PDL YET                    */
         SLR   @08,@08                                             0442
         ST    @08,PDLPTR1                                         0442
*       RFY                                                        0443
*        (GPR01P,                                                  0443
*         GPR13P) UNRSTD;                                          0443
*       PAIRLEN=PDELEN+4;           /* LENGTH OF COMMAND BUFFER      */
         LH    @06,PDELEN(,@12)                                    0444
         LA    @05,4(,@06)                                         0444
         STH   @05,PAIRLEN                                         0444
*       PAIROFF=ZERO;               /* ZERO OFFSET TO TEXT           */
         STH   @08,PAIROFF                                         0445
*       IF PDELEN<=LENGTH(PAIRTEXT) /* COPY PSTRING TO THE BUFFER    */
*         THEN                                                     0446
         C     @06,@CF01290                                        0446
         BH    @RF00446                                            0446
*         PAIRTEXT(1:PDELEN)=PDESTRNG(1:PDELEN);                   0447
         BCTR  @06,0                                               0447
         L     @12,PDESPTR(,@12)                                   0447
         EX    @06,@SM02289                                        0447
*       ELSE                                                       0448
*         PAIRTEXT=PDESTRNG(1:LENGTH(PAIRTEXT));                   0448
         B     @RC00446                                            0448
@RF00446 L     @12,PDEPTR1                                         0448
         L     @12,PDESPTR(,@12)                                   0448
         MVC   PAIRTEXT(256),PDESTRNG(@12)                         0448
*       CALL PARSPAIR;              /* PARSE X'__',X'__' AND PASS TO
*                                      STTRAN                        */
@RC00446 BAL   @14,PARSPAIR                                        0449
*       GEN REFS(PDLPTR1)           /* FREE PDL FOR CHKCHARS         */
*           (IKJRLSA PDLPTR1);                                     0450
         IKJRLSA PDLPTR1
*     END;                                                         0451
*   ELSE                                                           0452
*     STATUS=IGNCHAR;               /* IGNORE CHAR KEYWORD FOR TCAM  */
         B     @RC00439                                            0452
@RF00439 L     @12,IGNCHAR                                         0452
         ST    @12,STATUS                                          0452
*   IF STATUS^=CONTINUE             /* THERE ARE ERRORS              */
*     THEN                                                         0453
@RC00439 L     @12,STATUS                                          0453
         LTR   @12,@12                                             0453
         BZ    @RF00453                                            0453
*     CALL HANDLERR;                /* HANDLE THE ERRORS             */
         BAL   @14,HANDLERR                                        0454
*   RFY                                                            0455
*    (GPR13P) RSTD;                                                0455
@RF00453 DS    0H                                                  0456
*   GPR13P=GPR13P->UWAB13;          /* GET PTR TO PARSE SA           */
         L     GPR13P,UWAB13(,GPR13P)                              0456
*   RFY                                                            0457
*    (GPR13P) UNRSTD;                                              0457
*   RETURN CODE(RETCODE);           /* RETURN TO PARSE               */
         L     @15,RETCODE                                         0458
         L     @14,12(,@13)                                        0458
         LM    @00,@12,20(@13)                                     0458
         BR    @14                                                 0458
*   END CHKCHAR;                                                   0459
*                                                                  0460
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT-                                                          */
*/*          PARSPAIR                                                */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          PARSE THE CHARACTER PAIRS AND PASS THEM TO STTRAN       */
*/*                                                                  */
*/*OPERATION-                                                        */
*/*          USING THE SECOND PPL PARSE A PARI OF CHARACTERS--X'__', */
*/*          X'__'--AND THEN PASS THEM TO STTRAN WHO WILL ADD THEM   */
*/*          TO THE EXISTING TRANSLATE TABLES                        */
*/*                                                                  */
*/*CHANGE ACTIVITY-                                                  */
*/*      @Z40DQKC-                                                   */
*/*          NEW SUPPORT FOR VS2 RELEASE 4 SNA                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0460
*PARSPAIR:                                                         0460
*   PROCEDURE;                                                     0460
PARSPAIR STM   @14,@12,@SA00011                                    0460
*   RFY                                                            0461
*    (GPR15P) RSTD;                                                0461
*   DO;                             /* CALLTSSR                    0462
*                                      EP(IKJPARS)MF(E,PPLWA2)       */
*     RESPECIFY                                                    0463
*       GPR01P RSTD;                                               0463
*     GPR01P=ADDR(PPLWA2);                                         0464
         LA    GPR01P,PPLWA2                                       0464
*     IF CVTPARS=0 THEN                                            0465
         L     @14,CVTPTR                                          0465
         L     @14,CVTPARS(,@14)                                   0465
         LTR   @14,@14                                             0465
         BNZ   @RF00465                                            0465
*       GEN(LINK EP=IKJPARS);                                      0466
         LINK EP=IKJPARS
*     ELSE                                                         0467
*       CALL CVTPARS;                                              0467
         B     @RC00465                                            0467
@RF00465 L     @12,CVTPTR                                          0467
         L     @15,CVTPARS(,@12)                                   0467
         BALR  @14,@15                                             0467
*     RESPECIFY                                                    0468
*       GPR01P UNRSTD;                                             0468
@RC00465 DS    0H                                                  0469
*   END;                                                           0469
*   RETCODE=GPR15P;                 /* SAVE PARSE RETURN CODE        */
         ST    GPR15P,RETCODE                                      0470
*   RFY                                                            0471
*    (GPR15P) UNRSTD;                                              0471
*   IF RETCODE=ZERO                 /* SUCCESSFUL PARSE              */
*     THEN                                                         0472
         L     @12,RETCODE                                         0472
         LTR   @12,@12                                             0472
         BNZ   @RF00472                                            0472
*     DO;                                                          0473
*       RFY                                                        0474
*        (GPR02P) RSTD;                                            0474
*       GPR02P=PDLPTR1;             /* ADDR OF PDL                   */
         L     GPR02P,PDLPTR1                                      0475
*       GEN REFS(GPR02P)            /* ADDRESS THE PDL               */
*           (USING IKJPDL2,GPR02P);                                0476
         USING IKJPDL2,GPR02P
*       #PAIRS=#PAIRS+1;            /* INCREMENT PAIRS COUNTER       */
         LA    @12,1                                               0477
         AL    @12,#PAIRS                                          0477
         ST    @12,#PAIRS                                          0477
*       RFY                                                        0478
*         PDE BASED(ADDR($EXTERNL));                               0478
*       PAIRS(#PAIRS,1)=            /* GET EXTERNAL REPRESENTATION   */
*           PDESTRNG(ONE);                                         0479
         ALR   @12,@12                                             0479
         LA    @08,PAIRS-2(@12)                                    0479
         LH    @06,ONE                                             0479
         LA    @05,$EXTERNL                                        0479
         L     @05,PDESPTR(,@05)                                   0479
         ALR   @05,@06                                             0479
         BCTR  @05,0                                               0479
         MVC   0(1,@08),PDESTRNG(@05)                              0479
*       RFY                                                        0480
*         PDE BASED(ADDR($INTERNL));                               0480
*       PAIRS(#PAIRS,2)=            /* GET INTERNAL REPRESENTATION   */
*           PDESTRNG(ONE);                                         0481
         LA    @08,PAIRS-1(@12)                                    0481
         LA    @12,$INTERNL                                        0481
         L     @12,PDESPTR(,@12)                                   0481
         ALR   @12,@06                                             0481
         BCTR  @12,0                                               0481
         MVC   0(1,@08),PDESTRNG(@12)                              0481
*       RFY                                                        0482
*         PDE BASED(PDEPTR1);                                      0482
*       RFY                                                        0483
*        (GPR02P) UNRSTD;                                          0483
*     END;                                                         0484
*   ELSE                                                           0485
*     IF RETCODE>FOUR               /* UNSUCCESSFUL PARSE            */
*       THEN                                                       0485
         B     @RC00472                                            0485
@RF00472 L     @12,RETCODE                                         0485
         C     @12,@CF00049                                        0485
         BNH   @RF00485                                            0485
*       STATUS=ADDR(ERRCODE);       /* SET PARSE ERROR MESSAGE       */
         L     @12,@CV01896                                        0486
         LA    @12,ERRCODE(,@12)                                   0486
         ST    @12,STATUS                                          0486
*   END PARSPAIR;                                                  0487
@EL00011 DS    0H                                                  0487
@EF00011 DS    0H                                                  0487
@ER00011 LM    @14,@12,@SA00011                                    0487
         BR    @14                                                 0487
*                                                                  0488
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT-                                                          */
*/*          CHKACHAR                                                */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          GET THE HEX REPRESENTATION FOR THE CHAR                 */
*/*                                                                  */
*/*OPERATION-                                                        */
*/*          FOR A HEX REPRESENTATION CONVERT FROM EBCDIC TO HEX.IN  */
*/*          THE CHAR AND HEX CASE ENSURE THAT THE CHARACTER IS NOT  */
*/*          AN UPPER CASE LETTER                                    */
*/*                                                                  */
*/*          TO ASSURE THAT THE USER CAN GET OUT OF TRANSLATE MODE   */
*/*          THE USER WILL NOT BE ALLOWED TO TRANSLATE THE UPPER     */
*/*          CASE LETTERS                                            */
*/*                                                                  */
*/*CHANGE ACTIVITY-                                                  */
*/*      @Z40DQKC-                                                   */
*/*          NEW SUPPORT FOR VS2 RELEASE 4 SNA                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0488
*CHKACHAR:                                                         0488
*   PROCEDURE OPTIONS(NOSAVEAREA);                                 0488
CHKACHAR STM   @14,@12,12(@13)                                     0488
*   RFY                                                            0489
*    (GPR01P,                                                      0489
*     GPR02P,                                                      0489
*     GPR12P) RSTD;                                                0489
*   LM(GPR02P,GPR12P,UWAUWA);       /* GET CHKCHARS REGS             */
         L     @08,CHKUWA(,GPR01P)                                 0490
         LM    GPR02P,GPR12P,UWAUWA(@08)                           0490
*   PDEPTR1=CHKPDE;                 /* GET PDE FOR X'__' OR C'_'     */
         L     @08,CHKPDE(,GPR01P)                                 0491
         ST    @08,PDEPTR1                                         0491
*   RFY                                                            0492
*    (GPR01P,                                                      0492
*     GPR02P,                                                      0492
*     GPR12P) UNRSTD;                                              0492
*   HEXTWO=PDESTRNG(1);             /* MOVE ONE CHAR                 */
         MVI   HEXTWO+1,C' '                                       0493
         L     @12,PDESPTR(,@08)                                   0493
         MVC   HEXTWO(1),PDESTRNG(@12)                             0493
*   IF PDETYPE=HEX&                 /* TYPE = X'__'                  */
*       PDELEN=TWO                  /* TWO HEX DIGITS                */
*     THEN                                                         0494
         CLI   PDETYPE(@08),C'X'                                   0494
         BNE   @RF00494                                            0494
         CLC   PDELEN(2,@08),@CH00174                              0494
         BNE   @RF00494                                            0494
*     DO;                                                          0495
*       HEXTWO=PDESTRNG(1:2)×FOLD;  /* FOLD TO UPPER CASE            */
         MVC   HEXTWO(2),PDESTRNG(@12)                             0496
         OC    HEXTWO(2),@CC02117                                  0496
*       TR(HEXTWO,HEXTABLE(1));     /* 'C2'X->'FB'X,'F0'X->'F0'X     */
         TR    HEXTWO(2),HEXTABLE                                  0497
*       IF HEXTWO(1)^=INVHEX&       /* BOTH CHARACTERS ARE VALID     */
*           HEXTWO(2)^=INVHEX THEN                                 0498
         CLI   HEXTWO,X'00'                                        0498
         BE    @RF00498                                            0498
         CLI   HEXTWO+1,X'00'                                      0498
         BE    @RF00498                                            0498
*         DO;                                                      0499
*           PACK(HEXTWO,HEXTWO);    /* 'FBF0'X -> '0B0F'X            */
         PACK  HEXTWO(2),HEXTWO(2)                                 0500
*           SRL(HEXTWO,FOUR);       /* '0B0F'X -> '00B0'X            */
         SLR   @12,@12                                             0501
         ICM   @12,3,HEXTWO                                        0501
         SRL   @12,4                                               0501
         STCM  @12,3,HEXTWO                                        0501
*           SLL(HEXTWO,8);          /* '00B0'X -> 'B000'X ....       */
         SLR   @12,@12                                             0502
         ICM   @12,3,HEXTWO                                        0502
         SLL   @12,8                                               0502
         STCM  @12,3,HEXTWO                                        0502
*         END;                                                     0503
*       ELSE                                                       0504
*         STATUS=INVCHAR;           /* CHAR IS INVALID               */
         B     @RC00498                                            0504
@RF00498 MVC   STATUS(4),@CF00161                                  0504
*     END;                                                         0505
*   ELSE                                                           0506
*     IF PDETYPE^=CHARCHAR×         /* NOT A C'_'                    */
*         PDELEN^=ONE               /* NOT OF LENGTH ONE             */
*       THEN                                                       0506
         B     @RC00494                                            0506
@RF00494 L     @12,PDEPTR1                                         0506
         CLI   PDETYPE(@12),C'C'                                   0506
         BNE   @RT00506                                            0506
         CLC   PDELEN(2,@12),ONE                                   0506
         BE    @RF00506                                            0506
@RT00506 DS    0H                                                  0507
*       STATUS=INVCHAR;             /* INVALID CHARACTER             */
         MVC   STATUS(4),@CF00161                                  0507
*   IF STATUS=CONTINUE              /* THINGS OK SO FAR              */
*     THEN                                                         0508
@RF00506 DS    0H                                                  0508
@RC00494 L     @12,STATUS                                          0508
         LTR   @12,@12                                             0508
         BNZ   @RF00508                                            0508
*     DO;                                                          0509
*       RFY                                                        0510
*        (GPR01P) RSTD;                                            0510
*       GPR01P=ZERO;                /* NULL VALUE                    */
         SLR   GPR01P,GPR01P                                       0511
*       TRT(HEXTWO(1),CHARTABL(1)); /* TEST FOR UPPER CASE           */
         TRT   HEXTWO(1),CHARTABL                                  0512
*       STATUS=GPR01P;              /* ZERO OR UPPER CASE            */
         ST    GPR01P,STATUS                                       0513
*       RFY                                                        0514
*        (GPR01P) UNRSTD;                                          0514
*     END;                                                         0515
*   IF STATUS=CONTINUE              /* EVERYTHING OK SO FAR          */
*     THEN                                                         0516
@RF00508 SLR   @12,@12                                             0516
         C     @12,STATUS                                          0516
         BNE   @RF00516                                            0516
*     DO;                                                          0517
*       RETCODE=ZERO;               /* ZERO RETURN CODE              */
         ST    @12,RETCODE                                         0518
*       PDESTRNG(1)=HEXTWO(1);      /* MOVE CONVERTED CHAR INTO PDE  */
         L     @12,PDEPTR1                                         0519
         L     @12,PDESPTR(,@12)                                   0519
         MVC   PDESTRNG(1,@12),HEXTWO                              0519
*     END;                                                         0520
*   ELSE                                                           0521
*     DO;                           /* INVALID CHARACTER             */
         B     @RC00516                                            0521
@RF00516 DS    0H                                                  0522
*       RETCODE=FOUR;               /* FORCE A PROMPT                */
         MVC   RETCODE(4),@CF00049                                 0522
*       STATUS=CONTINUE;            /* RESET CONTINUE STATUS         */
         SLR   @12,@12                                             0523
         ST    @12,STATUS                                          0523
*     END;                                                         0524
*   RETURN CODE(RETCODE);           /* RETURN TO PARSE               */
@RC00516 L     @15,RETCODE                                         0525
         L     @14,12(,@13)                                        0525
         LM    @00,@12,20(@13)                                     0525
         BR    @14                                                 0525
*   END CHKACHAR;                                                  0526
*                                                                  0527
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT-                                                          */
*/*          CHKTRAN                                                 */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          VERIFY THE NAME OF THE TRANSLATE TABLE                  */
*/*                                                                  */
*/*OPERATION-                                                        */
*/*          A SAVE AREA IS NEEDED BECAUSE OF THE INVOCATION OF      */
*/*          OTHER SEGMENTS                                          */
*/*                                                                  */
*/*          INITIALIZE THE ESTAE ENVIRONMENT THAT WILL INTERCEPT    */
*/*          THE 806 ABEND FOR AN UNKNOWN TABLE NAME.SAVE THE        */
*/*          REGISTERS AND THEN LOAD THE TRANSLATE TABLE.IF THERE    */
*/*          IS NO 806 ABEND THEN ISSUE STTRAN TO PASS THE TABLE TO  */
*/*          VTAM,OTHERWISE REPROMPT FOR A NEW NAME.CANCEL THE       */
*/*          ESTAE ENVIRONMENT.                                      */
*/*                                                                  */
*/*CHANGE ACTIVITY-                                                  */
*/*      @Z40DQKC-                                                   */
*/*          NEW SUPPORT FOR VS2 RELEASE 4 SNA                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0527
*CHKTRAN:                                                          0527
*   PROCEDURE OPTIONS(NOSAVEAREA);                                 0527
CHKTRAN  STM   @14,@12,12(@13)                                     0527
*   RFY                                                            0528
*    (GPR01P,                                                      0528
*     GPR02P,                                                      0528
*     GPR12P,                                                      0528
*     GPR13P) RSTD;                                                0528
*   LM(GPR02P,GPR12P,UWAUWA);       /* RESTORE CALLER OF PARSE REGS  */
         L     @08,CHKUWA(,GPR01P)                                 0529
         LM    GPR02P,GPR12P,UWAUWA(@08)                           0529
*   RFY                                                            0530
*    (GPR02P,                                                      0530
*     GPR12P) UNRSTD;                                              0530
*   GPR13P->UWAF13=ADDR(CHKTRANS);  /* PARSE SA -> CHKTRAN SA        */
         LA    @12,CHKTRANS                                        0531
         ST    @12,UWAF13(,GPR13P)                                 0531
*   ADDR(CHKTRANS)->UWAB13=GPR13P;  /* CHKTRAN SA -> PARSE SA        */
         ST    GPR13P,UWAB13(,@12)                                 0532
*   GPR13P=ADDR(CHKTRANS);          /* POINT TO NEW SAVE AREA        */
         LR    GPR13P,@12                                          0533
*   IF ECTDEFCS=YES                 /* = YES IMPLIES VTAM NOT TCAM   */
*     THEN                                                         0534
         L     @12,ECTPTR                                          0534
         TM    ECTDEFCS(@12),B'10000000'                           0534
         BNO   @RF00534                                            0534
*     DO;                                                          0535
*       PDEPTR1=CHKPDE;             /* POINTER TO PDE FOR PSTRING    */
         L     @12,CHKPDE(,GPR01P)                                 0536
         ST    @12,PDEPTR1                                         0536
*       RFY                                                        0537
*        (GPR01P,                                                  0537
*         GPR13P) UNRSTD;                                          0537
*       TRANAME=BLANK;              /* BLANK OUT THE NAME            */
         MVI   TRANAME+1,C' '                                      0538
         MVC   TRANAME+2(6),TRANAME+1                              0538
         MVI   TRANAME,C' '                                        0538
*       TRANAME(1:PDELEN)=PDESTRNG(1:PDELEN);/* COPY TAB NAME        */
         LH    @08,PDELEN(,@12)                                    0539
         BCTR  @08,0                                               0539
         L     @12,PDESPTR(,@12)                                   0539
         EX    @08,@SM02291                                        0539
*       CALL SETESTAE;              /* SETUP ESTAE ENVIRONMENT       */
         BAL   @14,SETESTAE                                        0540
*       CALL LOAD;                  /* LOAD TRANSLATE TABLE          */
         BAL   @14,LOAD                                            0541
*       IF STATUS=CONTINUE&         /* NO ERRORS                     */
*           ESTA806=NO              /* NO 806 ABEND ON LOAD          */
*         THEN                                                     0542
         L     @12,STATUS                                          0542
         LTR   @12,@12                                             0542
         BNZ   @RF00542                                            0542
         LA    @12,$ESTAPRM                                        0542
         TM    ESTA806(@12),B'10000000'                            0542
         BNZ   @RF00542                                            0542
*         DO;                                                      0543
*           COOL=NO;                /* INIT FLAG                     */
         NI    COOL,B'01111111'                                    0544
*           TSIZEERR=NO;            /* INIT FLAG                     */
         NI    TSIZEERR,B'01111111'                                0545
*           TCHARERR=NO;            /* INIT FLAG                     */
         NI    TCHARERR,B'01111111'                                0546
*           MATCH=NO;               /* INIT FLAG                     */
         NI    MATCH,B'01111111'                                   0547
*           LLEPTR=TCBLLS;          /* INIT LOAD LIST ELE PTR        */
         L     @12,CVTPTR                                          0548
         L     @12,CVTTCBP(,@12)                                   0548
         L     @12,TCBPTR(,@12)                                    0548
         L     LLEPTR,TCBLLS(,@12)                                 0548
*           DO WHILE LLEPTR^=0&MATCH=NO;                           0549
         B     @DE00549                                            0549
@DL00549 DS    0H                                                  0550
*             CDENTPTR=LLECDPT;     /* GET ADDR OF CDE               */
         L     CDENTPTR,LLECDPT(,LLEPTR)                           0550
*             ENDCHAN=NO;                                          0551
         NI    ENDCHAN,B'01111111'                                 0551
*             DO WHILE CDNAME^=TRANAME/* FIND CORRECT DCE            */
*                   &ENDCHAN=NO;                                   0552
         B     @DE00552                                            0552
@DL00552 DS    0H                                                  0553
*               IF CDMIN=NO         /* IF NOT A MINOR NAME           */
*                 THEN              /* AND NO MATCH ON NAME          */
         TM    CDMIN(CDENTPTR),B'00000100'                         0553
         BNZ   @RF00553                                            0553
*                 CDENTPTR=CDCHAIN; /* GET NEXT CDE ON CHAIN         */
         L     CDENTPTR,CDCHAIN(,CDENTPTR)                         0554
*               ELSE                /* ELSE FIND MAJOR NAME          */
*                 CDENTPTR=CDXLMJP; /* RESET CDE BASE                */
         B     @RC00553                                            0555
@RF00553 L     CDENTPTR,CDXLMJP(,CDENTPTR)                         0555
*               IF CDENTPTR=0       /* REACH END OF THIS CHAIN ?     */
*                 THEN                                             0556
@RC00553 LTR   CDENTPTR,CDENTPTR                                   0556
         BNZ   @RF00556                                            0556
*                 ENDCHAN=YES;      /* YES,GOTO NEXT LLE             */
         OI    ENDCHAN,B'10000000'                                 0557
*             END;                  /* END SEARCH                    */
@RF00556 DS    0H                                                  0558
@DE00552 CLC   CDNAME(8,CDENTPTR),TRANAME                          0558
         BE    @DC00552                                            0558
         TM    ENDCHAN,B'10000000'                                 0558
         BZ    @DL00552                                            0558
@DC00552 DS    0H                                                  0559
*             IF ENDCHAN=NO         /* WAS TABLE NAME FOUND ?        */
*               THEN                                               0559
         TM    ENDCHAN,B'10000000'                                 0559
         BNZ   @RF00559                                            0559
*               DO;                 /* YES, EXTENT LIST CHECK NEXT   */
*                 XTLPTR=CDXLMJP;   /* CDE -> EXTENT LIST            */
         L     XTLPTR,CDXLMJP(,CDENTPTR)                           0561
*                 MATCH=YES;        /* END DO LOOP                   */
         OI    MATCH,B'10000000'                                   0562
*                 IF XTLMSBLN<516   /* IS TABLE TO SMALL             */
*                   THEN                                           0563
         CLC   XTLMSBLN(3,XTLPTR),@CF02224+1                       0563
         BNL   @RF00563                                            0563
*                   TSIZEERR=YES;   /* INDICATE ERRONEOUS TABLE SIZE */
         OI    TSIZEERR,B'10000000'                                0564
*                 ELSE              /* ELSE, VALIDITY CHECK FOR UPPER*/
*                   DO;             /* CASE LETTERS AND NUMBERS      */
*                                                                  0565
         B     @RC00563                                            0565
@RF00563 DS    0H                                                  0566
*                     /***********************************************/
*                     /*                                             */
*                     /* NOTICE THAT PLS (IN HIS INFINATE WISDOM)    */
*                     /* CAN'T FIGURE OUT WHERE 'C1'X IS IN A 256    */
*                     /* BYTE TABLE... THEREFORE, 'C2'X IS REALLY    */
*                     /* 'C1'X INTO THE TABLE... ECT. ????????       */
*                     /* VS43255                                     */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0566
*/*    FIRST VALIDITY CHECK THE SECOND TABLE...  NO SPECIFIC REASON
*      JUST THAT THIS ONE WAS DECLARED FIRST....                     */
*                                                                  0566
*                     IF LOADTAB('C2'X:'CA'X)=TESTTAB(1:9)&LOADTAB('D2'
*                         :'DA'X)=TESTTAB(10:18)&LOADTAB('E3'X:'EA'X)=
*                         TESTTAB(19:26)&LOADTAB('F1'X:'FA'X)=TESTTAB(
*                         27:LENGTH(TESTTAB)) THEN/* EVERYTHING IS 0566
*                                      COOL IN THE 2ND               */
         L     @12,STTTABP                                         0566
         L     @08,COMPTABP(,@12)                                  0566
         CLC   LOADTAB+193(9,@08),TESTTAB                          0566
         BNE   @RF00566                                            0566
         CLC   LOADTAB+209(9,@08),TESTTAB+9                        0566
         BNE   @RF00566                                            0566
         CLC   LOADTAB+226(8,@08),TESTTAB+18                       0566
         BNE   @RF00566                                            0566
         CLC   LOADTAB+240(10,@08),TESTTAB+26                      0566
         BNE   @RF00566                                            0566
*                       DO;         /* TABLE                         */
*                                                                  0567
*                         /*******************************************/
*                         /*                                         */
*                         /* NOW VALIDITY CHECK THE FIRST TABLE      */
*                         /*                                         */
*                         /*******************************************/
*                                                                  0568
*                         IF LOADTAB2('C2'X:'CA'X)=TESTTAB(1:9)&   0568
*                             LOADTAB2('D2'X:'DA'X)=TESTTAB(10:18)&
*                             LOADTAB2('E3'X:'EA'X)=TESTTAB(19:26)&
*                             LOADTAB2('F1'X:'FA'X)=TESTTAB(27:LENGTH(
*                             TESTTAB)) THEN                       0568
         CLC   LOADTAB2+193(9,@12),TESTTAB                         0568
         BNE   @RF00568                                            0568
         CLC   LOADTAB2+209(9,@12),TESTTAB+9                       0568
         BNE   @RF00568                                            0568
         CLC   LOADTAB2+226(8,@12),TESTTAB+18                      0568
         BNE   @RF00568                                            0568
         CLC   LOADTAB2+240(10,@12),TESTTAB+26                     0568
         BNE   @RF00568                                            0568
*                           COOL=YES;/* THIS IS A GOOD TABLE VS43301 */
         OI    COOL,B'10000000'                                    0569
*                         ELSE                                     0570
*                           TCHARERR=YES;/* ERROR FOUND IN TABLE     */
         B     @RC00568                                            0570
@RF00568 OI    TCHARERR,B'10000000'                                0570
*                       END;                                       0571
*                     ELSE                                         0572
*                       TCHARERR=YES;/* ERROR FOUND IN TABLE         */
         B     @RC00566                                            0572
@RF00566 OI    TCHARERR,B'10000000'                                0572
*                   END;                                           0573
*               END;                                               0574
*             ELSE                                                 0575
*               LLEPTR=LLECHN;      /* PICK UP NEXT LL ELEMENT       */
         B     @RC00559                                            0575
@RF00559 L     LLEPTR,LLECHN(,LLEPTR)                              0575
*           END;                                                   0576
@RC00559 DS    0H                                                  0576
@DE00549 LTR   LLEPTR,LLEPTR                                       0576
         BZ    @DC00549                                            0576
         TM    MATCH,B'10000000'                                   0576
         BZ    @DL00549                                            0576
@DC00549 DS    0H                                                  0577
*           IF COOL=NO              /* BAD TABLE ?                   */
*             THEN                                                 0577
         TM    COOL,B'10000000'                                    0577
         BNZ   @RF00577                                            0577
*             DO;                                                  0578
*               DO;                 /* DELETE EP(TRANAME)            */
*                 RESPECIFY                                        0580
*                  (GPR00P) RESTRICTED;                            0580
*                 GPR00P=ADDR(TRANAME);/* ->ENTRY NAME               */
         LA    GPR00P,TRANAME                                      0581
*                 SVC(9);           /* DELETE SVC                    */
         SVC   9                                                   0582
*                 RESPECIFY                                        0583
*                  (GPR00P) UNRESTRICTED;                          0583
*               END;                /* DELETE EP(TRANAME) YES, DELETE
*                                      IT AND PUT MSG                */
*               IF TCHARERR=YES     /* CHAR ERROR ?                  */
*                 THEN              /* YES                           */
         TM    TCHARERR,B'10000000'                                0585
         BNO   @RF00585                                            0585
*                 STATUS=BADCHAR;   /* BAD CHAR IN TABLE MSG         */
         L     @12,BADCHAR                                         0586
         ST    @12,STATUS                                          0586
*               IF TSIZEERR=YES     /* SIZE INCORRECT ?              */
*                 THEN              /* YES                           */
@RF00585 TM    TSIZEERR,B'10000000'                                0587
         BNO   @RF00587                                            0587
*                 STATUS=BADSIZE;   /* TABLE SIZE TOO SMALL MESSAGE  */
         L     @12,BADSIZE                                         0588
         ST    @12,STATUS                                          0588
*             END;                                                 0589
@RF00587 DS    0H                                                  0590
*         END;                                                     0590
@RF00577 DS    0H                                                  0591
*       IF STATUS=CONTINUE&         /* NO ERRORS                     */
*           ESTA806=NO              /* NO 806 ON TABLE LOADING       */
*         THEN                                                     0591
@RF00542 L     @12,STATUS                                          0591
         LTR   @12,@12                                             0591
         BNZ   @RF00591                                            0591
         LA    @12,$ESTAPRM                                        0591
         TM    ESTA806(@12),B'10000000'                            0591
         BNZ   @RF00591                                            0591
*         DO;                                                      0592
*           RFY                                                    0593
*            (GPR02P,                                              0593
*             GPR15P) RSTD;                                        0593
*           GPR02P=STTTABP;         /* POINTER TO TABLE              */
         L     GPR02P,STTTABP                                      0594
*           GEN SETS(STTRANL)       /* PASS TABLE TO VTAM            */
*               (STTRAN TAB=(2),NAME=TRANAME,MF=(E,STTRANL));      0595
         STTRAN TAB=(2),NAME=TRANAME,MF=(E,STTRANL)
*           RETCODE=GPR15P;         /* STTRAN RETURN CODE            */
         ST    GPR15P,RETCODE                                      0596
*           RFY                                                    0597
*            (GPR02P,                                              0597
*             GPR15P) UNRSTD;                                      0597
*           IF RETCODE^=ZERO        /* ERROR IN STTRAN               */
*             THEN                                                 0598
         L     @12,RETCODE                                         0598
         LTR   @12,@12                                             0598
         BZ    @RF00598                                            0598
*             STATUS=ERRSTTRN;      /* INDICATE ERROR IN STTRAN      */
         L     @12,ERRSTTRN                                        0599
         ST    @12,STATUS                                          0599
*           DO;                     /* DELETE EP(TRANAME)            */
@RF00598 DS    0H                                                  0601
*             RESPECIFY                                            0601
*              (GPR00P) RESTRICTED;                                0601
*             GPR00P=ADDR(TRANAME); /* ->ENTRY NAME                  */
         LA    GPR00P,TRANAME                                      0602
*             SVC(9);               /* DELETE SVC                    */
         SVC   9                                                   0603
*             RESPECIFY                                            0604
*              (GPR00P) UNRESTRICTED;                              0604
*           END;                    /* DELETE EP(TRANAME)            */
*         END;                                                     0606
*       ELSE                                                       0607
*         IF ESTA806=YES            /* 806 ON TABLE                  */
*           THEN                                                   0607
         B     @RC00591                                            0607
@RF00591 LA    @12,$ESTAPRM                                        0607
         TM    ESTA806(@12),B'10000000'                            0607
         BNO   @RF00607                                            0607
*           RETCODE=FOUR;           /* REPROMPT                      */
         MVC   RETCODE(4),@CF00049                                 0608
*       GEN(ESTAE 0);               /* CANCEL ESTAE                  */
@RF00607 DS    0H                                                  0609
@RC00591 DS    0H                                                  0609
         ESTAE 0
*     END;                                                         0610
*   ELSE                                                           0611
*     STATUS=IGNTRAN;               /* IGNORE TRAN KEYWORD FOR TCAM  */
         B     @RC00534                                            0611
@RF00534 L     @12,IGNTRAN                                         0611
         ST    @12,STATUS                                          0611
*   IF STATUS^=CONTINUE             /* ESTAE ERROR                   */
*     THEN                                                         0612
@RC00534 L     @12,STATUS                                          0612
         LTR   @12,@12                                             0612
         BZ    @RF00612                                            0612
*     DO;                                                          0613
*       CALL HANDLERR;              /* GO PUT OUT MSG                */
         BAL   @14,HANDLERR                                        0614
*       IF STATUS=BADSIZE×          /* WAS TRAN TABLE TOO SMALL      */
*           STATUS=BADCHAR          /* OR HAVE BAD CHARACTERS        */
*         THEN                                                     0615
         L     @12,STATUS                                          0615
         C     @12,BADSIZE                                         0615
         BE    @RT00615                                            0615
         C     @12,BADCHAR                                         0615
         BNE   @RF00615                                            0615
@RT00615 DS    0H                                                  0616
*         DO;                                                      0616
*           STATUS=CONTINUE;        /* LET THE USER HAVE ANOTHER TRY */
         SLR   @12,@12                                             0617
         ST    @12,STATUS                                          0617
*           RETCODE=FOUR;           /* TELL PARSE TO REPROMPT        */
         MVC   RETCODE(4),@CF00049                                 0618
*         END;                                                     0619
*       ELSE                        /* CHECK FOR ANOTHER PROBLEM     */
*         IF RETCODE^=0 THEN        /* NON ZERO FROM STTRAN          */
         B     @RC00615                                            0620
@RF00615 SLR   @12,@12                                             0620
         C     @12,RETCODE                                         0620
         BE    @RF00620                                            0620
*           RETCODE=0;              /* ZERO TO AVOID REPROMPT        */
         ST    @12,RETCODE                                         0621
*     END;                                                         0622
@RF00620 DS    0H                                                  0622
@RC00615 DS    0H                                                  0623
*   RFY                                                            0623
*    (GPR13P) RSTD;                                                0623
@RF00612 DS    0H                                                  0624
*   GPR13P=GPR13P->UWAB13;          /* GET PTR TO PARSE SA           */
         L     GPR13P,UWAB13(,GPR13P)                              0624
*   RFY                                                            0625
*    (GPR13P) UNRSTD;                                              0625
*   RETURN CODE(RETCODE);           /* RETURN TO PARSE               */
         L     @15,RETCODE                                         0626
         L     @14,12(,@13)                                        0626
         LM    @00,@12,20(@13)                                     0626
         BR    @14                                                 0626
*   END CHKTRAN;                                                   0627
*                                                                  0628
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT-                                                          */
*/*          LOAD                                                    */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          LOAD THE TRANSLATE TABLE                                */
*/*                                                                  */
*/*OPERATION-                                                        */
*/*          THIS SEGMENT IS THE RETRY POINT IF THERE IS AN 806      */
*/*          ABEND TRYING TO LOAD THE TRANSLATE TABLE.IF WE DO NOT   */
*/*          HAVE AN 806 ABEND IN PROGRESS AT THIS POINT THEN WE     */
*/*          WILL LOAD THE TABLE AND SAVE ITS ADDRESS                */
*/*                                                                  */
*/*CHANGE ACTIVITY-                                                  */
*/*      @Z40DQKC-                                                   */
*/*          NEW SUPPORT FOR VS2 RELEASE 4 SNA                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0628
*LOAD:                                                             0628
*   PROCEDURE;                                                     0628
LOAD     STM   @14,@12,12(@13)                                     0628
*   RFY                                                            0629
*    (GPR00P,                                                      0629
*     GPR14P,                                                      0629
*     GPR15P) RSTD;                                                0629
*   STM(GPR00P,GPR15P,ESTAREGS);    /* REGS FOR ESTAE RESTORING      */
         LA    @12,$ESTAPRM                                        0630
         STM   GPR00P,GPR15P,ESTAREGS(@12)                         0630
*   RFY                                                            0631
*    (GPR00P,                                                      0631
*     GPR14P,                                                      0631
*     GPR15P) UNRSTD;                                              0631
*   IF STATUS=CONTINUE&             /* NO ERRORS                     */
*       ESTA806=NO                  /* NO 806 ABEND                  */
*     THEN                                                         0632
         SLR   @08,@08                                             0632
         C     @08,STATUS                                          0632
         BNE   @RF00632                                            0632
         TM    ESTA806(@12),B'10000000'                            0632
         BNZ   @RF00632                                            0632
*     DO;                                                          0633
*       STTTABP=ZERO;               /* NO TABLE YET                  */
         ST    @08,STTTABP                                         0634
*       DO;                         /* LOAD EP(TRANAME)              */
*         RESPECIFY                                                0636
*          (GPR00P,                                                0636
*           GPR01P) RESTRICTED;                                    0636
*         GPR00P=ADDR(TRANAME);     /* LOAD ENTRY POINT NAME ADDRESS */
         LA    GPR00P,TRANAME                                      0637
*         GPR01P=0;                 /* JOBLIB OR LINKLIB DCB         */
         SLR   GPR01P,GPR01P                                       0638
*         SVC(8);                   /* ISSUE LOAD SVC                */
         SVC   8                                                   0639
*         RESPECIFY                                                0640
*          (GPR00P,                                                0640
*           GPR01P) UNRESTRICTED;                                  0640
*       END;                        /* LOAD EP(TRANAME)              */
*       RFY                                                        0642
*        (GPR00P) RSTD;                                            0642
*       STTTABP=GPR00P;             /* ADDRESS OF THE TABLE          */
         ST    GPR00P,STTTABP                                      0643
*       RFY                                                        0644
*        (GPR00P) UNRSTD;                                          0644
*     END;                                                         0645
*   END LOAD;                                                      0646
@EL00014 DS    0H                                                  0646
@EF00014 DS    0H                                                  0646
@ER00014 LM    @14,@12,12(@13)                                     0646
         BR    @14                                                 0646
*                                                                  0647
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT-                                                          */
*/*          KEYCHAR                                                 */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          PASS CHARACTER PAIRS TO STTRAN                          */
*/*                                                                  */
*/*OPERATION-                                                        */
*/*          THE PAIRS ARRAY IS BUILT BY THE PARSPAIR SEGMENT.PASS   */
*/*          ONE PAIR AT A TIME TO STTRAN                            */
*/*                                                                  */
*/*CHANGE ACTIVITY-                                                  */
*/*      @Z40DQKC-                                                   */
*/*          SUPPORT FOR OS/VS2 RELEASE 4                            */
*/*                                                                  */
*/********************************************************************/
*                                                                  0647
*KEYCHAR:                                                          0647
*   PROCEDURE;                                                     0647
KEYCHAR  STM   @14,@12,@SA00015                                    0647
*   IF ECTDEFCS=YES                 /* = YES IMPLIES VTAM, NOT TCAM  */
*     THEN                                                         0648
         L     @12,ECTPTR                                          0648
         TM    ECTDEFCS(@12),B'10000000'                           0648
         BNO   @RF00648                                            0648
*     DO I=1 TO #PAIRS              /* LOOP THRU THE PAIRS           */
*           WHILE STATUS=CONTINUE;                                 0649
         LA    I,1                                                 0649
         B     @DE00649                                            0649
@DL00649 L     @12,STATUS                                          0649
         LTR   @12,@12                                             0649
         BNZ   @DC00649                                            0649
*       EXTERN=PAIRS(I,1);          /* EXTERNAL REPRESENTATION       */
         LR    @12,I                                               0650
         ALR   @12,@12                                             0650
         LA    @08,PAIRS-2(@12)                                    0650
         MVC   EXTERN(1),0(@08)                                    0650
*       INTERN=PAIRS(I,2);          /* INTERNAL REPRESENTATION       */
         LA    @08,PAIRS-1(@12)                                    0651
         MVC   INTERN(1),0(@08)                                    0651
*       RFY                                                        0652
*        (GPR15P) RSTD;                                            0652
*       GEN REFS(EXTERN,INTERN)     /* GO TO STTRAN                  */
*           SETS(STTRANL)                                          0653
*           (STTRAN TCHAR=EXTERN,SCHAR=INTERN,MF=(E,STTRANL));     0653
         STTRAN TCHAR=EXTERN,SCHAR=INTERN,MF=(E,STTRANL)
*       RETCODE=GPR15P;             /* SAVE STTRAN RETCODE           */
         ST    GPR15P,RETCODE                                      0654
*       RFY                                                        0655
*        (GPR15P) UNRSTD;                                          0655
*       IF RETCODE^=ZERO            /* STTRAN ERROR                  */
*         THEN                                                     0656
         L     @12,RETCODE                                         0656
         LTR   @12,@12                                             0656
         BZ    @RF00656                                            0656
*         DO;                                                      0657
*           STATUS=ERRSTTRN;        /* INDICATE STTRAN ERROR         */
         L     @12,ERRSTTRN                                        0658
         ST    @12,STATUS                                          0658
*           CALL HANDLERR;          /* SEND ERROR MESSAGE            */
         BAL   @14,HANDLERR                                        0659
*         END;                                                     0660
*     END;                                                         0661
@RF00656 AL    I,@CF00083                                          0661
@DE00649 C     I,#PAIRS                                            0661
         BNH   @DL00649                                            0661
@DC00649 DS    0H                                                  0662
*   END KEYCHAR;                                                   0662
@EL00015 DS    0H                                                  0662
@EF00015 DS    0H                                                  0662
@ER00015 LM    @14,@12,@SA00015                                    0662
         BR    @14                                                 0662
*                                                                  0663
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT-                                                          */
*/*          NOTRAN KEYWORD                                          */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          PERFORM NOTRAN-KEYWORD FUNCTION                         */
*/*                                                                  */
*/*OPERATION-                                                        */
*/*          TELL STTRAN TO DISCONTINUE THE USE OF USER TRANSLATE    */
*/*          TABLES                                                  */
*/*                                                                  */
*/*CHANGE ACTIVITY-                                                  */
*/*      @Z40DQKC-                                                   */
*/*          NEW SUPPORT FOR OS/VS2 RELEASE 4                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0663
*NOTRAN:                                                           0663
*   PROCEDURE;                                                     0663
NOTRAN   STM   @14,@12,@SA00016                                    0663
*   IF ECTDEFCS=YES                 /* = YES IMPLIES VTAM, NOT TCAM  */
*     THEN                                                         0664
         L     @12,ECTPTR                                          0664
         TM    ECTDEFCS(@12),B'10000000'                           0664
         BNO   @RF00664                                            0664
*     GEN REFS(STTRANL)(STTRAN NOTRAN,MF=(E,STTRANL));             0665
         STTRAN NOTRAN,MF=(E,STTRANL)
*   ELSE                                                           0666
*     DO;                           /* VTAM NOT IN THE SYSTEM        */
         B     @RC00664                                            0666
@RF00664 DS    0H                                                  0667
*       STATUS=IGNTRAN;             /* IGNORENOTRAN FOR TCAM         */
         L     @12,IGNTRAN                                         0667
         ST    @12,STATUS                                          0667
*       CALL HANDLERR;              /* SEND WARNING MSG              */
         BAL   @14,HANDLERR                                        0668
*     END;                                                         0669
*   END NOTRAN;                                                    0670
@EL00016 DS    0H                                                  0670
@EF00016 DS    0H                                                  0670
@ER00016 LM    @14,@12,@SA00016                                    0670
         BR    @14                                                 0670
*                                                                  0671
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT-                                                          */
*/*          SETESTAE                                                */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          INITIALIZE ESTAE ENVIRONMENT TO PROTECT AGAINST 806     */
*/*          ABENDS WHEN LOADING THE TRANSLATE TABLE                 */
*/*                                                                  */
*/*OPERATION-                                                        */
*/*          INITIALIZE THE PARAMETERS THAT WILL BE PASSED TO THE    */
*/*          ESTAE ROUTINE SHOULD AN 806 ABEND OCCUR.ISSUE THE       */
*/*          ESTAE MACRO TO ESTABLISH THE RECOVERY ENVIRONMENT       */
*/*                                                                  */
*/*CHANGE ACTIVITY-                                                  */
*/*      @Z40DQKC-                                                   */
*/*          NEW SUPPORT FOR OS/VS2 RELEASE 4 TSO/VTAM               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0671
*SETESTAE:                                                         0671
*   PROCEDURE;                                                     0671
SETESTAE STM   @14,@12,@SA00017                                    0671
*   $ESTAPRM=''B;                   /* ZERO OUT ESTAE PARMS          */
         XC    $ESTAPRM(69),$ESTAPRM                               0672
*   ESTA806=NO;                     /* NO 806 ABEND YET              */
         LA    @12,$ESTAPRM                                        0673
         NI    ESTA806(@12),B'01111111'                            0673
*   ESTARETY=ADDR(LOAD);            /* RETRY POINT                   */
         LA    @08,LOAD                                            0674
         ST    @08,ESTARETY(,@12)                                  0674
*   RFY                                                            0675
*    (GPR15P) RSTD;                                                0675
*   RFY                                                            0676
*    (GPR02P) RSTD;                                                0676
*   GPR02P=ADDR(ESTAPARM);          /* ADDRESS OF ESTAE PARMS        */
         LR    GPR02P,@12                                          0677
*   GEN SETS(ESTALIST)              /* SET UP ESTAE ENVIRONMENT      */
*       (ESTAE ESTAE,CT,PARAM=(2),MF=(E,ESTALIST));                0678
         ESTAE ESTAE,CT,PARAM=(2),MF=(E,ESTALIST)
*   RETCODE=GPR15P;                 /* SAVE ESTAE RETURN CODE        */
         ST    GPR15P,RETCODE                                      0679
*   RFY                                                            0680
*    (GPR15P,                                                      0680
*     GPR02P) UNRSTD;                                              0680
*   IF RETCODE^=ZERO                /* ESTAE ERROR                   */
*     THEN                                                         0681
         L     @12,RETCODE                                         0681
         LTR   @12,@12                                             0681
         BZ    @RF00681                                            0681
*     STATUS=ESTAERR;               /* RECORD ESTAE ERROR            */
         L     @12,ESTAERR                                         0682
         ST    @12,STATUS                                          0682
*   END SETESTAE;                                                  0683
@EL00017 DS    0H                                                  0683
@EF00017 DS    0H                                                  0683
@ER00017 LM    @14,@12,@SA00017                                    0683
         BR    @14                                                 0683
*                                                                  0684
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT-                                                          */
*/*          ESTAE                                                   */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          INTERCEPT 806 ABENDS DUE TO ERROR LOADING THE           */
*/*          TRANSLATE TABLE                                         */
*/*                                                                  */
*/*OPERATION-                                                        */
*/*          ESTABLISH ADDRESSABILITY AND SAVE REGISTER 14.IF THERE  */
*/*          IS AN SDWA AND WE HAVE AN 806 ABEND THEN COPY THE       */
*/*          REGISTERS FROM THE ESTAE PARMS TO THE SDWA SO THEY      */
*/*          WILL BE RESTORED BEFORE THE RETRY ROUTINE GETS CONTROL. */
*/*          ISSUE SETRP TO RETURN TO RTM AND EVENTUALLY TO THE      */
*/*          RETRY ROUTINE LOAD                                      */
*/*                                                                  */
*/*          IF THERE IS NO SDWA OR THE ABEND IS NOT AN 806 THEN     */
*/*          RETURN TO RTM WITHOUT REQUESTING A RETRY                */
*/*                                                                  */
*/*CHANGE ACTIVITY-                                                  */
*/*      @Z40DQKC-                                                   */
*/*          NEW SUPPORT FOR OS/VS2 RELEASE 4 TSO/VTAM               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0684
*ESTAE:                                                            0684
*   PROCEDURE OPTIONS(NOSAVEAREA,NOSAVE);                          0684
ESTAE    DS    0H                                                  0685
*   DCL                                                            0685
*     ABND806 CHAR(2) INIT('8060'X);                               0685
*   DCL                                                            0686
*     1 * CHAR(3) DEF(SDWACMPC),                                   0686
*      2 SYSCC CHAR(2);                                            0686
*   RFY                                                            0687
*    (GPR00P,                                                      0687
*     GPR01P,                                                      0687
*     GPR14P) RSTD;                                                0687
*   GEN(USING *,GPR15P);            /* INITIAL ADDRESSABILITY        */
         USING *,GPR15P
*   IF GPR00P^=12                   /* THE SDWA EXISTS               */
*     THEN                                                         0689
         C     GPR00P,@CF02156                                     0689
         BE    @RF00689                                            0689
*     DO;                                                          0690
*       RFY                                                        0691
*         SDWA BASED(GPR01P);                                      0691
*       RFY                                                        0692
*         ESTAPARM BASED(SDWAPARM);                                0692
*       RFY                                                        0693
*        (GPR02P,                                                  0693
*         GPR12P,                                                  0693
*         GPR13P) RSTD;                                            0693
*       STM(GPR14P,GPR12P,RTMSAVE(13:72));/* SAVE RTMS REGISTER      */
         STM   GPR14P,GPR12P,RTMSAVE+12(GPR13P)                    0694
*       LM(GPR02P,GPR12P,ESTAREGS(9:52));/* RESTORE REGS FOR ADDR    */
         L     @15,SDWAPARM(,GPR01P)                               0695
         LM    GPR02P,GPR12P,ESTAREGS+8(@15)                       0695
*       RFY                                                        0696
*        (GPR02P,                                                  0696
*         GPR12P,                                                  0696
*         GPR13P,                                                  0696
*         GPR00P,                                                  0696
*         GPR14P) UNRSTD;                                          0696
*       GEN(DROP GPR15P);           /* REESTABLISH ADDRESSABILITY    */
         DROP GPR15P
*       IF SYSCC=ABND806            /* ABEND = 806                   */
*         THEN                                                     0698
         CLC   SYSCC(2,GPR01P),ABND806                             0698
         BNE   @RF00698                                            0698
*         DO;                                                      0699
*           SDWASRSV=ESTAREGS;      /* REGS TO BE RESTORED BY RTM    */
         L     @12,SDWAPARM(,GPR01P)                               0700
         MVC   SDWASRSV(64,GPR01P),ESTAREGS(@12)                   0700
*           ESTA806=YES;            /* WE HAVE AN 806 ABEND          */
         OI    ESTA806(@12),B'10000000'                            0701
*           DO;                     /* SETRP DUMP(NO)RC(SDWARETY)RETA
*                                      DDR(ESTARRTN)FRESDWA(YES)REGS(
*                                      14)RETREGS(YES)               */
*             RESPECIFY                                            0703
*              (GPR00P,                                            0703
*               GPR01P,                                            0703
*               GPR14P,                                            0703
*               GPR15P) RSTD;                                      0703
*             GPR01P->SDWARCDE=SDWARETY;/* STORE RC INTO SDWA        */
         MVI   SDWARCDE(GPR01P),X'04'                              0704
*             GPR01P->SDWARTYA=ADDR(ESTARRTN);/* SAVE RETRY ADDRESS  */
         L     @12,ESTARETY(,@12)                                  0705
         ST    @12,SDWARTYA(,GPR01P)                               0705
*             GPR01P->SDWAFREE='1'B;/* SET FLAG TO FREE SDWA         */
         OI    SDWAFREE(GPR01P),B'00000100'                        0706
*             GPR01P->SDWAREQ='0'B; /* TURN OFF DUMP INDICATOR       */
         NI    SDWAREQ(GPR01P),B'01111111'                         0707
*             GPR01P->SDWAUPRG='1'B;/* TURN ON RETREGS INDICATOR     */
         OI    SDWAUPRG(GPR01P),B'00001000'                        0708
*             GEN(RETURN (14));                                    0709
         RETURN (14)
*             RESPECIFY                                            0710
*              (GPR00P,                                            0710
*               GPR01P,                                            0710
*               GPR14P,                                            0710
*               GPR15P) UNRSTD;                                    0710
*           END;                                                   0711
*         END;                                                     0712
*       ELSE                                                       0713
*         DO;                       /* SETRP RC(SDWACWT)REGS(14)     */
         B     @RC00698                                            0713
@RF00698 DS    0H                                                  0714
*           RESPECIFY                                              0714
*            (GPR00P,                                              0714
*             GPR01P,                                              0714
*             GPR14P,                                              0714
*             GPR15P) RSTD;                                        0714
*           GPR01P->SDWARCDE=SDWACWT;/* SAVE RC VALUE                */
         MVI   SDWARCDE(GPR01P),X'00'                              0715
*           GEN(RETURN (14));                                      0716
         RETURN (14)
*           RESPECIFY                                              0717
*            (GPR00P,                                              0717
*             GPR01P,                                              0717
*             GPR14P,                                              0717
*             GPR15P) UNRSTD;                                      0717
*         END;                                                     0718
*     END;                                                         0719
@RC00698 DS    0H                                                  0720
*   RFY                                                            0720
*    (GPR15P) RSTD;                                                0720
@RF00689 DS    0H                                                  0721
*   GPR15P=SDWACWT;                 /* NO RETRY                      */
         SLR   GPR15P,GPR15P                                       0721
*   RETURN;                         /* RETURN TO RTM                 */
@EL00018 DS    0H                                                  0722
@EF00018 DS    0H                                                  0722
@ER00018 BR    @14                                                 0722
*   RFY                                                            0723
*    (GPR15P) UNRSTD;                                              0723
*   END ESTAE;                                                     0724
*                                                                  0725
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT-                                                          */
*/*          HANDLERR                                                */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          ISSUE ERROR MESSAGES                                    */
*/*                                                                  */
*/*CHANGE ACTIVITY-                                                  */
*/*      @Z40DQKC-                                                   */
*/*          NEW SUPPORT FOR OS/VS2 RELEASE 4 TSO/VTAM               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0725
*HANDLERR:                                                         0725
*   PROCEDURE;                                                     0725
HANDLERR STM   @14,@12,@SA00019                                    0725
*   IF STATUS=IGNCHAR×              /* IGNORE_CHAR MESSAGE           */
*       STATUS=IGNTRAN×             /* IGNORE_TRAN MESSAGE           */
*       STATUS=BADCHAR×             /* BAD CHARACTER(S) IN TRAN TAB  */
*       STATUS=BADSIZE×             /* TRAN TAB TOO SMALL LT 516     */
*       STATUS=NOTRNTAB             /* DEFAULT TRAN TAB IN USE       */
*     THEN                                                         0726
         L     @12,STATUS                                          0726
         C     @12,IGNCHAR                                         0726
         BE    @RT00726                                            0726
         C     @12,IGNTRAN                                         0726
         BE    @RT00726                                            0726
         C     @12,BADCHAR                                         0726
         BE    @RT00726                                            0726
         C     @12,BADSIZE                                         0726
         BE    @RT00726                                            0726
         C     @12,NOTRNTAB                                        0726
         BNE   @RF00726                                            0726
@RT00726 DS    0H                                                  0727
*     DO;                                                          0727
*       LEVEL2P=NONEXTLM;           /* NO SECOND LEVEL MESSAGE       */
         L     @12,NONEXTLM                                        0728
         ST    @12,LEVEL2P                                         0728
*       NUMSEG=ONE;                 /* ONE MESSAGE, NO INSERTS       */
         LH    @12,ONE                                             0729
         ST    @12,NUMSEG                                          0729
*       SEGMENT=STATUS;             /* STATUS CONTAINS ADDR OF MSG   */
         L     @12,STATUS                                          0730
         ST    @12,SEGMENT                                         0730
*     END;                                                         0731
*   ELSE                                                           0732
*     DO;                           /* CMND_SYS_ERR MSG WITH INSERT  */
         B     @RC00726                                            0732
@RF00726 DS    0H                                                  0733
*       CVD(RETCODE,WORKAREA);      /* '000C'X -> '012F'X            */
         L     @12,RETCODE                                         0733
         CVD   @12,WORKAREA                                        0733
*       UNPK(CODE,WORKAREA);        /* '012F'X -> 'F0F1F2'X          */
         UNPK  CODE(5),WORKAREA(8)                                 0734
*       CODE(LENGTH(CODE))='F0'X×   /* SET ZONES IN RIGHT MOST BYTE  */
*           CODE(LENGTH(CODE));                                    0735
         OI    CODE+4,X'F0'                                        0735
*       CODELEN=LENGTH(CODEMSG);    /* INSERT LENGTH                 */
         MVC   CODELEN(2),@CH02086                                 0736
*       SEGMENT=ADDR(INVPMSG);      /* 1ST LEVEL MESSAGE             */
         L     @12,@CV01896                                        0737
         LA    @12,INVPMSG(,@12)                                   0737
         ST    @12,SEGMENT                                         0737
*       LEVEL2P=ADDR(LEVELNP);      /* 2ND LEVEL MSG OLD             */
         LA    @12,LEVELNP                                         0738
         ST    @12,LEVEL2P                                         0738
*       NUMSEG2=2;                  /* # OF SEGMENTS IN 2ND LEVEL    */
         MVC   NUMSEG2(4),@CF00174                                 0739
*       SEGMENT2=STATUS;            /* 2ND LEVEL MESSAGE             */
         L     @12,STATUS                                          0740
         ST    @12,SEGMENT2                                        0740
*       SEGMENT3=ADDR(CODEMSG);     /* PTR TO RET CODE INSERT        */
         LA    @08,CODEMSG                                         0741
         ST    @08,SEGMENT3                                        0741
*       LEVELNP=NONEXTLM;           /* NO NEXT LEVEL MSG             */
         L     @08,NONEXTLM                                        0742
         ST    @08,LEVELNP                                         0742
*       IF STATUS=ADDR(ERRCODE)     /* PARSE ERROR                   */
*         THEN                                                     0743
         L     @08,@CV01896                                        0743
         LA    @08,ERRCODE(,@08)                                   0743
         CR    @12,@08                                             0743
         BNE   @RF00743                                            0743
*         CODEOFF=27;               /* OFFSET FOR RETURN CODE        */
         MVC   CODEOFF(2),@CH01952                                 0744
*       ELSE                                                       0745
*         IF STATUS=ESTAERR         /* ESTAE ERROR                   */
*           THEN                                                   0745
         B     @RC00743                                            0745
@RF00743 CLC   STATUS(4),ESTAERR                                   0745
         BNE   @RF00745                                            0745
*           CODEOFF=27;             /* OFFSET FOR RETURN CODE        */
         MVC   CODEOFF(2),@CH01952                                 0746
*         ELSE                                                     0747
*           IF STATUS=ERRSTTRN      /* STTRAN ERROR                  */
*             THEN                                                 0747
         B     @RC00745                                            0747
@RF00745 CLC   STATUS(4),ERRSTTRN                                  0747
         BNE   @RF00747                                            0747
*             CODEOFF=28;           /* OFFSET FOR RETURN CODE        */
         MVC   CODEOFF(2),@CH00324                                 0748
*           ELSE                                                   0749
*             LEVEL2P=NONEXTLM;     /* UNKNOWN ERR IN 'STATUS'       */
         B     @RC00747                                            0749
@RF00747 L     @12,NONEXTLM                                        0749
         ST    @12,LEVEL2P                                         0749
*     END;                                                         0750
@RC00747 DS    0H                                                  0750
@RC00745 DS    0H                                                  0750
@RC00743 DS    0H                                                  0751
*   CALL PUT2MSG;                   /* SEND THE MSG                  */
@RC00726 BAL   @14,PUT2MSG                                         0751
*   END HANDLERR;                                                  0752
@EL00019 DS    0H                                                  0752
@EF00019 DS    0H                                                  0752
@ER00019 LM    @14,@12,@SA00019                                    0752
         BR    @14                                                 0752
@PB00019 DS    0H                                                  0753
*                                                                  0753
*/********************************************************************/
*/*                                                                  */
*/*DECLARE-                                                          */
*/*          PATCH                                                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0753
*   DCL                                                            0753
*     PATCHLOC FIXED(31) STATIC;                                   0753
*   GEN DATA DEFS(PATCHLOC);                                       0754
*                                                                  0755
*/********************************************************************/
*/*                                                                  */
*/*DECLARE-                                                          */
*/*          EPILOG                                                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0755
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00P PTR(31) REG(0),                                       0755
*     GPR01P PTR(31) REG(1),                                       0755
*     GPR02P PTR(31) REG(2),                                       0755
*     GPR03P PTR(31) REG(3),                                       0755
*     GPR04P PTR(31) REG(4),                                       0755
*     GPR05P PTR(31) REG(5),                                       0755
*     GPR06P PTR(31) REG(6),                                       0755
*     GPR07P PTR(31) REG(7),                                       0755
*     GPR08P PTR(31) REG(8),                                       0755
*     GPR09P PTR(31) REG(9),                                       0755
*     GPR14P PTR(31) REG(14),                                      0755
*     GPR15P PTR(31) REG(15);                                      0755
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0756
*     I031F FIXED(31) BASED,                                       0756
*     I031P PTR(31) BASED,                                         0756
*     I015F FIXED(15) BASED,                                       0756
*     I015P PTR(15) BASED,                                         0756
*     I008P PTR(8) BASED,                                          0756
*     I001C CHAR(1) BASED;                                         0756
*   END IKJEFT80                                                   0757
*                                                                  0757
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IKJTSB  )                                       */
*/*%INCLUDE SYSLIB  (IKJPPL  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IKJIOPL )                                       */
*/*%INCLUDE SYSLIB  (IKJCPPL )                                       */
*/*%INCLUDE SYSLIB  (IKJPTPB )                                       */
*/*%INCLUDE SYSLIB  (IKJSTPB )                                       */
*/*%INCLUDE SYSLIB  (IKJECT  )                                       */
*/*%INCLUDE SYSLIB  (IHALLE  )                                       */
*/*%INCLUDE SYSLIB  (IHACDE  )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IHAXTLST)                                       */
*                                                                  0757
*       ;                                                          0757
         B     @EL00001                                            0757
@DATA    DS    0H
@CH02086 DC    H'9'
@CH01952 DC    H'27'
@CH00324 DC    H'28'
@SM02283 MVC   VALUE2(0),NUM(@12)
@SM02285 MVC   PUTPARM(0),PUTLIST
@SM02287 MVC   VALUE3(0),NUM(@06)
@SM02289 MVC   PAIRTEXT(0),PDESTRNG(@12)
@SM02291 MVC   TRANAME(0),PDESTRNG(@12)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SA00009 DS    15F
@SA00015 DS    15F
@SA00016 DS    15F
@SA00019 DS    15F
@SA00011 DS    15F
@SA00017 DS    15F
IKJEFT80 CSECT
         DS    0F
@CF00083 DC    F'1'
@CH00083 EQU   @CF00083+2
@CF00174 DC    F'2'
@CH00174 EQU   @CF00174+2
@CF00161 DC    F'3'
@CF00049 DC    F'4'
@CF00063 DC    F'8'
@CF02156 DC    F'12'
@CF00074 DC    F'32'
@CF01290 DC    F'256'
@CF02224 DC    F'516'
@DATD    DSECT
         DS    0D
CPPLPTR  DS    A
ECTPTR   DS    A
STPBPTR  DS    A
SDWAPTR  DS    A
XTLSTPTR DS    A
RETCODE  DS    F
STATUS   DS    F
#PAIRS   DS    F
CPECB    DS    F
PDEPTR1  DS    A
PDEPTR   DS    A
@NM00088 DS    FL4
         ORG   @NM00088
LINVALUE DS    FL2
SECVALUE DS    FL2
         ORG   @NM00088+4
SIZVALUE DS    FL4
         ORG   SIZVALUE
SIZEVAL1 DS    FL2
SIZEVAL2 DS    FL2
         ORG   SIZVALUE+4
PDLPTR1  DS    A
TCHARERR DS    BL1
TSIZEERR DS    BL1
COOL     DS    BL1
ENDCHAN  DS    BL1
MATCH    DS    BL1
         DS    CL3
TPPL     DS    CL64
         ORG   TPPL
IOPLWA   DS    CL16
STPBWA   DS    CL20
PPLWA    DS    CL28
         ORG   TPPL+64
WORKAREA DS    CL8
VALUE    DS    CL16
         ORG   VALUE
VALUE1   DS    FL4
VALUE1A  DS    FL4
SUBCODE  DS    FL4
         ORG   SUBCODE
VALUE2   DS    CL4
         ORG   VALUE+12
VALUE3   DS    CL4
         ORG   VALUE+16
$ESTAPRM DS    CL69
         DS    CL1
CODEMSG  DS    CL9
         ORG   CODEMSG
CODELEN  DS    FL2
CODEOFF  DS    FL2
CODE     DS    CL5
         ORG   CODEMSG+9
         DS    CL1
MSGLIST  DS    CL28
         ORG   MSGLIST
LEVEL2P  DS    AL4
NUMSEG   DS    FL4
SEGMENT  DS    AL4
LEVELNP  DS    AL4
NUMSEG2  DS    FL4
SEGMENT2 DS    AL4
SEGMENT3 DS    AL4
         ORG   MSGLIST+28
HEXTWO   DS    CL2
         DS    CL2
CHKCHARS DS    CL72
CHKTRANS DS    CL72
PAIRBUF  DS    CL260
         ORG   PAIRBUF
PAIRLEN  DS    FL2
PAIROFF  DS    FL2
PAIRTEXT DS    CL256
         ORG   PAIRBUF+260
PPLWA2   DS    CL28
TRANAME  DS    CL8
EXTERN   DS    CL1
INTERN   DS    CL1
         DS    CL2
STTLIST  DS    CL8
         ORG   STTLIST
STTTABP  DS    AL4
STTTSBP  DS    FL4
         ORG   STTLIST+8
PAIRS    DS    512CL1
SCNCK1SA DS    18F
SCNCK2SA DS    18F
IKJEFT80 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV01896 DC    V(TERMMSGS)
@CV02096 DC    V(TERMPCL)
@CV02097 DC    V(TERMPCL2)
         DS    0D
NONEXTLM DC    XL4'FF000000'
ERRSTTRN DC    AL4(TMSGSTTR)
ESTAERR  DC    AL4(TMSGESTA)
IGNCHAR  DC    AL4(TMSGCHAR)
BADCHAR  DC    AL4(TMSGBDCH)
BADSIZE  DC    AL4(TMSGSIZE)
NOTRNTAB DC    AL4(TMSGNTRN)
IGNTRAN  DC    AL4(TMSGTRAN)
TWO55    DC    H'255'
ONE      DC    H'1'
TWO550   DC    H'2550'
TEN      DC    H'10'
FIVE     DC    H'5'
@CC02117 DC    C'  '
@CB02191 DC    X'F0F0F0F0'
TESTTAB  DC    CL36'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
ABND806  DC    X'8060'
HEXTABLE DC    193X'00'
         DC    X'FA'
         DC    X'FB'
         DC    X'FC'
         DC    X'FD'
         DC    X'FE'
         DC    X'FF'
         DC    41X'00'
         DC    X'F0'
         DC    X'F1'
         DC    X'F2'
         DC    X'F3'
         DC    X'F4'
         DC    X'F5'
         DC    X'F6'
         DC    X'F7'
         DC    X'F8'
         DC    X'F9'
         DC    6X'00'
CHARTABL DC    193X'00'
         DC    9AL1(3)
         DC    7X'00'
         DC    9AL1(3)
         DC    8X'00'
         DC    8AL1(3)
         DC    6X'00'
         DC    10AL1(3)
         DC    6X'00'
@DATD    DSECT
*                                                         /*@Z40DQKC*/
PUTPARM PUTLINE OUTPUT=(PUTPARM),MF=L
ESTALIST ESTAE  MF=L                                          @Z40DQKC
STTRANL  STTRAN MF=L
STTRANLN DC     A(*-STTRANL)
IKJEFT80 CSECT
TERMPCL2 IKJPARM   DSECT=IKJPDL2
$EXTERNL IKJPOSIT  VALUE,ASIS,VALIDCK=CHKACHAR,                       **
               HELP='EXTERNAL REPRESENTATION OF THE CHARACTER'
$INTERNL IKJPOSIT  VALUE,ASIS,VALIDCK=CHKACHAR,                       **
               HELP='INTERNAL REPRESENTATION OF THE CHARACTER'
        IKJENDP
IKJEFT80 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKJEFT80 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
PPDEPTR  EQU   @05
I        EQU   @05
XTLPTR   EQU   @12
CDENTPTR EQU   @05
LLEPTR   EQU   @06
PPLPTR   EQU   @04
PTPBPTR  EQU   @06
IOPLPTR  EQU   @05
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R7       EQU   @07
GPR12P   EQU   @12
GPR13P   EQU   @13
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
GPR01P   EQU   @01
GPR02P   EQU   @02
GPR15P   EQU   @15
GPR00P   EQU   @00
GPR14P   EQU   @14
GPR03P   EQU   @03
GPR04P   EQU   @04
GPR05P   EQU   @05
GPR06P   EQU   @06
GPR07P   EQU   @07
GPR08P   EQU   @08
GPR09P   EQU   @09
R0       EQU   @00
CVTPTR   EQU   16
ASCB     EQU   0
ASCBTSB  EQU   ASCB+60
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWAREQ  EQU   SDWACMPF
SDWACMPC EQU   SDWAABCC+1
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWAIOFS EQU   SDWA+238
SDWARTYA EQU   SDWA+240
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWAUPRG EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
TSB      EQU   0
TSBASCBA EQU   TSB
TSBSTAT  EQU   TSBASCBA
TSBFLG1  EQU   TSB+4
TSBFLG2  EQU   TSB+16
TSBFLG3  EQU   TSB+24
TSBFLG5  EQU   TSB+25
TSBTERMC EQU   TSB+26
TSBTERM1 EQU   TSBTERMC
TSBTERM2 EQU   TSBTERMC+1
TSBSTCC  EQU   TSB+34
TSBFLG4  EQU   TSB+41
TSBRCB   EQU   TSB+64
TSBLINKA EQU   TSBRCB+4
TSBTPOST EQU   TSB+72
TSBTPFLG EQU   TSBTPOST
TSBMINL  EQU   TSB+84
PPL      EQU   0
PPLUPT   EQU   PPL
PPLECT   EQU   PPL+4
PPLECB   EQU   PPL+8
PPLPCL   EQU   PPL+12
PPLANS   EQU   PPL+16
PPLCBUF  EQU   PPL+20
PPLUWA   EQU   PPL+24
CVTMAP   EQU   0
CVTTCBP  EQU   CVTMAP
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IOPL     EQU   0
IOPLUPT  EQU   IOPL
IOPLECT  EQU   IOPL+4
IOPLECB  EQU   IOPL+8
IOPLIOPB EQU   IOPL+12
CPPL     EQU   0
CPPLCBUF EQU   CPPL
CPPLUPT  EQU   CPPL+4
CPPLECT  EQU   CPPL+12
PTPB     EQU   0
STPB     EQU   0
@NM00067 EQU   STPB
ECT      EQU   0
ECTSWS   EQU   ECT+28
ECTNOPD  EQU   ECTSWS
ECTSWS2  EQU   ECT+40
ECTSWS21 EQU   ECTSWS2
ECTDEFCS EQU   ECTSWS21
LOADTAB  EQU   0
@NM00077 EQU   0
COMPTABP EQU   @NM00077
LOADTAB2 EQU   @NM00077+4
LLE      EQU   0
LLECHN   EQU   LLE
LLECDPT  EQU   LLE+4
CDENTRY  EQU   0
CDCHAIN  EQU   CDENTRY
CDNAME   EQU   CDENTRY+8
CDXLMJP  EQU   CDENTRY+20
CDATTR   EQU   CDENTRY+28
CDMIN    EQU   CDATTR
CDATTR2  EQU   CDENTRY+29
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBLLS   EQU   TCB+36
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
XTLST    EQU   0
XTLMSBLA EQU   XTLST+8
XTLMSBLN EQU   XTLMSBLA+1
XTLMSBAA EQU   XTLST+12
TAPTRS   EQU   0
TCBPTR   EQU   TAPTRS+4
ASCBPTR  EQU   TAPTRS+12
NUM      EQU   0
PPDE     EQU   0
INPUTPTR EQU   PPDE
ENTLEN   EQU   PPDE+4
ESTAPARM EQU   0
ESTAREGS EQU   ESTAPARM
ESTARETY EQU   ESTAPARM+64
@NM00089 EQU   ESTAPARM+68
ESTA806  EQU   @NM00089
ESTARRTN EQU   0
RTMSAVE  EQU   0
MESSAGES EQU   0
MSG1     EQU   MESSAGES
MSG2     EQU   MESSAGES+42
MSG3     EQU   MESSAGES+94
MSG4     EQU   MESSAGES+146
MSG5     EQU   MESSAGES+216
MSG6     EQU   MESSAGES+262
MSG7     EQU   MESSAGES+310
MSG8     EQU   MESSAGES+358
MSG9     EQU   MESSAGES+408
MSG0     EQU   MESSAGES+444
INVPMSG  EQU   MESSAGES+480
ERRCODE  EQU   MESSAGES+516
MSGLINE  EQU   MESSAGES+548
MSGSECS  EQU   MESSAGES+600
MSGCLER  EQU   MESSAGES+656
MSGINPT  EQU   MESSAGES+710
MSGESTAE EQU   MESSAGES+764
MSGSTTRN EQU   MESSAGES+796
MSGTRAN  EQU   MESSAGES+828
MSGCHAR  EQU   MESSAGES+880
PDE      EQU   0
PDESPTR  EQU   PDE
@NM00090 EQU   PDE+4
PDELEN   EQU   @NM00090
@NM00091 EQU   @NM00090+2
PDETYPE  EQU   @NM00090+3
PDESTRNG EQU   0
CHKPARMS EQU   0
CHKPDE   EQU   CHKPARMS
CHKUWA   EQU   CHKPARMS+4
UWA      EQU   0
UWAB13   EQU   UWA+4
UWAF13   EQU   UWA+8
UWAUWA   EQU   UWA+28
PDL      EQU   0
LNE      EQU   PDL+8
SECSNO   EQU   PDL+10
IPUT     EQU   PDL+12
LINSZ    EQU   PDL+14
BRK      EQU   PDL+16
TIMOUT   EQU   PDL+18
CLRE     EQU   PDL+20
SCN      EQU   PDL+22
KEYTRN   EQU   PDL+24
KEYCHR   EQU   PDL+26
INPUT1   EQU   PDL+44
INPUT2   EQU   PDL+48
CLR1     EQU   PDL+60
CLR2     EQU   PDL+64
CHARBYTE EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
TERMINAL EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTPARS  EQU   CVTS01+176
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
@NM00102 EQU   SDWACMPC
SYSCC    EQU   @NM00102
*                                      START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
CHAR3    EQU   PDL+100
@NM00101 EQU   PDL+98
CHAR2    EQU   PDL+96
CHAR1    EQU   PDL+92
@NM00100 EQU   PDL+90
TRAN2    EQU   PDL+88
TRAN1    EQU   PDL+84
@NM00099 EQU   PDL+82
COL2     EQU   PDL+80
COL1     EQU   PDL+76
@NM00098 EQU   PDL+74
ROW2     EQU   PDL+72
ROW1     EQU   PDL+68
@NM00097 EQU   PDL+66
@NM00096 EQU   PDL+58
LINESZ2  EQU   PDL+56
LINESZ1  EQU   PDL+52
@NM00095 EQU   PDL+50
@NM00094 EQU   PDL+42
SECS2    EQU   PDL+40
SECS1    EQU   PDL+36
@NM00093 EQU   PDL+34
LINE2    EQU   PDL+32
LINE1    EQU   PDL+28
STORB    EQU   PDL+4
STORPTR  EQU   PDL
UWAR1    EQU   UWA+24
UWAR0    EQU   UWA+20
UWAR15   EQU   UWA+16
UWAR14   EQU   UWA+12
@NM00092 EQU   UWA
CHKMSG   EQU   CHKPARMS+8
PDENEXT  EQU   PDE+8
PDEPRES  EQU   @NM00091
INPTDATA EQU   MSGINPT+4
INPTOFF  EQU   MSGINPT+2
INPTLEN  EQU   MSGINPT
CLERDATA EQU   MSGCLER+4
CLEROFF  EQU   MSGCLER+2
CLERLEN  EQU   MSGCLER
DATASECS EQU   MSGSECS+4
SECSOFF  EQU   MSGSECS+2
SECSLEN  EQU   MSGSECS
DATALINE EQU   MSGLINE+4
LINEOFF  EQU   MSGLINE+2
LINLEN   EQU   MSGLINE
ERRDATA  EQU   ERRCODE+4
ERROFF   EQU   ERRCODE+2
ERRLEN   EQU   ERRCODE
INVDATA  EQU   INVPMSG+4
INVOFF   EQU   INVPMSG+2
INVLEN   EQU   INVPMSG
DATA0    EQU   MSG0+4
OFF0     EQU   MSG0+2
LEN0     EQU   MSG0
DATA9    EQU   MSG9+4
OFF9     EQU   MSG9+2
LEN9     EQU   MSG9
DATA8    EQU   MSG8+4
OFF8     EQU   MSG8+2
LEN8     EQU   MSG8
DATA7    EQU   MSG7+4
OFF7     EQU   MSG7+2
LEN7     EQU   MSG7
DATA6    EQU   MSG6+4
OFF6     EQU   MSG6+2
LEN6     EQU   MSG6
DATA5    EQU   MSG5+4
OFF5     EQU   MSG5+2
LEN5     EQU   MSG5
DATA4    EQU   MSG4+4
OFF4     EQU   MSG4+2
LEN4     EQU   MSG4
DATA3    EQU   MSG3+4
OFF3     EQU   MSG3+2
LEN3     EQU   MSG3
DATA2    EQU   MSG2+4
OFF2     EQU   MSG2+2
LEN2     EQU   MSG2
DATA1    EQU   MSG1+4
OFF1     EQU   MSG1+2
LEN1     EQU   MSG1
FLAGRES  EQU   PPDE+6
@NM00087 EQU   TAPTRS+8
@NM00086 EQU   TAPTRS
XTLMSBAD EQU   XTLMSBAA+1
@NM00085 EQU   XTLMSBAA
@NM00084 EQU   XTLMSBLA
XTLNRFAC EQU   XTLST+4
XTLLNTH  EQU   XTLST
@NM00083 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00082 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00081 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00080 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
CDATTR3  EQU   CDENTRY+30
CDAUTH   EQU   CDATTR2
CDSYSLIB EQU   CDATTR2
CDOLY    EQU   CDATTR2
@NM00079 EQU   CDATTR2
CDRLC    EQU   CDATTR2
CDXLE    EQU   CDATTR2
CDREL    EQU   CDATTR2
CDSPZ    EQU   CDATTR2
CDNLR    EQU   CDATTR
CDJPA    EQU   CDATTR
CDNFN    EQU   CDATTR
CDSER    EQU   CDATTR
CDREN    EQU   CDATTR
CDNIC    EQU   CDATTR
CDNIP    EQU   CDATTR
@NM00078 EQU   CDENTRY+26
CDUSE    EQU   CDENTRY+24
CDENTPT  EQU   CDENTRY+16
CDRRBP   EQU   CDENTRY+4
LLESYSCT EQU   LLE+10
LLECOUNT EQU   LLE+8
@NM00076 EQU   ECT+52
@NM00075 EQU   ECT+48
@NM00074 EQU   ECT+44
@NM00073 EQU   ECTSWS2+1
@NM00072 EQU   ECTSWS21
ECTTABND EQU   ECTSWS21
ECTBKPB  EQU   ECT+36
ECTUSER  EQU   ECT+32
ECTDDNUM EQU   ECT+29
ECTATTN  EQU   ECTSWS
ECTBKGRD EQU   ECTSWS
ECTNNOT  EQU   ECTSWS
ECTNMAL  EQU   ECTSWS
ECTLOGF  EQU   ECTSWS
ECTATRM  EQU   ECTSWS
@NM00071 EQU   ECTSWS
ECTSCMD  EQU   ECT+20
ECTPCMD  EQU   ECT+12
ECTSMSG  EQU   ECT+9
ECTMSGF  EQU   ECT+8
ECTIOWA  EQU   ECT+4
ECTRTCD  EQU   ECT+1
ECTRCDF  EQU   ECT
STPBMBRN EQU   STPB+16
STPBOTDD EQU   STPB+12
STPBINDD EQU   STPB+8
STPBALSD EQU   STPB+4
@NM00070 EQU   @NM00067+1
SPBFLUSH EQU   @NM00067+1
@NM00069 EQU   @NM00067+1
@NM00068 EQU   @NM00067
PTPBFLN  EQU   PTPB+8
PTPBOPUT EQU   PTPB+4
@NM00066 EQU   PTPB
CPPLPSCB EQU   CPPL+8
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00065 EQU   CVTFIX+248
@NM00064 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVT      EQU   CVTMAP
TSBEND   EQU   TSB+120
TSBSF1   EQU   TSB+112
TSBTRMID EQU   TSB+104
TSBALTC  EQU   TSB+103
TSBALTR  EQU   TSB+102
TSBPRMC  EQU   TSB+101
TSBPRMR  EQU   TSB+100
TSBEXTNT EQU   TSB+96
TSBPSWD  EQU   TSB+88
TSBLECB  EQU   TSBMINL
TSBLINE  EQU   TSB+82
TSBSTAX  EQU   TSB+81
TSBATTNC EQU   TSB+80
TSBF1V   EQU   TSBTPOST+7
TSBF1M   EQU   TSBTPOST+6
TSBF2V   EQU   TSBTPOST+5
TSBF2M   EQU   TSBTPOST+4
TSBFLAGV EQU   TSBTPOST+3
TSBFLAGM EQU   TSBTPOST+2
@NM00063 EQU   TSBTPOST+1
@NM00062 EQU   TSBTPFLG
@NM00061 EQU   TSBTPFLG
@NM00060 EQU   TSBTPFLG
@NM00059 EQU   TSBTPFLG
TSBNEWID EQU   TSBTPFLG
TSBTPAYI EQU   TSBTPFLG
TSBTPQCB EQU   TSBTPFLG
TSBPOSTO EQU   TSBTPFLG
TSBLINKB EQU   TSBLINKA+1
TSBPRI   EQU   TSBLINKA
TSBRQCB  EQU   TSBRCB
TSBCTCB  EQU   TSB+60
TSBERSDS EQU   TSB+56
TSBAUTOI EQU   TSB+52
TSBAUTOS EQU   TSB+48
TSBATNCC EQU   TSB+44
TSBASRCE EQU   TSB+42
TSBHLDL  EQU   TSBFLG4
TSBGETBF EQU   TSBFLG4
TSBCANC  EQU   TSBFLG4
TSBHOLD  EQU   TSBFLG4
TSBHUNG  EQU   TSBFLG4
TSBOWAIT EQU   TSBFLG4
TSBIWAIT EQU   TSBFLG4
TSBOCAB  EQU   TSBFLG4
TSBLNNO  EQU   TSB+40
TSBATNTC EQU   TSB+38
TSBATNLC EQU   TSB+36
TSBCHDCC EQU   TSBSTCC+1
TSBLNDCC EQU   TSBSTCC
TSBWTJID EQU   TSB+32
TSBECB   EQU   TSB+28
TSBC1050 EQU   TSBTERM2
@NM00058 EQU   TSBTERM2
@NM00057 EQU   TSBTERM2
@NM00056 EQU   TSBTERM2
@NM00055 EQU   TSBTERM2
TSBCTWX  EQU   TSBTERM2
@NM00054 EQU   TSBTERM2
@NM00053 EQU   TSBTERM2
@NM00052 EQU   TSBTERM1
@NM00051 EQU   TSBTERM1
@NM00050 EQU   TSBTERM1
TSBC2741 EQU   TSBTERM1
TSBC5041 EQU   TSBTERM1
TSBCATTN EQU   TSBTERM1
TSBCBRK  EQU   TSBTERM1
TSBCIHBN EQU   TSBTERM1
TSBVTAM  EQU   TSBFLG5
TSBKEYS  EQU   TSBFLG5
@NM00049 EQU   TSBFLG5
TSBSPF   EQU   TSBFLG5
TSBATMP  EQU   TSBFLG5
TSBNFLOP EQU   TSBFLG3
TSBNOBRK EQU   TSBFLG3
TSBTPUT  EQU   TSBFLG3
TSBAWOIP EQU   TSBFLG3
TSBNBKSP EQU   TSBFLG3
TSBSPIT  EQU   TSBFLG3
TSBTJMSG EQU   TSBFLG3
TSBATTN  EQU   TSBFLG3
TSBIBFP  EQU   TSB+21
TSBNIBF  EQU   TSB+20
TSBITBFP EQU   TSB+17
TSBSATN2 EQU   TSBFLG2
TSBSATN1 EQU   TSBFLG2
TSBSTAUT EQU   TSBFLG2
TSBAUTOC EQU   TSBFLG2
TSBAULST EQU   TSBFLG2
TSBBRKIN EQU   TSBFLG2
TSBAUTON EQU   TSBFLG2
TSBBIPI  EQU   TSBFLG2
TSBOBFP  EQU   TSB+13
TSBNOBF  EQU   TSB+12
TSBOTBFP EQU   TSB+9
TSBLNSZ  EQU   TSB+8
TSBWTCB  EQU   TSB+5
TSBTJBF  EQU   TSBFLG1
TSBTJIP  EQU   TSBFLG1
TSBTJOW  EQU   TSBFLG1
TSBIFLSH EQU   TSBFLG1
TSBWOWIP EQU   TSBFLG1
TSBOWIP  EQU   TSBFLG1
TSBOFLSH EQU   TSBFLG1
TSBANSR  EQU   TSBFLG1
TSBASCB  EQU   TSBASCBA+1
TSBATNLD EQU   TSBSTAT
TSB3270  EQU   TSBSTAT
TSBDISC  EQU   TSBSTAT
TSBITOFF EQU   TSBSTAT
TSBNOBUF EQU   TSBSTAT
TSBDSPLY EQU   TSBSTAT
TSBLWAIT EQU   TSBSTAT
TSBINUSE EQU   TSBSTAT
@NM00048 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00047 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00046 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00045 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00044 EQU   SDWADDAT+3
@NM00043 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00042 EQU   SDWADDAT+1
@NM00041 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00040 EQU   SDWADUMP+2
@NM00039 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00038 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
@NM00037 EQU   SDWALKWA+32
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00036 EQU   SDWAACF3
@NM00035 EQU   SDWAACF2
@NM00034 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00033 EQU   SDWAACF2
SDWARCRD EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00032 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
@NM00031 EQU   SDWA+239
@NM00030 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00029 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00028 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00027 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00026 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00025 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00024 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00023 EQU   SDWAINC2
@NM00022 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00021 EQU   SDWAILC2
@NM00020 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00019 EQU   SDWANXT2
@NM00018 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00017 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00016 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00015 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00014 EQU   SDWAINC1
@NM00013 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00012 EQU   SDWAILC1
@NM00011 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00010 EQU   SDWANXT1
@NM00009 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00008 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00007 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00006 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00005 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00004 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00003 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
@NM00002 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00001 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBLGCB EQU   ASCB+180
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBCMSB EQU   ASCB+132
ASCBCMSF EQU   ASCB+128
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBQSVC EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBLSLQ EQU   ASCB+24
ASCBFSLQ EQU   ASCB+20
ASCBIOSP EQU   ASCB+16
ASCBLOCK EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
*                                      END UNREFERENCED COMPONENTS
@RT00066 EQU   IGNOREM
@RT00089 EQU   RET12
@RC00424 EQU   @RC00399
@RC00407 EQU   @RC00399
@RF00429 EQU   @EL00009
@RF00485 EQU   @EL00011
@RC00472 EQU   @EL00011
@RC00498 EQU   @RC00494
@RC00563 EQU   @RC00559
@RC00566 EQU   @RC00559
@RF00632 EQU   @EL00014
@RF00648 EQU   @EL00015
@RC00664 EQU   @EL00016
@RF00681 EQU   @EL00017
@PB00018 EQU   @PB00019
@RC00568 EQU   @RC00566
@PB00017 EQU   @PB00018
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IKJEFT80,(C'PLS2031',0701,78177)
