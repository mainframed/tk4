         TITLE 'IKJEFR00 RUN                                           *
                       '
IKJEFR00 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKJEFR00  73.222'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  LA    @12,4095(,@11)                                      0001
         USING @PSTART,@11                                         0001
         USING @PSTART+4095,@12                                    0001
         L     @00,@SIZDATD                                        0001
         GETMAIN R,LV=(0)
         LR    @09,@01                                             0001
         LA    @10,4095(,@09)                                      0001
         USING @DATD,@09                                           0001
         USING @DATD+4095,@10                                      0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @09,8(,@13)                                         0001
         LR    @13,@09                                             0001
         MVC   @PC00001(4),0(@01)                                  0001
BEGIN    MVC STACKLSD(LISTE-LISTB),STACKLS
*   CPPLPTR=R1;                     /* SAVE ADDRESS OF TMP INPUT     */
         ST    R1,CPPLPTR                                          0155
*   INVALIDT='000000'X;             /* INITIALIZE INVALID OPT SWITCH */
         MVC   INVALIDT(3),@CB00769                                0156
*   SERVRPTR=ADDR(SERTEPRM);        /* ADDRESS OF SERVICE ROUTINE  0157
*                                      AREA FOR PPL,IOPL,DAPL        */
         LA    @14,SERTEPRM                                        0157
         ST    @14,SERVRPTR                                        0157
*   DAPB0PTR=ADDR(DAIRPARM);        /* ADDR OF DAIR STORAGE AREA     */
         LA    DAPB0PTR,DAIRPARM                                   0158
*   ADUPT=CPPLUPT;                  /* PTR TO UPT                    */
         L     @14,CPPLPTR                                         0159
         MVC   ADUPT(4),CPPLUPT(@14)                               0159
*   ADECT=CPPLECT;                  /* PTR TO ECT                    */
         MVC   ADECT(4),CPPLECT(@14)                               0160
*   ADECB=ADDR(COMMECB);            /* PTR TO ECB                    */
         LA    @08,COMMECB                                         0161
         ST    @08,ADECB                                           0161
*   COMMECB=0;                      /* CLEAR COMMUNICATIONS ECB      */
         SR    @08,@08                                             0162
         ST    @08,COMMECB                                         0162
*   SWITCH='00'X;                   /* INITIALIZE SWITCH             */
         MVI   SWITCH,X'00'                                        0163
*                                                                  0164
*/********************************************************************/
*/*                                                                  */
*/* BUILD PARAMETER LIST FOR IKJPARSE AND USE THAT ROUTINE TO SCAN   */
*/* THE COMMAND BUFFER                                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0164
*   PPLPCL=RUNADCN;                 /* PTR TO CONTROL LIST           */
         L     @08,PPLPTR                                          0164
         MVC   PPLPCL(4,@08),RUNADCN                               0164
*   PPLCBUF=CPPLCBUF;               /* PTR TO COMMAND BUFFER         */
         MVC   PPLCBUF(4,@08),CPPLCBUF(@14)                        0165
*   PPLANS=ADDR(PDLADDR);           /* PTR TO ANSWER PLACE           */
         LA    @14,PDLADDR                                         0166
         ST    @14,PPLANS(,@08)                                    0166
*   R1=PPLPTR;                      /* PTR TO SER.RTE.PARM LIST      */
         LR    R1,@08                                              0167
*   GEN REFS(R1)SETS(R15);                                         0168
*                                   /* PARSE TO SCAN CMD BFR   Y01993*/
         LINK EP=IKJPARS
*   RCODESV=R15;                    /* SAVE PARSE RETURN CODE        */
         ST    R15,RCODESV                                         0169
*   IF RCODESV=0 THEN               /* A RETURN CODE OF ZERO       0170
*                                      INDICATES                     */
         L     @14,RCODESV                                         0170
         LTR   @14,@14                                             0170
         BZ    @RT00170                                            0170
*     GO TO NOPRSERR;               /* PARSE WAS SUCCESSFUL          */
*DIAGPARS:                                                         0172
*   IF RCODESV=4 THEN                                              0172
DIAGPARS CLC   RCODESV(4),@CF00106                                 0172
         BNE   @RF00172                                            0172
*     DO;                           /* IF USER IN NON PROMPT MODE    */
*       RTCODE12=YES;               /* IND RUN CAN'T CONTINUE  Y01993*/
         OI    RTCODE12,B'00000100'                                0174
*       GO TO EXIT1;                /* EXIT                          */
         B     EXIT1                                               0175
*     END;                          /* END NO PROMPT PROCESSING      */
*   W4=ADDR(PARSE);                 /* PARSE ERROR                   */
@RF00172 LA    @14,PARSE                                           0177
         ST    @14,W4                                              0177
*   IF RCODESV=16 THEN                                             0178
         CLC   RCODESV(4),@CF00154                                 0178
         BNE   @RF00178                                            0178
*     DO;                           /* IF NO STORAGE                 */
*NOSTORGE:                                                         0180
*       W1=ADDR(SEG10);             /* NOT ENOUGH MAIN STORAGE       */
NOSTORGE LA    @14,SEG10                                           0180
         ST    @14,W1                                              0180
*       W3=0;                       /* END OF MESSAGE                */
         SR    @14,@14                                             0181
         ST    @14,W3                                              0181
*       GO TO ISSMSG;               /* ISSUE MESSAGE                 */
         B     ISSMSG                                              0182
*     END;                          /* END NO STORAGE                */
*COMMERR:                                                          0184
*   W1=ADDR(SEG09);                 /* COMMAND SYSTEM ERROR          */
@RF00178 DS    0H                                                  0184
COMMERR  LA    @14,SEG09                                           0184
         ST    @14,W1                                              0184
*   W3=ADDR(SEG04);                 /* MESSAGE ID                    */
         LA    @14,SEG04                                           0185
         ST    @14,W3                                              0185
*   W5=ADDR(SEG11);                 /* RETURN CODE IS                */
         LA    @14,SEG11                                           0186
         ST    @14,W5                                              0186
*   W6=ADDR(RTCDLEN);               /* NUMERICAL RETURN CODE         */
         LA    @14,RTCDLEN                                         0187
         ST    @14,W6                                              0187
*   W7=0;                           /* END OF MESSAGE                */
         SR    @14,@14                                             0188
         ST    @14,W7                                              0188
*   CVD(RCODESV,UNPACK);            /* CONVERT TO DECIMAL      Y01993*/
         L     @14,RCODESV                                         0189
         CVD   @14,UNPACK                                          0189
*   UNPK(RTCDAREA,UNPACK);          /* UNPACK TO ZONED         Y01993*/
         UNPK  RTCDAREA(8),UNPACK(8)                               0190
*   FZERO=FZERO×'F0'X;              /* OR IN F0 IN LOWER BYTE        */
         OI    FZERO,X'F0'                                         0191
*   RTCDLEN=4;                      /* RETURN CODE LENGTH            */
         MVC   RTCDLEN(2),@CH00106                                 0192
*ISSMSG:                                                           0193
*   W2=0;                           /* END FIRST LEVEL               */
ISSMSG   SR    @14,@14                                             0193
         ST    @14,W2                                              0193
*   RTCODE12=YES;                   /* RUN FAILED RETURN 12    Y01993*/
         OI    RTCODE12,B'00000100'                                0194
*   CALL PUTINTFC;                  /* ISSUE MESSAGE           Y01993*/
         BAL   @14,PUTINTFC                                        0195
*   IF STPRSNT=YES THEN             /* IF STACK PRESENT        Y01993*/
         TM    STPRSNT,B'01000000'                                 0196
         BO    @RT00196                                            0196
*     GO TO STEXIT;                 /* RETURN TO FREE STACK    Y01993*/
*   ELSE                                                           0198
*     GO TO EXIT1;                  /* RETURN TO EXIT          Y01993*/
         B     EXIT1                                               0198
*NOPRSERR:                                                         0199
*   PDLPRES=YES;                    /* INDICATE PDL PRESENT    Y01993*/
NOPRSERR OI    PDLPRES,B'00001000'                                 0199
*   CALL DSNRTE;                    /* PROCESS PARTS OF DSNAME Y01993*/
         BAL   @14,DSNRTE                                          0200
*                                                                  0201
*/********************************************************************/
*/*                                                                  */
*/*      DETERMINE IF THE RIGHTMOST QUALIFIER  OF THE DSNAME IS A    */
*/*      VALID COMPILER COMMAND (IF ANY)                             */
*/*                                                                  */
*/* IF IT HAS NOT SEE IF THE TYPE HAS BEEN SPECIFIED , IF IT         */
*/*      HAS NOT, PROMPT FOR IT. IF IT HAS BEEN SPECIFIED AND THE    */
*/*      RIGHTMOST QUALIFIER IS A VALID COMMAND, THE TYPE TAKES      */
*/*      PRECEDENCE                                                  */
*/*                                                                  */
*/*      APPEND THE COMPILER COMMAND IF NECESSARY. APPENDAGE IS NOT  */
*/*      NECESSARY FOR FULLY QUALIFIED NAMES OR NAMES WHOSE RIGHT    */
*/*      MOST QUALIFIER IS A VALID COMPILER COMMAND                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0201
*QUALRTE:                                                          0201
*   IF DSLENG=0 THEN                /* 0 INDICATES NO DSNAME         */
QUALRTE  LH    @14,DSLENG                                          0201
         SR    @08,@08                                             0201
         CR    @14,@08                                             0201
         BE    @RT00201                                            0201
*     GO TO NOTQUAL;                /* SO QUALIFICATION NECESSARY    */
*   X=ADDR(DSNBUF)+DSLENG;          /* POINT TO END OF DSNAME        */
         LA    X,DSNBUF                                            0203
         AR    X,@14                                               0203
*   Z=0;                            /* Z TO BE USED AS COUNTER       */
         ST    @08,Z                                               0204
*TESTQUAL:                                                         0205
*   Z=Z+1;                          /* KEEP COUNT OF CHARACTERS      */
TESTQUAL LA    @14,1                                               0205
         A     @14,Z                                               0205
         ST    @14,Z                                               0205
*   X=X-1;                          /* ADDRESS OF NEXT CHARACTER     */
         BCTR  X,0                                                 0206
*   IF LASTQUAL='.' THEN                                           0207
         CLI   LASTQUAL(X),C'.'                                    0207
         BNE   @RF00207                                            0207
*     DO;                           /* CHECK FOR A PERIOD            */
*       PRDFOUND=YES;               /* INDICATE PERIOD WAS     Y01993*/
         OI    PRDFOUND,B'00000001'                                0209
*       GO TO QUALFIND;             /* FOUND AND A QUALIFIER EXIST   */
         B     QUALFIND                                            0210
*     END;                          /* END CHECK FOR PERIOD          */
*   IF Z=DSLENG THEN                /* IF ALL CHARACTERS HAVE        */
@RF00207 L     @14,Z                                               0212
         CH    @14,DSLENG                                          0212
         BE    @RT00212                                            0212
*     GO TO QUALFND2;               /* BEEN CHECKED THEN DSNAME      */
*                                   /* CONTAINS ONLY ONE             */
*                                   /* QUALIFIER. CHECK IT           */
*   GO TO TESTQUAL;                 /* OTHERWISE,CHECK NEXT CHAR.    */
         B     TESTQUAL                                            0214
*                                   /* THE DSNAME CONTAINS MORE      */
*                                   /* THAN ONE QUALIFIER. X CON-    */
*                                   /* TAINS THE ADDRESS OF THE      */
*                                   /* '.' PRECEDING THE LAST        */
*                                   /* QUALIFIER. Z CONTAINS THE     */
*                                   /* LENGTH OF THE LAST QUALI-     */
*                                   /* FIER + 1.                     */
*QUALFIND:                                                         0215
*   X=X+1;                          /* X POINTS TO QUALIFIER         */
QUALFIND AH    X,@CH00033                                          0215
*   Z=Z-1;                          /* Z CONTAINS LENGTH OF QUAL     */
         L     @14,Z                                               0216
         BCTR  @14,0                                               0216
         ST    @14,Z                                               0216
*                                   /* IFIER.                        */
*                                   /* IF THE NAME CONTAINS ONLY     */
*                                   /* ONE QUALIFIER, X POINTS       */
*                                   /* TO THE FIRST CHARACTER OF     */
*                                   /* THAT QUALIFIER, Z CONTAINS    */
*                                   /* ITS LENGTH                    */
*QUALFND2:                                                         0217
*   BUF=' ';                        /* BLANK BUFFER TO HOLD QUAL     */
QUALFND2 MVI   BUF+1,C' '                                          0217
         MVC   BUF+2(6),BUF+1                                      0217
         MVI   BUF,C' '                                            0217
*   BUF(1:Z)=LAST(1:Z);             /* MOVE THE LAST QUALIFIER       */
         L     @14,Z                                               0218
         BCTR  @14,0                                               0218
         EX    @14,@SM00892                                        0218
*                                   /* INTO A BUFFER                 */
*   Y=1;                            /* SET UP COUNTER TO LOOK        */
         MVC   Y(4),@CF00033                                       0219
*                                   /* THRU TABLE OF COMPLR NAMES    */
*TESTBUF:                                                          0220
*   IF TYPES(Y,1)='FF'X THEN        /* IF THE END OF THE LIST        */
TESTBUF  L     @14,Y                                               0220
         LR    @08,@14                                             0220
         SLA   @08,4                                               0220
         LA    @02,TYPES-16(@08)                                   0220
         CLI   0(@02),X'FF'                                        0220
         BE    @RT00220                                            0220
*     GO TO NOTQUAL;                /* HAS BEEN REACHED,THEN QUAL    */
*                                   /* IFIER IS NOT VALID COM-       */
*                                   /* PILER COMMAND                 */
*   IF BUF=QUALTYPE(Y)THEN          /* A MATCH INDICATES LAST        */
         LR    @08,@14                                             0222
         MH    @08,@CH00037                                        0222
         LA    @02,QUALTYPE-10(@08)                                0222
         CLC   BUF(8),0(@02)                                       0222
         BE    @RT00222                                            0222
*                                   /* QUALIFIER IS A VALID COMPI    */
*     GO TO VALDCMPL;               /* IS AT LEAST PARTIALLY QUAL    */
*   Y=Y+1;                          /* INCREMENT TO NEXT NAME        */
         AH    @14,@CH00033                                        0224
         ST    @14,Y                                               0224
*   GO TO TESTBUF;                  /* CONTINUE SEARCH               */
         B     TESTBUF                                             0225
*                                   /* THE RIGHTMOST QUALIFIER OF    */
*                                   /* THE DSNAME IS A VALID COM-    */
*                                   /* PILER COMMAND-QUALIFICA-      */
*                                   /* TION IS NOT NECESSARY         */
*VALDCMPL:                                                         0226
*   IF TYPEPDE=0 THEN               /* IF TYPE WAS NOT SPECIFIED     */
VALDCMPL L     @14,PDLADDR                                         0226
         ICM   @08,3,TYPEPDE(@14)                                  0226
         BNZ   @RF00226                                            0226
*     IF PRDFOUND=YES THEN          /* AND A QUALIF WAS FOUND  Y01993*/
         TM    PRDFOUND,B'00000001'                                0227
         BO    @RT00227                                            0227
*       GO TO DAIRINIT;             /* IN THE DATA SET NAME, GO      */
*     ELSE                                                         0229
*       GO TO PROMPT;               /* TO DAIR, ELSE PROMPT          */
         B     PROMPT                                              0229
*   CALCY=Y;                        /* SAVE CALCULATED QUALIF  Y01993*/
@RF00226 L     CALCY,Y                                             0230
*   Y=TYPEPDE;                      /* Y EQUALS SPECIFIED TYPE       */
         L     @14,PDLADDR                                         0231
         LH    @14,TYPEPDE(,@14)                                   0231
         ST    @14,Y                                               0231
*   IF CALCY=2 THEN                 /* IF FORT IS QUALIFIER          */
         CH    CALCY,@CH00078                                      0232
         BNE   @RF00232                                            0232
*     IF Y=6 THEN                   /* IF FORT WAS SPECIFIED         */
         CH    @14,@CH00104                                        0233
         BNE   @RF00233                                            0233
*       IF PRDFOUND=YES THEN        /* TEST IF QUALIFIER       Y01993*/
         TM    PRDFOUND,B'00000001'                                0234
         BO    @RT00234                                            0234
*         GO TO DAIRINIT;           /* GO TO DAIR INIT ROUTINE       */
*   IF Y^=CALCY THEN                /* IF THE RIGHTMOST QUALIFIER    */
@RF00233 DS    0H                                                  0236
@RF00232 C     CALCY,Y                                             0236
         BNE   @RT00236                                            0236
*     GO TO PRMPRET;                /* DOES NOT EQUAL TYPE APPEND    */
*                                   /* A PERIOD (.) AND TYPE         */
*   IF PRDFOUND=YES THEN            /* IF A . WAS FOUND THEN   Y01993*/
         TM    PRDFOUND,B'00000001'                                0238
         BO    @RT00238                                            0238
*     GO TO DAIRINIT;               /* NOTHING HAS TO BE APPENDED,   */
*   ELSE                            /* OTHERWISE APPEND . AND TYPE   */
*     GO TO PRMPRET;                /* GO TO TEST FOR QUOTES         */
         B     PRMPRET                                             0240
*NOTQUAL:                                                          0241
*   NODSNCON=YES;                   /* INDICATE THAT THE NAME  Y01993*/
NOTQUAL  OI    NODSNCON,B'00010000'                                0241
*                                   /* DOES NOT FOLLOW CONVENTION    */
*PROMPT:                                                           0242
*   IF TYPEPDE=0 THEN               /* IF THE TYPE HAS NOT BEEN      */
PROMPT   L     @14,PDLADDR                                         0242
         LH    @14,TYPEPDE(,@14)                                   0242
         LTR   @14,@14                                             0242
         BZ    @RT00242                                            0242
*     GO TO PRMPTYPE;               /* SPECIFIED,PROMPT FOR IT       */
*   Y=TYPEPDE;                      /* PROPER SUBSCRIPT FOR TYPE     */
         ST    @14,Y                                               0244
*PRMPRET:                                                          0245
*   IF FULLQUAL=YES THEN            /* RETURN FROM PROMPT      Y01993*/
PRMPRET  TM    FULLQUAL,B'10000000'                                0245
         BO    @RT00245                                            0245
*                                   /* DO NOT QUALIFY FULLY          */
*     GO TO DAIRINIT;               /* QUALIFIED NAMES               */
*   X=ADDR(DSNBUF)+DSLENG;          /* POINTS TO END OF DSNAME       */
         LH    @14,DSLENG                                          0247
         LA    @08,DSNBUF                                          0247
         LR    X,@08                                               0247
         AR    X,@14                                               0247
*                                   /* BUFFER                        */
*   IF X=ADDR(DSNBUF)THEN           /* IF NO DSNAME HAS BEEN         */
         CR    X,@08                                               0248
         BE    @RT00248                                            0248
*     GO TO QUALONLY;               /* SPECIFIED, QUALIFIER          */
*                                   /* BECOMES DSNAME                */
*   LASTQUAL='.';                   /* PLACE '.' THERE               */
         MVI   LASTQUAL(X),C'.'                                    0250
*   DSLENG=DSLENG+1;                /* UPDATE LENGTH OF DSNAME       */
         LA    @08,1                                               0251
         AR    @14,@08                                             0251
         STH   @14,DSLENG                                          0251
*   X=X+1;                          /* POINT TO NEXT AVAILABLE       */
         AR    X,@08                                               0252
*QUALONLY:                                                         0253
*   LAST=QUALTYPE(Y);               /* SPOT IN BUFFER AND APPEND     */
QUALONLY L     @14,Y                                               0253
         MH    @14,@CH00037                                        0253
         LA    @08,QUALTYPE-10(@14)                                0253
         MVC   LAST(8,X),0(@08)                                    0253
*   DSLENG=DSLENG+QUALLENG(Y);      /* APPROPRIATE QUALIFIER.        */
         LH    @08,DSLENG                                          0254
         AH    @08,QUALLENG-10(@14)                                0254
         STH   @08,DSLENG                                          0254
*                                   /* UPDATE LENGTH                 */
*                                                                  0255
*/********************************************************************/
*/*                                                                  */
*/*  INTERFACE WITH DAIR SERVICE ROUTINE                             */
*/*                                                                  */
*/*      . BUILD THE DAIR PARAMETER LIST                             */
*/*      . PASS CONTROL TO DAIR                                      */
*/*      . UPON RETURN, INTERROGATE THE RETURN CODE                  */
*/*            . IF THE DATA SET WAS FOUND TO EXIST, THEN PROCEED    */
*/*            . IF THE DATA SET WAS NOT FOUND, THEN NOTIFY THE      */
*/*              USER AND PROMPT FOR RESPECIFICATION                 */
*/*            . IF AN UNCORRECTABLE ERROR OCCURRED, NOTIFY THE USER */
*/*              AND TERMINATE                                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0255
*DAIRINIT:                                                         0255
*   DA04CD='0004'X;                 /* DAIR OPERATION CODE           */
DAIRINIT MVC   DA04CD(2,DAPB0PTR),@CB00809                         0255
*   ZERO1=ZERO1&&ZERO1;             /* ZERO RETURN CODE FIELDS       */
         XC    ZERO1(6,DAPB0PTR),ZERO1(DAPB0PTR)                   0256
*   ZERO2=ZERO2&&ZERO2;             /* ZERO CONTROL                  */
         XC    ZERO2(4,DAPB0PTR),ZERO2(DAPB0PTR)                   0257
*   DA04PDSN=ADDR(DSBUFFER);        /* ADDRESS OF DSNAME BUFFER      */
         LA    @14,DSBUFFER                                        0258
         ST    @14,DA04PDSN(,DAPB0PTR)                             0258
*   IF FULLQUAL^=YES THEN           /* IF THE DATA SET NAME IS Y01993*/
         TM    FULLQUAL,B'10000000'                                0259
         BO    @RF00259                                            0259
*     DA04UID=YES;                  /* NOT FULLY QUALIFIED,    Y01993*/
         OI    DA04UID(DAPB0PTR),B'00100000'                       0260
*                                   /* INDICATE SO TO DAIR           */
*   DAPLPSCB=CPPLPSCB;              /* PTR TO PSCB                   */
@RF00259 L     @14,DAPLPTR                                         0261
         L     @08,CPPLPTR                                         0261
         MVC   DAPLPSCB(4,@14),CPPLPSCB(@08)                       0261
*   DAPLDAPB=ADDR(DAIRPARM);        /* PTR TO DAIR PARAMETER LIST    */
         LA    @08,DAIRPARM                                        0262
         ST    @08,DAPLDAPB(,@14)                                  0262
*   R1=DAPLPTR;                     /* PTR TO SER.RTE PARAMETER LIST */
         LR    R1,@14                                              0263
*   GEN REFS(R1)SETS(R15);                                         0264
*                                   /* DAIR TO VARIFY ALLOC    Y01993*/
         LINK EP=IKJEFD00
*   RCODESV=R15;                    /* SAVE RETURN CODE              */
         ST    R15,RCODESV                                         0265
*   IF RCODESV=0 THEN               /* A ZERO INDICATES SUCCESSFUL   */
         L     @14,RCODESV                                         0266
         LTR   @14,@14                                             0266
         BZ    @RT00266                                            0266
*     GO TO CALCORE;                /* COMPLETION                    */
*   GEN(LOAD  EP=IKJEFF18);         /* LOAD ENTRY TO DAIRFAIL        */
         LOAD  EP=IKJEFF18
*   CALL IKJEFF18                   /* CALL DAIR FAIL ROUT           */
*       (DAPL,                      /* DAIR PARM LIST                */
*       RCODESV,                    /* DAIR RETURN CODE              */
*       ADMSG,                      /* ALWAYS ZERO                   */
*       CALLERNO);                  /* CALLER NO (1)                 */
         L     @14,DAPLPTR                                         0269
         ST    @14,@AL00001                                        0269
         LA    @14,RCODESV                                         0269
         ST    @14,@AL00001+4                                      0269
         LA    @14,ADMSG                                           0269
         ST    @14,@AL00001+8                                      0269
         LA    @14,CALLERNO                                        0269
         ST    @14,@AL00001+12                                     0269
         LR    @15,R0                                              0269
         LA    @01,@AL00001                                        0269
         BALR  @14,@15                                             0269
*   GEN(DELETE  EP=IKJEFF18);       /* DELETE FROM EP TABLE          */
         DELETE  EP=IKJEFF18
*   IF(RCODESV^=8)×(DA04CTRC^='0008'X)/*                       Y01993*/
*     THEN                          /* IF DATA SET WASNT FOUND Y01993*/
         CLC   RCODESV(4),@CF00054                                 0271
         BNE   @RT00271                                            0271
         CLC   DA04CTRC(2,DAPB0PTR),@CH00812                       0271
         BE    @RF00271                                            0271
@RT00271 DS    0H                                                  0272
*     DO;                           /* BYPASS EXIT TO PROMPT   Y01993*/
*       RTCODE12=YES;               /* SET RETURN CODE 12 BIT  Y01993*/
         OI    RTCODE12,B'00000100'                                0273
*       GO TO EXIT1;                /* EXIT                    Y01993*/
         B     EXIT1                                               0274
*     END;                          /*                         Y01993*/
*   PPLPCL=RUNADCN3;                /* PARSE IS REENTERED TO DO      */
@RF00271 L     @14,PPLPTR                                          0276
         MVC   PPLPCL(4,@14),RUNADCN3                              0276
*   PPLCBUF=CPPLCBUF;               /* THE PROMPTING                 */
         L     @08,CPPLPTR                                         0277
         MVC   PPLCBUF(4,@14),CPPLCBUF(@08)                        0277
*   PPLANS=ADDR(PDLADDR2);          /* ADDRESS OF ANSWER PLACE       */
         LA    @08,PDLADDR2                                        0278
         ST    @08,PPLANS(,@14)                                    0278
*   R1=PPLPTR;                      /* PARSE PARM LIST ADDRESS       */
         LR    R1,@14                                              0279
*   GEN REFS(R1)SETS(R15);                                         0280
*                                   /* PROMPT                  Y01993*/
         LINK EP=IKJPARS
*   RCODESV=R15;                    /* SAVE PARSE RETURN CODE        */
         ST    R15,RCODESV                                         0281
*   IF RCODESV^=0 THEN              /* IF RETURN CODE IS NOT 0 THEN  */
         L     @14,RCODESV                                         0282
         LTR   @14,@14                                             0282
         BNZ   @RT00282                                            0282
*     GO TO DIAGPARS;               /* PARSE FAILED GO TO DIAG RTN   */
*   PDLSAVE=PDLADDR;                /* SAVE ADDR OF MAIN PDL         */
         L     PDLSAVE,PDLADDR                                     0284
*   PDLADDR=PDLADDR2;               /* ADDRESS OF DSNAME PDL         */
         MVC   PDLADDR(4),PDLADDR2                                 0285
*   CALL DSNRTE;                    /* PROCESS THE DSN         Y01993*/
         BAL   @14,DSNRTE                                          0286
*DAIRRET:                                                          0287
*   PDLADDR=PDLSAVE;                /* RESTORE MAIN PDL ADDRESS      */
DAIRRET  ST    PDLSAVE,PDLADDR                                     0287
*   R5=ADDR(PDLADDR2);              /* ADDRESS OF PDL                */
         LA    R5,PDLADDR2                                         0288
*   GEN REFS(R5);                                                  0289
*                                   /* RELEASE PDL CORE        Y01993*/
         IKJRLSA (5)
*   GO TO QUALRTE;                  /* CONTINUE WITH NEW DSNAME      */
         B     QUALRTE                                             0290
*                                                                  0291
*/********************************************************************/
*/*                                                                  */
*/* CALCULATE THE AMOUNT OF STORAGE REQUIRED FOR THE COMMAND LIST    */
*/* CONSIDER THE FOLLOWING -                                         */
*/*           . SIZE OF INPUT SOURCE DESCRIPTOR TABLE                */
*/*           . SIZE OF COMPILER COMMAND                             */
*/*           . SIZE OF WHEN IF AND LOADGO COMMANDS ,IF NECESSARY    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0291
*CALCORE:                                                          0291
*   X=20;                           /* INPUT SOURCE DESCRIPTOR (16)  */
CALCORE  LA    X,20                                                0291
*                                   /* SIZE + CONTROL INFORMATION FOR*/
*                                   /* COMPILER COMMAND (4)          */
*   X=X+TYPELNG(Y)+1;               /* LENGTH OF COMPILER COMMAND    */
         L     @14,Y                                               0292
         LR    @08,@14                                             0292
         SLA   @08,4                                               0292
         LR    @03,X                                               0292
         AH    @03,TYPELNG-16(@08)                                 0292
         AH    @03,@CH00033                                        0292
         LR    X,@03                                               0292
*   IF Y=7&                         /* IF PLI AND A52235             */
*       OPTPDE=0 THEN               /* NO PLI PARM SPECIFIED A52235  */
         CH    @14,@CH00172                                        0293
         BNE   @RF00293                                            0293
         L     @14,PDLADDR                                         0293
         ICM   @08,3,OPTPDE(@14)                                   0293
         BNZ   @RF00293                                            0293
*     OPTPDE=2;                     /* DEFAULT PARM TO OPT A52235    */
         MVC   OPTPDE(2,@14),@CH00078                              0294
*   IF DSNPRSNT=NO THEN             /* IF ONLY A MEMBER NAME   Y01993*/
@RF00293 TM    DSNPRSNT,B'00100000'                                0295
         BZ    @RT00295                                            0295
*     GO TO NODSNAME;               /* SPECIFIED, BRANCH             */
*   IF FULLQUAL=YES THEN            /*                         Y01993*/
         TM    FULLQUAL,B'10000000'                                0297
         BNO   @RF00297                                            0297
*                                   /* IF THE DATA SET NAME IS FULLY */
*     X=X+3+DSLENG;                 /* QUALIFIED THEN RESERVE SPACE  */
         LA    @14,3                                               0298
         AR    @14,X                                               0298
         AH    @14,DSLENG                                          0298
         LR    X,@14                                               0298
*                                   /* FOR THE NAME (DSLENG)+ABLANK  */
*                                   /* AFTER IT (1) + QUOTES (2)     */
*   ELSE                                                           0299
*     X=X+DSLENG+1;                 /* OTHERWISE ALLOW SPACE FOR     */
         B     @RC00297                                            0299
@RF00297 LR    @14,X                                               0299
         AH    @14,DSLENG                                          0299
         AH    @14,@CH00033                                        0299
         LR    X,@14                                               0299
*                                   /* DATA SET NAME AND A BLANK     */
*NODSNAME:                                                         0300
*   IF MBRLENG>0 THEN               /* TEST IF A MEMBER NAME HAS BEEN*/
@RC00297 DS    0H                                                  0300
NODSNAME LH    @14,MBRLENG                                         0300
         LTR   @14,@14                                             0300
         BNP   @RF00300                                            0300
*     IF DSNPRSNT=YES THEN          /* SPECIFIED -IF SO AND DSN    0301
*                                                              Y01993*/
         TM    DSNPRSNT,B'00100000'                                0301
         BNO   @RF00301                                            0301
*       X=X+MBRLENG+2;              /* FULLY QUALIFIED THEN RESERVE  */
         AR    @14,X                                               0302
         AH    @14,@CH00078                                        0302
         LR    X,@14                                               0302
*     ELSE                          /* IF NOT FULLY QUALIFY          */
*       X=X+MBRLENG+3;              /* SPACE FOR 2 PARENS ( & )      */
         B     @RC00301                                            0303
@RF00301 LR    @14,X                                               0303
         AH    @14,MBRLENG                                         0303
         AH    @14,@CH00355                                        0303
         LR    X,@14                                               0303
*                                   /* IF NOT THE RESERVE SPACE FOR 2*/
*                                   /* PARENS ( & ) AND A BLANK      */
*   IF PASSLENG>0 THEN              /* IF A PASSWORD WAS SPECIFIED 0304
*                                      ADD                           */
@RC00301 DS    0H                                                  0304
@RF00300 LH    @14,PASSLENG                                        0304
         LTR   @14,@14                                             0304
         BNP   @RF00304                                            0304
*     X=X+PASSLENG+1;               /* ITS LENGTH PLUS ONE SLASH     */
         AR    @14,X                                               0305
         AH    @14,@CH00033                                        0305
         LR    X,@14                                               0305
*   IF MSGPDE>0 THEN                /* IF THE LMSG/SMSG PARAMETER WAS*/
@RF00304 L     @14,PDLADDR                                         0306
         ICM   @08,3,MSGPDE(@14)                                   0306
         BNP   @RF00306                                            0306
*     IF LMSGSMSG(Y)=YES            /* SPECIFIED AND IF IT     Y01993*/
*       THEN                        /* IS ALLOWED              Y01993*/
         L     @14,Y                                               0307
         SLA   @14,4                                               0307
         LA    @08,LMSGSMSG-16(@14)                                0307
         TM    0(@08),B'01000000'                                  0307
         BNO   @RF00307                                            0307
*       X=X+5;                      /* ADD 5 FOR ITS LENGTH AND BLANK*/
         AH    X,@CH00152                                          0308
*   IF PRECPDE>0 THEN               /* FOR THE SPREC/LPREC     Y01993*/
@RF00307 DS    0H                                                  0309
@RF00306 L     @14,PDLADDR                                         0309
         ICM   @08,3,PRECPDE(@14)                                  0309
         BNP   @RF00309                                            0309
*     IF PRECPARM(Y)=YES            /* PARAMETER               Y01993*/
*       THEN                                                       0310
         L     @14,Y                                               0310
         SLA   @14,4                                               0310
         LA    @08,PRECPARM-16(@14)                                0310
         TM    0(@08),B'00010000'                                  0310
         BNO   @RF00310                                            0310
*       X=X+6;                                                     0311
         AH    X,@CH00104                                          0311
*   IF TESTPDE>0 THEN               /* IF EITHER THE TEST/NOTEST PARA*/
@RF00310 DS    0H                                                  0312
@RF00309 L     @14,PDLADDR                                         0312
         LH    @14,TESTPDE(,@14)                                   0312
         LTR   @14,@14                                             0312
         BNP   @RF00312                                            0312
*     IF TESTPARM(Y)=YES            /* METER IS SPECIFIED AND IF IT  */
*       THEN                        /* IS ALLOWED ADD THE APPROPRIATE*/
         L     @08,Y                                               0313
         SLA   @08,4                                               0313
         LA    @03,TESTPARM-16(@08)                                0313
         TM    0(@03),B'00100000'                                  0313
         BNO   @RF00313                                            0313
*       IF TESTPDE=1 THEN           /* LENGTH FOR THE PARAMETER +    */
         CH    @14,@CH00033                                        0314
         BNE   @RF00314                                            0314
*         X=X+5;                    /* A BLANK                       */
         AH    X,@CH00152                                          0315
*       ELSE                        /* IF NOT                        */
*         X=X+7;                    /* INCREMENT BY SEVEN            */
         B     @RC00314                                            0316
@RF00314 AH    X,@CH00172                                          0316
*   IF FORMPDE>0 THEN               /* THE SAME FOR FIXED/FREE       */
@RC00314 DS    0H                                                  0317
@RF00313 DS    0H                                                  0317
@RF00312 L     @14,PDLADDR                                         0317
         LH    @14,FORMPDE(,@14)                                   0317
         LTR   @14,@14                                             0317
         BNP   @RF00317                                            0317
*     IF FORM(Y)=YES THEN           /* CHECK FORM                    */
         L     @08,Y                                               0318
         SLA   @08,4                                               0318
         LA    @03,FORM-16(@08)                                    0318
         TM    0(@03),B'00001000'                                  0318
         BNO   @RF00318                                            0318
*       IF FORMPDE=1 THEN           /* IF INDICATED                  */
         CH    @14,@CH00033                                        0319
         BNE   @RF00319                                            0319
*         X=X+6;                    /* THAN INCREMENT BY SIX         */
         AH    X,@CH00104                                          0320
*       ELSE                        /* ESLE                          */
*         X=X+5;                    /* INCREMENT ADDRESS BY 5        */
         B     @RC00319                                            0321
@RF00319 AH    X,@CH00152                                          0321
*   IF GOPDE>0 THEN                 /* IF GO SPECIFIED AND IT  Y02676*/
@RC00319 DS    0H                                                  0322
@RF00318 DS    0H                                                  0322
@RF00317 L     @14,PDLADDR                                         0322
         LH    @14,GOPDE(,@14)                                     0322
         LTR   @14,@14                                             0322
         BNP   @RF00322                                            0322
*     IF GOBIT(Y)=YES THEN          /* IS ALLOWED, THEN ALLOW  Y02676*/
         L     @08,Y                                               0323
         SLA   @08,4                                               0323
         LA    @03,GOBIT-16(@08)                                   0323
         TM    0(@03),B'01000000'                                  0323
         BNO   @RF00323                                            0323
*       IF GOPDE=1 THEN             /* FOR APPROPRIATE KYWD    Y02676*/
         CH    @14,@CH00033                                        0324
         BNE   @RF00324                                            0324
*         X=X+3;                    /* ALLOW FOR GO + BLANK    Y02676*/
         AH    X,@CH00355                                          0325
*       ELSE                        /*                         Y02676*/
*         X=X+5;                    /* ALLOW FOR NOGO + BLANK  Y02676*/
         B     @RC00324                                            0326
@RF00324 AH    X,@CH00152                                          0326
*   IF PAUSPDE>0 THEN               /* IF PAUSE SPECIFIED      Y02676*/
@RC00324 DS    0H                                                  0327
@RF00323 DS    0H                                                  0327
@RF00322 L     @14,PDLADDR                                         0327
         LH    @14,PAUSPDE(,@14)                                   0327
         LTR   @14,@14                                             0327
         BNP   @RF00327                                            0327
*     IF PAUSBIT(Y)=YES THEN        /* AND IT IS ALLOWED       Y02676*/
         L     @08,Y                                               0328
         SLA   @08,4                                               0328
         LA    @03,PAUSBIT-16(@08)                                 0328
         TM    0(@03),B'00100000'                                  0328
         BNO   @RF00328                                            0328
*       IF PAUSPDE=1 THEN           /* ALLOW FOR APPRO KYD     Y02676*/
         CH    @14,@CH00033                                        0329
         BNE   @RF00329                                            0329
*         X=X+6;                    /* ALLOW FOR PAUSE + BLANK Y02676*/
         AH    X,@CH00104                                          0330
*       ELSE                        /*                         Y02676*/
*         X=X+8;                    /* ALLOW FOR NOPAUSE + BLANK   0331
*                                                              Y02676*/
         B     @RC00329                                            0331
@RF00329 AH    X,@CH00054                                          0331
*   IF STOREPDE>0 THEN              /* IF STORE SPECIFIED      Y02676*/
@RC00329 DS    0H                                                  0332
@RF00328 DS    0H                                                  0332
@RF00327 L     @14,PDLADDR                                         0332
         LH    @14,STOREPDE(,@14)                                  0332
         LTR   @14,@14                                             0332
         BNP   @RF00332                                            0332
*     IF STORBIT(Y)=YES THEN        /* AND IS ALLOWED ALOW     Y02676*/
         L     @08,Y                                               0333
         SLA   @08,4                                               0333
         LA    @03,STORBIT-16(@08)                                 0333
         TM    0(@03),B'00010000'                                  0333
         BNO   @RF00333                                            0333
*       IF STOREPDE=1 THEN          /* FOR APPROPRIATE KYW     Y02676*/
         CH    @14,@CH00033                                        0334
         BNE   @RF00334                                            0334
*         X=X+6;                    /* ALLOW FOR STORE + BLANK Y02676*/
         AH    X,@CH00104                                          0335
*       ELSE                        /*                         Y02676*/
*         X=X+8;                    /* ALLOW FOR NOSTORE + BLANK   0336
*                                                              Y02676*/
         B     @RC00334                                            0336
@RF00334 AH    X,@CH00054                                          0336
*   IF SRCPDE>0 THEN                /* IF SRC/OBJ SPECIFID     Y02676*/
@RC00334 DS    0H                                                  0337
@RF00333 DS    0H                                                  0337
@RF00332 L     @14,PDLADDR                                         0337
         ICM   @08,3,SRCPDE(@14)                                   0337
         BNP   @RF00337                                            0337
*     IF SRCBIT(Y)=YES THEN         /* AND IT IS ALLOWED       Y02676*/
         L     @14,Y                                               0338
         SLA   @14,4                                               0338
         LA    @08,SRCBIT-16(@14)                                  0338
         TM    0(@08),B'00001000'                                  0338
         BNO   @RF00338                                            0338
*       X=X+7;                      /* ALLOW FOR SOURCE/OBJECT +BLANK
*                                                              Y02676*/
         AH    X,@CH00172                                          0339
*   IF SIZPDE>0 THEN                                               0340
@RF00338 DS    0H                                                  0340
@RF00337 L     @14,PDLADDR                                         0340
         ICM   @08,3,SIZPDE(@14)                                   0340
         BNP   @RF00340                                            0340
*     IF SIZBIT(Y)=YES THEN                                        0341
         L     @08,Y                                               0341
         SLA   @08,4                                               0341
         LA    @03,SIZBIT-16(@08)                                  0341
         TM    0(@03),B'00000100'                                  0341
         BNO   @RF00341                                            0341
*       X=X+7+SIZLEN;               /* ALLOW FOR SIZE(NNN)+ BLANK  0342
*                                                              Y02676*/
         LA    @08,7                                               0342
         AR    @08,X                                               0342
         AH    @08,SIZLEN(,@14)                                    0342
         LR    X,@08                                               0342
*   IF OPTPDE>0 THEN                /* IF CHECK/OPT WAS SPECIFIED AND*/
@RF00341 DS    0H                                                  0343
@RF00340 L     @14,PDLADDR                                         0343
         LH    @14,OPTPDE(,@14)                                    0343
         LTR   @14,@14                                             0343
         BNP   @RF00343                                            0343
*     IF CHECKOPT(Y)=YES THEN       /* IS ALLOWED, TEST IF     Y01993*/
         L     @08,Y                                               0344
         SLA   @08,4                                               0344
         LA    @03,CHECKOPT-16(@08)                                0344
         TM    0(@03),B'00000001'                                  0344
         BNO   @RF00344                                            0344
*       IF OPTPDE=1 THEN            /* A WHEN OR A LOADGO CMD  Y01993*/
         LA    @08,1                                               0345
         CR    @14,@08                                             0345
         BNE   @RF00345                                            0345
*         DO;                       /* IS NEEDED, IF NOT BRANCH    0346
*                                      AROUND                        */
*           X=X+1;                  /* ADDITIONAL BLANK FOR PLIC     */
         AR    X,@08                                               0347
*           GO TO PRMCON;           /* TEST FOR PARM STRING          */
         B     PRMCON                                              0348
*         END;                      /* END OPT CHECK                 */
*       ELSE                        /* ELSE PL1 BASE                 */
*         DO;                       /* THEN INCREMENT                */
@RF00345 DS    0H                                                  0351
*           X=X+8;                  /* ACCOUNT FOR PL1BASE           */
         AH    X,@CH00054                                          0351
*         END;                      /* END PLI CHECK                 */
*   X=X-1;                          /* TAKE OUT ENDING BLANK FROM    */
@RF00344 DS    0H                                                  0353
@RF00343 BCTR  X,0                                                 0353
*                                   /* VARIABLE LIST                 */
*   IF WHENCMND(Y)^=YES             /* IF WHEN CMD IS ^ NEEDED Y01993*/
*     THEN                                                         0354
         L     @14,Y                                               0354
         SLA   @14,4                                               0354
         LA    @08,WHENCMND-16(@14)                                0354
         TM    0(@08),B'01000000'                                  0354
         BNO   @RT00354                                            0354
*     GO TO NOSTRIP;                /* THEN BRANCH AROUND WHEN/LOADGO*/
*                                   /* IF THE WHEN COMMAND IS NEEDED */
*                                   /* ADD ITS LENGTH + LENGTH OF THE*/
*                                   /* CONTROL INFORMATION           */
*   X=X+20;                         /* 4 BYTES FOR CNTRL, 16 FOR WHEN*/
         AH    X,@CH00814                                          0356
*   IF LOADCMD(Y)^=YES THEN         /* IF THE LOADGO CMD IS ^  Y01993*/
         LA    @08,LOADCMD-16(@14)                                 0357
         TM    0(@08),B'00100000'                                  0357
         BNO   @RT00357                                            0357
*     GO TO NOSTRIP;                /* REQUIRED, BRANCH TO GETMAIN   */
*   X=X+13;                         /* FOR LOADGO + CTL + BLNK Y00973*/
         AH    X,@CH00510                                          0359
*   IF DSNPRSNT=NO THEN             /* IF NO DSNAME IS PRESENT Y01156*/
         TM    DSNPRSNT,B'00100000'                                0360
         BZ    @RT00360                                            0360
*     GO TO NODSNPRS;               /* PROCESS THE MEMBER NAME Y01993*/
*   X=X+4;                          /* +.OBJ                   Y00973*/
         AH    X,@CH00106                                          0362
*   IF FULLQUAL=YES THEN            /* IF DATA SET IS FULLY    Y01993*/
         TM    FULLQUAL,B'10000000'                                0363
         BNO   @RF00363                                            0363
*     X=X+DSLENG+1;                 /* QUALIFIED THEN ALLOW          */
         LR    @14,X                                               0364
         AH    @14,DSLENG                                          0364
         AH    @14,@CH00033                                        0364
         LR    X,@14                                               0364
*   ELSE                                                           0365
*     X=X+DSLENG-                   /* SPACE FOR THE DSNAME AND A    */
*         TYPELNG(Y);               /* BLANK, OTHERWISE DROP THE     */
         B     @RC00363                                            0365
@RF00363 LR    @14,X                                               0365
         AH    @14,DSLENG                                          0365
         L     @08,Y                                               0365
         SLA   @08,4                                               0365
         SH    @14,TYPELNG-16(@08)                                 0365
         LR    X,@14                                               0365
*                                   /* RIGHTMOST QUALIFIER           */
*NODSNPRS:                                                         0366
*   IF MBRLENG>0 THEN               /* IF A MEMBER NAME IS PRESENT   */
@RC00363 DS    0H                                                  0366
NODSNPRS LH    @14,MBRLENG                                         0366
         LTR   @14,@14                                             0366
         BNP   @RF00366                                            0366
*     IF DSNPRSNT=NO THEN           /* AND A DSNAME ISN'T COUNT    0367
*                                      MEMBER                        */
         TM    DSNPRSNT,B'00100000'                                0367
         BNZ   @RF00367                                            0367
*       X=X+MBRLENG+3;              /* LENGTH + 2 PARENS + A BLANK   */
         AR    @14,X                                               0368
         AH    @14,@CH00355                                        0368
         LR    X,@14                                               0368
*     ELSE                                                         0369
*       X=X+MBRLENG+2;              /* ELSE COUNT MEMBER LENGTH + 2  */
         B     @RC00367                                            0369
@RF00367 LR    @14,X                                               0369
         AH    @14,MBRLENG                                         0369
         AH    @14,@CH00078                                        0369
         LR    X,@14                                               0369
*                                   /* PARENS. THEN BLANK IS       0370
*                                      ACCOUNTED                     */
*                                   /* FOR IN DSNAME PROCESSING      */
*   IF LIBPDE=1&LIBOPND(Y)=YES      /* IF LIB OPERAND          Y01156*/
*     THEN                          /* AND IS ALLOWED,THEN     Y01156*/
@RC00367 DS    0H                                                  0370
@RF00366 L     @14,PDLADDR                                         0370
         CLC   LIBPDE(2,@14),@CH00033                              0370
         BNE   @RF00370                                            0370
         L     @08,Y                                               0370
         SLA   @08,4                                               0370
         LA    @03,LIBOPND-16(@08)                                 0370
         TM    0(@03),B'10000000'                                  0370
         BNO   @RF00370                                            0370
*     DO;                           /*                         Y01156*/
*       LIBPTR=ADDR(FIRSTDSN);      /* SET PTR TO 1ST DSN      Y01156*/
         LA    LIBPTR,FIRSTDSN(,@14)                               0372
*       DO WHILE LIBPTR^=ENDCHAIN;  /* DO UNTIL FF00           Y01156*/
         B     @DE00373                                            0373
@DL00373 DS    0H                                                  0374
*         X=X+LDSNLEN+1;            /* ADD DS LENGTH + SEP BLNKY01156*/
         LR    @14,X                                               0374
         AH    @14,LDSNLEN(,LIBPTR)                                0374
         AH    @14,@CH00033                                        0374
         LR    X,@14                                               0374
*         IF LDSNQUOT=YES           /* IF DSNAME IS FULLY QUAL Y01156*/
*           THEN                                                   0375
         TM    LDSNQUOT(LIBPTR),B'01000000'                        0375
         BNO   @RF00375                                            0375
*           X=X+2;                  /* ACCOUNT FOR QUOTS       Y01156*/
         AH    X,@CH00078                                          0376
*         IF LMBRPRES=YES           /* IF MEMBER NAME IS PRES  Y01156*/
*           THEN                                                   0377
@RF00375 TM    LMBRPRES(LIBPTR),B'10000000'                        0377
         BNO   @RF00377                                            0377
*           X=X+2+LMBRLEN;          /* ADD LENGTH+2PARENS      Y01156*/
         LA    @14,2                                               0378
         AR    @14,X                                               0378
         AH    @14,LMBRLEN(,LIBPTR)                                0378
         LR    X,@14                                               0378
*         IF LPASPRES=YES           /* IF PASSWORD IS PRES, ADDY01156*/
*           THEN                                                   0379
@RF00377 TM    LPASPRES(LIBPTR),B'10000000'                        0379
         BNO   @RF00379                                            0379
*           X=X+1+LPASSLEN;         /* ITS LENGTH + A '/'Y01156      */
         LA    @14,1                                               0380
         AR    @14,X                                               0380
         AH    @14,LPASSLEN(,LIBPTR)                               0380
         LR    X,@14                                               0380
*         LIBPTR=CHAINPTR;          /* UPDATE LIBPTR TO NEXT   Y01156*/
@RF00379 L     LIBPTR,CHAINPTR(,LIBPTR)                            0381
*       END;                        /*                         Y01156*/
@DE00373 CL    LIBPTR,@CF00306                                     0382
         BNE   @DL00373                                            0382
*       X=X+5;                      /* ACCOUNT FOR ' LIB( )'   Y01156*/
         AH    X,@CH00152                                          0383
*     END;                          /* AND REMOVE LAST BLANK   Y01156*/
*PRMCON:                                                           0385
*   IF PARMLEN=0 THEN               /* IF A NULL PARM STRING IS      */
@RF00370 DS    0H                                                  0385
PRMCON   SR    @14,@14                                             0385
         L     @08,PDLADDR                                         0385
         LH    @03,PARMLEN(,@08)                                   0385
         CR    @03,@14                                             0385
         BE    @RT00385                                            0385
*     GO TO PLITEST;                /* PASSED SKIP PARM PROCESSING   */
*   IF PARMPRES=YES THEN            /* IF A PARAMETER STRING   Y01993*/
         TM    PARMPRES(@08),B'10000000'                           0387
         BNO   @RF00387                                            0387
*     IF PRMSTRNG(Y)=YES            /* HAS BEEN SPECIFIED AND  Y01993*/
*       THEN                        /* IS ALLOWED ADD          Y01993*/
         L     @07,Y                                               0388
         SLA   @07,4                                               0388
         LA    @06,PRMSTRNG-16(@07)                                0388
         TM    0(@06),B'10000000'                                  0388
         BNO   @RF00388                                            0388
*       DO;                                                        0389
*         IF PARMLEN<=100 THEN      /* IF THE LENGHT OF THE STRING   */
         LA    @07,100                                             0390
         CR    @03,@07                                             0390
         BNH   @RT00390                                            0390
*           GO TO PRMCON2;          /* IS LESS THAN OR EQUAL TO 100  */
*                                   /* CONTINUE NORMAL PROCESSING    */
*         XSAVE=X;                  /* SAVE X                        */
         LR    XSAVE,X                                             0392
*         PARMLEN=100;              /* OTHERWISE TRUNCATE AND NOTIFY */
         STH   @07,PARMLEN(,@08)                                   0393
*         W1=ADDR(SEG08);           /* USER                          */
         LA    @08,SEG08                                           0394
         ST    @08,W1                                              0394
*         W2=0;                     /* INDICATE END OF MESSAGE       */
         ST    @14,W2                                              0395
*         W3=0;                     /* NO 2ND LEVEL MESSAGE          */
         ST    @14,W3                                              0396
*         CALL PUTINTFC;            /* GO TO PUTLINE           Y01156*/
         BAL   @14,PUTINTFC                                        0397
*PRMCON1:                                                          0398
*         X=XSAVE;                  /* RESTORE X                     */
PRMCON1  LR    X,XSAVE                                             0398
*         IF RCODESV>0 THEN                                        0399
         ICM   @14,15,RCODESV                                      0399
         BNP   @RF00399                                            0399
*           DO;                     /* IF PUTLINE FAILED EXIT        */
*             RTCODE12=YES;         /* RETURN CODE IS 12       Y01156*/
         OI    RTCODE12,B'00000100'                                0401
*             GO TO EXIT1;          /* EXIT                          */
         B     EXIT1                                               0402
*           END;                    /* END PUTLINE FAIL TEST         */
*PRMCON2:                                                          0404
*         Z=PARMPTR;                /* ADDRESS OF PARM STRING        */
@RF00399 DS    0H                                                  0404
PRMCON2  L     @14,PDLADDR                                         0404
         MVC   Z(4),PARMPTR(@14)                                   0404
*         DO I=1 TO PARMLEN;        /* DEFINE LIMITS OF TEST         */
         LA    @14,1                                               0405
         B     @DE00405                                            0405
@DL00405 DS    0H                                                  0406
*           IF CBUFF(I)='7D'X THEN  /* TEST FOR APOSTROPHE           */
         L     @08,Z                                               0406
         ALR   @08,@14                                             0406
         AL    @08,@CF00896                                        0406
         CLI   CBUFF(@08),X'7D'                                    0406
         BNE   @RF00406                                            0406
*             DO;                   /* IF PRESENT                    */
*               CHARMOVE=0;         /* SET COUNTER TO ZERO           */
         SR    @14,@14                                             0408
         STH   @14,CHARMOVE                                        0408
*               TOTALA=0;           /* SET COUNTER TO ZERO           */
         STH   @14,TOTALA                                          0409
*               SIZE=PARMLEN;       /* AMOUNT OF CORE FOR PARM       */
         L     @14,PDLADDR                                         0410
         LH    @14,PARMLEN(,@14)                                   0410
         STCM  @14,7,SIZE                                          0410
*               SPOOL='01'X;        /* SUBPOOL                 Y01993*/
         MVI   SPOOL,X'01'                                         0411
*               R0=CORE;            /* MOVE SIZE & SUBPOOL TO REG 0  */
         L     R0,CORE                                             0412
*               GEN REFS(R0)SETS(R1);                              0413
*                                                            /*Y01993*/
                    GETMAIN R,LV=(0)     ISSUE GETMAIN
*               A=R1;               /* ADDRESS OF GOTTEN CORE        */
         LR    A,R1                                                0414
*               COREADDR=A;         /* ADDRESS OF GOTTEN CORE        */
         ST    A,COREADDR                                          0415
*               PARMHOLD(1:PARMLEN)=/* MOVE PARM                     */
*                   CBUFF(1:PARMLEN);/* INTO GOTTEN CORE             */
         L     @14,PDLADDR                                         0416
         LH    @14,PARMLEN(,@14)                                   0416
         BCTR  @14,0                                               0416
         L     @08,Z                                               0416
         EX    @14,@SM00897                                        0416
*               CBUFF(1:I)=         /* MOVE CHARACTERS UP TO THE     */
*                   PARMHOLD(1:I);  /* FIRST APOSTROPHE IN PARM      */
         L     @14,I                                               0417
         LR    @07,@14                                             0417
         BCTR  @07,0                                               0417
         EX    @07,@SM00899                                        0417
*               Z=Z+I;              /* BUMP POINTER FOR NEXT CHAR    */
         AR    @08,@14                                             0418
         ST    @08,Z                                               0418
*               A=A+I-1;            /* POINT TO LAST CHARACTER MOVED */
         LR    @08,A                                               0419
         AR    @08,@14                                             0419
         BCTR  @08,0                                               0419
         LR    A,@08                                               0419
*               CHARMOVE=I;         /* KEEP COUNT OF CHARACTERS MOVED*/
         STH   @14,CHARMOVE                                        0420
*               GO TO MOVEAPOS;     /* INSERT AN APOSTROPHE          */
         B     MOVEAPOS                                            0421
*TESTCHAR:                                                         0422
*               IF BUFFCHAR='7D'X THEN/* TEST FOR APOSTROPHE         */
TESTCHAR L     @14,Z                                               0422
         CLI   BUFFCHAR(@14),X'7D'                                 0422
         BNE   @RF00422                                            0422
*                 DO;               /* IF PRESENT                    */
*                   Z=Z+1;          /* BUMP POINTER FOR NEXT CHAR    */
         AH    @14,@CH00033                                        0424
         ST    @14,Z                                               0424
*MOVEAPOS:                                                         0425
*                   BUFFCHAR='7D'X; /* INSERT APOSTROPHE             */
MOVEAPOS L     @14,Z                                               0425
         MVI   BUFFCHAR(@14),X'7D'                                 0425
*                   TOTALA=TOTALA+1;/* BUMP COUNT OF                 */
         LA    @14,1                                               0426
         AH    @14,TOTALA                                          0426
         STH   @14,TOTALA                                          0426
*                                   /* APOSTROPHES MOVED             */
*                 END;              /* END                           */
*               IF PARMLEN=CHARMOVE THEN/* TEST FOR ALL              */
@RF00422 L     @14,PDLADDR                                         0428
         LH    @08,PARMLEN(,@14)                                   0428
         CH    @08,CHARMOVE                                        0428
         BNE   @RF00428                                            0428
*                                   /* CHARACTERS OF PARM MOVED      */
*                 DO;               /* IF PRESENT                    */
*                   Z=Z+1;          /* BUMP POINTER                  */
         LA    @03,1                                               0430
         A     @03,Z                                               0430
         ST    @03,Z                                               0430
*                   BUFFCHAR='7D'X; /* CLOSING APOSTROPHE            */
         MVI   BUFFCHAR(@03),X'7D'                                 0431
*                   PARMLEN=PARMLEN+TOTALA;/* ADD NUMBER             */
         AH    @08,TOTALA                                          0432
         STH   @08,PARMLEN(,@14)                                   0432
*                                   /* OF APOSTROPHES INSERTED       */
*                   R0=CORE;        /* SIZE AND SUBPOOL              */
         L     R0,CORE                                             0433
*                   R1=COREADDR;    /* ADDRESS OF GOTTEN CORE        */
         L     R1,COREADDR                                         0434
*                   GEN REFS(R0,R1);                               0435
*                                                            /*Y01993*/
                       FREEMAIN R,LV=(0),A=(1)
*                   GO TO PRMCON3;  /* CONTINUE CALCORE              */
         B     PRMCON3                                             0436
*                 END;              /* END                           */
*                                   /* IF ALL CHARACTERS FROM PARM   */
*                                   /* STRING HAVE NOT BEEN MOVED    */
*                                   /* CONTINUE MOVING THEM          */
*               Z=Z+1;              /* BUMP PTR TO COMMAND BUFFER    */
@RF00428 LA    @14,1                                               0438
         L     @08,Z                                               0438
         AR    @08,@14                                             0438
         ST    @08,Z                                               0438
*               A=A+1;              /* BUMP PTR TO GOTTEN CORE       */
         AR    A,@14                                               0439
*               BUFFCHAR=HOLDCHAR;  /* MOVE A CHARACTER              */
         MVC   BUFFCHAR(1,@08),HOLDCHAR(A)                         0440
*               CHARMOVE=CHARMOVE+1;/* BUMP COUNT OF MOVES           */
         AH    @14,CHARMOVE                                        0441
         STH   @14,CHARMOVE                                        0441
*               GO TO TESTCHAR;     /* TEST FOR AN APOSTROPHE        */
         B     TESTCHAR                                            0442
*             END;                  /* END                           */
*         END;                      /* END                           */
@RF00406 LA    @14,1                                               0444
         A     @14,I                                               0444
@DE00405 ST    @14,I                                               0444
         L     @08,PDLADDR                                         0444
         CH    @14,PARMLEN(,@08)                                   0444
         BNH   @DL00405                                            0444
*PRMCON3:                                                          0445
*         X=X+PARMLEN+3;            /* ITS LENGTH AND QUOTES         */
PRMCON3  LR    @14,X                                               0445
         L     @08,PDLADDR                                         0445
         AH    @14,PARMLEN(,@08)                                   0445
         AH    @14,@CH00355                                        0445
         LR    X,@14                                               0445
*PLITEST:                                                          0446
*         IF TYPES(Y,1:3)='PLI' THEN/*                         Y01993*/
PLITEST  L     @14,Y                                               0446
         SLA   @14,4                                               0446
         LA    @08,TYPES-16(@14)                                   0446
         CLC   0(3,@08),@CC00830                                   0446
         BE    @RT00446                                            0446
*                                   /* IF TYPE IS PLI THEN           */
*           GO TO BUILD3;           /* NO MORE CALCULATIONS NEEDED   */
*       END;                        /* END PARM STRING PROCESS       */
*   IF FLIBPARM(Y)=YES              /* IF THE FORTLIB PARM IS REQ.   */
*     THEN                                                         0449
@RF00388 DS    0H                                                  0449
@RF00387 L     @14,Y                                               0449
         SLA   @14,4                                               0449
         LA    @08,FLIBPARM-16(@14)                                0449
         TM    0(@08),B'00000100'                                  0449
         BNO   @RF00449                                            0449
*     DO;                           /* ADD ITS LENGTH                */
*       X=X+8;                      /* INCREMENT BY 8                */
         AH    X,@CH00054                                          0451
*       GO TO BUILD3;               /* GO TO BUILD STACK             */
         B     BUILD3                                              0452
*     END;                          /* END FORT TEST                 */
*   IF CLIBPARM(Y)=YES              /* IF THE COBLIB PARM      Y01993*/
*     THEN                          /* IS REQ                  Y01993*/
@RF00449 L     @14,Y                                               0454
         SLA   @14,4                                               0454
         LA    @08,CLIBPARM-16(@14)                                0454
         TM    0(@08),B'00000010'                                  0454
         BNO   @RF00454                                            0454
*     DO;                           /* ADD ITS LENGTH                */
*       X=X+7;                      /* INCREMENT BY 7                */
         AH    X,@CH00172                                          0456
*     END;                          /* END                           */
*BUILD3:                                                           0458
*   X=X-1;                          /* DROP BLANK FROM VARIABLE LIST */
@RF00454 DS    0H                                                  0458
BUILD3   BCTR  X,0                                                 0458
*NOSTRIP:                                                          0459
*   AMNT=X;                         /* SIZE OF CORE GOTTEN FOR STACK */
NOSTRIP  ST    X,AMNT                                              0459
*                                                                  0460
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE LIST FORM                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0460
*   GETLIST(1:GETLEN)=GETCORE(1:GETLEN);                           0460
         L     @14,GETLEN                                          0460
         BCTR  @14,0                                               0460
         EX    @14,@SM00901                                        0460
*   R4=X;                           /* PUT AMT INTO REG 4      Y01993*/
         LR    R4,X                                                0461
*   R5=ADDR(LSDPTR);                /* ADDRESS OF REQUIRED WORD TO   */
         LA    R5,LSDPTR                                           0462
*                                   /* STORE ADDRESS OF CORE         */
*   R1=ADDR(GETLIST);               /* ADDRESS OF LIST               */
*                                                                  0463
         LA    R1,GETLIST                                          0463
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE CONDITLINAL GETMAIN FOR STACK CORE                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0464
*   GEN REFS(R4,R5,R1)SETS(R15);                                   0464
*                                                            /*Y01993*/
         GETMAIN EC,LV=(4),A=(5),MF=(E,(1))
*   RCODESV=R15;                    /* SAVE RETURN CODE              */
         ST    R15,RCODESV                                         0465
*   IF RCODESV>0 THEN               /* IF RETURN CODE = 0,THEN CORE  */
         L     @14,RCODESV                                         0466
         LTR   @14,@14                                             0466
         BP    @RT00466                                            0466
*     GO TO NOSTORGE;               /* WAS OBTAINED                  */
*                                                                  0468
*/********************************************************************/
*/*                                                                  */
*/* BUILD THE IN-CORE COMMAND LIST                                   */
*/*                                                                  */
*/*     MOVE THE COMMANDS AND THEIR PARAMETERS INTO THE GOTTEN AREA  */
*/*     AS THE COMMAND IS BUILT, BUILD THE INPUT SOURCE DESCRIPTOR   */
*/*     TABLE                                                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0468
*BLNKBUF:                                                          0468
*   R0=ADDR(CMDBFR);                /* WHERE TO START BLNK     Y02676*/
BLNKBUF  L     R0,LSDPTR                                           0468
*   R1=X;                           /* HOW MUCH TO BLANK       Y02676*/
         LR    R1,X                                                0469
*   R4=0;                           /* NO FROM LOCATION        Y02676*/
         SR    R4,R4                                               0470
*   R5=BLANK;                       /* 0 LEN AND BLNK PAD      Y02676*/
         L     R5,@CF00763                                         0471
*   GEN REFS(R0,R1,R4,R5)(MVCL R0,R4);/* BLANK BUFFER                */
         MVCL R0,R4
*INSRCBLD:                                                         0473
*                                                                  0473
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE IN STACK PARM                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0473
*   STACKPRM(1:STACKLEN)=STACKLST(1:STACKLEN);                     0473
INSRCBLD L     @14,STACKLEN                                        0473
         BCTR  @14,0                                               0473
         EX    @14,@SM00903                                        0473
*   LSDRCLEN=0;                     /* INDICATE VARIABLE LENGTH    0474
*                                      RECORD                        */
         SR    @14,@14                                             0474
         L     @08,LSDPTR                                          0474
         STH   @14,LSDRCLEN(,@08)                                  0474
*   LSDTOTLN=X-16;                  /* TOTAL LENGTH OF THE COMMAND   */
         LA    @03,16                                              0475
         LR    @07,X                                               0475
         SR    @07,@03                                             0475
         STH   @07,LSDTOTLN(,@08)                                  0475
*                                   /* LIST IS LENGTH OF GOTTEN AREA */
*                                   /* LESS SIZE OF INPUT SOURCE DESC*/
*   Z=LSDPTR+16;                    /* POINT TO FIRST AVAILABLE BYTE */
         AR    @03,@08                                             0476
         ST    @03,Z                                               0476
*                                   /* IN COMMAND LIST               */
*   LSDADATA=Z;                     /* TO INPUT SOURCE DESCRIPTOR    */
         ST    @03,LSDADATA(,@08)                                  0477
*   LSDANEXT=Z;                                                    0478
         ST    @03,LSDANEXT(,@08)                                  0478
*   X=Z+4;                          /* X POINTS TO 1ST BYTE AVAILABLE*/
         AH    @03,@CH00106                                        0479
         LR    X,@03                                               0479
*                                   /* FOR PARAMETERS                */
*   IF OPTPDE>0 THEN                /* IF OPT IS INDICATED           */
         L     @08,PDLADDR                                         0480
         LH    @08,OPTPDE(,@08)                                    0480
         CR    @08,@14                                             0480
         BNH   @RF00480                                            0480
*     DO;                                                          0481
*       IF CHECKOPT(Y)=YES THEN     /* IF CHECK IS IND         Y01193*/
         L     @14,Y                                               0482
         SLA   @14,4                                               0482
         LA    @03,CHECKOPT-16(@14)                                0482
         TM    0(@03),B'00000001'                                  0482
         BNO   @RF00482                                            0482
*         DO;                                                      0483
*           IF OPTPDE=1 THEN                                       0484
         CH    @08,@CH00033                                        0484
         BNE   @RF00484                                            0484
*             DO;                   /* IF OPTION PLI                 */
*               CMDNAME(1:4)=PLICNAME(1:4);/* MOVE PLIC COMMAND      */
         MVC   CMDNAME(4,X),PLICNAME                               0486
*               X=X+5;              /* INCREMENT                     */
         AH    X,@CH00152                                          0487
*               GO TO DSNTST;       /* CONTINUE                      */
         B     DSNTST                                              0488
*             END;                  /* END PLI TEST                  */
*         END;                                                     0490
*       ELSE                        /* IF CHECK OR OPT IS INVALID    */
*         DO;                       /* FOR THE PROMPTER BEING INVOKED*/
         B     @RC00482                                            0491
@RF00482 DS    0H                                                  0492
*           IF OPTPDE=1 THEN        /* SET A SWITCH TO INDICATE      */
         L     @14,PDLADDR                                         0492
         CLC   OPTPDE(2,@14),@CH00033                              0492
         BNE   @RF00492                                            0492
*             CHECKINV=YES;         /* WHICH KEYWORD WAS SPEC  Y01993*/
         OI    CHECKINV,B'00100000'                                0493
*           ELSE                    /* IF CHECK WAS SPECIFIED        */
*             OPTINV=YES;           /* SET CHECKINV SWITCH OTHERWISE */
         B     @RC00492                                            0494
@RF00492 OI    OPTINV,B'00010000'                                  0494
*           INVALID=YES;            /* SET OPTINV SWITCH AND INVALID */
@RC00492 OI    INVALID,B'10000000'                                 0495
*         END;                      /* SWITCH                  Y01993*/
*     END;                                                         0497
@RC00482 DS    0H                                                  0498
*   A=TYPELNG(Y);                   /* LENGTH OF COMMAND NAME        */
@RF00480 L     @14,Y                                               0498
         SLA   @14,4                                               0498
         LH    @08,TYPELNG-16(@14)                                 0498
         LR    A,@08                                               0498
*   CMDNAME(1:A)=                   /* MOVE COMMAND NAME TO COMMAND  */
*       TYPES(Y,1:A);               /* LIST                          */
         LR    @07,A                                               0499
         BCTR  @07,0                                               0499
         LA    @06,TYPES-16(@14)                                   0499
         EX    @07,@SM00906                                        0499
*   X=X+TYPELNG(Y)+1;               /* INCREMENT TO NEXT BYTE IN   0500
*                                      BUFFR                         */
         AR    @08,X                                               0500
         AH    @08,@CH00033                                        0500
         LR    X,@08                                               0500
*DSNTST:                                                           0501
*   IF DSNPRSNT=NO THEN             /*                         Y01993*/
DSNTST   TM    DSNPRSNT,B'00100000'                                0501
         BZ    @RT00501                                            0501
*                                   /* IF NO DSNAME IS PRESENT, THEN */
*     GO TO NODSN2;                 /* PROCESS THE MEMBER NAME       */
*   IF FULLQUAL^=YES THEN           /* IF THE DATA SET NAME IS NOT   */
         TM    FULLQUAL,B'10000000'                                0503
         BNO   @RT00503                                            0503
*     GO TO MOVEDSN;                /* FULLY QUALIFIED JUST MOVE     */
*   LQUOTE='7D'X;                   /* THE DATA SET NAME OTHERWISE   */
         MVI   LQUOTE(X),X'7D'                                     0505
*   X=X+1;                          /* MOVE IN A QUOTE (') AND       */
         AH    X,@CH00033                                          0506
*                                   /* INCREMENT POINTER (X)         */
*MOVEDSN:                                                          0507
*   DSNPARM(1:DSLENG)=              /* MOVE THE NAME INTO THE        */
*       DSNBUF(1:DSLENG);           /* COMMAND BUFFER                */
MOVEDSN  LH    @14,DSLENG                                          0507
         LR    @08,@14                                             0507
         BCTR  @08,0                                               0507
         EX    @08,@SM00908                                        0507
*   X=X+DSLENG;                     /* INCREMENT X                   */
         AR    X,@14                                               0508
*   IF MBRLENG>0 THEN               /* IF MEMBER NAME IS PRESENT     */
         ICM   @14,3,MBRLENG                                       0509
         BNP   @RF00509                                            0509
*     DO;                           /* MOVE IT INTO THE COMMAND      */
*NODSN2:                                                           0511
*       LPAREN='(';                 /* BUFFER ENCLOSED IN PARENS     */
NODSN2   MVI   LPAREN(X),C'('                                      0511
*       X=X+1;                      /* INCREMENT X                   */
         LA    @14,1                                               0512
         AR    X,@14                                               0512
*       MBRPARM(1:MBRLENG)=         /* MOVE MEMBER NAME              */
*           MBRNAME(1:MBRLENG);     /*                               */
         LH    @08,MBRLENG                                         0513
         LR    @03,@08                                             0513
         BCTR  @03,0                                               0513
         EX    @03,@SM00910                                        0513
*       X=X+MBRLENG;                /* INCREMENT X                   */
         AR    X,@08                                               0514
*       RPAREN=')';                 /* PLACE RIGHT PEREN             */
         MVI   RPAREN(X),C')'                                      0515
*       X=X+1;                      /* NEXT BYTE                     */
         AR    X,@14                                               0516
*     END;                          /* END MEMBER TEST               */
*   IF FULLQUAL=YES THEN            /* IF FULLY QUALIFIED PUT  Y01993*/
@RF00509 TM    FULLQUAL,B'10000000'                                0518
         BNO   @RF00518                                            0518
*     DO;                           /* CLOSING QUOTE INTO            */
*       RQUOTE='7D'X;               /* COMMAND BUFFER                */
         MVI   RQUOTE(X),X'7D'                                     0520
*       X=X+1;                      /* INCREMENT X                   */
         AH    X,@CH00033                                          0521
*     END;                          /* END FULLY QUALIFY TEST        */
*PASS:                                                             0523
*   IF PASSLENG^=0 THEN                                            0523
@RF00518 DS    0H                                                  0523
PASS     LH    @14,PASSLENG                                        0523
         LTR   @14,@14                                             0523
         BZ    @RF00523                                            0523
*     DO;                           /* IF A PASSWORD IS PRESENT      */
*       SLASH='/';                  /* PLACE SLASH IN BUFFER         */
         MVI   SLASH(X),C'/'                                       0525
*       X=X+1;                      /* INCREMENT X                   */
         AH    X,@CH00033                                          0526
*       PASSPARM(1:PASSLENG)=       /* MOVE THE NAME TO THE BUFFER   */
*           PASSNAME(1:PASSLENG);   /* MOVE THE NAME TO THE BUFFER   */
         LR    @08,@14                                             0527
         BCTR  @08,0                                               0527
         EX    @08,@SM00912                                        0527
*       X=X+PASSLENG;               /* INCREMENT FOR PASSWORD        */
         AR    X,@14                                               0528
*     END;                          /* END PASSWORD TEST             */
*   IF MSGPDE>0 THEN                /* IF THE LMSG/SMSG PARAMETER HAS*/
@RF00523 L     @14,PDLADDR                                         0530
         LH    @14,MSGPDE(,@14)                                    0530
         LTR   @14,@14                                             0530
         BNP   @RF00530                                            0530
*     IF LMSGSMSG(Y)=YES THEN       /* BEEN SPEC AND IF IT IS  Y01993*/
         L     @08,Y                                               0531
         SLA   @08,4                                               0531
         LA    @03,LMSGSMSG-16(@08)                                0531
         TM    0(@03),B'01000000'                                  0531
         BNO   @RF00531                                            0531
*       DO;                         /* ALLOWED, MOVE THE APPROPRIATE */
*         X=X+1;                    /* TO ALLOW FOR BLANK 6          */
         LA    @08,1                                               0533
         AR    X,@08                                               0533
*         IF MSGPDE=1 THEN          /* PARAMETER TO THE BUFFER       */
         CR    @14,@08                                             0534
         BNE   @RF00534                                            0534
*           MSGBUFF=LMSG;           /* MOVE INTO LONG MSG BUFF       */
         MVC   MSGBUFF(4,X),LMSG                                   0535
*         ELSE                      /* IF NOT LONG MSG               */
*           MSGBUFF=SMSG;           /* DEFAULT SHORT MSG             */
         B     @RC00534                                            0536
@RF00534 MVC   MSGBUFF(4,X),SMSG                                   0536
*         X=X+4;                    /* INCREMENT X                   */
@RC00534 AH    X,@CH00106                                          0537
*       END;                        /* END MSG OPTION TEST           */
*     ELSE                          /* IF LONG MSG OR                */
*       DO;                         /* SHORT MSG IS                  */
         B     @RC00531                                            0539
@RF00531 DS    0H                                                  0540
*         IF MSGPDE=1 THEN          /* INVALID FOR THE               */
         L     @14,PDLADDR                                         0540
         CLC   MSGPDE(2,@14),@CH00033                              0540
         BNE   @RF00540                                            0540
*           LMSGINV=YES;            /* PROMPTER BEING INVOKED  Y01993*/
         OI    LMSGINV,B'00100000'                                 0541
*         ELSE                      /* SET THE SWITCH INDICATING     */
*           SMSGINV=YES;            /* WHICH KEYWORD WAS       Y01993*/
         B     @RC00540                                            0542
@RF00540 OI    SMSGINV,B'00010000'                                 0542
*         INVALID=YES;              /* SPECIFIED AND SET THE   Y01993*/
@RC00540 OI    INVALID,B'10000000'                                 0543
*       END;                        /* INVALID OPTION SWITCH         */
*   IF PRECPDE>0 THEN               /* IF THE LPREC/SPREC PARAMETER  */
@RC00531 DS    0H                                                  0545
@RF00530 L     @14,PDLADDR                                         0545
         LH    @14,PRECPDE(,@14)                                   0545
         LTR   @14,@14                                             0545
         BNP   @RF00545                                            0545
*     IF PRECPARM(Y)=YES THEN       /* HAS BEEN SPECIF AND IS  Y01993*/
         L     @08,Y                                               0546
         SLA   @08,4                                               0546
         LA    @03,PRECPARM-16(@08)                                0546
         TM    0(@03),B'00010000'                                  0546
         BNO   @RF00546                                            0546
*       DO;                         /* ALLOWED, MOVE THE APPROPRIATE */
*         X=X+1;                    /* TO ALLOW FOR BLANK            */
         LA    @08,1                                               0548
         AR    X,@08                                               0548
*         IF PRECPDE=1 THEN         /* PARAMETR TO THE BUFFER        */
         CR    @14,@08                                             0549
         BNE   @RF00549                                            0549
*           PRECPRM=LPREC;          /* LONG PRECISION                */
         MVC   PRECPRM(5,X),LPREC                                  0550
*         ELSE                      /* DEFAULT SHORT PREC      Y01993*/
*           PRECPRM=SPREC;          /* MOVE INTO BUFFER              */
         B     @RC00549                                            0551
@RF00549 MVC   PRECPRM(5,X),SPREC                                  0551
*         X=X+5;                    /* T INCREMENT X                 */
@RC00549 AH    X,@CH00152                                          0552
*       END;                        /* END PRECISION TEST            */
*     ELSE                          /* IF LONG PRECISION (LPREC) OR  */
*       DO;                         /* SHORT PRECISION (SPREC) IS    */
         B     @RC00546                                            0554
@RF00546 DS    0H                                                  0555
*         IF PRECPDE=1 THEN         /* INVALID FOR THE               */
         L     @14,PDLADDR                                         0555
         CLC   PRECPDE(2,@14),@CH00033                             0555
         BNE   @RF00555                                            0555
*           LPRECINV=YES;           /* PROMPTER BEING INVOKED  Y01993*/
         OI    LPRECINV,B'00000010'                                0556
*         ELSE                      /* SET THE SWITCH INDICATING     */
*           SPRECINV=YES;           /* WHICH KEYWORD WAS       Y01993*/
         B     @RC00555                                            0557
@RF00555 OI    SPRECINV,B'00000001'                                0557
*         INVALID=YES;              /* SPECIFIED AND SET THE   Y01993*/
@RC00555 OI    INVALID,B'10000000'                                 0558
*       END;                        /* INVALID OPTION SWITCH         */
*   IF GOPDE>0 THEN                 /* IF GO SPECIFIED THEN    Y02676*/
@RC00546 DS    0H                                                  0560
@RF00545 L     @14,PDLADDR                                         0560
         LH    @14,GOPDE(,@14)                                     0560
         LTR   @14,@14                                             0560
         BNP   @RF00560                                            0560
*     IF GOBIT(Y)=YES THEN          /* AND IS ALLOWED THEN     Y02676*/
         L     @08,Y                                               0561
         SLA   @08,4                                               0561
         LA    @03,GOBIT-16(@08)                                   0561
         TM    0(@03),B'01000000'                                  0561
         BNO   @RF00561                                            0561
*       IF GOPDE=1 THEN             /* IF 'GO' THEN            Y02676*/
         LA    @08,1                                               0562
         CR    @14,@08                                             0562
         BNE   @RF00562                                            0562
*         DO;                       /* MOVE IN 'GO'            Y02676*/
*           X=X+1;                  /* FOR BLANK               Y02676*/
         AR    X,@08                                               0564
*           GOPRM=GO;               /* 'GO'                    Y02676*/
         MVC   GOPRM(2,X),GO                                       0565
*           X=X+2;                  /* UPDATE POINTER          Y02676*/
         AH    X,@CH00078                                          0566
*         END;                      /*                         Y02676*/
*       ELSE                        /* OTHERWIZE ASSUME NOGO   Y02676*/
*         DO;                       /* MOVE IN 'NOGO'          Y02676*/
         B     @RC00562                                            0568
@RF00562 DS    0H                                                  0569
*           X=X+1;                  /* FOR BLANK               Y02676*/
         AH    X,@CH00033                                          0569
*           NOGOPRM=NOGO;           /* 'NOGO'                  Y02676*/
         MVC   NOGOPRM(4,X),NOGO                                   0570
*           X=X+4;                  /* UPDATE POINTER          Y02676*/
         AH    X,@CH00106                                          0571
*         END;                      /*                         Y02676*/
*     ELSE                          /* INVALID FOR THIS COMP   Y02676*/
*       DO;                         /* SET INVALID SWITCHES    Y02676*/
         B     @RC00561                                            0573
@RF00561 DS    0H                                                  0574
*         INVALID=YES;              /*                         Y02676*/
         OI    INVALID,B'10000000'                                 0574
*         IF GOPDE=1 THEN           /* SET APPROPRIATE         Y02676*/
         L     @14,PDLADDR                                         0575
         CLC   GOPDE(2,@14),@CH00033                               0575
         BNE   @RF00575                                            0575
*           GOINV=YES;              /* INVALID KYWD SWITCH     Y02676*/
         OI    GOINV,B'00000100'                                   0576
*         ELSE                      /*                         Y02676*/
*           NOGOINV=YES;            /*                         Y02676*/
         B     @RC00575                                            0577
@RF00575 OI    NOGOINV,B'00000010'                                 0577
*       END;                        /* END GO/NOGO             Y02676*/
@RC00575 DS    0H                                                  0579
*   IF PAUSPDE>0 THEN               /* IF PAUSE SPECIFIED      Y02676*/
@RC00561 DS    0H                                                  0579
@RF00560 L     @14,PDLADDR                                         0579
         LH    @14,PAUSPDE(,@14)                                   0579
         LTR   @14,@14                                             0579
         BNP   @RF00579                                            0579
*     IF PAUSBIT(Y)=YES THEN        /* AND WAS ALLOWED,        Y02676*/
         L     @08,Y                                               0580
         SLA   @08,4                                               0580
         LA    @03,PAUSBIT-16(@08)                                 0580
         TM    0(@03),B'00100000'                                  0580
         BNO   @RF00580                                            0580
*       IF PAUSPDE=1 THEN           /* MOVE IN APPROP KYWD     Y02676*/
         LA    @08,1                                               0581
         CR    @14,@08                                             0581
         BNE   @RF00581                                            0581
*         DO;                       /*                         Y02676*/
*           X=X+1;                  /* ALLOW FOR BLANK         Y02676*/
         AR    X,@08                                               0583
*           PAUSPRM=PAUSE;          /* 'PAUSE'                 Y02676*/
         MVC   PAUSPRM(5,X),PAUSE                                  0584
*           X=X+5;                  /* UPDATE PTR              Y02676*/
         AH    X,@CH00152                                          0585
*         END;                      /*                         Y02676*/
*       ELSE                        /* ASSUME NOPAUSE          Y02676*/
*         DO;                       /*                         Y02676*/
         B     @RC00581                                            0587
@RF00581 DS    0H                                                  0588
*           X=X+1;                  /* FOR BLANK               Y02676*/
         AH    X,@CH00033                                          0588
*           NOPAUPRM=NOPAUSE;       /* 'NOPAUSE'               Y02676*/
         MVC   NOPAUPRM(7,X),NOPAUSE                               0589
*           X=X+7;                  /* UPDATE PTR              Y02676*/
         AH    X,@CH00172                                          0590
*         END;                      /*                         Y02676*/
*     ELSE                          /* INVALID FOR COMP        Y02676*/
*       DO;                         /* SET INVALID SWITCHES    Y02676*/
         B     @RC00580                                            0592
@RF00580 DS    0H                                                  0593
*         INVALID=YES;              /*                         Y02676*/
         OI    INVALID,B'10000000'                                 0593
*         IF PAUSPDE=1 THEN         /* SET APPROPRIATE FLAG    Y02676*/
         L     @14,PDLADDR                                         0594
         CLC   PAUSPDE(2,@14),@CH00033                             0594
         BNE   @RF00594                                            0594
*           PAUSINV=YES;            /*                         Y02676*/
         OI    PAUSINV,B'00000001'                                 0595
*         ELSE                      /*                         Y02676*/
*           NOPAUINV=YES;           /*                         Y02676*/
         B     @RC00594                                            0596
@RF00594 OI    NOPAUINV,B'10000000'                                0596
*       END;                        /* END PAUSE/NOPAUSE       Y02676*/
@RC00594 DS    0H                                                  0598
*   IF STOREPDE>0 THEN              /* IF STORE SPECIFIED      Y02676*/
@RC00580 DS    0H                                                  0598
@RF00579 L     @14,PDLADDR                                         0598
         LH    @14,STOREPDE(,@14)                                  0598
         LTR   @14,@14                                             0598
         BNP   @RF00598                                            0598
*     IF STORBIT(Y)=YES THEN        /* AND IS ALLOWED          Y02676*/
         L     @08,Y                                               0599
         SLA   @08,4                                               0599
         LA    @03,STORBIT-16(@08)                                 0599
         TM    0(@03),B'00010000'                                  0599
         BNO   @RF00599                                            0599
*       IF STOREPDE=1 THEN          /* MOVE IN APPROPRIATE     Y02676*/
         LA    @08,1                                               0600
         CR    @14,@08                                             0600
         BNE   @RF00600                                            0600
*         DO;                       /* KEYWORD                 Y02676*/
*           X=X+1;                  /* FOR BLANK               Y02676*/
         AR    X,@08                                               0602
*           STOREPRM=STORE;         /* 'STORE'                 Y02676*/
         MVC   STOREPRM(5,X),STORE                                 0603
*           X=X+5;                  /* UPDATE POINTER          Y02676*/
         AH    X,@CH00152                                          0604
*         END;                      /*                         Y02676*/
*       ELSE                        /* ASSUME NOSTORE          Y02676*/
*         DO;                       /*                         Y02676*/
         B     @RC00600                                            0606
@RF00600 DS    0H                                                  0607
*           X=X+1;                  /* FOR BLANK               Y02676*/
         AH    X,@CH00033                                          0607
*           NOSTOPRM=NOSTORE;       /* 'NOSTORE'               Y02676*/
         MVC   NOSTOPRM(7,X),NOSTORE                               0608
*           X=X+7;                  /* UPDATE POINTER          Y02676*/
         AH    X,@CH00172                                          0609
*         END;                      /*                         Y02676*/
*     ELSE                          /* INVALID FOR THIS COMP   Y02676*/
*       DO;                         /*                         Y02676*/
         B     @RC00599                                            0611
@RF00599 DS    0H                                                  0612
*         INVALID=YES;              /* SET INVALID SWITCHED    Y02676*/
         OI    INVALID,B'10000000'                                 0612
*         IF STOREPDE=1 THEN        /*                         Y02676*/
         L     @14,PDLADDR                                         0613
         CLC   STOREPDE(2,@14),@CH00033                            0613
         BNE   @RF00613                                            0613
*           STORINV=YES;            /*                         Y02676*/
         OI    STORINV,B'01000000'                                 0614
*         ELSE                      /*                         Y02676*/
*           NOSTINV=YES;            /*                         Y02676*/
         B     @RC00613                                            0615
@RF00613 OI    NOSTINV,B'00100000'                                 0615
*       END;                        /* END STORE/NOSTORE       Y02676*/
@RC00613 DS    0H                                                  0617
*   IF SRCPDE>0 THEN                /* IS SRC/OBJ SPECIFIED    Y02676*/
@RC00599 DS    0H                                                  0617
@RF00598 L     @14,PDLADDR                                         0617
         LH    @14,SRCPDE(,@14)                                    0617
         LTR   @14,@14                                             0617
         BNP   @RF00617                                            0617
*     IF SRCBIT(Y)=YES THEN         /* AND ALLOWED, MOV IN     Y02676*/
         L     @08,Y                                               0618
         SLA   @08,4                                               0618
         LA    @03,SRCBIT-16(@08)                                  0618
         TM    0(@03),B'00001000'                                  0618
         BNO   @RF00618                                            0618
*       IF SRCPDE=1 THEN            /* APPROPRIATE KEYWORD     Y02676*/
         LA    @08,1                                               0619
         CR    @14,@08                                             0619
         BNE   @RF00619                                            0619
*         DO;                       /*                         Y02676*/
*           X=X+1;                  /* FOR BLANK               Y02676*/
         AR    X,@08                                               0621
*           SRCPRM=SOURCE;          /* 'SOURCE'                Y02676*/
         MVC   SRCPRM(6,X),SOURCE                                  0622
*           X=X+6;                  /* UPDATE PTR              Y02676*/
         AH    X,@CH00104                                          0623
*         END;                      /*                         Y02676*/
*       ELSE                        /* ASSUME NOSTORE          Y02676*/
*         DO;                       /*                         Y02676*/
         B     @RC00619                                            0625
@RF00619 DS    0H                                                  0626
*           X=X+1;                  /* FOR BLANK               Y02676*/
         AH    X,@CH00033                                          0626
*           OBJPRM=OBJECT;          /* 'OBJECT'                Y02676*/
         MVC   OBJPRM(6,X),OBJECT                                  0627
*           X=X+6;                  /* UPDATE POINTER          Y02676*/
         AH    X,@CH00104                                          0628
*         END;                      /*                         Y02676*/
*     ELSE                          /* INVALID FOR THIS COMP   Y02676*/
*       DO;                         /* SET INVALID SWITCHES    Y02676*/
         B     @RC00618                                            0630
@RF00618 DS    0H                                                  0631
*         INVALID=YES;              /*                         Y02676*/
         OI    INVALID,B'10000000'                                 0631
*         IF SRCPDE=1 THEN          /* FOR APPROPRIATE KEYWRD  Y02676*/
         L     @14,PDLADDR                                         0632
         CLC   SRCPDE(2,@14),@CH00033                              0632
         BNE   @RF00632                                            0632
*           SRCINV=YES;             /*                         Y02676*/
         OI    SRCINV,B'00010000'                                  0633
*         ELSE                      /*                         Y02676*/
*           OBJINV=YES;             /*                         Y02676*/
         B     @RC00632                                            0634
@RF00632 OI    OBJINV,B'00001000'                                  0634
*       END;                        /* END SOURCE/OBJECT       Y02676*/
@RC00632 DS    0H                                                  0636
*   IF SIZPDE>0 THEN                /* IF SIZE SPECIFIED AND   Y02676*/
@RC00618 DS    0H                                                  0636
@RF00617 L     @14,PDLADDR                                         0636
         ICM   @08,3,SIZPDE(@14)                                   0636
         BNP   @RF00636                                            0636
*     IF SIZBIT(Y)=YES THEN         /* IS ALLOWED THEN MOVE    Y02676*/
         L     @08,Y                                               0637
         SLA   @08,4                                               0637
         LA    @03,SIZBIT-16(@08)                                  0637
         TM    0(@03),B'00000100'                                  0637
         BNO   @RF00637                                            0637
*       DO;                         /* IN SIZE(NNN)            Y02676*/
*         X=X+1;                    /* FOR BLANK               Y02676*/
         LA    @08,1                                               0639
         AR    X,@08                                               0639
*         SIZEPRM=SIZZ;             /* 'SIZE'                  Y02676*/
         MVC   SIZEPRM(4,X),SIZZ                                   0640
*         X=X+4;                    /* UPDATE POINTER          Y02676*/
         AH    X,@CH00106                                          0641
*         LPAREN='(';               /* LEFT PAREN              Y02676*/
         MVI   LPAREN(X),C'('                                      0642
*         X=X+1;                    /* FOR PAREN               Y02676*/
         AR    X,@08                                               0643
*         SIZEPRM(1:SIZLEN)=SIZPTR->SIZEPRM(1:SIZLEN);             0644
         LH    @03,SIZLEN(,@14)                                    0644
         LR    @07,@03                                             0644
         BCTR  @07,0                                               0644
         L     @14,SIZPTR(,@14)                                    0644
         EX    @07,@SM00916                                        0644
*         X=X+SIZLEN;               /* MOVE IN NUMBERS AND     Y02676*/
         AR    X,@03                                               0645
*         RPAREN=')';               /* UPDATE POINTER-')'      Y02676*/
         MVI   RPAREN(X),C')'                                      0646
*         X=X+1;                    /* FOR RIGHT PAREN         Y02676*/
         AR    X,@08                                               0647
*       END;                        /*                         Y02676*/
*     ELSE                          /* INVALID FOR THIS COMP   Y02676*/
*       DO;                         /* SET INVALID SWITCHES    Y02676*/
         B     @RC00637                                            0649
@RF00637 DS    0H                                                  0650
*         INVALID=YES;              /*                         Y02676*/
         OI    INVALID,B'10000000'                                 0650
*         SIZINV=YES;               /*                         Y02676*/
         OI    SIZINV,B'00000100'                                  0651
*       END;                        /*                         Y02676*/
*   IF TESTPDE>0 THEN               /* IF TEST SPECIFIED AND         */
@RC00637 DS    0H                                                  0653
@RF00636 L     @14,PDLADDR                                         0653
         LH    @14,TESTPDE(,@14)                                   0653
         LTR   @14,@14                                             0653
         BNP   @RF00653                                            0653
*     IF TESTPARM(Y)=YES THEN       /* HAS BEEN SPEC AND IT IS Y01993*/
         L     @08,Y                                               0654
         SLA   @08,4                                               0654
         LA    @03,TESTPARM-16(@08)                                0654
         TM    0(@03),B'00100000'                                  0654
         BNO   @RF00654                                            0654
*       DO;                         /* ALLOWED, MOVE THE APPROPRIATE */
*         X=X+1;                    /* TO ALLOW FOR BLANK            */
         LA    @08,1                                               0656
         AR    X,@08                                               0656
*         IF TESTPDE=1 THEN         /* PARAMETR TO THE BUFFER        */
         CR    @14,@08                                             0657
         BNE   @RF00657                                            0657
*           DO;                     /* INCREMENT X ACCORDINGLY       */
*             TESTPRM=TEST;         /* MOVE IN TEST                  */
         MVC   TESTPRM(4,X),TEST                                   0659
*             X=X+4;                /* INCREMENT X                   */
         AH    X,@CH00106                                          0660
*             GO TO BUILD1;         /* GO TO BUILD                   */
         B     BUILD1                                              0661
*           END;                    /* END TEST FOR TEST             */
*         NOTESTPR=NOTEST;          /* DEFAULT IS NOTEST             */
@RF00657 MVC   NOTESTPR(6,X),NOTEST                                0663
*         X=X+6;                    /* INCREMENT X                   */
         AH    X,@CH00104                                          0664
*       END;                        /* END OPTION TEST               */
*     ELSE                          /* IF TEST OR NOTEST             */
*       DO;                         /* IS SPECIFIED AND IS           */
         B     @RC00654                                            0666
@RF00654 DS    0H                                                  0667
*         IF TESTPDE=1 THEN         /* INVALID FOR THE               */
         L     @14,PDLADDR                                         0667
         CLC   TESTPDE(2,@14),@CH00033                             0667
         BNE   @RF00667                                            0667
*           TESTINV=YES;            /* PROMPTER BEING INVOKED  Y01993*/
         OI    TESTINV,B'00001000'                                 0668
*         ELSE                      /* SET THE SWITCH INDICATING     */
*           NOTSTINV=YES;           /* WHICH KEYWORD WAS       Y01993*/
         B     @RC00667                                            0669
@RF00667 OI    NOTSTINV,B'00000100'                                0669
*         INVALID=YES;              /* SPECIFIED AND SET THE   Y01993*/
@RC00667 OI    INVALID,B'10000000'                                 0670
*       END;                        /* INVALID OPTION SWITCH         */
*BUILD1:                            /* IF THE STANDARD/FREE PARAMETER*/
*   IF FORMPDE>0 THEN               /* HAS BEEN SPECIFIED AND  Y01993*/
@RC00654 DS    0H                                                  0672
@RF00653 DS    0H                                                  0672
BUILD1   L     @14,PDLADDR                                         0672
         LH    @14,FORMPDE(,@14)                                   0672
         LTR   @14,@14                                             0672
         BNP   @RF00672                                            0672
*     IF FORM(Y)=YES THEN           /* ALLOWED, MOVE THE APPROPRIATE */
         L     @08,Y                                               0673
         SLA   @08,4                                               0673
         LA    @03,FORM-16(@08)                                    0673
         TM    0(@03),B'00001000'                                  0673
         BNO   @RF00673                                            0673
*       DO;                         /* PARAMETER TO THE BUFFER.      */
*         X=X+1;                    /* TO ALLOW FOR BLANK            */
         LA    @08,1                                               0675
         AR    X,@08                                               0675
*         IF FORMPDE=1 THEN                                        0676
         CR    @14,@08                                             0676
         BNE   @RF00676                                            0676
*           DO;                                                    0677
*             FIXEDPRM=FIXD;        /* MOVE IN FIXED OPTION    Y01993*/
         MVC   FIXEDPRM(5,X),FIXD                                  0678
*             X=X+5;                /* INCREMENT X                   */
         AH    X,@CH00152                                          0679
*             GO TO BUILD2;         /* BUILD CONTINE                 */
         B     BUILD2                                              0680
*           END;                    /* END FIXED TEST                */
*         FREEPARM=FREE;            /* DEFAULT IS FREE               */
@RF00676 MVC   FREEPARM(4,X),FREE                                  0682
*         X=X+4;                    /* INCREMENT X                   */
         AH    X,@CH00106                                          0683
*       END;                        /* END FIXED OPTION TEST         */
*     ELSE                          /* IF FIXED OR FREE              */
*       DO;                         /* IS SPECIFIED AND IS           */
         B     @RC00673                                            0685
@RF00673 DS    0H                                                  0686
*         IF FORMPDE=1 THEN         /* INVALID FOR THE               */
         L     @14,PDLADDR                                         0686
         CLC   FORMPDE(2,@14),@CH00033                             0686
         BNE   @RF00686                                            0686
*           FIXEDINV=YES;           /* PROMPTER BEING INVOKED  Y01993*/
         OI    FIXEDINV,B'10000000'                                0687
*         ELSE                      /* SET THE SWITCH INDICATING     */
*           FREEINV=YES;            /* WHICH KEYWORD WAS       Y01993*/
         B     @RC00686                                            0688
@RF00686 OI    FREEINV,B'01000000'                                 0688
*         INVALID=YES;              /* SPECIFIED AND SET THE   Y01993*/
@RC00686 OI    INVALID,B'10000000'                                 0689
*       END;                        /* INVALID OPTION SWITCH         */
*                                                                  0690
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR OPTIONS IF PRESENT PROCESS THAN GO CHECK PARMS      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0691
*   IF OPTPDE>0 THEN                                               0691
@RC00673 DS    0H                                                  0691
@RF00672 L     @14,PDLADDR                                         0691
         LH    @14,OPTPDE(,@14)                                    0691
         LTR   @14,@14                                             0691
         BNP   @RF00691                                            0691
*     IF CHECKOPT(Y)=YES THEN       /*                         Y01993*/
         L     @08,Y                                               0692
         SLA   @08,4                                               0692
         LA    @03,CHECKOPT-16(@08)                                0692
         TM    0(@03),B'00000001'                                  0692
         BNO   @RF00692                                            0692
*       IF OPTPDE=1 THEN                                           0693
         CH    @14,@CH00033                                        0693
         BE    @RT00693                                            0693
*         GO TO PARMATCH;                                          0694
*BUILD2:                                                           0695
*   CONTRLBF=X-Z;                   /* LENGTH OF COMMAND TO CONTRLBF */
@RF00692 DS    0H                                                  0695
@RF00691 DS    0H                                                  0695
BUILD2   L     @14,Z                                               0695
         LR    @08,X                                               0695
         SR    @08,@14                                             0695
         STH   @08,CONTRLBF(,@14)                                  0695
*   CONTRESD=0;                     /* ZERO OTHER PORTION            */
         SR    @08,@08                                             0696
         STH   @08,CONTRESD(,@14)                                  0696
*   Z=X;                            /* RESET Z FOR NEXT COMMAND      */
         ST    X,Z                                                 0697
*   X=X+4;                          /* RESET X FOR NEXT AVAIL BYTE   */
         AH    X,@CH00106                                          0698
*   IF WHENCMND(Y)=YES              /* IF THE WHEN COMMAND IS  Y01993*/
*     THEN                                                         0699
         L     @14,Y                                               0699
         SLA   @14,4                                               0699
         LA    @08,WHENCMND-16(@14)                                0699
         TM    0(@08),B'01000000'                                  0699
         BNO   @RF00699                                            0699
*     DO;                           /* NECESSARY FOR THIS COMPILE    */
*       WHENIFCD=WHENEND;           /* SEQUENCE,PLACE IT IN COMMAND  */
         MVC   WHENIFCD(16,X),WHENEND                              0701
*       CNTRLBF='0014'X;            /* LENGTH OF WHEN COMMAND        */
         L     @14,Z                                               0702
         MVC   CNTRLBF(2,@14),@CB00852                             0702
*       CNTRESD='0000'X;            /* CONTROL INFORMATION           */
         MVC   CNTRESD(2,@14),@CB00391                             0703
*       X=X+20;                                                    0704
         LA    @08,20                                              0704
         AR    X,@08                                               0704
*       Z=Z+20;                     /* SET X AND Z FOR NEXT COMMAND  */
         AR    @14,@08                                             0705
         ST    @14,Z                                               0705
*     END;                                                         0706
*   IF LOADCMD(Y)=NO THEN           /* IF THE LOADGO COMMAND IS NOT  */
@RF00699 L     @14,Y                                               0707
         SLA   @14,4                                               0707
         LA    @08,LOADCMD-16(@14)                                 0707
         TM    0(@08),B'00100000'                                  0707
         BZ    @RT00707                                            0707
*     GO TO PARMATCH;               /* REQUIRED FOR THIS COMMAND SE- */
*                                   /* QUENCE , THE LIST IS COMPLETE */
*   LOADCMND=LOADGO;                /* PLACE LOADGO ( IN THE BUFFER  */
         MVC   LOADCMND(8,X),LOADGO                                0709
*   X=X+8;                          /* INCREMENT X Y01156            */
         AH    X,@CH00054                                          0710
*   IF DSNPRSNT=NO THEN             /* IF NO DSNAME IS PRESENT, THEN */
         TM    DSNPRSNT,B'00100000'                                0711
         BZ    @RT00711                                            0711
*     GO TO NODSN3;                 /* THEN PROCESS THE MEMBER NAME  */
*   IF FULLQUAL=YES                 /* IF THE DATA SET NAME IS Y01993*/
*     THEN                          /* FULLY QUALIFIED THEN    Y01993*/
         TM    FULLQUAL,B'10000000'                                0713
         BNO   @RF00713                                            0713
*     DO;                           /* CHECK                   Y01993*/
*       IF DSLEN+PSCBUSRL>39        /* IF THE DATA SET NAME +  Y01993*/
*         THEN                      /* '.OBJ' IS GREATER THAN  Y01993*/
         L     @14,PDLADDR                                         0715
         LH    @14,DSLEN(,@14)                                     0715
         L     @08,CPPLPTR                                         0715
         L     @08,CPPLPSCB(,@08)                                  0715
         SR    @03,@03                                             0715
         IC    @03,PSCBUSRL(,@08)                                  0715
         LR    @07,@14                                             0715
         AR    @07,@03                                             0715
         CH    @07,@CH00854                                        0715
         BNH   @RF00715                                            0715
*         DO;                       /* 44 CHARACTERS, IF SO    Y01993*/
*           W1=ADDR(SEG05);         /* ISSUE AN ERROR MSG AND  Y01993*/
         LA    @06,SEG05                                           0717
         ST    @06,W1                                              0717
*           W2=ADDR(SEG05B);        /* TERMINATE PROCESSING    Y01993*/
         LA    @06,SEG05B                                          0718
         ST    @06,W2                                              0718
*           W3=ADDR(SEG05A);        /* SEG05 IS FIRST HALF     Y01993*/
         LA    @06,SEG05A                                          0719
         ST    @06,W3                                              0719
*           W4=0;                   /* SEG05B HAS DATA SET NAMEY01993*/
         SR    @06,@06                                             0720
         ST    @06,W4                                              0720
*           W5=0;                   /* SEG05A HAS LAST HALF    Y01993*/
         ST    @06,W5                                              0721
*           RTCODE12=YES;           /* SET RUN CANNOT CONTINUE Y01993*/
         OI    RTCODE12,B'00000100'                                0722
*           LEN5B=DSLEN+PSCBUSRL+1; /* MOVE LENGTH IN          Y01993*/
         LA    @06,1                                               0723
         AR    @07,@06                                             0723
         STH   @07,LEN5B                                           0723
*           NAME5B=PSCBUSER;        /* MOVE IN USERID          Y01993*/
         MVI   NAME5B+7,C' '                                       0724
         MVC   NAME5B+8(44),NAME5B+7                               0724
         MVC   NAME5B(7),PSCBUSER(@08)                             0724
*           NAME5B(PSCBUSRL+1)='.'; /* MOVE IN PERIOD          Y01993*/
         LA    @08,NAME5B(@03)                                     0725
         MVI   0(@08),C'.'                                         0725
*           NAME5B(PSCBUSRL+2:PSCBUSRL+1+DSLEN)=DSNBUF(1:DSLEN);/* 0726
*                                      MOVE IN DATA SET NAME   Y01993*/
         LA    @08,NAME5B+1(@03)                                   0726
         AR    @06,@03                                             0726
         AR    @06,@14                                             0726
         SR    @06,@03                                             0726
         BCTR  @06,0                                               0726
         BCTR  @06,0                                               0726
         EX    @06,@SM00918                                        0726
*           CALL PUTINTFC;          /* ISSUE MESSAGE           Y01993*/
         BAL   @14,PUTINTFC                                        0727
*         END;                      /* END OF > 44 PROCESSING  Y01993*/
*       ELSE                                                       0729
*         ;                         /*                         Y01993*/
@RF00715 DS    0H                                                  0730
*     END;                          /*                         Y01993*/
*   ELSE                            /* IF THE DSNAME IS NOT    Y01993*/
*     DO;                           /* FULLY QUALIFIED, DROP THE     */
         B     @RC00713                                            0731
@RF00713 DS    0H                                                  0732
*       DSLENG=DSLENG-TYPELNG(Y)-1; /* RIGHTMOST QUALIFIER           */
         L     @14,Y                                               0732
         SLA   @14,4                                               0732
         LH    @08,DSLENG                                          0732
         SH    @08,TYPELNG-16(@14)                                 0732
         BCTR  @08,0                                               0732
         STH   @08,DSLENG                                          0732
*     END;                                                         0733
*   DSNPARM(1:DSLENG)=              /* MOVE THE DATA SET NAME INTO   */
*       DSNBUF(1:DSLENG);           /* THE COMMAND BUFFER            */
@RC00713 LH    @14,DSLENG                                          0734
         LR    @08,@14                                             0734
         BCTR  @08,0                                               0734
         EX    @08,@SM00908                                        0734
*   X=X+DSLENG;                     /* INCREMENT X                   */
         AR    X,@14                                               0735
*   DOTOBJ=OBJQUAL;                 /* QUALIFY LOADGO DATASET NAME 0736
*                                      WITH .OBJ M4249               */
         MVC   DOTOBJ(4,X),OBJQUAL                                 0736
*   X=X+4;                          /* X PASS .OBJ M4249             */
         AH    X,@CH00106                                          0737
*   IF MBRLENG>0 THEN                                              0738
         ICM   @14,3,MBRLENG                                       0738
         BNP   @RF00738                                            0738
*     DO;                           /* IF A MEMBER NAME IS PRESENT   */
*NODSN3:                                                           0740
*       LPAREN='(';                 /* THEN PUT A LEFT PAREN IN      */
NODSN3   MVI   LPAREN(X),C'('                                      0740
*       X=X+1;                      /* COMMAND BUFFER, INCREMENT X   */
         LA    @14,1                                               0741
         AR    X,@14                                               0741
*       MBRPARM(1:MBRLENG)=         /* MOVE MEMBER NAME              */
*           MBRNAME(1:MBRLENG);     /* INTO THE COMMAND BUFFER,      */
         LH    @08,MBRLENG                                         0742
         LR    @03,@08                                             0742
         BCTR  @03,0                                               0742
         EX    @03,@SM00910                                        0742
*       X=X+MBRLENG;                /* INCREMENT X, PUT              */
         AR    X,@08                                               0743
*       RPAREN=')';                 /* A RIGHT PAREN IN COMMAND      */
         MVI   RPAREN(X),C')'                                      0744
*       X=X+1;                      /* BUFFER AND INCREMENT X        */
         AR    X,@14                                               0745
*     END;                          /* END MEMBER PROCESSIN          */
*   RPAREN=')';                     /* END DSNAME PROCESSING   Y00973*/
@RF00738 MVI   RPAREN(X),C')'                                      0747
*   X=X+1;                          /* UPDATE PTR              Y00973*/
         AH    X,@CH00033                                          0748
*PARMATCH:                                                         0749
*   IF PARMLEN=0 THEN               /* IF PARM IS NULL               */
PARMATCH L     @14,PDLADDR                                         0749
         LH    @08,PARMLEN(,@14)                                   0749
         LTR   @08,@08                                             0749
         BZ    @RT00749                                            0749
*     GO TO FORTTEST;               /* NO PARM PROCESSING            */
*   IF PARMPRES=YES THEN            /* IF A PARM STRNG HAS     Y01993*/
         TM    PARMPRES(@14),B'10000000'                           0751
         BNO   @RF00751                                            0751
*     IF PRMSTRNG(Y)=YES THEN       /* BEEN SPECIFIED MOVE IT TO THE */
         L     @03,Y                                               0752
         SLA   @03,4                                               0752
         LA    @07,PRMSTRNG-16(@03)                                0752
         TM    0(@07),B'10000000'                                  0752
         BNO   @RF00752                                            0752
*       DO;                         /* LOADGO COMMAND                */
*         X=X+1;                    /* TO ALLOW FOR BLANK            */
         LA    @03,1                                               0754
         AR    X,@03                                               0754
*         RQUOTE='7D'X;             /* PLACE QUOTES AROUND IT        */
         MVI   RQUOTE(X),X'7D'                                     0755
*         X=X+1;                    /* INCREMENT X                   */
         AR    X,@03                                               0756
*         PARMPARM(1:PARMLEN)=PARMBUF(1:PARMLEN);/* MOVE IN PARMS  0757
*                                                              Y01993*/
         LR    @07,@08                                             0757
         BCTR  @07,0                                               0757
         L     @14,PARMPTR(,@14)                                   0757
         EX    @07,@SM00920                                        0757
*         X=X+PARMLEN;              /* INCREMENT X                   */
         AR    X,@08                                               0758
*         LQUOTE='7D'X;             /* ENCLOSE IN QUOTES             */
         MVI   LQUOTE(X),X'7D'                                     0759
*         X=X+1;                    /* INCREMENT X                   */
         AR    X,@03                                               0760
*       END;                        /* END PARM PROCESSING           */
*     ELSE                          /* IF A PARM STRING WAS PASSED   */
*       DO;                         /* AND IS INVALID FOR THE        */
         B     @RC00752                                            0762
@RF00752 DS    0H                                                  0763
*         PARMINV=YES;              /* PROMPTER BEING INVOKED. SET   */
*         INVALID=YES;              /* THE INVALID OPTION SWITCH AND */
         OI    PARMINV,B'11000000'                                 0764
*       END;                        /* INVALID PARM STRING SWITCH    */
*FORTTEST:                                                         0766
*   IF FLIBPARM(Y)=YES              /* IF THE FORTLIB PARAMETER IS   */
*     THEN                          /* YES                           */
@RC00752 DS    0H                                                  0766
@RF00751 DS    0H                                                  0766
FORTTEST L     @14,Y                                               0766
         SLA   @14,4                                               0766
         LA    @08,FLIBPARM-16(@14)                                0766
         TM    0(@08),B'00000100'                                  0766
         BNO   @RF00766                                            0766
*     DO;                           /* REQUIRED PLACE IT IN BUFFER   */
*       X=X+1;                      /* TO ALLOW FOR BLANK            */
         AH    X,@CH00033                                          0768
*       FORTLIBP=FLIBNAME;          /* MOVE                          */
         MVC   FORTLIBP(7,X),FLIBNAME                              0769
*       X=X+7;                      /* INCREMENT X                   */
         AH    X,@CH00172                                          0770
*     END;                          /* END FORT PARM PROCCESS        */
*   IF CLIBPARM(Y)=YES              /* IF THE COBLIB PARAM IS REQ    */
*     THEN                                                         0772
@RF00766 L     @14,Y                                               0772
         SLA   @14,4                                               0772
         LA    @08,CLIBPARM-16(@14)                                0772
         TM    0(@08),B'00000010'                                  0772
         BNO   @RF00772                                            0772
*     DO;                           /* THEN PLACE IT IN THE BUFFER   */
*       X=X+1;                      /* TO ALLOW FOR BLANK            */
         AH    X,@CH00033                                          0774
*       COBLIBP=CLIBNAME;           /* MOVEIN                        */
         MVC   COBLIBP(6,X),CLIBNAME                               0775
*       X=X+6;                      /* INCREMENT X                   */
         AH    X,@CH00104                                          0776
*     END;                          /* END COBOL PARM TEST           */
*   IF CHECKOPT(Y)=YES THEN         /* TEST IF PL1BASE PARAMETER IS  */
@RF00772 L     @14,Y                                               0778
         SLA   @14,4                                               0778
         LA    @08,CHECKOPT-16(@14)                                0778
         TM    0(@08),B'00000001'                                  0778
         BNO   @RF00778                                            0778
*     IF OPTPDE=2 THEN              /* REQUIRED, THEN PLACE IT IN THE*/
         L     @14,PDLADDR                                         0779
         CLC   OPTPDE(2,@14),@CH00078                              0779
         BNE   @RF00779                                            0779
*       DO;                         /* INPUT STACK                   */
*         X=X+1;                    /* ALLOW FOR BLANK               */
         AH    X,@CH00033                                          0781
*         PL1BASEP=PL1BASE;         /* MOVE IN PLIBASE               */
         MVC   PL1BASEP(7,X),PL1BASE                               0782
*         X=X+7;                    /* INCREMENT                     */
         AH    X,@CH00172                                          0783
*       END;                        /* END PLIBASE TEST              */
*   IF LIBPDE=1                     /* IF THE LIB OPERAND IS SPECIF  */
*     THEN                          /* AND IT IS ALLOWED, THEN BUILD */
@RF00779 DS    0H                                                  0785
@RF00778 LA    @14,1                                               0785
         L     @08,PDLADDR                                         0785
         CH    @14,LIBPDE(,@08)                                    0785
         BNE   @RF00785                                            0785
*     IF LIBOPND(Y)=YES&            /* THE LIB OPERAND ON THE  Y01156*/
*         OPTPDE^=1                 /* LOADGO COMMAND          Y01156*/
*       THEN                        /*                         Y01156*/
         L     @03,Y                                               0786
         SLA   @03,4                                               0786
         LA    @07,LIBOPND-16(@03)                                 0786
         TM    0(@07),B'10000000'                                  0786
         BNO   @RF00786                                            0786
         CH    @14,OPTPDE(,@08)                                    0786
         BE    @RF00786                                            0786
*       DO;                         /*                         Y01156*/
*         X=X+1;                    /* FOR BLANK               Y01156*/
         AR    X,@14                                               0788
*         LIBPTR=ADDR(FIRSTDSN);    /* SET TO FIRST ADDR       Y01156*/
         LA    LIBPTR,FIRSTDSN(,@08)                               0789
*         LIBOUT(1:4)=LIBNAME;      /* INSERT LIB(             Y01156*/
         MVC   LIBOUT(4,X),LIBNAME                                 0790
*         X=X+4;                    /* UPDATE PTR              Y01156*/
         AH    X,@CH00106                                          0791
*         DO WHILE LIBPTR^=ENDCHAIN;/* DO UNTIL END            Y01156*/
         B     @DE00792                                            0792
@DL00792 DS    0H                                                  0793
*           IF LDSNQUOT=YES         /* IF DSN IS FULLY QUAL    Y01156*/
*             THEN                  /*                         Y01156*/
         TM    LDSNQUOT(LIBPTR),B'01000000'                        0793
         BNO   @RF00793                                            0793
*             DO;                   /*                         Y01156*/
*               LIBOUT(1)=QUOTE;    /* MOVE IN QUOTE           Y01156*/
         MVI   LIBOUT(X),X'7D'                                     0795
*               X=X+1;              /* UPDATE PTR              Y01156*/
         AH    X,@CH00033                                          0796
*             END;                  /*                         Y01156*/
*           IF LDSNPRES=YES         /* IF DSN IS PRESENT       Y01156*/
*             THEN                  /*                         Y01156*/
@RF00793 TM    LDSNPRES(LIBPTR),B'10000000'                        0798
         BNO   @RF00798                                            0798
*             DO;                   /* MOVE IN DATA SET NAME   Y01156*/
*               LIBOUT(1:LDSNLEN)=DSNMELIB(1:LDSNLEN);             0800
         LH    @14,LDSNLEN(,LIBPTR)                                0800
         LR    @08,@14                                             0800
         BCTR  @08,0                                               0800
         L     @07,LDSNPTR(,LIBPTR)                                0800
         EX    @08,@SM00922                                        0800
*               X=X+LDSNLEN;        /* UPDATE PTR              Y01156*/
         AR    X,@14                                               0801
*             END;                                                 0802
*           IF LMBRPRES=YES         /* IF MEMBER IS PRES THEN  Y01156*/
*             THEN                  /* MOVE IN MEMBER NAME     Y01156*/
@RF00798 TM    LMBRPRES(LIBPTR),B'10000000'                        0803
         BNO   @RF00803                                            0803
*             DO;                   /*                         Y01156*/
*               LIBOUT(1)=OPENP;    /* MOVE IN PAREN           Y01156*/
         MVI   LIBOUT(X),C'('                                      0805
*               LIBOUT(2:LMBRLEN+1)=MBRNMLIB(1:LMBRLEN);           0806
         LH    @14,LMBRLEN(,LIBPTR)                                0806
         LR    @08,@14                                             0806
         BCTR  @08,0                                               0806
         L     @07,LMBRPTR(,LIBPTR)                                0806
         EX    @08,@SM00924                                        0806
*               LIBOUT(LMBRLEN+2)=CLOSEP;/* MOVE IN PAREN            */
         ALR   @14,X                                               0807
         MVI   LIBOUT+1(@14),C')'                                  0807
*               X=X+2+LMBRLEN;      /* UPDATE PTR TO NEXT AVAIL      */
         LA    @14,2                                               0808
         AR    @14,X                                               0808
         LH    @08,LMBRLEN(,LIBPTR)                                0808
         AR    @14,@08                                             0808
         LR    X,@14                                               0808
*             END;                  /*                         Y01156*/
*           IF LDSNQUOT=YES         /* IF QUOTED MOVE IN QUOTE Y01156*/
*             THEN                  /*                         Y01156*/
@RF00803 TM    LDSNQUOT(LIBPTR),B'01000000'                        0810
         BNO   @RF00810                                            0810
*             DO;                   /*                         Y01156*/
*               LIBOUT(1)=QUOTE;    /* MOVE IN QUOTE           Y01156*/
         MVI   LIBOUT(X),X'7D'                                     0812
*               X=X+1;              /* UPDATE PTR              Y01156*/
         AH    X,@CH00033                                          0813
*             END;                  /*                         Y01156*/
*           IF LPASPRES=YES         /* IF PASSWORD IS PRESENT, Y01156*/
*             THEN                  /* MOVE IN A '/' AND THE   Y01156*/
@RF00810 TM    LPASPRES(LIBPTR),B'10000000'                        0815
         BNO   @RF00815                                            0815
*             DO;                   /* PASSWORD                Y01156*/
*               LIBOUT(1)=SLASH2;   /* MOVE IN SLASH           Y01156*/
         MVI   LIBOUT(X),C'/'                                      0817
*               LIBOUT(2:LPASSLEN+1)=PASNMLIB(1:LPASSLEN);         0818
         LH    @14,LPASSLEN(,LIBPTR)                               0818
         LR    @08,@14                                             0818
         BCTR  @08,0                                               0818
         L     @07,LPASSPTR(,LIBPTR)                               0818
         EX    @08,@SM00926                                        0818
*               X=X+1+LPASSLEN;     /* UPDATE PTR              Y01156*/
         LA    @08,1                                               0819
         AR    @08,X                                               0819
         AR    @08,@14                                             0819
         LR    X,@08                                               0819
*             END;                  /*                         Y01156*/
*           X=X+1;                  /* SPACE BETWEEN DATA SETS Y01156*/
@RF00815 AH    X,@CH00033                                          0821
*           LIBPTR=CHAINPTR;        /* UPDATE ADDR OF PDL      Y01156*/
         L     LIBPTR,CHAINPTR(,LIBPTR)                            0822
*         END;                      /*                         Y01156*/
@DE00792 CL    LIBPTR,@CF00306                                     0823
         BNE   @DL00792                                            0823
*         X=X-1;                    /* REMOVE XTRA BLANK       Y01156*/
         BCTR  X,0                                                 0824
*         LIBOUT(1)=CLOSEP;         /* MOVE IN ENDING PAREN    Y01156*/
         MVI   LIBOUT(X),C')'                                      0825
*         X=X+1;                    /* UPDATE TO LAST CHAR     Y01156*/
         AH    X,@CH00033                                          0826
*       END;                        /*                         Y01156*/
*     ELSE                          /*                         Y01156*/
*       DO;                         /*                         Y01156*/
         B     @RC00786                                            0828
@RF00786 DS    0H                                                  0829
*         INVALID=YES;              /* SET INVALID SW          Y01156*/
         OI    INVALID,B'10000000'                                 0829
*         LIBINV=YES;               /* SET LIB INVAL           Y01156*/
         OI    LIBINV,B'00001000'                                  0830
*       END;                        /*                         Y01156*/
*   ELSE                                                           0832
*     ;                             /*                         Y01156*/
@RF00785 DS    0H                                                  0833
*BUILD4:                            /*                         Y01156*/
*   IF LOADCMD(Y)=NO THEN           /* IF NO LOADGO COMMAND M2428    */
@RC00785 DS    0H                                                  0833
BUILD4   L     @14,Y                                               0833
         SLA   @14,4                                               0833
         LA    @08,LOADCMD-16(@14)                                 0833
         TM    0(@08),B'00100000'                                  0833
         BZ    @RT00833                                            0833
*     GO TO INVOPTST;               /* GO TEST FOR INVALID OPTIONS   */
*   CNTRLBF=X-Z;                    /* LENGTH OF COMMAND             */
         L     @14,Z                                               0835
         LR    @08,X                                               0835
         SR    @08,@14                                             0835
         STH   @08,CNTRLBF(,@14)                                   0835
*   CNTRESD='0000'X;                /* CONTROL INFORMATION           */
         MVC   CNTRESD(2,@14),@CB00391                             0836
*                                                                  0837
*/********************************************************************/
*/*      THE FOLLOWING CODE TEST TO SEE IF THERE WERE ANY INVALID    */
*/*      OPTION ENTERED FOR THE INVOKED COMPILER PROMPTER. IF        */
*/*      SO, THE INVALID BIT IS ON AND A TABLE OF MASKS IS ANDED     */
*/*      WITH THE INVALID TABLE OF BITS TO DETERMINDED WHICH         */
*/*      INVALID OPTIONS WERE SPECIFIED AND THE CORRESPONDING        */
*/*      MESSAGE SEGMENT ADDRESS IS PLACED IN THE TABLE OF SEGMENTS  */
*/*      IN ORDER TO INFORM THE USER WITH A MESSAGE FROM PUTLINE     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0837
*INVOPTST:                                                         0837
*   IF INVALID=NO THEN              /* ARE THERE INVALID OPTIONS     */
INVOPTST TM    INVALID,B'10000000'                                 0837
         BZ    @RT00837                                            0837
*     GO TO ENDBLD;                                                0838
*   X=0;                            /* INITIALIZE X TO ZERO          */
         SR    X,X                                                 0839
*   DO I=1 TO 22;                   /* DO MAX OF 22 TIMES            */
         LA    @14,1                                               0840
         ST    @14,I                                               0840
@DL00840 DS    0H                                                  0841
*     IF(INVALIDT&MASK(I))^='000000'X THEN/* IF MASK BIT AND A BIT IN*/
         LR    @08,@14                                             0841
         MH    @08,@CH00355                                        0841
         MVC   @TS00001(3),INVALIDT                                0841
         LA    @03,MASK-3(@08)                                     0841
         NC    @TS00001(3),0(@03)                                  0841
         CLC   @TS00001(3),@CB00769                                0841
         BE    @RF00841                                            0841
*       DO;                         /* INVALID TABLE MATCH           */
*         X=X+1;                    /* INCREMENT MESSAGE TABLE       */
         AH    X,@CH00033                                          0843
*         TABLESEG(X)=TABOPTAD(I);  /* INSERT CORRESPONDING MESSAGE
*                                      SEGMENT IN TO SEGMENT TABLE   */
         LR    @08,X                                               0844
         SLA   @08,2                                               0844
         SLA   @14,2                                               0844
         L     @14,TABOPTAD-4(@14)                                 0844
         ST    @14,TABLESEG-4(@08)                                 0844
*       END;                        /* END INSERT DO                 */
*   END;                            /* END DO LOOP                   */
@RF00841 LA    @14,1                                               0846
         A     @14,I                                               0846
         ST    @14,I                                               0846
         CH    @14,@CH00731                                        0846
         BNH   @DL00840                                            0846
*   I=TABLESEG(X);                  /* OPTAIN ADDRESS OF LAST SEGMENT*/
         LR    @14,X                                               0847
         SLA   @14,2                                               0847
         L     @08,TABLESEG-4(@14)                                 0847
         ST    @08,I                                               0847
*   LASTBUFF(1:LSTNUM+2)=LSTSEG(1:LSTNUM+2);/* MOVE LAST MESSAGE   0848
*                                      SEGMENT TO BUFFER             */
         LA    @03,1                                               0848
         LH    @07,LSTNUM(,@08)                                    0848
         AR    @07,@03                                             0848
         EX    @07,@SM00928                                        0848
*   TABLESEG(X)=ADDR(LASTBUFF);     /* REPLACE LAST SEG ADDR WITH  0849
*                                      ADDR OF BUFFER                */
         LA    @08,LASTBUFF                                        0849
         ST    @08,TABLESEG-4(@14)                                 0849
*   MINCOMLN=MINCOMLN-1;            /* SUBTRACT ONE TO LOSE COMMA    */
         LH    @14,MINCOMLN                                        0850
         BCTR  @14,0                                               0850
         STH   @14,MINCOMLN                                        0850
*   X=X+1;                          /* INCREMENT X FOR NEXT SEGMENT  */
         AR    X,@03                                               0851
*   TABLESEG(X)=ADDR(SEG13);        /* IGNORED FOR                   */
         LR    @14,X                                               0852
         SLA   @14,2                                               0852
         LA    @08,SEG13                                           0852
         ST    @08,TABLESEG-4(@14)                                 0852
*   X=X+1;                          /* INCREMENT X FOR NEXT SEGMENT  */
         AR    X,@03                                               0853
*   DATALEN=TYPELNG(Y);             /* LENGTH OF COMPILER NAME       */
         L     @14,Y                                               0854
         LR    @08,@14                                             0854
         SLA   @08,4                                               0854
         LH    @03,TYPELNG-16(@08)                                 0854
         STH   @03,DATALEN                                         0854
*   DATATXT=TYPES(Y);               /* MOVE IN COMPILER NAME         */
         LA    @07,TYPES-16(@08)                                   0855
         MVC   DATATXT(8),0(@07)                                   0855
*   IF Y=7 THEN                     /* IF CMPLR = PLI THEN INSERT    */
         CH    @14,@CH00172                                        0856
         BNE   @RF00856                                            0856
*     DO;                                                          0857
*       DATATXT(5:7)=PLITYPE(OPTPDE);/* CHK OR OPT                   */
         L     @14,PDLADDR                                         0858
         LH    @14,OPTPDE(,@14)                                    0858
         MH    @14,@CH00355                                        0858
         LA    @08,PLITYPE-3(@14)                                  0858
         MVC   DATATXT+4(3),0(@08)                                 0858
*       DATALEN=DATALEN+4;          /* ALLOW FOR CHK OR OPT          */
         AH    @03,@CH00106                                        0859
         STH   @03,DATALEN                                         0859
*     END;                                                         0860
*   TABLESEG(X)=ADDR(DATATYPE);     /* COMPILER NAME                 */
@RF00856 LR    @14,X                                               0861
         SLA   @14,2                                               0861
         LA    @08,DATATYPE                                        0861
         ST    @08,TABLESEG-4(@14)                                 0861
*   X=X+1;                          /* INCREMENT X FOR NEXT SEGMENT  */
         LA    @14,1                                               0862
         AR    X,@14                                               0862
*   TABLESEG(X)=ADDR(PROCESS);      /* PROCESSING                    */
         LR    @08,X                                               0863
         SLA   @08,2                                               0863
         LA    @03,PROCESS                                         0863
         ST    @03,TABLESEG-4(@08)                                 0863
*   X=X+1;                          /* INCREMENT X FOR NEXT SEGMENT  */
         AR    X,@14                                               0864
*   TABLESEG(X)=0;                  /* END FIRST LEVEL MESSAGE       */
         SR    @08,@08                                             0865
         LR    @03,X                                               0865
         SLA   @03,2                                               0865
         ST    @08,TABLESEG-4(@03)                                 0865
*   X=X+1;                          /* INCREMENT X FOR NEXT SEGMENT  */
         AR    X,@14                                               0866
*   TABLESEG(X)=0;                  /* NO SECOND LEVEL MESSAGE       */
         LR    @14,X                                               0867
         SLA   @14,2                                               0867
         ST    @08,TABLESEG-4(@14)                                 0867
*   CALL PUTINTFC;                  /* ISSUE IGNORED MESSAGE         */
         BAL   @14,PUTINTFC                                        0868
*                                                                  0869
*/****************************************************************** */
*/*                                                                  */
*/* INTERFACE WITH THE STACK SERVICE ROUTINE TO PLACE THE COMMAND    */
*/* LIST ON THE STACK OF CURRENTLY ACTIVE SOURCES OF INPUT. TO DO SO */
*/* BUILD THE APPROPRIATE PARAMETER LIST AND LINK TO THE STACK SER-  */
*/* VICE ROUTINE                                                     */
*/*                                                                  */
*/****************************************************************** */
*                                                                  0869
*ENDBLD:                                                           0869
*   STPBPTR=ADDR(STACKPRM);         /* ADDRES OF STACK PARM LIST     */
ENDBLD   LA    @14,STACKPRM                                        0869
         LR    STPBPTR,@14                                         0869
*   STPBALSD=LSDPTR;                /* ADDRESS OF INPUT SOURCE     0870
*                                      DESCRIP                       */
         MVC   STPBALSD(4,STPBPTR),LSDPTR                          0870
*                                   /* TOR TO PARM LIST              */
*   STPLSTPB=ADDR(STACKPRM);        /* PTR TO STACK PARAMETER LIST   */
         L     @08,STPLPTR                                         0871
         ST    @14,STPLSTPB(,@08)                                  0871
*   R1=STPLPTR;                     /* PTR TO SER.RTE PARAMETER LIST */
         LR    R1,@08                                              0872
*   GEN REFS(R1)SETS(R15);                                         0873
*                                    /* ISSUE STACK             */
         STACK MF=(E,(1))
*   RCODESV=R15;                    /* SAVE RETURN CODE FROM STACK   */
         ST    R15,RCODESV                                         0874
*   IF RCODESV>0 THEN               /* IF STACK WAS NOT SUCCESSFUL   */
         L     @14,RCODESV                                         0875
         LTR   @14,@14                                             0875
         BNP   @RF00875                                            0875
*     DO;                           /* THEN FREE CORE GOTTEN         */
*       STPRSNT=YES;                /* INDICATE STACK PRESENT        */
         OI    STPRSNT,B'01000000'                                 0877
*       W4=ADDR(STACK);             /* PLACE STACK IN ERROR CODE MSG */
         LA    @14,STACK                                           0878
         ST    @14,W4                                              0878
*       GO TO COMMERR;              /* GO TO ISSUE COMMAND SYSTEM  0879
*                                      ERROR MESSAGE                 */
         B     COMMERR                                             0879
*STEXIT:                                                           0880
*       R5=LSDPTR;                  /* GET POINTER TO CORE           */
STEXIT   L     R5,LSDPTR                                           0880
*       R4=AMNT;                    /* GET SIZE OF GOTTEN CORE       */
         L     R4,AMNT                                             0881
*       GEN REFS(R5,R4);                                           0882
         FREEMAIN R,LV=(4),A=(5),SP=78
*       RTCODE12=YES;               /* SET RETURN CODE 12 BIT        */
         OI    RTCODE12,B'00000100'                                0883
*       GO TO EXIT1;                /* GO TO EXIT ROUTINE            */
         B     EXIT1                                               0884
*     END;                          /* END STACK FAIL                */
*EXIT1:                                                            0886
*   IF PDLPRES=YES THEN                                            0886
@RF00875 DS    0H                                                  0886
EXIT1    TM    PDLPRES,B'00001000'                                 0886
         BNO   @RF00886                                            0886
*     DO;                           /* TEST IF THERE IS A FREE PDL   */
*       R5=ADDR(PDLADDR);           /* PTR TO PDL TO FREE            */
         LA    R5,PDLADDR                                          0888
*       GEN REFS(R5);                                              0889
*                                   /* FREE PDL                      */
         IKJRLSA (5)
*     END;                          /* END PDL PRESENT TEST          */
*   IF RTCODE12=YES THEN            /* IF RETURN CODE 12 BIT SET     */
@RF00886 TM    RTCODE12,B'00000100'                                0891
         BNO   @RF00891                                            0891
*     DO;                           /* IF FAILURE EXIT M2588         */
*       R5=ADDR(STACKLSD);          /* REG 2 ADDRESS OF STACK LIST   */
         LA    R5,STACKLSD                                         0893
*       R1=STPLPTR;                 /* REG1 STACK PARM LIST          */
         L     R1,STPLPTR                                          0894
*       GEN REFS(R5,R1)SETS(R15);                                  0895
               STACK PARM=(R5),DELETE=ALL,MF=(E,(1))
*       RCODESV=R15;                /* SAVE RETURN CODE              */
         ST    R15,RCODESV                                         0896
*       GEN(TCLEARQ INPUT);         /* CLEAR GETLINE INPUT QUEUE     */
         TCLEARQ INPUT
*       RTRNCODE=12;                /* CALL UNSUCCESSFUL             */
         LA    RTRNCODE,12                                         0898
*     END;                          /* END FAILURE EXIT PROCESSING   */
*   ELSE                            /* IF RUN SUCCESFUL              */
*     RTRNCODE=0;                   /* SET RETURN CODE TO 0          */
         B     @RC00891                                            0900
@RF00891 SR    RTRNCODE,RTRNCODE                                   0900
*   RETURN CODE(RTRNCODE);          /* RETURN TO TMP                 */
*                                                                  0901
@RC00891 L     @13,4(,@13)                                         0901
         L     @00,@SIZDATD                                        0901
         LR    @01,@09                                             0901
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@02                                             0901
         L     @14,12(,@13)                                        0901
         LM    @00,@12,20(@13)                                     0901
         BR    @14                                                 0901
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE IS ENTERED WHEN THE DATA SET TYPE HAS NOT BEEN      */
*/* SPECIFIED AND THE DATA SET NAME IS NOT PARTIALLY QUALIFIED OR    */
*/* DOES NOT ADHERE TO THE DATA SET NAMING CONVENTIONS.              */
*/*                                                                  */
*/* THE USER MUST BE PROMPTED FOR THE TYPE. PARSE IS REENTERD TO     */
*/* DO THIS,                                                         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0902
*PRMPTYPE:                                                         0902
*   PPLPCL=RUNADCN2;                /* PARSE IS REENTERED TO DO      */
PRMPTYPE L     @14,PPLPTR                                          0902
         MVC   PPLPCL(4,@14),RUNADCN2                              0902
*   PPLCBUF=CPPLCBUF;               /* THE PROMPTING                 */
         L     @08,CPPLPTR                                         0903
         MVC   PPLCBUF(4,@14),CPPLCBUF(@08)                        0903
*   PPLANS=ADDR(PDLADDR2);          /* ADDRESS OF ANSWER PLACE       */
         LA    @08,PDLADDR2                                        0904
         ST    @08,PPLANS(,@14)                                    0904
*   R1=PPLPTR;                      /* PPL POINTER IN REG 1          */
         LR    R1,@14                                              0905
*   GEN REFS(R1)SETS(R15);                                         0906
*                                   /* PROMPT                        */
         LINK EP=IKJPARS
*   RCODESV=R15;                    /* SAVE PARSE RETURN CODE        */
         ST    R15,RCODESV                                         0907
*   IF RCODESV>0 THEN               /* IF PARSE FAILED GO TO DIAGPARS*/
         L     @14,RCODESV                                         0908
         LTR   @14,@14                                             0908
         BP    @RT00908                                            0908
*     GO TO DIAGPARS;               /* GO TO PARSE FAIL ROUT         */
*   I=1;                            /* INITIALIXE I                  */
         MVC   I(4),@CF00033                                       0910
*ENDCHECK:                                                         0911
*   IF TYPES(I,1)='FF'X THEN        /* TEST FOR END OF VALID CMPLR   */
ENDCHECK L     @14,I                                               0911
         LR    @08,@14                                             0911
         SLA   @08,4                                               0911
         LA    @02,TYPES-16(@08)                                   0911
         CLI   0(@02),X'FF'                                        0911
         BE    @RT00911                                            0911
*     GO TO TYPEMSG;                /* TYPES                         */
*   IF TYPES(I,1:TYPELEN)^=         /* COMPARE FOR VALID CMPLR TYPES */
*       CMPLR(1:TYPELEN)THEN                                       0913
         L     @02,PDLADDR2                                        0913
         L     @07,TYPEPTR(,@02)                                   0913
         LH    @02,TYPELEN(,@02)                                   0913
         BCTR  @02,0                                               0913
         LA    @06,TYPES-16(@08)                                   0913
         EX    @02,@SC00930                                        0913
         BE    @RF00913                                            0913
*     DO;                           /* LOOP                          */
*       I=I+1;                      /* INCREMENT I                   */
         AH    @14,@CH00033                                        0915
         ST    @14,I                                               0915
*       GO TO ENDCHECK;             /* COMPARE NEXT DATA TYPE IN   0916
*                                      TABLE                         */
         B     ENDCHECK                                            0916
*     END;                          /* END LOOP                      */
*   ELSE                            /* MATCH FOUND                   */
*     DO;                           /* THEN                          */
@RF00913 DS    0H                                                  0919
*       Y=I;                        /* SAVE I                        */
         MVC   Y(4),I                                              0919
*RLSE:                                                             0920
*       R5=ADDR(PDLADDR2);          /* SET UP TO FREE THE PDL        */
RLSE     LA    R5,PDLADDR2                                         0920
*       GEN REFS(R5);                                              0921
*                                    /* FREE PDL                     */
         IKJRLSA (5)
*       IF BADTYPE=NO THEN          /* TEST SWITCH INDICATING BAD  0922
*                                      DATA                          */
         TM    BADTYPE,B'00000010'                                 0922
         BZ    @RT00922                                            0922
*         GO TO PRMPRET;            /* TYPE - 0 -DATA TYPE FOUND     */
*                                   /* 1 - DATA TYPE NOT FOUND       */
*       ELSE                        /* IF NOT                        */
*         DO;                       /* FAILURE                       */
*           BADTYPE=NO;             /* RESET SWITCH                  */
         NI    BADTYPE,B'11111101'                                 0925
*           CALL PUTINTFC;          /* ISSUE MESSAGE                 */
         BAL   @14,PUTINTFC                                        0926
*TYPERTN:                                                          0927
*           IF RCODESV^=0 THEN                                     0927
TYPERTN  ICM   @14,15,RCODESV                                      0927
         BZ    @RF00927                                            0927
*             DO;                   /* IF PUTLINE FAILED EXIT        */
*               RTCODE12=YES;       /* SET RUN RETURN CODE TO 12     */
         OI    RTCODE12,B'00000100'                                0929
*               GO TO EXIT1;        /* EXIT ROUTINE                  */
         B     EXIT1                                               0930
*             END;                  /* END PUTLINE FAILURE           */
*           ELSE                    /* OTHERWISE                     */
*             GO TO PRMPTYPE;       /* REENTER PARSE FOR DATA TYPE   */
*         END;                      /* END ESLE                      */
*     END;                          /* END                           */
*TYPEMSG:                                                          0935
*   W1=ADDR(SEG18);                 /* SET UP MESSAGE TO INFORM USER */
TYPEMSG  LA    @14,SEG18                                           0935
         ST    @14,W1                                              0935
*   W2=ADDR(DATATYPE);              /* OF INVALID DATA TYPE          */
         LA    @14,DATATYPE                                        0936
         ST    @14,W2                                              0936
*   W3=ADDR(SEG19);                 /* INVALID DATA TYPE             */
         LA    @14,SEG19                                           0937
         ST    @14,W3                                              0937
*   W4=0;                           /* END OF 1ST LEVEL MESSAGE      */
         SR    @14,@14                                             0938
         ST    @14,W4                                              0938
*   W5=0;                           /* NO 2ND LEVEL MESSAGE          */
         ST    @14,W5                                              0939
*   DATALEN=TYPELEN;                /* MOVE LENGTH INTO BUFFER FOR   */
         L     @14,PDLADDR2                                        0940
         LH    @08,TYPELEN(,@14)                                   0940
         STH   @08,DATALEN                                         0940
*   DATATXT(1:DATALEN)=CMPLR(1:DATALEN);/* MESSAGE SEGMENT, MOVE NAME
*                                      ALSO                          */
         BCTR  @08,0                                               0941
         L     @14,TYPEPTR(,@14)                                   0941
         EX    @08,@SM00933                                        0941
*   BADTYPE=YES;                    /* SET SWITCH INDICATING BAD DATA*/
         OI    BADTYPE,B'00000010'                                 0942
*   GO TO RLSE;                     /* TYPE                          */
         B     RLSE                                                0943
*                                                                  0944
*/********************************************************************/
*/*                                                                  */
*/* TAKE THE SPECIFIED DSNAME AND BREAK IT INTO ITS VARIOUS PARTS    */
*/*      THE 'DSNAME'                                                */
*/*      THE 'MEMBER NAME'                                           */
*/*      THE 'PASSWORD'                                              */
*/* PLACE THESE PARTS IN THE APPROPRIATE BUFFERS IN MAIN STORAGE     */
*/* IF THE NAME IS FULLY QUALIFIED SET A BIT TO INDICATE SO          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0944
*DSNRTE:                                                           0944
*   PROC;                                                          0944
DSNRTE   STM   @14,@12,12(@13)                                     0944
*   IF DSNPRES=YES THEN                                            0945
         L     @14,PDLADDR                                         0945
         TM    DSNPRES(@14),B'10000000'                            0945
         BNO   @RF00945                                            0945
*     DO;                           /* IF SPECIFIED, MOVE THE        */
*       DSNBUF=DSNMEBUF;            /* DSNAME TO THE APPROPRIATE     */
         L     @08,DSNPTR(,@14)                                    0947
         MVC   DSNBUF(44),DSNMEBUF(@08)                            0947
*       DSLENG=DSLEN;               /* BUFFER - AND LENGTH OR        */
         MVC   DSLENG(2),DSLEN(@14)                                0948
*       DSNPRSNT=YES;               /* INDICATE DSNAME PRESENT       */
         OI    DSNPRSNT,B'00100000'                                0949
*       IF DSNQUOT=YES THEN         /* IF THE DSNAME IS FULLY        */
         TM    DSNQUOT(@14),B'01000000'                            0950
         BNO   @RF00950                                            0950
*         FULLQUAL=YES;             /* QUALIFIED THEN INDICATE SO    */
         OI    FULLQUAL,B'10000000'                                0951
*       ELSE                        /* OTHERWISE SET SWITCH TO       */
*         FULLQUAL=NO;              /* INDICATE NOT QUALIFIED        */
         B     @RC00950                                            0952
@RF00950 NI    FULLQUAL,B'01111111'                                0952
*     END;                          /* THIS IS AN END STATEMENT      */
*   ELSE                            /* IF NO DATA SET PRESENT        */
*     DSLENG=0;                     /* ZERO THE LENGTH               */
         B     @RC00945                                            0954
@RF00945 SR    @14,@14                                             0954
         STH   @14,DSLENG                                          0954
*   IF MBRPRES=YES THEN                                            0955
@RC00945 L     @14,PDLADDR                                         0955
         TM    MBRPRES(@14),B'10000000'                            0955
         BNO   @RF00955                                            0955
*     DO;                           /* IF SPECIFIED, MOVE THE        */
*       MBRNAME=MBRNMBUF;           /* MEMBER NAME AND LENGTH TO     */
         L     @08,MBRPTR(,@14)                                    0957
         MVC   MBRNAME(8),MBRNMBUF(@08)                            0957
*       MBRLENG=MBRLEN;             /* MEMBER NAME LENGTH            */
         MVC   MBRLENG(2),MBRLEN(@14)                              0958
*     END;                          /* OR ZERO THE LENGTH            */
*   ELSE                                                           0960
*     MBRLENG=0;                    /* ZERO MEMBER LENGTH            */
         B     @RC00955                                            0960
@RF00955 SR    @14,@14                                             0960
         STH   @14,MBRLENG                                         0960
*   IF PASSPRES=YES THEN                                           0961
@RC00955 L     @14,PDLADDR                                         0961
         TM    PASSPRES(@14),B'10000000'                           0961
         BNO   @RF00961                                            0961
*     DO;                           /* IF SPECIFIED MOVE THE         */
*       PASSNAME=PASNMBUF;          /* PASSWORD AND LENGTH TO        */
         L     @08,PASSPTR(,@14)                                   0963
         MVC   PASSNAME(8),PASNMBUF(@08)                           0963
*       PASSLENG=PASSLEN;           /* THE APPROPRIATE BUFFER OR     */
         MVC   PASSLENG(2),PASSLEN(@14)                            0964
*     END;                          /* END PASSWORD TEST             */
*   ELSE                            /* IF NO PASSWORD                */
*     PASSLENG=0;                   /* ZERO THE LENGTH               */
         B     @RC00961                                            0966
@RF00961 SR    @14,@14                                             0966
         STH   @14,PASSLENG                                        0966
*   END DSNRTE;                     /* RETURN                        */
@EL00002 DS    0H                                                  0967
@EF00002 DS    0H                                                  0967
@ER00002 LM    @14,@12,12(@13)                                     0967
         BR    @14                                                 0967
*                                                                  0968
*/********************************************************************/
*/*                                                                  */
*/* PUTINTFC ROUTINE -                                               */
*/*     INTERFACES WITH PUTLINE TO PUT OUT A SINGLE OR DOUBLE        */
*/*     LEVEL MESSAGE                                                */
*/*                                                                  */
*/*     INPUT IS ADDRESSES OF THE MESSAGE SEGMENTS USED TO COMPLETE  */
*/*     THE MESSAGE. R14 CONTAINS THE RETURN ADDRESS.                */
*/*                                                                  */
*/*     THE END OF THE LIST IS SIGNIFIED BY A WORD OF ZEROS          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0968
*PUTINTFC:                                                         0968
*   PROC;                                                          0968
PUTINTFC STM   @14,@12,@SA00003                                    0968
*   SEGONENO=1;                     /* NUMBER OF MESSAGE SEGMENTS    */
         MVC   SEGONENO(4),@CF00033                                0969
*   A=ADDR(BUFMSG1);                /* PTR TO MESSAGE BUFFER         */
         LA    A,BUFMSG1                                           0970
*   PTRMSG1=ADDR(MSG1BUF);          /* ADDRESS OF MESSAGE FOR PUTLINE*/
         LA    @14,MSG1BUF                                         0971
         ST    @14,PTRMSG1                                         0971
*   I=0;                            /* INITIALIZE SUBSCRIPT          */
         SR    @14,@14                                             0972
         ST    @14,I                                               0972
*FRMTLOOP:                                                         0973
*   I=I+1;                          /* INCREMENT SUBSCRIPT           */
FRMTLOOP LA    @14,1                                               0973
         A     @14,I                                               0973
         ST    @14,I                                               0973
*   B=SGMNTLST(I);                  /* PTR TO MESSAGE SEGMENT        */
         SLA   @14,2                                               0974
         L     B,SGMNTLST-4(@14)                                   0974
*   IF B=0 THEN                     /* IF 0, MESSAGE IS COMPLETE,    */
         LTR   B,B                                                 0975
         BZ    @RT00975                                            0975
*     GO TO MSG2FRMT;               /* FORMAT 2ND, IF ANY            */
*   FRMT1BUF(1:LENMESS)=            /* MOVE MESSAGE SEGMENT TO BUFFER*/
*       TXTMESS(1:LENMESS);         /* AND INCREMENT FOR SIZE        */
         LH    @14,LENMESS(,B)                                     0977
         LR    @08,@14                                             0977
         BCTR  @08,0                                               0977
         EX    @08,@SM00936                                        0977
*   A=A+LENMESS;                                                   0978
         AR    A,@14                                               0978
*   GO TO FRMTLOOP;                 /* GET NEXT SEGMENT              */
         B     FRMTLOOP                                            0979
*MSG2FRMT:                                                         0980
*   A=A-ADDR(BUFMSG1);              /* DETERMINE LENGTH OF MESSAGE   */
MSG2FRMT LA    @14,BUFMSG1                                         0980
         SR    A,@14                                               0980
*   A=A+4;                          /* ACCOUNT FOR HEADER RECORD     */
         AH    A,@CH00106                                          0981
*   LENMSG1=A;                      /* STORE IN LIST                 */
         STH   A,LENMSG1                                           0982
*   OFFMSG1=0;                      /* SET OFFSET TO ZERO (0)        */
         SR    @14,@14                                             0983
         STH   @14,OFFMSG1                                         0983
*   I=I+1;                          /* INCREMENT IN LIST             */
         LA    @08,1                                               0984
         A     @08,I                                               0984
         ST    @08,I                                               0984
*   B=SGMNTLST(I);                  /* PICK UP PTR TO NEXT SEGMENT   */
         SLA   @08,2                                               0985
         L     B,SGMNTLST-4(@08)                                   0985
*   IF B=0 THEN                     /* IF 0,THERE IS NO 2ND LEVEL    */
         CR    B,@14                                               0986
         BNE   @RF00986                                            0986
*     DO;                           /* MESSAGE                       */
*       MSG2PTR='FF000000'X;        /* INDICATE SO                   */
         MVC   MSG2PTR(4),@CF00306                                 0988
*       GO TO PUTMSG;               /* PUT OUT THE MESSAGE           */
         B     PUTMSG                                              0989
*     END;                          /* END B ZERO TEST               */
*   MSG2PTR=ADDR(MSGTWO);           /* ADDRESS OF SEC LEVEL          */
@RF00986 LA    @14,MSGTWO                                          0991
         ST    @14,MSG2PTR                                         0991
*   PTRMSG2=ADDR(MSG2BUF);          /* ADDR OF SEC LEVEL MSG BUF     */
         LA    @14,MSG2BUF                                         0992
         ST    @14,PTRMSG2                                         0992
*   A=ADDR(BUFMSG2);                /* ADDRESS OF BUFFER             */
         LA    A,BUFMSG2                                           0993
*   SEGTWONO=1;                     /* SET TO 1                      */
         MVC   SEGTWONO(4),@CF00033                                0994
*   MSG3PTR='FF000000'X;            /* INDICATE END                  */
         MVC   MSG3PTR(4),@CF00306                                 0995
*MSGLOOP2:                                                         0996
*   FRMT1BUF(1:LENMESS)=TXTMESS(1:LENMESS);/* MOVE MESSAGE TO BUFFER */
MSGLOOP2 LH    @14,LENMESS(,B)                                     0996
         LR    @08,@14                                             0996
         BCTR  @08,0                                               0996
         EX    @08,@SM00936                                        0996
*   A=A+LENMESS;                    /* INCREMENT                     */
         AR    A,@14                                               0997
*   I=I+1;                          /* INCREMENT FOR TABLE           */
         LA    @14,1                                               0998
         A     @14,I                                               0998
         ST    @14,I                                               0998
*   B=SGMNTLST(I);                  /* OBTAIN NEXT SEGMENT PTR       */
         SLA   @14,2                                               0999
         L     B,SGMNTLST-4(@14)                                   0999
*   IF B^=0 THEN                    /* IF 0,MESSAGE IS COMPLETE      */
         SR    @14,@14                                             1000
         CR    B,@14                                               1000
         BNE   @RT01000                                            1000
*     GO TO MSGLOOP2;               /* LOOP                          */
*   A=A-ADDR(BUFMSG2);              /* LENGTH OF MESSAGE             */
         LA    @08,BUFMSG2                                         1002
         SR    A,@08                                               1002
*   A=A+4;                          /* ACCOUNT FOR HEADER RECORD     */
         AH    A,@CH00106                                          1003
*   LENMSG2=A;                      /* STORE                         */
         STH   A,LENMSG2                                           1004
*   OFFMSG2=0;                      /* SET OFFSET TO ZERO (0)        */
         STH   @14,OFFMSG2                                         1005
*PUTMSG:                                                           1006
*   SIZE=PUTLEN;                    /* AMT OF CORE TO GET FOR PUTLINE*/
PUTMSG   MVC   SIZE(3),PUTLEN+1                                    1006
*   SPOOL='01'X;                    /* SUBPOOL                       */
         MVI   SPOOL,X'01'                                         1007
*   R0=CORE;                        /* PUTLIST CORE IN REG 0         */
         L     R0,CORE                                             1008
*   GEN REFS(R0)SETS(R1);                                          1009
*                                   /* GET CORE FOR PUTLIST          */
         GETMAIN R,LV=(0)
*   IOPLIOPB=R1;                    /* ADDRESS OF GOTTEN CORE        */
         L     @14,IOPLPTR                                         1010
         ST    R1,IOPLIOPB(,@14)                                   1010
*   COREGOT(1:PUTLEN)=              /* MOVE PUTLINE PARAMETERS INTO  */
*       PUTLIST(1:PUTLEN);          /* GOTTEN CORE                   */
         L     @08,IOPLPTR                                         1011
         L     @08,IOPLIOPB(,@08)                                  1011
         L     @07,PUTLEN                                          1011
         BCTR  @07,0                                               1011
         EX    @07,@SM00938                                        1011
*   OUTADDR=ADDR(MSGONE);           /* PLACE MESS IN PUTLIST         */
         LA    @07,MSGONE                                          1012
         ST    @07,OUTADDR(,@08)                                   1012
*   R1=IOPLPTR;                     /* REG 1 POINTS TO SER ROUT AREA */
         LR    R1,@14                                              1013
*   GEN REFS(R1)SETS(R15);                                         1014
*                                   /* PUTLINE TO ISSUE MESSAGE      */
         PUTLINE MF=(E,(1))
*   RCODESV=R15;                    /* SAVE PUTLINE RETURN CODE      */
         ST    R15,RCODESV                                         1015
*   R0=CORE;                        /* SIZE & SP OF GOTTEN CORE      */
         L     R0,CORE                                             1016
*   R1=IOPLIOPB;                    /* ADDRESS OF GOTTEN CORE        */
         L     @14,IOPLPTR                                         1017
         L     R1,IOPLIOPB(,@14)                                   1017
*   GEN REFS(R0,R1);                                               1018
*                                   /* FREE PUTLIST CORE             */
         FREEMAIN R,LV=(0),A=(1)
*   END PUTINTFC;                   /* RETURN                        */
@EL00003 DS    0H                                                  1019
@EF00003 DS    0H                                                  1019
@ER00003 LM    @14,@12,@SA00003                                    1019
         BR    @14                                                 1019
*   END IKJEFR00                                                   1020
*                                                                  1020
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IKJDAPL )                                       */
*/*%INCLUDE SYSLIB  (IKJPPL  )                                       */
*/*%INCLUDE SYSLIB  (IKJDAP04)                                       */
*/*%INCLUDE SYSLIB  (IKJSTPL )                                       */
*/*%INCLUDE SYSLIB  (IKJSTPB )                                       */
*/*%INCLUDE SYSLIB  (IKJIOPL )                                       */
*/*%INCLUDE SYSLIB  (IKJCPPL )                                       */
*/*%INCLUDE SYSLIB  (IKJLSD  )                                       */
*/*%INCLUDE SYSLIB  (IKJPSCB )                                       */
*                                                                  1020
*       ;                                                          1020
@EL00001 L     @13,4(,@13)                                         1020
@EF00001 L     @00,@SIZDATD                                        1020
         LR    @01,@09                                             1020
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     1020
         BR    @14                                                 1020
@DATA    DS    0H
@CH00078 DC    H'2'
@CH00355 DC    H'3'
@CH00152 DC    H'5'
@CH00104 DC    H'6'
@CH00172 DC    H'7'
@CH00037 DC    H'10'
@CH00510 DC    H'13'
@CH00814 DC    H'20'
@CH00731 DC    H'22'
@CH00854 DC    H'39'
@CH00812 DC    XL2'0008'
@SM00892 MVC   BUF(0),LAST(X)
@SM00897 MVC   PARMHOLD(0,A),CBUFF(@08)
@SM00899 MVC   CBUFF(0,@08),PARMHOLD(A)
@SM00901 MVC   GETLIST(0),GETCORE
@SM00903 MVC   STACKPRM(0),STACKLST
@SM00906 MVC   CMDNAME(0,X),0(@06)
@SM00908 MVC   DSNPARM(0,X),DSNBUF
@SM00910 MVC   MBRPARM(0,X),MBRNAME
@SM00912 MVC   PASSPARM(0,X),PASSNAME
@SM00916 MVC   SIZEPRM(0,X),SIZEPRM(@14)
@SM00918 MVC   0(0,@08),DSNBUF
@SM00920 MVC   PARMPARM(0,X),PARMBUF(@14)
@SM00922 MVC   LIBOUT(0,X),DSNMELIB(@07)
@SM00924 MVC   LIBOUT+1(0,X),MBRNMLIB(@07)
@SM00926 MVC   LIBOUT+1(0,X),PASNMLIB(@07)
@SM00928 MVC   LASTBUFF(0),LSTSEG(@08)
@SC00930 CLC   0(0,@06),CMPLR(@07)
@SM00933 MVC   DATATXT(0),CMPLR(@14)
@SM00936 MVC   FRMT1BUF(0,A),TXTMESS(B)
@SM00938 MVC   COREGOT(0,@08),PUTLIST
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SA00003 DS    15F
@AL00001 DS    4A
IKJEFR00 CSECT
         DS    0F
@CF00896 DC    F'-1'
@CF00033 DC    F'1'
@CH00033 EQU   @CF00033+2
@CF00106 DC    F'4'
@CH00106 EQU   @CF00106+2
@CF00054 DC    F'8'
@CH00054 EQU   @CF00054+2
@CF00154 DC    F'16'
@CF00306 DC    XL4'FF000000'
@CF00763 DC    XL4'40000000'
@DATD    DSECT
         DS    0D
I        DS    A
Y        DS    A
Z        DS    A
CPPLPTR  DS    A
SERVRPTR DS    A
LSDPTR   DS    A
FAKPTR   DS    A
PSCBPTR  DS    A
COREADDR DS    A
AMNT     DS    F
RCODESV  DS    F
AMTLEFT  DS    F
AMTMOVED DS    F
CHARMOVE DS    H
TOTALA   DS    H
RTRN     DS    FL2
         ORG   RTRN
FIRST    DS    CL1
SECOND   DS    CL1
         ORG   RTRN+2
@TS00001 DS    CL3
BUF      DS    CL8
SWITCH   DS    CL1
         ORG   SWITCH
FULLQUAL DS    BL1
STPRSNT  EQU   SWITCH+0
DSNPRSNT EQU   SWITCH+0
NODSNCON EQU   SWITCH+0
PDLPRES  EQU   SWITCH+0
RTCODE12 EQU   SWITCH+0
BADTYPE  EQU   SWITCH+0
PRDFOUND EQU   SWITCH+0
         ORG   SWITCH+1
         DS    CL2
WORKAREA DS    CL140
         ORG   WORKAREA
PARSPARM DS    CL8
         ORG   PARSPARM
PDLADDR  DS    AL4
PDLADDR2 DS    AL4
         ORG   WORKAREA+8
STACKPRM DS    CL8
         ORG   STACKPRM
@NM00017 DS    CL4
@NM00018 DS    AL4
         ORG   WORKAREA+16
DAIRSTOR DS    CL64
         ORG   DAIRSTOR
DAIRPARM DS    CL16
DSBUFFER DS    CL46
         ORG   DSBUFFER
DSLENG   DS    FL2
DSNBUF   DS    CL44
         ORG   DAIRSTOR+62
@NM00019 DS    CL2
         ORG   WORKAREA+80
COMMECB  DS    FL4
SERTEPRM DS    CL28
         ORG   SERTEPRM
ADUPT    DS    AL4
ADECT    DS    AL4
ADECB    DS    AL4
@NM00020 DS    AL4
@NM00021 DS    AL4
@NM00022 DS    AL4
@NM00023 DS    AL4
         ORG   WORKAREA+112
MBRBUF   DS    CL10
         ORG   MBRBUF
MBRLENG  DS    FL2
MBRNAME  DS    CL8
         ORG   WORKAREA+122
PASSBUF  DS    CL10
         ORG   PASSBUF
PASSLENG DS    FL2
PASSNAME DS    CL8
         ORG   WORKAREA+132
QUALBUF  DS    CL8
         ORG   WORKAREA+140
CORE     DS    CL4
         ORG   CORE
SPOOL    DS    CL1
SIZE     DS    AL3
         ORG   CORE+4
SEG05B   DS    CL54
         ORG   SEG05B
LEN5B    DS    FL2
NAME5B   DS    CL52
         ORG   SEG05B+54
RTCDAREA DS    CL8
         ORG   RTCDAREA
@NM00060 DS    CL2
RTCDLEN  DS    FL2
RETDEC   DS    CL4
         ORG   RETDEC
@NM00061 DS    CL3
FZERO    DS    CL1
         ORG   RTCDAREA+8
         DS    CL2
UNPACK   DS    CL8
DATATYPE DS    CL10
         ORG   DATATYPE
DATALEN  DS    FL2
DATATXT  DS    CL8
         ORG   DATATYPE+10
         DS    CL2
GETLIST  DS    CL40
MSGONE   DS    CL12
         ORG   MSGONE
MSG2PTR  DS    AL4
SEGONENO DS    FL4
PTRMSG1  DS    AL4
         ORG   MSGONE+12
MSG1BUF  DS    CL104
         ORG   MSG1BUF
LENMSG1  DS    FL2
OFFMSG1  DS    FL2
BUFMSG1  DS    CL100
         ORG   MSG1BUF+104
MSGTWO   DS    CL12
         ORG   MSGTWO
MSG3PTR  DS    AL4
SEGTWONO DS    FL4
PTRMSG2  DS    AL4
         ORG   MSGTWO+12
MSG2BUF  DS    CL104
         ORG   MSG2BUF
LENMSG2  DS    FL2
OFFMSG2  DS    FL2
BUFMSG2  DS    CL100
         ORG   MSG2BUF+104
INVALIDT DS    CL3
         ORG   INVALIDT
INVALID  DS    BL1
PARMINV  EQU   INVALIDT+0
LMSGINV  EQU   INVALIDT+0
SMSGINV  EQU   INVALIDT+0
TESTINV  EQU   INVALIDT+0
NOTSTINV EQU   INVALIDT+0
LPRECINV EQU   INVALIDT+0
SPRECINV EQU   INVALIDT+0
FIXEDINV DS    BL1
FREEINV  EQU   INVALIDT+1
CHECKINV EQU   INVALIDT+1
OPTINV   EQU   INVALIDT+1
LIBINV   EQU   INVALIDT+1
GOINV    EQU   INVALIDT+1
NOGOINV  EQU   INVALIDT+1
PAUSINV  EQU   INVALIDT+1
NOPAUINV DS    BL1
STORINV  EQU   INVALIDT+2
NOSTINV  EQU   INVALIDT+2
SRCINV   EQU   INVALIDT+2
OBJINV   EQU   INVALIDT+2
SIZINV   EQU   INVALIDT+2
         ORG   INVALIDT+3
         DS    CL1
LASTBUFF DS    CL14
         ORG   LASTBUFF
MINCOMLN DS    FL2
INVBUFF  DS    CL12
         ORG   LASTBUFF+14
         DS    CL2
TABLESEG DS    22A
IKJEFR00 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
ADMSG    DC    F'0'
CALLERNO DC    H'1'
@CC00830 DC    C'PLI'
@CB00391 DC    X'0000'
@CB00809 DC    X'0004'
@CB00852 DC    X'0014'
@CB00769 DC    X'000000'
LIBNAME  DC    CL4'LIB('
FLIBNAME DC    CL8'FORTLIB'
CLIBNAME DC    CL6'COBLIB'
LOADGO   DC    CL8'LOADGO ('
WHENEND  DC    CL16'WHEN SYSRC(GT 4)'
OBJQUAL  DC    CL4'.OBJ'
PLICNAME DC    CL4'PLIC'
PL1BASE  DC    CL7'PLIBASE'
         DS    CL1
SEG04    DS    CL12
         ORG   SEG04
SEG04LEN DC    H'10'
SEG04TXT DC    CL10'IKJ56052I '
         ORG   SEG04+12
SEG05    DS    CL35
         ORG   SEG05
@NM00052 DC    H'33'
@NM00053 DC    CL33'IKJ56057I CREATED DATA SET NAME, '
         ORG   SEG05+35
         DS    CL1
SEG05A   DS    CL28
         ORG   SEG05A
@NM00054 DC    H'26'
@NM00055 DC    CL26'.OBJ EXCEEDS 44 CHARACTERS'
         ORG   SEG05A+28
SEG08    DS    CL50
         ORG   SEG08
SEG08LEN DC    H'48'
SEG08TXT DC    CL48'IKJ56053I PARM FIELD TRUNCATED TO 100 CHARACTERS'
         ORG   SEG08+50
SEG09    DS    CL33
         ORG   SEG09
SEG09LEN DC    H'31'
SEG09TXT DC    CL31'IKJ56052I COMMAND SYSTEM ERROR+'
         ORG   SEG09+33
         DS    CL1
SEG10    DS    CL54
         ORG   SEG10
SEG10LEN DC    H'52'
SEG10TXT DC    CL52'IKJ56056I NOT ENOUGH MAIN STORAGE TO EXECUTE COMMANC
               D'
         ORG   SEG10+54
SEG11    DS    CL14
         ORG   SEG11
SEG11LEN DC    H'12'
SEG11TXT DC    CL12' ERROR CODE '
         ORG   SEG11+14
SEG13    DS    CL15
         ORG   SEG13
SEG13LEN DC    H'13'
SEG13TXT DC    CL13' IGNORED FOR '
         ORG   SEG13+15
         DS    CL1
SEG18    DS    CL12
         ORG   SEG18
SEG18LEN DC    H'10'
SEG18TXT DC    CL10'IKJ56054I '
         ORG   SEG18+12
SEG19    DS    CL20
         ORG   SEG19
SEG19LEN DC    H'18'
SEG19TXT DC    CL18' INVALID DATA TYPE'
         ORG   SEG19+20
PARSE    DS    CL7
         ORG   PARSE
@NM00056 DC    H'5'
@NM00057 DC    CL5'PARSE'
         ORG   PARSE+7
         DS    CL1
STACK    DS    CL7
         ORG   STACK
@NM00058 DC    H'5'
@NM00059 DC    CL5'STACK'
         ORG   STACK+7
         DS    CL1
PARMINBF DS    CL14
         ORG   PARMINBF
@NM00062 DC    H'12'
@NM00063 DC    CL11'PARM STRING'
@NM00064 DC    CL1','
         ORG   PARMINBF+14
LMSGINBF DS    CL7
         ORG   LMSGINBF
@NM00065 DC    H'5'
LMSG     DC    CL4'LMSG'
@NM00066 DC    CL1','
         ORG   LMSGINBF+7
         DS    CL1
SMSGINBF DS    CL7
         ORG   SMSGINBF
@NM00067 DC    H'5'
SMSG     DC    CL4'SMSG'
@NM00068 DC    CL1','
         ORG   SMSGINBF+7
         DS    CL1
TESTINBF DS    CL7
         ORG   TESTINBF
@NM00069 DC    H'5'
TEST     DC    CL4'TEST'
@NM00070 DC    CL1','
         ORG   TESTINBF+7
         DS    CL1
NOTSTIBF DS    CL9
         ORG   NOTSTIBF
@NM00071 DC    H'7'
NOTEST   DC    CL6'NOTEST'
@NM00072 DC    CL1','
         ORG   NOTSTIBF+9
         DS    CL1
LPRECIBF DS    CL8
         ORG   LPRECIBF
@NM00073 DC    H'6'
LPREC    DC    CL5'LPREC'
@NM00074 DC    CL1','
         ORG   LPRECIBF+8
SPRECIBF DS    CL8
         ORG   SPRECIBF
@NM00075 DC    H'6'
SPREC    DC    CL5'SPREC'
@NM00076 DC    CL1','
         ORG   SPRECIBF+8
FIXEDIBF DS    CL8
         ORG   FIXEDIBF
@NM00077 DC    H'6'
FIXD     DC    CL5'FIXED'
@NM00078 DC    CL1','
         ORG   FIXEDIBF+8
FREEINBF DS    CL7
         ORG   FREEINBF
@NM00079 DC    H'5'
FREE     DC    CL4'FREE'
@NM00080 DC    CL1','
         ORG   FREEINBF+7
         DS    CL1
CHECKIBF DS    CL8
         ORG   CHECKIBF
@NM00081 DC    H'6'
CHECK    DC    CL5'CHECK'
@NM00082 DC    CL1','
         ORG   CHECKIBF+8
LIBINBUF DS    CL6
         ORG   LIBINBUF
@NM00083 DC    H'4'
LIB      DC    CL3'LIB'
@NM00084 DC    CL1','
         ORG   LIBINBUF+6
GOINVBF  DS    CL5
         ORG   GOINVBF
@NM00085 DC    H'3'
GO       DC    CL2'GO'
@NM00086 DC    CL1','
         ORG   GOINVBF+5
         DS    CL1
NOGINVBF DS    CL7
         ORG   NOGINVBF
@NM00087 DC    H'5'
NOGO     DC    CL4'NOGO'
@NM00088 DC    CL1','
         ORG   NOGINVBF+7
         DS    CL1
PAUINVBF DS    CL8
         ORG   PAUINVBF
@NM00089 DC    H'6'
PAUSE    DC    CL5'PAUSE'
@NM00090 DC    CL1','
         ORG   PAUINVBF+8
NOPINVBF DS    CL10
         ORG   NOPINVBF
@NM00091 DC    H'8'
NOPAUSE  DC    CL7'NOPAUSE'
@NM00092 DC    CL1','
         ORG   NOPINVBF+10
STOINVBF DS    CL8
         ORG   STOINVBF
@NM00093 DC    H'6'
STORE    DC    CL5'STORE'
@NM00094 DC    CL1','
         ORG   STOINVBF+8
NOSINVBF DS    CL10
         ORG   NOSINVBF
@NM00095 DC    H'8'
NOSTORE  DC    CL7'NOSTORE'
@NM00096 DC    CL1','
         ORG   NOSINVBF+10
SRCINVBF DS    CL9
         ORG   SRCINVBF
@NM00097 DC    H'7'
SOURCE   DC    CL6'SOURCE'
@NM00098 DC    CL1','
         ORG   SRCINVBF+9
         DS    CL1
OBJINVBF DS    CL9
         ORG   OBJINVBF
@NM00099 DC    H'7'
OBJECT   DC    CL6'OBJECT'
@NM00100 DC    CL1','
         ORG   OBJINVBF+9
         DS    CL1
SIZINVBF DS    CL7
         ORG   SIZINVBF
@NM00101 DC    H'5'
SIZZ     DC    CL4'SIZE'
@NM00102 DC    CL1','
         ORG   SIZINVBF+7
         DS    CL1
OPTINBF  DS    CL6
         ORG   OPTINBF
@NM00103 DC    H'4'
OPT      DC    CL3'OPT'
@NM00104 DC    CL1','
         ORG   OPTINBF+6
MSGIDOP  DS    CL12
         ORG   MSGIDOP
@NM00105 DC    H'10'
@NM00106 DC    CL10'IKJ56055I '
         ORG   MSGIDOP+12
PROCESS  DS    CL13
         ORG   PROCESS
@NM00107 DC    H'11'
@NM00108 DC    CL11' PROCESSING'
         ORG   PROCESS+13
         DS    CL1
QUALTAB  DS    CL10
         ORG   QUALTAB+0
QUALLENG DC    H'3'
QUALTYPE DC    CL8'ASM     '
         ORG   QUALTAB+10
         ORG   QUALTAB+10
         DC    H'4'
         DC    CL8'FORT    '
         ORG   QUALTAB+20
         ORG   QUALTAB+20
         DC    H'5'
         DC    CL8'COBOL   '
         ORG   QUALTAB+30
         ORG   QUALTAB+30
         DC    H'5'
         DC    CL8'BASIC   '
         ORG   QUALTAB+40
         ORG   QUALTAB+40
         DC    H'4'
         DC    CL8'IPLI    '
         ORG   QUALTAB+50
         ORG   QUALTAB+50
         DC    H'4'
         DC    CL8'FORT    '
         ORG   QUALTAB+60
         ORG   QUALTAB+60
         DC    H'3'
         DC    CL8'PLI     '
         ORG   QUALTAB+70
         ORG   QUALTAB+70
         DC    H'7'
         DC    CL8'VSBASIC '
         ORG   QUALTAB+80
         ORG   QUALTAB+80
         DC    H'1'
         DC    CL8'QUALEND '
         ORG   QUALTAB+90
PLITYPE  DC    CL3'CHK'
         DC    CL3'OPT'
TYPETBLE DS    CL16
         ORG   TYPETBLE+0
TYPELNG  DC    H'3'
TYPES    DC    CL8'ASM     '
COMMANDS DC    X'E0'
         ORG   COMMANDS+0
COMPLCMD DS    BL1
WHENCMND EQU   COMMANDS+0
LOADCMD  EQU   COMMANDS+0
@NM00050 EQU   COMMANDS+0
         ORG   TYPETBLE+11
VALIDPRM DC    X'8080'
         ORG   VALIDPRM+0
PRMSTRNG DS    BL1
LMSGSMSG EQU   VALIDPRM+0
TESTPARM EQU   VALIDPRM+0
PRECPARM EQU   VALIDPRM+0
FORM     EQU   VALIDPRM+0
FLIBPARM EQU   VALIDPRM+0
CLIBPARM EQU   VALIDPRM+0
CHECKOPT EQU   VALIDPRM+0
LIBOPND  DS    BL1
GOBIT    EQU   VALIDPRM+1
PAUSBIT  EQU   VALIDPRM+1
STORBIT  EQU   VALIDPRM+1
SRCBIT   EQU   VALIDPRM+1
SIZBIT   EQU   VALIDPRM+1
         ORG   TYPETBLE+13
@NM00051 DS    CL3
         ORG   TYPETBLE+16
         ORG   TYPETBLE+16
         DC    H'6'
         DC    CL8'GOFORT  '
         DC    X'80'
         DC    X'4800'
         ORG   TYPETBLE+32
         ORG   TYPETBLE+32
         DC    H'5'
         DC    CL8'COBOL   '
         DC    X'E0'
         DC    X'8280'
         ORG   TYPETBLE+48
         ORG   TYPETBLE+48
         DC    H'5'
         DC    CL8'BASIC   '
         DC    X'80'
         DC    X'7000'
         ORG   TYPETBLE+64
         ORG   TYPETBLE+64
         DC    H'4'
         DC    CL8'IPLI    '
         DC    X'80'
         DC    X'6000'
         ORG   TYPETBLE+80
         ORG   TYPETBLE+80
         DC    H'4'
         DC    CL8'FORT    '
         DC    X'E0'
         DC    X'8480'
         ORG   TYPETBLE+96
         ORG   TYPETBLE+96
         DC    H'3'
         DC    CL8'PLI     '
         DC    X'E0'
         DC    X'8180'
         ORG   TYPETBLE+112
         ORG   TYPETBLE+112
         DC    H'7'
         DC    CL8'VSBASIC '
         DC    X'80'
         DC    X'307C'
         ORG   TYPETBLE+128
         ORG   TYPETBLE+128
         DC    H'1'
         DC    X'FFFFFFFFFFFFFFFF'
         DC    X'00'
         DC    X'0000'
         ORG   TYPETBLE+144
TABOPTAD DC    AL4(MSGIDOP)
         DC    AL4(PARMINBF)
         DC    AL4(LMSGINBF)
         DC    AL4(SMSGINBF)
         DC    AL4(TESTINBF)
         DC    AL4(NOTSTIBF)
         DC    AL4(LPRECIBF)
         DC    AL4(SPRECIBF)
         DC    AL4(FIXEDIBF)
         DC    AL4(FREEINBF)
         DC    AL4(CHECKIBF)
         DC    AL4(OPTINBF)
         DC    AL4(LIBINBUF)
         DC    AL4(GOINVBF)
         DC    AL4(NOGINVBF)
         DC    AL4(PAUINVBF)
         DC    AL4(NOPINVBF)
         DC    AL4(STOINVBF)
         DC    AL4(NOSINVBF)
         DC    AL4(SRCINVBF)
         DC    AL4(OBJINVBF)
         DC    AL4(SIZINVBF)
MASK     DC    X'800000'
         DC    X'400000'
         DC    X'200000'
         DC    X'100000'
         DC    X'080000'
         DC    X'040000'
         DC    X'020000'
         DC    X'010000'
         DC    X'008000'
         DC    X'004000'
         DC    X'002000'
         DC    X'001000'
         DC    X'000800'
         DC    X'000400'
         DC    X'000200'
         DC    X'000100'
         DC    X'000080'
         DC    X'000040'
         DC    X'000020'
         DC    X'000010'
         DC    X'000008'
         DC    X'000004'
IKJEFR00 CSECT
*                                                            /*Y01993*/
GETCORE  GETMAIN EC,SP=78,MF=L
GETEND   EQU *
GETLEN   DC A(GETEND-GETCORE)
PUTLIST  PUTLINE OUTPUT=(PUTLIST,MULTLVL),MF=L
PUTEND   EQU *
PUTLEN   DC  A(PUTEND-PUTLIST)
STACKLST STACK STORAGE=(STACKLST,PROCN),MF=L
STACKEND EQU *
STACKLEN DC A(STACKEND-STACKLST)
         DS    0F
LISTB    EQU   *
STACKLS  STACK MF=L
LISTE    EQU  *
IKJEFR01 IKJPARM DSECT=PCL
DSNAME   IKJPOSIT   DSNAME,                                            X
               PROMPT='DATA SET NAME',                                 X
               HELP='INPUT DATA SET NAME'
PARMS    IKJPOSIT   QSTRING
DSTYPE   IKJKEYWD
         IKJNAME    'ASM'
         IKJNAME    'GOFORT'
         IKJNAME    'COBOL'
         IKJNAME    'BASIC'
         IKJNAME    'IPLI'
         IKJNAME    'FORT'
         IKJNAME    'PLI'
         IKJNAME    'VSBASIC'
MSG      IKJKEYWD
         IKJNAME    'LMSG'
         IKJNAME    'SMSG'
PREC     IKJKEYWD
         IKJNAME    'LPREC'
         IKJNAME    'SPREC'
TESTP    IKJKEYWD
         IKJNAME    'TEST'
         IKJNAME    'NOTEST'
FORMAT   IKJKEYWD
         IKJNAME    'FIXED'
         IKJNAME    'FREE'
CKOPT    IKJKEYWD
         IKJNAME     'CHECK'
         IKJNAME     'OPT'
LOADLIB   IKJKEYWD
          IKJNAME    'LIB',SUBFLD=DSLIST                         Y01156
GOGO     IKJKEYWD
         IKJNAME    'GO'
         IKJNAME    'NOGO'
PPAUS    IKJKEYWD
         IKJNAME    'PAUSE'
         IKJNAME    'NOPAUSE'
SSTOR    IKJKEYWD
         IKJNAME    'STORE'
         IKJNAME    'NOSTORE'
SSRC     IKJKEYWD
         IKJNAME    'SOURCE'
         IKJNAME    'OBJECT'
SSIZ     IKJKEYWD
         IKJNAME    'SIZE',SUBFLD=SZLST
DSLIST   IKJSUBF
DSLIB    IKJPOSIT   DSNAME,LIST,                                       *
               PROMPT='LIBRARY DATA SET NAME',                         *
               HELP='NAME OF LIBRARY CONTAINING ROUTINES USED BY YOUR P*
               ROGRAM.'
SZLST    IKJSUBF
SNUM     IKJIDENT   'USER AREA SPACE',FIRST=NUMERIC,OTHER=NUMERIC,     *
               PROMPT='THE SIZE OF USER AREA YOU DESIRE',MAXLNTH=3
         IKJENDP
RUNADCN  DC    A(IKJEFR01)
* THE FOLLOWING IS A PCL FOR PARSE, USED WHEN IT IS NECESSARY TO
* REENTER PARSE TO PROMPT FOR THE DATA SET TYPE
IKJEFR02 IKJPARM DSECT=PCL2
TYPE2    IKJIDENT 'COMPILER',FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=7,     C
               PROMPT='DATA SET TYPE',                                 C
               HELP='ASM,FORT,COBOL,BASIC,IPLI,GOFORT,PLI,VSBASIC'
         IKJENDP
RUNADCN2 DC A(IKJEFR02)
* THE FOLLOWING IS A PCL FOR PARSE,  USED WHEN IT IS REENTERED TO
* PROMPT FOR THE DSNAME - THE FIRST NAME WAS NOT FOUND
IKJEFR03 IKJPARM DSECT=PCL3
DSNAME2  IKJPOSIT   DSNAME,PROMPT='DATA SET NAME',                     *
               HELP='INPUT DATA SET NAME'
         IKJENDP
RUNADCN3 DC A(IKJEFR03)
@DATD    DSECT
STACKLSD STACK MF=L
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKJEFR00 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
XSAVE    EQU   @03
LIBPTR   EQU   @03
CALCY    EQU   @02
PDLSAVE  EQU   @02
STPBPTR  EQU   @02
DAPB0PTR EQU   @03
RTRNCODE EQU   @02
X        EQU   @02
B        EQU   @02
A        EQU   @03
R0       EQU   @00
R1       EQU   @01
R5       EQU   @05
R4       EQU   @04
R15      EQU   @15
LASTQUAL EQU   0
LAST     EQU   0
DAPL     EQU   0
DAPLPSCB EQU   DAPL+12
DAPLDAPB EQU   DAPL+16
PPL      EQU   0
PPLPCL   EQU   PPL+12
PPLANS   EQU   PPL+16
PPLCBUF  EQU   PPL+20
DAPB04   EQU   0
DA04CD   EQU   DAPB04
DA04FLG  EQU   DAPB04+2
DA04CTRC EQU   DAPB04+6
DA04PDSN EQU   DAPB04+8
DA04CTL  EQU   DAPB04+12
DA04UID  EQU   DA04CTL
STPL     EQU   0
STPLSTPB EQU   STPL+12
STPB     EQU   0
STPBALSD EQU   STPB+4
IOPL     EQU   0
IOPLIOPB EQU   IOPL+12
CMDBFR   EQU   0
CPPL     EQU   0
CPPLCBUF EQU   CPPL
CPPLUPT  EQU   CPPL+4
CPPLPSCB EQU   CPPL+8
CPPLECT  EQU   CPPL+12
COMMDBUF EQU   0
CONTRLBF EQU   COMMDBUF
CNTRLBF  EQU   CONTRLBF
CONTRESD EQU   COMMDBUF+2
CNTRESD  EQU   CONTRESD
CMDNAME  EQU   0
MSGBUFF  EQU   0
PRECPRM  EQU   0
WHENIFCD EQU   0
DSNPARM  EQU   0
RPAREN   EQU   0
MBRPARM  EQU   0
LPAREN   EQU   0
SLASH    EQU   0
PASSPARM EQU   0
NOTESTPR EQU   0
TESTPRM  EQU   0
FIXEDPRM EQU   0
FREEPARM EQU   0
GOPRM    EQU   0
NOGOPRM  EQU   0
SRCPRM   EQU   0
OBJPRM   EQU   0
PAUSPRM  EQU   0
NOPAUPRM EQU   0
STOREPRM EQU   0
NOSTOPRM EQU   0
SIZEPRM  EQU   0
LOADCMND EQU   0
PARMPARM EQU   0
RQUOTE   EQU   0
LQUOTE   EQU   0
FORTLIBP EQU   0
COBLIBP  EQU   0
PL1BASEP EQU   0
LSD      EQU   0
LSDADATA EQU   LSD
LSDRCLEN EQU   LSD+4
LSDTOTLN EQU   LSD+6
LSDANEXT EQU   LSD+8
PDL2     EQU   0
TYPEPTR  EQU   PDL2+8
TYPELEN  EQU   PDL2+12
CMPLR    EQU   0
RUNPDL   EQU   0
DSNPDE   EQU   RUNPDL+8
DSNPTR   EQU   DSNPDE
DSLEN    EQU   DSNPDE+4
DSNFLAG  EQU   DSNPDE+6
DSNPRES  EQU   DSNFLAG
DSNQUOT  EQU   DSNFLAG
MBRPTR   EQU   DSNPDE+8
MBRLEN   EQU   DSNPDE+12
MBRFLAG  EQU   DSNPDE+14
MBRPRES  EQU   MBRFLAG
PASSPTR  EQU   DSNPDE+16
PASSLEN  EQU   DSNPDE+20
PASSFLAG EQU   DSNPDE+22
PASSPRES EQU   PASSFLAG
PARMPDE  EQU   RUNPDL+32
PARMPTR  EQU   PARMPDE
PARMLEN  EQU   PARMPDE+4
PARMFLAG EQU   PARMPDE+6
PARMPRES EQU   PARMFLAG
TYPEPDE  EQU   RUNPDL+40
MSGPDE   EQU   RUNPDL+42
PRECPDE  EQU   RUNPDL+44
TESTPDE  EQU   RUNPDL+46
FORMPDE  EQU   RUNPDL+48
OPTPDE   EQU   RUNPDL+50
LIBPDE   EQU   RUNPDL+52
GOPDE    EQU   RUNPDL+54
PAUSPDE  EQU   RUNPDL+56
STOREPDE EQU   RUNPDL+58
SRCPDE   EQU   RUNPDL+60
SIZPDE   EQU   RUNPDL+62
FIRSTDSN EQU   RUNPDL+64
@NM00037 EQU   RUNPDL+92
SIZPTR   EQU   @NM00037
SIZLEN   EQU   @NM00037+4
LDSNPDE  EQU   0
LDSNPTR  EQU   LDSNPDE
LDSNLEN  EQU   LDSNPDE+4
LDSNFLAG EQU   LDSNPDE+6
LDSNPRES EQU   LDSNFLAG
LDSNQUOT EQU   LDSNFLAG
LMBRPTR  EQU   LDSNPDE+8
LMBRLEN  EQU   LDSNPDE+12
LMBRFLAG EQU   LDSNPDE+14
LMBRPRES EQU   LMBRFLAG
LPASSPTR EQU   LDSNPDE+16
LPASSLEN EQU   LDSNPDE+20
LPASSFLG EQU   LDSNPDE+22
LPASPRES EQU   LPASSFLG
CHAINPTR EQU   LDSNPDE+24
DSNMELIB EQU   0
MBRNMLIB EQU   0
PASNMLIB EQU   0
LIBOUT   EQU   0
PSCB     EQU   0
PSCBUSER EQU   PSCB
PSCBUSRL EQU   PSCB+7
PSCBATR1 EQU   PSCB+16
DSNMEBUF EQU   0
MBRNMBUF EQU   0
PASNMBUF EQU   0
PARMBUF  EQU   0
DOTOBJ   EQU   0
PARMHOLD EQU   0
CBUFF    EQU   0
BUFFCHAR EQU   0
HOLDCHAR EQU   0
COREGOT  EQU   0
IKJEFF18 EQU   0
FRMT1BUF EQU   0
MESSAGE  EQU   0
LENMESS  EQU   MESSAGE
TXTMESS  EQU   MESSAGE+2
LSTSEG   EQU   0
LSTNUM   EQU   LSTSEG
FAKBFR   EQU   0
TMCTPARM EQU   0
DAPLPTR  EQU   SERVRPTR
PPLPTR   EQU   SERVRPTR
STPLPTR  EQU   SERVRPTR
ZERO1    EQU   DA04FLG
ZERO2    EQU   DA04CTL
IOPLPTR  EQU   SERVRPTR
OUTADDR  EQU   COREGOT+4
MSGPARM  EQU   TABLESEG
W1       EQU   MSGPARM
W2       EQU   MSGPARM+4
W3       EQU   MSGPARM+8
W4       EQU   MSGPARM+12
W5       EQU   MSGPARM+16
W6       EQU   MSGPARM+20
W7       EQU   MSGPARM+24
SGMNTLST EQU   MSGPARM
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
W12      EQU   MSGPARM+44
W11      EQU   MSGPARM+40
W10      EQU   MSGPARM+36
W9       EQU   MSGPARM+32
W8       EQU   MSGPARM+28
LSTOPT   EQU   LSTSEG+2
PSCBU    EQU   PSCB+64
PSCBRSZ  EQU   PSCB+60
PSCBLINE EQU   PSCB+59
PSCBCHAR EQU   PSCB+58
PSCBUPTL EQU   PSCB+56
PSCBUPT  EQU   PSCB+52
PSCBRLGB EQU   PSCB+48
PSCBDEST EQU   PSCB+40
@NM00049 EQU   PSCB+36
@NM00048 EQU   PSCB+32
@NM00047 EQU   PSCB+28
PSCBLTI2 EQU   PSCB+24
PSCBLTIM EQU   PSCB+20
PSCBATR2 EQU   PSCB+18
@NM00046 EQU   PSCBATR1
@NM00045 EQU   PSCBATR1
@NM00044 EQU   PSCBATR1
PSCBATTN EQU   PSCBATR1
PSCBVMNT EQU   PSCBATR1
PSCBJCL  EQU   PSCBATR1
PSCBACCT EQU   PSCBATR1
PSCBCTRL EQU   PSCBATR1
PSCBGPNM EQU   PSCB+8
@NM00043 EQU   LDSNPDE+23
@NM00042 EQU   LPASSFLG
@NM00041 EQU   LDSNPDE+15
@NM00040 EQU   LMBRFLAG
@NM00039 EQU   LDSNPDE+7
@NM00038 EQU   LDSNFLAG
@NM00036 EQU   PARMPDE+7
@NM00035 EQU   PARMFLAG
@NM00034 EQU   DSNPDE+23
@NM00033 EQU   PASSFLAG
@NM00032 EQU   DSNPDE+15
@NM00031 EQU   MBRFLAG
@NM00030 EQU   DSNPDE+7
@NM00029 EQU   DSNFLAG
@NM00028 EQU   RUNPDL+4
@NM00027 EQU   RUNPDL
@NM00026 EQU   PDL2+15
TYPEFLG  EQU   PDL2+14
@NM00025 EQU   PDL2+4
@NM00024 EQU   PDL2
LSDRSVRD EQU   LSD+12
IOPLECB  EQU   IOPL+8
IOPLECT  EQU   IOPL+4
IOPLUPT  EQU   IOPL
STPBOTDD EQU   STPB+12
STPBINDD EQU   STPB+8
@NM00016 EQU   STPB
STPLECB  EQU   STPL+8
STPLECT  EQU   STPL+4
STPLUPT  EQU   STPL
DA04DSO  EQU   DAPB04+15
@NM00015 EQU   DAPB04+13
@NM00014 EQU   DA04CTL
@NM00013 EQU   DA04CTL
@NM00012 EQU   DA04CTL
@NM00011 EQU   DA04CTL
@NM00010 EQU   DA04CTL
@NM00009 EQU   DA04CTL
@NM00008 EQU   DA04CTL
@NM00007 EQU   DAPB04+4
@NM00006 EQU   DA04FLG
DA04DSE  EQU   DA04FLG
DA04CAT  EQU   DA04FLG
@NM00005 EQU   DA04FLG
@NM00004 EQU   DA04FLG
@NM00003 EQU   DA04FLG
@NM00002 EQU   DA04FLG
@NM00001 EQU   DA04FLG
PPLUWA   EQU   PPL+24
PPLECB   EQU   PPL+8
PPLECT   EQU   PPL+4
PPLUPT   EQU   PPL
DAPLECB  EQU   DAPL+8
DAPLECT  EQU   DAPL+4
DAPLUPT  EQU   DAPL
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00170 EQU   NOPRSERR
@RT00196 EQU   STEXIT
@RF00196 EQU   EXIT1
@RT00201 EQU   NOTQUAL
@RT00212 EQU   QUALFND2
@RT00220 EQU   NOTQUAL
@RT00222 EQU   VALDCMPL
@RT00227 EQU   DAIRINIT
@RF00227 EQU   PROMPT
@RT00234 EQU   DAIRINIT
@RT00236 EQU   PRMPRET
@RT00238 EQU   DAIRINIT
@RF00238 EQU   PRMPRET
@RT00242 EQU   PRMPTYPE
@RT00245 EQU   DAIRINIT
@RT00248 EQU   QUALONLY
@RT00266 EQU   CALCORE
@RT00282 EQU   DIAGPARS
@RT00295 EQU   NODSNAME
@RT00354 EQU   NOSTRIP
@RT00357 EQU   NOSTRIP
@RT00360 EQU   NODSNPRS
@RT00385 EQU   PLITEST
@RT00390 EQU   PRMCON2
@RT00446 EQU   BUILD3
@RT00466 EQU   NOSTORGE
@RF00484 EQU   @RC00482
@RT00501 EQU   NODSN2
@RT00503 EQU   MOVEDSN
@RC00562 EQU   @RC00561
@RC00581 EQU   @RC00580
@RC00600 EQU   @RC00599
@RC00619 EQU   @RC00618
@RT00693 EQU   PARMATCH
@RT00707 EQU   PARMATCH
@RT00711 EQU   NODSN3
@RT00749 EQU   FORTTEST
@RC00786 EQU   @RC00785
@RT00833 EQU   INVOPTST
@RT00837 EQU   ENDBLD
@RT00908 EQU   DIAGPARS
@RT00911 EQU   TYPEMSG
@RT00922 EQU   PRMPRET
@RF00927 EQU   PRMPTYPE
@RC00950 EQU   @RC00945
@RC00961 EQU   @EL00002
@RT00975 EQU   MSG2FRMT
@RT01000 EQU   MSGLOOP2
@PB00003 EQU   @EL00001
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IKJEFR00
