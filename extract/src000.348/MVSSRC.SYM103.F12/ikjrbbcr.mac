         TITLE '''SYNCH'' SUBCOMMAND OF ACCOUNT                      '
         EJECT
IKJRBBCR CSECT ,                                                   0002
@MAINENT DS    0H                                                  0002
         USING *,@15                                               0002
         B     @PROLOG                                             0002
         DC    AL1(16)                                             0002
         DC    C'IKJRBBCR  73.153'                                 0002
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0002
         BALR  @11,0                                               0002
@PSTART  DS    0H                                                  0002
         USING @PSTART,@11                                         0002
         L     @00,@SIZDATD                                        0002
         GETMAIN R,LV=(0)
         LR    @12,@01                                             0002
         USING @DATD,@12                                           0002
         ST    @13,@SA00001+4                                      0002
         LM    @00,@01,20(@13)                                     0002
         ST    @12,8(,@13)                                         0002
         LR    @13,@12                                             0002
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MVC   @PC00001(4),0(@01)                                  0002
         MODID BRANCH='1'B
         EJECT
         EJECT
         EJECT
         EJECT
*    CPPLPTR = R1;                 /* SAVE PTR TO PARM LIST         */
         ST    R1,CPPLPTR                                          0096
*    RFY (R2) RSTD;                                                0097
*    CALL INITS;                   /* DO INITIALIZATION, SET UP PARM
*                                     LISTS, ETC.                   */
         BAL   @14,INITS                                           0098
*    CALL ALLOCBC;                 /* ALLOCATE BRODCAST DATA SET.  0099
*                                     'BCASTDDN' IS SET BY 'ALLOCBC'*/
         BAL   @14,ALLOCBC                                         0099
*    IF SUBRETC = 0 THEN           /* CHECK RET CODE FROM 'ALLOCBC' */
         CLI   SUBRETC,0                                           0100
         BNE   @RF00100                                            0100
*      DO;                                                         0101
*        CALL OPENUADS;            /* ENQ AND OPEN UADS             */
         BAL   @14,OPENUADS                                        0102
*        IF SUBRETC = 0 THEN       /* CHECK RET CODE FROM 'OPENUADS'*/
         CLI   SUBRETC,0                                           0103
         BNE   @RF00103                                            0103
*          DO;                                                     0104
*            CALL OPENBCST;        /* ENQ, OPEN BROADCAST AND DO   0105
*                                     'CREATE' PROCESSING           */
         BAL   @14,OPENBCST                                        0105
*            IF SUBRETC = 0 THEN   /* CHECK RET CODE FROM 'OPENBCST'*/
         CLI   SUBRETC,0                                           0106
         BNE   @RF00106                                            0106
*              DO;                                                 0107
*                CALL FORMAT;      /* FORMAT AND WRITE THE MAIL DIR-
*                                     ECTORY RECORDS OF BROADCAST DS*/
         BAL   @14,FORMAT                                          0108
*                IF SUBRETC = 0 THEN /* CHECK RET CODE FROM 'FORMAT'*/
         CLI   SUBRETC,0                                           0109
         BNE   @RF00109                                            0109
*                  MSGINDX = MSGIDD0; /* INDICATE MSG TO BE ISSUED -
*                                     'BROADCAST DATA SET FORMATTED'*/
         MVC   MSGINDX(4),MSGIDD0                                  0110
*                ELSE              /* ERROR IN 'FORMAT' SUBRTN      */
*                  FBADSYNC = '1'B;                                0111
         B     @RC00109                                            0111
@RF00109 OI    FBADSYNC,B'00100000'                                0111
*              END;                                                0112
*            ELSE                  /* ERROR IN 'OPENBCST' SUBRTN    */
*              FBADSYNC = '1'B;                                    0113
         B     @RC00106                                            0113
@RF00106 OI    FBADSYNC,B'00100000'                                0113
*          END;                                                    0114
*        ELSE                      /* ERROR IN 'OPENUADS' SUBRTN    */
*          FBADSYNC = '1'B;                                        0115
         B     @RC00103                                            0115
@RF00103 OI    FBADSYNC,B'00100000'                                0115
*      END;                                                        0116
*    ELSE                          /* ERROR IN 'ALLOCBC' SUBRTN     */
*      FBADSYNC = '1'B;                                            0117
*                                                                  0117
         B     @RC00100                                            0117
@RF00100 OI    FBADSYNC,B'00100000'                                0117
*    IF MSGINDX ^= 0 THEN          /* CHECK IF ANY MSG TO BE ISSUED */
@RC00100 MVC   @TF00001(4),MSGINDX                                 0118
         L     @10,@TF00001                                        0118
         LTR   @10,@10                                             0118
         BZ    @RF00118                                            0118
*      DO;                         /* YES, SET UP TO CALL IKJEFF02  */
*        MSGCSECT = ADDR(IKJRBBCM); /* PTR TO MSG CSECT             */
         L     @10,@CA00338                                        0120
         ST    @10,MSGCSECT                                        0120
*        MSGREVER = '1'B;          /* INDICATE PUTLINE TO BE USED   */
         OI    MSGREVER,B'01000000'                                0121
*                                  /* MSG INDICATOR, MSGINDX, IS   0122
*                                     ALREADY SET UP                */
*        /*   CALL IKJEFF02 TO ISSUE DIAGNOSTIC MSG                 */
*        CALL IKJEFF02 (MSGPARM,ACCTCPPL,SDECB);                   0122
         LA    @10,MSGPARM                                         0122
         ST    @10,@AL00001                                        0122
         L     @10,CPPLPTR                                         0122
         ST    @10,@AL00001+4                                      0122
         LA    @10,SDECB                                           0122
         ST    @10,@AL00001+8                                      0122
         L     @15,@CV00291                                        0122
         LA    @01,@AL00001                                        0122
         BALR  @14,@15                                             0122
*      END;                                                        0123
*    ELSE;                         /* NO MESSAGE TO ISSUE           */
         B     @RC00118                                            0124
@RF00118 DS    0H                                                  0125
*    CALL CLEANUP;                 /* CLOSE DATA SETS, DEQ, ETC.    */
*                                                                  0125
@RC00118 BAL   @14,CLEANUP                                         0125
*EXITCODE:                                                         0126
*    IF FBADSYNC = '1'B THEN       /* CHECK FOR ANY ERROR           */
EXITCODE TM    FBADSYNC,B'00100000'                                0126
         BNO   @RF00126                                            0126
*      DO;                         /* YES, SOME ERROR OCCURRED      */
*        R2 = CPPLECB;             /* REG2 = ADDR. ACCOUNT ECB      */
         L     @10,CPPLPTR                                         0128
         L     R2,CPPLECB(,@10)                                    0128
*        GEN (POST  (R2),12)           /* POST ACCOUNT ECB WITH '12'*/
*            REFS(R2);                                             0129
         POST  (R2),12
*      END;                                                        0130
*    ELSE;                         /* SUCCESSFUL COMPLETION         */
         B     @RC00126                                            0131
*    RETURN;                       /* RETURN TO CALLER, ACCOUNT     */
@EL00001 L     @13,4(,@13)                                         0132
@EF00001 L     @00,@SIZDATD                                        0132
         LR    @01,@12                                             0132
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0132
         BR    @14                                                 0132
*INITS:  PROC  ;                                                   0133
*                                                                  0133
INITS    STM   @14,@12,@SA00002                                    0133
*    SDECB = SDECB && SDECB;       /* CLEAR SYNC ECB TO ZERO. ECB  0134
*                                     ADDR IS PASSED TO DAIR.       */
         XC    SDECB(4),SDECB                                      0134
*    MSGPARM = MSGPARM && MSGPARM; /* CLEAR PARMLIST FOR IKJEFF02   */
         XC    MSGPARM(36),MSGPARM                                 0135
*    GEN  (MVC  AUTOLIST(LISTEND-LISTBEG),LISTBEG);                0136
         MVC  AUTOLIST(LISTEND-LISTBEG),LISTBEG
*/*                                                                 */
*/*                     SET UP ACCTPLST                             */
*/*                                                                 */
*    UPTPTR = CPPLUPT;             /* PTR TO UPT                    */
         L     @10,CPPLPTR                                         0137
         MVC   UPTPTR(4),CPPLUPT(@10)                              0137
*    ECTPTR = CPPLECT;             /* PTR TO ECT                    */
         MVC   ECTPTR(4),CPPLECT(@10)                              0138
*    AECBPTR = CPPLECB;            /* PTR TO ACCOUNT'S ECB          */
         MVC   AECBPTR(4),CPPLECB(@10)                             0139
*    BUFPTR  = CPPLCBUF;           /* PTR TO COMMAND BUFFER         */
         MVC   BUFPTR(4),CPPLCBUF(@10)                             0140
*    CMDIND = 0;                   /* THIS FIELD IS SET TO 1 BY    0141
*                                     ACCOUNT IF LISTIDS CMD ENTERED*/
         SR    @10,@10                                             0141
         ST    @10,CMDIND                                          0141
*    USDPTR = ADDR(DIRAREA);       /* SET PTR TO BRODCAST DIRECTORY
*                                     WORK AREA WHERE RCD IS BUILT  */
         LA    @10,DIRAREA                                         0142
         ST    @10,@TF00001                                        0142
         MVC   USDPTR(3),@TF00001+1                                0142
*    USDIR = USDIR && USDIR;       /* CLEAR BRODCAST DIRECTORY TO 0 */
         XC    USDIR(129,@10),USDIR(@10)                           0143
*    FLAGS = '0'B;                 /* CLEAR ALL FLAGS TO ZERO       */
         MVI   FLAGS,B'00000000'                                   0144
*    RETURN;                       /* RETURN TO MAINLINE PROCESSING */
@EL00002 DS    0H                                                  0145
@EF00002 DS    0H                                                  0145
@ER00002 LM    @14,@12,@SA00002                                    0145
         BR    @14                                                 0145
*    END INITS;                                                    0146
*ALLOCBC:                                                          0147
*        PROC  ;                                                   0147
ALLOCBC  STM   @14,@12,@SA00003                                    0147
*    RFY (R1) RSTD;                                                0148
*    IF ECTBKGRD = '0'B THEN       /* TEST IF RUNNING IN BACKGROUND */
         L     @10,ECTPTR                                          0149
         TM    ECTBKGRD(@10),B'00000010'                           0149
         BNZ   @RF00149                                            0149
*      DO;                         /* NO, THIS IS FOREGROUND-USE DAIR*/
* /*                                                                 */
* /*                 -    D    A    I    R    -                      */
* /*                                                                 */
* /*      GO TO DAIR WITH CODE X'08' TO REQUEST ALLOCATION OF        */
* /*      BROADCAST DATA SET.  SINCE THE DATA SET IS CATALOGED,      */
* /*      ONLY THE DSNAME AND DISPOSITION FIELDS NEED BE SUPPLIED.   */
* /*                                                                 */
*         DAPB0PTR = ADDR(AUTODAIR);/* SET BASE FOR DAIR PARM BL     */
         LA    @10,AUTODAIR                                        0151
         ST    @10,DAPB0PTR                                        0151
*         DAPB08=DAPB08 && DAPB08;  /* CLEAR DAIR PARM BL            */
         XC    DAPB08(84,@10),DAPB08(@10)                          0152
*         DA08CD = DAIRCD08;        /* SET DAIR CODE = X'08'         */
         MVC   DA08CD(2,@10),DAIRCD08                              0153
*         DA08PDSN = ADDR(DAIRDSN); /* PTR TO DATA SET NAME          */
         LA    @00,DAIRDSN                                         0154
         ST    @00,DA08PDSN(,@10)                                  0154
*         DA08DDN  = ' ';           /* DDNAME FIELD = BLANK,       0155
*                                      DDNAME IS RETURNED HERE       */
         MVI   DA08DDN+1(@10),C' '                                 0155
         MVC   DA08DDN+2(6,@10),DA08DDN+1(@10)                     0155
         MVI   DA08DDN(@10),C' '                                   0155
*         DA08UNIT = ' ';           /* UNITNAME = BLANK              */
         MVI   DA08UNIT+1(@10),C' '                                0156
         MVC   DA08UNIT+2(6,@10),DA08UNIT+1(@10)                   0156
         MVI   DA08UNIT(@10),C' '                                  0156
*         DA08SER = ' ';            /* VOLUME SERIAL NO. = BLANK     */
         MVI   DA08SER+1(@10),C' '                                 0157
         MVC   DA08SER+2(6,@10),DA08SER+1(@10)                     0157
         MVI   DA08SER(@10),C' '                                   0157
*         DA08MNM = ' ';            /* MEMBER NAME = BLANK           */
         MVI   DA08MNM+1(@10),C' '                                 0158
         MVC   DA08MNM+2(6,@10),DA08MNM+1(@10)                     0158
         MVI   DA08MNM(@10),C' '                                   0158
*         DA08PSWD = ' ';           /* DATA SET PASSWORD = BLANK     */
         MVI   DA08PSWD+1(@10),C' '                                0159
         MVC   DA08PSWD+2(6,@10),DA08PSWD+1(@10)                   0159
         MVI   DA08PSWD(@10),C' '                                  0159
*         DA08SHR = '1'B;           /* STATUS = SHARE                */
         OI    DA08SHR(@10),B'00001000'                            0160
*         DA08KEEP = '1'B;          /* NORMAL DISPOSITION = KEEP     */
         OI    DA08KEEP(@10),B'00001000'                           0161
*         DA08KEP = '1'B;           /* CONDITIONAL DISPOSITION = KEEP*/
         OI    DA08KEP(@10),B'00001000'                            0162
*         DAPLPTR = ADDR(AUTOPARM); /* SET POINTER TO PARM LIST      */
         LA    @00,AUTOPARM                                        0163
         ST    @00,DAPLPTR                                         0163
*         DAPLUPT = CPPLUPT;        /* UPT ADDR                      */
         L     @15,CPPLPTR                                         0164
         LR    @14,@00                                             0164
         MVC   DAPLUPT(4,@14),CPPLUPT(@15)                         0164
*         DAPLECT = CPPLECT;        /* ECT ADDR                      */
         LR    @14,@00                                             0165
         MVC   DAPLECT(4,@14),CPPLECT(@15)                         0165
*         DAPLECB = ADDR(SDECB);    /* ADDR OF SEND ECB              */
         LA    @14,SDECB                                           0166
         LR    @09,@00                                             0166
         ST    @14,DAPLECB(,@09)                                   0166
*         DAPLPSCB = CPPLPSCB;      /* PTR TO PSCB                   */
         LR    @14,@00                                             0167
         MVC   DAPLPSCB(4,@14),CPPLPSCB(@15)                       0167
*         DAPLDAPB = DAPB0PTR;      /* PTR TO DAIR PARM BLOCK        */
         LR    @15,@00                                             0168
         ST    @10,DAPLDAPB(,@15)                                  0168
*         R1 = DAPLPTR;             /* SET REG1 = ADDR PARM LIST     */
         LR    R1,@00                                              0169
*         GEN  (LINK  EP=IKJDAIR);  /* LINK TO DAIR '08'            */
         LINK  EP=IKJDAIR
*                                  /*TO ALLOCATE BROADCAST DATA SET */
*        DAIRRETC = R15;           /* SAVE RETURN CODE FROM REG 15  */
         ST    R15,DAIRRETC                                        0171
*        IF DAIRRETC > 0 THEN      /* TEST RETURN CODE FROM DAIR    */
         L     @10,DAIRRETC                                        0172
         LTR   @10,@10                                             0172
         BNP   @RF00172                                            0172
*          DO;                     /* SOME ERROR IN DAIR PROCESSING,
*                                     CALL COMMON DAIR FAIL ROUTINE */
*            GEN (LOAD  EP=IKJEFF18);                              0174
         LOAD  EP=IKJEFF18
*            F18ADDR = R0;         /* SAVE ENTRY PT ADDR FROM REG 0
*                                     AFTER LOAD OF IKJEFF18        */
         ST    R0,F18ADDR                                          0175
*            CALL IKJEFF18 (DAPL,DAIRRETC,F18F02,F18CLNO);         0176
         L     @10,DAPLPTR                                         0176
         ST    @10,@AL00001                                        0176
         LA    @10,DAIRRETC                                        0176
         ST    @10,@AL00001+4                                      0176
         LA    @10,F18F02                                          0176
         ST    @10,@AL00001+8                                      0176
         LA    @10,F18CLNO                                         0176
         ST    @10,@AL00001+12                                     0176
         L     @10,F18ADDR                                         0176
         LR    @15,@10                                             0176
         LA    @01,@AL00001                                        0176
         BALR  @14,@15                                             0176
*            GEN (DELETE  EP=IKJEFF18);                            0177
         DELETE  EP=IKJEFF18
*            SUBRETC = 4;          /* SET SUBROUTINE RETURN CODE =4 */
         MVI   SUBRETC,X'04'                                       0178
*          END;                                                    0179
*        ELSE                      /* DAIR RETURN CODE =0, SUCCESS  */
*          DO;                     /* SAVE DDNAME FOR BRODCAST      */
         B     @RC00172                                            0180
@RF00172 DS    0H                                                  0181
*            BCASTDDN = DA08DDN;   /* SAVE DDNAME RETURNED BY DAIR  */
         L     @10,DAPB0PTR                                        0181
         MVC   BCASTDDN(8),DA08DDN(@10)                            0181
*            SUBRETC = 0;          /* SET SUBROUTINE RETURN CODE = 0
*                                     FOR SUCCESSFUL COMPLETION     */
         MVI   SUBRETC,X'00'                                       0182
*          END;                                                    0183
*      END;                                                        0184
*    ELSE                          /* BACKGROUND, DO NOT USE DAIR   */
*      DO;                         /* USE DDNAME FROM BMP PROCEDURE */
         B     @RC00149                                            0185
@RF00149 DS    0H                                                  0186
*        BCASTDDN = 'SYSLBC';      /* SET DDNAME FOR BRODCAST       */
         MVI   BCASTDDN+6,C' '                                     0186
         MVI   BCASTDDN+7,C' '                                     0186
         MVC   BCASTDDN(6),@CC00362                                0186
*        SUBRETC = 0;              /* SET SUBROUTINE RETURN CODE =0
*                                     FOR SUCCESSFUL COMPLETION     */
         MVI   SUBRETC,X'00'                                       0187
*      END;                                                        0188
*    RETURN;                       /* RETURN TO MAINLINE PROCESSING */
@EL00003 DS    0H                                                  0189
@EF00003 DS    0H                                                  0189
@ER00003 LM    @14,@12,@SA00003                                    0189
         BR    @14                                                 0189
*    END ALLOCBC;                                                  0190
         B     @EL00003                                            0190
*OPENBCST:                                                         0191
*        PROC  ;                                                   0191
OPENBCST STM   @14,@12,@SA00004                                    0191
*                                  /* ENQ EXCLUSIVE ON BRODCAST DS  */
*    GEN (ENQ (QNBCAST,RNBCAST1,E,3,SYSTEM),RET=HAVE,MF=(E,ENQEL) );
         ENQ (QNBCAST,RNBCAST1,E,3,SYSTEM),RET=HAVE,MF=(E,ENQEL)
* /*                                                                 */
* /*      CALL IO RTN TO OPEN BROADCAST DATA SET                     */
* /*                                                                 */
*    IOPARML = IOPARML && IOPARML;  /* CLEAR ENTIRE PARM AREA        */
         XC    IOPARML(32),IOPARML                                 0193
*    P1OPEN = '1'B;                 /* SET PARM FLAG FOR OPEN        */
         OI    P1OPEN,B'10000000'                                  0194
*    PARMDDNM = BCASTDDN;           /* SET DDNAME IN PARM LIST       */
         MVC   PARMDDNM(8),BCASTDDN                                0195
*    R1 = ADDR(IOPARML);            /* REG1 = ADDR PARM LIST         */
         LA    R1,IOPARML                                          0196
*    CALL  IEEVSDIO;                /* CALL IO RTN TO OPEN DATA SET  */
         L     @15,@CV00289                                        0197
         BALR  @14,@15                                             0197
*    RETC = R15;                    /* SAVE RETURN CODE FROM IO RTN  */
         ST    R15,RETC                                            0198
*    IF RETC > 0                    /* RETURN CODE GREATER THAN ZERO */
*       & RETC ^= RCREFORM THEN     /* AND NOT 'REFORMAT'            */
         L     @10,RETC                                            0199
         LTR   @10,@10                                             0199
         BNP   @RF00199                                            0199
         MVC   @ZT00003+3(1),RCREFORM                              0199
         C     @10,@ZT00003                                        0199
         BE    @RF00199                                            0199
*      DO;                          /* OPEN WAS NOT SUCCESSFUL       */
*        SUBRETC = 4;               /* SET SUBROUTINE RETURN CODE = 4*/
         MVI   SUBRETC,X'04'                                       0201
*        MSGINDX = MSGID52;         /* INDICATE DIAG MSG TO BE ISSUED -
*                                      CANNOT OPEN BROADCAST D.S.   */
         MVC   MSGINDX(4),MSGID52                                  0202
*      END;                                                        0203
*    ELSE                          /* OPEN WAS SUCCESSFUL           */
*      DO;                         /* 'CREATE' BROADCAST USING BSAM */
         B     @RC00199                                            0204
@RF00199 DS    0H                                                  0205
*        FBCOPEN = '1'B;           /* SET FLAG FOR BROADCAST OPEN   */
         OI    FBCOPEN,B'01000000'                                 0205
*        SDIOPARM = SDIOPARM && SDIOPARM; /* CLEAR PARM LIST AREA   */
         XC    SDIOPARM(12),SDIOPARM                               0206
*        P1CREATE = '1'B;          /* SET INDICATOR FOR 'CREATE'    */
         OI    P1CREATE,B'00100000'                                0207
*        R1 = ADDR(IOPARML);       /* REG1 = ADDR PARMLIST          */
         LA    R1,IOPARML                                          0208
*        CALL IEEVSDIO;            /* CALL I/O RTN TO DO 'CREATE' OF
*                                     BRODCAST USING BSAM           */
         L     @15,@CV00289                                        0209
         BALR  @14,@15                                             0209
*        RETC = R15;               /* SAVE RETURN CODE FROM REG15   */
         ST    R15,RETC                                            0210
*        IF RETC > 0 THEN          /* CHECK RETURN CODE FROM I/O RTN*/
         L     @10,RETC                                            0211
         LTR   @10,@10                                             0211
         BNP   @RF00211                                            0211
*          DO;                     /* NON-ZERO RET CODE, SOME ERROR */
*            SUBRETC =8;           /* SET SUBROUTINE RETURN CODE TO
*                                     SAY DIAG. MSG NEEDED          */
         MVI   SUBRETC,X'08'                                       0213
*            MSGINDX = MSGID51;    /* INDICATE DIAG MSG TO BE ISSUED -
*                                     BROADCAST D.S. NOT USABLE,   0214
*                                     I/O SYNAD ERROR               */
         MVC   MSGINDX(4),MSGID51                                  0214
*          END;                                                    0215
*        ELSE                      /* SUCCESSFUL 'CREATE'           */
*          SUBRETC = 0;            /* SET SUBROUTINE RETURN CODE =0
*                                     FOR SUCCESSFUL COMPLETION     */
         B     @RC00211                                            0216
@RF00211 MVI   SUBRETC,X'00'                                       0216
*      END;                                                        0217
*    RETURN;                       /* RETURN TO MAINLINE PROCESSING */
@EL00004 DS    0H                                                  0218
@EF00004 DS    0H                                                  0218
@ER00004 LM    @14,@12,@SA00004                                    0218
         BR    @14                                                 0218
*    END OPENBCST;                                                 0219
         B     @EL00004                                            0219
*OPENUADS:                                                         0220
*        PROC  ;                                                   0220
OPENUADS STM   @14,@12,@SA00005                                    0220
*    GEN (ENQ  (QNUADS,RNUADS,E,8,SYSTEM),RET=HAVE,MF=(E,ENQEL) ); 0221
         ENQ  (QNUADS,RNUADS,E,8,SYSTEM),RET=HAVE,MF=(E,ENQEL)
*       /* CLEAR DIRECTORY WORK AREA     */                        0222
*    DIRYWA(1:256) = DIRYWA(1:256) && DIRYWA(1:256);               0222
         XC    DIRYWA(256),DIRYWA                                  0222
*    DIRYWA(257:DIRYWAL)                                           0223
*          = DIRYWA(257:DIRYWAL) && DIRYWA(257:DIRYWAL);           0223
         LH    @10,DIRYWAL                                         0223
         SH    @10,@CH00369                                        0223
         EX    @10,@SX00398                                        0223
*    UADSDCB = UADSDCBS;           /* MOVE UADS DCB INTO DIRECTORY 0224
*                                     WORK AREA, DIRYWA             */
         MVC   UADSDCB(88),UADSDCBS                                0224
*    RFY (UADCBPTR,R2) RSTD;                                       0225
*    R2 = ADDR(UADSDCB);                                           0226
         LA    R2,UADSDCB                                          0226
*    R1 = ADDR(OPENL);                                             0227
         LA    R1,OPENL                                            0227
*    GEN REFS(R2,R1,UADCBPTR);                                     0228
     OPEN  ((R2),(INPUT)),MF=(E,(R1))   OPEN DCB FOR UADS
     USING IHADCB,UADCBPTR              SET ADDRESSABILITY FOR DCB
*    UADCBPTR = ADDR(UADSDCB);     /* SET PTR TO UADS DCB           */
         LA    UADCBPTR,UADSDCB                                    0229
*    IF DCBOFLG  = '0'B THEN       /* TEST IF UADS DCB IS OPEN      */
         TM    DCBOFLG,B'00010000'                                 0230
         BNZ   @RF00230                                            0230
*      DO;                         /* NO, UADS DCB DID NOT OPEN     */
*        MSGINDX = MSGIDE1;        /* INDICATE DIAG. MSG REQ'D -   0232
*                                     CANNOT OPEN UADS              */
         MVC   MSGINDX(4),MSGIDE1                                  0232
*        SUBRETC =8;               /* SET SUBROUTINE RETURN CODE TO
*                                     INDICATE DIAG. MSG NEEDED     */
         MVI   SUBRETC,X'08'                                       0233
*      END;                                                        0234
*    ELSE                          /* UADS OPEN WAS SUCCESSFUL      */
*      DO;                                                         0235
         B     @RC00230                                            0235
@RF00230 DS    0H                                                  0236
*        FUAOPEN = '1'B;           /* SET FLAG FOR UADS OPEN        */
         OI    FUAOPEN,B'10000000'                                 0236
*        SUBRETC = 0;              /* SET SUBROUTINE RETURN CODE =0
*                                     FOR SUCCESSFUL COMPLETION     */
         MVI   SUBRETC,X'00'                                       0237
*      END;                                                        0238
*    RETURN;                       /* RETURN TO MAINLINE PROCESSING */
@EL00005 DS    0H                                                  0239
@EF00005 DS    0H                                                  0239
@ER00005 LM    @14,@12,@SA00005                                    0239
         BR    @14                                                 0239
*    END OPENUADS;                                                 0240
         B     @EL00005                                            0240
*FORMAT:                                                           0241
*        PROC  ;                                                   0241
FORMAT   STM   @14,@12,@SA00006                                    0241
*    R1PTR = PARMRC1;              /* SET PTR TO RECORD 1 BUFFER    */
         L     @10,PARMRC1                                         0242
         ST    @10,@TF00001                                        0242
         MVC   R1PTR(3),@TF00001+1                                 0242
*    RBAUSD = R1USPTR;             /* INIT PTR TO 1ST BROADCAST    0243
*                                     MAIL DIRECTORY RECORD         */
         MVC   RBAUSD(3),R1USPTR(@10)                              0243
*/*                                                                 */
*/*      SET UP PARM LIST FOR IKJEFA51                              */
*/*                                                                 */
*    READFLGS = '24'X;             /* READ DIRECTORY BLOCK ONLY     */
         MVI   READFLGS,X'24'                                      0244
*    DIRWAPTR = ADDR(DIRYWA);      /* PTR TO DIRECTORY WORK AREA    */
         LA    @10,DIRYWA                                          0245
         ST    @10,DIRWAPTR                                        0245
*    ACTPADDR = ADDR(ACCTPLST);    /* PTR TO ACCOUNT PARMLIST       */
         LA    @10,ACCTPLST                                        0246
         ST    @10,ACTPADDR                                        0246
*    MSGID = SYNCID;               /* SET MSG ID TO BE USED BY     0247
*                                     IKJEFA51 IF A DIAG MSG NEEDED */
         MVC   MSGID(1),SYNCID                                     0247
*/*                                                                 */
*/*      CALL IKJEFA51 TO READ A UADS DIRECTORY BLOCK.              */
*/*                                                                 */
*      USRCNT = 1;                 /* FORMAT 1 BROADCAST MAIL DIRECTORY
*                                     RECORD WITH USERIDS FROM UADS */
         MVI   USRCNT,X'01'                                        0248
*RDUADS:                                                           0249
*      R1 = ADDR(RDWRPARM);        /* REG1 = ADDR PARMLIST          */
RDUADS   LA    R1,RDWRPARM                                         0249
*      CALL IKJEFA51;              /* CALL ROUTINE TO READ 1 UADS  0250
*                                     DIRECTORY BLOCK               */
         L     @15,@CV00288                                        0250
         BALR  @14,@15                                             0250
*      RETC = R15;                 /* SAVE RETURN CODE FROM REG15   */
         ST    R15,RETC                                            0251
*      FRDUADS = '0'B;             /* TURN OFF 'READ UADS' FLAG     */
         NI    FRDUADS,B'11110111'                                 0252
*      IF RETC > 0 THEN            /* CHECK RET CODE FROM IKJEFA51  */
         L     @10,RETC                                            0253
         LTR   @10,@10                                             0253
         BNP   @RF00253                                            0253
*        DO;                       /* NON-ZERO RETURN CODE, ERROR   */
*          SUBRETC = 12;           /* SET SUBROUTINE RETURN CODE TO
*                                     INDICATE SOME ERROR OCCURRED.
*                                     EFA51 ISSUED ITS OWN DIAG MSG */
         MVI   SUBRETC,X'0C'                                       0255
*          GOTO FORMEND;           /* GO TO EXIT THIS SUBROUTINE    */
         B     FORMEND                                             0256
*        END;                                                      0257
*      ELSE;                       /* GOOD READ OF UADS, CONTINUE   */
*                                                                  0258
@RF00253 DS    0H                                                  0259
*         MEMPTR = ADDR(DIRYBLK) +2;  /* INIT PTR TO 1ST DIR. MEMBER*/
         LA    @10,DIRYBLK                                         0259
         AH    @10,@CH00055                                        0259
         ST    @10,MEMPTR                                          0259
*LNGFNDR: /* THIS LOOP WILL CALCULATE THE LENGTH OF THE USERID BY   */
*         /* FINDING THE 1ST NON-BLANK CHARACTER, STARTING FROM THE */
*         /* RIGHT. THAT CHARACTER IS THE EXTENT NUMBER & IS NOT    */
*         /* INCLUDED IN THE LENGTH.                                */
*         USRLEN = 7;                 /* SET STARTING LENGTH        */
LNGFNDR  MVC   USRLEN(2),@CH00275                                  0260
*LNGLOOP: /* BEGINNING OF THE LOOP                                  */
*         INDEXPTR = MEMPTR+USRLEN;   /* SET BASE PTR FOR BYTE TO BE
*                                        CHECKED                    */
LNGLOOP  LH    @10,USRLEN                                          0261
         L     @15,MEMPTR                                          0261
         AR    @15,@10                                             0261
         ST    @15,INDEXPTR                                        0261
*         /* IF THIS CHARACTER IS A NON-BLANK, THEN EXIT FROM LOOP  */
*         IF INDEX = ' '                                           0262
*           THEN                      /* BLANK, CONTINUE            */
         CLI   INDEX(@15),C' '                                     0262
         BNE   @RF00262                                            0262
*             DO;                                                  0263
*               USRLEN = USRLEN-1;    /* DECREMENT THE LENGTH       */
         BCTR  @10,0                                               0264
         STH   @10,USRLEN                                          0264
*               GOTO LNGLOOP;         /* GO LOOK AT NEXT CHARACTER  */
         B     LNGLOOP                                             0265
*             END;                                                 0266
*                                                                  0266
*         /* CHECK THE 1ST NON-BLANK CHARACTER. IF IT IS '0', THEN  */
*         /* THIS IS A BASE MEMBER & WILL BE PUT INTO BROADCAST MAIL*/
*         /* DIRECTORY. IF NOT, THEN IT IS EITHER AN EXTENSION OF THE*/
*         /* PREVIOUS MEMBER OR THE END OF THE DIRECTORY.           */
*         IF INDEX = '0'              /* BASE MEMBER?               */
*           THEN                      /* YES,                       */
@RF00262 L     @10,INDEXPTR                                        0267
         CLI   INDEX(@10),C'0'                                     0267
         BNE   @RF00267                                            0267
*             DO;                     /* PUT THIS USERID FROM UADS 0268
*                                        INTO BROADCAST MAIL DIRECT-
*                                        ORY RECORD                 */
*               USDID(USRCNT) = MEMNAME(1:USRLEN);                 0269
*                                                                  0269
         SR    @10,@10                                             0269
         IC    @10,USRCNT                                          0269
         LR    @15,@10                                             0269
         MH    @15,@CH00167                                        0269
         L     @01,USDPTR-1                                        0269
         LA    @01,0(,@01)                                         0269
         ALR   @01,@15                                             0269
         AL    @01,@CF00401                                        0269
         MVI   USDID+1(@01),C' '                                   0269
         MVC   USDID+2(5,@01),USDID+1(@01)                         0269
         LH    @15,USRLEN                                          0269
         BCTR  @15,0                                               0269
         L     @14,MEMPTR                                          0269
         EX    @15,@SM00402                                        0269
*               USRCNT = USRCNT + 1;  /* BUMP INDEX TO BROADCAST   0270
*                                        MAIL DIRECTORY RCD         */
         AH    @10,@CH00034                                        0270
         STC   @10,USRCNT                                          0270
*               IF USRCNT > BCDIRMAX THEN                          0271
         CLC   USRCNT(1),BCDIRMAX                                  0271
         BNH   @RF00271                                            0271
*                 BRCDFULL = '1'B;    /* INDICATE BROADCAST DIRECTORY
*                                        RCD FULL                   */
         OI    BRCDFULL,B'00000100'                                0272
*             END;                                                 0273
@RF00271 DS    0H                                                  0274
*         /* IS IT THE END OF THE DIRECTORY (ALL BINARY ONES)?      */
*         IF MEMNAME =                /* END OF DIRECTORY?          */
*           'FFFFFFFFFFFFFFFF'X                                    0274
*           THEN                      /* YES,                       */
@RF00267 L     @10,MEMPTR                                          0274
         CLC   MEMNAME(8,@10),@CB00382                             0274
         BNE   @RF00274                                            0274
*                 DO;                                              0275
*                   EODFLG = '1'B;    /* 1- END OF DIRECTORY, NO MORE
*                                        USERIDS TO BE EXTRACTED    */
         OI    EODFLG,B'00010000'                                  0276
*                   GOTO WRITBC;      /* PUT OUT REMAINING USERIDS  */
         B     WRITBC                                              0277
*                 END;                                             0278
*           ELSE;                     /* NOT END OF DATA ON UADS    */
*                                                                  0279
@RF00274 DS    0H                                                  0280
*NEXTMEM: /* REFERENCE THE NEXT MEMBER ENTRY BY INCREMENTING THE    */
*         /* BASE POINTER BY THE CONSTANT LENGTH OF AN ENTRY AND THE*/
*         /* NUMBER OF USER HALF-WORDS CONTAINED IN BLOKC.          */
*         MEMPTR = MEMPTR+12+(BLOKC&'00011111'B)*2;                0280
*                                                                  0280
NEXTMEM  L     @10,MEMPTR                                          0280
         LA    @15,12                                              0280
         AR    @15,@10                                             0280
         LA    @14,31                                              0280
         MVC   @ZT00003+3(1),BLOKC(@10)                            0280
         N     @14,@ZT00003                                        0280
         AR    @14,@14                                             0280
         AR    @15,@14                                             0280
         ST    @15,MEMPTR                                          0280
*         /* CHECK FOR END OF BLOCK BY COMPARING THE BASE POINTER   */
*         /* TO THE ADDR OF THE BLOCK PLUS THE NUMBER OF BYTES USED */
*         /* ON THE BLOCK.                                          */
*         IF MEMPTR >= ADDR(DIRYBLK)+NUMBYTES                      0281
*           THEN                      /* YES, END OF BLOCK,         */
         LA    @10,DIRYBLK                                         0281
         MVC   @TF00001(2),NUMBYTES                                0281
         AH    @10,@TF00001                                        0281
         CR    @15,@10                                             0281
         BL    @RF00281                                            0281
*             DO;                                                  0282
*               FRDUADS = '1'B;       /* INDICATE 'READ UADS'       */
         OI    FRDUADS,B'00001000'                                 0283
*               IF BRCDFULL = '1'B THEN                            0284
         TM    BRCDFULL,B'00000100'                                0284
         BO    @RT00284                                            0284
*                 GOTO WRITBC;        /* GO WRITE BROADCAST RCD     */
*               ELSE                                               0286
*                 GOTO RDUADS;        /* GO READ NEXT UADS BLOCK    */
         B     RDUADS                                              0286
*             END;                                                 0287
*                                                                  0287
*           ELSE                      /* NO, NOT END OF UADS BLOCK  */
*             DO;                                                  0288
@RF00281 DS    0H                                                  0289
*               FRDUADS = '0'B;       /* INDICATE UADS READ NOT NEC.*/
         NI    FRDUADS,B'11110111'                                 0289
*               IF BRCDFULL = '1'B THEN                            0290
         TM    BRCDFULL,B'00000100'                                0290
         BO    @RT00290                                            0290
*                 GOTO WRITBC;        /* GO WRITE BROADCAST RCD     */
*               ELSE                  /* BROADCAST RCD NOT FULL     */
*                 GOTO LNGFNDR;       /* GO CALCULATE LENGTH        */
         B     LNGFNDR                                             0292
*             END;                                                 0293
*/*                                                                 */
*/*      WRITE A FORMATTED BRODCAST DIRECTORY RECORD                */
*/*                                                                 */
*WRITBC:                                                           0294
*    IF EODFLG= '0'B THEN          /* CHECK FOR END-OF-DIRECTORY    */
WRITBC   TM    EODFLG,B'00010000'                                  0294
         BNZ   @RF00294                                            0294
*      USDNEXT= RBAUSD +1;         /* NO, NOT END OF DATA, SET CHAIN
*                                     PTR TO NEXT MAIL DIRECTORY RCD*/
         L     @10,USDPTR-1                                        0295
         LA    @10,0(,@10)                                         0295
         LA    @15,1                                               0295
         MVC   @ZT00001+1(3),RBAUSD                                0295
         A     @15,@ZT00001                                        0295
         ST    @15,@TF00001                                        0295
         MVC   USDNEXT(3,@10),@TF00001+1                           0295
*    ELSE                          /* END OF DATA REACHED           */
*      USDNEXT = 0;                /* SET CHAIN PTR =0              */
         B     @RC00294                                            0296
@RF00294 L     @10,USDPTR-1                                        0296
         LA    @10,0(,@10)                                         0296
         SR    @15,@15                                             0296
         ST    @15,@TF00001                                        0296
         MVC   USDNEXT(3,@10),@TF00001+1                           0296
*      USDREND = '7F'X;            /* SET END-OF-RECORD INDICATOR    */
@RC00294 L     @10,USDPTR-1                                        0297
         LA    @10,0(,@10)                                         0297
         MVI   USDREND(@10),X'7F'                                  0297
*                /* WRITE USER MAIL DIRECTORY RECORD        */     0298
*         SDIOPARM = SDIOPARM && SDIOPARM; /* CLEAR PARM AREA        */
         XC    SDIOPARM(12),SDIOPARM                               0298
*         P2WRDI = '1'B;            /* SET PARM FLAG FOR WRITE 'DI'  */
         OI    P2WRDI,B'10000000'                                  0299
*         PARMRBA = ADDR(RBAUSD);   /* SET RBA OF RECORD TO WRITE    */
         LA    @10,RBAUSD                                          0300
         ST    @10,@TF00001                                        0300
         MVC   PARMRBA(4),@TF00001                                 0300
*         PARMIOAD = ADDR(DIRAREA); /* AREA ADDR OF RECORD TO WRITE  */
         LA    @10,DIRAREA                                         0301
         ST    @10,@TF00001                                        0301
         MVC   PARMIOAD(4),@TF00001                                0301
*         PARMKEY = USDKEY;         /* SET KEY FOR USER DIRECTORY    */
         MVC   PARMKEY(1),USDKEY                                   0302
*         R1 = ADDR(IOPARML);       /* REG 1 = ADDR PARM LIST        */
         LA    R1,IOPARML                                          0303
*         CALL  IEEVSDIO;           /* CALL IO TO WRITE USER DIR. RC */
         L     @15,@CV00289                                        0304
         BALR  @14,@15                                             0304
*         RETC = R15;               /* SAVE RETURN CODE REG15        */
         ST    R15,RETC                                            0305
*    BRCDFULL = '0'B;              /* TURN OFF FLAG FOR BROADCAST  0306
*                                     DIRECTORY RECORD FULL         */
         NI    BRCDFULL,B'11111011'                                0306
*    IF RETC> 0 THEN               /* CHECK RETURN CODE FROM I/O RTN*/
         L     @10,RETC                                            0307
         LTR   @10,@10                                             0307
         BNP   @RF00307                                            0307
*      DO;                         /* NON-ZERO RET CODE, SOME ERROR */
*       SUBRETC = 8;               /* SET SUBROUTINE RETURN CODE TO
*                                     INDICATE DIAG. MSG NEEDED     */
         MVI   SUBRETC,X'08'                                       0309
*       IF RBAUSD ^< R1RECNUM THEN                                 0310
         L     @10,R1PTR-1                                         0310
         LA    @10,0(,@10)                                         0310
         L     @15,RBAUSD-1                                        0310
         LA    @15,0(,@15)                                         0310
         C     @15,R1RECNUM(,@10)                                  0310
         BL    @RF00310                                            0310
*         MSGINDX = MSGID40;       /* INDICATE DIAG MSG - NO SPACE 0311
*                                     IN BROADCAST FOR USERIDS      */
         MVC   MSGINDX(4),MSGID40                                  0311
*       ELSE                                                       0312
*         MSGINDX = MSGID51;       /* INDICATE DIAG MSG - BROADCAST D.
*                                     S. NOT USABLE, I/O SYNAD ERROR*/
         B     @RC00310                                            0312
@RF00310 MVC   MSGINDX(4),MSGID51                                  0312
*      END;                                                        0313
*    ELSE                          /* GOOD RETURN FROM I/O ROUTINE  */
*      DO;                                                         0314
         B     @RC00307                                            0314
@RF00307 DS    0H                                                  0315
*        DIRAREA= DIRAREA && DIRAREA;/* CLEAR AREA FOR NEXT BRODCAST
*                                     DIRECTORY RECORD TO ALL ZERO  */
         XC    DIRAREA(129),DIRAREA                                0315
*        USRCNT = 1;               /* RESET INDEX TO BROADCAST DIR  */
         MVI   USRCNT,X'01'                                        0316
*        RBAUSD = RBAUSD + 1;      /* BUMP RBA OF NEXT DIR RCD      */
         LA    @10,1                                               0317
         MVC   @ZT00001+1(3),RBAUSD                                0317
         A     @10,@ZT00001                                        0317
         ST    @10,@TF00001                                        0317
         MVC   RBAUSD(3),@TF00001+1                                0317
*        IF EODFLG = '0'B THEN     /* CHECK IF END-OF-DATA ON UADS  */
         TM    EODFLG,B'00010000'                                  0318
         BNZ   @RF00318                                            0318
*          DO;                     /* NOT END-OF-DIRECTORY ON UADS  */
*            IF FRDUADS = '1'B THEN/* IS 'READ UADS' INDICATED?     */
         TM    FRDUADS,B'00001000'                                 0320
         BO    @RT00320                                            0320
*              GOTO RDUADS;        /* YES, READ NEXT UADS DIR BLOCK */
*            ELSE                  /* NO, 'READ UADS' NOT INDICATED */
*              GOTO LNGFNDR;       /* CONTINUE PROCESSING THIS UADS
*                                     DIRECTORY BLOCK               */
         B     LNGFNDR                                             0322
*          END;                                                    0323
*        ELSE                      /* END-OF-DIRECTORY ON UADS      */
*          SUBRETC = 0;            /* SET SUBROUTINE RETURN CODE =0
*                                     TO INDICATE GOOD COMPLETION   */
@RF00318 MVI   SUBRETC,X'00'                                       0324
*      END;                                                        0325
*FORMEND:                          /* END OF 'FORMAT' SUBROUTINE    */
*    RETURN;                       /* RETURN TO MAINLINE PROCESSING */
@EL00006 DS    0H                                                  0326
@EF00006 DS    0H                                                  0326
@ER00006 LM    @14,@12,@SA00006                                    0326
         BR    @14                                                 0326
*    END FORMAT;                                                   0327
         B     @EL00006                                            0327
*CLEANUP:                                                          0328
*        PROC  ;                                                   0328
CLEANUP  STM   @14,@12,@SA00007                                    0328
*    RFY (R1,R2) RSTD;                                             0329
*    IF FUAOPEN = '1'B THEN        /* CHECK IF UADS DCB IS OPEN     */
         TM    FUAOPEN,B'10000000'                                 0330
         BNO   @RF00330                                            0330
*      DO;                         /* YES, UADS IS OPEN             */
*        R2 = ADDR(UADSDCB);       /* REG2 = ADDR UADS DCB          */
         LA    R2,UADSDCB                                          0332
*        R1 = ADDR(CLOSEL);        /* REG1 = ADDR LIST FORM OF CLOSE
*                                     MACRO                         */
         LA    R1,CLOSEL                                           0333
*        GEN (CLOSE ((R2)),MF=(E,(R1)) ) /* CLOSE UADS DCB         */
*        REFS(R2,R1);                                              0334
         CLOSE ((R2)),MF=(E,(R1))
*        FUAOPEN = '0'B;           /* TURN OFF'UADS OPEN' FLAG      */
         NI    FUAOPEN,B'01111111'                                 0335
*      END;                                                        0336
*    ELSE;                         /* NO, UADS NOT OPEN             */
         B     @RC00330                                            0337
@RF00330 DS    0H                                                  0338
*                                  /* DEQ CONDITIONALLY FROM UADS   */
*    GEN (DEQ (QNUADS,RNUADS,8,SYSTEM),RET=HAVE,MF=(E,DEQL) )      0338
*    REFS(QNUADS,RNUADS,8,DEQL);                                   0338
@RC00330 DS    0H                                                  0338
         DEQ (QNUADS,RNUADS,8,SYSTEM),RET=HAVE,MF=(E,DEQL)
*    IF FBCOPEN = '1'B THEN        /* CHECK IF BRODCAST DCB IS OPEN */
         TM    FBCOPEN,B'01000000'                                 0339
         BNO   @RF00339                                            0339
*      DO;                         /* YES, BRODCAST IS OPEN         */
*                 /* CLOSE BROADCAST DATA SET                */    0341
*         SDIOPARM = SDIOPARM && SDIOPARM; /* CLEAR PARM LIST AREA   */
         XC    SDIOPARM(12),SDIOPARM                               0341
*         P2CLOSE = '1'B;           /* SET PARM FLAG FOR CLOSE       */
         OI    P2CLOSE,B'00100000'                                 0342
*         R1 = ADDR(IOPARML);       /* REG1 = ADDR PARM LIST         */
         LA    R1,IOPARML                                          0343
*         CALL IEEVSDIO;            /* CALL IO RTN TO CLOSE DATA SET */
         L     @15,@CV00289                                        0344
         BALR  @14,@15                                             0344
*        FBCOPEN = '0'B;           /* TURN OFF 'BRODCAST OPEN' FLAG */
         NI    FBCOPEN,B'10111111'                                 0345
*      END;                                                        0346
*    ELSE;                         /* NO, BRODCAST NOT OPEN         */
         B     @RC00339                                            0347
@RF00339 DS    0H                                                  0348
*                                  /* DEQ CONDITIONALLY ON BRODCAST */
*    GEN (DEQ (QNBCAST,RNBCAST1,3,SYSTEM),RET=HAVE,MF=(E,DEQL) )   0348
*    REFS(QNBCAST,RNBCAST1,3,DEQL);                                0348
@RC00339 DS    0H                                                  0348
         DEQ (QNBCAST,RNBCAST1,3,SYSTEM),RET=HAVE,MF=(E,DEQL)
*    RETURN;                       /* RETURN TO MAINLINE PROCESSING */
@EL00007 DS    0H                                                  0349
@EF00007 DS    0H                                                  0349
@ER00007 LM    @14,@12,@SA00007                                    0349
         BR    @14                                                 0349
*    END CLEANUP;                                                  0350
@PB00007 DS    0H                                                  0351
*    GENERATE;                                                     0351
CABBAGE DC   50X'00'                PATCH AREA
*        END IKJRBBCR                                              0352
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJDAPL )                                        *
*/*%INCLUDE SYSLIB  (IKJDAP08)                                        *
*/*%INCLUDE SYSLIB  (IKJECT  )                                        *
*/*%INCLUDE SYSLIB  (IKJZT301)                                        *
*/*%INCLUDE SYSLIB  (IKJZT304)                                        *
*;                                                                 0352
         B     @EL00001                                            0352
@DATA    DS    0H
@CH00034 DC    H'1'
@CH00055 DC    H'2'
@CH00275 DC    H'7'
@CH00167 DC    H'13'
@CH00369 DC    H'257'
@SX00398 XC    DIRYWA+256(0),DIRYWA+256
@SM00402 MVC   USDID(0,@01),MEMNAME(@14)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SAV001  EQU   @SA00001
@SA00002 DS    15F
@SA00003 DS    15F
@SA00004 DS    15F
@SA00005 DS    15F
@SA00007 DS    15F
@SA00006 DS    0F
         DS    15F
@AL00001 DS    4A
@TF00001 DS    F
@ZTEMPS  DS    0F
@ZT00001 DC    F'0'
@ZT00003 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
@TEMPS   EQU   @ZTEMPS
@L       EQU   @ZLEN
IKJRBBCR CSECT
         DS    0F
@CF00401 DC    F'-13'
@DATD    DSECT
         DS    0D
CPPLPTR  DS    A
INDEXPTR DS    A
MEMPTR   DS    A
DAPLPTR  DS    A
DAPB0PTR DS    A
F18ADDR  DS    A
DAIRRETC DS    A
RETC     DS    A
USRLEN   DS    H
         DS    CL3
RBAUSD   DS    AL3
USRCNT   DS    AL1
R1PTR    DS    AL3
         DS    CL1
USDPTR   DS    AL3
SUBRETC  DS    AL1
         DS    CL3
ACCTPLST DS    CL20
         ORG   ACCTPLST
UPTPTR   DS    AL4
ECTPTR   DS    AL4
AECBPTR  DS    AL4
BUFPTR   DS    AL4
CMDIND   DS    AL4
         ORG   ACCTPLST+20
RDWRPARM DS    CL24
         ORG   RDWRPARM
UADSADDR DS    AL4
         ORG   UADSADDR
READFLGS DS    CL1
         ORG   READFLGS
@NM00001 DS    BL1
READFL3  EQU   READFLGS+0
@NM00002 EQU   READFLGS+0
READFL6  EQU   READFLGS+0
@NM00003 EQU   READFLGS+0
         ORG   UADSADDR+1
@NM00004 DS    AL3
         ORG   RDWRPARM+4
@NM00005 DS    AL4
DIRWAPTR DS    AL4
@NM00006 DS    AL4
@NM00007 DS    AL4
ACTPADDR DS    AL4
         ORG   ACTPADDR
MSGID    DS    CL1
         ORG   RDWRPARM+24
DIRYWA   DS    CL344
         ORG   DIRYWA
UADSDCB  DS    CL88
DIRYBLK  DS    CL256
         ORG   DIRYBLK
NUMBYTES DS    FL2
         ORG   DIRYWA+344
AUTODAIR DS    CL84
         DS    CL4
AUTOPARM DS    CL20
BCASTDDN DS    CL8
SDECB    DS    CL4
IOPARML  DS    CL32
         ORG   IOPARML
SDIOPARM DS    CL12
         ORG   SDIOPARM
@NM00029 DS    CL1
         ORG   @NM00029
P1OPEN   DS    BL1
P1READ   EQU   @NM00029+0
P1CREATE EQU   @NM00029+0
         ORG   SDIOPARM+1
@NM00030 DS    CL1
         ORG   @NM00030
P2WRDI   DS    BL1
P2WRDAF  EQU   @NM00030+0
P2CLOSE  EQU   @NM00030+0
P2DEL    EQU   @NM00030+0
P2JFCB   EQU   @NM00030+0
P2ACCT   EQU   @NM00030+0
         ORG   SDIOPARM+2
PARMKEY  DS    CL1
PARMFDBK DS    CL1
PARMRBA  DS    CL4
PARMIOAD DS    CL4
         ORG   IOPARML+12
PARMDDNM DS    CL8
PARMLMCT DS    FL4
PARMDCB  DS    AL4
PARMRC1  DS    AL4
         ORG   IOPARML+32
AUTOLIST DS    CL44
         ORG   AUTOLIST
ENQSL    DS    CL12
ENQEL    DS    CL12
DEQL     DS    CL12
OPENL    DS    CL4
CLOSEL   DS    CL4
         ORG   AUTOLIST+44
DIRAREA  DS    CL129
FLAGS    DS    BL1
         ORG   FLAGS
FUAOPEN  DS    BL1
FBCOPEN  EQU   FLAGS+0
FBADSYNC EQU   FLAGS+0
EODFLG   EQU   FLAGS+0
FRDUADS  EQU   FLAGS+0
BRCDFULL EQU   FLAGS+0
@NM00036 EQU   FLAGS+0
@NM00037 EQU   FLAGS+0
         ORG   FLAGS+1
         DS    CL2
MSGPARM  DS    CL36
         ORG   MSGPARM
MSGCSECT DS    AL4
@NM00038 DS    AL4
         ORG   @NM00038
MSGSWS   DS    BL1
         ORG   MSGSWS
@NM00039 DS    BL1
MSGREVER EQU   MSGSWS+0
         ORG   MSGPARM+8
@NM00040 DS    CL16
MSGINDX  DS    CL4
MSGVAR   DS    AL4
         ORG   MSGVAR+0
MSGVARLN DS    BL1
         ORG   MSGPARM+36
BCDDNM   DS    CL8
IKJRBBCR CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@SIZ001  EQU   @SIZDATD
@CV00288 DC    V(IKJEFA51)
@CV00289 DC    V(IEEVSDIO)
@CV00291 DC    V(IKJEFF02)
@CA00338 DC    A(IKJRBBCM)
         DS    0D
F18F02   DC    VL4(IKJEFF02)
DIRYWAL  DC    AL2(344)
F18CLNO  DC    AL2(1)
BCDIRMAX DC    AL1(9)
RNAME    DS    AL3
@CC00362 DC    C'SYSLBC'
@CB00382 DC    X'FFFFFFFFFFFFFFFF'
DAIRCD08 DC    X'0008'
DAIRDSN  DS    CL15
         ORG   DAIRDSN
DSLNGTH  DC    X'000D'
DSNAME   DC    CL13'SYS1.BRODCAST'
         ORG   DAIRDSN+15
QNBCAST  DC    CL8'SYSIKJBC'
RNBCAST1 DC    X'000000'
QNUADS   DC    CL8'SYSIKJUA'
RNUADS   DC    CL8'OPENUADS'
SYNCID   DC    CL1'9'
SDERR    DC    X'80'
NOCORE   DC    X'40'
RCREFORM DC    X'10'
IOERR    DC    X'08'
OPENERR  DC    X'02'
DSFULL   DC    X'01'
QNAME    DC    CL8'SYSIKJBC'
ZERENT   DC    X'00000000000000000000'
USDKEY   DC    X'01'
MSGID51  DC    CL4'2051'
MSGID52  DC    CL4'2052'
MSGIDE1  DC    CL4'20E1'
MSGID40  DC    CL4'2040'
MSGIDC0  DC    CL4'20C0'
MSGIDD0  DC    CL4'20D0'
RNBCAST  DS    CL3
@DATD    DSECT
IKJRBBCR CSECT ,                       RESUME CSECT
LISTBEG   ENQ   (QNAME,RNAME,S,3,SYSTEM),RET=HAVE,MF=L
          ENQ   (QNAME,RNAME,E,3,SYSTEM),RET=HAVE,MF=L
          DEQ   (QNAME,RNAME,3,SYSTEM),RET=HAVE,MF=L
          OPEN  0,MF=L
          CLOSE 0,MF=L
LISTEND  EQU   *                   END OF LIST FORMS
@DATD    DSECT
         DCBD  DSORG=BS,DEVD=DA
IKJRBBCR CSECT ,                      RESUME CSECT
UADSDCBS DCB   DDNAME=SYSUADS,                                         X
               BLKSIZE=256,                                            X
               DSORG=PS,                                               X
               KEYLEN=0,                                               X
               MACRF=(R),                                              X
               RECFM=F
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
@DATEND  EQU   *
IKJRBBCR CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
@0       EQU   00
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R15      EQU   @15
UADCBPTR EQU   @04
DCBPTR   EQU   @04
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R3       EQU   @03
R4       EQU   @04
         EXTRN IKJRBBCM
ACCTCPPL EQU   0
CPPLCBUF EQU   ACCTCPPL
CPPLUPT  EQU   ACCTCPPL+4
CPPLPSCB EQU   ACCTCPPL+8
CPPLECT  EQU   ACCTCPPL+12
CPPLECB  EQU   ACCTCPPL+20
INDEX    EQU   0
MEMENTRY EQU   0
MEMNAME  EQU   MEMENTRY
BLOKC    EQU   MEMENTRY+11
DAPL     EQU   0
DAPLUPT  EQU   DAPL
DAPLECT  EQU   DAPL+4
DAPLECB  EQU   DAPL+8
DAPLPSCB EQU   DAPL+12
DAPLDAPB EQU   DAPL+16
DAPB08   EQU   0
DA08CD   EQU   DAPB08
DA08FLG  EQU   DAPB08+2
DA08PDSN EQU   DAPB08+8
DA08DDN  EQU   DAPB08+12
DA08UNIT EQU   DAPB08+20
DA08SER  EQU   DAPB08+28
DA08MNM  EQU   DAPB08+52
DA08PSWD EQU   DAPB08+60
DA08DSP1 EQU   DAPB08+68
DA08SHR  EQU   DA08DSP1
DA08DPS2 EQU   DAPB08+69
DA08KEEP EQU   DA08DPS2
DA08DPS3 EQU   DAPB08+70
DA08KEP  EQU   DA08DPS3
DA08CTL  EQU   DAPB08+71
ECT      EQU   0
ECTSWS   EQU   ECT+28
ECTBKGRD EQU   ECTSWS
R1BC     EQU   0
R1BCPTRP EQU   R1BC
R1USPTRP EQU   R1BC+4
R1USPTR  EQU   R1USPTRP+1
R1RECNUM EQU   R1BC+8
USDIR    EQU   0
USDENTRY EQU   USDIR
USDID    EQU   USDENTRY
USDREND  EQU   USDIR+125
USDNEXT  EQU   USDIR+126
IKJEFF18 EQU   0
PARM     EQU   0
DCBFLGS  EQU   DCBOFLGS
DCBOFLG  EQU   DCBFLGS
*                                      START UNREFERENCED COMPONENTS
@NM00035 EQU   DCBFLGS
@NM00034 EQU   USDIR+117
USDEND   EQU   USDENTRY+10
USDRBA   EQU   USDENTRY+7
@NM00033 EQU   R1BC+45
R1LEVEL  EQU   R1BC+38
R1DSN    EQU   R1BC+14
R1BCMAX  EQU   R1BC+12
R1USFLGS EQU   R1USPTRP
R1BCPTR  EQU   R1BCPTRP+1
R1BCFLGS EQU   R1BCPTRP
ECTBKPB  EQU   ECT+36
ECTUSER  EQU   ECT+32
ECTDDNUM EQU   ECT+29
@NM00032 EQU   ECTSWS
ECTNNOT  EQU   ECTSWS
ECTNMAL  EQU   ECTSWS
ECTLOGF  EQU   ECTSWS
ECTATRM  EQU   ECTSWS
@NM00031 EQU   ECTSWS
ECTNOPD  EQU   ECTSWS
ECTSCMD  EQU   ECT+20
ECTPCMD  EQU   ECT+12
ECTSMSG  EQU   ECT+9
ECTMSGF  EQU   ECT+8
ECTIOWA  EQU   ECT+4
ECTRTCD  EQU   ECT+1
ECTRCDF  EQU   ECT
DA08ALN  EQU   DAPB08+76
DA08DSO  EQU   DAPB08+75
@NM00028 EQU   DAPB08+72
@NM00027 EQU   DA08CTL
DA08ATRL EQU   DA08CTL
DA08DMMY EQU   DA08CTL
DA08PERM EQU   DA08CTL
DA08RLSE EQU   DA08CTL
DA08UID  EQU   DA08CTL
DA08ABKL EQU   DA08CTL
DA08TRKS EQU   DA08CTL
DA08UNCT EQU   DA08DPS3
DA08CATL EQU   DA08DPS3
DA08DELE EQU   DA08DPS3
@NM00026 EQU   DA08DPS3
@NM00025 EQU   DA08DPS3
@NM00024 EQU   DA08DPS3
@NM00023 EQU   DA08DPS3
DA08UCAT EQU   DA08DPS2
DA08CAT  EQU   DA08DPS2
DA08DEL  EQU   DA08DPS2
@NM00022 EQU   DA08DPS2
@NM00021 EQU   DA08DPS2
@NM00020 EQU   DA08DPS2
@NM00019 EQU   DA08DPS2
DA08OLD  EQU   DA08DSP1
DA08MOD  EQU   DA08DSP1
DA08NEW  EQU   DA08DSP1
@NM00018 EQU   DA08DSP1
@NM00017 EQU   DA08DSP1
@NM00016 EQU   DA08DSP1
@NM00015 EQU   DA08DSP1
DA08DQTY EQU   DAPB08+48
DA08SQTY EQU   DAPB08+44
DA08PQTY EQU   DAPB08+40
DA08BLK  EQU   DAPB08+36
DA08CTRC EQU   DAPB08+6
DA08DARC EQU   DAPB08+4
@NM00014 EQU   DA08FLG
@NM00013 EQU   DA08FLG
@NM00012 EQU   DA08FLG
@NM00011 EQU   DA08FLG
@NM00010 EQU   DA08FLG
@NM00009 EQU   DA08FLG
@NM00008 EQU   DA08FLG
DA08FPE  EQU   DA08FLG
BLOKTTR  EQU   MEMENTRY+8
UIDLPTRP EQU   ACCTCPPL+16
*                                      END UNREFERENCED COMPONENTS
@RC00103 EQU   @RC00100
@RC00126 EQU   @EL00001
@RF00126 EQU   @EL00001
@RC00149 EQU   @EL00003
@RC00199 EQU   @EL00004
@RC00211 EQU   @EL00004
@RC00230 EQU   @EL00005
@RT00284 EQU   WRITBC
@RF00284 EQU   RDUADS
@RT00290 EQU   WRITBC
@RF00290 EQU   LNGFNDR
@RT00320 EQU   RDUADS
@RF00320 EQU   LNGFNDR
@RC00307 EQU   @EL00006
FORMEND  EQU   @EL00006
@PB00006 EQU   @PB00007
@RC00106 EQU   @RC00103
@RC00172 EQU   @RC00149
@PB00005 EQU   @PB00006
@RC00310 EQU   @RC00307
@RC00109 EQU   @RC00106
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@EL01    EQU   @EL00001
@ENDDATA EQU   *
         END   IKJRBBCR
