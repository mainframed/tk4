         TITLE 'IKJEFT54, TEXT INSERTION ROUTINE                     '
IKJEFT54 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKJEFT54  73.151'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
         MVC   @PC00001(12),0(@01)                                 0001
*                                                                  0010
*   /*****************************************************************/
*   /*                                                               */
*   /* START EXECUTABLE CODE                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0010
*   SAVEREG1=R1;                    /* SAVE REG ONE                  */
         LR    SAVEREG1,R1                                         0010
*   T6=ADDR(OLDX);                  /* OUTPUT LINE DESCRIPTOR        */
         L     T6,@PC00001                                         0011
*   T7=ADDR(ADMSGX);                /* POINT TO OUTPUT AREA          */
         L     @14,@PC00001+4                                      0012
         ST    @14,T7                                              0012
*   IF CHAINFLG='00'X&              /* IF TEXT-INSERTION IS NOT    0013
*                                      NEEDED - NO CHAIN,            */
*       FORMONLY=0&                 /* NO FORMAT ONLY,               */
*       NUMSEGS=1 THEN              /* NO MULTIPLE SEGMENTS          */
         CLI   CHAINFLG(@14),0                                     0013
         BNE   @RF00013                                            0013
         L     @10,@PC00001+8                                      0013
         ICM   @07,15,FORMONLY(@10)                                0013
         BNZ   @RF00013                                            0013
         CLC   NUMSEGS(4,T6),@CF00035                              0013
         BNE   @RF00013                                            0013
*     DO;                                                          0014
*       ADMSG=SEGAD(1);             /* PNT TO PRIMARY SEGMENT        */
         L     @10,SEGAD(,T6)                                      0015
         ST    @10,ADMSG(,@14)                                     0015
*       IF ADMSG->SEGLENGH>260×ADMSG->SEGLENGH<4 THEN              0016
         LH    @14,SEGLENGH(,@10)                                  0016
         CH    @14,@CH00097                                        0016
         BH    @RT00016                                            0016
         CH    @14,@CH00084                                        0016
         BL    @RT00016                                            0016
*         GOTO INVALID;             /* IF MESSAGE IS TOO LONG OR TOO
*                                      SHORT - INVALID               */
*       GOTO NORMEND;               /* IF MSG HAS VALID LENGH        */
         B     NORMEND                                             0018
*     END;                                                         0019
*   LENGTH=0;                       /* INITIALIZE LENGTH FIELD       */
@RF00013 SR    LENGTH,LENGTH                                       0020
*   IF NUMSEGS<1×                   /* IF NUMSEGS IS INVALID         */
*       NUMSEGS>256 THEN            /* IF MORE THAN 256 SEGS         */
         LA    @14,1                                               0021
         L     @10,NUMSEGS(,T6)                                    0021
         CR    @10,@14                                             0021
         BL    @RT00021                                            0021
         CH    @10,@CH00100                                        0021
         BH    @RT00021                                            0021
*     GOTO INVALID;                                                0022
*   DO I=1 TO NUMSEGS;              /* SUM THE LENGTHS OF ALL THE  0023
*                                      TEXT FIELDS                   */
         B     @DE00023                                            0023
@DL00023 DS    0H                                                  0024
*     T4=SEGAD(I);                  /* LOCATE NEXT SEGMENT           */
         LR    @10,@14                                             0024
         SLA   @10,2                                               0024
         L     @10,SEGAD-4(@10,T6)                                 0024
         ST    @10,T4                                              0024
*     TEXTSIZE=T4->SEGLENGH-4;      /* CALC LEN OF TEXT FIELD        */
         LH    TEXTSIZE,SEGLENGH(,@10)                             0025
         SH    TEXTSIZE,@CH00084                                   0025
*     IF TEXTSIZE<0 THEN            /* VALIDIDTY CHK SEG LENG        */
         LTR   TEXTSIZE,TEXTSIZE                                   0026
         BM    @RT00026                                            0026
*       GOTO INVALID;                                              0027
*     LENGTH=LENGTH+TEXTSIZE;       /* ACCUMULATE TOTALS             */
         AR    LENGTH,TEXTSIZE                                     0028
*   END;                                                           0029
         AH    @14,@CH00035                                        0029
@DE00023 STH   @14,I                                               0029
         C     @14,NUMSEGS(,T6)                                    0029
         BNH   @DL00023                                            0029
*   IF LENGTH>256 THEN              /* IF > 256 CHAR IN TEXT         */
         CH    LENGTH,@CH00100                                     0030
         BH    @RT00030                                            0030
*     GOTO INVALID;                                                0031
*   IF CHAINFLG^='00'X THEN         /* IF CHAIN FORMAT REQSTED       */
         L     @14,T7                                              0032
         CLI   CHAINFLG(@14),0                                     0032
         BE    @RF00032                                            0032
*     DO;                                                          0033
*       OFFSET=4+4;                 /* IF MESSAGE IS TO BE PLACED ON
*                                      A CHAIN, MAKE ALLOWANCES FOR
*                                      GETMAIN LENGTH & SP           */
         MVC   OFFSET(2),@CH00058                                  0034
*       SPOOL=78;                   /* CAUSE GETMAIN FROM 78         */
         LA    SPOOL,78                                            0035
*     END;                                                         0036
*   ELSE                                                           0037
*     DO;                                                          0037
         B     @RC00032                                            0037
@RF00032 DS    0H                                                  0038
*       OFFSET=4;                   /* ELSE USE SUBPOOL ONE AND    0038
*                                      STANDARD LENGTH               */
         MVC   OFFSET(2),@CH00084                                  0038
*       SPOOL=1;                    /* INDICAT NONSHARD SUBPOL       */
         LA    @14,1                                               0039
         LR    SPOOL,@14                                           0039
*       FRESWICH=1;                 /* BUFFER IS TO BE FREED         */
         L     @10,@PC00001+8                                      0040
         ST    @14,FRESWICH(,@10)                                  0040
*     END;                                                         0041
*   LENGTH=LENGTH+OFFSET;           /* DETERMINE TOTAL LENGTH        */
@RC00032 AH    LENGTH,OFFSET                                       0042
*   GEN REFS(SPOOL,GETMANWA,LENGTH)SETS(OBTAINAD);                 0043
   GETMAIN EC,LV=(LENGTH),SP=(SPOOL),A=OBTAINAD,MF=(E,GETMANWA)
*   IF R15^=0 THEN                  /* IF GETMAIN WAS NOT            */
         LTR   R15,R15                                             0044
         BZ    @RF00044                                            0044
*     DO;                           /* SUCCESSFUL                    */
*       RETURNCD=16;                /* INDICATE GETMAIN FAILUR       */
         LA    RETURNCD,16                                         0046
*       GOTO EXIT;                                                 0047
         B     EXIT                                                0047
*     END;                                                         0048
*   R1=SAVEREG1;                    /* RESTORE REGISTER 1            */
@RF00044 LR    R1,SAVEREG1                                         0049
*   MSGADDR=OBTAINAD;               /* SAVE ADDR OF STORAGE          */
         L     @14,OBTAINAD                                        0050
         L     @10,T7                                              0050
         STCM  @14,7,MSGADDR(@10)                                  0050
*   IF CHAINFLG^=0 THEN                                            0051
         CLI   CHAINFLG(@10),0                                     0051
         BE    @RF00051                                            0051
*     DO;                           /* IF CHAIN WAS REQUESTED THEN 0052
*                                      PLACE LENGTH FIELD AFTER CHAIN
*                                      POINTER                       */
*       CHANPTR=0;                                                 0053
         SR    @10,@10                                             0053
         ST    @10,CHANPTR(,@14)                                   0053
*       LL=LENGTH-4;                                               0054
         LA    @07,4                                               0054
         LR    @09,@14                                             0054
         AR    @09,@07                                             0054
         LCR   @07,@07                                             0054
         AR    @07,LENGTH                                          0054
         STH   @07,LL(,@09)                                        0054
*       OO=0;                                                      0055
         STH   @10,OO+6(,@14)                                      0055
*     END;                                                         0056
*   ELSE                                                           0057
*     DO;                                                          0057
         B     @RC00051                                            0057
@RF00051 DS    0H                                                  0058
*       LLX=LENGTH;                 /* ELSE PLACE LENGTH IN BEGINNING
*                                      OF BUFFER                     */
         L     @14,OBTAINAD                                        0058
         STH   LENGTH,LLX(,@14)                                    0058
*       OOX=0;                                                     0059
         SR    @10,@10                                             0059
         STH   @10,OOX+2(,@14)                                     0059
*     END;                                                         0060
*                                                                  0060
*   /*****************************************************************/
*   /*                                                               */
*   /* PERFORM TEXT INSERTION                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0061
*   T2=MSGADDR+OFFSET;              /* POINT TO TARGET AREA          */
@RC00051 L     @14,T7                                              0061
         SR    @10,@10                                             0061
         ICM   @10,7,MSGADDR(@14)                                  0061
         AH    @10,OFFSET                                          0061
         ST    @10,T2                                              0061
*   T3=SEGAD(1);                    /* POINT TO PRIMRY        SEGMENT*/
         L     @14,SEGAD(,T6)                                      0062
         ST    @14,T3                                              0062
*   B=1;                            /* INITIALIZE B TO 1             */
         LA    @10,1                                               0063
         LR    B,@10                                               0063
*   C=1;                            /* INITIALIZE C TO 1             */
         LR    C,@10                                               0064
*   IF T3->SEGOFFST^=0 THEN         /* PRIMARY OFFSET NOT ZERO       */
         ICM   @05,3,SEGOFFST(@14)                                 0065
         BNZ   @RT00065                                            0065
*     GOTO INVALID1;                                               0066
*   IF NUMSEGS=1 THEN               /* IF ONLY 1 SEGMNT EXISTS       */
         C     @10,NUMSEGS(,T6)                                    0067
         BE    @RT00067                                            0067
*     GOTO LASTMOVE;                                               0068
*                                                                  0068
*   /*****************************************************************/
*   /*                                                               */
*   /* IN THE FOLLOWING ALGORITHM THE VARIABLES A,B, AND C WILL HAVE */
*   /* THE FOLLOWING MEANINGS. A IS THE LENGTH OF A SEGMENT TO BE    */
*   /* MOVED, B IS THE IS THE DISPLACEMENT PAST THE ORIGIN OF THE    */
*   /* FINAL MESSAGE TEXT WHERE THE SEGMENT IS TO BE MOVED AND C IS A*/
*   /* DISPLACEMENT FROM THE ORIGIN OF THE PRIMARY MESSAGE SEGMENT   */
*   /* (MESSAGE SEGMENT #1) WHERE A MOVE IS TO START FROM.           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0069
*   DO I=2 TO NUMSEGS;              /* START DO LOOP                 */
*                                                                  0069
         LA    @14,2                                               0069
         B     @DE00069                                            0069
@DL00069 DS    0H                                                  0070
*     /***************************************************************/
*     /*                                                             */
*     /* MOVE FROM PRIMARY SEGMENT                                   */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0070
*     T4=SEGAD(I);                  /* POINT TO NEXT SEGMENT         */
         SLA   @14,2                                               0070
         L     @10,SEGAD-4(@14,T6)                                 0070
         ST    @10,T4                                              0070
*     T5=SEGAD(I-1);                /* POINT TO PREVIOUS SEG         */
         AL    @14,@CF00116                                        0071
         L     T5,SEGAD-4(@14,T6)                                  0071
*     A=T4->SEGOFFST-T5->SEGOFFST;  /* CALCULATE NUM OF BYTES TO MOVE
*                                      FROM PRIME SEGMENT            */
         LH    @14,SEGOFFST(,@10)                                  0072
         LR    @10,@14                                             0072
         SH    @10,SEGOFFST(,T5)                                   0072
         STH   @10,A                                               0072
*     IF A<0×                       /* IF SEGS ARE OUT OF ORDER      */
*         T3->SEGLENGH<T4->SEGOFFST+4 THEN/* OR IS OFFSET IS TOO BIG */
         LTR   @10,@10                                             0073
         BM    @RT00073                                            0073
         AH    @14,@CH00084                                        0073
         L     @10,T3                                              0073
         CH    @14,SEGLENGH(,@10)                                  0073
         BNH   @RF00073                                            0073
@RT00073 DS    0H                                                  0074
*       DO;                                                        0074
*INVALID1:                                                         0075
*         SUBPOOL1=GETSP;           /* INDICATE SUBPOOL              */
INVALID1 MVC   SUBPOOL1(1),GETSP                                   0075
*         FRELEN=GETMLEN;           /* AMOUNT TO BE FREED            */
         MVC   FRELEN(3),GETMLEN+1                                 0076
*         R1=MSGADDR;               /* POINT TO OBTAIND BUFFER       */
         L     @14,T7                                              0077
         SR    R1,R1                                               0077
         ICM   R1,7,MSGADDR(@14)                                   0077
*         R0=FREEREG0;              /* PLACE FREMAIN PARM IN 0       */
         L     R0,FREEREG0                                         0078
*         GEN(FREEMAIN R,LV=(0),A=(1));/* FREE THE BUFFER            */
         FREEMAIN R,LV=(0),A=(1)
*INVALID:                                                          0080
*         RETURNCD=12;              /* INDICATE INVALID PARMS        */
INVALID  LA    RETURNCD,12                                         0080
*         GOTO EXIT;                                               0081
         B     EXIT                                                0081
*       END;                                                       0082
*     IF C^>T3->SEGLENGH-4 THEN                                    0083
@RF00073 L     @14,T3                                              0083
         LH    @10,SEGLENGH(,@14)                                  0083
         SH    @10,@CH00084                                        0083
         CR    C,@10                                               0083
         BH    @RF00083                                            0083
*       DO;                                                        0084
*         X=A+B-1;                                                 0085
         LH    @10,A                                               0085
         LR    X,B                                                 0085
         AR    X,@10                                               0085
         BCTR  X,0                                                 0085
*         IF B>X THEN               /* NO PRIMARY MOVEMENT           */
         CR    B,X                                                 0086
         BH    @RT00086                                            0086
*           GOTO MOVESEGI;                                         0087
*         T2->MESSAGE(B:X)=T3->SEGTEXT(C:C+X-B);/* MOVE PORTION OF 0088
*                                      PRIMARY SEGMENT INTO TARGET   */
         L     @09,T2                                              0088
         ALR   @09,B                                               0088
         AL    @09,@CF00117                                        0088
         LR    @08,X                                               0088
         SR    @08,B                                               0088
         ALR   @14,C                                               0088
         EX    @08,@SM00118                                        0088
*         C=C+A;                    /* INCREMENT PTR TO NEXT BYTE IN
*                                      PRIMARY                SEGMENT*/
         AR    C,@10                                               0089
*       END;                        /* END MOVE FROM PRIME SEG       */
*                                                                  0090
*     /***************************************************************/
*     /*                                                             */
*     /* MOVE TEXT SEGMENT                                           */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0091
*     B=A+B;                        /* UPDATE INDEX TO NEXT BYTE IN
*                                      TARGET                        */
@RF00083 AH    B,A                                                 0091
*     IF T4->SEGLENGH=4 THEN                                       0092
         L     @14,T4                                              0092
         CLC   SEGLENGH(2,@14),@CH00084                            0092
         BE    @RT00092                                            0092
*       GOTO ENDLOOP;               /* IF SEGMENT IS NULL LINE       */
*MOVESEGI:                                                         0094
*     X=T4->SEGLENGH-4+B-1;         /* ESTABLISH LAST BYTE IN TARGET
*                                      FOR THIS MOVE                 */
MOVESEGI L     @14,T4                                              0094
         LH    X,SEGLENGH(,@14)                                    0094
         SH    X,@CH00084                                          0094
         AR    X,B                                                 0094
         BCTR  X,0                                                 0094
*     T2->MESSAGE(B:X)=T4->SEGTEXT; /* MOVE SEGMENT TO TARGET        */
         L     @10,T2                                              0095
         ALR   @10,B                                               0095
         AL    @10,@CF00117                                        0095
         LR    @09,X                                               0095
         SR    @09,B                                               0095
         EX    @09,@SM00120                                        0095
*     B=X+1;                        /* UPDATE INDEX PTR TO NEXT BYTE
*                                      IN TARGET                     */
         LA    B,1                                                 0096
         AR    B,X                                                 0096
*ENDLOOP:                                                          0097
*   END;                                                           0097
ENDLOOP  LA    @14,1                                               0097
         AH    @14,I                                               0097
@DE00069 STH   @14,I                                               0097
         C     @14,NUMSEGS(,T6)                                    0097
         BNH   @DL00069                                            0097
*   IF C^>T3->SEGLENGH-4 THEN                                      0098
         L     @14,T3                                              0098
         LH    @14,SEGLENGH(,@14)                                  0098
         SH    @14,@CH00084                                        0098
         CR    C,@14                                               0098
         BH    @RF00098                                            0098
*     DO;                                                          0099
*LASTMOVE:                                                         0100
*       T4=OBTAINAD+OFFSET-4;       /* POINT TO TARGET HEADER        */
LASTMOVE LA    @14,4                                               0100
         LH    @10,OFFSET                                          0100
         A     @10,OBTAINAD                                        0100
         SR    @10,@14                                             0100
         ST    @10,T4                                              0100
*       X=T4->SEGLENGH-4;           /* POINT TO LAST BYTE            */
         LCR   @14,@14                                             0101
         AH    @14,SEGLENGH(,@10)                                  0101
         LR    X,@14                                               0101
*       T2->MESSAGE(B:X)=T3->SEGTEXT(C:C+X-B);/* MOVE LAST SECTION   */
         L     @14,T2                                              0102
         ALR   @14,B                                               0102
         AL    @14,@CF00117                                        0102
         LR    @10,X                                               0102
         SR    @10,B                                               0102
         L     @06,T3                                              0102
         ALR   @06,C                                               0102
         EX    @10,@SM00122                                        0102
*     END;                                                         0103
*NORMEND:                                                          0104
*   RETURNCD=0;                     /* INDICATE NORMAL COMPLTN       */
@RF00098 DS    0H                                                  0104
NORMEND  SR    RETURNCD,RETURNCD                                   0104
*EXIT:                                                             0105
*   RETURN CODE(RETURNCD);                                         0105
EXIT     L     @13,4(,@13)                                         0105
         L     @00,@SIZDATD                                        0105
         LR    @01,@11                                             0105
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@04                                             0105
         L     @14,12(,@13)                                        0105
         LM    @00,@12,20(@13)                                     0105
         BR    @14                                                 0105
*   END IKJEFT54;                                                  0106
@DATA    DS    0H
@CH00084 DC    H'4'
@CH00058 DC    H'8'
@CH00100 DC    H'256'
@CH00097 DC    H'260'
@SM00118 MVC   MESSAGE(0,@09),SEGTEXT-1(@14)
@SM00120 MVC   MESSAGE(0,@10),SEGTEXT(@14)
@SM00122 MVC   MESSAGE(0,@14),SEGTEXT-1(@06)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    3F
IKJEFT54 CSECT
         DS    0F
@CF00116 DC    F'-4'
@CF00117 DC    F'-1'
@CF00035 DC    F'1'
@CH00035 EQU   @CF00035+2
@DATD    DSECT
         DS    0D
T2       DS    A
T3       DS    A
T4       DS    A
T7       DS    A
OBTAINAD DS    A
FREEREG0 DS    AL4
         ORG   FREEREG0
SUBPOOL1 DS    AL1
FRELEN   DS    AL3
         ORG   FREEREG0+4
OFFSET   DS    H
I        DS    H
A        DS    H
         DS    CL2
GETMANWA DS    CL10
         ORG   GETMANWA
GETMLEN  DS    FL4
@NM00001 DS    CL5
GETSP    DS    AL1
         ORG   GETMANWA+10
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKJEFT54 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
TEXTSIZE EQU   @04
X        EQU   @05
C        EQU   @07
B        EQU   @04
T6       EQU   @06
T5       EQU   @05
RETURNCD EQU   @04
SAVEREG1 EQU   @05
R0       EQU   @00
R1       EQU   @01
R15      EQU   @15
LENGTH   EQU   @02
SPOOL    EQU   @03
OLD      EQU   0
NUMSEGS  EQU   OLD
SEGAD    EQU   OLD+4
ADMSG    EQU   0
CHAINFLG EQU   ADMSG
MSGADDR  EQU   ADMSG+1
SEGMENT  EQU   0
SEGLENGH EQU   SEGMENT
SEGOFFST EQU   SEGMENT+2
SEGTEXT  EQU   SEGMENT+4
CHANPTR  EQU   0
LL       EQU   0
OO       EQU   0
LLX      EQU   0
OOX      EQU   0
MESSAGE  EQU   0
OLDX     EQU   0
ADMSGX   EQU   0
FORMONLY EQU   0
FRESWICH EQU   FORMONLY
@RT00016 EQU   INVALID
@RT00021 EQU   INVALID
@RT00026 EQU   INVALID
@RT00030 EQU   INVALID
@RT00065 EQU   INVALID1
@RT00067 EQU   LASTMOVE
@RT00086 EQU   MOVESEGI
@RT00092 EQU   ENDLOOP
@ENDDATA EQU   *
         END   IKJEFT54
