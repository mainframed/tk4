         TITLE 'I K J E F P 0 3 -- ADDRESS PCE PROCESSOR'
*                                                                     *
***********************************************************************
*                                                                     *
*             P R O L O G U E    F O R    I K J E F P 0 3             *
*                                                                     *
*                     PARSE'S ADDRESS PCE PROCESSOR                   *
*                                                                     *
*MODULE NAME= IKJEFP03                                                *
*                                                                     *
*DESCRIPTIVE NAME= PARSE ADDRESS PCE PROCESSOR                        *
*                                                                     *
*COPYRIGHT= N/A                                                       *
*                                                                     *
*STATUS= RELEASE 02.                                                  *
*                                                                     *
*FUNCTION= THIS MODULE IS RESPONSIBLE FOR SYNTAX CHECKING AND         *
*        PROCESSING THE ADDRESS PCE (PARAMETER CONTROL ENTRY).        *
*                                                                     *
*  OPERATION= WHENEVER THE PARSE MAINLINE ENCOUNTERS AN ADDRESS PCE,  *
*        CONTROL IS IMMEDIATELY PASSED TO THIS ROUTINE.               *
*                                                                     *
*NOTES                                                                *
*  DEPENDENCIES=                                                      *
*    CHARACTER-CODE DEPENDENCIES=                                     *
*       -- CLASS C.  THE OPERATION OF THIS PROGRAM IS DEPENDENT UPON  *
*        AN INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET     *
*        WHICH IS EQUIVALENT TO THE ONE USED AT ASSEMBLY TIME. THE    *
*        CODING HAS BEEN ARRANGED SO THAT REDEFINITION OF             *
*        'CHARACTER' CONSTANTS, BY REASSEMBLY, WILL RESULT IN A       *
*        CORRECT PROGRAM FOR THE NEW DEFINITION.                      *
*                                                                     *
*  (SEE THE PROLOGUE FOR MODULE IKJEFP00, PARSE MAINLINE ROUTINE, FOR *
*  FURTHER INFORMATION.)                                              *
*                                                                     *
*  RESTRICTIONS=  NONE.                                               *
*  REGISTER-CONVENTIONS= IKJEFP03                                     *
*  PATCH-LABEL= N/A                                                   *
*                                                                     *
*MODULE TYPE= MODULE                                                  *
*  PROCESSOR= ASSEM                                                   *
*  MODULE SIZE= N/A                                                   *
*  ATTRIBUTES= REENTRANT, REFRESHABLE, AND REUSABLE                   *
*                                                                     *
*ENTRY POINT= IKJEFP03                                                *
*  PURPOSE= TO PROCESS THE ADDRESS PCE (PARAMETER CONTROL ENTRY).     *
*  LINKAGE= STANDARD                                                  *
*  INPUT=                                                             *
*        --- REGISTER 6 - XPCE - CONTAINS CURRENT PCE POINTER         *
*        --- REGISTER 13 - CONTAINS THE PARSE WORKAREA POINTER        *
*        --- REGISTERS 7, 10, 11 ARE BASE REGISTERS FOR THE MAINLINE  *
*                    ROUTINE                                          *
*        --- REGISTER 14 IS THE BASE REGISTER FOR THIS ROUTINE        *
*        --- REGISTERS 4, 5 - XINPUT, XINPUTB - POINT TO THE          *
*                    CURRENT CHARACTER BE SCANNED IN THE INPUT BUFFER.*
*  REGISTERS SAVED= REGISTER 14.                                      *
*  REGISTER USAGE= REGISTER 14 IS THE BASE REGISTER FOR THIS ROUTINE. *
*       SINCE THIS ROUTINE CONSTANTLY CALLS OTHER ROUTINES THAT ARE   *
*       LOCATED IN THE MAINLINE ROUTINE, THE SAME REGISTER CONVENTIONS*
*       ARE USED.                                                     *
*  REGISTERS RESTORED= REGISTER 14 IS  RESTORED UPON RETURN FROM ALL  *
*       OF THE ROUTINES THAT ARE CALLED. THE LINKAGE REGISTER (8 OR 9)*
*       IS ALSO SAVED BEFORE EXIT TO THE ROUTINE AND IS RESTORED UPON *
*       RETURN FROM THE  ROUTINE.                                     *
*                                                                     *
*EXIT - NORMAL= TO THE POSIT SUBROUTINE OF THE MAINLINE ROUTINE       *
*  CONDITIONS= WHEN THE PCE IS COMPLETELY PROCESSED AND THE PDE IS    *
*      READY TO BE BUILT.                                             *
*        -- LINKAGES TO THE SUBROUTINES OF IKJEFP00 ARE MADE
*            BY WAY OF THE TWO SUBROUTINES, LINK2OUT AND LINK1OUT.
*            SINCE LINK2 (REG 8) AND LINK1 (REG 9) ARE USED AS
*            LINKAGE REGISTERS FOR PARSE, THESE ROUTINES SAVE
*            THESE REGISTERS AND RESTORE THE PROPER REGISTERS THAT ARE
*            NEEDED BY THE CALLED ROUTINES. UPON RETURN FROM THESE
*            ROUTINES, LINK2OUT AND LINK1OUT RESTORE THE BASE
*            REGISTERS, DETERMINE AND BRANCH TO THE CORRECT OFFSET
*            IN THIS ROUTINE.                                         *
*  OUTPUT= A TEMPORARY PDE HAS BEEN BUILT WHICH CONTAINS ALL OF THE   *
*       VALID DATA NECESSARY FOR BUILDING THE USER'S PDE.             *
*  RETURN CODES= NONE.                                                *
*                                                                     *
*EXIT - ERROR=                                                        *
*        -- THE ILLADDR SUBROUTINE OF THE MAINLINE ROUTINE IS GIVEN   *
*      CONTROL AND ISSUES AN INVALID ADDRESS MESSAGE.                 *
*  CONDITIONS= WHENEVER AN INVALID ADDRESS IS ENCOUNTERED IN THE INPUT*
*       BUFFER.                                                       *
*  OUTPUT= NONE.                                                      *
*  RETURN CODES= NONE                                                 *
*                                                                     *
*EXTERNAL REFERENCES=                                                 *
*  ROUTINES=                                                          *
*       THE FOLLOWING PARSE MAINLINE SUBROUTINES ARE CALLED.          *
*        SKIPB _ SKIP SEPARATOR ROUTINE.                              *
*        LISTT - LIST PROCESSING ROUTINE.                             *
*        ILLADDR - INVALID ADDRESS MESSAGE ISSUING ROUTINE.           *
*        TYPETEST - CHARACTER TYPE TESTING ROUTINE.                   *
*        STALOC - STORAGE ALLOCATION ROUTINE.                         *
*        TRANSQ - TRANSLATE TO UPPERCASE ROUTINE.                     *
*        RANGE - RANGE PROCESSING ROUTINE.                            *
*        POSITX - PDE BUILDING ROUTINE.                               *
*        PROMPTQ - PROMPTING ROUTINE.                                 *
*                                                                     *
*  DATA AREAS=                                                        *
*        -- MACRO IKJEFPWA IS SHARED BY THIS ROUTINE.                 *
*                                                                     *
*  CONTROL BLOCKS= NONE.                                              *
*                                                                     *
*TABLES AND WORKAREAS=                                                *
*        IKJEFPWA - SEE MAPPING MACRO FOR COMPLETE DETAILS.           *
*        USER PCE.                                                    *
*        USER PDE.                                                    *
*                                                                     *
*MACROS=                                                              *
*        NONE.                                                        *
*                                                                     *
*        SERIALIZATION= N/A                                           *
*                                                                     *
*CHANGE ACTIVITY= N/A                                                 *
*                                                                     *
*MESSAGES= NONE.                                                      *
*                                                                     *
*ABEND CODES= NONE.                                                   *
*                                                                     *
***********************************************************************
*                                                                     *
*  RELEASE 3.0  SUPPORT CODE = Y30NQJN                                *
*                                                                     *
***********************************************************************
*****                                                                 *
IKJEFP03 CSECT
*
         EXTRN SKIPB,LISTT,ILLADDR,TYPETEST,STALOC              Y30NQJN
         EXTRN TRANSQ,RANGE,POSITX,PROMPTQ                      Y30NQJN
         ENTRY ADDRERSC                                         Y30NQJN
*
*       EQUATES FOR PARSE'S ADDRESS PCE PROCESSOR
*
R0       EQU   0                       USED AS REGISTER ZERO
R1       EQU   1                       USED AS REGISTER ONE
R2       EQU   2                       USED AS REGISTER TWO
R3       EQU   3                       USED AS REGISTER THREE
XINPUT   EQU   4                       NEXT CHARACTER TO SCAN
XINPUTB  EQU   5                       LAST CHARACTER SCANNED.
*                                      USED TO COMPUTE LENGTH OF
*                                      SCANNED DATA
R5       EQU   5                       USED AS REG. 5
XPCE     EQU   6                       ALWAYS POINTS TO CURRENT PCE
BASE3    EQU   14                      BASE REGISTER FOR THIRD CSECT
LINK2    EQU   8                       LINKAGE REGISTER BETWEEN
*                                      SUBROUTINES
R9       EQU   9                       USED AS REGISTER 9
BASE2    EQU   10                      BASE REGISTER FOR 2ND CSECT
BASE1    EQU   11                      MAINLINE BASE REGISTER
RBASE    EQU   12                      BASE REGISTER FOR CURRENT
*                                      RECURSIVE WORKAREA
LINK1    EQU   9                       LINKAGE REGISTER
PBASE    EQU   13                      PERMANENT WORKSPACE BASE REGISTR
R13      EQU   13
R14      EQU   14                      RETURN REGISTER
R15      EQU   15                      CALL REGISTER
*
*
BKCHAR   EQU   C'_'                    BREAK CHARACTER
RIGHTPRN EQU   C')'                    RIGHT PARENTHESIS
PERIOD   EQU   C'.'                    PERIOD
PLUS     EQU   C'+'                    PLUS SIGN
EBCDIC0  EQU   C'0'                    CHARACTER 0
EBCDIC1  EQU   C'1'                    CHARACTER 1
EBCDIC2  EQU   C'2'                    CHARACTER 2
EBCDIC3  EQU   C'3'                    CHARACTER 3
EBCDIC4  EQU   C'4'                    CHARACTER 4
EBCDIC5  EQU   C'5'                    CHARACTER 5
EBCDIC6  EQU   C'6'                    CHARACTER 6
CC7      EQU   7                       CONDITION CODE SEVEN (NZ OR NE)
CC10     EQU   10                      CONDITION CODE 10 (EQ OR GT)
*
COUNTER  EQU   2                       USED TO CONTROL MAXIMUM SIZE
LEVELS   EQU   3                       USED TO CONTROL MAXIMUM SIZE
RELATIVE EQU   C'+'                    DENOTES AN ADDRESS EXPRESSION
MORE     EQU   RELATIVE
CHECK    EQU   1                       USED TO INTERFACE WITH TYPETEST
PERCENT  EQU   C'%'                    DENOTES AN INDIRECT ADDRESS
LESS     EQU   C'-'                    DENOTES AN ADDRESS EXPRESSION
PL1BIT   EQU   X'80'                   PL1 REQUIREMENT
LOCATPDE EQU   8                       USED TO LOCATE LAST EXPRESSION
*                                         VALUE ON CHAIN
D        EQU   C'D'                    USED TO TEST FOR DOUBLE PRECISON
LOWD     EQU   X'84'                   LOWER CASE IS VALID ALSO
E        EQU   C'E'                    USED BY ADDRESS RTN TO CHECK
*                                         FOR SINGLE PRECISION
LOWE     EQU   X'85'                   LOWER CASE IS ALSO VALID
R        EQU   C'R'                    USED TO CHECK FOR GENERAL
*                                         REGISTER
LOWR     EQU   X'99'                   LOWER CASE IS ALSO VALID
NNN      EQU   C'N'                    DENOTES DECIMAL AS OPPOSED TO
*                                      HEXADECIMAL EXPRESSION VALUE
LOWNNN   EQU   X'95'                   LOWER CASE IS VALID ALSO
HFF      EQU   X'FF'                   USED TO MANIPULATE FLAGS
IPDLMAXE EQU   10                      MAXIMUM INPUT STACKING DEPTH FOR
*                                      AN INPUT PUSHDOWN STACK
ZERO     EQU   0                       USED AS ZERO
ONE      EQU   1                       USED AS ONE
TWO      EQU   2                       USED AS TWO
THREE    EQU   3                       USED AS THREE
FOUR     EQU   4                       USED AS FOUR
FIVE     EQU   5                       USED AS FIVE
SIX      EQU   6                       USED AS SIX
SEVEN    EQU   7                       USED AS SEVEN
EIGHT    EQU   8                       USED AS EIGHT
THIRTY5  EQU   35                      USED AS THIRTY FIVE
THIRTY6  EQU   36                      USED AS THIRTY SIX
*
DATAPRES EQU   X'80'                   PDE FLAG TO INDICATE DATA THERE
ADDRDATA EQU   0                       POINTER TO ADDRESS STRING
ADDRLNTH EQU   4                       POINTER TO ADDRESS LENGTH
ADDRFLGS EQU   8                       INDICATES TYPE OF EXPRESSION
*                                      VALUE
ADDRSIGN EQU   9                       ARITHMETIC SIGN CHARACTER USED
ADDRCNT  EQU   10                      NUMBER OF LEVELS OF INDIRECT
*                                      ADDRESSING
ADDRPTR  EQU   12                      POINTER TO NEXT EXPRESSION VALUE
TINYPDE  EQU   1                       R1(TINYPDE) USED AS A POINTER TO
*                                      CORE GOTTEN FOR ADDRESS
*                                      EXPRESSION
HEXVALUE EQU   X'02'                   USED BY TO DENOTE
*                                      A HEXADECIMAL EXPRESSION VALUE
DECVALUE EQU   X'04'                   USED BY TO DENOTE
*                                      A DECIMAL EXPRESSION VALUE
SYMADR   EQU   X'80'                   SYMBOLIC ADDRESS FLAG
RELADR   EQU   X'40'                   RELATIVE ADDRESS FLAG
ABSADR   EQU   X'00'                   ABSOLUTE ADDRESS FLAG
REG      EQU   X'20'                   REGISTER NOTATION FLAG
DPFPR    EQU   X'10'                   USED TO DENOTE DOUBLE PRECISION
*                                      FLOATING POINT REGISTER
SPFPR    EQU   X'08'                   USED TO DENOTE SINGLE PRECISION
*                                      FLOATING POINT REGISTER
ENTRYNAM EQU   X'04'                   USED TO DENOTE A NON-QUALIFYING
*                                      ENTRY NAME (PRECEDED BY AN
EMPTYFLG EQU   X'02'                   INITIAL SETTING OF DATAFLG
*                                      NO ADDRESS TYPE YET IDENTIFIED
*                                      OPTIONAL LOADNAME)
*
*  BIT SETTINGS USED BY TYPETEST FOR SYNTAX CHECKING CHARACTERS
*
HEX      EQU   X'80'                   HEX CHARACTER
OLETTER  EQU   X'40'                   LETTER NOT A HEX (G-Z)
NATL     EQU   X'20'                   NATIONAL CHARACTER
NUMBER   EQU   X'10'                   NUMBER
SEPAR    EQU   X'08'                   SEPARATOR
NSEPDLIM EQU   X'04'                   DELIMITER, NOT A SEPARATOR
NDLIMSPC EQU   X'02'                   SPECIAL CHARACTER, NOT A
*                                      DELIMITER OR SEPARATOR
CMDDLIM  EQU   X'01'                   COMMAND NAME DELIMITER
INVALID  EQU   X'00'                   INVALID CHARACTER
ALPHA    EQU   HEX+OLETTER+NATL        ALPHABETICS
DLIMREQD EQU   SEPAR+NSEPDLIM          AN END OF PARAMETER DELIMITER
*                                      REQUIRED
*
         EJECT
* PERMANENT WORKSPACE FLAGS.
*
* P F L A G S
*
PFLIST   EQU   X'80'                   CURRENTLY PROCESSING A LIST
PFDEFLT  EQU   X'40'                   INDICATES A DEFAULT TAKEN
PFENDF   EQU   X'20'                   END OF INPUT AREA HAS BEEN
*                                         REACHED
ADREXP   EQU   X'10'                   INDICATE ADDR EXPRESSION   M4789
HEXBIT   EQU   X'08'                   ADDRESS EXPRESSION CONTAINS
*                                         A HEX CHARACTER
PFBYPAS  EQU   X'04'                   BYPASS MODE IS TO BE ESTABLISHED
PFNEW    EQU   X'02'                   USED BY ADDRESS ROUTINE TO
*                                         DENOTE A NEW VALID ADDRESS
*                                         ENTRYNAME (WITH OR WITHOUT
*                                         LOADNAME QUALIFICATION)
DECBIT   EQU   X'01'                   ADDRESS EXPRESSION IS DECIMAL
* P F L A G S 2
PFSKPINV EQU   X'80'                   VALIDITY CHECK ROUTINE REQUESTED
*                                         A REENTER MESSAGE ONLY
RNGEVAL1 EQU   X'40'                   ADDRESS ROUTINE PROCESSED FIRST
*                                         VALUE OF RANGE PARAMETER
ONERBIT  EQU   X'20'                   CONTROL BIT USED DURING SCAN
*                                         BY ADDRESS ROUTINE
TWORBIT  EQU   X'10'                   CONTROL BIT USED DURING SCAN
*                                         BY ADDRESS ROUTINE
RNGEVAL2 EQU   X'08'                   ADDRESS ROUTINE PROCESSED
*                                         SECOND VALUE OF RANGE
*                                         PARAMETER
*
REGBIT   EQU   X'04'                   CONTROL BIT USED DURING SCAN
*                                         BY ADDRESS ROUTINE
FLTERBIT EQU   X'02'                   CONTROL BIT USED DURING SCAN
*                                         BY ADDRESS ROUTINE
BREAKBIT EQU   X'01'                   USED BY ADDRESS ROUTINE TO
*                                         DENOTE A BREAK CHARACTER IN
*                                         PARAMETER
* P F L A G S 3
PFSTPRMT EQU   X'80'                   PROMPT FOR STRING
PFONE    EQU   X'40'                   INDICATES AT LEAST ONE PDE
*                                         PDE HAS BEEN BUILT
LOADBIT  EQU   X'20'                   CONTROL BIT USED BY ADDRESS RTN
*                                         DENOTING LOADNAME DATA
ENTRYBIT EQU   X'10'                   CONTROL BIT USED BY ADDRESS RTN
*                                      DENOTING ENTRYNAME DATA
PFNULL  EQU   X'08'                    INDICATES A NULL LINE WAS
*                                        ENTERED AFTER A PROMPT
LPRNFND  EQU   X'04'                   USED TO INDICATE A LEFT PAREN
*                                         WAS FOUND BY THE ERROR RTN.
PFSPACE  EQU   X'02'                   USED TO INDICATE A POSITIONAL
*                                         SPACE PARAMETER WAS
*                                         ENCOUNTERED SO THAT THE
*                                         POSITIONAL STRING ROUTINE
*                                         KNOWS WHEN TO END THE STRING
PFMORE   EQU   X'01'                   USED TO INDICATE IF THE LEFT
*                                         PAREN OF A SUBFIELD WAS
*                                         ALSO USED AS THE LEFT PAREN
*                                         OF THE LIST WITHIN THE
*                                         SUBFIELD
* P F L A G S 4
PFENDLIM EQU   X'80'                   INDICATES END DELIMITER
*                                         FOR A SELF-DELIMITING STRING
*                                         HAS BEEN FOUND
PFLSTEND EQU   X'40'                   INDICATES LIST END DELIMITER
*                                         HAS BEEN FOUND
PFVCMSG  EQU   X'20'                   INDICATES A VALIDITY CHECK
*                                         ROUTINE HAS SUPPLIED A SECOND
*                                       LEVEL MESSAGE
PFPDDATA EQU   X'10'                   INDICATE PROCESSING PROMPT OR
*                                         DEFAULT DATA
PFSLASH  EQU   X'08'                   INDICATE DSNAME/USERID ROUTINE
*                                         IS SCANNING FOR PASSWORD
PFENDSET EQU   X'04'                   INDICATES BACKUP POINTER FOR
*                                         ENDINPUT HAS BEEN SET
PFNOPOP  EQU   X'02'                   INDICATES STACK IS NOT TO  M0911
*                                         BE POPPED IF ALL SEPARATORS
*                                         IN PROMPT BUFFER
CKRANGE  EQU   X'01'                   ADDR ROUTINE SHOULD CHECK  M4789
*                                         FOR RANGE
* P F L A G S 5
*
PFSQSTR  EQU   X'80'                   SPECIAL QSTRING HANDLING DONE
*                                      AT LEAST ONCE
INVPRMPT EQU   X'40'                   CHECK FOR INVALID MSG PROMPT
*                                      THIS FLAG IS ALSO USED TO TEST
*                                      THE PROMPT FLAG IN THE UPT TO
*                                      INDICATE IF THE USER IS IN
*                                      NOPROMPT MODE OR NOT
SUBFLG   EQU   X'20'                   INDICATE A SUBFIELD IS BEING PRO
*                                      CESSED
INVFLG   EQU   X'10'                   INVALID DATA WAS FOUND FOR A
BYPASFLG EQU   X'08'                   INDICATE BYPASS MODE FOR INVALID
RPRNFND  EQU   X'04'                   RIGHT PAREN FOUND FLAG
*                                      USER IN NOPROMPT MODE
PSWDFLG  EQU   X'02'                   INDICATE PASSWORD IS BEING PRO
*                                      CESSED
DSNFLG   EQU   X'01'                   INDICATE DSNAME IS BEING
*                                      PROCESSED
*
* P F L A G S 6
*
ALIASFLG EQU   X'80'                   INDICATE AN ALIAS WAS FOUND
PSWDQFLG EQU   X'40'                   INDICATE QUOTED PASSWORD
HEXFLG   EQU   X'20'                   HEXADECIMAL PROCESSING
DECFLG   EQU   X'10'                   DECIMAL VALUE PROCESSING
BINFLG   EQU   X'08'                   BINARY INTEGER PROCESSING
CHARFLG  EQU   X'04'                   CHARACTER STRING PROCESSING
NUMFLG   EQU   X'02'                   NUMERIR VALUE PROCESSING
PDEFLG   EQU   X'01'                   CONVERTED HEXADECIMAL VALUE
*
* P F L A G S 7
*
VOLSERF  EQU   X'80'                   INDICATE VOLUME SERIAL PROCESING
VALENDF  EQU   X'40'                   INDICATE END OF BUFFER NOT
*                                      REACHED, CHECK DELIMITER
DSNAMEF  EQU   X'08'                   INDICATE DSNAME PROCESSING
*                                      DURING VALIDITY CHECKING
*
* P F L A G S 8
*        RESERVED
         EJECT
***********************************************************************
**                                                                   **
*                                                              Y30NQJN*
*                  POSITIONAL ADDRESS ROUTINE                         *
*                                                                     *
* THE PURPOSE OF THIS ROUTINE IS TO SYNTAX CHECK THE ADDRESS PARAMETER*
* USED BY SUB-COMMANDS OF TEST                                        *
* A VALID ADDRESS CAN BE SYMBOLIC, RELATIVE, ABSOLUTE OR A REGISTER   *
* NAME INCLUDING ANY SPECIFICATION OF ONE OR MORE LEVELS OF INDIRECT  *
* ADDRESSING OR AN EXPRESSION BUILT OF COMBINATIONS OF SYMBOLIC,      *
* RELATIVE OR ABSOLUTE ADDRESSES, OR GENERAL REGISTER NAMES FOR WHICH *
* INDIRECT ADDRESSING IS SPECIFIED, AND PLUS OR MINUS DISPLACEMENT    *
* VALUES                                                              *
* SYMBOLIC AND RELATIVE ADDRESSES MAY ADDITIONALLY BE QUALIFIED BY    *
* '.ENTRYNAME.' OR 'LOADNAME.ENTRYNAME.'  IF NO QUALIFIERS ARE        *
* SPECIFIED, THE QUALIFICATION IS IMPLICIT                            *
* '.ENTRYNAME'(OPTIONALLY PRECEDED BY LOADNAME)IS ALSO A VALID ADDRESS*
*                                                                     *
***********************************************************************
*
*/*ADDRESS: P GET PDE SIZE */
ADDRESS  DS    0H                      ADDRESS ROUTINE
*
         LR    R1,BASE3                 SAVE REGISTER 7
         BALR  BASE3,ZERO              ESTABLISH ADDRESSABILITY
         USING *,BASE3                 ADDRESSABILITY TO ROUTINE
         MODID BRANCH=YES
*
*
         USING PWORK,PBASE            ADDRESSABILITY TO WORK AREA
*
         ST    R1,ADDRSAVE+EIGHT       SAVE BASE REGISTER CONTENTS
         ST    R14,ADDRSAVE+FOUR       SAVE THIS RTN'S BASE REGISTER
         MVI   DATAEXP,HFF             INSURES THAT EXPRESSION VALUE
*                                         PDE PTR IS X'FF000000'
         MVI   DATAFLG,EMPTYFLG        INITIALIZE FLAGS TO 'EMPTY'M5957
         LA    R1,THIRTY5              GET PDE SIZE-1
         STC   R1,PPCOUNT              SAVE
*/* S SKIPB: SKIP SEPARATORS */
         L     R15,SKIPBP              GET SKIP SEPARATORS RTN. PTR.
         BAL   LINK2,LINK2OUT          SKIP BLANKS
         B     ADDREPRQ                PROMPT IF NECESSARY
*                                      (NULL PARAMETER)
*/* S LISTT: CHECK FOR LIST */
         L     R15,LISTTP              GET LISTT RTN. PTR.
         BAL   LINK1,LINK1OUT          PROCESS POSSIBLE LIST
*/* D (YES,,NO,ILLADDR) LIST IS VALID */
         B     TURNOFF                +0 RETURN - INVALID LIST
         LA    R0,LRPAREN+ONE          GET PTR TO DUMMY LIST     A51300
         CR    R0,XINPUT               PROCESSING DUMMY LIST?    A51300
         BE    ADDREPRQ                YES, LIST NULL- GO PROMPT A51300
         SPACE
*/*ADDRERSC: P SAVE PTR FOR INVALID MSG */
ADDRERSC DS    0H                      * * * *
         MVC   INVPSAVE,PPOINTR        SAVE PTR FOR INVALID MSG
         SPACE
*/*RANGENTR: P ENTRY FOR SECOND VALUE OF RANGE SCAN */
RANGENTR DS    0H                      SPECIAL ENTRY TO SCAN SECOND
*                                      VALUE OF RANGE ADDRESS
         MVI   DATAEXP,HFF             IF EXPRESSION FOUND, FIELD
*                                      WILL BE SET AS POINTER TO 1ST
*                                      EXPRESSION VALUE PDE
         L     R14,ADDRSAVE+FOUR       RESTORE BASE REG AFTER RETURN.
*                                      THIS IS IS NEEDED FOR INVALID
*                                      ADDRESSES, SINCE BASE REG MUST
*                                      BE RESTORED UPON RE-ENTRY
*                                      TO THIS ROUTINE.
*/*STARTAGN: P SAVE START OF PARAMETER */
STARTAGN DS    0H                      * * * *
         LA    XINPUT,ONE(XINPUT)      INCREMENT SCAN REGISTER
         LR    XINPUTB,XINPUT          SET BACKUP REGISTER
         ST    XINPUT,PPOINTR          SAVE START OF PARAMETER
*/* P ZERO A COUNTER FOR SIZE OF PARAMETER */
         XR    COUNTER,COUNTER         A WORK REGISTER TO MAINTAIN
*                                      A TALLY OF SIZE OF PARAMETER
*/* P ZERO A COUNTER FOR NUMBER OF LEVELS IN ADDRESS */
         XR    LEVELS,LEVELS           A WORK REGISTER TO MAINTAIN
*                                      A TALLY OF THE NUMBER OF LEVELS
*                                      OF INDIRECT ADDRESSES
*/* D (YES,ADDREPLS,NO,) ADDRESS IS RELATIVE TYPE */
         CLI   ZERO(XINPUT),RELATIVE   IS RELATIVE SPECIFIED
         BE    ADDREPLS                YES, GO PROCESS
*/* D (YES,,NO,NOENTRNM) ENTRYNAME IS SPECIFIED */
         CLI   ZERO(XINPUT),PERIOD     IS ENTRYNAME SPECIFIED
         BNE   NOENTRNM                NO, BRANCH
         SPACE
*/*ENTRYNM: P INCREMENT SCAN PTR AND SET ENTRYBIT ON */
ENTRYNM  DS    0H                      * * * *
         LA    R1,ONE(XINPUT)          BEGINNING OF ENTRYNAME IS ONE
         ST    R1,PPOINTR              BYTE PAST PERIOD
         OI    PFLAGS2,ENTRYBIT        WORK BIT INDICATING AN
*                                      ENTRYNAME IS BEING PROCESSED
         LA    XINPUT,ONE(XINPUT)      INCREMENT SCAN REGISTER
         LR    XINPUTB,XINPUT          SET BACKUP REGISTER
*/* S CHECKEND: CHECK FOR END OF INPUT */
         BAL   LINK1,CHECKEND          CHECK FOR END OF INPUT     M4789
         SPACE
*/*NOENTRNM: D (YES,,NO,REGISTER) FIRST CHARACTER IS LETTER OR NATIONAL
*/* CHAR */
NOENTRNM DS    0H                      * * * *
         LA    CHECK,HEX+OLETTER+NATL  IS FIRST CHARACTER A LETTER
*                                         OR NATIONAL CHARACTER
         L     R15,TYPETSTP            GET SYNTAX CHECKING RTN.
         BAL   LINK1,LINK1OUT          * * * *
         B     REGISTER                NO, BRANCH
*/* D (YES,ALPHAMER,NO,) PROCESSING AN ENTRYNAME */
         TM    PFLAGS2,ENTRYBIT        PROCESSING AN ENTRYNAME
         BO    ALPHAMER                YES, BRANCH
*/* P TURN ON FLTERBIT */
         OI    PFLAGS2,FLTERBIT        TURN BIT ON
         LA    CHECK,HEX               HEX CHARACTER
*/* S TYPETEST: CHECK FOR HEX CHARACTER */
         L     R15,TYPETSTP            GET SYNTAX CHECKING RTN.
         BAL   LINK1,LINK1OUT          * * * *
*/* D (YES,REGLOOP,NO,) CHARACTER IS HEX */
         B     ALPHAMER                NO, BRANCH
         B     REGLOOP                 BRANCH
         SPACE
*/*ALPHAMER: S TYPETEST: CHECK FOR ALPHAMERIC OR NATIONAL CHARACTER */
ALPHAMER DS    0H                      * * * *
         LA    CHECK,HEX+OLETTER+NATL+NUMBER  ALPHAMERIC OR NATIONAL
*                                         CHARACTER
         L     R15,TYPETSTP            GET SYNTAX CHECKING RTN.
         BAL   LINK1,LINK1OUT          * * * *
*/* D (YES,,NO,BREAK) CHARACTER IS ALPHAMERIC OR NATIONAL */
         B     BREAK                   NO, BRANCH
         SPACE
*/*TALLYCT: P INCREMENT NO. OF LEVELS AND INCREMENT SCAN PTR */
TALLYCT  DS    0H                      * * * *
         LA    COUNTER,ONE(COUNTER)    YES, INCREMENT TALLY BY ONE
         LA    XINPUT,ONE(XINPUT)      INCREMENT SCAN REGISTER
         LR    XINPUTB,XINPUT          SET BACKUP REGISTER
*/* S CHEKCEND: CHECK FOR END OF INPUT */
         BAL   LINK1,CHECKEND          CHECK FOR END OF INPUT     M4789
*/* D (YES,MAXTEST,NO,) PROCESSING A SYMBOLIC ADDRESS */
         TM    DATAFLG,SYMADR          DEFINITELY PROCESSING A
*                                      SYMBOLIC ADDRESS
         BO    MAXTEST                 YES, IS IT VALID
*/* D (YES,,NO,ALPHAMER) NO. OF LEVELS GREATER THAN 8 */
         CH    COUNTER,DEC9            ADDRESS TALLY GREATER THAN 8
         BL    ALPHAMER                NO, BRANCH
*/* D (YES,TURNOFF,NO,) PROCESSING ENTRYNAME */
         TM    PFLAGS2,ENTRYBIT        IS ENTRYNAME BIT ON
         BO    TURNOFF                 YES, ERROR
*/* P TURN ON SYMBOLIC BIT */
         OI    DATAFLG,SYMADR          MUST BE SYMBOLIC
         SPACE
*/*MAXTEST: D (YES,TURNOFF,NO,ALPHAMER) SIZE OF PARAMETER GREATER THAN
*/* 31 */
MAXTEST  DS    0H                      * * * *
         CH    COUNTER,DEC32           TALLY GREATER THAN 31
         BE    TURNOFF                 YES, ERROR
         B     ALPHAMER                NO, SCAN NEXT CHARACTER
         SPACE
*/*BREAK: D (YES,,NO,DILIMITR) CHARACTER IS BREAK CHARACTER */
BREAK    DS    0H                      * * * *
         CLI   ZERO(XINPUT),BKCHAR     BREAK CHARACTER
         BNE   DILIMITR                NO, BRANCH
*/* D (YES,TALLYCT,NO,) PROCESSING SYMBOLIC ADDRESS */
         TM    DATAFLG,SYMADR          DEFINITELY PROCESSING A
*                                      SYMBOLIC ADDRESS
         BO    TALLYCT                 YES, BRANCH
*/* P TURN ON BREAKBIT */
         OI    PFLAGS2,BREAKBIT        TURN BIT ON
*/* D (,TALLYCT) BRANCH */
         B     TALLYCT                 AND BRANCH
         SPACE
*/*DILIMITR: D (YES,SPECIAL,NO,) PROCESSING SYMBOLIC ADDRESS */
DILIMITR DS    0H                      * * * *
         TM    DATAFLG,SYMADR          ALREADY PROCESSING A SYMBOLIC
*                                      ADDRESS
         BO    SPECIAL                 YES, BRANCH
*/* D (YES,FINDOUT,NO,) VALID DELIMITER FOR LOADNAME OR ENTRYNAME */
         CLI   ZERO(XINPUT),PERIOD     VALID DELIMITER FOR LOADNAME
*                                      OR ENTRYNAME
         BE    FINDOUT                 YES, BRANCH
*/* D (YES,,NO,ASBEFORE) PROCESSING ENTRYNAME */
         TM    PFLAGS2,ENTRYBIT        CURRENTLY PROCESSING AN
*                                      ENTRYNAME
         BZ    ASBEFORE                NO, BRANCH
*/* P TURN ON BIT DENOTING ENTRYNAME ADDRESS */
         OI    PFLAGS,PFNEW            TURN ON BIT DENOTING AN
*                                      ENTRYNAME ADDRESS
*/* D (,CHARACBK) BRANCH */
         B     CHARACBK                AND BRANCH
*/*ASBEFORE: P TURN FILTER BIT OFF */
ASBEFORE DS    0H                      * * * *
         NI    PFLAGS2,HFF-FLTERBIT    TURN FILTER BIT OFF
*/* P TURN ON BIT FOR SYMBOLIC ADDRESS */
         MVI   DATAFLG,SYMADR          DENOTE AS SYMBOLIC ADDRESS
*/* D (,SPECIAL) BRANCH */
         B     SPECIAL                 AND BRANCH
         SPACE
*/*FINDOUT: D (YES,CHARACBK,NO,) PROCESSING ENTRYNAME */
FINDOUT  DS    0H                      * * * *
         TM    PFLAGS2,ENTRYBIT        PROCESSING AN ENTRYNAME
         BO    CHARACBK                YES, BRANCH
         SPACE
*/*LOADPARM: P TURN ON LOADNAME BIT */
LOADPARM DS    0H                      * * * *
         OI    PFLAGS2,LOADBIT         INDICATE LOADNAME DATA TO BE
*                                      MOVED
*/* S MOVEIN: PREPARE TO MOVE DATA INTO PDE */
         BAL   LINK2,MOVEIN            BRANCH TO SECTION TO PREPARE
*                                      TO MOVE DATA INTO PDE
*/* D (YES,TURNOFF,NO,) LOADNAME PREVIOUSLY SCANNED */
         TM    DATAFLA1,PL1BIT         WAS A LOADNAME PREVIOUSLY
*                                      SCANNED
         BO    TURNOFF                 YES, BRANCH
*/* P TURN OFF LOADNAME CONTROL BIT */
         NI    PFLAGS2,HFF-LOADBIT     TURN OFF LOADNAME CONTROL BIT
*/* P MOVE DATA INTO PDE */
         MVC   DATAPTR1+ONE(L'DATAPTR1-ONE),PPOINTR+ONE
*                                      MOVE LOADNAME PTR INTO PDE
         MVC   DATALEN1,PLENGTH        MOVE DATA LENGTH
         OI    DATAFLA1,PL1BIT         TURN ON PL1 BIT
         LA    XINPUT,ONE(,XINPUT)     INCREMENT SCAN REGISTER
         LR    XINPUTB,XINPUT          SET BACKUP REGISTER
*/* P ZERO SIZE OF PARAMETER */
         XR    COUNTER,COUNTER         CLEAR TALLY REGISTER
*/* D (,ENTRYNM) PROCESS ENTRYNAME */
         B     ENTRYNM                 GO PROCESS ENTRYNAME
         SPACE
*/*CHARACBK: D (YES,TURNOFF,NO,) BREAKBIT IS ON */
CHARACBK DS    0H                      * * * *
         TM    PFLAGS2,BREAKBIT        IS BREAK CHARACTER BIT ON
         BO    TURNOFF                 YES, ERROR
*/* S MOVEIN: PREPARE TO MOVE DATA INTO PDE */
         BAL   LINK2,MOVEIN            MOVE SCANNED DATA INTO PDE
*/* D (YES,TURNOFF,NO,) ENTRYNAME WAS PREVIOUSLY SCANNED */
         TM    DATAFLA2,PL1BIT         WAS AN ENTRYNAME PREVIOUSLY
*                                      SCANNED
         BO    TURNOFF                 YES, ERROR, BRANCH
*/* P TURN ENTRYNAME CONTROL BIT OFF */
         NI    PFLAGS2,HFF-ENTRYBIT    TURN CONTROL BIT OFF
*/* P MOVE ENTRYNAME DATA INTO PDE */
         MVC   DATAPTR2+ONE(L'DATAPTR2-ONE),PPOINTR+ONE
*                                      MOVE ENTRYNAME DATA INTO PDE
         MVC   DATALEN2,PLENGTH        MOVE DATA LENGTH
*/* P TURN ON PL1 BIT */
         OI    DATAFLA2,PL1BIT         TURN ON PL1 BIT
         LA    XINPUT,ONE(XINPUT)      INCREMENT SCAN REG
         LR    XINPUTB,XINPUT          SET BACKUP REGISTER
*/* D (YES,RANGECK,NO,) SCANNING ENTRYNAME ADDRESS */
         TM    PFLAGS,PFNEW            SCANNING AN ENTRYNAME ADDRESS
         BO    RANGECK                 YES, GO SCAN FOR VALID DELIMITER
         LA    XINPUT,ONE(XINPUT)      TEMPORARILY INCREMENT SCAN
*                                      REGISTER
*                                      SINCE SYMBOLIC AND RELATIVE
*                                      ARE THE ONLY ADDRESSES WHICH MAY
*                                      BE QUALIFIED, THE PERIOD
*                                      FOLLOWING ENTRYNAME MUST BE
*                                      FOLLOWED BY EITHER A PLUS(+)
*                                      SIGN FOR RELATIVE OR A LETTER
*                                      FOR SYMBOLIC
*/* D (YES,REGRESET,NO,) PERIOD FOLLOWED BY A PLUS (+) */
         CLI   ZERO(XINPUT),RELATIVE   PERIOD FOLLOWED BY A PLUS(+)
         BE    REGRESET                YES, BRANCH
*/* S TYPETEST: CHARACTER IS LETTER OR NATIONAL CHAR */
         LA    CHECK,HEX+OLETTER+NATL  FOLLOWED A LETTER OR NATIONAL
*                                         CHARACTER
         L     R15,TYPETSTP            GET SYNTAX CHECKING PTR
         BAL   LINK1,LINK1OUT          * * * *
*/* D (YES,,NO,TURNOFF) VALID CHARACTER */
         B     TURNOFF                 + 0 RETURN - NO, ERROR CONDITION
         SPACE
*/*REGRESET: D (,STARTAGN) BRANCH TO BEGIN SCAN */
REGRESET DS    0H                      * * * *
         BCT   XINPUT,STARTAGN         + 4 RETURN - YES, RESTORE SCAN
*                                      REGISTER TO LAST CHARACTER
*                                      SCANNED AND BRANCH
         SPACE
*/*ADDREPLS: P INDICATE RELATIVE ADDRESS */
ADDREPLS DS    0H                      * * * *
         MVI   DATAFLG,RELADR          INDICATE RELATIVE ADDRESS
         LA    R1,ONE(XINPUT)          BEGINNING OF RELATIVE ADDRESS
         ST    R1,PPOINTR              IS ONE BYTE PAST + SIGN
         SPACE
*/*BUMPCTR: P INCREMENT SCAN POINTER */
BUMPCTR  DS    0H                      * * * *
         LA    XINPUT,ONE(XINPUT)      INCREMENT SCAN REGISTER
         LR    XINPUTB,XINPUT          SET BACKUP REGISTER
*/* S CHECKEND: CHECK FOR END OF INPUT */
         BAL   LINK1,CHECKEND          CHECK FOR END OF INPUT     M4789
*/* S TYPETEST: CHECK FOR HEXADECIMAL CHARACTER */
         LA    CHECK,HEX+NUMBER        HEXADECIMAL CHARACTER
         L     R15,TYPETSTP            GET SYNTAX CHECKING RTN PTR
         BAL   LINK1,LINK1OUT          * * * *
*/* D (YES,,NO,SPECIAL) HEX CHARACTER */
         B     SPECIAL                 NO, BRANCH
*/* P INCREMENT COUNTER FOR SIZE OF PARAMETER */
         LA    COUNTER,ONE(COUNTER)    YES, INCREMENT TALLY BY ONE
*/* D (YES,TURNOFF,NO,) SIZE IS GREATER THAN 6 */
         CH    COUNTER,DEC7            DOES TALLY EQUAL SEVEN
         BE    TURNOFF                 YES, ERROR, MAXIMUM IS 6
*/* D (YES,TURNOFF,NO,) HEX CHARACTER FOLLOWS PERCENT SIGN */
         LTR   LEVELS,LEVELS           IF R3(LEVELS)NOT ZERO, THEN
         BNZ   TURNOFF                 HEXADECIMAL CHARACTER FOLLOWS
*                                      THE PERCENT SIGN
*                                      AND CONSTITUTES AN ERROR
*/* D (YES,TURNOFF,NO,BUMPCTR) PROCESSING ABSOLUTE ADDRESS */
         CLI   DATAFLG,ABSADR          PROCESSING AN ABSOLUTE ADDRESS
*                                                                 M5957
         BE    TURNOFF                 YES, ERROR, HEXADECIMAL    M5957
*                                      CHARACTER FOLLOWS DELIMITER
         B     BUMPCTR                 NO, BRANCH
         SPACE
*/*SPECIAL: D (YES,TURNOFF,NO,) ENTRYBIT IS ON */
SPECIAL  DS    0H                      * * * *
         TM    PFLAGS2,ENTRYBIT        IF 'ENTRYBIT' IS ON WHEN TESTING
         BO    TURNOFF                 FOR LEVELS OF INDIRECT
*                                      ADDRESSING, THE ADDRESS IS NOT
*                                      VALID
*/* D (YES,,NO,GOMOVE) INDIRECT ADDRESSING */
         CLI   ZERO(XINPUT),PERCENT    TEST FOR INDIRECT ADDRESSING
         BNE   GOMOVE                  NO, BRANCH
         SPACE
*/*GENLOOP: P INCREMENT NO. OF LEVELS FOR INDIRECT ADDRESS */
GENLOOP  DS    0H                      * * * *
         LA    LEVELS,ONE(LEVELS)      INCREMENT TALLY OF LEVELS OF
*                                      INDIRECT ADDRESSES
*/* D (YES,TURNOFF,NO,BUMPCTR) LEVELS EQUALS 256 */
         CH    LEVELS,TWO56            DOES TALLY EQUAL 256
         BL    BUMPCTR                 NO, CONTINUE SCANNING
         B     TURNOFF                 YES, ERROR, MAXIMUM IS 255
         SPACE
*/*GOMOVE: D (YES,TURNOFF,NO,) LENGTH OF ADDRESS IS ZERO */
GOMOVE   DS    0H                      * * * *
         LTR   COUNTER,COUNTER         IS LENGTH OF ADDRESS ZERO
         BZ    TURNOFF                 YES, BRANCH, ERROR CONDITION
*/* S MOVEIN: PREPARE TO MOVE ADDRESS INTO TEMPORARY PDE */
         BAL   LINK2,MOVEIN            MOVE SCANNED PORTION OF ADDRESS
*                                      INTO TEMPORARY PDE
*/* D (YES,EXPRESS,NO,RANGECK) ADDRESS EXPRESSION SPECIFIED */
         CLI   ZERO(XINPUT),MORE       TEST FOR ADDRESS EXPRESSION
         BE    EXPRESS                 DENOTED BY A PLUS
         CLI   ZERO(XINPUT),LESS       OR A MINUS
         BNE   RANGECK                 IF NOT, BRANCH
         SPACE
*/*EXPRESS: P MOVE SIGN OF EXPRESSION VALUE TO PDE */
EXPRESS  DS    0H                      * * * *
         MVC   DATASGN(L'DATASGN),ZERO(XINPUT)
*                                      MOVE SIGN OF EXPRESSION VALUE
*                                      TO PDE
*/*RECYCLE: P ZERO SIZE OF PARAMETER AND NUMBER OF LEVELS COUNTERS */
RECYCLE  DS    0H                      * * * *
         XR    COUNTER,COUNTER         A WORK REGISTER TO MAINTAIN A
*                                      TALLY OF SIZE OF EXPRESSION
         XR    LEVELS,LEVELS           A WORK REGISTER TO MAINTAIN A
*                                      TALLY OF THE NUMBER OF LEVELS
*                                      OF INDIRECT ADDRESSES
         LA    R1,ONE(XINPUT)          START OF EXPRESSION IS ONE BYTE
         ST    R1,PPOINTR              PAST PLUS(MINUS)SIGN
*/* P INDICATE ADDRESS EXPRESSION */
         OI    PFLAGS,ADREXP           INDICATE ADDR EXPRESSION   M4789
         SPACE
*/*UPDATE: P INCREMENT SCAN POINTER */
UPDATE   DS    0H                      * * * *
         LA    XINPUT,ONE(XINPUT)      INCREMENT SCAN REGISTER
         LR    XINPUTB,XINPUT          SET BACKUP REGISTER
*/* S CHECKEND: CHECK FOR END OF INPUT */
         BAL   LINK1,CHECKEND          CHECK FOR END OF INPUT     M4789
         SPACE
         LA    CHECK,HEX               HEX CHARACTER
*/* S TYPETEST: CHECK FOR HEX CHARACTER */
         L     R15,TYPETSTP            GET SYNTAX CHECKIN RTN. PTR
         BAL   LINK1,LINK1OUT          * * * *
*/* D (YES,,NO,DECIMAL) CHARACTER IS HEX */
         B     DECIMAL                 NO, BRANCH
*/* P TURN ON HEX BIT */
         OI    PFLAGS,HEXBIT           INDICATE HEX CHARACTER
*/* D (YES,TURNOFF,NO,RAISECTR) HEX CHARACTER IN DECIMAL EXPRESSION */
         TM    PFLAGS,DECBIT           HEX CHARACTER IN DECIMAL
*                                       EXPRESSION
         BO    TURNOFF                 YES,BRANCH
         B     RAISECTR                * * * *
         SPACE
*/*DECIMAL: S TYPETEST: CHECK FOR NUMERIC CHARACTER */
DECIMAL  DS    0H                      * * * *
         LA    CHECK,NUMBER            A NUMERIC CHARACTER
         L     R15,TYPETSTP            GET SYNTAX CHECKING RTN. PTR
         BAL   LINK1,LINK1OUT          * * * *
*/* D (YES,,NO,NTEST) NUMERIC CHARACTER */
         B     NTEST                   NO, BRANCH
         SPACE
*/*RAISECTR: P INCREMENT SIZE OF EXPRESSION */
RAISECTR DS    0H                      * * * *
         LA    COUNTER,ONE(COUNTER)    INCREMENT TALLY BY ONE
*/* D (YES,TURNOFF,NO,UPDATE) EXPRESSION EXCEEDS SIX DIGITS */
         CH    COUNTER,DEC7            DOES EXPRESSION EXCEED SIX
*                                      DIGITS (MAXIMUM)
         BE    TURNOFF                 YES, BRANCH
         B     UPDATE                  OTHERWISE, SCAN NEXT CHARACTER
         SPACE
*/*NTEST: D (YES,TURNOFF,NO,) SIZE OF EXPRESSION IS ZERO */
NTEST    DS    0H                      * * * *
         LTR   COUNTER,COUNTER         IF R2(COUNTER)IS ZERO, THEN
         BZ    TURNOFF                 ADDRESS EXPRESSION IS INVALID
*/* D (YES,HEXBITT,NO,) DECIMAL EXPRESSION SPECIFIED */
         CLI   ZERO(XINPUT),NNN        IS THIS A DECIMAL EXPRESSION
         BE    HEXBITT                 YES, BRANCH
         CLI   ZERO(XINPUT),LOWNNN     LOW 'N' IS VALID
         BE    HEXBITT                 * * * *
*/* D (YES,PERCENTT,NO,) COMPLETED SCAN FOR DECIMAL EXPRESSION */
         TM    PFLAGS,DECBIT           COMPLETED SCAN FOR DECIMAL
*                                      EXPRESSION
         BO    PERCENTT                YES, BRANCH
*/* P INDICATE HEXADECIMAL VALUE */
         OI    PFLAGS,HEXBIT           DENTOE AS HEXADECIMAL VALUE
*/* D (,PERCENTT) CHECK FOR LEVELS OF INDIRECT ADDRESSING */
         B     PERCENTT                BRANCH AND CHECK FOR LEVELS OF
*                                      INDIRECT ADDRESSING
         SPACE
*/*HEXBITT: D (YES,TURNOFF,NO,) DECIMAL EXPRESSION CONTAINS HEX CHAR */
HEXBITT  DS    0H                      * * * *
         TM    PFLAGS,HEXBIT           DOES DECIMAL EXPRESSION CONTAIN
*                                      A HEX CHARACTER
         BO    TURNOFF                 YES EXIT --- BRANCH
         SPACE
*/* D (YES,TURNOFF,NO,) DECIMAL EXPRESSION ALREADY SPECIFIED */
         TM    PFLAGS,DECBIT           DECIMAL ADDRESS EXPRESSION
*                                      ALREADY SPECIFIED
         BO    TURNOFF                 YES, ERROR, BRANCH
*/* P INDICATE DECIMAL EXPRESSION */
         OI    PFLAGS,DECBIT           DENOTE AS DECIMAL ADDRESS
*                                      EXPRESSION
*/* D (,UPDATE) SCAN NEXT CHARACTER */
         B     UPDATE                  AND SCAN NEXT CHARACTER
         SPACE
*/*PERCENTT: D (YES,,NO,ENDPDE) EXPRESSION HAS LEVELS OF INDIRECT
*/*ADDRESSING */
PERCENTT DS    0H                      * * * *
         CLI   ZERO(XINPUT),PERCENT    DOES EXPRESSION CONTAIN LEVELS
*                                      OF INDIRECT ADDRESSING
         BNE   ENDPDE                  NO, BRANCH
*/* P INCREMENT NO. OF LEVELS OF INDIRECT ADDRESSING */
         LA    LEVELS,ONE(LEVELS)      INCREMENT TALLY OF LEVELS OF
*                                      INDIRECT ADDRESSES
*/* D (YES,TURNOFF,NO,) LEVELS EQUALS 256 */
         CH    LEVELS,TWO56            DOES TALLY EQUAL 256
         BNL   TURNOFF                 YES, ERROR, MAXIMUM IS 255
*/* P INCREMENT SCAN POINTER */
         LA    XINPUT,ONE(XINPUT)      INCREMENT SCAN POINTER
         LR    XINPUTB,XINPUT          SET BACKUP REGISTER
*/* S CHECKEND: CHECK FOR END OF INPUT */
         BAL   LINK1,CHECKEND          CHECK FOR END OF INPUT     M4789
*/* D (,PERCENTT) LOOK FOR ANOTHER LEVEL */
         B     PERCENTT                CHECK FOR ANOTHER LEVEL
         SPACE
*/*ENDPDE: P INDICATE ADDR EXPRESSION COMPLETE */
ENDPDE   DS    0H                      * * * *
         NI    PFLAGS,HFF-ADREXP       ADDR EXPRESSION COMPLETE   M4789
         L     TINYPDE,SPLNGTH         SPECIFY SUBPOOL AND AMOUNT OF
*                                      CORE NEEDED FOR EXPRESSION VALUE
*                                      PDE AND CLEAR IT
*/* S STALOC: GET CORE NEEDED FOR EXPRESSION VALUE PDE */
         L     R15,STALOCP             GET STORAGE ALLOCATION RTN.
         BAL   LINK2,LINK2OUT          * * * *
*/* P DENOTE AS LAST IN CHAIN */
         MVI   ADDRPTR(TINYPDE),HFF    DENOTE AS LAST IN CHAIN
*/* D (YES,,NO,SEARCH) JUST SCANNED FIRST EXPRESSION */
         CLI   DATAEXP,HFF             JUST SCANNED FIRST EXPRESSION
         BNE   SEARCH                  NO, BRANCH
*/* P SET PTR TO FIRST EXPRESSION VALUE PDE */
         ST    TINYPDE,DATAEXP         INITIALIZE POINTER TO 1ST
*                                      EXPRESSION VALUE PDE
*/* D (,TRANSLAT) BRANCH */
         B     TRANSLAT                AND BRANCH
         SPACE
*/*SEARCH: P GET PTR TO FIRST EXP VALUE PDE FROM ORIGINAL PDE */
SEARCH   DS    0H                      * * * *
         L     LOCATPDE,DATAEXP        OBTAIN PTR TO FIRST EXPRESSION
*                                      VALUE PDE FROM ORIGINAL PDE
*/* D (YES,LASTPTR,NO,) LAST PDE IN CHAIN */
         CLI   ADDRPTR(LOCATPDE),HFF   LAST PDE IN CHAIN
         BE    LASTPTR                 YES, BRANCH
         SPACE
*/*CYCLE: P GET PTR TO NEXT PDE */
CYCLE    DS    0H                      * * * *
         L     LOCATPDE,ADDRPTR(LOCATPDE)
*                                      LOCATE POINTER TO NEXT PDE
*/* D (YES,,NO,CYCLE) LAST PDE IN CHAIN */
         CLI   ADDRPTR(LOCATPDE),HFF   LAST
         BNE   CYCLE                   NO, BRANCH
         SPACE
*/*LASTPTR: P STORE PTR TO NEWEST PDE */
LASTPTR  DS    0H                      * * * *
         ST    TINYPDE,ADDRPTR(LOCATPDE)
*                                      STORE PTR TO NEWEST PDE
         SPACE
*/*TRANSLAT: P COMPUTE LENGTH OF ADDRESS */
TRANSLAT DS    0H                      * * * *
         BCTR  XINPUT,ZERO             BACKUP SCAN AGAIN
         S     XINPUTB,PPOINTR         COMPUTE LENGTH OF ADDRESS
         SR    XINPUTB,LEVELS          EXPRESSION(EXCLUDING LEVELS OF
*                                      INDIRECT ADDRESSING, IF NONE
*                                      R3(LEVELS)WILL CONTAIN ZEROS)
         TM    PFLAGS,DECBIT           PROCESSING A DECIMAL EXPRESSION
*                                      VALUE
         BZ    ASITWAS                 NO, BRANCH
         BCTR  XINPUTB,ZERO            SUBTRACT ONE TO EXCLUDE THE
*                                      CHARACTER 'N' FROM THE LENGTH
*                                      OF THE DECIMAL EXPRESSION VALUE
         SPACE
*/*ASITWAS: P STORE DATA LENGTH */
ASITWAS  DS    0H                      * * * *
         STH   XINPUTB,PLENGTH         STORE DATA LENGTH
         ST    TINYPDE,TEMPSAVE        TO TEMPORARILY STORE R1(TINYPDE)
*                                      BEFORE LINKING TO TRANSQ
         L     R15,TRANSQP             GET ADDRESS OF TRANSLATE
*                                         ROUTINE
*/* P TRANSLATE TO UPPER CASE */
         BAL   LINK1,LINK1OUT          TRANSLATE TO UPPER CASE
         L     TINYPDE,TEMPSAVE        RELOAD R1(TINYPDE)
*/* P STORE DATA IN PDE */
         MVC   ADDRDATA+ONE(THREE,TINYPDE),PPOINTR+ONE
*                                       MOVE PTR TO ADDRESS STRING
         MVC   ADDRLNTH(TWO,TINYPDE),PLENGTH
*                                      MOVE LENGTH OF ADDRESS STRING
*                                      TO PDE
         STH   LEVELS,ADDRCNT(TINYPDE) STORE NUMBER OF LEVELS OF
*                                      INDIRECT ADDRESSING.  IF NONE,
*                                      THEN R3(LEVELS)WILL BE ZERO
*                                                                 M4789
*/* D (YES,,NO,NODESIM) HEX EXPRESSION VALUE */
         TM    PFLAGS,DECBIT           HEXIDECIMAL EXPRESSION VALUE
         BZ    NODESIM                 NO, BRANCH                 M4789
*/* P TURN OFF DECBIT */
         NI    PFLAGS,HFF-DECBIT       TURN BIT OFF               M4789
*/* P INDICATE HEX EXPRESSION IN PDE */
         OI    ADDRFLGS(TINYPDE),DECVALUE                         M4789
*                                      DENOTES A HEXIDECIMAL EXPRESSION
*/* D (,WHATNEXT) BRANCH */
         B     WHATNEXT                * * * *
         SPACE
*/*NODESIM: P TURN OFF HEX BIT */
NODESIM  DS    0H                      * * * *
         NI    PFLAGS,HFF-HEXBIT       TURN BIT OFF               M4789
*/* P INDICATE DEC EXPRESSION IN PDE */
         OI    ADDRFLGS(TINYPDE),HEXVALUE                         M4789
*                                      DENOTES A DECIMAL EXPRESSION
         SPACE
*/*WHATNEXT: P INCREMENT SCAN POINTER */
WHATNEXT DS    0H                      * * * *
         LA    XINPUT,ONE(,XINPUT)     INCREMENT SCAN REGISTER
         LR    XINPUTB,XINPUT          SET BACKUP REGISTER
*/* P CHECK FOR RANGE ON ENDINPUT TEST */
         OI    PFLAGS4,CKRANGE         CHECK FOR RNGE ON ENDINPUT M4789
*/* S CHECKEND: CHECK FOR END OF INPUT */
         BAL   LINK1,CHECKEND          CHECK FOR END OF INPUT     M4789
*/* P TURN OFF BIT FOR RANGE CHECK */
         NI    PFLAGS4,HFF-CKRANGE     ENDINPUT NOT FOUND         M4789
*/* D (YES,ADDEXP,NO,RANGECK) ANOTHER RELATIVE EXP */
         CLI   ZERO(XINPUT),MORE       TEST FOR ANOTHER EXPRESSION (+)
         BE    ADDEXP                  YES, BRANCH
         CLI   ZERO(XINPUT),LESS       (-)
         BNE   RANGECK                 NO, BRANCH
         SPACE
*/*ADDEXP: P MOVE SIGN OF NEXT EXP VALUE INTO PDE OF PREVIOUS EXP */
ADDEXP   DS    0H                      * * * *
         MVC   ADDRSIGN(ONE,TINYPDE),ZERO(XINPUT)
*                                      MOVE SIGN OF NEXT EXPRESSION
*                                      VALUE INTO PDE OF PREVIOUS
*                                      EXPRESSION
*/* D (,RECYCLE) BRANCH */
         B     RECYCLE                 * * * *
         SPACE
*/*RANGECK: P TURN OFF BIT FOR RANGE CHECK */
RANGECK  DS    0H                      * * * *
         NI    PFLAGS4,HFF-CKRANGE     ENDINPUT HAS BEEN FOUND    M4789
*/* S RANGE: CHECK FOR POSSIBLE RANGE */
         L     R15,RANGEP              GET SYNTAX CHECKER PTR.
         BAL   LINK1,LINK1OUT          PROCESS POSSIBLE RANGE
*/* D (YES,EXITPREP,NO,) RANGE SPECIFIED */
         B     ENDBUFFR                NO, BRANCH
         B     EXITPREP                YES, FIRST VALUE OF RANGE
*                                      PARAMETER DETECTED
*/*ENDBUFFR: D (YES,,NO,NOTEND) REACHED END OF INPUT */
ENDBUFFR DS    0H                      * * * *
         C     XINPUT,ENDINPUT         END OF BUFFER
*                                      AN END OF BUFFER CONDITION IS
*                                      CONSIDERED EQUIVALENT TO A
*                                      VALID DELIMITER
         BL    NOTEND                  NO, CONTINUE
         SPACE
*/* P SET END OF FILE INDICATOR */
         OI    PFLAGS,PFENDF           YES, SET END-OF-FILE INDICATOR
*                                         SO CURRENT STATUS OF SCAN
*                                         WILL NOT BE SAVED BEFORE
*                                         PROMPT
*/* D (,EXITPREP) BRANCH TO ADDRESS EXIT */
         B     EXITPREP                BRANCH TO ADDRESS EXIT
         SPACE
*/*NOTEND: S TYPETEST: CHECK FOR DELIMITER CHARACTER */
NOTEND   DS    0H                      * * * *
         SPACE
         LA    CHECK,DLIMREQD          DELIMITER CHARACTER        M3098
         L     R15,TYPETSTP            GET SYNTAX CHECKER PTR.
         BAL   LINK1,LINK1OUT          * * * *
         SPACE
*/* D (YES,EXITPREP,NO,PAREN) VALID DELIMITER */
         B     PAREN                   +0 RETURN - NON-DELIMITER
         SPACE
         B     EXITPREP                +4 RETURN - DELIMITER
         SPACE
*/*PAREN: D (YES,,NO,TURNOFF) DELIMITER FOR LIST */
PAREN    DS    0H                      * * * *
         CLI   ZERO(XINPUT),RIGHTPRN   LIST DELIMITER
         BE    EXITPREP                 NO, BRANCH(NO REMAINING VALID
*                                      DELIMITER)                Y02666
*                                                                YM4738
         LA    R1,ONE(XINPUT)          GET NEXT CHARACTER PTR.   Y02666
         C     R1,ENDINPUT             PAST END OF BUFFER?       Y02666
         BC    CC10,TURNOFF            YES, INVALID CHARACTER     M4540
         CLC   ZERO(TWO,XINPUT),SLASHAST  COMMENT DELIMITER?     Y02666
         BNE   TURNOFF                 NO, INVALID CHARACTER     Y02666
*/*EXITPREP: D (YES,,NO,NORANGE) COMPLETED SCAN FOR FIRST VALUE OF
*/*RANGE */
EXITPREP DS    0H                      * * * *
         TM    PFLAGS2,RNGEVAL1        JUST COMPLETED SCAN FOR FIRST
*                                      VALUE OF RANGE PARAMETER
         BZ    NORANGE                 NO, BRANCH AND EXIT
*/* P POINT TO BEGINNING OF SECOND VALUE OF RANGE */
         LA    LINK2,RANGENTR          INITILAIZE LINK2(R8) TO POINT
*                                      TO BEGINNING OF SCAN OF SECOND
*                                      VALUE OF RANGE ADDRESS
         SPACE
*/*NORANGE: D (YES,,NO,ADREXIT) ENTRYNAME ADDRESS BIT ON */
NORANGE  DS    0H                      * * * *
         TM    PFLAGS,PFNEW            ENTRYNAME ADDRESS CONTROL BIT ON
         BZ    ADREXIT                 NO, BRANCH
*/* P TURN BIT OFF */
         NI    PFLAGS,HFF-PFNEW        TURN BIT OFF
*/* D (YES,,NO,ADREXIT) PROCESSING A NON-QUALIFYING ENTRYNAME */
         TM    DATAFLA3,PL1BIT         PROCESSING A NON-QUALIFYING
*                                      ENTRYNAME
         BO    ADREXIT                 NO, BRANCH
*/* P INDICATE AS NON-QUALIFYING ENTRYNAME */
         MVI   DATAFLG,ENTRYNAM        DENOTE AS NON-QUALIFYING
*                                      ENTRYNAME(OPTIONALLY PRECEDED
*                                      BY LOADNAME)
*/*ADREXIT: P DECREMENT INPUT POINTER FOR EXIT */
ADREXIT  DS    0H                      * * * *
         BCTR  XINPUT,ZERO             DECREMENT INPUT POINTER FOR
*                                         NORMAL EXIT
         SPACE
*/*ADREXIT1: P MOVE 9 WORDS OF DATA TO PDE */
ADREXIT1 DS    0H                      * * * *
         LA    R1,THIRTY5              HAVE EXIT ROUTINE MOVE 9 WORDS
*                                         OF DATA TO PDE
*/* D (,POSITX) EXIT */
         L     R15,POSITXP             GET EXIT RTN PTR
         B     LINK2OUT                EXIT
         SPACE
*/*REGISTER: D (YES,TURNOFF,NO,) REGISTER ADDRESS PRECEDED BY A
*/*QUALIFIER */
REGISTER DS    0H                      * * * *
         TM    PFLAGS2,ENTRYBIT        A REGISTER ADDRESS PRECEDED
         BO    TURNOFF                 BY A QUALIFIER IS INVALID
         TM    DATAFLA2,PL1BIT         THESE INSTRUCTIONS WILL DETECT
         BO    TURNOFF                 SUCH INVALID ADDRESSES
         SPACE
*/* D (YES,COMMON,NO,MAYBE1) CHARACTER IS 0,2,4,6 */
         CLI   ZERO(XINPUT),EBCDIC0    IF FIRST CHARACTER IS 0,2,4,6
         BE    COMMON                  THEN ADDRESS MAY BE FLOATING
*                                      POINT OR GENERAL REGISTER TYPE
*                                      ADDRESS
         CLI   ZERO(XINPUT),EBCDIC2    * * * *
         BE    COMMON                  * * * *
         CLI   ZERO(XINPUT),EBCDIC4    * * * *
         BE    COMMON                  * * * *
         CLI   ZERO(XINPUT),EBCDIC6    * * * *
         BNE   MAYBE1                  TEST IF FIRST CHARACTER IS A
*                                      ONE, HENCE A GENERAL REGISTER
         SPACE
*/*COMMON: P INCREMENT SIZE COUNTER AND SCAN POINTER */
COMMON   DS    0H                      * * * *
*                                      FIRST CHARACTER IS 0,2,4,OR 6
         LA    COUNTER,ONE(COUNTER)    INCREMENT TALLY BY ONE
         LA    XINPUT,ONE(XINPUT)      INCREMENT SCAN REGISTER
         LR    XINPUTB,XINPUT          SET BACKUP REGISTER
*/* S CHECKEND: CHECK FOR END OF INPUT */
         BAL   LINK1,CHECKEND          CHECK FOR END OF INPUT     M4789
*/* D (YES,DOUBLE,NO,SINGLE) DOUBLE PRECISION SPECIFIED */
         CLI   ZERO(XINPUT),D          DOUBLE PRECISION
         BE    DOUBLE                  YES, BRANCH
         CLI   ZERO(XINPUT),LOWD       LOWER CASE 'D' IS VALID
         BNE   SINGLE                  * * * *
         SPACE
*/*DOUBLE: P INDICATE DOUBLE PRECISION FLOATING POINT ADDR */
DOUBLE   DS    0H                      * * * *
         MVI   DATAFLG,DPFPR           DENOTE TYPE OF ADDRESS
*                                      DOUBLE PRECISION FLOATING POINT
*/*REPEAT: D (YES,MAYBE1,NO,) NEXT CHARACTER IS PERIOD (ABS. ADDR) */
REPEAT   DS    0H                      * * * *
         CLI   ONE(XINPUT),PERIOD      IS THE NEXT CHARACTER A PERIOD
*                                         DENOTING A ABSOLUTE ADDRESS
*                                         OF THE TYPE -- 6D., 4E., ETC.
         BE    MAYBE1                  IF YES BRANCH TO SAME LOCATION
*                                         AS IF NOT FLOATING POINT REG
         SPACE
*/* P INCREMENT SCAN PTR PAST FLOATING POINT CHAR (D OR E) */
         LA    XINPUT,ONE(XINPUT)      INCREMENT POINTER PAST FLOATING
*                                         POINT DESIGNATION --- D OR E
*/* S CHECKEND: CHECK FOR END OF INPUT */
         BAL   LINK1,CHECKEND          CHECK FOR END OF INPUT     M4789
*/* S TYPETEST: CHECK FOR ZERO THROUGH F */
         LA    CHECK,HEX+NUMBER        HAVE ZERO THROUGH F DIGITS
*                                         CHECKED FOR
         L     R15,TYPETSTP            GET SYNTAX CHECKER PTR.
         BAL   LINK1,LINK1OUT          TEST THE CHARACTER
*
*/* D (YES,,NO,NOTABS) ABSOLUTE ADDRESS */
         B     NOTABS                  NOT ABSOLUTE ADDRESS
*
*/* P ZERO SIZE COUNTER */
         XR    COUNTER,COUNTER         RESET COUNTER
*/* P BACK UP TO BEFORE D OR E */
         BCTR  XINPUT,ZERO             BACK UP XINPUT TO THE NUMBER
         BCTR  XINPUT,ZERO                BEFORE THE D OR E
         LR    XINPUTB,XINPUT          RESET BACKUP REGISTER
*/* D (YES,TURNOFF,NO,MAYBE1) REGISTER FORM OF ADDRESS */
         TM    DATAFLG,REG             IF REG FORM OF ADDRESS FOUND AT
*                                        THIS POINT AND IS OF THE FORM
*                                        2R13 OR 13R14 IT IS INVALID
*                                        AND NOT ABSOLUTE
         BNZ   TURNOFF                 PROCESS INVALID ADDRESS
         B     MAYBE1                  BRANCH TO PROCESS ABSOLUTE
*                                         ADDRESS
         SPACE
*/*NOTABS: S MOVEIN: PREPARE TO MOVE DATA INTO PDE */
NOTABS   DS    0H                      * * * *
         BCTR  XINPUT,ZERO             ADJUST FOR PREVIOUS INCREMENT
         BAL   LINK2,MOVEIN            HAVE DATA MOVED INTO PDE
         LA    XINPUT,ONE(XINPUT)      INCREMENT SCAN REGISTER
         LR    XINPUTB,XINPUT          SET BACKUP REGISTER
*/* D (,RANGECK) LOOK FOR RANGE PARAMETER */
         B     RANGECK                 SCAN FOR RANGE PARAMETER
         SPACE
*/*SINGLE: D (YES,ONLYONE,NO,GENERAL) SINGLE PRECISION SPECIFIED */
SINGLE   DS    0H                      * * * *
         CLI   ZERO(XINPUT),E          SINGLE PRECISION
         BE    ONLYONE                 YES, BRANCH
         CLI   ZERO(XINPUT),LOWE       LOWER CASE 'E' IS VALID
         BNE   GENERAL                 * * * *
         SPACE
*/*ONLYONE: P INDICATE SINGLE PRECISION FLOATING POINT ADDR */
ONLYONE  DS    0H                      * * * *
         MVI   DATAFLG,SPFPR           INDICATE TYPE OF ADDRESS
*                                      SINGLE PRECISION FLOATING POINT
*/* D (,REPEAT) BRANCH */
         B     REPEAT                  AND BRANCH
         SPACE
*/*GENERAL: D (YES,GENREG,NO,NOREG) GENERAL REGISTER SPECIFIED */
GENERAL  DS    0H                      * * * *
         CLI   ZERO(XINPUT),R          GENERAL REGISTER
         BE    GENREG                  YES, BRANCH
         CLI   ZERO(XINPUT),LOWR       LOWER CASE 'R' IS VALID
         BNE   NOREG                   NOT A GENERAL REGISTER, BRANCH
*/*GENREG: P INDICATE GENERAL REGISTER ADDRESS */
GENREG   DS    0H                      * * * *
         MVI   DATAFLG,REG             INDICATE TYPE OF ADDRESS
*                                      GENERAL REGISTER
*                                      UNIQUE FOR ADDRESS '1R'
*/* P TURN OFF TWORBIT */
         NI    PFLAGS3,HFF-TWORBIT     TWORBIT IS TURNED OFF
*                                         BEFORE EXITING
         LA    XINPUT,ONE(XINPUT)      INCREMENT SCAN REGISTER
*/* S CHECKEND: CHECK FOR END OF INPUT */
         BAL   LINK1,CHECKEND          CHECK FOR END OF INPUT     M4789
*/* D (YES,GENLOOP,NO,) TEST FOR INDIRECT ADDRESSING */
         CLI   ZERO(XINPUT),PERCENT    TEST FOR INDIRECT ADDRESSING
         BE    GENLOOP                 YES, BRANCH
         SPACE
         BCTR  XINPUT,ZERO             BACKUP SCAN AGAIN
         LR    XINPUTB,XINPUT          SET BACKUP REGISTER
*/* D (,REPEAT) BRANCH */
         B     REPEAT                  AND BRANCH
         SPACE
*/*MAYBE1: D (YES,,NO,DECIMALL) FIRST CHARACTER A ONE */
MAYBE1   DS    0H                      * * * *
         CLI   ZERO(XINPUT),EBCDIC1    * * * *
         BNE   DECIMALL                BRANCH, FIRST CHARACTER NOT
*                                      A ONE
*/* P TURN ON TWO CONTROL BITS USED FOR GEN. REGISTER SCAN */
         OI    PFLAGS3,ONERBIT+TWORBIT TURN ON CONTROL BITS USED
*                                      DURING SCANNING OF POSSIBLE
*                                      GENERAL REGISTER ADDRESS
*/*REGLOOP: P INCREMENT SIZE COUNTER BY ONE */
REGLOOP  DS    0H                      * * * *
         LA    COUNTER,ONE(COUNTER)    INCREMENT TALLY BY ONE
         LA    XINPUT,ONE(XINPUT)      INCREMENT SCAN REGISTER
         LR    XINPUTB,XINPUT          SET BACKUP REGISTER
*/* S CHECKEND: CHECK FOR END OF INPUT */
         BAL   LINK1,CHECKEND          CHECK FOR END OF INPUT     M4789
         SPACE
*/* D (YES,,NO,REGBITT) CONTROL BIT FOR REGISTER SCAN IS ON */
         TM    PFLAGS3,ONERBIT         IS CONTROL BIT FOR REGISTER
*                                      PROCESSING ON
         BZ    REGBITT                 NO, BRANCH
*/* P TURN OFF CONTROL BIT */
         NI    PFLAGS3,HFF-ONERBIT     YES, CLEAR BIT
*/* D (,EXCEED) BRANCH */
         B     EXCEED                  AND BRANCH
         SPACE
*/*REGBITT: D (YES,,NO,VARYMAX) REGISTER CONTROL BIT ON */
REGBITT  DS    0H                      * * * *
         TM    PFLAGS2,REGBIT          REGISTER CONTROL BIT ON
         BZ    VARYMAX                 NO, BRANCH
*/* P TURN OFF CONTROL BIT */
         NI    PFLAGS2,HFF-REGBIT      CLEAR BIT
         SPACE
*/*EXCEED: D (YES,TURNOFF,NO,) PARAMETER SIZE GREATER THAN 2 (REG.) */
EXCEED   DS    0H                      * * * *
         CH    COUNTER,H3              IS TALLY FOR REGISTER SCAN
*                                      GREATER THAN TWO
         BNL   TURNOFF                 REGISTER ADDRESS PARAMETER
*                                      TOO LARGE
         SPACE
*/* D (YES,GENREG,NO,) GENERAL REGISTER ADDRESS */
         CLI   ZERO(XINPUT),R          GENERAL REGISTER ADDRESS
         BE    GENREG                  YES, BRANCH TO RTN PROCESSING
*                                      A GENERAL REGISTER PARAMETER
         CLI   ZERO(XINPUT),LOWR       LOWER CASE 'R' IS VALID
         BE    GENREG                  * * * *
         SPACE
*/*VARYMAX: D (YES,,NO,MAYBEREG) SIZE COUNTER IS EQUAL TO TWO */
VARYMAX  DS    0H                      * * * *
         LA    R15,TWO                 LOAD COMPRAND
         CR    COUNTER,R15             IF COUNTER IS EQUAL TO TWO
*                                         PARAMETER CANNOT BE OF GEN-
*                                         ERAL REG TYPE.FOR EX.--1AB30
*                                         WOULD PASS AS A GENERAL REG
*                                         TYPE IF NOT FOR THESE INSTRS
         BNE   MAYBEREG                 IF NOT TWO BRANCH
         SPACE
*/* P TURN OFF REGISTER CONTROL BIT */
         NI    PFLAGS3,HFF-TWORBIT     TURN OFF CONTROL FLAG SO LATER
*                                         TEST IN 'NOREG' TAKES BZ
         SPACE
*/*MAYBEREG: D (YES,,NO,NOREG) SIZE GREATER THAN MAX FOR ABS. ADDR  */
MAYBEREG DS    0H                      * * *
         CH    COUNTER,DEC7            IS TALLY GREATER THAN MAXIMUM
*                                      FOR AN ABSOLUTE ADDRESS
         BL    NOREG                   NO, BRANCH
*/* D (YES,,NO,TURNOFF) SCANNING SYMBOLIC ADDRESS */
         TM    PFLAGS2,FLTERBIT        ARE WE POSSIBLY SCANNING A
*                                      SYMBOLIC ADDRESS
         BZ    TURNOFF                 IF NOT SCANNING A SYMBOLIC
*                                      ADDRESS PARAMETER, THEN
*                                      PARAMETER TOO LONG
*/* D (YES,,NO,NOREG) SIZE GREATER THAN MAX FOR LOADNAME */
         CH    COUNTER,DEC9            IS TALLY GREATER THAN MAXIMUM
*                                      FOR A LOADNAME PARAMETER
         BL    NOREG                   NO, BRANCH
*/* P CLEAR BIT FOR SYMBOLIC ADDRESS */
         NI    PFLAGS2,HFF-FLTERBIT    CLEAR BIT
*/* P INDICATE SYMBOLIC ADDRESS */
         MVI   DATAFLG,SYMADR          INDICATE AS SYMBOLIC ADDRESS
*/* D (,ALPHAMER) BRANCH */
         B     ALPHAMER                AND BRANCH
         SPACE
*/*DECIMALL: P TURN ON REGISTER CONTROL BIT */
DECIMALL DS    0H                      * * * *
         OI    PFLAGS2,REGBIT          TURN ON REGISTER CONTROL BIT
         SPACE
*/*NOREG: S TYPETEST: CHECK IF CHARACTER IS A NUMBER */
NOREG    DS    0H                      * * * *
         LA    CHECK,NUMBER            IS CHARACTER A NUMBER
         L     R15,TYPETSTP            GET SYNTAX CHECKER PTR.
         BAL   LINK1,LINK1OUT         * * * *
         SPACE
*/* D (YES,,NO,NODEC) CHARACTER IS NUMERIC */
         B     NODEC                   +0 RETURN - NON-NUMERIC
         SPACE
*/* D (YES,,NO,REGLOOP) CONTROL BIT FOR REGISTER PROCESSING IS ON */
         TM    PFLAGS3,TWORBIT         +4 RETURN - NUMERIC
         BZ    REGLOOP                 BRANCH IF CONTROL BIT FOR
*                                      REGISTER PROCESSING IS NOT ON
*/* P TURN OFF CONTROL BIT */
         NI    PFLAGS3,HFF-TWORBIT     TURN OFF CONTROL BIT
*                                      TEST IF SECOND NUMERIC CHARACTER
*                                      IS BETWEEN 0-5
*                                      THEREFORE, POSSIBLY A GENERAL
*                                      REGISTER
*/* D (YES,TURNON,NO,REGLOOP) SECOND NUMERIC CHAR IS BETWEEN 0-5 */
         CLI   ZERO(XINPUT),EBCDIC0    * * * *
         BE    TURNON                  YES, BRANCH
         SPACE
         CLI   ZERO(XINPUT),EBCDIC1    * * * *
         BE    TURNON                  YES, BRANCH
         CLI   ZERO(XINPUT),EBCDIC2    * * * *
         BE    TURNON                  YES, BRANCH
         SPACE
         CLI   ZERO(XINPUT),EBCDIC3    * * * *
         BE    TURNON                  YES, BRANCH
         SPACE
         CLI   ZERO(XINPUT),EBCDIC4    * * * *
         BE    TURNON                  YES, BRANCH
         SPACE
         CLI   ZERO(XINPUT),EBCDIC5    * * * *
         BNE   REGLOOP                 * * * *
         SPACE
*/*TURNON: P TURN ON REGISTER CONTROL BIT */
TURNON   DS    0H                      * * * *
         OI    PFLAGS3,ONERBIT         TURN REGISTER CONTROL BIT ON
*/* D (,REGLOOP) SCAN NEXT CHARACTER */
         B     REGLOOP                 BRANCH TO SCAN NEXT CHARACTER
         SPACE
*/*NODEC: P TURN REGISTER CONTROL BIT OFF */
NODEC    DS    0H                      * * * *
         NI    PFLAGS2,HFF-REGBIT      TURN CONTROL BIT OFF
         LA    CHECK,HEX               HEX CHARACTER
*/* S TYPETEST: CHECK FOR HEX CHARACTER */
         L     R15,TYPETSTP            GET SYNTAX CHECKER PTR.
         BAL   LINK1,LINK1OUT         * * * *
*/* D (YES,REGLOOP,NO,WHATISIT) HEX CHARACTER */
         B     WHATISIT                NO, BRANCH
         B     REGLOOP                 YES, SCAN NEXT CHARACTER
         SPACE
*/*WHATISIT: D (YES,WHICHONE,NO,) DELIMITER FOR ABS. OR LOADNM ADDR */
WHATISIT DS    0H                      * * * *
         CLI   ZERO(XINPUT),PERIOD     VALID DELIMITER FOR ABSOLUTE
*                                      OR LOADNAME PARAMETER
         BE    WHICHONE                YES, BRANCH
*/* D (YES,ALPHAMER,NO,CKCTRR) VALID SYMBOLIC PARAMETER */
         TM    PFLAGS2,FLTERBIT        IS FILTER BIT ON
         BZ    CKCTRR                  NO, FIRST CHARACTER NOT A
*                                      LETTER, THEREFORE NOT A VALID
*                                      SYMBOLIC PARAMETER
         B     ALPHAMER                AND BRANCH
         SPACE
*/*CKCTRR: D (YES,ADDREPRQ,NO,TURNOFF) SIZE COUNTER ZERO */
CKCTRR   DS    0H                      * * * *
         LTR   COUNTER,COUNTER         IS TALLY COUNT ZERO
         BNZ   TURNOFF                 NO, ERROR, BRANCH
         BCT   XINPUT,ADDREPRQ         YES, THEN FIRST CHARACTER OF
*                                      BUFFER NOT VALID - BACKUP BUFFER
         SPACE
*/*WHICHONE: P INCREMENT SCAN POINTER */
WHICHONE DS    0H                      * * * *
         LA    XINPUT,ONE(XINPUT)      TEMPORARILY INCREMENT SCAN REG
*/* D (YES,ABSADDR,NO,) REACHED END OF INPUT */
*/* S TYPETEST: CHECK IF CHARACTER FOLLOWING DELIMITER IS A LETTER */
         C     XINPUT,ENDINPUT         ENDINPUT BEEN REACHED      M4789
         BNL   ABSADDR                 YES, ABSOLUTE ADDRESS      M4789
         LA    CHECK,HEX+OLETTER+NATL  IS ALPHABETIC OR NATIONAL
*                                         CHARACTER FOLLOWING
         L     R15,TYPETSTP            GET SYNTAX CHECKER PTR.
         BAL   LINK1,LINK1OUT          DELIMITER A LETTER
         B     ABSADDR                 NO, PARAMETER IS ABSOLUTE
*                                      YES, PARAMETER IS LOADNAME
*/* P RESTORE SCAN POINTER */
         BCTR  XINPUT,ZERO             RESTORE PTR TO LAST CHARACTER
*                                      SCANNNED
*/* P TURN OFF SYMBOLIC CONTORL BIT */
         NI    PFLAGS2,HFF-FLTERBIT    YES, TURN IT OFF
*/* D (,LOADPARM) PROCESS LOADNAME */
         B     LOADPARM                * * * *
         SPACE
*/*ABSADDR: P RESTORE SCAN POINTER */
ABSADDR  DS    0H                      * * * *
         BCTR  XINPUT,ZERO             RESTORE PTR TO LAST CHARACTER
*                                      SCANNNED
*/* P INDICATE ABSOLUTE ADDRESS */
         MVI   DATAFLG,ABSADR          INDICATE AS ABSOLUTE ADDRESS
*/* D (YES,TURNOFF,NO,) ABSOLUTE ADDRESS HAS QUALIFICATION */
         TM    DATAFLA2,PL1BIT         IT IS NOT VALID FOR AN ABSOLUTE
         BO    TURNOFF                 ADDRESS TO HAVE QUALIFICATION
*/* P TURN SYMBOLIC CONTROL BIT OFF */
         NI    PFLAGS2,HFF-FLTERBIT    TURN CONTROL BIT OFF
*/* D (YES,BUMPCTR,NO,) ENDINPUT HAS BEEN REACHED */
         TM    PFLAGS,PFENDF           HAS ENDINPUT BEEN REACHED  M4789
         BNO   BUMPCTR                 YES, MOVE DATA IN PDE      M4789
         CLI   ZERO(XINPUT),PERIOD                               A46773
         BE    BYONE                   GO INCREMENT              Y00972
         CLI   ZERO(XINPUT),PERCENT    IS IT A PERCENT SIGN?     Y00972
         BE    BYONE                   YES, GO INCREMENT         Y00972
         B     TURNOFF                 NOT KNOWN, SIGNAL ERROR   Y00972
*/* D (,GOMOVE) INCREMENT SCAN PTR AND BRANCH */
BYONE    DS    0H                                                Y00972
         LA    XINPUT,ONE(XINPUT)      INCREMENT SCAN POINTER     M4789
         B     GOMOVE                  * * * *                   Y00972
         SPACE
*/*ADDREPRQ: S PROMPTQ: CHECK IF PROMPTING IS NECESSARY */
ADDREPRQ DS    0H                      * * * *
         L     R15,PROMPTQP            GET PROMPT RTN PTR
         BAL   LINK1,LINK1OUT          PROMPT IF NECESSARY
*
*/* D (YES,ADDRERSC,NO,ADREXIT1) DATA RETURNED FROM PROMPT */
         B     ADDRERSC                +0 RETURN - DATA TO SCAN
*
         B     ADREXIT1                +4 RETURN - NO DATA PRESENT EXIT
         SPACE
*/*MOVEIN: E PREPARE DATA TO GO INTO PDE */
MOVEIN   DS    0H                      * * * *
         BCTR  XINPUT,ZERO             BACK UP SCAN AGAIN
*/* P COMPUTE LENGTH OF ADDRESS */
         S     XINPUTB,PPOINTR         COMPUTE LENGTH OF ADDRESS
         SR    XINPUTB,LEVELS          EXCLUDING LEVELS OF INDIRECT
*                                      ADDRESSING. IF NONE, R3(LEVELS)
*                                      WILL CONTAIN ZERO
*/* D (YES,ASITIS,NO,) PROCESSING LOADNAME OR ENTRYNAME QUALIFIER */
         TM    PFLAGS2,LOADBIT+ENTRYBIT PROCESSING A LOADNAME QUALIFIER
*                                         OR AN ENTRYNAME QUALIFIER
         BM    ASITIS                  YES, BRANCH
*/* D (YES,LEVELTST,NO,) PROCESSING GENERAL REGISTER ADDRESS */
         TM    DATAFLG,REG             ARE WE PROCESSING A GENERAL
*                                      REGISTER ADDRESS
         BO    LEVELTST                YES, BRANCH
*/* D (YES,SUBTRACT,NO,ASITIS) PROCESSING ABSOLUTE ADDRESS */
         CLI   DATAFLG,ABSADR          PROCESSING AN ABSOLUTE ADDRESS
*                                                                 M5957
         BNE   ASITIS                  NO, BRANCH                 M5957
         B     SUBTRACT                YES
         SPACE
*/*LEVELTST: D (YES,,NO,ASITIS) ANY LEVELS OF INDIRECT ADDRESSES */
LEVELTST DS    0H
         LTR   LEVELS,LEVELS           ANY LEVELS OF INDIRECT
*                                      ADDRESSES SPECIFIED
         BZ    ASITIS                  NO, BRANCH ADDRESS LENGTH OK
         SPACE
*/*SUBTRACT: P EXCLUDE 'R' FROM LENGTH IF REG OR DELIM IF ABS ADDR */
SUBTRACT DS    0H
         BCTR  XINPUTB,ZERO            SUBTRACT ONE TO EXCLUDE THE
*                                      CHARACTER 'R' FROM THE LENGTH
*                                      IF REGISTER ADDRESS OR DELIMITER
*                                      IF  ABSOLUTE ADDRESS
*/*ASITIS: P STORE DATA LENGTH */
ASITIS   EQU   *
         STH   XINPUTB,PLENGTH         STORE DATA LENGTH
         L     R15,TRANSQP             GET ADDRESS OF TRANSLATE
*                                         ROUTINE
*/* P TRANSLATE TO UPPER CASE */
         BAL   LINK1,LINK1OUT          TRANSLATE TO UPPER CASE
*/* D (YES,,NO,ABC) PREPARING LOADNAME DATA FOR PDE */
         TM    PFLAGS2,LOADBIT         ARE WE PREPARING TO MOVE
*                                      LOADNAME DATA INTO PDE
*/* R RETURN */
         BCR   CC7,LINK2               IF YES RETURN
         SPACE
*/*ABC: D (YES,,NO,ABCD) PREPARING ENTRYNAME DATA FOR PDE */
         TM    PFLAGS2,ENTRYBIT        ARE WE PREPARING TO MOVE
*                                      ENTRYNAME DATA INTO PDE
*/* R RETURN */
         BCR   CC7,LINK2               IF YES RETURN
         SPACE
*/*ABCD: P MOVE DATA PTR TO TEMPORARY PDE */
         MVC   DATAPTR3+ONE(L'DATAPTR3-ONE),PPOINTR+ONE
*                                      MOVE DATA PTR TO TEMPORARY PDE
*/* P MOVE DATA LENGTH */
         MVC   DATALEN3,PLENGTH        MOVE DATA LENGTH
*/* P TURN ON CONTROL BIT FOR PL1 */
         OI    DATAFLA3,PL1BIT         CONTROL BIT FOR PL1
*/* P STORE NUMBER OF LEVELS OF INDIRECT ADDRESSING */
         STH   LEVELS,DATAICT          STORE NOMBER OF LEVELS OF
*                                      INDIRECT ADDRESSING. IF NONE,
*                                      THEN R3(LEVELS)WILL BE ZERO.
         LA    XINPUT,ONE(,XINPUT)     INCREMENT SCAN REGISTER
*                                      TO LAST CHARACTER SCANNED
         LR    XINPUTB,XINPUT          SET BACKUP REGISTER
*/* R RETURN */
         BR    LINK2                   AND RETURN
         SPACE
*/*TURNOFF: D (,ILLADDR) BRANCH TO ILLADDR RTN */
TURNOFF  DS    0H                      * * * *
         L     R15,ILLADDRP            GET INVALID ADRESS RTN. PTR
         L     R14,ADDRSAVE+EIGHT      RESTORE BASE REGISTER
         BR    R15                     BRANCH TO ILLADDR RTN
         SPACE
* END OF INPUT HAS BEEN REACHED DURNING ADDRESS PARSE. CHECK FLAGS AND*
* BIT SETTINGS TO SEE IF ADDRESS IS CORRECT. IF ADDRESS IS COMPLETE   *
* BRANCH TO END PROCESSING ROUTINE, IF NOT INVALID ADDRESS            *
         SPACE
*/*CHECKEND: E CHECK FOR END OF INPUT */
CHECKEND DS    0H                      * * * *
*/* D (YES,ABCDE,NO,) END OF INPUT */
         C     XINPUT,ENDINPUT         END OF INPUT               M4789
*/* R RETURN AND CONTINUE PROCESSING */
         BL    ZERO(LINK1)             NO, CONTINUE               M4789
         SPACE
*/*ABCDE: D (YES,TURNOFF,NO,) INVALID ADDRESS */
         LTR   COUNTER,COUNTER         YES CHECK SIZE OF ADDRESS  M4789
         BZ    TURNOFF                 ZERO,INVALID ADDRESS       M4789
*                                         A + OR . WAS FOUND OR   M4789
*                                         A LOADNAME. OR ENTRY.   M4789
*                                         OR ADDRESS OF THE FORM  M4789
*                                         7R%+                    M4789
*/* P SET ENDINPUT INDICATOR */
         OI    PFLAGS,PFENDF           SET ENDINPUT INDICATOR     M4789
         SPACE
*/* D (YES,ENDPDE,NO,) PROCESSING EXPRESSION */
         TM    PFLAGS,ADREXP           PROCESSING EXPRESSION      M4789
         BO    ENDPDE                  YES MOVE DATA IN PDE       M4789
*/* D (YES,RANGECK,NO,) WANT TO CHECK FOR RANGE */
         TM    PFLAGS4,CKRANGE         MAKE CHECK FOR RANGE       M4789
         BO    RANGECK                 YES,BRANCH                 M4789
         SPACE
*/* D (YES,NOTABS,NO,) FLAG HAS BEEN SET FOR ANY CORRECT ADDR */
         TM    DATAFLG,REG+RELADR+SYMADR+DPFPR+SPFPR IF THE FLAG  M4789
*                                          HAS BEEN SET FOR A REG M4789
*                                          SYMBOLIC,RELATIVE OR   M4789
*                                          FLOATING POINT REG     M4789
*                                          ADDRESS,THE ADDRESS IS M4789
*                                          CORRECT                M4789
         BNZ   NOTABS                  YES, MOVE DATA IN PDE      M4789
         SPACE
*/* D (YES,DELIMITR,NO,) PROCESSING ENTRYNAME */
         TM    PFLAGS2,ENTRYBIT        PROCESSING ENTRYNAME       M5028
         BO    DILIMITR                YES, MOVE IN PDE           M5028
*/* D (YES,,NO,CHKABS) FLTERBIT ON */
         TM    PFLAGS2,FLTERBIT        FLTERBIT ON                M4789
         BNO   CHKABS                  NO CHECK FOR ABSOLUTE      M4789
*/* P TURN OFF FLTERBIT */
         NI    PFLAGS2,HFF-FLTERBIT    TURN OFF FILTER BIT        M4789
*/* P INDICATE MUST BE SYMBOLIC ADDRESS */
         MVI   DATAFLG,SYMADR          A SYMBOLIC ADDRESS         M4789
*/* D (,NOTABS) MOVE IN PDE */
         B     NOTABS                  INDICATE AND NOVE IN PDE   M4789
         SPACE
*/*CHKABS: D (,WHATISIT) CHECK IF VALID ADDRESS */
CHKABS   DS    0H                      * * * *
         SPACE
         CLI   DATAFLG,ABSADR          ABSOLUTE ADDRESS           M5957
         BE    ABSADDR                                            M5957
*                                                                A46773
         BCT   XINPUT,WHATISIT         SEE IF VALID ADDRESS       M4789
*
         EJECT
***********************************************************************
*                                                               Y30NQJN
***                                                                 ***
**                                                                   **
*                     L  I  N  K  2  O  U  T                          *
*                                                                     *
*   THIS SUBROUTINE SERVES AS A LINKAGE ROUTINE TO THE PARSE MAINLINE *
*   ROUTINE. IT SAVES LINK2, REGISTER 8, WHICH IS THE ADDRESS OF THE  *
*   OF THE NEXT SEQUENTIAL INSTRUCTION. IT THEN PASSES CONTROL TO     *
*   THE APPROPRIATE SUBROUTINE IN THE MAINLINE ROUTINE, ITS POINTER IS*
*   IN REGISTER 15. UPON RETURN FROM  THE MAINLINE ROUTINE, THE       *
*   APPROPRIATE OFFSET FROM THE NEXT INSTRUCTION IS OBTAINED, THIS    *
*   ROUTINE'S BASE REGISTER IS RESTORED, AND CONTROL IS PASSED TO     *
*   CORRECT DISPLACEMENT IN THIS ROUTINE.                             *
*                                                                     *
**                                                                   **
***                                                                 ***
***********************************************************************
LINK2OUT DS    0H                      LINKAGE TO EXTERNAL SUBROUTINES
         ST    LINK2,ADDRSAVE          SAVE LINK2 CONTENTS
LINKOUT  DS    0H                      RESTORE BASE REGISTER
         BALR  LINK2,R15               GO TO SUBROUTINE
         USING *,LINK2                 TEMPORARY ADDRESSABILITY
         B     ADDRCOMP                GO PROCESS ZERO RETURN
         B     ADR4COMP                PROCESS +4 RETURN
         LA    R15,EIGHT               PREPARE FOR +8 RETURN
LINK2IN  DS    0H
         L     LINK2,ADDRSAVE          RESTORE LINKAGE RETURN POINT
         L     R14,ADDRSAVE+FOUR       RESTORE RTN'S BASE REG.
         AR    R15,LINK2               GET TRUE BRANCH ADDRESS
         BR    R15                     RETURN TO CONTINUE
ADR4COMP DS    0H                      +4 RETURN
         LA    R15,FOUR                PREPARE FOR RETURN
         B     LINK2IN                 CONTINUE PROCESS
ADDRCOMP DS    0H
         SR    R15,R15                 SET FOR +0 RETURN
         B     LINK2IN                 PREPARE FOR RETURN
         DROP  LINK2
*
         EJECT
***********************************************************************
*                                                               Y30NQJN
***                                                                 ***
**                                                                   **
*                     L  I  N  K  1  O  U  T                          *
*                                                                     *
*   THIS SUBROUTINE SERVES AS A LINKAGE ROUTINE TO THE PARSE MAINLINE *
*   ROUTINE. IT SAVES LINK1, REGISTER 9, WHICH IS THE ADDRESS OF THE  *
*   OF THE NEXT SEQUENTIAL INSTRUCTION. IT THEN PASSES CONTROL TO     *
*   THE APPROPRIATE SUBROUTINE IN THE MAINLINE ROUTINE, ITS POINTER IS*
*   IN REGISTER 15. UPON RETURN FROM  THE MAINLINE ROUTINE, THE       *
*   APPROPRIATE OFFSET FROM THE NEXT INSTRUCTION IS OBTAINED, THIS    *
*   ROUTINE'S BASE REGISTER IS RESTORED, AND CONTROL IS PASSED TO     *
*   CORRECT DISPLACEMENT IN THIS ROUTINE.                             *
*                                                                     *
**                                                                   **
***                                                                 ***
***********************************************************************
LINK1OUT DS    0H                      LINKAGE TO EXTERNAL SUBROUTINES
         ST    LINK1,ADDRSAVE          SAVE LINK2 CONTENTS
LNKOUT   DS    0H                      RESTORE BASE REGISTER
         BALR  LINK1,R15               GO TO SUBROUTINE
         USING *,LINK1                 TEMPORARY ADDRESSABILITY
         B     ADD1COMP                GO PROCESS ZERO RETURN
         B     ADDR4CMP                PROCESS +4 RETURN
         LA    R15,EIGHT               PREPARE FOR +8 RETURN
LINK1IN  DS    0H
         L     LINK1,ADDRSAVE          RESTORE LINKAGE RETURN POINT
         L     R14,ADDRSAVE+FOUR       RESTORE RTN'S BASE REG.
         AR    R15,LINK1               GET TRUE BRANCH ADDRESS
         BR    R15                     RETURN TO CONTINUE
ADDR4CMP DS    0H                      +4 RETURN
         LA    R15,FOUR                PREPARE FOR +4 RETURN
         B     LINK1IN                 PREPARE FOR RETURN
ADD1COMP DS    0H
         SR    R15,R15                 SET FOR +0 RETURN
         B     LINK1IN                 PREPARE FOR RETURN
         DROP  LINK1
*
         EJECT
*       CONSTANTS                                               Y30NQJN
LRPAREN  DC    C'( )'                  FOR NULL SUBFIELD
SLASHAST DC    C'/*'                   COMMENT DELIMITER
H3       DC    H'3'                    USED TO OBTAIN VALIDITY CHECK
*                                      ROUTINE ADDRESS FROM PCE
TWO56    DC    H'256'                  EXCEEDS MAXIMUM LEVELS OF
*                                      INDIRECT ADDRESSING BY ONE
DEC9     DC    H'9'                    DECIMAL 9
DEC32    DC    H'32'                   DECIMAL 32
DEC7     DC    H'7'                    DECIMAL 7
         DS    0F                      ALLIGN ON FULLWORD BOUNDARY
SPLNGTH  DC    X'01000010'             CORE USED FOR EXPRESSION
*                                      VALUE PDE'S
         EJECT
*
*                                                               Y30NQJN
*        ADCONS
*
SKIPBP   DC    A(SKIPB)                SKIP SEPARATORS RTN.
LISTTP   DC    A(LISTT)                LIST PROCESSING RTN.
ILLADDRP DC    A(ILLADDR)              INVALID ADDRESS RTN.
TYPETSTP DC    A(TYPETEST)             SYNTAX CHECKING RTN.
STALOCP  DC    A(STALOC)               STORAGE ALLOCATION RTN.
TRANSQP  DC    A(TRANSQ)               TRANSLATE RTN.
RANGEP   DC    A(RANGE)                RANGE PROCESSOR RTN.
POSITXP  DC    A(POSITX)               IKJPOSIT EXIT RTN.
PROMPTQP DC    A(PROMPTQ)              PROMPTING RTN.
         EJECT
PWORK    IKJEFPWA
         END
