         TITLE 'SETDMN COMMAND PROCESSOR - IEE8603D                    *
                        '
IEE8603D CSECT ,                                                   0001
@MAINENT BALR  @15,0                                               0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEE8603D  76.105'                                 0001
         DROP  @15
@PROLOG  BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         LR    @03,@01                                             0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         LR    @01,@03                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MVC   @PC00001(4),0(@01)                                  0001
*   REG14SAV=R14;                   /* SAVE REG 14                   */
         ST    R14,REG14SAV                                        0022
*   XSAPTR=R2;                      /* ADDR OF XSA                   */
         LR    XSAPTR,R2                                           0023
*   XAV=COMMAND;                    /* PUT COMMAND IN XSA FOR MSGS   */
         MVC   XAV(8,XSAPTR),COMMAND                               0024
*   IF XAL=ZERO THEN                /* NO OPERANDS IN BUFFER         */
         L     @10,XAL-1(,XSAPTR)                                  0025
         LA    @10,0(,@10)                                         0025
         LTR   @10,@10                                             0025
         BNZ   @RF00025                                            0025
*     DO;                           /* ISSUE ERROR MSG, AND RETURN   */
*       XAE=PM;                     /* PARAMETER MISSING MSG ID      */
         MVI   XAE(XSAPTR),X'0B'                                   0027
*       CALL IEE0503D;              /* ISSUE MSG                     */
         L     @15,@CV01241                                        0028
         BALR  @14,@15                                             0028
*       R14=REG14SAV;               /* RESTORE REG 14                */
         L     R14,REG14SAV                                        0029
*       RETURN;                                                    0030
@EL00001 DS    0H                                                  0030
@EF00001 L     @00,@SIZDATD                                        0030
         LR    @01,@11                                             0030
         FREEMAIN R,LV=(0),A=(1)
@ER00001 BR    @14                                                 0030
*     END;                                                         0031
*                                                                  0031
*/*  OPERAND EXISTS IN BUFFER. CONTINUE PROCESSING                   */
*                                                                  0032
*   CALL GETSTOR;                   /* GETMAIN STORAGE FOR PARAMETERS*/
@RF00025 BAL   @14,GETSTOR                                         0032
*   CALL VALDMN;                    /* VALIDATE DOMAIN VALUE         */
         BAL   @14,VALDMN                                          0033
*   CALL BADKEYW;                   /* SEARCH FOR INVALID KEYWORDS   */
*                                                                  0034
         BAL   @14,BADKEYW                                         0034
*   /*****************************************************************/
*   /*                                                               */
*   /* SEARCH FOR EACH KEYWORD AND ITS ASSOCIATED VALUES. SAVE THE   */
*   /* VALUE IN EVTAREA, IF VALID. OTHERWISE ISSUE APPROPRIATE ERROR */
*   /* MESSAGE. IF A KEYWORD APPEARS TWICE IN COMMAND BUFFER, ISSUE  */
*   /* APPROPRIATE ERROR MESSAGE.                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0035
*   DO I=ONE TO NOKEYW;             /* SEARCH FOR EACH KEYWORD       */
         LA    @10,1                                               0035
         B     @DE00035                                            0035
@DL00035 DS    0H                                                  0036
*     R0=XAR+TEXTLEN;               /* PTR TO BUFFER END+1           */
         L     @10,XAR-1(,XSAPTR)                                  0036
         LA    @10,0(,@10)                                         0036
         LH    R0,TEXTLEN(,@10)                                    0036
         N     R0,@CF01302                                         0036
         ALR   R0,@10                                              0036
*     R1=XAL;                       /* PTR BEGINNING OPERAND FIELD   */
         L     R1,XAL-1(,XSAPTR)                                   0037
         LA    R1,0(,R1)                                           0037
*     R15=ADDR(KEYWRD(I));          /* PTR TO KEYWORD FOR SCAN     0038
*                                      ROUTINE                       */
         L     R15,I                                               0038
         SLA   R15,2                                               0038
         LA    R15,KEYWRD-4(R15)                                   0038
*     R15=R15×KEYLEN(I);            /* PUT LEN IN HIGH ORDER BYTE    */
         L     @14,I                                               0039
         SLA   @14,2                                               0039
         O     R15,KEYLEN-4(@14)                                   0039
*     CALL SCANKEYW;                /* FIND KEYWORD AND ITS VALUE    */
         BAL   @14,SCANKEYW                                        0040
*     IF R15=SUCCESS THEN           /* KEYWORD AND VALUE FOUND       */
         LTR   R15,R15                                             0041
         BNZ   @RF00041                                            0041
*       DO;                                                        0042
*         IF KWLEN>THREE THEN       /* ERROR-VALUE INVALID           */
         LA    @10,3                                               0043
         C     @10,KWLEN                                           0043
         BNL   @RF00043                                            0043
*           DO;                                                    0044
*             XAV=KEYWORD(I);       /* PUT KEYWORD IN XSA FOR      0045
*                                      MESSAGES                      */
         MVI   XAV+3(XSAPTR),C' '                                  0045
         MVC   XAV+4(4,XSAPTR),XAV+3(XSAPTR)                       0045
         LR    @09,@10                                             0045
         M     @08,I                                               0045
         LA    @10,KEYWORD-3(@09)                                  0045
         MVC   XAV(3,XSAPTR),0(@10)                                0045
*             CALL MSGEXIT(KVI);    /* CLEANUP,ISSUE MSG,EXIT        */
         LA    @01,@AL00046                                        0046
         BAL   @14,MSGEXIT                                         0046
*           END;                                                   0047
*         CALL VALKEYWV;            /* SAVE KEYWORD VALUE IN EVTAREA,*/
@RF00043 BAL   @14,VALKEYWV                                        0048
*/* IF VALID. ELSE ISSUE ERROR MSG                                   */
*                                                                  0049
*         CALL DUPKEYW;             /* CHECK FOR KEYWORD REPEATED. 0049
*                                      ISSUE ERROR MSG IF IT IS      */
         BAL   @14,DUPKEYW                                         0049
*       END;                        /* END RETURN CODE 0 PROCESSING  */
*     ELSE                                                         0051
*       IF R15=INVALID THEN         /* VALUE INVALID                 */
         B     @RC00041                                            0051
@RF00041 C     R15,@CF00047                                        0051
         BNE   @RF00051                                            0051
*         DO;                                                      0052
*           XAV=KEYWORD(I);         /* PUT KEYWORD IN XSA FOR      0053
*                                      MESSAGES                      */
         MVI   XAV+3(XSAPTR),C' '                                  0053
         MVC   XAV+4(4,XSAPTR),XAV+3(XSAPTR)                       0053
         L     @10,I                                               0053
         MH    @10,@CH00075                                        0053
         LA    @06,KEYWORD-3(@10)                                  0053
         MVC   XAV(3,XSAPTR),0(@06)                                0053
*           CALL MSGEXIT(KVI);      /* CLEANUP,ISSUE MSG,EXIT        */
         LA    @01,@AL00054                                        0054
         BAL   @14,MSGEXIT                                         0054
*         END;                                                     0055
*   END;                            /* END LOOP FOR KEYWORD SEARCH   */
*                                                                  0056
@RF00051 DS    0H                                                  0056
@RC00041 LA    @10,1                                               0056
         AL    @10,I                                               0056
@DE00035 ST    @10,I                                               0056
         C     @10,NOKEYW                                          0056
         BNH   @DL00035                                            0056
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR MIN>MAX,AND NO KEYWORDS SPECIFIED                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0057
*   IF(NEWMIN='1'B&NEWMAX='1'B) THEN/* BOTH KEYWORDS SPECIFIED       */
         L     @10,AREAPTR                                         0057
         TM    NEWMIN(@10),B'11000000'                             0057
         BNO   @RF00057                                            0057
*     IF MINNO>MAXNO THEN           /* PARAMETERS CONFLICT           */
         L     @10,AREAPTR                                         0058
         L     @06,AREAPTR                                         0058
         CLC   MINNO(1,@10),MAXNO(@06)                             0058
         BNH   @RF00058                                            0058
*       CALL MSGEXIT(PC);           /* CLEANUP,ISSUE ERROR MSG,EXIT  */
         LA    @01,@AL00059                                        0059
         BAL   @14,MSGEXIT                                         0059
*   IF FLAGS=ZERO THEN              /* NO KEYWORDS SPECIFIED         */
@RF00058 DS    0H                                                  0060
@RF00057 L     @10,AREAPTR                                         0060
         CLI   FLAGS(@10),0                                        0060
         BNE   @RF00060                                            0060
*     CALL MSGEXIT(KM);             /* CLEANUP,ISSUE ERROR MSG,EXIT  */
*                                                                  0061
         LA    @01,@AL00061                                        0061
         BAL   @14,MSGEXIT                                         0061
*   /*****************************************************************/
*   /*                                                               */
*   /* CHANGE DOMAIN TABLE                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0062
*   CALL DMNSET;                    /* SET VALUES IN DOMAIN TABLE    */
@RF00060 BAL   @14,DMNSET                                          0062
*   IF R15=ZERO THEN                /* VALUES SET SUCCESSFULLY       */
         LTR   R15,R15                                             0063
         BNZ   @RF00063                                            0063
*     CALL MSGEXIT(CMDPC);          /* PROCESSING COMPLETE MSG       */
         LA    @01,@AL00064                                        0064
         BAL   @14,MSGEXIT                                         0064
*   R14=REG14SAV;                   /* RESTORE REG 14                */
@RF00063 L     R14,REG14SAV                                        0065
*   RETURN;                                                        0066
         B     @EL00001                                            0066
*GETSTOR:                                                          0067
*   PROC;                                                          0067
*                                                                  0067
GETSTOR  STM   @14,@12,@SA00002                                    0067
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN STORAGE FROM SUBPOOL 245 FOR PARAMETERS TO SYSEVENT    */
*   /* PROCESSING                                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0068
*   R0=SIZE×SUBPL245;               /* SUBPOOL NO.& STORAGE SIZE     */
         L     R0,SUBPL245                                         0068
         O     R0,@CF00039                                         0068
*   GEN(GETMAIN R,LV=(0));                                         0069
*                                                                  0069
         GETMAIN R,LV=(0)
*   /*****************************************************************/
*   /*                                                               */
*   /* CLEAR AREA OBTAINED                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0070
*   AREAPTR=R1;                     /* SET ADDRESS TO EVTAREA        */
         ST    R1,AREAPTR                                          0070
*   EVTAREA=CLEAR;                  /* ZERO GOTTEN AREA              */
         L     @10,AREAPTR                                         0071
         XC    EVTAREA+1(4,@10),EVTAREA+1(@10)                     0071
         MVC   EVTAREA(1,@10),CLEAR                                0071
*   END GETSTOR;                                                   0072
@EL00002 DS    0H                                                  0072
@EF00002 DS    0H                                                  0072
@ER00002 LM    @14,@12,@SA00002                                    0072
         BR    @14                                                 0072
*VALDMN:                                                           0073
*   PROC;                                                          0073
*                                                                  0073
VALDMN   STM   @14,@12,@SA00003                                    0073
*   /*****************************************************************/
*   /*                                                               */
*   /* VALIDATE DOMAIN VALUE. IF VALUE IS MISSING OR INVALID,ISSUE   */
*   /* APPROPRIATE ERROR MESSAGE. OTHERWISE SAVE VALUE IN EVTAREA.   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0074
*   DONE='0'B;                      /* INIT. FLAG                    */
         NI    DONE,B'01111111'                                    0074
*   BEGIN=XAL;                      /* PTR TO OPERAND FIELD          */
         L     @10,XAL-1(,XSAPTR)                                  0075
         LA    @10,0(,@10)                                         0075
         ST    @10,BEGIN                                           0075
*   EOB=XAR+TEXTLEN;                /* END OF BUFFER+1               */
         L     @06,XAR-1(,XSAPTR)                                  0076
         LA    @06,0(,@06)                                         0076
         LH    @04,TEXTLEN(,@06)                                   0076
         N     @04,@CF01302                                        0076
         ALR   @04,@06                                             0076
         ST    @04,EOB                                             0076
*   DO SCANPTR=BEGIN TO EOB WHILE(DONE='0'B);/* SCAN BUFFER          */
         B     @DE00077                                            0077
@DL00077 TM    DONE,B'10000000'                                    0077
         BNZ   @DC00077                                            0077
*     IF(BUFCHAR=COMMA)×(BUFCHAR=BLANK)×(SCANPTR=EOB) THEN         0078
         L     @10,SCANPTR                                         0078
         CLI   BUFCHAR(@10),C','                                   0078
         BE    @RT00078                                            0078
         L     @10,SCANPTR                                         0078
         CLI   BUFCHAR(@10),C' '                                   0078
         BE    @RT00078                                            0078
         CLC   SCANPTR(4),EOB                                      0078
         BNE   @RF00078                                            0078
@RT00078 DS    0H                                                  0079
*       DO;                                                        0079
*         VALLEN=SCANPTR-BEGIN;     /* LENGTH OF VALUE               */
         L     @10,SCANPTR                                         0080
         SL    @10,BEGIN                                           0080
         ST    @10,VALLEN                                          0080
*         IF VALLEN=ZERO THEN       /* PARAMETER IS MISSING          */
         L     @10,VALLEN                                          0081
         LTR   @10,@10                                             0081
         BNZ   @RF00081                                            0081
*           CALL MSGEXIT(PM);       /* ISSUE MESSAGE AND EXIT        */
         LA    @01,@AL00082                                        0082
         BAL   @14,MSGEXIT                                         0082
*         ELSE                                                     0083
*           IF VALLEN>THREE THEN    /* INVALID                       */
         B     @RC00081                                            0083
@RF00081 L     @10,VALLEN                                          0083
         C     @10,@CF00075                                        0083
         BNH   @RF00083                                            0083
*             CALL MSGEXIT(PI);     /* ISSUE MSG,& EXIT              */
         LA    @01,@AL00084                                        0084
         BAL   @14,MSGEXIT                                         0084
*         CALL TRANSLAT(VALLEN,BEGIN,VALUE);/* TRANS VALUE           */
@RF00083 DS    0H                                                  0085
@RC00081 LA    @10,VALLEN                                          0085
         ST    @10,@AL00001                                        0085
         LA    @10,BEGIN                                           0085
         ST    @10,@AL00001+4                                      0085
         LA    @10,VALUE                                           0085
         ST    @10,@AL00001+8                                      0085
         LA    @01,@AL00001                                        0085
         BAL   @14,TRANSLAT                                        0085
*         IF(VALUE<MINDMN×VALUE>MAXDMN) THEN/* ERROR                 */
         L     @10,VALUE                                           0086
         LTR   @10,@10                                             0086
         BNP   @RT00086                                            0086
         C     @10,@CF01182                                        0086
         BNH   @RF00086                                            0086
@RT00086 DS    0H                                                  0087
*           CALL MSGEXIT(PI);                                      0087
         LA    @01,@AL00087                                        0087
         BAL   @14,MSGEXIT                                         0087
*         ELSE                                                     0088
*           DO;                                                    0088
         B     @RC00086                                            0088
@RF00086 DS    0H                                                  0089
*             DONE='1'B;            /* GET OUT OF LOOP               */
         OI    DONE,B'10000000'                                    0089
*             DMNNO=VALUE;          /* STORE VALUE IN EVTAREA        */
         L     @10,VALUE                                           0090
         L     @06,AREAPTR                                         0090
         STC   @10,DMNNO(,@06)                                     0090
*             DMNNOPTR=BEGIN;       /* SAVE ADDR OF DMN NO.          */
         L     @10,BEGIN                                           0091
         ST    @10,DMNNOPTR                                        0091
*           END;                                                   0092
*       END;                                                       0093
@RC00086 DS    0H                                                  0094
*   END;                                                           0094
@RF00078 LA    @10,1                                               0094
         AL    @10,SCANPTR                                         0094
@DE00077 ST    @10,SCANPTR                                         0094
         C     @10,EOB                                             0094
         BNH   @DL00077                                            0094
@DC00077 DS    0H                                                  0095
*   END VALDMN;                                                    0095
@EL00003 DS    0H                                                  0095
@EF00003 DS    0H                                                  0095
@ER00003 LM    @14,@12,@SA00003                                    0095
         BR    @14                                                 0095
*BADKEYW:                                                          0096
*   PROC;                                                          0096
*                                                                  0096
BADKEYW  STM   @14,@12,@SA00004                                    0096
*   /*****************************************************************/
*   /*                                                               */
*   /* SEARCH FOR UNIDENTIFIABLE KEYWORDS. IF ANY ARE FOUND, ISSUE   */
*   /* ERROR MESSAGE. OTHERWISE RETURN TO CALLER.                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0097
*   DONE='0'B;                      /* INIT FLAG                     */
         NI    DONE,B'01111111'                                    0097
*   BEGADDR=DMNNOPTR+VALLEN;        /* PTR TO KEYWORD FIELD          */
         L     @10,DMNNOPTR                                        0098
         AL    @10,VALLEN                                          0098
         ST    @10,BEGADDR                                         0098
*   ENDADDR=XAR+TEXTLEN;            /* PTR TO BUFFER END + 1         */
         L     @08,XAR-1(,XSAPTR)                                  0099
         LA    @08,0(,@08)                                         0099
         LH    @06,TEXTLEN(,@08)                                   0099
         N     @06,@CF01302                                        0099
         ALR   @06,@08                                             0099
         ST    @06,ENDADDR                                         0099
*   FIND=BEGADDR;                   /* POINT TO DELIMITER            */
         LR    FIND,@10                                            0100
*   STOP=BEGADDR+1;                 /* INIT. STOP PTR                */
         LA    STOP,1                                              0101
         ALR   STOP,@10                                            0101
*   IF BEGADDR=ENDADDR THEN         /* END OF OPERAND FIELD          */
         CR    @10,@06                                             0102
         BNE   @RF00102                                            0102
*     DONE='1'B;                                                   0103
         OI    DONE,B'10000000'                                    0103
*   ELSE                                                           0104
*     IF(BUFTEXT(1:1)=BLANK) THEN   /* END OF OPERAND FIELD          */
         B     @RC00102                                            0104
@RF00102 CLI   BUFTEXT(FIND),C' '                                  0104
         BNE   @RF00104                                            0104
*       DONE='1'B;                                                 0105
         OI    DONE,B'10000000'                                    0105
*   DO FIND=BEGADDR+1 TO ENDADDR WHILE(DONE='0'B);/* SCAN BUFFER     */
@RF00104 DS    0H                                                  0106
@RC00102 LA    FIND,1                                              0106
         AL    FIND,BEGADDR                                        0106
         B     @DE00106                                            0106
@DL00106 TM    DONE,B'10000000'                                    0106
         BNZ   @DC00106                                            0106
*     IF(BUFTEXT(1:1)=COMMA)×(BUFTEXT(1:1)=BLANK)×(FIND=ENDADDR) THEN
         CLI   BUFTEXT(FIND),C','                                  0107
         BE    @RT00107                                            0107
         CLI   BUFTEXT(FIND),C' '                                  0107
         BE    @RT00107                                            0107
         C     FIND,ENDADDR                                        0107
         BNE   @RF00107                                            0107
@RT00107 DS    0H                                                  0108
*       DO;                         /* CHECK FOR BAD KEYWORDS        */
*         ENDPTR=FIND;              /* INIT END OF FIELD TO SCAN     */
         LR    ENDPTR,FIND                                         0109
*/*  LOOK FOR EQUAL SIGN IN FIELD                                    */
*                                                                  0110
*         DO EQPTR=STOP TO FIND WHILE(ENDPTR=FIND);                0110
         LR    EQPTR,STOP                                          0110
         B     @DE00110                                            0110
@DL00110 CR    ENDPTR,FIND                                         0110
         BNE   @DC00110                                            0110
*           IF(EQSIGN='=') THEN                                    0111
         CLI   EQSIGN(EQPTR),C'='                                  0111
         BNE   @RF00111                                            0111
*             ENDPTR=EQPTR;         /* END OF FIELD TO SCAN          */
         LR    ENDPTR,EQPTR                                        0112
*         END;                                                     0113
@RF00111 AL    EQPTR,@CF00070                                      0113
@DE00110 CR    EQPTR,FIND                                          0113
         BNH   @DL00110                                            0113
@DC00110 DS    0H                                                  0114
*         COUNT=ENDPTR-STOP;        /* LENGTH OF KEYWORD             */
         LR    COUNT,ENDPTR                                        0114
         SLR   COUNT,STOP                                          0114
*         IF COUNT=ZERO THEN        /* NO KEYWORDS                   */
         LTR   COUNT,COUNT                                         0115
         BNZ   @RF00115                                            0115
*           DONE='1'B;                                             0116
         OI    DONE,B'10000000'                                    0116
*         ELSE                                                     0117
*           DO;                     /* LOOK FOR KEYWORDS             */
         B     @RC00115                                            0117
@RF00115 DS    0H                                                  0118
*             IF(COUNT^=3)&(COUNT^=2) THEN/* BAD LENGTH              */
         C     COUNT,@CF00075                                      0118
         BE    @RF00118                                            0118
         C     COUNT,@CF00111                                      0118
         BE    @RF00118                                            0118
*               CALL MSGEXIT(UK);                                  0119
         LA    @01,@AL00119                                        0119
         BAL   @14,MSGEXIT                                         0119
*             SAVEPTR=FIND;         /* SAVE PTE TO END OF FIELD      */
@RF00118 ST    FIND,SAVEPTR                                        0120
*             FIND=ENDPTR-COUNT;    /* POINT TO BEGIN OF KEYWORD     */
         LR    FIND,ENDPTR                                         0121
         SLR   FIND,COUNT                                          0121
*             IF COUNT=2 THEN                                      0122
         C     COUNT,@CF00111                                      0122
         BNE   @RF00122                                            0122
*               DO;                                                0123
*                 IF(BUFTEXT(1:2)^=KEYWORD(3)) THEN                0124
         CLC   BUFTEXT(2,FIND),KEYWORD+6                           0124
         BE    @RF00124                                            0124
*                   CALL MSGEXIT(UK);/* ^= WT                        */
         LA    @01,@AL00125                                        0125
         BAL   @14,MSGEXIT                                         0125
*               END;                                               0126
*             ELSE                                                 0127
*               IF COUNT=3 THEN                                    0127
         B     @RC00122                                            0127
@RF00122 C     COUNT,@CF00075                                      0127
         BNE   @RF00127                                            0127
*                 IF(BUFTEXT(1:3)^=KEYWORD(1))&(BUFTEXT(1:3)^=KEYWORD(2
*                     )) THEN                                      0128
         CLC   BUFTEXT(3,FIND),KEYWORD                             0128
         BE    @RF00128                                            0128
         CLC   BUFTEXT(3,FIND),KEYWORD+3                           0128
         BE    @RF00128                                            0128
*                   CALL MSGEXIT(UK);/* ^= MIN OR MAX                */
         LA    @01,@AL00129                                        0129
         BAL   @14,MSGEXIT                                         0129
*             FIND=SAVEPTR;         /* RESTORE PTR                   */
@RF00128 DS    0H                                                  0130
@RF00127 DS    0H                                                  0130
@RC00122 L     FIND,SAVEPTR                                        0130
*             IF(BUFTEXT(1:1)=BLANK) THEN                          0131
         CLI   BUFTEXT(FIND),C' '                                  0131
         BNE   @RF00131                                            0131
*               DONE='1'B;          /* AT END OF OPERAND FIELD       */
         OI    DONE,B'10000000'                                    0132
*           END;                                                   0133
@RF00131 DS    0H                                                  0134
*         STOP=FIND+1;              /* PT TO BEGIN OF NEXT FIELD     */
@RC00115 LA    STOP,1                                              0134
         ALR   STOP,FIND                                           0134
*       END;                                                       0135
*   END;                                                           0136
@RF00107 AL    FIND,@CF00070                                       0136
@DE00106 C     FIND,ENDADDR                                        0136
         BNH   @DL00106                                            0136
@DC00106 DS    0H                                                  0137
*   END BADKEYW;                                                   0137
@EL00004 DS    0H                                                  0137
@EF00004 DS    0H                                                  0137
@ER00004 LM    @14,@12,@SA00004                                    0137
         BR    @14                                                 0137
*SCANKEYW:                                                         0138
*   PROC OPTIONS(NOSAVE(15));                                      0138
*                                                                  0138
SCANKEYW ST    @14,@SA00005                                        0138
         STM   @00,@12,@SA00005+4                                  0138
*/*                                                                0139
********************************************************************
**                                                                 0139
**      ROUTINE NAME         IEEBUFSC                              0139
**                                                                 0139
**      FUNCTION             TO SCAN A BUFFER FOR A GIVEN KEYWORD OF
**                           A GIVEN LENGTH AND TO RETURN A POINTER
**                           TO THE KEYWORD VALUE AND THE LENGTH OF
**                           THE VALUE                             0139
**                                                                 0139
**      ENTRY POINT          IEEBUFSC                              0139
**                                                                 0139
**      ATTRIBUTES           REFRESHABLE                           0139
**                                                                 0139
**      OPERATION            1. SET UP PTR TO BUFFER -1 AND PTR    0139
**                              TO KEYWORD LENGTH                  0139
**                           2. IF BUFFER PTR = SPECIFIED KEYWORD  0139
**                              GO TO FOUND ROUTINE (3).           0139
**                              A. IF NOT, INCREMENT BUFFER PTR    0139
**                                 BY ONE.                         0139
**                              B. IF PTR IS AT END OF BUFFER SET  0139
**                                 UP NOT FOUND RETURN CODE (8) IN 0139
**                                 R15 AND EXIT.                   0139
**                              C. IF PTR IS AT A COMMA, GO BACK TO
**                                 OPERATION 2.                    0139
**                              D. IF PTR IS A BLANK SET UP NOT    0139
**                                 FOUND RETURN CODE (8) IN R15 AND
**                                 EXIT.                           0139
**                              E. OTHERWISE GO TO OPERATION 2.A.  0139
**                           3. AT FOUND ROUTINE SET UP R14 TO POINT
**                              TO KEYWORD VALUE                   0139
**                           4. SCAN KEYWORD VALUE TO THE END OF   0139
**                              THE BUFFER, A COMMA OR A BLANK     0139
**                           5. CALCULATE LENGTH OF KEYWORD VALUE. 0139
**                           6. IF LENGTH IS < OR = ZERO, SET UP   0139
**                              AN INVALID KEYWORD VALUE LENGTH    0139
**                              RETURN CODE (4) IN R15 AND EXIT.   0139
**                           7. OTHERWISE, SET GOOD RETURN CODE    0139
**                              OF ZERO IN R15 AND EXIT.           0139
**                                                                 0139
**      EXTERNAL REFS        NONE                                  0139
**                                                                 0139
**      SVCS                 NONE                                  0139
**                                                                 0139
**      INPUT                R1 - PTR TO BEGINNING OF BUFFER       0139
**                           R0 - PTR TO LAST BYTE OF BUFFER + 1   0139
**                           R15- PTR TO KEYWORD WITH THE LENGTH   0139
**                                OF THE KEYWORD IN THE HIGH ORDER 0139
**                                BYTE.                            0139
**                                EG. KEYWORD FORMAT 'DSNAME='     0139
**                                    R15 WOULD POINT TO THE 'D'   0139
**                                WITH A 6 IN THE HIGH ORDER       0139
**                                BYTE.                            0139
**                                                                 0139
**      OUTPUT               R14  PTR TO FIRST BYTE OF KEYWORD     0139
**                                VALUE IN BUFFER OR WORKAREA      0139
**                           R1   LENGTH OF KEYWORD VALUE          0139
**                           R15  RETURN CODE OF ZERO.             0139
**                                                                 0139
**      ERROR OUTPUT         R15  CONTAINS A FOUR IF KEYWORD       0139
**                                HAD AN INVLAID LENGTH            0139
**                           R15  CONTAINS AN EIGHT IF THE KEYWORD 0139
**                                WAS NOT FOUND IN THE BUFFER      0139
**                                                                 0139
**      EXIT                 TO NEXT SEQUENTIAL INSTRUCTION AFTER  0139
**                           MACRO CALL                            0139
**                                                                 0139
**      NOTES                LISTS OF OPERANDS IN PARENTHESES ARE  0139
**                           NOT PROCESSED, THIS MACRO IS INTENDED 0139
**                           TO PROCESS ONLY A SINGLE VALUE FOR    0139
**                           A GIVEN KEYWORD                       0139
********************************************************************
*                                                                    */
*                                                                  0139
*   GEN(IEEBUFSC);                                                 0139
         IEEBUFSC
*   KWLEN=R1;                       /* SAVE KEYWORD VALUE LENGTH     */
         ST    R1,KWLEN                                            0140
*   VALPTR=R14;                     /* SAVE PTR TO VALUE             */
         ST    R14,VALPTR                                          0141
*   END SCANKEYW;                                                  0142
@EL00005 DS    0H                                                  0142
@EF00005 DS    0H                                                  0142
@ER00005 L     @14,@SA00005                                        0142
         LM    @00,@12,@SA00005+4                                  0142
         BR    @14                                                 0142
*VALKEYWV:                                                         0143
*   PROC;                                                          0143
*                                                                  0143
VALKEYWV STM   @14,@12,@SA00006                                    0143
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE TRANSLATE KEYWORD VALUE TO BINARY,AND VALIDATES  */
*   /* RANGE. IF VALUE IS OUT OF RANGE, ISSUE ERROR MESSAGE. ELSE    */
*   /* SAVE VALUE IN EVTAREA AND APPROPRIATE FLAG.                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0144
*   CALL TRANSLAT(KWLEN,VALPTR,VALUE);/* TRANSLATE TO DIGITS         */
         LA    @10,KWLEN                                           0144
         ST    @10,@AL00001                                        0144
         LA    @10,VALPTR                                          0144
         ST    @10,@AL00001+4                                      0144
         LA    @10,VALUE                                           0144
         ST    @10,@AL00001+8                                      0144
         LA    @01,@AL00001                                        0144
         BAL   @14,TRANSLAT                                        0144
*   IF(VALUE<MINVAL(I)×VALUE>MAXVAL) THEN/* ERROR                    */
         L     @10,VALUE                                           0145
         L     @06,I                                               0145
         SLA   @06,2                                               0145
         C     @10,MINVAL-4(@06)                                   0145
         BL    @RT00145                                            0145
         C     @10,@CF01170                                        0145
         BNH   @RF00145                                            0145
@RT00145 DS    0H                                                  0146
*     DO;                                                          0146
*       XAV=KEYWORD(I);             /* KEYWORD                       */
         MVI   XAV+3(XSAPTR),C' '                                  0147
         MVC   XAV+4(4,XSAPTR),XAV+3(XSAPTR)                       0147
         L     @10,I                                               0147
         MH    @10,@CH00075                                        0147
         LA    @06,KEYWORD-3(@10)                                  0147
         MVC   XAV(3,XSAPTR),0(@06)                                0147
*       CALL MSGEXIT(KVI);          /* ISSUE MESSAGE,EXIT            */
         LA    @01,@AL00148                                        0148
         BAL   @14,MSGEXIT                                         0148
*     END;                                                         0149
*   ELSE                            /* SET FIELDS IN EVTAREA         */
*     DO;                                                          0150
         B     @RC00145                                            0150
@RF00145 DS    0H                                                  0151
*       VALMAP(I)=VALUE;            /* APPROPRIATE KEYWORD VALUE SET */
         L     @10,VALUE                                           0151
         L     @06,AREAPTR                                         0151
         L     @04,I                                               0151
         STC   @10,VALMAP-1(@04,@06)                               0151
*       FLAGS=FLAGS×MASK(I);        /* TURN ON CORRESPONDING FLAG    */
         L     @10,AREAPTR                                         0152
         L     @06,I                                               0152
         LA    @04,MASK-1(@06)                                     0152
         OC    FLAGS(1,@10),0(@04)                                 0152
*     END;                                                         0153
*   END VALKEYWV;                                                  0154
@EL00006 DS    0H                                                  0154
@EF00006 DS    0H                                                  0154
@ER00006 LM    @14,@12,@SA00006                                    0154
         BR    @14                                                 0154
*DUPKEYW:                                                          0155
*   PROC;                                                          0155
*                                                                  0155
DUPKEYW  STM   @14,@12,@SA00007                                    0155
*   /*****************************************************************/
*   /*                                                               */
*   /* SEARCH FOR KEYWORD REPEATED IN BUFFER,VIA IEEBUFSC MACRO.IF   */
*   /* RETURN CODE FROM SCAN ROUTINE IS NOT 8(NOTFOUND). ISSUE ERROR */
*   /* MESSAGE. OTHERWISE RETURN TO MAINLINE.                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0156
*   RETADDR=R14;                    /* SAVE RETURN ADDR TO MAINLINE  */
         LR    RETADDR,R14                                         0156
*   R0=XAR+TEXTLEN;                 /* PTR TO BUFFER END+1           */
         L     @10,XAR-1(,XSAPTR)                                  0157
         LA    @10,0(,@10)                                         0157
         LH    R0,TEXTLEN(,@10)                                    0157
         N     R0,@CF01302                                         0157
         ALR   R0,@10                                              0157
*   R1=VALPTR+VALLEN;               /* PTR TO DELIMITER              */
         L     R1,VALPTR                                           0158
         AL    R1,VALLEN                                           0158
*   R15=ADDR(KEYWRD(I));            /* PTR TO BUFFER                 */
         L     R15,I                                               0159
         SLA   R15,2                                               0159
         LA    R15,KEYWRD-4(R15)                                   0159
*   R15=R15×KEYLEN(I);              /* LENGTH IN HIGH ORDER BYTE     */
         L     @14,I                                               0160
         SLA   @14,2                                               0160
         O     R15,KEYLEN-4(@14)                                   0160
*   GEN(IEEBUFSC);                  /* PTR TO KEYWORD IN QUESTION    */
         IEEBUFSC
*   IF R15^=NOTFOUND THEN           /* KEYWORD WAS FOUND AGAIN-ERROR */
         C     R15,@CF00039                                        0162
         BE    @RF00162                                            0162
*     CALL MSGEXIT(PC);             /* PARAMETERS CONFLICT MSG, EXIT */
         LA    @01,@AL00163                                        0163
         BAL   @14,MSGEXIT                                         0163
*   END DUPKEYW;                                                   0164
@EL00007 DS    0H                                                  0164
@EF00007 DS    0H                                                  0164
@ER00007 LM    @14,@12,@SA00007                                    0164
         BR    @14                                                 0164
*DMNSET:                                                           0165
*   PROC OPTIONS(NOSAVE(15));                                      0165
*                                                                  0165
DMNSET   ST    @14,@SA00008                                        0165
         STM   @00,@12,@SA00008+4                                  0165
*/************************************************************       */
*/*      THIS ROUTINE SETS VALUES IN THE DOMAIN TABLE VIA SYSEVENT   */
*/*      #37(SETDMN). ISSUE ERROR MESSAGE FOR NONZERO RETURN CODE    */
*/*      FROM SYSEVENT PROCESSOR.                                    */
*/*      RETURN CODE: MESSAGE:                                       */
*/*                 4  IEE797I  DMN NNN NOT DEFINED IN DOMAIN TABLE  */
*/*                 8  IEE798I  MIN VALUE EXCEEDS MAX VALUE IN DOMAIN*/
*/*                             TABLE                                */
*/*      WHERE: NNN IS DOMAIN NUMBER SPECIFIED ON SETDMN COMMAND     */
*/*****************************************************************  */
*                                                                  0166
*   R1=AREAPTR;                     /* ADDR OF PARAMETERS            */
         L     R1,AREAPTR                                          0166
*   R13=ADDR(XASAVSTD);             /* ADDR OF SAVEAREA              */
         LA    R13,XASAVSTD(,XSAPTR)                               0167
*   GEN(SYSEVENT SETDMN,ENTRY=BRANCH);                             0168
         SYSEVENT SETDMN,ENTRY=BRANCH
*   IF R15=FOUR THEN                /* ISSUE ERROR MSG               */
         C     R15,@CF00047                                        0169
         BNE   @RF00169                                            0169
*     DO;                                                          0170
*       R5=ADDR(WTOLIST);           /* ADDR OF WTO PARAMETER LIST    */
         LA    @10,WTOLIST                                         0171
         LR    R5,@10                                              0171
*       DMNO=CHAR(ONE:VALLEN);      /* PUT DMN NO. IN MESSAGE        */
         MVI   DMNO+1(@10),C' '                                    0172
         MVC   DMNO+2(2,@10),DMNO+1(@10)                           0172
         L     @06,VALLEN                                          0172
         BCTR  @06,0                                               0172
         L     @04,DMNNOPTR                                        0172
         EX    @06,@SM01305                                        0172
*       R0=XAU;                     /* PASS CONSOLE ID TO WTO        */
         SLR   R0,R0                                               0173
         IC    R0,XAU(,XSAPTR)                                     0173
*       GEN(WTO MF=(E,(R5)));                                      0174
         WTO MF=(E,(R5))
*       R15=FOUR;                   /* RESTORE RETURN CODE           */
         LA    R15,4                                               0175
*     END;                                                         0176
*   ELSE                                                           0177
*     IF R15=EIGHT THEN             /* ISSUE ERROR MESSAGE           */
         B     @RC00169                                            0177
@RF00169 C     R15,@CF00039                                        0177
         BNE   @RF00177                                            0177
*       DO;                                                        0178
*         R0=XAU;                   /* PASS CONSOLE ID TO WTO        */
         SLR   R0,R0                                               0179
         IC    R0,XAU(,XSAPTR)                                     0179
*         GEN CODE;                                                0180
        WTO   'IEE798I MIN VALUE EXCEEDS MAX VALUE IN DOMAIN TABLE',  XX
               DESC=(5),MCSFLAG=(REG0,RESP)
*         R15=EIGHT;                /* RESTORE RETURN CODE           */
         LA    R15,8                                               0181
*       END;                                                       0182
*   END DMNSET;                                                    0183
@EL00008 DS    0H                                                  0183
@EF00008 DS    0H                                                  0183
@ER00008 L     @14,@SA00008                                        0183
         LM    @00,@12,@SA00008+4                                  0183
         BR    @14                                                 0183
*MSGEXIT:                                                          0184
*   PROC(ID) OPTIONS(NOSAVEAREA,NOSAVE);                           0184
*                                                                  0184
MSGEXIT  MVC   @PC00009(4),0(@01)                                  0184
*/*     THIS ROUTINE FREES STORAGE, ISSUES A MESSAGE,AND RETURNS TO  */
*/*     CALLER OF SETDMN PROCESSOR.                                  */
*/*       INPUT - ONE BYTE MESSAGE ID                                */
*/*                                                                  */
*/*      OUTPUT-   FOR ID:    ISSUE  MSG:                            */
*/*                    IN     IEE306I SETDMN INVALID NUMERICS        */
*/*                    KM     IEE310I SETDMN KEYWORD MISSING         */
*/*                    PM     IEE311I SETDMN PARAMETER MISSING       */
*/*                    PC     IEE312I SETDMN PARAMETER CONFLICT      */
*/*                    PI     IEE535ISETDMN INVALID PARAMETER        */
*/*                   KVI     IEE708I XXX   KEYWORD,VALUE INVALID    */
*/*                 CMDPC     IEE712I SETDMN PROCESSING COMPLETE     */
*/*                 UK        IEE309I SETDMN UNIDENTIFIABLE KEYWORD  */
*                                                                  0185
*   DCL                                                            0185
*     ID BIT(8);                    /* MESSAGE ID                    */
*   XAE=ID;                         /* PUT MESSAGE ID IN XSA         */
         L     @06,@PC00009                                        0186
         MVC   XAE(1,XSAPTR),ID(@06)                               0186
*   CALL FREESTOR;                  /* FREE STORAGE                  */
         BAL   @14,FREESTOR                                        0187
*   CALL IEE0503D;                  /* ISSUE MESSAGE AND EXIT        */
         L     @15,@CV01241                                        0188
         BALR  @14,@15                                             0188
*   R14=REG14SAV;                   /* RESTORE REG 14                */
         L     R14,REG14SAV                                        0189
*   END MSGEXIT;                                                   0190
@EL00009 DS    0H                                                  0190
@EF00009 DS    0H                                                  0190
@ER00009 BR    @14                                                 0190
*TRANSLAT:                                                         0191
*   PROC(LEN,PTR,NUMBER);                                          0191
*                                                                  0191
TRANSLAT STM   @14,@12,@SA00010                                    0191
         MVC   @PC00010(12),0(@01)                                 0191
*/*      TRANSLATE EBCDIC DIGITS TO BINARY                           */
*/*      INPUT 1) LENGTH OF VALUE                                    */
*/*            2) PTR TO VALUE                                       */
*/*      OUTPUT  1) TRANSLATED VALUE                                 */
*                                                                  0192
*   DCL                                                            0192
*     TEMNUM FIXED,                 /* TEMPORARY AREA FOR NUMBER     */
*     LEN FIXED,                    /* LENGTH PARAMETER              */
*     PTR FIXED,                    /* PTR TO VALUE                  */
*     NUMBER FIXED,                 /* OUTPUT PARAMETER FOR RESULT   */
*     INTDEC FIXED,                 /* DIGIT                         */
*     TRTCHAR CHAR(1) BASED(CURTXT),/* MAP OF CHAR TO SCAN           */
*     CURTXT PTR;                   /* PTR TO CURRENT POSITION IN  0192
*                                      SCAN                          */
*   TEMNUM=ZERO;                    /* INITIALIZE NUMBER             */
         SLR   TEMNUM,TEMNUM                                       0193
*   CURTXT=PTR;                     /* INITIALIZE PTR                */
         L     @10,@PC00010+4                                      0194
         L     CURTXT,PTR(,@10)                                    0194
*   DO COUNT=ONE TO LEN WHILE(TRTCHAR<='F9'X&TRTCHAR>='F0'X);      0195
         LA    COUNT,1                                             0195
         B     @DE00195                                            0195
@DL00195 CLI   TRTCHAR(CURTXT),X'F9'                               0195
         BH    @DC00195                                            0195
         CLI   TRTCHAR(CURTXT),X'F0'                               0195
         BL    @DC00195                                            0195
*     INTDEC=TRTCHAR&'0F'X;         /* CLEAR OUT BITS                */
         LA    INTDEC,15                                           0196
         MVC   @ZT00003+3(1),TRTCHAR(CURTXT)                       0196
         N     INTDEC,@ZT00003                                     0196
*     TEMNUM=TEMNUM*TEN+INTDEC;     /* BUILD NUMBER                  */
         LR    @10,TEMNUM                                          0197
         MH    @10,@CH01168                                        0197
         ALR   @10,INTDEC                                          0197
         LR    TEMNUM,@10                                          0197
*     CURTXT=CURTXT+ONE;            /* UPDATE POINTER                */
         AL    CURTXT,@CF00070                                     0198
*   END;                                                           0199
         AL    COUNT,@CF00070                                      0199
@DE00195 L     @10,@PC00010                                        0199
         C     COUNT,LEN(,@10)                                     0199
         BNH   @DL00195                                            0199
@DC00195 DS    0H                                                  0200
*   IF COUNT<=LEN THEN              /* FOUND NON-NUMERIC CHAR        */
         L     @10,@PC00010                                        0200
         C     COUNT,LEN(,@10)                                     0200
         BH    @RF00200                                            0200
*     CALL MSGEXIT(IN);             /* ISSUE MSG,EXIT                */
         LA    @01,@AL00201                                        0201
         BAL   @14,MSGEXIT                                         0201
*   NUMBER=TEMNUM;                  /* RETURN TRANSLATED VALUE       */
@RF00200 L     @10,@PC00010+8                                      0202
         ST    TEMNUM,NUMBER(,@10)                                 0202
*   END TRANSLAT;                                                  0203
@EL00010 DS    0H                                                  0203
@EF00010 DS    0H                                                  0203
@ER00010 LM    @14,@12,@SA00010                                    0203
         BR    @14                                                 0203
*FREESTOR:                                                         0204
*   PROC;                                                          0204
*                                                                  0204
FREESTOR STM   @14,@12,@SA00011                                    0204
*   /*****************************************************************/
*   /*                                                               */
*   /* FREE STORAGE FROM SUBPOOL 245                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0205
*   R0=SIZE×SUBPL245;               /* SUBPOOL NO.& STORAGE SIZE     */
         L     R0,SUBPL245                                         0205
         O     R0,@CF00039                                         0205
*   R1=AREAPTR;                     /* ADDR OF STORAGE TO BE FREED   */
         L     R1,AREAPTR                                          0206
*   GEN(FREEMAIN R,LV=(0),A=(1));                                  0207
         FREEMAIN R,LV=(0),A=(1)
*   END FREESTOR;                                                  0208
@EL00011 DS    0H                                                  0208
@EF00011 DS    0H                                                  0208
@ER00011 LM    @14,@12,@SA00011                                    0208
         BR    @14                                                 0208
*   END IEE8603D                                                   0209
*                                                                  0209
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IEEXSA  )                                       */
*                                                                  0209
*       ;                                                          0209
@DATA    DS    0H
@CH01168 DC    H'10'
@SM01305 MVC   DMNO(0,@10),CHAR(@04)
         DS    0F
@AL00046 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00054 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00148 DC    A(@CB01154)             LIST WITH   1 ARGUMENT(S)
@AL00059 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00163 DC    A(@CB01150)             LIST WITH   1 ARGUMENT(S)
@AL00061 DC    A(@CB01152)             LIST WITH   1 ARGUMENT(S)
@AL00064 DC    A(@CB01158)             LIST WITH   1 ARGUMENT(S)
@AL00082 DC    A(@CB01146)             LIST WITH   1 ARGUMENT(S)
@AL00084 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00087 DC    A(@CB01148)             LIST WITH   1 ARGUMENT(S)
@AL00119 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00125 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00129 DC    A(@CB01156)             LIST WITH   1 ARGUMENT(S)
@AL00201 DC    A(@CB01144)             LIST WITH   1 ARGUMENT(S)
@DATD    DSECT
         DS    0F
@PC00001 DS    1F
@SA00002 DS    15F
@SA00003 DS    15F
@SA00004 DS    15F
@SA00005 DS    14F
@PC00009 DS    1F
@SA00006 DS    15F
@SA00007 DS    15F
@SA00008 DS    14F
@SA00010 DS    15F
@PC00010 DS    3F
@SA00011 DS    15F
@AL00001 DS    3A
@ZTEMPS  DS    0F
@ZT00003 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
IEE8603D CSECT
         DS    0F
@CF00070 DC    F'1'
@CF00111 DC    F'2'
@CF00075 DC    F'3'
@CH00075 EQU   @CF00075+2
@CF00047 DC    F'4'
@CF00039 DC    F'8'
@CF01182 DC    F'128'
@CF01170 DC    F'255'
@CF01302 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
REG14SAV DS    A
SCANPTR  DS    A
BEGIN    DS    A
BEGADDR  DS    A
ENDADDR  DS    A
SAVEPTR  DS    A
EOB      DS    A
VALPTR   DS    A
DMNNOPTR DS    A
AREAPTR  DS    A
VALUE    DS    F
KWLEN    DS    F
I        DS    F
VALLEN   DS    F
DONE     DS    BL1
IEE8603D CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV01241 DC    V(IEE0503D)
         DS    0D
SUBPL245 DC    XL4'F5000000'
NOKEYW   DC    F'3'
@CB01144 DC    X'06'
@CB01146 DC    X'0B'
@CB01148 DC    X'3E'
@CB01150 DC    X'0C'
@CB01152 DC    X'0A'
@CB01154 DC    X'3D'
@CB01156 DC    X'09'
@CB01158 DC    X'03'
COMMAND  DC    CL8'SETDMN'
CLEAR    DC    X'00'
         DS    CL3
MINVAL   DC    F'0'
         DC    F'0'
         DC    F'1'
KEYLEN   DC    XL4'03000000'
         DC    XL4'03000000'
         DC    XL4'02000000'
KEYWRD   DC    CL4'MIN='
         DC    CL4'MAX='
         DC    CL4'WT='
KEYWORD  DC    CL3'MIN'
         DC    CL3'MAX'
         DC    CL3'WT'
MASK     DC    X'80'
         DC    X'40'
         DC    X'20'
IEE8603D CSECT
WTOLIST WTO   'IEE797I DMN     NOT DEFINED IN DOMAIN TABLE',          XX
               DESC=(5),MCSFLAG=(REG0,RESP),MF=L
IEE8603D CSECT
PATCH   DC   50F'0'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEE8603D CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
CURTXT   EQU   @03
INTDEC   EQU   @04
TEMNUM   EQU   @09
RETADDR  EQU   @04
COUNT    EQU   @08
ENDPTR   EQU   @10
EQPTR    EQU   @03
STOP     EQU   @09
FIND     EQU   @04
XSAPTR   EQU   @07
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R5       EQU   @05
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
XSAMAP   EQU   0
XASVRB   EQU   XSAMAP
XSA      EQU   XASVRB
XAD      EQU   XSA+4
XAX      EQU   XASVRB+8
@NM00027 EQU   XASVRB+16
XAE      EQU   @NM00027
XAR      EQU   @NM00027+1
@NM00028 EQU   XASVRB+20
XAL      EQU   @NM00028+1
XAV      EQU   XASVRB+24
XAS      EQU   XASVRB+32
XAU      EQU   XASVRB+40
XAA      EQU   XASVRB+42
XASAVLOC EQU   XSAMAP+48
XASAVLOX EQU   XASAVLOC
XASAVSTD EQU   XSAMAP+64
XASAVSTR EQU   XASAVSTD
EEXSAS01 EQU   0
EEXSAS02 EQU   0
XADUSWIT EQU   EEXSAS02
EEXSAS03 EQU   0
XASDS    EQU   EEXSAS03+2
@NM00031 EQU   EEXSAS03+4
EEXSAS04 EQU   0
XAXMASK  EQU   EEXSAS04
EEXSAS05 EQU   0
XASOPCOD EQU   EEXSAS05
XASWITCH EQU   EEXSAS05+1
XALTCHG  EQU   XASWITCH
XACOMPMS EQU   XASWITCH
XARESV   EQU   EEXSAS05+2
EEXSAS06 EQU   0
XAAVRANG EQU   EEXSAS06
XAAVRNG2 EQU   EEXSAS06+1
EQSIGN   EQU   0
CHAR     EQU   0
BUFCHAR  EQU   0
BUFTEXT  EQU   0
EVTAREA  EQU   0
DMNNO    EQU   EVTAREA
FLAGS    EQU   EVTAREA+1
NEWMIN   EQU   FLAGS
NEWMAX   EQU   FLAGS
MINNO    EQU   EVTAREA+2
MAXNO    EQU   EVTAREA+3
CMDBUF   EQU   0
TEXTLEN  EQU   CMDBUF
WTOMSG   EQU   0
DMNO     EQU   WTOMSG+16
TRTCHAR  EQU   0
DMY      EQU   0
ID       EQU   0
LEN      EQU   0
PTR      EQU   0
NUMBER   EQU   0
PSARSVTE EQU   PSARSVT
CVTPTR   EQU   FLCCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
VALMAP   EQU   MINNO
FLC      EQU   PSA
*                                      START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
TEXT     EQU   WTOMSG+20
KEYW     EQU   WTOMSG+12
MSGNO    EQU   WTOMSG+4
MCSFLAG  EQU   WTOMSG+2
MSGLEN   EQU   WTOMSG
BUFFER   EQU   CMDBUF+4
RSVD     EQU   CMDBUF+2
WT       EQU   EVTAREA+4
@NM00034 EQU   FLAGS
NEWWT    EQU   FLAGS
XAARNG16 EQU   XAAVRNG2
XAARNG15 EQU   XAAVRNG2
XAARNG14 EQU   XAAVRNG2
XAARNG13 EQU   XAAVRNG2
XAARNG12 EQU   XAAVRNG2
XAARNG11 EQU   XAAVRNG2
XAARNG10 EQU   XAAVRNG2
XAARNG9  EQU   XAAVRNG2
XAARNG8  EQU   XAAVRANG
XAARNG7  EQU   XAAVRANG
XAARNG6  EQU   XAAVRANG
XAARNG5  EQU   XAAVRANG
XAARNG4  EQU   XAAVRANG
XAARNG3  EQU   XAAVRANG
XAARNG2  EQU   XAAVRANG
XAARNG1  EQU   XAAVRANG
XARTCODE EQU   EEXSAS05+6
XACMDATH EQU   EEXSAS05+4
XALTPTR  EQU   EEXSAS05+3
XACRT2   EQU   XARESV
XACENDCK EQU   XARESV
XARES1   EQU   XASWITCH
XASMF44  EQU   XASWITCH
XASMF42  EQU   XASWITCH
XAHRDREQ EQU   XASWITCH
XASTHDCP EQU   XACOMPMS
XAINHDCP EQU   XALTCHG
XAHRDCMD EQU   XASWITCH
XAROUT   EQU   XASWITCH
XALTCON  EQU   XASOPCOD
XACMD    EQU   XASOPCOD
XALTCOM  EQU   XASOPCOD
XARESB   EQU   XASOPCOD
XAOFF    EQU   XASOPCOD
XAON     EQU   XASOPCOD
XARESA   EQU   XASOPCOD
XACON    EQU   XASOPCOD
XAXSACB  EQU   EEXSAS04+4
XAXUTME  EQU   EEXSAS04+2
XAXFREE  EQU   EEXSAS04+1
@NM00033 EQU   XAXMASK
XAXTSL   EQU   XAXMASK
XAXTS    EQU   XAXMASK
@NM00032 EQU   XAXMASK
XAXJOBSL EQU   XAXMASK
XAXJOBS  EQU   XAXMASK
XASOPTR  EQU   @NM00031+1
XASTSAVE EQU   @NM00031
XASPLS3  EQU   EEXSAS03+3
XASSDS8  EQU   XASDS
XASSDS7  EQU   XASDS
XASSDS6  EQU   XASDS
XASSDS5  EQU   XASDS
XASSDS4  EQU   XASDS
XASSDS3  EQU   XASDS
XASSDS2  EQU   XASDS
XASSDS1  EQU   XASDS
XASDID   EQU   EEXSAS03+1
XASCID   EQU   EEXSAS03
XACAHOLD EQU   EEXSAS02+2
XADRES1  EQU   EEXSAS02+1
XAUBLANK EQU   XADUSWIT
XAOUNIT  EQU   XADUSWIT
XAIOCOMP EQU   XADUSWIT
XARES3   EQU   XADUSWIT
XAUDVC   EQU   XADUSWIT
XARES2   EQU   XADUSWIT
XAIPAREN EQU   XADUSWIT
XAXPAREN EQU   XADUSWIT
@NM00030 EQU   EEXSAS01+44
XAT      EQU   EEXSAS01+20
XAF      EQU   EEXSAS01+12
XAI      EQU   EEXSAS01+4
XAH      EQU   EEXSAS01
XASAVSDR EQU   XASAVSTR+68
XASAVSDQ EQU   XASAVSTR+64
XASAVSDP EQU   XASAVSTR+60
XASAVSDO EQU   XASAVSTR+56
XASAVSDN EQU   XASAVSTR+52
XASAVSDM EQU   XASAVSTR+48
XASAVSDL EQU   XASAVSTR+44
XASAVSDK EQU   XASAVSTR+40
XASAVSDJ EQU   XASAVSTR+36
XASAVSDI EQU   XASAVSTR+32
XASAVSDH EQU   XASAVSTR+28
XASAVSDG EQU   XASAVSTR+24
XASAVSDF EQU   XASAVSTR+20
XASAVSDE EQU   XASAVSTR+16
XASAVSDD EQU   XASAVSTR+12
XASAVSDC EQU   XASAVSTR+8
XASAVSDB EQU   XASAVSTR+4
XASAVSDA EQU   XASAVSTR
XASAVLC4 EQU   XASAVLOX+12
XASAVLC3 EQU   XASAVLOX+8
XASAVLC2 EQU   XASAVLOX+4
XASAVLC1 EQU   XASAVLOX
XAK      EQU   XASVRB+44
@NM00029 EQU   XASVRB+41
XAN      EQU   @NM00028
XAP      EQU   XSA
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00026 EQU   CVTFIX+248
@NM00025 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00024 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00023 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00022 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00021 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00020 EQU   FLCFSA
@NM00019 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00018 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00017 EQU   FLCIOA
@NM00016 EQU   FLCMCLA+15
@NM00015 EQU   FLCMCLA+14
@NM00014 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00013 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00012 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00011 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00010 EQU   FLCPER
@NM00009 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00008 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00007 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00006 EQU   FLCPIILC
@NM00005 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00004 EQU   FLCSVILC
@NM00003 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00002 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00001 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RF00124 EQU   @RC00122
@RC00145 EQU   @EL00006
@RF00162 EQU   @EL00007
@RF00177 EQU   @EL00008
@RC00169 EQU   @EL00008
@ENDDATA EQU   *
         END   IEE8603D,(C'PLS2259',0701,76105)
