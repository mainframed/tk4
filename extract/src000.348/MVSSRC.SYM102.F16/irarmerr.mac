         TITLE 'IRARMERR - SYSTEM RESOURCES MANAGER FUNCTIONAL RECOVERY*
               Y        '
IRARMERR CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
IRARMRR1 DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00029-IRARMRR1)
         ENTRY IRARMRR1
IRARMRR2 DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00041-IRARMRR2)
         ENTRY IRARMRR2
         DROP  @15
@PROLOG  BALR  @10,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@10                                         0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
*                                                                  0029
*/********************************************************************/
*/*                                                                  */
*/*  ENTRY POINT NAME : IRARMRR1                                     */
*/*                                                                  */
*/*  FUNCTION :                                                      */
*/*  FUNCTIONAL RECOVERY FOR SRM ENTERED FOR GLOBALLY LOCKED ENTRIES */
*/*                                                                  */
*/********************************************************************/
*                                                                  0029
*IRARMRR1:                                                         0029
*   ENTRY;                                                         0029
*                                                                  0029
@EP00029 DS    0H                                                  0030
*/*  SWITCH TO SRM PROTECT KEY                                       */
*                                                                  0030
*   GEN( MODESET EXTKEY=SRM );                                     0030
*                                                                  0030
          MODESET EXTKEY=SRM
*/*  SAVE ADDRESS OF WORK AREA PASSED FROM RTM VIA REG 0             */
*/*  SAVE RTM'S RETURN ADDRESS                                       */
*                                                                  0031
*   RMR2WKPT=R0;                    /* ADDR OF WORK AREA             */
         LR    RMR2WKPT,R0                                         0031
*   RMR2SRTN=RTNREG;                /* RTM'S RETURN ADDRESS          */
         ST    RTNREG,RMR2SRTN(,RMR2WKPT)                          0032
*   RESPECIFY                                                      0033
*     RTNREG UNRSTD;                                               0033
*   CALL RMRR2INT;                  /* INITIALIZATION                */
         BAL   @14,RMRR2INT                                        0034
*/*  IF RRPA HAS NOT BEEN INITIALIZED OR IF THE ERROR IS RECURSIVE,  */
*/*  PERCOLATE THE ERROR                                             */
*/*  OTHERWISE, RETRY THE ROUTINE THAT WAS IN CONTROL AT THE TIME    */
*/*  OF ERROR                                                        */
*                                                                  0035
*   IF RRPAEPA=ZERO×RRPARCI='1'B THEN/* RRPA IS NOT INITIALIZED OR 0035
*                                      RETRY HAS BEEN ATTEMPTED      */
         L     @14,RRPAEPA(,RRPAPTR)                               0035
         LTR   @14,@14                                             0035
         BZ    @RT00035                                            0035
         TM    RRPARCI(RRPAPTR),B'00000001'                        0035
         BO    @RT00035                                            0035
*     GO TO RMRR2PER;               /* PERCOLATE ERROR               */
*   ELSE                            /* RETRY HAS NOT BEEN ATTEMPTED  */
*     DO;                                                          0037
*       RMEPPTR=RRPAEPA;            /* ADDR OF RMEP                  */
         LR    RMEPPTR,@14                                         0038
*       GO TO RMRR2RTR;             /* RETRY ERROR                   */
         B     RMRR2RTR                                            0039
*     END;                                                         0040
*                                                                  0041
*/********************************************************************/
*/*                                                                  */
*/*  ENTRY POINT NAME : IRARMRR2                                     */
*/*                                                                  */
*/*  FUNCTION :                                                      */
*/*  FUNCTIONAL RECOVERY FOR SRM ENTERED FOR NON-GLOBALLY LOCKED     */
*/*  ENTRIES                                                         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0041
*IRARMRR2:                                                         0041
*   ENTRY;                                                         0041
*                                                                  0041
@EP00041 DS    0H                                                  0042
*/*  SWITCH TO SRM PROTECT KEY                                       */
*                                                                  0042
*   GEN( MODESET EXTKEY=SRM );                                     0042
*                                                                  0042
          MODESET EXTKEY=SRM
*/*  SAVE ADDRESS OF WORK AREA PASSED FROM RTM VIA REG 0             */
*/*  SAVE RTM'S RETURN ADDRESS                                       */
*                                                                  0043
*   RESPECIFY                                                      0043
*     RTNREG RSTD;                                                 0043
*   RMR2WKPT=R0;                    /* ADDR OF WORK AREA             */
         LR    RMR2WKPT,R0                                         0044
*   RMR2SRTN=RTNREG;                /* RTM'S RETURN ADDRESS          */
         ST    RTNREG,RMR2SRTN(,RMR2WKPT)                          0045
*   RESPECIFY                                                      0046
*     RTNREG UNRSTD;                                               0046
*   RESPECIFY                                                      0047
*     R0 UNRSTD;                                                   0047
*   CALL RMRR2INT;                  /* INITIALIZATION                */
         BAL   @14,RMRR2INT                                        0048
*/*  IF MF1 IS ACTIVE BUT THE ADDRESS OF THE WORKLOAD ACTIVITY       */
*/*  MEASUREMENT TABLE (WAMT) OR THE ADDRESS OF THE WORKLOAD         */
*/*  ACTIVITY REPORT ROUTINE (IRARMWAR) IS INVALID, TERMINATE MF1.   */
*                                                                  0049
*   IF RMCTMFA='1'B                 /* MF1 IS ACTIVE                 */
*       &RRPAOPT='1'B               /* HOLDING SRM LOCK              */
*     THEN                          /* TEST IF NEED TO TERMINATE MF1 */
         TM    RMCTMFA(RMCTPTR),B'10000000'                        0049
         BNO   @RF00049                                            0049
         TM    RRPAOPT(RRPAPTR),B'00000010'                        0049
         BNO   @RF00049                                            0049
*     DO;                                                          0050
*       BLKPTR=RMCTWAMT;            /* ADDR OF WORKLOAD ACTIVITY   0051
*                                      MEASUREMENT TABLE             */
         L     BLKPTR,RMCTWAMT(,RMCTPTR)                           0051
*       CALL RMRR2VFB;              /* VERIFY ADDRESS                */
         BAL   @14,RMRR2VFB                                        0052
*       IF RTNCOD^=ZERO THEN        /* ADDRESS IS INVALID            */
         LTR   RTNCOD,RTNCOD                                       0053
         BNZ   @RT00053                                            0053
*         GO TO RMRR2WAT;           /* TERMINATE MF1                 */
*       ELSE                        /* WAMT ADDR IS VALID            */
*         DO;                                                      0055
*           WAMTPTR=RMCTWAMT;       /* ADDR OF WORKLOAD ACTIVITY   0056
*                                      MEASUREMENT TABLE             */
         L     WAMTPTR,RMCTWAMT(,RMCTPTR)                          0056
*           BLKPTR=WAMTWAR;         /* ADDR OF IRARMWAR              */
         L     BLKPTR,WAMTWAR(,WAMTPTR)                            0057
*           CALL RMRR2VFB;          /* VERIFY ADDRESS                */
         BAL   @14,RMRR2VFB                                        0058
*           IF RTNCOD=ZERO THEN     /* ADDR IS VALID                 */
         LTR   RTNCOD,RTNCOD                                       0059
         BZ    @RT00059                                            0059
*             GO TO RMRR2CKA;       /* CONTINUE PROCESSING           */
*         END;                                                     0061
*RMRR2WAT:                                                         0062
*       ;                           /* TERMINATE MF1                 */
RMRR2WAT DS    0H                                                  0063
*       RMCTMFA='0'B;               /* DEACTIVATE MF1                */
*       RMCTSTW='0'B;               /* STOPPED WAR COLLECTION        */
         NI    RMCTMFA(RMCTPTR),B'01111011'                        0064
*       RMCTMFS='0'B;               /* STOPPED WAR COLLECTION      0065
*                                                            @Z40BPCH*/
         NI    RMCTMFS(RMCTPTR),B'10111111'                        0065
*     END;                                                         0066
*                                                                  0066
*/*  IF ABEND HAS BEEN ISSUED BY SYSTEM RESOURCES MANAGER, OR        */
*/*  IF ERROR RECOVERY IS ENTERED RECURSIVELY DUE TO THE DEPRESSED   */
*/*  CONSOLE RESTART KEY, RETURN CONTROL TO RTM TO PERCOLATE THE     */
*/*  ERROR                                                           */
*                                                                  0067
*RMRR2CKA:                                                         0067
*   ;                               /* CHECK ABEND CODE              */
@RF00049 DS    0H                                                  0067
RMRR2CKA DS    0H                                                  0068
*   IF RMR2SC2(2:2)=RMABENDC        /* ABEND ISSUED BY SRM           */
*       ×(SDWARKEY='1'B&RRPARFI='1'B)/* CONSOLE RESTART KEY IS     0068
*                                      DEPRESSED RECURSIVELY         */
*     THEN                          /* PERCOLATE ERROR               */
         CLC   RMR2SC2+1(1,RMR2WKPT),RMABENDC                      0068
         BE    @RT00068                                            0068
         TM    SDWARKEY(SDWAPTR),B'00100000'                       0068
         BNO   @RF00068                                            0068
         TM    RRPARFI(RRPAPTR),B'00000010'                        0068
         BNO   @RF00068                                            0068
@RT00068 DS    0H                                                  0069
*     DO;                                                          0069
*       IF(RMR2SC2=RMABC15F&SDWAGR15=OUCBERR)/* ABEND CODE=15F &   0070
*                                      REASON CODE=OUCBERR           */
*         THEN                      /* OUCB IS INVALID               */
         CLC   RMR2SC2(2,RMR2WKPT),RMABC15F                        0070
         BNE   @RF00070                                            0070
         CLC   SDWAGR15(4,SDWAPTR),@CF00070                        0070
         BNE   @RF00070                                            0070
*         DO;                       /* TEST IF NECESSARY TO SET    0071
*                                      OUCBINV BIT OFF       @Z40BPCJ*/
*           OUCBPTR=SDWAGR04;       /* REG 4 AT TIME OF 15F ABEND    */
         L     OUCBPTR,SDWAGR04(,SDWAPTR)                          0072
*           BLKPTR=OUCBPTR;         /* ADDR OF OUCB TO BE VERIFIED   */
         LR    BLKPTR,OUCBPTR                                      0073
*           CALL RMRR2VFB;          /* TEST IF ADDR WILL CAUSE PAGE
*                                      EXCEPTION                     */
         BAL   @14,RMRR2VFB                                        0074
*           IF RTNCOD=ZERO          /* ADDR OF OUCB IS VALID         */
*               &OUCBPTR^=RMCTOUCB  /* OUCB IS NOT THE PREASSEMBLED
*                                      OUCB                          */
*               &OUCBNAME='OUCB'    /* OUCB IS VALID OUCB            */
*             THEN                  /* USER WAS ABENDED BECAUSE ITS
*                                      OUCBINV BIT WAS ON    @Z40BPCJ*/
         LTR   RTNCOD,RTNCOD                                       0075
         BNZ   @RF00075                                            0075
         C     OUCBPTR,RMCTOUCB(,RMCTPTR)                          0075
         BE    @RF00075                                            0075
         CLC   OUCBNAME(4,OUCBPTR),@CC02382                        0075
         BNE   @RF00075                                            0075
*             OUCBINV='0'B;         /* SET OUCBINV BIT OFF   @Z40BPCH*/
         NI    OUCBINV(OUCBPTR),B'11101111'                        0076
*           RMR2SC2=RMABC25F;       /* CHANGE ABEND CODE TO 25F      */
@RF00075 MVC   RMR2SC2(2,RMR2WKPT),RMABC25F                        0077
*         END;                                                     0078
*       GO TO RMRR2PER;             /* PERCOLATE THE ERROR           */
         B     RMRR2PER                                            0079
*     END;                                                         0080
*                                                                  0080
*/*  IF THE ERROR OCCURRED IN THE MF1 TASK AND THE WAMT POINTER IS   */
*/*  VALID, ABTERM THE MF1 TASK.  IF SRM AND MF1 ARE RUNNING IN THE  */
*/*  SAME ADDRESS SPACE, CHANGE THE COMPLETION CODE TO 25F AND       */
*/*  PERCOLATE THE ERROR.                                            */
*                                                                  0081
*   IF RRPAWAR='1'B THEN            /* WORKLOAD ACTIVITY WAS RUNNING */
@RF00068 TM    RRPAWAR(RRPAPTR),B'01000000'                        0081
         BNO   @RF00081                                            0081
*     DO;                                                          0082
*       WAMTPTR=RMCTWAMT;           /* ADDR OF WORKLOAD ACTIVITY   0083
*                                      MEASUREMENT TABLE             */
         L     WAMTPTR,RMCTWAMT(,RMCTPTR)                          0083
*       BLKPTR=WAMTPTR;             /* ADDR OF WAMT                  */
         LR    BLKPTR,WAMTPTR                                      0084
*       CALL RMRR2VFB;              /* VERIFY ADDRESS                */
         BAL   @14,RMRR2VFB                                        0085
*       IF RTNCOD=ZERO THEN         /* WAMT ADDRESS IS VALID         */
         LTR   RTNCOD,RTNCOD                                       0086
         BNZ   @RF00086                                            0086
*         DO;                                                      0087
*           TCBPTR=WAMTTCB;         /* ADDR OF MF1'S TCB             */
         L     TCBPTR,WAMTTCB(,WAMTPTR)                            0088
*           ASIDNUM=WAMTASD;        /* ASID OF MEMORY IN WHICH MF1 0089
*                                      WAS STARTED                   */
         L     ASIDNUM,WAMTASD(,WAMTPTR)                           0089
*           RESPECIFY                                              0090
*            (GPR00P,                                              0090
*             GPR01P,                                              0090
*             GPR14P,                                              0090
*             GPR15P) RSTD;                                        0090
*           WKREGC=RMR2SCC;         /* COMPLETION CODE               */
         L     WKREGC,RMR2SCC(,RMR2WKPT)                           0091
*           GEN REFS(TCBPTR,ASIDNUM,CVTBTERM);                     0092
         CALLRTM TYPE=ABTERM,COMPCOD=(WKREGC),TCB=(TCBPTR),           XX
               ASID=(ASIDNUM)
*           RESPECIFY                                              0093
*            (GPR00P,                                              0093
*             GPR01P,                                              0093
*             GPR14P,                                              0093
*             GPR15P) UNRSTD;                                      0093
*           RMCTPTR=CVTOPCTP;       /* RESTORE RMCT PTR              */
         L     @14,CVTPTR                                          0094
         L     RMCTPTR,CVTOPCTP(,@14)                              0094
*           IF RRPAASD=ASIDNUM THEN /* ERROR OCCURRED IN SYSEVENT  0095
*                                      ISSUER'S ADDRESS SPACE        */
         LH    @14,RRPAASD(,RRPAPTR)                               0095
         N     @14,@CF02451                                        0095
         CR    ASIDNUM,@14                                         0095
         BNE   @RF00095                                            0095
*             DO;                                                  0096
*               IF RMR2SC2^=RMABC15F THEN/* IF COMPLETION CODE IS NOT
*                                      15F                           */
         CLC   RMR2SC2(2,RMR2WKPT),RMABC15F                        0097
         BE    @RF00097                                            0097
*                 RMR2SC2=RMABC25F; /* CHANGE COMPLETION CODE TO 25F */
         MVC   RMR2SC2(2,RMR2WKPT),RMABC25F                        0098
*               GO TO RMRR2PER;     /* PERCOLATE ERROR               */
         B     RMRR2PER                                            0099
*             END;                                                 0100
*         END;                                                     0101
@RF00095 DS    0H                                                  0102
*     END;                                                         0102
*                                                                  0102
@RF00086 DS    0H                                                  0103
*/*  IF SET IPS IS ACTIVE & THE SYSEVENT ISSUER IS IN THE MASTER     */
*/*  SCHEDULER'S ADDRESS SPACE (SET IPS TASK IS STARTED IN THIS      */
*/*  ADDRESS SPACE) AND IF THE ABEND CODE IS NOT '15F', CHANGE IT TO */
*/*  '25F'.                                                          */
*                                                                  0103
*   IF RRPAIPS='1'B                 /* SET IPS IS ACTIVE             */
*       &RRPAASD=MSASID             /* SYSEVENT ISSUER IS IN MASTER
*                                      SCHEDULER'S ADDR SPACE        */
*       &RMR2SC2^=RMABC15F THEN     /* COMPLETION CODE ^=15F         */
@RF00081 TM    RRPAIPS(RRPAPTR),B'00100000'                        0103
         BNO   @RF00103                                            0103
         CLC   RRPAASD(2,RRPAPTR),@CH00061                         0103
         BNE   @RF00103                                            0103
         CLC   RMR2SC2(2,RMR2WKPT),RMABC15F                        0103
         BE    @RF00103                                            0103
*     RMR2SC2=RMABC25F;             /* CHANGE COMPLETION CODE TO 25F */
         MVC   RMR2SC2(2,RMR2WKPT),RMABC25F                        0104
*/*  IF TRANSLATION EXCEPTION OR PROTECTION EXCEPTION HAS OCCURRED,  */
*/*  CHANGE THE COMPLETION CODE TO X'15F', PROVIDE REASON CODE,      */
*/*  VALIDATE SRM CONTROL BLOCKS AND PERCOLATE THE ERROR             */
*                                                                  0105
*   IF RRPACTL='0'B                 /* ERROR OCCURS IN SYSEVENT PROC */
*       &(SDWATEXC='1'B             /* TRANSLATION EXCEPTION         */
*       ×(SDWAPCHK='1'B&SDWAICD1=KEYCHK))/* PROTECTION EXCEPTION     */
*     THEN                          /* PERCOLATE ERROR               */
@RF00103 TM    RRPACTL(RRPAPTR),B'00001000'                        0105
         BNZ   @RF00105                                            0105
         TM    SDWATEXC(SDWAPTR),B'00000010'                       0105
         BO    @RT00105                                            0105
         TM    SDWAPCHK(SDWAPTR),B'01000000'                       0105
         BNO   @RF00105                                            0105
         CLC   SDWAICD1(1,SDWAPTR),KEYCHK                          0105
         BNE   @RF00105                                            0105
@RT00105 DS    0H                                                  0106
*     DO;                           /* PROVIDE REASON CODE           */
*       IF SDWATEXC='1'B THEN       /* PAGE EXCEPTION ERROR ?        */
         TM    SDWATEXC(SDWAPTR),B'00000010'                       0107
         BNO   @RF00107                                            0107
*         SDWAGR15=PAGEERR;         /* REASON CODE FOR PAGE EXCEPTION*/
         MVC   SDWAGR15(4,SDWAPTR),@CF02289                        0108
*       ELSE                        /* PROTECTION EXCEPTION ERROR    */
*         SDWAGR15=SKEYERR;         /* REASON CODE FOR PROTECTION  0109
*                                      EXCEPTION                     */
         B     @RC00107                                            0109
@RF00107 MVC   SDWAGR15(4,SDWAPTR),@CF00776                        0109
*       RMR2SC2=RMABC15F;                                          0110
@RC00107 MVC   RMR2SC2(2,RMR2WKPT),RMABC15F                        0110
*       RRPARCI='1'B;               /* SET FLAGS TO BYPASS RETRY     */
*       RRPARTI='1'B;                                              0112
         OI    RRPARCI(RRPAPTR),B'00000101'                        0112
*     END;                                                         0113
*                                                                  0113
*/*  IF THE ERROR IS BEING PERCOLATED FROM A ROUTINE IN ANOTHER      */
*/*  COMPONENT INVOKED BY THE SYSTEM RESOURCES MANAGER,              */
*/*  RESTORE THE REGS TO THE POINT AFTER THE INVOCATION AND SET      */
*/*  RETURN CODE TO INDICATE UNSUCCESSFUL RETURN FROM THE ROUTINE    */
*/*  AND LET SYSTEM RESOURCES MANAGER CONTINUE PROCESSING            */
*                                                                  0114
*   IF SDWAPERC='1'B                /* RECOVERY RTN IS BEING       0114
*                                      PERCOLATED TO                 */
*       ×SDWASTAF='1'B              /* PREVIOUS FRR FAILED           */
*     THEN                          /* PERCOLATE ERROR               */
@RF00105 TM    SDWAPERC(SDWAPTR),B'10010000'                       0114
         BZ    @RF00114                                            0114
*     DO;                                                          0115
*       RMR2REGP=ADDR(RMSAVE04);    /* ADDR OF SYSTEM RESOURCES MGR
*                                      SAVE AREA 4                   */
         L     RMR2REGP,RMCTRMSA(,RMCTPTR)                         0116
         LA    RMR2REGP,RMSAVE04(,RMR2REGP)                        0116
*       SDWASRSV=RMR2REGS;          /* SET UP REGS FOR RETRY IN RTCA */
         MVC   SDWASRSV(64,SDWAPTR),RMR2REGS(RMR2REGP)             0117
*       RMR2RTYP=ADDR(RMRR2SPR);    /* ADDR OF RETRY ROUTINE         */
         LA    RMR2RTYP,RMRR2SPR                                   0118
*       RRPARCI='1'B;               /* INDICATE RETRY IS ATTEMPTED   */
         OI    RRPARCI(RRPAPTR),B'00000001'                        0119
*       GO TO RMRR2RTY;             /* RETURN TO RTM FOR RETRY       */
         B     RMRR2RTY                                            0120
*     END;                                                         0121
*                                                                  0121
*/*  VALIDATE THE OUCB QUEUE                                 @Z40BPCJ*/
*                                                                  0122
*   CALL RMRR2VLD;                  /* VALIDATE QUEUES & CONTROL BLKS*/
@RF00114 BAL   @14,RMRR2VLD                                        0122
*/*  IF RETRY IS NOT POSSIBLE, PERCOLATE THE ERROR                   */
*                                                                  0123
*   IF RRPARTI='1'B×RRPAEPA=ZERO THEN/* RETRY IS NOT POSSIBLE        */
         TM    RRPARTI(RRPAPTR),B'00000100'                        0123
         BO    @RT00123                                            0123
         L     @14,RRPAEPA(,RRPAPTR)                               0123
         LTR   @14,@14                                             0123
         BZ    @RT00123                                            0123
*     GO TO RMRR2PER;               /* PERCOLATE THE ERROR           */
*                                                                  0125
*/*  DETERMINE THE LEVEL OF THE SYSTEM RESOURCES MGR STRUCTURE IN    */
*/*  WHICH THE ERROR OCCURRED, SO THAT THE APPROPRIATE SAVEAREA IS   */
*/*  USED TO RESTORE THE REGISTERS BEFORE CONTROL IS GIVEN TO THE    */
*/*  RETRY ROUTINE                                                   */
*                                                                  0125
*   RMR2REGP=ADDR(RMSAVE01);        /* ADDR OF SAVE AREA 1           */
         L     RMR2REGP,RMCTRMSA(,RMCTPTR)                         0125
*RMRR2RTT:                                                         0126
*   ;                               /* SET UP FOR RETRY              */
RMRR2RTT DS    0H                                                  0127
*   RMEPPTR=RRPAEPA;                /* ADDR OF RMEP BLOCK            */
         L     RMEPPTR,RRPAEPA(,RRPAPTR)                           0127
*   IF RMEPACN='1'B THEN            /* RMEP BLOCK IS IN EPDT         */
         TM    RMEPACN(RMEPPTR),B'00000001'                        0128
         BNO   @RF00128                                            0128
*     DO;                           /* ERROR IS IN ACTION ROUTINE    */
*       RMR2REGP=ADDR(RMSAVE02);    /* RESTORE REGS FROM SAVE AREA 2 */
         L     RMR2REGP,RMCTRMSA(,RMCTPTR)                         0130
         LA    RMR2REGP,RMSAVE02(,RMR2REGP)                        0130
*       RRPAEPA=RMR2REGP->RMSAVR15; /* REFRESH RRPAEPA FROM REG 15 OF
*                                      SAVE AREA 2                   */
         L     @14,RMSAVR15(,RMR2REGP)                             0131
         ST    @14,RRPAEPA(,RRPAPTR)                               0131
*     END;                                                         0132
*   ELSE                            /* RMEP BLOCK IS NOT IN EPDT     */
*     DO;                                                          0133
         B     @RC00128                                            0133
@RF00128 DS    0H                                                  0134
*       IF RMEPPRV=RMEPPTR THEN     /* THE RMEP FOR THE RTN AT THE 0134
*                                      TIME OF ERROR IS NOT FOUND IN
*                                      EPAT/EPDT                     */
         C     RMEPPTR,RMEPPRV(,RMEPPTR)                           0134
         BNE   @RF00134                                            0134
*         DO;                                                      0135
*                                                                  0135
*/*  THE ROUTINE IN CONTROL AT THE TIME OF ERROR IS NEITHER AN       */
*/*  ALGORITHM NOR AN ACTION ROUTINE.  IF RETRY HAS NOT BEEN         */
*/*  ATTEMPTED, SET UP REGS 2 & 3 FOR THE RETRY ROUTINE, THE ADDRESS */
*/*  OF WHICH IS IN THE RMEP BLOCK, AND RETURN TO RECOVERY           */
*/*  TERMINATION MANAGER REQUESTING RETRY.                           */
*/*  IF RETRY HAS BEEN ATTEMPTED, RETURN TO RECOVERY TERMINATION     */
*/*  MANAGER TO PERCOLATE THE ERROR.                                 */
*                                                                  0136
*           IF RRPARCI='0'B THEN    /* RETRY NOT ATTEMPTED           */
         TM    RRPARCI(RRPAPTR),B'00000001'                        0136
         BZ    @RT00136                                            0136
*             GO TO RMRR2RTR;       /* SET UP FOR RETRY              */
*           ELSE                    /* RETRY HAS BEEN ATTEMPTED      */
*             GO TO RMRR2PER;       /* PERCOLATE ERROR               */
         B     RMRR2PER                                            0138
*         END;                                                     0139
*     END;                                                         0140
*                                                                  0140
@RF00134 DS    0H                                                  0141
*/*  IF RETRY HAS NOT BEEN ATTEMPTED (ERROR RECURSION INDICATOR IS   */
*/*  OFF), SET UP THE REGISTERS FOR THE RETRY ROUTINE IN THE RTCA,   */
*/*  INDICATE RETRY HAS BEEN ATTEMPTED, RETURN TO RECOVERY           */
*/*  TERMINATION MANAGER REQUESTING RETRY.                           */
*/*  THE RETRY ROUTINE ADDRESS IS IN THE RMEP BLOCK.                 */
*/*  IF RETRY HAS BEEN ATTEMPTED (ERROR RECURSION INDICATOR IS ON),  */
*/*  RETRY THE SYSTEM RESOURCES MGR'S CONTROL ROUTINE IF THE CONTROL */
*/*  ROUTINE WAS IN CONTROL AT THE TIME OF ERROR.  OTHERWISE,        */
*/*  RETURN TO RECOVERY TERMINATION MANAGER TO PERCOLATE THE ERROR.  */
*                                                                  0141
*   IF RRPARCI='0'B THEN            /* RETRY HAS NOT BEEN ATTEMPTED  */
@RC00128 TM    RRPARCI(RRPAPTR),B'00000001'                        0141
         BNZ   @RF00141                                            0141
*     SDWASRSV=RMR2REGS;            /* MOVE REGISTERS FROM SAVEAREA
*                                      TO RTCA                       */
         MVC   SDWASRSV(64,SDWAPTR),RMR2REGS(RMR2REGP)             0142
*   ELSE                            /* RETRY HAS BEEN ATTEMPTED      */
*     DO;                                                          0143
         B     @RC00141                                            0143
@RF00141 DS    0H                                                  0144
*       IF RRPACTL='0'B             /* RETRY CONTROL RTN IS NOT    0144
*                                      POSSIBLE                      */
*         THEN                      /* RETRY IS NOT POSSIBLE         */
         TM    RRPACTL(RRPAPTR),B'00001000'                        0144
         BZ    @RT00144                                            0144
*         GO TO RMRR2PER;           /* PERCOLATE ERROR               */
*       ELSE                        /* RETRY CONTROL RTN IS POSSIBLE */
*         DO;                                                      0146
*           IF RRPARFI='0'B         /* TEST 2ND RETRY FLAG           */
*             THEN                  /* 2ND RETRY NOT ATTEMPTED       */
         TM    RRPARFI(RRPAPTR),B'00000010'                        0147
         BNZ   @RF00147                                            0147
*             RRPARFI='1'B;         /* INDICATE 2ND RETRY            */
         OI    RRPARFI(RRPAPTR),B'00000010'                        0148
*           ELSE                    /* 2ND RETRY HAS BEEN ATTEMPTED  */
*             RRPARTI='1'B;         /* INDICATE 3RD RETRY            */
         B     @RC00147                                            0149
@RF00147 OI    RRPARTI(RRPAPTR),B'00000100'                        0149
*           RMEPPTR=ADDR(RMEPBCTL); /* ADDR OF RMEP FOR RESOURCES  0150
*                                      MGR'S CONTROL RTN             */
@RC00147 LA    RMEPPTR,RMEPBCTL(,RMCTPTR)                          0150
*         END;                                                     0151
*     END;                                                         0152
*RMRR2RTR:                                                         0153
*   SDWASR02=RMCTPTR;               /* REG 2 FOR RETRY=ADDR OF SYSTEM
*                                      RESOURCES MGR'S CONTROL TABLE */
@RC00141 DS    0H                                                  0153
RMRR2RTR ST    RMCTPTR,SDWASR02(,SDWAPTR)                          0153
*   SDWASR03=RRPAPTR;               /* REG 3 FOR RETRY=ADDR OF ERROR
*                                      RECOVERY PARAMETER AREA       */
         ST    RRPAPTR,SDWASR03(,SDWAPTR)                          0154
*   RRPARCI='1'B;                   /* TURN ON RECURSION INDICATOR   */
         OI    RRPARCI(RRPAPTR),B'00000001'                        0155
*   RMR2RTYP=RMEPERA;               /* ADDR OF RETRY ROUTINE         */
         L     RMR2RTYP,RMEPERA(,RMEPPTR)                          0156
*   IF RMR2RTYP=ZERO                /* TEST IF RETRY RTN EXIST       */
*     THEN                          /* RETRY RTN DOES NOT EXIST      */
         LTR   RMR2RTYP,RMR2RTYP                                   0157
         BZ    @RT00157                                            0157
*     GO TO RMRR2PER;               /* PERCOLATE ERROR               */
*   RESPECIFY                                                      0159
*     RTNREG RSTD;                                                 0159
*RMRR2RTY:                                                         0160
*                                                                  0160
*/********************************************************************/
*/*                                                                  */
*/*  RETURN TO RECOVERY TERMINATION MANAGER REQUESTING:              */
*/*  RETRY AND RESTORE RETRY REGISTERS                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0160
*   DO;                             /* SETRP RC(SDWARETY)RETADDR(RMR2
*                                      RTYL)RETREGS(YES)WKAREA(SDWAPT
*                                      R)                            */
RMRR2RTY DS    0H                                                  0161
*     RESPECIFY                                                    0161
*      (GPR00P,                                                    0161
*       GPR01P,                                                    0161
*       GPR14P,                                                    0161
*       GPR15P) RSTD;                                              0161
*     GPR01P=SDWAPTR;                                              0162
         LR    GPR01P,SDWAPTR                                      0162
*     GPR01P->SDWARCDE=SDWARETY;    /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(GPR01P),X'04'                              0163
*     GPR01P->SDWARTYA=ADDR(RMR2RTYL);/* SAVE RETRY ADDRESS          */
         ST    RMR2RTYP,SDWARTYA(,GPR01P)                          0164
*     GPR01P->SDWAUPRG='1'B;        /* TURN ON RETREGS INDICATOR     */
         OI    SDWAUPRG(GPR01P),B'00001000'                        0165
*     RESPECIFY                                                    0166
*      (GPR00P,                                                    0166
*       GPR01P,                                                    0166
*       GPR14P,                                                    0166
*       GPR15P) UNRSTD;                                            0166
*   END;                                                           0167
*   RTNREG=RMR2SRTN;                /* RESTORE RTM RETURN ADDRESS    */
         L     RTNREG,RMR2SRTN(,RMR2WKPT)                          0168
*   RETURN;                         /* RETURN TO RECOVERY TERMINATION
*                                      MANAGER                       */
@EL00001 DS    0H                                                  0169
@EF00001 DS    0H                                                  0169
@ER00001 BR    @14                                                 0169
*RMRR2PER:                                                         0170
*                                                                  0170
*/********************************************************************/
*/*                                                                  */
*/*  RETURN TO RECOVERY TERMINATION MANAGER REQUESTING:              */
*/*  CONTINUE WITH TERMINATION                                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0170
*   DO;                             /* SETRP RC(SDWACWT)COMPCOD(RMR2S
*                                      C2,SYSTEM)WKAREA(SDWAPTR)     */
RMRR2PER DS    0H                                                  0171
*     RESPECIFY                                                    0171
*      (GPR00P,                                                    0171
*       GPR01P,                                                    0171
*       GPR14P,                                                    0171
*       GPR15P) RSTD;                                              0171
*     GPR01P=SDWAPTR;                                              0172
         LR    GPR01P,SDWAPTR                                      0172
*     GPR01P->SDWARCDE=SDWACWT;     /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0173
*     GPR14P=RMR2SC2;               /* ACCESS COMPLETION CODE        */
         LH    GPR14P,RMR2SC2(,RMR2WKPT)                           0174
         N     GPR14P,@CF02451                                     0174
*     GEN(SLL    14,12);            /* SHIFT TO SYSTEM COMPLETION  0175
*                                      CODE                          */
         SLL    14,12
*     GPR01P->SDWACMPC=GPR14P;      /* STORE COMPLETION CODE         */
         STCM  GPR14P,7,SDWACMPC(GPR01P)                           0176
*     RESPECIFY                                                    0177
*      (GPR00P,                                                    0177
*       GPR01P,                                                    0177
*       GPR14P,                                                    0177
*       GPR15P) UNRSTD;                                            0177
*   END;                                                           0178
*   RTNREG=RMR2SRTN;                /* RESTORE RTM RETURN ADDRESS    */
         L     RTNREG,RMR2SRTN(,RMR2WKPT)                          0179
*   RETURN;                         /* RETURN TO RECOVERY TERMINATION
*                                      MANAGER                       */
         B     @EL00001                                            0180
*   RESPECIFY                                                      0181
*    (ASCBPTR,                                                     0181
*     SOUCBPTR) UNRSTD;                                            0181
*   RESPECIFY                                                      0182
*     RTNREG RSTD;                                                 0182
*                                                                  0182
*/********************************************************************/
*/*                                                                  */
*/*  SUBROUTINE NAME : RMRR2INT                                      */
*/*                                                                  */
*/*  FUNCTION :                                                      */
*/*  INITIALIZATION FOR FRR ENTRY POINTS                             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0183
*RMRR2INT:                                                         0183
*   ;                               /* INITIALIZATION                */
RMRR2INT DS    0H                                                  0184
*   GEN REFS(RTNREG,RMR2WKPT);                                     0184
*                                                                  0184
RTNADDR  EQU   0                      OFFSET OF RETURN ADDR SAVE LOCN
         ST    RTNREG,RTNADDR(,RMR2WKPT) SAVE REG 14
*/*  OBTAIN ADDRESS OF ERROR RECOVERY PARAMETER AREA FROM RTCA,      */
*/*  THE ADDRESS OF WHICH IS IN REG 1 UPON ENTRY                     */
*                                                                  0185
*   RESPECIFY                                                      0185
*     GPR00P RSTD;                                                 0185
*   RESPECIFY                                                      0186
*     GPR01P RSTD;                                                 0186
*   SDWAPTR=GPR01P;                 /* ADDR OF RTCA                  */
         LR    SDWAPTR,GPR01P                                      0187
*   GPR01P=RMR2WKPT;                /* ADDR OF WORK AREA             */
         LR    GPR01P,RMR2WKPT                                     0188
*   RMCTPTR=CVTOPCTP;               /* ADDR OF SRM CONTROL TABLE     */
         L     @05,CVTPTR                                          0189
         L     RMCTPTR,CVTOPCTP(,@05)                              0189
*   WKREGB=RMCAFLGS&HIBITOFF;       /* FLAGS WITH RMCASAAF OFF     0190
*                                                            @ZA15788*/
         L     @05,RMCAFLGS(,RMCTPTR)                              0190
         LR    WKREGB,@05                                          0190
         N     WKREGB,@CF02302                                     0190
*   WKREGC=RMCAFLGS×HIBITON;        /* FLAGS WITH RMCASAAF ON      0191
*                                                            @ZA15788*/
         O     @05,@CF02300                                        0191
         LR    WKREGC,@05                                          0191
*   CS(WKREGB,WKREGC,RMCAFLGS);     /* IF RMCASAAF OFF, SAVEAREA IS
*                                      FREE. SET BIT ON AND USE S. A.
*                                                            @ZA15788*/
         CS    WKREGB,@12,RMCAFLGS(RMCTPTR)                        0192
*   BC(NOTOFF,SKIPDUMP);            /* FLAG ON. SKIP SDUMP   @ZA15788*/
         BC    7,SKIPDUMP                                          0193
*/*  LET REG 13 POINT TO AN 18-WORD SAVE AREA                        */
*                                                                  0194
*   SVEREG=ADDR(RMSAVE06);          /* POINT TO 6TH LEVEL SAVEAREA 0194
*                                                            @ZA15788*/
         L     SVEREG,RMCTRMSA(,RMCTPTR)                           0194
         LA    SVEREG,RMSAVE06(,SVEREG)                            0194
*/*  DUMP VIRTUAL STORAGE TO DUMP DATA SET                           */
*                                                                  0195
*   GPR01P=ADDR(RMR2SA02);          /* ADDR OF WORK AREA             */
         LA    GPR01P,RMR2SA02(,RMR2WKPT)                          0195
*   GPR01P->SDUMPARM=SDUMPLST;      /* CREATE SDUMP PARAMETER LIST   */
         MVC   SDUMPARM(64,GPR01P),SDUMPLST                        0196
*   ASIDNUM=ZERO;                   /* DUMP CURRENT ADDRESS SPACE    */
         SLR   ASIDNUM,ASIDNUM                                     0197
*   GEN REFS(ASIDNUM)( SDUMP ASID=(ASIDNUM),BRANCH=YES,MF=(E,(1)) );
          SDUMP ASID=(ASIDNUM),BRANCH=YES,MF=(E,(1))
*                                   /* DUMP                          */
*   RMCASAAF='0'B;                  /* INDICATE SAVEAREA AVAILABLE 0199
*                                                            @ZA15788*/
         NI    RMCASAAF(RMCTPTR),B'01111111'                       0199
*SKIPDUMP:                          /* SKIP HERE IF SAVEAREA BUSY  0200
*                                                            @ZA15788*/
*/*  REQUEST RECORDING AND FREEING THE SRM LOCK                      */
*                                                                  0200
*   DO;                             /* SETRP RECORD(YES)FRELOCK(SRM)W
*                                      KAREA(SDWAPTR)                */
SKIPDUMP DS    0H                                                  0201
*     RESPECIFY                                                    0201
*      (GPR00P,                                                    0201
*       GPR01P,                                                    0201
*       GPR14P,                                                    0201
*       GPR15P) RSTD;                                              0201
*     GPR01P=SDWAPTR;                                              0202
         LR    GPR01P,SDWAPTR                                      0202
*     GPR01P->SDWARCDE=0;           /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0203
*     GPR01P->SDWARCRD='1'B;        /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0204
*     GPR01P->SDWAACF4=GPR01P->SDWAACF4×'00000100'B;/* INITIALIZE  0205
*                                      LOCK FLAGS                    */
         OI    SDWAACF4(GPR01P),B'00000100'                        0205
*     RESPECIFY                                                    0206
*      (GPR00P,                                                    0206
*       GPR01P,                                                    0206
*       GPR14P,                                                    0206
*       GPR15P) UNRSTD;                                            0206
*   END;                                                           0207
*   RRPAPTR=SDWAPARM;               /* ADDR OF FRR PARAMETER AREA    */
         L     RRPAPTR,SDWAPARM(,SDWAPTR)                          0208
*/*  OBTAIN THE COMPLETION CODE FROM RTCA                            */
*                                                                  0209
*   RMR2SCC=SDWACMPC(1:2)/16;       /* SHIFT COMP CODE TO RIGHT      */
         SLR   @05,@05                                             0209
         ICM   @05,3,SDWACMPC(SDWAPTR)                             0209
         SRL   @05,4                                               0209
         ST    @05,RMR2SCC(,RMR2WKPT)                              0209
*/*  GET THE DISPLACEMENT OF THE RMEP BLOCK FROM IRARMCNS,           */
*/*  CONVERT IT TO EBCDIC AND STORE IT IN THE VARIABLE RECORDING     */
*/*  AREA IN THE RTCA.                                               */
*/*  STORE THE FUNCTIONAL RECOVERY MODULE NAME IN RTCA.              */
*                                                                  0210
*   RESPECIFY                                                      0210
*    (RMEPDSP1,                                                    0210
*     RMEPDSP2) RSTD;                                              0210
*   IF RRPAEPA^=ZERO THEN           /* ERROR RTNE PTR ^=0            */
         L     @05,RRPAEPA(,RRPAPTR)                               0211
         LTR   @05,@05                                             0211
         BZ    @RF00211                                            0211
*     DO;                           /* CALCULATE IRARMCNS OFFSET TO
*                                      RTNE PTR                      */
*       SDWAEBC='1'B;               /* INDICATE DATA TO BE DUMPED IN
*                                      EBCDIC                        */
         OI    SDWAEBC(SDWAPTR),B'01000000'                        0213
*       SDWAURAL=LENGTH(RMERRMSG);  /* LENGTH OF USER VARIABLE RECORD
*                                      AREA                          */
         MVI   SDWAURAL(SDWAPTR),X'27'                             0214
*       SDWAVRA(1:39)=RMERRMSG;     /* STORE ERROR INFORMATION MSG IN
*                                      USER VARIABLE RECORD AREA     */
         MVC   SDWAVRA(39,SDWAPTR),RMERRMSG                        0215
*       RMEPDSP1=RRPAEPA-RMCTPTR;   /* DISPLACEMENT OF RMEP BLOCK    */
         SLR   @05,RMCTPTR                                         0216
         LR    RMEPDSP1,@05                                        0216
*       WKREGB=RMR2ADRL;            /* NO. OF BITS TO BE CONVERTED   */
         LA    WKREGB,24                                           0217
*       WKREGC=RMR2CTRC;            /* INITIALIZE LOOP COUNT CONTROL */
         LA    WKREGC,8                                            0218
*       GEN REFS(RMR2SA02,RMR2WKPT,RMR2HEXT,RMEPDSP1,RMEPDSP2,WKREGB,
*           WKREGC);                                               0219
HALFBYTE EQU   4                   4 BITS
RMEPDSPL EQU   8                      LENGTH OF RMEP DISPLACEMENT
RMRR2CVH SRDL  RMEPDSP1,RMEPDSPL(WKREGB) CONVERT
         SLL   RMEPDSP1,HALFBYTE           TO
         SLDL  RMEPDSP1,HALFBYTE(WKREGB)     0X
         SRL   RMEPDSP2,HALFBYTE               FORM
         SR    WKREGB,WKREGC          DECREASE SHIFTS
         BNL   RMRR2CVH               BACK UNLESS 4
         STM   RMEPDSP1,RMEPDSP2,RMR2SA02(RMR2WKPT) ST INTO WKAREA
         TR    RMR2SA02(RMEPDSPL,RMR2WKPT),RMR2HEXT TRANSLATE TO
*                                     EBCDIC
*       SDWAVRA(37:39)=RMR2SA02(6:8);/* INSERT OFFSET INTO MSG       */
         MVC   SDWAVRA+36(3,SDWAPTR),RMR2SA02+5(RMR2WKPT)          0220
*     END;                                                         0221
*   SDWAREXN='IRARMERR';            /* FRR MODULE NAME               */
@RF00211 MVC   SDWAREXN(8,SDWAPTR),@CC02403                        0222
*   GEN REFS(RTNREG,RMR2WKPT);                                     0223
         L     RTNREG,RTNADDR(,RMR2WKPT) RESTORE REG 14
*   RETURN;                         /* RETURN TO CALLER              */
         B     @EL00001                                            0224
*   RESPECIFY                                                      0225
*    (RMEPDSP1,                                                    0225
*     RMEPDSP2) UNRSTD;                                            0225
*   RESPECIFY                                                      0226
*     RTNREG UNRSTD;                                               0226
*   RESPECIFY                                                      0227
*    (ASCBPTR,                                                     0227
*     SOUCBPTR) RSTD;                                              0227
*                                                                  0228
*/********************************************************************/
*/*                                                                  */
*/*  SUBROUTINE NAME : RMRR2VLD                                      */
*/*                                                                  */
*/*  FUNCTION :                                                      */
*/*  VALIDATE CONTROL BLOCKS REFERENCED BY THE SYSTEM RESOURCES      */
*/*  MANAGER                                                         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0228
*RMRR2VLD:                                                         0228
*   ;                               /* VALIDATION ROUTINE            */
RMRR2VLD DS    0H                                                  0229
*   RESPECIFY                                                      0229
*     GPR00P RSTD;                                                 0229
*   RESPECIFY                                                      0230
*     GPR01P RSTD;                                                 0230
*   RESPECIFY                                                      0231
*     GPR15P RSTD;                                                 0231
*   RESPECIFY                                                      0232
*     RTNCOD RSTD;                                                 0232
*                                                                  0232
*/*  SAVE REGISTERS IN SRM GLOBAL LOCK 5TH LEVEL SAVE AREA           */
*                                                                  0233
*   GEN REFS(GPR00P,GPR15P,SVEREG,RMCTPTR,RMCTRMSA,RMSAVE05);      0233
*                                                                  0233
         L     SVEREG,RMCTRMSA(,RMCTPTR)
         LA    SVEREG,RMSAVE05(,SVEREG)  5TH LEVEL SAVE AREA
         STM   GPR00P,GPR15P,0(SVEREG)  SAVE REGS
*/*  RE-HOOK THE QUEUES OF OUCB CONTROL BLOCKS USED BY THE SYSTEM    */
*/*  RESOURCES MANAGER                                               */
*                                                                  0234
*   QHDPPTR=ADDR(RMCTWTQE);         /* ADDR OF 1ST OUCB QUEUE HEADER
*                                      POINTER IN RMCT               */
         LA    QHDPPTR,RMCTWTQE(,RMCTPTR)                          0234
*   DO WKREG1=1 TO OUCBQNO;         /* RE-HOOK ALL OUCB QUEUES       */
         LA    WKREG1,1                                            0235
@DL00235 DS    0H                                                  0236
*     QHEADPTR=QHDP;                /* ADDR OF QUEUE HEADER BLOCK    */
         L     QHEADPTR,QHDP(,QHDPPTR)                             0236
*/*  RE-QUEUE THE OUCBS ACCORDING TO THE BACKWARD POINTERS UNTIL     */
*/*  THE QUEUE ADDRESS BLOCK IS REACHED                              */
*/*  AS LONG AS THE BACKWARD CHAIN IS VALID, IT WILL HAVE PRECEDENCE */
*/*  OVER THE FORWARD CHAIN.  IF EITHER THE FORWARD OR THE BACKWARD  */
*/*  CHAIN IS BAD, ONE WILL BE RECONSTRUCTED FROM THE OTHER.         */
*/*  IF BOTH ARE BAD, THEY WILL BE CONNECTED AT THEIR LAST VALID     */
*/*  POINTS.                                                         */
*                                                                  0237
*     SOUCBPTR=QHEADPTR;            /* ADDR OF NEXT OUCB ON QUEUE    */
         LR    SOUCBPTR,QHEADPTR                                   0237
*     OUCBPTR=QHEADPTR->OUCBBCK;    /* ADDR OF 1ST OUCB ON BACKWARD
*                                      CHAIN                         */
         L     OUCBPTR,OUCBBCK(,QHEADPTR)                          0238
*     DO WHILE(OUCBPTR^=QHEADPTR);  /* VALIDATE AN OUCB QUEUE        */
         B     @DE00239                                            0239
@DL00239 DS    0H                                                  0240
*       BLKPTR=OUCBPTR;             /* ADDR OF BLOCK TO BE VERIFIED  */
         LR    BLKPTR,OUCBPTR                                      0240
*       CALL RMRR2VFB;              /* VERIFY OUCB BLOCK             */
         BAL   @14,RMRR2VFB                                        0241
*       IF RTNCOD^=ZERO             /* ADDRESS IS INVALID            */
*           ×OUCBNAME^='OUCB'       /* OUCBNAME IN OUCB IS INVALID   */
*         THEN                      /* OUCB BLOCK IS INVALID         */
         LTR   RTNCOD,RTNCOD                                       0242
         BNZ   @RT00242                                            0242
         CLC   OUCBNAME(4,OUCBPTR),@CC02382                        0242
         BE    @RF00242                                            0242
@RT00242 DS    0H                                                  0243
*         DO;                       /* REMOVE IT FROM CHAIN          */
*/*  SCAN THE FORWARD CHAIN TO THE LAST VALID POINT, OR TO THE       */
*/*  "CURRENT" OUCB ON THE BACKWARD CHAIN                            */
*                                                                  0244
*           FOUCBPTR=QHEADPTR;      /* ADDR OF QUEUE HEADER          */
         LR    FOUCBPTR,QHEADPTR                                   0244
*           NOUCBPTR=QHEADPTR->OUCBFWD;/* NEXT OUCB ON FORWARD CHAIN */
         L     NOUCBPTR,OUCBFWD(,QHEADPTR)                         0245
*           DO WHILE((NOUCBPTR^=QHEADPTR)/* NOT END OF FORWARD CHAIN */
*                 &(NOUCBPTR^=OUCBPTR)/* NOT BAD OUCB ON BACKWARD  0246
*                                      CHAIN                         */
*                 &(NOUCBPTR^=SOUCBPTR));/* NOT CURRENT OUCB ON    0246
*                                      BACKWARD CHAIN                */
         B     @DE00246                                            0246
@DL00246 DS    0H                                                  0247
*             BLKPTR=NOUCBPTR;      /* ADDR OF BLOCK TO BE VERIFIED  */
         LR    BLKPTR,NOUCBPTR                                     0247
*             CALL RMRR2VFB;        /* VERIFY OUCB BLOCK             */
         BAL   @14,RMRR2VFB                                        0248
*             IF RTNCOD^=ZERO       /* ADDRESS IS INVALID            */
*                 ×OUCBNAME^='OUCB' /* OUCBNAME IN OUCB IS INVALID   */
*               THEN                /* OUCB BLOCK IS INVALID         */
         LTR   RTNCOD,RTNCOD                                       0249
         BNZ   @RT00249                                            0249
         CLC   OUCBNAME(4,OUCBPTR),@CC02382                        0249
         BNE   @RT00249                                            0249
*               GO TO RMRR2FCE;     /* FOUND BAD OUCB ON FORWARD   0250
*                                      CHAIN                         */
*             FOUCBPTR=NOUCBPTR;    /* NEXT OUCB ON FORWARD CHAIN    */
         LR    FOUCBPTR,NOUCBPTR                                   0251
*             NOUCBPTR=FOUCBPTR->OUCBFWD;/* FOLLOWING OUCB ON FORWARD
*                                      CHAIN                         */
         L     NOUCBPTR,OUCBFWD(,FOUCBPTR)                         0252
*           END;                                                   0253
@DE00246 CR    NOUCBPTR,QHEADPTR                                   0253
         BE    @DC00246                                            0253
         CR    NOUCBPTR,OUCBPTR                                    0253
         BE    @DC00246                                            0253
         CR    NOUCBPTR,SOUCBPTR                                   0253
         BNE   @DL00246                                            0253
@DC00246 DS    0H                                                  0254
*RMRR2FCE:                                                         0254
*           OUCBPTR=FOUCBPTR;       /* ADDR OF LAST VALID POINT IN 0254
*                                      FORWARD CHAIN                 */
RMRR2FCE LR    OUCBPTR,FOUCBPTR                                    0254
*           SOUCBPTR->OUCBBCK=OUCBPTR;/* HOOK FORWARD & BACKWARD   0255
*                                      CHAINS                        */
         ST    OUCBPTR,OUCBBCK(,SOUCBPTR)                          0255
*         END;                      /* COMPLETED REMOVING BAD OUCB   */
*       IF OUCBFWD^=SOUCBPTR THEN   /* FORWARD AND BACKWARD PTRS DO
*                                      NOT AGREE                     */
@RF00242 C     SOUCBPTR,OUCBFWD(,OUCBPTR)                          0257
         BE    @RF00257                                            0257
*         OUCBFWD=SOUCBPTR;         /* RECHAIN                       */
         ST    SOUCBPTR,OUCBFWD(,OUCBPTR)                          0258
*       IF OUCBPTR^=QHEADPTR        /* REACH END OF OUCB CHAIN ?     */
*         THEN                      /* NOT END OF OUCB CHAIN         */
@RF00257 CR    OUCBPTR,QHEADPTR                                    0259
         BE    @RF00259                                            0259
*         DO;                                                      0260
*           SOUCBPTR=OUCBPTR;                                      0261
         LR    SOUCBPTR,OUCBPTR                                    0261
*           OUCBPTR=SOUCBPTR->OUCBBCK;/* ADDR OF NEXT OUCB ON      0262
*                                      BACKWARD CHAIN                */
         L     OUCBPTR,OUCBBCK(,SOUCBPTR)                          0262
*         END;                                                     0263
*     END;                          /* COMPLETED RE-HOOKING ALL OUCBS
*                                      ON AN OUCB QUEUE              */
@RF00259 DS    0H                                                  0264
@DE00239 CR    OUCBPTR,QHEADPTR                                    0264
         BNE   @DL00239                                            0264
*/*  MAKE SURE THAT THE OUCBFWD IN THE QUEUE HEADER IS VALID         */
*                                                                  0265
*     IF OUCBFWD^=SOUCBPTR THEN     /* OUCBFWD IN QUEUE HEADER IS  0265
*                                      INVALID                       */
         C     SOUCBPTR,OUCBFWD(,OUCBPTR)                          0265
         BE    @RF00265                                            0265
*       OUCBFWD=SOUCBPTR;                                          0266
         ST    SOUCBPTR,OUCBFWD(,OUCBPTR)                          0266
*     QHDPPTR=QHDPPTR+LENGTH(QHDP); /* POINT TO NEXT QUEUE HEADER  0267
*                                      POINTER IN RMCT               */
@RF00265 AL    QHDPPTR,@CF00053                                    0267
*   END;                            /* COMPLETED VALIDATION OF ALL 0268
*                                      OUCB QUEUES                   */
         AL    WKREG1,@CF00061                                     0268
         C     WKREG1,@CF00292                                     0268
         BNH   @DL00235                                            0268
*/*  FOR EACH ADDRESS SPACE THAT IS MARKED VALID IN THE ADDRESS SPACE*/
*/*  VECTOR TABLE, VERIFY THAT THE ASCB FOR THAT ADDRESS SPACE       */
*/*  POINTS TO AN OUCB WHICH POINTS BACK TO THE ASCB, AND THAT THE   */
*/*  OUCB IS ON AN OUCB QUEUE.  IF THE ASCB DOES NOT POINT TO AN     */
*/*  OUCB, THEN IF THE ASCB IS ON THE READY QUEUE, CREATE AN OUCB,   */
*/*  OTHERWISE, LET THE ASCB POINT TO THE STANDARD PREASSEMBLED OUCB */
*/*  GET DISPATCHER LOCK                                             */
*                                                                  0269
*   GEN REFS(PSALITA,FLC);                                         0269
RMRR2GD1 SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,                        XX
               RELATED=(DISP,IRARMERR(RMRR2RD1))
*   ASVTPTR=CVTASVT;                /* ADDR OF ADDRESS SPACE VECTOR
*                                      TABLE                         */
         L     @14,CVTPTR                                          0270
         L     ASVTPTR,CVTASVT(,@14)                               0270
*   ASVTEPTR=ADDR(ASVTENTY);        /* ADDR OF 1ST ASVT ENTRY        */
         LA    ASVTEPTR,ASVTENTY(,ASVTPTR)                         0271
*   DO WKREGB=1 TO ASVTMAXU;        /* MAX NO. OF ADDRESS SPACES     */
         LA    WKREGB,1                                            0272
         B     @DE00272                                            0272
@DL00272 DS    0H                                                  0273
*     IF ASVTAVL='0'B THEN          /* ADDRESS SPACE IS VALID        */
         TM    ASVTAVL(ASVTEPTR),B'10000000'                       0273
         BNZ   @RF00273                                            0273
*       DO;                                                        0274
*         ASCBPTR=ASVTE;            /* ADDR OF ASCB                  */
         L     ASCBPTR,ASVTE(,ASVTEPTR)                            0275
*         BLKPTR=ASCBPTR;           /* ADDR OF BLOCK TO BE VERIFIED
*                                                            @Z40BPJC*/
         LR    BLKPTR,ASCBPTR                                      0276
*         CALL RMRR2VFB;            /* VERIFY ASCB BLOCK     @Z40BPJC*/
         BAL   @14,RMRR2VFB                                        0277
*         IF RTNCOD=ZERO&           /* ADDRESS IS VALID      @Z40BPJC*/
*             ASCBASCB='ASCB'       /* AND IT IS AN ASCB     @Z40BPJC*/
*           THEN                                                   0278
         LTR   RTNCOD,RTNCOD                                       0278
         BNZ   @RF00278                                            0278
         CLC   ASCBASCB(4,ASCBPTR),@CC02407                        0278
         BNE   @RF00278                                            0278
*           DO;                                                    0279
*             OUCBPTR=ASCBOUCB;     /* ADDR OF OUCB FROM ASCB        */
         L     OUCBPTR,ASCBOUCB(,ASCBPTR)                          0280
*             BLKPTR=OUCBPTR;       /* ADDR OF BLOCK TO BE VERIFIED  */
         LR    BLKPTR,OUCBPTR                                      0281
*             CALL RMRR2VFB;        /* VERIFY OUCB BLOCK             */
         BAL   @14,RMRR2VFB                                        0282
*             IF RTNCOD=ZERO        /* ADDRESS IS VALID              */
*                 &OUCBNAME='OUCB'  /* OUCBNAME IN OUCB IS VALID     */
*               THEN                /* ASCB POINTS TO AN OUCB        */
         LTR   RTNCOD,RTNCOD                                       0283
         BNZ   @RF00283                                            0283
         CLC   OUCBNAME(4,OUCBPTR),@CC02382                        0283
         BNE   @RF00283                                            0283
*               DO;                 /* VALIDATE THE OUCB             */
*                 IF OUCBPTR^=RMCTOUCB THEN/* ASCB DOES NOT POINT TO
*                                      THE STANDARD OUCB             */
         C     OUCBPTR,RMCTOUCB(,RMCTPTR)                          0285
         BE    @RF00285                                            0285
*                   DO;                                            0286
*                     IF OUCBASCB^=ASCBPTR/* OUCBASCB = ADDR OF ASCB
*                                      ?                             */
*                       THEN        /* NO                            */
         C     ASCBPTR,OUCBASCB(,OUCBPTR)                          0287
         BE    @RF00287                                            0287
*                       OUCBASCB=ASCBPTR;/* CHAIN ASCB & OUCB      0288
*                                      TOGETHER                      */
         ST    ASCBPTR,OUCBASCB(,OUCBPTR)                          0288
*                     CALL RMRR2CKQ;/* CHECK IF OUCB IS ON A QUEUE   */
@RF00287 BAL   @14,RMRR2CKQ                                        0289
*                   END;                                           0290
*               END;                                               0291
*             ELSE                  /* ASCB DOES NOT POINT TO AN OUCB*/
*               DO;                                                0292
         B     @RC00283                                            0292
@RF00283 DS    0H                                                  0293
*                 IF ASCBNOQ='0'B THEN/* OUCB MISSING FOR AN ASCB  0293
*                                      WHICH IS ON THE READY QUEUE   */
         TM    ASCBNOQ(ASCBPTR),B'10000000'                        0293
         BNZ   @RF00293                                            0293
*                   DO;                                            0294
*                     GPR00P=LENGTH(OUCB);/* LENGTH OF OUCB          */
         LA    GPR00P,136                                          0295
*                     CALL RMRR2GST;/* GET STORAGE FOR OUCB          */
         BAL   @14,RMRR2GST                                        0296
*                     IF RTNCOD=ZERO THEN/* GETMAIN SUCCESSFUL       */
         LTR   RTNCOD,RTNCOD                                       0297
         BNZ   @RF00297                                            0297
*                       DO;                                        0298
*                         OUCBPTR=GPR01P;/* ADDR OF OUCB             */
         LR    OUCBPTR,GPR01P                                      0299
*                         OUCB=RMCTOUCB->OUCB;/* INITIALIZE OUCB     */
         L     @14,RMCTOUCB(,RMCTPTR)                              0300
         MVC   OUCB(136,OUCBPTR),OUCB(@14)                         0300
*                         OUCBSTT='1'B;/* MARK USER IS START CREATED */
*                         OUCBDTA='1'B;/* MARK DATA LOSS             */
         OI    OUCBSTT(OUCBPTR),B'01000010'                        0302
*                         ASCBOUCB=OUCBPTR;/* CHAIN ASCB & OUCB      */
         ST    OUCBPTR,ASCBOUCB(,ASCBPTR)                          0303
*                         OUCBASCB=ASCBPTR;                        0304
         ST    ASCBPTR,OUCBASCB(,OUCBPTR)                          0304
*                         CALL RMRR2REQ;/* ENQUEUE OUCB BLOCK        */
         BAL   @14,RMRR2REQ                                        0305
*                       END;                                       0306
*                     ELSE          /* GETMAIN UNSUCCESSFUL          */
*                       ASCBOUCB=RMCTOUCB;/* ADDR OF STANDARD OUCB   */
         B     @RC00297                                            0307
@RF00297 L     @14,RMCTOUCB(,RMCTPTR)                              0307
         ST    @14,ASCBOUCB(,ASCBPTR)                              0307
*                   END;                                           0308
*                 ELSE              /* ASCB IS NOT ON READY QUEUE    */
*                   ASCBOUCB=RMCTOUCB;                             0309
         B     @RC00293                                            0309
@RF00293 L     @14,RMCTOUCB(,RMCTPTR)                              0309
         ST    @14,ASCBOUCB(,ASCBPTR)                              0309
*                 OUCBPTR=ASCBOUCB;                                0310
@RC00293 L     OUCBPTR,ASCBOUCB(,ASCBPTR)                          0310
*               END;                                               0311
*                                                                  0311
*/*  VALIDATE THE OUXB BLOCK FOR THIS ADDRESS SPACE                  */
*                                                                  0312
*             OUXBPTR=ASCBOUXB;                                    0312
@RC00283 L     OUXBPTR,ASCBOUXB(,ASCBPTR)                          0312
*             BLKPTR=OUXBPTR;       /* ADDR OF OUXB                  */
         LR    BLKPTR,OUXBPTR                                      0313
*             CALL RMRR2VFB;        /* VERIFY ADDRESS                */
         BAL   @14,RMRR2VFB                                        0314
*             IF RTNCOD^=ZERO       /* OUXB ADDR IS INVALID          */
*                 ×OUXBNAME^='OUXB' /* OUXBNAME IN OUXB IS INVALID   */
*               THEN                /* OUXB IS MISSING               */
         LTR   RTNCOD,RTNCOD                                       0315
         BNZ   @RT00315                                            0315
         CLC   OUXBNAME(4,OUXBPTR),@CC02411                        0315
         BE    @RF00315                                            0315
@RT00315 DS    0H                                                  0316
*               DO;                                                0316
*                 IF OUCBOUT='0'B×OUCBGOI='1'B×OUCBGOO='1'B THEN/* 0317
*                                      OUXB IS NEEDED                */
         TM    OUCBGOI(OUCBPTR),B'11000000'                        0317
         BNZ   @RT00317                                            0317
         TM    OUCBOUT(OUCBPTR),B'00000100'                        0317
         BO    @RF00317                                            0317
@RT00317 DS    0H                                                  0318
*                   DO;                                            0318
*                     GPR00P=LENGTH(OUXB);/* LENGTH OF OUXB          */
         LA    GPR00P,144                                          0319
*                     CALL RMRR2GST;/* GET STORAGE FOR OUXB          */
         BAL   @14,RMRR2GST                                        0320
*                     IF RTNCOD=ZERO THEN/* GETMAIN SUCCESSFUL       */
         LTR   RTNCOD,RTNCOD                                       0321
         BNZ   @RF00321                                            0321
*                       DO;                                        0322
*                         ASCBOUXB=GPR01P;                         0323
         ST    GPR01P,ASCBOUXB(,ASCBPTR)                           0323
*                         GPR01P->OUXB=''B;/* CLEAR OUXB             */
         XC    OUXB(144,GPR01P),OUXB(GPR01P)                       0324
*                         GPR01P->OUXBNAME='OUXB';/* INITIALIZE OUXB */
         MVC   OUXBNAME(4,GPR01P),@CC02411                         0325
*                         IF OUCBGOI='0'B&OUCBGOO='0'B THEN/* USER IS
*                                      IN CORE                       */
         TM    OUCBGOI(OUCBPTR),B'11000000'                        0326
         BNZ   @RF00326                                            0326
*                           OUCBDTA='1'B;/* MARK DATA LOSS           */
         OI    OUCBDTA(OUCBPTR),B'00000010'                        0327
*                       END;                                       0328
*                     ELSE          /* GETMAIN UNSUCCESSFUL          */
*                       ASCBOUXB=RMCTOUXB;/* ADDR OF STANDARD OUXB   */
         B     @RC00321                                            0329
@RF00321 L     @14,RMCTOUXB(,RMCTPTR)                              0329
         ST    @14,ASCBOUXB(,ASCBPTR)                              0329
*                   END;                                           0330
*                 ELSE              /* NO OUXB IS NEEDED             */
*                   ASCBOUXB=RMCTOUXB;/* ADDR OF STANDARD OUXB       */
         B     @RC00317                                            0331
@RF00317 L     @14,RMCTOUXB(,RMCTPTR)                              0331
         ST    @14,ASCBOUXB(,ASCBPTR)                              0331
*               END;                                               0332
@RC00317 DS    0H                                                  0333
*           END;                                                   0333
@RF00315 DS    0H                                                  0334
*       END;                                                       0334
@RF00278 DS    0H                                                  0335
*     ASVTEPTR=ASVTEPTR+LENGTH(ASVTENTY);/* POINT TO NEXT ASVT ENTRY */
@RF00273 AL    ASVTEPTR,@CF00053                                   0335
*   END;                            /* COMPLETED TRACKING OUCBS FOR
*                                      ALL VALID ADDRESS SPACES      */
         AL    WKREGB,@CF00061                                     0336
@DE00272 C     WKREGB,ASVTMAXU(,ASVTPTR)                           0336
         BNH   @DL00272                                            0336
*/*  RELEASE DISPATCHER LOCK                                         */
*                                                                  0337
*   GEN REFS(PSALITA,FLC);                                         0337
*                                                                  0337
RMRR2RD2 SETLOCK RELEASE,TYPE=DISP,RELATED=(DISP,IRARMERR(RMRR2GD2))
*/*  IF FRR IS RUN IN THE ADDRESS SPACE IN WHICH THE ERROR OCCURRED, */
*/*  ENSURE AN OUSB BLOCK FOR THIS ADDRESS SPACE EXISTS IF THE USER  */
*/*  IS IN-CORE.  IF THE OUSB DOES NOT EXIST, GETMAIN FROM           */
*/*  SUBPOOL 255 FOR AN OUSB.  IF GETMAIN IS UNSUCCESSFUL,           */
*/*  MARK USER AS INVALID                                    @Z40BPCH*/
*                                                                  0338
*   IF SDWAFMID=ZERO THEN           /* FRR HAS ADDRESSABILITY TO   0338
*                                      ERROR ADDRESS SPACE           */
         LH    @14,SDWAFMID(,SDWAPTR)                              0338
         N     @14,@CF02451                                        0338
         LTR   @14,@14                                             0338
         BNZ   @RF00338                                            0338
*     DO;                                                          0339
*       ASCBPTR=PSAAOLD;            /* ADDR OF ASCB OF CURRENT     0340
*                                      ADDRESS SPACE                 */
         L     ASCBPTR,PSAAOLD                                     0340
*       IF ASCBASID^=ZERO THEN      /* WAIT MEMORY HAS NO OUCB       */
         LH    @14,ASCBASID(,ASCBPTR)                              0341
         N     @14,@CF02451                                        0341
         LTR   @14,@14                                             0341
         BZ    @RF00341                                            0341
*         DO;                       /*                       @Z40BPCJ*/
*           OUCBPTR=ASCBOUCB;                                      0343
         L     OUCBPTR,ASCBOUCB(,ASCBPTR)                          0343
*           IF OUCBOUT='0'B         /* USER IS IN CORE               */
*             THEN                  /* CHECK IF OUSB IS INVALID      */
         TM    OUCBOUT(OUCBPTR),B'00000100'                        0344
         BNZ   @RF00344                                            0344
*             DO;                                                  0345
*               ASXBPTR=ASCBASXB;   /* ADDR OF ASXB                  */
         L     ASXBPTR,ASCBASXB(,ASCBPTR)                          0346
*               IF ASXBASXB='ASXB' THEN/* ASXB PTR IN ASCB IS VALID  */
         CLC   ASXBASXB(4,ASXBPTR),@CC02413                        0347
         BNE   @RF00347                                            0347
*                 DO;                                              0348
*                   OUSBPTR=ASXBOUSB;                              0349
         L     OUSBPTR,ASXBOUSB(,ASXBPTR)                          0349
*                   BLKPTR=OUSBPTR; /* ADDR OF OUSB                  */
         LR    BLKPTR,OUSBPTR                                      0350
*                   CALL RMRR2VFB;  /* VERIFY ADDRESS                */
         BAL   @14,RMRR2VFB                                        0351
*                   IF RTNCOD^=ZERO /* ADDRESS IS INVALID            */
*                       ×OUSBNAME^='OUSB'/* OUSBNAME IN OUSB IS    0352
*                                      INVALID                       */
*                     THEN          /* CONSTRUCT AN OUSB             */
         LTR   RTNCOD,RTNCOD                                       0352
         BNZ   @RT00352                                            0352
         CLC   OUSBNAME(4,OUSBPTR),@CC02414                        0352
         BE    @RF00352                                            0352
@RT00352 DS    0H                                                  0353
*                     DO;                                          0353
*                       GEN REFS(PSALITA,FLC);                     0354
RMRR2GLL SETLOCK OBTAIN,TYPE=LOCAL,MODE=COND,                         XX
               RELATED=(LOCAL,IRARMERR(RMRR2RLL))
*                       WKREGC=RTNCOD;/* SAVE RET CODE FROM   SETLOCK*/
         LR    WKREGC,RTNCOD                                       0355
*                       IF WKREGC=LOCKOBTN/* TEST SETLOCK RETURN CODE
*                                                            @Z40BPCJ*/
*                         THEN      /* LOCK HAS BEEN OBTAINED        */
         LTR   WKREGC,WKREGC                                       0356
         BNZ   @RF00356                                            0356
*                         DO;                                      0357
*                           GPR04P=PSATOLD;/* ADDR OF TCB            */
         L     GPR04P,PSATOLD                                      0358
*                           GPR07P=ASCBPTR;/* ADDR OF ASCB           */
         LR    GPR07P,ASCBPTR                                      0359
*                           DO;     /* GETMAIN (RC) LV(LENGTH(OUSB))
*                                      SP(OUSBSPNO) KEY(ZERO) BNDRY
*                                      BRANCH RTCD(GPR15P)           */
*                             RESPECIFY                            0361
*                              (GPR01F,                            0361
*                               GPR03F,                            0361
*                               GPR00F,                            0361
*                               GPR15F) RESTRICTED;                0361
*                             GPR01F=0;/* REG 1 MUST BE ZERO         */
         SLR   GPR01F,GPR01F                                       0362
*                             GPR03F=0;/* RC-TYPE GETMAIN            */
         SLR   GPR03F,GPR03F                                       0363
*                             GPR00F=LENGTH(OUSB);/* LENGTH REQUESTED*/
         LA    GPR00F,136                                          0364
*                             GPR03F=GPR03F×((OUSBSPNO)*256);/* SP IN
*                                      BYTE 2                        */
         O     GPR03F,@CF02441                                     0365
*                             GPR03F=GPR03F×((ZERO)*65536*16);/* KEY
*                                      IN BYTE 1                     */
*                             GPR03F=GPR03F×'00000004'X;/* PAGE BNDRY*/
         O     GPR03F,@CF02420                                     0367
*                             CALL CVTCRMN;/* BRANCH ENTRY POINT     */
         L     @14,CVTPTR                                          0368
         L     @15,CVTCRMN(,@14)                                   0368
         BALR  @14,@15                                             0368
*                             GPR15P=GPR15F;/* SET RETURN CODE       */
*                             RESPECIFY                            0370
*                              (GPR01F,                            0370
*                               GPR03F,                            0370
*                               GPR00F,                            0370
*                               GPR15F) UNRESTRICTED;              0370
*                           END;    /* GETMAIN (RC) LV(LENGTH(OUSB))
*                                      SP(OUSBSPNO) KEY(ZERO) BNDRY
*                                      BRANCH RTCD(GPR15P) CREATE AN
*                                      OUSB                          */
*                           ASXBPTR=ASCBASXB;/* RE-LOAD ASXBPTR      */
         L     ASXBPTR,ASCBASXB(,ASCBPTR)                          0372
*                           OUCBPTR=ASCBOUCB;/* RE-LOAD OUCBPTR      */
         L     OUCBPTR,ASCBOUCB(,ASCBPTR)                          0373
*                           IF RTNCOD=ZERO THEN/* GETMAIN SUCCESSFUL */
         LTR   RTNCOD,RTNCOD                                       0374
         BNZ   @RF00374                                            0374
*                             DO;                                  0375
*                               ASXBOUSB=GPR01P;/* ADDR OF NEW OUSB  */
         ST    GPR01P,ASXBOUSB(,ASXBPTR)                           0376
*                               GPR01P->OUSB=''B;/* ZERO OUSB        */
         XC    OUSB(136,GPR01P),OUSB(GPR01P)                       0377
*                               GPR01P->OUSBNAME='OUSB';/* INIT OUSB */
         MVC   OUSBNAME(4,GPR01P),@CC02414                         0378
*                               OUCBDTA='1'B;/* MARK DATA          0379
*                                      ACCUMULATION IMPACTED         */
         OI    OUCBDTA(OUCBPTR),B'00000010'                        0379
*                             END;                                 0380
*                           ELSE    /* GETMAIN IS UNSUCCESSFUL       */
*                             OUCBINV='1'B;/* MARK OUCB INVALID    0381
*                                                            @Z40BPCH*/
         B     @RC00374                                            0381
@RF00374 OI    OUCBINV(OUCBPTR),B'00010000'                        0381
*                           GEN REFS(PSALITA,FLC);                 0382
@RC00374 DS    0H                                                  0382
RMRR2RLL SETLOCK RELEASE,TYPE=LOCAL,RELATED=(LOCAL,IRARMERR(RMRR2GLL))
*                         END;                                     0383
*                       ELSE        /* OUSB PTR IS INVALID           */
*                         OUCBINV='1'B;/* MARK OUCB INVALID  @Z40BPCH*/
         B     @RC00356                                            0384
@RF00356 OI    OUCBINV(OUCBPTR),B'00010000'                        0384
*                     END;                                         0385
*                 END;                                             0386
*               ELSE                /* ASXBPTR IN ASCB IS INVALID    */
*                 OUCBINV='1'B;     /* MARK OUCB AS INVALID  @Z40BPCH*/
         B     @RC00347                                            0387
@RF00347 OI    OUCBINV(OUCBPTR),B'00010000'                        0387
*             END;                                                 0388
@RC00347 DS    0H                                                  0389
*         END;                      /*                       @Z40BPCJ*/
@RF00344 DS    0H                                                  0390
*     END;                                                         0390
@RF00341 DS    0H                                                  0391
*   GEN REFS(GPR00P,GPR15P,SVEREG,RMCTPTR,RMCTRMSA,RMSAVE05);      0391
@RF00338 DS    0H                                                  0391
         L     SVEREG,RMCTRMSA(,RMCTPTR)
         LA    SVEREG,RMSAVE05(,SVEREG)  5TH LEVEL SAVE AREA
         LM    GPR00P,GPR15P,0(SVEREG)  RESTORE REGS
*   RETURN;                         /* RETURN TO CALLER              */
         B     @EL00001                                            0392
*                                                                  0393
*/********************************************************************/
*/*                                                                  */
*/*  SUBROUTINE NAME : RMRR2GST                                      */
*/*                                                                  */
*/*  FUNCTION :                                                      */
*/*  GET STORAGE FROM SQA (SUBPOOL 245) FOR A CONTROL BLOCK.         */
*/*  WHEN THIS ROUTINE IS ENTERED, THE CALLER IS HOLDING THE DISP    */
*/*  LOCK.  THIS ROUTINE WILL RELEASE THE DISP LOCK BEFORE IT INVOKES*/
*/*  IRARMI04 ROUTINE TO GET STORAGE FOR THE CONTROL BLOCK.  IT THEN */
*/*  OBTAINS THE DISP LOCK AGAIN BEFORE CONTROL IS RETURNED TO THE   */
*/*  CALLER.                                                         */
*/*  INPUT  - REG 0 - SIZE OF CONTROL BLOCK                          */
*/*  OUTPUT - REG 15 - RETURN CODE = 0 IF STORAGE IS OBTAINED        */
*/*                                ^=0 IF STORAGE IS NOT OBTAINED    */
*/*           REG 1 - ADDR OF STORAGE IF RETURN CODE=0               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0393
*RMRR2GST:                                                         0393
*   ;                               /* GET SQA STORAGE SUBRTN        */
RMRR2GST DS    0H                                                  0394
*   GEN REFS(GPR00P,GPR15P,SVEREG,RMR2WKPT,RMR2SA01);              0394
         LA    SVEREG,RMR2SA01(,RMR2WKPT) SAVE AREA 1
         STM   GPR00P,GPR15P,0(SVEREG)  SAVE REGS
*   GEN REFS(PSALITA,FLC);                                         0395
RMRR2RD1 SETLOCK RELEASE,TYPE=DISP,                                   XX
               RELATED=(DISP,IRARMERR(RMRR2GD1))
*   GPR01P=GETCODE;                 /* GETMAIN REQUEST CODE          */
*                                                                  0396
         SLR   GPR01P,GPR01P                                       0396
*   /*****************************************************************/
*   /*                                                               */
*   /* ? IRACTLCL EPN(I04)                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0397
*   CALL RMSBI04->IRARMRTN;         /* INVOKE I04 SUBRTN             */
*                                                                  0397
         L     @15,RMSBI04(,RMCTPTR)                               0397
         BALR  @14,@15                                             0397
*   /*****************************************************************/
*   /*                                                               */
*   /* GET STORAGE, R0 - STORAGE SIZE                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0398
*   WKREG3=RTNCOD;                  /* SAVE RET CODE FORM IRARMI04   */
         LR    WKREG3,RTNCOD                                       0398
*   GEN REFS(PSALITA,FLC);                                         0399
RMRR2GD2 SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,                        XX
               RELATED=(DISP,IRARMERR(RMRR2RD2))
*   RTNCOD=WKREG3;                  /* RESTORE RET CODE FROM IRARMI04*/
         LR    RTNCOD,WKREG3                                       0400
*   RESPECIFY                                                      0401
*     RTNREG RSTD;                                                 0401
*   GEN REFS(GPR02P,RTNREG,SVEREG,RMR2WKPT,RMR2SA01);              0402
REG2SAVE EQU   8                      OFFSET OF REG 2 SAVE AREA
         LA    SVEREG,RMR2SA01(,RMR2WKPT) SAVE AREA 1
         LM    GPR02P,RTNREG,REG2SAVE(SVEREG) RESTORE REGS
*   RESPECIFY                                                      0403
*     RTNREG UNRSTD;                                               0403
*   RETURN;                         /* RETURN TO CALLER              */
         B     @EL00001                                            0404
*                                                                  0405
*/********************************************************************/
*/*                                                                  */
*/*  SUBROUTINE NAME : RMRR2CKQ                                      */
*/*                                                                  */
*/*  FUNCTION :                                                      */
*/*  SEARCH ALL OUCB QUEUES TO MAKE SURE THAT THE OUCB IS ON AN OUCB */
*/*  QUEUE.  IF IT IS NOT ON ANY ONE OF THE QUEUES, CALL USER STATE  */
*/*  CHANGE ROUTINE TO REPOSITION THE OUCB.                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0405
*RMRR2CKQ:                                                         0405
*   ;                               /* VALIDATE OUCB QUEUES SUBRTN   */
RMRR2CKQ DS    0H                                                  0406
*   GEN REFS(GPR00P,GPR15P,SVEREG,RMR2WKPT,RMR2SA01);              0406
         LA    SVEREG,RMR2SA01(,RMR2WKPT)  SAVE AREA 1
         STM   GPR00P,GPR15P,0(SVEREG)  SAVE REGS
*   QHDPPTR=ADDR(RMCTWTQE);         /* ADDR OF 1ST QUEUE HEADER PTR  */
         LA    QHDPPTR,RMCTWTQE(,RMCTPTR)                          0407
*   DO WKREG1=ONE TO OUCBQNO;       /* SEARCH ALL OUCB QUEUES        */
         LA    WKREG1,1                                            0408
@DL00408 DS    0H                                                  0409
*     QHEADPTR=QHDP;                /* ADDR OF QUEUE HEADER          */
         L     QHEADPTR,QHDP(,QHDPPTR)                             0409
*     OUCBPTR=QHEADPTR->OUCBFWD;    /* ADDR OF 1ST OUCB ON QUEUE     */
         L     OUCBPTR,OUCBFWD(,QHEADPTR)                          0410
*     DO WHILE(OUCBPTR^=QHEADPTR);  /* SEARCH OUCB QUEUE UNTIL END OF
*                                      QUEUE IS REACHED              */
         B     @DE00411                                            0411
@DL00411 DS    0H                                                  0412
*       IF OUCBPTR=ASCBOUCB THEN    /* FOUND OUCB IN QUEUE           */
         C     OUCBPTR,ASCBOUCB(,ASCBPTR)                          0412
         BE    @RT00412                                            0412
*         GO TO RMRR2FNQ;           /* EXIT                          */
*       ELSE                        /* OUCB NOT FOUND                */
*         OUCBPTR=OUCBFWD;          /* POINT TO NEXT OUCB IN QUEUE   */
         L     OUCBPTR,OUCBFWD(,OUCBPTR)                           0414
*     END;                          /* COMPLETED SEARCHING A QUEUE   */
@DE00411 CR    OUCBPTR,QHEADPTR                                    0415
         BNE   @DL00411                                            0415
*     QHDPPTR=QHDPPTR+LENGTH(QHDP); /* POINT TO NEXT QUEUE HEADER PTR*/
         AL    QHDPPTR,@CF00053                                    0416
*   END;                            /* COMPLETED SEARCHING ALL OUCB
*                                      QUEUES                        */
         AL    WKREG1,@CF00061                                     0417
         C     WKREG1,@CF00292                                     0417
         BNH   @DL00408                                            0417
*/*  OUCB IS NOT FOUND IN ANY OUCB QUEUE, ENQUEUE IT TO AN OUCB QUEUE*/
*                                                                  0418
*   OUCBPTR=ASCBOUCB;               /* ADDR OF OUCB                  */
         L     OUCBPTR,ASCBOUCB(,ASCBPTR)                          0418
*   CALL RMRR2REQ;                  /* ENQUEUE OUCB BLOCK            */
         BAL   @14,RMRR2REQ                                        0419
*/*  OUCB IS ON A QUEUE                                              */
*                                                                  0420
*RMRR2FNQ:                                                         0420
*   GEN REFS(GPR00P,GPR15P,SVEREG,RMR2WKPT,RMR2SA01);              0420
RMRR2FNQ DS    0H                                                  0420
*                                                 /* EXIT CODE      */
         LA    SVEREG,RMR2SA01(,RMR2WKPT)  SAVE AREA 1
         LM    GPR00P,GPR15P,0(SVEREG) RESTORE REGS
*   RETURN;                         /* RETURN TO CALLER              */
         B     @EL00001                                            0421
*                                                                  0422
*/********************************************************************/
*/*                                                                  */
*/*  SUBROUTINE NAME : RMRR2VFB                                      */
*/*                                                                  */
*/*  FUNCTION :                                                      */
*/*  VERIFY THAT THE INPUT PARAMETER CONTAINS A NON-ZERO ADDRESS     */
*/*  WHICH WILL NOT CAUSE PAGE EXCEPTION ERROR.                      */
*/*  INPUT - BLKPTR CONTAINS THE ADDRESS TO BE VERIFIED              */
*/*  OUTPUT - REG 15=0 IF THE ADDRESS IS VALID                       */
*/*                 =4 IF THE ADDRESS IS INVALID                     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0422
*RMRR2VFB:                                                         0422
*   ;                               /* VERIFY AN OUCB BLOCK SUBRTN   */
RMRR2VFB DS    0H                                                  0423
*   IF BLKPTR^=ZERO THEN            /* ADDRESS IS NON-ZERO           */
         LTR   BLKPTR,BLKPTR                                       0423
         BZ    @RF00423                                            0423
*     DO;                           /* TEST FOR PAGE EXCEPTION ERROR */
*       GEN REFS(BLKPTR,RTNCOD,RMRR2VFG);                          0425
BLKADDR  EQU   0                      OFFSET OF BLOCK ADDRESS
         LRA   RTNCOD,BLKADDR(BLKPTR) CAN ADDRESS BE TRANSLATED
         BE    RMRR2VFG               YES
*     END;                                                         0426
*   RTNCOD=FAILCODE;                /* RETURN UNSUCCESSFUL           */
@RF00423 LA    RTNCOD,4                                            0427
*   RETURN;                         /* RETURN TO CALLER              */
         B     @EL00001                                            0428
*RMRR2VFG:                                                         0429
*   ;                               /* ADDRESS IS VALID              */
RMRR2VFG DS    0H                                                  0430
*   RTNCOD=ZERO;                    /* RETURN SUCCESSFUL             */
         SLR   RTNCOD,RTNCOD                                       0430
*   RETURN;                         /* RETURN TO CALLER              */
         B     @EL00001                                            0431
*   RESPECIFY                                                      0432
*     RTNCOD UNRSTD;                                               0432
*                                                                  0433
*/********************************************************************/
*/*                                                                  */
*/*  SUBROUTINE NAME : RMRR2REQ                                      */
*/*                                                                  */
*/*  FUNCTION :                                                      */
*/*  ENQUEUE AN OUCB TO OUCB QUEUE                                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0433
*RMRR2REQ:                                                         0433
*   ;                               /* ENQUEUE OUCB SUBRTN           */
RMRR2REQ DS    0H                                                  0434
*   GEN REFS(GPR00P,GPR15P,SVEREG,RMR2WKPT,RMR2SA02);              0434
         LA    SVEREG,RMR2SA02(,RMR2WKPT)  SAVE AREA 2
         STM   GPR00P,GPR15P,0(SVEREG)  SAVE REGS
*   OUCBFWD=OUCBPTR;                /* QUEUE OUCB TO ITSELF          */
         ST    OUCBPTR,OUCBFWD(,OUCBPTR)                           0435
*   OUCBBCK=OUCBPTR;                /* QUEUE OUCB TO ITSELF          */
         ST    OUCBPTR,OUCBBCK(,OUCBPTR)                           0436
*   RESPECIFY                                                      0437
*     RTNREG RSTD;                                                 0437
*   RESPECIFY                                                      0438
*     NTRREG RSTD;                                                 0438
*   NTRREG=ADDR(RMR2SA02);          /* IRARMRPS WILL USE SAVE AREA 3 */
         LA    NTRREG,RMR2SA02(,RMR2WKPT)                          0439
*   GPR01P=RRPAEPA;                 /* PASS CURRENT RMEP TO SBRTNE   */
         L     GPR01P,RRPAEPA(,RRPAPTR)                            0440
*   RTNREG=ADDR(IRASERPS);          /* SPECL NTRY USE PASSED REGSAVAR*/
         L     RTNREG,EPATRPS(,RMCTPTR)                            0441
         LA    RTNREG,IRASERPS(,RTNREG)                            0441
*   GEN CODE REFS(RTNREG);                                         0442
         BALR  RTNREG,RTNREG          INVOKE IRARMRPS
*   RESPECIFY                                                      0443
*     RTNREG UNRSTD;                                               0443
*   RESPECIFY                                                      0444
*     NTRREG UNRSTD;                                               0444
*   GEN REFS(GPR00P,GPR15P,SVEREG,RMR2WKPT,RMR2SA02);              0445
         LA    SVEREG,RMR2SA02(,RMR2WKPT)  SAVE AREA 2
         LM    GPR00P,GPR15P,0(SVEREG) RESTORE REGS
*   RETURN;                         /* RETURN TO CALLER              */
         B     @EL00001                                            0446
*   RESPECIFY                                                      0447
*     GPR00P UNRSTD;                                               0447
*   RESPECIFY                                                      0448
*     GPR01P UNRSTD;                                               0448
*   RESPECIFY                                                      0449
*     GPR15P UNRSTD;                                               0449
*                                                                  0450
*/********************************************************************/
*/*                                                                  */
*/*  PROCEDURE NAME : RMRR2SPR                                       */
*/*                                                                  */
*/*  FUNCTION :                                                      */
*/*  THIS ROUTINE SETS UP A RETURN CODE IN REG 15 AND RETURN TO      */
*/*  THE ADDRESS IN REG 14                                           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0450
*RMRR2SPR:                                                         0450
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0450
RMRR2SPR DS    0H                                                  0451
*   RETURN CODE(FAILCODE);          /* RETURN UNSUCCESSFUL           */
         LA    @15,4                                               0451
@EL00002 DS    0H                                                  0451
@EF00002 DS    0H                                                  0451
@ER00002 BR    @14                                                 0451
*   END RMRR2SPR;                                                  0452
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00F FIXED(31) REG(0),                                     0453
*     GPR01F FIXED(31) REG(1),                                     0453
*     GPR03F FIXED(31) REG(3),                                     0453
*     GPR15F FIXED(31) REG(15),                                    0453
*     GPR00P PTR(31) REG(0),                                       0453
*     GPR01P PTR(31) REG(1),                                       0453
*     GPR14P PTR(31) REG(14),                                      0453
*     GPR15P PTR(31) REG(15);                                      0453
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0454
*     I031F FIXED(31) BASED,                                       0454
*     I031P PTR(31) BASED,                                         0454
*     I015F FIXED(15) BASED,                                       0454
*     I015P PTR(15) BASED,                                         0454
*     I008P PTR(8) BASED,                                          0454
*     I001C CHAR(1) BASED;                                         0454
*   END IRARMERR                                                   0455
*                                                                  0455
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IHAASVT )                                       */
*/*%INCLUDE SYSLIB  (IHAASXB )                                       */
*/*%INCLUDE SYSLIB  (IHAOUSB )                                       */
*/*%INCLUDE SYSLIB  (IRACNSMP)                                       */
*/*%INCLUDE SYSLIB  (IRARMCT )                                       */
*/*%INCLUDE SYSLIB  (IRACCT  )                                       */
*/*%INCLUDE SYSLIB  (IRAICT  )                                       */
*/*%INCLUDE SYSLIB  (IRAMCT  )                                       */
*/*%INCLUDE SYSLIB  (IRARCT  )                                       */
*/*%INCLUDE SYSLIB  (IRARMPT )                                       */
*/*%INCLUDE SYSLIB  (IRARMCA )                                       */
*/*%INCLUDE SYSLIB  (IRARMEX )                                       */
*/*%INCLUDE SYSLIB  (IRARMSB )                                       */
*/*%INCLUDE SYSLIB  (IRAEPAT )                                       */
*/*%INCLUDE SYSLIB  (IRAEPDT )                                       */
*/*%INCLUDE SYSLIB  (IRAEPST )                                       */
*/*%INCLUDE SYSLIB  (IRARRPA )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IRAOUCB )                                       */
*/*%INCLUDE SYSLIB  (IHAOUXB )                                       */
*/*%INCLUDE SYSLIB  (IRAWMST )                                       */
*/*%INCLUDE SYSLIB  (IRAWAMT )                                       */
*/*%INCLUDE SYSLIB  (IRARMEP )                                       */
*/*%INCLUDE SYSLIB  (IRAREGS )                                       */
*                                                                  0455
*       ;                                                          0455
@DATA    DS    0H
         DS    0F
         DS    0F
@CF00061 DC    F'1'
@CH00061 EQU   @CF00061+2
@CF00292 DC    F'3'
@CF00053 DC    F'4'
@CF02289 DC    F'12'
@CF00776 DC    F'16'
@CF00070 DC    F'24'
@CF02441 DC    F'65280'
@CF02300 DC    XL4'80000000'
@CF02302 DC    XL4'7FFFFFFF'
@CF02420 DC    XL4'00000004'
@CF02451 DC    XL4'0000FFFF'
         DS    0D
@CC02403 DC    C'IRARMERR'
@CC02382 DC    C'OUCB'
@CC02407 DC    C'ASCB'
@CC02411 DC    C'OUXB'
@CC02413 DC    C'ASXB'
@CC02414 DC    C'OUSB'
KEYCHK   DC    X'04'
RMABENDC DC    X'5F'
RMABC15F DC    X'015F'
RMABC25F DC    X'025F'
RMR2HEXT DC    CL16'0123456789ABCDEF'
RMERRMSG DC    CL39'IRARMCNS OFFSET TO CURR RTNE PTR IS 000'
BLANK    DC    CL1' '
IRARMERR CSECT
*    SVC DUMP PARAMETER LIST
SDUMPLST SDUMP HDR='STORAGE DUMP TAKEN AT ENTRY TO IRARMERR',         XX
               SDATA=(ALLPSA,SQA,TRT,NUC),MF=L                @Z40BPCJ
IRARMERR CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
BASEREG  EQU   @10
SDWAPTR  EQU   @08
ASVTPTR  EQU   @07
ASXBPTR  EQU   @07
OUSBPTR  EQU   @06
RMCTPTR  EQU   @02
RRPAPTR  EQU   @03
ASCBPTR  EQU   @05
OUCBPTR  EQU   @04
OUXBPTR  EQU   @06
WMSTPTR  EQU   @04
WAMTPTR  EQU   @04
WAMPPTR  EQU   @04
RMEPPTR  EQU   @12
R0       EQU   @00
R1       EQU   @01
SVEREG   EQU   @13
RTNREG   EQU   @14
NTRREG   EQU   @15
RTNCOD   EQU   @15
RMEPDSP1 EQU   @00
RMEPDSP2 EQU   @01
WKREG1   EQU   @01
GPR02P   EQU   @02
WKREG3   EQU   @03
GPR04P   EQU   @04
SOUCBPTR EQU   @05
NOUCBPTR EQU   @06
ASIDNUM  EQU   @06
RMR2RTYP EQU   @06
TCBPTR   EQU   @07
FOUCBPTR EQU   @07
GPR07P   EQU   @07
RMR2WKPT EQU   @09
WKREGB   EQU   @11
RMR2REGP EQU   @11
QHDPPTR  EQU   @11
ASVTEPTR EQU   @12
QHEADPTR EQU   @12
WKREGC   EQU   @12
BLKPTR   EQU   @13
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14P   EQU   @14
GPR15P   EQU   @15
GPR01F   EQU   @01
GPR03F   EQU   @03
GPR00F   EQU   @00
GPR15F   EQU   @15
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
CVTMAP   EQU   0
CVTBTERM EQU   CVTMAP+52
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACMPC EQU   SDWAABCC+1
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR15 EQU   SDWAGRSV+60
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWASR02 EQU   SDWASRSV+8
SDWASR03 EQU   SDWASRSV+12
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAPCHK EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWASTAF EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAERRD EQU   SDWAFLGS+3
SDWAFMID EQU   SDWA+236
SDWAIOFS EQU   SDWA+238
SDWARTYA EQU   SDWA+240
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWAREXN EQU   SDWARECP+16
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
SDWAEBC  EQU   SDWADPVA
SDWAURAL EQU   SDWARA+3
SDWAVRA  EQU   SDWARA+4
ASVT     EQU   0
ASVTMAXU EQU   ASVT+516
ASVTFRST EQU   ASVT+524
ASVTENTY EQU   ASVT+528
ASXB     EQU   0
ASXBASXB EQU   ASXB
ASXBOUSB EQU   ASXB+128
ASXBAEQ  EQU   ASXB+168
ASXBSECR EQU   ASXB+199
ASCBSFLG EQU   ASXBSECR
ASXBCASW EQU   ASXB+216
ASXBCRB1 EQU   ASXBCASW
OUSB     EQU   0
OUSBNAME EQU   OUSB
RMCT     EQU   0
RMCTRMSA EQU   RMCT+32
RMCTWAMT EQU   RMCT+88
RMCTWTQE EQU   RMCT+104
RMCTFLGS EQU   RMCT+148
RMCTMFA  EQU   RMCTFLGS
RMCTSTW  EQU   RMCTFLGS
RMCTMFS  EQU   RMCTFLGS+1
RMCTOUCB EQU   RMCT+168
RMCTOUXB EQU   RMCT+172
CCT      EQU   RMCT+192
CCTFLG1  EQU   CCT+124
ICT      EQU   RMCT+320
ICTFLAGS EQU   ICT+84
MCT      EQU   RMCT+408
MCTSFLGS EQU   MCT+64
MCTOFLGS EQU   MCT+65
RCT      EQU   RMCT+504
RMPT     EQU   RMCT+592
RMCA     EQU   RMCT+664
RMCAFLGS EQU   RMCA+36
RMCASAAF EQU   RMCAFLGS
RMCASRC  EQU   RMCA+124
RMEX     EQU   RMCT+832
RMEPBEVT EQU   RMEX
RMEPBCTL EQU   RMEX+16
RMSB     EQU   RMCT+896
RMSBI04  EQU   RMSB+8
EPAT     EQU   RMCT+1016
EPDT     EQU   RMCT+1416
RMEPBRPS EQU   EPDT+80
EPST     EQU   RMCT+1512
RMEPBWM3 EQU   EPST
RMEPBIL3 EQU   EPST+16
RMEPBCL3 EQU   EPST+32
RMEPBCSO EQU   EPST+48
RMEPBCSI EQU   EPST+64
RRPA     EQU   0
RRPAINC  EQU   RRPA
RRPAASD  EQU   RRPAINC
RRPAVPGN EQU   RRPAINC+2
RRPAFLG0 EQU   RRPAVPGN
RRPAINP  EQU   RRPA+4
RRPAFLG  EQU   RRPA+8
RRPAOPT  EQU   RRPAFLG
RRPAWAR  EQU   RRPAFLG+1
RRPAIPS  EQU   RRPAFLG+1
RRPACTL  EQU   RRPAFLG+1
RRPARTI  EQU   RRPAFLG+1
RRPARFI  EQU   RRPAFLG+1
RRPARCI  EQU   RRPAFLG+1
RRPAINS  EQU   RRPA+16
RRPAEPA  EQU   RRPA+20
ASCB     EQU   0
ASCBASCB EQU   ASCB
ASCBSUPC EQU   ASCB+16
ASCBASID EQU   ASCB+36
ASCBRSM  EQU   ASCB+52
ASCBRSMF EQU   ASCBRSM
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBASXB EQU   ASCB+108
ASCBDSP1 EQU   ASCB+114
ASCBNOQ  EQU   ASCBDSP1
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBOUCB EQU   ASCB+144
ASCBOUXB EQU   ASCB+148
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
OUCB     EQU   0
OUCBNAME EQU   OUCB
OUCBFWD  EQU   OUCB+4
OUCBBCK  EQU   OUCB+8
OUCBQFL  EQU   OUCB+16
OUCBGOO  EQU   OUCBQFL
OUCBGOI  EQU   OUCBQFL
OUCBOUT  EQU   OUCBQFL
OUCBSFL  EQU   OUCB+17
OUCBINV  EQU   OUCBSFL
OUCBYFL  EQU   OUCB+18
OUCBSTT  EQU   OUCBYFL
OUCBDTA  EQU   OUCBYFL
OUCBAFL  EQU   OUCB+19
OUCBTFL  EQU   OUCB+20
OUCBEFL  EQU   OUCB+21
OUCBUFL  EQU   OUCB+23
OUCBASCB EQU   OUCB+40
OUCBCSW  EQU   OUCB+84
OUCBCFL  EQU   OUCBCSW+2
OUCBPSS  EQU   OUCB+112
OUXB     EQU   0
OUXBNAME EQU   OUXB
WMST     EQU   0
WAMT     EQU   0
WAMTWAR  EQU   WAMT
WAMTASD  EQU   WAMT+24
WAMTTCB  EQU   WAMT+28
WAMTNX1  EQU   WAMT+56
WAMP     EQU   0
WAMPPGP  EQU   WAMP
RMEP     EQU   0
RMEPEPB  EQU   RMEP
RMEPERA  EQU   RMEPEPB+4
RMEPFLG  EQU   RMEPEPB+8
RMEPACN  EQU   RMEPFLG+3
RMEPPRV  EQU   RMEPEPB+12
RMEPSCH  EQU   RMEP+16
IRARMRTN EQU   0
SDUMPARM EQU   0
QHDP     EQU   0
RMR2REGS EQU   0
RMR2RTYL EQU   0
IRASERPS EQU   4
ASVTE    EQU   0
ASVTAVL  EQU   ASVTE
RMR2WORK EQU   0
RMR2SA01 EQU   RMR2WORK
RMR2SA02 EQU   RMR2WORK+64
RMR2SRTN EQU   RMR2WORK+192
RMR2SCC  EQU   RMR2WORK+196
RMR2SC2  EQU   RMR2SCC+2
RMSAVE   EQU   0
RMSAVE01 EQU   RMSAVE
RMSAVE02 EQU   RMSAVE+64
RMSAVE04 EQU   RMSAVE+192
RMSAVE05 EQU   RMSAVE+256
RMSAVE06 EQU   RMSAVE+328
RMSAVREG EQU   0
RMSAVR15 EQU   RMSAVREG+60
IRARMNTR EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
CVTPTR   EQU   FLCCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTCRMN  EQU   CVTS01+156
CVTASVT  EQU   CVTS01+208
CVTOPCTP EQU   CVTS01+256
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
FLC      EQU   PSA
PSARSVTE EQU   PSARSVT
EPATRPS  EQU   RMEPBRPS
WAMTNDX  EQU   WAMTNX1
*                                      START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
RMSAVR14 EQU   RMSAVREG+56
RMSAVR13 EQU   RMSAVREG+52
RMSAVR12 EQU   RMSAVREG+48
RMSAVR11 EQU   RMSAVREG+44
RMSAVR10 EQU   RMSAVREG+40
RMSAVR09 EQU   RMSAVREG+36
RMSAVR08 EQU   RMSAVREG+32
RMSAVR07 EQU   RMSAVREG+28
RMSAVR06 EQU   RMSAVREG+24
RMSAVR05 EQU   RMSAVREG+20
RMSAVR04 EQU   RMSAVREG+16
RMSAVR03 EQU   RMSAVREG+12
RMSAVR02 EQU   RMSAVREG+8
RMSAVR01 EQU   RMSAVREG+4
RMSAVR00 EQU   RMSAVREG
RMSAVE03 EQU   RMSAVE+128
RMR2SC1  EQU   RMR2SCC
RMR2SA03 EQU   RMR2WORK+128
RMEPSND  EQU   RMEP+32
RMEPINT  EQU   RMEPSCH+12
RMEPTME  EQU   RMEPSCH+8
RMEPBCK  EQU   RMEPSCH+4
RMEPFWD  EQU   RMEPSCH
RMEPEND  EQU   RMEP+16
RMEPTMD  EQU   RMEPFLG+3
RMEPRCR  EQU   RMEPFLG+3
RMEPVFL  EQU   RMEPFLG
RMEPEPA  EQU   RMEPEPB
WAMPEND  EQU   WAMP+44
WAMPRSV  EQU   WAMPPGP+42
WAMPDMN  EQU   WAMPPGP+41
WAMPOBJN EQU   WAMPPGP+40
WAMPSWC  EQU   WAMPPGP+36
WAMPTRR  EQU   WAMPPGP+32
WAMPMSO  EQU   WAMPPGP+28
WAMPIOC  EQU   WAMPPGP+24
WAMPCPU  EQU   WAMPPGP+20
WAMPNWL  EQU   WAMPPGP+16
WAMPTET  EQU   WAMPPGP+12
WAMPSRV  EQU   WAMPPGP+8
WAMPTAT  EQU   WAMPPGP+4
WAMPTRN  EQU   WAMPPGP
WAMTEND  EQU   WAMT+64
WAMTR90  EQU   WAMT+60
WAMTNX0  EQU   WAMT+52
WAMTIPM  EQU   WAMT+48
WAMTIPI  EQU   WAMT+44
WAMTIPC  EQU   WAMT+40
WAMTHPG  EQU   WAMT+38
WAMTSPD  EQU   WAMT+36
WAMTCPD  EQU   WAMT+34
WAMTIPS  EQU   WAMT+32
WAMTTOC  EQU   WAMT+16
WAMTTMA  EQU   WAMT+8
WAMTSIZ  EQU   WAMT+4
WMSTEND  EQU   WMST+112
WMSTIPM  EQU   WMST+108
WMSTIPI  EQU   WMST+104
WMSTIPC  EQU   WMST+100
WMSTSECB EQU   WMST+96
WMSTNWST EQU   WMST+92
WMSTSTCB EQU   WMST+88
WMSTSET  EQU   WMST+84
WMSTRSVD EQU   WMST+81
WMSTREAL EQU   WMST+80
WMSTMSO  EQU   WMST+76
WMSTIOC  EQU   WMST+72
WMSTCPU  EQU   WMST+68
WMSTDMNC EQU   WMST+66
WMSTPGPC EQU   WMST+64
WMSTPGHI EQU   WMST+62
WMSTWLHI EQU   WMST+60
WMSTDMDE EQU   WMST+56
WMSTDMVS EQU   WMST+52
WMSTDMVT EQU   WMST+48
WMSTDMDS EQU   WMST+44
WMSTDMDT EQU   WMST+40
WMSTPODS EQU   WMST+36
WMSTPODT EQU   WMST+32
WMSTPOVS EQU   WMST+28
WMSTPOVT EQU   WMST+24
WMSTPGDS EQU   WMST+20
WMSTPGDT EQU   WMST+16
WMSTPGVS EQU   WMST+12
WMSTPGVT EQU   WMST+8
WMSTWLLO EQU   WMST+6
WMSTID   EQU   WMST+4
WMSTNAME EQU   WMST
OUXBEND  EQU   OUXB+144
OUXBTSW  EQU   OUXB+140
OUXBFIXC EQU   OUXB+138
OUXBNVC  EQU   OUXB+136
OUXBUIC  EQU   OUXB+134
OUXBVSC  EQU   OUXB+132
OUXBILS  EQU   OUXB+128
OUXBRSV1 EQU   OUXB+126
OUXBWCT  EQU   OUXB+124
OUXBPRS  EQU   OUXB+120
OUXBSTD  EQU   OUXB+116
OUXBITD  EQU   OUXB+112
OUXBMSS  EQU   OUXB+104
OUXBCPS  EQU   OUXB+96
OUXBAET  EQU   OUXB+92
OUXBTRR  EQU   OUXB+88
OUXBJBR  EQU   OUXB+84
OUXBTRT  EQU   OUXB+80
OUXBTRS  EQU   OUXB+76
OUXBJBT  EQU   OUXB+72
OUXBJBS  EQU   OUXB+68
OUXBTRC  EQU   OUXB+64
OUXBNQT  EQU   OUXB+60
OUXBIOSM EQU   OUXB+56
OUXBSTC  EQU   OUXB+54
OUXBIOS  EQU   OUXB+52
OUXBSTCT EQU   OUXB+48
OUXBCAPR EQU   OUXB+44
OUXBCAPI EQU   OUXB+40
OUXBVAMR EQU   OUXB+36
OUXBVAMO EQU   OUXB+32
OUXBVAMI EQU   OUXB+28
OUXBPREC EQU   OUXB+24
OUXBPOUT EQU   OUXB+20
OUXBPIN  EQU   OUXB+16
OUXBRSW  EQU   OUXB+12
OUXBMET  EQU   OUXB+8
OUXBPET  EQU   OUXB+4
OUCBEND  EQU   OUCB+136
OUCBNTSP EQU   OUCB+134
OUCBNDS  EQU   OUCB+132
OUCBTIO  EQU   OUCB+128
OUCBTCP  EQU   OUCB+124
OUCBPST  EQU   OUCB+120
OUCBPS2  EQU   OUCBPSS+4
OUCBPS1  EQU   OUCBPSS
OUCBIOSM EQU   OUCB+108
OUCBTMP  EQU   OUCB+104
OUCBR03  EQU   OUCB+102
OUCBIOR  EQU   OUCB+100
OUCBCRV  EQU   OUCB+98
OUCBIRV  EQU   OUCB+96
OUCBWMR  EQU   OUCB+92
OUCBCMRV EQU   OUCB+88
OUCBCF2  EQU   OUCBCFL
OUCBRSM  EQU   OUCBCFL
OUCBRDY  EQU   OUCBCFL
OUCBACN  EQU   OUCBCSW
OUCBACT  EQU   OUCB+80
OUCBWSS  EQU   OUCB+78
OUCBPSO  EQU   OUCB+76
OUCBTMO  EQU   OUCB+72
OUCBTMS  EQU   OUCB+68
OUCBMSO  EQU   OUCB+64
OUCBIOC  EQU   OUCB+60
OUCBCPU  EQU   OUCB+56
OUCBWMS  EQU   OUCB+52
OUCBTMW  EQU   OUCB+48
OUCBIMCB EQU   OUCB+44
OUCBSWC  EQU   OUCB+38
OUCBSRC  EQU   OUCB+37
OUCBDMN  EQU   OUCB+36
OUCBDMO  EQU   OUCB+34
OUCBWMG  EQU   OUCB+32
OUCBPGP  EQU   OUCB+31
OUCBR40  EQU   OUCB+30
OUCBR30  EQU   OUCB+29
OUCBSPG  EQU   OUCB+28
OUCBRDP  EQU   OUCB+27
OUCBNDP  EQU   OUCB+26
OUCBRPG  EQU   OUCB+25
OUCBNPG  EQU   OUCB+24
OUCBUF7  EQU   OUCBUFL
OUCBUF6  EQU   OUCBUFL
OUCBUF5  EQU   OUCBUFL
OUCBTSWC EQU   OUCBUFL
OUCBTSWP EQU   OUCBUFL
OUCBRSWP EQU   OUCBUFL
OUCBJSAS EQU   OUCBUFL
OUCBJSFS EQU   OUCBUFL
OUCBNQC  EQU   OUCB+22
OUCBMWT  EQU   OUCBEFL
OUCBQSC  EQU   OUCBEFL
OUCBQSS  EQU   OUCBEFL
OUCBNQF  EQU   OUCBEFL
OUCBCIM  EQU   OUCBEFL
OUCBOWT  EQU   OUCBEFL
OUCBTRM  EQU   OUCBEFL
OUCBLWT  EQU   OUCBEFL
OUCBINC  EQU   OUCBTFL
OUCBINP  EQU   OUCBTFL
OUCBMAR  EQU   OUCBTFL
OUCBPCH  EQU   OUCBTFL
OUCBRTR  EQU   OUCBTFL
OUCBNTR  EQU   OUCBTFL
OUCBSTR  EQU   OUCBTFL
OUCBATR  EQU   OUCBTFL
OUCBASW  EQU   OUCBAFL
OUCBNWT  EQU   OUCBAFL
OUCBR02  EQU   OUCBAFL
OUCBJSR  EQU   OUCBAFL
OUCBCPL  EQU   OUCBAFL
OUCBRMA  EQU   OUCBAFL
OUCBAPG  EQU   OUCBAFL
OUCBAF0  EQU   OUCBAFL
OUCBFXS  EQU   OUCBYFL
OUCBAXS  EQU   OUCBYFL
OUCBPSTR EQU   OUCBYFL
OUCBMNT  EQU   OUCBYFL
OUCBLOG  EQU   OUCBYFL
OUCBPSTE EQU   OUCBYFL
OUCBSCN  EQU   OUCBSFL
OUCBENQ  EQU   OUCBSFL
OUCBPVL  EQU   OUCBSFL
OUCBNSWI EQU   OUCBSFL
OUCBBIB  EQU   OUCBSFL
OUCBCTI  EQU   OUCBSFL
OUCBNSW  EQU   OUCBSFL
OUCBQF7  EQU   OUCBQFL
OUCBQF6  EQU   OUCBQFL
OUCBOFF  EQU   OUCBQFL
OUCBQF3  EQU   OUCBQFL
OUCBGOB  EQU   OUCBQFL
OUCBTMA  EQU   OUCB+12
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSMA EQU   ASCBRSM+1
ASCBRV54 EQU   ASCBRSMF
ASCBRV53 EQU   ASCBRSMF
ASCBRV52 EQU   ASCBRSMF
ASCBRV51 EQU   ASCBRSMF
ASCBVEQR EQU   ASCBRSMF
ASCBN2LP EQU   ASCBRSMF
ASCB1LPU EQU   ASCBRSMF
ASCB2LPU EQU   ASCBRSMF
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBEGIN EQU   ASCB
RRPAEND  EQU   RRPA+24
RRPARTN  EQU   RRPAINS
RRPATOD  EQU   RRPA+12
RRPARTC  EQU   RRPA+11
RRPAKEY  EQU   RRPA+10
RRPAF11  EQU   RRPAFLG+1
RRPAF07  EQU   RRPAFLG
RRPAF05  EQU   RRPAFLG
RRPAF04  EQU   RRPAFLG
RRPADSP  EQU   RRPAFLG
RRPASVC  EQU   RRPAFLG
RRPAENB  EQU   RRPAFLG
RRPADSB  EQU   RRPAFLG
RRPAVLU  EQU   RRPAINP
RRPACOD  EQU   RRPAINC+3
@NM00077 EQU   RRPAFLG0
RRPANSWI EQU   RRPAFLG0
EPSTEND  EQU   EPST+80
EPSTCSI  EQU   RMEPBCSI
EPSTCSO  EQU   RMEPBCSO
EPSTCL3  EQU   RMEPBCL3
EPSTIL3  EQU   RMEPBIL3
EPSTWM3  EQU   RMEPBWM3
EPDTEND  EQU   EPDT+96
RMEPBHIT EQU   EPDT+64
RMEPBUXB EQU   EPDT+48
RMEPBIL4 EQU   EPDT+32
RMEPBDEL EQU   EPDT+16
RMEPBIPS EQU   EPDT
EPATEND  EQU   EPAT+400
RMEPBPR1 EQU   EPAT+368
RMEPBEQ1 EQU   EPAT+336
RMEPBAP1 EQU   EPAT+304
RMEPBCL1 EQU   EPAT+272
RMEPBWM2 EQU   EPAT+240
RMEPBIL1 EQU   EPAT+208
RMEPBASM EQU   EPAT+176
RMEPBMS2 EQU   EPAT+160
RMEPBPR5 EQU   EPAT+144
RMEPBMS6 EQU   EPAT+112
RMEPBSQA EQU   EPAT+96
RMEPBRM2 EQU   EPAT+64
RMEPBRM1 EQU   EPAT+32
RMEPBCAP EQU   EPAT
RMSBEND  EQU   RMSB+120
RMSBRA9  EQU   RMSB+116
RMSBIL0  EQU   RMSB+112
RMSBCL0  EQU   RMSB+108
RMSBRA6  EQU   RMSB+104
RMSBNOP  EQU   RMSB+100
RMSBSET  EQU   RMSB+96
RMSBWR6  EQU   RMSB+92
RMSBWR4  EQU   RMSB+88
RMSBTRC  EQU   RMSB+84
RMSBWMY  EQU   RMSB+80
RMSBWMR  EQU   RMSB+76
RMSBWMQ  EQU   RMSB+72
RMSBWMO  EQU   RMSB+68
RMSBWMN  EQU   RMSB+64
RMSBWMK  EQU   RMSB+60
RMSBWM4  EQU   RMSB+56
RMSBWM1  EQU   RMSB+52
RMSBWM5  EQU   RMSB+48
RMSBCRY  EQU   RMSB+44
RMSBCRN  EQU   RMSB+40
RMSBCRL  EQU   RMSB+36
RMSBI10  EQU   RMSB+32
RMSBI09  EQU   RMSB+28
RMSBR24  EQU   RMSB+24
RMSBI07  EQU   RMSB+20
RMSBI06  EQU   RMSB+16
RMSBI05  EQU   RMSB+12
RMSBI03  EQU   RMSB+4
RMSBI02  EQU   RMSB
RMEXEND  EQU   RMEX+64
RMEXSRE  EQU   RMEX+60
RMEXXPE  EQU   RMEX+56
RMEXRR2  EQU   RMEX+52
RMEXRR1  EQU   RMEX+48
RMEXI48  EQU   RMEX+44
RMEXCET  EQU   RMEX+40
RMEXCXX  EQU   RMEX+36
RMEXI01  EQU   RMEX+32
RMEXCTL  EQU   RMEPBCTL
RMEXEVT  EQU   RMEPBEVT
RMCAEND  EQU   RMCA+168
RMCAR90  EQU   RMCA+164
RMCAUSSC EQU   RMCASRC+36
RMCAEXSC EQU   RMCASRC+32
RMCANQSC EQU   RMCASRC+28
RMCARQSC EQU   RMCASRC+24
RMCADWSC EQU   RMCASRC+20
RMCARSSC EQU   RMCASRC+16
RMCAXSSC EQU   RMCASRC+12
RMCALWSC EQU   RMCASRC+8
RMCATISC EQU   RMCASRC+4
RMCATOSC EQU   RMCASRC
RMCACPW1 EQU   RMCA+120
RMCACIUS EQU   RMCA+118
RMCAR14  EQU   RMCA+116
RMCAR13  EQU   RMCA+112
RMCAWKA  EQU   RMCA+80
RMCAMAS  EQU   RMCA+76
RMCAR20  EQU   RMCA+74
RMCABCPG EQU   RMCA+73
RMCALGPG EQU   RMCA+72
RMCAISV  EQU   RMCA+70
RMCAR11  EQU   RMCA+68
RMCAINV  EQU   RMCA+64
RMCAR10  EQU   RMCA+60
RMCARSV9 EQU   RMCA+56
RMCACHU  EQU   RMCA+52
RMCACHP  EQU   RMCA+48
RMCARSV8 EQU   RMCA+44
RMCARSV7 EQU   RMCA+40
RMCARSVF EQU   RMCAFLGS
RMCARSV5 EQU   RMCA+32
RMCARSV4 EQU   RMCA+28
RMCARSV3 EQU   RMCA+24
RMCATOI  EQU   RMCA+20
RMCATRS  EQU   RMCA+16
RMCATQS  EQU   RMCA+12
RMCARSV2 EQU   RMCA+10
RMCARSV1 EQU   RMCA+8
RMCAINUS EQU   RMCA+6
RMCAR04  EQU   RMCA+4
RMCANAME EQU   RMCA
RMPTEND  EQU   RMPT+72
RMPTOPE  EQU   RMPT+66
RMPTOPI  EQU   RMPT+63
RMPTOPC  EQU   RMPT+60
RMPTIOET EQU   RMPT+56
RMPTCPET EQU   RMPT+52
RMPTWMET EQU   RMPT+48
RMPTSAET EQU   RMPT+44
RMPTXCHT EQU   RMPT+40
RMPTRSV3 EQU   RMPT+38
RMPTRSV2 EQU   RMPT+36
RMPTRSV1 EQU   RMPT+32
RMPTTOL  EQU   RMPT+28
RMPTTOM  EQU   RMPT+24
RMPTTCS  EQU   RMPT+20
RMPTIMN  EQU   RMPT+16
RMPTERV  EQU   RMPT+12
RMPTIOC  EQU   RMPT+8
RMPTCPU  EQU   RMPT+4
RMPTNAME EQU   RMPT
RCTEND   EQU   RCT+88
RCVRSVF3 EQU   RCT+84
RCVRSVF2 EQU   RCT+80
RCVTAPAD EQU   RCT+76
RCVRSVF1 EQU   RCT+74
RCVTOTDF EQU   RCT+72
RCVBPTTM EQU   RCT+68
RCVBPTCT EQU   RCT+64
RCVASMQ  EQU   RCT+60
RCVAVQP  EQU   RCT+56
RCVCPUC  EQU   RCT+52
RCVUICC  EQU   RCT+48
RCVPTR   EQU   RCT+46
RCVASMQA EQU   RCT+44
RCVAVQC  EQU   RCT+42
RCVCPUA  EQU   RCT+40
RCVUICA  EQU   RCT+38
RCVCTMC  EQU   RCT+36
RCCRSVF3 EQU   RCT+32
RCCRSVF2 EQU   RCT+28
RCCRSVF1 EQU   RCT+26
RCCLCHRR EQU   RCT+24
RCCLCHUT EQU   RCT+22
RCCTOTUT EQU   RCT+20
RCCASMTH EQU   RCT+18
RCCASMTL EQU   RCT+16
RCCPTRTH EQU   RCT+14
RCCPTRTL EQU   RCT+12
RCCCPUTH EQU   RCT+10
RCCCPUTL EQU   RCT+8
RCCUICTH EQU   RCT+6
RCCUICTL EQU   RCT+4
RCTRCT   EQU   RCT
MCTEND   EQU   MCT+96
MCVRSVF3 EQU   MCT+92
MCVRSVF2 EQU   MCT+88
MCVRSVF1 EQU   MCT+84
MCCINTMX EQU   MCT+80
MCCPR1IN EQU   MCT+76
MCCUICIN EQU   MCT+72
MCCUICBD EQU   MCT+68
MCTRSVB1 EQU   MCT+67
MCTXRSVD EQU   MCT+66
MCTFX2   EQU   MCTOFLGS
MCTFX1   EQU   MCTOFLGS
MCTSMS2  EQU   MCTOFLGS
MCTSMS1  EQU   MCTOFLGS
MCTAMS2  EQU   MCTOFLGS
@NM00076 EQU   MCTOFLGS
MCTASM2  EQU   MCTOFLGS
MCTASM1  EQU   MCTOFLGS
MCTSF04  EQU   MCTSFLGS
MCTFAVQ  EQU   MCTSFLGS
MCTAVQ1  EQU   MCTSFLGS
MCTSQA2  EQU   MCTSFLGS
MCTSQA1  EQU   MCTSFLGS
MCVAVQC  EQU   MCT+60
MCVFRCNT EQU   MCT+58
MCVSTCRI EQU   MCT+56
MCCEND   EQU   MCT+56
MCCASMT2 EQU   MCT+54
MCCASMT1 EQU   MCT+52
MCCRSVH1 EQU   MCT+50
MCCPLUS  EQU   MCT+48
MCCMS403 EQU   MCT+44
MCCMS402 EQU   MCT+40
MCCMS401 EQU   MCT+36
MCCMS400 EQU   MCT+32
MCCMS203 EQU   MCT+28
MCCMS202 EQU   MCT+24
MCCMS201 EQU   MCT+20
MCCMS200 EQU   MCT+16
MCCMS102 EQU   MCT+12
MCCMS101 EQU   MCT+8
MCCMS100 EQU   MCT+4
MCTMCT   EQU   MCT
ICTEND   EQU   ICT+88
ICTRSVB3 EQU   ICT+87
ICTRSVB2 EQU   ICT+86
ICTRSVB1 EQU   ICT+85
ICT003   EQU   ICTFLAGS
ICTIOOT  EQU   ICTFLAGS
ICTIOL   EQU   ICTFLAGS
ICTDRSV4 EQU   ICTFLAGS
ICVIRSV3 EQU   ICT+80
ICVULCBT EQU   ICT+76
ICVOLCBT EQU   ICT+72
ICVLCBPT EQU   ICT+68
ICVLUTBT EQU   ICT+64
ICCEND   EQU   ICT+64
ICCRSV01 EQU   ICT+62
ICCEDSUT EQU   ICT+60
ICCSRSV2 EQU   ICT+58
ICCSIGUP EQU   ICT+56
ICCINDAT EQU   ICT+52
ICCINLOT EQU   ICT+48
ICCINHIT EQU   ICT+44
ICCDAUTH EQU   ICT+42
ICCLOUTH EQU   ICT+40
ICCHIUTH EQU   ICT+38
ICCDASF2 EQU   ICT+36
ICCDASF1 EQU   ICT+34
ICCMINRV EQU   ICT+32
ICCMAXRV EQU   ICT+30
ICCRVSCF EQU   ICT+28
ICCMNIOR EQU   ICT+26
ICCLCHN  EQU   ICT+24
ICCLCLST EQU   ICT+20
ICCMNSWP EQU   ICT+16
ICCMNUIN EQU   ICT+12
ICCMXICT EQU   ICT+8
ICCMRSV1 EQU   ICT+4
ICTICT   EQU   ICT
CCVEND   EQU   CCT+128
CCTFLG2  EQU   CCT+125
CCTCPUOT EQU   CCTFLG1
CCTALL   EQU   CCTFLG1
CCVCPUCT EQU   CCT+122
CCVENQCT EQU   CCT+120
CCVLGFMC EQU   CCT+118
CCVLGUTL EQU   CCT+116
CCVR07   EQU   CCT+114
CCVR06   EQU   CCT+112
CCVUTILP EQU   CCT+110
CCVR05   EQU   CCT+108
CCVIMBBT EQU   CCT+104
CCVEJST  EQU   CCT+100
CCVPGCPF EQU   CCT+96
CCVRVSWF EQU   CCT+92
CCVRBSTD EQU   CCT+88
CCVR04   EQU   CCT+84
CCVRBSWT EQU   CCT+80
CCVR03   EQU   CCT+76
CCCEND   EQU   CCT+76
CCCRSVH1 EQU   CCT+74
CCCSCFC2 EQU   CCT+72
CCCSCFC1 EQU   CCT+70
CCCR02   EQU   CCT+68
CCCSIGUR EQU   CCT+66
CCCSIGDP EQU   CCT+64
CCCSCFAC EQU   CCT+62
CCCMINRV EQU   CCT+60
CCCMAXRV EQU   CCT+58
CCCLOSCF EQU   CCT+56
CCCHISCF EQU   CCT+54
CCCUTLOT EQU   CCT+52
CCCUTHIT EQU   CCT+50
CCCAPRHT EQU   CCT+48
CCCAPRLT EQU   CCT+46
CCCR01   EQU   CCT+44
CCCAPGDP EQU   CCT+42
CCCAPMDP EQU   CCT+40
CCCAPLDP EQU   CCT+38
CCCAPBDP EQU   CCT+36
CCCAPROT EQU   CCT+34
CCCAPDIV EQU   CCT+32
CCCRSVF1 EQU   CCT+28
CCCMNSIN EQU   CCT+24
CCCMNUIN EQU   CCT+20
CCCAPDEL EQU   CCT+16
CCCAPMAX EQU   CCT+12
CCCAPMIN EQU   CCT+8
CCCAPMET EQU   CCT+4
CCTCCT   EQU   CCT
RMCTEND  EQU   RMCT+192
RMCTR50  EQU   RMCT+190
RMCTDMNC EQU   RMCT+188
RMCTDMDE EQU   RMCT+184
RMCTDMDT EQU   RMCT+180
RMCTSRBT EQU   RMCT+176
RMCTTOCI EQU   RMCT+160
RMCTCPID EQU   RMCT+156
RMCTTELM EQU   RMCT+152
RMCTF09  EQU   RMCTFLGS+1
RMCTF07  EQU   RMCTFLGS+1
RMCTF06  EQU   RMCTFLGS
RMCTRSV2 EQU   RMCTFLGS
RMCTRSV1 EQU   RMCTFLGS
RMCTINIT EQU   RMCTFLGS
RMCTF03  EQU   RMCTFLGS
RMCTCPS1 EQU   RMCTFLGS
RMCTRQSV EQU   RMCT+144
RMCTALR  EQU   RMCT+140
RMCTALA  EQU   RMCT+136
RMCTTOC  EQU   RMCT+128
RMCTTOD  EQU   RMCT+124
RMCTTBS  EQU   RMCT+120
RMCTR10  EQU   RMCT+116
RMCTINQE EQU   RMCT+112
RMCTOTQE EQU   RMCT+108
RMCTAQHD EQU   RMCT+100
RMCTAQCT EQU   RMCT+96
RMCTTMQE EQU   RMCT+92
RMCTWAST EQU   RMCT+84
RMCTEPPR EQU   RMCT+80
RMCTFLTM EQU   RMCT+76
RMCTEPET EQU   RMCT+72
RMCTITT  EQU   RMCT+68
RMCTADJC EQU   RMCT+64
RMCTEPBG EQU   RMCT+60
RMCTEPAT EQU   RMCT+56
RMCTEPDT EQU   RMCT+52
RMCTEPPA EQU   RMCT+48
RMCTRMSB EQU   RMCT+44
RMCTRMEX EQU   RMCT+40
RMCTRMPD EQU   RMCT+36
RMCTRLCT EQU   RMCT+28
RMCTWMST EQU   RMCT+24
RMCTRMCA EQU   RMCT+20
RMCTRMPT EQU   RMCT+16
RMCTMCT  EQU   RMCT+12
RMCTICT  EQU   RMCT+8
RMCTCCT  EQU   RMCT+4
RMCTNAME EQU   RMCT
OUSBEND  EQU   OUSB+136
OUSBR90  EQU   OUSB+132
OUSBSAVE EQU   OUSB+52
OUSBVAMR EQU   OUSB+48
OUSBVAMO EQU   OUSB+44
OUSBVAMI EQU   OUSB+40
OUSBPREC EQU   OUSB+36
OUSBPOUT EQU   OUSB+32
OUSBPIN  EQU   OUSB+28
OUSBSWCT EQU   OUSB+24
OUSBSPOT EQU   OUSB+20
OUSBSPIN EQU   OUSB+16
OUSBSTCT EQU   OUSB+12
OUSBCAPR EQU   OUSB+8
OUSBCAPI EQU   OUSB+4
ASXBEND  EQU   ASXB+232
ASXBRV25 EQU   ASXB+228
ASXBRV24 EQU   ASXB+224
ASXBPT0E EQU   ASXB+220
ASXBCRB4 EQU   ASXBCASW+3
ASXBCRB3 EQU   ASXBCASW+2
ASXBCRB2 EQU   ASXBCASW+1
ASXBCR06 EQU   ASXBCRB1
ASXBCR05 EQU   ASXBCRB1
ASXBCR04 EQU   ASXBCRB1
ASXBCR03 EQU   ASXBCRB1
ASXBCR02 EQU   ASXBCRB1
ASXBCR01 EQU   ASXBCRB1
ASXBTFD  EQU   ASXBCRB1
ASXBPIP  EQU   ASXBCRB1
ASXBCTDC EQU   ASXB+212
ASXBTDCB EQU   ASXB+208
ASXBRV19 EQU   ASXB+204
ASXBSENV EQU   ASXBSECR+1
ASXBRV34 EQU   ASCBSFLG
ASXBRV33 EQU   ASCBSFLG
ASXBRV32 EQU   ASCBSFLG
ASXBRV31 EQU   ASCBSFLG
ASXBRV30 EQU   ASCBSFLG
ASXBRV29 EQU   ASCBSFLG
ASXBRV28 EQU   ASCBSFLG
ASXBRV27 EQU   ASCBSFLG
ASXBUSER EQU   ASXB+192
ASXBLSRB EQU   ASXBAEQ+20
ASXBFSRB EQU   ASXBAEQ+16
ASXBLRQE EQU   ASXBAEQ+12
ASXBFRQE EQU   ASXBAEQ+8
ASXBLIQE EQU   ASXBAEQ+4
ASXBFIQE EQU   ASXBAEQ
ASXBETSK EQU   ASXB+164
ASXBSIRB EQU   ASXB+160
ASXBPSWD EQU   ASXB+152
ASXBPRG  EQU   ASXB+136
ASXBRV26 EQU   ASXB+132
ASXBDDR  EQU   ASXB+124
ASXBRCTD EQU   ASXB+120
ASXBRSMD EQU   ASXB+116
ASXBSPSA EQU   ASXB+112
ASXBFRWA EQU   ASXB+108
ASXBFLSA EQU   ASXB+36
ASXBIHSA EQU   ASXB+32
ASXBRV15 EQU   ASXB+28
ASXBRV14 EQU   ASXB+24
ASXBLWA  EQU   ASXB+20
ASXBMPST EQU   ASXB+16
ASXBRS00 EQU   ASXB+14
ASXBTCBS EQU   ASXB+12
ASXBLTCB EQU   ASXB+8
ASXBFTCB EQU   ASXB+4
ASXBEGIN EQU   ASXB
ASVTEND  EQU   ASVT+528
ASVTAVAL EQU   ASVTENTY
ASVTAVAI EQU   ASVTFRST
ASVTRS00 EQU   ASVT+520
ASVTASVT EQU   ASVT+512
ASVTBEGN EQU   ASVT+512
@NM00075 EQU   ASVT
@NM00074 EQU   SDWA+512
@NM00073 EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00072 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00071 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00070 EQU   SDWADDAT+3
@NM00069 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00068 EQU   SDWADDAT+1
@NM00067 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00066 EQU   SDWADUMP+2
@NM00065 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00064 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
@NM00063 EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00062 EQU   SDWAACF3
@NM00061 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
@NM00060 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00059 EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00058 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
@NM00057 EQU   SDWA+239
@NM00056 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
@NM00055 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00054 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00053 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00052 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00051 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00050 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00049 EQU   SDWAINC2
@NM00048 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00047 EQU   SDWAILC2
@NM00046 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00045 EQU   SDWANXT2
@NM00044 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00043 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00042 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00041 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00040 EQU   SDWAINC1
@NM00039 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00038 EQU   SDWAILC1
@NM00037 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00036 EQU   SDWANXT1
@NM00035 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00034 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00033 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00032 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00031 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00030 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00029 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
@NM00028 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00027 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00026 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00025 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00024 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00023 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00022 EQU   FLCFSA
@NM00021 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00020 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00019 EQU   FLCIOA
@NM00018 EQU   FLCMCLA+15
@NM00017 EQU   FLCMCLA+14
@NM00016 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00015 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00014 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00013 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00012 EQU   FLCPER
@NM00011 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00010 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00009 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00008 EQU   FLCPIILC
@NM00007 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00006 EQU   FLCSVILC
@NM00005 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00004 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00003 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RT00035 EQU   RMRR2PER
@RT00053 EQU   RMRR2WAT
@RT00059 EQU   RMRR2CKA
@RF00070 EQU   RMRR2PER
@RF00097 EQU   RMRR2PER
@RT00123 EQU   RMRR2PER
@RT00136 EQU   RMRR2RTR
@RF00136 EQU   RMRR2PER
@RT00144 EQU   RMRR2PER
@RT00157 EQU   RMRR2PER
@RT00249 EQU   RMRR2FCE
@RF00285 EQU   @RC00283
@RC00297 EQU   @RC00293
@RC00321 EQU   @RC00317
@RF00352 EQU   @RC00347
@RC00356 EQU   @RC00347
@RT00412 EQU   RMRR2FNQ
@RF00326 EQU   @RC00321
@ENDDATA EQU   *
         END   IRARMERR,(C'PLS2140',0701,78024)
