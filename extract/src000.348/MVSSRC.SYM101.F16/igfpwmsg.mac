         TITLE 'IGFPWMSG - OPERATOR MESSAGE WRITER                     *
                        '
IGFPWMSG CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IGFPWMSG  77.125'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
*                                                                  0058
*   /*****************************************************************/
*   /*                                                               */
*   /* SEARCH MESSAGE BUFFER POOL FOR ACTIVE BUFFERS                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0058
*   DO MSGPTR=RVTMSGPT BY LENGTH(MSG) WHILE MSGPTR<RVTMSGPT+RVTMSGLN;
         L     @10,CVTPTR                                          0058
         L     @10,RVTPTR(,@10)                                    0058
         L     MSGPTR,RVTMSGPT(,@10)                               0058
         B     @DE00058                                            0058
@DL00058 DS    0H                                                  0059
*                                   /*                       @YM00999*/
*     TS(MSGCTL);                   /* IS BUFFER BUSY                */
         TS    MSGCTL(MSGPTR)                                      0059
*     BC(8,NEXT);                   /* NO. GET NEXT BUFFER           */
*                                                                  0060
         BC    8,NEXT                                              0060
*     /***************************************************************/
*     /*                                                             */
*     /* ACTIVE BUFFER HAS BEEN FOUND. NOW IT MUST BE DETERMINED IF A*/
*     /* VALID MESSAGE NUMBER IS CONTAINED IN THE MSGNUM FIELD. NOTE */
*     /* THAT MSGNUM='00'X MEANS THAT THE BUFFER IS NOT COMPLETELY   */
*     /* SET UP YET.                                                 */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0061
*     IF MSGNUM^='00'X THEN         /* IS MESSAGE COMPLETELY SET UP
*                                                            @YM00999*/
         CLI   MSGNUM(MSGPTR),X'00'                                0061
         BE    @RF00061                                            0061
*       DO;                         /* YES, PROCESS IT       @YM00999*/
*                                                                  0062
*         /***********************************************************/
*         /*                                                         */
*         /* THE VARIABLES NECESSARY FOR THE PROCESSING OF EACH      */
*         /* INDIVIDUAL MESSAGE MUST BE INITIALIZED AT THIS TIME.    */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0063
*         IF MSGNUM='58'X THEN      /* IS THIS THE ACR MESSAGE     0063
*                                                            @G55DP2M*/
         CLI   MSGNUM(MSGPTR),X'58'                                0063
         BNE   @RF00063                                            0063
*           IF MSGTAB1='FF'X THEN   /* YES- IS THE MESSAGE TO BE   0064
*                                      PRINTED               @G55DP2M*/
         CLI   MSGTAB1(MSGPTR),X'FF'                               0064
         BNE   @RF00064                                            0064
*             MSGTAB1='00'X;        /* YES- RESET INDICATOR  @G55DP2M*/
         MVI   MSGTAB1(MSGPTR),X'00'                               0065
*           ELSE                                                   0066
*             GOTO OUT;             /* NO - GET OUT OF LOOP  @G55DP2M*/
*         FOUNDRC=NOTFND;           /* INDICATE THAT MSGNUM NOT FOUND*/
@RF00063 LA    FOUNDRC,4                                           0067
*         MSGPTIND=MSGNUM;          /* GET MESSAGE NUMBER FROM RVT 0068
*                                      BUFFER                        */
         MVC   MSGPTIND(1),MSGNUM(MSGPTR)                          0068
*         INDEX=1;                  /* INITIALIZE THE STACK WITH   0069
*                                      POINTER TO TOP                */
         LA    @10,1                                               0069
         LR    INDEX,@10                                           0069
*         TBLFCNT=1;                /* INITIALIZE TABLE FIELD      0070
*                                      COUNT(ALLOW FOR TWO ENTRIES)  */
         LR    TBLFCNT,@10                                         0070
*         VARFCNT=0;                /* INITIALIZE VARIABLE FIELD   0071
*                                      COUNT(ALLOW FOR TWO HEX(X)  0071
*                                      REPLACES OR ONE CHAR.(C)    0071
*                                      REPLACE                       */
         SLR   VARFCNT,VARFCNT                                     0071
*         OUTCOUNT=1;               /* INITIALIZE COUNT OF OUTPUT  0072
*                                      CHARACTERS TO 1               */
         LR    OUTCOUNT,@10                                        0072
*         OUTBUFF=' ';              /* CLEAR ACTUAL WTO OUTPUT BUFFER*/
         MVI   OUTBUFF+1,C' '                                      0073
         MVC   OUTBUFF+2(118),OUTBUFF+1                            0073
         MVI   OUTBUFF,C' '                                        0073
*/****************************************************************   */
*/*                                                                  */
*/*  SUBROUTINE FIND WILL BE USED TO LOCATE THE MESSAGE NUMBER       */
*/*   IF THE MESSAGE NUMBER IS NOT IN THE TABLE,FIND WILL RE-        */
*/*   TURN A VALUE IN THE FOUND RETURN CODE(FOUNDRC) OF              */
*/*   FOUR. A VALUE OF 0(FND) INDICATES MESSAGE FRAGMENT FOUND       */
*/*                                                                  */
*/****************************************************************   */
*                                                                  0074
*         CALL FIND;                /* FIND MESSAGE TO PROCESS       */
         BAL   @14,FIND                                            0074
*         IF FOUNDRC=FND THEN       /* IS MESSAGE FOUND ?            */
         LTR   FOUNDRC,FOUNDRC                                     0075
         BNZ   @RF00075                                            0075
*           DO;                     /* YES - GET READY FOR WTO     0076
*                                                            @YM00999*/
*             DO WHILE INDEX>0;                                    0077
         B     @DE00077                                            0077
@DL00077 DS    0H                                                  0078
*               TEXTPTR=STAKPTR(INDEX);/* LAST TEXT ADDRESS          */
         LR    @10,INDEX                                           0078
         SLA   @10,3                                               0078
         L     TEXTPTR,STAKPTR-8(@10)                              0078
*               DO TEXTCNT=STAKCNT(INDEX) BY-1 WHILE TEXTCNT>0;    0079
         L     TEXTCNT,STAKCNT-8(@10)                              0079
         B     @DE00079                                            0079
@DL00079 DS    0H                                                  0080
*                 OUTBUFF(OUTCOUNT)=INCHAR;/* MOVE ONE CHAR          */
         LA    @10,OUTBUFF-1(OUTCOUNT)                             0080
         MVC   0(1,@10),INCHAR(TEXTPTR)                            0080
*                 IF INCHAR='%' THEN                               0081
         CLI   INCHAR(TEXTPTR),C'%'                                0081
         BNE   @RF00081                                            0081
*                   DO;                                            0082
*                     TEXTPTR=TEXTPTR+1;/* INCREMENT POSITION OF   0083
*                                      TEXTPTR                       */
         AL    TEXTPTR,@CF00078                                    0083
*                     IF INCHAR='X'×INCHAR='D' THEN                0084
         CLI   INCHAR(TEXTPTR),C'X'                                0084
         BE    @RT00084                                            0084
         CLI   INCHAR(TEXTPTR),C'D'                                0084
         BNE   @RF00084                                            0084
@RT00084 DS    0H                                                  0085
*                       CALL CONVERT;/* CONVERT TO PRINTABLE CHAR    */
         BAL   @14,CONVERT                                         0085
*                     ELSE                                         0086
*                       IF INCHAR='C' THEN                         0086
         B     @RC00084                                            0086
@RF00084 CLI   INCHAR(TEXTPTR),C'C'                                0086
         BNE   @RF00086                                            0086
*                         CALL CHARCONV;/* MOVE CHARACTERS           */
         BAL   @14,CHARCONV                                        0087
*                       ELSE                                       0088
*                         IF INCHAR='T' THEN                       0088
         B     @RC00086                                            0088
@RF00086 CLI   INCHAR(TEXTPTR),C'T'                                0088
         BNE   @RF00088                                            0088
*                           CALL REPLACE;/* REPLACE WITH STRING      */
         BAL   @14,REPLACE                                         0089
*                         ELSE                                     0090
*                           OUTCOUNT=OUTCOUNT+1;/* % NOT FOLLOWED BY
*                                      VALID CHAR                    */
         B     @RC00088                                            0090
@RF00088 AL    OUTCOUNT,@CF00078                                   0090
*                   END;                                           0091
*                 ELSE                                             0092
*                   DO;                                            0092
         B     @RC00081                                            0092
@RF00081 DS    0H                                                  0093
*                     OUTCOUNT=OUTCOUNT+1;/* INCREMENT OUTPUT COUNTER*/
         LA    @10,1                                               0093
         ALR   OUTCOUNT,@10                                        0093
*                     TEXTPTR=TEXTPTR+1;/* INCREMENT POINTER TO INPUT
*                                      TEXT                          */
         ALR   TEXTPTR,@10                                         0094
*                   END;                                           0095
*               END;                /* THIS ENDS THE PROCESSING FOR A
*                                      MESSAGE FRAGMENT              */
*                                                                  0096
@RC00081 BCTR  TEXTCNT,0                                           0096
@DE00079 LTR   TEXTCNT,TEXTCNT                                     0096
         BP    @DL00079                                            0096
*               /*****************************************************/
*               /*                                                   */
*               /* NOW UPDATE THE INDEX VALUE TO SEE IF FRAGMENTS    */
*               /* HAVE BEEN STACKED                                 */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0097
*               INDEX=INDEX-1;      /* DECREMENT SKELETON POSITION 0097
*                                      POINTER                       */
         BCTR  INDEX,0                                             0097
*             END;                                                 0098
*                                                                  0098
@DE00077 LTR   INDEX,INDEX                                         0098
         BP    @DL00077                                            0098
*             /*******************************************************/
*             /*                                                     */
*             /* A COMPLETE MESSAGE HAS BEEN SET UP AT THIS POINT NOW*/
*             /* THE MESSAGE MUST BE WRITTEN TO THE OPERATOR AND     */
*             /* FURTHUR SEARCH OF THE RVT MESSAGE BUFFER RESUMED    */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0099
*             CALL WTORTN;          /* ISSUE WTO                     */
         BAL   @14,WTORTN                                          0099
*             IF MSGNUM='58'X THEN                                 0100
         CLI   MSGNUM(MSGPTR),X'58'                                0100
         BNE   @RF00100                                            0100
*               DO;                 /* THIS IS THE ACR MSG   @ZM45609*/
*                 MSGVAR1=0;        /* RESET CPU ADDR IN MSG @ZM45609*/
         SLR   @10,@10                                             0102
         STCM  @10,15,MSGVAR1(MSGPTR)                              0102
*                 GOTO OUT;         /* DONT RESET MSGNUM OR MSGCTL 0103
*                                                            @ZM45609*/
         B     OUT                                                 0103
*               END;                /*                       @ZM45609*/
*           END;                    /*                       @YM00999*/
@RF00100 DS    0H                                                  0106
*         MSGNUM='00'X;             /* RESET MESSAGE NUMBER IN BUFFER
*                                                            @YM00999*/
@RF00075 MVI   MSGNUM(MSGPTR),X'00'                                0106
*NEXT:                                                             0107
*         ;                                                        0107
NEXT     DS    0H                                                  0108
*         MSGCTL='00'X;             /* ZERO MESSAGE CONTROL FLAG FOR
*                                      FREE BUFFER                   */
         MVI   MSGCTL(MSGPTR),X'00'                                0108
*       END;                                                       0109
*OUT:                                                              0110
*     ;                                                            0110
@RF00061 DS    0H                                                  0110
OUT      DS    0H                                                  0111
*   END;                                                           0111
*                                                                  0111
         AL    MSGPTR,@CF00032                                     0111
@DE00058 L     @10,CVTPTR                                          0111
         L     @10,RVTPTR(,@10)                                    0111
         L     @04,RVTMSGPT(,@10)                                  0111
         AL    @04,RVTMSGLN(,@10)                                  0111
         CR    MSGPTR,@04                                          0111
         BL    @DL00058                                            0111
*   /*****************************************************************/
*   /*                                                               */
*   /* ENTRY AT THIS POINT INDICATES THAT ALL POSSIBLE MESSAG ES HAVE*/
*   /* BEEN WRITTEN.                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0112
*   RETURN;                         /* RETURN TO CALLER              */
*                                                                  0112
@EL00001 L     @13,4(,@13)                                         0112
@EF00001 L     @00,@SIZDATD                                        0112
         LR    @01,@11                                             0112
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0112
         BR    @14                                                 0112
*   /*****************************************************************/
*   /*                                                               */
*   /* FIND SUBROUTINE IS USED TO LOCATE A MESSAGE FRAGMENT IN THE   */
*   /* MESSAGE SKELETON . A POINTER TO THE DESIRED FRAGMENT EXISTS AT*/
*   /* FIELD MSGPTIND. THIS VALUE IS COMPARED AGAINST THE SKELKEY    */
*   /* FIELD OF EACH TABLE ENTRY.                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0113
*FIND:                                                             0113
*   PROC;                           /* PROCEDURE TO LOCATE MESSAGE 0113
*                                      FRAGMENT                      */
FIND     STM   @14,@05,12(@13)                                     0113
         STM   @07,@12,48(@13)                                     0113
*   FOUNDRC=NOTFND;                 /* INITIALIZE BAD RETURN CODE    */
         LA    FOUNDRC,4                                           0114
*   DO SKELNDX=1 TO SKELENT WHILE FOUNDRC^=FND;/* GET READY TO SEARCH
*                                      SKELETON              @YM00999*/
         LA    SKELNDX,1                                           0115
         B     @DE00115                                            0115
@DL00115 LTR   FOUNDRC,FOUNDRC                                     0115
         BZ    @DC00115                                            0115
*     IF SKELKEY(SKELNDX)=MSGPTIND  /* SEARCH SKELETON KEY           */
*       THEN                                                       0116
         LR    @10,SKELNDX                                         0116
         MH    @10,@CH01056                                        0116
         LA    @07,SKELKEY-57(@10)                                 0116
         CLC   0(1,@07),MSGPTIND                                   0116
         BNE   @RF00116                                            0116
*       DO;                                                        0117
*         STAKPTR(INDEX)=ADDR(SKELTEXT(SKELNDX));/* FOUND            */
         LR    @07,INDEX                                           0118
         SLA   @07,3                                               0118
         LA    @15,SKELTEXT-57(@10)                                0118
         ST    @15,STAKPTR-8(@07)                                  0118
*         STAKCNT(INDEX)=SKELLNG(SKELNDX);/* SAVE LENGTH             */
         SLR   @15,@15                                             0119
         IC    @15,SKELLNG-57(@10)                                 0119
         ST    @15,STAKCNT-8(@07)                                  0119
*         FOUNDRC=FND;              /* INDICATE MSG. FRAGMENT FOUND  */
         SLR   FOUNDRC,FOUNDRC                                     0120
*       END;                                                       0121
*     ELSE                                                         0122
*       ;                                                          0122
@RF00116 DS    0H                                                  0123
*   END;                                                           0123
         AL    SKELNDX,@CF00078                                    0123
@DE00115 C     SKELNDX,SKELENT                                     0123
         BNH   @DL00115                                            0123
@DC00115 DS    0H                                                  0124
*   RETURN;                         /* RETURN TO MAINLINE            */
@EL00002 DS    0H                                                  0124
@EF00002 DS    0H                                                  0124
@ER00002 LM    @14,@05,12(@13)                                     0124
         LM    @07,@12,48(@13)                                     0124
         BR    @14                                                 0124
*   END FIND;                                                      0125
*REPLACE:                                                          0126
*   PROC;                           /* PROCEDURE TO PROCESS 'T'    0126
*                                      REPLACE CHARACTERS            */
REPLACE  STM   @14,@01,@SA00003                                    0126
         STM   @05,@06,@SA00003+16                                 0126
         ST    @08,@SA00003+24                                     0126
         STM   @10,@12,@SA00003+28                                 0126
*   TBLFCNT=TBLFCNT+1;              /* INCREMENT TABLE FIELD COUNT   */
         LA    @10,1                                               0127
         ALR   TBLFCNT,@10                                         0127
*   IF TBLFCNT<4                                                   0128
*                                                                  0128
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE TFC IS LESS THAN 4,THEN A VALID SUBSTUTION CAN OCCUR.  */
*   /* IT IS NECESSARY TO UPDATE THE CURRENT POINTERS,SAVE THEM IN   */
*   /* THE STAK,BUMP THE STAK INDEX AND SEE IF A VALID SUBSTUTION    */
*   /* CHARACTER IS FOUND IN THE SKELETON.                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0128
*     THEN                                                         0128
         C     TBLFCNT,@CF00070                                    0128
         BNL   @RF00128                                            0128
*     DO;                                                          0129
*       TEXTPTR=TEXTPTR+1;          /* UPDATE TEXTPTR TO REFLECT 'T'
*                                      CHAR                          */
         ALR   TEXTPTR,@10                                         0130
*       TEXTCNT=TEXTCNT-1;          /* UPDATE TEXT CNT TO REFLECT 'T'
*                                      CHAR                          */
         BCTR  TEXTCNT,0                                           0131
*       STAKPTR(INDEX)=TEXTPTR;     /* SAVE TEXT POINTER IN STACK    */
         LR    @08,INDEX                                           0132
         SLA   @08,3                                               0132
         ST    TEXTPTR,STAKPTR-8(@08)                              0132
*       STAKCNT(INDEX)=TEXTCNT;     /* SAVE TEXT COUNT IN STACK      */
         ST    TEXTCNT,STAKCNT-8(@08)                              0133
*       INDEX=INDEX+1;              /* INCREMENT STACK INDEX         */
         ALR   INDEX,@10                                           0134
*       IF TBLFCNT=2 THEN                                          0135
         C     TBLFCNT,@CF00090                                    0135
         BNE   @RF00135                                            0135
*         MSGPTIND=MSGTAB1;                                        0136
         MVC   MSGPTIND(1),MSGTAB1(MSGPTR)                         0136
*       ELSE                                                       0137
*         MSGPTIND=MSGTAB2;         /* TBLFCNT DICTATES CORRECT    0137
*                                      MSGTAB FIELD                  */
         B     @RC00135                                            0137
@RF00135 MVC   MSGPTIND(1),MSGTAB2(MSGPTR)                         0137
*       CALL FIND;                  /* GO FIND STRING TO SUBSTITUTE  */
*                                                                  0138
@RC00135 BAL   @14,FIND                                            0138
*       /*************************************************************/
*       /*                                                           */
*       /* DETERMINE IF APPROPIATE ENTRY IN MSGTAB DID CONTAIN A     */
*       /* VALID MESSAGE FRAGMENT CODE.                              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0139
*       IF FOUNDRC=FND THEN                                        0139
         LTR   FOUNDRC,FOUNDRC                                     0139
         BNZ   @RF00139                                            0139
*         DO;                       /* VALID CODE ?                  */
*           INDEX=INDEX+1;          /* YES,INSURE INDEX WILL BE    0141
*                                      DECREMENTED CORRECTLY         */
         AL    INDEX,@CF00078                                      0141
*           TEXTCNT=0;              /* FORCE COUNT TO ZERO,PROPAGATE
*                                      INDEX DECREM NT AND RE-LOOP   */
         SLR   TEXTCNT,TEXTCNT                                     0142
*         END;                                                     0143
*       ELSE                                                       0144
*         DO;                       /* MESSAGE FRAGMENT NUMBER     0144
*                                      INVALID,MUST MOVE             */
*                                                                  0144
         B     @RC00139                                            0144
@RF00139 DS    0H                                                  0145
*           /*********************************************************/
*           /*                                                       */
*           /* 'T' CHARACTER AND RETURN TO MAINLINE PROCESSING       */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0145
*           OUTBUFF(OUTCOUNT+1)='T';/* MOVE 'T' THAT BROUGHT US HERE */
         LA    @10,OUTBUFF(OUTCOUNT)                               0145
         MVI   0(@10),C'T'                                         0145
*           OUTCOUNT=OUTCOUNT+2;    /* ADJUST OUTCOUNT FOR BOTH '%'
*                                      AND 'T'                       */
         AL    OUTCOUNT,@CF00090                                   0146
*           INDEX=INDEX-1;          /* RESTORE INDEX TO REFLECT VALUE
*                                      AT ENTRY TO THIS SUBROUTINE   */
         BCTR  INDEX,0                                             0147
*         END;                                                     0148
*     END;                                                         0149
*   ELSE                                                           0150
*     OUTCOUNT=OUTCOUNT+1;          /* ADJUST COUNT SO 'T' IS MOVED  */
         B     @RC00128                                            0150
@RF00128 AL    OUTCOUNT,@CF00078                                   0150
*   RETURN;                         /* RETURN TO MAINLINE            */
@EL00003 DS    0H                                                  0151
@EF00003 DS    0H                                                  0151
@ER00003 LM    @14,@01,@SA00003                                    0151
         LM    @05,@06,@SA00003+16                                 0151
         L     @08,@SA00003+24                                     0151
         LM    @10,@12,@SA00003+28                                 0151
         BR    @14                                                 0151
*   END REPLACE;                                                   0152
         B     @EL00003                                            0152
*CHARCONV:                                                         0153
*   PROC;                           /* PROCEDURE TO HANDLE 'C' CHAR.
*                                      REPLACE STRINGS               */
CHARCONV STM   @14,@01,12(@13)                                     0153
         STM   @05,@06,40(@13)                                     0153
         STM   @09,@12,56(@13)                                     0153
*   VARFCNT=VARFCNT+4;              /* ADJUST VARFCNT TO GET CORRECT
*                                      INDEX                         */
         AL    VARFCNT,@CF00070                                    0154
*   IF VARFCNT<5                                                   0155
*                                                                  0155
*   /*****************************************************************/
*   /*                                                               */
*   /* IF VARFCNT IS LESS THAN FIVE THAN THIS IS A VALID CHARACTER   */
*   /* SUBSTITUTION.THE INDICES WILL BE UPDATED AND THE 8 CHARACTERS */
*   /* MOVED.IF THE VARFCNT(VARIABLE FIELD COUNT) IS 5 OR MORE THAN  */
*   /* THE CHARACTER SUBSTUTION IS INVALID NAD THE 'C' MUST BE MOVED */
*   /* LIKE ANY OTHER INPUT CHARACTER                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0155
*     THEN                                                         0155
         C     VARFCNT,@CF00747                                    0155
         BNL   @RF00155                                            0155
*     DO;                                                          0156
*       STAKPTR(INDEX)=TEXTPTR+1;   /* SAVE TEXTPTR (ALLOW FOR 'C')  */
         LR    @10,INDEX                                           0157
         SLA   @10,3                                               0157
         LA    @09,1                                               0157
         LR    @06,TEXTPTR                                         0157
         ALR   @06,@09                                             0157
         ST    @06,STAKPTR-8(@10)                                  0157
*       STAKCNT(INDEX)=TEXTCNT-1;   /* SAVE COUNT (ALLOW FOR 'C')    */
         LR    @06,TEXTCNT                                         0158
         BCTR  @06,0                                               0158
         ST    @06,STAKCNT-8(@10)                                  0158
*       INDEX=INDEX+1;              /* INCREMENT STACK INDEX         */
         ALR   INDEX,@09                                           0159
*       TEXTPTR=ADDR(MSGCHAR);      /* ADDRESS OF DATA TO MOVE       */
         LA    TEXTPTR,MSGCHAR(,MSGPTR)                            0160
*       TEXTCNT=LENGTH(MSGCHAR);    /* THE COUNT TO BE MOVED         */
         LA    TEXTCNT,8                                           0161
*     END;                                                         0162
*   ELSE                                                           0163
*     OUTCOUNT=OUTCOUNT+1;          /* ADJUST COUNT SO THAT 'C' IS 0163
*                                      MOVED                         */
         B     @RC00155                                            0163
@RF00155 AL    OUTCOUNT,@CF00078                                   0163
*   RETURN;                         /* RETURN TO THE MAINLINE        */
@EL00004 DS    0H                                                  0164
@EF00004 DS    0H                                                  0164
@ER00004 LM    @14,@01,12(@13)                                     0164
         LM    @05,@06,40(@13)                                     0164
         LM    @09,@12,56(@13)                                     0164
         BR    @14                                                 0164
*   END CHARCONV;                                                  0165
         B     @EL00004                                            0165
*CONVERT:                                                          0166
*   PROC;                           /* PROCEDURE TO HANDLE 'X' AND '
*                                      D' NUMERICAL MSG. SUBST.      */
CONVERT  STM   @14,@02,12(@13)                                     0166
         STM   @05,@06,40(@13)                                     0166
         STM   @09,@12,56(@13)                                     0166
*   VARFCNT=VARFCNT+4;              /* INCREMENT USE OF VARIABLE   0167
*                                      FIELD                         */
         AL    VARFCNT,@CF00070                                    0167
*   IF VARFCNT>8 THEN               /* ONLY TWO USAGES OF VAR. FIELD
*                                      ARE PERMITT ED                */
         C     VARFCNT,@CF00076                                    0168
         BH    @RT00168                                            0168
*     RETURN;                       /* THIS IS AN INVALID USE OF THE
*                                      X OR D FUNCTION               */
*   ELSE                                                           0170
*     ;                             /* NULL ELSE, NOW PROCESS THE X
*                                      OR D CHARACTER                */
*   IF INCHAR='X'                   /* IS THIS HEX                   */
*     THEN                                                         0171
         CLI   INCHAR(TEXTPTR),C'X'                                0171
         BNE   @RF00171                                            0171
*     DO;                           /* YES, CONVERT MSG. VARIABLE TO
*                                      PRINTABLE HEX                 */
*       UNPK(DECPACK,MSGOVER);      /* UNPACK HEX DATA               */
         LR    @10,MSGPTR                                          0173
         ALR   @10,VARFCNT                                         0173
         UNPK  DECPACK(9),MSGOVER(5,@10)                           0173
*       TR(DECPACK,TAB);            /* TRANSLATE DATA FOR PRINTING   */
         LA    @10,TABLE                                           0174
         AL    @10,@CF01203                                        0174
         TR    DECPACK(9),TAB(@10)                                 0174
*       LMAX=7;                     /* ALLOW FOR 7 LEADING ZEROES TO
*                                      BE DELETED                    */
         LA    LMAX,7                                              0175
*     END;                                                         0176
*   ELSE                                                           0177
*     DO;                           /* NO, MSG VARIABLE MUST BE    0177
*                                      CONVERTED TO PRINT. DECIMAL   */
         B     @RC00171                                            0177
@RF00171 DS    0H                                                  0178
*       R1=MSGOVER(1:4);            /* GET ADDR OF CORRECT MSG.    0178
*                                      VARIABLE                      */
         LR    @10,MSGPTR                                          0178
         ALR   @10,VARFCNT                                         0178
         ICM   R1,15,MSGOVER(@10)                                  0178
*       CVD(R1,UNPKOUT);            /* CONVERT TO DECIMAL            */
         CVD   R1,UNPKOUT                                          0179
*       UNPK(OUTPUT,UNPKOUT);       /* MAKE IT PRINTABLE             */
         UNPK  OUTPUT(16),UNPKOUT(8)                               0180
*       LOWORDER=LOWORDER×SIGNZONE; /* CORRECT FOR UNPK ZONE         */
         OI    LOWORDER,B'11110000'                                0181
*       LMAX=15;                    /* ALLOW FOR 17 LEADING ZEROS TO
*                                      BE SUPRESSED                  */
         LA    LMAX,15                                             0182
*     END;                                                         0183
*                                                                  0183
*   /*****************************************************************/
*   /*                                                               */
*   /* CALCULATE THE NUMBER OF LEADING ZEROS TO BE SUPRESSED         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0184
*   DO N=1 BY 1 TO LMAX WHILE OUTPUT(N)='0';                       0184
@RC00171 LA    N,1                                                 0184
         B     @DE00184                                            0184
@DL00184 LA    @10,OUTPUT-1(N)                                     0184
         CLI   0(@10),C'0'                                         0184
         BNE   @DC00184                                            0184
*   END;                                                           0185
         AL    N,@CF00078                                          0185
@DE00184 CR    N,LMAX                                              0185
         BNH   @DL00184                                            0185
@DC00184 DS    0H                                                  0186
*   N=N-1;                          /* GET ACTUAL NUMBER OF LEADING
*                                      ZEROS                         */
*                                                                  0186
         BCTR  N,0                                                 0186
*   /*****************************************************************/
*   /*                                                               */
*   /* NOW MOVE THE DATA FROM THE WORK AREA TO THE WTO OUTPUT        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0187
*   OUTBUFF(OUTCOUNT:OUTCOUNT+LMAX-N)=OUTPUT(N+1:LMAX+1);          0187
         LA    @10,OUTBUFF-1(OUTCOUNT)                             0187
         LR    @09,OUTCOUNT                                        0187
         ALR   @09,LMAX                                            0187
         SLR   @09,N                                               0187
         LR    @15,@09                                             0187
         SLR   @15,OUTCOUNT                                        0187
         LA    @01,OUTPUT(N)                                       0187
         EX    @15,@SM01204                                        0187
*   OUTCOUNT=OUTCOUNT+LMAX-N+1;     /* ADJUST OUTBUFF COUNT          */
         LA    @10,1                                               0188
         ALR   @09,@10                                             0188
         LR    OUTCOUNT,@09                                        0188
*   TEXTPTR=TEXTPTR+1;              /* ALLOW FOR 'X' OR 'D'          */
         ALR   TEXTPTR,@10                                         0189
*   TEXTCNT=TEXTCNT-2;              /* ALLOW FOR BOTH % AND X OR D   */
         BCTR  TEXTCNT,0                                           0190
         BCTR  TEXTCNT,0                                           0190
*   RETURN;                         /* RETURN TO THE MAINLINE        */
@EL00005 DS    0H                                                  0191
@EF00005 DS    0H                                                  0191
@ER00005 LM    @14,@02,12(@13)                                     0191
         LM    @05,@06,40(@13)                                     0191
         LM    @09,@12,56(@13)                                     0191
         BR    @14                                                 0191
*   END CONVERT;                                                   0192
         B     @EL00005                                            0192
*WTORTN:                                                           0193
*   PROC;                           /* PROCEDURE TO ACCOMPLISH ACTUAL
*                                      WRITE TO OPERATOR             */
WTORTN   STM   @14,@12,@SA00006                                    0193
*   WTOLNG=OUTCOUNT-1+4;            /* LENGTH IS SIZE OF MESSAGE + 4
*                                      BYTE HEADER           @YM02558*/
         LA    @10,3(,OUTCOUNT)                                    0194
         STCM  @10,3,WTOLNG                                        0194
*   WTOFLG=GENMCS;                  /* GET MCS FLAGS FROM LIST FORM
*                                      OF WTO                        */
         MVC   WTOFLG(2),GENMCS                                    0195
*   IF MSGNUM='58'X THEN                                           0196
         CLI   MSGNUM(MSGPTR),X'58'                                0196
         BNE   @RF00196                                            0196
*     WTOMSG(OUTCOUNT+4:OUTCOUNT+5)=ACRDESC;/* ACR DESC CODE @ZM45609*/
         LA    @10,WTOMSG+3(OUTCOUNT)                              0197
         MVC   0(2,@10),ACRDESC                                    0197
*   ELSE                                                           0198
*     WTOMSG(OUTCOUNT+4:OUTCOUNT+5)=GENDESC;/* GET DESCRIPTOR CODES
*                                      FROM LIST FORM OF WTO @YM02558*/
         B     @RC00196                                            0198
@RF00196 LA    @10,WTOMSG+3(OUTCOUNT)                              0198
         MVC   0(2,@10),GENDESC                                    0198
*   WTOMSG(OUTCOUNT+6:OUTCOUNT+7)=GENROUT;/* GET ROUTING CODES FROM
*                                      LIST FORM OF WTO      @YM02558*/
@RC00196 LA    @10,WTOMSG+5(OUTCOUNT)                              0199
         MVC   0(2,@10),GENROUT                                    0199
*   R1=ADDR(WTOMSG);                /* SET UP REG 1 TO DO THE WTO    */
         LA    R1,WTOMSG                                           0200
*   GEN;                                                           0201
   WTO  MF=(E,(R1))
*   RETURN;                         /* RETURN TO MAINLINE            */
@EL00006 DS    0H                                                  0202
@EF00006 DS    0H                                                  0202
@ER00006 LM    @14,@12,@SA00006                                    0202
         BR    @14                                                 0202
*   END WTORTN;                                                    0203
*   END IGFPWMSG                                                   0204
*                                                                  0204
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IGFMSG  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHARVT  )                                       */
*                                                                  0204
*       ;                                                          0204
@DATA    DS    0H
@CH01056 DC    H'57'
@SM01204 MVC   0(0,@10),0(@01)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00003 DS    10F
@SA00006 DS    15F
IGFPWMSG CSECT
         DS    0F
@CF00078 DC    F'1'
@CF00090 DC    F'2'
@CF00070 DC    F'4'
@CF00747 DC    F'5'
@CF00076 DC    F'8'
@CF00032 DC    F'12'
@CF01203 DC    F'-240'
@DATD    DSECT
         DS    0D
MSGPTIND DS    CL1
         DS    CL7
OUTPUT   DS    CL16
         ORG   OUTPUT
DECPACK  DS    CL9
         ORG   DECPACK
DECPRIME DS    CL8
DECEXTRA DS    CL1
         ORG   OUTPUT+9
REMAIN   DS    CL6
LOWORDER DS    CL1
         ORG   OUTPUT+16
UNPKOUT  DS    CL8
WTOMSG   DS    CL128
         ORG   WTOMSG
WTOLNG   DS    CL2
WTOFLG   DS    CL2
OUTBUFF  DS    CL120
WTODESC  DS    CL2
WTOROUT  DS    CL2
         ORG   WTOMSG+128
STACK    DS    CL8
         ORG   STACK+0
STAKPTR  DS    FL4
STAKCNT  DS    FL4
         ORG   STACK+32
IGFPWMSG CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
SKELENT  DC    AL4(16)
ACRDESC  DC    X'4000'
TABLE    DC    CL16'0123456789ABCDEF'
SKELETON DS    CL57
         ORG   SKELETON+0
SKELKEY  DC    X'0B'
SKELLNG  DC    X'21'
SKELTEXT DC    CL55'SR EVENTS HAVE OCCURRED ON CPU %X'
         ORG   SKELETON+57
         ORG   SKELETON+57
         DC    X'02'
         DC    X'21'
         DC    CL55'DG EVENTS HAVE OCCURRED ON CPU %X'
         ORG   SKELETON+114
         ORG   SKELETON+114
         DC    X'03'
         DC    X'05'
         DC    CL55'QUIET'
         ORG   SKELETON+171
         ORG   SKELETON+171
         DC    X'04'
         DC    X'06'
         DC    CL55'RECORD'
         ORG   SKELETON+228
         ORG   SKELETON+228
         DC    X'05'
         DC    X'23'
         DC    CL55'SPF FAILURE AT ADDRESS %X ON CPU %X'
         ORG   SKELETON+285
         ORG   SKELETON+285
         DC    X'06'
         DC    X'11'
         DC    CL55'PROCESSOR FAILURE'
         ORG   SKELETON+342
         ORG   SKELETON+342
         DC    X'07'
         DC    X'27'
         DC    CL55'STORAGE FAILURE AT ADDRESS %X ON CPU %X'
         ORG   SKELETON+399
         ORG   SKELETON+399
         DC    X'08'
         DC    X'0B'
         DC    CL55'SPF FAILURE'
         ORG   SKELETON+456
         ORG   SKELETON+456
         DC    X'09'
         DC    X'0F'
         DC    CL55'STORAGE FAILURE'
         ORG   SKELETON+513
         ORG   SKELETON+513
         DC    X'0A'
         DC    X'1C'
         DC    CL55'STORAGE EVENTS HAVE OCCURRED'
         ORG   SKELETON+570
         ORG   SKELETON+570
         DC    X'31'
         DC    X'19'
         DC    CL55'IGF931I %D %T, STATUS= %T'
         ORG   SKELETON+627
         ORG   SKELETON+627
         DC    X'71'
         DC    X'21'
         DC    CL55'IGF971I RECOVERY INITIATED FOR %T '
         ORG   SKELETON+684
         ORG   SKELETON+684
         DC    X'72'
         DC    X'2B'
         DC    CL55'IGF972I RECOVERY INITIATED FOR %T ON CPU %X'
         ORG   SKELETON+741
         ORG   SKELETON+741
         DC    X'0C'
         DC    X'02'
         DC    CL55'%C'
         ORG   SKELETON+798
         ORG   SKELETON+798
         DC    X'56'
         DC    X'30'
         DC    CL55'IGF956I HIGH SPEED BUFFER /TLB  ENABLED ON CPU %X'
         ORG   SKELETON+855
         ORG   SKELETON+855
         DC    X'58'
         DC    X'29'
         DC    CL55'IEA858I ACR COMPLETE, CPU %X NOW OFFLINE '
         ORG   SKELETON+912
IGFPWMSG CSECT
WTOLIST WTO ' ',MF=L,ROUTCDE=(2,10),DESC=4
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IGFPWMSG CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
TEXTCNT  EQU   @07
TEXTPTR  EQU   @04
FOUNDRC  EQU   @06
SKELNDX  EQU   @03
OUTCOUNT EQU   @03
VARFCNT  EQU   @08
TBLFCNT  EQU   @09
N        EQU   @02
LMAX     EQU   @06
INDEX    EQU   @02
MSGPTR   EQU   @05
R1       EQU   @01
R0       EQU   @00
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTRMS   EQU   CVTMAP+224
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
MSG      EQU   0
MSGCTL   EQU   MSG
MSGNUM   EQU   MSG+1
MSGTAB1  EQU   MSG+2
MSGTAB2  EQU   MSG+3
MSGCHAR  EQU   MSG+4
MSGVAR1  EQU   MSGCHAR
RVT      EQU   0
RVTMSGPT EQU   RVT+88
RVTMSGLN EQU   RVT+92
INCHAR   EQU   0
MSGOVER  EQU   0
TAB      EQU   0
GENMCS   EQU   WTOLIST+2
GENDESC  EQU   WTOLIST+5
GENROUT  EQU   WTOLIST+7
CVTPTR   EQU   FLCCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
PSARSVTE EQU   PSARSVT
RVTPTR   EQU   CVTRMS
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
GENTEXT  EQU   WTOLIST+4
GENLNG   EQU   WTOLIST
RVTMIH2  EQU   RVT+108
RVTMIH   EQU   RVT+104
RVTCCHCR EQU   RVT+100
RVTCCHDA EQU   RVT+96
RVTLRBPT EQU   RVT+84
RVTRWAPT EQU   RVT+80
RVT01MMM EQU   RVT+76
RVT00MMM EQU   RVT+72
RVTPEXIT EQU   RVT+68
RVTPKREF EQU   RVT+64
RVTPBUCR EQU   RVT+60
RVTPXMFA EQU   RVT+56
RVTPTAIM EQU   RVT+52
RVTPTCON EQU   RVT+48
RVTPTREC EQU   RVT+44
RVTPTSIG EQU   RVT+40
RVTPTERM EQU   RVT+36
RVTPMKTA EQU   RVT+32
RVTPMMSG EQU   RVT+28
RVTPMTHA EQU   RVT+24
RVTPMPFX EQU   RVT+20
RVTPMSCA EQU   RVT+16
RVTPMHCA EQU   RVT+12
RVTPMFRS EQU   RVT+8
RVTPMRTM EQU   RVT+4
RVTPMCIH EQU   RVT
MSGVAR2  EQU   MSGCHAR+4
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTRV490 EQU   CVTMAP+388
CVTSU    EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTVS1B  EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00026 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00025 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00024 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00023 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00022 EQU   FLCFSA
@NM00021 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00020 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00019 EQU   FLCIOA
@NM00018 EQU   FLCMCLA+15
@NM00017 EQU   FLCMCLA+14
@NM00016 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00015 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00014 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00013 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00012 EQU   FLCPER
@NM00011 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00010 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00009 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00008 EQU   FLCPIILC
@NM00007 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00006 EQU   FLCSVILC
@NM00005 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00004 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00003 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00064 EQU   OUT
@RC00088 EQU   @RC00081
@RC00086 EQU   @RC00081
@RC00084 EQU   @RC00081
@RC00128 EQU   @EL00003
@RC00155 EQU   @EL00004
@RT00168 EQU   @EL00005
@RC00139 EQU   @RC00128
@ENDDATA EQU   *
         END   IGFPWMSG,(C'PLS1941',0701,77125)
