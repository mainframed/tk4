         TITLE 'IEFAB441 - VALIDITY CHECKER                            *
                        '
IEFAB441 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'IEFAB441  76.342'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @12,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@12                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         MODESET EXTKEY=SCHED,SAVEKEY=(2)
         GSPACE   R,LV=(0)
         LR    @11,@01                                          01S0001
         USING @DATD,@11                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         STC   @02,@OLDKEY                                      01S0001
         MODESET KEYADDR=(2)
         LM    @00,@02,20(@13)                                  01S0001
         ST    @11,8(,@13)                                      01S0001
         LR    @13,@11                                          01S0001
         MODESET EXTKEY=ZERO
         MVC   @PC00001(20),0(@01)                              01S0001
         MODESET EXTKEY=SCHED
*RTNCODE = SUCCESS;                    /*INITIALIZE RETURN CODE      */
         SLR   RTNCODE,RTNCODE                                  01S0073
*SIOTPTR = INVUPTR->VOLSIOTP;          /*SET PTR TO SIOT TO PROCESS  */
         L     @10,@PC00001+8                                   01S0074
         L     @10,INVUPTR(,@10)                                01S0074
         MVC   SIOTPTR(4),VOLSIOTP(@10)                         01S0074
*MASKPTR = ADDR(QMASKOWN);             /*COPY PTR TO MASK            */
         L     @10,@PC00001+4                                   01S0075
         L     @10,ALCWAPTR(,@10)                               01S0075
         L     @01,QMGRRBP(,@10)                                01S0075
         L     @01,AQMQBPTR(,@01)                               01S0075
         LA    @15,QMASKOWN(,@01)                               01S0075
         ST    @15,MASKPTR                                      01S0075
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - LOCATVOL                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - DETERMINE IF A VOLUME IS MOUNTED              */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE DETERMINES IF A VOLUME IS MOUNTED ON A          */
*/*     TAPE OR DIRECT-ACCESS UNIT. IF SO, THE GROUP ID OF THE UNIT  */
*/*     IS RETURNED.                                                 */
*/*   OPERATION - THE EDT GROUP ENTRIES ARE SCANNED TO LOCATE        */
*/*               THE UCB WITH THE VOLUME                            */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     ALCWAPTR - PTR TO THE ALLOCATION WORK AREA                   */
*/*       EDTABPTR - PTR TO THE SYSGEN'ED EDT                        */
*/*     INVUPTR - PTR TO THE VU ENTRY BEING VALIDITY CHECKED         */
*/*       VOLID - VOLUME SERIAL TO BE SEARCHED FOR                   */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITIONS - VOLUME FOUND MOUNTED                              */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     FNDGRPID - GROUP ID OF UCB WITH THE VOLUME                   */
*/*     VOLFND - 1                                                   */
*/*     UCBPTR - POINTER TO THE UNIT HAVING THE VOLUME MOUNTED       */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITIONS - VOLUME NOT MOUNTED                                */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     VOLFND - 0                                                   */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/********************************************************************/
*VOLFND = OFF;                         /*INDICATE UCB NOT LOCATED    */
         NI    VOLFND,B'11111011'                               02S0076
*GRPPTR = EDTGRPSP + LENGTH(GRPHDR);   /*LOCATE FIRST GROUP ENTRY    */
         L     @10,EDTABPTR(,@10)                               02S0077
         LA    GRPPTR,8                                         02S0077
         AL    GRPPTR,EDTGRPSP(,@10)                            02S0077
*DO GRPCTR = ONE TO GRPENTNO           /*SCAN ALL GROUP ENTRIES      */
*    WHILE VOLFND = OFF;                                        02S0078
         LA    GRPCTR,1                                         02S0078
         B     @DE00078                                         02S0078
@DL00078 TM    VOLFND,B'00000100'                               02S0078
         BNZ   @DC00078                                         02S0078
*  DO DEVCTR = ONE TO GRPUCBNO         /*SCAN ALL UCBS IN GROUP      */
*      WHILE VOLFND = OFF;                                      02S0079
         LA    DEVCTR,1                                         02S0079
         B     @DE00079                                         02S0079
@DL00079 TM    VOLFND,B'00000100'                               02S0079
         BNZ   @DC00079                                         02S0079
*    UCBPTR = IOSLUT(EUCBTPOS(DEVCTR)+ONE); /*GET ADDRESS OF UCB     */
         LR    @10,DEVCTR                                       02S0080
         ALR   @10,@10                                          02S0080
         L     @01,GRPUCBP(,GRPPTR)                             02S0080
         BCTR  @01,0                                            02S0080
         BCTR  @01,0                                            02S0080
         LH    @10,EUCBTPOS(@10,@01)                            02S0080
         ALR   @10,@10                                          02S0080
         L     @15,@PC00001+4                                   02S0080
         L     @01,ALCWAPTR(,@15)                               02S0080
         L     @01,IOSLUTP(,@01)                                02S0080
         ALR   @01,@10                                          02S0080
         SLR   @10,@10                                          02S0080
         ICM   @10,3,IOSLUT(@01)                                02S0080
         ST    @10,UCBPTR                                       02S0080
*    IF (UCB3DACC=ON × UCB3TAPE=ON)    /*INPUT VOLUME MOUNTED ?      */
*        & UCBVOLI=INVUPTR->VOLID THEN                          02S0081
         TM    UCB3DACC(@10),B'10100000'                        02S0081
         BZ    @RF00081                                         02S0081
         L     @15,@PC00001+8                                   02S0081
         L     @01,INVUPTR(,@15)                                02S0081
         CLC   UCBVOLI(6,@10),VOLID(@01)                        02S0081
         BNE   @RF00081                                         02S0081
*      DO;                                                      02S0082
*        VOLFND = ON;                  /*INDICATE VOLUME WAS FOUND   */
         OI    VOLFND,B'00000100'                               02S0083
*        FNDGRPID = GRPID;             /*COPY GROUP ID               */
         MVC   FNDGRPID(4),GRPID(GRPPTR)                        02S0084
*      END;                                                     02S0085
*    ELSE;                             /*VOLUME NOT FOUND            */
@RF00081 DS    0H                                               02S0087
*  END;                                                         02S0087
         AH    DEVCTR,@CH00048                                  02S0087
@DE00079 C     DEVCTR,GRPUCBNO(,GRPPTR)                         02S0087
         BNH   @DL00079                                         02S0087
@DC00079 DS    0H                                               02S0088
*  GRPPTR = GRPPTR + GRPENTLN;         /*POINT TO NEXT GROUP ENTRY   */
         L     @10,@PC00001+4                                   02S0088
         L     @10,ALCWAPTR(,@10)                               02S0088
         L     @10,EDTABPTR(,@10)                               02S0088
         L     @10,EDTGRPSP(,@10)                               02S0088
         AL    GRPPTR,GRPENTLN(,@10)                            02S0088
*END;                                                           02S0089
         AH    GRPCTR,@CH00048                                  02S0089
@DE00078 L     @10,@PC00001+4                                   02S0089
         L     @10,ALCWAPTR(,@10)                               02S0089
         L     @10,EDTABPTR(,@10)                               02S0089
         L     @10,EDTGRPSP(,@10)                               02S0089
         C     GRPCTR,GRPENTNO(,@10)                            02S0089
         BNH   @DL00078                                         02S0089
@DC00078 DS    0H                                               02S0090
*IF VOLFND = ON THEN                   /*IS THE VOLUME MOUNTED ?     */
         TM    VOLFND,B'00000100'                               01S0090
         BNO   @RF00090                                         01S0090
*  DO;                                 /*YES, PROCESS                */
*    IF UCBNALOC = ON THEN             /*IS THE UCB USEABLE          */
         L     @10,UCBPTR                                       01S0092
         TM    UCBNALOC(@10),B'00000100'                        01S0092
         BNO   @RF00092                                         01S0092
*      DO;                             /*NO, INDICATE ERROR          */
*        RTNCODE = ERROR;              /*SET ERROR RETURN CODE       */
         LA    RTNCODE,4                                        01S0094
*        SIOTRSNC=ERRCD(1);            /*SET SIOT REASON CODE        */
         L     @10,SIOTPTR                                      01S0095
         MVC   SIOTRSNC(2,@10),ERRCD                            01S0095
*      END;                                                     01S0096
*    ELSE                              /*UCB IS USEABLE      @Y30QPPA*/
*      IF UCBJES3 = ON & SIOTJES3 ^= ON THEN /*JES              01S0097
*                                        MANAGED UCB         @ZA03645*/
         B     @RC00092                                         01S0097
@RF00092 L     @10,UCBPTR                                       01S0097
         TM    UCBJES3(@10),B'01000000'                         01S0097
         BNO   @RF00097                                         01S0097
         L     @10,SIOTPTR                                      01S0097
         TM    SIOTJES3(@10),B'00100000'                        01S0097
         BO    @RF00097                                         01S0097
*        DO;                           /*AND NOT JES REQUEST @ZA03645*/
*          RTNCODE = ERROR;            /*SET ERROR RTN CODE  @Y30QPPA*/
         LA    RTNCODE,4                                        01S0099
*          SIOTRSNC = ERRCD(5);        /*SET SIOT REASN CODE @Y30QPPA*/
         MVC   SIOTRSNC(2,@10),ERRCD+8                          01S0100
*        END;                          /*                    @Y30QPPA*/
*      ELSE                            /*UCB IS USEABLE, CONTINUE    */
*        DO;                                                    01S0102
         B     @RC00097                                         01S0102
@RF00097 DS    0H                                               01S0103
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - CHEKTYPE                                          */
*/*                                                                  */
*/* FUNCTION -  THIS ROUTINE DETERMINES IF THE REQUESTED VOLUME      */
*/*             IS LOCATED ON A DEVICE TYPE WHICH IS COMPATIBLE      */
*/*             WITH THE DEVICE TYPE WHERE THE VOLUME IS TO BE       */
*/*             ALLOCATED.                                           */
*/*             THE TWO DEVICE TYPES ARE COMPATIBLE IF THEY ARE THE  */
*/*             SAME (EXCEPT FOR CERTAIN OPTION  BITS        @YM05476*/
*/*             THAT MAY HAVE BEEN SET IN THE UCB BY         @YM05476*/
*/*             SOME PRIOR PROCESSING. THESE ARE BITS        @YM05476*/
*/*             THAT ARE NOT FEATURES OF ALL DEVICES OF THAT @YM05476*/
*/*             TYPE, OR THAT PERTAIN TO HOW THE DEVICE IS   @YM05476*/
*/*             USED RATHER THAN PHYSICAL CHARACTERISTICS.), @YM05476*/
*/*             OR IF THEY ARE BOTH TAPE DEVICE TYPES WHICH          */
*/*             SUPPORT AT LEAST ONE MUTUAL DENSITY.                 */
*/*             IF THE DEVICE TYPES ARE COMPATIBLE BUT NOT THE SAME, */
*/*             THIS ROUTINE DETERMINES IF ALL TAPE GENERICS @YM08171*/
*/*             ARE LOCKED. IF NOT, THE REQUEST IS MARKED    @YM08171*/
*/*             FOR RETRY OR RECOVERY (IF IT IS ALREADY      @YM08171*/
*/*             RETRY).                                      @YM08171*/
*/*                                                                  */
*/*   OPERATION - (DOCUMENTED BY THE CODE)                           */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     UCBPTR - PTR TO UCB WHERE VOLUME IS MOUNTED                  */
*/*     ALCDTYPE - DEVICE TYPE TO BE ALLOCATED TO THE REQUEST        */
*/*     INVUPTR - PTR TO REQUEST BEING PROCESSED                     */
*/*     ALCWAREC - RECOVERY ALLOCATION INDICATOR             @YM08171*/
*/*     GENLOKSW - RETRY INDICATOR                           @YM08171*/
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - DEVICE TYPES ARE COMPATIBLE. RECOVERY      @YM08171*/
*/*                AND RETRY NOT NEEDED                      @YM08171*/
*/*                                                                  */
*/*   OUTPUT - TYPMATCH=1                                            */
*/*          - TYPELOKD=1                                            */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - DEVICE TYPES ARE COMPATIBLE. RETRY NEEDED.         */
*/*                                                                  */
*/*   OUTPUT - INDRETRY = 1                                          */
*/*          - SIOTRTRY = 1                                          */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - DEVICE TYPES ARE COMPATIBLE. RECOVERY NEEDED       */
*/*                                                                  */
*/*   OUTPUT - NEEDRCVY (IN ALCWA) = 1                               */
*/*          - VUDNALOC=1 AND VUVINELG=1 FOR ALL REQUESTS    @ZA07122*/
*/*          - TYPMATCH=1                                            */
*/*          - TYPELOKD=0                                            */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*  CONDITION - DEVICE TYPES ARE INCOMPATIBLE                       */
*/*                                                                  */
*/*   OUTPUT - TYPMATCH=0                                            */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/********************************************************************/
*TYPMATCH = OFF;                                                02S0103
*TYPELOKD = OFF;                       /*ASSUME DEVICE TYPE IS LOCKED*/
         NI    TYPMATCH,B'11001111'                             02S0104
*INTYPST = ALCDTYPE;                   /*COPY UCB TYPE TO BE ALLOC'D */
         L     @10,@PC00001+16                                  02S0105
         MVC   INTYPST(4),ALCDTYPE(@10)                         02S0105
*IF INDACC = ON THEN                   /*DA UNIT ?                   */
         TM    INDACC,B'00100000'                               02S0106
         BNO   @RF00106                                         02S0106
*  DO;                                 /*TURN OFF OPTION BITS@YM05476*/
*    INTYPBT2 = INTYPBT2 & SHPOWOFF;   /*SHARED FILE AND ALTERNATE
*                                        POWER BITS OFF      @YM05477*/
         NI    INTYPBT2,X'DC'                                   02S0108
*    IF INTYPBT4 = DA3340 THEN         /*IF A 3340 DEVICE    @YM05476*/
         CLI   INTYPBT4,X'0A'                                   02S0109
         BNE   @RF00109                                         02S0109
*      INTYPBT2 = INTYPBT2 & RPSMASK;  /*RPS BIT OFF ALSO    @YM05476*/
         NI    INTYPBT2,X'EF'                                   02S0110
*  END;                                /*END IF DIRECT ACCESS@YM05476*/
@RF00109 DS    0H                                               02S0112
*IF INTAPE = ON THEN                   /*TAPE DEVICE         @YM05477*/
@RF00106 TM    INTAPE,B'10000000'                               02S0112
         BNO   @RF00112                                         02S0112
*  INTYPBT2 = INTYPBT2 & OPTIONS;      /*OPTIONS BITS OFF    @ZA04104*/
         NI    INTYPBT2,X'F4'                                   02S0113
*VOLTYPST = UCBTYP;                    /*COPY UCB TYPE WHERE VOL MNTD*/
@RF00112 L     @10,UCBPTR                                       02S0114
         MVC   VOLTYPST(4),UCBTYP(@10)                          02S0114
*IF UCB3DACC = ON THEN                 /*DA UNIT ?                   */
         TM    UCB3DACC(@10),B'00100000'                        02S0115
         BNO   @RF00115                                         02S0115
*  DO;                                 /*TURN OFF OPTION BITS@YM05476*/
*    VLTYPBT2 = VLTYPBT2 & SHPOWOFF;   /*SHARED FILE AND ALTERNATE
*                                        POWER BITS OFF      @YM05477*/
         NI    VLTYPBT2,X'DC'                                   02S0117
*    IF VLTYPBT4 = DA3340 THEN         /*IF A 3340 DEVICE    @YM05476*/
         CLI   VLTYPBT4,X'0A'                                   02S0118
         BNE   @RF00118                                         02S0118
*      VLTYPBT2 = VLTYPBT2 & RPSMASK;  /*RPS BIT OFF ALSO    @YM05476*/
         NI    VLTYPBT2,X'EF'                                   02S0119
*  END;                                /*END IF DIRECT ACCESS@YM05476*/
@RF00118 DS    0H                                               02S0121
*IF UCB3TAPE = ON THEN                 /*TAPE DEVICE         @YM05477*/
@RF00115 L     @10,UCBPTR                                       02S0121
         TM    UCB3TAPE(@10),B'10000000'                        02S0121
         BNO   @RF00121                                         02S0121
*  VLTYPBT2 = VLTYPBT2 & OPTIONS;      /*OPTIONS BITS OFF    @ZA04104*/
         NI    VLTYPBT2,X'F4'                                   02S0122
*IF INTYPST = VOLTYPST THEN            /*SAME DEVICE TYPE ?          */
@RF00121 CLC   INTYPST(4),VOLTYPST                              02S0123
         BNE   @RF00123                                         02S0123
*  DO;                                 /*YES, INDICATE               */
*    TYPMATCH = ON;                                             02S0125
*    TYPELOKD = ON;                                             02S0126
         OI    TYPMATCH,B'00110000'                             02S0126
*  END;                                                         02S0127
*ELSE                                  /*NOT THE SAME DEVICE TYPE    */
*  DO;                                                          02S0128
         B     @RC00123                                         02S0128
@RF00123 DS    0H                                               02S0129
*    IF INTAPE = ON & UCB3TAPE = ON THEN /*TAPE UNITS ?              */
         TM    INTAPE,B'10000000'                               02S0129
         BNO   @RF00129                                         02S0129
         L     @10,UCBPTR                                       02S0129
         TM    UCB3TAPE(@10),B'10000000'                        02S0129
         BNO   @RF00129                                         02S0129
*      DO;                             /*YES, SEE IF TAPES ARE COMPAT*/
*        IF INTRK7 = ON & VOLTRK7 = ON THEN /*7-TRK UNITS ?          */
         TM    INTRK7,B'10000000'                               02S0131
         BNO   @RF00131                                         02S0131
         TM    VOLTRK7,B'10000000'                              02S0131
         BNO   @RF00131                                         02S0131
*          TYPMATCH = ON;              /*YES,VOL IS ELIGIBLE         */
         OI    TYPMATCH,B'00010000'                             02S0132
*        ELSE                          /*9-TRK UNITS                 */
*          DO;                                                  02S0133
         B     @RC00131                                         02S0133
@RF00131 DS    0H                                               02S0134
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - TAPECHK                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - TAPE VALIDITY CHECK ROUTINE                   */
*/*                                                                  */
*/* FUNCTION                                                         */
*/*   IF A TAPE VOLUME IS FOUND MOUNTED ON A UNIT WHOSE DEVICE TYPE  */
*/*   IS DIFFERENT THAN THAT OF THE UNIT REQUESTED, THIS ROUTINE IS  */
*/*   INVOKED. IT DETERMINES IF THE VOLUME IS ELIGIBLE FOR THE       */
*/*   REQUESTED UNIT.                                                */
*/*                                                                  */
*/* ENTRY - IN-LINE SUBROUTINE                                       */
*/*                                                                  */
*/*   PURPOSE - TO DETERMINE IF TAPE VOL IS ELIGIBLE FOR ALLOCATION  */
*/*             TO REQUESTED UNIT                                    */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     INTYPCOM - UCBTYPE FIELD OF REQUESTED UNIT                   */
*/*     TYPCOMP - UCBTYPE FIELD OF UNIT ON WHICH VOL IS MOUNTED      */
*/*     TYPMATCH - SWITCH TO BE SET IF VOL IS ELIGIBLE               */
*/*                                                                  */
*/* EXIT-NORMAL                                                      */
*/*                                                                  */
*/*   CONDITION - VALIDITY CHECK PERFORMED                           */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     TYPMATCH SWITCH SET ON IF VOL IS ELIGIBLE                    */
*/*                                                                  */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/* EXIT-ERROR - NONE                                                */
*/*                                                                  */
*/********************************************************************/
*IF INTYPCOM = TYP3000 THEN            /*800 BPI UNIT REQUESTED      */
         CLC   INTYPCOM(2),@CB00153                             03S0134
         BNE   @RF00134                                         03S0134
*  IF (TYPCOMP = TYP3000 ×             /*VOL ON 800 BPI UNIT         */
*      TYPCOMP = TYP3420) THEN         /*VOL ON 800/1600 BPI UNIT    */
         CLC   TYPCOMP(2),@CB00153                              03S0135
         BE    @RT00135                                         03S0135
         CLC   TYPCOMP(2),@CB00157                              03S0135
         BNE   @RF00135                                         03S0135
@RT00135 DS    0H                                               03S0136
*    TYPMATCH = ON;                    /*TAPE VOL IS ELIGIBLE        */
         OI    TYPMATCH,B'00010000'                             03S0136
*  ELSE;                                                        03S0137
@RF00135 DS    0H                                               03S0138
*ELSE                                                           03S0138
*  IF INTYPCOM = TYP3400 THEN          /*1600 BPI UNIT REQUESTED     */
         B     @RC00134                                         03S0138
@RF00134 CLC   INTYPCOM(2),@CB00155                             03S0138
         BNE   @RF00138                                         03S0138
*    IF (TYPCOMP = TYP3420 ×           /*VOL ON 800/1600 BPI UNIT    */
*        TYPCOMP = TYP3400 ×           /*VOL ON 1600 BPI UNIT        */
*        TYPCOMP = TYP3210) THEN       /*VOL ON 1600/6250 UNT@YM05486*/
         CLC   TYPCOMP(2),@CB00157                              03S0139
         BE    @RT00139                                         03S0139
         CLC   TYPCOMP(2),@CB00155                              03S0139
         BE    @RT00139                                         03S0139
         CLC   TYPCOMP(2),@CB00161                              03S0139
         BNE   @RF00139                                         03S0139
@RT00139 DS    0H                                               03S0140
*      TYPMATCH = ON;                  /*VOL IS ELIGIBLE             */
         OI    TYPMATCH,B'00010000'                             03S0140
*    ELSE;                                                      03S0141
@RF00139 DS    0H                                               03S0142
*  ELSE                                                         03S0142
*    IF INTYPCOM = TYP3420 THEN        /*800/1600 BPI UNIT REQUESTED */
         B     @RC00138                                         03S0142
@RF00138 CLC   INTYPCOM(2),@CB00157                             03S0142
         BNE   @RF00142                                         03S0142
*      IF (TYPCOMP = TYP3420 ×         /*VOL ON 800/1600 UNIT        */
*          TYPCOMP = TYP3000 ×         /*VOL ON 800 UNIT             */
*          TYPCOMP = TYP3400 ×         /*VOL ON 1600 UNIT            */
*          TYPCOMP = TYP3210) THEN     /*VOL ON 1600/6250 UNT@YM05486*/
         CLC   TYPCOMP(2),@CB00157                              03S0143
         BE    @RT00143                                         03S0143
         CLC   TYPCOMP(2),@CB00153                              03S0143
         BE    @RT00143                                         03S0143
         CLC   TYPCOMP(2),@CB00155                              03S0143
         BE    @RT00143                                         03S0143
         CLC   TYPCOMP(2),@CB00161                              03S0143
         BNE   @RF00143                                         03S0143
@RT00143 DS    0H                                               03S0144
*        TYPMATCH = ON;                /*VOL IS ELIGIBLE             */
         OI    TYPMATCH,B'00010000'                             03S0144
*      ELSE;                                                    03S0145
@RF00143 DS    0H                                               03S0146
*    ELSE                                                       03S0146
*      IF INTYPCOM = TYP3200 THEN      /*6250 UNIT REQUESTED         */
         B     @RC00142                                         03S0146
@RF00142 CLC   INTYPCOM(2),@CB00159                             03S0146
         BNE   @RF00146                                         03S0146
*        IF (TYPCOMP = TYP3200 ×       /*VOL ON 6250 UNIT            */
*            TYPCOMP = TYP3210) THEN   /*VOL ON 1600/6250 UNT@YM05486*/
         CLC   TYPCOMP(2),@CB00159                              03S0147
         BE    @RT00147                                         03S0147
         CLC   TYPCOMP(2),@CB00161                              03S0147
         BNE   @RF00147                                         03S0147
@RT00147 DS    0H                                               03S0148
*          TYPMATCH = ON;              /*VOL IS ELIGIBLE             */
         OI    TYPMATCH,B'00010000'                             03S0148
*        ELSE;                                                  03S0149
@RF00147 DS    0H                                               03S0150
*      ELSE                                                     03S0150
*        IF INTYPCOM = TYP3210 THEN    /*1600/6250 UNIT REQ'D@YM05486*/
         B     @RC00146                                         03S0150
@RF00146 CLC   INTYPCOM(2),@CB00161                             03S0150
         BNE   @RF00150                                         03S0150
*          IF (TYPCOMP = TYP3210 ×     /*VOL ON 1600/6250 UNT@YM05486*/
*              TYPCOMP = TYP3400 ×     /*VOL ON 1600 UNIT            */
*              TYPCOMP = TYP3420 ×     /*VOL ON 800/1600 UNIT        */
*              TYPCOMP = TYP3200) THEN /*VOL ON 6250                 */
         CLC   TYPCOMP(2),@CB00161                              03S0151
         BE    @RT00151                                         03S0151
         CLC   TYPCOMP(2),@CB00155                              03S0151
         BE    @RT00151                                         03S0151
         CLC   TYPCOMP(2),@CB00157                              03S0151
         BE    @RT00151                                         03S0151
         CLC   TYPCOMP(2),@CB00159                              03S0151
         BNE   @RF00151                                         03S0151
@RT00151 DS    0H                                               03S0152
*            TYPMATCH = ON;            /*VOL IS ELIGIBLE             */
         OI    TYPMATCH,B'00010000'                             03S0152
*          ELSE;                                                03S0153
@RF00151 DS    0H                                               03S0154
*        ELSE;                                                  03S0154
@RF00150 DS    0H                                               03S0155
*          END;                                                 02S0155
@RC00146 DS    0H                                               02S0155
@RC00142 DS    0H                                               02S0155
@RC00138 DS    0H                                               02S0155
@RC00134 DS    0H                                               02S0156
*        IF TYPMATCH = ON THEN         /*IS VOL ELIGIBLE ?           */
@RC00131 TM    TYPMATCH,B'00010000'                             02S0156
         BNO   @RF00156                                         02S0156
*          DO;                         /*YES, PROCESS                */
*            IF ALCWAREC = ON & GENLOKSW = ON THEN /*RECOVERY ALOC &
*                                        RETRY               @YM08171*/
         L     @10,@PC00001+4                                   02S0158
         L     @10,ALCWAPTR(,@10)                               02S0158
         TM    ALCWAREC(@10),B'00100000'                        02S0158
         BNO   @RF00158                                         02S0158
         L     @10,FMAPPTR(,@10)                                02S0158
         TM    GENLOKSW(@10),B'00000001'                        02S0158
         BNO   @RF00158                                         02S0158
*              TYPELOKD = ON;          /*YES, INDIC DEV TYPE IS LOCKD*/
         OI    TYPELOKD,B'00100000'                             02S0159
*            ELSE                      /*NOT RECOVERY ALLOCATION     */
*              IF GENLOKSW = ON THEN   /*RETRY               @YM08171*/
         B     @RC00158                                         02S0160
@RF00158 L     @10,@PC00001+4                                   02S0160
         L     @10,ALCWAPTR(,@10)                               02S0160
         L     @02,FMAPPTR(,@10)                                02S0160
         TM    GENLOKSW(@02),B'00000001'                        02S0160
         BNO   @RF00160                                         02S0160
*                DO;                   /*MARK FOR RECOVERY           */
*                  NEEDRCVY = ON;                               02S0162
         OI    NEEDRCVY(@10),B'00010000'                        02S0162
*                  VUPTR = VOLUNPTR;   /*SCAN VOLUNIT TABLE  @ZA07122*/
         L     VUPTR,VOLUNPTR(,@10)                             02S0163
*                  DO VUCTR=ONE TO VOLUNSZE/LENGTH(VOLUNTAB);/* 02S0164
*                                                            @ZA07122*/
         LA    VUCTR,1                                          02S0164
         B     @DE00164                                         02S0164
@DL00164 DS    0H                                               02S0165
*                    IF VOLUNTID=INVUPTR->VOLUNTID THEN /*   @ZA07122*/
         L     @10,@PC00001+8                                   02S0165
         L     @10,INVUPTR(,@10)                                02S0165
         CLC   VOLUNTID(2,VUPTR),VOLUNTID(@10)                  02S0165
         BNE   @RF00165                                         02S0165
*                      DO;             /*FOR ALL REQUESTS    @ZA07122*/
*                        VUDNALOC=ON;  /*W SAME ID,IND ENTRY @ZA07122*/
*                        VUVINELG=ON;  /*NOT TO BE PROCESSED @ZA07122*/
         OI    VUDNALOC(VUPTR),B'00001010'                      02S0168
*                      END;            /*UNTIL RECOVERY AND  @ZA07122*/
*                    ELSE;             /*VOLUME MOUNTED ON   @ZA07122*/
@RF00165 DS    0H                                               02S0171
*                                      /*INELIG OR UNLOCKED  @ZA07122*/
*                    VUPTR=VUPTR+LENGTH(VOLUNTAB); /*UNIT    @ZA07122*/
         AH    VUPTR,@CH00099                                   02S0171
*                  END;                /*                    @ZA07122*/
         AH    VUCTR,@CH00048                                   02S0172
@DE00164 L     @10,@PC00001+4                                   02S0172
         L     @10,ALCWAPTR(,@10)                               02S0172
         L     @00,VOLUNSZE(,@10)                               02S0172
         SRDA  @00,32                                           02S0172
         D     @00,@CF00099                                     02S0172
         CR    VUCTR,@01                                        02S0172
         BNH   @DL00164                                         02S0172
*                END;                  /*                    @ZA07122*/
*              ELSE                    /*MARK FOR RETRY      @YM08171*/
*                DO;                   /*                    @YM08171*/
         B     @RC00160                                         02S0174
@RF00160 DS    0H                                               02S0175
*                  INDRETRY = ON;      /*                    @YM08171*/
         L     @10,@PC00001+4                                   02S0175
         L     @10,ALCWAPTR(,@10)                               02S0175
         OI    INDRETRY(@10),B'01000000'                        02S0175
*                  SIOTRTRY = ON;      /*                    @YM08171*/
         L     @10,SIOTPTR                                      02S0176
         OI    SIOTRTRY(@10),B'00000001'                        02S0176
*                END;                  /*                    @YM08171*/
*          END;                                                 02S0178
*        ELSE;                         /*VOL IS NOT ELIGIBLE         */
@RF00156 DS    0H                                               02S0180
*      END;                                                     02S0180
*    ELSE;                             /*NOT TAPE UNITS              */
@RF00129 DS    0H                                               02S0182
*  END;                                                         02S0182
@RC00129 DS    0H                                               02S0183
*          IF TYPMATCH = OFF THEN      /*ARE THEY COMPATIBLE ?       */
@RC00123 TM    TYPMATCH,B'00010000'                             01S0183
         BNZ   @RF00183                                         01S0183
*            DO;                       /*NO, INDICATE ERROR          */
*              RTNCODE = ERROR;        /*SEE ERROR RETURN CODE       */
         LA    RTNCODE,4                                        01S0185
*              SIOTRSNC=ERRCD(2);      /*SET SIOT RSNCODE            */
         L     @10,SIOTPTR                                      01S0186
         MVC   SIOTRSNC(2,@10),ERRCD+2                          01S0186
*            END;                                               01S0187
*          ELSE                        /*DEVICE TYPES ARE COMPATIBLE */
*            DO;                                                01S0188
         B     @RC00183                                         01S0188
@RF00183 DS    0H                                               01S0189
*              IF TYPELOKD = ON THEN   /*DEVICE TYPE LOCKED ?        */
         TM    TYPELOKD,B'00100000'                             01S0189
         BNO   @RF00189                                         01S0189
*                DO;                   /*YES, CONTINUE               */
*                  IF (UCB3DACC=ON                              01S0191
*                      & (UCBPRES=ON × UCBRESV=ON))             01S0191
*                      × (UCB3TAPE=ON                           01S0191
*                      & UCBRESV=ON) THEN/*                     01S0191
*                                        VOLUME ON NONREMOVABLE UNIT?*/
         L     @10,UCBPTR                                       01S0191
         TM    UCB3DACC(@10),B'00100000'                        01S0191
         BNO   @GL00016                                         01S0191
         TM    UCBPRES(@10),B'00100100'                         01S0191
         BNZ   @RT00191                                         01S0191
@GL00016 L     @10,UCBPTR                                       01S0191
         TM    UCB3TAPE(@10),B'10000000'                        01S0191
         BNO   @RF00191                                         01S0191
         TM    UCBRESV(@10),B'00100000'                         01S0191
         BNO   @RF00191                                         01S0191
@RT00191 DS    0H                                               01S0192
*                    DO;               /*YES,ALLOCATE THERE OR FAIL  */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - PRRDEVIC                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - ALLOCATE TO NON-REMOVABLE VOLUME              */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE DETERMINES IF THE VOLUME IS MOUNTED ON A UNIT   */
*/*     WHICH IS ELIGIBLE TO THIS REQUEST. IF IT IS, MODULE IEFAB442 */
*/*     IS CALLED TO BREAK ANY UNIT AFFINITIES TO REQUESTS           */
*/*     FOR THIS VOLUME. AFTER THAT, MODULE IEFAB434 IS CALLED TO    */
*/*     ALLOCATE ALL REQUESTS FOR THIS VOLUME TO WHERE IT IS         */
*/*     CURRENTLY MOUNTED.                                           */
*/*     IF THE VOLUME IS MOUNTED ON A UNIT WHICH IS NOT ELIGIBLE TO */
*/*     THIS REQUEST, AN ERROR RETURN CODE IS SET AND NO FURTHER     */
*/*     PROCESSING IS DONE.                                          */
*/*                                                                  */
*/*   OPERATION - (THE OPERATION IS DOCUMENTED BY THE CODE ITSELF)   */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     INVUPTR -PTR TO THE REQUEST BEING VALITIDY-CHECKED           */
*/*      VOLID - REQUESTED VOLUME SERIAL NUMBER                      */
*/*      VOLUNTID - UNIT ID                                          */
*/*     SIOTPTR - PTR TO SIOT TO ALLOCATE                            */
*/*     ALCWAPTR - PTR TO ALLOCATION WORK AREA                       */
*/*     UCBPTR - PTR TO UNIT WHERE THE (NON-REMOVABLE) VOL IS MOUNTED*/
*/*     FNDGRPID - DEVICE GROUP WHERE THE VOLUME IS MOUNTED          */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITIONS - REQUEST ALLOCATED SUCCESSFULLY                    */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     .VOLALOC=1 AND TOTVOLUN (IN ALCWA) DECREMENTED               */
*/*     .(POSSIBLY) SIOTALCD=1 AND TOTREQS (IN ALCWA) DECREMENTED    */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE = 0                                     */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITIONS - VOLUME NOT ELIGIBLE WHERE MOUNTED                 */
*/*                                                                  */
*/*   OUTPUT - SIOT ERROR REASON CODE = 58                           */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE = NON-ZERO                              */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITIONS - ONE OF THE CALLED ROUTINES DETECTED AN ERROR      */
*/*                CONDITION.                                        */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     STEP- OR DD-RELATED ERROR REASON CODE SET BY IEFAB442        */
*/*     OR IEFAB434.                                                 */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE = NON-ZERO                              */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - SERCHEDL                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - DETERMINE IF UCB IS IN THE EDL                */
*/*                                                                  */
*/* FUNCTION - THIS ROUTINE DETERMINES IF A PARTICULAR UCB IS IN     */
*/*            A SIOT'S ELIGIBLE DEVICES LIST (EDL).                 */
*/*                                                                  */
*/*   OPERATION - THE SIOT'S EDL IS SEARCHED                         */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     UCBPTR - PTR TO THE UCB TO BE SEARCHED FOR                   */
*/*     SIOTPTR - PTR TO THE SIOT ASSOCIATED WITH THE VU ENTRY       */
*/*       SIOTEDLP - PTR TO EDL FOR THE SIOT                         */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITIONS - FUNCTION COMPLETED.                               */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     UCBMATSW - 1 = UCB IS IN THE EDL                             */
*/*              - 0 = UCB IS NOT IN THE EDL                         */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/********************************************************************/
*UCBMATSW = OFF;                                                03S0193
         NI    UCBMATSW,B'11110111'                             03S0193
*EDLPTR = EDLFGENP;                    /*POINT TO 1ST GEN IN EDL     */
         L     @10,SIOTPTR                                      03S0194
         L     @10,SIOTEDLP(,@10)                               03S0194
         L     EDLPTR,EDLFGENP(,@10)                            03S0194
*DO WHILE (EDLPTR^=ZERO & UCBMATSW=OFF); /*SCAN UNTIL UCB IS FOUND   */
         B     @DE00195                                         03S0195
@DL00195 DS    0H                                               03S0196
*  EDLGNTP = EDLGRPTR;                 /*POINT TO 1ST GROUP IN GEN   */
         L     EDLGNTP,EDLGRPTR(,EDLPTR)                        03S0196
*  DO WHILE (EDLGNTP^=ZERO & UCBMATSW=OFF);/*SCAN ALL GROUPS         */
         B     @DE00197                                         03S0197
@DL00197 DS    0H                                               03S0198
*    EDLUCBLP = EDLLISTP;              /*POINT TO LIST OF UCBS       */
         L     EDLUCBLP,EDLLISTP(,EDLGNTP)                      03S0198
*    DO DEVCTR=ONE TO EDLUCBNO         /*SCAN ALL UCBS               */
*        WHILE UCBMATSW = OFF;                                  03S0199
         LA    DEVCTR,1                                         03S0199
         B     @DE00199                                         03S0199
@DL00199 TM    UCBMATSW,B'00001000'                             03S0199
         BNZ   @DC00199                                         03S0199
*      IF EDLUCBAD(DEVCTR) = UCBPTR THEN /*UNIT WITH REQ'D VOL MT'D ?*/
         LR    @10,DEVCTR                                       03S0200
         SLA   @10,2                                            03S0200
         ALR   @10,EDLUCBLP                                     03S0200
         AL    @10,@CF01096                                     03S0200
         SLR   @15,@15                                          03S0200
         ICM   @15,3,EDLUCBAD(@10)                              03S0200
         C     @15,UCBPTR                                       03S0200
         BNE   @RF00200                                         03S0200
*        DO;                           /*YES, END SEARCH             */
*          UCBMATSW = ON;                                       03S0202
         OI    UCBMATSW,B'00001000'                             03S0202
*        END;                                                   03S0203
*      ELSE;                           /*NOT UNIT WITH REQ'D VOL MT'D*/
@RF00200 DS    0H                                               03S0205
*    END;                                                       03S0205
         AH    DEVCTR,@CH00048                                  03S0205
@DE00199 C     DEVCTR,EDLUCBNO(,EDLGNTP)                        03S0205
         BNH   @DL00199                                         03S0205
@DC00199 DS    0H                                               03S0206
*    EDLGNTP = EDLNXGRP;               /*POINT TO NEXT GROUP         */
         L     EDLGNTP,EDLNXGRP(,EDLGNTP)                       03S0206
*  END;                                                         03S0207
@DE00197 LTR   EDLGNTP,EDLGNTP                                  03S0207
         BZ    @DC00197                                         03S0207
         TM    UCBMATSW,B'00001000'                             03S0207
         BZ    @DL00197                                         03S0207
@DC00197 DS    0H                                               03S0208
*  EDLPTR = EDLNXTNT;                  /*POINT TO NEXT GENERIC       */
         L     EDLPTR,EDLNXTNT(,EDLPTR)                         03S0208
*END;                                                           03S0209
@DE00195 LTR   EDLPTR,EDLPTR                                    03S0209
         BZ    @DC00195                                         03S0209
         TM    UCBMATSW,B'00001000'                             03S0209
         BZ    @DL00195                                         03S0209
@DC00195 DS    0H                                               03S0210
*    IF UCBMATSW = ON & FAILFIXD = OFF THEN /*OK TO ALLOCATE ?       */
         TM    UCBMATSW,B'00001000'                             02S0210
         BNO   @RF00210                                         02S0210
         L     @10,@PC00001                                     02S0210
         TM    FAILFIXD(@10),B'10000000'                        02S0210
         BNZ   @RF00210                                         02S0210
*      DO;                             /*YES,BREAK AFFINITY,THEN ALOC*/
*        CALL IEFAB442 (FUNC442,ALCWAPTR,INVUPTR->VOLID,        02S0212
*                       INVUPTR->VOLUNTID); /*AFFINITY REMOVER       */
         LA    @10,@CB00137                                     02S0212
         ST    @10,@AL00001                                     02S0212
         L     @10,@PC00001+4                                   02S0212
         ST    @10,@AL00001+4                                   02S0212
         L     @10,@PC00001+8                                   02S0212
         L     @10,INVUPTR(,@10)                                02S0212
         ST    @10,@AL00001+8                                   02S0212
         LA    @10,VOLUNTID(,@10)                               02S0212
         ST    @10,@AL00001+12                                  02S0212
         L     @15,@CV00164                                     02S0212
         LA    @01,@AL00001                                     02S0212
         BALR  @14,@15                                          02S0212
*        RTNCODE = REG15;              /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    02S0213
*        IF RTNCODE = SUCCESS THEN     /*ANY ERRORS ?                */
         SLR   @10,@10                                          02S0214
         CR    RTNCODE,@10                                      02S0214
         BNE   @RF00214                                         02S0214
*          DO;                         /*NO ERROR, ALLOCATE THE REQ  */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - SETUPARU                                          */
*/*                                                                  */
*/* DESCRIPTIVE - SET UP PARAMETERS FOR IEFAB434                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     THIS ROUTINE SETS UP THE FUNCTION MAP FOR THE ALLOCATE-      */
*/*     REQUEST-TO-UNIT ROUTINE (IEFAB434). IN ADDITION THIS ROUTINE */
*/*     DETERMINES THE RELATIVE POSITION OF THE TIOT DEVICE ENTRY TO */
*/*     BE ALLOCATED AND IF NO TIOT ENTRY EXISTS FOR THE SIOT, THE   */
*/*     TOTAL NUMBER OF DEVICE ENTRIES NEEDED (SIOTOTUN)             */
*/*                                                                  */
*/*   OPERATION - THE RELATIVE DEVICE ENTRY IS DETERMINED BY         */
*/*               SCANNING THE VU ENTRIES FOR THIS SIOT UNTIL THE    */
*/*               ENTRY TO BE ALLOCATED IS REACHED. ALL DEVICE-REQ'D */
*/*               ENTRIES UP TO THAT POINT ARE COUNTED.              */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     UCBPTR - PTR TO THE UNIT TO BE ALLOCATED                     */
*/*     SIOTPTR - PTR TO THE SIOT BEING ALLOCATED                    */
*/*       SIOTETIO - PTR TO ETIOT OR 0                               */
*/*       SIOTOTUN - NUMBER OF DEVICES NEEDED BY THE SIOT            */
*/*       SVOLUNAD - PTR TO FIRST VOLUNIT ENTRY FOR THIS SIOT        */
*/*     INVUPTR - PTR TO THE VOLUNIT ENTRY TO BE ALLOCATED           */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - FUNCTION COMPLETED                                 */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     FUNC434 - FUNCTION MAP FOR IEFAB434, WHICH CONTAINS          */
*/*       BIT0  - 1 = UPDATE TIOT (IF TIOT ALREADY EXISTED)          */
*/*             - 0 = CREATE TIOT ENTRY                              */
*/*       BIT1  - 0 = (NOT USED BY IEFAB434)                         */
*/*       BIT2  - 1 = PROCESS AFFINITIES                             */
*/*       BIT3  - 0 = DON'T VALIDITY CHECK                           */
*/*       BIT4  - 0 = DON'T UPDATE USE ATTRIBUTE                     */
*/*       BIT5  - 1 = UPDATE ALGORITHM TABLES                        */
*/*       BIT6  - 0 = NO VOLUME SWITCHING (AND NOT NEEDED)           */
*/*    DEVSSIOT = NUMBER OF DEVICE ENTRIES NEEDED IN THE TIOT FOR    */
*/*               THE SIOT                                           */
*/*    DEVSENT = RELATIVE POSITION OF THE TIOT DEVICE ENTRY TO BE    */
*/*              CREATED                                             */
*/*                                                                  */
*/********************************************************************/
*FUNC434 = FUNC434 && FUNC434;         /*ZERO FUNC MAP FOR IEFAB434  */
         XC    FUNC434(4),FUNC434                               03S0216
*AFFFLAG = ON;                         /*INDICATE PROCESS-AFFINITIES */
*UPALGTB = ON;                         /*INDICATE UPDATE-ALG-TABLES  */
         OI    AFFFLAG,B'00100100'                              03S0218
*VOLID434 = UCBVOLI;                   /*COPY VOLUME SERIAL          */
         L     @01,UCBPTR                                       03S0219
         MVC   VOLID434(6),UCBVOLI(@01)                         03S0219
*IF SIOTETIO = ZERO THEN               /*DOES A TIOT ALREADY EXIST ? */
         L     @15,SIOTPTR                                      03S0220
         C     @10,SIOTETIO(,@15)                               03S0220
         BNE   @RF00220                                         03S0220
*  DEVSSIOT = SIOTOTUN;                /*NO,COPY NUMBER OF TIOT 03S0221
*                                        DEVICE ENTRIES NEEDED       */
         SLR   @10,@10                                          03S0221
         IC    @10,SIOTOTUN(,@15)                               03S0221
         STH   @10,DEVSSIOT                                     03S0221
*ELSE                                  /*TIOT ALREADY EXISTS         */
*  UPDATIOT = ON;                      /*INDICATE UPDATE-TIOT FUNC   */
         B     @RC00220                                         03S0222
@RF00220 OI    UPDATIOT,B'10000000'                             03S0222
*DEVSENT = ONE;                        /*INITIALIZE TIOT DEVICE ENTRY*/
@RC00220 MVC   DEVSENT(2),@CH00048                              03S0223
*VUPTR = SVOLUNAD;                     /*POINT TO FIRST VU FOR SIOT  */
         L     @10,SIOTPTR                                      03S0224
         L     VUPTR,SVOLUNAD(,@10)                             03S0224
*DO WHILE VUPTR < INVUPTR;             /*SCAN UP UNTIL THIS VU ENTRY */
         B     @DE00225                                         03S0225
@DL00225 DS    0H                                               03S0226
*  IF VDEVREQD = ON THEN               /*DOES VU ENTRY REQUIRE A DEV */
         TM    VDEVREQD(VUPTR),B'00100000'                      03S0226
         BNO   @RF00226                                         03S0226
*    DEVSENT = DEVSENT + ONE;          /*YES, INCREMENT COUNT        */
         LH    @10,DEVSENT                                      03S0227
         LA    @10,1(,@10)                                      03S0227
         STH   @10,DEVSENT                                      03S0227
*  ELSE;                               /*VU DOES NOT REQUIRE A DEVICE*/
@RF00226 DS    0H                                               03S0229
*  VUPTR = VUPTR + LENGTH(VOLUNTAB);   /*POINT TO NEXT VOLUNIT ENTRY */
         AL    VUPTR,@CF00099                                   03S0229
*END;                                                           03S0230
@DE00225 L     @10,@PC00001+8                                   03S0230
         C     VUPTR,INVUPTR(,@10)                              03S0230
         BL    @DL00225                                         03S0230
*            CALL IEFAB434 (SIOTPTR,INVUPTR,UCBPTR,FUNC434,     02S0231
*                 ETIODATA,ALCWAPTR,FNDGRPID,ADDR(UCBPARMS));   02S0231
         LA    @02,SIOTPTR                                      02S0231
         ST    @02,@AL00001                                     02S0231
         ST    @10,@AL00001+4                                   02S0231
         LA    @10,UCBPTR                                       02S0231
         ST    @10,@AL00001+8                                   02S0231
         LA    @10,FUNC434                                      02S0231
         ST    @10,@AL00001+12                                  02S0231
         LA    @10,ETIODATA                                     02S0231
         ST    @10,@AL00001+16                                  02S0231
         L     @10,@PC00001+4                                   02S0231
         ST    @10,@AL00001+20                                  02S0231
         LA    @10,FNDGRPID                                     02S0231
         ST    @10,@AL00001+24                                  02S0231
         LA    @10,UCBPARMS                                     02S0231
         ST    @10,@TF00001                                     02S0231
         LA    @10,@TF00001                                     02S0231
         ST    @10,@AL00001+28                                  02S0231
         L     @15,@CV00163                                     02S0231
         LA    @01,@AL00001                                     02S0231
         BALR  @14,@15                                          02S0231
*            RTNCODE = REG15;          /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    02S0232
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - DOARURTN                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - PROCESS RETURN FROM IEFAB434                  */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     IF IEFAB434 SUCCESSFULLY ALLOCATED THE REQUEST, THIS         */
*/*     ROUTINE MARKS THE VOLUNIT ENTRY ALLOCATED. IF THIS WAS       */
*/*     THE ONLY VOLUNIT ENTRY FOR THE SIOT WHICH WAS LEFT TO BE     */
*/*     ALLOCATED THEN THE SIOT IS MARKED ALLOCATED AND THE          */
*/*     COUNT OF THE NUMBER OF STILL-UNALLOCATED SIOTS (TOTREQS)  IS */
*/*     DECREMENTED.                                                 */
*/*                                                                  */
*/*   OPERATION - ALL THE VOLUNIT ENTRIES FOR THE SIOT ARE SCANNED   */
*/*               TO DETERMINE IF THE SIOT IS NOW FULLY ALLOCATED.   */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*      RTNCODE - RETURN CODE FROM IEFAB434                         */
*/*      INVUPTR - PTR TO THE VOLUNIT ENTRY TO BE ALLOCATED          */
*/*      SIOTPTR - PTR TO THE SIOT BEING PROCESSED                   */
*/*      ALCWAPTR - PTR TO THE ALLOCATION WORK AREA , WHICH CONTAINS */
*/*        TOTVOLUN - NUMBER OF VOLUNIT ENTRIES STILL UNALLOCATED    */
*/*        TOTREQS - NUMBER OF SIOTS STILL UNALLOCATED               */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITIONS - THE REQUEST WAS ALLOCATED SUCCESSFULLY            */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     .VOLALOC=1 AND TOTVOLUN DECREMENTED                          */
*/*     .(POSSIBLY) SIOTALCD=1 AND TOTREQS DECREMENTED               */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE = 0                                     */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITIONS - ERROR DETECTED                                    */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*       STEP- OR DD-RELATED ERROR REASON CODE SET BY IEFAB434      */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE = NON-ZERO                              */
*/*                                                                  */
*/********************************************************************/
*IF RTNCODE = SUCCESS THEN             /*ANY ERROR FROM IEFAB434     */
         LTR   RTNCODE,RTNCODE                                  03S0233
         BNZ   @RF00233                                         03S0233
*  DO;                                 /*NO ERROR, PROCESS           */
*    INVUPTR->VOLALOC = ON;            /*MARK VOLUNIT ENTRY ALLOCATED*/
         L     @10,@PC00001+8                                   03S0235
         L     @10,INVUPTR(,@10)                                03S0235
         OI    VOLALOC(@10),B'10000000'                         03S0235
*    TOTVOLUN = TOTVOLUN - ONE;        /*DECREMENT COUNT OF VU'S     */
         L     @10,@PC00001+4                                   03S0236
         L     @10,ALCWAPTR(,@10)                               03S0236
         L     @15,TOTVOLUN(,@10)                               03S0236
         BCTR  @15,0                                            03S0236
         ST    @15,TOTVOLUN(,@10)                               03S0236
*    ALLALOC = ON;                     /*ASSUME SIOT IS FULLY ALLOC'D*/
         OI    ALLALOC,B'10000000'                              03S0237
*    VUPTR = SVOLUNAD;                 /*POINT TO SIOT'S FIRST VU */
         L     @10,SIOTPTR                                      03S0238
         L     VUPTR,SVOLUNAD(,@10)                             03S0238
*    DO VUCTR = ONE TO SVOLUNNO        /*SCAN ALL VOLUNIT ENTRIES    */
*        WHILE (ALLALOC = ON);                                  03S0239
         LA    VUCTR,1                                          03S0239
         B     @DE00239                                         03S0239
@DL00239 TM    ALLALOC,B'10000000'                              03S0239
         BNO   @DC00239                                         03S0239
*      IF (VDEVREQD=ON & VOLALOC=OFF)  /*HAS VU ENTRY BEEN SATISFIED?*/
*          × VUDNALOC = ON THEN                                 03S0240
         TM    VDEVREQD(VUPTR),B'00100000'                      03S0240
         BNO   @GL00022                                         03S0240
         TM    VOLALOC(VUPTR),B'10000000'                       03S0240
         BZ    @RT00240                                         03S0240
@GL00022 TM    VUDNALOC(VUPTR),B'00001000'                      03S0240
         BNO   @RF00240                                         03S0240
@RT00240 DS    0H                                               03S0241
*        ALLALOC = OFF;                /*INDICATE SIOT NOT ALL ALOC'D*/
         NI    ALLALOC,B'01111111'                              03S0241
*      ELSE;                           /*SIOT STILL ALL ALLOCATED    */
@RF00240 DS    0H                                               03S0243
*      VUPTR = VUPTR + LENGTH(VOLUNTAB); /*POINT TO NEXT VOLUNIT ENT */
         AL    VUPTR,@CF00099                                   03S0243
*    END;                                                       03S0244
         AH    VUCTR,@CH00048                                   03S0244
@DE00239 L     @10,SIOTPTR                                      03S0244
         CH    VUCTR,SVOLUNNO(,@10)                             03S0244
         BNH   @DL00239                                         03S0244
@DC00239 DS    0H                                               03S0245
*    IF ALLALOC=ON                     /*IS SIOT FULLY ALLOCATED NOW?*/
*        & SIOTALCD=OFF THEN                                    03S0245
         TM    ALLALOC,B'10000000'                              03S0245
         BNO   @RF00245                                         03S0245
         L     @10,SIOTPTR                                      03S0245
         TM    SIOTALCD(@10),B'00000010'                        03S0245
         BNZ   @RF00245                                         03S0245
*      DO;                             /*YES,MARK ALLOCATED          */
*        SIOTALCD = ON;                                         03S0247
         OI    SIOTALCD(@10),B'00000010'                        03S0247
*        TOTREQS = TOTREQS - ONE;      /*DECREMENT REQS TO ALLOCATE  */
         L     @10,@PC00001+4                                   03S0248
         L     @10,ALCWAPTR(,@10)                               03S0248
         L     @02,TOTREQS(,@10)                                03S0248
         BCTR  @02,0                                            03S0248
         ST    @02,TOTREQS(,@10)                                03S0248
*      END;                                                     03S0249
*    ELSE;                             /*SIOT NOT JUST FULLY ALLOC'D */
@RF00245 DS    0H                                               03S0251
*  END;                                                         03S0251
*ELSE                                  /*ERROR FROM IEFAB434         */
*  RTNCODE = ERROR;                                             03S0252
         B     @RC00233                                         03S0252
@RF00233 LA    RTNCODE,4                                        03S0252
*          END;                                                 02S0253
*        ELSE;                         /*ERROR FROM IEFAB442         */
@RF00214 DS    0H                                               02S0255
*      END;                                                     02S0255
*    ELSE                              /*UCB NOT IN THE EDL          */
*      DO;                                                      02S0256
         B     @RC00210                                         02S0256
@RF00210 DS    0H                                               02S0257
*        RTNCODE = ERROR;              /*SET ERROR RETURN CODE       */
         LA    RTNCODE,4                                        02S0257
*        SIOTRSNC=ERRCD(3);            /*SET SIOT REASON CODE        */
         L     @10,SIOTPTR                                      02S0258
         MVC   SIOTRSNC(2,@10),ERRCD+4                          02S0258
*      END;                                                     02S0259
*                    END;                                       01S0260
*                  ELSE                /*VOLUME NOT ON FIXED DEVICE  */
*                    DO;                                        01S0261
         B     @RC00191                                         01S0261
@RF00191 DS    0H                                               01S0262
*                      GROUPNO = FNDGRPID; /*COPY GROUP ID OF VOLUME */
         MVC   GROUPNO(4),FNDGRPID                              01S0262
*                      CALL TESTBIT;   /*TEST IF GROUP LOCKED        */
         BAL   @14,TESTBIT                                      01S0263
*                      IF BITRTN = ON THEN /*IS THE GROUP LOCKED ?   */
         TM    BITRTN,B'01000000'                               01S0264
         BNO   @RF00264                                         01S0264
*                        DO;           /*YES,VOLUME SWITCHING IS OK  */
*                          IF UCBALOC = ON THEN /*IS THE UCB ALLOC'D? *
         L     @10,UCBPTR                                       01S0266
         TM    UCBALOC(@10),B'00001000'                         01S0266
         BNO   @RF00266                                         01S0266
*                            DO;       /*YES,INDICATE RECOVERY NEEDED*/
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - MARKWAIT                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - MARK VU ENTRY - WAIT FOR ALLOCATED VOLUME     */
*/*                                                                  */
*/* FUNCTION - IF THIS ALLOCATION CAN'T WAIT, IT IS AN ERROR. OTHER- */
*/*     WISE, THIS RTN MARKS THE TABLE ENTRIES FOR EACH REQUEST      */
*/*     FOR THE INPUT VOLUME SERIAL NUMBER -- SO THAT ALLOCATION     */
*/*     KNOWS THESE REQUESTS MUST WAIT FOR THE REQUESTED VOLUME      */
*/*     TO BE UNALLOCATED FROM WHERE IT IS CURRENTLY LOCATED.        */
*/*                                                                  */
*/*   OPERATION - THE WHOLE VOLUNIT TABLE IS SCANNED.                */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     INVUPTR - PTR TO THE VOLUNIT ENTRY BEING VALIDITY-CHECKED    */
*/*       VOLID - VOLUME SERIAL NUMBER REQUESTED BY THIS VU ENTRY    */
*/*     VOLUNSZE - SIZE OF THE VOLUNIT ENTRY                         */
*/*     VOLUNPTR - PTR TO THE VOLUNIT TABLE                          */
*/*       VOLALGTP - PTR IN VU ENTRY TO THE ASSOCIATED ALG REQ ENTRY */
*/*     UCBPTR - PTR TO UNIT WHERE THE REQUESTED VOLUME IS MOUNTED   */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITIONS - ALLOCATION ALLOWED TO WAIT. TABLES MARKED.        */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*    .VUVLUNIQ = 1 FOR THE INPUT VOLUNIT ENTRY                     */
*/*    .WAITIGEN = 1                                                 */
*/*    .THE FOLLOWING ARE SET FOR EACH REQUEST FOR THE INPUT         */
*/*     VOLUME: VUDNALOC=1,VUVINELG=1, AND CVRWUCBP=PTR TO UNIT      */
*/*             CONTAINING THE REQUESTED VOLUME                      */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE)                               */
*/*                                                                  */
*/*   CONDITIONS - ALLOCATION NOT ALLOWED TO WAIT.                   */
*/*                                                                  */
*/*   OUTPUT - SIOT ERROR REASON CODE = 59                           */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE = 4                                     */
*/*                                                                  */
*/********************************************************************/
*IF UWAITSW = ON THEN                  /*OK TO WAIT ?                */
         L     @10,@PC00001+4                                   02S0268
         L     @10,ALCWAPTR(,@10)                               02S0268
         L     @02,FMAPPTR(,@10)                                02S0268
         TM    UWAITSW(@02),B'00100000'                         02S0268
         BNO   @RF00268                                         02S0268
*  DO;                                                          02S0269
*    INVUPTR->VUVLUNIQ = ON;           /*MARK ONE AS UNIQUE - REQ    */
         L     @15,@PC00001+8                                   02S0270
         L     @01,INVUPTR(,@15)                                02S0270
         OI    VUVLUNIQ(@01),B'00000010'                        02S0270
*    WAITIGEN = ON;                    /*INDICATE SOME UCBS WAITED ON*/
         OI    WAITIGEN(@10),B'01000000'                        02S0271
*    VUPTR = VOLUNPTR;                 /*POINT TO THE FIRST VU ENTRY */
         L     VUPTR,VOLUNPTR(,@10)                             02S0272
*    DO VUCTR = ONE TO VOLUNSZE/LENGTH(VOLUNTAB);/*SCAN VOLUNIT TABLE*/
         LA    VUCTR,1                                          02S0273
         B     @DE00273                                         02S0273
@DL00273 DS    0H                                               02S0274
*      IF VOLID = INVUPTR->VOLID THEN  /*DOES REQ NEED INPUT VOLUME? */
         L     @10,@PC00001+8                                   02S0274
         L     @10,INVUPTR(,@10)                                02S0274
         CLC   VOLID(6,VUPTR),VOLID(@10)                        02S0274
         BNE   @RF00274                                         02S0274
*        DO;                           /*YES,MARK IT FOR RECOVERY    */
*          VUDNALOC = ON;                                       02S0276
         OI    VUDNALOC(VUPTR),B'00001000'                      02S0276
*          VOLALGTP->CVRWUCBP=UCBPTR;  /*COPY PTR TO VOLUME LOCATION */
         L     @10,VOLALGTP(,VUPTR)                             02S0277
         MVC   CVRWUCBP(2,@10),UCBPTR+2                         02S0277
*        END;                                                   02S0278
*      ELSE;                           /*REQ DOESN'T NEED THIS VOLUME*/
@RF00274 DS    0H                                               02S0280
*      VUPTR = VUPTR + LENGTH(VOLUNTAB); /*POINT TO THE NEXT VU ENTRY*/
         AL    VUPTR,@CF00099                                   02S0280
*    END;                                                       02S0281
         AH    VUCTR,@CH00048                                   02S0281
@DE00273 L     @10,@PC00001+4                                   02S0281
         L     @10,ALCWAPTR(,@10)                               02S0281
         L     @00,VOLUNSZE(,@10)                               02S0281
         SRDA  @00,32                                           02S0281
         D     @00,@CF00099                                     02S0281
         CR    VUCTR,@01                                        02S0281
         BNH   @DL00273                                         02S0281
*  END;                                                         02S0282
*ELSE                                  /*CAN'T WAIT FOR VOL TO  02S0283
*                                        UNALLOCATE                  */
*  DO;                                                          02S0283
         B     @RC00268                                         02S0283
@RF00268 DS    0H                                               02S0284
*    RTNCODE = ERROR;                  /*SET ERROR RETURN CODE       */
         LA    RTNCODE,4                                        02S0284
*    SIOTRSNC = ERRCD(4);              /*SET SIOT REASON CODE        */
         L     @10,SIOTPTR                                      02S0285
         MVC   SIOTRSNC(2,@10),ERRCD+6                          02S0285
*  END;                                                         02S0286
*                            END;                               01S0287
*                          ELSE        /*UCB IS UNALLOC'D - UNLOAD IT*/
*                            DO;                                01S0288
         B     @RC00266                                         01S0288
@RF00266 DS    0H                                               01S0289
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - UNLDVOL                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - UNLOAD A VOLUME NEEDED ELSEWHERE              */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS ROUTINE SETS UP THE INTERFACE FOR AND INVOKES THE         */
*/*   VOLUME MOUNT + VERIFY (VM+V) UNLOAD FUNCTION TO UNLOAD A       */
*/*   VOLUME.                                                        */
*/*                                                                  */
*/*   OPERATION - (THE OPERATION IS DOCUMENTED BY THE CODE ITSELF)   */
*/*                                                                  */
*/* ENTRY - (INLINE SUBROUTINE)                                      */
*/*                                                                  */
*/*   PURPOSE - (SEE FUNCTION)                                       */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*      UCBPTR - PTR TO UNIT TO UNLOAD                              */
*/*      ALCWAPTR - PTR TO THE ALLOCATION WORK AREA                  */
*/*        ALCJOBN - JOB NAME                                        */
*/*        ALCSTEPN - STEP NAME                                      */
*/*        ALCWASID - ASID                                           */
*/*        CANCELP - PTR TO CANCEL ECB                               */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - VOLUME UNLOADED                                    */
*/*                                                                  */
*/*   OUTPUT - (NONE)                                                */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE = 0                                     */
*/*                                                                  */
*/* EXIT - EXIT - (INLINE SUBROUTINE)                                */
*/*                                                                  */
*/*   CONDITION - GETMAIN ERROR BY VM+V                              */
*/*                                                                  */
*/*   OUTPUT - STEP REASON CODE, REASONCD, SET TO 2                  */
*/*                                                                  */
*/*   RETURN CODES - RTNCODE = 4                                     */
*/*                                                                  */
*/********************************************************************/
*VMVREQBP = ADDR(VMVRBCOR);            /*POINT TO VM+V REQUEST BLOCK */
         LA    @10,VMVRBCOR                                     02S0289
         ST    @10,VMVREQBP                                     02S0289
*VMVRQBLK = VMVRQBLK && VMVRQBLK;      /*ZERO THE REQUEST BLOCK      */
         XC    VMVRQBLK(52,@10),VMVRQBLK(@10)                   02S0290
*VMVUNLOD = ON;                        /*INDICATE UNLOAD FUNCTION    */
*VMVUCB = ON;                          /*UNLOAD VOLSER IS IN THE UCB */
         OI    VMVUNLOD(@10),B'11000000'                        02S0292
*VMVJBNMP = ADDR(ALCJOBN);             /*POINT TO JOB NAME           */
         L     @02,@PC00001+4                                   02S0293
         L     @02,ALCWAPTR(,@02)                               02S0293
         L     @15,TIOTHDRP(,@02)                               02S0293
         ST    @15,VMVJBNMP(,@10)                               02S0293
*VMVJSNMP = ADDR(ALCSTEPN);            /*POINT TO STEP NAME          */
         LA    @15,ALCSTEPN(,@15)                               02S0294
         ST    @15,VMVJSNMP(,@10)                               02S0294
*VMVUCBP = UCBPTR;                     /*POINT TO UCB TO BE UNLOADED */
         MVC   VMVUCBP(3,@10),UCBPTR+1                          02S0295
*CALL IEFAB49C (VMVREQBP,ALCWASID,CANCLECB); /*CALL VM+V             */
         LA    @10,VMVREQBP                                     02S0296
         ST    @10,@AL00001                                     02S0296
         LA    @10,ALCWASID(,@02)                               02S0296
         ST    @10,@AL00001+4                                   02S0296
         L     @10,CANCELP(,@02)                                02S0296
         ST    @10,@AL00001+8                                   02S0296
         L     @15,@CV00165                                     02S0296
         LA    @01,@AL00001                                     02S0296
         BALR  @14,@15                                          02S0296
*RTNCODE = REG15;                      /*SAVE THE RETURN CODE        */
         LR    RTNCODE,REG15                                    02S0297
*IF RTNCODE ^= SUCCESS THEN            /*ANY ERRORS ?                */
         LTR   RTNCODE,RTNCODE                                  02S0298
         BZ    @RF00298                                         02S0298
*  REASONCD = GETMNERR;                /*YES,INDICATE A GETMAIN ERROR*/
         L     @10,@PC00001+4                                   02S0299
         L     @10,ALCWAPTR(,@10)                               02S0299
         L     @10,FAILRSCP(,@10)                               02S0299
         MVC   REASONCD(2,@10),@CH00112                         02S0299
*ELSE;                                 /*NO ERROR                    */
@RF00298 DS    0H                                               02S0301
*                            END;                               01S0301
*                        END;                                   01S0302
*                      ELSE            /*VOLUME SWITCH CAN'T BE DONE */
*                        DO;                                    01S0303
         B     @RC00264                                         01S0303
@RF00264 DS    0H                                               01S0304
*                          INDRETRY = ON;  /*INDICATE RETRY NEEDED   */
         L     @10,@PC00001+4                                   01S0304
         L     @10,ALCWAPTR(,@10)                               01S0304
         OI    INDRETRY(@10),B'01000000'                        01S0304
*                          SIOTRTRY = ON;                       01S0305
         L     @10,SIOTPTR                                      01S0305
         OI    SIOTRTRY(@10),B'00000001'                        01S0305
*                        END;                                   01S0306
*                    END;                                       01S0307
*                END;                                           01S0308
*              ELSE;                   /*TAPE DEVICE TYPE NOT LOCKED */
@RF00189 DS    0H                                               01S0310
*            END;                                               01S0310
@RC00189 DS    0H                                               01S0311
*        END;                                                   01S0311
@RC00183 DS    0H                                               01S0312
*      IF RTNCODE ^= SUCCESS           /*ERROR ON NOT-DEV-REQ'D REQ? */
*          & SIOTRSNC^=ZERO                                     01S0312
*          &INVUPTR->VDEVREQD = OFF THEN                        01S0312
@RC00097 DS    0H                                               01S0312
@RC00092 SLR   @10,@10                                          01S0312
         CR    RTNCODE,@10                                      01S0312
         BE    @RF00312                                         01S0312
         L     @02,SIOTPTR                                      01S0312
         CH    @10,SIOTRSNC(,@02)                               01S0312
         BE    @RF00312                                         01S0312
         L     @10,@PC00001+8                                   01S0312
         L     @10,INVUPTR(,@10)                                01S0312
         TM    VDEVREQD(@10),B'00100000'                        01S0312
         BNZ   @RF00312                                         01S0312
*        NODEVERR = ON;                /*YES,INDICATE IN ALCWA       */
         L     @10,@PC00001+4                                   01S0313
         L     @10,ALCWAPTR(,@10)                               01S0313
         OI    NODEVERR(@10),B'00001000'                        01S0313
*      ELSE;                           /*NO ERROR OR DEVICE-REQ'D    */
@RF00312 DS    0H                                               01S0315
*  END;                                                         01S0315
*ELSE;                                 /*VOLUME IS NOT MOUNTED       */
@RF00090 DS    0H                                               01S0317
*RETURN CODE(RTNCODE);                 /*RETURN TO CALLER            */
         IC    @02,@OLDKEY                                      01S0317
         L     @13,4(,@13)                                      01S0317
         L     @00,@SIZDATD                                     01S0317
         LR    @01,@11                                          01S0317
         FSPACE   R,LV=(0),A=(1)
         MODESET KEYADDR=(2)
         LR    @15,@03                                          01S0317
         L     @14,12(,@13)                                     01S0317
         LM    @00,@12,20(@13)                                  01S0317
         BR    @14                                              01S0317
*TESTBIT: PROC;                                                 02S0318
TESTBIT  STM   @14,@12,@SA00002                                 02S0318
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - TESTBIT                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - TEST BIT IN GROUP MASK                        */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS SUBROUTINE DETERMINES IF A PARTICULAR BIT IN A         */
*/*      GROUP MASK IS ON OR OFF. THE GROUP MASK IS A VARIABLE       */
*/*      LENGTH BIT MASK POINTED TO BY MASKPTR . THE ONE-ORIGIN      */
*/*      INDEX OF THE BIT TO BE TESTED IS CONTAINED IN FIELD         */
*/*      GROUPNO.                                                    */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*      ONE IS SUBTRACTED FROM THE GROUPNO TO PRODUCE A ZERO-ORIGIN */
*/*      INDEX. THE INDEX IS THEN DIVIDED BY EIGHT TO DETERMINE THE  */
*/*      BYTE (AND REMAINDER)  OF THE BIT BEING TESTED (IN A SRDL    */
*/*      INSTRUCTION, THE ODD REGISTER GETS THE BITS SHIFTED OUT OF  */
*/*      THE EVEN REGISTER.). THE REMAINDER IS ALIGNED IN A REGISTER */
*/*      AND IS USED TO INDICATE THE BIT POSITION IN THE BYTE. THIS  */
*/*      BIT POSITION IS USED IN A TEST-UNDER-MASK INSTRUCTION VIA   */
*/*      EXECUTE.                                                    */
*/*                                                                  */
*/*      EXAMPLE - IF GROUPNO = 10, THIS OPERATION WILL DETERMINE    */
*/*                THE BIT IS 1 BYTE AFTER THE BEGINNING OF THE      */
*/*                GROUP MASK AND IS THE SECOND BIT POSITION.        */
*/*                                                                  */
*/* ENTRY - THIS CODE IS AN INLINE SUBROUTINE WHICH IS ENTERED       */
*/*         AT THE TOP.                                              */
*/*                                                                  */
*/*   PURPOSE  -  TO DETERMINE IF A PARTICULAR BIT IN A GROUP        */
*/*               MASK IS ON OR OFF.                                 */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*       MASKPTR - PTR TO GROUP MASK                                */
*/*       GROUPNO - 1-ORIGIN INDEX INTO MASK OF THE BIT TO BE TESTED */
*/*       BITRTN - BIT FOR RESULTS OF TEST TO BE RETURNED IN         */
*/*                                                                  */
*/* EXIT - NORMAL - THIS CODE IS AN INLINE SUBROUTINE WHICH          */
*/*                 EXITS FROM THE BOTTOM.                           */
*/*                                                                  */
*/*   CONDITION - BIT TESTED AND RESULTS INDICATED.                  */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*       BITRTN - SET TO 1 IF BIT WAS ON                            */
*/*              - SET TO 0 IF BIT WAS OFF                           */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/********************************************************************/
*BITRTN = OFFVALUE;                    /*ASSUME BIT IS OFF           */
         NI    BITRTN,B'10111111'                               02S0319
*RFY (EVENREG,ODDREG,MASKREG) RSTD;    /*RESTRICT USE OF REGS 3,4+5  */
*GEN REFS(EVENREG,GROUPNO,MASKPTR,ODDREG,MASKREG,TMINST)        02S0321
*    FLOWS(BITOFF);                                             02S0321
        L     EVENREG,GROUPNO         PUT BIT INDEX INTO REG
        BCTR  EVENREG,0               DECREMENT INDEX FOR ZERO ORIGIN
        SRDL  EVENREG,3               DIVIDE INDEX BY 8.SAVE REMAINDER
        A     EVENREG,MASKPTR         POINT TO CORRECT BYTE
        SRL   ODDREG,29               ALIGN REMAINDER IN REG
        LA    MASKREG,X'80'           INSERT 0-BIT MASK
        SRL   MASKREG,0(ODDREG)       POSITION MASK BIT
        EX    MASKREG,TMINST          TEST IF BIT IS ON
        BNO   BITOFF                  BRANCH IF BIT NOT ON
*RFY (EVENREG,ODDREG,MASKREG) UNRSTD;  /*UNRESTRICT REGS 3,4, AND 5  */
*BITRTN = ONVALUE;                     /*INDICATE BIT WAS ON         */
         OI    BITRTN,B'01000000'                               02S0323
*BITOFF:;                                                       02S0324
*RETURN;                                                        02S0325
@EL00002 DS    0H                                               02S0325
@EF00002 DS    0H                                               02S0325
@ER00002 LM    @14,@12,@SA00002                                 02S0325
         BR    @14                                              02S0325
*END TESTBIT;                                                   02S0326
         B     @EL00002                                         02S0326
*END IEFAB441                                                   01S0327
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (A441SPEC)                                        *
*/*%INCLUDE SYSLIB  (A441DATA)                                        *
*/*%INCLUDE SYSLIB  (TBITDATA)                                        *
*/*%INCLUDE SYSLIB  (IEFZB421)                                        *
*/*%INCLUDE SYSLIB  (IEFZB422)                                        *
*/*%INCLUDE SYSLIB  (IEFZB423)                                        *
*/*%INCLUDE SYSLIB  (IEFZB425)                                        *
*/*%INCLUDE SYSLIB  (IEFZB426)                                        *
*/*%INCLUDE SYSLIB  (IEFZB427)                                        *
*/*%INCLUDE SYSLIB  (IEFZB428)                                        *
*/*%INCLUDE SYSLIB  (IEFZB431)                                        *
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                        *
*/*%INCLUDE SYSLIB  (IEFASIOT)                                        *
*/*%INCLUDE SYSLIB  (LOCATVOL)                                        *
*/*%INCLUDE SYSLIB  (LOCVSPEC)                                        *
*/*%INCLUDE SYSLIB  (CHEKTYPE)                                        *
*/*%INCLUDE SYSLIB  (CHEKSPEC)                                        *
*/*%INCLUDE SYSLIB  (TAPECHK )                                        *
*/*%INCLUDE SYSLIB  (TAPESPC )                                        *
*/*%INCLUDE SYSLIB  (PRRDEVIC)                                        *
*/*%INCLUDE SYSLIB  (FIXDSPEC)                                        *
*/*%INCLUDE SYSLIB  (SERCHEDL)                                        *
*/*%INCLUDE SYSLIB  (SEDLSPEC)                                        *
*/*%INCLUDE SYSLIB  (SETUPARU)                                        *
*/*%INCLUDE SYSLIB  (SARUSPEC)                                        *
*/*%INCLUDE SYSLIB  (DOARURTN)                                        *
*/*%INCLUDE SYSLIB  (RARUSPEC)                                        *
*/*%INCLUDE SYSLIB  (MARKWAIT)                                        *
*/*%INCLUDE SYSLIB  (WAITSPEC)                                        *
*/*%INCLUDE SYSLIB  (UNLDVOL )                                        *
*/*%INCLUDE SYSLIB  (UNLDSPEC)                                        *
*/*%INCLUDE SYSLIB  (TESTBIT )                                        *
*/*%INCLUDE SYSLIB  (TBITSPEC)                                        *
*;                                                              01S0327
@DATA    DS    0H
@CH00048 DC    H'1'
@CH00112 DC    H'2'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    5F
@SA00002 DS    15F
@AL00001 DS    8A
@TF00001 DS    F
IEFAB441 CSECT
         DS    0F
@CF00099 DC    F'28'
@CH00099 EQU   @CF00099+2
@CF01096 DC    F'-4'
@DATD    DSECT
         DS    0D
MASKPTR  DS    A
SIOTPTR  DS    A
UCBPTR   DS    A
VMVREQBP DS    A
FNDGRPID DS    F
GROUPNO  DS    F
EDTPTR   DS    A
LUVPTR   DS    A
GENPTR   DS    A
GRPTABP  DS    A
ETIODATA DS    CL4
         ORG   ETIODATA
DEVSENT  DS    FL2
DEVSSIOT DS    FL2
         ORG   ETIODATA+4
FUNC434  DS    BL4
         ORG   FUNC434
UPDATIOT DS    BL1
USECTFLG EQU   FUNC434+0
AFFFLAG  EQU   FUNC434+0
@NM00002 EQU   FUNC434+0
USEATFLG EQU   FUNC434+0
UPALGTB  EQU   FUNC434+0
@NM00003 EQU   FUNC434+0
         ORG   FUNC434+4
INTYPST  DS    CL4
         ORG   INTYPST
INTYPCOM DS    CL4
         ORG   INTYPCOM
@NM00004 DS    BL1
INTYPBT2 DS    BL1
         ORG   INTYPBT2
INTRK7   DS    BL1
         ORG   INTYPCOM+2
@NM00005 DS    BL1
         ORG   @NM00005
INTAPE   DS    BL1
@NM00006 EQU   @NM00005+0
INDACC   EQU   @NM00005+0
         ORG   INTYPCOM+3
INTYPBT4 DS    BL1
         ORG   INTYPST+4
SWITCHES DS    BL1
         ORG   SWITCHES
ALLALOC  DS    BL1
BITRTN   EQU   SWITCHES+0
TYPELOKD EQU   SWITCHES+0
TYPMATCH EQU   SWITCHES+0
UCBMATSW EQU   SWITCHES+0
VOLFND   EQU   SWITCHES+0
         ORG   SWITCHES+1
UCBPARMS DS    CL9
         ORG   UCBPARMS
@NM00009 DS    CL2
VOLID434 DS    CL6
@NM00010 DS    CL1
         ORG   UCBPARMS+9
VOLTYPST DS    CL4
         ORG   VOLTYPST
TYPCOMP  DS    CL4
         ORG   TYPCOMP
@NM00011 DS    BL1
VLTYPBT2 DS    BL1
         ORG   VLTYPBT2
VOLTRK7  DS    BL1
         ORG   TYPCOMP+2
@NM00012 DS    BL1
VLTYPBT4 DS    BL1
         ORG   VOLTYPST+4
VMVRBCOR DS    CL52
@OLDKEY  DS    AL1
IEFAB441 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CV00163 DC    V(IEFAB434)
@CV00164 DC    V(IEFAB442)
@CV00165 DC    V(IEFAB49C)
         DS    0D
@CB00153 DC    X'3000'
@CB00155 DC    X'3400'
@CB00157 DC    X'3420'
@CB00159 DC    X'3200'
@CB00161 DC    X'3210'
@CB00137 DC    B'10000000'
         DS    CL1
ERRCD    DC    H'21'
         DC    H'20'
         DC    H'58'
         DC    H'59'
         DC    H'83'
IEFAB441 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
IEFAB441 CSECT
TMINST  TM    0(EVENREG),0            TEST OF CORRECT BYTE. MASK=BIT
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFAB441 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
VUCTR    EQU   @04
RTNCODE  EQU   @03
GRPCTR   EQU   @05
DEVCTR   EQU   @04
VUPTR    EQU   @02
GRPPTR   EQU   @02
EDLUCBLP EQU   @05
EDLPTR   EQU   @03
EDLGNTP  EQU   @02
REG15    EQU   @15
EVENREG  EQU   @04
MASKREG  EQU   @03
ODDREG   EQU   @05
CANCLECB EQU   0
IOSLUT   EQU   0
REASONCD EQU   0
QMQBLK   EQU   0
QMASKOWN EQU   QMQBLK+29
EDTHDR   EQU   0
EDTLUVSP EQU   EDTHDR
EDTGENSP EQU   EDTHDR+4
EDTGRPSP EQU   EDTHDR+8
EDTUCBSP EQU   EDTHDR+12
EDTMSKTP EQU   EDTHDR+16
LUVSECT  EQU   0
LUVHDR   EQU   LUVSECT
LUVENTRY EQU   0
LUVGMTP  EQU   LUVENTRY+12
LUVFLAGS EQU   LUVENTRY+24
GENSECT  EQU   0
GENHDR   EQU   GENSECT
GENENTRY EQU   0
GRPTRTAB EQU   0
GRPSECT  EQU   0
GRPHDR   EQU   GRPSECT
GRPENTNO EQU   GRPHDR
GRPENTLN EQU   GRPHDR+4
GRPENTRY EQU   0
GRPID    EQU   GRPENTRY
GRPUCBNO EQU   GRPENTRY+4
GRPUCBP  EQU   GRPENTRY+8
EUCBSECT EQU   0
EUCBHDR  EQU   EUCBSECT
EUCBENTY EQU   0
EUCBTPOS EQU   EUCBENTY
GRMSKTAB EQU   0
GMTHDR   EQU   GRMSKTAB
GMTENTRY EQU   0
IEFEDL   EQU   0
EDLHDR   EQU   IEFEDL
EDLFGENP EQU   EDLHDR+8
EDLUVFLG EQU   EDLHDR+16
EDLENTRY EQU   0
EDLNXTNT EQU   EDLENTRY
EDLGRPTR EQU   EDLENTRY+12
EDLDTFLG EQU   EDLENTRY+20
EDLGNTRY EQU   0
EDLNXGRP EQU   EDLGNTRY
EDLUCBNO EQU   EDLGNTRY+4
EDLLISTP EQU   EDLGNTRY+8
EDLGRFLG EQU   EDLGNTRY+16
EDLUCBL  EQU   0
EDLUCBAD EQU   EDLUCBL
EDLINDIC EQU   EDLUCBL+2
VOLUNTAB EQU   0
VOLID    EQU   VOLUNTAB
VOLSTAT  EQU   VOLUNTAB+6
VOLSTATA EQU   VOLSTAT
VOLSTATB EQU   VOLSTAT+1
VOLALOC  EQU   VOLSTATB
VDEVREQD EQU   VOLSTATB
VUDNALOC EQU   VOLSTATB
VUVINELG EQU   VOLSTATB
VOLSTATC EQU   VOLSTAT+2
VOLSTATD EQU   VOLSTAT+3
VUVLUNIQ EQU   VOLSTATD
VOLUNTID EQU   VOLUNTAB+10
VOLALGTP EQU   VOLUNTAB+12
VOLSIOTP EQU   VOLUNTAB+16
ALCWA    EQU   0
FMAPPTR  EQU   ALCWA+4
IOSLUTP  EQU   ALCWA+16
FAILRSCP EQU   ALCWA+20
EDTABPTR EQU   ALCWA+24
CNTABLE  EQU   ALCWA+28
TOTREQS  EQU   CNTABLE+36
TOTVOLUN EQU   CNTABLE+44
VOLUNPTR EQU   ALCWA+80
VOLUNSZE EQU   ALCWA+84
ALGTABP  EQU   ALCWA+88
QMGRRBP  EQU   ALCWA+108
INDICATE EQU   ALCWA+112
INDRETRY EQU   INDICATE
@NM00018 EQU   ALCWA+113
WAITIGEN EQU   @NM00018
ALCWAREC EQU   @NM00018
NEEDRCVY EQU   @NM00018
NODEVERR EQU   @NM00018
ALCWASID EQU   ALCWA+114
TIOTHDRP EQU   ALCWA+120
CANCELP  EQU   ALCWA+140
NAMES    EQU   0
ALCJOBN  EQU   NAMES
ALCSTEPN EQU   NAMES+8
ALGPTRS  EQU   0
CVRPARM  EQU   0
CVRFLG1  EQU   CVRPARM+8
CVRRQLST EQU   0
CVRMIN   EQU   CVRRQLST+10
CVRFLG2  EQU   CVRRQLST+16
CVRWUCBP EQU   CVRRQLST+24
CVRGPLST EQU   0
CVRFLG3  EQU   CVRGPLST+12
GRPCOUNT EQU   0
AQMPARAM EQU   0
AQMNORMP EQU   AQMPARAM+20
AQMQBPTR EQU   AQMPARAM+24
FUNCMAP  EQU   0
VOLMNTSW EQU   FUNCMAP
WRTMSGSW EQU   FUNCMAP
UWAITSW  EQU   FUNCMAP
VWAITSW  EQU   FUNCMAP
OFFDEVSW EQU   FUNCMAP
CCLMNTSW EQU   FUNCMAP
GENLOKSW EQU   FUNCMAP
HDRMSGSW EQU   FUNCMAP+1
MTRJOBSW EQU   FUNCMAP+1
NOTIOTNQ EQU   FUNCMAP+1
TRKMSW   EQU   FUNCMAP+1
WAITOKSW EQU   FUNCMAP+1
ASNMSW   EQU   FUNCMAP+1
VMVRQBLK EQU   0
VMVFNMAP EQU   VMVRQBLK
VMVOPTB1 EQU   VMVFNMAP
VMVUNLOD EQU   VMVOPTB1
VMVUCB   EQU   VMVOPTB1
VMVOPTB2 EQU   VMVFNMAP+1
VMVOPTB3 EQU   VMVFNMAP+2
VMVUCBP  EQU   VMVRQBLK+9
VMVJBNMP EQU   VMVRQBLK+24
VMVJSNMP EQU   VMVRQBLK+32
VMVMINFO EQU   VMVRQBLK+40
VMVACTON EQU   VMVMINFO
VMVUSER  EQU   VMVRQBLK+48
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBJES3  EQU   UCBJBNR
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBRESV  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCB3TAPE EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00036 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
INDMSIOT EQU   0
SCTUSADD EQU   INDMSIOT+20
SIOTOTUN EQU   INDMSIOT+39
SIOTBYT1 EQU   INDMSIOT+43
SIOTALCD EQU   SIOTBYT1
SIOTBYT3 EQU   INDMSIOT+46
SIOTJES3 EQU   SIOTBYT3
SIOTTSTC EQU   INDMSIOT+47
SIOTBYT0 EQU   INDMSIOT+52
SIOTRTRY EQU   SIOTBYT0
SCTSDISP EQU   INDMSIOT+55
SCTSBYT1 EQU   INDMSIOT+56
SCTSBYT2 EQU   INDMSIOT+57
SCTSBYT3 EQU   INDMSIOT+58
SCTSBYT4 EQU   INDMSIOT+59
SCTUTYPE EQU   INDMSIOT+60
SIOTDEVT EQU   SCTUTYPE
SIOUBYT3 EQU   SIOTDEVT+2
SIOTALTD EQU   INDMSIOT+92
SIOTBYT2 EQU   INDMSIOT+103
SIOTRSNC EQU   INDMSIOT+130
SIOTEDLP EQU   INDMSIOT+136
SVOLUNAD EQU   INDMSIOT+140
SIOTETIO EQU   INDMSIOT+148
SVOLUNNO EQU   INDMSIOT+168
UCBBGN   EQU   0
FMAPBITS EQU   0
FAILFIXD EQU   FMAPBITS
ALCWAPTR EQU   0
INVUPTR  EQU   0
MPTR     EQU   0
ALCDTYPE EQU   0
UCBOBS01 EQU   UCBDEV
UCBVOLI  EQU   UCBOBS01+4
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00035 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00035
UCBSKPFG EQU   @NM00035
UCBRIPND EQU   @NM00035
UCBRTIAC EQU   @NM00035
UCBRSV79 EQU   @NM00035
UCBRSV78 EQU   @NM00035
UCBRSV77 EQU   @NM00035
UCBOLTEP EQU   @NM00035
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBRV038 EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00034 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVTOC  EQU   UCBOBS01
@NM00001 EQU   FMAPBITS
SIODDSNL EQU   INDMSIOT+173
SIOVDSNL EQU   INDMSIOT+172
SIOVDSNT EQU   INDMSIOT+170
SIOTVMVP EQU   INDMSIOT+164
SIOTJFX  EQU   INDMSIOT+160
SJFCBPTR EQU   INDMSIOT+156
SIOTNPTR EQU   INDMSIOT+152
SIOTATE  EQU   INDMSIOT+144
SIOTEDLS EQU   INDMSIOT+132
SCTANAME EQU   INDMSIOT+122
@NM00052 EQU   INDMSIOT+108
SIOTSSNM EQU   INDMSIOT+104
@NM00051 EQU   SIOTBYT2
@NM00050 EQU   SIOTBYT2
SIOTCVOL EQU   SIOTBYT2
SIOTCNEW EQU   SIOTBYT2
SIOTCALC EQU   SIOTBYT2
SIOTGALL EQU   SIOTBYT2
SIOTDSPD EQU   SIOTBYT2
SIOTDMND EQU   SIOTBYT2
SIOTOPUC EQU   INDMSIOT+99
SIOTOUTR EQU   INDMSIOT+97
SIOTOUTC EQU   INDMSIOT+96
@NM00049 EQU   INDMSIOT+93
SIOTAUNC EQU   SIOTALTD
SIOTACAT EQU   SIOTALTD
SIOTADEL EQU   SIOTALTD
SIOTAKEP EQU   SIOTALTD
SIOTNPRV EQU   SIOTALTD
SIOJCATS EQU   SIOTALTD
@NM00048 EQU   SIOTALTD
@NM00047 EQU   SIOTALTD
@NM00046 EQU   INDMSIOT+91
SIOTNDSB EQU   INDMSIOT+88
@NM00045 EQU   INDMSIOT+84
SIOTDPCD EQU   INDMSIOT+82
@NM00044 EQU   INDMSIOT+81
SCTOUTPN EQU   INDMSIOT+80
SCTOUTNO EQU   INDMSIOT+76
SCTOUTNM EQU   INDMSIOT+68
SIOUCBAD EQU   SCTUTYPE+5
SIOUCNVT EQU   SCTUTYPE+4
SIOUBYT4 EQU   SIOTDEVT+3
@NM00043 EQU   SIOUBYT3
SIO3UREC EQU   SIOUBYT3
SIO3DISP EQU   SIOUBYT3
SIO3DACC EQU   SIOUBYT3
SIO3COMM EQU   SIOUBYT3
SIO3TAPE EQU   SIOUBYT3
SIOUBYT2 EQU   SIOTDEVT+1
SIOUBYT1 EQU   SIOTDEVT
SIOTOMN  EQU   SCTSBYT4
SIOTIPDI EQU   SCTSBYT4
SIOTVAFF EQU   SCTSBYT4
SIOTSTEP EQU   SCTSBYT4
SIOTASCI EQU   SCTSBYT4
SIOTAFF  EQU   SCTSBYT4
SIOTGDGA EQU   SCTSBYT4
SCTSGDGS EQU   SCTSBYT4
SCTSOLD  EQU   SCTSBYT3
SCTSMOD  EQU   SCTSBYT3
SCTSNEW  EQU   SCTSBYT3
SCTSYSOU EQU   SCTSBYT3
SCTVREF  EQU   SCTSBYT3
SCTALCHK EQU   SCTSBYT3
SCTSYSNE EQU   SCTSBYT3
SCTDSNRF EQU   SCTSBYT3
SCTRECVD EQU   SCTSBYT2
SCTDEFER EQU   SCTSBYT2
SCTLABEL EQU   SCTSBYT2
SCTUNLBD EQU   SCTSBYT2
SCTJOBLB EQU   SCTSBYT2
SCTVOLAF EQU   SCTSBYT2
SIOTCATL EQU   SCTSBYT2
SIOCLUNL EQU   SCTSBYT2
SIOTJSCT EQU   SCTSBYT1
SCTUNAFF EQU   SCTSBYT1
SCTPARLM EQU   SCTSBYT1
SIOTQDSN EQU   SCTSBYT1
SIOTGDSN EQU   SCTSBYT1
SIOTCCAT EQU   SCTSBYT1
SCTSYSIN EQU   SCTSBYT1
SCTDUMMY EQU   SCTSBYT1
SIOTUNCT EQU   SCTSDISP
SIOTCTLG EQU   SCTSDISP
SIOTDLET EQU   SCTSDISP
SIOTKEEP EQU   SCTSDISP
SIOTPASS EQU   SCTSDISP
SIOTPRIV EQU   SCTSDISP
S3400DSP EQU   SCTSDISP
SIOTRETN EQU   SCTSDISP
SIOTVLCT EQU   INDMSIOT+54
SCTNMBUT EQU   INDMSIOT+53
SIOTPUPV EQU   SIOTBYT0
SIOTNOPV EQU   SIOTBYT0
SIOTGIGN EQU   SIOTBYT0
SPVTAMSG EQU   SIOTBYT0
SIOTFUDA EQU   SIOTBYT0
SIOTDYAL EQU   SIOTBYT0
SIOTSSDS EQU   SIOTBYT0
SIOTGIID EQU   INDMSIOT+50
SCTVOLCT EQU   INDMSIOT+49
SCTSPOOL EQU   INDMSIOT+48
SIOTQNAM EQU   SIOTTSTC
SIOTDSNM EQU   SIOTTSTC
SIOTTRKM EQU   SIOTTSTC
@NM00042 EQU   SIOTTSTC
SIOTTERM EQU   SIOTTSTC
@NM00041 EQU   SIOTTSTC
@NM00040 EQU   SIOTBYT3
S3400OFF EQU   SIOTBYT3
SIOCDEVT EQU   SIOTBYT3
SIOALIAS EQU   SIOTBYT3
SCTDDINO EQU   INDMSIOT+44
SIOTDDNT EQU   SIOTBYT1
SIODADSM EQU   SIOTBYT1
SIOTDADR EQU   SIOTBYT1
SIODUNAL EQU   SIOTBYT1
SIOVAMDS EQU   SIOTBYT1
SIOTHOLD EQU   SIOTBYT1
SIOTOCKP EQU   SIOTBYT1
SIOPSCNT EQU   INDMSIOT+42
SIOTREFN EQU   INDMSIOT+40
SIOTVRSB EQU   INDMSIOT+36
@NM00039 EQU   INDMSIOT+35
SCTPJFCB EQU   INDMSIOT+32
@NM00038 EQU   INDMSIOT+31
SCTPSIOT EQU   INDMSIOT+28
SIOTAFID EQU   INDMSIOT+26
@NM00037 EQU   INDMSIOT+24
SIODSNTE EQU   INDMSIOT+22
SIOTUNAF EQU   SCTUSADD
SIOTDEST EQU   INDMSIOT+12
SCTDDNAM EQU   INDMSIOT+4
SIOTTYPE EQU   INDMSIOT+3
SIOTDSKA EQU   INDMSIOT
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBRV032 EQU   UCBFLP1
UCBRV031 EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00036
UCBHALI  EQU   @NM00036
UCBRSV09 EQU   @NM00036
UCBRSV08 EQU   @NM00036
UCBRSV07 EQU   @NM00036
UCBRSV06 EQU   @NM00036
UCBRSV05 EQU   @NM00036
UCBRSV04 EQU   @NM00036
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00033 EQU   UCB
@NM00032 EQU   VMVUSER
VMVPROCD EQU   VMVUSER
VMVVUNTP EQU   VMVRQBLK+44
@NM00031 EQU   VMVMINFO+1
@NM00030 EQU   VMVACTON
VMVRTAIN EQU   VMVACTON
VMVDSMT  EQU   VMVACTON
VMVKEEP  EQU   VMVACTON
VMVRETCD EQU   VMVRQBLK+36
VMVDSNMP EQU   VMVRQBLK+28
VMVMVLSR EQU   VMVRQBLK+18
VMVUVLSR EQU   VMVRQBLK+12
@NM00029 EQU   VMVRQBLK+8
VMVNREQP EQU   VMVRQBLK+4
VMVOPTB4 EQU   VMVFNMAP+3
@NM00028 EQU   VMVOPTB3
VMVNUMSG EQU   VMVOPTB3
VMVCUVOL EQU   VMVOPTB3
VMVDUPVL EQU   VMVOPTB3
VMVNSPVT EQU   VMVOPTB2
VMVNSLTP EQU   VMVOPTB2
VMVSLTAP EQU   VMVOPTB2
VMVNLTAP EQU   VMVOPTB2
VMVALTAP EQU   VMVOPTB2
VMVSTRG  EQU   VMVOPTB2
VMVPUBLC EQU   VMVOPTB2
VMVPRIVT EQU   VMVOPTB2
VMVVDEND EQU   VMVOPTB1
VMVVRLBL EQU   VMVOPTB1
VMVDWTOR EQU   VMVOPTB1
VMVMTMSG EQU   VMVOPTB1
VMVMOUNT EQU   VMVOPTB1
VMVREWND EQU   VMVOPTB1
EXTRACAL EQU   FUNCMAP+1
ALCASDSN EQU   ASNMSW
ALCSUBWT EQU   WAITOKSW
ALCATRKM EQU   TRKMSW
ALCNOENQ EQU   NOTIOTNQ
ALCJOBNM EQU   MTRJOBSW
ALCHDMSG EQU   HDRMSGSW
@NM00027 EQU   FUNCMAP+1
ALCGENER EQU   GENLOKSW
ALCCANCL EQU   CCLMNTSW
ALCOFFDV EQU   OFFDEVSW
@NM00026 EQU   FUNCMAP
ALCWTVOL EQU   VWAITSW
ALCWTUNT EQU   UWAITSW
ALCMSGLV EQU   WRTMSGSW
ALCMOUNT EQU   VOLMNTSW
AQMPFLG  EQU   AQMNORMP
AQMCANCP EQU   AQMPARAM+16
AQMLENGT EQU   AQMPARAM+12
AQMASID  EQU   AQMPARAM+8
AQMMASKP EQU   AQMPARAM+4
AQMQCODE EQU   AQMPARAM+2
AQMECODE EQU   AQMPARAM
GRPWPTR  EQU   GRPCOUNT+12
GRPIDENT EQU   GRPCOUNT+10
GRPEXCS  EQU   GRPCOUNT+8
GRPTOTAL EQU   GRPCOUNT+6
GRPOFFLN EQU   GRPCOUNT+4
GRPALLCT EQU   GRPCOUNT+2
GRPAVAIL EQU   GRPCOUNT
@NM00025 EQU   CVRGPLST+13
@NM00024 EQU   CVRFLG3
CVRFORCI EQU   CVRFLG3
CVRGSKP  EQU   CVRFLG3
CVRBOUND EQU   CVRGPLST+10
CVRGALL  EQU   CVRGPLST+8
CVRGRPAL EQU   CVRGPLST+6
CVRGRPID EQU   CVRGPLST+4
CVRGCPTR EQU   CVRGPLST
@NM00023 EQU   CVRRQLST+26
CVRGRPPT EQU   CVRRQLST+20
CVRNGRP  EQU   CVRRQLST+18
@NM00022 EQU   CVRFLG2+1
CVRDUPLI EQU   CVRFLG2+1
CVRWMOVE EQU   CVRFLG2
CVRIGNOR EQU   CVRFLG2
CVRMULTI EQU   CVRFLG2
CVRSCRTH EQU   CVRFLG2
CVRFULL  EQU   CVRFLG2
CVRREACH EQU   CVRFLG2
CVRRUSED EQU   CVRFLG2
CVRSKFLG EQU   CVRFLG2
CVRGNEXT EQU   CVRRQLST+12
CVRPTS   EQU   CVRMIN
CVRNEED  EQU   CVRRQLST+8
CVRALLCT EQU   CVRRQLST+6
CVRREQ1  EQU   CVRRQLST+4
CVRVUPTR EQU   CVRRQLST
@NM00021 EQU   CVRPARM+9
@NM00020 EQU   CVRFLG1
CVRFCALL EQU   CVRFLG1
CVROFFLG EQU   CVRFLG1
CVRALFLG EQU   CVRFLG1
CVRAVFLG EQU   CVRFLG1
CVRGRPLK EQU   CVRPARM+6
CVRNREQ  EQU   CVRPARM+4
CVRRQPTR EQU   CVRPARM
ALGGCNTP EQU   ALGPTRS+12
ALGGLSTP EQU   ALGPTRS+8
ALGRQLTP EQU   ALGPTRS+4
ALGPARMP EQU   ALGPTRS
ALCPROCN EQU   NAMES+16
EXITPRMP EQU   ALCWA+144
WORK3MP  EQU   ALCWA+136
WMASK2P  EQU   ALCWA+132
WMASKPTR EQU   ALCWA+128
LGENLOCK EQU   ALCWA+124
TCBP     EQU   ALCWA+116
@NM00019 EQU   @NM00018
UNITRECS EQU   @NM00018
ALCWADUL EQU   INDICATE
ALCWISAM EQU   INDICATE
DSSUNIT  EQU   INDICATE
DSSTAPE  EQU   INDICATE
PRIVASUM EQU   INDICATE
INDREQU  EQU   INDICATE
INDWAIT  EQU   INDICATE
RIMTABCT EQU   ALCWA+104
RIMTABLN EQU   ALCWA+100
RIMTABP  EQU   ALCWA+96
ALGTABSZ EQU   ALCWA+92
@NM00017 EQU   ALCWA+78
LTUNITID EQU   ALCWA+76
NUMREQS  EQU   CNTABLE+40
OTHEREQS EQU   CNTABLE+32
SUBSREQS EQU   CNTABLE+28
STRGREQS EQU   CNTABLE+24
PUBLREQS EQU   CNTABLE+20
PVTNREQS EQU   CNTABLE+16
SPECREQS EQU   CNTABLE+12
TPREQS   EQU   CNTABLE+8
VAMREQS  EQU   CNTABLE+4
DMYREQS  EQU   CNTABLE
JSCBPTR  EQU   ALCWA+12
SIOT1P   EQU   ALCWA+8
WASIZE   EQU   ALCWA
VUGRID   EQU   VOLUNTAB+24
VUUCBP   EQU   VOLUNTAB+20
VURCVYPR EQU   VOLSTATD
VUDMUNIQ EQU   VOLSTATD
VUUNALSW EQU   VOLSTATD
VUDMNDAL EQU   VOLSTATD
VUDMNDOF EQU   VOLSTATD
VUREALOC EQU   VOLSTATD
VUMUGDON EQU   VOLSTATD
@NM00016 EQU   VOLSTATC
@NM00015 EQU   VOLSTATC
VURECVRY EQU   VOLSTATC
VOLURREQ EQU   VOLSTATC
VOLGRREQ EQU   VOLSTATC
VOLDAREQ EQU   VOLSTATC
VOLCOREQ EQU   VOLSTATC
VOLTAREQ EQU   VOLSTATC
VUAFFWRK EQU   VOLSTATB
VUDADSME EQU   VOLSTATB
VUPROCED EQU   VOLSTATB
VOLMNTD  EQU   VOLSTATB
VOLDEFER EQU   VOLSTATA
VUDADSM  EQU   VOLSTATA
VOLRESVE EQU   VOLSTATA
VOLNSHR  EQU   VOLSTATA
VOLSTG   EQU   VOLSTATA
VOLSPEC  EQU   VOLSTATA
VOLPRV   EQU   VOLSTATA
VOLPUB   EQU   VOLSTATA
EDLNOJES EQU   EDLINDIC
EDLVOLAF EQU   EDLINDIC
EDLENQ   EQU   EDLINDIC
EDLDADSM EQU   EDLINDIC
EDLALCD  EQU   EDLINDIC
EDLJINEL EQU   EDLGRFLG
EDLGRID  EQU   EDLGNTRY+12
EINDEVTP EQU   EDLDTFLG
@NM00014 EQU   EDLENTRY+18
EDLNSCNT EQU   EDLENTRY+16
EDLGRPNO EQU   EDLENTRY+8
EDLDEVT  EQU   EDLENTRY+4
EDLMGENS EQU   EDLUVFLG
EDLVAM   EQU   EDLUVFLG
EDLGMTP  EQU   EDLHDR+12
EDLGENNO EQU   EDLHDR+4
EDLLUV   EQU   EDLHDR
GRPMASK  EQU   GMTENTRY
GMTENTLN EQU   GMTHDR+4
GMTENTNO EQU   GMTHDR
EUCBENLN EQU   EUCBHDR+4
EUCBENNO EQU   EUCBHDR
GRPTR    EQU   GRPTRTAB
GENGRPTR EQU   GENENTRY+8
GENGRPNO EQU   GENENTRY+4
GENDEVT  EQU   GENENTRY
GENENTLN EQU   GENHDR+4
GENENTNO EQU   GENHDR
LUVAGMTP EQU   LUVENTRY+28
@NM00013 EQU   LUVFLAGS
LUVMGENS EQU   LUVFLAGS
LUVAGMSK EQU   LUVFLAGS
LUVVAM   EQU   LUVFLAGS
LUVGENP  EQU   LUVENTRY+20
LUVGENNO EQU   LUVENTRY+16
LUVALUE  EQU   LUVENTRY+8
UNITNAME EQU   LUVENTRY
LUVENTLN EQU   LUVHDR+4
LUVENTNO EQU   LUVHDR
@NM00008 EQU   QMQBLK+28
@NM00007 EQU   QMQBLK
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00156 EQU   @RC00129
@RC00191 EQU   @RC00189
@RC00264 EQU   @RC00189
BITOFF   EQU   @EL00002
@RC00160 EQU   @RC00156
@RC00158 EQU   @RC00156
@RC00210 EQU   @RC00191
@RC00266 EQU   @RC00264
@RC00214 EQU   @RC00210
@RC00268 EQU   @RC00266
@RC00233 EQU   @RC00214
@ENDDATA EQU   *
         END   IEFAB441,(C'PLS1539',0701,76342)
