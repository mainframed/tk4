         TITLE 'IEFAB464- VOLUME/UNIT TABLE COMPLETION                 *
                        '
IEFAB464 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(24)                                          01S0001
         DC    C'IEFAB464 78054  UZ16857 '                      01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @12,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@12                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         GSPACE   R,LV=(0)
         LR    @11,@01                                          01S0001
         USING @DATD,@11                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         LM    @00,@01,20(@13)                                  01S0001
         ST    @11,8(,@13)                                      01S0001
         LR    @13,@11                                          01S0001
         MVC   @PC00001(28),0(@01)                              01S0001
*                                      # OF BYTES AND IS GIVEN IN HDR
*                                      OF THIS SECTION               */
*   CSIOTP=CSIOTPTR;                /* GET POINTER TO CURRENT SIOT.  */
         L     @10,@PC00001+12                                  01S0107
         L     CSIOTP,CSIOTPTR(,@10)                            01S0107
*   CJFCBP=CJFCBPTR;                /* GET POINTER TO CURRENT JFCB.  */
         L     @10,@PC00001+16                                  01S0108
         L     CJFCBP,CJFCBPTR(,@10)                            01S0108
*   RSIOTP=RSIOTPTR;                /* GET POINTER TO REFERENCED SIOT*/
         L     @10,@PC00001+24                                  01S0109
         L     RSIOTP,RSIOTPTR(,@10)                            01S0109
*   ZEROUCB=0;                      /* SETUP FOR RETRIEVED DEVICE
*                                      TYPE.                         */
         SLR   @10,@10                                          01S0110
         ST    @10,ZEROUCB                                      01S0110
*   IF HWGEPACP=0 THEN              /* IF NO SPECIAL                 */
         L     @09,@PC00001+4                                   01S0111
         L     @09,HWDATAP(,@09)                                01S0111
         C     @10,HWGEPACP(,@09)                               01S0111
         BNE   @RF00111                                         01S0111
*     EPAPTR=HWLEPAP;               /* EPA CHAIN USE NORMAL CHAIN,   */
         L     @10,HWLEPAP(,@09)                                01S0112
         ST    @10,EPAPTR                                       01S0112
*   ELSE                            /* OTHERWISE USE SPECIAL CHAIN   */
*     EPAPTR=HWGEPACP;              /* FOR ASSIGNED JFCBX(S).        */
         B     @RC00111                                         01S0113
@RF00111 L     @10,@PC00001+4                                   01S0113
         L     @10,HWDATAP(,@10)                                01S0113
         L     @10,HWGEPACP(,@10)                               01S0113
         ST    @10,EPAPTR                                       01S0113
*   IF HWDSNCAT=YES×HWRESIOT=YES×   /* IF THERE IS AN        @YM06136*/
*       HWVUREC=YES THEN            /* EXTERNAL (NON-JCL)    @YM06136*/
@RC00111 L     @10,@PC00001                                     01S0114
         L     @10,HWCNTRLP(,@10)                               01S0114
         TM    HWDSNCAT(@10),B'01001100'                        01S0114
         BZ    @RF00114                                         01S0114
*     DO;                           /* SOURCE FOR VOLUME     @YM06136*/
*       SCTVOLCT=0;                 /* AND UNIT INFORMATION  @YM06136*/
         MVI   SCTVOLCT(CSIOTP),X'00'                           01S0116
*       JFCBNVOL=0;                 /* CLEAR # VOLUMES       @YM06136*/
         MVI   JFCBNVOL(CJFCBP),X'00'                           01S0117
*     END;                          /* FIELDS                @YM06136*/
*   IF HWDSNCAT=YES×HWVUREC=YES THEN/* VOLUME/UNIT INFORMATION       */
@RF00114 L     @10,@PC00001                                     01S0119
         L     @10,HWCNTRLP(,@10)                               01S0119
         TM    HWDSNCAT(@10),B'01000100'                        01S0119
         BZ    @RF00119                                         01S0119
*     DO;                           /* FOUND IN CRI ?                */
*                                                               02S0121
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - CRIRFCMP                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - CRI REFERENCE VOLUME/UNIT  COMPLETION         */
*/*                                                                  */
*/* FUNCTION - SETUP ROUTINES HAVE ESTABLISHED THE SOURCE OF         */
*/*            IMPLICIT(DD HAS VOL=REF OR DOES NOT HAVE VOLUME       */
*/*            SERIALS) VOLUME/UNIT INFORMATION. IF THAT INFORMATION */
*/*            IS IN THE CATALOG THEN THIS ROUTINE COPIES IT FROM    */
*/*            THE CRI(CATALOG RETURN INFORMATION) TO THE CURRENT    */
*/*            REQUEST (SIOT,JFCB AND JFCBX(S)).                     */
*/* ENTRY -                                                          */
*/*   PURPOSE - SEE FUNCTION.                                        */
*/*                                                                  */
*/*   INPUT DATA - HSKPWA (CONTROLS,DATA AND RETURN INFO), CURRENT   */
*/*                SIOT,JFCB,JFCBX AND CRI.                          */
*/* EXITS -                                                          */
*/*   CONDITION- WHEN INFORMATION IS COPIED.                         */
*/*                                                                  */
*/*   OUTPUT DATA- UPDATED SIOT AND JFCB. UPDATED/CREATED JFCBX.     */
*/*                                                                  */
*/*   RETURN CODE-NONE.                                              */
*/*                                                                  */
*/********************************************************************/
*                                                               02S0121
*       IF SCTVOLAF=NO THEN         /* INDICATE A CATALOGED.         */
         TM    SCTVOLAF(CSIOTP),B'00100000'                     02S0121
         BNZ   @RF00121                                         02S0121
*         JFCCAT=YES;               /* DATA SET IF NOT VOL=REF.      */
         OI    JFCCAT(CJFCBP),B'10000000'                       02S0122
*       IF HWVUREC=YES THEN         /* GET NTH UNIQUE DEVICE TYPE FOR*/
@RF00121 L     @10,@PC00001                                     02S0123
         L     @10,HWCNTRLP(,@10)                               02S0123
         TM    HWVUREC(@10),B'01000000'                         02S0123
         BNO   @RF00123                                         02S0123
*         DO;                       /* VOL/UNIT RECURSION(N=DD  02S0124
*                                      COUNTER)                      */
*           CALL IEFAB463           /* SCAN CRI FOR NTH DEVICE TYPE
*                                      AS IN DD CTR                  */
*               (FUNC2,CRIP,HWDDCTR,DEVTYPE,DEVSFND,VLPTR);     02S0125
         LA    @09,@CH00081                                     02S0125
         ST    @09,@AL00001                                     02S0125
         L     @09,@PC00001+20                                  02S0125
         ST    @09,@AL00001+4                                   02S0125
         LA    @10,HWDDCTR(,@10)                                02S0125
         ST    @10,@AL00001+8                                   02S0125
         LA    @10,DEVTYPE                                      02S0125
         ST    @10,@AL00001+12                                  02S0125
         LA    @10,DEVSFND                                      02S0125
         ST    @10,@AL00001+16                                  02S0125
         LA    @10,VLPTR                                        02S0125
         ST    @10,@AL00001+20                                  02S0125
         L     @15,@CV00158                                     02S0125
         LA    @01,@AL00001                                     02S0125
         BALR  @14,@15                                          02S0125
*           SCTNMBUT=0;             /* CTLG. MGMNT HAS PASSED UNIT
*                                      CNT.                          */
         MVI   SCTNMBUT(CSIOTP),X'00'                           02S0126
*           JFCORGAM=YES;           /* SET TO VSAM           @YA00068*/
         OI    JFCORGAM(CJFCBP),B'00001000'                     02S0127
*         END;                                                  02S0128
*       ELSE                        /* IF NOT VOL/UNIT RECURSION THEN*/
*         DO;                       /* GET THE DEVICE TYPE IN 1ST    */
         B     @RC00123                                         02S0129
@RF00123 DS    0H                                               02S0130
*           DEVTYPE=CTGVLDEV(1);    /* VOLUME LIST ENTRY AND SET PTR */
         L     @10,@PC00001+20                                  02S0130
         L     @10,CRIP(,@10)                                   02S0130
         L     @10,CTGWKA(,@10)                                 02S0130
         L     @10,CTGWAVL(,@10)                                02S0130
         MVC   DEVTYPE(4),CTGVLDEV(@10)                         02S0130
*           DEVTPTR=ADDR(DEVTYPE);  /* SET DEVICE TYPE PTR TO DEVTYPE
*                                      FOR DEVTPROC          @ZA12414*/
         LA    DEVTPTR,DEVTYPE                                  02S0131
*           IF DEVTBYT4^=0 THEN     /* DEVICE TYPE IS NOT THE RESULT
*                                      OF GROUP NAME SPECIFIED  02S0132
*                                                            @ZA16380*/
         CLI   DEVTBYT4(DEVTPTR),0                              02S0132
         BE    @RF00132                                         02S0132
*             CALL DEVTPROC;        /* TURN OFF DEVTYPE BITS @ZA12414*/
         BAL   @14,DEVTPROC                                     02S0133
*           VLPTR=CTGWAVL;          /* TO 1ST VOLIST ENTRY.          */
@RF00132 L     @10,@PC00001+20                                  02S0134
         L     @10,CRIP(,@10)                                   02S0134
         L     @10,CTGWKA(,@10)                                 02S0134
         L     @09,CTGWAVL(,@10)                                02S0134
         ST    @09,VLPTR                                        02S0134
*           RFY                                                 02S0135
*             CTGVL BASED(VLPTR);   /* VOLIST ADDRESSIBILTY.         */
*           RFY                                                 02S0136
*             HWDEV BASED(ADDR(DEVTYPE));/* SET BASE FOR DEVTYPE
*                                      COMPARE.                      */
*           IF CTGWAVCT=1&SCTVOLAF=NO&HWDA=YES/* DSCB TTR FOR SINGLE */
*               &JFCORGAM=NO THEN   /* VOLUME, NON-VOLREF, DA,  02S0137
*                                      NON-VSAM                      */
         CLC   CTGWAVCT(2,@10),@CH00070                         02S0137
         BNE   @RF00137                                         02S0137
         TM    SCTVOLAF(CSIOTP),B'00100000'                     02S0137
         BNZ   @RF00137                                         02S0137
         LA    @10,DEVTYPE                                      02S0137
         TM    HWDA(@10),B'00100000'                            02S0137
         BNO   @RF00137                                         02S0137
         TM    JFCORGAM(CJFCBP),B'00001000'                     02S0137
         BNZ   @RF00137                                         02S0137
*             JFCBDSCB=CTGVLTTR;    /* DATA SETS.                    */
         MVC   JFCBDSCB(3,CJFCBP),CTGVLTTR(@09)                 02S0138
*           IF SIOTGALL=YES×JFCBFLSQ=0 THEN/* USE FILE SEQUENCE NO.
*                                      IN                            */
@RF00137 TM    SIOTGALL(CSIOTP),B'00100000'                     02S0139
         BO    @RT00139                                         02S0139
         LH    @10,JFCBFLSQ(,CJFCBP)                            02S0139
         LTR   @10,@10                                          02S0139
         BNZ   @RF00139                                         02S0139
@RT00139 DS    0H                                               02S0140
*             JFCBFLSQ=CTGVLSEQ(1); /* CRI IF GDG ALL OR IF NOT 02S0140
*                                      CODED.                        */
         L     @10,VLPTR                                        02S0140
         LH    @10,CTGVLSEQ(,@10)                               02S0140
         STH   @10,JFCBFLSQ(,CJFCBP)                            02S0140
*           IF JFCORGAM=YES&SCTPARLM=NO THEN/* VSAM DATA SET, NO
*                                                            @YM06579*/
@RF00139 TM    JFCORGAM(CJFCBP),B'00001000'                     02S0141
         BNO   @RF00141                                         02S0141
         TM    SCTPARLM(CSIOTP),B'00000100'                     02S0141
         BNZ   @RF00141                                         02S0141
*             SCTNMBUT=CTGWAUCT;    /* PARALLEL MNT, GET UNIT COUNT
*                                      FROM CATALOG          @YM06579*/
         L     @10,@PC00001+20                                  02S0142
         L     @10,CRIP(,@10)                                   02S0142
         L     @10,CTGWKA(,@10)                                 02S0142
         LH    @10,CTGWAUCT(,@10)                               02S0142
         STC   @10,SCTNMBUT(,CSIOTP)                            02S0142
*         END;                      /* END NON RECURSIVE ONLY.       */
@RF00141 DS    0H                                               02S0144
*       JFCMSVGP=BLANKS;            /* CLEAR MSVG NAME FIELD @ZA08174*/
@RC00123 MVC   JFCMSVGP(8,CJFCBP),BLANKS                        02S0144
*       JFCBMSGP=NO;                /* TURN MSVGP BIT OFF    @ZA08174*/
         NI    JFCBMSGP(CJFCBP),B'11011111'                     02S0145
*       JVOLPTR=ADDR(JFCBVOLS)-VOLSERLN;/* ADJUSTED 1ST VOLSER  02S0146
*                                      POSITION                      */
         LA    JVOLPTR,JFCBVOLS(,CJFCBP)                        02S0146
         SL    JVOLPTR,@CF00105                                 02S0146
*       DO VLPTR=VLPTR TO CTGWAVL+(CTGWAVCT-1)*VLEN BY VLEN;/* GET
*                                      ALL VOLSERS FOR THIS DEVTYPE. */
         L     @10,VLPTR                                        02S0147
         B     @DE00147                                         02S0147
@DL00147 DS    0H                                               02S0148
*         CDEVPTR=ADDR(CTGVLDEV);   /* PTR TO DEVTYPE IN CRI.        */
         LA    CDEVPTR,CTGVLDEV(,@10)                           02S0148
*         DEVTPTR=CDEVPTR;          /* SET DEVICE TYPE PTR TO   02S0149
*                                      CTGVLDEV FOR DEVTPROC @ZA12414*/
         LR    DEVTPTR,CDEVPTR                                  02S0149
*         IF DEVTBYT4^=0 THEN       /* DEVICE TYPE IS NOT THE RESULT
*                                      OF GROUP NAME SPECIFIED  02S0150
*                                                            @ZA16380*/
         CLI   DEVTBYT4(DEVTPTR),0                              02S0150
         BE    @RF00150                                         02S0150
*           CALL DEVTPROC;          /* TURN OFF CTGVLDEV BITS   02S0151
*                                                            @ZA12414*/
         BAL   @14,DEVTPROC                                     02S0151
*         IF HWDEV^=CDEVPTR->HWDEV THEN/* IF DEVICE TYPES NOT THE
*                                      SAME THEN UPDATE UNIT COUNT
*                                                            @Y30LPPE*/
@RF00150 LA    @10,DEVTYPE                                      02S0152
         CLC   HWDEV(4,@10),HWDEV(CDEVPTR)                      02S0152
         BE    @RF00152                                         02S0152
*           IF SCTNMBUT=0&HWVUREC=YES&SCTPARLM=NO THEN/* COUNT,IF NOT
*                                      DONE.                         */
         CLI   SCTNMBUT(CSIOTP),0                               02S0153
         BNE   @RF00153                                         02S0153
         L     @10,@PC00001                                     02S0153
         L     @10,HWCNTRLP(,@10)                               02S0153
         TM    HWVUREC(@10),B'01000000'                         02S0153
         BNO   @RF00153                                         02S0153
         TM    SCTPARLM(CSIOTP),B'00000100'                     02S0153
         BNZ   @RF00153                                         02S0153
*             DO;                   /* USE VOLCOUNT OR CRI UNIT COUNT*/
*               SCTNMBUT=MIN(CTGWAUCT,SCTVOLCT);/* USE SMALLER UNIT
*                                      COUNT                         */
         L     @10,@PC00001+20                                  02S0155
         L     @10,CRIP(,@10)                                   02S0155
         L     @10,CTGWKA(,@10)                                 02S0155
         LH    @09,CTGWAUCT(,@10)                               02S0155
         SLR   @05,@05                                          02S0155
         IC    @05,SCTVOLCT(,CSIOTP)                            02S0155
         CR    @05,@09                                          02S0155
         BNH   *+6
         LR    @05,@09                                          02S0155
         STC   @05,SCTNMBUT(,CSIOTP)                            02S0155
*               CTGWAUCT=CTGWAUCT-SCTNMBUT;/* UPDATE MIN UNIT COUNT
*                                      IN                            */
         SLR   @09,@05                                          02S0156
         STH   @09,CTGWAUCT(,@10)                               02S0156
*             END;                  /* CRI BY THIS DEVTYP'S UNIT
*                                      COUNT.                        */
*           ELSE                                                02S0158
*             ;                     /* NULL...                       */
@RF00153 DS    0H                                               02S0159
*         ELSE                      /* DEVTYPES ARE THE SAME,ITS NOT */
*           IF HWTAPE=NO×SCTVOLAF=NO THEN/* VOLREF TO A TAPE DATA
*                                      SET,COPY                      */
         B     @RC00152                                         02S0159
@RF00152 LA    @10,DEVTYPE                                      02S0159
         TM    HWTAPE(@10),B'10000000'                          02S0159
         BZ    @RT00159                                         02S0159
         TM    SCTVOLAF(CSIOTP),B'00100000'                     02S0159
         BNZ   @RF00159                                         02S0159
@RT00159 DS    0H                                               02S0160
*             DO;                   /* VOLSER FROM VOLIST TO JFCB(X).*/
*               CALL JFCBXGEN;      /* GET NEXT VOLSER LOCATION      */
         BAL   @14,JFCBXGEN                                     02S0161
*               NEXTSER=CTGVLVOL(1);/* PUT VOLSER IN JFCB(X)         */
         L     @10,VLPTR                                        02S0162
         MVC   NEXTSER(6,JVOLPTR),CTGVLVOL(@10)                 02S0162
*               SCTVOLCT=SCTVOLCT+1;/* INCREMENT NUMBER VOLSERS 02S0163
*                                      COPIED.                       */
         LA    @10,1                                            02S0163
         SLR   @09,@09                                          02S0163
         IC    @09,SCTVOLCT(,CSIOTP)                            02S0163
         ALR   @10,@09                                          02S0163
         STC   @10,SCTVOLCT(,CSIOTP)                            02S0163
*             END;                                              02S0164
*           ELSE                    /* VOLREF TO TAPE,GET LAST VOLSER*/
*             JFCBVOLS(1:VOLSERLN)=CTGVLVOL(1);/* BY ALWAYS COPYING
*                                      TO 1ST SLOT                   */
         B     @RC00159                                         02S0165
@RF00159 L     @10,VLPTR                                        02S0165
         MVC   JFCBVOLS(6,CJFCBP),CTGVLVOL(@10)                 02S0165
*       END;                        /* END FOR CRI. VOLUME LIST SCAN.*/
@RC00159 DS    0H                                               02S0166
@RC00152 LH    @10,VLEN                                         02S0166
         AL    @10,VLPTR                                        02S0166
         ST    @10,VLPTR                                        02S0166
@DE00147 L     @09,@PC00001+20                                  02S0166
         L     @09,CRIP(,@09)                                   02S0166
         L     @09,CTGWKA(,@09)                                 02S0166
         L     @05,@PC00001+20                                  02S0166
         L     @05,CRIP(,@05)                                   02S0166
         L     @05,CTGWKA(,@05)                                 02S0166
         LH    @01,CTGWAVCT(,@05)                               02S0166
         BCTR  @01,0                                            02S0166
         MH    @01,VLEN                                         02S0166
         AL    @01,CTGWAVL(,@09)                                02S0166
         CR    @10,@01                                          02S0166
         BNH   @DL00147                                         02S0166
*       IF HWTAPE=YES&SCTVOLAF=YES THEN/* IF VOLREF TO A TAPE DATA
*                                      SET                           */
         LA    @10,DEVTYPE                                      02S0167
         TM    HWTAPE(@10),B'10000000'                          02S0167
         BNO   @RF00167                                         02S0167
         TM    SCTVOLAF(CSIOTP),B'00100000'                     02S0167
         BNO   @RF00167                                         02S0167
*         SCTVOLCT=1;               /* INDICATE 1 SPECIFIC VOLSER    */
         MVI   SCTVOLCT(CSIOTP),X'01'                           02S0168
*       JFCBNVOL=SCTVOLCT;          /* TELL DATA MGMNT. NUMBER OF
*                                      VOLS.                         */
@RF00167 IC    @10,SCTVOLCT(,CSIOTP)                            02S0169
         STC   @10,JFCBNVOL(,CJFCBP)                            02S0169
*       IF HWVUREC=YES THEN         /* IF VOL/UNIT RECURSION THEN    */
         L     @10,@PC00001                                     02S0170
         L     @10,HWCNTRLP(,@10)                               02S0170
         TM    HWVUREC(@10),B'01000000'                         02S0170
         BNO   @RF00170                                         02S0170
*         DO;                       /* UPDATE FOR NEXT CRI SCAN      */
*           IF HWDDCTR=HWDDSTEP THEN/* LAST DD FOR VOL/UNIT     02S0172
*                                      RECURSION,                    */
         CLC   HWDDCTR(2,@10),HWDDSTEP(@10)                     02S0172
         BNE   @RF00172                                         02S0172
*             IF SCTPARLM=NO THEN   /* IF NOT PARALLEL MOUNT THEN ADD*/
         TM    SCTPARLM(CSIOTP),B'00000100'                     02S0173
         BNZ   @RF00173                                         02S0173
*               SCTNMBUT=SCTNMBUT+CTGWAUCT;/* RESIDUAL UNIT COUNT IN
*                                      CRI.                          */
         L     @10,@PC00001+20                                  02S0174
         L     @10,CRIP(,@10)                                   02S0174
         L     @10,CTGWKA(,@10)                                 02S0174
         SLR   @09,@09                                          02S0174
         IC    @09,SCTNMBUT(,CSIOTP)                            02S0174
         AH    @09,CTGWAUCT(,@10)                               02S0174
         STC   @09,SCTNMBUT(,CSIOTP)                            02S0174
*           HWDDCTR=HWDDCTR+1;      /* UPDATE COUNTER FOR NEXT  02S0175
*                                      DEVTYPE                       */
@RF00173 DS    0H                                               02S0175
@RF00172 L     @10,@PC00001                                     02S0175
         L     @10,HWCNTRLP(,@10)                               02S0175
         LA    @09,1                                            02S0175
         AH    @09,HWDDCTR(,@10)                                02S0175
         STH   @09,HWDDCTR(,@10)                                02S0175
*           IF SCTNMBUT=0 THEN      /* IF THERE WAS NO UNIT COUNT
*                                      FROM                          */
         CLI   SCTNMBUT(CSIOTP),0                               02S0176
         BNE   @RF00176                                         02S0176
*             SCTNMBUT=1;           /* CRI, INSURE AT LEAST 1.       */
         MVI   SCTNMBUT(CSIOTP),X'01'                           02S0177
*         END;                                                  02S0178
*     END;                          /* END VOL/UNIT REC./DSN IN CTLG */
*   ELSE                            /* IF NO CRI AND REF. SIOT IS    */
*     IF HWRESIOT=YES THEN          /* PRESENT THEN VOL/UNIT INFO IS */
         B     @RC00119                                         01S0180
@RF00119 L     @10,@PC00001                                     01S0180
         L     @10,HWCNTRLP(,@10)                               01S0180
         TM    HWRESIOT(@10),B'00001000'                        01S0180
         BNO   @RF00180                                         01S0180
*       DO;                         /* COMPLETED FROM PREVIOUS DD .  */
*                                                               02S0182
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - DDREFCMP                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - DD REFERENCE VOLUME/UNIT COMPLETION           */
*/*                                                                  */
*/* FUNCTION - SETUP ROUTINES HAVE ESTABLISHED THE SOURCE OF IMPLICIT*/
*/*            VOLUME/UNIT INFORMATION. IF THE SOURCE IS A PREVIOUS  */
*/*            REQUEST (VIA PDI OR VOL=REF) THEN THIS ROUTINE COPIES */
*/*            VOLUME/UNIT INFORMATION FROM THE REFERENCED DD TO THE */
*/*            CURRENT DD(SIOT,JFCB AND/OR JFCBX).                   */
*/* ENTRY -                                                          */
*/*   PURPOSE - OBTAIN VOLUME/UNIT(NO DEVICE TYPE IS COPIED IF UNIT  */
*/*             OVERRIDDEN) INFORMATION.                             */
*/*                                                                  */
*/*   INPUT DATA - HSKPWA(CONTROLS,DATA AND RETURN),CURRENT SIOT,    */
*/*                JFCB,JFCBX AND REFERENCED SIOT, JFCB AND JFCBX.   */
*/* EXITS -                                                          */
*/*   CONDITION- WHEN VOLUME/UNIT INFORMATION IS COPIED.             */
*/*                                                                  */
*/*   OUTPUT DATA- UPDATED SIOT,JFCB AND JFCBX.                      */
*/*                                                                  */
*/*   RETURN CODE-NONE.                                              */
*/*                                                                  */
*/********************************************************************/
*                                                               02S0182
*         RJFCBP=RSIOTP->SJFCBPTR;  /* GET PTR TO REFERENCED JFCB.   */
         L     RJFCBP,SJFCBPTR(,RSIOTP)                         02S0182
*         IF SCTVOLAF=NO THEN       /* RETRIEVED SOURCE NOT VOLREF
*                                      GET                           */
         TM    SCTVOLAF(CSIOTP),B'00100000'                     02S0183
         BNZ   @RF00183                                         02S0183
*           JFCBTSDM=JFCBTSDM×RJFCBP->JFCBTSDM;/* JOB/DATA MGMNT.
*                                      INTERFACE.                    */
         OC    JFCBTSDM(1,CJFCBP),JFCBTSDM(RJFCBP)              02S0184
*         RTVDUNIT=RSIOTP->SCTUTYPE;/* DEVICE TYPE AND UCB POINTER.  */
@RF00183 MVC   RTVDUNIT(8),SCTUTYPE(RSIOTP)                     02S0185
*         RFY                                                   02S0186
*           HWDEV BASED(ADDR(DEVTYPE));/* BASE DEVICE TYPE MAP       */
*         IF SCTVREF=YES&RSIOTP->SCTUNAFF=YES THEN/* IF THIS IS INTRA
*                                      STEP                          */
         TM    SCTVREF(CSIOTP),B'00010000'                      02S0187
         BNO   @RF00187                                         02S0187
         TM    SCTUNAFF(RSIOTP),B'00000010'                     02S0187
         BNO   @RF00187                                         02S0187
*           DO;                     /* VOLREF TO A DD WITH UNIT=AFF  */
*             SCTUNAFF=YES;         /* THEN MAKE THIS DD HAVE THE
*                                      SAME                          */
         OI    SCTUNAFF(CSIOTP),B'00000010'                     02S0189
*             SIOTUNAF=RSIOTP->SIOTUNAF;/* UNIT=AFF.                 */
         LH    @10,SIOTUNAF(,RSIOTP)                            02S0190
         STH   @10,SIOTUNAF(,CSIOTP)                            02S0190
*           END;                                                02S0191
*         IF HWTAPE=YES THEN        /* IF RETRIEVED DEVICE TYPE IS
*                                      TAPE                          */
@RF00187 LA    @10,DEVTYPE                                      02S0192
         TM    HWTAPE(@10),B'10000000'                          02S0192
         BNO   @RF00192                                         02S0192
*           DO;                     /* PROCESS UNIQUE TAPE      02S0193
*                                      INFORMATION.                  */
*                                                               03S0194
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - TAPEONLY                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - TAPE ONLY PROCESSING FOR REFERENCED DD.       */
*/*                                                                  */
*/* FUNCTION -TO PROVIDE THE MAXIMUM POSSIBLE RANGE OF ELIGIBILITY IF*/
*/*           REFERENCE (VIA INTER STEP VOL=REF OR DSN FOUND         */
*/*           IN PDI) SOURCE IS NOT A 7 TRACK TAPE DATA SET.         */
*/*           GET TAPE ONLY INFORMATION FROM A RETRIEVED DD.         */
*/*                                                                  */
*/*                                                                  */
*/* ENTRY - FROM DD REFERENCE COMPLETION.                            */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION.                                        */
*/*   INPUT DATA - DENSITY,LABEL INFORMATION AND UNIT INFORMATION    */
*/*                IN A REFERENCED DD.                               */
*/*                                                                  */
*/* EXIT -                                                           */
*/*   CONDITION - ALL                                                */
*/*                                                                  */
*/*   OUTPUT DATA - A UNIT TYPE THAT WILL ENCOMPASS THE GREATEST     */
*/*                 RANGE OF ELIGIBILTY.                             */
*/*                 DENSITY (IF NOT CODED) AND FILE SEQUENCE         */
*/*                 INFORMATION IS COPIED FROM SOURCE TO CURRENT DD. */
*/*                                                                  */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/********************************************************************/
*                                                               03S0194
*             RFY                                               03S0194
*               INFMJFCB BASED(RJFCBP);                         03S0194
*             IF HW7TRK=NO&SCTVREF=NO&JFCDEN^=0 THEN/* GET MAX. 03S0195
*                                      ELIGIBILITY IF NOT 7 TRACK AND
*                                      NOT                   @YM07531*/
         TM    HW7TRK(@10),B'10000000'                          03S0195
         BNZ   @RF00195                                         03S0195
         TM    SCTVREF(CSIOTP),B'00010000'                      03S0195
         BNZ   @RF00195                                         03S0195
         CLI   JFCDEN(RJFCBP),0                                 03S0195
         BE    @RF00195                                         03S0195
*               DO;                 /* INTRA-STEP VOL=REF. REF. 03S0196
*                                      SOURCE MUST HAVE A DENSITY.   */
*                 HWOBYTE=0;        /* CLEAR OPTION BYTE.            */
         MVI   HWOBYTE(@10),X'00'                               03S0197
*                 IF RSIOTP->S3400DSP=NO THEN/* IF REFERENCED ISN'T
*                                      3400 ONLY                     */
         TM    S3400DSP(RSIOTP),B'01000000'                     03S0198
         BNZ   @RF00198                                         03S0198
*                   HWTYPE=T2400;   /* MAKE THIS 2400 SERIES TAPE.   */
         MVI   HWTYPE(@10),X'01'                                03S0199
*                 IF JFCDEN=DEN6250 THEN/* IF IT IS 6250 BPI GIVE    */
@RF00198 CLI   JFCDEN(RJFCBP),X'D3'                             03S0200
         BNE   @RF00200                                         03S0200
*                   DO;                                         03S0201
*                     HWMBYTE=TBPI6250;/* 3400 SERIES 6250 BPI TAPE. */
         LA    @10,DEVTYPE                                      03S0202
         MVI   HWMBYTE(@10),X'32'                               03S0202
*                     HWTYPE=T3400;                             03S0203
         MVI   HWTYPE(@10),X'03'                                03S0203
*                   END;                                        03S0204
*                 ELSE              /* NOT 6250                      */
*                   IF JFCDEN=DEN1600 THEN/* IF 1600 BPI THEN GIVE   */
         B     @RC00200                                         03S0205
@RF00200 CLI   JFCDEN(RJFCBP),X'C3'                             03S0205
         BNE   @RF00205                                         03S0205
*                     HWMBYTE=TBPI1600;/* 1600 BPI MAX. ELIGIBILITY. */
         LA    @10,DEVTYPE                                      03S0206
         MVI   HWMBYTE(@10),X'34'                               03S0206
*                   ELSE            /* NOT 1600                      */
*                     IF JFCDEN=DEN800 THEN/* IF 800 BPI AND         */
         B     @RC00205                                         03S0207
@RF00205 CLI   JFCDEN(RJFCBP),X'83'                             03S0207
         BNE   @RF00207                                         03S0207
*                       IF RSIOTP->S3400DSP=NO THEN/* ELIGIBLE FOR
*                                      2400 THEN                     */
         TM    S3400DSP(RSIOTP),B'01000000'                     03S0208
         BNZ   @RF00208                                         03S0208
*                         HWMBYTE=TBPI800;/* GIVE MAX. 800 BPI  03S0209
*                                      ELIGIBILITY.                  */
         LA    @10,DEVTYPE                                      03S0209
         MVI   HWMBYTE(@10),X'30'                               03S0209
*                       ELSE        /* 3400 ONLY AND 800 BPI         */
*                         DO;       /* NEEDS 3400 SERIES DUAL   03S0210
*                                      DENSITY.                      */
         B     @RC00208                                         03S0210
@RF00208 DS    0H                                               03S0211
*                           HWMBYTE=TBPI1600;/* MAKE IT 3400 SERIES
*                                      800/1600                      */
         LA    @10,DEVTYPE                                      03S0211
         MVI   HWMBYTE(@10),X'34'                               03S0211
*                           HWOBYTE=DUALDEN;/* BPI DUAL DENSITY.     */
         MVI   HWOBYTE(@10),X'20'                               03S0212
*                         END;                                  03S0213
*               END;                                            03S0214
@RC00208 DS    0H                                               03S0214
@RF00207 DS    0H                                               03S0214
@RC00205 DS    0H                                               03S0214
@RC00200 DS    0H                                               03S0215
*             RFY                                               03S0215
*               INFMJFCB BASED(CJFCBP);                         03S0215
@RF00195 DS    0H                                               03S0216
*             IF JFCDEN=0 THEN      /* IF NO DENSITY WAS CODED THEN  */
         CLI   JFCDEN(CJFCBP),0                                 03S0216
         BNE   @RF00216                                         03S0216
*               JFCDEN=RJFCBP->JFCDEN;/* GET IT FROM SOURCE DD.      */
         MVC   JFCDEN(1,CJFCBP),JFCDEN(RJFCBP)                  03S0217
*             IF SCTVOLAF=NO THEN   /* IF NOT VOLUME REFERENCE       */
@RF00216 TM    SCTVOLAF(CSIOTP),B'00100000'                     03S0218
         BNZ   @RF00218                                         03S0218
*               JFCBFLSQ=RJFCBP->JFCBFLSQ;/* COPY FILE SEQUENCE.     */
         LH    @10,JFCBFLSQ(,RJFCBP)                            03S0219
         STH   @10,JFCBFLSQ(,CJFCBP)                            03S0219
*           END;                    /* END DD REFERENCE TAPE ONLY.   */
@RF00218 DS    0H                                               02S0221
*         IF RSIOTP->SCTUNLBD=YES THEN/* IF SOURCE DD IS UNLABELLED
*                                      THEN                          */
@RF00192 TM    SCTUNLBD(RSIOTP),B'00001000'                     02S0221
         BNO   @RF00221                                         02S0221
*           SCTUNLBD=YES;           /* MAKE CURRENT UNLABELLED       */
         OI    SCTUNLBD(CSIOTP),B'00001000'                     02S0222
*         IF HWDA=NO×JFCSUL=NO&JFCSL=NO THEN/* IF THIS ISN'T A SUL DA
*                                      DEVICE,                       */
@RF00221 LA    @10,DEVTYPE                                      02S0223
         TM    HWDA(@10),B'00100000'                            02S0223
         BZ    @RT00223                                         02S0223
         TM    JFCSUL(CJFCBP),B'00001010'                       02S0223
         BNZ   @RF00223                                         02S0223
@RT00223 DS    0H                                               02S0224
*           JFCBLTYP=RJFCBP->JFCBLTYP;/* COPY LABEL INFORMATION.     */
         MVC   JFCBLTYP(1,CJFCBP),JFCBLTYP(RJFCBP)              02S0224
*         IF RSIOTP->SIOTPRIV=YES THEN/* IF SOURCE DD IS PRIVATE THEN*/
@RF00223 TM    SIOTPRIV(RSIOTP),B'00100000'                     02S0225
         BNO   @RF00225                                         02S0225
*           SIOTPRIV=YES;           /* MAKE CURRENT PRIVATE.         */
         OI    SIOTPRIV(CSIOTP),B'00100000'                     02S0226
*         IF HWDA=YES&SCTRECVD=YES THEN/* COPY DSN'S DSCB TTR FOR DA */
@RF00225 LA    @10,DEVTYPE                                      02S0227
         TM    HWDA(@10),B'00100000'                            02S0227
         BNO   @RF00227                                         02S0227
         TM    SCTRECVD(CSIOTP),B'00000001'                     02S0227
         BNO   @RF00227                                         02S0227
*           JFCBDSCB=RJFCBP->JFCBDSCB;/* IF RECEIVED DATA SET.       */
         MVC   JFCBDSCB(3,CJFCBP),JFCBDSCB(RJFCBP)              02S0228
*         IF JFCBNVOL^=0 THEN       /* IF A SPECIFIC REQUEST @ZA15749*/
@RF00227 CLI   JFCBNVOL(CJFCBP),0                               02S0229
         BE    @RF00229                                         02S0229
*           DO;                     /* CLEAR MSVGP INFO      @ZA15749*/
*             JFCMSVGP=BLANKS;      /* CLEAR MSVG NAME FIELD @ZA15749*/
         MVC   JFCMSVGP(8,CJFCBP),BLANKS                        02S0231
*           END;                                                02S0232
*         JVOLPTR=ADDR(JFCBVOLS);   /* WHERE TO COPY VOLSERS.        */
@RF00229 LA    JVOLPTR,JFCBVOLS(,CJFCBP)                        02S0233
*         RFY                                                   02S0234
*           INFMJFCB BASED(RJFCBP);                             02S0234
*         RVOLPTR=ADDR(JFCBVOLS);   /* 1ST SOURCE VOLSER PTR.        */
         LA    RVOLPTR,JFCBVOLS(,RJFCBP)                        02S0235
*         RFY                                                   02S0236
*           INFMJFCB BASED(CJFCBP);                             02S0236
*         VOLSDONE=NO;              /* INDICATE VOLSERS NOT YET 02S0237
*                                      COPIED.                       */
         NI    VOLSDONE,B'01111111'                             02S0237
*                                                               03S0238
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - DDVLCOPY                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - DD REFERENCE VOLUME SERIAL COPY.              */
*/*                                                                  */
*/* FUNCTION - COPY VOLUME SERIAL NUMBERS FROM THE REFERENCED        */
*/*            JFCB(X) TO THE CURRENT JFCB(X).                       */
*/*            IF COPY IS FOR VOL=REF TO TAPE ONLY THE LAST VOLUME   */
*/*            SERIAL IS COPIED.                                     */
*/*            JFCBXGEN IS USED TO DETERMINE IF JFCBX(S) ARE         */
*/*            REQUIRED FOR NON VOL=REF TO TAPE SITUATIONS.          */
*/*                                                                  */
*/* ENTRY -                                                          */
*/*   PURPOSE - SEE FUNCTION.                                        */
*/*                                                                  */
*/*   INPUT DATA - CURRENT SIOT,JFCB ,JFCBX(S) AND REFERENCED SIOT,  */
*/*                JFCB,JFCBX(S).                                    */
*/*                                                                  */
*/* EXITS -                                                          */
*/*   CONDITIONS - N/A                                               */
*/*                                                                  */
*/*   OUTPUT DATA - UPDATED SIOT,UPDATED JFCB, UPDATED/CREATED JFCBX.*/
*/*                                                                  */
*/*   RETURN CODE - NONE.                                            */
*/*                                                                  */
*/********************************************************************/
*                                                               03S0238
*         DO WHILE(RVOLPTR->VSER^=BLANK/* COPY ALL VOLUME SERIALS.   */
*               &VOLSDONE=NO);                                  03S0238
         B     @DE00238                                         03S0238
@DL00238 DS    0H                                               03S0239
*           VSER=RVOLPTR->VSER;     /* COPY VOLSER TO CURRENT DD     */
         MVC   VSER(6,JVOLPTR),VSER(RVOLPTR)                    03S0239
*           SCTVOLCT=SCTVOLCT+1;    /* UPDATE THE NUMBER OF VOLSERS. */
         LA    @10,1                                            03S0240
         SLR   @09,@09                                          03S0240
         IC    @09,SCTVOLCT(,CSIOTP)                            03S0240
         ALR   @10,@09                                          03S0240
         STC   @10,SCTVOLCT(,CSIOTP)                            03S0240
*           IF SCTVOLCT//JFXVLNO-JFBVLNO=0 THEN/* SEE IF A JFCBX IS
*                                      THE                           */
         SLR   @09,@09                                          03S0241
         LR    @00,@10                                          03S0241
         SRDA  @00,32                                           03S0241
         D     @00,@CF00058                                     03S0241
         SL    @00,@CF00133                                     03S0241
         CR    @00,@09                                          03S0241
         BNE   @RF00241                                         03S0241
*             DO;                   /* SOURCE FOR NEXT VOLSER.       */
*               IF SCTVOLCT=JFBVLNO THEN/* NO. OF VOLUMES IN A  03S0243
*                                      JFCB,SO                       */
         CLI   SCTVOLCT(CSIOTP),5                               03S0243
         BNE   @RF00243                                         03S0243
*                 IF RSIOTP->SIOTJFX^=0 THEN/* IF JFCBX(S) EXIST THEN*/
         L     @10,SIOTJFX(,RSIOTP)                             03S0244
         CR    @10,@09                                          03S0244
         BE    @RF00244                                         03S0244
*                   RJFCBXP=RSIOTP->SIOTJFX;/* GET FIRST JFCBX.      */
         LR    RJFCBXP,@10                                      03S0245
*                 ELSE              /* NO JFCBX SO                   */
*                   VOLSDONE=YES;   /* INDICATE ALL VOLSERS COPIED.  */
         B     @RC00244                                         03S0246
@RF00244 OI    VOLSDONE,B'10000000'                             03S0246
*               ELSE                /* NOT FIRST JFCBX,GET A PTR NEXT*/
*                 IF RJFCBXP->JFCBXNXT^=0 THEN/* JFCBX ON CHAIN,IF
*                                      ANY.                          */
         B     @RC00243                                         03S0247
@RF00243 L     @10,JFCBXNXT(,RJFCBXP)                           03S0247
         LTR   @10,@10                                          03S0247
         BZ    @RF00247                                         03S0247
*                   RJFCBXP=RJFCBXP->JFCBXNXT;/* NEXT JFCBX ON THE
*                                      CHAIN.                        */
         LR    RJFCBXP,@10                                      03S0248
*                 ELSE              /* NO JFCBX SO                   */
*                   VOLSDONE=YES;   /* INDICATE ALL VOLSERS COPIED.  */
         B     @RC00247                                         03S0249
@RF00247 OI    VOLSDONE,B'10000000'                             03S0249
*               RVOLPTR=ADDR(RJFCBXP->JFCBXVOL);/* PTR TO SOURCE
*                                      VOLSER.                       */
@RC00247 DS    0H                                               03S0250
@RC00243 LA    RVOLPTR,JFCBXVOL(,RJFCBXP)                       03S0250
*               IF RVOLPTR->VSER=BLANK THEN/* IF 1ST VOLSER IS BLANK,*/
         CLC   VSER(6,RVOLPTR),BLANK                            03S0251
         BNE   @RF00251                                         03S0251
*                 VOLSDONE=YES;     /* DON'T CREATE A NEW JFCBX.     */
         OI    VOLSDONE,B'10000000'                             03S0252
*             END;                                              03S0253
*           ELSE                    /* IF NO NEW JFCBX THEN          */
*             RVOLPTR=RVOLPTR+VOLSERLN;/* UPDATE PTR IN THIS JFCBX.  */
         B     @RC00241                                         03S0254
@RF00241 AL    RVOLPTR,@CF00105                                 03S0254
*           IF(HWTAPE=NO×SCTVOLAF=NO)/* IF NOT VOLREF TO TAPE DATA
*                                      SET                           */
*               &VOLSDONE=NO THEN   /* AND ALL VOLSERS ARE NOT COPIED*/
@RC00241 LA    @10,DEVTYPE                                      03S0255
         TM    HWTAPE(@10),B'10000000'                          03S0255
         BZ    @GL00015                                         03S0255
         TM    SCTVOLAF(CSIOTP),B'00100000'                     03S0255
         BNZ   @RF00255                                         03S0255
@GL00015 TM    VOLSDONE,B'10000000'                             03S0255
         BNZ   @RF00255                                         03S0255
*             CALL JFCBXGEN;        /* GET NEXT VOLSER SLOT          */
         BAL   @14,JFCBXGEN                                     03S0256
*         END;                      /* END DD REFERENCE VOLSER COPY. */
@RF00255 DS    0H                                               03S0257
@DE00238 CLC   VSER(6,RVOLPTR),BLANK                            03S0257
         BE    @DC00238                                         03S0257
         TM    VOLSDONE,B'10000000'                             03S0257
         BZ    @DL00238                                         03S0257
@DC00238 DS    0H                                               03S0258
*         IF HWTAPE=YES&SCTVOLAF=YES&SCTVOLCT^=0 THEN/* IF COPY WAS
*                                      FOR A VOLREF TO TAPE THEN ONLY
*                                      LAST                          */
         LA    @10,DEVTYPE                                      02S0258
         TM    HWTAPE(@10),B'10000000'                          02S0258
         BNO   @RF00258                                         02S0258
         TM    SCTVOLAF(CSIOTP),B'00100000'                     02S0258
         BNO   @RF00258                                         02S0258
         CLI   SCTVOLCT(CSIOTP),0                               02S0258
         BE    @RF00258                                         02S0258
*           DO;                     /* SPECIFIC VOLSER IS USED.      */
*                                                               03S0260
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - TAPEVREF.                                         */
*/*                                                                  */
*/* DESCRIPTIVE NAME - DD REFERENCE/VOLUME REFERENCE FOR TAPE.       */
*/*                                                                  */
*/* FUNCTION - TO OBTAIN THE PROPER VOLUME SERIAL WHEN VOLUME        */
*/*            REFERENCE IS TO A TAPE VOLUME IN A PREVIOUS DD.       */
*/*            IF THE VOLUME REFERENCE IS TO A DD WITH A GENERATED   */
*/*            VOLUME SERIAL NUMBER AND THAT DD DID NOT GENERATE THAT*/
*/*            VOLUME SERIAL NUMBER THEN THE GENERATING DD IS READ.  */
*/*            THE LAST VOLUME SERIAL IS THEN OBTAINED FROM THE      */
*/*            ORIGINAL DD.                                          */
*/*                                                                  */
*/* ENTRY -                                                          */
*/*   PURPOSE - SEE FUNCTION.                                        */
*/*                                                                  */
*/*   INPUT DATA - VOLUME SERIAL(ORIGINAL JFCB SVA IN VIRTUAL VOLSER)*/
*/*                                                                  */
*/* EXITS -                                                          */
*/*  CONDITION - N/A                                                 */
*/*                                                                  */
*/*  OUTPUT DATA - JFCB CONTAINS LAST VOLUME SERIAL IN REFERENCED DD.*/
*/*                                                                  */
*/*  RETURN CODE - NONE.                                             */
*/*                                                                  */
*/********************************************************************/
*                                                               03S0260
*             SCTVOLCT=1;           /* 1 VOLSER WAS ACTUALLY COPIED. */
         MVI   SCTVOLCT(CSIOTP),X'01'                           03S0260
*             IF JFCBVOLS(1)=VIRTUAL/* IF THIS IS A GENERATED VOLSER */
*                 &JFCBVOLS(2:4)^=RSIOTP->SCTPJFCB THEN/* BUT NOT BY
*                                      THE                           */
         CLI   JFCBVOLS(CJFCBP),X'FF'                           03S0261
         BNE   @RF00261                                         03S0261
         CLC   JFCBVOLS+1(3,CJFCBP),SCTPJFCB(RSIOTP)            03S0261
         BE    @RF00261                                         03S0261
*               DO;                 /* SOURCE,THEN GET ORIGINAL DD   */
*                 SWACTLS=0;        /* CLEAR SWA FUNCTION MAP.       */
         SLR   @10,@10                                          03S0263
         STH   @10,SWACTLS                                      03S0263
*                 SWREAD=YES;       /* INDICATE READ.                */
         OI    SWREAD,B'00100000'                               03S0264
*                 IF HWLEPARP=0 THEN/* IF NO EPA EXISTS THEN         */
         L     @09,@PC00001+4                                   03S0265
         L     @09,HWDATAP(,@09)                                03S0265
         C     @10,HWLEPARP(,@09)                               03S0265
         BNE   @RF00265                                         03S0265
*                   SWNEW=YES;      /* TELL SWA INTERFACE TO CREATE
*                                      ONE                           */
         OI    SWNEW,B'00001000'                                03S0266
*                 ELSE              /* OTHERWISE TELL SWA INTERFACE  */
*                   SWMOD=YES;      /* TO USE EXISTING EPA.          */
         B     @RC00265                                         03S0267
@RF00265 OI    SWMOD,B'00000010'                                03S0267
*                 CALL IEFAB4F7(SWACTLS,HWLEPARP,0,/* READ           */
*                     ADDR(JFCBVOLS(2)),ADDR(ORGJFBP),0,1);/* ORIGIN
*                                      JFCB                          */
@RC00265 LA    @10,SWACTLS                                      03S0268
         ST    @10,@AL00001                                     03S0268
         L     @10,@PC00001+4                                   03S0268
         L     @10,HWDATAP(,@10)                                03S0268
         LA    @10,HWLEPARP(,@10)                               03S0268
         ST    @10,@AL00001+4                                   03S0268
         LA    @10,@CF00638                                     03S0268
         ST    @10,@AL00001+8                                   03S0268
         LA    @10,JFCBVOLS+1(,CJFCBP)                          03S0268
         ST    @10,@TF00001                                     03S0268
         LA    @10,@TF00001                                     03S0268
         ST    @10,@AL00001+12                                  03S0268
         LA    @10,ORGJFBP                                      03S0268
         ST    @10,@TF00002                                     03S0268
         LA    @10,@TF00002                                     03S0268
         ST    @10,@AL00001+16                                  03S0268
         LA    @10,@CF00638                                     03S0268
         ST    @10,@AL00001+20                                  03S0268
         LA    @10,@CF00070                                     03S0268
         ST    @10,@AL00001+24                                  03S0268
         L     @15,@CV00161                                     03S0268
         LA    @01,@AL00001                                     03S0268
         BALR  @14,@15                                          03S0268
*                 VOLSDONE=NO;      /* INDICATE VOLSERS NOT COPIED
*                                      YET.                          */
         NI    VOLSDONE,B'01111111'                             03S0269
*                 JVOLPTR=ADDR(ORGJFBP->JFCBVOLS);/* PTR TO 1ST 03S0270
*                                      VOLSER.                       */
         L     JVOLPTR,ORGJFBP                                  03S0270
         LA    JVOLPTR,JFCBVOLS(,JVOLPTR)                       03S0270
*                 DO VOLCOPY=1 TO JFBVLNO/* SCAN THE JFCB FOR        */
*                       WHILE(VOLSDONE=NO);/* FOR THE LAST VOLUME
*                                      SERIAL.                       */
         LA    VOLCOPY,1                                        03S0271
@DL00271 TM    VOLSDONE,B'10000000'                             03S0271
         BNZ   @DC00271                                         03S0271
*                   IF VSER^=BLANK THEN/* IF THIS VOLSER IS NOT BLANK*/
         CLC   VSER(6,JVOLPTR),BLANK                            03S0272
         BE    @RF00272                                         03S0272
*                     DO;           /* COPY IT TO CURRENT JFCB.      */
*                       JFCBVOLS(1:VOLSERLN)=VSER;/* COPY VOLUME
*                                      SERIAL.                       */
         MVC   JFCBVOLS(6,CJFCBP),VSER(JVOLPTR)                 03S0274
*                       JVOLPTR=JVOLPTR+VOLSERLN;/* POINT TO NEXT
*                                      VOLSER                        */
         AL    JVOLPTR,@CF00105                                 03S0275
*                     END;                                      03S0276
*                   ELSE            /* IF THIS VOLSER IS BLANK THEN
*                                      THE                           */
*                     VOLSDONE=YES; /* LAST VOLSER HAS BEEN COPIED.  */
         B     @RC00272                                         03S0277
@RF00272 OI    VOLSDONE,B'10000000'                             03S0277
*                 END;              /* END ORIGINAL JFCB SCAN.       */
@RC00272 AL    VOLCOPY,@CF00070                                 03S0278
         C     VOLCOPY,@CF00133                                 03S0278
         BNH   @DL00271                                         03S0278
@DC00271 DS    0H                                               03S0279
*                 JSVAP=ADDR(ORGJFBP->JFCBEXAD);/* SET SVA TO READ
*                                      FOR 1ST JFCBX.                */
         L     @10,ORGJFBP                                      03S0279
         LA    @10,JFCBEXAD(,@10)                               03S0279
         ST    @10,JSVAP                                        03S0279
*                 SWNEW=NO;         /* TURN OFF NEW EPA INDICATOR.   */
*                 SWMOD=YES;        /* USE EPA IN HWLEPARP.          */
         OI    SWMOD,B'00000010'                                03S0281
         NI    SWNEW,B'11110111'                                03S0281
*                 DO WHILE(VOLSDONE=NO/* SCAN IT FOR LAST VOLSER,    */
*                       &JSVA^=0);  /* IF A JFCBX SVA EXISTS.        */
         B     @DE00282                                         03S0282
@DL00282 DS    0H                                               03S0283
*                   CALL IEFAB4F7   /* READ A JFCBX.                 */
*                       (SWACTLS,HWLEPARP,0,JSVAP,ADDR(JFCBXPTR),0,1);
         LA    @10,SWACTLS                                      03S0283
         ST    @10,@AL00001                                     03S0283
         L     @10,@PC00001+4                                   03S0283
         L     @10,HWDATAP(,@10)                                03S0283
         LA    @10,HWLEPARP(,@10)                               03S0283
         ST    @10,@AL00001+4                                   03S0283
         LA    @10,@CF00638                                     03S0283
         ST    @10,@AL00001+8                                   03S0283
         LA    @10,JSVAP                                        03S0283
         ST    @10,@AL00001+12                                  03S0283
         LA    @10,JFCBXPTR                                     03S0283
         ST    @10,@TF00001                                     03S0283
         LA    @10,@TF00001                                     03S0283
         ST    @10,@AL00001+16                                  03S0283
         LA    @10,@CF00638                                     03S0283
         ST    @10,@AL00001+20                                  03S0283
         LA    @10,@CF00070                                     03S0283
         ST    @10,@AL00001+24                                  03S0283
         L     @15,@CV00161                                     03S0283
         LA    @01,@AL00001                                     03S0283
         BALR  @14,@15                                          03S0283
*                   DO VOLCOPY=1 TO JFXVLNO/* SCAN THE JFCBX         */
*                         WHILE(VOLSDONE=NO);/* FOR LAST VOLUME 03S0284
*                                      SERIAL.                       */
         LA    VOLCOPY,1                                        03S0284
@DL00284 TM    VOLSDONE,B'10000000'                             03S0284
         BNZ   @DC00284                                         03S0284
*                     IF JFCBXVOL(VOLCOPY)^=BLANK THEN/* VOLSER NOT
*                                      BLANK                         */
         L     @10,JFCBXPTR                                     03S0285
         LR    @09,VOLCOPY                                      03S0285
         MH    @09,@CH00105                                     03S0285
         ST    @09,@TF00001                                     03S0285
         ALR   @09,@10                                          03S0285
         BCTR  @09,0                                            03S0285
         BCTR  @09,0                                            03S0285
         CLC   JFCBXVOL-4(6,@09),BLANK                          03S0285
         BE    @RF00285                                         03S0285
*                       JFCBVOLS(1:VOLSERLN)=JFCBXVOL(VOLCOPY);/*
*                                      COPY IT                       */
         AL    @10,@TF00001                                     03S0286
         BCTR  @10,0                                            03S0286
         BCTR  @10,0                                            03S0286
         MVC   JFCBVOLS(6,CJFCBP),JFCBXVOL-4(@10)               03S0286
*                     ELSE          /* IF THIS VOLSER IS BLANK THEN
*                                      THE                           */
*                       VOLSDONE=YES;/* LAST VOLSER HAS BEEN COPIED. */
         B     @RC00285                                         03S0287
@RF00285 OI    VOLSDONE,B'10000000'                             03S0287
*                   END;            /* END JFCBX SCAN.               */
@RC00285 AL    VOLCOPY,@CF00070                                 03S0288
         C     VOLCOPY,@CF00058                                 03S0288
         BNH   @DL00284                                         03S0288
@DC00284 DS    0H                                               03S0289
*                   JSVAP=ADDR(JFCBXTTR);/* SET SVA TO READ NEXT
*                                      JFCBX.                        */
         L     @10,JFCBXPTR                                     03S0289
         ST    @10,JSVAP                                        03S0289
*                 END;              /* END LAST ORIGINAL VOLSER SCAN.*/
@DE00282 TM    VOLSDONE,B'10000000'                             03S0290
         BNZ   @DC00282                                         03S0290
         L     @10,JSVAP                                        03S0290
         BCTR  @10,0                                            03S0290
         L     @10,JSVA(,@10)                                   03S0290
         LA    @10,0(,@10)                                      03S0290
         LTR   @10,@10                                          03S0290
         BNZ   @DL00282                                         03S0290
@DC00282 DS    0H                                               03S0291
*               END;                                            03S0291
*           END;                    /* END FOR VOL=REF TO TAPE DATA
*                                      SET                           */
@RF00261 DS    0H                                               02S0293
*         JFCBNVOL=SCTVOLCT;        /* TELL DATA MGMNT NUMBER OF
*                                      VOLS.                         */
@RF00258 IC    @10,SCTVOLCT(,CSIOTP)                            02S0293
         STC   @10,JFCBNVOL(,CJFCBP)                            02S0293
*         IF SCTVREF=YES THEN       /* IF REF. SIOT WAS FOR          */
         TM    SCTVREF(CSIOTP),B'00010000'                      02S0294
         BNO   @RF00294                                         02S0294
*           DO;                     /* INTRA-STEP VOL=REF THEN       */
*             SCTVREF=NO;           /* TURN OFF VOLUME REFERENCE.    */
         NI    SCTVREF(CSIOTP),B'11101111'                      02S0296
*             SIOTVAFF=YES;         /* TURN ON VOLUME AFFINITY.      */
         OI    SIOTVAFF(CSIOTP),B'00000100'                     02S0297
*             IF RSIOTP->SIOTDMND=YES THEN/* IF REFERENCED REQUEST
*                                      IS,                           */
         TM    SIOTDMND(RSIOTP),B'10000000'                     02S0298
         BNO   @RF00298                                         02S0298
*               SIOTDMND=YES;       /* MAKE THIS A, DEMAND REQUEST.  */
         OI    SIOTDMND(CSIOTP),B'10000000'                     02S0299
*             IF RSIOTP->SIOTSSDS=YES/* REFERENCE IS SUBSYSTEM OR
*                                      DUMMY                         */
*                 ×RSIOTP->SCTDUMMY=YES THEN/* DATA SET INDICATE     */
@RF00298 TM    SIOTSSDS(RSIOTP),B'10000000'                     02S0300
         BO    @RT00300                                         02S0300
         TM    SCTDUMMY(RSIOTP),B'10000000'                     02S0300
         BNO   @RF00300                                         02S0300
@RT00300 DS    0H                                               02S0301
*               SIOTREFN=0;         /* NO VOLUME AFFINITY.           */
         SLR   @10,@10                                          02S0301
         STH   @10,SIOTREFN(,CSIOTP)                            02S0301
*             ELSE                  /* NOT SUB OR DUMMY              */
*               SIOTREFN=RSIOTP->SCTDDINO;/* PASS AFFINITY DD NO.    */
         B     @RC00300                                         02S0302
@RF00300 LH    @10,SCTDDINO(,RSIOTP)                            02S0302
         STH   @10,SIOTREFN(,CSIOTP)                            02S0302
*             IF RJFCBP->JFCBVOLS(1:6)=BLANK&/* REFD REQUEST IS 02S0303
*                                      NON-SPECIFIC          @ZA08546*/
*                 SCTSMOD=YES&      /* MOD SPECIFIED         @ZA08546*/
*                 (JFCBDSNM^=RJFCBP->JFCBDSNM×/* NOT THE SAME DATA
*                                      SET                   @ZA08546*/
*                 (JFCORGIS=YES&    /* ISAM REQUEST          @ZA08546*/
*                 JFCBELNM^=RJFCBP->JFCBELNM)) THEN/* DIFFERENT 02S0303
*                                      ELEMENTS OF ISAM DS   @ZA08546*/
@RC00300 CLC   JFCBVOLS(6,RJFCBP),BLANK                         02S0303
         BNE   @RF00303                                         02S0303
         TM    SCTSMOD(CSIOTP),B'00000010'                      02S0303
         BNO   @RF00303                                         02S0303
         CLC   JFCBDSNM(44,CJFCBP),JFCBDSNM(RJFCBP)             02S0303
         BNE   @RT00303                                         02S0303
         TM    JFCORGIS(CJFCBP),B'10000000'                     02S0303
         BNO   @RF00303                                         02S0303
         CLC   JFCBELNM(8,CJFCBP),JFCBELNM(RJFCBP)              02S0303
         BE    @RF00303                                         02S0303
@RT00303 DS    0H                                               02S0304
*               DO;                                             02S0304
*                 SCTSMOD=NO;       /* RESET DISP OF MOD     @ZA08546*/
*                 SCTSNEW=YES;      /* DISP IS NOW NEW       @ZA08546*/
         OI    SCTSNEW(CSIOTP),B'00000100'                      02S0306
         NI    SCTSMOD(CSIOTP),B'11111101'                      02S0306
*                 JFCMODNW=YES;     /* MOD CHANGED TO NEW    @ZA08546*/
         OI    JFCMODNW(CJFCBP),B'00010000'                     02S0307
*                 JFCDISP='11'B;    /* DISP OF NEW IN JFCB   @ZA08546*/
         OI    JFCDISP(CJFCBP),B'11000000'                      02S0308
*               END;                /* END CHANGE MOD        @ZA08546*/
*           END;                    /* END INTRA STEP VOL=REF.       */
@RF00303 DS    0H                                               02S0311
*         IF SCTVOLAF=YES&RSIOTP->SIOTSSDS=YES THEN/* IF THIS IS A   */
@RF00294 TM    SCTVOLAF(CSIOTP),B'00100000'                     02S0311
         BNO   @RF00311                                         02S0311
         TM    SIOTSSDS(RSIOTP),B'10000000'                     02S0311
         BNO   @RF00311                                         02S0311
*           DO;                     /* VOL=REF TO A SUBSYSTEM DATA
*                                      SET                           */
*             HWOVRDN=YES;          /* OVERRIDE RETRIEVED DEVICE TYPE*/
         L     @10,@PC00001                                     02S0313
         L     @09,HWCNTRLP(,@10)                               02S0313
         OI    HWOVRDN(@09),B'00100000'                         02S0313
*             CALL IEFAB470         /* CALL IEFAB470                 */
*                 (HWCNTRLP,HWDATAP,HWRTNP,HWIOSLTP,ALLDA);     02S0314
         ST    @10,@AL00001                                     02S0314
         L     @10,@PC00001+4                                   02S0314
         ST    @10,@AL00001+4                                   02S0314
         L     @09,@PC00001+8                                   02S0314
         ST    @09,@AL00001+8                                   02S0314
         L     @10,HWDATAP(,@10)                                02S0314
         LA    @10,HWIOSLTP(,@10)                               02S0314
         ST    @10,@AL00001+12                                  02S0314
         LA    @10,ALLDA                                        02S0314
         ST    @10,@AL00001+16                                  02S0314
         L     @15,@CV00159                                     02S0314
         LA    @01,@AL00001                                     02S0314
         BALR  @14,@15                                          02S0314
*           END;                    /* WITH ESOTERIC FOR ALL DA 02S0315
*                                      DEVICES.                      */
*       END;                        /* END DD REFERENCE.             */
@RF00311 DS    0H                                               01S0317
*   IF HWRTCD=0 THEN                /* IF RETURN CODE = 0            */
@RF00180 DS    0H                                               01S0317
@RC00119 L     @10,@PC00001+8                                   01S0317
         L     @10,HWRTNP(,@10)                                 01S0317
         LH    @10,HWRTCD(,@10)                                 01S0317
         LTR   @10,@10                                          01S0317
         BNZ   @RF00317                                         01S0317
*     DO;                                                       01S0318
*                                                               02S0319
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - VIOCOMP                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - VIRTUAL I/O SIOT COMPLETION.                  */
*/*                                                                  */
*/* FUNCTION - MARK THE REQUEST, IF IT IS NOT A DD DUMMY,            */
*/*            VIO(VAM) FOR SUBSEQUENT DADSM.                        */
*/*            A REQUEST IS MARKED VIO IF THE UNIT CODED IS VIO      */
*/*            (VAM) ELIGIBLE, DISP=NEW, NON-SPECIFIC (NO            */
*/*            VOLUME SERIALS CODED), NON-ISAM AND HAS A SYSTEM      */
*/*            GENERATED NAME (&DSN OR NO DSNAME).                   */
*/*            A REQUEST MAY ALSO BE VIO IF IT HAS A GENERATED       */
*/*            DSNAME AND UNIT=AFF TO A VIO REQUEST                  */
*/*            OR                                                    */
*/*            HAS A STATUS OF NEW AND VOL=REF TO A VIO REQUEST      */
*/*            OR                                                    */
*/*            HAS A STATUS OF OLD AND VOL=REF TO A VIO REQUEST WITH */
*/*            THE SAME DATA SET NAME                                */
*/*            OR                                                    */
*/*            IS A RECEIVED VIO DATA SET.                           */
*/*            IF THIS REQUEST IS NOT VIO ELIGIBLE           @ZA05349*/
*/*            AND HAS VOL=REF TO A VIO ELIGIBLE DD,         @ZA05349*/
*/*            VOL=REF IS IGNORED (SIOTREFN=0).              @ZA05349*/
*/*            IF THIS REQUEST IS NOT VIO ELIGIBLE AND       @ZA05349*/
*/*            HAS UNIT AFFINITY TO A VIO ELIGIBLE DD,       @ZA05349*/
*/*            UNIT AFFINITY IS IGNORED (SCTUNAFF IS         @ZA05349*/
*/*            SET OFF AND SIOTUNAF=0).                      @ZA05349*/
*/*                                                                  */
*/* ENTRY - INCLUDED SEGMENT.                                        */
*/*   PURPOSE - SEE FUNCTION.                                        */
*/*                                                                  */
*/*   INPUT DATA -                                                   */
*/*           REFERENCED SIOT INDICATOR.                             */
*/*           VIO BIT IN REFERENCED SIOT.                            */
*/*           CURRENT AND REFERENCED DATA SET NAMES.                 */
*/*           DATA SET STATUS.                                       */
*/*                                                                  */
*/* EXIT -                                                           */
*/*   CONDITION - ALL.                                               */
*/*                                                                  */
*/*   OUPUT DATA -                                                   */
*/*              VIO BIT IN CURRENT SIOT.                            */
*/*              VOLUME AFFINITY BIT AND NUMBER IN CURRENT SIOT.     */
*/*                                                                  */
*/*   RETURN CODE - NONE                                             */
*/********************************************************************/
*                                                               02S0319
*       IF SIOTGDSN=YES             /* SYSTEM GENERATED DSNAME,      */
*           &SCTDUMMY=NO            /* NOT DD DUMMY AND,     @YM08288*/
*           &JFCORGIS=NO THEN       /* NOT ISAM. INITIAL VIO         */
         TM    SIOTGDSN(CSIOTP),B'00010000'                     02S0319
         BNO   @RF00319                                         02S0319
         TM    SCTDUMMY(CSIOTP),B'10000000'                     02S0319
         BNZ   @RF00319                                         02S0319
         TM    JFCORGIS(CJFCBP),B'10000000'                     02S0319
         BNZ   @RF00319                                         02S0319
*         DO;                       /* REQUIREMENTS MET.             */
*           IF HWRESIOT=YES THEN    /* IF THERE IS A REF. SIOT       */
         L     @10,@PC00001                                     02S0321
         L     @10,HWCNTRLP(,@10)                               02S0321
         TM    HWRESIOT(@10),B'00001000'                        02S0321
         BNO   @RF00321                                         02S0321
*             DO;                   /* AND THE REF. REQUEST IS VIO,  */
*               IF RSIOTP->SIOVAMDS=YES THEN/* MAKE THIS A VIO DATA
*                                      SET IF                        */
         TM    SIOVAMDS(RSIOTP),B'00100000'                     02S0323
         BNO   @RF00323                                         02S0323
*                 IF SCTSNEW=NO THEN/* IT IS OLD/MOD AND EITHER      */
         TM    SCTSNEW(CSIOTP),B'00000100'                      02S0324
         BNZ   @RF00324                                         02S0324
*                   DO;             /* VOL=REF TO A DD WITH THE      */
*                     IF JFCBDSNM=RJFCBP->JFCBDSNM THEN/* SAME DATA
*                                      SET NAME OR                   */
         CLC   JFCBDSNM(44,CJFCBP),JFCBDSNM(RJFCBP)             02S0326
         BNE   @RF00326                                         02S0326
*                       SIOVAMDS=YES;/* A RECEIVED VIO DATA SET.     */
         OI    SIOVAMDS(CSIOTP),B'00100000'                     02S0327
*                     ELSE          /* OLD DSN WITH VOL=REF TO DIFF. */
*                       SIOTREFN=0; /* DATA SET, TURN OFF VOL-AFF    */
         B     @RC00326                                         02S0328
@RF00326 SLR   @10,@10                                          02S0328
         STH   @10,SIOTREFN(,CSIOTP)                            02S0328
*                   END;                                        02S0329
*                 ELSE              /* ITS A NEW DATA SET WITH       */
*                   DO;             /* VOL=REF TO VIO, MAKE THIS VIO */
         B     @RC00324                                         02S0330
@RF00324 DS    0H                                               02S0331
*                     SIOVAMDS=YES; /* MARK REQUEST VIO.             */
         OI    SIOVAMDS(CSIOTP),B'00100000'                     02S0331
*                     SIOTREFN=0;   /* DATA SETS ARE DIFF. SO VIO    */
         SLR   @10,@10                                          02S0332
         STH   @10,SIOTREFN(,CSIOTP)                            02S0332
*                   END;            /* VOL-AFF NOT POSSIBLE.         */
*             END;                                              02S0334
*           ELSE                    /* NO REFERENCED DD AND THE      */
*             IF HWVAME=YES&        /* UNIT CONVERTED IS VIO    02S0335
*                                      ELIBIBLE,                     */
*                 HWDSNCAT=NO       /* NO RETRIEVED SOURCE           */
*                 &SCTVOLCT=0       /* NO VOLUMES SPECIFIED,         */
*                 &SCTSNEW=YES THEN /* NEW DATA SET,                 */
         B     @RC00321                                         02S0335
@RF00321 L     @10,@PC00001                                     02S0335
         L     @10,HWCNTRLP(,@10)                               02S0335
         TM    HWVAME(@10),B'01000000'                          02S0335
         BNO   @RF00335                                         02S0335
         TM    HWDSNCAT(@10),B'00000100'                        02S0335
         BNZ   @RF00335                                         02S0335
         CLI   SCTVOLCT(CSIOTP),0                               02S0335
         BNE   @RF00335                                         02S0335
         TM    SCTSNEW(CSIOTP),B'00000100'                      02S0335
         BNO   @RF00335                                         02S0335
*               SIOVAMDS=YES;       /* SO MARK REQUEST VIO.          */
         OI    SIOVAMDS(CSIOTP),B'00100000'                     02S0336
*           IF SIOVAMDS=YES THEN    /* DATA SET IS VIO.              */
@RF00335 DS    0H                                               02S0337
@RC00321 TM    SIOVAMDS(CSIOTP),B'00100000'                     02S0337
         BNO   @RF00337                                         02S0337
*             DO;                                               02S0338
*               JFCVRDS=YES;        /* TELL DATA MANAGEMENT ITS VIO. */
         OI    JFCVRDS(CJFCBP),B'00000100'                      02S0339
*               SCTVOLCT=1;         /* UNALLOCATION REQUIRES 1 VOLUME*/
         MVI   SCTVOLCT(CSIOTP),X'01'                           02S0340
*               JFCBNVOL=1;         /* FOR SCRATCH AND MESSAGES.     */
         MVI   JFCBNVOL(CJFCBP),X'01'                           02S0341
*             END;                                              02S0342
*         END;                                                  02S0343
@RF00337 DS    0H                                               02S0344
*       IF(SIOTGDSN=NO              /* NOT GEN'D DSN OR      @ZA05349*/
*           ×JFCORGIS=YES)          /* ISAM AND              @ZA05349*/
*           &HWRESIOT=YES           /* THERE IS REF. SIOT    @ZA05349*/
*           &RSIOTP->SIOVAMDS=YES THEN/* AND IT IS VIO, THEN @ZA05349*/
@RF00319 TM    SIOTGDSN(CSIOTP),B'00010000'                     02S0344
         BZ    @GL00033                                         02S0344
         TM    JFCORGIS(CJFCBP),B'10000000'                     02S0344
         BNO   @RF00344                                         02S0344
@GL00033 L     @10,@PC00001                                     02S0344
         L     @10,HWCNTRLP(,@10)                               02S0344
         TM    HWRESIOT(@10),B'00001000'                        02S0344
         BNO   @RF00344                                         02S0344
         TM    SIOVAMDS(RSIOTP),B'00100000'                     02S0344
         BNO   @RF00344                                         02S0344
*         SIOTREFN=0;               /* IGNORE VOL REF        @ZA05349*/
         SLR   @10,@10                                          02S0345
         STH   @10,SIOTREFN(,CSIOTP)                            02S0345
*       IF SCTUNAFF=YES&HWVAME=YES  /* THIS IS UNIT=AFF TO A VIO
*                                      REQUEST                       */
*           &SIOVAMDS=NO THEN       /* BUT THIS IS NOT A VIO DATASET */
@RF00344 TM    SCTUNAFF(CSIOTP),B'00000010'                     02S0346
         BNO   @RF00346                                         02S0346
         L     @10,@PC00001                                     02S0346
         L     @10,HWCNTRLP(,@10)                               02S0346
         TM    HWVAME(@10),B'01000000'                          02S0346
         BNO   @RF00346                                         02S0346
         TM    SIOVAMDS(CSIOTP),B'00100000'                     02S0346
         BNZ   @RF00346                                         02S0346
*         DO;                       /* SO TURN OFF UNIT=AFF.         */
*           SCTUNAFF=NO;            /* TURN OFF AFF INDICATOR.       */
         NI    SCTUNAFF(CSIOTP),B'11111101'                     02S0348
*           SIOTUNAF=0;             /* ZERO DD NUMBER THAT THIS DD
*                                      HAD                           */
         SLR   @10,@10                                          02S0349
         STH   @10,SIOTUNAF(,CSIOTP)                            02S0349
*         END;                      /* AFFINITY TO.                  */
*       HWVAME=NO;                  /* NEXT DD DOESN'T LOOK VIO 02S0351
*                                      ELIGIBLE.                     */
@RF00346 L     @10,@PC00001                                     02S0351
         L     @10,HWCNTRLP(,@10)                               02S0351
         NI    HWVAME(@10),B'10111111'                          02S0351
*                                                               02S0352
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - UNOVERID                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - UNIT OVERRIDE DETERMINATION.                  */
*/*                                                                  */
*/*            UPDATE HSKPWA CONTROL INDICATOR IF UNIT IS OVERRIDDEN.*/
*/*              UNIT OVERRIDE IS THAT SITUATION WHERE NO EXPLICIT   */
*/*              VOLUME INFORMATION IS CODED AND THE UNIT CODED IS A */
*/*              SUBSET OF THE UNIT INFORMATION RETRIEVED FROM THE   */
*/*              PDI,INTER-STEP VOL=REF OR CATALOG.                  */
*/*                                                                  */
*/* ENTRY - UNOVERID                                                 */
*/*   PURPOSE - SEE FUNCTION.                                        */
*/*                                                                  */
*/*   INPUT DATA - POINTERS TO THE FOLLOWING                         */
*/*                  HSKPWA CONTROLS                                 */
*/*                  CRI                                             */
*/*                  REFERENCED SIOT                                 */
*/*                                                                  */
*/* EXITS -  TO CALLER                                               */
*/*   CONDITIONS - UNDER ALL CONDITIONS                              */
*/*                                                                  */
*/*   OUTPUT DATA - HSKPWA CONTROLS UPDATED                          */
*/*                                                                  */
*/*   RETURN CODES - NONE                                            */
*/*                                                                  */
*/********************************************************************/
*                                                               02S0352
*       IF HWOVCAND=YES&HWRTCD=0 THEN/* UNIT CODED IS OVERRIDE SEE   */
         TM    HWOVCAND(@10),B'00000010'                        02S0352
         BNO   @RF00352                                         02S0352
         L     @09,@PC00001+8                                   02S0352
         L     @09,HWRTNP(,@09)                                 02S0352
         LH    @09,HWRTCD(,@09)                                 02S0352
         LTR   @09,@09                                          02S0352
         BNZ   @RF00352                                         02S0352
*         DO;                       /* IF ANYTHING TO OVERRIDE.      */
*           HWOVCAND=NO;            /* TURN OFF OVERRIDE INDICATOR   */
         NI    HWOVCAND(@10),B'11111101'                        02S0354
*           IF SIOTVAFF=NO          /* CAN'T BE INTRA-STEP VOLREF    */
*               &(HWDSNCAT=YES×HWRESIOT=YES×HWVUREC=YES) THEN/* BUT
*                                      NEED A RETRIEVED              */
         TM    SIOTVAFF(CSIOTP),B'00000100'                     02S0355
         BNZ   @RF00355                                         02S0355
         TM    HWDSNCAT(@10),B'01001100'                        02S0355
         BZ    @RF00355                                         02S0355
*             DO;                   /* SOURCE FOR UNIT OVERRIDE.     */
*               RFY                                             02S0357
*                 INDMSIOT BASED(RSIOTP);/* BASE REFERENCED SIOT.    */
*               DEVPTR=ADDR(HWDEVTYP);/* POINTER TO CODED DEVICE
*                                      TYPE.                         */
         L     @09,@PC00001+4                                   02S0358
         L     @09,HWDATAP(,@09)                                02S0358
         L     DEVPTR,HWUCLPTR(,@09)                            02S0358
         LA    DEVPTR,HWDEVTYP(,DEVPTR)                         02S0358
*               IF HWRESIOT=YES     /* IF SOURCE IS REF. SIOT,IT     */
*                   &SIOVAMDS=NO&SCTDUMMY=NO/* CAN'T BE A VIO,DUMMY
*                                      OR                            */
*                   &SIOTSSDS=NO    /* SUBSYSTEM DATA SET-OR-        */
*                   ×(HWDSNCAT=YES×HWVUREC=YES) THEN/* SOURCE CAN BE
*                                      CRI,                          */
         TM    HWRESIOT(@10),B'00001000'                        02S0359
         BNO   @GL00039                                         02S0359
         TM    SIOVAMDS(RSIOTP),B'00100000'                     02S0359
         BNZ   @GL00039                                         02S0359
         TM    SCTDUMMY(RSIOTP),B'10000000'                     02S0359
         BNZ   @GL00039                                         02S0359
         TM    SIOTSSDS(RSIOTP),B'10000000'                     02S0359
         BZ    @RT00359                                         02S0359
@GL00039 L     @10,@PC00001                                     02S0359
         L     @10,HWCNTRLP(,@10)                               02S0359
         TM    HWDSNCAT(@10),B'01000100'                        02S0359
         BZ    @RF00359                                         02S0359
@RT00359 DS    0H                                               02S0360
*                 IF HWTAPE=YES THEN/* FOR OVERRIDE REQUIREMENTS.    */
         LA    @10,DEVTYPE                                      02S0360
         TM    HWTAPE(@10),B'10000000'                          02S0360
         BNO   @RF00360                                         02S0360
*                   DO;             /* IF TAPE CHECK ENTIRE DEVTYPE. */
*                     IF HWDEVTYP=DEVTYPE THEN/* DEVICE TYPES ARE    */
         L     @10,@PC00001+4                                   02S0362
         L     @10,HWDATAP(,@10)                                02S0362
         L     @10,HWUCLPTR(,@10)                               02S0362
         CLC   HWDEVTYP(4,@10),DEVTYPE                          02S0362
         BNE   @RF00362                                         02S0362
*                       HWOVRDN=YES;/* THE SAME SO OVERRIDE.         */
         L     @10,@PC00001                                     02S0363
         L     @10,HWCNTRLP(,@10)                               02S0363
         OI    HWOVRDN(@10),B'00100000'                         02S0363
*                     ELSE          /* NOT THE SAME,IS THE DEVICE    */
*                       DO;         /* A GENERIC SUBSET OF RETRIEVED.*/
         B     @RC00362                                         02S0364
@RF00362 DS    0H                                               02S0365
*                         EDTPTR=ADDR(EDTTAB);/* GET EDT POINTER.    */
         L     EDTPTR,@CA00157                                  02S0365
*                         SCANEND=NO;/* SCAN EDT FOR RETRIEVED  02S0366
*                                      LUVALUE                       */
         NI    SCANEND,B'01111111'                              02S0366
*                         LUVPTR=EDTLUVSP+LENGTH(LUVHDR);/* BEGINNING
*                                      OF LOOK-UP-ENTRIES.           */
         LA    LUVPTR,8                                         02S0367
         AL    LUVPTR,EDTLUVSP(,EDTPTR)                         02S0367
*                         DO LUVCTR=1 TO LUVENTNO WHILE(SCANEND=NO);
         LA    LUVCTR,1                                         02S0368
         B     @DE00368                                         02S0368
@DL00368 TM    SCANEND,B'10000000'                              02S0368
         BNZ   @DC00368                                         02S0368
*                                   /* SCAN EDT FOR RETRIEVED        */
*                           IF DEVTYPE=LUVALUE THEN/* LOOK-UP-VALUE.
*                                      FOUND,SEARCH                  */
         CLC   DEVTYPE(4),LUVALUE(LUVPTR)                       02S0369
         BNE   @RF00369                                         02S0369
*                             DO;   /* LUV'S GENERIC'S FOR ONE THAT
*                                      MATCHES DEVTYPE CODED.        */
*                               SCANEND=YES;/* LUV FOUND, EDT SCAN
*                                      ENDED.                        */
         OI    SCANEND,B'10000000'                              02S0371
*                               GENPTR=LUVGENP;/* PTR TO 1ST GENERIC.*/
         L     GENPTR,LUVGENP(,LUVPTR)                          02S0372
*                               DO GENCTR=1 TO LUVGENNO WHILE(HWOVRDN=
*                                     NO);                      02S0373
         LA    GENCTR,1                                         02S0373
         B     @DE00373                                         02S0373
@DL00373 L     @10,@PC00001                                     02S0373
         L     @10,HWCNTRLP(,@10)                               02S0373
         TM    HWOVRDN(@10),B'00100000'                         02S0373
         BNZ   @DC00373                                         02S0373
*                                 IF GENDEVT=HWDEVTYP THEN/* IF THE
*                                      GENERIC IS THE SAME AS        */
         L     @15,@PC00001+4                                   02S0374
         L     @01,HWDATAP(,@15)                                02S0374
         L     @01,HWUCLPTR(,@01)                               02S0374
         CLC   GENDEVT(4,GENPTR),HWDEVTYP(@01)                  02S0374
         BNE   @RF00374                                         02S0374
*                                   HWOVRDN=YES;/* THE ONE CODED THEN
*                                      OVERRIDE.                     */
         OI    HWOVRDN(@10),B'00100000'                         02S0375
*                                 ELSE/* GENERICS DON'T MATCH.       */
*                                   GENPTR=GENPTR+GENENTLN;/* GET
*                                      PTR. TO NEXT GENERIC ENTRY    */
         B     @RC00374                                         02S0376
@RF00374 L     @10,EDTGENSP(,EDTPTR)                            02S0376
         AL    GENPTR,GENENTLN(,@10)                            02S0376
*                               END;                            02S0377
@RC00374 AL    GENCTR,@CF00070                                  02S0377
@DE00373 C     GENCTR,LUVGENNO(,LUVPTR)                         02S0377
         BNH   @DL00373                                         02S0377
@DC00373 DS    0H                                               02S0378
*                             END;                              02S0378
*                           LUVPTR=LUVPTR+LUVENTLN;/* GET NEXT  02S0379
*                                      LOOK-UP-SECTION.              */
@RF00369 L     @10,EDTLUVSP(,EDTPTR)                            02S0379
         AL    LUVPTR,LUVENTLN(,@10)                            02S0379
*                         END;                                  02S0380
         AL    LUVCTR,@CF00070                                  02S0380
@DE00368 L     @10,EDTLUVSP(,EDTPTR)                            02S0380
         C     LUVCTR,LUVENTNO(,@10)                            02S0380
         BNH   @DL00368                                         02S0380
@DC00368 DS    0H                                               02S0381
*                       END;                                    02S0381
*                   END;                                        02S0382
*                 ELSE              /* NON TAPE.                     */
*                   IF HWCTBYT=DEVPTR->HWCTBYT THEN/* NON-TAPE,CLASS */
         B     @RC00360                                         02S0383
@RF00360 LA    @10,DEVTYPE                                      02S0383
         CLC   HWCTBYT(2,@10),HWCTBYT(DEVPTR)                   02S0383
         BNE   @RF00383                                         02S0383
*                     HWOVRDN=YES;  /* AND TYPE DETERMINE OVERRIDE.  */
         L     @10,@PC00001                                     02S0384
         L     @10,HWCNTRLP(,@10)                               02S0384
         OI    HWOVRDN(@10),B'00100000'                         02S0384
*             END;                                              02S0385
@RF00383 DS    0H                                               02S0385
@RC00360 DS    0H                                               02S0385
@RF00359 DS    0H                                               02S0386
*         END;                                                  02S0386
@RF00355 DS    0H                                               02S0387
*       RFY                                                     02S0387
*         INDMSIOT BASED(CSIOTP);   /* BASE CURRENT SIOT.            */
@RF00352 DS    0H                                               02S0388
*                                                               02S0388
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - NOREFCMP                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - NON-REFERENCE VOLUME/UNIT  COMPLETION         */
*/*                                                                  */
*/* FUNCTION - COMPLETE THE DD'S UNIT PARAMETER BY COPYING THE       */
*/*            DEVICE TYPE INTO THE CURRENT SIOT USING EITHER THE    */
*/*            DEVICE TYPE RETRIEVED FROM THE CRI OR REFERENCED DD   */
*/*            OR                                                    */
*/*            THE UNIT CONVERSION LIST IF THERE IS NO               */
*/*            REFERENCED SOURCE OR THE REFERENCED SOURCE HAS        */
*/*            BEEN OVERRIDDEN.                                      */
*/*                                                                  */
*/*            IF MSS SELECTED VOLUME SERIALS FOR THIS       @G24LPSJ*/
*/*            REQUEST, THEY ARE INSERTED IN THE JFCB        @G24LPSJ*/
*/*            AND/OR JFCBX.                                 @G24LPSJ*/
*/*                                                                  */
*/* ENTRY -                                                          */
*/*   PURPOSE - MOVE UNIT INFO TO DD LIST,                           */
*/*             COPY MSS VOLUME SERIALS IF SPECIFIED AND     @G24LPSJ*/
*/*             INSURE UNIT HAS BEEN PROPERLY INITIALIZED.           */
*/*                                                                  */
*/*   INPUT DATA - CURRENT SIOT,RETRIEVED DEVICE TYPE AND UNIT       */
*/*                CONVERSION LIST.                                  */
*/*                                                                  */
*/* EXITS -                                                          */
*/*   CONDITION-AFTER COPYING UNIT INFO                              */
*/*                                                                  */
*/*   OUTPUT DATA- UPDATED SIOT                                      */
*/*                                                                  */
*/*   RETURN CODE -0-NORMAL, 4-UNIT INCORRECTLY SPECIFIED.           */
*/*                8-REASON CODE FOR INVALID UNIT SPECIFACATION.     */
*/*                                                                  */
*/********************************************************************/
*                                                               02S0388
*       IF(HWRESIOT=YES×HWDSNCAT=YES/* IF VOLUME SERIALS WERE        */
*           ×HWVUREC=YES)           /* OBTAINED FROM CATALOG OR 02S0388
*                                      PREVIOUS                      */
*           &HWOVRDN=NO THEN        /* SIOT THEN GET DEVTYPE FROM
*                                      SAME.                         */
         L     @10,@PC00001                                     02S0388
         L     @10,HWCNTRLP(,@10)                               02S0388
         TM    HWRESIOT(@10),B'01001100'                        02S0388
         BZ    @RF00388                                         02S0388
         TM    HWOVRDN(@10),B'00100000'                         02S0388
         BNZ   @RF00388                                         02S0388
*         DO;                                                   02S0389
*           IF HWRESIOT=YES&SIOTVAFF=NO/* REFERENCED SIOT FROM       */
*               &SIOVAMDS=NO THEN   /* PREVIOUS STEP AND NOT VIO,    */
         TM    HWRESIOT(@10),B'00001000'                        02S0390
         BNO   @RF00390                                         02S0390
         TM    SIOTVAFF(CSIOTP),B'00000100'                     02S0390
         BNZ   @RF00390                                         02S0390
         TM    SIOVAMDS(CSIOTP),B'00100000'                     02S0390
         BNZ   @RF00390                                         02S0390
*             ZEROUCB=0;            /* RESET THE UCB PTR (RTVDUNIT)  */
         SLR   @10,@10                                          02S0391
         ST    @10,ZEROUCB                                      02S0391
*           SCTUTYPE=RTVDUNIT;      /* DEVTYP FROM CRI OR RETRIEVED
*                                      DD.                           */
@RF00390 MVC   SCTUTYPE(8,CSIOTP),RTVDUNIT                      02S0392
*           HWAVSRCH=NO;            /* TURN OFF SEARCH DONE  @G24LPSJ*/
         L     @10,@PC00001                                     02S0393
         L     @10,HWCNTRLP(,@10)                               02S0393
         NI    HWAVSRCH(@10),B'10111111'                        02S0393
*           HWAVUNIT=NO;            /* INDICATE NO VIRT UNIT @G24LPSJ*/
         NI    HWAVUNIT(@10),B'11111110'                        02S0394
*         END;                                                  02S0395
*       ELSE                        /* UNIT NOT COMPLETED VIA   02S0396
*                                      REFERENCE                     */
*         IF HWOVRDN=YES×           /* IF DEVTYPE WAS OVERRIDDEN OR
*                                      NO                            */
*             (HWDSNCAT=NO&HWRESIOT=NO&HWVUREC=NO)/* REFERENCE SOURCE*/
*             &(HWEDT=YES×HWUCB=YES) THEN/* AND UNIT PARM. CONVERTED */
         B     @RC00388                                         02S0396
@RF00388 L     @10,@PC00001                                     02S0396
         L     @10,HWCNTRLP(,@10)                               02S0396
         TM    HWOVRDN(@10),B'00100000'                         02S0396
         BO    @RT00396                                         02S0396
         TM    HWDSNCAT(@10),B'01001100'                        02S0396
         BNZ   @RF00396                                         02S0396
         TM    HWEDT(@10),B'10000000'                           02S0396
         BO    @RT00396                                         02S0396
         TM    HWUCB(@10),B'00000001'                           02S0396
         BNO   @RF00396                                         02S0396
@RT00396 DS    0H                                               02S0397
*           DO;                     /* THEN USE EDT OR UCB DEVTYPE.  */
*             SCTUTYPE=SCTUTYPE&&SCTUTYPE;/* 0 PARTS NOT FILLED IN.  */
         XC    SCTUTYPE(8,CSIOTP),SCTUTYPE(CSIOTP)              02S0398
*             IF HWEDT=YES THEN     /* USE THE LOOK-UP-VALUE FOR
*                                      UNITS                         */
         L     @10,@PC00001                                     02S0399
         L     @10,HWCNTRLP(,@10)                               02S0399
         TM    HWEDT(@10),B'10000000'                           02S0399
         BNO   @RF00399                                         02S0399
*               SIOTDEVT=HWEDTLUV;  /* CONVERTED FROM THE EDT.       */
         L     @10,@PC00001+4                                   02S0400
         L     @10,HWDATAP(,@10)                                02S0400
         L     @10,HWUCLPTR(,@10)                               02S0400
         L     @10,HWEDTLUV(,@10)                               02S0400
         ST    @10,SIOTDEVT(,CSIOTP)                            02S0400
*             ELSE                  /* OTHERWISE USE THE DEVICE TYPE */
*               DO;                 /* FROM A UCB AND PTR TO THAT
*                                      UCB.                          */
         B     @RC00399                                         02S0401
@RF00399 DS    0H                                               02S0402
*                 SIOTDEVT=HWDEVTYP;/* DEVICE TYPE FROM UCB.         */
         L     @10,@PC00001+4                                   02S0402
         L     @10,HWDATAP(,@10)                                02S0402
         L     @10,HWUCLPTR(,@10)                               02S0402
         MVC   SIOTDEVT(4,CSIOTP),HWDEVTYP(@10)                 02S0402
*                 SIOUCBAD=HWUCBP;  /* PTR TO UCB USED FOR CONVERSION*/
         MVC   SIOUCBAD(3,CSIOTP),HWUCBP(@10)                   02S0403
*                 SIOTDMND=YES;     /* DEMAND REQUEST. UNIT=SPECIFIC
*                                      DEVICE ADDRESS OR UNIT=AFF TO
*                                      A DEMAND REQUEST.             */
         OI    SIOTDMND(CSIOTP),B'10000000'                     02S0404
*               END;                                            02S0405
*             IF HWVLSELF=YES THEN  /* IF MSS SELECTED       @G24LPSJ*/
@RC00399 L     @10,@PC00001                                     02S0406
         L     @10,HWCNTRLP(,@10)                               02S0406
         TM    HWVLSELF(@10),B'10000000'                        02S0406
         BNO   @RF00406                                         02S0406
*               DO;                 /* VOLUMES THEN DO       @G24LPSJ*/
*                 JFCMSVGP=BLANKS;  /* CLEAR MSVG NAME FIELD @G24LPSJ*/
         MVC   JFCMSVGP(8,CJFCBP),BLANKS                        02S0408
*                 JVOLPTR=ADDR(JFCBVOLS)-VOLSERLN;/* SET POINTER TO
*                                      VOL SER SLOT          @G24LPSJ*/
         LA    JVOLPTR,JFCBVOLS(,CJFCBP)                        02S0409
         SL    JVOLPTR,@CF00105                                 02S0409
*                 JFCBNVOL=HWVLSLCT;/* INSERT VOL SER CNT    @G24LPSJ*/
         L     @10,@PC00001+4                                   02S0410
         L     @10,HWDATAP(,@10)                                02S0410
         L     @10,HWVLSELP(,@10)                               02S0410
         LH    @10,HWVLSLCT(,@10)                               02S0410
         STC   @10,JFCBNVOL(,CJFCBP)                            02S0410
*                 DO VOLCOPY=1 TO HWVLSLCT;/* COPY VOLUMES SELECTED
*                                      BY MSS                @G24LPSJ*/
         LA    VOLCOPY,1                                        02S0411
         B     @DE00411                                         02S0411
@DL00411 DS    0H                                               02S0412
*                   CALL JFCBXGEN;  /* GET NEXT VOL SER SLOT @G24LPSJ*/
         BAL   @14,JFCBXGEN                                     02S0412
*                   SCTVOLCT=SCTVOLCT+1;/* INCREMENT COUNT   @G24LPSJ*/
         LA    @10,1                                            02S0413
         SLR   @09,@09                                          02S0413
         IC    @09,SCTVOLCT(,CSIOTP)                            02S0413
         ALR   @10,@09                                          02S0413
         STC   @10,SCTVOLCT(,CSIOTP)                            02S0413
*                   VSER=HWVLSERS(VOLCOPY);/* COPY VOL SER   @G24LPSJ*/
         LR    @10,VOLCOPY                                      02S0414
         MH    @10,@CH00105                                     02S0414
         L     @09,@PC00001+4                                   02S0414
         L     @09,HWDATAP(,@09)                                02S0414
         L     @09,HWVLSELP(,@09)                               02S0414
         ALR   @09,@10                                          02S0414
         BCTR  @09,0                                            02S0414
         BCTR  @09,0                                            02S0414
         MVC   VSER(6,JVOLPTR),HWVLSERS-4(@09)                  02S0414
*                 END;              /*                       @G24LPSJ*/
         AL    VOLCOPY,@CF00070                                 02S0415
@DE00411 L     @10,@PC00001+4                                   02S0415
         L     @10,HWDATAP(,@10)                                02S0415
         L     @10,HWVLSELP(,@10)                               02S0415
         CH    VOLCOPY,HWVLSLCT(,@10)                           02S0415
         BNH   @DL00411                                         02S0415
*               END;                /*                       @G24LPSJ*/
*           END;                                                02S0417
@RF00406 DS    0H                                               02S0418
*       IF SIOTDMND=YES THEN        /* IF UCB TYPE IN SIOT   @ZA12414*/
@RF00396 DS    0H                                               02S0418
@RC00388 TM    SIOTDMND(CSIOTP),B'10000000'                     02S0418
         BNO   @RF00418                                         02S0418
*         DO;                       /* THEN                  @ZA12414*/
*           DEVTPTR=ADDR(SIOTDEVT); /* SET PTR TO SIOT DEVTYPE  02S0420
*                                                            @ZA12414*/
         LA    DEVTPTR,SIOTDEVT(,CSIOTP)                        02S0420
*           CALL DEVTPROC;          /* TURN OFF DEVTYPE BITS @ZA12414*/
         BAL   @14,DEVTPROC                                     02S0421
*         END;                      /*                       @ZA12414*/
*       IF HWRESIOT=YES&SIOTREFN=0 THEN/* INTRA-STEP VOL=REF TURNED
*                                      OFF,                          */
@RF00418 L     @10,@PC00001                                     02S0423
         L     @10,HWCNTRLP(,@10)                               02S0423
         TM    HWRESIOT(@10),B'00001000'                        02S0423
         BNO   @RF00423                                         02S0423
         LH    @10,SIOTREFN(,CSIOTP)                            02S0423
         LTR   @10,@10                                          02S0423
         BNZ   @RF00423                                         02S0423
*         SIOTVAFF=NO;              /* SO TURN OFF VOL-AFF IND.      */
         NI    SIOTVAFF(CSIOTP),B'11111011'                     02S0424
*                                                               03S0425
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - CATDEVT                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - CATALOG DEVICE TYPE FOR RE-CATALOG.           */
*/*                                                                  */
*/* FUNCTION - GENERATE/UPDATE THE JFCBX WITH THE DEVICE TYPE        */
*/*            RETRIEVED FROM THE CATALOG. THIS WILL ENABLE          */
*/*            RE-CATALOG (IN UNALLOCATION) WITH THE ORIGINAL DEVICE */
*/*            TYPE, THEREFORE ALLOWING ESOTERICS TO REMAIN IN THE   */
*/*            CATALOG.                                              */
*/*   OPERATION- 1.CHECK DD TO SEE IF DEVICE TYPE IN SIOT IS FROM    */
*/*                THE CATALOG.                                      */
*/*                    NOTE:THE DEVICE TYPE MAY HAVE BEEN COPIED     */
*/*                         FROM A DD THAT HAD A DISP OF PASS AND    */
*/*                         ITSELF OBTAINED THE DEVICE TYPE FROM THE */
*/*                         CATALOG. IN THIS CASE THE DEVICE TYPE    */
*/*                         MUST BE OBTAINED FROM THE JFCB EXTENSION.*/
*/*                    NOTE:IF JFCCAT IS ON BUT NEITHER      @ZA00897*/
*/*                         HWRESIOT NOR HWDSNCAT NOR HWVUREC@ZA00897*/
*/*                         IS ON, THE DATA SET WAS NOT FOUND@ZA00897*/
*/*                         IN THE CATALOG BY HOUSEKEEPING,  @ZA00897*/
*/*                         SO DOESN'T NEED A JFCBX.         @ZA00897*/
*/*                                                                  */
*/*              2.CREATE A JFCB EXTENSION IF NONE EXIST.            */
*/*                                                                  */
*/*              3.PUT DEVICE TYPE IN JFCBX IF THIS IS NOT A RESTART.*/
*/*                    NOTE-IF NO HSKWA FUNCTION BITS ARE ON         */
*/*                         INDICATING FOUND IN CATALOG, PDI OR      */
*/*                         VOL/UNIT RECURSION THEN THIS IS A        */
*/*                         RESTART AND THE JFCBX ALREADY CONTAINS   */
*/*                         THE DEVICE TYPE.                         */
*/*                                                                  */
*/* ENTRY - FROM NON REFERNECE COMPETION.                            */
*/*                                                                  */
*/*   PURPOSE - PROVIDE DEVICE TYPE FOR RE-CATALOGING OF A DATA      */
*/*             SET WITH THE ORIGINAL DEVICE TYPE RETRIEVED FROM     */
*/*             THE CATALOG.                                         */
*/*   INPUT DATA - CATALOGED DATA SET INDICATOR                      */
*/*                JFCBX PTR IN SIOT                                 */
*/*                DEVTYPE IN SIOT                                   */
*/*                DEVTYPE IN REFERENCED JFCBX                       */
*/*                                                                  */
*/* EXIT -                                                           */
*/*   OUTPUT DATA - JFCBX GENERATED/UPDATED WITH DEVICE TYPE FROM    */
*/*                 CATALOG.                                         */
*/*                 INDICATOR FOR PRESENTS OF THAT DEVICE TYPE.      */
*/*                                                                  */
*/********************************************************************/
*                                                               03S0425
*       IF JFCCAT=YES&              /* DSN FOUND IN CATLG    @ZA00897*/
*           (HWRESIOT=YES×          /* DATA SET RECEIVED - THIS STEP
*                                                            @ZA00897*/
*           HWDSNCAT=YES×           /* FOUND IN CATLG THIS STEP 03S0425
*                                                            @ZA00897*/
*           HWVUREC=YES) THEN       /* VOL/UNIT RECURSION    @ZA00897*/
@RF00423 TM    JFCCAT(CJFCBP),B'10000000'                       03S0425
         BNO   @RF00425                                         03S0425
         L     @10,@PC00001                                     03S0425
         L     @10,HWCNTRLP(,@10)                               03S0425
         TM    HWRESIOT(@10),B'01001100'                        03S0425
         BZ    @RF00425                                         03S0425
*         DO;                       /* CREATE, FILL IN JFCBX         */
*           IF SIOTJFX=0 THEN       /* CREATE A JFCB                 */
         SLR   @10,@10                                          03S0427
         C     @10,SIOTJFX(,CSIOTP)                             03S0427
         BNE   @RF00427                                         03S0427
*             DO;                   /* EXTENSION IF NONE EXISTS.     */
*               SWACTLS=0;          /* CLEAR SWA INTERFACE CONTROLS. */
         STH   @10,SWACTLS                                      03S0429
*               SWNEW=YES;          /* NEW EPA.                      */
         OI    SWNEW,B'00001000'                                03S0430
*               SWCHN=YES;          /* CHAIN EPA TO EPA IN EPAPTR.   */
         OI    SWCHN,B'10000000'                                03S0431
*               SWASN=YES;          /* ASSIGN THIS NEW JFCBX         */
         OI    SWASN,B'10000000'                                03S0432
*               BLKID=JFXID;        /* SAY JFCBX FOR LATER WRITE.    */
         MVI   BLKID,X'1D'                                      03S0433
*               CALL IEFAB4F7(SWACTLS,0,EPAPTR,ADDR(SVAPRM),/* ASSIGN
*                                      THE                           */
*                   ADDR(SIOTJFX),JFXLEN,1);/* JFCB EXTENSION.       */
         LA    @10,SWACTLS                                      03S0434
         ST    @10,@AL00001                                     03S0434
         LA    @10,@CF00638                                     03S0434
         ST    @10,@AL00001+4                                   03S0434
         LA    @10,EPAPTR                                       03S0434
         ST    @10,@AL00001+8                                   03S0434
         LA    @10,SVAPRM                                       03S0434
         ST    @10,@TF00001                                     03S0434
         LA    @10,@TF00001                                     03S0434
         ST    @10,@AL00001+12                                  03S0434
         LA    @10,SIOTJFX(,CSIOTP)                             03S0434
         ST    @10,@TF00002                                     03S0434
         LA    @10,@TF00002                                     03S0434
         ST    @10,@AL00001+16                                  03S0434
         LA    @10,@CF00145                                     03S0434
         ST    @10,@AL00001+20                                  03S0434
         LA    @10,@CF00070                                     03S0434
         ST    @10,@AL00001+24                                  03S0434
         L     @15,@CV00161                                     03S0434
         LA    @01,@AL00001                                     03S0434
         BALR  @14,@15                                          03S0434
*               JFCBEXAD=SVA;       /* GET SVA FROM SVAPRM.          */
         MVC   JFCBEXAD(3,CJFCBP),SVA                           03S0435
*               JFCBXPTR=SIOTJFX;   /* GET PTR TO JFCBX GEN'D.       */
         L     @10,SIOTJFX(,CSIOTP)                             03S0436
         ST    @10,JFCBXPTR                                     03S0436
*               NEWSERS=BLANKOUT;   /* MAKE VOLSERS BLANK IN JFCBX.  */
         MVC   NEWSERS(90,@10),BLANKOUT                         03S0437
*             END;                  /* END JFCBX ASSIGN.             */
*           IF HWRESIOT=YES THEN    /* RECEIVED DATA SET FOUND IN    */
@RF00427 L     @10,@PC00001                                     03S0439
         L     @10,HWCNTRLP(,@10)                               03S0439
         TM    HWRESIOT(@10),B'00001000'                        03S0439
         BNO   @RF00439                                         03S0439
*             SIOTJFX->JFCBXDEV     /* CATALOG ORIGINALY. GET DEVICE */
*                 =HWRSIOTP->SIOTJFX->JFCBXDEV;/* TYPE FROM PASSING
*                                      DD.                           */
         L     @10,SIOTJFX(,CSIOTP)                             03S0440
         L     @09,@PC00001+4                                   03S0440
         L     @09,HWDATAP(,@09)                                03S0440
         L     @09,HWRSIOTP(,@09)                               03S0440
         L     @09,SIOTJFX(,@09)                                03S0440
         MVC   JFCBXDEV(4,@10),JFCBXDEV(@09)                    03S0440
*           ELSE                    /* NOT RECEIVED AND NOT A RESTART*/
*             IF HWDSNCAT=YES×HWVUREC=YES THEN/* SO GET DEVICE TYPE
*                                      AS FOUND                      */
         B     @RC00439                                         03S0441
@RF00439 L     @10,@PC00001                                     03S0441
         L     @10,HWCNTRLP(,@10)                               03S0441
         TM    HWDSNCAT(@10),B'01000100'                        03S0441
         BZ    @RF00441                                         03S0441
*               SIOTJFX->JFCBXDEV=DEVTYPE;/* IN THE CATALOG. @YM08304*/
         L     @10,SIOTJFX(,CSIOTP)                             03S0442
         MVC   JFCBXDEV(4,@10),DEVTYPE                          03S0442
*           SIOCDEVT=YES;           /* INDICATE CATALOG DEVTYPE      */
@RF00441 DS    0H                                               03S0443
@RC00439 OI    SIOCDEVT(CSIOTP),B'01000000'                     03S0443
*         END;                      /* END DEVTYPE FOR RE-CATALOG.   */
*       HWDSNCAT=NO;                /* CLEAN UP HSKPWA CONTROLS FOR
*                                      THE                           */
@RF00425 DS    0H                                               02S0446
*       HWRESIOT=NO;                /* PROCESSING OF THE NEXT DD BY  */
         L     @10,@PC00001                                     02S0446
         L     @10,HWCNTRLP(,@10)                               02S0446
         NI    HWDSNCAT(@10),B'11110011'                        02S0446
*       HWOVRDN=NO;                 /* HOUSEKEEPING.                 */
         NI    HWOVRDN(@10),B'11011111'                         02S0447
*       IF HWVUREC=YES&HWDDCTR=HWDDSTEP+1 THEN/* IF LAST DD WAS      */
         TM    HWVUREC(@10),B'01000000'                         02S0448
         BNO   @RF00448                                         02S0448
         LH    @09,HWDDCTR(,@10)                                02S0448
         LA    @15,1                                            02S0448
         AH    @15,HWDDSTEP(,@10)                               02S0448
         CR    @09,@15                                          02S0448
         BNE   @RF00448                                         02S0448
*         IF HWDDCTR=HWDDSTEP+1 THEN/* IF LAST DD WAS                */
         CR    @09,@15                                          02S0449
         BNE   @RF00449                                         02S0449
*           DO;                     /* PROCESSED FOR VOL/UNIT   02S0450
*                                      RECURSION                     */
*             HWVUREC=NO;           /* TURN OFF VOL/UNIT RECURSION
*                                      FLAG                          */
         NI    HWVUREC(@10),B'10111111'                         02S0451
*             HWDDCTR=0;            /* CLEAR DD COUNTER.             */
         SLR   @09,@09                                          02S0452
         STH   @09,HWDDCTR(,@10)                                02S0452
*             HWDDSTEP=0;           /* RESET NO. OF DDS GENERATED.   */
         STH   @09,HWDDSTEP(,@10)                               02S0453
*           END;                                                02S0454
*       IF SIOVAMDS=NO&SCTDUMMY=NO  /* IF ITS NOT A VIO,DUMMY OR     */
*           &SIOTSSDS=NO THEN       /* SUBSYSTEM DATA SET AND THE    */
@RF00449 DS    0H                                               02S0455
@RF00448 TM    SIOVAMDS(CSIOTP),B'00100000'                     02S0455
         BNZ   @RF00455                                         02S0455
         TM    SCTDUMMY(CSIOTP),B'10000000'                     02S0455
         BNZ   @RF00455                                         02S0455
         TM    SIOTSSDS(CSIOTP),B'10000000'                     02S0455
         BNZ   @RF00455                                         02S0455
*         IF SIOUCNVT^=0 THEN       /* UNIT WAS NOT PROPERLY    02S0456
*                                      CONVERTED.                    */
         CLI   SIOUCNVT(CSIOTP),0                               02S0456
         BE    @RF00456                                         02S0456
*           DO;                     /* PROCESSING                    */
*             HWRSNCD=UNITBAD;      /* CAN'T CONTINUE. FAIL THE JOB  */
         L     @10,@PC00001+8                                   02S0458
         L     @10,HWRTNP(,@10)                                 02S0458
         MVC   HWRSNCD(2,@10),@CH00060                          02S0458
*             HWRTCD=DDERROR;       /* DUE TO INVALID UNIT PARAMETER.*/
         MVC   HWRTCD(2,@10),@CH00062                           02S0459
*           END;                                                02S0460
*     END;                                                      01S0461
@RF00456 DS    0H                                               01S0461
@RF00455 DS    0H                                               01S0462
*   IF HWGEPACP=0 THEN              /* REPLACE THE OLD               */
@RF00317 L     @10,@PC00001+4                                   01S0462
         L     @10,HWDATAP(,@10)                                01S0462
         L     @09,HWGEPACP(,@10)                               01S0462
         LTR   @09,@09                                          01S0462
         BNZ   @RF00462                                         01S0462
*     HWLEPAP=EPAPTR;               /* LAST EPA POINTER              */
         L     @09,EPAPTR                                       01S0463
         ST    @09,HWLEPAP(,@10)                                01S0463
*   ELSE                            /* BY THE EPA POINTER            */
*     HWGEPACP=EPAPTR;              /* UPDATED BY ASSIGN.            */
         B     @RC00462                                         01S0464
@RF00462 L     @10,@PC00001+4                                   01S0464
         L     @10,HWDATAP(,@10)                                01S0464
         L     @09,EPAPTR                                       01S0464
         ST    @09,HWGEPACP(,@10)                               01S0464
*   RETURN;                         /* RETURN TO CALLER              */
@EL00001 L     @13,4(,@13)                                      01S0465
@EF00001 L     @00,@SIZDATD                                     01S0465
         LR    @01,@11                                          01S0465
         FSPACE   R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                  01S0465
         BR    @14                                              01S0465
*JFCBXGEN:                                                      01S0466
*   PROC;                           /* GENERATE JFCBX PROC           */
         B     @EL00001                                         01S0466
JFCBXGEN STM   @14,@03,@SA00002                                 01S0466
         STM   @05,@12,@SA00002+24                              01S0466
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - JFCBXGEN                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - JFCBX GENERATE                                */
*/*                                                                  */
*/* FUNCTION - GENERATE,VIA SWA ASSIGN A JFCBX WHEN THE VOLUME       */
*/*            SERIAL NUMBERS,TO BE COPIED,WILL NOT FIT IN THE       */
*/*            EXISTING JFCB OR JFCBX.                               */
*/*   OPERATION - 1. THE RESULTS OF -(N//JX-J) WHERE N= NUMBER OF    */
*/*                  VOLSERS ALREADY COPIED, JX= NUMBER OF VOLSERS IN*/
*/*                  A JFCBX,AND J= NUMBER OF VOLSERS IN A JFCB - IS */
*/*                  EXAMINED AS FOLLOWS:                            */
*/*                                  A- IF NON-ZERO THE NEXT VOLSER  */
*/*                                     WILL FIT IN THIS BLOCK AND   */
*/*                                     NO JFCBX IS GENERATED        */
*/*                                  B- IF ZERO A JFCBX IS REQUIRED  */
*/*               2. IF A JFCBX IS REQUIRED AND NONE ALREADY EXIST   */
*/*                  THEN A JFCBX IS ASSIGNED AND CHAINED TO EITHER A*/
*/*                  JFCB OR JFCBX.                                  */
*/*               3. PTR INITIALIZED TO NEXT SLOT TO CONTAIN A       */
*/*                  VOLSER                                          */
*/* ENTRY - FROM CRI OR DD REFERNECE COMPETION.                      */
*/*                                                                  */
*/*   PURPOSE - TO OBTAIN A PTR TO THE NEXT VOLSER SLOT,GENERATING   */
*/*             A JFCBX IF NONE EXIST(S), WHEN VOLSERS ARE COPIED.   */
*/*   INPUT DATA - SCTVOLCT- NUMBER OF VOLSERS COPIED THUS FAR       */
*/*                PTR TO LAST VOLSER COPIED.                        */
*/*                                                                  */
*/* EXIT -                                                           */
*/*   CONDITION - ALL                                                */
*/*                                                                  */
*/*   OUTPUT DATA - AN ASSIGNED JFCBX IF NONE EXISTED WITH,          */
*/*                   1. SVA OF JFCBX IN JFCB AND SVAB OF JFCBX IN   */
*/*                      SIOT FOR FIRST JFCBX                        */
*/*                   2. JFCBXS CHAINED VIA SVAS AND SVABS IN THE    */
*/*                      PREVIOUS JFCBX.                             */
*/*                   OR                                             */
*/*                 THE ADDRESS(IN JVOLPTR) OF WHERE TO MOVE NEXT    */
*/*                 VOLSER.                                          */
*/*                                                                  */
*/*   RETURN CODE - NONE.                                            */
*/*                                                                  */
*/********************************************************************/
*                                                               01S0467
*   IF SCTVOLCT//JFXVLNO-JFBVLNO=0 THEN/* IF A JFCBX TO RECEIVE THE  */
         SLR   @10,@10                                          01S0467
         SLR   @00,@00                                          01S0467
         IC    @00,SCTVOLCT(,CSIOTP)                            01S0467
         SRDA  @00,32                                           01S0467
         D     @00,@CF00058                                     01S0467
         SL    @00,@CF00133                                     01S0467
         CR    @00,@10                                          01S0467
         BNE   @RF00467                                         01S0467
*     DO;                           /* VOLUME SERIAL NUMBER,         */
*       SWACTLS=0;                  /* CLEAR SWA INTERFACE CONTROLS, */
         STH   @10,SWACTLS                                      01S0469
*       SWNEW=YES;                  /* INDICATE NEW EPA              */
         OI    SWNEW,B'00001000'                                01S0470
*       SWCHN=YES;                  /* CHAIN EPA FOR WRITE           */
         OI    SWCHN,B'10000000'                                01S0471
*       SWASN=YES;                  /* INDICATE ASSIGN OPERATION,    */
         OI    SWASN,B'10000000'                                01S0472
*       BLKID=JFXID;                /* INDICATE JFCBX FOR LATER 01S0473
*                                      WRITE.                        */
         MVI   BLKID,X'1D'                                      01S0473
*       IF SCTVOLCT=JFBVLNO THEN    /* IF NUMBER OF VOLSERS COPIED IS*/
         CLI   SCTVOLCT(CSIOTP),5                               01S0474
         BNE   @RF00474                                         01S0474
*         DO;                       /* JFCB NO. THEN THIS IS 1ST
*                                      JFCBX                         */
*           IF SIOTJFX=0 THEN       /* IF NO POINTER TO 1ST JFCBX
*                                      THEN                          */
         C     @10,SIOTJFX(,CSIOTP)                             01S0476
         BNE   @RF00476                                         01S0476
*             DO;                   /* IT MUST BE ASSIGNED           */
*               CALL IEFAB4F7       /* CALL IEFAB4F7 TO ASSIGN       */
*                   (SWACTLS,0,EPAPTR,ADDR(SVAPRM),ADDR(SIOTJFX),JFXLEN
*                   ,1);                                        01S0478
         LA    @10,SWACTLS                                      01S0478
         ST    @10,@AL00001                                     01S0478
         LA    @10,@CF00638                                     01S0478
         ST    @10,@AL00001+4                                   01S0478
         LA    @10,EPAPTR                                       01S0478
         ST    @10,@AL00001+8                                   01S0478
         LA    @10,SVAPRM                                       01S0478
         ST    @10,@TF00001                                     01S0478
         LA    @10,@TF00001                                     01S0478
         ST    @10,@AL00001+12                                  01S0478
         LA    @10,SIOTJFX(,CSIOTP)                             01S0478
         ST    @10,@TF00002                                     01S0478
         LA    @10,@TF00002                                     01S0478
         ST    @10,@AL00001+16                                  01S0478
         LA    @10,@CF00145                                     01S0478
         ST    @10,@AL00001+20                                  01S0478
         LA    @10,@CF00070                                     01S0478
         ST    @10,@AL00001+24                                  01S0478
         L     @15,@CV00161                                     01S0478
         LA    @01,@AL00001                                     01S0478
         BALR  @14,@15                                          01S0478
*               JFCBEXAD=SVA;       /* PUT 1ST JFCBX SVA INTO JFCB   */
         MVC   JFCBEXAD(3,CJFCBP),SVA                           01S0479
*             END;                                              01S0480
*           JFCBXPTR=SIOTJFX;       /* 1ST JFCBX POINTER FROM SIOT   */
@RF00476 L     @10,SIOTJFX(,CSIOTP)                             01S0481
         ST    @10,JFCBXPTR                                     01S0481
*           NEWSERS=BLANKOUT;       /* BLANK OUT VOLSERS IN NEW 01S0482
*                                      JFCBX.                        */
         MVC   NEWSERS(90,@10),BLANKOUT                         01S0482
*         END;                                                  01S0483
*       ELSE                        /* NOT 1ST JFCBX SO ASSIGN NEW   */
*         DO;                       /* JFCBX,IF NONE EXIST           */
         B     @RC00474                                         01S0484
@RF00474 DS    0H                                               01S0485
*           IF JFCBXNXT=0 THEN      /* IF NO POINTER TO NEXT JFCBX   */
         L     @10,JFCBXPTR                                     01S0485
         L     @09,JFCBXNXT(,@10)                               01S0485
         LTR   @09,@09                                          01S0485
         BNZ   @RF00485                                         01S0485
*             DO;                   /* THEN ONE MUST BE ASSIGNED     */
*               CALL IEFAB4F7       /* CALL IEFAB4F7 TO ASSIGN       */
*                   (SWACTLS,0,EPAPTR,ADDR(SVAPRM),ADDR(JFCBXNXT),
*                   JFXLEN,1);                                  01S0487
         LA    @09,SWACTLS                                      01S0487
         ST    @09,@AL00001                                     01S0487
         LA    @09,@CF00638                                     01S0487
         ST    @09,@AL00001+4                                   01S0487
         LA    @09,EPAPTR                                       01S0487
         ST    @09,@AL00001+8                                   01S0487
         LA    @09,SVAPRM                                       01S0487
         ST    @09,@TF00001                                     01S0487
         LA    @09,@TF00001                                     01S0487
         ST    @09,@AL00001+12                                  01S0487
         LA    @10,JFCBXNXT(,@10)                               01S0487
         ST    @10,@TF00002                                     01S0487
         LA    @10,@TF00002                                     01S0487
         ST    @10,@AL00001+16                                  01S0487
         LA    @10,@CF00145                                     01S0487
         ST    @10,@AL00001+20                                  01S0487
         LA    @10,@CF00070                                     01S0487
         ST    @10,@AL00001+24                                  01S0487
         L     @15,@CV00161                                     01S0487
         LA    @01,@AL00001                                     01S0487
         BALR  @14,@15                                          01S0487
*               JFCBXTTR=SVA;       /* CHAIN JFCBX'S VIA SVA'S       */
         L     @10,JFCBXPTR                                     01S0488
         MVC   JFCBXTTR(3,@10),SVA                              01S0488
*             END;                                              01S0489
*           JFCBXPTR=JFCBXNXT;      /* BASE NEW JFCBX                */
@RF00485 L     @10,JFCBXPTR                                     01S0490
         L     @10,JFCBXNXT(,@10)                               01S0490
         ST    @10,JFCBXPTR                                     01S0490
*           NEWSERS=BLANKOUT;       /* BLANK OUT VOLSERS IN NEW 01S0491
*                                      JFCBX.                        */
         MVC   NEWSERS(90,@10),BLANKOUT                         01S0491
*         END;                                                  01S0492
*       JVOLPTR=ADDR(JFCBXVOL);     /* VOLUME SERIAL LOCATION IN
*                                      JFCBX                         */
@RC00474 L     JVOLPTR,JFCBXPTR                                 01S0493
         LA    JVOLPTR,JFCBXVOL(,JVOLPTR)                       01S0493
*     END;                                                      01S0494
*   ELSE                            /* THERE IS NO NEW JFCBX    01S0495
*                                      GENERATED,                    */
*     JVOLPTR=JVOLPTR+VOLSERLN;     /* SO JUST UPDATE TO NEXT VOLSER.*/
         B     @RC00467                                         01S0495
@RF00467 AL    JVOLPTR,@CF00105                                 01S0495
*   END JFCBXGEN;                                               01S0496
@EL00002 DS    0H                                               01S0496
@EF00002 DS    0H                                               01S0496
@ER00002 LM    @14,@03,@SA00002                                 01S0496
         LM    @05,@12,@SA00002+24                              01S0496
         BR    @14                                              01S0496
*DEVTPROC:                                                      02S0497
*   PROC;                           /* PROCESS DEVICE TYPES  @ZA12414*/
DEVTPROC STM   @14,@12,12(@13)                                  02S0497
*/********************************************************************/
*/*                                                          @ZA12414*/
*/* SEGMENT NAME - DEVTPROC                                  @ZA12414*/
*/*                                                          @ZA12414*/
*/* DESCRIPTIVE NAME - DEVICE TYPE PROCESSING                @ZA12414*/
*/*                                                          @ZA12414*/
*/* FUNCTION - TURN OFF BITS IN THE DEVICE TYPE WORD AFTER   @ZA12414*/
*/*            RETRIEVAL FROM THE CATALOG RETURN INFORMATION.@ZA12414*/
*/*            THIS IS REQUIRED BECAUSE SOME SYSTEMS, AT     @ZA12414*/
*/*            LEAST VS1, LEAVES SOME OF THE BITS ON WHEN    @ZA12414*/
*/*            CATALOGING DATA SETS. THE BITS BEING TURNED   @ZA12414*/
*/*            OFF DO NOT EFFECT DEVICE ELLIGIBILITY.        @ZA12414*/
*/*                                                          @ZA12414*/
*/* ENTRY                                                    @ZA12414*/
*/*   PURPOSE - SEE FUNCTION                                 @ZA12414*/
*/*                                                          @ZA12414*/
*/*   INPUT DATA - DEVTYPE WORD AS IT CAME FROM THE CRI.     @ZA12414*/
*/*                                                          @ZA12414*/
*/* EXITS -                                                  @ZA12414*/
*/*   CONDITION - WHEN DEVTYPE HAS BEEN EXAMINED AND THE     @ZA12414*/
*/*               APPROPRIATE OPTION BITS TURNED OFF.        @ZA12414*/
*/*                                                          @ZA12414*/
*/*   OUTPUT DATA - DEVTYPE WORD UPDATED AS INDICATED IN THE @ZA12414*/
*/*                 CODE.                                    @ZA12414*/
*/*                                                          @ZA12414*/
*/*   RETURN CODE - NONE                                     @ZA12414*/
*/*                                                          @ZA12414*/
*/********************************************************************/
*                                                               02S0498
*   IF DEVDACC=YES THEN             /* CHECK FOR DA DEVICE   @ZA12414*/
         TM    DEVDACC(DEVTPTR),B'00100000'                     02S0498
         BNO   @RF00498                                         02S0498
*     DO;                           /* IT IS DIRECT ACCESS   @ZA12414*/
*       DEVTBYT2=DEVTBYT2&SHPOWOFF; /* TURN OFF SHR & PWR    @ZA12414*/
         NI    DEVTBYT2(DEVTPTR),X'DC'                          02S0500
*       IF DEVTBYT4=DA3340 THEN     /* CHECK FOR 3340 DEV    @ZA12414*/
         CLI   DEVTBYT4(DEVTPTR),X'0A'                          02S0501
         BNE   @RF00501                                         02S0501
*         DEVTBYT2=DEVTBYT2&RPSMASK;/* 3340 DEV-RPS OFF      @ZA12414*/
         NI    DEVTBYT2(DEVTPTR),X'EF'                          02S0502
*     END;                          /* END DIRECT ACCESS     @ZA12414*/
@RF00501 DS    0H                                               02S0504
*   IF DEVTAPE=YES THEN             /* CHECK FOR TAPE DEV    @ZA12414*/
@RF00498 TM    DEVTAPE(DEVTPTR),B'10000000'                     02S0504
         BNO   @RF00504                                         02S0504
*     DEVTBYT2=DEVTBYT2&POWEROFF;   /* TURN POWER BITS OFF   @ZA12414*/
         NI    DEVTBYT2(DEVTPTR),X'F4'                          02S0505
*   IF DEVUREC=YES THEN             /* CHECK FOR UNIT REC    @ZA12414*/
@RF00504 TM    DEVUREC(DEVTPTR),B'00001000'                     02S0506
         BNO   @RF00506                                         02S0506
*     IF DEVTBYT4^=UR3211 THEN      /* CHECK FOR 3211 DEV    @ZA12414*/
         CLI   DEVTBYT4(DEVTPTR),X'09'                          02S0507
         BE    @RF00507                                         02S0507
*       DEVTBYT2=OPTSOFF;           /* NO TURN OPTIONS OFF   @ZA12414*/
         MVI   DEVTBYT2(DEVTPTR),X'00'                          02S0508
*     ELSE                          /* IT IS A 3211 DEVICE   @ZA12414*/
*       DEVTBYT2=DEVTBYT2&UCSOPMSK; /* LEAVE UCS BIT ON      @ZA12414*/
         B     @RC00507                                         02S0509
@RF00507 NI    DEVTBYT2(DEVTPTR),X'80'                          02S0509
*   IF DEVDISP=YES THEN             /* CHECK FOR DISPLAY     @ZA12414*/
@RC00507 DS    0H                                               02S0510
@RF00506 TM    DEVDISP(DEVTPTR),B'00010000'                     02S0510
         BNO   @RF00510                                         02S0510
*     DEVTBYT2=OPTSOFF;             /* YES TURN OPTS OFF     @ZA12414*/
         MVI   DEVTBYT2(DEVTPTR),X'00'                          02S0511
*   END DEVTPROC;                   /*                       @ZA12414*/
@EL00003 DS    0H                                               02S0512
@EF00003 DS    0H                                               02S0512
@ER00003 LM    @14,@12,12(@13)                                  02S0512
         BR    @14                                              02S0512
*   END IEFAB464                                                01S0513
*                                                               01S0513
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSUT5  (PRLG464 )                                       */
*/*%INCLUDE SYSUT5  (DCL464  )                                       */
*/*%INCLUDE SYSUT5  (CRIRFDCL)                                       */
*/*%INCLUDE SYSUT5  (DDRFDCL )                                       */
*/*%INCLUDE SYSUT5  (TPRFDCLS)                                       */
*/*%INCLUDE SYSUT5  (TPONDCL )                                       */
*/*%INCLUDE SYSUT5  (JFXGNDCL)                                       */
*/*%INCLUDE SYSUT5  (DCLOVD  )                                       */
*/*%INCLUDE SYSLIB  (IEFZB436)                                       */
*/*%INCLUDE SYSLIB  (IEFASIOT)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBX)                                       */
*/*%INCLUDE SYSLIB  (IEFZB437)                                       */
*/*%INCLUDE SYSLIB  (IEZCTGPL)                                       */
*/*%INCLUDE SYSLIB  (IEZCTGWA)                                       */
*/*%INCLUDE SYSLIB  (IEZCTGVL)                                       */
*/*%INCLUDE SYSLIB  (IEFZB421)                                       */
*/*%INCLUDE SYSUT5  (CRIRFCMP)                                       */
*/*%INCLUDE SYSUT5  (CRIPLG  )                                       */
*/*%INCLUDE SYSUT5  (DDREFCMP)                                       */
*/*%INCLUDE SYSUT5  (DDPRLG  )                                       */
*/*%INCLUDE SYSUT5  (TAPEONLY)                                       */
*/*%INCLUDE SYSUT5  (TPONSPEC)                                       */
*/*%INCLUDE SYSUT5  (DDVLCOPY)                                       */
*/*%INCLUDE SYSUT5  (DDVLSPEC)                                       */
*/*%INCLUDE SYSUT5  (TAPEVREF)                                       */
*/*%INCLUDE SYSUT5  (TVRFSPEC)                                       */
*/*%INCLUDE SYSUT5  (VIOCOMP )                                       */
*/*%INCLUDE SYSUT5  (VIOCMPSP)                                       */
*/*%INCLUDE SYSUT5  (UNOVERID)                                       */
*/*%INCLUDE SYSUT5  (OVRIDSPC)                                       */
*/*%INCLUDE SYSUT5  (NOREFCMP)                                       */
*/*%INCLUDE SYSUT5  (NRPRLG  )                                       */
*/*%INCLUDE SYSUT5  (CATDEVT )                                       */
*/*%INCLUDE SYSUT5  (JFXGSPEC)                                       */
*/*%INCLUDE SYSUT5  (DEVTPROC)                                       */
*/*%INCLUDE SYSUT5  (DEVTPRLG)                                       */
*                                                               01S0513
*       ;                                                       01S0513
@DATA    DS    0H
@CH00081 DC    H'2'
@CH00062 DC    H'4'
@CH00060 DC    H'8'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    7F
@SA00002 DS    0F
         DS    14F
@AL00001 DS    7A
@TF00001 DS    F
@TF00002 DS    F
IEFAB464 CSECT
         DS    0F
@CF00638 DC    F'0'
@CF00070 DC    F'1'
@CH00070 EQU   @CF00070+2
@CF00133 DC    F'5'
@CF00105 DC    F'6'
@CH00105 EQU   @CF00105+2
@CF00058 DC    F'15'
@CF00145 DC    F'176'
@DATD    DSECT
         DS    0D
VLPTR    DS    A
GRPPTR   DS    A
GRPTABP  DS    A
EPAPTR   DS    A
ORGJFBP  DS    A
JSVAP    DS    A
JFCBXPTR DS    A
RDEVPTR  DS    A
DEVSFND  DS    H
SWACTLS  DS    FL2
         ORG   SWACTLS
SWASN    DS    BL1
SWDEL    EQU   SWACTLS+0
SWREAD   EQU   SWACTLS+0
SWWRT    EQU   SWACTLS+0
SWNEW    EQU   SWACTLS+0
SWFREE   EQU   SWACTLS+0
SWMOD    EQU   SWACTLS+0
SWOLD    EQU   SWACTLS+0
SWCHN    DS    BL1
@NM00004 EQU   SWACTLS+1
         ORG   SWACTLS+2
RTVDUNIT DS    CL8
         ORG   RTVDUNIT
DEVTYPE  DS    CL4
ZEROUCB  DS    FL4
         ORG   RTVDUNIT+8
VOLSDONE DS    BL1
SVAPRM   DS    CL4
         ORG   SVAPRM
SVA      DS    CL3
BLKID    DS    CL1
         ORG   SVAPRM+4
SCANEND  DS    BL1
IEFAB464 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CA00157 DC    A(EDTTAB)
@CV00158 DC    V(IEFAB463)
@CV00159 DC    V(IEFAB470)
@CV00161 DC    V(IEFAB4F7)
         DS    0D
VLEN     DC    AL2(12)
BLANK    DC    CL6' '
BLANKS   DC    CL8' '
ALLDA    DC    CL8'SYSALLDA'
BLANKOUT DC    CL90' '
IEFAB464 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFAB464 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
LUVPTR   EQU   @02
GENPTR   EQU   @04
EDTPTR   EQU   @03
LUVCTR   EQU   @09
GENCTR   EQU   @05
VOLCOPY  EQU   @02
JVOLPTR  EQU   @04
RVOLPTR  EQU   @02
RJFCBXP  EQU   @05
RJFCBP   EQU   @03
DEVPTR   EQU   @02
CDEVPTR  EQU   @05
DEVTPTR  EQU   @02
CSIOTP   EQU   @06
CJFCBP   EQU   @07
RSIOTP   EQU   @08
         EXTRN EDTTAB
DEVWORD  EQU   0
DEVTBYT2 EQU   DEVWORD+1
@NM00002 EQU   DEVWORD+2
DEVTAPE  EQU   @NM00002
DEVDACC  EQU   @NM00002
DEVDISP  EQU   @NM00002
DEVUREC  EQU   @NM00002
DEVTBYT4 EQU   DEVWORD+3
VSER     EQU   0
JSVA     EQU   0
CTGVL    EQU   0
CTGVLVOL EQU   CTGVL
CTGVLDEV EQU   CTGVL+6
CTGVLSEQ EQU   CTGVL+10
NEXTSER  EQU   0
HWUCLST  EQU   0
HWEDTLUV EQU   HWUCLST
HWDEVTYP EQU   HWUCLST+4
HWUCBP   EQU   HWUCLST+8
INDMSIOT EQU   0
SCTUSADD EQU   INDMSIOT+20
SIOTUNAF EQU   SCTUSADD
SCTPJFCB EQU   INDMSIOT+32
SIOTREFN EQU   INDMSIOT+40
SIOTBYT1 EQU   INDMSIOT+43
SIOVAMDS EQU   SIOTBYT1
SCTDDINO EQU   INDMSIOT+44
SIOTBYT3 EQU   INDMSIOT+46
SIOCDEVT EQU   SIOTBYT3
SIOTTSTC EQU   INDMSIOT+47
SCTVOLCT EQU   INDMSIOT+49
SIOTBYT0 EQU   INDMSIOT+52
SIOTSSDS EQU   SIOTBYT0
SCTNMBUT EQU   INDMSIOT+53
SCTSDISP EQU   INDMSIOT+55
S3400DSP EQU   SCTSDISP
SIOTPRIV EQU   SCTSDISP
SCTSBYT1 EQU   INDMSIOT+56
SCTDUMMY EQU   SCTSBYT1
SIOTGDSN EQU   SCTSBYT1
SCTPARLM EQU   SCTSBYT1
SCTUNAFF EQU   SCTSBYT1
SCTSBYT2 EQU   INDMSIOT+57
SCTVOLAF EQU   SCTSBYT2
SCTUNLBD EQU   SCTSBYT2
SCTRECVD EQU   SCTSBYT2
SCTSBYT3 EQU   INDMSIOT+58
SCTVREF  EQU   SCTSBYT3
SCTSNEW  EQU   SCTSBYT3
SCTSMOD  EQU   SCTSBYT3
SCTSBYT4 EQU   INDMSIOT+59
SIOTVAFF EQU   SCTSBYT4
SCTUTYPE EQU   INDMSIOT+60
SIOTDEVT EQU   SCTUTYPE
SIOUBYT3 EQU   SIOTDEVT+2
SIOUCNVT EQU   SCTUTYPE+4
SIOUCBAD EQU   SCTUTYPE+5
SIOTBYT4 EQU   INDMSIOT+81
SIOTALTD EQU   INDMSIOT+92
SIOTBYT2 EQU   INDMSIOT+103
SIOTDMND EQU   SIOTBYT2
SIOTGALL EQU   SIOTBYT2
SJFCBPTR EQU   INDMSIOT+156
SIOTJFX  EQU   INDMSIOT+160
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCCAT   EQU   JFCBTSDM
JFCBDSCB EQU   INFMJFCB+53
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCBLTYP EQU   INFMJFCB+66
JFCSUL   EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCDISP  EQU   JFCBIND2
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
JFCBX    EQU   0
JFCBXTTR EQU   JFCBX
JFCBXVOL EQU   JFCBX+4
JFCBXDEV EQU   JFCBX+140
JFCBXNXT EQU   JFCBX+172
HWCNTRL  EQU   0
HWVUREC  EQU   HWCNTRL+2
HWRESIOT EQU   HWCNTRL+2
HWDSNCAT EQU   HWCNTRL+2
HWOVCAND EQU   HWCNTRL+2
HWUCB    EQU   HWCNTRL+2
HWEDT    EQU   HWCNTRL+3
HWVAME   EQU   HWCNTRL+3
HWOVRDN  EQU   HWCNTRL+3
HWMSSCTL EQU   HWCNTRL+3
HWAVUNIT EQU   HWMSSCTL
HWVLSELF EQU   HWMSSCTL+1
HWAVSRCH EQU   HWMSSCTL+1
HWTBLCTL EQU   HWCNTRL+6
HWJLCTLS EQU   HWCNTRL+7
HWDDSTEP EQU   HWCNTRL+10
HWDDCTR  EQU   HWCNTRL+12
HWDATA   EQU   0
HWLEPAP  EQU   HWDATA+12
HWGEPACP EQU   HWDATA+16
HWIOSLTP EQU   HWDATA+32
HWRSIOTP EQU   HWDATA+40
HWUCLPTR EQU   HWDATA+56
HWLEPARP EQU   HWDATA+60
HWVLSELP EQU   HWDATA+80
HWSTPNBR EQU   HWDATA+172
HWDEV    EQU   0
HWMBYTE  EQU   HWDEV
HWOBYTE  EQU   HWDEV+1
HW7TRK   EQU   HWOBYTE
HWCTBYT  EQU   HWDEV+2
HWTAPE   EQU   HWCTBYT
HWDA     EQU   HWCTBYT
HWTYPE   EQU   HWCTBYT+1
HWRETURN EQU   0
HWRTCD   EQU   HWRETURN
HWRSNCD  EQU   HWRETURN+2
HWVLSELB EQU   0
HWSELHDR EQU   HWVLSELB
HWVLSLCT EQU   HWSELHDR+2
HWVLSERS EQU   HWVLSELB+4
CTGPL    EQU   0
CTGOPTN1 EQU   CTGPL
CTGOPTN2 EQU   CTGPL+1
CTGEXT   EQU   CTGOPTN2
CTGERASE EQU   CTGOPTN2
CTGSMF   EQU   CTGERASE
CTGREL   EQU   CTGSMF
CTGPURG  EQU   CTGOPTN2
CTGVMNT  EQU   CTGPURG
CTGOPTN3 EQU   CTGPL+2
CTGOPTN4 EQU   CTGPL+3
CTGENT   EQU   CTGPL+4
CTGCAT   EQU   CTGPL+8
CTGWKA   EQU   CTGPL+12
CTGDSORG EQU   CTGPL+16
CTGDDNM  EQU   CTGPL+20
CTGNEWNM EQU   CTGDDNM
CTGFBFLG EQU   CTGNEWNM+2
CTGJSCB  EQU   CTGPL+24
CTGWA    EQU   0
CTGWAVL  EQU   CTGWA
CTGWAVCT EQU   CTGWA+6
CTGWAUCT EQU   CTGWA+8
CTGVLX   EQU   0
CTGVLTTR EQU   CTGVLX+12
EDTHDR   EQU   0
EDTLUVSP EQU   EDTHDR
EDTGENSP EQU   EDTHDR+4
EDTGRPSP EQU   EDTHDR+8
EDTUCBSP EQU   EDTHDR+12
EDTMSKTP EQU   EDTHDR+16
LUVSECT  EQU   0
LUVHDR   EQU   LUVSECT
LUVENTNO EQU   LUVHDR
LUVENTLN EQU   LUVHDR+4
LUVENTRY EQU   0
LUVALUE  EQU   LUVENTRY+8
LUVGMTP  EQU   LUVENTRY+12
LUVGENNO EQU   LUVENTRY+16
LUVGENP  EQU   LUVENTRY+20
LUVFLAGS EQU   LUVENTRY+24
GENSECT  EQU   0
GENHDR   EQU   GENSECT
GENENTLN EQU   GENHDR+4
GENENTRY EQU   0
GENDEVT  EQU   GENENTRY
GRPTRTAB EQU   0
GRPSECT  EQU   0
GRPHDR   EQU   GRPSECT
GRPENTRY EQU   0
GRPUCBP  EQU   GRPENTRY+8
EUCBSECT EQU   0
EUCBHDR  EQU   EUCBSECT
EUCBENTY EQU   0
GRMSKTAB EQU   0
GMTHDR   EQU   GRMSKTAB
GMTENTRY EQU   0
HWCNTRLP EQU   0
HWDATAP  EQU   0
HWRTNP   EQU   0
CSIOTPTR EQU   0
CJFCBPTR EQU   0
CRIP     EQU   0
RSIOTPTR EQU   0
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
JFCSPPRT EQU   JFCTRTCH
JFCDEN   EQU   JFCSPPRT+1
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCORGIS EQU   JFCDSRG1
JFCDSRG2 EQU   JFCDSORG+1
JFCORGAM EQU   JFCDSRG2
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBNVOL EQU   JFCUCSEG+9
JFCBVOLS EQU   JFCUCSEG+10
JFCBS001 EQU   JFCBVOLS
JFCMSVGP EQU   JFCBS001+22
JFCBEXAD EQU   JFCBS001+31
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBMSGP EQU   JFCBCTRI
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
JFCVRDS  EQU   JFCFLGS1
JFCBSPNM EQU   JFCBS001+45
JFCBFLG3 EQU   JFCBSPNM
NEWSERS  EQU   JFCBXVOL
@NM00044 EQU   CTGDDNM
CTGPROB  EQU   @NM00044
CTGREASN EQU   CTGPROB+2
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CTGREAS2 EQU   CTGREASN+1
CTGREAS1 EQU   CTGREASN
CTGMODID EQU   CTGPROB
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBRV08 EQU   JFCBSPNM+1
JFCBRV07 EQU   JFCBFLG3
JFCBRV06 EQU   JFCBFLG3
JFCBRV05 EQU   JFCBFLG3
JFCBRV04 EQU   JFCBFLG3
JFCBRV03 EQU   JFCBFLG3
JFCBRV02 EQU   JFCBFLG3
JFCBEXP  EQU   JFCBFLG3
JFCDQDSP EQU   JFCBFLG3
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCRSV42 EQU   JFCFLGS1
JFCBADSP EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXTL EQU   JFCBS001+30
@NM00021 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCBEXTP EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCBAXBF EQU   JFCBUFSI
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00020 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00019 EQU   JFCLIMCT
JFCPRTSP EQU   JFCSPPRT
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
GRPMASK  EQU   GMTENTRY
GMTENTLN EQU   GMTHDR+4
GMTENTNO EQU   GMTHDR
EUCBTPOS EQU   EUCBENTY
EUCBENLN EQU   EUCBHDR+4
EUCBENNO EQU   EUCBHDR
GRPUCBNO EQU   GRPENTRY+4
GRPID    EQU   GRPENTRY
GRPENTLN EQU   GRPHDR+4
GRPENTNO EQU   GRPHDR
GRPTR    EQU   GRPTRTAB
GENGRPTR EQU   GENENTRY+8
GENGRPNO EQU   GENENTRY+4
GENENTNO EQU   GENHDR
LUVAGMTP EQU   LUVENTRY+28
@NM00046 EQU   LUVFLAGS
LUVMGENS EQU   LUVFLAGS
LUVAGMSK EQU   LUVFLAGS
LUVVAM   EQU   LUVFLAGS
UNITNAME EQU   LUVENTRY
@NM00045 EQU   CTGVLX
CTGWAGB  EQU   CTGWA+12
CTGWAGCT EQU   CTGWA+10
CTGWALV  EQU   CTGWA+4
CTGFIELD EQU   CTGPL+28
CTGPSWD  EQU   CTGJSCB
@NM00043 EQU   CTGFBFLG
CTGNGDSN EQU   CTGFBFLG
CTGGDGB  EQU   CTGFBFLG
CTGKEEP  EQU   CTGFBFLG
CTGPAR   EQU   CTGFBFLG
CTGFDBK  EQU   CTGNEWNM
CTGNOFLD EQU   CTGPL+19
CTGTYPE  EQU   CTGPL+18
@NM00042 EQU   CTGDSORG
CTGOPTNS EQU   CTGDSORG
CTGCVOL  EQU   CTGCAT
CTGFVT   EQU   CTGENT
@NM00041 EQU   CTGOPTN4
CTGTIOT  EQU   CTGOPTN4
CTGBYPMT EQU   CTGOPTN4
CTGCOIN  EQU   CTGOPTN4
@NM00040 EQU   CTGOPTN4
CTGDOCAT EQU   CTGOPTN4
CTGLBASE EQU   CTGOPTN4
CTGAM0   EQU   CTGOPTN3
CTGNUM   EQU   CTGOPTN3
CTGSRH   EQU   CTGOPTN3
CTGGDGL  EQU   CTGOPTN3
CTGSUPLT EQU   CTGOPTN3
CTGFUNC  EQU   CTGOPTN3
@NM00039 EQU   CTGOPTN2
CTGSCR   EQU   CTGOPTN2
CTGOVRID EQU   CTGOPTN2
CTGDISC  EQU   CTGOPTN2
CTGGTNXT EQU   CTGOPTN2
CTGRCATN EQU   CTGVMNT
CTGGTALL EQU   CTGREL
CTGNSVS  EQU   CTGEXT
CTGGENLD EQU   CTGOPTN1
CTGCNAME EQU   CTGOPTN1
CTGNAME  EQU   CTGOPTN1
CTGREAD  EQU   CTGOPTN1
CTGUPD   EQU   CTGOPTN1
CTGCI    EQU   CTGOPTN1
CTGMAST  EQU   CTGOPTN1
CTGBYPSS EQU   CTGOPTN1
HWVLSBLN EQU   HWSELHDR
@NM00038 EQU   HWCTBYT
@NM00037 EQU   HWCTBYT
@NM00036 EQU   HWOBYTE
HWRVDEV  EQU   HWOBYTE
@NM00035 EQU   HWOBYTE
HWRSVCHR EQU   HWDATA+986
HWCONCAT EQU   HWDATA+984
HWCATSER EQU   HWDATA+978
@NM00034 EQU   HWDATA+958
HWCRI    EQU   HWDATA+220
HWDSNAME EQU   HWDATA+176
HWDSNLN  EQU   HWDATA+174
HWSTEPNO EQU   HWSTPNBR+1
@NM00033 EQU   HWSTPNBR
HWGETLN  EQU   HWDATA+168
HWGETSPN EQU   HWDATA+164
HWRSVPTR EQU   HWDATA+84
HWDSENQP EQU   HWDATA+76
HWRPDIEP EQU   HWDATA+72
HWLPDIBP EQU   HWDATA+68
HWGDGBSP EQU   HWDATA+64
HWGETADD EQU   HWDATA+52
HWCJFCBP EQU   HWDATA+48
HWCSIOTP EQU   HWDATA+44
HWCRIP   EQU   HWDATA+36
HWGDGNTP EQU   HWDATA+28
HWPDIP   EQU   HWDATA+24
HWJSCBP  EQU   HWDATA+20
HWFSIOTP EQU   HWDATA+8
HWSCTP   EQU   HWDATA+4
HWJCTP   EQU   HWDATA
@NM00032 EQU   HWCNTRL+14
@NM00031 EQU   HWCNTRL+9
@NM00030 EQU   HWJLCTLS+1
HWNOVOLU EQU   HWJLCTLS+1
HWDOMOD  EQU   HWJLCTLS+1
HWVSAME  EQU   HWJLCTLS
HWLOCCAT EQU   HWJLCTLS
HWGDGSLC EQU   HWJLCTLS
HWLBASEL EQU   HWJLCTLS
@NM00029 EQU   HWJLCTLS
HWSYSLOC EQU   HWJLCTLS
HWPDIEDL EQU   HWJLCTLS
HWPDISCN EQU   HWJLCTLS
@NM00028 EQU   HWTBLCTL
HWCOPYAF EQU   HWTBLCTL
HWTBCOPY EQU   HWTBLCTL
@NM00027 EQU   HWCNTRL+4
@NM00026 EQU   HWMSSCTL+1
HWSELDON EQU   HWMSSCTL
HWCATINT EQU   HWCNTRL+3
HWNEWVL  EQU   HWCNTRL+3
HWDDDONE EQU   HWCNTRL+3
HWGDGALL EQU   HWCNTRL+2
HWDSNRQD EQU   HWCNTRL+2
HWDSNREC EQU   HWCNTRL+2
@NM00025 EQU   HWCNTRL+1
HWNOVRID EQU   HWCNTRL+1
HWDSAUTH EQU   HWCNTRL+1
HWNODSI  EQU   HWCNTRL+1
HWEPAJCT EQU   HWCNTRL+1
HWCAJSCB EQU   HWCNTRL+1
HWDENQT  EQU   HWCNTRL+1
HWOFFDEV EQU   HWCNTRL+1
HWNOSCAT EQU   HWCNTRL
HWWVOLS  EQU   HWCNTRL
HWDNCCDD EQU   HWCNTRL
HWUNLCCT EQU   HWCNTRL
HWWAITOK EQU   HWCNTRL
HWMNTCAT EQU   HWCNTRL
HWNOULSP EQU   HWCNTRL
HWDOPDI  EQU   HWCNTRL
@NM00024 EQU   JFCBX+144
JFCBXNAM EQU   JFCBX+96
@NM00023 EQU   JFCBX+94
@NM00022 EQU   JFCBX+3
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCTEMP  EQU   JFCBIND2
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSHARE EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00018 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCBADBF EQU   INFMJFCB+60
JFCAMSTR EQU   JFCBFRID+2
JFCAMCRO EQU   JFCBFRID
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
SIODDSNL EQU   INDMSIOT+173
SIOVDSNL EQU   INDMSIOT+172
SIOVDSNT EQU   INDMSIOT+170
SVOLUNNO EQU   INDMSIOT+168
SIOTVMVP EQU   INDMSIOT+164
SIOTNPTR EQU   INDMSIOT+152
SIOTETIO EQU   INDMSIOT+148
SIOTATE  EQU   INDMSIOT+144
SVOLUNAD EQU   INDMSIOT+140
SIOTEDLP EQU   INDMSIOT+136
SIOTEDLS EQU   INDMSIOT+132
SIOTRSNC EQU   INDMSIOT+130
SCTANAME EQU   INDMSIOT+122
SIOTSSIC EQU   INDMSIOT+120
@NM00017 EQU   INDMSIOT+108
SIOTSSNM EQU   INDMSIOT+104
@NM00016 EQU   SIOTBYT2
SIOTCVOL EQU   SIOTBYT2
SIOTCNEW EQU   SIOTBYT2
SIOTCALC EQU   SIOTBYT2
SIOTDSPD EQU   SIOTBYT2
SIOTOPUC EQU   INDMSIOT+99
SIOTOUTR EQU   INDMSIOT+97
SIOTOUTC EQU   INDMSIOT+96
SIOTSSWA EQU   INDMSIOT+93
SIOTAUNC EQU   SIOTALTD
SIOTACAT EQU   SIOTALTD
SIOTADEL EQU   SIOTALTD
SIOTAKEP EQU   SIOTALTD
SIOTNPRV EQU   SIOTALTD
SIOJCATS EQU   SIOTALTD
@NM00015 EQU   SIOTALTD
@NM00014 EQU   SIOTALTD
@NM00013 EQU   INDMSIOT+91
SIOTNDSB EQU   INDMSIOT+88
@NM00012 EQU   INDMSIOT+84
SIOTDPCD EQU   INDMSIOT+82
@NM00011 EQU   SIOTBYT4
SIOTRACT EQU   SIOTBYT4
SIOTRACD EQU   SIOTBYT4
SIOTPROT EQU   SIOTBYT4
SCTOUTPN EQU   INDMSIOT+80
SCTOUTNO EQU   INDMSIOT+76
SCTOUTNM EQU   INDMSIOT+68
SIOUBYT4 EQU   SIOTDEVT+3
@NM00010 EQU   SIOUBYT3
SIO3UREC EQU   SIOUBYT3
SIO3DISP EQU   SIOUBYT3
SIO3DACC EQU   SIOUBYT3
SIO3COMM EQU   SIOUBYT3
SIO3TAPE EQU   SIOUBYT3
SIOUBYT2 EQU   SIOTDEVT+1
SIOUBYT1 EQU   SIOTDEVT
SIOTOMN  EQU   SCTSBYT4
SIOTIPDI EQU   SCTSBYT4
SIOTSTEP EQU   SCTSBYT4
SIOTASCI EQU   SCTSBYT4
@NM00009 EQU   SCTSBYT4
SIOTGDGA EQU   SCTSBYT4
SCTSGDGS EQU   SCTSBYT4
SCTSOLD  EQU   SCTSBYT3
SCTSYSOU EQU   SCTSBYT3
SCTALCHK EQU   SCTSBYT3
SCTSYSNE EQU   SCTSBYT3
SCTDSNRF EQU   SCTSBYT3
SCTDEFER EQU   SCTSBYT2
SCTLABEL EQU   SCTSBYT2
SCTJOBLB EQU   SCTSBYT2
SIOTCATL EQU   SCTSBYT2
SIOCLUNL EQU   SCTSBYT2
SIOTJSCT EQU   SCTSBYT1
SIOTQDSN EQU   SCTSBYT1
SIOTCCAT EQU   SCTSBYT1
SCTSYSIN EQU   SCTSBYT1
SIOTUNCT EQU   SCTSDISP
SIOTCTLG EQU   SCTSDISP
SIOTDLET EQU   SCTSDISP
SIOTKEEP EQU   SCTSDISP
SIOTPASS EQU   SCTSDISP
SIOTRETN EQU   SCTSDISP
SIOTVLCT EQU   INDMSIOT+54
SIOTRTRY EQU   SIOTBYT0
SIOTPUPV EQU   SIOTBYT0
SIOTNOPV EQU   SIOTBYT0
SIOTGIGN EQU   SIOTBYT0
SPVTAMSG EQU   SIOTBYT0
SIOTFUDA EQU   SIOTBYT0
SIOTDYAL EQU   SIOTBYT0
SIOTGIID EQU   INDMSIOT+50
SCTSPOOL EQU   INDMSIOT+48
SIOTQNAM EQU   SIOTTSTC
SIOTDSNM EQU   SIOTTSTC
SIOTTRKM EQU   SIOTTSTC
SIOTSSMG EQU   SIOTTSTC
SIOTSSGP EQU   SIOTTSTC
@NM00008 EQU   SIOTTSTC
SIOTTERM EQU   SIOTTSTC
SIOTINFC EQU   SIOTTSTC
@NM00007 EQU   SIOTBYT3
SIOTDSID EQU   SIOTBYT3
S3400OFF EQU   SIOTBYT3
SIOTJES3 EQU   SIOTBYT3
SIOALIAS EQU   SIOTBYT3
SIOTDDNT EQU   SIOTBYT1
SIOTALCD EQU   SIOTBYT1
SIODADSM EQU   SIOTBYT1
SIOTDADR EQU   SIOTBYT1
SIODUNAL EQU   SIOTBYT1
SIOTHOLD EQU   SIOTBYT1
SIOTOCKP EQU   SIOTBYT1
SIOPSCNT EQU   INDMSIOT+42
SIOTOTUN EQU   INDMSIOT+39
SIOTVRSB EQU   INDMSIOT+36
@NM00006 EQU   INDMSIOT+35
@NM00005 EQU   INDMSIOT+31
SCTPSIOT EQU   INDMSIOT+28
SIOTAFID EQU   INDMSIOT+26
SIOTVLSP EQU   INDMSIOT+24
SIODSNTE EQU   INDMSIOT+22
SIOTDEST EQU   INDMSIOT+12
SCTDDNAM EQU   INDMSIOT+4
SIOTTYPE EQU   INDMSIOT+3
SIOTDSKA EQU   INDMSIOT
@NM00003 EQU   @NM00002
@NM00001 EQU   DEVWORD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00170 EQU   @RC00119
@RF00176 EQU   @RC00119
@RC00244 EQU   @RC00243
@RF00251 EQU   @RC00241
@RC00324 EQU   @RC00321
@RF00323 EQU   @RC00321
@RC00362 EQU   @RC00360
@RC00462 EQU   @EL00001
@RC00467 EQU   @EL00002
@RF00510 EQU   @EL00003
@RC00326 EQU   @RC00324
@ENDDATA EQU   *
         END   IEFAB464,(C'PLS1920',0701,78054)
