         TITLE 'IEFAB421 - COMMON ALLOCATION CONTROL                   *
                        '
IEFAB421 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(24)                                          01S0001
         DC    C'IEFAB421 78124  UZ18622 '                      01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @11,0                                            01S0001
@PSTART  LA    @12,4095(,@11)                                   01S0001
         USING @PSTART,@11                                      01S0001
         USING @PSTART+4095,@12                                 01S0001
         L     @00,@SIZDATD                                     01S0001
         GSPACE   R,LV=(0)
         LR    @10,@01                                          01S0001
         USING @DATD,@10                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         LM    @00,@01,20(@13)                                  01S0001
         ST    @10,8(,@13)                                      01S0001
         LR    @13,@10                                          01S0001
         MVC   @PC00001(40),0(@01)                              01S0001
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
*REG2 = ADDR(EXITPRMS);                /*ADDR OF CORE TO CLEAR       */
         LA    REG2,EXITPRMS                                    01S0136
*REG3 = LENGTH(PRMESTAE);              /*LENGTH OF CORE TO CLEAR     */
         LA    REG3,296                                         01S0137
*REG4 = ZERO;                          /*CLEAR REG FOR MOVE LONG     */
         SLR   REG4,REG4                                        01S0138
*REG5 = ZERO;                          /*CLEAR REG FOR MOVE LONG     */
         SLR   REG5,REG5                                        01S0139
*GEN( MVCL 2,4);                                                01S0140
          MVCL 2,4
*RFY (REG2,REG3,REG4,REG5) UNRSTD;                              01S0141
*EXITP = ADDR(EXITPRMS);               /*PTR TO ESTAE PARMS          */
         LA    EXITP,EXITPRMS                                   01S0142
*RTNCODE = ZERO;                       /*INIT RETURN CODE    @Z40FPPG*/
         SLR   @08,@08                                          01S0143
         ST    @08,RTNCODE                                      01S0143
*DO;                                   /*USE SU 4 ESTAE      @G18MP21*/
*/********************************************************************/
*/*                                                          @Z40FPPG*/
*/* SEGMENT NAME - ESTAECOD                                  @Z40FPPG*/
*/*                                                          @Z40FPPG*/
*/* DESCRIPTIVE NAME - ESTAE CODE                            @Z40FPPG*/
*/*                                                          @Z40FPPG*/
*/* FUNCTION - SET UP THE APPROPRIATE ESTAE ENVIRONMENT      @Z40FPPG*/
*/*                                                          @Z40FPPG*/
*/* OPERATION -                                              @Z40FPPG*/
*/*          . AN ALLOCATION STAE WORK AREA(ASWA) IS FILLED  @Z40FPPG*/
*/*            IN. THIS ALLOWS THE ALLOCATION COMMON ESTAE   @Z40FPPG*/
*/*            EXIT (IEFAB4ED) TO ROUTE CONTROL TO THE OTHER @Z40FPPG*/
*/*            APPROPRIATE EXIT ROUTINES FOR SPECIFIC        @Z40FPPG*/
*/*            RECOVERY PROCESSING.                          @Z40FPPG*/
*/*          . IF NO ALLOCATION ESTAE IS IN EFFECT, OR IF ONE@Z40FPPG*/
*/*            IS BUT IT IS NOT THE CURRENT ESTAE,A NEW ESTAE@Z40FPPG*/
*/*            MUST BE ISSUED, THE ASWA BUILT BECOMES THE    @Z40FPPG*/
*/*            FIRST ONE IN A NEW CHAIN, IS THE EXIT PARM    @Z40FPPG*/
*/*            RECEIVED BY THE COMMON ESTAE EXIT, AND MUST   @Z40FPPG*/
*/*            PROVIDE THE AUTOMATIC CORE FOR THE DATA THAT  @Z40FPPG*/
*/*            ROUTINE USES. THE PTR TO THE LAST ASWA OF AN  @Z40FPPG*/
*/*            EARLIER ALLOCATION ESTAE, IF ANY, IS SAVED IN @Z40FPPG*/
*/*            THIS ASWA. NOTE THAT THE STAE CONTROL BLOCK   @Z40FPPG*/
*/*            ADDRESS IN THE ASWA IS NOT UPDATED UNTIL AFTER@Z40FPPG*/
*/*            THE ESTAE IS ISSUED SO THAT IT REFLECTS THE   @Z40FPPG*/
*/*            CURRENT ONE.                                  @Z40FPPG*/
*/*          . IF THE CURRENT ESTAE IN EFFECT IS ALLOCATION'S@Z40FPPG*/
*/*            IT CAN BE USED TO PROVIDE THIS ROUTINES NECES-@Z40FPPG*/
*/*            SARY RECOVERY ENVIRONMENT. THE SCB ADDRESS    @Z40FPPG*/
*/*            IS COPIED FROM THE MOST RECENT ASWA, TO WHICH @Z40FPPG*/
*/*            THE CHAIN PTR OF THIS NEW ASWA WILL POINT BACK@Z40FPPG*/
*/*          . THE ADDRESS OF THE NEW ASWA IS PLACED IN      @Z40FPPG*/
*/*            THE JSCB AS THE LAST ONE IN THE CHAIN FOR THE @Z40FPPG*/
*/*            CURRENT ALLOCATION ESTAE                      @Z40FPPG*/
*/*                                                          @Z40FPPG*/
*/* ENTRY - INLINE SUBROUTINE ENTERED AT THE TOP             @Z40FPPG*/
*/*                                                          @Z40FPPG*/
*/*   PURPOSE - SEE FUNCTION                                 @Z40FPPG*/
*/*                                                          @Z40FPPG*/
*/*   INPUT -                                                @Z40FPPG*/
*/*        .JSCBASWA - PTR TO LAST ASWA ON CHAIN, IF ANY     @Z40FPPG*/
*/*        .TCBSTABB - PTR TO CURRENT STAE CONTROL BLOCK     @Z40FPPG*/
*/*        .EXITP - PTR TO ESTAE PARMS                       @Z40FPPG*/
*/*        .RTNCODE - RETURN CODE - ZERO ONE ENTRY           @Z40FPPG*/
*/*                                                          @Z40FPPG*/
*/* EXIT - INLINE SUBROUTINE THAT EXITS AT THE BOTTOM        @Z40FPPG*/
*/*                                                          @Z40FPPG*/
*/*   CONDITION - ESTAE SETUP COMPLETED                      @Z40FPPG*/
*/*                                                          @Z40FPPG*/
*/*   OUTPUT -                                               @Z40FPPG*/
*/*           .ASWA - FILLED IN AND PLACED ON THE CHAIN      @Z40FPPG*/
*/*           .JSCBASWA - POINTS TO ASWA AS LAST ON CHAIN    @Z40FPPG*/
*/*           .ISSUESTA - ON IF ESTAE ISSUED                 @Z40FPPG*/
*/*                                                          @Z40FPPG*/
*/*   RETURN CODES - RTNCODE HAS ESTAE RETURN CODE           @Z40FPPG*/
*/*                  IF ONE WAS ISSUED. (ZERO OTHERWISE)     @Z40FPPG*/
*/*                                                          @Z40FPPG*/
*/********************************************************************/
*ASWAPTR = ADDR(ASWACORE);             /*ADDRESS ASWA CORE   @Z40FPPG*/
         LA    @15,ASWACORE                                     02S0145
         ST    @15,ASWAPTR                                      02S0145
*ASWA = ASWA && ASWA;                  /*ZERO OUT ASWA       @Z40FPPG*/
         XC    ASWA(40,@15),ASWA(@15)                           02S0146
*ASWAID =CHARASWA;                     /*FILL IN BLOCK ID    @Z40FPPG*/
         MVC   ASWAID(4,@15),@CC00100                           02S0147
*ASWACSCT = EXITCSCT;                  /*CSECT NAME OF EXIT  @Z40FPPG*/
         MVC   ASWACSCT(8,@15),@CC00103                         02S0148
*ASWARTNP = ADDR(IEFAB4E8);            /*ADDRESS OF EXIT RTN @Z40FPPG*/
         L     @14,@CV00136                                     02S0149
         STCM  @14,15,ASWARTNP(@15)                             02S0149
*ASWAPRMS = EXITP;                     /*PARMS FOR THIS EXIT @Z40FPPG*/
         STCM  EXITP,15,ASWAPRMS(@15)                           02S0150
*ASWACOMF = ON;                        /*CHECK FOR PERCOLATION  02S0151
*                                                            @Z40FPPG*/
         OI    ASWACOMF(@15),B'01000000'                        02S0151
*ISSUESTA = OFF;                       /*INIT. ESTAE SW      @Z40FPPG*/
         NI    ISSUESTA,B'01111111'                             02S0152
*IF JSCBASWA = ZERO   ×                /*NO ALLOC ESTAE IN EFFECT OR
*                                                            @Z40FPPG*/
*   JSCBASWA -> ASWASCBP ^= TCBSTABB THEN /*ITS NOT THE CURRENT ONE
*                                                             @Z40FPPG*
         L     @15,@PC00001+8                                   02S0153
         L     @01,PPJSCBP(,@15)                                02S0153
         L     @15,JSCBASWA(,@01)                               02S0153
         CR    @15,@08                                          02S0153
         BE    @RT00153                                         02S0153
         L     @08,@PC00001+20                                  02S0153
         L     @08,TCBPTR(,@08)                                 02S0153
         ICM   @14,15,ASWASCBP(@15)                             02S0153
         L     @08,TCBSTABB-1(,@08)                             02S0153
         LA    @08,0(,@08)                                      02S0153
         CR    @14,@08                                          02S0153
         BE    @RF00153                                         02S0153
@RT00153 DS    0H                                               02S0154
*  DO;                                 /*PROCESS NEW ESTAE   @Z40FPPG*/
*    ISSUESTA = ON;                    /*SAY ESTAE ISSUED    @Z40FPPG*/
         OI    ISSUESTA,B'10000000'                             02S0155
*    ASWAAUTO = ADDR(AB4EDPMS);        /*1ST ASWA GIVES W/A  @Z40FPPG*/
         L     @08,ASWAPTR                                      02S0156
         LA    @15,AB4EDPMS                                     02S0156
         STCM  @15,15,ASWAAUTO(@08)                             02S0156
*    ASWAOLDP = JSCBASWA;              /*OLD LAST IF ANY     @Z40FPPG*/
         L     @15,@PC00001+8                                   02S0157
         L     @01,PPJSCBP(,@15)                                02S0157
         MVC   ASWAOLDP(4,@08),JSCBASWA(@01)                    02S0157
*    RFY (REG2,REG3) RSTD;             /*RESTRICT WORK REGS  @Z40FPPG*/
*    REG2 = ADDR(IEFAB4ED);            /*COMMON ESTAE EXIT   @Z40FPPG*/
         L     REG2,@CV00135                                    02S0159
*    REG3 = ASWAPTR;                   /*ASWA IS EXIT PARMS  @Z40FPPG*/
         LR    REG3,@08                                         02S0160
*    ESTAECOR(1:ESTAELNG) = ESTAELST(1:ESTAELNG);               02S0161
         L     @08,ESTAELNG                                     02S0161
         BCTR  @08,0                                            02S0161
         EX    @08,@SM03686                                     02S0161
*                                      /*MOVE TO AUTO CORE   @Z40FPPG*/
*    GEN REFS(ESTAECOR) SETS(REG15,TCBSTABB);                   02S0162
      ESTAE (2),PARAM=(3),MF=(E,ESTAECOR)
*    RFY (REG2,REG3) UNRSTD;                                    02S0163
*    RTNCODE = REG15;                  /*SAVE RETURN CODE    @Z40FPPG*/
         ST    REG15,RTNCODE                                    02S0164
*    IF RTNCODE = ZERO THEN            /*IF ESTAE SUCCESSFUL @Z40FPPG*/
         L     @08,RTNCODE                                      02S0165
         LTR   @08,@08                                          02S0165
         BNZ   @RF00165                                         02S0165
*      ASWASCBP = TCBSTABB;            /* CURRENT SCB        @Z40FPPG*/
         L     @08,@PC00001+20                                  02S0166
         L     @08,TCBPTR(,@08)                                 02S0166
         L     @08,TCBSTABB-1(,@08)                             02S0166
         LA    @08,0(,@08)                                      02S0166
         L     @01,ASWAPTR                                      02S0166
         STCM  @08,15,ASWASCBP(@01)                             02S0166
*  END;                                /*END IF ESTAE ISSUED @Z40FPPG*/
*ELSE                                  /*CURRENT IS ALLOC'S  @Z40FPPG*/
*  DO;                                 /*USE EXISTING ESTAE  @Z40FPPG*/
         B     @RC00153                                         02S0168
@RF00153 DS    0H                                               02S0169
*    ASWASCBP = JSCBASWA -> ASWASCBP;  /*SCB @ FROM LAST ASWA@Z40FPPG*/
         L     @08,ASWAPTR                                      02S0169
         L     @15,@PC00001+8                                   02S0169
         L     @01,PPJSCBP(,@15)                                02S0169
         L     @15,JSCBASWA(,@01)                               02S0169
         MVC   ASWASCBP(4,@08),ASWASCBP(@15)                    02S0169
*    ASWACHNP = JSCBASWA;              /*POINT BACK TO LAST  @Z40FPPG*/
         STCM  @15,15,ASWACHNP(@08)                             02S0170
*  END;                                /*CURRENT ESTAE USED  @Z40FPPG*/
*IF RTNCODE = ZERO THEN                /*IF NO ERROR         @Z40FPPG*/
@RC00153 SLR   @08,@08                                          02S0172
         C     @08,RTNCODE                                      02S0172
         BNE   @RF00172                                         02S0172
*  DO;                                 /*PUT ASWA ONTO CHAIN @Z40FPPG*/
*     DO; /*MODESET  KEYADDR(ZERO)*/                            02S0174
*       SPKA (ZERO); /*SET PSW KEY*/                            02S0175
         SPKA  0(@08)                                           02S0175
*     END; /*MODESET  KEYADDR(ZERO)*/           /*KEY TO UPDATE JSCB  @
*40FPPG*/                                                       02S0176
*    JSCBASWA = ASWAPTR;               /*NEW LAST ASWA PTR   @Z40FPPG*/
         L     @08,@PC00001+8                                   02S0177
         L     @08,PPJSCBP(,@08)                                02S0177
         L     @15,ASWAPTR                                      02S0177
         ST    @15,JSCBASWA(,@08)                               02S0177
*     DO; /*MODESET  EXTKEY(SCHED)*/                            02S0178
*       SPKA (16); /*SET PSW KEY*/                              02S0179
         LA    @08,16                                           02S0179
         SPKA  0(@08)                                           02S0179
*     END; /*MODESET  EXTKEY(SCHED)*/           /*BACK TO SCHED KEY   @
*40FPPG*/                                                       02S0180
*  END;                                /*END IF NO ERROR     @Z40FPPG*/
*END;                                  /*END SU 4 ESTAE      @G18MP21*/
@RF00172 DS    0H                                               01S0183
*IF RTNCODE = ZERO THEN                /*ESTAE SET UP OK?    @Z40FPPG*/
         SLR   @08,@08                                          01S0183
         C     @08,RTNCODE                                      01S0183
         BNE   @RF00183                                         01S0183
*  DO;                                                          01S0184
*    RFY PRMESTAE BASED(EXITP);                                 01S0185
*    RTNCODE = SUCCESS;                /*INITIALIZE RETURN CODE TO 0 */
         ST    @08,RTNCODE                                      01S0186
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - INITWORK                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - INITIALIZE COMMON ALLOCATION WORKAREA         */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THE PURPOSE OF THIS CODE SEGMENT IS TO OBTAIN CORE FOR AND     */
*/*   INITIALIZE THE ALLOCATION WORKAREA (ALCWA).                    */
*/*                                                                  */
*/*   .OBTAINING CORE                                                */
*/*      THE SIZE OF WORKAREA NEEDED IS A FIXED LENGTH.              */
*/*                                                                  */
*/* ENTRY - THIS CODE IS AN INLINE SUBROUTINE WHICH IS ENTERED       */
*/*         AT THE TOP.                                              */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*         SAME INPUT DATA AS FOR MODULE IEFAB421 (COMMON           */
*/*         ALLOCATION CONTROL).                                     */
*/*                                                                  */
*/* EXITS - THIS CODE IS AN INLINE SUBROUTINE WHICH EXITS AT         */
*/*         THE BOTTOM.                                              */
*/*                                                                  */
*/*   CONDITION - NORMAL - ALCWA INITIALIZED                         */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*            ALCWAPTR - POINTER TO ALLOCATION WORK AREA            */
*/*            ALCWA - REQUIRED FIELDS INITIALIZED (SEE FUNCTION),   */
*/*                    ALL OTHER FIELDS 0                            */
*/*                                                                  */
*/*     RETURN CODE - RTNCODE - 0                                    */
*/*                                                                  */
*/*   CONDITION - ERROR - NO CORE FOR ALCWA                          */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*            FAILRSC - 2  - GETMAIN ERROR REASON CODE              */
*/*                                                                  */
*/*     RETURN CODE - RTNCODE - 4                                    */
*/*                                                                  */
*/********************************************************************/
*ASIDT = ASCBASID;                     /*OBTAIN ASID         @Z40FPPD*/
         L     @08,PSAAOLD                                      02S0187
         MVC   ASIDT(2),ASCBASID(@08)                           02S0187
*GETSIZE = LENGTH(ALCWA);              /*DETERMINE SIZE OF WORKAREA  */
         LA    GETSIZE,168                                      02S0188
* /* ?GETSTORG (SUBPOOL,GETSIZE,ALCWAPTR);*/                    02S0189
*   /* DEFINITIONS OF GETMAIN PARMS */                          02S0189
*   DCL                                                         02S0189
*     GTSTR0   FIXED(31) REG(0),/*GTMN PARM REG*/               02S0189
*     GTSTR1   FIXED(31) REG(1),/*GTMN PARM REG*/               02S0189
*     GTSTR2   PTR(31)   REG(2),/*GTMN PARM REG*/               02S0189
*     GTSTR15  FIXED(31) REG(15),/*GTMN RET COD*/               02S0189
*     GTSTRTCD FIXED(31); /* GETMAIN RTN CODE  */               02S0189
*   DCL                                                         02S0190
*     GTSTR3   FIXED(31) REG(3),/* CLEARING REG*/               02S0190
*     GTSTR4   FIXED(31) REG(4),/* CLEARING REG*/               02S0190
*     GTSTR5   FIXED(31) REG(5),/* CLEARING REG*/               02S0190
*     GTSTR6   FIXED(31) REG(6),/* CLEARING REG*/               02S0190
*     GTSTR7   FIXED(31) REG(7),/* CLEARING REG*/               02S0190
*     GTSTR8   FIXED(31) REG(8),/* CLEARING REG*/               02S0190
*     GTSTZERO FIXED(31) INIT(0),                               02S0190
*     GTST253  FIXED(31) CONSTANT(253);                         02S0190
*   RFY (GTSTR0,GTSTR1,GTSTR2) RSTD; /*SAVE RGS*/               02S0191
*   GTSTR0 = GETSIZE; /* SET AMOUNT*/                           02S0192
         LR    GTSTR0,GETSIZE                                   02S0192
*   GTSTR2 = SUBPOOL; /* SET SUBPOOL*/                          02S0193
         LA    GTSTR2,230                                       02S0193
*   GENERATE CODE;                                              02S0194
     GETMAIN RC,LV=(0),SP=(2)  DO GETMAIN
*   GTSTRTCD = GTSTR15; /* SAVE GETMAIN RET COD*/               02S0195
         ST    GTSTR15,GTSTRTCD                                 02S0195
*   ALCWAPTR = GTSTR1; /* ADDR OF GOTN STORG*/                  02S0196
         ST    GTSTR1,ALCWAPTR                                  02S0196
*   RFY (GTSTR0,GTSTR1,GTSTR2) UNRSTD; /*RLSE */                02S0197
*   IF GTSTRTCD = 0 THEN /*GETMAIN SUCCESSFUL? */               02S0198
         L     @08,GTSTRTCD                                     02S0198
         LTR   @08,@08                                          02S0198
         BNZ   @RF00198                                         02S0198
*     DO;               /* YES, CLEAR STORAGE.*/                02S0199
*       RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                       02S0200
*                          GTSTR7,GTSTR8) RSTD;                 02S0200
*       GTSTR4 = ALCWAPTR; /*STORG PTR*/                        02S0201
         L     @15,ALCWAPTR                                     02S0201
         LR    GTSTR4,@15                                       02S0201
*       GTSTR5 = GETSIZE; /*STORG AMNT*/                        02S0202
         LR    GTSTR5,GETSIZE                                   02S0202
*       GTSTR7 = '00000000'X; /*PAD CHAR & LNTH*/               02S0203
         SLR   GTSTR7,GTSTR7                                    02S0203
*       IF SUBPOOL = GTST253 THEN                               02S0204
         B     @RF00204                                         02S0204
*      GEN                                                      02S0205
*   (MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8);           02S0205
         MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8
*       GEN REFS(GTSTR4,GTSTR6);                                02S0206
@RF00204 DS    0H                                               02S0206
          MVCL  GTSTR4,GTSTR6 CLEAR GOTTEN STORG
*       IF SUBPOOL = GTST253 THEN                               02S0207
         B     @RF00207                                         02S0207
*         GEN (MODESET KEYADDR=(2));                            02S0208
         MODESET KEYADDR=(2)
*       RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                       02S0209
*                          GTSTR7,GTSTR8) UNRSTD;               02S0209
@RF00207 DS    0H                                               02S0210
*     END;       /* STORAGE CLEARING COMPLETED */               02S0210
*   ELSE                                                        02S0211
*   ALCWAPTR= 0;   /* CLEAR RETURN ADDR. */                     02S0211
         B     @RC00198                                         02S0211
@RF00198 SLR   @08,@08                                          02S0211
         ST    @08,ALCWAPTR                                     02S0211
*   GTSTR15 = GTSTRTCD;    /* GTMN RETURN CODE */               02S0212
@RC00198 L     GTSTR15,GTSTRTCD                                 02S0212
*                                      /* RESTORE LIST PRINT STATUS  */
* /*GET CORE FOR WORKAREA       */                              02S0213
*RTNCODE = REG15;                      /*SAVE RETURN CODE            */
         ST    REG15,RTNCODE                                    02S0213
*IF RTNCODE = SUCCESS THEN             /*WAS GETMAIN SUCCESSFUL      */
         L     @08,RTNCODE                                      02S0214
         SLR   @02,@02                                          02S0214
         CR    @08,@02                                          02S0214
         BNE   @RF00214                                         02S0214
*  DO;                                 /*YES,INITIALIZE WORKAREA     */
*    EXITPRMP = EXITP;                 /*ESTAE PARM LIST PTR TO ALCWA*/
         L     @08,ALCWAPTR                                     02S0216
         ST    EXITP,EXITPRMP(,@08)                             02S0216
*    WASIZE = GETSIZE;                 /*STORE SIZE OF GETMAIN       */
         ST    GETSIZE,WASIZE(,@08)                             02S0217
*    FMAPPTR = ADDR(INFUNMAP);         /*STORE FUNCTION MAP ADDRESS  */
         L     @03,@PC00001                                     02S0218
         ST    @03,FMAPPTR(,@08)                                02S0218
*    SIOT1P = SIOT1PTR;                /*STORE PTR TO FIRST SIOT     */
         L     @03,@PC00001+4                                   02S0219
         L     @03,SIOT1PTR(,@03)                               02S0219
         ST    @03,SIOT1P(,@08)                                 02S0219
*    JSCBPTR = PPJSCBP;                /*STORE PTR TO JSCB           */
         L     @03,@PC00001+8                                   02S0220
         L     @03,PPJSCBP(,@03)                                02S0220
         ST    @03,JSCBPTR(,@08)                                02S0220
*    IOSLUTP = LUTPTR;                 /*STORE PTR TO LOOKUP TABLE   */
         L     @15,@PC00001+12                                  02S0221
         L     @15,LUTPTR(,@15)                                 02S0221
         ST    @15,IOSLUTP(,@08)                                02S0221
*    FAILRSCP = ADDR(FAILRSC);         /*STORE PTR TO REASON CODE    */
         L     @15,@PC00001+16                                  02S0222
         ST    @15,FAILRSCP(,@08)                               02S0222
*    EDTABPTR = ADDR(EDTTAB);          /*STORE PTR TO SYSGEN TABLES  */
         L     @15,@CA00726                                     02S0223
         ST    @15,EDTABPTR(,@08)                               02S0223
*    TCBP = TCBPTR;                    /*STORE PTR TO TCB            */
         L     @15,@PC00001+20                                  02S0224
         L     @15,TCBPTR(,@15)                                 02S0224
         ST    @15,TCBP(,@08)                                   02S0224
*    TIOTHDRP = TIOTP;                 /*STORE PTR TO TIOT           */
         L     @15,@PC00001+24                                  02S0225
         L     @15,TIOTP(,@15)                                  02S0225
         ST    @15,TIOTHDRP(,@08)                               02S0225
*    NAMES = TOPTIOT;                  /*COPY JOB,STEP, AND PROCSTEP
*                                        NAMES                       */
         MVC   NAMES(24,@15),TOPTIOT(@15)                       02S0226
*    CANCELP = STOPECBP;               /*STORE PTR TO CANCEL ECB     */
         L     @15,@PC00001+28                                  02S0227
         L     @15,STOPECBP(,@15)                               02S0227
         ST    @15,CANCELP(,@08)                                02S0227
*    ALCWASID = ASIDT;                 /*ASID TO ALCWA FROM EXTRACT  */
         MVC   ALCWASID(2,@08),ASIDT                            02S0228
*    PRMASID = ALCWASID;               /*ASID TO ESTAE PARMS         */
         LH    @15,ALCWASID(,@08)                               02S0229
         N     @15,@CF03688                                     02S0229
         STH   @15,PRMASID(,EXITP)                              02S0229
*    ALCNUCBS=JESNUCBS;                /*STORE NUMBER OF UCBS IN
*                                        SYSTEM              @Z40FPPJ*/
         L     @15,CVTPTR                                       02S0230
         L     @01,CVTJESCT(,@15)                               02S0230
         L     @14,JESNUCBS(,@01)                               02S0230
         ST    @14,ALCNUCBS(,@08)                               02S0230
*    IF SU29BIT = ON THEN              /*IS SU 29 INSTALLED? @G29AN2F*/
         L     @01,CVTIHASU(,@15)                               02S0231
         TM    SU29BIT(@01),B'00000100'                         02S0231
         BNO   @RF00231                                         02S0231
*      DO;                             /*YES, SET ALCWA FLDS @G29AN2F*/
*        SSERBLKP = SSEBLKP;           /*SET PTR TO ERR BLK  @G29AN2F*/
         L     @15,@PC00001+36                                  02S0233
         L     @15,SSEBLKP(,@15)                                02S0233
         ST    @15,SSERBLKP(,@08)                               02S0233
*        IF JSCBSSIB ^= ZERO THEN      /*IS THERE AN SSIB?   @G29AN2F*/
         L     @08,JSCBSSIB(,@03)                               02S0234
         CR    @08,@02                                          02S0234
         BE    @RF00234                                         02S0234
*          DSUBSYSN = SSIBSSNM;        /*YES, GET SUBSYSTEM     02S0235
*                                        NAME FROM SSIB      @G29AN2F*/
         MVC   DSUBSYSN(4),SSIBSSNM(@08)                        02S0235
*        ELSE                          /*NO SSIB             @G29AN2F*/
*          DSUBSYSN = ZERO;            /*SET NULL NAME       @G29AN2F*/
         B     @RC00234                                         02S0236
@RF00234 SLR   @08,@08                                          02S0236
         STCM  @08,15,DSUBSYSN                                  02S0236
*        LOJSSNMP = ADDR(DSUBSYSN);    /*SET PTR TO SUBSYSTEM   02S0237
*                                        NAME                @G29AN2F*/
@RC00234 LA    @08,DSUBSYSN                                     02S0237
         L     @01,ALCWAPTR                                     02S0237
         ST    @08,LOJSSNMP(,@01)                               02S0237
*      END;                            /*END SU 29 PROCESS   @G29AN2F*/
*  END;                                                         02S0239
*ELSE                                  /*FAILED TO OBTAIN SPACE      */
*  DO;                                                          02S0240
         B     @RC00214                                         02S0240
@RF00214 DS    0H                                               02S0241
*    FAILRSC = GETERRCD;               /*SET REASON CODE TO INDICATE
*                                        GETMAIN ERROR               */
         L     @08,@PC00001+16                                  02S0241
         MVC   FAILRSC(2,@08),@CH00065                          02S0241
*  END;                                                         02S0242
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME = OFFLINES                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - PROCESS UNALLOCATED, PENDING-OFFLINE UNITS,   */
*/*                    UNALLOCATED,PENDING-UNLOAD UNITS AND PENDING  */
*/*                    CONSOLE.                                      */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THE PURPOSE OF THIS CODE SEGMENT IS 1) TO DISASSOCIATE FROM THE*/
*/*   SYSTEM ANY UNITS WHICH ARE UNALLOCATED AND PENDING OFFLINE AND */
*/*   2) TO UNLOAD ANY UNITS THAT ARE UNALLOCATED AND PENDING UNLOAD.*/
*/*   IF PENDING UNLOAD,VOLUME MOUNT AND VERIFY IS CALLED TO UNLOAD  */
*/*   THE VOLUME. THE PROCESSING TO VARY A UNIT OFFLINE FOLLOWS:     */
*/*     .THE FOLLOWING FIELDS IN THE UCB FOR THE DEVICE ARE          */
*/*      CLEARED:                                                    */
*/*              .STATUS B BYTE  (TAPE AND DA UNITS ONLY)            */
*/*              .DATA MANAGEMENT COUNT (TAPE AND DA UNITS ONLY)     */
*/*              .TRACK ADDRESS OF THE VTOC ( DA UNITS ONLY)         */
*/*              .DATA SET SEQUENCE INFO (TAPE UNITS ONLY)           */
*/*              .VOLUME SERIAL NUMBER (TAPE AND DA UNITS ONLY)      */
*/*              .RESERVED BIT                                       */
*/*              .ONLINE BIT                                         */
*/*              .VARY-OFFLINE BIT                                   */
*/*              .ATTENTION TABLE INDEX                              */
*/*                                                                  */
*/*     .A MESSAGE IS WRITTEN TO THE OPERATOR INDICATING THAT THE    */
*/*      DEVICE IS NOW OFFLINE. THE MESSAGE IS ROUTED ACCORDING      */
*/*      TO THE DEVICE TYPE OF THE UNIT MADE OFFLINE.                */
*/*     .IF THE UNIT IS A TAPE DEVICE WHICH CORRENTLY                */
*/*      HAS A VOLUME MOUNTED ON IT, VOLUME MOUNT AND VERIFY         */
*/*      IS CALLED TO UNLOAD THE VOLUME.                             */
*/*                                                                  */
*/*  NOTE:                                                           */
*/*      WHILE DISASSOCIATING A UNIT FROM THE SYSTEM, THIS PROCESSING*/
*/*      MUST BE SERIALIZED WITH ALL ALLOCATIONS; THEREFORE THIS     */
*/*      PROCESS ENQS EXCLUSIVELY (MAJOR NAME = SYSIEFSD, MINOR NAME */
*/*      = Q4 AND CHNGDEVS). IF, AFTER A 1 SECOND WAIT THE EXCLUSIVE */
*/*      ENQ CANNOT BE COMPLETED, OFFLINE OR UNLOAD PROCESSING IS    */
*/*      BYPASSED.                                                   */
*/*                                                                  */
*/*     .IF SMF IS REQUESTED, AN SMF VARY OFFLINE RECORD WILL BE     */
*/*      ISSUED.                                                     */
*/*                                                                  */
*/* ENTRY - THIS CODE IS AN INLINE SUBROUTINE WHICH IS ENTERED       */
*/*         AT THE TOP.                                              */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*         .POINTER TO THE IOS UCB LOOKUP TABLE.                    */
*/*                                                                  */
*/* EXITS - THIS CODE IS AN INLINE SUBROUTINE WHICH EXITS            */
*/*         FROM THE BOTTOM.                                         */
*/*                                                                  */
*/*   CONDITION - ALL UNALLOCATED, PENDING-OFFLINE AND PENDING-UNLOAD*/
*/*               UNITS AND PENDING CONSOLES ARE PROCESSED.          */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*        .SOME UCBS ALTERED TO MAKE UNITS OFFLINE/UNLOADED.        */
*/*        .IF REQUESTED, SMF RECORDS ARE WRITTEN FOR EACH           */
*/*         UNIT MADE OFFLINE.                                       */
*/*        .FOR EACH UNIT MADE OFFLINE OR UNLOADED, A MESSAGE IS     */
*/*         WRITTEN TO THE OPERATOR.                                 */
*/*        .IF A TAPE UNIT WITH A VOLUME MOUNTED IS MADE OFFLINE,    */
*/*         THEN VM&V IS REQUESTED TO UNLOAD THE VOLUME.             */
*/*                                                                  */
*/*   RETURN CODE - (NONE)                                           */
*/*                                                                  */
*/********************************************************************/
*IF MSSUM=ON THEN                       /*PENDING OFFLINES/UNLOADS?  */
@RC00214 LA    @08,136                                          02S0243
         L     @01,CVTPTR                                       02S0243
         AL    @08,CVTMSER(,@01)                                02S0243
         TM    MSSUM(@08),B'00000001'                           02S0243
         BNO   @RF00243                                         02S0243
*  DO;                                  /*YES                        */
*      DO; /*MODESET  KEYADDR(ZERO)*/                           02S0245
*        SPKA (ZERO); /*SET PSW KEY*/                           02S0246
         SLR   @01,@01                                          02S0246
         SPKA  0(@01)                                           02S0246
*      END; /*MODESET  KEYADDR(ZERO)*/                          02S0247
*    MSSUM=OFF;                         /*TURN OFF PENDING BIT IN CVT*/
         L     @15,MSSUM-3(,@08)                                02S0248
@GL00002 LR    @14,@15                                          02S0248
         N     @14,@CF03689                                     02S0248
         CS    @15,@14,MSSUM-3(@08)                             02S0248
         BNE   @GL00002                                         02S0248
*      DO; /*MODESET  EXTKEY(SCHED)*/                           02S0249
*        SPKA (16); /*SET PSW KEY*/                             02S0250
         LA    @08,16                                           02S0250
         SPKA  0(@08)                                           02S0250
*      END; /*MODESET  EXTKEY(SCHED)*/                          02S0251
*    MSSUMSW = OFF;                     /*INIT TURN ON MSSUM SWITCH  */
         NI    MSSUMSW,B'01111111'                              02S0252
*    ENQLIST=ALOCENQ2;                  /*ENQ LIST FOR EXCLUSIVE ENQ
*                                         ON CHNGDEVS                */
         MVC   ENQLIST(12),ALOCENQ2                             02S0253
*    ENQCORE3(ONE:ENQLEN3) = ALOCENQ3(ONE:ENQLEN3); /*ENQ LIST FOR
*                                         EXCLUSIVE Q4 ENQ WITH ECB
*                                         OPTION                     */
         L     @08,ENQLEN3                                      02S0254
         BCTR  @08,0                                            02S0254
         EX    @08,@SM03692                                     02S0254
*    ENQCORE4(ONE:ENQLEN4) = ALOCENQ4(ONE:ENQLEN4); /*ENQ LIST FOR
*                                         EXCLUSIVE CHNGDEVS ENQ
*                                         WITH ECB OPTION            */
         L     @08,ENQLEN4                                      02S0255
         BCTR  @08,0                                            02S0255
         EX    @08,@SM03694                                     02S0255
*    DEQLIST = ALLOCDEQ;                /*DEQ CHGDEVS AND Q4 @Z40FPPD*/
         MVC   DEQLIST(24),ALLOCDEQ                             02S0256
*    DO LUTENTNO=START BY ONE WHILE(IOSLUT(LUTENTNO)^=IOSLTEND);
         LA    @08,1                                            02S0257
         STH   @08,LUTENTNO                                     02S0257
         B     @DE00257                                         02S0257
@DL00257 DS    0H                                               02S0258
*                                       /*SEARCH IOS LOOKUP TABLE    */
*      DOOFLNSW=OFF;                    /*TURN OFFLINE&UNLOAD SW OFF */
         NI    DOOFLNSW,B'01111111'                             02S0258
*      SAVERTNC=ZERO;                   /*ZERO RETURN AREA           */
         SLR   @08,@08                                          02S0259
         ST    @08,SAVERTNC                                     02S0259
*      IF IOSLUT(LUTENTNO) ^= NOUCBADR THEN /*IS THERE A UCB ADDR?   */
         LH    @15,LUTENTNO                                     02S0260
         ALR   @15,@15                                          02S0260
         L     @14,@PC00001+12                                  02S0260
         L     @01,LUTPTR(,@14)                                 02S0260
         BCTR  @01,0                                            02S0260
         BCTR  @01,0                                            02S0260
         LH    @15,IOSLUT(@15,@01)                              02S0260
         N     @15,@CF03688                                     02S0260
         LTR   @15,@15                                          02S0260
         BZ    @RF00260                                         02S0260
*        DO;                            /*YES                        */
*          UCBPTR=IOSLUT(LUTENTNO);     /*POINT TO UCB               */
         LR    UCBPTR,@15                                       02S0262
*          IF UCB3DACC=OFF & UCB3TAPE=OFF & UCBONLI=ON &        02S0263
*               UCBDADI=ON THEN         /*CONSOLE TO BE CHANGED FROM
*                                         ONLINE UNALLOCATED TO ACTIVE
*                                         CONSOLE?                   */
         TM    UCB3DACC(UCBPTR),B'10100000'                     02S0263
         BNZ   @RF00263                                         02S0263
         TM    UCBONLI(UCBPTR),B'10000001'                      02S0263
         BNO   @RF00263                                         02S0263
*           DO;                                                 02S0264
*            IF UCBALOC=OFF THEN        /*IS CONSOLE UNALLOCATED?    */
         TM    UCBALOC(UCBPTR),B'00001000'                      02S0265
         BNZ   @RF00265                                         02S0265
*              DO;                      /*YES                        */
*                ENQCOREP = ADDR(ENQCORE3); /*SAVE PTR TO ENQ LIST   */
         LA    ENQCOREP,ENQCORE3                                02S0267
*                ENQECB = ZERO;             /*CLEAR ENQ ECB          */
         SLR   @07,@07                                          02S0268
         ST    @07,ENQECB                                       02S0268
*                ENQQ4 = ON;           /*SET ESTAE INDICATOR         */
*                CHNGQ = ON;           /*SET ESTAE INDICATOR         */
         OI    ENQQ4(EXITP),B'10100000'                         02S0270
*                RFY (REG3) RSTD;                               02S0271
*                REG3 = ADDR(ENQECB);  /*PTR TO ENQ ECB              */
         LA    REG3,ENQECB                                      02S0272
*                ECBOFF = ON;          /*TURN ECB INDICATOR ON       */
         OI    ECBOFF(ENQCOREP),B'00000100'                     02S0273
*                GEN REFS(ENQCORE3);   /*ENQ ON Q4                   */
                ENQ ECB=(3),MF=(E,ENQCORE3)
*                RFY (REG3) UNRSTD;                             02S0275
*                ENQRTNP = REG15;      /*SAVE ENQ RETURN CODE        */
         LR    ENQRTNP,REG15                                    02S0276
*                CALL TESTENQ;         /*SEE IF ENQ SUCCESSFUL       */
         BAL   @14,TESTENQ                                      02S0277
*                IF ENQOKSW = ON THEN   /*ENQ COMPLETED SUCCESSFULLY */
         TM    ENQOKSW,B'10000000'                              02S0278
         BNO   @RF00278                                         02S0278
*                  DO;                                          02S0279
*                    GEN REFS(ENQLIST);                         02S0280
                    ENQ MF=(E,ENQLIST)
*                    IF UCBALOC=OFF THEN  /*STILL UNALLOCATED?       */
         TM    UCBALOC(UCBPTR),B'00001000'                      02S0281
         BNZ   @RF00281                                         02S0281
*                      DO;              /*YES                        */
*                          DO; /*MODESET  KEYADDR(ZERO)*/       02S0283
*                            SPKA (ZERO); /*SET PSW KEY*/       02S0284
         SLR   @01,@01                                          02S0284
         SPKA  0(@01)                                           02S0284
*                          END; /*MODESET  KEYADDR(ZERO)*/      02S0285
*                        UCBDADI=OFF;   /*TURN OFF PENDING BIT       */
*                        UCBSYSR=ON;    /*TURN ON PRIMARY CONSOLE BIT*/
         OI    UCBSYSR(UCBPTR),B'00000010'                      02S0287
         NI    UCBDADI(UCBPTR),B'11111110'                      02S0287
*                          DO; /*MODESET  EXTKEY(SCHED)*/       02S0288
*                            SPKA (16); /*SET PSW KEY*/         02S0289
         LA    @01,16                                           02S0289
         SPKA  0(@01)                                           02S0289
*                          END; /*MODESET  EXTKEY(SCHED)*/      02S0290
*                      END;                                     02S0291
*                    ELSE               /*UCB NOW ALLOCATED          */
*                      MSSUMSW=ON;      /*REPROCESS OFFLINES         */
         B     @RC00281                                         02S0292
@RF00281 OI    MSSUMSW,B'10000000'                              02S0292
*                    GEN REFS(DEQLIST); /*DEQ                @Z40FPPD*/
@RC00281 DS    0H                                               02S0293
                    DEQ MF=(E,DEQLIST)                        @Z40FPPD
*                    ENQQ4 = OFF;      /*SET ESTAE INDICATOR         */
*                    CHNGQ = OFF;      /*SET ESTAE INDICATOR         */
         NI    ENQQ4(EXITP),B'01011111'                         02S0295
*                  END;                                         02S0296
*                ELSE;                  /*ENQ NOT SUCCESSFUL         */
@RF00278 DS    0H                                               02S0298
*              END;                                             02S0298
*            ELSE                       /*CONSOLE IS ALLOCATED       */
*              MSSUMSW=ON;              /*INDICATE REPROCESS         */
         B     @RC00265                                         02S0299
@RF00265 OI    MSSUMSW,B'10000000'                              02S0299
*           END;                                                02S0300
*        ELSE                           /*NOT PENDING CONSOLE        */
*          IF UCBUNLD=ON THEN           /*PENDING UNLOAD?            */
         B     @RC00263                                         02S0301
@RF00263 TM    UCBUNLD(UCBPTR),B'00010000'                      02S0301
         BNO   @RF00301                                         02S0301
*            DO;                        /*YES                        */
*             IF UCBALOC=OFF THEN       /*UCB UNALLOCATED?           */
         TM    UCBALOC(UCBPTR),B'00001000'                      02S0303
         BNZ   @RF00303                                         02S0303
*               DO;                     /*YES                        */
*                 IF UCBCHGS=ON THEN    /*ALSO PENDING OFFLINE?      */
         TM    UCBCHGS(UCBPTR),B'01000000'                      02S0305
         BNO   @RF00305                                         02S0305
*                   DO;                 /*YES                        */
*                     DOOFLNSW=ON;      /*SET SW TO PROCESS OFFLINE  */
         OI    DOOFLNSW,B'10000000'                             02S0307
*                   END;                                        02S0308
*                 ENQCOREP = ADDR(ENQCORE4); /*SAVE PTR TO ENQ LIST  */
@RF00305 LA    ENQCOREP,ENQCORE4                                02S0309
*                 ENQECB = ZERO;        /*CLEAR ENQ ECB              */
         SLR   @07,@07                                          02S0310
         ST    @07,ENQECB                                       02S0310
*                 CHNGQ = ON;           /*SET ESTAE INDICATOR        */
         OI    CHNGQ(EXITP),B'00100000'                         02S0311
*                 RFY (REG3) RSTD;                              02S0312
*                 REG3 = ADDR(ENQECB);  /*PTR TO ENQ ECB             */
         LA    REG3,ENQECB                                      02S0313
*                 ECBOFF = ON;          /*TURN ON ECB INDICATOR      */
         OI    ECBOFF(ENQCOREP),B'00000100'                     02S0314
*                 GEN REFS(ENQCORE4);   /*ENQ  ON CHNGDEVS           */
                 ENQ ECB=(3),MF=(E,ENQCORE4)
*                 RFY (REG3) UNRSTD;                            02S0316
*                 ENQRTNP = REG15;     /*SAVE ENQ RETURN CODE        */
         LR    ENQRTNP,REG15                                    02S0317
*                 CALL TESTENQ;        /*TEST IF ENQ COMPLETED       */
         BAL   @14,TESTENQ                                      02S0318
*                 IF ENQOKSW = ON THEN  /*ENQ COMPLETED SUCCESSFULLY */
         TM    ENQOKSW,B'10000000'                              02S0319
         BNO   @RF00319                                         02S0319
*                   DO;                                         02S0320
*                     IF UCBALOC=OFF THEN   /*STILL UNALLOCATED?     */
         TM    UCBALOC(UCBPTR),B'00001000'                      02S0321
         BNZ   @RF00321                                         02S0321
*                       DO;             /*YES                        */
*                         VMVREQBP=ADDR(VMVCORE); /*POINT TO VM&V BLK*/
         LA    @15,VMVCORE                                      02S0323
         ST    @15,VMVREQBP                                     02S0323
*                         VMVRQBLK=VMVRQBLK && VMVRQBLK; /*ZERO BLOCK*/
         XC    VMVRQBLK(52,@15),VMVRQBLK(@15)                   02S0324
*                         VMVUNLOD=ON;  /*INDICATE UNLOAD            */
*                         VMVUCB=ON;    /*UNLOAD VOLUME              */
         OI    VMVUNLOD(@15),B'11000000'                        02S0326
*                         VMVUCBP=UCBPTR;   /*POINT TO UCB           */
         STCM  UCBPTR,7,VMVUCBP(@15)                            02S0327
*                         CALL IEFAB49C(ADDR(VMVRQBLK),ZERO,ZERO);
         MVC   @AL00001+4(8),@AL00328                           02S0328
         LA    @15,VMVREQBP                                     02S0328
         ST    @15,@AL00001                                     02S0328
         L     @15,@CV00147                                     02S0328
         LA    @01,@AL00001                                     02S0328
         BALR  @14,@15                                          02S0328
*                         SAVERTNC=REG15;   /*SAVE RETURN CODE       */
         ST    REG15,SAVERTNC                                   02S0329
*                         GEN REFS(ENQCORE4);  /*DEQ                 */
                         DEQ MF=(E,ENQCORE4)
*                         CHNGQ = OFF;   /*SET ESTAE INDICATOR       */
         NI    CHNGQ(EXITP),B'11011111'                         02S0331
*                         IF SAVERTNC^=SUCCESS THEN /*UNLOAD OK?     */
         L     @15,SAVERTNC                                     02S0332
         LTR   @15,@15                                          02S0332
         BZ    @RF00332                                         02S0332
*                           MSSUMSW=ON;     /*NO,INDICATE REPROCESS  */
         OI    MSSUMSW,B'10000000'                              02S0333
*                         ELSE              /*UNLOAD SUCCESSFUL      */
*                           DO;                                 02S0334
         B     @RC00332                                         02S0334
@RF00332 DS    0H                                               02S0335
*                               DO; /*MODESET  KEYADDR(ZERO)*/  02S0335
*                                 SPKA (ZERO); /*SET PSW KEY*/  02S0336
         SLR   @01,@01                                          02S0336
         SPKA  0(@01)                                           02S0336
*                               END; /*MODESET  KEYADDR(ZERO)*/ 02S0337
*                             UCBRESV=OFF; /*TURN OFF RSVD BIT       */
*                             UCBUNLD=OFF; /*TURN OFF PENDING UNLOAD */
         L     @15,UCBUNLD-3(,UCBPTR)                           02S0339
@GL00004 LR    @14,@15                                          02S0339
         N     @14,@CF03699                                     02S0339
         CS    @15,@14,UCBUNLD-3(UCBPTR)                        02S0339
         BNE   @GL00004                                         02S0339
*                               DO; /*MODESET  EXTKEY(SCHED)*/  02S0340
*                                 SPKA (16); /*SET PSW KEY*/    02S0341
         LA    @01,16                                           02S0341
         SPKA  0(@01)                                           02S0341
*                               END; /*MODESET  EXTKEY(SCHED)*/ 02S0342
*                             WTOLIST=UNLDMSG; /*PUT MSG TEXT IN BUF */
         L     @15,@CA01681                                     02S0343
         MVC   WTOLIST(32),UNLDMSG-UNLDMSG(@15)                 02S0343
*                             CALL SETUPWTO; /*BUILD & WRITE UNLD MSG*/
         BAL   @14,SETUPWTO                                     02S0344
*                           END;                                02S0345
*                      END;                                     02S0346
*                    ELSE                /*ALLOCATED AFTER ENQ       */
*                      DO;                                      02S0347
         B     @RC00321                                         02S0347
@RF00321 DS    0H                                               02S0348
*                        MSSUMSW=ON;     /*INDICATE REPROCESS        */
         OI    MSSUMSW,B'10000000'                              02S0348
*                        GEN REFS(ENQCORE4); /*DEQ                   */
                        DEQ MF=(E,ENQCORE4)
*                        CHNGQ = OFF;  /*SET ESTAE INDICATOR         */
         NI    CHNGQ(EXITP),B'11011111'                         02S0350
*                      END;                                     02S0351
*                   END;                                        02S0352
*                 ELSE;                 /*ENQ NOT SUCCESSFUL         */
@RF00319 DS    0H                                               02S0354
*               END;                                            02S0354
*             ELSE                      /*UCB ALLOCATED              */
*                 MSSUMSW=ON;           /*INDICATE REPROCESS         */
         B     @RC00303                                         02S0355
@RF00303 OI    MSSUMSW,B'10000000'                              02S0355
*           END;                                                02S0356
*         ELSE;                         /*NO UNLOAD PENDING          */
@RF00301 DS    0H                                               02S0358
*         IF UCBCHGS=ON × DOOFLNSW=ON THEN /*VARY OFFLINE PENDING?   */
@RC00301 DS    0H                                               02S0358
@RC00263 TM    UCBCHGS(UCBPTR),B'01000000'                      02S0358
         BO    @RT00358                                         02S0358
         TM    DOOFLNSW,B'10000000'                             02S0358
         BNO   @RF00358                                         02S0358
@RT00358 DS    0H                                               02S0359
*           DO;                         /*YES                        */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME = PROCOFLN                                          */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS SEGMENT DOES THE OFFLINE PROCESSING IF THE UCB IS PENDING */
*/*   OFFLINE AND UNALLOCATED. VMV IS CALLED TO ZERO FIELDS IN THE   */
*/*   UCB. UPON RETURN FROM VM&V, THE FOLLOWING BITS ARE TURNED OFF  */
*/*   IN THE UCB - UCBRESV,UCBONLI,UCBCHGS. IF SMF IS RECORDING,AN   */
*/*   SMF TYPE 11 RECORD IS WRITTEN.                                 */
*/*                                                                  */
*/*   NOTE THAT THIS PROCESSING IS BYPASSED IF EXECUTING     @ZA02706*/
*/*   UNDER THE MASTER SCHEDULER.  THIS IS DONE TO PREVENT   @ZA02706*/
*/*   A POSSIBLE TIOT ENQ INTERLOCK WHICH COULD OCCUR IF     @ZA02706*/
*/*   PROCESSING A DYNAMIC REQUEST, AND IF THE SMF WRITER    @ZA02706*/
*/*   HAS TO ISSUE A CLOSE FOR ONE OF HIS DATA SETS,         @ZA02706*/
*/*   WHICH ARE ALLOCATED OUT OF THE MASTER SCHEDULER'S      @ZA02706*/
*/*   TIOT. (CLOSE MAY ALSO ENQ ON THE TIOT)                 @ZA02706*/
*/*   FOR NON TAPE OR DA UCBS THAT HAVE UCBERLOG 'ON', SVC 91@Z40MPPE*/
*/*   WILL BE ISSUED SO THAT THE DEVICE'S ERROR LOG BUFFERS  @Z40MPPE*/
*/*   WILL BE READ AND APPROPRIATE RECORDS WRITTEN TO        @Z40MPPE*/
*/*   SYS1.LOGREC.                                           @Z40MPPE*/
*/*                                                                  */
*/* ENTRY -                                                          */
*/*   THIS CODE IS AN INLINE SUBROUTINE WHICH IS ENTERED AT THE TOP  */
*/*                                                                  */
*/* PURPOSE - SEE FUNCTION                                           */
*/*                                                                  */
*/* INPUT -                                                          */
*/*   POINTER TO THE UCB BEING PROCESSED                             */
*/*                                                                  */
*/* EXIT -                                                           */
*/*   THIS CODE IS AN INLINE SUBROUTINE WHICH EXITS FROM THE BOTTOM  */
*/*                                                                  */
*/*   CONDITION -                                                    */
*/*     THE UCB IS MARKED OFFLINE                                    */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     . UCB MADE OFFLINE.                                          */
*/*     . IF REQUESTED,SMF RECORD IS WRITTEN.                        */
*/*     . IF A TAPE UNIT WITH A VOL MOUNTED,VM&V UNLOADS VOLUME      */
*/*     . RECORDS WRITTEN TO SYS1.LOGREC IF REQUESTED        @Z40MPPE*/
*/*                                                                  */
*/* RETURN CODE - (NONE)                                             */
*/********************************************************************/
*IF UCBALOC=OFF &                       /*UCB UNALLOCATED AND NOT    */
*                                       /*ONLINE CONSOLE GOING OFFLNE?
*                                                            @ZA02706*/
*  (UCB3TAPE=ON × UCB3DACC=ON × UCBSYSR=OFF × UCBDADI=OFF) &    03S0360
*   ASIDT ^= MSASID THEN               /*NOT MASTER SCHED    @ZA02706*/
         TM    UCBALOC(UCBPTR),B'00001000'                      03S0360
         BNZ   @RF00360                                         03S0360
         TM    UCB3TAPE(UCBPTR),B'10100000'                     03S0360
         BNZ   @GL00006                                         03S0360
         TM    UCBSYSR(UCBPTR),B'00000011'                      03S0360
         BO    @RF00360                                         03S0360
@GL00006 CLC   ASIDT(2),@CH00076                                03S0360
         BE    @RF00360                                         03S0360
*  DO;                                  /*PROCESS OFFLINE            */
*    SAVERTNC=ZERO;                     /*ZERO RETURN AREA           */
         SLR   @07,@07                                          03S0362
         ST    @07,SAVERTNC                                     03S0362
*    ENQCOREP = ADDR(ENQCORE3);        /*SAVE PTR TO ENQ LIST        */
         LA    ENQCOREP,ENQCORE3                                03S0363
*    ENQECB = ZERO;                    /*CLEAR ENQ ECB               */
         ST    @07,ENQECB                                       03S0364
*    ENQQ4 = ON;                        /*SET ESTAE INDICATOR        */
*    CHNGQ = ON;                        /*SET ESTAE INDICATOR        */
         OI    ENQQ4(EXITP),B'10100000'                         03S0366
*    RFY (REG3) RSTD;                                           03S0367
*    REG3 = ADDR(ENQECB);              /*PTR TO ENQ ECB              */
         LA    REG3,ENQECB                                      03S0368
*    ECBOFF = ON;                      /*TURN ON ECB INDICATOR       */
         OI    ECBOFF(ENQCOREP),B'00000100'                     03S0369
*    GEN REFS(ENQCORE3);                /*ISSUE ENQ  ON Q4           */
    ENQ ECB=(3),MF=(E,ENQCORE3)
*    RFY (REG3) UNRSTD;                                         03S0371
*    ENQRTNP = REG15;                  /*SAVE ENQ RETURN CODE        */
         LR    ENQRTNP,REG15                                    03S0372
*    CALL TESTENQ;                      /*SEE IF ENQ COMPLETED       */
         BAL   @14,TESTENQ                                      03S0373
*    IF ENQOKSW = ON THEN               /*ENQ COMPLETED              */
         TM    ENQOKSW,B'10000000'                              03S0374
         BNO   @RF00374                                         03S0374
*      DO;                                                      03S0375
*        GEN REFS(ENQLIST);                                     03S0376
        ENQ MF=(E,ENQLIST)
*        IF UCBALOC=OFF THEN            /*UCB STILL UNALLOCATED?     */
         TM    UCBALOC(UCBPTR),B'00001000'                      03S0377
         BNZ   @RF00377                                         03S0377
*          DO;                          /*YES,VMV ZEROS UCB FIELDS   */
*            IF UCB3TAPE=ON × UCB3DACC=ON THEN /*IF TAPE OR DA       */
         TM    UCB3TAPE(UCBPTR),B'10100000'                     03S0379
         BZ    @RF00379                                         03S0379
*              DO;                                              03S0380
*                VMVREQBP=ADDR(VMVCORE);    /*POINT TO VMV REQ BLK   */
         LA    @15,VMVCORE                                      03S0381
         ST    @15,VMVREQBP                                     03S0381
*                VMVRQBLK=VMVRQBLK && VMVRQBLK; /*ZERO REQ BLK       */
         XC    VMVRQBLK(52,@15),VMVRQBLK(@15)                   03S0382
*                VMVUNLOD=ON;           /*INDICATE UNLOAD            */
*                VMVUCB=ON;             /*UNLOAD VOLUME              */
         OI    VMVUNLOD(@15),B'11000000'                        03S0384
*                VMVUCBP=UCBPTR;        /*POINT TO UCB               */
         STCM  UCBPTR,7,VMVUCBP(@15)                            03S0385
*                CALL IEFAB49C (ADDR(VMVRQBLK),ZERO,ZERO);/*CALL VM&V*/
         MVC   @AL00001+4(8),@AL00386                           03S0386
         LA    @15,VMVREQBP                                     03S0386
         ST    @15,@AL00001                                     03S0386
         L     @15,@CV00147                                     03S0386
         LA    @01,@AL00001                                     03S0386
         BALR  @14,@15                                          03S0386
*                SAVERTNC=REG15;        /*SAVE RETURN CODE           */
         ST    REG15,SAVERTNC                                   03S0387
*              END;                                             03S0388
*            ELSE                      /*IF NOT TAPE OR DA   @Z40MPPE*/
*              IF UCBERLOG=ON THEN     /*AND RECORDS SHOULD BE WRITTEN
*                                        TO SYS1.LOGREC,THEN @Z40MPPE*/
         B     @RC00379                                         03S0389
@RF00379 L     @01,UCBEXTPT(,UCBPTR)                            03S0389
         TM    UCBERLOG(@01),B'00000100'                        03S0389
         BNO   @RF00389                                         03S0389
*                DO;                   /*SET UP FOR SVC91    @Z40MPPE*/
*                  RFY REG0 RSTD;      /*                    @Z40MPPE*/
*                  REG0=UCBPTR;        /*PUT ADDRESS OF UCB  @Z40MPPE*/
         LR    REG0,UCBPTR                                      03S0392
*                  REG1=ZERO;          /*ZERO REG1 FOR SVC91 @Z40MPPE*/
         SLR   REG1,REG1                                        03S0393
*                  GEN REFS(REG0);     /*IN REGISTER 0.      @Z40MPPE*/
                  LNR  REG0,REG0                              @Z40MPPE
                  SVC  91                                     @Z40MPPE
*                  RFY REG0 UNRSTD;    /*                    @Z40MPPE*/
*                END;                  /*                    @Z40MPPE*/
*              ELSE;                   /*                    @Z40MPPE*/
@RF00389 DS    0H                                               03S0398
*            IF SAVERTNC^= ZERO THEN    /*SUCCESSFUL RETURN?         */
@RC00379 L     @15,SAVERTNC                                     03S0398
         LTR   @15,@15                                          03S0398
         BZ    @RF00398                                         03S0398
*              DO;                                              03S0399
*                MSSUMSW=ON;            /*NO,INDICATE REPROCESS      */
         OI    MSSUMSW,B'10000000'                              03S0400
*                GEN REFS(DEQLIST);     /*DEQ                @Z40FPPD*/
                DEQ MF=(E,DEQLIST)                            @Z40FPPD
*                ENQQ4 = OFF;           /*SET ESTAE INDICATOR        */
*                CHNGQ = OFF;           /*SET ESTAE INDICATOR        */
         NI    ENQQ4(EXITP),B'01011111'                         03S0403
*              END;                                             03S0404
*            ELSE                       /*SUCCESS FROM VM&V          */
*              DO;                                              03S0405
         B     @RC00398                                         03S0405
@RF00398 DS    0H                                               03S0406
*                  DO; /*MODESET  KEYADDR(ZERO)*/               03S0406
*                    SPKA (ZERO); /*SET PSW KEY*/               03S0407
         SLR   @01,@01                                          03S0407
         SPKA  0(@01)                                           03S0407
*                  END; /*MODESET  KEYADDR(ZERO)*/              03S0408
*                UCBRESV=OFF;           /*TURN OFF RESERVED BIT      */
*                UCBONLI=OFF;           /*TURN OFF ONLINE BIT        */
*                UCBCHGS=OFF;           /*TURN OFF PENDING BIT       */
         NI    UCBRESV(UCBPTR),B'00011111'                      03S0411
*                  DO; /*MODESET  EXTKEY(SCHED)*/               03S0412
*                    SPKA (16); /*SET PSW KEY*/                 03S0413
         LA    @01,16                                           03S0413
         SPKA  0(@01)                                           03S0413
*                  END; /*MODESET  EXTKEY(SCHED)*/              03S0414
*                GEN REFS(DEQLIST);     /*DEQ                @Z40FPPD*/
                DEQ MF=(E,DEQLIST)                            @Z40FPPD
*                ENQQ4 = OFF;           /*SET ESTAE INDICATOR        */
*                CHNGQ = OFF;           /*SET ESTAE INDICATOR        */
         NI    ENQQ4(EXITP),B'01011111'                         03S0417
*                WTOLIST=OFFWTO;        /*PUT OFFLINE MSG IN MSG BUFF*/
         L     @15,@CA01680                                     03S0418
         MVC   WTOLIST(32),OFFWTO-OFFWTO(@15)                   03S0418
*                CALL SETUPWTO;         /*ISSUE MSG                  */
         BAL   @14,SETUPWTO                                     03S0419
*                IF CVTSMCA ^= ZERO &   /*IF SMCA EXISTS     @YM06039*/
*                   SMCAOPT1=ON &       /*JOB ACCOUNTING AND @YM06039*/
*                   SMCAUSER=ON & SMCAMAN=ON THEN /*SMF RECORDING?   */
         L     @01,CVTPTR                                       03S0420
         L     @15,CVTSMCA(,@01)                                03S0420
         LTR   @15,@15                                          03S0420
         BZ    @RF00420                                         03S0420
         TM    SMCAOPT1(@15),B'10000000'                        03S0420
         BNO   @RF00420                                         03S0420
         TM    SMCAUSER(@15),B'11000000'                        03S0420
         BNO   @RF00420                                         03S0420
*                  DO;                  /*YES,THEN WRITE SMF RECORD  */
*                    SMFHDR=HEADER;     /*HEADER &RECORD TYPE 11     */
         MVC   SMFHDR(6),HEADER                                 03S0422
*                    SMFLENGT=SMFLNG;   /*LENGTH OF VAR FIELD        */
         MVC   SMFLENGT(2),SMFLNG                               03S0423
*                    SMFDVCLS=UCBTBYT3; /*DEVICE CLASS               */
         MVC   SMFDVCLS(1),UCBTBYT3(UCBPTR)                     03S0424
*                    SMFDVCOD=UCBTBYT4; /*DEVICE CODE                */
         MVC   SMFDVCOD(1),UCBTBYT4(UCBPTR)                     03S0425
*                    SMFCHAN=UCBCHAN;   /*DEVICE CHANNEL     @YM03790*/
         MVC   SMFCHAN(2),UCBCHAN(UCBPTR)                       03S0426
*                    IF UCBRVDEV=ON &  /*IF DEV              @Y30LPPE*/
*                       UCBTYP(3:4)=THRTY330 THEN /*IS A     @Y30LPPE*/
         TM    UCBRVDEV(UCBPTR),B'00001000'                     03S0427
         BNO   @RF00427                                         03S0427
         CLC   UCBTYP+2(2,UCBPTR),@CB00119                      03S0427
         BNE   @RF00427                                         03S0427
*                      DO;             /*VIRTUAL 3330 THEN   @Y30LPPE*/
*                        SMF11VDV=ON;  /*SET VIRTUAL BIT IN  @Y30LPPE*/
         OI    SMF11VDV,B'10000000'                             03S0429
*                      END;            /*DEVENTRY FLAGS 'ON'.@Y30LPPE*/
*                    REG1=ADDR(SMFREC); /*POINT TO SMF RECORD        */
@RF00427 LA    REG1,SMFREC                                      03S0431
*                    GEN (SVC 83);      /*ISSUE SMF SVC              */
         SVC 83
*                  END;                                         03S0433
*              END;                                             03S0434
*          END;                                                 03S0435
*        ELSE                           /*UCB NOW ALLOCATED          */
*          DO;                                                  03S0436
         B     @RC00377                                         03S0436
@RF00377 DS    0H                                               03S0437
*            MSSUMSW=ON;                                        03S0437
         OI    MSSUMSW,B'10000000'                              03S0437
*            GEN REFS(DEQLIST);         /*DEQ                @Z40FPPD*/
            DEQ MF=(E,DEQLIST)                                @Z40FPPD
*            ENQQ4 = OFF;               /*SET ESTAE INDICATOR        */
*            CHNGQ = OFF;               /*SET ESTAE INDICATOR        */
         NI    ENQQ4(EXITP),B'01011111'                         03S0440
*          END;                                                 03S0441
*      END;                                                     03S0442
*    ELSE;                              /*ENQ NOT COMPLETED          */
@RF00374 DS    0H                                               03S0444
*  END;                                                         03S0444
*ELSE                                   /*DON'T PROCESS OFFLINE      */
*  MSSUMSW=ON;                          /*INDICATE REPROCESS         */
         B     @RC00360                                         03S0445
@RF00360 OI    MSSUMSW,B'10000000'                              03S0445
*           END;                                                02S0446
@RC00360 DS    0H                                               02S0447
*       END;                                                    02S0447
@RF00358 DS    0H                                               02S0448
*    END;                                                       02S0448
@RF00260 LA    @08,1                                            02S0448
         AH    @08,LUTENTNO                                     02S0448
         STH   @08,LUTENTNO                                     02S0448
@DE00257 LH    @08,LUTENTNO                                     02S0448
         ALR   @08,@08                                          02S0448
         L     @15,@PC00001+12                                  02S0448
         L     @01,LUTPTR(,@15)                                 02S0448
         ALR   @01,@08                                          02S0448
         BCTR  @01,0                                            02S0448
         BCTR  @01,0                                            02S0448
         CLC   IOSLUT(2,@01),IOSLTEND                           02S0448
         BNE   @DL00257                                         02S0448
*    IF MSSUMSW = ON THEN            /*TURN ON REPROCESS BIT       */
         TM    MSSUMSW,B'10000000'                              02S0449
         BNO   @RF00449                                         02S0449
*        DO;                                                    02S0450
*           DO; /*MODESET  KEYADDR(ZERO)*/                      02S0451
*             SPKA (ZERO); /*SET PSW KEY*/                      02S0452
         SLR   @08,@08                                          02S0452
         SPKA  0(@08)                                           02S0452
*           END; /*MODESET  KEYADDR(ZERO)*/                     02S0453
*          MSSUM = ON;                 /*INDICATE REPROCESS          */
         L     @14,CVTPTR                                       02S0454
         L     @14,CVTMSER(,@14)                                02S0454
         L     @08,MSSUM+133(,@14)                              02S0454
@GL00012 LR    @15,@08                                          02S0454
         O     @15,@CF03702                                     02S0454
         CS    @08,@15,MSSUM+133(@14)                           02S0454
         BNE   @GL00012                                         02S0454
*           DO; /*MODESET  EXTKEY(SCHED)*/                      02S0455
*             SPKA (16); /*SET PSW KEY*/                        02S0456
         LA    @08,16                                           02S0456
         SPKA  0(@08)                                           02S0456
*           END; /*MODESET  EXTKEY(SCHED)*/                     02S0457
*        END;                                                   02S0458
*  END;                                                         02S0459
@RF00449 DS    0H                                               02S0460
*    IF RTNCODE = SUCCESS THEN         /*ANY ERRORS                  */
@RF00243 L     @08,RTNCODE                                      01S0460
         LTR   @08,@08                                          01S0460
         BNZ   @RF00460                                         01S0460
*      DO;                             /*NO,CONTINUE ALLOC PROCESSING*/
*        INALOC = JSCDSABQ->QDBNELMS;  /*SAME # OF ETIOT ENTRIES     */
         L     @08,@PC00001+8                                   01S0462
         L     @08,PPJSCBP(,@08)                                01S0462
         L     @08,JSCDSABQ(,@08)                               01S0462
         L     @08,QDBNELMS(,@08)                               01S0462
         ST    @08,INALOC                                       01S0462
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - BLDCOUNT                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - INITIALIZE COUNT TABLE                        */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*                                                                  */
*/*   THIS ROUTINE IS RESPONSIBLE FOR INITIALIZING THE COUNT TABLE   */
*/*   (CNTABLE) IN THE ALCWA. THIS TABLE CONTAINS COUNTS FOR EACH    */
*/*   CLASSIFICATION OF ALLOCATION REQUEST, AS WELL AS THE TOTAL     */
*/*   NUMBER OF REQUESTS LEFT TO BE ALLOCATED (THIS COUNT IS         */
*/*   DECREMENTED BY ALLOCATION DURING ITS PROCESSING) AND A         */
*/*   (STATIC) COUNT OF THE TOTAL NUMBER OF REQUESTS.                */
*/*                                                                  */
*/*   THE CLASSIFICATIONS OF ALLOCATION REQUESTS REQUESTS ARE        */
*/*      - DUMMY REQUESTS                                            */
*/*      _ VAM REQUESTS                                              */
*/*      _ SUBSYSTEM REQUESTS                                        */
*/*      - REQUESTS ELIGIBLE TO TELEPROCESSING DEVICES               */
*/*      - REQUESTS FOR SPECIFIC VOLUMES                             */
*/*      - REQUESTS FOR PVT NON-SPECIFIC VOLUMES                     */
*/*      - REQUESTS FOR PUBLIC VOLUMES                               */
*/*      - REQUESTS FOR STORAGE VOLUMES                              */
*/*      - REQUESTS NOT DUMMY, VAM , OR ELIGIBLE TO TP, TAPE, OR DA  */
*/*   THIS SEGMENT ALSO DETERMINES WHICH DDR RESOURCES (DDRDA@ZA32215*/
*/*   AND DDRTPUR) ARE TO BE ENQUEUED DEPENDING ON THE TYPES @ZA32215*/
*/*   OF REQUESTS TO BE ALLOCATED. IF THERE ARE ANY DIRECT   @ZA32215*/
*/*   ACCESS REQUESTS, DDRDA WILL BE SET ON. IF THERE ARE ANY@ZA32215*/
*/*   TAPE REQUESTS, DDRTPUR WILL BE SET ON. IF THERE ARE ANY@ZA32215*/
*/*   UNIT RECORD REQUESTS, DDRTPUR WILL BE SET ON. (FOR ANY @ZA32215*/
*/*   REQUESTS THAT ARE ELIGIBLE TO EITHER DIRECT ACCESS OR  @ZA32215*/
*/*   TAPE, BOTH DDRDA AND DDRTPUR WILL BE SET ON.)          @ZA32215*/
*/*                                                                  */
*/* ENTRY - THIS CODE IS AN INLINE SUBROUTINE WHICH IS ENTERED       */
*/*         AT THE TOP.                                              */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*       ALLOCATION WORK AREA (ALCWA) FIELDS                        */
*/*          - SIOT1P - PTR TO FIRST SIOT TO PROCESS                 */
*/*              SIOTNPTR - PTR TO NEXT SIOT IN CHAIN                */
*/*          - CNTABLE - COUNT TABLE                                 */
*/*              ENTIRE COUNT TABLE IS ZERO ON ENTRY                 */
*/*                                                                  */
*/* EXITS - THIS CODE IS AN INLINE SUBROUTINE WHICH EXITS AT THE     */
*/*         BOTTOM                                                   */
*/*                                                                  */
*/*   CONDITION - NORMAL - COUNT TABLE INITIALIZED                   */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*          - CNTABLE IN ALCWA INITIALIZED AS FOLLOWS:              */
*/*              DMYREQS - NUMBER OF 'DUMMY' REQUESTS                */
*/*              VAMREQS - NUMBER OF VAM REQUESTS                    */
*/*              TPREQS - NUMBER OF TP REQUESTS                      */
*/*              SPECREQS - NUMBER OF SPECIFIC VOLUME REQUESTS       */
*/*              PVTNREQS - NUMBER OF PRIVATE NON-SPECIFIC VOL REQS  */
*/*              STRGREQS - NUMBER OF STORAGE VOLUME REQUESTS        */
*/*              SUBSREQS - NUMBER OF SUBSYSTEM REQUESTS             */
*/*              OTHEREQS - NUMBER OF OTHER TYPES OF REQUESTS        */
*/*              TOTREQS - TOTAL NUMBER OF REQUESTS STILL UNALLOCATED*/
*/*              NUMREQS - TOTAL NUMBER OF REQUESTS                  */
*/*              PUBLREQS - NUMBER OF PUBLIC VOLUME REQUESTS         */
*/*          - DDRDA ON IF THERE ARE ANY DIRECT ACCESS       @ZA32215*/
*/*            REQUESTS                                      @ZA32215*/
*/*          - DDRTPUR ON IF THERE ARE ANY TAPE OR UNIT      @ZA32215*/
*/*            RECORD REQUESTS                               @ZA32215*/
*/*                                                                  */
*/********************************************************************/
*SIOTPTR = SIOT1P;                     /*POINT TO FIRST SIOT         */
         L     @08,ALCWAPTR                                     02S0463
         L     SIOTPTR,SIOT1P(,@08)                             02S0463
*DDRDA = OFF;                          /*INIT DDR DA SW      @ZA32215*/
*DDRTPUR = OFF;                        /*INIT DDR TP×UR SW   @ZA32215*/
         NI    DDRDA(@08),B'11111001'                           02S0465
*DO WHILE SIOTPTR ^= ZERO;             /*PROCESS EACH SIOT           */
         B     @DE00466                                         02S0466
@DL00466 DS    0H                                               02S0467
*  NUMREQS = NUMREQS + ONE;            /*INCREMENT TOTAL COUNT       */
         L     @08,ALCWAPTR                                     02S0467
         LA    @03,1                                            02S0467
         AL    @03,NUMREQS(,@08)                                02S0467
         ST    @03,NUMREQS(,@08)                                02S0467
*  IF SJFCBPTR ->JFCORGIS = ON THEN    /* ISAM REQUESTS      @ZA05370*/
         L     @03,SJFCBPTR(,SIOTPTR)                           02S0468
         TM    JFCORGIS(@03),B'10000000'                        02S0468
         BNO   @RF00468                                         02S0468
*      ALCWISAM = ON;                  /* YES INDICATE       @ZA05370*/
         OI    ALCWISAM(@08),B'00000010'                        02S0469
*  IF SIOTALCD = NO THEN               /*IS REQUEST ALLOCATED        */
@RF00468 TM    SIOTALCD(SIOTPTR),B'00000010'                    02S0470
         BNZ   @RF00470                                         02S0470
*    DO;                               /*NO, ADD TO COUNTS           */
*      TOTREQS = TOTREQS + ONE;        /*INCREMENT UNALLOCATED COUNT */
         L     @08,ALCWAPTR                                     02S0472
         LA    @03,1                                            02S0472
         L     @15,TOTREQS(,@08)                                02S0472
         ALR   @15,@03                                          02S0472
         ST    @15,TOTREQS(,@08)                                02S0472
*      IF SCTDUMMY = ON THEN           /*IS THIS A DUMMY REQUEST     */
         TM    SCTDUMMY(SIOTPTR),B'10000000'                    02S0473
         BNO   @RF00473                                         02S0473
*        DMYREQS = DMYREQS + ONE;      /*YES,INCREMENT  DUMMY COUNT  */
         AL    @03,DMYREQS(,@08)                                02S0474
         ST    @03,DMYREQS(,@08)                                02S0474
*      ELSE                            /*NOT A DUMMY REQUEST         */
*        DO;                                                    02S0475
         B     @RC00473                                         02S0475
@RF00473 DS    0H                                               02S0476
*          IF SIOVAMDS = ON THEN       /*IS THIS A VAM REQUEST       */
         TM    SIOVAMDS(SIOTPTR),B'00100000'                    02S0476
         BNO   @RF00476                                         02S0476
*            VAMREQS = VAMREQS + ONE;  /*YES, INCREMENT VAM COUNT    */
         L     @08,ALCWAPTR                                     02S0477
         LA    @03,1                                            02S0477
         AL    @03,VAMREQS(,@08)                                02S0477
         ST    @03,VAMREQS(,@08)                                02S0477
*          ELSE                        /*NOT A VAM REQUEST           */
*            IF SIOTSSDS = ON THEN     /*SUBSYSTEM DATA SETS         */
         B     @RC00476                                         02S0478
@RF00476 TM    SIOTSSDS(SIOTPTR),B'10000000'                    02S0478
         BNO   @RF00478                                         02S0478
*              SUBSREQS = SUBSREQS+ONE;                         02S0479
         L     @08,ALCWAPTR                                     02S0479
         LA    @03,1                                            02S0479
         AL    @03,SUBSREQS(,@08)                               02S0479
         ST    @03,SUBSREQS(,@08)                               02S0479
*            ELSE                                               02S0480
*            DO;                                                02S0480
         B     @RC00478                                         02S0480
@RF00478 DS    0H                                               02S0481
*              IF SCTUTYPE(3) = DATYPE /*IS REQUEST ELIGIBLE TO DA   */
*              × SCTUTYPE(3) = TAPETYPE  /*OR TAPE                   */
*              × SCTUTYPE(3) = DANDTAPE THEN /*OR BOTH ?             */
         CLI   SCTUTYPE+2(SIOTPTR),X'20'                        02S0481
         BE    @RT00481                                         02S0481
         CLI   SCTUTYPE+2(SIOTPTR),X'80'                        02S0481
         BE    @RT00481                                         02S0481
         CLI   SCTUTYPE+2(SIOTPTR),X'A0'                        02S0481
         BNE   @RF00481                                         02S0481
@RT00481 DS    0H                                               02S0482
*                DO;                   /*YES,ELIGIBLE TO DA OR TAPE  */
*                  JFCBPTR = SJFCBPTR; /*GET PTR TO JFCB FROM SIOT   */
         L     JFCBPTR,SJFCBPTR(,SIOTPTR)                       02S0483
*                  IF JFCBNVOL ^= ZERO THEN /*ARE VOL SERS GIVEN     */
         CLI   JFCBNVOL(JFCBPTR),0                              02S0484
         BE    @RF00484                                         02S0484
*                    SPECREQS=SPECREQS+ONE; /*YES,INCR SPECIFIC COUNT*/
         L     @08,ALCWAPTR                                     02S0485
         LA    @03,1                                            02S0485
         AL    @03,SPECREQS(,@08)                               02S0485
         ST    @03,SPECREQS(,@08)                               02S0485
*                  ELSE                /*NO,THIS IS NON-SPECIFIC REQ */
*                    DO;                                        02S0486
         B     @RC00484                                         02S0486
@RF00484 DS    0H                                               02S0487
*                      IF SIOTPRIV = ON THEN /*IS REQUEST PRIVATE    */
         TM    SIOTPRIV(SIOTPTR),B'00100000'                    02S0487
         BNO   @RF00487                                         02S0487
*                        PVTNREQS=PVTNREQS+ONE; /*YES,INCREMENT COUNT*/
         L     @08,ALCWAPTR                                     02S0488
         LA    @03,1                                            02S0488
         AL    @03,PVTNREQS(,@08)                               02S0488
         ST    @03,PVTNREQS(,@08)                               02S0488
*                      ELSE            /*NOT PRIVATE REQUEST         */
*                        DO;                                    02S0489
         B     @RC00487                                         02S0489
@RF00487 DS    0H                                               02S0490
*                          IF SIOTDLET = ON THEN /*IS DISP DELETE    */
         TM    SIOTDLET(SIOTPTR),B'00000100'                    02S0490
         BNO   @RF00490                                         02S0490
*                            PUBLREQS=PUBLREQS+ONE; /*YES, REQ IS
*                                        PUBLIC - INCREMENT COUNT    */
         L     @08,ALCWAPTR                                     02S0491
         LA    @03,1                                            02S0491
         AL    @03,PUBLREQS(,@08)                               02S0491
         ST    @03,PUBLREQS(,@08)                               02S0491
*                          ELSE        /*DISP NOT DELETE             */
*                            STRGREQS=STRGREQS+ONE; /*INCR STORAGE CT*/
         B     @RC00490                                         02S0492
@RF00490 L     @08,ALCWAPTR                                     02S0492
         LA    @03,1                                            02S0492
         AL    @03,STRGREQS(,@08)                               02S0492
         ST    @03,STRGREQS(,@08)                               02S0492
*                        END;                                   02S0493
*                    END;                                       02S0494
*                END;                                           02S0495
*              ELSE                    /*NOT ELIGIBLE TO TAPE OR DA  */
*                DO;                                            02S0496
         B     @RC00481                                         02S0496
@RF00481 DS    0H                                               02S0497
*                  IF SIO3COMM = ON THEN /*ELIGIBLE TO TP ?  @ZA02111*/
         TM    SIO3COMM(SIOTPTR),B'01000000'                    02S0497
         BNO   @RF00497                                         02S0497
*                    TPREQS = TPREQS + ONE; /*YES,INCREMENT TP COUNT */
         L     @08,ALCWAPTR                                     02S0498
         LA    @03,1                                            02S0498
         AL    @03,TPREQS(,@08)                                 02S0498
         ST    @03,TPREQS(,@08)                                 02S0498
*                  ELSE                /*NOT ELIGIBLE TO TP          */
*                    OTHEREQS = OTHEREQS + ONE; /*INCR OTHER COUNT   */
         B     @RC00497                                         02S0499
@RF00497 L     @08,ALCWAPTR                                     02S0499
         LA    @03,1                                            02S0499
         AL    @03,OTHEREQS(,@08)                               02S0499
         ST    @03,OTHEREQS(,@08)                               02S0499
*                END;                                           02S0500
@RC00497 DS    0H                                               02S0501
*            IF SIO3DACC = ON THEN     /*DA REQUEST          @ZA32215*/
@RC00481 TM    SIO3DACC(SIOTPTR),B'00100000'                    02S0501
         BNO   @RF00501                                         02S0501
*              DDRDA = ON;             /*YES, SET DDR DA     @ZA32215*/
         L     @08,ALCWAPTR                                     02S0502
         OI    DDRDA(@08),B'00000010'                           02S0502
*            IF SIO3UREC = ON ×        /*UNIT RECORD OR      @ZA32215*/
*               SIO3TAPE = ON THEN     /*TAPE REQUEST        @ZA32215*/
@RF00501 TM    SIO3UREC(SIOTPTR),B'10001000'                    02S0503
         BZ    @RF00503                                         02S0503
*              DDRTPUR = ON;           /*SET TAPE OR UR      @ZA32215*/
         L     @08,ALCWAPTR                                     02S0504
         OI    DDRTPUR(@08),B'00000100'                         02S0504
*            END;                                               02S0505
*        END;                                                   02S0506
*    END;                                                       02S0507
*  ELSE;                               /*REQUEST ALREADY ALLOCATED   */
@RF00470 DS    0H                                               02S0509
*  SIOTPTR = SIOTNPTR;                 /*UPDATE POINTER TO NEXT SIOT */
@RC00470 L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0509
*END;                                                           02S0510
@DE00466 SLR   @08,@08                                          02S0510
         CR    SIOTPTR,@08                                      02S0510
         BNE   @DL00466                                         02S0510
*        IF DMYREQS ^= ZERO THEN       /*ANY DUMMY REQS AND NO ERRORS*/
         L     @15,ALCWAPTR                                     01S0511
         C     @08,DMYREQS(,@15)                                01S0511
         BE    @RF00511                                         01S0511
*          DO;                         /*YES,ALLOCATE THEM           */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - PROCSDMY                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - PROCESS DUMMY REQUESTS                        */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS ROUTINE IS RESPONSIBLE FOR PROCESSING THOSE REQUESTS      */
*/*   WHICH DO NOT REQUIRE THAT A UNIT BE ALLOCATED. THIS INCLUDES   */
*/*   THE FOLLOWING TYPES OF SPECIFICATIONS:                         */
*/*     . 'DUMMY' OR 'DSN=NULLFILE'                                  */
*/*     . 'QNAME'                                                    */
*/*     . 'TERM=TS'                                                  */
*/*                                                                  */
*/*   EACH OF THESE IS TREATED AS A 'DUMMY REQUEST' AND IS INDICATED */
*/*   BY BIT 0 OF THE SCTSBYT1 FIELD OF THE SIOT. THIS FIELD MUST BE */
*/*   TESTED IN EACH SIOT FOUND IN THE INPUT SIOT CHAIN.             */
*/*   WHEN A 'DUMMY REQUEST' IS FOUND, A REQUEST BLOCK IS BUILT FOR  */
*/*   THE ETIOT BUILD ROUTINE.  (SEE ETIOTREQ FOR FORMAT.) MOST OF   */
*/*   THE INFORMATION FOR THE REQUEST BLOCK IS GOTTEN FROM THE SIOT. */
*/*                                                                  */
*/*   THIS ROUTINE THEN PASSES CONTROL TO THE ETIOT BUILD ROUTINE    */
*/*   PASSING IT A POINTER TO THE REQUEST BLOCK. ON RETURN FROM THE  */
*/*   ETIOT BUILD FUNCTION,THIS ROUTINE WILL MARK THE SIOT PROCESSED,*/
*/*   DECREMENT THE NUMBER OF DUMMY REQUESTS AND THE TOTAL REQUESTS  */
*/*   TO BE ALLOCATED, AND CONTINUE WITH THE SCAN FOR DUMMY REQUESTS.*/
*/*   IF ANY ERRORS OCCUR DURING THIS PROCESSING (E.G. TIOT MANAGER  */
*/*   ERROR) THE ROUTINE TERMINATES PROCESSING AND PASSES A NON-ZERO */
*/*   RETURN CODE. IF AN ERROR OCCURS IN THE ETIOT BUILD ROUTINE,    */
*/*   PROCESSING IS DISCONTINUED, AND THIS RETURN CODE IS PASSED     */
*/*   IN REGISTER 15 ON RETURN TO THE CALLER.                        */
*/*                                                                  */
*/* ENTRY -  PROCSDMY                                                */
*/*                                                                  */
*/*   PURPOSE - TO ALLOCATE DUMMY REQUESTS                           */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     ADDRESS OF THE ALLOCATION WORK AREA (ALCWA)                  */
*/*                                                                  */
*/* EXITS -                                                          */
*/*                                                                  */
*/*   CONDITION - DUMMY REQUESTS ALLOCATED                           */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     UPDATED SIOTS FOR ALL 'DUMMY' REQUESTS                       */
*/*     ETIOT ENTRIES FOR ALL 'DUMMY' REQUESTS                       */
*/*     NUMBER OF REQUESTS STILL TO BE ALLOCATED                     */
*/*                                                                  */
*/*   RETURN CODE - ZERO                                             */
*/*                                                                  */
*/*   CONDITION - DUMMY REQUEST CANNOT BE ALLOCATED                  */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     NUMBER OF DUMMY REQUESTS NOT ALLOCATED                       */
*/*                                                                  */
*/*   RETURN CODE - NON-ZERO RETURN CODE FROM IEFAB428               */
*/*                                                                  */
*/********************************************************************/
*RTNCODE=ZERO;                     /*ZERO ERROR CODE SAVE AREA       */
         ST    @08,RTNCODE                                      02S0513
*EREQPTR=ADDR(EREQCORE);           /*POINT TO ETIOT REQUEST BLOCK    */
         LA    @08,EREQCORE                                     02S0514
         ST    @08,EREQPTR                                      02S0514
*SIOTPTR=SIOT1P;                   /*GET FIRST SIOT                  */
         L     SIOTPTR,SIOT1P(,@15)                             02S0515
*DO WHILE (DMYREQS ^=ZERO & RTNCODE =ZERO);                     02S0516
         B     @DE00516                                         02S0516
@DL00516 DS    0H                                               02S0517
*  IF SCTDUMMY=ON THEN             /*IF A DUMMY REQUEST,             */
         TM    SCTDUMMY(SIOTPTR),B'10000000'                    02S0517
         BNO   @RF00517                                         02S0517
*    DO;                           /*BUILD REQUEST BLOCK             */
*      ETIOTREQ=ETIOTREQ && ETIOTREQ;/*ZERO OUT REQUEST BLOCK        */
         L     @08,EREQPTR                                      02S0519
         XC    ETIOTREQ(42,@08),ETIOTREQ(@08)                   02S0519
*      EREQBLD=ON;                 /*INDICATE BUILD FUNCTION         */
         OI    EREQBLD(@08),B'10000000'                         02S0520
*      EREQDDNM=SCTDDNAM;          /*PUT DDNAME IN RB                */
         MVC   EREQDDNM(8,@08),SCTDDNAM(SIOTPTR)                02S0521
*      EREQDEVS=ONE;               /*SET NO DEVICES TO 1             */
         LA    @03,1                                            02S0522
         STH   @03,EREQDEVS(,@08)                               02S0522
*      EREQRPOS=ONE;               /*SET REL POS TO ONE              */
         STH   @03,EREQRPOS(,@08)                               02S0523
*      EREQSIOT=SIOTPTR;           /*POINT TO SIOT                   */
         ST    SIOTPTR,EREQSIOT(,@08)                           02S0524
*      EREQJSVA = SCTPJFCB;        /*JFCB SWA VIRTUAL ADDRESS        */
         MVC   EREQJSVA(3,@08),SCTPJFCB(SIOTPTR)                02S0525
*      EREQSSVA = SIOTDSKA;        /*SIOT SWA VIRTUAL ADDRESS        */
         MVC   EREQSSVA(3,@08),SIOTDSKA(SIOTPTR)                02S0526
*      EREQJSCB = JSCBPTR;         /*JSCB PTR                        */
         L     @03,ALCWAPTR                                     02S0527
         L     @03,JSCBPTR(,@03)                                02S0527
         ST    @03,EREQJSCB(,@08)                               02S0527
*      IF SIOTPASS = ON THEN       /*DATA SET DISP = PASS ?          */
         TM    SIOTPASS(SIOTPTR),B'00010000'                    02S0528
         BNO   @RF00528                                         02S0528
*        EREQPASS = ON;                                         02S0529
         OI    EREQPASS(@08),B'00001000'                        02S0529
*      ELSE;                                                    02S0530
@RF00528 DS    0H                                               02S0531
*      IF SIOTJSCT = ON THEN       /*JOBCAT OR STEPCAT ?             */
         TM    SIOTJSCT(SIOTPTR),B'00000001'                    02S0531
         BNO   @RF00531                                         02S0531
*        EREQJSCT = ON;                                         02S0532
         L     @08,EREQPTR                                      02S0532
         OI    EREQJSCT(@08),B'00000100'                        02S0532
*      ELSE;                                                    02S0533
@RF00531 DS    0H                                               02S0534
*      IF SIOTTERM=ON THEN         /*IF A TERM=TS                    */
         TM    SIOTTERM(SIOTPTR),B'01000000'                    02S0534
         BNO   @RF00534                                         02S0534
*        EREQTERM=ON;              /*SET BIT IN RB                   */
         L     @08,EREQPTR                                      02S0535
         OI    EREQTERM(@08),B'10000000'                        02S0535
*      IF SIOTQNAM=ON THEN         /*IF A QNAME                      */
@RF00534 TM    SIOTQNAM(SIOTPTR),B'00000001'                    02S0536
         BNO   @RF00536                                         02S0536
*        EREQQNM=ON;               /*SET BIT IN RB                   */
         L     @08,EREQPTR                                      02S0537
         OI    EREQQNM(@08),B'01000000'                         02S0537
*      CALL IEFAB428 (EREQPTR,JSCBPTR,EXITPRMP); /*CALL ETIOT BLD RTN*/
@RF00536 LA    @08,EREQPTR                                      02S0538
         ST    @08,@AL00001                                     02S0538
         L     @08,ALCWAPTR                                     02S0538
         LA    @03,JSCBPTR(,@08)                                02S0538
         ST    @03,@AL00001+4                                   02S0538
         LA    @08,EXITPRMP(,@08)                               02S0538
         ST    @08,@AL00001+8                                   02S0538
         L     @15,@CV00141                                     02S0538
         LA    @01,@AL00001                                     02S0538
         BALR  @14,@15                                          02S0538
*      IF REG15=ZERO THEN          /*WAS ETIOT BLD SUCCESSFUL        */
         LTR   REG15,REG15                                      02S0539
         BNZ   @RF00539                                         02S0539
*        DO;                       /*YES                             */
*          SIOTALCD=ON;            /*MARK SIOT ALLOCATED             */
         OI    SIOTALCD(SIOTPTR),B'00000010'                    02S0541
*          DMYREQS=DMYREQS-ONE;    /*DECREMENT DUMMY COUNT           */
         L     @08,ALCWAPTR                                     02S0542
         L     @03,DMYREQS(,@08)                                02S0542
         BCTR  @03,0                                            02S0542
         ST    @03,DMYREQS(,@08)                                02S0542
*          TOTREQS=TOTREQS-ONE;    /*DECREMENT TOT REQUEST COUNT     */
         L     @03,TOTREQS(,@08)                                02S0543
         BCTR  @03,0                                            02S0543
         ST    @03,TOTREQS(,@08)                                02S0543
*        END;                                                   02S0544
*      ELSE                        /*ETIOT NOT SUCESSFUL             */
*        DO;                                                    02S0545
         B     @RC00539                                         02S0545
@RF00539 DS    0H                                               02S0546
*          RTNCODE=REG15;          /*SET ERROR CODE                  */
         ST    REG15,RTNCODE                                    02S0546
*          FAILRSC=EREQCODE;       /*SET REASON CODE                 */
         L     @08,@PC00001+16                                  02S0547
         L     @03,EREQPTR                                      02S0547
         LH    @03,EREQCODE(,@03)                               02S0547
         STH   @03,FAILRSC(,@08)                                02S0547
*        END;                                                   02S0548
*    END;                                                       02S0549
*  ELSE;                           /*THIS SIOT NOT A DUMMY REQ       */
@RF00517 DS    0H                                               02S0551
*  SIOTPTR=SIOTNPTR;               /*GET NEXT SIOT                   */
@RC00517 L     SIOTPTR,SIOTNPTR(,SIOTPTR)                       02S0551
*END;                                                           02S0552
@DE00516 SLR   @08,@08                                          02S0552
         L     @03,ALCWAPTR                                     02S0552
         C     @08,DMYREQS(,@03)                                02S0552
         BE    @DC00516                                         02S0552
         C     @08,RTNCODE                                      02S0552
         BE    @DL00516                                         02S0552
@DC00516 DS    0H                                               02S0553
*          END;                                                 01S0553
*        ELSE;                         /*ERRORS AND/OR NO DUMMY REQS */
@RF00511 DS    0H                                               01S0555
*        IF VAMREQS^=ZERO & RTNCODE=SUCCESS THEN /*ANY VAM, NO ERRS? */
         SLR   @08,@08                                          01S0555
         L     @01,ALCWAPTR                                     01S0555
         C     @08,VAMREQS(,@01)                                01S0555
         BE    @RF00555                                         01S0555
         C     @08,RTNCODE                                      01S0555
         BNE   @RF00555                                         01S0555
*          DO;                         /*YES, ALLOCATE VAM REQUESTS  */
*            CALL IEFAB431(ALCWAPTR);  /*ALLOCATE TO VAM             */
         LA    @08,ALCWAPTR                                     01S0557
         ST    @08,@AL00001                                     01S0557
         L     @15,@CV00143                                     01S0557
         LA    @01,@AL00001                                     01S0557
         BALR  @14,@15                                          01S0557
*            RTNCODE = REG15;          /*SAVE RETURN CODE            */
         ST    REG15,RTNCODE                                    01S0558
*          END;                                                 01S0559
*        ELSE;                         /*ERRORS AND/OR NO VAM REQS   */
@RF00555 DS    0H                                               01S0561
*        IF SUBSREQS ^= 0 &            /*SUBSYSTEM DATA SETS TO ALLOC*/
*            RTNCODE=SUCCESS THEN                               01S0561
         SLR   @08,@08                                          01S0561
         L     @01,ALCWAPTR                                     01S0561
         C     @08,SUBSREQS(,@01)                               01S0561
         BE    @RF00561                                         01S0561
         C     @08,RTNCODE                                      01S0561
         BNE   @RF00561                                         01S0561
*          DO;                                                  01S0562
*            CALL IEFAB427(ALCWAPTR);  /*ALLOC SUBSYSTEM DATA SETS   */
         LA    @08,ALCWAPTR                                     01S0563
         ST    @08,@AL00001                                     01S0563
         L     @15,@CV00140                                     01S0563
         LA    @01,@AL00001                                     01S0563
         BALR  @14,@15                                          01S0563
*            RTNCODE = REG15;                                   01S0564
         ST    REG15,RTNCODE                                    01S0564
*          END;                                                 01S0565
*        ELSE;                                                  01S0566
@RF00561 DS    0H                                               01S0567
*        IF TOTREQS ^= ZERO & RTNCODE = SUCCESS THEN            01S0567
         SLR   @08,@08                                          01S0567
         L     @01,ALCWAPTR                                     01S0567
         C     @08,TOTREQS(,@01)                                01S0567
         BE    @RF00567                                         01S0567
         C     @08,RTNCODE                                      01S0567
         BNE   @RF00567                                         01S0567
*                                      /*ANY OTHER REQS AND NO ERRORS*/
*          DO;                         /*YES,CONTINUE ALLOCATION     */
*            CALL IEFAB423(ALCWAPTR);  /*DETERMINE DEVICE REQMENTS   */
         LA    @08,ALCWAPTR                                     01S0569
         ST    @08,@AL00001                                     01S0569
         L     @15,@CV00138                                     01S0569
         LA    @01,@AL00001                                     01S0569
         BALR  @14,@15                                          01S0569
*            RTNCODE = REG15;          /*SAVE RETURN CODE            */
         ST    REG15,RTNCODE                                    01S0570
*            IF RTNCODE = SUCCESS THEN /*ANY ERRORS                  */
         L     @08,RTNCODE                                      01S0571
         LTR   @08,@08                                          01S0571
         BNZ   @RF00571                                         01S0571
*              DO;                     /*NO,CONTINUE ALLOC PROCESSING*/
*                ENQLIST1 = ALLOCENQ;  /*MOVE 4-ENTRY ENQ LIST TO
*                                        GOTTEN CORE         @Z40FPPD*/
         MVC   ENQLIST1(48),ALLOCENQ                            01S0573
*                ENQQ4 = ON;           /*SET ESTAE INDICATOR         */
*                DDRQ = ON;            /*SET ESTAE INDICATOR         */
*                CHNGQ = ON;           /*SET ESTAE INDICATOR         */
         OI    ENQQ4(EXITP),B'11100000'                         01S0576
*                IF DDRDA = OFF &      /* DDR'S ENQS         @ZA32215*/
*                   DDRTPUR = OFF THEN /* NOT NEEDED         @ZA32215*/
         L     @08,ALCWAPTR                                     01S0577
         TM    DDRDA(@08),B'00000110'                           01S0577
         BNZ   @RF00577                                         01S0577
*                  ENQEND2 = ON;       /* SET END INDICATOR  @ZA32215*/
         OI    ENQEND2,B'10000000'                              01S0578
*                ELSE                                           01S0579
*                  IF DDRDA = OFF THEN /*DA ENQ NOT NEEDED   @ZA32215*/
         B     @RC00577                                         01S0579
@RF00577 L     @08,ALCWAPTR                                     01S0579
         TM    DDRDA(@08),B'00000010'                           01S0579
         BNZ   @RF00579                                         01S0579
*                    ENQEND3 = ON;     /*SET END INDICATOR   @ZA32215*/
         OI    ENQEND3,B'10000000'                              01S0580
*                  ELSE                                         01S0581
*                    IF DDRTPUR = OFF THEN /*TAPE/UR NOT NEEDED 01S0581
*                                                            @ZA32215*/
         B     @RC00579                                         01S0581
@RF00579 L     @08,ALCWAPTR                                     01S0581
         TM    DDRTPUR(@08),B'00000100'                         01S0581
         BNZ   @RF00581                                         01S0581
*                      DO;             /*MOVE 4 TO 3         @ZA32215*/
*                        ENQLST3 = ENQLST4; /*MOVE ENQ LIST  @ZA32215*/
         MVC   ENQLST3(12),ENQLST4                              01S0583
*                        ENQEND3 = ON; /*SET END INDICATOR   @ZA32215*/
         OI    ENQEND3,B'10000000'                              01S0584
*                      END;            /*END MOVE 4 TO 3     @ZA32215*/
*                GEN REFS(ENQLIST1,REG1); /*ENQ RESOURCES    @ZA32215*/
@RF00581 DS    0H                                               01S0586
@RC00579 DS    0H                                               01S0586
@RC00577 DS    0H                                               01S0586
                ENQ MF=(E,ENQLIST1),RET=USE                   @Z40FPPD
*                IF REG15 ^= 0 THEN    /*ALL RESOURCES          01S0587
*                                        GOTTEN?             @Z40FPPD*/
         LTR   REG15,REG15                                      01S0587
         BZ    @RF00587                                         01S0587
*                  DO;                 /*NO-                 @Z40FPPD*/
*                    ENQLIST = ALENQ1; /*MOVE SINGLE ENQ LIST   01S0589
*                                        TO GOTTEN CORE      @Z40FPPD*/
         MVC   ENQLIST(12),ALENQ1                               01S0589
*                    GEN REFS(ENQLIST,ENQLIST1,REG1); /*     @Z40FPPD*/
                    DEQ MF=(E,ENQLIST1),RET=HAVE              @Z40FPPD
                    ENQ (SYSQNAME,SYSALLOC,S,2,SYSTEM),MF=(E,ENQLIST)
                    ENQ (SYSQNAME,SYSRNAME,S,8,SYSTEM),MF=(E,ENQLIST)
*                    IF DDRTPUR = ON THEN /*TAPE×UNIT REC REQ@ZA32215*/
         L     @08,ALCWAPTR                                     01S0591
         TM    DDRTPUR(@08),B'00000100'                         01S0591
         BNO   @RF00591                                         01S0591
*                      DO;             /*YES, ENQ DDR TP×UR  @ZA32215*/
*                        GEN REFS(ENQLIST); /*               @ZA32215*/
                     ENQ (SYSQNAME,SYSRNME1,S,7,SYSTEM),MF=(E,ENQLIST)
*                      END;            /*END ENQ DDR TP×UR   @ZA32215*/
*                    IF DDRDA = ON THEN /*DA REQUESTS        @ZA32215*/
@RF00591 L     @08,ALCWAPTR                                     01S0595
         TM    DDRDA(@08),B'00000010'                           01S0595
         BNO   @RF00595                                         01S0595
*                      DO;             /*YES, ENQ DDR DA     @ZA32215*/
*                        GEN REFS(ENQLIST); /*               @ZA32215*/
                     ENQ (SYSQNAME,SYSRNME2,S,5,SYSTEM),MF=(E,ENQLIST)
*                      END;            /*END ENQ DDR DA      @ZA32215*/
*                  END;               /*                     @Z40FPPD*/
@RF00595 DS    0H                                               01S0600
*                CALL IEFAB430(ALCWAPTR);/*ALLOCATE TO FIXED DA DEV
*                                                            @ZA04127*/
@RF00587 LA    @08,ALCWAPTR                                     01S0600
         ST    @08,@AL00001                                     01S0600
         L     @15,@CV00142                                     01S0600
         LA    @01,@AL00001                                     01S0600
         BALR  @14,@15                                          01S0600
*                RTNCODE=REG15;       /*SAVE RETURN CODE     @ZA04127*/
         ST    REG15,RTNCODE                                    01S0601
*                IF RTNCODE=SUCCESS THEN /*IF OK CALL JES3      01S0602
*                                          EXIT              @ZA04127*/
         L     @08,RTNCODE                                      01S0602
         LTR   @08,@08                                          01S0602
         BNZ   @RF00602                                         01S0602
*                  DO;                   /*                  @ZA04127*/
*                    FLAG422=FLAG422&&FLAG422;/*CLEAR FLAGS @Y30QPPA*/
         XC    FLAG422(1),FLAG422                               01S0604
*                    IF EXTRACAL=ON THEN /*RECALL FOR OLD DD @Y30QPPA*/
         L     @08,ALCWAPTR                                     01S0605
         L     @08,FMAPPTR(,@08)                                01S0605
         TM    EXTRACAL(@08),B'00000001'                        01S0605
         BNO   @RF00605                                         01S0605
*                      CALLAGIN = ON;     /*INDICATE RECALL  @Y30QPPA*/
         OI    CALLAGIN,B'10000000'                             01S0606
*                    CALL IEFAB422(ALCWAPTR,STEPNUM,            01S0607
*                              FLAG422);  /*CALL JES3 RTN    @Y30QPPA*/
@RF00605 LA    @08,ALCWAPTR                                     01S0607
         ST    @08,@AL00001                                     01S0607
         L     @08,@PC00001+32                                  01S0607
         ST    @08,@AL00001+4                                   01S0607
         LA    @08,FLAG422                                      01S0607
         ST    @08,@AL00001+8                                   01S0607
         L     @15,@CV00137                                     01S0607
         LA    @01,@AL00001                                     01S0607
         BALR  @14,@15                                          01S0607
*                    IF SU18BIT=ON THEN   /*SU 18 IN SYSTEM  @G18MP21*/
         L     @08,CVTPTR                                       01S0608
         L     @08,CVTIHASU(,@08)                               01S0608
         TM    SU18BIT(@08),B'00100000'                         01S0608
         BNO   @RF00608                                         01S0608
*                      RTNCODE=REG15;  /*SET RETURN CODE     @G18MP21*/
         ST    REG15,RTNCODE                                    01S0609
*                  END;                   /*                 @ZA04127*/
@RF00608 DS    0H                                               01S0611
*                IF RTNCODE = SUCCESS &  /*IEFAB430 SUCCESSFUL       */
*                   TPREQS ^= ZERO THEN  /*TP REQS TO ALLOCATE       */
@RF00602 SLR   @08,@08                                          01S0611
         C     @08,RTNCODE                                      01S0611
         BNE   @RF00611                                         01S0611
         L     @01,ALCWAPTR                                     01S0611
         C     @08,TPREQS(,@01)                                 01S0611
         BE    @RF00611                                         01S0611
*                  DO;                                          01S0612
*                    CALL IEFAB425(ALCWAPTR);  /*ALLOCATE TP REQUESTS*/
         LA    @08,ALCWAPTR                                     01S0613
         ST    @08,@AL00001                                     01S0613
         L     @15,@CV00139                                     01S0613
         LA    @01,@AL00001                                     01S0613
         BALR  @14,@15                                          01S0613
*                    RTNCODE = REG15;  /*SAVE IEFAB425 RETURN CODE   */
         ST    REG15,RTNCODE                                    01S0614
*                  END;                                         01S0615
*                IF TOTREQS ^= ZERO & RTNCODE = SUCCESS THEN    01S0616
@RF00611 SLR   @08,@08                                          01S0616
         L     @15,ALCWAPTR                                     01S0616
         C     @08,TOTREQS(,@15)                                01S0616
         BE    @RF00616                                         01S0616
         C     @08,RTNCODE                                      01S0616
         BNE   @RF00616                                         01S0616
*                                      /*ANY OTHER REQS AND NO ERRORS*/
*                  DO;                     /*YES,CONTINUE ALLOCATION */
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - DOVOLENQ                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - VOLUME RESERVATION                            */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THE PURPOSE OF THIS CODE SEGMENT IS TO ENSURE THAT ALL SPECIFIC*/
*/*   VOLUMES REQUIRED BY THIS ALLOCATION ARE AVAILABLE FOR ITS USE. */
*/*   ALL PERMANENTLY-RESIDENT AND RESERVED DIRECT ACCESS VOLUMES    */
*/*   ARE ALWAYS AVAILABLE TO EACH JOB BECAUSE THEY ARE AUTOMATICALLY*/
*/*   SHAREABLE BETWEEN ALL JOBS, HOWEVER THIS CODE SEGMENT MUST     */
*/*   ENQ ON ALL OTHER SPECIFIC VOLUMES REQUESTED BY THIS ALLOCATION */
*/*   IN ORDER TO DETERMINE IF THEY ARE AVAILABLE. FROM THE VOLUNIT  */
*/*   TABLE IT CAN BE DETERMINED WHICH VOLUMES MUST BE ENQ'ED AND    */
*/*   WHETHER THEY SHOULD BE ENQ'ED SHARED OR EXCLUSIVE.             */
*/*                                                                  */
*/*     .ALL TAPE VOLUMES MUST BE ENQ'ED EXCLUSIVE BECAUSE TAPE      */
*/*      VOLUMES CANNOT BE SHARED BETWEEN DIFFERENT JOBS.            */
*/*                                                                  */
*/*     .BECAUSE DIRECT ACCESS DEVICES ARE INHERENTLY SHAREABLE,     */
*/*      DIRECT ACCESS VOLUMES ARE ENQ'ED SHARED EXCEPT WHEN IT IS   */
*/*      POSSIBLE THAT THIS JOB MAY HAVE TO REMOVE THIS VOLUME DURING*/
*/*      ITS PROCESSING - WHICH CAN ONLY BE DUE TO ONE OF THE        */
*/*      FOLLOWING SITUATIONS:                                       */
*/*        1) THE VOLUME IS TO BE ALLOCATED TO THE LAST UNIT FOR A   */
*/*           MULTI-VOLUME DATA SET REQUEST WHERE MORE               */
*/*           VOLUMES THAN UNITS WERE REQUESTED - AND THEREFORE THE  */
*/*           EXCESS VOLUMES ARE ALL ALLOCATED TO THE LAST UNIT.     */
*/*                                                                  */
*/*        2) THROUGH UNIT AFFINITY, THE VOLUME WAS REQUESTED TO BE  */
*/*           ALLOCATED TO THE SAME UNIT AS ANOTHER VOLUME.          */
*/*                                                                  */
*/*   IF BIT VWAITSW  OF THE FUNCTION MAP (FUNCMAP) IS ON, THEN      */
*/*   THE ALLOCATION WILL WAIT UNTIL THE VOLUMES REQUESTED ARE       */
*/*   AVAILABLE. THE OPERATOR WILL BE ABLE TO CANCEL THE ALLOCATION  */
*/*   EVEN WHILE IT IS WAITING.                                      */
*/*   IF BIT VWAITSW  OF THE FUNCTION MAP IS NOT ON, THEN THE        */
*/*   ALLOCATION REQUESTS WILL BE FAILED IF ALL THE REQUESTED        */
*/*   VOLUMES ARE NOT IMMEDIATELY AVAILABLE. A VOLUME IS NOT         */
*/*   IMMEDIATELY AVAILABLE UNDER THE FOLLOWING CONDITIONS:          */
*/*     1) VOLUME IS REQUESTED EXCLUSIVE AND IS CURRENTLY BEING      */
*/*        USED BY ANOTHER JOB OR THIS JOB (BECAUSE OF A PREVIOUS    */
*/*        CALL TO ALLOCATION).                                      */
*/*                                                                  */
*/*     2) VOLUME IS REQUESTED SHARED BUT IS BEING USED EXCLUSIVE    */
*/*        BY ANOTHER JOB OR THIS JOB (BECAUSE OF A PREVIOUS         */
*/*        CALL TO ALLOCATION).                                      */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*     THE VOLUNIT TABLE IS USED TO DETERMINE WHICH VOLUME SERIAL   */
*/*     NUMBERS SHOULD BE ENQ'ED AND TO DETERMINE WHETHER EACH       */
*/*     VOLSER SHOULD BE ENQ'ED SHARED OR EXCLUSIVE.                 */
*/*     THE VOLUNIT TABLE IS FIRST SCANNED TO DETERMINE HOW MANY     */
*/*     VOLSERS ARE TO BE ENQ'ED AND TO MARK THE VOLUME ENTRIES      */
*/*     TO BE ENQ'ED.                                                */
*/*     AFTER CORE IS OBTAINED FOR THE ENQ LIST, THE VOLUNIT TABLE   */
*/*     IS SCANNED AGAIN TO FILL IN THE INFORMATION FOR THE ENQ LIST.*/
*/*                                                                  */
*/*     THE REST OF THE OPERATION IS DOCUMENTED BY THE CODE ITSELF.  */
*/*                                                                  */
*/* ENTRY - INLINE SUBROUTINE                                        */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     FUNCMAP - FUNCTION MAP                                       */
*/*     ALCWAPTR - POINTER TO THE ALLOCATION WORK AREA               */
*/*       VOLUNPTR - POINTER TO VOLUNIT TABLE                        */
*/*                                                                  */
*/* EXIT - INLINE SUBROUTINE                                         */
*/*                                                                  */
*/*   CONDITION - ALL VOLUMES AVAILABLE TO THE ALLOCATION.           */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*            VOLUMES ENQ'ED SHARED OR EXCLUSIVE                    */
*/*                                                                  */
*/*     RETURN CODE - (NONE)                                         */
*/*                                                                  */
*/*   CONDITION - ALLOCATION COULD NOT WAIT AND ALL REQUESTED        */
*/*               VOLUMES WERE NOT IMMEDIATELY AVAILABLE.            */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*            REASON CODE (FAILRSC) SET TO 7                        */
*/*                                                                  */
*/*     RETURN CODE -                                                */
*/*            RTNCODE - 4                                           */
*/*                                                                  */
*/*   CONDITION - OPERATOR CANCELLED ALLOCATION                      */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*            REASON CODE (FAILRSC) SET TO 5                        */
*/*                                                                  */
*/*     RETURN CODE                                                  */
*/*            RTNCODE - 4                                           */
*/*                                                                  */
*/*   CONDITION - GETMAIN ERROR                                      */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*            REASON CODE (FAILRSC) SET TO 2                        */
*/*                                                                  */
*/*     RETURN CODE -                                                */
*/*            RETCODE - 4                                           */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*VUPTR = VOLUNPTR;                     /*POINT TO FIRST VOLUNIT ENTRY*/
         L     VUPTR,VOLUNPTR(,@15)                             02S0618
*VOLUNNO=VOLUNSZE/LENGTH(VOLUNTAB);    /*DETERMINE # OF VU ENTRIES   */
         L     @00,VOLUNSZE(,@15)                               02S0619
         SRDA  @00,32                                           02S0619
         D     @00,@CF03661                                     02S0619
         LR    VOLUNNO,@01                                      02S0619
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - CNTVENQS                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - DETERMINE NUMBER OF VOLUME ENQS NEEDED        */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THE PURPOSE OF THIS CODE SEGMENT IS TO TELL HOW MANY SPECIFIC  */
*/*   VOLUME SERIAL NUMBERS MUST BE ENQ'ED BY THIS ALLOCATION.       */
*/*   THIS SEGMENT ALSO INDICATES WHICH VOLSERS MUST BE ENQ'ED -     */
*/*   BY MARKING THE APPROPRIATE ENTRIES IN THE VOLUNIT TABLE.       */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*     THIS  CODE  SCANS THE VOLUNIT TABLE TO FIND EACH UNIQUE      */
*/*     SPECIFIC VOLUME ENTRY FOR WHICH THERE IS AT LEAST ONE REQUEST*/
*/*     WHICH HAS NOT YET BEEN ALLOCATED. ALL SUCH VOLUME ENTRIES    */
*/*     ARE COUNTED AND MARKED (SO THEY WILL BE ENQ'ED LATER).       */
*/*                                                                  */
*/* ENTRY - INLINE SUBROUTINE                                        */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     ALCWAPTR - POINTER TO THE ALLOCATION WORK AREA.              */
*/*       VOLUNPTR - POINTER TO THE VOLUNIT TABLE.                   */
*/*                                                                  */
*/* EXIT - NORMAL - INLINE SUBROUTINE                                */
*/*                                                                  */
*/*   CONDITION - VOLUNIT ENTRIES FOR VOLUME SERIAL NUMBERS TO BE    */
*/*               ENQ'ED ARE COUNTED AND MARKED.                     */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*       NOENQCTR - NUMBER OF VOLSERS TO ENQ.                       */
*/*       VOLRESVE - BIT IN EACH VOLUNIT TABLE ENTRY. SET TO 1 FOR   */
*/*                  UNIQUE SPECIFIC VOLUME ENTRIES TO BE ENQ'ED.    */
*/*                                                                  */
*/*   RETURN CODE - (NONE)                                           */
*/*                                                                  */
*/********************************************************************/
*NOENQCTR = ZERO;                      /*INITIALIZE COUNT TO ZERO    */
         SLR   NOENQCTR,NOENQCTR                                03S0620
*DO VUCTR = ONE TO VOLUNNO;            /*SCAN ALL VOLUNIT ENTRIES    */
         LA    VUCTR,1                                          03S0621
         B     @DE00621                                         03S0621
@DL00621 DS    0H                                               03S0622
*  IF VOLALOC = OFF & VOLSPEC = ON THEN /*IS THIS AN UNALLOCATED,
*                                         SPECIFIC VOLUME REQUEST?   */
         TM    VOLALOC(VUPTR),B'10000000'                       03S0622
         BNZ   @RF00622                                         03S0622
         TM    VOLSPEC(VUPTR),B'00100000'                       03S0622
         BNO   @RF00622                                         03S0622
*    DO;                               /*YES, SEE IF UNIQUE VOL REQ  */
*      VOLRESVE = ON;                  /*ASSUME UNIQUE VOLSER ENTRY  */
         OI    VOLRESVE(VUPTR),B'00000100'                      03S0624
*      RESCANP = VOLUNPTR;             /*POINT TO FIRST VOLUNIT ENTRY*/
         L     @08,ALCWAPTR                                     03S0625
         L     RESCANP,VOLUNPTR(,@08)                           03S0625
*      DO WHILE (RESCANP ^= VUPTR      /*RESCAN ALL VOLUNIT ENTRIES  */
*        & VOLRESVE = ON );            /*UNTIL DUP VOLSER FOUND      */
         B     @DE00626                                         03S0626
@DL00626 DS    0H                                               03S0627
*        IF RESCANP -> VOLID = VOLID THEN /*IS VOLSER A DUPLICATE ?  */
         CLC   VOLID(6,RESCANP),VOLID(VUPTR)                    03S0627
         BNE   @RF00627                                         03S0627
*          DO;                         /*YES, VOLSER IS DUPLICATE    */
*            VOLRESVE = OFF;           /*TURN OFF UNIQUE INDICATOR   */
         NI    VOLRESVE(VUPTR),B'11111011'                      03S0629
*          END;                                                 03S0630
*        ELSE;                         /*MATCH FOR VOLSER NOT FOUND  */
@RF00627 DS    0H                                               03S0632
*        RESCANP=RESCANP+LENGTH(VOLUNTAB);/*POINT TO NEXT VOLUNIT
*                                        ENTRY FOR RESCAN            */
         AL    RESCANP,@CF03661                                 03S0632
*      END;                                                     03S0633
@DE00626 CR    RESCANP,VUPTR                                    03S0633
         BE    @DC00626                                         03S0633
         TM    VOLRESVE(VUPTR),B'00000100'                      03S0633
         BO    @DL00626                                         03S0633
@DC00626 DS    0H                                               03S0634
*      IF VOLRESVE = ON THEN           /*IS ENTRY REALLY UNIQUE ?    */
         TM    VOLRESVE(VUPTR),B'00000100'                      03S0634
         BNO   @RF00634                                         03S0634
*        DO;                           /*YES, ENTRY IS UNIQUE        */
*          NOENQCTR = NOENQCTR + ONE;  /*INCREMENT COUNT TO ENQ      */
         AL    NOENQCTR,@CF00076                                03S0636
*        END;                                                   03S0637
*      ELSE;                           /*ENTRY IS NOT UNIQUE         */
@RF00634 DS    0H                                               03S0639
*    END;                                                       03S0639
*  ELSE;                               /*NOT UNALLOC SPECIFIC VOL ENT*/
@RF00622 DS    0H                                               03S0641
*  VUPTR = VUPTR + LENGTH(VOLUNTAB);   /*POINT TO NEXT VOLUNIT ENTRY */
         AL    VUPTR,@CF03661                                   03S0641
*END;                                                           03S0642
         AL    VUCTR,@CF00076                                   03S0642
@DE00621 CR    VUCTR,VOLUNNO                                    03S0642
         BNH   @DL00621                                         03S0642
*IF NOENQCTR ^=ZERO THEN               /*ANY ENQS NEEDED             */
         SLR   @08,@08                                          02S0643
         CR    NOENQCTR,@08                                     02S0643
         BE    @RF00643                                         02S0643
*  DO;                                 /*YES, PROCESS                */
*    IF VWAITSW = ON &                 /*MAY ENQ WAIT        @ZA12405*/
*       JSCBPTR->JSCBTCBP^=ZERO THEN   /*TCBPTR AVAILABLE    @ZA12405*/
         L     @02,ALCWAPTR                                     02S0645
         L     @01,FMAPPTR(,@02)                                02S0645
         TM    VWAITSW(@01),B'00010000'                         02S0645
         BNO   @RF00645                                         02S0645
         L     @02,JSCBPTR(,@02)                                02S0645
         C     @08,JSCBTCBP(,@02)                               02S0645
         BE    @RF00645                                         02S0645
*      ENQPRFX=LENGTH(TCBPTR)+LENGTH(ENQECB); /*DIRECTED ENQ WITH WAIT
*                                               PREFIX       @ZA12405*/
         MVC   ENQPRFX(4),@CF00060                              02S0646
*    ELSE                              /*NO WAIT OR NO TCB   @ZA12405*/
*      ENQPRFX=LENGTH(TCBPTR);         /*USE SMALL PREFIX    @ZA12405*/
         B     @RC00645                                         02S0647
@RF00645 MVC   ENQPRFX(4),@CF00099                              02S0647
*    ENQSPACE=(NOENQCTR*ENQENTLN)+ENQPRFX; /*SET SIZE FOR ENQ CORE
*                                                            @ZA12405*/
@RC00645 LR    @08,NOENQCTR                                     02S0648
         MH    @08,@CH00043                                     02S0648
         AL    @08,ENQPRFX                                      02S0648
         ST    @08,ENQSPACE                                     02S0648
*     /* ?GETSTORG (SUBPOLNQ,ENQSPACE,VENQADDR);*/              02S0649
*       RFY (GTSTR0,GTSTR1,GTSTR2) RSTD; /*SAVE RGS*/           02S0649
*       GTSTR0 = ENQSPACE; /* SET AMOUNT*/                      02S0650
         LR    GTSTR0,@08                                       02S0650
*       GTSTR2 = SUBPOLNQ; /* SET SUBPOOL*/                     02S0651
         LA    GTSTR2,230                                       02S0651
*       GENERATE CODE;                                          02S0652
         GETMAIN RC,LV=(0),SP=(2)  DO GETMAIN
*       GTSTRTCD = GTSTR15; /* SAVE GETMAIN RET COD*/           02S0653
         ST    GTSTR15,GTSTRTCD                                 02S0653
*       VENQADDR = GTSTR1; /* ADDR OF GOTN STORG*/              02S0654
         ST    GTSTR1,VENQADDR                                  02S0654
*       RFY (GTSTR0,GTSTR1,GTSTR2) UNRSTD; /*RLSE */            02S0655
*       IF GTSTRTCD = 0 THEN /*GETMAIN SUCCESSFUL? */           02S0656
         L     @08,GTSTRTCD                                     02S0656
         LTR   @08,@08                                          02S0656
         BNZ   @RF00656                                         02S0656
*         DO;               /* YES, CLEAR STORAGE.*/            02S0657
*           RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                   02S0658
*                              GTSTR7,GTSTR8) RSTD;             02S0658
*           GTSTR4 = VENQADDR; /*STORG PTR*/                    02S0659
         L     @15,VENQADDR                                     02S0659
         LR    GTSTR4,@15                                       02S0659
*           GTSTR5 = ENQSPACE; /*STORG AMNT*/                   02S0660
         L     GTSTR5,ENQSPACE                                  02S0660
*           GTSTR7 = '00000000'X; /*PAD CHAR & LNTH*/           02S0661
         SLR   GTSTR7,GTSTR7                                    02S0661
*           IF SUBPOLNQ = GTST253 THEN                          02S0662
         B     @RF00662                                         02S0662
*          GEN                                                  02S0663
*       (MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8);       02S0663
         MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8
*           GEN REFS(GTSTR4,GTSTR6);                            02S0664
@RF00662 DS    0H                                               02S0664
              MVCL  GTSTR4,GTSTR6 CLEAR GOTTEN STORG
*           IF SUBPOLNQ = GTST253 THEN                          02S0665
         B     @RF00665                                         02S0665
*             GEN (MODESET KEYADDR=(2));                        02S0666
         MODESET KEYADDR=(2)
*           RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                   02S0667
*                              GTSTR7,GTSTR8) UNRSTD;           02S0667
@RF00665 DS    0H                                               02S0668
*         END;       /* STORAGE CLEARING COMPLETED */           02S0668
*       ELSE                                                    02S0669
*       VENQADDR= 0;   /* CLEAR RETURN ADDR. */                 02S0669
         B     @RC00656                                         02S0669
@RF00656 SLR   @08,@08                                          02S0669
         ST    @08,VENQADDR                                     02S0669
*       GTSTR15 = GTSTRTCD;    /* GTMN RETURN CODE */           02S0670
@RC00656 L     GTSTR15,GTSTRTCD                                 02S0670
*                                      /* RESTORE LIST PRINT STATUS  */
*/*GET SPACE FOR ENQ                                                 LI
*T                        */                                    02S0671
*    RTNCODE = REG15;                  /*SAVE RETURN CODE            */
         ST    REG15,RTNCODE                                    02S0671
*    IF RTNCODE = SUCCESS THEN         /*WAS GETMAIN SUCCESSFUL ?    */
         L     @08,RTNCODE                                      02S0672
         SLR   @02,@02                                          02S0672
         CR    @08,@02                                          02S0672
         BNE   @RF00672                                         02S0672
*      DO;                             /*GETMAIN SUCCESSFUL..CONTINUE*/
*        ENQADDR = VENQADDR;           /*SET POINTER FOR GOTTEN CORE
*                                        FOR ENQ LIST        @ZA12405*/
         L     ENQADDR,VENQADDR                                 02S0674
*        ENQLFORM = NOWAITEL;          /*COPY NO=WAIT SKELETON ENQ
*                                        LIST INTO GETMAIN           */
         MVC   ENQLFORM(12),NOWAITEL                            02S0675
*        IF VWAITSW = ON THEN          /*CAN ALLOC WAIT FOR VOLUMES? */
         L     @15,ALCWAPTR                                     02S0676
         L     @01,FMAPPTR(,@15)                                02S0676
         TM    VWAITSW(@01),B'00010000'                         02S0676
         BNO   @RF00676                                         02S0676
*          DO;                         /*YES,INDICAT WAIT IN SKEL ENQ*/
*            IF JSCBPTR->JSCBTCBP^=ZERO THEN /*              @ZA12405*/
         L     @01,JSCBPTR(,@15)                                02S0678
         L     @15,JSCBTCBP(,@01)                               02S0678
         CR    @15,@02                                          02S0678
         BE    @RF00678                                         02S0678
*              DO;                           /*              @ZA12405*/
*                ENQCNTRL=JSCBPTR -> JSCBTCBP; /*PUT TCBPTR IN ENQ
*                                                  LIST      @ZA12405*/
         ST    @15,ENQCNTRL(,ENQADDR)                           02S0680
*                ENQADDR = ENQADDR + LENGTH(TCBPTR); /*UPDATE PTR FOR
*                                                       ECB  @ZA12405*/
         AL    ENQADDR,@CF00099                                 02S0681
*                TCBPROV = ON;         /*INDICATE DIRECTED   @ZA12405*/
         OI    TCBPROV,B'00000001'                              02S0682
*              END;                    /*END TCB PORTION     @ZA12405*/
*            ELSE;                     /*NO TCBPTR AVAILABLE @ZA12405*/
@RF00678 DS    0H                                               02S0685
*             ENQWFLAG = RETECB;       /*INDICATE ECB IS PROVIDED    */
         NI    ENQWFLAG,B'11111100'                             02S0685
         OI    ENQWFLAG,B'00000100'                             02S0685
*             ENQCNTRL = ADDR(ENQECB); /*SET UP POINTER TO ECB       */
         LA    @02,ENQECB                                       02S0686
         ST    @02,ENQCNTRL(,ENQADDR)                           02S0686
*          END;                                                 02S0687
*        ELSE                          /*ALLOC CANNOT WAIT FOR VOLS  */
*          IF JSCBPTR->JSCBTCBP^=ZERO THEN /*TCB PTR NOT 0?  @YM03580*/
         B     @RC00676                                         02S0688
@RF00676 L     @02,ALCWAPTR                                     02S0688
         L     @02,JSCBPTR(,@02)                                02S0688
         L     @02,JSCBTCBP(,@02)                               02S0688
         LTR   @02,@02                                          02S0688
         BZ    @RF00688                                         02S0688
*            DO;                                                02S0689
*              TCBPROV = ON;           /*INDICATE DIRECTED ENQ       */
         OI    TCBPROV,B'00000001'                              02S0690
*              ENQCNTRL=JSCBPTR -> JSCBTCBP; /*POINT TO INITIATORS TCB
*                                        FOR DIRECTED ENQ            */
         ST    @02,ENQCNTRL(,ENQADDR)                           02S0691
*            END;                                               02S0692
*          ELSE;                       /*TCB PTR = 0 - DON'T DIRECT
*                                        ENQ                 @YM03580*/
@RF00688 DS    0H                                               02S0694
*        VENQLSTP=VENQADDR+ENQPRFX;    /*POINT TO FIRST ENQ ENTRY
*                                                            @ZA12405*/
@RC00676 L     VENQLSTP,VENQADDR                                02S0694
         AL    VENQLSTP,ENQPRFX                                 02S0694
*        VUPTR = VOLUNPTR;             /*POINT TO FIRST VOLUNIT ENTRY*/
         L     @04,ALCWAPTR                                     02S0695
         L     VUPTR,VOLUNPTR(,@04)                             02S0695
*        STENQNO = NOENQCTR;           /*SAVE NUMBER OF ENQS         */
         ST    NOENQCTR,STENQNO                                 02S0696
*        DO WHILE NOENQCTR ^= ZERO;    /*BUILD ENQ LIST FOR EACH
*                                        UNALLOC, SPECIFIC VOLUME    */
         B     @DE00697                                         02S0697
@DL00697 DS    0H                                               02S0698
*          IF VOLRESVE = ON THEN       /*UNIQUE,SPECIFIC,UNALLOC VOL?*/
         TM    VOLRESVE(VUPTR),B'00000100'                      02S0698
         BNO   @RF00698                                         02S0698
*            DO;                       /*YES, BUILD ENQ LIST         */
*              VENQLIST = ENQLFORM;    /*COPY SHARE SKELETON ENQ LIST*/
         MVC   VENQLIST(12,VENQLSTP),ENQLFORM                   02S0700
*              VENQSERP = ADDR(VOLID); /*INSERT PTR TO VOLSER        */
         ST    VUPTR,VENQSERP(,VENQLSTP)                        02S0701
*              IF VOLNSHR = ON × VOLTAREQ=ON THEN /*IS VOLUME TO BE
*                                        NON-SHARED?                 */
         TM    VOLNSHR(VUPTR),B'00001000'                       02S0702
         BO    @RT00702                                         02S0702
         TM    VOLTAREQ(VUPTR),B'10000000'                      02S0702
         BNO   @RF00702                                         02S0702
@RT00702 DS    0H                                               02S0703
*                DO;                   /*YES, CHANGE ENQ LIST        */
*                  VENQSHSW = OFF;     /*TURN OFF SHARED INDICATOR   */
         NI    VENQSHSW(VENQLSTP),B'01111111'                   02S0704
*                END;                                           02S0705
*              ELSE;                   /*NOT NON-SHAREABLE           */
@RF00702 DS    0H                                               02S0707
*              VENQLSTP=VENQLSTP + ENQENTLN;/*POINT TO NEXT ENQ ENTRY*/
         AL    VENQLSTP,@CF00043                                02S0707
*              NOENQCTR=NOENQCTR - ONE;/*DECREMENT COUNT OF ENQ ENTRY*/
         BCTR  NOENQCTR,0                                       02S0708
*            END;                                               02S0709
*          ELSE;                       /*NOT UNIQUE,SPECIFIC,+UNALLOC*/
@RF00698 DS    0H                                               02S0711
*          VUPTR=VUPTR+LENGTH(VOLUNTAB); /*PTR TO NEXT VOLUNIT ENTRY */
         AL    VUPTR,@CF03661                                   02S0711
*        END;                                                   02S0712
@DE00697 SLR   @04,@04                                          02S0712
         CR    NOENQCTR,@04                                     02S0712
         BNE   @DL00697                                         02S0712
*        VENQLSTP=VENQADDR+ENQSPACE-ENQENTLN; /*LOCATE LAST ENQ ENTRY*/
         L     @15,VENQADDR                                     02S0713
         LR    VENQLSTP,@15                                     02S0713
         AL    VENQLSTP,ENQSPACE                                02S0713
         SL    VENQLSTP,@CF00043                                02S0713
*        VENQLAST = VENQLAST × LAST;   /*INDICATE THIS IS LAST ENTRY */
         OI    VENQLAST(VENQLSTP),X'80'                         02S0714
*        ENQECB = ZERO;                /*ZERO ECB                    */
         ST    @04,ENQECB                                       02S0715
*        RFY (REG1) RSTD;              /*RESTRICT USE OF REG 1       */
*        REG1 = VENQADDR + ENQPRFX;    /*POINT TO ENQ LIST START
*                                                            @ZA12405*/
         AL    @15,ENQPRFX                                      02S0717
         LR    REG1,@15                                         02S0717
*        GEN REFS(REG1);               /*ENQ ON VOLUME SERIAL NUMBERS*/
        ENQ MF=(E,(REG1))
*        RFY (REG1) UNRSTD;                                     02S0719
*        ENQRTNP=REG15;                                         02S0720
         LR    ENQRTNP,REG15                                    02S0720
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - VENQRTN                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - HANDLE RETURN FROM VOLUME ENQ                 */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THE RESULTS OF THE VOLUME ENQ ARE PROCESSED AS FOLLOWS:        */
*/*                                                                  */
*/*       .IF THE ENQ WAS UNCONDITIONAL (+ ASYNCHRONOUS) AND         */
*/*        WAS NOT IMMEDIATELY SATISFIED, THIS ROUTINE DEQ'S OFF     */
*/*        THE ALLOCATION RESOURCE, INFORMS THE OPERATOR             */
*/*        THAT THE ALLOCATION IS WAITING FOR VOLUMES,               */
*/*        THEN WAITS FOR ENQ OR OPERATOR REPLY OF NO. WHEN          */
*/*        POSTED, THE ALLOCATION RESOURCE IS RE-ENQ'D.              */
*/*                                                                  */
*/*       .IF THE ENQ WAS CONDITIONAL, THE RETURNED INFO FROM ENQ    */
*/*        IS EXAMINED. IF A VOLUME WAS NOT IMMEDIATELY AVAILABLE,   */
*/*        THE ALLOCATION IS FAILED. IF THE VOLUME IS ALREADY OWNED  */
*/*        BY THIS JOB, THEN THE ALLOCATION IS FAILED UNLESS THE     */
*/*        VOLUME IS REQUESTED SHARED AND IS CURRENTLY RESERVED      */
*/*        SHARED (BY THIS JOB).                                     */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*     NO SPECIAL ALGORITHMS ARE USED IN THIS SEGMENT. THE          */
*/*     OPERATION IS DOCUMENTED IN THE CODE.                         */
*/*                                                                  */
*/* ENTRY - INLINE SUBROUTINE                                        */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*      VWAITSW - WAIT/NO-WAIT INDICATOR.                           */
*/*      ENQRTNP - 0 (SUCCESS) OR POINTER TO RETURN INFO (PROBLEM).  */
*/*                                                                  */
*/* EXIT - NORMAL - INLINE SUBROUTINE                                */
*/*                                                                  */
*/*   CONDITION - VOLUME ENQ SUCCESSFUL.                             */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*      GENERAL - VOLUMES RESERVED FOR JOB/STEP.                    */
*/*                                                                  */
*/*   RETURN CODES - (NONE)                                          */
*/*                                                                  */
*/* EXIT - ERROR - INLINE SUBROUTINE                                 */
*/*                                                                  */
*/*   CONDITION - OPERATOR REPLIED NO WHILE ALLOCATION WAS           */
*/*               WAITING FOR VOLUMES.                               */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*      REASON CODE (FAILRSC) - 0005.                               */
*/*                                                                  */
*/*   RETURN CODES -                                                 */
*/*      RTNCODE - 4                                                 */
*/*                                                                  */
*/* EXIT - ERROR - INLINE SUBROUTINE                                 */
*/*                                                                  */
*/*   CONDITION - VOLUMES NOT IMMEDIATELY AVAILABLE AND ALLOCATION   */
*/*               NOT ALLOWED TO WAIT.                               */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*      REASON CODE (FAILRSC) - 0007.                               */
*/*                                                                  */
*/*   RETURN CODES -                                                 */
*/*      RTNCODE - 4                                                 */
*/*                                                                  */
*/********************************************************************/
*IF VWAITSW = ON THEN                  /*WAS ENQ UNCONDITIONAL,ASYNC?*/
         L     @04,ALCWAPTR                                     03S0721
         L     @04,FMAPPTR(,@04)                                03S0721
         TM    VWAITSW(@04),B'00010000'                         03S0721
         BNO   @RF00721                                         03S0721
*  DO;                                 /*ENQ WAS UNCONDITIONAL,ASYNC */
*    ENQPTR=ENQRTNP;                   /*SAVE ADDR ENQ LIST  @ZA16402*/
         LR    ENQPTR,ENQRTNP                                   03S0723
*    WAITCNT=ZERO;                     /*ZERO # VOLS TO WAIT @ZA16402*/
*                                                               03S0724
         SLR   WAITCNT,WAITCNT                                  03S0724
*    IF ENQRTNP^=SUCCESS THEN          /*ENQ RETURN PTR ZERO @ZA15737*/
         LTR   ENQRTNP,ENQRTNP                                  03S0725
         BZ    @RF00725                                         03S0725
*       DO VENQCTR=ONE TO STENQNO;     /*NO CHECK ALL RETCDES@ZA16402*/
         LA    VENQCTR,1                                        03S0726
         B     @DE00726                                         03S0726
@DL00726 DS    0H                                               03S0727
*         IF ENQRC=JOBOWNS THEN        /*DOES THIS JOB OWN   @ZA15737*/
         CLI   ENQRC(ENQRTNP),8                                 03S0727
         BNE   @RF00727                                         03S0727
*           IF ENQSHRSW=OFF ×          /*IS REQUEST FOR SHARE@ZA15737*/
*              SHRENQSW=OFF THEN       /*IS IT WONED SHARE   @ZA15737*/
         TM    ENQSHRSW(ENQRTNP),B'10000000'                    03S0728
         BZ    @RT00728                                         03S0728
         TM    SHRENQSW(ENQRTNP),B'00010000'                    03S0728
         BNZ   @RF00728                                         03S0728
@RT00728 DS    0H                                               03S0729
*               DO;                    /*NOT THEN MUST WAIT  @ZA16402*/
*                 WAITCNT=WAITCNT+ONE; /*INCREMENT # VOLUMES @ZA16402*/
         AL    WAITCNT,@CF00076                                 03S0730
*               END;                   /*END THEN MUST WAIT  @ZA16402*/
*           ELSE                       /*YES ENQ IS COMPATIBL@ZA15737*/
*               DO;                    /*WAIT NOT NEEDED     @ZA16402*/
         B     @RC00728                                         03S0732
@RF00728 DS    0H                                               03S0733
*                 ENQRC=NOENQERR;      /*CLEAR ENQ RETURN CODE  03S0733
*                                                            @ZA16402*/
         MVI   ENQRC(ENQRTNP),X'00'                             03S0733
*               END;                   /*END WAIT NOT NEEDED @ZA16402*/
*         ELSE                         /*NOT OWNED BY JOB    @ZA15737*/
*           IF ENQRC^=NOENQERR THEN    /*IS THIS RETCODE ZERO@ZA15737*/
         B     @RC00727                                         03S0735
@RF00727 CLI   ENQRC(ENQRTNP),0                                 03S0735
         BE    @RF00735                                         03S0735
*               DO;                    /*NOT THEN MUST WAIT  @ZA16402*/
*                 WAITCNT=WAITCNT+ONE; /*INCREMENT # VOLUMES @ZA16402*/
         AL    WAITCNT,@CF00076                                 03S0737
*               END;                   /*END THEN MUST WAIT  @ZA16402*/
*         ENQRTNP=ENQRTNP+LENGTH(ENQRTNCB); /*NEXT RETCODE   @ZA15737*/
@RF00735 DS    0H                                               03S0739
@RC00727 AL    ENQRTNP,@CF00043                                 03S0739
*       END;                           /*END RETCODE CHECK   @ZA15737*/
         AL    VENQCTR,@CF00076                                 03S0740
@DE00726 C     VENQCTR,STENQNO                                  03S0740
         BNH   @DL00726                                         03S0740
*     IF WAITCNT^=ZERO THEN            /*IF MUST WAIT SET UP MESSAGE TO
*                                        INFORM OPERATOR     @ZA16402*/
@RF00725 LTR   WAITCNT,WAITCNT                                  03S0741
         BZ    @RF00741                                         03S0741
*       DO;                            /*ENQ HAS NOT COMPLETED YET   */
*         GEN;                                                  03S0743
           DEQ MF=(E,ENQLIST1),RET=NONE                       @ZA18123
*/***********************************************************@ZA16402*/
*/*                                                                  */
*/* SEGMENT NAME - VOLWAITM                                  @ZA16402*/
*/*                                                                  */
*/* DESCRIPTIVE NAME - SETUP AND ISSUE WAITING FOR VOLUMES   @ZA16402*/
*/*                    MESSAGES                              @ZA16402*/
*/*                                                                  */
*/* FUNCTION -                                               @ZA16402*/
*/*   THE PURPOSE OF THIS SEGMENT IS TO SETUP AND ISSUE THE  @ZA16402*/
*/*   WAITING FOR VOLUMES MESSAGES, IEF690I, AND IEF235D.    @ZA16402*/
*/*   THE ENQUEUE PARAMETER LIST WILL BE USED TO PLACE THE   @ZA16402*/
*/*   VOLUME SERIAL NUMBERS IN MESSAGE IEF690I.  NINE VOLUME @ZA16402*/
*/*   VOLUME SERIAL NUMBERS CAN APPEAR IN ONE IEF690I        @ZA16402*/
*/*   MESSAGE.  ENOUGH IEF690I MESSAGES WILL BE ISSUED TO    @ZA16402*/
*/*   INCLUDE ALL VOLUME SERIAL NUMBERS THAT THIS STEP IS    @ZA16402*/
*/*   WAITING ON.  THE IEF690I MESSAGES ARE ISSUED USING THE @ZA16402*/
*/*   MULTI LINE WTO FACILITY.  AFTER ALL THE VOLUME SERIALS @ZA16402*/
*/*   HAVE BEEN PUT OUT, ANOTHER WTO IS ISSUED WITH NO TEXT  @ZA16402*/
*/*   TO END THE MULTI LINE WTO. (TO BE SURE THE MULTI LINE  @ZA16402*/
*/*   IS ENDED A NEW BIT, MLWTO, HAS BEEN ADDED TO THE ESTAE @ZA16402*/
*/*   PARAMETER LIST. IF THIS BIT IS ON THE ESTAE ROUTINE,   @ZA16402*/
*/*   IEFAB4E8, WILL ISSUE AN END WTO PASSING THE MESSAGE ID @ZA16402*/
*/*   FROM PRMWTOID IN THE ESTAE PARAMETER LIST.) MESSAGE    @ZA16402*/
*/*   IEF235D IS PRODUCED ALLOWING THE OPERATOR TO CANCEL    @ZA16402*/
*/*   THE WAIT. 'NO' IS THE ONLY VALID REPLY TO THIS         @ZA16402*/
*/*   MESSAGE, ANY OTHER REPLY CAUSES THE IEF235D MESSAGE    @ZA16402*/
*/*   TO BE ISSUED AGAIN.                                    @ZA16402*/
*/*                                                                  */
*/* ENTRY - THIS CODE IS AN INLINE SUBROUTINE WHICH IS       @ZA16402*/
*/*         ENTERED AT THE TOP.                              @ZA16402*/
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                 @ZA16402*/
*/*                                                                  */
*/*   INPUT -                                                @ZA16402*/
*/*     WAITCNT - NUMBER OF VOLUME SERIAL NUMBERS BEING      @ZA16402*/
*/*               WAITED UPON.                               @ZA16402*/
*/*     ENQRC   - NONZERO IN EACH ENTRY OF THE ENQ PARAMETER @ZA16402*/
*/*               LIST WHERE A WAIT FOR VOLUME SERIAL IS     @ZA16402*/
*/*               NECESSARY.                                 @ZA16402*/
*/*     ENQPTR  - ADDRESS OF ENQ PARAMETER LIST              @ZA16402*/
*/*                                                                  */
*/* EXIT - THIS CODE IS AN INLINE SUBROUTINE WHICH EXITS     @ZA16402*/
*/*        FROM THE BOTTOM.                                  @ZA16402*/
*/*                                                                  */
*/*   CONDITION - THE OPERATOR HAS REPLIED 'NO' TO MESSAGE   @ZA16402*/
*/*               IEF235D OR THE VOLUMES ARE AVAILABLE       @ZA16402*/
*/*                                                                  */
*/*   RETURN CODE - NONE                                     @ZA16402*/
*/*                                                                  */
*/***********************************************************@ZA16402*/
*WTO690I = IEF690I;                    /*INIT WTO STORAGE    @ZA16402*/
         L     @15,@CA03606                                     04S0744
         MVC   WTO690I(70),IEF690I-IEF690I(@15)                 04S0744
*W690JOB = ALCJOBN;                    /*MOVE JOBNAME TO MSG @ZA16402*/
         L     @01,ALCWAPTR                                     04S0745
         L     @15,TIOTHDRP(,@01)                               04S0745
         MVC   W690JOB(8),ALCJOBN(@15)                          04S0745
*W690STP = ALCSTEPN;                   /*MOVE STEPNAME TO MSG@ZA16402*/
         MVC   W690STP(8),ALCSTEPN(@15)                         04S0746
*BUFFPTR = ADDR(W690TXT);              /*BEGINNING OF TEXT   @ZA16402*/
         LA    @15,W690TXT                                      04S0747
         ST    @15,BUFFPTR                                      04S0747
*TXTLENG = LENGTH(W690TXT);            /*TOTAL LENGTH OF MSG @ZA16402*/
         MVC   TXTLENG(4),@CF03561                              04S0748
*CALL IEFAB4F3(BUFFPTR,TXTLENG,NEWLENG); /*REMOVE BLANKS     @ZA16402*/
         LA    @15,BUFFPTR                                      04S0749
         ST    @15,@AL00001                                     04S0749
         LA    @15,TXTLENG                                      04S0749
         ST    @15,@AL00001+4                                   04S0749
         LA    @15,NEWLENG                                      04S0749
         ST    @15,@AL00001+8                                   04S0749
         L     @15,@CV03528                                     04S0749
         LA    @01,@AL00001                                     04S0749
         BALR  @14,@15                                          04S0749
*W690LEN = NEWLENG + LENGTH(W690LEN + W690FLG); /*NEW LENGTH @ZA16402*/
         L     @15,NEWLENG                                      04S0750
         LA    @01,4(,@15)                                      04S0750
         STH   @01,W690LEN                                      04S0750
*NEWLENG = NEWLENG + ONE;              /*INCREMENT LENGTH    @ZA16402*/
         AL    @15,@CF00076                                     04S0751
         ST    @15,NEWLENG                                      04S0751
*MLFLGLN = LENGTH(W690MLFL);           /*LEN OF MULTILINE FLG@ZA16402*/
         LA    MLFLGLN,8                                        04S0752
*W690TXT(NEWLENG:NEWLENG+MLFLGLN-1) = W690FLG2; /*MOVE FLAGS @ZA16402*/
         LA    @14,W690TXT-1(@15)                               04S0753
         LR    @15,MLFLGLN                                      04S0753
         BCTR  @15,0                                            04S0753
         EX    @15,@SM03710                                     04S0753
*REG0 = ZERO;                          /*ZERO REGISTER 0     @ZA16402*/
         SLR   REG0,REG0                                        04S0754
*GEN REFS(WTO690I,REG1);               /*ISSUE IEF690I       @ZA16402*/
 WTO MF=(E,WTO690I)                                           @ZA16402
*MLWTOID = REG1;                       /*SAVE MULTI LINE ID  @ZA16402*/
         ST    REG1,MLWTOID                                     04S0756
*PRMWTOID = REG1;                      /*SAVE ID FOR ESTAE   @ZA16402*/
         ST    REG1,PRMWTOID(,EXITP)                            04S0757
*WTOID(1:3) = WTOID(2:4);              /*SET UP ID FOR WTO   @ZA16402*/
         MVC   @TS00001(3),WTOID+1                              04S0758
         MVC   WTOID(3),@TS00001                                04S0758
*WTOID(4) = '00'X;                     /*CLEAR LAST BYTE     @ZA16402*/
         MVI   WTOID+3,X'00'                                    04S0759
*MLWTO = ON;                           /*END WTO IN ESTAE    @ZA16402*/
         OI    MLWTO(EXITP),B'00000010'                         04S0760
*WTO690L2 = IEF690L2;                  /*SECOND LINE BASE    @ZA16402*/
         L     @03,@CA03607                                     04S0761
         MVC   WTO690L2(82),IEF690L2-IEF690L2(@03)              04S0761
*ENQRTNP = ENQPTR;                     /*ADDR OF ENQ LIST    @ZA16402*/
         LR    ENQRTNP,ENQPTR                                   04S0762
*NUMLINES = ((WAITCNT-ONE)/NINE) + ONE; /*NUMB MESSAGES      @ZA16402*/
         LA    @03,1                                            04S0763
         LR    @00,WAITCNT                                      04S0763
         BCTR  @00,0                                            04S0763
         SRDA  @00,32                                           04S0763
         D     @00,@CF03232                                     04S0763
         ALR   @01,@03                                          04S0763
         LR    NUMLINES,@01                                     04S0763
*DO I = ONE TO NUMLINES;               /*PRINT ALL THE MSGS  @ZA16402*/
         LR    I,@03                                            04S0764
         B     @DE00764                                         04S0764
@DL00764 DS    0H                                               04S0765
*  W690TXT2(8:70) = '';                /*BLANK OUT VOL SERS  @ZA16402*/
         MVI   W690TXT2+7,C' '                                  04S0765
         MVC   W690TXT2+8(62),W690TXT2+7                        04S0765
*  DO J = ONE TO NINE WHILE WAITCNT ^= ZERO; /*9 VOLUMES     @ZA16402*/
         LA    J,1                                              04S0766
@DL00766 LTR   WAITCNT,WAITCNT                                  04S0766
         BZ    @DC00766                                         04S0766
*    IF ENQRC ^= NOENQERR THEN         /*IF ENTRY NEED WAIT @ZA16402*/
         CLI   ENQRC(ENQRTNP),0                                 04S0767
         BE    @RF00767                                         04S0767
*      DO;                             /*PUT VOL IN MSG      @ZA16402*/
*        W690VOL(J) = VOLSER;          /*VOLUME SERIAL NUMBER@ZA16402*/
         LR    @07,J                                            04S0769
         MH    @07,@CH00084                                     04S0769
         LA    @01,W690VOL-7(@07)                               04S0769
         L     @07,VOLSERP(,ENQRTNP)                            04S0769
         MVC   0(6,@01),VOLSER(@07)                             04S0769
*        WAITCNT = WAITCNT - ONE;      /*DECREMENT # VOLS    @ZA16402*/
         BCTR  WAITCNT,0                                        04S0770
*      END;                            /*END PUT VOL IN MSG  @ZA16402*/
*    ENQRTNP = ENQRTNP + LENGTH(ENQRTNCB); /*NEXT ENQ ENTRY  @ZA16402*/
@RF00767 AL    ENQRTNP,@CF00043                                 04S0772
*  END;                                /*                    @ZA16402*/
         AL    J,@CF00076                                       04S0773
         C     J,@CF03232                                       04S0773
         BNH   @DL00766                                         04S0773
@DC00766 DS    0H                                               04S0774
*  REG0 = MLWTOID;                     /*CONNECT WTO'S       @ZA16402*/
         L     REG0,MLWTOID                                     04S0774
*  GEN REFS(WTO690L2,REG1);            /*ISSUE IEF690I       @ZA16402*/
   WTO MF=(E,WTO690L2)                                        @ZA16402
*END;                                                           04S0776
         AL    I,@CF00076                                       04S0776
@DE00764 CR    I,NUMLINES                                       04S0776
         BNH   @DL00764                                         04S0776
*WTO690ND = IEF690ND;                  /*INITIALIZE WTO LIST @ZA16402*/
         L     @15,@CA03608                                     04S0777
         MVC   WTO690ND(12),IEF690ND-IEF690ND(@15)              04S0777
*REG0 = MLWTOID;                       /*ID TO BE ENDED      @ZA16402*/
         L     REG0,MLWTOID                                     04S0778
*GEN REFS(WTO690ND,REG1);              /*END IEF690I         @ZA16402*/
 WTO MF=(E,WTO690ND)                                          @ZA16402
*MLWTO = OFF;                          /*ESTAE CLEANUP DONE  @ZA16402*/
         NI    MLWTO(EXITP),B'11111101'                         04S0780
*PRMWTOID = ZERO;                      /*CLEAR ESTAE ID      @ZA16402*/
         SLR   @15,@15                                          04S0781
         ST    @15,PRMWTOID(,EXITP)                             04S0781
*WTORLIST = VWAITLST;                  /*MOVE WTO TO GOTTEN CORE     */
         L     @15,@CA03618                                     04S0782
         MVC   WTORLIST(88),VWAITLST-VWAITLST(@15)              04S0782
*WTORJOBN =  ALCJOBN;                  /*PUT JOBNAME INTO WTO MSG    */
         L     @01,ALCWAPTR                                     04S0783
         L     @15,TIOTHDRP(,@01)                               04S0783
         MVC   WTORJOBN(8),ALCJOBN(@15)                         04S0783
*WTORSTPN = ALCSTEPN;                  /*PUT STEPNAME INTO WTO MSG   */
         MVC   WTORSTPN(8),ALCSTEPN(@15)                        04S0784
*BUFFPTR = ADDR(MSGTEXT);              /*PTR TO MSG TEXT             */
         LA    @15,MSGTEXT                                      04S0785
         ST    @15,BUFFPTR                                      04S0785
*TXTLENG = LENGTH(TEXTBEGN);           /*LENGTH OF MSG TEXT          */
         MVC   TXTLENG(4),@CF03663                              04S0786
*CALL IEFAB4F3(BUFFPTR,TXTLENG,NEWLENG);         /*COMPRESS MESSAGE  */
         LA    @15,BUFFPTR                                      04S0787
         ST    @15,@AL00001                                     04S0787
         LA    @15,TXTLENG                                      04S0787
         ST    @15,@AL00001+4                                   04S0787
         LA    @15,NEWLENG                                      04S0787
         ST    @15,@AL00001+8                                   04S0787
         L     @15,@CV03528                                     04S0787
         LA    @01,@AL00001                                     04S0787
         BALR  @14,@15                                          04S0787
*WTORLEN = NEWLENG + FLAGLEN;          /*NEW LENGTH TO WTOR LIST     */
         L     @15,NEWLENG                                      04S0788
         LA    @01,4(,@15)                                      04S0788
         STH   @01,WTORLEN                                      04S0788
*NEWLENG = NEWLENG + 1;                /*UP NEW LENGTH FOR MOVE      */
         AL    @15,@CF00076                                     04S0789
         ST    @15,NEWLENG                                      04S0789
*TEXTBEGN(NEWLENG: NEWLENG + FLAGLEN-1) = WTORFLGS; /*MOVE      04S0790
*                                        FLAGS TO END OF TEXT        */
         LA    @14,TEXTBEGN-1(@15)                              04S0790
         MVC   0(4,@14),WTORFLGS                                04S0790
*ENQECBP=ADDR(ENQECB);                 /*POINT TO ENQ ECB            */
         LA    @15,ENQECB                                       04S0791
         ST    @15,ENQECBP                                      04S0791
*WTORECBP=ADDR(WTORECB);               /*POINT TO CANCEL ECB         */
         LA    @15,WTORECB                                      04S0792
         ST    @15,WTORECBP                                     04S0792
*ENDLIST=ON;                           /*INDICATE END OF LIST        */
         OI    ENDLIST,B'10000000'                              04S0793
*RFY (REG1,REG2,REG3,REG4) RSTD;                                04S0794
*REG2 = REPLYLEN;                      /*LENGTH OF WTOR REPLY        */
         LA    REG2,2                                           04S0795
*REG3 = WTORECBP;                      /*PTR TO REPLY ECB            */
         L     REG3,WTORECBP                                    04S0796
*REG4 = ADDR(REPLYBUF);                /*PTR TO REPLY BUFFER         */
         LA    REG4,REPLYBUF                                    04S0797
*ENDWAIT = OFF;                        /*SET LOOP CONTROL            */
         NI    ENDWAIT,B'01111111'                              04S0798
*DO WHILE(ENDWAIT=OFF);                /*ISSUE WTOR                  */
         B     @DE00799                                         04S0799
@DL00799 DS    0H                                               04S0800
*  REPLYBUF = BLANKBUF;                /*CLEAR REPLY BUFFER          */
         MVC   REPLYBUF(2),@CC03601                             04S0800
*  WTORECB = ZERO;                     /*CLEAR REPLY ECB             */
         SLR   @00,@00                                          04S0801
         ST    @00,WTORECB                                      04S0801
*  GEN REFS(WTORLIST);                 /*ISSUE MSG IEF235D           */
    WTOR ,(4),(2),(3),MF=(E,WTORLIST)
*  DOMID = REG1;                       /*SAVE DOM ID                 */
         LR    DOMID,REG1                                       04S0803
*  GEN REFS(LISTECB);                                           04S0804
  WAIT ECBLIST=LISTECB,LONG=YES                             @YM05089
*  IF ENQPOST = ON THEN                /*ENQ HAS COMPLETED           */
         TM    ENQPOST,B'01000000'                              04S0805
         BNO   @RF00805                                         04S0805
*    DO;                               /*ISSUE DOM MACRO             */
*      ENDWAIT = ON;                   /*EXIT WTOR LOOP              */
*                                                               04S0807
         OI    ENDWAIT,B'10000000'                              04S0807
*       DO; /* DOM MSG(DOMID) REPLY(YES)*/                      04S0808
*         RFY (GPR00F,GPR01F) RSTD; /*RESTRICT REGISTERS*/      04S0809
*         GPR01F = DOMID; /* MOVE IN MESSAGE ID */              04S0810
         LR    GPR01F,DOMID                                     04S0810
*         GPR00F = 4; /* SHOW MSG REPLY SPECIFIED*/             04S0811
         LA    GPR00F,4                                         04S0811
*         SVC (87); /* ISSUE DOM SVC */                         04S0812
         SVC   87                                               04S0812
*         RFY (GPR00F,GPR01F) UNRSTD; /* RELEASE REGISTERS */   04S0813
*       END; /* DOM MSG(DOMID) REPLY(YES)*/                     04S0814
*    END;                                                       04S0815
*  ELSE                                /*OPERATOR REPLIED TO WTOR    */
*    DO;                               /*YES, JOB CANCELLED          */
         B     @RC00805                                         04S0816
@RF00805 DS    0H                                               04S0817
*      REPLYBUF = REPLYBUF × FOLDMASK; /*MAKE UPPER CASE             */
         OC    REPLYBUF(2),FOLDMASK                             04S0817
*      IF REPLYBUF = NOCHAR THEN               /*OPERATOR REPLIED NO */
         CLC   REPLYBUF(2),@CC03612                             04S0818
         BNE   @RF00818                                         04S0818
*        DO;                                    /*FAIL JOB            *
*          ENDWAIT = ON;                       /*EXIT WTOR LOOP      */
         OI    ENDWAIT,B'10000000'                              04S0820
*          RTNCODE = FAILURE;          /*SET ERROR RETURN CODE       */
         MVC   RTNCODE(4),@CF00099                              04S0821
*          FAILRSC = OPCANCEL;         /*INDICATE REASON FOR FAILURE */
         L     @15,@PC00001+16                                  04S0822
         MVC   FAILRSC(2,@15),@CH00116                          04S0822
*          VENQLSTP=VENQADDR+ENQPRFX;  /*FIRST ENQUEUE ENTRY    04S0823
*                                                            @ZA12405*/
         L     VENQLSTP,VENQADDR                                04S0823
         AL    VENQLSTP,ENQPRFX                                 04S0823
*          IF JSCBPTR->JSCBTCBP^=ZERO THEN         /*IF TCB IS  04S0824
*                                        AVAILABLE           @ZA12405*/
         L     @15,ALCWAPTR                                     04S0824
         L     @15,JSCBPTR(,@15)                                04S0824
         L     @15,JSCBTCBP(,@15)                               04S0824
         LTR   @15,@15                                          04S0824
         BZ    @RF00824                                         04S0824
*            ENQCNTRL = JSCBPTR->JSCBTCBP; /*SET ECBPTR IN CASE 04S0825
*                                        THIS WAS AN ECB FOR DIRECTED
*                                        ENQUEUE WITH THE WAIT OPTION
*                                                            @ZA12405*/
         ST    @15,ENQCNTRL(,ENQADDR)                           04S0825
*          DO VENQCTR = ONE TO STENQNO;         /*SCAN ALL ENQ ENTS  */
@RF00824 LA    VENQCTR,1                                        04S0826
         B     @DE00826                                         04S0826
@DL00826 DS    0H                                               04S0827
*            DEQFLAGS = CONDDEQ;         /*INDICATE CONDITIONAL DEQ  */
         MVC   DEQFLAGS(1,VENQLSTP),CONDDEQ                     04S0827
*            VENQLSTP=VENQLSTP+ENQENTLN;         /*POINT TO NEXT ENT */
         AL    VENQLSTP,@CF00043                                04S0828
*          END;                                                 04S0829
         AL    VENQCTR,@CF00076                                 04S0829
@DE00826 C     VENQCTR,STENQNO                                  04S0829
         BNH   @DL00826                                         04S0829
*          REG1=VENQADDR+ENQPRFX;         /*PASS POINTER TO DEQ 04S0830
*                                                            @ZA12405*/
         L     REG1,VENQADDR                                    04S0830
         AL    REG1,ENQPRFX                                     04S0830
*          GEN( DEQ MF=(E,(REG1)));         /*DEQ TO PREVENT ECB POST*/
          DEQ MF=(E,(REG1))
*        END;                                                   04S0832
*      ELSE;                           /*BAD REPLY, REISSUE WTOR     */
@RF00818 DS    0H                                               04S0834
*    END;                                                       04S0834
*END;                                                           04S0835
@RC00805 DS    0H                                               04S0835
@DE00799 TM    ENDWAIT,B'10000000'                              04S0835
         BZ    @DL00799                                         04S0835
*        GEN REFS(ENQLIST1,REG1);      /*ENQ 4 RESOURCES     @Z40FPPD*/
        ENQ MF=(E,ENQLIST1),RET=USE                           @Z40FPPD
*        IF REG15 ^= 0 THEN            /*ALL FOUR RESOURCES     03S0837
*                                        GOTTEN?             @Z40FPPD*/
         LTR   REG15,REG15                                      03S0837
         BZ    @RF00837                                         03S0837
*          DO;                         /*NO-                 @Z40FPPD*/
*            ENQLIST = ALENQ1;         /*MOVE SINGLE ENQ LIST TO
*                                        GOTTEN CORE         @Z40FPPD*/
         MVC   ENQLIST(12),ALENQ1                               03S0839
*            GEN REFS(ENQLIST,ENQLIST1,REG1);  /*            @Z40FPPD*/
            DEQ MF=(E,ENQLIST1),RET=HAVE                      @Z40FPPD
            ENQ (SYSQNAME,SYSALLOC,S,2,SYSTEM),MF=(E,ENQLIST) @YM08198
            ENQ (SYSQNAME,SYSRNAME,S,8,SYSTEM),MF=(E,ENQLIST) @YM08198
*            IF DDRTPUR = ON THEN      /*ANY TAPE×UR REQUESTS@ZA32215*/
         L     @08,ALCWAPTR                                     03S0841
         TM    DDRTPUR(@08),B'00000100'                         03S0841
         BNO   @RF00841                                         03S0841
*              DO;                     /*YES, ENQ DDR TAPE×UR@ZA32215*/
*                GEN REFS(ENQLIST);    /*                    @ZA32215*/
                 ENQ (SYSQNAME,SYSRNME1,S,7,SYSTEM),MF=(E,ENQLIST)
*              END;                    /*END ENQ DDR TAPE×UR @ZA32215*/
*            IF DDRDA = ON THEN        /*ANY DA REQUESTS     @ZA32215*/
@RF00841 L     @08,ALCWAPTR                                     03S0845
         TM    DDRDA(@08),B'00000010'                           03S0845
         BNO   @RF00845                                         03S0845
*              DO;                     /*YES, ENQ DDR DA     @ZA32215*/
*                GEN REFS(ENQLIST);    /*                    @ZA32215*/
                 ENQ (SYSQNAME,SYSRNME1,S,5,SYSTEM),MF=(E,ENQLIST)
*              END;                    /*END ENQ DDR DA      @ZA32215*/
*          END;                        /*                    @Z40FPPD*/
*      END;                                                     03S0850
*    ELSE;                             /*ENQ COMPLETE BEFORE WAIT    */
@RF00741 DS    0H                                               03S0852
*  END;                                                         03S0852
*ELSE                                  /*ENQ WAS CONDITIONAL         */
*  DO;                                                          03S0853
         B     @RC00721                                         03S0853
@RF00721 DS    0H                                               03S0854
*    IF ENQRTNP ^= SUCCESS THEN        /*WERE ANY ENQ PROBLEMS FOUND?*/
         SLR   @08,@08                                          03S0854
         CR    ENQRTNP,@08                                      03S0854
         BE    @RF00854                                         03S0854
*      DO;                             /*YES, ENQ PROBLEMS FOUND     */
*        RTNCODE = SUCCESS;            /*ASSUME NO FAILING ERROR     */
         ST    @08,RTNCODE                                      03S0856
*        DO VENQCTR = ONE TO STENQNO   /*CHECK RETURN CODE FOR EACH..*/
*          WHILE (RTNCODE = SUCCESS);  /*..ENQ                       */
         LA    VENQCTR,1                                        03S0857
         B     @DE00857                                         03S0857
@DL00857 L     @08,RTNCODE                                      03S0857
         LTR   @08,@08                                          03S0857
         BNZ   @DC00857                                         03S0857
*          IF ENQRC = NOTAVAIL THEN    /*WAS VOLUME UNAVAILABLE ?    */
         CLI   ENQRC(ENQRTNP),4                                 03S0858
         BNE   @RF00858                                         03S0858
*            DO;                       /*YES, VOLUME UNAVAILABLE     */
*              RTNCODE = FAILURE;      /*SET ERROR RETURN CODE       */
         MVC   RTNCODE(4),@CF00099                              03S0860
*              FAILRSC = NOVWAIT;      /*INDICATE REASON FOR FAILURE */
         L     @08,@PC00001+16                                  03S0861
         MVC   FAILRSC(2,@08),@CH00084                          03S0861
*            END;                                               03S0862
*          ELSE                        /*NOT DEFINITE FAILING ERROR. */
*            DO;                                                03S0863
         B     @RC00858                                         03S0863
@RF00858 DS    0H                                               03S0864
*              IF ENQRC = JOBOWNS THEN /*DOES THIS JOB OWN VOLUME?   */
         CLI   ENQRC(ENQRTNP),8                                 03S0864
         BNE   @RF00864                                         03S0864
*                DO;                   /*YES, DETERMINE IF ENQ OK    */
*                  IF ENQSHRSW=ON &    /*IS VOLUME REQUESTED SHARED
*                                                            @ZA12405*/
*                     SHRENQSW=ON THEN /*IS VOLUME ENQUEUED SHARED
*                                                            @ZA12405*/
         TM    ENQSHRSW(ENQRTNP),B'10000000'                    03S0866
         BNO   @RF00866                                         03S0866
         TM    SHRENQSW(ENQRTNP),B'00010000'                    03S0866
         BNO   @RF00866                                         03S0866
*                    RTNCODE = SUCCESS; /*YES ENQUEUE IS COMPATIBLE
*                                                            @ZA12405*/
         SLR   @08,@08                                          03S0867
         ST    @08,RTNCODE                                      03S0867
*                  ELSE                 /*VOLUME IS EITHER REQUESTED OR
*                                         ENQUEUED EXCLUSIVE @ZA12405*/
*                    DO;                                        03S0868
         B     @RC00866                                         03S0868
@RF00866 DS    0H                                               03S0869
*                      RTNCODE = FAILURE; /*SET ERROR RETURN CODE    */
         MVC   RTNCODE(4),@CF00099                              03S0869
*                      FAILRSC = NOVWAIT; /*SET REASON CODE          */
         L     @08,@PC00001+16                                  03S0870
         MVC   FAILRSC(2,@08),@CH00084                          03S0870
*                    END;                                       03S0871
*                END;                                           03S0872
*              ELSE;                     /*THIS JOB DOES NOT OWN     */
@RF00864 DS    0H                                               03S0874
*            END;                                               03S0874
@RC00864 DS    0H                                               03S0875
*          ENQRTNP = ENQRTNP + LENGTH(ENQRTNCB); /*PT TO NEXT ENQ    */
@RC00858 AL    ENQRTNP,@CF00043                                 03S0875
*        END;                                                   03S0876
         AL    VENQCTR,@CF00076                                 03S0876
@DE00857 C     VENQCTR,STENQNO                                  03S0876
         BNH   @DL00857                                         03S0876
@DC00857 DS    0H                                               03S0877
*      END;                                                     03S0877
*    ELSE;                             /*NO PROBLEMS WITH ENQ        */
@RF00854 DS    0H                                               03S0879
*  END;                                                         03S0879
*        RFY(REG0,REG1) RSTD;                                   02S0880
@RC00721 DS    0H                                               02S0881
*        REG0 = ENQSPACE;              /*SET SIZE OF VOLUME ENQ LIST */
         L     REG0,ENQSPACE                                    02S0881
*        REG0 = REG0 × SUBPL230;       /*FREE FROM SUBPOOL 230.      */
         O     REG0,@CF03297                                    02S0882
*        REG1 = VENQADDR;              /*SET PTR TO VOLUME ENQ LIST  */
         L     REG1,VENQADDR                                    02S0883
*        GEN(FREEMAIN R,LV=(0),A=(1)); /*FREE VOLUME ENQ LIST        */
         FREEMAIN R,LV=(0),A=(1)
*        RFY(REG0,REG1) UNRSTD;                                 02S0885
*      END;                                                     02S0886
*    ELSE                              /*ERROR DURING GETMAIN        */
*      DO;                                                      02S0887
         B     @RC00672                                         02S0887
@RF00672 DS    0H                                               02S0888
*        FAILRSC = GETERRCD;           /*SET GETMAIN ERROR REASON CD */
         L     @08,@PC00001+16                                  02S0888
         MVC   FAILRSC(2,@08),@CH00065                          02S0888
*      END;                            /*NO ENQS NEEDED              */
*  END;                                                         02S0890
*ELSE;                                 /*NO VOL ENQS NEEDED          */
@RF00643 DS    0H                                               02S0892
*                    IF RTNCODE = SUCCESS THEN /*ANY ERRORS          */
@RC00643 L     @08,RTNCODE                                      01S0892
         LTR   @08,@08                                          01S0892
         BNZ   @RF00892                                         01S0892
*                      DO;             /*NO,CONTINUE ALLOC PROCESSING*/
*                        CALL IEFAB471(ALCWAPTR); /*ALLOC BY DEV TYPE*/
         LA    @08,ALCWAPTR                                     01S0894
         ST    @08,@AL00001                                     01S0894
         L     @15,@CV00144                                     01S0894
         LA    @01,@AL00001                                     01S0894
         BALR  @14,@15                                          01S0894
*                        RTNCODE = REG15;  /*SAVE RETURN CODE        */
         ST    REG15,RTNCODE                                    01S0895
*                        IF (TOTREQS^=ZERO                      01S0896
*                           × NEEDRCVY=ON) & RTNCODE = SUCCESS  01S0896
*                          & INDRETRY = OFF THEN /*ANY OTHER REQS AND
*                                        NO ERRORS                   */
         L     @08,ALCWAPTR                                     01S0896
         L     @05,TOTREQS(,@08)                                01S0896
         LTR   @05,@05                                          01S0896
         BNZ   @GL00028                                         01S0896
         TM    NEEDRCVY(@08),B'00010000'                        01S0896
         BNO   @RF00896                                         01S0896
@GL00028 L     @08,RTNCODE                                      01S0896
         LTR   @08,@08                                          01S0896
         BNZ   @RF00896                                         01S0896
         L     @08,ALCWAPTR                                     01S0896
         TM    INDRETRY(@08),B'01000000'                        01S0896
         BNZ   @RF00896                                         01S0896
*                          DO;         /*YES,TRY LAST CHANCE TO ALLOC*/
*                            CALL IEFAB485(ALCWAPTR); /*LAST CHANCE
*                                                       ALLOCATION   */
         LA    @08,ALCWAPTR                                     01S0898
         ST    @08,@AL00001                                     01S0898
         L     @15,@CV00145                                     01S0898
         LA    @01,@AL00001                                     01S0898
         BALR  @14,@15                                          01S0898
*                            RTNCODE = REG15; /*SAVE RETURN CODE     */
         ST    REG15,RTNCODE                                    01S0899
*                            IF RTNCODE = SUCCESS  /*WAIT HOLDING
*                                                    RESOURCES       */
*                              & INDWAIT = ON THEN              01S0900
         L     @08,RTNCODE                                      01S0900
         LTR   @08,@08                                          01S0900
         BNZ   @RF00900                                         01S0900
         L     @08,ALCWAPTR                                     01S0900
         TM    INDWAIT(@08),B'10000000'                         01S0900
         BNO   @RF00900                                         01S0900
*                              DO;     /*YES, WAIT                   */
*                                CALL IEFAB491(ALCWAPTR);       01S0902
         LA    @08,ALCWAPTR                                     01S0902
         ST    @08,@AL00001                                     01S0902
         L     @15,@CV00148                                     01S0902
         LA    @01,@AL00001                                     01S0902
         BALR  @14,@15                                          01S0902
*                                RTNCODE = REG15;  /*SAVE RETURN CODE*/
         ST    REG15,RTNCODE                                    01S0903
*                              END;                             01S0904
*                            ELSE;     /*DON'T WAIT HOLDING RESOURCES*/
@RF00900 DS    0H                                               01S0906
*                          END;                                 01S0906
*                        ELSE;         /*ERRORS AND/OR NO OTHER REQS */
@RF00896 DS    0H                                               01S0908
*                      END;                                     01S0908
*                    ELSE;             /*ERROR FOUND                 */
@RF00892 DS    0H                                               01S0910
*                  END;                                         01S0910
*                ELSE;                 /*ERRORS AND/OR NO OTHER REQS */
@RF00616 DS    0H                                               01S0912
*                GEN REFS(ENQLIST1,REG1);/*DEQ FROM ALLOC RESOURCE   */
                DEQ MF=(E,ENQLIST1),RET=NONE                  @Z40FPPD
*                ENQQ4 = OFF;          /*SET ESTAE INDICATOR         */
*                DDRQ = OFF;           /*SET ESTAE INDICATOR         */
*                CHNGQ = OFF;          /*SET ESTAE INDICATOR         */
         NI    ENQQ4(EXITP),B'00011111'                         01S0915
*              END;                                             01S0916
*            ELSE;                     /*ERROR FOUND                 */
@RF00571 DS    0H                                               01S0918
*          END;                                                 01S0918
*        ELSE;                         /*ERRORS AND/OR NO OTHER REQS */
@RF00567 DS    0H                                               01S0920
*        CALL IEFAB490(ALCWAPTR,RTNCODE,STEPNUM); /*CLEANUP  @Y30QPPA*/
         LA    @05,ALCWAPTR                                     01S0920
         ST    @05,@AL00001                                     01S0920
         LA    @05,RTNCODE                                      01S0920
         ST    @05,@AL00001+4                                   01S0920
         L     @05,@PC00001+32                                  01S0920
         ST    @05,@AL00001+8                                   01S0920
         L     @15,@CV00146                                     01S0920
         LA    @01,@AL00001                                     01S0920
         BALR  @14,@15                                          01S0920
*        RTNCODE = MAX(RTNCODE,REG15); /*SAVE WORST RETURN CODE      */
         L     @14,RTNCODE                                      01S0921
         CR    @14,REG15                                        01S0921
         BNL   *+6
         LR    @14,REG15                                        01S0921
         ST    @14,RTNCODE                                      01S0921
*        IF RTNCODE ^= SUCCESS THEN    /*ERROR ?                     */
         LTR   @14,@14                                          01S0922
         BZ    @RF00922                                         01S0922
*          DO;                         /*YES, CHANGE RETURN CODE     */
*            IF JSCDSABQ->QDBNELMS>INALOC THEN                  01S0924
         L     @05,@PC00001+8                                   01S0924
         L     @05,PPJSCBP(,@05)                                01S0924
         L     @05,JSCDSABQ(,@05)                               01S0924
         L     @05,QDBNELMS(,@05)                               01S0924
         C     @05,INALOC                                       01S0924
         BNH   @RF00924                                         01S0924
*              RTNCODE = EIGHT;        /*SET RETURN CODE TO 8        */
         MVC   RTNCODE(4),@CF00060                              01S0925
*            ELSE                                               01S0926
*              RTNCODE = FAILURE;      /*SET RETURN CODE TO 4        */
         B     @RC00924                                         01S0926
@RF00924 MVC   RTNCODE(4),@CF00099                              01S0926
*          END;                                                 01S0927
*        ELSE;                         /*DONT CHANGE RETURN CODE     */
@RF00922 DS    0H                                               01S0929
*      END;                                                     01S0929
*    ELSE;                             /*ERROR IN BUILDING WORKAREA  */
@RF00460 DS    0H                                               01S0931
*     DO; /*MODESET  KEYADDR(ZERO)*/                            01S0931
@RC00460 DS    0H                                               01S0932
*       SPKA (ZERO); /*SET PSW KEY*/                            01S0932
         SLR   @05,@05                                          01S0932
         SPKA  0(@05)                                           01S0932
*     END; /*MODESET  KEYADDR(ZERO)*/           /*KEY TO UPDATE JSCB  @
*40FPPG*/                                                       01S0933
*    IF ISSUESTA = ON THEN             /*WAS ESTAE ISSUED    @Z40FPPG*/
         TM    ISSUESTA,B'10000000'                             01S0934
         BNO   @RF00934                                         01S0934
*      JSCBASWA = ASWAOLDP;            /*ZERO OR OLD LAST    @Z40FPPG*/
         L     @05,@PC00001+8                                   01S0935
         L     @05,PPJSCBP(,@05)                                01S0935
         L     @01,ASWAPTR                                      01S0935
         MVC   JSCBASWA(4,@05),ASWAOLDP(@01)                    01S0935
*    ELSE                              /*NO ESTAE ISSUED     @Z40FPPG*/
*      JSCBASWA = ASWACHNP;            /*PRECEEDING IS LAST  @Z40FPPG*/
         B     @RC00934                                         01S0936
@RF00934 L     @05,@PC00001+8                                   01S0936
         L     @05,PPJSCBP(,@05)                                01S0936
         L     @01,ASWAPTR                                      01S0936
         MVC   JSCBASWA(4,@05),ASWACHNP(@01)                    01S0936
*     DO; /*MODESET  EXTKEY(SCHED)*/                            01S0937
@RC00934 DS    0H                                               01S0938
*       SPKA (16); /*SET PSW KEY*/                              01S0938
         LA    @05,16                                           01S0938
         SPKA  0(@05)                                           01S0938
*     END; /*MODESET  EXTKEY(SCHED)*/           /*BACK TO SCHED KEY   @
*40FPPG*/                                                       01S0939
*    IF ISSUESTA = ON THEN             /*WAS ESTAE ISSUED    @Z40FPPG*/
         TM    ISSUESTA,B'10000000'                             01S0940
         BNO   @RF00940                                         01S0940
*      DO;                             /*YES, CANCEL IT      @Z40FPPG*/
*        GEN REFS(ESTAECOR);                                    01S0942
          ESTAE 0,MF=(E,ESTAECOR)
*      END;                            /*                    @Z40FPPG*/
*  END;                                                         01S0944
*ELSE                                  /*ESTAE NOT SET UP OK @Z40FPPG*/
*  DO;                                                          01S0945
         B     @RC00183                                         01S0945
@RF00183 DS    0H                                               01S0946
*    FAILRSC = RSN16;                  /*SET ESTAE ERROR REASON CODE */
         L     @05,@PC00001+16                                  01S0946
         MVC   FAILRSC(2,@05),@CH00059                          01S0946
*    RTNCODE = FAILURE;                /*SET RETURN CODE 4           */
         MVC   RTNCODE(4),@CF00099                              01S0947
*  END;                                                         01S0948
*RFY (REG1) RSTD;                                               01S0949
@RC00183 DS    0H                                               01S0950
*REG1 = PPJSCBP;                       /*PARM FOR WTP PUT ROUTINE    */
         L     @05,@PC00001+8                                   01S0950
         L     REG1,PPJSCBP(,@05)                               01S0950
*CALL IEEAB401;                        /*WTP PUT ROUTINE             */
         L     @15,@CV00133                                     01S0951
         BALR  @14,@15                                          01S0951
*RFY (REG1) UNRSTD;                                             01S0952
*RETURN CODE(RTNCODE);                 /*RETURN TO CALLER            */
         L     @05,RTNCODE                                      01S0953
         L     @13,4(,@13)                                      01S0953
         L     @00,@SIZDATD                                     01S0953
         LR    @01,@10                                          01S0953
         FSPACE   R,LV=(0),A=(1)
         LR    @15,@05                                          01S0953
         L     @14,12(,@13)                                     01S0953
         LM    @00,@12,20(@13)                                  01S0953
         BR    @14                                              01S0953
*SETUPWTO:PROC;                                                 02S0954
@EL00001 L     @13,4(,@13)                                      02S0954
@EF00001 L     @00,@SIZDATD                                     02S0954
         LR    @01,@10                                          02S0954
         FSPACE   R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                  02S0954
         BR    @14                                              02S0954
SETUPWTO STM   @14,@12,@SA00002                                 02S0954
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME = SWTOSPEC                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - SETUP OFFLINE MSG AND ROUTING CODE            */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THE PURPOSE OF THIS CODE SEGMENT IS TO PUT THE UNIT ADDRESS    */
*/*   IN THE MESSAGE TEXT (IEF281I DDD NOW OFFLINE  OR IEF282I DD    */
*/*   NOW UNLOADED),TO DETERMINE WHICH OPERATOR THE MESSAGE SHOULD   */
*/*   BE ROUTED TO,AND TO ISSUE THE MESSAGE TO THE OPERATOR.         */
*/*   THE ROUTING CODE IS DETERMINED BY THE DEVICE TYPE  OF THE      */
*/*   UNIT MADE OFFLINE, AS SHOWN BELOW:                             */
*/*      .IF TAPE DEVICE, ROUTING CODE IS 3                          */
*/*      .IF DIRECT ACCESS DEVICE, ROUTING CODE IS 4                 */
*/*      .IF UNIT RECORD DEVICE, ROUTING CODE IS 7                   */
*/*      .IF TP DEVICE, ROUTING CODE IS 8                            */
*/*      .IF OTHER DEVICE TYPE, DEFAULT ROUTING CODE OF 2 IS USED.   */
*/*                                                                  */
*/* ENTRY - SETUPWTO                                                 */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*   INPUT - UCBPTR IS A POINTER TO THE UCB ASSOCIATED WITH         */
*/*           A DEVICE JUST MADE OFFLINE OR UNLAODED.                */
*/*                                                                  */
*/* EXITS - RETURN TO CALLER                                         */
*/*                                                                  */
*/*   CONDITION - FUNCTION IS COMPLETED SUCCESSFULLY                 */
*/*                                                                  */
*/*   OUTPUT - WTOLIST (A COPY OF THE LIST FORM OF THE WTO           */
*/*            MACRO) IS FILLED IN WITH THE DEVICE ADDRESS           */
*/*            AND WITH THE CORRECT ROUTING CODE AND WTO ISSUED.     */
*/*                                                                  */
*/********************************************************************/
*OFFUNIT = UCBNAME;                    /*PUT DEVICE ADDRESS IN MSG   */
         MVC   OFFUNIT(3),UCBNAME(UCBPTR)                       02S0955
*IF UCB3TAPE = ON THEN                 /*IS THIS A TAPE DEVICE       */
         TM    UCB3TAPE(UCBPTR),B'10000000'                     02S0956
         BNO   @RF00956                                         02S0956
*  DO;                                 /*YES TAPE DEVICE             */
*    ROUTCDE = TAPEROUT;               /*SET TAPE ROUTING CODE       */
         MVC   ROUTCDE(2),@CB01659                              02S0958
*  END;                                                         02S0959
*ELSE                                  /*NOT TAPE DEVICE             */
*  DO;                                                          02S0960
         B     @RC00956                                         02S0960
@RF00956 DS    0H                                               02S0961
*    IF UCB3DACC = ON THEN             /*IS THIS A DA DEVICE         */
         TM    UCB3DACC(UCBPTR),B'00100000'                     02S0961
         BNO   @RF00961                                         02S0961
*      DO;                             /*YES DIRECT ACCESS DEVICE    */
*        ROUTCDE = DAROUT;             /*SET DA ROUTING CODE         */
         MVC   ROUTCDE(2),@CB01655                              02S0963
*      END;                                                     02S0964
*    ELSE                              /*NOT DIRECT ACCESS DEVICE    */
*      DO;                                                      02S0965
         B     @RC00961                                         02S0965
@RF00961 DS    0H                                               02S0966
*        IF UCB3UREC = ON THEN         /*IS THIS A UNIT RECORD DEVICE*/
         TM    UCB3UREC(UCBPTR),B'00001000'                     02S0966
         BNO   @RF00966                                         02S0966
*          DO;                         /*YES UNIT RECORD DEVICE      */
*            ROUTCDE = URECROUT;       /*SET UNIT RECORD ROUTING CODE*/
         MVC   ROUTCDE(2),@CB01663                              02S0968
*          END;                                                 02S0969
*        ELSE                          /*NOT UNIT RECORD DEVICE      */
*          DO;                                                  02S0970
         B     @RC00966                                         02S0970
@RF00966 DS    0H                                               02S0971
*            IF UCB3COMM = ON THEN     /*IS THIS A TP DEVICE         */
         TM    UCB3COMM(UCBPTR),B'01000000'                     02S0971
         BNO   @RF00971                                         02S0971
*              DO;                     /*YES TELEPROCESSING DEVICE   */
*                ROUTCDE = TPROUT;     /*SET TP ROUTING CODE         */
         MVC   ROUTCDE(2),@CB01661                              02S0973
*              END;                                             02S0974
*            ELSE                      /*NOT TP DEVICE               */
*              DO;                                              02S0975
         B     @RC00971                                         02S0975
@RF00971 DS    0H                                               02S0976
*                ROUTCDE = REGROUT;    /*SET DEFAULT ROUTING CODE    */
         MVC   ROUTCDE(2),@CB01657                              02S0976
*              END;                                             02S0977
*          END;                                                 02S0978
@RC00971 DS    0H                                               02S0979
*      END;                                                     02S0979
@RC00966 DS    0H                                               02S0980
*  END;                                                         02S0980
@RC00961 DS    0H                                               02S0981
*GEN REFS(WTOLIST,REG1);               /*ISSUE UNLOAD/OFFLINE MSG    */
@RC00956 DS    0H                                               02S0981
 WTO MF=(E,WTOLIST)
*END SETUPWTO;                                                  02S0982
@EL00002 DS    0H                                               02S0982
@EF00002 DS    0H                                               02S0982
@ER00002 LM    @14,@12,@SA00002                                 02S0982
         BR    @14                                              02S0982
*TESTENQ: PROC OPTIONS(NOSAVEAREA,NOSAVE);                      02S0983
TESTENQ  DS    0H                                               02S0984
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - TESTENQ                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - TEST IF EXCLUSIVE ENQ COMPLETED               */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS ROUTINE CHECKS TO SEE IF AN EXCLUSIVE ENQ HAS COMPLETED.  */
*/*   IF REG 15 INDICATES THAT THE ENQ HAS NOT YET COMPLETED, A ONE- */
*/*   SECOND WAIT IS SET. IF THE ENQ ECB HAS NOT BEEN POSTED AFTER   */
*/*   THE WAIT, THIS ROUTINE DEQS OFF THE RESOURCE.                  */
*/*                                                                  */
*/* ENTRY - CLOSED SUBROUTINE                                        */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*   INPUT -                                                        */
*/*     POINTER TO THE ENQ LIST TO BE USED IF A DEQ IS NECESSARY     */
*/*     REGISTER 15 - CONTAINS THE ENQ RETURN CODE                   */
*/*     ENQ ECB                                                      */
*/*                                                                  */
*/* EXIT-NORMAL - RETURNS TO CALLER                                  */
*/*   CONDITION - ENQ COMPLETED SUCCESSFULLY                         */
*/*   OUTPUT -                                                       */
*/*     ENQOKSW - SET TO 1 TO INDICATE ENQ COMPLETED                 */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/*   CONDITION - ENQ NOT COMPLETED                                  */
*/*   OUTPUT -                                                       */
*/*     ENQOKSW - SET TO 0 TO INDICATE ENQ NOT COMPLETED             */
*/*     MSSUMSW - SET TO 1 TO INDICATE TO TURN ON REPROCESS BIT      */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*RFY (REG14) RSTD;                                              02S0984
*ECBOFF = OFF;                         /*TURN ECB INDICATOR OFF FOR
*                                        DEQ                         */
         NI    ECBOFF(ENQCOREP),B'11111011'                     02S0985
*IF ENQRTNP ^= ZERO THEN               /*ENQ NOT COMPLETED           */
         LTR   ENQRTNP,ENQRTNP                                  02S0986
         BZ    @RF00986                                         02S0986
*  DO;                                 /*WAIT 1 SECOND               */
*    GEN REFS(TIMEWAIT);                                        02S0988
      STIMER WAIT,DINTVL=TIMEWAIT
*    IF ENQPOST = OFF THEN             /*ENQ STILL NOT COMPLETE      */
         TM    ENQPOST,B'01000000'                              02S0989
         BNZ   @RF00989                                         02S0989
*      DO;                                                      02S0990
*        ENQOKSW = OFF;              /*INDICATE ENQ NOT COMPLETE   */
         NI    ENQOKSW,B'01111111'                              02S0991
*        MSSUMSW = ON;                 /*INDICATE REPROCESS          */
         OI    MSSUMSW,B'10000000'                              02S0992
*        RFY (REG1) RSTD;                                       02S0993
*        REG1 = ENQCOREP;              /*PTR TO LIST FOR DEQ         */
         LR    REG1,ENQCOREP                                    02S0994
*        GEN ( DEQ MF=(E,(1)));                                 02S0995
          DEQ MF=(E,(1))
*        RFY (REG1) UNRSTD;                                     02S0996
*      END;                                                     02S0997
*    ELSE                              /*ENQ COMPLETED AFTER WAIT    */
*      ENQOKSW = ON;                   /*INDICATE ENQ COMPLETE       */
         B     @RC00989                                         02S0998
@RF00989 OI    ENQOKSW,B'10000000'                              02S0998
*  END;                                                         02S0999
*ELSE                                  /*ENQ COMPLETED               */
*  ENQOKSW = ON;                       /*INDICATE ENQ COMPLETED      */
         B     @RC00986                                         02S1000
@RF00986 OI    ENQOKSW,B'10000000'                              02S1000
*RFY (REG14) UNRSTD;                                            02S1001
*END TESTENQ;                                                   02S1002
@EL00003 DS    0H                                               02S1002
@EF00003 DS    0H                                               02S1002
@ER00003 BR    @14                                              02S1002
*                                                               01S1003
*                                                               01S1003
* DECLARE /*GENERAL PURPOSE REGISTERS */                        01S1003
*   GPR00F FIXED(31) REG(0),                                    01S1003
*   GPR01F FIXED(31) REG(1);                                    01S1003
*                                                               01S1003
* DECLARE /* COMMON VARIABLES */                                01S1004
*   I256C CHAR(256) BASED,                                      01S1004
*   I031F FIXED(31) BASED,                                      01S1004
*   I031P PTR(31)   BASED,                                      01S1004
*   I015F FIXED(15) BASED,                                      01S1004
*   I015P PTR(15)   BASED,                                      01S1004
*   I008P PTR(8)    BASED,                                      01S1004
*   I001C CHAR(1)   BASED;                                      01S1004
*END IEFAB421                          /*END COMMON-ALLOC-CONTROL    */
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (A421SPEC)                                        *
*/*%INCLUDE SYSLIB  (A421DATA)                                        *
*/*%INCLUDE SYSLIB  (IHAQDB  )                                        *
*/*%INCLUDE SYSLIB  (IKJTCB  )                                        *
*/*%INCLUDE SYSLIB  (IEFZB425)                                        *
*/*%INCLUDE SYSLIB  (IEFZB428)                                        *
*/*%INCLUDE SYSLIB  (IEFZB447)                                        *
*/*%INCLUDE SYSLIB  (IEFZB453)                                        *
*/*%INCLUDE SYSLIB  (INWKDATA)                                        *
*/*%INCLUDE SYSLIB  (IEFJSSIB)                                        *
*/*%INCLUDE SYSLIB  (IHAPSA  )                                        *
*/*%INCLUDE SYSLIB  (IHAASCB )                                        *
*/*%INCLUDE SYSLIB  (BDCTDATA)                                        *
*/*%INCLUDE SYSLIB  (IEFASIOT)                                        *
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                        *
*/*%INCLUDE SYSLIB  (OFFDATA )                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IEEBASEA)                                        *
*/*%INCLUDE SYSLIB  (IEESMCA )                                        *
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                        *
*/*%INCLUDE SYSLIB  (IEFZB431)                                        *
*/*%INCLUDE SYSLIB  (IHASUBIT)                                        *
*/*%INCLUDE SYSLIB  (PDMYDATA)                                        *
*/*%INCLUDE SYSLIB  (IEFZB430)                                        *
*/*%INCLUDE SYSLIB  (VENQDATA)                                        *
*/*%INCLUDE SYSLIB  (IEFZB423)                                        *
*/*%INCLUDE SYSLIB  (IEZJSCB )                                        *
*/*%INCLUDE SYSLIB  (IEFJESCT)                                        *
*/*%INCLUDE SYSLIB  (CTNQDATA)                                        *
*/*%INCLUDE SYSLIB  (VRTNDATA)                                        *
*/*%INCLUDE SYSLIB  (ESTAECOD)                                        *
*/*%INCLUDE SYSLIB  (ESTAESPC)                                        *
*/*%INCLUDE SYSLIB  (INITWORK)                                        *
*/*%INCLUDE SYSLIB  (INWKSPEC)                                        *
*/*%INCLUDE SYSLIB  (OFFLINES)                                        *
*/*%INCLUDE SYSLIB  (OFFSPEC )                                        *
*/*%INCLUDE SYSLIB  (PROCOFLN)                                        *
*/*%INCLUDE SYSLIB  (OFLNSPEC)                                        *
*/*%INCLUDE SYSLIB  (BLDCOUNT)                                        *
*/*%INCLUDE SYSLIB  (BLCTSPEC)                                        *
*/*%INCLUDE SYSLIB  (PROCSDMY)                                        *
*/*%INCLUDE SYSLIB  (DMYSPECS)                                        *
*/*%INCLUDE SYSLIB  (DOVOLENQ)                                        *
*/*%INCLUDE SYSLIB  (VENQSPEC)                                        *
*/*%INCLUDE SYSLIB  (CNTVENQS)                                        *
*/*%INCLUDE SYSLIB  (CTNQSPEC)                                        *
*/*%INCLUDE SYSLIB  (VENQRTN )                                        *
*/*%INCLUDE SYSLIB  (VRTNSPEC)                                        *
*/*%INCLUDE SYSLIB  (VOLWAITM)                                        *
*/*%INCLUDE SYSLIB  (VOLWAITS)                                        *
*/*%INCLUDE SYSLIB  (SETUPWTO)                                        *
*/*%INCLUDE SYSLIB  (SWTOSPEC)                                        *
*/*%INCLUDE SYSLIB  (TESTENQ )                                        *
*/*%INCLUDE SYSLIB  (TESTSPEC)                                        *
*;                                                              01S1005
@DATA    DS    0H
@CH00065 DC    H'2'
@CH00116 DC    H'5'
@CH00084 DC    H'7'
@CH00059 DC    H'16'
@SM03686 MVC   ESTAECOR(0),ESTAELST
@SM03692 MVC   ENQCORE3(0),ALOCENQ3
@SM03694 MVC   ENQCORE4(0),ALOCENQ4
@SM03710 MVC   0(0,@14),W690FLG2
         DS    0F
@AL00328 EQU   *                       LIST WITH   2 ARGUMENT(S)
@AL00386 DC    A(@CF00106)             LIST WITH   2 ARGUMENT(S)
         DC    A(@CF00106)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    10F
@SA00002 DS    15F
@AL00001 DS    3A
IEFAB421 CSECT
         DS    0F
@CF00106 DC    F'0'
@CF00076 DC    F'1'
@CH00076 EQU   @CF00076+2
@CF00099 DC    F'4'
@CF00060 DC    F'8'
@CF03232 DC    F'9'
@CF00043 DC    F'12'
@CH00043 EQU   @CF00043+2
@CF03661 DC    F'28'
@CF03561 DC    F'58'
@CF03663 DC    F'72'
@CF03297 DC    XL4'E6000000'
@CF03688 DC    XL4'0000FFFF'
@CF03689 DC    BL4'11111111111111111111111111111110'
@CF03699 DC    BL4'11111111111111111111111111001111'
@CF03702 DC    BL4'00000000000000000000000000000001'
@DATD    DSECT
         DS    0D
ALCWAPTR DS    A
ASWAPTR  DS    A
INALOC   DS    F
RTNCODE  DS    F
QDBPTR   DS    A
SSIBPTR  DS    A
ASCBPTR  DS    A
VMVREQBP DS    A
SAVERTNC DS    F
EREQPTR  DS    A
VENQADDR DS    A
ENQPRFX  DS    F
ENQECB   DS    FL4
         ORG   ENQECB
@NM00118 DS    BL1
ENQPOST  EQU   ENQECB+0
         ORG   ENQECB+4
ENQSPACE DS    F
STENQNO  DS    F
BUFFPTR  DS    A
NEWLENG  DS    F
TXTLENG  DS    F
MLWTOID  DS    FL4
         ORG   MLWTOID
WTOID    DS    CL4
         ORG   MLWTOID+4
GTSTRTCD DS    F
LUTENTNO DS    H
@TS00001 DS    CL3
ASIDT    DS    CL2
ASWACORE DS    CL40
         DS    CL1
ENQLIST  DS    CL12
ENQLIST1 DS    CL48
         ORG   ENQLIST1
ENQLST1  DS    CL12
ENQLST2  DS    CL12
         ORG   ENQLST2
ENQEND2  DS    BL1
         ORG   ENQLIST1+24
ENQLST3  DS    CL12
         ORG   ENQLST3
ENQEND3  DS    BL1
         ORG   ENQLIST1+36
ENQLST4  DS    CL12
         ORG   ENQLST4
ENQEND4  DS    BL1
         ORG   ENQLIST1+48
ESTAESWS DS    BL1
         ORG   ESTAESWS
ISSUESTA DS    BL1
@NM00001 EQU   ESTAESWS+0
         ORG   ESTAESWS+1
FLAG422  DS    BL1
         ORG   FLAG422
CALLAGIN DS    BL1
         ORG   FLAG422+1
AB4EDPMS DS    CL500
         DS    CL6
EXITPRMS DS    CL296
DSUBSYSN DS    CL4
DOOFLNSW DS    BL1
ENQOKSW  DS    BL1
MSSUMSW  DS    BL1
         DS    CL1
SMFPMLST DS    CL26
         ORG   SMFPMLST
@NM00056 DS    FL2
SMFREC   DS    CL24
         ORG   SMFREC
SMFHDR   DS    CL6
SMFTIME  DS    FL4
SMFDATE  DS    FL4
SMFCPUID DS    CL4
SMFINFO  DS    CL6
         ORG   SMFINFO
SMFLENGT DS    CL2
SMFDVCLS DS    CL1
SMFDVCOD DS    CL1
SMFCHAN  DS    CL2
         ORG   SMFCHAN
SMF11VDV DS    BL1
         ORG   SMFPMLST+26
WTOLIST  DS    CL32
         ORG   WTOLIST
@NM00057 DS    CL12
OFFUNIT  DS    CL3
@NM00058 DS    CL15
ROUTCDE  DS    CL2
         ORG   WTOLIST+32
         DS    CL2
DEQLIST  DS    CL24
VMVCORE  DS    CL52
EREQCORE DS    CL42
         DS    CL2
ENQLFORM DS    CL12
         ORG   ENQLFORM
@NM00119 DS    CL1
         ORG   @NM00119
@NM00120 DS    BL1
TCBPROV  EQU   @NM00119+0
         ORG   ENQLFORM+1
@NM00121 DS    CL1
@NM00122 DS    CL1
         ORG   @NM00122
@NM00123 DS    BL1
ENQWFLAG EQU   @NM00122+0
         ORG   ENQLFORM+3
@NM00124 DS    CL1
@NM00125 DS    AL4
@NM00126 DS    AL4
         ORG   ENQLFORM+12
LISTECB  DS    CL8
         ORG   LISTECB
ENQECBP  DS    AL4
WTORECBP DS    AL4
         ORG   WTORECBP
ENDLIST  DS    BL1
         ORG   LISTECB+8
ENDWAIT  DS    BL1
REPLYBUF DS    CL2
         DS    CL1
WTORECB  DS    CL4
         ORG   WTORECB
@NM00153 DS    BL1
WTORPOST EQU   WTORECB+0
         ORG   WTORECB+4
WTORLIST DS    CL88
         ORG   WTORLIST
@NM00154 DS    CL8
WTORLEN  DS    FL2
@NM00155 DS    CL2
MSGTEXT  DS    CL76
         ORG   MSGTEXT
TEXTBEGN DS    CL72
         ORG   TEXTBEGN
@NM00156 DS    CL8
WTORJOBN DS    CL8
@NM00157 DS    CL1
WTORSTPN DS    CL8
@NM00158 DS    CL47
         ORG   MSGTEXT+72
WTORFLGS DS    CL4
         ORG   WTORLIST+88
WTO690I  DS    CL70
         ORG   WTO690I
W690LEN  DS    FL2
W690FLG  DS    BL2
W690TXT  DS    CL58
         ORG   W690TXT
W690HDR  DS    CL41
W690JOB  DS    CL8
W690BLK  DS    CL1
W690STP  DS    CL8
         ORG   WTO690I+62
W690MLFL DS    CL8
         ORG   W690MLFL
W690FLG2 DS    BL4
         ORG   W690FLG2
W690DSC  DS    BL2
W690RTC  DS    BL2
         ORG   W690MLFL+4
W690CTL  DS    BL2
W690AID  DS    CL1
W690LNM  DS    FL1
         ORG   WTO690I+70
WTO690L2 DS    CL82
         ORG   WTO690L2
W690LEN2 DS    FL2
W690FL2  DS    BL2
W690TXT2 DS    CL70
         ORG   W690TXT2
W690HDR2 DS    CL7
W690VOLS DS    CL7
         ORG   W690VOLS+0
W690BNK  DS    CL1
W690VOL  DS    CL6
         ORG   WTO690L2+74
W690FL22 DS    BL4
         ORG   W690FL22
W690DSC2 DS    BL2
W690RTC2 DS    BL2
         ORG   WTO690L2+78
W690CTL2 DS    BL2
W690AID2 DS    CL1
W690LNM2 DS    FL1
         ORG   WTO690L2+82
WTO690ND DS    CL12
         ORG   WTO690ND
W690NLEN DS    FL2
W690NFLG DS    BL2
W690NFL2 DS    BL4
         ORG   W690NFL2
W690NDSC DS    BL2
W690NRTC DS    BL2
         ORG   WTO690ND+8
W690NCTL DS    BL2
W690NAID DS    CL1
W690NLNM DS    FL1
         ORG   WTO690ND+12
ENQLIST2 DS    CL12
ENQWAIT  DS    BL1
IEFAB421 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CV00133 DC    V(IEEAB401)
@CV00135 DC    V(IEFAB4ED)
@CV00136 DC    V(IEFAB4E8)
@CV00137 DC    V(IEFAB422)
@CV00138 DC    V(IEFAB423)
@CV00139 DC    V(IEFAB425)
@CV00140 DC    V(IEFAB427)
@CV00141 DC    V(IEFAB428)
@CV00142 DC    V(IEFAB430)
@CV00143 DC    V(IEFAB431)
@CV00144 DC    V(IEFAB471)
@CV00145 DC    V(IEFAB485)
@CV00146 DC    V(IEFAB490)
@CV00147 DC    V(IEFAB49C)
@CV00148 DC    V(IEFAB491)
@CA00726 DC    A(EDTTAB)
@CA01680 DC    A(OFFWTO)
@CA01681 DC    A(UNLDMSG)
@CV03528 DC    V(IEFAB4F3)
@CA03606 DC    A(IEF690I)
@CA03607 DC    A(IEF690L2)
@CA03608 DC    A(IEF690ND)
@CA03618 DC    A(VWAITLST)
@CV00134 DC    V(IEFAB4F1)
         DS    0D
GTSTZERO DC    F'0'
IOSLTEND DC    XL2'FFFF'
@CC00103 DC    C'IEFAB4E8'
@CC00100 DC    C'ASWA'
@CC03601 DC    C'  '
@CC03612 DC    C'NO'
@CB00119 DC    X'2009'
@CB01655 DC    X'1000'
@CB01657 DC    X'4000'
@CB01659 DC    X'2000'
@CB01661 DC    X'0100'
@CB01663 DC    X'0200'
SYSALLOC DC    CL2'Q4'
SYSQNAME DC    CL8'SYSIEFSD'
SYSRNAME DC    CL8'CHNGDEVS'
SYSRNME1 DC    CL7'DDRTPUR'
SYSRNME2 DC    CL5'DDRDA'
CLEAR    DC    X'000000000000'
HEADER   DC    X'00180000000B'
SMFLNG   DC    X'0006'
         DS    CL2
TIMEWAIT DS    CL8
         ORG   TIMEWAIT
@NM00059 DC    XL4'00000000'
@NM00060 DC    XL4'00010000'
         ORG   TIMEWAIT+8
CONDDEQ  DC    B'01000001'
MAJNAME  DC    CL8'SYSZVOLS'
         DS    CL3
NOWAITEL DS    CL12
         ORG   NOWAITEL
@NM00131 DC    AL1(0)
@NM00132 DC    AL1(6)
@NM00133 DC    B'11000011'
@NM00134 DC    AL1(0)
@NM00135 DC    AL4(MAJNAME)
@NM00136 DS    AL4
         ORG   NOWAITEL+12
FOLDMASK DC    X'4040'
IEFAB421 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
IEFAB421 CSECT
ALLOCENQ ENQ (SYSQNAME,SYSALLOC,S,2,SYSTEM,SYSQNAME,SYSRNAME,S,8,     **
               SYSTEM,SYSQNAME,SYSRNME1,S,7,SYSTEM,SYSQNAME,SYSRNME2, **
               S,5,SYSTEM),MF=L                               @Z40FPPD
ALENQ1 ENQ (,,S,,SYSTEM),MF=L                                 @Z40FPPD
IEFAB421 CSECT
ESTAELST ESTAE TERM=YES,RECORD=YES,MF=L
ESTAELNG DC A(*-ESTAELST)
@DATD    DSECT
ESTAECOR ESTAE TERM=YES,RECORD=YES,MF=L
IEFAB421 CSECT
ALLOCDEQ DEQ (SYSQNAME,SYSRNAME,8,SYSTEM,SYSQNAME,SYSALLOC,2,SYSTEM), **
               MF=L                                           @Z40FPPD
ALOCENQ2 ENQ (SYSQNAME,SYSRNAME,E,8,SYSTEM),MF=L
ALOCENQ3 ENQ (SYSQNAME,SYSALLOC,E,2,SYSTEM),ECB=0,MF=L
ENQLEN3 DC A(*-ALOCENQ3)
ALOCENQ4 ENQ (SYSQNAME,SYSRNAME,E,8,SYSTEM),ECB=0,MF=L
ENQLEN4 DC A(*-ALOCENQ4)
@DATD    DSECT
ENQCORE3 ENQ (SYSQNAME,SYSALLOC,E,2,SYSTEM),ECB=0,MF=L
ENQCORE4 ENQ (SYSQNAME,SYSRNAME,E,8,SYSTEM),ECB=0,MF=L
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFAB421 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
WAITCNT  EQU   @02
VENQCTR  EQU   @06
NUMLINES EQU   @04
MLFLGLN  EQU   @03
J        EQU   @03
I        EQU   @06
DOMID    EQU   @05
ENQPTR   EQU   @04
VUCTR    EQU   @06
RESCANP  EQU   @04
VOLUNNO  EQU   @05
NOENQCTR EQU   @03
VUPTR    EQU   @02
VENQLSTP EQU   @05
ENQRTNP  EQU   @05
ENQADDR  EQU   @08
UCBPTR   EQU   @08
ENQCOREP EQU   @06
SIOTPTR  EQU   @02
JFCBPTR  EQU   @03
GETSIZE  EQU   @03
EXITP    EQU   @09
REG1     EQU   @01
REG2     EQU   @02
REG3     EQU   @03
REG4     EQU   @04
REG5     EQU   @05
REG14    EQU   @14
REG15    EQU   @15
REG0     EQU   @00
GTSTR0   EQU   @00
GTSTR1   EQU   @01
GTSTR2   EQU   @02
GTSTR15  EQU   @15
GTSTR4   EQU   @04
GTSTR5   EQU   @05
GTSTR6   EQU   @06
GTSTR7   EQU   @07
GTSTR8   EQU   @08
GPR00F   EQU   @00
GPR01F   EQU   @01
GTSTR3   EQU   @03
         EXTRN EDTTAB
         EXTRN OFFWTO
         EXTRN UNLDMSG
         EXTRN IEF690I
         EXTRN IEF690L2
         EXTRN IEF690ND
         EXTRN VWAITLST
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
CVTPTR   EQU   16
ASWA     EQU   0
ASWAID   EQU   ASWA
ASWACSCT EQU   ASWA+4
ASWARTNP EQU   ASWA+12
ASWAPRMS EQU   ASWA+16
ASWASCBP EQU   ASWA+20
ASWAOLDP EQU   ASWA+24
ASWAFLGS EQU   ASWA+28
ASWADSWS EQU   ASWAFLGS
ASWACOMF EQU   ASWADSWS
ASWAAUTO EQU   ASWA+32
ASWACHNP EQU   ASWA+36
TOPTIOT  EQU   0
QDB      EQU   0
QDBNELMS EQU   QDB+8
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBSTABB EQU   TCBSTAB+1
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
ALCWA    EQU   0
WASIZE   EQU   ALCWA
FMAPPTR  EQU   ALCWA+4
SIOT1P   EQU   ALCWA+8
JSCBPTR  EQU   ALCWA+12
IOSLUTP  EQU   ALCWA+16
FAILRSCP EQU   ALCWA+20
EDTABPTR EQU   ALCWA+24
CNTABLE  EQU   ALCWA+28
DMYREQS  EQU   CNTABLE
VAMREQS  EQU   CNTABLE+4
TPREQS   EQU   CNTABLE+8
SPECREQS EQU   CNTABLE+12
PVTNREQS EQU   CNTABLE+16
PUBLREQS EQU   CNTABLE+20
STRGREQS EQU   CNTABLE+24
SUBSREQS EQU   CNTABLE+28
OTHEREQS EQU   CNTABLE+32
TOTREQS  EQU   CNTABLE+36
NUMREQS  EQU   CNTABLE+40
VOLUNPTR EQU   ALCWA+80
VOLUNSZE EQU   ALCWA+84
INDICATE EQU   ALCWA+112
INDWAIT  EQU   INDICATE
INDRETRY EQU   INDICATE
ALCWISAM EQU   INDICATE
@NM00007 EQU   ALCWA+113
NEEDRCVY EQU   @NM00007
DDRTPUR  EQU   @NM00007
DDRDA    EQU   @NM00007
ALCWASID EQU   ALCWA+114
TCBP     EQU   ALCWA+116
TIOTHDRP EQU   ALCWA+120
CANCELP  EQU   ALCWA+140
EXITPRMP EQU   ALCWA+144
ALCNUCBS EQU   ALCWA+148
SSERBLKP EQU   ALCWA+160
LOJSSNMP EQU   ALCWA+164
NAMES    EQU   0
ALCJOBN  EQU   NAMES
ALCSTEPN EQU   NAMES+8
FUNCMAP  EQU   0
VOLMNTSW EQU   FUNCMAP
WRTMSGSW EQU   FUNCMAP
UWAITSW  EQU   FUNCMAP
VWAITSW  EQU   FUNCMAP
MSSTRMSW EQU   FUNCMAP
OFFDEVSW EQU   FUNCMAP
CCLMNTSW EQU   FUNCMAP
GENLOKSW EQU   FUNCMAP
SSEMSGSW EQU   FUNCMAP+1
HDRMSGSW EQU   FUNCMAP+1
MTRJOBSW EQU   FUNCMAP+1
NOTIOTNQ EQU   FUNCMAP+1
TRKMSW   EQU   FUNCMAP+1
WAITOKSW EQU   FUNCMAP+1
ASNMSW   EQU   FUNCMAP+1
EXTRACAL EQU   FUNCMAP+1
PRMESTAE EQU   0
PRMRESC  EQU   PRMESTAE+252
ENQQ4    EQU   PRMRESC
DDRQ     EQU   PRMRESC
CHNGQ    EQU   PRMRESC
MLWTO    EQU   PRMRESC
PRMFUNC  EQU   PRMESTAE+253
PRMASID  EQU   PRMESTAE+254
PRMWTOID EQU   PRMESTAE+292
SSIB     EQU   0
SSIBFLG1 EQU   SSIB+6
SSIBSSNM EQU   SSIB+8
ASCB     EQU   0
ASCBASID EQU   ASCB+36
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
INDMSIOT EQU   0
SIOTDSKA EQU   INDMSIOT
SCTDDNAM EQU   INDMSIOT+4
SCTUSADD EQU   INDMSIOT+20
SCTPJFCB EQU   INDMSIOT+32
SIOTBYT1 EQU   INDMSIOT+43
SIOVAMDS EQU   SIOTBYT1
SIOTALCD EQU   SIOTBYT1
SIOTBYT3 EQU   INDMSIOT+46
SIOTTSTC EQU   INDMSIOT+47
SIOTTERM EQU   SIOTTSTC
SIOTQNAM EQU   SIOTTSTC
SIOTBYT0 EQU   INDMSIOT+52
SIOTSSDS EQU   SIOTBYT0
SCTSDISP EQU   INDMSIOT+55
SIOTPRIV EQU   SCTSDISP
SIOTPASS EQU   SCTSDISP
SIOTDLET EQU   SCTSDISP
SCTSBYT1 EQU   INDMSIOT+56
SCTDUMMY EQU   SCTSBYT1
SIOTJSCT EQU   SCTSBYT1
SCTSBYT2 EQU   INDMSIOT+57
SCTSBYT3 EQU   INDMSIOT+58
SCTSBYT4 EQU   INDMSIOT+59
SCTUTYPE EQU   INDMSIOT+60
SIOTDEVT EQU   SCTUTYPE
SIOUBYT3 EQU   SIOTDEVT+2
SIO3TAPE EQU   SIOUBYT3
SIO3COMM EQU   SIOUBYT3
SIO3DACC EQU   SIOUBYT3
SIO3UREC EQU   SIOUBYT3
SIOTBYT4 EQU   INDMSIOT+81
SIOTALTD EQU   INDMSIOT+92
SIOTBYT2 EQU   INDMSIOT+103
SIOTNPTR EQU   INDMSIOT+152
SJFCBPTR EQU   INDMSIOT+156
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCBLTYP EQU   INFMJFCB+66
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
ENQMAP   EQU   0
ECBBYTE  EQU   ENQMAP+2
ECBOFF   EQU   ECBBYTE
IOSLUT   EQU   0
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTMSER  EQU   CVTMAP+148
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTSMCA  EQU   CVTMAP+196
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTJESCT EQU   CVTMAP+296
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
BASE     EQU   0
@NM00063 EQU   BASE+13
BALGSTAT EQU   BASE+24
BALOG    EQU   BALGSTAT+4
BASFL    EQU   BASE+36
BARSW    EQU   BASFL
MSLOGST  EQU   BASE+46
BASPBYTE EQU   BASE+47
BAMONITR EQU   BASE+56
@NM00085 EQU   BASE+104
MSLGCLOZ EQU   BASE+108
MSCLOSSW EQU   MSLGCLOZ
MSLGWLOG EQU   BASE+112
MSWLOGSW EQU   MSLGWLOG
MSLGWTR  EQU   BASE+116
MSWTRSW  EQU   MSLGWTR
MSLGSTRT EQU   BASE+120
MSSTRTSW EQU   MSLGSTRT
MS1BASEX EQU   BASE+136
BASES01  EQU   0
MSNTAL   EQU   BASES01
MSSSB    EQU   BASES01+1
MSBTN    EQU   MSSSB
MSPFG    EQU   BASES01+2
MSECBFL  EQU   BASES01+3
MSSUM    EQU   MSECBFL
MSTUS    EQU   BASES01+4
MSSSA    EQU   MSTUS
MSINLSW  EQU   MSSSA
MSREOF   EQU   MSSSA
MSNWP    EQU   MSSSA
MSFHF    EQU   BASES01+5
SMCABASE EQU   0
SMCAOPT  EQU   SMCABASE
SMCAOPT1 EQU   SMCAOPT
SMCAMISC EQU   SMCABASE+1
SMCAUSER EQU   SMCAMISC
SMCAMAN  EQU   SMCAMISC
SMCABUF  EQU   SMCABASE+12
SMCAPSTA EQU   SMCABASE+30
SMCAPLBL EQU   SMCABASE+34
SMCASTA  EQU   SMCABASE+46
SMCAALBL EQU   SMCABASE+50
SMCAENTY EQU   SMCABASE+80
SMCAENDI EQU   SMCAENTY
SMCAFOPT EQU   SMCABASE+82
SMCASWA  EQU   SMCABASE+104
SMCAASCB EQU   SMCABASE+120
SMCAPGIN EQU   SMCABASE+136
SMCAPGOT EQU   SMCABASE+140
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBONLI  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBDADI  EQU   UCBSTAT
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBNAME  EQU   UCBOB+13
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCBRVDEV EQU   UCBRWTAU
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCB3TAPE EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00106 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBERLOG EQU   UCBFLP1
UCBMIHTI EQU   UCBCMEXT+16
@NM00107 EQU   UCBMIHTI
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
VMVRQBLK EQU   0
VMVFNMAP EQU   VMVRQBLK
VMVOPTB1 EQU   VMVFNMAP
VMVUNLOD EQU   VMVOPTB1
VMVUCB   EQU   VMVOPTB1
VMVOPTB2 EQU   VMVFNMAP+1
VMVOPTB3 EQU   VMVFNMAP+2
VMVUCBP  EQU   VMVRQBLK+9
VMVMINFO EQU   VMVRQBLK+40
VMVACTON EQU   VMVMINFO
VMVUSER  EQU   VMVRQBLK+48
SUBITS   EQU   0
SUBYTE1  EQU   SUBITS
SUBYTE2  EQU   SUBITS+1
SUBYTE3  EQU   SUBITS+2
SU18BIT  EQU   SUBYTE3
SUBYTE4  EQU   SUBITS+3
SU29BIT  EQU   SUBYTE4
SUBYTE5  EQU   SUBITS+4
SUBYTE6  EQU   SUBITS+5
SUBYTE7  EQU   SUBITS+6
SUBYTE8  EQU   SUBITS+7
SUBYTE9  EQU   SUBITS+8
SUBYTE10 EQU   SUBITS+9
SUBYTE11 EQU   SUBITS+10
SUBYTE12 EQU   SUBITS+11
SUBYTE13 EQU   SUBITS+12
ETIOTREQ EQU   0
EREQMAP  EQU   ETIOTREQ
EREQBLD  EQU   EREQMAP
EREQSTAT EQU   ETIOTREQ+2
EREQTERM EQU   EREQSTAT
EREQQNM  EQU   EREQSTAT
EREQPASS EQU   EREQSTAT
EREQJSCT EQU   EREQSTAT
EREQDDNM EQU   ETIOTREQ+4
EREQJSVA EQU   ETIOTREQ+12
EREQSSVA EQU   ETIOTREQ+16
EREQSIOT EQU   ETIOTREQ+20
EREQRPOS EQU   ETIOTREQ+28
EREQDEVS EQU   ETIOTREQ+30
EREQJSCB EQU   ETIOTREQ+36
EREQCODE EQU   ETIOTREQ+40
ENQCNTRL EQU   0
VENQLIST EQU   0
VENQLAST EQU   VENQLIST
DEQFLAGS EQU   VENQLIST+2
VENQSHSW EQU   DEQFLAGS
VENQSERP EQU   VENQLIST+8
VOLUNTAB EQU   0
VOLID    EQU   VOLUNTAB
VOLSTAT  EQU   VOLUNTAB+6
VOLSTATA EQU   VOLSTAT
VOLSPEC  EQU   VOLSTATA
VOLNSHR  EQU   VOLSTATA
VOLRESVE EQU   VOLSTATA
VOLSTATB EQU   VOLSTAT+1
VOLALOC  EQU   VOLSTATB
VOLSTATC EQU   VOLSTAT+2
VOLTAREQ EQU   VOLSTATC
VOLSTATD EQU   VOLSTAT+3
VUUCBP   EQU   VOLUNTAB+20
VUGRID   EQU   VOLUNTAB+24
VUPOOL   EQU   0
VUGRLST  EQU   0
VUGRLENT EQU   VUGRLST
VUGRLFLG EQU   VUGRLENT+4
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBTCBP EQU   JSCBSEC1+20
JSCBDCB  EQU   JSCBSEC1+36
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBEND1 EQU   IEZJSCB+260
JESCT    EQU   0
JESWAA   EQU   JESCT+8
JESSSREQ EQU   JESCT+20
JESALLOC EQU   JESCT+32
JESUNALC EQU   JESCT+36
JESCATL  EQU   JESCT+40
JESNUCBS EQU   JESCT+44
ENQRTNCB EQU   0
@NM00146 EQU   ENQRTNCB
SHRENQSW EQU   @NM00146
@NM00150 EQU   ENQRTNCB+2
ENQSHRSW EQU   @NM00150
ENQRC    EQU   ENQRTNCB+3
VOLSERP  EQU   ENQRTNCB+8
VOLSER   EQU   0
IEFAB4F5 EQU   0
IEFBB410 EQU   0
IEFW21SD EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
SSREQ    EQU   0
SWAMGR   EQU   0
UCBBGN   EQU   0
INFUNMAP EQU   0
SIOT1PTR EQU   0
PPJSCBP  EQU   0
LUTPTR   EQU   0
FAILRSC  EQU   0
TCBPTR   EQU   0
TIOTP    EQU   0
STOPECBP EQU   0
STEPNUM  EQU   0
SSEBLKP  EQU   0
PSARSVTE EQU   PSARSVT
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
JFCSPPRT EQU   JFCTRTCH
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCORGIS EQU   JFCDSRG1
JFCDSRG2 EQU   JFCDSORG+1
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBNVOL EQU   JFCUCSEG+9
JFCBVOLS EQU   JFCUCSEG+10
JFCBS001 EQU   JFCBVOLS
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
JFCBSPNM EQU   JFCBS001+45
JFCBFLG3 EQU   JFCBSPNM
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
CVTIHASU EQU   CVTS01+696
UCBOBS01 EQU   UCBDEV
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00105 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBFBYT EQU   JSCBSEC3+10
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCBSSIB EQU   JSCBSEC3+56
JSCDSABQ EQU   JSCBSEC3+60
JSCSCT   EQU   JSCBSEC3+68
JSCBASWA EQU   JSCBSEC3+96
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCBUFPT EQU   JSCBSEC3+92
JSCBACT  EQU   JSCBSEC3+88
JSCBSWSP EQU   JSCBSEC3+87
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCTMCOR EQU   JSCBSEC3+72
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00144 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00143 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCBRV08 EQU   JSCBSEC3+11
JSCBRV07 EQU   JSCBFBYT
JSCBRV06 EQU   JSCBFBYT
JSCBRV05 EQU   JSCBFBYT
JSCBRV04 EQU   JSCBFBYT
JSCBRV03 EQU   JSCBFBYT
JSCBRV02 EQU   JSCBFBYT
JSCBADSP EQU   JSCBFBYT
JSCBRV01 EQU   JSCBFBYT
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00105
UCBSKPFG EQU   @NM00105
UCBRIPND EQU   @NM00105
UCBRTIAC EQU   @NM00105
UCBRSV79 EQU   @NM00105
UCBRSV78 EQU   @NM00105
UCBRSV77 EQU   @NM00105
UCBOLTEP EQU   @NM00105
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBDQDSP EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00104 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVOLI  EQU   UCBOBS01+4
UCBVTOC  EQU   UCBOBS01
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBRV08 EQU   JFCBSPNM+1
JFCBRV07 EQU   JFCBFLG3
JFCBRV06 EQU   JFCBFLG3
JFCBRV05 EQU   JFCBFLG3
JFCBRV04 EQU   JFCBFLG3
JFCBRV03 EQU   JFCBFLG3
JFCBRV02 EQU   JFCBFLG3
JFCBEXP  EQU   JFCBFLG3
JFCDQDSP EQU   JFCBFLG3
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCVRDS  EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCRSV42 EQU   JFCFLGS1
JFCBADSP EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBMSGP EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXAD EQU   JFCBS001+31
JFCBEXTL EQU   JFCBS001+30
JFCMSVGP EQU   JFCBS001+22
@NM00053 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCBEXTP EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCBAXBF EQU   JFCBUFSI
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00052 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCORGAM EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00051 EQU   JFCLIMCT
JFCDEN   EQU   JFCSPPRT+1
JFCPRTSP EQU   JFCSPPRT
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
@NM00152 EQU   ENQRTNCB+4
@NM00151 EQU   @NM00150
@NM00149 EQU   ENQRTNCB+1
@NM00148 EQU   @NM00146
@NM00147 EQU   @NM00146
JESSASTA EQU   JESCT+48
JESPJESN EQU   JESCT+28
JESSSCT  EQU   JESCT+24
JESRESQM EQU   JESCT+16
JESQMGR  EQU   JESCT+12
JESUNITS EQU   JESCT+4
@NM00145 EQU   JESCT
JSCBCSCB EQU   JSCBSEC1+68
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00142 EQU   JSCBSEC1+60
JSCBQMPI EQU   JSCBSEC1+56
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBPASS EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBSTEP EQU   JSCBSEC1+40
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCBSHR  EQU   JSCBSEC1+8
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00141 EQU   IEZJSCB
@NM00140 EQU   VUGRLENT+5
@NM00139 EQU   VUGRLFLG
VUGRALCD EQU   VUGRLFLG
VUGRLIDS EQU   VUGRLENT
VUCBS    EQU   VUPOOL+4
VUPOOL#  EQU   VUPOOL
VOLSIOTP EQU   VOLUNTAB+16
VOLALGTP EQU   VOLUNTAB+12
VOLUNTID EQU   VOLUNTAB+10
VURCVYPR EQU   VOLSTATD
VUVLUNIQ EQU   VOLSTATD
VUDMUNIQ EQU   VOLSTATD
VUUNALSW EQU   VOLSTATD
VUDMNDAL EQU   VOLSTATD
VUDMNDOF EQU   VOLSTATD
VUREALOC EQU   VOLSTATD
VUMUGDON EQU   VOLSTATD
@NM00138 EQU   VOLSTATC
@NM00137 EQU   VOLSTATC
VURECVRY EQU   VOLSTATC
VOLURREQ EQU   VOLSTATC
VOLGRREQ EQU   VOLSTATC
VOLDAREQ EQU   VOLSTATC
VOLCOREQ EQU   VOLSTATC
VUAFFWRK EQU   VOLSTATB
VUVINELG EQU   VOLSTATB
VUDADSME EQU   VOLSTATB
VUDNALOC EQU   VOLSTATB
VUPROCED EQU   VOLSTATB
VDEVREQD EQU   VOLSTATB
VOLMNTD  EQU   VOLSTATB
VOLDEFER EQU   VOLSTATA
VUDADSM  EQU   VOLSTATA
VOLSTG   EQU   VOLSTATA
VOLPRV   EQU   VOLSTATA
VOLPUB   EQU   VOLSTATA
@NM00130 EQU   VENQLIST+4
@NM00129 EQU   VENQLIST+3
@NM00128 EQU   DEQFLAGS
@NM00127 EQU   VENQLIST+1
EREQGRID EQU   ETIOTREQ+32
EREQUCB  EQU   ETIOTREQ+24
@NM00117 EQU   ETIOTREQ+19
@NM00116 EQU   ETIOTREQ+15
@NM00115 EQU   EREQSTAT
EREQCATL EQU   EREQSTAT
EREQUNAL EQU   EREQSTAT
EREQVAM  EQU   EREQSTAT
@NM00114 EQU   EREQMAP
EREQMOVE EQU   EREQMAP
EREQUPD  EQU   EREQMAP
SURV104  EQU   SUBITS+13
SURV103  EQU   SUBYTE13
SURV102  EQU   SUBYTE13
SURV101  EQU   SUBYTE13
SU100BT  EQU   SUBYTE13
SU99BIT  EQU   SUBYTE13
SU98BIT  EQU   SUBYTE13
SU97BIT  EQU   SUBYTE13
SU96BIT  EQU   SUBYTE13
SU95BIT  EQU   SUBYTE12
SU94BIT  EQU   SUBYTE12
SU93BIT  EQU   SUBYTE12
SU92BIT  EQU   SUBYTE12
SU91BIT  EQU   SUBYTE12
SU90BIT  EQU   SUBYTE12
SU89BIT  EQU   SUBYTE12
SU88BIT  EQU   SUBYTE12
SU87BIT  EQU   SUBYTE11
SU86BIT  EQU   SUBYTE11
SU85BIT  EQU   SUBYTE11
SU84BIT  EQU   SUBYTE11
SU83BIT  EQU   SUBYTE11
SU82BIT  EQU   SUBYTE11
SU81BIT  EQU   SUBYTE11
SU80BIT  EQU   SUBYTE11
SU79BIT  EQU   SUBYTE10
SU78BIT  EQU   SUBYTE10
SU77BIT  EQU   SUBYTE10
SU76BIT  EQU   SUBYTE10
SU75BIT  EQU   SUBYTE10
SU74BIT  EQU   SUBYTE10
SU73BIT  EQU   SUBYTE10
SU72BIT  EQU   SUBYTE10
SU71BIT  EQU   SUBYTE9
SU70BIT  EQU   SUBYTE9
SU69BIT  EQU   SUBYTE9
SU68BIT  EQU   SUBYTE9
SU67BIT  EQU   SUBYTE9
SU66BIT  EQU   SUBYTE9
SU65BIT  EQU   SUBYTE9
SU64BIT  EQU   SUBYTE9
SU63BIT  EQU   SUBYTE8
SU62BIT  EQU   SUBYTE8
SU61BIT  EQU   SUBYTE8
SU60BIT  EQU   SUBYTE8
SU59BIT  EQU   SUBYTE8
SU58BIT  EQU   SUBYTE8
SU57BIT  EQU   SUBYTE8
SU56BIT  EQU   SUBYTE8
SU55BIT  EQU   SUBYTE7
SU54BIT  EQU   SUBYTE7
SU53BIT  EQU   SUBYTE7
SU52BIT  EQU   SUBYTE7
SU51BIT  EQU   SUBYTE7
SU50BIT  EQU   SUBYTE7
SU49BIT  EQU   SUBYTE7
SU48BIT  EQU   SUBYTE7
SU47BIT  EQU   SUBYTE6
SU46BIT  EQU   SUBYTE6
SU45BIT  EQU   SUBYTE6
SU44BIT  EQU   SUBYTE6
SU43BIT  EQU   SUBYTE6
SU42BIT  EQU   SUBYTE6
SU41BIT  EQU   SUBYTE6
SU40BIT  EQU   SUBYTE6
SU39BIT  EQU   SUBYTE5
SU38BIT  EQU   SUBYTE5
SU37BIT  EQU   SUBYTE5
SU36BIT  EQU   SUBYTE5
SU35BIT  EQU   SUBYTE5
SU34BIT  EQU   SUBYTE5
SU33BIT  EQU   SUBYTE5
SU32BIT  EQU   SUBYTE5
SU31BIT  EQU   SUBYTE4
SU30BIT  EQU   SUBYTE4
SU28BIT  EQU   SUBYTE4
SU27BIT  EQU   SUBYTE4
SU26BIT  EQU   SUBYTE4
SU25BIT  EQU   SUBYTE4
SU24BIT  EQU   SUBYTE4
SU23BIT  EQU   SUBYTE3
SU22BIT  EQU   SUBYTE3
SU21BIT  EQU   SUBYTE3
SU20BIT  EQU   SUBYTE3
SU19BIT  EQU   SUBYTE3
SU17BIT  EQU   SUBYTE3
SU16BIT  EQU   SUBYTE3
SU15BIT  EQU   SUBYTE2
SU14BIT  EQU   SUBYTE2
SU13BIT  EQU   SUBYTE2
SU12BIT  EQU   SUBYTE2
SU11BIT  EQU   SUBYTE2
SU10BIT  EQU   SUBYTE2
SU9BIT   EQU   SUBYTE2
SU8BIT   EQU   SUBYTE2
SU7BIT   EQU   SUBYTE1
SU6BIT   EQU   SUBYTE1
SU5BIT   EQU   SUBYTE1
SU4BIT   EQU   SUBYTE1
SU3BIT   EQU   SUBYTE1
SU2BIT   EQU   SUBYTE1
SU1BIT   EQU   SUBYTE1
SU0BIT   EQU   SUBYTE1
@NM00113 EQU   VMVUSER
VMVPROCD EQU   VMVUSER
VMVVUNTP EQU   VMVRQBLK+44
@NM00112 EQU   VMVMINFO+1
@NM00111 EQU   VMVACTON
VMVRTAIN EQU   VMVACTON
VMVDSMT  EQU   VMVACTON
VMVKEEP  EQU   VMVACTON
VMVRETCD EQU   VMVRQBLK+36
VMVJSNMP EQU   VMVRQBLK+32
VMVDSNMP EQU   VMVRQBLK+28
VMVJBNMP EQU   VMVRQBLK+24
VMVMVLSR EQU   VMVRQBLK+18
VMVUVLSR EQU   VMVRQBLK+12
@NM00110 EQU   VMVRQBLK+8
VMVNREQP EQU   VMVRQBLK+4
VMVOPTB4 EQU   VMVFNMAP+3
@NM00109 EQU   VMVOPTB3
VMVNUMSG EQU   VMVOPTB3
VMVCUVOL EQU   VMVOPTB3
VMVDUPVL EQU   VMVOPTB3
VMVNSPVT EQU   VMVOPTB2
VMVNSLTP EQU   VMVOPTB2
VMVSLTAP EQU   VMVOPTB2
VMVNLTAP EQU   VMVOPTB2
VMVALTAP EQU   VMVOPTB2
VMVSTRG  EQU   VMVOPTB2
VMVPUBLC EQU   VMVOPTB2
VMVPRIVT EQU   VMVOPTB2
VMVVDEND EQU   VMVOPTB1
VMVVRLBL EQU   VMVOPTB1
VMVDWTOR EQU   VMVOPTB1
VMVMTMSG EQU   VMVOPTB1
VMVMOUNT EQU   VMVOPTB1
VMVREWND EQU   VMVOPTB1
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBFCBPE EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
@NM00108 EQU   @NM00107
UCBMIHSF EQU   @NM00107
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBMIHPB EQU   UCBFLP1
UCBMIHTB EQU   UCBFLP1
UCBSWAPF EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00106
UCBHALI  EQU   @NM00106
UCBRSV09 EQU   @NM00106
UCBRSV08 EQU   @NM00106
UCBRSV07 EQU   @NM00106
UCBRSV06 EQU   @NM00106
UCBRSV05 EQU   @NM00106
UCBRSV04 EQU   @NM00106
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBPRES  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00103 EQU   UCB
SMCASTCB EQU   SMCABASE+176
SMCAWTCB EQU   SMCABASE+172
SMCAU83  EQU   SMCABASE+168
SMCAPGM  EQU   SMCABASE+164
SMCARGNM EQU   SMCABASE+160
SMCASPOT EQU   SMCABASE+156
SMCASPIN EQU   SMCABASE+152
SMCARGNS EQU   SMCABASE+148
SMCAPGRL EQU   SMCABASE+144
SMCADOMY EQU   SMCAPGOT
SMCADOMX EQU   SMCAPGIN
SMCATEXP EQU   SMCABASE+132
SMCASAVE EQU   SMCABASE+128
SMCARS21 EQU   SMCABASE+124
SMCATJID EQU   SMCAASCB+2
SMCAPOST EQU   SMCAASCB
SMCADSCT EQU   SMCABASE+116
SMCADSTM EQU   SMCABASE+108
SMCASWD  EQU   SMCABASE+107
SMCASWC  EQU   SMCABASE+106
SMCASWB  EQU   SMCABASE+105
SMCADSSW EQU   SMCASWA
SMCADSSP EQU   SMCASWA
SMCAZEOD EQU   SMCASWA
SMCANAVL EQU   SMCASWA
SMCANADA EQU   SMCASWA
SMCAOPFL EQU   SMCASWA
SMCADSTR EQU   SMCASWA
SMCASWAR EQU   SMCASWA
SMCAXNAM EQU   SMCABASE+96
@NM00102 EQU   SMCABASE+92
SMCAXCTL EQU   SMCABASE+88
SMCAWRTP EQU   SMCABASE+84
SMCAENAL EQU   SMCABASE+83
SMCAFGN  EQU   SMCAFOPT
SMCAFTDS EQU   SMCAFOPT
SMCAFR01 EQU   SMCAFOPT
SMCAFVOL EQU   SMCAFOPT
SMCAFDSA EQU   SMCAFOPT
SMCAFEXT EQU   SMCAFOPT
SMCAFOP2 EQU   SMCAFOPT
SMCAFOP1 EQU   SMCAFOPT
SMCAENOP EQU   SMCAENTY+1
SMCADSNF EQU   SMCAENDI
SMCARS20 EQU   SMCAENDI
SMCARS19 EQU   SMCAENDI
SMCARS18 EQU   SMCAENDI
SMCARS17 EQU   SMCAENDI
SMCARS16 EQU   SMCAENDI
SMCARS15 EQU   SMCAENDI
SMCARS14 EQU   SMCAENDI
SMCAWAIT EQU   SMCABASE+72
SMCASGFT EQU   SMCABASE+68
SMCASGWR EQU   SMCABASE+64
SMCABECB EQU   SMCABASE+60
SMCAWECB EQU   SMCABASE+56
SMCAADCB EQU   SMCABASE+52
SMCAYORX EQU   SMCABASE+51
SMCAANL  EQU   SMCAALBL
SMCAASL  EQU   SMCAALBL
SMCAANSL EQU   SMCAALBL
SMCARS13 EQU   SMCAALBL
SMCARS12 EQU   SMCAALBL
SMCARS11 EQU   SMCAALBL
SMCARS10 EQU   SMCAALBL
SMCARS09 EQU   SMCAALBL
SMCAADAR EQU   SMCABASE+47
SMCAAVOL EQU   SMCASTA
SMCAAUNT EQU   SMCASTA
SMCARS08 EQU   SMCASTA
SMCAAMOD EQU   SMCASTA
SMCAAMTY EQU   SMCASTA
SMCAADA  EQU   SMCASTA
SMCAATAP EQU   SMCASTA
SMCAANAV EQU   SMCASTA
SMCAADEV EQU   SMCABASE+40
SMCAPDCB EQU   SMCABASE+36
SMCAXORY EQU   SMCABASE+35
SMCAPNL  EQU   SMCAPLBL
SMCAPSL  EQU   SMCAPLBL
SMCAPNSL EQU   SMCAPLBL
SMCARS07 EQU   SMCAPLBL
SMCARS06 EQU   SMCAPLBL
SMCARS05 EQU   SMCAPLBL
SMCARS04 EQU   SMCAPLBL
SMCARS03 EQU   SMCAPLBL
SMCAPDAR EQU   SMCABASE+31
SMCAPVOL EQU   SMCAPSTA
SMCAPUNT EQU   SMCAPSTA
SMCARS02 EQU   SMCAPSTA
SMCAMOD  EQU   SMCAPSTA
SMCAPMTY EQU   SMCAPSTA
SMCAPDA  EQU   SMCAPSTA
SMCAPTAP EQU   SMCAPSTA
SMCAPNAV EQU   SMCAPSTA
SMCAPDEV EQU   SMCABASE+24
SMCABUFP EQU   SMCABASE+20
SMCASID  EQU   SMCABASE+16
SMCABSIZ EQU   SMCABUF
SMCAJWT  EQU   SMCABASE+8
SMCATIOT EQU   SMCABASE+4
SMCATOFF EQU   SMCABASE+2
SMCADUMP EQU   SMCAMISC
SMCABSW  EQU   SMCAMISC
SMCADBSY EQU   SMCAMISC
SMCAPSDP EQU   SMCAMISC
SMCAFIRT EQU   SMCAMISC
SMCAOPI  EQU   SMCAMISC
SMCAFGND EQU   SMCAOPT
SMCATDS  EQU   SMCAOPT
SMCARS01 EQU   SMCAOPT
SMCAVOL  EQU   SMCAOPT
SMCADSA  EQU   SMCAOPT
SMCAEXT  EQU   SMCAOPT
SMCAOPT2 EQU   SMCAOPT
MSSPARE  EQU   BASES01+48
MSUCBAL  EQU   BASES01+44
MSUCBPR  EQU   BASES01+40
MSBOBECB EQU   BASES01+36
MSSJQ    EQU   BASES01+32
MSECB    EQU   BASES01+28
MSPBP    EQU   BASES01+24
MSERM    EQU   BASES01+22
MSPASS   EQU   BASES01+14
MSVRB    EQU   BASES01+6
MSQHR    EQU   MSFHF
@NM00101 EQU   MSFHF
MSPSDT   EQU   MSFHF
MSREPLYB EQU   MSFHF
MSFAX    EQU   MSFHF
MSTTT    EQU   MSFHF
MSCSD    EQU   MSFHF
MSNMF    EQU   MSFHF
MSJNF    EQU   MSSSA
MSYOUT   EQU   MSNWP
MSNRP    EQU   MSSSA
MSSRDR   EQU   MSREOF
MSWRLOG  EQU   MSSSA
MSNUPSW  EQU   MSSSA
MSWRPEN  EQU   MSSSA
MSSSSIPL EQU   MSINLSW
MSMCR    EQU   MSECBFL
MSYSOUT  EQU   MSECBFL
MSYSIN   EQU   MSECBFL
MSATTN   EQU   MSECBFL
MSWTL    EQU   MSECBFL
MSWTO    EQU   MSECBFL
MSEXT    EQU   MSECBFL
MSCCS    EQU   MSPFG
MSBSP    EQU   MSPFG
MSSYT    EQU   MSPFG
MSSYN    EQU   MSPFG
MSICR    EQU   MSPFG
MSCMC    EQU   MSPFG
MSPNB    EQU   MSPFG
MSDATE   EQU   MSPFG
@NM00100 EQU   MSBTN
MSTN     EQU   MSBTN
@NM00099 EQU   MSBTN
@NM00098 EQU   MSBTN
MSSO     EQU   MSBTN
MSROLFLG EQU   MSBTN
MSCANFLG EQU   MSBTN
MSCONFLG EQU   MSBTN
MSPNIP   EQU   MSNTAL
MSQNIP   EQU   MSNTAL
MSCURE34 EQU   MSNTAL
@NM00097 EQU   MSNTAL
@NM00096 EQU   MSNTAL
@NM00095 EQU   MSNTAL
@NM00094 EQU   MSNTAL
MSNIP    EQU   MSNTAL
@NM00093 EQU   MS1BASEX+40
@NM00092 EQU   MS1BASEX+20
@NM00091 EQU   MS1BASEX
@NM00090 EQU   BASE+128
MSLGJSCB EQU   BASE+124
@NM00089 EQU   MSSTRTSW
MSSTRTP  EQU   MSSTRTSW
MSSTRTW  EQU   MSSTRTSW
@NM00088 EQU   MSWTRSW
MSWTRP   EQU   MSWTRSW
MSWTRW   EQU   MSWTRSW
@NM00087 EQU   MSWLOGSW
MSWLOGP  EQU   MSWLOGSW
MSWLOGW  EQU   MSWLOGSW
@NM00086 EQU   MSCLOSSW
MSCLOSP  EQU   MSCLOSSW
MSCLOSW  EQU   MSCLOSSW
MSLOGLMT EQU   @NM00085+1
MSLOGCLS EQU   @NM00085
BAASCB   EQU   BASE+100
MSSMFPRM EQU   BASE+96
MSCOMMND EQU   BASE+92
BASP12   EQU   BASE+90
BASTCNT  EQU   BASE+88
BASESCT  EQU   BASE+86
BAJNCNT  EQU   BASE+84
BASUBECB EQU   BASE+80
BALOGCOM EQU   BASE+76
BADACNT  EQU   BASE+74
BATACNT  EQU   BASE+72
BAJBNR   EQU   BASE+64
BASP11   EQU   BASE+62
BALCCNT  EQU   BASE+61
BADUMPID EQU   BASE+60
BABCMAX  EQU   BASE+58
BAMONTR2 EQU   BASE+57
@NM00084 EQU   BAMONITR
BAMACTVE EQU   BAMONITR
@NM00083 EQU   BAMONITR
@NM00082 EQU   BAMONITR
@NM00081 EQU   BAMONITR
@NM00080 EQU   BAMONITR
BASPACE  EQU   BAMONITR
BADSN    EQU   BAMONITR
BADSO    EQU   BASE+52
BALOGECB EQU   BASE+48
@NM00079 EQU   BASPBYTE
@NM00078 EQU   BASPBYTE
@NM00077 EQU   BASPBYTE
@NM00076 EQU   BASPBYTE
@NM00075 EQU   BASPBYTE
BAMASCH  EQU   BASPBYTE
BATRACE  EQU   BASPBYTE
BAMSSTAR EQU   BASPBYTE
@NM00074 EQU   MSLOGST
@NM00073 EQU   MSLOGST
MSLOGSTA EQU   MSLOGST
MSLOGIPL EQU   MSLOGST
MSLOGDAR EQU   MSLOGST
MSLOGCOM EQU   MSLOGST
MSLOGTHD EQU   MSLOGST
MSLOGENQ EQU   MSLOGST
BAMIPAR2 EQU   BASE+44
BAMINPAR EQU   BASE+42
BAPKES   EQU   BASE+40
BAICTR   EQU   BASE+38
@NM00072 EQU   BASE+37
BADSET   EQU   BARSW
BANOSET  EQU   BARSW
BAMIDNT  EQU   BARSW
BAHR     EQU   BARSW
BAVU     EQU   BARSW
BAINTSET EQU   BARSW
MSTODWTO EQU   BARSW
BAIN     EQU   BARSW
BACV     EQU   BASE+32
@NM00071 EQU   BALOG
@NM00070 EQU   BALOG
@NM00069 EQU   BALOG
@NM00068 EQU   BALOG
@NM00067 EQU   BALOG
@NM00066 EQU   BALOG
@NM00065 EQU   BALOG
BALOGINT EQU   BALOG
MSLOGSVC EQU   BALGSTAT
BAPRC    EQU   BASE+20
BAQ      EQU   BASE+16
BAIPLCC  EQU   @NM00063+2
@NM00064 EQU   @NM00063
BAIPL    EQU   BASE+12
BALAD    EQU   BASE+8
BATRM    EQU   BASE+4
BACHN    EQU   BASE
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00062 EQU   CVTFIX+248
@NM00061 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00055 EQU   ECBBYTE
@NM00054 EQU   ENQMAP
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCTEMP  EQU   JFCBIND2
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSHARE EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCDISP  EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00050 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCSUL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCBADBF EQU   INFMJFCB+60
JFCAMSTR EQU   JFCBFRID+2
JFCAMCRO EQU   JFCBFRID
JFCBDSCB EQU   INFMJFCB+53
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCCAT   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
SIODDSNL EQU   INDMSIOT+173
SIOVDSNL EQU   INDMSIOT+172
SIOVDSNT EQU   INDMSIOT+170
SVOLUNNO EQU   INDMSIOT+168
SIOTVMVP EQU   INDMSIOT+164
SIOTJFX  EQU   INDMSIOT+160
SIOTETIO EQU   INDMSIOT+148
SIOTATE  EQU   INDMSIOT+144
SVOLUNAD EQU   INDMSIOT+140
SIOTEDLP EQU   INDMSIOT+136
SIOTEDLS EQU   INDMSIOT+132
SIOTRSNC EQU   INDMSIOT+130
SCTANAME EQU   INDMSIOT+122
SIOTSSIC EQU   INDMSIOT+120
@NM00049 EQU   INDMSIOT+108
SIOTSSNM EQU   INDMSIOT+104
@NM00048 EQU   SIOTBYT2
SIOTCVOL EQU   SIOTBYT2
SIOTCNEW EQU   SIOTBYT2
SIOTCALC EQU   SIOTBYT2
SIOTGALL EQU   SIOTBYT2
SIOTDSPD EQU   SIOTBYT2
SIOTDMND EQU   SIOTBYT2
SIOTOPUC EQU   INDMSIOT+99
SIOTOUTR EQU   INDMSIOT+97
SIOTOUTC EQU   INDMSIOT+96
SIOTSSWA EQU   INDMSIOT+93
SIOTAUNC EQU   SIOTALTD
SIOTACAT EQU   SIOTALTD
SIOTADEL EQU   SIOTALTD
SIOTAKEP EQU   SIOTALTD
SIOTNPRV EQU   SIOTALTD
SIOJCATS EQU   SIOTALTD
@NM00047 EQU   SIOTALTD
@NM00046 EQU   SIOTALTD
@NM00045 EQU   INDMSIOT+91
SIOTNDSB EQU   INDMSIOT+88
@NM00044 EQU   INDMSIOT+84
SIOTDPCD EQU   INDMSIOT+82
@NM00043 EQU   SIOTBYT4
SIOTRACT EQU   SIOTBYT4
SIOTRACD EQU   SIOTBYT4
SIOTPROT EQU   SIOTBYT4
SCTOUTPN EQU   INDMSIOT+80
SCTOUTNO EQU   INDMSIOT+76
SCTOUTNM EQU   INDMSIOT+68
SIOUCBAD EQU   SCTUTYPE+5
SIOUCNVT EQU   SCTUTYPE+4
SIOUBYT4 EQU   SIOTDEVT+3
@NM00042 EQU   SIOUBYT3
SIO3DISP EQU   SIOUBYT3
SIOUBYT2 EQU   SIOTDEVT+1
SIOUBYT1 EQU   SIOTDEVT
SIOTOMN  EQU   SCTSBYT4
SIOTIPDI EQU   SCTSBYT4
SIOTVAFF EQU   SCTSBYT4
SIOTSTEP EQU   SCTSBYT4
SIOTASCI EQU   SCTSBYT4
@NM00041 EQU   SCTSBYT4
SIOTGDGA EQU   SCTSBYT4
SCTSGDGS EQU   SCTSBYT4
SCTSOLD  EQU   SCTSBYT3
SCTSMOD  EQU   SCTSBYT3
SCTSNEW  EQU   SCTSBYT3
SCTSYSOU EQU   SCTSBYT3
SCTVREF  EQU   SCTSBYT3
SCTALCHK EQU   SCTSBYT3
SCTSYSNE EQU   SCTSBYT3
SCTDSNRF EQU   SCTSBYT3
SCTRECVD EQU   SCTSBYT2
SCTDEFER EQU   SCTSBYT2
SCTLABEL EQU   SCTSBYT2
SCTUNLBD EQU   SCTSBYT2
SCTJOBLB EQU   SCTSBYT2
SCTVOLAF EQU   SCTSBYT2
SIOTCATL EQU   SCTSBYT2
SIOCLUNL EQU   SCTSBYT2
SCTUNAFF EQU   SCTSBYT1
SCTPARLM EQU   SCTSBYT1
SIOTQDSN EQU   SCTSBYT1
SIOTGDSN EQU   SCTSBYT1
SIOTCCAT EQU   SCTSBYT1
SCTSYSIN EQU   SCTSBYT1
SIOTUNCT EQU   SCTSDISP
SIOTCTLG EQU   SCTSDISP
SIOTKEEP EQU   SCTSDISP
S3400DSP EQU   SCTSDISP
SIOTRETN EQU   SCTSDISP
SIOTVLCT EQU   INDMSIOT+54
SCTNMBUT EQU   INDMSIOT+53
SIOTRTRY EQU   SIOTBYT0
SIOTPUPV EQU   SIOTBYT0
SIOTNOPV EQU   SIOTBYT0
SIOTGIGN EQU   SIOTBYT0
SPVTAMSG EQU   SIOTBYT0
SIOTFUDA EQU   SIOTBYT0
SIOTDYAL EQU   SIOTBYT0
SIOTGIID EQU   INDMSIOT+50
SCTVOLCT EQU   INDMSIOT+49
SCTSPOOL EQU   INDMSIOT+48
SIOTDSNM EQU   SIOTTSTC
SIOTTRKM EQU   SIOTTSTC
SIOTSSMG EQU   SIOTTSTC
SIOTSSGP EQU   SIOTTSTC
@NM00040 EQU   SIOTTSTC
SIOTINFC EQU   SIOTTSTC
@NM00039 EQU   SIOTBYT3
SIOTDSID EQU   SIOTBYT3
S3400OFF EQU   SIOTBYT3
SIOTJES3 EQU   SIOTBYT3
SIOCDEVT EQU   SIOTBYT3
SIOALIAS EQU   SIOTBYT3
SCTDDINO EQU   INDMSIOT+44
SIOTDDNT EQU   SIOTBYT1
SIODADSM EQU   SIOTBYT1
SIOTDADR EQU   SIOTBYT1
SIODUNAL EQU   SIOTBYT1
SIOTHOLD EQU   SIOTBYT1
SIOTOCKP EQU   SIOTBYT1
SIOPSCNT EQU   INDMSIOT+42
SIOTREFN EQU   INDMSIOT+40
SIOTOTUN EQU   INDMSIOT+39
SIOTVRSB EQU   INDMSIOT+36
@NM00038 EQU   INDMSIOT+35
@NM00037 EQU   INDMSIOT+31
SCTPSIOT EQU   INDMSIOT+28
SIOTAFID EQU   INDMSIOT+26
SIOTVLSP EQU   INDMSIOT+24
SIODSNTE EQU   INDMSIOT+22
SIOTUNAF EQU   SCTUSADD
SIOTDEST EQU   INDMSIOT+12
SIOTTYPE EQU   INDMSIOT+3
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBLGCB EQU   ASCB+180
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBCMSB EQU   ASCB+132
ASCBCMSF EQU   ASCB+128
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBQSVC EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBLSLQ EQU   ASCB+24
ASCBFSLQ EQU   ASCB+20
ASCBIOSP EQU   ASCB+16
ASCBLOCK EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
SSIBSUSE EQU   SSIB+32
SSIBRSV1 EQU   SSIB+28
SSIBDEST EQU   SSIB+20
SSIBJBID EQU   SSIB+12
SSIBRESV EQU   SSIB+7
@NM00012 EQU   SSIBFLG1
SSIBPJES EQU   SSIBFLG1
SSIBLEN  EQU   SSIB+4
SSIBID   EQU   SSIB
PRMNELM  EQU   PRMESTAE+288
PRMDSQF  EQU   PRMESTAE+284
PRMDSQL  EQU   PRMESTAE+280
PRMQDBP  EQU   PRMESTAE+276
PRMQMBP  EQU   PRMESTAE+272
PRMQMBLN EQU   PRMESTAE+268
PRMQMGP  EQU   PRMESTAE+264
PRMUCBP  EQU   PRMESTAE+260
PRMSIOTP EQU   PRMESTAE+256
@NM00011 EQU   PRMFUNC
VMVCALL  EQU   PRMFUNC
FREECORE EQU   PRMFUNC
DUMPOK   EQU   PRMFUNC
TIOTBLT  EQU   PRMFUNC
DSABCHN  EQU   PRMFUNC
UPDSABCK EQU   PRMFUNC
GENCLNUP EQU   PRMFUNC
@NM00010 EQU   PRMRESC
TPQ      EQU   PRMRESC
DSSUNREC EQU   PRMRESC
DSSTAP   EQU   PRMRESC
@NM00009 EQU   PRMESTAE
ALCASDSN EQU   ASNMSW
ALCSUBWT EQU   WAITOKSW
ALCATRKM EQU   TRKMSW
ALCNOENQ EQU   NOTIOTNQ
ALCJOBNM EQU   MTRJOBSW
ALCHDMSG EQU   HDRMSGSW
ALCSSMSG EQU   SSEMSGSW
ALCGENER EQU   GENLOKSW
ALCCANCL EQU   CCLMNTSW
ALCOFFDV EQU   OFFDEVSW
ALCMSSTM EQU   MSSTRMSW
ALCWTVOL EQU   VWAITSW
ALCWTUNT EQU   UWAITSW
ALCMSGLV EQU   WRTMSGSW
ALCMOUNT EQU   VOLMNTSW
ALCPROCN EQU   NAMES+16
GROUPSZ  EQU   ALCWA+156
GRIDPTR  EQU   ALCWA+152
WORK3MP  EQU   ALCWA+136
WMASK2P  EQU   ALCWA+132
WMASKPTR EQU   ALCWA+128
LGENLOCK EQU   ALCWA+124
@NM00008 EQU   @NM00007
NODEVERR EQU   @NM00007
ALCWAREC EQU   @NM00007
WAITIGEN EQU   @NM00007
UNITRECS EQU   @NM00007
ALCWADUL EQU   INDICATE
DSSUNIT  EQU   INDICATE
DSSTAPE  EQU   INDICATE
PRIVASUM EQU   INDICATE
INDREQU  EQU   INDICATE
QMGRRBP  EQU   ALCWA+108
RIMTABCT EQU   ALCWA+104
RIMTABLN EQU   ALCWA+100
RIMTABP  EQU   ALCWA+96
ALGTABSZ EQU   ALCWA+92
ALGTABP  EQU   ALCWA+88
@NM00006 EQU   ALCWA+78
LTUNITID EQU   ALCWA+76
TOTVOLUN EQU   CNTABLE+44
@NM00005 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00004 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00003 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00002 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
QDBRV002 EQU   QDB+28
QDBPRDS  EQU   QDB+26
QDBPRSZ  EQU   QDB+24
QDBBPTDS EQU   QDB+22
QDBFPTDS EQU   QDB+20
QDBLELMP EQU   QDB+16
QDBFELMP EQU   QDB+12
QDBRV001 EQU   QDB+6
QDBATTR  EQU   QDB+4
QDBQDB   EQU   QDB
ASWRSV02 EQU   ASWAFLGS+1
ASWRSV01 EQU   ASWADSWS
ASWANOCH EQU   ASWADSWS
ASWADYUE EQU   ASWADSWS
ASWAVMVF EQU   ASWADSWS
ASWADYNF EQU   ASWADSWS
@NM00036 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00035 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00034 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00033 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00032 EQU   FLCFSA
@NM00031 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00030 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00029 EQU   FLCIOA
@NM00028 EQU   FLCMCLA+15
@NM00027 EQU   FLCMCLA+14
@NM00026 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00025 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00024 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00023 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00022 EQU   FLCPER
@NM00021 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00020 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00019 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00018 EQU   FLCPIILC
@NM00017 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00016 EQU   FLCSVILC
@NM00015 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00014 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00013 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00165 EQU   @RC00153
@RF00231 EQU   @RC00214
@RC00265 EQU   @RC00263
@RC00303 EQU   @RC00301
@RC00374 EQU   @RC00360
@RC00484 EQU   @RC00481
@RC00487 EQU   @RC00481
@RC00490 EQU   @RC00481
@RC00473 EQU   @RC00470
@RC00478 EQU   @RC00470
@RC00476 EQU   @RC00470
@RF00503 EQU   @RC00470
@RC00539 EQU   @RC00517
@RC00728 EQU   @RC00727
@RC00741 EQU   @RC00721
@RC00866 EQU   @RC00864
@RC00672 EQU   @RC00643
@RC00922 EQU   @RC00460
@RF00940 EQU   @RC00183
@RC00986 EQU   @EL00003
@RC00319 EQU   @RC00303
@RC00377 EQU   @RC00374
@RF00837 EQU   @RC00741
@RF00845 EQU   @RC00741
@RC00924 EQU   @RC00922
@RC00989 EQU   @RC00986
@RC00321 EQU   @RC00319
@RC00398 EQU   @RC00377
@RF00420 EQU   @RC00377
@RC00332 EQU   @RC00321
@ENDDATA EQU   *
         END   IEFAB421,(C'PLS1023',0701,78124)
