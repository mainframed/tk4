         TITLE 'IEFAB426 - VOLUNIT AFFINITY PROCESSING                 *
                        '
IEFAB426 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'IEFAB426  74.166'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @12,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@12                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         MODESET EXTKEY=SCHED,SAVEKEY=(2)
         GSPACE   R,LV=(0)
         LR    @11,@01                                          01S0001
         USING @DATD,@11                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         STC   @02,@OLDKEY                                      01S0001
         MODESET KEYADDR=(2)
         LM    @00,@02,20(@13)                                  01S0001
         ST    @11,8(,@13)                                      01S0001
         LR    @13,@11                                          01S0001
         MODESET EXTKEY=ZERO
         MVC   @PC00001(4),0(@01)                               01S0001
         MODESET EXTKEY=SCHED
*                                                               01S0015
*VUPTR = VOLUNPTR;                     /* FIRST ENTRY IN VU TABLE    */
         L     @10,@PC00001                                     01S0016
         L     @10,ALCWAPTR(,@10)                               01S0016
         L     VUPTR,VOLUNPTR(,@10)                             01S0016
*ERRORWD=ZERO;                                                  01S0017
         SLR   ERRORWD,ERRORWD                                  01S0017
*DO CNTENTRY = ONE TO TOTVOLUN-ONE     /* PROCESS ALL VU ENTRIES     */
*    WHILE (ERRORWD = ZERO);           /* STOP ON ERROR              */
         LA    CNTENTRY,1                                       01S0018
         B     @DE00018                                         01S0018
@DL00018 LTR   ERRORWD,ERRORWD                                  01S0018
         BNZ   @DC00018                                         01S0018
*  IF VUPROCED = OFF THEN              /* ENTRY NOT PROCESSED YET    */
         TM    VUPROCED(VUPTR),B'00010000'                      01S0019
         BNZ   @RF00019                                         01S0019
*    DO;                               /* CHECK FOR AFFINITY         */
*      TAPESW = OFF;                   /*INITIALIZE TAPE SWITCH      */
*      MATCHSW = OFF;                  /* AFFINITY NOT YET FOUND     */
*      DEFSRHSW = ON;                  /*SEARCH VUTAB FOR DEFER      */
*      DEFERSW = ON;                   /*INITIALIZE TO DEFER FOUND   */
*      PVTSTGSW = ON;                  /*LOOK FOR PRI & STRG         */
*      PRIVATSW = OFF;                 /*NO PRIVATES YET             */
*      STRGSW = OFF;                   /*NO STORAGES YET             */
         OI    DEFSRHSW,B'11010000'                             01S0027
         NI    TAPESW,B'11010001'                               01S0027
*      TVUPTR = VUPTR + LENGTH(VOLUNTAB); /* NEXT ENTRY TO SEARCH    */
         LA    TVUPTR,28                                        01S0028
         ALR   TVUPTR,VUPTR                                     01S0028
*      DO TVUCTR = CNTENTRY + ONE TO TOTVOLUN /* PROCESS ALL TIL END */
*           WHILE (ERRORWD = ZERO & TAPESW = OFF);/*STOP ON ERROR
*                                        OR TAPE                     */
         LA    @10,1                                            01S0029
         ALR   @10,CNTENTRY                                     01S0029
         B     @DE00029                                         01S0029
@DL00029 LTR   ERRORWD,ERRORWD                                  01S0029
         BNZ   @DC00029                                         01S0029
         TM    TAPESW,B'00000010'                               01S0029
         BNZ   @DC00029                                         01S0029
*        IF TVUPTR -> VOLID = VOLID THEN /* VOL AFF FOUND            */
         CLC   VOLID(6,TVUPTR),VOLID(VUPTR)                     01S0030
         BNE   @RF00030                                         01S0030
*        IF VOLCOREQ = OFF & TVUPTR -> VOLCOREQ = OFF &         01S0031
*           VOLGRREQ = OFF & TVUPTR -> VOLGRREQ = OFF &         01S0031
*           VOLURREQ = OFF & TVUPTR -> VOLURREQ = OFF &         01S0031
*           (VOLDAREQ = OFF × VOLSIOTP -> SIOTFUDA = ON) &      01S0031
*           (TVUPTR->VOLDAREQ=OFF × TVUPTR->VOLSIOTP->SIOTFUDA=ON) THEN
         TM    VOLCOREQ(VUPTR),B'01000000'                      01S0031
         BNZ   @RF00031                                         01S0031
         TM    VOLCOREQ(TVUPTR),B'01000000'                     01S0031
         BNZ   @RF00031                                         01S0031
         TM    VOLGRREQ(VUPTR),B'00010000'                      01S0031
         BNZ   @RF00031                                         01S0031
         TM    VOLGRREQ(TVUPTR),B'00010000'                     01S0031
         BNZ   @RF00031                                         01S0031
         TM    VOLURREQ(VUPTR),B'00001000'                      01S0031
         BNZ   @RF00031                                         01S0031
         TM    VOLURREQ(TVUPTR),B'00001000'                     01S0031
         BNZ   @RF00031                                         01S0031
         TM    VOLDAREQ(VUPTR),B'00100000'                      01S0031
         BZ    @GL00002                                         01S0031
         L     @10,VOLSIOTP(,VUPTR)                             01S0031
         TM    SIOTFUDA(@10),B'00100000'                        01S0031
         BNO   @RF00031                                         01S0031
@GL00002 TM    VOLDAREQ(TVUPTR),B'00100000'                     01S0031
         BZ    @RT00031                                         01S0031
         L     @10,VOLSIOTP(,TVUPTR)                            01S0031
         TM    SIOTFUDA(@10),B'00100000'                        01S0031
         BNO   @RF00031                                         01S0031
@RT00031 DS    0H                                               01S0032
*                                        /*MUST DO TAPE AFF PROC     */
*          DO;                                                  01S0032
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - TAPEAFF                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - PROCESS TAPE VOLUME AFFINITY                  */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THE FUNCTION OF THIS ROUTINE IS TO PROCESS VOLUME AFFINITY     */
*/*   BETWEEN TAPE REQUESTS. IT IS PROCESSED AS FOLLOWS-             */
*/*     IF UNIT AFFINITY EXISTS BETWEEN THESE REQUESTS, THE          */
*/*     UNIT AFFINITY TAKES PRECEDENCE, OTHERWISE THE VOLUME         */
*/*     AFFINITY CAUSES A NEW UNITID TO BE GENERATED(CAUSING AN EXTRA*/
*/*     UNIT TO BE ALLOCATED) AND PROPAGATED THROUGH ALL VOLUNIT     */
*/*     ENTRIES WITH THE SAME VOLID. THE ACTUAL BUMPING OF THE       */
*/*     NUMBER OF UNITS IS HANDLED IN THE SUBROUTINE VUUPDATE.       */
*/*                                                                  */
*/* OPERATION -  SEE FUNCTION                                        */
*/*                                                                  */
*/* ENTRY - INLINE SEGMENT                                           */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     VUPTR - POINTING TO SUBJECT VOLUNIT ENTRY                    */
*/*     TVUPTR - POINTING TO AFFINITY VOLUNIT ENTRY                  */
*/*                                                                  */
*/*   EXITS -                                                        */
*/*     CONDITION - SUCCESSFUL COMPLETION                            */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*       VOLUNIT ENTRIES UPDATED                                    */
*/*       NUMBER OF UNITS UPDATED                                    */
*/*                                                                  */
*/*     RETURN CODE - ZERO                                           */
*/*                                                                  */
*/*     CONDITION - NUMBER OF UNITS WOULD EXCEED MAXIMUM             */
*/*       THIS CONDITION IS DETERMINED BY VUUPDATE, THE              */
*/*       APPROPRIATE RETURN CODE IS SET IN ERRORWD.                 */
*/*                                                                  */
*/********************************************************************/
*IF TVUPTR-> VOLUNTID ^= VOLUNTID THEN /*MUST DO VOL AFF PROCESSING  */
         CLC   VOLUNTID(2,TVUPTR),VOLUNTID(VUPTR)               02S0033
         BE    @RF00033                                         02S0033
*  DO;                                                          02S0034
*    SRCHSIOT = VOLSIOTP;              /*SIOT FOR VUUPDATE           */
         L     SRCHSIOT,VOLSIOTP(,VUPTR)                        02S0035
*    SRCHVUAD = VUPTR;                 /*VOLUNIT ENTRY FOR VUUPDATE  */
         LR    SRCHVUAD,VUPTR                                   02S0036
*    TAPESW=ON;                        /*LOOP CTRL FOR AB426         */
         OI    TAPESW,B'00000010'                               02S0037
*    CALL VUUPDATE;                    /*UPDATE VOLUNIT ENTRIES      */
         BAL   @14,VUUPDATE                                     02S0038
*    LTUNITID=LTUNITID + ONE;          /*NEW UNITID                  */
         L     @10,@PC00001                                     02S0039
         L     @10,ALCWAPTR(,@10)                               02S0039
         LA    @05,1                                            02S0039
         LH    @03,LTUNITID(,@10)                               02S0039
         ALR   @03,@05                                          02S0039
         STH   @03,LTUNITID(,@10)                               02S0039
*    VOLUNTID = LTUNITID;              /*UPDATE VOLUNIT ENTRY        */
         STH   @03,VOLUNTID(,VUPTR)                             02S0040
*    AVUPTR = VOLUNPTR;                /*START AT FIRST VU ENTRY     */
         L     AVUPTR,VOLUNPTR(,@10)                            02S0041
*    DO AFFCTR = ONE TO TOTVOLUN                                02S0042
*          WHILE(ERRORWD = ZERO);      /*SCAN VOLUNIT FOR VOL AFF    */
         LR    AFFCTR,@05                                       02S0042
         B     @DE00042                                         02S0042
@DL00042 LTR   ERRORWD,ERRORWD                                  02S0042
         BNZ   @DC00042                                         02S0042
*      IF AVUPTR ^= VUPTR &                                     02S0043
*         AVUPTR ->VOLID = VOLID THEN  /*VOL AFF TO HANDLE           */
         CR    AVUPTR,VUPTR                                     02S0043
         BE    @RF00043                                         02S0043
         CLC   VOLID(6,AVUPTR),VOLID(VUPTR)                     02S0043
         BNE   @RF00043                                         02S0043
*         DO;                                                   02S0044
*           SRCHSIOT = AVUPTR -> VOLSIOTP;  /*SIOT FOR VUUPDATE      */
         L     SRCHSIOT,VOLSIOTP(,AVUPTR)                       02S0045
*           SRCHVUAD = AVUPTR;         /*VOLUNIT ENTRY FOR VUUPDATE  */
         LR    SRCHVUAD,AVUPTR                                  02S0046
*           CALL VUUPDATE;             /*UPDATE VOLUNIT ENTRIES      */
         BAL   @14,VUUPDATE                                     02S0047
*           AVUPTR -> VOLUNTID = VOLUNTID; /*PROPAGATE UNIT ID       */
         MVC   VOLUNTID(2,AVUPTR),VOLUNTID(VUPTR)               02S0048
*         END;                                                  02S0049
*      ELSE;                                                    02S0050
@RF00043 DS    0H                                               02S0051
*      AVUPTR = AVUPTR +LENGTH(VOLUNTAB); /*NEXT VOLUNIT ENTRY       */
         AH    AVUPTR,@CH00356                                  02S0051
*    END;                                                       02S0052
         AH    AFFCTR,@CH00045                                  02S0052
@DE00042 L     @05,@PC00001                                     02S0052
         L     @05,ALCWAPTR(,@05)                               02S0052
         C     AFFCTR,TOTVOLUN(,@05)                            02S0052
         BNH   @DL00042                                         02S0052
@DC00042 DS    0H                                               02S0053
*  END;                                                         02S0053
*          END;                                                 01S0054
*        ELSE                                                   01S0055
*          DO;                         /* UPDATE VU AND SIOT         */
         B     @RC00031                                         01S0055
@RF00031 DS    0H                                               01S0056
*            IF MATCHSW = OFF THEN     /* FIRST TIME                 */
         TM    MATCHSW,B'00100000'                              01S0056
         BNZ   @RF00056                                         01S0056
*              DO;                     /* UPDATE PRIMARY VU AND SIOT */
*                SRCHSIOT = VOLSIOTP;  /* INPUT TO VUUPDATE          */
         L     SRCHSIOT,VOLSIOTP(,VUPTR)                        01S0058
*                SRCHVUAD = VUPTR;     /* INPUT TO VUUPDATE          */
         LR    SRCHVUAD,VUPTR                                   01S0059
*                CALL VUUPDATE;        /* UPDATE VU AND SIOT         */
         BAL   @14,VUUPDATE                                     01S0060
*                LTUNITID = LTUNITID + ONE; /* NEW UNITID            */
         L     @10,@PC00001                                     01S0061
         L     @10,ALCWAPTR(,@10)                               01S0061
         LA    @07,1                                            01S0061
         AH    @07,LTUNITID(,@10)                               01S0061
         STH   @07,LTUNITID(,@10)                               01S0061
*                VOLUNTID = LTUNITID;  /* UPDATE VU WITH ID          */
         STH   @07,VOLUNTID(,VUPTR)                             01S0062
*                PVTSTGSW=OFF;         /*PRIVATE SEARCH DONE         */
*                DEFSRHSW = OFF;       /*INDICATE DEFER SEARCH DONE  */
*                MATCHSW = ON;         /* FIRST TIME DONE            */
         OI    MATCHSW,B'00100000'                              01S0065
         NI    PVTSTGSW,B'01101111'                             01S0065
*              END;                                             01S0066
*            ELSE;                     /* NULL ELSE                  */
@RF00056 DS    0H                                               01S0068
*            SRCHSIOT = TVUPTR -> VOLSIOTP; /* INPUT TO VUUPDATE     */
         L     SRCHSIOT,VOLSIOTP(,TVUPTR)                       01S0068
*            SRCHVUAD = TVUPTR;        /* INPUT TO VUUPDATE          */
         LR    SRCHVUAD,TVUPTR                                  01S0069
*            CALL VUUPDATE;            /* UPDATE VU AND SIOT         */
         BAL   @14,VUUPDATE                                     01S0070
*            TVUPTR -> VOLUNTID = VOLUNTID; /* PROPOGATE UNITID      */
         MVC   VOLUNTID(2,TVUPTR),VOLUNTID(VUPTR)               01S0071
*          END;                                                 01S0072
*        TVUPTR = TVUPTR + LENGTH(VOLUNTAB); /* NEXT VU ENTRY        */
@RC00031 DS    0H                                               01S0073
@RF00030 AH    TVUPTR,@CH00356                                  01S0073
*      END;                                                     01S0074
         LA    @10,1                                            01S0074
         AL    @10,TVUCTR                                       01S0074
@DE00029 ST    @10,TVUCTR                                       01S0074
         L     @07,@PC00001                                     01S0074
         L     @07,ALCWAPTR(,@07)                               01S0074
         C     @10,TOTVOLUN(,@07)                               01S0074
         BNH   @DL00029                                         01S0074
@DC00029 DS    0H                                               01S0075
*    END;                                                       01S0075
*  VUPTR = VUPTR + LENGTH(VOLUNTAB);   /* NEXT VU ENTRY              */
@RF00019 AH    VUPTR,@CH00356                                   01S0076
*END;                                                           01S0077
         AH    CNTENTRY,@CH00045                                01S0077
@DE00018 L     @10,@PC00001                                     01S0077
         L     @10,ALCWAPTR(,@10)                               01S0077
         L     @10,TOTVOLUN(,@10)                               01S0077
         BCTR  @10,0                                            01S0077
         CR    CNTENTRY,@10                                     01S0077
         BNH   @DL00018                                         01S0077
@DC00018 DS    0H                                               01S0078
*RETURN CODE(ERRORWD);                                          01S0078
         IC    @02,@OLDKEY                                      01S0078
         L     @13,4(,@13)                                      01S0078
         L     @00,@SIZDATD                                     01S0078
         LR    @01,@11                                          01S0078
         FSPACE   R,LV=(0),A=(1)
         MODESET KEYADDR=(2)
         LR    @15,@06                                          01S0078
         L     @14,12(,@13)                                     01S0078
         LM    @00,@12,20(@13)                                  01S0078
         BR    @14                                              01S0078
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - VUUPDATE                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - UPDATE VOLUNIT ENTRY FOR VOLUME AFFINITY      */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THE FUNCTION OF THIS SEGMENT IS TO TAKE A VOLUNIT ENTRY THAT   */
*/*   HAS VOLUME AFFINITY AND UPDATE IT IN LIGHT OF THE AFFINITY.    */
*/*                                                                  */
*/*   THE FOLLOWING FUNCTIONS ARE PERFORMED:                         */
*/*                                                                  */
*/*   1. SET THE FOLLOWING BITS IN THE INPUT VOLUNIT ENTRY:          */
*/*                                                                  */
*/*      A. TIOT DEVICE ENTRY REQUIRED BIT SET ON                    */
*/*      B. NON-SHARABLE BIT SET OFF                                 */
*/*      C. VOLUME AFFINITY PROCESSED BIT SET ON                     */
*/*                                                                  */
*/*   2. IF DEFER MOUNTING WAS NOT SPECIFIED, SET THE VOLUME-MUST-BE-*/
*/*      MOUNTED-BY-THE-END-OF-ALLOCATION BIT.                       */
*/*                                                                  */
*/*   3. IF ANY OTHER VOLUNIT ENTRIES IN THE INPUT SIOT WERE         */
*/*      SCHEDULED TO GO ON THE SAME UNIT AS THE VOLUME THAT HAD     */
*/*      AFFINITY, INCREMENT THE TOTAL NUMBER OF UNITS IN THE        */
*/*      SIOT BY ONE. IF SUCH AN ENTRY IS FOUND SET THE TIOT-DEVICE- */
*/*      ENTRY-REQUIRED BIT AND IF DEFER MOUNTING WAS NOT SPECIFIED, */
*/*      SET THE VOLUME-MUST-BE-MOUNTED-BY-THE-END-OF-ALLOCATION BIT */
*/*      IN THE FIRST SUCH ENTRY.                                    */
*/*                                                                  */
*/*   4. IF ONE AND ONLY ONE REFERENCE IN THE WHOLE VOLUNIT TABLE    */
*/*      REMAINS TO THE UNIT THAT THE INPUT VOLUNIT ENTRY WAS        */
*/*      SCHEDULED TO GO ON THEN IT IS MARKED SHARABLE.              */
*/*                                                                  */
*/*   5. IF ANY VOLUNIT ENTRIES IN THE VOLUNIT TABLE HAVE THE        */
*/*      SAME UNITID AS THE INPUT ENTRY, THE FIRST SUCH ENTRY IS     */
*/*      MARKED WITH THE TIOT-DEVICE-ENTRY-REQUIRED BIT AND (IF      */
*/*      DEFER MOUNTING WAS NOT REQUESTED) BY THE VOLUME-MUST-BE-    */
*/*      MOUNTED-BY-THE-END-OF-ALLOCATION BIT.                       */
*/*                                                                  */
*/*   6. IF THE SEARCH-THE-VOLUNIT-TABLE-FOR-PRIVATE-OR-STORAGE BIT  */
*/*      (SEE INPUT DATA) IS ON A SCAN IS MADE OF THE VOLUNIT        */
*/*      TABLE. IF ANY VOLUNIT ENTRIES HAVE THE SAME VOLID AS THE    */
*/*      INPUT VOLUNIT ENTRY AND ALSO HAVE THE PRIVATE BIT ON,       */
*/*      THE MARK-VOLUNIT-ENTRY-PRIVATE BIT (SEE 7)                  */
*/*      IS SET ON. IF NO VOLUNIT ENTRIES WITH THE SAME VOLID        */
*/*      HAVE THE PRIVATE BIT ON BUT AT LEAST ONE HAS THE STORAGE    */
*/*      BIT ON, SET THE MARK-VOLUNIT-ENTRIES-STORAGE BIT (SEE 7) ON.*/
*/*                                                                  */
*/*   7. IF THE MARK-VOLUNIT-ENTRIES-PRIVATE BIT IS ON, SET THE      */
*/*      PRIVATE BIT ON, THE STORAGE BIT OFF AND THE PUBLIC BIT      */
*/*      OFF IN THE INPUT VOLUNIT ENTRY. IF THE MARK--PRIVATE BIT    */
*/*      IS NOT ON BUT THE MARK-VOLUNIT-ENTRIES-STORAGE BIT IS ON,   */
*/*      SET THE STORAGE BIT ON, THE PRIVATE BIT OFF, AND THE        */
*/*      PUBLIC BIT OFF IN THE CURRENT VOLUNIT ENTRY.                */
*/*                                                                  */
*/*   8. IF SEARCH FOR DEFER BIT IS ON, SCAN VOLUNIT TABLE. IF ALL   */
*/*      AFFINITY REQUESTS ARE NOT DEFER, INDICATE THAT NONE ARE TO  */
*/*      BE DEFER. IF ALL ARE DEFER, TURN OFF NON-SHAREABLE BIT IN   */
*/*      VU ENTRY.                                                   */
*/*                                                                  */
*/* ENTRY - IN-LINE SEGMENT                                          */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     SRCHSIOT - PTR. TO INPUT SIOT                                */
*/*       SIOT -                                                     */
*/*         SVOLUNNO - NO. OF VOLUNIT ENTRIES FOR THIS SIOT          */
*/*         SVOLUNAD - PTR. TO FIRST VOLUNIT ENTRY FOR THIS SIOT     */
*/*         SIOTOTUN - TOTAL NUMBER OF UNITS REQUESTED.              */
*/*                                                                  */
*/*     SRCHVUAD - PTR. TO INPUT VOLUNIT ENTRY                       */
*/*       VOLUNIT ENTRY -                                            */
*/*         VOLUNTID - UNIT ID                                       */
*/*         VOLDEFER - DEFER MOUNT SPECIFIED                         */
*/*         VOLPRV   - PRIVATE REQUEST                               */
*/*         VOLSTG   - STORAGE REQUEST                               */
*/*     PRVSTGSW - SCAN THE VOLUNIT TABLE FOR PRIVATE OR STORAGE     */
*/*     DEFSRHSW - SCAN VOLUNIT TABLE FOR DEFER                      */
*/*     PRIVATSW - MARK THE INPUT VOLUNIT ENTRY PRIVATE              */
*/*     STRGSW   - MARK THE INPUT VOLUNIT ENTRY STORAGE              */
*/*     DEFERSW  - MARK THE INPUT VOLUNIT ENTRY NON-SHAREABLE IF ON  */
*/*                MARK THE INPUT VOLUNIT ENTRY NON-DEFER IF OFF     */
*/*                                                                  */
*/* EXITS -                                                          */
*/*                                                                  */
*/* 1 CONDITION - NORMAL COMPLETION                                  */
*/*   OUTPUT -                                                       */
*/*     SIOT -                                                       */
*/*       SIOTOTUN - TOTAL NO. OF UNITS REQUIRED                     */
*/*                                                                  */
*/*     VOLUNIT ENTRY -                                              */
*/*       VDEVREQD - TIOT DEVICE ENTRY REQUIRED                      */
*/*       VOLNSHR  - NON-SHARABLE BIT                                */
*/*       VUPROCED - VOLUME AFFINITY PROCESSED BIT                   */
*/*       VOLMNTD  - VOLUME MUST BE MOUNTED BY THE END OF ALLOCATION */
*/*       VOLPRV   - PRIVATE REQUEST                                 */
*/*       VOLPUB   - PUBLIC REQUEST                                  */
*/*       VOLSTG   - STORAGE REQUEST                                 */
*/*                                                                  */
*/*       PRIVATSW - SEE INPUT DATA                                  */
*/*       STRGSW   - SEE INPUT DATA                                  */
*/*                                                                  */
*/*   RETURN CODE - 0                                                */
*/*                                                                  */
*/* 2 CONDITION - VOLUME AFFINITY CAUSES REQUEST TO REQUIRE MORE     */
*/*     THAN 59 UNITS                                                */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     SIOT -                                                       */
*/*       SIOTRSNC - 9 = TOO MANY UNITS REQUIRED                     */
*/*                                                                  */
*/*   RETURN CODE - 4                                                */
*/*                                                                  */
*/********************************************************************/
*VUUPDATE:                                                      02S0079
*  PROC;                                                        02S0079
@EL00001 IC    @02,@OLDKEY                                      02S0079
         L     @13,4(,@13)                                      02S0079
@EF00001 L     @00,@SIZDATD                                     02S0079
         LR    @01,@11                                          02S0079
         FSPACE   R,LV=(0),A=(1)
         MODESET KEYADDR=(2)
@ER00001 LM    @14,@12,12(@13)                                  02S0079
         BR    @14                                              02S0079
VUUPDATE STM   @14,@05,12(@13)                                  02S0079
         STM   @07,@08,48(@13)                                  02S0079
         STM   @10,@12,60(@13)                                  02S0079
*SRCHVUAD -> VDEVREQD = ON;            /*ENTRY REQUIRES A DEVICE     */
         OI    VDEVREQD(SRCHVUAD),B'00100000'                   02S0080
*SRCHVUAD -> VOLNSHR = OFF;            /*VOLUME MUST BE SHAREABLE    */
         NI    VOLNSHR(SRCHVUAD),B'11110111'                    02S0081
*SRCHVUAD -> VUPROCED = ON;            /*INDICATE THAT VOL AFF DONE
*                                        FOR THIS VU                 */
         OI    VUPROCED(SRCHVUAD),B'00010000'                   02S0082
*IF SRCHVUAD -> VOLDEFER = OFF THEN    /*DEFERED MOUNT?              */
         TM    VOLDEFER(SRCHVUAD),B'00000001'                   02S0083
         BNZ   @RF00083                                         02S0083
*  SRCHVUAD -> VOLMNTD = ON;           /*NO, SET MUST BE MOUNTED     */
         OI    VOLMNTD(SRCHVUAD),B'01000000'                    02S0084
*UNITIDS1 = OFF;                       /*CLEAR 'MATCH FOUND' SWITCH  */
@RF00083 NI    UNITIDS1,B'01111111'                             02S0085
*TEMPVUAD = SRCHSIOT -> SVOLUNAD;                               02S0086
         L     TEMPVUAD,SVOLUNAD(,SRCHSIOT)                     02S0086
*DO VUCTR = ONE TO SRCHSIOT -> SVOLUNNO                         02S0087
*  WHILE (UNITIDS1 = OFF);             /*SEARCH ALL ENTRIES TILL A
*                                        MATCH IS FOUND              */
         LA    VUCTR,1                                          02S0087
         B     @DE00087                                         02S0087
@DL00087 TM    UNITIDS1,B'10000000'                             02S0087
         BNZ   @DC00087                                         02S0087
*  IF TEMPVUAD ^= SRCHVUAD THEN        /*DON'T COMPARE INPUT ENTRY   */
         CR    TEMPVUAD,SRCHVUAD                                02S0088
         BE    @RF00088                                         02S0088
*    DO;                                                        02S0089
*      IF TEMPVUAD -> VOLUNTID         /*SAME UNITID?                */
*          = SRCHVUAD -> VOLUNTID THEN                          02S0090
         CLC   VOLUNTID(2,TEMPVUAD),VOLUNTID(SRCHVUAD)          02S0090
         BNE   @RF00090                                         02S0090
*        DO;                                                    02S0091
*          UNITIDS1 = ON;              /*SET EXIT CONDITION          */
         OI    UNITIDS1,B'10000000'                             02S0092
*          SHRVUPTR = TEMPVUAD;        /*SAVE VU ENTRY               */
         LR    SHRVUPTR,TEMPVUAD                                02S0093
*          TEMPVUAD -> VDEVREQD = ON;  /*DEVICE REQD                 */
         OI    VDEVREQD(TEMPVUAD),B'00100000'                   02S0094
*          IF SRCHSIOT-> SIOTOTUN < MAXUNIT THEN                02S0095
         CLI   SIOTOTUN(SRCHSIOT),59                            02S0095
         BNL   @RF00095                                         02S0095
*            SRCHSIOT -> SIOTOTUN      /*UPDATE UNIT COUNT           */
*              = SRCHSIOT -> SIOTOTUN + ONE;                    02S0096
         LA    @10,1                                            02S0096
         SLR   @08,@08                                          02S0096
         IC    @08,SIOTOTUN(,SRCHSIOT)                          02S0096
         ALR   @10,@08                                          02S0096
         STC   @10,SIOTOTUN(,SRCHSIOT)                          02S0096
*          ELSE                                                 02S0097
*            DO;                                                02S0097
         B     @RC00095                                         02S0097
@RF00095 DS    0H                                               02S0098
*              ERRORWD = VUUPFAIL;                              02S0098
         LA    ERRORWD,4                                        02S0098
*              SRCHSIOT->SIOTRSNC = OVER59U;                    02S0099
         MVC   SIOTRSNC(2,SRCHSIOT),@CH00080                    02S0099
*            END;                                               02S0100
*        END;                                                   02S0101
@RC00095 DS    0H                                               02S0102
*    END;                                                       02S0102
@RF00090 DS    0H                                               02S0103
*  IF UNITIDS1 = OFF THEN                                       02S0103
@RF00088 TM    UNITIDS1,B'10000000'                             02S0103
         BNZ   @RF00103                                         02S0103
*    TEMPVUAD = TEMPVUAD + LENGTH(VOLUNTAB);/*UPDTE PTR TO NEXT ENTRY*/
         AH    TEMPVUAD,@CH00356                                02S0104
*END;                                                           02S0105
@RF00103 AH    VUCTR,@CH00045                                   02S0105
@DE00087 CH    VUCTR,SVOLUNNO(,SRCHSIOT)                        02S0105
         BNH   @DL00087                                         02S0105
@DC00087 DS    0H                                               02S0106
*TEMPVUAD = VOLUNPTR;                  /*FIRST VOLUNIT ENTRY         */
         L     @10,@PC00001                                     02S0106
         L     @10,ALCWAPTR(,@10)                               02S0106
         L     TEMPVUAD,VOLUNPTR(,@10)                          02S0106
*UNITIDS1 = OFF;                       /*UNIT ID SW OFF              */
*UNITIDS2 = OFF;                       /*MORE THAN ONE UNITID SW OFF */
         NI    UNITIDS1,B'00111111'                             02S0108
*DO VUCTR = ONE TO VOLUNSZE/LENGTH(VOLUNTAB)                    02S0109
*  WHILE (ERRORWD = ZERO);                                      02S0109
         LA    VUCTR,1                                          02S0109
         B     @DE00109                                         02S0109
@DL00109 LTR   ERRORWD,ERRORWD                                  02S0109
         BNZ   @DC00109                                         02S0109
*                                       /*SEARCH ALL VUS UNTIL TWO
*                                        UNIT MATCHES ARE FOUND      */
*    IF PVTSTGSW = ON THEN             /*SEARCH VU FOR PRIVATE  02S0110
*                                        OR STORAGE WITH SAME VOLID  */
         TM    PVTSTGSW,B'00010000'                             02S0110
         BNO   @RF00110                                         02S0110
*      DO;                                                      02S0111
*        IF SRCHVUAD -> VOLID = TEMPVUAD -> VOLID THEN          02S0112
         CLC   VOLID(6,SRCHVUAD),VOLID(TEMPVUAD)                02S0112
         BNE   @RF00112                                         02S0112
*                                      /*VOLID IS THE SAME           */
*          IF PRIVATSW = OFF THEN      /*NO PRIVATES YET             */
         TM    PRIVATSW,B'00001000'                             02S0113
         BNZ   @RF00113                                         02S0113
*            IF TEMPVUAD -> VOLPRV = ON THEN /*PRIVATE FOUND         */
         TM    VOLPRV(TEMPVUAD),B'01000000'                     02S0114
         BNO   @RF00114                                         02S0114
*              PRIVATSW = ON;          /*MARK VUS PRIVATE            */
         OI    PRIVATSW,B'00001000'                             02S0115
*            ELSE                      /*VU NOT PRIVATE              */
*              IF TEMPVUAD -> VOLSTG = ON THEN /*STORAGE REQUEST     */
         B     @RC00114                                         02S0116
@RF00114 TM    VOLSTG(TEMPVUAD),B'00010000'                     02S0116
         BNO   @RF00116                                         02S0116
*                STRGSW = ON;          /*MARK VUS STORAGE            */
         OI    STRGSW,B'00000100'                               02S0117
*      END;                                                     02S0118
@RF00116 DS    0H                                               02S0118
@RC00114 DS    0H                                               02S0118
@RF00113 DS    0H                                               02S0118
@RF00112 DS    0H                                               02S0119
*    IF DEFERSW = ON THEN              /*REQUEST WITH DEFER FOUND    */
@RF00110 TM    DEFERSW,B'01000000'                              02S0119
         BNO   @RF00119                                         02S0119
*      IF DEFSRHSW = ON THEN           /*SEARCH FOR DEFER TO BE DONE */
         TM    DEFSRHSW,B'10000000'                             02S0120
         BNO   @RF00120                                         02S0120
*        DO;                                                    02S0121
*          IF SRCHVUAD->VOLID = TEMPVUAD->VOLID THEN /*VOLID IS SAME */
         CLC   VOLID(6,SRCHVUAD),VOLID(TEMPVUAD)                02S0122
         BNE   @RF00122                                         02S0122
*            IF TEMPVUAD->VOLDEFER = OFF THEN /*REQUEST NOT DEFER    */
         TM    VOLDEFER(TEMPVUAD),B'00000001'                   02S0123
         BNZ   @RF00123                                         02S0123
*              DEFERSW = OFF;          /*INDICATE NON-DEFER REQUEST  */
         NI    DEFERSW,B'10111111'                              02S0124
*            ELSE;                     /*REQUEST IS DEFER            */
@RF00123 DS    0H                                               02S0126
*          ELSE;                       /*VOLID IS NOT THE SAME       */
@RF00122 DS    0H                                               02S0127
*        END;                                                   02S0127
*      ELSE;                           /*DEFER SEARCH NOT TO BE DONE */
@RF00120 DS    0H                                               02S0129
*    ELSE;                             /*NON-DEFER REQ ALREADY FOUND */
@RF00119 DS    0H                                               02S0130
*    IF TEMPVUAD ^= SRCHVUAD THEN      /*ENTRY MUST BE CHKD          */
         CR    TEMPVUAD,SRCHVUAD                                02S0130
         BE    @RF00130                                         02S0130
*      DO;                             /*CHECK VU FOR UNITID MATCH   */
*        IF TEMPVUAD -> VOLUNTID = SRCHVUAD -> VOLUNTID THEN /*UNIT
*                                        IDS MATCH                   */
         CLC   VOLUNTID(2,TEMPVUAD),VOLUNTID(SRCHVUAD)          02S0132
         BNE   @RF00132                                         02S0132
*          IF UNITIDS1 = OFF THEN      /*THIS IS FIRST MATCH         */
         TM    UNITIDS1,B'10000000'                             02S0133
         BNZ   @RF00133                                         02S0133
*            DO;                                                02S0134
*              UNITIDS1 = ON;          /*ONE MATCH FOUND             */
         OI    UNITIDS1,B'10000000'                             02S0135
*              SHRVUPTR = TEMPVUAD;    /*SAVE VUENTRY                */
         LR    SHRVUPTR,TEMPVUAD                                02S0136
*              TEMPVUAD -> VDEVREQD = ON; /*NEEDS A DEVICE ENTRY    */
         OI    VDEVREQD(TEMPVUAD),B'00100000'                   02S0137
*              IF TEMPVUAD -> VOLDEFER = OFF THEN /*DEFERRED MOUNT?  */
         TM    VOLDEFER(TEMPVUAD),B'00000001'                   02S0138
         BNZ   @RF00138                                         02S0138
*                TEMPVUAD -> VOLMNTD = ON; /*SET MUST BE MOUNTED     */
         OI    VOLMNTD(TEMPVUAD),B'01000000'                    02S0139
*            END;                                               02S0140
*          ELSE                        /*THIS IS SECOND MATCH        */
*            UNITIDS2 = ON;            /*SET EXIT SWITCH             */
         B     @RC00133                                         02S0141
@RF00133 OI    UNITIDS2,B'01000000'                             02S0141
*      END;                                                     02S0142
@RC00133 DS    0H                                               02S0142
@RF00132 DS    0H                                               02S0143
*    TEMPVUAD = TEMPVUAD + LENGTH(VOLUNTAB);   /*NEXT VU ENTRY       */
@RF00130 AH    TEMPVUAD,@CH00356                                02S0143
*END;                                                           02S0144
         AH    VUCTR,@CH00045                                   02S0144
@DE00109 L     @10,@PC00001                                     02S0144
         L     @10,ALCWAPTR(,@10)                               02S0144
         L     @00,VOLUNSZE(,@10)                               02S0144
         SRDA  @00,32                                           02S0144
         D     @00,@CF00356                                     02S0144
         CR    VUCTR,@01                                        02S0144
         BNH   @DL00109                                         02S0144
@DC00109 DS    0H                                               02S0145
*IF UNITIDS1 = ON & UNITIDS2 = OFF THEN /*ONE AND ONLY ONE MATCH     */
         TM    UNITIDS1,B'10000000'                             02S0145
         BNO   @RF00145                                         02S0145
         TM    UNITIDS2,B'01000000'                             02S0145
         BNZ   @RF00145                                         02S0145
*  SHRVUPTR -> VOLNSHR = OFF;          /*UNIT IS NOW SHARABLE        */
         NI    VOLNSHR(SHRVUPTR),B'11110111'                    02S0146
*IF PRIVATSW = ON THEN                 /*VU MUST BE MADE PRIVATE     */
@RF00145 TM    PRIVATSW,B'00001000'                             02S0147
         BNO   @RF00147                                         02S0147
*  DO;                                 /*UPDATE VU STATUS BITS       */
*    SRCHVUAD -> VOLPRV = ON;          /*MARK VU PRIVATE             */
*    SRCHVUAD -> VOLSTG = OFF;         /*TURN OFF STORAGE            */
*    SRCHVUAD -> VOLPUB = OFF;         /*TURN OFF PUBLIC             */
         OI    VOLPRV(SRCHVUAD),B'01000000'                     02S0151
         NI    VOLSTG(SRCHVUAD),B'01101111'                     02S0151
*  END;                                                         02S0152
*ELSE                                                           02S0153
*  IF STRGSW = ON THEN                 /*VU MUST BE MADE STORAGE     */
         B     @RC00147                                         02S0153
@RF00147 TM    STRGSW,B'00000100'                               02S0153
         BNO   @RF00153                                         02S0153
*    DO;                               /*UPDATE VU STATUS BITS       */
*      SRCHVUAD -> VOLSTG = ON;        /*MARK VU STORAGE             */
*      SRCHVUAD -> VOLPUB = OFF;       /*TURN OFF PUBLIC             */
         OI    VOLSTG(SRCHVUAD),B'00010000'                     02S0156
         NI    VOLPUB(SRCHVUAD),B'01111111'                     02S0156
*    END;                                                       02S0157
*IF DEFERSW = OFF THEN                 /*ONE NON-DEFER REQ FOUND     */
@RF00153 DS    0H                                               02S0158
@RC00147 TM    DEFERSW,B'01000000'                              02S0158
         BNZ   @RF00158                                         02S0158
*  DO;                                 /*MAKE THIS VOL AFF NONDEFER  */
*    SRCHVUAD->VOLDEFER = OFF;         /*TURN OFF DEFER BIT          */
         NI    VOLDEFER(SRCHVUAD),B'11111110'                   02S0160
*    SRCHVUAD->VOLMNTD = ON;           /*INDICATE VOL MUST BE MOUNTED*/
         OI    VOLMNTD(SRCHVUAD),B'01000000'                    02S0161
*  END;                                                         02S0162
*ELSE                                  /*ALL AFF REQS DEFER          */
*  SRCHVUAD->VOLNSHR = ON;             /*INDICATE VOL NOT SHAREABLE  */
         B     @RC00158                                         02S0163
@RF00158 OI    VOLNSHR(SRCHVUAD),B'00001000'                    02S0163
*END VUUPDATE;                         /*RETURN TO CALLER            */
@EL00002 DS    0H                                               02S0164
@EF00002 DS    0H                                               02S0164
@ER00002 LM    @14,@05,12(@13)                                  02S0164
         LM    @07,@08,48(@13)                                  02S0164
         LM    @10,@12,60(@13)                                  02S0164
         BR    @14                                              02S0164
*END IEFAB426                                                   01S0165
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (A426SPEC)                                        *
*/*%INCLUDE SYSLIB  (A426DATA)                                        *
*/*%INCLUDE SYSLIB  (VUUPDATA)                                        *
*/*%INCLUDE SYSLIB  (IEFASIOT)                                        *
*/*%INCLUDE SYSLIB  (IEFZB423)                                        *
*/*%INCLUDE SYSLIB  (IEFZB425)                                        *
*/*%INCLUDE SYSLIB  (TAPEAFF )                                        *
*/*%INCLUDE SYSLIB  (TAFFSPEC)                                        *
*/*%INCLUDE SYSLIB  (VUUPDATE)                                        *
*/*%INCLUDE SYSLIB  (VUUPSPEC)                                        *
*;                                                              01S0165
@DATA    DS    0H
@CH00045 DC    H'1'
@CH00080 DC    H'9'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
IEFAB426 CSECT
         DS    0F
@CF00356 DC    F'28'
@CH00356 EQU   @CF00356+2
@DATD    DSECT
         DS    0D
TVUCTR   DS    F
SIOTPTR  DS    A
AVUCTR   DS    F
TPTR     DS    A
AFFVBITS DS    BL1
         ORG   AFFVBITS
DEFSRHSW DS    BL1
DEFERSW  EQU   AFFVBITS+0
MATCHSW  EQU   AFFVBITS+0
PVTSTGSW EQU   AFFVBITS+0
PRIVATSW EQU   AFFVBITS+0
STRGSW   EQU   AFFVBITS+0
TAPESW   EQU   AFFVBITS+0
@NM00001 EQU   AFFVBITS+0
         ORG   AFFVBITS+1
VUUPBITS DS    BL1
         ORG   VUUPBITS
UNITIDS1 DS    BL1
UNITIDS2 EQU   VUUPBITS+0
@NM00002 EQU   VUUPBITS+0
         ORG   VUUPBITS+1
@OLDKEY  DS    AL1
IEFAB426 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
IEFAB426 CSECT
         DS   0H
A426PTCH DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFAB426 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
VUCTR    EQU   @04
TEMPVUAD EQU   @02
SHRVUPTR EQU   @09
ERRORWD  EQU   @06
CNTENTRY EQU   @08
AFFCTR   EQU   @10
VUPTR    EQU   @02
TVUPTR   EQU   @04
SRCHVUAD EQU   @03
SRCHSIOT EQU   @05
AVUPTR   EQU   @07
INDMSIOT EQU   0
SCTUSADD EQU   INDMSIOT+20
SIOTOTUN EQU   INDMSIOT+39
SIOTBYT1 EQU   INDMSIOT+43
SIOTBYT3 EQU   INDMSIOT+46
SIOTTSTC EQU   INDMSIOT+47
SIOTBYT0 EQU   INDMSIOT+52
SIOTFUDA EQU   SIOTBYT0
SCTSDISP EQU   INDMSIOT+55
SCTSBYT1 EQU   INDMSIOT+56
SCTSBYT2 EQU   INDMSIOT+57
SCTSBYT3 EQU   INDMSIOT+58
SCTSBYT4 EQU   INDMSIOT+59
SCTUTYPE EQU   INDMSIOT+60
SIOTDEVT EQU   SCTUTYPE
SIOUBYT3 EQU   SIOTDEVT+2
SIOTALTD EQU   INDMSIOT+92
SIOTBYT2 EQU   INDMSIOT+103
SIOTRSNC EQU   INDMSIOT+130
SVOLUNAD EQU   INDMSIOT+140
SVOLUNNO EQU   INDMSIOT+168
VOLUNTAB EQU   0
VOLID    EQU   VOLUNTAB
VOLSTAT  EQU   VOLUNTAB+6
VOLSTATA EQU   VOLSTAT
VOLPUB   EQU   VOLSTATA
VOLPRV   EQU   VOLSTATA
VOLSTG   EQU   VOLSTATA
VOLNSHR  EQU   VOLSTATA
VOLDEFER EQU   VOLSTATA
VOLSTATB EQU   VOLSTAT+1
VOLMNTD  EQU   VOLSTATB
VDEVREQD EQU   VOLSTATB
VUPROCED EQU   VOLSTATB
VOLSTATC EQU   VOLSTAT+2
VOLCOREQ EQU   VOLSTATC
VOLDAREQ EQU   VOLSTATC
VOLGRREQ EQU   VOLSTATC
VOLURREQ EQU   VOLSTATC
VOLSTATD EQU   VOLSTAT+3
VOLUNTID EQU   VOLUNTAB+10
VOLSIOTP EQU   VOLUNTAB+16
ALCWA    EQU   0
CNTABLE  EQU   ALCWA+28
TOTVOLUN EQU   CNTABLE+44
LTUNITID EQU   ALCWA+76
VOLUNPTR EQU   ALCWA+80
VOLUNSZE EQU   ALCWA+84
INDICATE EQU   ALCWA+112
@NM00024 EQU   ALCWA+113
TIOTHDRP EQU   ALCWA+120
NAMES    EQU   0
ALCWAPTR EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
ALCPROCN EQU   NAMES+16
ALCSTEPN EQU   NAMES+8
ALCJOBN  EQU   NAMES
EXITPRMP EQU   ALCWA+144
CANCELP  EQU   ALCWA+140
WORK3MP  EQU   ALCWA+136
WMASK2P  EQU   ALCWA+132
WMASKPTR EQU   ALCWA+128
LGENLOCK EQU   ALCWA+124
TCBP     EQU   ALCWA+116
ALCWASID EQU   ALCWA+114
@NM00025 EQU   @NM00024
NODEVERR EQU   @NM00024
NEEDRCVY EQU   @NM00024
ALCWAREC EQU   @NM00024
WAITIGEN EQU   @NM00024
UNITRECS EQU   @NM00024
ALCWADUL EQU   INDICATE
ALCWISAM EQU   INDICATE
DSSUNIT  EQU   INDICATE
DSSTAPE  EQU   INDICATE
PRIVASUM EQU   INDICATE
INDREQU  EQU   INDICATE
INDRETRY EQU   INDICATE
INDWAIT  EQU   INDICATE
QMGRRBP  EQU   ALCWA+108
RIMTABCT EQU   ALCWA+104
RIMTABLN EQU   ALCWA+100
RIMTABP  EQU   ALCWA+96
ALGTABSZ EQU   ALCWA+92
ALGTABP  EQU   ALCWA+88
@NM00023 EQU   ALCWA+78
NUMREQS  EQU   CNTABLE+40
TOTREQS  EQU   CNTABLE+36
OTHEREQS EQU   CNTABLE+32
SUBSREQS EQU   CNTABLE+28
STRGREQS EQU   CNTABLE+24
PUBLREQS EQU   CNTABLE+20
PVTNREQS EQU   CNTABLE+16
SPECREQS EQU   CNTABLE+12
TPREQS   EQU   CNTABLE+8
VAMREQS  EQU   CNTABLE+4
DMYREQS  EQU   CNTABLE
EDTABPTR EQU   ALCWA+24
FAILRSCP EQU   ALCWA+20
IOSLUTP  EQU   ALCWA+16
JSCBPTR  EQU   ALCWA+12
SIOT1P   EQU   ALCWA+8
FMAPPTR  EQU   ALCWA+4
WASIZE   EQU   ALCWA
VUGRID   EQU   VOLUNTAB+24
VUUCBP   EQU   VOLUNTAB+20
VOLALGTP EQU   VOLUNTAB+12
VURCVYPR EQU   VOLSTATD
VUVLUNIQ EQU   VOLSTATD
VUDMUNIQ EQU   VOLSTATD
VUUNALSW EQU   VOLSTATD
VUDMNDAL EQU   VOLSTATD
VUDMNDOF EQU   VOLSTATD
VUREALOC EQU   VOLSTATD
VUMUGDON EQU   VOLSTATD
@NM00022 EQU   VOLSTATC
@NM00021 EQU   VOLSTATC
@NM00020 EQU   VOLSTATC
VOLTAREQ EQU   VOLSTATC
VUAFFWRK EQU   VOLSTATB
VUVINELG EQU   VOLSTATB
VUDADSME EQU   VOLSTATB
VUDNALOC EQU   VOLSTATB
VOLALOC  EQU   VOLSTATB
VUDADSM  EQU   VOLSTATA
VOLRESVE EQU   VOLSTATA
VOLSPEC  EQU   VOLSTATA
SIODDSNL EQU   INDMSIOT+173
SIOVDSNL EQU   INDMSIOT+172
SIOVDSNT EQU   INDMSIOT+170
SIOTVMVP EQU   INDMSIOT+164
SIOTJFX  EQU   INDMSIOT+160
SJFCBPTR EQU   INDMSIOT+156
SIOTNPTR EQU   INDMSIOT+152
SIOTETIO EQU   INDMSIOT+148
SIOTATE  EQU   INDMSIOT+144
SIOTEDLP EQU   INDMSIOT+136
SIOTEDLS EQU   INDMSIOT+132
SCTANAME EQU   INDMSIOT+122
@NM00019 EQU   INDMSIOT+108
SIOTSSNM EQU   INDMSIOT+104
SIODDQCR EQU   SIOTBYT2
SIOVDQCR EQU   SIOTBYT2
SIOTCVOL EQU   SIOTBYT2
SIOTCNEW EQU   SIOTBYT2
SIOTCALC EQU   SIOTBYT2
SIOTGALL EQU   SIOTBYT2
SIOTDSPD EQU   SIOTBYT2
SIOTDMND EQU   SIOTBYT2
SIOTOPUC EQU   INDMSIOT+99
SIOTOUTR EQU   INDMSIOT+97
SIOTOUTC EQU   INDMSIOT+96
@NM00018 EQU   INDMSIOT+93
SIOTAUNC EQU   SIOTALTD
SIOTACAT EQU   SIOTALTD
SIOTADEL EQU   SIOTALTD
SIOTAKEP EQU   SIOTALTD
SIOTNPRV EQU   SIOTALTD
SIOJCATS EQU   SIOTALTD
@NM00017 EQU   SIOTALTD
@NM00016 EQU   SIOTALTD
@NM00015 EQU   INDMSIOT+91
SIOTNDSB EQU   INDMSIOT+88
@NM00014 EQU   INDMSIOT+84
SIOTDPCD EQU   INDMSIOT+82
@NM00013 EQU   INDMSIOT+81
SCTOUTPN EQU   INDMSIOT+80
SCTOUTNO EQU   INDMSIOT+76
SCTOUTNM EQU   INDMSIOT+68
SIOUCBAD EQU   SCTUTYPE+5
SIOUCNVT EQU   SCTUTYPE+4
SIOUBYT4 EQU   SIOTDEVT+3
@NM00012 EQU   SIOUBYT3
SIO3UREC EQU   SIOUBYT3
SIO3DISP EQU   SIOUBYT3
SIO3DACC EQU   SIOUBYT3
SIO3COMM EQU   SIOUBYT3
SIO3TAPE EQU   SIOUBYT3
SIOUBYT2 EQU   SIOTDEVT+1
SIOUBYT1 EQU   SIOTDEVT
SIOTOMN  EQU   SCTSBYT4
SIOTIPDI EQU   SCTSBYT4
SIOTVAFF EQU   SCTSBYT4
SIOTSTEP EQU   SCTSBYT4
SIOTASCI EQU   SCTSBYT4
@NM00011 EQU   SCTSBYT4
SIOTGDGA EQU   SCTSBYT4
SCTSGDGS EQU   SCTSBYT4
SCTSOLD  EQU   SCTSBYT3
SCTSMOD  EQU   SCTSBYT3
SCTSNEW  EQU   SCTSBYT3
SCTSYSOU EQU   SCTSBYT3
SCTVREF  EQU   SCTSBYT3
@NM00010 EQU   SCTSBYT3
SCTSYSNE EQU   SCTSBYT3
SCTDSNRF EQU   SCTSBYT3
SCTRECVD EQU   SCTSBYT2
SCTDEFER EQU   SCTSBYT2
SCTLABEL EQU   SCTSBYT2
SCTUNLBD EQU   SCTSBYT2
SCTJOBLB EQU   SCTSBYT2
SCTVOLAF EQU   SCTSBYT2
SIOTCATL EQU   SCTSBYT2
SIOCLUNL EQU   SCTSBYT2
SIOTJSCT EQU   SCTSBYT1
SCTUNAFF EQU   SCTSBYT1
SCTPARLM EQU   SCTSBYT1
SIOTQDSN EQU   SCTSBYT1
SIOTGDSN EQU   SCTSBYT1
SIOTCCAT EQU   SCTSBYT1
SCTSYSIN EQU   SCTSBYT1
SCTDUMMY EQU   SCTSBYT1
SIOTUNCT EQU   SCTSDISP
SIOTCTLG EQU   SCTSDISP
SIOTDLET EQU   SCTSDISP
SIOTKEEP EQU   SCTSDISP
SIOTPASS EQU   SCTSDISP
SIOTPRIV EQU   SCTSDISP
S3400DSP EQU   SCTSDISP
@NM00009 EQU   SCTSDISP
SIOTVLCT EQU   INDMSIOT+54
SCTNMBUT EQU   INDMSIOT+53
SIOTRTRY EQU   SIOTBYT0
SIOTPUPV EQU   SIOTBYT0
SIOTNOPV EQU   SIOTBYT0
SIOTGIGN EQU   SIOTBYT0
SPVTAMSG EQU   SIOTBYT0
SIOTDYAL EQU   SIOTBYT0
SIOTSSDS EQU   SIOTBYT0
SIOTGIID EQU   INDMSIOT+50
SCTVOLCT EQU   INDMSIOT+49
SCTSPOOL EQU   INDMSIOT+48
SIOTQNAM EQU   SIOTTSTC
@NM00008 EQU   SIOTTSTC
SIOTTERM EQU   SIOTTSTC
@NM00007 EQU   SIOTTSTC
@NM00006 EQU   SIOTBYT3
SIOTJES3 EQU   SIOTBYT3
SIOCDEVT EQU   SIOTBYT3
SIOALIAS EQU   SIOTBYT3
SCTDDINO EQU   INDMSIOT+44
SIOTDDNT EQU   SIOTBYT1
SIOTALCD EQU   SIOTBYT1
SIODADSM EQU   SIOTBYT1
SIOTDADR EQU   SIOTBYT1
SIODUNAL EQU   SIOTBYT1
SIOVAMDS EQU   SIOTBYT1
SIOTHOLD EQU   SIOTBYT1
SIOTOCKP EQU   SIOTBYT1
SIOPSCNT EQU   INDMSIOT+42
SIOTREFN EQU   INDMSIOT+40
SIOTVRSB EQU   INDMSIOT+36
@NM00005 EQU   INDMSIOT+35
SCTPJFCB EQU   INDMSIOT+32
@NM00004 EQU   INDMSIOT+31
SCTPSIOT EQU   INDMSIOT+28
SIOTAFID EQU   INDMSIOT+26
@NM00003 EQU   INDMSIOT+24
SIODSNTE EQU   INDMSIOT+22
SIOTUNAF EQU   SCTUSADD
SIOTDEST EQU   INDMSIOT+12
SCTDDNAM EQU   INDMSIOT+4
SIOTTYPE EQU   INDMSIOT+3
SIOTDSKA EQU   INDMSIOT
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00033 EQU   @RC00031
@RF00138 EQU   @RC00133
@RC00158 EQU   @EL00002
@ENDDATA EQU   *
         END   IEFAB426,(C'PLS0025',0603,74166)
