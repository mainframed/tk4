         TITLE 'IEFAB435 - UPDATE UCB                                  *
                        '
IEFAB435 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(24)                                          01S0001
         DC    C'IEFAB435 77298  UZ15118 '                      01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @10,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@10                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         GSPACE   R,LV=(0)
         LR    @09,@01                                          01S0001
         USING @DATD,@09                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         LM    @00,@01,20(@13)                                  01S0001
         ST    @09,8(,@13)                                      01S0001
         LR    @13,@09                                          01S0001
         MVC   @PC00001(20),0(@01)                              01S0001
*VFUNCMAP = BITSOFF;                   /*INIT FUNCTION MAP TO 0'S    */
         MVI   VFUNCMAP,B'00000000'                             01S0080
*MOUNTSW = OFF;                        /*INIT MOUNT REQD SWITCH      */
         NI    MOUNTSW,B'01111111'                              01S0081
*NOMNTSW = OFF;                        /*INIT NO MOUNT SW    @Y30QPPB*/
         NI    NOMNTSW,B'01111111'                              01S0082
*NOCALL = OFF;                         /*INIT VM&V NOT NEEDED SWITCH */
         NI    NOCALL,B'01111111'                               01S0083
*RETCODE = NOERROR;                    /*INITIALIZE RETRUN CODE TO 0 */
         SLR   RETCODE,RETCODE                                  01S0084
*UCBPTR = UCBAD;                       /*POINT TO INPUT UCB          */
         L     @12,@PC00001                                     01S0085
         SLR   @11,@11                                          01S0085
         ICM   @11,3,UCBAD(@12)                                 01S0085
         ST    @11,UCBPTR                                       01S0085
*JFCBPTR = SJFCBPTR;                   /*PTR TO JFCB                 */
         L     @15,@PC00001+4                                   01S0086
         L     @01,SIOTPTR(,@15)                                01S0086
         L     JFCBPTR,SJFCBPTR(,@01)                           01S0086
*IF VALIDCHK = ON THEN                 /*VALIDITY CHECK REQUESTED    */
         TM    VALIDCHK(@12),B'10000000'                        01S0087
         BNO   @RF00087                                         01S0087
*  DO;                                                          01S0088
*    CALL IEFAB441(FUNC441,ALCWAPTR,VUPTR,0,UCBTYP);            01S0089
         LA    @12,FUNC441                                      01S0089
         ST    @12,@AL00001                                     01S0089
         L     @12,@PC00001+8                                   01S0089
         ST    @12,@AL00001+4                                   01S0089
         L     @12,@PC00001+12                                  01S0089
         ST    @12,@AL00001+8                                   01S0089
         LA    @12,@CF00188                                     01S0089
         ST    @12,@AL00001+12                                  01S0089
         LA    @12,UCBTYP(,@11)                                 01S0089
         ST    @12,@AL00001+16                                  01S0089
         L     @15,@CV02522                                     01S0089
         LA    @01,@AL00001                                     01S0089
         BALR  @14,@15                                          01S0089
*    RETCODE = REG15;                  /*SAVE THE RETURN CODE        */
         LR    RETCODE,REG15                                    01S0090
*    IF RETCODE = NOERROR & VUVINELG = ON THEN                  01S0091
         LTR   RETCODE,RETCODE                                  01S0091
         BNZ   @RF00091                                         01S0091
         L     @12,@PC00001+12                                  01S0091
         L     @12,VUPTR(,@12)                                  01S0091
         TM    VUVINELG(@12),B'00000010'                        01S0091
         BNO   @RF00091                                         01S0091
*      RETCODE = RECOV;                /*INDIC VOL ON UNLOCKED GEN   */
         LA    RETCODE,24                                       01S0092
*    IF RETCODE = NOERROR & INDRETRY = ON THEN                  01S0093
@RF00091 LTR   RETCODE,RETCODE                                  01S0093
         BNZ   @RF00093                                         01S0093
         L     @12,@PC00001+8                                   01S0093
         L     @12,ALCWAPTR(,@12)                               01S0093
         TM    INDRETRY(@12),B'01000000'                        01S0093
         BNO   @RF00093                                         01S0093
*      RETCODE = MTDINELG;             /*INDIC VOL ON UNLOCKED GROUP */
         LA    RETCODE,20                                       01S0094
*    IF RETCODE = NOERROR & VUVLUNIQ = ON                       01S0095
*      & VUDNALOC = ON THEN            /*VOL ALLOCATED ?             */
@RF00093 LTR   RETCODE,RETCODE                                  01S0095
         BNZ   @RF00095                                         01S0095
         L     @12,@PC00001+12                                  01S0095
         L     @12,VUPTR(,@12)                                  01S0095
         TM    VUVLUNIQ(@12),B'00000010'                        01S0095
         BNO   @RF00095                                         01S0095
         TM    VUDNALOC(@12),B'00001000'                        01S0095
         BNO   @RF00095                                         01S0095
*      RETCODE = ERRCD28;              /*YES, INDICATE               */
         LA    RETCODE,28                                       01S0096
*  END;                                                         01S0097
@RF00095 DS    0H                                               01S0098
*IF RETCODE = NOERROR THEN             /*VALIDITY CHECK OK           */
@RF00087 LTR   RETCODE,RETCODE                                  01S0098
         BNZ   @RF00098                                         01S0098
*  IF (UCB3DACC = ON ×                 /*DA                          */
*      UCB3TAPE = ON) THEN             /*OR TAPE                     */
         L     @12,UCBPTR                                       01S0099
         TM    UCB3DACC(@12),B'10100000'                        01S0099
         BZ    @RF00099                                         01S0099
*    DO;                                                        01S0100
*      IF VOLDEFER = OFF ×                                      01S0101
*         UCBPRES = ON THEN            /*DEFERRED MOUNT?             */
         L     @11,@PC00001+12                                  01S0101
         L     @11,VUPTR(,@11)                                  01S0101
         TM    VOLDEFER(@11),B'00000001'                        01S0101
         BZ    @RT00101                                         01S0101
         TM    UCBPRES(@12),B'00000100'                         01S0101
         BNO   @RF00101                                         01S0101
@RT00101 DS    0H                                               01S0102
*        IF VOLMNTD = ON ×                                      01S0102
*           VOLDEFER = ON THEN         /*VOL MUST BE MOUNTED         */
         L     @12,@PC00001+12                                  01S0102
         L     @12,VUPTR(,@12)                                  01S0102
         TM    VOLMNTD(@12),B'01000000'                         01S0102
         BO    @RT00102                                         01S0102
         TM    VOLDEFER(@12),B'00000001'                        01S0102
         BNO   @RF00102                                         01S0102
@RT00102 DS    0H                                               01S0103
*          IF UCB3DACC = OFF ×         /*NOT DA                      */
*             (UCB3DACC = ON &         /*DA                          */
*             INVOLID(1) ^= NONSPDA &  /*NOT NON-SPECIFIC DA         */
*             INVOLID(1) ^= NONSPTAP) THEN                      01S0103
         L     @12,UCBPTR                                       01S0103
         TM    UCB3DACC(@12),B'00100000'                        01S0103
         BZ    @RT00103                                         01S0103
         TM    UCB3DACC(@12),B'00100000'                        01S0103
         BNO   @RF00103                                         01S0103
         L     @12,@PC00001                                     01S0103
         CLI   INVOLID(@12),X'FE'                               01S0103
         BE    @RF00103                                         01S0103
         CLI   INVOLID(@12),X'FF'                               01S0103
         BE    @RF00103                                         01S0103
@RT00103 DS    0H                                               01S0104
*            IF INVOLID ^= UCBVOLI THEN  /*NO, VOLSER ALREADY IN UCB?*/
         L     @12,@PC00001                                     01S0104
         L     @11,UCBPTR                                       01S0104
         CLC   INVOLID(6,@12),UCBVOLI(@11)                      01S0104
         BE    @RF00104                                         01S0104
*              DO;                       /*NO                        */
*                MOUNTSW = ON;           /*INDICATE MNT FUNCTION REQD*/
         OI    MOUNTSW,B'10000000'                              01S0106
*                IF (INVOLID(1) = NONSPTAP × /*NON-SPECIFIC TAPE REQ */
*                   INVOLID(1) = NONSPDA) &                     01S0107
*                   VOLPRV = ON THEN   /*PRIVATE VOLUME              */
         CLI   INVOLID(@12),X'FF'                               01S0107
         BE    @GL00010                                         01S0107
         CLI   INVOLID(@12),X'FE'                               01S0107
         BNE   @RF00107                                         01S0107
@GL00010 L     @12,@PC00001+12                                  01S0107
         L     @12,VUPTR(,@12)                                  01S0107
         TM    VOLPRV(@12),B'01000000'                          01S0107
         BNO   @RF00107                                         01S0107
*                  NONSPEPV = ON;      /*INDICATE NON=SPEC PRIVATE   */
         OI    NONSPEPV,B'00010000'                             01S0108
*                CALL VMVSETUP;          /*DETERMINE VM&V FUNCTIONS  */
@RF00107 BAL   @14,VMVSETUP                                     01S0109
*              END;                                             01S0110
*            ELSE                        /*VOLSER ALREADY IN UCB     */
*              DO;                                              01S0111
         B     @RC00104                                         01S0111
@RF00104 DS    0H                                               01S0112
*                IF UCBMOUNT = ON THEN   /*MOUNT REQUIRED            */
         L     @12,UCBPTR                                       01S0112
         TM    UCBMOUNT(@12),B'10000000'                        01S0112
         BNO   @RF00112                                         01S0112
*                  IF UCBALOC = ON THEN  /*UCB MARKED ALLOCATED      */
         TM    UCBALOC(@12),B'00001000'                         01S0113
         BNO   @RF00113                                         01S0113
*                    DO;                                        01S0114
*                      MOUNT = ON;       /*INDICATE MOUNT FUNCTION   */
         OI    MOUNT,B'01000000'                                01S0115
*                      CALL VMVINT;      /*VM&V INTERFACE ROUTINE    */
         BAL   @14,VMVINT                                       01S0116
*                    END;                                       01S0117
*                  ELSE                  /*UCB NOT ALLOCATED         */
*                    IF INVOLID(1) ^= NONSPTAP × /*NOT SCRATCH TAPE OR
*                                                            @ZA25770*/
*                       UCBMOUNT = ON THEN     /*MOUNT PENDING  01S0118
*                                                            @ZA25770*/
         B     @RC00113                                         01S0118
@RF00113 L     @12,@PC00001                                     01S0118
         CLI   INVOLID(@12),X'FF'                               01S0118
         BNE   @RT00118                                         01S0118
         L     @12,UCBPTR                                       01S0118
         TM    UCBMOUNT(@12),B'10000000'                        01S0118
         BNO   @RF00118                                         01S0118
@RT00118 DS    0H                                               01S0119
*                      DO;                                      01S0119
*                        MOUNT = ON;       /*INDICATE MOUNT FUNCTION */
         OI    MOUNT,B'01000000'                                01S0120
*                        CALL VMVINT;      /*VM&V INTERFACE RTN      */
         BAL   @14,VMVINT                                       01S0121
*                      END;                                     01S0122
*              END;                                             01S0123
*          ELSE                        /*NON-SPECIFIC DA             */
*            DO;                                                01S0124
         B     @RC00103                                         01S0124
@RF00103 DS    0H                                               01S0125
*              IF UCBVOLI ^= NOUCBVOL THEN  /*VOL MNTD ON UNIT       */
         L     @12,UCBPTR                                       01S0125
         CLC   UCBVOLI(6,@12),NOUCBVOL                          01S0125
         BE    @RF00125                                         01S0125
*                IF UCBJES3 = ON &     /*JES3 MANAGED UNIT & @Y30QPPB*/
*                   (VOLPRV = ON ×     /*PRIVATE OR          @Y30QPPB*/
*                    VOLNSHR = ON) THEN /*NONSHAREABLE       @Y30QPPB*/
         TM    UCBJES3(@12),B'01000000'                         01S0126
         BNO   @RF00126                                         01S0126
         L     @12,@PC00001+12                                  01S0126
         L     @12,VUPTR(,@12)                                  01S0126
         TM    VOLPRV(@12),B'01001000'                          01S0126
         BZ    @RF00126                                         01S0126
*                  NOMNTSW = ON;       /*USE VOL ALREADY UP  @Y30QPPB*/
         OI    NOMNTSW,B'10000000'                              01S0127
*                ELSE                  /*NOT JES PVT OR NSHR @Y30QPPB*/
*                  DO;                 /*                    @Y30QPPB*/
         B     @RC00126                                         01S0128
@RF00126 DS    0H                                               01S0129
*                    IF INDWAIT = OFF × /*THERE HAS BEEN NO "WAIT
*                                         HOLDING RESOURCES  @YM05462*/
*                       UCBBPUB = OFF ×/*OR IF THERE HAS, THE MOUNTED
*                                        VOL IS NOT PUBLIC   @YM05462*/
*                       VOLPRV = ON ×  /*OR THE REQUEST IS PRIVATE
*                                                            @YM05462*/
*                       VOLNSHR = ON THEN /*OR THE REQUEST IS NON-
*                                           SHAREABLE        @YM05462*/
         L     @12,@PC00001+8                                   01S0129
         L     @12,ALCWAPTR(,@12)                               01S0129
         TM    INDWAIT(@12),B'10000000'                         01S0129
         BZ    @RT00129                                         01S0129
         L     @12,UCBPTR                                       01S0129
         TM    UCBBPUB(@12),B'00001000'                         01S0129
         BZ    @RT00129                                         01S0129
         L     @12,@PC00001+12                                  01S0129
         L     @12,VUPTR(,@12)                                  01S0129
         TM    VOLPRV(@12),B'01001000'                          01S0129
         BZ    @RF00129                                         01S0129
@RT00129 DS    0H                                               01S0130
*                      UNLOAD = ON;    /*INDICATE UNLOAD MUST BE DONE*/
         OI    UNLOAD,B'10000000'                               01S0130
*                    ELSE;             /*NO UNLOAD NEEDED    @YM05462*/
@RF00129 DS    0H                                               01S0132
*                  END;                /*                    @Y30QPPB*/
*              ELSE;                   /*VOL NOT MOUNTED ON UNIT     */
@RF00125 DS    0H                                               01S0134
*              IF NOMNTSW = OFF THEN   /*UNLOAD REQUIRED     @Y30QPPB*/
@RC00125 TM    NOMNTSW,B'10000000'                              01S0134
         BNZ   @RF00134                                         01S0134
*                DO;                   /*YES, CALL VM&V      @Y30QPPB*/
*                  NONSPECF = ON;      /*INDICATE NON-SPECIFIC DA    */
         OI    NONSPECF,B'00000100'                             01S0136
*                  IF VOLPRV = ON THEN /*PRIVATE VOL                 */
         L     @12,@PC00001+12                                  01S0137
         L     @12,VUPTR(,@12)                                  01S0137
         TM    VOLPRV(@12),B'01000000'                          01S0137
         BNO   @RF00137                                         01S0137
*                    NONSPEPV = ON;    /*INDICATE NON-SPECIFIC PRIV  */
         OI    NONSPEPV,B'00010000'                             01S0138
*                  VERLABEL = ON;      /*INDICATE TO VERIFY LABEL    */
@RF00137 DS    0H                                               01S0140
*                  MOUNT = ON;         /*INDICATE MOUNT FUNCTION     */
         OI    VERLABEL,B'01001000'                             01S0140
*                  CALL VMVINT;        /*VM&V INTERFACE ROUTINE      */
         BAL   @14,VMVINT                                       01S0141
*                END;                  /*END CALL VM&V       @Y30QPPB*/
*            END;                                               01S0143
*        ELSE;                         /*VOL NEED NOT BE MOUNTED     */
@RF00102 DS    0H                                               01S0145
*      ELSE                            /*DEFERRED MOUNT              */
*        DO;                                                    01S0145
         B     @RC00101                                         01S0145
@RF00101 DS    0H                                               01S0146
*          IF INVOLID ^= UCBVOLI THEN  /*VOL NOT YET MOUNTED         */
         L     @12,@PC00001                                     01S0146
         L     @11,UCBPTR                                       01S0146
         CLC   INVOLID(6,@12),UCBVOLI(@11)                      01S0146
         BE    @RF00146                                         01S0146
*            DO;                                                01S0147
*              CALL VMVSETUP;          /*DETERMINE VM&V FUNCTIONS    */
         BAL   @14,VMVSETUP                                     01S0148
*            END;                                               01S0149
*        END;                                                   01S0150
*    END;                                                       01S0151
*  ELSE;                               /*NOT TAPE OR DA              */
@RF00099 DS    0H                                               01S0153
*  IF RETCODE = NOERROR THEN           /*NO ERRORS                   */
@RC00099 DS    0H                                               01S0153
@RF00098 SLR   @12,@12                                          01S0153
         CR    RETCODE,@12                                      01S0153
         BNE   @RF00153                                         01S0153
*    DO;                                                        01S0154
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - UPDUCB                                            */
*/*                                                                  */
*/* DESCRIPTIVE NAME - UPDATE UCB                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS SEGMENT UPDATES THE UCB TO INDICATE ITS ALLOCATION. IT    */
*/*   TURNS ON THE ALLOCATED BIT. IT UPDATES THE USE ATTRIBUTES      */
*/*   AND USE COUNT IF THESE FUNCTIONS WERE REQUESTED. IT ALSO       */
*/*   FILLS IN THE VOLUME SERIAL AND SETS THE MOUNT NOT VERIFIED BIT */
*/*   AND SETS THE MOUNT MESSAGE PENDING INDICATOR           @ZA15006*/
*/*   (UCBMMSGP).                                            @ZA15006*/
*/*   NOTE: IT ALSO DOES A FINAL VALIDITY CHECK (IF REQUIRED)@YM07608*/
*/*   TO SEE IF A REQUIRED VOLUME IS MOUNTED ON OTHER THAN   @YM07608*/
*/*   THE ALLOCATED UNIT.                                    @YM07608*/
*/*   IF JES3 HAS MOUNTED A TAPE VOLUME FOR A NONSPECIFIC    @ZA03870*/
*/*   REQUEST THE VOLUME SERIAL FIELD OF THE UCB IS UPDATED  @ZA03870*/
*/*   AND THE MOUNT PENDING BIT IN THE UCB IS TURNED ON TO   @ZA03870*/
*/*   SIMULATE A MOUNT EVEN THOUGH A MOUNT REQUEST BLOCK HAS @ZA03870*/
*/*   NOT BEEN BUILT. THIS IS DONE TO PRESENT THE SAME INTER-@ZA03870*/
*/*   FACE TO OPEN AS IF ALLOCATION HAD ISSUED A MOUNT MESS- @ZA03870*/
*/*   AGE FOR THE REQUEST.                                   @ZA03870*/
*/*                                                                  */
*/* ENTRY - INLINE SUBROUTINE OF IEFAB435                            */
*/*                                                                  */
*/*   PURPOSE - TO UPDATE THE UCB AND POSSIBLY VALIDITY CHECK        */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     UCBPTR - PTR TO UCB TO BE UPDATED                            */
*/*     VUPTR - PTR TO VU ENTRY                                      */
*/*     UCBPARML - FOR THE FOLLOWING:                                */
*/*       INPUT VOLUME SERIAL                                        */
*/*       FLAGS INDICATING IF USE ATTRIBUTES AND USE COUNT ARE       */
*/*        TO BE UPDATED                                             */
*/*       FLAG INDICATING IF VOL CONTAINS PASSED DATA SET            */
*/*                                                                  */
*/* EXIT-NORMAL - RETURN TO CALLER                                   */
*/*                                                                  */
*/*   CONDITION - UCB UPDATED                                        */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*       UCBALOC - SET ON                                           */
*/*       USE ATTRIBUTES - SET IF REQUESTED                          */
*/*       UCBUSER - INCREMENTED IF REQUESTED                         */
*/*       UCBNSHAR - SET ON IF NON-SHAREABLE                         */
*/*       UCBVOLI - FILLED IN WITH VOLSER                            */
*/*       UCBMOUNT - SET ON TO INDICATE MOUNT NOT VERIFIED           */
*/*       UCBMMSGP - SET ON TO INDICATE MOUNT MSG HAS NOT    @ZA15006*/
*/*                  BEEN ISSUED                             @ZA15006*/
*/*                                                                  */
*/*     RETURN CODE - 0                                              */
*/*                                                                  */
*/* EXIT ERROR - RETURN TO CALLER                            @YM07608*/
*/*                                                          @YM07608*/
*/*   CONDITION - RETRY NEEDED                               @YM07608*/
*/*                                                          @YM07608*/
*/*     OUTPUT -                                             @YM07608*/
*/*       INDRETRY - RETRY NEEDED(IN ALCWA)                  @YM07608*/
*/*       SIOTRTRY - RETRY THIS REQ                          @YM07608*/
*/*                                                          @YM07608*/
*/*     RETURN CODE - 20                                     @YM07608*/
*/*                                                          @YM07608*/
*/* EXIT - ERROR - RETURN TO CALLER                          @YM07608*/
*/*   CONDITION - VOLUME AND UNIT TYPE DON'T MATCH           @YM07608*/
*/*     OUTPUT -                                             @YM07608*/
*/*       SIOTRSNC - 20                                      @YM07608*/
*/*     RETURN CODE - 4                                      @YM07608*/
*/*                                                          @YM07608*/
*/********************************************************************/
*FRRPARMS = FRRPARMS && FRRPARMS;      /*CLEAR FRR PARM AREA         */
         XC    FRRPARMS(92),FRRPARMS                            02S0155
*EXITP = EXITPRMP;                     /*ESTAE PARM PTR TO LIST      */
         L     @11,@PC00001+8                                   02S0156
         L     @11,ALCWAPTR(,@11)                               02S0156
         MVC   EXITP(4),EXITPRMP(@11)                           02S0156
* DO; /*MODESET  KEYADDR(ZERO)*/                                02S0157
*   SPKA (ZERO); /*SET PSW KEY*/                                02S0158
         SPKA  0(@12)                                           02S0158
* END; /*MODESET  KEYADDR(ZERO)*/                               02S0159
* DO; /* SETLOCK (OBTAIN) MODE(UNCOND) TYPE(LOCAL) REGS(USE) RELATED(UC
*,IEFAB435(UPDUCB)) */                                          02S0160
*   RFY (GPR11P,GPR12P,GPR13P,GPR14P) RSTD;                     02S0161
*   RFY (GPR15P,GPR00P,GPR01P) RSTD;                            02S0162
*   GPR15P = GPR11P; /* SAVE REG. 11 IN REG. 15. */             02S0163
         LR    GPR15P,GPR11P                                    02S0163
*   GPR00P = GPR12P; /* SAVE REG. 12 IN REG. 0. */              02S0164
         LR    GPR00P,GPR12P                                    02S0164
*   GPR01P = GPR13P; /* SAVE REG. 13 IN REG. 1. */              02S0165
         LR    GPR01P,GPR13P                                    02S0165
*   GPR13P = PSALITA; /* ADDRESS OF LOCK INTERFACE TABLE. */    02S0166
         L     GPR13P,PSALITA                                   02S0166
*   GEN(LM GPR11P,GPR13P,576(GPR13P)); /* LOAD LOCKWORD, CLHT AND ENTRY
*ADRS. */                                                       02S0167
         LM GPR11P,GPR13P,576(GPR13P)
*   GEN(BALR GPR14P,GPR13P); /* BALR TO SETLOCK RTN. */         02S0168
         BALR GPR14P,GPR13P
*   GPR11P = GPR15P; /* RESTORE REG. 11. */                     02S0169
         LR    GPR11P,GPR15P                                    02S0169
*   GPR15P = GPR13P; /* SAVE RETURN CODE. */                    02S0170
         LR    GPR15P,GPR13P                                    02S0170
*   GPR12P = GPR00P; /* RESTORE REG. 12 */                      02S0171
         LR    GPR12P,GPR00P                                    02S0171
*   GPR13P = GPR01P; /* RESTORE REG. 13. */                     02S0172
         LR    GPR13P,GPR01P                                    02S0172
*   RFY(GPR15P,GPR00P,GPR01P) UNRSTD;                           02S0173
*   RFY (GPR11P,GPR12P,GPR13P,GPR14P) UNRSTD;                   02S0174
* END; /* SETLOCK (OBTAIN) MODE(UNCOND) TYPE(LOCAL) REGS(USE) RELATED(U
*B,IEFAB435(UPDUCB)) */                                         02S0175
* DO; /* SETLOCK (OBTAIN) MODE(UNCOND) TYPE(CMS) REGS(USE) RELATED(UCB,
*EFAB435(UPDUCB)) */                                            02S0176
*   RFY (GPR11P,GPR12P,GPR13P,GPR14P) RSTD;                     02S0177
*   RFY (GPR15P,GPR00P,GPR01P) RSTD;                            02S0178
*   GPR15P = GPR11P; /* SAVE REG. 11 IN REG. 15. */             02S0179
         LR    GPR15P,GPR11P                                    02S0179
*   GPR00P = GPR12P; /* SAVE REG. 12 IN REG. 0. */              02S0180
         LR    GPR00P,GPR12P                                    02S0180
*   GPR01P = GPR13P; /* SAVE REG. 13 IN REG. 1. */              02S0181
         LR    GPR01P,GPR13P                                    02S0181
*   GPR13P = PSALITA; /* ADDRESS OF LOCK INTERFACE TABLE. */    02S0182
         L     GPR13P,PSALITA                                   02S0182
*   GEN(LM GPR11P,GPR13P,540(GPR13P)); /* LOAD LOCKWORD, CLHT AND ENTRY
*ADRS. */                                                       02S0183
         LM GPR11P,GPR13P,540(GPR13P)
*   GEN(BALR GPR14P,GPR13P); /* BALR TO SETLOCK RTN. */         02S0184
         BALR GPR14P,GPR13P
*   GPR11P = GPR15P; /* RESTORE REG. 11. */                     02S0185
         LR    GPR11P,GPR15P                                    02S0185
*   GPR15P = GPR13P; /* SAVE RETURN CODE. */                    02S0186
         LR    GPR15P,GPR13P                                    02S0186
*   GPR12P = GPR00P; /* RESTORE REG. 12 */                      02S0187
         LR    GPR12P,GPR00P                                    02S0187
*   GPR13P = GPR01P; /* RESTORE REG. 13. */                     02S0188
         LR    GPR13P,GPR01P                                    02S0188
*   RFY(GPR15P,GPR00P,GPR01P) UNRSTD;                           02S0189
*   RFY (GPR11P,GPR12P,GPR13P,GPR14P) UNRSTD;                   02S0190
* END; /* SETLOCK (OBTAIN) MODE(UNCOND) TYPE(CMS) REGS(USE) RELATED(UCB
*IEFAB435(UPDUCB)) */                                           02S0191
*RFY (REG2,REG3,REG4) RSTD;                                     02S0192
*REG2 = ADDR(IEFAB4E6);                /*ADDR OF FRR RTN             */
         L     REG2,@CV00093                                    02S0193
*REG3 = ADDR(FRRPARMS);                /*ADDR OF FRR PARM LIST       */
         LA    REG3,FRRPARMS                                    02S0194
*GEN;                                                           02S0195
  SETFRR A,FRRAD=(2),PARMAD=(3),WRKREGS=(3,4)
*FRRUSERP = REG3;                      /*ADDR OF FRR SUPPLIED PARMS  */
         ST    REG3,FRRUSERP                                    02S0196
*RFY (REG2,REG3,REG4) UNRSTD;                                   02S0197
*FRRPARMP = ADDR(FRRPARMS);            /*PTR TO USER FRR PARMS       */
         L     @12,FRRUSERP                                     02S0198
         LA    @11,FRRPARMS                                     02S0198
         ST    @11,FRRPARMP(,@12)                               02S0198
*IF VALIDCHK =ON THEN                  /* MUST DO FINAL VALIDITY
*                                         CHECK              @YM07608*/
         L     @12,@PC00001                                     02S0199
         TM    VALIDCHK(@12),B'10000000'                        02S0199
         BNO   @RF00199                                         02S0199
*  DO;                                                          02S0200
*    FOUNDSW =OFF;                     /* ASSUME VOL NOT MNTD@YM07608*/
         NI    FOUNDSW,B'01111111'                              02S0201
*    SAVUCBP=UCBPTR;                   /* SAVE ALLOC'D UCB   @YM07608*/
         L     SAVUCBP,UCBPTR                                   02S0202
*/* THIS SPEC ADDED FOR PTM 07608                            @YM07608*/
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - FINDVOL                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - CHECK FOR DUPLICATE VOLUME SERIAL             */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS ROUTINE IS INVOKED TO DO A FINAL VALIDITY CHECK           */
*/*   WHEN A SPECIFIC VOLUME SERIAL NUMBER MUST BE PLACED IN A       */
*/*   UCB. THE VALIDITY CHECK HAS BEEN DONE ONCE BY IEFAB441,        */
*/*   BUT THIS IS NOW DONE AGAIN WHILE HOLDING THE LOCAL AND         */
*/*   CMS LOCKS TO PREVENT DUPLICATE VOLIDS FROM APPEARING. THIS     */
*/*   PROCESSING IS SERIALIZED WITH SIMILAR PROCESSING IN            */
*/*   IEFAB473 AND IEFAB49B.                                         */
*/*                                                                  */
*/*   OPERATION - DOCUMENTED BY CODE                                 */
*/*                                                                  */
*/* ENTRY - IN-LINE SUBROUTINE                                       */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*    FOUNDSW = OFF                                                 */
*/*    SAVUCBP - ADDRESS OF UCB TO BE ALLOCATED                      */
*/*                                                                  */
*/* EXIT - NORMAL - RETURN TO CALLER                                 */
*/*                                                                  */
*/*   CONDITION - VOLUME NOT MOUNTED                                 */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*       FOUNDSW = OFF                                              */
*/*     RETURN CODE - NONE                                           */
*/*                                                                  */
*/*   CONDITION - VOLUME FOUND                                       */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*       FOUNDSW = ON                                               */
*/*       UCBPTR = ADDRESS OF UCB WITH VOLUME MOUNTED                */
*/*                                                                  */
*/*     RETURN CODE - NONE                                           */
*/*                                                                  */
*/********************************************************************/
*/* THIS SEGMENT ADDED FOR PTM 07608                         @YM07608*/
*DO LUTNO=ONE BY ONE WHILE(IOSLUT(LUTNO)^=ENDINDIC & FOUNDSW=OFF);
         LA    LUTNO,1                                          03S0203
         B     @DE00203                                         03S0203
@DL00203 DS    0H                                               03S0204
*  UCBPTR=IOSLUT(LUTNO);               /* GET UCBPTR                 */
         LR    @12,LUTNO                                        03S0204
         ALR   @12,@12                                          03S0204
         L     @11,@PC00001+8                                   03S0204
         L     @11,ALCWAPTR(,@11)                               03S0204
         L     @11,IOSLUTP(,@11)                                03S0204
         ALR   @11,@12                                          03S0204
         BCTR  @11,0                                            03S0204
         BCTR  @11,0                                            03S0204
         SLR   @12,@12                                          03S0204
         ICM   @12,3,IOSLUT(@11)                                03S0204
         ST    @12,UCBPTR                                       03S0204
*  IF UCBPTR ^= ZERO &                 /* VALID UCB                  */
*     UCBPTR ^= SAVUCBP &              /* NOT INPUT                  */
*    (UCB3DACC = ON ×                  /* D.A. OR                    */
*     UCB3TAPE = ON) THEN              /* TAPE                       */
         LTR   @12,@12                                          03S0205
         BZ    @RF00205                                         03S0205
         CR    @12,SAVUCBP                                      03S0205
         BE    @RF00205                                         03S0205
         TM    UCB3DACC(@12),B'10100000'                        03S0205
         BZ    @RF00205                                         03S0205
*    DO;                               /* COMPARE VOLID              */
*      IF INVOLID = UCBVOLI THEN       /* MATCH                      */
         L     @11,@PC00001                                     03S0207
         CLC   INVOLID(6,@11),UCBVOLI(@12)                      03S0207
         BNE   @RF00207                                         03S0207
*        FOUNDSW = ON;                                          03S0208
         OI    FOUNDSW,B'10000000'                              03S0208
*    END;                                                       03S0209
@RF00207 DS    0H                                               03S0210
*END;                                                           03S0210
@RF00205 AH    LUTNO,@CH00052                                   03S0210
@DE00203 LR    @12,LUTNO                                        03S0210
         ALR   @12,@12                                          03S0210
         L     @11,@PC00001+8                                   03S0210
         L     @11,ALCWAPTR(,@11)                               03S0210
         L     @11,IOSLUTP(,@11)                                03S0210
         ALR   @11,@12                                          03S0210
         BCTR  @11,0                                            03S0210
         BCTR  @11,0                                            03S0210
         CLC   IOSLUT(2,@11),ENDINDIC                           03S0210
         BE    @DC00203                                         03S0210
         TM    FOUNDSW,B'10000000'                              03S0210
         BZ    @DL00203                                         03S0210
@DC00203 DS    0H                                               03S0211
*    IF FOUNDSW=ON THEN                /* VOLUME MOUNTED     @YM07608*/
         TM    FOUNDSW,B'10000000'                              02S0211
         BNO   @RF00211                                         02S0211
*      DO;                             /* MUST CK DEVICE TYPE@YM07608*/
*        ALCDTYPE = SAVUCBP -> UCBTYP; /* ALLOC'D DEV. TYPE  @YM07608*/
         MVC   ALCDTYPE(4),UCBTYP(SAVUCBP)                      02S0213
*/* THIS SPEC ADDED FOR PTM 07608                            @YM07608*/
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - CHEKTYPE                                          */
*/*                                                                  */
*/* FUNCTION - THIS ROUTINE DETERMINES IF THE REQUESTED VOLUME       */
*/*   IS LOCATED ON A DEVICE TYPE WHICH IS COMPATIBLE WITH THE       */
*/*   DEVICE TYPE WHERE THE VOLUME IS TO BE ALLOCATED.               */
*/*            THE TWO DEVICE TYPES ARE COMPATIBLE IF THEY ARE       */
*/*   THE SAME (EXCEPT FOR CERTAIN OPTION BITS THAT MAY HAVE BEEN    */
*/*   SET IN THE UCB BY SOME PRIOR SYSTEM PROCESS. THESE ARE         */
*/*   BITS THAT ARE NOT FEATURES OF ALL DEVICES OF THAT TYPE,        */
*/*   OR THAT PERTAIN TO HOW THE DEVICE IS USED RATHER THAN          */
*/*   PHYSICAL CHARACTERISTICS.), OR IF THEY ARE BOTH TAPE           */
*/*   DEVICE TYPES WHICH SUPPORT AT LEAST ONE MUTUAL DENSITY.        */
*/*                                                                  */
*/*   OPERATION - DOCUMENTED BY THE CODE                             */
*/*                                                                  */
*/* ENTRY - IN-LINE SUBROUTINE                                       */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*                                                                  */
*/*     UCBPTR - PTR TO UCB WHERE VOLUME IS MOUNTED                  */
*/*     ALCDTYPE - DEVICE TYPE TO BE ALLOCATED TO THE REQUEST        */
*/*     VUPTR - VOLUNIT PTR TO REQUEST BEING PROCESSED               */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE)                              */
*/*                                                                  */
*/*   CONDITION - DEVICE TYPES ARE COMPATIBLE. RETRY NEEDED.         */
*/*                                                                  */
*/*   OUTPUT - INDRETRY (IN ALCWA) = 1                               */
*/*            SIOTRTRY (IN SIOT) = 1                                */
*/*   RETURN CODES - RETCODE = 20                                    */
*/*                                                                  */
*/* EXIT - ERROR - INLINE SUBROUTINE                                 */
*/*                                                                  */
*/*   CONDITION - DEVICE TYPES ARE INCOMPATIBLE                      */
*/*                                                                  */
*/*   OUTPUT - SIOTRSNC = 20                                         */
*/*                                                                  */
*/*   RETURN CODE - RETCODE = 4                                      */
*/*                                                                  */
*/********************************************************************/
*/* THIS SEGMENT ADDED FOR PTM 07608                         @YM07608*/
*TYPMATCH = OFF;                       /* INIT TO NO MATCH           */
         NI    TYPMATCH,B'01111111'                             03S0214
*INTYPST = ALCDTYPE;                                            03S0215
         MVC   INTYPST(4),ALCDTYPE                              03S0215
*IF INDACC = ON THEN                   /* ALLOC'D UCB IS DA          */
         TM    INDACC,B'00100000'                               03S0216
         BNO   @RF00216                                         03S0216
*  DO;                                                          03S0217
*    INTYPBT2 = INTYPBT2 & SHPOWOFF;   /* SHARED FILE AND ALTERNATE
*                                         POWER BITS OFF             */
         NI    INTYPBT2,X'DC'                                   03S0218
*    IF INTYPBT4 = DA3340 THEN         /* DEVICE IS A 3340           */
         CLI   INTYPBT4,X'0A'                                   03S0219
         BNE   @RF00219                                         03S0219
*      INTYPBT2 = INTYPBT2 & RPSMASK;  /* TURN OFF RPS BIT           */
         NI    INTYPBT2,X'EF'                                   03S0220
*  END;                                                         03S0221
@RF00219 DS    0H                                               03S0222
*IF INTAPE = ON THEN                   /* TAPE DEVICE                */
@RF00216 TM    INTAPE,B'10000000'                               03S0222
         BNO   @RF00222                                         03S0222
*  INTYPBT2 = INTYPBT2 & OPTIONS;      /* OPTIONS BITS OFF   @ZA04104*/
         NI    INTYPBT2,X'F4'                                   03S0223
*VOLTYPST = UCBTYP;                    /* DEVICE TYPE FROM FOUND UCB */
@RF00222 L     @12,UCBPTR                                       03S0224
         MVC   VOLTYPST(4),UCBTYP(@12)                          03S0224
*IF UCB3DACC = ON THEN                 /* D.A. DEVICE                */
         TM    UCB3DACC(@12),B'00100000'                        03S0225
         BNO   @RF00225                                         03S0225
*  DO;                                                          03S0226
*    VLTYPBT2 = VLTYPBT2 & SHPOWOFF;   /* SHARED FILE AND ALTERNATE
*                                         POWER BITS OFF             */
         NI    VLTYPBT2,X'DC'                                   03S0227
*    IF VLTYPBT4 = DA3340 THEN         /* 3340 DEVICE                */
         CLI   VLTYPBT4,X'0A'                                   03S0228
         BNE   @RF00228                                         03S0228
*      VLTYPBT2 = VLTYPBT2 & RPSMASK;  /* TURN OFF RPS BIT           */
         NI    VLTYPBT2,X'EF'                                   03S0229
*  END;                                                         03S0230
@RF00228 DS    0H                                               03S0231
*IF UCB3TAPE = ON THEN                 /* TAPE DEVICE                */
@RF00225 L     @12,UCBPTR                                       03S0231
         TM    UCB3TAPE(@12),B'10000000'                        03S0231
         BNO   @RF00231                                         03S0231
*  VLTYPBT2 = VLTYPBT2 & OPTIONS;      /* OPTIONS BITS OFF   @ZA04104*/
         NI    VLTYPBT2,X'F4'                                   03S0232
*IF INTYPST = VOLTYPST THEN            /* DEVICE TYPES SAME          */
@RF00231 CLC   INTYPST(4),VOLTYPST                              03S0233
         BNE   @RF00233                                         03S0233
*  TYPMATCH = ON;                      /* MATCH FOUND                */
         OI    TYPMATCH,B'10000000'                             03S0234
*ELSE                                  /* NOT SAME TYPE              */
*  DO;                                                          03S0235
         B     @RC00233                                         03S0235
@RF00233 DS    0H                                               03S0236
*    IF INTAPE = ON&UCB3TAPE = ON THEN /* BOTH UNITS TAPE            */
         TM    INTAPE,B'10000000'                               03S0236
         BNO   @RF00236                                         03S0236
         L     @12,UCBPTR                                       03S0236
         TM    UCB3TAPE(@12),B'10000000'                        03S0236
         BNO   @RF00236                                         03S0236
*      DO;                                                      03S0237
*        IF INTRK7 = ON & VOLTRK7=ON THEN /* BOTH 7-TRK              */
         TM    INTRK7,B'10000000'                               03S0238
         BNO   @RF00238                                         03S0238
         TM    VOLTRK7,B'10000000'                              03S0238
         BNO   @RF00238                                         03S0238
*          TYPMATCH = ON;              /* INDICATE MATCH             */
         OI    TYPMATCH,B'10000000'                             03S0239
*        ELSE                                                   03S0240
*          DO;                                                  03S0240
         B     @RC00238                                         03S0240
@RF00238 DS    0H                                               03S0241
*/* THIS SPEC ADDED FOR PTM 07608                            @YM07608*/
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - TAPECHK                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - TAPE VALIDITY CHECK ROUTINE                   */
*/*                                                                  */
*/* FUNCTION                                                         */
*/*   IF A TAPE VOLUME IS FOUND MOUNTED ON A UNIT WHOSE DEVICE TYPE  */
*/*   IS DIFFERENT THAN THAT OF THE UNIT REQUESTED, THIS ROUTINE IS  */
*/*   INVOKED. IT DETERMINES IF THE VOLUME IS ELIGIBLE FOR THE       */
*/*   REQUESTED UNIT.                                                */
*/*                                                                  */
*/* ENTRY - IN-LINE SUBROUTINE                                       */
*/*                                                                  */
*/*   PURPOSE - TO DETERMINE IF TAPE VOL IS ELIGIBLE FOR ALLOCATION  */
*/*             TO REQUESTED UNIT                                    */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     INTYPCOM - UCBTYPE FIELD OF REQUESTED UNIT                   */
*/*     TYPCOMP - UCBTYPE FIELD OF UNIT ON WHICH VOL IS MOUNTED      */
*/*     TYPMATCH - SWITCH TO BE SET IF VOL IS ELIGIBLE               */
*/*                                                                  */
*/* EXIT-NORMAL                                                      */
*/*                                                                  */
*/*   CONDITION - VALIDITY CHECK PERFORMED                           */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     TYPMATCH SWITCH SET ON IF VOL IS ELIGIBLE                    */
*/*                                                                  */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/* EXIT-ERROR - NONE                                                */
*/*                                                                  */
*/********************************************************************/
*/* THIS SEGMENT ADDED FOR PTM 07608                         @YM07608*/
*IF INTYPCOM = TYP3000 THEN            /*800 BPI UNIT REQUESTED      */
         CLC   INTYPCOM(2),@CB00216                             04S0241
         BNE   @RF00241                                         04S0241
*  IF (TYPCOMP = TYP3000 ×             /*VOL ON 800 BPI UNIT         */
*      TYPCOMP = TYP3420) THEN         /*VOL ON 800/1600 BPI UNIT    */
         CLC   TYPCOMP(2),@CB00216                              04S0242
         BE    @RT00242                                         04S0242
         CLC   TYPCOMP(2),@CB00224                              04S0242
         BNE   @RF00242                                         04S0242
@RT00242 DS    0H                                               04S0243
*    TYPMATCH = ON;                    /*TAPE VOL IS ELIGIBLE        */
         OI    TYPMATCH,B'10000000'                             04S0243
*  ELSE;                                                        04S0244
@RF00242 DS    0H                                               04S0245
*ELSE                                                           04S0245
*  IF INTYPCOM = TYP3400 THEN          /*1600 BPI UNIT REQUESTED     */
         B     @RC00241                                         04S0245
@RF00241 CLC   INTYPCOM(2),@CB00222                             04S0245
         BNE   @RF00245                                         04S0245
*    IF (TYPCOMP = TYP3420 ×           /*VOL ON 800/1600 BPI UNIT    */
*        TYPCOMP = TYP3400 ×           /*VOL ON 1600 BPI UNIT        */
*        TYPCOMP = TYP3210) THEN       /*VOL ON 1600/6250 UNIT       */
         CLC   TYPCOMP(2),@CB00224                              04S0246
         BE    @RT00246                                         04S0246
         CLC   TYPCOMP(2),@CB00222                              04S0246
         BE    @RT00246                                         04S0246
         CLC   TYPCOMP(2),@CB00220                              04S0246
         BNE   @RF00246                                         04S0246
@RT00246 DS    0H                                               04S0247
*      TYPMATCH = ON;                  /*VOL IS ELIGIBLE             */
         OI    TYPMATCH,B'10000000'                             04S0247
*    ELSE;                                                      04S0248
@RF00246 DS    0H                                               04S0249
*  ELSE                                                         04S0249
*    IF INTYPCOM = TYP3420 THEN        /*800/1600 BPI UNIT REQUESTED */
         B     @RC00245                                         04S0249
@RF00245 CLC   INTYPCOM(2),@CB00224                             04S0249
         BNE   @RF00249                                         04S0249
*      IF (TYPCOMP = TYP3420 ×         /*VOL ON 800/1600 UNIT        */
*          TYPCOMP = TYP3000 ×         /*VOL ON 800 UNIT             */
*          TYPCOMP = TYP3400 ×         /*VOL ON 1600 UNIT            */
*          TYPCOMP = TYP3210) THEN     /*VOL ON 1600/6250 UNIT       */
         CLC   TYPCOMP(2),@CB00224                              04S0250
         BE    @RT00250                                         04S0250
         CLC   TYPCOMP(2),@CB00216                              04S0250
         BE    @RT00250                                         04S0250
         CLC   TYPCOMP(2),@CB00222                              04S0250
         BE    @RT00250                                         04S0250
         CLC   TYPCOMP(2),@CB00220                              04S0250
         BNE   @RF00250                                         04S0250
@RT00250 DS    0H                                               04S0251
*        TYPMATCH = ON;                /*VOL IS ELIGIBLE             */
         OI    TYPMATCH,B'10000000'                             04S0251
*      ELSE;                                                    04S0252
@RF00250 DS    0H                                               04S0253
*    ELSE                                                       04S0253
*      IF INTYPCOM = TYP3200 THEN      /*6250 UNIT REQUESTED         */
         B     @RC00249                                         04S0253
@RF00249 CLC   INTYPCOM(2),@CB00218                             04S0253
         BNE   @RF00253                                         04S0253
*        IF (TYPCOMP = TYP3200 ×       /*VOL ON 6250 UNIT            */
*            TYPCOMP = TYP3210) THEN   /*VOL ON 1600/6250 UNIT       */
         CLC   TYPCOMP(2),@CB00218                              04S0254
         BE    @RT00254                                         04S0254
         CLC   TYPCOMP(2),@CB00220                              04S0254
         BNE   @RF00254                                         04S0254
@RT00254 DS    0H                                               04S0255
*          TYPMATCH = ON;              /*VOL IS ELIGIBLE             */
         OI    TYPMATCH,B'10000000'                             04S0255
*        ELSE;                                                  04S0256
@RF00254 DS    0H                                               04S0257
*      ELSE                                                     04S0257
*        IF INTYPCOM = TYP3210 THEN    /*1600/6250 UNIT REQ'D        */
         B     @RC00253                                         04S0257
@RF00253 CLC   INTYPCOM(2),@CB00220                             04S0257
         BNE   @RF00257                                         04S0257
*          IF (TYPCOMP = TYP3210 ×     /*VOL ON 1600/6250 UNIT       */
*              TYPCOMP = TYP3400 ×     /*VOL ON 1600 UNIT            */
*              TYPCOMP = TYP3420 ×     /*VOL ON 800/1600 UNIT        */
*              TYPCOMP = TYP3200) THEN /*VOL ON 6250                 */
         CLC   TYPCOMP(2),@CB00220                              04S0258
         BE    @RT00258                                         04S0258
         CLC   TYPCOMP(2),@CB00222                              04S0258
         BE    @RT00258                                         04S0258
         CLC   TYPCOMP(2),@CB00224                              04S0258
         BE    @RT00258                                         04S0258
         CLC   TYPCOMP(2),@CB00218                              04S0258
         BNE   @RF00258                                         04S0258
@RT00258 DS    0H                                               04S0259
*            TYPMATCH = ON;            /*VOL IS ELIGIBLE             */
         OI    TYPMATCH,B'10000000'                             04S0259
*          ELSE;                                                04S0260
@RF00258 DS    0H                                               04S0261
*        ELSE;                                                  04S0261
@RF00257 DS    0H                                               04S0262
*          END;                                                 03S0262
*      END;                                                     03S0263
*    ELSE;                             /* NOT TAPE                   */
@RF00236 DS    0H                                               03S0265
*    IF TYPMATCH = OFF THEN            /* NO MATCH, TYPES INCOMPATIBL*/
@RC00236 TM    TYPMATCH,B'10000000'                             03S0265
         BNZ   @RF00265                                         03S0265
*      DO;                                                      03S0266
*        RETCODE=ERROR;                                         03S0267
         LA    RETCODE,4                                        03S0267
*        SIOTRSNC=INCNSUNT;            /* INCONSISTENT UNITNAME AND
*                                         VOL SER                    */
         L     @12,@PC00001+4                                   03S0268
         L     @12,SIOTPTR(,@12)                                03S0268
         MVC   SIOTRSNC(2,@12),@CH00176                         03S0268
*      END;                                                     03S0269
*  END;                                                         03S0270
@RF00265 DS    0H                                               03S0271
*IF TYPMATCH = ON THEN                 /*RETRY NEEDED                */
@RC00233 TM    TYPMATCH,B'10000000'                             03S0271
         BNO   @RF00271                                         03S0271
* DO;                                  /*SETUP FOR RETRY             */
*   INDRETRY = ON;                     /*ALLOC MUST BE RETRIED       */
         L     @12,@PC00001+8                                   03S0273
         L     @12,ALCWAPTR(,@12)                               03S0273
         OI    INDRETRY(@12),B'01000000'                        03S0273
*   SIOTRTRY = ON;                     /*THIS REQUEST NEEDS RETRY    */
         L     @12,@PC00001+4                                   03S0274
         L     @12,SIOTPTR(,@12)                                03S0274
         OI    SIOTRTRY(@12),B'00000001'                        03S0274
*   RETCODE = MTDINELG;                /*VOLUME ON INELIGIBLE UNIT   */
         LA    RETCODE,20                                       03S0275
* END;                                 /*END SETUP FOR RETRY         */
*      END;                                                     02S0277
@RF00271 DS    0H                                               02S0278
*    UCBPTR = SAVUCBP;                 /* RESTORE UCB ADDRESS@YM07608*/
@RF00211 ST    SAVUCBP,UCBPTR                                   02S0278
*  END;                                                         02S0279
*IF RETCODE = NOERROR THEN             /* OK TO CONTINUE     @YM07608*/
@RF00199 LTR   RETCODE,RETCODE                                  02S0280
         BNZ   @RF00280                                         02S0280
*  DO;                                                          02S0281
*    UCBALOC = ON;                     /*MARK UCB ALLOCATED          */
         L     @12,UCBPTR                                       02S0282
         OI    UCBALOC(@12),B'00001000'                         02S0282
*    TIOTBLT = OFF;                    /*INDICATE UCB ALLOC'D IN
*                                        ESTAE PARAMETER LIST        */
         L     @11,@PC00001+8                                   02S0283
         L     @11,ALCWAPTR(,@11)                               02S0283
         L     @01,EXITPRMP(,@11)                               02S0283
         NI    TIOTBLT(@01),B'11101111'                         02S0283
*    FRRUSECT = UCBUSER;               /*USE COUNT TO ESTAE PARMS    */
         MVC   FRRUSECT(1),UCBUSER(@12)                         02S0284
*    UCBUPDT = ON;                     /*UCB HAS BEEN MARKED ALLOC'D */
         OI    UCBUPDT,B'10000000'                              02S0285
*    UCBASID = ALCWASID;               /*STORE ASID IN UCB           */
         L     @15,UCBEXTPT(,@12)                               02S0286
         MVC   UCBASID(2,@15),ALCWASID(@11)                     02S0286
*    IF UCB3DACC = ON ×                /*DA                          */
*       UCB3TAPE = ON THEN             /*OR TAPE                     */
         TM    UCB3DACC(@12),B'10100000'                        02S0287
         BZ    @RF00287                                         02S0287
*      DO;                                                      02S0288
*        IF VOLSPEC = ON THEN          /*SPECIFIC REQUEST            */
         L     @12,@PC00001+12                                  02S0289
         L     @12,VUPTR(,@12)                                  02S0289
         TM    VOLSPEC(@12),B'00100000'                         02S0289
         BNO   @RF00289                                         02S0289
*          UCBNSRCH = ON;              /*INDICATE SO IN UCB          */
         OI    UCBNSRCH(@15),B'10000000'                        02S0290
*        IF UCB3DACC = ON THEN         /*DA                          */
@RF00289 L     @12,UCBPTR                                       02S0291
         TM    UCB3DACC(@12),B'00100000'                        02S0291
         BNO   @RF00291                                         02S0291
*          DO;                                                  02S0292
*            IF UCBBSTR = OFF THEN     /*NOT STORAGE VOL             */
         TM    UCBBSTR(@12),B'00000100'                         02S0293
         BNZ   @RF00293                                         02S0293
*              IF UPUSEAT = ON THEN    /*UP USE ATTRIBUTES REQUESTED */
         L     @11,@PC00001                                     02S0294
         TM    UPUSEAT(@11),B'00100000'                         02S0294
         BNO   @RF00294                                         02S0294
*                DO;                                            02S0295
*                  IF VOLPUB = ON ×    /*PUBLIC REQUEST              */
*                     (VOLPUB=OFF & VOLSTG=OFF & VOLPRV=OFF) &  02S0296
*                     UCBBPRV = OFF THEN /*NOT PRIVATE UCB           */
         L     @11,@PC00001+12                                  02S0296
         L     @11,VUPTR(,@11)                                  02S0296
         TM    VOLPUB(@11),B'10000000'                          02S0296
         BO    @RT00296                                         02S0296
         TM    VOLPUB(@11),B'11010000'                          02S0296
         BNZ   @RF00296                                         02S0296
         TM    UCBBPRV(@12),B'00010000'                         02S0296
         BNZ   @RF00296                                         02S0296
@RT00296 DS    0H                                               02S0297
*                    UCBBPUB = ON;     /*SET PUBLIC USE ATTRIBUTE    */
         L     @12,UCBPTR                                       02S0297
         OI    UCBBPUB(@12),B'00001000'                         02S0297
*                  ELSE                                         02S0298
*                    IF VOLPRV = ON &  /*PRIVATE REQUEST             */
*                       UCBRESV = OFF &/*NOT RESERVED                */
*                       UCBPRES = OFF THEN /*NOT PERMRES             */
         B     @RC00296                                         02S0298
@RF00296 L     @12,@PC00001+12                                  02S0298
         L     @12,VUPTR(,@12)                                  02S0298
         TM    VOLPRV(@12),B'01000000'                          02S0298
         BNO   @RF00298                                         02S0298
         L     @12,UCBPTR                                       02S0298
         TM    UCBRESV(@12),B'00100100'                         02S0298
         BNZ   @RF00298                                         02S0298
*                      IF UCBBPUB = ON THEN /*PUBLIC UCB             */
         TM    UCBBPUB(@12),B'00001000'                         02S0299
         BNO   @RF00299                                         02S0299
*                        DO;                                    02S0300
*                          UCBBPUB = OFF;/*TURN OFF PUBLIC BIT IN UCB*/
*                          UCBBPRV = ON;/*TURN ON PRIVATE BIT IN UCB */
         OI    UCBBPRV(@12),B'00010000'                         02S0302
         NI    UCBBPUB(@12),B'11110111'                         02S0302
*                          PUBPRV = ON;/*UCB SWITCHED FROM PUB TO PRV*/
         L     @12,@PC00001                                     02S0303
         OI    PUBPRV(@12),B'00000100'                          02S0303
*                        END;                                   02S0304
*                      ELSE            /*NOT PUBLIC UCB              */
*                        IF UCBBPRV=OFF THEN /*UCB NOT MARKED PRIVATE*/
         B     @RC00299                                         02S0305
@RF00299 L     @12,UCBPTR                                       02S0305
         TM    UCBBPRV(@12),B'00010000'                         02S0305
         BNZ   @RF00305                                         02S0305
*                          DO;                                  02S0306
*                            UCBBPRV = ON; /*MARK UCB PRIVATE        */
         OI    UCBBPRV(@12),B'00010000'                         02S0307
*                            NOTHPRV = ON; /*UCB SWITCHED TO PRIVATE */
         L     @12,@PC00001                                     02S0308
         OI    NOTHPRV(@12),B'00000010'                         02S0308
*                          END;                                 02S0309
*                        ELSE;                                  02S0310
@RF00305 DS    0H                                               02S0311
*                END;                                           02S0311
@RC00299 DS    0H                                               02S0311
@RF00298 DS    0H                                               02S0311
@RC00296 DS    0H                                               02S0312
*            IF VOLNSHR = ON &         /*NON-SHAREABLE VOL           */
*               UCBRESV = OFF &        /*NOT RESERVED                */
*               UCBPRES = OFF THEN     /*NOT PERMRES                 */
@RF00294 DS    0H                                               02S0312
@RF00293 L     @12,@PC00001+12                                  02S0312
         L     @12,VUPTR(,@12)                                  02S0312
         TM    VOLNSHR(@12),B'00001000'                         02S0312
         BNO   @RF00312                                         02S0312
         L     @12,UCBPTR                                       02S0312
         TM    UCBRESV(@12),B'00100100'                         02S0312
         BNZ   @RF00312                                         02S0312
*              DO;                                              02S0313
*                UCBBSVL = ON;         /*INDICATE NON-SHAREABLE      */
*                UCBSHAR = ON;                                  02S0315
         OI    UCBBSVL(@12),B'10000010'                         02S0315
*              END;                                             02S0316
*            UCBUSER = UCBUSER + ONE;  /*UPDATE USE COUNT            */
@RF00312 L     @12,UCBPTR                                       02S0317
         LA    @11,1                                            02S0317
         SLR   @15,@15                                          02S0317
         IC    @15,UCBUSER(,@12)                                02S0317
         ALR   @11,@15                                          02S0317
         STC   @11,UCBUSER(,@12)                                02S0317
*          END;                                                 02S0318
*        ELSE                          /*TAPE                        */
*          IF UPUSEAT = ON THEN        /*UP USE ATTRIBUTE REQUESTED  */
         B     @RC00291                                         02S0319
@RF00291 L     @12,@PC00001                                     02S0319
         TM    UPUSEAT(@12),B'00100000'                         02S0319
         BNO   @RF00319                                         02S0319
*            DO;                                                02S0320
*              IF VOLPUB = ON &        /*PUBLIC REQUEST              */
*                 UCBBPRV = OFF THEN   /*PRIVATE ATTRIBUTE NOT SET   */
         L     @12,@PC00001+12                                  02S0321
         L     @12,VUPTR(,@12)                                  02S0321
         TM    VOLPUB(@12),B'10000000'                          02S0321
         BNO   @RF00321                                         02S0321
         L     @12,UCBPTR                                       02S0321
         TM    UCBBPRV(@12),B'00010000'                         02S0321
         BNZ   @RF00321                                         02S0321
*                UCBBPUB = ON;         /*INDICATE PUBLIC VOL         */
         OI    UCBBPUB(@12),B'00001000'                         02S0322
*              ELSE                                             02S0323
*                IF UCBBPUB = ON THEN  /*UCB MARKED PUBLIC           */
         B     @RC00321                                         02S0323
@RF00321 L     @12,UCBPTR                                       02S0323
         TM    UCBBPUB(@12),B'00001000'                         02S0323
         BNO   @RF00323                                         02S0323
*                  DO;                                          02S0324
*                    UCBBPUB = OFF;    /*TURN OFF PUBLIC INDICATOR   */
*                    UCBBPRV = ON;     /*MARK UCB PRIVATE            */
         OI    UCBBPRV(@12),B'00010000'                         02S0326
         NI    UCBBPUB(@12),B'11110111'                         02S0326
*                    PUBPRV = ON;      /*UCB SWITCHED FROM PUB TO PRV*/
         L     @12,@PC00001                                     02S0327
         OI    PUBPRV(@12),B'00000100'                          02S0327
*                  END;                                         02S0328
*                ELSE                                           02S0329
*                  IF UCBBPRV = OFF THEN /*UCB NOT MARKED PRIVATE    */
         B     @RC00323                                         02S0329
@RF00323 L     @12,UCBPTR                                       02S0329
         TM    UCBBPRV(@12),B'00010000'                         02S0329
         BNZ   @RF00329                                         02S0329
*                    DO;                                        02S0330
*                      UCBBPRV = ON;   /*MARK UCB PRIVATE            */
         OI    UCBBPRV(@12),B'00010000'                         02S0331
*                      NOTHPRV = ON;   /*UCB CHANGED TO PRIVATE      */
         L     @12,@PC00001                                     02S0332
         OI    NOTHPRV(@12),B'00000010'                         02S0332
*                    END;                                       02S0333
*                  ELSE;                                        02S0334
@RF00329 DS    0H                                               02S0335
*            END;                                               02S0335
@RC00323 DS    0H                                               02S0335
@RC00321 DS    0H                                               02S0336
*        IF MOUNT = ON ×               /*MOUNT REQUEST BLOCK BUILT
*                                                            @ZA03870*/
*           (UCB3TAPE = ON &           /*MUST BE A TAPE REQ  @ZA03870*/
*            UCBJES3 = ON &            /*MUST BE JES3 REQUEST@ZA03870*/
*            VOLSPEC = OFF &           /*MUST BE NON-SPECIFIC REQUEST
*                                                            @ZA03870*/
*           UCBVOLI ^= INVOLID &       /*UCB VOLSER NOT         02S0336
*                                        EQUAL TO THE VOLSER    02S0336
*                                        IN THE INPUT PARMS  @ZA03870*/
*            VOLMNTD = ON) THEN        /*MOUNT DURING ALLOC  @ZA03870*/
@RF00319 DS    0H                                               02S0336
@RC00291 TM    MOUNT,B'01000000'                                02S0336
         BO    @RT00336                                         02S0336
         L     @12,UCBPTR                                       02S0336
         TM    UCB3TAPE(@12),B'10000000'                        02S0336
         BNO   @RF00336                                         02S0336
         TM    UCBJES3(@12),B'01000000'                         02S0336
         BNO   @RF00336                                         02S0336
         L     @11,@PC00001+12                                  02S0336
         L     @11,VUPTR(,@11)                                  02S0336
         TM    VOLSPEC(@11),B'00100000'                         02S0336
         BNZ   @RF00336                                         02S0336
         L     @15,@PC00001                                     02S0336
         CLC   UCBVOLI(6,@12),INVOLID(@15)                      02S0336
         BE    @RF00336                                         02S0336
         TM    VOLMNTD(@11),B'01000000'                         02S0336
         BNO   @RF00336                                         02S0336
@RT00336 DS    0H                                               02S0337
*          DO;                                                  02S0337
*            IF NONSPECF = OFF THEN    /*NOT NON-SPECIFIC DA @ZA03870*/
         TM    NONSPECF,B'00000100'                             02S0338
         BNZ   @RF00338                                         02S0338
*               IF INVOLID(1) ^= NONSPDA THEN /*             @ZA03870*/
         L     @12,@PC00001                                     02S0339
         CLI   INVOLID(@12),X'FE'                               02S0339
         BE    @RF00339                                         02S0339
*                 UCBVOLI = INVOLID;   /*PUT VOLSER IN UCB           */
         L     @11,UCBPTR                                       02S0340
         MVC   UCBVOLI(6,@11),INVOLID(@12)                      02S0340
*               ELSE                   /*                    @ZA03870*/
*                 UCBVOLI = NOUCBVOL;  /*ZERO THE VOLSER     @ZA03870*/
         B     @RC00339                                         02S0341
@RF00339 L     @12,UCBPTR                                       02S0341
         MVC   UCBVOLI(6,@12),NOUCBVOL                          02S0341
*            ELSE;                     /*                    @ZA03870*/
@RF00338 DS    0H                                               02S0343
*            UCBMOUNT = ON;            /*INDICATE MOUNT NOT VERIFIED */
@RC00338 L     @12,UCBPTR                                       02S0343
         OI    UCBMOUNT(@12),B'10000000'                        02S0343
*            IF MOUNT = ON THEN        /*MOUNT NEEDED?       @ZA26353*/
         TM    MOUNT,B'01000000'                                02S0344
         BNO   @RF00344                                         02S0344
*              UCBMMSGP = ON;          /*YES, INDICATE MOUNT    02S0345
*                                        MSG  NOT ISSUED     @ZA26353*/
         OI    UCBMMSGP(@12),B'00000100'                        02S0345
*            ELSE;                     /*                    @ZA26353*/
@RF00344 DS    0H                                               02S0347
*          END;                                                 02S0347
*      END;                                                     02S0348
@RF00336 DS    0H                                               02S0349
*    UCBUPDT = OFF;                    /*UPDATE OF UCB COMPLETE      */
@RF00287 NI    UCBUPDT,B'01111111'                              02S0349
*  END;                                /*                    @YM07608*/
*RFY (REG2,REG3) RSTD;                                          02S0351
@RF00280 DS    0H                                               02S0352
*GEN;                                                           02S0352
 SETFRR D,WRKREGS=(2,3)
*RFY (REG2,REG3) UNRSTD;                                        02S0353
* DO; /* SETLOCK (RELEASE) TYPE(CMS) REGS(USE) RELATED(UCB,IEFAB435(UPD
*CB)) */                                                        02S0354
*   RFY (GPR11P,GPR12P,GPR13P,GPR14P) RSTD;                     02S0355
*   RFY (GPR15P,GPR00P,GPR01P) RSTD;                            02S0356
*   GPR15P = GPR11P; /* SAVE REG. 11 IN REG. 15. */             02S0357
         LR    GPR15P,GPR11P                                    02S0357
*   GPR00P = GPR12P; /* SAVE REG. 12 IN REG. 0. */              02S0358
         LR    GPR00P,GPR12P                                    02S0358
*   GPR01P = GPR13P; /* SAVE REG. 13 IN REG. 1. */              02S0359
         LR    GPR01P,GPR13P                                    02S0359
*   GPR13P = PSALITA; /* ADDRESS OF LOCK INTERFACE TABLE. */    02S0360
         L     GPR13P,PSALITA                                   02S0360
*   GEN(LM GPR11P,GPR13P,552(GPR13P)); /* LOAD LOCKWORD, CLHT AND ENTRY
*ADRS. */                                                       02S0361
         LM GPR11P,GPR13P,552(GPR13P)
*   GEN(BALR GPR14P,GPR13P); /* BALR TO SETLOCK RTN. */         02S0362
         BALR GPR14P,GPR13P
*   GPR11P = GPR15P; /* RESTORE REG. 11. */                     02S0363
         LR    GPR11P,GPR15P                                    02S0363
*   GPR15P = GPR13P; /* SAVE RETURN CODE. */                    02S0364
         LR    GPR15P,GPR13P                                    02S0364
*   GPR12P = GPR00P; /* RESTORE REG. 12 */                      02S0365
         LR    GPR12P,GPR00P                                    02S0365
*   GPR13P = GPR01P; /* RESTORE REG. 13. */                     02S0366
         LR    GPR13P,GPR01P                                    02S0366
*   RFY(GPR15P,GPR00P,GPR01P) UNRSTD;                           02S0367
*   RFY (GPR11P,GPR12P,GPR13P,GPR14P) UNRSTD;                   02S0368
* END; /* SETLOCK (RELEASE) TYPE(CMS) REGS(USE) RELATED(UCB,IEFAB435(UP
*UCB)) */                                                       02S0369
* DO; /* SETLOCK (RELEASE) TYPE(LOCAL) REGS(USE) RELATED(UCB,IEFAB435(U
*DUCB)) */                                                      02S0370
*   RFY (GPR11P,GPR12P,GPR13P,GPR14P) RSTD;                     02S0371
*   RFY (GPR15P,GPR00P,GPR01P) RSTD;                            02S0372
*   GPR15P = GPR11P; /* SAVE REG. 11 IN REG. 15. */             02S0373
         LR    GPR15P,GPR11P                                    02S0373
*   GPR00P = GPR12P; /* SAVE REG. 12 IN REG. 0. */              02S0374
         LR    GPR00P,GPR12P                                    02S0374
*   GPR01P = GPR13P; /* SAVE REG. 13 IN REG. 1. */              02S0375
         LR    GPR01P,GPR13P                                    02S0375
*   GPR13P = PSALITA; /* ADDRESS OF LOCK INTERFACE TABLE. */    02S0376
         L     GPR13P,PSALITA                                   02S0376
*   GEN(LM GPR11P,GPR13P,588(GPR13P)); /* LOAD LOCKWORD, CLHT AND ENTRY
*ADRS. */                                                       02S0377
         LM GPR11P,GPR13P,588(GPR13P)
*   GEN(BALR GPR14P,GPR13P); /* BALR TO SETLOCK RTN. */         02S0378
         BALR GPR14P,GPR13P
*   GPR11P = GPR15P; /* RESTORE REG. 11. */                     02S0379
         LR    GPR11P,GPR15P                                    02S0379
*   GPR15P = GPR13P; /* SAVE RETURN CODE. */                    02S0380
         LR    GPR15P,GPR13P                                    02S0380
*   GPR12P = GPR00P; /* RESTORE REG. 12 */                      02S0381
         LR    GPR12P,GPR00P                                    02S0381
*   GPR13P = GPR01P; /* RESTORE REG. 13. */                     02S0382
         LR    GPR13P,GPR01P                                    02S0382
*   RFY(GPR15P,GPR00P,GPR01P) UNRSTD;                           02S0383
*   RFY (GPR11P,GPR12P,GPR13P,GPR14P) UNRSTD;                   02S0384
* END; /* SETLOCK (RELEASE) TYPE(LOCAL) REGS(USE) RELATED(UCB,IEFAB435(
*PDUCB)) */                                                     02S0385
* DO; /*MODESET  EXTKEY(SCHED)*/                                02S0386
*   SPKA (16); /*SET PSW KEY*/                                  02S0387
         LA    @12,16                                           02S0387
         SPKA  0(@12)                                           02S0387
* END; /*MODESET  EXTKEY(SCHED)*/                               02S0388
*    END;                                                       01S0389
*ELSE;                                                          01S0390
@RF00153 DS    0H                                               01S0391
*RETURN CODE(RETCODE);                                          01S0391
         L     @13,4(,@13)                                      01S0391
         L     @00,@SIZDATD                                     01S0391
         LR    @01,@09                                          01S0391
         FSPACE   R,LV=(0),A=(1)
         LR    @15,@08                                          01S0391
         L     @14,12(,@13)                                     01S0391
         LM    @00,@12,20(@13)                                  01S0391
         BR    @14                                              01S0391
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - VMVINT                                            */
*/*                                                                  */
*/* DESCRIPTIVE NAME - VOLUME MOUNT AND VERIFY INTERFACE             */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS SEGMENT IS CALLED WHEN AN UNLOAD OR MOUNT IS NEEDED.      */
*/*   FIRST, CORE IS GOTTEN FOR A VM&V REQUEST BLOCK                 */
*/*                                                                  */
*/*   FOR AN UNLOAD, A REQUEST BLOCK IS BUILT AND IEFAB49C IS        */
*/*   CALLED TO PERFORM THE UNLOAD.                                  */
*/*                                                                  */
*/*   FOR A MOUNT, A REQUEST BLOCK IS BUILT AND CHAINED OFF THE      */
*/*   SIOT.                                                          */
*/*                                                                  */
*/* ENTRY - CLOSED SUBROUTINE OF IEFAB435                            */
*/*                                                                  */
*/*   PURPOSE - TO BUILD UNLOAD AND MOUNT REQUEST BLOCKS FOR VM&V    */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     VFUNCMAP - FUNCTION MAP                                      */
*/*     SIOTPTR - FOR CHAINING MOUNT REQUEST BLOCKS AND DETERMINING  */
*/*               TAPE LABEL TYPE                                    */
*/*     UCBPTR - PTR TO UCB                                          */
*/*     UCBPARML - FOR INPUT VOLUME SERIAL                           */
*/*     ALCWAPTR - FOR PTR TO AREA FOR ERROR REASON CODE             */
*/*                                                                  */
*/* EXIT - NORMAL                                                    */
*/*                                                                  */
*/*   CONDITION - UNLOAD AND/OR MOUNT FUNCTIONS HANDLED              */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*       FOR UNLOAD - UCB WHERE VOL WAS MOUNTED IS CLEARED OF       */
*/*                    VOLSER (DONE BY VM&V UNLOAD ROUTINE)          */
*/*                    VOLUME UNLOADED (BY VM&V UNLOAD ROUTINE)      */
*/*       FOR MOUNT - MOUNT REQUEST BLOCK BUILT AND CHAINED TO SIOT  */
*/*                                                                  */
*/*     RETURN CODE - 0                                              */
*/*                                                                  */
*/* EXIT-ERROR                                                       */
*/*                                                                  */
*/*   CONDITION - GETMAIN ERROR                                      */
*/*                                                                  */
*/*     OUTPUT - REASON CODE 2 IN AREA POINTED TO OUT OF ALCWA       */
*/*                                                                  */
*/*     RETURN CODE - 4                                              */
*/*                                                                  */
*/*   CONDITION - VM&V GETMAIN ERROR DURING UNLOAD PROCESSING        */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*       REASON CODE 2 SET IN AREA POINTED TO OUT OF ALCWA          */
*/*                                                                  */
*/*     RETURN CODE - 4                                              */
*/*                                                                  */
*/********************************************************************/
*VMVINT: PROC;                                                  02S0392
@EL00001 L     @13,4(,@13)                                      02S0392
@EF00001 L     @00,@SIZDATD                                     02S0392
         LR    @01,@09                                          02S0392
         FSPACE   R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                  02S0392
         BR    @14                                              02S0392
VMVINT   STM   @14,@07,@SA00002                                 02S0392
         STM   @09,@12,@SA00002+40                              02S0392
* /* ?GETSTORG (SUBPL,VMVRBLEN,VMVREQBP);*/                     02S0393
*   /* DEFINITIONS OF GETMAIN PARMS */                          02S0393
*   DCL                                                         02S0393
*     GTSTR0   FIXED(31) REG(0),/*GTMN PARM REG*/               02S0393
*     GTSTR1   FIXED(31) REG(1),/*GTMN PARM REG*/               02S0393
*     GTSTR2   PTR(31)   REG(2),/*GTMN PARM REG*/               02S0393
*     GTSTR15  FIXED(31) REG(15),/*GTMN RET COD*/               02S0393
*     GTSTRTCD FIXED(31); /* GETMAIN RTN CODE  */               02S0393
*   DCL                                                         02S0394
*     GTSTR3   FIXED(31) REG(3),/* CLEARING REG*/               02S0394
*     GTSTR4   FIXED(31) REG(4),/* CLEARING REG*/               02S0394
*     GTSTR5   FIXED(31) REG(5),/* CLEARING REG*/               02S0394
*     GTSTR6   FIXED(31) REG(6),/* CLEARING REG*/               02S0394
*     GTSTR7   FIXED(31) REG(7),/* CLEARING REG*/               02S0394
*     GTSTR8   FIXED(31) REG(8),/* CLEARING REG*/               02S0394
*     GTSTZERO FIXED(31) INIT(0),                               02S0394
*     GTST253  FIXED(31) CONSTANT(253);                         02S0394
*   RFY (GTSTR0,GTSTR1,GTSTR2) RSTD; /*SAVE RGS*/               02S0395
*   GTSTR0 = VMVRBLEN; /* SET AMOUNT*/                          02S0396
         L     GTSTR0,VMVRBLEN                                  02S0396
*   GTSTR2 = SUBPL; /* SET SUBPOOL*/                            02S0397
         LA    GTSTR2,230                                       02S0397
*   GENERATE CODE;                                              02S0398
     GETMAIN RC,LV=(0),SP=(2)  DO GETMAIN
*   GTSTRTCD = GTSTR15; /* SAVE GETMAIN RET COD*/               02S0399
         LR    GTSTRTCD,GTSTR15                                 02S0399
*   VMVREQBP = GTSTR1; /* ADDR OF GOTN STORG*/                  02S0400
         ST    GTSTR1,VMVREQBP                                  02S0400
*   RFY (GTSTR0,GTSTR1,GTSTR2) UNRSTD; /*RLSE */                02S0401
*   IF GTSTRTCD = 0 THEN /*GETMAIN SUCCESSFUL? */               02S0402
         LTR   GTSTRTCD,GTSTRTCD                                02S0402
         BNZ   @RF00402                                         02S0402
*     DO;               /* YES, CLEAR STORAGE.*/                02S0403
*       RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                       02S0404
*                          GTSTR7,GTSTR8) RSTD;                 02S0404
*       GTSTR4 = VMVREQBP; /*STORG PTR*/                        02S0405
         L     @12,VMVREQBP                                     02S0405
         LR    GTSTR4,@12                                       02S0405
*       GTSTR5 = VMVRBLEN; /*STORG AMNT*/                       02S0406
         L     GTSTR5,VMVRBLEN                                  02S0406
*       GTSTR7 = '00000000'X; /*PAD CHAR & LNTH*/               02S0407
         SLR   GTSTR7,GTSTR7                                    02S0407
*       IF SUBPL = GTST253 THEN                                 02S0408
         B     @RF00408                                         02S0408
*      GEN                                                      02S0409
*   (MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8);           02S0409
         MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8
*       GEN REFS(GTSTR4,GTSTR6);                                02S0410
@RF00408 DS    0H                                               02S0410
          MVCL  GTSTR4,GTSTR6 CLEAR GOTTEN STORG
*       IF SUBPL = GTST253 THEN                                 02S0411
         B     @RF00411                                         02S0411
*         GEN (MODESET KEYADDR=(2));                            02S0412
         MODESET KEYADDR=(2)
*       RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                       02S0413
*                          GTSTR7,GTSTR8) UNRSTD;               02S0413
@RF00411 DS    0H                                               02S0414
*     END;       /* STORAGE CLEARING COMPLETED */               02S0414
*   ELSE                                                        02S0415
*   VMVREQBP= 0;   /* CLEAR RETURN ADDR. */                     02S0415
         B     @RC00402                                         02S0415
@RF00402 SLR   @12,@12                                          02S0415
         ST    @12,VMVREQBP                                     02S0415
*   GTSTR15 = GTSTRTCD;    /* GTMN RETURN CODE */               02S0416
@RC00402 LR    GTSTR15,GTSTRTCD                                 02S0416
*                                      /* RESTORE LIST PRINT STATUS  */
*  /*GET CORE FOR VM&V RB        */                             02S0417
*RETCODE = REG15;                                               02S0417
         LR    RETCODE,REG15                                    02S0417
*IF RETCODE = NOERROR THEN             /*CORE GOTTEN                 */
         LTR   RETCODE,RETCODE                                  02S0418
         BNZ   @RF00418                                         02S0418
*  DO;                                                          02S0419
*    IF UNLOAD = ON THEN               /*UNLOAD FUNCTION REQUESTED   */
         TM    UNLOAD,B'10000000'                               02S0420
         BNO   @RF00420                                         02S0420
*      DO;                                                      02S0421
*        VMVRQBLK = VMVRQBLK && VMVRQBLK;  /*CLEAR VM&V REQUEST BLOCK*/
         L     @12,VMVREQBP                                     02S0422
         XC    VMVRQBLK(52,@12),VMVRQBLK(@12)                   02S0422
*        VMVUNLOD = ON;                /*INDICATE UNLOAD             */
         OI    VMVUNLOD(@12),B'10000000'                        02S0423
*          VMVUCBP = UCBPTR;           /*SET UCB PTR TO INPUT UCB PTR*/
         MVC   VMVUCBP(3,@12),UCBPTR+1                          02S0424
*        RFY UCBOB BASED(VMVUCBP);                              02S0425
*        VMVUCB = ON;                  /*REMOVE VOLSER FROM UCB      */
         OI    VMVUCB(@12),B'01000000'                          02S0426
*        VMVJBNMP = ADDR(ALCJOBN);     /*PTR TO JOB NAME             */
         L     @11,@PC00001+8                                   02S0427
         L     @11,ALCWAPTR(,@11)                               02S0427
         L     @15,TIOTHDRP(,@11)                               02S0427
         ST    @15,VMVJBNMP(,@12)                               02S0427
*        VMVJSNMP = ADDR(ALCSTEPN);    /*PTR TO JOB STEP NAME        */
         LA    @15,ALCSTEPN(,@15)                               02S0428
         ST    @15,VMVJSNMP(,@12)                               02S0428
*        RFY UCBOB BASED(UCBPTR);                               02S0429
*        CALL IEFAB49C(VMVREQBP,ALCWASID,CANCLECB); /*CALL VM&V TO
*                                                     UNLOAD VOL     */
         LA    @12,VMVREQBP                                     02S0430
         ST    @12,@AL00001                                     02S0430
         LA    @12,ALCWASID(,@11)                               02S0430
         ST    @12,@AL00001+4                                   02S0430
         L     @12,CANCELP(,@11)                                02S0430
         ST    @12,@AL00001+8                                   02S0430
         L     @15,@CV00094                                     02S0430
         LA    @01,@AL00001                                     02S0430
         BALR  @14,@15                                          02S0430
*        RETCODE = REG15;              /*SAVE RETURN CODE            */
         LR    RETCODE,REG15                                    02S0431
*        IF RETCODE = ERROR THEN       /*ERROR FROM VM&V             */
         CH    RETCODE,@CH00071                                 02S0432
         BNE   @RF00432                                         02S0432
*          FAILRSC = GETERR;           /*INDICATE GETMAIN ERROR      */
         L     @12,@PC00001+8                                   02S0433
         L     @12,ALCWAPTR(,@12)                               02S0433
         L     @12,FAILRSCP(,@12)                               02S0433
         MVC   FAILRSC(2,@12),@CH00174                          02S0433
*      END;                                                     02S0434
@RF00432 DS    0H                                               02S0435
*    IF RETCODE = NOERROR &            /*NO UNLOAD ERROR             */
*       MOUNT = ON THEN                /*MOUNT FUNCTION REQUESTED    */
@RF00420 LTR   RETCODE,RETCODE                                  02S0435
         BNZ   @RF00435                                         02S0435
         TM    MOUNT,B'01000000'                                02S0435
         BNO   @RF00435                                         02S0435
*      DO;                                                      02S0436
*        VMVRQBLK = VMVRQBLK && VMVRQBLK;  /*CLEAR VM&V REQUEST BLOCK*/
         L     @12,VMVREQBP                                     02S0437
         XC    VMVRQBLK(52,@12),VMVRQBLK(@12)                   02S0437
*        VMVMOUNT = ON;                /*INDICATE MOUNT FUNCTION     */
         OI    VMVMOUNT(@12),B'00010000'                        02S0438
*        VMVUCBP = UCBPTR;                                      02S0439
         MVC   VMVUCBP(3,@12),UCBPTR+1                          02S0439
*        VMVVUNTP = VUPTR;             /*SET PTR TO VU ENTRY         */
         L     @11,@PC00001+12                                  02S0440
         MVC   VMVVUNTP(4,@12),VUPTR(@11)                       02S0440
*        IF NONSPECF ^= ON &           /*NOT NON-SPECIFIC DA         */
*           INVOLID(1) ^= NONSPTAP &     /*NOT NON-SPECIFIC TAPE     */
*           INVOLID(1) ^= NONSPDA THEN                          02S0441
         TM    NONSPECF,B'00000100'                             02S0441
         BO    @RF00441                                         02S0441
         L     @11,@PC00001                                     02S0441
         CLI   INVOLID(@11),X'FF'                               02S0441
         BE    @RF00441                                         02S0441
         CLI   INVOLID(@11),X'FE'                               02S0441
         BE    @RF00441                                         02S0441
*          VMVMVLSR = INVOLID;         /*PUT VOLSER IN VM&V RB       */
         MVC   VMVMVLSR(6,@12),INVOLID(@11)                     02S0442
*        ELSE                          /*NON-SPECIFIC DA             */
*          VMVMVLSR = NOVOLSER;        /*BLANK OUT VOLSER FIELD      */
         B     @RC00441                                         02S0443
@RF00441 L     @12,VMVREQBP                                     02S0443
         MVC   VMVMVLSR(6,@12),NOVOLSER                         02S0443
*        IF NOMNTMSG = OFF THEN        /*MOUNT MSG REQUIRED          */
@RC00441 TM    NOMNTMSG,B'00100000'                             02S0444
         BNZ   @RF00444                                         02S0444
*          VMVMTMSG = ON;              /*INDICATE TO ISSUE MOUNT MSG */
         L     @12,VMVREQBP                                     02S0445
         OI    VMVMTMSG(@12),B'00001000'                        02S0445
*        IF CCLMNTSW = ON THEN         /*OPERATOR CANCEL ALLOWED?    */
@RF00444 L     @12,@PC00001+8                                   02S0446
         L     @12,ALCWAPTR(,@12)                               02S0446
         L     @12,FMAPPTR(,@12)                                02S0446
         TM    CCLMNTSW(@12),B'00000010'                        02S0446
         BNO   @RF00446                                         02S0446
*          VMVDWTOR = ON;              /*NO, ISSUE WTOR              */
         L     @12,VMVREQBP                                     02S0447
         OI    VMVDWTOR(@12),B'00000100'                        02S0447
*        IF VERLABEL = ON THEN         /*VERIFY LABEL REQUESTED      */
@RF00446 TM    VERLABEL,B'00001000'                             02S0448
         BNO   @RF00448                                         02S0448
*          DO;                                                  02S0449
*            VMVVRLBL = ON;            /*INDICATE TO VERIFY LABEL    */
         L     @12,VMVREQBP                                     02S0450
         OI    VMVVRLBL(@12),B'00000010'                        02S0450
*            MASKBYTE = GROUPID/8;                              02S0451
         LA    @12,8                                            02S0451
         L     @11,@PC00001+16                                  02S0451
         L     @11,GROUPID(,@11)                                02S0451
         LR    @00,@11                                          02S0451
         SRDA  @00,32                                           02S0451
         DR    @00,@12                                          02S0451
         LR    MASKBYTE,@01                                     02S0451
*            MASKBIT = GROUPID//8;                              02S0452
         LR    @00,@11                                          02S0452
         SRDA  @00,32                                           02S0452
         D     @00,@CF00050                                     02S0452
         LR    MASKBIT,@00                                      02S0452
*            IF MASKBIT = ZERO THEN                             02S0453
         LTR   MASKBIT,MASKBIT                                  02S0453
         BNZ   @RF00453                                         02S0453
*              MASKBIT = 8;                                     02S0454
         LR    MASKBIT,@12                                      02S0454
*            ELSE                                               02S0455
*              MASKBYTE = MASKBYTE + ONE;                       02S0455
         B     @RC00453                                         02S0455
@RF00453 AH    MASKBYTE,@CH00052                                02S0455
*            VERIFYMK(MASKBYTE)=VERIFYMK(MASKBYTE) × MASKTAB(MASKBIT);
@RC00453 L     @12,@PC00001+8                                   02S0456
         L     @12,ALCWAPTR(,@12)                               02S0456
         L     @12,WORK3MP(,@12)                                02S0456
         ALR   @12,MASKBYTE                                     02S0456
         BCTR  @12,0                                            02S0456
         LA    @11,MASKTAB-1(MASKBIT)                           02S0456
         OC    VERIFYMK(1,@12),0(@11)                           02S0456
*                               /*SET BIT IN GROUP MASK              */
*          END;                                                 02S0457
*        IF NONSPEPV = ON THEN         /*NON-SPECIFIC PRIVATE REQUEST*/
@RF00448 TM    NONSPEPV,B'00010000'                             02S0458
         BNO   @RF00458                                         02S0458
*          VMVNSPVT = ON;              /*INDICATE SO                 */
         L     @12,VMVREQBP                                     02S0459
         OI    VMVNSPVT(@12),B'00000001'                        02S0459
*        VMVJBNMP = ADDR(ALCJOBN);     /*POINTER TO JOB NAME         */
@RF00458 L     @12,VMVREQBP                                     02S0460
         L     @11,@PC00001+8                                   02S0460
         L     @11,ALCWAPTR(,@11)                               02S0460
         L     @11,TIOTHDRP(,@11)                               02S0460
         ST    @11,VMVJBNMP(,@12)                               02S0460
*        VMVJSNMP = ADDR(ALCSTEPN);    /*ADDR OF JOB STEP NAME       */
         LA    @11,ALCSTEPN(,@11)                               02S0461
         ST    @11,VMVJSNMP(,@12)                               02S0461
*        JFCBPTR =SJFCBPTR;            /*PTR TO JFCB                 */
         L     @11,@PC00001+4                                   02S0462
         L     @11,SIOTPTR(,@11)                                02S0462
         L     JFCBPTR,SJFCBPTR(,@11)                           02S0462
*        IF BADSN = ON THEN            /*MONITOR JOBNAMES ON         */
         L     @11,CVTPTR                                       02S0463
         L     @11,CVTMSER(,@11)                                02S0463
         TM    BADSN(@11),B'10000000'                           02S0463
         BNO   @RF00463                                         02S0463
*          IF JFCTEMP ^= ON THEN       /*NOT TEMPORARY DATASET       */
         TM    JFCTEMP(JFCBPTR),B'00000001'                     02S0464
         BO    @RF00464                                         02S0464
*            VMVDSNMP = JFCBPTR;       /*POINTER TO DATA SET NAME    */
         ST    JFCBPTR,VMVDSNMP(,@12)                           02S0465
*        IF (INVOLID(1) = NONSPTAP ×   /*NON-SPECIFIC TAPE REQ       */
*           INVOLID(1) = NONSPDA) &                             02S0466
*           UCB3TAPE = ON THEN                                  02S0466
@RF00464 DS    0H                                               02S0466
@RF00463 L     @12,@PC00001                                     02S0466
         CLI   INVOLID(@12),X'FF'                               02S0466
         BE    @GL00044                                         02S0466
         CLI   INVOLID(@12),X'FE'                               02S0466
         BNE   @RF00466                                         02S0466
@GL00044 L     @12,UCBPTR                                       02S0466
         TM    UCB3TAPE(@12),B'10000000'                        02S0466
         BNO   @RF00466                                         02S0466
*          DO;                                                  02S0467
*            IF SIOTASCI = ON THEN     /*ASCII LABEL TAPE            */
         L     @12,@PC00001+4                                   02S0468
         L     @12,SIOTPTR(,@12)                                02S0468
         TM    SIOTASCI(@12),B'00010000'                        02S0468
         BNO   @RF00468                                         02S0468
*              VMVALTAP = ON;          /*INDICATE ASCII LABEL        */
         L     @12,VMVREQBP                                     02S0469
         OI    VMVALTAP(@12),B'00010000'                        02S0469
*            ELSE                                               02S0470
*              IF SCTUNLBD = ON THEN   /*UNLABELED TAPE              */
         B     @RC00468                                         02S0470
@RF00468 L     @12,@PC00001+4                                   02S0470
         L     @12,SIOTPTR(,@12)                                02S0470
         TM    SCTUNLBD(@12),B'00001000'                        02S0470
         BNO   @RF00470                                         02S0470
*                VMVNLTAP = ON;        /*INDICATE NON-LABELED TAPE   */
         L     @12,VMVREQBP                                     02S0471
         OI    VMVNLTAP(@12),B'00001000'                        02S0471
*              ELSE                                             02S0472
*                IF SCTLABEL = OFF THEN /*STANDARD LABEL TAPE        */
         B     @RC00470                                         02S0472
@RF00470 L     @12,@PC00001+4                                   02S0472
         L     @12,SIOTPTR(,@12)                                02S0472
         TM    SCTLABEL(@12),B'00000100'                        02S0472
         BNZ   @RF00472                                         02S0472
*                  VMVSLTAP = ON;      /*INDICATE STANDARD LABEL     */
         L     @12,VMVREQBP                                     02S0473
         OI    VMVSLTAP(@12),B'00000100'                        02S0473
*                ELSE                                           02S0474
*                  VMVNSLTP = ON;      /*INDICATE NSL TAPE           */
         B     @RC00472                                         02S0474
@RF00472 L     @12,VMVREQBP                                     02S0474
         OI    VMVNSLTP(@12),B'00000010'                        02S0474
*          END;                                                 02S0475
@RC00472 DS    0H                                               02S0475
@RC00470 DS    0H                                               02S0475
@RC00468 DS    0H                                               02S0476
*        IF SIOTVMVP ^= ZERO THEN      /*SOME VMV RBS ALREADY@ZA05841*/
@RF00466 L     @12,@PC00001+4                                   02S0476
         L     @12,SIOTPTR(,@12)                                02S0476
         L     @12,SIOTVMVP(,@12)                               02S0476
         LTR   @12,@12                                          02S0476
         BZ    @RF00476                                         02S0476
*          DO;                         /*YES, NEW RB AT END  @ZA05841*/
*            ENDVMVP = SIOTVMVP;       /*FIRST VMV RB        @ZA05841*/
         LR    ENDVMVP,@12                                      02S0478
*            DO WHILE ENDVMVP->VMVNREQP ^= ZERO; /*FIND END  @ZA05841*/
         B     @DE00479                                         02S0479
@DL00479 DS    0H                                               02S0480
*              ENDVMVP = ENDVMVP->VMVNREQP; /*GET NEXT VMV RB@ZA07505*/
         L     ENDVMVP,VMVNREQP(,ENDVMVP)                       02S0480
*            END;                      /*                    @ZA05841*/
@DE00479 ICM   @12,15,VMVNREQP(ENDVMVP)                         02S0481
         BNZ   @DL00479                                         02S0481
*            ENDVMVP->VMVNREQP = VMVREQBP; /*CHAIN NEW RB    @ZA05841*/
         MVC   VMVNREQP(4,ENDVMVP),VMVREQBP                     02S0482
*          END;                        /*END NEW RB AT END   @ZA05841*/
*        ELSE                          /*NO VMV RBS FROM SIOT@ZA05841*/
*          SIOTVMVP = VMVREQBP;        /*START VMV RB CHAIN  @ZA05841*/
         B     @RC00476                                         02S0484
@RF00476 L     @12,@PC00001+4                                   02S0484
         L     @12,SIOTPTR(,@12)                                02S0484
         MVC   SIOTVMVP(4,@12),VMVREQBP                         02S0484
*      END;                                                     02S0485
@RC00476 DS    0H                                               02S0486
*    IF VMVUNLOD = ON THEN             /*ONLY UNLOAD FUNCTION DONE   */
@RF00435 L     @12,VMVREQBP                                     02S0486
         TM    VMVUNLOD(@12),B'10000000'                        02S0486
         BNO   @RF00486                                         02S0486
*      DO;                                                      02S0487
*        RFY (REG0,REG1) RSTD;                                  02S0488
*        REG0 = VMVRBLEN;                                       02S0489
         L     REG0,VMVRBLEN                                    02S0489
*        REG0 = REG0 × SUBPL230;       /* FREE FROM SUBPOOL 230.     */
         O     REG0,@CF00214                                    02S0490
*        REG1 = VMVREQBP;                                       02S0491
         LR    REG1,@12                                         02S0491
*        GEN ( FREEMAIN R,LV=(0),A=(1) );  /*FREE VM&V REQUEST BLOCK */
          FREEMAIN R,LV=(0),A=(1)
*        RFY (REG0,REG1) UNRSTD;                                02S0493
*      END;                                                     02S0494
*  END;                                                         02S0495
*ELSE                                  /*GETMAIN ERROR               */
*  DO;                                                          02S0496
         B     @RC00418                                         02S0496
@RF00418 DS    0H                                               02S0497
*    FAILRSC = GETERR;                 /*SET STEP REASON CODE 2      */
         L     @12,@PC00001+8                                   02S0497
         L     @12,ALCWAPTR(,@12)                               02S0497
         L     @12,FAILRSCP(,@12)                               02S0497
         MVC   FAILRSC(2,@12),@CH00174                          02S0497
*    RETCODE = ERROR;                  /*SET RETURN CODE 4           */
         LA    RETCODE,4                                        02S0498
*  END;                                                         02S0499
*END VMVINT;                                                    02S0500
@EL00002 DS    0H                                               02S0500
@EF00002 DS    0H                                               02S0500
@ER00002 LM    @14,@07,@SA00002                                 02S0500
         LM    @09,@12,@SA00002+40                              02S0500
         BR    @14                                              02S0500
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - VMVSETUP                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - DETERMINE VM&V FUNCTIONS NEEDED               */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS SEGMENT DETERMINES IF THE MOUNT AND UNLOAD FUNCTIONS OF   */
*/*   VM&V ARE REQUIRED.                                             */
*/*                                                                  */
*/*   IF THE ROUTINE IS CALLED BECAUSE OF A DEFERRED MOUNT REQUEST,  */
*/*   IT CHECKS ONLY FOR THE UNLOAD FUNCTION. AN UNLOAD WILL BE      */
*/*   PERFORMED IF A VOLUME OTHER THAN THE ONE TO BE ALLOCATED IS    */
*/*   MOUNTED ON THE REQUIRED UNIT, UNLESS BOTH THE MOUNTED VOLUME   */
*/*   AND THE VOLUME TO BE ALLOCATED ARE SCRATCH TAPES,      @YM07772*/
*/*   WITH FF VOLSERS AND THE REQUEST IS NOT DEFER.          @YM07772*/
*/*                                                                  */
*/*   IF THE ROUTINE IS CALLED IN THE MAIN STREAM PROCESSING, IT DOES*/
*/*   THE UNLOAD PROCESSING DESCRIBED ABOVE. IF THE UCB      @Y30QPPB*/
*/*   REPRESENTS A JES3 MANAGED UNIT AND THIS IS A NON-      @Y30QPPB*/
*/*   SPECIFIC TAPE REQUEST, THE VOLUME ALREADY MOUNTED      @Y30QPPB*/
*/*   BY JES3 SHOULD BE USED. IN ADDITION, THIS ROUTINE      @Y30QPPB*/
*/*   DETERMINES IF A MOUNT IS REQUIRED. A MOUNT IS NEEDED UNLESS    */
*/*   BOTH THE MOUNTED VOLUME AND THE VOLUME TO BE ALLOCATED ARE     */
*/*   SCRATCH TAPES, AND THE DEVICE IS READY.                @YM07772*/
*/*                                                                  */
*/* ENTRY - CLOSED SUBROUTINE OF IEFAB435                            */
*/*                                                                  */
*/*   PURPOSE - TO DETERMINE IF AN UNLOAD AND/OR MOUNT IS REQUIRED   */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     MOUNTSW - INDICATES IF MOUNT REQUIRED                        */
*/*     UCBPTR - PTR TO UCB TO BE ALLOCATED                          */
*/*     UCBPARML - FOR INPUT VOLUME SERIAL                           */
*/*     VUPTR - FOR PRIVATE VOLUME INDICATOR                         */
*/*                                                                  */
*/* EXIT-NORMAL - RETURN TO CALLER                                   */
*/*                                                                  */
*/*   CONDITION - FUNCTIONS TO BE PERFORMED BY VM&V DETERMINED       */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     MOUNT SWITCH SET IF MOUNT TO BE PERFORMED                    */
*/*     UNLOAD SWITCH SET IF UNLOAD TO BE PERFORMED                  */
*/*                                                                  */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/********************************************************************/
*VMVSETUP: PROC;                                                02S0501
VMVSETUP STM   @14,@07,@SA00003                                 02S0501
         STM   @09,@12,@SA00003+40                              02S0501
*IF UCBJES3 = ON &                     /*JES MANAGED DEVICE  @ZA09206*/
*   UCB3TAPE = ON &                    /*TAPE                @ZA09206*/
*   UCBNOTRD = OFF THEN                /*DEVICE MARKED READY @ZA09206*/
         L     @12,UCBPTR                                       02S0502
         TM    UCBJES3(@12),B'01000000'                         02S0502
         BNO   @RF00502                                         02S0502
         TM    UCB3TAPE(@12),B'10000000'                        02S0502
         BNO   @RF00502                                         02S0502
         TM    UCBNOTRD(@12),B'01000000'                        02S0502
         BNZ   @RF00502                                         02S0502
*  CALL IEFAB4E0(UCBPTR);              /*DETERMINE IF DEVICE IS READY
*                                                            @ZA09206*/
         LA    @12,UCBPTR                                       02S0503
         ST    @12,@AL00001                                     02S0503
         L     @15,@CV00092                                     02S0503
         LA    @01,@AL00001                                     02S0503
         BALR  @14,@15                                          02S0503
*IF UCBVOLI ^= NOUCBVOL THEN           /*VOLSER IN UCB               */
@RF00502 L     @12,UCBPTR                                       02S0504
         CLC   UCBVOLI(6,@12),NOUCBVOL                          02S0504
         BE    @RF00504                                         02S0504
*  IF UCB3TAPE = ON THEN               /*TAPE UNIT                   */
         TM    UCB3TAPE(@12),B'10000000'                        02S0505
         BNO   @RF00505                                         02S0505
*    DO;                                                        02S0506
*      IF UCBVOLI(1) = NONSPTAP ×      /*SCRATCH TAPE MOUNTED        */
*        (INVOLID(1) = NONSPTAP ×      /*OR SCRATCH TAPE REQUEST     */
*         INVOLID(1) = NONSPDA) THEN                            02S0507
         CLI   UCBVOLI(@12),X'FF'                               02S0507
         BE    @RT00507                                         02S0507
         L     @12,@PC00001                                     02S0507
         CLI   INVOLID(@12),X'FF'                               02S0507
         BE    @RT00507                                         02S0507
         CLI   INVOLID(@12),X'FE'                               02S0507
         BNE   @RF00507                                         02S0507
@RT00507 DS    0H                                               02S0508
*        DO;                                                    02S0508
*          IF UCBVOLI(1) = NONSPTAP &  /*SCRATCH TAPE VOLID IN UCB
*                                                            @YM07772*/
*             (INVOLID(1) = NONSPTAP × /*SCRATCH REQUEST     @YM07772*/
*              INVOLID(1) = NONSPDA) THEN /*SCRATCH REQUEST  @YM07772*/
         L     @12,UCBPTR                                       02S0509
         CLI   UCBVOLI(@12),X'FF'                               02S0509
         BNE   @RF00509                                         02S0509
         L     @12,@PC00001                                     02S0509
         CLI   INVOLID(@12),X'FF'                               02S0509
         BE    @RT00509                                         02S0509
         CLI   INVOLID(@12),X'FE'                               02S0509
         BNE   @RF00509                                         02S0509
@RT00509 DS    0H                                               02S0510
*            DO;                       /*BOTH NON-SPECIFIC   @YM07772*/
*              IF VOLDEFER = ON ×      /*DEFER REQUEST       @YM07772*/
*                 INVOLID = NONSPDA THEN /*FE VOLSER         @YM07772*/
         L     @12,@PC00001+12                                  02S0511
         L     @12,VUPTR(,@12)                                  02S0511
         TM    VOLDEFER(@12),B'00000001'                        02S0511
         BO    @RT00511                                         02S0511
         L     @12,@PC00001                                     02S0511
         CLI   INVOLID(@12),X'FE'                               02S0511
         BNE   @RF00511                                         02S0511
@RT00511 DS    0H                                               02S0512
*                UNLOAD = ON;          /* UNLOAD IT          @YM07772*/
         OI    UNLOAD,B'10000000'                               02S0512
*              ELSE                    /*NOT DEFER NOR FE    @YM07772*/
*                IF UCBNOTRD = OFF THEN /*DEVICE IS READY    @YM07772*/
         B     @RC00511                                         02S0513
@RF00511 L     @12,UCBPTR                                       02S0513
         TM    UCBNOTRD(@12),B'01000000'                        02S0513
         BNZ   @RF00513                                         02S0513
*                  NOCALL = ON;        /*ACCEPT MOUNTED SCRATCH VOL,
*                                        I.E., REQUEST NEITHER DIS-
*                                        MOUNT NOR MOUNT     @YM07772*/
         OI    NOCALL,B'10000000'                               02S0514
*                ELSE;                 /*DEVICE NOT READY(MOUNT WILL
*                                        BE REQUESTED.)      @YM07772*/
@RF00513 DS    0H                                               02S0516
*            END;                      /*END OF BOTH NON        02S0516
*                                        SPECIFIC            @YM07772*/
*          ELSE                        /*EITHER REQUEST IS SPECIFIC
*                                        OR VOLID IN UCB IS     02S0517
*                                        NOT FF              @YM07772*/
*            IF UCBJES3 = ON &         /*JES3 MANAGED UNIT   @Y30QPPB*/
*               UCBNOTRD = OFF &       /*DEVICE WAS SETUP    @ZA09206*/
*               (INVOLID(1) = NONSPTAP × /*NON SPECIFIC TAPE,@Y30QPPB*/
*                INVOLID(1) = NONSPDA) & /*NON SPECIFIC DA & @Y30QPPB*/
*               VOLDEFER = OFF THEN    /*NOT DEFER           @Y30QPPB*/
         B     @RC00509                                         02S0517
@RF00509 L     @12,UCBPTR                                       02S0517
         TM    UCBJES3(@12),B'01000000'                         02S0517
         BNO   @RF00517                                         02S0517
         TM    UCBNOTRD(@12),B'01000000'                        02S0517
         BNZ   @RF00517                                         02S0517
         L     @12,@PC00001                                     02S0517
         CLI   INVOLID(@12),X'FF'                               02S0517
         BE    @GL00053                                         02S0517
         CLI   INVOLID(@12),X'FE'                               02S0517
         BNE   @RF00517                                         02S0517
@GL00053 L     @12,@PC00001+12                                  02S0517
         L     @12,VUPTR(,@12)                                  02S0517
         TM    VOLDEFER(@12),B'00000001'                        02S0517
         BNZ   @RF00517                                         02S0517
*              DO;                     /*YES,NO MNT OR UNLD  @Y30QPPB*/
*                MOUNTSW = OFF;        /*NO MOUNT NEEDED     @Y30QPPB*/
         NI    MOUNTSW,B'01111111'                              02S0519
*                NOCALL = ON;          /*USE VOL ALREADY UP  @Y30QPPB*/
         OI    NOCALL,B'10000000'                               02S0520
*              END;                    /*END NO MNT OR UNLD  @Y30QPPB*/
*            ELSE                      /*NOT JES3 OR SPECFC  @Y30QPPB*/
*              UNLOAD = ON;            /*UNLOAD THE VOLUME   @Y30QPPB*/
         B     @RC00517                                         02S0522
@RF00517 OI    UNLOAD,B'10000000'                               02S0522
*        END;                                                   02S0523
*      ELSE                            /*NO SCRATCH TAPE             */
*        UNLOAD = ON;                  /*UNLOAD NEEDED               */
         B     @RC00507                                         02S0524
@RF00507 OI    UNLOAD,B'10000000'                               02S0524
*    END;                                                       02S0525
*  ELSE                                /*NOT TAPE                    */
*    UNLOAD = ON;                      /*UNLOAD NEEDED               */
         B     @RC00505                                         02S0526
@RF00505 OI    UNLOAD,B'10000000'                               02S0526
*ELSE;                                                          02S0527
@RF00504 DS    0H                                               02S0528
*IF NOCALL = OFF &                     /*UNLOAD AND/OR MOUNT REQD OR
*                                                            @Y30QPPB*/
*   (UCB3TAPE = OFF ×                  /*NOT TAPE OR         @Y30QPPB*/
*   (UCB3TAPE = ON &                   /*TAPE REQUEST        @ZA09206*/
*   (UCBJES3 = OFF ×                   /*NOT JES3 MANAGED    @ZA09206*/
*   (UCBJES3 = ON & UCBNOTRD = ON)))) THEN /*NOT SETUP BY JES@ZA09206*/
@RC00504 TM    NOCALL,B'10000000'                               02S0528
         BNZ   @RF00528                                         02S0528
         L     @12,UCBPTR                                       02S0528
         TM    UCB3TAPE(@12),B'10000000'                        02S0528
         BZ    @RT00528                                         02S0528
         TM    UCB3TAPE(@12),B'10000000'                        02S0528
         BNO   @RF00528                                         02S0528
         TM    UCBJES3(@12),B'01000000'                         02S0528
         BZ    @RT00528                                         02S0528
         TM    UCBJES3(@12),B'01000000'                         02S0528
         BNO   @RF00528                                         02S0528
         TM    UCBNOTRD(@12),B'01000000'                        02S0528
         BNO   @RF00528                                         02S0528
@RT00528 DS    0H                                               02S0529
*  DO;                                                          02S0529
*    IF MOUNTSW = ON THEN              /*MOUNT REQUIRED              */
         TM    MOUNTSW,B'10000000'                              02S0530
         BNO   @RF00530                                         02S0530
*      MOUNT = ON;                     /*INDICATE MOUNT NEEDED       */
         OI    MOUNT,B'01000000'                                02S0531
*    IF UNLOAD = ON ×                  /*UNLOAD IS NEEDED            */
*       MOUNT = ON THEN                /*OR MOUNT NEEDED             */
@RF00530 TM    UNLOAD,B'11000000'                               02S0532
         BZ    @RF00532                                         02S0532
*      CALL VMVINT;                    /*VM&V INTERFACE ROUTINE      */
         BAL   @14,VMVINT                                       02S0533
*  END;                                                         02S0534
*END VMVSETUP;                                                  02S0535
@EL00003 DS    0H                                               02S0535
@EF00003 DS    0H                                               02S0535
@ER00003 LM    @14,@07,@SA00003                                 02S0535
         LM    @09,@12,@SA00003+40                              02S0535
         BR    @14                                              02S0535
*END IEFAB435                                                   01S0536
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (A435SPEC)                                        *
*/*%INCLUDE SYSLIB  (A435DATA)                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IHAFRRS )                                        *
*/*%INCLUDE SYSLIB  (IHAPSA  )                                        *
*/*%INCLUDE SYSLIB  (IEEBASEA)                                        *
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                        *
*/*%INCLUDE SYSLIB  (IEFASIOT)                                        *
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                        *
*/*%INCLUDE SYSLIB  (IEFZB447)                                        *
*/*%INCLUDE SYSLIB  (IEFZB422)                                        *
*/*%INCLUDE SYSLIB  (IEFZB423)                                        *
*/*%INCLUDE SYSLIB  (IEFZB425)                                        *
*/*%INCLUDE SYSLIB  (IEFZB426)                                        *
*/*%INCLUDE SYSLIB  (IEFZB428)                                        *
*/*%INCLUDE SYSLIB  (IEFZB431)                                        *
*/*%INCLUDE SYSLIB  (UPDUCB  )                                        *
*/*%INCLUDE SYSLIB  (UPUCBSPC)                                        *
*/*%INCLUDE SYSLIB  (FINDVOL )                                        *
*/*%INCLUDE SYSLIB  (FINDSPEC)                                        *
*/*%INCLUDE SYSLIB  (CHEKTYPE)                                        *
*/*%INCLUDE SYSLIB  (CHECKSPC)                                        *
*/*%INCLUDE SYSLIB  (TAPECHK )                                        *
*/*%INCLUDE SYSLIB  (TAPESPC )                                        *
*/*%INCLUDE SYSLIB  (VMVINT  )                                        *
*/*%INCLUDE SYSLIB  (VMVSPEC )                                        *
*/*%INCLUDE SYSLIB  (VMVSETUP)                                        *
*/*%INCLUDE SYSLIB  (SETUPSPC)                                        *
*;                                                              01S0536
@DATA    DS    0H
@CH00052 DC    H'1'
@CH00174 DC    H'2'
@CH00071 DC    H'4'
@CH00176 DC    H'20'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    5F
@SA00003 DS    14F
@SA00002 DS    14F
@AL00001 DS    5A
IEFAB435 CSECT
         DS    0F
@CF00188 DC    F'0'
@CF00050 DC    F'8'
@CF00214 DC    XL4'E6000000'
@DATD    DSECT
         DS    0D
EDLGNTP  DS    A
EDLPTR   DS    A
EDLUCBLP DS    A
FRRUSERP DS    A
UCBPTR   DS    A
VMVREQBP DS    A
FRRSPTR  DS    A
FRREPTR  DS    A
NUMVUENT DS    F
ALCDTYPE DS    CL4
FOUNDSW  DS    BL1
         DS    CL7
FRRPARMS DS    CL92
         ORG   FRRPARMS
FRRAUTO  DS    CL84
FRRFLAGS DS    BL1
         ORG   FRRFLAGS
UCBUPDT  DS    BL1
@NM00001 EQU   FRRFLAGS+0
         ORG   FRRPARMS+85
FRRUSECT DS    AL1
@NM00002 DS    BL2
EXITP    DS    AL4
         ORG   FRRPARMS+92
INTYPST  DS    CL4
         ORG   INTYPST
INTYPCOM DS    CL4
         ORG   INTYPCOM
@NM00005 DS    BL1
INTYPBT2 DS    BL1
         ORG   INTYPBT2
INTRK7   DS    BL1
         ORG   INTYPCOM+2
@NM00006 DS    BL1
         ORG   @NM00006
INTAPE   DS    BL1
@NM00007 EQU   @NM00006+0
INDACC   EQU   @NM00006+0
         ORG   INTYPCOM+3
INTYPBT4 DS    BL1
         ORG   INTYPST+4
MOUNTSW  DS    BL1
NOCALL   DS    BL1
NOMNTSW  DS    BL1
TYPMATCH DS    BL1
VFUNCMAP DS    BL1
         ORG   VFUNCMAP
UNLOAD   DS    BL1
MOUNT    EQU   VFUNCMAP+0
NOMNTMSG EQU   VFUNCMAP+0
NONSPEPV EQU   VFUNCMAP+0
VERLABEL EQU   VFUNCMAP+0
NONSPECF EQU   VFUNCMAP+0
USELUP   EQU   VFUNCMAP+0
         ORG   VFUNCMAP+1
VOLTYPST DS    CL4
         ORG   VOLTYPST
TYPCOMP  DS    CL4
         ORG   TYPCOMP
@NM00008 DS    BL1
VLTYPBT2 DS    BL1
         ORG   VLTYPBT2
VOLTRK7  DS    BL1
         ORG   TYPCOMP+2
@NM00009 DS    BL1
VLTYPBT4 DS    BL1
         ORG   VOLTYPST+4
IEFAB435 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CV00092 DC    V(IEFAB4E0)
@CV00093 DC    V(IEFAB4E6)
@CV00094 DC    V(IEFAB49C)
@CV02522 DC    V(IEFAB441)
         DS    0D
VMVRBLEN DC    AL4(52)
VOLENTLN DC    AL4(28)
GTSTZERO DC    F'0'
ENDINDIC DC    XL2'FFFF'
@CB00216 DC    X'3000'
@CB00218 DC    X'3200'
@CB00220 DC    X'3210'
@CB00222 DC    X'3400'
@CB00224 DC    X'3420'
FUNC441  DC    B'10000000'
NOUCBVOL DC    X'000000000000'
NOVOLSER DC    CL6' '
MASKTAB  DC    X'80'
         DC    X'40'
         DC    X'20'
         DC    X'10'
         DC    X'08'
         DC    X'04'
         DC    X'02'
         DC    X'01'
IEFAB435 CSECT
         DS   0H
A435PTCH DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFAB435 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
GTSTRTCD EQU   @03
RETCODE  EQU   @08
MASKBYTE EQU   @02
MASKBIT  EQU   @03
LUTNO    EQU   @02
SAVUCBP  EQU   @03
JFCBPTR  EQU   @02
ENDVMVP  EQU   @02
REG0     EQU   @00
REG1     EQU   @01
REG2     EQU   @02
REG3     EQU   @03
REG4     EQU   @04
REG15    EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14P   EQU   @14
GPR15P   EQU   @15
GPR13P   EQU   @13
GPR12P   EQU   @12
GPR11P   EQU   @11
GTSTR0   EQU   @00
GTSTR1   EQU   @01
GTSTR2   EQU   @02
GTSTR15  EQU   @15
GTSTR4   EQU   @04
GTSTR5   EQU   @05
GTSTR6   EQU   @06
GTSTR7   EQU   @07
GTSTR8   EQU   @08
GPR00F   EQU   @00
GPR01F   EQU   @01
GPR11F   EQU   @11
GPR12F   EQU   @12
GPR13F   EQU   @13
GPR14F   EQU   @14
GPR15F   EQU   @15
GTSTR3   EQU   @03
CVTPTR   EQU   16
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
CANCLECB EQU   0
FAILRSC  EQU   0
FRRUSER  EQU   0
FRRPARMP EQU   FRRUSER
IOSLUT   EQU   0
VERIFYMK EQU   0
VMVRQBLK EQU   0
VMVFNMAP EQU   VMVRQBLK
VMVOPTB1 EQU   VMVFNMAP
VMVUNLOD EQU   VMVOPTB1
VMVUCB   EQU   VMVOPTB1
VMVMOUNT EQU   VMVOPTB1
VMVMTMSG EQU   VMVOPTB1
VMVDWTOR EQU   VMVOPTB1
VMVVRLBL EQU   VMVOPTB1
VMVOPTB2 EQU   VMVFNMAP+1
VMVALTAP EQU   VMVOPTB2
VMVNLTAP EQU   VMVOPTB2
VMVSLTAP EQU   VMVOPTB2
VMVNSLTP EQU   VMVOPTB2
VMVNSPVT EQU   VMVOPTB2
VMVOPTB3 EQU   VMVFNMAP+2
VMVNREQP EQU   VMVRQBLK+4
VMVUCBP  EQU   VMVRQBLK+9
VMVMVLSR EQU   VMVRQBLK+18
VMVJBNMP EQU   VMVRQBLK+24
VMVDSNMP EQU   VMVRQBLK+28
VMVJSNMP EQU   VMVRQBLK+32
VMVMINFO EQU   VMVRQBLK+40
VMVACTON EQU   VMVMINFO
VMVVUNTP EQU   VMVRQBLK+44
VMVUSER  EQU   VMVRQBLK+48
VOLUNTAB EQU   0
VOLSTAT  EQU   VOLUNTAB+6
VOLSTATA EQU   VOLSTAT
VOLPUB   EQU   VOLSTATA
VOLPRV   EQU   VOLSTATA
VOLSPEC  EQU   VOLSTATA
VOLSTG   EQU   VOLSTATA
VOLNSHR  EQU   VOLSTATA
VOLDEFER EQU   VOLSTATA
VOLSTATB EQU   VOLSTAT+1
VOLMNTD  EQU   VOLSTATB
VUDNALOC EQU   VOLSTATB
VUVINELG EQU   VOLSTATB
VOLSTATC EQU   VOLSTAT+2
VOLSTATD EQU   VOLSTAT+3
VUVLUNIQ EQU   VOLSTATD
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTMSER  EQU   CVTMAP+148
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSENTR EQU   0
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
BASE     EQU   0
@NM00038 EQU   BASE+13
BALGSTAT EQU   BASE+24
BALOG    EQU   BALGSTAT+4
BASFL    EQU   BASE+36
BARSW    EQU   BASFL
MSLOGST  EQU   BASE+46
BASPBYTE EQU   BASE+47
BAMONITR EQU   BASE+56
BADSN    EQU   BAMONITR
@NM00060 EQU   BASE+104
MSLGCLOZ EQU   BASE+108
MSCLOSSW EQU   MSLGCLOZ
MSLGWLOG EQU   BASE+112
MSWLOGSW EQU   MSLGWLOG
MSLGWTR  EQU   BASE+116
MSWTRSW  EQU   MSLGWTR
MSLGSTRT EQU   BASE+120
MSSTRTSW EQU   MSLGSTRT
MS1BASEX EQU   BASE+136
BASES01  EQU   0
MSNTAL   EQU   BASES01
MSSSB    EQU   BASES01+1
MSBTN    EQU   MSSSB
MSPFG    EQU   BASES01+2
MSECBFL  EQU   BASES01+3
MSTUS    EQU   BASES01+4
MSSSA    EQU   MSTUS
MSINLSW  EQU   MSSSA
MSREOF   EQU   MSSSA
MSNWP    EQU   MSSSA
MSFHF    EQU   BASES01+5
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCBLTYP EQU   INFMJFCB+66
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCTEMP  EQU   JFCBIND2
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
INDMSIOT EQU   0
SCTUSADD EQU   INDMSIOT+20
SIOTBYT1 EQU   INDMSIOT+43
SIOTBYT3 EQU   INDMSIOT+46
SIOTTSTC EQU   INDMSIOT+47
SIOTBYT0 EQU   INDMSIOT+52
SIOTRTRY EQU   SIOTBYT0
SCTSDISP EQU   INDMSIOT+55
SCTSBYT1 EQU   INDMSIOT+56
SCTSBYT2 EQU   INDMSIOT+57
SCTUNLBD EQU   SCTSBYT2
SCTLABEL EQU   SCTSBYT2
SCTSBYT3 EQU   INDMSIOT+58
SCTSBYT4 EQU   INDMSIOT+59
SIOTASCI EQU   SCTSBYT4
SCTUTYPE EQU   INDMSIOT+60
SIOTDEVT EQU   SCTUTYPE
SIOUBYT3 EQU   SIOTDEVT+2
SIOTALTD EQU   INDMSIOT+92
SIOTBYT2 EQU   INDMSIOT+103
SIOTRSNC EQU   INDMSIOT+130
SIOTEDLP EQU   INDMSIOT+136
SJFCBPTR EQU   INDMSIOT+156
SIOTVMVP EQU   INDMSIOT+164
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBJES3  EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBRESV  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBNOTRD EQU   UCBNRY
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCB3TAPE EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00100 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBNSRCH EQU   UCBFLP1
UCBASID  EQU   UCBCMEXT+14
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
PRMESTAE EQU   0
PRMRESC  EQU   PRMESTAE+252
PRMFUNC  EQU   PRMESTAE+253
TIOTBLT  EQU   PRMFUNC
IEFEDL   EQU   0
EDLHDR   EQU   IEFEDL
EDLUVFLG EQU   EDLHDR+16
EDLENTRY EQU   0
EDLDTFLG EQU   EDLENTRY+20
EDLGNTRY EQU   0
EDLGRFLG EQU   EDLGNTRY+16
EDLUCBL  EQU   0
EDLINDIC EQU   EDLUCBL+2
ALCWA    EQU   0
FMAPPTR  EQU   ALCWA+4
IOSLUTP  EQU   ALCWA+16
FAILRSCP EQU   ALCWA+20
CNTABLE  EQU   ALCWA+28
ALGTABP  EQU   ALCWA+88
INDICATE EQU   ALCWA+112
INDWAIT  EQU   INDICATE
INDRETRY EQU   INDICATE
@NM00108 EQU   ALCWA+113
ALCWASID EQU   ALCWA+114
TIOTHDRP EQU   ALCWA+120
WORK3MP  EQU   ALCWA+136
CANCELP  EQU   ALCWA+140
EXITPRMP EQU   ALCWA+144
NAMES    EQU   0
ALCJOBN  EQU   NAMES
ALCSTEPN EQU   NAMES+8
ALGPTRS  EQU   0
CVRPARM  EQU   0
CVRFLG1  EQU   CVRPARM+8
CVRRQLST EQU   0
CVRMIN   EQU   CVRRQLST+10
CVRFLG2  EQU   CVRRQLST+16
CVRGPLST EQU   0
CVRFLG3  EQU   CVRGPLST+12
GRPCOUNT EQU   0
FUNCMAP  EQU   0
VOLMNTSW EQU   FUNCMAP
WRTMSGSW EQU   FUNCMAP
UWAITSW  EQU   FUNCMAP
VWAITSW  EQU   FUNCMAP
OFFDEVSW EQU   FUNCMAP
CCLMNTSW EQU   FUNCMAP
GENLOKSW EQU   FUNCMAP
HDRMSGSW EQU   FUNCMAP+1
MTRJOBSW EQU   FUNCMAP+1
NOTIOTNQ EQU   FUNCMAP+1
TRKMSW   EQU   FUNCMAP+1
WAITOKSW EQU   FUNCMAP+1
ASNMSW   EQU   FUNCMAP+1
IKEBC    EQU   0
IKEBF15  EQU   0
IKEBF31  EQU   0
IKEBP15  EQU   0
IKEBP31  EQU   0
IKEBP8   EQU   0
UCBBGN   EQU   0
UCBPARML EQU   0
UCBAD    EQU   UCBPARML
INVOLID  EQU   UCBPARML+2
INFLAGS  EQU   UCBPARML+8
VALIDCHK EQU   INFLAGS
UPUSEAT  EQU   INFLAGS
PUBPRV   EQU   INFLAGS
NOTHPRV  EQU   INFLAGS
SIOTPTR  EQU   0
ALCWAPTR EQU   0
VUPTR    EQU   0
GROUPID  EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
PSARSVTE EQU   PSARSVT
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
JFCSPPRT EQU   JFCTRTCH
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCDSRG2 EQU   JFCDSORG+1
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBVOLS EQU   JFCUCSEG+10
JFCBS001 EQU   JFCBVOLS
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
JFCBSPNM EQU   JFCBS001+45
JFCBFLG3 EQU   JFCBSPNM
UCBOBS01 EQU   UCBDEV
UCBVOLI  EQU   UCBOBS01+4
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBMOUNT EQU   UCBDMCT
UCBFL4   EQU   UCBOBS01+13
UCBUSER  EQU   UCBOBS01+14
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00099 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
FLC      EQU   PSA
*                                      START UNREFERENCED COMPONENTS
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00099
UCBSKPFG EQU   @NM00099
UCBRIPND EQU   @NM00099
UCBRTIAC EQU   @NM00099
UCBRSV79 EQU   @NM00099
UCBRSV78 EQU   @NM00099
UCBRSV77 EQU   @NM00099
UCBOLTEP EQU   @NM00099
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBDQDSP EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00098 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVTOC  EQU   UCBOBS01
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBRV08 EQU   JFCBSPNM+1
JFCBRV07 EQU   JFCBFLG3
JFCBRV06 EQU   JFCBFLG3
JFCBRV05 EQU   JFCBFLG3
JFCBRV04 EQU   JFCBFLG3
JFCBRV03 EQU   JFCBFLG3
JFCBRV02 EQU   JFCBFLG3
JFCBEXP  EQU   JFCBFLG3
JFCDQDSP EQU   JFCBFLG3
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCVRDS  EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCRSV42 EQU   JFCFLGS1
JFCBADSP EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBMSGP EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXAD EQU   JFCBS001+31
JFCBEXTL EQU   JFCBS001+30
JFCMSVGP EQU   JFCBS001+22
@NM00080 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNVOL EQU   JFCUCSEG+9
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCBEXTP EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCBAXBF EQU   JFCBUFSI
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00079 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCORGAM EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCORGIS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00078 EQU   JFCLIMCT
JFCDEN   EQU   JFCSPPRT+1
JFCPRTSP EQU   JFCSPPRT
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
VOLSWOK  EQU   INFLAGS
PASSDS   EQU   INFLAGS
UPUSECNT EQU   INFLAGS
EXTRACAL EQU   FUNCMAP+1
ALCASDSN EQU   ASNMSW
ALCSUBWT EQU   WAITOKSW
ALCATRKM EQU   TRKMSW
ALCNOENQ EQU   NOTIOTNQ
ALCJOBNM EQU   MTRJOBSW
ALCHDMSG EQU   HDRMSGSW
@NM00117 EQU   FUNCMAP+1
ALCGENER EQU   GENLOKSW
ALCCANCL EQU   CCLMNTSW
ALCOFFDV EQU   OFFDEVSW
@NM00116 EQU   FUNCMAP
ALCWTVOL EQU   VWAITSW
ALCWTUNT EQU   UWAITSW
ALCMSGLV EQU   WRTMSGSW
ALCMOUNT EQU   VOLMNTSW
GRPWPTR  EQU   GRPCOUNT+12
GRPIDENT EQU   GRPCOUNT+10
GRPEXCS  EQU   GRPCOUNT+8
GRPTOTAL EQU   GRPCOUNT+6
GRPOFFLN EQU   GRPCOUNT+4
GRPALLCT EQU   GRPCOUNT+2
GRPAVAIL EQU   GRPCOUNT
@NM00115 EQU   CVRGPLST+13
@NM00114 EQU   CVRFLG3
CVRFORCI EQU   CVRFLG3
CVRGSKP  EQU   CVRFLG3
CVRBOUND EQU   CVRGPLST+10
CVRGALL  EQU   CVRGPLST+8
CVRGRPAL EQU   CVRGPLST+6
CVRGRPID EQU   CVRGPLST+4
CVRGCPTR EQU   CVRGPLST
@NM00113 EQU   CVRRQLST+26
CVRWUCBP EQU   CVRRQLST+24
CVRGRPPT EQU   CVRRQLST+20
CVRNGRP  EQU   CVRRQLST+18
@NM00112 EQU   CVRFLG2+1
CVRDUPLI EQU   CVRFLG2+1
CVRWMOVE EQU   CVRFLG2
CVRIGNOR EQU   CVRFLG2
CVRMULTI EQU   CVRFLG2
CVRSCRTH EQU   CVRFLG2
CVRFULL  EQU   CVRFLG2
CVRREACH EQU   CVRFLG2
CVRRUSED EQU   CVRFLG2
CVRSKFLG EQU   CVRFLG2
CVRGNEXT EQU   CVRRQLST+12
CVRPTS   EQU   CVRMIN
CVRNEED  EQU   CVRRQLST+8
CVRALLCT EQU   CVRRQLST+6
CVRREQ1  EQU   CVRRQLST+4
CVRVUPTR EQU   CVRRQLST
@NM00111 EQU   CVRPARM+9
@NM00110 EQU   CVRFLG1
CVRFCALL EQU   CVRFLG1
CVROFFLG EQU   CVRFLG1
CVRALFLG EQU   CVRFLG1
CVRAVFLG EQU   CVRFLG1
CVRGRPLK EQU   CVRPARM+6
CVRNREQ  EQU   CVRPARM+4
CVRRQPTR EQU   CVRPARM
ALGGCNTP EQU   ALGPTRS+12
ALGGLSTP EQU   ALGPTRS+8
ALGRQLTP EQU   ALGPTRS+4
ALGPARMP EQU   ALGPTRS
ALCPROCN EQU   NAMES+16
WMASK2P  EQU   ALCWA+132
WMASKPTR EQU   ALCWA+128
LGENLOCK EQU   ALCWA+124
TCBP     EQU   ALCWA+116
@NM00109 EQU   @NM00108
NODEVERR EQU   @NM00108
NEEDRCVY EQU   @NM00108
ALCWAREC EQU   @NM00108
WAITIGEN EQU   @NM00108
UNITRECS EQU   @NM00108
ALCWADUL EQU   INDICATE
ALCWISAM EQU   INDICATE
DSSUNIT  EQU   INDICATE
DSSTAPE  EQU   INDICATE
PRIVASUM EQU   INDICATE
INDREQU  EQU   INDICATE
QMGRRBP  EQU   ALCWA+108
RIMTABCT EQU   ALCWA+104
RIMTABLN EQU   ALCWA+100
RIMTABP  EQU   ALCWA+96
ALGTABSZ EQU   ALCWA+92
VOLUNSZE EQU   ALCWA+84
VOLUNPTR EQU   ALCWA+80
@NM00107 EQU   ALCWA+78
LTUNITID EQU   ALCWA+76
TOTVOLUN EQU   CNTABLE+44
NUMREQS  EQU   CNTABLE+40
TOTREQS  EQU   CNTABLE+36
OTHEREQS EQU   CNTABLE+32
SUBSREQS EQU   CNTABLE+28
STRGREQS EQU   CNTABLE+24
PUBLREQS EQU   CNTABLE+20
PVTNREQS EQU   CNTABLE+16
SPECREQS EQU   CNTABLE+12
TPREQS   EQU   CNTABLE+8
VAMREQS  EQU   CNTABLE+4
DMYREQS  EQU   CNTABLE
EDTABPTR EQU   ALCWA+24
JSCBPTR  EQU   ALCWA+12
SIOT1P   EQU   ALCWA+8
WASIZE   EQU   ALCWA
EDLNOJES EQU   EDLINDIC
EDLVOLAF EQU   EDLINDIC
EDLENQ   EQU   EDLINDIC
EDLDADSM EQU   EDLINDIC
EDLALCD  EQU   EDLINDIC
EDLUCBAD EQU   EDLUCBL
EDLJINEL EQU   EDLGRFLG
EDLGRID  EQU   EDLGNTRY+12
EDLLISTP EQU   EDLGNTRY+8
EDLUCBNO EQU   EDLGNTRY+4
EDLNXGRP EQU   EDLGNTRY
EINDEVTP EQU   EDLDTFLG
@NM00104 EQU   EDLENTRY+18
EDLNSCNT EQU   EDLENTRY+16
EDLGRPTR EQU   EDLENTRY+12
EDLGRPNO EQU   EDLENTRY+8
EDLDEVT  EQU   EDLENTRY+4
EDLNXTNT EQU   EDLENTRY
EDLMGENS EQU   EDLUVFLG
EDLVAM   EQU   EDLUVFLG
EDLGMTP  EQU   EDLHDR+12
EDLFGENP EQU   EDLHDR+8
EDLGENNO EQU   EDLHDR+4
EDLLUV   EQU   EDLHDR
PRMWTOID EQU   PRMESTAE+292
PRMNELM  EQU   PRMESTAE+288
PRMDSQF  EQU   PRMESTAE+284
PRMDSQL  EQU   PRMESTAE+280
PRMQDBP  EQU   PRMESTAE+276
PRMQMBP  EQU   PRMESTAE+272
PRMQMBLN EQU   PRMESTAE+268
PRMQMGP  EQU   PRMESTAE+264
PRMUCBP  EQU   PRMESTAE+260
PRMSIOTP EQU   PRMESTAE+256
PRMASID  EQU   PRMESTAE+254
@NM00103 EQU   PRMFUNC
VMVCALL  EQU   PRMFUNC
FREECORE EQU   PRMFUNC
DUMPOK   EQU   PRMFUNC
DSABCHN  EQU   PRMFUNC
UPDSABCK EQU   PRMFUNC
GENCLNUP EQU   PRMFUNC
@NM00102 EQU   PRMRESC
MLWTO    EQU   PRMRESC
TPQ      EQU   PRMRESC
DSSUNREC EQU   PRMRESC
DSSTAP   EQU   PRMRESC
CHNGQ    EQU   PRMRESC
DDRQ     EQU   PRMRESC
ENQQ4    EQU   PRMRESC
@NM00101 EQU   PRMESTAE
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBFCBPE EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00100
UCBHALI  EQU   @NM00100
UCBRSV09 EQU   @NM00100
UCBRSV08 EQU   @NM00100
UCBRSV07 EQU   @NM00100
UCBRSV06 EQU   @NM00100
UCBRSV05 EQU   @NM00100
UCBRSV04 EQU   @NM00100
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00097 EQU   UCB
SIODDSNL EQU   INDMSIOT+173
SIOVDSNL EQU   INDMSIOT+172
SIOVDSNT EQU   INDMSIOT+170
SVOLUNNO EQU   INDMSIOT+168
SIOTJFX  EQU   INDMSIOT+160
SIOTNPTR EQU   INDMSIOT+152
SIOTETIO EQU   INDMSIOT+148
SIOTATE  EQU   INDMSIOT+144
SVOLUNAD EQU   INDMSIOT+140
SIOTEDLS EQU   INDMSIOT+132
SCTANAME EQU   INDMSIOT+122
@NM00096 EQU   INDMSIOT+108
SIOTSSNM EQU   INDMSIOT+104
@NM00095 EQU   SIOTBYT2
@NM00094 EQU   SIOTBYT2
SIOTCVOL EQU   SIOTBYT2
SIOTCNEW EQU   SIOTBYT2
SIOTCALC EQU   SIOTBYT2
SIOTGALL EQU   SIOTBYT2
SIOTDSPD EQU   SIOTBYT2
SIOTDMND EQU   SIOTBYT2
SIOTOPUC EQU   INDMSIOT+99
SIOTOUTR EQU   INDMSIOT+97
SIOTOUTC EQU   INDMSIOT+96
@NM00093 EQU   INDMSIOT+93
SIOTAUNC EQU   SIOTALTD
SIOTACAT EQU   SIOTALTD
SIOTADEL EQU   SIOTALTD
SIOTAKEP EQU   SIOTALTD
SIOTNPRV EQU   SIOTALTD
SIOJCATS EQU   SIOTALTD
@NM00092 EQU   SIOTALTD
@NM00091 EQU   SIOTALTD
@NM00090 EQU   INDMSIOT+91
SIOTNDSB EQU   INDMSIOT+88
@NM00089 EQU   INDMSIOT+84
SIOTDPCD EQU   INDMSIOT+82
@NM00088 EQU   INDMSIOT+81
SCTOUTPN EQU   INDMSIOT+80
SCTOUTNO EQU   INDMSIOT+76
SCTOUTNM EQU   INDMSIOT+68
SIOUCBAD EQU   SCTUTYPE+5
SIOUCNVT EQU   SCTUTYPE+4
SIOUBYT4 EQU   SIOTDEVT+3
@NM00087 EQU   SIOUBYT3
SIO3UREC EQU   SIOUBYT3
SIO3DISP EQU   SIOUBYT3
SIO3DACC EQU   SIOUBYT3
SIO3COMM EQU   SIOUBYT3
SIO3TAPE EQU   SIOUBYT3
SIOUBYT2 EQU   SIOTDEVT+1
SIOUBYT1 EQU   SIOTDEVT
SIOTOMN  EQU   SCTSBYT4
SIOTIPDI EQU   SCTSBYT4
SIOTVAFF EQU   SCTSBYT4
SIOTSTEP EQU   SCTSBYT4
SIOTAFF  EQU   SCTSBYT4
SIOTGDGA EQU   SCTSBYT4
SCTSGDGS EQU   SCTSBYT4
SCTSOLD  EQU   SCTSBYT3
SCTSMOD  EQU   SCTSBYT3
SCTSNEW  EQU   SCTSBYT3
SCTSYSOU EQU   SCTSBYT3
SCTVREF  EQU   SCTSBYT3
SCTALCHK EQU   SCTSBYT3
SCTSYSNE EQU   SCTSBYT3
SCTDSNRF EQU   SCTSBYT3
SCTRECVD EQU   SCTSBYT2
SCTDEFER EQU   SCTSBYT2
SCTJOBLB EQU   SCTSBYT2
SCTVOLAF EQU   SCTSBYT2
SIOTCATL EQU   SCTSBYT2
SIOCLUNL EQU   SCTSBYT2
SIOTJSCT EQU   SCTSBYT1
SCTUNAFF EQU   SCTSBYT1
SCTPARLM EQU   SCTSBYT1
SIOTQDSN EQU   SCTSBYT1
SIOTGDSN EQU   SCTSBYT1
SIOTCCAT EQU   SCTSBYT1
SCTSYSIN EQU   SCTSBYT1
SCTDUMMY EQU   SCTSBYT1
SIOTUNCT EQU   SCTSDISP
SIOTCTLG EQU   SCTSDISP
SIOTDLET EQU   SCTSDISP
SIOTKEEP EQU   SCTSDISP
SIOTPASS EQU   SCTSDISP
SIOTPRIV EQU   SCTSDISP
S3400DSP EQU   SCTSDISP
SIOTRETN EQU   SCTSDISP
SIOTVLCT EQU   INDMSIOT+54
SCTNMBUT EQU   INDMSIOT+53
SIOTPUPV EQU   SIOTBYT0
SIOTNOPV EQU   SIOTBYT0
SIOTGIGN EQU   SIOTBYT0
SPVTAMSG EQU   SIOTBYT0
SIOTFUDA EQU   SIOTBYT0
SIOTDYAL EQU   SIOTBYT0
SIOTSSDS EQU   SIOTBYT0
SIOTGIID EQU   INDMSIOT+50
SCTVOLCT EQU   INDMSIOT+49
SCTSPOOL EQU   INDMSIOT+48
SIOTQNAM EQU   SIOTTSTC
SIOTDSNM EQU   SIOTTSTC
SIOTTRKM EQU   SIOTTSTC
@NM00086 EQU   SIOTTSTC
SIOTTERM EQU   SIOTTSTC
@NM00085 EQU   SIOTTSTC
@NM00084 EQU   SIOTBYT3
SIOTDSID EQU   SIOTBYT3
S3400OFF EQU   SIOTBYT3
SIOTJES3 EQU   SIOTBYT3
SIOCDEVT EQU   SIOTBYT3
SIOALIAS EQU   SIOTBYT3
SCTDDINO EQU   INDMSIOT+44
SIOTDDNT EQU   SIOTBYT1
SIOTALCD EQU   SIOTBYT1
SIODADSM EQU   SIOTBYT1
SIOTDADR EQU   SIOTBYT1
SIODUNAL EQU   SIOTBYT1
SIOVAMDS EQU   SIOTBYT1
SIOTHOLD EQU   SIOTBYT1
SIOTOCKP EQU   SIOTBYT1
SIOPSCNT EQU   INDMSIOT+42
SIOTREFN EQU   INDMSIOT+40
SIOTOTUN EQU   INDMSIOT+39
SIOTVRSB EQU   INDMSIOT+36
@NM00083 EQU   INDMSIOT+35
SCTPJFCB EQU   INDMSIOT+32
@NM00082 EQU   INDMSIOT+31
SCTPSIOT EQU   INDMSIOT+28
SIOTAFID EQU   INDMSIOT+26
@NM00081 EQU   INDMSIOT+24
SIODSNTE EQU   INDMSIOT+22
SIOTUNAF EQU   SCTUSADD
SIOTDEST EQU   INDMSIOT+12
SCTDDNAM EQU   INDMSIOT+4
SIOTTYPE EQU   INDMSIOT+3
SIOTDSKA EQU   INDMSIOT
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSHARE EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCDISP  EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00077 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCSUL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCBADBF EQU   INFMJFCB+60
JFCAMSTR EQU   JFCBFRID+2
JFCAMCRO EQU   JFCBFRID
JFCBDSCB EQU   INFMJFCB+53
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCCAT   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
MSSPARE  EQU   BASES01+48
MSUCBAL  EQU   BASES01+44
MSUCBPR  EQU   BASES01+40
MSBOBECB EQU   BASES01+36
MSSJQ    EQU   BASES01+32
MSECB    EQU   BASES01+28
MSPBP    EQU   BASES01+24
MSERM    EQU   BASES01+22
MSPASS   EQU   BASES01+14
MSVRB    EQU   BASES01+6
MSQHR    EQU   MSFHF
@NM00076 EQU   MSFHF
MSPSDT   EQU   MSFHF
MSREPLYB EQU   MSFHF
MSFAX    EQU   MSFHF
MSTTT    EQU   MSFHF
MSCSD    EQU   MSFHF
MSNMF    EQU   MSFHF
MSJNF    EQU   MSSSA
MSYOUT   EQU   MSNWP
MSNRP    EQU   MSSSA
MSSRDR   EQU   MSREOF
MSWRLOG  EQU   MSSSA
MSNUPSW  EQU   MSSSA
MSWRPEN  EQU   MSSSA
MSSSSIPL EQU   MSINLSW
MSSUM    EQU   MSECBFL
MSMCR    EQU   MSECBFL
MSYSOUT  EQU   MSECBFL
MSYSIN   EQU   MSECBFL
MSATTN   EQU   MSECBFL
MSWTL    EQU   MSECBFL
MSWTO    EQU   MSECBFL
MSEXT    EQU   MSECBFL
MSCCS    EQU   MSPFG
MSBSP    EQU   MSPFG
MSSYT    EQU   MSPFG
MSSYN    EQU   MSPFG
MSICR    EQU   MSPFG
MSCMC    EQU   MSPFG
MSPNB    EQU   MSPFG
MSDATE   EQU   MSPFG
@NM00075 EQU   MSBTN
MSTN     EQU   MSBTN
@NM00074 EQU   MSBTN
@NM00073 EQU   MSBTN
MSSO     EQU   MSBTN
MSROLFLG EQU   MSBTN
MSCANFLG EQU   MSBTN
MSCONFLG EQU   MSBTN
MSPNIP   EQU   MSNTAL
MSQNIP   EQU   MSNTAL
MSCURE34 EQU   MSNTAL
@NM00072 EQU   MSNTAL
@NM00071 EQU   MSNTAL
@NM00070 EQU   MSNTAL
@NM00069 EQU   MSNTAL
MSNIP    EQU   MSNTAL
@NM00068 EQU   MS1BASEX+40
@NM00067 EQU   MS1BASEX+20
@NM00066 EQU   MS1BASEX
@NM00065 EQU   BASE+128
MSLGJSCB EQU   BASE+124
@NM00064 EQU   MSSTRTSW
MSSTRTP  EQU   MSSTRTSW
MSSTRTW  EQU   MSSTRTSW
@NM00063 EQU   MSWTRSW
MSWTRP   EQU   MSWTRSW
MSWTRW   EQU   MSWTRSW
@NM00062 EQU   MSWLOGSW
MSWLOGP  EQU   MSWLOGSW
MSWLOGW  EQU   MSWLOGSW
@NM00061 EQU   MSCLOSSW
MSCLOSP  EQU   MSCLOSSW
MSCLOSW  EQU   MSCLOSSW
MSLOGLMT EQU   @NM00060+1
MSLOGCLS EQU   @NM00060
BAASCB   EQU   BASE+100
MSSMFPRM EQU   BASE+96
MSCOMMND EQU   BASE+92
BASP12   EQU   BASE+90
BASTCNT  EQU   BASE+88
BASESCT  EQU   BASE+86
BAJNCNT  EQU   BASE+84
BASUBECB EQU   BASE+80
BALOGCOM EQU   BASE+76
BADACNT  EQU   BASE+74
BATACNT  EQU   BASE+72
BAJBNR   EQU   BASE+64
BASP11   EQU   BASE+62
BALCCNT  EQU   BASE+61
BADUMPID EQU   BASE+60
BABCMAX  EQU   BASE+58
BAMONTR2 EQU   BASE+57
@NM00059 EQU   BAMONITR
BAMACTVE EQU   BAMONITR
@NM00058 EQU   BAMONITR
@NM00057 EQU   BAMONITR
@NM00056 EQU   BAMONITR
@NM00055 EQU   BAMONITR
BASPACE  EQU   BAMONITR
BADSO    EQU   BASE+52
BALOGECB EQU   BASE+48
@NM00054 EQU   BASPBYTE
@NM00053 EQU   BASPBYTE
@NM00052 EQU   BASPBYTE
@NM00051 EQU   BASPBYTE
@NM00050 EQU   BASPBYTE
BAMASCH  EQU   BASPBYTE
BATRACE  EQU   BASPBYTE
BAMSSTAR EQU   BASPBYTE
@NM00049 EQU   MSLOGST
@NM00048 EQU   MSLOGST
MSLOGSTA EQU   MSLOGST
MSLOGIPL EQU   MSLOGST
MSLOGDAR EQU   MSLOGST
MSLOGCOM EQU   MSLOGST
MSLOGTHD EQU   MSLOGST
MSLOGENQ EQU   MSLOGST
BAMIPAR2 EQU   BASE+44
BAMINPAR EQU   BASE+42
BAPKES   EQU   BASE+40
BAICTR   EQU   BASE+38
@NM00047 EQU   BASE+37
BADSET   EQU   BARSW
BANOSET  EQU   BARSW
BAMIDNT  EQU   BARSW
BAHR     EQU   BARSW
BAVU     EQU   BARSW
BAINTSET EQU   BARSW
MSTODWTO EQU   BARSW
BAIN     EQU   BARSW
BACV     EQU   BASE+32
@NM00046 EQU   BALOG
@NM00045 EQU   BALOG
@NM00044 EQU   BALOG
@NM00043 EQU   BALOG
@NM00042 EQU   BALOG
@NM00041 EQU   BALOG
@NM00040 EQU   BALOG
BALOGINT EQU   BALOG
MSLOGSVC EQU   BALGSTAT
BAPRC    EQU   BASE+20
BAQ      EQU   BASE+16
BAIPLCC  EQU   @NM00038+2
@NM00039 EQU   @NM00038
BAIPL    EQU   BASE+12
BALAD    EQU   BASE+8
BATRM    EQU   BASE+4
BACHN    EQU   BASE
FRRSPARM EQU   FRRSENTR+8
@NM00013 EQU   FRRSFLGS+1
@NM00012 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSFRRA EQU   FRRSENTR
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
FRRSCURR EQU   FRRSHEAD+12
FRRSELEN EQU   FRRSHEAD+8
FRRSLAST EQU   FRRSHEAD+4
FRRSEMP  EQU   FRRSHEAD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00011 EQU   CVTFIX+248
@NM00010 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
VUGRID   EQU   VOLUNTAB+24
VUUCBP   EQU   VOLUNTAB+20
VOLSIOTP EQU   VOLUNTAB+16
VOLALGTP EQU   VOLUNTAB+12
VOLUNTID EQU   VOLUNTAB+10
VURCVYPR EQU   VOLSTATD
VUDMUNIQ EQU   VOLSTATD
VUUNALSW EQU   VOLSTATD
VUDMNDAL EQU   VOLSTATD
VUDMNDOF EQU   VOLSTATD
VUREALOC EQU   VOLSTATD
VUMUGDON EQU   VOLSTATD
@NM00106 EQU   VOLSTATC
@NM00105 EQU   VOLSTATC
VURECVRY EQU   VOLSTATC
VOLURREQ EQU   VOLSTATC
VOLGRREQ EQU   VOLSTATC
VOLDAREQ EQU   VOLSTATC
VOLCOREQ EQU   VOLSTATC
VOLTAREQ EQU   VOLSTATC
VUAFFWRK EQU   VOLSTATB
VUDADSME EQU   VOLSTATB
VUPROCED EQU   VOLSTATB
VDEVREQD EQU   VOLSTATB
VOLALOC  EQU   VOLSTATB
VUDADSM  EQU   VOLSTATA
VOLRESVE EQU   VOLSTATA
VOLID    EQU   VOLUNTAB
@NM00122 EQU   VMVUSER
VMVPROCD EQU   VMVUSER
@NM00121 EQU   VMVMINFO+1
@NM00120 EQU   VMVACTON
VMVRTAIN EQU   VMVACTON
VMVDSMT  EQU   VMVACTON
VMVKEEP  EQU   VMVACTON
VMVRETCD EQU   VMVRQBLK+36
VMVUVLSR EQU   VMVRQBLK+12
@NM00119 EQU   VMVRQBLK+8
VMVOPTB4 EQU   VMVFNMAP+3
@NM00118 EQU   VMVOPTB3
VMVNUMSG EQU   VMVOPTB3
VMVCUVOL EQU   VMVOPTB3
VMVDUPVL EQU   VMVOPTB3
VMVSTRG  EQU   VMVOPTB2
VMVPUBLC EQU   VMVOPTB2
VMVPRIVT EQU   VMVOPTB2
VMVVDEND EQU   VMVOPTB1
VMVREWND EQU   VMVOPTB1
@NM00004 EQU   FRRUSER+8
@NM00003 EQU   FRRUSER+4
@NM00037 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00036 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00035 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00034 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00033 EQU   FLCFSA
@NM00032 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00031 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00030 EQU   FLCIOA
@NM00029 EQU   FLCMCLA+15
@NM00028 EQU   FLCMCLA+14
@NM00027 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00026 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00025 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00024 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00023 EQU   FLCPER
@NM00022 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00021 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00020 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00019 EQU   FLCPIILC
@NM00018 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00017 EQU   FLCSVILC
@NM00016 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00015 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00014 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RC00126 EQU   @RC00125
@RC00101 EQU   @RC00099
@RF00146 EQU   @RC00099
@RC00238 EQU   @RC00236
@RC00253 EQU   @RC00236
@RC00249 EQU   @RC00236
@RC00245 EQU   @RC00236
@RC00241 EQU   @RC00236
@RC00339 EQU   @RC00338
@RC00418 EQU   @EL00002
@RC00505 EQU   @RC00504
@RF00528 EQU   @EL00003
@RF00532 EQU   @EL00003
@RC00102 EQU   @RC00101
@RF00486 EQU   @RC00418
@RC00507 EQU   @RC00505
@RC00103 EQU   @RC00102
@RF00134 EQU   @RC00102
@RC00517 EQU   @RC00507
@RC00509 EQU   @RC00507
@RC00104 EQU   @RC00103
@RF00118 EQU   @RC00103
@RC00113 EQU   @RC00103
@RF00112 EQU   @RC00103
@RC00511 EQU   @RC00509
@ENDDATA EQU   *
         END   IEFAB435,(C'PLS1012',0701,77298)
