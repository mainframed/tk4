         TITLE 'IEFAB432 - AFFINITY PROCESSOR                          *
                        '
IEFAB432 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'IEFAB432  75.329'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @12,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@12                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         MODESET EXTKEY=SCHED,SAVEKEY=(2)
         GSPACE   R,LV=(0)
         LR    @11,@01                                          01S0001
         USING @DATD,@11                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         STC   @02,@OLDKEY                                      01S0001
         MODESET KEYADDR=(2)
         LM    @00,@02,20(@13)                                  01S0001
         ST    @11,8(,@13)                                      01S0001
         LR    @13,@11                                          01S0001
         MODESET EXTKEY=ZERO
         MVC   @PC00001(20),0(@01)                              01S0001
         MODESET EXTKEY=SCHED
*RETCODE = NOERROR;                    /*INITIALIZE RETURN CODE      */
         SLR   RETCODE,RETCODE                                  01S0046
*NUMVUENT = VOLUNSZE/VOLENTLN;         /*NO. OF VOLUNIT ENTRIES      */
         L     @10,@PC00001+12                                  01S0047
         L     @10,ALCWAPTR(,@10)                               01S0047
         L     @00,VOLUNSZE(,@10)                               01S0047
         SRDA  @00,32                                           01S0047
         D     @00,VOLENTLN                                     01S0047
         LR    NUMVUENT,@01                                     01S0047
*AFFVUPTR = VOLUNPTR;                  /*PTR TO 1ST VOLUMIT ENTRY    */
         MVC   AFFVUPTR(4),VOLUNPTR(@10)                        01S0048
*  DO AVUCTR = ONE TO NUMVUENT         /*SCAN VOLUNIT ENTRIES        */
*    WHILE(RETCODE=NOERROR);                                    01S0049
         LA    AVUCTR,1                                         01S0049
         B     @DE00049                                         01S0049
@DL00049 LTR   RETCODE,RETCODE                                  01S0049
         BNZ   @DC00049                                         01S0049
*      IF VOLUNTID = AFFVUPTR->VOLUNTID & /*UNIT ID MATCH?           */
*         AFFVUPTR ^= VUPTR THEN       /*AND NOT ENT JUST ALLOCATED? */
         L     @10,@PC00001+4                                   01S0050
         L     @10,VUPTR(,@10)                                  01S0050
         L     @04,AFFVUPTR                                     01S0050
         CLC   VOLUNTID(2,@10),VOLUNTID(@04)                    01S0050
         BNE   @RF00050                                         01S0050
         CR    @04,@10                                          01S0050
         BE    @RF00050                                         01S0050
*        DO;                             /*YES                       */
*          SIOTPTR = AFFVUPTR->VOLSIOTP; /*PT TO SIOT OF VU ENTRY    */
         MVC   SIOTPTR(4),VOLSIOTP(@04)                         01S0052
*          IF VOLID = AFFVUPTR->VOLID THEN  /*VOLID MATCH?           */
         CLC   VOLID(6,@10),VOLID(@04)                          01S0053
         BNE   @RF00053                                         01S0053
*            DO;                       /*YES                         */
*              CALL FINDEDL2;          /*CHECK IF DEV TYPES MATCH    */
         BAL   @14,FINDEDL2                                     01S0055
*              IF RETCODE = NOERROR &  /*ANY ERRORS?                 */
*                 AFFVUPTR->VDEVREQD=ON THEN  /*AND DEVICE REQUIRED? */
         LTR   RETCODE,RETCODE                                  01S0056
         BNZ   @RF00056                                         01S0056
         L     @10,AFFVUPTR                                     01S0056
         TM    VDEVREQD(@10),B'00100000'                        01S0056
         BNO   @RF00056                                         01S0056
*                CALL AFFPROC;         /*YES, ALLOCATE REQUEST       */
         BAL   @14,AFFPROC                                      01S0057
*            END;                                               01S0058
*          ELSE                        /*UNITID BUT NOT VOLID MATCH  */
*            DO;                                                01S0059
         B     @RC00053                                         01S0059
@RF00053 DS    0H                                               01S0060
*              IF (AFFVUPTR->VOLID(1) ^= NONSPDA & /*NOT NONSPECIF DA*/
*                  AFFVUPTR->VOLID(1) ^= NONSPTAP) × /*NO NONSPEC TAP*/
*                 (AFFVUPTR->VOLID(1) = NONSPTAP & /*NON-SPECIF TAPE */
*                 SCTSNEW=OFF) THEN      /*NOT NEW DISPOSITION       */
         L     @10,AFFVUPTR                                     01S0060
         CLI   VOLID(@10),X'FE'                                 01S0060
         BE    @GL00003                                         01S0060
         CLI   VOLID(@10),X'FF'                                 01S0060
         BNE   @RT00060                                         01S0060
@GL00003 L     @10,AFFVUPTR                                     01S0060
         CLI   VOLID(@10),X'FF'                                 01S0060
         BNE   @RF00060                                         01S0060
         L     @10,SIOTPTR                                      01S0060
         TM    SCTSNEW(@10),B'00000100'                         01S0060
         BNZ   @RF00060                                         01S0060
@RT00060 DS    0H                                               01S0061
*                DO;                   /*VALIDITY CHECK VOLUME       */
*                  CALL IEFAB441(FUNC441,ALCWAPTR,AFFVUPTR,0,UCBTYP);
         LA    @10,FUNC441                                      01S0062
         ST    @10,@AL00001                                     01S0062
         L     @10,@PC00001+12                                  01S0062
         ST    @10,@AL00001+4                                   01S0062
         LA    @10,AFFVUPTR                                     01S0062
         ST    @10,@AL00001+8                                   01S0062
         LA    @10,@CF00138                                     01S0062
         ST    @10,@AL00001+12                                  01S0062
         L     @10,@PC00001+8                                   01S0062
         L     @10,UCBPTR(,@10)                                 01S0062
         LA    @10,UCBTYP(,@10)                                 01S0062
         ST    @10,@AL00001+16                                  01S0062
         L     @15,@CV00096                                     01S0062
         LA    @01,@AL00001                                     01S0062
         BALR  @14,@15                                          01S0062
*                  RETCODE = REG15;    /*SAVE THE RETURN CODE        */
         LR    RETCODE,REG15                                    01S0063
*                  IF RETCODE=NOERROR & AFFVUPTR-> VUVINELG=ON THEN /*
*                                                            @ZA03246*/
         LTR   RETCODE,RETCODE                                  01S0064
         BNZ   @RF00064                                         01S0064
         L     @10,AFFVUPTR                                     01S0064
         TM    VUVINELG(@10),B'00000010'                        01S0064
         BNO   @RF00064                                         01S0064
*                    RETCODE = RECOV;  /*INDICATE VOL ON UNLOCKED GEN*/
         LA    RETCODE,40                                       01S0065
*                  IF RETCODE=NOERROR & INDRETRY= ON THEN       01S0066
@RF00064 LTR   RETCODE,RETCODE                                  01S0066
         BNZ   @RF00066                                         01S0066
         L     @10,@PC00001+12                                  01S0066
         L     @10,ALCWAPTR(,@10)                               01S0066
         TM    INDRETRY(@10),B'01000000'                        01S0066
         BNO   @RF00066                                         01S0066
*                    RETCODE = MTDINELG;/*INDIC VOL ON UNLOCKED GROUP*/
         LA    RETCODE,20                                       01S0067
*                END;                                           01S0068
@RF00066 DS    0H                                               01S0069
*              IF RETCODE=NOERROR &    /*VALIDITY CHECK OK?          */
*                 AFFVUPTR->VOLALOC=OFF & /*PERMRES/RSV NOT ALLOC'D  */
*                 AFFVUPTR->VDEVREQD=ON THEN  /*AND DEVICE REQUIRED? */
@RF00060 LTR   RETCODE,RETCODE                                  01S0069
         BNZ   @RF00069                                         01S0069
         L     @10,AFFVUPTR                                     01S0069
         TM    VDEVREQD(@10),B'00100000'                        01S0069
         BNO   @RF00069                                         01S0069
         TM    VOLALOC(@10),B'10000000'                         01S0069
         BNZ   @RF00069                                         01S0069
*                DO;                   /*YES                         */
*                  CALL FINDEDL2;      /*GET UCB POSITION IN EDL     */
         BAL   @14,FINDEDL2                                     01S0071
*                  IF RETCODE = NOERROR THEN /*OK TO ALLOC   @ZA01878*/
         LTR   RETCODE,RETCODE                                  01S0072
         BNZ   @RF00072                                         01S0072
*                    CALL AFFPROC;     /*YES, ALLOCATE AFFINITY REQ  */
         BAL   @14,AFFPROC                                      01S0073
*                END;                                           01S0074
*            END;                                               01S0075
*        END;                                                   01S0076
*      ELSE;                           /*NO UNITID MATCH             */
@RF00050 DS    0H                                               01S0078
*      AFFVUPTR = AFFVUPTR + VOLENTLN; /*PTR TO NEXT VOLUNIT ENTRY   */
@RC00050 L     @10,AFFVUPTR                                     01S0078
         AL    @10,VOLENTLN                                     01S0078
         ST    @10,AFFVUPTR                                     01S0078
*  END;                                                         01S0079
         AH    AVUCTR,@CH00046                                  01S0079
@DE00049 CR    AVUCTR,NUMVUENT                                  01S0079
         BNH   @DL00049                                         01S0079
@DC00049 DS    0H                                               01S0080
*RETURN CODE(RETCODE);                                          01S0080
         IC    @02,@OLDKEY                                      01S0080
         L     @13,4(,@13)                                      01S0080
         L     @00,@SIZDATD                                     01S0080
         LR    @01,@11                                          01S0080
         FSPACE   R,LV=(0),A=(1)
         MODESET KEYADDR=(2)
         LR    @15,@03                                          01S0080
         L     @14,12(,@13)                                     01S0080
         LM    @00,@12,20(@13)                                  01S0080
         BR    @14                                              01S0080
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - AFFPROC                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - PROCESS AFFINITY                              */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS SEGMENT MANAGES ALLOCATION OF VOLUME AND UNIT AFFINITY    */
*/*   REQUESTS. THE SEGMENT USES A SUBROUTINE TO BUILD A             */
*/*   PARAMETER LIST FOR THE ALLOCATE REQUEST TO UNIT ROUTINE        */
*/*   (IEFAB434). IT THEN CALLS IEFAB434 TO ALLOCATE THE AFFINITY    */
*/*   REQUEST. IF THE ALLOCATION IS SUCCESSFUL, IT TURNS ON THE      */
*/*   ALLOCATED BIT IN THE VOLUNIT ENTRY, AND, IF APPLICABLE, THE EDL*/
*/*   ENTRY AND SIOT. IT ALSO DECREMENTS THE COUNT OF VOLUNIT ENTRIES*/
*/*   TO BE ALLOCATED. IT THEN USES SUBROUTINES TO DETERMINE IF THE  */
*/*   ENTRY JUST ALLOCATED WAS THE FIRST FOR A MULTI-UNIT REQUEST    */
*/*   AND, IF SO, MARKS ALL GENERICS IN THE EDL, EXCEPT THE ONE JUST */
*/*   ALLOCATED, INELIGIBLE. IF THE ALLOCATION WAS UNSUCCESSFUL, AN  */
*/*   ERROR HANDLING SUBROUTINE IS GIVEN CONTROL.                    */
*/*                                                                  */
*/* ENTRY - SUBROUTINE OF IEFAB432                                   */
*/*                                                                  */
*/*   PURPOSE - CONTROLS ALLOCATION OF VOLUME AND UNIT AFFINITY      */
*/*             REQUESTS.                                            */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     SIOTPTR  - PTR TO SIOT OF CURRENT REQUEST                    */
*/*     ALCWAPTR - PTR TO ALLOCATION WORK AREA                       */
*/*     AFFVUPTR - PTR TO CURRENT VOLUNIT ENTRY                      */
*/*     EDLPTR   - PTR TO EDL ENTRY OF CURRENT REQUEST               */
*/*     UCBENTNO - INDEX TO UCB ADDR IN UCB LIST OF EDL              */
*/*     UCBMATSW - INDICATOR OF WHETHER UCB FOUND IN EDL             */
*/*                                                                  */
*/* EXIT-NORMAL - RETURN TO CALLER                                   */
*/*                                                                  */
*/*   CONDITION - AFFINITY ENTRY ALLOCATED                           */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*       VOLALOC  - ON IN VOLUNIT ENTRY THAT WAS ALLOCATED          */
*/*       TOTVOLUN - FIELD IN COUNT TABLE DECREMENTED BY 1           */
*/*       EDLALCD  - ON IN EDL ENTRY IF UCB MATCH TO PRIMARY WAS MADE*/
*/*       EINDEVTP - ON IN EDL ENTRIES OF GENERICS OTHER THAN THAT   */
*/*                  ALLOCATED TO THE FIRST UNIT OF A MULTI-UNIT     */
*/*                  REQUEST (NOT SET ON IF MULTIPLE GENERICS ARE    */
*/*                  ALLOWED).                                       */
*/*       SIOTALCD - ON IF ENTIRE SIOT ALLOCATED                     */
*/*       TOTREQS - DECREMENTED IF ENTIRE SIOT ALLOCATED             */
*/*                                                                  */
*/*     RETURN CODE - 0                                              */
*/*                                                                  */
*/* EXIT-ERROR - RETURN TO CALLER                                    */
*/*                                                                  */
*/*   CONDITION - RECOVERABLE DADSM ERROR                            */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*       VUDADSME - BIT SET IN VOLUNIT ENTRIES REQUESTING UNIT ON   */
*/*                  WHICH DADSM ERROR OCCURRED                      */
*/*       VUDNALOC - BIT SET IN VOLUNIT ENTRIES REQUESTING UNIT ON   */
*/*                  WHICH DADSM ERROR OCCURRED                      */
*/*                                                                  */
*/*     RETURN CODE - 32                                             */
*/*                                                                  */
*/*   CONDITION - NON-RECOVERABLE DADSM ERROR                        */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*       VUVINELG - BIT SET IN VOLUNIT ENTRIES REQUESTING UNIT ON   */
*/*                  WHICH DADSM ERROR OCCURRED                      */
*/*       VUDNALOC - BIT SET IN VOLUNIT ENTRIES REQUESTING UNIT ON   */
*/*                  WHICH DADSM ERROR OCCURRED                      */
*/*                                                                  */
*/*     RETURN CODE - 32                                             */
*/*                                                                  */
*/********************************************************************/
*AFFPROC: PROC;                                                 02S0081
@EL00001 IC    @02,@OLDKEY                                      02S0081
         L     @13,4(,@13)                                      02S0081
@EF00001 L     @00,@SIZDATD                                     02S0081
         LR    @01,@11                                          02S0081
         FSPACE   R,LV=(0),A=(1)
         MODESET KEYADDR=(2)
@ER00001 LM    @14,@12,12(@13)                                  02S0081
         BR    @14                                              02S0081
AFFPROC  STM   @14,@02,@SA00002                                 02S0081
         STM   @04,@12,@SA00002+20                              02S0081
*CALL BLD434PM;                        /*BUILD PARMLIST FOR IEFAB434 */
         BAL   @14,BLD434PM                                     02S0082
*UCBDATAP = ADDR(UCBDATA);             /*POINT TO VALIDITY CHK AREA  */
         LA    @10,UCBDATA                                      02S0083
         ST    @10,UCBDATAP                                     02S0083
*CALL IEFAB434(SIOTPTR,AFFVUPTR,UCBPTR,ARUINDIC,ARUWORD,        02S0084
*  ALCWAPTR,GROUPID,UCBDATAP);         /*ALLOCATE THE REQUEST        */
         LA    @10,SIOTPTR                                      02S0084
         ST    @10,@AL00001                                     02S0084
         LA    @10,AFFVUPTR                                     02S0084
         ST    @10,@AL00001+4                                   02S0084
         L     @10,@PC00001+8                                   02S0084
         ST    @10,@AL00001+8                                   02S0084
         LA    @10,ARUINDIC                                     02S0084
         ST    @10,@AL00001+12                                  02S0084
         LA    @10,ARUWORD                                      02S0084
         ST    @10,@AL00001+16                                  02S0084
         L     @10,@PC00001+12                                  02S0084
         ST    @10,@AL00001+20                                  02S0084
         LA    @10,GROUPID                                      02S0084
         ST    @10,@AL00001+24                                  02S0084
         LA    @10,UCBDATAP                                     02S0084
         ST    @10,@AL00001+28                                  02S0084
         L     @15,@CV00095                                     02S0084
         LA    @01,@AL00001                                     02S0084
         BALR  @14,@15                                          02S0084
*RETCODE = REG15;                      /*SAVE RETURN CODE            */
         LR    RETCODE,REG15                                    02S0085
*IF RETCODE = NOERROR THEN             /*ANY ERRORS?                 */
         LTR   RETCODE,RETCODE                                  02S0086
         BNZ   @RF00086                                         02S0086
*  DO;                                 /*NO                          */
*    IF UPALOK = ON THEN               /*UPDATE ALGORITHM TABLES     */
         L     @10,@PC00001+16                                  02S0088
         TM    UPALOK(@10),B'01000000'                          02S0088
         BNO   @RF00088                                         02S0088
*      DO;                                                      02S0089
*        FUNCS = ''B;                  /*CLEAR IEFAB4F2 FUNCTION MAP */
         MVI   FUNCS,X'00'                                      02S0090
*        ARUFUNC = ON;                 /*INDICATE DEV ALLOCATED      */
*        AFFBIT = ON;                  /*INDICATE AFFINITY HANDLED   */
         OI    ARUFUNC,B'01100000'                              02S0092
*        CALL IEFAB4F2(FUNCS,AFFVUPTR,UCBPTR,ALCWAPTR,GROUPID); 02S0093
         LA    @10,FUNCS                                        02S0093
         ST    @10,@AL00001                                     02S0093
         LA    @10,AFFVUPTR                                     02S0093
         ST    @10,@AL00001+4                                   02S0093
         L     @10,@PC00001+8                                   02S0093
         ST    @10,@AL00001+8                                   02S0093
         L     @10,@PC00001+12                                  02S0093
         ST    @10,@AL00001+12                                  02S0093
         LA    @10,GROUPID                                      02S0093
         ST    @10,@AL00001+16                                  02S0093
         L     @15,@CV00097                                     02S0093
         LA    @01,@AL00001                                     02S0093
         BALR  @14,@15                                          02S0093
*                                      /*UPDATE ALGORITHM TABLES     */
*      END;                                                     02S0094
*    AFFVUPTR->VOLALOC = ON;           /*MARK VU ENTRY ALLOCATED     */
@RF00088 L     @10,AFFVUPTR                                     02S0095
         OI    VOLALOC(@10),B'10000000'                         02S0095
*    TOTVOLUN = TOTVOLUN - ONE;        /*DECREMENT VU CTR            */
         L     @10,@PC00001+12                                  02S0096
         L     @10,ALCWAPTR(,@10)                               02S0096
         L     @09,TOTVOLUN(,@10)                               02S0096
         BCTR  @09,0                                            02S0096
         ST    @09,TOTVOLUN(,@10)                               02S0096
*    IF UCBMATSW=ON THEN               /*WAS UCB IN EDL              */
         TM    UCBMATSW,B'10000000'                             02S0097
         BNO   @RF00097                                         02S0097
*      EDLALCD(UCBENTNO)=ON;           /*MARK EDL ENTRY ALLOCATED    */
         LR    @10,UCBENTNO                                     02S0098
         SLA   @10,2                                            02S0098
         ALR   @10,EDLUCBLP                                     02S0098
         BCTR  @10,0                                            02S0098
         BCTR  @10,0                                            02S0098
         OI    EDLALCD-2(@10),B'10000000'                       02S0098
*    NOTALCSW = OFF;                   /*SET LOOP CONTROL SWITCH     */
@RF00097 NI    NOTALCSW,B'01111111'                             02S0099
*    TEMVUPTR = SVOLUNAD;              /*PNT TO 1ST VU ENT FOR SIOT  */
         L     @10,SIOTPTR                                      02S0100
         L     TEMVUPTR,SVOLUNAD(,@10)                          02S0100
*    DO AVUCTR1 = ONE TO SVOLUNNO      /*SCAN SIOT'S VU ENTRIES      */
*      WHILE(NOTALCSW=OFF);            /*UNLESS UNALLOC'D ENT FOUND  */
         LA    AVUCTR1,1                                        02S0101
         B     @DE00101                                         02S0101
@DL00101 TM    NOTALCSW,B'10000000'                             02S0101
         BNZ   @DC00101                                         02S0101
*        IF TEMVUPTR->VDEVREQD = ON &  /*DEV REQUIRED?               */
*           TEMVUPTR->VOLALOC=OFF THEN /*UNALLOCATED ENTRY?          */
         TM    VDEVREQD(TEMVUPTR),B'00100000'                   02S0102
         BNO   @RF00102                                         02S0102
         TM    VOLALOC(TEMVUPTR),B'10000000'                    02S0102
         BNZ   @RF00102                                         02S0102
*          NOTALCSW = ON;              /*YES, STOP SCAN              */
         OI    NOTALCSW,B'10000000'                             02S0103
*      TEMVUPTR = TEMVUPTR + VOLENTLN; /*POINT TO NEXT VU ENTRY      */
@RF00102 AL    TEMVUPTR,VOLENTLN                                02S0104
*    END;                                                       02S0105
         AH    AVUCTR1,@CH00046                                 02S0105
@DE00101 L     @10,SIOTPTR                                      02S0105
         CH    AVUCTR1,SVOLUNNO(,@10)                           02S0105
         BNH   @DL00101                                         02S0105
@DC00101 DS    0H                                               02S0106
*    IF NOTALCSW = OFF THEN            /*ALL ENTS FOR SIOT ALLOCATED */
         TM    NOTALCSW,B'10000000'                             02S0106
         BNZ   @RF00106                                         02S0106
*      DO;                                                      02S0107
*        SIOTALCD=ON;                  /*YES, MARK SIOT ALLOCATED    */
         L     @10,SIOTPTR                                      02S0108
         OI    SIOTALCD(@10),B'00000010'                        02S0108
*        TOTREQS = TOTREQS - ONE;      /*DECREMENT NO. OF TOTAL REQS */
         L     @10,@PC00001+12                                  02S0109
         L     @10,ALCWAPTR(,@10)                               02S0109
         L     @09,TOTREQS(,@10)                                02S0109
         BCTR  @09,0                                            02S0109
         ST    @09,TOTREQS(,@10)                                02S0109
*      END;                                                     02S0110
*    IF EDLMGENS=OFF ×                 /*MULTI-GENERICS NOT OK       */
*       UPALOK = OFF THEN              /*EDL NOT ALREADY UPDATED     */
@RF00106 L     @10,SIOTPTR                                      02S0111
         L     @10,SIOTEDLP(,@10)                               02S0111
         TM    EDLMGENS(@10),B'01000000'                        02S0111
         BZ    @RT00111                                         02S0111
         L     @10,@PC00001+16                                  02S0111
         TM    UPALOK(@10),B'01000000'                          02S0111
         BNZ   @RF00111                                         02S0111
@RT00111 DS    0H                                               02S0112
*      DO;                                                      02S0112
*        TVUPTR = AFFVUPTR;            /*PT TO AFFINITY VU ENTRY     */
         L     TVUPTR,AFFVUPTR                                  02S0113
*        CALL VUSCAN;                  /*MUST EDL BE UPDATED?        */
         BAL   @14,VUSCAN                                       02S0114
*        IF UPEDLSW=ON THEN            /*YES                         */
         TM    UPEDLSW,B'10000000'                              02S0115
         BNO   @RF00115                                         02S0115
*          CALL UPDEDL;                /*UPDATE EDL ENTRIES          */
         BAL   @14,UPDEDL                                       02S0116
*      END;                                                     02S0117
*  END;                                                         02S0118
*ELSE                                  /*ALLOCATION ERROR            */
*  DO;                                                          02S0119
         B     @RC00086                                         02S0119
@RF00086 DS    0H                                               02S0120
*    CALL PROCAFF2;                    /*HANDLE ERROR        @ZA03616*/
         BAL   @14,PROCAFF2                                     02S0120
*  END;                                                         02S0121
*END AFFPROC;                                                   02S0122
@EL00002 DS    0H                                               02S0122
@EF00002 DS    0H                                               02S0122
@ER00002 LM    @14,@02,@SA00002                                 02S0122
         LM    @04,@12,@SA00002+20                              02S0122
         BR    @14                                              02S0122
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - BLD434PM                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - BUILD PARAMETER LIST TO ALLOC REQUEST TO UNIT */
*/*                                                                  */
*/* FUNCTION - THIS SEGMENT SETS UP PARAMETER INFORMATION FOR INPUT  */
*/*            TO THE ALLOCATE REQUEST TO UNIT (IEFAB434). INPUT     */
*/*            CONSISTS OF PROCESSING INDICATOR FLAGS AND INFORMATION*/
*/*            NECESSARY TO BUILD AN ETIOT REQUEST BLOCK.            */
*/*                                                                  */
*/* ENTRY - BLD434PM                                                 */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*             INPUT -                                              */
*/*                EDLGNTP - POINT TO GROUP ENTRY IN EDL.            */
*/*                SIOTPTR - POINTER TO SIOT BEING PROCESSED.        */
*/*                VUPTR   - POINTER TO VOLUNIT ENTRY BEING          */
*/*                          PROCESSED.                              */
*/*                                                                  */
*/* EXITS -                                                          */
*/*  CONDITION - PARAMETER LIST SUCCESSFULLY BUILT.                  */
*/*                                                                  */
*/*  OUTPUT -      ARUETUPD - OFF IF AN ETIOT ENTRY IS TO BE CREATED */
*/*                           ON IF AN EXISTING ENTRY TO BE          */
*/*                           UPDATED.                               */
*/*                ARUUSECT - ON IF DA TO INDICATE UPDATE USE COUNT  */
*/*                ARUVLCHK - ALWAYS OFF TO INDICATE NO VALIDITY CHK */
*/*                ARURLPOS - RELATIVE POSITION IN CURRENT SIOTS     */
*/*                           VOLUNIT TABLE ENTRIES.                 */
*/*                ARUUSEAT - UPDATE USE ATTRIBUTE IF PROCESSING     */
*/*                           FOR MOUNTED VOLUMES                    */
*/*                ARUNODEV - SET TO NUMBER OF DEVICE ENTRIES NEEDED,*/
*/*                           IF CREATING AN ETIOT ENTRY.            */
*/*                GROUPID -  GROUP ID FROM EDL ENTRY                */
*/*                VOLUMEID - VOLSER TO BE ALLOCATED                 */
*/*                                                                  */
*/*  RETURN CODE - NONE.                                             */
*/*                                                                  */
*/********************************************************************/
*BLD434PM:                                                      02S0123
*  PROC;                                                        02S0123
BLD434PM STM   @14,@12,12(@13)                                  02S0123
*ARUINDIC = ''B;                       /*CLEAR PARAMETER SWITCHES    */
         XC    ARUINDIC(4),ARUINDIC                             02S0124
*IF SIOTETIO = ZERO THEN               /*DOES ETIOT ENTRY EXIST?     */
         L     @10,SIOTPTR                                      02S0125
         ICM   @04,15,SIOTETIO(@10)                             02S0125
         BNZ   @RF00125                                         02S0125
*  ARUETUPD = OFF;                     /*NO,INDICATE ETIOT CREATE    */
         NI    ARUETUPD,B'01111111'                             02S0126
*ELSE                                                           02S0127
*  ARUETUPD = ON;                      /*YES,INDICATE UPDATE ETIOT   */
         B     @RC00125                                         02S0127
@RF00125 OI    ARUETUPD,B'10000000'                             02S0127
*ARURLPOS = ONE;                       /*INIT RELATIVE POSITION IN
*                                        ETIOT COUNT                 */
@RC00125 MVC   ARURLPOS(2),@CH00046                             02S0128
*AVUPTR = SVOLUNAD;                    /*PTR TO BASE OF VOLUNIT TABLE*/
         L     @10,SIOTPTR                                      02S0129
         L     AVUPTR,SVOLUNAD(,@10)                            02S0129
*DO WHILE(AVUPTR^=AFFVUPTR);           /*SEARCH VOLUNIT TABLE UNTIL
*                                        ENTRY TO BE ALLOCATED IS
*                                        FOUND                       */
         B     @DE00130                                         02S0130
@DL00130 DS    0H                                               02S0131
*  IF AVUPTR -> VDEVREQD = ON THEN     /*IF THIS VU ENTRY REQUIRES A
*                                        DEVICE THEN INCREMENT INDEX
*                                        TO NEXT AVAILABLE ETIOT     */
         TM    VDEVREQD(AVUPTR),B'00100000'                     02S0131
         BNO   @RF00131                                         02S0131
*    ARURLPOS = ARURLPOS + ONE;                                 02S0132
         LH    @10,ARURLPOS                                     02S0132
         LA    @10,1(,@10)                                      02S0132
         STH   @10,ARURLPOS                                     02S0132
*  ELSE;                                                        02S0133
@RF00131 DS    0H                                               02S0134
*  AVUPTR = AVUPTR + VOLENTLN;         /*UPDATE PTR TO NEXT VU ENTRY */
         AL    AVUPTR,VOLENTLN                                  02S0134
*END;                                                           02S0135
@DE00130 C     AVUPTR,AFFVUPTR                                  02S0135
         BNE   @DL00130                                         02S0135
*IF ARUETUPD = OFF THEN                /*IF ETIOT ENTRY MUST BE 02S0136
*                                        CREATED                     */
         TM    ARUETUPD,B'10000000'                             02S0136
         BNZ   @RF00136                                         02S0136
*  ARUNODEV = SIOTOTUN;                /*SET NUMBER OF DEVICE   02S0137
*                                        ENTRIES NEEDED              */
         L     @10,SIOTPTR                                      02S0137
         SLR   @04,@04                                          02S0137
         IC    @04,SIOTOTUN(,@10)                               02S0137
         STH   @04,ARUNODEV                                     02S0137
*ELSE;                                                          02S0138
@RF00136 DS    0H                                               02S0139
*IF UCB3DACC = ON THEN                 /*DA                          */
         L     @10,@PC00001+8                                   02S0139
         L     @10,UCBPTR(,@10)                                 02S0139
         TM    UCB3DACC(@10),B'00100000'                        02S0139
         BNO   @RF00139                                         02S0139
*  ARUUSECT = ON;                      /*INDICATE USE COUNT UPDATE   */
         OI    ARUUSECT,B'01000000'                             02S0140
*IF UCB3DACC = ON THEN                 /*DA                          */
@RF00139 L     @10,@PC00001+8                                   02S0141
         L     @10,UCBPTR(,@10)                                 02S0141
         TM    UCB3DACC(@10),B'00100000'                        02S0141
         BNO   @RF00141                                         02S0141
*  IF UCBRESV = OFF &                  /*IF UNIT NOT PERMRES AND     */
*     UCBPRES = OFF THEN               /*NOT RESERVED                */
         TM    UCBRESV(@10),B'00100100'                         02S0142
         BNZ   @RF00142                                         02S0142
*    ARUUSEAT = ON;                    /*THEN UPDATE USE ATTRIBUTE   */
         OI    ARUUSEAT,B'00001000'                             02S0143
*  ELSE;                                                        02S0144
@RF00142 DS    0H                                               02S0145
*ELSE                                                           02S0145
*  IF UCB3TAPE = ON THEN                                        02S0145
         B     @RC00141                                         02S0145
@RF00141 L     @10,@PC00001+8                                   02S0145
         L     @10,UCBPTR(,@10)                                 02S0145
         TM    UCB3TAPE(@10),B'10000000'                        02S0145
         BNO   @RF00145                                         02S0145
*    IF UCBRESV = OFF THEN             /*NOT RESERVED TAPE           */
         TM    UCBRESV(@10),B'00100000'                         02S0146
         BNZ   @RF00146                                         02S0146
*      ARUUSEAT = ON;                                           02S0147
         OI    ARUUSEAT,B'00001000'                             02S0147
*UCBDATA = UCBDATA && UCBDATA;         /*CLEAR UCB DATA FIELD        */
@RF00146 DS    0H                                               02S0148
@RF00145 DS    0H                                               02S0148
@RC00141 XC    UCBDATA(9),UCBDATA                               02S0148
*IF (AFFVUPTR->VOLID(1) = NONSPDA ×    /*NON-SPECIFIC DA             */
*    AFFVUPTR->VOLID(1) = NONSPTAP) &  /*NON-SPECIFIC TAPE           */
*    UCBVOLI ^= NOVOLSER &             /*VOLSER IN UCB               */
*    VOLSPEC = OFF THEN                /*PRIMARY REQ NOT SPECIFIC    */
         L     @10,AFFVUPTR                                     02S0149
         CLI   VOLID(@10),X'FE'                                 02S0149
         BE    @GL00011                                         02S0149
         CLI   VOLID(@10),X'FF'                                 02S0149
         BNE   @RF00149                                         02S0149
@GL00011 L     @10,@PC00001+8                                   02S0149
         L     @10,UCBPTR(,@10)                                 02S0149
         CLC   UCBVOLI(6,@10),NOVOLSER                          02S0149
         BE    @RF00149                                         02S0149
         L     @04,@PC00001+4                                   02S0149
         L     @04,VUPTR(,@04)                                  02S0149
         TM    VOLSPEC(@04),B'00100000'                         02S0149
         BNZ   @RF00149                                         02S0149
*  VOLUMEID = UCBVOLI;                 /*SET VOLSER FROM UCB         */
         MVC   VOLUMEID(6),UCBVOLI(@10)                         02S0150
*ELSE                                                           02S0151
*  VOLUMEID = AFFVUPTR -> VOLID;       /*SET VOLSER FROM VU ENTRY    */
         B     @RC00149                                         02S0151
@RF00149 L     @10,AFFVUPTR                                     02S0151
         MVC   VOLUMEID(6),VOLID(@10)                           02S0151
*GROUPID = EDLGRID;                    /*SET GROUPID FROM CORRECT EDL*/
@RC00149 MVC   GROUPID(4),EDLGRID(EDLGNTP)                      02S0152
*END BLD434PM;                                                  02S0153
@EL00003 DS    0H                                               02S0153
@EF00003 DS    0H                                               02S0153
@ER00003 LM    @14,@12,12(@13)                                  02S0153
         BR    @14                                              02S0153
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -     FINDEDL2                                      */
*/*                                                                  */
*/* DESCRIPTIVE NAME -  LOCATE EDL ENTRY                             */
*/*                                                                  */
*/* FUNCTION -  THIS SEGMENT WILL LOCATE THE EDL ENTRY AND THE INDEX */
*/*             INTO THE UCBLIST OF THE DEVICE TYPE AND UNIT TO BE   */
*/*             ALLOCATED TO THE CURRENT REQUEST.  THE DEVICE TYPE   */
*/*             MUST BE THE SAME AS THAT ALLOCATED TO THE PRIMARY    */
*/*             REQUEST IN THE VOLUME AFFINITY. OTHERWISE THE REQUEST*/
*/*             WILL NOT BE ALLOCATED. (NOTE THAT A MATCH    @YM05476*/
*/*             ON DEVICE TYPES MUST BE THE SAME EXCEPT FOR  @YM05476*/
*/*             CERTAIN OPTION BITS THAT MAY                 @YM05476*/
*/*             HAVE BEEN SET IN THE UCB BY SOME PRIOR       @YM05476*/
*/*             PROCESSING. THESE BITS ARE BITS THAT ARE NOT @YM05476*/
*/*             FEATURES OF ALL DEVICES OF THAT TYPE, OR THAT@YM05476*/
*/*             PERTAIN TO HOW THE DEVICE IS USED RATHER THAN@YM05476*/
*/*             TO ITS PHYSICAL CHARACTERISTICS. THIS MODULE @YM05476*/
*/*             ASSUMES THAT ANY OPTIONAL FEATURE BITS SET   @YM05476*/
*/*             IN THE UCB AT SYSGEN, WILL ALSO BE SET IN    @YM05476*/
*/*             ALLOCATION'S INTERNAL EDT.)                  @YM05476*/
*/*                                                                  */
*/* ENTRY - CLOSED SUBROUTINE OF IEFAB432                            */
*/*   PURPOSE - THIS SEGMENT IS ENTERED TO FIND EDL GENERIC & GROUP  */
*/*             ENTRIES FOR A VOLUNIT ENTRY THAT HAS VOLUME AFFINITY */
*/*             TO THE ENTRY(PRIMARY) JUST ALLOCATED.                */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     UCBPTR   - PTR TO UCB OF DEVICE ALLOCATED TO                 */
*/*                PRIMARY REQUEST.                                  */
*/*     EDLFGENP - PTR TO FIRST EDL ENTRY OF CURRENT                 */
*/*                SIOT                                              */
*/*     SIOTPTR  - PTR TO SIOT OF CURRENT REQUEST.                   */
*/*                                                                  */
*/* EXITS -                                                          */
*/*   1 CONDITION - UCB FOUND IN LIST.                               */
*/*                                                                  */
*/*      OUTPUT -                                                    */
*/*        EDLPTR - PTR TO EDL ENTRY OF CURRENT REQUEST.             */
*/*        UCBENTNO - INDEX OF UCB ADDR IN UCBLIST                   */
*/*                   OF EDL.                                        */
*/*        UCBMATSW - INDICATOR TO SHOW UCB FOUND IN EDL.            */
*/*                                                                  */
*/*     RETURN CODE -  0                                             */
*/*                                                                  */
*/*   2 CONDITION - DEVICE TYPES DON'T MATCH                         */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*       SIOTRSNC - REASON CODE FIELD IN SIOT = 20.                 */
*/*                                                                  */
*/*     RETURN CODE - 36                                             */
*/*                                                                  */
*/*   3 CONDITION - DEV TYPE OK BUT UCB NOT FOUND IN EDL             */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*       UCBMATSW - SET OFF TO INDICATE UCB NOT FOUND               */
*/*                  IN EDL.                                         */
*/*                                                                  */
*/* RETURN CODE - 0                                                  */
*/*                                                                  */
*/********************************************************************/
*FINDEDL2: PROC;                                                02S0154
FINDEDL2 STM   @14,@02,12(@13)                                  02S0154
         ST    @07,48(,@13)                                     02S0154
         STM   @09,@12,56(@13)                                  02S0154
*UCBMATSW = OFF;                       /*INITIALIZE UCBMATCH         */
         NI    UCBMATSW,B'01111111'                             02S0155
*DEVMATSW = OFF;                       /*INITIALIZE DEVICE MATCH     */
         NI    DEVMATSW,B'01111111'                             02S0156
*EDLPTR = EDLFGENP;                    /*POINT TO 1ST GENERIC ENTRY  */
         L     @10,SIOTPTR                                      02S0157
         L     @10,SIOTEDLP(,@10)                               02S0157
         L     EDLPTR,EDLFGENP(,@10)                            02S0157
*TYPSTORE = UCBTYP;                    /*MOVE UCBTYP TO WORK AREA    */
         L     @10,@PC00001+8                                   02S0158
         L     @10,UCBPTR(,@10)                                 02S0158
         MVC   TYPSTORE(4),UCBTYP(@10)                          02S0158
*IF UCB3DACC = ON THEN                 /*DIRECT ACCESS UCB           */
         TM    UCB3DACC(@10),B'00100000'                        02S0159
         BNO   @RF00159                                         02S0159
*  DO;                                 /*TURN OFF OPTION BITS@YM05476*/
*    TYPBYT2 = TYPBYT2 & SHPOWOFF;     /*SHARED FILE AND ALTERNATE
*                                        POWER BITS OFF      @YM05477*/
         NI    TYPBYT2,X'DC'                                    02S0161
*    IF TYPBYT4 = DA3340 THEN          /*IF A 3340           @YM05476*/
         CLI   TYPBYT4,X'0A'                                    02S0162
         BNE   @RF00162                                         02S0162
*      TYPBYT2 = TYPBYT2 & RPSOFF;     /*RPS OPTION OFF ALSO @YM05476*/
         NI    TYPBYT2,X'EF'                                    02S0163
*  END;                                /*END IF DA DEVICE    @YM05476*/
@RF00162 DS    0H                                               02S0165
*IF UCB3UREC = ON THEN                 /*UNIT RECORD                 */
@RF00159 L     @10,@PC00001+8                                   02S0165
         L     @10,UCBPTR(,@10)                                 02S0165
         TM    UCB3UREC(@10),B'00001000'                        02S0165
         BNO   @RF00165                                         02S0165
*  IF TYPBYT4 ^= UR3211 THEN           /*AND NOT A 3211      @YM05476*/
         CLI   TYPBYT4,X'09'                                    02S0166
         BE    @RF00166                                         02S0166
*    TYPBYT2 = TYPBYT2 & OPTSOFF;      /*IGNORE SPECIAL FEATURES     */
         NI    TYPBYT2,X'00'                                    02S0167
*  ELSE                                /*3211 UNIT RECORD DEV@YM05476*/
*    TYPBYT2 = TYPBYT2 & UCSOPMSK;     /*ALLOW UCS BIT       @YM05476*/
         B     @RC00166                                         02S0168
@RF00166 NI    TYPBYT2,X'80'                                    02S0168
*IF UCB3TAPE = ON THEN                 /*TAPE DEVICE         @YM05477*/
@RC00166 DS    0H                                               02S0169
@RF00165 L     @10,@PC00001+8                                   02S0169
         L     @10,UCBPTR(,@10)                                 02S0169
         TM    UCB3TAPE(@10),B'10000000'                        02S0169
         BNO   @RF00169                                         02S0169
*  TYPBYT2 = TYPBYT2 & OPTIONS;        /*OPTIONS BITS OFF    @ZA04104*/
         NI    TYPBYT2,X'F4'                                    02S0170
*IF UCB3DISP = ON THEN                 /*GRAPHICS DEVICE     @YM05476*/
@RF00169 L     @10,@PC00001+8                                   02S0171
         L     @10,UCBPTR(,@10)                                 02S0171
         TM    UCB3DISP(@10),B'00010000'                        02S0171
         BNO   @RF00171                                         02S0171
*  TYPBYT2 = TYPBYT2 & OPTSOFF;        /*ALL OPTION BITS OFF @YM05476*/
         NI    TYPBYT2,X'00'                                    02S0172
*DO WHILE (EDLPTR ^= ZERO              /*SCAN ALL GENERICS UNTIL     */
*   & DEVMATSW = OFF);                 /*DEV TYPE MATCH FOUND        */
@RF00171 B     @DE00173                                         02S0173
@DL00173 DS    0H                                               02S0174
*  IF EDLDEVT=TYPSTORE THEN            /*SCAN EDL FOR DEV TYPE MATCH */
         CLC   EDLDEVT(4,EDLPTR),TYPSTORE                       02S0174
         BNE   @RF00174                                         02S0174
*    DO;                               /*IF YES                      */
*      DEVMATSW = ON;                  /*DEV TYPE MATCH FOUND        */
         OI    DEVMATSW,B'10000000'                             02S0176
*      EDLGNTP = EDLGRPTR;             /*POINT TO GROUP ENTRY        */
         L     EDLGNTP,EDLGRPTR(,EDLPTR)                        02S0177
*      DO WHILE (EDLGNTP ^= ZERO       /*DO FOR ALL GROUPS OR UNTIL  */
*             &  UCBMATSW = OFF);      /*UCB MATCH IS FOUND.         */
         B     @DE00178                                         02S0178
@DL00178 DS    0H                                               02S0179
*        EDLUCBLP = EDLLISTP;          /*PT TO UCB LIST              */
         L     EDLUCBLP,EDLLISTP(,EDLGNTP)                      02S0179
*        DO UCBENTNO = ONE TO EDLUCBNO /*FIND UCB IN LIST            */
*          WHILE (UCBMATSW = OFF);                              02S0180
         LA    UCBENTNO,1                                       02S0180
         B     @DE00180                                         02S0180
@DL00180 TM    UCBMATSW,B'10000000'                             02S0180
         BNZ   @DC00180                                         02S0180
*          IF EDLUCBAD(UCBENTNO) = UCBPTR THEN /*IS THIS UCB A MATCH?*/
         LR    @10,UCBENTNO                                     02S0181
         SLA   @10,2                                            02S0181
         L     @09,@PC00001+8                                   02S0181
         ALR   @10,EDLUCBLP                                     02S0181
         AL    @10,@CF00940                                     02S0181
         SLR   @07,@07                                          02S0181
         ICM   @07,3,EDLUCBAD(@10)                              02S0181
         C     @07,UCBPTR(,@09)                                 02S0181
         BNE   @RF00181                                         02S0181
*            UCBMATSW = ON;            /*UCB FOUND                   */
         OI    UCBMATSW,B'10000000'                             02S0182
*          ELSE;                       /*NOT FOUND                   */
@RF00181 DS    0H                                               02S0184
*        END;                                                   02S0184
         AH    UCBENTNO,@CH00046                                02S0184
@DE00180 C     UCBENTNO,EDLUCBNO(,EDLGNTP)                      02S0184
         BNH   @DL00180                                         02S0184
@DC00180 DS    0H                                               02S0185
*         IF UCBMATSW =OFF THEN        /*IF NOT FOUND,               */
         TM    UCBMATSW,B'10000000'                             02S0185
         BNZ   @RF00185                                         02S0185
*           EDLGNTP = EDLNXGRP;        /*PT TO NEXT GROUP            */
         L     EDLGNTP,EDLNXGRP(,EDLGNTP)                       02S0186
*         ELSE;                        /*SAVE GRP PTR IF UCB MATCHES */
@RF00185 DS    0H                                               02S0188
*      END;                                                     02S0188
@DE00178 LTR   EDLGNTP,EDLGNTP                                  02S0188
         BZ    @DC00178                                         02S0188
         TM    UCBMATSW,B'10000000'                             02S0188
         BZ    @DL00178                                         02S0188
@DC00178 DS    0H                                               02S0189
*      IF UCBMATSW = OFF THEN          /*WAS UCB FOUND               */
         TM    UCBMATSW,B'10000000'                             02S0189
         BNZ   @RF00189                                         02S0189
*        EDLGNTP = EDLGRPTR;           /*NO, POINT TO FIRST GROUP    */
         L     EDLGNTP,EDLGRPTR(,EDLPTR)                        02S0190
*    END;                                                       02S0191
*  ELSE                                /*NO DEVICE TYPE MATCH        */
*    EDLPTR = EDLNXTNT;                /*THEN PT TO NXT GENERIC ENTRY*/
         B     @RC00174                                         02S0192
@RF00174 L     EDLPTR,EDLNXTNT(,EDLPTR)                         02S0192
*END;                                                           02S0193
@RC00174 DS    0H                                               02S0193
@DE00173 LTR   EDLPTR,EDLPTR                                    02S0193
         BZ    @DC00173                                         02S0193
         TM    DEVMATSW,B'10000000'                             02S0193
         BZ    @DL00173                                         02S0193
@DC00173 DS    0H                                               02S0194
*UCBENTNO = UCBENTNO - ONE;            /*SET INDEX FOR UCB FOUND     */
         BCTR  UCBENTNO,0                                       02S0194
*IF DEVMATSW = OFF THEN                /*DEVICE TYPE MATCH NOT FOUND */
         TM    DEVMATSW,B'10000000'                             02S0195
         BNZ   @RF00195                                         02S0195
*  DO;                                                          02S0196
*    SIOTRSNC = ERRCD20;               /*SIOT REASON CODE = 20       */
         L     @10,SIOTPTR                                      02S0197
         MVC   SIOTRSNC(2,@10),@CH00128                         02S0197
*    RETCODE  = ERROR;                 /*RETURN CODE=36              */
         LA    RETCODE,36                                       02S0198
*  END;                                                         02S0199
*END FINDEDL2;                                                  02S0200
@EL00004 DS    0H                                               02S0200
@EF00004 DS    0H                                               02S0200
@ER00004 LM    @14,@02,12(@13)                                  02S0200
         L     @07,48(,@13)                                     02S0200
         LM    @09,@12,56(@13)                                  02S0200
         BR    @14                                              02S0200
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - UPDEDL                                            */
*/*                                                                  */
*/* DESCRIPTIVE NAME - UPDATE ELIGIBLE DEVICE LIST                   */
*/*                                                                  */
*/* FUNCTION -  THIS ROUTINE SETS ALL EDL ENTRIES,WHICH ARE OF A     */
*/*             DEVICE TYPE OTHER THAN THAT JUST ALLOCATED,          */
*/*             INELIGIBLE FOR THIS REQUEST.                         */
*/*                                                                  */
*/* ENTRY - A CLOSED SUBROUTINE OF IEFAB433.                         */
*/*   PURPOSE - SEE FUNCTION.                                        */
*/*                                                                  */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     EDLPTR - POINTER TO EDL ENTRY OF THE REQUEST JUST            */
*/*              ALLOCATED                                           */
*/*                                                                  */
*/* EXITS - RETURN TO CALLER.                                        */
*/*   CONDITION -                                                    */
*/*      ALL EDL ENTRIES FOR THIS REQUEST WHICH ARE OF A DIFFERENT   */
*/*      DEVICE TYPE THAN THE REQUEST JUST ALLOCATED MARKED          */
*/*      INELIGIBLE                                                  */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     EINDEVTP - SET TO ONE, EDL ENTRIES ARE INELIGIBLE FOR        */
*/*                THIS REQUEST                                      */
*/*                                                                  */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/********************************************************************/
*UPDEDL:                               /*INTERNAL PROC TO UPDATE THE */
*                                      /*EDL                         */
*PROC;                                                          02S0201
UPDEDL   STM   @14,@12,12(@13)                                  02S0201
*SAVEDLP = EDLPTR;                     /*SAVE PTR TO ALLOCATED EDL
*                                        ENTRY                       */
         LR    SAVEDLP,EDLPTR                                   02S0202
*EDLPTR = EDLFGENP;                    /*POINT TO FIRST ENTRY FOR
*                                        THIS REQUEST                */
         L     @10,SIOTPTR                                      02S0203
         L     @10,SIOTEDLP(,@10)                               02S0203
         L     EDLPTR,EDLFGENP(,@10)                            02S0203
*DO WHILE(EDLPTR^=ZERO);               /*SCAN FOR DIFFERENT DEVICE
*                                        TYPES                       */
         B     @DE00204                                         02S0204
@DL00204 DS    0H                                               02S0205
*  IF EDLDEVT ^= SAVEDLP -> EDLDEVT THEN /*SAME DEVICE TYPE ?        */
         CLC   EDLDEVT(4,EDLPTR),EDLDEVT(SAVEDLP)               02S0205
         BE    @RF00205                                         02S0205
*    DO;                                                        02S0206
*      EINDEVTP = ON;                  /*NO,MARK EDL ENTRY INELIGIBLE*/
         OI    EINDEVTP(EDLPTR),B'10000000'                     02S0207
*    END;                                                       02S0208
*  ELSE;                                                        02S0209
@RF00205 DS    0H                                               02S0210
*  EDLPTR = EDLNXTNT;                  /*INCREMENT TO NEXT EDL ENTRY */
         L     EDLPTR,EDLNXTNT(,EDLPTR)                         02S0210
*END;                                                           02S0211
@DE00204 LTR   EDLPTR,EDLPTR                                    02S0211
         BNZ   @DL00204                                         02S0211
*EDLPTR = SAVEDLP;                     /*RESTORE EDLPTR              */
         LR    EDLPTR,SAVEDLP                                   02S0212
*END UPDEDL;                           /*RETURN TO CALLER            */
@EL00005 DS    0H                                               02S0213
@EF00005 DS    0H                                               02S0213
@ER00005 LM    @14,@12,12(@13)                                  02S0213
         BR    @14                                              02S0213
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - VUSCAN                                            */
*/*                                                                  */
*/* DESCRIPTIVE NAME - VOLUNIT SCAN ROUTINE                          */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS ROUTINE SCANS ALL THE VOLUNIT ENTRIES FOR THE CURRENT SIOT*/
*/*   TO DETERMINE IF THE CURRENT ENTRY IS THE FIRST TO BE ALLOCATED */
*/*   FOR THIS REQUEST. IF NO OTHER ENTRIES HAVE BEEN ALLOCATED AN   */
*/*   ADDITIONAL CHECK IS MADE TO SEE IF THIS SIOT REPRESENTS A      */
*/*   MULTI-UNIT REQUEST. IF BOTH CONDITIONS ARE TRUE A SWITCH IS    */
*/*   SET TO INDICATE THAT THE EDL MUST BE UPDATED.                  */
*/*                                                                  */
*/* ENTRY POINT - THIS IS A CLOSED SUBROUTINE OF IEFAB432            */
*/*   PURPOSE - TO DETERMINE WHETHER THE EDL MUST BE UPDATED         */
*/*             BEFORE ALLOCATING THE REST OF THE REQUEST.           */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     SIOTPTR - PTR TO CURRENT SIOT                                */
*/*     SVOLUNAD - PTR TO FIRST VOLUNIT ENTRY FOR REQUEST (IN SIOT)  */
*/*     SVOLUNNO - NUMBER OF VOLUNIT ENTRIES FOR REQUEST (IN SIOT)   */
*/*     TVUPTR - POINTER TO VOLUNIT ENTRY JUST ALLOCATED             */
*/*                                                                  */
*/*                                                                  */
*/* EXITS -  RETURN TO CALLER                                        */
*/*                                                                  */
*/*   CONDITION - ALL VOLUNIT ENTRIES SCANNED                        */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     UPEDLSW - SET ON IF EDL MUST BE UPDATED,OFF OTHERWISE        */
*/*                                                                  */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/********************************************************************/
*VUSCAN:                                                        02S0214
*PROC;                                                          02S0214
VUSCAN   STM   @14,@12,12(@13)                                  02S0214
*VUALCSW = OFF;                        /*INIT LOOP EXIT CONDITION    */
         NI    VUALCSW,B'01111111'                              02S0215
*UPEDLSW = ON;                         /*INIT SWITCH TO-UPDATE REQ'D */
         OI    UPEDLSW,B'10000000'                              02S0216
*AVUPTR = SVOLUNAD;                    /*PT TO FIRST VU ENTRY FOR
*                                        THIS REQUEST                */
         L     @10,SIOTPTR                                      02S0217
         L     AVUPTR,SVOLUNAD(,@10)                            02S0217
*IF SIOTOTUN > ONE THEN                /*MULTI-UNIT REQUEST?         */
         CLI   SIOTOTUN(@10),1                                  02S0218
         BNH   @RF00218                                         02S0218
*  DO TVUCTR = ONE TO SVOLUNNO         /*YES,SCAN OTHER  VU ENTRIES  */
*    WHILE(VUALCSW = OFF);             /*UNTIL FIND ONE ALLOCATED    */
         LA    TVUCTR,1                                         02S0219
         B     @DE00219                                         02S0219
@DL00219 TM    VUALCSW,B'10000000'                              02S0219
         BNZ   @DC00219                                         02S0219
*    IF TVUPTR ^= AVUPTR THEN          /*DON'T CHECK CURRENT ENTRY   */
         CR    TVUPTR,AVUPTR                                    02S0220
         BE    @RF00220                                         02S0220
*      DO;                                                      02S0221
*        IF AVUPTR -> VOLALOC = ON  THEN /*ENTRY ALLOCATED?          */
         TM    VOLALOC(AVUPTR),B'10000000'                      02S0222
         BNO   @RF00222                                         02S0222
*          VUALCSW = ON;               /*YES,VU ENTRY FOR THIS  02S0223
*                                        REQUEST HAS ALREADY BEEN
*                                        ALLOCATED                   */
         OI    VUALCSW,B'10000000'                              02S0223
*      END;                                                     02S0224
*    ELSE;                             /*BYPASSED CURRENT ENTRY      */
@RF00220 DS    0H                                               02S0226
*    AVUPTR = AVUPTR + VOLENTLN;       /*PT TO NEXT ENTRY            */
@RC00220 AL    AVUPTR,VOLENTLN                                  02S0226
*  END;                                                         02S0227
         AH    TVUCTR,@CH00046                                  02S0227
@DE00219 L     @10,SIOTPTR                                      02S0227
         CH    TVUCTR,SVOLUNNO(,@10)                            02S0227
         BNH   @DL00219                                         02S0227
@DC00219 DS    0H                                               02S0228
*ELSE                                                           02S0228
*   VUALCSW = ON;                      /*FAKE THE 'NO UPDATE' COND'N */
         B     @RC00218                                         02S0228
@RF00218 OI    VUALCSW,B'10000000'                              02S0228
*IF VUALCSW = ON THEN                  /*ANY OTHERS ALLOCATED        */
@RC00218 TM    VUALCSW,B'10000000'                              02S0229
         BNO   @RF00229                                         02S0229
*  UPEDLSW = OFF;                      /*YES, UPDATE NOT REQUIRED    */
         NI    UPEDLSW,B'01111111'                              02S0230
*END VUSCAN;                           /*RETURN TO CALLER            */
@EL00006 DS    0H                                               02S0231
@EF00006 DS    0H                                               02S0231
@ER00006 LM    @14,@12,12(@13)                                  02S0231
         BR    @14                                              02S0231
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - PROCAFF2                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - AFFINITY PROCESSING ERROR HANDLER             */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*    THE FUNCTION OF THIS ROUTINE IS TO DETERMINE THE TYPE OF      */
*/*    ERROR WHICH HAS OCCURED DURING AN ATTEMPT TO ALLOCATE AN      */
*/*    AFFINITY REQUEST AND PERFORM THE NECESSARY CLEANUP            */
*/*    PROCESSING AND TO SET THE REQUIRED ERROR FLAGS AND RETURN     */
*/*    CODES.                                                        */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*     IF THE RETURN CODE RECEIVED AS INPUT INDICATES       @ZA03616*/
*/*     A DADSM ERROR.                                       @ZA07122*/
*/*     ALL VOLUNIT ENTRIES WITH THE SAME UNITID AS THE      @ZA03616*/
*/*     FAILING REQUEST ARE MARKED WITH VUDNALOC AND         @ZA03616*/
*/*     VUDADSME.                                            @ZA07122*/
*/*                                                                  */
*/* ENTRY - PROCAFF2                                                 */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     RETCODE - INDICATION OF ERROR                                */
*/*               12,IMPLIES A RECOVERABLE DADSM ERROR               */
*/*     SIOTPTR - POINTER TO SIOT BEING PROCESSED                    */
*/*     VOLUNPTR - POINTER TO VOLUNIT TABLE                          */
*/*     AFFVUPTR - POINTER TO VU ENTRY SPECIFYING AFFINITY TO THE    */
*/*                CURRENT VU ENTRY                                  */
*/*                                                                  */
*/* EXITS -                                                          */
*/*                                                                  */
*/*   CONDITION - ERROR DOES NOT REQUIRE SPECIAL PROCESSING          */
*/*               BY THIS SEGMENT (NON-RECOVERABLE DADSM ERROR)      */
*/*                                                                  */
*/*      OUTPUT - NONE                                               */
*/*                                                                  */
*/*      RETURN CODE - 36                                            */
*/*                                                                  */
*/*   CONDITION - RECOVERABLE DADSM FAILURE                          */
*/*                                                                  */
*/*      OUTPUT - UPDATED VOLUNIT TABLE ENTRIES HAVING A UNITID      */
*/*               MATCHING THAT OF FAILING REQUEST                   */
*/*                                                                  */
*/*         VUDADSME - INDICATES A DADSM ERROR ON THE VOLUME MOUNTED */
*/*                    ON THIS UNIT                                  */
*/*         VUDNALOC - SET IN ALL VU ENTRIES HAVING SAME UNITID AS   */
*/*                    FAILING REQUEST                               */
*/*         SIOTALCD = 0                                             */
*/*         TOTREQS - INCREMENTED FOR SIOTS WHICH HAD BEEN MARKED    */
*/*                     ALLOCATED                                    */
*/*                                                                  */
*/*   CONDITION - TAPE VALIDITY CHECK ERROR                          */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*       VUVINELG - SET IN ALL VU ENTRIES HAVING SAME UNITID AS     */
*/*                  FAILING ENTRY                                   */
*/*       VUDNALOC - SET IN ALL VU ENTRIES HAVING SAME UNITID AS     */
*/*                  FAILING ENTRY                                   */
*/*       SIOTALCD - 0                                       @ZA03616*/
*/*       TOTREGS  - INCREMENTED FOR SIOTS WHICH HAD BEEN    @ZA03616*/
*/*                  MARKED ALLOCATED                        @ZA03616*/
*/*                                                                  */
*/*     RETURN CODE - 40                                             */
*/*                                                                  */
*/********************************************************************/
*PROCAFF2: PROC;                       /*                    @ZA03616*/
PROCAFF2 STM   @14,@02,12(@13)                                  02S0232
         STM   @04,@12,36(@13)                                  02S0232
*IF RETCODE = DASMFAIL THEN            /*RECOVERABLE DADSM ERROR     */
         CH    RETCODE,@CH00122                                 02S0233
         BNE   @RF00233                                         02S0233
*  DO;                                                          02S0234
*    TEMVUPTR = VOLUNPTR;              /*POINT TO BEGIN OF VU TABLE  */
         L     @10,@PC00001+12                                  02S0235
         L     @10,ALCWAPTR(,@10)                               02S0235
         L     TEMVUPTR,VOLUNPTR(,@10)                          02S0235
*    DO AVUCTR2 = ONE TO NUMVUENT;     /*LOOP THRU ALL ENTRIES       */
         LA    AVUCTR2,1                                        02S0236
         B     @DE00236                                         02S0236
@DL00236 DS    0H                                               02S0237
*      IF TEMVUPTR -> VOLUNTID = AFFVUPTR -> VOLUNTID THEN /*UNIT ID
*                                        MATCH THAT OF FAILED ENTRY? */
         L     @10,AFFVUPTR                                     02S0237
         CLC   VOLUNTID(2,TEMVUPTR),VOLUNTID(@10)               02S0237
         BNE   @RF00237                                         02S0237
*        DO;                                                    02S0238
*          TEMVUPTR->VUDADSME = ON; /*INDICATE SO IN VUENTRY @ZA07122*/
*          TEMVUPTR->VUDNALOC = ON;   /*INDICATE THAT THIS VU ENTRY
*                                         IS NOT TO BE PROCESSED
*                                         UNTIL RECOVERY             */
         OI    VUDADSME(TEMVUPTR),B'00001100'                   02S0240
*          IF TEMVUPTR->VOLSIOTP->SIOTALCD= ON THEN /*SIOT ALLOCATED */
         L     @10,VOLSIOTP(,TEMVUPTR)                          02S0241
         TM    SIOTALCD(@10),B'00000010'                        02S0241
         BNO   @RF00241                                         02S0241
*            DO;                      /*YES, MARK UNALLOCATED        */
*              TEMVUPTR->VOLSIOTP->SIOTALCD=OFF;                02S0243
         NI    SIOTALCD(@10),B'11111101'                        02S0243
*              TOTREQS = TOTREQS + 1;  /*INCR REQS REMAINING @YM04227*/
         L     @10,@PC00001+12                                  02S0244
         L     @10,ALCWAPTR(,@10)                               02S0244
         LA    @06,1                                            02S0244
         AL    @06,TOTREQS(,@10)                                02S0244
         ST    @06,TOTREQS(,@10)                                02S0244
*            END;                                               02S0245
*          ELSE;                       /*SIOT NOT ALLOCATED          */
@RF00241 DS    0H                                               02S0247
*        END;                                                   02S0247
*      ELSE;                                                    02S0248
@RF00237 DS    0H                                               02S0249
*      TEMVUPTR = TEMVUPTR + VOLENTLN; /*INCR TO NEXT VU ENTRY       */
         AL    TEMVUPTR,VOLENTLN                                02S0249
*    END;                                                       02S0250
         AH    AVUCTR2,@CH00046                                 02S0250
@DE00236 CR    AVUCTR2,NUMVUENT                                 02S0250
         BNH   @DL00236                                         02S0250
*      RETCODE = AFFCLEAN;             /*INDICATE RECOVERABLE ERROR
*                                        DURING AFFINITY PROCESSING  */
         LA    RETCODE,32                                       02S0251
*  END;                                                         02S0252
*ELSE                                   /*NOT RECOVERABLE DADSM 02S0253
*                                         ERROR                      */
*  RETCODE = ERROR;                     /*SET RETURN CODE 36         */
         B     @RC00233                                         02S0253
@RF00233 LA    RETCODE,36                                       02S0253
*END PROCAFF2;                         /*                    @ZA03616*/
@EL00007 DS    0H                                               02S0254
@EF00007 DS    0H                                               02S0254
@ER00007 LM    @14,@02,12(@13)                                  02S0254
         LM    @04,@12,36(@13)                                  02S0254
         BR    @14                                              02S0254
*END IEFAB432                                                   01S0255
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (A432SPEC)                                        *
*/*%INCLUDE SYSLIB  (A432DATA)                                        *
*/*%INCLUDE SYSLIB  (IEFASIOT)                                        *
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                        *
*/*%INCLUDE SYSLIB  (IEFZB422)                                        *
*/*%INCLUDE SYSLIB  (IEFZB425)                                        *
*/*%INCLUDE SYSLIB  (IEFZB423)                                        *
*/*%INCLUDE SYSLIB  (IEFZB430)                                        *
*/*%INCLUDE SYSLIB  (IEFZB431)                                        *
*/*%INCLUDE SYSLIB  (AFFPROC )                                        *
*/*%INCLUDE SYSLIB  (AFFSPEC )                                        *
*/*%INCLUDE SYSLIB  (BLD434PM)                                        *
*/*%INCLUDE SYSLIB  (BL434SPC)                                        *
*/*%INCLUDE SYSLIB  (FINDEDL2)                                        *
*/*%INCLUDE SYSLIB  (FEDL2SPC)                                        *
*/*%INCLUDE SYSLIB  (UPDEDL  )                                        *
*/*%INCLUDE SYSLIB  (UPEDLSPC)                                        *
*/*%INCLUDE SYSLIB  (VUSCAN  )                                        *
*/*%INCLUDE SYSLIB  (VUSNSPEC)                                        *
*/*%INCLUDE SYSLIB  (PROCAFF2)                                        *
*/*%INCLUDE SYSLIB  (PAF2SPEC)                                        *
*;                                                              01S0255
@DATA    DS    0H
@CH00046 DC    H'1'
@CH00122 DC    H'12'
@CH00128 DC    H'20'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    5F
@SA00002 DS    14F
@AL00001 DS    8A
IEFAB432 CSECT
         DS    0F
@CF00138 DC    F'0'
@CF00940 DC    F'-4'
@DATD    DSECT
         DS    0D
AFFVUPTR DS    A
EREQPTR  DS    A
SIOTPTR  DS    A
UCBDATAP DS    A
VMVREQBP DS    A
GROUPID  DS    F
ALTVUP   DS    A
SIOTCTR  DS    F
TEMVUP   DS    A
LUINDEX  DS    H
         DS    CL2
ARUINDIC DS    BL4
         ORG   ARUINDIC
ARUETUPD DS    BL1
ARUUSECT EQU   ARUINDIC+0
ARUAFF   EQU   ARUINDIC+0
ARUVLCHK EQU   ARUINDIC+0
ARUUSEAT EQU   ARUINDIC+0
ARUUPDAL EQU   ARUINDIC+0
ARUVOLSW EQU   ARUINDIC+0
@NM00002 EQU   ARUINDIC+0
         ORG   ARUINDIC+4
ARUWORD  DS    CL4
         ORG   ARUWORD
ARURLPOS DS    FL2
ARUNODEV DS    FL2
         ORG   ARUWORD+4
DEVMATSW DS    BL1
FUNCS    DS    BL1
         ORG   FUNCS
NEWDEV   DS    BL1
ARUFUNC  EQU   FUNCS+0
AFFBIT   EQU   FUNCS+0
         ORG   FUNCS+1
NOTALCSW DS    BL1
TYPSTORE DS    CL4
         ORG   TYPSTORE
@NM00003 DS    BL1
TYPBYT2  DS    BL1
@NM00004 DS    BL1
TYPBYT4  DS    BL1
         ORG   TYPSTORE+4
UCBMATSW DS    BL1
UPEDLSW  DS    BL1
VUALCSW  DS    BL1
UCBDATA  DS    CL9
         ORG   UCBDATA
@NM00005 DS    CL2
VOLUMEID DS    CL6
@NM00006 DS    CL1
         ORG   UCBDATA+9
AFFOUND  DS    BL1
ETIORB   DS    CL42
TYPMATCH DS    BL1
         DS    CL1
VMVRB    DS    CL52
@OLDKEY  DS    AL1
IEFAB432 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CV00095 DC    V(IEFAB434)
@CV00096 DC    V(IEFAB441)
@CV00097 DC    V(IEFAB4F2)
         DS    0D
VOLENTLN DC    AL4(28)
FUNC441  DC    B'00000000'
NOVOLSER DC    X'000000000000'
IEFAB432 CSECT
         DS   0H
A432PTCH DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFAB432 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
UCBENTNO EQU   @06
TVUCTR   EQU   @03
RETCODE  EQU   @03
NUMVUENT EQU   @07
AVUCTR2  EQU   @03
AVUCTR1  EQU   @05
AVUCTR   EQU   @09
TVUPTR   EQU   @05
TEMVUPTR EQU   @02
SAVEDLP  EQU   @02
EDLUCBLP EQU   @08
EDLPTR   EQU   @04
EDLGNTP  EQU   @05
AVUPTR   EQU   @02
REG15    EQU   @15
VOLUNTAB EQU   0
VOLID    EQU   VOLUNTAB
VOLSTAT  EQU   VOLUNTAB+6
VOLSTATA EQU   VOLSTAT
VOLSPEC  EQU   VOLSTATA
VOLSTATB EQU   VOLSTAT+1
VOLALOC  EQU   VOLSTATB
VDEVREQD EQU   VOLSTATB
VUDNALOC EQU   VOLSTATB
VUDADSME EQU   VOLSTATB
VUVINELG EQU   VOLSTATB
VOLSTATC EQU   VOLSTAT+2
VOLSTATD EQU   VOLSTAT+3
VOLUNTID EQU   VOLUNTAB+10
VOLSIOTP EQU   VOLUNTAB+16
INDMSIOT EQU   0
SCTUSADD EQU   INDMSIOT+20
SIOTOTUN EQU   INDMSIOT+39
SIOTBYT1 EQU   INDMSIOT+43
SIOTALCD EQU   SIOTBYT1
SIOTBYT3 EQU   INDMSIOT+46
SIOTTSTC EQU   INDMSIOT+47
SIOTBYT0 EQU   INDMSIOT+52
SCTSDISP EQU   INDMSIOT+55
SCTSBYT1 EQU   INDMSIOT+56
SCTSBYT2 EQU   INDMSIOT+57
SCTSBYT3 EQU   INDMSIOT+58
SCTSNEW  EQU   SCTSBYT3
SCTSBYT4 EQU   INDMSIOT+59
SCTUTYPE EQU   INDMSIOT+60
SIOTDEVT EQU   SCTUTYPE
SIOUBYT3 EQU   SIOTDEVT+2
SIOTALTD EQU   INDMSIOT+92
SIOTBYT2 EQU   INDMSIOT+103
SIOTRSNC EQU   INDMSIOT+130
SIOTEDLP EQU   INDMSIOT+136
SVOLUNAD EQU   INDMSIOT+140
SIOTETIO EQU   INDMSIOT+148
SVOLUNNO EQU   INDMSIOT+168
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBRESV  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCB3TAPE EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00026 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
IEFEDL   EQU   0
EDLHDR   EQU   IEFEDL
EDLFGENP EQU   EDLHDR+8
EDLUVFLG EQU   EDLHDR+16
EDLMGENS EQU   EDLUVFLG
EDLENTRY EQU   0
EDLNXTNT EQU   EDLENTRY
EDLDEVT  EQU   EDLENTRY+4
EDLGRPTR EQU   EDLENTRY+12
EDLDTFLG EQU   EDLENTRY+20
EINDEVTP EQU   EDLDTFLG
EDLGNTRY EQU   0
EDLNXGRP EQU   EDLGNTRY
EDLUCBNO EQU   EDLGNTRY+4
EDLLISTP EQU   EDLGNTRY+8
EDLGRID  EQU   EDLGNTRY+12
EDLGRFLG EQU   EDLGNTRY+16
EDLUCBL  EQU   0
EDLUCBAD EQU   EDLUCBL
EDLINDIC EQU   EDLUCBL+2
EDLALCD  EQU   EDLINDIC
ALCWA    EQU   0
FAILRSCP EQU   ALCWA+20
CNTABLE  EQU   ALCWA+28
TOTREQS  EQU   CNTABLE+36
TOTVOLUN EQU   CNTABLE+44
VOLUNPTR EQU   ALCWA+80
VOLUNSZE EQU   ALCWA+84
INDICATE EQU   ALCWA+112
INDRETRY EQU   INDICATE
@NM00029 EQU   ALCWA+113
TIOTHDRP EQU   ALCWA+120
CANCELP  EQU   ALCWA+140
NAMES    EQU   0
ETIOTREQ EQU   0
EREQMAP  EQU   ETIOTREQ
EREQSTAT EQU   ETIOTREQ+2
VMVRQBLK EQU   0
VMVFNMAP EQU   VMVRQBLK
VMVOPTB1 EQU   VMVFNMAP
VMVOPTB2 EQU   VMVFNMAP+1
VMVOPTB3 EQU   VMVFNMAP+2
VMVMINFO EQU   VMVRQBLK+40
VMVACTON EQU   VMVMINFO
VMVUSER  EQU   VMVRQBLK+48
CANCLECB EQU   0
FAILRSC  EQU   0
UCBBGN   EQU   0
SVSIOPTR EQU   0
VUPTR    EQU   0
UCBPTR   EQU   0
ALCWAPTR EQU   0
AFUNCMAP EQU   0
UPALOK   EQU   AFUNCMAP
UCBOBS01 EQU   UCBDEV
UCBVOLI  EQU   UCBOBS01+4
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00025 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBOBS09 EQU   UCBDEV
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBCTCF1 EQU   UCBOBS08+4
UCBCTCAD EQU   UCBOBS08
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00025
UCBSKPFG EQU   @NM00025
UCBRIPND EQU   @NM00025
UCBRTIAC EQU   @NM00025
UCBRSV79 EQU   @NM00025
UCBRSV78 EQU   @NM00025
UCBRSV77 EQU   @NM00025
UCBOLTEP EQU   @NM00025
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBRV038 EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00024 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRV028 EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVTOC  EQU   UCBOBS01
@NM00001 EQU   AFUNCMAP
VOLSWOK  EQU   AFUNCMAP
@NM00042 EQU   VMVUSER
VMVPROCD EQU   VMVUSER
VMVVUNTP EQU   VMVRQBLK+44
@NM00041 EQU   VMVMINFO+1
@NM00040 EQU   VMVACTON
VMVRTAIN EQU   VMVACTON
VMVDSMT  EQU   VMVACTON
VMVKEEP  EQU   VMVACTON
VMVRETCD EQU   VMVRQBLK+36
VMVJSNMP EQU   VMVRQBLK+32
VMVDSNMP EQU   VMVRQBLK+28
VMVJBNMP EQU   VMVRQBLK+24
VMVMVLSR EQU   VMVRQBLK+18
VMVUVLSR EQU   VMVRQBLK+12
VMVUCBP  EQU   VMVRQBLK+9
@NM00039 EQU   VMVRQBLK+8
VMVNREQP EQU   VMVRQBLK+4
VMVOPTB4 EQU   VMVFNMAP+3
@NM00038 EQU   VMVOPTB3
VMVNUMSG EQU   VMVOPTB3
VMVCUVOL EQU   VMVOPTB3
VMVDUPVL EQU   VMVOPTB3
VMVNSPVT EQU   VMVOPTB2
VMVNSLTP EQU   VMVOPTB2
VMVSLTAP EQU   VMVOPTB2
VMVNLTAP EQU   VMVOPTB2
VMVALTAP EQU   VMVOPTB2
VMVSTRG  EQU   VMVOPTB2
VMVPUBLC EQU   VMVOPTB2
VMVPRIVT EQU   VMVOPTB2
VMVVDEND EQU   VMVOPTB1
VMVVRLBL EQU   VMVOPTB1
VMVDWTOR EQU   VMVOPTB1
VMVMTMSG EQU   VMVOPTB1
VMVMOUNT EQU   VMVOPTB1
VMVREWND EQU   VMVOPTB1
VMVUCB   EQU   VMVOPTB1
VMVUNLOD EQU   VMVOPTB1
EREQCODE EQU   ETIOTREQ+40
EREQJSCB EQU   ETIOTREQ+36
EREQGRID EQU   ETIOTREQ+32
EREQDEVS EQU   ETIOTREQ+30
EREQRPOS EQU   ETIOTREQ+28
EREQUCB  EQU   ETIOTREQ+24
EREQSIOT EQU   ETIOTREQ+20
@NM00037 EQU   ETIOTREQ+19
EREQSSVA EQU   ETIOTREQ+16
@NM00036 EQU   ETIOTREQ+15
EREQJSVA EQU   ETIOTREQ+12
EREQDDNM EQU   ETIOTREQ+4
@NM00035 EQU   EREQSTAT
EREQCATL EQU   EREQSTAT
EREQJSCT EQU   EREQSTAT
EREQPASS EQU   EREQSTAT
EREQUNAL EQU   EREQSTAT
EREQVAM  EQU   EREQSTAT
EREQQNM  EQU   EREQSTAT
EREQTERM EQU   EREQSTAT
@NM00034 EQU   EREQMAP
EREQMOVE EQU   EREQMAP
EREQUPD  EQU   EREQMAP
EREQBLD  EQU   EREQMAP
ALCPROCN EQU   NAMES+16
ALCSTEPN EQU   NAMES+8
ALCJOBN  EQU   NAMES
EXITPRMP EQU   ALCWA+144
WORK3MP  EQU   ALCWA+136
WMASK2P  EQU   ALCWA+132
WMASKPTR EQU   ALCWA+128
LGENLOCK EQU   ALCWA+124
TCBP     EQU   ALCWA+116
ALCWASID EQU   ALCWA+114
@NM00030 EQU   @NM00029
NODEVERR EQU   @NM00029
NEEDRCVY EQU   @NM00029
ALCWAREC EQU   @NM00029
WAITIGEN EQU   @NM00029
UNITRECS EQU   @NM00029
ALCWADUL EQU   INDICATE
ALCWISAM EQU   INDICATE
DSSUNIT  EQU   INDICATE
DSSTAPE  EQU   INDICATE
PRIVASUM EQU   INDICATE
INDREQU  EQU   INDICATE
INDWAIT  EQU   INDICATE
QMGRRBP  EQU   ALCWA+108
RIMTABCT EQU   ALCWA+104
RIMTABLN EQU   ALCWA+100
RIMTABP  EQU   ALCWA+96
ALGTABSZ EQU   ALCWA+92
ALGTABP  EQU   ALCWA+88
@NM00028 EQU   ALCWA+78
LTUNITID EQU   ALCWA+76
NUMREQS  EQU   CNTABLE+40
OTHEREQS EQU   CNTABLE+32
SUBSREQS EQU   CNTABLE+28
STRGREQS EQU   CNTABLE+24
PUBLREQS EQU   CNTABLE+20
PVTNREQS EQU   CNTABLE+16
SPECREQS EQU   CNTABLE+12
TPREQS   EQU   CNTABLE+8
VAMREQS  EQU   CNTABLE+4
DMYREQS  EQU   CNTABLE
EDTABPTR EQU   ALCWA+24
IOSLUTP  EQU   ALCWA+16
JSCBPTR  EQU   ALCWA+12
SIOT1P   EQU   ALCWA+8
FMAPPTR  EQU   ALCWA+4
WASIZE   EQU   ALCWA
EDLNOJES EQU   EDLINDIC
EDLVOLAF EQU   EDLINDIC
EDLENQ   EQU   EDLINDIC
EDLDADSM EQU   EDLINDIC
EDLJINEL EQU   EDLGRFLG
@NM00027 EQU   EDLENTRY+18
EDLNSCNT EQU   EDLENTRY+16
EDLGRPNO EQU   EDLENTRY+8
EDLVAM   EQU   EDLUVFLG
EDLGMTP  EQU   EDLHDR+12
EDLGENNO EQU   EDLHDR+4
EDLLUV   EQU   EDLHDR
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBRV034 EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBRV032 EQU   UCBFLP1
UCBRV031 EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00026
UCBHALI  EQU   @NM00026
UCBRSV09 EQU   @NM00026
UCBRSV08 EQU   @NM00026
UCBRSV07 EQU   @NM00026
UCBRSV06 EQU   @NM00026
UCBRSV05 EQU   @NM00026
UCBRSV04 EQU   @NM00026
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBFLB7  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBRSV02 EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBRV002 EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00023 EQU   UCB
SIODDSNL EQU   INDMSIOT+173
SIOVDSNL EQU   INDMSIOT+172
SIOVDSNT EQU   INDMSIOT+170
SIOTVMVP EQU   INDMSIOT+164
SIOTJFX  EQU   INDMSIOT+160
SJFCBPTR EQU   INDMSIOT+156
SIOTNPTR EQU   INDMSIOT+152
SIOTATE  EQU   INDMSIOT+144
SIOTEDLS EQU   INDMSIOT+132
SCTANAME EQU   INDMSIOT+122
@NM00022 EQU   INDMSIOT+108
SIOTSSNM EQU   INDMSIOT+104
SIODDQCR EQU   SIOTBYT2
SIOVDQCR EQU   SIOTBYT2
SIOTCVOL EQU   SIOTBYT2
SIOTCNEW EQU   SIOTBYT2
SIOTCALC EQU   SIOTBYT2
SIOTGALL EQU   SIOTBYT2
SIOTDSPD EQU   SIOTBYT2
SIOTDMND EQU   SIOTBYT2
SIOTOPUC EQU   INDMSIOT+99
SIOTOUTR EQU   INDMSIOT+97
SIOTOUTC EQU   INDMSIOT+96
@NM00021 EQU   INDMSIOT+93
SIOTAUNC EQU   SIOTALTD
SIOTACAT EQU   SIOTALTD
SIOTADEL EQU   SIOTALTD
SIOTAKEP EQU   SIOTALTD
SIOTNPRV EQU   SIOTALTD
SIOJCATS EQU   SIOTALTD
@NM00020 EQU   SIOTALTD
@NM00019 EQU   SIOTALTD
@NM00018 EQU   INDMSIOT+91
SIOTNDSB EQU   INDMSIOT+88
@NM00017 EQU   INDMSIOT+84
SIOTDPCD EQU   INDMSIOT+82
@NM00016 EQU   INDMSIOT+81
SCTOUTPN EQU   INDMSIOT+80
SCTOUTNO EQU   INDMSIOT+76
SCTOUTNM EQU   INDMSIOT+68
SIOUCBAD EQU   SCTUTYPE+5
SIOUCNVT EQU   SCTUTYPE+4
SIOUBYT4 EQU   SIOTDEVT+3
@NM00015 EQU   SIOUBYT3
SIO3UREC EQU   SIOUBYT3
SIO3DISP EQU   SIOUBYT3
SIO3DACC EQU   SIOUBYT3
SIO3COMM EQU   SIOUBYT3
SIO3TAPE EQU   SIOUBYT3
SIOUBYT2 EQU   SIOTDEVT+1
SIOUBYT1 EQU   SIOTDEVT
SIOTOMN  EQU   SCTSBYT4
SIOTIPDI EQU   SCTSBYT4
SIOTVAFF EQU   SCTSBYT4
SIOTSTEP EQU   SCTSBYT4
SIOTASCI EQU   SCTSBYT4
@NM00014 EQU   SCTSBYT4
SIOTGDGA EQU   SCTSBYT4
SCTSGDGS EQU   SCTSBYT4
SCTSOLD  EQU   SCTSBYT3
SCTSMOD  EQU   SCTSBYT3
SCTSYSOU EQU   SCTSBYT3
SCTVREF  EQU   SCTSBYT3
@NM00013 EQU   SCTSBYT3
SCTSYSNE EQU   SCTSBYT3
SCTDSNRF EQU   SCTSBYT3
SCTRECVD EQU   SCTSBYT2
SCTDEFER EQU   SCTSBYT2
SCTLABEL EQU   SCTSBYT2
SCTUNLBD EQU   SCTSBYT2
SCTJOBLB EQU   SCTSBYT2
SCTVOLAF EQU   SCTSBYT2
SIOTCATL EQU   SCTSBYT2
SIOCLUNL EQU   SCTSBYT2
SIOTJSCT EQU   SCTSBYT1
SCTUNAFF EQU   SCTSBYT1
SCTPARLM EQU   SCTSBYT1
SIOTQDSN EQU   SCTSBYT1
SIOTGDSN EQU   SCTSBYT1
SIOTCCAT EQU   SCTSBYT1
SCTSYSIN EQU   SCTSBYT1
SCTDUMMY EQU   SCTSBYT1
SIOTUNCT EQU   SCTSDISP
SIOTCTLG EQU   SCTSDISP
SIOTDLET EQU   SCTSDISP
SIOTKEEP EQU   SCTSDISP
SIOTPASS EQU   SCTSDISP
SIOTPRIV EQU   SCTSDISP
S3400DSP EQU   SCTSDISP
SIOTRETN EQU   SCTSDISP
SIOTVLCT EQU   INDMSIOT+54
SCTNMBUT EQU   INDMSIOT+53
SIOTRTRY EQU   SIOTBYT0
SIOTPUPV EQU   SIOTBYT0
SIOTNOPV EQU   SIOTBYT0
SIOTGIGN EQU   SIOTBYT0
SPVTAMSG EQU   SIOTBYT0
SIOTFUDA EQU   SIOTBYT0
SIOTDYAL EQU   SIOTBYT0
SIOTSSDS EQU   SIOTBYT0
SIOTGIID EQU   INDMSIOT+50
SCTVOLCT EQU   INDMSIOT+49
SCTSPOOL EQU   INDMSIOT+48
SIOTQNAM EQU   SIOTTSTC
SIOTDSNM EQU   SIOTTSTC
SIOTTRKM EQU   SIOTTSTC
@NM00012 EQU   SIOTTSTC
SIOTTERM EQU   SIOTTSTC
@NM00011 EQU   SIOTTSTC
@NM00010 EQU   SIOTBYT3
SIOTJES3 EQU   SIOTBYT3
SIOCDEVT EQU   SIOTBYT3
SIOALIAS EQU   SIOTBYT3
SCTDDINO EQU   INDMSIOT+44
SIOTDDNT EQU   SIOTBYT1
SIODADSM EQU   SIOTBYT1
SIOTDADR EQU   SIOTBYT1
SIODUNAL EQU   SIOTBYT1
SIOVAMDS EQU   SIOTBYT1
SIOTHOLD EQU   SIOTBYT1
SIOTOCKP EQU   SIOTBYT1
SIOPSCNT EQU   INDMSIOT+42
SIOTREFN EQU   INDMSIOT+40
SIOTVRSB EQU   INDMSIOT+36
@NM00009 EQU   INDMSIOT+35
SCTPJFCB EQU   INDMSIOT+32
@NM00008 EQU   INDMSIOT+31
SCTPSIOT EQU   INDMSIOT+28
SIOTAFID EQU   INDMSIOT+26
@NM00007 EQU   INDMSIOT+24
SIODSNTE EQU   INDMSIOT+22
SIOTUNAF EQU   SCTUSADD
SIOTDEST EQU   INDMSIOT+12
SCTDDNAM EQU   INDMSIOT+4
SIOTTYPE EQU   INDMSIOT+3
SIOTDSKA EQU   INDMSIOT
VUGRID   EQU   VOLUNTAB+24
VUUCBP   EQU   VOLUNTAB+20
VOLALGTP EQU   VOLUNTAB+12
VURCVYPR EQU   VOLSTATD
VUVLUNIQ EQU   VOLSTATD
VUDMUNIQ EQU   VOLSTATD
VUUNALSW EQU   VOLSTATD
VUDMNDAL EQU   VOLSTATD
VUDMNDOF EQU   VOLSTATD
VUREALOC EQU   VOLSTATD
VUMUGDON EQU   VOLSTATD
@NM00033 EQU   VOLSTATC
@NM00032 EQU   VOLSTATC
@NM00031 EQU   VOLSTATC
VOLURREQ EQU   VOLSTATC
VOLGRREQ EQU   VOLSTATC
VOLDAREQ EQU   VOLSTATC
VOLCOREQ EQU   VOLSTATC
VOLTAREQ EQU   VOLSTATC
VUAFFWRK EQU   VOLSTATB
VUPROCED EQU   VOLSTATB
VOLMNTD  EQU   VOLSTATB
VOLDEFER EQU   VOLSTATA
VUDADSM  EQU   VOLSTATA
VOLRESVE EQU   VOLSTATA
VOLNSHR  EQU   VOLSTATA
VOLSTG   EQU   VOLSTATA
VOLPRV   EQU   VOLSTATA
VOLPUB   EQU   VOLSTATA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00053 EQU   @RC00050
@RF00069 EQU   @RC00050
@RF00072 EQU   @RC00050
@RC00086 EQU   @EL00002
@RF00189 EQU   @RC00174
@RF00195 EQU   @EL00004
@RF00222 EQU   @RC00220
@RF00229 EQU   @EL00006
@RC00233 EQU   @EL00007
@RF00056 EQU   @RC00053
@RF00111 EQU   @RC00086
@RF00115 EQU   @RC00086
@ENDDATA EQU   *
         END   IEFAB432,(C'PLS1210',0701,75329)
