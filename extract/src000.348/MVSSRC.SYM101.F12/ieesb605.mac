         TITLE 'IEESB605 - STC - JOB SCHEDULING SUBROUTINE             *
                        '
IEESB605 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'IEESB605  76.334'                                 0001
IEEVIC   DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00285-IEEVIC)
         ENTRY IEEVIC
IEEVICER DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00295-IEEVICER)
         ENTRY IEEVICER
         DROP  @15
@PROLOG  BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         LR    @08,@15                                             0001
         LR    @03,@01                                             0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         LR    @15,@08                                             0001
         LR    @01,@03                                             0001
         ST    @13,@SA00001+4                                      0001
         LR    @13,@11                                             0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 MVC   @PC00001(4),0(@01)                                  0001
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
*        PTRSAVE = REGPARM;       /* SAVE THE JSEL POINTER           */
*                                                                  0079
         LR    PTRSAVE,REGPARM                                     0079
*        RESPECIFY (RTNADR) RESTRICTED;                            0080
*        R14SAVE = RTNADR;        /* SAVE POSSIBLE RETURN ADDRESS    */
         ST    RTNADR,R14SAVE                                      0081
*        RESPECIFY (RTNADR) UNRESTRICTED;                          0082
*                                                                  0082
*        R0 = LENGTH(JSWA);       /* SET JSWA LENGTH AND             */
         LA    R0,40                                               0083
*        R0 = R0 × 'FD000000'X;   /* SUBPOOL NUMBER                  */
         O     R0,@CF01662                                         0084
*        GEN(GETMAIN R,LV=(0));   /* GET THE CORE FOR THE JSWA       */
*                                                                  0085
         GETMAIN R,LV=(0)
*        JSWAPTR = COREPTR;       /* SET THE BASE POINTER FOR JSWA   */
         LR    JSWAPTR,COREPTR                                     0086
*        RESPECIFY (R0,COREPTR) UNRESTRICTED;                      0087
*        JSWA = JSWA && JSWA;     /* ZERO THE JSWA                   */
         XC    JSWA(40,JSWAPTR),JSWA(JSWAPTR)                      0088
*        JSWALGTH = LENGTH(JSWA); /* SET LENGTH IN JSWA              */
         MVC   JSWALGTH(2,JSWAPTR),@CH01666                        0089
*        JSWAJSEL = PTRSAVE;      /* SET BASE TO THE JSEL            */
         ST    PTRSAVE,JSWAJSEL(,JSWAPTR)                          0090
*        IF JSOLSMS1 = '1'B THEN                                   0091
         L     @08,JSWAJSEL(,JSWAPTR)                              0091
         L     @08,JSELJSOL(,@08)                                  0091
         TM    JSOLSMS1(@08),B'00001000'                           0091
         BNO   @RF00091                                            0091
*           JSWASMS1 = '1'B;      /* SET MESSAGE SUPPRESSION BIT     */
*                                                                  0092
         OI    JSWASMS1(JSWAPTR),B'01000000'                       0092
*        /*                                                          */
*        /* SET INDICATORS FOR RESOURCES THAT EXIST ON ENTRY TO THE  */
*        /* JOB SCHEDULING SUBROUTINE.                               */
*        /*                                                          */
*        JSWAJCLS = '1'B;         /* INDICATE JCLS EXISTS            */
@RF00091 DS    0H                                                  0094
*        JSWAJSOL = '1'B;         /* INDICATE JSOL EXISTS            */
         OI    JSWAJCLS(JSWAPTR),B'10001000'                       0094
*        GEN(EJECT);                                               0095
         EJECT
*        /*                                                          */
*        /* THE FOLLOWING CODE WILL CREATE THE ESTAE ENVIRONMENT     */
*        /* FOR THE JOB SCHEDULING SUBROUTINE:                       */
*        /*                                                          */
*        /*   - GET AN ESTAE PARAMETER AREA                          */
*        /*   - CREATE AN ESTAE ENVIRONMENT OVER THE JOB SCHEDULING  */
*        /*     SUBROUTINE.                                          */
*        /*   - SAVE THE JSWA POINTER IN THE ESTAE PARAMETER AREA    */
*        /*   - SAVE THE ESTAE PARM AREA POINTER IN THE JSWA.        */
*        /*                                                          */
*    RESPECIFY(R0,REGPARM,R5,R6,R15)RESTRICTED;/*RESTRICTED REGISTERS*/
*    R0=LENGTH(STAELST);      /* PUT LENGTH OF STAE PARM LIST IN R0*/
         LA    R0,16                                               0097
*    R0=R0×'E6000000'X;         /* PUT IN SUBPOOL 230 */           0098
         O     R0,@CF01664                                         0098
*    GEN(GETMAIN R,LV=(0));   /* GET THE PARMETER LIST*/           0099
         GETMAIN R,LV=(0)
*    STAEPTR=REGPARM;           /* ADDRESS THE STAE PARMETER LIST*/
         LR    STAEPTR,REGPARM                                     0100
*    JSWAPARM=STAEPTR;       /* STORE ESTAE POINTER IN JSWA*/      0101
         ST    STAEPTR,JSWAPARM(,JSWAPTR)                          0101
*    STAELST=STAELST&&STAELST; /* CLEAR THE PARMETER LIST*/        0102
         XC    STAELST(16,STAEPTR),STAELST(STAEPTR)                0102
*    RETSAVE=R14SAVE;    /* SAVE POSSIABLE RETURN ADDR*/           0103
         L     @14,R14SAVE                                         0103
         ST    @14,RETSAVE(,STAEPTR)                               0103
*    JSWAADDR=JSWAPTR;        /* PUT THE JSWAPTR IN THE PARM LIST*/
         ST    JSWAPTR,JSWAADDR(,STAEPTR)                          0104
*    PARMINFO=LENGTH(STAELST); /* SET UP THE FREEMAIN INFO*/       0105
         MVC   PARMINFO(4,STAEPTR),@CF00054                        0105
*    SUBNUM=230;               /* SET IN THE CORRECT SUBPOOL*/     0106
         MVI   SUBNUM(STAEPTR),X'E6'                               0106
*    RESTAE(1:ESTAEL)=LESTAE(1:ESTAEL); /* MOVE IN THE ESTAE PARM LIST*
         L     @14,ESTAEL                                          0107
         BCTR  @14,0                                               0107
         EX    @14,@SM01705                                        0107
*    GEN(LOAD EP=IEESB670);   /* LOAD IN THE RECOVERY ROUTINE*/    0108
         LOAD EP=IEESB670
*    R6=R0;                   /* PUT THE ADDRESS IN R6 FOR ESTAE*/ 0109
         LR    R6,R0                                               0109
*    REGPARM=ADDR(RESTAE);         /* SET R1 FOR ESTAE LIST FORM*/ 0110
         LA    REGPARM,RESTAE                                      0110
*    R5=STAEPTR;              /* PUT ESTAE POINTER IN R5*/         0111
         LR    R5,STAEPTR                                          0111
*    GEN( ESTAE (6),PARAM=(5),XCTL=YES,RECORD=YES,MF=(E,(1)));     0112
          ESTAE (6),PARAM=(5),XCTL=YES,RECORD=YES,MF=(E,(1))
*    IF R15^=0 THEN           /* IF ESTAE UNSUCCESSFULL FREE PAR LIST*/
         SLR   @14,@14                                             0113
         CR    R15,@14                                             0113
         BE    @RF00113                                            0113
*    DO;                                                           0114
*    JSWAPARM=0;             /* CLEAR JSWA POINTER */              0115
         ST    @14,JSWAPARM(,JSWAPTR)                              0115
*    R0=PARMINFO;             /* PUT FREEMAIN INFO IN R0*/         0116
         L     R0,PARMINFO(,STAEPTR)                               0116
*    REGPARM=STAEPTR;              /* POINT TO FREEABLE AREA*/     0117
         LR    REGPARM,STAEPTR                                     0117
*    GEN( FREEMAIN R,LV=(0),A=(1)); /* FREE THE PARM LIST*/        0118
          FREEMAIN R,LV=(0),A=(1)
*    END;                                                          0119
*    RESPECIFY(R0,REGPARM,R5,R6,R15)UNRESTRICTED;  /* LET PLS USE REGS*
@RF00113 DS    0H                                                  0121
*        GEN(EJECT);                                               0121
         EJECT
*        /*                                                          */
*        /* GET AND CLEAR THE INITIATOR ENTRANCE LIST, SET POINTERS  */
*        /* TO OPTIONS AND EXIT LIST - REMAINDER OF THE IEL WILL BE  */
*        /* INITIALIZED ON COMPLETION OF SUBSYSTEM VERIFICATION.     */
*        /*                                                          */
*                                                                  0122
*        RESPECIFY (R0,COREPTR) RESTRICTED;                        0122
*        R0 = (LENGTH(IELLIST) + 8 + 40);                          0123
         LA    R0,72                                               0123
*                                 /* SET IEL, I0L, IXL LENGTH AND    */
*        R0 = R0 × 'FF000000'X;   /* SUBPOOL NUMBER                  */
         O     R0,@CF01667                                         0124
*        GEN(GETMAIN R,LV=(0));   /* GET THE CORE FOR THE IEL        */
*                                                                  0125
         GETMAIN R,LV=(0)
*        IELPTR = COREPTR;        /* SET THE IEL BASE POINTER        */
         LR    IELPTR,COREPTR                                      0126
*        RESPECIFY (R0,COREPTR) UNRESTRICTED;                      0127
*        JSWAIELP = IELPTR;       /* SAVE IEL POINTER                */
         ST    IELPTR,JSWAIELP(,JSWAPTR)                           0128
*        JSWAIEL = '1'B;          /* INDICATE IEL EXISTS             */
         OI    JSWAIEL(JSWAPTR),B'00100000'                        0129
*        IELLIST = ''B;           /* CLEAR ENTRANCE LIST             */
*                                                                  0130
         XC    IELLIST(24,IELPTR),IELLIST(IELPTR)                  0130
*        IELOPLST = IELPTR + LENGTH(IELLIST);/*                    0131
*                                       SET OPTIONS LIST BASE        */
         LA    @08,24                                              0131
         ALR   @08,IELPTR                                          0131
         ST    @08,IELOPLST(,IELPTR)                               0131
*        IELOPTS = ''B;           /* CLEAR OPTIONS LIST              */
*                                                                  0132
         XC    IELOPTS(8,@08),IELOPTS(@08)                         0132
*        IELEXIT = IELOPLST + 8;        /* SET EXIT LIST BASE        */
         AL    @08,@CF00058                                        0133
         ST    @08,IELEXIT(,IELPTR)                                0133
*        IELEXITS= ''B;           /* CLEAR EXIT LIST                 */
         XC    IELEXITS(40,@08),IELEXITS(@08)                      0134
*        GEN(EJECT);                                               0135
         EJECT
*        /*                                                          */
*        /* SET UP THE INTERFACE FOR ISSUING THE REQUEST TO THE      */
*        /* MASTER SUBSYSTEM IN ORDER TO DETERMINE IF A SUBSYSTEM    */
*        /* IS BEING STARTED -                                       */
*        /*                                                          */
*        /* GET AND INITIALIZE THE SSOB AND INITIALIZE THE   @G29AN2F*/
*        /* SSVS FUNCTIONAL EXTENSION.                       @G29AN2F*/
*        /*                                                          */
*        RESPECIFY (R0,COREPTR) RESTRICTED;                        0136
*        R0 = LENGTH(SSOB);       /* SET LENGTH AND                  */
         LA    R0,20                                               0137
*        R0 = R0 ×'FF000000'X;    /* SUBPOOL NUMBER                  */
         O     R0,@CF01667                                         0138
*        GEN(GETMAIN R,LV=(0));   /* GET CORE FOR THE SSOB           */
         GETMAIN R,LV=(0)
*        SSOBPTR = COREPTR;       /* SET THE BASE POINTER FOR SSOB   */
         ST    COREPTR,SSOBPTR                                     0140
*        JSWASOBP = SSOBPTR;      /* SAVE SSOB POINTER               */
         L     @08,SSOBPTR                                         0141
         ST    @08,JSWASOBP(,JSWAPTR)                              0141
*        JSWASSOB = '1'B;         /* INDICATE SSOB GOTTEN            */
         OI    JSWASSOB(JSWAPTR),B'00010000'                       0142
*        IELSSOBA = SSOBPTR;      /* SET SSOB POINTER IN IEL         */
         ST    @08,IELSSOBA(,IELPTR)                               0143
*        SSOB = ''B;              /* CLEAR THE SSOB                  */
         XC    SSOB(20,@08),SSOB(@08)                              0144
*        SSOBID = 'SSOB';         /* SET SSOB IDENTIFIER             */
         MVC   SSOBID(4,@08),@CC01669                              0145
*        SSOBLEN = LENGTH(SSOB);  /* SET LENGTH OF SSOB IN SSOB      */
         MVC   SSOBLEN(2,@08),@CH01252                             0146
*        SSOBFUNC = SSOBVERS;     /* SET SUBSYSTEM VERIFICATION    0147
*                                    FUNCTION ID                     */
         MVC   SSOBFUNC(2,@08),@CH00139                            0147
*        SSVS = SSVS && SSVS;     /* CLEAR THE SSOB EXTN     @G29AN2F*/
         XC    SSVS(8),SSVS                                        0148
*        SSVSLEN = LENGTH(SSVS);  /* SET EXTENSION LENGTH    @G29AN2F*/
         MVC   SSVSLEN(2),@CH00058                                 0149
*        SSOBINDV = ADDR(SSVS);   /* CONNECT EXTENSION TO THE      0150
*                                    SSOB HEADER             @G29AN2F*/
         LA    @15,SSVS                                            0150
         ST    @15,SSOBINDV(,@08)                                  0150
*        GEN(EJECT);                                               0151
         EJECT
*        /*                                                          */
*        /* GET AND INITIALIZE THE LIFE OF JOB SSIB                  */
*        /*                                                          */
*        R0 = LENGTH(SSIB);       /* SET LENGTH AND                  */
         LA    R0,36                                               0152
*        R0 = R0 × 'FF000000'X;   /* SUBPOOL NUMBER                  */
         O     R0,@CF01667                                         0153
*        GEN(GETMAIN R,LV=(0));   /* GET CORE FOR THE SSIB           */
*                                                                  0154
         GETMAIN R,LV=(0)
*        SSOBSSIB = COREPTR;      /* SET SSIB BASE                   */
         L     @08,SSOBPTR                                         0155
         ST    COREPTR,SSOBSSIB(,@08)                              0155
*        RESPECIFY (R0,COREPTR) UNRESTRICTED;                      0156
*        SSIB = ''B;              /* CLEAR SSIB                      */
*                                                                  0157
         L     @01,SSOBPTR                                         0157
         L     @15,SSOBSSIB(,@01)                                  0157
         XC    SSIB(36,@15),SSIB(@15)                              0157
*        SSIBID  = 'SSIB';        /* SET SSIB IDENTIFIER             */
         MVC   SSIBID(4,@15),@CC01670                              0158
*        SSIBLEN = LENGTH(SSIB);  /* SET SSIB LENGTH                 */
*                                                                  0159
         MVC   SSIBLEN(2,@15),@CH01701                             0159
*        SSIBSSNM = 'MSTR';       /* SET MASTER SUBSYSTEM NAME       */
         MVC   SSIBSSNM(4,@15),@CC01671                            0160
*        SSIBJBID = CHCLS;        /* SET JOB IDENTIFIER              */
         L     @14,JSWAJSEL(,JSWAPTR)                              0161
         L     @01,JSELCSCB(,@14)                                  0161
         MVC   SSIBJBID(8,@15),CHCLS(@01)                          0161
*        SSIBDEST = JSOLDEST;     /* SET SYSOUT DESTINATION          */
         L     @01,JSELJSOL(,@14)                                  0162
         MVC   SSIBDEST(8,@15),JSOLDEST(@01)                       0162
*        JSWASIBP = JSCBACT -> JSCBSSIB;                           0163
         L     @14,CVTPTR                                          0163
         L     @01,CVTTCBP(,@14)                                   0163
         L     @01,TCBPTR(,@01)                                    0163
         L     @01,TCBJSCB(,@01)                                   0163
         L     @07,JSCBACT(,@01)                                   0163
         L     @06,JSCBSSIB(,@07)                                  0163
         ST    @06,JSWASIBP(,JSWAPTR)                              0163
*                                 /* SAVE SSIB POINTER FROM JSCB   0164
*                                    OF CALLER OF JSS                */
*        JSCBACT -> JSCBSSIB = SSOBSSIB; /* SET LIFE OF JOB SSIB   0164
*                                           POINTER IN ACTIVE JSCB   */
*                                                                  0164
         ST    @15,JSCBSSIB(,@07)                                  0164
*        /* ? IEFSSREQ  (SSOB);*/                                  0165
*/*                                           */                   0165
*/*  PASS CONTROL TO JOB ENTRY SUBSYSTEM TO   */                   0165
*/*  PROCESS REQUEST -                        */                   0165
*/*                                           */                   0165
*/*    INPUT - REGISTER 1 POINTS TO A ONE-    */                   0165
*/*            WORD PARAMETER LIST WHICH      */                   0165
*/*            POINTS TO THE SSOB             */                   0165
*/*                                           */                   0165
*CALL SSREQ(SSOB);        /* ISSUE SUBSYSTEM REQUEST TO VERIFY     0165
*                            IF A SUBSYSTEM IS BEING STARTED */    0165
         ST    @08,@AL00001                                        0165
         MVI   @AL00001,X'80'                                      0165
         L     @08,CVTJESCT(,@14)                                  0165
         L     @15,JESSSREQ(,@08)                                  0165
         LA    @01,@AL00001                                        0165
         BALR  @14,@15                                             0165
*        RESPECIFY (RETCODE) RESTRICTED;                           0166
*                                                                  0166
*        IF RETCODE ^= SSRTOK THEN /* IF A SUBSYSTEM INTERFACE ERROR */
         LTR   RETCODE,RETCODE                                     0167
         BZ    @RF00167                                            0167
*          GEN(ABEND 186,,,SYSTEM);                                0168
         ABEND 186,,,SYSTEM
*                                  /* THEN ISSUE JSS SYSTEM FAILURE  */
*        RESPECIFY (RETCODE) UNRESTRICTED;                         0169
@RF00167 DS    0H                                                  0170
* /*  REQUEST WENT TO THE MASTER SUBSYSTEM - CHECK SSOBRETN TO       */
* /*  DETERMINE IF A SUBSYSTEM IS BEING STARTED AND CHECK    @G29AN2F*/
* /*  SSVSUPSS TO SEE IF THE SUBSYSTEM DOES NOT REQUIRE THE  @G29AN2F*/
* /*  SERVICES OF THE PRIMARY JES TO BE STARTED              @G29AN2F*/
*                                                                  0170
*        IF SSOBRETN = SSVSSNAM & /* IF THE JOBNAME IS THE SAME AS 0170
*                                    A SUBSYSTEM NAME        @G29AN2F*/
*           SSVSUPSS ^= '1'B THEN /* AND THE PRIMARY JES IS NOT    0170
*                                    NEEDED THEN             @G29AN2F*/
         L     @08,SSOBPTR                                         0170
         L     @15,SSOBRETN(,@08)                                  0170
         LTR   @15,@15                                             0170
         BNZ   @RF00170                                            0170
         TM    SSVSUPSS,B'10000000'                                0170
         BO    @RF00170                                            0170
*          DO;                    /* A JES TYPE SUBSYSTEM IS       0171
*                                    BEING STARTED           @G29AN2F*/
*          SSIBSUSE = JSELJCL;    /* PASS JCLS TO MASTER SUBSYSTEM   */
         L     @08,SSOBSSIB(,@08)                                  0172
         L     @01,JSWAJSEL(,JSWAPTR)                              0172
         L     @15,JSELJCL(,@01)                                   0172
         ST    @15,SSIBSUSE(,@08)                                  0172
*          JSWASWSP = JSCBACT -> JSCBSWSP;                         0173
         L     @08,CVTPTR                                          0173
         L     @08,CVTTCBP(,@08)                                   0173
         L     @08,TCBPTR(,@08)                                    0173
         L     @08,TCBJSCB(,@08)                                   0173
         L     @08,JSCBACT(,@08)                                   0173
         IC    @15,JSCBSWSP(,@08)                                  0173
         STC   @15,JSWASWSP(,JSWAPTR)                              0173
*                                 /* SAVE EXISTING SWA SUBPOOL NUMBER*/
*          JSWASUBS = '1'B;       /* SET INDICATOR THAT JSS IS     0174
*                                    PROCESSING A START SUBSYSTEM    */
         OI    JSWASUBS(JSWAPTR),B'10000000'                       0174
*          JSCBACT -> JSCBSWSP = 237;                              0175
         MVI   JSCBSWSP(@08),X'ED'                                 0175
*                                 /* SET STC'S SWA SUBPOOL NUMBER    */
*          END;                                                    0176
*        ELSE                                                      0177
*          DO;                                                     0177
         B     @RC00170                                            0177
@RF00170 DS    0H                                                  0178
*          IF SSOBRETN = SSVSJBNM ×  /*NOT SUBSYSTEM         @G29AN2F*/
*             (SSOBRETN = SSVSSNAM & /*OR SUBSYSTEM WHICH IS @G29AN2F*/
*              SSVSUPSS = '1'B) THEN /*TO BE STARTED BY THE        0178
*                                      PRIMARY JES           @G29AN2F*/
         L     @08,SSOBPTR                                         0178
         L     @08,SSOBRETN(,@08)                                  0178
         C     @08,@CF00084                                        0178
         BE    @RT00178                                            0178
         LTR   @08,@08                                             0178
         BNZ   @RF00178                                            0178
         TM    SSVSUPSS,B'10000000'                                0178
         BNO   @RF00178                                            0178
@RT00178 DS    0H                                                  0179
*            DO;                                                   0179
*            GEN(EJECT);                                           0180
         EJECT
*            /*  A START FOR A NON-SUBSYSTEM, MOUNT, LOGON,  @G29AN2F*/
*            /*  OR SUBSYSTEM REQUIRING THE SERVICES OF THE  @G29AN2F*/
*            /*  PRIMARY JOB ENTRY SUBSYSTEM IS              @G29AN2F*/
*            /*  BEING PROCESSED.  SET UP INTERFACE FOR AND INVOKE   */
*            /*  IEFJSWT - STC WRITE INTERNAL JCL ROUTINE -          */
*                                                                  0181
*              RESPECIFY (RETCODE) RESTRICTED;                     0181
*                                                                  0181
*              SSOBINDV = 0;      /*CLEAR PTR TO SSVS EXTN   @G29AN2F*/
         L     @14,SSOBPTR                                         0182
         SLR   @08,@08                                             0182
         ST    @08,SSOBINDV(,@14)                                  0182
*              CALL IEFJSWT (JCLS,CHAIN,SSOB); /* WRITE STC JCL      */
*                                                                  0183
         L     @08,JSWAJSEL(,JSWAPTR)                              0183
         L     @01,JSELJCL(,@08)                                   0183
         ST    @01,@AL00001                                        0183
         L     @08,JSELCSCB(,@08)                                  0183
         ST    @08,@AL00001+4                                      0183
         ST    @14,@AL00001+8                                      0183
         L     @15,@CV01673                                        0183
         LA    @01,@AL00001                                        0183
         BALR  @14,@15                                             0183
*              IF RETCODE ^= 0 THEN                                0184
         LTR   RETCODE,RETCODE                                     0184
         BZ    @RF00184                                            0184
*                DO;                                               0185
*                RETCODE = B8OPFAIL;                               0186
         LA    RETCODE,12                                          0186
*                                 /* SET ABEND REASON CODE           */
*                GEN (ABEND 184,,,SYSTEM);                         0187
         ABEND 184,,,SYSTEM
*                                 /* IEFJSWT HAD AN ABNORMAL COMPLETION
*                                    ISSUE JSS SYSTEM ERROR ABEND    */
*                END;                                              0188
*              ELSE                                                0189
*                DO;              /* FREE THE JCLS                   */
         B     @RC00184                                            0189
@RF00184 DS    0H                                                  0190
*              RESPECIFY (RETCODE) UNRESTRICTED;                   0190
*                RESPECIFY JCLS BASED(PTRSAVE);                    0191
*                RESPECIFY (R0,COREPTR) RESTRICTED;                0192
*                                                                  0192
*                PTRSAVE = JSELJCL; /* SET JCLS POINTER              */
         L     @08,JSWAJSEL(,JSWAPTR)                              0193
         L     PTRSAVE,JSELJCL(,@08)                               0193
*                JSELJCL = 0;     /* CLEAR JCLS POINTER              */
         SLR   @02,@02                                             0194
         ST    @02,JSELJCL(,@08)                                   0194
*                JSWAJCLS = ''B;  /* CLEAR 'JCLS EXISTS' INDICATOR   */
*                                                                  0195
         NI    JSWAJCLS(JSWAPTR),B'01111111'                       0195
*                  DO WHILE PTRSAVE ^= 0;                          0196
         B     @DE00196                                            0196
@DL00196 DS    0H                                                  0197
*                    R0 = LENGTH(JCLS);   /* SET JCLS LENGTH AND     */
         LA    R0,88                                               0197
*                    R0 = R0 × 'FD000000'X;/*                      0198
*                                            SUBPOOL NUMBER          */
         O     R0,@CF01662                                         0198
*                    COREPTR = PTRSAVE;   /* SET FREEMAIN ADDRESS    */
         LR    COREPTR,PTRSAVE                                     0199
*                    PTRSAVE = JCLSJCLS;  /* SET NEXT JCLS POINTER   */
*                                                                  0200
         L     PTRSAVE,JCLSJCLS(,PTRSAVE)                          0200
*                    GEN (FREEMAIN R,LV=(0),A=(1)); /* FREE JCLS     */
*                                                                  0201
         FREEMAIN R,LV=(0),A=(1)
*                  END;                                            0202
@DE00196 LTR   PTRSAVE,PTRSAVE                                     0202
         BNZ   @DL00196                                            0202
*                RESPECIFY (R0,COREPTR) UNRESTRICTED;              0203
*                END;                                              0204
*        GEN(EJECT);                                               0205
@RC00184 DS    0H                                                  0205
         EJECT
*        /*                                                          */
*        /* SET UP PARAMETER LIST AND CALL IEESB601 TO CREATE THE    */
*        /* SWA CONTROL BLOCK STRUCTURE, STC TIOT AND JSCB.          */
*        /*                                                          */
*                                                                  0206
*        RESPECIFY (R0,COREPTR) RESTRICTED;                        0206
*        R0 = LENGTH(SWAE);       /* GET THE PARM LIST LENGTH        */
         LA    R0,20                                               0207
*        R0 = R0 × 'E6000000'X;   /* SET SUBPOOL NUMBER              */
*                                                                  0208
         O     R0,@CF01664                                         0208
*        GEN(GETMAIN R,LV=(0));   /* GET THE PARAMETER LIST CORE     */
*                                                                  0209
         GETMAIN R,LV=(0)
*        JSWAB601 = COREPTR;      /* SET THE BASE POINTER FOR AREA   */
         ST    COREPTR,JSWAB601(,JSWAPTR)                          0210
*        RESPECIFY (R0,COREPTR) UNRESTRICTED;                      0211
*        SWAE = SWAE && SWAE;     /* ZERO THE PARAMETER LIST         */
         L     @08,JSWAB601(,JSWAPTR)                              0212
         XC    SWAE(20,@08),SWAE(@08)                              0212
*        SWCREATE = '1'B;         /* INDICATE 'CREATE SWA' OPTION    */
         OI    SWCREATE(@08),B'10000000'                           0213
*        SWJOBNAM =ADDR(JSOLTJOB);/* SET JOBNAME POINTER             */
         L     @01,JSWAJSEL(,JSWAPTR)                              0214
         L     @15,JSELJSOL(,@01)                                  0214
         LA    @14,JSOLTJOB(,@15)                                  0214
         ST    @14,SWJOBNAM(,@08)                                  0214
*        SWSTEPNM =ADDR(JSOLTSTE);/* SET STEPNAME POINTER            */
         LA    @15,JSOLTSTE(,@15)                                  0215
         ST    @15,SWSTEPNM(,@08)                                  0215
*        SWTIOTPT =ADDR(JSWATIOT);/* SET PTR TO TIOT ADDRESS         */
         LA    @15,JSWATIOT(,JSWAPTR)                              0216
         ST    @15,SWTIOTPT(,@08)                                  0216
*        SWJSCBPT =ADDR(JSWAJSCB);/* SET PTR TO JSCB ADDRESS         */
         LA    @15,JSWAJSCB(,JSWAPTR)                              0217
         ST    @15,SWJSCBPT(,@08)                                  0217
*        RESPECIFY (REGPARM,RETCODE) RESTRICTED;                   0218
*        REGPARM = JSWAB601;      /* SET PARAMETER LIST ADDRESS      */
         LR    REGPARM,@08                                         0219
*        JSWASWA = '1'B;          /* INDICATE STC SWA EXISTS.        */
         OI    JSWASWA(JSWAPTR),B'01000000'                        0220
*        CALL IEESB601;           /* INVOKE THE CREATE ROUTINE       */
         L     @15,@CV01675                                        0221
         BALR  @14,@15                                             0221
*        /*                                                          */
*        /* CHECK THE RETURN CODE FROM THE CREATE ROUTINE            */
*        /*                                                          */
*        IF RETCODE ^= 0 THEN     /* IF IEESB601 FAILED THEN ISSUE   */
         LTR   RETCODE,RETCODE                                     0222
         BZ    @RF00222                                            0222
*           DO;                                                    0223
*           RETCODE = B8TMFAIL;   /* SET ABEND REASON CODE           */
         LA    RETCODE,8                                           0224
*           GEN(ABEND 184,,,SYSTEM);                               0225
         ABEND 184,,,SYSTEM
*                                 /* JSS SYSTEM ERROR ABEND          */
*           END;                                                   0226
*        RESPECIFY (REGPARM,RETCODE) UNRESTRICTED;                 0227
@RF00222 DS    0H                                                  0228
*            END;                                                  0228
*          ELSE                      /*BAD SSOBRETN VALUE    @G29AN2F*/
*            GEN (ABEND 185,,,SYSTEM);                             0229
         B     @RC00178                                            0229
@RF00178 DS    0H                                                  0229
         ABEND 185,,,SYSTEM
*                                    /* ISSUE JSS SYSTEM ERROR ABEND
*                                    FOR INVALID SUBSYSTEM         0230
*                                    INTERFACE REQUEST               */
*          END;                                                    0230
@RC00178 DS    0H                                                  0231
*        GEN(EJECT);                                               0231
@RC00170 DS    0H                                                  0231
         EJECT
* /*                                                                 */
* /*  COMPLETE THE INITIALIZATION OF THE IEL -                       */
* /*                                                                 */
*                                                                  0232
* /*   - INITIATOR ENTRANCE LIST -                                   */
*                                                                  0232
*        RESPECIFY (RSAPTR) RESTRICTED;                            0232
*        IELRTNA = RSAPTR;        /* SAVE REGISTER SAVE AREA POINTER */
         ST    RSAPTR,IELRTNA(,IELPTR)                             0233
*        RESPECIFY (RSAPTR) UNRESTRICTED;                          0234
*                                                                  0234
*        IELCSCB = JSELCSCB;      /* SET CSCB POINTER                */
         L     @08,JSWAJSEL(,JSWAPTR)                              0235
         L     @15,JSELCSCB(,@08)                                  0235
         ST    @15,IELCSCB(,IELPTR)                                0235
*        IELEND  = '1'B;          /* INDICATE END OF ENTRANCE LIST   */
*                                                                  0236
         OI    IELEND(IELPTR),B'10000000'                          0236
* /*   - INITIATOR OPTION LIST -                                     */
*        IELOPLEN = 8;            /* SET OPTION LIST LENGTH          */
*                                                                  0237
         L     @15,IELOPLST(,IELPTR)                               0237
         MVC   IELOPLEN(2,@15),@CH00058                            0237
*        /*  SET OPTIONS FROM THE JSOL -                             */
*        IF JSOLRCVY = '1'B THEN                                   0238
         L     @08,JSELJSOL(,@08)                                  0238
         TM    JSOLRCVY(@08),B'10000000'                           0238
         BNO   @RF00238                                            0238
*           IELONORC = '1'B;      /* BYPASS ALLOCATION RECOVERY      */
*                                                                  0239
         OI    IELONORC(@15),B'00000010'                           0239
*        IF JSOLENQU = '1'B THEN                                   0240
@RF00238 L     @08,JSWAJSEL(,JSWAPTR)                              0240
         L     @08,JSELJSOL(,@08)                                  0240
         TM    JSOLENQU(@08),B'00010000'                           0240
         BNO   @RF00240                                            0240
*           IELOENQU = '1'B;      /* DO NOT WAIT FOR DATA SETS       */
*                                                                  0241
         L     @08,IELOPLST(,IELPTR)                               0241
         OI    IELOENQU(@08),B'00000001'                           0241
*        IF JSOLNSYS = '1'B THEN                                   0242
@RF00240 L     @08,JSWAJSEL(,JSWAPTR)                              0242
         L     @08,JSELJSOL(,@08)                                  0242
         TM    JSOLNSYS(@08),B'10000000'                           0242
         BNO   @RF00242                                            0242
*           IELNSYS  = '1'B;      /* NO SPECIAL PROPERTY ASSIGNMENT  */
*                                                                  0243
         L     @08,IELOPLST(,IELPTR)                               0243
         OI    IELNSYS(@08),B'00100000'                            0243
*        IF JSOLRAC = '1'B THEN  /*                          @Z40RPSQ*/
@RF00242 L     @08,JSWAJSEL(,JSWAPTR)                              0244
         L     @08,JSELJSOL(,@08)                                  0244
         TM    JSOLRAC(@08),B'01000000'                            0244
         BNO   @RF00244                                            0244
*           IELBPRAC = '1'B;     /* BYPASS RACINIT           @Z40RPSQ*/
*                                                                  0245
         L     @08,IELOPLST(,IELPTR)                               0245
         OI    IELBPRAC(@08),B'00000100'                           0245
*        /*  SET STARTED TASK CONTROL OPTIONS -                      */
*        IELONEJF = '1'B;         /* PROCESS ONE JOB ONLY            */
@RF00244 L     @08,IELOPLST(,IELPTR)                               0246
         OI    IELONEJF(@08),B'00000100'                           0246
*        IELCRF   = '1'B;         /* SUPPRESS CHECKPOINT/RESTART     */
*                                                                  0247
         OI    IELCRF(@08),B'01000000'                             0247
*        IELSWAS  = 236;          /* STARTED TASK SWA SUBPOOL NUMBER */
*                                                                  0248
         MVI   IELSWAS(@08),X'EC'                                  0248
* /*   - INITIATOR EXIT LIST -                                       */
*        IELCOM   = JSWAJSEL;     /* SAVE JSEL POINTER               */
         L     @08,IELEXIT(,IELPTR)                                0249
         L     @07,JSWAJSEL(,JSWAPTR)                              0249
         ST    @07,IELCOM(,@08)                                    0249
*        IELXTLEN = 40;           /* SET EXIT LIST LENGTH            */
*                                                                  0250
         MVC   IELXTLEN(2,@08),@CH01666                            0250
*        /*  INITIATOR POST-PROCESSING EXIT RTNEXT                   */
*        /*  HAS BEEN SET TO ZEROS -                                 */
*        /*    INITIATOR WILL RETURN VIA BR 14.                      */
*                                                                  0251
*        /*  SET PRE-ATTACH, POST-ATTACH, AND PRE-FREEPART           */
*        /*  INITIATOR EXITS                                         */
*        /*    CALCULATE NUMBER OF JSXL ARRAY ENTRIES:               */
*        /*    (JSXL LENGTH - HEADER LENGTH) / (ARRAY SIZE)          */
*                                                                  0251
*        ARRAYNUM = (JSXLLGTH-LENGTH(JSXLHDR))/LENGTH(JSXLLDEF);   0251
*                                                                  0251
         LA    @08,8                                               0251
         L     @01,JSELJSXL(,@07)                                  0251
         LH    @00,JSXLLGTH(,@01)                                  0251
         SLR   @00,@08                                             0251
         SRDA  @00,32                                              0251
         DR    @00,@08                                             0251
         LR    ARRAYNUM,@01                                        0251
*        /*  IF PRE-ATTACH, POST-ATTACH, AND PRE-FREEPART  EXITS     */
*        /*  ARE SET IN THE JSXL, THEY ARE MOVED TO THE CORRESPONDING*/
*        /*  IEL FIELDS.                                             */
*        /*                                                          */
*        /*    SINCE THE JSXL ALLOWS FOR UP TO 256 EXITS TO BE       */
*        /*    SET, AND THE IEL HANDLES ONLY ONE OF EACH TYPE OF     */
*        /*    EXIT, THE FOLLOWING LOGIC:                            */
*        /*                                                          */
*        /*         -SETS THE FIRST OF EACH TYPE OF EXIT             */
*        /*          FOUND IN THE JSXL ARRAY.  ANY OTHERS THAT       */
*        /*          MAY EXIST ARE IGNORED.                          */
*        /*                                                          */
*        /*         -LEAVES THE IEL EXITS AS ZEROS IF NO JSXL        */
*        /*          EXITS ARE SPECIFIED.                            */
*        /*                                                          */
*        /*    NOTE THE DEPENDENCY THAT THE JSXL AND IEL EXIT        */
*        /*    LIST MAPPINGS MUST BE IDENTICAL.                      */
*                                                                  0252
*        IF ARRAYNUM ^= 0 THEN                                     0252
         LTR   ARRAYNUM,ARRAYNUM                                   0252
         BZ    @RF00252                                            0252
* /*                                                                 */
* /*  LOOP WILL CONTINUE:                                            */
* /*     - UNTIL JSXL ARRAY SIZE (ARRAYNUM) IS REACHED, OR           */
* /*     - UNTIL PREEXID, PSTEXID, AND PRFEXID IN THE IEL    @YM00047*/
* /*       HAVE BEEN SET TO NON-ZERO VALUES FROM THE JSXL.           */
* /*                                                                 */
*        DO I=1 TO ARRAYNUM WHILE (^((PREEXID^=0)                  0253
*                                  & (PSTEXID^=0)                  0253
*                                  & (PRFEXID^=0)));               0253
*                                                                  0253
         LA    I,1                                                 0253
         B     @DE00253                                            0253
@DL00253 L     @08,IELEXIT(,IELPTR)                                0253
         CLI   PREEXID(@08),0                                      0253
         BE    @DB00253                                            0253
         CLI   PSTEXID(@08),0                                      0253
         BE    @DB00253                                            0253
         CLI   PRFEXID(@08),0                                      0253
         BNE   @DC00253                                            0253
@DB00253 DS    0H                                                  0254
*          IF JSXPRINI(I) = '1'B THEN  /* PRE-INVOCATION EXIT -      */
         LR    @08,I                                               0254
         SLA   @08,3                                               0254
         L     @07,JSWAJSEL(,JSWAPTR)                              0254
         L     @07,JSELJSXL(,@07)                                  0254
         ST    @08,@TF00001                                        0254
         ALR   @08,@07                                             0254
         TM    JSXPRINI-8(@08),B'01000000'                         0254
         BNO   @RF00254                                            0254
*            IF PREEXID = 0 THEN       /* PRE EXIT ALREADY SET -     */
         L     @08,IELEXIT(,IELPTR)                                0255
         CLI   PREEXID(@08),0                                      0255
         BNE   @RF00255                                            0255
*              PREEXT = JSXLLDEF(I);   /* NO - SET EXIT              */
         AL    @07,@TF00001                                        0256
         MVC   PREEXT(8,@08),JSXLLDEF-8(@07)                       0256
*            ELSE;                                                 0257
@RF00255 DS    0H                                                  0258
*          ELSE                                                    0258
*          IF JSXPTINI(I) = '1'B THEN  /* POST-INVOCATION EXIT -     */
         B     @RC00254                                            0258
@RF00254 LR    @08,I                                               0258
         SLA   @08,3                                               0258
         L     @07,JSWAJSEL(,JSWAPTR)                              0258
         L     @07,JSELJSXL(,@07)                                  0258
         ST    @08,@TF00001                                        0258
         ALR   @08,@07                                             0258
         TM    JSXPTINI-8(@08),B'00100000'                         0258
         BNO   @RF00258                                            0258
*            IF PSTEXID = 0 THEN       /* POST EXIT ALREADY SET -    */
         L     @08,IELEXIT(,IELPTR)                                0259
         CLI   PSTEXID(@08),0                                      0259
         BNE   @RF00259                                            0259
*              PSTEXT = JSXLLDEF(I);   /* NO - SET EXIT              */
         AL    @07,@TF00001                                        0260
         MVC   PSTEXT(8,@08),JSXLLDEF-8(@07)                       0260
*            ELSE;                                                 0261
@RF00259 DS    0H                                                  0262
*          ELSE                        /*                    @YM00047*/
*          IF JSXPRFRE(I) = '1'B THEN  /* PRE-FREEPART EXIT- @YM00047*/
         B     @RC00258                                            0262
@RF00258 LR    @08,I                                               0262
         SLA   @08,3                                               0262
         L     @07,JSWAJSEL(,JSWAPTR)                              0262
         L     @07,JSELJSXL(,@07)                                  0262
         ST    @08,@TF00001                                        0262
         ALR   @08,@07                                             0262
         TM    JSXPRFRE-8(@08),B'00010000'                         0262
         BNO   @RF00262                                            0262
*            IF PRFEXID = 0 THEN       /* PRE-FREE EXIT ALREADY SET-
*                                                            @YM00047*/
         L     @08,IELEXIT(,IELPTR)                                0263
         CLI   PRFEXID(@08),0                                      0263
         BNE   @RF00263                                            0263
*              PRFEXT = JSXLLDEF(I);   /* NO - SET EXIT      @YM00047*/
         AL    @07,@TF00001                                        0264
         MVC   PRFEXT(8,@08),JSXLLDEF-8(@07)                       0264
*            ELSE;                     /*                    @YM00047*/
@RF00263 DS    0H                                                  0266
*          ELSE;                                                   0266
@RF00262 DS    0H                                                  0267
*        END;                                                      0267
@RC00258 DS    0H                                                  0267
@RC00254 AL    I,@CF00064                                          0267
@DE00253 CR    I,ARRAYNUM                                          0267
         BNH   @DL00253                                            0267
@DC00253 DS    0H                                                  0268
*        GEN(EJECT);                                               0268
@RF00252 DS    0H                                                  0268
         EJECT
*        RESPECIFY (R0,COREPTR) RESTRICTED;                        0269
* /*                                                                 */
* /*  JSOL IS NO LONGER NEEDED - FREE IT                             */
* /*                                                                 */
*        JSWAJSOL = ''B;          /* CLEAR 'JSOL EXISTS' INDICATOR   */
         NI    JSWAJSOL(JSWAPTR),B'11110111'                       0270
*        COREPTR  = JSELJSOL;     /* SET FREEMAIN ADDRESS            */
         L     @08,JSWAJSEL(,JSWAPTR)                              0271
         L     COREPTR,JSELJSOL(,@08)                              0271
*        JSELJSOL = 0;            /* CLEAR JSOL POINTER              */
         SLR   @15,@15                                             0272
         ST    @15,JSELJSOL(,@08)                                  0272
*        R0 = LENGTH(IEFVJSOL);   /* SET JSOL LENGTH                 */
         LA    R0,40                                               0273
*        R0 = R0 × 'FD000000'X;   /* SET JSOL SUBPOOL NUMBER         */
*                                                                  0274
         O     R0,@CF01662                                         0274
*        GEN (FREEMAIN R,LV=(0),A=(1)); /* FREE THE JSOL             */
*                                                                  0275
         FREEMAIN R,LV=(0),A=(1)
*        RESPECIFY (R0,COREPTR) UNRESTRICTED;                      0276
*                                                                  0276
* /*                                                                 */
* /*  CLEAR INDICATORS AND POINTERS TO CONTROL BLOCKS THAT WILL      */
* /*  BE FREED BY OTHER FUNCTIONS BEFORE CONTROL IS RETURNED TO      */
* /*  THE JOB SCHEDULING SUBROUTINE FROM THE INITIATOR SUBROUTINE    */
* /*                                                                 */
*        JSWAJCLS = ''B;          /* JCLS INDICATOR MAY HAVE ALREADY
*                                    BEEN CLEARED FOR NON-SUBSYSTEMS */
         NI    JSWAJCLS(JSWAPTR),B'01111111'                       0277
*        JSELJCL  = 0;            /* MASTER SUBSYSTEM WILL FREE JCLS
*                                    FOR STARTING SUBSYSTEMS         */
         L     @08,JSWAJSEL(,JSWAPTR)                              0278
         SLR   @15,@15                                             0278
         ST    @15,JSELJCL(,@08)                                   0278
* /*                                                                 */
* /*    *   *   L I N K   T O   T H E   I N I T I A T O R   *   *    */
* /*                                                                 */
*        RESPECIFY (REGPARM) RESTRICTED;                           0279
*        REGPARM = IELPTR;        /* SET IEL POINTER AS INPUT      0280
*                                    TO THE INITIATOR                */
         LR    REGPARM,IELPTR                                      0280
* /*  INITIATOR SUBROUTINE DOES NOT SAVE REGISTERS - SAVE THE        */
* /*  JOB SCHEDULING ENVIRONMENT.                                    */
*        GEN (STM 14,12,12(13));                                   0281
         STM 14,12,12(13)
*        GEN (LINK EP=IEFSD060);                                   0282
         LINK EP=IEFSD060
*        GEN(EJECT);                                               0283
         EJECT
*        RESPECIFY (REGPARM,RSAPTR) RESTRICTED;                    0284
*IEEVIC: ENTRY;                                                    0285
@EP00285 DS    0H                                                  0286
* /*                                                                 */
* /*  CONTROL RETURNS HERE FROM THE INITIATOR SUBROUTINE -           */
* /*                                                                 */
* /*     INPUT - REGISTER 1 POINTS TO THE IEL                        */
* /*  RESET JSS ENVIRONMENT - RESTORE REGISTERS.                     */
* /*                                                                 */
*        RSAPTR = REGPARM -> IELRTNA;                              0286
         L     RSAPTR,IELRTNA(,REGPARM)                            0286
*                                 /* RESET REGISTER SAVE AREA PTR    */
*        GEN (LM 14,12,12(13));   /* RESTORE REGISTERS               */
         LM 14,12,12(13)
*        RESPECIFY (RSAPTR) UNRESTRICTED;                          0288
*        REGPARM = JSWAPTR;       /* SET IEEVICER ENTRY              */
*                                                                  0289
         LR    REGPARM,JSWAPTR                                     0289
*        IF JSXLRCOD = 0 THEN     /* IF A JSXL RETURN CODE HAS NOT   */
         L     @08,JSWAJSEL(,JSWAPTR)                              0290
         L     @08,JSELJSXL(,@08)                                  0290
         CLI   JSXLRCOD(@08),0                                     0290
         BNE   @RF00290                                            0290
*          DO;                    /* ALREADY BEEN SET, PROPAGATE     */
*            JSXLRCOD = IELRTNCD; /* RETURN CODE FROM THE INITIATOR  */
         L     @15,IELEXIT(,IELPTR)                                0292
         IC    @00,IELRTNCD(,@15)                                  0292
         STC   @00,JSXLRCOD(,@08)                                  0292
*            JSXLRCXT = IELRCXT;  /* INDICATE RETURN CODE ORIGIN     */
         IC    @00,IELRCXT(,@15)                                   0293
         STC   @00,JSXLRCXT(,@08)                                  0293
*          END;                                                    0294
*                                                                  0294
*IEEVICER: ENTRY;                                                  0295
@EP00295 DS    0H                                                  0295
@EC00295 DS    0H                                                  0296
* /*                                                                 */
* /*  IEEVICER  - FREE THE IEL                                       */
* /*            - RECREATE STC 'PRE-SWA INITIALIZATION' ENVIRONMENT  */
* /*            - ISSUE ERROR MESSAGE IF REQUIRED                    */
* /*            - CLEAN UP REMAINING JSS RESOURCES                   */
* /*            - DELETE JSS ESTAE ENVIRONMENT                       */
* /*            - TAKE JSXL EXIT BACK TO CALLER                      */
* /*                                                                 */
* /*     IEEVICER IS SCHEDULED AS THE JSS ESTAE RETRY ROUTINE        */
* /*     IF A JSS FAILURE OCCURS.  ALL FREEING OF RESOURCES MUST     */
* /*     BE PRECEDED BY A CHECK TO DETERMINE IF THE RESOURCE HAS     */
* /*     ALREADY BEEN FREED.                                         */
* /*                                                                 */
*                                                                  0296
*        IF REGPARM ^= 0 THEN     /* REGPARM CONTAINS JSWA POINTER.
*                                    HOWEVER,IF ENTRY HERE IS FOR  0296
*                                    RETRY, THE JSWA MAY HAVE      0296
*                                    ALREADY BEEN FREED - CHECK IF 0296
*                                    JSWA EXISTS.                    */
         SLR   @08,@08                                             0296
         CR    REGPARM,@08                                         0296
         BE    @RF00296                                            0296
*        DO;                                                       0297
*        JSWAPTR = REGPARM;       /* RESET JSWA POINTER              */
         LR    JSWAPTR,REGPARM                                     0298
*        RESPECIFY (REGPARM) UNRESTRICTED;                         0299
*        RESPECIFY (R0,COREPTR) RESTRICTED;                        0300
* /*                                                                 */
* /*  IEL IS NO LONGER NEEDED - FREE IT                              */
* /*                                                                 */
*        IF JSWAIEL = '1'B THEN   /* BYPASS FREEING IF ALREADY FREED */
         TM    JSWAIEL(JSWAPTR),B'00100000'                        0301
         BNO   @RF00301                                            0301
*          DO;                                                     0302
*            JSWAIEL  = ''B;      /* CLEAR 'IEL EXISTS' INDICATOR    */
         NI    JSWAIEL(JSWAPTR),B'11011111'                        0303
*            COREPTR  = JSWAIELP; /* SET FREEMAIN ADDRESS            */
         L     COREPTR,JSWAIELP(,JSWAPTR)                          0304
*            JSWAIELP = 0;        /* CLEAR IEL POINTER               */
         ST    @08,JSWAIELP(,JSWAPTR)                              0305
*            R0 = (LENGTH(IELLIST) + 8 + 40);                      0306
         LA    R0,72                                               0306
*                                 /* SET IEL, IOL, IXL LENGTH AND    */
*            R0 = R0 × 'FF000000'X;/*                              0307
*                                    SUBPOOL NUMBER                  */
*                                                                  0307
         O     R0,@CF01667                                         0307
*            GEN (FREEMAIN R,LV=(0),A=(1)); /* FREE THE IEL          */
*                                                                  0308
         FREEMAIN R,LV=(0),A=(1)
*          END;                                                    0309
*        GEN(EJECT);                                               0310
@RF00301 DS    0H                                                  0310
         EJECT
*        IF JSWASUBS = '1'B THEN  /* IF A SUBSYSTEM IS TERMINATING,
*                                    STC'S INITIAL ENVIRONMENT IS IN
*                                    TACT - BYPASS INVOKING IEESB601 */
         TM    JSWASUBS(JSWAPTR),B'10000000'                       0311
         BNO   @RF00311                                            0311
*          JSCBACT -> JSCBSWSP = JSWASWSP;                         0312
         L     @08,CVTPTR                                          0312
         L     @08,CVTTCBP(,@08)                                   0312
         L     @08,TCBPTR(,@08)                                    0312
         L     @08,TCBJSCB(,@08)                                   0312
         L     @08,JSCBACT(,@08)                                   0312
         IC    @15,JSWASWSP(,JSWAPTR)                              0312
         STC   @15,JSCBSWSP(,@08)                                  0312
*                                 /* RESET SWA SUBPOOL NUMBER        */
*        ELSE                                                      0313
* /*                                                                 */
* /*  SET UP PARAMETER LIST AND CALL IEESB601 TO RECREATE            */
* /*  STARTED TASK CONTROL'S INITIAL ENVIRONMENT -                   */
* /*                                                                 */
* /*     - SWA IS DELETED                                            */
* /*     - JSCB AND TIOT STRUCTURE IS RESTORED                       */
* /*                                                                 */
*        IF JSWAB601 ^= 0 THEN    /* BYPASS IF THIS IS RETRY AND CODE
*                                    HAS ALREADY BEEN EXECUTED       */
         B     @RC00311                                            0313
@RF00311 L     @08,JSWAB601(,JSWAPTR)                              0313
         LTR   @08,@08                                             0313
         BZ    @RF00313                                            0313
*          DO;                                                     0314
*            SWAE = SWAE && SWAE; /* CLEAR THE PARAMETER LIST        */
         XC    SWAE(20,@08),SWAE(@08)                              0315
*            IF JSWASWA = '1'B THEN /* IF STC SWA STILL EXISTS THEN- */
         TM    JSWASWA(JSWAPTR),B'01000000'                        0316
         BNO   @RF00316                                            0316
*              DO;                                                 0317
*                JSWASWA  = ''B;    /* CLEAR INDICATOR               */
         NI    JSWASWA(JSWAPTR),B'10111111'                        0318
*                SWDELETE = '1'B;   /* SET 'DELETE SWA' OPTION       */
         OI    SWDELETE(@08),B'01000000'                           0319
*              END;                                                0320
*                                                                  0320
*            IF JSWATIOT ^= 0 THEN /* CHECK IF TIOT STRUCTURE SHOULD
*                                     BE RESTORED                    */
@RF00316 L     @08,JSWATIOT(,JSWAPTR)                              0321
         LTR   @08,@08                                             0321
         BZ    @RF00321                                            0321
*              DO;                                                 0322
*                SWRSTIOT = '1'B;  /* SET 'RESTORE TIOT' OPTION      */
         L     @08,JSWAB601(,JSWAPTR)                              0323
         OI    SWRSTIOT(@08),B'00100000'                           0323
*                SWTIOTPT = ADDR(JSWATIOT);                        0324
         LA    @15,JSWATIOT(,JSWAPTR)                              0324
         ST    @15,SWTIOTPT(,@08)                                  0324
*                                  /* SET POINTER TO TIOT ADDRESS    */
*              END;                                                0325
*                                                                  0325
*            IF JSWAJSCB ^= 0 THEN /* CHECK IF JSCB STRUCTURE SHOULD
*                                     BE RESTORED                    */
@RF00321 L     @08,JSWAJSCB(,JSWAPTR)                              0326
         LTR   @08,@08                                             0326
         BZ    @RF00326                                            0326
*              DO;                                                 0327
*                SWRSJSCB = '1'B;  /* SET 'RESTORE JSCB' OPTION      */
         L     @08,JSWAB601(,JSWAPTR)                              0328
         OI    SWRSJSCB(@08),B'00010000'                           0328
*                SWJSCBPT = ADDR(JSWAJSCB);                        0329
         LA    @15,JSWAJSCB(,JSWAPTR)                              0329
         ST    @15,SWJSCBPT(,@08)                                  0329
*                                  /* SET POINTER TO JSCB ADDRESS    */
*              END;                                                0330
*                                                                  0330
*            REGPARM = JSWAB601;  /* SET PARAMETER LIST ADDRESS      */
@RF00326 L     REGPARM,JSWAB601(,JSWAPTR)                          0331
*            CALL IEESB601;       /* GO RECREATE STC ENVIRONMENT     */
*                                                                  0332
         L     @15,@CV01675                                        0332
         BALR  @14,@15                                             0332
*            R0 = LENGTH(SWAE);   /* SET PARAMETER LIST LENGTH       */
         LA    R0,20                                               0333
*            R0 = R0 × 'E6000000'X;/*                              0334
*                                    AND SUBPOOL NUMBER              */
         O     R0,@CF01664                                         0334
*            COREPTR = JSWAB601;  /* SET FREEMAIN ADDRESS            */
         L     COREPTR,JSWAB601(,JSWAPTR)                          0335
*            JSWAB601 = 0;        /* INDICATE IEESB601 PARAMETER   0336
*                                    LIST NO LONGER EXISTS           */
         SLR   @08,@08                                             0336
         ST    @08,JSWAB601(,JSWAPTR)                              0336
*            GEN(FREEMAIN R,LV=(0),A=(1));                         0337
         FREEMAIN R,LV=(0),A=(1)
*          END;                                                    0338
*        GEN(EJECT);                                               0339
@RF00313 DS    0H                                                  0339
@RC00311 DS    0H                                                  0339
         EJECT
* /*                                                                 */
* /*  CHECK IF MESSAGES TO CONSOLE SHOULD BE SUPPRESSED -            */
* /*                                                                 */
* /*     - IF JSWA INDICATOR IS SET, BYPASS ISSUING MESSAGE          */
* /*     - IF NOT SET:                                               */
* /*           .CHECK MESSAGE ARRAY FOR ERROR SOURCE, RETURN CODE    */
* /*            AND COMMAND CODE.                                    */
* /*           .IF MATCH OCCURS, SET UP MESSAGE MODULE INTERFACE     */
* /*            AND CALL IEEVSMSG TO ISSUE MESSAGE                   */
* /*                                                                 */
*        IF JSWASMS1 ^= '1'B THEN /* CHECK FOR MESSAGE SUPPRESSION   */
*                                                                  0340
         TM    JSWASMS1(JSWAPTR),B'01000000'                       0340
         BO    @RF00340                                            0340
*          /*  SET UP FOR ISSUING MESSAGE - LOOP THROUGH             */
*          /*  MESSAGE ARRAY.  IF CONDITIONS FOR ISSUING             */
*          /*  MESSAGE ARE MET, LOOP CONTROL VARIABLE 'K'            */
*          /*  IS SET TO NON-ZERO TO CAUSE EXIT FROM LOOP.           */
*          /*  NO MESSAGE IS ISSUED IF CONDITIONS ARE NOT MET.       */
*                                                                  0341
*       DO;                                                        0341
*       K=0;                      /* INITIALIZE LOOP CONTROL         */
         SLR   K,K                                                 0342
*          DO I = 1 TO DIM(AMSGARAY) WHILE K=0;                    0343
         LA    I,1                                                 0343
@DL00343 LTR   K,K                                                 0343
         BNZ   @DC00343                                            0343
*            IF (JSXLRCXT = AMSGSRCE(I)) &  /* CHECK RETURN CODE   0344
*                                              SOURCE AND            */
*               (JSXLRCOD = AMSGRCOD(I))    /* CHECK RETURN CODE     */
*              THEN                                                0344
         L     @08,JSWAJSEL(,JSWAPTR)                              0344
         L     @04,JSELJSXL(,@08)                                  0344
         LR    @02,I                                               0344
         SLA   @02,3                                               0344
         SLR   @15,@15                                             0344
         IC    @15,JSXLRCXT(,@04)                                  0344
         SLR   @14,@14                                             0344
         IC    @14,AMSGSRCE-8(@02)                                 0344
         CR    @15,@14                                             0344
         BNE   @RF00344                                            0344
         SLR   @15,@15                                             0344
         IC    @15,JSXLRCOD(,@04)                                  0344
         SLR   @04,@04                                             0344
         IC    @04,AMSGRCOD-8(@02)                                 0344
         CR    @15,@04                                             0344
         BNE   @RF00344                                            0344
*              IF CHVCD = AMSGCMD(I) THEN   /* THEN IF VALID COMMAND
*                                              ISSUE MESSAGE         */
         L     @08,JSELCSCB(,@08)                                  0345
         LA    @04,AMSGCMD-8(@02)                                  0345
         CLC   CHVCD(1,@08),0(@04)                                 0345
         BNE   @RF00345                                            0345
*                DO;              /* BUILD IEEVSMSG PARAMETER LIST   */
*                  SMSGCONS = ADDR(CHUCMP);                        0347
         LA    @08,CHUCMP(,@08)                                    0347
         ST    @08,SMSGCONS                                        0347
*                                 /* SET CONSOLE ID OF CONSOLE     0348
*                                    TO RECEIVE MESSAGE              */
*                  SMSGLAST = '1'B; /* SET END OF PARM LIST          */
         OI    SMSGLAST,B'10000000'                                0348
*                  SMSGCODE = AMSGCODE(I);                         0349
         SLR   @08,@08                                             0349
         IC    @08,AMSGCODE-8(@02)                                 0349
         ST    @08,SMSGCODE                                        0349
*                                 /* SET MESSAGE CODE                */
*                  SMSGFILL = AMSGFILL(I);                         0350
         L     @08,AMSGFILL-8(@02)                                 0350
         ST    @08,SMSGFILL                                        0350
*                                 /* SET MESSAGE FILL POINTER        */
*                  RESPECIFY (REGPARM) RESTRICTED;                 0351
*                                 /* SET POINTER TO PARAMETER LIST   */
*                  K = 1;         /* SET EXIT FROM LOOP              */
         LA    K,1                                                 0352
*                  REGPARM = ADDR(SMSGPARM);                       0353
         LA    REGPARM,SMSGPARM                                    0353
*                                 /* SET VSMSG INPUT                 */
*                  CALL IEEVSMSG; /* GO ISSUE MESSAGE                */
         L     @15,@CV01688                                        0354
         BALR  @14,@15                                             0354
*                END;                                              0355
*              ELSE;                                               0356
@RF00345 DS    0H                                                  0357
*            ELSE;                                                 0357
@RF00344 DS    0H                                                  0358
*          END;                                                    0358
         AL    I,@CF00064                                          0358
         C     I,@CF01151                                          0358
         BNH   @DL00343                                            0358
@DC00343 DS    0H                                                  0359
*        END;                                                      0359
*        GEN(EJECT);                                               0360
@RF00340 DS    0H                                                  0360
         EJECT
* /*                                                                 */
* /*  USE OF THE SSIB/SSOB IS COMPLETE - FREE THEM                   */
* /*                                                                 */
* /*    IT IS NECESSARY TO KEEP THE SSIB/SSOB AROUND UNTIL AFTER     */
* /*    ANY WTOS ARE ISSUED SINCE WTO CONTAINS A SUBSYSTEM INTERFACE */
* /*    REQUIRING THESE CONTROL BLOCKS.                              */
*        JSCBACT -> JSCBSSIB = JSWASIBP;                           0361
         L     @08,CVTPTR                                          0361
         L     @08,CVTTCBP(,@08)                                   0361
         L     @08,TCBPTR(,@08)                                    0361
         L     @08,TCBJSCB(,@08)                                   0361
         L     @08,JSCBACT(,@08)                                   0361
         L     @15,JSWASIBP(,JSWAPTR)                              0361
         ST    @15,JSCBSSIB(,@08)                                  0361
*                                 /* RESTORE SSIB POINTER IN JSCB OF
*                                    CALLER OF JSS.                  */
*        IF JSWASSOB = '1'B THEN  /* IF SSOB STILL EXISTS, THEN      */
         TM    JSWASSOB(JSWAPTR),B'00010000'                       0362
         BNO   @RF00362                                            0362
*          DO;                                                     0363
*            IF SSOBSSIB ^= 0 THEN/* IF SSIB STILL EXISTS, FREE IT   */
         SLR   @08,@08                                             0364
         L     @15,SSOBPTR                                         0364
         L     @14,SSOBSSIB(,@15)                                  0364
         CR    @14,@08                                             0364
         BE    @RF00364                                            0364
*              DO;                                                 0365
*                R0 = LENGTH(SSIB);/*SET FREEMAIN LENGTH AND         */
         LA    R0,36                                               0366
*                R0 = R0 × 'FF000000'X;/*                          0367
*                                    SUBPOOL NUMBER                  */
         O     R0,@CF01667                                         0367
*                COREPTR = SSOBSSIB;                               0368
         LR    COREPTR,@14                                         0368
*                                 /* SET FREEMAIN ADDRESS            */
*                SSOBSSIB = 0;    /* CLEAR SSIB POINTER              */
         ST    @08,SSOBSSIB(,@15)                                  0369
*                GEN(FREEMAIN R,LV=(0),A=(1));                     0370
         FREEMAIN R,LV=(0),A=(1)
*                                 /* FREE THE SSIB                   */
*              END;                                                0371
*            R0 = LENGTH(SSOB);   /* SET FREEMAIN LENGTH AND         */
@RF00364 LA    R0,20                                               0372
*            R0 = R0 × 'FF000000'X;/*                              0373
*                                    SUBPOOL NUMBER                  */
         O     R0,@CF01667                                         0373
*            COREPTR = JSWASOBP;  /* SET FREEMAIN ADDRESS            */
         L     COREPTR,JSWASOBP(,JSWAPTR)                          0374
*            JSWASSOB = ''B;      /* CLEAR SSOB EXISTS INDICATOR     */
         NI    JSWASSOB(JSWAPTR),B'11101111'                       0375
*            JSWASOBP = 0;        /* CLEAR SSOB POINTER              */
         SLR   @08,@08                                             0376
         ST    @08,JSWASOBP(,JSWAPTR)                              0376
*            GEN(FREEMAIN R,LV=(0),A=(1));                         0377
         FREEMAIN R,LV=(0),A=(1)
*                                 /* FREE THE SSOB                   */
*          END;                                                    0378
*        GEN(EJECT);                                               0379
@RF00362 DS    0H                                                  0379
         EJECT
* /*                                                                 */
* /*     - USE OF THE JSWA IS COMPLETE - FREE IT                     */
* /*           .ISSUE ESTAE 0 TO DELETE THE JSS ESTAE ENVIRONMENT    */
* /*           .FREE THE ESTAE PARAMETER AREA.                       */
* /*                                                                 */
*          STAEPTR=JSWAPARM;      /* BASE THE STAE PARM LIST*/     0380
         L     STAEPTR,JSWAPARM(,JSWAPTR)                          0380
*          IF STAEPTR^=0 THEN     /* IF NO STAE PARM LIST GO ON*/  0381
         LTR   STAEPTR,STAEPTR                                     0381
         BZ    @RF00381                                            0381
*          DO;                                                     0382
*          GEN(ESTAE 0);       /*CLEAR ESTAE ENVIRONMENT*/         0383
         ESTAE 0
*          R0=PARMINFO;           /*PUT FREEMAIN INFO IN R0*/      0384
         L     R0,PARMINFO(,STAEPTR)                               0384
*          R14SAVE=RETSAVE;   /*RESTORE POSSIABLE RETURN ADDR */   0385
         L     @08,RETSAVE(,STAEPTR)                               0385
         ST    @08,R14SAVE                                         0385
*          REGPARM=STAEPTR;        /*POINT TO PARM LIST TO FREE IT*/
         LR    REGPARM,STAEPTR                                     0386
*          GEN(FREEMAIN R,LV=(0),A=(1));  /*FREE IT */             0387
         FREEMAIN R,LV=(0),A=(1)
*          END;                                                    0388
*    END;                                                          0389
@RF00381 DS    0H                                                  0390
*        RESPECIFY JSEL BASED(JSELTEMP); /* RE-BASE THE JSEL BEFORE
*                                           FREEING THE JSWA         */
@RF00296 DS    0H                                                  0391
*        RESPECIFY (JSELTEMP) RESTRICTED;                          0391
*        IF JSWAPTR ^= 0 THEN                                      0392
         LTR   JSWAPTR,JSWAPTR                                     0392
         BZ    @RF00392                                            0392
*          DO;                                                     0393
*            JSELTEMP = JSWAJSEL; /* RESET JSEL BASE                 */
         L     JSELTEMP,JSWAJSEL(,JSWAPTR)                         0394
*            R0 = LENGTH(JSWA);   /* SET JSWA LENGTH AND             */
         LA    R0,40                                               0395
*            R0 = R0 × 'FD000000'X;/*                              0396
*                                    SUBPOOL NUMBER                  */
         O     R0,@CF01662                                         0396
*            COREPTR = JSWAPTR;   /* SET FREEMAIN ADDRESS            */
         LR    COREPTR,JSWAPTR                                     0397
*            JSWAPTR = 0;         /* CLEAR JSWA POINTER              */
*                                                                  0398
         SLR   JSWAPTR,JSWAPTR                                     0398
*            GEN(FREEMAIN R,LV=(0),A=(1)); /* FREE THE JSWA          */
         FREEMAIN R,LV=(0),A=(1)
*            RESPECIFY (R0,COREPTR) UNRESTRICTED;                  0400
*          END;                                                    0401
*        ELSE;                                                     0402
@RF00392 DS    0H                                                  0403
*        GEN(EJECT);                                               0403
         EJECT
* /*                                                                 */
* /*  SET UP AND TAKE THE JSXL EXIT BACK TO THE CALLER OF THE        */
* /*  JOB SCHEDULING SUBROUTINE.                                     */
* /*                                                                 */
* /*     EXIT INTERFACE IS - REGISTER 1 = ASCB POINTER               */
* /*                         REGISTER 3 = JSEL POINTER               */
* /*                                                                 */
*        RESPECIFY (RTNADR,REGSAVE) RESTRICTED;                    0404
*        /* CALCULATE NUMBER OF JSXL ARRAY ENTRYS */               0405
*        ARRAYNUM=(JSXLLGTH-LENGTH(JSXLHDR))/LENGTH(JSXLLDEF);     0405
         LA    @15,8                                               0405
         L     @08,JSELJSXL(,JSELTEMP)                             0405
         LH    ARRAYNUM,JSXLLGTH(,@08)                             0405
         SLR   ARRAYNUM,@15                                        0405
         SRDA  ARRAYNUM,32                                         0405
         DR    ARRAYNUM,@15                                        0405
         LR    ARRAYNUM,@07                                        0405
*        IF ARRAYNUM ^= 0 THEN    /* CHECK FOR JSXL EXIT             */
         LTR   ARRAYNUM,ARRAYNUM                                   0406
         BZ    @RF00406                                            0406
*          DO I = 1 TO ARRAYNUM;                                   0407
         LA    I,1                                                 0407
         B     @DE00407                                            0407
@DL00407 DS    0H                                                  0408
*            IF JSXPOST(I) = '1'B THEN                             0408
         LR    @15,I                                               0408
         SLA   @15,3                                               0408
         L     @08,JSELJSXL(,JSELTEMP)                             0408
         ST    @15,@TF00001                                        0408
         ALR   @15,@08                                             0408
         TM    JSXPOST-8(@15),B'10000000'                          0408
         BNO   @RF00408                                            0408
*                                 /* IF THIS IS THE 'POST-PROCESSING'
*                                    EXIT THEN -                     */
*              IF JSXLLINK(I) = 192 THEN                           0409
         L     @15,@TF00001                                        0409
         SLR   @07,@07                                             0409
         IC    @07,JSXLLINK-8(@15,@08)                             0409
         C     @07,@CF01690                                        0409
         BNE   @RF00409                                            0409
*                                 /* SET UP RETURN VIA XCTL          */
*                DO;                                               0410
*                  RESPECIFY (R0,COREPTR) RESTRICTED;              0411
*                  R0 = XCTLLGTH; /* SET XCTL LIST FORM LENGTH       */
         L     R0,XCTLLGTH                                         0412
*                  GEN(GETMAIN R,LV=(0));                          0413
         GETMAIN R,LV=(0)
*                                 /* GET XCTL LIST                   */
*                  RESPECIFY (SUPVTEMP) RESTRICTED;                0414
*                  SUPVTEMP = COREPTR;                             0415
         LR    SUPVTEMP,COREPTR                                    0415
*                                 /* SET XCTL LIST POINTER           */
*                  RESPECIFY (R0,COREPTR) UNRESTRICTED;            0416
*                  SUPVLIST(1:XCTLLGTH) = XCTLLIST(1:XCTLLGTH);    0417
         L     @15,XCTLLGTH                                        0417
         BCTR  @15,0                                               0417
         EX    @15,@SM01718                                        0417
*                                 /* MOVE XCTL LIST TO GOTTEN CORE   */
*                  SUPVMNAM = JSXLDATA(I);                         0418
         MVI   SUPVMNAM+6(SUPVTEMP),C' '                           0418
         MVI   SUPVMNAM+7(SUPVTEMP),C' '                           0418
         LR    @15,I                                               0418
         SLA   @15,3                                               0418
         L     @08,JSELJSXL(,JSELTEMP)                             0418
         ALR   @08,@15                                             0418
         MVC   SUPVMNAM(6,SUPVTEMP),JSXLDATA-8(@08)                0418
*                                 /* SET MODULE NAME                 */
*                  SUPVMPTR = ADDR(SUPVMNAM);                      0419
         LA    @15,SUPVMNAM(,SUPVTEMP)                             0419
         ST    @15,SUPVMPTR(,SUPVTEMP)                             0419
*                                 /* SET MODULE NAME POINTER         */
*                  RETURN TO EXIT1;                                0420
         L     @13,4(,@13)                                         0420
         L     @00,@SIZDATD                                        0420
         LR    @01,@11                                             0420
         FREEMAIN R,LV=(0),A=(1)
         LA    @14,EXIT1                                           0420
         BR    @14                                                 0420
*EXIT1:                                                            0421
*                  RESPECIFY (REGPARM,R15) RESTRICTED;             0421
EXIT1    DS    0H                                                  0422
*                  REGPARM = JSELASCB;                             0422
         L     REGPARM,JSELASCB(,JSELTEMP)                         0422
*                                 /* SET ASCB POINTER                */
*                  R15 = SUPVTEMP;/* SET XCTL LIST POINTER           */
         LR    R15,SUPVTEMP                                        0423
*                  RESPECIFY (SUPVTEMP) UNRESTRICTED;              0424
*                  GEN(XCTL ,MF=(E,(1)),SF=(E,(15)));              0425
         XCTL ,MF=(E,(1)),SF=(E,(15))
*                                 /* XCTL BACK TO CALLER OF JSS      */
*                  RESPECIFY (REGPARM,R15) UNRESTRICTED;           0426
*                END;                                              0427
*              ELSE                                                0428
*              IF JSXLLINK(I) = 128 THEN                           0428
         B     @RC00409                                            0428
@RF00409 LR    @15,I                                               0428
         SLA   @15,3                                               0428
         L     @08,JSELJSXL(,JSELTEMP)                             0428
         SLR   @07,@07                                             0428
         IC    @07,JSXLLINK-8(@15,@08)                             0428
         C     @07,@CF01693                                        0428
         BNE   @RF00428                                            0428
*                DO;              /* SET UP RETURN VIA LINK          */
*                  RESPECIFY (R0,COREPTR) RESTRICTED;              0430
*                  R0 = LINKLGTH; /* SET LINK LIST FORM LENGTH       */
         L     R0,LINKLGTH                                         0431
*                  GEN(GETMAIN R,LV=(0));                          0432
         GETMAIN R,LV=(0)
*                                 /* GET LINK LIST                   */
*                  RESPECIFY (SUPVTEMP) RESTRICTED;                0433
*                  SUPVTEMP = COREPTR;                             0434
         LR    SUPVTEMP,COREPTR                                    0434
*                                 /* SET LINK LIST POINTER           */
*                  RESPECIFY (R0,COREPTR) UNRESTRICTED;            0435
*                  SUPVLIST(1:LINKLGTH) = LINKLIST(1:LINKLGTH);    0436
         L     @15,LINKLGTH                                        0436
         BCTR  @15,0                                               0436
         EX    @15,@SM01720                                        0436
*                                 /* MOVE LINK LIST TO GOTTEN CORE   */
*                  SUPVMNAM = JSXLDATA(I);                         0437
         MVI   SUPVMNAM+6(SUPVTEMP),C' '                           0437
         MVI   SUPVMNAM+7(SUPVTEMP),C' '                           0437
         LR    @15,I                                               0437
         SLA   @15,3                                               0437
         L     @08,JSELJSXL(,JSELTEMP)                             0437
         ALR   @08,@15                                             0437
         MVC   SUPVMNAM(6,SUPVTEMP),JSXLDATA-8(@08)                0437
*                                 /* SET MODULE NAME                 */
*                  SUPVMPTR = ADDR(SUPVMNAM);                      0438
         LA    @15,SUPVMNAM(,SUPVTEMP)                             0438
         ST    @15,SUPVMPTR(,SUPVTEMP)                             0438
*                                 /* SET MODULE NAME POINTER         */
*                  REGSAVE = R14SAVE;                              0439
         L     REGSAVE,R14SAVE                                     0439
*                                 /* SAVE RETURN ADDRESS             */
*                  RETURN TO EXIT2;                                0440
         L     @13,4(,@13)                                         0440
         L     @00,@SIZDATD                                        0440
         LR    @01,@11                                             0440
         FREEMAIN R,LV=(0),A=(1)
         LA    @14,EXIT2                                           0440
         BR    @14                                                 0440
*EXIT2:                                                            0441
*                  RESPECIFY (REGPARM,R15) RESTRICTED;             0441
EXIT2    DS    0H                                                  0442
*                  REGPARM = JSELASCB;                             0442
         L     REGPARM,JSELASCB(,JSELTEMP)                         0442
*                                 /* SET ASCB POINTER                */
*                  R15 = SUPVTEMP;/* SET LINK LIST POINTER           */
         LR    R15,SUPVTEMP                                        0443
*                  RESPECIFY (SUPVTEMP) UNRESTRICTED;              0444
*                  GEN(LINK MF=(E,(1)),SF=(E,(15)));               0445
         LINK MF=(E,(1)),SF=(E,(15))
*                                 /* LINK TO CALLER OF JSS           */
*                  RESPECIFY (REGPARM,R15) UNRESTRICTED;           0446
*                  RTNADR = REGSAVE;                               0447
         LR    RTNADR,REGSAVE                                      0447
*                                 /* RESET RETURN ADDRESS            */
*                  GEN (BR 14);                                    0448
         BR 14
*                END;                                              0449
*              ELSE                                                0450
*              IF JSXLLINK(I) = 64 THEN                            0450
         B     @RC00428                                            0450
@RF00428 LR    @15,I                                               0450
         SLA   @15,3                                               0450
         L     @08,JSELJSXL(,JSELTEMP)                             0450
         SLR   @07,@07                                             0450
         IC    @07,JSXLLINK-8(@15,@08)                             0450
         C     @07,@CF00836                                        0450
         BNE   @RF00450                                            0450
*                DO;              /* SET UP RETURN VIA BRANCH        */
*                  RESPECIFY (SUPVTEMP) RESTRICTED;                0452
*                  SUPVTEMP = JSXLDATA(I,3:6);                     0453
         ALR   @08,@15                                             0453
         ICM   SUPVTEMP,15,JSXLDATA-6(@08)                         0453
*                                 /* SAVE THE RETURN ADDRESS         */
*                  RETURN TO EXIT3;                                0454
         L     @13,4(,@13)                                         0454
         L     @00,@SIZDATD                                        0454
         LR    @01,@11                                             0454
         FREEMAIN R,LV=(0),A=(1)
         LA    @14,EXIT3                                           0454
         BR    @14                                                 0454
*EXIT3:                                                            0455
*                  RESPECIFY (REGPARM,R15) RESTRICTED;             0455
EXIT3    DS    0H                                                  0456
*                  REGPARM = JSELASCB;                             0456
         L     REGPARM,JSELASCB(,JSELTEMP)                         0456
*                                 /* SET ASCB POINTER                */
*                  R15 = SUPVTEMP;/* SET RETURN ADDRESS              */
         LR    R15,SUPVTEMP                                        0457
*                  RESPECIFY (SUPVTEMP) UNRESTRICTED;              0458
*                  GEN (BR 15);                                    0459
         BR 15
*                  RESPECIFY (R15) UNRESTRICTED;                   0460
*                END;                                              0461
*              ELSE                                                0462
*                DO;                                               0462
         B     @RC00450                                            0462
@RF00450 DS    0H                                                  0463
*                  REGSAVE = R14SAVE;                              0463
         L     REGSAVE,R14SAVE                                     0463
*                                 /* SAVE RETURN ADDRESS             */
*                  RETURN TO EXIT4;                                0464
         L     @13,4(,@13)                                         0464
         L     @00,@SIZDATD                                        0464
         LR    @01,@11                                             0464
         FREEMAIN R,LV=(0),A=(1)
         LA    @14,EXIT4                                           0464
         BR    @14                                                 0464
*                END;                                              0465
*            ELSE;                                                 0466
@RF00408 DS    0H                                                  0467
*          END;                                                    0467
@RC00408 AL    I,@CF00064                                          0467
@DE00407 CR    I,ARRAYNUM                                          0467
         BNH   @DL00407                                            0467
*        REGSAVE = R14SAVE;       /* SAVE RETURN ADDRESS             */
@RF00406 L     REGSAVE,R14SAVE                                     0468
*        RETURN TO EXIT4;                                          0469
         L     @13,4(,@13)                                         0469
         L     @00,@SIZDATD                                        0469
         LR    @01,@11                                             0469
         FREEMAIN R,LV=(0),A=(1)
         LA    @14,EXIT4                                           0469
         BR    @14                                                 0469
* /* SET UP FOR RETURN IF NO JSXL EXIT IS SPECIFIED                  */
*                                                                  0470
*EXIT4:                                                            0470
*        REGPARM = JSELASCB;      /* SET ASCB POINTER                */
EXIT4    L     REGPARM,JSELASCB(,JSELTEMP)                         0470
*        RTNADR = REGSAVE;        /* SET RETURN ADDRESS              */
         LR    RTNADR,REGSAVE                                      0471
*        GEN(BR    14);           /* RETURN TO CALLER OF JSS         */
         BR    14
*        RESPECIFY (RTNADR,REGSAVE) UNRESTRICTED;                  0473
*        END   IEESB605                                            0474
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IEFPTRS )                                        *
*/*%INCLUDE SYSLIB  (IKJTCB  )                                        *
*/*%INCLUDE SYSLIB  (IEFVJSWA)                                        *
*/*%INCLUDE SYSLIB  (IEZIEL  )                                        *
*/*%INCLUDE SYSLIB  (IEFJSSOB)                                        *
*/*%INCLUDE SYSLIB  (IEFJSSIB)                                        *
*/*%INCLUDE SYSLIB  (IEFJCLS )                                        *
*/*%INCLUDE SYSLIB  (IEFVJSOL)                                        *
*/*%INCLUDE SYSLIB  (IEFVJSEL)                                        *
*/*%INCLUDE SYSLIB  (IEFVJSXL)                                        *
*/*%INCLUDE SYSLIB  (IEZJSCB )                                        *
*/*%INCLUDE SYSLIB  (IEEZB801)                                        *
*/*%INCLUDE SYSLIB  (IEECHAIN)                                        *
*/*%INCLUDE SYSLIB  (IEFJESCT)                                        *
*/*%INCLUDE SYSLIB  (IEEZB820)                                        *
*;                                                                 0474
@EL00001 L     @13,4(,@13)                                         0474
@EF00001 L     @00,@SIZDATD                                        0474
         LR    @01,@11                                             0474
         FREEMAIN R,LV=(0),A=(1)
@ER00001 BR    @14                                                 0474
@DATA    DS    0H
@CH00139 DC    H'15'
@CH01252 DC    H'20'
@CH01701 DC    H'36'
@CH01666 DC    H'40'
@SM01705 MVC   RESTAE(0),LESTAE
@SM01718 MVC   SUPVLIST(0,SUPVTEMP),XCTLLIST
@SM01720 MVC   SUPVLIST(0,SUPVTEMP),LINKLIST
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@AL00001 DS    3A
@TF00001 DS    F
IEESB605 CSECT
         DS    0F
@CF00064 DC    F'1'
@CF00084 DC    F'4'
@CF01151 DC    F'6'
@CF00058 DC    F'8'
@CH00058 EQU   @CF00058+2
@CF00054 DC    F'16'
@CF00836 DC    F'64'
@CF01693 DC    F'128'
@CF01690 DC    F'192'
@CF01662 DC    XL4'FD000000'
@CF01664 DC    XL4'E6000000'
@CF01667 DC    XL4'FF000000'
@DATD    DSECT
         DS    0D
SSOBPTR  DS    A
R14SAVE  DS    A
SSVS     DS    CL8
         ORG   SSVS
SSVSLEN  DS    FL2
SSVSFLG1 DS    BL1
         ORG   SSVSFLG1
SSVSUPSS DS    BL1
@NM00027 EQU   SSVSFLG1+0
         ORG   SSVS+3
SSVSFLG2 DS    BL1
SSVSSCTP DS    AL4
         ORG   SSVS+8
SMSGPARM DS    CL12
         ORG   SMSGPARM
SMSGCODE DS    FL4
SMSGFILL DS    AL4
SMSGROUT DS    FL4
         ORG   SMSGROUT
SMSGCONS DS    AL4
         ORG   SMSGCONS
SMSGLAST DS    BL1
@NM00051 EQU   SMSGCONS+0
         ORG   SMSGPARM+12
IEESB605 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CV01673 DC    V(IEFJSWT)
@CV01675 DC    V(IEESB601)
@CV01688 DC    V(IEEVSMSG)
         DS    0D
@CC01669 DC    C'SSOB'
@CC01670 DC    C'SSIB'
@CC01671 DC    C'MSTR'
STCPATCH DS    CL50
         ORG   STCPATCH
@NM00001 DC    50CL1' '
         ORG   STCPATCH+50
         DS    CL2
AMSGARAY DS    CL8
         ORG   AMSGARAY+0
AMSGSRCE DC    AL1(2)
AMSGRCOD DC    XL1'04'
AMSGCMD  DC    X'04'
AMSGCODE DC    XL1'03'
AMSGFILL DC    A(0)
         ORG   AMSGARAY+8
         ORG   AMSGARAY+8
         DC    AL1(2)
         DC    XL1'04'
         DC    X'0C'
         DC    XL1'08'
         DC    A(0)
         ORG   AMSGARAY+16
         ORG   AMSGARAY+16
         DC    AL1(2)
         DC    XL1'08'
         DC    X'04'
         DC    XL1'05'
         DC    A(0)
         ORG   AMSGARAY+24
         ORG   AMSGARAY+24
         DC    AL1(2)
         DC    XL1'08'
         DC    X'0C'
         DC    XL1'05'
         DC    A(0)
         ORG   AMSGARAY+32
         ORG   AMSGARAY+32
         DC    AL1(3)
         DC    XL1'04'
         DC    X'04'
         DC    XL1'04'
         DC    A(0)
         ORG   AMSGARAY+40
         ORG   AMSGARAY+40
         DC    AL1(3)
         DC    XL1'04'
         DC    X'0C'
         DC    XL1'09'
         DC    A(0)
         ORG   AMSGARAY+48
IEESB605 CSECT
*                               /* LINK - LIST FORM                */
LINKLIST LINK EP=IEERGN,SF=L
LINKLGTH DC   A(*-LINKLIST)
IEESB605 CSECT
*                               /* XCTL - LIST FORM                */
XCTLLIST XCTL EP=IEERGN,SF=L
XCTLLGTH DC   A(*-XCTLLIST)
IEESB605 CSECT
LESTAE  ESTAE XCTL=YES,RECORD=YES,MF=L
ESTAEL  DC    A(*-LESTAE)
@DATD    DSECT
RESTAE  ESTAE XCTL=YES,RECORD=YES,MF=L
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEESB605 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
K        EQU   @03
I        EQU   @05
ARRAYNUM EQU   @06
PTRSAVE  EQU   @03
IELPTR   EQU   @10
STAEPTR  EQU   @03
JSWAPTR  EQU   @09
R0       EQU   @00
REGPARM  EQU   @01
COREPTR  EQU   @01
RSAPTR   EQU   @13
RTNADR   EQU   @14
RETCODE  EQU   @15
R15      EQU   @15
JSELTEMP EQU   @03
SUPVTEMP EQU   @02
REGSAVE  EQU   @04
R5       EQU   @05
R6       EQU   @06
CVTPTR   EQU   16
CVTMAP   EQU   0
CVTTCBP  EQU   CVTMAP
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTJESCT EQU   CVTMAP+296
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
TCBASCB  EQU   0
TCBPTR   EQU   TCBASCB+4
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
JSWA     EQU   0
JSWALGTH EQU   JSWA
JSWAOPT  EQU   JSWA+2
JSWASUBS EQU   JSWAOPT
JSWASMS1 EQU   JSWAOPT
JSWAJSSR EQU   JSWA+3
JSWAJCLS EQU   JSWAJSSR
JSWASWA  EQU   JSWAJSSR
JSWAIEL  EQU   JSWAJSSR
JSWASSOB EQU   JSWAJSSR
JSWAJSOL EQU   JSWAJSSR
JSWAJSEL EQU   JSWA+4
JSWATIOT EQU   JSWA+8
JSWAJSCB EQU   JSWA+12
JSWAIELP EQU   JSWA+16
JSWASOBP EQU   JSWA+20
JSWAB601 EQU   JSWA+24
JSWAPARM EQU   JSWA+28
@NM00010 EQU   JSWA+32
JSWASWSP EQU   @NM00010
JSWASIBP EQU   JSWA+36
IEL      EQU   0
IELLIST  EQU   IEL
IELSSOBA EQU   IELLIST
IELCSCB  EQU   IELLIST+4
IELOPLST EQU   IELLIST+8
IELRTNA  EQU   IELLIST+12
IELEXIT  EQU   IELLIST+20
IELLAST  EQU   IELEXIT
IELEND   EQU   IELLAST
IELOPTS  EQU   0
IELOPLEN EQU   IELOPTS
IELOPSW1 EQU   IELOPTS+2
IELONEJF EQU   IELOPSW1
IELOPSW2 EQU   IELOPTS+3
IELCRF   EQU   IELOPSW2
IELBPRAC EQU   IELOPSW2
IELONORC EQU   IELOPSW2
IELOENQU EQU   IELOPSW2
IELOPSW3 EQU   IELOPTS+5
IELNSYS  EQU   IELOPSW3
IELSWAS  EQU   IELOPTS+6
IELEXITS EQU   0
IELEXHDR EQU   IELEXITS
IELXTLEN EQU   IELEXHDR
IELRTNCD EQU   IELEXHDR+2
IELRCXT  EQU   IELEXHDR+3
IELCOM   EQU   IELEXHDR+4
RTNEXT   EQU   IELEXITS+8
RTNEXNM  EQU   RTNEXT+2
PREEXT   EQU   IELEXITS+16
PREEXID  EQU   PREEXT+1
PREEXNM  EQU   PREEXT+2
PSTEXT   EQU   IELEXITS+24
PSTEXID  EQU   PSTEXT+1
PSTEXNM  EQU   PSTEXT+2
PRFEXT   EQU   IELEXITS+32
PRFEXID  EQU   PRFEXT+1
PRFEXNM  EQU   PRFEXT+2
PRFEXAD  EQU   PRFEXNM+2
SSOB     EQU   0
SSOBID   EQU   SSOB
SSOBLEN  EQU   SSOB+4
SSOBFUNC EQU   SSOB+6
SSOBSSIB EQU   SSOB+8
SSOBRETN EQU   SSOB+12
SSOBINDV EQU   SSOB+16
SSIB     EQU   0
SSIBID   EQU   SSIB
SSIBLEN  EQU   SSIB+4
SSIBFLG1 EQU   SSIB+6
SSIBSSNM EQU   SSIB+8
SSIBJBID EQU   SSIB+12
SSIBDEST EQU   SSIB+20
SSIBSUSE EQU   SSIB+32
JCLS     EQU   0
JCLSHDR  EQU   JCLS
JCLSJCLS EQU   JCLSHDR
JCLSCARD EQU   JCLS+8
IEFVJSOL EQU   0
JSOLFLAG EQU   IEFVJSOL+2
JSOLNSYS EQU   JSOLFLAG
JSOLRAC  EQU   JSOLFLAG
JSOLSMS1 EQU   JSOLFLAG
JSOLOPTS EQU   IEFVJSOL+3
JSOLRCVY EQU   JSOLOPTS
JSOLENQU EQU   JSOLOPTS
JSOLDEST EQU   IEFVJSOL+8
JSOLTPR  EQU   IEFVJSOL+16
JSOLTJOB EQU   JSOLTPR
JSOLTSTE EQU   JSOLTPR+8
JSEL     EQU   0
JSELJSOL EQU   JSEL+4
JSELCSCB EQU   JSEL+8
JSELJCL  EQU   JSEL+12
JSELJSXL EQU   JSEL+16
JSELASCB EQU   JSEL+20
JSXL     EQU   0
JSXLHDR  EQU   JSXL
JSXLLGTH EQU   JSXLHDR
JSXLRCOD EQU   JSXLHDR+2
JSXLRCXT EQU   JSXLHDR+3
JSXLLDEF EQU   JSXL+8
JSXLLINK EQU   JSXLLDEF
JSXLID   EQU   JSXLLDEF+1
JSXPOST  EQU   JSXLID
JSXPRINI EQU   JSXLID
JSXPTINI EQU   JSXLID
JSXPRFRE EQU   JSXLID
JSXLDATA EQU   JSXLLDEF+2
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBDCB  EQU   JSCBSEC1+36
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBEND1 EQU   IEZJSCB+260
SWAE     EQU   0
SWOPTION EQU   SWAE
SWCREATE EQU   SWOPTION
SWDELETE EQU   SWOPTION
SWRSTIOT EQU   SWOPTION
SWRSJSCB EQU   SWOPTION
SWJOBNAM EQU   SWAE+4
SWSTEPNM EQU   SWAE+8
SWTIOTPT EQU   SWAE+12
SWJSCBPT EQU   SWAE+16
CHAIN    EQU   0
CHFLG    EQU   CHAIN+4
CHVCD    EQU   CHFLG
CHSTS    EQU   CHFLG+2
CHACT    EQU   CHFLG+3
CHKEY    EQU   CHAIN+8
CHPARM   EQU   CHKEY
CHCLS    EQU   CHAIN+16
CHPKE    EQU   CHAIN+28
CHUCMP   EQU   CHAIN+29
CHTJID   EQU   CHAIN+30
CHPROCSN EQU   CHAIN+32
CHACT1   EQU   CHPROCSN+3
CHASM    EQU   CHAIN+40
CHCIBP   EQU   CHASM+4
CHRGNSZ  EQU   CHASM+8
CHSTEP   EQU   CHASM+24
CHSWT    EQU   CHSTEP
CHSHORT  EQU   CHASM+32
JESCT    EQU   0
JESWAA   EQU   JESCT+8
JESSSREQ EQU   JESCT+20
JESALLOC EQU   JESCT+32
JESUNALC EQU   JESCT+36
JESCATL  EQU   JESCT+40
SSREQ    EQU   0
STAELST  EQU   0
JSWAADDR EQU   STAELST
PARMINFO EQU   STAELST+4
SUBNUM   EQU   PARMINFO
@NM00048 EQU   STAELST+8
STAEFLG  EQU   @NM00048
RETSAVE  EQU   STAELST+12
SUPVLIST EQU   0
SUPVMPTR EQU   SUPVLIST
SUPVMNAM EQU   SUPVLIST+8
IEFAB4F5 EQU   0
IEFBB410 EQU   0
IEFW21SD EQU   0
SWAMGR   EQU   0
JSELREG  EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBFBYT EQU   JSCBSEC3+10
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCBSSIB EQU   JSCBSEC3+56
JSCSCT   EQU   JSCBSEC3+68
JSCBSWSP EQU   JSCBSEC3+87
JSCBACT  EQU   JSCBSEC3+88
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
CHAINS01 EQU   CHASM
CHTYPE   EQU   CHAINS01+124
CHTRSTAT EQU   CHAINS01+125
CHCSYSO  EQU   CHAINS01+134
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CHLAST   EQU   CHAINS01+136
CHSPA    EQU   CHAINS01+135
CHUSERID EQU   CHCSYSO
CHJB     EQU   CHCSYSO
CHDUMP   EQU   CHCSYSO
CHQUE    EQU   CHCSYSO
CHHOLD   EQU   CHCSYSO
CHOUT    EQU   CHCSYSO
CHINN    EQU   CHCSYSO
CHALL    EQU   CHCSYSO
CHINC    EQU   CHAINS01+132
CHPEND   EQU   CHAINS01+128
CHARID   EQU   CHAINS01+127
CHCNID   EQU   CHAINS01+126
@NM00046 EQU   CHTRSTAT
CHTSL    EQU   CHTRSTAT
CHTS     EQU   CHTRSTAT
CHINITL  EQU   CHTRSTAT
CHINIT   EQU   CHTRSTAT
CHJOBSL  EQU   CHTRSTAT
CHJOBS   EQU   CHTRSTAT
CHDEF    EQU   CHTYPE
CHHIAR   EQU   CHTYPE
CHARSV29 EQU   CHTYPE
CHARSV28 EQU   CHTYPE
CHARSV27 EQU   CHTYPE
CHARSV26 EQU   CHTYPE
CHARSV25 EQU   CHTYPE
CHDSTAT  EQU   CHTYPE
CHBUF    EQU   CHAINS01
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCBASWA EQU   JSCBSEC3+96
JSCBUFPT EQU   JSCBSEC3+92
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCTMCOR EQU   JSCBSEC3+72
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCDSABQ EQU   JSCBSEC3+60
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00040 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00039 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCBRV08 EQU   JSCBSEC3+11
JSCBRV07 EQU   JSCBFBYT
JSCBRV06 EQU   JSCBFBYT
JSCBRV05 EQU   JSCBFBYT
JSCBRV04 EQU   JSCBFBYT
JSCBRV03 EQU   JSCBFBYT
JSCBRV02 EQU   JSCBFBYT
JSCBADSP EQU   JSCBFBYT
JSCBRV01 EQU   JSCBFBYT
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
SUPVZERO EQU   SUPVLIST+4
@NM00050 EQU   @NM00048+1
@NM00049 EQU   STAEFLG
STAEDUMP EQU   STAEFLG
STAERTY  EQU   STAEFLG
SUPOOL   EQU   PARMINFO+1
SAVEASCB EQU   JSWAADDR
JESSASTA EQU   JESCT+48
JESNUCBS EQU   JESCT+44
JESPJESN EQU   JESCT+28
JESSSCT  EQU   JESCT+24
JESRESQM EQU   JESCT+16
JESQMGR  EQU   JESCT+12
JESUNITS EQU   JESCT+4
@NM00047 EQU   JESCT
CHARSV16 EQU   CHSHORT+100
CHARSV15 EQU   CHSHORT+96
CHJSCBVS EQU   CHSHORT+92
CHUSCVS  EQU   CHSHORT+88
@NM00045 EQU   CHSHORT+84
@NM00044 EQU   CHSHORT+80
CHSQA    EQU   CHSHORT+44
CHQPA    EQU   CHSHORT+8
CHJCL    EQU   CHSHORT+4
CHSPC    EQU   CHSHORT
CHSPB    EQU   CHSTEP+4
CHTCB    EQU   CHSTEP+1
CHARSV23 EQU   CHSWT
CHARSV22 EQU   CHSWT
CHARSV21 EQU   CHSWT
CHAC     EQU   CHSWT
CHPSF    EQU   CHSWT
CHPSD    EQU   CHSWT
CHJCT    EQU   CHSWT
CHARSV20 EQU   CHSWT
CHCECB   EQU   CHASM+20
CHECB    EQU   CHASM+16
CHRGNAD  EQU   CHASM+12
CHARSV18 EQU   CHRGNSZ+1
CHRPRTY  EQU   CHRGNSZ
@NM00043 EQU   CHCIBP
CHEND    EQU   CHCIBP
CHECBP   EQU   CHASM
CHDER    EQU   CHPROCSN+4
CHARSV10 EQU   CHACT1
CHARSV09 EQU   CHACT1
CHARSV08 EQU   CHACT1
CHARSV07 EQU   CHACT1
CHARSV06 EQU   CHACT1
CHARSV05 EQU   CHACT1
CHARSV04 EQU   CHACT1
CHRDWTR  EQU   CHACT1
CHARSV30 EQU   CHPROCSN+2
CHQID    EQU   CHPROCSN
CHASID   EQU   CHTJID
CHTRKID  EQU   CHPKE
CHCIBCTR EQU   CHAIN+27
CHUNIT   EQU   CHAIN+24
CHPCOI   EQU   CHPARM
CHIFY    EQU   CHACT
CHAIFX   EQU   CHACT
CHCLD    EQU   CHACT
CHCL     EQU   CHACT
CHDSI    EQU   CHACT
CHDISC   EQU   CHACT
CHTERM   EQU   CHACT
CHSWAP   EQU   CHACT
CHABTERM EQU   CHSTS
CHFC     EQU   CHSTS
CHDL     EQU   CHSTS
CHAD     EQU   CHSTS
CHQSPC   EQU   CHSTS
CHSOUT   EQU   CHSTS
CHSYS    EQU   CHSTS
CHAP     EQU   CHSTS
CHSZE    EQU   CHFLG+1
CHPTR    EQU   CHAIN
@NM00042 EQU   SWAE+1
@NM00041 EQU   SWOPTION
JSCBCSCB EQU   JSCBSEC1+68
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00038 EQU   JSCBSEC1+60
JSCBQMPI EQU   JSCBSEC1+56
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBPASS EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBSTEP EQU   JSCBSEC1+40
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBTCBP EQU   JSCBSEC1+20
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCBSHR  EQU   JSCBSEC1+8
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00037 EQU   IEZJSCB
@NM00036 EQU   JSXLID
JSXLCOMM EQU   JSXLHDR+4
JSELEOL  EQU   JSELASCB
@NM00035 EQU   JSEL
JSOLTPRO EQU   JSOLTPR+16
@NM00034 EQU   IEFVJSOL+4
@NM00033 EQU   JSOLOPTS
@NM00032 EQU   JSOLOPTS
@NM00031 EQU   JSOLFLAG
@NM00030 EQU   JSOLFLAG
JSOLLGTH EQU   IEFVJSOL
JCLSSEQ  EQU   JCLSCARD+72
JCLSCNTN EQU   JCLSCARD+71
JCLSBODY EQU   JCLSCARD+15
JCLSTYPE EQU   JCLSCARD+10
JCLSLABL EQU   JCLSCARD+2
JCLSLASH EQU   JCLSCARD
@NM00029 EQU   JCLSHDR+4
SSIBRSV1 EQU   SSIB+28
SSIBRESV EQU   SSIB+7
@NM00028 EQU   SSIBFLG1
SSIBPJES EQU   SSIBFLG1
@NM00026 EQU   PRFEXAD
@NM00025 EQU   PRFEXNM
PRFEXLK  EQU   PRFEXT
PSTEXAD  EQU   PSTEXNM+2
@NM00024 EQU   PSTEXNM
PSTEXLK  EQU   PSTEXT
PREEXAD  EQU   PREEXNM+2
@NM00023 EQU   PREEXNM
PREEXLK  EQU   PREEXT
RTNEXAD  EQU   RTNEXNM+2
@NM00022 EQU   RTNEXNM
RTNEXID  EQU   RTNEXT+1
RTNEXLK  EQU   RTNEXT
@NM00021 EQU   IELOPTS+7
@NM00020 EQU   IELOPSW3
@NM00019 EQU   IELOPSW3
IELTSIZ  EQU   IELOPTS+4
@NM00018 EQU   IELOPSW2
@NM00017 EQU   IELOPSW2
@NM00016 EQU   IELOPSW2
IELTIMEF EQU   IELOPSW2
@NM00015 EQU   IELOPSW1
IELICMDF EQU   IELOPSW1
IELCANF  EQU   IELOPSW1
@NM00014 EQU   IELOPSW1
@NM00013 EQU   IELOPSW1
IELDWFF  EQU   IELOPSW1
IELDPSWA EQU   IELOPSW1
@NM00012 EQU   IELLAST
IELSTEPL EQU   IELLIST+16
@NM00011 EQU   @NM00010+1
@NM00009 EQU   JSWAJSSR
@NM00008 EQU   JSWAOPT
@NM00007 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00006 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAWA EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00005 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00004 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
ASCBPTR  EQU   TCBASCB+12
ASCBNEXT EQU   TCBASCB+8
TCBNEXT  EQU   TCBASCB
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00003 EQU   CVTFIX+248
@NM00002 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVT      EQU   CVTMAP
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00290 EQU   @EC00295
@RC00450 EQU   @RC00408
@RC00428 EQU   @RC00408
@RC00409 EQU   @RC00408
@ENDDATA EQU   *
         END   IEESB605,(C'PLS1953',0701,76334)
