         TITLE 'IPS SCANNER - IEEMB811                               '
IEEMB811 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEEMB811  73.117'                                 0001
         DROP  @15
@PROLOG  BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         LR    @10,@01                                             0001
         L     @00,@SIZDATD                                        0001
         GETMAIN R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         LR    @01,@10                                             0001
         ST    @13,@SA00001+4                                      0001
         LR    @13,@11                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MVC   @PC00001(4),0(@01)                                  0001
*                                                                  0033
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* WHEN THIS MODULE IS ATTACHED REGISTER 1 POINTS TO THE SET     */
*   /* PROCESSOR'S CSCB. THE IPS KEYWORD IS LOCATED IN CHBUF IN THIS */
*   /* CSCB. IEEBUFSC WILL BE USED TO SCAN FOR THIS KEYWORD AND ITS  */
*   /* PARAMETER. THIS ROUTINE INITIALIZES FOR IEEBUFSC.             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0034
*   REG14SAV=REG14;                 /* SAVE RETURN ADDRESS           */
         ST    REG14,REG14SAV                                      0034
*   CALL ISSUSTAE;                  /* CREATE STAE ENVIRONMENT       */
         BAL   @14,ISSUSTAE                                        0035
*   IF REG15=0 THEN                 /* CHECK IF STAE CREATED         */
         SR    @10,@10                                             0036
         CR    REG15,@10                                           0036
         BNE   @RF00036                                            0036
*     DO;                                                          0037
*       PARMLIST=0;                 /* CLEAR MSG PARAMETER LIST      */
         ST    @10,@TF00001                                        0038
         MVC   PARMLIST(4),@TF00001                                0038
*       REG0=ADDR(CHTYPE);          /* POINTER TO THE END OF THE   0039
*                                      BUFFER + 1                    */
         LA    REG0,CHTYPE(,CSCBPTR)                               0039
*       REG15=ADDR(KEYWORD);        /* POINTER TO THE KEYWORD DESIRED*/
         LA    REG15,KEYWORD                                       0040
*       REG15=REG15×KEYWDLEN;       /* GET KEYWORD LENGTH            */
         O     REG15,KEYWDLEN                                      0041
*       REG1=ADDR(CHBUF);           /* POINTER TO THE BEGINNING OF 0042
*                                      THE BUFFER                    */
         LA    REG1,CHBUF(,CSCBPTR)                                0042
*       REG2=REG1;                  /* SAVE CHBUF ADDR TO BUILD XSA
*                                      IN FOR MSG MOD IEE0503D       */
         LR    REG2,REG1                                           0043
*       CALL SCANNAME;              /* GET IEEBUFSC TO SCAN NAME     */
*                                                                  0044
         BAL   @14,SCANNAME                                        0044
*       /*************************************************************/
*       /*                                                           */
*       /* IF IEEBUFSC FINDS THE KEYWORD THE LENGTH OF THE VALUE IS  */
*       /* CHECKED. IF TOO LARGE WE PUT OUT AN ERROR MSG. OTHERWISE  */
*       /* REGISTER 1 IS POINTED TO THE IPS VALUE AND IEEMB812 (THE  */
*       /* SYSTEM RESOURCE MANAGER MODULE) IS CALLED.                */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0045
*       IF REG15=0 THEN             /* IF IEEBUFSC FOUND             */
         LTR   REG15,REG15                                         0045
         BNZ   @RF00045                                            0045
*         DO;                       /* THE KEYWORD THEN CHECK THE  0046
*                                      LENGTH OF THE PARAMETER       */
*           IF REG1=2 THEN          /* LENGTH MUST EQUAL 2           */
         CH    REG1,@CH00144                                       0047
         BNE   @RF00047                                            0047
*             DO;                   /* IF LENGTH OK THEN SETUP TO  0048
*                                      PASS TO THE MAMAGER           */
*               IPSVALUE=REG5->NEWVALUE;/* SAVE IPS VALUE FOR LATER
*                                      MESSAGE INSERTION             */
         MVC   IPSVALUE(2),NEWVALUE(REG5)                          0049
*               REG1=REG5;          /* REG1 POINTS TO IPS VALUE      */
         LR    REG1,REG5                                           0050
*               CALL IEEMB812;      /* GO TO SYSTEM RES MANAGER    0051
*                                      INTERFACE MODULE              */
         L     @15,@CV00206                                        0051
         BALR  @14,@15                                             0051
*                                                                  0052
*               /*****************************************************/
*               /*                                                   */
*               /* IF IEEMB812 ACCEPTS THE VALUE (RC = 0) THEN A     */
*               /* SUCCESSFUL MESSAGE IS ISSUED. ERROR MESSAGES ARE  */
*               /* ISSUED FOR ALL OTHER RETURN CODES.                */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0052
*               IF REG15^=0 THEN    /* IF VALUE NO GOOD              */
         LTR   REG15,REG15                                         0052
         BZ    @RF00052                                            0052
*                 CALL CKRETURN;    /* THEN FIND OUT WHY             */
         BAL   @14,CKRETURN                                        0053
*               ELSE                                               0054
*                 IWANTMSG='00'X;   /* OTHERWISE VALUE IS ACCEPTABLE,
*                                      PUT OUT SUCCESSFUL MSG        */
         B     @RC00052                                            0054
@RF00052 MVI   IWANTMSG,X'00'                                      0054
*             END;                                                 0055
@RC00052 DS    0H                                                  0056
*           ELSE                                                   0056
*             IWANTMSG='08'X;       /* LENGTH IS TOO                 */
         B     @RC00047                                            0056
@RF00047 MVI   IWANTMSG,X'08'                                      0056
*                                   /* LARGE                         */
*         END;                                                     0057
*                                                                  0057
@RC00047 DS    0H                                                  0058
*       /*************************************************************/
*       /*                                                           */
*       /* RETURN CODES FROM IEEBUFSC OTHER THAN ZERO ARE NOW        */
*       /* CHECKED. IF RC = 4 THEN THE KEYWORD PARAMETER WAS MISSING.*/
*       /* FOR RC = 8 THEN THE KEYWORD WAS MISSING.                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0058
*       ELSE                        /* FOR RC OTHER THAN ZERO FROM 0058
*                                      IEEBUFSC                      */
*         DO;                                                      0058
         B     @RC00045                                            0058
@RF00045 DS    0H                                                  0059
*           IF REG15=4 THEN         /* COULD NOT FIND THE            */
         CH    REG15,@CH00041                                      0059
         BNE   @RF00059                                            0059
*             IWANTMSG='08'X;       /* PARAMETER, PUT OUT ERROR MSG  */
         MVI   IWANTMSG,X'08'                                      0060
*           ELSE                                                   0061
*             IF REG15=8 THEN       /* WAS THERE A KEYWD             */
         B     @RC00059                                            0061
@RF00059 CH    REG15,@CH00045                                      0061
         BNE   @RF00061                                            0061
*               IWANTMSG='09'X;     /* NO KEYWD PUT OUT ERROR MSG    */
         MVI   IWANTMSG,X'09'                                      0062
*             ELSE                                                 0063
*               IWANTMSG='FF'X;     /* CANT IDENTIFY RC              */
         B     @RC00061                                            0063
@RF00061 MVI   IWANTMSG,X'FF'                                      0063
*         END;                                                     0064
@RC00061 DS    0H                                                  0064
@RC00059 DS    0H                                                  0065
*       IF IWANTMSG^='FF'X THEN     /* IS IT A VALID MSG             */
@RC00045 CLI   IWANTMSG,255                                        0065
         BE    @RF00065                                            0065
*         DO;                                                      0066
*           REG1=ADDR(PARMLIST);    /* PUT PARM ADDR IN 1            */
         LA    REG1,PARMLIST                                       0067
*           CALL IEEMB814;          /* GOTO MSG MODULE               */
         L     @15,@CV00207                                        0068
         BALR  @14,@15                                             0068
*         END;                                                     0069
*     END;                                                         0070
@RF00065 DS    0H                                                  0071
*   CALL FREECSCB;                  /* FREE CSCB                     */
@RF00036 BAL   @14,FREECSCB                                        0071
*   REG14=REG14SAV;                 /* RESTORE RETURN ADDRESS        */
         L     REG14,REG14SAV                                      0072
*   RETURN;                         /* RETURN TO CALLER              */
@EL00001 L     @13,4(,@13)                                         0073
@EF00001 L     @00,@SIZDATD                                        0073
         LR    @01,@11                                             0073
         FREEMAIN R,LV=(0),A=(1)
@ER00001 BR    @14                                                 0073
*ISSUSTAE:                                                         0074
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0074
*                                                                  0074
ISSUSTAE DS    0H                                                  0075
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE CREATES A STAE ENVIRONMENT THRU MODULE IEECB860. */
*   /* A PARAMETER LIST IS BUILT AND PASSED TO MODULE IEECB860 VIA   */
*   /* REGISTER 1.                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0075
*   REG6=REG1;                      /* SAVE SETS CSCB PTR            */
         LR    REG6,REG1                                           0075
*   REG4=REG14;                     /* SAVE RETURN ADDR              */
         LR    REG4,REG14                                          0076
*   REG1=ADDR(WORKAREA);            /* GET CORE FOR PARM LIST        */
         LA    REG1,WORKAREA                                       0077
*   REG2=REG1;                      /* SAVE CORE ADDR                */
         LR    REG2,REG1                                           0078
*   CSCBADDR=REG6;                  /* STORE CSCB PTR IN LIST        */
         ST    REG6,CSCBADDR(,REG1)                                0079
*   REG5=ADDR(STAEBUF);             /* GET PTR TO CMD BUF            */
         LA    REG5,STAEBUF(,REG1)                                 0080
*   BUFPTR=REG5;                    /* STORE CMD BUF PTR IN PARAMETER
*                                      LIST                          */
         ST    REG5,BUFPTR(,REG1)                                  0081
*   CMDSIZE=3;                      /* STORE LENGTH OF CMD           */
         MVI   CMDSIZE(REG1),X'03'                                 0082
*   COMMAND=SET;                    /* STORE VERB                    */
         MVI   COMMAND+3(REG1),C' '                                0083
         MVC   COMMAND+4(7,REG1),COMMAND+3(REG1)                   0083
         MVC   COMMAND(3,REG1),SET                                 0083
*   RESPECIFY                                                      0084
*    (REG11,                                                       0084
*     REG12,                                                       0084
*     REG13)RESTRICTED;                                            0084
*   REG4SAV=REG4;                   /* SAVE RETURN ADDRESS           */
         ST    REG4,REG4SAV(,REG1)                                 0085
*   REG6SAV=REG6;                   /* SAVE CSCB ADDRESS             */
         ST    REG6,REG6SAV(,REG1)                                 0086
*   REG11SAV=REG11;                 /* SAVE DATA REG PTR             */
         ST    REG11,REG11SAV(,REG1)                               0087
*   REG12SAV=REG12;                 /* SAVE BASE REG PTR             */
         ST    REG12,REG12SAV(,REG1)                               0088
*   REG13SAV=REG13;                 /* SAVE SAVE AREA PTR            */
         ST    REG13,REG13SAV(,REG1)                               0089
*   GEN(LOAD EP=IEECB860);          /* LOAD STAE CREATING MOD        */
         LOAD EP=IEECB860
*   REG15=REG0;                     /* PUT ENTRY ADDR IN R15         */
         LR    REG15,REG0                                          0091
*   REG1=REG2;                      /* RESTORE PARM PTR              */
         LR    REG1,REG2                                           0092
*   GEN(BALR REG14,REG15);          /* BR TO STAE MODULE             */
         BALR REG14,REG15
*   REG4=REG4SAV;                   /* RESTORE RETURN ADDRESS        */
         L     REG4,REG4SAV(,REG1)                                 0094
*   REG6=REG6SAV;                   /* RESTORE CSCB ADDRESS          */
         L     REG6,REG6SAV(,REG1)                                 0095
*   REG11=REG11SAV;                 /* RESTORE DATA REG PTR          */
         L     REG11,REG11SAV(,REG1)                               0096
*   REG12=REG12SAV;                 /* RESTORE BASE REG PTR          */
         L     REG12,REG12SAV(,REG1)                               0097
*   REG13=REG13SAV;                 /* RESTORE SAVE AREA PTR         */
         L     REG13,REG13SAV(,REG1)                               0098
*   RESPECIFY                                                      0099
*    (REG11,                                                       0099
*     REG12,                                                       0099
*     REG13)UNRESTRICTED;                                          0099
*   REG5=REG15;                     /* SAVE RETURN CODE              */
         LR    REG5,REG15                                          0100
*   GEN(DELETE EP=IEECB860);        /* DELETE STAE CREATE MOD        */
         DELETE EP=IEECB860
*   REG15=REG5;                     /* PUT RC INTO REG15             */
         LR    REG15,REG5                                          0102
*   REG14=REG4;                     /* RESTORE THE RETURN ADDR       */
         LR    REG14,REG4                                          0103
*   END;                                                           0104
@EL00002 DS    0H                                                  0104
@EF00002 DS    0H                                                  0104
@ER00002 BR    @14                                                 0104
*FREECSCB:                                                         0105
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0105
*                                                                  0105
FREECSCB DS    0H                                                  0106
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE FREES THE SET CSCB BY ISSUING MGCR MACRO.        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0106
*   CHFC='1'B;                      /* TURN ON FREE CSCB BIT         */
         OI    CHFC(CSCBPTR),B'00000010'                           0106
*   REG1=REG6;                      /* GET SETS CSCB PTR             */
         LR    REG1,REG6                                           0107
*   GEN(MGCR (1),CHAIN);            /* ISSUE MACRO TO FREE           */
         MGCR (1),CHAIN
*   END;                                                           0109
@EL00003 DS    0H                                                  0109
@EF00003 DS    0H                                                  0109
@ER00003 BR    @14                                                 0109
*SCANNAME:                                                         0110
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0110
*                                                                  0110
SCANNAME DS    0H                                                  0111
*/*                                                                0111
********************************************************************
**                                                                 0111
**     ROUTINE NAME        IEEBUFSC                                0111
**                                                                 0111
**     FUNCTION            TO SCAN A BUFFER FOR A GIVEN KEYWORD OF 0111
**                         A GIVEN LENGTH AND TO RETURN A POINTER  0111
**                         TO THE KEYWORD VALUE AND THE LENGTH OF  0111
**                         THE VALUE                               0111
**                                                                 0111
**     ENTRY POINT         IEEBUFSC                                0111
**                                                                 0111
**     ATTRIBUTES          REFRESHABLE                             0111
**                                                                 0111
**     OPERATION           1. SET UP PTR TO BUFFER -1 AND PTR      0111
**                            TO KEYWORD LENGTH                    0111
**                         2. IF BUFFER PTR = SPECIFIED KEYWORD    0111
**                            GO TO FOUND ROUTINE (3).             0111
**                            A. IF NOT, INCREMENT BUFFER PTR      0111
**                               BY ONE.                           0111
**                            B. IF PTR IS AT END OF BUFFER SET    0111
**                               UP NOT FOUND RETURN CODE (8) IN   0111
**                               R15 AND EXIT.                     0111
**                            C. IF PTR IS AT A COMMA, GO BACK TO  0111
**                               OPERATION 2.                      0111
**                            D. IF PTR IS AT A BLANK SET UP NOT   0111
**                               FOUND RETURN CODE (8) IN R15 AND  0111
**                               EXIT.                             0111
**                            E. OTHERWISE GO TO OPERATION 2.A.    0111
**                         3. AT FOUND ROUTINE SET UP R14 TO POINT 0111
**                            TO KEYWORD VALUE                     0111
**                         4. SCAN KEYWORD VALUE TO THE END OF     0111
**                            THE BUFFER, A COMMA OR A BLANK       0111
**                         5. CALCULATE LENGTH OF KEYWORD VALUE.   0111
**                         6. IF LENGTH IS < OR = ZERO, SET UP     0111
**                            AN INVALID KEYWORD VALUE LENGTH      0111
**                            RETURN CODE (4) IN R15 AND EXIT.     0111
**                         7. OTHERWISE, SET GOOD RETURN CODE      0111
**                            OF ZERO IN R15 AND EXIT.             0111
**                                                                 0111
**     EXTERNAL REFS       NONE                                    0111
**                                                                 0111
**     SVCS                NONE                                    0111
**                                                                 0111
**     INPUT               R1 - PTR TO BEGINNING OF BUFFER         0111
**                         R0 - PTR TO LAST BYTE OF BUFFER + 1     0111
**                         R15- PTR TO KEYWORD WITH THE LENGTH     0111
**                              OF THE KEYWORD IN THE HIGH ORDER   0111
**                              BYTE.                              0111
**                              EG. KEYWORD FORMAT 'DSNAME='       0111
**                                  R15 WOULD POINT TO THE 'D'     0111
**                                  WITH A 6 IN THE HIGH ORDER     0111
**                                  BYTE.                          0111
**                                                                 0111
**     OUTPUT              R14  PTR TO FIRST BYTE OF KEYWORD       0111
**                              VALUE IN BUFFER OR WORKAREA        0111
**                         R1   LENGTH OF KEYWORD VALUE            0111
**                         R15  RETURN CODE OF ZERO.               0111
**                                                                 0111
**     ERROR OUTPUT        R15  CONTAINS A FOUR IF KEYWORD         0111
**                              HAD AN INVALID LENGTH              0111
**                         R15  CONTAINS AN EIGHT IF THE KEYWORD   0111
**                              WAS NOT FOUND IN THE BUFFER        0111
**                                                                 0111
**     EXIT                TO NEXT SEQUENTIAL INSTRUCTION AFTER    0111
**                         MACRO CALL                              0111
**                                                                 0111
**     NOTES               LISTS OF OPERANDS IN PARENTHESES ARE    0111
**                         NOT PROCESSED, THIS MACRO IS INTENDED   0111
**                         TO PROCESS ONLY A SINGLE VALUE  FOR     0111
**                         A GIVEN KEYWORD                         0111
********************************************************************
*                                                                    */
*                                                                  0111
*   REG4=REG14;                     /* SAVE RETURN ADDR              */
         LR    REG4,REG14                                          0111
*   GEN(IEEBUFSC);                                                 0112
         IEEBUFSC
*   REG5=REG14;                     /* SAVE IPS VALUE PTR            */
         LR    REG5,REG14                                          0113
*   REG14=REG4;                     /* GET RETURN ADDR               */
         LR    REG14,REG4                                          0114
*   END;                                                           0115
@EL00004 DS    0H                                                  0115
@EF00004 DS    0H                                                  0115
@ER00004 BR    @14                                                 0115
*CKRETURN:                                                         0116
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0116
*                                                                  0116
CKRETURN DS    0H                                                  0117
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE CHECKS THE RETURN CODE FROM IEEMB812 (SYSTEM RES */
*   /* MANAGER INTERFACE MODULE). RC = 4 - INVALID SPECIFICATION RC =*/
*   /* 8 - MEMBER MISSING RC = 12- I/O ERROR RC = 16- OPEN FAILED    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0117
*   IF REG15=4 THEN                 /* INVALID SPECIFICATION         */
         CH    REG15,@CH00041                                      0117
         BNE   @RF00117                                            0117
*     IWANTMSG='08'X;               /* GET BAD SPEC MSG              */
         MVI   IWANTMSG,X'08'                                      0118
*   ELSE                            /* OTHERWISE CHECK FURTHER       */
*     IF REG15=8 THEN               /* IF MEMBER MISSING             */
         B     @RC00117                                            0119
@RF00117 CH    REG15,@CH00045                                      0119
         BNE   @RF00119                                            0119
*       IWANTMSG='10'X;             /* GET NO FINDUM MSG             */
         MVI   IWANTMSG,X'10'                                      0120
*     ELSE                          /* CHECK FURTHER                 */
*       IF REG15=12 THEN            /* IF AN I/O ERROR               */
         B     @RC00119                                            0121
@RF00119 CH    REG15,@CH00033                                      0121
         BNE   @RF00121                                            0121
*         IWANTMSG='18'X;           /* GET I/O ERROR MSG             */
         MVI   IWANTMSG,X'18'                                      0122
*       ELSE                                                       0123
*         IF REG15=16 THEN                                         0123
         B     @RC00121                                            0123
@RF00121 CH    REG15,@CH00149                                      0123
         BNE   @RF00123                                            0123
*           IWANTMSG='20'X;         /* GET OPEN FAILED MSG           */
         MVI   IWANTMSG,X'20'                                      0124
*         ELSE                                                     0125
*           IWANTMSG='FF'X;         /* CANT IDENTIFY RC              */
         B     @RC00123                                            0125
@RF00123 MVI   IWANTMSG,X'FF'                                      0125
*   END;                                                           0126
@EL00005 DS    0H                                                  0126
@EF00005 DS    0H                                                  0126
@ER00005 BR    @14                                                 0126
*   END                                                            0127
*                                                                  0127
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IEECHAIN)                                       */
*                                                                  0127
*       ;                                                          0127
         B     @EL00001                                            0127
@DATA    DS    0H
@CH00144 DC    H'2'
@CH00041 DC    H'4'
@CH00045 DC    H'8'
@CH00033 DC    H'12'
@CH00149 DC    H'16'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@TF00001 DS    F
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
IEEMB811 CSECT
         DS    0F
@DATD    DSECT
         DS    0D
REG14SAV DS    A
PARMLIST DS    CL4
         ORG   PARMLIST
@NM00005 DS    AL1
IWANTMSG DS    AL1
IPSVALUE DS    AL2
         ORG   PARMLIST+4
WORKAREA DS    CL50
@ENDDATD EQU   *
IEEMB811 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00206 DC    V(IEEMB812)
@CV00207 DC    V(IEEMB814)
         DS    0D
KEYWDLEN DC    XL4'03000000'
KEYWORD  DC    CL4'IPS='
SET      DC    CL3'SET'
PATCH    DS    CL20
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
CSCBPTR  EQU   @06
REG0     EQU   @00
REG1     EQU   @01
REG2     EQU   @02
REG3     EQU   @03
REG4     EQU   @04
REG5     EQU   @05
REG6     EQU   @06
REG7     EQU   @07
REG11    EQU   @11
REG12    EQU   @12
REG13    EQU   @13
REG14    EQU   @14
REG15    EQU   @15
CHAIN    EQU   0
CHFLG    EQU   CHAIN+4
CHSTS    EQU   CHFLG+2
CHFC     EQU   CHSTS
CHACT    EQU   CHFLG+3
CHKEY    EQU   CHAIN+8
CHPKE    EQU   CHAIN+28
CHTJID   EQU   CHAIN+30
CHACT1   EQU   CHAIN+35
CHASM    EQU   CHAIN+40
CHCIBP   EQU   CHASM+4
CHRGNSZ  EQU   CHASM+8
CHSHORT  EQU   CHASM+24
CHSWT    EQU   CHSHORT
STAELIST EQU   0
CSCBADDR EQU   STAELIST
BUFPTR   EQU   STAELIST+4
STAEBUF  EQU   STAELIST+8
CMDSIZE  EQU   STAEBUF
COMMAND  EQU   STAEBUF+1
REGSAVE  EQU   STAELIST+20
REG4SAV  EQU   REGSAVE
REG6SAV  EQU   REGSAVE+4
REG11SAV EQU   REGSAVE+8
REG12SAV EQU   REGSAVE+12
REG13SAV EQU   REGSAVE+16
NEWVALUE EQU   0
DMY      EQU   0
CHAINS01 EQU   CHASM
CHBUF    EQU   CHAINS01
CHTYPE   EQU   CHAINS01+124
CHTRSTAT EQU   CHAINS01+125
CHCSYSO  EQU   CHAINS01+134
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CHLAST   EQU   CHAINS01+136
CHSPA    EQU   CHAINS01+135
CHUSERID EQU   CHCSYSO
CHJB     EQU   CHCSYSO
CHDUMP   EQU   CHCSYSO
CHQUE    EQU   CHCSYSO
CHHOLD   EQU   CHCSYSO
CHOUT    EQU   CHCSYSO
CHINN    EQU   CHCSYSO
CHALL    EQU   CHCSYSO
CHINC    EQU   CHAINS01+132
CHPEND   EQU   CHAINS01+128
CHARID   EQU   CHAINS01+127
CHCNID   EQU   CHAINS01+126
@NM00004 EQU   CHTRSTAT
CHTSL    EQU   CHTRSTAT
CHTS     EQU   CHTRSTAT
CHINITL  EQU   CHTRSTAT
CHINIT   EQU   CHTRSTAT
CHJOBSL  EQU   CHTRSTAT
CHJOBS   EQU   CHTRSTAT
CHDEF    EQU   CHTYPE
CHHIAR   EQU   CHTYPE
CHARSV29 EQU   CHTYPE
CHARSV28 EQU   CHTYPE
CHARSV27 EQU   CHTYPE
CHARSV26 EQU   CHTYPE
CHARSV25 EQU   CHTYPE
CHDSTAT  EQU   CHTYPE
CHARSV16 EQU   CHSHORT+108
CHARSV15 EQU   CHSHORT+104
CHJSCBVS EQU   CHSHORT+100
CHUSCVS  EQU   CHSHORT+96
@NM00003 EQU   CHSHORT+92
@NM00002 EQU   CHSHORT+88
CHSQA    EQU   CHSHORT+52
CHQPA    EQU   CHSHORT+16
CHJCL    EQU   CHSHORT+12
CHSPC    EQU   CHSHORT+8
CHSPB    EQU   CHSHORT+4
CHTCB    EQU   CHSHORT+1
CHARSV23 EQU   CHSWT
CHARSV22 EQU   CHSWT
CHARSV21 EQU   CHSWT
CHAC     EQU   CHSWT
CHPSF    EQU   CHSWT
CHPSD    EQU   CHSWT
CHJCT    EQU   CHSWT
CHARSV20 EQU   CHSWT
CHCECB   EQU   CHASM+20
CHECB    EQU   CHASM+16
CHRGNAD  EQU   CHASM+12
CHARSV18 EQU   CHRGNSZ+1
CHRPRTY  EQU   CHRGNSZ
@NM00001 EQU   CHCIBP
CHEND    EQU   CHCIBP
CHECBP   EQU   CHASM
CHDER    EQU   CHAIN+36
CHARSV10 EQU   CHACT1
CHARSV09 EQU   CHACT1
CHARSV08 EQU   CHACT1
CHARSV07 EQU   CHACT1
CHARSV06 EQU   CHACT1
CHARSV05 EQU   CHACT1
CHARSV04 EQU   CHACT1
CHRDWTR  EQU   CHACT1
CHARSV30 EQU   CHAIN+34
CHQID    EQU   CHAIN+32
CHASID   EQU   CHTJID
CHUCMP   EQU   CHAIN+29
CHTRKID  EQU   CHPKE
CHCIBCTR EQU   CHAIN+27
CHUNIT   EQU   CHAIN+24
CHCLS    EQU   CHAIN+16
CHPARM   EQU   CHKEY
CHIFY    EQU   CHACT
CHAIFX   EQU   CHACT
CHCLD    EQU   CHACT
CHCL     EQU   CHACT
CHDSI    EQU   CHACT
CHDISC   EQU   CHACT
CHTERM   EQU   CHACT
CHSWAP   EQU   CHACT
CHABTERM EQU   CHSTS
CHDL     EQU   CHSTS
CHAD     EQU   CHSTS
CHQSPC   EQU   CHSTS
CHSOUT   EQU   CHSTS
CHSYS    EQU   CHSTS
CHAP     EQU   CHSTS
CHSZE    EQU   CHFLG+1
CHVCD    EQU   CHFLG
CHPTR    EQU   CHAIN
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00123 EQU   @EL00005
@RC00121 EQU   @EL00005
@RC00119 EQU   @EL00005
@RC00117 EQU   @EL00005
@ENDDATA EQU   *
         END   IEEMB811
