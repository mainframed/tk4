         TITLE 'MSG MODULE FOR IPS SCANNER *IEEMB814*                '
IEEMB814 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEEMB814  72.351'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
*                                                                  0040
*   /*****************************************************************/
*   /*                                                               */
*   /* ON ENTRY REGISTER 1 POINTS TO A SINGLE WORD PARAMETER LIST.   */
*   /* THE FIRST 2 BYTES CONTAIN THE MESSAGE ID WHICH IS USED TO     */
*   /* LOCATE THE CORRECT MESSAGE. THE NEXT TWO BYTES CONTAIN THE IPS*/
*   /* VALUE OR ZEROES.                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0040
*   IF REG1->IWANTMSG^>'20'X THEN   /* VALIDITY CHECK MESSAGE        */
         CLI   IWANTMSG(REG1),32                                   0040
         BH    @RF00040                                            0040
*     DO;                                                          0041
*       REG4=REG1;                  /* SAVE PTR TO PARM LIST         */
         LR    REG4,REG1                                           0042
*       IF IPSVALUE=0 THEN          /* DO WE HAVE AN IPS VALUE TO  0043
*                                      INSERT                        */
         MVC   @ZT00002+2(2),IPSVALUE(REG4)                        0043
         L     @10,@ZT00002                                        0043
         LTR   @10,@10                                             0043
         BNZ   @RF00043                                            0043
*         DO;                       /* IF NO IPSVALUE                */
*                                                                  0044
*           /*********************************************************/
*           /*                                                       */
*           /* IF NO IPS VALUE EXIST THEN THE MESSAGE REQUIRES NO    */
*           /* INSERTION AND EXISTS IN IEE0503D. AN XSA WILL BE      */
*           /* SIMULATED AND THE MESSAGE DESIRED PLUS THE VERB WILL  */
*           /* BE PASSED. THEN SETUP TO GOTO IEE0503D.               */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0045
*           CALL BUILDXSA;          /* NEED AN XSA SO BUILD IT.      */
         BAL   @14,BUILDXSA                                        0045
*           CALL GET0503D;          /* GO TO IEE0503D TO ISSUE     0046
*                                      MESSAGE                       */
         BAL   @14,GET0503D                                        0046
*         END;                                                     0047
*       ELSE                                                       0048
*                                                                  0048
*         /***********************************************************/
*         /*                                                         */
*         /* THE IPS VALUE MUST BE INSERTED INTO THE MESSAGE THIS    */
*         /* WILL BE DONE AND THE WTO ISSUED.                        */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0048
*         DO;                                                      0048
         B     @RC00043                                            0048
@RF00043 DS    0H                                                  0049
*           CALL BUILDMSG;          /* GOTO ROUTINE TO INSERT THE  0049
*                                      VALUE                         */
         BAL   @14,BUILDMSG                                        0049
*           IF REG15=0 THEN         /* MSG BUILD OK THEN             */
         LTR   REG15,REG15                                         0050
         BNZ   @RF00050                                            0050
*             GEN(WTO MF=(E,(1)));  /* ISSUE WTO                     */
         WTO MF=(E,(1))
*         END;                                                     0052
@RF00050 DS    0H                                                  0053
*     END;                                                         0053
@RC00043 DS    0H                                                  0054
*   RETURN;                         /* RETURN TO CALLER              */
@EL00001 L     @13,4(,@13)                                         0054
@EF00001 L     @00,@SIZDATD                                        0054
         LR    @01,@11                                             0054
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0054
         BR    @14                                                 0054
*BUILDMSG:                                                         0055
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0055
*                                                                  0055
BUILDMSG DS    0H                                                  0056
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE MOVES THE MESSAGE INTO THIS MODULES WORKAREA AND */
*   /* THEN MOVES THE IPS VALUE INTO THE MESSAGE.                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0056
*   REG15=0;                        /* SET REG 15 TO 0               */
         SR    REG15,REG15                                         0056
*   REG0=ADDR(MSGADDR)+IWANTMSG;    /* POINT TO MSG LEN              */
         LA    REG0,MSGADDR                                        0057
         MVC   @ZT00003+3(1),IWANTMSG(REG4)                        0057
         A     REG0,@ZT00003                                       0057
*   REG4=REG1;                      /* SAVE IPS VALUE PTR            */
         LR    REG4,REG1                                           0058
*   REG2=REG0+4;                    /* GET MSG ADDRESS               */
         LA    REG2,4                                              0059
         AR    REG2,REG0                                           0059
*   REG2=REG2->MSGPTR;              /* GET ADDR OF MSG               */
         L     @10,MSGPTR(,REG2)                                   0060
         LR    REG2,@10                                            0060
*   REG5=LENGTH;                    /* GET LENGTH OF MSG             */
         LR    @10,REG0                                            0061
         L     REG5,LENGTH(,@10)                                   0061
*   REG1=ADDR(WORKAREA);            /* GET CORE FOR MESSAGE          */
         LA    REG1,WORKAREA                                       0062
*   MSGAREA(1:REG5)=REG2->MSGAREA;  /* MOVE MSG INTO CORE            */
         LR    @10,REG5                                            0063
         BCTR  @10,0                                               0063
         EX    @10,@SM00283                                        0063
*   IF IWANTMSG='00'X THEN          /* SUCCESSFUL MSG DESIRED?       */
         CLI   IWANTMSG(REG4),0                                    0064
         BNE   @RF00064                                            0064
*     PUTIPS2=IPSVALUE;             /* YES, MOVE IN VALUE            */
         MVC   PUTIPS2(2,REG1),IPSVALUE(REG4)                      0065
*   ELSE                                                           0066
*     IF IWANTMSG='08'X THEN        /* A SPECIFICATION ERROR.        */
         B     @RC00064                                            0066
@RF00064 CLI   IWANTMSG(REG4),8                                    0066
         BNE   @RF00066                                            0066
*       PUTIPS3=IPSVALUE;           /* YES, MOVE IN VALUE            */
         MVC   PUTIPS3(2,REG1),IPSVALUE(REG4)                      0067
*     ELSE                                                         0068
*       IF IWANTMSG='18'X THEN      /* IO ERROR MSG DESIRED          */
         B     @RC00066                                            0068
@RF00066 CLI   IWANTMSG(REG4),24                                   0068
         BNE   @RF00068                                            0068
*         PUTIPS4=IPSVALUE;         /* YES, MOVE IN VALUE            */
         MVC   PUTIPS4(2,REG1),IPSVALUE(REG4)                      0069
*       ELSE                                                       0070
*         IF IWANTMSG='10'X THEN    /* MEMBER NOT FOUND MSG          */
         B     @RC00068                                            0070
@RF00068 CLI   IWANTMSG(REG4),16                                   0070
         BNE   @RF00070                                            0070
*           PUTIPS1=IPSVALUE;       /* YES, MOVE IN VALUE            */
         MVC   PUTIPS1(2,REG1),IPSVALUE(REG4)                      0071
*         ELSE                                                     0072
*           IF IWANTMSG='20'X THEN                                 0072
         B     @RC00070                                            0072
@RF00070 CLI   IWANTMSG(REG4),32                                   0072
         BNE   @RF00072                                            0072
*             PUTIPS5=IPSVALUE;     /* OTHERWISE OPEN FAILED         */
         MVC   PUTIPS5(2,REG1),IPSVALUE(REG4)                      0073
*           ELSE                                                   0074
*             REG15=4;              /* INVALID MSG ID                */
         B     @RC00072                                            0074
@RF00072 LA    REG15,4                                             0074
*   REG0=REG6->CHUCMP;              /* GET CONSOLE TO ISSUE TO       */
@RC00072 DS    0H                                                  0075
@RC00070 DS    0H                                                  0075
@RC00068 DS    0H                                                  0075
@RC00066 DS    0H                                                  0075
@RC00064 SR    REG0,REG0                                           0075
         IC    REG0,CHUCMP(,REG6)                                  0075
*   END;                                                           0076
@EL00002 DS    0H                                                  0076
@EF00002 DS    0H                                                  0076
@ER00002 BR    @14                                                 0076
*BUILDXSA:                                                         0077
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0077
*                                                                  0077
BUILDXSA DS    0H                                                  0078
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE BUILDS A SIMULATED EXTENDED SAVE AREA IN THIS    */
*   /* MODULES WORKAREA FOR ACCESS BY MESSAGE MODULE IEE0503D. THE   */
*   /* VERB NAME IS INSERTED INTO THE XAV FIELD AND THE MESSAGE ID   */
*   /* INTO THE XAE FIELD.                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0078
*   REG2=ADDR(WORKAREA);            /* GET WORKAREA ADDRESS          */
         LA    REG2,WORKAREA                                       0078
*   REG0=ADDR(XAA)+4-ADDR(XSAMAP);  /* GET LENGTH OF XSA             */
         LA    REG0,XAA(,XSAPTR)                                   0079
         AH    REG0,@CH00054                                       0079
         SR    REG0,XSAPTR                                         0079
*   XSAMAP(1:REG0)=XSAMAP(1:REG0)&&XSAMAP(1:REG0);/* ZERO OUT THE XSA*/
         LR    @10,REG0                                            0080
         BCTR  @10,0                                               0080
         EX    @10,@SX00285                                        0080
*   XAV=SET;                        /* MOVE IN THE VERB              */
         MVI   XAV+3(XSAPTR),C' '                                  0081
         MVC   XAV+4(4,XSAPTR),XAV+3(XSAPTR)                       0081
         MVC   XAV(3,XSAPTR),SET                                   0081
*   XAE=IWANTMSG;                   /* PUT MSG ID IN XAE FIELD       */
         MVC   XAE(1,XSAPTR),IWANTMSG(REG4)                        0082
*   XAU=REG6->CHUCMP;               /* STORE ISSUING CONSOLES ID     */
         MVC   XAU(1,XSAPTR),CHUCMP(REG6)                          0083
*   END;                                                           0084
@EL00003 DS    0H                                                  0084
@EF00003 DS    0H                                                  0084
@ER00003 BR    @14                                                 0084
*GET0503D:                                                         0085
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               0085
*                                                                  0085
GET0503D DS    0H                                                  0086
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE ISSUES A LOAD FOR MESSAGE MODULE IEE0503D AND    */
*   /* PASSES IT THE SIMULATED XSA POINTED TO BY REG 29 ON RETURN    */
*   /* IEE0503D IS DELETED.                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0086
*   REG7=REG14;                     /* SAVE RETURN ADDR              */
         LR    REG7,REG14                                          0086
*   GEN(LOAD EP=IEE0503D);          /* LOAD IN IEE0503D              */
         LOAD EP=IEE0503D
*   REG15=REG0;                     /* GET IEE0503D ADDR             */
         LR    REG15,REG0                                          0088
*   GEN(BALR  REG14,REG15);         /* BR TO IEE0503D                */
         BALR  REG14,REG15
*   GEN(DELETE EP=IEE0503D);        /* DELETE IEE0503D               */
         DELETE EP=IEE0503D
*   REG14=REG7;                     /* RESTORE RETURN ADDR           */
         LR    REG14,REG7                                          0091
*   RETURN;                         /* GO TO CALLER                  */
@EL00004 DS    0H                                                  0092
@EF00004 DS    0H                                                  0092
@ER00004 BR    @14                                                 0092
*   END;                                                           0093
         B     @EL00004                                            0093
*   GEN;                                                           0094
MSG1     WTO  'IEE536I IPS VALUE XX NOW IN EFFECT',MF=L,              **
               DESC=(5),MCSFLAG=(REG0,RESP)
MSG1LEN  EQU   *
MSG2     WTO   'IEE537I IPS IN IEAIPSXX INVALID',MF=L,                **
               DESC=(5),MCSFLAG=(REG0,RESP)
MSG2LEN  EQU   *
MSG3     WTO   'IEE538I IEAIPSXX MEMBER NOT FOUND IN SYS1.PARMLIB',   **
               MF=L,DESC=(5),MCSFLAG=(REG0,RESP)
MSG3LEN  EQU   *
MSG4     WTO    'IEE539I I/O ERROR DURING PROCESSING OF MEMBER IEAIPSXXX
               ',MF=L,DESC=(5),MCSFLAG=(REG0,RESP)
MSG4LEN  EQU   *
MSG5     WTO   'IEE540I OPEN FAILED - SYS1.PARMLIB DURING PROCESSING OFF
                MEMBER IEAIPSXX',MF=L,DESC=(5),MCSFLAG=(REG0,RESP)
MSG5LEN  EQU   *
*   END                                                            0095
*                                                                  0095
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IEEXSA  )                                       */
*/*%INCLUDE SYSLIB  (IEECHAIN)                                       */
*                                                                  0095
*       ;                                                          0095
         B     @EL00001                                            0095
@DATA    DS    0H
@CH00054 DC    H'4'
@SM00283 MVC   MSGAREA(0,REG1),MSGAREA(REG2)
@SX00285 XC    XSAMAP(0,XSAPTR),XSAMAP(XSAPTR)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@ZTEMPS  DS    0F
@ZT00002 DC    F'0'
@ZT00003 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
IEEMB814 CSECT
         DS    0F
@DATD    DSECT
         DS    0D
CSCBPTR  DS    A
WORKAREA DS    CL132
@ENDDATD EQU   *
IEEMB814 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
SET      DC    CL3'SET'
         DS    CL1
MSGADDR  DS    CL40
         ORG   MSGADDR
MSGLEN1  DC    AL4(MSG1LEN-MSG1)
MSGADDR1 DC    AL4(MSG1)
MSGLEN2  DC    AL4(MSG2LEN-MSG2)
MSGADDR2 DC    AL4(MSG2)
MSGLEN3  DC    AL4(MSG3LEN-MSG3)
MSGADDR3 DC    AL4(MSG3)
MSGLEN4  DC    AL4(MSG4LEN-MSG4)
MSGADDR4 DC    AL4(MSG4)
MSGLEN5  DC    AL4(MSG5LEN-MSG5)
MSGADDR5 DC    AL4(MSG5)
         ORG   MSGADDR+40
PATCH    DS    CL30
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
XSAPTR   EQU   @02
REG0     EQU   @00
REG1     EQU   @01
REG2     EQU   @02
REG3     EQU   @03
REG4     EQU   @04
REG5     EQU   @05
REG6     EQU   @06
REG7     EQU   @07
REG14    EQU   @14
REG15    EQU   @15
XSAMAP   EQU   0
XASVRB   EQU   XSAMAP
XSA      EQU   XASVRB
XAX      EQU   XASVRB+8
XAR      EQU   XASVRB+16
XAE      EQU   XAR
XAL      EQU   XASVRB+20
XAV      EQU   XASVRB+24
XAS      EQU   XASVRB+32
XAU      EQU   XASVRB+40
XAA      EQU   XASVRB+42
EEXSAS01 EQU   0
EEXSAS02 EQU   0
XASDS    EQU   EEXSAS02+2
@NM00005 EQU   EEXSAS02+4
EEXSAS03 EQU   0
XAXMASK  EQU   EEXSAS03
CHAIN    EQU   0
CHFLG    EQU   CHAIN+4
CHSTS    EQU   CHFLG+2
CHACT    EQU   CHFLG+3
CHKEY    EQU   CHAIN+8
CHPKE    EQU   CHAIN+28
CHUCMP   EQU   CHAIN+29
CHTJID   EQU   CHAIN+30
CHACT1   EQU   CHAIN+35
CHASM    EQU   CHAIN+40
CHCIBP   EQU   CHASM+4
CHRGNSZ  EQU   CHASM+8
CHSHORT  EQU   CHASM+24
CHSWT    EQU   CHSHORT
LENGTH   EQU   0
MSGPTR   EQU   0
MSGAREA  EQU   0
PUTIPS1  EQU   MSGAREA+18
PUTIPS2  EQU   MSGAREA+22
PUTIPS3  EQU   MSGAREA+25
PUTIPS4  EQU   MSGAREA+56
PUTIPS5  EQU   MSGAREA+73
PARMLIST EQU   0
IWANTMSG EQU   PARMLIST+1
IPSVALUE EQU   PARMLIST+2
CHAINS01 EQU   CHASM
CHTYPE   EQU   CHAINS01+124
CHTRSTAT EQU   CHAINS01+125
CHCSYSO  EQU   CHAINS01+134
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CHLAST   EQU   CHAINS01+136
CHSPA    EQU   CHAINS01+135
CHUSERID EQU   CHCSYSO
CHJB     EQU   CHCSYSO
CHDUMP   EQU   CHCSYSO
CHQUE    EQU   CHCSYSO
CHHOLD   EQU   CHCSYSO
CHOUT    EQU   CHCSYSO
CHINN    EQU   CHCSYSO
CHALL    EQU   CHCSYSO
CHINC    EQU   CHAINS01+132
CHPEND   EQU   CHAINS01+128
CHARID   EQU   CHAINS01+127
CHCNID   EQU   CHAINS01+126
@NM00011 EQU   CHTRSTAT
CHTSL    EQU   CHTRSTAT
CHTS     EQU   CHTRSTAT
CHINITL  EQU   CHTRSTAT
CHINIT   EQU   CHTRSTAT
CHJOBSL  EQU   CHTRSTAT
CHJOBS   EQU   CHTRSTAT
CHDEF    EQU   CHTYPE
CHHIAR   EQU   CHTYPE
CHARSV29 EQU   CHTYPE
CHARSV28 EQU   CHTYPE
CHARSV27 EQU   CHTYPE
CHARSV26 EQU   CHTYPE
CHARSV25 EQU   CHTYPE
CHDSTAT  EQU   CHTYPE
CHBUF    EQU   CHAINS01
@NM00017 EQU   PARMLIST
@NM00016 EQU   MSGAREA+58
@NM00015 EQU   MSGAREA+27
@NM00014 EQU   MSGAREA+24
@NM00013 EQU   MSGAREA+20
@NM00012 EQU   MSGAREA
CHARSV16 EQU   CHSHORT+108
CHARSV15 EQU   CHSHORT+104
CHJSCBVS EQU   CHSHORT+100
CHUSCVS  EQU   CHSHORT+96
@NM00010 EQU   CHSHORT+92
@NM00009 EQU   CHSHORT+88
CHSQA    EQU   CHSHORT+52
CHQPA    EQU   CHSHORT+16
CHJCL    EQU   CHSHORT+12
CHSPC    EQU   CHSHORT+8
CHSPB    EQU   CHSHORT+4
CHTCB    EQU   CHSHORT+1
CHARSV23 EQU   CHSWT
CHARSV22 EQU   CHSWT
CHARSV21 EQU   CHSWT
CHAC     EQU   CHSWT
CHPSF    EQU   CHSWT
CHPSD    EQU   CHSWT
CHJCT    EQU   CHSWT
CHARSV20 EQU   CHSWT
CHCECB   EQU   CHASM+20
CHECB    EQU   CHASM+16
CHRGNAD  EQU   CHASM+12
CHARSV18 EQU   CHRGNSZ+1
CHRPRTY  EQU   CHRGNSZ
@NM00008 EQU   CHCIBP
CHEND    EQU   CHCIBP
CHECBP   EQU   CHASM
CHDER    EQU   CHAIN+36
CHARSV10 EQU   CHACT1
CHARSV09 EQU   CHACT1
CHARSV08 EQU   CHACT1
CHARSV07 EQU   CHACT1
CHARSV06 EQU   CHACT1
CHARSV05 EQU   CHACT1
CHARSV04 EQU   CHACT1
CHRDWTR  EQU   CHACT1
CHARSV30 EQU   CHAIN+34
CHQID    EQU   CHAIN+32
CHASID   EQU   CHTJID
CHTRKID  EQU   CHPKE
CHCIBCTR EQU   CHAIN+27
CHUNIT   EQU   CHAIN+24
CHCLS    EQU   CHAIN+16
CHPARM   EQU   CHKEY
CHIFY    EQU   CHACT
CHAIFX   EQU   CHACT
CHCLD    EQU   CHACT
CHCL     EQU   CHACT
CHDSI    EQU   CHACT
CHDISC   EQU   CHACT
CHTERM   EQU   CHACT
CHSWAP   EQU   CHACT
CHABTERM EQU   CHSTS
CHFC     EQU   CHSTS
CHDL     EQU   CHSTS
CHAD     EQU   CHSTS
CHQSPC   EQU   CHSTS
CHSOUT   EQU   CHSTS
CHSYS    EQU   CHSTS
CHAP     EQU   CHSTS
CHSZE    EQU   CHFLG+1
CHVCD    EQU   CHFLG
CHPTR    EQU   CHAIN
XAXSACB  EQU   EEXSAS03+4
XAXUTME  EQU   EEXSAS03+2
XAXFREE  EQU   EEXSAS03+1
@NM00007 EQU   XAXMASK
XAXTSL   EQU   XAXMASK
XAXTS    EQU   XAXMASK
@NM00006 EQU   XAXMASK
XAXJOBSL EQU   XAXMASK
XAXJOBS  EQU   XAXMASK
XASOPTR  EQU   @NM00005+1
XASTSAVE EQU   @NM00005
XASPLS3  EQU   EEXSAS02+3
@NM00004 EQU   XASDS
XASSDS5  EQU   XASDS
XASSDS4  EQU   XASDS
XASSDS3  EQU   XASDS
XASSDS2  EQU   XASDS
XASSDS   EQU   XASDS
XASDID   EQU   EEXSAS02+1
XASCID   EQU   EEXSAS02
@NM00003 EQU   EEXSAS01+44
XAT      EQU   EEXSAS01+20
XAF      EQU   EEXSAS01+12
XAI      EQU   EEXSAS01+4
XAH      EQU   EEXSAS01
XASAVSTD EQU   XSAMAP+64
XASAVLOC EQU   XSAMAP+48
@NM00002 EQU   XASVRB+44
@NM00001 EQU   XASVRB+41
XAN      EQU   XAL
XAD      EQU   XSA+4
XAP      EQU   XSA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00040 EQU   @EL00001
@ENDDATA EQU   *
         END   IEEMB814
