         TITLE ' IEAVNP13:                                             *
                        '
IEAVNP13 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEAVNP13  74.240'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  LA    @12,4095(,@11)                                      0001
         USING @PSTART,@11                                         0001
         USING @PSTART+4095,@12                                    0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
** REFS ARE GENERATED FOR NVT FIELDS THAT CONTAIN ADDRESSES OF
** NIP SERVICE ROUTINES, SO IEAPMNIP MACRO CALLS TO THESE ROUTINES
** WILL ASSEMBLE PROPERLY.
*/*                                                                 */
*/*      MODULE IEAVNP13 MASTER SCHEDULER R.I.M.                    */
*/*      THE FUNCTION IS TO BUILD A TABLE FOR SMF WITH IT'S         */
*/*      MEMBER NAME IN FOR SMF PARAMETERS.                         */
*/*      THEN TO GET THE PARMTAB PARAMETERS FOR 'CMD=' AND          */
*/*      BUILD A QUEUE OF ACTUAL SYSTEM COMMANDS, AND TO SET        */
*/*      THE TIME OF DAY BIT IF TOD= IS IN THE COMMNDXX MEMBER      */
*/*      ELSE SET THE DEFAULT TO NO PROMPT.                         */
*/*      ENDING WITH TIME ZONE PROCESSING , PUTTING THE CONSTANT    */
*/*      IN THE CVT 'CVTTZ' IF PARMTZ MEMBER IS IN PARMLIB....      */
*/*                                                                 */
*CVTPTR=RCVT;                                                      0202
         ST    RCVT,CVTPTR                                         0202
*MSTODWTO=ONEBIT;                           /* SET TOD BIT TO DEFALT*/
         L     @10,CVTPTR                                          0203
         L     @10,CVTMSER(,@10)                                   0203
         OI    MSTODWTO(@10),B'01000000'                           0203
*CMDBAD=ZEROBIT;                            /* SET IT TO ZERO INIT  */
         NI    CMDBAD,B'10111111'                                  0204
*R2SAVE=RNVT;                               /* SAVE PRT TO NVT      */
         ST    RNVT,R2SAVE                                         0205
*EXITSAVE=REXIT;                                 /* SAVE RETURN ADR.*/
         ST    REXIT,EXITSAVE                                      0206
*RFY NVT BASED(R2SAVE);                                            0207
*RFY PARMTAB BASED(NVTPTAB);                                       0208
*CALL SMFPROC;                              /* PROCESS SMF PARMS    */
         BAL   @14,SMFPROC                                         0209
*CALL CMDPROC;                              /* PROCESS CMD PARMS    */
         BAL   @14,CMDPROC                                         0210
*IF CMD=ZERO THEN                                /* TEST FOR DEFAULT*/
         L     @10,R2SAVE                                          0211
         L     @10,NVTPTAB(,@10)                                   0211
         CLC   CMD(4,@10),ZERO                                     0211
         BNE   @RF00211                                            0211
*  DO;                                           /* DO THIS IF SO   */
*    COMMEM=COMMND00;                      /* SET MEM NAME TO COMMND*/
         MVC   COMMEM(8),@CC01973                                  0213
*    NIPPAFL1=ONEBIT;                       /* STOP NOFIND MSG.     */
         OI    NIPPAFL1(@10),B'10000000'                           0214
*   END;                                                           0215
*ELSE                                       /* NO DEFAULT GET PARMS */
*  IF CMDPARMS  (1:1)=LPARAN THEN           /* TEST FOR ONLY ONE NUM*/
         B     @RC00211                                            0216
@RF00211 L     @10,R2SAVE                                          0216
         L     @10,NVTPTAB(,@10)                                   0216
         L     @10,CMD(,@10)                                       0216
         CLI   CMDPARMS(@10),C'('                                  0216
         BNE   @RF00216                                            0216
*    DO;                                    /* SET BY THE OPERATOR  */
*    COMMEM=COMMND00;                       /*SET MEMBER CONSTANT   */
         MVC   COMMEM(8),@CC01973                                  0218
*    COMNUM (1:2) =CMDPARMS  (2:3)×UPCASE;  /* GET 1ST DIGIT OF NUM */
         MVC   COMNUM(2),CMDPARMS+1(@10)                           0219
         OC    COMNUM(2),@CC01971                                  0219
*     PTRSAVE=CMD+4;                       /* SAVE FOR NEXT MEMBER */
         AH    @10,@CH00327                                        0220
         ST    @10,PTRSAVE                                         0220
*    END;                                   /* END DO LOOP          */
*  ELSE                                     /* ONE MEM IN PARMS     */
*    DO;                                    /* SET BY THE OPERATOR  */
         B     @RC00216                                            0222
@RF00216 DS    0H                                                  0223
*     COMMEM=COMMND00;                      /* SET MEM COSTANT      */
         MVC   COMMEM(8),@CC01973                                  0223
*      COMNUM  (1:2)=CMDPARMS  (1:2)×UPCASE; /* GET 1ST DIGIT OF NUM*/
         L     @10,R2SAVE                                          0224
         L     @10,NVTPTAB(,@10)                                   0224
         L     @10,CMD(,@10)                                       0224
         MVC   COMNUM(2),CMDPARMS(@10)                             0224
         OC    COMNUM(2),@CC01971                                  0224
*    END;                                                          0225
*ALLDONE=NO;                                /* SET FOR DO WHILE     */
@RC00216 DS    0H                                                  0226
@RC00211 NI    ALLDONE,B'01111111'                                 0226
*DO WHILE ALLDONE=NO;                       /* ANY ERROR GET OUT    */
         B     @DE00227                                            0227
@DL00227 DS    0H                                                  0228
*  NIPPANAM=COMMEM;                    /* CURR MEMBER FOR READ FIND */
         L     @10,R2SAVE                                          0228
         L     @09,NVTPAREA(,@10)                                  0228
         MVC   NIPPANAM(8,@09),COMMEM                              0228
*  RNVT=R2SAVE;                        /* SET THE NVT PTR           */
         LR    RNVT,@10                                            0229
*  RCVT=CVTPTR;                        /* SET THE CVT PTR           */
         L     RCVT,CVTPTR                                         0230
*  CALL NIPPMMEM;                      /* NIP FIND + READ ROUTINE   */
         BAL   @14,NIPPMMEM                                        0231
*  IF RPARM> ZERO THEN                 /* R1 POSITIVE ALL IS OK     */
         C     RPARM,ZERO                                          0232
         BNH   @RF00232                                            0232
*    DO;                                                           0233
*      RECADDR=RPARM;                  /* SAVE PTR TO REC JUST READ */
         LR    RECADDR,RPARM                                       0234
*/*                                                          @YM03617*/
*/* TEST FOR COM=' AT THE BEGINNING OF THE BUFFER.           @YM03617*/
*/* IF IT IS COM=', GO PROCESS COMMANDS FROM PARMLIB.        @YM03617*/
*/* IF IT IS NOT, GO CHECK FOR TOD= .                        @YM03617*/
*/*                                                          @YM03617*/
*      RFY COMREC BASED(RECADDR);      /* DSECT FOR THE CMD RECORD  */
*      IF COMREC (1:5)=COM THEN        /* TEST FOR COM=' A SYS. CMD */
         CLC   COMREC(5,RECADDR),@CC01951                          0236
         BNE   @RF00236                                            0236
*        CALL COMRECD;                 /* PROCESS THE COMMAND       */
         BAL   @14,COMRECD                                         0237
*      ELSE                            /* MIGHT BE A TOD=' RECORD   */
*        CALL TODRECD;                 /* SO PROCESS FOR TOD        */
         B     @RC00236                                            0238
@RF00236 BAL   @14,TODRECD                                         0238
*    END;                                                          0239
*  ELSE                                /* HAD AN I/O ERROR OR EOF   */
*    IF NIPPARC=SIXTEEN THEN           /* TEST FOR END OF FILE      */
         B     @RC00232                                            0240
@RF00232 L     @10,R2SAVE                                          0240
         L     @10,NVTPAREA(,@10)                                  0240
         CLC   NIPPARC(4,@10),@CF00147                             0240
         BNE   @RF00240                                            0240
*      CALL EOFRTN;                    /* GET EOF ROUTINE           */
         BAL   @14,EOFRTN                                          0241
*    ELSE                              /* IT WAS AN I/O ERROR       */
*      IF CMD=ZERO&NIPPARC=FOUR THEN                               0242
         B     @RC00240                                            0242
@RF00240 L     @10,R2SAVE                                          0242
         L     @09,NVTPTAB(,@10)                                   0242
         CLC   CMD(4,@09),ZERO                                     0242
         BNE   @RF00242                                            0242
         L     @10,NVTPAREA(,@10)                                  0242
         CLC   NIPPARC(4,@10),@CF00327                             0242
         BNE   @RF00242                                            0242
*        DO;                           /* TEST FOR NO FIND          */
*          RPARM=SIXTEEN;              /* SHOW NO ERRORS            */
         LA    RPARM,16                                            0244
*          ALLDONE=YES;                /* SO STOP DO WHILE          */
         OI    ALLDONE,B'10000000'                                 0245
*        END;                                                      0246
*       ELSE                                                       0247
*         ALLDONE=YES;                 /* SO STOP THE DO WHILE      */
         B     @RC00242                                            0247
@RF00242 OI    ALLDONE,B'10000000'                                 0247
*END;                                  /* DO WHILE ALLDONE=NO END   */
@RC00242 DS    0H                                                  0248
@RC00240 DS    0H                                                  0248
@RC00232 DS    0H                                                  0248
@DE00227 TM    ALLDONE,B'10000000'                                 0248
         BZ    @DL00227                                            0248
*IF RPARM^=SIXTEEN THEN                /* IT MEANS THAT AN I/O ERROR*/
         CH    RPARM,@CH00147                                      0249
         BE    @RF00249                                            0249
*  CALL ERROREND;                      /* TO CLEAN UP ALL GET MAINS */
         BAL   @14,ERROREND                                        0250
*CALL TZRTN;                           /* DO THE TIME ZONE CONSTANT */
@RF00249 BAL   @14,TZRTN                                           0251
*CALL LOGRTN;                          /* PROCESS LOG PARMS         */
         BAL   @14,LOGRTN                                          0252
*REXIT=EXITSAVE;                            /* SET RETURN ADDR      */
         L     REXIT,EXITSAVE                                      0253
*RETURN;                                                           0254
@EL00001 L     @13,4(,@13)                                         0254
@EF00001 DS    0H                                                  0254
@ER00001 LM    @14,@12,12(@13)                                     0254
         BR    @14                                                 0254
*/*      END OF IEAVNP13 MAINLINE CODE   */                        0255
*/*                                                                 */
*/*      THE SMF PROCESSOR WILL SYNTAX THE PARMTAB PARAMETER        */
*/*      FOR ONLY ONE ENTRY FOR THE MEMBER NAME. IT WILL THEN       */
*/*      BUILD A TABLE TO BE PASSED TO SMF INITIALITION RTN..       */
*/*      IF THE PARMTAB POINTER IS ZERO IT MEANS TO USE THE         */
*/*      DEFAULT MEMBER FOR SMF IF SO THE POINTER IN THE M/S RES.   */
*/*      DATA AREA WILL BE SET TO ZERO..IN THE CASE OF BAD SYNTAX   */
*/*      IT WILL PROMPT THE OPERATOR TO RESPECIFY IT..              */
*/*      INPUT...  1 SMF ( PARMTAB PTR TO SMF PARAMETER )           */
*/*                                                                 */
*/*      OUTPUT... 1 MSSMFPRM  ( PTR TO SMF TABLE )                 */
*/*                2 SMF TABLE ( HAS THE SMFPRMXX MEMBER NAME INIT) */
*SMFPROC:                              /* SMF PROCESSING ROUTINE    */
*PROC;        /* INTERNAL PROCEDURE        */                      0255
SMFPROC  STM   @14,@12,@SA00002                                    0255
*ALLDONE=NO;                           /* SET FOR DO LOOP           */
         NI    ALLDONE,B'01111111'                                 0256
*DO WHILE ALLDONE=NO;                  /* DO SMF UNTIL ERROR = YES  */
         B     @DE00257                                            0257
@DL00257 DS    0H                                                  0258
*  RFY SMFPARM BASED(SMF);                                         0258
*  RNVT=ZERO;                                                      0259
         L     @10,ZERO                                            0259
         LR    RNVT,@10                                            0259
*  RPARM=ZERO;                                                     0260
         LR    RPARM,@10                                           0260
*  IF SMF=ZERO THEN                    /* TEST FOR DEFAULT USED     */
         L     @09,R2SAVE                                          0261
         L     @09,NVTPTAB(,@09)                                   0261
         C     @10,SMF(,@09)                                       0261
         BNE   @RF00261                                            0261
*    DO;                                                           0262
*      MSSMFPRM=ZERO;                  /* PTR TO SMF TABLE = ZERO   */
         L     @09,CVTPTR                                          0263
         L     @09,CVTMSER(,@09)                                   0263
         ST    @10,MSSMFPRM(,@09)                                  0263
*      ALLDONE=YES;                    /* GET OUT OF DO LOOP        */
         OI    ALLDONE,B'10000000'                                 0264
*    END;                                                          0265
*  ELSE                                /* SYNTAX TEST PARMTAB PARMS */
*   DO;                                                            0266
         B     @RC00261                                            0266
@RF00261 DS    0H                                                  0267
*    IF SMFPARM (1:1)^=LPARAN THEN          /* TEST FOR PARANS IN PA*/
         L     @10,R2SAVE                                          0267
         L     @10,NVTPTAB(,@10)                                   0267
         L     @10,SMF(,@10)                                       0267
         CLI   SMFPARM(@10),C'('                                   0267
         BE    @RF00267                                            0267
*      DO;                                  /* PROCESS FOR NO PARANS*/
*        PTRSAVE=SMF;                       /* SAVE START ADDROF PAR*/
         ST    @10,PTRSAVE                                         0269
*        RFY SMFPARM BASED(PTRSAVE);        /* BASE SMF PARMS ON SAV*/
*        TRT (SMFPARM,TRTTAB);         /* TRANS AND TEST ALPHMERIC  */
         L     @10,PTRSAVE                                         0271
         TRT   SMFPARM(10,@10),TRTTAB                              0271
*        IF RNVT=ONE THEN                   /* MUST STOP ON QUOTE   */
         CH    RNVT,@CH00037                                       0272
         BNE   @RF00272                                            0272
*          IF SMFPARM  (3:3)=QUOTE THEN     /* MUST BE A QUOTE      */
         L     @10,PTRSAVE                                         0273
         CLI   SMFPARM+2(@10),C''''                                0273
         BNE   @RF00273                                            0273
*            ALLDONE=YES;                   /* ALL WAS OK SO GET OUT*/
         OI    ALLDONE,B'10000000'                                 0274
*          ELSE;                                 /* ERROR PRPT OPR. */
@RF00273 DS    0H                                                  0276
*        ELSE;                         /* ERROR SO PROMPT THE OPR.  */
@RF00272 DS    0H                                                  0277
*      END;                                                        0277
*    ELSE                                                          0278
*      DO;                                  /* IT WAS A LPARAN SOTRT*/
         B     @RC00267                                            0278
@RF00267 DS    0H                                                  0279
*        PTRSAVE=SMF+ONE;                   /* START ON 2ND CHAR PAR*/
         L     @10,R2SAVE                                          0279
         L     @10,NVTPTAB(,@10)                                   0279
         LA    @09,1                                               0279
         AL    @09,SMF(,@10)                                       0279
         ST    @09,PTRSAVE                                         0279
*        RFY SMFPARM BASED(PTRSAVE);        /* BASE THE PARM RECORD */
*        TRT (SMFPARM,TRTTAB);              /* TRTFOR ALPHAMERIC    */
         L     @10,PTRSAVE                                         0281
         TRT   SMFPARM(10,@10),TRTTAB                              0281
*        IF RNVT = EIGHT THEN               /* IT STOPED ON RPARAN  */
         CH    RNVT,@CH00132                                       0282
         BNE   @RF00282                                            0282
*          DO;                              /* TEST FOR QUOTE AFTER */
*            IF RPARM=PTRSAVE+TWO THEN      /* IS RPARAN IN OK POS. */
         L     @10,PTRSAVE                                         0284
         LA    @09,2                                               0284
         ALR   @09,@10                                             0284
         CR    RPARM,@09                                           0284
         BNE   @RF00284                                            0284
*              IF SMFPARM (4:4)= QUOTE THEN   /* ' AFTER RPARAN ?   */
         CLI   SMFPARM+3(@10),C''''                                0285
         BNE   @RF00285                                            0285
*                ALLDONE=YES;                 /* ALLOK GET OUTOF DO */
         OI    ALLDONE,B'10000000'                                 0286
*              ELSE;                        /* NULL FOR IF = TO ''' */
@RF00285 DS    0H                                                  0288
*            ELSE;                          /* NULL FOR IF )) IS OK */
@RF00284 DS    0H                                                  0289
*          END;                             /* END FOR DO RCVT=8    */
*        ELSE;                              /* NULL FOR RCVT=8   */
@RF00282 DS    0H                                                  0291
*      END;                                 /* END FOR RPARAN ELSE  */
*  IF ALLDONE=YES THEN                      /*  IF NOT IT IS ERROR  */
@RC00267 TM    ALLDONE,B'10000000'                                 0292
         BNO   @RF00292                                            0292
*    DO;                                    /* IF NOT IT IS ERROR   */
*      RLENGTH=GETLGTH;                /* SET  LENGTH OF GETMAIN    */
         L     RLENGTH,@CF01967                                    0294
*      GEN( GETMAIN R,LV=(0) );             /* DO THE GETMAIN       */
          GETMAIN R,LV=(0)
*      RFY SMFMEM BASED(RPARM);             /* BASE SMF DSECT       */
*      MSSMFPRM=RPARM;                      /* SET PTR TO TABLE     */
         L     @10,CVTPTR                                          0297
         L     @10,CVTMSER(,@10)                                   0297
         ST    RPARM,MSSMFPRM(,@10)                                0297
*      TABLGTH=LGTH12;                      /* SET TABLE LENGTH     */
         MVC   TABLGTH(2,RPARM),@CH00033                           0298
*      MEMNAME=SMFPRM;                      /* SET MEMBER NAME      */
         MVC   MEMNAME(6,RPARM),@CC01969                           0299
*      MEMNUM (1:2)=SMFPARM (1:2)×UPCASE;   /* SET MEMBER NUMBER    */
         L     @10,PTRSAVE                                         0300
         MVC   MEMNUM(2,RPARM),SMFPARM(@10)                        0300
         OC    MEMNUM(2,RPARM),@CC01971                            0300
*    END;                                   /* END OF TAB BUILD DO  */
*  ELSE                                     /* HERE BECAUSE OF ERROR*/
*    DO;                                    /* SO PROMPT THE OPERATR*/
         B     @RC00292                                            0302
@RF00292 DS    0H                                                  0303
*    RNVT=R2SAVE;                           /* SET NVT PTR */      0303
         L     RNVT,R2SAVE                                         0303
*    GEN REFS(NVTPRMPT) (IEAPMNIP TYPE=PRMPT,PARAM=BADSMF,OPT=ERROR );
         IEAPMNIP TYPE=PRMPT,PARAM=BADSMF,OPT=ERROR
*    END;                                   /* END THE PROMPT DO LOP*/
*  RFY SMFPARM BASED(SMF);                                         0306
@RC00292 DS    0H                                                  0307
* END;                                      /* END OF SMF PROCESS   */
*END;                                                              0308
@RC00261 DS    0H                                                  0308
@DE00257 TM    ALLDONE,B'10000000'                                 0308
         BZ    @DL00257                                            0308
*END SMFPROC;                                                      0309
@EL00002 DS    0H                                                  0309
@EF00002 DS    0H                                                  0309
@ER00002 LM    @14,@12,@SA00002                                    0309
         BR    @14                                                 0309
*/*                                                                 */
*/*      THIS IS THE COMMAND PARAMETERS SYNTAX CHECKER FOR PARMTAB  */
*/*      THE SYNTAX OF THE PARAMETERS ARE CMD=NN OR CMD=(NN,NN,NN)  */
*/*      ANY ERRORS THE PROC WILL PROMPT THE SYSTEM OPERATOR        */
*/*      TO RESPECIFY....                                           */
*/*      INPUT...  1 CMD ( PARMTAB PTR TO CMD= PARAMETERS)          */
*/*                                                                 */
*/*      OUTPUT... 1 #MEMBERS  ( THE NUMBER OF COMMND MEMBERS TO    */
*/*                  BE PROCESSED BY COMRECD ROUNTINE )             */
*/*                                                                 */
*/*                                                                 */
*CMDPROC:                                                          0310
*PROC;                                                             0310
CMDPROC  STM   @14,@12,@SA00003                                    0310
*ALLDONE=NO;                                /* SET FOR DO LOOP      */
         NI    ALLDONE,B'01111111'                                 0311
*#PROCESD=ZERO;                             /* SET IT TO ZERO       */
         MVC   #PROCESD(2),ZERO+2                                  0312
*DO WHILE ALLDONE=NO;                       /* THE CMD DO LOOP      */
         B     @DE00313                                            0313
@DL00313 DS    0H                                                  0314
*  RFY CMDPARMS BASED(CMD);                                        0314
*  RNVT=ZERO;                                                      0315
         L     @10,ZERO                                            0315
         LR    RNVT,@10                                            0315
*  RPARM=ZERO;                                                     0316
         LR    RPARM,@10                                           0316
*  PTRSAVE=CMD;                             /* SAVE ADDR OF CMD     */
         L     @09,R2SAVE                                          0317
         L     @09,NVTPTAB(,@09)                                   0317
         L     @09,CMD(,@09)                                       0317
         ST    @09,PTRSAVE                                         0317
*  #MEMBERS=ONE;                            /* #MEM 3PROC TOZERO    */
         MVC   #MEMBERS(2),@CH00037                                0318
*  IF CMD=ZERO THEN                    /* USE THE COMMND00 DEFAULT  */
         CR    @09,@10                                             0319
         BNE   @RF00319                                            0319
*    ALLDONE=YES;                       /* GET OUT OF LOOP          */
         OI    ALLDONE,B'10000000'                                 0320
*  ELSE                                /* DO PARMTAB PARMAMETERS    */
*    IF CMDPARMS (1:1)=LPARAN THEN          /* TEST MULT PARMS..    */
         B     @RC00319                                            0321
@RF00319 L     @10,R2SAVE                                          0321
         L     @10,NVTPTAB(,@10)                                   0321
         L     @10,CMD(,@10)                                       0321
         CLI   CMDPARMS(@10),C'('                                  0321
         BNE   @RF00321                                            0321
*      DO;                                  /* YES TRT THE PARMS    */
*        PTRSAVE=PTRSAVE+ONE;               /* POINT TO NEXT CHAR   */
         LA    @10,1                                               0323
         AL    @10,PTRSAVE                                         0323
         ST    @10,PTRSAVE                                         0323
*        RFY CMDPARMS BASED(PTRSAVE);       /* TO START IN 2ND POS. */
*        DO WHILE RNVT^=EIGHT;              /* 5 IS A RPARAN TO STOP*/
         B     @DE00325                                            0325
@DL00325 DS    0H                                                  0326
*          TRT (CMDPARMS,TRTTAB);           /* TRTTHE PARMS SYNTAX  */
         L     @10,PTRSAVE                                         0326
         TRT   CMDPARMS(100,@10),TRTTAB                            0326
*          IF RNVT= FIVE THEN               /* IS STOP ON A COMMA   */
         CH    RNVT,@CH00144                                       0327
         BNE   @RF00327                                            0327
*            DO;                            /* YES ADD TO # MEMBERS */
*              PTRSAVE=PTRSAVE+TWO;         /* ADD 2 TO TEST POSITON*/
         LA    @10,2                                               0329
         AL    @10,PTRSAVE                                         0329
         ST    @10,PTRSAVE                                         0329
*              IF RPARM=PTRSAVE THEN        /* ',' IN RIGHT PLACE   */
         CR    RPARM,@10                                           0330
         BNE   @RF00330                                            0330
*                DO;                        /* ADD TO #MEM. + PTR   */
*                  #MEMBERS=#MEMBERS+ONE;   /* ADD 1 TO # MEMBERS   */
         LA    @09,1                                               0332
         LH    @08,#MEMBERS                                        0332
         ALR   @08,@09                                             0332
         STH   @08,#MEMBERS                                        0332
*                  PTRSAVE=PTRSAVE+ONE;     /* POINT TO AFTER COMMA */
         ALR   @10,@09                                             0333
         ST    @10,PTRSAVE                                         0333
*                END;                       /* END FOR IF = TO COMMA*/
*              ELSE                         /* "," IN WRONG PLACE   */
*                DO;                        /* SO PROMPT THE OPERAT.*/
         B     @RC00330                                            0335
@RF00330 DS    0H                                                  0336
*                  RNVT=R2SAVE;             /* SET NVT PTR          */
         L     RNVT,R2SAVE                                         0336
*  GEN REFS(NVTPRMPT) ( IEAPMNIP TYPE=PRMPT,PARAM=BADCMD,OPT=ERROR );
          IEAPMNIP TYPE=PRMPT,PARAM=BADCMD,OPT=ERROR
*                  RNVT=EIGHT;              /* TO GET OUT           */
         LA    RNVT,8                                              0338
*                END;                       /* END OFMERROR DO LOOP */
*            END;                                                  0340
*          ELSE                             /* FOR RCVT = 5 IF STMT */
*            IF RNVT= EIGHT THEN            /* = TO A RPARAN END    */
         B     @RC00327                                            0341
@RF00327 CH    RNVT,@CH00132                                       0341
         BNE   @RF00341                                            0341
*              DO;                          /* IS IT IN RIGHT POSIT.*/
*                PTRSAVE=PTRSAVE+TWO;       /* POINT TO SEE IF IT IS*/
         LA    @10,2                                               0343
         AL    @10,PTRSAVE                                         0343
         ST    @10,PTRSAVE                                         0343
*                IF RPARM=PTRSAVE THEN      /* IF SO IT IS GOOD POS */
         CR    RPARM,@10                                           0344
         BNE   @RF00344                                            0344
*                  IF CMDPARMS (2:2)=QUOTE THEN    /* NEXT A CHAR ' */
         CLI   CMDPARMS+1(@10),C''''                               0345
         BNE   @RF00345                                            0345
*                    ALLDONE=YES;                  /* OK THEN GOOD  */
         OI    ALLDONE,B'10000000'                                 0346
*                  ELSE                     /* CHAR IS IN ERROR     */
*                    DO;                    /* SO PROMPT THE OPERAT.*/
         B     @RC00345                                            0347
@RF00345 DS    0H                                                  0348
*                      RNVT=R2SAVE;         /* SET NVT PTR   */    0348
         L     RNVT,R2SAVE                                         0348
*  GEN REFS(NVTPRMPT) ( IEAPMNIP TYPE=PRMPT,PARAM=BADCMD,OPT=ERROR );
          IEAPMNIP TYPE=PRMPT,PARAM=BADCMD,OPT=ERROR
*                      RNVT=EIGHT;          /* TO GET OUT LOOP      */
         LA    RNVT,8                                              0350
*                    END;                   /* END THIS DO LOOP     */
*                ELSE                       /* RPARAN IS OUT OF PLAC*/
*                  DO;                      /* SO PROMPT + GETOUT   */
         B     @RC00344                                            0352
@RF00344 DS    0H                                                  0353
*                    RNVT=R2SAVE;           /* SET NVT PTR          */
         L     RNVT,R2SAVE                                         0353
*   GEN REFS(NVTPRMPT) ( IEAPMNIP TYPE=PRMPT,PARAM=BADCMD,OPT=ERROR );
          IEAPMNIP TYPE=PRMPT,PARAM=BADCMD,OPT=ERROR
*                   RNVT=EIGHT;             /* TO GET OUT OF DO     */
         LA    RNVT,8                                              0355
*                  END;                     /* END THIS DO LOOP     */
*              END;                         /* END FORRCVT=8 IF STMT*/
*            ELSE                           /* CHAR WAS BAD IN PARMS*/
*              DO;                          /* SO PROMPT THE OPERATO*/
         B     @RC00341                                            0358
@RF00341 DS    0H                                                  0359
*                RNVT=R2SAVE;               /* TO SET NVT PTR       */
         L     RNVT,R2SAVE                                         0359
*   GEN REFS(NVTPRMPT) ( IEAPMNIP TYPE=PRMPT,PARAM=BADCMD,OPT=ERROR );
          IEAPMNIP TYPE=PRMPT,PARAM=BADCMD,OPT=ERROR
*                RNVT=EIGHT;                /* TO GET OUT OF DO    */
         LA    RNVT,8                                              0361
*              END;                         /* END THIS DO LOOP     */
*        END;                               /* END DO WHILE RCVT^=8 */
@RC00341 DS    0H                                                  0363
@RC00327 DS    0H                                                  0363
@DE00325 CH    RNVT,@CH00132                                       0363
         BNE   @DL00325                                            0363
*      END;                                 /* END IF POS 1 = '('   */
*    ELSE                                   /* POS WAS NOT A LPARAN */
*      IF CMDPARMS (3:3)=QUOTE THEN         /* TEST FOR ONLY 2 CHARS */
         B     @RC00321                                            0365
@RF00321 L     @10,PTRSAVE                                         0365
         CLI   CMDPARMS+2(@10),C''''                               0365
         BNE   @RF00365                                            0365
*        DO;                                /* SPECIFIED BY OPERATOR*/
*          TRT (CMDPARMS,TRTTAB);           /* TRT THE PARMS CHAR   */
         L     @10,PTRSAVE                                         0367
         TRT   CMDPARMS(100,@10),TRTTAB                            0367
*          IF RNVT^=ONE THEN                /* THE CHAR WAS AN ERROR*/
         CH    RNVT,@CH00037                                       0368
         BE    @RF00368                                            0368
*            DO;                            /* SO PROMPT THE OPERAT */
*              RNVT=R2SAVE;                 /* SET THE NVT PTR      */
         L     RNVT,R2SAVE                                         0370
*   GEN REFS(NVTPRMPT) ( IEAPMNIP TYPE=PRMPT,PARAM=BADCMD,OPT=ERROR );
          IEAPMNIP TYPE=PRMPT,PARAM=BADCMD,OPT=ERROR
*            END;                           /* END THIS DO LOOP     */
*          ELSE                             /* ALL WAS OK SO GET OUT*/
*            ALLDONE=YES;                   /* TO GET OUT OF CMDPROC*/
         B     @RC00368                                            0373
@RF00368 OI    ALLDONE,B'10000000'                                 0373
*        END;                               /* END POS 3=' IF STMT  */
*      ELSE                                 /* TO MANY CHARS SO BAD */
*        DO;                                /* PROMPT THE OPERATOR  */
         B     @RC00365                                            0375
@RF00365 DS    0H                                                  0376
*          RNVT=R2SAVE;                     /* SET THE NVT PTR      */
         L     RNVT,R2SAVE                                         0376
*   GEN REFS(NVTPRMPT) ( IEAPMNIP TYPE=PRMPT,PARAM=BADCMD,OPT=ERROR );
          IEAPMNIP TYPE=PRMPT,PARAM=BADCMD,OPT=ERROR
*        END;                               /* END THIS DO LOOP NOW */
*END;                                       /* END OF 1ST DO WHILE  */
@RC00365 DS    0H                                                  0379
@RC00321 DS    0H                                                  0379
@RC00319 DS    0H                                                  0379
@DE00313 TM    ALLDONE,B'10000000'                                 0379
         BZ    @DL00313                                            0379
*RFY CMDPARMS BASED(CMD);                                          0380
*END CMDPROC;                               /* THATS ALL FOLKS.     */
@EL00003 DS    0H                                                  0381
@EF00003 DS    0H                                                  0381
@ER00003 LM    @14,@12,@SA00003                                    0381
         BR    @14                                                 0381
*/*                                                                 */
*/*                                                                 */
*/*      TODRECD IS A RTN TO TEST THE RECORD READ IN FOR A TOD=     */
*/*      IF IT IS EQUAL THEN TO TEST FOR PROMPT OR NOPROMPT         */
*/*      IF THE RECORD IS NOT = THEN TO ISSUE AN ERROR MSG ONLY     */
*/*      WHEN NO OTHERS HAVE OCCURED IN THAT MEMBER..               */
*/*      ( ONLY ONE MSG ON SYNTAX ERROR FOR EACH PARMLIB MEMBER     */
*/*      WHEN ALL IS OK IT WILL SET THE MSTODWTO BIT TO A'1'        */
*/*      FOR NO PROMPT AND A '0' FOR PROMPT...                      */
*/*      INPUT...  1 COMREC ( THE RECORD READ IN FROM PARMLIB)      */
*/*                                                                 */
*/*      OUTPUT... 1 THE TOD BIT SET RESPECTIVLY                    */
*/*                2 OR THE ERROR MESSAGE IEA863I                   */
*/*                                                                 */
*TODRECD:                                                          0382
*PROC;                                                             0382
TODRECD  STM   @14,@12,@SA00004                                    0382
*IF COMREC (1:1)^= BLANK THEN               /* REC. IS ALL BLANKS   */
         CLI   COMREC(RECADDR),C' '                                0383
         BE    @RF00383                                            0383
*IF COMREC (1:4)=TOD THEN                   /* TEST FOR 'TOD='      */
         CLC   COMREC(4,RECADDR),@CC01953                          0384
         BNE   @RF00384                                            0384
*  IF COMREC (5:11)=PROMPT THEN              /* TEST = PROMPT       */
         CLC   COMREC+4(7,RECADDR),@CC01982                        0385
         BNE   @RF00385                                            0385
*    MSTODWTO=ZEROBIT;                      /* SET BIT TO ZERO      */
         L     @10,CVTPTR                                          0386
         L     @10,CVTMSER(,@10)                                   0386
         NI    MSTODWTO(@10),B'10111111'                           0386
*  ELSE                                /* SEE IF IT = NOPROMPT      */
*    IF COMREC (5:13)=NOPROMPT THEN         /*IF NOT IT IS AN ERROR */
         B     @RC00385                                            0387
@RF00385 CLC   COMREC+4(9,RECADDR),@CC01979                        0387
         BNE   @RF00387                                            0387
*      MSTODWTO=ONEBIT;                     /* IT IS SET BIT TO '1' */
         L     @10,CVTPTR                                          0388
         L     @10,CVTMSER(,@10)                                   0388
         OI    MSTODWTO(@10),B'01000000'                           0388
*    ELSE                              /* IT IS AN ERROR WTO ERRMSG */
*      IF CMDBAD^=ONEBIT THEN          /* ONE ERR MSG TO A MEMBER   */
         B     @RC00387                                            0389
@RF00387 TM    CMDBAD,B'01000000'                                  0389
         BO    @RF00389                                            0389
*        DO;                           /* THAT WAS SPECIFIED        */
*          ERRCMD=COMREC (1:16);            /* SAMPLE OF ERROR CMD  */
         MVC   ERRCMD(16),COMREC(RECADDR)                          0391
*          MEMBER=COMMEM;                   /* SET MEMBER NAME INMSG*/
         MVC   MEMBER(8),COMMEM                                    0392
*          RNVT=R2SAVE;                     /* SET THE NVT PTR      */
         L     RNVT,R2SAVE                                         0393
* GEN REFS(NVTWTO) ( IEAPMNIP TYPE=WTO,PARAM=COMERR );/* WTO        */
          IEAPMNIP TYPE=WTO,PARAM=COMERR
*          CMDBAD=ONEBIT;              /* NO MORE ERR MSG.          */
         OI    CMDBAD,B'01000000'                                  0395
*        END;                                                      0396
*      ELSE;                                     /*   NULL ELSE     */
@RF00389 DS    0H                                                  0398
*ELSE                                       /* NOT TOD OR COM       */
*  IF CMDBAD^=ONEBIT THEN                   /* WAS MSG SENT BEFORE  */
         B     @RC00384                                            0398
@RF00384 TM    CMDBAD,B'01000000'                                  0398
         BO    @RF00398                                            0398
*    DO;                                    /* SET UP TO SEND WTO   */
*      ERRCMD=COMREC (1:16);                /* SAMPLE OF BAD CMD    */
         MVC   ERRCMD(16),COMREC(RECADDR)                          0400
*      MEMBER=COMMEM;                       /* MEMBER IN MESSG.*/  0401
         MVC   MEMBER(8),COMMEM                                    0401
*       RNVT=R2SAVE;                        /* SET THE NVT PTR      */
         L     RNVT,R2SAVE                                         0402
*       GEN REFS(NVTWTO) ( IEAPMNIP TYPE=WTO,PARAM=COMERR );       0403
          IEAPMNIP TYPE=WTO,PARAM=COMERR
*      CMDBAD=ONEBIT;                          /* NO MORE ERR MSG.. */
         OI    CMDBAD,B'01000000'                                  0404
*    END;                                                          0405
*  ELSE;                                         /*    NULL  ELSE   */
@RF00398 DS    0H                                                  0407
*END TODRECD;                                                      0407
@EL00004 DS    0H                                                  0407
@EF00004 DS    0H                                                  0407
@ER00004 LM    @14,@12,@SA00004                                    0407
         BR    @14                                                 0407
*/*                                                                 */
*/*      THE FUNCTION OF THE COMRECD RTN IS TO PROCESS THE   @YM03617*/
*/*      PARMLIB MEMBER SPECIFIED BY THE OPERATOR, OR THE    @YM03617*/
*/*      DEFAULT MEMBER, COMMAND00.                          @YM03617*/
*/*      ON ENTRY TO THIS ROUTINE, COM=' HAS BEEN VERIFIED.  @YM03617*/
*/*      THE RECORD CONSISTS OF A PORTION OF THE ORIGINAL    @YM03617*/
*/*      80 CHARACTER BUFFER, STARTING WITH COM=' AND        @YM03617*/
*/*      ENDING WITH X'FF'. THE LENGTH OF THE RECORD         @YM03617*/
*/*      VARIES DEPENDING ON WHERE THE COM= STARTED IN       @YM03617*/
*/*      THE ORIGINAL BUFFER.                                @YM03617*/
*/*      THE COMMAND IS SYNTAX CHECKED ONLY TO VERIFY        @YM03617*/
*/*      THAT IT IS ENCLOSED IN QUOTES AND THAT NO NON-      @YM03617*/
*/*      BLANKS ARE OUTSIDE THE QUOTES. THE COMMAND MAY      @YM03617*/
*/*      CONTAIN EMBEDDED QUOTES, AS LONG AS THE FINAL       @YM03617*/
*/*      QUOTE IS VALID.                                     @YM03617*/
*/*      IF THE COMMAND IS GOOD, A QUEUE OF COMMAND          @YM03617*/
*/*      RECORDS IS BUILT FOR THE MASTER SCHEDULER INITIAL-  @YM03617*/
*/*      IZATION RTN TO PROCESS. A POINTER TO THE QUEUE IS   @YM03617*/
*/*      IN THE M/S RES. DATA AREA. AT EOF TIME  EOFRTN  WILL       */
*/*      TEST TO SEE IF ANY MORE MEMBERS ARE TO BE READ, IF SO      */
*/*      THE PROCESSING WILL BE THE SAME...                         */
*/*      INPUT..   1 THE RECORD READ IN FROM PARMLIB                */
*/*                2 MSCOMMND  (PTR TO CMDD. QUE )                  */
*/*                3 COMMEM  ( MEMBER NAME ) IF SYTAX ERROR         */
*/*                4 CURRELEM  ( PTR TO THE LAST ELEMENT IN THE QUE*/
*/*      OUTPUT... 1 THE QUEUE OF SYSTEM COMMANDS                   */
*/*                2 CURRELEM UPDATED TO THE NEW ELEMENT            */
*/*                3 IF GETMAIN FAILED THEN IT SETS THE BIT         */
*/*                  TO GET OUT OF DO WHILE IN MAIN ROUNTINE        */
*COMRECD:                                                          0408
*PROC;                                                             0408
COMRECD  STM   @14,@12,@SA00005                                    0408
*DO CTR = 1 TO 73 WHILE              /* SCAN FOR END OF BUFF @YM03617*/
*  COMREC (CTR) ^= FOXFOX;           /* ORIGINAL 80 CHAR REC @YM03617*/
         LA    CTR,1                                               0409
@DL00409 LR    @10,RECADDR                                         0409
         ALR   @10,CTR                                             0409
         AL    @10,@CF02170                                        0409
         CLI   COMREC(@10),X'FF'                                   0409
         BE    @DC00409                                            0409
*END;                                /* HAS 'FF' IN COL 73   @YM03617*/
         AL    CTR,@CF00037                                        0410
         CL    CTR,@CF02169                                        0410
         BNH   @DL00409                                            0410
@DC00409 DS    0H                                                  0411
*CTR = CTR-1;                        /* GET CHAR BEFORE FF   @YM03617*/
         BCTR  CTR,0                                               0411
*DO CTR TO 6 BY -1 WHILE             /* SCAN BACKWARDS TO    @YM03617*/
*  COMREC (CTR) = BLANK;             /* FIND FIRST NON-BLANK @YM03617*/
         B     @DE00412                                            0412
@DL00412 LR    @10,RECADDR                                         0412
         ALR   @10,CTR                                             0412
         AL    @10,@CF02170                                        0412
         CLI   COMREC(@10),C' '                                    0412
         BNE   @DC00412                                            0412
*END;                                /* TEST FOR ERROR:      @YM03617*/
         BCTR  CTR,0                                               0413
@DE00412 CL    CTR,@CF00480                                        0413
         BNL   @DL00412                                            0413
@DC00412 DS    0H                                                  0414
* IF CTR <= 6  ×                     /* NON-BLANKS OUTSIDE   @YM03617*/
* COMREC (CTR) ^= QUOTE THEN         /* THE QUOTES, MISSING  @YM03617*/
         CL    CTR,@CF00480                                        0414
         BNH   @RT00414                                            0414
         LR    @10,RECADDR                                         0414
         ALR   @10,CTR                                             0414
         AL    @10,@CF02170                                        0414
         CLI   COMREC(@10),C''''                                   0414
         BE    @RF00414                                            0414
@RT00414 DS    0H                                                  0415
*                                    /* END QUOTE, OR A NULL @YM03617*/
*                                    /* COMMAND(IE.COM=''),  @YM03617*/
*                                    /* WILL CAUSE AN ERROR. @YM03617*/
*   IF CMDBAD=ZEROBIT THEN              /* ONE ERROR MSG PER MEMBER  */
         TM    CMDBAD,B'01000000'                                  0415
         BNZ   @RF00415                                            0415
*    DO;                               /* IF SO SET UP TO DO WTO    */
*      ERRCMD=COMREC (1:16);           /* GIVE A SAMPLE COMMAND     */
         MVC   ERRCMD(16),COMREC(RECADDR)                          0417
*      MEMBER=COMMEM;                       /* SET MEMBER NAME IN   */
         MVC   MEMBER(8),COMMEM                                    0418
*      RNVT=R2SAVE;                         /* SET THE NVT PTR      */
         L     RNVT,R2SAVE                                         0419
*   GEN REFS(NVTWTO) ( IEAPMNIP TYPE=WTO,PARAM=COMERR );           0420
          IEAPMNIP TYPE=WTO,PARAM=COMERR
*      CMDBAD=ONEBIT;                  /* NO MORE ERR MSG..         */
         OI    CMDBAD,B'01000000'                                  0421
*    END;                                                          0422
*   ELSE;                                             /*  NULL ELSE  */
@RF00415 DS    0H                                                  0424
* ELSE                                  /*  BEGIN PROCESSING THE CMD */
*  DO;                                 /* START SETTING FOR A GETMAN*/
         B     @RC00414                                            0424
@RF00414 DS    0H                                                  0425
*    LGTHSAVE=CTR-5;                  /* SAVE THE LENGTH + 1 @YM03617*/
         LR    @10,CTR                                             0425
         SL    @10,@CF00144                                        0425
         STH   @10,LGTHSAVE                                        0425
*    GPR6=ADDR(CMDADDR);               /* ADDRESS FOR GETMAIN       */
         LA    GPR6,CMDADDR                                        0426
*    RLENGTH=LGTHSAVE+8;               /* THE LENGTH OF THE QUE ELEM*/
         AH    @10,@CH00132                                        0427
         LR    RLENGTH,@10                                         0427
*    GEN( GETMAIN EC,LV=(0),A=(6),SP=245 );                        0428
          GETMAIN EC,LV=(0),A=(6),SP=245
*    IF RETCODE=ZERO THEN                   /* GET MAIN  OK         */
         L     @10,ZERO                                            0429
         CLR   RETCODE,@10                                         0429
         BNE   @RF00429                                            0429
*      IF MSCOMMND=ZERO THEN                /* TEST FOR ELEM IN QUE */
         L     @09,CVTPTR                                          0430
         L     @09,CVTMSER(,@09)                                   0430
         C     @10,MSCOMMND(,@09)                                  0430
         BNE   @RF00430                                            0430
*        DO;                                /* SET UP FOR 1ST ELEM. */
*          CURRELEM=CMDADDR;                /* SAVE CURR ELEM ADDR  */
         L     @08,CMDADDR                                         0432
         ST    @08,CURRELEM                                        0432
*          MSCOMMND=CMDADDR;           /* PTR TO 1ST ELEMENT IN QUE */
         ST    @08,MSCOMMND(,@09)                                  0433
*          RFY CMDELEM BASED(MSCOMMND);     /* DSECT FOR QUE ELEM   */
*          FWDPTR=ZERO;                     /* FORWARD PTR = ZERO   */
         ST    @10,FWDPTR(,@08)                                    0435
*          CMDLGTH=LGTHSAVE+4;              /* LENGTH OF CMD + 4    */
         LA    @10,4                                               0436
         AH    @10,LGTHSAVE                                        0436
         STH   @10,CMDLGTH(,@08)                                   0436
*          COMREC (CTR)=BLANK;         /* LAST POS =BLANK FOR SVC34 */
         LR    @10,RECADDR                                         0437
         ALR   @10,CTR                                             0437
         AL    @10,@CF02170                                        0437
         MVI   COMREC(@10),C' '                                    0437
*          THECMD (1:CTR-5)=COMREC (6:CTR);  /* MOVE CMD INTO ELEM  */
         LR    @10,CTR                                             0438
         SL    @10,@CF00480                                        0438
         EX    @10,@SM02274                                        0438
*        END;                                                      0439
*      ELSE                            /* QUE IS THERE SO ADD AN ELE*/
*        DO;                           /* ELEM TO THE EXISTING QUE  */
         B     @RC00430                                            0440
@RF00430 DS    0H                                                  0441
*          RFY CMDELEM BASED(CURRELEM);     /*    BASE TO SET FWD   */
*          FWDPTR=CMDADDR;                  /*SET FWD PTR TO NEW ELE*/
         L     @10,CMDADDR                                         0442
         L     @09,CURRELEM                                        0442
         ST    @10,FWDPTR(,@09)                                    0442
*          CURRELEM=CMDADDR;                /* PTR TO NEW ELEM      */
         ST    @10,CURRELEM                                        0443
*          FWDPTR=ZERO;                /* SET ADDED ELEM PTR TO ZERO*/
         MVC   FWDPTR(4,@10),ZERO                                  0444
*          CMDLGTH=LGTHSAVE+4;              /*    CMD LGTH + 4      */
         LA    @09,4                                               0445
         AH    @09,LGTHSAVE                                        0445
         STH   @09,CMDLGTH(,@10)                                   0445
*          COMREC (CTR)=BLANK;              /* LAST POS EQ BLANK    */
         LR    @09,RECADDR                                         0446
         ALR   @09,CTR                                             0446
         AL    @09,@CF02170                                        0446
         MVI   COMREC(@09),C' '                                    0446
*          THECMD(1:CTR-5)=COMREC (6:CTR);  /* MOVE IN THE CMD      */
         LR    @09,CTR                                             0447
         SL    @09,@CF00480                                        0447
         EX    @09,@SM02276                                        0447
*        END;                                                      0448
*    ELSE                              /* THE GETMAIN FAILED FOR    */
*      DO;                             /* THE COMMAND ELEMENT       */
         B     @RC00429                                            0449
@RF00429 DS    0H                                                  0450
*        ALLDONE=YES;                  /* SET TO GET OUT OF THEDO   */
         OI    ALLDONE,B'10000000'                                 0450
*        ERRCMMD=COMREC (1:20);        /* MOVE IN CMD FOR OPR. REF. */
         MVC   ERRCMMD(20),COMREC(RECADDR)                         0451
*        MEM=COMMEM;                   /* GIVE THE MEMBER NAME      */
         MVC   MEM(8),COMMEM                                       0452
*        RNVT=R2SAVE;                       /* SET THE NVT PTR      */
         L     RNVT,R2SAVE                                         0453
*    GEN REFS(NVTWTO) ( IEAPMNIP TYPE=WTO,PARAM=GETERR );          0454
          IEAPMNIP TYPE=WTO,PARAM=GETERR
*        RPARM=ZERO;                             /*  GIVES AN ERR I*/
         L     RPARM,ZERO                                          0455
*      END;                                                        0456
*  END;                                /* END OF THE ELSE DO LOOP   */
*END COMRECD;                                                      0458
@EL00005 DS    0H                                                  0458
@EF00005 DS    0H                                                  0458
@ER00005 LM    @14,@12,@SA00005                                    0458
         BR    @14                                                 0458
*/*                                                                 */
*/*                                                                 */
*/*      IF READ WENT TO EOF THEN IT WILL TEST TO SEE IF MULTIPLE   */
*/*      MEMBERS WERE SPECIFIED ,IF SO IT WILL SET UP TO DO ANOTHER */
*/*      FIND AND READ FOR COMMAND PROCESSING....                   */
*/*      INPUT...1 #MEMBERS TO BE PROCESSED                         */
*/*              2 PTRSAVE TO PARMTAB PARAMETER THE MEMBER          */
*/*                THAT IS TO BE PROCESSED NEXT                     */
*/*                3 THE NUMBER THAT WAS PROCESSED                  */
*/*      OUTPUT..1 RPARM=16 IF ALL PROCESSING IS DONE               */
*/*                2 #PROCESSED UPDATED BY ONE                      */
*/*                3 UPDATED PTRSAVE TO NEXT MEMBER # TO READ       */
*/*                4 SET COMEM TO COMMNDNN TO BE READ               */
*/*                                                                 */
*/*                                                                 */
*EOFRTN:                                                           0459
*PROC OPTIONS(NOSAVE,NOSAVEAREA);                                  0459
EOFRTN   DS    0H                                                  0460
*  #PROCESD=#PROCESD+ONE;              /* TO TELL NUM MEMBERS DONE  */
         LA    @10,1                                               0460
         AH    @10,#PROCESD                                        0460
         STH   @10,#PROCESD                                        0460
*  IF #MEMBERS=#PROCESD THEN           /* WERE ALL MEM PROCESSED    */
         CH    @10,#MEMBERS                                        0461
         BNE   @RF00461                                            0461
*    DO;                               /* CMD PROC IS FINISHED      */
*      ALLDONE=YES;                    /* SET TO GET OUT OF LOOP    */
         OI    ALLDONE,B'10000000'                                 0463
*      RPARM=SIXTEEN;                  /* SO ERRTN KNOWS ALL OK     */
         LA    RPARM,16                                            0464
*    END;                                                          0465
*  ELSE                                /* SET UP TO FIND READ A MEM */
*    DO;                               /* UNTIL ALL MEMS ARE PROCS  */
         B     @RC00461                                            0466
@RF00461 DS    0H                                                  0467
*      RFY CMDPARMS BASED(PTRSAVE);    /* GET NEXT PARM FROM PARMTAB*/
*      COMMEM=COMMND00;                /* MEMBER NAME CONSTANT      */
         MVC   COMMEM(8),@CC01973                                  0468
*      COMNUM  (1:2)=CMDPARMS  (1:2)×UPCASE;     /* GET 1ST CHAR    */
         L     @10,PTRSAVE                                         0469
         MVC   COMNUM(2),CMDPARMS(@10)                             0469
         OC    COMNUM(2),@CC01971                                  0469
*      PTRSAVE=PTRSAVE+3;              /* UPDATE FOR NEXT PARMTAB   */
         AH    @10,@CH00217                                        0470
         ST    @10,PTRSAVE                                         0470
*      CMDBAD=ZEROBIT;                 /* ALLOW ERR MSG FOR THIS MEM*/
         NI    CMDBAD,B'10111111'                                  0471
*    END;                                                          0472
*END EOFRTN;                                                       0473
@EL00006 DS    0H                                                  0473
@EF00006 DS    0H                                                  0473
@ER00006 BR    @14                                                 0473
*/*                                                                 */
*/*                                                                 */
*/*      ERROR ENDING ROUTINE IS USED IF AN I/O ERROR HAS OCCURED   */
*/*      OR IF A CONDITIONAL GETMAIN HAS FAILED . IT FUNCTION IS    */
*/*      TO CLEAR UP ALL CORE THAT WAS GOTTEN BY COMMAND PROCESSING */
*/*      AND TO SET THE TOD BIT TO IT'S DEFAULT NOPROMPT..          */
*ERROREND:                                                         0474
*PROC;                                                             0474
ERROREND STM   @14,@12,@SA00007                                    0474
*MSTODWTO=ONEBIT;                      /* TOD DEFAULT...            */
         L     @10,CVTPTR                                          0475
         L     @10,CVTMSER(,@10)                                   0475
         OI    MSTODWTO(@10),B'01000000'                           0475
*IF MSCOMMND^=ZERO THEN                /* WERE ANY COMMANDS PROCESS */
         CLC   MSCOMMND(4,@10),ZERO                                0476
         BE    @RF00476                                            0476
*  DO;                                 /* IF SO DO FREEMAINS        */
*    RFY CMDELEM BASED(MSCOMMND);      /* BASE FOR ELEMENTS         */
*    DO WHILE FWDPTR^=ZERO;            /* LOOP THROUGH QUE FREEMAIN */
         B     @DE00479                                            0479
@DL00479 DS    0H                                                  0480
*      RLENGTH=(CMDLGTH+4)×SBPOOL;     /* SET R0 TO LGTH +4         */
         L     @10,CVTPTR                                          0480
         L     @10,CVTMSER(,@10)                                   0480
         L     @09,MSCOMMND(,@10)                                  0480
         LA    RLENGTH,4                                           0480
         AH    RLENGTH,CMDLGTH(,@09)                               0480
         O     RLENGTH,@CF01984                                    0480
*      RPARM=MSCOMMND;                 /* REBASE CMD ELEMENT        */
         LR    RPARM,@09                                           0481
*      MSCOMMND=FWDPTR;                /* GO TO NEXT QUE ELEMENT    */
         L     @09,FWDPTR(,@09)                                    0482
         ST    @09,MSCOMMND(,@10)                                  0482
*      GEN( FREEMAIN R,LV=(0),A=(1) );   /* DO FREEMAIN FOR THE ELEM*/
          FREEMAIN R,LV=(0),A=(1)
*    END;                                /* END FREEMAIN DO LOOP    */
@DE00479 L     @10,CVTPTR                                          0484
         L     @10,CVTMSER(,@10)                                   0484
         L     @10,MSCOMMND(,@10)                                  0484
         CLC   FWDPTR(4,@10),ZERO                                  0484
         BNE   @DL00479                                            0484
*    RLENGTH=(CMDLGTH+4)×SBPOOL;       /* SET R0 TO LGTH + SUBPOOL  */
         LA    RLENGTH,4                                           0485
         AH    RLENGTH,CMDLGTH(,@10)                               0485
         O     RLENGTH,@CF01984                                    0485
*    RPARM=MSCOMMND;                   /* SET THE ADDRESS IN R1     */
         LR    RPARM,@10                                           0486
*    GEN( FREEMAIN R,LV=(0),A=(1) );             /* FREEMAIN        */
          FREEMAIN R,LV=(0),A=(1)
*    MSCOMMND=ZERO;                    /* MEANS NO COMMDS. PROCESSED*/
         L     @10,CVTPTR                                          0488
         L     @10,CVTMSER(,@10)                                   0488
         MVC   MSCOMMND(4,@10),ZERO                                0488
*  END;                                                            0489
*ELSE;                                                             0490
@RF00476 DS    0H                                                  0491
*MNAME=COMMEM;                                   /*  SET MEMBER NAME*/
         MVC   MNAME(6),COMMEM                                     0491
*RNVT=R2SAVE;                                    /* SET THE NVT PTR */
         L     RNVT,R2SAVE                                         0492
*    GEN REFS(NVTWTO) ( IEAPMNIP TYPE=WTO,PARAM=NOFUNC );          0493
          IEAPMNIP TYPE=WTO,PARAM=NOFUNC
*END ERROREND;                                                     0494
@EL00007 DS    0H                                                  0494
@EF00007 DS    0H                                                  0494
@ER00007 LM    @14,@12,@SA00007                                    0494
         BR    @14                                                 0494
*/*                                                                 */
*/*  THE TIME ZONE IS THE DIFFERENCE BETWEEN GREENWICH MEAN  @YM07291*/
*/*  TIME (GMT) AND LOCAL TIME, AND IS IN THE FORMAT:        @YM07291*/
*/*  E/W,HH.MM.SS  WHERE MINUTES AND SECONDS ARE OPTIONAL.   @YM07291*/
*/*  THE USER MAY PUT THIS VALUE IN A PARMTZ MEMBER OF       @YM07291*/
*/*  PARMLIB WHICH HE CREATES.                               @YM07291*/
*/*  THE PARMTZ VALUE IS CONVERTED INTO SECONDS AND THEN     @YM07291*/
*/*  DIVIDED BY 1.048576 TO CONVERT IT TO BINARY TIMER UNITS.@YM07291*/
*/*  IF THE VALUE IS NOT GREATER THAN 12 HOURS, IT IS        @YM07291*/
*/*  PLACED IN THE CVTTZ FIELD OF THE CVT. IF NO PARMTZ      @YM07291*/
*/*  MEMBER EXISTS, THE SYSGEN'D VALUE WILL BE USED. IF A    @YM07291*/
*/*  SYNTAX ERROR IS FOUND, OR IF THE TIME ZONE IS GREATER   @YM07291*/
*/*  THAN 12, A MESSAGE WILL BE ISSUED AND THE SYSGEN VALUE  @YM07291*/
*/*  WILL BE USED.                                           @YM07291*/
*/*                                                                 */
*TZRTN:                                                            0495
*PROC;                                                             0495
TZRTN    STM   @14,@12,@SA00008                                    0495
*ALLDONE=NO ;                               /* FOR ENDING TEST OF ER*/
         NI    ALLDONE,B'01111111'                                 0496
*CMPROCES=ZERO;                             /* SET IT TO ZERO       */
         L     @10,ZERO                                            0497
         ST    @10,@TF00001                                        0497
         MVC   CMPROCES(4),@TF00001                                0497
*TOTAL=ZERO;                                /* SET TOTAL TO ZERO    */
         ST    @10,TOTAL                                           0498
*NIPPAFL1=ONEBIT;                           /* STOP THE NO FIND MSG.*/
         L     @10,R2SAVE                                          0499
         L     @09,NVTPTAB(,@10)                                   0499
         OI    NIPPAFL1(@09),B'10000000'                           0499
*NIPPANAM=PARMTZ;                           /* SET MEMBER FOR READ  */
         L     @09,NVTPAREA(,@10)                                  0500
         MVC   NIPPANAM(8,@09),@CC02020                            0500
*RCVT=CVTPTR;                               /* SET THE NVT PTR      */
         L     RCVT,CVTPTR                                         0501
*RNVT=R2SAVE;                               /* SET THE NVT PTR FOR  */
         LR    RNVT,@10                                            0502
*CALL NIPPMMEM;                             /* DO FIND AND READ     */
         BAL   @14,NIPPMMEM                                        0503
*IF RPARM<ZERO THEN                         /* TEST FOR GOOD READ   */
         C     RPARM,ZERO                                          0504
         BNL   @RF00504                                            0504
*  ALLDONE=YES;                             /* ERROR SO ALL FINISHED*/
         OI    ALLDONE,B'10000000'                                 0505
*ELSE                                       /* NO ERROR SO DO PROCES*/
*  DO;                                      /* OF THE TZ RECORD     */
         B     @RC00504                                            0506
@RF00504 DS    0H                                                  0507
*    RFY TZREC BASED(RPARM);                /* BASE THE DSECT TODREC*/
*    IF TZREC (1:2)^=EAST&TZREC (1:2)^=WEST THEN /* TEST FOR E OR W */
         CLC   TZREC(2,RPARM),@CC01986                             0508
         BE    @RF00508                                            0508
         CLC   TZREC(2,RPARM),@CC01988                             0508
         BE    @RF00508                                            0508
*      DO;                                        /* DO IT  */     0509
*        ALLDONE=YES;                       /* HAD AN ERROR SO FINIS*/
         OI    ALLDONE,B'10000000'                                 0510
*        RNVT=R2SAVE;                       /* SET THE NVT PTR      */
         L     RNVT,R2SAVE                                         0511
*        GEN REFS(NVTWTO) ( IEAPMNIP TYPE=WTO,PARAM=BADTZ );       0512
          IEAPMNIP TYPE=WTO,PARAM=BADTZ
*      END;                                                        0513
*    ELSE                                   /* NO ERRORS SO PROCESS */
*      DO CTR=5 TO 14 BY 3                      /* TEST FOR PERIOD */
*        WHILE TZREC (CTR-3)^=BLANK;        /* EVERY 3RD CHAR.      */
         B     @RC00508                                            0514
@RF00508 LA    CTR,5                                               0514
@DL00514 LR    @10,RPARM                                           0514
         ALR   @10,CTR                                             0514
         AL    @10,@CF02278                                        0514
         CLI   TZREC(@10),C' '                                     0514
         BE    @DC00514                                            0514
*        IF TZREC (CTR)^=BLANK& TZREC (CTR)^=PERIOD THEN           0515
         LR    @10,RPARM                                           0515
         ALR   @10,CTR                                             0515
         AL    @10,@CF02170                                        0515
         CLI   TZREC(@10),C' '                                     0515
         BE    @RF00515                                            0515
         LR    @10,RPARM                                           0515
         ALR   @10,CTR                                             0515
         AL    @10,@CF02170                                        0515
         CLI   TZREC(@10),C'.'                                     0515
         BE    @RF00515                                            0515
*          DO;                              /* TEST FOR  BAD DELIMTR*/
*            ALLDONE=YES;                   /* ERROR SO GET OUT     */
         OI    ALLDONE,B'10000000'                                 0517
*            CMPROCES=FIVE;             /* TO STOP CONCERT PROCESS  */
         MVC   CMPROCES(4),@CF00144                                0518
*            CTR=14;                    /* SET CTR TO STOP   @YM01542*/
         LA    CTR,14                                              0519
*            RNVT=R2SAVE;                   /* SET THE NVT PTR      */
         L     RNVT,R2SAVE                                         0520
*            GEN REFS(NVTWTO) ( IEAPMNIP TYPE=WTO,PARAM=BADTZ );   0521
          IEAPMNIP TYPE=WTO,PARAM=BADTZ
*          END;                             /* END THE DO GROUP     */
*        ELSE;                              /* NO ERRORS DO PROCESS */
@RF00515 DS    0H                                                  0524
*          IF CMPROCES=TWO THEN             /* TEST TO DO SECDS     */
         CLC   CMPROCES(4),@CF00196                                0524
         BNE   @RF00524                                            0524
*            DO;                            /* START THE SECDS WORK */
*/* VALIDATE SECONDS (SS). THE VALUE MUST BE 00-59.         @YM01542 */
*            IF SECDS(1:2) >= TIME00 & SECDS(1:2) <= FIVE9 &       0526
*               SECDS(2:2) >= ZEROCHAR & SECDS(2:2) <= NINECHAR THEN
         CLC   SECDS(2,RPARM),@CC01998                             0526
         BL    @RF00526                                            0526
         CLC   SECDS(2,RPARM),@CC02004                             0526
         BH    @RF00526                                            0526
         CLI   SECDS+1(RPARM),C'0'                                 0526
         BL    @RF00526                                            0526
         CLI   SECDS+1(RPARM),C'9'                                 0526
         BH    @RF00526                                            0526
*                DO;                   /* IS IT VALID 00-59 @YM01542 */
*                  PACK (TEMPPACK,SECDS);   /* PACK SECONDS         */
         PACK  TEMPPACK(4),SECDS(2,RPARM)                          0528
*                  CVB (TEMPBIN,TEMPPACK);  /* CONVERT TO BINARY    */
         XC    @TS00001(8),@TS00001                                0529
         MVC   @TS00001+4(4),TEMPPACK                              0529
         CVB   TEMPBIN,@TS00001                                    0529
*                  TOTAL=TOTAL+TEMPBIN;     /* ADD IT TO THE TOTAL  */
         LR    @10,TEMPBIN                                         0530
         AL    @10,TOTAL                                           0530
         ST    @10,TOTAL                                           0530
*                  IF TZREC (CTR)^=BLANK THEN                      0531
         LR    @10,RPARM                                           0531
         ALR   @10,CTR                                             0531
         AL    @10,@CF02170                                        0531
         CLI   TZREC(@10),C' '                                     0531
         BE    @RF00531                                            0531
*                    DO;                    /*ERROR ON THE END      */
*                      RNVT=R2SAVE;         /* SET THE NVT PTR      */
         L     RNVT,R2SAVE                                         0533
*                  GEN REFS(NVTWTO) ( IEAPMNIP TYPE=WTO,PARAM=BADTZ );
          IEAPMNIP TYPE=WTO,PARAM=BADTZ
*                      ALLDONE=YES;         /* NO MORE PROCESSING   */
         OI    ALLDONE,B'10000000'                                 0535
*                      CTR=14;           /* SET CTR TO STOP @YM05557 */
         LA    CTR,14                                              0536
*                    END;                   /* END THIS DO GROUP    */
*                  ELSE;                    /* NULL FOR ^=BLANK     */
@RF00531 DS    0H                                                  0539
*                END;                       /* END SECDS PROCESSING */
*              ELSE                         /* SECDS ARE IN ERROR   */
*                DO;                        /* SO GIVE OPER. MESS.  */
         B     @RC00526                                            0540
@RF00526 DS    0H                                                  0541
*                  ALLDONE=YES;             /* ALL FINISHED PROCESS */
         OI    ALLDONE,B'10000000'                                 0541
*                  GEN REFS(NVTWTO) ( IEAPMNIP TYPE=WTO,PARAM=BADTZ );
          IEAPMNIP TYPE=WTO,PARAM=BADTZ
*                  CTR=14;               /* SET CTR TO STOP @YM05557 */
         LA    CTR,14                                              0543
*                END;                       /* END THE ERROR DO LOOP*/
*            END;                           /* END CMPROCES =2   DO */
*          ELSE;                            /* NULL FOR CMPROCES=2  */
@RF00524 DS    0H                                                  0547
*          IF CMPROCES=ONE THEN             /* TEST FOR MINUT PROCES*/
@RC00524 CLC   CMPROCES(4),@CF00037                                0547
         BNE   @RF00547                                            0547
*            DO;                            /* SO DO MINUTES PROCESS*/
*/* VALIDATE MINUTES (MM). VALUE MUST BE 00-59.             @YM01542 */
*            IF MINUT(1:2) >= TIME00 & MINUT(1:2) <= FIVE9 &       0549
*               MINUT(2:2) >= ZEROCHAR & MINUT(2:2) <= NINECHAR THEN
         CLC   MINUT(2,RPARM),@CC01998                             0549
         BL    @RF00549                                            0549
         CLC   MINUT(2,RPARM),@CC02004                             0549
         BH    @RF00549                                            0549
         CLI   MINUT+1(RPARM),C'0'                                 0549
         BL    @RF00549                                            0549
         CLI   MINUT+1(RPARM),C'9'                                 0549
         BH    @RF00549                                            0549
*                DO;                    /* IS MINUTES 00-59 @YM01542 */
*                  PACK (TEMPPACK,MINUT);   /* PACK THE MINUTES     */
         PACK  TEMPPACK(4),MINUT(2,RPARM)                          0551
*                  CVB (TEMPBIN,TEMPPACK);  /* CONVERT TO BINARY    */
         XC    @TS00001(8),@TS00001                                0552
         MVC   @TS00001+4(4),TEMPPACK                              0552
         CVB   TEMPBIN,@TS00001                                    0552
*                  TEMPBIN=TEMPBIN*SEC60;   /* CVRT. MINUTES TO SEC.*/
         LR    @10,TEMPBIN                                         0553
         MH    @10,@CH02018                                        0553
         LR    TEMPBIN,@10                                         0553
*                  TOTAL=TOTAL+TEMPBIN;     /* SAVE THE TOTAL       */
         LR    @10,TEMPBIN                                         0554
         AL    @10,TOTAL                                           0554
         ST    @10,TOTAL                                           0554
*                  CMPROCES=TWO;            /* NEXT PROCES SECONDS  */
         MVC   CMPROCES(4),@CF00196                                0555
*                END;                       /* END THIS DO LOOP NOW */
*              ELSE                         /* ERROR IN MINUTES     */
*                DO;                        /* SO TELL THE OPERATOR */
         B     @RC00549                                            0557
@RF00549 DS    0H                                                  0558
*                  RNVT=R2SAVE;             /* SET THE NVT PTR      */
         L     RNVT,R2SAVE                                         0558
*                  GEN REFS(NVTWTO) ( IEAPMNIP TYPE=WTO,PARAM=BADTZ );
          IEAPMNIP TYPE=WTO,PARAM=BADTZ
*                  ALLDONE=YES;             /* ALL FINISHED PROCESS */
         OI    ALLDONE,B'10000000'                                 0560
*                  CTR=14;                /* SET CTR TO STOP @YM01542*/
         LA    CTR,14                                              0561
*                END;                       /* END THIS DO GROUP    */
*            END;                           /* END CMPROCES=1  DO   */
*          ELSE;                            /* NULL FOR CMPROCES=1  */
@RF00547 DS    0H                                                  0565
*          IF CMPROCES=ZERO THEN            /* TEST FOR HOURS PROCES*/
@RC00547 CLC   CMPROCES(4),ZERO                                    0565
         BNE   @RF00565                                            0565
*/* VALIDATE HOURS (HH). VALUE MUST BE 00-12.                @YM01542*/
*            IF HOURS(1:2) >= TIME00 & HOURS(1:2) <= ONE2 &        0566
*               HOURS(2:2) >= ZEROCHAR & HOURS(2:2) <= NINECHAR THEN
         CLC   HOURS(2,RPARM),@CC01998                             0566
         BL    @RF00566                                            0566
         CLC   HOURS(2,RPARM),@CC02002                             0566
         BH    @RF00566                                            0566
         CLI   HOURS+1(RPARM),C'0'                                 0566
         BL    @RF00566                                            0566
         CLI   HOURS+1(RPARM),C'9'                                 0566
         BH    @RF00566                                            0566
*              DO;                    /* ARE THE HOURS 00-12 @YM01542*/
*                PACK (TEMPPACK,HOURS);     /* SO PACK THE HOURS    */
         PACK  TEMPPACK(4),HOURS(2,RPARM)                          0568
*                CVB (TEMPBIN,TEMPPACK);    /* CONVERT TO BINARY    */
         XC    @TS00001(8),@TS00001                                0569
         MVC   @TS00001+4(4),TEMPPACK                              0569
         CVB   TEMPBIN,@TS00001                                    0569
*                TEMPBIN=TEMPBIN*SEC3600;   /* CHANGE HOURS TO SECS */
         LR    @10,TEMPBIN                                         0570
         MH    @10,@CH02016                                        0570
         LR    TEMPBIN,@10                                         0570
*                TOTAL=TEMPBIN;             /* PUT IT IN TOTAL SECS.*/
         ST    TEMPBIN,TOTAL                                       0571
*                CMPROCES=ONE;              /* FOR MINUTE PROCESSING*/
         MVC   CMPROCES(4),@CF00037                                0572
*              END;                         /* END THIS DO GROUP    */
*            ELSE                           /* HOURS ARE IN ERROR   */
*              DO;                          /* SO WTO AN ERR MESSAGE*/
         B     @RC00566                                            0574
@RF00566 DS    0H                                                  0575
*                RNVT=R2SAVE;               /* SET THE NVT PTR      */
         L     RNVT,R2SAVE                                         0575
*                GEN REFS(NVTWTO) ( IEAPMNIP TYPE=WTO,PARAM=BADTZ );
          IEAPMNIP TYPE=WTO,PARAM=BADTZ
*                CTR=14;                  /* SET CTR TO STOP @YM01542*/
         LA    CTR,14                                              0577
*                ALLDONE=YES;               /* ALL FINISHED         */
         OI    ALLDONE,B'10000000'                                 0578
*              END;                         /* END THIS DO GROUP    */
*          ELSE;                            /* NULL FOR CMPROCES=00 */
@RF00565 DS    0H                                                  0581
*    END;                                   /* DO WHILE +CTRENDING  */
@RC00565 AL    CTR,@CF00217                                        0581
         CL    CTR,@CF00713                                        0581
         BNH   @DL00514                                            0581
@DC00514 DS    0H                                                  0582
*  END;                                     /* END RPARM <00 DO GROU*/
@RC00508 DS    0H                                                  0583
*IF ALLDONE= NO THEN                        /* IF ERROR THEN DO WTO */
@RC00504 TM    ALLDONE,B'10000000'                                 0583
         BNZ   @RF00583                                            0583
*  DO;                                      /* THAT TZ REC BAD      */
*    TOTAL=TOTAL*MULTCON;                   /* MULTIPLY BY THE CON  */
         L     @10,TOTAL                                           0585
         MH    @10,@CH02010                                        0585
         ST    @10,TOTAL                                           0585
*    TOTAL=TOTAL/DIVCON;                    /* DIVDE BY COSTANT     */
         LR    @04,@10                                             0586
         SRDA  @04,32                                              0586
         D     @04,@CF02012                                        0586
         ST    @05,TOTAL                                           0586
*    IF TOTAL>HOUR12 THEN                 /*TEST FOR OVER 12 HOURS  */
         C     @05,@CF02014                                        0587
         BNH   @RF00587                                            0587
*      DO;                                                         0588
*        RNVT=R2SAVE;                       /* SET THE NVT PTR      */
         L     RNVT,R2SAVE                                         0589
*        GEN REFS(NVTWTO) ( IEAPMNIP TYPE=WTO,PARAM=BADTZ );       0590
          IEAPMNIP TYPE=WTO,PARAM=BADTZ
*      END;                                                        0591
*    ELSE                                   /* PROCESS NORMAL       */
*    IF TZREC (1:2)=WEST THEN               /* TO SEE IF NEGATE IS  */
         B     @RC00587                                            0592
@RF00587 CLC   TZREC(2,RPARM),@CC01988                             0592
         BNE   @RF00592                                            0592
*      DO;                                  /* NESSECARY            */
*        CTR=TOTAL;                         /* SET INTO REG TO NEGAT*/
         L     CTR,TOTAL                                           0594
*        GEN( LNR   CTR,CTR );              /* BAL INST TO NEGATE   */
          LNR   CTR,CTR
*        CVTTZ=CTR;                         /* SET INTO THE CVT     */
         L     @10,CVTPTR                                          0596
         ST    CTR,CVTTZ(,@10)                                     0596
*      END;                                 /* END THIS DO LOOP NOW */
*    ELSE                                   /* JUST SET INTO THE CVT*/
*      CVTTZ=TOTAL;                         /* AND GO DO THAT CVT   */
         B     @RC00592                                            0598
@RF00592 L     @10,CVTPTR                                          0598
         MVC   CVTTZ(4,@10),TOTAL                                  0598
*  END;                                                            0599
*END TZRTN;                                                        0600
@EL00008 DS    0H                                                  0600
@EF00008 DS    0H                                                  0600
@ER00008 LM    @14,@12,@SA00008                                    0600
         BR    @14                                                 0600
*/******************************************************************
*       LOG PARAMETERS PROCESSING                                  0601
*    INPUT..                                                       0601
*        1. PARMTAB CONTAINING LOGCLS,LOGLMT PARM. POINTERS        0601
*        2. REGS 2,3,14   CONTAIN NVT POINTER,CVT POINTER,RETURN ADDR
*    OUTPUT..                                                      0601
*        1. MSLOGCLS (BASEA) WILL HAVE THE OUTPUT CLASS IN IT OR   0601
*           THE DEFAULT WHICH IS A BLANK IN THAT FIELD.            0601
*        2. MSLOGLMT (BASEA) WILL HAVE A 3 BYTE BINARY NUMBER      0601
*           WHICH IS THE NUMBER OF WTL'S ALLOWED TO LOG DATASET OR 0601
*           THE SYSTEM DEFAULT BLANKS IN THAT FIELD..              0601
*********************************************************************/
*LOGRTN:                                                           0601
*PROC OPTIONS(NOSAVE,NOSAVEAREA);                                  0601
LOGRTN   DS    0H                                                  0602
*/*                                                                  */
*DCL     ERRLIMIT  CHAR(8)       INIT('LOGLMT'); /* FOR ERROR MSG.   */
*DCL     ERRCLASS  CHAR(8)       INIT('LOGCLS'); /* FOR ERROR MSG.   */
*DCL     SAVE14    PTR(31);                      /* SAVE RETURN ADDR.*/
*DCL     PACKAREA  CHAR(6);                /* TEMPERARY PACK AREA   */
*DCL     LOGCLASS  CHAR(4)   BASED;        /* CLASS PARM IN PARMTAB  */
*DCL     LOGLIMIT  CHAR(9)   BASED;  /* LIMIT PARM IN PARMTAB        */
*/*                                                                  */
*RFY LOGCLASS BASED(LOGCLS);                                       0608
*RFY LOGLIMIT BASED(LOGLMT);                                       0609
*ALLDONE=NO;                         /* SET FOR THE DO WHILE LOOP    */
         NI    ALLDONE,B'01111111'                                 0610
*SAVE14=REXIT;                       /* SAVE THE RETURN ADDR         */
         ST    REXIT,SAVE14                                        0611
*DO WHILE ALLDONE=NO;                /* STAY IN LOOP UNTIL ALLDONE   */
         B     @DE00612                                            0612
@DL00612 DS    0H                                                  0613
*  IF LOGCLS^=ZERO THEN              /* IF PTR IS ZERO ( NO PARMS)   */
         L     @10,R2SAVE                                          0613
         L     @10,NVTPTAB(,@10)                                   0613
         L     @10,LOGCLS(,@10)                                    0613
         C     @10,ZERO                                            0613
         BE    @RF00613                                            0613
*      DO;                           /* NOT ZERO PROCESS PARMS       */
*/*                                                          @YM03617*/
*/*  THE FOLLOWING STATEMENT VERFIES THAT THE PARM LOGCLS    @YM03617*/
*/*  IS IN THE FORM OF (CLASS)' AND THAT IT IS BETWEEN       @YM03617*/
*/*  A - Z AND 0 - 9.                                        @YM03617*/
*/*                                                          @YM03617*/
*    IF LOGCLASS (1)=LPARAN & LOGCLASS(3)=RPARAN &                 0615
*      LOGCLASS(4)=QUOTE &                                         0615
*      (LOGCLASS(2) × '40'X) >= CHARA  &                           0615
*      (LOGCLASS(2) × '40'X) <= NINECHAR THEN                      0615
         CLI   LOGCLASS(@10),C'('                                  0615
         BNE   @RF00615                                            0615
         CLI   LOGCLASS+2(@10),C')'                                0615
         BNE   @RF00615                                            0615
         CLI   LOGCLASS+3(@10),C''''                               0615
         BNE   @RF00615                                            0615
         MVC   @TS00001(1),LOGCLASS+1(@10)                         0615
         OI    @TS00001,X'40'                                      0615
         CLI   @TS00001,C'A'                                       0615
         BL    @RF00615                                            0615
         MVC   @TS00001(1),LOGCLASS+1(@10)                         0615
         OI    @TS00001,X'40'                                      0615
         CLI   @TS00001,C'9'                                       0615
         BH    @RF00615                                            0615
*      DO;                                                 /*@YM03617*/
*        MSLOGCLS=LOGCLASS(2)×'40'X; /* IF SO SET THE CLASS IN BASEA */
         L     @09,CVTPTR                                          0617
         L     @09,CVTMSER(,@09)                                   0617
         MVC   MSLOGCLS(1,@09),LOGCLASS+1(@10)                     0617
         OI    MSLOGCLS(@09),X'40'                                 0617
*        ALLDONE=YES;                /* SET TO GET OUT OF DO WHILE   */
         OI    ALLDONE,B'10000000'                                 0618
*      END;                          /* END OF THE LOGCLS DO GROUP   */
*    ELSE                            /* IT IS NOT IN PARANS TEST IT  */
*/*                                                          @YM03617*/
*/*  THE FOLLOWING STATEMENT VERIFIES THAT THE PARM LOGCLS   @YM03617*/
*/*  IS BETWEEN A - Z AND 0 - 9, AND IS FOLLOWED BY A QUOTE. @YM03617*/
*/*                                                          @YM03617*/
*      IF  (LOGCLASS(1) × '40'X) >= CHARA  &                       0620
*        (LOGCLASS(1) × '40'X) <= NINECHAR  &                      0620
*        LOGCLASS(2)=QUOTE THEN                                    0620
         B     @RC00615                                            0620
@RF00615 L     @10,R2SAVE                                          0620
         L     @10,NVTPTAB(,@10)                                   0620
         L     @10,LOGCLS(,@10)                                    0620
         MVC   @TS00001(1),LOGCLASS(@10)                           0620
         OI    @TS00001,X'40'                                      0620
         CLI   @TS00001,C'A'                                       0620
         BL    @RF00620                                            0620
         MVC   @TS00001(1),LOGCLASS(@10)                           0620
         OI    @TS00001,X'40'                                      0620
         CLI   @TS00001,C'9'                                       0620
         BH    @RF00620                                            0620
         CLI   LOGCLASS+1(@10),C''''                               0620
         BNE   @RF00620                                            0620
*        DO;                                               /*@YM03617*/
*          MSLOGCLS=LOGCLASS(1)×'40'X;  /* SET CLASS IN BASEA        */
         L     @09,CVTPTR                                          0622
         L     @09,CVTMSER(,@09)                                   0622
         MVC   MSLOGCLS(1,@09),LOGCLASS(@10)                       0622
         OI    MSLOGCLS(@09),X'40'                                 0622
*          ALLDONE=YES;              /* SET TO GET OUT OF DO WHILE   */
         OI    ALLDONE,B'10000000'                                 0623
*        END;                        /* END OF THIS DO GROUP         */
*      ELSE;                         /* NULL ELSE FOR THIS IF STMT   */
@RF00620 DS    0H                                                  0626
*    IF ALLDONE=NO THEN              /* IF TRUE IT IS AN ERROR PARM  */
@RC00615 TM    ALLDONE,B'10000000'                                 0626
         BNZ   @RF00626                                            0626
*      DO;                           /* SO SET UP TO PROMPT OPERATOR */
*        GEN ( IEAPMNIP TYPE=PRMPT,PARAM=ERRCLASS,OPT=ERROR );     0628
          IEAPMNIP TYPE=PRMPT,PARAM=ERRCLASS,OPT=ERROR
*      END;                          /* MACRO TO PROMPT OPERATOR     */
*    ELSE;                           /* NULL ELSE FOR THIS IF STMT   */
@RF00626 DS    0H                                                  0631
*   END;                             /* END OF THE PTR^=00 IF STMT   */
*   ELSE                  /*   IF PTR=ZERO  THEN PROCESS DEFAULT     */
*     DO;                            /* BLANK IN BASEA FIELD         */
         B     @RC00613                                            0632
@RF00613 DS    0H                                                  0633
*       MSLOGCLS=BLANK;              /* THIS IS THE DEFAULT TO CLASS */
         L     @10,CVTPTR                                          0633
         L     @10,CVTMSER(,@10)                                   0633
         MVI   MSLOGCLS(@10),C' '                                  0633
*       ALLDONE=YES;                 /* SET TO GET OUT OF DO WHILE   */
         OI    ALLDONE,B'10000000'                                 0634
*     END;                           /* END OF THIS DO GROUP         */
*END;               /*  END OF DO WHILE  ALLDONE=NO                  */
@RC00613 DS    0H                                                  0636
@DE00612 TM    ALLDONE,B'10000000'                                 0636
         BZ    @DL00612                                            0636
*ALLDONE=NO;                         /* SET FOR THE DO WHILE LOOP    */
         NI    ALLDONE,B'01111111'                                 0637
*RFY LOGLIMIT BASED(PTRSAVE);                                      0638
*DO WHILE ALLDONE=NO;                /* DO UNTIL ALL FINISHED PROCSS */
         B     @DE00639                                            0639
@DL00639 DS    0H                                                  0640
*  RPARM=ZERO;                       /* REG 1 = ZERO FOR CONTROL     */
         L     @10,ZERO                                            0640
         LR    RPARM,@10                                           0640
*  PTRSAVE=LOGLMT;                   /* SAVE THE PTR FOR THE PARMS   */
         L     @09,R2SAVE                                          0641
         L     @09,NVTPTAB(,@09)                                   0641
         L     @09,LOGLMT(,@09)                                    0641
         ST    @09,PTRSAVE                                         0641
*  IF LOGLMT^=ZERO THEN              /* ZERO MEANS A PARM IS THERE   */
         CR    @09,@10                                             0642
         BE    @RF00642                                            0642
*       DO;                          /* SO PROCESS IT FOR GOOD SYNTAX*/
*    IF LOGLIMIT (1)=LPARAN & LOGLIMIT (8)=RPARAN &                0644
*      LOGLIMIT (9)=QUOTE THEN       /* TEST IF PARM IS IN PARANS    */
         CLI   LOGLIMIT(@09),C'('                                  0644
         BNE   @RF00644                                            0644
         CLI   LOGLIMIT+7(@09),C')'                                0644
         BNE   @RF00644                                            0644
         CLI   LOGLIMIT+8(@09),C''''                               0644
         BNE   @RF00644                                            0644
*      PTRSAVE=PTRSAVE+1;            /* IF SO POINT TO 1ST PARM CHAR */
         AH    @09,@CH00037                                        0645
         ST    @09,PTRSAVE                                         0645
*    ELSE                            /* NOT IN PARANS SO TEST SYNTAX */
*      IF LOGLIMIT (7)^=QUOTE THEN   /* QUOTE MUST BE IN POS. SEVEN  */
         B     @RC00644                                            0646
@RF00644 L     @10,PTRSAVE                                         0646
         CLI   LOGLIMIT+6(@10),C''''                               0646
         BE    @RF00646                                            0646
*        RPARM=ADDR(ERRLIMIT);       /* IF NOT SET ERROR CONDITION   */
         LA    RPARM,ERRLIMIT                                      0647
*      ELSE;                         /* NULL ELSE FOR THIS IF STMT   */
@RF00646 DS    0H                                                  0649
*    IF RPARM^=ZERO THEN             /* IF OK R1 MUST BE = TO ZERO   */
@RC00644 C     RPARM,ZERO                                          0649
         BE    @RF00649                                            0649
*      DO;                           /* IT WAS AN ERROR SO PROMPT    */
*        GEN ( IEAPMNIP TYPE=PRMPT,PARAM=ERRLIMIT,OPT=ERROR );     0651
          IEAPMNIP TYPE=PRMPT,PARAM=ERRLIMIT,OPT=ERROR
*        RPARM=ONE;                  /* PASS ERROR CODE TO NEXT IF   */
         LA    RPARM,1                                             0652
*      END;                          /* END THIS DO GROUP            */
*    ELSE                            /* NOT IN ERROR SO SCAN EACH    */
*      DO CTR=1 TO 6;                /* CHAR FOR A NUMERIC VALUE     */
         B     @RC00649                                            0654
@RF00649 LA    CTR,1                                               0654
@DL00654 DS    0H                                                  0655
*/*                                                          @YM03617*/
*/*  THE FOLLOWING STATEMENT VERFIES THAT EACH OF THE 6      @YM03617*/
*/*  DIGITS SPECIFIED FOR LOGLMT IS NUMERIC.                 @YM03617*/
*/*                                                          @YM03617*/
*        IF LOGLIMIT(CTR) < ZEROCHAR ×                             0655
*           LOGLIMIT(CTR) > NINECHAR THEN                          0655
         L     @10,PTRSAVE                                         0655
         LR    @05,@10                                             0655
         ALR   @05,CTR                                             0655
         AL    @05,@CF02170                                        0655
         CLI   LOGLIMIT(@05),C'0'                                  0655
         BL    @RT00655                                            0655
         ALR   @10,CTR                                             0655
         AL    @10,@CF02170                                        0655
         CLI   LOGLIMIT(@10),C'9'                                  0655
         BNH   @RF00655                                            0655
@RT00655 DS    0H                                                  0656
*          DO;                       /* TEST FOR CHAR 0 - 9  @YM03617*/
*            CTR=6;                  /* ERROR SO SET CTR TO GET OUT  */
         LA    CTR,6                                               0657
*            GEN ( IEAPMNIP TYPE=PRMPT,PARAM=ERRLIMIT,OPT=ERROR ); 0658
          IEAPMNIP TYPE=PRMPT,PARAM=ERRLIMIT,OPT=ERROR
*            RPARM=ONE;              /* SET FOR ERROR CONTROL        */
         LA    RPARM,1                                             0659
*          END;                      /* END FOR THIS DO GROUP        */
*        ELSE;                       /*  NULL FOR 0-9  IF STMT       */
@RF00655 DS    0H                                                  0662
*      END;                          /*  END OF CTR   DO  GROUP      */
         AL    CTR,@CF00037                                        0662
         CL    CTR,@CF00480                                        0662
         BNH   @DL00654                                            0662
*    IF RPARM^=ONE THEN              /* IF R1IS NOT =ONE ALL OK      */
@RC00649 CH    RPARM,@CH00037                                      0663
         BE    @RF00663                                            0663
*      DO;                           /* SO >UT PARMS IN BASEA FIELD  */
*        PACKAREA=LOGLIMIT (1:6);    /* SET UP TO DO THE PACK INST   */
         L     @10,PTRSAVE                                         0665
         MVC   PACKAREA(6),LOGLIMIT(@10)                           0665
*        PACK (TEMPPACK,PACKAREA);   /* PACK THE HEX DIGITS FOR CONV */
         PACK  TEMPPACK(4),PACKAREA(6)                             0666
*        CVB (TEMPBIN,TEMPPACK);     /* CONVERT IT TO BINARY NUMBER  */
         XC    @TS00001(8),@TS00001                                0667
         MVC   @TS00001+4(4),TEMPPACK                              0667
         CVB   TEMPBIN,@TS00001                                    0667
*        IF TEMPBIN^=ZERO THEN       /* IF NOT = TO ZERO THEN STORE  */
         C     TEMPBIN,ZERO                                        0668
         BE    @RF00668                                            0668
*          DO;                       /* ALL OK, SO STORE IN BASEA    */
*            MSLOGLMT=TEMPBIN;       /* SO PUT IT THERE IN BASEA     */
         L     @10,CVTPTR                                          0670
         L     @10,CVTMSER(,@10)                                   0670
         ST    TEMPBIN,@TF00001                                    0670
         MVC   MSLOGLMT(3,@10),@TF00001+1                          0670
*            ALLDONE=YES;            /* SET ALL FINISHED TO GET OUT  */
         OI    ALLDONE,B'10000000'                                 0671
*          END;                      /* END OF THIS DO GROUP         */
*        ELSE                        /* IT WAS ZERO SO SET THE DEFALT*/
*          DO;                                                     0673
         B     @RC00668                                            0673
@RF00668 DS    0H                                                  0674
*            MSLOGLMT ='404040'X;    /* SET BASEA = TO BLANKS        */
         L     @10,CVTPTR                                          0674
         L     @10,CVTMSER(,@10)                                   0674
         MVC   MSLOGLMT(3,@10),@CF02201+1                          0674
*            ALLDONE=YES;            /* ALL FINISHED TO GET OUT OF DO*/
         OI    ALLDONE,B'10000000'                                 0675
*          END;                      /* END OF THIS CURRENT DO GROUP */
*      END;                          /* END OF IF R1^=ONE DO GROUP   */
*    ELSE;                           /* NULL ELSE FOR THE ABOVE IF   */
@RF00663 DS    0H                                                  0679
*   END;                             /* END OF IF LOGLMT^=ZERO IF ST.*/
*  ELSE                              /* NO PARMS SO GIVE THE DEFAULT */
*    DO;                                                           0680
         B     @RC00642                                            0680
@RF00642 DS    0H                                                  0681
*      MSLOGLMT ='404040'X;          /* SET BASEA FIELD TO BLANKS    */
         L     @10,CVTPTR                                          0681
         L     @10,CVTMSER(,@10)                                   0681
         MVC   MSLOGLMT(3,@10),@CF02201+1                          0681
*      ALLDONE=YES;                  /* SET TO GET OUT OF DO WHILE   */
         OI    ALLDONE,B'10000000'                                 0682
*    END;                            /* END OF THIS DO GROUP         */
*END;                                /*  END OF THE DO WHOLE         */
@RC00642 DS    0H                                                  0684
@DE00639 TM    ALLDONE,B'10000000'                                 0684
         BZ    @DL00639                                            0684
*REXIT=SAVE14;                       /* PUT RETURN ADDR IN R14       */
         L     REXIT,SAVE14                                        0685
*END LOGRTN;                         /* END OF THIS LOG PROCEDURE    */
*                                                                  0686
@EL00009 DS    0H                                                  0686
@EF00009 DS    0H                                                  0686
@ER00009 BR    @14                                                 0686
*        GEN REFS(NVTSENSE);                                       0687
*/********************************************************************/
*/*                                                                  */
*/* MACRO-      IEAPSPIO                                             */
*/*                                                                  */
*/* STATUS-     VERSION DATE=10/24/73, VS/2 RELEASE 2                */
*/*                                                                  */
*/* FUNCTION-   IEAPSPIO IS PART OF THE  SUPERVISOR                  */
*/*             INITIALIZATION PROCESS FOR VS2.                      */
*/*                                                                  */
*/*             THIS MACRO GENERATES INLINE PL/S STATEMENTS          */
*/*             WHICH FORM A SUBROUTINE TO FIND AND READ TEXT        */
*/*             RECORDS FROM SYS1.PARMLIB.                           */
*/*                                                                  */
*/*  REGISTER DEPENDENCIES-                                          */
*/*                                                                  */
*/*                 1. IEAPSPIO DEPENDS ON THE INCLUDING ROUTINES    */
*/*                    BASE REGISTERS FOR ADDRESSABILITY             */
*/*                                                                  */
*/*                 2. REGISTER 3 MUST CONTAIN THE ADDRESS OF        */
*/*                    THE CVT ON ENTRY                              */
*/*                                                                  */
*/*                 3. REGISTER 2 MUST CONTAIN THE ADDRESS OF        */
*/*                    THE NVT ON ENTRY                              */
*/*                                                                  */
*/*                 4. REGISTER 14 MUST CONTAIN THE ADDRESS OF       */
*/*                    THE CALLERS RETURN POINT ON ENTRY             */
*/*                                                                  */
*/* ENTRY POINTS-                                                    */
*/*                                                                  */
*/*    TWO CALLING SEQUENCRS ARE AVAILABLE.  ONE PROVIDES            */
*/*    COMPATIBILITY WITH THE VS2-1 VERSION OF THIS MACRO,           */
*/*    THE OTHER CALLING SEQUENCE WAS DEVELOPED EXPRESSLY            */
*/*    FOR VS2-2.                                                    */
*/*                                                                  */
*/*        VS2-1 COMPATIBLE VERSION-                                 */
*/*                                                                  */
*/*            1. CALL NIPPMPDS TO LOCATE (VIA BLDL) THE MEMBER      */
*/*               OF SYS1.PARMLIB                                    */
*/*                                                                  */
*/*            2. CALL NIPPMTXT TO READ A TEXT RECORD FROM           */
*/*               SYS1.PARMLIB                                       */
*/*                                                                  */
*/*        VS2-2 VERSION-                                            */
*/*                                                                  */
*/*            1. CALL NIPPMMEM TO LOCATE THE MEMBER AND RETURN      */
*/*               A TEXT RECORD                                      */
*/*                                                                  */
*/*            2. REPEAT CALL TO NIPPMMEM TO READ ADDITIONAL         */
*/*               TEXT RECORDS                                       */
*/*                                                                  */
*/* OUTPUT (NORMAL) -                                                */
*/*                                                                  */
*/*     THE ROUTINE WILL SAVE AND RESTORE ALL GENERAL REGISTERS      */
*/*     WITH THE EXCEPTION OF RPARM.  ON A SUCCESSFUL READ,          */
*/*     RPARM (REGISTER 1) WILL BE SET TO POINT TO THE FIRST NON-    */
*/*     BLANK CHARACTER IN THE TEXT RECORD.  IF THE RECORD           */
*/*     COLUMNS 1 THRU 72 ALL CONTAIN BLANKS, RPARM WILL             */
*/*     POINT TO A BLANK IN COLUMN 72.  IF COLUMNS 1 THRU 71         */
*/*     ARE BLANK BUT COLUMN 72 IS NON-BLANK, THE ROUTINE            */
*/*     WILL AUTOMATICALLY ATTEMPT TO READ THE NEXT RECORD.  IN      */
*/*     ALL CASES, COLUMN 72 WILL BE SET TO BLANK AND COLUMN 73 WILL */
*/*     BE SET TO X'FF'.                                             */
*/*                                                                  */
*/* EXIT (NORMAL)-                                                   */
*/*                                                                  */
*/*     VS2-1 AND VS2-2 VERSIONS RETURN TO THE ADDRESS FOUND         */
*/*     IN REGISTER 14 ON ENTRY.                                     */
*/*                                                                  */
*/* EXIT (ERROR)-                                                    */
*/*                                                                  */
*/*     VS2-1 COMPATIBLE VERSION-                                    */
*/*                                                                  */
*/*         RETURN TO THE ADDRESS IN REGISTER 14 +4                  */
*/*                                                                  */
*/*         NOTE- WHEN AN ERROR OCCURS ON AN ATTEMP TO READ A RECORD */
*/*               THAT DOES NOT EXIST (E-O-F),                       */
*/*               IT IS CONSIDERED A PERMANENT I/O ERROR             */
*/*                                                                  */
*/*     VS2-2 VERSION-                                               */
*/*                                                                  */
*/*        RETURN TO THE ADDRESS FOUND IN REGISTER 14 ON ENTRY       */
*/*        WITH REGISTER 1 (RPARM) SET TO A NEGATIVE VALUE.  IN THE  */
*/*        CASE WHERE RPARM IS NEGATIVE ON RETURN, THE NIPPARC FIELD */
*/*        OF THE NIP PATAMETER AREA WILL INDICATE THE REASON FOR    */
*/*        FAILURE AS FOLLOWS-                                       */
*/*                            4 - MEMBER NOT FOUND                  */
*/*                            8 - I/O ERROR DURING BLDL             */
*/*                            12- I/O ERROR DURING READ             */
*/*                            16- END-OF-FILE                       */
*/*                                                                  */
*/*     COMMON TO BOTH VERSIONS-                                     */
*/*                                                                  */
*/*        AN INTERPRETIVE MESSAGE WILL BE WRITTEN TO THE OPERATOR   */
*/*        FOR EACH OF THE FIRST THREE ERROR CONDITIONS LISTED       */
*/*        ABOVE.  THE CALLER MAY SUPPRESS THE 'MEMBER NOT FOUND'    */
*/*        MESSAGE BY SETTING THE NIPPAFL1 FLAG FIELD TO BINARY      */
*/*        ONE IN THE NIP PARAMETER AREA BEFORE CALLING THIS         */
*/*        ROUTINE.  NO MESSAGE WILL BE WRITTEN FOR THE E-O-F        */
*/*        CONDITION IF THE VS2-2 VERSION IS USED.                   */
*/*                                                                  */
*/* MACROS-                                                          */
*/*     THE FOLLOWING MAPPING MACROS MUST BE                         */
*/*     INCLUDED IN THE MODULE WHICH INCLUDES                        */
*/*     IEAPSPIO-                                                    */
*/*                                       IEZIOB                     */
*/*                                       IHANVT                     */
*/*                                       IHAECB                     */
*/*                                       IEAPPNIP                   */
*/*                                       IEFUCBOB                   */
*/*                                       CVT                        */
*/*                                                                  */
*/* NOTES-                                                           */
*/*        THE FIRST FOUR LETTERS OF ALL IEAPSPIO SYMBOLES ARE:      */
*/*        NIPP OR IPPM.                                             */
*/*                                                                  */
*/*        REGISTERS 0, 1, 14, AND 15 WILL BE UNRESTRICTED AT THE    */
*/*        END OF THE SEGMENT GENERATED BY IEAPSPIO.                 */
*/*                                                                  */
*/*        NIPPAREA WILL BE BASED ON NVTPAREA AND IOBSTDRD WILL BE   */
*/*        BASED ON THE ADDR OF NIPPAIOB AT THE END OF THE SEGMENT   */
*/*        GENERATED BY IEAPSPIO                                     */
*/*                                                                  */
*/*        IEAPSPIO MUST BE INCLUDED IN A CODE SEGMENT,              */
*/*        NOT AT THE TOP OF THE PROCEDURE WITH THE                  */
*/*        MAPPING MACROS LISTED ABOVE.                              */
*/*                                                            Y02752*/
*/********************************************************************/
*                                                                  0688
*                                                                  0688
*                                                                  0688
*          /* REGISTERS                                              */
*          DCL NIPPMR00 REG(0) PTR(24);                            0688
*          DCL NIPPMR01 REG(1) PTR(24);                            0689
*          DCL NIPPMR02 REG(2) PTR(24);                            0690
*          DCL NIPPMR06 REG(6) PTR(24);                            0691
*          DCL NIPPMR09 REG(9) PTR(24);                            0692
*          DCL NIPPMR12 REG(12) PTR(24);                           0693
*          DCL NIPPMR13 REG(13) PTR(24);                           0694
*          DCL NIPPMR14 REG(14) PTR(24);                           0695
*          DCL NIPPMR15 REG(15) PTR(24);                           0696
*                                                                  0696
*          /* SAVE AREA FOR CALLER'S REGISTERS                       */
*          DCL NIPPMREG (16) FIXED(31);                            0697
*                                                                  0697
*                                                                  0697
*          /* SAVE AREA FOR CALLER'S RETURN ADDRESS                  */
*          DCL NIPPMADR PTR(31);                                   0698
*                                                                  0698
*          /* POINTER TO DCB FOR BLDL                                */
*          DCL NIPPMDCB PTR(31);                                   0699
*                                                                  0699
*          /* POINTER TO BLDL HEADER FOR BLDL                        */
*          DCL NIPPMBDL PTR(31);                                   0700
*                                                                  0700
*          /* NORMAL RETURN TO CALLER                                */
*          DCL NIPPMAD0 LABEL BASED(NIPPMADR);                     0701
*                                                                  0701
*          /* ERROR RETURN TO CALLER                                 */
*          DCL NIPPMAD4 LABEL BASED(NIPPMADR+4);                   0702
*                                                                  0702
*          /* ESTABLISH BASE FOR NIP COMMUNICATION AREA        Y02752*/
*          RESPECIFY NIPPAREA BASED(NVTPAREA);              /* Y02752*/
*                                                                  0703
*          /* ONE BYTE SCANNING FIELD                                */
*          DCL NIPPMBYT CHAR(1) BASED;                             0704
*                                                                  0704
*          /* TEMPORARY POINTER                                Y02752*/
*          DCL NIPPMKPR PTR(31);                            /* Y02752*/
*                                                                  0705
*                                                                  0705
*          /* INPUT RECORD READ FROM PARMLIB                   Y02752*/
*          DCL NIPPMBUF CHAR(80) BASED(NIPPMR01);           /* Y02752*/
*                                                                  0706
*          /* MBBCCHHR OF PARMLIB MEMBERS                            */
*          DCL 1 NIPPMMBC CHAR(8),                                 0707
*                2 NIPPMMBB CHAR(3),                               0707
*                2 NIPPMCCH CHAR(5);                               0707
*                                                                  0707
*          /* LOW ORDER 7 BYTES OF THE CSW STORED IN THE PARMLIB   0708
*             IOB BY EXCP                                      Y02752*/
*          DCL 1 NIPPMCSW BASED(ADDR(IOBCSW)) BDY(BYTE),    /* Y02752*/
*                2 * CHAR(3),                               /* Y02752*/
*                2 NIPPMCS2 BIT(8),   /* I/O OPERATION STATUS FLAGS
*                                                           /* Y02752*/
*                2 * CHAR(3);                               /* Y02752*/
*                                                                  0708
*          /* MASK TO TEST THE STATUS FLAGS OF THE PARMLIB CSW Y02752*/
*          DCL  NIPPMMK1 BIT(8) BDY(BYTE) INIT('11110010'B);/* Y02752*/
*                                                                  0709
*          /* INTERNALLY GENERATED LABELS                            */
*          DCL NIPPMMB1 LABEL GENERATED INTERNAL;                  0710
*          DCL NIPPMMB2 LABEL GENERATED INTERNAL;                  0711
*          DCL NIPPMTND LABEL GENERATED INTERNAL;                  0712
*                                                                  0712
*          /* MAPPING AREAS INTO ERROR MESSAGES                      */
*          DCL NIPPMME1 CHAR(8) BASED(ADDR(NIPPMMB1));             0713
*          DCL NIPPMME2 CHAR(8) BASED(ADDR(NIPPMMB2));             0714
*          DCL NIPPMNAM CHAR(8) INIT(' '); /*MEMBER NAME SAVE AREA 0715
*                                                              Y02752*/
*          DCL NIPPMNEG FIXED(31) INIT('FFFFFFFF'X); /*NEGATIVE VALUE
*                                                              Y02752*/
*         RESPECIFY IOBSTDRD BASED(ADDR(NIPPAIOB));/* IOB BASE Y02752*/
*                                                                  0717
*         RESPECIFY (NIPPMR14,NIPPMR15,NIPPMR00,NIPPMR01) RESTRICTED;/*
*                                                              Y02752*/
*NIPPMMEM: NIPPMADR=NIPPMR14;  /* SAVE CALLER'S RETURN REGISTER    0719
*                                                              Y02752*/
NIPPMMEM LR    NIPPMADR,NIPPMR14                                   0719
*         GENERATE REFS(NIPPMR01,NIPPMR02) SETS(NIPPMREG);         0720
          STM   NIPPMR02,NIPPMR01,NIPPMREG   SAVE REGISTERS     Y02752
*          NIPPARC=NIPPARC && NIPPARC; /*SET RETURN CODE TO ZERO   0721
*                                                              Y02752*/
         L     @10,R2SAVE                                          0721
         L     @10,NVTPAREA(,@10)                                  0721
         L     @05,NIPPARC(,@10)                                   0721
         LR    @09,@05                                             0721
         XR    @09,@05                                             0721
         ST    @09,NIPPARC(,@10)                                   0721
*          IF NIPPMNAM = NIPPANAM      /*IS THIS NEW MEMBER NAME   0722
*                                                              Y02752*/
*              THEN GO TO NIPPMPRD;    /*NO- GO READ RECORD    Y02752*/
         CLC   NIPPMNAM(8),NIPPANAM(@10)                           0722
         BE    @RT00722                                            0722
*          NIPPMNAM = NIPPANAM;        /*YES- SAVE MEMBER NAME Y02752*/
         MVC   NIPPMNAM(8),NIPPANAM(@10)                           0724
*          GO TO NIPPMENT;             /*GO FIND MEMBER        Y02752*/
*                                                                  0725
         B     NIPPMENT                                            0725
*NIPPMPDS: NIPPMADR = NIPPMR14;          /* SAVE CALLER'S RETURN ADDR*/
NIPPMPDS LR    NIPPMADR,NIPPMR14                                   0726
*          GENERATE REFS(NIPPMR01,NIPPMR02) SETS(NIPPMREG);        0727
         STM   NIPPMR02,NIPPMR01,NIPPMREG       SAVE REGS       Y02752
*          NIPPMNAM = NIPPMNAM && NIPPMNAM;  /*CLEAR MEMBER NAME   0728
*                                                              Y02752*/
         XC    NIPPMNAM(8),NIPPMNAM                                0728
*NIPPMENT: NIPPMR01 = ADDR(NIPPADCB) - 44;      /* R1= ADDR OF DCB   */
NIPPMENT L     @10,R2SAVE                                          0729
         L     @10,NVTPAREA(,@10)                                  0729
         LA    NIPPMR01,NIPPADCB(,@10)                             0729
         SH    NIPPMR01,@CH02245                                   0729
*          NIPPMR00 = ADDR(NIPPABDL);    /* R0= ADDR OF BLDL LIST    */
*                                                                  0730
         LA    NIPPMR00,NIPPABDL(,@10)                             0730
*          /* READ PDS ENTRY FOR MEMBER                              */
*          GENERATE;                                               0731
          BLDL (1),(0)
*          NIPPARC = NIPPMR15;   /* SET RETURN CODE            Y02752*/
*                                                                  0732
         L     @10,R2SAVE                                          0732
         L     @10,NVTPAREA(,@10)                                  0732
         ST    NIPPMR15,NIPPARC(,@10)                              0732
*          IF NIPPMR15 = 4               /* WAS MEMBER NAME FOUND  0733
*                                                              Y02752*/
*             THEN GO TO NIPPMPFN;       /* NO - TELL OPERATOR NOT 0733
*                                           FOUND                    */
         CH    NIPPMR15,@CH00327                                   0733
         BE    @RT00733                                            0733
*          IF NIPPMR15 = 8               /* WAS THERE AN I/O ERROR   */
*             THEN GO TO NIPPMPER;       /* YES - TELL OPERATOR    0735
*                                           I/O ERROR                */
*                                                                  0735
         CH    NIPPMR15,@CH00132                                   0735
         BE    @RT00735                                            0735
*          /* SET UP PARAMETERS FOR CONVERSION ROUTINE               */
*                                                                  0737
*          NIPPMR00 = NIPPATTR;          /* R0 = ACTUAL TTR          */
         MVC   @ZT00001+1(3),NIPPATTR(@10)                         0737
         L     NIPPMR00,@ZT00001                                   0737
*          GENERATE;                                               0738
         SLL   0,8(0)                    ZERO LOW BYTE IN REG 0
*          NIPPMR01 = ADDR(NIPPADEB);    /* R1 = ADDR OF DEB         */
         L     @10,R2SAVE                                          0739
         L     NIPPMR01,NVTPAREA(,@10)                             0739
         LA    NIPPMR01,NIPPADEB(,NIPPMR01)                        0739
*          NIPPMR15 = CVTPCNVT;          /* R15 = ADDR OF CONVERSION
*                                           ROUTINE            Y02752*/
         L     @10,CVTPTR                                          0740
         L     NIPPMR15,CVTPCNVT(,@10)                             0740
*          /* CONVERT TTR TO CCHHR FORMAT                      Y02752*/
*          GENERATE REFS(NIPPMR02,NIPPMR13)                        0741
*                    SETS(NIPPMR14,NIPPMR15,NIPPMMBC);     /*      0741
*                                                                  0741
         STM   NIPPMR02,NIPPMR13,NIPPMSAV SAVE REGISTERS        Y02752
         LA    NIPPMR02,NIPPMMBC          CONVERSION AREA       Y02752
         BALR  NIPPMR14,NIPPMR15          CALL CONVERT RTN      Y02752
**         RESTORE CSECT AND DSECT BASE REGISTERS               Y02752
*NIPPMRST  DS  0H                                               Y02752
NIPPMRST LM    NIPPMR02,NIPPMR13,NIPPMSAV-NIPPMRST(NIPPMR14)    Y02752
         BC    15,NIPPMSKP                SKIP SAVE AREA        Y02752
*NIPPMSAV  DS  0F                                               Y02752
NIPPMSAV DC    12F'0'                     DECLARE REG SAVE AREA Y02752
*NIPPMSKP DS  0H                                                Y02752
NIPPMSKP DS    0H                         RESUME EXECUTION      Y02752
*          IOBSEEK = NIPPMMBC;           /* RESET PARMLIB IOBSEEK TO
*                                           THIS MBBCCHHR            */
         L     @10,R2SAVE                                          0742
         L     @10,NVTPAREA(,@10)                                  0742
         MVC   IOBSEEK+72(8,@10),NIPPMMBC                          0742
*          NIPPASID = NIPPMCCH;          /* RESET PARMLIB SEARCH ID
*                                           TO THIS CCHHR            */
         MVC   NIPPASID(5,@10),NIPPMCCH                            0743
*          IF NIPPMNAM = NIPPANAM   /*SEE IF MEM NAMES MATCH   Y02752*/
*              THEN GO TO NIPPMPRD; /*YES- NEW VERSION- GO READ    0744
*                                                              Y02752*/
         CLC   NIPPMNAM(8),NIPPANAM(@10)                           0744
         BE    @RT00744                                            0744
*         GENERATE REFS(NIPPMR01,NIPPMR02) SETS(NIPPMREG);         0746
          LM    NIPPMR02,NIPPMR01,NIPPMREG    RESTORE REGS      Y02752
*          GO TO NIPPMAD0;               /* NORMAL RETURN TO CALLER
*                                                              Y02752*/
*                                                                  0747
         BR    NIPPMADR                                            0747
*NIPPMPER: NIPPMME1 = NIPPANAM;          /* MOVE MEMBER NAME TO I/O
*                                           ERROR MESSAGE            */
*                                                                  0748
NIPPMPER LA    @10,NIPPMMB1                                        0748
         L     @05,R2SAVE                                          0748
         L     @05,NVTPAREA(,@05)                                  0748
         MVC   NIPPMME1(8,@10),NIPPANAM(@05)                       0748
*          /* WTO I/O ERROR DURING BLDL MESSAGE                      */
*          GENERATE REFS(NVTWTO) SETS(RPARM,REXIT,RENTRY);         0749
*                                                                  0749
          IEAPMNIP TYPE=WTO,PARAM=NIPPMMS1 CALL WTO SERVICE ROUTINE
*          GO TO NIPPMPXT;               /* ERROR RETURN TO CALLER   */
*                                                                  0750
         B     NIPPMPXT                                            0750
*NIPPMPFN: IF NIPPMNAM = NIPPANAM  /*SEE IF MEMBER NAMES MATCH Y02752*/
*              THEN IF NIPPAFL1 = '1'B  /*YES- SUPPRESS MESSAGE?   0751
*                                                              Y02752*/
NIPPMPFN L     @10,R2SAVE                                          0751
         L     @05,NVTPAREA(,@10)                                  0751
         CLC   NIPPMNAM(8),NIPPANAM(@05)                           0751
         BNE   @RF00751                                            0751
*                 THEN GO TO NIPPMPXT;  /*YES- GO EXIT TO CALLER   0752
*                                                              Y02752*/
         L     @10,NVTPTAB(,@10)                                   0752
         TM    NIPPAFL1(@10),B'10000000'                           0752
         BO    @RT00752                                            0752
*                 ELSE;                                     /* Y02752*/
*          NIPPMME2 = NIPPANAM;          /* MOVE MEMBER NAME TO NOT
*                                           FOUND MESSAGE      Y02752*/
*                                                                  0755
@RF00751 LA    @10,NIPPMMB2                                        0755
         L     @05,R2SAVE                                          0755
         L     @05,NVTPAREA(,@05)                                  0755
         MVC   NIPPMME2(8,@10),NIPPANAM(@05)                       0755
*          /* WTO MEMBER NOT FOUND IN DATA SET MESSAGE               */
*          GENERATE REFS(NVTWTO) SETS(RPARM,REXIT,RENTRY);         0756
          IEAPMNIP TYPE=WTO,PARAM=NIPPMMS2 CALL WTO SERVICE ROUTINE
*NIPPMPXT: IF NIPPMNAM = NIPPANAM   /*SEE IF NAMES MATCH       Y02752*/
*             THEN DO;                                             0757
NIPPMPXT L     @10,R2SAVE                                          0757
         L     @10,NVTPAREA(,@10)                                  0757
         CLC   NIPPMNAM(8),NIPPANAM(@10)                           0757
         BNE   @RF00757                                            0757
*                     NIPPMNAM = NIPPMNAM && NIPPMNAM; /* FORCE NEW
*                                            NAME PATH ON NEXT ENTRY
*                                                              Y02752*/
         XC    NIPPMNAM(8),NIPPMNAM                                0759
*                     NIPPMR01 = NIPPMNEG;  /* SET NEGATIVE VALUE RC
*                                                              Y02752*/
         L     NIPPMR01,NIPPMNEG                                   0760
*                     GENERATE SETS(NIPPMR02,NIPPMR00) REFS(NIPPMREG);
          LM    NIPPMR02,NIPPMR00,NIPPMREG    RESTORE REGS      Y02752
*                     GO TO NIPPMAD0;   /*EXIT TO CALLER       Y02752*/
         BR    NIPPMADR                                            0762
*                  END;                                     /* Y02752*/
*          GENERATE SETS(NIPPMR02,NIPPMR01) REFS(NIPPMREG); /* Y02752*/
@RF00757 DS    0H                                                  0764
         LM    NIPPMR02,NIPPMR01,NIPPMREG     RESTORE REGS      Y02752
*          GO TO NIPPMAD4;               /* READ ERROR - RETURN TO 0765
*                                           CALLER                   */
         LA    @10,NIPPMAD4+4(,NIPPMADR)                           0765
         BR    @10                                                 0765
*                                                                  0766
*          /**********************************************************/
*          /*             ROUTINE TO READ PARMLIB TEXT               */
*          /**********************************************************/
*                                                                  0766
*NIPPMTXT: NIPPMADR = NIPPMR14;          /* SAVE CALLER'S RETURN   0766
*                                           ADDRESS                  */
NIPPMTXT LR    NIPPMADR,NIPPMR14                                   0766
*          GENERATE REFS(NIPPMR02,NIPPMR01) SETS(NIPPMREG);        0767
         STM   NIPPMR02,NIPPMR01,NIPPMREG   SAVE CALLERS REGS
*NIPPMPRD: NIPPAECB = NIPPAECB && NIPPAECB;   /* ZERO WAIT ECB       */
NIPPMPRD L     @10,R2SAVE                                          0768
         L     @10,NVTPAREA(,@10)                                  0768
         XC    NIPPAECB(4,@10),NIPPAECB(@10)                       0768
*          IOBSEEK(4:7) = NIPPASID;         /* FILL IN CCHH IN IOB   */
*                                                                  0769
         LA    @05,72                                              0769
         ALR   @05,@10                                             0769
         MVC   IOBSEEK+3(4,@05),NIPPASID(@10)                      0769
*          /* REINITIALIZE IOB FLAGS                                 */
*                                                                  0770
*          IOBFLAG1 = '42'X;                                       0770
         MVI   IOBFLAG1(@05),X'42'                                 0770
*          IOBFLAG2 = '00'X;                                       0771
         MVI   IOBFLAG2(@05),X'00'                                 0771
*          IOBFLAG3 = '00'X;                                       0772
         MVI   IOBFLAG3(@05),X'00'                                 0772
*          IOBERRCT = '0000'X;                                     0773
         SLR   @09,@09                                             0773
         STH   @09,IOBERRCT(,@05)                                  0773
*          IOBCSW = '00000000000000'X;                             0774
         MVC   IOBCSW(7,@05),@CB02258                              0774
*          IOBSENS0 = '00'X;                                       0775
         MVI   IOBSENS0(@05),X'00'                                 0775
*          IOBSENS1 = '00'X;                                       0776
*                                                                  0776
         MVI   IOBSENS1(@05),X'00'                                 0776
*          /* READ PARMLIB TEXT RECORD                               */
*          NIPPMR01 = ADDR(NIPPAIOB);                              0777
         LA    NIPPMR01,NIPPAIOB(,@10)                             0777
*          GENERATE;                                               0778
          EXCP  (1)                 READ TEXT
*          NIPPMR01 = ADDR(NIPPAECB);                              0779
         L     @10,R2SAVE                                          0779
         L     NIPPMR01,NVTPAREA(,@10)                             0779
         LA    NIPPMR01,NIPPAECB(,NIPPMR01)                        0779
*          GENERATE;                                               0780
          WAIT  ECB=(1)                  AWAIT I/O COMPLETION
*          /* TEST FOR I/O ERROR AFTER PARMLIB READ            Y02752*/
*          IF NIPPAECC ^= '7F'X          /* SKIP IF READ SUCCESSFUL
*                                                              Y02752*/
*             THEN                                                 0781
         L     @10,R2SAVE                                          0781
         L     @10,NVTPAREA(,@10)                                  0781
         CLI   NIPPAECC(@10),X'7F'                                 0781
         BE    @RF00781                                            0781
*             DO;                                                  0782
*               IF NIPPMNAM = NIPPANAM   /* SEE IF MEMBER NAMES MATCH
*                                                              Y02752*/
*               THEN                                               0783
         CLC   NIPPMNAM(8),NIPPANAM(@10)                           0783
         BNE   @RF00783                                            0783
*               DO;                                                0784
*                 /* DOES THE I/O ERROR REPRESENT EOF          Y02752*/
*                 IF NIPPAECC = '41'X &   /* IOBCSW FIELD VALID?     */
*                    /* FALL THROUGH IF UNIT EXCEPTION, CHANNEL END
*                       AND DEVICE END FLAGS ARE ON IN THE IOBCSW    */
*                    (NIPPMCS2 × NIPPMMK1) = 'FF'X                 0785
*                    THEN                                          0785
         CLI   NIPPAECC(@10),X'41'                                 0785
         BNE   @RF00785                                            0785
         MVC   @TS00001(1),NIPPMCS2+81(@10)                        0785
         OC    @TS00001(1),NIPPMMK1                                0785
         CLI   @TS00001,X'FF'                                      0785
         BNE   @RF00785                                            0785
*                      DO;                                         0786
*                        NIPPARC = 16;   /* INDICATE EOF CONDITION 0787
*                                                              Y02752*/
         MVC   NIPPARC(4,@10),@CF00147                             0787
*                        GOTO NIPPMPXT;  /* RETURN TO CALLER   Y02752*/
         B     NIPPMPXT                                            0788
*                      END;                                 /* Y02752*/
*                  END;                                     /* Y02752*/
*                 GOTO NIPPMTER;         /* INDICATE I/O ERROR Y02752*/
         B     NIPPMTER                                            0791
*               END;                                        /* Y02752*/
*          RESPECIFY NIPPMBYT BASED(NIPPMR01);                     0793
*                                                                  0793
@RF00781 DS    0H                                                  0794
*          NIPPMR01 = ADDR(NIPPARCD);    /* R1 = ADDR OF TEXT RECORD
*                                           READ IN                  */
*                                                                  0794
         L     @10,R2SAVE                                          0794
         L     NIPPMR01,NVTPAREA(,@10)                             0794
         LA    NIPPMR01,NIPPARCD(,NIPPMR01)                        0794
*          /* SCAN THROUGH LEADING BLANK CHARACTERS                  */
*          NIPPMBUF(73:73) = 'FF'X;      /* PLACE 'FF'X IN COL 73    */
*                                                                  0795
         MVI   NIPPMBUF+72(NIPPMR01),X'FF'                         0795
*          NIPPMKPR = 1;                 /* COUNT STARTS AT ONE      */
         LA    NIPPMKPR,1                                          0796
*NIPPMPBK: IF NIPPMBYT = ' '             /* IS THIS CHAR BLANK       */
*             THEN                       /* YES - CHECK NEXT CHAR    */
NIPPMPBK CLI   NIPPMBYT(NIPPMR01),C' '                             0797
         BNE   @RF00797                                            0797
*               DO;                                                0798
*                 NIPPMR01 = NIPPMR01 + 1;      /* POINT TO NEXT CHAR
*                                                              Y02752*/
         LA    @10,1                                               0799
         ALR   NIPPMR01,@10                                        0799
*                NIPPMKPR = NIPPMKPR + 1;      /* INCREMENT COUNTER
*                                                              Y02752*/
         ALR   NIPPMKPR,@10                                        0800
*                 IF NIPPMKPR = 72       /* ARE FIRST 71 CHARS BLANK
*                                                              Y02752*/
*                    THEN                /*YES-CHECK FOR CONTINUATION*/
         CH    NIPPMKPR,@CH02266                                   0801
         BNE   @RF00801                                            0801
*                      DO;                                         0802
*                        IF NIPPMBYT ^= ' '      /* IS 72'ND CHAR BLK*/
*                           THEN                /* NO - INDICATES  0803
*                                                  CONTINUATION      */
         CLI   NIPPMBYT(NIPPMR01),C' '                             0803
         BNE   @RT00803                                            0803
*                                GO TO NIPPMPRD;/* READ NEXT RECORD  */
*                           ELSE                /* 72ND IS BLANK - NO
*                                                  CONTINUATION      */
*                               GO TO NIPPMTND; /* REG 1 POINTS TO 72ND
*                                                  BLANK. NORMAL RETURN
*                                                  TO CALLER         */
         B     NIPPMTND                                            0805
*                      END;                                        0806
*                    ELSE GO TO NIPPMPBK; /* COUNT IS NOT 72 YET-  0807
*                                            GO CHECK NEXT CHAR      */
*               END;                                               0808
*             ELSE                       /* FIRST 71 CHARS ARE NOT   */
*               DO;                      /* BLANK                    */
@RF00797 DS    0H                                                  0810
*                 NIPPMKPR = NIPPMR01 - NIPPMKPR + 72;      /* POINT TO
*                                                 72'ND BYTE   Y02752*/
*                                                                  0810
         LR    @10,NIPPMR01                                        0810
         SLR   @10,NIPPMKPR                                        0810
         AH    @10,@CH02266                                        0810
         LR    NIPPMKPR,@10                                        0810
*                 RESPECIFY NIPPMBYT BASED(NIPPMKPR);       /* Y02752*/
*                                                                  0811
*                 NIPPMBYT = ' ';        /* INSURE BLANK AT END BY 0812
*                                           SETTING 72'ND BYTE TO BLK*/
         MVI   NIPPMBYT(NIPPMKPR),C' '                             0812
*               END;                                               0813
*           GENERATE REFS(NIPPMREG) SETS(NIPPMR02,NIPPMR00);     /*
*NIPPMTND  DS  0H                                               Y02752
NIPPMTND LM    NIPPMR02,NIPPMR00,NIPPMREG     RESTORE CALLERS REGS
*          GO TO NIPPMAD0;               /* NORMAL RETURN TO CALLER  */
*                                                                  0815
         BR    NIPPMADR                                            0815
*NIPPMTER: NIPPMR01 = ADDR(NIPPAIOB);    /* R1 = ADDR OF PARMLIB IOB */
*                                                                  0816
NIPPMTER L     @10,R2SAVE                                          0816
         L     NIPPMR01,NVTPAREA(,@10)                             0816
         LA    NIPPMR01,NIPPAIOB(,NIPPMR01)                        0816
*          /* NIPSENSE - FORMAT AND WRITE I/O ERROR MESSAGE          */
*          GENERATE REFS(NVTSENSE,NIPPMR01) SETS(RPARM,REXIT,RENTRY);
         IEAPMNIP TYPE=SENSE,PARAM=NIPPMR01
*          NIPPARC = 12;    /*SET RETURN CODE TO 12            Y02752*/
         L     @10,R2SAVE                                          0818
         L     @10,NVTPAREA(,@10)                                  0818
         MVC   NIPPARC(4,@10),@CF00033                             0818
*          IF NIPPMNAM = NIPPANAM  /*SEE IF MEMBER NAMES MATCH Y02752*/
*             THEN GO TO NIPPMPXT; /*YES-TAKE NEW VERSION EXIT Y02752*/
         CLC   NIPPMNAM(8),NIPPANAM(@10)                           0819
         BE    @RT00819                                            0819
*          GENERATE REFS(NIPPMREG) SETS(NIPPMR01,NIPPMR02);        0821
*                                                                  0821
         LM    NIPPMR02,NIPPMR01,NIPPMREG     RESTORE CALLERS REGS
*          GO TO NIPPMAD4;               /* READ ERROR - RETURN TO 0822
*                                           CALLER + 4               */
*                                                                  0822
         LA    @10,NIPPMAD4+4(,NIPPMADR)                           0822
         BR    @10                                                 0822
*          RESPECIFY (NIPPMR01,NIPPMR00,NIPPMR14,NIPPMR15)  /* Y02752*/
*                                                 UNRESTRICTED;    0823
*          /**********************************************************/
*          /* GENERATED MACRO PARAMETER LISTS FOR MESSAGES           */
*          /**********************************************************/
*                                                                  0824
*           GENERATE DATA;     /*                                  0824
*/*                                                                 */
*/*                GENERATED DATA    ( MESSAGES )                   */
*/*                                                                 */
*GENERATE DATA;                                                    0825
*END IEAVNP13                                                      0826
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IEZIOB  )                                        *
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                        *
*/*%INCLUDE SYSLIB  (IHAECB  )                                        *
*/*%INCLUDE SYSLIB  (IEAPMNIP)                                        *
*/*%INCLUDE SYSLIB  (IEAPPNIP)                                        *
*/*%INCLUDE SYSLIB  (IHANVT  )                                        *
*/*%INCLUDE SYSLIB  (IEEBASEA)                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IEAPSPIO)                                        *
*;                                                                 0826
         B     @EL00001                                            0826
@DATA    DS    0H
@CH00132 DC    H'8'
@CH02245 DC    H'44'
@CH02018 DC    H'60'
@CH02266 DC    H'72'
@CH02016 DC    H'3600'
@CH02010 DC    H'15625'
@SM02274 MVC   THECMD(0,@08),COMREC+5(RECADDR)
@SM02276 MVC   THECMD(0,@10),COMREC+5(RECADDR)
         DS    0F
@SA00001 DS    18F
@SA00002 DS    15F
@SA00003 DS    15F
@SA00005 DS    15F
@SA00004 DS    15F
@SA00007 DS    15F
@SA00008 DS    15F
@TF00001 DS    F
@ZTEMPS  DS    0F
@ZT00001 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
         DS    0F
@CF00037 DC    F'1'
@CH00037 EQU   @CF00037+2
@CF00196 DC    F'2'
@CF00217 DC    F'3'
@CH00217 EQU   @CF00217+2
@CF00327 DC    F'4'
@CH00327 EQU   @CF00327+2
@CF00144 DC    F'5'
@CH00144 EQU   @CF00144+2
@CF00480 DC    F'6'
@CF00033 DC    F'12'
@CH00033 EQU   @CF00033+2
@CF00713 DC    F'14'
@CF00147 DC    F'16'
@CH00147 EQU   @CF00147+2
@CF02169 DC    F'73'
@CF02012 DC    F'16384'
@CF02014 DC    F'41199'
@CF02278 DC    F'-4'
@CF02170 DC    F'-1'
@CF01967 DC    XL4'F500000C'
@CF01984 DC    XL4'F5000000'
@CF02201 DC    XL4'404040'
         DS    0D
IOBPRPTR DS    A
IOBSTPTR DS    A
UCBPTR   DS    A
ECBPTR   DS    A
CVTPTR   DS    A
PTRSAVE  DS    A
CURRELEM DS    A
EXITSAVE DS    A
ZERO     DC    XL4'00'
ZEROFOUR DC    XL4'04'
TOTAL    DS    F
R2SAVE   DS    A
CMDADDR  DS    A
SAVE14   DS    A
NIPPMNEG DC    XL4'FFFFFFFF'
CTRSAVE  DS    F
NIPPMBDL DS    A
NIPPMDCB DS    A
UCBDCPTR DS    A
LGTHSAVE DS    H
         DS    0D
@TS00001 DS    CL8
@CC01979 DC    C'NOPROMPT '
@CC01973 DC    C'COMMND00'
@CC02020 DC    C'PARMTZ  '
@CC01982 DC    C'PROMPT '
@CC01969 DC    C'SMFPRM'
@CC01951 DC    C'COM='''
@CC01953 DC    C'TOD='
@CC01971 DC    C'  '
@CC01986 DC    C'E,'
@CC01988 DC    C'W,'
@CC01998 DC    C'00'
@CC02002 DC    C'12'
@CC02004 DC    C'59'
@CB02258 DC    X'00000000000000'
BITTS    DS    CL1
         ORG   BITTS
ALLDONE  DS    BL1
CMDBAD   EQU   BITTS+0
         ORG   BITTS+1
         DS    CL1
CMPROCES DS    CL4
         ORG   CMPROCES
#PROCESD DS    FL2
#MEMBERS DS    FL2
         ORG   CMPROCES+4
COMMEM   DS    CL8
         ORG   COMMEM
COMNAME  DS    CL6
COMNUM   DS    CL2
         ORG   COMMEM+8
TEMPPACK DS    CL4
BADCMD   DC    CL8'CMD'
BADSMF   DC    CL8'SMF'
TRTTAB   DS    CL256
         ORG   TRTTAB
@NM00122 DC    77X'04'
@NM00123 DC    X'03'
@NM00124 DC    13X'04'
@NM00125 DC    X'00'
@NM00126 DC    X'04'
@NM00127 DC    X'08'
@NM00128 DC    13X'04'
@NM00129 DC    X'05'
@NM00130 DC    15X'04'
@NM00131 DC    2X'00'
@NM00132 DC    X'01'
@NM00133 DC    3X'04'
@NM00134 DC    9X'00'
@NM00135 DC    7X'04'
@NM00136 DC    9X'00'
@NM00137 DC    8X'04'
@NM00138 DC    8X'00'
@NM00139 DC    22X'04'
         DS    1XL1
@NM00140 DC    9X'00'
@NM00141 DC    7X'04'
@NM00142 DC    9X'00'
@NM00143 DC    8X'04'
@NM00144 DC    8X'00'
@NM00145 DC    6X'04'
@NM00146 DC    10X'00'
@NM00147 DC    6X'04'
         ORG   TRTTAB+256
ERRLIMIT DC    CL8'LOGLMT'
ERRCLASS DC    CL8'LOGCLS'
PACKAREA DS    CL6
NIPPMMBC DS    CL8
         ORG   NIPPMMBC
NIPPMMBB DS    CL3
NIPPMCCH DS    CL5
         ORG   NIPPMMBC+8
NIPPMMK1 DC    B'11110010'
NIPPMNAM DC    CL8' '
         DS    CL1
NIPPMREG DS    16F
IEAVNP13 CSECT
*NIPPMMS1 DS   0F                                               Y02752
NIPPMMS1 DS    0F                                               Y02752
         IEAPMNIP TYPE=HEADER,MSGST=NIPPMMS1,MSGEND=NIPPMED1    Y02752
         DC    CL34'IEA300I I/O ERROR DURING BLDL FOR '
*NIPPMMB1  EQU *                                                Y02752
NIPPMMB1 DC    CL8'        '
         DC    CL16' IN SYS1.PARMLIB'
*NIPPMED1 EQU   *                                               Y02752
NIPPMED1 EQU   *                                                Y02752
         SPACE 1
*NIPPMMS2 DS    0F                                              Y02752
NIPPMMS2 DS    0F                                               Y02752
         IEAPMNIP TYPE=HEADER,MSGST=NIPPMMS2,MSGEND=NIPPMED2
         DC    CL8'IEA301I '
*NIPPMMB2 EQU  *                                                Y02752
NIPPMMB2 DC    CL8'        '                                    Y02752
         DC    CL26' NOT FOUND IN SYS1.PARMLIB'
*NIPPMED2 EQU   *                                               Y02752
NIPPMED2 EQU   *                                                Y02752
IEAVNP13 CSECT
COMERR  DS     0F
         IEAPMNIP TYPE=HEADER,MSGST=COMERR,MSGEND=END1
        DC     CL10'IEA863I   '          MSG NUMBER
ERRCMD  DC     CL16'                '    SAMPLE COMMAND
        DC     CL29'  SPECIFICATION INVALID IN  '
MEMBER  DC     CL8'        '             MEMBER NAME
END1    EQU    *                         END MSG 1
GETERR  DS     0F
         IEAPMNIP TYPE=HEADER,MSGST=GETERR,MSGEND=END2
        DC     CL27'IEA864I GETMAIN FAILED FOR '
MEM     DC     CL8'        '             MEMBER NAME
        DC     CL3' - '                  SEPERATOR
ERRCMMD DC     CL20' '                   SAMPLE OF THE CMD.
END2    EQU    *
NOFUNC  DS     0F
         IEAPMNIP TYPE=HEADER,MSGST=NOFUNC,MSGEND=END4
        DC     CL8'IEA208I '                    MESS. NUMBER
MNAME   DC     CL6'      '                      MEMBER NAME
        DC     CL21' FUNCTION INOPERATIVE'
END4    EQU    *
BADTZ   DS     0F
         IEAPMNIP TYPE=HEADER,MSGST=BADTZ,MSGEND=END3
        DC     CL42'IEA868I PARMTZ MEMBER IN PARMLIB INVALID. '
        DC     CL18'SYSGEN VALUE USED.'
END3    EQU    *
IEAVNP13 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
NIPPMKPR EQU   @05
NIPPMADR EQU   @04
RECADDR  EQU   @05
TEMPBIN  EQU   @05
CTR      EQU   @04
RNVT     EQU   @02
RCVT     EQU   @03
REXIT    EQU   @14
RENTRY   EQU   @15
RLENGTH  EQU   @00
RPARM    EQU   @01
RETCODE  EQU   @15
GPR6     EQU   @06
NIPPMR00 EQU   @00
NIPPMR01 EQU   @01
NIPPMR02 EQU   @02
NIPPMR13 EQU   @13
NIPPMR14 EQU   @14
NIPPMR15 EQU   @15
NIPPMR06 EQU   @06
NIPPMR09 EQU   @09
NIPPMR12 EQU   @12
IOBPREFX EQU   0
IOBCFLG1 EQU   IOBPREFX
IOBSTDRD EQU   0
IOBFLAG1 EQU   IOBSTDRD
IOBCYCCK EQU   IOBFLAG1
IOBRSTRT EQU   IOBFLAG1
IOBFLAG2 EQU   IOBSTDRD+1
IOBPURGE EQU   IOBFLAG2
IOBRDHA0 EQU   IOBFLAG2
IOBSENS0 EQU   IOBSTDRD+2
IOBS0B7  EQU   IOBSENS0
IOBSENS1 EQU   IOBSTDRD+3
IOBECBPT EQU   IOBSTDRD+4
IOBFLAG3 EQU   IOBSTDRD+8
IOBFL3   EQU   IOBFLAG3
IOBCSW   EQU   IOBSTDRD+9
IOBIOCSW EQU   IOBCSW
IOBSTART EQU   IOBSTDRD+16
IOBDCBPT EQU   IOBSTDRD+20
IOBFLAG4 EQU   IOBDCBPT
IOBRESTR EQU   IOBSTDRD+24
IOBINCAM EQU   IOBSTDRD+28
IOBBTAMF EQU   IOBINCAM
IOBERRCT EQU   IOBSTDRD+30
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00004 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
ECB      EQU   0
ECBRB    EQU   ECB
ECBEVTB  EQU   ECBRB
ECBCC    EQU   ECBEVTB
ECBCCCNT EQU   ECBEVTB+1
ECBRBA   EQU   ECBCCCNT
ECBEVTBA EQU   ECBRBA
ECBBYTE3 EQU   ECBEVTBA+2
NWTOHDR  EQU   0
NWTOFL   EQU   NWTOHDR+2
NWTORLST EQU   0
NWTORFL  EQU   NWTORLST+10
NIPSPE   EQU   0
NIPMNTPL EQU   0
NMNTDS   EQU   NIPMNTPL
NMNTVS   EQU   NIPMNTPL+12
NMNTFL   EQU   NIPMNTPL+20
NIPOPNPL EQU   0
NOPNDS   EQU   NIPOPNPL
NOPNFL   EQU   NIPOPNPL+20
NIPSCHDL EQU   0
NIPPAHDR EQU   0
NIPPAREA EQU   0
NIPPARC  EQU   NIPPAREA+8
NIPPABDL EQU   NIPPAREA+12
NIPPABDH EQU   NIPPABDL
NIPPANAM EQU   NIPPABDL+4
NIPPATTR EQU   NIPPABDL+12
NIPPAIOD EQU   NIPPAREA+32
NIPPASID EQU   NIPPAIOD+32
NIPPAIOB EQU   NIPPAIOD+40
NIPPADCB EQU   NIPPAIOD+80
NIPPAECB EQU   NIPPAIOD+84
NIPPAECC EQU   NIPPAECB
NIPPADEB EQU   NIPPAIOD+88
NIPPARCD EQU   NIPPAIOD+136
PARMTAB  EQU   0
CMD      EQU   PARMTAB+48
LOGCLS   EQU   PARMTAB+128
LOGLMT   EQU   PARMTAB+136
SMF      EQU   PARMTAB+208
@NM00054 EQU   PARMTAB+272
NIPPAFLG EQU   @NM00054
NIPPAFL1 EQU   NIPPAFLG
NIPPTE   EQU   0
NIPPTOPF EQU   NIPPTE+4
NIPPTATF EQU   NIPPTE+5
NVT      EQU   0
NVTNPATR EQU   NVT+54
NVTNPREN EQU   NVTNPATR
NVTFLLB  EQU   NVT+55
NVTABSAV EQU   NVT+140
NVTFLCN  EQU   NVT+211
NVTWTPSW EQU   NVT+224
NVTWPSW2 EQU   NVTWTPSW+4
NVTFLWSC EQU   NVTWPSW2+3
NVTLOAD  EQU   NVT+232
NVTSENSE EQU   NVT+236
NVTSWAIT EQU   NVT+240
NVTTIME  EQU   NVT+244
NVTUCBFN EQU   NVT+248
NVTWTO   EQU   NVT+252
NVTWTOR  EQU   NVT+256
NVTWTOR2 EQU   NVT+260
NVTOPEN  EQU   NVT+264
NVTMOUNT EQU   NVT+268
NVTPRMPT EQU   NVT+272
NVTVIRT  EQU   NVT+276
NVTREAL  EQU   NVT+280
NVTSCHED EQU   NVT+284
NVTOPIO  EQU   NVT+288
NVTPAREA EQU   NVT+368
NVTPTAB  EQU   NVT+372
NVTXCTL  EQU   NVT+428
NVTLOCAT EQU   NVT+436
NVTFLPO  EQU   NVT+528
BASE     EQU   0
@NM00077 EQU   BASE+13
BALGSTAT EQU   BASE+24
BALOG    EQU   BALGSTAT+4
BASFL    EQU   BASE+36
BARSW    EQU   BASFL
MSTODWTO EQU   BARSW
MSLOGST  EQU   BASE+46
BASPBYTE EQU   BASE+47
BAMONITR EQU   BASE+56
MSCOMMND EQU   BASE+92
MSSMFPRM EQU   BASE+96
@NM00099 EQU   BASE+104
MSLOGCLS EQU   @NM00099
MSLOGLMT EQU   @NM00099+1
MSLGCLOZ EQU   BASE+108
MSCLOSSW EQU   MSLGCLOZ
MSLGWLOG EQU   BASE+112
MSWLOGSW EQU   MSLGWLOG
MSLGWTR  EQU   BASE+116
MSWTRSW  EQU   MSLGWTR
MSLGSTRT EQU   BASE+120
MSSTRTSW EQU   MSLGSTRT
MS1BASEX EQU   BASE+136
BASES01  EQU   0
MSNTAL   EQU   BASES01
MSSSB    EQU   BASES01+1
MSBTN    EQU   MSSSB
MSPFG    EQU   BASES01+2
MSECBFL  EQU   BASES01+3
MSTUS    EQU   BASES01+4
MSSSA    EQU   MSTUS
MSINLSW  EQU   MSSSA
MSREOF   EQU   MSSSA
MSNWP    EQU   MSSSA
MSFHF    EQU   BASES01+5
CVTMAP   EQU   0
CVTPCNVT EQU   CVTMAP+28
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTMSER  EQU   CVTMAP+148
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTTZ    EQU   CVTMAP+304
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
SMFMEM   EQU   0
TABLGTH  EQU   SMFMEM
MEMNAME  EQU   SMFMEM+4
MEMNUM   EQU   SMFMEM+10
CMDPARMS EQU   0
SMFPARM  EQU   0
COMREC   EQU   0
TZREC    EQU   0
HOURS    EQU   TZREC+2
MINUT    EQU   TZREC+5
SECDS    EQU   TZREC+8
CMDELEM  EQU   0
FWDPTR   EQU   CMDELEM
CMDLGTH  EQU   CMDELEM+4
THECMD   EQU   CMDELEM+8
LOGCLASS EQU   0
LOGLIMIT EQU   0
NIPPMAD0 EQU   0
NIPPMAD4 EQU   0
NIPPMBYT EQU   0
NIPPMBUF EQU   0
NIPPMCSW EQU   0
NIPPMCS2 EQU   NIPPMCSW+3
NIPPMME1 EQU   0
NIPPMME2 EQU   0
UCBBGN   EQU   0
IOBORG01 EQU   IOBPREFX+8
IOBNIOBA EQU   IOBORG01
IOBNFLG1 EQU   IOBNIOBA
IOBORG02 EQU   IOBPREFX+8
IOBDQADA EQU   IOBORG02
IOBDEQIN EQU   IOBDQADA
IOBORG03 EQU   IOBPREFX+12
IOBORG04 EQU   IOBINCAM
IOBORG12 EQU   IOBINCAM
IOBFL4   EQU   IOBORG12
IOBEXTEN EQU   IOBSTDRD+32
IOBSEEK  EQU   IOBEXTEN
IOBBB    EQU   IOBSEEK+1
IOBCC    EQU   IOBSEEK+3
IOBHH    EQU   IOBSEEK+5
IOBORG05 EQU   IOBEXTEN
IOBORG06 EQU   IOBEXTEN
IOBNXTPT EQU   IOBORG06+4
IOBSTATA EQU   IOBNXTPT
IOBORG07 EQU   IOBEXTEN+8
W1IEXTEN EQU   IOBORG07
IOBORG08 EQU   IOBEXTEN+8
IOBINDCT EQU   IOBORG08+4
IOBUNSQR EQU   IOBORG08+5
IOBFCHAD EQU   IOBORG08+8
IOBORG09 EQU   IOBEXTEN+8
IOBDPLAD EQU   IOBORG09+4
IOBDTYPE EQU   IOBORG09+8
IOBDTYP2 EQU   IOBORG09+9
IOBDSTAT EQU   IOBORG09+10
IOBSTAT1 EQU   IOBDSTAT
IOBORG10 EQU   IOBEXTEN+8
IOBSEEK2 EQU   IOBORG10
IOBORG11 EQU   IOBEXTEN
IOBERCT  EQU   IOBORG11
IOBUCBXV EQU   IOBERCT
IOBNAME  EQU   IOBORG11+4
IOBORG13 EQU   IOBEXTEN
IOBSKADR EQU   IOBORG13
UCBOBS01 EQU   UCBDEV
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00003 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBOBS09 EQU   UCBDEV
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTRV612 EQU   CVTS01+664
CVTRV611 EQU   CVTS01+660
CVTRV610 EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTRV608 EQU   CVTS01+648
CVTRV607 EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTRV603 EQU   CVTS01+628
CVTRV602 EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTRV301 EQU   CVTS01+475
CVTRV300 EQU   CVTS01+474
CVTRV299 EQU   CVTS01+473
CVTRV298 EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTRV519 EQU   CVTS01+92
CVTRV327 EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBCTCF1 EQU   UCBOBS08+4
UCBCTCAD EQU   UCBOBS08
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00003
UCBSKPFG EQU   @NM00003
UCBRIPND EQU   @NM00003
UCBRTIAC EQU   @NM00003
UCBRSV79 EQU   @NM00003
UCBRSV78 EQU   @NM00003
UCBRSV77 EQU   @NM00003
UCBOLTEP EQU   @NM00003
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBRV038 EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00002 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRV028 EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVOLI  EQU   UCBOBS01+4
UCBVTOC  EQU   UCBOBS01
IOBSKSS  EQU   IOBSKADR+3
IOBSK0   EQU   IOBSKADR+2
IOBSKTT  EQU   IOBSKADR+1
IOBSKRV  EQU   IOBSKADR
IOBCSWSV EQU   IOBORG11+17
IOBSENSV EQU   IOBORG11+16
IOBRCD   EQU   IOBORG11+12
IOBMDREC EQU   IOBORG11+8
IOBNAMEA EQU   IOBNAME+1
IOBNAMSZ EQU   IOBNAME
IOBERCTA EQU   IOBERCT+1
IOBRTYPE EQU   IOBUCBXV
IOBRDCHP EQU   IOBORG10+20
IOBNEXTA EQU   IOBORG10+16
IOBREADA EQU   IOBORG10+12
IOBBUFC  EQU   IOBORG10+8
IOBSK2R  EQU   IOBSEEK2+7
IOBSK2HH EQU   IOBSEEK2+5
IOBSK2CC EQU   IOBSEEK2+3
IOBSK2BB EQU   IOBSEEK2+1
IOBSK2M  EQU   IOBSEEK2
IOBCHNPR EQU   IOBORG09+40
IOBDNCRF EQU   IOBORG09+32
IOBRSV35 EQU   IOBORG09+24
IOBDQPTR EQU   IOBORG09+20
IOBRSV34 EQU   IOBORG09+18
IOBDBYTN EQU   IOBORG09+16
IOBDCPND EQU   IOBORG09+12
IOBSTAT2 EQU   IOBDSTAT+1
IOBSIORT EQU   IOBSTAT1
IOBADDVU EQU   IOBSTAT1
IOBBUFF  EQU   IOBSTAT1
IOBENQUE EQU   IOBSTAT1
IOBPASS2 EQU   IOBSTAT1
IOBSYNCH EQU   IOBSTAT1
IOBNEWVL EQU   IOBSTAT1
IOBABNRM EQU   IOBSTAT1
IOBRELEX EQU   IOBDTYP2
IOBADDTY EQU   IOBDTYP2
IOBTYPE  EQU   IOBDTYP2
IOBRQUST EQU   IOBDTYP2
IOBSUFFX EQU   IOBDTYP2
IOBSBLKL EQU   IOBDTYP2
IOBSKEY  EQU   IOBDTYP2
IOBRELBL EQU   IOBDTYPE
IOBRDEXC EQU   IOBDTYPE
IOBDYNBF EQU   IOBDTYPE
IOBACTAD EQU   IOBDTYPE
IOBFDBCK EQU   IOBDTYPE
IOBEXTSC EQU   IOBDTYPE
IOBOVFLO EQU   IOBDTYPE
IOBVERFY EQU   IOBDTYPE
IOBDPLB  EQU   IOBDPLAD+1
IOBDAYLI EQU   IOBDPLAD
IOBDIOBS EQU   IOBORG09+2
IOBDBYTR EQU   IOBORG09
IOBBCHAD EQU   IOBORG08+12
IOBFCHNB EQU   IOBFCHAD+1
IOBCOUNT EQU   IOBFCHAD
IOBASYN  EQU   IOBORG08+7
IOBAPP   EQU   IOBORG08+6
IOBRSV32 EQU   IOBUNSQR
IOBRSV31 EQU   IOBUNSQR
IOBRSV30 EQU   IOBUNSQR
IOBKNRWR EQU   IOBUNSQR
IOBKNWR  EQU   IOBUNSQR
IOBNTAV2 EQU   IOBUNSQR
IOBNTAV1 EQU   IOBUNSQR
IOBCPBSY EQU   IOBUNSQR
IOBCHNNL EQU   IOBINDCT
IOBRSV29 EQU   IOBINDCT
IOBRSV28 EQU   IOBINDCT
IOBRSV27 EQU   IOBINDCT
IOBKEYAD EQU   IOBINDCT
IOBOVPTR EQU   IOBINDCT
IOBUNSCH EQU   IOBINDCT
IOBDEQCP EQU   IOBINDCT
IOBCCWAD EQU   IOBORG08
W1OEXTEN EQU   W1IEXTEN
IOBCCW   EQU   IOBORG06+8
IOBNXTPB EQU   IOBNXTPT+1
IOBRSV26 EQU   IOBSTATA
IOBRSV25 EQU   IOBSTATA
IOBRSV24 EQU   IOBSTATA
IOBRSV23 EQU   IOBSTATA
IOBRSV22 EQU   IOBSTATA
IOBRSV21 EQU   IOBSTATA
IOBRSV20 EQU   IOBSTATA
IOBAVLFL EQU   IOBSTATA
IOBRSV37 EQU   IOBORG06+1
IOBUCBXG EQU   IOBORG06
IOBCPA   EQU   IOBORG05+32
IOBERINF EQU   IOBORG05+16
IOBERCCW EQU   IOBORG05+8
IOBSNDPT EQU   IOBORG05+7
IOBRCVPT EQU   IOBORG05+6
IOBWORK  EQU   IOBORG05+1
IOBUCBX  EQU   IOBORG05
IOBR     EQU   IOBSEEK+7
IOBHH2   EQU   IOBHH+1
IOBHH1   EQU   IOBHH
IOBCC2   EQU   IOBCC+1
IOBCC1   EQU   IOBCC
IOBBB2   EQU   IOBBB+1
IOBBB1   EQU   IOBBB
IOBM     EQU   IOBSEEK
IOBRSV46 EQU   IOBFL4
IOBRSV47 EQU   IOBFL4
IOBENT   EQU   IOBFL4
IOBEQP   EQU   IOBFL4
IOBBUS   EQU   IOBFL4
IOBDCK   EQU   IOBFL4
IOBREJ   EQU   IOBFL4
IOBOVR   EQU   IOBFL4
IOBCRILC EQU   IOBORG04+1
IOBCRDCC EQU   IOBORG04
IOBGQECB EQU   IOBORG03
IOBSWAP  EQU   IOBORG02+4
IOBDQADB EQU   IOBDQADA+1
IOBRSV13 EQU   IOBDEQIN
IOBRSV12 EQU   IOBDEQIN
IOBRSV11 EQU   IOBDEQIN
IOBRSV10 EQU   IOBDEQIN
IOBRSV09 EQU   IOBDEQIN
IOBRSV08 EQU   IOBDEQIN
IOBRSV07 EQU   IOBDEQIN
IOBDEQ   EQU   IOBDEQIN
IOBNECB  EQU   IOBORG01+4
IOBNIOBB EQU   IOBNIOBA+1
IOBFIRST EQU   IOBNFLG1
IOBUPERR EQU   IOBNFLG1
IOBSPAN  EQU   IOBNFLG1
IOBBKSPC EQU   IOBNFLG1
IOBUPDAT EQU   IOBNFLG1
IOBREAD  EQU   IOBNFLG1
IOBWRITE EQU   IOBNFLG1
IOBPRTOV EQU   IOBNFLG1
@NM00149 EQU   NIPPMCSW+4
@NM00148 EQU   NIPPMCSW
@NM00121 EQU   CMDELEM+6
@NM00120 EQU   TZREC+7
@NM00119 EQU   TZREC+4
@NM00118 EQU   TZREC+1
EAWEST   EQU   TZREC
RESERVED EQU   SMFMEM+2
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00117 EQU   CVTFIX+248
@NM00116 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRSV37 EQU   CVTDMSR
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
MSSPARE  EQU   BASES01+48
MSUCBAL  EQU   BASES01+44
MSUCBPR  EQU   BASES01+40
MSBOBECB EQU   BASES01+36
MSSJQ    EQU   BASES01+32
MSECB    EQU   BASES01+28
MSPBP    EQU   BASES01+24
MSERM    EQU   BASES01+22
MSPASS   EQU   BASES01+14
MSVRB    EQU   BASES01+6
MSQHR    EQU   MSFHF
@NM00115 EQU   MSFHF
MSPSDT   EQU   MSFHF
MSREPLYB EQU   MSFHF
MSFAX    EQU   MSFHF
MSTTT    EQU   MSFHF
MSCSD    EQU   MSFHF
MSNMF    EQU   MSFHF
MSJNF    EQU   MSSSA
MSYOUT   EQU   MSNWP
MSNRP    EQU   MSSSA
MSSRDR   EQU   MSREOF
MSWRLOG  EQU   MSSSA
MSNUPSW  EQU   MSSSA
MSWRPEN  EQU   MSSSA
MSSSSIPL EQU   MSINLSW
MSSUM    EQU   MSECBFL
MSMCR    EQU   MSECBFL
MSYSOUT  EQU   MSECBFL
MSYSIN   EQU   MSECBFL
MSATTN   EQU   MSECBFL
MSWTL    EQU   MSECBFL
MSWTO    EQU   MSECBFL
MSEXT    EQU   MSECBFL
MSCCS    EQU   MSPFG
MSBSP    EQU   MSPFG
MSSYT    EQU   MSPFG
MSSYN    EQU   MSPFG
MSICR    EQU   MSPFG
MSCMC    EQU   MSPFG
MSPNB    EQU   MSPFG
MSDATE   EQU   MSPFG
@NM00114 EQU   MSBTN
MSTN     EQU   MSBTN
@NM00113 EQU   MSBTN
@NM00112 EQU   MSBTN
MSSO     EQU   MSBTN
MSROLFLG EQU   MSBTN
MSCANFLG EQU   MSBTN
MSCONFLG EQU   MSBTN
MSPNIP   EQU   MSNTAL
MSQNIP   EQU   MSNTAL
MSCURE34 EQU   MSNTAL
@NM00111 EQU   MSNTAL
@NM00110 EQU   MSNTAL
@NM00109 EQU   MSNTAL
@NM00108 EQU   MSNTAL
MSNIP    EQU   MSNTAL
@NM00107 EQU   MS1BASEX+40
@NM00106 EQU   MS1BASEX+20
@NM00105 EQU   MS1BASEX
@NM00104 EQU   BASE+128
MSLGJSCB EQU   BASE+124
@NM00103 EQU   MSSTRTSW
MSSTRTP  EQU   MSSTRTSW
MSSTRTW  EQU   MSSTRTSW
@NM00102 EQU   MSWTRSW
MSWTRP   EQU   MSWTRSW
MSWTRW   EQU   MSWTRSW
@NM00101 EQU   MSWLOGSW
MSWLOGP  EQU   MSWLOGSW
MSWLOGW  EQU   MSWLOGSW
@NM00100 EQU   MSCLOSSW
MSCLOSP  EQU   MSCLOSSW
MSCLOSW  EQU   MSCLOSSW
BAASCB   EQU   BASE+100
BASP12   EQU   BASE+90
BASTCNT  EQU   BASE+88
BASESCT  EQU   BASE+86
BAJNCNT  EQU   BASE+84
BASUBECB EQU   BASE+80
BALOGCOM EQU   BASE+76
BADACNT  EQU   BASE+74
BATACNT  EQU   BASE+72
BAJBNR   EQU   BASE+64
BASP11   EQU   BASE+62
BALCCNT  EQU   BASE+61
BADUMPID EQU   BASE+60
BABCMAX  EQU   BASE+58
BAMONTR2 EQU   BASE+57
@NM00098 EQU   BAMONITR
BAMACTVE EQU   BAMONITR
@NM00097 EQU   BAMONITR
@NM00096 EQU   BAMONITR
@NM00095 EQU   BAMONITR
@NM00094 EQU   BAMONITR
BASPACE  EQU   BAMONITR
BADSN    EQU   BAMONITR
BADSO    EQU   BASE+52
BALOGECB EQU   BASE+48
@NM00093 EQU   BASPBYTE
@NM00092 EQU   BASPBYTE
@NM00091 EQU   BASPBYTE
@NM00090 EQU   BASPBYTE
@NM00089 EQU   BASPBYTE
BAMASCH  EQU   BASPBYTE
BATRACE  EQU   BASPBYTE
BAMSSTAR EQU   BASPBYTE
@NM00088 EQU   MSLOGST
@NM00087 EQU   MSLOGST
MSLOGSTA EQU   MSLOGST
MSLOGIPL EQU   MSLOGST
MSLOGDAR EQU   MSLOGST
MSLOGCOM EQU   MSLOGST
MSLOGTHD EQU   MSLOGST
MSLOGENQ EQU   MSLOGST
BAMIPAR2 EQU   BASE+44
BAMINPAR EQU   BASE+42
BAPKES   EQU   BASE+40
BAICTR   EQU   BASE+38
@NM00086 EQU   BASE+37
BADSET   EQU   BARSW
BANOSET  EQU   BARSW
BAMIDNT  EQU   BARSW
BAHR     EQU   BARSW
BAVU     EQU   BARSW
BAINTSET EQU   BARSW
BAIN     EQU   BARSW
BACV     EQU   BASE+32
@NM00085 EQU   BALOG
@NM00084 EQU   BALOG
@NM00083 EQU   BALOG
@NM00082 EQU   BALOG
@NM00081 EQU   BALOG
@NM00080 EQU   BALOG
@NM00079 EQU   BALOG
BALOGINT EQU   BALOG
MSLOGSVC EQU   BALGSTAT
BAPRC    EQU   BASE+20
BAQ      EQU   BASE+16
BAIPLCC  EQU   @NM00077+2
@NM00078 EQU   @NM00077
BAIPL    EQU   BASE+12
BALAD    EQU   BASE+8
BATRM    EQU   BASE+4
BACHN    EQU   BASE
NVTRMSG  EQU   NVT+540
NVTRLOCK EQU   NVT+536
NVTRCODE EQU   NVT+532
@NM00076 EQU   NVT+529
@NM00075 EQU   NVTFLPO
NVTFLWS  EQU   NVTFLPO
NVTFLQS  EQU   NVTFLPO
@NM00074 EQU   NVTFLPO
NVTSYSP  EQU   NVTFLPO
NVTFLLST EQU   NVTFLPO
NVTAPQE  EQU   NVT+524
NVTFBQE2 EQU   NVT+520
NVTFBQE1 EQU   NVT+516
@NM00073 EQU   NVT+512
NVTREALR EQU   NVT+508
NVTFASVT EQU   NVT+504
NVTLPALG EQU   NVT+496
NVTVRLNG EQU   NVT+492
NVTVRREG EQU   NVT+488
NVTLVIRT EQU   NVT+484
NVTDIRA  EQU   NVT+480
NVTLPAND EQU   NVT+476
NVTRMSS  EQU   NVT+472
NVTRPQE  EQU   NVT+468
NVTRLLE  EQU   NVT+464
NVTRJPQ  EQU   NVT+460
NVTVMSS  EQU   NVT+456
NVTVPQE  EQU   NVT+452
NVTVLLE  EQU   NVT+448
NVTVJPQ  EQU   NVT+444
NVTLSEC  EQU   NVTLOCAT+4
NVTLFST  EQU   NVTLOCAT
NVTXSEC  EQU   NVTXCTL+4
NVTXFST  EQU   NVTXCTL
@NM00072 EQU   NVT+425
NVTLPACT EQU   NVT+424
NVTCSLPG EQU   NVT+420
NVTCSIOB EQU   NVT+416
NVTCSLNM EQU   NVT+412
NVTCSLIB EQU   NVT+408
NVTBLDL  EQU   NVT+404
NVTVRBLD EQU   NVT+400
@NM00071 EQU   NVT+392
NVTVRTCB EQU   NVT+388
NVTVVTCB EQU   NVT+384
NVTSPUCB EQU   NVT+382
NVTQSCNT EQU   NVT+380
NVTQSBUF EQU   NVT+376
NVTRPAGE EQU   NVT+364
@NM00070 EQU   NVT+363
NVTABWS1 EQU   NVT+362
NVTABCD1 EQU   NVT+360
@NM00069 EQU   NVT+358
NVTCPUAD EQU   NVT+356
NVTTOD   EQU   NVT+352
NVTSPE   EQU   NVT+344
NVTMBEND EQU   NVT+340
NVTMBUF  EQU   NVT+336
NVTDCBSN EQU   NVT+332
NVTDCBOC EQU   NVT+328
NVTDCBIC EQU   NVT+324
@NM00068 EQU   NVT+308
NVTNMBLD EQU   NVT+304
NVTNIPM  EQU   NVT+292
NVTIX    EQU   NVTFLWSC
NVTFLWS1 EQU   NVTWPSW2+2
NVTIDPSW EQU   NVTWPSW2
NVTWPSW1 EQU   NVTWTPSW
NVTMCPSW EQU   NVT+216
@NM00067 EQU   NVT+212
@NM00066 EQU   NVTFLCN
NVTFLRAC EQU   NVTFLCN
NVTFLNCK EQU   NVTFLCN
NVTFLNHC EQU   NVTFLCN
NVTFLASM EQU   NVTFLCN
NVTMP    EQU   NVTFLCN
NVTFLIOC EQU   NVTFLCN
NVTFLAC  EQU   NVTFLCN
NVTFLSG  EQU   NVT+210
NVTTRACE EQU   NVT+208
NVTNXPTR EQU   NVT+204
NVTNXSIZ EQU   NVT+202
@NM00065 EQU   NVT+200
NVTSGPSA EQU   NVT+196
NVTN0MSG EQU   NVT+192
NVTVVPG1 EQU   NVT+188
NVTNBFND EQU   NVT+184
NVTNUCND EQU   NVT+180
NVTSTMAP EQU   NVT+176
NVTRTMSA EQU   NVT+172
NVTMFASA EQU   NVT+168
NVTLSPQE EQU   NVT+164
NVTALSQA EQU   NVT+160
NVTPQSAV EQU   NVT+156
NVTSVC60 EQU   NVT+148
NVTABSEC EQU   NVTABSAV+4
NVTABFST EQU   NVTABSAV
NVTNVSQA EQU   NVT+138
NVTRSVMN EQU   NVT+136
NVTNBMIN EQU   NVT+134
NVTRGNAV EQU   NVT+132
NVTLSQNO EQU   NVT+130
NVTSQANO EQU   NVT+128
NVTLSQAS EQU   NVT+124
NVTLNGFX EQU   NVT+120
NVTIGXER EQU   NVT+116
@NM00064 EQU   NVT+112
NVTASMAD EQU   NVT+108
NVTNVRSZ EQU   NVT+104
NVTMFA   EQU   NVT+100
NVTDSSNG EQU   NVT+96
NVTMSLNK EQU   NVT+92
NVTVVMDI EQU   NVT+88
NVTIGCER EQU   NVT+84
NVTVBLDL EQU   NVT+80
NVTSVCTB EQU   NVT+76
NVTASTCB EQU   NVT+72
NVTAASCB EQU   NVT+68
NVTMASCB EQU   NVT+64
NVTCMTCB EQU   NVT+60
NVTMSTCB EQU   NVT+56
@NM00063 EQU   NVTFLLB
NVTFLSLB EQU   NVTFLLB
@NM00062 EQU   NVTNPATR
NVTNPREU EQU   NVTNPREN
@NM00061 EQU   NVTNPREN
NVTNPSFX EQU   NVT+53
@NM00060 EQU   NVT+50
NVTNPSUF EQU   NVT
NIPPTSID EQU   NIPPTE+6
@NM00059 EQU   NIPPTATF
NIPPTMRG EQU   NIPPTATF
@NM00058 EQU   NIPPTOPF
NIPPTCAN EQU   NIPPTOPF
NIPPTLST EQU   NIPPTOPF
NIPPTOPI EQU   NIPPTOPF
NIPPTADR EQU   NIPPTE
PTABEND  EQU   PARMTAB+288
@NM00057 EQU   PARMTAB+284
RSU      EQU   PARMTAB+280
@NM00056 EQU   @NM00054+1
@NM00055 EQU   NIPPAFLG
@NM00053 EQU   PARMTAB+268
PURGE    EQU   PARMTAB+264
@NM00052 EQU   PARMTAB+260
WTORPLY  EQU   PARMTAB+256
@NM00051 EQU   PARMTAB+252
WTOBFRS  EQU   PARMTAB+248
@NM00050 EQU   PARMTAB+244
VRREGN   EQU   PARMTAB+240
@NM00049 EQU   PARMTAB+236
VAL      EQU   PARMTAB+232
@NM00048 EQU   PARMTAB+228
SYSP     EQU   PARMTAB+224
@NM00047 EQU   PARMTAB+220
SQA      EQU   PARMTAB+216
@NM00046 EQU   PARMTAB+212
@NM00045 EQU   PARMTAB+204
REAL     EQU   PARMTAB+200
@NM00044 EQU   PARMTAB+196
PAGEO    EQU   PARMTAB+192
@NM00043 EQU   PARMTAB+188
PAGEP    EQU   PARMTAB+184
@NM00042 EQU   PARMTAB+180
OPT      EQU   PARMTAB+176
@NM00041 EQU   PARMTAB+172
OPI      EQU   PARMTAB+168
@NM00040 EQU   PARMTAB+164
NUCMAP   EQU   PARMTAB+160
@NM00039 EQU   PARMTAB+156
MLPA     EQU   PARMTAB+152
@NM00038 EQU   PARMTAB+148
MAXUSER  EQU   PARMTAB+144
@NM00037 EQU   PARMTAB+140
@NM00036 EQU   PARMTAB+132
@NM00035 EQU   PARMTAB+124
LNK      EQU   PARMTAB+120
@NM00034 EQU   PARMTAB+116
IPS      EQU   PARMTAB+112
@NM00033 EQU   PARMTAB+108
HARDCPY  EQU   PARMTAB+104
@NM00032 EQU   PARMTAB+100
FIX      EQU   PARMTAB+96
@NM00031 EQU   PARMTAB+92
DUMP     EQU   PARMTAB+88
@NM00030 EQU   PARMTAB+84
CVIO     EQU   PARMTAB+80
@NM00029 EQU   PARMTAB+76
CSA      EQU   PARMTAB+72
@NM00028 EQU   PARMTAB+68
CPQE     EQU   PARMTAB+64
@NM00027 EQU   PARMTAB+60
CONT     EQU   PARMTAB+56
@NM00026 EQU   PARMTAB+52
@NM00025 EQU   PARMTAB+44
CLPA     EQU   PARMTAB+40
@NM00024 EQU   PARMTAB+36
BLDLF    EQU   PARMTAB+32
@NM00023 EQU   PARMTAB+28
BLDL     EQU   PARMTAB+24
@NM00022 EQU   PARMTAB+20
APG      EQU   PARMTAB+16
@NM00021 EQU   PARMTAB+12
APF      EQU   PARMTAB+8
PTABSTRT EQU   PARMTAB
NIPPABUF EQU   NIPPAREA+548
NIPPAPTB EQU   NIPPAREA+252
@NM00020 EQU   NIPPAREA+248
@NM00019 EQU   NIPPAECB+1
@NM00018 EQU   NIPPAIOD+37
NIPPATXT EQU   NIPPAIOD
@NM00017 EQU   NIPPAREA+30
@NM00016 EQU   NIPPABDL+15
NIPPA2BF EQU   NIPPABDH
@NM00015 EQU   NIPPAREA
NIPPABYT EQU   NIPPAHDR+4
NIPPAQ   EQU   NIPPAHDR
NSCHDCPU EQU   NIPSCHDL+8
NSCHDPRM EQU   NIPSCHDL+4
NSCHDPTR EQU   NIPSCHDL
@NM00014 EQU   NIPOPNPL+22
NOPNRC   EQU   NIPOPNPL+21
NOPNFLSX EQU   NOPNFL
NOPNFLLC EQU   NOPNFL
NOPNFLLB EQU   NOPNFL
NOPNFLNB EQU   NOPNFL
NOPNFLI  EQU   NOPNFL
NOPNFLM  EQU   NOPNFL
NOPNFAU  EQU   NOPNFL
NOPNFRS  EQU   NOPNFL
NOPNUCB  EQU   NIPOPNPL+16
NOPNDCB  EQU   NIPOPNPL+12
NOPNDSA  EQU   NOPNDS
@NM00013 EQU   NIPMNTPL+21
NMNTFLB  EQU   NMNTFL
NMNTFLC  EQU   NMNTFL
NMNTFLI  EQU   NMNTFL
NMNTFUS  EQU   NMNTFL
@NM00012 EQU   NMNTFL
NMNTDT   EQU   NIPMNTPL+18
NMNTUCB  EQU   NMNTVS
NMNTDSA  EQU   NMNTDS
NIPSPEA  EQU   NIPSPE+4
NIPSPEQ  EQU   NIPSPE
NWTORMSG EQU   NWTORLST+12
@NM00011 EQU   NWTORLST+11
@NM00010 EQU   NWTORFL
NWTORFLB EQU   NWTORFL
@NM00009 EQU   NWTORFL
NWTORFLA EQU   NWTORFL
NMTORRDL EQU   NWTORLST+8
NWTORECB EQU   NWTORLST+4
NWTORRPA EQU   NWTORLST
@NM00008 EQU   NWTOFL
NWTOFLNC EQU   NWTOFL
NWTOFLNH EQU   NWTOFL
NWTOLNG  EQU   NWTOHDR
ECBEVNT  EQU   ECBBYTE3
@NM00007 EQU   ECBBYTE3
@NM00006 EQU   ECBEVTBA
@NM00005 EQU   ECBCC
ECBPOSTB EQU   ECBCC
ECBWAITB EQU   ECBCC
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBRV034 EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBRV032 EQU   UCBFLP1
UCBRV031 EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00004
UCBHALI  EQU   @NM00004
UCBRSV09 EQU   @NM00004
UCBRSV08 EQU   @NM00004
UCBRSV07 EQU   @NM00004
UCBRSV06 EQU   @NM00004
UCBRSV05 EQU   @NM00004
UCBRSV04 EQU   @NM00004
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBFLB7  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBRSV02 EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBRV002 EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00001 EQU   UCB
IOBRSV19 EQU   IOBINCAM+1
IOBOLTST EQU   IOBBTAMF
IOBRFTMG EQU   IOBBTAMF
IOBRSV17 EQU   IOBBTAMF
IOBRSV16 EQU   IOBBTAMF
IOBRSV15 EQU   IOBBTAMF
IOBRSV14 EQU   IOBBTAMF
IOBINUSE EQU   IOBBTAMF
IOBPRMER EQU   IOBBTAMF
IOBRSTRB EQU   IOBRESTR+1
IOBREPOS EQU   IOBRESTR
IOBDCBPB EQU   IOBDCBPT+1
IOBRSV44 EQU   IOBFLAG4
IOBJES3I EQU   IOBFLAG4
IOBRSV42 EQU   IOBFLAG4
IOBRSV41 EQU   IOBFLAG4
IOBRSV40 EQU   IOBFLAG4
IOBRSV39 EQU   IOBFLAG4
IOBRSV38 EQU   IOBFLAG4
IOBGDPOL EQU   IOBFLAG4
IOBSTRTB EQU   IOBSTART+1
IOBSIOCC EQU   IOBSTART
IOBSTBYT EQU   IOBIOCSW+3
IOBCMDA  EQU   IOBIOCSW
IOBLOG   EQU   IOBFL3
IOBICL   EQU   IOBFL3
IOBMSG   EQU   IOBFL3
IOBCNC   EQU   IOBFL3
IOBACU   EQU   IOBFL3
IOBCDC   EQU   IOBFL3
IOBICC   EQU   IOBFL3
IOBCCC   EQU   IOBFL3
IOBECBPB EQU   IOBECBPT+1
IOBECBCC EQU   IOBECBPT
IOBS1B7  EQU   IOBSENS1
IOBS1B6  EQU   IOBSENS1
IOBS1B5  EQU   IOBSENS1
IOBS1B4  EQU   IOBSENS1
IOBS1B3  EQU   IOBSENS1
IOBS1B2  EQU   IOBSENS1
IOBS1B1  EQU   IOBSENS1
IOBS1B0  EQU   IOBSENS1
IOBSNSC9 EQU   IOBS0B7
IOBS0B6  EQU   IOBSENS0
IOBS0B5  EQU   IOBSENS0
IOBS0B4  EQU   IOBSENS0
IOBS0B3  EQU   IOBSENS0
IOBS0B2  EQU   IOBSENS0
IOBS0B1  EQU   IOBSENS0
IOBS0B0  EQU   IOBSENS0
IOBPNCH  EQU   IOBFLAG2
IOBSTATO EQU   IOBFLAG2
IOBSKUPD EQU   IOBFLAG2
IOBALTTR EQU   IOBFLAG2
IOBRRT2  EQU   IOBRDHA0
IOBRRT3  EQU   IOBPURGE
IOBSENSE EQU   IOBFLAG2
IOBHALT  EQU   IOBFLAG2
IOBSPSVC EQU   IOBRSTRT
IOBUNREL EQU   IOBFLAG1
IOBIOERR EQU   IOBFLAG1
IOBFCREX EQU   IOBCYCCK
IOBRPSTN EQU   IOBFLAG1
IOBERRTN EQU   IOBFLAG1
IOBCMDCH EQU   IOBFLAG1
IOBDATCH EQU   IOBFLAG1
IOBCNOPA EQU   IOBPREFX+12
IOBCICB  EQU   IOBPREFX+8
IOBCECB  EQU   IOBPREFX+4
IOBCONOP EQU   IOBPREFX+3
IOBCINOP EQU   IOBPREFX+2
IOBRSV05 EQU   IOBPREFX+1
IOBPCI   EQU   IOBCFLG1
IOBRSTCH EQU   IOBCFLG1
IOBABAPP EQU   IOBCFLG1
IOBPTST  EQU   IOBCFLG1
IOBRSV04 EQU   IOBCFLG1
IOBRSV03 EQU   IOBCFLG1
IOBRSV02 EQU   IOBCFLG1
IOBRSV01 EQU   IOBCFLG1
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00236 EQU   @RC00232
@RC00330 EQU   @RC00327
@RC00344 EQU   @RC00341
@RC00368 EQU   @RC00365
@RC00384 EQU   @EL00004
@RF00383 EQU   @EL00004
@RC00414 EQU   @EL00005
@RC00429 EQU   @EL00005
@RC00461 EQU   @EL00006
@RC00526 EQU   @RC00524
@RC00549 EQU   @RC00547
@RC00566 EQU   @RC00565
@RF00583 EQU   @EL00008
@RC00592 EQU   @EL00008
@RC00587 EQU   @EL00008
@RC00663 EQU   @RC00642
@RT00722 EQU   NIPPMPRD
@RT00733 EQU   NIPPMPFN
@RT00735 EQU   NIPPMPER
@RT00744 EQU   NIPPMPRD
@RT00752 EQU   NIPPMPXT
@RF00783 EQU   NIPPMTER
@RF00785 EQU   NIPPMTER
@RT00803 EQU   NIPPMPRD
@RF00803 EQU   NIPPMTND
@RF00801 EQU   NIPPMPBK
@RT00819 EQU   NIPPMPXT
@RC00345 EQU   @RC00344
@RC00387 EQU   @RC00384
@RC00385 EQU   @RC00384
@RC00430 EQU   @RC00429
@RC00668 EQU   @RC00663
@ENDDATA EQU   *
         END   IEAVNP13,(C'PLS1234',0603,74240)
