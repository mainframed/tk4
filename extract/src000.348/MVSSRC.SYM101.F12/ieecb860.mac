         TITLE 'COMMAND PROCESSOR STAE CREATION/EXIT ROUTINE-IEECB860  *
                        '
IEECB860 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(24)                                             0001
         DC    C'IEECB860 78041  UZ16773 '                         0001
IEECB861 DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00076-IEECB861)
         ENTRY IEECB861
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
*    R6=R1;                      /* PUT INPUT PARAM REG, ADDR OF CSCB*/
         LR    R6,R1                                               0040
*    R7=R14;                     /* PUT RETURN ADDR REG              */
         LR    R7,R14                                              0041
*    R0=PARMAR;                  /* THE DATA AREA IN SUBPOOL 0       */
         L     R0,PARMAR                                           0042
*    GEN(GETMAIN  R,LV=(0));     /* 100 BYTE AREA FROM SUBPOOL 0     */
         GETMAIN  R,LV=(0)
*    R5=R1;                      /* THE DATA AREA ADDR BY REG 5      */
         LR    R5,R1                                               0044
*    CMDLEN=LEN;                 /* PUT COMMAND LENGTH INTO DATA AREA*/
         L     @12,ADDRCMD(,R6)                                    0045
         MVC   CMDLEN(1,R5),LEN(@12)                               0045
*    CMDNME(1:LEN)=CMD;          /* PUT COMMAND INTO DATA AREA       */
         SLR   @10,@10                                             0046
         IC    @10,LEN(,@12)                                       0046
         BCTR  @10,0                                               0046
         EX    @10,@SM00654                                        0046
*    IF CSCBPTR ^= 0                                               0047
*      THEN DO;                                                    0047
         L     @12,CSCBPTR(,R6)                                    0047
         LTR   @12,@12                                             0047
         BZ    @RF00047                                            0047
*           UCMPCH=CHUCMP;       /* PUT IN ROUTING CODE FOR CONSOLE  */
         MVC   UCMPCH(1,R5),CHUCMP(@12)                            0049
*                                /* WHO ISSUED COMMAND (1 BYTE)      */
*           CNIDCH=CHCNID;       /* ROUTE CODE FOR CONSOLE WHICH IS  */
         MVC   CNIDCH(1,R5),CHCNID(@12)                            0050
*                                /* RECEIVING COMMAND (1 BYTE)       */
*           ASIDCH=CHASID;       /* ROUTE CODE FOR TERMINAL   Y02653 */
         MVC   ASIDCH(2,R5),CHASID(@12)                            0051
*                                /* ISSUED COMMAND (2 BYTES)         */
*           END;                                                   0052
*    PASSER=R6;                  /* SAVE INPUT REG                   */
@RF00047 ST    R6,PASSER(,R5)                                      0053
*    SVREN2=R7;                  /*SAVE PASS BACK UNDER FREEIT       */
         ST    R7,SVREN2(,R5)                                      0054
*    RELEASE (R6,R7);                                              0055
*    MSGAREA(1:16)=LSTAE;        /* PUT LIST FORM INTO SPACE  Y02653 */
         MVC   MSGAREA(16,R5),LSTAE                                0056
*    RESTRICT (R3);                                                0057
*    R3=ADDR(IEECB861);          /* STAE EXIT ROUTINE ADDRDR         */
         L     R3,@CA00617                                         0058
*    R1=ADDR(MSGAREA);           /* STAE USER DATA AREA              */
         LR    R1,R5                                               0059
*    GEN(ESTAE  (3),CT,RECORD=YES,PARAM=(5),MF=(E,(1)));   /* Y02653 */
         ESTAE  (3),CT,RECORD=YES,PARAM=(5),MF=(E,(1))
*    RELEASE (R3);                                                 0061
*    /****************************************************************/
*    /* R15=0 THEN STAE ENVIRONMENT CREATED                          */
*    /* ELSE SET INDICATORS AND TAKE DUMP IN STAE EXIT ROUTINE       */
*    /****************************************************************/
*    IF R15 = 0                                                    0062
*      THEN DO;                  /* IF ZERO,STAE ENVIRONMENT CREATED */
         SLR   @14,@14                                             0062
         CR    R15,@14                                             0062
         BNE   @RF00062                                            0062
*           R1=PASSER;           /* RESTORE INPUT REG                */
         L     R1,PASSER(,R5)                                      0064
*           R14=SVREN2;          /* RESTORE RETURN ADDR              */
         L     R14,SVREN2(,R5)                                     0065
*           RETURN CODE(0);      /* RETURN TO INVOKER                */
         SLR   @12,@12                                             0066
         LR    @15,@12                                             0066
@EL00001 DS    0H                                                  0066
@EF00001 DS    0H                                                  0066
@ER00001 BR    @14                                                 0066
*           END;                                                   0067
*      ELSE DO;                  /* IF NONZERO,STAE ENVRNMT NOT CREAT*/
@RF00062 DS    0H                                                  0069
*           CALL FAILDUMP;       /* INVOKE SUBROUTINE                */
         BAL   @14,FAILDUMP                                        0069
*           GOTO FAILURE;        /* DO FAILURE PROCESSING     Y02653 */
         B     FAILURE                                             0070
*           END;                                                   0071
*FAILDUMP: PROCEDURE OPTIONS(DONTSAVE); /* DUMP/FAILURE    @YM2767P */
FAILDUMP DS    0H                                                  0073
*                                       /* OPTION SUBROUTINE         */
*           DODUMP = '1'B;       /* INDICATE DUMP REQUIRED    Y02653 */
*           DOFAIL = '1'B;       /* INDICATE FAILURE ENTRY    Y02653 */
         OI    DODUMP(R5),B'01010000'                              0074
*           END FAILDUMP;                                          0075
@EL00002 DS    0H                                                  0075
@EF00002 DS    0H                                                  0075
@ER00002 BR    @14                                                 0075
*    /****************************************************************/
*    /*     STAE EXIT ROUTINE                                        */
*    /*     IF R0 = 12 THEN R1 = ABEND CODE AND R2 -> PARM AREA.     */
*    /*     IF R0 ^= 12 THEN R1 -> SDWA.                             */
*    /****************************************************************/
*IEECB861:ENTRY;                                                   0076
@EP00076 DS    0H                                                  0077
*           RESTRICT (R2,R9);                              /* Y02653 */
*    IF R0 ^= 12                 /* WAS SDWA PASSED?          Y02653 */
*      THEN DO;                  /* YES - INFORMATION IN IT   Y02653 */
         C     R0,@CF00047                                         0078
         BE    @RF00078                                            0078
*        R5=SDWAPARM;            /* GET ADDR OF USER AREAREA  Y02653 */
         L     R5,SDWAPARM(,R1)                                    0080
*        SVREN2=R14;             /* SAVE RETURN ADDR        @YM02150 */
         ST    R14,SVREN2(,R5)                                     0081
*        PASSER=R1;              /* SAVE SDWA ADDRESS       @YM3525P */
         ST    R1,PASSER(,R5)                                      0082
*        R9=SDWAABCC;            /* SAVE ABEND FOR LATER USE  Y02653 */
         L     R9,SDWAABCC(,R1)                                    0083
*        IF R9 = '00000066'X     /* SYSTEM RESOURCE MANAGER @YM2764P */
*                                /* ABEND?                           */
*          THEN DO;                                                0084
         C     R9,@CF00627                                         0084
         BNE   @RF00084                                            0084
*            CALL FAILDUMP;      /* INVOKE SUBROUTINE                */
         BAL   @14,FAILDUMP                                        0086
*            GOTO FAILURE;       /* DO FAILURE PROCESSING            */
         B     FAILURE                                             0087
*          END;                                                    0088
*        ELSE DO;                                                  0089
@RF00084 DS    0H                                                  0090
*          DOABND = '1'B;        /* ABEND CODE PRESENT        Y02653 */
         OI    DOABND(R5),B'10000000'                              0090
*          IF SDWAPERC = '0'B    /* IF NOT PERCOLATED         Y02653 */
*             & SDWAMCHK = '0'B  /* OR MACHINE CHECK        @YM2768P */
*            THEN DODUMP = '1'B; /* INDICATE DUMP REQUIRED    Y02653 */
         TM    SDWAPERC(R1),B'00010000'                            0091
         BNZ   @RF00091                                            0091
         TM    SDWAMCHK(R1),B'10000000'                            0091
         BNZ   @RF00091                                            0091
         OI    DODUMP(R5),B'01000000'                              0092
*        END;                                                      0093
@RF00091 DS    0H                                                  0094
*      END;                                                        0094
*    ELSE DO;                    /* NO SDWA THE INFORMATION   Y02653 */
         B     @RC00078                                            0095
@RF00078 DS    0H                                                  0096
*                                /* IS IN REGISTERS.          Y02653 */
*      R5 = R2;                  /* GET POINTER TO PARM AREA  Y02653 */
         LR    R5,R2                                               0096
*        SVREN2 = R14;           /* SAVE RETURN ADDRESS      @YM3466P*/
         ST    R14,SVREN2(,R5)                                     0097
*      R9 = R1;                  /* SAVE THE ABEND CODE       Y02653 */
         LR    R9,R1                                               0098
*      IF R9 = '00000066'X       /* SYSTEM RESOURCE MANAGER @YM2764P */
*                                /* ABEND?                           */
*        THEN DO;                                                  0099
         C     R9,@CF00627                                         0099
         BNE   @RF00099                                            0099
*          CALL FAILDUMP;        /* INVOKE SUBROUTINE                */
         BAL   @14,FAILDUMP                                        0101
*          GOTO FAILURE;         /* DO FAILURE PROCESSING            */
         B     FAILURE                                             0102
*        END;                                                      0103
*      ELSE DO;                                                    0104
@RF00099 DS    0H                                                  0105
*        DODUMP = '1'B;          /* INDICATE DUMP REQUIRED    Y02653 */
*        DOABND = '1'B;          /* INDICATE ABEND CODE       Y02653 */
*        DOBRCH = '1'B;          /* INDICATE BRANCH RETURN    Y02653 */
         OI    DODUMP(R5),B'11100000'                              0107
*      END;                                                        0108
*    END;                                                          0109
*FAILURE: ;                      /* ENTRY POINT FOR FAILURES  Y02653 */
@RC00078 DS    0H                                                  0110
FAILURE  DS    0H                                                  0111
*    WRKSV=R14;                  /* SAVE RETURN ADDR          Y02653 */
         ST    R14,WRKSV(,R5)                                      0111
*    IF DODUMP   = '1'B THEN     /* TAKE DUMP IF FAILURE      Y02653 */
         TM    DODUMP(R5),B'01000000'                              0112
         BNO   @RF00112                                            0112
*       DO;                                                /* Y02653 */
*        DUMPMAP(1:DUMPLEN) = DUMPPARM; /* DUMP LIST FORM    @ZA24758*/
         SLR   @12,@12                                             0114
         IC    @12,DUMPLEN                                         0114
         BCTR  @12,0                                               0114
         EX    @12,@SM00658                                        0114
*        IF CMDLEN ^= '00'X THEN /* PROCESSING COMMAND?      @ZA24758*/
         CLI   CMDLEN(R5),X'00'                                    0115
         BE    @RF00115                                            0115
*                                /* YES, INIT HDR VARIABLE   @ZA24758*/
*            DUMPVAR1(1:CMDLEN) = CMDNME; /* INIT COMMAND    @ZA24758*/
         SLR   @12,@12                                             0116
         IC    @12,CMDLEN(,R5)                                     0116
         BCTR  @12,0                                               0116
         EX    @12,@SM00660                                        0116
*        R1 = ADDR(DUMPMAP);    /* ADDR OF DUMP PARMS        @ZA24758*/
@RF00115 LR    R1,R5                                               0117
*        R7 = ADDR(DUMPTXT);     /* HDR ADDR TO REG          @ZA24758*/
         LA    R7,DUMPTXT(,R5)                                     0118
*        GEN REFS(R1,R7)(SDUMP HDRAD=(R7),MF=(E,(1)));    /* @ZA24758*/
         SDUMP HDRAD=(R7),MF=(E,(1))
*        RESTRICT (R7,R8);                                         0120
*        R7=R15;                 /* SAVE RETURN CODE          Y02653 */
         LR    R7,R15                                              0121
*       END;                                                       0122
*       ELSE R7 = 4;             /* INDICATE NO DUMP TAKEN    Y02653 */
         B     @RC00112                                            0123
@RF00112 LA    R7,4                                                0123
*    MPTR=ADDR(MSGAREA);         /* POINTER TO END OF CURRENT MSG    */
@RC00112 LR    MPTR,R5                                             0124
*    M(1:11)=ABMSG;              /* BASIC WTO MESSAGE                */
         MVC   M(11,MPTR),ABMSG                                    0125
*    MPTR=MPTR+11;               /* INCR MPTR TO END OF CURRENT MSG  */
         AL    MPTR,@CF00032                                       0126
*    M(1:1)=' ';                 /* MOVE IN BLANK SP                 */
         MVI   M(MPTR),C' '                                        0127
*    MPTR=MPTR+1;                /* INCRE MPTR TO END OF CURRENT MSG */
         LA    @12,1                                               0128
         ALR   MPTR,@12                                            0128
*    M(1:CMDLEN)=CMDNME;         /* MOVE IN COMMAND NAME             */
         SLR   @10,@10                                             0129
         IC    @10,CMDLEN(,R5)                                     0129
         LR    @06,@10                                             0129
         BCTR  @06,0                                               0129
         EX    @06,@SM00662                                        0129
*    MPTR=MPTR+CMDLEN;           /* INCRE PTR TO END OF CURRENT MSG  */
         ALR   MPTR,@10                                            0130
*    M(1:1)=' ';                 /* MOVE IN BLANK SP                 */
         MVI   M(MPTR),C' '                                        0131
*    MPTR=MPTR+1;                /* INCRE PTR TO END OF CURRENT MSG  */
         ALR   MPTR,@12                                            0132
*    /****************************************************************/
*    /* R9 HOLDS ABEND CODE, IF ZERO MEANS NO ABEND                  */
*    /* OTHERWISE R9 HAS ABEND CODE TO MOVE INTO WTO MESSAGE         */
*    /****************************************************************/
*    IF DOABND = '1'B THEN       /* ZERO MEANS NO ABEND              */
         TM    DOABND(R5),B'10000000'                              0133
         BNO   @RF00133                                            0133
*       DO;                                                        0134
*        M(1:17)=ABEND;          /* MOVE IN ABEND CODE               */
         MVC   M(17,MPTR),ABEND                                    0135
*        R9 = R9 / 256;          /* SRL 8, MOVE ABEND CODE TO RIGHT  */
         LR    @00,R9                                              0136
         SRDA  @00,32                                              0136
         D     @00,@CF00632                                        0136
         LR    R9,@01                                              0136
*        CODE=R9;                /* STORE CODE TO TRANSLATE          */
         ST    R9,CODE(,R5)                                        0137
*        GEN(UNPK 13(4,8),90(2,5));/* UNPACK INTO MESSAGE AREA       */
         UNPK 13(4,8),90(2,5)
*        GEN(OI   16(8),X'F0');  /* OR IN F FOR LAST BYTE            */
         OI   16(8),X'F0'
*        GEN(TR   14(3,8),TABLE);/* TABLE TRANSLATE PRINTABLE CHAR   */
         TR   14(3,8),TABLE
*        GEN(MVI  13(8),X'40');  /* BLANK OUT CHARACTER              */
         MVI  13(8),X'40'
*        MPTR=MPTR+17;           /* UPDATE MSG PTR TO END OF MSG     */
         AL    MPTR,@CF00036                                       0142
*       END;                                                       0143
*      ELSE DO;                                                    0144
         B     @RC00133                                            0144
@RF00133 DS    0H                                                  0145
*           M(1:14)=FAILED;       /* MOVE IN FAILED MSGG             */
         MVC   M(14,MPTR),FAILED                                   0145
*           MPTR=MPTR+14;         /* INCRE PTR TO END OF MSG MSG     */
         AL    MPTR,@CF00040                                       0146
*           END;                                                   0147
*    /****************************************************************/
*    /* R7 HOLDS RETURN CODE FROM SDUMP, IF ZERO THEN GOOD DUMP      */
*    /* OTHERWISE SOME ERROR OCCURRED AS INDICATED BY RETURN CODE    */
*    /****************************************************************/
*    IF R7 = 0                                                     0148
*      THEN DO;                  /* MOVE IN SUCCESSFUL DUMP MSG      */
@RC00133 LTR   R7,R7                                               0148
         BNZ   @RF00148                                            0148
*         M(1:8)=DUMPED;         /* DUMPED                           */
         MVC   M(8,MPTR),DUMPED                                    0150
*         MPTR=MPTR+8;           /* INCRE PTR TO END OF CURRENT MSG  */
         AL    MPTR,@CF00044                                       0151
*           END;                                                   0152
*    M(1:12)=TERMINAT;           /* MOVE IN TERMINATED MSG           */
@RF00148 MVC   M(12,MPTR),TERMINAT                                 0153
*    MPTR=MPTR+12;               /* INCRE PTR TO END OF CURRENT MSG  */
         AL    MPTR,@CF00047                                       0154
*    RELEASE (R7);                                                 0155
*    /****************************************************************/
*    /* IF ASID IN CSCB IS NONZERO THEN TERMINAL SENT COMMAND        */
*    /* OTHERWISE CHECK CONSOLE IDS TO SEE WHERE TO SEND INFO MSG    */
*    /****************************************************************/
*NXTPRT:   IF ASIDCH ^= '0000'X                            /* Y02653 */
*           THEN DO;             /* ID TERMINAL ISSUING COMMAND      */
NXTPRT   CLC   ASIDCH(2,R5),@CB00634                               0156
         BE    @RF00156                                            0156
*                RESTRICT (R4);                                    0158
*                R4=ASIDCH;      /* SEND MSG TO TERMINAL      Y02653 */
         SLR   R4,R4                                               0159
         ICM   R4,3,ASIDCH(R5)                                     0159
*                R0=(MPTR-ADDR(MSGAREA))-4; /* FIGURE MSG LENGTH     */
         LA    @12,4                                               0160
         LR    R0,MPTR                                             0160
         SLR   R0,R5                                               0160
         SLR   R0,@12                                              0160
*                R1=ADDR(MSGAREA)+4; /* POINT DIRECTLY TO MSG        */
         ALR   @12,R5                                              0161
         LR    R1,@12                                              0161
*                GEN(TPUT  (1),(0),TJID=(4));                      0162
         TPUT  (1),(0),TJID=(4)
*                R0 = 0;                                           0163
         SLR   R0,R0                                               0163
*                RELEASE (R4);                                     0164
*                MAC3='10004040'X;/*                               0165
*                                   MOVE IN WTO DESRIPTOR,ROUTE CODE */
         MVC   MAC3(4,MPTR),@CB00636                               0165
*                END;                                              0166
*           ELSE DO;                                               0167
         B     @RC00156                                            0167
@RF00156 DS    0H                                                  0168
*    /****************************************************************/
*    /* IF UCMP IN CSCB NONZERO THEN SEND MSG TO CONSOLE THAT ISSUED */
*    /* OTHERWISE CHECK CNID IN CSCB FOR ID OF CONDOLE               */
*    /****************************************************************/
*                MAC3='10000040'X;/*                               0168
*                                   MOVE IN DESCRPTOR CODE AND ROUTC */
         MVC   MAC3(4,MPTR),@CB00637                               0168
*                IF UCMPCH ^= '00'X                                0169
*                  THEN R0=UCMPCH;  /* ID CONSOLE THAT ISSUED CMD    */
         CLI   UCMPCH(R5),X'00'                                    0169
         BE    @RF00169                                            0169
         SLR   R0,R0                                               0170
         IC    R0,UCMPCH(,R5)                                      0170
*                  ELSE DO;                                        0171
         B     @RC00169                                            0171
@RF00169 DS    0H                                                  0172
*                       R0=CNIDCH;/* ID CNSL RECEIVING CMD  @YM3465P */
         SLR   R0,R0                                               0172
         IC    R0,CNIDCH(,R5)                                      0172
*                  END;                                            0173
*                END;                                              0174
@RC00169 DS    0H                                                  0175
*    MSGLEN=MPTR-ADDR(MSGAREA);  /* FIGURE MESSAGE LENGTH            */
@RC00156 LR    @12,MPTR                                            0175
         SLR   @12,R5                                              0175
         STH   @12,MSGLEN(,R5)                                     0175
*    R1=ADDR(MSGAREA);           /* ADDR OF BEGINNING OF WTO MSG     */
         LR    R1,R5                                               0176
*    GEN(WTO  MF=(E,(R1)));      /* ISSUE WTO                        */
         WTO  MF=(E,(R1))
*    RESTRICT (R6,R7);           /* SET ASIDE EXIT INDICATORS Y02653 */
*    IF DOFAIL = '1'B            /* THIS FAIL ENTRY           Y02653 */
*       THEN R6 = 1;             /* INDICATE FAIL ENTRY       Y02653 */
         TM    DOFAIL(R5),B'00010000'                              0179
         BNO   @RF00179                                            0179
         LA    R6,1                                                0180
*       ELSE R6 = 0;             /* NOT FAIL TYPE ENTRY       Y02653 */
         B     @RC00179                                            0181
@RF00179 SLR   R6,R6                                               0181
*    IF DOBRCH = '1'B            /* BRANCH INDICATOR ON       Y02653 */
*       THEN R7 = 1;             /* INDICATE BRANCH RETURN    Y02653 */
@RC00179 TM    DOBRCH(R5),B'00100000'                              0182
         BNO   @RF00182                                            0182
         LA    R7,1                                                0183
*       ELSE R7 = 0;             /* INDICATE NOT BRANCH RTN   Y02653 */
         B     @RC00182                                            0184
@RF00182 SLR   R7,R7                                               0184
*    R1 = R5;                    /* ADDR OF FREEMAIN AREA     Y02653 */
@RC00182 LR    R1,R5                                               0185
*    R0 = PARMAR;                /* LENGTH OF USER DATA AREA  Y02653 */
         L     R0,PARMAR                                           0186
*    RESTRICT (R4);              /* SAVE ADDRESS ACROSS SVC   Y02653 */
*    R4 = SVREN2;                /* SAVE RETURN ADDRESS       Y02653 */
         L     R4,SVREN2(,R5)                                      0188
*    R2 = PASSER;                /* SAVE INPUT INFORMATION    Y02653 */
         L     R2,PASSER(,R5)                                      0189
*    GEN(FREEMAIN  R,LV=(0),A=(1)); /* FREE DATA AREA         Y02653 */
         FREEMAIN  R,LV=(0),A=(1)
*    R1 = R2;                    /* RESTORE INPUT REG         Y02653 */
         LR    R1,R2                                               0191
*    R14 = R4;                   /* RESTORE RETURN ADDR       Y02653 */
         LR    R14,R4                                              0192
*    IF R6 = 0 &                 /* THIS NOT FAILURE RETURN   Y02653 */
*       R7 = 0 THEN              /* AND NOT BRANCH ENTRY      Y02653 */
         SLR   @12,@12                                             0193
         CR    R6,@12                                              0193
         BNE   @RF00193                                            0193
         CR    R7,@12                                              0193
         BNE   @RF00193                                            0193
*       DO;                      /* THEN SDWA PRESENT USE IT  Y02653 */
*         DO;  /*SETRP RECORD(YES)RECPARM(LINF)RC(0)DUMP(NO)*/     0195
*           RESPECIFY (GPR00P,GPR01P,GPR14P,GPR15P) RSTD;          0196
*           GPR01P->SDWARCDE = 0;  /*SAVE RC VALUE*/               0197
         MVI   SDWARCDE(GPR01P),X'00'                              0197
*           GPR01P->SDWARCRD = '1'B;  /*TURN ON RECORD INDICATOR*/ 0198
         OI    SDWARCRD(GPR01P),B'10000000'                        0198
*           GPR15P = ADDR(LINF);  /*ACCESS RECORD PARAMETER LIST*/ 0199
         LA    GPR15P,LINF                                         0199
*           GPR01P->SDWARECP = GPR15P ->I256C(1:24);  /*COPY RECORD PAR
*METERS*/                                                          0200
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0200
*           GPR01P->SDWAREQ = '0'B;  /*TURN OFF DUMP INDICATOR*/   0201
         NI    SDWAREQ(GPR01P),B'01111111'                         0201
*           RESPECIFY (GPR00P,GPR01P,GPR14P,GPR15P) UNRSTD;        0202
*         END;  /* @YM3501P */                                     0203
*        RETURN;                 /* RETURN TO ASIR            Y02653 */
         B     @EL00001                                            0204
*       END;                                               /* Y02653 */
*    IF R6 = 1 THEN              /* FAILURE CLEANUP RETURN TO Y02653 */
@RF00193 C     R6,@CF00085                                         0206
         BNE   @RF00206                                            0206
*       RETURN CODE(4);          /* RETURN AND INDICATE FAIL  Y02653 */
         LA    @15,4                                               0207
         BR    @14                                                 0207
*    R0 = 0;                     /* PASS NO RETRY ADDRESS     Y02653 */
@RF00206 SLR   R0,R0                                               0208
*    R15 = 0;                    /* INDICATE NO RETRY         Y02653 */
         SLR   R15,R15                                             0209
*    RETURN;                     /* RETURN TO ASIR            Y02653 */
         B     @EL00001                                            0210
*    RELEASE (R4,R6,R7);                                   /* Y02653 */
*         GENERATE DEFS(DUMPPARM,DUMPEND);                /* @ZA24758*/
*                                                                  0212
*                                                                  0212
*     DECLARE /*GENERAL PURPOSE REGISTERS */                       0213
*       GPR00P PTR(31) REG(0),                                     0213
*       GPR01P PTR(31) REG(1),                                     0213
*       GPR14P PTR(31) REG(14),                                    0213
*       GPR15P PTR(31) REG(15);                                    0213
*                                                                  0213
*     DECLARE /* COMMON VARIABLES */                               0214
*       I256C CHAR(256) BASED,                                     0214
*       I031F FIXED(31) BASED,                                     0214
*       I031P PTR(31)   BASED,                                     0214
*       I015F FIXED(15) BASED,                                     0214
*       I015P PTR(15)   BASED,                                     0214
*       I008P PTR(8)    BASED,                                     0214
*       I001C CHAR(1)   BASED;                                     0214
*    END                                                           0215
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IHASDWA )                                        *
*/*%INCLUDE SYSLIB  (IEECHAIN)                                        *
*;                                                                 0215
         B     @EL00001                                            0215
@DATA    DS    0H
@SM00654 MVC   CMDNME(0,R5),CMD(@12)
@SM00658 MVC   DUMPMAP(0,R5),DUMPPARM
@SM00660 MVC   DUMPVAR1(0,R5),CMDNME(R5)
@SM00662 MVC   M(0,MPTR),CMDNME(R5)
         DS    0F
         DS    0F
@CF00085 DC    F'1'
@CF00044 DC    F'8'
@CF00032 DC    F'11'
@CF00047 DC    F'12'
@CF00040 DC    F'14'
@CF00036 DC    F'17'
@CF00632 DC    F'256'
@CF00627 DC    XL4'00000066'
@CA00617 DC    A(IEECB861)
         DS    0D
PARMAR   DC    F'128'
DUMPLEN  DC    AL1(DUMPEND-DUMPPARM)
@CB00636 DC    X'10004040'
@CB00637 DC    X'10000040'
@CB00634 DC    X'0000'
ABEND    DC    CL17'COMMAND ABEND    '
FAILED   DC    CL14'COMMAND FAILED'
DUMPED   DC    CL8', DUMPED'
TERMINAT DC    CL12', TERMINATED'
VPATCH   DC    CL80'******* IEECB860 PATCH AREA *****'
IEECB860 CSECT
LINF     DC    CL8'IEECB860'                                     Y02653
         DC    CL8'IEECB860'                                     Y02653
         DC    CL8'        '                                     Y02653
DUMPPARM SDUMP HDR='IEECB861 - FAILURE IN COMMAND                  ',SD*
               ATA=(SQA,PSA,NUC,LSQA,RGN,LPA,TRT,CSA),MF=L     @ZA24758
DUMPEND  EQU   *                                               @ZA24758
LSTAE    ESTAE MF=L                                              Y02653
ABMSG    WTO   'IEE480I',MF=L,DESC=(4),MCSFLAG=(REG0,RESP),            *
               ROUTCDE=(2,10)
TABLE    EQU   *-240
         DC    C'0123456789ABCDEF'
IEECB860 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
@0       EQU   00
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
MPTR     EQU   @08
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
R11      EQU   @11
R14      EQU   @14
R15      EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14P   EQU   @14
GPR15P   EQU   @15
M        EQU   0
MAC3     EQU   0
PARMAREA EQU   0
MSGAREA  EQU   PARMAREA
MSGLEN   EQU   MSGAREA
CMDLEN   EQU   PARMAREA+88
CMDNME   EQU   PARMAREA+89
UCMPCH   EQU   PARMAREA+105
CNIDCH   EQU   PARMAREA+106
ASIDCH   EQU   PARMAREA+107
FLGES    EQU   PARMAREA+109
DOABND   EQU   FLGES
DODUMP   EQU   FLGES
DOBRCH   EQU   FLGES
DOFAIL   EQU   FLGES
PASSER   EQU   PARMAREA+112
CODE     EQU   PARMAREA+116
SVREN2   EQU   PARMAREA+120
WRKSV    EQU   PARMAREA+124
CDE      EQU   0
INPUTS   EQU   0
CSCBPTR  EQU   INPUTS
ADDRCMD  EQU   INPUTS+4
CMDL     EQU   0
LEN      EQU   CMDL
CMD      EQU   CMDL+1
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWAREQ  EQU   SDWACMPF
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAMCHK EQU   SDWAERRA
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAPERC EQU   SDWAERRC
SDWAERRD EQU   SDWAFLGS+3
SDWAIOFS EQU   SDWA+238
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWASDA0 EQU   SDWASDAT
SDWASDA1 EQU   SDWASDAT+1
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
CHAIN    EQU   0
CHFLG    EQU   CHAIN+4
CHSTS    EQU   CHFLG+2
CHACT    EQU   CHFLG+3
CHIFY    EQU   CHACT
CHKEY    EQU   CHAIN+8
CHPARM   EQU   CHKEY
CHPKE    EQU   CHAIN+28
CHUCMP   EQU   CHAIN+29
CHTJID   EQU   CHAIN+30
CHASID   EQU   CHTJID
CHPROCSN EQU   CHAIN+32
CHACT1   EQU   CHPROCSN+3
CHASM    EQU   CHAIN+40
CHCIBP   EQU   CHASM+4
CHRGNSZ  EQU   CHASM+8
CHSTEP   EQU   CHASM+24
CHSWT    EQU   CHSTEP
CHSHORT  EQU   CHASM+32
I256C    EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
DUMPMAP  EQU   MSGAREA
DUMPTXT  EQU   DUMPMAP+40
DUMPVAR1 EQU   DUMPTXT+31
CHAINS01 EQU   CHASM
CHTYPE   EQU   CHAINS01+124
CHTRSTAT EQU   CHAINS01+125
CHCNID   EQU   CHAINS01+126
CHCSYSO  EQU   CHAINS01+134
*                                      START UNREFERENCED COMPONENTS
CHLAST   EQU   CHAINS01+136
CHSPA    EQU   CHAINS01+135
CHUSERID EQU   CHCSYSO
CHJB     EQU   CHCSYSO
CHDUMP   EQU   CHCSYSO
CHQUE    EQU   CHCSYSO
CHHOLD   EQU   CHCSYSO
CHOUT    EQU   CHCSYSO
CHINN    EQU   CHCSYSO
CHALL    EQU   CHCSYSO
CHINC    EQU   CHAINS01+132
CHPEND   EQU   CHAINS01+128
CHARID   EQU   CHAINS01+127
@NM00053 EQU   CHTRSTAT
CHTSL    EQU   CHTRSTAT
CHTS     EQU   CHTRSTAT
CHINITL  EQU   CHTRSTAT
CHINIT   EQU   CHTRSTAT
CHJOBSL  EQU   CHTRSTAT
CHJOBS   EQU   CHTRSTAT
CHDEF    EQU   CHTYPE
CHHIAR   EQU   CHTYPE
CHARSV29 EQU   CHTYPE
CHARSV28 EQU   CHTYPE
CHARSV27 EQU   CHTYPE
CHARSV26 EQU   CHTYPE
CHARSV25 EQU   CHTYPE
CHDSTAT  EQU   CHTYPE
CHBUF    EQU   CHAINS01
DUMPTXTF EQU   DUMPTXT+1
DUMPTLEN EQU   DUMPTXT
DUMPFLG  EQU   DUMPMAP
CHSAVWD2 EQU   CHSHORT+100
CHSAVWD1 EQU   CHSHORT+96
CHJSCBVS EQU   CHSHORT+92
CHUSCVS  EQU   CHSHORT+88
@NM00052 EQU   CHSHORT+84
@NM00051 EQU   CHSHORT+80
CHSQA    EQU   CHSHORT+44
CHQPA    EQU   CHSHORT+8
CHJCL    EQU   CHSHORT+4
CHSPC    EQU   CHSHORT
CHSPB    EQU   CHSTEP+4
CHTCB    EQU   CHSTEP+1
CHARSV23 EQU   CHSWT
CHARSV22 EQU   CHSWT
CHARSV21 EQU   CHSWT
CHAC     EQU   CHSWT
CHPSF    EQU   CHSWT
CHPSD    EQU   CHSWT
CHJCT    EQU   CHSWT
CHARSV20 EQU   CHSWT
CHCECB   EQU   CHASM+20
CHECB    EQU   CHASM+16
CHRGNAD  EQU   CHASM+12
CHARSV18 EQU   CHRGNSZ+1
CHRPRTY  EQU   CHRGNSZ
@NM00050 EQU   CHCIBP
CHEND    EQU   CHCIBP
CHECBP   EQU   CHASM
CHDER    EQU   CHPROCSN+4
CHARSV10 EQU   CHACT1
CHARSV09 EQU   CHACT1
CHARSV08 EQU   CHACT1
CHARSV07 EQU   CHACT1
CHARSV06 EQU   CHACT1
CHARSV05 EQU   CHACT1
CHMODIFY EQU   CHACT1
CHRDWTR  EQU   CHACT1
CHARSV30 EQU   CHPROCSN+2
CHQID    EQU   CHPROCSN
CHTRKID  EQU   CHPKE
CHCIBCTR EQU   CHAIN+27
CHUNIT   EQU   CHAIN+24
CHCLS    EQU   CHAIN+16
CHPCOI   EQU   CHPARM
CHAFORCE EQU   CHIFY
CHAIFX   EQU   CHACT
CHCLD    EQU   CHACT
CHCL     EQU   CHACT
CHDSI    EQU   CHACT
CHDISC   EQU   CHACT
CHTERM   EQU   CHACT
CHSWAP   EQU   CHACT
CHABTERM EQU   CHSTS
CHFC     EQU   CHSTS
CHDL     EQU   CHSTS
CHAD     EQU   CHSTS
CHQSPC   EQU   CHSTS
CHSOUT   EQU   CHSTS
CHSYS    EQU   CHSTS
CHAP     EQU   CHSTS
CHSZE    EQU   CHFLG+1
CHVCD    EQU   CHFLG
CHPTR    EQU   CHAIN
@NM00049 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00048 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
SDWAERTM EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00047 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00046 EQU   SDWADDAT+3
@NM00045 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00044 EQU   SDWASDA1
SDWAERR  EQU   SDWASDA1
SDWAIO   EQU   SDWASDA1
SDWADM   EQU   SDWASDA0
SDWAQQS  EQU   SDWASDA0
SDWACBS  EQU   SDWASDA0
SDWAGTF  EQU   SDWASDA0
SDWASWA  EQU   SDWASDA0
SDWALSQA EQU   SDWASDA0
SDWASQA  EQU   SDWASDA0
SDWANUC  EQU   SDWASDA0
@NM00043 EQU   SDWADUMP+2
@NM00042 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00041 EQU   SDWADPFS
SDWAENSN EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
SDWASEQ# EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00040 EQU   SDWAACF3
@NM00039 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00038 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00037 EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00036 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
SDWARTYA EQU   SDWA+240
SDWACPUI EQU   SDWA+239
@NM00035 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
SDWAERFL EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00034 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00033 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00032 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00031 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00030 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00029 EQU   SDWAINC2
@NM00028 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00027 EQU   SDWAILC2
@NM00026 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00025 EQU   SDWANXT2
@NM00024 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00023 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00022 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00021 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00020 EQU   SDWAINC1
@NM00019 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00018 EQU   SDWAILC1
@NM00017 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00016 EQU   SDWANXT1
@NM00015 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00014 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00013 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00012 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00011 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00010 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00009 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00008 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00007 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
ABEND4   EQU   CDE+8
ABEND3   EQU   CDE+7
ABEND2   EQU   CDE+6
ABEND1   EQU   CDE+5
@NM00006 EQU   CDE
@NM00005 EQU   PARMAREA+110
@NM00004 EQU   FLGES
@NM00003 EQU   MSGAREA+72
@NM00002 EQU   MSGAREA+60
@NM00001 EQU   MSGAREA+4
MSGFLG   EQU   MSGAREA+2
*                                      END UNREFERENCED COMPONENTS
@EL01    EQU   @EL00001
@ENDDATA EQU   *
@DATEND  EQU   *
         END   IEECB860,(C'PLS1231',0701,78041)
