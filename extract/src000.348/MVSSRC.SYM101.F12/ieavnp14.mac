         TITLE 'IEAVNP14 - ASM NIP INITIALIZATION                      *
                        '
IEAVNP14 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(19)                                             0001
         DC    C'IEAVNP14R0300074347'                              0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
*
** REFS ARE GENERATED FOR NVT FIELDS THAT CONTAIN ADDRESSES OF
** NIP SERVICE ROUTINES, SO IEAPMNIP MACRO CALLS TO THESE ROUTINES
** WILL ASSEMBLE PROPERLY.
RBPRFXLN EQU 64
RBPRFLNA EQU 32
PRBLEN   EQU 136
SIRBLEN  EQU 200
TIRBLEN  EQU 136
IRBLEN   EQU 128
SVRBLEN  EQU 200
         STNSM  N14DAT,X'FB'
*/* IS STARTING ADDRESS NOT 2 MEG                                    */
*                                                                  0199
*   IF NVTNVRSZ>2097152&            /* IF NVTNVRSZ HAS BEEN SYSGENED */
*       NVTFLASM='0'B               /* GREATER THAN 2 MEG AND IS   0199
*                                      VALID                         */
*     THEN                          /* THEN SET ASM ORIGIN AT THAT   */
         L     @15,NVTNVRSZ(,RNVT)                                 0199
         C     @15,@CF02714                                        0199
         BNH   @RF00199                                            0199
         TM    NVTFLASM(RNVT),B'00010000'                          0199
         BNZ   @RF00199                                            0199
*     ASMORIG=NVTNVRSZ;             /* VALUE OTHERWISE USE 2 MEG     */
         ST    @15,ASMORIG                                         0200
*/*                                                                  */
*/*  INSURE ASM ORIGIN IS ON A SEGMENT BOUNDRY                       */
*/*                                                                  */
*                                                                  0201
*   ASMORIG=((ASMORIG+(65536-1))×65536-1)&&(65536-1);              0201
*                                                                  0201
@RF00199 L     @15,@CF02788                                        0201
         L     @00,ASMORIG                                         0201
         ALR   @00,@15                                             0201
         OR    @00,@15                                             0201
         XR    @00,@15                                             0201
         ST    @00,ASMORIG                                         0201
*/*                                                                  */
*/*  INITIALIZE LSQA FOR ASM                                         */
*/*                                                                  */
*                                                                  0202
*N14LSQI:                                                          0202
*   N14SAHIR=NVTRPAGE+(4096*NVTLSQNO);/* PUT HIGH REAL ADDR OF LSQA
*                                      IN PARAM AREA                 */
N14LSQI  L     @10,NVTRPAGE(,RNVT)                                 0202
         LH    @04,NVTLSQNO(,RNVT)                                 0202
         SLA   @04,12                                              0202
         ALR   @04,@10                                             0202
         ST    @04,N14SAHIR                                        0202
*   N14RLSQS=N14SAHIR;              /* SAVE TOP OF REAL LSQA         */
         LR    N14RLSQS,@04                                        0203
*   N14SAHIV=ASMORIG+5242880;       /* PUT HIGH VIRT ADDR OF LSQA IN
*                                      PARAM AREA                    */
         L     @04,@CF02720                                        0204
         AL    @04,ASMORIG                                         0204
         ST    @04,N14SAHIV                                        0204
*   N14SATBL=ADDR(N14LSQCB);        /* PUT REAL ADDR OF LSQA CNTL  0205
*                                      BLKS IN PARAM AREA            */
         LA    @00,N14LSQCB                                        0205
         ST    @00,N14SATBL                                        0205
*   N14LSQST=N14SAHIV;              /* SAVE START VIRT ADDR OF LSQA  */
         ST    @04,N14LSQST                                        0206
*/* INITIALIZE PAGE FRAME TABLE ENTRY FOR LSQA PAGE                  */
*                                                                  0207
*   RFY                                                            0207
*    (PFTE) BASED(TBASE);           /* RESET PFTE BASE               */
*   RFY                                                            0208
*     SHFTREG RSTD;                                                0208
*   SHFTREG=NVTRPAGE;               /* LOAD ADDR OF LSQA REAL PAGE   */
         LR    SHFTREG,@10                                         0209
*   GEN(SRL  SHFTREG,8);            /* CONVERT IT TO A RBN           */
         SRL  SHFTREG,8
*   N14PFTE=SHFTREG;                /* INDEX TO LSQA PFTE            */
         LR    N14PFTE,SHFTREG                                     0211
*   N14PFTE1=SHFTREG;               /* SAVE REAL BLOCK NUMBER        */
         STH   SHFTREG,N14PFTE1                                    0212
*   SHFTREG=ASMORIG                 /* LOAD VIRTUAL ADDR OF LSQA PAGE*/
*       +5242880;                                                  0213
         L     SHFTREG,@CF02720                                    0213
         AL    SHFTREG,ASMORIG                                     0213
*   GEN(SRL  SHFTREG,8);            /* CONVERT IT TO VBN             */
         SRL  SHFTREG,8
*   N14HIVBN=SHFTREG;               /* SAVE VBN OF TOP OF AREA       */
         STH   SHFTREG,N14HIVBN                                    0215
*   SHFTREG=ASMORIG                 /* LOAD VIRT ADDR OF LSQA PAGE   */
*       +5242880-8192;                                             0216
         L     SHFTREG,ASMORIG                                     0216
         SL    SHFTREG,@CF02789                                    0216
*   GEN(SRL  SHFTREG,8);            /* CONVERT IT TO VBN             */
         SRL  SHFTREG,8
*   N14LSVBN=SHFTREG;               /* SAVE IT FOR LATER USE         */
         STH   SHFTREG,N14LSVBN                                    0218
*   RFY                                                            0219
*     SHFTREG UNRSTD;                                              0219
*   RFY                                                            0220
*    (PVT) BASED(TBASE1);           /* POINT TO PVT                  */
*   TBASE1=CVTPVTP;                 /* LOAD BASE WITH POINTER        */
         L     @10,CVTPTR                                          0221
         L     TBASE1,CVTPVTP(,@10)                                0221
*   TBASE=PVTPFTP+N14PFTE;          /* POINT TO PROPER PFTE          */
         LR    TBASE,N14PFTE                                       0222
         AL    TBASE,PVTPFTP(,TBASE1)                              0222
*   PVTLCSA=N14HIVBN;               /* SET TOP OF PRIVATE IN PVT     */
         MVC   PVTLCSA(2,TBASE1),N14HIVBN                          0223
*   RFY                                                            0224
*    (PVT) BASED(PVTPTR);           /* REBASE PVT                    */
*   PFTVBN=N14LSVBN;                /* PUT VBN OF LSQA IN PFT        */
         MVC   PFTVBN(2,TBASE),N14LSVBN                            0225
*   PFTEPTA=TBASE+(LENGTH(PFTE));   /* PTR FOR SECOND PFTE   @Z30ENXA*/
         LA    @10,16                                              0226
         LR    PFTEPTA,TBASE                                       0226
         ALR   PFTEPTA,@10                                         0226
*   PFTFQPTR=N14PFTE1+(LENGTH(PFTE));/* SET FORWARD POINTER  @Z30ENXA*/
         SLR   @04,@04                                             0227
         ICM   @04,3,N14PFTE1                                      0227
         ALR   @04,@10                                             0227
         STH   @04,PFTFQPTR(,TBASE)                                0227
*   PFTBQPTR=0;                     /* ZERO BACKWARD                 */
         SLR   @04,@04                                             0228
         STH   @04,PFTBQPTR(,TBASE)                                0228
*   PFTEPTA->PFTFQPTR=0;            /* ZERO BACK PTR         @Z30ENXA*/
         STH   @04,PFTFQPTR(,PFTEPTA)                              0229
*   PFTEPTA->PFTBQPTR=N14PFTE1;     /* FORWARD CHAIN PFTE    @Z30ENXA*/
         MVC   PFTBQPTR(2,PFTEPTA),N14PFTE1                        0230
*   PFTEPTA->PFTASID=ASMID;         /* SET ASID IN PFTE      @Z30ENXA*/
         MVC   PFTASID(2,PFTEPTA),ASMID                            0231
*   PFTEPTA->PFTLSQA='1'B;          /* SET LSQA FLAG         @Z30ENXA*/
         OI    PFTLSQA(PFTEPTA),B'00100000'                        0232
*   PFTEPTA->PFTQNDX=PFTLSQAN;      /* QUE INDEX             @Z30ENXA*/
         MVI   PFTQNDX(PFTEPTA),X'84'                              0233
*   PFTEPTA->PFTVBN=N14LSVBN+(LENGTH(PFTE));/* VBN           @Z30ENXA*/
         SLR   @04,@04                                             0234
         ICM   @04,3,N14LSVBN                                      0234
         ALR   @04,@10                                             0234
         STH   @04,PFTVBN(,PFTEPTA)                                0234
*   PFTASID=ASMID;                  /* PUT ADDRESS SPACE ID IN PFT   */
         MVC   PFTASID(2,TBASE),ASMID                              0235
*   PFTLSQA='1'B;                   /* SET LSQA BIT                  */
         OI    PFTLSQA(TBASE),B'00100000'                          0236
*   PFTQNDX=PFTLSQAN;               /* LSQA INDEX                    */
         MVI   PFTQNDX(TBASE),X'84'                                0237
*   RFY                                                            0238
*    (PFTE) BASED(PFTEPTR);         /* REBASE PFTE                   */
*/*  USE SPACE ALLOCATION SUB-ROUTINE TO CALCULATE AND ASSIGN        */
*/*  REAL AND VIRTUAL ADDRESSES FOR LSQA CONTROL BLOCKS              */
*                                                                  0239
*   RFY                                                            0239
*    (RENTRY,                                                      0239
*     REXIT) RESTRICTED;                                           0239
*   RENTRY=ADDR(NSPALLOC);          /* LOAD ADDR OF SPACE ALLOC RTN  */
         LA    RENTRY,NSPALLOC                                     0240
*   GEN(BALR    REXIT,RENTRY);      /* GO TO IT                      */
         BALR    REXIT,RENTRY
*   RFY                                                            0242
*    (RENTRY,                                                      0242
*     REXIT) UNRSTD;                                               0242
*   N14RLSQA=N14SAHIR;              /* SAVE LOW REAL BYTE USED       */
         L     N14RLSQA,N14SAHIR                                   0243
*   N14VLSQA=N14SAHIV;              /* SAVE LOW VIRT BYTE USED       */
         L     N14VLSQA,N14SAHIV                                   0244
*/*  INITIALIZE ASM RSMHDR                                           */
*                                                                  0245
*   ASCBPTR=NVTAASCB;               /* LOAD ADDR OF ASM ASCB         */
         L     @10,NVTAASCB(,RNVT)                                 0245
         LR    ASCBPTR,@10                                         0245
*   RFY                                                            0246
*    (RSMHD) BASED(TBASE);          /* RESPEC BASE REG FOR RSMHDR    */
*   TBASE=ASCBRSM;                  /* LOAD BASE WITH RSMHDR R ADDR  */
         L     TBASE,ASCBRSM(,ASCBPTR)                             0247
*   TABPTR=ADDR(NSEGTAB);           /* LOAD BASE TO SEG TABLE ENTRY  */
         LA    TABPTR,NSEGTAB                                      0248
*   RSMVSTO=N14VADDR;               /* PUT VIRT ADDR OF SEG TABLE IN
*                                      RSMHDR                        */
         MVC   RSMVSTO(4,TBASE),N14VADDR(TABPTR)                   0249
*   RSMLSQAF=N14PFTE1;              /* 1ST PFTE ON QUEUE             */
         MVC   RSMLSQAF(2,TBASE),N14PFTE1                          0250
*   RSMLSQAL=N14PFTE1+(LENGTH(PFTE));/* LAST PFTE ON QUEUE           */
         LA    @00,16                                              0251
         SLR   @15,@15                                             0251
         ICM   @15,3,N14PFTE1                                      0251
         ALR   @00,@15                                             0251
         STH   @00,RSMLSQAL(,TBASE)                                0251
*   RFY                                                            0252
*    (RSMHD) BASED(ASCBRSM);        /* RESET RSMHDR BASE             */
*/*                                                                  */
*/*  INITIALIZE ASM ASCB                                             */
*/*                                                                  */
*                                                                  0253
*   RFY                                                            0253
*    (ASCB) BASED(TBASE);           /* SPECIFY BASE FOR ASCB         */
*   TBASE=NVTAASCB;                 /* GET ADDR OF ASMASCB           */
         LR    TBASE,@10                                           0254
*   TABPTR=ADDR(NLDA);              /* LOAD BASE TO LDA TABLE ENTRY  */
         LA    @15,NLDA                                            0255
         LR    TABPTR,@15                                          0255
*   ASCBLDA=N14VADDR;               /* PUT LDA VIRT ADDR IN ASCB     */
         MVC   ASCBLDA(4,TBASE),N14VADDR(TABPTR)                   0256
*   ASCBFMCT=NVTLSQNO;              /* PUT NUMBER OF REAL LSQA FRAMES
*                                      IN ASCB FIELD CONTAINING A  0257
*                                      COUNT OF PRIVATE AREA FRAMES  */
         MVC   ASCBFMCT(2,TBASE),NVTLSQNO(RNVT)                    0257
*   RFY                                                            0258
*    (ASCB) BASED(ASCBPTR);         /* SET ASCB BASE TO ORIG VALUE   */
*/*                                                                  */
*/*  INITIALIZE ASM LDA                                              */
*/*                                                                  */
*                                                                  0259
*   RFY                                                            0259
*    (LDA) BASED(TBASE);            /* SPECIFY BASE FOR LDA          */
*   TABPTR=ADDR(NLDA);              /* SET BASE TO LDA TABLE ENTRY   */
         LR    TABPTR,@15                                          0260
*   TBASE=N14RADDR;                 /* SET BASE TO REAL ADDR OF LDA  */
         L     TBASE,N14RADDR(,TABPTR)                             0261
*   PASCBSV=NVTAASCB;               /* PUT ASM ASCB ADDR IN LDA      */
         ST    @10,PASCBSV(,TBASE)                                 0262
*   TABPTR=ADDR(NASMPQE);           /* SET BASE TO ASM PQE TABLE   0263
*                                      ENTRY                         */
         LA    TABPTR,NASMPQE                                      0263
*   ASDPQE=N14VADDR;                /* PUT VIRT ADDR OF ASM ADDR   0264
*                                      SPACE PQE IN LDA              */
         MVC   ASDPQE(4,TBASE),N14VADDR(TABPTR)                    0264
*   CURRGNTP=ASMORIG;               /* PUT START ADDR OF ASM IN LDA  */
         MVC   CURRGNTP(4,TBASE),ASMORIG                           0265
*   TABPTR=ADDR(N14RSVPT);          /* POINT TO RESERVED PAGE TABLE  */
         LA    TABPTR,N14RSVPT                                     0266
*   LDARSVPT=N14VADDR;              /* STORE V ADDR OF AREA IN LDA   */
         MVC   LDARSVPT(4,TBASE),N14VADDR(TABPTR)                  0267
*   TABPTR=ADDR(NLSQSPQE);          /* POINT TO SPQE ADDRESSES       */
         LA    @10,NLSQSPQE                                        0268
         LR    TABPTR,@10                                          0268
*   LSQAPTR=N14VADDR;               /* LOAD V ADDR OF LSQA SPQE      */
         MVC   LSQAPTR(4,TBASE),N14VADDR(TABPTR)                   0269
*   TABPTR=ADDR(GMPOOL);            /* GM POOL SPACE ALLOC   @Z30ENXA*/
         LA    @15,GMPOOL                                          0270
         LR    TABPTR,@15                                          0270
*   LCLCELL=N14VADDR;               /* SET ADDRESS OP POOL   @Z30ENXA*/
         MVC   LCLCELL(4,TBASE),N14VADDR(TABPTR)                   0271
*   LCLCELCT=(N14LNGTH/16);         /* COUNT OF CELLS        @Z30ENXA*/
         L     @00,N14LNGTH(,TABPTR)                               0272
         SRL   @00,4                                               0272
         ST    @00,LCLCELCT(,TBASE)                                0272
*   RFY                                                            0273
*    (LDA) BASED(LDAPTR);           /* RESET BASE TO ORIGINAL VALUE  */
*/*                                                                  */
*/*  INITIALIZE SPQE FOR LSQA                                        */
*/*                                                                  */
*                                                                  0274
*   RFY                                                            0274
*    (SPQESECT) BASED(TBASE);       /* SET UP BASE FOR SPQE          */
*   TABPTR=ADDR(NLSQSPQE);          /* SET BASE TO SPQE TABLE ENTRY  */
         LR    TABPTR,@10                                          0275
*   TBASE=N14RADDR;                 /* PUT R ADDR OF SPQE IN BASE    */
         L     TBASE,N14RADDR(,TABPTR)                             0276
*   TABPTR=ADDR(NLSQADQE);          /* POINT TO ADDRESSES OF DQE     */
         LA    TABPTR,NLSQADQE                                     0277
*   SPDQEAD=N14VADDR;               /* PUT V ADDR OF DQE IN SPQE     */
         MVC   SPDQEAD(4,TBASE),N14VADDR(TABPTR)                   0278
*   SPQEFLGS='40'X;                 /* SET LAST ELT FLAGS IN SPQE    */
         MVI   SPQEFLGS(TBASE),X'40'                               0279
*   SPQEID='FF'X;                   /* SET SUB POOL ID IN SPQE       */
         MVI   SPQEID(TBASE),X'FF'                                 0280
*   RFY                                                            0281
*    (SPQESECT) BASED(SPQESPTR);    /* RESET SPQE BASE TO ORIG VALUE */
*                                                                  0281
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE GETMAIN CELLPOOL CHAIN                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0282
*   TABPTR=ADDR(GMPOOL);            /* SPACE ALLOC TABLE ADDR      0282
*                                                            @Z30ENXA*/
         LR    TABPTR,@15                                          0282
*   TBASE=N14RADDR;                 /* START OF CELLPOOL     @Z30ENXA*/
         L     TBASE,N14RADDR(,TABPTR)                             0283
*   CHNADDR=N14VADDR;               /* VIRT ADDR OF POOLS    @Z30ENXA*/
*                                                                  0284
         L     CHNADDR,N14VADDR(,TABPTR)                           0284
*   /*****************************************************************/
*   /*                                                               */
*   /* SET LOOP TO INIT ALL CELLS IN POOL                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0285
*   DO LOOPCNT=(N14LNGTH/16) TO 2 BY-1;/* LOOP CONTROL       @Z30ENXA*/
         L     LOOPCNT,N14LNGTH(,TABPTR)                           0285
         SRL   LOOPCNT,4                                           0285
         B     @DE00285                                            0285
@DL00285 DS    0H                                                  0286
*     CHNADDR=CHNADDR+16;           /* ADDR OF NEXT CELL     @Z30ENXA*/
         LA    @10,16                                              0286
         ALR   CHNADDR,@10                                         0286
*     CHAINPTR=CHNADDR;             /* POINT TO NEXT CELL    @Z30ENXA*/
         ST    CHNADDR,CHAINPTR(,TBASE)                            0287
*     TBASE=TBASE+16;               /* NEXT CELL ADDRESS     @Z30ENXA*/
         ALR   TBASE,@10                                           0288
*   END;                                                           0289
*                                                                  0289
         BCTR  LOOPCNT,0                                           0289
@DE00285 CH    LOOPCNT,@CH00189                                    0289
         BNL   @DL00285                                            0289
*/*                                                                  */
*/*  INITIALIZE DQE FOR LSQA                                         */
*/*                                                                  */
*                                                                  0290
*   RFY                                                            0290
*    (DQESECT) BASED(TBASE);        /* REBASE DQE                    */
*   TABPTR=ADDR(NLSQADQE);          /* SET BASE TO DQE TABLE ENTRY   */
         LA    TABPTR,NLSQADQE                                     0291
*   TBASE=N14RADDR;                 /* PUT R ADDR OF DQE IN BASE     */
         L     TBASE,N14RADDR(,TABPTR)                             0292
*   TABPTR=ADDR(NLSQAFQE);          /* SET BASE TO FQE TABLE ENTRY   */
         LA    @10,NLSQAFQE                                        0293
         LR    TABPTR,@10                                          0293
*   DQFQEPTR=N14VADDR;              /* PUT VIRT ADDR OF FQE IN DQE   */
         MVC   DQFQEPTR(4,TBASE),N14VADDR(TABPTR)                  0294
*   DQEBLKAD=N14LSQST-              /* PUT VIRT ADDR OF BEGINNING    */
*       (NVTLSQNO*                  /* (LOW END) OF LSQA IN DQE      */
*       4096);                                                     0295
         LH    @07,NVTLSQNO(,RNVT)                                 0295
         SLA   @07,12                                              0295
         L     @05,N14LSQST                                        0295
         SLR   @05,@07                                             0295
         ST    @05,DQEBLKAD(,TBASE)                                0295
*   DQELNTH=NVTLSQNO*4096;          /* PUT SIZE OF LSQA IN DQE       */
         ST    @07,DQELNTH(,TBASE)                                 0296
*   RFY                                                            0297
*    (DQESECT) BASED(DQESEPTR);     /* REBASE DQE                    */
*/*                                                                  */
*/*   INITIALIZE PQE FOR ASM ADDRESS SPACE                           */
*/*                                                                  */
*                                                                  0298
*   RFY                                                            0298
*    (PQESECT) BASED(TBASE);        /* RESPECIFY BASE FOR PQE        */
*   TABPTR=ADDR(NASMPQE);           /* SET BASE TO PQE TABLE ENTRY   */
         LA    @05,NASMPQE                                         0299
         LR    TABPTR,@05                                          0299
*   TBASE=N14RADDR;                 /* PUT R ADDR OF PQE IN BASE     */
         L     TBASE,N14RADDR(,TABPTR)                             0300
*   NVTAPQE=TBASE;                  /* PUT ADDR OF PQE IN NVT        */
         ST    TBASE,NVTAPQE(,RNVT)                                0301
*   TABPTR=ADDR(NAS1FBQE);          /* SET BASE TO ASM FBQE TBL ENTRY*/
         LA    @15,NAS1FBQE                                        0302
         LR    TABPTR,@15                                          0302
*   PQEFFBQE=N14VADDR;              /* PUT VIRT ADDR OF THE FBQE     */
         MVC   PQEFFBQE(4,TBASE),N14VADDR(TABPTR)                  0303
*   TABPTR=ADDR(NAS3FBQE);          /* POINT TO LAST FBQE            */
         LA    @14,NAS3FBQE                                        0304
         LR    TABPTR,@14                                          0304
*   PQEBFBQE=N14VADDR;              /* IN TWO FIELDS OF THE PQE      */
         MVC   PQEBFBQE(4,TBASE),N14VADDR(TABPTR)                  0305
*   PQETCB=NVTASTCB;                /* PUT ADDR OF ASM TCB IN PQE    */
         MVC   PQETCB(4,TBASE),NVTASTCB(RNVT)                      0306
*   PQESIZE=5242880;                /* PUT SIZE OF ASM INTO PQE      */
         L     @00,@CF02720                                        0307
         ST    @00,PQESIZE(,TBASE)                                 0307
*   PQEREGN=ASMORIG;                /* PUT ASM START ADDR INTO PQE   */
         L     @10,ASMORIG                                         0308
         ST    @10,PQEREGN(,TBASE)                                 0308
*   VVVRFLG='0'B;                   /* TURN PQE FLAG OFF             */
         NI    VVVRFLG(TBASE),B'11111110'                          0309
*   RFY                                                            0310
*    (PQESECT) BASED(PQESEPTR);     /* RESET BASE FOR PQE            */
*/*                                                                  */
*/*   INITIALIZE FBQE FOR ASM ADDRESS SPACE                          */
*/*                                                                  */
*                                                                  0311
*   RFY                                                            0311
*    (FBQESECT) BASED(TBASE);       /* RESPECIFY BASE FOR FBQE       */
*   TABPTR=ADDR(NAS1FBQE);          /* SET BASE TO FBQE TABLE ENTRY  */
         LR    TABPTR,@15                                          0312
*   TBASE=N14RADDR;                 /* SET BASE TO R ADDR OF FBQE    */
         L     TBASE,N14RADDR(,TABPTR)                             0313
*   NVTFBQE1=TBASE;                 /* PUT ADDR OF 1ST FBQE IN NVT   */
         ST    TBASE,NVTFBQE1(,RNVT)                               0314
*   TABPTR=ADDR(NASMPQE);           /* SET BASE TO PQE TABLE ENTRY   */
         LR    TABPTR,@05                                          0315
*   BCKPTR=N14VADDR;                /* PUT V ADDR OF PQE IN BACK PTR */
         MVC   BCKPTR(4,TBASE),N14VADDR(TABPTR)                    0316
*   TABPTR=ADDR(NAS2FBQE);          /* POINT TO 2ND FBQE             */
         LA    @10,NAS2FBQE                                        0317
         LR    TABPTR,@10                                          0317
*   FWDPTR=N14VADDR;                /* PUT V ADDR OF 2ND FBQE IN   0318
*                                      FORWARD POINTER               */
         MVC   FWDPTR(4,TBASE),N14VADDR(TABPTR)                    0318
*   SIZE=0;                         /* PUT 0 SIZE IN 1ST FBQE        */
         SLR   @10,@10                                             0319
         ST    @10,SIZE(,TBASE)                                    0319
*   FBQAREA=0;                      /* PUT LOW ADDR IN 1ST FBQE      */
         ST    @10,FBQAREA(,TBASE)                                 0320
*   TBASE=N14RADDR;                 /* SET BASE TO 2ND FBQE          */
         L     TBASE,N14RADDR(,TABPTR)                             0321
*   TABPTR=ADDR(NAS1FBQE);          /* POINT TO 1ST FBQE             */
         LR    TABPTR,@15                                          0322
*   BCKPTR=N14VADDR;                /* PUT V ADDR OF 1ST FBQE INTO 0323
*                                      BACKWARD POINTER OF 2ND FBQE  */
         MVC   BCKPTR(4,TBASE),N14VADDR(TABPTR)                    0323
*   TABPTR=ADDR(NAS3FBQE);          /* POINT TO LAST FBQE            */
         LR    TABPTR,@14                                          0324
*   FWDPTR=N14VADDR;                /* PUT V ADDR OF LAST FBQE INTO
*                                      FORWARD POINTER OF 2ND FBQE   */
         MVC   FWDPTR(4,TBASE),N14VADDR(TABPTR)                    0325
*   SIZE=5242880-(4096*NVTLSQNO);   /* SET SIZE = TO SIZE OF PRIVATE
*                                      AREA MINUS LSQA PAGE          */
         SLR   @00,@07                                             0326
         ST    @00,SIZE(,TBASE)                                    0326
*   FBQAREA=ASMORIG;                /* FBQE AREA STARTS AT ASMORIG   */
         L     @15,ASMORIG                                         0327
         ST    @15,FBQAREA(,TBASE)                                 0327
*   TBASE=N14RADDR;                 /* POINT TO 3RD FBQE             */
         L     TBASE,N14RADDR(,TABPTR)                             0328
*   NVTFBQE2=TBASE;                 /* PUT ADDR OF LAST FBQE IN NVT  */
         ST    TBASE,NVTFBQE2(,RNVT)                               0329
*   TABPTR=ADDR(NAS2FBQE);          /* POINT TO 2ND FBQE             */
         LA    @15,NAS2FBQE                                        0330
         LR    TABPTR,@15                                          0330
*   BCKPTR=N14VADDR;                /* PUT V ADDR OF 2ND FBQE INTO 0331
*                                      BACKWARD POINTER OF 3RD FBQE  */
         MVC   BCKPTR(4,TBASE),N14VADDR(TABPTR)                    0331
*   TABPTR=ADDR(NASMPQE);           /* POINT TO PQE                  */
         LR    TABPTR,@05                                          0332
*   FWDPTR=N14VADDR;                /* PUT V ADDR OF PQE IN FORWARD
*                                      POINTER OF LAST FBQE          */
         MVC   FWDPTR(4,TBASE),N14VADDR(TABPTR)                    0333
*   SIZE=0;                         /* SIZE OF LAST FBQE = 0         */
         ST    @10,SIZE(,TBASE)                                    0334
*   FBQAREA='7FFFFFFF'X;            /* SET AREA TO HIGH VALUE        */
         MVC   FBQAREA(4,TBASE),@CF02744                           0335
*   RFY                                                            0336
*    (FBQESECT) BASED(FBQESPTR);    /* RESET FBQE BASE               */
*/*                                                                  */
*/*   INITIALIZE FQE FOR LSQA                                        */
*/*                                                                  */
*                                                                  0337
*   RFY                                                            0337
*    (FQESECT) BASED(TBASE);        /* RESPECIFY BASE FOR FQE        */
*   TABPTR=ADDR(NLSQAFQE);          /* SET BASE TO FQE TABLE ENTRY   */
         LA    @10,NLSQAFQE                                        0338
         LR    TABPTR,@10                                          0338
*   TBASE=N14RADDR;                 /* SET BASE TO R ADDR OF FQE     */
         L     TBASE,N14RADDR(,TABPTR)                             0339
*   FQELNTH=((NVTLSQNO              /* NUMBER OF LSQA FRAMES * PAGE- */
*       *4096)                      /* SIZE IS TOTAL NO. OF LSQA   0340
*                                      BYTES                         */
*       -(N14RLSQS                  /* N14RLSQS - N14RLSQA IS NUMBER */
*       -N14RLSQA)                  /* OF BYTES USED, THE DIFFERENCE
*                                      BETWEEN THESE IS THE AMOUNT OF
*                                      AVAIL SPACE IN LSQA           */
*       +LENGTH(FQESECT));          /* LENGTH OF THE FQE IS ADDED IN
*                                      SINCE THE AVAILABLE COUNT IN
*                                      AN FQE MUST INCLUDE THE FQE   */
         LR    @10,N14RLSQS                                        0340
         SLR   @10,N14RLSQA                                        0340
         SLR   @07,@10                                             0340
         AH    @07,@CH00089                                        0340
         ST    @07,FQELNTH(,TBASE)                                 0340
*   RFY                                                            0341
*    (FQESECT) BASED(FQESEPTR);     /* RESET FQE BASE                */
*/*   THIS ROUTINE MOVES THE SEGMENT, EXTERNAL PAGE, AND PAGE TABLES */
*/*   FROM THE MASTER SCHEDULER LSQA TO THE ASM LSQA                 */
*/* DETERMINE SIZE OF AREA TO MOVE                                   */
*                                                                  0342
*   N14MOVE=1024                    /* AREA TO BE MOVED IS SEGMENT   */
*       +192                        /* TABLE PLUS EXTERNAL PAGE TABLE*/
*       +32;                        /* PLUS PAGE TABLE               */
         LA    N14MOVE,1248                                        0342
*   N14MSPGT=NVTLSQAS               /* PAGE TABLE VIRT ADDR IS TOP   */
*       -N14MOVE;                   /* LSQA MINUS THE ABOVE SIZE     */
         L     N14MSPGT,NVTLSQAS(,RNVT)                            0343
         SLR   N14MSPGT,N14MOVE                                    0343
*/* SET UP FOR MOVE                                                  */
*                                                                  0344
*   RFY                                                            0344
*    (RLMOVE1,                                                     0344
*     RLMOVE1A,                                                    0344
*     RLMOVE2,                                                     0344
*     RLMOVE2A,                                                    0344
*     N14R5) RESTRICTED;                                           0344
*   N14R5=N14MSPGT;                 /* LOAD REG FOR MOVE             */
         LR    N14R5,N14MSPGT                                      0345
*   GEN(LRA     RLMOVE2,0(0,N14R5));/* GET REAL ADDR OF PAGE TBL     */
         LRA     RLMOVE2,0(0,N14R5)
*/* SAVE REAL ADDRESSES FOR LATER USE                                */
*                                                                  0347
*   N14RMSST=RLMOVE2                /* REAL ADDRESS OF MS SEG TABLE  */
*       +192                        /* IS PAGE TABLE ADDR PLUS PAGE  */
*       +32;                        /* TABLE SIZE PLUS EXTERNAL PAGE
*                                      TABLE SIZE.                   */
         LA    N14RMSST,224                                        0347
         ALR   N14RMSST,RLMOVE2                                    0347
*   N14RMSPT=RLMOVE2;               /* REAL ADDR OF MS PAGE TABLE    */
         LR    N14RMSPT,RLMOVE2                                    0348
*   RLMOVE1=NVTRPAGE                /* ASM PAGE TABLE R ADDR IS ASM  */
*       +(4096*NVTLSQNO)            /* REAL PAGE ADDR + PAGESIZE     */
*       -N14MOVE;                   /* - SIZE OF AREA TO BE MOVED    */
         LH    RLMOVE1,NVTLSQNO(,RNVT)                             0349
         SLA   RLMOVE1,12                                          0349
         AL    RLMOVE1,NVTRPAGE(,RNVT)                             0349
         SLR   RLMOVE1,N14MOVE                                     0349
*   N14RASPT=RLMOVE1;               /* SAVE R ADDR OF ASM PAGE TABLE */
         ST    RLMOVE1,N14RASPT                                    0350
*   RLMOVE1A=N14MOVE;               /* LOAD LENGTH OF MOVE INTO      */
         LR    RLMOVE1A,N14MOVE                                    0351
*   RLMOVE2A=RLMOVE1A;              /* REGISTERS                     */
         LR    RLMOVE2A,RLMOVE1A                                   0352
*/*  GENERATE THE MOVE INSTRUCTION AT THIS TIME THE FOLLOWING        */
*/*  REGISTERS ARE SET AS INDICATED                                  */
*/*      RLMOVE1 CONTAINS THE MOVE TO ADDRESS                        */
*/*      RLMOVE1A CONTAINS THE LENGTH OF THE MOVE TO ADDRESS         */
*/*      RLMOVE2 CONTAINS THE MOVE FROM ADDRESS                      */
*/*      RLMOVE2A CONTAINS THE LENGTH OF THE MOVE FROM ADDRESS       */
*                                                                  0353
*   GEN(MVCL    RLMOVE1,RLMOVE2);                                  0353
         MVCL    RLMOVE1,RLMOVE2
*   RFY                                                            0354
*    (RLMOVE1,                                                     0354
*     RLMOVE1A,                                                    0354
*     RLMOVE2,                                                     0354
*     RLMOVE2A,                                                    0354
*     N14R5) UNRESTRICTED;                                         0354
*                                                                  0354
*/*  DETERMINE INDEX INTO SEGMENT TABLE FOR MS LSQA SEGMENT          */
*                                                                  0355
*   N14MSLSQ=NVTLSQAS               /* STARTING ADDRESS OF LSQA SEG  */
*       -65536;                     /* IS HI VIRT ADDR - SEG SIZE    */
         L     N14MSLSQ,NVTLSQAS(,RNVT)                            0355
         SL    N14MSLSQ,@CF02716                                   0355
*   N14MSIND=N14MSLSQ               /* INDEX IS EQUAL TO SEG ADDR    */
*       /65536                      /* DIVIDED BY SEGMENT SIZE       */
*       *LENGTH(SGTSTE);            /* MULTIPLIED BY SEGMENT TABLE 0356
*                                      ENTRY SIZE                    */
         LR    N14MSIND,N14MSLSQ                                   0356
         SRL   N14MSIND,16                                         0356
         SLA   N14MSIND,2                                          0356
*/*  MARK ENTRY INVALID                                              */
*                                                                  0357
*   N14MSEN=NVTRPAGE+               /* MS SEGMENT ENTRY IS = TO ASM  */
*       3072+((NVTLSQNO-1)*4096)    /* SEGMENT TABLE ADDRESS + 3K    */
*       +N14MSIND;                  /* INDEX                         */
         L     @10,NVTRPAGE(,RNVT)                                 0357
         LA    N14MSEN,3072                                        0357
         ALR   N14MSEN,@10                                         0357
         LH    @00,NVTLSQNO(,RNVT)                                 0357
         BCTR  @00,0                                               0357
         SLA   @00,12                                              0357
         ALR   N14MSEN,@00                                         0357
         LR    @00,N14MSIND                                        0357
         ALR   @00,N14MSEN                                         0357
         ST    N14MSEN,@TF00001                                    0357
         LR    N14MSEN,@00                                         0357
*   N14MSEN->N14PTR=N14SISTE;       /* MARK ENTRY INVALID            */
         MVC   N14PTR(4,N14MSEN),N14SISTE                          0358
*/*  LOCATE AND VALIDATE ASM SEGMENT ENTRY                           */
*                                                                  0359
*   N14ASLSQ=ASMORIG                /* ASM LSQA SEGMENT ADDR IS = TO */
*       +5242880                    /* ASM ORIGIN + ASM SIZE - THE   */
*       -65536;                     /* SIZE OF ONE SEGMENT           */
         L     N14ASLSQ,ASMORIG                                    0359
         SL    N14ASLSQ,@CF02792                                   0359
*   N14ASIND=N14ASLSQ               /* INDEX IS EQUAL TO SEGMENT ADDR*/
*       /65536                      /* DIVIDED BY SEGMENT SIZE       */
*       *LENGTH(SGTSTE);            /* MULTIPLIED BY SEG TABLE ENTRY
*                                      SIZE                          */
         LR    N14ASIND,N14ASLSQ                                   0360
         SRL   N14ASIND,16                                         0360
         SLA   N14ASIND,2                                          0360
*   N14ASMEN=NVTRPAGE               /* ASM SEGMENT ENTRY IN SEGMENT  */
*       +3072+((NVTLSQNO-1)*4096)   /* TABLE IS LSQA PAGE R ADDR     */
*       +N14ASIND;                  /* + 3K + INDEX FROM ABOVE       */
         LR    @00,N14ASIND                                        0361
         AL    @00,@TF00001                                        0361
         ST    @00,N14ASMEN                                        0361
*   SHFTREG=NVTRPAGE;               /* LOAD REAL ADDR OF LSQA PAGE   */
         LR    SHFTREG,@10                                         0362
*   GEN(SRL  SHFTREG,8);            /* CONVERT IT TO A FRAME NUMBER
*                                      ADJUSTED FOR ADDING TO THE  0363
*                                      SKELETON PAGE TABLE ENTRY   0363
*                                      (SINCE THE REAL ADDR MUST BE
*                                      ON A PAGE BOUNDRY AND THUS, 0363
*                                      THE LOW ORDER 12 BITS ARE   0363
*                                      ZEROS, IT IS NOT NECESSARY TO
*                                      SHIFT RIGHT 12 AND SHIFT LEFT
*                                      4)                            */
         SRL  SHFTREG,8
*   N14FRMNO=SHFTREG;               /* STORE RESULT                  */
         STH   SHFTREG,N14FRMNO                                    0364
*/*   THIS ROUTINE PROCESSES THE PAGE TABLE ENTRIES CORRESPONDING    */
*/*   TO THE NON-LSQA PAGES IN THIS SEGMENT                          */
*                                                                  0365
*   RFY                                                            0365
*    (PGTPTE) BASED(N14PTEP);                                      0365
*   N14ASMEN->N14PTR=N14SSTE        /* VALIDATE SEG TABLE ENTRY AND  */
*       +N14RASPT;                  /* PUT ADDR OF CURRENT PAGE TABLE*/
         L     @15,N14RASPT                                        0366
         L     @00,N14SSTE                                         0366
         ALR   @00,@15                                             0366
         L     @14,N14ASMEN                                        0366
         ST    @00,N14PTR(,@14)                                    0366
*   N14PTEP=N14RASPT;               /* SAVE ADDR OF PAGE TABLE       */
         ST    @15,N14PTEP                                         0367
*   DO I=(16-NVTLSQNO) TO 1 BY-1;   /* LOOP THRU PAGE TABLE SETTING
*                                      PAGE TABLE ENTRIES INVALID    */
         LA    I,16                                                0368
         SH    I,NVTLSQNO(,RNVT)                                   0368
         B     @DE00368                                            0368
@DL00368 DS    0H                                                  0369
*     PGTPTE=N14SIPTE;              /* SET PAGE TABLE ENTRY INVALID  */
         L     @05,N14PTEP                                         0369
         MVC   PGTPTE(2,@05),N14SIPTE                              0369
*     N14PTEP=LENGTH(PGTPTE)        /* UPDATE PAGE TABLE ENTRY       */
*         +N14PTEP;                 /* PTR TO NEXT PAGE TABLE ENTRY  */
         AL    @05,@CF00189                                        0370
         ST    @05,N14PTEP                                         0370
*   END;                                                           0371
*                                                                  0371
         BCTR  I,0                                                 0371
@DE00368 LTR   I,I                                                 0371
         BP    @DL00368                                            0371
*/* WHEN PAGE TABLE ENTRIES FOR NON-LSQA PAGES ARE PROCESSED, THIS   */
*/* ROUTINE PROCESSES THE REMAINING PAGE TABLE ENTRIES               */
*                                                                  0372
*   DO I=NVTLSQNO TO 1 BY-1;        /* LOOP THRU THE REMAINING       */
         LH    I,NVTLSQNO(,RNVT)                                   0372
         B     @DE00372                                            0372
@DL00372 DS    0H                                                  0373
*     PGTPTE=N14SPTE                /* PAGE TABLE ENTRIES. SET THE   */
*         +N14FRMNO;                /* ENTRY VALID AND PUT IN THE  0373
*                                      CURRENT FRAME NUMBER          */
         L     @05,N14PTEP                                         0373
         SLR   @15,@15                                             0373
         ICM   @15,3,N14FRMNO                                      0373
         SLR   @00,@00                                             0373
         ICM   @00,3,N14SPTE                                       0373
         ALR   @00,@15                                             0373
         STH   @00,PGTPTE(,@05)                                    0373
*     N14PTEP=LENGTH(PGTPTE)        /* UPDATE PAGE TABLE ENTRY PTR   */
*         +N14PTEP;                 /* TO NEXT TABLE ENTRY           */
         AL    @05,@CF00189                                        0374
         ST    @05,N14PTEP                                         0374
*     N14FRMNO=16                   /* UPDATE FRAME NUMBER TO THE    */
*         +N14FRMNO;                /* NUMBER CORRESPONDING TO THE 0375
*                                      NEXT HIGHER FRAME             */
         AH    @15,@CH00037                                        0375
         STH   @15,N14FRMNO                                        0375
*   END;                                                           0376
*                                                                  0376
         BCTR  I,0                                                 0376
@DE00372 LTR   I,I                                                 0376
         BP    @DL00372                                            0376
*/* INITIALIZE TCB                                                   */
*                                                                  0377
*   RFY                                                            0377
*    (TCB) BASED(TBASE);            /* RESPECIFY TCB BASE            */
*   TBASE=NVTASTCB;                 /* LOAD ADDRESS OF ASM TCB       */
         L     TBASE,NVTASTCB(,RNVT)                               0378
*   TABPTR=ADDR(NLDA);              /* POINT TO LDA                  */
         LA    TABPTR,NLDA                                         0379
*   RFY                                                            0380
*    (LDA) BASED(TBASE1);                                          0380
*   TBASE1=N14VADDR;                /* LOAD V ADDR OF LDA            */
         L     TBASE1,N14VADDR(,TABPTR)                            0381
*   TCBPQE=ADDR(ASDPQE)             /* PUT ADDR OF PQE PTR           */
*       -8;                         /* IN LDA MINUS 8                */
         LA    @09,ASDPQE(,TBASE1)                                 0382
         SH    @09,@CH00089                                        0382
         ST    @09,TCBPQE(,TBASE)                                  0382
*/* PUT PQE POINTER IN DUMMY RCT TCB                                 */
*                                                                  0383
*   TBASE=NVTAASCB->ASCBASXB        /* POINT TO DUMMY TCB            */
*       ->ASXBFTCB;                                                0383
         L     @04,NVTAASCB(,RNVT)                                 0383
         L     @04,ASCBASXB(,@04)                                  0383
         L     TBASE,ASXBFTCB(,@04)                                0383
*   TCBPQE=ADDR(ASDPQE)             /* PUT ADDR OF PQE PTR           */
*       -8;                         /* IN LDA MINUS 8                */
         ST    @09,TCBPQE(,TBASE)                                  0384
*   RFY                                                            0385
*    (LDA) BASED(LDAPTR);                                          0385
*   RFY                                                            0386
*    (TCB) BASED(TCBPTR);                                          0386
*                                                                  0387
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*   ACTIVATE ASM ADDRESS SPACE                                     */
*/*                                                                  */
*/* ACTIVATE ASM ADDRESS SPACE                                       */
*/*                                                                  */
*/* THIS SEGMENT PREPARES THE ASM ASCB AND RB FOR THE ACTIVATION     */
*/* OF THE ASM ADDRESS SPACE. IT THEN ISSUES A WAIT TO ACTIVATE ASM. */
*/* ASM IS ACTIVATED IN SEGMENT LOADRIM2 OF THIS MODULE. WHEN ASM    */
*/* RIM3 HAS COMPLETED CONTROL IS RETURNED TO THIS MODULE AT SEGMENT */
*/* PROCMSG IN THE MASTER SCHEDULER ADDRESS SPACE.                   */
*                                                                  0387
*ASMACT:                                                           0387
*                                                                  0387
*/* TURN DAT BACK ON LSQA HAS BEEN INITIALIZED                       */
*                                                                  0387
*   GEN(STOSM  N14DAT,X'04');       /* TURN DAT ON                   */
ASMACT   STOSM  N14DAT,X'04'
*/* BUILD A LOCAL WORK SAVE AREA IN CSA UNTIL ONE IS BUILT IN LSQA   */
*/* THIS ROUTINE BUILDS THE LOCAL WORK SAVE VECTOR TABLE             */
*                                                                  0388
*   WSAVT=CVTWSAL;                  /* POINT TO DEFINITON AREA       */
         L     @10,CVTPTR                                          0388
         L     WSAVT,CVTWSAL(,@10)                                 0388
*   WSAVT=WSAVT+2;                  /* STEP TO LENGTH ENTRY          */
         AH    WSAVT,@CH00189                                      0389
*   TOTLEN=LEN*8;                   /* EACH ENTRY IS DOUBLE WORD     */
         LH    TOTLEN,LEN(,WSAVT)                                  0390
         SLA   TOTLEN,3                                            0390
*   SPID='F5'X;                     /* LOAD SUB POOL ID IN PARAMETER */
         MVI   SPID,X'F5'                                          0391
*   LENCORE=TOTLEN;                 /* LOAD AMOUNT OF STORAGE TO GET */
         STCM  TOTLEN,7,LENCORE                                    0392
*   RFY                                                            0393
*    (REPTR,                                                       0393
*     RPARM,                                                       0393
*     N14R4,                                                       0393
*     N14R7) RESTRICTED;                                           0393
*   R13SAV=R13;                     /* SAVE REG 13           @YM08604*/
         LR    R13SAV,R13                                          0394
*   R13=ADDR(LOCKSAV);              /*                       @YM08604*/
         LA    R13,LOCKSAV                                         0395
*   GEN REFS(FLC,PSALITA)                                          0396
*       (SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=SAVE,RELATED=(A));
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=SAVE,RELATED=(A)
*   REPTR=GETFREEP;                 /* LOAD PARAMETER REGISTER       */
         L     REPTR,GETFREEP                                      0397
*   N14FREE=REPTR;                  /* PARAMETER FOR FREE MAIN       */
         ST    REPTR,N14FREE                                       0398
*   N14R4=NVTMSTCB;                 /* LOAD ADDRESS OF MASTER TCB    */
         L     N14R4,NVTMSTCB(,RNVT)                               0399
*   N14R7=NVTMASCB;                 /* LOAD ADDRESS OF MASTER ASCB   */
         L     N14R7,NVTMASCB(,RNVT)                               0400
*   R13=R13SAV;                     /*                       @YM08604*/
         LR    R13,R13SAV                                          0401
*   GEN(GETMAIN   R,LV=(0),BRANCH=YES)                             0402
*   REFS(REPTR,CVTPTR,CVTMAP,CVTRMBR,CVTABEND,SCVTRMBR,SCVTSECT);  0402
         GETMAIN   R,LV=(0),BRANCH=YES
*   R13SAV=R13;                     /*                       @YM08604*/
         LR    R13SAV,R13                                          0403
*   R13=ADDR(LOCKSAV);              /*                       @YM08604*/
         LA    R13,LOCKSAV                                         0404
*   GEN(SETLOCK RELEASE,TYPE=LOCAL,REGS=SAVE,RELATED=(A));/* @YM08604*/
         SETLOCK RELEASE,TYPE=LOCAL,REGS=SAVE,RELATED=(A)
*   R13=R13SAV;                     /*                       @YM08604*/
         LR    R13,R13SAV                                          0406
*   RFY                                                            0407
*    (ASXB) BASED(TBASE);           /* REBASE ASXB                   */
*   RFY                                                            0408
*    (ASCB) BASED(TBASE1);          /* REBASE ASCB                   */
*   TBASE1=NVTAASCB;                /* POINT TO ASM ASCB             */
         L     TBASE1,NVTAASCB(,RNVT)                              0409
*   TBASE=ASCBASXB;                 /* POINT TO ASM ASXB             */
         L     TBASE,ASCBASXB(,TBASE1)                             0410
*   ASXBSPSA=RPARM;                 /* SAVE ADDR TO STORE IN ASXB    */
         ST    RPARM,ASXBSPSA(,TBASE)                              0411
*   TABPTR1=RPARM;                  /* POINT TO AREA                 */
         LR    TABPTR1,RPARM                                       0412
*   N14FREE1=RPARM;                 /* SAVE ADDRESS FOR FREEMAIN     */
         ST    RPARM,N14FREE1                                      0413
*   RFY                                                            0414
*    (REPTR,                                                       0414
*     N14R4,                                                       0414
*     N14R7) UNRESTRICTED;                                         0414
*   WSAVT=CVTWSAL;                  /* POINT TO WORK AREA DEFINITION */
         L     @10,CVTPTR                                          0415
         L     WSAVT,CVTWSAL(,@10)                                 0415
*   RPARM=RPARM+                    /* UPDATE ADDRESS POINTER        */
*       (LEN*4);                                                   0416
         LH    @10,LEN(,WSAVT)                                     0416
         LR    @08,@10                                             0416
         SLA   @08,2                                               0416
         ALR   RPARM,@08                                           0416
*   RPARM=((RPARM+7)×7)&&7;         /* ROUND TO DOUBLE WORD          */
         LA    @08,7                                               0417
         LR    @04,RPARM                                           0417
         ALR   @04,@08                                             0417
         OR    @04,@08                                             0417
         XR    @04,@08                                             0417
         LR    RPARM,@04                                           0417
*   CTR=LEN;                        /* SET NUMBER OF ENTRIES         */
         LR    CTR,@10                                             0418
*   WSAVT=WSAVT+4;                  /* UPDATE WSAVT TO ENTRY LENGTHS */
         AH    WSAVT,@CH00073                                      0419
*   DO I=CTR TO 1 BY-1;             /* LOOP UNTIL ALL ENTRIES INIT   */
         LR    I,CTR                                               0420
         B     @DE00420                                            0420
@DL00420 DS    0H                                                  0421
*     VECTOR=RPARM;                 /* PUT ADDRESS IN VECTOR TABLE   */
         ST    RPARM,VECTOR(,TABPTR1)                              0421
*     TABPTR1=TABPTR1+              /* STEP ADDRESS                  */
*         NEXTWORD;                                                0422
         AH    TABPTR1,@CH00073                                    0422
*     RPARM=RPARM+LEN;              /* STEP DEFINITION ADDRESS       */
         AH    RPARM,LEN(,WSAVT)                                   0423
*     WSAVT=WSAVT+2;                /* UPDATE WSAVT TO NEXT LEN ENTRY*/
         AH    WSAVT,@CH00189                                      0424
*   END;                                                           0425
         BCTR  I,0                                                 0425
@DE00420 LTR   I,I                                                 0425
         BP    @DL00420                                            0425
*   RFY                                                            0426
*    (ASCB) BASED(ASCBPTR);         /* REBASE ASCB                   */
*   RFY                                                            0427
*    (ASXB) BASED(ASXBPTR);         /* REBASE ASXB                   */
*   RFY                                                            0428
*    (ASCB) BASED(TBASE);           /* RESPECIFY BASE FOR ASCB       */
*   TBASE=NVTAASCB;                 /* SET BASE TO ADDR OF ASM ASCB  */
         L     TBASE,NVTAASCB(,RNVT)                               0429
*   ASCBTCBS=1;                     /* SET NUMBER OF READY TCBS TO 1 */
         MVC   ASCBTCBS(4,TBASE),@CF00070                          0430
*   ASCBSTOR=NVTRPAGE               /* LOAD REAL ADDRESS OF SEGMENT  */
*       +3072+(4096*(NVTLSQNO-1))   /* TABLE OR'ED WITH CREG1 MASK   */
*       ×N14CREG1;                  /* INTO ASCB                     */
         LA    @09,3072                                            0431
         AL    @09,NVTRPAGE(,RNVT)                                 0431
         LH    @05,NVTLSQNO(,RNVT)                                 0431
         BCTR  @05,0                                               0431
         SLA   @05,12                                              0431
         ALR   @09,@05                                             0431
         O     @09,N14CREG1                                        0431
         ST    @09,ASCBSTOR(,TBASE)                                0431
*   RFY                                                            0432
*    (ASCB) BASED(ASCBPTR);         /* RESET BASE                    */
*/* SET UP RB                                                        */
*                                                                  0433
*   RFY                                                            0433
*    (TCB) BASED(TBASE);            /* RESET TCB BASE                */
*   TBASE=NVTASTCB;                 /* LOAD ADDRESS OF ASM TCB       */
         L     TBASE,NVTASTCB(,RNVT)                               0434
*   RBSECPTR=TCBRBP;                /* LOAD ADDR OF ASM RB           */
         L     RBSECPTR,TCBRBP(,TBASE)                             0435
*   N14PSW2=ADDR(LOADRIM2);         /* PUT BRANCH ADDRESS IN PSW     */
         LA    @09,LOADRIM2                                        0436
         ST    @09,N14PSW2                                         0436
*   RBOPSW=N14PSW;                  /* PUT PSW IN RB                 */
         MVC   RBOPSW(8,RBSECPTR),N14PSW                           0437
*   RBWCF='0'B;                     /* SET WAIT COUNT TO ZERO        */
         MVI   RBWCF(RBSECPTR),X'00'                               0438
*   RFY                                                            0439
*    (TCB) BASED(TCBPTR);           /* RESET TCB BASE                */
*/* ISSUE WAIT                                                       */
*                                                                  0440
*   GEN(STM   REPTR,RENTRY,N14SAVE);/* SAVE REGS TO ESTABLISH      0440
*                                      ADDRESSABILITY IN ASM         */
         STM   REPTR,RENTRY,N14SAVE
*   RFY                                                            0441
*    (ASMVT) BASED(TBASE);          /* REBASE ASM VECTOR TABLE       */
*   TBASE=CVTASMVT;                 /* LOAD POINTER                  */
         L     @15,CVTPTR                                          0442
         L     TBASE,CVTASMVT(,@15)                                0442
*   RPARM=ADDR(ASMNPECB);           /* ADDRESS OF ECB                */
         LA    RPARM,ASMNPECB(,TBASE)                              0443
*   RFY                                                            0444
*    (ASMVT) BASED(ASMVTPTR);       /* REBASE ASM VECTOR TABLE       */
*   GEN(WAIT   ,ECB=(1));                                          0445
         WAIT   ,ECB=(1)
*                                                                  0446
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*   PROCESS MESSAGES FOR ASM                                       */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/* THIS SEGMENT OF THE MODULE CHECKS THE ECB FOR A RETURN CODE OF 4 */
*/* UPON RECEIVING CONTROL FROM ASM. IF THE RETURN CODE IS 4 AN      */
*/* ERROR HAS BEEN ENCOUNTERED. A MESSAGE IS THEN ISSUED AND THE     */
*/* SYSTEM IS PLACED IN A WAIT STATE WITH A CODE OF '3C'X. IF NO     */
*/* ERROR HAS BEEN ENCOUNTERED CONTROL IS RETURNED TO NIPM           */
*/*                                                                  */
*/********************************************************************/
*/* CHECK ECB FOR RETURN CODE                                        */
*                                                                  0446
*   RFY                                                            0446
*    (ASMVT) BASED(TBASE);          /* REBASE ASM VECTOR TABLE       */
*   TBASE=CVTASMVT;                 /* SET BASE                      */
         L     @15,CVTPTR                                          0447
         L     TBASE,CVTASMVT(,@15)                                0447
*   N14RC=N14RC1;                   /* MOVE RETURN CODE FROM ECB TO
*                                      WORKING AREA                  */
         MVC   N14RC(1),N14RC1+84(TBASE)                           0448
*   RFY                                                            0449
*    (ASMVT) BASED(ASMVTPTR);       /* REBASE ASM VECTOR TABLE       */
*   IF N14RC='04'X                  /* TEST FOR ERROR CODE           */
*     THEN                                                         0450
         CLI   N14RC,X'04'                                         0450
         BNE   @RF00450                                            0450
*     DO;                           /* ISSUE WTO FOR ERROR MSG       */
*       GEN(IEAPMNIP  TYPE=WTO,PARAM=MSG216I);                     0452
*                                                                  0452
         IEAPMNIP  TYPE=WTO,PARAM=MSG216I
*/* SET WAIT STATE CODE AND ISSUE WAIT USING  IEAPMNIP               */
*                                                                  0453
*       NVTFLWSC=NVTWCN01;          /* INDICATE WAIT STATE CODE      */
         MVI   NVTFLWSC(RNVT),X'63'                                0453
*       GEN(IEAPMNIP  TYPE=SWAIT);  /* CALL NIPM FOR WAIT STATE      */
         IEAPMNIP  TYPE=SWAIT
*     END;                                                         0455
*   ELSE                                                           0456
*     ;                                                            0456
@RF00450 DS    0H                                                  0457
*   IF N14RC='08'X                  /* TEST FOR ERROR CODE OF 08     */
*     THEN                                                         0457
         CLI   N14RC,X'08'                                         0457
         BNE   @RF00457                                            0457
*     DO;                                                          0458
*       GEN(IEAPMNIP TYPE=WTO,PARAM=MSG935W);/* WRITE OUT MSG        */
         IEAPMNIP TYPE=WTO,PARAM=MSG935W
*       NVTFLWSC=NVTFLWNM;          /* SET WAIT STATE CODE           */
         MVI   NVTFLWSC(RNVT),X'3C'                                0460
*       GEN(IEAPMNIP TYPE=SWAIT);   /* GO TO NIP TERMINATION RTN     */
         IEAPMNIP TYPE=SWAIT
*     END;                                                         0462
*   ELSE                                                           0463
*     RFY                                                          0463
*      (REPTR,                                                     0463
*       RPARM) RESTRICTED;                                         0463
@RF00457 DS    0H                                                  0464
*   R13SAV=R13;                     /*                       @YM08604*/
         LR    R13SAV,R13                                          0464
*   R13=ADDR(LOCKSAV);              /*                       @YM08604*/
         LA    R13,LOCKSAV                                         0465
*   GEN(SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=SAVE,RELATED=(B));
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=SAVE,RELATED=(B)
*   N14R4=NVTMSTCB;                 /* LOAD ADDRESS OF MASTER TCB    */
         L     N14R4,NVTMSTCB(,RNVT)                               0467
*   N14R7=NVTMASCB;                 /* LOAD ADDRESS OF MASTER ASCB   */
         L     N14R7,NVTMASCB(,RNVT)                               0468
*   REPTR=N14FREE;                  /* FREE LOCAL WORK AREA IN CSA   */
         L     REPTR,N14FREE                                       0469
*   RPARM=N14FREE1;                 /* REG 0 HAS SPID AND LENGTH REG
*                                      1 HAS ADDRESS                 */
         L     RPARM,N14FREE1                                      0470
*   R13=R13SAV;                     /*                       @YM08604*/
         LR    R13,R13SAV                                          0471
*   GEN(FREEMAIN   R,LV=(0),A=(1),BRANCH=YES);                     0472
         FREEMAIN   R,LV=(0),A=(1),BRANCH=YES
*   R13SAV=R13;                     /*                       @YM08604*/
         LR    R13SAV,R13                                          0473
*   R13=ADDR(LOCKSAV);              /*                       @YM08604*/
         LA    R13,LOCKSAV                                         0474
*   GEN(SETLOCK RELEASE,TYPE=LOCAL,REGS=SAVE,RELATED=(B));/* @YM08604*/
         SETLOCK RELEASE,TYPE=LOCAL,REGS=SAVE,RELATED=(B)
*   R13=R13SAV;                     /*                       @YM08604*/
         LR    R13,R13SAV                                          0476
*   RETURN;                         /* RETURN CODE OF 0 NO ERROR   0477
*                                      RETURN TO CALLER              */
@EL00001 L     @13,4(,@13)                                         0477
@EF00001 DS    0H                                                  0477
@ER00001 LM    @14,@12,12(@13)                                     0477
         BR    @14                                                 0477
*                                                                  0478
*/********************************************************************/
*/*                                                                  */
*/*   LOAD RIM2 AND RIM3 FOR EXECUTION                               */
*/*                                                                  */
*/* THIS SEGMENT LOADS THE TWO ASM RIMS.                             */
*                                                                  0478
*LOADRIM2:                                                         0478
*                                                                  0478
*/********************************************************************/
*/*                                                                  */
*/* THIS SEGMENT WILL LOAD ASM RIM 2 AND BRANCH TO IT. UPON RETURN   */
*/* RIM 2 IS DELETED AND RIM 3 IS LOADED AND BRANCHED TO. RIM 3      */
*/* DOES NOT RETURN TO THIS MODULE IN THIS ADDRESS SPACE, BUT ASM    */
*/* WILL POST AN ECB TO WAKE UP THIS MODULE IN THE MASTER SCHEDULER  */
*/* ADDRESS SPACE. THE FOLLOWING REGISTERS ARE USED IN THIS SEGMENT  */
*/*           REPTR(REG 0) CONTAINS ENTRY POINT ADDRESS OF MODULE    */
*/*                        UPON RETURN FROM LOAD MACRO               */
*/*           RSAVE(REG 13) USED TO PASS ADDRESS OF SAVE AREA        */
*/*                         TO BRANCHED TO MODULE                    */
*/*           REXIT(REG 14) CONVENTIONAL EXIT REGISTER               */
*/*           RENTRY(REG 15) CONVENTIONAL LINKING REGISTER           */
*/*                                                                  */
*/********************************************************************/
*/* RESTORE CONTENTS OF REGISTERS TO ESTABLISH ADDRESSABILITY        */
*                                                                  0478
*   GEN(BALR    RENTRY,REPTR);                                     0478
LOADRIM2 BALR    RENTRY,REPTR
*N14RESTO:                                                         0479
*   GEN(LM   REPTR,RENTRY,N14SAVE-N14RESTO(RENTRY));               0479
*                                                                  0479
N14RESTO LM   REPTR,RENTRY,N14SAVE-N14RESTO(RENTRY)
*/* STORE START OF ASM AREA AND SIZE IN GDA FOR TEMPORARY USE        */
*                                                                  0480
*   RFY                                                            0480
*    (GDA) BASED(TBASE);            /* REBASE GDA                    */
*   TBASE=CVTGDA;                   /* SET BASE                      */
         L     @10,CVTPTR                                          0481
         L     TBASE,CVTGDA(,@10)                                  0481
*   PASTRT=ASMORIG;                 /* INSERT START ASM ADDR IN GDA  */
         MVC   PASTRT(4,TBASE),ASMORIG                             0482
*   PASIZE=5242880;                 /* INSERT ASM SIZE IN GDA        */
         MVC   PASIZE(4,TBASE),@CF02720                            0483
*   RFY                                                            0484
*    (GDA) BASED(GDAPTR);           /* REBASE GDA                    */
*/* THIS ROUTINE BUILDS THE LOCAL WORK SAVE VECTOR TABLE             */
*                                                                  0485
*   WSAVT=CVTWSAL;                  /* POINT TO DEFINITON AREA       */
         L     WSAVT,CVTWSAL(,@10)                                 0485
*   WSAVT=WSAVT+2;                  /* STEP TO LENGTH ENTRY          */
         AH    WSAVT,@CH00189                                      0486
*   TOTLEN=LEN*8;                   /* EACH ENTRY IS DOUBLE WORD     */
         LH    TOTLEN,LEN(,WSAVT)                                  0487
         SLA   TOTLEN,3                                            0487
*   SPID='FF'X;                     /* LOAD SUB POOL ID IN PARAMETER */
         MVI   SPID,X'FF'                                          0488
*   LENCORE=TOTLEN;                 /* LOAD AMOUNT OF STORAGE TO GET */
         STCM  TOTLEN,7,LENCORE                                    0489
*   RFY                                                            0490
*    (REPTR,                                                       0490
*     RPARM,                                                       0490
*     N14R4,                                                       0490
*     N14R7) RESTRICTED;                                           0490
*   R13SAV=R13;                     /*                       @YM08604*/
         LR    R13SAV,R13                                          0491
*   R13=ADDR(LOCKSAV);              /*                       @YM08604*/
         LA    R13,LOCKSAV                                         0492
*   GEN(SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=SAVE,RELATED=(C));
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=SAVE,RELATED=(C)
*   REPTR=GETFREEP;                 /* LOAD PARAMETER REGISTER       */
         L     REPTR,GETFREEP                                      0494
*   N14R4=NVTASTCB;                 /* LOAD ADDRESS OF ASM TCB       */
         L     N14R4,NVTASTCB(,RNVT)                               0495
*   N14R7=NVTAASCB;                 /* LOAD ADDRESS OF ASM ASCB      */
         L     N14R7,NVTAASCB(,RNVT)                               0496
*   R13=R13SAV;                     /*                       @YM08604*/
         LR    R13,R13SAV                                          0497
*   GEN(GETMAIN   R,LV=(0),BRANCH=YES)                             0498
*   REFS(REPTR,CVTPTR,CVTMAP,CVTRMBR);                             0498
         GETMAIN   R,LV=(0),BRANCH=YES
*   R13SAV=R13;                     /*                       @YM08604*/
         LR    R13SAV,R13                                          0499
*   R13=ADDR(LOCKSAV);              /*                       @YM08604*/
         LA    R13,LOCKSAV                                         0500
*   GEN(SETLOCK RELEASE,TYPE=LOCAL,REGS=SAVE,RELATED=(C));/* @YM08604*/
         SETLOCK RELEASE,TYPE=LOCAL,REGS=SAVE,RELATED=(C)
*   R13=R13SAV;                     /*                       @YM08604*/
         LR    R13,R13SAV                                          0502
*   RFY                                                            0503
*    (ASXB) BASED(TBASE);           /* REBASE ASXB                   */
*   RFY                                                            0504
*    (ASCB) BASED(TBASE1);          /* REBASE ASCB                   */
*   TBASE1=NVTAASCB;                /* POINT TO ASM ASCB             */
         L     TBASE1,NVTAASCB(,RNVT)                              0505
*   TBASE=ASCBASXB;                 /* POINT TO ASM ASXB             */
         L     TBASE,ASCBASXB(,TBASE1)                             0506
*   RFY                                                            0507
*    (REPTR,                                                       0507
*     N14R4,                                                       0507
*     N14R7) UNRESTRICTED;                                         0507
*   TABPTR1=RPARM;                  /* POINT TO AREA                 */
         LR    TABPTR1,RPARM                                       0508
*   N14LSQST=RPARM;                 /* SAVE POINTER TO PUT IN ASXB   */
         ST    RPARM,N14LSQST                                      0509
*   WSAVT=CVTWSAL;                  /* POINT TO WORK AREA DEFINITION */
         L     @10,CVTPTR                                          0510
         L     WSAVT,CVTWSAL(,@10)                                 0510
*   RPARM=RPARM+                    /* UPDATE ADDRESS POINTER        */
*       (LEN*4);                                                   0511
         LH    @10,LEN(,WSAVT)                                     0511
         LR    @04,@10                                             0511
         SLA   @04,2                                               0511
         ALR   RPARM,@04                                           0511
*   RPARM=((RPARM+7)×7)&&7;         /* ROUND TO DOUBLE WORD          */
         LA    @04,7                                               0512
         LR    @00,RPARM                                           0512
         ALR   @00,@04                                             0512
         OR    @00,@04                                             0512
         XR    @00,@04                                             0512
         LR    RPARM,@00                                           0512
*   CTR=LEN;                        /* SET NUMBER OF ENTRIES         */
         LR    CTR,@10                                             0513
*   WSAVT=WSAVT+4;                  /* UPDATE WSAVT TO ENTRY LENGTHS */
         AH    WSAVT,@CH00073                                      0514
*   DO I=CTR TO 1 BY-1;             /* LOOP UNTIL ALL ENTRIES INIT   */
         LR    I,CTR                                               0515
         B     @DE00515                                            0515
@DL00515 DS    0H                                                  0516
*     VECTOR=RPARM;                 /* PUT ADDRESS IN VECTOR TABLE   */
         ST    RPARM,VECTOR(,TABPTR1)                              0516
*     TABPTR1=TABPTR1+              /* STEP ADDRESS                  */
*         NEXTWORD;                                                0517
         AH    TABPTR1,@CH00073                                    0517
*     RPARM=RPARM+LEN;              /* STEP DEFINITION ADDRESS       */
         AH    RPARM,LEN(,WSAVT)                                   0518
*     WSAVT=WSAVT+2;                /* UPDATE WSAVT TO NEXT LEN ENTRY*/
         AH    WSAVT,@CH00189                                      0519
*   END;                                                           0520
         BCTR  I,0                                                 0520
@DE00515 LTR   I,I                                                 0520
         BP    @DL00515                                            0520
*   ASXBSPSA=N14LSQST;              /* SAVE POINTER IN ASXB          */
         MVC   ASXBSPSA(4,TBASE),N14LSQST                          0521
*   RFY                                                            0522
*    (ASCB) BASED(ASCBPTR);         /* REBASE ASCB                   */
*   RFY                                                            0523
*    (ASXB) BASED(ASXBPTR);         /* REBASE ASXB                   */
*   RFY                                                            0524
*    (REPTR,                                                       0524
*     RPARM,                                                       0524
*     RSAVE,                                                       0524
*     REXIT,                                                       0524
*     RENTRY) RESTRICTED;                                          0524
*                                                                  0524
*/* BUILD SVRB POOL                                                  */
*                                                                  0525
*   GEN(BLDCPOOL SP=255,CSIZE=SVRBLEN,POOLSIZ=2,BRANCH=YES,BNDRY=DWORD)
*   REFS(CVTBLDCP);                                                0525
         BLDCPOOL SP=255,CSIZE=SVRBLEN,POOLSIZ=2,BRANCH=YES,BNDRY=DWORD
*   GEN(LTR   RENTRY,RENTRY);       /* CHECK FOR 0 RETURN CODE       */
         LTR   RENTRY,RENTRY
*   GEN(BNZ   N14BLCPF);            /* IF NOT ZERO ERROR             */
         BNZ   N14BLCPF
*   RFY                                                            0528
*    (ASCB) BASED(TBASE);           /* REBASE ASCB                   */
*   TBASE=NVTAASCB;                 /* POINT TO ASM ASCB             */
         L     TBASE,NVTAASCB(,RNVT)                               0529
*   ASCBQSVC=REPTR;                 /* PUT ID OF CELL POOL IN ASCB   */
         ST    REPTR,ASCBQSVC(,TBASE)                              0530
*   RFY                                                            0531
*    (ASCB) BASED(ASCBPTR);         /* REBASE ASCB                   */
*/* GENERATE LOAD MACRO TO LOAD ASM RIM 2                            */
*                                                                  0532
*   RPARM=NVTDCBSN;                 /* LOAD LIBRARY NAME             */
         L     RPARM,NVTDCBSN(,RNVT)                               0532
*   GEN(LOAD   EP=IEAVNPA4,DCB=(1))                                0533
*   REFS(NVTDCBSN);                                                0533
         LOAD   EP=IEAVNPA4,DCB=(1)
*   RENTRY=REPTR;                   /* PUT ENTRY POINT ADDRESS INTO
*                                      LINKING REGISTER              */
         LR    RENTRY,REPTR                                        0534
*   RSAVE=ADDR(N14SAVE);            /* LOAD ADDRESS OF SAVE AREA INTO
*                                      REGISTER 13                   */
         LA    RSAVE,N14SAVE                                       0535
*/* GENERATE BALR TO ASM RIM 2                                       */
*                                                                  0536
*   GEN(BALR   REXIT,RENTRY);       /* BRANCH TO ASM RIM 2           */
         BALR   REXIT,RENTRY
*/* UPON RETURN FROM RIM 2 DELETE IT                                 */
*                                                                  0537
*   GEN(DELETE   EP=IEAVNPA4);      /* DELETE RIM 2                  */
         DELETE   EP=IEAVNPA4
*/*  GENERATE LOAD MACRO TO LOAD ASM RIM 3                           */
*                                                                  0538
*   RPARM=NVTDCBSN;                 /* LOAD LIBRARY NAME             */
         L     RPARM,NVTDCBSN(,RNVT)                               0538
*   GEN(LOAD   EP=IEAVNPB4,DCB=(1))                                0539
*   REFS(NVTDCBSN);                                                0539
         LOAD   EP=IEAVNPB4,DCB=(1)
*   RENTRY=REPTR;                   /* PUT ENTRY POINT ADDRESS INTO
*                                      LINKING REGISTER              */
         LR    RENTRY,REPTR                                        0540
*   RSAVE=ADDR(N14SAVE);            /* LOAD ADDRESS OF SAVE AREA INTO
*                                      REGISTER 13                   */
         LA    RSAVE,N14SAVE                                       0541
*/* GENERATE BALR TO RIM 3                                           */
*                                                                  0542
*   GEN(BR         RENTRY);         /* BRANCH TO RIM 3               */
         BR         RENTRY
*   RFY                                                            0543
*    (REPTR,                                                       0543
*     RSAVE,                                                       0543
*     REXIT,                                                       0543
*     RENTRY) UNRSTD;               /* UNRESTRICT REGISTERS          */
*/* ERROR PROCESSING FOR ERROR DURING THE BUILD OF THE SVRB POOL     */
*                                                                  0544
*N14BLCPF:                                                         0544
*   RFY                                                            0544
*    (ASMVT) BASED(TBASE);                                         0544
N14BLCPF DS    0H                                                  0545
*   TBASE=CVTASMVT;                                                0545
         L     @15,CVTPTR                                          0545
         L     TBASE,CVTASMVT(,@15)                                0545
*   RPARM=ADDR(ASMNPECB);                                          0546
         LA    RPARM,ASMNPECB(,TBASE)                              0546
*   N14R4=NVTMASCB;                                                0547
         L     N14R4,NVTMASCB(,RNVT)                               0547
*   GEN(POST   (1),4,ASCB=(4),ERRET=N14BLCPF);                     0548
         POST   (1),4,ASCB=(4),ERRET=N14BLCPF
*   RFY                                                            0549
*    (ASMVT) BASED(ASMVTPTR);                                      0549
*   RPARM=ADDR(N14ERECB);           /* LOAD DUMMY ECB                */
         LA    RPARM,N14ERECB                                      0550
*   GEN(WAIT   ,ECB=(1));                                          0551
         WAIT   ,ECB=(1)
*                                                                  0552
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*   SPACE ALLOCATION SUB ROUTINE FOR ALLOCATING CONTROL BLOCKS     */
*/*                                                                  */
*                                                                  0552
*NSPALLOC:                          /* SPACE ALLOCATION SUB RTN      */
*/* N14SATBL IS THE REAL ADDR OF A TABLE OF 3-WORD ENTRIES:          */
*/* LENGTH, REAL ADDRESS, AND VIRTUAL ADDRESS                        */
*/* N14SAHIR IS THE HIGH REAL ADDRESS TO BE USED BY THE RTN          */
*/* N14SAHIV IS THE HIGH VIRTUAL ADDRESS TO BE USED BY THE RTN       */
*                                                                  0552
*   RFY                                                            0552
*    (RENTRY,                                                      0552
*     REXIT) RSTD;                                                 0552
NSPALLOC DS    0H                                                  0553
*   N14SAHIR=(N14SAHIR              /* ROUND START REAL ADDR DOWN TO */
*       /8)                         /* AN 8 BYTE MULTIPLE            */
*       *8;                                                        0553
         L     @07,N14SAHIR                                        0553
         SRL   @07,3                                               0553
         SLA   @07,3                                               0553
         ST    @07,N14SAHIR                                        0553
*   N14SAHIV=(N14SAHIV              /* ROUND START VIRT ADDR DOWN TO */
*       /8)                         /* AN 8 BYTE MULTIPLE            */
*       *8;                                                        0554
         L     @07,N14SAHIV                                        0554
         SRL   @07,3                                               0554
         SLA   @07,3                                               0554
         ST    @07,N14SAHIV                                        0554
*   TABPTR=N14SATBL;                /* SET BASE TO REAL ADDR OF FIRST
*                                      TABLE ENTRY; SUBTRACT LENGTH
*                                      FROM CURRENT REAL ADDR AND PUT
*                                      RESULTING ADDR IN CORRES TABLE
*                                      ENTRY AND SAVE                */
         L     TABPTR,N14SATBL                                     0555
*NSPAL01:                                                          0556
*   NALLOCLN=((N14LNGTH             /* ROUND LENGTH FROM TABLE ENTRY */
*       +7)                         /* UP TO AN 8 BYTE MULTIPLE      */
*       ×7)&&7;                                                    0556
NSPAL01  LA    @07,7                                               0556
         L     NALLOCLN,N14LNGTH(,TABPTR)                          0556
         ALR   NALLOCLN,@07                                        0556
         OR    NALLOCLN,@07                                        0556
         XR    NALLOCLN,@07                                        0556
*   N14RADDR=N14SAHIR-NALLOCLN;                                    0557
         L     @07,N14SAHIR                                        0557
         SLR   @07,NALLOCLN                                        0557
         ST    @07,N14RADDR(,TABPTR)                               0557
*   N14SAHIR=N14RADDR;              /* SAVE REAL ADDR IN SAVE AREA   */
         ST    @07,N14SAHIR                                        0558
*   N14VADDR=N14SAHIV               /* SUBTRACT LENGTH FROM CURRENT  */
*       -NALLOCLN;                  /* VIRT ADDR AND PUT RESULT IN 0559
*                                      CORRES TABLE ENTRY            */
         L     @07,N14SAHIV                                        0559
         SLR   @07,NALLOCLN                                        0559
         ST    @07,N14VADDR(,TABPTR)                               0559
*   N14SAHIV=N14VADDR;              /* AND SAVE SAME VIRT ADDR IN  0560
*                                      SAVE AREA                     */
         ST    @07,N14SAHIV                                        0560
*   TABPTR=LENGTH(N14TABE)          /* UPDATE BASE TO NEXT TABLE     */
*       +TABPTR;                    /* ENTRY                         */
         AH    TABPTR,@CH02667                                     0561
*   IF N14LNGTH^=0                  /* CHECK IF THIS ENTRY IS LAST   */
*     THEN                                                         0562
         ICM   @07,15,N14LNGTH(TABPTR)                             0562
         BNZ   @RT00562                                            0562
*     GO TO NSPAL01;                /* (ALL ZEROES), IF NOT LOOP     */
*   GEN(BR    REXIT);               /* IF SO, RETURN TO CALLER       */
         BR    REXIT
*   RFY                                                            0565
*    (RENTRY,                                                      0565
*     REXIT) UNRSTD;                                               0565
*   END                                                            0566
*                                                                  0566
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSUT5  (PROLOG  )                                       */
*/*%INCLUDE SYSUT5  (DECLARES)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHASCVT )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHAASVT )                                       */
*/*%INCLUDE SYSLIB  (IHAASXB )                                       */
*/*%INCLUDE SYSLIB  (IHADQE  )                                       */
*/*%INCLUDE SYSLIB  (IHAFBQE )                                       */
*/*%INCLUDE SYSLIB  (IHAFQE  )                                       */
*/*%INCLUDE SYSLIB  (IHAGDA  )                                       */
*/*%INCLUDE SYSLIB  (IHALDA  )                                       */
*/*%INCLUDE SYSLIB  (IHANVT  )                                       */
*/*%INCLUDE SYSLIB  (IHAPFTE )                                       */
*/*%INCLUDE SYSLIB  (IHAPGTE )                                       */
*/*%INCLUDE SYSLIB  (IHAPQE  )                                       */
*/*%INCLUDE SYSLIB  (IHAPVT  )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IKJRB   )                                       */
*/*%INCLUDE SYSLIB  (IHARSMHD)                                       */
*/*%INCLUDE SYSLIB  (IHASGTE )                                       */
*/*%INCLUDE SYSLIB  (IHASPQE )                                       */
*/*%INCLUDE SYSLIB  (IHAXPTE )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (ILRASMVT)                                       */
*/*%INCLUDE SYSUT5  (ASMINIT )                                       */
*/*%INCLUDE SYSUT5  (ASMACT  )                                       */
*/*%INCLUDE SYSUT5  (CSAWORK )                                       */
*/*%INCLUDE SYSUT5  (PROCMSG )                                       */
*/*%INCLUDE SYSUT5  (LOADRIM2)                                       */
*/*%INCLUDE SYSUT5  (NSPALLOC)                                       */
*                                                                  0566
*       ;                                                          0566
         B     @EL00001                                            0566
@DATA    DS    0H
@CH00073 DC    H'4'
@CH00089 DC    H'8'
@CH02667 DC    H'12'
@CH00037 DC    H'16'
         DS    0F
@SA00001 DS    18F
@TF00001 DS    F
         DS    0F
@CF00070 DC    F'1'
@CF00189 DC    F'2'
@CH00189 EQU   @CF00189+2
@CF02788 DC    F'65535'
@CF02716 DC    F'65536'
@CF02714 DC    F'2097152'
@CF02720 DC    F'5242880'
@CF02789 DC    F'-5234688'
@CF02792 DC    F'-5177344'
@CF02744 DC    XL4'7FFFFFFF'
         DS    0D
N14SSTE  DC    XL4'F0000000'
N14SISTE DC    XL4'F0000001'
ASMORIG  DC    XL4'00200000'
N14LSQST DS    A
N14CREG1 DC    XL4'0F000000'
N14ERECB DC    XL4'00000000'
N14FREE  DS    A
N14FREE1 DS    A
GETFREEP DS    FL4
         ORG   GETFREEP
SPID     DS    FL1
LENCORE  DS    FL3
         ORG   GETFREEP+4
N14SATBL DS    A
N14SAHIR DS    A
N14SAHIV DS    A
N14RASPT DS    A
N14ASMEN DS    A
N14PTEP  DC    A(0)
ASVTPTR  DS    A
ASXBPTR  DS    A
DQESEPTR DS    A
FBQESPTR DS    A
FQESEPTR DS    A
GDAPTR   DS    A
LDAPTR   DS    A
PFTEPTR  DS    A
PQESEPTR DS    A
SCVTSPTR DS    A
PTEPTR   DS    A
PVTPTR   DS    A
RSMHDPTR DS    A
SPQESPTR DS    A
STEPTR   DS    A
TCBPTR   DS    A
XPTEPTR  DS    A
N14ECBAD DS    A
N14LQA   DS    A
N14PQEAD DS    A
PCPTR    DS    A
N14SIPTE DC    XL2'0008'
N14SPTE  DC    XL2'0001'
N14FRMNO DC    AL2(0)
ASMID    DC    XL2'0002'
N14LSVBN DS    BL2
N14HIVBN DS    BL2
N14PFTE1 DS    BL2
         DS    CL2
N14SAVE  DS    CL72
N14RC    DS    CL1
         DS    CL3
LOCKSAV  DS    CL20
N14PSW   DS    CL8
         ORG   N14PSW
N14PSW1  DC    X'070C0000'
N14PSW2  DS    CL4
         ORG   N14PSW+8
N14LSQCB DS    CL160
         ORG   N14LSQCB
NSEGTAB  DS    CL12
         ORG   NSEGTAB
@NM00128 DC    A(1024)
@NM00129 DC    2A(0)
         ORG   N14LSQCB+12
NXPT     DS    CL12
         ORG   NXPT
@NM00130 DC    A(192)
@NM00131 DC    2A(0)
         ORG   N14LSQCB+24
NPT      DS    CL12
         ORG   NPT
@NM00132 DC    A(32)
@NM00133 DC    2A(0)
         ORG   N14LSQCB+36
GMPOOL   DS    CL12
         ORG   GMPOOL
@NM00134 DC    A(2048)
@NM00135 DC    2A(0)
         ORG   N14LSQCB+48
NLDA     DS    CL12
         ORG   NLDA
@NM00136 DC    AL4(1496)
@NM00137 DC    2A(0)
         ORG   N14LSQCB+60
NLSQSPQE DS    CL12
         ORG   NLSQSPQE
@NM00138 DC    AL4(16)
@NM00139 DC    2A(0)
         ORG   N14LSQCB+72
NLSQADQE DS    CL12
         ORG   NLSQADQE
@NM00140 DC    AL4(16)
@NM00141 DC    2A(0)
         ORG   N14LSQCB+84
NASMPQE  DS    CL12
         ORG   NASMPQE
@NM00142 DC    AL4(32)
@NM00143 DC    2A(0)
         ORG   N14LSQCB+96
NAS1FBQE DS    CL12
         ORG   NAS1FBQE
@NM00144 DC    AL4(16)
@NM00145 DC    2A(0)
         ORG   N14LSQCB+108
NAS2FBQE DS    CL12
         ORG   NAS2FBQE
@NM00146 DC    AL4(16)
@NM00147 DC    2A(0)
         ORG   N14LSQCB+120
NAS3FBQE DS    CL12
         ORG   NAS3FBQE
@NM00148 DC    AL4(16)
@NM00149 DC    2A(0)
         ORG   N14LSQCB+132
N14RSVPT DS    CL12
         ORG   N14RSVPT
@NM00150 DC    A(224)
@NM00151 DC    2A(0)
         ORG   N14LSQCB+144
NLSQAFQE DS    CL12
         ORG   NLSQAFQE
@NM00152 DC    AL4(8)
@NM00153 DC    2A(0)
         ORG   N14LSQCB+156
NLSQSTP  DC    A(0)
         ORG   N14LSQCB+160
N14DAT   DS    CL1
         DS    CL3
ASMVTPTR DS    31A
IEAVNP14 CSECT
MSG216I  DS     0H                     WTO
         IEAPMNIP   TYPE=HEADER,MSGST=MSG216I,MSGEND=MSG1E
         DC C'IEA216I GETMAIN FAILED DURING INITIALIZATION' MSG TXT
MSG1E    EQU    *
MSG935W  DS     0H
         IEAPMNIP  TYPE=HEADER,MSGST=MSG935W,MSGEND=MSG2E
         DC     CL28'IEA935W INSUFFICIENT PAGING '
         DC     CL25'RESOURCES, IPL TERMINATED'
MSG2E    EQU    *
IEAVNP14 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
LOOPCNT  EQU   @04
PFTEPTA  EQU   @05
R13SAV   EQU   @05
TBASE1   EQU   @05
TABPTR   EQU   @06
N14PFTE  EQU   @06
RBSECPTR EQU   @04
ASCBPTR  EQU   @06
N14ASIND EQU   @11
N14MSIND EQU   @11
N14MSLSQ EQU   @04
N14ASLSQ EQU   @04
N14RMSPT EQU   @04
N14RMSST EQU   @04
N14MOVE  EQU   @11
N14VLSQA EQU   @06
N14RLSQA EQU   @11
CHNADDR  EQU   @07
TBASE    EQU   @08
TABPTR1  EQU   @09
CTR      EQU   @11
TOTLEN   EQU   @04
WSAVT    EQU   @05
N14RLSQS EQU   @09
NALLOCLN EQU   @04
N14MSPGT EQU   @04
N14MSEN  EQU   @04
I        EQU   @04
RNVT     EQU   @02
RCVT     EQU   @03
RPARM    EQU   @01
N14R5    EQU   @05
N14R4    EQU   @04
N14R7    EQU   @07
RLMOVE1  EQU   @06
RLMOVE1A EQU   @07
RLMOVE2  EQU   @08
RLMOVE2A EQU   @09
SHFTREG  EQU   @04
RSAVE    EQU   @13
REPTR    EQU   @00
R13      EQU   @13
REXIT    EQU   @14
RENTRY   EQU   @15
CVTPTR   EQU   16
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
N14RC1   EQU   3
N14PTR   EQU   0
LEN      EQU   0
VECTOR   EQU   0
CHAINPTR EQU   0
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTABEND EQU   CVTMAP+200
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
SCVTSECT EQU   0
SCVTRMBR EQU   SCVTSECT+28
ASCB     EQU   0
ASCBSTOR EQU   ASCB+44
ASCBLDA  EQU   ASCB+48
ASCBRSM  EQU   ASCB+52
ASCBQSVC EQU   ASCB+92
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBASXB EQU   ASCB+108
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBTCBS EQU   ASCB+124
ASCBFMCT EQU   ASCB+152
ASVT     EQU   0
ASVTFRST EQU   ASVT+524
ASVTENTY EQU   ASVT+528
ASXB     EQU   0
ASXBFTCB EQU   ASXB+4
ASXBSPSA EQU   ASXB+112
ASXBAEQ  EQU   ASXB+168
DQESECT  EQU   0
DQFQEPTR EQU   DQESECT
DQEBLKAD EQU   DQESECT+8
DQELNTH  EQU   DQESECT+12
FBQESECT EQU   0
FWDPTR   EQU   FBQESECT
BCKPTR   EQU   FBQESECT+4
SIZE     EQU   FBQESECT+8
FBQAREA  EQU   FBQESECT+12
FQESECT  EQU   0
FQEPTR   EQU   FQESECT
FQTYPE   EQU   FQEPTR
FQELNTH  EQU   FQESECT+4
GDA      EQU   0
GVSMFLAG EQU   GDA
GDAFLAGS EQU   GVSMFLAG
PASTRT   EQU   GDA+16
PASIZE   EQU   GDA+20
VRPOSTQ  EQU   GDA+32
VRWAITQ  EQU   GDA+40
LDA      EQU   0
LVSMFLAG EQU   LDA
PASCBSV  EQU   LDA+4
ASDPQE   EQU   LDA+8
LSQAPTR  EQU   LDA+1464
CURRGNTP EQU   LDA+1472
LDARSVPT EQU   LDA+1480
LCLCELL  EQU   LDA+1488
LCLCELCT EQU   LDA+1492
NVT      EQU   0
NVTNPATR EQU   NVT+54
NVTNPREN EQU   NVTNPATR
NVTFLLB  EQU   NVT+55
NVTMSTCB EQU   NVT+56
NVTMASCB EQU   NVT+64
NVTAASCB EQU   NVT+68
NVTASTCB EQU   NVT+72
NVTNVRSZ EQU   NVT+104
NVTLSQAS EQU   NVT+124
NVTLSQNO EQU   NVT+130
NVTABSAV EQU   NVT+140
NVTFLCN  EQU   NVT+211
NVTFLASM EQU   NVTFLCN
NVTWTPSW EQU   NVT+224
NVTWPSW2 EQU   NVTWTPSW+4
NVTFLWSC EQU   NVTWPSW2+3
NVTLOAD  EQU   NVT+232
NVTSENSE EQU   NVT+236
NVTSWAIT EQU   NVT+240
NVTTIME  EQU   NVT+244
NVTUCBFN EQU   NVT+248
NVTWTO   EQU   NVT+252
NVTWTOR  EQU   NVT+256
NVTWTOR2 EQU   NVT+260
NVTOPEN  EQU   NVT+264
NVTMOUNT EQU   NVT+268
NVTVIRT  EQU   NVT+276
NVTREAL  EQU   NVT+280
NVTSCHED EQU   NVT+284
NVTOPIO  EQU   NVT+288
NVTDCBSN EQU   NVT+332
NVTRPAGE EQU   NVT+364
NVTXCTL  EQU   NVT+428
NVTLOCAT EQU   NVT+436
NVTFBQE1 EQU   NVT+516
NVTFBQE2 EQU   NVT+520
NVTAPQE  EQU   NVT+524
NVTFLPO  EQU   NVT+528
PFTE     EQU   0
PFTPGID  EQU   PFTE
PFTASID  EQU   PFTPGID
PFTVBN   EQU   PFTPGID+2
PFTQPTRS EQU   PFTE+4
PFTFQPTR EQU   PFTQPTRS
PFTBQPTR EQU   PFTQPTRS+2
PFTFLAG1 EQU   PFTE+12
PFTLSQA  EQU   PFTFLAG1
PFTFLAG2 EQU   PFTE+13
PFTQNDX  EQU   PFTE+14
PGTPTE   EQU   0
PGTRSA   EQU   PGTPTE
PGTBITS  EQU   PGTRSA+1
PQESECT  EQU   0
PQEFFBQE EQU   PQESECT
PQEBFBQE EQU   PQESECT+4
PQETCB   EQU   PQESECT+16
PQESIZE  EQU   PQESECT+20
PQEREGN  EQU   PQESECT+24
VMMFLGS  EQU   PQESECT+30
VVVRFLG  EQU   VMMFLGS
PVT      EQU   0
PVTFLAG1 EQU   PVT
PVTPFTP  EQU   PVT+12
PVTLCSA  EQU   PVT+26
PVTQS    EQU   PVT+296
PVTWSAX  EQU   PVT+336
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
RBPREFIX EQU   0
RBRSV019 EQU   RBPREFIX+14
RBRSV028 EQU   RBPREFIX+15
RBRSV041 EQU   RBPREFIX+27
RBRSV054 EQU   RBPREFIX+39
RBRTOPSW EQU   RBPREFIX+40
RBRTPSW2 EQU   RBRTOPSW+8
RBRTICIL EQU   RBRTPSW2
RBFLAGS1 EQU   RBPREFIX+56
RBINTCDA EQU   RBPREFIX+61
RBSECT   EQU   0
RBPPSAV  EQU   RBSECT
@NM00093 EQU   RBSECT+10
@NM00094 EQU   @NM00093
RBTRSVRB EQU   @NM00094
@NM00096 EQU   @NM00093+1
RBETXR   EQU   @NM00096
RBEP     EQU   RBSECT+12
RBPGMQ   EQU   RBSECT+24
@NM00103 EQU   RBSECT+28
IRBEND   EQU   RBSECT+96
@NM00107 EQU   RBSECT+96
RBRSV138 EQU   @NM00107+7
RBRSV150 EQU   RBSECT+167
RSMHD    EQU   0
RSMVSTO  EQU   RSMHD
RSMFLG1  EQU   RSMHD+12
RSMQS    EQU   RSMHD+24
RSMLFQ   EQU   RSMQS
RSMLSQA  EQU   RSMQS+4
RSMLSQAF EQU   RSMLSQA
RSMLSQAL EQU   RSMLSQA+2
RSMLIOQ  EQU   RSMQS+12
SGTSTE   EQU   0
SGTLK    EQU   SGTSTE
SGTPTO   EQU   SGTSTE+1
SGTBYTE  EQU   SGTPTO+2
SPQESECT EQU   0
SPQEAD   EQU   SPQESECT
SPDQEPTR EQU   SPQESECT+4
SPDQEAD  EQU   SPDQEPTR
SPQEFLGS EQU   SPQESECT+8
SPQEID   EQU   SPQESECT+10
XPTE     EQU   0
XPTFLAGS EQU   XPTE+2
XPTLPID  EQU   XPTE+4
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBRBP   EQU   TCB
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBPQE   EQU   TCB+152
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
ASMVT    EQU   0
ASMFLAG  EQU   ASMVT+38
ASMMSGF  EQU   ASMVT+39
ASMBUFC  EQU   ASMVT+48
ASMSCH   EQU   ASMVT+64
ASMTMCQU EQU   ASMVT+72
ASMNPECB EQU   ASMVT+84
ASMRECOV EQU   ASMVT+160
ASMRFLGS EQU   ASMRECOV+8
ASMRFRES EQU   ASMRFLGS
ASMRFSTA EQU   ASMRFLGS+1
ASMSPCS  EQU   ASMVT+200
ASMACEPC EQU   ASMSPCS+32
ASMSRBPC EQU   ASMSPCS+64
ASMPOOLS EQU   0
ASMSPP   EQU   ASMPOOLS+16
ASMSPS   EQU   ASMPOOLS+24
N14TABE  EQU   0
N14LNGTH EQU   N14TABE
N14RADDR EQU   N14TABE+4
N14VADDR EQU   N14TABE+8
PGTEND   EQU   0
SGTEND   EQU   0
CVTS01   EQU   CVTPGSIA
CVTPVTP  EQU   CVTS01+8
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTBLDCP EQU   CVTS01+140
CVTGDA   EQU   CVTS01+212
CVTWSAL  EQU   CVTS01+340
CVTASMVT EQU   CVTS01+356
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTRMBR  EQU   CVTS01+492
CVTGSDA  EQU   CVTS01+600
FLC      EQU   PSA
PSARSVTE EQU   PSARSVT
RBSECS03 EQU   RBEP
RBCDE    EQU   RBSECS03
RBCDFLGS EQU   RBCDE
RBSECS05 EQU   RBPGMQ
RBSQE    EQU   RBSECS05
RBSECS06 EQU   RBPGMQ
RBIQE    EQU   RBSECS06
RBSECS07 EQU   RBPGMQ
RBIQE2   EQU   RBSECS07
RBSECS08 EQU   IRBEND
RBSECS09 EQU   IRBEND
ASMSRAPC EQU   ASMSRBPC
ASMTMEPC EQU   ASMACEPC
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
RBRSV161 EQU   RBSECS09+64
RBSIRBWA EQU   RBSECS09
RBIQEWRK EQU   RBSECS08+4
RBNEXAV  EQU   RBSECS08
RBIQEA   EQU   RBIQE2
RBIQE1   EQU   RBIQE+1
RBUSE    EQU   RBIQE
RBSQEA   EQU   RBSQE+1
@NM00108 EQU   RBSQE
RBCDE1   EQU   RBCDE+1
RBCDLOAD EQU   RBCDFLGS
RBCDXCTL EQU   RBCDFLGS
RBCDSYNC EQU   RBCDFLGS
RBCDNODE EQU   RBCDFLGS
RBRSV010 EQU   RBCDFLGS
RBCDATCH EQU   RBCDFLGS
RBRSV009 EQU   RBCDFLGS
RBNOCELL EQU   RBCDFLGS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTRV612 EQU   CVTS01+664
CVTRV611 EQU   CVTS01+660
CVTRV610 EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTRV608 EQU   CVTS01+648
CVTRV607 EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTRV519 EQU   CVTS01+92
CVTRV327 EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
ASMSPSC  EQU   ASMSPS+4
ASMSPSQ  EQU   ASMSPS
ASMSPPC  EQU   ASMSPP+4
ASMSPPQ  EQU   ASMSPP
ASMSPSPN EQU   ASMPOOLS+15
ASMSPCSZ EQU   ASMPOOLS+14
ASMSPEXT EQU   ASMPOOLS+12
ASMSPTNC EQU   ASMPOOLS+8
ASMSPCCA EQU   ASMPOOLS+4
ASMSPID  EQU   ASMPOOLS
ASMRSVF4 EQU   ASMVT+484
ASMRSVF3 EQU   ASMVT+480
ASMBURST EQU   ASMVT+476
ASMBUFCT EQU   ASMVT+472
ASMIORQC EQU   ASMVT+468
ASMIORQR EQU   ASMVT+464
ASMRSVF2 EQU   ASMVT+460
ASMRSVF1 EQU   ASMVT+456
ASMALSEC EQU   ASMVT+452
ASMTOSEC EQU   ASMVT+448
ASMRSVP6 EQU   ASMVT+444
ASMRSVP5 EQU   ASMVT+440
ASMRSVP4 EQU   ASMVT+436
ASMRSVP3 EQU   ASMVT+432
ASMRSVP2 EQU   ASMVT+428
ASMRSVP1 EQU   ASMVT+424
ASMRLPPC EQU   ASMSPCS+192
ASMASMPC EQU   ASMSPCS+160
ASMWKAPC EQU   ASMSPCS+128
ASMIOEPC EQU   ASMSPCS+96
ASMAIEPC EQU   ASMSPCS
@NM00127 EQU   ASMVT+196
ASMILREX EQU   ASMVT+192
ASMILRRT EQU   ASMVT+188
ASMILRET EQU   ASMVT+184
ASMETSRB EQU   ASMRECOV+20
ASMIOSRB EQU   ASMRECOV+16
ASMRFCNT EQU   ASMRECOV+12
@NM00126 EQU   ASMRFLGS+2
@NM00125 EQU   ASMRFSTA
ASMRFTC  EQU   ASMRFSTA
ASMRFTM  EQU   ASMRFSTA
@NM00124 EQU   ASMRFRES
ASMFMON  EQU   ASMRFRES
ASMSCCNT EQU   ASMRECOV+4
ASMGMCNT EQU   ASMRECOV
ASMILRTP EQU   ASMVT+156
ASMSZPVA EQU   ASMVT+152
ASMILRAL EQU   ASMVT+148
ASMILRAA EQU   ASMVT+144
ASMCINV  EQU   ASMVT+140
ASMPLSIZ EQU   ASMVT+136
ASMPLPTR EQU   ASMVT+132
ASMASTCB EQU   ASMVT+128
ASMLGRAS EQU   ASMVT+124
ASMSYSS  EQU   ASMVT+120
ASMERRS  EQU   ASMVT+116
ASMNVSC  EQU   ASMVT+112
ASMVSC   EQU   ASMVT+108
ASMSLOTS EQU   ASMVT+104
ASMBKSLT EQU   ASMVT+100
ASMSTGXA EQU   ASMVT+96
ASMABPPT EQU   ASMVT+92
ASMRMECB EQU   ASMVT+88
ASMTMECB EQU   ASMVT+80
ASMTMIQA EQU   ASMTMCQU+4
ASMTMSER EQU   ASMTMCQU
@NM00123 EQU   ASMSCH+4
ASMSRBCT EQU   ASMSCH
ASMRSVF5 EQU   ASMVT+60
ASMIOCNT EQU   ASMVT+56
ASMABFCC EQU   ASMBUFC+4
ASMABFCQ EQU   ASMBUFC
ASMLSAI  EQU   ASMVT+40
ASMFSMSG EQU   ASMMSGF
ASMFNOSC EQU   ASMMSGF
@NM00122 EQU   ASMFLAG
ASMNOSAV EQU   ASMFLAG
ASMFPLPA EQU   ASMFLAG
ASMFDDR  EQU   ASMFLAG
ASMNBFCF EQU   ASMFLAG
ASMASID  EQU   ASMVT+36
ASMASCBP EQU   ASMVT+32
ASMILRVC EQU   ASMVT+28
ASMILRSX EQU   ASMVT+24
ASMILRPX EQU   ASMVT+20
ASMMONTR EQU   ASMVT+16
ASMILRIN EQU   ASMVT+12
ASMPARTP EQU   ASMVT+8
ASMLGVTP EQU   ASMVT+4
ASMVTASM EQU   ASMVT
@NM00121 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00120 EQU   TCB+296
TCBRV185 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBRSV36 EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBRSV35 EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00119 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBRSV04 EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00118 EQU   TCBPMASK
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
XPTLPN   EQU   XPTLPID+4
XPTLGN   EQU   XPTLPID
XPTRSV2  EQU   XPTE+3
XPTRSV4  EQU   XPTFLAGS
XPTDEFER EQU   XPTFLAGS
XPTFREL  EQU   XPTFLAGS
XPTVAM   EQU   XPTFLAGS
@NM00117 EQU   XPTFLAGS
XPTRSV3  EQU   XPTFLAGS
XPTXAV   EQU   XPTFLAGS
XPTSVAUX EQU   XPTFLAGS
XPTRSV1  EQU   XPTE+1
XPTPROT  EQU   XPTE
SPQERES2 EQU   SPQESECT+12
SPQEKEY  EQU   SPQESECT+11
SPQERES1 EQU   SPQESECT+9
SPQEOWN  EQU   SPQEFLGS
LASTSPQE EQU   SPQEFLGS
SPSHARE  EQU   SPQEFLGS
SPQEPTR  EQU   SPQEAD
SGTPAM   EQU   SGTBYTE
SGTEAC   EQU   SGTBYTE
@NM00116 EQU   SGTBYTE
@NM00115 EQU   SGTBYTE
@NM00114 EQU   SGTBYTE
@NM00113 EQU   SGTBYTE
@NM00112 EQU   SGTBYTE
SGTORG   EQU   SGTPTO
SGTKEY   EQU   SGTLK
SGTPTL   EQU   SGTLK
RSMFOEQ  EQU   RSMHD+44
RSMLIOQL EQU   RSMLIOQ+4
RSMLIOQF EQU   RSMLIOQ
RSMRSV2  EQU   RSMQS+8
RSMLFQL  EQU   RSMLFQ+2
RSMLFQF  EQU   RSMLFQ
RSMLPID  EQU   RSMHD+16
RSMRSV1  EQU   RSMHD+13
@NM00111 EQU   RSMFLG1
@NM00110 EQU   RSMFLG1
@NM00109 EQU   RSMFLG1
RSMCPNC  EQU   RSMFLG1
RSMCPNU  EQU   RSMFLG1
RSMGFAD  EQU   RSMFLG1
RSMIOCPC EQU   RSMFLG1
RSMIOCPU EQU   RSMFLG1
RSMASCB  EQU   RSMHD+8
RSMSPCT  EQU   RSMHD+4
SIRBEND  EQU   RBSECT+168
SVRBEND  EQU   RBSECT+168
RBRSV158 EQU   RBRSV150
RBRSV157 EQU   RBRSV150
RBRSV156 EQU   RBRSV150
RBRSV155 EQU   RBRSV150
RBRSV154 EQU   RBRSV150
RBRSV153 EQU   RBRSV150
RBRSV152 EQU   RBRSV150
RBRSV151 EQU   RBRSV150
RBRSV149 EQU   RBSECT+166
RBRSV148 EQU   RBSECT+164
RBSCBB   EQU   RBSECT+144
TIRBEND  EQU   @NM00107+8
PRBEND   EQU   @NM00107+8
RBRSV146 EQU   RBRSV138
RBRSV145 EQU   RBRSV138
RBRSV144 EQU   RBRSV138
RBRSV143 EQU   RBRSV138
RBRSV142 EQU   RBRSV138
RBRSV141 EQU   RBRSV138
RBRSV140 EQU   RBRSV138
RBRSV139 EQU   RBRSV138
RBRSV137 EQU   @NM00107+6
RBRSV136 EQU   @NM00107+4
RBRSV135 EQU   @NM00107
@NM00106 EQU   RBSECT+32
@NM00105 EQU   @NM00103+1
@NM00104 EQU   @NM00103
RBPGMQ1  EQU   RBPGMQ+1
@NM00102 EQU   RBPGMQ
@NM00101 EQU   RBSECT+16
@NM00100 EQU   @NM00096
@NM00099 EQU   @NM00096
RBIQETP  EQU   @NM00096
RBUSIQE  EQU   RBETXR
RBATTN   EQU   @NM00096
@NM00098 EQU   @NM00096
@NM00097 EQU   @NM00096
RBPMSVRB EQU   @NM00094
RBATNXIT EQU   @NM00094
@NM00095 EQU   @NM00094
RBWAITP  EQU   @NM00094
RBFNSVRB EQU   RBTRSVRB
RBFTP    EQU   @NM00094
RBSIZE   EQU   RBSECT+8
RBABOPSW EQU   RBSECT+4
RBPPSAV1 EQU   RBPPSAV+1
@NM00092 EQU   RBPPSAV
RBPRFXND EQU   RBPREFIX+64
RBINTCOD EQU   RBINTCDA+1
RBINLNTH EQU   RBINTCDA
RBWCSA   EQU   RBPREFIX+60
RBRSV004 EQU   RBPREFIX+57
RBSSSYN  EQU   RBFLAGS1
RBSCB    EQU   RBFLAGS1
RBLONGWT EQU   RBFLAGS1
RBASIR   EQU   RBFLAGS1
RBRSV159 EQU   RBFLAGS1
RBABEND  EQU   RBFLAGS1
RBXWAIT  EQU   RBFLAGS1
RBSLOCK  EQU   RBFLAGS1
RBRTRAN  EQU   RBRTPSW2+4
RBRTINCD EQU   RBRTICIL+2
RBRTILC  EQU   RBRTICIL+1
RBRSV160 EQU   RBRTICIL
RBRTPSW1 EQU   RBRTOPSW
RBRSV062 EQU   RBRSV054
RBRSV061 EQU   RBRSV054
RBRSV060 EQU   RBRSV054
RBRSV059 EQU   RBRSV054
RBRSV058 EQU   RBRSV054
RBRSV057 EQU   RBRSV054
RBRSV056 EQU   RBRSV054
RBRSV055 EQU   RBRSV054
RBRSV053 EQU   RBPREFIX+38
RBRSV052 EQU   RBPREFIX+36
RBRSV051 EQU   RBPREFIX+32
RBPRFXST EQU   RBPREFIX+32
RBRSV050 EQU   RBPREFIX+28
RBRSV049 EQU   RBRSV041
RBRSV048 EQU   RBRSV041
RBRSV047 EQU   RBRSV041
RBRSV046 EQU   RBRSV041
RBRSV045 EQU   RBRSV041
RBRSV044 EQU   RBRSV041
RBRSV043 EQU   RBRSV041
RBRSV042 EQU   RBRSV041
RBRSV040 EQU   RBPREFIX+26
RBRSV039 EQU   RBPREFIX+24
RBRSV038 EQU   RBPREFIX+20
RBRSV037 EQU   RBPREFIX+16
RBRSV036 EQU   RBRSV028
RBRSV035 EQU   RBRSV028
RBRSV034 EQU   RBRSV028
RBRSV033 EQU   RBRSV028
RBRSV032 EQU   RBRSV028
RBRSV031 EQU   RBRSV028
RBRSV030 EQU   RBRSV028
RBRSV029 EQU   RBRSV028
RBRSV027 EQU   RBRSV019
RBRSV026 EQU   RBRSV019
RBRSV025 EQU   RBRSV019
RBRSV024 EQU   RBRSV019
RBRSV023 EQU   RBRSV019
RBRSV022 EQU   RBRSV019
RBRSV021 EQU   RBRSV019
RBRSV020 EQU   RBRSV019
RBRSV018 EQU   RBPREFIX+13
RBRSV017 EQU   RBPREFIX+12
RBSRV016 EQU   RBPREFIX+11
RBRSV015 EQU   RBPREFIX+10
RBRSV014 EQU   RBPREFIX+8
RBRSV013 EQU   RBPREFIX+4
RBRSV012 EQU   RBPREFIX
RBEXSAVE EQU   XRBESA
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00091 EQU   RBBASIC+24
XRBPSW   EQU   RBOPSW
@NM00090 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00089 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00088 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00087 EQU   XSTAB1
@NM00086 EQU   RBBASIC+8
@NM00085 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00084 EQU   RBPRFX
PVTWSA17 EQU   PVT+1684
PVTREP2  EQU   PVT+1680
PVTRSRB  EQU   PVT+1636
PVTRESV5 EQU   PVT+1633
PVTSRBS  EQU   PVT+1632
PVTWSA16 EQU   PVT+1560
PVTSPARE EQU   PVT+1540
PVTSSRB  EQU   PVT+1536
PVTACA   EQU   PVTWSAX+1176
PVTSAVE  EQU   PVTWSAX+1104
PVTWSA15 EQU   PVTWSAX+1032
PVTWSA14 EQU   PVTWSAX+960
PVTWSA13 EQU   PVTWSAX+888
PVTWSA12 EQU   PVTWSAX+816
PVTWSA11 EQU   PVTWSAX+744
PVTWSA10 EQU   PVTWSAX+664
PVTWSA9  EQU   PVTWSAX+584
PVTWSA8  EQU   PVTWSAX+504
PVTWSA7  EQU   PVTWSAX+432
PVTWSA6  EQU   PVTWSAX+360
PVTWSA5  EQU   PVTWSAX+288
PVTWSA4  EQU   PVTWSAX+216
PVTWSA3  EQU   PVTWSAX+144
PVTWSA2  EQU   PVTWSAX+72
PVTWSA1  EQU   PVTWSAX
PVTCIOQL EQU   PVTQS+36
PVTCIOQF EQU   PVTQS+32
PVTGFADL EQU   PVTQS+28
PVTGFADF EQU   PVTQS+24
PVTFPCBL EQU   PVTQS+20
PVTFPCBF EQU   PVTQS+16
PVTSQAQL EQU   PVTQS+14
PVTSQAQF EQU   PVTQS+12
PVTCFQL  EQU   PVTQS+10
PVTCFQF  EQU   PVTQS+8
PVTRSRVL EQU   PVTQS+6
PVTRSRVF EQU   PVTQS+4
PVTAFQL  EQU   PVTQS+2
PVTAFQF  EQU   PVTQS
PVTSPFR  EQU   PVT+294
PVTCFMCT EQU   PVT+292
PVTCAVR  EQU   PVT+288
PVTCAVO  EQU   PVT+284
PVTCAVI  EQU   PVT+280
PVTCAREC EQU   PVT+276
PVTCAOUT EQU   PVT+272
PVTCAIN  EQU   PVT+268
PVTNSWPS EQU   PVT+264
PVTNPREC EQU   PVT+260
PVTSPOUT EQU   PVT+256
PVTSPIN  EQU   PVT+252
PVTVAMR  EQU   PVT+248
PVTVAMO  EQU   PVT+244
PVTVAMI  EQU   PVT+240
PVTNPOUT EQU   PVT+236
PVTNPIN  EQU   PVT+232
PVTPOPBR EQU   PVT+228
PVTPRELF EQU   PVT+224
PVTPRELV EQU   PVT+220
PVTPFREE EQU   PVT+216
PVTPRELS EQU   PVT+212
PVTPOUT  EQU   PVT+208
PVTPFXLD EQU   PVT+204
PVTPITAS EQU   PVT+200
PVTPSRBP EQU   PVT+196
PVTPDSEG EQU   PVT+192
PVTPCSGB EQU   PVT+188
PVTPCSEG EQU   PVT+184
PVTPRSET EQU   PVT+180
PVTPINV  EQU   PVT+176
PVTPSOUT EQU   PVT+172
PVTPSWIN EQU   PVT+168
PVTPRCV  EQU   PVT+164
PVTPRCFI EQU   PVT+160
PVTPRCF  EQU   PVT+156
PVTPVRC  EQU   PVT+152
PVTPVRIN EQU   PVT+148
PVTPVRLS EQU   PVT+144
PVTPVEQR EQU   PVT+140
PVTPTERM EQU   PVT+136
PVTPVRPO EQU   PVT+132
PVTPRFR  EQU   PVT+128
PVTPFP2  EQU   PVT+124
PVTPFP   EQU   PVT+120
PVTPFTE  EQU   PVT+116
PVTPCB   EQU   PVT+112
PVTPIOCB EQU   PVT+108
PVTPIOCP EQU   PVT+104
PVTPIOP  EQU   PVT+100
PVTPIOI  EQU   PVT+96
PVTPGFAD EQU   PVT+92
PVTPGFA  EQU   PVT+88
PVTPSQA  EQU   PVT+84
PVTPSINT EQU   PVT+80
PVTPSIB  EQU   PVT+76
PVTSRBID EQU   PVT+72
PVTPCIWA EQU   PVT+68
PVTHQSA  EQU   PVT+66
PVTLQSA  EQU   PVT+64
PVTOROOT EQU   PVT+60
PVTPRCA  EQU   PVT+56
PVTCALGN EQU   PVT+48
PVTRESV4 EQU   PVT+46
PVTRSUS  EQU   PVT+44
PVTVROOT EQU   PVT+40
PVTPCBLO EQU   PVT+38
PVTPCBCT EQU   PVT+36
PVTDFRS  EQU   PVT+34
PVTRSQA  EQU   PVT+32
PVTPTLB  EQU   PVT+31
PVTPCBNO EQU   PVT+30
PVTSRBNO EQU   PVT+29
PVTSQDC  EQU   PVT+28
PVTLPRIV EQU   PVT+24
PVTLVR   EQU   PVT+22
PVTFVR   EQU   PVT+20
PVTLPFN  EQU   PVT+18
PVTFPFN  EQU   PVT+16
PVTSSPIN EQU   PVT+11
PVTPCBS  EQU   PVT+10
PVTPOOL  EQU   PVT+8
PVTAFCOK EQU   PVT+6
PVTAFCLO EQU   PVT+4
PVTAFC   EQU   PVT+2
PVTFLAG2 EQU   PVT+1
PVTDUMP  EQU   PVTFLAG1
PVTSIT   EQU   PVTFLAG1
PVTLSI   EQU   PVTFLAG1
@NM00083 EQU   PVTFLAG1
PVTPCBLT EQU   PVTFLAG1
PVTSRBIU EQU   PVTFLAG1
PVTBGMS  EQU   PVTFLAG1
PVTPMSG  EQU   PVTFLAG1
PQERSVD  EQU   PQESECT+31
@NM00082 EQU   VMMFLGS
PQEHRID  EQU   PQESECT+29
PQERFLGS EQU   PQESECT+28
PQEBPQE  EQU   PQESECT+12
PQEFPQE  EQU   PQESECT+8
PGTPAM   EQU   PGTBITS
@NM00081 EQU   PGTBITS
@NM00080 EQU   PGTBITS
PGTPVM   EQU   PGTBITS
@NM00079 EQU   PGTBITS
@NM00078 EQU   PGTBITS
@NM00077 EQU   PGTBITS
@NM00076 EQU   PGTBITS
PGTREAL  EQU   PGTRSA
PFTUIC   EQU   PFTE+15
@NM00075 EQU   PFTFLAG2
@NM00074 EQU   PFTFLAG2
PFTPREF  EQU   PFTFLAG2
PFTSTEAL EQU   PFTFLAG2
PFTIRRG  EQU   PFTFLAG2
PFTVR    EQU   PFTFLAG2
PFTOFFLN EQU   PFTFLAG2
PFTDFRLS EQU   PFTFLAG2
PFTOFINT EQU   PFTFLAG1
PFTVRALC EQU   PFTFLAG1
PFTBADPG EQU   PFTFLAG1
PFTPCBSI EQU   PFTFLAG1
PFTLNGFX EQU   PFTFLAG1
PFTVRINT EQU   PFTFLAG1
PFTONAVQ EQU   PFTFLAG1
PFTRSV1  EQU   PFTE+10
PFTFXCT  EQU   PFTE+8
NVTRMSG  EQU   NVT+540
NVTRLOCK EQU   NVT+536
NVTRCODE EQU   NVT+532
@NM00073 EQU   NVT+529
@NM00072 EQU   NVTFLPO
NVTFLWS  EQU   NVTFLPO
NVTFLQS  EQU   NVTFLPO
@NM00071 EQU   NVTFLPO
NVTSYSP  EQU   NVTFLPO
NVTFLLST EQU   NVTFLPO
@NM00070 EQU   NVT+512
NVTREALR EQU   NVT+508
NVTFASVT EQU   NVT+504
NVTLPALG EQU   NVT+496
NVTVRLNG EQU   NVT+492
NVTVRREG EQU   NVT+488
NVTLVIRT EQU   NVT+484
NVTDIRA  EQU   NVT+480
NVTLPAND EQU   NVT+476
NVTRMSS  EQU   NVT+472
NVTRPQE  EQU   NVT+468
NVTRLLE  EQU   NVT+464
NVTRJPQ  EQU   NVT+460
NVTVMSS  EQU   NVT+456
NVTVPQE  EQU   NVT+452
NVTVLLE  EQU   NVT+448
NVTVJPQ  EQU   NVT+444
NVTLSEC  EQU   NVTLOCAT+4
NVTLFST  EQU   NVTLOCAT
NVTXSEC  EQU   NVTXCTL+4
NVTXFST  EQU   NVTXCTL
@NM00069 EQU   NVT+425
NVTLPACT EQU   NVT+424
NVTCSLPG EQU   NVT+420
NVTCSIOB EQU   NVT+416
NVTCSLNM EQU   NVT+412
NVTCSLIB EQU   NVT+408
NVTBLDL  EQU   NVT+404
NVTVRBLD EQU   NVT+400
@NM00068 EQU   NVT+392
NVTVRTCB EQU   NVT+388
NVTVVTCB EQU   NVT+384
NVTSPUCB EQU   NVT+382
NVTQSCNT EQU   NVT+380
NVTQSBUF EQU   NVT+376
NVTPTAB  EQU   NVT+372
NVTPAREA EQU   NVT+368
@NM00067 EQU   NVT+363
NVTABWS1 EQU   NVT+362
NVTABCD1 EQU   NVT+360
@NM00066 EQU   NVT+358
NVTCPUAD EQU   NVT+356
NVTTOD   EQU   NVT+352
NVTSPE   EQU   NVT+344
NVTMBEND EQU   NVT+340
NVTMBUF  EQU   NVT+336
NVTDCBOC EQU   NVT+328
NVTDCBIC EQU   NVT+324
@NM00065 EQU   NVT+308
NVTNMBLD EQU   NVT+304
NVTNIPM  EQU   NVT+292
NVTPRMPT EQU   NVT+272
NVTIX    EQU   NVTFLWSC
NVTFLWS1 EQU   NVTWPSW2+2
NVTIDPSW EQU   NVTWPSW2
NVTWPSW1 EQU   NVTWTPSW
NVTMCPSW EQU   NVT+216
@NM00064 EQU   NVT+212
@NM00063 EQU   NVTFLCN
NVTFLRAC EQU   NVTFLCN
NVTFLNCK EQU   NVTFLCN
NVTFLNHC EQU   NVTFLCN
NVTMP    EQU   NVTFLCN
NVTFLIOC EQU   NVTFLCN
NVTFLAC  EQU   NVTFLCN
NVTFLSG  EQU   NVT+210
NVTTRACE EQU   NVT+208
NVTNXPTR EQU   NVT+204
NVTNXSIZ EQU   NVT+202
@NM00062 EQU   NVT+200
NVTSGPSA EQU   NVT+196
NVTN0MSG EQU   NVT+192
NVTVVPG1 EQU   NVT+188
NVTNBFND EQU   NVT+184
NVTNUCND EQU   NVT+180
NVTSTMAP EQU   NVT+176
NVTRTMSA EQU   NVT+172
NVTMFASA EQU   NVT+168
NVTLSPQE EQU   NVT+164
NVTALSQA EQU   NVT+160
NVTPQSAV EQU   NVT+156
NVTSVC60 EQU   NVT+148
NVTABSEC EQU   NVTABSAV+4
NVTABFST EQU   NVTABSAV
NVTNVSQA EQU   NVT+138
NVTRSVMN EQU   NVT+136
NVTNBMIN EQU   NVT+134
NVTRGNAV EQU   NVT+132
NVTSQANO EQU   NVT+128
NVTLNGFX EQU   NVT+120
NVTIGXER EQU   NVT+116
@NM00061 EQU   NVT+112
NVTASMAD EQU   NVT+108
NVTMFA   EQU   NVT+100
NVTDSSNG EQU   NVT+96
NVTMSLNK EQU   NVT+92
NVTVVMDI EQU   NVT+88
NVTIGCER EQU   NVT+84
NVTVBLDL EQU   NVT+80
NVTSVCTB EQU   NVT+76
NVTCMTCB EQU   NVT+60
@NM00060 EQU   NVTFLLB
NVTFLSLB EQU   NVTFLLB
@NM00059 EQU   NVTNPATR
NVTNPREU EQU   NVTNPREN
@NM00058 EQU   NVTNPREN
NVTNPSFX EQU   NVT+53
@NM00057 EQU   NVT+50
NVTNPSUF EQU   NVT
LDAEND   EQU   LDA+1496
LDALIMIT EQU   LDA+1484
LDASRPQE EQU   LDA+1476
VVREGSZ  EQU   LDA+1468
CFAPWKAR EQU   LDA+1164
CSAVE    EQU   LDA+1100
OBFRSAVE EQU   LDA+1036
GFRESAVE EQU   LDA+972
GMREPSAV EQU   LDA+908
FBQSAVE  EQU   LDA+844
G4KSAVE  EQU   LDA+780
FSAVE    EQU   LDA+716
BSAVE    EQU   LDA+652
SAVEREG2 EQU   LDA+588
BRANCHSV EQU   LDA+524
GMFMWKAR EQU   LDA+24
LDARES2  EQU   LDA+21
LDACBSP  EQU   LDA+20
LDARQSTA EQU   LDA+16
LDATCB   EQU   LDA+12
@NM00056 EQU   LVSMFLAG+1
LDABRSW  EQU   LVSMFLAG
LDAFLAGS EQU   LVSMFLAG
LDASTART EQU   LDA
GBLCELCT EQU   GDA+60
GLBLCELL EQU   GDA+56
CSASPQEP EQU   GDA+52
PFSTCPAB EQU   GDA+48
VRWLEL   EQU   VRWAITQ+4
VRWFEL   EQU   VRWAITQ
VRPLEL   EQU   VRPOSTQ+4
VRPFEL   EQU   VRPOSTQ
SQASPLFT EQU   GDA+28
SQASPQEP EQU   GDA+24
VRPQEP   EQU   GDA+12
CSAPQEP  EQU   GDA+8
VRDREG   EQU   GDA+4
RESV     EQU   GVSMFLAG+1
@NM00055 EQU   GDAFLAGS
WAITQUE  EQU   GDAFLAGS
SQATHRS2 EQU   GDAFLAGS
SQATHRS1 EQU   GDAFLAGS
GDAFLAG2 EQU   GDAFLAGS
NIPFOURK EQU   GDAFLAGS
GDAFLAG1 EQU   GDAFLAGS
FQEPTRA  EQU   FQEPTR+1
FQECPB   EQU   FQTYPE
FQERGNFL EQU   FQTYPE
DQEHRID  EQU   DQEBLKAD
DQEPTR   EQU   DQESECT+4
ASXBEND  EQU   ASXB+232
ASXBRV25 EQU   ASXB+228
ASXBRV24 EQU   ASXB+224
ASXBRV23 EQU   ASXB+220
ASXBRV22 EQU   ASXB+216
ASXBRV21 EQU   ASXB+212
ASXBRV20 EQU   ASXB+208
ASXBRV19 EQU   ASXB+204
ASXBRV18 EQU   ASXB+200
ASXBRV17 EQU   ASXB+196
ASXBRV16 EQU   ASXB+192
ASXBLSRB EQU   ASXBAEQ+20
ASXBFSRB EQU   ASXBAEQ+16
ASXBLRQE EQU   ASXBAEQ+12
ASXBFRQE EQU   ASXBAEQ+8
ASXBLIQE EQU   ASXBAEQ+4
ASXBFIQE EQU   ASXBAEQ
ASXBETSK EQU   ASXB+164
ASXBSIRB EQU   ASXB+160
ASXBPSWD EQU   ASXB+152
ASXBPRG  EQU   ASXB+136
ASXBRV26 EQU   ASXB+132
ASXBOUSB EQU   ASXB+128
ASXBDDR  EQU   ASXB+124
ASXBRCTD EQU   ASXB+120
ASXBRSMD EQU   ASXB+116
ASXBFRWA EQU   ASXB+108
ASXBFLSA EQU   ASXB+36
ASXBIHSA EQU   ASXB+32
ASXBRV15 EQU   ASXB+28
ASXBRV14 EQU   ASXB+24
ASXBLWA  EQU   ASXB+20
ASXBMPST EQU   ASXB+16
ASXBRS00 EQU   ASXB+14
ASXBTCBS EQU   ASXB+12
ASXBLTCB EQU   ASXB+8
ASXBASXB EQU   ASXB
ASXBEGIN EQU   ASXB
ASVTEND  EQU   ASVT+528
ASVTAVAL EQU   ASVTENTY
ASVTAVAI EQU   ASVTFRST
ASVTRS00 EQU   ASVT+520
ASVTMAXU EQU   ASVT+516
ASVTASVT EQU   ASVT+512
ASVTBEGN EQU   ASVT+512
@NM00054 EQU   ASVT
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBLGCB EQU   ASCB+180
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBCMSB EQU   ASCB+132
ASCBCMSF EQU   ASCB+128
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBLSLQ EQU   ASCB+24
ASCBFSLQ EQU   ASCB+20
ASCBIOSP EQU   ASCB+16
ASCBLOCK EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
@NM00029 EQU   SCVTSECT+180
@NM00028 EQU   SCVTSECT+176
SCVTPIQE EQU   SCVTSECT+172
@NM00027 EQU   SCVTSECT+168
SCVTPTRM EQU   SCVTSECT+164
@NM00026 EQU   SCVTSECT+160
@NM00025 EQU   SCVTSECT+156
SCVTQCBR EQU   SCVTSECT+152
SCVTSTAT EQU   SCVTSECT+148
@NM00024 EQU   SCVTSECT+144
SCVTTQE  EQU   SCVTSECT+140
@NM00023 EQU   SCVTSECT+136
SCVTSVCT EQU   SCVTSECT+132
@NM00022 EQU   SCVTSECT+128
@NM00021 EQU   SCVTSECT+124
SCVTRXLQ EQU   SCVTSECT+120
@NM00020 EQU   SCVTSECT+116
SCVTCTCB EQU   SCVTSECT+112
@NM00019 EQU   SCVTSECT+108
@NM00018 EQU   SCVTSECT+104
@NM00017 EQU   SCVTSECT+100
@NM00016 EQU   SCVTSECT+96
SCVTCOMM EQU   SCVTSECT+92
@NM00015 EQU   SCVTSECT+88
@NM00014 EQU   SCVTSECT+84
@NM00013 EQU   SCVTSECT+80
@NM00012 EQU   SCVTSECT+76
@NM00011 EQU   SCVTSECT+72
SCVTGMBR EQU   SCVTSECT+68
SCVTRPTR EQU   SCVTSECT+64
SCVTHSKP EQU   SCVTSECT+60
@NM00010 EQU   SCVTSECT+56
@NM00009 EQU   SCVTSECT+52
SCVTLFRM EQU   SCVTSECT+48
SCVTCDCL EQU   SCVTSECT+44
@NM00008 EQU   SCVTSECT+40
SCVTRACE EQU   SCVTSECT+36
@NM00007 EQU   SCVTSECT+32
@NM00006 EQU   SCVTSECT+24
@NM00005 EQU   SCVTSECT+20
@NM00004 EQU   SCVTSECT+16
@NM00003 EQU   SCVTSECT+14
SCVTBR14 EQU   SCVTSECT+12
SCVTSPET EQU   SCVTSECT+8
SCVTPGWR EQU   SCVTSECT+4
SCVTPGTM EQU   SCVTSECT
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRSV37 EQU   CVTDMSR
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00053 EQU   PSA+3412
PSASTAK  EQU   PSA+3072
@NM00052 EQU   PSA+1040
PSAUSEND EQU   PSA+1040
PSARV062 EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00051 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00050 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSARV010 EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSAIPCRP EQU   PSASUP1
PSAIPCDR EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00049 EQU   FLCFSA
@NM00048 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00047 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00046 EQU   FLCIOA
@NM00045 EQU   FLCMCLA+15
@NM00044 EQU   FLCMCLA+14
@NM00043 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00042 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00041 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00040 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00039 EQU   FLCPER
@NM00038 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00037 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00036 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00035 EQU   FLCPIILC
@NM00034 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00033 EQU   FLCSVILC
@NM00032 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00031 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00030 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00562 EQU   NSPAL01
@ENDDATA EQU   *
         END   IEAVNP14,(C'PLS0038',0603,74347)
