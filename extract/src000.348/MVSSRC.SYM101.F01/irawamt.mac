*%;  /*
         MACRO
         IRAWAMT   &DSECT=YES
         AGO   .WAMTAL0                                              */
*@       LIST  PUSH;                /* SAVE LISTING STATUS FOR WAMT  */
*        %IF WAMTSFX = ''           /* IS NAMING CHARACTER OMITTED   */
*            %THEN %WAMTSFX = ' ';  /* YES, INSERT PLACEHOLDER BLANK */
*        %IF WAMTSFX ^= ' '         /* IS THIS THE DUPLICATE INCLUDE */
*            %THEN %WAMTDUM = '@       LIST  OFF '; /* BYP INTRO CMT */
*        %ELSE     %WAMTDUM = '@       LIST  PUSH'; /* DMY CNTRL CMT */
*WAMTDUM;
*        %IF WAMTSFX = ' '          /* IS THIS  THE FIRST INCLUDE    */
*            %THEN %WAMTDUM = '@       LIST  POP '; /* PRT INTRO CMT */
*WAMTDUM;
*%;  /*
.WAMTAL0 ANOP                                                        */
* /* MACCOMP Z-4 SC1CX/PKD16                                         */
* /* MACSTAT Z-4 75007/Z40BPSS                                       */
* /* *************************************************************** */
* /*                                                                 */
* /*   MACRO NAME - IRAWAMT                                          */
* /*                                                                 */
* /*   DESCRIPTIVE NAME - WORKLOAD ACTIVITY MEASUREMENTS TABLE       */
* /*                                                                 */
* /*   COPYRIGHT - NONE                                              */
* /*                                                                 */
* /*   STATUS - OS/VS2 RELEASE 4, 09/23/75, LEVEL=1                  */
* /*                                                                 */
* /*   FUNCTION - THE WAMT PROVIDES THE STORAGE AREA IN WHICH        */
* /*         INFORMATION IS COLLECTED BY THE SYSTEM RESOURCES        */
* /*         MANAGER FOR USE BY THE SYSTEM ACTIVITY MEASUREMENT      */
* /*         FACILITY.  THE WAMT, AND THE MODULE WHICH UPDATES       */
* /*         IT, ARE SUPPLIED BY THE SYSTEM ACTIVITY MEASURMENT      */
* /*         FACILITY FOR THE DURATION OF THE WORKLOAD ACTIVITY      */
* /*         DATA GATHERING OPERATION.                               */
* /*                                                                 */
* /*   METHOD OF ACCESS - THE ADDRESS OF THE WAMT IS CONTAINED IN    */
* /*         THE -RMCTWAMT- FIELD OF THE SYSTEM RESOURCES MANAGER    */
* /*         CONTROL TABLE.  THE OFFSET OF THE FIRST WAMPPGP FOR     */
* /*         A PERFORMANCE GROUP IS CONTAINED IN THE WAMTNDX ENTRY   */
* /*         CORRESPONDING TO THE PERFORMANCE GROUP NUMBER.          */
* /*                                                                 */
* /* *************************************************************** */
*%;  /*
         AGO   .WAMTAL1                                              */
*@       LIST  OFF;                 /* BYPASS EXPLANATORY COMMENTS   */
* /* *************************************************************** */
* /*                                                                 */
* /*   CONSTRUCTION METHOD - THE WAMPPGP'S ARE ASSIGNED CONTIGUOUS   */
* /*         STORAGE, WITH THE WAMPPGP FOR THE 2ND PERIOD IN A       */
* /*         PERFORMANCE GROUP FOLLOWING THE WAMPPGP FOR THE 1ST     */
* /*         PERIOD, ETC., AND WITH THE 1ST WAMPPGP OF THE NEXT      */
* /*         PERFORMANCE GROUP FOLLOWING THE LAST WAMPPGP OF THE     */
* /*         PREVIOUS PERFORMANCE GROUP.  THE NUMBER OF ENTRIES      */
* /*         IN THE WAMTNDX ARRAY IS 2 MORE THAN THE HIGHEST PER-    */
* /*         FORMANCE GROUP NUMBER.  WAMTNX0 HOLDS THE OFFSET OF     */
* /*         A WAMPPGP RESERVED FOR PERFORMANCE GROUP ZERO.  THE     */
* /*         FIRST POSITION IN THE WAMTNDX ARRAY IS DECLARED AS      */
* /*         COINCIDING WITH THE WAMTNX1 FIELD.  THEREAFTER, EACH    */
* /*         SUCCESSIVE WAMTNDX ARRAY ENTRY CONTAINS THE OFFSET      */
* /*         OF THE POSITION FOLLOWING THE LAST WAMPPGP ASSIGNED     */
* /*         TO LOWER-NUMBERED PERFORMANCE GROUPS.                   */
* /*                                                                 */
* /*         THE NUMBER OF PERIODS IN A PERFORMANCE GROUP CAN BE     */
* /*         OBTAINED BY SUBTRACTING ITS WAMTNDX FIELD FROM THE      */
* /*         NEXT ADJACENT WAMTNDX FIELD, AND DIVIDING BY THE        */
* /*         WAMPPGP SIZE.                                           */
* /*                                                                 */
* /*   INVOCATION PARAMETERS AND/OR KEYWORDS =                       */
* /*                                                                 */
* /*     BAL - DSECT=NO IF DSECT IS NOT TO BE PRODUCED.              */
* /*                                                                 */
* /*         USING ON WAMT GIVES ADDRESSABILITY TO WAMT SYMBOLS.     */
* /*         USING ON WAMP GIVES ADDRESSABILITY TO WAMP SYMBOLS.     */
* /*                                                                 */
* /*     PLS - %WAMTSFX='USERCHAR' IF THE INDICATED CHARACTER IS     */
* /*           TO BE APPENDED TO ALL NAMES IN THE MAPPING, THEREBY   */
* /*           CREATING DUPLICATE DEFINITIONS BASED ON DIFFERENT     */
* /*           POINTERS.                                             */
* /*         - %WAMT9999=',' IF THE STRUCTURE SHOULD NOT BE CLOSED.  */
* /*                                                                 */
* /*           NOTE - DUE TO THE FACILITY WHICH PERMITS MULTIPLE     */
* /*           INCLUDES OF THE IRAWAMT MAPPING MACRO, IT IS NOT      */
* /*           POSSIBLE TO CONCATENATE THE IRAWAMT DECLARATION       */
* /*           WITH ANOTHER DECLARATION IN SUCH A FASHION THAT       */
* /*           BOTH DECLARATIONS ARE BASED ON THE SAME POINTER.      */
* /*                                                                 */
* /*         TO ACCESS AS A STANDALONE STRUCTURE DCL WAMTPTR PTR.    */
* /*                                             DCL WAMPPTR PTR.    */
* /*                                                                 */
* /*   CHANGE ACTIVITY =                                             */
* /*                                                                 */
* /*   A000000-999999                                          Y02133*/
* /*                                                                 */
* /* *************************************************************** */
*%;  /*
.WAMTAL1 ANOP
         SPACE 1
         AIF   ('&DSECT' EQ 'NO').WAMTAL2
WAMT     DSECT
         AGO   .WAMTAL3
.WAMTAL2 ANOP
         DS    0D
WAMT     EQU *
.WAMTAL3 ANOP
         SPACE 1
WAMTWAR  DS    A -                 ADDRESS OF LOADED IRARMWAR MODULE
WAMTSIZ  DS    F -                 TOTAL WAMT LNG (INCLUDING WAMP'S)
WAMTTMA  DS    D -                 MEASR ACTVT TIME - 64BIT BINARY NMB
WAMTTOC  DS    D -                 LAST UPDATE TIME - 64BIT BINARY NMB
WAMTASD  DS    CL4 -               MEASUREMENT FACILITY ADDR SPACE ID
WAMTTCB  DS    A -                 MEASUREMENT FACILITY TASK ADDRESS
WAMTIPS  DS    CL2 -               PERFORMANCE SPECIFICATION IDENT
WAMTCPD  DS    H -                 TOTAL COUNT OF PGP'S WITHIN WAMT
WAMTSPD  DS    H -                 LENGTH OF DATA WITHIN ONE WAMPPGP
WAMTHPG  DS    H -                 HIGHEST PERFORMANCE GROUP NUMBER
WAMTIPC  DS    CL4 -               CPU SERVICE COEFICIENT      @Z40BPCH
WAMTIPI  DS    CL4 -               I/O SERVICE COEFFICIENT     @Z40BPCH
WAMTIPM  DS    CL4 -               MSO SERVICE COEFFICIENT     @Z40BPCH
WAMTNX0  DS    A -                 OFFST OF 1ST WAMPPGP FOR PG# 0
WAMTNDX  DS    0A -                ARRAY OF OFFST OF 1ST PGP FOR GROUP
WAMTNX1  DS    A -                 OFFST OF 1ST WAMPPGP FOR PG# 1
WAMTR90  DS    F -                 RESERVED                    @Z40BPCH
WAMTEND  DS    0D -                END OF WAMT
WAMTLEN  EQU   WAMTEND-WAMT -      LENGTH OF WAMT
         SPACE 1
         AIF   ('&DSECT' EQ 'NO').WAMTAL4
WAMP     DSECT
         AGO   .WAMTAL5
.WAMTAL4 ANOP
         DS    0F
WAMP     EQU   *
.WAMTAL5 ANOP
         SPACE 1
WAMPPGP  DS    0CL38 -             PERFORMANCE GROUP PERIOD DATA
*                                                              @Z40BPCH
WAMPTRN  DS    F -                 COUNT OF TRANSACTIONS ENDED
WAMPTAT  DS    F -                 TOTAL ACTIVE TIME FOR PERIOD
WAMPSRV  DS    F -                 TOTAL SERVICE UNITS FOR PERIOD
WAMPTET  DS    F -                 TOT ELAPSED TIME OF XACTNS ENDED
WAMPNWL  DS    F -                 NORMALIZED WORKLOAD LEVEL
WAMPCPU  DS    F -                 TOTAL CPU SERVICE UNITS FOR  PERIOD
*                                                              @Z40BPCH
WAMPIOC  DS    F -                 TOTAL I/O SERVICE UNITS FOR PERIOD
*                                                              @Z40BPCH
WAMPMSO  DS    F -                 TOTAL MSO SERVICE UNITS FOR PERIOD
*                                                              @Z40BPCH
WAMPTRR  DS    F -                 TOTAL RESIDENT TIME FOR PER.@Z40BPCH
WAMPSWC  DS    F -                 TOTAL SWAP COUNT FOR PERIOD @Z40BPCH
WAMPOBJN DS    HL1 -               PERF. OBJ NO. FOR PERIOD    @Z40BPCH
WAMPDMN  DS    HL1 -               DOMAIN NO. FOR PERIOD       @Z40BPCH
WAMPRSV  DS    H   -               RESERVED                    @Z40BPCH
WAMPEND  DS    0F -                END OF WAMP
WAMPLEN  EQU   WAMPEND-WAMP -      LENGTH OF WAMP
         MEND
*                                                                    */
*@       LIST  POP;                 /* RESUME MACRO OUTPUT LISTING   */
*        %IF WAMT9999 ^= ','        /* DOES STRUCTURE CONTINUE       */
*            %THEN %WAMT9999 = ';'; /* NO, END DECLARE STATEMENT     */
*        %WAMTLABL = 'WAMT'  ;      /* INITIALIZE THE LABEL VARIABLE */
*        %IF WAMTSFX ^= ' '         /* IS THIS THE DUPLICATE INCLUDE */
*            %THEN %WAMTLABL = 'WAMT'××WAMTSFX ; /* RENAME STRUCTURE */
*        %WAMTDUM = WAMTLABL××'PTR' ;  /* QUALIFY BASED POINTER NAME */
*   DCL
*     1 WAMTLABL BASED(WAMTDUM) BDY(DWORD),
*            %WAMTLABL = 'WAMTWAR'××WAMTSFX;
*       10 WAMTLABL PTR(31),        /* ADDR OF IRARMWAR MODULE       */
*            %WAMTLABL = 'WAMTSIZ'××WAMTSFX;
*       10 WAMTLABL FIXED,          /* TOTL LNG OF WAMT INCL. WAMP'S */
*            %WAMTLABL = 'WAMTTMA'××WAMTSFX;
*       10 WAMTLABL BIT(64) BDY(DWORD), /* MEASUREMENT ACTIVATE TIME */
*            %WAMTLABL = 'WAMTTOC'××WAMTSFX;
*       10 WAMTLABL BIT(64) BDY(DWORD), /* WAMT UPDT TIME OF CENTURY */
*            %WAMTLABL = 'WAMTASD'××WAMTSFX;
*       10 WAMTLABL BIT(32) BDY(WORD),  /* MEASUREMENT ADDR SPACE ID */
*            %WAMTLABL = 'WAMTTCB'××WAMTSFX;
*       10 WAMTLABL PTR(31),        /* MEASUREMENT TASK ADDRESS      */
*            %WAMTLABL = 'WAMTIPS'××WAMTSFX;
*       10 WAMTLABL CHAR(2) BDY(HWORD), /* PERFORMANC SPECIFICATN ID */
*            %WAMTLABL = 'WAMTCPD'××WAMTSFX;
*       10 WAMTLABL FIXED(15),      /* COUNT OF PGP'S WITHIN WAMT    */
*            %WAMTLABL = 'WAMTSPD'××WAMTSFX;
*       10 WAMTLABL FIXED(15),      /* LENGTH OF DATA FOR ONE PGP    */
*            %WAMTLABL = 'WAMTHPG'××WAMTSFX;
*       10 WAMTLABL FIXED(15),      /* HIGH PERF. GROUP NUMBER       */
*            %WAMTLABL = 'WAMTIPC'××WAMTSFX; /*              @Z40BPCH*/
*       10 WAMTLABL CHAR(4) BDY(WORD), /* CPU SERVICE COEF.  @Z40BPCH*/
*            %WAMTLABL = 'WAMTIPI'××WAMTSFX; /*              @Z40BPCH*/
*       10 WAMTLABL CHAR(4) BDY(WORD), /* I/O SERVICE COEF.  @Z40BPCH*/
*            %WAMTLABL = 'WAMTIPM'××WAMTSFX; /*              @Z40BPCH*/
*       10 WAMTLABL CHAR(4) BDY(WORD), /* MSO SERVICE COEF.  @Z40BPCH*/
*            %WAMTLABL = 'WAMTNX0'××WAMTSFX;
*       10 WAMTLABL PTR(31),        /* OFFST TO WAMPPGP OF PRF GRP 0 */
*            %WAMTLABL = 'WAMTNX1'××WAMTSFX;
*       10 WAMTLABL PTR(31),        /* OFFST TO WAMPPGP OF PRF GRP 1 */
*            %WAMTLABL = 'WAMTR90'××WAMTSFX; /*              @Z40BPCH*/
*       10 WAMTLABL FIXED,          /* RESERVED              @Z40BPCH*/
*            %WAMTLABL = 'WAMTEND'××WAMTSFX;
*       10 WAMTLABL CHAR(0) BDY(DWORD),  /* END OF WAMT              */
* /*  THE I'TH POSITION OF THE FOLLOWING ARRAY CONTAINS THE OFFSET   */
* /*  FROM THE BEGINNING OF THE WAMT TO THE STARTING POSITION OF     */
* /*  THE WAMPPGP'S FOR THE I'TH PERFORMANCE GROUP.                  */
*            %WAMTDUM  = 'WAMTNX1'××WAMTSFX;
*            %WAMTLABL = 'WAMTNDX'××WAMTSFX;
*     WAMTLABL (*) DEFINED(WAMTDUM) PTR(31),
* /*  THE WAMP ACCUMULATES WORKLOAD INFORMATION FOR ONE PERFORMANCE  */
* /*  GROUP PERIOD.  THERE MAY BE 1 TO 8 PERIODS FOR ONE GROUP.      */
*        %WAMTLABL = 'WAMP'  ;      /* INITIALIZE THE LABEL VARIABLE */
*        %IF WAMTSFX ^= ' '         /* IS THIS THE DUPLICATE INCLUDE */
*            %THEN %WAMTLABL = 'WAMP'××WAMTSFX ; /* RENAME STRUCTURE */
*        %WAMTDUM = WAMTLABL××'PTR' ;  /* QUALIFY BASED POINTER NAME */
*     1 WAMTLABL BASED(WAMTDUM) BDY(WORD),
*            %WAMTLABL = 'WAMPPGP'××WAMTSFX;
*       10 WAMTLABL,                /* PERFORMANCE GROUP PERIOD DATA */
*            %WAMTLABL = 'WAMPTRN'××WAMTSFX;
*         12 WAMTLABL FIXED(32),    /* COUNT OF TRANSACTIONS ENDED   */
*            %WAMTLABL = 'WAMPTAT'××WAMTSFX;
*         12 WAMTLABL FIXED(32),    /* TOTAL ACTIVE TIME FOR PERIOD
*                                      1024 MICROSEC = LOW BIT       */
*            %WAMTLABL = 'WAMPSRV'××WAMTSFX;
*         12 WAMTLABL FIXED(32),    /* TOT SERVICE UNITS FOR PERIOD  */
*            %WAMTLABL = 'WAMPTET'××WAMTSFX;
*         12 WAMTLABL FIXED(32),    /* TOT ELAPS TIM OF XACTNS ENDED
*                                      1024 MICROSEC = LOW BIT       */
*            %WAMTLABL = 'WAMPNWL'××WAMTSFX;
*         12 WAMTLABL FIXED(31),    /* NORMALIZED WORKLOAD LEVEL
*                                      1/256TH OF A LEVEL = LOW BIT  */
*            %WAMTLABL = 'WAMPCPU'××WAMTSFX; /*              @Z40BPCH*/
*         12 WAMTLABL FIXED(32),    /* TOTAL CPU SERVICE UNITS FOR
*                                      PERIOD                @Z40BPCH*/
*            %WAMTLABL = 'WAMPIOC'××WAMTSFX; /*              @Z40BPCH*/
*         12 WAMTLABL FIXED(32),    /* TOTAL I/O SERVICE UNITS FOR
*                                      PERIOD                @Z40BPCH*/
*            %WAMTLABL = 'WAMPMSO'××WAMTSFX; /*              @Z40BPCH*/
*         12 WAMTLABL FIXED(32),    /* TOTAL MSO SERVICE UNITS FOR
*                                      PERIOD                @Z40BPCH*/
*            %WAMTLABL = 'WAMPTRR'××WAMTSFX; /*              @Z40BPCH*/
*         12 WAMTLABL FIXED(32),    /* TOTAL RESIDENT TIME FOR
*                                      PERIOD                @Z40BPCH*/
*            %WAMTLABL = 'WAMPSWC'××WAMTSFX; /*              @Z40BPCH*/
*         12 WAMTLABL FIXED,        /* TOTAL SWAP COUNT FOR PERIOD
*                                                            @Z40BPCH*/
*            %WAMTLABL = 'WAMPOBJN'××WAMTSFX; /*             @Z40BPCH*/
*         12 WAMTLABL FIXED(8),     /* PERF. OBJ. NO FOR PER @Z40BPCH*/
*            %WAMTLABL = 'WAMPDMN'××WAMTSFX; /*              @Z40BPCH*/
*         12 WAMTLABL FIXED(8),     /* DOMAIN NO. FOR PERIOD @Z40BPCH*/
*            %WAMTLABL = 'WAMPRSV'××WAMTSFX ;    /*          @Z40BPCH*/
*         12 WAMTLABL CHAR(2) BDY(HWORD), /* RESERVED        @Z40BPCH*/
*            %WAMTLABL = 'WAMPEND'××WAMTSFX;
*       10 WAMTLABL CHAR(0) BDY(WORD)  /* END OF WAMP                */
*   WAMT9999
*   %WAMTLEN = 'LENGTH(WAMT)';      /* SYMBOLIC FOR LENGTH OF WAMT   */
