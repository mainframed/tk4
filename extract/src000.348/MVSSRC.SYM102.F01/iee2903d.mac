         TITLE 'IEE2903D - DISPLAY REQUESTS ROUTINE'
IEE2903D CSECT
* C142000,C256000,C662500                                        A45338
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEE2903D
*
*02*     CSECT-NAME = IEE2903D
*
*01*  DESCRIPTIVE-NAME = DISPLAY REQUESTS ROUTINE
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = OS/VS2 REL 4                                    @ZD04020
*
*01*  FUNCTION = TO DISPLAY ON THE ISSUER'S CONSOLE THE ID OF EACH WTOR
*     TYPE MESSAGE THAT HAS NOT BEEN REPLIED TO, THE UNIT NUMBER OF
*     EACH DEVICE FOR WHICH A MOUNT INSTRUCTION HAS BEEN ISSUED BUT NOT
*     COMPLIED WITH AND THE UNIT NUMBER OF EACH DEVICE ON WHICH
*     OPERATOR INTERVENTION IS REQUIRED.
*
*02*     OPERATION = A TEST IS MADE TO DETERMINE IF THERE ARE ANY
*        OPERATOR REPLY ELEMENTS (ORE) ON THE CHAIN. IF THERE ARE, EACH
*        ORE IS TESTED FURTHER TO DETERMINE IF IT IS OUTSTANDING. IF
*        THE ORE HAS BEEN MARKED DELETED (DOM ISSUED), OR IF IT HAS
*        BEEN MARKED PARTIALLY PROCESSED (TEMPORARY BUFFER EXIST), OR
*        IF IT HAS BEEN MARKED SUSPENDED (HASP SUSPEND) ,OR IF THERE IS
*        NO WQE ASSOCIATED WITH THIS ORE, THE ORE IS CONSIDERED TO BE
*        NOT OUTSTANDING AND THE NEXT ORE ON THE CHAIN IS TESTED. FOR
*        EACH OUTSTANDING ORE FOUND ON THE CHAIN, THE ASSOCIATED
*        ID IS MOVED TO A MESSAGE AREA. IF 'LIST' WAS SPECIFIED AS AN
*        OPERAND ON THE DISPLAY COMMAND, THE FIRST 64 CHARACTERS OF THE
*        WTOR MESSAGE WILL ALSO BE MOVED TO THE MESSAGE AREA.
*
*        AFTER ALL OF THE ORES HAVE BEEN PROCESSED, THE UCBS IN THE
*        SYSTEM ARE EXEMINED. EVERY TAPE OR DIRECT ACCESS UCB THAT HAS
*        A MOUNT MESSAGE PENDING AND IS CURRENTLY ALLOCATED AND (FOR
*        TAPE DEVICES ONLY) IS MARKED NOT READY IS CONSIDERED TO BE IN
*        A NOT READY STATE. ALL DIRECT ACCESS UCBS WITH NO MOUNT
*        MESSAGES PENDING ARE TESTED TO DETERMINE IF DAVV IS WAITING TO
*        VERIFY A MOUNT CONDITION. THE UNIT NUMBER OF EACH UCB THAT IS
*        CONSIDERED NOT READY IS MOVED TO THE MESSAGE AREA.
*
*        AFTER PROCESSING THE 'READY UNITS' PORTION OF THE MESSAGE, ALL
*        THE UCBS ARE RE-EXAMINED. THE UNIT NUMBER FOR ALL UCBS THAT
*        INDICATE THAT IOS HAS ISSUED AN INTERVENTION REQUIRED MESSAGE
*        WILL BE MOVED TO THE MESSAGE AREA.
*
*        AT THE END OF EACH OF THE ABOVE THREE FUNCTIONAL      @ZD04020
*        AREAS, A SUBROUTINE IS CALLED FOR THE PURPOSE OF      @ZD04020
*        PUTTING THE COUNT OF EACH AREA'S OUTPUT INTO THE      @ZD04020
*        LABEL LINE ALONG WITH ITS ASSOCIATED LABEL.           @ZD04020
*
*        THE ISSUER OF THE DISPLAY REQUEST COMMAND WILL BE NOTIFIED OF
*        ALL OUTSTANDING REQUEST CONDITIONS VIA A MULTI-LINE WTO. IF
*        THE ISSUER IS A TSO USER, TPUTS WILL BE ISSUED.
*
*01*   NOTES = THIS MODULE WAS RE-STRUCTURED INTO FOUR MAJOR LOGICAL
*      FUNCTIONS CONSISTING OF (1) ORE PROCESSING (2) READY UNITS
*      PROCESSING (3) INTERVENTION REQUIRED PROCESSING AND (4)
*      MULTI-LINE WTO PROCESSING.
*
*02*     DEPENDENCIES = NO LOCKS OR ENQ RESOURCES ARE REQUIRED UPON
*        ENTRY TO THIS MODULE.
*
*03*        CHARACTER-CODE-DEPENDENCIES = THIS MODULE IS DEPENDENT ON
*           THE FOLLOWING EBCIDIC CHARACTERS: BLANK, COMMA
*
*02*     RESTRICTIONS = NONE
*
*02*     REGISTER-CONVENTIONS = REFER TO REGISTER DECLARATIONS.
*
*02*     PATCH-LABEL = PATCHAR (RESERVED FOR FUTURE USE).
*
*01*  MODULE-TYPE = PROCEDURE
*
*02*     PROCESSOR = ASSEMBLER
*
*02*     MODULE-SIZE = X'A6E'                                  @ZD04020
*
*02*     ATTRIBUTES = PAGED-LPA ,ZERO PROTECT KEY ,REENTERABLE ,
*        SUPERVISOR MODE
*
*01*  ENTRY-POINT = IEE2903D
*
*02*     PURPOSE = BRANCHED TO BY SVC 34 PROCESSOR (IEE3503D) TO
*        PROCESS DISPLAY REQUEST COMMANDS.
*
*02*     LINKAGE = UPON ENTRY REGISTER 2 CONTAINS THE ADDRESS OF AN XSA
*        CREATED FOR SVC 34 PROCESSORS. REGISTER 14 CONTAINS THE RETURN
*        ADDRESS.
*
*02*     INPUT = THE FOLLOWING FIELDS IN THE XSA ARE REQUIRED UPON
*        ENTRY:
*          XAR      INPUT BUFFER POINTER
*          XAL      POINTER TO OPERAND FIELD
*          XAA      ASID ENTRY INDICATOR
*          XASCID   CONSOLE ID
*          XASDID   DISPLAY AREA ID
*
*02*     OUTPUT = NONE
*
*02*     REGISTERS-SAVED = REGISTER 14 IS SAVED UPON ENTRY TO THIS
*        MODULE.
*
*02*     REGISTER-USAGE = REFER TO REGISTER DECLARATIONS.
*
*02*     REGISTERS-RESTORED = REGISTER 14 IS RESTORED BEFORE EXIT FROM
*        THIS MODULE.
*
*01*  EXIT-NORMAL = (MLWTOEND) -RETURN TO CALLER AFTER MULTI-LINE WTO
*     OUTPUT. (WTONEXIT) -RETURN TO CALLER AFTER NORMAL WTO OUTPUT.
*
*02*     CONDITIONS = (MLWTOEND) -THIS EXIT IS TAKEN AFTER PROCESSING
*        ALL OUTSTANDING REQUEST. (WTONEXIT) -THIS EXIT IS TAKEN IF
*        THERE ARE NO OUTSTANDING REQUEST.
*
*02*     OUTPUT = THE FOLLOWING MLWTO MESSAGE IS ISSUED IF THERE ARE
*                 OUTSTANDING REQUEST (MLWTOEND):              @YM7246P
*       IEE110I HH.MM.SS PENDING REQUEST                       @ZD04020
*           -- OR --                                           @ZD04020
*       IEE110I HH.MM.SS PENDING REQUESTS                      @YM7246P
*       SUMMARY:  N REPLY IDS  N READY UNITS  N INTERVENTIONS REQUIRED
*             WHERE 'N' IS A ONE TO FOUR DIGIT DECIMAL NUMBER  @ZD04020
*              GREATER THAN ZERO.  IF THERE IS A COUNT OF ONE  @ZD04020
*              ON ANY OF THE ABOVE LABELS, THE LABEL WILL BE   @ZD04020
*              CORRECTED TO THE SINGULAR FORM AS THE CASE MAY  @ZD04020
*              BE.  'N' IN REPLY IDS IS A MAXIMUM OF 2 DIGITS. @ZD04020
*          ID  ID  ID  .. (IF D R SPECIFIED)                   @ZD04020
*          ID,TEXT        (IF D R,LIST OR D R,L SPECIFIED)     @ZD04020
*          ID,TEXT                                             @ZD04020
*          ID,TEXT                                             @ZD04020
*          .......                                             @ZD04020
*        READY UNITS:  UUU  UUU  UUU  ...                      @ZD04020
*                 -- OR --                                     @ZD04020
*        READY UNIT:  UUU                                      @ZD04020
*        INTERVENTIONS REQUIRED:  UUU  UUU  UUU  ...           @ZD04020
*                 -- OR --                                     @ZD04020
*        INTERVENTION REQUIRED:  UUU                           @ZD04020
*
*        THE FOLLOWING MESSAGE IS ISSUED IF THERE ARE NO OUTSTANDING
*        REQUESTS (WTONEXIT):
*          IEE111I NO OUTSTANDING REQUESTS
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-ERROR = OPERR -BRANCH TO MESSAGE MODULE (IEE0503D) TO ISSUE
*     OPERAND ERROR MESSAGE.
*
*02*     CONDITIONS = THIS EXIT IS TAKEN IF AN ERROR IS DETECTED IN THE
*        OPERAND FIELD OF THE DISPLAY COMMAND.
*
*02*     OUTPUT = AN ERROR CODE INDICATOR IS PASSED TO THE MESSAGE
*        MODULE (IEE0503D) INDICATING THE MESSAGE TO BE ISSUED.
*
*02*     RETURN-CODES = NONE
*
*01*  EXTERNAL-REFERENCES = THE FOLLOWING REFERENCES ARE MADE WITHIN
*     THIS MODULE:
*
*02*     ROUTINES = BRANCH TO SVC 34 MESSAGE MODULE (IEE0503D) TO ISSUE
*        OPERAND ERROR MESSAGE.
*
*02*     DATA-AREAS = THE FOLLOWING DATA AREAS ARE REFERENCED BY THIS
*        MODULE:
*          USER PARM LIST     POINTED TO OUT OF THE XSA (XAR FIELD)
*                             XAR POINTS TO THE USER SUPPLIED PARAMETER
*                             LIST PASSED TO SVC 34.
*
*02*     CONTROL-BLOCKS = THIS MODULE REFERS TO THE FOLLOWING CONTROL
*        BLOCKS:
*          CVT    (R)
*          ORE    (R)
*          PSA    (R)
*          WQE    (R)
*          UCB    (R)
*          XSA    (R,W)
*
*01*  TABLES = THE FOLLOWING TABLES AND WORKAREAS ARE DEFINED WITHIN
*     THIS MODULE:
*          WPL       WTO PARM LIST FOR MLWTO MESSAGES
*          NOREQMSG  WTO PARM LIST FOR NORMAL WTO MESSAGES
*          XASAVLOC  RETURN REGISTER SAVE AREA
*          XASAVSTD  72 BYTE SAVE AREA WHERE:
*              +0 = ADDR OF FIRST MLWTO MESSAGE GROUP
*                   (MAX OF 10 LINES PER GROUP)
*              +4 = ADDR OF LAST MLWTO MESSAGE GROUP
*              +8 = TIME OF DAY FROM TIME SVC
*             +12 = ADDR OF NUMBER OF LINES FIELD IN CURRENT MESSAGE
*                   GROUP
*             +16 = GENERAL SAVE AREA
*             +20 = GENERAL SAVE AREA
*             +24 = GENERAL SAVE AREA                          @YM3468P
*             +28 = GENERAL SAVE AREA                          @YM3468P
*             +32 = RETURN CODE FROM MLWTO                     @YM3468P
*             +36 = AVAILABLE FOR FUTURE USE                   @ZD04020
*             +40 = COUNT CONVERSION WORKAREA (OFFSET40)       @ZD04020
*             +44 = COUNT CONVERSION WORKAREA (OFFSET44)       @ZD04020
*
*01*  MACROS = THIS MODULE USES THE FOLLOWING SYSTEM MACROS:
*     GETMAIN/FREEMAIN (BRANCH ENTRY),SETLOCK,TIME,
*     TPUT,WTO
*
*02*    SERIALIZATION = THE LOCAL AND CMS LOCKS ARE USED BY THIS
*       MODULE.
*
*01*  CHANGE-ACTIVITY = Y02756, Y02893, Y02751, ZD04020        @ZD04020
*
*01*  MESSAGES = REFER TO EXIT-NORMAL AND ERROR.
*
*01*  ABEND-CODES = NONE
**** END OF SPECIFICATIONS ***/
         EJECT
WORK1    EQU   0
WORK2    EQU   1
WQEREG   EQU   1                                                  M2196
XSAREG   EQU   2    REG 2 HAS PTR TO XSA WHEN 2903D GETS CONTROL
UCBLSREG EQU   3
LISTIND  EQU   3                   LIST OPERAND SPECIFIED        Y02756
SW1REG   EQU   4
SW2REG   EQU   5
MSGREG   EQU   6    USED AS PTR TO NEXT AVAILABLE SPACE IN MSG AREA
WORK3    EQU   7
MSGAD1   EQU   7                   PT TO PREVIOUS LINE           Y02756
OREREG   EQU   8    PTR TO OPERATOR REPLY ELEMENT (ORE)          YM2304
UCBREG   EQU   8
BASEREG  EQU   9
MSGAD    EQU   10   HOLDS PTR TO BEGINNING OF MESSAGE AREA
SW3REG   EQU   11
WORK4    EQU   12
WORK5    EQU   13
EXITREG  EQU   14
EREXITRG EQU   15                  ERROR EXIT REGISTER           Y02756
DATALIND EQU   15                  DATA LINE INDICATOR           Y02756
RCODEREG EQU   15                  RETURN CODE FROM MLWTO      @YM3468P
         SPACE
D0       EQU   0                        USED FOR OFFSETS,LENGTHS,ETC.
D1       EQU   1                   OFFSET VALUE                  Y02756
D22      EQU   22                  OFFSET VALUE                  Y02756
D3       EQU   3                        *                        Y02893
D4       EQU   4                        *
D9       EQU   9                        *                        Y02893
D24      EQU   24                       *                        Y02893
D16      EQU   16                  OFFSET VALUE                  Y2756
D20      EQU   20                  OFFSET VALUE                  Y2756
L6       EQU   6                   LENGTH OF MOVE                Y02756
HALFWORD EQU   16                   USED TO SHIFT TJID IN         M2047
DATALLIT EQU   10                  DATA LINE LIMIT               Y02756
L2       EQU   2                   LENGTH OF MOVE                Y02756
L3       EQU   3                   LENGTH OF MOVE                Y02756
L64      EQU   64                  CONSTANT VALUE              @ZD04020
D8       EQU   8                   OFFSET VALUE                  Y02756
D12      EQU   12                  OFFSET VALUE                  Y02756
         SPACE
* THIS ROUTINE USES TWO REGISTERS AS SWITCHES: THE REGISTERS AND THE
* MEANING OF THEIR VALUES ARE AS FOLLOWS:
*
* SW1REG  0 - NO CONTROL LINE CREATED                            Y02893
*         1 - CONTROL LINE CREATED                               Y02893
*
* SW2REG  FREE SPACE POINTER OF LABEL LINE                       Y02893
*
MIDMSG   EQU   1
ERRCDE   EQU   X'05'               ERROR CODE                    Y02756
         EJECT
************************************************************** @ZD04020
*                                                            * @ZD04020
* THE FOLLOWING EQUATES ARE USED IN BUILDING THE LABEL LINE. * @ZD04020
*                                                            * @ZD04020
************************************************************** @ZD04020
         SPACE
D10      EQU   10                  CONSTANT OF 10              @ZD04020
D17      EQU   17                  CONSTANT OF 17              @ZD04020
D23      EQU   23                  CONSTANT OF 23              @ZD04020
D36      EQU   36                  CONSTANT OF 36              @ZD04020
D40      EQU   40                  CONSTANT OF 40              @ZD04020
D41      EQU   41                  CONSTANT OF 41              @ZD04020
D42      EQU   42                  CONSTANT OF 42              @ZD04020
D43      EQU   43                  CONSTANT OF 43              @ZD04020
D44      EQU   44                  CONSTANT OF 44              @ZD04020
D45      EQU   45                  CONSTANT OF 45              @ZD04020
D47      EQU   47                  CONSTANT OF 47              @ZD04020
D99      EQU   99                  CONSTANT OF 99              @ZD04020
D999     EQU   999                 CONSTANT OF 999             @ZD04020
R6       EQU   6                   REGISTER 6                  @ZD04020
R7       EQU   7                   REGISTER 7                  @ZD04020
R8       EQU   8                   REGISTER 8                  @ZD04020
R10      EQU   10                  REGISTER 10                 @ZD04020
MINUSA   EQU   7                   REGISTER 7                  @ZD04020
MINUSB   EQU   8                   REGISTER 8                  @ZD04020
FOX      EQU   X'0F'               USED FOR SIGN BIT ADJUSTING @ZD04020
BITTEST  EQU   X'80'               USED FOR PLURAL INDICATOR   @ZD04020
ESS      EQU   C'S'                'S' CHARACTER               @ZD04020
FOXFOX   EQU   X'FF'               'S' INSERTION INDICATOR     @ZD04020
MGLTH    EQU   748                 LENGTH OF GETMAIN           @ZD04020
LL       EQU   70                  LENGTH OF LABEL TEXT        @ZD04020
LABLEN   EQU   74                  LABEL LINE LENGTH           @ZD04020
L69      EQU   69                  LABEL LINE BLANKING LENGTH  @ZD04020
         EJECT
         BALR  BASEREG,0
         USING *,BASEREG           ESTABLISH ADDRESSABILITY
         MODID BRANCH=YES                                        Y01886
         USING XSA,XSAREG          BASE FOR XSA                    XMCS
         USING PSA,0               BASE FOR PSA                  Y02756
         SPACE
*****************************************************************Y02893
*                  SETLOCK    SEGMENT                            Y02893
*                                                                Y02893
* IN ORDER TO SERIALIZE THE USE OF RESOURCES ACROSS DISPLAY      Y02893
* REQUEST PROCESSING, THE FOLLOWING CODE ISSUES SETLOCKS FOR THE Y02893
* LOCAL AND CMS LOCKS. BEFORE THE LOCKS ARE OBTAINED, THE        Y02893
* OPERAND PORTION OF THE DISPLAY COMMAND IS VALIDITY CHECKED.    Y02893
* IF THE R OPERAND IS NOT FOLLOWED IMMEDIATELY BY A BLANK OR   @ZD04020
* ',LIST ', THE COMMAND IS INVALID AND AN ERROR MESSAGE WILL   @ZD04020
* BE ISSUED.                                                   @ZD04020
*                                                                Y02893
* INPUT:                                                         Y02893
*  XSA,PSA                                                       Y02893
*                                                                Y02893
* OUTPUT:                                                        Y02893
*  NORMAL - LOCAL AND CMS LOCKS OBTAINED                         Y02893
*                                                                Y02893
*  ERROR  - MESSAGE 'IEE305I  COMMAND INVALID' ISSUED BY IEE0503DY02893
*                                                                Y02893
*****************************************************************Y02893
         SR    LISTIND,LISTIND     INDICATE NORMAL REQUEST       Y02756
         L     WORK4,XAL           ADDR OF OPERAND FIELD         Y02756
         CLI   D1(WORK4),BLANK     BLANK AFTER OPERAND ?         Y02756
         BE    NRMRQ               YES, ISSUE SETLOCKS           Y02756
         CLC   D1(L6,WORK4),LISTOP LIST OP SPECIFIED ?           Y02756
         BE    INDLSOP             YES,IND.LIST SPECIFIED        Y02756
         CLC   D1(L3,WORK4),LISTCH LIST OP ABBREV. ?             Y02756
         BNE   OPERR               NO, OPERAND ERROR             Y02756
INDLSOP  LA    LISTIND,MIDMSG      INDICATE LIST OP SPECIFIED    Y02756
         B     NRMRQ               ISSUE SETLOCKS                Y02756
         SPACE
* IF THE OPERAND FIELD IS INVALID, A BRANCH IS MADE TO THE       Y02756
* MESSAGE MODULE 'IEE0503D' WHERE AN ERROR MESSAGE IS ISSUED     Y02756
         SPACE
OPERR    EQU   *                   ERROR PROCESSING              Y02756
         MVI   XAE,ERRCDE          SET ERROR INDICATOR           Y02756
         L     EREXITRG,ERRTN      GET ADDRESS OF ERROR RTN      Y02756
         BR    EREXITRG            BRANCH TO ISSUE MESSAGE       Y02756
*****************************************************************Y02893
* BRANCH TO MESSAGE MODULE TO ISSUE INVALID COMMAND MESSAGE      Y02893
*****************************************************************Y02893
         SPACE
NRMRQ    EQU   *                   SETLOCK CODE                  Y02751
         XC    XASAVSTD(72),XASAVSTD ZERO SAVE AREA              Y02756
         TIME DEC                  ISSUE TIME                    Y02756
         ST    WORK1,XASAVSTD+D8   SAVE TIME                     Y02756
         ST    EXITREG,XASAVLOC    SAVE RETURN ADDRESS           Y02751
SETLOCAL SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        X
               RELATED=(ORE,IEE2903D(FRELOCAL)) GET LOCAL LOCK   Y02751
         SPACE
SETCMS   SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,                          X
               RELATED=(ORE,IEE2903D(FRECMS)) GET CMS LOCK       Y02751
         EJECT
*****************************************************************Y02893
* START  OF ORE SEARCH SEGMENT TO SCAN FOR OUTSTANDING REPLY IDS.Y02893
*****************************************************************Y02893
         SPACE
***********************************************************************
*              REPLY    ID    SEGMENT                            Y02893
*                                                                Y02893
* THE FOLLOEING CODE WILL SCAN THE ORE CHAIN FOR OUTSTANDING     Y02893
* REPLY IDS. IF THE 'LIST' OPERAND IS SPECIFIED, THE OUTSTANDING Y02893
* REPLY IDS AND THE FIRST 64 BYTES OF THE WTO TEXT WILL BE MOVED Y02893
* TO THE MESSAGE AREA. IF THE 'LIST' OPERAND IS NOT SPECIFIED,   Y02893
* ONLY THE REPLY IDS WILL BE MOVED.                              Y02893
*                                                                Y02893
* INPUT:                                                         Y02893
*  ORE,WQE,UCM,XSA,CVT                                           Y02893
*                                                                Y02893
* OUTPUT: - MSGAD- CONTAINS THE ADDRESS OF THE BEGINNING OF THE  Y02893
*                 MESSAGE AREA.                                  Y02893
*                                                                Y02893
*         - MSGAD1- CONTAINS THE ADDRESS OF THE PREVIOUS MESSAGE.Y02893
*                                                                Y02893
*         - MSGREG- CONTAINS THE ADDRESS OF THE NEXT AVAILABLE   Y02893
*                    SPACE IN THE MESSAGE AREA.                  Y02893
*                                                                Y02893
*****************************************************************Y02893
         SPACE 2
         SR    SW1REG,SW1REG       SWITCH ONE IS 0: NO MSG.AT THIS PT.
         SR    DATALIND,DATALIND   NO DATA LINE CREATED          Y02756
         L     WORK4,CVTPTR             GET PTR TO CVT
         USING CVT,WORK4                ADDRESS CVT
         L     WORK4,CVTCUCB            GET PTR TO UCM
         DROP  WORK4                    SET NEW BASE
         USING DRUCM,WORK4              ADDRESSING UCM
         L     OREREG,UCMRPYQ           GET ORE PTR              YM2304
         XC    OFFSET40(D4),OFFSET40 ZERO OUT COUNTER          @ZD04020
RPIDTEST EQU  *                         TEST ORE PTR             Y02893
         LTR   OREREG,OREREG            ANY OPERATOR REPLY ELMTS YM2304
         BZ    RPIDENDW                 NO. GO SEARCH UCBS       Y02756
         USING OREF,OREREG              ADDRESS ORE              YM2304
         DROP  WORK4               NO ADDRESSABILITY FOR UCM     Y02756
         L     WORK4,OREOPBUF      OBTAIN PTR TO TEMP. BUFFER    Y02756
         LTR   WORK4,WORK4         REPLY PARIALLY PROCESSED ?    Y02756
         BNZ   RPIDNEXT            YES, GET NEXT ORE             Y02756
         TM    OREXC,OREBUFC       DOM ISSUED FOR ORE ?          Y02756
         BO    RPIDNEXT            YES, GET NEXT ORE             Y02756
         L     WQEREG,OREWQE            GET THE ASSOCIATED WQE   YM2304
         USING WQE,WQEREG               ADDRESS WQE              YM2304
         LTR   WQEREG,WQEREG            WQE ON CHAIN ?           Y02756
         BZ    RPIDNEXT                 NO, GET NEXT ORE         Y02756
         TM    WQEXA,WQESUSP       PROCESSING SUSPENDED ?        Y02756
         BO    RPIDNEXT            YES, GET NEXT ORE             Y02756
         LTR   SW1REG,SW1REG            INITIAL PART OF MSG IN
         BNE   RPIDDATL                 YES. SKIP MOVE OF MSG HDRY02756
         BAL   EXITREG,CONTLSEG    CREATE CONTROL LINE           Y02756
*****************************************************************Y02893
* BRANCH TO CONTROL LINE SEGMENT TO CREATE A CONTROL LINE.       Y02893
*****************************************************************Y02893
RPIDDATL EQU   *                   CHECK DATA LINE INDICATOR     Y02756
         LA    WORK4,DATALLIT      MAX DATA LINES IN MSG GROUP   Y02756
         CR    DATALIND,WORK4      MAX DATA LINES REACHED ?      Y02756
         BL    RPIDMOVA            NO, MOVE IN REPLY ID          Y02756
         BAL   EXITREG,NEWMGSEG    CREATE NEW MESSAGE GROUP      Y02756
*****************************************************************Y02893
* BRANCH TO CREATE NEW MESSAGE GROUP. (MAX OF 10 DATA LINES)     Y02893
*****************************************************************Y02893
RPIDMOVA EQU   *                   FIRST ENTRY ON DATA LINE      Y02756
         CR    MSGAD,MSGREG        FREE SPACE POINTER AND        Y02756
*                                  START OF MSG POINTER EQ ?     Y02756
         BNE   RPIDMOVE            NO, MOVE IN REPLY ID          Y02756
         LA    MSGREG,D4(MSGREG)   ALLOW FOR CONTROL DATA        Y02756
         MVC   D0(L3,MSGREG),BLANKS START MSG TEXT WITH BLANKS   Y02756
         LA    MSGREG,D3(MSGREG)   ADJUST FREE SPACE PTR         Y02756
RPIDMOVE EQU   *                   MOVE REPLY ID                 Y02756
         L     WORK4,OFFSET40      OBTAIN CURRENT COUNT        @ZD04020
         LA    WORK4,D1(WORK4)     INCREMENT COUNT BY ONE      @ZD04020
         ST    WORK4,OFFSET40      STORE NEW COUNT             @ZD04020
         MVC   D0(L2,MSGREG),OREID PUT REPLY ID IN MSG           Y02756
         LA    MSGREG,D2(MSGREG)   ADJUST FREE SPACE PTR         Y02756
         LTR   LISTIND,LISTIND     LIST OPERAND SPECIFIED ?      Y02756
         BNZ   RPIDLIST            YES, PROCESS LIST FUNCTION    Y02756
         SR    MSGREG,MSGAD        DETERMINE NO. OF BYTES USED   Y02756
         CH    MSGREG,NOROOMID     ROOM FOR ANOTHER ID ?         Y02756
         BNH   RPIDRMLF            YES, GET NEXT ORE           @ZD04020
         AR    MSGREG,MSGAD        RESET FREE SPACE POINTER      Y02756
         BAL   EXITREG,NEWDLSEG    GET NEW DATA LINE             Y02756
*****************************************************************Y02893
* BRANCH TO DATA LINE SEGMENT TO CREATE NEW DATA LINE.           Y02893
*****************************************************************Y02893
         B     RPIDNEXT            GET NEXT ORE                  Y02756
RPIDRMLF EQU   *                   RESTORE FREE SPACE POINTER    Y02756
         AR    MSGREG,MSGAD        RESET POINTER                 Y02756
         MVC   D0(L2,MSGREG),BLANKS FOLLOW ID BY BLANKS        @ZD04020
         LA    MSGREG,D2(MSGREG)   ADJUST FREE SPACE PTR       @ZD04020
RPIDNEXT EQU   *                   GET NEXT ORE ON CHAIN         Y02756
         L     OREREG,ORELKP       POINTER TO NEXT ORE           Y02756
         B     RPIDTEST            GO TEST ORE POINTER           Y02756
RPIDLIST EQU   *                   PROCESS LIST FUNCTION         Y02756
         MVI   D0(MSGREG),COMMA    FOLLOW ID BY COMMA            Y02756
         LA    MSGREG,D1(MSGREG)   ADJUST FREE SPACE PTR         Y02756
         L     WORK5,WQENBR        GET LENGTH OF WTO TEXT        Y02756
         LA    WORK4,D4            INDEX FOR FIRST TEXT CHAR     Y02756
         SR    WORK5,WORK4         PTR TO FIRST TEXT CHARACTER   Y02756
         LA    WORK4,L64           MAX LENGTH OF WTO TEXT      @ZD04020
         CR    WORK5,WORK4         TEXT LENGTH GREATER THAN MAX  Y02756
         BH    RPIDTXLG            YES, MOVE ONLY 64 CHAR        Y02756
         BCTR  WORK5,0             PREPARE TO MOVE TEXT          Y02756
         EX    WORK5,RPIDMVTX      MOVE ALL OF TEXT              Y02756
         LA    WORK5,D1(WORK5)     RESET LENGTH VALUE            Y02756
         AR    MSGREG,WORK5        RESTORE FREE SPACE POINTER    Y02756
         B     RPIDNEWL            GET NEW DATA LINE             Y02756
RPIDTXLG EQU   *                   TEXT LENGTH GREATER THAN 64   Y02756
         LA    WORK5,WQETXT+D4     GET ADDR OF START OF TEXT     Y02756
         LR    WORK4,WORK5         SAVE TEXT POINTER             Y02756
         LA    WORK4,L64(WORK4)    GET ADDR OF 65TH CHARACTER  @ZD04020
         CLI   D0(WORK4),X'40'     65TH CHARACTER A BLANK        Y02756
         BE    RPIDMALL            MOVE 64 CHARACTERS            Y02756
         BCTR  WORK4,0             PT TO PREVIOUS CHARACTER      Y02756
RPIDCCHA EQU   *                   CHECK FOR BLANK               Y02756
         CLI   D0(WORK4),X'40'     THIS CHARACTER A BLANK ?      Y02756
         BE    RPIDCLTH            CALCULATE LENGTH              Y02756
         BCTR  WORK4,0             PT TO PREVIOUS CHARACTER      Y02756
         CR    WORK4,WORK5         ALL TEXT CHARACTERS CHECKED   Y02756
         BH    RPIDCCHA            NO, CHECK NEXT CHARACTER      Y02756
RPIDMALL EQU   *                   MOVE 64 CHARACTERS            Y02756
         LA    WORK4,L64           SET LENGTH OF MOVE          @ZD04020
         B     RPIDCONT            EXECUTE MOVE                  Y02756
RPIDCLTH EQU   *                   CALCULATE LENGTH OF MOVE      Y02756
         SR    WORK4,WORK5         SET LENGTH OF MOVE            Y02756
RPIDCONT BCTR  WORK4,0             PREPARE TO MOVE TEXT          Y02756
         EX    WORK4,RPIDMVTX      MOVE ONLY UP TO 64 CHARACTERS Y02756
         LA    WORK4,D1(WORK4)     RESET LENGTH VALUE            Y02756
         AR    MSGREG,WORK4        RESTORE FREE SPACE POINTER    Y02756
RPIDNEWL EQU   *                   NEW DATA LINE                 Y02756
         BAL   EXITREG,NEWDLSEG    GET NEW DATA LINE             Y02756
*****************************************************************Y02893
* BRANCH TO DATA LINE SEGMENT TO CREATE NEW DATA LINE.           Y02893
*****************************************************************Y02893
         B     RPIDNEXT            GET NEXT ORE                  Y02756
RPIDENDW EQU   *                                               @ZD04020
         BAL   EXITREG,SUBRTNE     GO TO INSERTION SUBROUTINE  @ZD04020
         LTR   R6,R6               IS COUNT ZERO?              @ZD04020
         BZ    DONE1               YES, AVOID LABEL INSERTION  @ZD04020
         BAL   R8,TESTESS          TEST FOR 'S' INSERTION      @ZD04020
         MVC   D0(D8,SW2REG),REPLYID NO, MOVE IN LABEL         @ZD04020
         LA    SW2REG,D8(SW2REG)   INDEX BUFFER PAST LABEL     @ZD04020
         LA    R7,D1               SET A COMPRAND OF 1         @ZD04020
         CR    R6,R7               IS COUNT EQUAL TO 1?        @ZD04020
         BE    DONE1               YES, AVOID 'S' INSERTION    @ZD04020
         MVI   D0(SW2REG),ESS      NO, MOVE IN A 'S'           @ZD04020
         LA    SW2REG,D1(SW2REG)   INDEX BUFFER PAST 'S'       @ZD04020
         BAL   R8,MOVEIN           PLURALIZE 'REQUEST'         @ZD04020
DONE1    EQU   *                                               @ZD04020
         LM    R6,R8,XASAVLOC+D4   RESTORE REGISTERS           @ZD04020
         LTR   SW1REG,SW1REG       ANY MSGS ISSUED OR BEING PROCESSED?
         BZ    RPIDEXIT            YES, BR TO UCB SEARCH         Y02756
         CR    MSGREG,MSGAD        NEW DATA LINE ?               Y02756
         BE    RPIDEXIT            YES, BRANCH TO UCB SEARCH     Y02756
         BAL   EXITREG,NEWDLSEG    GET NEW DATA LINE             Y02756
*****************************************************************Y02893
* BRANCH TO DATA LINE SEGMENT TO CREATE NEW DATA LINE.           Y02893
*****************************************************************Y02893
         EJECT
RPIDEXIT EQU   *                                               @ZD04020
*****************************************************************Y02893
* START  OF READY UNITS SEGMENT TO SCAN UCB CHAIN.               Y02893
*****************************************************************Y02893
         SPACE
*****************************************************************Y02893
*              READY UNITS     SEGMENT                           Y02893
*                                                                Y02893
* THE FOLLOWING CODE SCANS THE UCB CHAIN LOOKING FOR UCBS WHICH  Y02893
* INDICATE A NOT READY STATE. FOR THOSE UCBS WHICH ARE IN A NOT  Y02893
* READY STATE, A READY UNITS MESSAGE WILL BE ISSUED. BEFORE THE  Y02893
* UNIT NAME IS MOVED INTO THE MESSAGE AREA, A BRANCH IS MADE TO  Y02893
* TEST FOR TWO CHANNEL SWITCH TO ELIMINATE DUPLICATE NAMES.      Y02893
*                                                                Y02893
* INPUT:                                                         Y02893
*  CVT,UCB LOOKUP TABLE,UCB                                      Y02893
*                                                                Y02893
* OUTPUT:  CONTINUE NORMAL PROCESSING                            Y02893
*                                                                Y02893
*****************************************************************Y02893
         XC    OFFSET40(D4),OFFSET40 ZERO OUT COUNTER          @ZD04020
RDUTSRCH SR    SW3REG,SW3REG       SWITCH 3 IS 0:NO UNIT MSGS YETY02756
         L     WORK4,CVTPTR             GET CVT ADDRESS
         USING CVT,WORK4           ADDRESS CVT                   Y02756
         L     UCBLSREG,CVTILK2     ADDR OF 2-BYTE UCB PTRS      Y02756
         DROP  WORK4
DUMYTEST CLC   0(2,UCBLSREG),ZERO  IS THIS A DUMMY UCB?
         BE    NEXTUCB             IF YES,SKIP AND GET NEXT ONE
         LH    UCBREG,0(UCBLSREG)  GET UCB ADDRESS
         N     UCBREG,ZEROFOX     ZERO OUT PROPAGATED BITS
         C     UCBREG,ZEROFOX     END OF LIST
         BE    RDUTUEND            GO CHECK FOR INT REQ IF YES   Y02756
*****************************************************************Y02893
* BRANCH TO THE INTERVENTION REQUIRED SEGMENT TO SCAN UCBS FOR   Y02893
* INTERVENTION REQUIRED MESSAGES.                                Y02893
*****************************************************************Y02893
         USING UCB,UCBREG
         TM    UCBTBYT3,UCB3TAPE+UCB3DACC TAPE OR DIRECT ACCESS
         BZ    NEXTUCB                  NO. SKIP IT. GET NEXT ONE.
         TM    UCBDMCT,UCBMOUNT    MOUNT MSG. PENDING?
         BZ    DAVV                NO, TEST DAVV ISSUED
         TM    UCBSTAT,UCBALOC     IS UNIT CURRENTLY ALLOCATED    22909
         BZ    DAVV                NO, TEST DAVV ISSUED      22909
         TM    UCBTBYT3,UCB3DACC   IS DEVICE DA
         BO    TSTSWICH            BRANCH TO SET UP MESSAGE IF IT IS
         TM    UCBFL1,UCBNRY       IS DEVICE READY?
         BZ    NEXTUCB             GET NEXT UCB IF IT ISN'T
TSTSWICH LTR   SW3REG,SW3REG       IS SWITCH THREE 0
         BZ    SETUPUM             SET UP UNIT MESSAGE IF ZERO
SETSWIH2 EQU   *                   CHECK DATA LINE INDICATOR     Y02756
         LA    WORK4,DATALLIT      MAX DATA LINES IN MSG GROUP   Y02756
         CR    DATALIND,WORK4      MAX DATA LINES REACHED ?      Y02756
         BL    RDUTTSFT            NO, TEST FIRST ENTRY          Y02756
         BAL   EXITREG,NEWMGSEG    CREATE NEW MESSAGE GROUP      Y02756
*****************************************************************Y02893
* BRANCH TO CREATE NEW MESSAGE GROUP. (MAX OF 10 LINES)          Y02893
*****************************************************************Y02893
RDUTTSFT EQU   *                   FIRST ENTRY ON DATA LINE      Y02756
         CR    MSGAD,MSGREG        FREE SPACE POINTER AND        Y02756
*                                  START OF MSG POINTER EQ ?     Y02756
         BNE   RDUTTSTW            NO, TEST FOR TWO CHANNEL SW   Y02756
         LA    MSGREG,D4(MSGREG)   ALLOW FOR CONTROL DATA        Y02756
         MVI   D0(MSGREG),X'40'    START MSG TEXT WITH BLANK     Y02756
         LA    MSGREG,D1(MSGREG)   ADJUST FREE SPACE POINTER     Y02756
         MVC   D0(D12,MSGREG),RDYUNITS MOVE IN UNIT HEADER       Y02756
         LA    MSGREG,D12(MSGREG)  ADJUST FREE SPACE POINTER     Y02756
         MVC   D0(L2,MSGREG),BLANKS FOLLOW HEADER WITH BLANKS    Y02756
         LA    MSGREG,D2(MSGREG)   ADJUST FREE SPACE POINTER     Y02756
RDUTTSTW EQU   *                   TWO CHANNEL SWITCH PROCESSING Y02756
         BAL   EXITREG,TWOCHSW     TEST FOR TWO CHANNEL SWITCH   Y02893
*****************************************************************Y02893
* BRANCH TO THE TWO CHANNEL SWITCH SEGMENT TO CHECK FOR          Y02893
* DUPLICATE UNIT NAMES.                                          Y02893
*****************************************************************Y02893
         SR    MSGREG,MSGAD        DETERMINE NO. OF BYTES USED   Y02756
         CH    MSGREG,NOROOMUN     ROOM FOR ANOTHER UNITNAME ?   Y02756
         BNH   RDUTRMLF            YES, GET NEXT UCB           @ZD04020
         AR    MSGREG,MSGAD        RESET FREE SPACE PTR          Y02756
         BAL   EXITREG,NEWDLSEG    GET NEW DATA LINE             Y02756
*****************************************************************Y02893
* BRANCH TO DATA LINE SEGMENT TO CREATE NEW DATA LINE.           Y02893
*****************************************************************Y02893
         B     NEXTUCB             GET NEXT UCB                  Y02756
RDUTRMLF EQU   *                   RESET POINTER                 Y02756
         AR    MSGREG,MSGAD        RESET FREE SPACE POINTER      Y02756
         MVC   0(2,MSGREG),BLANKS  FOLLOW UNIT # BY BLANKS     @ZD04020
         LA    MSGREG,2(MSGREG)    POINT TO NEXT FREE SPACE    @ZD04020
         B     NEXTUCB             GET NEXT UCB                  Y02893
DAVV     TM    UCBTBYT3,UCB3DACC   IS DEVICE DA                  A39479
         BZ    NEXTUCB             NO- GET NEXT UCB              A39479
         TM    UCBFL4,UCBWDAV      DAVV WAITING FOR MOUNT        Y02893
         BO    TSTSWICH            YES- PUT OUT READY UNIT MSG   Y02893
NEXTUCB  LA    UCBLSREG,2(UCBLSREG) PT TO NEXT ENTRY IN UCB LIST A39479
         B     DUMYTEST            BRANCH TO HANDLE IT
SETUPUM  LTR   SW1REG,SW1REG       INITIAL PART IN MESSAGE
         BC    7,RDUTINIA          BRANCH IF YES
         BAL   EXITREG,CONTLSEG    CREATE CONTROL LINE           Y02756
*****************************************************************Y02893
* BRANCH TO CONTROL LINE SEGMENT TO CREATE A CONTROL LINE.       Y02893
*****************************************************************Y02893
RDUTINIA EQU   *                   SET LABEL POINTER             Y02756
         LA    SW3REG,MIDMSG       INDICATE UNIT HEADER SET      Y02756
         B     SETSWIH2            GO SET SW2 THAT MSG BEING PROCESSED
RDUTUEND EQU   *                   END UNIT PROCESSING           Y02756
         BAL   EXITREG,SUBRTNE     GO TO INSERTION SUBROUTINE  @ZD04020
         LTR   R6,R6               IS COUNT ZERO?              @ZD04020
         BZ    DONE2               YES, AVOID LABEL INSERTION  @ZD04020
         BAL   R8,TESTESS          TEST FOR 'S' INSERTION      @ZD04020
         MVC   D0(D10,SW2REG),RDYUNITS NO, MOVE IN LABEL       @ZD04020
         LA    SW2REG,D10(SW2REG)  INDEX BUFFER PAST LABEL     @ZD04020
         LA    R7,D1               SET A COMPRAND OF 1         @ZD04020
         CR    R6,R7               IS COUNT EQUAL TO 1?        @ZD04020
         BE    ONE                 YES, AVOID 'S' INSERTION    @ZD04020
         MVI   D0(SW2REG),ESS      NO, MOVE IN A 'S'           @ZD04020
         LA    SW2REG,D1(SW2REG)   INDEX BUFFER PAST 'S'       @ZD04020
         BAL   R8,MOVEIN           PLURALIZE 'REQUEST'         @ZD04020
DONE2    EQU   *                                               @ZD04020
         LM    R6,R8,XASAVLOC+D4   RESTORE REGISTERS           @ZD04020
         B     FINISHED            TEST FOR CONTROL LINE       @ZD04020
         SPACE
ONE      EQU   *                                               @ZD04020
         L     MSGREG,XASAVLOC+D4  RESTORE REGISTER            @ZD04020
         LA    R8,D8               OBTAIN CONSTANT OF 8        @ZD04020
         LR    MINUSA,MSGREG       PREPARE FOR NEXT INSTR.     @ZD04020
         SR    MINUSA,R8           SET MINUS 8 OFFSET          @ZD04020
         LR    MINUSB,MINUSA       PREPARE FOR NEXT INSTR.     @ZD04020
         BCTR  MINUSB,0            SET MINUS 9 OFFSET          @ZD04020
         MVC   D0(D8,MINUSB),D0(MINUSA) REMOVE THE 'S' FROM THE        *
                         'READY UNITS' LABEL ON THE DATA LINE  @ZD04020
         BCTR  MSGREG,0            RESET FREE SPACE POINTER    @ZD04020
         LM    R7,R8,XASAVLOC+D8   RESTORE REGISTERS           @ZD04020
FINISHED EQU   *                                               @ZD04020
         LTR   SW1REG,SW1REG       CONTROL LINE CREATED?       @ZD04020
         BZ    IRTEST              YES, TEST FOR I.R.          @ZD04020
         CR    MSGREG,MSGAD        NEW DATA LINE?              @ZD04020
         BE    IRTEST              YES, TEST FOR I.R.          @ZD04020
         BAL   EXITREG,NEWDLSEG    GET NEW DATA LINE           @ZD04020
***************************************************************@ZD04020
* BRANCH TO DATA LINE SEGMENT TO CREATE NEW DATA LINE          @ZD04020
***************************************************************@ZD04020
         B     IRTEST              TEST FOR I.R.               @ZD04020
         EJECT
*****************************************************************Y02893
*              TWO  CHANNEL  SWITCH  SEGMENT                     Y02893
*                                                                Y02893
* THE FOLLOWING SEGMENT CHECKS FOR DUPLICATE UNIT NAMES IN CASE  Y02893
* OF A TWO CHANNEL SWITCH. THE UCB LOOKUP TABLE IS RESCANNED     Y02893
* LOOKING FOR DUPLICATE UCB ADDRESSES. IF DUPLICATE ADDRESSES AREY02893
* FOUND, OMLY ONE ENTRY IS MADE FOR THAT UCB.                    Y02893
*                                                                Y02893
* INPUT:                                                         Y02893
*  CVT,UCB LOOKUP TABLE,UCB                                      Y02893
*                                                                Y02893
* OUTPUT: RETURN TO CALLING SEGMENT                              Y02893
*                                                                Y02893
*****************************************************************Y02893
TWOCHSW  L     WORK4,CVTPTR             GET CVT ADDR
         USING CVT,WORK4
         L     WORK4,CVTILK2            GET UCB LIST ADDR
         DROP  WORK4
CHKZERO  CLC   0(2,WORK4),ZERO     IS IT A DUMMY UCB
         BE    GETNEXT             IF SO, SKIP IT
         LH    WORK1,0(WORK4)      GET UCB ADDR
         N     WORK1,ZEROFOX      ZERO OUT PROPAGATED BITS
         C     WORK1,ZEROFOX      END OF LIST
         BE    MOVENAME           NO DUPE NAMES...MOVE IN UCB NUMBER
         CR    WORK1,UCBREG        DO UCB ADDRESSES MATCH
         BE    MATCH               IF SO, GO CHECK LIST ADDRESSES
GETNEXT  LA    WORK4,2(WORK4)      POINT TO NEXT LIST ENTRY
         B     CHKZERO             AND GO CHECK FOR DUMMY UCB
MATCH    CR    WORK4,UCBLSREG      COMPARE LIST ADDRESSES
         BNE   RTPTR               RETURN TO CALLER              Y02893
MOVENAME MVC   0(3,MSGREG),UCBNAME     MOVE IN UNIT NUMBER
         LA    MSGREG,3(MSGREG)    INCREMENT FREE SPACE PTR.
         L     WORK4,OFFSET40      OBTAIN CURRENT COUNT        @ZD04020
         LA    WORK4,D1(WORK4)     INCREMENT COUNT BY ONE      @ZD04020
         ST    WORK4,OFFSET40      STORE NEW COUNT             @ZD04020
RTPTR    BR    EXITREG             BR TO HANDLE UCB              Y02893
*****************************************************************Y02893
* RETURN TO CALLING SEGMENT TO PROCESS THE NEXT UCB.             Y02893
*****************************************************************Y02893
         EJECT
***************************************************************@ZD04020
* START OF INTERVENTION REQUIRED SEGMENT TO SCAN UCB CHAIN     @ZD04020
***************************************************************@ZD04020
         SPACE
**************************************************************** Y02893
*               INTERVENTION REQUIRED SEGMENT                    Y02893
*                                                                Y02893
*        THIS MAINLINE ROUTINE PROCESSES THE INTERVENTION        Y02893
*        REQUIRED PORTION OF MESSAGE IEE110I                     Y02893
*                                                                Y02893
*        THE CONTENTS OF SW3REG MUST BE PRESERVED ACROSS         Y02893
*        THIS ROUTINE.                                           Y02893
*                                                                Y02893
**************************************************************** Y02893
         SPACE 2
IRTEST   EQU   *                                                 Y02893
*                                                                Y02893
*        THIS SECTION SCANS THE UCB'S FOR THOSE CORRESPONDING    Y02893
*        UNITS WITH INTERVENTION REQUIRED                        Y02893
*                                                                Y02893
         SR    SW3REG,SW3REG       SWITCH 3 TO 0: NO I R MSG YET Y02893
         L     WORK4,CVTPTR        CVT...                        Y02893
         USING CVT,WORK4
         L     UCBLSREG,CVTILK2 ADR OF 2-BYTE UCB PTRS  Y02756
         DROP  WORK4
         XC    OFFSET40(D4),OFFSET40 ZERO OUT COUNTER          @ZD04020
DUMTEST  EQU   *                                                 Y02893
         OC    D0(D2,UCBLSREG),D0(UCBLSREG) IS THIS A DUMMY UCB  Y02893
         LH    UCBREG,D0(UCBLSREG) GETADDR OF THIS UCB           Y02893
         BZ    NXTUCB              IF A DUMMY, IGNORE, GET NEXT  Y02893
         N     UCBREG,ZEROFOX      ZERO OUT PROPAGATED BITS      Y02893
         C     UCBREG,ZEROFOX      END OF LIST?                  Y02893
         BE    INRQIEND            YES, GO ISSUE MLWTO
         USING UCB,UCBREG          UCB ADDRESSABILITY            Y02893
         SPACE
*        CHECK FOR INTERVENTION REQUIRED ON UNIT                 Y02893
         SPACE
         TM    UCBFLC,UCBIVRS      INT. REQ. MESSAGE ISSUED      Y02756
         BNO   NXTUCB              NO, DOESN'T NEED I R MESSAGE  Y02893
         LTR   SW3REG,SW3REG       I R MESSAGE IN PROCESS        Y02893
         BNZ   SETSW2IR            NO, GO INDICATE I R MESSAGE   Y02893
SETIRM   EQU   *                                                 Y02893
         LTR   SW1REG,SW1REG       IS MESSAGE ID IN BUFFER       Y02893
         BNZ   INRQIDNA            YES, JUST ADD INTERVENTION    Y02893
*                                  REQUIRED TO THE BUFFER        Y02893
         BAL   EXITREG,CONTLSEG    CREATE CONTROL LINE           Y02756
*****************************************************************Y02893
* BRANCH TO CONTROL LINE SEGMENT TO CREATE CONTROL LINE.         Y02893
*****************************************************************Y02893
INRQIDNA EQU   *                   SET LABEL POINTER             Y02756
         LA    SW3REG,MIDMSG       INDICATE UNIT HEADER SET      Y02756
SETSW2IR EQU   *                                                 Y02893
         LA    WORK4,DATALLIT      MAX DATA LINES IN MSG GROUP   Y02756
         CR    DATALIND,WORK4      MAX DATA LINES REACHED ?      Y02756
         BL    INRQTSFT            NO, TEST FIRST ENTRY          Y02756
         BAL   EXITREG,NEWMGSEG    CREATE NEW MESSAGE GROUP      Y02756
*****************************************************************Y02893
* BRANCH TO CREATE NEW MESSAGE GROUP. (MAX OF 10 LINES)          Y02893
*****************************************************************Y02893
INRQTSFT EQU   *                   FIRST ENTRY OF DATA LINE      Y02756
         CR    MSGAD,MSGREG        FREE SPACE POINTER AND        Y02756
*                                  START OF MSG POINTER EQ ?     Y02756
         BNE   INRQTSTW            NO, TEST FOR TWO CHANNEL SW   Y02756
         LA    MSGREG,D4(MSGREG)   ALLOW FOR CONTROL DATA        Y02756
         MVI   D0(MSGREG),X'40'    START MSG TEXT WITH BLANK     Y02756
         LA    MSGREG,D1(MSGREG)   ADJUST FREE SPACE POINTER     Y02756
         MVC   D0(D23,MSGREG),INTREQ MOVE IN INT. REQ. HEADER  @ZD04020
         LA    MSGREG,D23(MSGREG)  ADJUST FREE SPACE POINTER   @ZD04020
         MVC   D0(L2,MSGREG),BLANKS FOLLOW HEADER WITH BLANKS    Y02756
         LA    MSGREG,D2(MSGREG)   ADJUST FREE SPACE PTR         Y02756
INRQTSTW EQU   *                   TWO CHANNEL SWITCH PROCESSING Y02756
         BAL   EXITREG,TWOCHSW     TEST FOR TWO CHANNEL SWITCH   Y02893
         SPACE
*        THIS UNIT HAS AN INTERVENTION REQUIRED OUTSTANDING;     Y02893
*        ADD IT TO THE MESSAGE, AFTER CHECKING FOR THE TWO       Y02893
*        CHANNEL SWITCH                                          Y02893
*                                                                Y02893
         SR    MSGREG,MSGAD        DETERMINE NO. OF BYTES USED   Y02756
         CH    MSGREG,NOROOMIR     ROOM FOR ANOTHER UNITNAME     Y02756
         BNH   INRQRMLF            YES, GET NEXT UCB           @ZD04020
         AR    MSGREG,MSGAD        RESET PTR                     Y02756
         BAL   EXITREG,NEWDLSEG    GET NEW DATA LINE             Y02756
         B     NXTUCB              GET NEXT UCB                  Y02756
INRQRMLF EQU   *                   ROOM FOR ANOTHER UNITNAME     Y02756
         AR    MSGREG,MSGAD        RESET FREE SPACE POINTER      Y02756
         MVC   0(2,MSGREG),BLANKS  FOLLOW UNIT # BY BLANKS     @ZD04020
         LA    MSGREG,2(MSGREG)    POINT TO NEXT FREE SPACE    @ZD04020
NXTUCB   EQU   *                   GET NEXT UCB                  Y02893
         LA    UCBLSREG,D2(UCBLSREG) GET ADDR OF NEXT UCB        Y02893
         B     DUMTEST             GO EXAMINE THAT UCB           Y02893
INRQIEND EQU   *                   END IR PROCESSING             Y02756
         BAL   EXITREG,SUBRTNE     GO TO INSERTION SUBROUTINE  @ZD04020
         LTR   R6,R6               IS COUNT ZERO?              @ZD04020
         BZ    DONE3               YES, AVOID LABEL INSERTION  @ZD04020
         BAL   R8,TESTESS          TEST FOR 'S' INSERTION      @ZD04020
         MVC   D0(D22,SW2REG),INTREQ NO, MOVE IN LABEL         @ZD04020
         LA    SW2REG,D22(SW2REG)  INDEX BUFFER PAST LABEL     @ZD04020
         LA    R7,D1               SET A COMPRAND OF 1         @ZD04020
         CR    R6,R7               IS COUNT EQUAL TO 1?        @ZD04020
         BNE   DONE3A              NO, DO NOT MAKE IT SINGULAR @ZD04020
         L     MSGREG,XASAVLOC+D4  YES, RESTORE REGISTER       @ZD04020
         LA    R8,D17              OBTAIN CONSTANT OF 17       @ZD04020
         LR    MINUSA,MSGREG       PREPARE FOR NEXT INSTR.     @ZD04020
         SR    MINUSA,R8           SET MINUS 17 OFFSET         @ZD04020
         LR    MINUSB,MINUSA       PREPARE FOR NEXT INSTR.     @ZD04020
         BCTR  MINUSB,0            SET MINUS 18 OFFSET         @ZD04020
         MVC   D0(D17,MINUSB),D0(MINUSA) REMOVE THE 'S' FROM THE       *
               'INTERVENTIONS REQUIRED' LABEL ON THE DATA LINE @ZD04020
         BCTR  MSGREG,0            RESET FREE SPACE POINTER    @ZD04020
         LA    R8,D9               OBTAIN CONSTANT OF 9        @ZD04020
         LR    MINUSA,SW2REG       PREPARE FOR NEXT INSTR.     @ZD04020
         SR    MINUSA,R8           SET MINUS 9 OFFSET          @ZD04020
         LR    MINUSB,MINUSA       PREPARE FOR NEXT INSTR.     @ZD04020
         BCTR  MINUSB,0            SET MINUS 10 OFFSET         @ZD04020
         MVC   D0(D9,MINUSB),D0(MINUSA) REMOVE THE 'S' FROM THE        *
               'INTERVENTIONS REQUIRED' LABEL ON THE LABEL LINE@ZD04020
         BCTR  SW2REG,0            RESET FREE SPACE POINTER    @ZD04020
         MVI   D0(SW2REG),BLANK    BLANK OUT THE TRAILING 'D'  @ZD04020
         LM    R7,R8,XASAVLOC+D8   RESTORE REGISTERS           @ZD04020
         B     ALLDONE                                         @ZD04020
DONE3A   EQU   *                                               @ZD04020
         BAL   R8,MOVEIN           PLURALIZE 'REQUEST'         @ZD04020
DONE3    EQU   *                                               @ZD04020
         LM    R6,R8,XASAVLOC+D4   RESTORE REGISTERS           @ZD04020
ALLDONE  EQU   *                                               @ZD04020
         LTR   SW1REG,SW1REG       CONTROL LINE CREATED?       @ZD04020
         BZ    MLWTOSEG            YES, ISSUE MLWTO            @ZD04020
         CR    MSGREG,MSGAD        NEW DATA LINE?              @ZD04020
         BE    MLWTOSEG            YES, ISSUE MLWTO            @ZD04020
         BAL   EXITREG,NEWDLSEG    GET NEW DATA LINE           @ZD04020
***************************************************************@ZD04020
* BRANCH TO DATA LINE SEGMENT TO CREATE NEW DATA LINE          @ZD04020
***************************************************************@ZD04020
         B     MLWTOSEG            ISSUE MLWTO                 @ZD04020
         EJECT
*****************************************************************Y02893
*              CONTROL  LINE  SEGMENT                            Y02893
*                                                                Y02893
* THE FOLLOWING ROUTINE WILL CREATE A CONTROL LINE OR HEADER     Y02893
* LINE FOR A DISPLAY REQUEST. THIS CONTROL LINE WILL BE THE FIRSTY02893
* LINE IN A MULTI-LINE GROUP. ONLY ONE CONTROL LINE WILL BE      Y02893
* CREATED PER DISPLAY REQUEST. THIS LINE HAS THE FOLLOWING       Y02893
* FORMAT: -A NULL LABEL LINE WILL ALSO BE CREATED.-
*                                                                Y02893
*    IEE110I HH.MM.SS PENDING REQUESTS                           Y02893
*                                                                Y02893
*     HH.MM.SS = TIME STAMP                                      Y02893
*                                                                Y02893
* INPUT:                                                         Y02893
*  XSA,CVT,WPL                                                   Y02893
*                                                                Y02893
* OUTPUT: NONE                                                   Y02893
*                                                                Y02893
*****************************************************************Y02893
CONTLSEG EQU   *                   CREATE CONTROL LINE           Y02756
         ST    WQEREG,XASAVLOC+D4  SAVE WQE POINTER              Y02756
         ST    SW1REG,XASAVLOC+D8  SAVE LINE IND REG             Y02756
         ST    WORK3,XASAVLOC+D12  SAVE WORK REG                 Y02756
         ST    LISTIND,XAP         SAVE LIST INDICATOR           Y02756
         ST    EXITREG,XAD         SAVE RETURN REG               Y02756
         L     SW1REG,PSATOLD      GET ADDR OF TCB               Y02756
         L     WORK3,PSAAOLD       GET ADDR OF ASCB              Y02756
         SR    WORK2,WORK2         GETMAIN INTERFACE             Y02756
         LA    MSGREG,MGLTH        LENGTH OF GETMAIN             Y02756
         GETMAIN RU,LV=(MSGREG),SP=229,BRANCH=YES GET CORE       Y02756
         LR    MSGAD,WORK2         SAVE ADDR OF CORE             Y02756
         LR    WORK1,MSGAD         SET TO LOCATION               Y02756
         LA    WORK2,MGLTH         SET LENGTH OF TO LOC          Y02756
         LR    SW1REG,MSGAD        SET FROM LOCATION             Y02756
         SR    SW2REG,SW2REG       CLEAR REGISTER                Y02756
         MVCL  WORK1,SW1REG        CLEAR MSG AREA                Y02756
         L     WQEREG,XASAVLOC+D4  RESTORE WQE REG               Y02756
         L     SW1REG,XASAVLOC+D8  RESTORE LINE IND REG          Y02756
         L     WORK3,XASAVLOC+D12  RESTORE WORK REG              Y02756
         L     LISTIND,XAP         RESTORE LIST INDICATOR        Y02756
         LA    SW1REG,MIDMSG       INDICATE CONTROL LINE CREATED Y02756
         ST    MSGAD,XASAVSTD      STORE ADDR OF MSG GROUP       Y02756
         ST    MSGAD,XASAVSTD+D4   STORE ADDR OF MSG GROUP       Y02756
         SR    WORK4,WORK4         ZERO WORK REGISTER            Y02756
         ST    WORK4,D0(MSGAD)     ZERO LINK POINTER             Y02756
         LA    MSGAD,D4(MSGAD)     START LINE AFTER LINK PTR     Y02756
         LA    DATALIND,D1(DATALIND) INDICATE DATA LINE CREATED  Y02756
         USING WPLRF,MSGAD         ADDRESSABILITY FOR WPL COMMON Y02756
         LA    WORK4,37            LENGTH OF CONTROL LINE PLUS 4 Y02756
         STH   WORK4,WPLLGH        STORE LENGTH IN WPL           Y02756
         OI    WPLMCSF1,WPLMCSFA+WPLMCSFB SET MCS FLAGS          Y02756
         OI    WPLMCSF2,WPLMCSFJ   INDICATE MLWTO                Y02756
         LA    MSGREG,WPLTXT       ADDRESS OF TEXT FIELD         Y02756
         MVC   D0(D8,MSGREG),MSG1CODD MOVE IN MSG ID             Y02756
         LA    MSGREG,D8(MSGREG)   ADJUST FREE SPACE PTR         Y02756
         UNPK  XASAVSTD+D24(7),XASAVSTD+D8(4) UNPACK AND MOVE    Y02756
         MVC   D0(L2,MSGREG),XASAVSTD+D24 MOVE 2 BYTES OF TIME   Y02756
         MVI   D2(MSGREG),X'4B'    INSERT PERIOD                 Y02756
         MVC   D3(L2,MSGREG),XASAVSTD+26 MOVE 2 BYTES OF TIME    Y02756
         MVI   5(MSGREG),X'4B'     INSERT PERIOD                 Y02756
         MVC   L6(L2,MSGREG),XASAVSTD+28 MOVE 2 BYTES OF TIME    Y02756
         MVI   D8(MSGREG),X'40'    INSERT BLANK                  Y02756
         LA    MSGREG,D9(MSGREG)   ADJUST FREE SPACE POINTER     Y02756
         MVC   D0(HDLTH,MSGREG),MSG1CODE MOVE IN HEADER          Y02756
         LA    MSGREG,HDLTH(MSGREG) ADJUST FREE SPACE POINTER    Y02756
         LR    R10,MSGREG          OBTAIN CONTROL LINE END     @ZD04020
         BCTR  R10,0               BACK UP TO THE BLANK SPACE  @ZD04020
         ST    R10,OFFSET36        SAVE FOR LATER FILL-IN      @ZD04020
         DROP  MSGAD                                             Y02756
         USING WPLRF,MSGREG        WPL ROUT AND DESC CODES       Y02756
         OI    WPLDESC1,WPLDESCE+WPLDESCH SET DESC CODES         Y02756
         OI    WPLDESC2,WPLDESCI   DESC CODE 9                   Y02756
         MVC   WPLROUT(L2),ZEROS        ZERO ROUT CODES          Y02756
         LA    MSGREG,D4(MSGREG)   ADJUST FREE SPACE POINTER     Y02756
*                                  MLWTO EXTENSION               Y02756
         OI    WPLLTF1,WPLLTFA     INDICATE CONTROL LINE         Y02756
         OI    WPLLTF2,X'00'       ZERO SECOND BYTE              Y02756
         MVC   WPLAREA(D1),XASDID        INSERT AREA ID          Y02756
         LA    WORK4,WPLLINES      SAVE ADDRESS OF LINE IND      Y02756
         ST    WORK4,XASAVSTD+D12  SAVE IN XSA                   Y02756
         OI    WPLLINES,X'0A'      INDICATE TEN LINES IN MLWTO   Y02756
         LA    MSGREG,D4(MSGREG)   ADJUCT FREE SPACE POINTER     Y02756
*                                  START OF LABEL LINE           Y02756
         LA    WORK4,LABLEN        MAX LENGTH OF LABEL LINE    @YM7246P
         STH   WORK4,WPLML0        STORE LENGTH IN WPL           Y02756
         OI    WPLMLLT1,WPLMLLTB   INDICATE LABEL LINE           Y02756
         OI    WPLMLLT2,X'00'      ZERO SECOND BYTE              Y02756
         LA    MSGREG,D4(MSGREG)   ADJUST FREE SPACE POINTER     Y02756
         MVI   D0(MSGREG),BLANK    BLANK OUT LABEL LINE TEXT     Y02756
         MVC   D1(L69,MSGREG),D0(MSGREG) BLANK FIELD           @ZD04020
         MVC   D0(D8,MSGREG),SUMMARY MOVE 'SUMMARY:' IN        @ZD04020
         LA    SW2REG,D8(MSGREG)   ADJUST FREE SPACE POINTER   @ZD04020
         LA    DATALIND,D1(DATALIND) IND ANOTHER LINE CREATED    Y02756
         LA    MSGREG,LL(MSGREG)   PT TO DATA LINE               Y02756
         LR    MSGAD,MSGREG        SAVE START OF DATA LINE       Y02756
         L     EXITREG,XAD         RESTORE RETURN REG            Y02756
         BR    EXITREG             RETURN TO CALLER              Y02756
         EJECT
************************************************************** @ZD04020
*                                                            * @ZD04020
* THIS SUBROUTINE IS ENTERED TO PROCESS THE COUNT AND INSERT * @ZD04020
* SUCH COUNT INTO THE LABEL LINE BUFFER BEFORE THE INSERTION * @ZD04020
* OF ITS ASSOCIATED LABEL.                                   * @ZD04020
*                                                            * @ZD04020
************************************************************** @ZD04020
         SPACE
SUBRTNE  EQU   *                                               @ZD04020
         STM   R6,R8,XASAVLOC+D4   SAVE REGISTERS              @ZD04020
         L     R6,OFFSET40         OBTAIN COUNT VALUE          @ZD04020
         LTR   R6,R6               IS THERE A COUNT?           @ZD04020
         BZ    RETURN              NO, EXIT                    @ZD04020
         XC    OFFSET40(D8),OFFSET40 ZERO OUT WORK STORAGE     @ZD04020
         CVD   R6,OFFSET40         CONVERT COUNT TO DECIMAL    @ZD04020
         OI    OFFSET47,FOX        SET SIGN BIT FOR UNPACK     @ZD04020
         UNPK  OFFSET40(D4),OFFSET45(D3) UNPACK THE COUNT      @ZD04020
         TR    OFFSET40(D4),TABLE  ASSURE CORRECT CHARACTERS   @ZD04020
         MVC   OFFSET44(D1),OFFSET43 SET UP ONE DIGIT          @ZD04020
         SR    R7,R7               SET DIGIT COUNT             @ZD04020
         LA    R8,D9               OBTAIN '9' COMPRAND         @ZD04020
         CR    R6,R8               LESS THAN '10'?             @ZD04020
         BNH   COUNTSET            YES, INDICATE 1 DIGIT       @ZD04020
         LA    R7,D1(R7)           NO, INDICATE NOT 1 DIGIT    @ZD04020
         MVC   OFFSET44(D2),OFFSET42 SET UP TWO DIGITS         @ZD04020
         LA    R8,D99              OBTAIN '99' COMPRAND        @ZD04020
         CR    R6,R8               LESS THAN '100'?            @ZD04020
         BNH   COUNTSET            YES, INDICATE 2 DIGITS      @ZD04020
         LA    R7,D1(R7)           NO, INDICATE NOT 2 DIGITS   @ZD04020
         MVC   OFFSET44(D3),OFFSET41 SET UP THREE DIGITS       @ZD04020
         LA    R8,D999             OBTAIN '999' COMPRAND       @ZD04020
         CR    R6,R8               LESS THAN '1000'?           @ZD04020
         BNH   COUNTSET            YES, INDICATE 3 DIGITS      @ZD04020
         LA    R7,D1(R7)           NO, INDICATE 4 DIGITS       @ZD04020
         MVC   OFFSET44(D4),OFFSET40 SET UP FOUR DIGITS        @ZD04020
COUNTSET EQU   *                                               @ZD04020
         LA    SW2REG,D2(SW2REG)   ADJUST FREE SPACE POINTER   @ZD04020
         EX    R7,MOVECHAR         MOVE VALUE INTO BUFFER      @ZD04020
         LA    SW2REG,D2(R7,SW2REG) INDEX BUFFER PAST VALUE    @ZD04020
RETURN   EQU   *                                               @ZD04020
         BR    EXITREG             RETURN TO IN-LINE CODE      @ZD04020
         EJECT
************************************************************** @ZD04020
*                                                            * @ZD04020
* THIS SUBROUTINE IS ENTERED TO DETERMINE IF THE WORD        * @ZD04020
* 'REQUEST' IN THE CONTROL LINE SHOULD BE PLURALIZED OR NOT. * @ZD04020
*                                                            * @ZD04020
************************************************************** @ZD04020
         SPACE
TESTESS  EQU   *                                               @ZD04020
         TM    OFFSET36,BITTEST    A PREVIOUS INDICATOR SET?   @ZD04020
         BO    MOVEIN              YES, INSERT THE 'S'         @ZD04020
         OI    OFFSET36,BITTEST    NO, INDICATE FOR NEXT PASS  @ZD04020
         BR    R8                  RETURN TO CALLER            @ZD04020
MOVEIN   EQU   *                                               @ZD04020
         TM    OFFSET36,FOXFOX     'S' ALREADY INSERTED?       @ZD04020
         BNO   MOVEINA             NO, PROCEED FOR INSERTION   @ZD04020
         BR    R8                  YES, RETURN TO CALLER       @ZD04020
MOVEINA  EQU   *                                               @ZD04020
         L     R7,OFFSET36         OBTAIN CONTROL LINE POINTER @ZD04020
         LA    R7,D0(R7)           CLEAR HIGH ORDER BYTE       @ZD04020
         MVI   D0(R7),ESS          MOVE IN THE 'S' CHARACTER   @ZD04020
         MVI   OFFSET36,FOXFOX     INDICATE 'S' INSERTED       @ZD04020
         BR    R8                  RETURN TO CALLER            @ZD04020
         EJECT
*****************************************************************Y02893
*              NEW  DATA  LINE  SEGMENT                          Y02893
*                                                                Y02893
* THE FOLLOWING SEGMENT WILL CREATE A NEW DATA LINE AND SET      Y02893
* THE MLWTO CONTROL DATA IN THE CURRENT DATA LINE. THE LENGTH    Y02893
* OF THE TEXT AREA WILL BE CALCULATED AND STORED AND A POINTER   Y02893
* TO THE CURRENT DATA LINE WILL BE SAVED (MSGAD1).               Y02893
*                                                                Y02893
*****************************************************************Y02893
NEWDLSEG EQU   *                   CREATE NEW DATA LINE          Y02756
         ST    EXITREG,XAD         SAVE RETURN REGISTER          Y02756
         LR    WORK4,MSGREG        PTR TO LAST TEXT CHAR         Y02756
         SR    WORK4,MSGAD         CALCULATE LENGTH OF LINE      Y02756
         LTR   DATALIND,DATALIND   FIRST DATA LINE OF A          Y02756
*                                  CONNECTING MLWTO ?            Y02756
         BNZ   NEWDNOCN            NO, PROCESS REGULAR DATA LINE Y02756
         DROP  MSGREG              GET TO WPL COMMON             Y02756
         USING WPLRF,MSGAD         WPL MCS FIELDS                Y02756
         STH   WORK4,WPLLGH        STORE LENGTH OF LINE          Y02756
         OI    WPLMCSF1,X'00'      ZERO BYTE OF MCS FIELD        Y02756
         OI    WPLMCSF2,WPLMCSFJ   INDICATE MLWTO                Y02756
         DROP  MSGAD               GET TO WPL MLWTO EXTENSION    Y02756
         USING WPLRF,MSGREG        WPL LINE TYPE FIELD           Y02756
         OI    WPLLTF1,WPLLTFC     INDICATE DATA LINE            Y02756
         MVC   WPLLTF2(L2),ZEROS   ZERO SECOND BYTE OF LINE TYPE Y02756
*                                  AND AREA ID FIELD             Y02756
         LA    WORK4,WPLLINES      SAVE ADDR OF LINE INDICATOR   Y02756
         ST    WORK4,XASAVSTD+D12  SAVE IN XSA                   Y02756
         OI    WPLLINES,X'0A'      INDICATE TEN LINES IN MLWTO   Y02756
         LA    MSGREG,D4(MSGREG)   ADJUST FREE SPACE POINTER     Y02756
*                                  START OF DATA LINE            Y02756
         B     NEWDEXIT            BR TO RESET POINTERS          Y02756
NEWDNOCN EQU   *                   PROCESS REGULAR DATA LINE     Y02756
         DROP  MSGREG              GET TO WPL COMMON             Y02756
         USING WPLRF,MSGAD         WPL MCS FIELDS                Y02756
         STH   WORK4,WPLML0        STORE LENGTH OF LINE          Y02756
         OI    WPLMLLT1,WPLMLLTC   INDICATE DATA LINE            Y02756
         OI    WPLMLLT2,X'00'      ZERO SECOND BYTE              Y02756
         DROP  MSGAD               GET TO ADDITIONAL MLWTO LINE  Y02756
         USING WPLRF,MSGREG        ADDRESS LENGTH FIELD          Y02756
NEWDEXIT EQU   *                   RESET POINTER                 Y02756
         LR    MSGAD1,MSGAD        SET ADDR OF PREVIOUS LINE     Y02756
         LR    MSGAD,MSGREG        SET ADDR OF CURRENT LINE      Y02756
         LA    DATALIND,D1(DATALIND) INDICATE DATA LINE CREATED  Y02756
         L     EXITREG,XAD         RESTORE RETURN REGISTER       Y02756
         BR    EXITREG             RETURN TO CALLER              Y02756
         EJECT
*****************************************************************Y02893
*              NEW  MESSAGE  GROUP  SEGMENT                      Y02893
*                                                                Y02893
* THE FOLLOWING SEGMENT WILL CREATE A MESSAGE GROUP (ANOTHER     Y02893
* MULTI-LINE WHICH CONNECTS WITH THE FIRST MULTI-LINE). THE      Y02893
* ADDRESS OF THE FIRST AND LAST MLWTO WILL BE SAVED IN THE XSA.  Y02893
* THE FIRST 4 BYTES OF EACH MLWTO MESSAGE GROUP CONTAINS A       Y02893
* POINTER TO THE NEXT MESSAGE GROUP ON THE CHAIN OR ZERO.        Y02893
*                                                                Y02893
* INPUT:                                                         Y02893
*  XSA,PSA                                                       Y02893
*                                                                Y02893
* OUTPUT: NEW MLWTO MESSAGE GROUP CREATED.                       Y02893
*                                                                Y02893
*****************************************************************Y02893
NEWMGSEG EQU   *                   CREATE NEW MESSAGE GROUP      Y02893
         ST    WQEREG,XASAVLOC+D4  SAVE WQE POINTER              Y02756
         ST    SW1REG,XASAVLOC+D8  SAVE LINE IND REG             Y02756
         ST    WORK3,XASAVLOC+D12  SAVE WORK REG                 Y02756
         ST    LISTIND,XAP         SAVE LIST INDICATOR           Y02756
         ST    EXITREG,XAD         SAVE RETURN REGISTER          Y02756
         L     SW1REG,PSATOLD      GET ADDR OF TCB               Y02756
         L     WORK3,PSAAOLD       GET ADDR OF ASCB              Y02756
         SR    WORK2,WORK2         GETMAIN INTERFACE             Y02756
         LA    MSGREG,MGLTH        LENGTH OF GETMAIN             Y02756
         GETMAIN RU,LV=(MSGREG),SP=229,BRANCH=YES GET CORE       Y02756
         LR    MSGAD,WORK2         SAVE ADDR OF CORR             Y02756
         ST    WORK1,XASAVSTD+D16  SAVE WORK REG                 Y02756
         ST    SW2REG,XASAVSTD+D20 SAVE LABEL LINE PTR           Y02756
         LR    WORK1,MSGAD         SET TO LOCATION               Y02756
         LA    WORK2,MGLTH         SET LENGTH OF TO LOC          Y02756
         LR    SW1REG,MSGAD        SET FROM LOCATION             Y02756
         SR    SW2REG,SW2REG       CLEAR REFISTER                Y02756
         MVCL  WORK1,SW1REG        ZERO MSG AREA                 Y02756
         L     WORK1,XASAVSTD+D16  RESTORE WORK REG              Y02756
         L     SW2REG,XASAVSTD+D20 RESTORE LABEL LINE PTR        Y02756
         L     WQEREG,XASAVLOC+D4  RESTORE BLOCK POINTER         Y02756
         L     SW1REG,XASAVLOC+D8  RESTORE LINE IND REG          Y02756
         L     WORK3,XASAVLOC+D12  RESTORE WORK REG              Y02756
         L     LISTIND,XAP         RESTORE LIST INDICATOR        Y02756
         L     WORK4,XASAVSTD+D4   GET ADDR OF LAST MLWTO        Y02756
         ST    MSGAD,D0(WORK4)     STORE ADDR NEW MLWTO IN LINKPTY02756
         ST    MSGAD,XASAVSTD+D4   STORE ADDR NEW MLWTO IN LASTPTY02756
         SR    WORK4,WORK4         ZERO WORK REGISTER            Y02756
         ST    WORK4,D0(MSGAD)     ZERO NEW MLWTO LINK PTR       Y02756
         LA    MSGAD,D4(MSGAD)     START LINE AFTER LINK PTR     Y02756
         SR    DATALIND,DATALIND   IND CONNECTING DATA LINE      Y02756
         LR    MSGREG,MSGAD        SET START OF DATA LINE        Y02756
         L     EXITREG,XAD         RESTORE RETURN REGISTER       Y02756
         BR    EXITREG             RETURN TO CALLER              Y02756
         EJECT
*****************************************************************Y02893
*              FREE  LOCK  SEGMENT                               Y02893
*                                                                Y02893
* THE FOLLOWING SEGMENT ISSUES SETLOCKS TO RELEASE THE CMS AND   Y02893
* LOCAL LOCKS.                                                   Y02893
*                                                                Y02893
* INPUT:                                                         Y02893
*  XSA,PSA                                                       Y02893
*                                                                Y02893
* OUTPUT: - LOCAL AND CMS LOCKS RELEASED                         Y02893
*                                                                Y02893
*****************************************************************Y02893
FRELOCK  EQU   *                   FREE LOCK SEGMENT             Y02893
         ST    EXITREG,XAD         SAVE RETURN REGISTER          Y02756
         ST    SW3REG,XASAVLOC+D4  SAVE REGISTER 11              Y02756
         ST    WORK4,XASAVLOC+D8   SAVE REGISTER 12              Y02756
         ST    WORK5,XASAVLOC+D12  SAVE REGISTER 13              Y02756
FRECMS   SETLOCK RELEASE,TYPE=CMS,                               Y02751X
               RELATED=(ORE,IEE2903D(SETCMS)) RELEASE CMS LOCK   Y02751
FRELOCAL SETLOCK RELEASE,TYPE=LOCAL,                             Y02751X
               RELATED=(ORE,IEE2903D(SETLOCAL)) RELEASE LOCAL LOCY02751
         L     WORK5,XASAVLOC+D12  RESTORE REG 13                Y02756
         L     WORK4,XASAVLOC+D8   RESTORE REG 12                Y02756
         L     SW3REG,XASAVLOC+D4  RESTORE REG 11                Y02756
         L     EXITREG,XAD         RESTORE RETURN REG            Y02756
         BR    EXITREG             RETURN TO CALLER              Y02756
         EJECT
***************************************************************@ZD04020
* START OF MLWTO SEGMENT TO ISSUE MULTI-LINES                  @ZD04020
***************************************************************@ZD04020
         SPACE
*****************************************************************Y02893
*              MULTI-LINE  SEGMENT                               Y02893
*                                                                Y02893
* THE FOLLOWING SEGMENT WILL ISSUE MLWTOS FOR EACH MESSAGE GROUP Y02893
* CREATED. IF THERE ARE NO OUTSTANDING REQUEST,A NORMAL WTO WILL Y02893
* BE ISSUED INDICATING THAT THERE ARE NO OUTSTANDING REQUEST.    Y02893
* IF THE DISPLAY REQUEST WAS ISSUED BY A TSO TERMINAL, THE       Y02893
* OUTSTANDING REQUEST WILL BE ROUTED TO THE TSO TERMINAL VIA     Y02893
* TPUTS. WHEN ALL THE ASSOCIATED MESSAGES HAVE BEEN ISSUED,      Y02893
* ALL GOTTEN CORE WILL BE FREED AND CONTROL RETURNED TO THE      Y02893
* CALLER.                                                        Y02893
*                                                                Y02893
* INPUT:                                                         Y02893
*  XSA,PSA,CVT,WPL                                               Y02893
*        - MSGAD1 - POINTER TO THE PREVIOUS MESSAGE LINE         Y02893
*                                                                Y02893
* OUTPUT: - MLWTO OR TPUT ISSUED FOR ALL OUTSTANDING REQUESTS.   Y02893
*                                                                Y02893
*****************************************************************Y02893
MLWTOSEG EQU   *                   START OF MLWTO SEGMENT        Y02756
         L     SW3REG,XASAVSTD+D12 GET ADDR OF # OF LINES        Y02756
         LTR   SW1REG,SW1REG       CONTROL LINE CREATED ?        Y02756
         BNZ   MLWTNRMR            YES, MLWTO PROCESSING         Y02756
         BAL   EXITREG,WTONORMR    PROCESS NORMAL WTO            Y02893
*****************************************************************Y02893
* BRANCH TO WTO NORMAL SEGMENT TO ISSUE 'NO OUTSTANDING          Y02893
* REQUESTS' MESSAGE.                                             Y02893
*****************************************************************Y02893
         B     MLWTOEND            END WTO PROCESSING            Y02756
MLWTNRMR EQU   *                   PROCESS MULTI-LINE            Y02756
         STC   DATALIND,D0(SW3REG) STORE # OF LINES IN MSG AREA  Y02756
         LA    WORK4,MIDMSG        ONE DATA LINE EQ CONNECTOR LINY02756
         CR    DATALIND,WORK4      CONNECTING DATA LINE ?        Y02756
         BE    MLWTCONL            YES, PROCESS CONNECTOR        Y02756
         LR    MSGREG,MSGAD1       GET ADDR OF PREVIOUS LINE     Y02756
         OI    WPLMLLT1,WPLMLLTD   INDICATE DATA END LINE        Y02756
         B     MLWTLCRL            RELEASE ALL LOCKS             Y02756
MLWTCONL EQU   *                   PROCESS CONNECTING DATA LINE  Y02756
         LR    MSGREG,SW3REG       GET ADDR OF # LINES FIELD     Y02756
         LA    WORK4,L3            ADDR LINE TYPE LIELD          Y02756
         SR    MSGREG,WORK4        PT TO LINE TYPE FIELD         Y02756
         OI    WPLLTF1,WPLLTFD     INDICATE DATA END LINE        Y02756
MLWTLCRL EQU   *                   RELEASE LOCKS                 Y02756
         BAL   EXITREG,FRELOCK     RELEASE LOCAL AND CMS LOCKS   Y02756
*****************************************************************Y02756
* BRANCH TO FREE LOCK SEGMENT TO RELEASE THE LOCAL AND CMS LOCKS Y02893
*****************************************************************Y02893
         CLC   XAA(D2),ZEROS       TSO TERMINAL REQUEST ?        Y02756
         BNZ   MLWTTSOT            YES, PUT MSG TO TERMINAL      Y02756
         L     MSGAD1,XASAVSTD     GET ADDR OF FIRST MSG GROUP   Y02756
         LA    MSGAD,D4(MSGAD1)    POINT TO START OF MESSAGE     Y02756
         SR    WORK1,WORK1         CLEAR REG0 FOR CONSOLE ID     Y02756
         IC    WORK1,XASCID        SET CONSOLE ID IN REG         Y02756
         WTO   MF=(E,(MSGAD))      ISSUE WTO                     Y02756
         LR    WORK4,WORK2         SAVE MLID FOR CONNECTOR       Y02756
         SLL   WORK4,D8            MLID TO 3 RIGHT MOST BYTES    Y02756
MLWTNEXT EQU   *                   PREPARE TO FREE AREA          Y02756
         STH   RCODEREG,XASAVSTD+32 SAVE RCODE FROM MLWTO      @YM3468P
         L     MSGREG,D0(MSGAD1)   SAVE ADDR OF NEXT GROUP       Y02756
         LA    WORK5,MGLTH         LENGTH OF FREEMAIN            Y02756
         FREEMAIN RU,LV=(WORK5),A=(MSGAD1),SP=229 FREE AREA      Y02756
         LTR   MSGREG,MSGREG       LAST MESSAGE GROUP ?          Y02756
         BZ    MLWTOEND            END WTO PROCESSING            Y02756
         CLC   ZEROS(2),XASAVSTD+32 RCODE FROM MLWTO 0?        @YM3468P
         BNE   MLWTOEND            NO - TERMINATE              @YM3468P
         LR    MSGAD1,MSGREG       GET ADDR OF NEXT MSG GROUP    Y02756
         LA    MSGAD,D4(MSGAD1)    POINT TO START OF MESSAGE     Y02756
         LR    WORK1,WORK4         MOVE MLID TO REG 0            Y02756
         IC    WORK1,XASCID        SET CONSOLE ID IN REG         Y02756
         WTO   MF=(E,(MSGAD))      ISSUE WTO                     Y02756
         B     MLWTNEXT            GO ISSUE FREEMAIN             Y02756
MLWTTSOT EQU   *                   TERMINAL REQUEST              Y02756
         L     MSGAD1,XASAVSTD     GET ADDR OF FIRST MSG GRUOP   Y02756
         LA    MSGAD,D4(MSGAD1)    POINT TO START OF MESSAGE     Y02756
         LH    WORK4,D0(MSGAD)     GET LENGTH OF TEXT            Y02756
         LA    SW3REG,D4(MSGAD)    GET ADDR OF TEXT              Y02756
         AR    SW3REG,WORK4        POINT TO END OF TEXT          Y02756
MLWTTSOB EQU   *                   BYPASS LINK FIELD             Y02756
         LA    SW3REG,D3(SW3REG)   PT TO NO. OF LINES IN GROUP   Y02756
         LA    SW1REG,D1(SW3REG)   SAVE POINTER TO NEXT LINE     Y02756
         SR    WORK5,WORK5         CLRAR WORK REG                Y02756
         IC    WORK5,D0(SW3REG)    GET # OF LINES IN GROUP       Y02756
         LR    SW3REG,WORK5        SAVE # OF LINES IN GROUP      Y02756
MLWTTSOA EQU   *                   PREPARE TO ISSUE TPUT         Y02756
         LH    WORK1,XAA           GET TERMINAL ID               Y02756
         SLL   WORK1,HALFWORD      TERMINAL ID IN LEFT MOST BYTESY02756
         LA    WORK5,D4            SET TRUE LENGTH               Y02756
         SR    WORK4,WORK5         SUBTRACT 4 FROM LENGTH        Y02756
         OR    WORK1,WORK4         SET TERMINAL ID AND LENGTH    Y02756
         LA    WORK2,D4(MSGAD)     POINT TO START OF TEXT        Y02756
         TPUT  (WORK2),(WORK1),R   PUT MESSAGE TO TERMINAL       Y02756
         BCTR  SW3REG,0            SUBTRACT ONE FROM # OF LINES  Y02756
         LTR   SW3REG,SW3REG       ANY MORE LINES ?              Y02756
         BZ    MLWTTSOD            PREPARE TO FREE AREA          Y02756
         LR    MSGAD,SW1REG        GET ADDR OF NEXT LINE         Y02756
         LH    WORK4,D0(SW1REG)    GET LENGTH OF NEXT LINE       Y02756
         AR    SW1REG,WORK4        RESET POINTER TO NEXT LINE    Y02756
         B     MLWTTSOA            PREPARE TO ISSUE TPUT         Y02756
MLWTTSOD EQU   *                   PREPARE TO FREE AREA          Y02756
         L     MSGREG,D0(MSGAD1)   SAVE ADDR OF NEXT GROUP       Y02756
         LA    WORK5,MGLTH         LENGTH OF FREEMAIN            Y02756
         FREEMAIN RU,LV=(WORK5),A=(MSGAD1),SP=229 FREE AREA      Y02756
         LTR   MSGREG,MSGREG       LAST MESSAGE GROUP ?          Y02756
         BZ    MLWTOEND            END WTO PROCESSING            Y02756
         LR    MSGAD1,MSGREG       GET ADDR OF NEXT GROUP        Y02756
         LA    MSGAD,D4(MSGAD1)    POINT TO START OF MSG         Y02756
         LH    WORK4,D0(MSGAD)     GET LENGTH OF TEXT            Y02756
         LA    SW3REG,D4(MSGAD)    GET ADDR OF TEXT              Y02756
         AR    SW3REG,WORK4        POINT TO END OF TEXT          Y02756
         LA    WORK5,D4            ALLOW FOR CONTROL DATA        Y02756
         SR    SW3REG,WORK5        TRUE END OF TEXT              Y02756
         B     MLWTTSOB            PROCESS NEXT MSG GROUP        Y02756
MLWTOEND EQU   *                   END WTO PROCESSING            Y02756
         L     EXITREG,XASAVLOC    RESTORE RETURN REGISTER       Y02756
         BR    EXITREG             RETURN TO CALLER              Y02756
         EJECT
*****************************************************************Y02893
*              WTO  NORMAL  SEGMENT                              Y02893
*                                                                Y02893
* THE FOLLOWING SEGMENT WILL PROCESS A NORMAL WTO INDICATING THATY02893
* THERE ARE NO OUTSTANDING REQUEST. ALL LOCKS OBTAINED WILL BE   Y02893
* FREED. IF THE REQUEST IS FROM A TSO TERMINAL, A TPUT WILL BE   Y02893
* ISSUED TO PUT THE MESSAGE TO THE TERMINAL.                     Y02893
*                                                                Y02893
* INPUT:                                                         Y02893
*  XSA,WPL                                                       Y02893
*                                                                Y02893
* OUTPUT: MESSAGE -IEE111I NO OUTSTANDING REQUESTS -             Y02893
*                                                                Y02893
*****************************************************************Y02893
WTONORMR EQU   *                   PROCESS NORMAL WTO            Y02756
         ST    EXITREG,XAD         SAVE RETURN REGISTER          Y02756
         BAL   EXITREG,FRELOCK     RELEASE LOCAL AND CMS LOCKS   Y02756
*****************************************************************Y02756
* BRANCH TO FREE LOCL SEGMENT TO RELEASE THE LOCAL AND CMS LOCKS Y02756
*****************************************************************Y02756
         GETMAIN RU,LV=40,SP=0     GET CORE FOR MESSAGE          Y02756
         LR    MSGAD,WORK2         POINT TO START OF AREA        Y02756
         MVC   D0(LN,MSGAD),NOREQMSG MOVE MESSAGE TO AREA        Y02756
         CLC   XAA(D2),ZEROS       TSO TERMINAL REQUEST ?        Y02756
         BNZ   WTONTSOT            YES,PUT MESSAGE TO TERMINAL   Y02756
         SR    WORK1,WORK1         CLEAR REG0 FOR CONSOLE ID     Y02756
         IC    WORK1,XAU           SET CONSOLE ID IN REG 0       Y02756
         WTO   MF=(E,(MSGAD))      ISSUE WTO                     Y02756
         B     WTONEXIT            END NORMAL WTO                Y02756
WTONTSOT EQU   *                   TERMINAL REQUEST              Y02756
         LH    MSGREG,D0(MSGAD)    GET LENGTH OF MESSAGE         Y02756
         LA    WORK2,D4            DECREASE LENGTH OF MESSAGE BY Y02756
         SR    MSGREG,WORK2        FOUR FOR WTO HEADER           Y02756
         LR    WORK1,MSGREG        SET LENGTH IN PARM REG        Y02756
         LA    WORK2,D4(MSGAD)     GET ADDR OF MSG TEXT          Y02756
         LH    MSGREG,XAA          GET TERMINAL ID               Y02756
         SLL   MSGREG,HALFWORD     TERM ID IN LEFT MOST BYTES    Y02756
         OR    WORK1,MSGREG        SET ID IN PARM REG            Y02756
         TPUT  (WORK2),(WORK1),R   ISSUE TPUT                    Y02756
WTONEXIT EQU   *                   PREPARE TO FREE CORE          Y02756
         LR    WORK2,MSGAD         GET ADDR OF CORE              Y02756
         FREEMAIN RU,LV=40,A=(WORK2),SP=0 FREE CORE              Y02756
         L     EXITREG,XASAVLOC    RESTORE RETURN REG            Y02756
         BR    EXITREG             RETURN TO CALLER              Y02756
         EJECT
**********************************************************************
D2       EQU   2
ZEROS    DC    X'0000'
COMMA    EQU   C','                COMMA CHARACTER               Y02756
LISTOP   DC    C',LIST '           LIST OPERAND                  Y02756
LISTCH   DC    C',L '              LIST OPERAND                  Y02756
BLANK    EQU   C' '                BLANK CHARACTER               Y02756
ERRTN    DC    V(IEE0503D)         ERROR ROUTINE                 Y02756
         SPACE 5
NOROOMID DC    H'70'                                             Y02756
NOROOMUN DC    H'68'                                           @ZD04020
NOROOMIR DC    H'69'               IF 69 BYTES USED IN BUFFER,   Y02893
*                                  THERE IS NO SPACE TO ADD      Y02893
*                                  ANOTHER UNIT NAME             Y02893
RPIDMVTX MVC   D0(0,MSGREG),WQETXT+D4 MOVE WTO TEXT              Y02756
         DS    0F
ZERO     EQU   *
ZEROFOX DC    X'0000FFFF'
BLANKS   DC    3X'40'                                            Y02756
*        THE FOLLOWING TWO LINES MUST REMAIN TOGETHER            Y02893
MSG1CODD DC    C'IEE110I '
MSG1CODE DC    C'PENDING REQUEST ' HEADER TEXT                 @ZD04020
HDLTH    EQU   *-MSG1CODE          LENGTH OF MESSAGE             Y02756
SUMMARY  DC    C'SUMMARY:'         IN LABEL LINE               @ZD04020
REPLYID  DC    C'REPLY ID'                                     @ZD04020
RDYUNITS DC    C'READY UNITS:'
INTREQ   DC    C'INTERVENTIONS REQUIRED:'  MESSAGE HEADER      @ZD04020
NOREQMSG WTO   'IEE111I NO OUTSTANDING REQUESTS',MF=L,DESC=(5),        *
               MCSFLAG=(REG0,RESP)                                 XMCS
LN       EQU   *-NOREQMSG               TOTAL MSG BUFFER LENGTH
MOVECHAR MVC   D0(D0,SW2REG),OFFSET44                          @ZD04020
TABLE    EQU   *-240                                           @ZD04020
         DC    C'0123456789ABCDEF'                             @ZD04020
         DS    0F
PATCHAR  DC    150X'40'            PATCH AREA                    Y02756
         EJECT
         IHAPSA DSECT=YES
         EJECT
CVT      DSECT
         CVT LIST=YES
UCB      DSECT
         IEFUCBOB LIST=YES
         EJECT
DRUCM    DSECT
         IEECUCM
         EJECT
         IHAORE                                                  YM2304
         EJECT
         IEZWPL DSECT=YES                                        Y02756
         EJECT
         IHAWQE DSECT=YES                                        YM2304
         EJECT
XSAMAP   DSECT
         IEEXSA
OFFSET36 EQU   XASAVSTD+D36        WORKING STORAGE OFFSET 36   @ZD04020
OFFSET40 EQU   XASAVSTD+D40        WORKING STORAGE OFFSET 40   @ZD04020
OFFSET41 EQU   XASAVSTD+D41        WORKING STORAGE OFFSET 41   @ZD04020
OFFSET42 EQU   XASAVSTD+D42        WORKING STORAGE OFFSET 42   @ZD04020
OFFSET43 EQU   XASAVSTD+D43        WORKING STORAGE OFFSET 43   @ZD04020
OFFSET44 EQU   XASAVSTD+D44        WORKING STORAGE OFFSET 44   @ZD04020
OFFSET45 EQU   XASAVSTD+D45        WORKING STORAGE OFFSET 45   @ZD04020
OFFSET47 EQU   XASAVSTD+D47        WORKING STORAGE OFFSET 47   @ZD04020
         END
