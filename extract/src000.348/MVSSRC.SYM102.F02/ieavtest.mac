TEST     TITLE 'IEAVTEST - IGC119 - TEST AUTHORIZATION ROUTINE'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVTEST
*
*01*  DESCRIPTIVE-NAME = TESTAUTH
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = OSVS2 REL 2
*
*01*  FUNCTION = TESTS AN SVC'S CALLER FOR PROPER AUTHORIZATION. ANY
*     COMBINATION OF 3 TYPES OF AUTHORIZATIONS MAY BE REQUESTED BY THE
*     SVC.  THESE ARE: 1. PSW STATE; 2. PSW KEY; 3. APF.
*     PASSES AN INDICATION TO THE SVC AS TO WHETHER HIS CALLER WAS
*     AUTHORIZED OR NOT.
*
*02*     OPERATION = 1. CHECK OR IGNORE STATE CHECK.
*                    2. AUTHORIZED RETURN WITH ZERO
*                    3. CHECK OR IGNORE KEY CHECK.
*                    4. AUTHORIZED RETURN WITH ZERO
*                    5. CHECK OR IGNORE APF CHECK.
*                    6. AUTHORIZED
*                    7. OTHER RETURN WITH 4.
*
*01*   NOTES = TESTAUTH DOES NO STORES. TESTAUTH IS VERY SENSITIVE TO
*      PERFORMANCE AND MUST BE KEPT TO A BARE MINIMUM. IT CANNOT USE
*      REGISTERS OTHER THAN R14 THROUGH R3. IT RUNS IN ANY KEY. IT IS
*      CALLED BY THE SVC FLIH. ITS MOST POPULAR PATH IS A RETURN CODE 0
*      FROM EITHER THE STATE OR KEY CHECK. 13 AND 15 INSTURCTIONS
*      RESPECTIVELY.
*
*02*     DEPENDENCIES = NONE
*
*03*        CHARACTER-CODE-DEPENDENCIES = NONE
*
*02*     RESTRICTIONS = NONE
*
*02*     REGISTER-CONVENTIONS = SEE INPUT AND REGISTER EQUATES.
*
*02*     PATCH-LABEL = NONE
*
*01*  MODULE-TYPE = TYPE 1 SVC ROUTINE
*
*02*     PROCESSOR = ASSEMBLER
*
*02*     MODULE-SIZE = 300 BYTES
*
*02*     ATTRIBUTES = NUCLEUS, ZERO PROTECT KEY(CAN RUN ANY
*        KEY), REENTERABLE, SUPERVISOR MODE, LOCAL LOCK
*
*01*  ENTRY-POINT = IGC119 - SVC ENTRY;
*                   IEAVTEST - BRANCH ENTRY
*
*02*     PURPOSE = SEE FUNCTION
*
*02*     LINKAGE = VIA SVC 119 OR BRANCH; SEE INPUT
*
*02*     INPUT =
*    IGC119 (SVC ENTRY)
*
*    PSW - KEY0, SUPERVISOR STATE, DISABLED
*    R0 - AUTH. CODE, IF SUPPLIED; OTHERWISE R0 IS NEGATIVE
*    R1 - FUNCTION CODE
*    R3 - @ CVT
*    R4 - @ TCB
*    R5 - @ RB
*    R6 - ENTRY POINT
*    R14 - RETURN @
*    R2,R7-R13,R15 - IRRELEVANT
*
*    IEAVTEST (BRANCH ENTRY)
*
*    PSW  - KEY0, SUPERVISOR STATE, DISABLED
*    R0 - AUTHORIZATION CODE, IF SUPPLIED; OTHERWISE R0 IS NEGATIVE
*    R1 - FUNCTION CODE
*    R4 - TCB @ (IF 0, THE CURRENT TCB @ WILL BE USED)
*    R14 - RETURN @
*    R15 - ENTRY POINT
*    R2,R3,R5-R13 - IRRELEVANT
*
*02*     OUTPUT = NONE EXCEPT RETURN CODE - SEE EXIT, NORMAL.
*
*01*  EXIT-NORMAL = RC 0 - AUTHORIZED;
*                   RC 4 - NOT AUTHORIZED
*
*02*     OUTPUT =
*
*    IGC119 (SVC ENTRY)
*
*    PSW - KEY0, SUPERVISOR STATE, DISABLED
*    R0-R13 - UNPREDICTABLE
*    R14 - UNCHANGED
*    R15 - RETURN CODE
*    .         0 - TASK AUTHORIZED
*    .         4 - TASK NOT AUTHORIZED
*
*    IEAVTEST (BRANCH ENTRY)
*
*    PSW - KEY0, SUPERVISOR STATE, DISABLED
*    R0-R14 - UNCHANGED
*    R15 - RETURN CODE
*    .         0 - TASK AUTHORIZED
*    .         4 - TASK NOT AUTHORIZED
*
*
*01*  EXIT-ERROR = ABEND CODE 177 - INVALID PARM LIST
*
*02*     CONDITIONS = ONE OF FOLLOWING ERROR CONDITIONS OCCURED
*                   - RBLEVEL=2 SPECIFIED BUT TOP RB IS LAST RB
*                   - FUNCTION CODE GT OR EQ TO 256
*                     OR NOT IN TABLE RANGE
*                   - AUTHORIZATION CODE GT OR EQ TO 256
*                     OR NOT IN TABLE RANGE
*
*02*     OUTPUT =
*
*02*     RETURN-CODES = IF AUTHORIZED, THE RETURN CODE IS ZERO (0) IN
*        REG 15, IF NOT THE RETURN CODE IS 4
*
*01*  EXTERNAL-REFERENCES = ROUTINES - ABEND;
*                           DATA AREAS - IEAVAUTH - APF BIT MATRIX
*
*02*     ROUTINES = ABEND
*
*02*     DATA-AREAS = APF BIT MATRIX - IEAVAUTH
*        USED TO TEST FOR SPECIFIC AUTHORIZATION
*        POINTER LOCATED AT SYMBOLIC LOCATIONIEAVAUTH
*        USED. FOR DATA SETS, INDICATE WHETHER CREATED/DELETED,
*        OPENED/CLOSED, POSITIONED/READ/UPDATED/ADDED TO.;
*
*02*     CONTROL-BLOCKS = TCB,JSCB,PSA,RB.
*
*01*  TABLES = NONE
*
*01*  MACROS = ABEND
*
*02*    SERIALIZATION = RES: COMMENTS,
*       COMMENTS: NAMES OF LOCKS AND ENQ RESOURCES OBTAINED BY
*       THIS MODULE;
*
*01*  CHANGE-ACTIVITY = Y02752 FOR OSVS2 RELEASE 2
*
*01*  MESSAGES = NONE
*
*01*  ABEND-CODES = 177 FOR INVALID PARM LIST.
*
**** END OF SPECIFICATIONS ***/
*
         EJECT
IEAVTST1 CSECT
         DC    CL8'IEAVTEST'  MODULE NAME
IGC119   CSECT
         ENTRY IEAVTEST       BRANCH ENTRY ADDRESS
         BALR  R15,ZERO       SETUP BASE ADDRESS.
IEAVTEST EQU   *              BRANCH E.P.
         USING IEAVTEST,R15   BASE REGISTER FOR TESTAUTH
         USING FLC,0          LOW CORE ADDRESSABILITY
         SLA   R1,ELEVEN      SHIFT OUT THE RESERVED BITS AND TEST
         BC    OVERFLOW+NEGATIVE,INVALID BRANCH IF ANY RESERVED BIT=1
         ALR   R1,R1          SHIFT OUT THE POSITIVE SIGN BIT
         L     R3,PSATOLD     GET THE CURRENT TCB ADDRESS
         L     R2,TCBRBP-TCB(R3)    GET THE 1ST RB OFF CURRENT TCB
         ALR   R1,R1          TEST THE FIRST FLAG BIT(RBLEVEL)
         BC    NOCARRY,SKIP1  BIT=0(RBLEVEL=1 OR APF CHECK ONLY)
         TM    RBSTAB2-RBSECT(R2),RBTCBNXT  Q. ONE R.B.
         BO    INVALID                      A. YES. MUST HAVE TWO.
         L     R2,RBLINK-RBSECT(R2)  GET THE 2ND RB OFF THE CURRENT TCB
SKIP1    EQU   *              R2 CONTAINS CORRECT RB LEVEL
         ALR   R1,R1          TEST THE 'STATE' FLAG
         BC    NOCARRY,SKIP2  BIT=0(STATE=NO)
         TM    RBOPSW+XMWP-RBSECT(R2),PBIT Q.PSW IN SUPERVISOR STATE
         BZ    RET0           A. YES. RETURN TO CALLER WITH R.C. OF 0
SKIP2    EQU   *              'KEY' LOGIC IS NEXT
         ALR   R1,R1          TEST THE 'KEY' FLAG
         BC    NOCARRY,SKIP3  BIT=0(KEY=NO)
         CLI   RBOPSWKY-RBSECT(R2),KEY8  Q.IS KEY LESS THAN 8
         BL    RET0           A. YES. RETURN TO CALLER WITH R.C. OF 0.
SKIP3    EQU   *              'APF' LOGIC IS NEXT
         ALR   R1,R1          TEST THE 'APF' FLAG
         BC    CARRY,RET4     BIT=1(APF NOT REQUESTED)
         L     R2,TCBJSTCB-TCB(R3)  GET THE JOB STEP TCB.
         L     R2,TCBJSCB-TCB(R2) GET THE JOB STEP CONTROL BLOCK
         SRL   R1,SIXTEEN     RIGHT JUSIFY THE FCTN CODE.
         CL    R1,F256        Q. FCTN GT 255
         BNL   INVALID        A. YES. ABEND CALLER.
         LTR   R0,R0          Q. WAS 'AUTH' SPECIFIED.
         BNL   AUTHCK         A. YES. CHECK VALUE
         LA    R0,AUTHEQ1     SETUP AUTH=1
         LTR   R2,R2          Q. IS THERE A JSCB
         BZ    RET0           A. NO. HAS TO BE AUTHORIZED.
         TM    JSCBOPTS-IEZJSCB(R2),JSCBAUTH  Q. IS JOB STEP AUTHORIZED
         BO    AUTHCK         A. YES.
         LA    R0,AUTHEQ0     SETUP AUTH=0
AUTHCK   EQU   *              CHECK FOR VALID CODE.
         CL    R0,F256        Q. AUTH GT 255
         BNL   INVALID        A. YES. ABEND CALLER
         LR    R2,R1          SAVE THE FCTN CODE
         LR    R1,R0          SAVE THE AUTH CODE
         L     R3,VAUTH       GET THE AUTHORIZATION MATRIX.
* NOTE: THE IBM SUPPLIED MATRIX IS DC X'0202B0'
         EX    R1,CLI0        Q. AUTH CODE WITHIN MATRIX RANGE
         BNH   INVALID        A. NO. ABEND. INVALID PARMS.
         EX    R2,CLI1        Q. FCTN CODE WITHIN MATRIX RANGE
         BNH   INVALID        A. NO. ABEND. INVALID PARMS.
         SR    R0,R0          ZERO FOR INSERT
         IC    R0,MTRXAUTH-MTRX(R3) GET THE AUTH RANGE
         MR    R0R1,R0        AUTH VALUE X AUTH RANGE = R1
         AR    R1,R2          R1 + FCTN CODE = R1 = BIT DISPLACEMENT
         LR    R2,R1          SAVE THE RESULT
         SRL   R1,THREE       BIT DISPLACEMENT / 8 = BYTE DISPLACEMENT
         ALR   R1,R3          BYTE DISPLACEMENT + MATRIX ADDRESS
         LA    R1,TWO(R1)     + TWO = TARGET BYTE.
         N     R2,HIGH29      RESULT IS BIT DISPLACEMENT IN BYTE
         IC    R2,TABLE(R2)   GET THE PROPER MASK FOR TM INSTRUCTION
         EX    R2,TM          TEST  PROPER BIT WITHIN THE PROPER BYTE
         BO    RET0           BIT=1 THE CALLER IS AUTHORIZED.
RET4     EQU   *              CALLER IS NOT AUTHORIZED.
         LA    R15,RC4        RETURN CODE OF 4
         BR    R14            RETURN
RET0     EQU   *              CALLER IS AUTHORIZED.
         LA    R15,RC0        RETURN CODE OF 0
         BR    R14            RETURN
INVALID  EQU   *              INVALID PARAMETERS FROM CALLER
         L     R1,CODE177     ABEND CODE OF 177
         ABEND (1),DUMP,,SYSTEM  ABEND CALLER
         EJECT
R0       EQU   0              REGISTER 0
R1       EQU   1              REGISTER 1
R2       EQU   2              REGISTER 2
R3       EQU   3              REGISTER 3
R14      EQU   14             REGISTER 14
R15      EQU   15             REGISTER 15
R0R1     EQU   0              REGISTERS 0 AND 1 FOR MULTIPLY INSTR
         SPACE 3
NOCARRY  EQU   X'C'           NOCARRY CONDITION CODE
CARRY    EQU   X'3'           CARRY CONDITION CODE
OVERFLOW EQU   X'1'           OVERFLOW CONDITION CODE
NEGATIVE EQU   X'4'           NEGITIVE CONDITION CODE
         SPACE 3
RC0      EQU   0              RETURN CODE OF 0
RC4      EQU   4              RETURN CODE OF 4
ZERO     EQU   0              0
ONE      EQU   1              1
TWO      EQU   2              2
THREE    EQU   3              3
FOUR     EQU   4              4
ELEVEN   EQU   11             11
SIXTEEN  EQU   16             16
         SPACE 3
AUTHEQ0  EQU   0              AUTH=0
AUTHEQ1  EQU   1              AUTH=1
         SPACE 3
TABLE    DC    X'8040201008040201'  BIT MASK TABLE
F256     DC    F'256'         MAX MATRIX DIMENSION
CODE177  DC    X'00000177'    ABEND CODE 177
HIGH29   DC    X'00000007'    MASK TO ZERO HIGH 29 BITS IN A REG
VAUTH    DC    V(IEAVAUTH)    ADDRESS OF APF MATRIX
CLI0     CLI   MTRXAUTH-MTRX(R3),ZERO USED WITH EX INTRUCTION
CLI1     CLI   MTRXFCTN-MTRX(R3),ZERO USED WITH EX INSTRUCTION
TM       TM    ZERO(R1),ZERO  USED WITH EX INSTRUCTION
         EJECT
MTRX     DSECT
MTRXAUTH DS    X              'AUTH' RANGE
MTRXFCTN DS    X              'FCTN' RANGE
MTRXSTRG DS    B              VARIABLE LENGTH BIT STRING
         EJECT
         IHARB
XMWP     EQU   1              XMWP IS IN BYTE 1 OF RBOPSW
RBOPSWKY EQU   RBOPSW+1       KEY IS IN BYTE 1 OF RBOPSW
PBIT     EQU   B'0001'        PBIT IS LAST BIT IN XMWP
KEY8     EQU   X'80'          KEY CHECK AGAINST RBOPSW'S KEY
         EJECT
         IKJTCB
         EJECT
         IEZJSCB
         EJECT
         IHAPSA
         END   IGC119
