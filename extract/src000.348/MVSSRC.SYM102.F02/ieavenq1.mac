         TITLE 'IEAVENQ1 - ENQ/DEQ/RESERVE'
IGC048   CSECT
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVENQ1
*
*02*     CSECT-NAME = IGC048
*
*01*  DESCRIPTIVE-NAME = ENQ/DEQ/RESERVE
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = 0
*
*01*  FUNCTION
*
*             THE ENQ/DEQ ROUTINE PERMITS THE SERIALIZATION OF ONE
*             OR MORE NAMED RESOURCES. AS A MINOR FUNCTION, THIS
*             ROUTINE MAY ALSO ESTABLISH A 'MUST COMPLETE' STATUS
*             AFFECTING THE DISPATCHABILITY OF VARIOUS TASKS IN
*             THE SYSTEM. THIS LATTER SERVICE IS AVAILABLE ONLY
*             TO PROGRAMS WHICH RUN WITH A CONTROL PROGRAM KEY
*             (I.E. KEY 0-7), SUPERVISOR STATE, OR AUTHORIZED
*             (VIA APF).
*
*             THE SHARED DASD FUNCTION IS SUPPORTED THROUGH THE
*             USE OF RESERVE/DEQ.
*
*             THE ENQ RESOURCE MANAGER (MANUAL PURGE) PERFORMS
*             CLEAN-UP FUNCTION FOR END OF TASK, ADDRESS SPACE
*             ABEND, AND OUT OF CORE ABEND.
*
*02*     OPERATION = SEE METHOD OF OPERATION DIAGRAMS OR
*                    FLOWCHARTS
*
*01*   NOTES = THE HEAD OF THE ENQ/DEQ RESOURCE QUEUE IS POINTED
*              BY CVTFQCB AND ALL MAJOR QCBS, MINOR QCBS, AND QELS
*              ARE FORWARD AND BACKWARD CHAINED.
*
*02*     DEPENDENCIES = THIS MODULE DOES NOT CONTAIN ANY
*                       HARDWARE DEPENDENCIES.
*
*                       IN ORDER TO REDUCE SQA (SUBPOOL 245)   @Z30BNVD
*                       FRAGMENTATION, NIP OBTAINS AND         @Z30BNVD
*                       INITIALIZES A BLOCK OF STORAGE FOR     @Z30BNVD
*                       ENQ/DEQ/RESERVE RESOURCE CONTROL       @Z30BNVD
*                       BLOCKS. ADDITIONALLY, NIP WILL         @Z30BNVD
*                       UPDATE THE RESPECTIVE QUEUE LIMIT      @Z30BNVD
*                       COUNTS WITHIN THIS MODULE TO REFLECT   @Z30BNVD
*                       THE NUMBER OF ELEMENTS IT HAS PLACED   @Z30BNVD
*                       ON THESE QUEUES. THE LIMIT COUNTS      @Z30BNVD
*                       ARE LOCATED AT ENTRY LABEL IEAVENQQ    @Z30BNVD
*                       AND ARE A TOTAL OF 6 WORDS. NIP WILL   @Z30BNVD
*                       ALSO INITIALIZE THE FOLLOWING DATA     @Z30BNVD
*                       WITHIN THE ENQ/DEQ/RESERVE GLOBAL      @Z30BNVD
*                       SAVE AREA (GS):                        @Z30BNVD
*                          - AT X'80', 6 WORDS DEFINING THE    @Z30BNVD
*                            RESPECTIVE QUEUE ELEMENT          @Z30BNVD
*                            COUNTS.                           @Z30BNVD
*                          - AT X'98', 6 WORDS DEFINING THE    @Z30BNVD
*                            POINTERS TO THE RESPECTIVE        @Z30BNVD
*                            QUEUE HEADS                       @Z30BNVD
*                          - AT X'B0', 1 WORD CONTAINING       @Z30BNVD
*                            THE BEGINNING ADDRESS OF THE      @Z30BNVD
*                            BLOCK                             @Z30BNVD
*                          - AT X'B4', 1 WORD CONTAINING       @Z30BNVD
*                            THE ENDING ADDRESS OF THE         @Z30BNVD
*                            BLOCK                             @Z30BNVD
*03*        CHARACTER-CODE-DEPENDENCIES = THIS MODULE IS NOT
*                                         CHARACTER CODE
*
*02*     RESTRICTIONS = NONE
*
*02*     REGISTER-CONVENTIONS = REFER TO 'REGISTER EQUATES'
*                               PORTION OF THIS MODULE.
*
*02*     PATCH-LABEL = NONE WITHIN THIS MODULE. THE COMMON
*                      NUCLEUS MAINTENANCE AREA SHOULD BE
*                      USED (IEAPATCH).
*
*01*  MODULE-TYPE = MODULE
*
*02*     PROCESSOR = ASSEMBLER
*
*02*     MODULE-SIZE = APPROXIMATELY 7500 BYTES
*
*02*     ATTRIBUTES = TYPE 2 SVC, KEY 0,
*                     SUPERVISOR STATE, ENABLED
*
*01*  ENTRY-POINT = IGC048 (DEQ)
*
*02*     PURPOSE = THIS IS THE OTHER HALF OF THE ENQ/RESERVE
*                  FUNCTION. IT RELINQUISHES THE SERIALIZATION
*                  OBTAINED VIA ENQ/RESERVE.
*
*02*     LINKAGE = VIA SVC INTERRUPT HANDLER (TYPE 2 SVC)
*
*02*     INPUT = REGISTERS
*                  0    - IRRELEVANT
*                  1    - ADDRESS OF VARIABLE LENGTH
*                         PARAMETER ELEMENT LIST
*                  2    - IRRELEVANT
*                  3    - ADDRESS OF CVT
*                  4    - ADDRESS OF CURRENT TCB
*                  5    - ADDRESS OF CURRENT RB
*                  6    - ENTRY POINT ADDRESS
*                  7    - ADDRESS OF CURRENT ASCB
*                  8-13 - IRRELEVANT
*                  14   - EXIT ADDRESS
*                  15   - IRRELEVANT
*
*                PARAMETER ELEMENT LIST
*
*                **********************************************
*             -4 * TCB POINTER OR DOES NOT EXIST              *
*                **********************************************
*             +0 * FLAGS1 * MINOR LENGTH * FLAGS2 * RET. CODE *
*                **********************************************
*             +4 * ADDRESS OF MAJOR NAME                      *
*                **********************************************
*             +8 * ADDRESS OF MINOR NAME                      *
*                **********************************************
*            +12 * ADDRESS OF UCB ADDRESS OR DOES NOT EXIST   *
*                **********************************************
*
*                NOTE: NON-RESERVE ELEMENTS ARE 3 WORDS IN
*                      LENGTH, WHILE RESERVE ELEMENTS ARE
*                      4 WORDS IN LENGTH. IN A MULTIPLE
*                      ELEMENT PARAMETER LIST, ELEMENTS ARE
*                      CONTIGUOUS STARTING AT OFFSET +0
*
*                      FLAGS1   BIT 0 - END OF LIST
*                               BIT 1 - IGNORE FOLLOWING BITS
*                               BIT 2 - RESERVED
*                               BIT 3 - IRRELEVANT (OUTPUT FROM ENQ)
*                               BIT 4 - RESERVED
*                               BIT 5 - RESERVED
*                               BIT 6 - GENERIC=YES SPECIFIED
*                               BIT 7 - TCB= SPECIFIED
*
*                      FLAGS2   BIT 0 - USED BY ENQ/RESERVE ONLY
*                               BIT 1 - SEE NOTE A
*                               BIT 2 - OBSOLETE PARAMETER
*                                       (RMC=SYSTEM)
*                               BIT 3 - RMC=STEP SPECIFIED
*                               BIT 4 - SEE NOTE A
*                               BIT 5 - SEE NOTE B
*                               BIT 6 - SEE NOTE B
*                               BIT 7 - SEE NOTE B
*
*                      NOTE A   00 - SCOPE OF STEP
*                               01 - UCB= SPECIFIED
*                                    (SYSTEMS REQUIRED)
*                               10 - SCOPE OF SYSTEM
*                               11 - SCOPE OF SYSTEMS
*
*                      NOTE B   000 - RET=NONE SPECIFIED
*                               001 - RET=HAVE SPECIFIED
*                               010 - USED BY ENQ/RESERVED ONLY
*                               011 - USED BY ENQ/RESERVED ONLY
*                               100 - USED BY ENQ/RESERVED ONLY
*                               101 - RESERVED
*                               110 - RESERVED
*                               111 - USED BY ENQ/RESERVE ONLY
*
*02*     OUTPUT = ELEMENT(S) REMOVED FROM RESOURCE QUEUE AND
*                 MUST COMPLETE STATE REMOVED WHEN REQUESTED.
*
*                 REGISTER 0-1  - UNPREDICTABLE
*                          2-13 - SAME AS AT ENTRY
*                                 (RESTORED WHEN REDISPATCHED)
*                          14   - UNPREDICTABLE
*                          15   - ZERO (ALL RETURN CODES ZERO)
*                                 OR
*                                 PARAMETER LIST POINTER (AT
*                                 LEAST ONE NON-ZERO RETURN CODE)
*
*                          EACH RETURN CODE IS PLACED IN
*                          THE RETURN CODE FIELD OF EACH
*                          PARAMETER LIST ELEMENT, OFFSET +3
*                          INTO EACH ELEMENT (SEE DIAGRAM)
*
*                          RETURN CODES POSSIBLE FOR
*
*                             RET=NONE   N/A
*                             RET=HAVE   0 - SUCCESSFUL RELEASE
*                                        4 - NOT RELEASED,
*                                            RESOURCE IS
*                                            BEING WAITED FOR
*                                        8 - NOT FOUND
*                             GENERIC &
*                             RET=HAVE   0 - RELEASED ALL
*                                        4 - N/A
*                                        8 - NONE FOUND
*
*02*     REGISTERS-SAVED = NONE (SAVED BY SVC INTERRUPT HANDLER)
*
*02*     REGISTER-USAGE = REFER TO 'REGISTER EQUATES' PORTION
*                         OF THIS MODULE
*
*02*     REGISTERS-RESTORED = NONE (RESTORED AT EXIT TIME)
*
*01*  ENTRY-POINT = IGC056 (ENQ)
*
*02*     PURPOSE = PROVIDE SERIALIZATION OF A RESOURCE THROUGH
*                  THE PROPER USE OF PRE-SELECTED NAMES. BASICAL-
*                  LY THE CALLER, AFTER ISSUING THE ENQ/RESERVE
*                  SVC, WILL EITHER RECEIVE CONTROL BACK
*                  IMMEDIATELY OR WILL WAIT UNTIL ANOTHER
*                  REQUESTOR RELINQUISHES CONTROL OF THE
*                  RESOURCE VIA THE DEQ SERVICE ROUTINE.
*
*02*     LINKAGE = VIA SVC INTERRUPT HANDLER (TYPE 2 SVC)
*
*02*     INPUT = REGISTERS - SAME AS AT ENTRY POINT IGC048
*
*                PARAMETER ELEMENT LIST
*
*                **********************************************
*             -8 * TCB PTR IF ECB ALSO CODED OR DOESN'T EXIST  @ZA14267
*                **********************************************
*             -4 * ECB POINTER OR TCB PTR. OR DOES NOT EXIST  *
*                **********************************************
*             +0 * FLAGS1 * MINOR LENGTH * FLAGS2 * RET. CODE *
*                **********************************************
*             +4 * ADDRESS OF MAJOR NAME                      *
*                **********************************************
*             +8 * ADDRESS OF MINOR NAME                      *
*                **********************************************
*            +12 * ADDR. OF UCB ADDR.(RESERVE ONLY) OR ABSENT *
*                **********************************************
*
*                NOTE: NON-RESERVE ELEMENTS ARE 3 WORDS IN
*                LENGTH, WHILE RESERVE ELEMENTS ARE 4 WORDS
*                IN LENGTH. IN A MULTIPLE ELEMENT PARAMETER
*                LIST, ELEMENTS ARE CONTIGUOUS STARTING AT
*                OFFSET +0
*
*                FLAGS1   BIT 0 - END OF LIST INDICATOR
*                         BIT 1 - IGNORE FOLLOWING BITS
*                         BIT 2 - RESERVED
*                         BIT 3 - IRRELEVANT (POTENTIAL OUTPUT)
*                         BIT 4 - RESERVED
*                         BIT 5 - RESERVED
*                         BIT 6 - RESERVED (USED BY DEQ ONLY)
*                         BIT 7 - TCB= SPECIFIED
*
*                FLAGS2   BIT 0 - 0=EXCLUSIVE,1=SHARE
*                         BIT 1 - SEE NOTE A
*                         BIT 2 - OBSOLETE (SMC=SYSTEM SPECIFIED)
*                         BIT 3 - SMC=STEP SPECIFIED
*                         BIT 4 - SEE NOTE A
*                         BIT 5 - SEE NOTE B
*                         BIT 6 - SEE NOTE B
*                         BIT 7 - SEE NOTE B
*
*                NOTE A   00 - SCOPE OF STEP
*                         01 - UCB= SPECIFIED
*                              (SYSTEMS REQUIRED)
*                         10 - SCOPE OF SYSTEM
*                         11 - SCOPE OF SYSTEMS
*
*                NOTE B   000 - RET=NONE SPECIFIED
*                         001 - RET=HAVE SPECIFIED
*                         010 - RET=CHNG SPECIFIED
*                         011 - RET=USE SPECIFIED
*                         100 - ECB= SPECIFIED
*                         101 - RESERVED
*                         110 - RESERVED
*                         111 - RET=TEST SPECIFIED
*
*02*     OUTPUT = NORMALLY, ELEMENT OBTAINED, INITIALIZED,
*                 AND PLACED IN RESOURCE QUEUE
*
*                 REGISTERS 0-1  - UNPREDICTABLE
*                           2-13 - SAME AS AT ENTRY
*                                  (RESTORED WHEN REDISPATCHED)
*                           14   - UNPREDICTABLE
*                           15   - ZERO (ALL RETURN CODES ZERO)
*                                  OR
*                                  PARAMETER LIST POINTER (AT
*                                  LEAST ONE NON-ZERO RETURN CODE)
*
*                        EACH RETURN CODE IS PLACED
*                        IN THE RETURN CODE FIELD
*                        OF EACH PARAMETER LIST
*                        ELEMENT, OFFSET +3 INTO
*                        EACH ELEMENT (SEE DIAGRAM)
*
*                        POSSIBLE RETURN CODES FOR
*
*                           RET=NONE   0 - RESOURCE OBTAINED
*                                      4 - N/A
*                                      8 - N/A
*                                     20 - N/A
*                           RET=TEST   0 - RESOURCE IS AVAILABLE
*                                      4 - RESOURCE NOT AVAILABLE
*                                      8 - TASK ALREADY OWNS
*                                          RESOURCE
*                                     20 - TASK IS WAITING
*                                          FOR RESOURCE
*                           RET=USE    0 - RESOURCE OBTAINED
*                                      4 - RESOURCE NOT AVAILABLE
*                                      8 - TASK ALREADY OWNS
*                                          RESOURCE
*                                     20 - TASK IS WAITING
*                                          FOR RESOURCE
*                           RET=HAVE   0 - RESOURCE OBTAINED
*                                      4 - N/A
*                                      8 - TASK ALREADY OWNS
*                                          RESOURCE
*                                     20 - TASK IS WAITING
*                                          FOR RESOURCE
*                           RET=CHNG   0 - EXCLUSIVE CONTROL
*                                      4 - CURRENTLY SHARING
*                                      8 - NOT IN QUEUE
*                                     20 - TASK IS WAITING
*                                          FOR RESOURCE
*                           ECB=       0 - RESOURCE OBTAINED,
*                                          DO NOT WAIT, ECB
*                                          WILL NOT BE POSTED
*                                      4 - WAIT FOR POST
*                                      8 - TASK ALREADY OWNS
*                                          RESOURCE
*                                     20 - TASK IS WAITING
*                                          FOR RESOURCE
*
*                           NOTE: RETURN CODES 12 AND 16 HAVE
*                                 BECOME OBSOLETE
*
*                 DATA - WHEN A RETURN CODE 8 (MEANING TASK
*                        ALREADY OWNS RESOURCE) IS PASSED BACK,
*                        THE FORTH BIT (X'10') OF THE PARAMETER
*                        LIST IDENTIFYING THE OWNED RESOURCE REFLECTS
*                        WHETHER THE TASK HAS EXCLUSIVE CONTROL
*                        (BIT OFF) OR SHARED CONTROL (BIT ON).
*
*02*     REGISTERS-SAVED = NONE (SAVED BY SVC INTERRUPT HANDLER)
*
*02*     REGISTER-USAGE = REFER TO 'REGISTER EQUATES' PORTION
*                         OF THIS MODULE
*
*02*     REGISTERS-RESTORED = NONE (RESTORED AT EXIT TIME)
*
*01*  ENTRY-POINT = IEAVENQ2 (RESOURCE MANAGER)
*
*02*     PURPOSE = CLEAN UP AFTER AN ABEND OR AT END OF TASK
*                  TIME. AT EITHER NORMAL OR ABNORMAL TASK
*                  TERMINATION, ALL REQUESTS MADE BY THIS
*                  TASK WILL BE DEQUEUED. FOR MEMORY
*                  TERMINATION, ALL REQUESTS MADE BY THIS
*                  ADDRESS SPACE WILL BE DEQUEUED. A MUST
*                  COMPLETE TERMINATION WILL BE DONE THE
*                  SAME WAY, EXCEPT THAT THE OPERATOR WILL
*                  BE NOTIFIED OF THE EXCLUSIVE-SYSTEM(S)
*                  WIDE RESOURCES DEQUEUED.
*
*02*     LINKAGE = BRANCH ENTERED (CVTRENQ)
*
*02*     INPUT = REGISTERS
*                  0 - IRRELEVANT
*                  1 - INDIRECT POINTER TO RESOURCE MANAGER
*                      LIST (IHARMPL)
*                  2-12 - IRRELEVANT
*                  13 - ADDRESS OF 72 BYTE SAVE AREA
*                  14 - IRRELEVANT
*                  15 - IRRELEVANT
*
*                DATA
*                  IHARMPL  +0 FLAGS AND ASID
*                           +4 ASCB ADDRESS
*                           +8 TCB ADDRESS OR ZERO
*                          +12 BEGINNING OF WORK AREA
*                              (12 WORDS) FOR RESOURCE
*                              MANAGER USE
*
*02*     OUTPUT = POSSIBLE RELEASE OF ENQUEUED RESOURCES
*
*                 REGISTERS 0-14 - SAME AS AT ENTRY
*                           15   - RETURN CODE (0-SUCCESSFUL,
*                                  4-UNSUCCESSFUL)
*
*                 DATA - NONE
*
*02*     REGISTERS-SAVED = ALL REGISTERS SAVED IN SUPPLIED
*                          SAVE AREA (INPUT REGISTER 13)
*
*02*     REGISTER-USAGE = REFER TO 'REGISTER EQUATES' PORTION
*                         OF THIS MODULE
*
*02*     REGISTERS-RESTORED = ALL REGISTERS RESTORED FROM
*                             SUPPLIED SAVE AREA
*
*01*  ENTRY-POINT = IEAVSRR1 (ERROR RECOVERY)
*
*02*     PURPOSE = INSURE ENQ/DEQ/RESERVE IS STILL FUNCTIONAL
*                  BY VERIFYING/FIXING RESOURCE QUEUES. PLUS,
*                  SUPPLY ADDITIONAL ERROR DIAGNOSTIC
*                  INFORMATION
*
*02*     LINKAGE = RTM DOES A LPSW OF THIS ENTRY POINT
*                  ADDRESS
*
*02*     INPUT = REGISTERS
*                  0 - IRRELEVANT
*                  1 - ADDRESS OF SDWA
*                  2-13 - IRRELEVANT
*                  14 - RETURN ADDRESS
*                  15 - ENTRY POINT ADDRESS
*
*02*     OUTPUT = GOOD RESOURCE QUEUES AND SDWA MODIFIED
*                 TO REFLECT ADDITIONAL DIAGNOSTIC/RETRY
*                 INFORMATION
*
*                 REGISTERS 0 - IRRELEVANT
*                           1 - ADDRESS OF SDWA
*                           2-13 - IRRELEVANT
*                           14 - RETURN ADDRESS
*                           15 - RETURN CODE (0-CONTINUE
*                                WITH TERMINATION, 4-RETRY)
*
*02*     REGISTERS-SAVED = SDWA ADDRESS(REG 1) AND RETURN
*                          ADDRESS(REG 14) ARE SAVED IN
*                          ENQ/DEQ GLOBAL SAVE AREA
*
*02*     REGISTER-USAGE = REFER TO 'REGISTER EQUATES'
*                         PORTION OF THIS MODULE
*
*02*     REGISTERS-RESTORED = SDWA ADDRESS(REG 1) AND
*                             RETURN ADDRESS(REG 14) ARE
*                             RESTORED FROM ENQ/DEQ
*                             GLOBAL SAVE AREA
*
*01*  ENTRY-POINT = ENQXRTRY (ENQ RETRY)
*
*02*     PURPOSE = PERFORM NORMAL ENQ END PROCESSING,
*                  DETERMINE ABEND CODE, AND INVOKE ABEND
*
*02*     LINKAGE = VIA RTM WHEN AN ERROR HAS OCCURRED AND
*                  RETRY HAS BEEN REQUESTED
*
*02*     INPUT = REGISTERS
*                  0-4 - IRRELEVANT
*                  5 - ADDRESS OF CURRENT RB
*                  6 - FIRST BASE REGISTER
*                  7 - SECOND BASE REGISTER
*                  8-15 - IRRELEVANT
*
*02*     OUTPUT = AN ABEND
*
*                  REGISTERS 0 - ABEND FLAGS
*                            1 - ABEND CODE
*                            2-15 - IRRELEVANT
*
*02*     REGISTERS-SAVED = NONE
*
*        REGISTER-USAGE = REFER TO 'REGISTER EQUATES'
*                         PORTION OF THIS MODULE
*
*02*     REGISTERS-RESTORED = NONE
*
*01*  ENTRY-POINT = DEQXRTRY (DEQ RETRY)
*
*02*     PURPOSE = PERFORM NORMAL DEQ END PROCESSING,
*                  DETERMINE, ABEND CODE, AND INVOKE ABEND
*
*02*     LINKAGE = VIA RTM WHEN AN ERROR HAS OCCURRED AND
*                  RETRY HAS BEEN REQUESTED
*
*02*     INPUT = REGISTERS
*                  0-4 - IRRELEVANT
*                  5 - ADDRESS OF CURRENT RB
*                  6 - FIRST BASE REGISTER
*                  7 - SECOND BASE REGISTER
*                  8-15 - IRRELEVANT
*
*02*     OUTPUT = AN ABEND
*
*                 REGISTERS 0 - ABEND FLAGS
*                           1 - ABEND CODE
*                           2-15 IRRELEVANT
*
*02*     REGISTERS-SAVED = NONE
*
*02*     REGISTER-USAGE = REFER TO 'REGISTER EQUATES'
*                         PORTION OF THIS MODULE
*
*02*     REGISTERS-RESTORED = NONE
*
*01*  ENTRY-POINT = XSTARTIO (CODE EXECUTED UNDER SRB)
*
*02*     PURPOSE = RELEASE SRB/IOSB STORAGE WHEN I/O COMPLETE.
*                  THIS I/O HAS RELEASED A RESERVED DEVICE.
*
*02*     LINKAGE = VIA SRB DISPATCHER
*
*02*     INPUT = REGISTERS
*                  0 - IRRELEVANT
*                  1 - ADDRESS OF STORAGE TO BE FREED
*                  2-13 - IRRELEVANT
*                  14 - EXIT ADDRESS
*                  15 - ENTRY POINT ADDRESS
*
*02*     OUTPUT = REGISTERS - IRRELEVANT
*
*02*     REGISTERS-SAVED = NONE
*
*02*     REGISTER-USAGE = REFER TO 'REGISTER EQUATES'
*                         PORTION OF THIS MODULE
*
*02*     REGISTERS-RESTORED = NONE
*
*01*  EXIT-NORMAL = TEST4 (MAINLINE DEQ EXIT)
*
*02*     CONDITIONS = FUNCTION COMPLETED, RETURN TO
*                     CALLER VIA BRANCHING TO ADDRESS
*                     IN REGISTER 14 AT ENTRY
*
*02*     OUTPUT = SEE OUTPUT FOR ENTRY POINT - IGC048
*
*02*     RETURN-CODES = SEE OUTPUT FOR ENTRY POINT - IGC048
*
*01*  EXIT-NORMAL = TEST11 (MAINLINE ENQ EXIT)
*
*02*     CONDITIONS = FUNCTION COMPLETED, RETURN TO
*                     CALLER VIA BRANCHING TO ADDRESS
*                     IN REGISTER 14 AT ENTRY
*
*02*     OUTPUT = SEE OUTPUT FOR ENTRY POINT - IGC056
*
*02*     RETURN-CODES = SEE OUTPUT FOR ENTRY POINT - IGC056
*
*01*  EXIT-NORMAL = ERMNWTO1 (MAINLINE RESOURCE MANAGER EXIT)
*
*02*     CONDITIONS = FUNCTION COMPLETED, RETURN TO
*                     CALLER VIA BRANCHING TO ADDRESS
*                     IN REGISTER 14 AT ENTRY
*
*02*     OUTPUT = POSSIBLE RELEASE OF ENQUEUED RESOURCES
*                FOR TASK TERMINATING
*
*                 REGISTERS 0-14 - SAME AS AT ENTRY
*                           15   - RETURN CODE
*
*                DATA - NONE
*
*02*     RETURN-CODES = 0 - SUCCESSFUL
*                       4 - UNSUCCESSFUL
*
*01*  EXIT-NORMAL = TEST62C (MAINLINE EXIT FOR CODE EXECUTING
*                            UNDER SRB DURING RELEASE OF A
*                            DEVICE)
*
*02*     CONDITIONS = FUNCTION COMPLETED, EXIT VIA
*                     BRANCHING TO THE ADDRESS CONTAINED
*                     IN REGISTER 14 AT ENTRY
*
*02*     OUTPUT = REGISTERS - IRRELEVANT
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-NORMAL = TEST20  (ERROR RECOVERY EXIT FOR
*                           CONTINUING WITH TERMINATION)
*
*02*     CONDITIONS = FUNCTION COMPLETED, RETURN TO
*                     CALLER VIA BRANCHING TO ADDRESS
*                     CONTAINED IN REGISTER 14 AT ENTRY
*
*02*     OUTPUT = NORMALLY - SDWA MODIFIED TO REFLECT
*                                 FREE SDWA, RECORD,
*                                 FREE LOCKS, AND
*                                 ADDITIONAL DIAGNOSTIC INFO
*
*                 REGISTERS - 0    - IRRELEVANT
*                             1    - ADDRESS OF SDWA
*                             2-13 - IRRELEVANT
*                             14   - RETURN ADDRESS
*                             15   - ZERO (CONTINUE WITH
*                                    TERMINATION
*
*02*     RETURN-CODES = 0 - CONTINUE WITH TERMINATION
*
*01*  EXIT-NORMAL = TEST19M (ERROR RECOVERY EXIT FOR RETRY)
*
*02*     CONDITIONS = FUNCTION COMPLETED, RETURN TO
*                     CALLER VIA BRANCHING TO ADDRESS
*                     CONTAINED IN REGISTER 14 AT ENTRY
*
*02*     OUTPUT = NORMALLY - SDWA MODIFIED TO REFLECT
*                                 FREE SDWA, RECORD, RETRY,
*                                 RETRY REGISTERS, AND
*                                 ADDITIONAL DIAGNOSTIC INFO
*
*                REGISTERS 0    - IRRELEVANT
*                          1    - ADDRESS OF SDWA
*                          2-13 - IRRELEVANT
*                          14   - RETURN ADDRESS
*                          15   - FOUR (RETRY)
*
*02*     RETURN-CODES = 4 - RETRY
*
*01*  EXIT-ERROR = DEQYABND (ERROR EXIT FOR DEQ MAINLINE)
*
*02*     CONDITIONS = FUNCTION COMPLETE, ABEND CALLER VIA
*                     ABEND (SVC 13)
*
*02*     OUTPUT = REGISTERS 0    - ABEND FLAGS
*                           1    - ABEND CODE
*                           2-15 - IRRELEVANT
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-ERROR = ENQYABND (ERROR EXIT FOR ENQ MAINLINE)
*
*02*     CONDITIONS = FUNCTION COMPLETE, ABEND CALLER
*                     VIA ABEND (SVC 13)
*
*02*     OUTPUT = REGISTERS 0    - ABEND FLAGS
*                           1    - ABEND CODE
*                           2-15 - IRRELEVANT
*
*02*     RETURN-CODES = NONE
*
*01*  EXTERNAL-REFERENCES
*
*02*     ROUTINES       PURPOSE                  LINKAGE
*          ABEND          TERMINATE TASK           SVC
*          FREEMAIN       FREE STORAGE             BRANCH
*          FREEMAIN       FREE STORAGE             SVC
*          GETMAIN        OBTAIN STORAGE           BRANCH
*          POST           POST AN ECB              BRANCH
*          SETLOCK        OBTAIN LOCK              BRANCH
*          SPOST          PURGE SRBS               SVC
*          STATUS         SET/RESET STEP MC        BRANCH
*          STARTIO        RELEASE DEVICE           BRANCH
*          SYSEVENT       RELEASE/HOLD RESOURCE    BRANCH
*          TESTAUTH       DETERMINE AUTHORIZATION  BRANCH
*          WAIT           WAIT FOR A POST          BRANCH
*          WTO            SEND OPERATOR MESSAGE    SVC
*
*02*     DATA-AREAS = ENQ/DEQ GLOBAL SAVE AREA(GS) - WORK AREA
*                                                    SERIALIZED VIA
*                                                    CMS LOCK
*                     PARAMETER ELEMENT LIST(PEL) - REFLECT
*                                                   INPUT
*                                                   PARMS.
*                     RB EXTENDED SAVE AREA(WA) - WORK AREA
*
*02*     CONTROL-BLOCKS = ASCB      R,W
*                         ASVT      R
*                         ASXB      R
*                         CVT       R
*                         DQE       R
*                         FRRS      R
*                         FQE       R
*                         GDA       R
*                         IOCM      R
*                         IOSB  C,D,  W
*                         QCB   C,D,R,W
*                         PSA       R
*                         QEL   C,D,R,W
*                         RB        R,W
*                         RMPL      R
*                         SRB   C,D,  W
*                         SCVT      R
*                         SDWA      R,W
*                         SPQE      R
*                         TCB       R
*                         UCB       R,W
*                         WSAVT     R
*
*01*  TABLES = ENQ/DEQ GLOBAL SAVE AREA(GS) - SEE DSECT
*              COMMENTARY FOR DESCRIPTION
*
*01*  MACROS = ABEND
*              FREEMAIN
*              GETMAIN
*              MODESET
*              MODID
*              SETFRR
*              SETLOCK
*              SPOST
*              STARTIO
*              SYSEVENT
*              TESTAUTH
*              WTO
*
*02*     SERIALIZATION = RESOURCES ENQUEUED - NONE
*
*                        LOCKS - LOCAL, CMS, AND SALLOC
*
*01*  CHANGE-ACTIVITY = THIS MODULE HAS BEEN COMPLETELY
*                       RE-WRITTEN. THE S/D CODE IS Y02752.
*                       THE FOLLOWING ADDITIONAL CHANGES HAVE
*                       BEEN MADE :
*                         Y02113 - N/A       - DCRR
*                         Y02752 - N/A       - DCRR
*                         YM01596 - 4/26/73 - CROSS ADDRESS SPACE
*                                             POST INTERFACE ERROR
*                         YM01991 - 6/27/73 - WRONG REGISTER FOR
*                                             SUB-QEL CHECK
*                         YM03340 - 10/9/73 - INTEGRITY ADDITIONAL
*                                             INFORMATION
*                         YM03564 - 10/9/73 - PERFORMANCE IMPROVEMENTS
*                         YM04188 - 11/2/73 - STARTIO MACRO ERROR
*                         YM04705 - 11/1/73 - ZERO RETURN CODE ERROR
*                                             FOR A LIST REQUEST AND
*                                             CLEAR HIGH BYTE OF UCB
*                                             ADDRESS PRIOR TO SAVING
*                         YM05430 - 11/6/73 - INCORRECT DATA BEING
*                                             RECORDED IN SDWA
*                         YA00805 - 07/1/74 - SHARED DASD
*                                             RESERVE/RELEASE SUPPORT
*                         Z30BNVD - 10/9/74 - SQA FRAGMENTATION
*                                             REDUCTION AND
*                                             INTELLIGENT WAIT
*                         ZA07146 - 10/2/75 - RTM SUPPORT TO FIX
*                                             INTRA ADDRESS SPACE
*                                             INTERLOCK PROBLEM
*                         ZA03873 - 12/2/75 - ESTAE COVERING WAIT
*                         Z40FPVD - 12/15/75 - ESTAE TO FAST ESTAE
*       ZA10756-CHANGE TO PERFORM RECORDING ONLY FOR AN        @ZA32935
*               UNEXPECTED ERROR.                              @ZA32935
*       ZA14267-ENHANCEMENT TO PERMIT ENQ WITH BOTH ECB AND    @ZA32935
*               TCB.                                           @ZA32935
*       ZA17306-CHANGE TO ISSUE ENQHOLD AND ENQRELSE SYSEVENTS @ZA32935
*               SO SRM WILL MAKE IT LESS LIKELY FOR ADDRESS    @ZA32935
*               SPACES TO BE SWAPPED OUT WHEN RESERVES ARE IN  @ZA32935
*               EFFECT.                                        @ZA32935
*       ZA20351-CHANGE TO PREVENT TCBQEL COUNTER FROM WRAPPING @ZA32935
*               AROUND.                                        @ZA32935
*       ZA32935-IEAVENQ1 WILL STEAL RESOURCES TO PREVENT       @ZA32935
*               INTERLOCKS IF TCBFA IS ON AND OTHER CONDITIONS @ZA32935
*               ARE MET. HOWEVER, IF AN ESTAE TERM EXIT OR     @ZA32935
*               TASK RESOURCE MANAGER OBTAINS A RESOURCE VIA   @ZA32935
*               ENQ AND LATER ISSUES ENQ RET=HAVE,SMC=STEP FOR @ZA32935
*               THE SAME RESOURCE, THE CURRENT STEALING LOGIC  @ZA32935
*               WILL CAUSE CONTROL OF THE RESOURCE TO BE LOST  @ZA32935
*               IF OTHER ENQ REQUESTS HAD BEEN QUEUED. THE FIX @ZA32935
*               IS TO SET A FLAG IN ANY QEL OBTAINED WHEN      @ZA32935
*               TCBFA IS ON. (TCBFA MEANS ABNORMAL TERMINATION @ZA32935
*               IS IN PROGRESS AND RETRY IS NOT POSSIBLE.)     @ZA32935
*               THEN, IEAVENQ1 WILL NOT STEAL                  @ZA32935
*               A RESOURCE WHICH WAS OBTAINED WHEN TCBFA WAS   @ZA32935
*               ON AND IS NOT OWNED BY THE REQUESTING TASK.    @ZA32935
*
*01*  MESSAGES = THE FOLLOWING MESSAGES ARE REQUESTED BY
*                ENQ/DEQ/RESERVE:
*                  IEA801I AAAAAAAAAAAAAAAA BB FAILED
*                          WHILE IN STEP MUST COMPLETE
*                          STATUS
*
*                          AAA... - JOBNAME STEPNAME
*                                  OR UNIDENTIFIED TASK
*                          BB - ST OR JS INDICATING
*                               STEP OR JOBSTEP
*
*                 IEA803I CC FAILED WHILE IN 'STEP MUST
*                          COMPLETE' STATUS DUE TO DDDD
*
*                          CC - ST OR JS INDICATING
*                               STEP OR JOBSTEP
*                          DDDD - S(SYSTEM)CODE OR
*                                 U(USER)CODE
*
*                  IEA960I ENQ/DEQ CONTROL QUEUES WERE
*                          DAMAGED. RESTORATION ATTEMPTED
*
*                          THIS MESSAGE IS PRINTED WHEN
*                          ENQ/DEQ/RESERVE CONTROL BLOCKS
*                          HAVE BEEN DAMAGED
*                          (E.G. WILD STORE)
*
*                  IEA961I RESOURCE NAMED QNAME,RNAME MAY
*                          BE DAMAGED
*
*                          THIS MESSAGE IS PRINTED WHEN
*                          A TASK IS IN THE MUST COMPLETE
*                          STATE AND ABNORMALLY TERMINATES.
*
*01*  ABEND-CODES = ISSUED BY ENQ/RESERVE:
*                     138 - TASK ALREADY HAD OR WAS WAITING
*                           FOR RESOURCE
*                     238 - INVALID MINOR NAME LENGTH
*                     338 - CALLER NOT AUTHORIZED FOR
*                           FUNCTION
*                     438 - INVALID PARAMETER LIST
*                     638 - OUT OF STORAGE
*                     738 - UNEXPECTED ERROR
*                     838 - ENQ DENIED DUE TO ENQ/DEQ/RESERVE
*                           RESOURCE CONTROL BLOCK DAMAGE
*
*                   ISSUED BY DEQ:
*                     130 - RESOURCE NOT FOUND
*                     230 - INVALID MINOR NAME LENGTH
*                     330 - CALLER NOT AUTHORIZED FOR
*                           FUNCTION
*                     430 - INVALID PARAMETER LIST
*                     530 - RESOURCE IS BEING WAITED UPON
*                     630 - OUT OF STORAGE
*                     730 - UNEXPECTED ERROR
*
**** END OF SPECIFICATIONS ***/
         SPACE
* A-000000-999999                                               @Y02752
         ENTRY IEAVENQ1
IEAVENQ1 EQU   IGC048         MODULE NAME
         ENTRY IGC056
         ENTRY IEAVENQ2
         ENTRY IEAVENQQ                                        @Z30BNVD
         USING PSA,0          ADDRESSABILITY TO LOW CORE
         USING TCB,R4         TCB ADDRESSABILITY
         USING RBSECT,R5      WORK AREA ADDRESSABILITY
         USING IGC048,R6,R7
         USING PEL,R8
         USING MAJ,R9
         USING MIN,R10
         USING QEL,R11
         USING GS,R13         GLOBAL SAVE ADDRESSABILITY
         USING *,R6
         LM    R6,R7,BASE     ESTABLISH BASE REGISTERS
         USING IGC048,R6,R7
         MODID  BR=YES        IDENTIFY MODULE
DEQID    EQU   *              *
         LA    R0,RETRYDEQ    INDEX OF RETRY ADDRESS
         LA    R2,DEQFRR      GET ADDRESS OF RECOVERY ROUTINE
         BAL   R3,XSETUP      INITIALIZE ENVIRONMENT
         CLI   WAERR,ZERO     Q. ABEND
         BNE   DEQYABN        A. YES.
* CHECK RESERVED BITS
         TM    WAPLAST,PELRES1+PELSAVE+PELGEN1 Q. RESERVED     @YM03340
         BNZ   DEQYRESB       A. YES, RESERVED USED. ERROR
         TM    WAPFLAG,PELRET1+PELRET2+PELSYSMC Q. RESERVED
         BNZ   DEQYRESB       A. YES, RESERVED USED. ERROR
* CHECK FOR MILEN OF 0 (EXCLUDE GENERIC)
         TM    WAPLAST,PELGEN2  Q. GENERIC
         BO    DEQYGEN        A. YES, SKIP CHECK
         TM    WAFLAG2,WABADMIL  Q. BAD MINOR LENGTH
         BO    DEQYMIL0       A. YES, ERROR
DEQYGEN  EQU   *              *
* CHECK TCB CONFLICTS
         TM    WAPLAST,PELTCBF  Q. TCB SPECIFIED
         BZ    DEQNDIR        A. NO, SKIP NEXT CHECK
         TM    WAPFLAG,PELSTPMC  Q. SET MUST COMPLETE
         BO    DEQYCONF       A. YES, CONFLICTING PARAMETERS
DEQNDIR  EQU   *              *
* CHECK GENERIC CONFLICTS
         TM    WAPLAST,PELGEN2  Q. GENERIC
         BZ    DEQNGEN        A. NO, SKIP ADDITIONAL CHECKS
         TM    WAPFLAG,PELRET1+PELRET2+PELRET3  Q. RET=NONE(DEFAULT)
         BZ    DEQYCONF       A. YES, CONFLICTING PARAMETERS
         TM    WAPFLAG,PELSTPMC  Q. SET MUST COMPLETE
         BO    DEQYCONF       A. YES CONFLICTING PARAMETERS
DEQNGEN  EQU   *              *
* CHECK IF AUTHORIZED
         TM    WAFLAG2,WANOAUTH  Q. AUTHORIZED VIA TESTAUTH.
         BZ    DEQYAUTO       A. YES. SKIP AUTHORIZATION CHECKS.
* CHECK AUTHORIZATION FOR TCB,RMC,GENERIC
         TM    WAPLAST,PELGEN2+PELTCBF  Q.TCB OR GENERIC SPECIFIED.
         BNZ   DEQNAUTH       A. YES. ABEND.
         TM    WAPFLAG,PELSTPMC  Q. RMC KEYWORD SPECIFIED.
         BO    DEQNAUTH       A. YES . ABEND.
DEQYAUTO EQU   *              *
         TM    WAPFLAG,PELSTPMC  Q. RMC SPECIFIED.
         BZ    DEQNRMC        A. NO.
         OI    WAFLAG2,WARMC  INDICATE NEED FOR RESET MUST COMPLETE
DEQNRMC  EQU   *              *
DEQQPEL  EQU   *              *
         BAL   R3,XFINDMAJ    FIND A MATCHING MAJOR.
         LTR   R9,R9          Q. FIND A MAJOR
         BNP   DEQNMAJ        A. NO  'RETURN CODE 8'
         TM    WAPLAST,PELGEN2  Q. GENERIC=YES
         BZ    DEQNGENR       A. NO. CONTINUE PROCESSING.
* GENERIC DEQUEUE
         L     R10,MAJFMIN    GET THE FIRST MINOR
DEQQMIN  EQU   *              MINOR QCB LOOP
         LPR   R10,R10        Q. IS THERE A MINOR.
         BZ    DEQNMIN        A. NO SEE WHAT HAPPENED.
* SCOPE MUST MATCH FOR GENERIC DEQUEUE.
         TM    PELFLAG,PELSCPE1+PELSCPE2 Q. REQUESTING STEP.
         BNZ   DEQNSTEP       A. NO.
         TM    MINFLGS,MINSTEP  Q. REQUEST FOR THIS MINOR.
         BZ    DEQNTHIS       A. NO.
         CLC   GSASID(TWO),MINASID Q. REQUEST FOR THIS MINOR.
         BNE   DEQNTHIS       A. NO. GET NEXT MINOR.
         B     DEQYTHIS       A. YES. SCOPE MATCH.
DEQNSTEP EQU   *              *
         TM    PELFLAG,PELSCPE2  Q. REQUESTING SYSTEMS.
         BZ    DEQNSYSS       A. NO. REQUEST IS FOR SYSTEM
         TM    MINFLGS,MINSYSS  Q. REQUEST FOR THIS MINOR.
         BZ    DEQNTHIS       A. NO. NOT THIS ONE.
         B     DEQYTHIS       A. YES. THIS ONE.
DEQNSYSS EQU   *              *
         TM    MINFLGS,MINSYS Q. REQUEST FOR THIS MINOR.
         BZ    DEQNTHIS       A. NO. NOT THIS ONE.
DEQYTHIS EQU   *              *
         BAL   R3,XQELSCAN    SCAN THE QELS
         LTR   R11,R11        Q. FIND A MATCH
         BNP   DEQNDEQ        A. NO. GET NEXT MINOR.
         LA    R0,TWO         INIT REG FOR COMPARE
         C     R0,GSGRPNUM    MATCH QEL IN GROUP 1
         BH    DEQYDEQ        A. YES. DEQUEUE IT.
         TM    QELLFLGS,QELECBF   Q. ECB DEQUEUE
         BO    DEQYDEQ        A. YES. CAN DEQUEUE
         OI    WAFLAG1,WAWAITN  INDICATE FOUND A WAITING QEL(NOT ECB)
         B     DEQNDEQ        GET THE NEXT MINOR.
DEQYDEQ  EQU   *              *
* GROUP 1 OR ECB(ANY GROUP)
         BAL   R2,XDEQQEL     DEQUEUE THE CURRENT QEL
         OI    WAFLAG1,WA1DEQ  INDICATE AT LEAST ONE QEL DEQUEUED
         LTR   R10,R10        Q. CHANGE IN MINOR
         BNP   DEQQMIN        A. YES. HAVE NEXT ALREADY.
DEQNDEQ  EQU   *              GET NEXT MINOR.
DEQNTHIS EQU   *              *
         L     R10,MINNMIN    GET NEXT MINOR.
         B     DEQQMIN        LOOP
DEQNMIN  EQU   *              CHECK WHAT HAPPENED.
         TM    WAFLAG1,WAWAITN+WA1DEQ   Q. FIND ANY.
         BZ    DEQNFIND       A. NO. 'RETURN CODE 8'
         TM    WAFLAG1,WAWAITN   Q. ANY FOUND WAITING
         BZ    DEQYFIND       A. NO. 'RETURN CODE 0'
         B     DEQYWTNG       A. YES. 'RETURN CODE 4'
         EJECT
DEQNGENR EQU   *              *
         BAL   R3,XFINDMIN    FIND A MATCHING MINOR
         LTR   R10,R10        Q. FIND ONE.
         BNP   DEQNMIN1       A. NO. 'RETURN CODE 8'
         BAL   R3,XQELSCAN    SCAN THE QELS
         LTR   R11,R11        Q. FIND A MATCH QEL
         BZ    DEQNQEL        A. NO. 'RETURN CODE 8'
         LA    R0,TWO         USE FOR THE FOLLOWING COMPARE
         C     R0,GSGRPNUM    Q. GROUP NUMBER ONE
         BH    DEQYDEQ1       A. YES.CAN DEQUEUE.
         TM    QELLFLGS,QELECBF  Q. DEQUEUE ALLOWED.
         BZ    DEQNDEQ1       A. NO 'RETURN CODE 4'
DEQYDEQ1 EQU   *              QEL IS DEQ-ABLE
* QEL IS DEQ-ABLE
         BAL   R2,XDEQQEL     DEQUEUE THE CURRENT QEL
         B     DEQYRC0        'RETURN CODE 0'
         EJECT
DEQYA430 EQU   *              INVALID PARM LIST
DEQYRESB EQU   *              *
DEQYCONF EQU   *              CONFLICTING PARMS
         MVI   WAERR,AB430    'ABEND CODE 430'
         B     DEQPART2       PROCEED TO PART 2
DEQYA330 EQU   *              NOT AUTHORIZED
DEQNAUTH EQU   *              *
         MVI   WAERR,AB330    'ABEND CODE OF 330'
         B     DEQPART2       PROCEED TO PART 2
DEQYA230 EQU   *              MINOR NAME LENGTH OF ZERO
DEQYMIL0 EQU   *              *
         MVI   WAERR,AB230    'ABEND CODE 230'
         B     DEQPART2       PROCEED TO PART 2
DEQYRC8  EQU   *              NO QEL(S) FOUND
DEQNFIND EQU   *              *
DEQNMAJ  EQU   *              *
DEQNMIN1 EQU   *              *
DEQNQEL  EQU   *              *
         MVI   WARET,EIGHT    'RETURN CODE 8'
         B     DEQPART2       PROCEED TO PART 2
DEQYRC4  EQU   *              RESOURCE BEING WAITED UPON
DEQYWTNG EQU   *              *
DEQNDEQ1 EQU   *              *
         MVI   WARET,FOUR     'RETURN CODE 4'
         B     DEQPART2       PROCEED TO PART 2
DEQYRC0  EQU   *              AOK
DEQYFIND EQU   *              *
         MVI   WARET,ZERO     SET ZERO RETURN CODE             @YM04705
DEQYABN  EQU   *              *
         EJECT
DEQPART2 EQU   *              PART 2 OF DEQ
         CLI   WARET,ZERO     Q. IS THIS RETURN CODE ZERO
         BZ    DEQYZERO       A. YES.
         OI    WAFLAG2,WAR15SW   INDICATE HAVE A NON ZERO RET CODE.
DEQYZERO EQU   *              *
         CLI   WAERR,ZERO     Q. ABEND REQ'D
         BNE   DEQYABND       A.YES
         TM    WAPFLAG,PELRET1+PELRET2+PELRET3  Q. RET=NONE
         BNZ   DEQYSTOR       A. NO. STORE THE RET. CODE.
* RET=NONE
         CLI   WARET,ZERO     Q. R.C. OF 0
         BE    DEQNSTOR       A. YES. DONT STORE
         CLI   WARET,FOUR     Q. R.C. OF FOUR
         MVI   WAERR,AB530    CHANGE TO 530 ABEND
         BE    DEQYABND       A. YES. ABEND 530
         MVI   WAERR,AB130    CHANGE TO ABEND 130
         B     DEQYABND       ABEND 130
DEQYSTOR EQU   *              *
* NOT RET=NONE
         LR    R14,R8         CURRENT PEL
         S     R14,WANEWPEL   PEL DISPLACEMENT
         AL    R14,WAOLDPEL   CORRESPONDING PEL
         LH    R2,WAKEY       GET THE USERS KEY
TEST1    EQU   *              *
         MODESET  KEYADDR=(2)  CHANGE TO USER KEY.
         IC    R15,WARET      GET RETURN CODE.
         STC   R15,PELRET-PEL(R14)  STORE THE RET CODE.
TEST2    EQU   *              *
         MODESET  EXTKEY=SUPR  SET KEY BACK TO ZERO
DEQNSTOR EQU   *              *
         TM    PELLAST,PELEOL   Q. END OF LIST
         BO    DEQYEOL        A. YES.
         TM    PELFLAG,PELSCPE2  Q. UCB PARM ELEM
         BZ    DEQNUCB        A. NO.
         TM    PELFLAG,PELSCPE1  Q. UCB PARM ELEM
         BO    DEQNUCB        A. NO
         LA    R8,FOUR(R8)    COMPENSATE FOR UCB WORD
DEQNUCB  EQU   *              *
         LA    R8,PELELEM(R8) BUMP TO THE NEXT ELEM
         B     DEQQPEL        PROCESS THE NEXT ELEMENT.
DEQYEOL  EQU   *              *
         BAL   R3,XENDUP      DO END PROCESSING
         SR    R15,R15        ASSUME RET CODE OF ZERO.
         TM    WAFLAG2,WAR15SW   Q. SET R15 TO ZERO.
         BZ    DEQYZ15        A. YES
* AT LEAST ONE NON ZERO RET CODE WAS GOTTEN.
         L     R15,WAOLDPEL   SET R15 TO POINT TO PARM LIST
DEQYZ15  EQU   *              *
         L     R14,CVTPTR     GET CVT
TEST4    EQU   *              *
         L     R14,CVTEXPRO-CVT(R14)  GET EXIT ADDRESS.
         BR    R14            RETURN
DEQYABND EQU   *              *
DEQXRTRY EQU   *              RETRY FROM HERE AFTER ERROR
* R5,R6,R7 AND R13 ARE SET CORRECTLY
         BAL   R3,XENDUP      DO END PROCESSING
         LA    R1,DEQCODE     GET BACK END OF ABEND CODE.
         ICM   R1,M0010,WAERR  GET THE FRONT END OF ABEND CODE.
         ABEND  (1),DUMP,,SYSTEM   ABEND.
TEST5    EQU   *              *
         EJECT
IGC056   DS    0D             ENTRY POINT FOR ENQ/RESERVE
         USING *,R6
         DROP  R7
         LM    R6,R7,BASE     ESTABLISH BASE REGISTERS
         USING IGC048,R6,R7
         B     ENQID          SKIP ENQ IDENTIFIER
         DC    CL8'IGC056'    ENQ IDENTIFIER
ENQID    EQU   *              USED ONLY TO BYPASS ENQ IDENTIFIER
         LA    R0,RETRYENQ    INDEX OF RETRY ADDRESS
         LA    R2,ENQFRR      OBTAIN FRR E.P. ADDRESS
         BAL   R3,XSETUP      PERFORM COMMON INITIALIZATION
         TM    GSFLAG1,GSNOENQ   Q. STOP ENQ
         BO    ENQYA838       A. YES. 'ABEND CODE 838'
         CLI   WAERR,ZERO     Q. ABEND
         BNE   ENQYABN        A. YES.
* CHECK RESERVED BITS
         TM    WAPLAST,PELRES1+PELSAVE+PELGEN1+PELGEN2         @YM03340
         BNZ   ENQYRESB       ERROR WHEN BITS USED
         TM    WAPFLAG,PELSYSMC   Q. SET MUST COMPLETE
         BO    ENQYRESB           A. YES, CONFLICTING PARAMETERS
         TM    WAPFLAG,PELRET1    Q. FURTHER CHECKING NECESSARY
         BZ    ENQNRESB           A. NO, THEN SKIP
         TM    WAPFLAG,PELRET2+PELRET3  Q. RESERVED BITS USED
         BM    ENQYRESB                 A. YES, ERROR
ENQNRESB EQU   *              *
* CHECK FOR MINOR NAME LENGTH OF 0
         TM    WAFLAG2,WABADMIL
         BO    ENQYMIL0         ERROR WHEN LENGTH ZERO REQUESTED
         TM    WAPLAST,PELTCBF  Q. DIRECTED ENQ
         BZ    ENQNDIR          A. NO, THEN SKIP
* TCB REQUEST
         L     R10,PSAAOLD    GET FIRST TCB IN THIS ADDR SPACE
         L     R10,ASCBASXB-ASCB(R10)  DITTO
         L     R10,ASXBFTCB-ASXB(R10)  DITTO
ENQQTCB1 EQU   *              CHECK EACH ACTIVE TCB IN THIS ADDR SPACE
         CR    R10,R4         Q. VALID TCB
         BE    ENQYTCB1       A. YES.
         ICM   R10,M1111,TCBTCB-TCB(R10) Q. ANY MORE TCBS
         BNZ   ENQQTCB1       A. YES. LOOP.
* IF HERE, HAVE INVALID TCB
         B     ENQNTCB1       'ABEND 438'
ENQYTCB1 EQU   *              *
* CHECK TCB CONFLICTS
         TM    PELFLAG,PELSCPE2   Q. UCB SPECIFIED.
         BZ    NRESV4         A. NO.
         TM    PELFLAG,PELSCPE1   Q. UCB SPECIFIED.
         BZ    ENQYCONF       A. YES. CONFLICTING PARMS
NRESV4   EQU   *              *
         TM    WAPFLAG,PELSTPMC  Q. SET STEP MUST COMPLETE
         BO    ENQYCONF          A. YES, CONFLICTING PARAMETERS
         TM    WAECBA,WAECBF     Q. ECB SPECIFIED              @ZA14267
         BO    ENQNDIR           A. YES, DO NOT CHECK FOR      @ZA14267
*                                CHNG, USE, OR TEST            @ZA14267
         TM    WAPFLAG,PELRET2   Q. CHNG, USE, OR TEST REQUESTED
         BZ    ENQYCONF          A. NO, ERROR (IF NOT ECB)     @ZA14267
ENQNDIR  EQU   *              *
* CHECK FOR ECB AND SMC=STEP CONFLICT
         TM    WAPFLAG,PELSTPMC  Q. SMC=STEP SPECIFIED.
         BZ    ENQNSMC3       A. NO.
         TM    WAECBA,WAECBF  Q. ECB= SPECIFIED.
         BO    ENQYCONF       A. YES. SMC + ECB CONFLICT. ABEND.
ENQNSMC3 EQU   *              *
* CHECK IF AUTHORIZED
         TM    WAFLAG2,WANOAUTH    Q. CALLER AUTHORIZED VIA TESTAUTH.
         BZ    ENQYAUTO       A. YES. SKIP AUTHORIZATION CHECKS.
* CHECK AUTHORIZATION FOR TCB,ECB,SMC
         TM    WAPLAST,PELTCBF  Q. TCB KEYWORD SPECIFIED
         BO    ENQNAUTH       A. YES. ABEND CALLER.
         TM    WAPFLAG,PELSTPMC Q. SMC KEYWORD SPECIFIED
         BO    ENQNAUTH       A. YES. ABEND CALLER
         TM    WAECBA,WAECBF   Q. ECB KEYWORD SPECIFIED.
         BO    ENQNAUTH       A. YES. ABEND CALLER.
         SPACE 3
ENQYAUTO EQU   *              *
ENQQPEL  EQU   *              *
         TM    PELFLAG,PELSCPE2   Q. UCB SPECIFIED.
         BZ    ENQNUCB        A. NO.
         TM    PELFLAG,PELSCPE1   Q. UCB SPECIFIED.
         BO    ENQNUCB        A. NO.
* CHECK FOR VALID UCB
         L     R1,PELUCBAA    GET THE UCB ADDR ADDR
         L     R1,ZERO(R1)    GET THE UCB ADDR
         CLI   UCBID-UCBOB(R1),XFF   Q. ABEND DUE TO BAD UCB AD.
         BNE   ENQYA438       A. YES. ABEND WITH 438 CODE.
         TM    WAFLAG2,WANOAUTH    Q. CHECK UCB ADDRESS FURTHER.
         BZ    ENQNCHK        A. NO.
         L     R14,TCBJSTCB-TCB(R4)  GET POINTER TO JOB STEP TCB
         ICM   R14,M1111,TCBTIO-TCB(R14)  Q. IS THERE A TIOT
         BZ    ENQNTIOT       A. NO. INVALID UCB. ABEND 438.
         LA    R14,TIOELNGH-TIOT1(R14)  SKIP TO DD ENTRIES
ENQQENTY EQU   *              *
         SR    R15,R15        ZERO FOR INSERT
         ICM   R15,M0001,TIOELNGH-TIOENTRY(R14) Q. ANY MORE DD-S
         BZ    ENQNENTY       A. NO 'ABEND 438'  INVALID UCB ADDRESS
         LA    R15,ZERO(R15,R14)
         LA    R14,TIOEFSRT-ONE-TIOENTRY(R14)  GET ADDR. OF UCB ADDR
ENQQDEV  EQU   *              *
         CR    R14,R15        Q. END OF DEVICES
         BE    ENQYNEXT       A. YES, CHECK NEXT DD ENTRY
         BH    ENQNDEV        A. YES, ERROR ABEND
         CLM   R1,M0111,ONE(R14)  A. NO. Q. MATCH ON UCB
         BE    ENQYDEV        A. YES, FOUND
         LA    R14,FOUR(R14)  A. NO, GET NEXT DEVICE ENTRY ADDR.
         B     ENQQDEV        LOOP
ENQYNEXT EQU   *              *
         LR    R14,R15        GET NEXT DD ENTRY
         B     ENQQENTY       LOOP
         EJECT
* FIND A MAJOR
ENQYDEV  EQU   *              *
ENQNUCB  EQU   *              *
ENQNCHK  EQU   *              *
ENQQMAJ  EQU   *              *
         BAL   R3,XFINDMAJ    FIND MATCHING MAJOR
* INSERT AT THE TOP
         LTR   R9,R9          Q. FOUND ONE
         BP    ENQYMAJ        A. YES, SKIP CREATING ONE
         TM    WAPFLAG,PELRET2  Q. RET=TEST/CHNG/USE
         BZ    ENQNTCU        A. NO. WAS RET=NONE/HAVE/ECB
         TM    WAPFLAG,PELRET1+PELRET3  Q. TEST  Q. CHNG
         BO    ENQYTEST       A. TEST  'RETURN CODE 0'
         BZ    ENQYCNG2       A. CHNG. 'RETURN CODE 8'
ENQNTCU  EQU   *              *
         BAL   R3,XGETMAJ     OBTAIN STORAGE FOR MAJOR QCB
         TM    WAFLAG2,WANOCORE    Q. STORAGE AVAILABLE
         BO    ENQNCORE       A. NO, ERROR
         EJECT
* INITIALIZE THE MAJOR
         L     R12,GSMJWORD   GET ADDRESS OF MAJOR QCB
         XC    ZERO(MAJLEN,R12),ZERO(R12)  ZERO MAJOR QCB STORAGE
         L     R15,PELMAJA    GET ADDRESS OF QNAME
         MVC   MAJNAME-MAJ(EIGHT,R12),ZERO(R15)  MOVE QNAME INTO MAJOR
         EJECT
* CHAIN THE MAJOR
         L     R14,CVTPTR     GET ADDRESS OF CVT
TEST6    EQU   *              *
         L     R9,CVTFQCB-CVT(R14)  GET ADDRESS OF FIRST MAJOR QCB
         LTR   R9,R9          Q. ANY EXIST
         BNZ   ENQNFST        A. YES, SKIP PROCESS FOR FIRST
* NO MAJORS EXIST
         ST    R12,CVTLQCB-CVT(R14)  INIT. POINTER TO LAST MAJOR QCB
         B     ENQOUT         SKIP INIT. BACKWARD POINTER
ENQNFST  EQU   *              *
* NOT THE FIRST MAJOR      (CHAIN ON TOP)
         ST    R9,MAJNMAJ-MAJ(R12)  INITIALIZE NEXT POINTER
         ST    R12,MAJPMAJ-MAJ(R9)   SET PREVIOUS  POINTER
ENQOUT   EQU   *
         ST    R12,CVTFQCB-CVT(R14)  NEW FIRST MAJOR QCB POINTER
         LR    R9,R12         TWO POINTERS TO NEW MAJOR QCB
* CHAIN OF MAJOR COMPLETE
         B     ENQNMAJ        GO CREATE MINOR QCB
         EJECT
* FIND A MINOR
ENQYMAJ  EQU   *              *
         BAL   R3,XFINDMIN    FIND MATCHING MINOR
         LTR   R10,R10        Q. FIND A MATCHING MINOR.
         BP    ENQYMIN        A. YES.
         TM    WAPFLAG,PELRET2  Q. RET=TEST/CHNG/USE
         BZ    ENQNTCU1       A. NO. WAS RET=NONE/HAVE/ECB
         TM    WAPFLAG,PELRET1+PELRET3  Q. TEST  Q. CHNG
         BO    ENQYTST1       A. TEST  'RETURN CODE 0'
         BZ    ENQYCNG3       A. CHNG. 'RETURN CODE 8'
ENQNTCU1 EQU   *              *
         BAL   R3,XGETMIN     GET CORE FOR A MINOR QCB
         TM    WAFLAG2,WANOCORE   Q. CORE OBTAINED
         BO    ENQYA638           A. NO, ERROR
         EJECT
* INITIALIZE THE MINOR
ENQNMAJ  EQU   *              *
* INITIALIZE AND CHAIN MINOR
         L     R12,GSMNWORD   GET ADDRESS OF MINOR QCB
         XC    ZERO(MINLEN,R12),ZERO(R12)  ZERO MINOR QCB STORAGE
* SET THE SCOPE
         TM    PELFLAG,PELSCPE1+PELSCPE2   Q. STEP SPECIFIED
         BNZ   ENQNSTEP       A. NO, TRY SYSTEMS
* SET STEP
         OI    MINFLGS-MIN(R12),MINSTEP   INDICATE STEP
         MVC   MINASID-MIN(TWO,R12),GSASID  INIT ASID.
         B     ENQYSTEP       SKIP REMAINING SCOPE PROCESSING
ENQNSTEP EQU   *              *
         TM    PELFLAG,PELSCPE2  Q. SYSTEMS SPECIFIED
         BZ    ENQNSYSS       A. NO, MUST BE SYSTEM
* SET SYSTEMS
         OI    MINFLGS-MIN(R12),MINSYSS   INDICATE SYSTEMS
         B     ENQYSYSS       SKIP REMAINING SCOPE PROCESSING
ENQNSYSS EQU   *              *
         OI    MINFLGS-MIN(R12),MINSYS   INDICATE SYSTEM
ENQYSTEP EQU   *              USED TO SKIP REMAINING SCOPE PROCESSING
ENQYSYSS EQU   *              USED TO SKIP REMAINING SCOPE PROCESSING
* MOVE MINOR NAME
         L     R14,PELMINA    GET ADDRESS OF RNAME
         ICM   R15,M0001,PELMILEN   Q. LENGTH OF RNAME ZERO
         BNZ   ENQYMIL        A. NO, BYPASS ZERO PROCESSING
         IC    R15,ZERO(R14)  GET LENGTH FROM BEGINNING OF RNAME
         LA    R14,ONE(R14)   BUMP RNAME POINTER PAST LENGTH
ENQYMIL  EQU   *              USED TO BYPASS PROCESSING FOR ZERO LENGTH
         STC   R15,MINNAMEL-MIN(R12)  SAVE LENGTH
         BCTR  R15,ZERO       DECREMENT LENGTH FOR EXECUTE
         EX    R15,MOVEMIN1   MOVE RNAME INTO MINOR
         EJECT
* CHAIN THE MINOR
*  INSERT AT THE TOP OF MINOR Q
         L     R10,MAJFMIN    GET ADDRESS OF FIRST MINOR
         LTR   R10,R10        Q. ANY MINORS
         BZ    ENQY1ST        A. NO, SKIP TO PROCESSING FOR FIRST MINOR
* NOT THE FIRST MINOR
         ST    R10,MINNMIN-MIN(R12)  SET NEXT POINTER IN NEW MINOR
         ST    R12,MINPMIN-MIN(R10)  SET PREVIOUS POINTER IN OLD MINOR
         B     ENQN1ST        SKIP PROCESSING OF FIRST MINOR
ENQY1ST  EQU   *              BRANCH TO ONLY WHEN FIRST MINOR
* FIRST MINOR
         ST    R12,MAJLMIN    INITIALIZE LAST MINOR POINTER
ENQN1ST  EQU   *              BRANCHED TO ONLY WHEN NOT FIRST MINOR
         ST    R12,MAJFMIN    RESET POINTER TO FIRST MINOR
         LR    R10,R12        TWO POINTERS TO MINOR QCB
* CHAIN OF MINOR COMPLETE
* SET GROUP NUMBER TO 1
* SET NUMBER OF QELS IN GROUP 1 TO 1
* SET GROUPS 2,3 AND 4 TO ZERO
         XC    GSGPAREA(GSGPLEN),GSGPAREA  ZERO GROUP COUNT AREA
         MVI   GSGROUP1+ONE,ONE    SET GROUP NUMBER TO ONE
         MVI   GSGRPNUM+THREE,ONE    NEW QEL IS IN GROUP 1
         SR    R11,R11        INDICATE NO MATCH QEL
         B     ENQNMIN        GO CREATE QEL
         EJECT
ENQYMIN  EQU   *              *
         TM    MINFLGS,MINNOENQ  Q. STOP ENQ FOR THIS MINOR
         BO    ENQYA838       A. YES. ABEND CODE '838'
         TM    TCBFLGS1,TCBFA Q. MY TCB ABENDING
         BZ    ENQNABND       A. NO.
         SPACE 2
*                                                              @ZA07146
* AVOID STEALING LOGIC FOR ENQ RET=TEST REQUEST                @ZA07146
*                                                              @ZA07146
         TM    WAPFLAG,PELRET1+PELRET2+PELRET3 Q. RET=TEST     @ZA07146
         BO    ENQYTST        A. YES, PROCESS NORMALLY         @ZA07146
         EJECT
* ENQ'S STEAL QEL ROUTINE
*
* REQUIREMENTS FOR STEALING
* ENQ'S CALLER MUST BE ABEND
* THE PRESENT OWNER MUST NOT BE ABEND.
* THE ENQUEUEING PROGRAM MUST HAVE HAD PERMANENTLY LOST CONTROL
* ENQUEUED TCB MUST BE IN SAME ABEND TCB TREE.
*
* R11 IS THE QEL SEARCH REG
* R12 CONTAINS THE ABENDED QELTCB IN THIS ADDRESS SPACE
* R14 IS USED AS A QUICKY REG
* R15 IS USED TO SEARCH TO THE TOP OF BOTH TREES
* R0 IS USED AS A BCT REG
* R1 IS USED TO SAVE THE TOP OF THE FIRST TCB TREE
ENQQQEL1 EQU   *              *
         L     R11,MINLQEL    GET BOTTOM QEL
ENQQQEL  EQU   *              *
         LTR   R11,R11        Q. ANY QEL LEFT
         BNP   ENQNQEL        A. NO. LOOP COMPLETE.
* CHECK IF THIS QEL BELONGS TO THIS ADDRESS SPACE
         CLC   QELASID(TWO),GSASID   Q. QEL IN THIS ADDRESS SPACE
         BNE   ENQNASID       A. NO. DONT STEAL.
         L     R12,QELTCB     GET THE QEL'S TCB
         LTR   R12,R12        DITTO
         BP    ENQYTCB        DITTO
         L     R12,QELTCB-QEL(R12)  DITTO
ENQYTCB  EQU   *              *
* CHECK IF QEL TCB IS ABENDING
         CR    R4,R12         Q. THIS TCB SAME AS QEL TCB
         BE    ENQYABNG       A. YES. CAN STEAL.
         TM    TCBFLGS5-TCB(R12),TCBABWF  Q. QEL-TCB ABENDING
         BZ    ENQNABNG       A. NO. CANT STEAL.
ENQYABNG EQU   *              *
         SPACE 3
* ARE THE TOPS OF BOTH TREES THE SAME
* INPUT R4 MYTCB R12 QELTCB
* OUTPUT R1 MYTOPTCB R15 QELTOPTCB
         LR    R1,R4          USE MY TCB TO FIND TOP
ENQQTOP1 EQU   *              *
         TM    TCBFLGS1-TCB(R1),TCBFT  Q. IS IT TOP OF ABEND TREE
         BO    ENQYTOP1       A. YES.
         ICM   R1,M1111,TCBOTC-TCB(R1)  A. NO. GET MOTHER
         BNZ   ENQQTOP1       LOOP.
ENQYTOP1 EQU   *              *
         LR    R15,R12        USE QEL TCB TO FIND TOP
ENQQTOP2 EQU   *              *
         TM    TCBFLGS1-TCB(R15),TCBFT Q. IS IT TOP OF ABEND TREE
         BO    ENQYTOP2       A. YES.
         ICM   R15,M1111,TCBOTC-TCB(R15)  A. NO. GET MOTHER.
         BNZ   ENQQTOP2       LOOP.
ENQYTOP2 EQU   *              *
         SPACE 3
         CR    R1,R15         Q. DOES MY TOP MATCH QEL TCB'S TOP
         BNE   ENQNMTCB       A. NO, BYPASS STEALING           @ZA32935
*                                                              @ZA32935
*        SEE CHANGE ACTIVITY IN THE PROLOGUE FOR A GENERAL     @ZA32935
*        DESCRIPTION OF THIS FIX. HERE ARE A COUPLE OTHER      @ZA32935
*        COMMENTS:                                             @ZA32935
*       -STEALING IN GENERAL IS PERFORMED BECAUSE RTM WILL SET @ZA32935
*        NONDISPATCHABLE ALL DAUGHTER TASKS OF A TASK WHICH IS @ZA32935
*        ABNORMALLY TERMINATING. THE STEALING IS DONE BECAUSE  @ZA32935
*        ENQ RESOURCES MAY BE OWNED BY THESE TASKS. THERE IS   @ZA32935
*        VERY LIKELY CODE IN THE SYSTEM WHICH DEPENDS ON       @ZA32935
*        STEALING TO HAPPEN IN OTHER SITUATIONS IN ABNORMAL    @ZA32935
*        TERMINATION. THEREFORE, IT IS NECESSARY TO BE         @ZA32935
*        CAUTIOUS IN CHANGING CODE HERE. ONE KIND OF PROBLEM   @ZA32935
*        WHICH CAN OCCUR INVOLVES INTERLOCKS WHICH CAN ARISE   @ZA32935
*        BECAUSE OF ENQ'S ON MULTIPLE RESOURCES.               @ZA32935
*       -IF A TERM EXIT OR TASK RESOURCE MANAGER HOLDS AN ENQ  @ZA32935
*        RESOURCE AND IS THEN SET NON-DISPATCHABLE BY A HIGHER @ZA32935
*        LEVEL TASK FOR ABNORMAL TERMINATION (PERHAPS FOR      @ZA32935
*        CANCEL), A DEADLOCK COULD BE CREATED. THEREFORE, IT   @ZA32935
*        IS NECESSARY FOR THIS FIX TO BYPASS STEALING ONLY IF  @ZA32935
*        THE CURRENT TASK OWNS THE RESOURCE.                   @ZA32935
*                                                              @ZA32935
         TM    QELQFLGS,QELTCBFA  WAS TCBFA ON WHEN QEL BUILT? @ZA32935
         BZ    ENQYSTL        NO, CONTINUE STEAL PROCESSING    @ZA32935
         CR    R4,R12         IS RESOURCE OWNED BY CURRENT TCB @ZA32935
         BE    ENQNSTL        YES, BYPASS STEALING             @ZA32935
ENQYSTL  EQU   *                                               @ZA32935
* DEQUEUE TO AVOID INTERLOCK IN ABEND PROCESSING
         ST    R4,GSR14SAV    SAVE REG ACROSS DEQUEUE
         LR    R4,R12         INSERT QELTCB FOR DEQ(DIRECTED DEQ)
         BAL   R3,XQELSCAN    TAKE SNAPSHOT OF QUEUES
         LTR   R11,R11        Q. FIND IT
         BZ    ENQNFIND       A. NO.
         BAL   R2,XDEQQEL     DEQUEUE THE QEL
ENQNFIND EQU   *              *
         L     R4,GSR14SAV    SAVE REG ACROSS DEQUEUE
         LTR   R10,R10        Q. MINOR CHANGE
         BP    ENQQQEL1       A. NO.
         B     ENQQMAJ        A. YES. BEGIN AGAIN.
         SPACE
ENQNMTCB EQU   *              *                                @ZA32935
ENQNSTL  EQU   *              *                                @ZA32935
ENQNABNG EQU   *              *
ENQNASID EQU   *              *
         L     R11,QELPQEL    GET PREVIOUS QEL.
         B     ENQQQEL        LOOP.
         EJECT
ENQNQEL  EQU   *              *
ENQYTST  EQU   *              BYPASSES ENQ RESOURCE STEALING
ENQNABND EQU   *              *
         BAL   R3,XQELSCAN    SEARCH FOR MATCHING QEL
         LA    R12,ONE        SET TO ONE FOR COMPARE
         LTR   R11,R11        Q. SECOND REQUEST FOR THIS TASK
         BZ    ENQYNEW        A. NO. THIS IS A NEW REQUEST.
         C     R12,GSGRPNUM   Q. IS GROUP NUMBER ONE.
         BNE   ENQYWTNG       A. OWNER WAITING 'RETUN CODE 20'
         TM    WAPFLAG,PELSTPMC  Q. SMC=STEP AND RET=HAVE
         BZ    ENQNSMC        A. NO.
         TM    WAPFLAG,PELRET1+PELRET2  Q. SMC=STEP AND RET=HAVE
         BNZ   ENQNHAVE       A. NO.
         TM    WAPFLAG,PELRET3   Q. SMC=STEP AND RET=HAVE
         BZ    ENQNHAVE       A. NO
* SMC=STEP AND RET=HAVE
* THE QELMC BIT IS SET , NO QEL IS BUILT
* THE QEL IS CHANGED FROM THE PREVIOUS REQUEST ONLY IN
*        THAT THE QEL MC FLAG IS SET
*        A STATUS WILL BE ISSUED EVEN THOUGH NO QEL WAS BUILT.
*        THE SAME ACTION CAN BE ACCOMPLISHED BY THE CALLER
*        IF HE ISSUES STATUS DIRECTLY
         TM    QELQFLGS,QELMC   Q. IN MUST COMPLETE ALREADY
         BO    ENQYMC         A. YES. DON'T ISSUE STATUS AGAIN
         OI    WAFLAG1,WASTATUS  TELL MYSELF TO ISSUE STATUS
         OI    QELQFLGS,QELMC    INDICATE USER IN MUST COMPLETE STATE
         B     ENQYHAVE       GO BACK TO CALLER WITH 'RETURN CODE 8'
ENQYMC   EQU   *              *
ENQNHAVE EQU   *              *
ENQNSMC  EQU   *              *
         TM    WAPFLAG,PELRET2   Q. RET=CHNG
         BZ    ENQNCHNG       A. NO 'RETURN CODE 8'
         TM    WAPFLAG,PELRET1+PELRET3   Q. RET=CHNG
         BNZ   ENQNCHNG       A. NO. 'RETURN CODE 8'
* RET=CHNG
         CH    R12,GSGROUP1   Q. ONLY QEL IN GROUP 1
         BNE   ENQYSHRN       A. NO. CURRENTLY SHARING.
* CAN CHANGE BECAUSE IT'S THE ONLY QEL IN GROUP 1
         TM    WAPFLAG,PELSTPMC   Q.  SMC=STEP
         BZ    ENQNSMC2       A. NO.
         TM    QELQFLGS,QELMC Q. IN MUST COMPLETE ALREADY
         BO    ENQYMC1        A. YES. DONT REISSUE STATUS
         OI    QELQFLGS,QELMC INDICATE USER IN MUST COMPLETE STATE
         OI    WAFLAG1,WASTATUS   TELL MYSELF TO ISSUE STATUS
ENQYMC1  EQU   *              *
ENQNSMC2 EQU   *              *
         NI    QELQFLGS,XFF-QELSHARE MAKE EXCLUSIVE
         B     ENQYCHNG       'RETURN CODE 0' AOK
         EJECT
ENQYNEW  EQU   *              *
         TM    WAPFLAG,PELRET2  Q. RET=CHNG
         BZ    ENQNCNG1       A. NO.
         TM    WAPFLAG,PELRET1+PELRET3  Q. RET=CHNG
         BZ    ENQYCNG1       A. YES. 'RETURN CODE 8'
ENQNCNG1 EQU   *              NOT RET=CHNG
         TM    WAPFLAG,PELRET2+PELRET3  Q. RET=TEST OR RET=USE
         BNO   ENQNTU         A. NO. BUILD QEL
         C     R12,GSGRPNUM   Q. WOULD THE NEW QEL BE IN GROUP 1
         BNE   ENQNGP1        A. NO. 'RETURN CODE 4'
         TM    WAPFLAG,PELRET1+PELRET2+PELRET3  Q. RET=TEST
         BO    ENQYTST2       A. YES. 'RETURN CODE 0'
ENQNTU   EQU   *              *
* BUILD A QEL
         BAL   R3,XGETQEL     GET QEL CORE.
         TM    WAFLAG2,WANOCORE  Q. OUT OF CORE
         BO    ENQNCORE       A. YES 'ABEND 638'
         EJECT
* INITIALIZE THE QEL
ENQNMIN  EQU   *              *
* INITIALIZE AND CHAIN THE QEL
         L     R12,GSQLWORD   GET THE QEL ADDRESS.
* R11 IS THE CURRENT QEL
* R12 IS THE NEW QEL TO BE CHAINED
* R15 IS THE LIST QEL FOR THIS REQUEST.
* R14 IS USED AS A QUICKY WORK REG
* R0 IS USED TO CONTAIN A ZERO
         XC    ZERO(QELSIZE1,R12),ZERO(R12)   ZERO FIRST 4 WORDS
         TM    PELFLAG,PELSHARE  Q. IS IT A SHARED REQUEST
         BZ    ENQNSHR        A. NO.
         OI    QELQFLGS-QEL(R12),QELSHARE  A. YES. INDICATE SHARED.
ENQNSHR  EQU   *              *
         TM    WAPFLAG,PELSTPMC   Q. SMC=STEP
         BZ    ENQNSMC1       A. NO.
         OI    QELQFLGS-QEL(R12),QELMC  INDICATE MUST COMPLETE
         OI    WAFLAG1,WASTATUS  TELL MYSELF TO ISSUE STATUS
ENQNSMC1 EQU   *              *
         ICM   R15,M1111,GSLSTQEL  Q. WILL THE NEW QEL BE THE LIST QEL
         BZ    ENQYLQEL       A. YES.
* BUILD A SUB QEL
         O     R15,HIGHBIT    POINT THIS AT THE LIST QEL
         ST    R15,QELLQEL-QEL(R12)   DITTO
         ICM   R14,M0111,QELLFLGS-QEL(R15)  GET FLAGS AND ASID.
         STCM  R14,M0111,QELLFLGS-QEL(R12) PROPAGATE THEM
         LA    R1,QELSIZE1    ADDRESS OF UCB STORE
         B     ENQNLQEL       CONTINUE.
ENQYLQEL EQU   *              LIST QEL INITIALIZATION.
         SR    R0,R0          ZERO FOR STORE
         ST    R0,QELLCNT-QEL(R12)  ZERO LIST AND WAIT COUNTS.
*        DO NOT UPDATE THE COUNT OF THIS TASKS LIST QEL'S,     @ZA20351
*        IF THE COUNT IS ABOUT TO WRAP AROUND. TCBQEL IS USED  @ZA20351
*        ONLY BY ENQ AND ITS RESOURCE MANAGER. IF TCBQEL WERE  @ZA20351
*        PERMITTED TO GO TO 0 WHEN IT IS REALLY A MULTIPLE OF  @ZA20351
*        256, THE ENQ/DEQ RESOURCE MANAGER WOULD NOT ATTEMPT   @ZA20351
*        TO DEQ ANY RESOURCES.                                 @ZA20351
         CLI   TCBQEL,XFF                                      @ZA20351
         BE    NOUPDATE       DO NOT UPDATE QEL COUNT          @ZA20351
         IC    R0,TCBQEL      BUMP TCB QEL(LIST QEL) COUNT
         A     R0,FONE        DITTO
         STC   R0,TCBQEL
NOUPDATE EQU   *                                               @ZA20351
         ICM   R14,M1111,WAECBA   Q. ECB REQUEST.
         ST    R5,QELSVRB-QEL(R12)  BEST GUESS ,NOT ECB
         BNM   ENQNECB1       A. NO
         ST    R14,QELECB-QEL(R12)    SAVE ECB ADDRESS
         OI    QELLFLGS-QEL(R12),QELECBF  INDICATE ECB
ENQNECB1 EQU   *              *
         ST    R4,QELTCB-QEL(R12)   SAVE THE TCB ADDRESS.
         OI    QELQFLGS-QEL(R12),QELLIST  INDICATE LIST QEL
         LH    R14,GSASID     GET THE ASID
         STH   R14,QELASID-QEL(R12)  SAVE THE ASID.
         LR    R15,R12        SET THE LIST QEL REG TO THIS QEL
         LA    R1,QELSIZE2    ADDRESS OF UCB STORE
         ST    R12,GSLSTQEL   SAVE THE LIST QEL ADDRESS.
ENQNLQEL EQU   *              *
* STORE UCB IF RESERVE REQUEST
         TM    PELFLAG,PELSCPE2   Q. UCB SPECIFIED.
         BZ    ENQNUCB1       A. NO.
         TM    PELFLAG,PELSCPE1   Q. UCB SPECIFIED.
         BO    ENQNUCB1       A. NO.
         L     R14,PELUCBAA   GET THE UCB ADDR ADDR
         L     R14,ZERO(R14)  GET THE UCB ADDR
         TM    UCBTBYT3-UCBOB(R14),UCB3DACC  Q. DASD           @YA00805
         BZ    ENQNUCB1       A. NO.                           @YA00805
         TM    UCBTBYT2-UCBOB(R14),UCB2OPT2  Q. SHARED         @YA00805
         BO    ENQYUCB1       A. YES.                          @YA00805
         LR    R0,R14         SAVE UCB ADDR                    @YA00805
         ICM   R14,M0111,UCBEXTP-UCBOB(R14)  GET UCB EXT. ADDR @YA00805
         TM    UCBFLP1-UCBETI(R14),UCBSHRUP Q. SHR CAPABILITY  @YA00805
         LR    R14,R0         RESTORE UCB ADDR                 @YA00805
         BZ    ENQNUCB1       A. NO. PROCESS AS NORMAL ENQ     @YA00805
ENQYUCB1 EQU   *              PROCESS AS RESERVE               @YA00805
         LA    R14,ZERO(R14)  CLEAR HIGH BYTE OF UCB ADDRESS   @YM04705
         ST    R14,ZERO(R1,R12)   STORE UCB ADDRESS
         OI    QELQFLGS-QEL(R12),QELRESV   SET THE RESERVE INDICATOR
ENQNUCB1 EQU   *              *
         TM    WAFLAG2,WANOAUTH  CHECK FOR NOT AUTH.           @ZA17306
         BO    ENQNAUT2       NOT AUTH., DO NOT SET FLAG       @ZA17306
         OI    QELQFLGS-QEL(R12),QELAUTH  SET AUTH. FLAG       @ZA17306
ENQNAUT2 EQU   *                                               @ZA17306
         TM    TCBFLGS1,TCBFA IS TASK TERMINATING ABNORMALLY?  @ZA32935
         BZ    ENQNFA         NO, DO NOT SET FLAG              @ZA32935
         OI    QELQFLGS-QEL(R12),QELTCBFA  YES, SET FLAG       @ZA32935
ENQNFA   EQU   *                                               @ZA32935
* BUMP THE LIST QEL COUNT (NUMBER OF ACTIVE QELS)
         LH    R14,QELLCNT-QEL(R15)   BUMP COUNT
         LA    R14,ONE(R14)   DITTO
         STH   R14,QELLCNT-QEL(R15)   DITTO
         EJECT
* CHAIN THE QEL
         ICM   R11,M1111,MINLQEL   GET THE LAST QEL OFF MINOR
         BZ    ENQYFIRS       THERE IS NONE
* ADD TO BOTTOM
         ST    R11,QELPQEL-QEL(R12)  SET PREVIOUS
         ST    R12,QELNQEL-QEL(R11)  SET NEXT
         B     ENQNFIRS       CONTINUE
ENQYFIRS EQU   *              ADD TO THE MINOR
* ONLY QEL
         ST    R12,MINFQEL-MIN(R10)   SET FIRST
ENQNFIRS EQU   *              *
         ST    R12,MINLQEL-MIN(R10)  SET LAST
         LR    R11,R12        MAKE NEW THE CURRENT
         EJECT
         LA    R0,TWO         USE TWO FOR COMPARE(S)
         C     R0,GSGRPNUM    Q. GROUP 1
         BNH   ENQNGRP1       A. NO.
* GROUP 1
         TM    QELQFLGS,QELRESV   Q. RESERVE
         BZ    ENQNRESV       A. NO 'RETURN CODE 0'
* RESERVE AND GROUP 1
         L     R15,PELUCBAA   GET THE UCB ADDR ADDR
         L     R15,ZERO(R15)  GET THE UCB ADDR
         SR    R14,R14        BUMP UCB RESERVE COUNT
         IC    R14,UCBSQC-UCBOB(R15)  DITTO
         LA    R14,ONE(R14)   DITTO
         STC   R14,UCBSQC-UCBOB(R15)  DITTO
         TM    QELQFLGS,QELAUTH  CHECK FOR AUTH. INVOKER       @ZA17306
         BNO   ENQNAUT3       SKIP SYSEVENT                    @ZA17306
         LR    R1,R10         PASS MINOR QCB TO SRM            @ZA17306
         LH    R0,QELASID     PASS ASID TO SRM                 @ZA17306
         SYSEVENT ENQHOLD,ASID=(0),ENTRY=BRANCH                @ZA17306
ENQNAUT3 EQU   *                                               @ZA17306
         B     ENQYRESV       'RETURN CODE 0'
ENQNGRP1 EQU   *              NOT GROUP 1
* NOT GROUP 1
         LH    R14,QELWCNT-QEL(R15)  BUMP THE WAIT COUNT
         LA    R14,ONE(R14)   DITTO
         STH   R14,QELWCNT-QEL(R15)  DITTO
         C     R0,GSGRPNUM    Q. GROUP 2
         BNE   ENQNGRP2       A. NO
* GROUP 2
         LH    R14,GSGROUP2       Q. 1 QEL IN GROUP 2
         CR    R0,R14         DITTO
         BNH   ENQNONE            A. NO.
         LH    R1,GSGROUP1        GET NUMBER OF QELS IN GROUP 1
         L     R12,MINFQEL    GET FIRST QEL IN GROUP 1
         BAL   R3,XHOLD       ISSUE THE HOLD EVENT FOR GROUP 1
ENQNONE  EQU   *              *
ENQNGRP2 EQU   *              *
* GROUP 2 OR MORE
         TM    WAECBA,WAECBF  Q. ECB REQUEST
         BO    ENQYECB        A. YES. 'RETURN CODE 4'
         OI    WAFLAG2,WAWAIT SET WILL WAIT WITHIN ENQ.
         L     R12,CVTPTR            GET CVT ADDRESS           @Z30BNVD
         L     R12,CVTASVT-CVT(R12)  GET ASVT ADDRESS          @Z30BNVD
         LA    R1,MINFQEL            PREPARE QEL PTR FOR LOOP  @Z30BNVD
NEXTQEL  EQU   *                     LOOP LABEL                @Z30BNVD
         L     R1,ZERO(R1)           GET FIRST/NEXT QEL ADDR   @Z30BNVD
         LTR   R1,R1                 Q. ANY MORE QELS          @Z30BNVD
         BZ    ENQNECB               A. NO. DONE               @Z30BNVD
         LH    R3,QELASID-QEL(R1)    GET ASID FROM QEL         @Z30BNVD
         BCTR  R3,ZERO               ASVT INDEX = ASID-1       @Z30BNVD
         SLL   R3,TWO                MULTIPLY INDEX BY 4       @Z30BNVD
         L     R3,ASVTENTY-ASVT(R3,R12)  GET ASCB ADDR         @Z30BNVD
         TM    ASCBDSP1-ASCB(R3),ASCBNOQ Q. ASCB REMOVED FROM          X
                                            DISPATCHING QUEUE  @Z30BNVD
         BZ    NEXTQEL               A. NO. GO GET ANOTHER     @Z30BNVD
         OI    WAFLAG3,WALONGWT      LONG WAIT TO BE ISSUED    @Z30BNVD
         B     ENQNECB        'RETURN CODE 0'
         EJECT
ENQYA838 EQU   *              *
* REQUEST DENIED
         MVI   WAERR,AB838    'ABEND CODE 838'
         B     ENQPART2       PROCEED TO PART 2
ENQYA638 EQU   *              'ABEND CODE 638'
* OUT OF CORE
ENQNCORE EQU   *              OUT OF CORE
         MVI   WAERR,AB638    'ABEND CODE 638'
         B     ENQPART2       PROCEED TO PART 2
* ABEND CODE 538 IS OBSOLETE
ENQYA438 EQU   *              'ABEND CODE 438'
* INVALID PARAMETER LIST
ENQYRESB EQU   *              'RESERVED BITS SPECIFIED'
ENQNENTY EQU   *              *
ENQNDEV  EQU   *              *
ENQNTIOT EQU   *              *
ENQYCONF EQU   *              CONFLICTING PARAMETERS
ENQNTCB1 EQU   *              *
         MVI   WAERR,AB438    'ABEND CODE 438'
         B     ENQPART2       PROCEED TO PART 2
ENQYA338 EQU   *              ' ABEND CODE 338 '
* NOT AUTHORIZED FOR REQUESTED FUNCTION
ENQNAUTH EQU   *              CALLER NO AUTHORIZED
         MVI   WAERR,AB338    ' ABEND CODE 338 '
         B     ENQPART2       PROCEED TO PART 2
ENQYA238 EQU   *              'ABEND CODE 238'
ENQYMIL0 EQU   *              MINOR NAME LENGTH OF 0
* MINOR NAME LENGTH 0
         MVI   WAERR,AB238    'ABEND CODE 238'
         B     ENQPART2       PROCEED TO PART 2
ENQYRC20 EQU   *              'RETURN CODE 20'
ENQYWTNG EQU   *              *
* TASK IS WAITING FOR RESOURCE
* RET=NONE (SEE ABEND 138)
         MVI   WARET,TWENTY   'RETURN CODE 20'
         B     ENQPART2       PROCEED TO PART 2
* RETURN CODE 12 AND 16 HAVE BECOME OBSOLETE
ENQYRC8  EQU   *              *                                @YM03340
ENQNCHNG EQU   *              *                                @YM03340
ENQYHAVE EQU   *              *                                @YM03340
* TASK ALREADY OWNS RESOURCE
         NI    WAPLAST,XFF-PELSHR INDICATE EXCLUSIVE           @YM03340
*                                 RESOURCE CONTROL
         TM    QELQFLGS-QEL(R11),QELSHARE  Q. SHARED RESOURCE  @YM03340
         BZ    ENQYXCLU       A. NO - EXCLUSIVE CONTROL        @YM03340
         OI    WAPLAST,PELSHR INDICATE SHARED RESOURCE         @YM03340
ENQYXCLU EQU   *              BYPASS SETTING OF SHR FLAG       @YM03340
ENQYCNG2 EQU   *              *
ENQYCNG1 EQU   *              *
ENQYCNG3 EQU   *              *
* RET=CHNG  NOTHING FOUND
* RET=NONE  NEVER (SEE ABEND CODE 138)
         MVI   WARET,EIGHT    'RETURN CODE 8'
         B     ENQPART2       PROCEED TO PART 2
ENQYRC4  EQU   *              *
ENQYSHRN EQU   *              *
ENQNGP1  EQU   *              *
ENQYECB  EQU   *              *
* RET=NONE  NEVER
* RET=TEST  NOT AVAILABLE
* RET=USE   NOT AVAILABLE
* RET=HAVE  NEVER
* RET=CHNG  CURRENTLY SHARING
* ECB=      NOTAVAILABLE, WAIT FOR POST
         MVI   WARET,FOUR     'RETURN CODE 4'
         B     ENQPART2       PROCEED TO PART 2
ENQYRC0  EQU   *              *
ENQYTEST EQU   *              *
ENQYCHNG EQU   *              *
ENQNRESV EQU   *              *
ENQNECB  EQU   *              *
ENQYRESV EQU   *              *
ENQYTST1 EQU   *              *
ENQYTST2 EQU   *              *
* RET=NONE  ASSIGNED
* RET=TEST  IS AVAILABLE
* RET=USE   ASSIGNED
* RET=HAVE  ASSIGNED
* RET=CHNG  RESOURCE NOW EXCLUSIVE
* ECB=      ASSIGNED, DO NOT WAIT ON ECB
         MVI   WARET,ZERO     ZERO RETURN CODE                 @YM04705
ENQYABN  EQU   *              *
         EJECT
ENQPART2 EQU   *              ENQ PART TWO
         CLI   WARET,ZERO     Q. IS THIS RETURN CODE ZERO
         BE    ENQYZERO       A. YES.
         OI    WAFLAG2,WAR15SW   INDICATE HAVE A NON ZERO RET CODE.
ENQYZERO EQU   *              *
         CLI   WAERR,ZERO     Q. ABEND REQUIRED.
         BNE   ENQYABND       A. YES
         TM    WAPFLAG,PELRET1+PELRET2+PELRET3  Q. RET=NONE (DEFAULT)
         BNZ   ENQYSTOR       A. NO.STORE RET CODE.
* RET=NONE
         CLI   WARET,ZERO     Q. RETURN CODE OF ZERO
         BE    ENQNSTOR       A. YES NOT A 138 AND DON'T STORE R.C.
         MVI   WAERR,AB138    CHANGE TO 138 ABEND.
         B     ENQY138        'ABEND WITH CODE 138'
ENQYSTOR EQU   *              *
         LR    R14,R8         CURRENT PEL
         S     R14,WANEWPEL   PEL DISPLACEMENT
         AL    R14,WAOLDPEL   CORRESPONDING OLD PEL
         LH    R2,WAKEY       GET THE USERS KEY
TEST6A   EQU   *              *
         MODESET  KEYADDR=(2)  SET PSW TO CALLERS KEY
         SR    R15,R15        ZERO WORK REG                    @YM03340
         IC    R15,WARET      GET RETURN CODE
         STC   R15,PELRET-PEL(R14)  STORE RETURN CODE.
         C     R15,FEIGHT     Q. RETURN CODE 8                 @YM03340
         BNE   ENQNNO8        A. NO, SKIP ADDITIONAL SUPPORT   @YM03340
         NI    PELLAST-PEL(R14),XFF-PELSHR  INDICATE EXCLUSIVE @YM03340
         TM    WAPLAST,PELSHR Q. SHARED RESOURCE               @YM03340
         BZ    ENQYXCL        A. NO SKIP SETTING SHARE FLAG    @YM03340
         OI    PELLAST-PEL(R14),PELSHR  INDICATE SHARED        @YM03340
ENQYXCL  EQU   *              BYPASS SETTING OF SHR FLAG       @YM03340
ENQNNO8  EQU   *              BYPASS EXCLUSIVE/SHARE SUPPORT   @YM03340
TEST6B   EQU   *              *
         MODESET  EXTKEY=SUPR   SET KEY BACK TO ZERO
ENQNSTOR EQU   *              *
         TM    PELLAST,PELEOL  Q. END OF LIST
         BO    ENQYEOL        A. YES END OF LIST
         TM    PELFLAG,PELSCPE2  Q. UCB PARM ELEM
         BZ    ENQNUCB2       A. NO.
         TM    PELFLAG,PELSCPE1  Q. UCB PARM ELEM
         BO    ENQNUCB2       A. NO.
         LA    R8,FOUR(R8)    COMPENSATE FOR UCB WORD
ENQNUCB2 EQU   *              *
         LA    R8,PELELEM(R8)  BUMP TO NEXT ELEMENT
         B     ENQQPEL        PROCESS THE NEXT ELEMENT
ENQYEOL  EQU   *              YES END OF LIST
         NI    WAFLAG1,XFF-WACMS  INDICATE FREED CMS
X9       SETLOCK  RELEASE,TYPE=CMS,RELATED=((X4))  RELEASE CMS
TEST7    EQU   *              *
         NI    WAFLAG1,XFF-WAFRR  INDICATE DELETED FRR
         SETFRR D,WRKREGS=(R14,R15) DELETE FRR.
TEST8    EQU   *              *
         TM    WAFLAG2,WAWAIT   Q. MUST WAIT.                  @YM03564
         BZ    ENQNWAIT       A. NO. SKIP WAIT.                @YM03564
* WAIT
*
* NEED ESTAE EXIT TO COVER WAIT - CLEAN-UP RELATED CNTL BLKS   @ZA03873
* REGS 1, 13 AND 15 ARE USED DURING INTERFACE TO ESTAE         @Z40FPVD
         LR    R1,R5           DUPLICATE RB ADDR               @Z40FPVD
         LA    R13,ENQESTAE    ESTAE EXIT ROUTINE ADDR         @ZA03873
         S     R1,ERBPREL      RB PERFIX ADDR                  @Z40FPVD
         FESTAE EXITADR=(R13),RBADDR=(R1),TCBADDR=(R4),                X
               PARAM=(R5),TERM=YES,RECORD=YES                  @Z40FPVD
         LA    R0,ONE         WAIT COUNT
         TM    WAFLAG3,WALONGWT  Q. ISSUE LONG WAIT            @Z30BNVD
         BZ    NORMWAIT       A. NO. SKIP IT                   @Z30BNVD
         O     R0,HIGHBIT     LONG WAIT INDICATOR
NORMWAIT EQU   *              ECB PREPARATION                  @Z30BNVD
         SR    R1,R1          ZERO ECB MEANS RB WAIT
         L     R15,WAITADDR   GET BRANCH ENTRY TO WAIT
         STM   R0,R15,TCBGRS-TCB(R4)  SAVE ENQ REGS
         LA    R14,ENQXADDR   GET RESUME ADDRESS
         ST    R14,RBOPSW+FOUR   SET RESUME ADDRESS.
         NI    WAFLAG1,XFF-WALOCAL  WAIT FREES LOCK, FLAG OFF  @YM03564
TEST9    EQU   *              *
         BALR  R14,R15        WAIT WITH NO ECB.
* THE ABOVE BALR IS ONLY AN ILLUSION
ENQXADDR EQU   *              GET RESUME ADDRESS
         FESTAE 0,WRKREG=(R13)                                 @Z40FPVD
ENQNWAIT EQU   *              *
         TM    WAFLAG1,WASTATUS  Q. ISSUE STATUS
         BZ    ENQNSTAT       A. NO
         TM    WAFLAG1,WALOCAL  Q. HOLD LOCAL LOCK             @YM03564
         BO    YLOCKED3       A. YES NO NEED TO OBTAIN         @YM03564
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=((X7))  @YM03564
         OI    WAFLAG1,WALOCAL  INDICATE LOCAL LOCK HELD       @YM03564
YLOCKED3 EQU   *              USED TO BYPASS OBTAIN OF LOCK    @YM03564
*        INITIALIZE PARAMETERS FOR BRANCH ENTRY TO STATUS      @YM03564
         L     R0,FONE        STEP MUST COMPLETE               @YM03564
         SR    R1,R1          SET AND CURRENT TCB              @YM03564
         L     R15,CVTPTR     LOCATE STATUS BRANCH ENTRY ADDR. @YM03564
         L     R14,CVTABEND-CVT(R15)  DITTO                    @YM03564
         L     R15,SCVTSTAT-SCVTSECT(R14)  DITTO               @YM03564
         BALR  R14,R15        SET MUST COMPLETE                @YM03564
TEST10   EQU   *              *
ENQNSTAT EQU   *              *
         BAL   R3,XENDUP      PERFORM END PROCESSING           @YM03564
         SR    R15,R15        ASSUME R15 ZERO.
         TM    WAFLAG2,WAR15SW   Q. SET R15 TO ZERO
         BZ    ENQYZ15        A. YES
         L     R15,WAOLDPEL   SET R15 TO PARM LIST ADDR.
ENQYZ15  EQU   *              *
         L     R14,CVTPTR     GET CVT ADDRESS
TEST11   EQU   *              *
         L     R14,CVTEXPRO-CVT(R14)  GET EXIT ADDRESS.
         BR    R14            RETURN
ENQY138  EQU   *              *
ENQYABND EQU   *              *
ENQXRTRY EQU   *              RETRY FROM HERE AFTER ERROR
* R5,R6,R7 AND R13 ARE SET CORRECTLY
         BAL   R3,XENDUP      PERFORM END PROCESSING
         LA    R1,ENQCODE     GET BACK END OF ENQ CODE
         ICM   R1,M0010,WAERR   GET FRONT OF ABEND CODE
         ABEND (1),DUMP,,SYSTEM  ABEND MY CALLER
         EJECT
ENQESTAE EQU   *                  SOFTWARE RECOVERY ROUTINE    @ZA03873
         BALR  R15,ZERO           TEMP ADDRESSABILITY          @ZA03873
         USING *,R15              DITTO                        @ZA03873
         LM    R6,R7,BASE         PERMANENT ADDRESSABILITY     @ZA03873
         DROP  R15                                             @ZA03873
         USING IGC048,R6,R7       DITTO                        @ZA03873
         USING SDWA,R1                                         @ZA03873
         LA    R12,TWELVE         Q, SDWA AVAILABLE            @ZA03873
         CR    R0,R12             DITTO                        @ZA03873
         BE    ENQESKIP           A. NO, BYPASS CLEANUP, NO SA @ZA03873
         STM   R14,R12,TWELVE(R13) SAVE REGS IN SA             @ZA03873
         L     R5,SDWAPARM        PARM IS RB PTR               @ZA03873
         LR    R8,R13             SAVE SAVE AREA ADDR          @ZA03873
ENQEGLL  SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                @ZA03873X
               RELATED=(ENQERLL)                               @ZA03873
         OI    WAFLAG1,WALOCAL     INDICATE LOCAL LOCK HELD    @ZA03873
         SETFRR A,PARMAD=(R12),FRRAD=ENQFRR,WRKREGS=(R10,R11)  @ZA03873
         ST    R5,ZERO(R12)       FRR INPUT - WA @ABILITY      @ZA03873
ENQEGCMS SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,RELATED=(ENQECMS) @ZA03873
         OI    WAFLAG1,WACMS      INDICATE CMS LOCK HELD       @ZA03873
         L     R13,CVTPTR         GET GLOBAL SAVE AREA ADDR    @ZA03873
         L     R13,CVTSPSA-CVT(R13) DITTO                      @ZA03873
         L     R13,WSAGNQDQ-WSAG(R13) DITTO                    @ZA03873
         XC    GSCLEAR(GSCLEARL),GSCLEAR ZERO COMMON GS        @ZA03873
         L     R14,PSAAOLD         SAVE THE ASID               @ZA03873
         MVC   GSASID(TWO),ASCBASID-ASCB(R14) DITTO            @ZA03873
         ST    R8,GSPSAVE          SAVE CALLERS SA ADDR        @ZA03873
         L     R8,WANEWPEL         GET CORRECT PLIST ADDR      @ZA03873
         L     R4,PSATOLD          SUBROUTINES NEED TCB ADDR   @ZA03873
ENQELOOP EQU   *                   RESTART RESOURCE SEARCH     @ZA03873
         BAL   R3,XFINDMAJ         FIND MATCHING MAJOR         @ZA03873
         LTR   R9,R9               Q. FOUND A MAJOR            @ZA03873
         BNP   ENQENELM            A. NO, SKIP ELEMENT         @ZA03873
         BAL   R3,XFINDMIN         FIND MATCHING MINOR         @ZA03873
         LTR   R10,R10             Q. FOUND A MINOR            @ZA03873
         BNP   ENQENELM            A. NO, SKIP ELEMENT         @ZA03873
         BAL   R3,XQELSCAN         SCAN THE  QELS              @ZA03873
         LTR   R11,R11             Q. FOUND MATCH QEL          @ZA03873
         BZ    ENQENELM            A. SKIP ELEMENT             @ZA03873
         BAL   R2,XDEQQEL          DEQUE CURRENT QEL           @ZA03873
ENQENELM EQU   *                   SKIPS PROCESSING OF ELEMENT @ZA03873
         TM    PELLAST,PELEOL      Q. END OF LIST              @ZA03873
         BO    ENQEDONE            A. YES, GET OUT             @ZA03873
         TM    PELFLAG,PELSCPE2    Q. UCB ADDR PRESENT         @ZA03873
         BZ    ENQENUCB            A. NO, GET NEXT ELEMENT     @ZA03873
         TM    PELFLAG,PELSCPE1    Q. UCB ADDR PRESENT         @ZA03873
         BZ    ENQENUCB            A. NO, GET NEXT ELEMENT     @ZA03873
         LA    R8,FOUR(R8)         COMPENSATE  FOR UCB WORD    @ZA03873
ENQENUCB EQU   *                   SKIPS UCB COMPENSATION      @ZA03873
         LA    R8,PELELEM(R8)      BUMP TO NEXT ELEMENT        @ZA03873
         B     ENQELOOP            PROCESS NEXT ELEMENT        @ZA03873
ENQEDONE EQU   *                   PLIST PROCESSING COMPLETE   @ZA03873
         L     R8,GSPSAVE          CALLERS SA ADDR             @ZA03873
         NI    WAFLAG1,XFF-WACMS   FREED CMS LOCK              @ZA03873
ENQECMS  SETLOCK RELEASE,TYPE=CMS,RELATED=(ENQEGCMS)           @ZA03873
         SETFRR D,WRKREGS=(R14,R15) DELETE FRR                 @ZA03873
ENQERLL  SETLOCK RELEASE,TYPE=LOCAL,RELATED=(ENQEGLL)          @ZA03873
         LR    R13,R8              RESTORE CALLERS REG 13      @ZA03873
         LM    R14,R12,TWELVE(R13) RESTORE REGS                @ZA03873
         LR    R8,R14              SAVE RETURN ADDR            @ZA03873
         SETRP DUMP=IGNORE,RC=0,RECORD=NO                      @ZA10756
         LR    R14,R8              RESET RETURN ADDR           @ZA03873
ENQESKIP EQU   *                   BYPASSES PLIST PROCESSING   @ZA03873
         SR    R15,R15             NO SDWA - CONT WITH TERM    @ZA03873
         BR    R14                 RETURN TO RTM               @ZA03873
         EJECT
IEAVENQ2 EQU   *              RESOURCE MANAGER
         STM   R14,R12,TWELVE(R13)  SAVE REGS
         LR    R9,R13         SAVE CALLER'S REG 13
         BALR  R6,ZERO        TEMP ADDRESSABILITY
         USING *,R6
         DROP  R7
         LM    R6,R7,BASE     GET MODULE ADDRESSABILITY
         USING IGC048,R6,R7   MODULE ADDRESSABILITY
         USING RMPL,R8        RES. MGR. PARM LIST ADDRESSABILITY
         L     R8,ZERO(R1)    SAVE RMPL ADDRESS.
         L     R5,RMPLRMWA    OBTAIN R.M. WORK AREA
         LA    R14,RBEXSAVE-RBSECT   GET DISPLACEMENT TO XSAVE
         SLR   R5,R14         MAKE WORK AREA LOOK LIKE XSAVE
* REFERENCES ARE ONLY ALLOWED TO THE WORK AREA (NONE ALLOWED TO THE RB)
         XC    WA(WARMLEN),WA    ZERO R.M. SECTION
         ICM   R4,M1111,RMPLTCBA  Q. MEMORY TERMINATION
         BZ    ERMYMEM        A. YES. MUST CHECK ALL QELS.
* TASK TERMINATION
         TM    TCBFLGS2,TCBFJMC   Q. THIS TASK IN STEP MUST COMPLETE
         BZ    ERMNSTAT       A. NO DONT ISSUE STATUS.
         OI    WAFLAG2,WARMC   REMINDER TO ISSUE STATUS
         TM    RMPLFLG1,RMPLTYPE  Q. ABNORMAL TERMINATION
         BZ    ERMNAB         A. NO.
         OI    WAFLAG1,WAABNDMC   INDICATE ABENDED IN MUST COMPLETE
ERMNAB   EQU   *              *
ERMNSTAT EQU   *              *
         CLI   TCBQEL,ZERO    Q. ANY QELS FOR THIS TASK
         BE    ERMNQELS       A. NO. NOTHING TO DO.
         B     ERMNMEM        CONTINUE
ERMYMEM  EQU   *              *
* MEMORY TERMINATION
         L     R14,RMPLASCB   GET THE TERMINATED ASCB
         CLI   ASCBSMCT-ASCB(R14),ZERO  Q. DID MEM FAIL IN M.C.
         BE    ERMNSMC        A. NO
         OI    WAFLAG1,WAABNDMC    A. YES. REMEMBER THIS.
ERMNSMC  EQU   *              *
ERMNMEM  EQU   *              *
* NEED TO SCAN QUEUES
* INITIALIZE FOR MAIN LINE CODE
X5       SETLOCK  OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=((X7)) LOCK
TEST12   EQU   *              *
         OI    WAFLAG1,WALOCAL  INDICATE LOCAL LOCK SET
         LA    R2,ERMFRR      SETUP RM RECOVERY
         SETFRR  A,PARMAD=(R13),FRRAD=(R2),WRKREGS=(R14,R15)  COVER
TEST13   EQU   *              *
         OI    WAFLAG1,WAFRR  INDICATE A NEED TO RESET FRR.
         ST    R5,ZERO(R13)   FRR INPUT IS W.A. ADDRESSABILITY
X6       SETLOCK  OBTAIN,TYPE=CMS,MODE=UNCOND,RELATED=((X8)) LOCK
TEST14   EQU   *              *
         OI    WAFLAG1,WACMS  INDICATE CMS SET
         L     R13,CVTPTR     GET CVT ADDRESS.
TEST15   EQU   *              *
         L     R13,CVTSPSA-CVT(R13)   GET THE GLOBAL SAVE AREA TABLE
         L     R13,WSAGNQDQ-WSAG(R13)  GET ENQ GLOBAL SAVE AREA
         XC    GSCLEAR(GSCLEARL),GSCLEAR    RESET TO ZERO.
         ST    R9,GSPSAVE     SAVE CALLER'S REG 13
         LH    R15,RMPLASID   SAVE THE ASID
         STH   R15,GSASID     DITTO
         EJECT
* MAIN PROCESSING
         MVI   WARETRY,RETRYERM    PASS INDEX TO RETRY
         USING PEL,R8         ADDRESSABILITY TO PEL.
         LA    R8,DUMMYPEL    SETUP DUMMY PEL FOR QELSCAN RTN
         L     R9,CVTPTR      GET THE CVT ADDRESS
TEST16   EQU   *              *
         L     R9,CVTFQCB-CVT(R9)  GET THE FIRST MAJOR QCB
ERMQMAJ  EQU   *              *
         LPR   R9,R9          Q. ANY MAJORS
         BZ    ERMNMAJ        A. NO.  NONE LEFT.
         L     R10,MAJFMIN    GET FIRST MINOR.
ERMQMIN  EQU   *              *
         LPR   R10,R10        Q. ANY MOINORS
         BZ    ERMNMIN        A. NO. NONE LEFT
ERMQQEL  EQU   *              *
         L     R11,MINLQEL    DEQUEUE FROM BOTTOM.
* DEQ FROM BOTTOM AVOIDS SOME OVERHEAD (POSTS,SYSEVENTS,ETC.)
ERMQQEL1 EQU   *              *
         LPR   R11,R11        Q. ANY QELS LEFT.
         BZ    ERMNQEL        A.  NO.  TRY NEXT MINOR.
         LH    R15,QELASID    Q. SAME MEMORY
         CH    R15,GSASID     DITTO
         BE    ERMYQEL        A. YES. POSSIBLE DEQUEUE.
         L     R11,QELPQEL    GET THE PREVIOUS QEL.
         B     ERMQQEL1       LOOP
ERMYQEL  EQU   *              *
         BAL   R3,XQELSCAN    Q. MATCH FOR THIS ASID.TCB
         LTR   R11,R11        DITTO
         BZ    ERMNMTCH       A. NO.
* HAVE A MATCH QEL
         TM    WAFLAG1,WAABNDMC  Q. NEED A WARNING MESSAGE.
         BZ    ERMNWTO        A. NO.
         TM    QELQFLGS,QELSHARE   Q. NEED FOR WARNING MESSAGE
         BO    ERMNWTO        A. NO
         TM    MINFLGS,MINSTEP   Q. NEED FOR WTO WARNING MSG
         BO    ERMNWTO        A. NO
         ICM   R12,M1111,QELLQEL  Q. HAVE THE LIST QEL ADDRESS.
         BM    ERMYHAVE       A. YES
         LR    R12,R11        A. NO. HAVE NOW.
ERMYHAVE EQU   *              *
         ICM   R15,M0011,QELWCNT-QEL(R12)  Q. HAVE RESOURCE
         BNZ   ERMNWTO        A. NO. NEVER HAD THIS ONE.
         LA    R0,WTOLEN      GET MESSAGE LENGTH
         L     R14,SP253      GET SUBPOOL
         BAL   R12,XGET       GET STORAGE
         LTR   R15,R15        Q. CAN WTO BE WRITTEN
         BNZ   ERMNWTO        A. NO
* CONSTRUCT WTO MESSAGE
         MVC   FOUR(WTOLEN-FOUR,R1),ERMWTO2  'RESOURCE MAY BE DAMAGED'
         MVC   INSERT6+FOUR(INSERT6L,R1),MAJNAME  MOVE IN MAJOR NAME
         SR    R15,R15        CLEAR FOR INSERT
         IC    R15,MINNAMEL   GET LENGTH
         CH    R15,HMAXLEN    Q. LENGTH LT MAXIMUM LENGTH
         BL    ERMYLESS       A. YES.
         LA    R15,INSERT7L   NO. SET TO MAXIMUM LENGTH.
ERMYLESS EQU   *              *
         BCTR  R15,ZERO       MOVE MINOR NAME TO GOTTEN STORAGE.
         EX    R15,MOVEMIN2   DITTO
         LA    R15,INSERT7+TWO(R1,R15) FORMULATE ADDRESS
         MVC   FOUR(MAYLEN,R15),MAYBEDAM  MOVE REST OF MESSAGE
         L     R15,WAWTOQ     GET TOP OF QUEUE
         ST    R15,ZERO(R1)   SAVE TOP
         ST    R1,WAWTOQ      CHAIN THIS ONE.
ERMNWTO  EQU   *              *
         BAL   R2,XDEQQEL     DEQ THE MATCH QEL
         LTR   R9,R9          Q. DID MAJOR CHANGE
         BNP   ERMQMAJ        A. YES. PROCESS MAJOR.
         LTR   R10,R10        Q. MINOR CHANGE
         BNP   ERMQMIN        A. YES. PROCESS MINOR.
         B     ERMQQEL        PROCESS QEL
ERMNQEL  EQU   *              *
ERMNMTCH EQU   *              *
         L     R10,MINNMIN    GET NEXT MINOR
         B     ERMQMIN        LOOP ON MINOR QUEUE
ERMNMIN  EQU   *              *
         L     R9,MAJNMAJ     GET NEXT MAJOR
         B     ERMQMAJ        LOOP ON MAJOR QUEUE.
ERMNMAJ  EQU   *              *
* PROCESSED ALL QELS.
         ICM   R15,M1111,WAWTOQ  Q. ANY WTO'S
         BZ    ERMNWTOS       A. NO.
         LA    R0,WTOLEN      GET CORE FOR WTO.
         L     R14,SP253      GET SUBPOOL NUMBER
         BAL   R12,XGET       GET STORAGE
         LTR   R15,R15        Q. CAN WTO BE WRITTEN
         BNZ   ERMNWTOS       A. NO.
         MVC   FOUR(WTOLEN-FOUR,R1),ERMWTO1 'JOB FAILED IN STEP M.C.'
         LTR   R4,R4          Q. TCB
         BZ    ERMNTCB        A. NO.
         ICM   R15,M1111,TCBTIO  Q. TIOT.
         BZ    ERMNTIOT       A. NO.
         MVC   INSERT3+FOUR(INSERT3L,R1),TIOCNJOB-TIOT1(R15) JOB NAME
         MVI   INSERT4+FOUR(R1),C','   COMMA
         MVC   INSERT5+FOUR(INSERT5L,R1),TIOCSTEP-TIOT1(R15) STEP NAME
ERMNTIOT EQU   *              *
         C     R4,TCBJSTCB    Q. JOB STEP TCB.
         BE    ERMYJBST       A. YES
         MVC   INSERT5A+FOUR(TWO,R1),ST  MOVE IN STEP
ERMYJBST EQU   *              *
         L     R15,WAWTOQ     GET TOP OF QUEUE
         ST    R15,ZERO(R1)   SAVE TOP
         ST    R1,WAWTOQ      CHAIN THIS ONE.
         LA    R0,WTOLEN      GET CORE FOR WTO.
         L     R14,SP253      GET SUBPOOL NUMBER
         BAL   R12,XGET       GET STORAGE
         LTR   R15,R15        Q. CAN WTO BE WRITTEN
         BNZ   ERMNWTOS       A. NO.
         MVC   FOUR(WTOLEN-FOUR,R1),ERMWTP 'JOB FAILED IN M.C. (CODE)'
         C     R4,TCBJSTCB    Q. JOB STEP TCB
         BE    ERMYJS         A. YES.
         MVC   INSERT1+FOUR(INSERT1L,R1),ST  MOVE IN STEP ABREV.
ERMYJS   EQU   *              *
         MVO   ZERO(THREE,R1),TCBCMPC(TWO) MOVE ABC TO 0ABC
         ICM   R15,M1100,ZERO(R1)    Q. SYSTEM CODE
         BNZ   ERMYSYST       A. YES.
         MVI   INSERT2+FOUR(R1),C'U'  A.NO. USER CODE.
         MVC   ZERO(TWO,R1),TCBCMPC+ONE  MOVE XABC TO XABC
ERMYSYST EQU   *              *
         UNPK  ZERO(FOUR,R1),ZERO(THREE,R1)  UNPACK XABC TO FAFBFC
         TR    ZERO(THREE,R1),TABLE-C'0'   TRANSLATE FAFBFC TO C'ABC'
         MVC   INSERT2+FOUR+ONE(THREE,R1),ZERO(R1)  MOVE RESULT.
ERMNTCB  EQU   *              *
         L     R15,WAWTOQ     GET TOP OF QUEUE
         ST    R15,ZERO(R1)   SAVE TOP
         ST    R1,WAWTOQ      CHAIN THIS ONE.
ERMNWTOS EQU   *              *
ERMXRTRY EQU   *              *
         L     R9,GSPSAVE     GET CALLER'S REG 13
ERMNQELS EQU   *              *
         BAL   R3,XENDUP      CLEAN UP WHERE NECESSARY
ERMQWTO1 EQU   *              *
         ICM   R12,M1111,WAWTOQ  Q. ANY WTO MESSAGES.
         BZ    ERMNWTO1       A. NO.
         L     R15,NEXT(R12)  UNCHAIN
         ST    R15,WAWTOQ     DITTO
* WRITE MESSAGE
         LA    R1,FOUR(R12)   GET MESSAGE ADDRESS
         LH    R0,ZERO(R1)    GET LENGTH
         WTO   MF=(E,(1))     WRITE TO OPERATOR OR PROGRAMER
TEST18   EQU   *              *
         LA    R0,WTOLEN      GET LENGTH TO FREE
         LR    R1,R12         PASS ADDRESS TO FREE
         L     R14,SP253      GET SUBPOOL
         BAL   R12,XSVCFREE   FREE THE STORAGE
         B     ERMQWTO1       LOOP.
ERMNWTO1 EQU   *              *
         LR    R13,R9         RESTORE CALLER'S REG13
         LM    R14,R12,TWELVE(R13)  RESTORE REGS.
TEST19   EQU   *              *
         BR    R14            RETURN
BASE     DC    A(IGC048)      FIRST BASE REGISTER VALUE
BASE1    DC    A(IGC048+4096) SECOND BASE REGISTER VALUE
         EJECT
XDEQQEL  EQU   *              DEQUEUE THE INPUT QEL
* INPUT--
* R11 IS THE QEL TO BE DEQUEUED
         ICM   R12,M1111,QELLQEL  Q. IS CURRENT QEL A SUB QEL
         BM    YSUBQEL        A. YES
* MAY HAVE TO DECREMENT THE TCBQEL COUNT (NUMBER OF LIST QELS)
         LR    R12,R11        A. NO. CURRENT IS A LIST QEL
YSUBQEL  EQU   *              *
         LH    R1,QELLCNT-QEL(R12)  GET THE NUMBER OF ACTIVE QELS.
         BCTR  R1,ZERO        DITTO
         STH   R1,QELLCNT-QEL(R12)  DITTO
         LA    R0,ONE         USED FOR COMPARE
         C     R0,GSGRPNUM    Q. MATCH IN GROUT 1
         BNE   NGROUP1        A. NO
* THE MATCH QEL IS IN GROUP 1
         TM    QELLFLGS-QEL(R12),QELPOST+QELECBF Q. SPOST NECESSARY
         BNO   NSPOST         A. NO.
         OI    WAFLAG1,WASPOST  INDICATE SPOST MUST BE ISSUED.
NSPOST   EQU   *              *
         LH    R1,GSGROUP2    GET NUMBER OF QELS IN GRP 2
         LTR   R1,R1          Q. GROUP 2 EXIST
         BZ    NGROUP2        A. NO
* MATCH IN GRP 1 AND GRP 2 EXISTS
         CH    R0,GSGROUP1    Q. LAST QEL IN GROUP 1
         BNE   NALONE         A. NO.
* LAST QEL IN GROUP 1 AND A GROUP 2 EXISTS.
         L     R12,QELNQEL    GET THE 1ST QEL IN GROUP 2
         BAL   R3,XPOST       POST GROUP 2
         LH    R1,GSGROUP3    GET QEL COUNT FOR GRP 3
         LTR   R1,R1          Q. GROUP 3 EXIST
         BZ    NGROUP3        A. NO.
         L     R12,QELNQEL    GET 1ST QEL IN GROUP 2
         LH    R1,GSGROUP2    GET GROUP 2 QEL COUNT.
         BAL   R3,XHOLD       ISSUE SYSEVENT FOR GROUP 2
NGROUP3  EQU   *              *
NALONE   EQU   *              *
         LA    R1,ONE         NUMBER OF QELS TO BE RLSE'D
         LR    R12,R11        RLSE CURRENT QEL
         BAL   R3,XRLSE       ISSUE SYSEVENT FOR THIS QEL
NGROUP2  EQU   *              *
         TM    QELQFLGS,QELRESV   Q. IS CURRENT QEL RESERVE QEL
         BZ    NRESERVE       A. NO.
* MATCH QEL IS IN GROUP 1 AND IS RESERVE
         TM    QELQFLGS,QELLIST  Q. LIST QEL
         L     R12,QELSIZE1(R11)   GET THE UCB ADDRESS
         BZ    NLSTQEL        A. NO.
         L     R12,QELSIZE2(R11)   GET THE UCB ADDRESS
NLSTQEL  EQU   *              *
* GROUP 1 AND RESERVE AND DASD DEVICE IS SHARABLE
         SR    R0,R0          ZERO FOR INSERT
         IC    R0,UCBSQC-UCBOB(R12)  DECREMENT THE RESERVE COUNT
         S     R0,FONE        DITTO
         STC   R0,UCBSQC-UCBOB(R12)  DITTO
         TM    QELQFLGS,QELAUTH  CHECK FOR AUTH. INVOKER       @ZA17306
         BNO   ENQNAUT4       SKIP SYSEVENT                    @ZA17306
         LR    R1,R10         PASS MINOR QCB TO SRM            @ZA17306
         LH    R0,QELASID     PASS ASID TO SRM                 @ZA17306
         SYSEVENT ENQRLSE,ASID=(0),ENTRY=BRANCH                @ZA17306
ENQNAUT4 EQU   *                                               @ZA17306
         CLI   UCBSQC-UCBOB(R12),ZERO  CHECK RESERVE COUNT     @ZA17306
         BNZ   NRELEASE       COUNT DID NOT GO TO ZERO
         TM    UCBFLB-UCBOB(R12),UCBRESVH Q. RESV. OUTSTANDING @YA00805
         BZ    NRELEASE       A. NO. SKIP RELEASE              @YA00805
* GRP 1 AND RESERVE AND SHRD DASD AND RESV COUNT HIT ZERO
* RELEASE THE RESERVED DEVICE (IF NOT ALREADY RELEASED)
         STM   R0,R15,GSSAVE1  SAVE REGS ACROSS 'STARTIO'
         LR    R2,R12         SAVE UCB ADDRESS.
         L     R14,SP245      GET SUBPOOL NUMBER
         LA    R0,ZLEN        GET LENGTH FOR IOSB AND SRB
         BAL   R12,XGET       GET CORE FOR IOSB AND SRB
         LTR   R15,R15        Q. CORE GOTTEN
         BNZ   NSIOCORE       A. NO. IGNORE 'STARTIO'
         LA    R3,ZSRB-Z(R1)  GET SRB ADDRESS.
         LA    R4,ZIOSB-Z(R1) GET IOSB ADDRESS.
         XC    Z-Z(ZLEN,R1),Z-Z(R1)   INITIALIZE IOSB AND SRB TO ZERO.
         ST    R4,SRBPARM-SRB(R3)   PASS IOSB ADDRESS AS PARAMETER
         OI    IOSOPT-IOSB(R4),IOSBYP+IOSRELSE  BYPASS CK.ADD RLSE CCW
         OI    IOSDVRID-IOSB(R4),IOSMISID  SET MISCELLANEOUS I.D.
         MVI   IOSASID+ONE-IOSB(R4),ONE    I/O RELATED TO MASTER A.S.
         LA    R1,XSTARTIO    ADDRESS OF SCHEDULED ROUTINE.
         ST    R1,IOSPGAD-IOSB(R4)  SAVE IT.
         ST    R2,IOSUCB-IOSB(R4)  PASS UCB ADDRESS.
         LA    R14,BR14       ADDRESS OF NOP EXIT ROUTINE.
         ST    R14,IOSNRM-IOSB(R4)  NOP NORMAL EXIT ROUTINE
         ST    R14,IOSABN-IOSB(R4)  NOP ABNORMAL EXIT ROUTINE
         STARTIO  SRB=(3)     RELEASE DEVICE, IF NEED BE.      @YM04188
NSIOCORE EQU   *              *
         LM    R0,R15,GSSAVE1  RESTORE REGS
NRELEASE EQU   *              *
NRESERVE EQU   *              *
         B     YGROUP1        CONTINUE.
NGROUP1  EQU   *              *
* MATCH NOT IN GROUP 1
         LH    R1,QELWCNT-QEL(R12)  LOWER THE WAIT COUNT.
         BCTR  R1,ZERO        DITTO
         STH   R1,QELWCNT-QEL(R12)  DITTO
         LA    R0,TWO         USE FOR COMPARE
         C     R0,GSGRPNUM    Q. MATCH IN GROUP 2
         BNE   NGRP2          A. NO.
* MATCH QEL IS IN GROUP 2
         LA    R0,ONE         USE FOR COMPARE
         CH    R0,GSGROUP2    Q. LAST QEL IN GROUP 2
         BNE   NALONE1        A. NO.
* MATCH IN GRP 2 AND LAST QEL IN GROUP 2
         L     R12,MINFQEL    GET 1ST QEL IN GROUP 1
         CH    R0,GSGROUP3    Q. GRP 3 EXIST
         BNH   YGRP3              A. YES.
* MATCH IN GRP 2 AND LAST QEL IN GRP 2 AND THERE IS NO GROUP 3
         LH    R1,GSGROUP1    GET THE NUMBER OF QELS IN GROUP 1
         BAL   R3,XRLSE       ISSUE SYSEVENT FOR GROUP 1
         B     NGRP3          CONTINUE.
YGRP3    EQU   *              *
* MATCH IN GRP 2 AND LAST QEL IN GROUP 2 AND A GRP 3 EXISTS
         TM    QELQFLGS-QEL(R12),QELSHARE  Q. GRP 1 SHARE
         BZ    NSHARE         A. NO.
         L     R12,QELNQEL    GET 1ST QEL IN GROUP 3
         TM    QELQFLGS-QEL(R12),QELSHARE  Q. GRP 3 SHARE
         BZ    NSHARE         A. NO.
*  MATCH QEL IS ONLY QEL IN GRP 2 AND GRPS 1 & 3 ARE SHARE
         LH    R1,GSGROUP3    GET QEL COUNT FOR GROUP 3
         BAL   R3,XPOST       POST GROUP 3
         SR    R0,R0          USE FOR COMPARE
         CH    R0,GSGROUP4    Q. GRP 4 EXIST
         BNE   YGRP4          A. YES.
* MATCH QEL IS LONE QEL IN GRP 2 AND GRPS 1&3 ARE SHARE AND NO GRP 4
         LH    R1,GSGROUP1    GET NUMBER OF QELS IN GROUP 1
         L     R12,MINFQEL    GET 1ST QEL IN GROUP 1
         BAL   R3,XRLSE       ISSUE SYSEVENT FOR GROUP 1
         B     NGRP4          CONTINUE.
YGRP4    EQU   *              *
* MATCH QEL IS LONE QEL IN GRP 2 AND GRPS 1&3 ARE SHARE AND A GRP 4
         LH    R1,GSGROUP3    GET NUMBER OF QELS IN GROUP 3
         L     R12,QELNQEL    GET 1ST QEL IN GROUP 3
         BAL   R3,XHOLD       ISSUE SYSEVENT FOR GROUP 3
NGRP4    EQU   *              *
NSHARE   EQU   *              *
NGRP3    EQU   *              *
NALONE1  EQU   *              *
NGRP2    EQU   *              *
YGROUP1  EQU   *              *
* MOST OF DEQUEUE COMPLETE
* FREE THE QEL (POSSIBLY THE MINOR AND THEN POSSIBLY THE MAJOR)
* FREEQMM
         LR    R12,R11        SAVE QEL TO BE FREED.
         L     R11,QELNQEL    SET CURRENT QEL TO NEXT QEL
         LCR   R11,R11        INDICATE A QEL CHANGE
* UNCHAIN THE INPUT QEL
         LA    R1,MINFQEL     PASS FIRST/LAST TO UNCHAIN RTN
         BAL   R3,XUNCHAIN    UNCHAIN
         TM    QELQFLGS-QEL(R12),QELLIST  Q. IS THIS A LIST QEL
         BO    YLISTQEL       A. YES.
         LR    R1,R12         PASS QEL TO BE FREED.
         L     R12,QELLQEL-QEL(R12)  GET THE LIST QEL ADDRESS.
         ST    R12,GSR2SAVE   SAVE THE LIST QEL ADDRESS
         BAL   R3,XFREEQEL    FREE THE SUB QEL
         L     R12,GSR2SAVE   RESTORE THE LIST QEL ADDRESS
YLISTQEL EQU   *              *
         ICM   R0,M0011,QELLCNT-QEL(R12)  Q. CAN LIST QEL BE FREED.
         BNZ   NFREE          A. NO.
         LTR   R4,R4          Q. POSSIBLE TO DECREMENT
         BZ    NDECR          A. NO. TCB NOT THERE
* DECREMENT
         L     R14,QELTCB-QEL(R12)   GET THE QEL TCB
*        DO NOT DECREMENT THE TCB LIST QEL COUNT IF IT IS 255. @ZA20351
*        TO PREVENT WRAPPING, WHEN TCBQEL IS INCREMENTED, IT   @ZA20351
*        IS NOT INCREMENTED BEYOND 255. THAT MAKES IT          @ZA20351
*        NECESSARY TO NOT DECREMENT TCBQEL ONCE IT REACHES 255.@ZA20351
*        (IF IT WERE DECREMENTED FROM 255, IT MIGHT REACH 0    @ZA20351
*        PREMATURELY.) THE ONLY EFFECT OF LEAVING THE COUNT AT @ZA20351
*        255 IS THAT THE RESOURCE MANAGER WILL SCAN            @ZA20351
*        FOR UN-DEQED RESOURCES EVEN WHEN THE TASK DOES        @ZA20351
*        NOT HAVE ANY ENQED RESOURCES.                         @ZA20351
         CLI   TCBQEL-TCB(R14),XFF                             @ZA20351
         BE    NDECR          DO NOT DECREMENT                 @ZA20351
         IC    R1,TCBQEL-TCB(R14)  DECREMENT THE TCB QEL COUNT
         BCTR  R1,ZERO        DITTO
         STC   R1,TCBQEL-TCB(R14)   DITTO
NDECR    EQU   *              *
         LA    R1,ZERO(R12)   PASS THE LIST QEL ADDRESS
         BAL   R3,XFREEQEL    FREE THE LIST QEL
NFREE    EQU   *              *
         ICM   R15,M1111,MINFQEL  Q. MINOR EMPTY
         BNZ   YQEL           A. NO.
* UNCHAIN THE MINOR.
         LR    R12,R10        GET MINOR TO BE FREED.
         L     R10,MINNMIN    MAKE NEXT THE CURRENT
         LCR   R10,R10        INDICATE A MINOR CHANGE
         LA    R1,MAJFMIN     PASS ADDR OF FIRST/LAST
         BAL   R3,XUNCHAIN    UNCHAIN THE MINOR.
         LR    R1,R12         PASS ADDRESS TO BE FREED
         BAL   R3,XFREEMIN    FREE THE MINOR.
         ICM   R15,M1111,MAJFMIN   Q. MAJOR EMPTY
         BNZ   YMIN               A. NO.
* UNCHAIN THE MAJOR
         LR    R12,R9         MAJOR TO BE FREED.
         L     R9,MAJNMAJ     MAKE NEXT MAJOR CURRENT
         LCR   R9,R9          INDICATE A MAJOR CHANGE
         L     R1,CVTPTR      GET CVT ADDRESS.
TEST21   EQU   *              *
         LA    R1,CVTFQCB-CVT(R1)  GET FIRST/LAST ADDRESS.
         BAL   R3,XUNCHAIN    UNCHAIN THE MAJOR.
         LR    R1,R12         PASS ADDRESS TO FREE
         BAL   R3,XFREEMAJ    FREE THE MAJOR.
YMIN     EQU   *              *
YQEL     EQU   *              *
* COMPLEMENTED REGISTER INDICATES A CHANGE TO THAT QUEUE.
* THE COMPLEMENTED ADDRESS IS THE NEW CURRENT ADDRESS.
         BR    R2             RETURN
         EJECT
XENDUP   EQU   *              *
         TM    WAFLAG1,WACMS  Q. HAVE CMS.
         BZ    NCMS           A. NO.
         NI    WAFLAG1,XFF-WACMS  INDICATE FREED CMS
X8       SETLOCK  RELEASE,TYPE=CMS,RELATED=((X4),(X6)) UNLOCK
TEST22   EQU   *              *
NCMS     EQU   *              *
         TM    WAFLAG1,WAFRR   Q. HAVE AN FRR
         BZ    NFRR1          A. NO
         SETFRR D,WRKREGS=(R14,R15) DELETE FRR.
TEST23   EQU   *              *
NFRR1    EQU   *              *
         TM    WAFLAG2,WANWPEL   Q. WAS PARM LIST CORE GOTTEN
         BZ    NMOVE          A. NO
         TM    WAFLAG1,WALOCAL  Q. HOLD LOCAL LOCK             @YM03564
         BO    YLOCKED1       A. YES, NO NEED TO OBTAIN        @YM03564
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=((X7))  @YM03564
         OI    WAFLAG1,WALOCAL  INDICATE LOCAL LOCK HELD       @YM03564
YLOCKED1 EQU   *              USED TO BYPASS OBTAIN OF LOCK    @YM03564
         L     R1,WANEWPEL    GET ADDRESS OF CORE TO FREE
         L     R0,WAPARMSZ    GET THE STORAGE LENGTH
         A     R0,WANAMESZ    DITTO
         L     R14,SP253      GET SUBPOOL
         BAL   R12,XFREE      FREE THE STORAGE                 @YM03564
NMOVE    EQU   *              *
         TM    WAFLAG2,WARMC  Q. ISSUE RESET M.C.
         BZ    NRMC           A. NO.
         TM    WAFLAG1,WALOCAL  Q. HOLD LOCAL LOCK             @YM03564
         BO    YLOCKED2       A. YES, NO NEED TO OBTAIN        @YM03564
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=((X7))  @YM03564
         OI    WAFLAG1,WALOCAL  INDICATE LOCAL LOCK HELD       @YM03564
YLOCKED2 EQU   *              USED TO BYPASS OBTAIN OF LOCK    @YM03564
* INITIALIZE PARAMETERS FOR BRANCH ENTRY TO STATUS             @YM03564
         L     R0,FONE        STEP MUST COMPLETE               @YM03564
         L     R1,HIGHBIT     RESET AND CURRENT TCB            @YM03564
         L     R15,CVTPTR     LOCATE STATUS BRANCH ENTRY ADDR. @YM03564
         L     R14,CVTABEND-CVT(R15)  DITTO                    @YM03564
         L     R15,SCVTSTAT-SCVTSECT(R14)  DITTO               @YM03564
         BALR  R14,R15        RESET MUST COMPLETE STATUS       @YM03564
TEST26   EQU   *              *
NRMC     EQU   *              *
         TM    WAFLAG1,WALOCAL      Q. HAVE LOCAL LOCK         @YM03564
         BZ    NLOCAL         A. NO.                           @YM03564
X7       SETLOCK  RELEASE,TYPE=LOCAL,RELATED=((X3),(X5))       @YM03564
TEST24   EQU   *              *                                @YM03564
NLOCAL   EQU   *              *                                @YM03564
         TM    WAFLAG2,WADAMAGE  Q. QUEUES BEEN DAMAGED.       @YM03564
         BZ    NDAMAGE        A. NO.                           @YM03564
         LA    R1,FRRWTO      GET Q-DAMAGE MESSAGE             @YM03564
         LH    R0,ZERO(R1)    GET LENGTH                       @YM03564
         WTO   MF=(E,(1))     WRITE IT.                        @YM03564
TEST25   EQU   *              *                                @YM03564
NDAMAGE  EQU   *              *                                @YM03564
         TM    WAFLAG1,WASPOST  Q. ISSUE SPOST
         BZ    NSPOST1        A. NO.
         SPOST
TEST29   EQU   *              *
NSPOST1  EQU   *              *
         BR    R3             RETURN.
         EJECT
XFINDMAJ EQU   *              *
         L     R9,CVTPTR      GET ADDRESS OF CVT
TEST30   EQU   *              *
         ICM   R9,M1111,CVTFQCB-CVT(R9)  Q. ANY MAJOR
         L     R12,PELMAJA    GET ADDRESS OF QNAME
QMAJOR   EQU   *              *
         BZR   R3             A. NO.
         CLC   ZERO(EIGHT,R12),MAJNAME    Q. MAJOR NAMES MATCH
         BER   R3             A. YES, STOP SEARCH
         ICM   R9,M1111,MAJNMAJ   Q. ANY MORE MAJORS
         B     QMAJOR         GO CHECK RESULTS
         EJECT
XFINDMIN EQU   *              *
* INPUT--
* R3 IS THE RETURN REGISTER.
* R8 HAS POINTER TO INPUT PARM ELEM.
* PELSCPE1,PELSCPE2,PELMINA,PELMILEN
* INPUT MINOR NAME (POINTED TO BY PELMINA)
* R9 CONTAINS POINTER TO CURRENT MAJOR
* MAJFMIN
* MINNMIN,MINSTEP,MINSYS,MINSYSS,MINASID,MINNAMEL,MINNAME
* R13 HAS POINTER TO GS (GLOBAL SAVE)
* GSASID
* PROCESS--
* R10 IS USED FOR CURRENT MINOR IN MINOR SEARCH.
* R12 IS USED TO POINT TO THE INPUT MINOR NAME.
* R14 IS USED AS A QUICKY REGISTER
* R15(LOW ORDER BYTE) CONTAINS THE INPUT PARM ELEM'S MINOR LENGTH.
* OUTPUT--
* R10 CONTAINS THE MATCHING MINOR (FIND) OR ZERO (NO FIND)
* R12,R14,R15 ARE DESTROYED.
         L     R10,MAJFMIN    GET THE FIRST MINOR.
         L     R12,PELMINA    GET ADDRESS OF MINOR NAME(OR MIN LEN)
         ICM   R15,M0001,PELMILEN   Q. IS MINOR LENGTH ZERO(DYNAMIC)
         BNZ   NDYNAM         A. NO. HAVE THE MINOR LENGTH.
         IC    R15,ZERO(R12)  GET THE DYNAMIC LENGTH.
         LA    R12,ONE(R12)   ADJUST ADDR TO POINT TO NAME
         B     QMINOR         MINOR LOOP.                      @YM03564
NEQSCOPE EQU   *              *                                @YM03564
NEQNAME  EQU   *              *                                @YM03564
NEQLEN   EQU   *              *                                @YM03564
         L     R10,MINNMIN    GET NEXT MINOR                   @YM03564
NDYNAM   EQU   *              *
* HAVE THE MINOR NAME LENGTH
QMINOR   EQU   *              *
         LTR   R10,R10        Q. ANY MORE MINORS.
         BZR   R3             A. NO. RETURN (NO FIND)
         LR    R14,R15        DUPLICATE MINOR NAME LENGTH      @YM03564
         IC    R14,MINNAMEL   GET LENGTH FROM MINOR QCB        @YM03564
         CR    R14,R15        Q. MINOR NAME LENGTHS EQUAL      @YM03564
         BNE   NEQLEN         A. NO. LENGTH NOT EQUAL.
* LENGTHS ARE EQUAL
* NOW CHECK FOR NAME MATCH.
         BCTR  R14,ZERO       Q. REQUEST FOR THIS MINOR        @YM03564
         EX    R14,COMPMIN    DITTO
         BNE   NEQNAME        A. NO. GET NEXT MINOR.
* NAMES ARE THE SAME
* NOW CHECK FOR SCOPE MATCH.
         TM    PELFLAG,PELSCPE1+PELSCPE2  Q. REQUESTING STEP
         BNZ   NSTEP          A. NO. REQUEST FOR SYSTEM OR SYSTEMS
         TM    MINFLGS,MINSTEP  Q. REQUEST FOR THIS MINOR
         BZ    NEQSCOPE       A. NO. SCOPE NOT EQUAL.
         LH    R14,GSASID     GET THE INPUT ASID.
         CH    R14,MINASID    Q. REQUEST FOR THIS MINOR
         BER   R3             A. YES. FOUND A MATCH. RETURN.
         B     NEQSCOPE       A. NO. SCOPE NOT EQUAL.
NSTEP    EQU   *              *
         TM    PELFLAG,PELSCPE2  Q. REQUESTING SYSTEMS
         BZ    NSYSTEMS       A. NO. REQUEST IS FOR SYSTEM
         TM    MINFLGS,MINSYSS   Q. REQUEST FOR THIS MINOR
         BOR   R3             A. YES. FOUND A MATCH. RETURN.
         B     NEQSCOPE       A. NO. SCOPE NOT EQUAL.
NSYSTEMS EQU   *              *
         TM    MINFLGS,MINSYS   Q. REQUEST FOR THIS MINOR
         BOR   R3             A. YES. FOUND A MATCH. RETURN.
         B     NEQSCOPE       A. NO. SCOPE NOT EQUAL           @YM03564
         EJECT
XFREE    EQU   *              *
         STM   R3,R4,WADWORD  SAVE REGS ACROSS FREEMAIN
TEST31   EQU   *              *
         LR    R3,R14         KEY AND SUBPOOL
         L     R4,PSATOLD     SETUP CURRENT TCB
         L     R7,PSAAOLD     GET CURRENT ASCB
         BALR  R15,ZERO       GET TEMP ADDRESSABILITY
         USING *,R15          GET TEMP ADDRESSABILITY
         FREEMAIN RC,LV=(0),A=(1),KEY=(3),SP=(3),BRANCH=YES FREE CORE
TEST32   EQU   *              *
         DROP  R15            RELEASE TEMP ADDRESSABILITY
         L     R7,BASE1       RESTORE CLOBBERED BASE
         LM    R3,R4,WADWORD  RESTORE REGS
         BR    R12            EXIT
         EJECT
XFREEMAJ EQU   *              *
         LA    R0,MAJLEN      GET MAJOR LENGTH
         B     XFREEE         FREE IT.
         SPACE 2
XFREEMIN EQU   *              *
         LA    R0,MINLEN      GET MINOR LENGTH
         SR    R14,R14        DITTO
         IC    R14,MINNAMEL-MIN(R1)  DITTO
         ALR   R0,R14         DITTO
         B     XFREEE         FREE IT.
         SPACE 2
XFREEQEL EQU   *              *
         LA    R0,QELSIZE1    GET FIRST SIZE(SUB QEL SIZE)
         TM    QELQFLGS-QEL(R1),QELLIST  Q. LIST QEL
         BZ    YSIZE1         A. NO. SUB QEL.
         LA    R0,QELSIZE2    GET SECOND SIZE (LIST QEL N/RESV)
YSIZE1   EQU   *              *
         TM    QELQFLGS-QEL(R1),QELRESV   Q. RESERVE
         BZ    NRESV2         A. NO.
* UCB WORD
         A     R0,FFOUR       ADD WORD FOR UCB.
NRESV2   EQU   *              *
YFREMAIN EQU   *              *
XFREEE   EQU   *              *
* CORE WILL BE RECYCLED IF IT FALLS WITHIN THE RANGE OF GSQUEUE AND
*  THE MAXIMUM COUNT FOR GSQUEUE HAS NOT BEEN REACHED.
*  OTHERWISE, THE CORE WILL BE FREED
         LR    R12,R0         SAVE THE LENGTH
* INPUT LENGTH IN R12 AND ADDRESS IN R1
         LA    R12,SEVEN(R12) OBTAIN INDEX WHILE ROUNDING
         SRL   R12,THREE      DITTO
         SLL   R12,TWO        DITTO
         C     R12,QRANGE     Q. FALL WITHIN QUEUES
         BH    YFREEIT        A. NO.  DO FREEMAIN.
         L     R14,GSCOUNT(R12)  Q. LIMITS REACHED             @Z30BNVD
         C     R14,QTAB(R12)  DITTO
         BNL   FREECHK        A. YES. CHECK WHICH TO FREE      @Z30BNVD
         LA    R14,ONE(R14)   BUMP THE QUEUE COUNT.
         L     R15,GSQUEUE(R12)  INSERT AT TOP OF QUEUE.
         ST    R15,NEXT(R1)   DITTO
         ST    R1,GSQUEUE(R12)  DITTO
         ST    R14,GSCOUNT(R12)   STORE THE COUNT
         BR    R3             EXIT
FREECHK  EQU   *              ONLY INVOKED FROM XFREEE         @Z30BNVD
         L     R14,GSBLOCKB   BEGINNING ADDR OF BLK            @Z30BNVD
         CR    R14,R1         Q. FALLS WITHIN RANGE            @Z30BNVD
         BH    YFREEIT        A. NO. DO NOT SAVE               @Z30BNVD
         L     R15,GSBLOCKE   ENDING ADDR OF BLOCK             @Z30BNVD
         CR    R1,R15         Q. FALLS WITHIN RANGE            @Z30BNVD
         BNL   YFREEIT        A. NO. DO NOT SAVE               @Z30BNVD
         STM   R9,R10,GSGBSV  NEED WORK REGS                   @Z30BNVD
         LA    R9,GSQUEUE(R12) TREAT Q HEAD LIKE FIRST ELEMENT @Z30BNVD
         L     R10,GSQUEUE(R12) GET QUEUE HEAD                 @Z30BNVD
CHECKEM  EQU   *              USED TO LOOP THRU FREE QUEUE     @Z30BNVD
         CR    R14,R10        Q. FALLS WITHIN RANGE            @Z30BNVD
         BH    GOTONE         A. NO. FOUND ONE TO FREE         @Z30BNVD
         CR    R10,R15        Q. FALLS WITHIN RANGE            @Z30BNVD
         BNL   GOTONE         A. NO. FOUND ONE TO FREE         @Z30BNVD
         LR    R9,R10         SAVE PREVIOUS ELEMENT ADDR       @Z30BNVD
         L     R10,NEXT(R10)  GET NEXT ELEMENT                 @Z30BNVD
         LTR   R10,R10        Q. IS THERE ANOTHER ELEMENT      @Z30BNVD
         BNZ   CHECKEM        A. YES. KEEP LOOKING             @Z30BNVD
         LM    R9,R10,GSGBSV  RESET WORK REGS                  @Z30BNVD
         B     YFREEIT        NO ELEMENT TO REPLACE            @Z30BNVDX
                              - FREE CURRENT                   @Z30BNVD
GOTONE   EQU   *              GOUND FREEABLE ELEMENT           @Z30BNVD
         L     R15,NEXT(R10)  GET FORWARD PTR                  @Z30BNVD
         ST    R15,NEXT(R1)   PUT FORWARD PTR IN NEW BLOCK     @Z30BNVD
         ST    R1,NEXT(R9)    PREVIOUS POINTS TO NEW           @Z30BNVD
         LR    R1,R10         BLOCK TO BE FREED                @Z30BNVD
         LM    R9,R10,GSGBSV  RESET WORK REGS                  @Z30BNVD
         B     YFREEIT        FREE ELEMENT FOUND               @Z30BNVD
YFREEIT  EQU   *              *
         L     R14,SP245      GET SUBPOOL
         BAL   R12,XFREE      FREE STORAGE
         BR    R3             RETURN.
         EJECT
XGET     EQU   *              *
         STM   R3,R4,WADWORD  SAVE REGS ACROSS GETMAIN
TEST33   EQU   *              *
         LR    R3,R14         KEY AND SUBPOOL
         L     R4,PSATOLD     SETUP CURRENT TCB
         L     R7,PSAAOLD     GET CURRENT ASCB
         BALR  R15,ZERO       GET TEMP ADDRESSABILITY
         USING *,R15          GET TEMP ADDRESSABILITY
         GETMAIN  RC,LV=(0),KEY=(3),SP=(3),BRANCH=YES  GET CORE
TEST34   EQU   *              *
         DROP  R15            RELEASE TEMP ADDRESSABILITY
         L     R7,BASE1       RESTORE CLOBBERED BASE
         LM    R3,R4,WADWORD  RESTORE REGS
         BR    R12            EXIT
         EJECT
XGETQEL  EQU   *              *
         SR    R14,R14        SET REGISTER TO ZERO
         ST    R14,GSMJWORD   SET MAJOR LENGTH TO ZERO
         ST    R14,GSMNWORD   SET MINOR LENGTH TO ZERO
         B     XGETQEL1       GET QEL SIZE
         SPACE 2
XGETMIN  EQU   *              *
         SR    R14,R14        SET REGISTER TO ZERO
         ST    R14,GSMJWORD   SET MAJOR LENGTH TO ZERO
         B     XGETMIN1       GET MINOR AND QEL
         SPACE 2
XGETMAJ  EQU   *              *
* COMPUTE MAJOR
         LA    R14,MAJLEN     GET LENGTH OF MAJOR
         ST    R14,GSMJWORD   SAVE MAJOR LENGTH
XGETMIN1 EQU   *              *
* COMPUTE MINOR
         SR    R15,R15        ZERO WORK REGISTER
         ICM   R15,M0001,PELMILEN  Q. DYNAMIC MINOR NAME LENGTH
         BNZ   NDYNAMIC       A. NO.  MILEN NOT ZERO
         L     R14,PELMINA    GET THE DYNAMIC LENGTH
         IC    R15,ZERO(R14)  DITTO
NDYNAMIC EQU   *              *
         LA    R14,MINLEN(R15)   GET THE MINOR LENGTH(WITHOUT NAME)
         ST    R14,GSMNWORD   SAVE MINOR LENGTH
XGETQEL1 EQU   *              *
* COMPUTE QEL SIZE
         LA    R14,QELSIZE2   SET SIZE 2
         ICM   R15,M1111,GSLSTQEL    Q. LIST QEL EXIST
         BZ    NSUBQEL        A. YES. BUILD LIST QEL
         LA    R14,QELSIZE1   SET SIZE 1
NSUBQEL  EQU   *              *
         TM    PELFLAG,PELSCPE2   Q. UCB SPECIFIED.
         BZ    NRESV3         A. NO.
         TM    PELFLAG,PELSCPE1   Q. UCB SPECIFIED.
         BO    NRESV3         A. NO.
         L     R12,PELUCBAA   GET THE UCB ADDR ADDR
         L     R12,ZERO(R12)  GET THE UCB ADDR
         TM    UCBTBYT3-UCBOB(R12),UCB3DACC  Q. DASD           @YA00805
         BZ    NRESV3         A. NO.                           @YA00805
         TM    UCBTBYT2-UCBOB(R12),UCB2OPT2  Q. SHARED         @YA00805
         BO    YRESV3         A. YES.                          @YA00805
         LR    R0,R12         SAVE UCB ADDR                    @YA00805
         ICM   R12,M0111,UCBEXTP-UCBOB(R12)  EXTENSION ADDR    @YA00805
         TM    UCBFLP1-UCBETI(R12),UCBSHRUP Q. SHR POTENTIAL   @YA00805
         LR    R12,R0         RESTORE UCB ADDR                 @YA00805
         BZ    NRESV3         A. NO. PROCESS AS NORMAL ENQ     @YA00805
YRESV3   EQU   *              PROCESS AS RESERVE               @YA00805
         LA    R14,FOUR(R14)   ADD UCB WORD.
NRESV3   EQU   *              *
         ST    R14,GSQLWORD   SAVE THE COMPUTED SIZE.
* CORE WILL EITHER BE 'GETMAINED' OR GOTTEN FROM GSQUEUE
* GSQUEUE IS A RECYCLING STORAGE QUEUE
* GSQUEUE IS INDEXABLE BY LENGTH/2
* GSCOUNT IS THE NUMBER OF FREE ELEMENTS HUNG FROM GSQUEUE
* EACH LENGTH IS CHECKED FOR A FREE ELEMENT. IF ONE EXISTS,
*  IT IS TAKEN FROM GSQUEUE. IF NONE EXISTS, THE SIZE
*  IS ADDED TO THAT OF OTHERS NOT FOUND.
*  SIZES NOT FOUND ARE SUMED AND 1 GETMAIN IS DONE.
         SR    R0,R0          GETMAIN LENGTH ACCUMULATOR
         LA    R12,EIGHT      LOOP CONTROL
Q3       EQU   *              *
         L     R14,GS3WORDS(R12)  GET LENGTH OR 0
         LA    R14,SEVEN(R14)  OBTAIN INDEX WHILE ROUNDING
         SRA   R14,THREE      Q. IS IT ZERO.
         BZ    YZERO          A. YES. IGNORE
         SLL   R14,TWO        LENGTH ROUNDED TO DBL WD DIVIDED BY 2
         C     R14,QRANGE     Q. LENGTH WITHIN RANGE
         BH    NELEM1         A. NO. ACCUMULATE LENGTH FOR GET
         L     R1,GSQUEUE(R14)  GET QUEUED ELEMENT OR 0
         LTR   R1,R1          Q. DOES ELEMENT EXIST
         BNZ   YELEM2         A. YES
NELEM1   EQU   *              *
         SLL   R14,ONE        GET ROUNDED LENGTH
         AR    R0,R14         ACCUMULATE LENGTH
         O     R14,HIGHBIT    INDICATE LENGTH NOT PROCESSED
         ST    R14,GS3WORDS(R12)  SAVE THE LENGTH
         B     NELEM2         CONTINUE
YELEM2   EQU   *              *
         L     R15,NEXT(R1)   UNCHAIN                          @Z30BNVD
         ST    R15,GSQUEUE(R14)   DITTO                        @Z30BNVD
         ST    R1,GS3WORDS(R12)  SAVE THE ELEMENT'S ADDRESS    @Z30BNVD
         L     R15,GSCOUNT(R14)  DECREMENT THE Q COUNT
         BCT   R15,YNOTZERO   SKIP WHEN Q NOT EMPTY            @Z30BNVD
         STM   R10,R12,GSGBSV NEED WORK REGS                   @Z30BNVD
         LR    R10,R0         SAVE CONTENTS OF REG             @Z30BNVD
         L     R0,BLKSIZE(R14) GET SIZE OF BLOCK               @Z30BNVD
         LR    R11,R14         SAVE CONTENTS OF REG            @Z30BNVD
         L     R14,SP245      INDICATE SUBPOOL                 @Z30BNVD
         BAL   R12,XGET       GET A BLOCK                      @Z30BNVD
         LR    R14,R11        RESTORE INDEX                    @Z30BNVD
         LTR   R15,R15        Q. GOT SOME                      @Z30BNVD
         BZ    YGOTSOME       A. YES. GO PROCESS               @Z30BNVD
         SR    R15,R15        ZERO COUNT REG                   @Z30BNVD
         B     NGOT           SKIP CHAINING PROCESS            @Z30BNVD
YGOTSOME EQU   *              BRANCHED TO WHEN STORAGE GOTTEN  @Z30BNVD
         ST    R1,GSQUEUE(R14)  INITIALIZE QUEUE HEAD          @Z30BNVD
         AR    R0,R1          DETERMINE END OF BLOCK           @Z30BNVD
         SLL   R11,ONE        INDEX TO ELEMENT SIZE            @Z30BNVD
BLDLOOP  EQU   *              LOOP TO BUILD FREE QUEUE         @Z30BNVD
         LR    R12,R1         SAVE CURRENT                     @Z30BNVD
         LA    R15,ONE(R15)   COUNT ELEMENT                    @Z30BNVD
         AR    R1,R11         GET NEXT                         @Z30BNVD
         ST    R1,NEXT(R12)   CHAIN CURRENT TO NEXT            @Z30BNVD
         CR    R0,R1          Q. PROCESSING LAST ONE           @Z30BNVD
         BH    BLDLOOP        A. NO. GO PROCESS ANOTHER        @Z30BNVD
         SR    R0,R0          RESET ENTRY VALUE                @Z30BNVD
         ST    R0,NEXT(R12)   ZERO PTR IN LAST ONE             @Z30BNVD
NGOT     EQU   *              LABEL USED WHEN GET FAILS        @Z30BNVD
         LR    R0,R10         RESET ENTRY VALUE                @Z30BNVD
         LM    R10,R12,GSGBSV RESET WORK REGS                  @Z30BNVD
YNOTZERO EQU   *              USED WHEN BLOCK NOT NEEDED       @Z30BNVD
         ST    R15,GSCOUNT(R14) SAVE NEW COUNT                 @Z30BNVD
NELEM2   EQU   *              *
YZERO    EQU   *              *
         SL    R12,FFOUR      Q. IS THIS THE LAST
         BNM   Q3             A. NO. LOOP.
         LTR   R0,R0          Q. ACCUMULATED LENGTH 0
         BZR   R3             YES. EXIT
* GETMAIN
         L     R14,SP245      GET SUBPOOL
         BAL   R12,XGET       GET STORAGE
         LTR   R15,R15        Q. GO O.K.
         BZ    YGOTIT         A. YES.
         OI    WAFLAG2,WANOCORE   SET NO CORE SWITCH
         BR    R3             EXIT
YGOTIT   EQU   *              *
         LA    R12,EIGHT      LOOP CONTROL. ALSO USED AS INDEX
QBREAKIT EQU   *              *
         L     R14,GS3WORDS(R12)   Q. IGNORE THIS WORD
         LTR   R14,R14        DITTO
         BNM   YIGNORIT       A. YES
         LA    R14,ZERO(R14)   CLEAR HIGH BIT
         ST    R1,GS3WORDS(R12)   SAVE THE ADDRESS
         LA    R1,ZERO(R1,R14) ADDRESS PLUS LENGTH (CLEAR HIGH BIT)
YIGNORIT EQU   *              *
         SL    R12,FFOUR      Q. IS THIS THE END.
         BNM   QBREAKIT       A. NO. LOOP.
         BR    R3             EXIT
         EJECT
XHOLD    EQU   *              *
         OI    GSFLAG1,GSHOLD   WANT ENQHOLD
         B     YSYSEVNT       CONTINUE.
         SPACE 2
XRLSE    EQU   *              *
         NI    GSFLAG1,XFF-GSHOLD  WANT ENQRLSE
YSYSEVNT EQU   *              *
         TM    MINFLGS,MINSTEP   Q. STEP WIDE MINOR
         BOR   R3             A. YES. DONT ISSUE SYSEVENT.
         STM   R14,R4,GSR3SAVE   SAVE REGS
         LR    R3,R1          SAVE COUNT
         LR    R1,R10         MINOR ADDRESS TO OPTIMIZER
QHOLDQEL EQU   *              *
         LH    R2,QELASID-QEL(R12)  GET ASID FOR OPT.
         TM    GSFLAG1,GSHOLD   Q. HOLD.
         BO    YHOLD          A. YES.
* ENQRLSE
         SYSEVENT  ENQRLSE,ASID=(2),ENTRY=BRANCH CALL OPT.
TEST38   EQU   *              *
         B     NHOLD          CONTINUE.
YHOLD    EQU   *              *
* ENQHOLD
         SYSEVENT  ENQHOLD,ASID=(2),ENTRY=BRANCH  CALL OPT.
TEST39   EQU   *              *
NHOLD    EQU   *              *
         L     R12,QELNQEL-QEL(R12)  GET NEXT QEL FOR LOOP
         BCT   R3,QHOLDQEL    LOOP ON COUNT
         LM    R14,R4,GSR3SAVE   RESTORE REGS.
         BR    R3             RETURN
         EJECT
XPOST    EQU   *              POST A GROUP OF QELS
QPOSTQEL EQU   *              *
         ICM   R15,M1111,QELLQEL-QEL(R12) Q. LIST QEL ADDRESS
         LA    R14,QELSIZE1   GET SUB-QEL SIZE
         BM    NLQEL          A. NO.
         LA    R14,QELSIZE2   GET LIST-QEL SIZE
         LR    R15,R12        GET THE LIST-QEL ADDRESS
NLQEL    EQU   *              *
         TM    QELQFLGS-QEL(R12),QELRESV   Q. RESERVE
         BZ    NRESERV1       A. NO.
* SHARED DASD
         L     R14,ZERO(R14,R12)  GET UCB ADDRESS
         SR    R0,R0          BUMP RESERVE COUNT
         IC    R0,UCBSQC-UCBOB(R14)  DITTO
         AL    R0,FONE        DITTO
         STC   R0,UCBSQC-UCBOB(R14)  DITTO
         TM    QELQFLGS-QEL(R12),QELAUTH  CHECK FOR AUTH.      @ZA17306
         BNO   NRESERV1       SKIP SYSEVENT                    @ZA17306
         STM   R14,R1,GSR3SAVE                                 @ZA17306
         LR    R1,R10         PASS MINOR QCB TO SRM            @ZA17306
         LH    R0,QELASID-QEL(R12)  PASS ASID TO SRM           @ZA17306
         SYSEVENT ENQHOLD,ASID=(0),ENTRY=BRANCH                @ZA17306
         LM    R14,R1,GSR3SAVE                                 @ZA17306
NRESERV1 EQU   *              *
         STM   R0,R15,GSSAVE1                                  @ZA17306
         LR    R9,R13         SAVE GLOBAL SAVE AREA ADDRESS
         LH    R11,QELWCNT-QEL(R15)  DECREMENT WAIT COUNT.
         S     R11,FONE       DITTO
         STH   R11,QELWCNT-QEL(R15)  DITTO
         BNZ   NPOST          DONT POST TILL COUNT GOES TO 0
         OI    QELLFLGS-QEL(R15),QELPOST   INDICATE POST OCCURED.
         SR    R11,R11        NO ECB,SVRB ADDR ALREADY IN R10
         ICM   R10,M1111,QELECB-QEL(R15)  Q. ECB POST
         BNM   NECB           A. NO. SVRB POST.
* ECB POST
         LA    R11,ZERO(R10)  INDICATE NO SHEDULE
         SR    R10,R10        NO COMPLETION CODE
NECB     EQU   *              *
         LH    R13,QELASID-QEL(R12)  Q. CROSS MEMORY POST
         CH    R13,GSASID-GS(R9)     DITTO
         BE    NSCHED         A. NO.
* CROSS MEMORY POST
         O     R11,HIGHBIT    INDICATE SCHEDULE IS NECESSARY
         L     R1,CVTPTR      GET CVT ADDRESS
TEST41   EQU   *              *
         L     R1,CVTASVT-CVT(R1)  GET THE ASVT
         BCTR  R13,ZERO       ASID-1
         SLL   R13,TWO        (ASID-1) X 4
         L     R13,ASVTENTY-ASVT(R13,R1)  GET ASCB ADDRESS     @YM01596
         LA    R12,BR14       ADDRESS OF BR14 INSTUCTION
NSCHED   EQU   *              *
         L     R15,POSTADDR    GET POST'S ADDRESS
TEST42   EQU   *              *
         BALR  R14,R15        POST
* NO ADDRESSABILITY HERE OTHER THAN R9
NPOST    EQU   *              *
         LM    R0,R15,GSSAVE1-GS(R9)   GET ALL REGS BACK
         BCTR  R1,ZERO        DECREMENT POST COUNT
         LTR   R1,R1          Q. DONE WITH POSTS
         BZR   R3             A. YES. RETURN
         L     R12,QELNQEL-QEL(R12)  GET THE NEXT QEL
         B     QPOSTQEL       LOOP
         EJECT
XQELSCAN EQU   *              *
* INPUT--
* GSASID CONTINS THE CURRENT ASID
* R3 IS THE RETURN ADDRESS
* R4 CONTAINS A TCB ADDRESS OR 0
* R8 CONTAINS THE CURRENT PEL
* R10 CONTAINS THE MINOR TO BE SEARCHED
* R13 CONTAINS THE ADDRESS OF THE GS(GLOBAL SAVE)
* PROCESS--
* R11 IS USED TO CONTAIN THE MATCH QEL OR 0
* R12 CONTAINS THE CURRENT QEL
* R14 CONTAINS EITHER THE PREVIOUS TYPE OR THE CURRENT TYPE (E/S)
* R15 IS USED AS A MULTI USE WORK REG
* R0 CONTAINS THE CURRENT QEL COUNT FOR THE CURRENT GROUP
* R1 IS USED TO CONTAIN THE CURRENT GROUP NUMBER TIMES TWO
* WORK REGISTERS  R11,R12,R14,R15,R0,R1
* NOT TO BE USED ARE R2,R3,R4,R5,R6,R7,R8,R9,R10,R13
* R2 MAY AT A LATER TIME BECOME THE LINK REGISTER
* OUTPUT--
* R11 WILL CONTAIN THE MATCH QEL OR 0
* GSGRPNUM CONTAINS THE MATCH GROUP NUMBER OR THE GROUP NUMBER OF THE
*        TO BE BUILT QEL (FUTURE OR POTENTIAL QEL),MULTIPLIED BY TWO
* GSGROUPS 1 THRU 4 WILL CONTAIN THEIR RESPECTIVE QEL COUNTS
* THE LAST COUNT MAY REFLECT AN MATCH COUNT OR THE POTENTIAL COUNT
         SPACE 3
* INITIALIZE
         SR    R11,R11        SET THE MATCH QEL TO ZERO
         SR    R1,R1          SET CURRENT GROUP TO ZERO
         XC    GSGPAREA(GSGPLEN),GSGPAREA  ZERO GROUP RELATED INFO
         SR    R14,R14        SET PREVIOUS TYPE TO EXCLUSIVE
         ICM   R12,M1111,MINFQEL  Q. FIRST QEL ZERO
         BZ    YEND1          A. YES. CANNOT HAVE A MATCH.
QQEL1    EQU   *              SCAN THE QEL(S)
         LTR   R14,R14        Q. PREV=EXCL
         L     R14,QELQFLGS-QEL(R12)   MAKE CURR THE PREV
         BNM   YCHANGE0       A. YES. HAS TO BE GROUP CHANGE
         LTR   R14,R14        Q. CURR=EXCL
         BNM   YCHANGE0       A. YES HAS TO BE GROUP CHANGE
         A     R0,FONE        ADD ONE TO CURRENT QEL COUNT
         B     NCHANGE0       BYPASS THE CHANGE OF GROUP
YCHANGE0 EQU   *              CHANGE GROUP COUNT
         LA    R1,TWO(R1)     BUMP GROUP OFFSET
         LA    R0,ONE         SET CURRENT QEL COUNT TO ONE
NCHANGE0 EQU   *              *
         CLC   GSASID(TWO),QELASID-QEL(R12) Q.BELONG TO THE TARGET A.S.
         BNE   NMATCH         MISSED THE TARGET
         L     R15,QELTCB-QEL(R12)  GET TCB OR LIST QEL ADDRESS
         LTR   R15,R15        Q. TCB
         BP    YTCB           A. YES
         L     R15,QELTCB-QEL(R15)  OBTAIN THE TCB
YTCB     EQU   *              HAVE THE TCB
         CR    R4,R15         TCB'S MATCH
         BE    YMATCH         YES. ASID.TCB = ASID.TCB
         LTR   R4,R4          CHECK FOR A TCB OF 0
         BNZ   NMATCH         NOT 0 (NO MATCH) ZERO TCB = ALL TCB'S
YMATCH   EQU   *              FOUND A MATCH QEL
         LR    R11,R12        SAVE IT.
         SRL   R1,ONE         SAVE THE MATCH GROUP NUMBER
         ST    R1,GSGRPNUM    DITTO
         SLL   R1,ONE         DITTO
NMATCH   EQU   *              *
         C     R1,FEIGHT
         BH    YIGNORE3       A. YES
         STH   R0,GSGROUP(R1)  SAVE THE CURRENT QEL COUNT
YIGNORE3 EQU   *              *
         ICM   R12,M1111,QELNQEL-QEL(R12)  Q. NEXT QEL ZERO.
         BNZ   QQEL1          A. NO. LOOP ON QELS
YEND     EQU   *              FINISH UP
         LTR   R11,R11        Q. HAVE A MATCH QEL
         BNZR  R3             YES. EXIT
         LTR   R14,R14        Q. GROUP CHANGE
         BNM   YCHANGE1       A. YES
         TM    PELFLAG,PELSHARE   Q. GROUP CHANGE
         BZ    YCHANGE1       A. YES
         A     R0,FONE        BUMP THE CURRENT QEL COUNT.
         B     NCHANGE1       CONTINUE PROCESSING
YCHANGE1 EQU   *              *
YEND1    EQU   *              *
         LA    R1,TWO(R1)     BUMP GROUP OFFSET
         LA    R0,ONE         RESET THE QEL COUNT TO ONE.
NCHANGE1 EQU   *              *
         C     R1,FEIGHT      Q. OVER FOUR GROUPS.
         SRL   R1,ONE         SAVE THE POTENTIAL GROUP NUMBER.
         ST    R1,GSGRPNUM    DITTO
         BHR   R3             A. YES. QUIT.
         SLL   R1,ONE         RESTORE INDEX
         STH   R0,GSGROUP(R1) BUMP THIS GROUPS QEL COUNT.
         BR    R3             BYE
         EJECT
XSETUP   EQU   *              *
* INPUT--
* R1 IS THE INPUT PARM LIST
* R2 IS FRR E.P.
* R3 IS THE LINK REGISTER
* ADDRESSABILITY TO WA (USING R5)
* WORK--
* R8 THRU R2
* OUTPUT--
* WA ALL ZEROS PLUS--
*   WAOLDPEL,WANEWPEL,WAKEY,WAPLAST,WAPFLAG,WAPARMSZ,WANAMESZ
*   WALOCAL,WAFRR,WABADMIL,WAERR,WANOAUTH,WANOCORE
* PORTION OF GLOBAL SAVE CLEARED
* A MOVED LIST,IF CALLER NOT AN AUTHORIZED CALLER.
* FRR ENVIRONMENT
* POSSIBLY A MOVED LIST
* LOCAL AND CMS LOCK
* R4 CONTAINS THE CURRENT OR PARM LIST TCB ADDR
* R8 IS ADDRESS OF TOP PARM OF WACURPEL
* R13 IS ADDRESS OF GS
         LA    R8,ZERO(R1)    SAVE THE PARM LIST
         XC    WA(WALEN),WA   ZERO THE WORK AREA
         STC   R0,WARETRY     SET RETRY ADDRESS
         ST    R8,WAOLDPEL    INIT OLD LIST AS INPUT LIST
         ST    R8,WANEWPEL    SET NEW=OLD
X3       SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=((X7),IEAVWAIT)
TEST43   EQU   *              *
* SETLOCK DESTROYS R11 THRU R14
         OI    WAFLAG1,WALOCAL  INDICATE LOCAL LOCK OBTAINED.
         SETFRR A,PARMAD=(R13),FRRAD=(R2),WRKREGS=(R14,R15)   COVER
TEST44   EQU   *              *
         ST    R5,ZERO(R13)   FRR INPUT IS W.A. ADDRESSABILITY
* SETFRR DESTROYS R14 AND R15
         OI    WAFLAG1,WAFRR   INDICATE FRR OUTSTANDING
         L     R2,RBLINK-RBSECT(R5)  GET MY CALLER'S KEY
         IC    R2,RBOPSWKY-RBSECT(R2)  DITTO
         N     R2,KEYMASK     DITTO
         STH   R2,WAKEY       SAVE MY CALLER'S KEY
* SCAN THE INPUT PARM LIST
* FOR THIS ENTIRE ROUTINE R2 CONTAINS MY CALLER'S KEY
* COMPUTE THE PARM LIST SIZE AND NAME LENGTH SIZE
         LR    R12,R8         SET CURRENT ELEMENT TO TOP ELEMENT
         SR    R14,R14        SET CURRENT PARM SIZE TO 0
         SR    R15,R15        SET CURRENT NAME SIZE TO 0
         SR    R0,R0          ZERO FOR INSERT OF MINOR NAME LENGTH
         SR    R9,R9          USE FOR MINOR LENGTH 0, NON 0 SWITCH
TEST45   EQU   *              *
         MODESET  KEYADDR=(2)  GO INTO CALLER'S KEY
QLAST    EQU   *              LOOP TILL END OF LIST
         LA    R14,PELELEM(R14)  ACCUMULATE PARM LIST SIZE
         TM    PELFLAG-PEL(R12),PELSCPE2  Q. HAVE UCB
         BZ    NRESV          A. NO.
         TM    PELFLAG-PEL(R12),PELSCPE1  Q. HAVE UCB
         BO    NRESV          A. NO.
         L     R1,PELUCBAA-PEL(R12)  REFERENCE UCB ADDR ADDR
         L     R11,ZERO(R1)   REFERENCE UCB ADDRESS
         L     R11,ZERO(R11)  REFERENCE UCB
         LA    R14,FOUR(R14)  BUMP PARM SIZE BY UCB ADDR SIZE
         LA    R15,FOUR(R15)  BUMP NAME SIZE BY UCB WORD SIZE
NRESV    EQU   *              *
         L     R1,PELMAJA-PEL(R12)  REFERENCE MAJOR ADDRESS
         IC    R11,ZERO(R1)   REFERENCE MAJOR NAME
         IC    R11,PELMAJSZ-ONE(R1)  DITTO
         LA    R15,PELMAJSZ(R15)  ACCUMULATE NAME LENGTH SIZE
         ICM   R1,M1111,PELMINA-PEL(R12)  Q. MINOR NAME
         BNZ   YMINAME        A. YES. CHECK LENGTH
         BALR  R9,ZERO        A. NO. ABEND ALL BUT GENERIC DEQ.
         B     NMINAME        CONTINUE PROCESSING
YMINAME  EQU   *              *
         ICM   R0,M0001,PELMILEN-PEL(R12)  Q. DYNAMIC LENGTH
         BNZ   NDYN           A. NO. REFERENCE MINOR NAME
         ICM   R0,M0001,ZERO(R1)   Q. LENGTH ZERO
         LA    R1,ONE(R1)     PREPARE FOR NON-ZERO LENGTH
         BNZ   YMILEN         A. NO. REFERENCE MINOR NAME
         BALR  R9,ZERO        A. NO. ABEND ALL BUT GENERIC DEQ.
         B     NMILEN         CONTINUE
YMILEN   EQU   *              *
NDYN     EQU   *              *
         IC    R11,ZERO(R1)   REFERENCE MINOR NAME
         BCTR  R1,ZERO        DITTO
         ALR   R1,R0          DITTO
         IC    R11,ZERO(R1)   DITTO
NMINAME  EQU   *              *
NMILEN   EQU   *              *
         ALR   R15,R0         BUMP NAME SIZE BY MINOR LENGTH SIZE
         TM    PELLAST-PEL(R12),PELEOL  Q. END OF LIST
         BO    YLAST          A. YES
         LA    R12,ZERO(R8,R14)  GET ADDRESS OF NEXT ELEM
         B     QLAST          LOOP ON ELEMENTS
YLAST    EQU   *              FINISHED WITH LIST
         ICM   R1,M0010,PELLAST-PEL(R12) GET PROPER(LAST ELEM)FLAG BYTE
         IC    R1,PELFLAG-PEL(R8)  GET PROPER(TOP ELEM) FLAG BYTE
TEST46   EQU   *              *
         MODESET  EXTKEY=SUPR   SET KEY BACK TO 0
         LTR   R9,R9          Q. MINOR LEN OF ZERO FOUND
         BZ    NLEN0          A. NO.
         OI    WAFLAG2,WABADMIL    A. YES. ABEND ALL BUT GENERIC DEQ.
NLEN0    EQU   *              *
         STH   R1,WAPFLGS     SAVE PROPER(GLOBAL TO THE REQUEST) FLAGS
         TM    WAPLAST,PELIGNOR    Q. OLD OPTIONS
         BZ    NOLDOPTN       A. NO. HAVE NEW OPTIONS.
         NI    WAPLAST,PELEOL  A. YES. CONVERT TO NEW OPTIONS
NOLDOPTN EQU   *              WAPLAST IS NOW ALWAYS NEW OPTIONS
         ST    R14,WAPARMSZ   SAVE THE TOTAL PARM SIZE
         ST    R15,WANAMESZ   SAVE THE TOTAL NAME SIZE
         TM    WAPFLAG,PELRET1   Q. ECB REQUESTED
         BZ    NECB1          A. NO.
         TM    WAPFLAG,PELRET2+PELRET3  Q. ECB REQUESTED
         BNZ   NECB1          A. NO. CHECK FOR ONLY TCB        @ZA14267
         TM    WAPLAST,PELTCBF Q. BOTH ECB AND TCB             @ZA14267
         BNO   YECB1          A. NO. ONLY ECB                  @ZA14267
*
* BOTH TCB AND ECB WERE SPECIFIED                              @ZA14267
*
         SH    R8,HPREFIX     GET PREFIX ADDRESS OF PEL        @ZA14267
         MODESET KEYADDR=(2)   SWITCH TO CALLERS KEY           @ZA14267
         L     R4,PELTCB-PELPREFX(0,R8) SET TCB ADDRESS        @ZA14267
         L     R9,PELDUAL-PELPREFX(0,R8) GET ECB ADDRESS       @ZA14267
         MODESET EXTKEY=SUPR  GO BACK TO KEY 0                 @ZA14267
         O     R9,HIGHBIT     INDICATE ECB                     @ZA14267
         B     NTCB1          COMMON TCB/ECB PROCESSING        @ZA14267
NECB1    EQU   *              *
         TM    WAPLAST,PELTCBF   Q. TCB REQUEST                @ZA14267
         BZ    NTCBECB        A. NO.
YECB1    EQU   *              *
*
* ONLY TCB SPECIFIED OR ONLY ECB SPECIFIED                     @ZA14267
*
         SH    R8,HPREFIX     GET PREFIX ADDRESS OF PEL        @ZA14267
TEST47   EQU   *              *
         MODESET  KEYADDR=(2)   SWITCH TO CALLER'S KEY
         L     R9,PELDUAL-PELPREFX(R8)   GET TCB OR ECB ADDRESS
TEST48   EQU   *              *
         MODESET  EXTKEY=SUPR     GO BACK TO KEY 0
         O     R9,HIGHBIT     INDICATE ECB (GUESS)             @ZA14267
         TM    WAPLAST,PELTCBF   Q. TCB REQUEST
         BZ    NTCB1          A. NO.
         LA    R9,ZERO(R9)    CLEAR HIGH BIT
         LR    R4,R9          SET TCB ADDRESS
NTCB1    EQU   *              *
         ST    R9,WAECBA      SAVE THE TCB OR ECB ADDRESS      @ZA14267
*
* WATCBA WILL BE USED ONLY IF ECB WAS SPECIFIED (INDICATED BY HIGH
* ORDER BIT).                                                  @ZA14267
*
         AH    R8,HPREFIX     RESET TO TOP ELEM                @ZA14267
NTCBECB  EQU   *              *
         TM    WAKEY+ONE,NOSUPKEY Q. SUPR KEY                  @YM03564
         BZ    YAUTH          A. YES - BYPASS TESTAUTH         @YM03564
         LR    R11,R3         SAVE THE LINK REGISTER
         TESTAUTH  FCTN=1,STATE=YES,KEY=YES,BRANCH=YES CHECK AUTH
TEST49   EQU   *              *
* R14 THRU R3 CLOBBERED.
         LR    R3,R11         RESTORE THE LINK REGISTER
         LTR   R15,R15        Q. AUTHORIZED CALLER
         BZ    YAUTH          A. YES. DONT MOVE PARM LIST
* MOVE PARM LIST IF COMING THRU HERE
         LH    R2,WAKEY       RESTORE CALLER'S KEY
         OI    WAFLAG2,WANOAUTH  INDICATE NOT AUTHORIZED CALL
* MOVE LIST NOW.
* R8 USED FOR OLD PEL
* R9  USED FOR NEW PEL PARMS
* R10 USED FOR NEW PEL NAMES
* R12 USED FOR PARM SIZE
* R14 USED FOR NAME SIZE
* R15, R0, R1 USED FOR QUICK WORK
* R2 USED FOR KEY REG
         L     R0,WAPARMSZ    GET PARM SIZE
         A     R0,WANAMESZ    GET TOTAL SIZE (PARM SIZE+NAME SIZE)
         L     R14,SP253      GET SUBPOOL
         BAL   R12,XGET       GET STORAGE
         LTR   R15,R15        Q. GET THE CORE
         BZ    YGOT2          A. YES CONTINUE.
         MVI   WAERR,AB6XX    A. NO. INDICATE 638 OR 630 ABEND.
         B     NGOT2          RETURN.
YGOT2    EQU   *              PROCEED WITH MOVE.
         L     R12,WAPARMSZ   GET PARM SIZE
         LA    R9,ZERO(R1)    SAVE NEW PARM LIST ADDRESS.
         ST    R9,WANEWPEL    SAVE NEW PARM LIST FOR FREEMAIN
         OI    WAFLAG2,WANWPEL   INDICATE NEW PEL GOTTEN
* R8 CONTAINS ADDRESS OF OLD PEL.
         L     R14,WANAMESZ   GET THE NAME SIZE
         LA    R10,ZERO(R9,R12)  GET THE ADDRESS TO NAME START
QMOVLIST EQU   *              *
         SH    R12,HPELSZ     Q. MOVE COMPLETE.
         BM    YMOVLIST       A. YES EXIT.
TEST50   EQU   *              *
         MODESET  KEYADDR=(2)    SET CALLER'S KEY.
         LM    R15,R1,ZERO(R8)   GET ONE ELEMENT(LESS UCB)
TEST51   EQU   *              *
         MODESET  EXTKEY=SUPR   GO BACK TO KEY 0
         STM   R15,R1,ZERO(R9)   SAVE ONE ELEMENT(LESS UCB)
         SH    R14,HMAJSZ     Q. MOVE COMPLETE
         BM    YERRLIST       A. YES. VOLATILE INPUT LIST
         L     R15,PELMAJA-PEL(R9)  GET ADDRESS OF MAJOR NAME
TEST52   EQU   *              *
         MODESET  KEYADDR=(2)   SWITCH TO CALLER'S KEY
         TM    ZERO(R15),ZERO    REFERENCE MAJOR NAME
         TM    EIGHT-ONE(R15),ZERO    DITTO
TEST53   EQU   *              *
         MODESET  EXTKEY=SUPR   SWITCH BACK TO KEY 0
         MVC   ZERO(EIGHT,R10),ZERO(R15)  MOVE MAJOR NAME
         ST    R10,PELMAJA-PEL(R9)  RELOCATE MAJOR NAME POINTER
         CLC   ZERO(FOUR,R10),SYSZ   Q. AUTHORIZED NAME
         BH    NAUTHNAM       A. NO.
         BE    YAUTHNAM       A. YES. RESTRICTED NAME
         LA    R1,SYSTABLE-EIGHT   SEARCH THRU AUTH NAME TABLE
QAUTHNAM EQU   *              *
         LA    R1,EIGHT(R1)   GET ADDRESS CURRENT AUTH NAME
         CLC   ZERO(EIGHT,R10),ZERO(R1)    Q. AUTHORIZED NAME
         BH    QAUTHNAM       A. NO. LOOP.
         BL    NAUTHNAM       A. NO. NAME NOT IN TABLE
YAUTHNAM EQU   *              *
         MVI   WAERR,AB3XX    INDICATE NOT AUTHORIZED FOR FUNCTION
NAUTHNAM EQU   *              *
         LA    R10,PELMAJSZ(R10)   UPDATE NAMES ADDRESS
         ICM   R15,M1111,PELMINA-PEL(R9)  Q. MINOR NAME
         BZ    NMINMOVE       A. NO. NO MOVE
         SR    R1,R1          ZERO FOR INSERT
         ICM   R1,M0001,PELMILEN-PEL(R9)  Q. DYNAMIC MI LENGTH
         BNZ   YMINMOVE       A. NO. HAVE LENGTH
TEST54   EQU   *              *
         MODESET  KEYADDR=(2)   SWITCH TO CALLER'S KEY
         ICM   R1,M0001,ZERO(R15)  Q. MINOR
TEST55   EQU   *              *
         MODESET  EXTKEY=SUPR   SWITCH BACK TO KEY 0
         LA    R15,ONE(R15)   ADJUST MINOR NAME ADDRESS
         BNZ   YMINMOVE       A. YES.
* THIS PATH IS LEGAL IF GENERIC DEQ WAS SPECIFIED.
         SR    R15,R15        ZERO MINOR NAME
         ST    R15,PELMINA-PEL(R9)    DITTO
         B     NMINMOVE       CONTINUE.
YMINMOVE EQU   *              *
         SR    R14,R1         Q. MOVE COMPLETE
         BM    YERRLIST       A. YES. VOLATILE LIST
         STC   R1,PELMILEN-PEL(R9)  SAVE MINOR NAME LENGTH
         BCTR  R1,ZERO        DECREMENT FOR EXECUTE
TEST56   EQU   *              *
         MODESET  KEYADDR=(2)   SWITCH TO CALLER'S KEY
         IC    R0,ZERO(R15)      REFERENCE MINOR NAME
         IC    R0,ZERO(R15,R1)    DITTO
TEST57   EQU   *              *
         MODESET  EXTKEY=SUPR   SWITCH BACK TO KEY 0
         EX    R1,MOVEMIN     MOVE MINOR NAME
         ST    R10,PELMINA-PEL(R9)    RELOCATE MINOR ADDRESS
         LA    R10,ONE(R10,R1)   UPDATE NAMES ADDRESS
NMINMOVE EQU   *              *
         TM    PELFLAG-PEL(R9),PELSCPE2  Q. UCB SPECIFIED
         BZ    NRESV1         A. NO.
         TM    PELFLAG-PEL(R9),PELSCPE1  Q. UCB SPECIFIED.
         BO    NRESV1         A. NO.
         SH    R12,HFOUR      Q. END OF MOVE
         BM    YERRLIST       A. YES. INPUT LIST VOLATILE.
         SH    R14,HFOUR      Q. END OF MOVE
         BM    YERRLIST       A. YES. INPUT LIST VOLATILE.
TEST58   EQU   *              *
         MODESET  KEYADDR=(2)    SWITCH TO CALLER'S KEY
         L     R15,PELUCBAA-PEL(R8)  GET THE UCB ADDR ADDR
         L     R15,ZERO(R15)  GET THE UCB ADDR
TEST59   EQU   *              *
         MODESET  EXTKEY=SUPR  SWITCH BACK TO KEY 0
         ST    R15,ZERO(R10)     SAVE THE UCB ADDRESS
         ST    R10,PELUCBAA-PEL(R9)   SAVE UCB ADDR ADDR
         LA    R8,FOUR(R8)    UPDATE OLD PEL ADDRESS
         LA    R9,FOUR(R9)    UPDATE NEW PEL ADDRESS
         LA    R10,FOUR(R10)  UPDATE NAMES ADDR
NRESV1   EQU   *              *
         LA    R8,PELELEM(R8)    UPDATE OLD PEL ADDRESS
         LA    R9,PELELEM(R9)  UPDATE NEW PEL ADDRESS
         B     QMOVLIST       LOOP.
YERRLIST EQU   *              INPUT LIST VOLATILE
         MVI   WAERR,AB4XX    INDICATE INVALID PARM LIST
YMOVLIST EQU   *              *
NGOT2    EQU   *              *
YAUTH    EQU   *              *
* OBTAIN CMS LOCK
X4       SETLOCK  OBTAIN,TYPE=CMS,MODE=UNCOND,RELATED=((X8),(X9)) LOCK
TEST60   EQU   *              *
         OI    WAFLAG1,WACMS  INDICATE CMS OBTAINED
         L     R13,CVTPTR     GET GLOBAL SAVE ADDRESS
TEST61   EQU   *              *
         L     R13,CVTSPSA-CVT(R13)  DITTO
         L     R13,WSAGNQDQ-WSAG(R13)  DITTO
         XC    GSCLEAR(GSCLEARL),GSCLEAR  ZERO PORTION OF GLOBAL STORE
TEST62   EQU   *              *
         L     R14,PSAAOLD    SAVE THE ASID
         MVC   GSASID(TWO),ASCBASID-ASCB(R14)  DITTO
         L     R8,WANEWPEL    SETUP CORRECT PARM LIST ADDRESS
* WANEWPEL CONTAINS EITHER THE NEWLY GOTTEN LIST OR THE INPUT LIST
         BR    R3             RETURN
         EJECT
XSTARTIO EQU   *              *
* ROUTINE TO BE SCHEDULED BY IOS AT THE COMPLETION OF
*  THE I/O DONE TO RELEASE A RESERVED DEVICE.
         LR    R8,R14         SAVE RETURN REG.
         BALR  R15,ZERO       OBTAIN ADDRESSABILITY
         USING *,R15          DITTO
         LM    R6,R7,BASES    OBTAIN ADDRESSABILITY TO ENTIRE MODULE
         DROP  R15            *
X1       SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=((X2)) LOCK
TEST62A  EQU   *              *
         LA    R0,ZLEN        LENGTH OF IOSB-SRB CORE
         L     R3,SP245       SUBPOOL 245
         SR    R4,R4          PASS NO TCB ADDRESS
         L     R7,PSAAOLD     GET CURRENT ASCB
         BALR  R15,ZERO       TEMP ADDRESSABILITY
         USING *,R15          DITTO
         FREEMAIN RC,LV=(0),A=(1),KEY=(3),SP=(3),BRANCH=YES FREE CORE
TEST62B  EQU   *              *
         DROP  R15            RELEASE TEMP ADDRESSABILITY
         L     R7,BASES+FOUR  RESTORE 2ND BASE REG.
X2       SETLOCK RELEASE,TYPE=LOCAL,RELATED=((X1)) UNLOCK
TEST62C  EQU   *              *
         LR    R14,R8         RESTORE RETURN REGISTER
         BR    R14            BRANCH TO DISPATCHER.
         EJECT
XSVCFREE EQU   *              *
         FREEMAIN RC,LV=(0),A=(1),SP=(14)  FREE STORAGE
TEST63   EQU   *              *
         BR    R12            EXIT
         EJECT
XUNCHAIN EQU   *              *
         ICM   R14,M1111,PREV(R12)  GET PREVIOUS
         L     R15,NEXT(R12)  GET THE NEXT
         BZ    NPREV          THERE IS NO PREVIOUS
* YES PREVIOUS
         LTR   R15,R15        Q. IS THERE A NEXT.
         BZ    NNEXT          A. NO.
* NEXT AND PREVIOUS (UNCHAIN FROM MIDDLE)
         ST    R15,NEXT(R14)  NEXT=NEXT
         ST    R14,PREV(R15)  PREV=PREV
         BR    R3             RETURN
NNEXT    EQU   *              *
* NO NEXT AND PREVIOUS  (UNCHAIN FROM BOTTOM)
         ST    R15,NEXT(R14)  NEXT=0
         ST    R14,LAST(R1)   LAST=PREV
         BR    R3             RETURN
NPREV    EQU   *              *
         LTR   R15,R15        Q. IS THERE A NEXT
         BZ    NNEXT1         A. NO.
* NO PREVIOUS AND A NEXT  (UNCHAIN FROM TOP)
         ST    R15,FIRST(R1)   FIRST=NEXT
         ST    R14,PREV(R15)  PREV=0
         BR    R3             RETURN
NNEXT1   EQU   *              *
* NO PREVIOUS AND NO NEXT (UNCHAIN  ONLY)
         ST    R15,FIRST(R1)  FIRST=0
         ST    R14,LAST(R1)   LAST=0
         BR    R3             RETURN
         DROP  R6,R7
         EJECT
         IHAASCB
         EJECT
         IHAASVT                                               @YM01596
         EJECT
         IHAASXB
         EJECT
         CVT   DSECT=YES,LIST=YES
         EJECT
         IHADQE
         EJECT
         IHAFRRS
         EJECT
         IHAFQE
         EJECT
         IHAGDA
         EJECT
**********************************************************************
*                                                                    *
*        ENQ/DEQ/RESERVE GLOBAL SAVE AREA                            *
*                                                                    *
*                                                                    *
*        A NIP DEPENDENCY REQUIRES THAT THE FOLLOWING          @Z30BNVD
*        DATA FIELDS BEGIN AT DISPLACEMENT X'80' AND ARE       @Z30BNVD
*        CONTIGUOUS. NIP INITIALIZES THESE FIELDS.             @Z30BNVD
*                       GSCOUNT  - 6 WORDS                     @Z30BNVD
*                       GSQUEUE  - 6 WORDS                     @Z30BNVD
*                       GSBLOCKB - 1 WORD                      @Z30BNVD
*                       GSBLOCKE - 1 WORD                      @Z30BNVD
*                                                                    *
**********************************************************************
GS       DSECT
GSSAVE   DS    0F             18 WORD SAVE AREA
         DS    F              1ST WORD
GSPSAVE  DS    F              PREVIOUS SAVE
GSNSAVE  DS    F              NEXT SAVE
GSSAVE1  DS    16F            REGISTER SAVE AREA (MUST BE 16 WORDS)
GSR14SAV DS    1F             LINK R14 SAVE AREA
GSR2SAVE DS    1F             LINK R2 SAVE AREA
GSGBSV   DS    0F             GET/FREE BLOCK RTN SAVE AREA     @Z30BNVD
GSR3SAVE DS    11F            LINK R3 SAVE AREA
GSCOUNT  DS    6F             CONTAINS COUNT OF FREE CELLS IN QUEUE
GSQUEUE  DS    6F             POINTERS TO HEADS OF FREE CELL QUEUES
GSBLOCKB DS    F              BEGINNING ADDR OF BLOCK          @Z30BNVD
GSBLOCKE DS    F              ENDING ADDR OF BLOCK             @Z30BNVD
GSCLEAR  EQU   *              HERE TO GSCLEARL IS CLEARED ON EACH ENTRY
GSLSTQEL DS    F              LIST QEL SAVE FOR DEQ
GS3WORDS DS    0F             BLOCK LENGTH SAVE LOCATIONS
GSMNWORD DS    F              LENGTH OF MINOR BEING OBTAINED
GSMJWORD DS    F              LENGTH OF MAJOR BEING OBTAINED
GSQLWORD DS    F              LENGTH OF QEL BEING OBTAINED
GSGPAREA EQU   *              BEGINNING OF GROUP INDICATORS
GSGRPNUM DS    F              ACTUAL OR POTENTIAL GROUP NUMBER
GSGROUP  DS    0H             BEGINNING OF GROUP COUNTERS
GSGROUP0 DS    H              DUMMY GROUP.
GSGROUP1 DS    H              NUMBER OF QELS IN GROUP 1
GSGROUP2 DS    H              NUMBER OF QELS IN GROUP 2
GSGROUP3 DS    H              NUMBER OF QELS IN GROUP 3
GSGROUP4 DS    H              NUMBER OF QELS IN GROUP 4
GSGPLEN  EQU   *-GSGPAREA     LENGTH OF GROUP INDICATOR AREA
GSASID   DS    H              ASID SAVE LOCATION
GSCLEARL EQU   *-GSCLEAR      LENGTH OF AREA REINIT. ON EACH ENTRY
GSFLAG1  DS    B              GENERAL ENQ/DEQ STATUS FLAGS
GSHOLD   EQU   X'80'          USED ONLY BY THE XHOLD/XRLSE ROUTINE
GSNOENQ  EQU   X'40'          ENQ ON-OFF SWITCH
GSFRRSER EQU   X'20'          SERIOUS ERROR (SET BY FRR)
* FROM HERE ON IS FRR WORK AREA
GSFRRSAV DS    4F             GENERAL SAVE AREA
GSFRRSDW EQU   GSFRRSAV+12    SDWA AD (REG 1)
GSFRR2SV DS    4F             LINK REG2 SAVE AREA
GSFRR3SV DS    4F             LINK REG3 SAVE AREA
GSFRR4SV DS    4F             LINK REG4 SAVE AREA
         EJECT
         IECDIOCM
         EJECT
         IECDIOSB
IOSBLEN  EQU   IOSEND-IOSB    LENGTH OF IOSB
         EJECT
         IHAQCB
MAJBASIC EQU   24             LENGTH OF ALL MAJORS
MAJLEN   EQU   MAJNAME-MAJ+8  BASIC SIZE OF A MAJOR QCB
MINLEN   EQU   MINNAME-MIN    NON-VARIABLE SIZE OF MINOR QCB
MINBASIC EQU   20             MINIMUM LENGTH OF ALL MINORS
         EJECT
PELPREFX DSECT
PELTCB   DS    A              IF BOTH TCB AND ECB ARE CODED, TCB
*                             ADDRESS                          @ZA14267
PELDUAL  DS    A              PEL PREFIX WORD (TCB ADDR. OR ECB ADDR.)
PEL      EQU   *              BEGINNING OF PEL
PELLAST  DS    X              FLAG 1 BYTE
PELEOL   EQU   X'80'          LAST ELEMENT OF LIST
PELIGNOR EQU   X'40'          IGNORE REMAINING BITS OF THIS BYTE
PELRES1  EQU   X'20'          RESERVED
PELSHR   EQU   X'10'          SHARED RESOURCE                  @YM03340
PELSAVE  EQU   X'08'          RESERVED
PELGEN1  EQU   X'04'          SEE COMMENTS BELOW
PELGEN2  EQU   X'02'          SEE COMMENTS BELOW
PELTCBF  EQU   X'01'          TCB= WAS SPECIFIED
* PELGEN1 AND PELGEN2
*   00- NO GENERIC
*   01- GENERIC=YES
*   10- GENERIC=COND (VS1 ONLY)
*   11- GENERIC=ALL (VS1 ONLY)
PELMILEN DS    X              RNAME LENGTH
PELFLAG  DS    X              FLAG 2 BYTE
PELSHARE EQU   X'80'          0 = EXCLUSIVE, 1 = SHARE
PELSCPE1 EQU   X'40'          SEE COMMENTS BELOW
PELSYSMC EQU   X'20'          OBSOLETE (SET/RESET SYSTEM MUST COMPLETE)
PELSTPMC EQU   X'10'          SET/RESET STEP MUST COMPLETE SPECIFIED
PELSCPE2 EQU   X'08'          SEE COMMENTS BELOW
PELRET1  EQU   X'04'          SEE COMMENTS BELOW
PELRET2  EQU   X'02'          SEE COMMENTS BELOW
PELRET3  EQU   X'01'          SEE COMMENTS BELOW
* PELRET1 AND PELRET2 AND PELRET3
*   000- RET=NONE (NO RET)
*   001- RET=HAVE
*   010- RET=CHNG
*   011- RET=USE
*   100- ECB=
*   101- RESERVED
*   110- RESERVED
*   111- RET=TEST
* PELSCPE1 AND PELSCPE2
*   00- STEP
*   01- SYSTEMS AND UCB
*   10- SYSTEM
*   11- SYSTEMS
PELRET   DS    X              RETURN CODE AREA
PELMAJA  DS    A              ADDRESS OF QNAME
PELMAJSZ EQU   8              LENGTH OF QNAME
PELMINA  DS    A              ADDRESS OF RNAME
PELELEM  EQU   *-PEL          LENGTH OF ONE PARAMETER ELEMENT
PELUCBAA DS    A              ADDRESS OF POINTER TO UCB
         EJECT
         IHAPSA
         EJECT
         IHAQEL
QELSIZE1 EQU   16             SUBORDINATE QEL (NOT LIST QEL)
QELSIZE2 EQU   24             LISTQEL WITHOUT UCB
QELSIZE3 EQU   28             LIST QEL WITH UCB
QELBASIC EQU   16             MINIMUM LENGTH OF ALL QELS
         EJECT
         IHARB
RBOPSWKY EQU   RBOPSW+1       PSW KEY IN RB
         EJECT
         ORG   RBEXSAVE
WA       EQU   *                   ENQ WORK AREA
* WARNING----WARNING----WARNING----WARNING----WARNING----WARNING *
* ENQ/DEQ MAY USE 12 WORDS
* THE RESOURCE MANAGER AND SUBROUTINES MAY ONLY USE THE 1ST 7 WORDS
* COMMON TO ENQ/DEQ/RESOURCE MANAGER
WADWORD  DS    D              QUICK SAVE AREA (NOT USED ACROSS BAL)
WAWTOQ   DS    F              PTR. TO FIRST MSG. IN MSG. QUEUE
WARETRY  DS    X              INDEX TO RETRY ADDRESS
WAERR    DS    X              FIRST DIGIT OF ABEND CODE
WARESV1  DS    H              RESERVED
WAFLAG1  DS    B              CURRENT PROCESSING FLAGS
WACMS    EQU   X'80'          ON - CMS LOCK HELD
WAFRR    EQU   X'40'          ON - FRR ESTABLISHED
WALOCAL  EQU   X'20'          ON - LOCAL LOCK HELD
WASPOST  EQU   X'10'          ON - ISSUE SPOST
WASTATUS EQU   X'08'          ON - ISSUE STATUS
WAABNDMC EQU   X'04'          THIS TASK/ADDRSPACE ABEND IN M.C.
WAWAITN  EQU   X'02'          ON - WAITING QEL FOUND (NOT ECB)
WA1DEQ   EQU   X'01'          ON - INDICATES AT LEAST ONE QEL DEQUEUED
WAFLAG2  DS    B              USER/INPUT SUMMARY FLAGS
WABADMIL EQU   X'80'          ON - BAD MINOR LENGTH SPECIFIED
WARMC    EQU   X'40'          ISSUE STATUS RESET,MC,STEP
WADAMAGE EQU   X'20'          TRIGGERS Q-DAMAGE MESSAGE
WANOCORE EQU   X'10'          ON - NO STORAGE AVAILABLE
WAR15SW  EQU   X'08'          ON - INDICATES NON-ZERO RETURN CODE
WAWAIT   EQU   X'04'          ON - WAIT WITHIN ENQ
WANOAUTH EQU   X'02'          ON - FAILED AUTHORIZATION CHECK
WANWPEL  EQU   X'01'          INDICATES GOT NEW PARM LIST CORE
WAPFLGS  DS    H              SAVED PARM FLAGS
WAPLAST  EQU   WAPFLGS+0      SAVED PELLAST FLAG BYTE
WAPFLAG  EQU   WAPFLGS+1      SAVED PELFLAG FLAG BYTE
WARMLEN  EQU   *-WA           RES. MGR. WA LENGTH
* COMMON TO JUST ENQ/DEQ
WANEWPEL DS    F              NEW PARAMETER LIST ADDR (UNAUTH. CALLER)
WAOLDPEL DS    F              INPUT PARAMETER LIST ADDRESS
WAPARMSZ DS    F              SIZE OF NEW PARAM. LIST OBTAINED
WANAMESZ DS    F              TOTAL SIZE OF MINOR NAME
WAFLAG3  DS    B              ADDITIONAL PROCESSING FLAGS      @Z30BNVD
WALONGWT EQU   X'80'          ON - ISSUE LONG WAIT             @Z30BNVD
WARET    DS    B              RETURN CODE SAVE LOCATION
WAKEY    DS    H              CALLER'S KEY
WAECBA   DS    F              ECB SAVE FOR ENQ  (HIGH BIT 1)
WATCBA   EQU   WAECBA         TCB SAVE FOR ENQ/DEQ (HIGH BIT 0)
WAECBF   EQU   X'80'          HIGH BIT 1 MEANS ECB SPECIFIED.
WALEN    EQU   *-WA           LENGTH OF WORK AREA
         EJECT
         IHARMPL
         EJECT
         IHASCB
         EJECT
         EJECT
         IHASRB
SRBLEN   EQU   *-SRB          LENGTH OF SRB
         EJECT
         IHASCVT LIST=YES                                      @YM03564
         EJECT
         IHASDWA
         ORG   SDWAVRA        VARIABLE RECORDING AREA
VRA      EQU   *              *
VRACOUNT DS    XL4            ERROR COUNT
* FROM HERE DOWN IS INFO PERTAINING TO FIRST ERROR ENCOUNTERED
VRACSECT DS    XL4            ADDRESS OF IEAVENQ1
VRALINKA DS    XL4            LAST 'BAL' PRIOR TO RECORDING
VRACODE  DS    XL4            CODE X'10' QEL, X'14' MINOR, X'18' MAJOR
VRAADDR1 DS    XL4            FIRST ADDRESS OF INVALID RANGE
VRAADDR2 DS    XL4            LAST ADDRESS OF INVALID RANGE
VRALEN1  EQU   *-VRA          MINIMUM RECORD LENGTH
VRAIMAGE DS    XL64           INVALID RANGE IMAGE
VRALEN2  EQU   *-VRAIMAGE     MAXIMUM IMAGE LENGTH
         EJECT
         IHASPQE
         EJECT
         IKJTCB
         EJECT
TIOT     DSECT
         IEFTIOT1
         EJECT
IEFUCBOB DSECT
         IEFUCBOB  LIST=YES
UCBSKA   EQU   UCBOB+X'30'    SEEK ADDRESS
         EJECT
         IHAWSAVT  CLASS=GLOBAL
         EJECT
         IHAWSAVT
         EJECT
Z        DSECT
* COMBINES THE IOSB AND SRB FOR 'STARTIO' LOGIC.
ZIOSB    DS    0D             IOSB
         ORG   *+IOSBLEN      IOSB END
ZSRB     DS    0D             SRB
         ORG   *+SRBLEN       SRB END
ZLEN     EQU   *-Z            Z END
         EJECT
IGC048   CSECT
*        THESE CONSTANTS MUST BE ADDRESSABLE BY THE FRR,
*        THE ESTAE, AND NORMAL ENQ/DEQ PROCESSING. THE
*        TECHNIQUE USED IS THAT THE FRR USES THE START OF
*        THE CONSTANTS AS THE BEGINNING OF ITS ADDRESSABILITY.
*        ALL OTHER PROCESSING USES THE BEGINNING OF THE
*        MODULE AS THE START OF ADDRESSABILITY; THUS, THE
*        CONSTANT AREA IS AT THE END OF THAT ADDRESSABILITY.
*
FRRBASE  DS    0D                DUMMY FOR FRR ADDRESSABILITY
*        THE FOLLOWING CONSTANTS ARE NEEDED FOR INTRA MODULE
*        ADDRESSABILITY.
*
BASES    DC    A(IGC048),A(IGC048+4096) BASE ADDRESS'S FOR THIS MODULE
ERBPREL  DC    AL4(RBPRFXND-RBPREFIX)   LENGTH OF RB PREFIX    @ZA03873
POSTADDR DC    V(IEA0PT01)    POST E.P.
WAITADDR DC    V(IEAVWAIT)    BRANCH E.P. TO WAIT
SP245    DC    0F'0',AL3(245),AL1(0)    SUBPOOL 245
SP253    DC    0F'0',AL3(253),AL1(0)    SUBPOOL 253
FONE     DC    F'1'           FULL WORD ONE
HONE     EQU   FONE+2         HALF WORD ONE
FFOUR    DC    F'4'           FULL WORD FOUR
HFOUR    EQU   FFOUR+2        HALF WORD FOUR
FEIGHT   DC    F'8'           FULL WORD EIGHT
HEIGHT   EQU   FEIGHT+2       HALF WORD EIGHT
HIGHBIT  DC    X'80000000'    MASK TO TURN ON HIGH ORDER BIT
KEYMASK  DC    X'000000F0'    MASK TO TURN OFF ALL BUT KEY BITS
HMAJSZ   EQU   FEIGHT+2       MAJOR NAME LENGTH
HPELSZ   DC    H'12'          ELEMENT SIZE IN INPUT PARM LIST
HMAXLEN  DC    AL2(INSERT7L)  MAXIMUM MINOR LENGTH FOR MSG
ST       DC    CL2'ST'        ST MEANS STEP.
HPREFIX  DC    AL2(PEL-PELPREFX) LENGTH OF PEL PREFIX          @ZA14267
TABLE    DC    CL16'0123456789ABCDEF'  TRANSLATE TABLE
SYSTABLE DS    0D             AUTHORIZED NAME TABLE
* THIS TABLE MUST BE IN ALPHABETICAL ORDER
         DC    CL8'SYSCTLG'   SYSCTLG                           @Y02113
         DC    CL8'SYSDSN'    SYSDSN
         DC    CL8'SYSIEA01'  SYSIEA01
         DC    CL8'SYSIEECT'  SYSIEECT
         DC    CL8'SYSIEFSD'  SYSIEFSD
         DC    CL8'SYSIGGV1'  SYSIGGV1                          @Y02113
         DC    CL8'SYSIGGV2'  SYSIGGV2                          @Y02113
         DC    CL8'SYSPSWRD'  SYSPSWRD
         DC    CL8'SYSVSAM'   SYSVSAM                           @Y02113
         DC    CL8'SYSVTOC'   SYSVTOC
SYSZ     DC    CL4'SYSZ',XL4'FFFFFFFF'   THIS IS  A STOPPER
LIST     DC    CL8'IEAVENQ1'  LOAD MUDULE NAME
         DC    CL8'IGC048'    CSECT NAME
         DC    CL8'IEAVSRR1'  FRR NAME
LISTLEN  EQU   *-LIST         *
RETRY    DS    0F             RETRY ADDRESSES
RETRYDEQ EQU   *-RETRY        INDEX TO RETRY ADDRESS
         DC    A(DEQXRTRY)    DEQ RETRY ADDRESS
RETRYENQ EQU   *-RETRY        INDEX TO RETRY ADDRESS
         DC    A(ENQXRTRY)    ENQ RETRY ADDRESS
RETRYERM EQU   *-RETRY        INDEX TO RETRY ADDRESS
         DC    A(ERMXRTRY)    RES. MGR. RETRY ADDRESS
DUMMYPEL DS    0F             DUMMY PEL FOR QEL SCAN ROUTINE
DUMMYWD1 DC    X'80010000'    END OF LIST AND MINOR LENGTH OF ONE
DUMMYWD2 DC    X'00000000'    DUMMY QNAME ADDRESS
DUMMYWD3 DC    X'00000000'    DUMMY RNAME ADDRESS
FZERO    EQU   DUMMYWD3       FULLWORD OF ZERO
HZERO    EQU   FZERO          HALFWORD OF ZERO
* NOTE: BY CHANGING QTAB,GSCOUNT AND GSQUEUE THE NUMBER OF
*       QUEUES CAN BE CHANGED.
IEAVENQQ DS    0F             USED BY NIP TO INIT LIMITS       @Z30BNVD
QTAB     DC    F'0',F'0',F'48',F'98',F'18',F'10' Q LIMITS=4K   @Z30BNVD
QLENGTH  EQU   *-QTAB-4       TABLE LENGTH
QRANGE   DC    A(QLENGTH)     ALL INSIDE OF RANGE CAN BE QUEUED
BLKSIZE  DC    F'0',F'0',F'384',F'1152',F'256',F'160' SECONDARY        X
               BLOCK SIZES 24,48,8,4 ELEMENTS RESPECTIVELY     @Z30BNVD
BR14     BR    R14            ERROR ROUTINE FOR BAD CROSS MEM POSTS
MOVEMIN  MVC   ZERO(ZERO,R10),ZERO(R15)  MOVE RNAME
MOVEMIN1 MVC   MINNAME-MIN(ZERO,R12),ZERO(R14)  MOVE RNAME
MOVEMIN2 MVC   INSERT7+FOUR(ZERO,R1),MINNAME  MOVE MINOR TO WTO STORAGE
COMPMIN  CLC   MINNAME(ZERO),ZERO(R12)   COMPARE MINOR NAMES
         EJECT
ERMWTP   WTO   'IEA803I JS FAILED WHILE IN ''STEP MUST COMPLETE'' STATU-
               S DUE TO S   ',MF=L,ROUTCDE=(1)  WTP MSG
INSERT1  EQU   12             JS OR ST INSERT
INSERT2  EQU   66             COMP CODE INSERT
ERMWTO1  WTO   'IEA801I UNIDENTIFIED TASK JS FAILED WHILE IN ''STEP MUS-
               T COMPLETE STATUS''',ROUTCDE=(1),DESC=3,MF=L  WTO MSG
INSERT5A EQU   30             ST OR JS INSERT
INSERT3  EQU   12             JOB NAME INSERT
INSERT4  EQU   20             COMMA INSERT
INSERT5  EQU   21             STEP NAME INSERT
ERMWTO2  WTO   'IEA961I RESOURCE NAMED         ,                       -
                               ',ROUTCDE=(1),DESC=3,MF=L  WTO MSG
INSERT6  EQU   27             MAJOR NAME INSERT
INSERT7  EQU   36             MINOR NAME INSERT
FRRWTO   WTO   'IEA960I ENQ/DEQ CONTROL QUEUES WERE DAMAGED. RESTORATIO-
               N ATTEMPTED',ROUTCDE=(1),DESC=3,MF=L  WTO MSG
INSERT1L EQU   2              JS OR ST LENGTH
INSERT3L EQU   8              JOB NAME LENGTH
INSERT5L EQU   8              STEP NAME LENGTH
INSERT6L EQU   8              MAJOR NAME LENGTH
INSERT7L EQU   24             MAX MINOR NAME LENGTH
MAYBEDAM DC    CL14'MAY BE DAMAGED'  INSERT FOR ERMWTO2
MAYLEN   EQU   *-MAYBEDAM     MSG LENGTH
         EJECT
* BIT MASKS
M0001    EQU   B'0001'        MASK USED IN ICM INSTR.
M0010    EQU   B'0010'        MASK USED IN ICM INSTR.
M0011    EQU   B'0011'        MASK USED IN ICM INSTR.
M0111    EQU   B'0111'        MASK USED IN ICM INSTR.
M1000    EQU   B'1000'        MASK USED IN ICM INSTR.
M1100    EQU   B'1100'        MASK USED IN ICM INSTR.
M1111    EQU   B'1111'        MASK USED IN ICM INSTR.
* REGISTER EQUATES - INDICATE GENERAL USAGE
R0       EQU   0              WORK
R1       EQU   1              ADDRESS OF SDWA OR WORK
R2       EQU   2              RETURN ADDR. - FIRST LEVEL SUBROUTINES
R3       EQU   3              RETURN ADDR. - SECOND LEVEL SUBROUTINES
R4       EQU   4              ADDRESS OF CURRENT TCB
R5       EQU   5              ADDRESS OF CURRENT RB
R6       EQU   6              FIRST BASE
R7       EQU   7              SECOND BASE
R8       EQU   8              ADDR. OF PEL OR ADDR. OF RMPL
R9       EQU   9              ADDRESS OF MAJOR
R10      EQU   10             ADDRESS OF MINOR
R11      EQU   11             ADDRESS OF QEL
R12      EQU   12             RETURN ADDR. - THIRD LEVEL SUBROUTINES
R13      EQU   13             ADDR. OF ENQ/DEQ GLOBAL SAVE AREA
R14      EQU   14             WORK
R15      EQU   15             WORK AND RETURN CODE
         EJECT
* CONSTANTS
ZERO     EQU   0              ZERO
ONE      EQU   1              ONE
TWO      EQU   2              TWO
THREE    EQU   3              THREE
FOUR     EQU   4              FOUR
FIVE     EQU   5              FIVE
SEVEN    EQU   7              SEVEN
EIGHT    EQU   8              EIGHT
NINE     EQU   9              NINE
TWELVE   EQU   12             TWELVE
TWENTY   EQU   20             TWENTY
BLKRANGE EQU   20             INDEX TO LAST AVAILABLE                  X
                               COUNT/QUEUE IN THE GS           @Z30BNVD
AB138    EQU   1              PREFIX FOR ABEND CODE
AB238    EQU   2              PREFIX FOR ABEND CODE
AB338    EQU   3              PREFIX FOR ABEND CODE
AB438    EQU   4              PREFIX FOR ABEND CODE
AB638    EQU   6              PREFIX FOR ABEND CODE
AB838    EQU   8              PREFIX FOR ABEND CODE
AB130    EQU   1              PREFIX FOR ABEND CODE
AB230    EQU   2              PREFIX FOR ABEND CODE
AB330    EQU   3              PREFIX FOR ABEND CODE
AB430    EQU   4              PREFIX FOR ABEND CODE
AB530    EQU   5              PREFIX FOR ABEND CODE
AB630    EQU   6              PREFIX FOR ABEND CODE
AB3XX    EQU   3              PREFIX FOR ABEND CODE
AB4XX    EQU   4              PREFIX FOR ABEND CODE
AB6XX    EQU   6              PREFIX FOR ABEND CODE
AB7XX    EQU   7              PREFIX FOR ABEND CODE
NEXT     EQU   0              NEXT MAJ,MIN,QEL
PREV     EQU   4              PREVIOUS MAJ,MIN,QEL
FIRST    EQU   0              FIRST MAJ,MIN,QEL
LAST     EQU   4              LAST MAJ,MIN,QEL
FWORD    EQU   3              FULLWORD BOUNDRY CHECK
DWORD    EQU   7              DOUBLEWORD BOUNDRY CHECK
XFF      EQU   X'FF'          ALL ONES
DEQCODE  EQU   X'30'          BACK END OF DEQ ABEND CODE.
ENQCODE  EQU   X'38'          BACK END OF ENQ CODE.
NOSUPKEY EQU   X'80'          WHEN ON - NOT SUPR KEY           @YM03564
WTOLEN   EQU   88             LENGTH OF WTO GOTTEN STORAGE
         EJECT
IEAVSRR1 EQU   *              SOFTWARE RECOVERY ROUTINE
DEQFRR   EQU   *              *
ENQFRR   EQU   *              *
ERMFRR   EQU   *              *
XFRR     EQU   *              *
         BALR  R15,ZERO       TEMPORARY ADDRESSABILITY
         USING *,R15          TEMPORARY ADDRESSABILITY
         L     R6,XFRRBASE           GET PERMANENT ADDRESSABILITY
         DROP  R15
         USING FRRBASE,R6           PERMANENT ADDRESSABILITY
         USING SDWA,R1        SDWA ADDRESSABILITY
         MVC   SDWAMODN(LISTLEN),LIST  MOVE 3 NAMES
         OI    SDWAACF2,SDWAFREE+SDWARCRD  FREE SDWA, ALSO RECORD.
         ICM   R0,M0011,SDWAFMID   Q. LSQA ADDRESSABLE
         BNZ   NREF           A. NO.
         L     R5,SDWAPARM    GET W.A. ADDRESSABILITY
         L     R5,ZERO(R5)    DITTO
         MVI   WAERR,AB7XX    INDICATE UNEXPECTED ABEND
         L     R9,CVTPTR      GET ENQ/DEQ GLOBAL S.A.
TEST19A  EQU   *              *
         L     R13,CVTSPSA-CVT(R9)   DITTO.
         L     R13,WSAGNQDQ-WSAG(R13)   DITTO
*
* PARM LIST IS INVALID, IF---
* PROGRAM CHECK OCCURRED
* PROGRAM CHECK PSW KEY IS NOT ZERO
* FRR WAS NOT PERCOLATED TO.
* NOTE-THE RESOURCE MANAGER RUNS ONLY IN KEY 0.
*
         TM    SDWAERRA,SDWAPCHK Q. INVALID PARM LIST
         BZ    NINVALID       A. NO.
         TM    SDWAMWP1,SDWAKEY1    Q. INVALID PARM LIST
         BZ    NINVALID       A. NO.
         TM    SDWAERRC,SDWAPERC  Q. INVALID PARM LIST.
         BO    NINVALID       A. NO.
         MVI   WAERR,AB4XX    INDICATE INVALID LIST ABEND
         NI    SDWAACF2,XFF-SDWARCRD  DON'T RECORD
         B     YINVALID       A. YES. INVALID PARM LIST
NINVALID EQU   *              *
         STM   R14,R1,GSFRRSAV   SAVE RETURN AD,SDWA AD
         TM    WAFLAG1,WACMS  Q. HAVE CMS.
         BZ    NSEARCH        A. NO.
         LR    R0,R13         SAVE REG
XX       SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,RELATED=((XY))
TEST19B  EQU   *              *
         LR    R13,R0         RESTORE REG
* SCAN,VERIFY AND FIX QUEUES.
         LA    R12,CVTFQCB-CVT(R9) ADDRESS OF FIRST/LAST (MAJOR)
         LA    R8,MAJBASIC    PASS COMMON LENGTH OF MAJOR
         BAL   R2,XFRRFIX     VERIFY AND MAYBE FIX, Q. SERIOUS ERROR
         BZ    NSERIOUS       A. NO.
         OI    GSFLAG1,GSNOENQ  A. YES, TURN OFF ENQ.
NSERIOUS EQU   *              *
         ICM   R9,M1111,CVTFQCB-CVT(R9)  Q. ANY MAJORS
QMAJOR1  EQU   *              *
         BZ    NMAJOR1        A. NO.
         LA    R12,MAJFMIN    ADDRESS OF FIRST/LAST (MINOR)
         LA    R8,MINBASIC    PASS COMMON LENGTH OF MINOR
         BAL   R2,XFRRFIX     VERIFY AND MAYBE FIX. Q. SERIOUS ERROR
         BZ    NSER           A. NO.
         OI    GSFLAG1,GSNOENQ   A. YES. TURN OFF ENQ.
NSER     EQU   *              *
         ICM   R10,M1111,MAJFMIN Q. ANY MINORS.
QMINOR1  EQU   *              *
         BZ    NMINOR1        A. NO.
         LA    R12,MINFQEL    ADDRESS OF FIRST/LAST (QEL)
         LA    R8,QELBASIC    PASS COMMON LENGTH OF QEL
         BAL   R2,XFRRFIX     VERIFY AND MAYBE FIX, Q. SERIOUS ERROR
         BZ    NSERI          A. NO.
         OI    MINFLGS,MINNOENQ  A. YES. NO ENQS FOR THIS MINOR
NSERI    EQU   *              *
         ICM   R10,M1111,MINNMIN  Q. ANY MORE MINORS.
         BNZ   QMINOR1        A. YES.
NMINOR1  EQU   *              *
         ICM   R9,M1111,MAJNMAJ  Q. ANY MAJORS LEFT.
         BNZ   QMAJOR1        A. YES.
NMAJOR1  EQU   *              *
         L     R1,QRANGE      GET THE HIGHEST VALID INDEX
QGOODQS  EQU   *              *
         L     R14,GSQUEUE(R1)   GET TOP OF QUEUE.
QGOODQ   EQU   *              *
         LTR   R14,R14        Q. THIS QUEUE O.K.
         BZ    YGOODQ         A. YES.
         LR    R15,R14        GET END OF STORAGE PLUS ONE
         AR    R15,R1         DITTO
         AR    R15,R1         DITTO
         BAL   R4,XFRRQGOT    Q. GOOD QUEUE
         BNZ   NGOODQ         A. NO.
         L     R14,NEXT(R14)  GET NEXT FREE ELEMENT ADDRESS
         B     QGOODQ         LOOP.
NGOODQ   EQU   *              *
         SR    R4,R4          RESTORE QUEUE
         ST    R4,GSQUEUE(R1) DITTO
YGOODQ   EQU   *              *
         S     R1,FFOUR       Q. LAST INDEX
         BNZ   QGOODQS        A. NO. LOOP.
* GSQUEUE IS STILL GOOD OR HAS BEEN MADE GOOD.
         LR    R0,R13         SAVE REG
XY       SETLOCK  RELEASE,TYPE=SALLOC,RELATED=((XX))  FREE LOCK
TEST19D  EQU   *              *
         LR    R13,R0         RESTORE REG
NSEARCH  EQU   *              *
         LM    R14,R1,GSFRRSAV   RESTORE REGS
YINVALID EQU   *              *
         SR    R15,R15        CLEAR FOR INSERT
         ICM   R15,M0001,WARETRY  Q. RETRY
         BZ    NRETRY         A. NO.
         L     R15,RETRY(R15) GET RETRY ADDRESS
         MVI   WARETRY,ZERO   ZERO FOR RECURSION
* SETUP INPUT REGS FOR RETRY
         LM    R6,R7,BASES  SET MAINLINE BASE REGS             @ZA03873
         STM   R5,R13,SDWASR05   PASS R5,R6,R7,R13
* RETRY
         ST    R15,SDWARTYA   SET RETRY ADDRESS
         MVI   SDWARCDE,FOUR  INDICATE RETRY
         SR    R15,R15        RETURN
TEST19M  EQU   *              *
         BR    R14            DITTO
NRETRY   EQU   *              *
NREF     EQU   *              *
         OI    SDWAACF4,SDWACMS+SDWAFLLK   FREE LOCKS
         MVI   SDWARCDE,ZERO  CONTINUE W/TERMINATION
         SR    R15,R15        A.O.K.
TEST20   EQU   *              *
         BR    R14            EXIT
         EJECT
XFRRFIX  EQU   *              *
* VERIFY AND MAYBE FIX THE QUEUES
         STM   R1,R4,GSFRR2SV SAVE REGS.
         SR    R1,R1          PREVIOUS ELEMENT =0
         SR    R2,R2          PREVIOUS ELEMENT =0
         NI    GSFLAG1,XFF-GSFRRSER   RESET ANSWER FLAGS
         L     R14,FIRST(R12) GET FIRST
QBADFOW  EQU   *              *
         LR    R15,R14        GET END OF BASIC SECTION PLUS 1
         AR    R15,R8         DITTO
         LTR   R14,R14        Q. ANY MORE
         BZ    NBADFOW        A. NO MORE FOWARD POINTERS
         BAL   R3,XFRRQADR    Q. BAD ADDRESS.
         BNZ   YBADFOW        A. YES.
         CLR   R14,R12        Q. CIRCULAR QUEUE
         BE    YCIRCLE        A. YES. BAD FOWARD POINTER
         LTR   R1,R1          Q. TOP ELEMENT.
         BZ    NCIRCLE        A. YES. NOT CIRCULAR YET.
         L     R4,FIRST(R12)  A. NO. CHECK FOR CIRCLE.
QCIRCLE  EQU   *              *
         CLR   R14,R4         Q. CIRCULAR QUEUE
         BE    YCIRCLE        A. YES.
         CLR   R4,R1          Q. END OF SEARCH
         BE    NCIRCLE        A. YES.
         L     R4,NEXT(R4)    CONTINUE SEARCH.
         B     QCIRCLE        DITTO.
NCIRCLE  EQU   *              *
         CL    R1,PREV(R14)   Q. HAS BACKWARD QUEUE BEEN HIT.
         BE    NHITBACK       A. NO.
         BAL   R4,XFRRSM      INDICATE SMALL ERROR
         ST    R1,PREV(R14)   FIX PREVIOUS.
NHITBACK EQU   *              *
         CL    R1,LAST(R12)   Q. DOES LAST POINT WITHIN Q.
         BNE   NWITHIN        A. NO.
         BAL   R4,XFRRSM      INDICATE SMALL ERROR.
         XC    LAST(FOUR,R12),LAST(R12)  FIX IT.
NWITHIN  EQU   *              *
         LR    R1,R14         PREVIOUS=CURRENT
         ICM   R14,M1111,NEXT(R14)  CONTINUE DOWN QUEUE
         B     QBADFOW        DITTO
YCIRCLE  EQU   *              *
YBADFOW  EQU   *              *
         LTR   R1,R1          Q. BAD ADDRESS IN HEADER
         BZ    YBADFIRS       A. YES.
         BAL   R4,XFRRSM      INDICATE SMALL ERROR
         XC    NEXT(FOUR,R1),NEXT(R1)  FIX CHAIN POINTER
         B     NBADFIRS       CONTINUE
YBADFIRS EQU   *              *
         BAL   R4,XFRRSER     INDICATE LARGE ERROR.
         XC    FIRST(FOUR,R12),FIRST(R12)  FIX HEADER
NBADFIRS EQU   *              *
NBADFOW  EQU   *              *
         L     R14,LAST(R12)  GET LAST
QBADBACK EQU   *              *
         LR    R15,R14        GET END OF BASIC BLOCK PLUS 1
         AR    R15,R8         DITTO
         LTR   R14,R14        Q. ANY MORE
         BZ    NBADBACK       A. NO MORE BACKWARD POINTERS
         BAL   R3,XFRRQADR    Q. BAD ADDRESS
         BNZ   YBADBACK       A. YES.
         CLR   R14,R12        Q. CIRCULAR QUEUE
         BE    YCIRCL         A. YES.
         LTR   R2,R2          Q. CIRCULAR QUEUE
         BZ    NCIRCL         A. NO. FIRST TIME CANNOT BE CIRCULAR
         L     R4,LAST(R12)   A. MAYBE
QCIRCL   EQU   *              *
         CLR   R14,R4         Q. CIRCULAR QUEUE
         BE    YCIRCL         A. YES.
         CLR   R4,R2          Q. CIRCULAR QUEUE
         BE    NCIRCL         A. NO. THIS IS END OF SEARCH.
         L     R4,PREV(R4)    A. MAYBE. CONTINUE SEARCH.
         B     QCIRCL         DITTO.
NCIRCL   EQU   *              *
         CL    R2,NEXT(R14)   Q. HAS FOWARD Q BEEN HIT
         BE    NHITFOW        A. NO.
         BAL   R4,XFRRSM      INDICATE SMALL ERROR
         ST    R2,NEXT(R14)   FIX IT.
NHITFOW  EQU   *              *
         LR    R2,R14         PREVIOUS=CURRENT
         ICM   R14,M1111,PREV(R14)  CONTINUE UP QUEUE.
         B     QBADBACK       Q. END OF QUEUE.
YCIRCL   EQU   *              *
YBADBACK EQU   *              *
         LTR   R2,R2          Q. BAD 'LAST' ADDRESS.
         BZ    YBADLAST       A. YES.
         BAL   R4,XFRRSM      INDICATE SMALL ERROR.
         XC    PREV(FOUR,R2),PREV(R2)  FIX IT.
         B     NBADBACK       CONTINUE
YBADLAST EQU   *              *
         BAL   R4,XFRRSER     INDICATE SERIOUS ERROR
         XC    LAST(FOUR,R12),LAST(R12)  FIX IT.
NBADBACK EQU   *              *
         SR    R1,R1          PREVIOUS=0
         ICM   R14,M1111,FIRST(R12)  Q. EMPTY Q.
QLASTFOW EQU   *              *
         BZ    YLASTFOW       A. YES.
         LR    R1,R14         PREVIOUS=CURRENT
         ICM   R14,M1111,NEXT(R14)  CONTINUE DOWN QUEUE.
         B     QLASTFOW       Q. IS IT THE END.
YLASTFOW EQU   *              *
         CL    R1,LAST(R12)   Q. IS FOWARD QUEUE GOOD
         BE    YFOW           A. YES.
         CL    R2,FIRST(R12)  Q. IS BACKWARD QUEUE GOOD
         BE    NFOWYBCK       A. YES.
         LTR   R1,R1          Q. IS BACKWARD QUEUE GOOD.
         BZ    NFOWYBCK       A. YES.
         LTR   R2,R2          Q. IS FOWARD QUEUE GOOD
         BZ    YFOWNBCK       A. YES.
NFOWNBCK EQU   *              *
* BAD FOWARD, BAD BACKWARD.
         BAL   R4,XFRRSER     INDICATE SERIOUS ERROR.
         ST    R1,PREV(R2)    CHAIN THE LOOSE ENDS.
         ST    R2,NEXT(R1)    DITTO.
         B     YFOWYBCK       CONTINUE.
NFOWYBCK EQU   *              *
* BAD FOWARD, GOOD BACKWARD.
         BAL   R4,XFRRSER     INDICATE SERIOUS ERROR.
         ST    R2,FIRST(R12)  FIX IT.
         B     YFOWYBCK       CONTINUE.
YFOW     EQU   *              *
* GOOD FOWARD.
         CL    R2,FIRST(R12)   Q. IS BACKWARD QUEUE GOOD.
         BE    YFOWYBCK       A. YES.
YFOWNBCK EQU   *              *
* GOOD FOWARD, BAD BACKWARD.
         BAL   R4,XFRRSER     INDICATE SERIOUS ERROR.
         ST    R1,LAST(R12)   FIX IT.
YFOWYBCK EQU   *              *
         TM    GSFLAG1,GSFRRSER  CC=0 OK, CC NE 0 SERIOUS ERROR
         LM    R1,R4,GSFRR2SV RESTORE REGS
         BR    R2             RETURN.
         EJECT
XFRRQADR EQU   *              *
*  VERIFY THAT ADDRESS PASSED IN R14 IS A GOOD ADDRESS
*  R15 CONTAINS THE LAST BYTE +1 TO BE VERIFIED
         STM   R1,R4,GSFRR3SV SAVE REGS.
         BAL   R4,XFRRQGOT    Q. BAD ADDRESS.
* OUTPUT IS COND. CODE 0=GOOD ADDRESS, NZ=BAD ADDRESS
         BNZ   YBADADR        A. YES.
         LA    R1,MINBASIC    GET MIDDLE BASIC LENGTH
         CLR   R8,R1          DETERMINE EXIT ROUTINE
         BE    XMINCK         MINOR EXIT.
         BL    XQELCK         QEL EXIT.
XMAJCK   EQU   *              MAJOR EXIT.
         B     NBADADR        NOT A BAD ADDRESS.
XMINCK   EQU   *              *
         SR    R1,R1          CLEAR
         IC    R1,MINNAMEL-MIN(R14)  GET MINOR NAME LENGTH
         AR    R15,R1         CALCULATE MINOR QCB END ADDR. +1
         BAL   R4,XFRRQGOT    Q. BAD ADDRESS.
* AN OUTPUT CC OR NZ MEANS BAD ADDRESS
         BNZ   YBADADR        A. YES.
* CHECK MINOR SCOPE
         TM    MINFLGS-MIN(R14),MINSYSS+MINSYS  Q. BAD SCOPE
         BO    YBADADR        A. YES
         TM    MINFLGS-MIN(R14),MINSYSS+MINSTEP  Q. BAD SCOPE.
         BO    YBADADR        A. YES.
         TM    MINFLGS-MIN(R14),MINSYS+MINSTEP  Q. BAD SCOPE
         BO    YBADADR        A. YES.
         B     NBADADR        A. NO. GOOD CONTROL BLOCK.
XQELCK   EQU   *              *
         LR    R1,R14         SAVE REG 14
         LR    R2,R15         SAVE REG
         TM    QELTCB-QEL(R14),FWORD  Q. FULL WORD BNDY.
         BNZ   YBADQEL        A. NO. BAD QEL ADDRESS.
         TM    QELQFLGS-QEL(R14),QELLIST  Q. LIST QEL
         BO    YLSTQEL        A. YES.
*  SUBQEL THRU HERE.
         TM    QELQFLGS-QEL(R14),QELRESV   Q. RESERVE
         BZ    NRESERV2       A. NO.
         A     R15,FFOUR      ADD UCB ADDRESS LENGTH
         BAL   R4,XFRRQGOT    Q. BAD QEL
         BNZ   YBADQEL        A. YES.
         L     R3,QELSIZE1(R14)  GET UCB ADDRESS
         BAL   R4,XFRRQUCB    Q. GOOD UCB ADDRESS
         BZ    YGOODUCB       A. YES.
         BAL   R4,XFRRSM      RECORED SMALL ERROR
         NI    QELQFLGS-QEL(R14),XFF-QELRESV   RESET RESERVE BIT.
YGOODUCB EQU   *              *
NRESERV2 EQU   *              *
         ICM   R14,M1111,QELLQEL-QEL(R1)  GET LIST QEL ADDRESS
         BNM   YBADQEL        Q. HIGH BIT ON. A. NO. BAD ADDRESS
         X     R14,HIGHBIT    ZERO HIGH BIT                    @YM01991
YLSTQEL  EQU   *              *
* R14 CONTAINS LISTQEL ADDRESS TO BE CHECKED.
* R1 CONTAINS A SUBQEL OR SAME AS R14
         LA    R15,QELSIZE2   GET END ADDRESS PLUS 1
         AR    R15,R14        DITTO
         BAL   R4,XFRRQGOT    Q. GOTTEN IN SP245
         BNZ   YBADQEL        A. NO.
         TM    QELTCB-QEL(R14),QELXLIST  Q. CORRECT BIT SETTING
         BO    YBADQEL        A. NO. BAD ADDRESS.
         TM    QELQFLGS-QEL(R14),QELRESV  Q. RESERVE
         BZ    NRESERV        A. NO.
         A     R15,FFOUR      ADD UCB ADDRESS LENGTH
         BAL   R4,XFRRQGOT    Q. BAD QEL
         BNZ   YBADQEL        A. YES.
         L     R3,QELSIZE2(R14)  GET UCB ADDRESS.
         BAL   R4,XFRRQUCB    Q. GOOD UCB ADDR.
         BZ    YUCBOK         A. YES.
         BAL   R4,XFRRSM      RECORD SMALL ERROR
         NI    QELQFLGS-QEL(R14),XFF-QELRESV   RESET RESERVE BIT.
YUCBOK   EQU   *              *
NRESERV  EQU   *              *
         TM    QELECB-QEL(R14),QELXECB  Q. ECB
         BO    YECB           A. YES.
* SVRB THRU HERE
         TM    QELLFLGS-QEL(R14),QELECBF  Q. BITS CONFLICT
         BO    YBADQEL        A. YES. BAD QEL ADDRESS.
         B     NECB2          CONTINUE
YECB     EQU   *              *
         TM    QELLFLGS-QEL(R14),QELECBF  Q. BITS CONFLICT
         BZ    YBADQEL        A. YES.
NECB2    EQU   *              *
         CLC   QELLCNT-QEL(TWO,R14),HZERO  Q. LIST COUNT INACCURATE
         BE    YBADQEL        A. YES.
* GOOD QEL, SO FAR.
         CLC   QELLFLGS-QEL(THREE,R14),QELLFLGS-QEL(R1) Q. COMMON MATCH
         BNE   YBADQEL        A. NO. BAD QEL.
         LR    R14,R1         RESTORE REG 14
         LR    R15,R2         RESTORE REG
         B     NBADADR        GOOD ADDRESS RETURN.
YBADQEL  EQU   *              *
* BAD QEL
         LR    R14,R1         RESTORE REG 14
         LR    R15,R2         RESTORE REG
YBADADR  EQU   *              *
* BAD ADDRESS, CC NE 0
         LM    R1,R4,GSFRR3SV RESTORE REGS.
         LTR   R3,R3          CC NE 0
         BR    R3             RETURN
NBADADR  EQU   *              *
* GOOD ADDRESS, CC EQ 0
         LM    R1,R4,GSFRR3SV RESTORE REGS.
         CLR   R3,R3          CC EQ 0.
         BR    R3             RETURN.
         EJECT
XFRRQGOT EQU   *              *
         STM   R1,R3,GSFRR4SV SAVE REGS.
         L     R1,CVTPTR      GET SPQE FOR SUBPOOL 245
         L     R1,CVTGDA-CVT(R1)  DITTO.
         L     R1,SQASPQEP-GDA(R1)  DITTO.
TEST32E  EQU   *              *
         ICM   R1,M1111,SPDQEPTR-SPQESECT(R1)  Q. ANY DQE-S LEFT.
QDQE     EQU   *              *
TEST32F  EQU   *              *
         BZ    NDQE           A. NO.
* HAVE DQE IN R1
         L     R2,DQEBLKAD-DQESECT(R1)  GET LOW ADDRESS OF BLOCK
         LR    R3,R2          GET END OF BLOCK AD PLUS 1
         A     R3,DQELNTH-DQESECT(R1)   DITTO.
* CHECK IF ADDRESS RANGE LIES WITHIN ALLOCATED STORAGE.
         CLR   R14,R2         Q. LOW ADDRESS IN THIS BLOCK.
         BL    NINDQE         A. NO. H=MAYBE,L=NO,E=YES.
         CLR   R15,R3         Q. HIGH ADDRESS IN THIS BLOCK
         BNH   YDQE           A. YES.
NINDQE   EQU   *              *
TEST32G  EQU   *              *
         ICM   R1,M1111,DQEPTR-DQESECT(R1) Q. ANY MORE DQE-S
         B     QDQE           LOOP
YDQE     EQU   *              *
         ICM   R1,M1111,DQFQEPTR-DQESECT(R1)  A. ANY FQE-S.
QFQE     EQU   *              *
         BZ    NFQE           A. NO.
* HAVE FQE IN REG 1
         LA    R3,FQESLNTH    GET END OF FREE AREA PLUS 1
         AR    R3,R1          DITTO
         LR    R2,R3          GET BEGINING OF FREE AREA.
         S     R2,FQELNTH-FQESECT(R1)   DITTO.
* CHECK FOR OVERLAP OF ADDRESS RANGE VS. FREE AREA.
         CLR   R15,R2         Q. HIGH ADDRESS LE FREE AREA.
         BNH   NINFQE         A. YES. NOT IN THIS FREE AREA.
         CLR   R14,R3         Q. LOW ADDRESS HE FREE AREA.
         BL    YFQE           A. NO. RANGE AND FREE AREA OVERLAP.
NINFQE   EQU   *              *
         ICM   R1,M1111,FQEPTR-FQESECT(R1)  Q. ANY MORE FQE-S
         B     QFQE           LOOP
NFQE     EQU   *              *
* CHECK FOR OVERLAP OF ADDRESS RANGE AND STORAGE CHECKS
         L     R1,GSFRRSDW    GET SDWA ADDRESS
         USING SDWA,R1        ADDRESSABILITY
         CL    R15,SDWASCKB   Q. LE BEGIN
         BNH   NSTORCK        A. YES. NOT A STORAGE CK.
         CL    R14,SDWASCKE   Q. HIGHER THAN END
         BH    NSTORCK        A. YES. NOT A STORAGE CK.
         TM    SDWAMCHD,SDWASCK  Q. STORAGE CHECK.
         BO    YSTORCK        A. YES. BAD ADDRESS.
NSTORCK  EQU   *              *
         LM    R1,R3,GSFRR4SV RESTORE REGS.
         CLR   R4,R4          SET CC=0
         BR    R4             RETURN
YSTORCK  EQU   *              *
YFQE     EQU   *              *
NDQE     EQU   *              *
         LM    R1,R3,GSFRR4SV RESTORE REGS.
         LTR   R4,R4          SET CC NE 0
         BR    R4             RETURN.
         EJECT
XFRRSER  EQU   *               *
         OI    GSFLAG1,GSFRRSER   INDICATE SERIOUS ERROR.
XFRRSM   EQU   *              *
         STM   R1,R4,GSFRR4SV SAVE REGS.
         OI    WAFLAG2,WADAMAGE  INDICATE QUEUE DAMAGE
         L     R1,GSFRRSDW    GET SDWA ADDRESS
         USING SDWA,R1        ADDRESSABILITY
         L     R2,VRACOUNT    ADD 1 TO ERROR COUNT
         A     R2,FONE        DITTO
         ST    R2,VRACOUNT    DITTO
         ST    R6,VRACSECT    SAVE ADDRESS OF THIS MODULE
         CLI   SDWAURAL,ZERO  Q. FIRST TIME THRU
         BNE   NSAVE          A. NO. DON'T SAVE
         MVC   VRACOUNT(FOUR),FONE  START COUNTING
         OI    SDWADPVA,SDWAHEX  INDICATE HEX DATA.
         ST    R4,VRALINKA    SAVE THE LAST LINK(BAL) ADDRESS
         LR    R2,R8          CONTROL BLOCK CODE
         LR    R3,R14         START ADDRESS
         LR    R4,R15         END ADDRESS
         BCTR  R4,ZERO        DITTO
         STM   R2,R4,VRACODE  SAVE IT
         MVI   SDWAURAL,VRALEN1   INDICATE LENGTH
TEST32J  EQU   *              *
         LRA   R2,ZERO(R3)    Q. CAN SAVE
         BNZ   NSAVE          A. NO.
         LA    R2,VRALEN2-ONE  GET MAXIMUM LENGTH TO MOVE
         SR    R4,R3          GET CORRECT LENGTH
         CLR   R2,R4          Q. MOVE MAXIMUM
         BNH   YMAX           A. YES.
         LR    R2,R4          A. NO. SAVE LENGTH MINUS 1
YMAX     EQU   *              *
         LR    R4,R3          OBTAIN END ADDRESS
         AR    R4,R2          DITTO.                           @YM05430
TEST32K  EQU   *              *
         LRA   R4,ZERO(R4)    Q. CAN SAVE
         BNZ   NSAVE          A. NO.
         EX    R2,BADMOVE     MOVE IT.
BADMOVE  MVC   VRAIMAGE(ZERO),ZERO(R3)  DITTO
         LA    R2,VRALEN1+ONE(R2) ACQUIRE TOTAL LENGTH
         STC   R2,SDWAURAL    SAVE TOTAL
NSAVE    EQU   *              *
         LM    R1,R4,GSFRR4SV RESTORE REGS.
         BR    R4             RETURN.
         EJECT
XFRRQUCB EQU   *              *
         STM   R1,R3,GSFRR4SV SAVE REGS.
TEST32L  EQU   *              *
         LRA   R1,UCBID-UCBOB(R3)  Q. VALID UCB.
         BNZ   NREALAD        A. NO.
         CLI   UCBID-UCBOB(R3),XFF  Q. VALID UCB.
NREALAD  EQU   *              *
         LM    R1,R3,GSFRR4SV RESTORE REGS.
         BR    R4             RETURN (CC OF 0 IS O.K.)
*        THE FOLLOWING CONSTANT MUST STAY AT FRR END TO BE
*        ABLE TO ADDRESS THE COMMON CONSTANTS.
XFRRBASE DC    A(FRRBASE)     ADDR OF CONSTANTS FOR BASE
         END   IGC048
