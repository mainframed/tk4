         TITLE 'IEAVECH0 - CHAP SVC - ENTRY POINT IGC044'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVECH0
*
*02*     CSECT-NAME = IGC044
*
*01*  DESCRIPTIVE-NAME = CHAP
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = OSVS2 RELEASE 2 VERSION 1
*
*01*  FUNCTION = THIS ROUTINE ALTERS THE DISPATCHING PRIORITY OF A
*        TASK
*
*02*     OPERATION = CHAP SVC: THIS ROUTINE ALTERS THE DISPATCHING
*        PRIORITY OF A TASK AND REPOSITIONS THE TCB, ACCORDING TO THE
*        NEW PRIORITY, ON THE TCB DISPATCHING QUEUE. FOR OTHER THAN
*        SYSTEM TASK CALLERS, THE SUBJECT TASK MUST BE EITHER THE
*        CURRENT TASK OR ONE OF ITS SUBTASKS.
*
*        IGC044R1: THIS ROUTINE IS AN FRR FOR CHAP. IT CALLS ROUTINE
*        IGC044R2 TO VERIFY TCB QUEUES, AND PERCOLATES.
*
*        IGC044R2: THIS ROUTINE VALIDATES THE TCB FAMILY AND
*        DISPATCHING QUEUES FOR RECOVERY. THE CURRENT ASCB AND ASXB ARE
*        VEFIFIED BY CONTROL BLOCK VERIFIER, THE DISPATCHING QUEUE IS
*        VERIFIED BY QUEUE VERIFIER, AND THE FAMILY QUEUE  IS VERIFIED
*        BY PERFORMING A TREE SCAN, VERIFYING THE REQUIRED POINTERS BY
*        CALLING CONTROL BLOCK VERIFIER.
*
*01*   NOTES =
*
*02*     DEPENDENCIES = THE LOCAL LOCK IS REQUIRED THROUGH OUT THIS
*        MODULE.
*
*03*        CHARACTER-CODE-DEPENDENCIES = NONE
*
*02*     RESTRICTIONS = NONE
*
*02*     REGISTER-CONVENTIONS = REGISTER DEFINITIONS FOLLOW THE CSECT
*        STATEMENT. FURTHER DESCRIPTIONS IN INTRODUCTORY COMMENTS FOR
*        EACH SUBROUTINE AND EACH RECOVERY ROUTINE.
*
*02*     PATCH-LABEL = IEAPATCH
*
*01*  MODULE-TYPE = SVC ROUTINE, WITH RECOVERY
*
*02*     PROCESSOR = ASSEMBLER
*
*02*     MODULE-SIZE = SEE SYMBOL IGC044 IN THE EXTERNAL SYMBOL
*        DICTIONARY.
*
*02*     ATTRIBUTES = NUCLEUS,ZERO PROTECT KEY, REFRESHABLE, SUPERVISOR
*        MODE
*
*01*  ENTRY-POINT = IGC044
*
*02*     PURPOSE = SVC CHAP
*
*02*     LINKAGE = SVC 44 ONLY (CHAP MACRO)
*
*02*     INPUT = REGISTER 0 CONTAINS THE ALGEBRAIC VALUE BY WHICH THE
*        DISPATCHING PRIORITY IS TO BE CHANGED. REGISTER 1 CONTAINS
*        ZERO OR THE ADDRESS OF A FULLWORD ON A FULLWORD BOUNDARY,
*        WHICH IN TURN CONTAINS THE ADDRESS OF THE TCB TO BE CHAPPED.
*        REGISTER 1 EQUAL TO ZERO INDICATES THAT THE CURRENT TASK IS TO
*        BE CHAPPED. FOR OTHER THAN SYSTEM TASKS, IF A TCB ADDRESS IS
*        SPECIFIED, IT MUST BE THE ADDRESS OF THE TCB OF A SUBTASK OF
*        THE CURRENT TASK.
*
*02*     OUTPUT = NONE
*
*01*  EXIT-NORMAL =
*
*02*     CONDITIONS = SVC CHAP EXITS TO IEAVEXP1, THE FORCE DISPATCHER
*        ENTRY TO EXIT PROLOGUE (OBTAINED FROM CVTEXP1).
*
*02*     OUTPUT = NONE
*
*02*     RETURN-CODES = NONE
*
*01*  EXIT-ERROR = CHAP9030
*
*02*     CONDITIONS = FOR A DETECTED ERROR DURING SVC PROCESSING, ABEND
*        IS ISSUED. AN INVALID PARAMETER ADDRESS CAN ALSO CAUSE THE FRR
*        TO BE ENTERED TO PROCESS THE ERROR (SEE INTRODUCTORY COMMENTS
*        FOR IGC044R1).
*
*02*     OUTPUT = ABEND CODE, 12C OR 22C
*
*02*     RETURN-CODES = NONE
*
*01*  ENTRY-POINT = IGC044R1
*
*02*     PURPOSE = A FUNCTIONAL RECOVERY ROUTINE (FRR) TO PROVIDE
*        RECOVERY FOR TCB QUEUE ERRORS.
*
*02*     LINKAGE = ENTRY FROM RECOVERY TERMINATION MANAGER (RTM)
*        FROM A STACK ELEMENT CREATED BY SETFRR MACRO CODE IN IGC044
*        ENTRY PROCESSING.
*
*02*     INPUT = REGISTER 1 CONTAINS THE ADDRESS OF AN SDWA. REGISTER
*        14 CONTAINS THE RETURN ADDRESS. REGISTER 15 CONTAINS THE ENTRY
*        POINT ADDRESS. REGISTER 0 CONTAINS THE ADDRESS OF A 200 BYTE
*        WORKAREA.
*
*02*     OUTPUT = RETURN CODE. NEW SYSTEM COMPLETION CODE IN CASE OF
*        ENTRY CAUSED BY INVALID PARAMETER.
*
*01*  EXIT-NORMAL = CHAP7000
*
*02*     CONDITIONS = RETURN TO RTM VIA BR 14.
*
*02*     OUTPUT = RETURN CODE. TCB QUEUES AS MODIFIED BY IGC044R2.
*
*02*     RETURN-CODES = 0, NO RETRY.
*
*01*  EXIT-ERROR = NONE
*
*01*  ENTRY-POINT = IGC044R2
*
*02*     PURPOSE = RECOVERY ROUTINE WHICH VALIDATES THE TCB FAMILY AND
*        DISPATCHING QUEUES.
*
*02*     LINKAGE = BRANCH ENTRY ONLY, ADDRESS OBTAINED FROM V-TYPE
*        ADDRESS CONSTANT. CALLED BY CHAP SVC, STATUS, ATTACH SVC
*        MODULE IEAVEAT0, DETACH SVC MODULE IEAVEED0.
*
*02*     INPUT = REGISTER 1 CONTAINS THE ADDRESS OF AN SDWA. REGISTER
*        14 CONTAINS THE RETURN ADDRESS. REGISTER 15 CONTAINS THE ENTRY
*        POINT ADDRESS. REGISTER 0 CONTAINS THE ADDRESS OF A 200 BYTE
*        WORKAREA. REGISTER 2 CONTAINS 0 FOR NO DUMP, OR THE ADDRESS OF
*        THE TITLE FOR AN SVC DUMP.
*
*02*     OUTPUT = RETURN CODE.
*
*02*     REGISTERS-SAVED = 0, 1, 9, 14
*
*01*  EXIT-NORMAL = CHAP8000
*
*02*     CONDITIONS = RETURN TO CALLER VIA BR 14.
*
*02*     OUTPUT = RETURN CODE. TCB DISPATCHING AND FAMILY QUEUE MAY BE
*        RESTRUCTURED TO CORRECT ERRORS (SEE INTRODUCTORY COMMENTS FOR
*        IGC044R2).
*
*02*     RETURN-CODES = SEE INTRODUCTORY COMMENTS FOR IGC044R2.
*
*01*  EXIT-ERROR = NONE
*
*01*  EXTERNAL-REFERENCES =
*
*02*     ROUTINES = TESTAUTH TO CHECK CALLER FOR SYSTEM OR APF
*        AUTHORIZATION, BRANCH LINKAGE GENERATED BY TESTAUTH MACRO.
*        STATUS TO STOP THE TCB TO BE CHAPPED, BRANCH ADDRESS OBTAINED
*        FROM SCVTSTAT. QUEUE VERIFIER, IEAVEQV1 AT ENTRY POINT
*        IEAVEQV3, TO VERIFY TCB DISPATCHING QUEUE, BRANCH ADDRESS
*        FROM V-TYPE ADDRESS CONSTANT. TCB CONTROL BLOCK VERIFIER
*        IEAVETCB, TO VERIFY TCB'S ON THE FAMILY QUEUE, BRANCH
*        ADDRESS FROM V-TYPE ADDRESS CONSTANT. ASCB CONTROL BLOCK
*        VERIFIER IEAVECAS, TO VERIFY THE CURRENT ASXB BEFORE USING
*        THE TCB DISPATCHING QUEUE POINTERS, BRANCH ADDRESS FROM
*        V-TYPE ADDRESS CONSTANT. SVC DUMP TO DUMP THE SQA, LSQA, AND
*        TRACE TABLE ON SYSTEM ERROR, BRANCH LINKAGE GENERATED BY SDUMP
*        MACRO.
*
*02*     DATA-AREAS = SDWA
*
*02*     CONTROL-BLOCKS = ASCB(W), ASXB(W), TCB(W), RB(R), CVT(R),
*        SCVT(R), PSA(R)
*
*01*  TABLES = 200 BYTE WORKAREA PROVIDED TO FRR BY RTM
*
*01*  MACROS = SETFRR, TESTAUTH, SETRP, ABEND, MODESET, SDUMP
*
*02*    SERIALIZATION = LOCAL LOCK, HELD ON ENTRY, NEITHER OBTAINED NOR
*       RELEASED IN THIS MODULE.
*
*01*  CHANGE-ACTIVITY = Y02752, Y02753, VS02632, VS04242
*
*01*  MESSAGES = NONE
*
*01*  ABEND-CODES = 12C, INVALID PARAMETER. 22C, INVALID PARAMETER WORD
*     ADDRESS.
*
**** END OF SPECIFICATIONS ***/
         EJECT
IGC044   CSECT
         ENTRY IGC044R2
*A-000000-999999                                                @Y02752
         SPACE 3
*        EQUATES
KEYMASK  EQU   X'F0'                   MASK FOR CLEARING PSW CMWP BITS
STATMASK EQU   X'0B'                   MASK FOR STATUS STOP TCB
WORDMASK EQU   B'00000011'             MASK FOR CHECKING FULLWORD
ABEND12C EQU   X'12C'                  ABEND CODE, PARM INVALID
ABEND22C EQU   X'22C'                  ABEND CODE, PARM ADDR INVALID
SAVELNG  EQU   72                      STANDARD SAVE AREA LENGTH
SPID245  EQU   245                     SUBPOOL ID, SQA
C0       EQU   0                       CONSTANT 0
C1       EQU   1                       CONSTANT 1
C2       EQU   2                       CONSTANT 2
C3       EQU   3                       CONSTANT 3
C8       EQU   8                       CONSTANT 8
C12      EQU   12                      CONSTANT 12
C16      EQU   16                      CONSTANT 16
RCODE4   EQU   4                       RETURN CODE, RECOVERY RTN
RCODE8   EQU   8                       RETURN CODE, RECOVERY RTN
RCODE12  EQU   12                      RETURN CODE, RECOVERY RTN
         SPACE 3
*        REGISTERS
R0       EQU   0                       REGISTER 0
R1       EQU   1                       REGISTER 1
R2       EQU   2                       REGISTER 2
R2ASXB   EQU   2                       ADDRESS OF ASXB
R3       EQU   3                       REGISTER 3
R4CURTCB EQU   4                       ADDRESS OF CURRENT TCB
R4       EQU   4                       REGISTER 4
R5CURRB  EQU   5                       ADDRESS OF CURRENT SVRB
R5       EQU   5                       REGISTER 5
R6BASE   EQU   6                       ADDRESS OF ENTRY POINT
R7ASCB   EQU   7                       ADDRESS OF ASCB
R7       EQU   7                       REGISTER 7
R8CHAP   EQU   8                       ADDRESS OF TCB TO BE CHAPPED
R8       EQU   8                       REGISTER 8
R9FRRWA  EQU   9                       ADDRESS OF FRR WORKAREA
R9       EQU   9                       REGISTER 9
R10      EQU   10                      REGISTER 10
R10VALUE EQU   10                      NUMERICAL VALUE FOR CHAPPING
R11      EQU   11                      REGISTER 11
R12      EQU   12                      REGISTER 12
R13      EQU   13                      REGISTER 13
R13FORWD EQU   13                      CHAP TCB FORWARD PTR
R14      EQU   14                      REGISTER 14
R14RET   EQU   14                      RETURN ADDRESS
R15      EQU   15                      REGISTER 15
R15BACK  EQU   15                      CHAP TCB BACK PTR
R15RETCD EQU   15                      RETURN CODE
         EJECT
***********************************************************************
*                                                                     *
*                              CHAP SVC                               *
*                                                                     *
***********************************************************************
         SPACE 4
*/* IGC044: CHART  BEGIN FLOWCHART                                   */
*/* FOOTING
*/* SVC CHAP MAINLINE                                                */
         SPACE
*/* IGC044: E ENTER CHAP SVC                                         */
         SPACE
         USING IGC044,R6BASE           ESTABLISH ADDRESSABILITY
         USING RBSECT,R5CURRB
         SPACE
         MODID BR=YES                  IDENTIFIER
         SPACE
         LR    R10VALUE,R0             SAVE CHANGE VALUE
         LR    R11,R1                  SAVE PARM ADDRESS
         SPACE
*/* L SETFRR: ESTABLISH FRR                                          */
         SPACE
         LA    R14,IGC044R1            ADDRESS OF FRR           @Y02753
         SETFRR A,FRRAD=(R14),PARMAD=(R9FRRWA),WRKREGS=(R15,R1) @Y02753
         SPACE
*/* D (YES,CHAP0010,NO,) IS THERE A PARM WORD                        */
         SPACE
         LTR   R11,R11                 WAS INPUT REG 1 NONZERO
         BNZ   CHAP0010                YES, MAY HAVE TO VALIDITY CHK
         SPACE
*/* P (,CHAP0070) SET CHAP TCB ADDR TO CURRENT TCB                   */
         SPACE
         LA    R8CHAP,0(,R4CURTCB)     SET ADDR, CLEAR HIGH ORDER BYTE
         B     CHAP0070                BYPASS VALIDITY CHECKING
         SPACE
*/* CHAP0010: L TESTAUTH: CHECK CALLER FOR KEY, STATE, APF AUTH      */
         SPACE
CHAP0010 EQU   *                       *
         TESTAUTH FCTN=1,STATE=YES,KEY=YES,RBLEVEL=2,BRANCH=YES
         SPACE
*/* D (NO,CHAP0030,YES,) IS CALLER AUTHORIZED                        */
         SPACE
         LTR   R15RETCD,R15RETCD       TESTAUTH RETURN CODE
         BNZ   CHAP0030                NONZERO, VALIDITY CHECK
         SPACE
*/* P (,CHAP0020) SET CHAP ADDR TO PARM VALUE                        */
         SPACE
         L     R8CHAP,0(,R11)          INPUT TCB ADDRESS
         LA    R8CHAP,0(,R8CHAP)       INSURE HIGH ORDER BYTE ZERO
         B     CHAP0020                BYPASS VALIDITY CHECK
         SPACE
*/* CHAP0030: D (NO,CHAP9000,YES,) IS INPUT PARM A FULLWORD          */
         SPACE
CHAP0030 EQU   *                       *
         LA    R3,WORDMASK             ALIGNMENT MASK
         NR    R3,R11                  IS ADDR ON WORD BOUNDARY
         BNZ   CHAP9000                NO, GO ABEND 22C
         SPACE
*/* P VALIDITY CHECK PARM WORD, SETTING CHAP ADDR TO PARM VALUE      */
         SPACE
         SR    R2,R2                   CLEAR
         L     R1,RBLINK               ADDRESS OF CALLERS RB
         LA    R3,KEYMASK              MASK TO CLEAR KEY
         IC    R2,RBOPSW+C1-RBSECT(,R1) PSW KEY-CMWP BITS
         NR    R2,R3                   CALLERS PROTECT KEY
         MODESET KEYADDR=(2)           SET CALLERS KEY
         L     R8CHAP,0(,R11)          PARM
         ST    R8CHAP,0(,R11)          CHECK PROTECT KEY
         MODESET EXTKEY=SUPR           RESET KEY ZERO
         LA    R8CHAP,0(,R8CHAP)       CLEAR HIGH ORDER BYTE
         SPACE
*/* D (NO,CHAP9010,YES,) IS CHAP TCB A SUBTASK OF CURRENT TASK       */
         SPACE
         ICM   R11,B'1111',TCBLTC-TCB(R4CURTCB) ADDR OF FIRST SUBTASK
         B     CHAP0050                ENTER CHECKING LOOP
         SPACE
CHAP0060 EQU   *                       TOP OF CHECKING LOOP
         ICM   R11,B'1111',TCBNTC-TCB(R11) ADDR OF NEXT SUBTASK
CHAP0050 EQU   *                       LOOP ENTRY POINT
         BZ    CHAP9010                ALL SUBTASKS CHECKED WITH NO
*                                        MATCH, GO ABEND 12C
         CR    R8CHAP,R11              IS THIS THE CHAP TCB
         BNE   CHAP0060                NO, CHECK NEXT SUBTASK
*                                      YES, CONTINUE
         EJECT
***********************************************************************
*                                                                     *
*                PARAMETER VALIDITY CHECKING COMPLETE                 *
*                                                                     *
***********************************************************************
         SPACE 4
*/* CHAP0020: D (YES,CHAP9010,NO,) HAS THE CHAP TCB TERMINATED       */
         SPACE
CHAP0020 EQU   *                       *
         TM    TCBFLGS5-TCB(R8CHAP),TCBFC IS THE TASK COMPLETE FLAG ON
         BO    CHAP9010                YES, GO ABEND 12C
         SPACE
*/* D (NO,CHAP0070,YES,) IS THE CHAP TCB ACTIVE                      */
         SPACE
         TM    TCBFBYT1-TCB(R8CHAP),TCBACTIV IS THE CHAP TASK ACTIVE
*                                              ON ANOTHER CPU
         BZ    CHAP0070                NO, BYPASS STATUS STOP
         SPACE
*/* L STATUS: STOP THE CHAP TASK                                     */
         SPACE
         LA    R0,STATMASK             INDICATE RESET TCB NON DISP
         LR    R1,R8CHAP               CHAP TCB TO BE RESET
         SR    R13,R13                 NO NODISP BITS TO BE SET
         L     R15,CVTPTR              CVT ADDRESS
         L     R15,CVTABEND-CVT(,R15)  SCVT ADDRESS
         L     R15,SCVTSTAT-SCVTSECT(,R15) STATUS BRANCH ENTRY ADDR
         BALR  R14RET,R15              INVOKE STATUS
         EJECT
***********************************************************************
*                                                                     *
*               UNCHAIN CHAP TCB FROM DISPATCHING QUEUE               *
*                                                                     *
***********************************************************************
         SPACE 4
*/* CHAP0070: S UNCHAIN: REMOVE CHAP TCB FROM DISPATCH QUEUE         */
         SPACE
CHAP0070 EQU   *                       *
         L     R2ASXB,ASCBASXB-ASCB(,R7ASCB) CURRENT ASXB ADDR
         BAL   R14,UNCHAIN             REMOVE CHAP TCB FROM QUEUE
         SPACE 4
***********************************************************************
*                                                                     *
*                      ALTER CHAP TASK PRIORITIES                     *
*                                                                     *
***********************************************************************
         SPACE 4
*/* P CALCULATE NEW DISPATCHING PRIORITY                             */
         SPACE
         SR    R13,R13                 CLEAR
         IC    R13,TCBDSP-TCB(,R8CHAP) GET PRESENT DISPATCH PRIORITY
         AR    R13,R10VALUE            CALCULATE NEW DISP PRIORITY
         SPACE
*/* D (YES,CHAP0080,NO,) IS NEW DISP GT ZERO                         */
         SPACE
         LTR   R13,R13                 IS DISP POSITIVE
         BP    CHAP0080                YES, CONTINUE CHECK
         SPACE
*/* P (,CHAP0090) RESET NEW DISP TO ZERO                             */
         SPACE
         SR    R13,R13                 ZERO
         B     CHAP0090                GO SET TCB DISP
         SPACE
*/* CHAP0080: D (NO,CHAP0100,YES,) IS NEW DISP GE CURRENT TCB LIMIT  */
         SPACE
CHAP0080 EQU   *                       *
         SR    R10,R10                 CLEAR
         IC    R10,TCBLMP-TCB(,R4CURTCB) CURRENT TCB LIMIT PRIORITY
         CR    R13,R10                 DOES NEW DISP EXCEED THIS LIMIT
         BL    CHAP0100                NO, CONTINUE CHECK
         SPACE
*/* P (,CHAP0110) SET NEW DISP AND NEW LIMIT TO CURRENT LIMIT        */
         SPACE
         LR    R13,R10                 RESET CALCULATED DISP
*                                      NEW LIMIT VALUE=CURRENT LIMIT
         B     CHAP0110                GO STORE VALUES INTO CHAP TCB
         SPACE
*/* CHAP0100: D (NO,CHAP0090,YES,) IS NEW DISP GT CHAP TCB LIMIT     */
         SPACE
CHAP0100 EQU   *                       *
         IC    R10,TCBLMP-TCB(,R8CHAP) CHAP TCB LIMIT PRIORITY
         CR    R13,R10                 DOES NEW DISP EXCEED LIMIT
         BNH   CHAP0090                NO, GO STORE NEW DISP
         SPACE
*/* P SET NEW LIMIT TO NEW DISP                                      */
         SPACE
         LR    R10,R13                 CHAP TCB LIMIT WILL INCREASE
         SPACE
*/* CHAP0110: P STORE NEW LIMIT INTO CHAP TCB                        */
         SPACE
CHAP0110 EQU   *                       *
         STC   R10,TCBLMP-TCB(,R8CHAP) SAVE
         SPACE
*/* CHAP0090: P STORE NEW DISP INTO CHAP TCB                         */
         SPACE
CHAP0090 EQU   *                       *
         STC   R13,TCBDSP-TCB(,R8CHAP) SAVE
         EJECT
***********************************************************************
*                                                                     *
*       RECHAIN CHAP TCB AT PROPER POSITION ON DISPATCHING QUEUE      *
*                                                                     *
***********************************************************************
         SPACE 4
*/* S CHAIN: ADD CHAP TCB TO DISPATCHING QUEUE                       */
         SPACE
         BAL   R14RET,CHAIN            INVOKE QUEUING SUBROUTINE
         SPACE 3
***********************************************************************
*                                                                     *
*    CHAP PROCESSING COMPLETE OR ERROR DETECTED, EXIT FROM CHAP SVC   *
*                                                                     *
***********************************************************************
         SPACE 4
*/* P (,CHAP0180) RESTORE REGS 0, 1, 14, 15                          */
         SPACE
         L     R15,CVTPTR              ADDRESS OF THE CVT
         L     R14RET,CVTEXP1-CVT(,R15) RETURN ADDRESS IN EXIT PROLOGUE
*                                      TO FORCE DISPATCHER ENTRY
         L     R15,RBGRS15             RESTORE 15
         LM    R0,R1,RBGRS0            RESTORE 0, 1
         B     CHAP0180                GO CANCEL FRR
         SPACE
*/* CHAP9000: P (,CHAP9020) SET ABEND CODE 22C                       */
         SPACE
CHAP9000 EQU   *                       *
         LA    R1,ABEND22C             INVALID PARM WORD ADDR
         B     CHAP9020                GO CLEAR RETURN ADDRESS
         SPACE
*/* CHAP9010: P SET ABEND CODE 12C                                   */
         SPACE
CHAP9010 EQU   *                       *
         LA    R1,ABEND12C             INVALID PARM
         SPACE
*/* CHAP9020: P INDICATE ABEND                                       */
         SPACE
CHAP9020 EQU   *                       *
         SR    R14RET,R14RET           NO RETURN ADDR - ABEND
         SPACE
*/* CHAP0180: L SETFRR: CANCEL FRR                                   */
         SPACE
CHAP0180 EQU   *                       *
         SETFRR D,WRKREGS=(R10,R11)    CANCEL FRR               @Y02753
         SPACE
*/* D (YES,CHAP9030,NO,) IS ABEND INDICATED                          */
         SPACE
         LTR   R14RET,R14RET           IS RETURN ADDRESS ZERO
         SPACE
*/* R () RETURN VIA EXIT PROLOGUE (IEAVEXP1)                         */
         SPACE
         BNZR  R14RET                  RETURN ADDRESS NONZERO, RETURN
         SPACE
*/* CHAP9030: L () ABEND: TERMINATE CURRENT TASK                     */
         SPACE
CHAP9030 EQU   *                       *
         ABEND (1),DUMP,,SYSTEM        INVOKE ABEND
         SPACE
*/* IGC044: END FLOWCHART                                            */
         SPACE 2
         DROP  R5CURRB
         EJECT
*/* CHAIN: CHART                                                     */
*/* FOOTING
*/* SUBROUTINE QUEUES A TCB ONTO TCB DISPATCHING QUEUE               */
         SPACE 2
***********************************************************************
*                                                                     *
* SUBROUTINE CHAIN ADDS A TCB TO THE DISPATCHING QUEUE.               *
*                                                                     *
* REGISTER USAGE : R2ASXB - ADDRESS OF THE CURRENT ASXB               *
*                  R8CHAP - ADDRESS OF TCB TO BE CHAINED              *
*                  R10    - DESTROYED                                 *
*                  R11    - DESTROYED                                 *
*                  R14RET - RETURN ADDRESS                            *
*                                                                     *
***********************************************************************
         SPACE 4
*/* E ENTER CHAIN                                                    */
         SPACE
*/* P SET 'PRESENT' (ASXBFTCB) AND 'PREVIOUS' (0) TCB PTRS           */
         SPACE
CHAIN    EQU   *                       *
         L     R10,ASXBFTCB-ASXB(,R2ASXB) ADDR OF TOP TCB ON QUEUE
         SR    R11,R11                 NO PREVIOUS TCB
         SPACE
*/* CHAP0130: D (YES,CHAP0230,NO,) IS 'PRESENT' PTR 0                */
         SPACE
CHAP0130 EQU   *                       TOP OF POSITION SEARCH LOOP
         LTR   R10,R10                 IS THIS THE END OF THE QUEUE
         BZ    CHAP0230                YES, PROCESS AS SUCH
         SPACE
*/* D (YES,CHAP0160,NO,) IS CHAP TCB DISP GT 'PRESENT' TCB DISP      */
         SPACE
         CLC   TCBDSP-TCB(C1,R8CHAP),TCBDSP-TCB(R10)
         BH    CHAP0160                CORRECT POSITION, GO CHAIN
         SPACE
*/* P (,CHAP0130) SET PREVIOUS TO PRESENT, PRESENT TO NEXT ON QUEUE  */
         SPACE
         LR    R11,R10                 CHECKED TCB BECOMES PREVIOUS
         L     R10,TCBTCB-TCB(R10)     GET NEXT ON QUEUE
         B     CHAP0130                REPEAT SEARCH LOOP
         SPACE
* END OF POSITION SEARCH LOOP
         SPACE
*/* CHAP0230: P (,CHAP0120) CHAIN CHAP TCB AT END OF DISPATCH QUEUE  */
         SPACE
CHAP0230 EQU   *                       *
         ST    R8CHAP,ASXBLTCB-ASXB(,R2ASXB) RESET END OF QUEUE PTR
         B     CHAP0120                GO SET REMAINING CHAIN PTRS
         SPACE
*/* CHAP0160: P SET 'PRESENT' TCB'S BACK PTR TO CHAP TCB             */
         SPACE
CHAP0160 EQU   *                       *
         ST    R8CHAP,TCBBACK-TCB(,R10) CHAIN PRESENT BACK TO CHAP
         SPACE
*/* CHAP0120: D (NO,CHAP0150,YES,) IS PRESENT PTR THE TOP OF QUEUE   */
         SPACE
CHAP0120 EQU   *                       *
         LTR   R11,R11                 ANY PREVIOUS TCB
         BNZ   CHAP0150                YES, BYPASS TOP OF QUEUE RESET
         SPACE
*/* P (,CHAP0140) CHAIN CHAP TCB AT TOP OF DISPATCHING QUEUE         */
         SPACE
         ST    R8CHAP,ASXBFTCB-ASXB(,R2ASXB) RESET TOP OF QUEUE PTR
         B     CHAP0140                GO SET CHAP TCB CHAIN PTRS
         SPACE
*/* CHAP0150: P CHAIN CHAP TCB AFTER 'PREVIOUS' TCB                  */
         SPACE
CHAP0150 EQU   *                       *
         ST    R8CHAP,TCBTCB-TCB(,R11) CHAP TCB FOLLOWS PREVIOUS TCB
         SPACE
*/* CHAP0140: P SET CHAIN FIELDS IN CHAP TCB                         */
         SPACE
CHAP0140 EQU   *                       *
         ST    R11,TCBBACK-TCB(,R8CHAP) CHAIN CHAP TCB TO PREVIOUS
         ST    R10,TCBTCB-TCB(,R8CHAP) CHAIN CHAP TCB TO PRESENT
         SPACE
*/* R () RETURN                                                      */
         SPACE
         BR    R14RET                  RETURN
         SPACE
*/* CHAIN: END FLOWCHART                                             */
         EJECT
*/* UNCHAIN: CHART                                                   */
*/* FOOTING
*/* SUBROUTINE REMOVES A TCB FROM THE DISPATCHING QUEUE              */
         SPACE 2
***********************************************************************
*                                                                     *
* SUBROUTINE UNCHAIN REMOVES A TCB FROM THE TCB DISPATCHING QUEUE     *
*                                                                     *
* REGISTER USAGE:                                                     *
*              R2ASXB - ADDRESS OF THE CURRENT ASXB                   *
*              R8CHAP - ADDRESS OF THE TCB TO BE UNCHAINED            *
*              R13    - DESTROYED                                     *
*              R14    - RETURN ADDRESS                                *
*              R15    - DESTROYED                                     *
*                                                                     *
***********************************************************************
         SPACE 4
*/* E ENTER UNCHAIN                                                  */
         SPACE
*/* P SET FORWARD PTR TO CHAP TCBTCB, BACK PTR TO CHAP TCBBACK       */
         SPACE
UNCHAIN  EQU   *                       ENTRY POINT
         L     R13FORWD,TCBTCB-TCB(,R8CHAP) TCB FOLLOWING CHAP TCB
         L     R15BACK,TCBBACK-TCB(,R8CHAP) TCB PRECEEDING CHAP TCB
         SPACE
*/* D (NO,CHAP0290,YES,) IS CHAP TCB AT TOP OF DISPATCHING QUEUE     */
         SPACE
         CL    R8CHAP,ASXBFTCB-ASXB(,R2ASXB) IS CHAP FIRST ON QUEUE
         BNE   CHAP0290                NO, UNCHAIN FROM PRECEEDING TCB
         SPACE
*/* P (,CHAP0190) RESET TOP OF QUEUE PTR (ASXBFTCB) TO FORWARD PTR   */
         SPACE
         ST    R13FORWD,ASXBFTCB-ASXB(,R2ASXB) RESET PTR TO FIRST TCB
         B     CHAP0190                GO CHECK BOTTOM PTR
         SPACE
*/* CHAP0290: P SET PRECEEDING TCB'S TCBTCB TO FORWARD PTR           */
         SPACE
CHAP0290 EQU   *                       *
         ST    R13FORWD,TCBTCB-TCB(,R15BACK) BREAK FORWARD CHAIN
         SPACE
*/* CHAP0190: D (NO,CHAP0200,YES,) IS CHAP TCB AT BOTTOM OF QUEUE    */
         SPACE
CHAP0190 EQU   *                       *
         CL    R8CHAP,ASXBLTCB-ASXB(,R2ASXB) IS CHAP LAST ON QUEUE
         BNE   CHAP0200                NO, UNCHAIN FROM FOLLOWING TCB
         SPACE
*/* P (,CHAP0240) RESET END OF QUEUE PTR (ASXBLTCB) TO BACK PTR      */
         SPACE
         ST    R15BACK,ASXBLTCB-ASXB(,R2ASXB) RESET PTR TO END TCB
         B     CHAP0240                GO TO EXIT SUBROUTINE
         SPACE
*/* CHAP0200: P SET FOLLOWING TCB'S TCBBACK TO BACK PTR              */
         SPACE
CHAP0200 EQU   *                       *
         ST    R15BACK,TCBBACK-TCB(,R13FORWD) BREAK BACK CHAIN
         SPACE
*/* CHAP0240: R () RETURN TO CALLER                                  */
         SPACE
CHAP0240 EQU   *                       *
         BR    R14                     RETURN
         SPACE 3
*/* UNCHAIN: END FLOWCHART                                           */
         TITLE 'IEAVECH0 - FRR FOR CHAP SVC - ENTRY POINT IGC044R1'
*/* IGC044R1: CHART                                                  */
*/* FOOTING
*/* FRR FOR SVC CHAP                                                 */
         SPACE 2
***********************************************************************
*                                                                     *
* IGC044R1 IS THE ENTRY POINT OF CHAP'S FUNCTIONAL RECOVERY ROUTINE   *
* (FRR). IT MAY BE ENTERED IN NORMAL PROCESSING BY MEANS OF A         *
* PARAMETER VALIDITY CHECK IN THE CALLER'S KEY, IN WHICH CASE THE FRR *
* SETS COMPLETION CODE 22C AND PERCOLATES, OR THROUGH AN UNEXPECTED   *
* ERROR. IN THE LATTER CASE, ROUTINE IGC044R2 IS INVOKED TO VALIDATE  *
* THE TCB QUEUES, AND THE ERROR IS PERCOLATED (I.E., THE FRR RETURNS  *
* CONTROL TO RTM SPECIFYING NO RETRY). IF ENTERED VIA PERCOLATION,    *
* STATUS HAS ALREADY CALLED IGC044R2 AND RECORDED, HENCE THIS FRR     *
* ONLY PERCOLATES. (STATUS IS THE ONLY ROUTINE CALLED BY CHAP HAVING  *
* ITS OWN FRR.)                                                       *
*                                                                     *
* SYSTEM ROUTINES CALLED / MACROS ISSUED: SETRP                       *
*                                                                     *
* SUBROUTINES CALLED: IGC044R2                                        *
*                                                                     *
* RETURN CODES SET: 0 (VIA SETRP)                                     *
*                                                                     *
* REGISTER USAGE:                                                     *
*        R0  - INPUT, ADDRESS OF 200 BYTE WORKAREA                    *
*        R1  - INPUT, ADDRESS OF SDWA                                 *
*        R9  - RETURN ADDRESS SAVE REGISTER                           *
*        R14 - RETURN ADDRESS                                         *
*        R15 - ENTRY POINT ADDRESS                                    *
*                                                                     *
***********************************************************************
         SPACE 3
*/* E ENTER IGC044R1                                                 */
         SPACE
IGC044R1 EQU   *                       ENTRY POINT
         USING IGC044R1,R15                                     @Y02753
         L     R6BASE,CHAP044E         SVC ENTRY POINT ADDRESS  @Y02753
         DROP  R15                                              @Y02753
         SPACE
*/* D (NO,CHAP7000,YES,) DID ERROR OCCUR IN CURRENT ADDRESS SPACE    */
         SPACE
         OC    SDWAFMID-SDWA(C2,R1),SDWAFMID-SDWA(R1) ASID 0    @Y02753
         BNZ   CHAP7000                NO, EXIT FRR             @Y02753
         SPACE
*/* D (YES,CHAP7010,NO,) ENTRY DUE TO VALIDITY CHECK                 */
         SPACE
         LR    R9,R14                  SAVE RETURN ADDRESS      @Y02753
         IC    R7,SDWAMWP1-SDWA(,R1)   ERROR-TIME PSW KEY-CMWP  @Y02753
         LA    R8,KEYMASK              MASK CLEARS CMWP BITS    @Y02753
         NR    R7,R8                   WAS ERROR TIME KEY ZERO  @Y02753
         BZ    CHAP7020                YES, CONTINUE RECOVERY   @Y02753
*                                      NO, CHECK INVALID PARM   @Y02753
         TM    SDWAERRA-SDWA(R1),SDWAPCHK DID A PGM CHECK OCCUR @Y02753
         BO    CHAP7010                YES, ASSUME INVALID PARM @Y02753
*                                      NO, CONTINUE RECOVERY
         SPACE
*/* CHAP7020: D (YES,CHAP7030,NO,) DID STATUS PERCOLATE THIS ERROR   */
         SPACE
CHAP7020 EQU   *                       *
         TM    SDWAERRC-SDWA(R1),SDWAPERC HAS PERCOLATION      @YM04242
*                                      OCCURRED
         BO    CHAP7030                YES, TURN OFF RECORDING @YM04242
         SPACE
*/* S (,CHAP7000) IGC044R2: VALIDATE TCB QUEUES                      */
         SPACE
         SETRP RECORD=YES,RECPARM=CHAPFRR  ERROR RECORDING      @Y02753
         LA    R15,IGC044R2            ENTRY POINT ADDRESS      @Y02753
         LA    R2,CHAPSLNG             TITLE FOR SVC DUMP       @Y02753
         BALR  R14,R15                 QUEUE VALIDATION RTN     @Y02753
* NOTE: REGISTER 6 (BASE) IS RESET TO SAME VALUE IN IGC044R2.
* REGISTERS 0, 1, 9, 14 RETURNED UNCHANGED.
         B     CHAP7000                GO EXIT FRR              @Y02753
         SPACE
*/* CHAP7030: P (,CHAP7000) REQUEST NO RECORDING                     */
         SPACE
CHAP7030 EQU   *                       *                       @YM04242
         SETRP RECORD=NO               NO RECORDING            @YM04242
         B     CHAP7000                GO EXIT                 @YM04242
         SPACE
*/* CHAP7010: P RESET COMPLETION CODE TO 22C                         */
         SPACE
CHAP7010 EQU   *                       *
         SETRP RECORD=NO,DUMP=YES      USER ERROR, NO RECORDING @Y02753
         MVC   SDWACMPC-SDWA(C3,R1),CHAP22C INVALID PARMS       @Y02753
         SPACE
*/* CHAP7000: R () RETURN TO RTM, NO RETRY (RC=0)                    */
         SPACE
CHAP7000 EQU   *                       *
         SETRP FRELOCK=(LOCAL),RC=0    NO RETRY                 @Y02753
         LR    R14,R9                  RESTORE                  @Y02753
         BR    R14                     RETURN                   @Y02753
         SPACE
*/* IGC044R1: END FLOWCHART                                          */
         TITLE 'IEAVECH0 - TCB QUEUE VALIDATION ROUTINE - IGC044R2'
*/* IGC044R2: CHART                                                  */
*/* FOOTING
*/* TCB QUEUE VERIFICATION ROUTINE                                   */
         SPACE 2
***********************************************************************
*                                                                     *
* THIS ROUTINE VERIFIES THE TCB DISPATCHING QUEUE AND THE TCB FAMILY  *
* QUEUE FOR THE CURRENT ADDRESS SPACE. IT IS AN EXTERNAL ENTRY TO     *
* CHAP, AND IS INVOKED BY OTHER MODULES FOR RECOVERY, SPECIFICALLY    *
* ATTACH, DETACH, AND STATUS.                                         *
*                                                                     *
* THE ERROR RECORDING OUTPUT DATA AREA IS SDWA FIELD SDWAVRA.         *
* ERROR RECORDING IS DONE IN THE FOLLOWING FORMAT:                    *
*                                                                     *
*        (1) IF QUEUE VERIFIER IS CALLED, THE RECORD BEGINS WITH AN 8 *
*            BYTE ID ENTRY, FOLLOWED BY ERROR RECORDING PERFORMED BY  *
*            QUEUE VERIFIER.                                          *
*        (2) FOLLOWING RECORDING BY QUEUE VERIFIER, AN 8 BYTE ID      *
*            ENTRY FOR IGC044R2, IF THAT ID WILL FIT INTO SPACE LEFT. *
*        (3) FOLLOWING THE ID, A 4 BYTE DESCRIPTOR:                   *
*              BYTE1 - FLAGS:                                         *
*                      BIT0 - 1, ERRORS WERE DETECTED BUT NOT RECORDED*
*                             0, ANY ERRORS DETECTED WERE RECORDED    *
*                      BITS1-7 - RESERVED                             *
*              BYTE2 - A COUNT OF THE NUMBER OF ERRORS RECORDED       *
*              BYTE3 - A COUNT OF THE NUMBER OF ERRORS DETECTED       *
*              BYTE4 - THE RETURN CODE FROM IGC044R2                  *
*        (4) FOLLOWING THE DESCRIPTOR, A 16 BYTE ENTRY FOR EACH ERROR *
*            DETECTED (AND CORRECTED), PROVIDED THERE WAS SPACE FOR   *
*            THE ENTRY. THE FORMAT OF THE 16 BYTE ENTRIES IS DESCRIBED*
*            IN THE GENERAL COMMENTS FOR SUBROUTINE RECERROR.         *
*                                                                     *
* SUBROUTINES CALLED: TCBCHECK                                        *
*                                                                     *
* SYSTEM ROUTINES CALLED / MACROS ISSUED:                             *
*                                                                     *
*        IEAVEQV0 (QUEUE VERIFIER) AT ENTRY POINT IEAVEQV3            *
*        ASCB/ASXB CONTROL BLOCK VERIFIER - IEAVECAS                  *
*        SDUMP                                                        *
*                                                                     *
* RETURN CODES SET:                                                   *
*                                                                     *
*        0 - THE TCB QUEUES OF THE CURRENT ADDRESS SPACE ARE USABLE   *
*        4 - THE TCB QUEUES OF THE CURRENT ADDRESS SPACE ARE UNUSABLE *
*            BECAUSE THE ASCB OR ASXB IS INVALID.                     *
*        8 - THE TCB DISPATCHING QUEUE WAS EMPTY AFTER PROCESSING BY  *
*            QUEUE VERIFIER.                                          *
*                                                                     *
* REGISTER USAGE:                                                     *
*                                                                     *
*        0 - ADDRESS OF 200 BYTE WORKAREA (UNCHANGED)                 *
*        1 - ADDRESS OF THE SDWA (UNCHANGED)                          *
*        2 - INPUT, 0 FOR NO SVC DUMP; ADDRESS OF DUMP TITLE FOR SVC  *
*            DUMP. CONTAINS ADDRESS OF CURRENT ASXB DURING PROCESSING.*
*        3 - WORKAREA ADDRESS DURING PROCESSING.                      *
*        6 - BASE REGISTER                                            *
*        9 - UNCHANGED                                                *
*        14 - RETURN ADDRESS (UNCHANGED)                              *
*        15 - INPUT, ENTRY POINT ADDRESS                              *
*             OUTPUT, RETURN CODE                                     *
*        ALL OTHER REGISTERS VOLATILE                                 *
*                                                                     *
* WORKAREA:                                                           *
*        THE 200 BYTE WORKAREA ADDRESSED BY REGISTER 0 ON ENTRY IS    *
*        MAPPED AS FOLLOWS: FIRST PORTION MAPPED BY DSECT WKAREA,     *
*        ADDRESSED BY REG 3, THEN THE PARM LIST AREA, MAPPED BY       *
*        DSECT QVPL (AREA ALSO USED FOR SDUMP LIST FORM), ADDRESSED   *
*        BY REG 1, THEN A 72 BYTE REGISTER SAVE AREA ADDRESSED BY     *
*        REG 13, THEN A WORKAREA FOR IEAVEQV3 (LENGTH DEFINED BY      *
*        QVPLWASZ).                                                   *
*                                                                     *
***********************************************************************
         SPACE 3
*/* E ENTER IGC044R2                                                 */
         SPACE
IGC044R2 EQU   *                       ENTRY POINT
         USING IGC044R2,R15                                     @Y02753
         L     R6BASE,CHAP044E         SVC ENTRY POINT ADDRESS  @Y02753
         DROP  R15                                              @Y02753
         LR    R3,R0                   200 BYTE WORKAREA ADDR   @Y02753
         USING WKAREA,R3                                        @Y02753
         ST    R14,WKRETAD             SAVE RETURN ADDRESS      @Y02753
         LA    R13,WKLENGTH+QVPLSIZE(,R3) SAVE AREA ADDRESS     @Y02753
         SPACE
*/* L IEAVECAS: VERIFY CURRENT ASCB/ASXB                             */
         SPACE
         STM   R2,R7,0(R13)            SAVE REGISTERS          @YM02632
         L     R0,PSAAOLD-PSA(,R0)     ADDRESS OF CURRENT ASCB  @Y02753
         L     R15,CHAPAVER            ENTRY POINT ADDRESS      @Y02753
         BALR  R14,R15                 CONTROL BLOCK VERIFIER   @Y02753
* NOTE: REGISTERS 2-7, 15 MAY BE CHANGED
         LM    R2,R7,0(R13)            RESTORE REGISTERS       @YM02632
         SPACE
*/* D (YES,CHAP8090,NO,) VALID                                       */
         SPACE
         LTR   R15,R15                 CAN ASXB BE REFERENCED   @Y02753
         BZ    CHAP8090                YES, CONTINUE            @Y02753
         SPACE
*/* P (,CHAP8010) SET RETURN CODE 4                                  */
         SPACE
         BAL   R14,HDSETUP             MOVE HEADER, DESCRIPTOR  @Y02753
         LA    R15,RCODE4              QUEUES ARE UNUSABLE      @Y02753
         B     CHAP8010                GO SET RETURN CODE       @Y02753
         SPACE
*/* CHAP8090: D (NO,CHAP8080,YES,) WAS SVC DUMP REQUESTED            */
         SPACE
CHAP8090 EQU   *                       *
         LTR   R2,R2                   WAS DUMP TITLE PROVIDED  @Y02753
         BZ    CHAP8080                NO, BYPASS SVC DUMP      @Y02753
         SPACE
*/* L SVC DUMP: REQUEST DUMP OF SQA, LSQA, TRACE                     */
         SPACE
         LR    R7,R1                   SAVE ADDRESS OF SDWA     @Y02753
         LA    R1,WKLENGTH(,R3)        ADDRESS OF LIST AREA     @Y02753
         MVC   0(SDUMPLNG,R1),CHAPSDMP MOVE LIST FORM           @Y02753
* NOTE: REGISTER 15 CONTAINS ZERO, INDICATING CURRENT ADDRESS SPACE
         SDUMP HDRAD=(R2),ASID=(R15),BRANCH=YES,MF=(E,(1))      @Y02753
         LR    R1,R7                   ADDRESS OF SDWA          @Y02753
         SPACE
*/* CHAP8080: L IEAVEQV3: VERIFY AND CORRECT TCB DISPATCHING QUEUE   */
         SPACE
CHAP8080 EQU   *                       *
         LA    R4,CHAPQVID             RECORDING HEADER FOR QV3 @Y02753
         LA    R5,L'CHAPQVID           LENGTH OF HEADER         @Y02753
         BAL   R14,RECMOVE             HEADER INTO OUTPUT AREA  @Y02753
         SPACE
* BUILD PARAMETER LIST FOR IEAVEQV3
         SPACE
         L     R2,PSAAOLD-PSA(,R0)     ADDRESS OF CURRENT ASCB  @Y02753
         LR    R0,R1                   ADDRESS OF SDWA          @Y02753
         LA    R10,SDWARA-SDWA(,R1)    ADDR OF RECORDING AREA  @YM02632
         LA    R1,WKLENGTH(,R3)        ADDRESS OF QVPL          @Y02753
         XC    0(QVPLSIZE,R1),0(R1)    CLEAR LIST AREA          @Y02753
         L     R2ASXB,ASCBASXB-ASCB(,R2)  ADDR OF CURRENT ASXB  @Y02753
         LA    R8,QVPLSIZE+SAVELNG(,R1) WORKAREA ADDRESS        @Y02753
         L     R15,CHAPTVER            ADDR OF TCB VERIFIER RTN @Y02753
         ST    R15,QVPLEVR-QVPL(,R1)   INTO PARM LIST           @Y02753
         ST    R10,QVPLODA-QVPL(,R1)   ADDR OF OUTPUT DATA AREA @Y02753
         ST    R8,QVPLWKA-QVPL(,R1)    ADDR IEAVEQV3 WORKAREA   @Y02753
         LA    R10,ASXBFTCB-ASXB(,R2ASXB) ADDR TCB QUEUE HEADER @Y02753
         ST    R10,QVPLHDR-QVPL(,R1)   INTO PARM LIST           @Y02753
         LA    R10,ASXBLTCB-ASXB(,R2ASXB) ADDR QUEUE TRAILER    @Y02753
         ST    R10,QVPLTRLR-QVPL(,R1)  INTO PARM LIST           @Y02753
         LA    R10,TCBTCB-TCB(,R0)     FORWARD PTR OFFSET       @Y02753
         STH   R10,QVPLFPTR-QVPL(,R1)  INTO PARM LIST           @Y02753
         LA    R10,TCBBACK-TCB(,R0)    BACK CHAIN PTR OFFSET    @Y02753
         STH   R10,QVPLBPTR-QVPL(,R1)  INTO PARM LIST           @Y02753
* FIELDS QVPLLELM, QVPLNOEL, QVPLFELM ARE INPUT, CONTAIN 0
* BECAUSE LIST AREA WAS CLEARED.
         SPACE
* INVOKE IEAVEQV3
         SPACE
* REGISTER 13 CONTAINS ADDRESS OF A 72 BYTE SAVE AREA
         L     R15,CHAPQV3             ADDRESS OF IEAVEQV3      @Y02753
         BALR  R14,R15                 INVOKE QUEUE VERIFIER    @Y02753
         SPACE
*/* S HDSETUP: SET UP OUTPUT RECORDING AREA FOR IGC044R2             */
         SPACE
         LR    R1,R0                   RESTORE SDWA ADDRESS     @Y02753
         BAL   R14,HDSETUP             MOVE HEADER, DESCRIPTOR  @Y02753
         SPACE
*/* CHAP8130: D (NO,CHAP8020,YES,) IS TCB DISPATCHING QUEUE EMPTY    */
         SPACE
CHAP8130 EQU   *                       *
         ICM   R10,B'1111',ASXBFTCB-ASXB(R2ASXB) ADDR FIRST TCB @Y02753
         BNZ   CHAP8020                NONZERO, CONTINUE        @Y02753
         SPACE
*/* P SET RETURN CODE 8, ASCBFAIL=1                                  */
         SPACE
         L     R7,PSAAOLD-PSA(,R0)     ADDRESS OF CURRENT ASCB  @Y02753
         OI    ASCBDSP1-ASCB(R7),ASCBFAIL ADDRESS SPACE FAILURE @Y02753
         LA    R15,RCODE8              QUEUES ARE UNUSABLE      @Y02753
         SPACE
*/* CHAP8010: D (NO,CHAP8000,YES,) IS THERE A DESCRIPTOR WORD        */
         SPACE
CHAP8010 EQU   *                       *
         ICM   R10,B'1111',WKOUTDP     ADDRESS OF DESCRIPTOR    @Y02753
         BZ    CHAP8000                NO DESCRIPTOR, GO EXIT   @Y02753
         SPACE
*/* P (,CHAP8000) SAVE RETURN CODE IN DESCRIPTOR                     */
         SPACE
         ST    R15,0(,R10)             RETURN CODE              @Y02753
         B     CHAP8000                GO EXIT THIS ROUTINE     @Y02753
         SPACE
*/* CHAP8020: P SET SEARCH TCB = TOP OF QUEUE, ITS TCBNTC=0, OTC=0   */
         SPACE
CHAP8020 EQU   *                       *
         L     R10,ASXBETSK-ASXB(,R2ASXB) ADDRESS OF OLDEST TCB @Y02753
         SR    R11,R11                 CLEAR OTC                @Y02753
         ST    R11,TCBNTC-TCB(,R10)    OLDEST TCB HAS NO SISTER @Y02753
         EJECT
***********************************************************************
*                                                                     *
*                       INNER LOOP, ON TCBLTC                         *
*                                                                     *
***********************************************************************
         SPACE
*/* CHAP8030: P SET SEARCH TCB'S TCBOTC=OTC                          */
         SPACE
CHAP8030 EQU   *                       *
         ST    R11,TCBOTC-TCB(,R10)    UNCOND UPDATE TCBOTC     @Y02753
         SPACE
*/* CHAP8140: D (YES,CHAP8040,NO,) IS TCBLTC OF SEARCH TCB = 0       */
         SPACE
CHAP8140 EQU   *                       *
         ICM   R7,B'1111',TCBLTC-TCB(R10) PTR MOST RECENT SUB   @Y02753
         BZ    CHAP8040                NO SUBTASK-CHECK SISTERS @Y02753
         SPACE
*/* P SET OTC = SEARCH TCB                                           */
         SPACE
         LR    R11,R10                 UPDATE OTC FOR TCBCHECK  @Y02753
         SPACE
*/* S TCBCHECK: VERIFY SEARCH TCB'S TCBLTC                           */
         SPACE
         BAL   R14,TCBCHECK            INVOKE CHECK OUT ROUTINE @Y02753
         SPACE
*/* D (NO,CHAP8060,YES,) ANY REPLACEMENT                             */
         SPACE
         LTR   R15,R15                 UPDATE SEARCH TCBLTC     @Y02753
         BZ    CHAP8060                NO, CONTINUE             @Y02753
         SPACE
*/* S RECERROR: SET ERROR ENTRY INTO OUTPUT AREA                     */
         SPACE
         L     R4,CHAPNTC              ERROR IDENTIFIER         @Y02753
         CLI   WKCHKRCD+C1,RCODE8      WAS A TCBNTC UPDATED     @Y02753
         BE    CHAP8150                YES, LEAVE IDENT AS IS   @Y02753
         L     R4,CHAPLTC              ERROR IDENTIFIER         @Y02753
CHAP8150 EQU   *                       *
         BAL   R14,RECERROR            GO SET UP AND MOVE ENTRY @Y02753
         SPACE
*/* D (NO,CHAP8140,YES,) WAS TCBCHECK RETURN CODE = 4                */
         SPACE
         CLI   WKCHKRCD+C1,RCODE4      WAS A TCBNTC UPDATED     @Y02753
         BNE   CHAP8140                GO RECHECK SEARCH TCBLTC @Y02753
         SPACE
*/* P UPDATE SEARCH TCB'S TCBLTC WITH REPLACEMENT                    */
         SPACE
         ST    R8,TCBLTC-TCB(,R10)     FIX INVALID POINTER      @Y02753
         SPACE
*/* D (YES,CHAP8040,NO,) IS NEW TCBLTC ZERO                          */
         SPACE
         LTR   R7,R8                   RESET SUBTASK PTR        @Y02753
         BZ    CHAP8040                NO SUBTASK-CHECK SISTERS @Y02753
         SPACE
*/* CHAP8060: P (,CHAP8030) SET SEARCH TCB=TCBLTC                    */
         SPACE
CHAP8060 EQU   *                       *
         LR    R10,R7                  NEW SEARCH TCB           @Y02753
         B     CHAP8030                CHECK SEARCH TCB SUBTSKS @Y02753
         EJECT
***********************************************************************
*                                                                     *
*             OUTER LOOP 1, ON TCBNTC OF LAST CHECKED TCB             *
*                                                                     *
***********************************************************************
         SPACE 2
*/* CHAP8040: D (YES,CHAP8050,NO,) IS SEARCH TCBNTC ZERO             */
         SPACE
CHAP8040 EQU   *                       *
         ICM   R7,B'1111',TCBNTC-TCB(R10) NEXT SISTER PTR ZERO  @Y02753
         BZ    CHAP8050                NO NEXT SISTER, CHECK    @Y02753
*                                      SEARCH TCB'S MOTHER'S SISTER
         SPACE
*/* S TCBCHECK: VERIFY SISTER TCB                                    */
         SPACE
         BAL   R14,TCBCHECK            INVOKE CHECKOUT ROUTINE  @Y02753
         SPACE
*/* D (NO,CHAP8070,YES,) ANY REPLACEMENT                             */
         SPACE
         LTR   R15,R15                 UPDATE SEARCH TCBNTC     @Y02753
         BZ    CHAP8070                NO, CONTINUE             @Y02753
         SPACE
*/* S RECERROR: INDICATE ERROR IN OUTPUT DATA AREA                   */
         SPACE
         L     R4,CHAPNTC              ERROR IDENTIFIER         @Y02753
         BAL   R14,RECERROR            GO SET UP AND MOVE ENTRY @Y02753
         SPACE
*/* D (NO,CHAP8040,YES,) WAS TCBCHECK RETURN CODE = 4                */
         SPACE
         CLI   WKCHKRCD+C1,RCODE4      WAS SOME TCBNTC UPDATED  @Y02753
         BNE   CHAP8040                GO RECHECK SEARCH TCBNTC @Y02753
         SPACE
*/* P UPDATE SEARCH TCB'S TCBNTC WITH REPLACEMENT                    */
         SPACE
         ST    R8,TCBNTC-TCB(,R10)     FIX INVALID POINTER      @Y02753
         SPACE
*/* D (YES,CHAP8050,NO,) IS NEW TCBNTC ZERO                          */
         SPACE
         LTR   R7,R8                   RESET SISTER PTR         @Y02753
         BZ    CHAP8050                NO SISTER, CHECK LAST    @Y02753
*                                      CHECKED TCB'S MOTHER'S SISTERS
         SPACE
*/* CHAP8070: P (,CHAP8030) SET SEARCH TCB = TCBNTC OF SEARCH TCB    */
         SPACE
CHAP8070 EQU   *                       *
         LR    R10,R7                  NEW SEARCH TCB           @Y02753
         B     CHAP8030                CONTINUE SCAN            @Y02753
         EJECT
***********************************************************************
*                                                                     *
*        OUTER LOOP 2, ON TCBNTC OF MOTHER OF LAST CHECKED TCB        *
*                                                                     *
***********************************************************************
         SPACE 2
*/* CHAP8050: D (YES,CHAP8110,NO,) IS OTC=ASXBETSK                   */
         SPACE
CHAP8050 EQU   *                       *
         C     R11,ASXBETSK-ASXB(,R2ASXB) ARE THERE ANY TCBS   @YM02632
*                                      ON FAMILY QUEUE NOT YET CHECKED
         BE    CHAP8110                NO, SCAN COMPLETE        @Y02753
         SPACE
*/* P SET SEARCH TCB = TCBOTC OF SEARCH TCB                          */
         SPACE
         LR    R10,R11                 TO CONTINUE SCAN FROM    @Y02753
*                                      PREVIOUSLY CHECKED TCB
         SPACE
*/* P (,CHAP8040) SET OTC = TCBOTC OF OTC TCB                        */
         SPACE
         L     R11,TCBOTC-TCB(,R11)    SET TO PREV UPDATED PTR  @Y02753
         B     CHAP8040                CONTINUE SCAN WITH PREV  @Y02753
*                                      CHECKED TCB'S SISTER PTR
         EJECT
***********************************************************************
*                                                                     *
*                        TREE SCAN COMPLETE                           *
*                                                                     *
***********************************************************************
         SPACE 2
*/* CHAP8110: P UPDATE ASXBTCBS, ASCBTCBS                            */
         SPACE
CHAP8110 EQU   *                       *
         L     R12,PSAAOLD-PSA(,R0)    ADDRESS OF CURRENT ASCB  @Y02753
         SR    R4,R4                   CLEAR FOR COMPARE        @Y02753
         L     R13,ASCBTCBS-ASCB(,R12) PRESENT READY COUNT      @Y02753
CHAP8190 EQU   *                       TOP OF COMPARE-AND-SWAP LOOP
         L     R11,ASXBFTCB-ASXB(,R2ASXB) TOP OF DISPATCH QUEUE @Y02753
         SR    R10,R10                 INITIALIZE TOTAL COUNT   @Y02753
         SR    R7,R7                   INITIAL READY TCB COUNT  @Y02753
CHAP8160 EQU   *                       TOP OF COUNTING LOOP
         LA    R10,C1(,R10)            INCREMENT TOTAL COUNT    @Y02753
         CH    R4,TCBFLGS4-TCB(,R11)   IS THE TASK DISPATCHABLE @Y02753
         BNZ   CHAP8180                NO, DON'T UP READY COUNT @Y02753
         L     R8,TCBRBP-TCB(,R11)     ADDRESS OF TOP RB        @Y02753
         CLI   RBWCF-RBSECT(R8),C0     IS WAIT COUNT ZERO       @Y02753
         BNZ   CHAP8180                NO, DON'T UP READY COUNT @Y02753
         LA    R7,C1(,R7)              INCREMENT READY COUNT    @Y02753
CHAP8180 EQU   *                       *
         ICM   R11,B'1111',TCBTCB-TCB(R11) ADDRESS OF NEXT TCB  @Y02753
         BNZ   CHAP8160                IF IT EXISTS, COUNT IT   @Y02753
         CS    R13,R7,ASCBTCBS-ASCB(R12) UPDATE READY COUNT IF  @Y02753
*                                      UNCHANGED
         BNE   CHAP8190                OR RECOMPUTE COUNT       @Y02753
         STH   R10,ASXBTCBS-ASXB(,R2ASXB) SAVE TOTAL COUNT      @Y02753
         SPACE
*/* P SET RETURN CODE = 0                                            */
         SPACE
         SR    R15,R15                 NO PERMANENT ERRORS      @Y02753
         SPACE
*/* CHAP8000: R () RETURN TO CALLER                                  */
         SPACE
CHAP8000 EQU   *                       *
         L     R14,WKRETAD             RETURN ADDRESS           @Y02753
         LR    R0,R3                   RESTORE                  @Y02753
         BR    R14                     RETURN                   @Y02753
         SPACE 2
*/* IGC044R2: END FLOWCHART                                          */
         EJECT
*/* TCBCHECK: CHART                                                  */
*/* FOOTING
*/* SUBROUTINE VALIDITY CHECKS INPUT TCB, FINDS ALTERNATE            */
         SPACE 2
***********************************************************************
*                                                                     *
* SUBROUTINE TCBCHECK IS CALLED BY ROUTINE IGC044R2 TO VALIDITY CHECK *
* A TCB. IN CASE IT IS NOT VALID, A SEARCH IS MADE TO FIND THE MOST   *
* RECENT SUBTASK OF THE TCB ADDRESSED BY REGISTER 11, BEGINNING WITH  *
* A TCB HAVING TCBNTC=0. IF THERE IS NO SUBTASK WITH TCBNTC=0, A      *
* SEARCH IS MADE FOR THE END OF THE SUBTASK QUEUE, AND THEN THE       *
* SEARCH FOR THE MOST RECENT SUBTASK IS MADE. THE ADDRESS OF THE TCB  *
* FOUND IS RETURNED TO IGC044R2 FOR USE IN CORRECTING THE INVALID     *
* POINTER.                                                            *
*                                                                     *
* SYSTEM ROUTINES CALLED / MACROS ISSUED: TCB CONTROL BLOCK VERIFIER  *
*                                            - IEAVETCB               *
*                                                                     *
* SUBROUTINES CALLED: CHAIN, UNCHAIN                                  *
*                                                                     *
* RETURN CODES SET: 0, 4                                              *
*                                                                     *
* REGISTER USAGE:                                                     *
*        R1    - ADDRESS OF THE SDWA                                  *
*        R2ASXB - ADDRESS OF THE CURRENT ASXB                         *
*        R3    - WORKAREA ADDRESS                                     *
*        R7    - INPUT TCB ADDRESS                                    *
*        R8    - OUTPUT TCB ADDRESS                                   *
*        R11   - MOTHER TCB ADDRESS FOR SEARCHING FAMILY QUEUE        *
*        R13   - SAVE AREA ADDRESS                                    *
*        R14   - RETURN ADDRESS                                       *
*        R15   - OUTPUT, RETURN CODE                                  *
*                                                                     *
***********************************************************************
         SPACE 3
*/* E ENTER TCBCHECK                                                 */
         SPACE
TCBCHECK EQU   *                       ENTRY POINT
         STM   R14,R12,SVREG14-SAVEAREA(R13) SAVE REGISTERS     @Y02753
         SPACE
*/* P INITIALIZE OUTPUT TCB ADDR TO 0, CLEAR FAMILY PTR, RETURN CODE */
         SPACE
         SR    R8,R8                   CLEAR                    @Y02753
         STH   R8,WKCHKRCD             CLEAR RETURN CODE        @Y02753
         ST    R8,WKFAMPTR             CLEAR FAMILY POINTER     @Y02753
         EJECT
*/* L IEAVETCB: VALIDITY CHECK INPUT TCB ADDRESS                     */
         SPACE
         LR    R0,R7                   ADDR OF TCB TO CHECKED   @Y02753
         L     R15,CHAPTVER            ENTRY POINT ADDRESS      @Y02753
         BALR  R14,R15                 TCB CONTROL BLK CHECKER  @Y02753
* NOTE: REGISTERS 2-7,15 MAY BE CHANGED
         SPACE
*/* D (YES,CHAP8500,NO,) IS INPUT TCB VALID                          */
         SPACE
         LR    R7,R0                   RESTORE                  @Y02753
         LM    R2,R3,SVREG2-SAVEAREA(R13) RESTORE               @Y02753
         L     R6BASE,SVREG6-SAVEAREA(,R13) RESTORE             @Y02753
         LTR   R15,R15                 VALID                    @Y02753
         BZ    CHAP8500                YES, CONTINUE            @Y02753
         SPACE
*/* P SET RETURN CODE 4                                              */
         SPACE
         MVI   WKCHKRCD+C1,RCODE4      RET CODE, TCB NOT VALID  @Y02753
         EJECT
***********************************************************************
*                                                                     *
* LOOP RUNS THE DISPATCHING QUEUE SEARCHING FOR TCBS WITH TCBOTC      *
* MATCHING THE INPUT MOTHER TCB ADDRESS (REGISTER 11), IN ORDER TO    *
* BACK UP THE FAMILY QUEUE (TCBNTC POINTERS), AND THUS LOCATE THE     *
* BEST REPLACEMENT FOR THE INVALID TCB ADDRESS.                       *
*                                                                     *
***********************************************************************
         SPACE 2
*/* CHAP8510: P SET SEARCH TCB TO TOP OF DISPATCHING QUEUE           */
         SPACE
CHAP8510 EQU   *                       TOP OF FAMILY SEARCH LOOP
         L     R7,ASXBFTCB-ASXB(,R2ASXB) ADDRESS OF RCT TCB     @Y02753
         SPACE
*/* CHAP8520: D (NO,CHAP8530,YES,) IS TCBOTC = INPUT OTC             */
         SPACE
CHAP8520 EQU   *                       *
         C     R11,TCBOTC-TCB(,R7)     SEARCH TCB IN THE FAMILY @Y02753
         BNE   CHAP8530                NO, CONTINUE SCAN        @Y02753
         SPACE
*/* P SET FAMILY TCB POINTER TO ADDR OF SEARCH TCB                   */
         SPACE
         ST    R7,WKFAMPTR             SAVE ADDRESS             @Y02753
         SPACE
*/* D (NO,CHAP8530,YES,) IS TCBNTC OF SEARCH TCB = OUTPUT TCB        */
         SPACE
         C     R8,TCBNTC-TCB(,R7)      IS SEARCH TCB NEXT       @Y02753
         BNE   CHAP8530                NO, CONTINUE SEARCH      @Y02753
         SPACE
*/* P (,CHAP8510) SET OUTPUT TCB = SEARCH TCB ADDR                   */
         SPACE
         LR    R8,R7                   SAVE MOST RECENT SUBTASK @Y02753
         B     CHAP8510                SEARCH FOR ANOTHER       @Y02753
         SPACE
*/* CHAP8530: P SET SEARCH TCB TO NEXT ON THE DISPATCHING QUEUE      */
         SPACE
CHAP8530 EQU   *                       *
         ICM   R7,B'1111',TCBTCB-TCB(R7) NEXT TCB               @Y02753
         SPACE
*/* D (NO,CHAP8520,YES,) IS SEARCH TCB PTR 0                         */
         SPACE
         BNZ   CHAP8520                NOT ZERO, CHECK THIS TCB @Y02753
         SPACE
*/* D (NO,CHAP8540,YES,) IS OUTPUT TCB ADDRESS = 0                   */
         SPACE
         LTR   R8,R8                   SEARCH SUCCESSFUL        @Y02753
         BNZ   CHAP8540                YES, PREPARE TO RETURN   @Y02753
         SPACE
*/* D (YES,CHAP8590,NO,) IS FAMILY POINTER = 0                       */
         SPACE
         ICM   R7,B'1111',WKFAMPTR     WERE THERE NO SUBTASKS   @Y02753
         BZ    CHAP8590                YES, RETURN              @Y02753
         SPACE
*/* N SEARCH TCB IS NOW INITIALIZED TO FAMILY POINTER                */
         EJECT
***********************************************************************
*                                                                     *
* END OF FAMILY QUEUE POINTER LOST. RUN FAMILY QUEUE TO LOCATE END.   *
*                                                                     *
***********************************************************************
         SPACE
*/* CHAP8550: P OUTPUT = SEARCH, SEARCH = TCBNTC OF SEARCH TCB       */
         SPACE
CHAP8550 EQU   *                       *
         LR    R4,R7                   SAVE                     @Y02753
         L     R7,TCBNTC-TCB(,R7)      NEXT OLDER SUBTASK       @Y02753
         SPACE
*/* D (YES,CHAP8560,NO,) IS SEARCH TCB ADDR = FAMILY PTR             */
         SPACE
         C     R7,WKFAMPTR             IS FAMILY QUEUE CIRCULAR @Y02753
         BE    CHAP8560                YES, CLEAR CIRCULAR PTR  @Y02753
         SPACE
*/* L IEAVETCB: VALIDITY CHECK SEARCH TCB ADDR                       */
         SPACE
         LR    R0,R7                   ADDR TCB TO BE CHECKED   @Y02753
         L     R15,CHAPTVER            ENTRY POINT ADDRESS      @Y02753
         BALR  R14,R15                 TCB CONTROL BLOCK VERIFR @Y02753
         SPACE
*/* D (YES,CHAP8550,NO,) IS SEARCH TCB ADDR VALID                    */
         SPACE
         LR    R7,R0                   RESTORE                  @Y02753
         LM    R2,R3,SVREG2-SAVEAREA(R13) RESTORE               @Y02753
         L     R6BASE,SVREG6-SAVEAREA(,R13) RESTORE             @Y02753
         LTR   R15,R15                 VALIDITY CHECK RET CODE  @Y02753
         BZ    CHAP8550                CHECK NEXT OLDER SISTER  @Y02753
         SPACE
*/* CHAP8560: P OUTPUT = LAST VALID SISTER, CLEAR TCBNTC             */
         SPACE
CHAP8560 EQU   *                       *
         SR    R8,R8                   CLEAR                    @Y02753
         ST    R8,TCBNTC-TCB(,R4)      SEARCH TCB NOW CHAIN END @Y02753
         SPACE
*/* P (,CHAP8590) SET RETURN CODE 8                                  */
         SPACE
         MVI   WKCHKRCD+C1,RCODE8      INDICATE A TCBNTC FIELD  @Y02753
*                                      HAS BEEN UPDATED         @Y02753
         B     CHAP8590                GO EXIT THIS ROUTINE     @Y02753
         EJECT
***********************************************************************
*                                                                     *
* INPUT TCB IS VALID. INSURE THAT IT IS ON THE DISPATCHING QUEUE IF   *
* TCBFC=1, AND NOT ON THE QUEUE IF TCBFC=0.                           *
*                                                                     *
***********************************************************************
         SPACE 3
*/* CHAP8500: P START SEARCH AT TOP OF DISPATCHING QUEUE             */
         SPACE
CHAP8500 EQU   *                       *
         L     R8,ASXBFTCB-ASXB(,R2ASXB) ADDR TOP TCB ON QUEUE  @Y02753
         SPACE
*/* CHAP8570: D (YES,CHAP8540,NO,) IS SEARCH TCB = INPUT TCB         */
         SPACE
CHAP8570 EQU   *                       TOP OF DISP QUEUE SEARCH LOOP
         C     R8,SVREG7-SAVEAREA(,R13) IS THIS THE INPUT TCB   @Y02753
         BE    CHAP8540                ON QUEUE, GO CHECK TCBFC @Y02753
         SPACE
*/* P SET SEARCH TCB = NEXT TCB ON DISPATCHING QUEUE                 */
         SPACE
         ICM   R8,B'1111',TCBTCB-TCB(R8) NEXT TCB               @Y02753
         SPACE
*/* D (NO,CHAP8570,YES,) IS SEARCH TCB PTR = 0                       */
         SPACE
         BNZ   CHAP8570                GO CHECK THIS TCB        @Y02753
         SPACE 2
* FALL THROUGH LOOP MEANS INPUT TCB NOT ON DISPATCHING QUEUE
         SPACE 2
*/* D (YES,CHAP8590,NO,) IS INPUT TCB'S TCBFC =1                     */
         SPACE
         L     R8,SVREG7-SAVEAREA(,R13) RESTORE INPUT           @Y02753
         TM    TCBFLGS5-TCB(R8),TCBFC  HAS END OF TASK OCCURRED @Y02753
         BO    CHAP8590                YES, RETURN TO CALLER    @Y02753
         SPACE
*/* S (,CHAP8590) CHAIN: PUT INPUT TCB ON DISPATCHING QUEUE          */
         SPACE
         BAL   R14,CHAIN               PUT INPUT TCB ON QUEUE   @Y02753
         B     CHAP8590                GO EXIT THIS ROUTINE     @Y02753
         EJECT
*/* CHAP8540: D (NO,CHAP8590,YES,) IS TCBFC=1                        */
         SPACE
CHAP8540 EQU   *                       *
         TM    TCBFLGS5-TCB(R8),TCBFC  HAS END OF TASK OCCURRED @Y02753
         BZ    CHAP8590                LEAVE TCB ON DISP QUEUE  @Y02753
         SPACE
*/* S UNCHAIN: REMOVE COMPLETE TCB FROM DISPATCH QUEUE               */
         SPACE
         LR    R7,R13                  SAVE                     @Y02753
         BAL   R14,UNCHAIN             TAKE TCB OFF QUEUE       @Y02753
         LR    R13,R7                  RESTORE                  @Y02753
         SPACE
*/* CHAP8590: R RETURN TO CALLER                                     */
         SPACE
CHAP8590 EQU   *                       *
         LM    R14,R7,SVREG14-SAVEAREA(R13) RESTORE REGS        @Y02753
         LM    R9,R12,SVREG9-SAVEAREA(R13) RESTORE REGS         @Y02753
         LH    R15,WKCHKRCD            RETURN CODE              @Y02753
         BR    R14                     RETURN                   @Y02753
         SPACE 2
*/* TCBCHECK: END FLOWCHART                                          */
         EJECT
*/* RECERROR: CHART                                                  */
*/* FOOTING
*/* ERROR RECORDING SUBROUTINE                                       */
         SPACE 2
***********************************************************************
*                                                                     *
* SUBROUTINE RECERROR SETS UP AN ENTRY FOR RECORDING EITHER AN        *
* INVALID TCBLTC FIELD OR INVALID TCBNTC FIELD. EACH ENTRY CONSISTS   *
* OF AN IDENTIFIER WORD CONTAINING C'NTC ' OR C'LTC ', THE ADDRESS    *
* OF THE TCB CONTAINING THE INVALID FIELD, THE INVALID FIELD CONTENTS *
* AND THE REPLACEMENT ADDRESS. EACH OF THESE ADDRESSES IS A FULLWORD, *
* SO THAT EACH ENTRY IS 4 WORDS.                                      *
*                                                                     *
* SUBROUTINES CALLED: RECMOVE                                         *
*                                                                     *
* SYSTEM ROUTINES CALLED / MACROS ISSUED: NONE                        *
*                                                                     *
* RETURN CODES SET: NONE                                              *
*                                                                     *
* REGISTER USAGE:                                                     *
*        4 - INPUT, ADDRESS OF IDENTIFIER WORD, DESTROYED             *
*        5 - DESTROYED                                                *
*        7 - INVALID FIELD CONTENTS                                   *
*        8 - REPLACEMENT FIELD CONTENTS                               *
*        10 - ADDRESS OF TCB HAVING INVALID FIELD                     *
*        14 - RETURN ADDRESS                                          *
*        15 - DESTROYED                                               *
*                                                                     *
***********************************************************************
         SPACE 2
*/* E ENTER RECERROR                                                 */
         SPACE
RECERROR EQU   *                       *
         ST    R4,WKWORD1              SET IDENTIFIER IN ENTRY  @Y02753
         SPACE
*/* D (NO,CHAP8700,YES,) IS THERE A DESCRIPTOR WORD                  */
         SPACE
         ICM   R4,B'1111',WKOUTDP      PTR TO DESCRIPTOR WORD   @Y02753
         BZ    CHAP8700                NO DESCRIPTOR, EXIT      @Y02753
         SPACE
*/* P INCREMENT COUNT OF ERRORS DETECTED                             */
         SPACE
         SR    R5,R5                   CLEAR                    @Y02753
         IC    R5,C2(,R4)              COUNT OF ERRORS DETECTED @Y02753
         LA    R5,C1(,R5)              INCREMENT BY ONE         @Y02753
         STC   R5,C2(,R4)              INTO DESCRIPTOR          @Y02753
         STM   R4,R5,WKTEMP1           SAVE COUNT AND ADDRESS   @Y02753
         SPACE
*/* D (YES,CHAP8700,NO,) HAS OVERFLOW OCCURRED                       */
         SPACE
         TM    WKFLAGS,WKOVERF         IS OUTPUT AREA FULL      @Y02753
         BO    CHAP8700                YES, GO EXIT SUBROUTINE  @Y02753
         SPACE
*/* S RECMOVE: MOVE ENTRY TO OUTPUT DATA AREA                        */
         SPACE
         LR    R15,R14                 SAVE RETURN ADDRESS      @Y02753
         ST    R10,WKWORD2             ADDRESS OF ERROR TCB     @Y02753
         STM   R7,R8,WKWORD3           OLD, NEW FIELD CONTENTS  @Y02753
         LA    R4,WKWORD1              ADDRESS OF ENTRY         @Y02753
         LA    R5,C16                  LENGTH OF ENTRY          @Y02753
         BAL   R14,RECMOVE             MOVE ENTRY TO DATA AREA  @Y02753
         LR    R14,R15                 RESTORE                  @Y02753
         LM    R4,R5,WKTEMP1           RESTORE                  @Y02753
         SPACE
*/* D (NO,CHAP8720,YES,) WAS MOVE SUCCESSFUL                         */
         SPACE
         TM    WKFLAGS,WKOVERF         DID OVERFLOW OCCUR       @Y02753
         BO    CHAP8720                SET INDICATOR IN OUTPUT  @Y02753
         SPACE
*/* P (,CHAP8700) INCREMENT COUNT OF ERRORS RECORDED                 */
         SPACE
         STC   R5,C1(,R4)              UPDATE COUNT             @Y02753
         B     CHAP8700                GO EXIT SUBROUTINE       @Y02753
         SPACE
*/* CHAP8720: P SET OVERFLOW INDICATOR IN OUTPUT DATA AREA           */
         SPACE
CHAP8720 EQU   *                       *
         OI    0(R4),WKOVERF           BIT0=1 FOR OVERFLOW      @Y02753
         SPACE
*/* CHAP8700: R () RETURN                                            */
         SPACE
CHAP8700 EQU   *                       *
         BR    R14                     RETURN                   @Y02753
         SPACE 2
*/* RECERROR: END FLOWCHART                                          */
         EJECT
*/* HDSETUP: CHART                                                   */
*/* FOOTING
*/* SUBROUTINE MOVES HEADER AND DESCRIPTOR WORD INTO OUTPUT AREA     */
         SPACE 2
***********************************************************************
*                                                                     *
* SUBROUTINE HDSETUP MOVES THE OUTPUT HEADER AND DESCRIPTOR WORD      *
* INTO THE OUTPUT DATA AREA FOR RECORDING, PROVIDED THERE IS ROOM.    *
* IF THE MOVE IS MADE, WORKAREA FIELD WKOUTDP IS SET TO THE ADDRESS   *
* OF THE DESCRIPTOR WORD; OTHERWISE, WKOUTDP IS LEFT ZERO.            *
*                                                                     *
* SUBROUTINES CALLED: RECMOVE                                         *
*                                                                     *
* RETURN CODES SET: NONE                                              *
*                                                                     *
* REGISTER USAGE:                                                     *
*              R4, R5, R7, R10 - DESTROYED                            *
*                                                                     *
***********************************************************************
         SPACE 2
*/* E ENTER HDSETUP                                                  */
         SPACE
HDSETUP  EQU   *                       *
         LR    R10,R14                 SAVE RETURN ADDRESS      @Y02753
         LA    R4,CHAPR2ID             ADDRESS OF HEADER        @Y02753
         LA    R5,C12                  LNG OF HEADER+DESCRIPTOR @Y02753
         SR    R7,R7                   CLEAR                    @Y02753
         IC    R7,SDWAURAL-SDWA(,R1)   SAVE OFFSET              @Y02753
         SPACE
*/* S RECMOVE: MOVE HEADER DESCRIPTOR                                */
         SPACE
         BAL   R14,RECMOVE             MOVE HEADER, DESCRIPTOR  @Y02753
         SPACE
*/* D (NO,CHAP8170,YES,) WAS DESCRIPTOR MOVED                        */
         SPACE
         TM    WKFLAGS,WKOVERF         DID OVERFLOW OCCUR       @Y02753
         BO    CHAP8170                LEAVE DESCRIPTOR PTR 0   @Y02753
         SPACE
*/* P SAVE ADDRESS OF DESCRIPTOR WORD                                */
         SPACE
         LA    R5,SDWAVRA-SDWA+C8(R7,R1) ADDR DESCRIPTOR WORD   @Y02753
         ST    R5,WKOUTDP              INTO WORKAREA            @Y02753
         SPACE
*/* CHAP8170: R () RETURN                                            */
         SPACE
CHAP8170 EQU   *                       *
         LR    R14,R10                 RESTORE RETURN ADDRESS   @Y02753
         BR    R14                     RETURN                   @Y02753
         SPACE
*/* HDSETUP: END FLOWCHART                                           */
         EJECT
*/* RECMOVE: CHART                                                   */
*/* FOOTING
*/* SUBROUTINE MOVES ERROR INFORMATION INTO OUTPUT DATA AREA         */
         SPACE 2
***********************************************************************
*                                                                     *
* SUBROUTINE RECMOVE MOVES AN ERROR ENTRY INTO THE ERROR RECORDING    *
* OUTPUT DATA AREA, UPDATING THE OFFSET IN THE DATA AREA HEADER. AN   *
* INDICATOR, WKOVERF IN WKFLAGS, IS SET IF THE ENTRY WILL NOT FIT.    *
*                                                                     *
* SUBROUTINES CALLED: NONE                                            *
*                                                                     *
* RETURN CODES SET: NONE                                              *
*                                                                     *
* REGISTER USAGE:                                                     *
*                                                                     *
*        4 - ADDRESS OF THE ERROR ENTRY                               *
*        5 - LENGTH OF THE ERROR ENTRY                                *
*        13 - SAVE AREA ADDRESS                                       *
*        14 - RETURN ADDRESS                                          *
*        ALL REGISTERS RESTORED ON RETURN                             *
*                                                                     *
***********************************************************************
         SPACE 2
*/* E ENTER RECMOVE                                                  */
         SPACE
RECMOVE  EQU   *                       *
         STM   R14,R12,SVREG14-SAVEAREA(R13) SAVE REGISTERS     @Y02753
         SPACE
*/* D (YES,CHAP8810,NO,) WILL DATA FIT INTO RECORDING AREA           */
         SPACE
         SR    R7,R7                   CLEAR
         IC    R7,SDWAURAL-SDWA(,R1)   OFFSET TO AVAILABLE AREA @Y02753
         LA    R8,0(R5,R7)             NEW OFFSET               @Y02753
         CH    R8,SDWAVRAL-SDWA(,R1)   NEW OFFSET WITHIN AREA   @Y02753
         BNH   CHAP8810                YES, CONTINUE            @Y02753
         SPACE
*/* P (,CHAP8800) SET RECORDING OVERFLOW INDICATOR                   */
         SPACE
         OI    WKFLAGS,WKOVERF         FLAG NO MORE RECORDING   @Y02753
         B     CHAP8800                GO EXIT SUBROUTINE       @Y02753
         SPACE
*/* CHAP8810: P MOVE ERROR INFORMATION INTO RECORDING AREA           */
         SPACE
CHAP8810 EQU   *                       *
         STC   R8,SDWAURAL-SDWA(,R1)   SAVE NEW OFFSET          @Y02753
         LA    R8,SDWAVRA-SDWA(R7,R1)  ADDR OF AVAILABLE SPACE  @Y02753
         BCTR  R5,R0                   ENTRY LENGTH LESS ONE    @Y02753
         EX    R5,CHAPMVC              MOVE ENTRY               @Y02753
         SPACE
*/* CHAP8800: R () RETURN                                            */
         SPACE
CHAP8800 EQU   *                       *
         LM    R14,R12,SVREG14-SAVEAREA(R13) RESTORE REGISTERS  @Y02753
         BR    R14                     RETURN                   @Y02753
         DROP  R3                      WORKAREA NO LONGER USED  @Y02753
         SPACE 2
*/* RECMOVE: END FLOWCHART                                           */
         TITLE 'IEAVECH0 - CHAP SVC - ENTRY POINT IGC044'
***********************************************************************
*                                                                     *
*                         CONSTANTS                                   *
*                                                                     *
***********************************************************************
         SPACE 3
CHAP044E DC    A(IGC044)               SVC ENTRY POINT ADDRESS
CHAPQV3  DC    V(IEAVEQV3)             QUEUE VERIFIER ENTRY POINT ADDR
CHAPTVER DC    V(IEAVETCB)             TCB CONTROL BLOCK VERIFIER
CHAPAVER DC    V(IEAVECAS)             CURRENT ASCB VERIFIER
CHAPLTC  DS    0F                      FULLWORD ALIGNMENT
         DC    CL4'LTC'                IDENTIFIER FOR TCBLTC FIELD
CHAPNTC  DS    0F                      FULLWORD ALIGNMENT
         DC    CL4'NTC'                IDENTIFIER FOR TCBNTC FIELD
CHAPR2ID DS    0F                      12 BYTE ENTRY
         DC    CL8'IGC044R2'           TCB QUEUE VALIDATION RTN ID
         DC    F'0'                    DESCRIPTOR WORD
CHAPQVID DC    CL8'IEAVEQV3'           QUEUE VERIFIER ID
CHAPMVC  MVC   0(0,R8),0(R4)           EXECUTE TARGET, MOVES ENTRY
CHAP22C  DC    X'22C000'               COMPLETION CODE, INVALID PARM
CHAPSLNG DC    FL1'24'                 LENGTH OF TITLE FOR SVC DUMP
CHAPFRR  DS    0CL24                   RECORD PARAMETER LIST
         DC    CL8'IEAVECH0'           MODULE NAME
         DC    CL8'IGC044'             CSECT NAME
         DC    CL8'IGC044R1'           FRR ID
CHAPSDMP SDUMP SDATA=(SQA,LSQA,TRT),MF=L SVC DUMP FOR RECOVERY
SDUMPLNG EQU   *-CHAPSDMP              LENGTH OF MACRO LIST FORM
         EJECT
***********************************************************************
*                                                                     *
*                            MAPPING MACROS                           *
*                                                                     *
***********************************************************************
         SPACE 4
         CVT   DSECT=YES
         EJECT
         IHASCVT DSECT=YES,LIST=YES
         EJECT
         IHAASCB
         EJECT
         IHAASXB
         EJECT
         IHAPSA
         EJECT
         IHAFRRS
         EJECT
         IKJTCB LIST=YES
         EJECT
         IHARB
         EJECT
         IHASDWA
         EJECT
         IHAQVPL
         EJECT
***********************************************************************
*                                                                     *
*                   FRR TCB QUEUE ROUTINE WORKAREA                    *
*                                                                     *
***********************************************************************
         SPACE 3
WKAREA   DSECT                         WORKAREA FOR IGC044R2
WKRETAD  DS    A                       RETURN ADDRESS FROM IGC044R2
WKFAMPTR DS    A                       FAMILY PTR USED IN TCBCHECK
WKOUTDP  DS    A                       ADDRESS OF OUTPUT DESCRIPTOR
WKWORD1  DS    F                       ERROR ENTRY WORD
WKWORD2  DS    F                       ERROR ENTRY WORD
WKWORD3  DS    F                       ERROR ENTRY WORD
WKWORD4  DS    F                       ERROR ENTRY WORD
WKTEMP1  DS    F                       TEMPORARY SAVE WORD
WKTEMP2  DS    F                       TEMPORARY SAVE WORD
WKCHKRCD DS    H                       RETURN CODE FROM TCBCHECK
WKFLAGS  DS    C                       FLAGS
WKOVERF  EQU   X'80'                   1 - OVERFLOW HAS OCCURRED
*                                      0 - NO OVERFLOW YET
*                                      BITS 1-7 RESERVED
WKLENGTH EQU   ((*-WKAREA+3)/4)*4      LENGTH OF WORKAREA
         SPACE 4
***********************************************************************
*                                                                     *
*                              SAVE AREA                              *
*                                                                     *
***********************************************************************
 SPACE 3
SAVEAREA DSECT                         MAPPING OF STANDARD SAVE AREA
SVWORD1  DS    A                       NOT USED
SVPREVA  DS    A                       ADDRESS OF PREVIOUS SAVE AREA
SVNEXTA  DS    A                       ADDRESS OF NEXT SAVE AREA
SVREG14  DS    A                       REGISTER 14
SVREG15  DS    A                       REGISTER 15
SVREG0   DS    A                       REGISTER 0
SVREG1   DS    A                       REGISTER 1
SVREG2   DS    A                       REGISTER 2
SVREG3   DS    A                       REGISTER 3
SVREG4   DS    A                       REGISTER 4
SVREG5   DS    A                       REGISTER 5
SVREG6   DS    A                       REGISTER 6
SVREG7   DS    A                       REGISTER 7
SVREG8   DS    A                       REGISTER 8
SVREG9   DS    A                       REGISTER 9
SVREG10  DS    A                       REGISTER 10
SVREG11  DS    A                       REGISTER 11
SVREG12  DS    A                       REGISTER 12
         EJECT
***********************************************************************
*                                                                     *
*                       FRR SIX-WORD WORKAREA                         *
*                                                                     *
***********************************************************************
         SPACE 3
CHAPXA   DSECT                         WORKAREA OBTAINED BY SETFRR
CHAPX1   DS    A                       WORD 1
CHAPX2   DS    F                       WORD 2
CHAPX3   DS    F                       WORD 3
CHAPX4   DS    F                       WORD 4
CHAPX5   DS    F                       WORD 5
CHAPX6   DS    F                       WORD 6
         SPACE 4
         END
