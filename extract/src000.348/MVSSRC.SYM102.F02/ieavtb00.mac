         TITLE 'IEAVTB00...IGC0001D...SPIE PROCESSING'
*/* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVTB00
*                   NOTE - AT SYSGEN TIME THE MODULE
*                   NAME IS CHANGED TO IGC0004X
*                   WHERE X IS A 12-0 PUNCH.
*                   THE ENTRY POINT IS IGC00040.
*
*02*     CSECT-NAME = IGC0001D
*
*01*  DESCRIPTIVE-NAME = SPIE/EXTRACT SERVICE ROUTINES
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = OSVS2 RELEASE 2
*
*01*  FUNCTION = SPIE - SPIE PROVIDES A PROBLEM PROGRAM WITH A MEANS OF
*     SPECIFYING AN ERROR EXIT ROUTINE IN RESPONSE TO ONE OR MORE
*     PROGRAM ERROR INTERRUPTS.
*                EXTRACT - PROVIDES A MEANS OF OBTAINING
*     THE ADDRESS OR THE VALUES OF A PREDEFINED SET OF FIELDS WITHOUT
*     CHASING THROUGH VARIOUS SYSTEM QUEUES.
*
*02*     OPERATION = SPIE - INITIALLY DOES GETMAIN FOR SCA AND PIE AND
*        CHAINS THEM ALONG WITH THE USER INPUT (PICA) TO THE TCBPIE
*        FIELD IN THE TCB. WHEN THE INPUT FROM THE CALLER REFLECTS A
*        CANCEL REQUEST THE SCA & PIE ARE FREED AND TCBPIE RESET TO
*        ZERO. SPIE WILL ALSO GETMAIN A RECOVERY PIE PICA WHICH WILL BE
*        USED TO MAINTAIN A SPIE ENVIRONMENT WHEN AN RB TERMINATES
*        ABNORMALLY. THE RPP WILL CONTAIN THE PIE,PICA,AND RB POINTERS
*        FOR THE RB ISSUING THE SPIE.
*
*                EXTRACT - OBTAINS SYSTEM DATA AND RETURNS IT OR THE
*        ADDRESS OF IT IN A USER SUPPLIED ANSWER AREA.
*
*01*   NOTES = BOTH PROGRAMS RUN PARTICALLY IN USER KEY AND KEY ZERO.
*      BE CAREFUL WHEN MAKING CODE CHANGES.
*
*02*     DEPENDENCIES = BOTH SPIE AND EXTRACT MUST BE ENTERED WITH THE
*        LOCAL LOCK HELD, KEY 0 AND IN SUPERVISOR STATE.
*
*03*        CHARACTER-CODE-DEPENDENCIES = NONE
*
*02*     RESTRICTIONS = SPIE-CALLER MUST BE AUTHORIZED FOR SPIE PROGRAM
*        CHECK 17.  CALLER MUST BE IN PROBLEM MODE AND KEY MUST EQUAL
*        TO THE TCBPKF KEY.
*
*02*     REGISTER-CONVENTIONS = R12 IS USED TO COMMUNICATE BETWEEN THE
*        MAINLINE AND THE FRR.
*
*02*     PATCH-LABEL = IEAVTBP
*
*01*  MODULE-TYPE = TYPE 3 SVC ROUTINE
*
*02*     PROCESSOR = ASSEMBLER
*
*02*     MODULE-SIZE = 1400 BYTES
*
*02*     ATTRIBUTES = PAGED-LPA, ZERO PROTECT KEY, ENABLED,
*        REENTERABLE, REFRESHABLE, LOCALLY LOCKED
*        SUPERVISOR MODE;
*
*01*  ENTRY-POINT = IGC0001D - SPIE;
*
*02*     INPUT =
*        REGISTERS - 0, 15 IRRELEVANT
*                  - 1 ADDRESS OF PICA OR ZERO(FOR CANCEL)
*                  - 2-14 NORMAL SVC REG SET UP
*
*01*  ENTRY-POINT = IEAVSPIE - SPIE RESOURCE MANAGER
*
*02*     INPUT =
*        REGISTERS - 1 ADDRESS OF WORD WHICH CONTAINS THE ADDRESS
*                      OF THE RMPL.
*                  - 13 ADDRESS OF 72 BYTE SAVE AREA
*                  - 14 RETURN ADDRESS
*                  - 15 ENTRY ADDRESS
*                  - 0, 2-12 IRRELEVANT
*01*  ENTRY-POINT = IGC00040 - EXTRACT SVC ENTRY
*
*02*     INPUT =
*        REGISTERS - 0, 15 IRRELEVANT
*                  - 1 ADDRESS OF EXTRACT PARAMETER LIST
*                 - 2-14 NORMAL SVC REGISTERS
*01*  ENTRY-POINT = IGC00040+8 - BRANCH ENTRY TO EXTRACT
*
*02*     INPUT =
*        REGISTERS - 1 ADDRESS OF EXTRACT PARM LIST
*                  - 4 ADDRESS OF TCB
*                  - 14 RETURN ADDRESS
*                  - 15 ENTRY ADDRESS
*                  - 3 CVT ADDRESS
*                  - 0,2,5-13 IRRELEVANT
*01*  ENTRY-POINT = IEAVSPI - CHECKPOINT/RESTART SUBROUTINE
*
*02*     INPUT =
*        REGISTERS - 1 SSCA ADDRESS
*                  - 13 ADDRESS OF 72 BYTE SAVE AREA
*                  - 14 RETURN ADDRESS
*                  - 15 ENTRY ADDRESS
*                  - 0 2-12 IRRELEVANT
*
*
*01*  EXIT-NORMAL = RETURN TO CALLER ON REGISTER 14.
*                   SPIE - R1 CONTAINS  THE ADDRESS OF THE PREVIOUS
*                          PICA OR 0. NO RETURN CODES.
*                   EXTRACT - NO RETURN CODES.
*                   IEAVSPIE - RETURN CODE 0.
*                   IEAVSPI - RETURN CODE 0
*
*
*01*  EXIT-ERROR = SPIE - ABEND CODES:
*                       - '10E' INVALID PICA;
*                       - '20E' INVALID PIE
*                       - '30E' NOT AUTHORIZED FOR INTERRUPT
*                            CODE 17 OR CALLED  SPIE IN SUPERVISOR
*                            STATE OR HAD A PSW KEY OTHER THAN
*                            THAT CONTAINED IN THE TCBPICF.
*                  EXTRACT - ABEND CODES:
*                       - '128' INVALID ANSWER LIST
*                       - '228' INVALID PARM LIST
*                       - '338' INVALID TCB ADDRESS
*                  IEAVSPIE - NONE
*                  IEAVSPI - NONE
*
*01*  EXTERNAL-REFERENCES = ROUTINES
*                           SPIE - ABEND, GETMAIN, FREEMAIN, TESTAUTH
*                                  PURGEDQ
*                           EXTRACT - ABEND
*
*02*     DATA-AREAS = SPIE - NONE
*                     EXTRACT - ANSWER LIST SUPPLIED BY CALLER
*                     IEAVSPI - SSCRDATA MAPPED BY THE DATA DSECT.
*
*02*     CONTROL-BLOCKS = SPIE - TCB, RB, PIE, PICA, SCA
*                         EXTRACT - TCB,  ASCB, JSCB, CSCB, IQE, RB;
*                         IEAVSPIE - RMPL, TCB, RB, PIE, PICA,
*                         IEAVSPI - SSCR, TCB, PIE, PICA
*
*
*01*  TABLES = NONE
*
*01*  MACROS = SPIE - ABEND, FREEMAIN, GETMAIN, MODESET, SETFRR,
*                     SETLOCK, SETRP, TESTAUTH, PURGEDQ.
*              EXTRACT - ABEND, MODESET, SETFRR, SETRP.
*
*02*    SERIALIZATION = THE LOCAL LOCK IS USED FOR SERIALIZATION
*
*01*  CHANGE-ACTIVITY = Y02752 FOR OS/VS2 FOR RELEASE 2
*                       OZ06785 - HANDLE PROBLEM PROGRAM SPIE COVERAGE
*                                 AND MULTIPLE LOGREC ENTRIES BY
*                                 PROGRAM MANAGER.             @ZA28693
*                       OZ11839 - SPIE CONTROL BLOCKS WILL BE FREED ON
*                                 TERMINATION.                 @ZA28693
*                       OZ12729 - CHECKPOINT/RESTART SUPPORT. THE
*                                 RPIEPICA IS REBUILT AFTER RESTART IF
*                                 THERE WAS AN OUTSTANDING SPIE AT THE
*                                 CHECKPOINT.                  @ZA28693
*                       OZ20162 - ISSUE MODESET TO USER KEY BEFORE
*                                 REFERENCING THE USERS PICA. IF A PAGE
*                                 FAULT OCCURS AND IS INVALID FOR ANY
*                                 REASON THE USER WILL BE ABENDED WITH
*                                 A 10E COMPLETION CODE.       @ZA28693
*                       OZ28693 - IF THE NEXT RPIEPICA IS ZERO THEN THE
*                                 PIE WILL BE FREED AND THE SCAPIE SET
*                                 TO ZERO DURING RB TERMINATION WITH A
*                                 RETRY TO AN ESTAE ROUTINE.   @ZA28693
*                       OZ29414 - CHANGE THE PURGEDQ MACRO FROM STAND-
*                                 ARD FORM TO LIST AND EXECUTE FORMS SO
*                                 THAT IEAVTB00 WILL NOT STORE INTO
*                                 ITSELF.                      @ZA29414
*                       OZ31066 - FIX PE FOR OZ28693 BY ISSUING
*                                 FREEMAIN SVC INSTEAD OF THE BRANCH
*                                 ENTRY USED IN THE ORIGINAL.  @ZA31066
*01*  MESSAGES = NONE
*
*01*  ABEND-CODES = (SEE EXITS ERROR)
*
**** END OF SPECIFICATIONS ***/
IGC0001D CSECT
         EJECT
         ENTRY IEAVSPIE       E.P. FOR THE RESOURCE MANAGER
         ENTRY IEAVSPI        E.P. SPECIFICALLY FOR CHECKPT/RESTART
         ENTRY IGC00040       E.P. FOR EXTRACT SVC ENTRY
         USING PSA,0          PSA AT LOC 0
*        R0 THRU R3 ARE WORK REGISTERS
         USING TCB,R4         CURRENT TCB REGISTER
         USING RBSECT,R5      SPIE'S SVRB ADDRESS
         USING IGC0001D,R6    SPIE'S BASE REGISTER
         USING ASCB,R7        CURRENT ASCB ADDRESS
         USING PIE,R8         PIE ADDRESS
         USING PICA,R9        NEW PICA REGISTER
*        R10 IS THE OLD PICA REGISTER
         USING SCA,R11        SCA ADDRESS
*        R12 CONTAINS INPUT TO THE FRR SHOULD AN ABEND OCCUR
*        R13=CODE17INDICATOR/NEWRBOPSWMASK/NEWTCBPMASK/CALLERPROTECTKEY
*        R14 AND R15 ARE WORK REGISTERS
         LA    R9,0(R1)       SAVE THE NEW PICA ADDRESS
         B     SPID           GO AROUND ID
         DC    CL8'IGC0001D'  SPIE'S I.D.
SPID     EQU   *              BEGIN HERE
         LA    R15,SPFRR      FRR E.P. ADDRESS
         SETFRR A,FRRAD=(R15),WRKREGS=(R1,R2) SETUP FRR
TEST1    EQU   *
         EJECT
*        SPIE MAIN PROCESSING STARTS HERE
         NI    TCBFLGS6,XFF-TCBPIE17 RESET TCBPIE17 BIT
         SR    R10,R10        INIT OLD PICA ADDRESS TO ZERO
         L     R5,RBLINK-RBSECT(R5)  GET SPIES CALLERS' RB
         SR    R13,R13        INITIALIZE TO ZERO (VERY IMPORTANT)
         IC    R13,RBOPSWKY-RBSECT(R5) OBTAIN USERS PROTECT KEY
         N     R13,FFFFFFF0   ZERO NON KEY BITS.
*        CALLER MUST BE PROBLEM STATE AND HAVE A KEY MATCHING
*        THE TCBPKF (PROTECTION KEY) FIELD
         CLM   R13,M0001,TCBPKF Q. IS CALLER'S KEY VALID
         BNE   SPABEND        INVALID CALLER
         TM    RBOPSW+AMWP-RBSECT(R5),PBIT Q. IS CALLER PROBLEM STATE
         BNO   SPABEND        A. NO. ABEND INVALID CALLER.
         LTR   R9,R9          Q. CANCEL (NEW PICA = 0)
         BZ    SPCANCEL       A. YES
         LR    R2,R13         GET USERS KEY FOR KEY SWITCH.
         MODESET  KEYADDR=(2)  SWITCH TO KEY OF CALLER
TEST1A   EQU   *              *
         EJECT
*        CHECK CANCEL
*           IF YES, GO TO SPCANCEL
*           IF NO, GO TO SPNOCNCL
         L     R12,SP10E      Q. BAD PICA.
         TM    PICITMK1-PICA(R9),PICAEXT  Q. EXTENDED PICA
*        A PROGRAM CHECK HERE RESULTS IN A 10E ABEND
         BZ    SPNOEXTN       A. NO
         CLC   PICITMK1-PICA(FOUR,R9),HIGHBIT Q. CANCEL
*        A PROGRAM CHECK HERE RESULTS IN A 10E ABEND
         BE    SPCANCEL       A. YES.
SPNOEXTN EQU   *              *
         CLC   PICITMK1-PICA(TWO,R9),HZERO Q. CANCEL
*        A PROGRAM CHECK HERE RESULTS IN A 10E ABEND.
         BNE   SPNOCNCL       A. NO.
         EJECT
*        THIS IS A REQUEST TO CANCEL
SPCANCEL EQU   *              *
         EJECT
*        CHECK IF SPIE ENVIRONMENT EXISTS
*           IF NO, GO TO SPFINISH
*           IF YES, FREE THE SCA & PIE
*                   RESTORE THE ORIGINAL
*                   PSW PROGRAM MASK
*                   ZERO THE TCBPIE
*                   AND THEN GO TO
*                   SPFINISH
         MODESET EXTKEY=SUPR  SWITCH INTO KEY 0.
TEST1B   EQU   *              *
         SR    R12,R12        RESET ABEND CODE REG.
         ICM   R13,M0100,TCBPMASK  USER'S ORIG MASK RESTORED.
         L     R11,TCBPIE     Q. SCA ADDRESS
         LA    R11,ZERO(R11)  DITTO
         LTR   R11,R11        DITTO
         BZ    SPFINISH       A. NO.
         SR    R0,R0          CLEAR FOR STORE
         ST    R0,TCBPIE      ZERO TCBPIE FIELD.
         L     R8,SCARPPTR    GET TOP ACTIVE RPIEPICA         @ZA11839
         LTR   R8,R8              DOES RPIEPICA EXIST?         @ZA28693
         BZ    NOFREERP           NO DONT TRY TO FREE IT       @ZA28693
         BAL   R12,FREERPPS   GO FREE ALL ACTIVE RPIEPICAS    @ZA11839
NOFREERP DS    0H                 CONTINUE TO FREE SPIE BLOCKS @ZA28693
         L     R8,SCAFRPPQ      GET TOP FREE RPIEPICA         @ZA11839
         LTR   R8,R8            Q. ANY FREE RPIEPICAS         @ZA11839
         BZ    FREESCA          A. NO - GO FREE THE SCA       @ZA11839
         BAL   R12,FREERPPS     A. YES - GO FREE ACTIVE RPP   @ZA11839
FREESCA  L     R8,SCAPIE      GET PIE ADDRESS.
         SR    R12,R12          RESET ABEND REG               @ZA11839
         FREEMAIN RU,LV=SCALEN1,A=(R11),SP=245,BRANCH=YES  FREE SCA
*
*        AT THIS TIME REGISTER 10 IS ZERO AS IT SHOULD BE FOR RETURN
*        TO THE USER. IF A PIE EXISTS THE PIEPICA WILL BE LOADED.
*
         LTR   R8,R8              DOES THE PIE EXIST?          @ZA28693
         BZ    SPFINISH           CLEANUP AND RETURN           @ZA28693
TEST1C   EQU   *              *
         LR    R2,R13         GET USER'S KEY
         MODESET KEYADDR=(2)   SWITCH TO THAT KEY
TEST1X   EQU   *              *
         L     R12,SP20E      CODE FOR BAD PIE
         L     R10,PIEPICA    SAVE OLD PICA ADDRESS
*        A PROGRAM CHECK HERE RESULTS IN A 20E ABEND
         SR    R12,R12        RESET THE ABEND CODE REGISTER
         MODESET EXTKEY=SUPR   SWITCH TO KEY 0
TEST1Y   EQU   *              *
         FREEMAIN RU,LV=PIELEN,A=(R8),SP=250,BRANCH=YES FREE THE PIE
TEST1D   EQU   *              *
         B     SPFINISH       CLEANUP AND RETURN.
         SPACE 3
FREERPPS EQU   *              ROUTINE TO FREE RPIEPICAS     @ZA11839
         L     R2,RPIEPICA-RPPNPTR(,R8) GET NEXT RPIEPICA   @ZA11839
         FREEMAIN RU,LV=RPPLEN,A=(R8),SP=253,BRANCH=YES     @ZA11839
         LTR   R2,R2          Q. ANY MORE RPIEPICAS         @ZA11839
         BNZ   LOOP           A. YES - GO GET NEXT          @ZA11839
         BR    R12            A. NO - RETURN                @ZA11839
LOOP     LR    R8,R2          GET NEW TOP RPP               @ZA11839
         B     FREERPPS         GO FREE IT                  @ZA11839
               EJECT
*              CHECK FOR INTERRUPT CODE 17
*                     IF NO, GO TO SPNO17
*                     IF YES, CHECK IF AUTHORIZED
*                     IF NOT AUTHORIZED ABEND
*                          IF AUTHORIZED DEFER
*                          SETTING OF TCBPIE17
*                          GO TO SPNO17
SPNOCNCL EQU   *              *
         ICM   R13,M0100,PICAPRMK-PICA(R9)  GET THE NEW PGM MASK
*        A PROGRAM CHECK HERE RESULTS IN A 10E ABEND.
         TM    PICITMK1-PICA(R9),PICAEXT  Q. EXTENDED PICA.
*        A PROGRAM CHECK HERE RESULTS IN A 10E ABEND.
         BZ    SPNO17         A. NO. CAN'T BE CODE 17
         TM    PICITMK3,PICACD17   Q. CODE 17 REQUESTED
*        A PROGRAM CHECK HERE RESULTS IN A 10E ABEND.
         BZ    SPNO17         A. NO.
         SR    R12,R12        RESET ABEND CODE REG.
         MODESET EXTKEY=SUPR     SWITCH TO KEY 0.
TEST1E   EQU   *              *
         TESTAUTH FCTN=1,KEY=YES,BRANCH=YES  Q.AUTHORIZED FOR CODE 17
TEST1F   EQU   *
         LTR   R15,R15        DITTO
         BNZ   SPABEND        A. NO. BOMB INVALID CALLER
         LR    R2,R13         GET USER'S KEY
         MODESET KEYADDR=(2)   SWITCH KEY
TEST1G   EQU   *              *
         ICM   R13,M1000,HIGHBIT   SET HIGH BIT ON TO INDICATE CODE 17
        EJECT
*       CHECK IF SPIE ENVIRONMENT EXISTS
*          IF NO, GETMAIN SCA AND PIE,
*                 SAVE CALLERS MASK
*                 IN TCBPMASK, SET
*                 HIS MASK FROM PICA
*                 MASK AND CHAIN
*                 THE PICA TO PIE,
*                 PIE TO SCA, AND
*                 SCA TO TCB THEN RETURN
*                 TO CALLER WITH REG1=0
*          IF YES, SET THE CALLERS
*                 PSW MASK WITH
*                 PICA MASK, SAVE
*                 OLD PICA, CHAIN NEW
*                 PICA TO PIE THEN
*                 RETURN TO CALLER
*                 WITH REG1=PREVIOUS PICA
SPNO17   EQU   *              CHECK OUT THE OLD PICA
         EJECT
*        THIS IS A NEW OR NESTED REQUEST
         SR    R12,R12        RESET ABEND CODE REG.
         L     R11,TCBPIE     OBTAIN SCA ADDRESS
         LA    R11,ZERO(R11)  CLEAR THE HIGH BYTE
         LTR   R11,R11        Q. DOES A SPIE ENVIRONMENT EXIST
         BNZ   SCANOGET       A. YES, SCA  ALREADY EXISTS      @ZA06785
*        THIS IS A NEW REQUEST
         MODESET EXTKEY=SUPR  SWITCH TO KEY 0.
TEST1H   EQU   *              *
         GETMAIN RU,LV=PIELEN,SP=250,BRANCH=YES GET A PIE
TEST2    EQU   *
         LA    R8,ZERO(R1)    SAVE PIE ADDRESS
         GETMAIN RU,LV=SCALEN1,SP=245,BRANCH=YES  GET THE SCA
TEST3    EQU   *
         LA    R11,ZERO(R1)   SAVE THE SCA ADDRESS
         XC     SCA(SCALEN1),SCA      ZERO THE SCA         @ZA06785
         SR    R10,R10        INDICATE NO OLD PICA.
         LR    R2,R13         GET USER'S KEY
         MODESET  KEYADDR=(2)  SWITCH TO THAT KEY
TEST3A   EQU   *              *
         B     SPNPICA        CHECK THE NEW PICA.
SCANOGET EQU  *               CHECK IF PIE ALREADY EXISTS     @ZA06785
         L     R8,SCAPIE      OBTAIN PIE ADDRESS              @ZA06785
         LTR   R8,R8          Q. DOES PIE EXIST               @ZA06785
         BNZ   SPNOGET        A. YES                          @ZA06785
TEST23   EQU    *                                             @ZA06785
       MODESET  EXTKEY=SUPR  GET IN SUPERVISOR STATE         @ZA06785
         GETMAIN  RU,LV=PIELEN,SP=250,BRANCH=YES  GET A PIE   @ZA06785
         ST     R1,SCAPIE      SAVE PIE ADDRESS               @ZA06785
         LR     R8,R1         GET PIE ADDRESSABILITY          @ZA06785
         L      R12,SP20E     SET ABEND CODE                  @ZA06785
         XC     PIEPICA(FOUR),PIEPICA  INDICATE NO OLD PICA   @ZA06785
*      PROGRAM CHECK HERE RESULTS IN 20E ABEND
         SR     R12,R12       RESET ABEND REGISTER            @ZA06785
         LR    R2,R13       GET USER KEY                     @ZA06785
         MODESET KEYADDR=(2)    RETURN TO USER KEY           @ZA06785
SPNOGET  EQU   *              NO GETMAIN ON THIS PATH.
*        THIS IS A NESTED REQUEST
         L     R8,SCAPIE      SAVE PIE ADDRESS
         L     R12,SP20E      Q. BAD PIE
         L     R10,PIEPICA    SAVE OLD PICA ADDRESS
*        A PROGRAM CHECK HERE RESULTS IN A 20E ABEND.
         SR    R12,R12        RESET ABEND CODE REG
SPNPICA  EQU   *              CHECK OUT THE NEW PICA.
         SR    R12,R12        RESET THE ABEND CODE REGISTER.
         ICM   R13,M0010,RBOPSWMK-RBSECT(R5)  GET CALLERS CURRENT MASK
         LTR   R10,R10        Q. IS THERE AN OLD PICA
         BZ    SPNOOLD        A. NO. TH RB MASK WILL GO TO TCBPMASK
         ICM   R13,M0010,TCBPMASK   TCBPMASK WILL REMAIN THE SAME.
SPNOOLD  EQU   *              UPDATE THE PIE
         L     R12,SP20E      PREPARE FOR BAD PIE.
         XC    PIE(PIELEN),PIE   ZERO THE PIE
         ST    R9,PIEPICA     NEW PICA ADDRESS TO PIE(MAY BE 0)
         SR    R12,R12        RESET ABEND REGISTER.
         MODESET  EXTKEY=SUPR   SWITCH BACK TO KEY 0.
TEST6    EQU   *
         ST    R8,SCAPIE      CHAIN THE PIE
         LA    R1,SPIERMTR    GET ADDRESS OF RMTR              @YM03222
         LA    R2,SCASRB      GET ADDRESS OF SRB               @YM03222
         USING SRBSECT,R2     SRB ADDRESSABILITY
         ST    R1,SRBRMTR     SET RMTR ADDRESS IN SRB          @YM03222
         ST    R11,TCBPIE     CHAIN THE SCA TO THE TCB
         BAL   R14,PROCRPP       GO PROCESS RPIEPICA           @ZA06785
         LTR   R13,R13        Q. CODE 17 REQUESTED.
         BNM   SPFINISH       A. NO CONTINUE.
         OI    TCBFLGS6,TCBPIE17  TELL PROG CHECK FLIH ABOUT 17
SPFINISH EQU   *              CLEAN UP AND RETURN
         N     R13,FF0F0FFF   CLEANSE MASKS IN REG 13
         STCM  R13,M0010,TCBPMASK  TCBPMASK=TCBPMASK OR RBOPSWMK OR 0
         ICM   R1,M0100,RBOPSWMK-RBSECT(R5)  GET THE MASK BYTE
         N     R1,FFF0FFFF    ZERO THE MASK, SAVE THE REST
         OR    R1,R13         MERGE REST WITH NEW MASK
         STCM  R1,M0100,RBOPSWMK-RBSECT(R5)  UPDATE WITH NEW MASK
         SETFRR  D,WRKREGS=(R1,R2)  DELETE FRR ENVIRONMENT
TEST7    EQU   *
         LR    R1,R10         SETUP REGISTER ONE
         L     R14,CVTPTR     GET CVT ADDRESS
TEST8    EQU   *
         L     R14,CVTEXPRO-CVT(R14)  GET EXIT ADDRESS
         BR    R14            RETURN
         SPACE 3
*        ABEND WITH '30E' CODE
SPABEND  EQU   *              DITTO
         MODESET  EXTKEY=SUPR   SWITCH BACK TO KEY 0.          @YM03566
         SETFRR D,WRKREGS=(R1,R2)  DELETE FRR                  @YM03566
         L     R1,SP30E       CANNOT USE SPIE OR SPIE W/CODE 17
         ABEND (1),DUMP,,SYSTEM  ABEND THE CALLER.
TEST9    EQU   *
         EJECT
*        SPIE FRR
         SPACE 3
SPFRR    EQU   *              DITTO
         USING SDWA,R1        R1 INPUT FROM RTM
         BALR  R6,ZERO        TEMPORARY BASE
         USING *,R6           DITTO
         L     R6,BASE        GET THE BASE FOR THIS MODULE
         USING IGC0001D,R6    DITTO
         L     R0,SDWAABCC    GET CURRENT ABEND CODE.
         TM    SDWAFLGS,SDWAPCHK  WAS IT A PROGRAM CHECK
         BZ    SPSETRP        NO. CONTINUE WITH TERMINATION
         LA    R2,SPTABLE-FOUR   SEARCH THROUGH TABLE FOR ABEND CODE.
         LA    R3,SPSTOP      GET THE STOPPER ADDRESS.
SPLOOP   EQU   *              LOOP THRU ABEND CODE LIST.
         LA    R2,FOUR(R2)    POINT TO CURRENT WORD IN LIST
         CR    R2,R3          Q. IS THIS THE END.
         BE    SPSETRP        A. YES. CONTINUE WITH THE SAME ABEND CODE
         CLC   SDWAGR12(FOUR),ZERO(R2)  Q. DID MAINLINE PASS A CODE.
         BNE   SPLOOP         LOOP UNTIL MATCH OR END OF LIST.
         L     R0,ZERO(R2)    MATCH. ABEND WITH THIS CODE.
         ST    R0,SDWAABCC    SET CODE
         SETRP RC=0,RECORD=NO                                  @YM03566
         SR    R15,R15        CLEAR                            @YM03566
         BR    R14            RETURN                           @YM03566
SPSETRP  EQU   *              SET CODE AND RETURN TO RTM
         SETRP  RC=0          RETURN TO CONTINUE W/TERMINATION
         SR     R15,R15       RETURN CODE OF 0
         BR     R14           RETURN
TEST10   EQU    *
         EJECT
*                  CHECK IF RB ALREADY HAS RPIEPICA           @ZA06785
*              IF SO CHECH IF IT IS A SPIE RESTORE            @ZA06785
*                  IF SO DEQUEUE RPP AND PUT ON FREE QUEUE    @ZA06785
*                  IF NOT COPY CONTROL BLOCK PTRS AND RETURN  @ZA06785
*              IF NOT CHECK IF FREE RPIEPICA IS AVAILABLE     @ZA06785
*                  IF SO DEQUEUE FIRST FREE RPIEPICA, QUEUE   @ZA06785
*                     TO ACTIVE CHAIN, COPY CONTROL BLOCK     @ZA06785
*                     POINTERS AND RETURN TO CALLER           @ZA06785
*              IF NOT GETMAIN NEW RPIEPICA, QUEUE TO ACTIVE   @ZA06785
*                    QUEUE, COPY CONTROL BLOCK POINTERS AND   @ZA06785
*                     AND RETURN                              @ZA06785
*
*       INPUT: R5= ISSUING RB ADDRESS                         @ZA06785
*              R9= PICA ADDRESS OR ZERO IF CANCEL REQUEST     @ZA06785
*              R11= SCA ADDRESS                               @ZA06785
*
PROCRPP EQU  *                    RECOVERY PIC/PICA PROCESSING @ZA06785
        USING  RPIEPICA,R3                                   @ZA06785
        LR    R12,R14             SAVE RETURN ADDRESS         @ZA06785
        SR    R0,R0               ZERO WORK REGISTER          @ZA06785
        L    R3,SCARPPTR          GET TOP RPIEPICA ADDRESS    @ZA06785
        LTR  R3,R3                Q. ANY RPIEPICA             @ZA06785
        BZ   CHKFREE              A. NO                       @ZA06785
        L    R8,SCAPIE            GET PIE ADDRESS             @ZA06785
        L    R2,RPPNPTR           GET ADDRESS OF LAST RPP     @ZA06785
        C    R5,RPPPRB            Q. ISSUING RB HAVE RPP      @ZA06785
        BE    RSETSPIE            A. YES                      @ZA06785
CHKFREE C     R0,SCAFRPPQ         Q.IS A FREE RPP AVAILABLE   @ZA06785
        BNE   GETFREE             A. YES                      @ZA06785
        LR    R2,R3             SAVE R3 ACROSS GETMAIN      @ZA06785
        GETMAIN RU,LV=RPPLEN,SP=253,BRANCH=YES    GET RPP     @ZA06785
        LA    R15,ZERO(R1)        SAVE NEW RPIEPICA ADDRESS   @ZA06785
        LR    R3,R2              RESTORE REGISTER 3           @ZA06785
QUENEW  EQU   *                   CHAIN NEW RPP TO SCA        @ZA06785
        ST    R3,RPPNPTR-RPIEPICA(R15) UPDATE RPP NEXT FIELD   @ZA06785
        ST    R15,SCARPPTR        UPDATE RPP PTR IN SCA       @ZA06785
COPYBLK EQU   *                   COPY SPIE CONTROL BLOCKS    @ZA06785
        L     R3,SCARPPTR            GET RPIEPICA             @ZA06785
        ST    R5,RPPPRB              SAVE ISSUING RB ADDRESS   @ZA06785
        MVC   RPPPIE(L4),SCAPIE      SAVE PIE ADDRESS         @ZA06785
        MVC   RPPPICA(L4),PIEPICA    SAVE PICA ADDRESS        @ZA06785
XIT     LR    R14,R12               RESET RETURN REGISTER     @ZA06785
        BR    R14                    RETURN TO CALLER         @ZA06785
        SPACE 2
RSETSPIE EQU   *                   CHECK FOR SPIE RESTORE     @ZA06785
        CR     R2,R0                PREVIOUS RPP EXIST?       @ZA06785
        BE     COPYBLK              NO PREVIOUS RPP           @ZA06785
        LR     R1,R12               SAVE RET ADDR             @ZA20162
        L      R12,SP10E            GET ABEND CODE FOR FRR    @ZA20162
        LR     R3,R2                SAVE REG2 ACROSS MODESET  @ZA20162
        LR     R2,R13               GET USER KEY              @ZA20162
        MODESET KEYADDR=(2)         SWITCH TO USER KEY        @ZA20162
        LR     R2,R3                RESTORE REG2              @ZA20162
* A PROGRAM CHECK WHILE REFERENCING THE PICA WILL RESULT IN   @ZA20162
* A 10E ABEND ISSUED FROM THE FRR                             @ZA20162
        L      R3,PIEPICA          GET  CURRENT PICA ADDRESS  @ZA06785
        L      R3,PICAEXIT-PICA(,R3) GET CURRENT EXIT ADDR    @ZA06785
        LA     R3,ZERO(,R3)        CLEAR HIGH ORDER BYTE      @ZA06785
        L      R2,RPPPICA-RPIEPICA(,R2)  GET PREVIOUS PICA    @ZA06785
        L      R2,PICAEXIT-PICA(,R2) GET PREVIOUS EXIT RTN    @ZA06785
        LA     R2,ZERO(,R2)         CLEAR HIGH ORDER BYTE     @ZA06785
        LR     R12,R1              RESTORE RETURN ADDRESS     @ZA20162
        MODESET EXTKEY=SUPR        RETURN TO SUPERVISOR KEY   @ZA20162
        CR     R3,R2               Q. PICA EXIT SAME AS LAST  @ZA06785
        BNE    COPYBLK             A. NO                      @ZA06785
        L      R3,SCARPPTR         GET RPIEPICA POINTER       @ZA06785
        MVC    SCARPPTR(L4),RPPNPTR     REMOVE RPP FROM QUE   @ZA06785
        MVC    RPPNPTR(L4),SCAFRPPQ     CHAIN TO FREE QUEUE   @ZA06785
        ST     R3,SCAFRPPQ         UPDATE FREE QUEUE HEADER   @ZA06785
        B      XIT               RETURN TO CALLER             @ZA06785
        SPACE  2
GETFREE EQU    *                 GET A FREE RPIEPICA          @ZA06785
        L      R15,SCAFRPPQ      GET RPP FROM FREE QUEUE      @ZA06785
        L      R2,RPPNPTR-RPIEPICA(R15)  GET NEXT RPP POINTER @ZA06785
        ST     R2,SCAFRPPQ           UPDATE FREE QUE PTR      @ZA06785
        B      QUENEW            QUEUE THIS RPP TO ACTIVE QUE @ZA06785
       EJECT
*
*        SPIE RESOURCE MANAGER
*
*        THE SPIE RESOURCE MANAGER IS ENTERED ON TERMINATION.
*        IF MEMORY TERMINATION, CONTROL IS RETURNED. IF TASK
*        TERMINATEION, THE SCA IS FREEMAINED IF THERE IS ONE.
*
         SPACE 3
IEAVSPIE EQU   *              SPIE RESOURCE MANAGER
         STM   R14,R12,TWELVE(R13)  SAVE RTM'S REGISTERS.
         BALR  R6,R0          TEMPORARY BASE REGISTER
         USING *,R6           DITTO
         L     R6,BASE        PERMANENT BASE REG
         USING IGC0001D,R6    DITTO
         USING RMPL,R9        PARM LIST REGISTER
*        R7                   ASCB REGISTER
*        R4                   TCB REGISTER
*        R11                  SCA REGISTER
*        R0 THRU R3           WORK REGISTERS
*        R13                  RTM 72 BYTE SAVE AREA (DO NOT DISTURB)
*        R5,R8,R10,R12        NOT USED
*        R14                  RETURN REG
*        R15                  RETURN CODE REG
         L     R9,ZERO(R1)    GET THE USELESS WORD
         TM    RMPLFLG1,RMPLTERM  Q. MEMORY TERMINATION
         BO    SPRETURN       A. YES. DO NOTHING.
         TM    RMPLFLG1,RMPLRBPP     Q. RB TERMINATING        @ZA06785
         BO    RBTERM      A.YES GO UPDATE SPIE ENVIRONMENT   @ZA06785
TASKTERM L     R7,RMPLASCB    NEED ASCB FOR FREEMAIN
         L     R4,RMPLTCBA    NEED TCB FOR SCA ADDRESS
         L     R11,TCBPIE-TCB(R4)  GET THE SCA ADDRESS.
         LA    R11,ZERO(R11)  CLEAR HIGH BYTE
         LTR   R11,R11        Q. IS THERE AN SCA
         BZ    SPRETURN       A. NO. NOTHING TO FREE
         NI    TCBFLGS6-TCB(R4),XFF-TCBPIE17  RESET THE SPIE 17 BIT
*        PURGEDQ DEFAULTS TO CURRENT ADDRESS SPACE,
*        CURRENT TCB AND THE RMTR IS SPIE'S
         LA    R1,PURGLIST    GET ADDRESS OF PURGE PARAMETERS  @ZA29414
         PURGEDQ MF=(E,(1))   EXECUTE PURGEDQ SVC              @ZA29414
         SR    R0,R0          CLEANSE THE TCBPIE FIELD.
         ST    R0,TCBPIE-TCB(R4)  DITTO
         FREEMAIN  RU,LV=SCALEN1,A=(R11),SP=245  FREE THE SCA
TEST11   EQU   *
SPRETURN EQU   *              RETURN
         LM    R14,R12,TWELVE(R13)  LOAD REGS
         SR    R15,R15        RETURN CODE OF 0
*        THE FOLLOWING BR 14 IS USED AS THE ADDRESS
*        OF THE SPIE SRB RMTR.  NO ACTION IS NECESSARY FOR THE
*        RMTR TO PERFORM.
SPIERMTR BR    R14            EXIT
        SPACE   3
RBTERM   EQU   *              PROCESS RPP FOR TERMINATING RB  @ZA06785
         L     R5,RMPLRBPA    GET TERMINATING RB ADDRESS      @ZA06785
         L     R4,RMPLTCBA    GET ASSOCIATED TCB ADDRESS      @ZA06785
         L     R11,TCBPIE-TCB(R4)  GET SCA ADDRESS            @ZA06785
         LA    R11,ZERO(R11)       CLEAR HIGH BYTE            @ZA06785
         LTR   R11,R11             Q. SCA EXIST               @ZA06785
         BZ    SPRETURN            A. NO                      @ZA06785
         L     R3,SCARPPTR    GET RPIEPICA ADDRESS            @ZA06785
         C     R5,RPPPRB       Q. IS THERE AN RPP FOR RB      @ZA06785
         BNE   SPRETURN        A. NO - RETURN TO CALLER       @ZA06785
         MVC   SCARPPTR(L4),RPPNPTR     REMOVE RPP FROM QUE   @ZA06785
         MVC   RPPNPTR(L4),SCAFRPPQ     PUT RPP ON FREE QUE   @ZA06785
         ST    R3,SCAFRPPQ           UPDATE FREE RPP HEADER   @ZA06785
         L     R3,SCARPPTR           GET NEW TOP RPIEPICA     @ZA06785
         LTR   R3,R3                 IS NEXT RPIEPICA ZERO    @ZA28693
         BNZ   CURSPENV              NO PROCESS CURRENT SPIE  @ZA28693
         L     R1,SCAPIE             GET PIE ADDRESS TO FREE  @ZA28693
         ST    R3,SCAPIE             ZERO THE PIE ADDRESS     @ZA28693
         FREEMAIN RU,LV=PIELEN,A=(R1),SP=250 SVC FREEMAIN      @ZA31066
         B     SPRETURN              PROCESSING COMPLETE      @ZA28693
CURSPENV MVC   SCAPIE(L4),RPPPIE      GET CURRENT SPIE ENVIRN @ZA28693
         L     R8,SCAPIE              GET PIE ADDRESS         @ZA06785
         MODESET  EXTKEY=TCB,WORKREG=2      SET TO USER KEY @ZA12729
         MVC   PIEPICA(L4),RPPPICA    COPY PICA ADDRESS       @ZA06785
         MODESET  EXTKEY=SUPR         BACK TO KEY ZERO        @ZA12729
         B     SPRETURN          RETURN TO CALLER             @ZA06785
           SPACE 3
           EJECT
*        CHECKPOINT/RESTART  SUBROUTINE
*        FOR A CHECKPOINT, THE SCA WILL BE SAVED IN THE SSCR   @ZA12729
*        (SUBSYSTEM CHECKPOINT RECORD) ALONG WITH THE TCBPMASK @ZA12729
*        AND TCBPIE17. THE ACTIVE QUEUE OF RPIEPICAS WILL BE   @ZA12729
*        SAVED IN THE SSCR AFTER DETERMINING ITS ASSOCIATED    @ZA12729
*        RB'S POSITION ON THE RB QUEUE. THE RELATIVE POSITION  @ZA12729
*        ON THE RB QUEUE WILL BE SAVED IN THE RPPPRB FIELD OF  @ZA12729
*        THE RPIEPICA FOR LATER USE BY RESTART. IF A RPIEPICA  @ZA12729
*        EXISTS WITH NO CORRESPONDING RB ON THE RB QUEUE, THE  @ZA12729
*        RPIEPICA CHAIN THAT IS IN THE SSCR WILL END WITH THAT @ZA12729
*        RPIEPICA. THE RPPNPTR AND RPPPRB FIELDS OF THAT       @ZA12729
*        RPIEPICA WILL BE ZEROED IN THE SSCR SO THAT RESTART   @ZA12729
*        WILL NOT TRY TO RESTORE RPIEPICAS BEYOND THAT POINT.  @ZA12729
*        THE TOTAL SSCR AREA USED TO SAVE THE RPIEPICA QUEUE   @ZA12729
*        WILL BE RECORDED IN THE SSCR (DATARPPL) ALONG WITH    @ZA12729
*        THE TOTAL AREA USED TO SAVE BOTH SCA & THE RPIEPICA   @ZA12729
*        QUEUE(SSCRDATL).                                      @ZA12729
*                                                              @ZA12729
*        ON A RESTART, A NEW SCA WILL BE GETMAINED AN RE-      @ZA12729
*        ESTABLISHED USING THE DATA IN THE SSCR. THE SCAFRPPQ  @ZA12729
*        FIELD WILL BE ZEROED. STORAGE WILL BE GETMAINED TO    @ZA12729
*        RE-ESTABLISH THE RPIEPICA QUEUE. THE RB POINTERS IN   @ZA12729
*        THE RPIEPICAS WILL BE SET BASED ON THE INDEX VALUES   @ZA12729
*        SAVED AT CHECKPOINT.                                  @ZA12729
***********************************************************************
         SPACE 2
IEAVSPI  EQU   *              SPECIAL ENTRY FORM CHECKPT/RESTART
         STM   R14,R12,TWELVE(R13)  SAVE REGS
         BALR  R6,ZERO        TEMPORARY ADDRESSABILITY
         USING *,R6           DITTO
         L     R6,BASE        TRUE BASE
*        R0-R2                ARE WORK REGISTERS
         USING TCB,R4         TCB ADDRESSABILITY
*        R5                   WORK REG
         USING   IGC0001D,R6  BASE FOR THIS MODULE
*        R7                   RB ADDRESSABILITY
*        R8                   WORK REG
         USING SSCR,R9        CHECKPT/RESTART 4K TABLE/BUFFER
         USING DATA,R10       SSCRDATA MAP
         USING SCA,R11        SPIE CONTROL AREA ADDRESSABILITY
         USING RPIEPICA,R3    RECOVERY PIE PICA ADDRESSABILITY @ZA12729
         USING RBSECT,R7      RB ADDRESSABILITY              @ZA12729
*        R12                  WORK REG
*        R13                  CHECKPOINT/RESTART 72 BYTE SAVE AREA
*        R14                  RETURN ADDRESS REG
*        R15                  RETURN CODE REGISTER
         LR    R9,R1          SAVE THE SSCR ADDRESS
         LH    R10,SSCRHDRL   GET OFFSET TO THE DATA AREA
         ALR   R10,R9         OBTAIN ADDRESS OF THE DATA AREA
         L     R4,PSATOLD     GET THE CURRENT TCB ADDRESS
TEST12   EQU   *
         TM    SSCRFLG1,SSCRCKRS   1=CHECKPT 0=RESTART
         BZ    SPRSTRT        GO TO RESTART
*                             IT'S A CHECKPOINT
         SR    R0,R0          CLEAR FOR STORE
         STH   R0,SSCRDATL    SET DATA LENGTH TO ZERO
         L     R11,TCBPIE     GET THE SCA POINTER
         LA    R11,ZERO(R11)  CLEAR THE TCBPMASK
         LTR   R11,R11        Q. IS THERE AN SCA
         BZ    SPDONE         A. NO. RETURN
         MVC   DATAFLG6(ONE),TCBFLGS6   SAVE THE TCBPIE17 BIT
         NI    DATAFLG6,TCBPIE17   TURN OFF ALL BUT PIE17 BIT
         MVC   DATAPMSK(ONE),TCBPMASK  SAVE THE PROG MASK
         MVC   DATASCA(SCALEN1),SCA  PUT SCA INTO DATA AREA
         LA    R12,RPPLEN     INITIALIZE LENGTH ACCUM.      @ZA12729
         LA    R2,ONE         INITIALIZE INDEX VALUE        @ZA12729
         L     R3,SCARPPTR    GET TOP RPIEPICA              @ZA12729
         L     R5,RPPPRB      GET RB POINTER FROM RPP       @ZA12729
         L     R7,TCBRBP      GET TOP RB POINTER            @ZA12729
LOOPRB   CR    R5,R7          Q. RB POINTERS MATCH          @ZA12729
         BE    EQUAL          A. YES                        @ZA12729
         TM    RBSTAB2,RBTCBNXT   Q.RB POINT TO TCB         @ZA12729
         BO    RBQEND             A. YES                    @ZA12729
         LA    R2,ONE(,R2)    INCREMENT INDEX VALUE         @ZA12729
         L     R7,RBLINK-RBSECT(,R7)   GET NEXT RB POINTER  @ZA12729
         LA    R7,ZERO(,R7)   CLEAR HIGH BYTE               @ZA12729
         B     LOOPRB         GO CHECK FOR MATCH            @ZA12729
EQUAL    MVC   DATARPP(RPPLEN),RPIEPICA SAVE RPIEPICA       @ZA12729
         LA    R8,DATARPP-DATA(,R10)    GET DATARPP ADDRESS   @ZA12729
         ST    R2,RPPPRB-RPIEPICA(,R8)   SAVE INDEX IN RPPPRB  @ZA12729
         L     R3,RPPNPTR     GET NEXT RPIEPICA             @ZA12729
         LTR   R3,R3          Q. ANY MORE RPIEPICAS         @ZA12729
         BZ    SAVELEN        A. NO                         @ZA12729
         LA    R12,RPPLEN(,R12) INCREMENT LENGTH            @ZA12729
         LA    R10,RPPLEN(,R10) INDEX TO NEXT DATARRP       @ZA12729
         L     R5,RPPPRB      GET RB POINTER FROM RPP       @ZA12729
         L     R7,RBLINK-RBSECT(,R7)   GET NEXT RB POINTER  @ZA12729
         LA    R7,ZERO(,R7)   CLEAR HIGH BYTE               @ZA12729
         LA    R2,ONE(,R2)    INCREMENT INDEX VALUE         @ZA12729
         B     LOOPRB         GO CHECK FOR A MATCH          @ZA12729
RBQEND   EQU   *                                           @ZA12729
         MVC   DATARPP(RPPLEN),RPIEPICA  SAVE RPP IN DATA AREA @ZA12729
         LA    R8,DATARPP-DATA(,R10)   GET LAST DATA RPP ADDR @ZA12729
         ST    R0,RPPNPTR-RPIEPICA(,R8)    ZERO CHAIN FIELD   @ZA12729
         ST    R0,RPPPRB-RPIEPICA(,R8)     ZERO RB POINTER    @ZA12729
SAVELEN  LA    R0,ONE+ONE+SCALEN1 GET SCA LENGTH USED       @ZA12729
         AR    R0,R12         GET TOTAL LENGTH SCA + RPP    @ZA12729
         STH   R0,SSCRDATL        DITTO
         LA    R10,SSCRDATA-SSCR(,R9) DATA AREA ADDRESS     @ZA12729
         ST    R12,DATARPPL       SAVE LENGTH RPP DATA AREA @ZA12729
         B     SPDONE         CHECKPT ACCOMPLISHED
         EJECT
*                             IT'S A RESTART
SPRSTRT  EQU   *              DITTO
         GETMAIN  RU,LV=SCALEN1,SP=245  GET A NEW SCA
TEST13   EQU   *
         LR    R11,R1         SAVE THE SCA
         MVC   SCA(SCALEN1),DATASCA  RESTORE THE OLD SCA
         STCM  R11,M0111,TCBPIE+ONE  RECHAIN
         MVC   TCBPMASK(ONE),DATAPMSK  RESTORE THE PROGRAM MASK
         NI    DATAFLG6,TCBPIE17  ZERO ALL BUT PIE 17
         OC    TCBFLGS6(ONE),DATAFLG6  RESTORE TCBPIE17 BIT
         SLR   R0,R0                ZERO REG FOR STORE      @ZA12729
         ST    R0,SCAFRPPQ          CLEAR FREE QUEUE PTR    @ZA12729
         L     R2,DATARPPL    GET RPP DATA AREA LENGTH      @ZA12729
GETNEW   GETMAIN RU,LV=(R2),SP=253  GET NEW RPIEPICA       @ZA12729
         LR    R3,R1          SAVE ADDRESS                 @ZA12729
         ST    R3,SCARPPTR        SAVE NEW RPIEPICA HEADER  @ZA12729
         LA    R12,ONE            INITIALIZE INDEX VALUE    @ZA12729
         L     R7,TCBRBP          GET TOP RB ON QUEUE       @ZA12729
MOVERPP  MVC   RPIEPICA(RPPLEN),DATARPP RESTORE RPP FROM DATA  @ZA12729
         L     R5,RPPPRB          GET INDEX VALUE FROM RPP  @ZA12729
         C     R5,ZEROS           Q. INDEX VALUE ZERO       @ZA12729
         BE    SPDONE             A. YES                    @ZA12729
LOOPI    CR    R5,R12             Q. INDEX VALUES MATCH     @ZA12729
         BE    EQUALI             A. YES                    @ZA12729
         L     R7,RBLINK-RBSECT(,R7)     GET NEXT RB       @ZA12729
         LA    R7,ZERO(,R7)       CLEAR HIGH BYTE           @ZA12729
         LA    R12,ONE(,R12)      INCREMENT INDEX VALUE     @ZA12729
         B     LOOPI              GO CHECK FOR INDEX MATCH  @ZA12729
EQUALI   ST    R7,RPPPRB          SAVE NEW RBPTR            @ZA12729
         L     R2,RPPNPTR         GET NEXT RPP              @ZA12729
         LTR   R2,R2              Q. ANY MORE RPIEPICAS     @ZA12729
         BZ    SPDONE             A. NO - FINISHED          @ZA12729
         LA    R10,RPPLEN(,R10)   GET NEXT DATA AREA RPP    @ZA12729
         LA    R2,RPPLEN(,R3)     GET LENGTH OF RPIEPICA    @ZA12729
         ST    R2,RPPNPTR         CHAIN RPIEPICA            @ZA12729
         LR    R3,R2              GET NEXT NEW AREA RPP ADDR @ZA12729
         L     R7,RBLINK-RBSECT(,R7) GET NEXT RB ON QUEUE   @ZA12729
         LA    R7,ZERO(,R7)       CLEAR HIGH BYTE           @ZA12729
         LA    R12,ONE(,R12)      INCREMENT INDEX VALUE     @ZA12729
         B     MOVERPP            GO RESTORE RPIEPICA       @ZA12729
*                             RESTART ACCOMPLISHED
SPDONE   EQU   *              RETURN
         LM    R14,R12,TWELVE(R13)  RESTORE REGISTERS.
         SR    R15,R15        RETURN CODE OF 0.
         BR    R14            RETURN
         TITLE 'IEAVTB00...IGC00040...EXTRACT  PROCESSING'
*
*        EXTRACT SERVICE ROUTINE
*        PROVIDES A MEANS TO GET TO ADDRESSES ETC.
*        WITHOUT CHASING VARIOUS SYTEM QUEUES.
*
IGC00040 DS    0D             SVC ENTRY TO EXTRACT
         USING *,R6           TEMPORARY BASE REG
         L     R6,BASE        SETUP EXTRACT'S PERMANENT BASE REG
         USING IGC0001D,R6    OBTAIN ADDRESSABILITY
         B     EXSVC          GO TO SVC CODE
*        R0 THRU R3           ARE WORK REGISTERS
         USING TCB,R4         TCB REGISTER
         USING RBSECT,R5      RB REGISTER
*        R6                   IS THE BASE REGISTER ADDTESS
         USING ASCB,R7        ASCB REGISTER
         USING ANSLIST,R8     ANSWER LIST REGISTER
*        R9                   IS THE EXTRACT LIST'S TCB ADDR
*        R10                  IS THE EXTRACT LIST'S BIT MAP
*        R11                  IS NOT USED BY EXTRACT
*        R12 CONTAINS INPUT TO THE FRR SHOULD AN ABEND OCCUR5
*        R13                  CONTAINS THE USER PROTECT KEY
*        R14                  IS THE RETURN ADDRESS (DON'T CLOBBER)
*        R15                  IS A WORK REGISTER
*
         ORG   IGC00040+8     BRANCH E.P. IS SVC E.P. PLUS 8
*
*        BRANCH ENTRY POINT FOR EXTRACT
         SPACE 3
IEAVEXTR EQU   *              EXTRACT BRANCH E.P.
         SPACE 3
         BALR  R6,R0          TEMPORARY BASE REGISTER
         USING *,R6           DITTO
         L     R6,BASE        SETUP EXTRACT'S BASE REGISTER
         USING IGC0001D,R6    PERMANENT BASE FOR EXTRACT.
         SR    R13,R13        SET CALLER'S KEY TO KEY 0.
         B     EXCOMMON       GO TO COMMON CODE FOR BRANCH AND SVC
         DC    CL8'IGC00040'  EXTRACT'S I.D.
EXSVC    EQU   *              SVC ENTRY SETUP
         L     R13,RBLINK-RBSECT(R5)  GET CALLER'S RB
         IC    R13,RBOPSWKY-RBSECT(R13)  GET CALLER'S KEY
         N     R13,FFFFFFF0   CLEANSE KEY
EXCOMMON EQU   *              COMMON CODE FOR BOTH SVC AND BRANCH ENTRY
         L     R7,PSAAOLD     SET THE ASCB ADDRESS(BRANCH ENTRY NEEDS)
TEST14   EQU   *
         SR    R12,R12        RESET FRR INPUT REGISTER.
         LR    R10,R1         SAVE EXTRACT INPUT PARM LIST
         LA    R15,EXFRR      GET FRR ADDRESS
         SETFRR A,FRRAD=(R15),WRKREGS=(R1,R2)  SET UP FRR ENVIRONMENT
TEST15   EQU   *
         LR    R2,R13         SETUP USER KEY
         MODESET KEYADDR=(2)  SWITCH INTO CALLER KEY
TEST16   EQU   *
         L     R12,EX228      PCK WILL CONVERT TO '228' IN FRR
         LM    R8,R10,EXTLANSP-EXTL(R10) GET THE CONTENTS OF THE LIST
         SR    R12,R12        RESET MAINLINE TO FRR COMMUNICATION
         N     R10,FFF00000   ZERO GARBAGE 'MAP' BITS.
         LA    R9,ZERO(R9)    CLEAR THE TCB HIGH BYTE
         LTR   R9,R9          Q. IS THERE A TCB
         LR    R1,R4          PASS CORRECT TCB AD TO 'EXTCB'
         BZ    EXTCB          A. NO. USE CURRENT
         L     R12,EX228      PCK WILL CONVERT TO '228'ABEND   @YM02740
         L     R9,ZERO(,R9)   GET ADDRESS OF TCB               @YM02740
         SR    R12,R12        RESET FRR COMMUNICATION          @YM02740
         LA    R9,ZERO(,R9)   CLEAR                            @YM02740
         LR    R1,R4          SET FIRST                        @YM02740
EXLOOP1  EQU   *              TCB  SEARCH
         LR    R3,R1          INIT REG                         @YM02740
         L     R1,TCBLTC-TCB(,R3)      GET DAUGHTER            @YM02740
EXSCI1   LTR   R1,R1          IS THER ONE                      @YM02740
         BZ    EXNEXTQ        NO, FIND NEXT
         CLR   R1,R9          Q. MATCH
         BE    EXTCB          A. YES. A.O.K.                   @YM02740
         B     EXLOOP1        GET NEXT                         @YM02740
EXNEXTQ  L     R1,TCBNTC-TCB(,R3)   NEXT SISTER                @YM02740
         CLR   R4,R3          CHECK FOR END                    @YM02740
         BE    EXABEND        A. YES. INVALID TCB ADDRESS PASSED.
         L     R3,TCBOTC-TCB(R3) GET MOTHER                    @YM02740
         B     EXSCI1         LOOP                             @YM02740
EXTCB    EQU   *              R1 CONTAINS THE PROPER TCB.
         LR    R9,R1          SAVE THE PROPER TCB.
*GRS
         LA    R2,TCBGRS-TCB(R9)  GET ADDRESS OF GEN PURPOSE REGS
         BAL   R3,EXSTORE     STORE IF REQUESTED.
*FRS
         LA    R2,TCB-TCBFRS  NEGATIVE DISPLACEMENT FOR FRS
         LNR   R2,R2          MAKE IT NEGATIVE
         AR    R2,R9          RESULT IS ADDRESS OF FLOATING PT REGS
         BAL   R3,EXSTORE     STORE IF REQUESTED
*RES
         SR    R2,R2          RESULT ALWAYS ZERO(FIELD OBSOLETE)
         BAL   R3,EXSTORE     STORE IF REQUESTED.
*AETX
         L     R2,TCBIQE-TCB(R9)  OBTAIN INTERRUPT QUEUE ELEMENT
         LTR   R2,R2          Q. IS THERE ONE
         BZ    EXAETX         A. NO. STORE ZERO , IF REQUESTED.
         L     R2,IQEIRB-IQESECT(R2)  OBTAIN THE I.R.B.
         L     R2,RBEP-RBSECT(R2)  GET THE ASYNC EXIT E.P.
EXAETX   BAL   R3,EXSTORE     STORE THE RESULT ,IF REQUESTED.
*PRI
         SR    R2,R2          CLEAR FOR INSERT
         ICM   R2,M0011,TCBLMP-TCB(R9)  LIMIT AND DISPATCHING PRIORITY
         BAL   R3,EXSTORE     STORE RESULT, IF REQUESTED
*CMC
         L     R2,TCBCMP-TCB(R9)  OBTAIN THE COMPLETION CODE.
         BAL   R3,EXSTORE     STORE THE RESULT, IF REQUESTED.
*TIOT
         L     R2,TCBTIO-TCB(R9)  LOAD TIOT ADDRESS
         BAL   R3,EXSTORE     STORE IF REQUESTED.
*COMM
         L     R1,TCBJSCB-TCB(R9) OBTAIN THE JOB STEP TCB ADDR.
         LTR   R2,R1          Q. IS THERE A JSCB
         BZ    EXCOMM         A. NO. STORE ZERO, IF COMM REQUESTED.
         L     R2,JSCBCSCB-IEZJSCB(R1)  GET THE COMMAND SCHED CNTRL BLK
         LA    R2,CHECBP-CSCB(R2)   LOAD ECB/CIB PTR LIST ADDRESS
EXCOMM   BAL   R3,EXSTORE     STORE RESULT, IF REQUESTED.
*TSO
         L     R1,ASCBTSB-ASCB(R7)   GET THE TIME SHARING BLOCK.
         LA    R2,EXNOTTSO    ADDR OF BYTE IN WHICH THE HIGH BIT IS 0
         LTR   R1,R1          Q. IS THIS A TIME SHARING ADDR SPACE
         BZ    EXTSO          A. NO. STORE THE ADDR OF DC X'00'
         LA    R2,EXISTSO     ADDR OF BYTE IN WHICH THE HIGH BIT IS 1
EXTSO    BAL   R3,EXSTORE     STORE THE RESULT, IF REQUESTED.
*PSB
         L     R1,TCBJSCB-TCB(R9)   OBTAIN THE JSCB
         LTR   R2,R1          Q. IS THERE A JSCB
         BZ    EXPSCB         A. NO STORE ZERO IF REQUESTED.
         L     R2,JSCBPSCB-IEZJSCB(R1)   GET THE PROTECTED STEP C.B.
EXPSCB   BAL   R3,EXSTORE     STORE RESULT, IF REQUESTED.
*TJID
         L     R1,ASCBTSB-ASCB(R7)  GET THE TIME SHARING BLOCK.
         LTR   R2,R1          Q. IS THIS A TIME SHARING ADDR SPACE
         BZ    EXTJID         A. NO STORE ZERO, IF REQUESTED.
         SR    R2,R2          ZERO FOR INSERT
         ICM   R2,M0011,ASCBASID  GET THE ASID.
EXTJID   BAL   R3,EXSTORE     STORE THE RESULT, IF REQUESTED.
*ASID
         ICM   R2,M0011,ASCBASID  GET THE ASID AGAIN
         BAL   R3,EXSTORE     STORE ASID , IF REQUESTED.
         MODESET  EXTKEY=SUPR   BACK TO KEY 0.
TEST17   EQU   *
         SETFRR  D,WRKREGS=(R1,R2)  DELETE FRR.
TEST18   EQU   *
         L     R3,CVTPTR      MUST RETURN W/CVT ADDRESS IN R3
TEST19   EQU   *
*        R4 MUST REMAIN THE SAME
*        R14 MUST REMAIN THE SAME
         BR    R14            RETURN
EXABEND  MODESET  EXTKEY=SUPR   BACK TO KEY 0.                 @YM03566
         SETFRR D,WRKREGS=(R1,R2)                              @YM03566
*                             DELETE FRR PRIOR TO ABEND
         L     R1,EX328       ABEND CALLER FOR BAD TCB ADDRESS
         ABEND (1),DUMP,,SYSTEM  ABEND THE CALLER
TEST20   EQU   *
EXSTORE  EQU   *              STORE THE RESULT, IF MASK BIT SAYS SO.
         ALR   R10,R10        SHIFT LEFT AND TEST CARRY
         BCR   NOCARRY,R3     NOT REQUESTED,RETURN.
         L     R12,EX128      ABEND CODE FOR BAD ANS LIST
         ST    R2,ZERO(R8)    STORE ANS. INTO SLOT IN LIST
         SR    R12,R12        RESET ABEND CODE
         LA    R8,FOUR(R8)    BUMP ANS. LOCATION
         BR    R3             RETURN
TEST21   EQU   *
         EJECT
*        EXTRACT'S FRR
EXFRR    EQU   *              EXTRACT'S FRR
         USING SDWA,R1        R1 INPUT FROM RTM
         BALR  R6,ZERO        TEMPORARY BASE
         USING *,R6           DITTO
         L     R6,BASE        GET THE BASE FOR THIS MODULE
         USING IGC0001D,R6    DITTO
         L     R0,SDWAABCC    GET CURRENT ABEND CODE.
         TM    SDWAFLGS,SDWAPCHK  WAS IT A PROGRAM CHECK
         BZ    EXSETRP        NO. CONTINUE WITH TERMINATION.
         LA    R2,EXTABLE-FOUR  SEARCH THRU TABLE FOR ABEND CODE
         LA    R3,EXSTOP      GET THE STOPPER ADDRESS
EXLOOP   EQU   *              LOOP THRU ABEND CODE LIST
         LA    R2,FOUR(R2)    POINT TO CURRENT WORD IN LIST
         CR    R2,R3          Q. IS THIS THE END.
         BE    EXSETRP        A. YES. CONTINUE WITH THE SAME ABEND CODE
         CLC   SDWAGR12(FOUR),ZERO(R2)  Q. DID MAINLINE PASS A CODE
         BNE   EXLOOP         LOOP UNTIL MATCH OR END OF LIST.
         L     R0,ZERO(R2)    MATCH.  ABEND USING THIS CODE.
         ST    R0,SDWAABCC    SET CODE
         SETRP RC=0,RECORD=NO      SET RTM PARMS               @YM03566
         SR    R15,R15             CLEAR                       @YM03566
         BR    R14                 RETRUN                      @YM03566
EXSETRP  EQU   *              SET CODE AND RETURN TO RTM.
         SETRP RC=0           RETURN TO RTM. CONTINUE W/TERMINATION
         SR    R15,R15        RETURN CODE OF 0
         TITLE 'IEAVTB00...CONSTANTS AND EQUS'
         BR    R14            RETURN
TEST22   EQU   *
         EJECT
*        EQUALS
R0       EQU   0              REGISTER 0
R1       EQU   1              REGISTER 1
R2       EQU   2              REGISTER 2
R3       EQU   3              REGISTER 3
R4       EQU   4              REGISTER 4
R5       EQU   5              REGISTER 5
R6       EQU   6              REGISTER 6
R7       EQU   7              REGISTER 7
R8       EQU   8              REGISTER 8
R9       EQU   9              REGISTER 9
R10      EQU   10             REGISTER 10
R11      EQU   11             REGISTER 11
R12      EQU   12             REGISTER 12
R13      EQU   13             REGISTER 13
R14      EQU   14             REGISTER 14
R15      EQU   15             REGISTER 15
         SPACE 3
M1000    EQU   B'1000'        MASK FOR ICM - HI BYTE
M0100    EQU   B'0100'        MASK FOR ICM - 2ND BYTE
M0010    EQU   B'0010'        MASK FOR ICM - 3RD BYTE
M0001    EQU   B'0001'        MASK FOR ICM - LO BYTE
M0011    EQU   B'0011'        MASK FOR ICM - LO 2 BYTES
M0111    EQU   B'0111'        MASK FOR ICM - LO 3 BYTES
CARRY    EQU   3              BRANCH CODE
NOCARRY  EQU   12             BRANCH CODE
         SPACE 3
ZERO     EQU   0              ZERO
ONE      EQU   1              ONE
TWO      EQU   2              TWO
FOUR     EQU   4              4
L4       EQU   4              LENGTH OF FOUR               @ZA06785
TWELVE   EQU   12             TWELVE
XFF      EQU   X'FF'          ALL BITS ON MASK
         EJECT
*        CONSTANTS
ZEROS    DC    F'0'           FULL WORD OF ZEROS               @ZA12729
PURGLIST PURGEDQ RMTR=SPIERMTR,MF=L     PARAMETERS FOR PURGEDQ @ZA29414
BASE     DC    A(IGC0001D)    BASE FOR THIS MODULE.
EXTABLE  EQU   *              ABEND CODE TABLE FOR FRR SEARCH
EX128    DC    X'80128000'    ABEND CODE 128
EX228    DC    X'80228000'    ABEND CODE 228
EXSTOP   EQU   *              TABLE END
EX328    DC    X'00000328'    ABEND CODE 328
SPTABLE  EQU   *              ABEND CODE TABLE FOR FRR SEARCH
SP10E    DC    X'8010E000'    ABEND CODE 10E
SP20E    DC    X'8020E000'    ABEND CODE 20E
SPSTOP   EQU   *              END OF TABLE ADDRESS
SP30E    DC    X'0000030E'    ABEND CODE 30E
FF0F0FFF DC    X'FF0F0FFF'    MASK FF0F0FFF
FFFFFFF0 DC    X'FFFFFFF0'    MASK FFFFFFF0
FFF00000 DC    X'FFF00000'    MASK FFF00000
FF0FFFFF DC    X'FF0FFFFF'    MASK FF0FFFFF
FFF0FFFF DC    X'FFF0FFFF'    MASK FFF0FFFF
FFFFFF0F DC    X'FFFFFF0F'    MASK FFFFFF0F
HIGHBIT  DC    X'80000000'    MULTI USE WORD.
HZERO    EQU   HIGHBIT+TWO    HALFWORD CONTAINING ZERO
EXNOTTSO DC    X'00'          BYTE WITH HI BIT OFF TO SAY NOT TSO
EXISTSO  DC    X'80'          BYTE WITH HI BIT ON TO SAY TSO
*                            RECOVERY RPIEPICA DSECT          @ZA06785
RPIEPICA DSECT                                                @ZA06785
RPPNPTR  DS   A              ADDRESS OF NEXT RPIEPICA         @ZA06785
RPPPRB   DS    A             ADDRESS OF ISSUING RB            @ZA06785
RPPPIE   DS    A             ADDRESS OF ASSOCIATED PIE        @ZA06785
RPPPICA  DS    A             ADDRESS OF ASSOCIATED PICA       @ZA06785
RPPLEN   EQU *-RPIEPICA      LENGTH OF RPIEPICA               @ZA06785
      TITLE  'IEAVTB00...IHASCA - SPIE CONTROL AREA'
      IHASCA
      TITLE 'IEAVTB00...IHASRB - SERVICE REQUEST BLOCK'
      IHASRB
SRBLEN   EQU   *-SRB          LENGTH OF SRB
SCALEN1  EQU   SCALEN+SRBLEN  LENGTH OF THE SCA INCLUDING SRB
*                             CHECK POINT DATA DSECT
SSCR     DSECT
SSCRID   DS    X              CHECKPOINT RECORD ID
SSCRSSID DS    X              SPIE I.D.
SSCRHDRL DS    H              OFFSET TO DATA FIELD
SSCRFCHN DS    A              CHAIN TO NEXT SSCR
SSCRFLG1 DS    X              FLAGS
SSCRCKRS EQU   X'80'          1=CHECKPOINT,0=RESTART
         DS    X              RESERVED
SSCRDATL DS    H              DATA LENGTH
SSCRDCBA DS    A              ADDRESS OF ASSOCIATED DCB
SSCRDATA DS    0C             DATA STARTS HERE
DATA     DSECT
DATAFLG6 DS    X              SAVE AREA FOR TCBFLGS6
DATAPMSK DS    X              SAVE AREA FOR TCBPMASK
DATASCA  DS    XL(SCALEN1)    SAVE AREA FOR SCA      @ZA12729
DATARPPL DS    F              LENGTH OF RPP DATA AREA     @ZA12729
DATARPP  DS    0F             SAVE AREA FOR RPIEPICAS @ZA12729
EXTL     DSECT
EXTLANSP DS    A              ADDRESS OF ANSWER LIST
EXTLTCBP DS    A              ADDRESS OF WORD WITH TCB ADDRESS
EXTLMAP  DS    4X             MASK BITS FOR EXTRACT INFORMATION
ANSLIST  DSECT
         DS    1F             VARIABLE LENGTH ANS LIST.
         TITLE 'IEAVTB00...IHAPIE - PROGRAM ITERRUPT ELEMENT'
         IHAPIE
PIELEN   EQU   *-PIE
         TITLE 'IEAVTB00...IHAIQE - INTER. QUEUE ELEMENT'
         IHAIQE
CSCB     DSECT
         TITLE 'IEAVTB00...IEECHAIN - CON. SCHED. CONTROL BLOCK'
         IEECHAIN
         TITLE 'IEAVTB00...IEZJSCB - JOB/STEP CONTROL BLOCK'
         IEZJSCB
         TITLE 'IEAVTB00...IHAPICA - PROG. INTER. CONTROL AREA'
         IHAPICA
         TITLE 'IEAVTB00...IKJTCB - TASK CONTROL BLOCK'
         IKJTCB
         TITLE 'IEAVTB00...IKJRB - REQUEST BLOCK'
         IKJRB
RBOPSWKY EQU   RBOPSW+1       PSW KEY
AMWP     EQU   1              AMWP OFFSET INTO PSW
PBIT     EQU   1              PROBLEM BIT IN AMWP
RBOPSWMK EQU   RBOPSW+2       RB SWMK
         TITLE 'IEAVTB00...IHAASCB - ADDR. SPACE CONTROL BLOCK'
         IHAASCB
         TITLE 'IEAVTB00...IHAPSA - PREFIXED SAVE AREA'
         IHAPSA
         TITLE 'IEAVTB00...CVT - COMMUNICATIONS VECTOR TABLE'
         CVT   DSECT=YES
         TITLE 'IEAVTB00...IHASDWA - STAE DIAG. WORK AREA'
         IHASDWA
         TITLE 'IEAVTB00...IHAFRRS - FUNC. RECOV. TRN. STACK'
         IHAFRRS
         TITLE 'IEAVTB00...IHARMPL - RES. MANAG. PARM LIST'
         IHARMPL
         CSECT
IEAVTBP  DC    XL50'00'                PATCH AREA
         END   IGC00040
