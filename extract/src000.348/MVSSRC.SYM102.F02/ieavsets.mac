         TITLE 'IEAVSETS...AOS/2...PROLOG'
IGC079   CSECT
         USING *,R6                 BR AROUND MODID
IGC079   MODID BR=YES               STATUS MACRO'S SERVICE ROUTINE
         SPACE
* STATUS - - CHANGE LEVEL 000
   SPACE
* FUNCTION
   SPACE
*      THIS TYPE 1 SVC ROUTINE ALLOWS THE MANIPULATION OF DISPATCHING
*    STATUS INFORMATION, PARTICULARLY AS IT PRETAINS TO THE
*    DISPATCHABILITY OF THE TASK.
*    KEY 0 ROUTINES MAY INVOKE STATUS EITHER THROUGH THE SVC
*    INTERFACE OR VIA A BRANCH ENTRY.  OTHER ROUTINES ARE
*    RESTRICTED TO THE SVC INTERFACE.
*      ROUTINES WITH A SUPERVISOR PROTECT KEY CAN USE THE STATUS
*    ROUTINE TO SET OR RESET THE STATUS OF PARTICULAR TASKS.  THE
*    AFFECTED TASK STATUS CAN BE EITHER THE 'MUST COMPLETE' STATUS
*    OR THE 'NONDISPATCHABILITY' STATUS.
*      FOR KEY 0 CALLERS, THE STATUS ROUTINE SETS (OR RESETS) THE
*    FOLLOWING CONDITIONS FOR A TASK OR A GROUP OF TASKS.
*      1. 'MUST COMPLETE' STATUS, SO THAT OTHER TASKS OF THE JOB STEP
*         ARE MADE NONDISPATCHABLE (OR DISPATCHABLE) WHILE
*         THE CURRENT TASK IS BEING PERFORMED.
*      2. 'NONDISPATCHABILITY' STATUS, SO THAT THE ROUTINES OF THE
*         TASKS CANNOT (OR CAN) BE RESTARTED BY THE DISPATCHER.
*      WHEN ENTERED VIA THE MACRO INSTRUCTION
*               STATUS SET,MC
*    THE STATUS ROUTINE SETS THE CALLER'S TASK IN 'STEP'
*    MUST COMPLETE STATUS.  (IF THE RESET OPERAND IS SPECIFIED,
*    THE 'MUST COMPLETE' STATUS THAT WAS PREVIOUSLY SET IS CLEARED.)
*    THE ROUTINE SETS THE 'MUST COMPLETE' FLAG IN THE CURRENT TCB,
*    THE 'PROHIBIT ASYNCHRONOUS EXITS' FLAG IN THE CURRENT TCB,
*    AND THE STEP 'MUST COMPLETE' NONDISPATCHABILITY FLAG IN
*    OTHER TCBS OF THE JOB STEP. ALL TASKS IN THE JOB STEP,
*    INCLUDING THE INITIATOR, ARE AFFECTED.  THE CALLER'S
*    TASK IS ALWAYS EXEMPT FROM THE SETTING/RESETTING OF DISPATCHABITY.
*      WHEN ENTERING VIA THE MACRO INSTRUCTION
*            STATUS SET,ND,(STEP)(SYSTEM)(TCB ADDR,(MASK)(,E))
*    THE STATUS ROUTINE SETS THE SPECIFIED PRIMARY NONDISPATCH-
*    ABILITY FLAGS TCBFLGS4 AND TCBFLGS5 (BYTES 32,33)
*    IN THE SPECIFIED SET OF TCB'S.  (IF RESET IS SPECIFIED,  THE
*    INDICATED PRIMARY NONDISPATCHABILITY FLAGS ARE CLEARED IN THE
*    SPECIFIED SET OF TCB'S.)  THREE SETS OF TASKS CAN BE SPECIFIED:
*    THE JOB STEP, A SPECIFIED TASK AND ALL ITS DESCENDANTS,
*    OR A SINGLE TASK.  IF SYSTEM IS SPECIFIED, A SYSTEM-WIDE
*    INDICATOR IS SET FOR THE DISPATCHER SO THAT ONLY ADDRESS SPACES
*    WHICH ARE MARKED EXEMPT WILL BE DISPATCHED. THE CALLER IS
*    TEMPORARILY MARKED EXEMPT. IF STEP IS SPECIFIED, ALL TASKS OF THE
*    JOB STEP ARE SET NON-DISPATCHABLE EXCEPT THE CURRENT TASK AND THE
*    JOB STEP'S INITIATOR.  IF TCB IS SPECIFIED, THE TASK AND ALL ITS
*    DESCENDANTS ARE SET NONDISPATCHABLE.  IF 'E' IS SPECIFIED,
*    ONLY THE TASK EXPLICITLY IDENTIFIED IS SET NONDISPATCHABLE.
*      WHEN ENTERED VIA THE MACRO INSTRUCTION
*           STATUS SET,SD,(STEP)(SYSTEM)(TCB ADDR,(MASK)(,E))
*    THE STATUS ROUTINE SETS THE
*    SPECIFIED SECONDARY NONDISPATCHABILITY FLAGS IN THE SPECIFIED
*    SET OF TCB'S.  (IF RESET IS SPECIFIED, THE SPECIFIED SECONDARY
*    NONDISPATCHABILITY FLAGS ARE CLEARED IN THE SPECIFIED SET OF
*    TCB'S.)  THE SECONDARY NONDISPATCHABILITY FLAGS ARE CONTAINED IN
*    TCBNDSP0, 1, 2 AND 3.
*    FOUR SETS OF TASKS CAN BE SPECIFIED:
*    THE SYSTEM, THE JOB STEP, A SPECIFIED TASK AND ALL ITS
*    DESCENDANTS, OR A SINGLE TASK.  IF SYSTEM IS SPECIFIED, A SYSTEM-
*    WIDE INDICATOR IS SET FOR THE DISPATCHER SO THAT ONLY ADDRESS
*    SPACES WHICH ARE MARKED EXEMPT WILL BE DISPATCHED. THE CALLER
*    IS TEMPORARILY MARKED EXEMPT.  IF STEP IS SPECIFIED, ALL TASKS
*    OF THE JOB STEP ARE SET NONDISPATCHABLE EXCEPT THE CURRENT
*    TASK AND THE JOB STEP'S INITIATOR.  IF A TCB ADDRESS IS SPECIFIED
*    (TCB ADDRESS,(MASK)), THE TASK AND ITS DESCENDANTS ARE SET NON-
*    DISPATCHABLE.  IF A TCB ADDRESS IS SPECIFIED, AND ONLY THE TCB
*    EXPLICITLY IDENTIFIED IS TO BE SET NONDISPATCHABLE, THE 'E'
*    PARAMETER IS USED.
*      STATUS WILL AUTOMATICALLY ADJUST THE PRIMARY NONDISPATCH-
*    ABILITY SUMMARY FLAG (TCBPNDSP) TO INDICATE IF ANY SECONDARY
*    NONDISPATCHABILITY FLAGS ARE ON.
*      WHEN ENTERED VIA THE MACRO INSTRUCTION
*           STATUS STOP,SYNCH
*    THE STATUS ROUTINE DOES ALL NORMAL 'STOP TCB' PROCESSING (FOR ALL
*    SUBTASKS OF THE CALLER). IN ADDITION, IT PUTS THE CALLER IN A WAIT
*    CONDITION UNTIL ALL STOP-PENDING CONDITIONS ARE CLEARED.
*    SUBSEQUENTLY, EXIT AND/OR EXIT PROLOGUE INTERFACE WITH
*    STATUS WHEN A DEFERED STOP IS COMPLETED TO FOR STATUS TO
*    DECREMENT THE WAIT COUNT FOR THE ISSUER.
*      WHEN ENTERED VIA THE MACRO INSTRUCTION
*           STATUS (STOP)(START),SRBS,(ASID=)
*    STATUS MAKES QUIESCEABLE SRBS NON-DISPATCHABLE AND SETS TCBS IN
*    THE ADDRESS SPACE (EXCLUDING THE CALLER) NON-DISPATCHABLE UNTIL
*    SRBS ARE RESTARTED. THE CALLER IS NOT DISPATCHED UNTIL ALL RUNNING
*    SRBS HAVE COMPLETED. FOR START, THE CONDITIONS ARE RESET. AN ASID
*    MAY BE SPECIFIED FOR START ONLY. A BRANCH ENTRY EXISTS FOR START
*    SRB AT IGC07903. SEE ENTRY INPUT FOR REQUIREMENTS.
*    A BRANCH ENTRY EXISTS AT IEAVSSNQ TO STOP NON-QUIESABLE
*    SRBS (THE SVC STOP SRB IS FOR QUIESABLE SRBS ONLY) WHICH
*    IS USED BY SWAP - OUT. SEE ENTRY INPUT FOR REQUIREMENTS.
*      A BRANCH ENTRY EXISTS WHEREBY A CALLER MAY SET HIS OWN TCB NON-
*    DISPATCHABLE. REGISTERS ARE SET UP AS USUAL FOR THE STATUS BRANCH
*    ENTRY. CODE 15 INDICATES A SD REQUEST, CODE 16 FOR ND. THE CALLER
*    IS REQUIRED TO ESTABLISH HIS RESUME PSW/REGISTER ENVIRONMENT
*    IN HIS RB/TCB.
*      PROBLEM PROGRAM CALLERS OF STATUS MAY REQUEST ONLY THE STOP/
*    STOP SYNCH, START SERVICE VIA THE MACRO INSTRUCTION
*           STATUS (STOP)(START),(TCB=TCB ADDR)(SYNCH)
*    WHEN A USER ISSUES A STATUS MACRO INSTRUCTION WITH
*    THE START OR STOP OPERAND, THE SET STATUS ROUTINE DETERMINES IF
*    THE SPECIFIED SUBTASK OF THE CURRENT TASK OR ALL SUBTASKS OF
*    THE CURRENT TASK ARE TO BE MODIFIED.  WHEN START IS SPECIFIED,
*    THE STOP/START COUNT IS DECREMENTED IN THE SUBTASK TCB(S) AND
*    THE NONDISPATCHABILITY FLAGS ARE CLEARED.  WHEN STOP IS SPECIF-
*    IED, THE STOP/START COUNT IS INCREMENTED IN THE SUBTASK TCB(S)
*    AND THE NONDISPATCHABILITY FLAGS ARE SET.  A TASK IS SET
*    NONDISPATCHABLE ONLY IF NO SYSTEM ROUTINES ARE EXECUTING FOR IT
*    AS INDICATED BY THE TCBATT FLAG.  IF A SYSTEM ROUTINE IS
*    EXECUTING FOR THE TASK, THE TCBSTPPR FLAG IS SET TO INDICATE THAT
*    THIS TASK SHOULD BE MADE NONDISPATCHABLE WHEN IT NO LONGER HAS
*    A SYSTEM ROUTINE EXECUTING.
*      SYSTEM ROUTINES MAY ALSO USE A NEW BRANCH ENTRY POINT TO
*    STATUS, IEATRSCN.  THIS SUBROUTINE WILL RETURN THE ADDR OF A
*    SINGLE SUBTASK (IF ANY) EACH TIME IT IS CALLED.  THROUGH MULTIPLE
*    CALLS TO IEATRSCN, A SYSTEMATIC SEARCH OF A SUBTASK TREE CAN
*    BE ACCOMPLISHED.
     EJECT
* ENTRY POINTS
     SPACE
*    1. IGC079  SVC ENTRY
*         ENTERED BY SYSTEM ROUTINES TO MANIPULATE THE
*         DISPATCHABILITY OF TASKS, SRBS, AND THE SYSTEM.
*         ALSO ENTERED BY PROBLEM PROGRAM ROUTINES
*         TO PERFORM THE START/STOP, STOP-SYNCH  TCB FUNCTION.
*    2. IGC07902  BRANCH ENTRY
*         ENTERED BY SYSTEM ROUTINES TO MANIPULATE THE
*         DISPATCHABILITY OF TASKS AND SRBS.
*    3. IEATRSCN  BRANCH ENTRY
*         ENTERED BY SYSTEM ROUTINES TO CAUSE A
*         SEARCH OF A SUBTASK TREE.
*    4. IGC07903 BRANCH ENTRY
*         ENTERED BY SWAP-IN TO START SRBS IN THE
*         ADDRESS SPACE TO BE SWAPPED IN.
*         (NOTE DURING SWAP-OUT ERROR PROCESSING
*          THIS ENTRY POINT IS INVOKEDTO START SRBS)
*    5. IEAVSSNQ BRANCH ENTRY
*         ENTERED BY SWAP OUT TO STOP NON-QUIESABLE
*         SRBS.
*    6. IEAVESSS BRANCH ENTRY
*         ENTERED BY EXIT AND EXIT PROLOGUE TO COMPLETE
*         STOP SYNCHRONIZED PROCESSING.
*
     SPACE
* INPUT
     SPACE
*    1. IGC079  SVC ENTRY
*        *PSW - TYPE I SVC PSW; LOCAL LOCK HELD
*         R0  - BITS 0-15 PRIMARY MASK IF ND, ELSE ASID (OPTIONAL)
*               BITS 16-31 CODE 0 - RESERVED
*                               1 - MC,STEP
*                               3 - ND,STEP
*                               4 - ND,SYSTEM
*                               5 - ND,TCB (INCLUDES SUBTASKS)
*                               6 - STOP
*                               7 - START
*                               8 - SD,STEP
*                               9 - SD,SYSTEM
*                               10 - SD,TCB (INCLUDES SUBTASKS)
*                               11 - SD,TCB ADDRESS,E
*                               12 - ND,TCB ADDRESS,E
*                               13 - SRBS
*                               14 - SYNCH
*                               15 - CALLER,SD
*                               16 - CALLER,ND
*         R1 - BIT 0  0 = SET, 1 = RESET
*              BITS 1-7  0
*              BITS 8-31 TCB ADDRESS (OPTIONAL)
*         R2,R8-R13 - IRRELEVANT
*        *R3 - ADDRESS OF CVT
*        *R4 - ADDRESS OF CALLERS TCB
*        *R5 - ADDRESS OF CALLERS RB
*        *R6 - ENTRY POINT ADDRESS (IGC079)
*        *R7 - ADDRESS OF ASCB
*        *R14 - RETURN ADDRESS (EXIT PROLOG)
*         R15 - SECONDARY MASK IF SD; ELSE ASID (OPTIONAL)
*         * = SET UP BY SVC FLIH
*    2. IGC07902  BRANCH ENTRY
*         PSW - KEY 0, SUPERVISOR STATE, LOCAL LOCK
*         R0,R1 - SAME AS FOR SVC ENTRY
*         R2-R12 - IRRELEVANT
*         R13 - SAME AS R15 IN SVC ENTRY
*         R14 - RETURN ADDRESS
*         R15 - ADDRESS OF IGC07902
*    3. IEATRSCN  BRANCH ENTRY
*         PSW - KEY 0, SUPERVISOR STATE, LOCAL LOCK
*         R0-R7,R9,R12,R13,R15 - IRRELEVANT
*         R8 - ADDRESS OF HIGHEST LEVEL TASK IN TREE TO BE SEARCHED
*         R10 - ADDRESS OF TASK FROM WHICH SEARCH IS TO START ON
*               THIS CALL TO IEATRSCN
*         R11 - RETURN ADDRESS (IF NO TCB IS FOUND)
*         R14 - RETURN ADDRESS (IF TCB IS FOUND)
*    4. IGC07903 BRANCH ENTRY                                   @Y02752
*        PSW - KEY 0, SUPERVISOR STATE, SALLOC LOCK             @Y02752
*         R0 - BITS 0-15, ASID                                  @Y02752
*              BITS 16-31, CODE 13                              @Y02752
*         R1 - BIT 0 = 1                                        @Y02752
*         R2-R12 IRRELEVANT                                     @Y02752
*         R13 - ADDRESS OF 72 BYTE SAVE AREA                    @Y02752
*         R 14 - RETURN ADDRESS                                 @Y02752
*         R15 - ADDRESS OF IGC07903                             @Y02752
*    5. IEAVSSNQ BRANCH ENTRY
*        PSW - KEY 0, SUPERVISOR STATE, LOCAL LOCK
*         R0-R13 IRRELEVANT
*         R14 - ENTRY POINT ADDRESS
*         R15 - RETURN ADDRESS
*    6. IEAVESSS BRANCH ENTRY
*        PSW - KEY 0, SUPERVISOR STATE, LOCAL LOCK
*         R0-R3, R5-R6, R8-R13 - IRRELEVANT
*         R4 -  ADDRESS OF EXITING TCB
*         R7 - ADDRESS OF ASCB
*         R14 - RETURN ADDRESS
*         R15 - ENTRY POINT ADDRESS
   SPACE 2
* OUTPUT
   SPACE
*    1. IGC079  SVC ENTRY
*       **PSW - KEY 0, SUPERVISOR STATE
*       **R0-R13 - UNPREDICTABLE
*       **R14 - UNCHANGED
*         R15 = 0 - NORMAL COMPLETION
*             = 4 - STOP/START FAILED; SPECIFIED TASK NOT A SUBTASK
*                   OF THE CALLERS TASK
*         ** = USER PSW AND R2-R14 ARE RESTORED BY EXIT PROLOG
*    2. IGC07902  BRANCH ENTRY
*         R0-R14 - UNCHANGED
*         R15 = 0 (NORMAL COMPLETION)
*    3. IEATRSCN
*         PSW - SAME STATE AS ENTERED
*         R0-R6,R8,R11-R15 - UNCHANGED
*         R7,R9 - UNPREDICTABLE
*         R10 - ADDRESS OF SELECTED TASK (IF ONE WAS FOUND)
*    4. IGC07903                                                @Y02752
*         PSW - KEY 0, SUPERVISOR STATE, SALLOC LOCK            @Y02752
*         R0-R14 UNCHANGED                                      @Y02752
*         R15 - 0 (NORMAL COMPLETEION)                          @Y02752
*    5. IEAVSSNQ
*        PSW - KEY 0, SUPERVISOR STATE, LOCAL LOCK (NOTE THAT THE
*                                  LOCAL LOCK MAY HAVE BEEN FREED IN
*                                  STATUS PROCESSING AND REOBTAINED.)
*        R0-R10, R15 - UNCHANGED
*        R11-R14 - UNPREDICTABLE
*    6. IEAVESSS
*        PSW - KEY 0, SUPERVISOR STATE, LOCAL LOCK
*        R0-R14 - UNCHANGED
*        R15 UNPREDICTABLE
     SPACE 2
* EXTERNAL REFERENCES
     SPACE
*         IEA0DS DISPATCHER
*         IEAVEMS0 MEMORY SWITCH
*         IGC044R2 CHAP RECOVERY ROUTINE
     SPACE 2
* EXITS,NORMAL
     SPACE
*    1. IGC079
*          TO CALLER VIA BR 14 TO
*         TYPE 1 EXIT TO INDICATE COMPLETION OF STATUS REQUEST.
*    2. IGC07902
*          TO CALLER VIA BR 14 TO
*         INDICATE COMPLETION OF STATUS REQUEST.
*    3. IGC07903                                                @Y02752
*          TO CALLER VIA BR 14 TO                               @Y02752
*          INDICATE COMPLETION OF REQUEST                       @Y02752
*    4.  IEATRSCN
*         TO CALLER VIA BR 11 IF NO TASK WAS FOUND IN THE TREE
*         TO CALLER VIA BR 14 IF A TASK WAS FOUND IN THE TREE.
*    5. IEAVESSS                                                @Y02752
*          TO CALLER VIA BR 14 TO                               @Y02752
*          INDICATE COMPLETION OF REQUEST                       @Y02752
*    5. IEAVSSNQ                                                @Y02752
*          TO CALLER VIA BR 15 TO                               @Y02752
*          INDICATE COMPLETION OF REQUEST                       @Y02752
       SPACE 2
* EXITS,ERROR =
*
*    1.  AT THE LABEL 'ABEND14F' THE IMPROPER
*         CALLER IS ABENDED.
       SPACE 2
   SPACE 2
* ATTRIBUTES
     SPACE
*     LOCAL LOCK, KEY 0, SUPERVISOR STATE
     SPACE
*    AOS/2 SYSTEMS
         SPACE 2
* CHARACTER CODE DEPENDENCY -- NONE
         SPACE 2
* NOTES
         SPACE
*    NOTE ***  ALL MANIPULATION OF PRIMARY AND SECONDARY DISPATCH-
*    ABILITY INFORMATION SHOULD BE DONE VIA THE STATUS INTERFACE.
*    NOTE ***  KEY 0 CALLERS OF STATUS SHOULD ENSURE THAT THEIR
*    REQUESTS ARE CONSISTENT WITH SYSTEM INTEGRITY, SINCE THEIR
*    REQUESTS ARE NOT VALIDITY CHECKED.
         SPACE
* CHANGE-ACTIVITY
         SPACE
*    OZ14227-NO CODE CHANGE. JUST A PTF PROBLEM.               @ZA30358
*    OZ20174-IMPROPER SERIALIZATION BETWEEN STATUS, DISPATCHER @ZA30358
*            AND TCTL. STATUS AND DISPATCHER REPLACE NI INSTR  @ZA30358
*            WITH CS.                                          @ZA30358
*    OZ30358-FORMERLY, SIGPCPUS WAS CALLED ONLY WHEN STATUS    @ZA30358
*            STOP OR SET WAS PROCESSED. HOWEVER IT IS ALSO     @ZA30358
*            NECESSARY TO CLEAR OUT OTHER TASKS WHEN STATUS    @ZA30358
*            START OR RESET IS BEING PROCESSED. IF A TASK      @ZA30358
*            BEING STARTED OR RESET IS ACTUALLY ACTIVE ON THE  @ZA30358
*            OTHER PROCESSOR, THE FOLLOWING MAY OCCUR:         @ZA30358
*             1. STATUS DECREMENTS ASCBTCBS, BECAUSE THE TASK  @ZA30358
*                IS DISPATCHABLE.                              @ZA30358
*             2. THE OTHER TASK ENTERS PAGE WAIT.              @ZA30358
*             3. BECAUSE THE TASK IS NOW NON-DISPATCHABLE,     @ZA30358
*                STATUS WILL FAIL TO INCREMENT ASCBTCBS. THIS  @ZA30358
*                IS INCORRECT.                                 @ZA30358
*            IT IS NOT NECESSARY TO CALL SIGPCPUS FOR          @ZA30358
*            STATUS RESET,SMC BECAUSE ASCBTCBS IS NOT          @ZA30358
*            DECREMENTED THEN.                                 @ZA30358
*            IT IS NOT NECESSARY TO CALL SIGPCPUS FOR          @ZA30358
*            STATUS START,SRBS BECAUSE NO PROCESSING IS DONE   @ZA30358
*            THERE IF STATUS STOP,SRBS IS NOT IN EFFECT.       @ZA30358
*    OZ32105-AN INTERLOCK WAS POSSIBLE IF THE CALLER HOLDS A   @ZA32105
*        SPIN LOCK BECAUSE IEAVSETS WILL LOOP ON ASCBCPUS AS   @ZA32105
*        LONG AS AN ACTIVE TASK IN THE SAME ADDRESS SPACE      @ZA32105
*        IS SPINNING TO OBTAIN THE SAME SPIN LOCK. THE PROBLEM @ZA32105
*        DESCRIBED BY THIS SPECIFIC APAR WILL BE SOLVED BY     @ZA32105
*        HAVING IEAVSETS NOT LOOP ON ASCBCPUS IF IT IS         @ZA32105
*        CHANGING DISPATCHABILITY FOR A SINGLE TASK AND THAT   @ZA32105
*        TASK IS NOT ACTIVE.                                   @ZA32105
         TITLE 'IEAVSETS...AOS/2...COMMUNICATION VECTOR TABLE C.V.T.'
         CVT   DSECT=YES
         TITLE 'IEAVSETS...AOS/2...PSA'
         IHAPSA
         TITLE 'IEAVSETS...AOS/2...LCCA'
         IHALCCA
         TITLE 'IEAVSETS...AOS/2...PCCA'
         IHAPCCA
         TITLE 'IEAVSETS...AOS/2...TCB'
         IKJTCB
         TITLE 'IEAVSETS...AOS/2...RB'
         IHARB
         TITLE 'IEAVSETS...AOS/2...SRB'
         IHASRB
         TITLE 'IEAVSETS...AOS/2...ASVT'
         IHAASVT
         TITLE 'IEAVSETS...AOS/2...ASCB'
         IHAASCB
         TITLE 'IEAVSETS...AOS/2...ASXB'
         IHAASXB
         TITLE 'IEAVSETS...AOS/2...CSD'
         IHACSD
         TITLE 'IEAVSETS...VS/2...CDAL'                        @Z40FPYK
         CDAL                                                  @Z40FPYK
         TITLE 'IEAVSETS...AOS/2...JSCB'
         IEZJSCB
         TITLE 'IEAVSETS...AOS/2...WSAVT(LOCAL)'
         IHAWSAVT
         TITLE 'IEAVSETS...AOS/2...WSA(CPU)'
         IHAWSAVT CLASS=CPU
         TITLE 'IEAVSETS...AOS/2...WSAVT(GLOBAL)'
         IHAWSAVT CLASS=GLOBAL
         TITLE 'IEAVSETS...AOS/2...FRR STACK'
         IHAFRRS
         TITLE ' IEAVSETS...AOS/2...SDWA '
         IHASDWA
         TITLE 'IEAVSETS...AOS/2...WSA'
         SPACE 2
WSA      DSECT                     SAVE AREA DESECT
         DS    3X                  FIRST THREE BYTES OF R0
ACTCODE  DS    X                   ACTION CODE
         DS    14F                 R1-R14
         DS    3X                  FIRST THREE BYTES OF R15
RETNCODE DS    X                   RETURN CODE
SWITCHES DS    X                   SWITCHES
SAVMSK   DS    X                   MASK IN STNSM
RES      DS    2X                  RESERVED
STFRRSAV DS    F                   FRR SAVE AREA ADR
UNDOIT   EQU   X'80'               RESET SW
PRIMARY  EQU   X'40'               PRIMARY NON-DISP SW
EXPLICIT EQU   X'20'               EXPLICIT TCB SW
BRANCH   EQU   X'10'               BRANCH ENTRY SW
XMSTATUS EQU   X'08'               XMSTATUS ENTRY SW
SYNCHTCB EQU   X'04'               SYNCH STOP TCB
*
*        STATUS FRR PARM AREA DSECT          @Y02753
*
STFRRPAR DSECT
STFRR15  DS    F                   RESERVED                     @Y02753
STFRR0   DS    3X                  RESERVED                     @Y02753
STFRAC   DS    X                   RESERVED                     @Y02753
STFRR1   DS    F                   RESERVED                     @Y02753
STFRCURR DS    F                   RESERVED                     @Y02753
STFRPREV DS    F                   RESERVED                     @Y02753
STFRE13  EQU   STFRPREV            RESERVED                     @Y02753
STFRSVSB EQU   STFRPREV            SRB ADDR SAVE AREA           @Y02753
STFRFLG  DS    X                   FLAG BYTE                    @Y02753
STFRSALL EQU   X'10'               START SRB CALLER OWNED SALLC @Y02753
REFRR    EQU   X'08'               STR SRB SRB FRR FLAG         @Y02753
STBRSRB  EQU   X'04'               STRT SRB BR EN FLAG          @Y02753
STFRSWIN EQU   X'02'               CALLED BY SWAP-IN           @YM08338
STFRREXV DS    X                   RESERVED                     @Y02753
STFRCTH  DS    0H                  RESERVED                     @Y02753
STFRCTB0 DS    X                   RESERVED                     @Y02753
STFRCTB1 DS    X                   RESERVED                     @Y02753
         TITLE 'IEAVSETS...AOS/2...EQUATES'
IGC079   CSECT
         SPACE 2
*   REGISTER ASSIGNMENT
R0       EQU   0                   .PARAMETER REG
R1       EQU   1                   .PARAMETER REG
R2       EQU   2                   .STATUS INTERNAL LINK REG
R3       EQU   3                   .CVT POINTER
R4       EQU   4                   .CALLERS TCB
R5       EQU   5                   .SAVE AREA BASE ADDR
R6       EQU   6                   .STATUS BASE REG
R7       EQU   7                   .ADDR OF TREESCAN RTN
R8       EQU   8                   .TCB ADDR WORK REG
R9       EQU   9                   .TCB ADDR WORK REG
R10      EQU   10                  .SEARCHED FOR AND FOUND TCB
R11      EQU   11                  .ADDR OF 'SCAN COMPLETE' EXIT
R12      EQU   12                  .STATUS WORK REG
R13      EQU   13                  .FRR WORK AREA BASE ADDR
R14      EQU   14                  .STATUS INTERNAL LINK REG
R15      EQU   15                  .BR ENTRY BASE AND WORK REG
*
*        FRR REGISTERS
*
STSDWAR1 EQU   1                   SDWA POINTER REG             @Y02753
STWRK1   EQU   2                   WORK REG 1                   @Y02753
STPADP   EQU   13                  POINTER TO 6 WORD PARM AREA  @Y02753
STEPR    EQU   15                  ENTRY REG                    @Y02753
STRETR   EQU   14                  RETURN REG                   @Y02753
STBASE   EQU   6                   BASE REG                     @Y02753
STCODE   EQU   15                  RETURN CODE REG              @Y02753
STWRK2   EQU   3                   WORK REG 2                   @Y02753
STWRK3   EQU   11                  WORK REG 3                   @Y02753
STWSA    EQU   5                   WSA ADDR                     @Y02753
STWRK0   EQU   0                   WORK REG 0                   @Y02753
STASCB   EQU   7                   ASCB ADDR REG                @Y02753
RETSV    EQU   9                   RETURN REG SAVE              @Y02753
STINTLK  EQU   14                  INTERNAL LINK REG            @Y02753
         SPACE 2
*   OTHER 'EQU' DEFINITIONS.
STMC     EQU   1                   .STEP MUST COMPLETE CODE
STOP     EQU   6                   .STOP CODE MASK
START    EQU   7                   .START CODE MASK
STOPSYNC EQU   14                  .STOP SYNCH CODE
SSRB     EQU   13                  .SRBS CODE
ABEND    EQU   13                  .ABEND SVC
ONE4FOX  EQU   X'14F'              .ABEND CODE
KEYF     EQU   X'80'               .PROTECT KEY MASK
OFF      EQU   255                 .OFF MASK
C0       EQU   0                   .0
C1       EQU   1                   .1
C2       EQU   2                   .2
C4       EQU   4                   .4
C8       EQU   8                   .8
C16      EQU   16                  .16
C64      EQU   64                  .64
CF       EQU   15                  .MASK FOR ICM
E        EQU   8                   .BR CONDITION MASK
NE       EQU   7                   .BR CONDITION MASK
NZ       EQU   7                   .BR CONDITION MASK
NO       EQU   14                  .BR CONDITION MASK
DISMASK  EQU   X'FC'                DISABLE MASK IN STNSM
STREGL   EQU   64                  LENGTH OF MOVE OF REGISTERS  @Y02753
CXFF     EQU   X'FF'               CONSTANT X'FF'              @Z40FPYK
         TITLE 'IEAVSETS...AOS/2...INITIALIZING'
*   ENTRY POINT TO STATUS VIA SVC ENTRY
         USING PSA,R0
         USING STFRRPAR,R13                                     @Y02753
         USING WSA,R5
         USING ASCB,R3
*/*STATUS: CHART*/
*/* E IGC079*/
*/* P FIND LOCAL SAVE AREA- SAVE REGS*/
         LR    R3,R7                   COPY ASCB ADDR
         L     R5,ASCBASXB             ASXB ADDR
         L     R5,ASXBSPSA-ASXB(,R5)    WSA TABLE
         L     R5,WSALSTAT-WSAL(,R5)    STATUS WSA
         STM   R0,R14,WSA              SAVE REGS
         MVI   SWITCHES,C0             INIT BITS TO SVC ENTRY
*/* P (,SUPVTEST) INIT SWITCHES TO SVC ENTRY*/
         B     SUPVTEST            .PROCEED TO MAIN PROCESSING
         SPACE 3
*   ENTRY POINT TO STATUS VIA A BRANCH ENTRY
*   CALLERS BRANCH HERE ON REGISTER 15
*/* E IGC07902*/
*/* P BOOTSTRAP TO SAVE AREA- SAVE REGS*/
IGC07902 L     R15,PSAAOLD             ASCB
         L     R15,ASCBASXB-ASCB(,R15)  ASXB
         L     R15,ASXBSPSA-ASXB(,R15)  WSA TBL
         L     R15,WSALSTAT-WSAL(,R15)  STATUS WSA
         STM   R0,R14,0(R15)           SAVE REGS
*/* P SET UP ENVIRONMENTAL REGS- INIT SWITCHES TO BRANCH ENTRY*/
         BALR  R6,R0                    BOOTSTRAP ADDRESSABILITY
         USING *,R6
         L     R6,AIGC079          .LOAD NEW BASE REG
         USING IGC079,R6
         LR    R5,R15                  SAVE AREA BASE
         MVI   SWITCHES,BRANCH         SET BITS TO BRANCH ENTRY
         LR    R15,R13                 PARM REGS AS IN SVC
Q01      L     R3,PSAAOLD              ASCB ADDR
Q02      L     R4,PSATOLD              CURR TCB
*/*SUPVTEST: D (NO,SETTER,YES,) RESET WAS SPECIFIED*/
SUPVTEST SR    R13,R13                 ZERO WORK REG
         LTR   R1,R1                   TEST FOR RESET SW
         BNM   SETTER                  BR IF NOT RESET
*/* P TURN ON RESET SWITCH*/
         OI    SWITCHES,UNDOIT         SET ON RESET SW
*/*SETTER: S SETFRR: SETFRR COVERAGE, GET PARM AREA*/           @Y02753
*/* D (OTHR,SWCHTEST,STOP,TSTASID,STRT,) STOP/START TCB*/
SETTER   ST    R13,C4*R15(,R5)          ASSUME RC=0
         SETFRR A,FRRAD=ASTNFRR,PARMAD=(R13),WRKREGS=(R8,R2)    @Y02753
         ST    R13,STFRRSAV        SAVE ADDR OF PARM LIST       @Y02753
GONONE   CLI   ACTCODE,STOP              LOWER THAN STOP       @YM01681
         BL    SWCHTEST            .YES, PRIM MASK SW HAS BEEN SET
         BE    TSTASID                 BR IF STOP
         CLI   ACTCODE,STOPSYNC    IS IT STOP SYNCH            @YM04236
         BE    TSTASID             YES, SKIP AUTHORIZATION CHEC@YM04236
         CLI   ACTCODE,START             LT OR EQ START        @YM01681
         BH    SWCHTEST                BR IF NOT START
*/* P (,TSTASID) TURN ON RESET SWITCH*/
         OI    SWITCHES,UNDOIT         SET RESET SWITCH
         B     TSTASID             GO TO TEST FOR XMSTATUS
*/*SWCHTEST: D (YES,TSTASID,NO,) BRANCH ENTRY*/
SWCHTEST TM    SWITCHES,BRANCH         BRANCH ENTRY
         BO    TSTASID                 YES
*/* D (NO,ABEND14F,YES,) CALLER IS IN SUPVR KEY*/
         L     R2,TCBRBP-TCB(,R4)       CURR RB
         TM    RBOPSW+C1-RBSECT(R2),KEYF  SUPUR KEY
         BNZ   ABEND14F                NO, SVC ILLEGAL
*/*TSTASID: D (YES,NDASID,NO,) REQUEST TO CHG PRIMARY NDISP FLAGS*/
TSTASID  LA    R2,OFF                  MASK OF FF HEX
         NR    R2,R0                   ISOLATE CODE
         BZ    ABEND14F                ABEND CALLER IF INVALID
         LA    R8,QUIRKS(R2)           GET ADDR OF TABLE ENTRY
         TM    C0(R8),NOTND            TEST IF ND OR SD
NDSDB    BZ    NDASID                  BR IF ND
*/*SDASID: P (,ASIDTST) GET ASID (IF ANY) FROM REG 0)*/
SDASID   LR    R9,R0                   NOT ND, ASID IN 0
         SRL   R9,C16                  ISOLATE
         B     ASIDTST             TEST FOR XMSTATUS
*/*NDASID: P GET ASID FROM REG 15- MASK IN REG 0*/
NDASID   LR    R9,R15              ND, ASID IN 15
         LR    R15,R0              SET UP STATUS MASK REG
*/* P TURN ON PRIMARY NDISP SWITCH*/
         OI    SWITCHES,PRIMARY        INDICATE PRIMARY (ND)
*/*ASIDTST: D (NO,NOTSTP,YES,) AN ASID IS SPECIFIED*/
ASIDTST  LTR   R9,R9                   ASID IS ZERO
         BZ    NOTSTP                  BR IF SO
*/* N DEPENDING ON STATUS OPTION, XM IS INVALID, VALID, OR VALID ONLY
*/* FOR RESET*/
*/* D (NOXM,NOTSTP,XMOK,XMGO,RSET,) XM VALID FOR THIS FUNCTION*/
         LA    R10,QUIRKS(R2)           INVALID XM FNS
         TM    C0(R10),XMSET+XMRESET    TEST FOR VALID XM CODES
         BO    XMGO                    BR IF OK
         BZ    NOTSTP                  BR NO XMSTATUS          @YM01974
*/* D (NO,ABEND14F,YES,) RESET SWITCH IS ON*/
         LTR   R1,R1                   INVALID IF STOP OR SET
         BNM   ABEND14F                OK IF RESET, START
*/* D (NO,XMGO,YES,NOTSTP) REQUEST IS FOR START SRBS*/
         CLI   ACTCODE,SSRB            IS CALL FOR START SRBS
         BNE   XMGO                    IF NOT, NORMAL XMSTATUS
         B     NOTSTP                GO TO TO ROUTINE
*/*ABEND14F: R '14F' ABEND*/
ABEND14F LA    R1,ONE4FOX          .LOAD UP ERROR CODE FOR ABTERM
         SLL   R1,C4+C8                POSITION CODE
         O     R1,HIBIT                TURN ON SYSTEM IND
QJZ1     SETFRR  D,WRKREGS=(R8,R2)                              @Y02753
         SVC   ABEND                   ABEND
         EJECT
*/*BADTCB: P SET RETURN CODE FOR INVALID TCB ADDR*/
BADTCB   MVI   RETNCODE,C4         .SET 'INVALID TCB' RETURN CODE
         SPACE
*/*EXIT: S SETFRR: DELETE FRR COVERAGE */
EXIT     SETFRR D,WRKREGS=(R8,R2)                              @Y02752
         SPACE 2                                               @Z40FPYK
*/* P RESET STATUS ACTIVE STATE */                             @Z40FPYK
         NI    ASCBSRQ1,CXFF-ASCBSTA   RESET STATUS ACTIVE     @Z40FPYK
*                                      FOR NONDISPATCHABLE     @Z40FPYK
*                                      TESTS NOW BEING VALID   @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/*EXIT10: D (NO,EXIT1,YES,) XMSTATUS SWITCH IS ON*/
EXIT10   TM    SWITCHES,XMSTATUS       XM STATUS IN OPERATION  @YM02662
         BZ    EXIT1                   BR IF NOT               @YM02662
         L     R1,C0(,R5)               RETRIEVE SRB ADDR      @YM02662
*/*EXFRITL: S EXFREE: FREE SRB SPACE */
EXFRITL  BAL   R8,EXFREE           LINK TO FREE                @YM02662
*/* S SETLOCK: RELEASE LOCAL LOCK*/
Q41      SETLOCK RELEASE,TYPE=LOCAL,RELATED=Q22
*/* R GET  SRB EXIT TO DISP ADDR*/
Q42      L     R14,CVTPTR              ADDR OF CVT
         L     R14,CVTSRBRT-CVTMAP(,R14)   ADDR OF SRB EXIT TO DISP
         BR    R14                 RETURN
*/*EXFREE: E FREE SRB*/
*/* S SETLOCK: OBTAIN SALLOC LOCK*/
EXFREE   EQU   *                   LABEL                       @YM02662
Q38      SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,RELATED=Q40
*/* S FREEMAIN: FREE SRB*/
         LA    R0,SRBSIZE+C4+C4+C4     SIZE OF SRB             @YM02662
Q39      FREEMAIN RU,A=(1),LV=(0),SP=245,BRANCH=(YES,GLOBAL)
*/* S SETLOCK: RELEASE SALLOC LOCK*/
Q40      SETLOCK RELEASE,TYPE=SALLOC,RELATED=Q38
*/* R RETURN*/
         BR    R8                      OUT                     @YM02662
*/*EXIT1: P RESTORE REGS FROM LOCAL WSA */
EXIT1    LM    R0,R15,WSA          RESTORE REGS                 @Y02753
*/* R RETURN*/
         BR    R14                 .RETURN TO THE STATUS CALLER
         SPACE 3
*/*NOTSTP: P SET UP ENTRY CODE AS BR TABLE VECTOR*/
NOTSTP   AR    R2,R2                   DOUBLE CODE FOR INDEX
         LH    R12,BRATAB(R2)     .GO INTO TABLE TO GET RTN'S ADDR
         B     IGC079(R12)         .BRANCH TO ROUTINE
         EJECT
* BRANCH TABLE TO DETERMINE WHICH ROUTINE TO ENTER
*/*BRATAB: D
*/*(1,MCSTEP,2,ABEND14F,3,NDSTEP,4,NDSYSTEM,5,NDTCB,6,PROCEED,
*/* 7,PROCEED,8,SDSTEP,9,SDSYSTEM,10,SDTCB,11,SDETCB,12,NDETCB,
*/* 13,SRBS,14,SYNCH,15,CALLER,16,CALLER) ENTRY CODE*/
         TITLE 'IEAVSETS...AOS/2...ND,SYSTEM, SD,SYSTEM'
* PRIMARY NON-DISPATCHABLE SYSTEM ROUTINE
*/*SDSYSTEM: E CODE 9*/
SDSYSTEM EQU   *                   LABEL
*/*NDSYSTEM: E CODE 4*/
NDSYSTEM L     R2,CVTPTR               ADDR OF CVT
         L     R4,CVTCSD-CVTMAP(,R2)       ADDR OF CSD
         SR    R1,R1                   PARM REG TO ZERO
         L     R15,MEMSW               ADDR OF MEMORY SW
*/* D (YES,RESETSYS,NO,) THIS REQUEST IS RESET*/
         TM    SWITCHES,UNDOIT      .IS THIS A RESET
         BO    RESETSYS            .YES
*/*Q04: S SETLOCK: OBTAIN CMS LOCK*/
Q04      SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,RELATED=Q07 OR Q0X
*/* S SETLOCK: OBTAIN DISPATCHER LOCK*/
Q05      SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=Q06
*/* P SET ISSUER ASCB EXEMPT FROM SYS ND*/
         OI    ASCBFLG2,ASCBXMPT       SET ISSUER EXEMPT
*/* P SET SYSTEM ND FLAG ON*/
         OI    CSDSCFL1-CSD(R4),CSDSYSND  SET SYS ND FLG
*/* D (YES,NOMP,NO,) RUNNING UP?*/                             @YA02383
CK4MP    EQU   *             FOR TESTING ONLY                  @YA02383
         LA    R11,C1        VALUE TO INDICATE 1 CPU           @YA02383
         CH    R11,CSDCPUOL-CSD(R4)  Q. ONLY 1 CPU ALIVE       @YA02383
         BE    NOMP          A. YES. SKIP MP LOGIC             @YA02383
*/* S MEMSW: SWITCH OUT OF NON-EXEMPT A.S.''S*/                @YA02383
         BALR  R14,R15       GO TO MEMSW - ZERO ASCB ADDR      @YA02383
*/* P GET ADDR OF PCCA TABLE - INIT FOR 16 PASSES*/            @YA02383
         L     R11,CVTPCCAT-CVTMAP(,R2)    ADDR OF PCCA TABLE  @YA02383
         LA    R13,C16       MAX CPUS                          @YA02383
*/*NEXTCPU: D (YES,SKIP1,NO,) IS THIS PCCA ENTRY ZERO?*/       @YA02383
NEXTCPU  L     R12,C0(,R11)  ADDR OF PCCA                      @YA02383
         LTR   R12,R12       Q. ZERO                           @YA02383
         BZ    SKIP1         A. YES. GET NEXT                  @YA02383
*/* D (YES,SKIP1,NO,) IS THIS PCCA ENTRY FOR OUR CPU?*/        @YA02383
         C     R12,PSAPCCAV  Q. IS THIS OUR OWN CPU            @YA02383
         BE    SKIP1         A. YES. GET NEXT                  @YA02383
*/* D (YES,SKIP1,NO,) EXEMPT ADDR SPACE ? */                   @YA02383
         L     R12,PCCAPSAV-PCCA(R12)  GET OTHER CPU PSA ADDR  @YA02383
         L     R12,PSAAOLD-PSA(R12)  GET OTHER CPU ASCB ADDR   @YA02383
         TM    ASCBFLG2-ASCB(R12),ASCBXMPT+ASCBPXMT  Q. EXEMPT ADDR    X
                               SPACE PROCESSING ON OTHER CPU   @YA02383
         BNZ   SKIP1         A. YES. INTERLOCK ON CMS LOCK             X
                               NOT POSSIBLE                    @YA02383
*/* S (,NDSYSTEM) SETLOCK: RELEASE DISP LOCK*/                 @ZM30628
Q0X      SETLOCK RELEASE,TYPE=DISP,RELATED=Q05                 @YA02383
         B     NDSYSTEM      STALL FOR TIME                    @ZM30628
*/*SKIP1: D (YES,NEXTCPU,NO,) MORE CPUS TO CHECK?*/            @YA02383
SKIP1    EQU   *             SKIP CHECK OF ASSOCIATED PSA      @YA02383
         LA    R11,C4(R11)   NEXT ENTRY IN PCCA TABLE          @YA02383
         BCT   R13,NEXTCPU   BR IF MORE CPUS                   @YA02383
NOMP     EQU   *             USED TO SKIP MP LOGIC             @YA02383
*/*NOMP: S SETLOCK: RELEASE DISPATCHER LOCK*/
Q06      SETLOCK RELEASE,TYPE=DISP,RELATED=Q05
*/* S (,EXIT) SETLOCK: RELEASE CMS LOCK*/
Q07      SETLOCK RELEASE,TYPE=CMS,RELATED=Q04
         B     EXIT                    OUT
*/*RESETSYS: S SETLOCK: OBTAIN DISPATCHER LOCK*/
RESETSYS SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=Q09
*/* P RESET SYS ND FLAG*/
         NI    CSDSCFL1-CSD(R4),OFF-CSDSYSND  SET SYS ND FLG
*/* D (YES,EXEMPT,NO,) ADDRESS SPACE IS PERM EXEMPT*/
         TM    ASCBFLG2,ASCBPXMT       A.S. IS PERMANENTLY ND/SD EXEMPT
         BO    EXEMPT                  BR IF SO
*/* P RESET ASCB EXEMPTION BIT*/
         NI    ASCBFLG2,OFF-ASCBXMPT   RESET ISSUERS EXEMPTION
*/*EXEMPT: S MEMSW: SWITCH INTO HI-PRI A.S.''S*/
EXEMPT   BALR  R14,R15                 GO TO MEMSW WITH ZERO ASCB ADDR
*/* S (,EXIT) SETLOCK: RELEASE DISPATCHER LOCK*/
Q09      SETLOCK RELEASE,TYPE=DISP,RELATED=RESETSYS
         B     EXIT                    OUT
         TITLE 'IEAVSETS...AOS/2...MC,STEP'
*   THIS CODE IS ENTERED WHEN MUST COMPLETE STEP IS INDICATED.
*   IT FIRST DETERMINES IF SET OR RESET AND THEN SETS THE CURRENT TCB.
*   THEN IT MAKES ALL TASKS IN THE JOB STEP NON-DISPATCHABLE.
         SPACE
         USING TCB,R4
* MUST COMPLETE STEP ROUTINE
*/*MCSTEP: E CODE 1*/
*/* D (YES,RESETSTP,NO,) THIS IS A RESET REQUEST*/
MCSTEP   TM    SWITCHES,UNDOIT      .IS THIS A RESET
         BO    RESETSTP            .YES
*/*SETSTP: P TURN ON SMC FLAG IN CALLER TCB*/
SETSTP   OI    TCBFLGS2,TCBFJMC    .SET MUST COMPLETE FLAG
*/* P TURN ON INHIBIT ASYNCH EXITS BIT IN CALLER TCB*/
         OI    TCBFLGS1,TCBFX      .INHIBIT ASYNCHRONOUS EXITS
         LR    R7,R15                  SAVE REG ACROSS SIGPS
*/* S (,MAIN1) SIGPCPUS: CLEAR OTHER CPUS OUT OF A.S.*/
         BAL   R12,SIGPCPUS            CLEAR OTHER CPUS OUT OF A.S.
         LR    R15,R7                  RESET REG
         B     MAIN1               .PROCEED DOWN TCB TREE
*/*RESETSTP: P TURN OFF SMC IN CALLER TCB*/
RESETSTP NI    TCBFLGS2,OFF-TCBFJMC         .RESET MUST COMPLETE
*/* P TURN OFF INHIBIT ASYNCH EXITS BIT IN CALLER TCB*/
         NI    TCBFLGS1,OFF-TCBFX  .ALLOW ASYNCHRONOUS EXITS
*/*MAIN1: L GET JSTCB (OR INIT TCB, IF ANY)*/
MAIN1    L     R10,TCBJSTCB        .GET CALLERS JOB STEP TCB
         DROP  R4
         USING TCB,R10
         L     R2,TCBJSCB              GET STEP JSCB
         L     R2,JSCBTCBP-IEZJSCB(,R2) GET INIT TCB IF ANY
         LTR   R2,R2                   ANY?
         BZ    CHKCURR                 BR IF NOT, USE JSTEP TCB
         LR    R10,R2                  USE INIT TCB
*/*CHKCURR: D (YES,SCANTASK,NO,) AT CALLER TCB*/
CHKCURR  CR    R4,R10              .IS THIS THE CURRENT TCB
         LR    R8,R10              .INITIALIZE REG FOR TREE SCAN
         BE    SCANTASK            .YES, GO SELECT ANOTHER TASK
*/*MAIN14: D (YES,DECMCT1,NO,) THIS IS A RESET*/
MAIN14   TM    SWITCHES,UNDOIT      .IS THIS A RESET
         BO    DECMCT1             .YES
*/*STPON1: P INCREMENT SMC CT IN TREE TCB */
*/* N ABEND IF COUNT WRAPS TO X'FF' */
STPON1   IC    R12,TCBSTMCT        .GET JB STEP M.C. COUNT
         TM    TCBSTMCT,OFF        TEST FOR WRAP COND          @YM00217
         BO    ABEND14F            ABEND IF TOO MANY           @YM00217
         LA    R12,R1(,R12)         .INCREMENT IT
         STC   R12,TCBSTMCT        .RE-STORE IT
*/* S TCBRDYCT: APPLY -1 TO TCB READY COUNT*/
         L     R9,FOXES                DELTA OF -1
         BAL   R11,TCBRDYCT            GO PROCESS ASCBTCBS
*/* P (,SCANTASK) TURN ON SMC NDISP BIT IN TREE TCB*/
         OI    TCBFLGS5,TCBSTP     .SET JB STEP M.C. SUMMARY FLAG
         B     SCANTASK            .GO SELECT ANOTHER TASK
*/*DECMCT1: P DECREMENT SMC CT IN TREE TCB */
DECMCT1  IC    R12,TCBSTMCT        .GET JB STEP M.C. COUNT
         BCTR  R12,R0              .DECREMENT IT
         CLI   TCBSTMCT,C0         TEST FOR ALREADY ZERO       @YM00217
         BE    STPOFF              BR IF ALREADY DOWN TO ZERO  @YM00217
         STC   R12,TCBSTMCT        .RE-STORE IT
*/* D (NO,SCANTASK,YES,) COUNT IS NOW ZERO*/
         CLI   TCBSTMCT,C0         .IS IT NOW ZERO
         BNE   SCANTASK            .NO, GO SELECT ANOTHER TASK
*/* P TURN OFF SMC NDISP FLAG IN TREE TCB*/
STPOFF   NI    TCBFLGS5,OFF-TCBSTP .RESET JB STEP M.C. SUMMARY FLAG
*/* S TCBRDYCT: APPLY +1 TO TCB READY COUNT*/
         LA    R9,C1                   DELTA IS 1
         BAL   R11,TCBRDYCT            PROCESS ASCBTCBS
*/*SCANTASK: S (NONE,SETSMCT,NEXT,) IEATRSCN: GET NEXT TCB IN TREE*/
SCANTASK LA    R11,SETSMCT             FINAL EXIT POINT FROM TREESCAN
         BAL   R14,IEATRSCN        .GO TO TREESCAN
* RETURN HERE MEANS ANOTHER SUBTASK HAS BEEN FOUND. ITS ADDR IS IN R10.
* RETURN TO THE ADDR IN R11 MEANS SCAN COMPLETED
*/* D (YES,SCANTASK,NO,) AT CALLER TCB*/
         CR    R10,R4              .IS THIS THE CALLERS TASK
         BE    SCANTASK            .YES, GO SELECT ANOTHER TASK
*/*CHECKJS: D (YES,MAIN14,NO,SCANTASK) TCB IN SAME STEP (SAME JSTCBS)*/
CHECKJS  CLC   TCBJSTCB,TCBJSTCB-TCB(R4) .NO, IS TASK IN SAME STEP
         BE    MAIN14              .YES, GO SET/RESET MUST COMPLET FLAG
         B     SCANTASK            .NO, GO SELECT ANOTHER TASK
         DROP  R10
*/*SETSMCT: D (YES,DECRSMCT,NO,) THIS IS A RESET*/
SETSMCT  IC    R2,ASCBSMCT             CURRENT SMCT
         TM    SWITCHES,UNDOIT          TEST FOR SET/RESET
         BO    DECRSMCT                BR IF RESET
*/* P (,EXIT) INCREMENT ASCBSMCT CT*/
         CLI   ASCBSMCT,OFF        TEST FOR OVERFLOW           @YM00217
         BE    ABEND14F            ABEND IF TOO MANY           @YM00217
         LA    R2,C1(,R2)          INCR CT
         B     SMCT                GO TO SET COUNT
*/*DECRSMCT: P (,EXIT) DECREMENT ASCBSMCT CT*/
DECRSMCT BCTR  R2,R0               DECREMENT CT
         CLI   ASCBSMCT,C0         TEST FOR ALREADY ZERO       @YM00217
         BE    EXIT                EXIT IF ALREADY DONE        @YM00217
SMCT     STC   R2,ASCBSMCT         SET NEW CT
         B     EXIT                OUT
         EJECT
*/*SIGPCPUS: E SIGNAL OTHER PROCESSORS */
SIGPCPUS DS    0H                  USES REGS 0 1 13 14 15 (12)  @Y02751
*
*  THE SIGPCPUS SUBROUTINE PERFORMS TWO FUNCTIONS.  THE FIRST  @Z40FPYK
*  WILL CLEAR ACTIVE DISPATCHERS THAT DO NOT HOLD THE LOCAL    @Z40FPYK
*  LOCK WHILE DISPATCHING A TASK (E.G. TCTL FUNCTION).  THIS   @Z40FPYK
*  FUNCTION BASICALLY PROVIDES A SYNCHRONIZATION FUNCTION,     @Z40FPYK
*  BETWEEN STATUS AND THE NON-LOCALLY LOCKED DISPATCHER.       @Z40FPYK
*  THE SECOND FUNCTION OF SIGPCPUS IS TO CLEAR ALL OTHER       @Z40FPYK
*  CPUS OF ACTIVE TASKS OPERATING IN THE STATUS MEMORY.        @Z40FPYK
*  REGISTER CONVENTIONS ARE AS FOLLOWS:                        @Z40FPYK
*    R0  WORK REGISTER      R8  UNCHANGED                      @Z40FPYK
*    R1  WORK REGISTER      R9  UNCHANGED                      @Z40FPYK
*    R2  UNCHANGED          R10 UNCHANGED                      @Z40FPYK
*    R3  ASCB ADDRESS       R11 WORK REGISTER                  @Z40FPYK
*    R4  UNCHANGED          R12 RETURN REGISTER                @Z40FPYK
*    R5  UNCHANGED          R13 WORK REGISTER                  @Z40FPYK
*    R6  STATUS BASE REG    R14 WORK REGISTER                  @Z40FPYK
*    R7  UNCHANGED          R15 WORK REGISTER                  @Z40FPYK
*                                                              @Z40FPYK
*/* P ASCBSTA =  ON */                                         @Z40FPYK
         OI    ASCBSRQ1,ASCBSTA        TURN ON STATUS ACTIVE   @Z40FPYK
*                                      FLAG TO SET UP A        @Z40FPYK
*                                      NON-DISPATCHABLE STATE  @Z40FPYK
*                                      IN THIS MEMORY          @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* P OBTAIN CDAL POINTER */                                   @Z40FPYK
         SPACE 2                                               @Z40FPYK
         L     R11,CVTPTR              POINT TO THE CVT        @Z40FPYK
         USING CVT,R11                                         @Z40FPYK
         L     R11,CVTCDAL             POINT TO THE CDAL       @Z40FPYK
         DROP  R11                                             @Z40FPYK
         SPACE 2                                               @Z40FPYK
*   INDEED THERE ARE ACTIVE NON-LOCALLY LOCKED DISPATCHERS     @Z40FPYK
*   CURRENTLY ACTIVE.  THIS ROUTINE MUST ANALYZE WHICH CPUS    @Z40FPYK
*   HAVE THIS CONDITION AND IF THE DISPATCHERS ARE ACTIVE ON   @Z40FPYK
*   BEHALF OF THE MEMORY STATUS IS ACTIVE IN, THIS CONDITION   @Z40FPYK
*   MUST BE CLEARED.                                           @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/*%MAXCPU: P MAXCPU COUNT = 16 */                             @Z40FPYK
         SPACE 2                                               @Z40FPYK
         LA    R1,C16                   SET UP FOR MAXIMUM     @Z40FPYK
*                                       NUMBER OF CPUS         @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/*DISPLOOP: D (YES,,NO,DISPFND) ACTIVE ENTRY ? */             @Z40FPYK
         SPACE 2                                               @Z40FPYK
DISPLOOP DS    0H                                              @Z40FPYK
         USING CDAL,R11                                        @Z40FPYK
         L     R14,CDALDSP             A DISPATCHER ACTIVE FOR @Z40FPYK
*                                      THIS CPU ?              @Z40FPYK
         LTR   R14,R14                 DISP ELEMENT = 0 ?      @Z40FPYK
         BNZ   DISPFND                 NO,  STALL              @Z40FPYK
*                                      UNTIL THIS CONDITION IS @Z40FPYK
*                                      CLEARED                 @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/*DISPNXT: P BUMP TO NEXT CPU ENTRY */                        @Z40FPYK
         SPACE 2                                               @Z40FPYK
DISPNXT  DS    0H                                              @Z40FPYK
         LA    R11,C4(R11)             INCREMENT TO NEXT ENTRY @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* D (YES,DISPLOOP,NO,SIGPCPUM) MORE CPU'S ? */               @Z40FPYK
         SPACE 2                                               @Z40FPYK
         BCT   R1,DISPLOOP             HAVE ALL CPUS BEEN      @Z40FPYK
*                                      CHECKED?  IF NOT, WE    @Z40FPYK
*                                      MUST CONTINUE CHECKING  @Z40FPYK
         B     SIGPCPUM                ELSE ALL CPUS HAVE BEEN @Z40FPYK
*                                      EXAMINED.  THE VARIOUS  @Z40FPYK
*                                      NON-DISPATCHABILITY     @Z40FPYK
*                                      STATES CAN BE SET       @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/*DISPFND: D (YES,,NO,DISPLOOP) ACR ACTIVE ? */               @Z40FPYK
         SPACE 2                                               @Z40FPYK
DISPFND  DS    0H                                              @Z40FPYK
         L     R13,PSALCCAV            LCCA ADDRESS OF OUR CPU @Z40FPYK
         USING LCCA,R13                                        @Z40FPYK
         TM    LCCADSF1,LCCAACR        ACR ACTIVE?             @Z40FPYK
         BZ    DISPLOOP                NO, SPIN UNTIL CDAL=0   @Z40FPYK
         DROP  R11                                             @Z40FPYK
         SPACE 2                                               @Z40FPYK
*/* S (,DISPLOOP)ACR: CALL ACR TO PREVENT INTERLOCK */         @Z40FPYK
         SPACE 2                                               @Z40FPYK
         LR    R0,R10                  SAVE R10 ACROSS THE     @Z40FPYK
*                                      ACR CALL                @Z40FPYK
         STNSM SAVMSK,DISMASK          DISABLE AND SAVE THE    @Z40FPYK
*                                      CURRENT MASK            @Z40FPYK
         USING WSAC,R10                                        @Z40FPYK
         CALLRTM TYPE=ACRLM,CCA=(R13)                          @Z40FPYK
         DROP  R10,R13                                         @Z40FPYK
         USING STFRRPAR,R13                                    @Z40FPYK
         LR    R10,R0                  RESTORE R10             @Z40FPYK
         IC    R14,SAVMSK              RESTORE THE SAVED       @Z40FPYK
         EX    R14,STOMSK              MASK AND ENABLE         @Z40FPYK
         B     DISPLOOP                CONTINUE CPU CHECK      @Z40FPYK
*                                      RESTORING REG 14        @Z40FPYK
*/*SIGPCPUM: D (TCB,,SRB,SIGNSP) TCB OR SRB CALLER */          @Z40FPYK
         SPACE 2                                               @Z40FPYK
SIGPCPUM DS    0H                      CLEAR ACTIVE TASKS IN   @Z40FPYK
*                                      THIS MEMORY             @Z40FPYK
         L     R11,PSATOLD             GET CURR TCB POINTER     @Y02751
         LTR   R11,R11                 TEST FOR ZERO(SRB)       @Y02751
         BZ    SIGNSP                  BR ZERO (SRB)            @Y02751
*/* P (,%JT0) SET CHECK COUNT = 1 FOR TCB*/                     @Y02751
         LA    R11,C1                  SET TCB CHECK COUNT      @Y02751
*/*SIGNSP: P CHECK COUNT = 0 FOR SRB */                         @Y02751
*/*%JT0: D (NO,SETSIG,YES,) CHECK COUNT MATCH NUMBER ACT CPUS*/@Y02751
SIGNSP   CL    R11,ASCBCPUS            CHECK CPU COUNT          @Y02751
*/* R RETURN */
         BER   R12                     RETRN IF NEED NO SIGP    @Y02751
         TM    SWITCHES,EXPLICIT       IS REQUEST FOR 1 TCB?   @ZA32105
         BZ    SETSIG                  NO, QUIESCE ALL TASKS   @ZA32105
*                                      IN A. S. EXCEPT CURRENT @ZA32105
*        WE ARE CHANGING DISPATCHABILITY FOR ONLY 1 TASK. IF   @ZA32105
*        THAT TASK IS NOW ACTIVE, WE MUST CONTINUE WITH SIGP   @ZA32105
*        PROCESSING. IF IT IS NOT ACTIVE, DO NOT WORRY ABOUT   @ZA32105
*        OTHER TASKS (AN INTERLOCK WITH A SPIN LOCK IS         @ZA32105
*        POSSIBLE).                                            @ZA32105
         TM    TCBXSCT-TCB(R8),TCBACTIV+TCBS3A IS TASK ACTIVE? @ZA32105
         BZR   R12                     NO, RETURN WITH NO SIGP @ZA32105
*/*SETSIG: P GET ADDR OF PCCA TABLE - INIT FOR 16 PASSES */     @Y02751
SETSIG   DS    0H                      TEST LABEL               @Y02751
         L     R11,CVTPTR              ADDR OF CVT
         L     R11,CVTPCCAT-CVTMAP(,R11)   ADDR OF PCCA TABLE
         LA    R13,C16                  MAX CPUS
*/*SIGPLOOP: D (YES,NOSIGP,NO,) THIS PCCA ENTRY IS ZERO*/
SIGPLOOP L     R1,C0(,R11)             ADDR OF PCCA
         LTR   R1,R1                   IS ZERO
         BZ    NOSIGP                  IF SO, DO NOT ISSUE RPSGNL
*/* D (YES,NOSIGP,NO,) THIS PCCA ENTRY IS FOR OUR CPU*/
Q12      C     R1,PSAPCCAV             IS THIS OUR OWN CPU
         BE    NOSIGP                  YES, BR, DO NOT INTRPT ONESELF
*/* S RPSGNL: SIGP CPU REPRESENTED BY PCCA ENTRY*/
Q13      RPSGNL SWITCH,CPU=(1)         INTERRUPT OTHER CPU
*/*NOSIGP: D (YES,SIGPLOOP,NO,) MORE CPUS TO CHECK*/
NOSIGP   LA    R11,C4(,R11)             TO NEXT ENTRY IN PCCA TABLE
         BCT   R13,SIGPLOOP             BR IF MORE CPUS
         L     R13,STFRRSAV        RESTORE FRR PRM POINTER      @Y02753
         SR    R0,R0               CLEAR REG                    @Y02753
*/* D (SRB,SIGPSPIN,TCB,) SPIN CT IS 0- WE ARE AN SRB OR TCB*/
Q14      C     R0,PSATOLD              IS PSATOLD ZERO
         BE    SIGPSPIN                BR IF SO, MEANS SRB MODE
*/* P MAKE SPIN CT 1 SINCE WE ARE A TCB*/
         LA    R0,C1                   IN TCB MODE, COUNT WILL BE 1
*/*SIGPSPIN: D (FAIL,%D6,TAKE,) CS ASCBCPUS AND SPIN CT*/
SIGPSPIN LR    R1,R0                   SET UP LOW COUNT FOR CS
Q10      CS    R1,R1,ASCBCPUS          DO WE HAVE A MATCH YET
*/* R RETURN*/
         BZR   R12                     YES, RETURN TO CALLER
*/*%D6: D (NO,SIGPSPIN,YES,) LCCA ACR ACTIVE BIT ON*/
         L     R15,PSALCCAV            GET ADDR OF OUR LCCA
         USING LCCA,R15
         TM    LCCADSF1,LCCAACR        ACR IS IN PROGRESS
         BZ    SIGPSPIN                BR IF NOT SO
*/* S (,SIGPSPIN) ACR: CALL ACR TO AVOID INTERLOCK*/
         LR    R14,R10                 SAVE REG 10 ACROSS ACR CALL
         USING WSA,R5
         STNSM SAVMSK,DISMASK          DISABLE ANS SAVE MASK
         USING WSAC,R10
         CALLRTM TYPE=ACRLM,CCA=(R15)
         DROP  R10,R15
         LR    R10,R14                 RESTORE REG 10
         IC    R14,SAVMSK              GET SAVED SYS MASK
         EX    R14,STOMSK              ENABLE
         B     SIGPSPIN                TO LOOP
STOMSK   STOSM SAVMSK,C0               EXECUTED
         SPACE 4                                               @ZA20174
*/*TCBRDYCT: E UPDATE ASCBTCBS RTN*/
*/* D (NO,%D1,YES,) TCB IS DISPATCHABLE*/
TCBRDYCT DS    0H                      USES REGS 9 12 13 (10 11)
         SR    R12,R12                 ZERO REG
         CH    R12,TCBFLGS4-TCB(,R10)   TCB IS NON-DISPATCHIBLE
         BNER  R11                     RETURN IF SO
*/* P SET TCBS3A TO LOCK OUT RESUME */                         @ZA11584
         L     R12,TCBXSCT-TCB(,R10)   PICK UP TCB ACTIVE WORD @ZA11584
STATLOOP N     R12,MASK1               INSURE RESUME NOT ACTIVE@ZA11584
         LR    R0,R12                  INSURE THAT WE LOCK OUT @ZA11584
         O     R0,MASK2                RESUME WHILE ADJUSTING  @ZA11584
         CS    R12,R0,TCBXSCT-TCB(R10) THE ASCBTCBS COUNT      @ZA11584
         BNE   STATLOOP                NO ON -- RESUME ACTIVE  @ZA11584
*                                      SPIN UNTIL IT FINISHES  @ZA11584
*/* D (NO,RESETS3A,YES,) WAIT COUNT IN TOP RB IS ZERO */       @ZA20174
         L     R12,TCBRBP-TCB(,R10)     GET TOP RBADDR
         CLI   RBWCF-RBSECT(R12),C0    IS RB WAITING
         BNE   RESETS3A                RETURN IF SO            @ZA20174
*/* P APPLY SUPPLIED DELTA TO ASCBTCBS CT USING CS*/
         L     R12,ASCBTCBS            GET COUNT OF READY TCBS
TRYRDYCT LR    R0,R12                  SET UP FOR CS
         AR    R0,R9                   APPLY SUPPLIED DELTA
Q15      CS    R12,R0,ASCBTCBS         STORE NEW COUNT
         BNZ   TRYRDYCT                MISSED - TRY AGAIN
         LTR     R0,R0                NEW COUNT=0?     @ZD04015
         BNZ     RESETS3A             NO,DONE - RETURN         @ZA20174
         LH      R12,ASCBSWCT          GET WAIT COUNT   @ZD04015
         LA      R12,1(R12)             INCREMENT COUNT BY ONE @ZD04015
         STH     R12,ASCBSWCT          SAVE NEW WAIT COUNT @ZD04015
*/*RESETS3A: P TURN OFF TCBS3A BIT*/                           @ZA20174
RESETS3A L     R12,TCBXSCT-TCB(R10)    GET TCB INTERSECT WORD  @ZA20174
LOOPS3A  LR    R0,R12                  INIT SWAP OPERAND       @ZA20174
         N     R0,MASK1                CLEAR TCBS3A IN SWAP OP @ZA20174
         CS    R12,R0,TCBXSCT-TCB(R10) CLEAR TCBS3A IN TCB     @ZA20174
         BNE   LOOPS3A                 UPDATE FAIL, RETRY CS   @ZA20174
*/*%D1: R RETURN*/
         BR    R11                     DONE RETURN
         TITLE 'IEAVSETS...AOS/2...SD,STEP, ND,STEP'
*   THIS CODE IS ENTERED WHEN NON-DISPATCHABLE STEP IS SPECIFIED.
*   IT OBTAINS THE JOB STEP TCB AND SETS ALL DESCENDENTS EXCEPT THE
*   CURRENT TASK NON-DISPATCHABLE.
         SPACE
         USING TCB,R4
*/*NDSTEP: E CODE 3*/
NDSTEP   EQU   *                   LABEL
*/*SDSTEP: E CODE 8*/
*/* D (YES,STEPND,NO,) PRIMARY REQUEST*/
SDSTEP   LR    R7,R15                  COPY MASK
         TM    SWITCHES,PRIMARY        TEST FOR ND/SD
         BO    STEPND                  BR IF PRIMARY
*/* D (YES,ABEND14F,NO,MAINSTEP) STOP TCB BIT IS PRESENT IN MASK*/
         N     R15,STOPCHEK            SEE IF STOP TCB BIT IN 2NDY MASK
         BNZ   ABEND14F                IF SO, THAT IS IMMORAL
         B     MAINSTEP            CONTINUE
*/*STEPND: D (YES,ABEND14F,NO,) SET MC BIT IS PRESENT IN MASK*/
STEPND   N     R15,SMCCHEK         SEE IF SMC BIT IN PRIM MASK
         BNZ   ABEND14F            BR IF SO - ALSO ILLEGAL
*/*MAINSTEP: S SIGPCPUS: CLEAR OTHER CPUS FROM A.S.*/          @ZA30358
MAINSTEP EQU   *                                               @ZA30358
         SPACE
*        SIGPCPUS WAS FORMERLY CALLED ONLY FOR SET             @ZA30358
         BAL   R12,SIGPCPUS        CLEAR OTHER CPUS FROM A.S.  @ZA30358
*/* D (NO,GETJSTCB,YES,) RESET REQUEST*/                       @ZA30358
         TM    SWITCHES,UNDOIT     IS THIS A RESET
         BNO   GETJSTCB            NO GET THE JOBSTEP TCB      @ZA30358
*/* P INVERT MASK*/
         X     R7,FOXES            INVERT MASK
*/* D (NO,GETJSTCB,YES,) RUNNING IN SRB MODE*/
Q44      L     R1,PSATOLD          ADDR OF CURRENT TCB
         LTR   R1,R1                   TEST RUNNING TCBS COUNT
         BNZ   GETJSTCB                BR IF NOT IN SRB MODE
*/* P (,JSTEST) START AT TOP TCB IN A.S.*/
         L     R10,ASCBASXB            GET ADDR OF ASXB
         L     R10,ASXBFTCB-ASXB(,R10)  TOP TCB IN A.S.
         B     JSTEST              CONTINUE
*/*GETJSTCB: P GET CALLER JSTCB ADDR*/
GETJSTCB L     R10,TCBJSTCB        .GET THE CALLER'S JSTCB
*/*JSTEST: P ESTABLISH RETURN AT 'GETNEXT' FOR BITSET, BITRESET*/
JSTEST   LR    R8,R10              .INIT REG FOR TREE SCAN
         LR    R15,R7                  SET UP MASK REG
         LA    R2,GETNEXT          .INIT FLAG MANIPULATOR LINK REG
*/* D (YES,SETADDR,NO,) LOOKING AT CALLER TCB*/
         CR    R4,R10              .IS CALLER THE JOB STEP TCB
         BE    SETADDR             .YES, BYPASS HIM
*/*SETTSTND: D (YES,BITRESET,NO,BITSET) RESET REQUEST*/
SETTSTND TM    SWITCHES,UNDOIT      .IS THIS A RESET
         BO    BITRESET            .YES, GO TO FLAG RESETTER
         B     BITSET              .NO, GO INSTEAD TO FLAG SETTER
         SPACE
*/*GETNEXT: D (YES,EXIT,NO,) EXPLICIT TCB REQUEST*/
GETNEXT  TM    SWITCHES,EXPLICIT   .IS THIS AN EXPLICIT TCB REQUEST
         BO    EXIT                .YES, GO TO EXIT
         SPACE
*/*SETADDR: S (NONE,EXIT,NEXT,) IEATRSCN: GET NEXT TCB IN TREE*/
SETADDR  LA    R11,EXIT                SET NO-MORE EXIT ADDR
         BAL   R14,IEATRSCN        .GO TO TREESCAN TO GET A RELATIVE
* RETURN HERE MEANS ANOTHER SUBTASK HAS BEEN FOUND. ITS ADDR IS IN R10.
* RETURN TO THE ADDR IN R11 MEANS SCAN COMPLETED
*/*CURRCHK: D (YES,GETNEXT,NO,SETTSTND) LOOKING AT CALLER TCB*/
CURRCHK  CR    R10,R4              .WAS CALLER'S TCB SELECTED
         BCR   E,R2                .YES, GO GET ANOTHER TASK
         B     SETTSTND            .NO, GO DO IT TO THE RELATIVE
         DROP  R4
       TITLE 'IEAVSETS...AOS/2...COMMON TCB FLAG SETTER && RESETTER'
         USING TCB,R10
* RESET NON-DISPATCHABILITY FLAG MANIPULATOR ROUTINES
         SPACE
*/*BITRESET: S TCBRDYCT: APPLY -1 TO TCB READY COUNT*/
BITRESET L     R9,FOXES                SET DELTA TO -1
         BAL   R11,TCBRDYCT            GO TO ASCBTCBS RTN
         LR    R12,R15                 COPY MASK INTO WORK REG
*/* D (NO,SDRESET,YES,) PRIMARY BITS TO BE AFFECTED*/
         TM    SWITCHES,PRIMARY    .IS 2NDARY MASK TO BE AFFECTED
         BNO   SDRESET             .YES, BR
         SPACE
* RESET PRIMARY NON-DISPACHABILITY FLAGS
*/* P 'AND' PRIMARY BITS WITH INVERTED RESET MASK*/
         N     R12,TCBFLGS4            N OFF PRIMARY BITS
         STCM  R12,C8+C4,TCBFLGS4      STORE UPDATED NON-DISP FLAGS
*/*PTEST: S TCBRDYCT: APPLY +1 TO TCB READY COUNT*/
PTEST    LA    R9,C1                   SET UP DELTA OF +1
         BAL   R11,TCBRDYCT            UPDATE CT NOW THAT BITS RESET
*/* R RETURN TO CALLER*/
         BR    R2                  .GO GET ANOTHER TASK
         SPACE
* RESET SECONDARY NON-DISPATCHABILITY FLAGS
*/*SDRESET: P 'AND' SECONDARY BITS WITH INVERTED RESET MASK*/
SDRESET  N     R12,TCBNDSP             N OFF SECONDARY BITS
         ST    R12,TCBNDSP             STORE UPDATED FLAGS
*/* D (NO,PTEST,YES,) ALL SECONDARY BITS NOW OFF*/
         BNZ   PTEST                   BR IF SOME STILL ON
*/*PBITOFF: P (,PTEST) TURN OFF PRIMARY SUMMARY BIT*/
PBITOFF  NI    TCBFLGS5,OFF-TCBPNDSP .NO, RESET PRIM NON-DISP SUM FLAG
         B     PTEST               .GO TEST FOR POSSIBLE TASK SWITCH
         EJECT
* SET NON-DISPATCHABILITY FLAG MANIPULATOR ROUTINES
         SPACE
*/*BITSET: S TCBRDYCT: APPLY -1 TO TCB READY COUNT*/
BITSET   L     R9,FOXES                DELTA OF -1
         BAL   R11,TCBRDYCT            GO TO ASCBTCBS UPDATE RTN
*/* D (NO,SDSET,YES,) PRIMARY BITS TO BE AFFECTED*/
         LR    R12,R15                 COPY MASK REG INTO WORK REG
         TM    SWITCHES,PRIMARY    .IS 2NDARY MASK TO BE AFFECTED
         BNO   SDSET               .YES, BR
         SPACE
* SET PRIMARY NON-DISPATCHABILITY FLAGS
*/*NDSET2: P 'OR' PRIMARY BITS WITH SET MASK*/
NDSET2   O     R12,TCBFLGS4            O INDICATED BITS ON
         STCM  R12,C8+C4,TCBFLGS4      STORE NEW NON-DISP FLGS
*/*SSET: S TCBRDYCT: APPLY +1 TO TCB READY COUNT*/
SSET     LA    R9,C1                   DELTA OF +1
         BAL   R11,TCBRDYCT            UPDATE CT NOW THAT BITS SET
*/*%D2: R RETURN TO CALLER*/
         BR    R2                  .GO GET ANOTHER TASK
         SPACE
* SET SECONDARY NON-DISPATCHABILITY FLAGS
*/*SDSET: P 'OR' SECONDARY BITS WITH SET MASK*/'
SDSET    O     R12,TCBNDSP             O SECONDARY BITS ON
         ST    R12,TCBNDSP             STORE NEW SET OF BITS
*/* D (YES,SSET,NO,) BITS ARE STILL ALL ZERO*/
         BZ    SSET                    BR IF NONE ARE NOW ON
*/* P (,%D2) TURN ON PRIMARY SUMMARY BIT*/
         OI    TCBFLGS5,TCBPNDSP       TURN ON PRIM SUM BIT
         BR    R2                      GO TO GET DESCENDANT
         TITLE 'IEAVSETS...AOS/2...ND,TCB, SD,TCB'
*   THIS CODE IS ENTERED WHEN NONDISPATCHABLE TCB ADDRESS IS SPECIFIED.
*   IT SETS ALL DESCENDENTS OF THE SPECIFIED TCB NONDISPATCHABLE.
*   IF THE 'E' PARAMETER HAS BEEN SPECIFIED, ONLY THE TASK
*   EXPLICITLY IDENTIFIED IS SET NONDISPATCHABLE.
         SPACE
* NON-DISPATCHABILITY EXPLICIT TCB ROUTINE
*/*NDETCB: E CODE 12*/
NDETCB   EQU   *                   LABEL
*/*SDETCB: E CODE 11*/
*/* P TURN ON EXPLICIT TCB SWITCH*/
SDETCB   OI    SWITCHES,EXPLICIT       SET THE EXPLICIT SW
         SPACE 2
* NON-DISPATCHABILITY TCB ROUTINE
*/*NDTCB: E CODE 5*/
NDTCB    EQU   *                   LABEL
*/*SDTCB: E CODE 10*/
*/* D (YES,TCBND,NO,) REQUEST IS FOR PRIMARY ND*/
SDTCB    LA    R8,C0(,R1)          .INIT TREESCAN REGS W/SELECTED TCB
         LR    R10,R8              .SET THE TCB REGISTER
         LA    R2,GETNEXT          .INIT SUBROUTINE LINK REG
         LR    R7,R15                  SAVE MASK ACROSS SIGP
         TM    SWITCHES,PRIMARY        TEST FOR ND/SD
         BO    TCBND                  BR IF PRIMARY
*/* D (YES,,NO,MAINTCB) MASK INCLUDES STOP TCB BIT*/
         N     R15,STOPCHEK            SEE IF STOP TCB BIT IN 2NDY MASK
         BZ    MAINTCB             GO TO SET
*/* D (YES,,NO,ABEND14F) BOTH EXPLICIT AND RESET */
         TM    SWITCHES,EXPLICIT+UNDOIT    TEST FOR EXPL AND RESET
         BNO   ABEND14F            BR IF NOT BOTH               @Y02752
*/* P (,MAINTCB) RESET STOP COUNT IF ALREADY STOPPED */
         L     R15,STOPCHEK        GET STOP BIT MASK            @Y02752
         N     R15,TCBNDSP         AND WITH SECONDARY BITS      @Y02752
         BZ    MAINTCB             BRANCH IF NOT SET            @Y02752
         MVI   TCBSTPCT,C0         SET TO ZERO                  @Y02752
         B     MAINTCB             CONTINUE                     @Y02752
*/*TCBND: D (YES,ABEND14F,NO,) MASK INCLUDES SET MC BIT*/
TCBND    N     R15,SMCCHEK              SEE IF SMC BIT IN PRIM MASK
         BNZ   ABEND14F                BR IF SO - ALSO ILLEGAL
*/*MAINTCB: S SIGPCPUS: CLEAR OTHER CPUS OUT OF A.S.*/         @ZA30358
MAINTCB  EQU   *                                               @ZA30358
         SPACE
*        SIGPCPUS WAS FORMERLY CALLED ONLY FOR SET             @ZA30358
         BAL   R12,SIGPCPUS            CLEAR OTHER CPUS OUT OF @ZA30358
*                                      ADDRESS SPACE           @ZA30358
         LR    R15,R7                  RESTORE MASK            @ZA30358
*/* D (YES,CURRCHK,NO,) REQUEST IS FOR SET*/                   @ZA30358
         TM    SWITCHES,UNDOIT      .IS THIS A RESET
         BNO   CURRCHK                 NO, GO TO SET BITS ON   @ZA30358
*/* P (,CURRCHK) INVERT MASK BITS FOR RESET*/
         X     R15,FOXES               INVERT MASK FOR RESET
         B     CURRCHK                 GO TO MAINLINE
         DROP  R10
         TITLE 'IEAVSETS...AOS/2...STOP/START'
*   THE FOLLOWING SECTION OF CODE VALIDITY CHECKS THE TCB ADDRESS
*   PASSED IN REGISTER 1 FOR USE IN THE STOP/START FUNCTION.
*   IF NO TCB ADDR WAS PASSED IN REG 1 THEN THE CURRENT TCB IS USED.
*
         SPACE
         USING TCB,R9
*  STOP/START PRE-PROCESSING
*/*PROCEED: E ENTRY CODES 6,7*/
PROCEED  LA    R1,C0(,R1)             .CLEAR HIGH ORDER BYTE OF TCB ADD
         SR    R2,R2                   INIT STOP-PENDING CT
         LR    R7,R1                   SAVE TCB ADDR ACROSS SIGPCPUS
*/* S SIGPCPUS: CLEAR OTHER CPUS OUT OF A.S.*/
         SPACE
*        SIGPCPUS WAS FORMERLY CALLED ONLY FOR STOP            @ZA30358
         BAL   R12,SIGPCPUS            CLEAR OUT OTHER CPUS
*/*NOSTOP: D (NO,SETEXIT,YES,) EXPLICIT TCB ADDR SPECIFIED*/
NOSTOP   LTR   R1,R7                   RESET AND TEST TCB ADDR
         BZ    SETEXIT                 IF ZERO, TARGET IS ALL SUBTASKS
*/* D (YES,STOPTEST,NO,) REQUEST VIA BRANCH ENTRY*/
         LR    R10,R1              .INIT R10 IN CASE OF FOLLOWING BR'S
         TM    SWITCHES,BRANCH    .IS THIS A BRANCH ENTRY
         BO    STOPTEST           .YES, BYPASS VAL CHECK OF TCB ADDR
*/* D (YES,STOPTEST,NO,) CALLER SVC OLD PSW KEY IS SUPVR*/
         L     R7,TCBRBP-TCB(,R4)       GET CURRENT RB
         TM    RBOPSW+C1-RBSECT(R7),KEYF  TEST KEY FIELD
         BZ    STOPTEST                BR IF SUPVR KEY
*/* L (NO,BADTCB,YES,STOPTEST) FOUND SPECIFIED TCB ON CALLERS SUBTREE*/
         LR    R10,R4              .INIT R10 FOR SCAN WITH CUR TCB ADDR
SEARCH   LR    R9,R10              .SET TCB REG
         L     R10,TCBLTC          .LOAD A DAUGHTER
SRCH1    LTR   R10,R10             .IS THERE A DAUGHTER/SISTER
         BZ    GETSIS              .NO, GO GET ONE
TCBHIT   CR    R10,R1              .YES, IS THIS THE SPECIFIED TCB
         BE    STOPTEST            .YES, GO TO STOP OR START
         B     SEARCH              .NO, RESEARCH
GETSIS   L     R10,TCBNTC          .LOAD THE SISTER
         CR    R4,R9               .ARE WE BACK TO TOP OF TREE
         BE    BADTCB              .YES, THE SPECIFIED TCB WASN'T FOUND
GETMOM   L     R9,TCBOTC           .NO, LOAD THE MOTHER
         B     SRCH1               .AND RESEARCH
         SPACE 2
*/*SETEXIT: S (NONE,OVER,NEXT,) IEATRSCN: GET NEXT TCB IN SUBTREE*/
SETEXIT  LR    R10,R4              .INIT R10 FOR SCAN
         LR    R8,R4               .START SCAN FROM CURR TCB
STRTSCAN LA    R11,OVER                SET NO-MORE RETURN ADDR
         BAL   R14,IEATRSCN            GO FIND NEXT RELATIVE
*  RETURN HERE MEANS A RELATIVE WAS FOUND.  ITS ADDRESS IS IN R10.
*  RETURN TO THE ADDR IN R11 MEANS SCAN COMPLETED.
*/*STOPTEST: S TCBRDYCT: APPLY -1 TO TCB READY COUNT*/
STOPTEST L     R9,FOXES                DELTA OF -1
         BAL   R11,TCBRDYCT            GO TO ASCBTCBS UPDATER
*/* S TESTSTOP: START/STOP PROCESSING ROUTINE*/
         BAL   R14,TESTSTOP        .GO TO STOP OR START RTN
*/* S TCBRDYCT: APPLY +1 TO TCB READY COUNT*/
         LA    R9,C1                   DELTA OF +1
         BAL   R11,TCBRDYCT            GO TO ASCBTCBS UPDATER
*/*CKALTST: D (YES,,NO,SETEXIT) REQUEST IS FOR EXPLICIT TCB*/
CKALTST  LTR   R1,R1               IS THERE AN ADDR IN R1
         BZ    STRTSCAN            .NO, GO SCAN FOR MORE DECENDENTS
*/*OVER: D (NO,EXIT,YES,) ENTRY FOR SYNCH STOP*/
OVER     TM    SWITCHES,SYNCHTCB       ENTRY FOR SYNCH STOP
         BZ    EXIT                BR IF NOT SYNCH
*/* D (NO,SYNCHXIT,YES,) THERE ARE PENDING STOPS*/
         LTR   R2,R2               ARE ANY STOPS PENDING
         BZ    SYNCHXIT            BR IF NO NEED TO WAIT
*/* S TCBRDYCT: APPLY DELTA OF -1*/
Q28      L     R10,PSATOLD         ADDR OF CURRENT TCB
         L     R9,FOXES            DELTA OF -1
         BAL   R11,TCBRDYCT        GO TO ASCBTCBS UPDATER
*/* P TURN ON TCB AND RB SYNCH BITS- SET RB WAIT CT*/
         L     R7,TCBRBP-TCB(,R4)       GET ADDR OF RB TO WAIT
         S     R7,CRBPRFXL             ADJUST ADDR TO PREFIX
         OI    RBFLAGS1-RBPRFX(R7),RBSSSYN SET SYNCH BIT IN WAITING RB
         LA    R7,RBPRFXLN(,R7)         RESET TO RBSECT
         STC   R2,RBWCF-RBSECT(,R7)     STORE WAIT COUNT
         OI    TCBFBYT2-TCB(R4),TCBSSSYN SET SUMMARY BIT IN TCB
*/*SYNCHXIT: D (YES,BREXIT,NO,EXIT) BRANCH ENTRY TO SYNCH*/
SYNCHXIT TM    SWITCHES,BRANCH         TEST FOR BRANCH ENTRY
         BO    BREXIT                  BR IF BRANCH ENTRY
         B     EXIT                SVC, BR
         DROP  R9
         EJECT
*   THE FOLLOWING CODE IS ENTERED ON BEHALF OF THE STOP/START OPTION.
*   THIS CODE SETS OR RESETS THE STOP/START
*   SECONDARY NON-DISPATCHABILITY BIT.  IF NO SECONDARY NON-
*   DISPATCHABILITY BITS ARE SET THE PRIMARY NON-DISPATCHABILITY
*   BIT IS RESET.  THE TCB STOP/START COUNT IS ALSO MAINTAINED
         SPACE
*/*TESTSTOP: E ADJ TCB BITS */                                 @Z40FPYK
*/* N ADJUST START STOP COUNT */                               @Z40FPYK
*/* N ADJUST SD/ND BITS */                                     @Z40FPYK
*/* D (YES,STCBSTAR,NO,) REQUEST FOR START*/
TESTSTOP TM    ACTCODE,START       .IS THIS A START
         BO    STCBSTAR            .YES GO TO START
         SPACE
*  STOP ROUTINE
         USING TCB,R10
*/*STCBSTOP: P INCREMENT STOP TCB COUNT IN STOPPED TCB */
*/* N ABEND IF COUNT WRAPS FROM X'FF'             */            @Y02753
STCBSTOP IC    R12,TCBSTPCT        .GET STOP/START COUNT
         TM    TCBSTPCT,OFF        TEST FOR WRAP CONDITION     @YM00217
         BO    ABEND14F            ABEND IF GOING TO WRAP      @YM00217
         LA    R12,R1(,R12)         .INCREMENT THE COUNT
         STC   R12,TCBSTPCT        .STORE NEW COUNT
*/*TESTRB: D (YES,SETWCPLT,NO,) ATTNS DEFERRED BIT IS ON IN TCB*/
TESTRB   TM    TCBTSFLG,TCBATT     .ARE ATTENTION EXITS BLOCKED
         BO    SETWCPLT            .YES
*/* STPPON: P TURN ON STOP BIT AND PRIMARY SUMMARY BIT*/
STPPON   OI    TCBNDSP2,TCBSTPP    .SET THE STOP FLAG
         OI    TCBFLGS5,TCBPNDSP   .SET PRIMARY NON-DISPATCH FLAG
*/*%D3: R RETURN TO CALLER*/
         BR    R14                 .RETURN TO STOP CALLER
*/*SETWCPLT: P  TURN ON STOP PENDING BIT*/
SETWCPLT OI    TCBTSFLG,TCBSTPPR   .SET STOP PENDING FLAG
*/* D (YES,%D3,NO,) HAS TASK TERMINATED */
         TM    TCBFLGS5,TCBFC       IS TASK TERMINATED         @YM04151
         BOR   R14                  YES,RETURN AND DONT INCR CT@YM04151
*/* P (,%D3) INCR COUNT OF STOP PENDING TASKS FOR STOP SYNCH*/
         LA    R2,C1(,R2)           .BUMP STOP-PENDING CT
         BR    R14                 .RETURN TO STOP CALLER
         SPACE 2
* START ROUTINE
*/*STCBSTAR: D (YES,STOPOFF,NO,) STOP COUNT IS ALREADY ZERO*/
STCBSTAR CLI   TCBSTPCT,R0         .IS STOP/START COUNT 0
         BE    STOPOFF             .YES, RESET STOP PENDING FLAG
*/* P DECREMENT STOP COUNT */
         SR    R12,R12                 CLEAR WORK REG
         IC    R12,TCBSTPCT        .GET STOP/START COUNT
         BCTR  R12,R0              .DECREMENT THE COUNT
         STC   R12,TCBSTPCT        .STORE IT
*/* D (NO,%D3,YES,) STOP COUNT IS NOW ZERO*/
         LTR   R12,R12             .IS STOP/START COUNT NOW 0
         BNZR  R14              .NO, RETURN TO START CALLER
*/*STOPOFF: P TURN OFF STOP BIT AND STOP PENDING BIT*/
*/* D (NO,%D3,YES,) ALL SECONDARY BITS ARE NOW OFF*/
STOPOFF  NI    TCBTSFLG,OFF-TCBSTPPR     .YES, RESET STOP PEND FLAG
         NI    TCBNDSP2,OFF-TCBSTPP      .RESET THE STOP FLAG
         C     R12,TCBNDSP          ANY 2NDARY NON-DISP FLAGS ON?
         BNZR  R14                 .YES, RETURN TO START CALLER
*/* P (,%D3) TURN OFF PRIMARY SUMMARY BIT*/
         NI    TCBFLGS5,OFF-TCBPNDSP   .NO, RESET PRIM NON-DISP FLAG
         BR    R14                 .RETURN TO START CALLER
         DROP  R10
         TITLE 'IEAVSETS...AOS/2...SYNCHRONOUS STOP SUBTASKS'
*/*SYNCH: E CODE 14*/
*/* P (,PROCEED) TURN ON SYNCH TCB SWITCH- INDICATE ALL SUBTASKS*/
SYNCH    OI    SWITCHES,SYNCHTCB       SET SYNCH STOP BIT
         SR    R1,R1                   INDICATE ALL SUBTASKS TO STOP
         NI    SWITCHES,OFF-UNDOIT     CLEAR RESET INDICATOR   @YM08379
         B     PROCEED                 GO TO STOP CODE
         SPACE 2
*/*IEAVESSS: E SYNCH EP FOR EXIT*/
         ENTRY IEAVESSS
*/* P SAVE AND SET UP REGS*/
IEAVESSS L     R15,PSAAOLD             ASCB
         L     R15,ASCBASXB-ASCB(,R15)  ASXB
         L     R15,ASXBSPSA-ASXB(,R15)  WSA TBL
         L     R15,WSALSTAT-WSAL(,R15)  STATUS WSA
         STM   R0,R14,C0(R15)          SAVE REGS
         BALR  R6,R0                    BOOTSTRAP ADDRESSABILITY
         USING *,R6
         L     R6,AIGC079          .LOAD NEW BASE REG
         USING IGC079,R6
         LR    R5,R15                  WSA BASE
         LR    R3,R7                   ASCB BASE
*/* P GET MOTHER OF CURRENT TCB*/
         L     R10,TCBOTC-TCB(,R4)       GET NEXT TCB UP
*/*CHKTCBSS: D (NO,NEXTUP,YES,) THIS TCB WAITING FOR STOP*/
CHKTCBSS TM    TCBFBYT2-TCB(R10),TCBSSSYN THIS TCB WAITING ON STOPS
         BZ    NEXTUP                  BR IF NOT
*/* P RESET TCB SYNCH BIT */
         NI    TCBFBYT2-TCB(R10),OFF-TCBSSSYN RESET TCB BIT    @YM06115
*/* S TCBRDYCT: APPLY DELTA OF -1*/
         L     R9,FOXES                DELTA OF -1
         BAL   R11,TCBRDYCT            GO TO ASCBTCBS UPDATER
*/* P GET ADDR OF TOP RB*/
         L     R7,TCBRBP-TCB(,R10)      ADDR OF TOP RB
*/*CHKRBSSS: D (NO,NEXTOVER,YES,) THIS RB WAITING FOR STOP*/
CHKRBSSS S     R7,CRBPRFXL             ADJUST TO PREFIX
         TM    RBFLAGS1-RBPRFX(R7),RBSSSYN THIS RB WAITING ON STOPS
         LA    R7,RBPRFXLN(,R7)         RESET TO RBSECT
         BZ    NEXTOVER                BR IF NOT
*/* P DECREMENT RB WAIT COUNT*/
         IC    R2,RBWCF-RBSECT(,R7)     GET WAIT COUNT
         BCTR  R2,R0                   DECR
         STC   R2,RBWCF-RBSECT(,R7)     RESET RB WAIT COUNT
*/* D (YES,NEXTOVET,NO,) COUNT IS NOW ZERO*/
         CLI   RBWCF-RBSECT(R7),C0     IS COUNT NOW ZERO       @YM02758
         BE    NEXTOVET                BR IF YES               @YM06115
*/* P (,NEXTOVER) SET TCB SYNCH BIT */
         OI    TCBFBYT2-TCB(R10),TCBSSSYN SET TCB BIT          @YM06115
         B     NEXTOVER            GO TO NEXT RB               @YM06115
*/*NEXTOVET: P TURN OFF SYNCH BIT IN RB */
NEXTOVET S     R7,CRBPRFXL         ADJUST TO PREFIX            @YM06115
         NI    RBFLAGS1-RBPRFX(R7),OFF-RBSSSYN RESET RB SYNCH BIT
         LA    R7,RBPRFXLN(,R7)         RESET TO RBSECT
*/*NEXTOVER: D (YES,CHKRBSSS,NO,) NEXT ELEMENT IS RB*/
NEXTOVER TM    RBSTAB2-RBSECT(R7),RBTCBNXT TCB IS NEXT ON CHAIN
         L     R7,RBLINK-RBSECT(,R7)    TO NEXT RB IF ANY
         BZ    CHKRBSSS                BR IF ANOTHER RB
*/* S TCBRDYCT: APPLY DELTA OF +1*/
         LA    R9,C1                   DELTA OF +1
         BAL   R11,TCBRDYCT            GO TO ASCBTCBS UPDATER
*/*NEXTUP: P GET NEXT TCB FROM TCBOTC*/
NEXTUP   L     R10,TCBOTC-TCB(,R10)     ADDR OF NEXT UP TCB
*/* D (YES,CHKTCBSS,NO,) THERE IS ANOTHER TCB*/
         LTR   R10,R10                 IS THERE ANOTHER
         BNZ   CHKTCBSS                BR IF THERE IS A TCB
*/* P RESTORE REGS FROM WSA*/
         LM    R0,R14,WSA              RESTORE REGS
*/* R RETURN TO EXIT*/
         BR    R14                 RETURN TO EXIT
         TITLE 'IEAVSETS...AOS/2...STOP/START SRBS'
*   THE FOLLOWING CODE IS THE INFAMOUS STATUS STOP/START SRB ROUTINE.
*   IT CAUSES THE QUIESCING AND RESTARTING OF SYSTEM LEVEL SRBS WITHIN
*   AN ADDRESS SPACE.
         SPACE
*/*SRBS: E CODE 13*/
*/* D (YES,STARTSRB,NO,) REQUEST IS FOR START*/
SRBS     LTR   R1,R1                   TEST FOR START OR STOP
         BM    STARTSRB                BR IF SIGN BIT ON - MEANS START
*/* S SIGPCPUS: CLEAR OTHER CPUS OUT OF A.S.*/
*/* P GET FIRST TCB IN A.S. TCB Q*/
         LR    R9,R14                  SAVE RETURN ADDR ACROSS CALL
         BAL   R12,SIGPCPUS            BR TO CLEAR OUT OTHER CPUS
         LR    R14,R9                  RESTORE REG 14
         L     R10,ASCBASXB            ADDR OF ASXB
         L     R10,ASXBFTCB-ASXB(,R10)  TOP TCB IN A.S.
*/*SRBSTCBS: D (YES,DOWNQ,NO,) THIS IS CURRENT TCB*/
SRBSTCBS CR    R10,R4                  AT THE CURRENT TCB
         BE    DOWNQ                   YES, SKIP TO NEXT TCB
*/* S TCBRDYCT: APPLY -1 TO TCB READY COUNT*/
         L     R9,FOXES                DELTA OF -1
         BAL   R11,TCBRDYCT            GO TO ASCBTCBS UPDATER
*/* P TURN ON STOP SRB BIT AND PRIMARY SUMMARY BIT IN TCB*/
         OI    TCBNDSP3-TCB(R10),TCBSRBND   TCB ND WHILE SRBS STOPPED
         OI    TCBFLGS5-TCB(R10),TCBPNDSP  SET PRIMARY SUMMARY BIT
*/*DOWNQ: P GET ADDR OF NEXT SUBTASK*/
DOWNQ    L     R10,TCBTCB-TCB(,R10)     NEXT TCB ON RDY Q
*/* D (YES,SRBSTCBS,NO,) MORE TCBS ON Q*/
         LTR   R10,R10                 TEST FOR END OF Q
         BNZ   SRBSTCBS                BR IF MORE TCBS
QJFY1    L     R3,CVTPTR           GET ADDR OF CVT              @Y02753
         MVC   WSA+C4*R14(C4),CVTEXP1-CVTMAP(R3) FORCE DISP ENT @Y02753
*/* S SETLOCK: OBTAIN DISPATCHER LOCK*/
Q16      SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=QK17B
*/* P INCREMENT STOP SRB COUNT IN ASCB */
         L     R3,PSAAOLD          GET ADDRESS OF ASCB          @Y02753
         LH    R7,ASCBSSRB         GET STOP SRB CT
         LA    R7,C1(,R7)               INCR CT
         STH   R7,ASCBSSRB             SET NEW CT
*/* P SET EXIT REG 9 TO EXIT*/
         LA    R9,EXIT                 SET EXIT REG
*/* D (NO,RELDISPL,YES,) ARE ANY SRBS RUNNING*/
         CH    R10,ASCBSRBS            TEST FOR ANY RUNNING SRBS
         BZ    RELDISPL                BR IF NONE TO CALLER RIGHT AWAY
*/* P SET BIT IN ASCB MAKING ALL TCBS NDISP*/
         OI    ASCBFLG1,ASCBSTND       SET TCBS ND WHILE COUNTING DOWN
*/* P SET PSAANEW TO ZERO*/
Q17      ST    R10,PSAANEW             SET PSAANEW TO ZERO FOR DISP
*/*     R BR REG 9*/
         BR R9                         RETURN                  @YA02383
*/*RELDISPL: S SETLOCK: RELEASE DISPATCHER LOCK */
RELDISPL EQU   *                   LABEL
QK17B    SETLOCK RELEASE,TYPE=DISP,RELATED=(Q16,SSRBTEST)
*/*%D4: R BR REG 9*/
         BR    R9                      OUT
         SPACE
*/*STARTSRB: D (NO,SSRBTEST,YES,) ASID IS SPECIFIED*/
STARTSRB SLA   R9,C2                   MULT ASID BY FOUR
         BZ    SSRBTEST                BR IF NONE SUPPLIED
*/* P GET ASCB ADDR USING ASID AND ASVT*/
Q18      L     R3,CVTPTR               ADDR OF CVT
         L     R3,CVTASVT-CVTMAP(,R3)      ADDR OF ASVT
         L     R3,ASVTENTY-ASVT-C4(R3,R9) ASID IS INDEX TO ASCB ADDR
*/*SSRBTEST: S SETLOCK: OBTAIN DISPATCHER LOCK*/
SSRBTEST SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=(QK17B,STQP)
*/* P SET RETURN REG 9 TO EXIT*/
         LA    R9,EXIT                 SET RETURN ADDR
*/* D (NO,DECRSSRB,YES,RELDISPL) STOP SRB COUNT IS ALREADY ZERO*/
         LH    R7,ASCBSSRB             GET STOP SRB CT
         LTR   R7,R7               TEST IF ZERO ALREADY         @Y02753
         BNZ   DECRSSRB                BR IF NOT NOW ZERO
TESTLOCK B     RELDISPL                GO TO RELEASE DISP LOCK
*/*DECRSSRB: P DECREMENT STOP SRB COUNT*/
DECRSSRB BCTR  R7,R0                   DECR CT IN REG
         STH   R7,ASCBSSRB             SET CT IN ASCB
*/* D (NO,RELDISPL,YES,) COUNT IS NOW ZERO*/
         LTR   R7,R7                   NOW CT IS ZERO
         BNZ   RELDISPL                NO, EXIT
*/* P TURN OFF ASCBSTND ENSURING TCBS CAN RUN; RESET ASCBSNQS*/
         NI    ASCBFLG2,OFF-ASCBSNQS   RESET TO LET NQ SRBS RUN @Y02752
         NI    ASCBFLG1,OFF-ASCBSTND   ENSURE TCBS DISPATCHABLE
*/* S SETLOCK: RELEASE DISP LOCK*/
         BAL   R9,RELDISPL             RELEASE DISP LOCK AND COME BACK
*/* D (YES,EXIT,NO,) INVOKED BY SWAP-IN? */                    @YM08338
         L     R13,STFRRSAV        GET FRR PARM ADDR           @YM08338
         TM    STFRFLG,STFRSWIN    INVOKED BY SWAP-IN?         @YM08338
         BO    EXIT                SKIP MAKING TCBS DISP.      @YM08338
*/*SRBFRRT: D (YES,DOSLOCAL,NO,) THIS A REQUEST FOR CURRENT MEMORY*/
SRBFRRT  LH    R0,WSA              GET INPUT R0-ASID           @YM01997
         LTR   R0,R0               TEST FOR ZERO-CURRENT       @YM01997
         BZ    DOSLOCAL            BR IF A LOCAL REQUEST       @YM01997
         LA    R0,SRBSIZE+C4+C4+C4 SIZE OF SRB                 @YM01997
         LR    R7,R3               SAVE ASCB ADDR
*/* S SETLOCK: OBTAIN SALLOC LOCK */
Q19      SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,RELATED=Q11
*/* S GETMAIN: GET SRB TO FINISH START SRBS*/
Q20      GETMAIN RU,LV=(0),SP=245,BRANCH=(YES,GLOBAL)
*/* D (YES,NORLS,NO,) CALLER ALREADY HELD SALLOC LOCK*/
         L     R13,STFRRSAV        GET FRR PARM ADDR            @Y02752
         TM    STFRFLG,STFRSALL    TEST FOR SALL LOCK ON ENTRY  @Y02752
         BNZ   NORLS                   BR IF CALLER ALREADY HELD IT
*/* S SETLOCK: RELEASE SALLOC LOCK*/
Q11      SETLOCK RELEASE,TYPE=SALLOC,RELATED=Q19
*/*NORLS: P SET UP SRB FOR START SRBS*/
NORLS    LR    R3,R7                   RESET ASCB ADDR
         USING SRB,R1
         XC    SRB(SRBSIZE),SRB         CLEAR OUT FIELDS
         ST    R3,SRBASCB              TARGET ADDR SPACE
         LA    R7,SRBEPSRB             SRB ROUTINE ENTRY PT
         ST    R7,SRBEP                SET UP IN SRB
         LA    R7,RMTRADDR         STATUS RMTR ADDR            @YM02662
         ST    R7,SRBRMTR              FOR RMTR ADDR
Q46      L     R10,PSATOLD             GET CURRENT TCB ADDR
         LH    R9,ASCBASID             CURRENT ASID
         LTR   R10,R10                 IN SRB MODE
         BNZ   SRBSCHED                 BR IF IN TCB MODE
Q47      L     R10,PSALCCAV            GET POINTER TO LCCA
         LM    R9,R10,LCCASRBF-LCCA(R10) PICK UP ASSOCIATED TCB/ASID
SRBSCHED STM   R9,R10,SRBFLC           SET UP PARENT TCB/ASID IDS
*/* S (,EXIT) SCHEDULE: SCHEDULE SRB- EP=SRBEPSRB*/
Q21      SCHEDULE SRB=(1),SCOPE=LOCAL
         DROP  R1
         B     EXIT                      OUT
*/*DOSLOCAL: S (,EXIT) SRBFRD0: SET TCBS DISPATCHABLE*/
DOSLOCAL BAL   R7,SRBFRD0          LINK TO SET TCBSDISP        @YM01997
         B     EXIT                LEAVE                       @YM01997
         SPACE
         USING *,R15
*/*SRBEPSRB: E SRB ENTRY FOR START SRBS*/
SRBEPSRB L     R6,AIGC079              LOAD COMMON BASE ADDR
         DROP  R15
*/* S SETLOCK: OBTAIN LOCAL LOCK*/
Q25      L     R3,PSAAOLD              GET CURRENT ASCB ADDR
Q26      SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=Q27
*/* S SETFRR: SET FRR COVERAGE */
QZJ67    SETFRR A,FRRAD=ASTNFRR,PARMAD=(R13),WRKREGS=(R8,R2)
         OI    STFRFLG,REFRR       SET FLAG FOR RECOVERY RTN
         ST    R0,STFRSVSB         SET ADDRESS OF SRB FOR FRR
         LR    R1,R0               PUT ADDRESS IN REG 1 FOR FREEMAIN
*/*SRBFRTRY: S (,SRBFRD00) SRBFRD0: SET TCBS DISPATCHABLE*/
SRBFRTRY LA    R7,SRBFRD00         LINK ADDR                   @YM01997
*/*SRBFRD0: E SET TCBS DISPATCHABLE RTN*/
*/* P GET TOP TCB IN ADDR. SPACE*/
SRBFRD0  L     R10,ASCBASXB        GET ADDR OF ASXB            @YM01997
         L     R10,ASXBFTCB-ASXB(,R10)  GET TOP TCB ADDR       @YM01997
*/*SRBEPRDY: S TCBRDYCT: APPLY -1 TO READY TCB COUNT*/
SRBEPRDY L     R9,FOXES                DELTA OF -1
         BAL   R11,TCBRDYCT            GO TO ASCBTCBS UPDATER
*/* P TURN OFF STOP SRB BIT IN TCB*/
         NI    TCBNDSP3-TCB(R10),OFF-TCBSRBND  TURN OFF NON-DISP BIT
*/* D (NO,SRBEPTCB,YES,) ALL SECONDARY BITS ARE NOW OFF*/
         SR    R8,R8                   ZERO FOR COMP
         C     R8,TCBNDSP-TCB(,R10)     SECONDARY BITS ALL 0
         BNE   SRBEPTCB                BR IF NOT
*/* P TURN OFF PRIMARY SUMMARY BIT*/
         NI    TCBFLGS5-TCB(R10),OFF-TCBPNDSP  YES, RESET SUMMARY BIT
*/* S TCBRDYCT: APPLY +1 TO READY TCB COUNT*/
         LA    R9,C1                   DELTA OF +1
         BAL   R11,TCBRDYCT            GO TO ASCBTCBS UPDATER
*/*SRBEPTCB: P GET NEXT TCB ON A.S. READY Q*/
SRBEPTCB L     R10,TCBTCB-TCB(,R10)     NEXT TCB ON RDY Q
*/* D (YES,SRBEPRDY,NO,) THERE IS ANOTHER TCB*/
         LTR   R10,R10                 ARE THERE ANY MORE
         BNZ   SRBEPRDY                BR IF MORE
         BR    R7                  RETURN                      @YM01997
SRBFRD00 EQU   *                   LABEL                       @YM01997
*/*SRBFRD00: S SETFRR: DELETE FRR COVERAGE */                   @Y02753
QJZ2     SETFRR D,WRKREGS=(R8,R2)                               @Y02753
*/* P (,EXFRITL) FREE SRB AND RELEASE LOCAL LOCK*/
QJZRL    B     EXFRITL             BR TO FREE SRB AND LOCK     @YM02662
         TITLE 'IEAVSETS...AOS/2... BR ENTRY FOR STARTSRBS'
         ENTRY IGC07903                                         @Y02752
*/*IGC07903: E START SRBS BR ENTRY*/                            @Y02752
*/* P (,STARTSRB) SAVE CALLER REGS, SET UP ENVIRNM. REGS*/
*
*        THIS ROUTINE IS BRANCH ENTERED TO DO A START SRB FUNCTION
*        SEE PROLOGUE FOR ENTRY REQUIREMENTS
*
         DROP  R6
         USING IGC07903,R15
IGC07903 STM   R0,R14,C0(R13)      SAVE REGS                    @Y02752
         L     R6,AIGC079          GET BASE REG                 @Y02752
         DROP  R15                                              @Y02752
         USING IGC079,R6                                        @Y02752
         LR    R9,R0               SETASID REG                  @Y02752
         SRL   R9,C16              ADJUST FOR TEST              @Y02752
         L     R3,PSAAOLD          SET  CURRENT ASCB ADDR       @Y02752
         SR    R15,R15             CLEAR                        @Y02752
         ST    R15,R15*C4(,R13)    SET ZERO RET CODE            @Y02752
         LR    R5,R13              SET SAVE AREA ADDR REG       @Y02752
         USING WSA,R5                                           @Y02752
         MVI   SWITCHES,C0         CLEAR, ASSURE BR ENTRY EXIT  @Y02752
QJYF0    SETFRR A,FRRAD=ASTNFRR,PARMAD=(R13),WRKREGS=(R8,R2)    @Y02752
QJYF00   ST    R13,STFRRSAV        SAV PARM AREA ADDR           @Y02752
         OI    STFRFLG,STFRSALL+STBRSRB+STFRSWIN  SALLOC LOCK, BRANCH  X
                                   ENTRY, INVOKED BY SWAP-IN   @YM08338
         B     STARTSRB            GO TO STARTSRB RTN           @Y02752
         TITLE 'IEAVSETS...AOS/2...SET CALLER TCB ND,SD'
*   THIS ROUTINE APPLIES THE GIVEN MASK OF NON-DISPATCHABILITY BITS TO
*   THE CALLING TCB AND THEN INTERFACES TO THE DISPATCHER.
         SPACE
*/*CALLER: E CODE 15,16*/
CALLER   LR    R10,R4                  CURRENT TCB ADDRESS
*/* S BITSET: SET NDISP BITS ON*/
         BAL   R2,BITSET               GO TO BIT SETTING ROUTINE
*/*BREXIT: P DISABLE CURRENT PSW USING STNSM*/
BREXIT   STNSM C0(R5),OFF-C2-C1        DISABLE TO ENTER DISP
*/* S SETFRR: PURGE EXISTING FRR STACK*/
Q29      SETFRR P,WRKREGS=(R7,R8)      PURGE FRR STACK
*/* S SETLOCK: RELEASE LOCAL LOCK*/
Q30      SETLOCK RELEASE,TYPE=LOCAL,RELATED='INPUT REQUIREMENT'
*/* R DISPATCHER IEA0DS*/
         L     R15,DISPTCHR            GET ENTRY POINT IEA0DS
         BR    R15                     GO TO DISPATCHER
         EJECT
*/*XMGO: S SETLOCK: OBTAIN SALLOC LOCK*/
XMGO     SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,RELATED=Q33
*/* S GETMAIN: GET SRB FOR XMSTATUS OPERATION*/
         LR    R10,R15                 SAVE
         LR    R11,R0                      PARM
         ICM   R11,C2,SWITCHES         SAVE FLAGS FOR XMSTATUS
         LR    R12,R1                          REGS
         LA    R0,SRBSIZE+C4+C4+C4     SIZE OF SRB
         LR    R2,R3                   SAVE ASCB BASE REG
Q32      GETMAIN RU,LV=(0),SP=245,BRANCH=(YES,GLOBAL)
         USING SRB,R1
         LR    R3,R2                   RESET ASCB BASE
         STM   R10,R12,SRBEND          SET UP PARMS
*/* S SETLOCK: RELEASE SALLOC LOCK*/
Q33      SETLOCK RELEASE,TYPE=SALLOC,RELATED=XMGO
*/*OWNEDSAL: P INIT FIELDS IN XMSTATUS SRB*/
OWNEDSAL XC    SRB(SRBSIZE),SRB        ZERO MAIN PART OF SRB
         SLA   R9,C2                   MULTIPLY ASID BY FOUR
Q34      L     R10,CVTPTR              GET ADDR OF CVT
         L     R10,CVTASVT-CVTMAP(,R10)    ADDR OF ASVT
         L     R15,ASVTENTY-ASVT-C4(R9,R10)  ADDR OF DESIRED ASCB
         ST    R15,SRBASCB             SET TARGET ASCB ADDR IN SRB
         LA    R9,XMENTRY              XM STATUS ENTRY POINT
         LA    R10,RMTRADDR            RMTR ADDR
         STM   R9,R10,SRBEP            SET IN SRB
Q35      L     R10,PSATOLD             GET CURRENT TCB ADDR
         LH    R9,ASCBASID             CURRENT ASID
         LTR   R10,R10                 IN SRB MODE
         BZ    NOASTCB                 BR IF IN SRB MODE       @YM06167
*                                      TASK MODE
Q36      CH    R9,ASCBASID-ASCB(,R15)  SCHEDULE TO CURRENT A.S.@YM06167
         BE    NOASTCB                 YES, OMIT ASSOCIATION   @YM06167
*   NOTE THAT THE SRB IS ONLY ASSOCIATED WITH THE ISSUING TCB/ASID FOR
*   A TASK MODE CROSS MEMORY FUNCTION TO OTHER THAN THE CURRENT A.S.
*   THIS AVOIDS HAVING A SCHEDULED SRB PURGED AT TASK TERMINATION (IF
*   IT HAD NOT YET BEEN DISPATCHED). ALSO NOTE, NOW SOME SRBS DO NOT
*   CONTAIN ISSUER INFORMATION SUCH THAT AN SRB FAILURE CAN BE RELATED
*   BACK TO THE ISSUING TASK.                                  @YM06167
         STM   R9,R10,SRBFLC           SET ASSOCIATION FIELDS  @YM06167
NOASTCB  LA    R9,SRBEND               PARM ADDR
         ST    R9,SRBPARM              SET ADDR
*/* S (,EXIT) SCHEDULE: XMSTATUS SRB- EP=XMENTRY*/
Q37      SCHEDULE SRB=(1),SCOPE=LOCAL
         B     EXIT                    DONE
         SPACE 3
         USING *,R15
*/*XMENTRY: E SRB ENTRY FOR XMSTATUS OTHER THAN START SRBS*/
*/* S SETLOCK: OBTAIN LOCAL LOCK*/
XMENTRY  SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=Q41
*/* S SETFRR: SET FRR COVERAGE */
QXMJ     SETFRR A,FRRAD=ASTNFRR,PARMAD=(R13),WRKREGS=(R8,R3)
QXMRJ    DS    0H                  TEST LABEL                   @Y02752
         ST    R0,STFRSVSB         SAVE SRB ADDR IN FRR PARM    @Y02752
*/*XMRTRY: P (,NOTSTP) BOOTSTRAP REGS AND SWITCHES FOR XMSTATUS*/
XMRTRY   DS    0H                  TEST LABEL                   @Y02752
Q43      L     R3,PSAAOLD              CURRENT ASCB ADDR
         L     R5,ASCBASXB             ASXB ADDR
         L     R5,ASXBSPSA-ASXB(,R5)    ADDR OF WSAVT
         L     R5,WSALSTAT-WSAL(,R5)    ADDR OF STATUS LOCAL WSA
         ST    R13,STFRRSAV        SAVE PARM AREA ADDRESS      @YM03288
         ST    R0,WSA                  SAVE SRB ADDR IN WSA
         L     R6,AIGC079              ESTABLISH COMMON BASE
         DROP  R15
         LR    R1,R0                   ADDR OF SRB
         LM    R15,R1,SRBEND
         STCM  R0,C2,SWITCHES          SET UP SAME FLAGS HERE
         OI    SWITCHES,XMSTATUS       ALSO, TURN ON XMSTATUS BIT
         NI    SWITCHES,OFF-BRANCH     ORIG ENTRY IS IRRELEVANT NOW
         DROP  R1
         SR    R4,R4                   CLEAR TCB POINTER
         LA    R2,OFF                  MASK
         NR    R2,R0                   ISOLATE CODE IN R2
         B     NOTSTP                  BR TO MAINLINE
         SPACE 2
*/*RMTRADDR: E RMTR FOR XMSTATUS */
         USING RMTRADDR,R15
RMTRADDR LR    R8,R14              SAVE RETURN                 @YM02662
*/* N (,EXFREE) GO TO FREE SRB */
         L     R6,AIGC079          GET COMMON BASE             @YM02662
         DROP  R15
         USING IGC079,R6
         B     EXFREE              GO TO FREE                  @YM02662
         TITLE 'IEAVSETS...AOS/2...IEATRSCN(TREESCAN)'
*   THIS IS THE NOTORIOUS TREESCAN ROUTINE.  THE ROUTINE PASSES BACK IN
*   R10 A DESCENDENT OF THE TCB WHOSE ADDRESS WAS PASSED TO IT IN R10.
*   R8, R11 AND R14 MUST BE SETUP AS DESCRIBED IN THE PROLOG.
         SPACE
         USING TCB,R9
         USING TREESCAN,R7
*/*IEATRSCN: E TREESCAN - TCB FAMILY SEARCH RTN*/
*/* P R9<--R10*/
IEATRSCN BALR  R7,R0               .LOAD BASE REG
TREESCAN LR    R9,R10              .INIT REG FOR SCAN
*/* P R10<--LTC(R9)*/
         L     R10,TCBLTC          .LOAD THE DOTTER
*/*SCAN1: D (YES,%D5,NO,) R10=0*/
SCAN1    LTR   R10,R10             .IS THERE A DOTTER/SISTER
*/* R RETURN REG 14*/
         BNZR   R14               .YES, RETURN W/DECENDENT IN R10
*/*%D5: P R10<--NTC(R9)*/
         L     R10,TCBNTC          .NO, LOAD THE SISTER
*/* D (NO,GETOTC,YES,) R8=R9*/
         CR    R8,R9               .IS THIS THE TOP TCB
*/* R RETURN REG 11*/
         BER   R11                 .YES, THE TREE'S BEEN SCANNED
*/*GETOTC: P (,SCAN1) R9<--OTC(R9)*/
GETOTC   L     R9,TCBOTC           .NO, BACKUP ONE RELATIVE
         B     SCAN1               .GO CHECK HER
         DROP  R7,R9
         TITLE 'IEAVSETS...AOS/2...STOP NON-Q''BLE SRBS (BRANCH ENTRY)'
*   THIS ROUTINE IS BRANCH-ENTERED BY SWAP TO STOP NON-QUIESCEABLE SRBS
*   ENTRY-REQUIREMENTS ARE THAT REG 15 CONTAIN THE RETURN ADDRESS, AND
*   THAT REGS 11-14 MAY NOT BE PRESERVED.
         SPACE 2
*/* E IEAVNQSS*/
*/* S SETLOCK: OBTAIN LOCAL LOCK*/
IEAVNQSS SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,RELATED=Q45
         SPACE 2
         ENTRY IEAVSSNQ
*/* E IEAVSSNQ*/
*/* P BOOTSTRAP TO SAVE AREA- SAVE REGS*/
IEAVSSNQ L     R14,PSAAOLD             ASCB
         L     R14,ASCBASXB-ASCB(,R14)  ASXB
         L     R14,ASXBSPSA-ASXB(,R14)  WSA TBL
         L     R14,WSALSTAT-WSAL(,R14)  STATUS WSA
         STM   R0,R15,C0(R14)      SAVE REGS
         LR    R2,R14              SAVE WSA ADDR
*/* P ESTABLISH ADDRESSABILITY*/
         BALR  R6,R0                    BOOTSTRAP ADDRESSABILITY
         USING *,R6
         L     R6,AIGC079          .LOAD NEW BASE REG
         USING IGC079,R6
Q51      L     R3,PSAAOLD              ADDR OF ASCB
*/* S SETLOCK: OBTAIN SALLOC LOCK*/
Q03      SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,RELATED=(Q48,Q50)
*/* S SETLOCK: OBTAIN DISPATCHER LOCK*/
Q08      SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,RELATED=(Q49,OUT)
*/* P SET NONQ SRBS NDISP BIT IN ASCB*/
         OI    ASCBFLG2,ASCBSNQS SET NON-Q SRBS NDISP
*/* D (YES,OUT,NO,) COUNT OF RUNNING SRBS IS ZERO*/
         SR    R12,R12             CLEAR WORK REG
         LH    R12,ASCBSRBS        GET COUNT OF RUNNING SRBS
         LTR   R12,R12             IS COUNT ZERO
         BZ    OUT                 RETURN IF ZERO
*/* P RESET NONQ SRBS NDISP BIT IN ASCB*/
         NI    ASCBFLG2,OFF-ASCBSNQS OFF NON-Q SRB NDISP BIT
*/* P SET ALL TCBS IN A.S. NDISP*/
         OI    ASCBFLG1,ASCBSTND MAKE ALL TCBS IN A.S. NDISP
*/* P ESTABLISH RESUME ENVIRONMENT IN CURRENT TCB/RB*/
Q31      L     R13,PSATOLD         GET ADDR OF CURRENT TCB
         L     R14,TCBRBP-TCB(,R13) GET ADDR OF CURRENT RB
         LA    R12,IEAVNQSS        REDISP ADDRESS
         ST    R12,RBOPSW+C4-RBSECT(,R14) SET UP REDISP PSW ADDR
         MVC   TCBGRS-TCB(C64,R13),C0(R2) SAVE RESUME REGS
*/* S SETLOCK: RELEASE LOCAL LOCK*/
Q45      SETLOCK RELEASE,TYPE=LOCAL,RELATED=IEAVNQSS
*/* S SETLOCK: RELEASE SALLOC LOCK*/
Q48      SETLOCK RELEASE,TYPE=SALLOC,RELATED=Q03
*/* S SETLOCK: RELEASE DISPATCHER LOCK (DISABLED)*/
Q49      SETLOCK RELEASE,DISABLED,TYPE=DISP,RELATED=Q08
*/* R DISPATCHER*/
         L     R15,DISPTCHR        GET ADDR OF DISP BR E
         BR    R15                 GO
*/*OUT: S SETLOCK: RELEASE DISPATCHER LOCK*/
OUT      SETLOCK RELEASE,TYPE=DISP,RELATED=Q08
*/* S SETLOCK: RELEASE SALLOC LOCK*/
Q50      SETLOCK RELEASE,TYPE=SALLOC,RELATED=Q03
*
*        NOTE : SINCE TCBS ARE NON-DISPATCHABLE (VIA RCT QUIESCE),
*        THE NON-DISPATCHABILITY BIT, SET WHEN SRBS WERE STOPPED, IS
*        RESET NOW TO AVOID SCHEDULING AN SRB DURING SWAP-IN TO RESET
*        THE TASKS DISPATCHABLE                                @YM08338
*
*/* S SRBFRD0: SET TCBS DISPATCHABLE */                        @YM08338
         BAL   R7,SRBFRD0          SET TCBS DISPATCHABLE       @YM08338
*/* P RESTORE INPUT REGS*/
         L     R15,ASCBASXB        ASXB
         L     R15,ASXBSPSA-ASXB(,R15)  WSA TBL
         L     R15,WSALSTAT-WSAL(,R15)  STATUS WSA
         LM    R0,R15,C0(R15)      LOAD REGS
*/* R BR R14*/
         BR    R15                 RETURN
*/*STATUS: END */
         TITLE 'IEAVSETS...AOS/2...CONSTANTS'
*        THESE CONSTANTS ARE ADDRESSABLE BY BOTH THE FRR RTN
*        AND THE MAIN LINE STATUS CODE.  THE TECHNIQUE USED
*        IS THAT THE FRR USES THE START OF THE CONSTANTS
*        AS THE BEGINING OF ADDRESSABILITY AND THE MAINLINE
*        USES THEN AT THE END OF ITS ADDRESSABILITY.
*
*        THE FOLLOWING DUMMY CONSTANT MUST BE FIRST
*
CONST    DS    0D                   DUMMY FOR FRR ADDRESSABILITY
*        THE FOLLOWING CONSTANTS ARE USED FOR INTRAMODULE
*        ADDRESSABILITY.
*
*
AIGC079  DC    A(IGC079)           .ADDR OF STATUS
MEMSW    DC    V(IEAVEMS0)         .MEMORY SWITCH EP
DISPTCHR DC    V(IEA0DS)           .DISPATCHER EP
CRBPRFXL DC    A(RBPRFXLN)         CONSTANT TO ADJUST TO RB PRFX
ASTNFRR  DC    A(STNFRRE)          ADDRESS OF FRR               @Y02753
STREMS   DC    AL1(ENDMSGH-STRECPM)  SDUMP RECPM LIST           @Y02753
STRECPM  DC    CL8'IEAVSETS'       SETRP RECPARM LIST - MOD NM  @Y02753
         DC    CL8'IGC079'         PARMLIST - CSECT NAME        @Y02753
         DC    CL8'IGC079'         PARMLIST - FRR ID            @Y02753
MOREMSG  DC    C' ERROR IN STATUS' END OF SDUMP MSG
ENDMSGH  EQU   *                   TAG FOR END OF MSG
AIGCR244 DC    V(IGC044R2)         ADDR OF CHAP Q VERIFYER      @Y02753
SFLAGOFF DC    X'00001002'         DISP AND CMS LOCK STRING    @YA02710
SFLAGON  DC    X'00001402'         DISP, SALLOC,AND CMS LOCK   @YA02710
FOXES    DC    4X'FF'              .A WORD OF FOXES
SMLHC    DC    X'0000FFFF'         .MASK TO LEAVE ONLY AC       @Y02753
MASK1    DC    AL1(255-(TCBS3A)),X'FFFFFF' TCBS3A MASK FOR CS  @ZA11584
MASK2    DC    AL1(TCBS3A),X'000000' SETTING TCBS3A MASK FOR CS@ZA11584
HIBIT    DC    X'80000000'         .SIGN BIT ONLY
SMCCHEK  DC    F'0'                .MASK FOR SMC BIT
         ORG   SMCCHEK+TCBFLGS5-TCBFLGS4
         DC    AL1(TCBSTP)         .SMC BIT
         ORG
STOPCHEK DC    F'0'                .MASK FOR STOP BIT
         ORG   STOPCHEK+TCBNDSP2-TCBNDSP
         DC    AL1(TCBSTPP)        .STOP BIT
         ORG
QUIRKS   EQU   *-1                 .CHARACTERISTICS TABLE
         DC    AL1(NOTND+NOXM)         1
         DC    AL1(0)                  2
         DC    AL1(ND+XMRESET+ACPMSK+ACSFT)   3
         DC    AL1(ND+NOXM+ACSFT)      4
         DC    AL1(ND+XMSET+XMRESET+ACPTCB+ACPMSK+ACSFT)  5
         DC    AL1(NOTND+NOXM+ACPTCB)  6
         DC    AL1(NOTND+NOXM+ACPTCB)  7
         DC    AL1(NOTND+XMRESET+ACPMSK+ACSFT)   8
         DC    AL1(NOTND+NOXM+ACSFT)   9
         DC    AL1(NOTND+XMSET+XMRESET+ACPTCB+ACPMSK+ACSFT)  10
         DC    AL1(NOTND+XMSET+XMRESET+ACPTCB+ACPMSK+ACSFT)  11
         DC    AL1(ND+XMSET+XMRESET+ACPTCB+ACPMSK+ACSFT) 12
         DC    AL1(NOTND+XMRESET)      13
         DC    AL1(NOTND+NOXM)         14
         DC    AL1(NOTND+NOXM+ACPMSK+ACSFT) 15
         DC    AL1(ND+NOXM+ACPMSK+ACSFT)  16
         SPACE 2
NOXM     EQU   X'00'                   XM NOT ALLOWED
XMSET    EQU   X'02'                   XM ALLOWED FOR SET
XMRESET  EQU   X'01'                   XM ALLOWED FOR RESET ONLY
NOTND    EQU   X'40'                   NOT PRIMARY N-DISP PROCESS
ND       EQU   X'00'                   PRIMARY N-DISP PROCESS
ACPTCB   EQU   X'20'               FLAG TO SAY TCB ADDR IS PASSED
ACPMSK   EQU   X'10'               FLAG TO SAY MASK IS PASSED
ACSFT    EQU   X'08'               FLAG TO SAY RETRY IF FROM TOP
BRATAB   DC    AL2(ABEND14F-IGC079)  .RESERVED SHOULD NEVER BRANCH HERE
         DC    AL2(MCSTEP-IGC079)   1 .MUST COMPLETE STEP
         DC    AL2(ABEND14F-IGC079) 2 .MUST COMPLETE SYSTEM
         DC    AL2(NDSTEP-IGC079)   3 .NON-DISPATCHABLE STEP
         DC    AL2(NDSYSTEM-IGC079) 4 .NON-DISPATCHABLE SYSTEM
         DC    AL2(NDTCB-IGC079)    5 .NON-DISPATCHABL TCB ADDR-ALL SUB
         DC    AL2(PROCEED-IGC079)  6 .STOP
         DC    AL2(PROCEED-IGC079)  7 .START
         DC    AL2(SDSTEP-IGC079)   8 .2NDARY DISPATCHABILITY STEP
         DC    AL2(SDSYSTEM-IGC079) 9 .2NDARY DISPATCHABILITY SYSTEM
         DC    AL2(SDTCB-IGC079)   10 .2NDARY DISPATCH TCB ADDR-ALL SUB
         DC    AL2(SDETCB-IGC079)  11 .2NDARY DISPATCH TCB ADDR- 1TASK
         DC    AL2(NDETCB-IGC079)  12 .NON-DISP TCB ADDR - 1 TASK
         DC    AL2(SRBS-IGC079)    13 .SYSTEM LEVEL SRBS
         DC    AL2(SYNCH-IGC079)   14 .STOP SUBTASKS SYNCH
         DC    AL2(CALLER-IGC079)  15 .SET CALLER SD
         DC    AL2(CALLER-IGC079)  16 .SET CALLER ND
*/*STFRR: CHART */
         TITLE 'IEAVSETS...AOS/2...FUNCTIONAL RECOVERY RTNS'
*/*STNFRRE: E  STATUS  FRR ENTRY */
**********************************************************************
*        THIS ENTRY FROM RTM IS USED BY ALL STATUS SVC AND SVC       *
*        FUNCTIONAL BRANCH ENTRIES. THE GENERAL PATH THROUGH         *
*        THE RECOVERY ROUTINE IS AS FOLLOWS: (NOTE, ACTIONS OF       *
*        P= PERCOLATE, PD - PERCOLATE AFTER DUMP
*                                                                    *
*        1. MEMEMORY TABLES OK - SDWAFMID=0 - (P)                    *
*        2. VERIFY ASCB & TCBS - CHAP ENTRY   (P)                    *
*        3. TEST FOR PECOLATED TO (P)                                *
*        4. RECORD USING DEFAULTS                                    *
*        5. ISSUE SDUMP IF ERROR OCCURED IN STATUS (PD)              *
*                                                                    *
**********************************************************************
         DROP  R3
         USING ASCB,STASCB
         USING SDWA,STSDWAR1
STNFRRE  DS    0H                  TESTING LABEL
         BALR  STBASE,C0           ESTAB ADDRESSABILITY
         USING *,STBASE
         L     STBASE,ACONST       GET CONSTANT ADDR FOR BASE
         USING CONST,STBASE        USE IT FOR ADDRESSABILITY
*/* P SAVE RETURN REG */
         LR    RETSV,R14           SAVE RETURN REG
*/* P GET ADDRESS OF FRR WORK AREA */
         L     STPADP,SDWAPARM     GET WORK AREA ADDRESS
         L     STWRK1,PSAHLHI      GET LOCKS HELD STRING       @YA02710
*/* D (YES,STYSALL,NO,) SALLOC LOCK HELD ON ENTRY */
         TM    STFRFLG,STFRSALL    TEST IF SALLOC FLAG SET
         BO    STYSALL             BR IF DONT WANT RELEASED ON FRR ERR
*/* P (,CKFID) MODIFY SDWA TO REL CMS, DISP, SALLOC WHEN HELD*/
QSTN0    N     STWRK1,SFLAGON      MODIFY STRING TO REFLECT LOCKS TO   *
                                     BE FREED                  @YA02710
         B     STOREIT             BR TO SAVE STRING IN SDWA   @YA02710
*/*STYSALL: P MODIFY SDWA TO RELEASE CMS AND DISP WHEN HELD*/
STYSALL  N     STWRK1,SFLAGOFF     MODIFY STRING TO REFLECT LOCKS TO   *
                                     BE FREED                  @YA02710
STOREIT  STH   STWRK1,SDWAACF3-SDWA(STSDWAR1) PUT IN SDWA      @YA02710
*/*CKFID: D (NO,STPERC,YES,) SDWAFID EQ 0 (TRAN TABLES OK)  */
CKFID    SR    STWRK1,STWRK1       CLEAR
         CH    STWRK1,SDWAFMID      TEST IF RIGHT ASCB TABLES
         BNE   STPERC              BR NOT TO PERCOLATE
*/* D (YES,STPERC,NO,) WAS STATUS PECOLATED TO */
         TM    SDWAERRC,SDWAPERC   TEST FOR PECOLATED TO
         BO    STPERC              PERCOLATE IF SO
         OI    SDWADPVA,SDWAHEX    VRA TO CONTAIN HEX DATA
*
*        STATUS RECOVERY DOES NOT COPE WITH UNRECOVERABLE ERRORS
*        IN ROUTINES CALLED BY STATUS (GETMAIN, SETLOCK, ETC.)
*
         USING STFRRPAR,STPADP
*/* S IGC044R2:  CHAP RECOVERY TO VER. ASCB AND TCB FAM.Q*/
*
*        BRANCH TO CHAP TO VERIFY ASCB AND TCB FAMILY QUEUES
*        SEE PROLOG FOR INTERFACE
*
         LA    R2,STREMS           ADDR OF PARM LIST FOR CHAP
TQ0      L     STEPR,AIGCR244      GET ADDR OF CHAP ROUTINE
LKTCH    BALR  STRETR,STEPR        LINK TO CHAP ROUTINE
         BALR  STBASE,R0           REGAIN ADDRESSABLITY
         USING *,STBASE
         L     STBASE,ACONST       GET ADDR OF NORM BASE
         USING CONST,STBASE
*/*STPERC: S SETRP: CONTINUE WITH TERM(PERCOLATE)*/
STPERC   SETRP RC=0,RECPARM=STRECPM
*/* R RETURN TO RTM*/
         BR    RETSV               RETURN TO RTM
         SPACE 2
*        THE FOLLOWING CONSTANT MUST STAY AT FRR END TO ALLOW
*        ADDRESSABILITY OF THE COMMON CONSTANTS.
ACONST   DC    A(CONST)            ADDRESS OF CONSTANTS FOR BASE
*
*/*STFRR: END */
         EJECT
         ENTRY IGC07902
         ENTRY IEATRSCN
         END
