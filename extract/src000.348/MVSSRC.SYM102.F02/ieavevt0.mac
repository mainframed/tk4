         TITLE 'IEAVEVT0  EVENTS SERVICE ROUTINE                       *
                        '
IEAVEVT0 CSECT ,                                                   0001
@PROLOG  DS    0H                                                  0002
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
RBPRFXLN EQU 64
RBPRFLNA EQU 32
PRBLEN   EQU 136
SIRBLEN  EQU 200
TIRBLEN  EQU 136
IRBLEN   EQU 128
SVRBLEN  EQU 200
DISABLE  EQU  X'FC'                    MASK FOR DISABLEING SYSTEM
*                                                                  0090
         ENTRY IGC125
         ENTRY IEAVEVT1
*/*      P     ESTABLISH ADDRESSIBILITY                              */
         USING IEAVEVT0,R15            ESTABLISH ADDRESSABILITY FOR
*                                      MODULE
         MODID BR=YES
*/*      P     SAVE CALLERS REGISTERS IN LOCAL SAVE AREA             */
         L     R15,PSAAOLD             CURRENT ASCB ADDR
         L     R15,ASCBASXB-ASCB(,R15) GET ADDR OF ASXB
         L     R15,ASXBSPSA-ASXB(,R15) GET ADDR OF LOCAL WSAVT
         L     R15,WSALEVNT-WSAL(,R15) GET ADDR OF EVENTS WSA
         STM   R0,R15,0(R15)           SAVE REGS
         BALR  R15,0                   RESTABLISH ADDRESSIBILITY
         USING *,R15                   FOR MODULE
*/*      P     ESTABLISH REGISTERS FOR TYPE ONE ENTRY                */
*                                                                  0091
*   R4=PSATOLD;                     /* LOAD TCB ADDRESS              */
         L     R4,PSATOLD                                          0091
*   R5=TCBRBP;                      /* LOAD RB ADDRESS               */
         L     R5,TCBRBP(,TCBPTR)                                  0092
*   R6=ADDR(IGC125);                /* LOAD ADDRESS OF TYPE ONE ENTRY*/
         LA    R6,IGC125                                           0093
*   R7=PSAAOLD;                     /* LOAD ADDRESS OF ASCB          */
         L     R7,PSAAOLD                                          0094
*/*      S     IGC125: CALL TYPE ONE EVENT MAINLINE                  */
*                                                                  0095
*   CALL IGC125;                    /* CALL MAINLINE CODE            */
         BAL   @14,IGC125                                          0095
*   GENERATE;                                                      0096
*                                                                  0096
         USING *,R14
*/*      D     (YES,,NO,RETURN) WAS WAIT=YES SPECIFIED               */
*                                                                  0097
*   IF R0<ZERO THEN                 /* CHECK IF WAIT=YES WAS       0097
*                                      SPECIFIED                     */
         LTR   R0,R0                                               0097
         BNM   @RF00097                                            0097
*     DO;                           /* WAIT=YES SPECIFIED RETURN TO
*                                      DISPATCHER                    */
*       TCBGRS1=R1;                 /* SAVE REG 1 IN TCB             */
         ST    R1,TCBGRS1(,TCBPTR)                                 0099
*       GENERATE;                                                  0100
*                                                                  0100
*/*      P     DISABLE CPU USING STNSM                               */
         STNSM WOS,DISABLE             DISABLE SYSTEM MASK
*/*      S     SETFRR: PURGE THE FRR STACK                           */
         SETFRR P,WRKREGS=(R10,R11)    PURGE THE FRR STACK
*/*      S     SETLOCK: RELEASE LOCAL LOCK                           */
         SETLOCK RELEASE,TYPE=LOCAL,RELATED='INPUT PARM'
*/*      R     DISPATCHER                                            */
*                                                                  0101
*       GOTO IEA0DS;                /* RETURN TO DISPATCHER          */
         L     @12,CVTPTR                                          0101
         L     @12,CVT0DS(,@12)                                    0101
         BR    @12                                                 0101
*     END;                                                         0102
*   ELSE                            /* WAIT=YES NOT SPECIFIED        */
*     DO;                           /* SET UP RETURN TO CALLER       */
@RF00097 DS    0H                                                  0104
*/*RETURN:  P     RESTORE CALLERS REGS                               */
*                                                                  0104
*       RFY                                                        0104
*        (R2) RSTD;                                                0104
*       LM(R2,R14,R2R14SAV);        /* RESTORE CALLERS REGS          */
         L     @12,ASXBPTR(,ASCBPTR)                               0105
         L     @12,ASXBSPSA(,@12)                                  0105
         L     @12,WSALEVNT(,@12)                                  0105
         LM    R2,R14,R2R14SAV(@12)                                0105
*/*      R     TO CALLER                                             */
*                                                                  0106
*       GOTO CALLER;                /* RETURN TO CALLER              */
         BR    R14                                                 0106
*     END;                                                         0107
*   RFY                                                            0108
*    (R2,                                                          0108
*     R15) UNRSTD;                                                 0108
*                                                                  0108
*/* IEAVEVT0: END                                                    */
*                                                                  0109
*                                                                  0109
*/* ******************************************************************/
*/*                                                                  */
*/*  TYPE ONE SVC ENTRY FOR WAIT PROCESSING                          */
*/*                                                                  */
*/*    IGC125 IS THE ENTRY POINT FOR SVC 125. IGC125                 */
*/*    SETS UP AN FRR (SETFRR). CALLS A ROUTINE TO VALIDATE THE      */
*/*    TABLE ADDRESS (EVNTTVAL). IF WAIT= WAS SPECIFIED, CALLS       */
*/*    THE TABLE UPDATE ROUTINE (EVNTTUPD). NEXT IT PROCESSES        */
*/*    THE ECB= REQUEST BY CALLING THE SUBROUTINE (ECBINIT).         */
*/*    IF WAIT= WAS REQUESTED, CALLS THE SUBROUTINE TO               */
*/*    PERFORM WAIT PROCESSING (EVNTWAIT). IT THEN DELETES           */
*/*    THE FRR(DELFRR). SET REG 15 = 0, RELOADS RETURN ADDRESS       */
*/*    AND RETURNS.                                                  */
*/*                                                                  */
*/* ******************************************************************/
*                                                                  0109
*IGC125:                                                           0109
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0109
*                                                                  0109
@EL00001 DS    0H                                                  0109
@EF00001 DS    0H                                                  0109
@ER00001 BR    @14                                                 0109
IGC125   DS    0H                                                  0110
*/* IGC125: CHART                                                    */
*/*      E     IGC125                                                */
*/*      P     ESTABLISH ADDRESSIBILITY                              */
*                                                                  0110
*   GENERATE REFS(IGC125,R6);                                      0110
*                                                                  0110
         USING IGC125,R6               ESTABLISH ADDRESSIBILITY FOR
*                                      MODULE
*/*      P     SAVE RETURN ADDRESS                                   */
*                                                                  0111
*   R13=R14;                        /* SAVE RETURN ADDRESS           */
         LR    R13,R14                                             0111
*/*      S     SETFRR: CALL SET FRR ROUTINE                          */
*                                                                  0112
*   CALL SETFRR;                    /* CALL SET FRR ROUTINE          */
         BAL   @14,SETFRR                                          0112
*/*      P     LOAD 17D ABEND CODE                                   */
*                                                                  0113
*   R8=ABEND17D;                    /* LOAD ABEND CODE IN REG 8      */
         L     R8,@CF02566                                         0113
*/*      S     EVNTTVAL: CALL ROUTINE TO VALIDATE TABLE ADDRESS      */
*                                                                  0114
*   CALL EVNTTVAL;                  /* CALL ROUTINE TO VALIDATE TABLE
*                                      ADDRESS                       */
         BAL   @14,EVNTTVAL                                        0114
*/*      D     (NO,%WCONT5,YES,) WAS WAIT REQUESTED                  */
*                                                                  0115
*   IF WAITYES=ON×WAITNO=ON THEN    /* WAS WAIT PROCESSING REQUESTED */
         TM    WAITYES(FRRWKAR),B'11000000'                        0115
         BZ    @RF00115                                            0115
*     DO;                           /* WAIT PROCESSING REQUESTED     */
*/*      D     (NO,,YES,%WCONT6) WAS WAIT CORRECTLY REQUESTED        */
*                                                                  0117
*       IF WAITYES=ON&WAITNO=ON THEN/* CHECK IF WAIT WAS CORRECTLY 0117
*                                      REQUESTED                     */
         TM    WAITYES(FRRWKAR),B'11000000'                        0117
         BNO   @RF00117                                            0117
*         DO;                       /* PARMS BAD ABEND CALLER        */
*/*      S     EVNTABND: ABEND CALLER CODE 77D                       */
*                                                                  0119
*           R1=ABEND77D;            /* LOAD 77D ABEND CODE           */
         L     R1,@CF02576                                         0119
*           GOTO EVNTABND;          /* CALL ROUTINE TO CLEAN UP AND
*                                      ISSUE ABEND                   */
         B     EVNTABND                                            0120
*         END;                                                     0121
*                                                                  0121
*/* %WCONT6: S     EVNTTUPD: GO UPDATE EVENT TABLE                   */
*                                                                  0122
*       CALL EVNTTUPD;              /* CALL ROUTINE TO UPDATE EVENT
*                                      TABLE                         */
@RF00117 BAL   @14,EVNTTUPD                                        0122
*     END;                                                         0123
*                                                                  0123
*/* %WCONT5: D (YES,,NO,%WCONT3) WAS ECB INIT REQUESTED              */
*                                                                  0124
*   IF ECBYES=ON THEN               /* CHECK IF ECB INITIALIZATION 0124
*                                      REQUESTED                     */
@RF00115 TM    ECBYES(FRRWKAR),B'00100000'                         0124
         BNO   @RF00124                                            0124
*     DO;                           /* ECB INITIALIZATION REQUESTED  */
*/*      S     ECBINIT: CALL ROUTINE TO INITIALIZE ECB               */
*                                                                  0126
*       CALL ECBINIT;               /* CALL ROUTINE TO INITIALIZE ECB*/
         BAL   @14,ECBINIT                                         0126
*     END;                                                         0127
*                                                                  0127
*/* %WCONT3: D (NO,%WCONT7,YES,) WAS WAIT SPECIFIED                  */
*                                                                  0128
*   IF WAITYES=ON×WAITNO=ON THEN    /* WAS WAIT SPECIFIED            */
@RF00124 TM    WAITYES(FRRWKAR),B'11000000'                        0128
         BZ    @RF00128                                            0128
*     DO;                           /* WAIT PROCESSING REQUESTED     */
*/*      S     EVNTWAIT: GO DO WAIT PROCESSING                       */
*                                                                  0130
*       CALL EVNTWAIT;              /* CALL ROUTINE TO DO WAIT     0130
*                                      PROCESSING                    */
         BAL   @14,EVNTWAIT                                        0130
*     END;                                                         0131
*                                                                  0131
*/* %WCONT7:  S DELFRR: GO DELETE FRR                                */
*                                                                  0132
*   CALL DELFRR;                    /* GO DELETE FRR                 */
@RF00128 BAL   @14,DELFRR                                          0132
*/*      P     RESTORE RETURN ADDRESS                                */
*                                                                  0133
*   RFY                                                            0133
*    (R15) RSTD;                                                   0133
*   R15=ZERO;                       /* CLEAR REGISTER 15             */
         SLR   R15,R15                                             0134
*   R14=R13;                        /* LOAD RETURN ADDRESS           */
         LR    R14,R13                                             0135
*/*      R     RETURN                                                */
*                                                                  0136
*   END IGC125;                                                    0136
@EL00002 DS    0H                                                  0136
@EF00002 DS    0H                                                  0136
@ER00002 BR    @14                                                 0136
*   RFY                                                            0137
*    (R15) UNRSTD;                                                 0137
*                                                                  0137
*/* IGC125: END                                                      */
*                                                                  0138
*                                                                  0138
*/********************************************************************/
*/*                                                                  */
*/* TYPE TWO EVENTS ENTRY FOR TABLE CREATION AND DELETION            */
*/*                                                                  */
*/*      IEAVEVT1 IS THE ENTRY POINT FOR THE TYPE II SVC 122 ESR     */
*/*      CODE # 5 (THERE IS NO BRANCH ENTRY SUPPORT FOR THIS SVC) .  */
*/*      SET UP AN FRR (SETFRR). DETERMINES IF THE REQUEST IS FOR    */
*/*      TABLE CREATION OR DELETION.                                 */
*/*      IF FOR TABLE DELETION (REGISTER 0 = ZERO). CALLS A          */
*/*      SUBROUTINE TO VALIDATE THE TABLE ADDRESS (EVNTTVAL).        */
*/*      IF VALID CALLS A SUBROUTINE TO DEQUEUE AND FREE THE         */
*/*      INDICATED TABLE (EVNTDEQT).                               0138
*/*      IF FOR TABLE CREATION (BIT 1 OF REGISTER 0 EQUAL 1),        */
*/*      CHECKS THE NUMBER OF ENTRIES REQUESTED IF IT IS NOT         */
*/*      BETWEEN 1 AND 32767 ABEND THE CALLER WITH A 47A. IF         */
*/*      THE NUMBER OF ENTRIES IS VALID, CALLS A SUBROUTINE TO       */
*/*      GETMAIN, INITIALIZE, AND QUEUE THE NEW EVENT TABLE          */
*/*      (EVNTQUET).                                                 */
*/*      UPON RETURN FROM EITHER EVNTDEQT OR EVNTQUET THE FRR IS     */
*/*      DELETED (DELFRR); CLEARS REGISTER 15; LOADS THE RETURN      */
*/*      ADDRESS AND RETURNS.                                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0138
*IEAVEVT1:                                                         0138
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0138
*                                                                  0138
IEAVEVT1 DS    0H                                                  0139
*/* IEAVEVT1: CHART                                                  */
*/*      E     IEAVEVT1                                              */
*/*      P     ESTABLISH ADDRESSIBILITY                              */
*                                                                  0139
*   GENERATE REFS(IEAVEVT1,IGC125A,R6);                            0139
*                                                                  0139
         USING IEAVEVT1,R6             ESTABLISH ADDRESSIBILITY
*                                      FOR MODULE
         L     R6,IGC125A              LOAD ADDRESS OF TYPE ONE
*                                      ENTRY POINT
         USING IGC125,R6               RESTABLISH ADDRESSIBILITY
*/*      P     SAVE RETURN ADDRESS                                   */
*                                                                  0140
*   R13=R14;                        /* SAVE RETURN ADDRESS           */
         LR    R13,R14                                             0140
*/*      S     SETFRR: GO SET FRR                                    */
*                                                                  0141
*   CALL SETFRR;                    /* CALL ROUTINE TO SET FRR       */
         BAL   @14,SETFRR                                          0141
*/*      D     (NO,,YES,CREATE) IS THIS A CREATE REQUEST             */
*                                                                  0142
*   IF R0=ZERO THEN                 /* CHECK IF THIS A DELETE REQUEST*/
         LTR   R0,R0                                               0142
         BNZ   @RF00142                                            0142
*DELETE:                                                           0143
*     DO;                           /* DELETE TABLE REQUESTED        */
DELETE   DS    0H                                                  0144
*/*      P     LOAD ABEND CODE 17A                                   */
*                                                                  0144
*       R8=ABEND17A;                /* LOAD ABEND CODE IN REG        */
         L     R8,@CF02580                                         0144
*/*      S     EVNTTVAL: GO VALIDATE TABLE ADDRESS                   */
*                                                                  0145
*       CALL EVNTTVAL;              /* CALL ROUTINE TO VALIDATE EVENT
*                                      TABLE ADDRESS                 */
         BAL   @14,EVNTTVAL                                        0145
*/*     S  (,%DCONT2) EVNTDEQT:  GO DEQUEUE AND FREE TABLE           */
*                                                                  0146
*       CALL EVNTDEQT;              /* CALL ROUTINE TO DEQUEUE AND 0146
*                                      FREE TABLE                    */
         BAL   @14,EVNTDEQT                                        0146
*     END DELETE;                                                  0147
*   ELSE                            /* CREATE REQUEST                */
*CREATE:                                                           0148
*     DO;                           /* DO CREATE PROCESSING          */
         B     @RC00142                                            0148
@RF00142 DS    0H                                                  0148
CREATE   DS    0H                                                  0149
*/* CREATE: D (NO,,YES,%DCONT3) IS ENTRIES VALID                     */
*                                                                  0149
*       IF ENTRIES=ZERO×ENTRIES>MAXE THEN/* CHECK ENTRIES PARM       */
         LH    @15,ENTRIES(,FRRWKAR)                               0149
         N     @15,@CF02690                                        0149
         LTR   @15,@15                                             0149
         BZ    @RT00149                                            0149
         CLC   ENTRIES(2,FRRWKAR),@CH02602                         0149
         BNH   @RF00149                                            0149
@RT00149 DS    0H                                                  0150
*         DO;                       /* ENTRIES PARM INVALID          */
*/*      S     EVNTABND: GO ABEND CALLER CODE 47A                    */
*                                                                  0151
*           R1=ABEND47A;            /* LOAD ABEND CODE               */
         L     R1,@CF02584                                         0151
*           GOTO EVNTABND;          /* CALL ROUTINE TO CLEAN UP AND
*                                      ISSUE ABEND                   */
         B     EVNTABND                                            0152
*         END;                                                     0153
*                                                                  0153
*/* %DCONT3: S EVNTQUET: GO GET AND QUEUE NEW TABLE                  */
*                                                                  0154
*       CALL EVNTQUET;              /* CALL ROUTINE TO GETMAIN AND 0154
*                                      QUEUE EVENT TABLE             */
@RF00149 BAL   @14,EVNTQUET                                        0154
*     END CREATE;                                                  0155
*                                                                  0155
*/* %DCONT2:  S     DELFRR: CALL DELETE FRR ROUTINE                  */
*                                                                  0156
*   CALL DELFRR;                    /* GO DELETE FRR                 */
@RC00142 BAL   @14,DELFRR                                          0156
*/*      P     RESTORE RETURN ADDRESS                                */
*                                                                  0157
*   RFY                                                            0157
*    (R15) RSTD;                                                   0157
*   R15=ZERO;                       /* CLEAR REGISTER 15             */
         SLR   R15,R15                                             0158
*   R14=R13;                        /* RESTORE RETURN ADDRESS        */
         LR    R14,R13                                             0159
*/*      R     RETURN                                                */
*                                                                  0160
*   END IEAVEVT1;                                                  0160
@EL00003 DS    0H                                                  0160
@EF00003 DS    0H                                                  0160
@ER00003 BR    @14                                                 0160
*   RFY                                                            0161
*    (R15) UNRSTD;                                                 0161
*                                                                  0161
*/* IEAVEVT1: END                                                    */
*                                                                  0162
*                                                                  0162
*/********************************************************************/
*/*                                                                  */
*/* ROUTINE TO VALIDATE EVENT TABLE ADDRESS                          */
*/*                                                                  */
*/*      THIS ROUTINE IS CALLED BY BOTH IGC125 AND IEAVEVT1          */
*/*      ENTRIES TO VALIDATE THE TABLE ADDRESSED BY REG ONE          */
*/*      INPUT TO THIS ROUTINE IS:                                   */
*/*      REGISTER 1 - TABLE ADDRESS                                  */
*/*      REGISTER 4 - TCB ADDRESS                                    */
*/*      REGISTER 8 - ABEND CODE                                     */
*/*      OUTPUT FROM THIS ROUTINE IS:                                */
*/*      SUCCESSFULLY LOCATING THE EVENT TABLE, RETURN.              */
*/*      EVENT TABLE NOT FOUND OR EVENT TABLE WAITING, ABEND.        */
*/*           THE TCB EVENT TABLE QUEUE IS SEARCHED TO               */
*/*      FIND A MATCHING EVENT TABLE ADDRESS. IF FOUND THE           */
*/*      EVENT TABLE IS CHECKED FOR A WAITING CONDITION. IF          */
*/*      THE TABLE IS NOT WAITING, RETURN.                           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0162
*EVNTTVAL:                                                         0162
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0162
*                                                                  0162
EVNTTVAL DS    0H                                                  0163
*/* EVNTTVAL: CHART                                                  */
*/*      E     EVNTTVAL                                              */
*/*      P     FIND EVENT TABLE QUEUE                                */
*                                                                  0163
*   RFY                                                            0163
*    (R11) RSTD;                                                   0163
*   R11=TCBEVENT;                   /* LOAD ADDRESS OF FIRST EVENT 0164
*                                      TABLE                         */
         L     @15,TCBEXT2(,TCBPTR)                                0164
         L     R11,TCBEVENT(,@15)                                  0164
*/*      D     (NO,,YES,CKWAIT) IS TABLE ON QUEUE                    */
*                                                                  0165
*   DO WHILE R11^=ZERO;             /* SEARCH QUEUE FOR TABLE        */
         B     @DE00165                                            0165
@DL00165 DS    0H                                                  0166
*     IF R11=EVNTPTR THEN           /* CHECK IF TABLE FOUND          */
         CR    R11,EVNTPTR                                         0166
         BE    @RT00166                                            0166
*       GOTO CKWAIT;                /* CHECK FOR WAITING TABLE       */
*     R11=R11->EVNTLNK;             /* POINT TO NEXT TABLE           */
         L     R11,EVNTLNK(,R11)                                   0168
*   END;                                                           0169
*                                                                  0169
@DE00165 LTR   R11,R11                                             0169
         BNZ   @DL00165                                            0169
*/*     S   EVNTABND: GO ABEND CALLER                                */
*                                                                  0170
*   R1=R8;                          /* LOAD ABEND CODE INTO REG ONE  */
         LR    R1,R8                                               0170
*   GOTO EVNTABND;                  /* GO ABEND CALLER               */
         B     EVNTABND                                            0171
*/* CKWAIT: D (YES,,NO,TABLEOK) IS TABLE WAITING                     */
*                                                                  0172
*CKWAIT:                                                           0172
*   IF EVNTRBP^=ZERO THEN           /* IS TABLE WAITING              */
CKWAIT   L     @15,EVNTRBP(,EVNTPTR)                               0172
         LTR   @15,@15                                             0172
         BZ    @RF00172                                            0172
*     DO;                           /* TABLE WAITING ABEND CALLER    */
*/*     P CHANGE ABEND CODE                                          */
*                                                                  0174
*       R1=R8×ABEND3XX;             /* OR ABEND CODE TO 3XX          */
         LR    R1,R8                                               0174
         O     R1,@CF02586                                         0174
*/*      S  EVNTABND: GO ABEND CALLER                                */
*                                                                  0175
*       GOTO EVNTABND;              /* GO TO ROUTINE TO CLEAN UP AND
*                                      ABEND CALLER                  */
         B     EVNTABND                                            0175
*     END;                                                         0176
*                                                                  0176
*/* TABLEOK: R  RETURN                                               */
*                                                                  0177
*   RFY                                                            0177
*    (R11) UNRSTD;                                                 0177
*TABLEOK:                                                          0178
*   END EVNTTVAL;                   /* END OF VALIDITY CHECK ROUTINE */
@EL00004 DS    0H                                                  0178
@EF00004 DS    0H                                                  0178
@ER00004 BR    @14                                                 0178
*/* EVNTTVAL: END                                                    */
*                                                                  0179
*                                                                  0179
*/********************************************************************/
*/*                                                                  */
*/* ROUTINE TO UPDATE EVENT TABLE                                    */
*/*                                                                  */
*/*      THIS ROUTINE IS CALLED BY ENTRY IGC125 WHEN                 */
*/*      WAIT=YES OR WAIT=NO IS SPECIFIED. THIS ROUTINE CHECKS       */
*/*      FOR A VALID LAST SPECIFIED (THE LAST ADDRESS FALLS IN       */
*/*      THE RANGE OF EVENT ENTRIES AND THE TABLE IS ELIGIBLE        */
*/*      FOR UPDATE (EVNTUPR = ON)). IF THE TABLE IS ELIGIBLE FOR    */
*/*      UPDATE ALL UNPROCESSED ENTRIES ARE MOVED TO THE TOP OF      */
*/*      THE TABLE.                                                  */
*/*      INPUT TO THIS ROUTINE IS:                                   */
*/*      LAST= ADDRESS                                               */
*/*      TABLE= ADDRESS                                              */
*/*      VALID EVENT TABLE                                           */
*/*      OUTPUT FROM THIS ROUTINE IS:                                */
*/*      UPDATED EVENT TABLE                                         */
*/*      OR ABEND 47A                                                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0179
*EVNTTUPD:                                                         0179
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0179
*                                                                  0179
EVNTTUPD DS    0H                                                  0180
*/* EVNTUPD: CHART                                                   */
*/*      E     EVNTTUPD                                              */
*                                                                  0180
*   RFY                                                            0180
*    (R10) RSTD;                                                   0180
*                                                                  0180
*/*      D     (YES,,NO,%UCONT1) WAS LAST SPECIFIED                  */
*                                                                  0181
*   IF ECBYES=OFF&LAST^=ZERO THEN   /* WAS LAST SPECIFIED            */
         TM    ECBYES(FRRWKAR),B'00100000'                         0181
         BNZ   @RF00181                                            0181
         L     @15,LAST-1(,FRRWKAR)                                0181
         LA    @15,0(,@15)                                         0181
         LTR   @15,@15                                             0181
         BZ    @RF00181                                            0181
*     DO;                           /* LAST SPECIFIED                */
*/*      D     (NO,,YES,%UCONT1) WAS LAST VALID                      */
*                                                                  0183
*       IF LAST>EVNTLSTA×LAST<EVNTFST×EVNTUPR=OFF THEN/* WAS LAST A
*                                      VALID REQUEST                 */
         C     @15,EVNTLSTA(,EVNTPTR)                              0183
         BH    @RT00183                                            0183
         C     @15,EVNTFST(,EVNTPTR)                               0183
         BL    @RT00183                                            0183
         TM    EVNTUPR(EVNTPTR),B'10000000'                        0183
         BNZ   @RF00183                                            0183
@RT00183 DS    0H                                                  0184
*         DO;                       /* LAST INVALID ABEND CALLER     */
*/*      S     EVNTABND: ABEND CALLER CODE 47D                       */
*                                                                  0185
*           R1=ABEND47D;            /* LOAD 47D ABEND CODE           */
         L     R1,@CF02570                                         0185
*           GOTO EVNTABND;          /* CALL ROUTINE TO CLEAN UP AND
*                                      ABEND                         */
         B     EVNTABND                                            0186
*         END;                                                     0187
*       R10=LAST;                   /* LOAD LAST POINTER             */
@RF00183 L     R10,LAST-1(,FRRWKAR)                                0188
         LA    R10,0(,R10)                                         0188
*     END;                                                         0189
*   ELSE                            /* LAST IS VALID                 */
*     R10=EVNTFST;                  /* LOAD POINTER TO FIRST POSTED
*                                      ENTRY                         */
         B     @RC00181                                            0190
@RF00181 L     R10,EVNTFST(,EVNTPTR)                               0190
*/* %UCONT1: D  (YES,,NO,%UCONT3) SHOULD EVENT TABLE BE UPDATED      */
*                                                                  0191
*   IF EVNTUPR=ON THEN              /* SHOULD EVENT TABLE BE UPDATED */
@RC00181 TM    EVNTUPR(EVNTPTR),B'10000000'                        0191
         BNO   @RF00191                                            0191
*     DO;                           /* TABLE IS OK TO UPDATE         */
*/*     D  (YES,,NO,%UCONT3) IS TABLE POSTED                         */
*                                                                  0193
*       IF EVNTLSTA^=ADDR(EVNTDUMY) THEN/* IS TABLE POSTED           */
         L     @15,EVNTLSTA(,EVNTPTR)                              0193
         LA    @12,EVNTDUMY(,EVNTPTR)                              0193
         CR    @15,@12                                             0193
         BE    @RF00193                                            0193
*         DO;                       /* TABLE IS POSTED               */
*/*     D   (NO,,YES,%UCONT2) ANY UNPROCESSED ENTRIES                */
*                                                                  0195
*           IF R10=EVNTLSTA THEN    /* ARE ALL ENTRIES PROCESSED     */
         CR    R10,@15                                             0195
         BNE   @RF00195                                            0195
*             DO;                   /* LAST POINTED TO LAST          */
*/*      P     (,%UCONT3) REINITIALIZE ENTRIES POINTERS              */
*                                                                  0197
*               EVNTLSTA=ADDR(EVNTDUMY);/* STORE CORRECT LAST ACTIVE
*                                      POINTER                       */
         ST    @12,EVNTLSTA(,EVNTPTR)                              0197
*               EVNTFST->EVNTENTY(1)=ZERO;/* ZERO FIRST EVENT ENTRY  */
         L     @15,EVNTFST(,EVNTPTR)                               0198
         SLR   @12,@12                                             0198
         ST    @12,EVNTENTY(,@15)                                  0198
*             END;                                                 0199
*           ELSE                    /* LAST DID NOT POINT TO LAST    */
*             DO;                   /* MOVE UNPROCESSED ENTRIES TO 0200
*                                      TOP OF TABLE                  */
         B     @RC00195                                            0200
@RF00195 DS    0H                                                  0201
*               RFY                                                0201
*                (R11,                                             0201
*                 R12) RSTD;                                       0201
*                                                                  0201
*/* %UCONT2: P  MOVE ALL UNPROCESSED ENTRIES TO TOP OF TABLE         */
*                                                                  0202
*               R11=EVNTFST;        /* GET TOP OF TABLE ADDRESS      */
         L     R11,EVNTFST(,EVNTPTR)                               0202
*               DO WHILE R10^=EVNTLSTA;/* DO UNTIL ALL ENTRIES ARE 0
*                                      MOVED TO TOP                  */
         B     @DE00203                                            0203
@DL00203 DS    0H                                                  0204
*                 R10=R10+4;        /* INCRUMENT NEXT UNPROCESSED  0204
*                                      EVENT ADDRRESS                */
         LA    @15,4                                               0204
         ALR   R10,@15                                             0204
*                 R12=R10->EVNTENTY(1);/* MOVE EVENT ENTRY UP        */
         L     R12,EVNTENTY(,R10)                                  0205
*                 R11->EVNTENTY(1)=R12;/* MOVE EVENT ENTRY UP        */
         ST    R12,EVNTENTY(,R11)                                  0206
*                 R11=R11+4;        /* INCREMENT NEXT EVENT ENTRY  0207
*                                      ADDRESS                       */
         ALR   R11,@15                                             0207
*               END;                                               0208
@DE00203 C     R10,EVNTLSTA(,EVNTPTR)                              0208
         BNE   @DL00203                                            0208
*               EVNTLSTA=R11-4;     /* STORE LAST ACTIVE EVENT ENTRY
*                                      ADDRESS                       */
         LR    @15,R11                                             0209
         SL    @15,@CF00037                                        0209
         ST    @15,EVNTLSTA(,EVNTPTR)                              0209
*             END;                                                 0210
*         END;                                                     0211
*     END;                                                         0212
*                                                                  0212
*/* %UCONT3: R RETURN                                                */
*                                                                  0213
*   RFY                                                            0213
*    (R10,                                                         0213
*     R11,                                                         0213
*     R12) UNRSTD;                                                 0213
*   END EVNTTUPD;                                                  0214
*                                                                  0214
@EL00005 DS    0H                                                  0214
@EF00005 DS    0H                                                  0214
@ER00005 BR    @14                                                 0214
*/* EVNTUPD: END                                                     */
*                                                                  0215
*                                                                  0215
*/********************************************************************/
*/*                                                                  */
*/* ROUTINE TO INITIALIZE ECB                                        */
*/*                                                                  */
*/*      THIS ROUTINE IS CALLED BY ENTRY IGC125 WHEN                 */
*/*      ECB INITIALIZATION IS REQUESTED                             */
*/*      INPUT TO THIS ROUTINE IS:                                   */
*/*      ECB= ADDRESS                                                */
*/*      TABLE= ADDRESS                                              */
*/*      OUTPUT FROM THIS ROUTINE IS:                                */
*/*      IF THE ECB WAS POSTED ITS ADDRESS IS ADDED TO               */
*/*           THE LIST OF COMPLETED EVENT ENTRIES                    */
*/*      IF THE ECB WAS NOT POSTED IT WILL BE INITIALIZED TO THE     */
*/*           EVENT FORMAT X'80XXXXX1'                               */
*/*      IF THE ECB WAS WAITED ON ABEND 67D                          */
*/*      IF THE TABLE IS FULL AND ECB POSTED ABEND 87D               */
*/*      IF THE ECB ADDRESS IS NOT VALID FOR CALLER ABEND 57D        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0215
*ECBINIT:                                                          0215
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0215
*                                                                  0215
ECBINIT  DS    0H                                                  0216
*/* ECBINIT: CHART                                                   */
*/*      E     ECBINIT                                               */
*                                                                  0216
*   RFY                                                            0216
*    (R10,                                                         0216
*     R11,                                                         0216
*     R12) RSTD;                                                   0216
*   FRRABEND=ABEND57D;              /* STORE ABEND CODE TO PASS TO 0217
*                                      FRR IF ECB NOT VALID          */
         MVC   FRRABEND(4,FRRWKAR),@CF02572                        0217
*EVNTPCK:                                                          0218
*   R12=ECBPTR;                     /* GET POINTER TO ECB            */
EVNTPCK  L     R12,ECBPTR-1(,FRRWKAR)                              0218
         LA    R12,0(,R12)                                         0218
*   RFY                                                            0219
*    (ECB) BASED(R12);              /* ECB NOW BASED ON R12          */
*   IF RBUSKEY=ON THEN              /* IS CALLER PROBLEM KEY @ZA31793*/
         TM    RBUSKEY(RBSECPTR),B'10000000'                       0220
         BNO   @RF00220                                            0220
*     DO;                           /*                       @ZA31793*/
*       SPKA(TCBPKF);               /* GO TO USER KEY        @ZA31793*/
         SLR   @15,@15                                             0222
         IC    @15,TCBPKF(,TCBPTR)                                 0222
         SPKA  0(@15)                                              0222
*       R11=ECB;                    /* SAVE ECB FOR WAITING/POSTED 0223
*                                      CHECK AND FOR COMPARE AND SWAP
*                                      (SO IT CANNOT BE UPDATED)   0223
*                                                            @ZA31793*/
         L     R11,ECB(,R12)                                       0223
*       SPKA(ZERO);                 /* GO BACK TO KEY ZERO   @ZA31793*/
         SLR   @15,@15                                             0224
         SPKA  0(@15)                                              0224
*     END;                          /*                       @ZA31793*/
*   ELSE                                                           0226
*     R11=ECB;                      /* SAVE ECB FOR COMPARE AND SWAP */
         B     @RC00220                                            0226
@RF00220 L     R11,ECB(,R12)                                       0226
*/* EVNTPCK: D     (YES,,NO,%ICONT1) IS ECB POSTED                   */
*                                                                  0227
*   IF(R11&POSTED)^=0 THEN          /* IS ECB POSTED         @ZA31793*/
@RC00220 SLR   @15,@15                                             0227
         LR    @03,R11                                             0227
         N     @03,@CF02600                                        0227
         CR    @03,@15                                             0227
         BE    @RF00227                                            0227
*     DO;                           /* ECB POSTED PLACE ADDRESS IN 0228
*                                      TABLE                         */
*       FRRABEND=ZERO;              /* ZERO ABEND CODE ECB OK        */
         ST    @15,FRRABEND(,FRRWKAR)                              0229
*/*      D     (YES,,NO,%ICONT2) IS TABLE FULL                       */
*                                                                  0230
*       IF EVNTLST=EVNTLSTA THEN    /* IS TABLE FULL                 */
         CLC   EVNTLST(4,EVNTPTR),EVNTLSTA(EVNTPTR)                0230
         BNE   @RF00230                                            0230
*         DO;                       /* TABLE FULL ABEND CALLER       */
*/*      S     EVNTABND: ABEND CALLER CODE 87D                       */
*                                                                  0232
*           R1=ABEND87D;            /* LOAD 87D ABEND CODE           */
         L     R1,@CF02578                                         0232
*           GOTO EVNTABND;          /* CALL ROUTINE TO CLEAN UP AND
*                                      ABEND                         */
         B     EVNTABND                                            0233
*         END;                                                     0234
*                                                                  0234
*/* %ICONT2: P (,ECBOK) POST COMPLETED EVENT TO TABLE                */
*                                                                  0235
*       EVNTEPTR=EVNTLSTA;          /* GET POINTER TO LAST POSTED  0235
*                                      ENTRY                         */
@RF00230 L     EVNTEPTR,EVNTLSTA(,EVNTPTR)                         0235
*       EVNTENTY(2)=R12;            /* POST ECB TO TABLE             */
         ST    R12,EVNTENTY+4(,EVNTEPTR)                           0236
*       EVNTENDL(2)=ON;             /* TURN ON END OF LIST INDICATOR */
         OI    EVNTENDL+4(EVNTEPTR),B'10000000'                    0237
*       EVNTLSTA=ADDR(EVNTENTY(2)); /* UPDATE LAST ACTIVE EVENT    0238
*                                      POINTER                       */
         LA    @15,EVNTENTY+4(,EVNTEPTR)                           0238
         ST    @15,EVNTLSTA(,EVNTPTR)                              0238
*       EVNTENDL(1)=OFF;            /* TURN OFF END OF LIST IN     0239
*                                      PREVIOUS ENTRY                */
         NI    EVNTENDL(EVNTEPTR),B'01111111'                      0239
*     END;                                                         0240
*   ELSE                            /* ECB NOT POSTED                */
*     DO;                           /* INITIALIZE ECB                */
         B     @RC00227                                            0241
@RF00227 DS    0H                                                  0242
*/* %ICONT1: D (YES,,NO,%ICONT4) WAS ECB WAITED ON                   */
*                                                                  0242
*       IF(R11&WAITING)^=0 THEN     /* WAS ECB WAIT BIT ON   @ZA31793*/
         LR    @15,R11                                             0242
         N     @15,@CF02598                                        0242
         LTR   @15,@15                                             0242
         BZ    @RF00242                                            0242
*         DO;                       /* ECB WAITED ON ABEND CALLER    */
*/*      S     EVNTABND: ABEND CALLER CODE 67D                       */
*                                                                  0244
*           R1=ABEND67D;            /* LOAD 67D ABEND CODE           */
         L     R1,@CF02574                                         0244
*           GOTO EVNTABND;          /* CALL ROUTINE TO CLEAN UP AND
*                                      ABEND CALLER                  */
         B     EVNTABND                                            0245
*         END;                                                     0246
*                                                                  0246
*/* %ICONT4: D (NO,,YES,%ICONT5) WAS CALLER SYSTEM KEY               */
*                                                                  0247
*       IF RBUSKEY=ON THEN          /* IS CALLER SYSTEM KEY          */
@RF00242 TM    RBUSKEY(RBSECPTR),B'10000000'                       0247
         BNO   @RF00247                                            0247
*         DO;                       /* CALLER NOT IN SYSTEM KEY      */
*/*      D     (NO,,YES,%ICONT5) ECB COM TASK ECB                    */
*                                                                  0249
*           IF R12^=CHECBP THEN     /* IS ECB COM TASK ECB           */
         L     @15,TCBJSCB(,TCBPTR)                                0249
         L     @15,CSCBPTR(,@15)                                   0249
         C     R12,CHECBP(,@15)                                    0249
         BE    @RF00249                                            0249
*             DO;                   /* NO VALIDITY CHECK ECB ADDRESS */
*/*      P     VALIDITY CHECK ECB                                    */
*                                                                  0251
*               /*****************************************************/
*               /*                                                   */
*               /* VALIDITY CHECK ECB ADDRESS IF NOT IN USER KEY FRR */
*               /* WILL GET CONTROL AND CHANGE COMPLETION CODE TO    */
*               /* THAT IN FRRABEND                                  */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0251
*               SPKA(TCBPKF);       /* GO TO USER KEY                */
         SLR   @15,@15                                             0251
         IC    @15,TCBPKF(,TCBPTR)                                 0251
         SPKA  0(@15)                                              0251
*               R10=ECB;            /* GET ECB CONTENTS FOR VALIDITY
*                                      CHECK                         */
         L     R10,ECB(,R12)                                       0252
*LOOP3:                                                            0253
*               CS(R10,R10,ECB);    /* COMPARE AND SWAP ECB CONTENTS
*                                      TO CHECK VALIDITY             */
LOOP3    CS    R10,@10,ECB(R12)                                    0253
*               BC(7,LOOP3);        /* BRANCH TILL ECB STORED        */
         BC    7,LOOP3                                             0254
*               SPKA(ZERO);         /* GO BACK TO KEY ZERO           */
         SLR   @15,@15                                             0255
         SPKA  0(@15)                                              0255
*             END;                                                 0256
*         END;                                                     0257
*                                                                  0257
@RF00249 DS    0H                                                  0258
*/* %ICONT5:  L COMPARE AND SWAP ECB INITIALIZED                     */
*                                                                  0258
*       R10=R1×EVENTECB;            /* SET UP EVENTS ECB CONTENTS    */
@RF00247 LR    R10,R1                                              0258
         O     R10,@CF02596                                        0258
*LOOP2:                                                            0259
*       CS(R11,R10,ECB);            /* COMPARE AND SWAP ECB        0259
*                                      INITIALIZED                   */
LOOP2    CS    R11,@10,ECB(R12)                                    0259
*/*      D     (YES,ECBOK,NO,EVNTPCK) COMPARE AND SWAP OK            */
*                                                                  0260
*       BC(7,EVNTPCK);              /* COMPARE AND SWAP FAILED START
*                                      OVER                          */
         BC    7,EVNTPCK                                           0260
*ECBOK:                                                            0261
*                                                                  0261
*/* ECBOK: R RETURN                                                  */
*                                                                  0261
*       FRRABEND=ZERO;              /* CLEAR ABEND CODE ECB OK       */
ECBOK    SLR   @15,@15                                             0261
         ST    @15,FRRABEND(,FRRWKAR)                              0261
*     END;                                                         0262
*   RFY                                                            0263
*    (R10,                                                         0263
*     R11,                                                         0263
*     R12) UNRSTD;                                                 0263
*   RFY                                                            0264
*    (ECB) BASED(ECBPTR);           /* ECB NOW BASED ON ECBPTR       */
*   END ECBINIT;                                                   0265
*                                                                  0265
@EL00006 DS    0H                                                  0265
@EF00006 DS    0H                                                  0265
@ER00006 BR    @14                                                 0265
*/* ECBINIT: END                                                     */
*                                                                  0266
*                                                                  0266
*/********************************************************************/
*/*                                                                  */
*/* ROUTINE TO DO EVENT WAIT PROCESSING                              */
*/*                                                                  */
*/*      THIS ROUTINE IS CALLED BY ENTRY IGC125 WHEN                 */
*/*      WAIT=YES OR WAIT=NO IS SPECIFIED                            */
*/*      OUTPUT FROM THIS ROUTINE IS:                                */
*/*      IF THE CALLER SHOULD WAIT (NO POSTED ENTRIES TO THE TABLE   */
*/*      AND WAIT=YES SPECIFIED) THE RB ADDRESS IS STORED IN THE     */
*/*      EVENT TABLE, THE RB WAIT COUNT IS SET TO 1, THE RB EXPLICIT */
*/*      WAIT BIT IS TURNED ON, THE ASCB COUNT OF READY TCBS IS      */
*/*      DECREMENTED BY ONE, AND IF THE COUNT OF READY TCBS WENT TO  */
*/*      ZERO THE ASCB SHORT WAIT COUNT IS INCREMENTED BY ONE.       */
*/*      REGISTER ONE IS UPDATED TO POINT AT THE FIRST COMPLETED     */
*/*      EVENT OR IF THE CALLER SPECIFIED WAIT=NO AND THERE ARE NO   */
*/*      COMPLETED EVENTS REGISTER ONE IS SET TO ZERO.               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0266
*EVNTWAIT:                                                         0266
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0266
*                                                                  0266
EVNTWAIT DS    0H                                                  0267
*/* EVNTWAIT: CHART                                                  */
*/*      E  EVNTWAIT                                                 */
*/*      D    (YES,,NO,%WTCONT1) SHOULD RB WAIT                      */
*                                                                  0267
*   IF EVNTLSTA=ADDR(EVNTDUMY)&WAITYES=ON THEN/* NO POSTED EVENTS AND
*                                      WAIT YES REQUESTED            */
         LA    @15,EVNTDUMY(,EVNTPTR)                              0267
         C     @15,EVNTLSTA(,EVNTPTR)                              0267
         BNE   @RF00267                                            0267
         TM    WAITYES(FRRWKAR),B'10000000'                        0267
         BNO   @RF00267                                            0267
*     DO;                           /* CALLER IS GOING TO WAIT       */
*/*      P     STORE RB ADDRESS IN EVENT TABLE                       */
*                                                                  0269
*       EVNTRBP=RBSECPTR;           /* STORE RB ADDRESS IN EVENT   0269
*                                      TABLE                         */
         ST    RBSECPTR,EVNTRBP(,EVNTPTR)                          0269
*/*      P     TURN ON EXPLICIT WAIT INDICATOR IN RB                 */
*                                                                  0270
*       RBXWAIT=ON;                 /* TURN ON EXPLICIT WAIT       0270
*                                      INDICATOR IN RB               */
         LR    @15,RBSECPTR                                        0270
         AL    @15,@CF02693                                        0270
         OI    RBXWAIT-56(@15),B'01000000'                         0270
*/*      L     COMPARE AND SWAP ASCBTCBS -1                          */
*                                                                  0271
*       RFY                                                        0271
*        (R11,                                                     0271
*         R12) RSTD;                                               0271
*       R11=ASCBTCBS;               /* LOAD COUNT OF READY TCBS      */
         L     R11,ASCBTCBS(,ASCBPTR)                              0272
*LOOP1:                                                            0273
*       R12=R11-1;                  /* DECRUMENT COUNT               */
LOOP1    LR    R12,R11                                             0273
         BCTR  R12,0                                               0273
*       CS(R11,R12,ASCBTCBS);       /* COMPARE AND SWAP READY COUNT  */
         CS    R11,@12,ASCBTCBS(ASCBPTR)                           0274
*       BC(7,LOOP1);                /* COMPARE AND SWAP FAILED TRY 0275
*                                      AGAIN                         */
         BC    7,LOOP1                                             0275
*       RFY                                                        0276
*        (R11) UNRSTD;                                             0276
*                                                                  0276
*/*      P     STORE WAIT COUNT OF ONE IN RB                         */
*                                                                  0277
*       RBWCF=1;                    /* STORE WAIT COUNT OF ONE IN RB */
         MVI   RBWCF(RBSECPTR),X'01'                               0277
*/*      D     (YES,,NO,%WTCONT1) IS ASCBTCBS ZERO                   */
*                                                                  0278
*       IF R12=ZERO THEN            /* DID ASCBTCBS GO TO ZERO       */
         LTR   R12,R12                                             0278
         BNZ   @RF00278                                            0278
*         DO;                       /* ASCBTCBS WENT TO ZERO         */
*/*      P     INCREMENT SHORT WAIT COUNT IN ASCB                    */
*                                                                  0280
*           ASCBSWCT=ASCBSWCT+1;    /* INCREMENT SHORT WAIT COUNT    */
         LA    @15,1                                               0280
         AH    @15,ASCBSWCT(,ASCBPTR)                              0280
         STH   @15,ASCBSWCT(,ASCBPTR)                              0280
*         END;                                                     0281
*       RFY                                                        0282
*        (R12) UNRSTD;                                             0282
@RF00278 DS    0H                                                  0283
*     END;                                                         0283
*                                                                  0283
*/* %WTCONT1: D  (YES,,NO,%WTCONT4) WAS WAIT=NO & NONE POSTED        */
*                                                                  0284
*   IF EVNTLSTA=ADDR(EVNTDUMY)&WAITNO=ON THEN/* CALLER NOT WAITING 0284
*                                      AND NO POSTED EVENTS          */
@RF00267 LA    @15,EVNTDUMY(,EVNTPTR)                              0284
         C     @15,EVNTLSTA(,EVNTPTR)                              0284
         BNE   @RF00284                                            0284
         TM    WAITNO(FRRWKAR),B'01000000'                         0284
         BNO   @RF00284                                            0284
*     DO;                           /* NO POSTED EVENTS AND WAIT=NO  */
*/*      P     (,%WTCONT3) RETURN ZERO IN REG ONE                    */
*                                                                  0286
*       EVNTUPR=OFF;                /* TURN OFF UPDATE TABLE       0286
*                                      INDICATOR                     */
         NI    EVNTUPR(EVNTPTR),B'01111111'                        0286
*       R1=ZERO;                    /* RETURN A ZERO IN REG ONE      */
         SLR   R1,R1                                               0287
*     END;                                                         0288
*   ELSE                            /* POSTED EVENTS OR WAIT=YES     */
*     DO;                           /* RETURN FIRST POSTED           */
         B     @RC00284                                            0289
@RF00284 DS    0H                                                  0290
*/* %WTCONT4: P  RETURN POINTER TO FIRST POSTED EVENT                */
*                                                                  0290
*       EVNTUPR=ON;                 /* TURN ON UPDATE TABLE INDICATOR*/
         OI    EVNTUPR(EVNTPTR),B'10000000'                        0290
*       R1=EVNTFST;                 /* RETURN POINTER TO FIRST POSTED*/
         L     R1,EVNTFST(,EVNTPTR)                                0291
*     END;                                                         0292
*                                                                  0292
*/* %WTCONT3:  R     RETURN                                          */
*                                                                  0293
*   END EVNTWAIT;                                                  0293
*                                                                  0293
@EL00007 DS    0H                                                  0293
@EF00007 DS    0H                                                  0293
@ER00007 BR    @14                                                 0293
*/* EVNTWAIT: END                                                    */
*                                                                  0294
*                                                                  0294
*/********************************************************************/
*/*                                                                  */
*/* ROUTINE TO DEQUEUE AND FREE EVENT TABLE                          */
*/*                                                                  */
*/*      THIS ROUTINE IS CALLED BY ENTRY IEAVEVT1 WHEN               */
*/*      EVENT TABLE DELETION IS REQUESTED.                          */
*/*      THIS ROUTINE WILL FIND THE EVENT TABLE , DEQUEUE IT FROM    */
*/*      THE EVENT TABLE QUEUE, GET THE EVENT TABLE LENGTH FROM      */
*/*      THE DEQUEUED EVENT TABLE , AND GO TO FREEMAIN TO FREE THE   */
*/*      TABLE.                                                    0294
*/*                                                                  */
*/********************************************************************/
*                                                                  0294
*EVNTDEQT:                                                         0294
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0294
*                                                                  0294
EVNTDEQT DS    0H                                                  0295
*/* EVNTDEQT: CHART                                                  */
*/*      E     EVNTDEQT                                              */
*                                                                  0295
*   RFY                                                            0295
*    (R10,                                                         0295
*     R12) RSTD;                                                   0295
*   R10=TCBEVENT;                   /* GET TOP EVENT TABLE POINTER   */
         L     @15,TCBEXT2(,TCBPTR)                                0296
         L     R10,TCBEVENT(,@15)                                  0296
*/*      P     FIND AND DEQUEUE EVENT TABLE                          */
*                                                                  0297
*   IF EVNTPTR=R10 THEN             /* DEQUEUE TOP TABLE             */
         CR    EVNTPTR,R10                                         0297
         BNE   @RF00297                                            0297
*     DO;                           /* TABLE IS FIRST IN QUEUE       */
*       TCBEVENT=EVNTLNK;           /* DEQUEUE TOP EVENT TABLE       */
         L     @11,EVNTLNK(,EVNTPTR)                               0299
         ST    @11,TCBEVENT(,@15)                                  0299
*     END;                                                         0300
*   ELSE                            /* TABLE NOT HEAD OF QUEUE       */
*     DO;                           /* FIND TABLE                    */
         B     @RC00297                                            0301
@RF00297 DS    0H                                                  0302
*       DO WHILE R10->EVNTLNK^=EVNTPTR;                            0302
         B     @DE00302                                            0302
@DL00302 DS    0H                                                  0303
*         R10=R10->EVNTLNK;         /* POINT TO NEXT EVENT TABLE     */
         L     R10,EVNTLNK(,R10)                                   0303
*       END;                                                       0304
@DE00302 C     EVNTPTR,EVNTLNK(,R10)                               0304
         BNE   @DL00302                                            0304
*       R10->EVNTLNK=EVNTLNK;       /* DEQUEUE EVENT TABLE           */
         L     @15,EVNTLNK(,EVNTPTR)                               0305
         ST    @15,EVNTLNK(,R10)                                   0305
*     END;                                                         0306
*   R0=EVNTLNTH;                    /* GET EVENT TABLE LENGTH        */
@RC00297 L     R0,EVNTLNTH-1(,EVNTPTR)                             0307
         ICM   R0,8,@CB02695                                       0307
*/*      S     FREEMAIN: FREE EVENT TABLE                            */
*                                                                  0308
*   R12=R14;                        /* SAVE RETURN ADDRESS           */
         LR    R12,R14                                             0308
*   GENERATE;                                                      0309
         FREEMAIN RC,SP=253,BRANCH=YES,LV=(0),A=(1)
*   R14=R12;                        /* RESTORE RETURN ADDRESS        */
         LR    R14,R12                                             0310
*   RFY                                                            0311
*    (R10,                                                         0311
*     R12) UNRSTD;                                                 0311
*                                                                  0311
*/*      R     RETURN                                                */
*/* EVNTDEQT: END                                                    */
*                                                                  0312
*   END EVNTDEQT;                                                  0312
@EL00008 DS    0H                                                  0312
@EF00008 DS    0H                                                  0312
@ER00008 BR    @14                                                 0312
*                                                                  0313
*/********************************************************************/
*/*                                                                  */
*/* ROUTINE TO GET AND QUEUE EVENT TABLE                             */
*/*                                                                  */
*/*      THIS ROUTINE IS CALLED BY ENTRY IEAVEVT1 WHEN               */
*/*      EVENT TABLE CREATION IS REQUESTED.                          */
*/*      THIS ROUTINE WILL COMPUTE THE EVENT TABLE LENGTH ROUNDING   */
*/*      IT UP TO A DOUBLE WORD LENGTH, REQUEST THE STORAGE IN SP    */
*/*      253 FROM GETMAIN, CLEAR THE EVENT TABLE HEADER AND THE      */
*/*      FIRST ENTRY, INITIALIZE THE HEADER WITH THE TCB ADDRESS,    */
*/*      THE LENGTH OF THE EVENT TABLE, THE ADDRESS OF THE FIRST     */
*/*      EVENT TABLE ENTRY AND THE LAST ENTRY, AND THEN THE EVENT    */
*/*      TABLE WILL BE QUEUED TO THE TOP OF THE EVENT TABLE QUEUE.   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0313
*EVNTQUET:                                                         0313
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0313
*                                                                  0313
EVNTQUET DS    0H                                                  0314
*/* EVNTQUET: CHART                                                  */
*/*      E     EVNTQUET                                              */
*/*      P     COMPUTE TABLE LENGTH                                  */
*                                                                  0314
*   RFY                                                            0314
*    (R10,                                                         0314
*     R11,                                                         0314
*     R12) RSTD;                                                   0314
*   R10=ENTRIES;                    /* LOAD NUMBER OF ENTRIES      0315
*                                      REQUESTED                     */
         LH    R10,ENTRIES(,FRRWKAR)                               0315
         N     R10,@CF02690                                        0315
*   R11=((((R10*4+(LENGTH(EVNTBEGN)))+7)/8)*8);/* COMPUTE LENGTH OF
*                                      EVENT TABLE                   */
         LR    @02,R10                                             0316
         SLA   @02,2                                               0316
         AL    @02,@CF02688                                        0316
         SRDA  @02,32                                              0316
         D     @02,@CF00053                                        0316
         SLA   @03,3                                               0316
         LR    R11,@03                                             0316
*/*      S     GETMAIN: GET EVENT TABLE SP 253                       */
*                                                                  0317
*   R12=R14;                        /* SAVE RETURN ADDRESS           */
         LR    R12,R14                                             0317
*   GENERATE;                                                      0318
         GETMAIN RU,SP=253,LV=(R11),BRANCH=YES                 @YM30458
*   R14=R12;                        /* RESTORE RETURN ADDRESS        */
         LR    R14,R12                                             0319
*/*      L     INITIALIZE EVENT TABLE HEADER                         */
*                                                                  0320
*   EVNTPTR=R1;                     /* GET EVENT TABLE POINTER       */
*   EVNT=EVNT&&EVNT;                /* CLEAR EVENT TABLE HEADER      */
         XC    EVNT(44,EVNTPTR),EVNT(EVNTPTR)                      0321
*   EVNTLNTH=R11;                   /* STORE LENGTH OF TABLE IN    0322
*                                      HEADER                        */
         STCM  R11,7,EVNTLNTH(EVNTPTR)                             0322
*   EVNTTCBP=TCBPTR;                /* STORE ADDRESS OF TCB IN TABLE */
         ST    TCBPTR,EVNTTCBP(,EVNTPTR)                           0323
*   EVNTFST=ADDR(EVNTHEND);         /* STORE ADDRESS OF FIRST ENTRY  */
         LA    @15,EVNTHEND(,EVNTPTR)                              0324
         ST    @15,EVNTFST(,EVNTPTR)                               0324
*   EVNTLST=(ADDR(EVNTHEND)+((R10-1)*4));/* STORE LAST VALID EVENT 0325
*                                      ENTRY ADDRESS                 */
         LR    @03,R10                                             0325
         BCTR  @03,0                                               0325
         SLA   @03,2                                               0325
         ALR   @15,@03                                             0325
         ST    @15,EVNTLST(,EVNTPTR)                               0325
*   EVNTLSTA=ADDR(EVNTDUMY);        /* STORE FIRST ACTIVE POINTER FOR
*                                      NO ENTRIES IN TABLE           */
         LA    @15,EVNTDUMY(,EVNTPTR)                              0326
         ST    @15,EVNTLSTA(,EVNTPTR)                              0326
*/*      P     QUEUE EVENT TABLE AT TOP OF QUEUE                     */
*                                                                  0327
*   EVNTLNK=TCBEVENT;               /* QUEUE TABLE AT TOP OF QUEUE   */
         L     @15,TCBEXT2(,TCBPTR)                                0327
         L     @03,TCBEVENT(,@15)                                  0327
         ST    @03,EVNTLNK(,EVNTPTR)                               0327
*   TCBEVENT=EVNTPTR;               /* STORE ADDRESS OF TABLE IN TCB */
         ST    EVNTPTR,TCBEVENT(,@15)                              0328
*/*      R     RETURN                                                */
*                                                                  0329
*   RFY                                                            0329
*    (R10,                                                         0329
*     R11,                                                         0329
*     R12) UNRSTD;                                                 0329
*   END EVNTQUET;                                                  0330
*                                                                  0330
@EL00009 DS    0H                                                  0330
@EF00009 DS    0H                                                  0330
@ER00009 BR    @14                                                 0330
*/* EVNTQUET: END                                                    */
*                                                                  0331
*                                                                  0331
*/* SUBROUT: CHART                                                   */
*/********************************************************************/
*/*                                                                  */
*/* ROUTINE TO SET FRR                                               */
*/*                                                                  */
*/*      THIS ROUTINE IS CALLED BY ENTRIES IGC125 AND IEAVEVT1       */
*/*      TO ESTABLISH THE EVENTS RECOVERY ENVIRONMENT                */
*/*      THIS ROUTINE WILL SET FRR WITH THE FRR ENTRY POINT EVENTFRR */
*/*      IT WILL THEN SAVE THE EVENTS INPUT PARAMETERS IN THE FRR    */
*/*      WORK AREA, AND RETURN THE ADDRESS OF THAT WORK AREA IN      */
*/*      REGISTER FRRWKAR.                                           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0331
*SETFRR:                                                           0331
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0331
*                                                                  0331
SETFRR   DS    0H                                                  0332
*/*  E    SETFRR                                                     */
*/*      L     ADD FRR TO FRR STACK                                  */
*                                                                  0332
*   RFY                                                            0332
*    (R8) RSTD;                                                    0332
*   R8=ADDR(EVENTFRR);              /* LOAD ADDRESS OF EVENT FRR     */
         LA    R8,EVENTFRR                                         0333
*   GENERATE REFS(R8,FRRWKAR,R10,R11);                             0334
*                                          /* SET FRR */
         SETFRR A,FRRAD=(R8),PARMAD=(FRRWKAR),WRKREGS=(R11,R12)
*   RFY                                                            0335
*    (R8) UNRSTD;                                                  0335
*                                                                  0335
*/*      P     SAVE INPUT PARAMETERS IN FRR WORK AREA                */
*                                                                  0336
*   FRRR0SAV=R0;                    /* SAVE REG ZERO                 */
         ST    R0,FRRR0SAV(,FRRWKAR)                               0336
*   FRRR1SAV=R1;                    /* SAVE REG ONE                  */
         ST    R1,FRRR1SAV(,FRRWKAR)                               0337
*/*  R    RETURN                                                     */
*                                                                  0338
*   END SETFRR;                                                    0338
*                                                                  0338
@EL00010 DS    0H                                                  0338
@EF00010 DS    0H                                                  0338
@ER00010 BR    @14                                                 0338
*/********************************************************************/
*/*                                                                  */
*/* ROUTINE TO DELETE FRR                                            */
*/*                                                                  */
*/*      THIS ROUTINE IS CALLED BY ENTRIES IGC125 AND IEAVEVT1 IT    */
*/*      IS ALSO CALLED BY ROUTINE EVNTABND TO DELETE THE EVENTS     */
*/*      RECOVERY ENVIRONMENT.                                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0339
*DELFRR:                                                           0339
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0339
*                                                                  0339
DELFRR   DS    0H                                                  0340
*/*  E    DELFRR                                                     */
*/*  L    DELETE FRR                                                 */
*                                                                  0340
*   GENERATE REFS(R10,R11);                                        0340
*                                                                  0340
         SETFRR D,WRKREGS=(R10,R11)
*/*  R    RETURN                                                     */
*                                                                  0341
*   END DELFRR;                                                    0341
@EL00011 DS    0H                                                  0341
@EF00011 DS    0H                                                  0341
@ER00011 BR    @14                                                 0341
*                                                                  0342
*/********************************************************************/
*/*                                                                  */
*/* ROUTINE TO ISSUE ABEND                                           */
*/*                                                                  */
*/*      THIS ROUTINE IS CALLED BY ENTRIES IGC125 AND IEAVEVT1       */
*/*      AND ROUTINES EVNTTVAL, EVNTTUPD, AND ECBINIT.               */
*/*      THIS ROUTINE IS PASSED THE ABEND CODE IN REGISTER ONE.      */
*/*      IT WILL THEN DELETE THE FRR AND ISSUE THE ABEND.            */
*/*                                                                  */
*/********************************************************************/
*                                                                  0342
*EVNTABND:                                                         0342
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0342
*                                                                  0342
EVNTABND DS    0H                                                  0343
*/*      E     EVNTABND                                              */
*/*      S     DELFRR: DELETE FRR                                    */
*                                                                  0343
*   CALL DELFRR;                    /* CALL ROUTINE TO DELETE FRR    */
         BAL   @14,DELFRR                                          0343
*/*      S     ABEND: ABEND CALLER CODE IN REG ONE                   */
*                                                                  0344
*   SVC(ABEND);                     /* ISSUE ABEND SVC               */
         SVC   13                                                  0344
*/*      R     ABEND                                                 */
*                                                                  0345
*   END EVNTABND;                                                  0345
*                                                                  0345
@EL00012 DS    0H                                                  0345
@EF00012 DS    0H                                                  0345
@ER00012 BR    @14                                                 0345
*/* SUBROUT:   END                                                   */
*                                                                  0346
*                                                                  0346
*/********************************************************************/
*/*                                                                  */
*/* FRR ROUTINE FOR EVENTS PROCESSING                                */
*/*                                                                  */
*/*      THIS ROUTINE IS BRANCH ENTERED VIA RTM. IT                  */
*/*      ESTABLISHED ADDRESSIBILITY AT ITS OWN ENTRY POINT.          */
*/*      DETERMINES IF THE ERROR OCCURRED IN THIS ADDRESS SPACE      */
*/*      AND IF IT WAS EXPECTED - DOES FRRABEND (IN THE FRR WORK     */
*/*      AREA) CONTAIN A PRESET ABEND CODE. IF BOTH CONDITIONS       */
*/*      ARE TRUE, IT ISSUES A SETRP WITH COMPCOD= TO FRRABEND,      */
*/*      DUMP=YES AND CONTINUE WITH TERMINATION.                     */
*/*      IF THE ERROR WAS IN THIS ADDRESS BUT NOT EXPECTED EVENTS    */
*/*      CALLS CHAP RECOVERY (IGC044R2) TO VERIFY THE COUNT OF READY */
*/*      TCBS (ASCBTCBS). EVENTS THEN DEQUEUES THE ENTIRE EVENT      */
*/*      TABLE QUEUE BY STORING ZEROES IN TCBEVENT. EVENTS THEN      */
*/*      ISSUES SETRP INDICATING THE EVENTS RECORDING INFORMATION    */
*/*      AND CONTINUE WITH TERMINATION.                              */
*/*      IF THE ERROR WAS NOT IN THIS ADDRESS SPACE EVENTS RETURNS   */
*/*      TO RTM INDICATING CONTINUE WITH TERMINATION.                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0346
*EVENTFRR:                                                         0346
*   PROC OPTIONS(NOSAVE,NOSAVEAREA,NOPARMREG,NOENTREG,RETREG);     0346
*                                                                  0346
EVENTFRR DS    0H                                                  0347
*/* EVENTFRR: CHART                                                  */
*/*      E     EVENTFRR                                              */
*/*      P     ESTABLISH ADDRESSIBILITY                              */
*                                                                  0347
*   GENERATE;                                                      0347
*                                                                  0347
         USING EVENTFRR,R6             ESTABLISH ADDRESSIBILITY
*                                      FOR THIS ENTRY
         LR    R6,R15                  LOAD ENTRY POINT
*/*      D     (YES,,NO,%FRRCNT1) WAS ERROR IN THIS ADDRESS SPACE    */
*                                                                  0348
*   IF SDWAFMID=ZERO THEN           /* WAS ERROR IN THIS ADDRESS   0348
*                                      SPACE                         */
         SLR   @15,@15                                             0348
         LH    @12,SDWAFMID(,SDWAPTR)                              0348
         N     @12,@CF02690                                        0348
         CR    @15,@12                                             0348
         BNE   @RF00348                                            0348
*     DO;                           /* ERROR IN THIS ADDRESS SPACE   */
*       FRRWKAR=SDWAPARM;           /* LOAD ADDRESS OF WORK AREA     */
         L     FRRWKAR,SDWAPARM(,SDWAPTR)                          0350
*       FRRRETN=R14;                /* SAVE RETURN ADDRESS           */
         ST    R14,FRRRETN(,FRRWKAR)                               0351
*/*      D     (YES,,NO,%FRRCNT2) WAS ERROR EXPECTED                 */
*                                                                  0352
*       IF FRRABEND^=ZERO THEN      /* WAS ABEND EXPECTED            */
         L     @12,FRRABEND(,FRRWKAR)                              0352
         CR    @12,@15                                             0352
         BE    @RF00352                                            0352
*         DO;                       /* ABEND EXPECTED CHANGE       0353
*                                      COMPLETION CODE               */
*/*      S   (,%FRRCNT1) SETRP: CHANGE COMPLETION CODE AND PERCOLATE */
*                                                                  0354
*           DO;                     /* SETRP COMPCOD(FRRABEND)DUMP(YE
*                                      S)RECORD(NO)                  */
*             RESPECIFY                                            0355
*              (GPR00P,                                            0355
*               GPR01P,                                            0355
*               GPR14P,                                            0355
*               GPR15P) RSTD;                                      0355
*             GPR01P->SDWARCDE=0;   /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0356
*             GPR01P->SDWARCRD='0'B;/* TURN OFF RECORD INDICATOR     */
         NI    SDWARCRD(GPR01P),B'01111111'                        0357
*             GPR01P->SDWAREQ='1'B; /* TURN ON DUMP INDICATOR        */
         OI    SDWAREQ(GPR01P),B'10000000'                         0358
*             GPR14P=FRRABEND;      /* ACCESS COMPLETION CODE        */
         LR    GPR14P,@12                                          0359
*             GPR01P->SDWACMPC=GPR14P;/* STORE COMPLETION CODE       */
         STCM  GPR14P,7,SDWACMPC(GPR01P)                           0360
*             RESPECIFY                                            0361
*              (GPR00P,                                            0361
*               GPR01P,                                            0361
*               GPR14P,                                            0361
*               GPR15P) UNRSTD;                                    0361
*           END;                                                   0362
*         END;                                                     0363
*       ELSE                        /* ABEND NOT EXPECTED            */
*         DO;                       /* DO FRR PROCESSING             */
         B     @RC00352                                            0364
@RF00352 DS    0H                                                  0365
*           RFY                                                    0365
*            (R2) RSTD;                                            0365
*                                                                  0365
*/* %FRRCNT2: S     IGC044R2: CALL CHAP RECOVERY                     */
*                                                                  0366
*           R2=ZERO;                /* CLEAR DUMP INDICATOR          */
         SLR   R2,R2                                               0366
*           R9=R6;                  /* SAVE BASE REG                 */
         LR    R9,R6                                               0367
*           CALL IGC044R2;          /* CALL CHAP RECOVERY TO VERIFY
*                                      ASCBTCBS                      */
         L     @12,CVTPTR                                          0368
         L     @15,CVT044R2(,@12)                                  0368
         BALR  @14,@15                                             0368
*           R6=R9;                  /* RESTORE BASE REG              */
         LR    R6,R9                                               0369
*           RFY                                                    0370
*            (R2) UNRSTD;                                          0370
*           TCBPTR=PSATOLD;         /* GET TCB POINTER               */
         L     TCBPTR,PSATOLD                                      0371
*/*      P     DEQUEUE EVENT TABLE QUEUE                             */
*                                                                  0372
*           TCBEVENT=ZERO;          /* DEQUEUE EVENT TABLE QUEUE     */
         L     @15,TCBEXT2(,TCBPTR)                                0372
         SLR   @12,@12                                             0372
         ST    @12,TCBEVENT(,@15)                                  0372
*/* %FRRCNT4: S     SETRP: RECORD=YES RECPARM=                       */
*                                                                  0373
*           DO;                     /* SETRP RECORD(YES)WKAREA(SDWAPT
*                                      R)RECPARM(FRRMODID)           */
*             RESPECIFY                                            0374
*              (GPR00P,                                            0374
*               GPR01P,                                            0374
*               GPR14P,                                            0374
*               GPR15P) RSTD;                                      0374
*             GPR01P=SDWAPTR;                                      0375
*             GPR01P->SDWARCDE=0;   /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0376
*             GPR01P->SDWARCRD='1'B;/* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0377
*             GPR15P=ADDR(FRRMODID);/* ACCESS RECORD PARAMETER LIST  */
         LA    GPR15P,FRRMODID                                     0378
*             GPR01P->SDWARECP=GPR15P->I256C(1:24);/* COPY RECORD  0379
*                                      PARAMETERS                    */
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0379
*             RESPECIFY                                            0380
*              (GPR00P,                                            0380
*               GPR01P,                                            0380
*               GPR14P,                                            0380
*               GPR15P) UNRSTD;                                    0380
*           END;                                                   0381
*         END;                                                     0382
*       R9=SDWAPARM;                /* RELOAD FRR WORK AREA ADDRESS  */
@RC00352 L     R9,SDWAPARM(,SDWAPTR)                               0383
*       R14=FRRRETN;                /* LOAD RETURN ADDRESS           */
         L     R14,FRRRETN(,FRRWKAR)                               0384
*     END;                                                         0385
*                                                                  0385
*/* %FRRCNT1: S (,%FRRCNT3) SETRP: RC=0                              */
*                                                                  0386
*   DO;                             /* SETRP WKAREA(SDWAPTR)RC(0)    */
@RF00348 DS    0H                                                  0387
*     RESPECIFY                                                    0387
*      (GPR00P,                                                    0387
*       GPR01P,                                                    0387
*       GPR14P,                                                    0387
*       GPR15P) RSTD;                                              0387
*     GPR01P=SDWAPTR;                                              0388
*     GPR01P->SDWARCDE=0;           /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0389
*     RESPECIFY                                                    0390
*      (GPR00P,                                                    0390
*       GPR01P,                                                    0390
*       GPR14P,                                                    0390
*       GPR15P) UNRSTD;                                            0390
*   END;                                                           0391
*                                                                  0391
*/* %FRRCNT3: R     RETURN                                           */
*                                                                  0392
*   END EVENTFRR;                                                  0392
*                                                                  0392
@EL00013 DS    0H                                                  0392
@EF00013 DS    0H                                                  0392
@ER00013 BR    @14                                                 0392
*/* EVENTFRR: END                                                    */
*                                                                  0393
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00P PTR(31) REG(0),                                       0393
*     GPR01P PTR(31) REG(1),                                       0393
*     GPR14P PTR(31) REG(14),                                      0393
*     GPR15P PTR(31) REG(15);                                      0393
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0394
*     I031F FIXED(31) BASED,                                       0394
*     I031P PTR(31) BASED,                                         0394
*     I015F FIXED(15) BASED,                                       0394
*     I015P PTR(15) BASED,                                         0394
*     I008P PTR(8) BASED,                                          0394
*     I001C CHAR(1) BASED;                                         0394
*   END IEAVEVT0                                                   0395
*                                                                  0395
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHAASXB )                                       */
*/*%INCLUDE SYSLIB  (IEECHAIN)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHAECB  )                                       */
*/*%INCLUDE SYSLIB  (IHAEVNT )                                       */
*/*%INCLUDE SYSLIB  (IEZJSCB )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IKJRB   )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IHAWSAVT)                                       */
*                                                                  0395
*       ;                                                          0395
@DATA    DS    0H
@CH02602 DC    H'32767'
@DATD    DSECT
         DS    0F
IEAVEVT0 CSECT
         DS    0F
@CF00037 DC    F'4'
@CF00053 DC    F'8'
@CF02688 DC    F'47'
@CF02693 DC    F'-8'
@CF02566 DC    XL4'8017D000'
@CF02570 DC    XL4'8047D000'
@CF02572 DC    XL4'8057D000'
@CF02574 DC    XL4'8067D000'
@CF02576 DC    XL4'8077D000'
@CF02578 DC    XL4'8087D000'
@CF02580 DC    XL4'8017A000'
@CF02584 DC    XL4'8047A000'
@CF02586 DC    XL4'00300000'
@CF02596 DC    XL4'80000001'
@CF02598 DC    XL4'80000000'
@CF02600 DC    XL4'40000000'
@CF02690 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
@ENDDATD EQU   *
IEAVEVT0 CSECT
         NOPR  ((@ENDDATD-@DATD)*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
IGC125A  DC    AL4(IGC125)
WOS      DS    AL1
@CB02695 DC    X'00'
FRRMODID DC    CL24'IEAVEVT0IEAVEVT0EVENTFRR'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
ASCBPTR  EQU   @07
EVNTPTR  EQU   @01
EVNTEPTR EQU   @10
RBSECPTR EQU   @05
TCBPTR   EQU   @04
SDWAPTR  EQU   @01
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
FRRWKAR  EQU   @09
R9       EQU   @09
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14P   EQU   @14
GPR15P   EQU   @15
ENTRYPTR EQU   @06
R3       EQU   @03
CVTPTR   EQU   16
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
ASCB     EQU   0
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBASXB EQU   ASCB+108
ASCBSWCT EQU   ASCB+112
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBTCBS EQU   ASCB+124
ASXB     EQU   0
ASXBSPSA EQU   ASXB+112
ASXBAEQ  EQU   ASXB+168
ASXBSECR EQU   ASXB+199
ASCBSFLG EQU   ASXBSECR
ASXBCASW EQU   ASXB+216
ASXBCRB1 EQU   ASXBCASW
CHAIN    EQU   0
CHFLG    EQU   CHAIN+4
CHSTS    EQU   CHFLG+2
CHACT    EQU   CHFLG+3
CHIFY    EQU   CHACT
CHKEY    EQU   CHAIN+8
CHPARM   EQU   CHKEY
CHPKE    EQU   CHAIN+28
CHTJID   EQU   CHAIN+30
CHPROCSN EQU   CHAIN+32
CHACT1   EQU   CHPROCSN+3
CHASM    EQU   CHAIN+40
CHECBP   EQU   CHASM
CHCIBP   EQU   CHASM+4
CHRGNSZ  EQU   CHASM+8
CHSTEP   EQU   CHASM+24
CHSWT    EQU   CHSTEP
CHSHORT  EQU   CHASM+32
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVT0DS   EQU   CVTMAP+136
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
ECB      EQU   0
ECBRB    EQU   ECB
ECBEVTB  EQU   ECBRB
ECBEXTB  EQU   ECBEVTB
ECBCC    EQU   ECBEXTB
ECBCCCNT EQU   ECBEXTB+1
ECBRBA   EQU   ECBCCCNT
ECBEVTBA EQU   ECBRBA
ECBEXTBA EQU   ECBEVTBA
ECBBYTE3 EQU   ECBEXTBA+2
ECBEXTND EQU   ECBBYTE3
EVNT     EQU   0
EVNTBEGN EQU   EVNT
EVNTHEDR EQU   EVNTBEGN
EVNTLNK  EQU   EVNTHEDR
EVNTTCBP EQU   EVNTBEGN+4
EVNTRBP  EQU   EVNTBEGN+8
EVNTFST  EQU   EVNTBEGN+12
EVNTLST  EQU   EVNTBEGN+16
EVNTLSTA EQU   EVNTBEGN+20
EVNTFLG1 EQU   EVNTBEGN+24
EVNTUPR  EQU   EVNTFLG1
EVNTLNTH EQU   EVNTBEGN+25
EVNTDUMY EQU   EVNTBEGN+36
EVNTHEND EQU   EVNT+40
EVNTENTY EQU   0
EVNTFLGS EQU   EVNTENTY
EVNTENDL EQU   EVNTFLGS
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBDCB  EQU   JSCBSEC1+36
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBCSCB EQU   JSCBSEC1+68
JSCBEND1 EQU   IEZJSCB+260
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSCURR EQU   FRRSHEAD+12
FRRSENTR EQU   0
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
XRBPSW   EQU   RBOPSW
RBOPSWB2 EQU   XRBPSW+1
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
RBPREFIX EQU   0
RBRSV019 EQU   RBPREFIX+14
RBRSV028 EQU   RBPREFIX+15
RBRSV041 EQU   RBPREFIX+27
RBRSV054 EQU   RBPREFIX+39
RBRTOPSW EQU   RBPREFIX+40
RBRTPSW2 EQU   RBRTOPSW+8
RBRTICIL EQU   RBRTPSW2
RBFLAGS1 EQU   RBPREFIX+56
RBXWAIT  EQU   RBFLAGS1
RBINTCDA EQU   RBPREFIX+61
RBSECT   EQU   0
RBPPSAV  EQU   RBSECT
@NM00053 EQU   RBSECT+10
@NM00054 EQU   @NM00053
RBTRSVRB EQU   @NM00054
@NM00056 EQU   @NM00053+1
RBETXR   EQU   @NM00056
RBEP     EQU   RBSECT+12
RBPGMQ   EQU   RBSECT+24
@NM00063 EQU   RBSECT+28
IRBEND   EQU   RBSECT+96
@NM00067 EQU   RBSECT+96
RBRSV138 EQU   @NM00067+7
RBRSV150 EQU   RBSECT+167
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBRBP   EQU   TCB
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBGRS1  EQU   TCBGRS+4
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBEVENT EQU   TCBXTNT2+8
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWAREQ  EQU   SDWACMPF
SDWACMPC EQU   SDWAABCC+1
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWAFMID EQU   SDWA+236
SDWAIOFS EQU   SDWA+238
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
WSAL     EQU   0
WSALEVNT EQU   WSAL+48
IGC044R2 EQU   0
IEA0DS   EQU   0
CALLER   EQU   0
LOCALSAV EQU   0
R2R14SAV EQU   LOCALSAV+8
FRRWKARA EQU   0
FRRR0SAV EQU   FRRWKARA
@NM00123 EQU   FRRR0SAV
WAITYES  EQU   @NM00123
WAITNO   EQU   @NM00123
ECBYES   EQU   @NM00123
ECBPTR   EQU   FRRR0SAV+1
LAST     EQU   ECBPTR
ENTRIES  EQU   LAST+1
FRRR1SAV EQU   FRRWKARA+4
FRRABEND EQU   FRRWKARA+8
FRRRETN  EQU   FRRWKARA+12
I256C    EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
ASXBPTR  EQU   ASCBASXB
CSCBPTR  EQU   JSCBCSCB
CHAINS01 EQU   CHASM
CHTYPE   EQU   CHAINS01+124
CHTRSTAT EQU   CHAINS01+125
CHCSYSO  EQU   CHAINS01+134
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVT044R2 EQU   CVTS01+376
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBFBYT EQU   JSCBSEC3+10
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCSCT   EQU   JSCBSEC3+68
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
PSARSVTE EQU   PSARSVT
PSACSTK  EQU   PSARSVTE
FRRSPTR  EQU   PSACSTK
FRREPTR  EQU   FRRSCURR
RBSECS03 EQU   RBEP
RBCDE    EQU   RBSECS03
RBCDFLGS EQU   RBCDE
RBSECS05 EQU   RBPGMQ
RBSQE    EQU   RBSECS05
RBSECS06 EQU   RBPGMQ
RBIQE    EQU   RBSECS06
RBSECS07 EQU   RBPGMQ
RBIQE2   EQU   RBSECS07
RBSECS08 EQU   IRBEND
RBSECS09 EQU   IRBEND
@NM00121 EQU   RBOPSW
RBUSKEY  EQU   @NM00121+1
FLC      EQU   PSA
WSALPTR  EQU   ASXBSPSA
*                                      START UNREFERENCED COMPONENTS
@NM00122 EQU   @NM00121
RBRSV161 EQU   RBSECS09+64
RBSIRBWA EQU   RBSECS09
RBIQEWRK EQU   RBSECS08+4
RBNEXAV  EQU   RBSECS08
RBIQEA   EQU   RBIQE2
RBIQE1   EQU   RBIQE+1
RBUSE    EQU   RBIQE
RBSQEA   EQU   RBSQE+1
@NM00068 EQU   RBSQE
RBCDE1   EQU   RBCDE+1
RBCDLOAD EQU   RBCDFLGS
RBCDXCTL EQU   RBCDFLGS
RBCDSYNC EQU   RBCDFLGS
RBCDNODE EQU   RBCDFLGS
RBCDSAVE EQU   RBCDFLGS
RBCDATCH EQU   RBCDFLGS
RBRSV009 EQU   RBCDFLGS
RBNOCELL EQU   RBCDFLGS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCBASWA EQU   JSCBSEC3+96
JSCBUFPT EQU   JSCBSEC3+92
JSCBACT  EQU   JSCBSEC3+88
JSCBSWSP EQU   JSCBSEC3+87
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCTMCOR EQU   JSCBSEC3+72
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCDSABQ EQU   JSCBSEC3+60
JSCBSSIB EQU   JSCBSEC3+56
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00015 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00014 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCBRV08 EQU   JSCBSEC3+11
JSCBRV07 EQU   JSCBFBYT
JSCBRV06 EQU   JSCBFBYT
JSCBRV05 EQU   JSCBFBYT
JSCBRV04 EQU   JSCBFBYT
JSCBRV03 EQU   JSCBFBYT
JSCBRV02 EQU   JSCBFBYT
JSCBADSP EQU   JSCBFBYT
JSCBRV01 EQU   JSCBFBYT
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
CHLAST   EQU   CHAINS01+136
CHSPA    EQU   CHAINS01+135
CHUSERID EQU   CHCSYSO
CHJB     EQU   CHCSYSO
CHDUMP   EQU   CHCSYSO
CHQUE    EQU   CHCSYSO
CHHOLD   EQU   CHCSYSO
CHOUT    EQU   CHCSYSO
CHINN    EQU   CHCSYSO
CHALL    EQU   CHCSYSO
CHINC    EQU   CHAINS01+132
CHPEND   EQU   CHAINS01+128
CHARID   EQU   CHAINS01+127
CHCNID   EQU   CHAINS01+126
@NM00004 EQU   CHTRSTAT
CHTSL    EQU   CHTRSTAT
CHTS     EQU   CHTRSTAT
CHINITL  EQU   CHTRSTAT
CHINIT   EQU   CHTRSTAT
CHJOBSL  EQU   CHTRSTAT
CHJOBS   EQU   CHTRSTAT
CHDEF    EQU   CHTYPE
CHHIAR   EQU   CHTYPE
CHARSV29 EQU   CHTYPE
CHARSV28 EQU   CHTYPE
CHARSV27 EQU   CHTYPE
CHARSV26 EQU   CHTYPE
CHARSV25 EQU   CHTYPE
CHDSTAT  EQU   CHTYPE
CHBUF    EQU   CHAINS01
@NM00125 EQU   LAST
@NM00124 EQU   @NM00123
CREATYES EQU   WAITYES
R1SAVE   EQU   LOCALSAV+4
R0SAVE   EQU   LOCALSAV
WSALACHP EQU   WSAL+56
WSALRSM  EQU   WSAL+52
WSALSTAE EQU   WSAL+44
WSALSTAT EQU   WSAL+40
WSALWAIT EQU   WSAL+36
WSALPOST EQU   WSAL+32
WSALEXIT EQU   WSAL+28
WSALS2EE EQU   WSAL+24
WSALCIRB EQU   WSAL+20
WSALABTM EQU   WSAL+16
WSALSDMP EQU   WSAL+12
WSALRTM2 EQU   WSAL+8
WSALVALC EQU   WSAL+4
WSALCWSA EQU   WSAL
@NM00120 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00119 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00118 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00117 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00116 EQU   SDWADDAT+3
@NM00115 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00114 EQU   SDWADDAT+1
@NM00113 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00112 EQU   SDWADUMP+2
@NM00111 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00110 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
@NM00109 EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00108 EQU   SDWAACF3
@NM00107 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00106 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00105 EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00104 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
SDWARTYA EQU   SDWA+240
@NM00103 EQU   SDWA+239
@NM00102 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
@NM00101 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00100 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00099 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00098 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00097 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00096 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00095 EQU   SDWAINC2
@NM00094 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00093 EQU   SDWAILC2
@NM00092 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00091 EQU   SDWANXT2
@NM00090 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00089 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00088 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00087 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00086 EQU   SDWAINC1
@NM00085 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00084 EQU   SDWAILC1
@NM00083 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00082 EQU   SDWANXT1
@NM00081 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00080 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00079 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00078 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00077 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00076 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00075 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
@NM00074 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00073 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
@NM00072 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00071 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00070 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00069 EQU   TCBPMASK
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
SIRBEND  EQU   RBSECT+168
SVRBEND  EQU   RBSECT+168
RBRSV158 EQU   RBRSV150
RBRSV157 EQU   RBRSV150
RBRSV156 EQU   RBRSV150
RBRSV155 EQU   RBRSV150
RBRSV154 EQU   RBRSV150
RBRSV153 EQU   RBRSV150
RBRSV152 EQU   RBRSV150
RBRSV151 EQU   RBRSV150
RBRSV149 EQU   RBSECT+166
RBRSV148 EQU   RBSECT+164
RBSCBB   EQU   RBSECT+144
TIRBEND  EQU   @NM00067+8
PRBEND   EQU   @NM00067+8
RBRSV146 EQU   RBRSV138
RBRSV145 EQU   RBRSV138
RBRSV144 EQU   RBRSV138
RBRSV143 EQU   RBRSV138
RBRSV142 EQU   RBRSV138
RBRSV141 EQU   RBRSV138
RBRSV140 EQU   RBRSV138
RBRSV139 EQU   RBRSV138
RBRSV137 EQU   @NM00067+6
RBRSV136 EQU   @NM00067+4
RBRSV135 EQU   @NM00067
@NM00066 EQU   RBSECT+32
@NM00065 EQU   @NM00063+1
@NM00064 EQU   @NM00063
RBPGMQ1  EQU   RBPGMQ+1
@NM00062 EQU   RBPGMQ
@NM00061 EQU   RBSECT+16
@NM00060 EQU   @NM00056
@NM00059 EQU   @NM00056
RBIQETP  EQU   @NM00056
RBUSIQE  EQU   RBETXR
RBATTN   EQU   @NM00056
@NM00058 EQU   @NM00056
@NM00057 EQU   @NM00056
RBPMSVRB EQU   @NM00054
RBATNXIT EQU   @NM00054
@NM00055 EQU   @NM00054
RBWAITP  EQU   @NM00054
RBFNSVRB EQU   RBTRSVRB
RBFTP    EQU   @NM00054
RBSIZE   EQU   RBSECT+8
RBABOPSW EQU   RBSECT+4
RBPPSAV1 EQU   RBPPSAV+1
@NM00052 EQU   RBPPSAV
RBPRFXND EQU   RBPREFIX+64
RBINTCOD EQU   RBINTCDA+1
RBINLNTH EQU   RBINTCDA
RBWCSA   EQU   RBPREFIX+60
RBRSV004 EQU   RBPREFIX+57
RBSSSYN  EQU   RBFLAGS1
RBSCB    EQU   RBFLAGS1
RBLONGWT EQU   RBFLAGS1
RBASIR   EQU   RBFLAGS1
RBRSV159 EQU   RBFLAGS1
RBABEND  EQU   RBFLAGS1
RBSLOCK  EQU   RBFLAGS1
RBRTRAN  EQU   RBRTPSW2+4
RBRTINCD EQU   RBRTICIL+2
RBRTILC  EQU   RBRTICIL+1
RBRSV160 EQU   RBRTICIL
RBRTPSW1 EQU   RBRTOPSW
RBRSV062 EQU   RBRSV054
RBRSV061 EQU   RBRSV054
RBRSV060 EQU   RBRSV054
RBRSV059 EQU   RBRSV054
RBRSV058 EQU   RBRSV054
RBRSV057 EQU   RBRSV054
RBRSV056 EQU   RBRSV054
RBRSV055 EQU   RBRSV054
RBRSV053 EQU   RBPREFIX+38
RBRSV052 EQU   RBPREFIX+36
RBRSV051 EQU   RBPREFIX+32
RBPRFXST EQU   RBPREFIX+32
RBRSV050 EQU   RBPREFIX+28
RBRSV049 EQU   RBRSV041
RBRSV048 EQU   RBRSV041
RBRSV047 EQU   RBRSV041
RBRSV046 EQU   RBRSV041
RBRSV045 EQU   RBRSV041
RBRSV044 EQU   RBRSV041
RBRSV043 EQU   RBRSV041
RBRSV042 EQU   RBRSV041
RBRSV040 EQU   RBPREFIX+26
RBRSV039 EQU   RBPREFIX+24
RBRSV038 EQU   RBPREFIX+20
RBRSV037 EQU   RBPREFIX+16
RBRSV036 EQU   RBRSV028
RBRSV035 EQU   RBRSV028
RBRSV034 EQU   RBRSV028
RBRSV033 EQU   RBRSV028
RBRSV032 EQU   RBRSV028
RBRSV031 EQU   RBRSV028
RBRSV030 EQU   RBRSV028
RBRSV029 EQU   RBRSV028
RBRSV027 EQU   RBRSV019
RBRSV026 EQU   RBRSV019
RBRSV025 EQU   RBRSV019
RBRSV024 EQU   RBRSV019
RBRSV023 EQU   RBRSV019
RBRSV022 EQU   RBRSV019
RBRSV021 EQU   RBRSV019
RBRSV020 EQU   RBRSV019
RBRSV018 EQU   RBPREFIX+13
RBRSV017 EQU   RBPREFIX+12
RBSRV016 EQU   RBPREFIX+11
RBRSV015 EQU   RBPREFIX+10
RBRSV014 EQU   RBPREFIX+8
RBRSV013 EQU   RBPREFIX+4
RBRSV012 EQU   RBPREFIX
RBEXSAVE EQU   XRBESA
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00051 EQU   RBBASIC+24
RBOPSWPS EQU   RBOPSWB2
@NM00050 EQU   RBOPSWB2
@NM00049 EQU   XRBPSW
@NM00048 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00047 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00046 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00045 EQU   XSTAB1
@NM00044 EQU   RBBASIC+8
@NM00043 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00042 EQU   RBPRFX
FRRSPARM EQU   FRRSENTR+8
@NM00041 EQU   FRRSFLGS+1
@NM00040 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSFRRA EQU   FRRSENTR
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
FRRSELEN EQU   FRRSHEAD+8
FRRSLAST EQU   FRRSHEAD+4
FRRSEMP  EQU   FRRSHEAD
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00013 EQU   JSCBSEC1+60
JSCBQMPI EQU   JSCBSEC1+56
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBPASS EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBSTEP EQU   JSCBSEC1+40
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBTCBP EQU   JSCBSEC1+20
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCBSHR  EQU   JSCBSEC1+8
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00012 EQU   IEZJSCB
EVNTENTP EQU   EVNTENTY+1
@NM00011 EQU   EVNTFLGS
EVNTRES3 EQU   EVNTBEGN+32
EVNTRES2 EQU   EVNTBEGN+28
ECBEVNT  EQU   ECBEXTND
@NM00010 EQU   ECBEXTND
@NM00009 EQU   ECBBYTE3
@NM00008 EQU   ECBEXTBA
@NM00007 EQU   ECBCC
ECBPOSTB EQU   ECBCC
ECBWAITB EQU   ECBCC
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00006 EQU   CVTFIX+248
@NM00005 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
CHSAVWD2 EQU   CHSHORT+100
CHSAVWD1 EQU   CHSHORT+96
CHJSCBVS EQU   CHSHORT+92
CHUSCVS  EQU   CHSHORT+88
@NM00003 EQU   CHSHORT+84
@NM00002 EQU   CHSHORT+80
CHSQA    EQU   CHSHORT+44
CHQPA    EQU   CHSHORT+8
CHJCL    EQU   CHSHORT+4
CHSPC    EQU   CHSHORT
CHSPB    EQU   CHSTEP+4
CHTCB    EQU   CHSTEP+1
CHARSV23 EQU   CHSWT
CHARSV22 EQU   CHSWT
CHARSV21 EQU   CHSWT
CHAC     EQU   CHSWT
CHPSF    EQU   CHSWT
CHPSD    EQU   CHSWT
CHJCT    EQU   CHSWT
CHARSV20 EQU   CHSWT
CHCECB   EQU   CHASM+20
CHECB    EQU   CHASM+16
CHRGNAD  EQU   CHASM+12
CHARSV18 EQU   CHRGNSZ+1
CHRPRTY  EQU   CHRGNSZ
@NM00001 EQU   CHCIBP
CHEND    EQU   CHCIBP
CHDER    EQU   CHPROCSN+4
CHARSV10 EQU   CHACT1
CHARSV09 EQU   CHACT1
CHARSV08 EQU   CHACT1
CHARSV07 EQU   CHACT1
CHARSV06 EQU   CHACT1
CHARSV05 EQU   CHACT1
CHARSV04 EQU   CHACT1
CHRDWTR  EQU   CHACT1
CHARSV30 EQU   CHPROCSN+2
CHQID    EQU   CHPROCSN
CHASID   EQU   CHTJID
CHUCMP   EQU   CHAIN+29
CHTRKID  EQU   CHPKE
CHCIBCTR EQU   CHAIN+27
CHUNIT   EQU   CHAIN+24
CHCLS    EQU   CHAIN+16
CHPCOI   EQU   CHPARM
CHAFORCE EQU   CHIFY
CHAIFX   EQU   CHACT
CHCLD    EQU   CHACT
CHCL     EQU   CHACT
CHDSI    EQU   CHACT
CHDISC   EQU   CHACT
CHTERM   EQU   CHACT
CHSWAP   EQU   CHACT
CHABTERM EQU   CHSTS
CHFC     EQU   CHSTS
CHDL     EQU   CHSTS
CHAD     EQU   CHSTS
CHQSPC   EQU   CHSTS
CHSOUT   EQU   CHSTS
CHSYS    EQU   CHSTS
CHAP     EQU   CHSTS
CHSZE    EQU   CHFLG+1
CHVCD    EQU   CHFLG
CHPTR    EQU   CHAIN
ASXBEND  EQU   ASXB+232
ASXBRV25 EQU   ASXB+228
ASXBRV24 EQU   ASXB+224
ASXBPT0E EQU   ASXB+220
ASXBCRB4 EQU   ASXBCASW+3
ASXBCRB3 EQU   ASXBCASW+2
ASXBCRB2 EQU   ASXBCASW+1
ASXBCR06 EQU   ASXBCRB1
ASXBCR05 EQU   ASXBCRB1
ASXBCR04 EQU   ASXBCRB1
ASXBCR03 EQU   ASXBCRB1
ASXBCR02 EQU   ASXBCRB1
ASXBCR01 EQU   ASXBCRB1
ASXBTFD  EQU   ASXBCRB1
ASXBPIP  EQU   ASXBCRB1
ASXBCTDC EQU   ASXB+212
ASXBTDCB EQU   ASXB+208
ASXBRV19 EQU   ASXB+204
ASXBSENV EQU   ASXBSECR+1
ASXBRV34 EQU   ASCBSFLG
ASXBRV33 EQU   ASCBSFLG
ASXBRV32 EQU   ASCBSFLG
ASXBRV31 EQU   ASCBSFLG
ASXBRV30 EQU   ASCBSFLG
ASXBRV29 EQU   ASCBSFLG
ASXBRV28 EQU   ASCBSFLG
ASXBRV27 EQU   ASCBSFLG
ASXBUSER EQU   ASXB+192
ASXBLSRB EQU   ASXBAEQ+20
ASXBFSRB EQU   ASXBAEQ+16
ASXBLRQE EQU   ASXBAEQ+12
ASXBFRQE EQU   ASXBAEQ+8
ASXBLIQE EQU   ASXBAEQ+4
ASXBFIQE EQU   ASXBAEQ
ASXBETSK EQU   ASXB+164
ASXBSIRB EQU   ASXB+160
ASXBPSWD EQU   ASXB+152
ASXBPRG  EQU   ASXB+136
ASXBRV26 EQU   ASXB+132
ASXBOUSB EQU   ASXB+128
ASXBDDR  EQU   ASXB+124
ASXBRCTD EQU   ASXB+120
ASXBRSMD EQU   ASXB+116
ASXBFRWA EQU   ASXB+108
ASXBFLSA EQU   ASXB+36
ASXBIHSA EQU   ASXB+32
ASXBRV15 EQU   ASXB+28
ASXBRV14 EQU   ASXB+24
ASXBLWA  EQU   ASXB+20
ASXBMPST EQU   ASXB+16
ASXBRS00 EQU   ASXB+14
ASXBTCBS EQU   ASXB+12
ASXBLTCB EQU   ASXB+8
ASXBFTCB EQU   ASXB+4
ASXBASXB EQU   ASXB
ASXBEGIN EQU   ASXB
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBLGCB EQU   ASCB+180
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBCMSB EQU   ASCB+132
ASCBCMSF EQU   ASCB+128
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBQSVC EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBLSLQ EQU   ASCB+24
ASCBFSLQ EQU   ASCB+20
ASCBIOSP EQU   ASCB+16
ASCBLOCK EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
@NM00039 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00038 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00037 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00036 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00035 EQU   FLCFSA
@NM00034 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00033 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00032 EQU   FLCIOA
@NM00031 EQU   FLCMCLA+15
@NM00030 EQU   FLCMCLA+14
@NM00029 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00028 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00027 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00026 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00025 EQU   FLCPER
@NM00024 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00023 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00022 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00021 EQU   FLCPIILC
@NM00020 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00019 EQU   FLCSVILC
@NM00018 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00017 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00016 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RT00166 EQU   CKWAIT
TABLEOK  EQU   @EL00004
@RF00172 EQU   @EL00004
@RF00191 EQU   @EL00005
@RF00193 EQU   @EL00005
@RC00195 EQU   @EL00005
@RC00227 EQU   @EL00006
@RC00284 EQU   @EL00007
@ENDDATA EQU   *
         END   IEAVEVT0,(C'PLS1353',0701,78128)
