         TITLE 'IKTCA30 -- USER INTERFACE DRIVER'
IKTCAS30 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKTCAS30  78.336'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
*/********************************************************************/
*/*                                                                  */
*/*        THIS ROUTINE MANIPULATES THE QUEUES  ACCORDING TO         */
*/*        THE PRIORITY OF THE QUEUES :                              */
*/*            SYNCHRONOUS QUEUE                                     */
*/*            ADDRESS SPACE CREATION QUEUE                          */
*/*                                                                  */
*/********************************************************************/
*    /*                                                              */
*    /*      ESTABLISH TCAS WORK AREA ADDRESSIBILITY AND SET         */
*    /*      FOOTPRINT FOR ESTAI EXIT ROUTINE BY STORE DRIVER        */
*    /*      FUNCTION CODE WITHOUT RETRY ADDRESS. THAT MEANS         */
*    /*      ESTAI EXIT WILL ABEND THE TASK WITHOUT RETRY.           */
*    /*                                                              */
*      TWAPTR=R1 ;                     /* LOAD TWA ADDR PASSED IN R1 */
         LR    TWAPTR,R1                                           0014
*      TWAUEIFC(1)=FCUIDI ;            /* SET FOOTPRINT FOR ESTAI    */
         MVI   TWAUEIFC(TWAPTR),X'01'                              0015
*      SWITCH='00'X ;                  /* INIT SWITCH                */
         MVI   SWITCH,X'00'                                        0016
*      DO WHILE (SWWAIT='0'B) ;        /* LOOP UNTIL BYPASS WAIT     */
         B     @DE00017                                            0017
@DL00017 DS    0H                                                  0018
*      DO WHILE (SWPRQS='0'B) ;        /* LOOP UNTIL BYPASS PROCESS  */
         B     @DE00018                                            0018
@DL00018 DS    0H                                                  0019
*                                      /* THE QUEUES                 */
*    /*                                                              */
*    /*      PROCESS  SYNCHRONOUS  QUEUE                             */
*    /*                                                              */
*      DO WHILE (TWASYNQH^=0 &         /* LOPP WHILE Q IS NOT EMPTY  */
*                SWPRQS='0'B ) ;       /*   AND NOT TO BE BYPASSED   */
         B     @DE00019                                            0019
@DL00019 DS    0H                                                  0020
*      RFY WESTD BASED(TWASYNQH);      /* BASED ON FIRST W.E. ON Q   */
*      R10=TWASYNQH ;                  /* R10 PTR TO FIRST W.E.      */
         L     @15,TWASYNQH(,TWAPTR)                               0021
         LR    R10,@15                                             0021
*      SWDEQ='0'B ;                    /* INITIALIZE DEQ BYPASS BIT  */
         NI    SWDEQ,B'11011111'                                   0022
*      IF WECODE1T=TCUI                     /* IS IT FOR USER TASK   */
*         THEN DO ;                         /* YES                   */
         CLI   WECODE1T(@15),X'03'                                 0023
         BNE   @RF00023                                            0023
*         IF WECODE1F=FCUITC × WECODE1F=FCUITM /* IS A.S.TERM FUNC   */
*            THEN  DO;                         /* YES                */
         CLI   WECODE1F(@15),X'21'                                 0025
         BE    @RT00025                                            0025
         CLI   WECODE1F(@15),X'22'                                 0025
         BNE   @RF00025                                            0025
@RT00025 DS    0H                                                  0026
*            UIWA1=WECODE1F ;                  /* RETAIN FUNC CODE   */
         L     @01,TWASYNQH(,TWAPTR)                               0027
         MVC   UIWA1(1),WECODE1F(@01)                              0027
*            CALL  IKTCAS32 ;               /* CALL A.S.TERM FUNCTION*/
         L     @15,@CV00259                                        0028
         BALR  @14,@15                                             0028
*            IF UIWA1 ^= WECODE1F           /* HAS F C BEEN CHANGED  */
*               THEN SWDEQ='1'B ;      /* DONT DEQ,SET BYPASS BIT ON */
         L     @01,TWASYNQH(,TWAPTR)                               0029
         CLC   UIWA1(1),WECODE1F(@01)                              0029
         BE    @RF00029                                            0029
         OI    SWDEQ,B'00100000'                                   0030
*            END;                                                  0031
*            ELSE                      /* NOT A.S. CREATION          */
*              IF WECODE1F=FCUIDE      /* IS THIS EOT W.E.           */
*                 THEN DO ;            /* YES                        */
         B     @RC00025                                            0032
@RF00025 L     @01,TWASYNQH(,TWAPTR)                               0032
         CLI   WECODE1F(@01),X'03'                                 0032
         BNE   @RF00032                                            0032
*                 SWPRQS='1'B ;        /* BYPASS ALL THE QUEUES      */
*                 SWWAIT='1'B;         /* BYPASS WAIT                */
         OI    SWPRQS,B'11000000'                                  0035
*                 END ;                                            0036
*         END ;                                                    0037
*         ELSE IF WECODE1T=TCML             /* IS IT FOR MAINLINE    */
*              THEN DO;                     /* YES                   */
         B     @RC00023                                            0038
@RF00023 L     @01,TWASYNQH(,TWAPTR)                               0038
         CLI   WECODE1T(@01),X'01'                                 0038
         BNE   @RF00038                                            0038
*               R8=ADDR(TWAMECB) ;          /* GET MAIN ECB ADDR     */
         LA    R8,TWAMECB(,TWAPTR)                                 0040
*              RFY (R14,R15,R0,R1) RSTD  /* RESTRICT PARA REG*/  ; 0041
*              GEN CODE ;                                          0042
         POST  (8)                     POST MAINLINE
*              RFY (R14,R15,R0,R1) UNRSTD /*UNRESTRI PARA R */ ;   0043
*              SWDEQ='1'B ;           /* BYPASS DEQ THE W.E.        */
*              SWPRQS='1'B ;          /* BYPASS PROCESS ALL QS      */
         OI    SWDEQ,B'01100000'                                   0045
*              END;                                                0046
*              ELSE                         /* NOT MAINLINE          */
*              IF WECODE1T=TCVI             /* IS IT FOR VTAM INT    */
*                 THEN DO;                  /* YES                   */
         B     @RC00038                                            0047
@RF00038 L     @01,TWASYNQH(,TWAPTR)                               0047
         CLI   WECODE1T(@01),X'02'                                 0047
         BNE   @RF00047                                            0047
*                  R8=ADDR(TWAVECB) ;       /* GET V I ECB ADDR      */
         LA    R8,TWAVECB(,TWAPTR)                                 0049
*                 RFY (R14,R15,R0,R1) RSTD  /* RESTRICT PARA REG*/  ;
*                 GEN CODE ;                                       0051
         POST  (8)                     POST VTAM INT
*                 RFY (R14,R15,R0,R1) UNRSTD /*UNRESTRI PARA R */ ;
*                   SWDEQ='1'B ;       /* BYPASS DEQ W.E.            */
*                   SWPRQS='1'B ;      /* BYPASS PROCESS ALL QS      */
         OI    SWDEQ,B'01100000'                                   0054
*                 END ;                                            0055
*                 ELSE IF WECODE1T=TCCI     /* IS IT FOR CON COMM    */
*                         THEN DO;          /* YES                   */
         B     @RC00047                                            0056
@RF00047 L     @01,TWASYNQH(,TWAPTR)                               0056
         CLI   WECODE1T(@01),X'04'                                 0056
         BNE   @RF00056                                            0056
*                       R8=ADDR(TWACECB) ;  /* GET CON COMM ECB ADDR */
         LA    R8,TWACECB(,TWAPTR)                                 0058
*                         RFY (R14,R15,R0,R1) RSTD  /* RESTRICT PARA RE
**/ ;                                                              0059
*                         GEN CODE ;                               0060
         POST  (8)                     POST CON COMM INT
*                         RFY (R14,R15,R0,R1) UNRSTD /*UNRESTRI PARA R
*/ ;                                                               0061
*                      SWDEQ='1'B ;    /* BYPASS DEQ W.E.            */
*                      SWPRQS='1'B ;   /* BYPASS PROCESS ALL QS      */
         OI    SWDEQ,B'01100000'                                   0063
*                      END ;                                       0064
*      IF SWDEQ='0'B                   /* IS DEQ W.E. NOT BYPASS     */
*         THEN DO ;                    /* NO, GO AHEAD DEQ           */
@RF00056 DS    0H                                                  0065
@RC00047 DS    0H                                                  0065
@RC00038 DS    0H                                                  0065
@RC00023 TM    SWDEQ,B'00100000'                                   0065
         BNZ   @RF00065                                            0065
*      R8=ADDR(TWASYNQH);                   /* GET Q HEADER ADDR TO  */
         LA    R8,TWASYNQH(,TWAPTR)                                0067
*                                           /* DEQUEU THE WE         */
*         GEN SETS(TWASYNQH);          /* COMPARE SWAP TO DEQ        */
         L     10,0(8)                 LOAD WE ADDR
CSLOOP   L     9,4(10)                 LOAD NEXT WE ADDR
         CS    10,9,0(8)               SWAP
         BNE   CSLOOP                  LOOP AROUND
*      IF R9=0                              /* IF Q EMPTY            */
*         THEN DO;                          /* POST ALL SUBTASK      */
         LTR   R9,R9                                               0069
         BNZ   @RF00069                                            0069
*         R8=ADDR(TWAVECB) ;                /* GET VTAM ECB ADDR     */
         LA    R8,TWAVECB(,TWAPTR)                                 0071
*         R9=ADDR(TWACECB) ;                /* GET CON COMM ECB ADDR */
         LA    R9,TWACECB(,TWAPTR)                                 0072
*         RFY (R14,R15,R0,R1) RSTD  /* RESTRICT PARA REG*/ ;       0073
*         GEN  CODE ;                                              0074
         POST  (8)                     POST VTAM INT
         POST  (9)                     POST C C  INT
*         RFY (R14,R15,R0,R1) UNRSTD /*UNRESTRI PARA R */ ;        0075
*         END ;                                                    0076
*         END ;                                                    0077
@RF00069 DS    0H                                                  0078
*      END ;                                                       0078
@RF00065 DS    0H                                                  0078
@DE00019 L     @15,TWASYNQH(,TWAPTR)                               0078
         LTR   @15,@15                                             0078
         BZ    @DC00019                                            0078
         TM    SWPRQS,B'01000000'                                  0078
         BZ    @DL00019                                            0078
@DC00019 DS    0H                                                  0079
*    /*                                                              */
*    /*      PROCESS   ASYNCHRONOUS  QUEUE                           */
*    /*                                                              */
*/*                                                                  */
*/*          PROCESS  ADDRESS SPACE CREATION QUEUE                   */
*/*                                                                  */
*      IF SWPRQS='0'B                  /* IF ALL OTHER QS NOT BYPASS */
*         THEN DO ;                    /* PROCESS                    */
         TM    SWPRQS,B'01000000'                                  0079
         BNZ   @RF00079                                            0079
*         RFY  R1  RSTD ;                                          0081
*         R1=ADDR(TWAUACQH) ;               /* R1 ADDR OF Q HEADER   */
         LA    R1,TWAUACQH(,TWAPTR)                                0082
*         CALL  DEQASYN ;                   /* CALL DEQ ROUTINE      */
         BAL   @14,DEQASYN                                         0083
*         IF R1 ^=0                                                0084
*            THEN DO ;                      /* IF Q IS NOT EMPTY     */
         LTR   R1,R1                                               0084
         BZ    @RF00084                                            0084
*            R10=R1 ;                  /* R10 POINTS TO THE W.E.     */
         LR    R10,R1                                              0086
*            RFY  R1 UNRSTD ;                                      0087
*         CALL IKTCAS31 ;                   /* CALL A.S.CREATE       */
         L     @15,@CV00258                                        0088
         BALR  @14,@15                                             0088
*         IF TWAUFL3='1'B                   /* IS POST BIT ON        */
*            THEN DO ;                      /* YES                   */
         TM    TWAUFL3(TWAPTR),B'00100000'                         0089
         BNO   @RF00089                                            0089
*            ECBPTR=ADDR(TWAVECB) ;         /* POINTS TO VTAM ECB    */
         LA    @15,TWAVECB(,TWAPTR)                                0091
         LR    ECBPTR,@15                                          0091
*            IF ECBWAITB='1'B                /* IS VTAM TASK IN WAIT */
*               THEN DO ;                   /* YES POST              */
         TM    ECBWAITB(ECBPTR),B'10000000'                        0092
         BNO   @RF00092                                            0092
*               R8=ADDR(TWAVECB) ;          /* GET VTAM ECB ADDR     */
         LR    R8,@15                                              0094
*               RFY (R14,R15,R0,R1) RSTD  /* RESTRICT PARA REG*/ ; 0095
*               GEN CODE ;                                         0096
         POST  (8)                     POST VTAM INT TASK
*               RFY (R14,R15,R0,R1) UNRSTD /*UNRESTRI PARA R */ ;  0097
*               TWAUFL3='0'B ;              /* TURN OFF POST BIT     */
         NI    TWAUFL3(TWAPTR),B'11011111'                         0098
*               END ;                                              0099
*            END ;                                                 0100
*         END ;                                                    0101
*         ELSE SWPRQS='1'B ;           /* ALL Q ARE EMPTY            */
         B     @RC00084                                            0102
@RF00084 OI    SWPRQS,B'01000000'                                  0102
*      END ;                                                       0103
@RC00084 DS    0H                                                  0104
*      END ;                           /* END OF ALL Q PROCESS LOOP  */
@RF00079 DS    0H                                                  0104
@DE00018 TM    SWPRQS,B'01000000'                                  0104
         BZ    @DL00018                                            0104
*          IF TWAUFL3='1'B                  /* IS POST NEEDED        */
*             THEN DO ;                     /* YES                   */
         TM    TWAUFL3(TWAPTR),B'00100000'                         0105
         BNO   @RF00105                                            0105
*            R8=ADDR(TWAVECB) ;             /* GET VTAM ECB ADDR     */
         LA    R8,TWAVECB(,TWAPTR)                                 0107
*             RFY (R14,R15,R0,R1) RSTD  /* RESTRICT PARA REG*/ ;   0108
*             GEN CODE ;                                           0109
         POST  (8)                     POST VTAM INT TASK
*             RFY (R14,R15,R0,R1) UNRSTD /*UNRESTRI PARA R */ ;    0110
*      TWAUFL3='0'B ;                  /* RESET POST BIT             */
         NI    TWAUFL3(TWAPTR),B'11011111'                         0111
*             END ;                                                0112
*    /*                                                              */
*    /*        WAIT  FOR  WORK - WAIT ON AN ECB. IF POSTED,          */
*    /*                          MEANS MORE WORK AND W.E. ARE QUEUED */
*    /*                                                              */
*      IF SWWAIT='0'B                  /* WAIT NOT TO BE BYPASSED    */
*         THEN DO ;                    /* NO, GO WAIT                */
@RF00105 TM    SWWAIT,B'10000000'                                  0113
         BNZ   @RF00113                                            0113
*      RFY (R14,R15,R0,R1) RSTD  /* RESTRICT PARA REG*/ ;          0115
*      R8=ADDR(TWAUECB);                    /* GET ECB ADDR          */
         LA    R8,TWAUECB(,TWAPTR)                                 0116
*      GEN CODE ;                                                  0117
         WAIT  ECB=(8)                WAIT ON WORK
*      TWAUECB='00'X ;                                             0118
         XC    TWAUECB+1(3,TWAPTR),TWAUECB+1(TWAPTR)               0118
         MVI   TWAUECB(TWAPTR),X'00'                               0118
*      RFY (R14,R15,R0,R1) UNRSTD /*UNRESTRI PARA R */ ;           0119
*         SWITCH='00'X ;               /* RESET SWITCHES             */
         MVI   SWITCH,X'00'                                        0120
*      END ;                                                       0121
*      END ;                           /* END OF WAIT LOOP           */
@RF00113 DS    0H                                                  0122
@DE00017 TM    SWWAIT,B'10000000'                                  0122
         BZ    @DL00017                                            0122
         EJECT
*    /*                                                              */
*    /*        ROUTINE TO DE-CHAIN THE LAST WE ON ASYCHRONOUS QUEUE  */
*    /*                                                              */
*    /*        INPUT: R1 ADDRESS OF ASY QUEUE                        */
*    /*               R14 RETURN ADDR                                */
*    /*                                                              */
*    /*        OUTPUT: R1 ADDRESS OF THE WE DE-CHAINED OR ZERO       */
*    /*                   IF ZERO, ASY QUEUE WAS EMPTY               */
*    /*                                                              */
*DEQASYN : PROC OPTIONS(SAVE(R14),NOSAVEAREA) ;                    0123
@EL00001 L     @13,4(,@13)                                         0123
@EF00001 DS    0H                                                  0123
@ER00001 LM    @14,@12,12(@13)                                     0123
         BR    @14                                                 0123
DEQASYN  ST    @14,12(,@13)                                        0123
*      RFY R1 RSTD ;                                               0124
*      R9=0  ;                         /* ZERO FOR COMPARE SWAP      */
         SLR   R9,R9                                               0125
*                                      /* INSTRUCTION TO DEQ W.E.    */
*      SW='1'B ;                       /* SET SWITCH                 */
         OI    SW,B'00010000'                                      0126
*      DO WHILE (SW='1'B ) ;            /* LOOP UNTIL CS WORK        */
         B     @DE00127                                            0127
@DL00127 DS    0H                                                  0128
*         R8=R1 ;                       /* ADDR OF QUEUE HEADER      */
         LR    R8,R1                                               0128
*         R10=R8 -> WA1 ;               /* LOAD ADDR OF FIRST WE     */
         L     R10,WA1(,R8)                                        0129
*         IF R10 ^=0                    /* IS Q EMPTY                */
*            THEN DO ;                  /* NO                        */
         LTR   R10,R10                                             0130
         BZ    @RF00130                                            0130
*            RFY WESTD BASED (R10) ;    /* WE BASE                   */
*            DO WHILE (WENEXT ^=0 ) ;   /* FIND LAST WE              */
         B     @DE00133                                            0133
@DL00133 DS    0H                                                  0134
*            R8=ADDR(WENEXT) ;          /* ADDR OF ADDR OF NEXT WE   */
         LA    R8,WENEXT(,R10)                                     0134
*            R10=WENEXT ;               /* RELOAD POINTER            */
         L     R10,WENEXT(,R10)                                    0135
*            END ;                      /* FOUND LAST ONE            */
@DE00133 L     @00,WENEXT(,R10)                                    0136
         LTR   @00,@00                                             0136
         BNZ   @DL00133                                            0136
*            CS(R10,R9,R8->WA1) ;      /* DEQ THE W.E.               */
         CS    R10,@09,WA1(R8)                                     0137
*            BC(8,DEQ1) ;               /* SUCCESSFUL BRANCH         */
         BC    8,DEQ1                                              0138
*            END ;                                                 0139
*            ELSE SW='0'B ;             /* QUEUE EMPTY               */
         B     @RC00130                                            0140
@RF00130 NI    SW,B'11101111'                                      0140
*      END ;                            /* LOOP AROUND               */
@RC00130 DS    0H                                                  0141
@DE00127 TM    SW,B'00010000'                                      0141
         BO    @DL00127                                            0141
*DEQ1 :R1=R10  ;                        /* ADDR OF THE WE DEQ        */
DEQ1     LR    R1,R10                                              0142
*      RFY R1 UNRSTD ;                                             0143
*      END DEQASYN ;                                               0144
@EL00002 DS    0H                                                  0144
@EF00002 DS    0H                                                  0144
@ER00002 L     @14,12(,@13)                                        0144
         BR    @14                                                 0144
*      END IKTCAS30                                                0145
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKTCASWA)                                        *
*/*%INCLUDE SYSLIB  (IHAECB  )                                        *
*;                                                                 0145
@DATA    DS    0H
         DS    0F
@SA00001 DS    18F
         DS    0F
@CV00258 DC    V(IKTCAS31)
@CV00259 DC    V(IKTCAS32)
         DS    0D
SWITCH   DS    BL1
         ORG   SWITCH
SWWAIT   DS    BL1
SWPRQS   EQU   SWITCH+0
SWDEQ    EQU   SWITCH+0
SW       EQU   SWITCH+0
@NM00007 EQU   SWITCH+0
         ORG   SWITCH+1
UIWA     DS    BL4
         ORG   UIWA
UIWA1    DS    BL1
UIWA11   DS    BL3
         ORG   UIWA+4
         DS    CL3
PATCH    DC    16F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
ECBPTR   EQU   @02
TWAPTR   EQU   @11
R0       EQU   @00
R1       EQU   @01
R8       EQU   @08
R9       EQU   @09
R10      EQU   @10
R14      EQU   @14
R15      EQU   @15
R12      EQU   @12
R13      EQU   @13
TWAR     EQU   0
TWASYNQH EQU   TWAR+4
TWAMECB  EQU   TWAR+64
TWAMFL   EQU   TWAR+80
TWAVFL   EQU   TWAR+81
TWAUFL   EQU   TWAR+82
TWAUFL3  EQU   TWAUFL
TWACFL   EQU   TWAR+83
TWAM     EQU   TWAR+84
TWAME    EQU   TWAM+68
TWAMEI   EQU   TWAME
TWAV     EQU   TWAR+184
TWAVE    EQU   TWAV+68
TWAVEI   EQU   TWAVE
TWAVI    EQU   TWAR+284
TWAVECB  EQU   TWAVI
TWAU     EQU   TWAR+300
TWAUE    EQU   TWAU+68
TWAUEI   EQU   TWAUE
TWAUEIFC EQU   TWAUEI
TWAUI    EQU   TWAR+400
TWAUECB  EQU   TWAUI
TWAUACQH EQU   TWAUI+4
TWAC     EQU   TWAR+408
TWACE    EQU   TWAC+68
TWACEI   EQU   TWACE
TWACI    EQU   TWAR+508
TWACECB  EQU   TWACI
ECB      EQU   0
ECBRB    EQU   ECB
ECBEVTB  EQU   ECBRB
ECBCC    EQU   ECBEVTB
ECBEVNT  EQU   ECBCC
ECBWAITB EQU   ECBEVNT
ECBCCCNT EQU   ECBEVTB+1
ECBRBA   EQU   ECBCCCNT
WESTD    EQU   0
WECODE1  EQU   WESTD
WECODE1T EQU   WECODE1
WECODE1F EQU   WECODE1+1
WECODE2  EQU   WESTD+2
WECODE2F EQU   WECODE2+1
WENEXT   EQU   WESTD+4
WERC     EQU   WESTD+8
WA1      EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
WELEN    EQU   WESTD+10
WERC2    EQU   WERC+1
WERC1    EQU   WERC
WECD2MIF EQU   WECODE2F
WECD2MAF EQU   WECODE2F
WECODE2T EQU   WECODE2
WECDMIF  EQU   WECODE1F
WECDMAF  EQU   WECODE1F
ECBEVTBA EQU   ECBRBA
@NM00006 EQU   ECBCC
ECBPOSTB EQU   ECBEVNT
TWAEND   EQU   TWAR+536
TWAWORKE EQU   TWAR+524
@NM00005 EQU   TWACI+13
TWACSKIP EQU   TWACI+12
TWACMODQ EQU   TWACI+8
TWACSTPQ EQU   TWACI+4
TWACERRS EQU   TWACE+4
TWACERA  EQU   TWACEI+1
TWACEIFC EQU   TWACEI
TWACRTFC EQU   TWAC+60
TWACABFC EQU   TWAC+56
TWACTWA  EQU   TWAC+52
TWACEWA  EQU   TWAC+4
TWACID   EQU   TWAC
TWAUERRS EQU   TWAUE+4
TWAUERA  EQU   TWAUEI+1
TWAURTFC EQU   TWAU+60
TWAUABFC EQU   TWAU+56
TWAUTWA  EQU   TWAU+52
TWAUEWA  EQU   TWAU+4
TWAUID   EQU   TWAU
TWAVACQH EQU   TWAVI+12
TWAVTHQH EQU   TWAVI+8
TWAVTEQH EQU   TWAVI+4
TWAVERRS EQU   TWAVE+4
TWAVERA  EQU   TWAVEI+1
TWAVEIFC EQU   TWAVEI
TWAVRTFC EQU   TWAV+60
TWAVABFC EQU   TWAV+56
TWAVTWA  EQU   TWAV+52
TWAVEWA  EQU   TWAV+4
TWAVID   EQU   TWAV
TWAMERRS EQU   TWAME+4
TWAMERA  EQU   TWAMEI+1
TWAMEIFC EQU   TWAMEI
TWAMRTFC EQU   TWAM+60
TWAMABFC EQU   TWAM+56
TWAMTWA  EQU   TWAM+52
TWAMEWA  EQU   TWAM+4
TWAMID   EQU   TWAM
@NM00004 EQU   TWACFL
TWACFL4  EQU   TWACFL
TWACFL2  EQU   TWACFL
TWACFL1  EQU   TWACFL
@NM00003 EQU   TWAUFL
TWAUFL4  EQU   TWAUFL
TWAUFL2  EQU   TWAUFL
TWAUFL1  EQU   TWAUFL
@NM00002 EQU   TWAVFL
TWAVFL6  EQU   TWAVFL
TWAVFL5  EQU   TWAVFL
TWAVFL4  EQU   TWAVFL
TWAVFL3  EQU   TWAVFL
TWAVFL2  EQU   TWAVFL
TWAVFL1  EQU   TWAVFL
@NM00001 EQU   TWAMFL
TWAMFL1  EQU   TWAMFL
TWACCOMP EQU   TWAR+76
TWAUCOMP EQU   TWAR+72
TWAVCOMP EQU   TWAR+68
TWACTCB  EQU   TWAR+60
TWAUTCB  EQU   TWAR+56
TWAVTCB  EQU   TWAR+52
TWAMSG   EQU   TWAR+48
TWADEQAS EQU   TWAR+44
TWAEESR  EQU   TWAR+40
TWAPPSR  EQU   TWAR+36
TWATCSR  EQU   TWAR+32
TWATTSR  EQU   TWAR+28
TWAINIT  EQU   TWAR+24
TWATCAST EQU   TWAR+20
TWACSCB  EQU   TWAR+16
TWAASCB  EQU   TWAR+12
TWAPASQH EQU   TWAR+8
TWARSON  EQU   TWAR+2
TWACOMP  EQU   TWAR
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00032 EQU   @RC00023
@RC00025 EQU   @RC00023
@RF00089 EQU   @RC00084
@RF00092 EQU   @RC00084
@PB00002 EQU   @EL00001
@RF00029 EQU   @RC00025
@ENDDATA EQU   *
         END   IKTCAS30,(C'PLS1002',0702,78336)
