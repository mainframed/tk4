         TITLE 'IGCT110D - TCHNG, TCOPY SERVICE ROUTINE                *
                        '
IGCT110D CSECT ,                                                   0001
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
IGCT110D  IEDHJN  AFTERHJN,HJN     MODULE IDENTIFICATION
*   ROPCAVT=REG1;                   /* ADDR OF OP CNTRL AVT  @Y17XARW*/
         LR    ROPCAVT,REG1                                        0244
*   AVT=OPCAVTPT;                   /* ADDRESS OF AVT        @Y17XARW*/
         L     AVT,OPCAVTPT(,ROPCAVT)                              0245
*   ELMNT=OCCIB;                    /* ADDR OF PARAM LIST    @Y17XARW*/
         L     @10,OPCCOPCE(,ROPCAVT)                              0246
         L     @10,OCCIB-1(,@10)                                   0246
         LA    @10,0(,@10)                                         0246
         ST    @10,ELMNT(,ROPCAVT)                                 0246
*   IF ELMNT->WENTCD>='08'X         /* IS THIS FOR TCHNG     @YM08051*/
*     THEN                                                         0247
         CLI   WENTCD(@10),8                                       0247
         BL    @RF00247                                            0247
*     TCHNG='1'B;                   /* PRESERVE TCHNG INDIC  @YM08051*/
         OI    TCHNG(ROPCAVT),B'01000000'                          0248
*   ELSE                                                           0249
*     TCHNG='0'B;                   /* INDIC NOT TCHNG       @YM08051*/
         B     @RC00247                                            0249
@RF00247 NI    TCHNG(ROPCAVT),B'10111111'                          0249
*   RPRU=OCUNIT;                    /* ADDR OF RESPONSE UNIT @Y17XARW*/
@RC00247 L     @10,OPCCOPCE(,ROPCAVT)                              0250
         L     RPRU,OCUNIT(,@10)                                   0250
*   ENDUNIT=RPRU+12+AVTKEYLE;       /* SETUP END OF UNIT ADDR      0251
*                                                            @Y17XARW*/
         LA    @10,12                                              0251
         LR    @03,RPRU                                            0251
         ALR   @03,@10                                             0251
         AH    @03,AVTKEYLE(,AVT)                                  0251
         ST    @03,ENDUNIT(,ROPCAVT)                               0251
*   IF BDUSYRSP^='60'X×             /* IS BTU RESPONSE GOOD  @Y17XARW*/
*       PRURHSDI='1'B THEN                                         0252
         ALR   @10,IEDPRUQP                                        0252
         CLI   BDUSYRSP(@10),X'60'                                 0252
         BNE   @RT00252                                            0252
         LR    @10,IEDPRUQP                                        0252
         AL    @10,@CF01538                                        0252
         TM    PRURHSDI(@10),B'00000100'                           0252
         BNO   @RF00252                                            0252
@RT00252 DS    0H                                                  0253
*     DO;                           /* NO,                           */
*       ELMNT->WRTCD='1C'X;         /* SET RETURN CODE               */
         L     @10,ELMNT(,ROPCAVT)                                 0254
         MVI   WRTCD(@10),X'1C'                                    0254
*       GO TO POSTAPP1;             /* TELL APPLICATION PROGRAM      */
         B     POSTAPP1                                            0255
*     END;                                                         0256
*   RDATA=ADDR(IEDBDU)+LENGTH(IEDBDU)+3;/* POINT TO POLLING CHARS  0257
*                                                            @Y17XARW*/
@RF00252 LA    @10,21                                              0257
         ALR   @10,IEDPRUQP                                        0257
         STCM  @10,7,RDATA(ROPCAVT)                                0257
*   RWORK=RPRU;                     /* SETUP TEMP PTR TO RU  @Y17XARW*/
         LR    RWORK,RPRU                                          0258
*   GENERATE;                                                      0259
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*   RDATA=RDATA+RDATA->FCOUNT+1;    /* POINT TO ADDRESSING CHARS     */
         L     @10,RDATA-1(,ROPCAVT)                               0260
         LA    @10,0(,@10)                                         0260
         SLR   @03,@03                                             0260
         IC    @03,FCOUNT(,@10)                                    0260
         ALR   @03,@10                                             0260
         AL    @03,@CF00083                                        0260
         STCM  @03,7,RDATA(ROPCAVT)                                0260
*   GENERATE;                                                      0261
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*   ADDRCHR=RDATA;                  /* SAVE ADDRESS OF ADDR CHARS    */
         L     @10,OPCWORK(,ROPCAVT)                               0262
         L     @03,RDATA-1(,ROPCAVT)                               0262
         LA    @03,0(,@03)                                         0262
         ST    @03,ADDRCHR(,@10)                                   0262
*   RDATA=RDATA+RDATA->FCOUNT+1;    /* POINT TO INPUT IDENTIFIER     */
         SLR   @10,@10                                             0263
         IC    @10,FCOUNT(,@03)                                    0263
         ALR   @10,@03                                             0263
         AL    @10,@CF00083                                        0263
         STCM  @10,7,RDATA(ROPCAVT)                                0263
*   GENERATE;                                                      0264
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*   IF RDATA->FCOUNT=0              /* IS INPUT IDENTIFIER PRESENT   */
*     THEN                                                         0265
         L     @10,RDATA-1(,ROPCAVT)                               0265
         LA    @10,0(,@10)                                         0265
         CLI   FCOUNT(@10),0                                       0265
         BNE   @RF00265                                            0265
*     RDATA=RDATA+1;                /* NO, SKIP ID BYTE              */
         AL    @10,@CF00083                                        0266
         STCM  @10,7,RDATA(ROPCAVT)                                0266
*   ELSE                                                           0267
*     RDATA=RDATA+4;                /* YES, SKIP NEXT THREE FIELDS   */
         B     @RC00265                                            0267
@RF00265 LA    @10,4                                               0267
         L     @03,RDATA-1(,ROPCAVT)                               0267
         LA    @03,0(,@03)                                         0267
         ALR   @10,@03                                             0267
         STCM  @10,7,RDATA(ROPCAVT)                                0267
*   GENERATE;                                                      0268
@RC00265 DS    0H                                                  0268
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*   IF RDATA->FCOUNT=0              /* IS DIAL DATA PRESENT  @Y17XARW*/
*     THEN                                                         0269
         L     @10,RDATA-1(,ROPCAVT)                               0269
         CLI   FCOUNT(@10),0                                       0269
         BNE   @RF00269                                            0269
*     DIALCHAR=0;                   /* NO, INDICATE NO DIAL DATA     */
         L     @10,OPCWORK(,ROPCAVT)                               0270
         SLR   @03,@03                                             0270
         ST    @03,DIALCHAR(,@10)                                  0270
*   ELSE                                                           0271
*     DO;                           /* YES,                          */
         B     @RC00269                                            0271
@RF00269 DS    0H                                                  0272
*       RDATA=RDATA+2;              /* POINT TO DIAL DIGITS  @Y17XARW*/
         LA    @10,2                                               0272
         L     @03,RDATA-1(,ROPCAVT)                               0272
         LA    @03,0(,@03)                                         0272
         ALR   @10,@03                                             0272
         STCM  @10,7,RDATA(ROPCAVT)                                0272
*       GENERATE;                                                  0273
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*       DIALCHAR=RDATA;             /* SAVE PTR TO DIAL DIGS @Y17XARW*/
         L     @10,OPCWORK(,ROPCAVT)                               0274
         L     @03,RDATA-1(,ROPCAVT)                               0274
         LA    @03,0(,@03)                                         0274
         ST    @03,DIALCHAR(,@10)                                  0274
*     END;                                                         0275
*   RTO=ELMNT->WTO;                 /* ADDRESS OF 'TO' AREA          */
@RC00269 L     @10,ELMNT(,ROPCAVT)                                 0276
         L     RTO,WTO-1(,@10)                                     0276
         LA    RTO,0(,RTO)                                         0276
*   RESTRICT(RFROM);                                               0277
*   RESPECIFY                                                      0278
*     IEDQTRM BASED(RFROM);                                        0278
*   RFROM=ELMNT->WFROM;             /* ADDRESS OF 'FROM' AREA        */
         L     RFROM,WFROM-1(,@10)                                 0279
         LA    RFROM,0(,RFROM)                                     0279
*   RFLDS=RFROM+17;                 /* ADDR OF 'FROM' DEV DEP FIELDS */
         LA    RFLDS,17(,RFROM)                                    0280
*   IF TRMOPTFN='1'B                /* ARE OPTION FIELDS PRESENT     */
*     THEN                                                         0281
         TM    TRMOPTFN(RFROM),B'00000010'                         0281
         BNO   @RF00281                                            0281
*     RFLDS=RFLDS+3+RFLDS->FCOUNT;  /* SKIP OPT OFFSET               */
         LA    @10,3                                               0282
         ALR   @10,RFLDS                                           0282
         SLR   @03,@03                                             0282
         IC    @03,FCOUNT(,RFLDS)                                  0282
         ALR   @10,@03                                             0282
         LR    RFLDS,@10                                           0282
*   RESTRICT(RMASK,RLNGTH);                                        0283
@RF00281 DS    0H                                                  0284
*   RTO=RTO+(RFLDS-RFROM);          /* ADDRESS OF 'TO' DEV DEP FLDS  */
         LR    @03,RFLDS                                           0284
         SLR   @03,RFROM                                           0284
         ALR   RTO,@03                                             0284
*   GENERATE;                                                      0285
         LA    RMASK,X'80'             GET MASK FOR EXECUTED INST
LOOP1    EQU   *
         CH    RMASK,DIALMSK            IS THIS MASK FOR DIAL DIGITS
         BE    DIALDIGS                 BRANCH ON YES
         CH    RMASK,ADDRMSK            IS THIS MASK FOR ADDR CHARS
         BE    ADDRCHAR                 BRANCH ON YES
         EX    RMASK,TM1                IS THERE A DEV DEP FIELD
         BNO   SHIFT1                   BRANCH ON NO
MOVFLD   EQU   *
         SR    RLNGTH,RLNGTH            0 LENGTH REGISTER @OZ15650
         IC    RLNGTH,0(RFLDS)          GET LENGTH OF DATA FIELD
         BAL   REG12,CHECKAIB           CHECK FOR END OF AIB @G36XRRU*/
         EX    RLNGTH,MVC1              MOVE DATA TO USER WORKAREA
         LA    RTO,1(RLNGTH,RTO)        UPDATE TO AREA POINTER
         LA    RFLDS,1(RLNGTH,RFLDS)    UPDATE FROM AREA POINTER
SHIFT1   EQU   *
         SRL   RMASK,1                  SHIFT MASK 1 POSITION
         LTR   RMASK,RMASK              ARE THER ANY MORE TO CHECK
         BNZ   LOOP1                    BRANCH ON YES
         LA    RMASK,X'80'             GET MASK FOR EXECUTED INST
LOOP2    EQU   *
         EX    RMASK,TM2                EXECUTE TEST UNDER MASK
         BNO   SHIFT2                   BRANCH IF BIT NOT ON
MOVFLD2  EQU   *
         SR    RLNGTH,RLNGTH            0 LENGTH REGISTER @OZ15650
         IC    RLNGTH,0(RFLDS)          PICK UP FIELD LENGTH
         BAL   REG12,CHECKAIB           CHECK FOR END OF AIB @G36XRRU
         EX    RLNGTH,MVC1              MOVE FIELD
         LA    RTO,1(RLNGTH,RTO)        UPDATE TO AREA POINTER
         LA    RFLDS,1(RLNGTH,RFLDS)    UPDATE FROM AREA POINTER
SHIFT2   EQU   *
         SRL   RMASK,1                  SHIFT TO NEXT MASK BIT
         LTR   RMASK,RMASK              ANY MORE BITS TO CHECK
         BNZ   LOOP2                    BRANCH ON NO
         B     SKIP1
TM1      TM    TRMDEVFL(RFROM),0
TM2      TM    TRMDEVFL+1(RFROM),0
MVC1     MVC   0(0,RTO),0(RFLDS)
SKIP1    EQU   *
*   IF ELMNT->WENTCD<'08'X          /* IS THIS FOR TCHNG             */
*     THEN                                                         0286
         L     @03,ELMNT(,ROPCAVT)                                 0286
         CLI   WENTCD(@03),8                                       0286
         BL    @RT00286                                            0286
*     GO TO POSTAPPL;               /* NO, POST APPLICATION COMPLETE */
*   RPRU=OCUNIT;                    /* SETUP PRU ADDRESS     @Y17XARW*/
         L     @15,OPCCOPCE(,ROPCAVT)                              0288
         L     RPRU,OCUNIT(,@15)                                   0288
*   ELMNT->WANSCD='0C'X;            /* SET ENTRY CODE FOR ANSWER     */
         MVI   WANSCD(@03),X'0C'                                   0289
*   IF CHANGE='1'B THEN                                            0290
         TM    CHANGE(ROPCAVT),B'10000000'                         0290
         BNO   @RF00290                                            0290
*     DO;                           /* IF ADDR CHARS CHANGED @Y17XARW*/
*       PRURH=TRHFID0;              /* SETUP RH FLAGS        @Y17XARW*/
         LR    @03,IEDPRUQP                                        0292
         SL    @03,@CF00068                                        0292
         MVC   PRURH(3,@03),@CB01248                               0292
*       PRUTH=TTH0BYT0;             /* SETUP TH FLAGS        @Y17XARW*/
         MVI   PRUTH(@03),X'0C'                                    0293
*       BDUSYRSP=BDUSYRSP&&BDUSYRSP;/* CLEAR BDU RESPONSE    @Y17XARW*/
         LA    @03,12                                              0294
         ALR   @03,IEDPRUQP                                        0294
         XC    BDUSYRSP(1,@03),BDUSYRSP(@03)                       0294
*       BDUMODIF='22'X;             /* SET MODIFIER TO REPLACE DEVICE
*                                      SESSION INITIATION INFO     0295
*                                                            @Y17XARW*/
         MVI   BDUMODIF(@03),X'22'                                 0295
*       BDUHEADR='1'B;              /* INDICATE THIS IS HEADER     0296
*                                                            @Y17XARW*/
         OI    BDUHEADR(@03),B'01000000'                           0296
*       CALL SAVEBUFF;              /* SAVE COPIED BUFFERS   @Y17XARW*/
         BAL   @14,SAVEBUFF                                        0297
*       OCRESP='0'B;                /* TURN RESPONSE FLAG OFF      0298
*                                                            @Y17XARW*/
         L     @03,OPCCOPCE(,ROPCAVT)                              0298
         NI    OCRESP(@03),B'11111110'                             0298
*       OCWTG=MODT0;                /* SETUP WHERE-TO-GO FLD @Y17XARW*/
         MVC   OCWTG(2,@03),MODT0                                  0299
*       OPCMODID=MOD02;             /* SETUP NEXT MOD ID     @Y17XARW*/
         MVC   OPCMODID(2,ROPCAVT),MOD02                           0300
*     END;                          /*                       @Y17XARW*/
*   ELSE                                                           0302
*     OPCMODID=MODT0;               /* SETUP FOR NEXT MOD    @Y17XARW*/
         B     @RC00290                                            0302
@RF00290 MVC   OPCMODID(2,ROPCAVT),MODT0                           0302
*EXIT:                                                             0303
*   OPCFLAG1=0;                     /* CLEAR FLAG FIELDS     @Y17XARW*/
@RC00290 DS    0H                                                  0303
EXIT     MVI   OPCFLAG1(ROPCAVT),X'00'                             0303
*   REG1=ROPCAVT;                   /* SETUP OP CONTROL AVT  @Y17XARW*/
         LR    REG1,ROPCAVT                                        0304
*   GEN EXIT REFS(OPCXCTL,ROPCAVT);                                0305
     XCTL    SF=(E,OPCXCTL(ROPCAVT))                           @Y17XARW
*DIALDIGS:                                                         0306
*   IF TRMDEVFL(2)='1'B THEN        /* ARE DIAL DIGITS SPECIFIED     */
*                                                                  0306
DIALDIGS TM    TRMDEVFL(RFROM),B'01000000'                         0306
         BNO   @RF00306                                            0306
*     /***************************************************************/
*     /*                                                             */
*     /* WHEN DIAL DIGITS ARE SPECIFIED THE FOLLOWING ACTION IS TAKEN*/
*     /* BY THIS MODULE: TCOPY DIGITS IN TTE- DIAL DIGITS TRANSFERRED*/
*     /* TO THE USER WORKARE FROM THE TTE DIGITS IN NCP- DIAL DIGITS */
*     /* TRANSFERRED TO THE USER WORKAREA FROM THE RESPONSE RU TCHNG */
*     /* DIGITS IN TTE- DIAL DIGITS TRANSFERRED TO THE TTE FROM THE  */
*     /* USER WORKAREA DIGITS IN NCP- DIAL DIGITS TRANSFERRED TO THE */
*     /* RU FROM THE USER WORKAREA AND A REPLACE RU IS SENT TO THE   */
*     /* NCP                                                 @YM08051*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0307
*     IF TCHNG='1'B THEN            /* IS IT TCHNG?          @YM08051*/
*                                                                  0307
         TM    TCHNG(ROPCAVT),B'01000000'                          0307
         BNO   @RF00307                                            0307
*       /*************************************************************/
*       /*                                                           */
*       /* TCHNG                                             @YM08051*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0308
*       IF RTO->FDATA='0F'X THEN    /* AND DIGITS IN NCP     @YM08051*/
         CLI   FDATA(RTO),X'0F'                                    0308
         BE    @RT00308                                            0308
*         GO TO GETDIAL0;           /* GO TRANSFER DIGITS    @YM08081*/
*       ELSE                                                       0310
*         GO TO MOVFLD;             /* DIGITS IN TTE         @YM08051*/
*                                                                  0310
         B     MOVFLD                                              0310
*   /*****************************************************************/
*   /*                                                               */
*   /* TCOPY                                                 @YM08051*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0311
*     ELSE                                                         0311
*       IF RFLDS->FDATA='0F'X       /* NO ARE DIGITS IN NCP  @YM08051*/
*         THEN                                                     0311
@RF00307 CLI   FDATA(RFLDS),X'0F'                                  0311
         BE    @RT00311                                            0311
*         GO TO GETDIAL;            /* YES, DIGITS ARE IN RESPONSE   */
*       ELSE                                                       0313
*         GO TO MOVFLD;             /* NO, DIGITS ARE IN TERM ENTRY  */
         B     MOVFLD                                              0313
*   GO TO SHIFT1;                   /* GO CHECK NEXT BIT             */
         B     SHIFT1                                              0314
*GETDIAL0:                                                         0315
*   RTO=RTO+2;                      /* INCREMENT TTE REG     @YM08081*/
GETDIAL0 LA    RTO,2(,RTO)                                         0315
*   GO TO GETDIAL1;                 /* GO MOVE DATA          @YM08081*/
         B     GETDIAL1                                            0316
*GETDIAL:                                                          0317
*   RFLDS=RFLDS+2;                  /* UPDATE 'FROM' DEV DEP PTR     */
GETDIAL  LA    RFLDS,2(,RFLDS)                                     0317
*GETDIAL1:                                                         0318
*   IF DIALCHAR=0                   /* IS THERE ANY DIAL DATA        */
*     THEN                                                         0318
GETDIAL1 L     @03,OPCWORK(,ROPCAVT)                               0318
         L     @03,DIALCHAR(,@03)                                  0318
         LTR   @03,@03                                             0318
         BZ    @RT00318                                            0318
*     GO TO SHIFT1;                 /* NO, GO CHECK NEXT BIT         */
*   CHANGE='1'B;                    /* INDICATE DIAL DIGITS MUST   0320
*                                      CHANGE IN NCP         @Y17XARW*/
         OI    CHANGE(ROPCAVT),B'10000000'                         0320
*   RDATA=DIALCHAR;                 /* ADDRESS OF DIAL DIGITS      0321
*                                                            @Y17XARW*/
         STCM  @03,7,RDATA(ROPCAVT)                                0321
*   IF TCHNG='1'B THEN              /* IS IT TCHNG           @YM08051*/
         TM    TCHNG(ROPCAVT),B'01000000'                          0322
         BO    @RT00322                                            0322
*     GO TO MOVIT0;                 /* YES GO MOVE DIGITS TO RU    0323
*                                                            @YM08051*/
*MOVDATA:                                                          0324
*   RLNGTH=RDATA->FCOUNT+1;         /* LENGTH OF FLD TO MOVE @Y17XARW*/
MOVDATA  L     @03,RDATA-1(,ROPCAVT)                               0324
         SLR   @15,@15                                             0324
         IC    @15,FCOUNT(,@03)                                    0324
         LA    @15,1(,@15)                                         0324
         LR    RLNGTH,@15                                          0324
*MOVIT1:                                                           0325
*   GENERATE;                                                      0325
MOVIT1   DS    0H                                                  0325
*                                  /*                        @G36XRRU*/
         BAL   REG12,CHECKAIB      /* CHECK FOR END OF AIB   @G36XRRU*/
*   RTO->FIELD=RDATA->FIELD;        /* MOVE ONE BYTE OF DATA @Y17XARW*/
         L     @03,RDATA-1(,ROPCAVT)                               0326
         LA    @03,0(,@03)                                         0326
         MVC   FIELD(1,RTO),FIELD(@03)                             0326
*   RLNGTH=RLNGTH-1;                /* REDUCE COUNT TO MOVE          */
         BCTR  RLNGTH,0                                            0327
*   RTO=RTO+1;                      /* UPDATE 'TO' AREA POINTER      */
         LA    @15,1                                               0328
         ALR   RTO,@15                                             0328
*   RDATA=RDATA+1;                  /* UPDATE 'FROM' AREA PTR      0329
*                                                            @Y17XARW*/
         ALR   @03,@15                                             0329
         STCM  @03,7,RDATA(ROPCAVT)                                0329
*   GENERATE;                                                      0330
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*   IF RLNGTH=0                     /* HAS ALL DATA BEEN MOVED       */
*     THEN                                                         0331
         LTR   RLNGTH,RLNGTH                                       0331
         BZ    @RT00331                                            0331
*     GO TO SHIFT1;                 /* YES, GO CHECK NEXT BIT        */
*   GO TO MOVIT1;                   /* NO, GO TO MOVE MORE           */
         B     MOVIT1                                              0333
*ADDRCHAR:                                                         0334
*   RDATA=ADDRCHR;                  /* ADDRESS OF ADDR CHARS @Y17XARW*/
ADDRCHAR L     @03,OPCWORK(,ROPCAVT)                               0334
         L     @03,ADDRCHR(,@03)                                   0334
         STCM  @03,7,RDATA(ROPCAVT)                                0334
*   IF ELMNT->WENTCD>='08'X         /* IS THIS FOR TCHNG             */
*     THEN                                                         0335
         L     @15,ELMNT(,ROPCAVT)                                 0335
         CLI   WENTCD(@15),8                                       0335
         BNL   @RT00335                                            0335
*     GO TO CHANG1;                 /* YES, GO PROCESS CHANGE        */
*   IF RDATA->FCOUNT=0              /* ANY ADDR CHARS PRESENT      0337
*                                                            @Y17XARW*/
*     THEN                                                         0337
         CLI   FCOUNT(@03),0                                       0337
         BNE   @RF00337                                            0337
*     IF TRMDEVFL(3)='1'B           /* YES, AND ARE ADDR CHARS SPECD */
*       THEN                                                       0338
         TM    TRMDEVFL(RFROM),B'00100000'                         0338
         BO    @RT00338                                            0338
*       GO TO MOVFLD;               /* GO MOVE ADDR CHARS FROM TERM  */
*     ELSE                                                         0340
*       GO TO SHIFT1;               /* NO, NO ADDR CHARS TO MOVE     */
         B     SHIFT1                                              0340
*   ELMNT->WTO->TRMDEVFL(3)='1'B;   /* INDICATE ADDR CHARS SPECIFIED */
@RF00337 L     @03,ELMNT(,ROPCAVT)                                 0341
         L     @03,WTO-1(,@03)                                     0341
         OI    TRMDEVFL(@03),B'00100000'                           0341
*   GO TO MOVDATA;                  /* MOVE ADDR CHARS FROM RESPONSE */
         B     MOVDATA                                             0342
*CHANG1:                                                           0343
*   IF ELMNT->WADRCH='1'B           /* ARE ADDR CHARS IN 'TO' AREA   */
*     THEN                                                         0343
CHANG1   L     @03,ELMNT(,ROPCAVT)                                 0343
         TM    WADRCH(@03),B'00000010'                             0343
         BNO   @RF00343                                            0343
*     IF TRMDEVFL(3)='1'B           /* AND AREA ADDR CHARS IN 'FROM' */
*       THEN                                                       0344
         TM    TRMDEVFL(RFROM),B'00100000'                         0344
         BO    @RT00344                                            0344
*       GO TO MOVFLD;               /* YES, MOVE CHARS FROM 'FROM'   */
*     ELSE                                                         0346
*       DO;                         /* NO NOTHING TO MOVE            */
*         ELMNT->WTO->TRMDEVFL(3)='0'B;/* INDICATE NO ADDRESSING   0347
*                                      CHARACTERS                    */
         L     @03,WTO-1(,@03)                                     0347
         NI    TRMDEVFL(@03),B'11011111'                           0347
*         GO TO SHIFT1;             /* GO CHECK NEXT                 */
         B     SHIFT1                                              0348
*       END;                                                       0349
*   ELSE                                                           0350
*     IF TRMDEVFL(3)='1'B           /* ARE ADDR CHARS IN 'FROM' AREA */
*       THEN                                                       0350
@RF00343 TM    TRMDEVFL(RFROM),B'00100000'                         0350
         BNO   @RF00350                                            0350
*       DO;                         /* YES,                          */
*         ELMNT->WTO->TRMDEVFL(3)='0'B;/* INDICATE NO ADDRESSING   0352
*                                      CHARACTERS                    */
         L     @03,ELMNT(,ROPCAVT)                                 0352
         L     @03,WTO-1(,@03)                                     0352
         NI    TRMDEVFL(@03),B'11011111'                           0352
*         GO TO MOVDATA2;           /* MOVE CHARS TO DATA            */
         B     MOVDATA2                                            0353
*       END;                                                       0354
*   GO TO SHIFT1;                   /* GO CHECK NEXT FIELD           */
         B     SHIFT1                                              0355
*MOVDATA2:                                                         0356
*   IF RFLDS->FCOUNT^=RDATA->FCOUNT /* ARE COUNTS EQUAL      @Y17XARW*/
*     THEN                                                         0356
MOVDATA2 L     @03,RDATA-1(,ROPCAVT)                               0356
         CLC   FCOUNT(1,RFLDS),FCOUNT(@03)                         0356
         BNE   @RT00356                                            0356
*     GO TO ERREXIT;                /* NO, ERROR, EXIT               */
*   CHANGE='1'B;                    /* INDICATE ADDR CHARS CHANGED 0358
*                                                            @Y17XARW*/
         OI    CHANGE(ROPCAVT),B'10000000'                         0358
*MOVIT0:                            /*                       @YM08051*/
*   RLNGTH=RDATA->FCOUNT+1;         /* LENGTH OF DATA TO MOVE      0359
*                                                            @Y17XARW*/
MOVIT0   L     @03,RDATA-1(,ROPCAVT)                               0359
         SLR   @15,@15                                             0359
         IC    @15,FCOUNT(,@03)                                    0359
         LA    @15,1(,@15)                                         0359
         LR    RLNGTH,@15                                          0359
*MOVIT2:                                                           0360
*   RDATA->FIELD=RFLDS->FIELD;      /* MOVE ONE BYTE OF DATA @Y17XARW*/
MOVIT2   L     @03,RDATA-1(,ROPCAVT)                               0360
         LA    @03,0(,@03)                                         0360
         MVC   FIELD(1,@03),FIELD(RFLDS)                           0360
*   RLNGTH=RLNGTH-1;                /* REDUCE COUNT TO MOVE          */
         BCTR  RLNGTH,0                                            0361
*   RFLDS=RFLDS+1;                  /* UPDATE 'FROM' AREA POINTER    */
         LA    @15,1                                               0362
         ALR   RFLDS,@15                                           0362
*   RDATA=RDATA+1;                  /* UPDATE 'TO' AREA PTR  @Y17XARW*/
         ALR   @03,@15                                             0363
         STCM  @03,7,RDATA(ROPCAVT)                                0363
*   GENERATE;                                                      0364
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*   IF RLNGTH=0                     /* HAS ALL DATA BEEN MOVED       */
*     THEN                                                         0365
         LTR   RLNGTH,RLNGTH                                       0365
         BZ    @RT00365                                            0365
*     GO TO SHIFT1;                 /* YES, GO CHECK NEXT BIT        */
*   GO TO MOVIT2;                   /* NO, GO TO MOVE MORE           */
         B     MOVIT2                                              0367
*CHKUNIT:                                                          0368
*   IF RDATA>=ENDUNIT               /* ARE WE PAST END OF UNIT       */
*     THEN                                                         0368
CHKUNIT  L     @03,RDATA-1(,ROPCAVT)                               0368
         LA    @03,0(,@03)                                         0368
         L     @15,ENDUNIT(,ROPCAVT)                               0368
         CR    @03,@15                                             0368
         BL    @RF00368                                            0368
*     DO;                           /* YES,                          */
*       RWORK=RWORK->PRFTIC;        /* NEXT UNIT ADDRESS     @Y17XARW*/
         L     RWORK,PRFTIC(,RWORK)                                0370
*       RDATA=RWORK+12+(RDATA-ENDUNIT);/* POINT TO START OF DATA   0371
*                                                            @Y17XARW*/
         LA    @14,12                                              0371
         LR    @00,RWORK                                           0371
         ALR   @00,@14                                             0371
         SLR   @03,@15                                             0371
         ALR   @00,@03                                             0371
         STCM  @00,7,RDATA(ROPCAVT)                                0371
*       ENDUNIT=RWORK+AVTKEYLE+12;  /* END OF NEXT UNIT ADDRESS    0372
*                                                            @Y17XARW*/
         LR    @03,RWORK                                           0372
         AH    @03,AVTKEYLE(,AVT)                                  0372
         ALR   @03,@14                                             0372
         ST    @03,ENDUNIT(,ROPCAVT)                               0372
*       GO TO CHKUNIT;                                             0373
         B     CHKUNIT                                             0373
*     END;                                                         0374
*   GENERATE;                                                      0375
@RF00368 DS    0H                                                  0375
         BR    REG12               /* RETURN TO CALLER               */
*CHECKAIB:                          /*                       @G36XRRU*/
*   IF ELMNT->WENTCD>='08'X         /* IF TCHNG REQUEST      @G36XRRU*/
*     THEN                                                         0376
CHECKAIB L     @03,ELMNT(,ROPCAVT)                                 0376
         CLI   WENTCD(@03),8                                       0376
         BL    @RF00376                                            0376
*     GENERATE;                                                    0377
*                                  /*                        @G36XRRU*/
         BR    REG12               /* THEN RETURN TO CALLER  @G36XRRU*/
*   ELSE                            /* CONTINUE TCOPY CHECK  @G36XRRU*/
*     REG1=RTO+RLNGTH;              /* CURRENT AREA PTR PLUS LENGTH
*                                      FOR MOVE              @G36XRRU*/
         B     @RC00376                                            0378
@RF00376 LR    REG1,RTO                                            0378
         ALR   REG1,RLNGTH                                         0378
*   IF ELMNT->WAIBEND2<REG1         /* IF AIB SIZE EXECEEDED @G36XRRU*/
*     THEN                                                         0379
@RC00376 L     @03,ELMNT(,ROPCAVT)                                 0379
         L     @03,WAIBEND2-1(,@03)                                0379
         LA    @03,0(,@03)                                         0379
         CR    REG1,@03                                            0379
         BH    @RT00379                                            0379
*     GO TO SIZERR;                 /* TAKE ERROR EXIT       @G36XRRU*/
*   ELSE                            /* AIB SIZE ENOUGH       @G36XRRU*/
*     GENERATE;                                                    0381
         BR    REG12               /* RETURN TO CALLER       @G36XRRU*/
*SIZERR:                            /* AIB SIZE EXCEEDED ERR @G36XRRU*/
*     ELMNT->WRTCD='18'X;           /* RC=DATA>AIB AREA      @G36XRRU*/
SIZERR   L     @03,ELMNT(,ROPCAVT)                                 0382
         MVI   WRTCD(@03),X'18'                                    0382
*   GO TO POSTAPP1;                 /* PREPARE TO EXIT       @G36XRRU*/
         B     POSTAPP1                                            0383
*POSTAPPL:                          /* PREPARE TO GOTO 0A10D @G36XRRU*/
*   ELMNT->WTO=RTO;                 /* UPDATE 'TO' AREA PTR  @G36XRRU*/
POSTAPPL L     @03,ELMNT(,ROPCAVT)                                 0384
         STCM  RTO,7,WTO(@03)                                      0384
*POSTAPP1:                          /*                       @G36XRRU*/
*   ELMNT->WVERB='FF'X;             /* SET FLAG FOR 'RETURN FROM 3705
*                                      SERVICE ROUTINE'      @G36XRRU*/
POSTAPP1 L     @03,ELMNT(,ROPCAVT)                                 0385
         MVI   WVERB(@03),X'FF'                                    0385
*   OPCMODID=MOD0A;                 /* EXIT TO IGC0A10D      @G36XRRU*/
         MVC   OPCMODID(2,ROPCAVT),MOD0A                           0386
*   OPCFLAG1=0;                     /* CLEAR CTL FLAG        @G36XRRU*/
         MVI   OPCFLAG1(ROPCAVT),X'00'                             0387
*   REG1=ROPCAVT;                   /* PASS OP CTL AVT ADDR  @G36XRRU*/
         LR    REG1,ROPCAVT                                        0388
*   GEN EXIT REFS(OPCXCTL,ROPCAVT);                                0389
*                                 /*                         @G36XRRU*/
 XCTL SF=(E,OPCXCTL(ROPCAVT))     /* EXIT TO IGC0A10D        @G36XRRU*/
*ERREXIT:                                                          0390
*   ELMNT->WRTCD='1C'X;             /* BAD RETURN CODE       @G36XRRU*/
ERREXIT  L     @03,ELMNT(,ROPCAVT)                                 0390
         MVI   WRTCD(@03),X'1C'                                    0390
*   GO TO POSTAPP1;                 /* RETURN TO IGC0A10D    @G36XRRU*/
         B     POSTAPP1                                            0391
*SAVEBUFF:                                                         0392
*   RFY                                                            0392
*    (RSAVE,                                                       0392
*     REG14) RSTD;                  /*                       @Y17XARW*/
SAVEBUFF DS    0H                                                  0393
*   SAVERET=REG14;                  /* SAVE RETURN REG       @Y17XARW*/
         L     @15,OPCWORK(,ROPCAVT)                               0393
         ST    REG14,SAVERET(,@15)                                 0393
*   BUFCOUNT=1;                     /* SET BUFFER CNT TO ONE @Y17XARW*/
         MVC   BUFCOUNT(4,@15),@CF00083                            0394
*   DO RSAVE=PRUDATCT BY-AVTKEYLE WHILE RSAVE>AVTKEYLE;/* DETERMINE
*                                      NUMBER OF BUFFS NEEDED      0395
*                                                            @Y17XARW*/
         LH    RSAVE,PRUDATCT(,IEDPRUQP)                           0395
         B     @DE00395                                            0395
@DL00395 DS    0H                                                  0396
*     BUFCOUNT=BUFCOUNT+1;          /* INCREMENT BUFFER COUNT      0396
*                                                            @Y17XARW*/
         L     @15,OPCWORK(,ROPCAVT)                               0396
         LA    @03,1                                               0396
         AL    @03,BUFCOUNT(,@15)                                  0396
         ST    @03,BUFCOUNT(,@15)                                  0396
*   END;                            /*                       @Y17XARW*/
         LH    @15,AVTKEYLE(,AVT)                                  0397
         LCR   @15,@15                                             0397
         ALR   RSAVE,@15                                           0397
@DE00395 CH    RSAVE,AVTKEYLE(,AVT)                                0397
         BH    @DL00395                                            0397
*   REG1=BUFCOUNT;                  /* SETUP BUFFER COUNT    @Y17XARW*/
         L     @15,OPCWORK(,ROPCAVT)                               0398
         L     REG1,BUFCOUNT(,@15)                                 0398
*   RSAVE=ADDR(OPCSAVE);            /* SETUP A SAVEAREA      @Y17XARW*/
         LA    RSAVE,OPCSAVE(,ROPCAVT)                             0399
*   CALL GETBUFF;                   /* GET BUFFERS FOR DATA  @Y17XARW*/
         L     @15,OPCGETBF(,ROPCAVT)                              0400
         BALR  @14,@15                                             0400
*   TTCIN=PRUTTCIN;                 /* TTCIN, AND DATA COUNT @Y71XARW*/
         LH    @15,PRUTTCIN(,IEDPRUQP)                             0401
         N     @15,@CF01543                                        0401
         STH   @15,TTCIN(,REG1)                                    0401
*   DATCT=PRUDATCT;                 /* FOR CHECKPOINT        @Y17XARW*/
         LH    @15,PRUDATCT(,IEDPRUQP)                             0402
         STH   @15,DATCT(,REG1)                                    0402
*   PLMVFLG1=0;                     /* CLEAR FLAG BYTES      @Y17XARW*/
         L     @03,OPCWORK(,ROPCAVT)                               0403
         MVI   PLMVFLG1(@03),X'00'                                 0403
*   PLMVFLG2=0;                     /*                       @Y17XARW*/
         MVI   PLMVFLG2(@03),X'00'                                 0404
*   PLMVUNCA=0;                     /* @Y17XARW&                     */
         SLR   @00,@00                                             0405
         ST    @00,PLMVUNCA(,@03)                                  0405
*   PLMVTU=REG1;                    /* SETUP TARGET UNIT     @Y17XARW*/
         ST    REG1,PLMVTU(,@03)                                   0406
*   PLMVTD=ADDR(PRFSUNIT);          /* ADDR OF TARGET DATA   @Y17XARW*/
         LA    @00,PRFSUNIT(,REG1)                                 0407
         ST    @00,PLMVTD(,@03)                                    0407
*   PLMVSU=RPRU;                    /* ADDRESS OF SOURCE UNIT      0408
*                                                            @Y17XARW*/
         ST    RPRU,PLMVSU(,@03)                                   0408
*   PLMVSD=ADDR(PRUDATA);           /* ADDRESS OF SOURCE DATA      0409
*                                                            @Y17XARW*/
         LA    @00,PRUDATA(,IEDPRUQP)                              0409
         ST    @00,PLMVSD(,@03)                                    0409
*   PLMVLNTH=PRUDATCT;              /* LENGTH OF DATA TO MOVE      0410
*                                                            @Y17XARW*/
         STH   @15,PLMVLNTH(,@03)                                  0410
*   OCPTRSAV=REG1;                  /* SAVE BUFFERS IN OPCE  @Y17XARW*/
         L     @15,OPCCOPCE(,ROPCAVT)                              0411
         ST    REG1,OCPTRSAV(,@15)                                 0411
*   REG1=ADDR(IEDPLMV);             /* SETUP PARM LIST       @Y17XARW*/
         LR    REG1,@03                                            0412
*   CALL IEDMVBFR;                  /* MOVE COPY DATA        @Y17XARW*/
         L     @03,AVTSAVTP(,AVT)                                  0413
         L     @15,SAVTMVBF(,@03)                                  0413
         BALR  @14,@15                                             0413
*   REG14=SAVERET;                  /* RESTORE RETURN REG    @Y17XARW*/
         L     @03,OPCWORK(,ROPCAVT)                               0414
         L     REG14,SAVERET(,@03)                                 0414
*   RFY                                                            0415
*    (RSAVE,                                                       0415
*     REG14) UNRSTD;                /*                       @Y17XARW*/
*   RETURN;                         /*                       @Y17XARW*/
@EL00001 DS    0H                                                  0416
@EF00001 DS    0H                                                  0416
@ER00001 BR    @14                                                 0416
*   END IGCT110D                                                   0417
*                                                                  0417
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (TAVTD   )                                       */
*/*%INCLUDE SYSLIB  (TBDUD   )                                       */
*/*%INCLUDE SYSLIB  (TTRMD   )                                       */
*/*%INCLUDE SYSLIB  (TOPCED  )                                       */
*/*%INCLUDE SYSLIB  (TPLMVD  )                                       */
*/*%INCLUDE SYSLIB  (TPRFD   )                                       */
*/*%INCLUDE SYSLIB  (TPRUD   )                                       */
*/*%INCLUDE SYSLIB  (TRHD    )                                       */
*/*%INCLUDE SYSLIB  (TTHD    )                                       */
*/*%INCLUDE SYSLIB  (TOPCAVTD)                                       */
*                                                                  0417
*       ;                                                          0417
         B     @EL00001                                            0417
@DATA    DS    0H
         DS    0F
         DS    0F
@CF00083 DC    F'1'
@CF00068 DC    F'8'
@CF01538 DC    F'-8'
@CF01543 DC    XL4'0000FFFF'
         DS    0D
DIALMSK  DC    H'64'
ADDRMSK  DC    H'32'
@CB01248 DC    X'0B8000'
MOD0A    DC    CL2'0A'
MODT0    DC    CL2'T0'
MOD00    DC    CL2'00'
MOD02    DC    CL2'02'
MOD07    DC    CL2'07'
         DS    CL1
ZAPAREA  DC    XL104'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
@0       EQU   00
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
REG0     EQU   @00
REG1     EQU   @01
ROPCAVT  EQU   @02
AVT      EQU   @04
RFLDS    EQU   @05
RWORK    EQU   @06
RTO      EQU   @07
RFROM    EQU   @08
IEDPRUQP EQU   @09
RPRU     EQU   @09
RMASK    EQU   @09
RLNGTH   EQU   @10
RBASE    EQU   @11
REG12    EQU   @12
RSAVE    EQU   @13
REG14    EQU   @14
REG15    EQU   @15
IEDQAPTR EQU   0
IEDQTPTR EQU   0
IEDQPPTR EQU   0
IEDPLMVP EQU   0
ROPCE    EQU   0
IEDQAVTD EQU   0
AVTSAVEX EQU   IEDQAVTD+288
@NM00003 EQU   IEDQAVTD+388
AVTCKFLG EQU   @NM00003
AVTBASE  EQU   IEDQAVTD+412
AVTPKF   EQU   AVTBASE
AVTOSECB EQU   IEDQAVTD+492
AVTECB1  EQU   AVTOSECB
AVTHG02  EQU   IEDQAVTD+528
AVTDISP  EQU   IEDQAVTD+552
AVTHD    EQU   IEDQAVTD+556
AVTSCOPT EQU   AVTHD
AVTSAVTP EQU   IEDQAVTD+612
AVTSAVTF EQU   AVTSAVTP
AVTCKPEL EQU   IEDQAVTD+652
AVTCKRMV EQU   AVTCKPEL
AVTCKELF EQU   IEDQAVTD+680
AVTCKBYT EQU   IEDQAVTD+691
AVTHG01  EQU   IEDQAVTD+692
AVTCKLNK EQU   IEDQAVTD+696
AVTCRELE EQU   IEDQAVTD+708
AVTCCELE EQU   AVTCRELE
AVTCLRHI EQU   IEDQAVTD+716
AVTADBUF EQU   IEDQAVTD+720
AVTSYSER EQU   IEDQAVTD+728
AVTCKPQB EQU   IEDQAVTD+804
AVTCKPTB EQU   AVTCKPQB
AVTCKPEC EQU   AVTCKPQB+4
AVTCKPCC EQU   AVTCKPEC
AVTOPCQB EQU   IEDQAVTD+816
AVTOPCOB EQU   AVTOPCQB
AVTOPCEC EQU   AVTOPCQB+4
AVTOPCCC EQU   AVTOPCEC
AVTOLTQB EQU   IEDQAVTD+828
AVTCWFL1 EQU   IEDQAVTD+924
AVTCWFL2 EQU   IEDQAVTD+925
AVTSUBT  EQU   IEDQAVTD+948
AVTIOTR  EQU   IEDQAVTD+949
AVTKEYLE EQU   IEDQAVTD+1032
AVTBIT1  EQU   IEDQAVTD+1050
AVTBIT2  EQU   IEDQAVTD+1051
AVTBIT3  EQU   IEDQAVTD+1052
AVTBIT4  EQU   IEDQAVTD+1136
@NM00085 EQU   IEDQAVTD+1232
IEDNSVTD EQU   0
SAVTDIAG EQU   IEDNSVTD
SAVTDIAF EQU   SAVTDIAG
SAVTLUSQ EQU   IEDNSVTD+88
SAVTMVBF EQU   IEDNSVTD+160
SAVTTCPU EQU   IEDNSVTD+238
SAVTZELM EQU   IEDNSVTD+270
SAVTRDRV EQU   IEDNSVTD+284
SAVTCKQB EQU   IEDNSVTD+300
SAVTCKTB EQU   SAVTCKQB
SAVTCKEC EQU   SAVTCKQB+4
SAVTCKCC EQU   SAVTCKEC
IEDBDU   EQU   0
BDUMODIF EQU   IEDBDU+1
BDUFNFLG EQU   IEDBDU+2
BDUHEADR EQU   BDUFNFLG
BDUBDUFG EQU   IEDBDU+3
BDURSP   EQU   IEDBDU+4
BDUSYRSP EQU   BDURSP
BDUEXRSP EQU   BDURSP+1
BDUEND   EQU   IEDBDU+6
ADDRESS  EQU   0
IEDQTRM  EQU   0
TRMSTATE EQU   IEDQTRM
TRMLOG   EQU   TRMSTATE
TRMOPTFN EQU   TRMSTATE
TRMINSEQ EQU   IEDQTRM+4
TLISTCNT EQU   TRMINSEQ
TRMOUTSQ EQU   IEDQTRM+6
TLISTEN  EQU   TRMOUTSQ
TRMDSORG EQU   TLISTEN
TRMALTD  EQU   IEDQTRM+8
TRMDEVFL EQU   IEDQTRM+10
TRMSTAT  EQU   IEDQTRM+12
IEDNTRM  EQU   0
TRMBYTE4 EQU   IEDNTRM
TRMBYTE3 EQU   IEDNTRM+1
TRMBYTE2 EQU   IEDNTRM+2
TRMINPG  EQU   TRMBYTE2
TRMBYTE1 EQU   IEDNTRM+3
TRMSCPRQ EQU   TRMBYTE1
TRMBYTE0 EQU   IEDNTRM+6
TRMSIBPT EQU   IEDNTRM+7
IEDQOPCE EQU   0
OCELEM   EQU   IEDQOPCE+4
OCUNIT   EQU   IEDQOPCE+8
OCRUDEST EQU   OCUNIT
OCCKPKEY EQU   OCRUDEST
OCSCAN   EQU   OCCKPKEY
OCOPTCDE EQU   IEDQOPCE+12
OCSWITCH EQU   IEDQOPCE+13
OCFLAG   EQU   IEDQOPCE+14
OCRESP   EQU   OCFLAG
@NM00114 EQU   IEDQOPCE+16
OCDEST   EQU   @NM00114
OCREQVAL EQU   OCDEST+1
OCLINENO EQU   IEDQOPCE+22
OCTIOT   EQU   OCLINENO
OCTRUNIT EQU   IEDQOPCE+24
OCRSID   EQU   OCTRUNIT
OCALSTAT EQU   OCRSID
OCPARM   EQU   IEDQOPCE+28
OCWTG    EQU   IEDQOPCE+30
OCBACKUP EQU   IEDQOPCE+32
OCMODNME EQU   IEDQOPCE+40
OCIPLWA  EQU   OCMODNME
OCPTRSAV EQU   OCMODNME+4
OCCKDATA EQU   IEDQOPCE+48
OCRSTGTM EQU   OCCKDATA
IEDQOPCN EQU   0
OCLDNME  EQU   IEDQOPCN
OCLINTTE EQU   OCLDNME
OCREQFLG EQU   OCLINTTE+2
OCPREFLG EQU   OCLINTTE+3
IEDPLMV  EQU   0
PLMVTU   EQU   IEDPLMV
PLMVTD   EQU   IEDPLMV+4
PLMVSU   EQU   IEDPLMV+8
PLMVSD   EQU   IEDPLMV+12
PLMVLNTH EQU   IEDPLMV+16
PLMVFLG1 EQU   IEDPLMV+18
PLMVFLG2 EQU   IEDPLMV+19
PLMVUNCA EQU   IEDPLMV+20
IEDQPRF  EQU   0
PRFRCB   EQU   IEDQPRF
PRFKEY   EQU   PRFRCB
PRFQCBA  EQU   PRFRCB+1
PRFPRI   EQU   PRFRCB+4
PRFLINK  EQU   PRFRCB+5
PRFTIC   EQU   IEDQPRF+8
PRFTICC  EQU   PRFTIC
PRFNBUNT EQU   IEDQPRF+12
PRFSUNIT EQU   PRFNBUNT
PRFPLQCB EQU   PRFSUNIT
@NM00132 EQU   IEDQPRF+16
PRFSVFFO EQU   @NM00132
PRFSTAT1 EQU   IEDQPRF+20
PRFEOFN  EQU   PRFSTAT1
PRFCORE  EQU   IEDQPRF+21
PRFXTRA  EQU   PRFCORE
PRFSCAN  EQU   IEDQPRF+24
PRFTQBCK EQU   IEDQPRF+26
PRFNTXT  EQU   PRFTQBCK
PRFEOBOF EQU   PRFNTXT
PRFCHDR  EQU   IEDQPRF+32
PRFHQBCK EQU   IEDQPRF+35
IEDPF1   EQU   0
PRF1FLG1 EQU   IEDPF1+3
PRF1WD2  EQU   IEDPF1+4
PRF1SEQP EQU   PRF1WD2
PRF1SQID EQU   PRF1SEQP
PRF1TAG1 EQU   PRF1SQID
IEDPF2   EQU   0
PRF2FLG2 EQU   IEDPF2
PRF2WD2  EQU   IEDPF2+4
IEDPRUQD EQU   0
PRUTTCIN EQU   IEDPRUQD
PRUDATCT EQU   IEDPRUQD+2
PRUTIC   EQU   IEDPRUQD+8
PRUDATA  EQU   IEDPRUQD+12
IEDPRUND EQU   0
PRURHTH  EQU   IEDPRUND
PRURH    EQU   PRURHTH
PRURHFG0 EQU   PRURH
PRURHSDI EQU   PRURHFG0
PRURHFG1 EQU   PRURH+1
PRURHFG2 EQU   PRURH+2
PRUTH    EQU   PRURHTH+3
PRUFIDN  EQU   PRUTH
IEDRH    EQU   0
TRHBYTE0 EQU   IEDRH
TRHBYTE1 EQU   IEDRH+1
TRHBYTE2 EQU   IEDRH+2
IEDTH    EQU   0
TTHBYTE0 EQU   IEDTH
TTHSNF   EQU   IEDTH+6
TTHTAG   EQU   TTHSNF
TTHTAG1  EQU   TTHTAG
IEDQOPCD EQU   0
OPCAVTPT EQU   IEDQOPCD+8
OPCCOPCE EQU   IEDQOPCD+12
OPCSAVE  EQU   IEDQOPCD+56
OPCWORK  EQU   IEDQOPCD+140
OPCFLAG1 EQU   IEDQOPCD+146
OPCAQCTL EQU   IEDQOPCD+180
OPCXCTL  EQU   IEDQOPCD+204
OPCLDNME EQU   IEDQOPCD+212
OPCMODID EQU   OPCLDNME+3
OPCGETBF EQU   IEDQOPCD+276
OPCFREBF EQU   IEDQOPCD+280
OPCSPEC  EQU   IEDQOPCD+300
OPCWRKSP EQU   IEDQOPCD+320
OPCPWCOB EQU   IEDQOPCD+368
OPCPWQCB EQU   OPCPWCOB
OPCPWECB EQU   OPCPWCOB+4
WORKAREA EQU   0
WVERB    EQU   WORKAREA+8
WENTCD   EQU   WORKAREA+9
WANSCD   EQU   WORKAREA+10
WADRCH   EQU   WANSCD
WRTCD    EQU   WORKAREA+11
WPTR1    EQU   WORKAREA+16
WTO      EQU   WPTR1+1
WPTR2    EQU   WORKAREA+20
WFROM    EQU   WPTR2+1
WAIBEND  EQU   WORKAREA+36
WAIBEND2 EQU   WAIBEND+1
FIELDS   EQU   0
FIELD    EQU   FIELDS
FCOUNT   EQU   FIELD
FDATA    EQU   FIELDS+1
POINTERS EQU   0
SAVERET  EQU   POINTERS+24
BUFCOUNT EQU   POINTERS+28
ADDRCHR  EQU   POINTERS+32
DIALCHAR EQU   POINTERS+36
PRUBUFF  EQU   0
TTCIN    EQU   PRUBUFF
DATCT    EQU   PRUBUFF+2
GETBUFF  EQU   0
IEDMVBFR EQU   0
FREEBUFF EQU   0
TRMPRE1  EQU   TRMBYTE4
TRMNCP1  EQU   TRMBYTE4
TRMPRE   EQU   TRMBYTE3
TRMNCP   EQU   TRMBYTE3
TRMPU    EQU   TRMBYTE3
TRMLU    EQU   TRMBYTE3
TRMLINK  EQU   TRMBYTE3
OCCIB    EQU   OCREQVAL
OCCKPKY1 EQU   OCCKPKEY
OCCKPTYP EQU   OCCKPKY1
OCICACTN EQU   OCMODNME
OCICDADR EQU   OCICACTN
OCICSW   EQU   OCICDADR+3
OPCAQWD  EQU   OPCAQCTL
OPCAQWD1 EQU   OPCAQWD
OPCAQWD2 EQU   OPCAQWD+4
OPCAQWD3 EQU   OPCAQWD+8
WRKSPACE EQU   OPCWRKSP
ELMNT    EQU   WRKSPACE
ENDUNIT  EQU   WRKSPACE+4
RDATA    EQU   WRKSPACE+9
FLAGS    EQU   OPCFLAG1
CHANGE   EQU   FLAGS
TCHNG    EQU   FLAGS
BDUTEXT  EQU   BDUEND
PRFSHDR  EQU   IEDQPRF+42
TRMOPT   EQU   IEDQTRM+20
*                                      START UNREFERENCED COMPONENTS
@NM00175 EQU   WRKSPACE+8
OPCAQLST EQU   OPCAQWD3+1
OPCAQRQ3 EQU   OPCAQWD3
OPCAQSEC EQU   OPCAQWD2+1
OPCAQRQ2 EQU   OPCAQWD2
OPCAQFST EQU   OPCAQWD1+1
OPCAQREQ EQU   OPCAQWD1
OCICINAC EQU   OCICSW
@NM00120 EQU   OCICSW
OCICATST EQU   OCICDADR+1
OCICTYPE EQU   OCICDADR
@NM00119 EQU   OCCKPKY1
OCCKPENV EQU   OCCKPKY1
OCCKPRST EQU   OCCKPTYP
OCCKPNCP EQU   OCCKPTYP
OCCKPINC EQU   OCCKPTYP
@NM00110 EQU   TRMLINK
TRMLSTAT EQU   TRMLINK
TRMLINT  EQU   TRMLINK
TRMEPMOD EQU   TRMLINK
TRMLULOG EQU   TRMLU
TRMINERR EQU   TRMLU
TRMLUREQ EQU   TRMLU
TRMSESRQ EQU   TRMLU
TRMTDIFF EQU   TRMLU
TRMLUTM  EQU   TRMLU
TRMLUIT  EQU   TRMLU
TRMAUTO  EQU   TRMLU
TRMPCONT EQU   TRMPU
@NM00109 EQU   TRMPU
TRMNCONT EQU   TRMNCP
TRMQUCKN EQU   TRMNCP
TRMSLOWN EQU   TRMNCP
TRMSYGEN EQU   TRMNCP
TRMNCPCL EQU   TRMNCP
TRMIPLDM EQU   TRMNCP
TRMINOUT EQU   TRMPRE
TRMRDOUT EQU   TRMPRE
TRMNLOUT EQU   TRMPRE
TRMWROUT EQU   TRMPRE
TRMASNXI EQU   TRMPRE
TRMSTMM  EQU   TRMPRE
TRMCMODE EQU   TRMPRE
TRMSTPND EQU   TRMPRE
@NM00108 EQU   TRMNCP1
TRMINOP  EQU   TRMNCP1
TRMLYNCH EQU   TRMPRE1
TRMSPOUT EQU   TRMPRE1
TRMERLCK EQU   TRMPRE1
TRMQNPL  EQU   TRMPRE1
TRMSPACT EQU   TRMPRE1
TRMOCNI  EQU   TRMPRE1
TRMSESSN EQU   TRMPRE1
TRMCONT  EQU   TRMPRE1
@NM00181 EQU   POINTERS+20
@NM00180 EQU   POINTERS+16
@NM00179 EQU   POINTERS+12
@NM00178 EQU   POINTERS+8
@NM00177 EQU   POINTERS+4
@NM00176 EQU   POINTERS
WAIBEND1 EQU   WAIBEND
@NM00174 EQU   WORKAREA+28
WRQTG    EQU   WORKAREA+26
WTNTNDX  EQU   WORKAREA+24
@NM00173 EQU   WPTR2
@NM00172 EQU   WPTR1
WECBA    EQU   WORKAREA+12
WDIALD   EQU   WANSCD
@NM00171 EQU   WANSCD
WLINK    EQU   WORKAREA+5
WPRI     EQU   WORKAREA+4
WQCBADR  EQU   WORKAREA
OPCBOTTM EQU   IEDQOPCD+1184
@NM00170 EQU   IEDQOPCD+1100
@NM00169 EQU   IEDQOPCD+948
@NM00168 EQU   IEDQOPCD+940
@NM00167 EQU   IEDQOPCD+380
@NM00166 EQU   OPCPWCOB+9
@NM00165 EQU   OPCPWCOB+8
@NM00164 EQU   OPCPWECB+1
OPCPWCCC EQU   OPCPWECB
OPCPWCHN EQU   OPCPWQCB+1
OPCPWVTO EQU   OPCPWQCB
OPCWAITV EQU   IEDQOPCD+364
OPCTOTCK EQU   IEDQOPCD+360
OPCAPXTL EQU   IEDQOPCD+356
OPCDECR  EQU   IEDQOPCD+352
OPCBUFWT EQU   IEDQOPCD+348
OPCADGOT EQU   IEDQOPCD+318
OPCRQCNT EQU   IEDQOPCD+316
OPPOLSTP EQU   IEDQOPCD+312
OPCCKCIB EQU   IEDQOPCD+308
OPCEND   EQU   IEDQOPCD+307
OPCSTCBS EQU   IEDQOPCD+306
OPCHNEND EQU   IEDQOPCD+302
OPCOQSW  EQU   IEDQOPCD+301
@NM00163 EQU   OPCSPEC
@NM00162 EQU   OPCSPEC
@NM00161 EQU   OPCSPEC
@NM00160 EQU   OPCSPEC
OPCFRMCA EQU   OPCSPEC
OPCRSTRT EQU   OPCSPEC
OPCPART  EQU   OPCSPEC
OPCALTD  EQU   OPCSPEC
OPCBFEND EQU   IEDQOPCD+296
OPCBFIRS EQU   IEDQOPCD+292
OPCAVBUF EQU   IEDQOPCD+290
OPCIPLCT EQU   IEDQOPCD+289
OPCCLNTS EQU   IEDQOPCD+288
OPCHA8   EQU   IEDQOPCD+286
OPCBFREQ EQU   IEDQOPCD+284
OPCNEXT  EQU   IEDQOPCD+272
OPCFMDFC EQU   IEDQOPCD+268
OPCSCNC  EQU   IEDQOPCD+264
OPCHORTG EQU   IEDQOPCD+260
OPCHORT  EQU   IEDQOPCD+256
OPCCKPTL EQU   IEDQOPCD+252
OPCCKPTF EQU   IEDQOPCD+248
OPCWAITA EQU   IEDQOPCD+244
OPCWAITR EQU   IEDQOPCD+240
OPCWAITP EQU   IEDQOPCD+236
OPCWAITO EQU   IEDQOPCD+232
OPCWAITN EQU   IEDQOPCD+228
OPCWAITL EQU   IEDQOPCD+224
OPCWAITC EQU   IEDQOPCD+220
@NM00159 EQU   OPCLDNME+5
@NM00158 EQU   OPCLDNME
OPCWAIT  EQU   IEDQOPCD+192
OPCCKERB EQU   IEDQOPCD+164
OPCBFERB EQU   IEDQOPCD+148
OPCFLAG2 EQU   IEDQOPCD+147
OPCWRKSZ EQU   IEDQOPCD+144
OPCRSAVE EQU   IEDQOPCD+132
OPCQCBAD EQU   IEDQOPCD+128
OPCTRMWA EQU   IEDQOPCD+52
OPCPSTWT EQU   IEDQOPCD+48
OPCTNTEA EQU   IEDQOPCD+44
OPCPGCK  EQU   IEDQOPCD+40
OPCLCB   EQU   IEDQOPCD+36
@NM00157 EQU   IEDQOPCD+32
OPCIPLAD EQU   IEDQOPCD+28
OPCTOFLK EQU   IEDQOPCD+24
OPCOPTLK EQU   IEDQOPCD+20
OPCDCBLK EQU   IEDQOPCD+16
OPCDOUBL EQU   IEDQOPCD
TTHDCF   EQU   IEDTH+8
TTHTAG2  EQU   TTHTAG+1
@NM00156 EQU   TTHTAG1
TTHTAGS  EQU   TTHTAG1
TTHOAF   EQU   IEDTH+4
TTHDAF   EQU   IEDTH+2
TTHBYTE1 EQU   IEDTH+1
TTHEFI   EQU   TTHBYTE0
@NM00155 EQU   TTHBYTE0
TTHEBIU  EQU   TTHBYTE0
TTHBBIU  EQU   TTHBYTE0
TTHFTYPE EQU   TTHBYTE0
@NM00154 EQU   TRHBYTE2
@NM00153 EQU   TRHBYTE2
@NM00152 EQU   TRHBYTE2
TRHCSI   EQU   TRHBYTE2
@NM00151 EQU   TRHBYTE2
TRHCDI   EQU   TRHBYTE2
TRHEB    EQU   TRHBYTE2
TRHBB    EQU   TRHBYTE2
TRHPI    EQU   TRHBYTE1
@NM00150 EQU   TRHBYTE1
@NM00149 EQU   TRHBYTE1
@NM00148 EQU   TRHBYTE1
TRHER    EQU   TRHBYTE1
TRHDR2   EQU   TRHBYTE1
@NM00147 EQU   TRHBYTE1
TRHDR1   EQU   TRHBYTE1
TRHEC    EQU   TRHBYTE0
TRHBC    EQU   TRHBYTE0
TRHSDI   EQU   TRHBYTE0
TRHFI    EQU   TRHBYTE0
@NM00146 EQU   TRHBYTE0
TRHRUCAT EQU   TRHBYTE0
TRHTYPE  EQU   TRHBYTE0
@NM00145 EQU   IEDPRUND+4
PRUTHEFI EQU   PRUFIDN
PRUTHUSS EQU   PRUFIDN
PRUTHEIU EQU   PRUFIDN
PRUTHBIU EQU   PRUFIDN
PRUTHTYE EQU   PRUFIDN
@NM00144 EQU   PRURHFG2
PRURHCSI EQU   PRURHFG2
@NM00143 EQU   PRURHFG2
PRURHCDI EQU   PRURHFG2
PRURHEB  EQU   PRURHFG2
PRURHBB  EQU   PRURHFG2
PRURHPI  EQU   PRURHFG1
@NM00142 EQU   PRURHFG1
PRURHER  EQU   PRURHFG1
PRURHDR2 EQU   PRURHFG1
@NM00141 EQU   PRURHFG1
PRURHDR1 EQU   PRURHFG1
PRURHEC  EQU   PRURHFG0
PRURHBC  EQU   PRURHFG0
PRURHFI  EQU   PRURHFG0
@NM00140 EQU   PRURHFG0
PRURUCAT EQU   PRURHFG0
PRURHTYP EQU   PRURHFG0
PRUNUNIT EQU   PRUTIC+1
@NM00139 EQU   PRUTIC
@NM00138 EQU   IEDPRUQD+4
PRF2SEQP EQU   PRF2WD2
@NM00137 EQU   IEDPF2+1
@NM00136 EQU   PRF2FLG2
PRF2TERM EQU   PRF2FLG2
PRF2SMI  EQU   PRF2FLG2
PRF2FORM EQU   PRF2FLG2
PRF2TNTI EQU   PRF2FLG2
PRF1RULN EQU   PRF1SEQP+2
PRF1TAG2 EQU   PRF1SQID+1
@NM00135 EQU   PRF1TAG1
PRF1TAGS EQU   PRF1TAG1
@NM00134 EQU   PRF1FLG1
PRF1LOGD EQU   PRF1FLG1
PRF1USS  EQU   PRF1FLG1
PRF1FORM EQU   PRF1FLG1
PRF1EXPI EQU   PRF1FLG1
PRF1FIDI EQU   PRF1FLG1
PRF1RH   EQU   IEDPF1
PRFDEST  EQU   IEDQPRF+40
PRFISEQ  EQU   IEDQPRF+38
PRFSTXT  EQU   PRFHQBCK
PRFNHDR  EQU   PRFCHDR
PRFCRCD  EQU   IEDQPRF+29
PRFSVSEQ EQU   PRFNTXT+1
PRFSVPRI EQU   PRFEOBOF
PRFISIZE EQU   PRFSCAN+1
@NM00133 EQU   PRFSCAN
PRFEOB   EQU   PRFXTRA+1
PRFSTSO  EQU   PRFXTRA
PRFNHDRN EQU   PRFSTAT1
PRFNLSTN EQU   PRFSTAT1
PRFLOCK  EQU   PRFEOFN
PRFDUPLN EQU   PRFSTAT1
PRFTSMSG EQU   PRFSTAT1
PRFITCPN EQU   PRFSTAT1
PRFERMGN EQU   PRFSTAT1
PRFCNCLN EQU   PRFSTAT1
PRFSVFLG EQU   @NM00132+3
PRFSIZE  EQU   PRFSVFFO+2
PRFSRCE  EQU   PRFSVFFO
PRFLCB   EQU   IEDQPRF+13
PRFPIUO  EQU   PRFPLQCB
PRFTI0   EQU   PRFTIC+1
@NM00131 EQU   PRFTICC
@NM00130 EQU   PRFTICC
@NM00129 EQU   PRFTICC
PRFTICON EQU   PRFTICC
@NM00128 EQU   PRFTICC
@NM00127 EQU   PRFTICC
PRFBFMM  EQU   PRFTICC
PRFEOMSG EQU   PRFTICC
PRFCOUNT EQU   PRFLINK+1
@NM00126 EQU   PRFLINK
PRFFLAGS EQU   PRFPRI
PRFIOADR EQU   PRFQCBA
PRFOPCDE EQU   PRFKEY
@NM00125 EQU   PLMVFLG1
PLMVTCTG EQU   PLMVFLG1
PLMVSCTG EQU   PLMVFLG1
PLMVUNCF EQU   PLMVFLG1
@NM00124 EQU   OCLDNME+4
@NM00123 EQU   OCPREFLG
OCTOTEP  EQU   OCPREFLG
OCREPOST EQU   OCPREFLG
OCRSPSNT EQU   OCPREFLG
OCBFREQ  EQU   OCPREFLG
OCIDLE   EQU   OCREQFLG
OCFORCE  EQU   OCREQFLG
OCDCARD  EQU   OCREQFLG
OCPARTAL EQU   OCREQFLG
OCADNCP  EQU   OCREQFLG
@NM00122 EQU   OCREQFLG
@NM00121 EQU   OCREQFLG
OCFLUSHZ EQU   OCREQFLG
OCRESPCT EQU   OCLINTTE
OCCKPTWA EQU   OCCKDATA+4
@NM00118 EQU   OCRSTGTM+2
OCCKDAT2 EQU   OCRSTGTM+1
OCCKDAT1 EQU   OCRSTGTM
OCPUADR  EQU   OCIPLWA+2
OCWTGSAV EQU   OCIPLWA
OCDVRDCT EQU   OCBACKUP+6
OCNCP    EQU   OCBACKUP+4
OCBUFGOT EQU   OCBACKUP+2
OCBUFNED EQU   OCBACKUP
OCRESNUM EQU   OCPARM
OCSEQ    EQU   OCTRUNIT+2
@NM00117 EQU   OCRSID+1
OCNONE   EQU   OCALSTAT
OCSOME   EQU   OCALSTAT
OCALLFLG EQU   OCALSTAT
OCACTREQ EQU   OCALSTAT
OCREDRVE EQU   OCALSTAT
OCSEQIND EQU   OCALSTAT
@NM00116 EQU   OCALSTAT
OCRENTRD EQU   OCALSTAT
OCWTGB   EQU   OCTIOT
OCTRMTBL EQU   IEDQOPCE+20
@NM00115 EQU   @NM00114+2
OCCONID  EQU   OCDEST
OCRLN    EQU   IEDQOPCE+15
OCATTACH EQU   OCFLAG
OCSSCP   EQU   OCFLAG
OCOUTPUT EQU   OCFLAG
OCLINE   EQU   OCFLAG
OCMPP    EQU   OCFLAG
OCTOTE   EQU   OCFLAG
OCCONSOL EQU   OCFLAG
@NM00113 EQU   OCSWITCH
OCQUCKN  EQU   OCSWITCH
OCPRIFLG EQU   OCOPTCDE
@NM00112 EQU   OCRUDEST+1
@NM00111 EQU   OCSCAN
OCNOTUCB EQU   OCSCAN
OCNONAME EQU   OCSCAN
OCALLRLN EQU   OCSCAN
OCDDNAME EQU   OCSCAN
OCDDNRLN EQU   OCSCAN
OCADDR   EQU   OCSCAN
OCELMPTR EQU   OCELEM+1
OCELMPRI EQU   OCELEM
OCLINK   EQU   IEDQOPCE
TRMSUBST EQU   IEDNTRM+12
TRMTYPE  EQU   IEDNTRM+11
TRMRLMCT EQU   IEDNTRM+10
TRMCOHTG EQU   TRMSIBPT+1
TRMGPCNT EQU   TRMSIBPT
TRMBUFRD EQU   TRMBYTE0
TRMSNA   EQU   TRMBYTE0
TRMGP    EQU   TRMBYTE0
TRMDIAL  EQU   TRMBYTE0
@NM00107 EQU   TRMBYTE0
TRMOUTPT EQU   TRMBYTE0
TRMINPUT EQU   TRMBYTE0
TRMUDEF  EQU   TRMBYTE0
TRMCOHRT EQU   IEDNTRM+4
TRMSTOTE EQU   TRMBYTE1
TRMCKPRN EQU   TRMBYTE1
TRMTSATN EQU   TRMBYTE1
TRMTRACE EQU   TRMBYTE1
TRMSWBCK EQU   TRMBYTE1
TRMAUTOC EQU   TRMBYTE1
TRMINPTP EQU   TRMBYTE1
TRMWTNEG EQU   TRMSCPRQ
TRMWRBRK EQU   TRMBYTE2
TRMNOSND EQU   TRMBYTE2
TRMPREP  EQU   TRMBYTE2
TRMGPACT EQU   TRMBYTE2
TRMANDL  EQU   TRMBYTE2
TRMCLOSN EQU   TRMINPG
TRMREMB  EQU   TRMBYTE2
TRMRSACT EQU   TRMBYTE2
TRMOPTBL EQU   IEDQTRM+18
TRMOPNO  EQU   IEDQTRM+17
TRMCHCIN EQU   IEDQTRM+16
TRMSENSE EQU   TRMSTAT+3
TRMTEMPR EQU   TRMSTAT+2
TRMSIO   EQU   TRMSTAT
@NM00106 EQU   TRMDEVFL+1
TRMTPIN  EQU   TRMDEVFL+1
TRMNCPI  EQU   TRMDEVFL+1
TRMRNTRM EQU   TRMDEVFL+1
@NM00105 EQU   TRMDEVFL+1
TRMLMD   EQU   TRMDEVFL+1
TRMCONC  EQU   TRMDEVFL+1
TRMTSOB  EQU   TRMDEVFL
TRMBFDY  EQU   TRMDEVFL
TRMTBLK  EQU   TRMDEVFL
TRMSBLK  EQU   TRMDEVFL
TRMBLKS  EQU   TRMDEVFL
TRMADDC  EQU   TRMDEVFL
TRMDDIG  EQU   TRMDEVFL
TRMBUFS  EQU   TRMDEVFL
TRMPRILK EQU   TRMALTD
TRMLGB   EQU   TRMDSORG
TRMUTERM EQU   TLISTCNT
TRMDESTQ EQU   IEDQTRM+1
TRMSCNYN EQU   TRMSTATE
TRMHELDN EQU   TRMSTATE
TRMACPTN EQU   TRMSTATE
TRMPREF  EQU   TRMSTATE
TRMPROC  EQU   TRMLOG
TRMLIST  EQU   TRMLOG
TRMLINE  EQU   TRMSTATE
BDUXGRPH EQU   BDUEXRSP
BDUXFINL EQU   BDUEXRSP
BDUXINIT EQU   BDUEXRSP
BDURESP  EQU   BDUSYRSP
BDUPHASE EQU   BDUSYRSP
BDUERROR EQU   BDUSYRSP
BDUXERLK EQU   BDUBDUFG
BDUALTAK EQU   BDUFNFLG
BDUNEGAK EQU   BDUFNFLG
BDUPOSAK EQU   BDUFNFLG
BDUTPTX  EQU   BDUFNFLG
BDUFRSTB EQU   BDUFNFLG
BDULEADG EQU   BDUFNFLG
BDUSTHDR EQU   BDUFNFLG
BDUCMND  EQU   IEDBDU
SAVTBITN EQU   IEDNSVTD+312
@NM00104 EQU   SAVTCKQB+8
@NM00103 EQU   SAVTCKEC+1
@NM00102 EQU   SAVTCKCC
SAVTCKPO EQU   SAVTCKCC
SAVTCKWA EQU   SAVTCKCC
SAVTCKCH EQU   SAVTCKTB+1
SAVTCKVT EQU   SAVTCKTB
@NM00101 EQU   IEDNSVTD+297
SAVTRDFG EQU   SAVTRDRV+12
@NM00100 EQU   SAVTRDRV+5
SAVTRDPY EQU   SAVTRDRV+4
SAVTRDQB EQU   SAVTRDRV+1
SAVTRDKY EQU   SAVTRDRV
SAVTNID  EQU   IEDNSVTD+280
SAVTDVAS EQU   IEDNSVTD+276
SAVTPLSZ EQU   IEDNSVTD+274
@NM00099 EQU   IEDNSVTD+273
SAVTSUBL EQU   IEDNSVTD+272
@NM00098 EQU   SAVTZELM+1
SAVTSUBM EQU   SAVTZELM
SAVTMHDX EQU   IEDNSVTD+268
SAVTNAT1 EQU   IEDNSVTD+266
SAVTSH20 EQU   IEDNSVTD+264
SAVTLCBS EQU   IEDNSVTD+260
SAVTRNMP EQU   IEDNSVTD+256
SAVTTNTX EQU   IEDNSVTD+252
SAVTNAX  EQU   IEDNSVTD+248
SAVTSUBV EQU   IEDNSVTD+247
SAVTSUBA EQU   IEDNSVTD+246
SAVTSIBC EQU   IEDNSVTD+244
SAVTBSM  EQU   IEDNSVTD+240
SAVTSCPT EQU   SAVTTCPU
SAVTRQTG EQU   IEDNSVTD+236
SAVTRQCH EQU   IEDNSVTD+232
SAVTMAND EQU   IEDNSVTD+228
SAVTSPLN EQU   IEDNSVTD+224
SAVTNADL EQU   IEDNSVTD+222
SAVTNATL EQU   IEDNSVTD+220
SAVTMHTB EQU   IEDNSVTD+216
SAVTSSMH EQU   IEDNSVTD+212
SAVTQRS  EQU   IEDNSVTD+208
SAVTRQIN EQU   IEDNSVTD+204
SAVTDFCO EQU   IEDNSVTD+200
SAVTSAO  EQU   IEDNSVTD+196
SAVTSARI EQU   IEDNSVTD+192
SAVTSAC  EQU   IEDNSVTD+188
SAVTSAI  EQU   IEDNSVTD+184
SAVTCSCI EQU   IEDNSVTD+180
SAVTSSRP EQU   IEDNSVTD+176
SAVTSSRQ EQU   IEDNSVTD+172
SAVTSCLU EQU   IEDNSVTD+168
SAVTXTRQ EQU   IEDNSVTD+164
@NM00097 EQU   IEDNSVTD+148
SAVTIPCQ EQU   IEDNSVTD+144
@NM00096 EQU   IEDNSVTD+136
SAVTXFMI EQU   IEDNSVTD+132
@NM00095 EQU   IEDNSVTD+124
SAVTXFMO EQU   IEDNSVTD+120
@NM00094 EQU   IEDNSVTD+116
SAVTSSSR EQU   IEDNSVTD+112
SAVTSCPQ EQU   IEDNSVTD+108
SAVTSLCB EQU   IEDNSVTD+104
SAVTLUSR EQU   IEDNSVTD+100
@NM00093 EQU   SAVTLUSQ+8
SAVTLUSP EQU   SAVTLUSQ+4
SAVTLUSB EQU   SAVTLUSQ
@NM00092 EQU   IEDNSVTD+84
SAVTSAT  EQU   IEDNSVTD+80
SAVTNAT  EQU   IEDNSVTD+76
SAVTCLUP EQU   IEDNSVTD+72
SAVTPIUT EQU   IEDNSVTD+68
SAVTRNTA EQU   IEDNSVTD+64
SAVTDNIR EQU   IEDNSVTD+60
SAVTCNIR EQU   IEDNSVTD+56
SAVTFLDH EQU   IEDNSVTD+52
SAVTSRTN EQU   IEDNSVTD+48
SAVTSREQ EQU   IEDNSVTD+44
SAVTFAIL EQU   IEDNSVTD+42
SAVTSUSE EQU   IEDNSVTD+40
SAVTSIB  EQU   IEDNSVTD+36
SAVTPRTN EQU   IEDNSVTD+32
@NM00091 EQU   IEDNSVTD+28
SAVTWH20 EQU   IEDNSVTD+26
SAVTPWT  EQU   IEDNSVTD+24
SAVTPRTQ EQU   IEDNSVTD+20
SAVTPREQ EQU   IEDNSVTD+16
SAVTPH20 EQU   IEDNSVTD+14
SAVTPUSE EQU   IEDNSVTD+12
SAVTPLCB EQU   IEDNSVTD+8
SAVTPOOL EQU   IEDNSVTD+4
SAVTPRMT EQU   SAVTDIAF
SAVTVIRT EQU   SAVTDIAF
AVTCPBNO EQU   IEDQAVTD+1244
AVTHRESS EQU   IEDQAVTD+1243
@NM00090 EQU   IEDQAVTD+1242
@NM00089 EQU   IEDQAVTD+1241
@NM00088 EQU   IEDQAVTD+1240
@NM00087 EQU   IEDQAVTD+1237
@NM00086 EQU   IEDQAVTD+1236
AVTHRESE EQU   @NM00085
AVTRADDR EQU   IEDQAVTD+1228
AVTNADDR EQU   IEDQAVTD+1224
AVTHRESN EQU   IEDQAVTD+1220
AVTVOLRN EQU   IEDQAVTD+1216
AVTTOTNN EQU   IEDQAVTD+1212
AVTTRCYN EQU   IEDQAVTD+1208
AVTRCTRN EQU   IEDQAVTD+1204
AVTNOVON EQU   IEDQAVTD+1200
AVTADEBN EQU   IEDQAVTD+1196
AVTVOLRR EQU   IEDQAVTD+1192
AVTTOTNR EQU   IEDQAVTD+1188
AVTTRCYR EQU   IEDQAVTD+1184
AVTRCTRR EQU   IEDQAVTD+1180
AVTNOVOR EQU   IEDQAVTD+1176
AVTADEBR EQU   IEDQAVTD+1172
AVTLODPT EQU   IEDQAVTD+1168
AVTIOBN  EQU   IEDQAVTD+1164
AVTIOBR  EQU   IEDQAVTD+1160
AVTCPBPT EQU   IEDQAVTD+1156
AVTFCPB  EQU   IEDQAVTD+1152
@NM00084 EQU   IEDQAVTD+1148
AVTINCPQ EQU   IEDQAVTD+1144
@NM00083 EQU   IEDQAVTD+1140
@NM00082 EQU   IEDQAVTD+1137
@NM00081 EQU   AVTBIT4
@NM00080 EQU   AVTBIT4
@NM00079 EQU   AVTBIT4
@NM00078 EQU   AVTBIT4
@NM00077 EQU   AVTBIT4
@NM00076 EQU   AVTBIT4
@NM00075 EQU   AVTBIT4
AVTRUFTN EQU   AVTBIT4
@NM00074 EQU   IEDQAVTD+1132
AVTNOBFQ EQU   IEDQAVTD+1128
@NM00073 EQU   IEDQAVTD+1124
AVTDKENQ EQU   IEDQAVTD+1120
@NM00072 EQU   IEDQAVTD+1116
AVTDKAPQ EQU   IEDQAVTD+1112
AVTCOPY  EQU   IEDQAVTD+1108
AVTIA    EQU   IEDQAVTD+1104
AVTFL    EQU   IEDQAVTD+1100
@NM00071 EQU   IEDQAVTD+1096
AVTNCPBQ EQU   IEDQAVTD+1092
AVTTOTNC EQU   IEDQAVTD+1088
AVTCMAX  EQU   IEDQAVTD+1084
AVTCMIN  EQU   IEDQAVTD+1080
AVTHM02  EQU   IEDQAVTD+1076
AVTOPCIN EQU   IEDQAVTD+1074
AVTDCTLN EQU   IEDQAVTD+1072
AVTOPMSK EQU   IEDQAVTD+1068
AVTDDFT  EQU   IEDQAVTD+1064
AVTSTEAL EQU   IEDQAVTD+1060
AVTOPTN  EQU   IEDQAVTD+1056
AVTDSKCT EQU   IEDQAVTD+1054
AVTCKRST EQU   IEDQAVTD+1053
AVTSTAN  EQU   AVTBIT3
AVTSTACN EQU   AVTBIT3
AVTSTAIN EQU   AVTBIT3
AVTSTAYN EQU   AVTBIT3
AVTOLTBN EQU   AVTBIT3
AVTTSAB  EQU   AVTBIT3
AVTRFULN EQU   AVTBIT3
AVTRECVN EQU   AVTBIT3
@NM00070 EQU   AVTBIT2
@NM00069 EQU   AVTBIT2
AVTOPEIN EQU   AVTBIT2
AVTSTRTN EQU   AVTBIT2
AVTTOPOL EQU   AVTBIT2
AVTCOPYN EQU   AVTBIT2
AVTREUSN EQU   AVTBIT2
AVTEXTSC EQU   AVTBIT2
AVTDISKN EQU   AVTBIT1
AVTQUCKN EQU   AVTBIT1
AVTCLOSN EQU   AVTBIT1
AVTREADN EQU   AVTBIT1
AVTDLAYN EQU   AVTBIT1
AVTAQTAN EQU   AVTBIT1
AVTTSON  EQU   AVTBIT1
AVTAPLKN EQU   AVTBIT1
AVTDUMBR EQU   IEDQAVTD+1048
AVTDLQX  EQU   IEDQAVTD+1046
AVTINTLV EQU   IEDQAVTD+1044
AVTSMCNT EQU   IEDQAVTD+1042
AVTAVFCT EQU   IEDQAVTD+1040
AVTOPCON EQU   IEDQAVTD+1038
AVTOPCNT EQU   IEDQAVTD+1036
AVTLNCNT EQU   IEDQAVTD+1034
AVTHA16  EQU   IEDQAVTD+1030
AVTHA7   EQU   IEDQAVTD+1028
AVTHA4   EQU   IEDQAVTD+1026
AVTHA3   EQU   IEDQAVTD+1024
AVTHA2   EQU   IEDQAVTD+1022
AVTGETMS EQU   IEDQAVTD+1021
@NM00068 EQU   IEDQAVTD+1020
AVTGETMD EQU   IEDQAVTD+1016
AVTGETMN EQU   IEDQAVTD+1012
AVTCWTOT EQU   IEDQAVTD+1008
AVTCWINT EQU   IEDQAVTD+956
AVTDTRAP EQU   IEDQAVTD+952
@NM00067 EQU   IEDQAVTD+950
@NM00066 EQU   AVTIOTR
AVTIOTRH EQU   AVTIOTR
AVTIOTRE EQU   AVTIOTR
@NM00065 EQU   AVTSUBT
AVTSUBPT EQU   AVTSUBT
AVTSUBON EQU   AVTSUBT
AVTAFE30 EQU   IEDQAVTD+944
AVTAFE20 EQU   IEDQAVTD+940
AVTAFE10 EQU   IEDQAVTD+936
AVTCWEC2 EQU   IEDQAVTD+932
AVTCWPM2 EQU   IEDQAVTD+928
AVTCWTS2 EQU   IEDQAVTD+927
AVTCWTS1 EQU   IEDQAVTD+926
AVTCWCLD EQU   AVTCWFL2
AVTCWRAP EQU   AVTCWFL2
@NM00064 EQU   AVTCWFL2
@NM00063 EQU   AVTCWFL2
@NM00062 EQU   AVTCWFL2
@NM00061 EQU   AVTCWFL2
@NM00060 EQU   AVTCWFL2
AVTCWACT EQU   AVTCWFL2
@NM00059 EQU   AVTCWFL1
@NM00058 EQU   AVTCWFL1
@NM00057 EQU   AVTCWFL1
@NM00056 EQU   AVTCWFL1
@NM00055 EQU   AVTCWFL1
@NM00054 EQU   AVTCWFL1
@NM00053 EQU   AVTCWFL1
AVTCOMWN EQU   AVTCWFL1
AVTCWEC1 EQU   IEDQAVTD+920
AVTCWPM1 EQU   IEDQAVTD+916
AVTCAREA EQU   IEDQAVTD+912
AVTFZERO EQU   IEDQAVTD+908
AVTCADDR EQU   IEDQAVTD+904
AVTCOREC EQU   IEDQAVTD+900
@NM00052 EQU   IEDQAVTD+892
AVTCPBCB EQU   IEDQAVTD+888
@NM00051 EQU   IEDQAVTD+880
AVTDSIOB EQU   IEDQAVTD+876
@NM00050 EQU   IEDQAVTD+868
AVTCPRMB EQU   IEDQAVTD+864
@NM00049 EQU   IEDQAVTD+856
AVTCLOSB EQU   IEDQAVTD+852
@NM00048 EQU   IEDQAVTD+844
AVTACTIB EQU   IEDQAVTD+840
@NM00047 EQU   IEDQAVTD+836
AVTOLTEB EQU   IEDQAVTD+832
AVTOLTCH EQU   AVTOLTQB+1
AVTOLTVT EQU   AVTOLTQB
@NM00046 EQU   AVTOPCQB+8
@NM00045 EQU   AVTOPCEC+1
@NM00044 EQU   AVTOPCCC
AVTOPCPO EQU   AVTOPCCC
AVTOPCWA EQU   AVTOPCCC
AVTOPCCH EQU   AVTOPCOB+1
AVTOPCVT EQU   AVTOPCOB
@NM00043 EQU   AVTCKPQB+9
AVTCKPTS EQU   AVTCKPQB+8
@NM00042 EQU   AVTCKPEC+1
@NM00041 EQU   AVTCKPCC
AVTCKPPO EQU   AVTCKPCC
AVTCKPWA EQU   AVTCKPCC
AVTCKPCH EQU   AVTCKPTB+1
AVTCKPVT EQU   AVTCKPTB
@NM00040 EQU   IEDQAVTD+796
AVTBFRTB EQU   IEDQAVTD+792
@NM00039 EQU   IEDQAVTD+784
AVTBFREB EQU   IEDQAVTD+780
AVTTIMQ  EQU   IEDQAVTD+776
@NM00038 EQU   IEDQAVTD+772
AVTIMQPS EQU   IEDQAVTD+768
AVTINOUT EQU   IEDQAVTD+766
AVTREFTM EQU   IEDQAVTD+764
@NM00037 EQU   IEDQAVTD+752
AVTDELYB EQU   IEDQAVTD+748
AVTOCQPT EQU   IEDQAVTD+744
AVTTSOPT EQU   IEDQAVTD+740
AVTSUPPT EQU   IEDQAVTD+736
AVTCBQCB EQU   IEDQAVTD+732
AVTMSGS  EQU   IEDQAVTD+729
@NM00036 EQU   AVTSYSER
@NM00035 EQU   AVTSYSER
@NM00034 EQU   AVTSYSER
@NM00033 EQU   AVTSYSER
@NM00032 EQU   AVTSYSER
@NM00031 EQU   AVTSYSER
AVTCMAXN EQU   AVTSYSER
AVTCMINN EQU   AVTSYSER
AVT2260L EQU   IEDQAVTD+724
AVTABEPL EQU   AVTADBUF
AVTHFF   EQU   AVTCLRHI+2
@NM00030 EQU   AVTCLRHI
AVTCCLNK EQU   AVTCRELE+5
AVTCCPRI EQU   AVTCRELE+4
AVTCCQCB EQU   AVTCCELE+1
AVTCCKEY EQU   AVTCCELE
AVTDELAD EQU   IEDQAVTD+704
AVTDELEM EQU   IEDQAVTD+700
AVTBSX   EQU   AVTCKLNK
AVTOPETR EQU   AVTHG01
@NM00029 EQU   AVTCKBYT
AVTCKONQ EQU   AVTCKBYT
@NM00028 EQU   AVTCKBYT
@NM00027 EQU   AVTCKBYT
@NM00026 EQU   AVTCKBYT
@NM00025 EQU   AVTCKBYT
@NM00024 EQU   AVTCKBYT
@NM00023 EQU   AVTCKBYT
AVTOPERT EQU   IEDQAVTD+690
AVTOPXCL EQU   IEDQAVTD+688
AVTOPERL EQU   IEDQAVTD+687
@NM00022 EQU   IEDQAVTD+686
AVTCKTIM EQU   IEDQAVTD+684
AVTCKELV EQU   IEDQAVTD+682
AVTCPRCD EQU   IEDQAVTD+681
AVTWARMN EQU   AVTCKELF
AVTCRTLN EQU   AVTCKELF
AVTCPIPN EQU   AVTCKELF
AVTCCLCN EQU   AVTCKELF
AVTCINCN EQU   AVTCKELF
@NM00021 EQU   AVTCKELF
AVTCMCPN EQU   AVTCKELF
AVTNQBCK EQU   AVTCKELF
AVTCKQAD EQU   IEDQAVTD+677
AVTSCBSZ EQU   IEDQAVTD+676
@NM00020 EQU   IEDQAVTD+672
AVTCKELE EQU   IEDQAVTD+668
@NM00019 EQU   AVTCKPEL+8
AVTCKRLK EQU   AVTCKPEL+5
AVTCKRPR EQU   AVTCKPEL+4
AVTCKRMQ EQU   AVTCKRMV+1
AVTCKRKY EQU   AVTCKRMV
AVTHK    EQU   IEDQAVTD+648
AVTHI    EQU   IEDQAVTD+644
AVTIOT   EQU   IEDQAVTD+640
AVTNX    EQU   IEDQAVTD+636
AVTTONE  EQU   IEDQAVTD+632
AVTA3TL  EQU   IEDQAVTD+628
AVTDMECB EQU   IEDQAVTD+624
AVTABEND EQU   IEDQAVTD+618
AVTPLCBN EQU   IEDQAVTD+616
@NM00018 EQU   AVTSAVTP+1
@NM00017 EQU   AVTSAVTF
AVTSNA   EQU   AVTSAVTF
AVTONSNA EQU   AVTSAVTF
AVTVTMCP EQU   AVTSAVTF
@NM00016 EQU   IEDQAVTD+608
AVTCMBSS EQU   IEDQAVTD+604
AVTRCV   EQU   IEDQAVTD+600
AVTSEND  EQU   IEDQAVTD+596
AVTCSCH  EQU   IEDQAVTD+592
AVTQ1    EQU   IEDQAVTD+588
AVTE7    EQU   IEDQAVTD+584
AVTHB    EQU   IEDQAVTD+580
AVTR1    EQU   IEDQAVTD+576
AVTBZ    EQU   IEDQAVTD+572
AVTEZ    EQU   IEDQAVTD+568
AVTEC    EQU   IEDQAVTD+564
AVTEW    EQU   IEDQAVTD+560
AVTNDIAL EQU   AVTSCOPT
AVTN2741 EQU   AVTSCOPT
AVTCONCO EQU   AVTSCOPT
AVTCONC  EQU   AVTSCOPT
AVTCMBUF EQU   AVTSCOPT
AVTAPDMP EQU   AVTSCOPT
@NM00015 EQU   AVTSCOPT
AVTHA    EQU   AVTDISP
AVTEA    EQU   IEDQAVTD+548
AVTAX    EQU   IEDQAVTD+544
AVTA3    EQU   IEDQAVTD+540
AVTGD    EQU   IEDQAVTD+536
AVTAL    EQU   IEDQAVTD+532
AVTOLTST EQU   AVTHG02
AVTE8    EQU   IEDQAVTD+524
AVTUI    EQU   IEDQAVTD+520
AVTCOMPT EQU   IEDQAVTD+516
AVTCRSRF EQU   IEDQAVTD+512
@NM00014 EQU   IEDQAVTD+508
AVTKA02  EQU   IEDQAVTD+504
AVTOPTPT EQU   IEDQAVTD+500
AVTPCBPT EQU   IEDQAVTD+496
@NM00013 EQU   AVTECB1
AVTCOMP  EQU   AVTECB1
@NM00012 EQU   AVTECB1
AVTOPECA EQU   IEDQAVTD+488
AVTOLECA EQU   IEDQAVTD+484
AVTCKECA EQU   IEDQAVTD+480
AVTCWECA EQU   IEDQAVTD+476
AVTCWTCB EQU   IEDQAVTD+472
AVTOLTCB EQU   IEDQAVTD+468
AVTOCTCB EQU   IEDQAVTD+464
AVTCKTCB EQU   IEDQAVTD+460
AVTAS    EQU   IEDQAVTD+456
AVTNOLBF EQU   IEDQAVTD+454
AVTNCKPR EQU   IEDQAVTD+453
AVTCIB   EQU   IEDQAVTD+452
AVTSPLPT EQU   IEDQAVTD+448
AVTMVBFR EQU   IEDQAVTD+444
AVTSBTA  EQU   IEDQAVTD+440
AVTRARTN EQU   IEDQAVTD+436
AVTBSCAN EQU   IEDQAVTD+432
AVTRDYA  EQU   IEDQAVTD+428
AVTRNMPT EQU   IEDQAVTD+424
AVTDISTR EQU   IEDQAVTD+420
AVTPARM3 EQU   IEDQAVTD+416
@NM00011 EQU   AVTPKF
@NM00010 EQU   AVTPKF
@NM00009 EQU   AVTPKF
AVTFTCHF EQU   AVTPKF
@NM00008 EQU   AVTPKF
@NM00007 EQU   AVTPKF
@NM00006 EQU   AVTPKF
@NM00005 EQU   AVTPKF
AVTPARM  EQU   IEDQAVTD+408
AVTEXS2A EQU   IEDQAVTD+402
AVTEXA2S EQU   IEDQAVTD+396
AVTOCGET EQU   IEDQAVTD+392
AVTCKAVT EQU   @NM00003+1
@NM00004 EQU   AVTCKFLG
AVTCKHLT EQU   AVTCKFLG
AVTCKREQ EQU   AVTCKFLG
AVTCKENV EQU   AVTCKFLG
AVTCKNAC EQU   AVTCKFLG
AVTCKTAC EQU   AVTCKFLG
@NM00002 EQU   IEDQAVTD+384
AVTREADD EQU   IEDQAVTD+380
AVTREADY EQU   IEDQAVTD+376
AVTRACE  EQU   IEDQAVTD+372
AVTTCB   EQU   IEDQAVTD+368
AVTPASWD EQU   IEDQAVTD+360
AVTCTLCH EQU   IEDQAVTD+352
AVTDOUBL EQU   IEDQAVTD+344
AVTDOUBX EQU   IEDQAVTD+336
AVTDPARM EQU   IEDQAVTD+332
AVTCSTCS EQU   IEDQAVTD+328
AVTDLQ   EQU   AVTSAVEX+32
@NM00001 EQU   AVTSAVEX
AVTSAVE4 EQU   IEDQAVTD+216
AVTSAVE3 EQU   IEDQAVTD+144
AVTSAVE2 EQU   IEDQAVTD+72
AVTSAVE1 EQU   IEDQAVTD
*                                      END UNREFERENCED COMPONENTS
@RT00286 EQU   POSTAPPL
@RT00308 EQU   GETDIAL0
@RF00308 EQU   MOVFLD
@RT00311 EQU   GETDIAL
@RF00311 EQU   MOVFLD
@RF00306 EQU   SHIFT1
@RT00318 EQU   SHIFT1
@RT00322 EQU   MOVIT0
@RT00331 EQU   SHIFT1
@RT00335 EQU   CHANG1
@RT00338 EQU   MOVFLD
@RF00338 EQU   SHIFT1
@RT00344 EQU   MOVFLD
@RF00350 EQU   SHIFT1
@RT00356 EQU   ERREXIT
@RT00365 EQU   SHIFT1
@RT00379 EQU   SIZERR
@EL01    EQU   @EL00001
@ENDDATA EQU   *
@DATEND  EQU   *
         END   IGCT110D,(C'PLS1119',0701,77217)
