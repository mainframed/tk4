         TITLE 'IGCFF10D, ACTIVATE CHECKPOINT/RESTART MODULE           *
                        '
IGCFF10D CSECT ,                                                01S0001
@PROLOG  BALR  @12,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@12                                      01S0001
*                                   /*
IGCFF10D IEDHJN AFTERHJN,HJN           MODULE IDENTIFICATION MACRO
*   ROPCAVT=RPARM;                  /* SET THE BASE POINTER FOR THE
*                                      OPERATOR CONTROL ADDRESS 02S0871
*                                      VECTOR TABLE                  */
         LR    ROPCAVT,RPARM                                    02S0871
*   RFY                                                         02S0872
*     RPARM UNRSTD;                 /* RELEASE THE PARAMETER REGISTER
*                                      FOR USE BY THE COMPILER       */
*   RWRKAREA=OPCWORK;               /* SET THE BASE REGISTER TO BE
*                                      USED FOR ADDRESSING AUTOMATIC
*                                      DATA WITH THE POINTER TO THE
*                                      OPERATOR CONTROL RESIDENT WORK
*                                      AREA                          */
         L     RWRKAREA,OPCWORK(,ROPCAVT)                       02S0873
*   GEN REFS(RWRKAREA) NOSETS;                                  02S0874
*                                   /*
         USING @DATD,RWRKAREA          INFORM THE ASSEMBLER OF THE
*                                      BASE REGISTER TO BE USED FOR
*                                      ADDRESSING AUTOMATIC DATA
*   RSAVE=ADDR(OPCSAVE);            /* SET THE SAVE AREA POINTER
*                                      REGISTER WITH THE POINTER TO
*                                      THE OPERATOR CONTROL SAVE AREA*/
         LA    RSAVE,OPCSAVE(,ROPCAVT)                          02S0875
*                                                               02S0876
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS: THIS SEGMENT DOES THE PROCESSING THAT IS NECESSARY TO*/
*   /* PERFORM THE FUNCTION OF THE MODULE.                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0876
*                                                               03S0876
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS.INITIAL: THIS SEGMENT DOES THE INITIAL PROCESSING.    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               03S0876
*   DO;                                                         03S0876
*     RAVT=OPCAVTPT;                /* SET THE BASE POINTER FOR THE
*                                      TCAM ADDRESS VECTOR TABLE     */
         L     RAVT,OPCAVTPT(,ROPCAVT)                          03S0877
*     ROPCE=OPCCOPCE;               /* SET THE BASE POINTER FOR THE
*                                      OPERATOR CONTROL ELEMENT      */
         L     ROPCE,OPCCOPCE(,ROPCAVT)                         03S0878
*     FLAGS=''B;                    /* INITIALIZE FLAG BYTE          */
         XC    FLAGS(4),FLAGS                                   03S0879
*   END;                                                        03S0880
*   IF OCSWITCH^=OCRSTART THEN      /* IF NOT A RESTART OPCE         */
         CLI   OCSWITCH(ROPCE),X'F1'                            02S0881
         BE    @RF00881                                         02S0881
*     IF OCSWITCH^=OCACTLK THEN     /* IF NOT AN ACTLINK OPCE        */
         CLI   OCSWITCH(ROPCE),X'50'                            02S0882
         BE    @RF00882                                         02S0882
*       DO;                         /* PROCESS RESPONSES TO COMMANDS
*                                      SENT AS PART OF 3705 RESTART  */
*                                                               03S0884
*         /***********************************************************/
*         /*                                                         */
*         /* PROCESS.RESPONSE: THIS SEGMENT PROCESSES THE RESPONSES  */
*         /* TO THE RESTART COMMANDS. NO ERROR PROCESSING IS         */
*         /* PERFORMED. THE UNITS CONTAINING THE OPCE AND ATTACHED RU*/
*         /* ARE FREED AND TRANSFER OF CONTROL IS SET UP FOR         */
*         /* IGC0010D.                                               */
*         /*                                                         */
*         /***********************************************************/
*                                                               03S0884
*         RFY                                                   03S0884
*           REG00 RSTD;                                         03S0884
*         RFY                                                   03S0885
*           RPARM RSTD;                                         03S0885
*         IF OCSWITCH^=OCSND3 THEN  /* IF NOT REPLACE DEVICE RECORD
*                                      RESPONSE                      */
         CLI   OCSWITCH(ROPCE),X'F4'                            03S0886
         BE    @RF00886                                         03S0886
*           IF OCSWITCH=OCSND1×OCSWITCH=OCSND2 THEN/* IF BHSET OR
*                                      MODEM SPEED SELECT RESPONSE
*                                      (FID0)                        */
         CLI   OCSWITCH(ROPCE),X'F2'                            03S0887
         BE    @RT00887                                         03S0887
         CLI   OCSWITCH(ROPCE),X'F3'                            03S0887
         BNE   @RF00887                                         03S0887
@RT00887 DS    0H                                               03S0888
*             REG00=2;              /* SET TO DECREMENT OPCADGOT BY 2
*                                      FOR THE OPCE AND RU           */
         LA    REG00,2                                          03S0888
*           ELSE                    /* ELSE FID1 RESPONSE            */
*             REG00=1;              /* SET TO DECREMENT OPCADGOT BY 1
*                                      FOR THE OPCE                  */
         B     @RC00887                                         03S0889
@RF00887 LA    REG00,1                                          03S0889
*         ELSE                      /* REPLACE DEVICE RECORD RESPONSE*/
*           REG00=OCDVRDCT;         /* SET TO DECREMENT OPCADGOT BY
*                                      THE COUNT OF UNITS WHICH WERE
*                                      NECESSARY TO BUILD THE OPCE
*                                      AND THE REPLACE DEVICE RECORD
*                                      RU                            */
         B     @RC00886                                         03S0890
@RF00886 LH    REG00,OCDVRDCT(,ROPCE)                           03S0890
*         CALL DECRCT;              /* DECREMENT OPCADGOT AND INIT.
*                                      REDRIVE ELEMENT IF R/D OPCE'S
*                                      ON OPCBUFWT CHAIN             */
@RC00886 L     @15,OPCDECR(,ROPCAVT)                            03S0891
         BALR  @14,@15                                          03S0891
*         RPARM=ROPCE;              /* POINT TO CURRENT OPCE         */
         LR    RPARM,ROPCE                                      03S0892
*         CALL FREEBUFF;            /* FREE THE OPCE AND ANY ATTACHED
*                                      RU'S                          */
         L     @15,OPCFREBF(,ROPCAVT)                           03S0893
         BALR  @14,@15                                          03S0893
*         OPCMODID=CNTLMOD;         /* SET TO XCTL TO IGC0010D       */
         MVC   OPCMODID(2,ROPCAVT),CNTLMOD                      03S0894
*         RFY                                                   03S0895
*           REG00 UNRSTD;                                       03S0895
*         RFY                                                   03S0896
*           RPARM UNRSTD;                                       03S0896
*       END;                                                    02S0897
*     ELSE                          /* THIS IS AN ACTLINK,           */
*       DO;                         /* START CKPTR/RTRT PROCESS      */
         B     @RC00882                                         02S0898
@RF00882 DS    0H                                               02S0899
*                                                               03S0899
*         /***********************************************************/
*         /*                                                         */
*         /* PROCESS.START: THIS SEGMENT STARTS THE RESTART          */
*         /* PROCESSING BY BUILDING THE RESTART OPCE AND PASSING IT  */
*         /* TO CHECKPOINT.                                          */
*         /*                                                         */
*         /***********************************************************/
*                                                               03S0899
*         OCSWITCH=OCRSTART;        /* SET AS RESTART OPCE           */
         MVI   OCSWITCH(ROPCE),X'F1'                            03S0899
*         OCOPTCDE=OCMODIFY;        /* SET CMND CODE                 */
         MVI   OCOPTCDE(ROPCE),X'44'                            03S0900
*         OCRESNUM=''B;             /* INITIALIZE RESOURCE NUMBER    */
         SLR   @11,@11                                          03S0901
         STH   @11,OCRESNUM(,ROPCE)                             03S0901
*         OCTRMTBL=OCPTRSAV->OCTRMTBL;/* TTCIN OF NCP                */
         L     @11,OCPTRSAV(,ROPCE)                             03S0902
         LH    @11,OCTRMTBL(,@11)                               03S0902
         N     @11,@CF02618                                     03S0902
         STH   @11,OCTRMTBL(,ROPCE)                             03S0902
*         OCWTG=THISMOD;            /* SET TO RETURN TO THIS MODULE
*                                      FROM CHECKPOINT               */
         MVC   OCWTG(2,ROPCE),THISMOD                           03S0903
*         OCREDRVE=OFF;             /* INSURE REDRIVE FLAG OFF       */
         NI    OCREDRVE(ROPCE),B'11101111'                      03S0904
*         OPCMODID=CKPTMOD;         /* SET TO XCTL TO CHECKPOINT     */
         MVC   OPCMODID(2,ROPCAVT),CKPTMOD                      03S0905
*       END;                                                    02S0906
*   ELSE                            /* THIS IS A RESTART OPCE,       */
*     DO;                           /* SEND OUT RESTART COMMANDS     */
         B     @RC00881                                         02S0907
@RF00881 DS    0H                                               02S0908
*                                                               03S0908
*       /*************************************************************/
*       /*                                                           */
*       /* PROCESS.SENDER: THIS SEGMENT SENDS THE RESTART COMMANDS TO*/
*       /* THE NCP.                                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                               03S0908
*       RCKPREC=NRACURR;            /* SET BASE FOR CKPT RESOURCE
*                                      RECORD                        */
         L     @11,OCRSTGTM(,ROPCE)                             03S0908
         L     RCKPREC,NRACURR(,@11)                            03S0908
*       IF OCREDRVE=OFF THEN        /* IF NOT REDRIVE                */
         TM    OCREDRVE(ROPCE),B'00010000'                      03S0909
         BNZ   @RF00909                                         03S0909
*         DO;                       /* DETERMINE NUMBER OF COMMANDS
*                                      TO SEND AND, IF ANY, GET AS
*                                      MANY UNITS AS POSSIBLE IN
*                                      WHICH TO BUILD OPCE'S AND RU'S
*                                      AND HANG OFF OCUNIT           */
*                                                               04S0911
*           /*********************************************************/
*           /*                                                       */
*           /* PROCESS.SENDER.CHKR: THIS SEGMENT DETERMINES THE      */
*           /* NUMBER OF RESTART COMMANDS TO BE SENT BASED ON THE    */
*           /* SETTINGS OF THE BITS IN THE RESOURCE RECORD. IF THE   */
*           /* RESOURCE RECORD NUMBER IS 0 THEN RESTART PROCESSING IS*/
*           /* OVER FOR THIS 3705 AND RESTART OPCE IS RESET OF RETURN*/
*           /* TO IGCFJ10D TO START ACTLINK PROCESSING.              */
*           /*                                                       */
*           /*********************************************************/
*                                                               04S0911
*           IF OCRESNUM^=0 THEN     /* IF RESTART PROCESSING NOT OVER*/
         LH    @11,OCRESNUM(,ROPCE)                             04S0911
         N     @11,@CF02618                                     04S0911
         LTR   @11,@11                                          04S0911
         BZ    @RF00911                                         04S0911
*             DO;                   /* DETERMINE NUMBER OF UNITS TO
*                                      SEND RESTART COMMANDS FOR THIS
*                                      RESOURCE                      */
*               GETNO=''B;          /* INIT. CTR. FOR NUMBER OF UNITS
*                                      NEEDED                        */
         SLR   GETNO,GETNO                                      04S0913
*               IF CNRFBHS=ON×CNRFBHSC=ON THEN/* IF BHSET FLAG ON
*                                                            @YM07713*/
         TM    CNRFBHS(RCKPREC),B'11000000'                     04S0914
         BZ    @RF00914                                         04S0914
*                 GETNO=GETNO+2;    /* FID0 COMMAND, NEED TWO UNITS
*                                      FOR OPCE AND RU               */
         AL    GETNO,@CF00132                                   04S0915
*               IF CNRFSSP=ON THEN  /* IF SERVICE SEEK PAUSE         */
@RF00914 TM    CNRFSSP(RCKPREC),B'00100000'                     04S0916
         BNO   @RF00916                                         04S0916
*                 GETNO=GETNO+1;    /* NEED 1 UNIT                   */
         AL    GETNO,@CF00061                                   04S0917
*               IF CNRFNPL=ON THEN  /* IF CHANGE NEG. POLL LIMIT FLAG
*                                      ON                            */
@RF00916 TM    CNRFNPL(RCKPREC),B'00010000'                     04S0918
         BNO   @RF00918                                         04S0918
*                 GETNO=GETNO+1;    /* NEED 1 UNIT                   */
         AL    GETNO,@CF00061                                   04S0919
*               IF CNRFCSL=ON THEN  /* IF CHANGE SESSION LIMIT FLAG
*                                      ON                            */
@RF00918 TM    CNRFCSL(RCKPREC),B'00001000'                     04S0920
         BNO   @RF00920                                         04S0920
*                 GETNO=GETNO+1;    /* NEED 1 UNIT                   */
         AL    GETNO,@CF00061                                   04S0921
*               IF CNRFCTL=ON THEN  /* IF CHANGE TRANSMISSION LIMIT
*                                      FLAG ON                       */
@RF00920 TM    CNRFCTL(RCKPREC),B'00000100'                     04S0922
         BNO   @RF00922                                         04S0922
*                 GETNO=GETNO+1;    /* NEED 1 UNIT                   */
         AL    GETNO,@CF00061                                   04S0923
*               IF CNRFMSS=ON THEN  /* IF MODEM SPEED SELECT FLAG ON */
@RF00922 TM    CNRFMSS(RCKPREC),B'00000010'                     04S0924
         BNO   @RF00924                                         04S0924
*                 GETNO=GETNO+2;    /* NEED 2 UNITS                  */
         AL    GETNO,@CF00132                                   04S0925
*               IF CNRFRDR=ON THEN  /* IF DEVICE RECORD FLAG ON      */
@RF00924 TM    CNRFRDR(RCKPREC),B'00000001'                     04S0926
         BNO   @RF00926                                         04S0926
*                 DO;               /* DETERMINE NUMBER OF UNITS TO
*                                      BUILD REPLACE DEVICE RECORD RU*/
*                                                               05S0928
*                   /*************************************************/
*                   /*                                               */
*                   /* PROCESS.SENDER.CALCRDR: THIS SEGMENT CALULATES*/
*                   /* THE NUMBER OF UNITS NEEDED TO BUILD THE CHANGE*/
*                   /* DEVICE RECORD OPCE-PACKED RU.                 */
*                   /*                                               */
*                   /*************************************************/
*                                                               05S0928
*                   RFY                                         05S0928
*                     IEDPRUQD BASED(ADDR(CNRDEVRC));/* BASE PACKED
*                                      RU STRUCTURE ON ADDR OF DEVICE
*                                      RECORD IN RESOURCE RECORD     */
*                   COUNTER=2;      /* INIT TO MIN NUM OF UNITS TO
*                                      BUILD FID0 CMND               */
         LA    COUNTER,2                                        05S0929
*                   DO SIZE=PRUDATCT BY(-AVTKEYLE) WHILE(SIZE>AVTKEYLE)
*                         ;         /* LOOP WHILE SIZE IS STILL 05S0930
*                                      GREATER THAN TCAM UNIT LENGTH */
         LH    SIZE,PRUDATCT+19(,RCKPREC)                       05S0930
         B     @DE00930                                         05S0930
@DL00930 DS    0H                                               05S0931
*                     COUNTER=COUNTER+1;/* INCREMENT NUM UNITS NEEDED*/
         AL    COUNTER,@CF00061                                 05S0931
*                   END;                                        05S0932
         LH    @11,AVTKEYLE(,RAVT)                              05S0932
         LCR   @11,@11                                          05S0932
         ALR   SIZE,@11                                         05S0932
@DE00930 CH    SIZE,AVTKEYLE(,RAVT)                             05S0932
         BH    @DL00930                                         05S0932
*                   GETNO=GETNO+COUNTER;/* CALC NUM UNITS NEEDED FOR
*                                      ALL CMNDS                     */
         ALR   GETNO,COUNTER                                    05S0933
*                   OCDVRDCT=COUNTER;/* SAVE NUM UNITS NEEDED FOR
*                                      DEVICE RECORD CMND IN RESTART
*                                      OPCE                          */
         STH   COUNTER,OCDVRDCT(,ROPCE)                         05S0934
*                   RFY                                         05S0935
*                     IEDPRUQD BASED;                           05S0935
*                 END;                                          04S0936
*               OCBUFNED=GETNO;     /* SET NUMBER OF BUFFER UNITS
*                                      NEEDED                        */
@RF00926 STH   GETNO,OCBUFNED(,ROPCE)                           04S0937
*               OCBUFGOT=''B;       /* SET NUMBER OF BUFFER UNITS GOT*/
         SLR   @11,@11                                          04S0938
         STH   @11,OCBUFGOT(,ROPCE)                             04S0938
*             END;                                              04S0939
*           ELSE                    /* FINISHED SENDING RESTART 04S0940
*                                      COMMANDS,                     */
*             DO;                   /* SET UP CURRENT OPCE AS ACTLINK
*                                      OPCE AND XCTL TO IGCFJ10D TO
*                                      BUILD ACTLINKS FOR ALL LINES
*                                      WITH REMEMBER BIT ON          */
         B     @RC00911                                         04S0940
@RF00911 DS    0H                                               04S0941
*               OUTFLAG=ON;         /* SET FLAG TO BYPASS REMAINDER
*                                      OF PROCESSING                 */
         LA    @11,1                                            04S0941
         ST    @11,OUTFLAG                                      04S0941
*               OCSWITCH=''B;       /* SET VALUE OF 0 TO INDICATE TO
*                                      IGCFJ10D THAT OPCE IS FROM
*                                      RESTART                       */
         MVI   OCSWITCH(ROPCE),X'00'                            04S0942
*               OPCMODID=RPNCPMOD;  /* SET TO XCTL TO IGCFJ10D       */
         MVC   OPCMODID(2,ROPCAVT),RPNCPMOD                     04S0943
*             END;                                              04S0944
*           IF OUTFLAG=OFF THEN     /* IF COMMANDS TO BE SENT,       */
@RC00911 L     @11,OUTFLAG                                      03S0945
         LTR   @11,@11                                          03S0945
         BNZ   @RF00945                                         03S0945
*             DO;                   /* GET AS MANY UNITS AS POSSIBLE
*                                      TO START BUILDING THOSE CMNDS */
*                                                               04S0947
*               /*****************************************************/
*               /*                                                   */
*               /* PROCESS.SENDER.GETBUFS: THIS SEGMENT DETERMINES IF*/
*               /* ANY UNITS MAY BE OBTAINED, AND IF SO, HOW MANY,   */
*               /* AND THEN GETS THEM AND ATTACHES THEM TO THE       */
*               /* REDRIVE OPCE                                      */
*               /*                                                   */
*               /*****************************************************/
*                                                               04S0947
*               IF OPCADGOT<(AVTNOLBF/2) THEN/* IF ACT/DEACT HAS LT
*                                      50%                           */
         LH    @11,OPCADGOT(,ROPCAVT)                           04S0947
         N     @11,@CF02618                                     04S0947
         LA    @06,2                                            04S0947
         LH    @05,AVTNOLBF(,RAVT)                              04S0947
         LR    @00,@05                                          04S0947
         SRDA  @00,32                                           04S0947
         DR    @00,@06                                          04S0947
         CR    @11,@01                                          04S0947
         BNL   @RF00947                                         04S0947
*                 DO;               /* THEN                          */
*                   IF(OCBUFNED+OPCADGOT)>(AVTNOLBF/2) THEN/* IF NO
*                                      NEED PLUS                     */
         LH    @15,OCBUFNED(,ROPCE)                             04S0949
         N     @15,@CF02618                                     04S0949
         LR    @14,@15                                          04S0949
         ALR   @14,@11                                          04S0949
         LR    @00,@05                                          04S0949
         SRDA  @00,32                                           04S0949
         DR    @00,@06                                          04S0949
         CR    @14,@01                                          04S0949
         BNH   @RF00949                                         04S0949
*                     DO;           /* NO A/D ALREADY HAS IS GT 50%
*                                      THEN                          */
*                       GETNO=((AVTNOLBF/2)-OPCADGOT);/* SET TO GET
*                                      UP TO 50%                     */
         LH    @14,AVTNOLBF(,RAVT)                              04S0951
         SRDA  @14,32                                           04S0951
         DR    @14,@06                                          04S0951
         SLR   @15,@11                                          04S0951
         LR    GETNO,@15                                        04S0951
*                       OCBUFNED=OCBUFNED-GETNO;/* SET NO STILL NEED
*                                      =REMAINDER                    */
         LH    @11,OCBUFNED(,ROPCE)                             04S0952
         N     @11,@CF02618                                     04S0952
         SLR   @11,GETNO                                        04S0952
         STH   @11,OCBUFNED(,ROPCE)                             04S0952
*                     END;                                      04S0953
*                   ELSE            /* ELSE GET ALL NEEDED           */
*                     DO;                                       04S0954
         B     @RC00949                                         04S0954
@RF00949 DS    0H                                               04S0955
*                       GETNO=OCBUFNED;/* SET TO GET ALL             */
         LH    GETNO,OCBUFNED(,ROPCE)                           04S0955
         N     GETNO,@CF02618                                   04S0955
*                       OCBUFNED=0; /* SET NO STILL NEED=0           */
         SLR   @11,@11                                          04S0956
         STH   @11,OCBUFNED(,ROPCE)                             04S0956
*                     END;                                      04S0957
*                   OCBUFGOT=GETNO; /* SET NO HAVE =NO TO GET        */
@RC00949 STH   GETNO,OCBUFGOT(,ROPCE)                           04S0958
*                   OPCADGOT=OPCADGOT+GETNO;/* INCREMENT OPCADGOT    */
         LH    @11,OPCADGOT(,ROPCAVT)                           04S0959
         N     @11,@CF02618                                     04S0959
         ALR   @11,GETNO                                        04S0959
         STH   @11,OPCADGOT(,ROPCAVT)                           04S0959
*                 END;                                          04S0960
*               ELSE                /* ELSE MUST PUT REDRIVE OPCE ON
*                                      WAIT CHAIN AND WAIT FOR       */
*                 DO;               /* AVAILABLE UNITS ON REDRIVE    */
         B     @RC00947                                         04S0961
@RF00947 DS    0H                                               04S0962
*                   OCWTG=THISMOD;  /* SET RETURN TO THIS MODULE     */
         MVC   OCWTG(2,ROPCE),THISMOD                           04S0962
*                   OCLINK=OPCBUFWT;/* GET CHAIN ANCHOR AND PUT IN
*                                      LINK FIELD                    */
         L     @11,OPCBUFWT(,ROPCAVT)                           04S0963
         ST    @11,OCLINK(,ROPCE)                               04S0963
*                   OPCBUFWT=ROPCE; /* CHAIN IN THIS REDRIVE OPCE    */
         ST    ROPCE,OPCBUFWT(,ROPCAVT)                         04S0964
*                   OUTFLAG=ON;     /* SET TO GET OUT                */
         LA    @11,1                                            04S0965
         ST    @11,OUTFLAG                                      04S0965
*                   GETNO=0;        /* SET NO TO GET =0              */
         SLR   GETNO,GETNO                                      04S0966
*                   OPCMODID=CNTLMOD;/* SET TO XCTL TO CONTROL MODULE*/
         MVC   OPCMODID(2,ROPCAVT),CNTLMOD                      04S0967
*                 END;                                          04S0968
*               RFY                                             04S0969
*                 RPARM RSTD;                                   04S0969
@RC00947 DS    0H                                               04S0970
*               DO WHILE GETNO>0;   /* LOOP TO GET UNITS             */
         B     @DE00970                                         04S0970
@DL00970 DS    0H                                               04S0971
*                 IF GETNO>255 THEN /* MUST LOOP IF NEED MORE THAN
*                                      255                           */
         LA    @11,255                                          04S0971
         CR    GETNO,@11                                        04S0971
         BNH   @RF00971                                         04S0971
*                   DO;             /* THEN                          */
*                     GETNO=GETNO-255;/* SUB 255 FROM NO TO GET      */
         SLR   GETNO,@11                                        04S0973
*                     RPARM=255;    /* SET FOR REQUEST               */
         LR    RPARM,@11                                        04S0974
*                   END;                                        04S0975
*                 ELSE              /* ELSE NEED ONLY ONE PASS TO GET
*                                      ALL NEEDED                    */
*                   DO;                                         04S0976
         B     @RC00971                                         04S0976
@RF00971 DS    0H                                               04S0977
*                     RPARM=GETNO;  /* SET REQUEST VALUE             */
         LR    RPARM,GETNO                                      04S0977
*                     GETNO=0;      /* AND RESET GETNO TO 0          */
         SLR   GETNO,GETNO                                      04S0978
*                   END;                                        04S0979
*                 CALL ALLOCBUF;    /* GET BUFF UNITS                */
@RC00971 L     @15,OPCGETBF(,ROPCAVT)                           04S0980
         BALR  @14,@15                                          04S0980
*                 RFY                                           04S0981
*                   REG09 RSTD;     /* RESTRICT WORK REG             */
*                 REG09=ROPCE;      /* SET REG TO POINT TO REDRIVE
*                                      OPCE                          */
         LR    REG09,ROPCE                                      04S0982
*                 DO WHILE REG09->TIC=VALTIC;/* LOOP TILL END OF
*                                      CHAIN                         */
         B     @DE00983                                         04S0983
@DL00983 DS    0H                                               04S0984
*                   REG09=REG09->OCUNIT;/* UPDATE PTR TO NEXT UNIT   */
         L     REG09,OCUNIT(,REG09)                             04S0984
*                 END;              /* AT END OF LOOP REG09 PTS TO
*                                      LAST UNIT OR REDRIVE OPCE     */
@DE00983 TM    TIC(REG09),B'00000011'                           04S0985
         BZ    @DL00983                                         04S0985
*                 REG09->OCUNIT=RPARM;/* ATTACH GOTTEN UNITS         */
         ST    RPARM,OCUNIT(,REG09)                             04S0986
*                 RFY                                           04S0987
*                   REG09 UNRSTD;   /* RELEASE REG                   */
*               END;                                            04S0988
@DE00970 LTR   GETNO,GETNO                                      04S0988
         BP    @DL00970                                         04S0988
*               RFY                                             04S0989
*                 RPARM UNRSTD;                                 04S0989
*             END;                                              03S0990
*           ELSE                                                03S0991
*             ;                     /* NO COMMANDS TO BE SENT        */
@RF00945 DS    0H                                               03S0992
*         END;                                                  03S0992
*       ELSE                                                    03S0993
*         ;                         /* THIS IS A REDRIVE OPCE, UNITS
*                                      HUNG OFF OCUNIT               */
@RF00909 DS    0H                                               03S0994
*       IF OUTFLAG=OFF THEN         /* IF COMMANDS TO BE BUILT ON
*                                      THIS PASS                     */
         L     @11,OUTFLAG                                      03S0994
         LTR   @11,@11                                          03S0994
         BNZ   @RF00994                                         03S0994
*         DO;                       /* BUILD AS MANY OPCE'S AND 03S0995
*                                      RU'S(FID0 CMNDS ONLY) AS 03S0995
*                                      POSSIBLE                      */
*                                                               04S0996
*           /*********************************************************/
*           /*                                                       */
*           /* PROCESS.SENDER.BLDER: THIS SEGMENT LOOPS THROUGH THE  */
*           /* 3705 RESOURCE CHECKPOINT RECORD AND BUILDS, FOR EACH  */
*           /* BIT IN THE RECORD WHICH IS ON, THE CORRESPONDING      */
*           /* COMMAND.                                              */
*           /*                                                       */
*           /*********************************************************/
*                                                               04S0996
*           OPCAQWD=''B;            /* INITIALIZE THE AQCTL PARM.
*                                      LIST AND                      */
         XC    OPCAQWD(12,ROPCAVT),OPCAQWD(ROPCAVT)             04S0996
*           OPCAQREQ=CHAINFLG;      /* INDICATE THIS WILL BE A CHAIN
*                                      POST                          */
         MVI   OPCAQREQ(ROPCAVT),X'B4'                          04S0997
*           IF CNRFSSP=ON THEN      /* IF SERVICE SEEK PAUSE CKPT'D  */
         TM    CNRFSSP(RCKPREC),B'00100000'                     04S0998
         BNO   @RF00998                                         04S0998
*             DO;                                               04S0999
*                                                               05S1000
*               /*****************************************************/
*               /*                                                   */
*               /* PROCESS.SENDER.BLDER.BLDCHSSP: THIS SEGMENT BUILDS*/
*               /* A CHANGE SERVICE SEEK PAUSE OPCE (FID1).          */
*               /*                                                   */
*               /*****************************************************/
*                                                               05S1000
*               IF OCBUFGOT>0 THEN  /* IF UNITS LEFT                 */
         CLC   OCBUFGOT(2,ROPCE),@CH00647                       05S1000
         BNH   @RF01000                                         05S1000
*                 DO;               /* BUILD CHANGE SEVICE SEEK PAUSE
*                                      OPCE                          */
*                   CMDOPCE=OCUNIT; /* SET FIRST UNIT AS CMND OPCE   */
         L     CMDOPCE,OCUNIT(,ROPCE)                           05S1002
*                   CALL BLDFID1;   /* BUILD A BASIC FID1 OPCE       */
         BAL   @14,BLDFID1                                      05S1003
*                   CMDOPCE->OCSWITCH=OCCHGSSP;/* SET CMND CODE      */
         MVI   OCSWITCH(CMDOPCE),X'A0'                          05S1004
*                   CMDOPCE->OCREQVAL=CNRSSPAU;/* SET PAUSE VALUE    */
         MVC   OCREQVAL(1,CMDOPCE),CNRSSPAU(RCKPREC)            05S1005
*                   CNRFSSP=OFF;    /* TURN OFF FLAG IN CASE OF 05S1006
*                                      REDRIVE TO AVOID RESENDING    */
         NI    CNRFSSP(RCKPREC),B'11011111'                     05S1006
*                 END;                                          05S1007
*               ELSE                                            05S1008
*                 ;                 /* WAIT FOR REDRIVE TO GET ENOUGH
*                                      UNITS                         */
@RF01000 DS    0H                                               05S1009
*             END;                                              04S1009
*           IF CNRFNPL=ON THEN      /* IF CHANGE NEG. POLL LIMIT
*                                      CKPT'D                        */
@RF00998 TM    CNRFNPL(RCKPREC),B'00010000'                     04S1010
         BNO   @RF01010                                         04S1010
*             DO;                                               04S1011
*                                                               05S1012
*               /*****************************************************/
*               /*                                                   */
*               /* PROCESS.SENDER.BLDER.BLDCHGNP: THIS SEGMENT BUILDS*/
*               /* A CHANGE NEGATIVE POLL LIMIT OPCE (FID1).         */
*               /*                                                   */
*               /*****************************************************/
*                                                               05S1012
*               IF OCBUFGOT>0 THEN  /* IF UNITS LEFT                 */
         CLC   OCBUFGOT(2,ROPCE),@CH00647                       05S1012
         BNH   @RF01012                                         05S1012
*                 DO;               /* BUILD CHANGE NEG POLL LIMIT   */
*                   CMDOPCE=OCUNIT; /* SET FIRST UNIT AS CMND OPCE   */
         L     CMDOPCE,OCUNIT(,ROPCE)                           05S1014
*                   CALL BLDFID1;   /* BUILD A BASIC FID1 OPCE       */
         BAL   @14,BLDFID1                                      05S1015
*                   CMDOPCE->OCSWITCH=OCCHGNP;/* SET CMND CODE       */
         MVI   OCSWITCH(CMDOPCE),X'90'                          05S1016
*                   CMDOPCE->OCREQVAL=CNRNEGPL;/* SET NEG. POLL LIMIT*/
         MVC   OCREQVAL(1,CMDOPCE),CNRNEGPL(RCKPREC)            05S1017
*                   CNRFNPL=OFF;    /* TURN OFF FLAG IN CASE OF 05S1018
*                                      REDRIVE TO AVOID RESENDING    */
         NI    CNRFNPL(RCKPREC),B'11101111'                     05S1018
*                 END;                                          05S1019
*               ELSE                                            05S1020
*                 ;                 /* WAIT FOR REDRIVE TO GET ENOUGH
*                                      UNITS                         */
@RF01012 DS    0H                                               05S1021
*             END;                                              04S1021
*           IF CNRFCSL=ON THEN      /* IF CHANGE SESSION LIMIT CKPT'D*/
@RF01010 TM    CNRFCSL(RCKPREC),B'00001000'                     04S1022
         BNO   @RF01022                                         04S1022
*             DO;                                               04S1023
*                                                               05S1024
*               /*****************************************************/
*               /*                                                   */
*               /* PROCESS.SENDER.BLDER.BLDCHGSL: THIS SEGMENT BUILDS*/
*               /* A CHANGE SESSION LIMIT OPCE (FID1).               */
*               /*                                                   */
*               /*****************************************************/
*                                                               05S1024
*               IF OCBUFGOT>0 THEN  /* IF UNITS LEFT                 */
         CLC   OCBUFGOT(2,ROPCE),@CH00647                       05S1024
         BNH   @RF01024                                         05S1024
*                 DO;               /* BUILD CHANGE SESSION LIMIT
*                                      OPCE                          */
*                   CMDOPCE=OCUNIT; /* SET FIRST UNIT AS CMND OPCE   */
         L     CMDOPCE,OCUNIT(,ROPCE)                           05S1026
*                   CALL BLDFID1;   /* BUILD A BASIC FID1 OPCE       */
         BAL   @14,BLDFID1                                      05S1027
*                   CMDOPCE->OCSWITCH=OCCHGSL;/* SET CMND CODE       */
         MVI   OCSWITCH(CMDOPCE),X'80'                          05S1028
*                   CMDOPCE->OCREQVAL=CNRCSLIM;/* SESSION LIMIT      */
         MVC   OCREQVAL(1,CMDOPCE),CNRCSLIM(RCKPREC)            05S1029
*                   CNRFCSL=OFF;    /* TURN OFF FLAG IN CASE OF 05S1030
*                                      REDRIVE TO AVOID RESENDING    */
         NI    CNRFCSL(RCKPREC),B'11110111'                     05S1030
*                 END;                                          05S1031
*               ELSE                                            05S1032
*                 ;                 /* WAIT FOR REDRIVE TO GET ENOUGH
*                                      UNITS                         */
@RF01024 DS    0H                                               05S1033
*             END;                                              04S1033
*           IF CNRFCTL=ON THEN      /* IF BUILD TRANSMISSION LIMIT
*                                      CKPT'D                        */
@RF01022 TM    CNRFCTL(RCKPREC),B'00000100'                     04S1034
         BNO   @RF01034                                         04S1034
*             DO;                                               04S1035
*                                                               05S1036
*               /*****************************************************/
*               /*                                                   */
*               /* PROCESS.SENDER.BLDER.BLDCHGTL: THIS SEGMENT BUILDS*/
*               /* A CHANGE TRANSMISSION LIMIT OPCE (FID1).          */
*               /*                                                   */
*               /*****************************************************/
*                                                               05S1036
*               IF OCBUFGOT>0 THEN  /* IF UNITS LEFT                 */
         CLC   OCBUFGOT(2,ROPCE),@CH00647                       05S1036
         BNH   @RF01036                                         05S1036
*                 DO;               /* BUILD CHANGE TRANSMISSION
*                                      LIMIT OPCE                    */
*                   CMDOPCE=OCUNIT; /* SET FIRST UNIT AS CMD OPCE    */
         L     CMDOPCE,OCUNIT(,ROPCE)                           05S1038
*                   CALL BLDFID1;   /* BUILD A BASIC FID1 OPCE       */
         BAL   @14,BLDFID1                                      05S1039
*                   CMDOPCE->OCSWITCH=OCCHGTL;/* SET CMND CODE       */
         MVI   OCSWITCH(CMDOPCE),X'B0'                          05S1040
*                   CMDOPCE->OCREQVAL=CNRCTLIM;/* TRANSMISSION LIMIT */
         MVC   OCREQVAL(1,CMDOPCE),CNRCTLIM(RCKPREC)            05S1041
*                   CNRFCTL=OFF;    /* TURN OFF FLAG IN CASE OF 05S1042
*                                      REDRIVE TO AVOID RESENDING    */
         NI    CNRFCTL(RCKPREC),B'11111011'                     05S1042
*                 END;                                          05S1043
*               ELSE                                            05S1044
*                 ;                 /* WAIT FOR REDRIVE TO GET ENOUGH
*                                      UNITS                         */
@RF01036 DS    0H                                               05S1045
*             END;                                              04S1045
*           IF CNRFBHS=ON×CNRFBHSC=ON THEN/* IF BHSET CKPT'D @YM07411*/
@RF01034 TM    CNRFBHS(RCKPREC),B'11000000'                     04S1046
         BZ    @RF01046                                         04S1046
*             DO;                                               04S1047
*                                                               05S1048
*               /*****************************************************/
*               /*                                                   */
*               /* PROCESS.SENDER.BLDER.BLDBHS: THIS SEGMENT BUILDS A*/
*               /* BLOCK HANDLER SET OPCE - PACKED RU PAIR (FID0).   */
*               /*                                                   */
*               /*****************************************************/
*                                                               05S1048
*               RFY                                             05S1048
*                 IEDPRUQD BASED(OCUNIT);/* BASE PACKED RU ON OCUNIT
*                                      OF CMD OPCE                   */
*               IF OCBUFGOT>1 THEN  /* IF ENOUGH UNITS LEFT          */
         CLC   OCBUFGOT(2,ROPCE),@CH00061                       05S1049
         BNH   @RF01049                                         05S1049
*                 DO;                                           05S1050
*                   RFY                                         05S1051
*                     IEDQOPCE BASED(CMDOPCE);/* BASE ON PTR TO CMND
*                                      OPCE                          */
*                   CMDOPCE=ROPCE->OCUNIT;/* SET FIRST UNIT AS CMND
*                                      OPCE                          */
         L     CMDOPCE,OCUNIT(,ROPCE)                           05S1052
*                   CALL BLDFID0;   /* BUILD BASIC FID0              */
         BAL   @14,BLDFID0                                      05S1053
*                   BDUCMND=CD0CTRL;/* SET BDU COMMAND CODE          */
         L     @11,OCUNIT(,CMDOPCE)                             05S1054
         LA    @06,12                                           05S1054
         ALR   @06,@11                                          05S1054
         MVI   BDUCMND(@06),X'08'                               05S1054
*                   BDUMODIF=CD0CMBHS;/* SET BDU COMMAND MODIFIER    */
         MVI   BDUMODIF(@06),X'8D'                              05S1055
*                   OCSWITCH=OCSND1;/* COMMAND CODE IN OPCE          */
         MVI   OCSWITCH(CMDOPCE),X'F2'                          05S1056
*                   BDUTEXT(1:2)=CNRBHSET;/* MOVE BHSET DATA INTO
*                                      PACKED RU                     */
         MVC   BDUTEXT(2,@06),CNRBHSET(RCKPREC)                 05S1057
*                   IF CNRFBHSC=ON THEN                         05S1058
         TM    CNRFBHSC(RCKPREC),B'01000000'                    05S1058
         BNO   @RF01058                                         05S1058
*                     DO;           /* IF CHANGE BHSET       @YM07411*/
*                       PRUDATCT=LENGTH(IEDBDU)+2;/* INCLUDE FUNCTION
*                                      AND POS. IN TEXT              */
         MVC   PRUDATCT(2,@11),@CH00046                         05S1060
*                       BDUTEXT(1)=BDUTEXT(1)×'80'X;/* SET CHANGE
*                                      BHSET FUNCTION        @YM07713*/
         OI    BDUTEXT(@06),X'80'                               05S1061
*                       CNRFBHSC=OFF;/* RESET FLAGS FOR REDRIVE TO
*                                                            @YM07411*/
*                       CNRFBHS=OFF;/* AVOID RESENDING COMMANDS 05S1063
*                                                            @YM07713*/
         NI    CNRFBHSC(RCKPREC),B'00111111'                    05S1063
*                     END;          /*                       @YM07411*/
*                   ELSE                                        05S1065
*                     DO;           /* ACT OR DEACT BHSET FUNCTION
*                                                            @YM07411*/
         B     @RC01058                                         05S1065
@RF01058 DS    0H                                               05S1066
*                       PRUDATCT=LENGTH(IEDBDU)+1;/* A/D BHSET, 05S1066
*                                      INCLUDE FUNCTION BYTE         */
         L     @11,OCUNIT(,CMDOPCE)                             05S1066
         MVC   PRUDATCT(2,@11),@CH00583                         05S1066
*                       CNRFBHS=OFF;/* RESET FLAG FOR REDRIVE TO
*                                      AVOID RESENDING COMMAND  05S1067
*                                                            @YM07411*/
         NI    CNRFBHS(RCKPREC),B'01111111'                     05S1067
*                     END;          /*                       @YM07411*/
*                   CALL LISTADD;   /* ADD OPCE TO CHAIN FOR POST TO
*                                      AVTOPCOB                      */
@RC01058 BAL   @14,LISTADD                                      05S1069
*                   RFY                                         05S1070
*                     IEDQOPCE BASED(ROPCE);/* BASE ON CURRENT OPCE  */
*                 END;                                          05S1071
*               ELSE                                            05S1072
*                 ;                 /* WAIT FOR REDRIVE TO OBTAIN
*                                      ENOUGH UNITS                  */
@RF01049 DS    0H                                               05S1073
*               RFY                                             05S1073
*                 IEDPRUQD BASED;                               05S1073
*             END;                                              04S1074
*           IF CNRFMSS=ON THEN      /* IF MODEM SPEED SELECT CKPT'D  */
@RF01046 TM    CNRFMSS(RCKPREC),B'00000010'                     04S1075
         BNO   @RF01075                                         04S1075
*             DO;                                               04S1076
*                                                               05S1077
*               /*****************************************************/
*               /*                                                   */
*               /* PROCESS.SENDER.BLDER.BLDMSS: THIS SEGMENT BUILDS A*/
*               /* MODEM SPEED SELECT OPCE - PACKED RU PAIR (FID0).  */
*               /*                                                   */
*               /*****************************************************/
*                                                               05S1077
*               RFY                                             05S1077
*                 IEDPRUQD BASED(OCUNIT);/* BASE PACKED RU ON OCUNIT
*                                      OF CMDOPCE                    */
*               IF OCBUFGOT>1 THEN  /* IF ENOUGH UNITS LEFT          */
         CLC   OCBUFGOT(2,ROPCE),@CH00061                       05S1078
         BNH   @RF01078                                         05S1078
*                 DO;                                           05S1079
*                   RFY                                         05S1080
*                     IEDQOPCE BASED(CMDOPCE);/* BASE ON PTR TO CMND
*                                      OPCE                          */
*                   CMDOPCE=ROPCE->OCUNIT;/* SET FIRST UNIT AS CMND
*                                      OPCE                          */
         L     CMDOPCE,OCUNIT(,ROPCE)                           05S1081
*                   CALL BLDFID0;   /* BUILD BASIC FID0              */
         BAL   @14,BLDFID0                                      05S1082
*                   BDUCMND=CD0CTRL;/* SET BDU COMMAND CODE          */
         L     @11,OCUNIT(,CMDOPCE)                             05S1083
         LA    @06,12                                           05S1083
         ALR   @06,@11                                          05S1083
         MVI   BDUCMND(@06),X'08'                               05S1083
*                   BDUMODIF=CD0CCMS;/* SET BDU COMMAND MODIFIER     */
         MVI   BDUMODIF(@06),X'12'                              05S1084
*                   PRUDATCT=LENGTH(IEDBDU)+1;/* LENGTH OF PU DATA =
*                                      BDU + TEXT                    */
         MVC   PRUDATCT(2,@11),@CH00583                         05S1085
*                   BDUTEXT(1:1)=CNRMSSEL;/* SET SPEED SELECT IN TEXT
*                                      OF BDU                        */
         MVC   BDUTEXT(1,@06),CNRMSSEL(RCKPREC)                 05S1086
*                   OCSWITCH=OCSND2;/* COMMAND CODE IN OPCE          */
         MVI   OCSWITCH(CMDOPCE),X'F3'                          05S1087
*                   CNRFMSS=OFF;    /* RESET FLAG FOR REDRIVE TO
*                                      AVOID RESENDING CMND          */
         NI    CNRFMSS(RCKPREC),B'11111101'                     05S1088
*                   CALL LISTADD;   /* ADD THIS OPCE TO CHAIN FOR
*                                      POST TO AVTOPCOB              */
         BAL   @14,LISTADD                                      05S1089
*                   RFY                                         05S1090
*                     IEDQOPCE BASED(ROPCE);/* BASE ON CURRENT OPCE  */
*                 END;                                          05S1091
*               ELSE                                            05S1092
*                 ;                 /* WAIT FOR REDRIVE TO OBTAIN
*                                      ENOUGH UNITS                  */
@RF01078 DS    0H                                               05S1093
*               RFY                                             05S1093
*                 IEDPRUQD BASED;   /* RESET PACKED RU BASE          */
*             END;                                              04S1094
*           IF CNRFRDR=ON THEN      /* IF REPLACE DEVICE RECORD 04S1095
*                                      CKPT'D                        */
@RF01075 TM    CNRFRDR(RCKPREC),B'00000001'                     04S1095
         BNO   @RF01095                                         04S1095
*             DO;                                               04S1096
*                                                               05S1097
*               /*****************************************************/
*               /*                                                   */
*               /* PROCESS.SENDER.BLDER.BLDRDR: THIS SEGMENT BUILDS  */
*               /* THE COMMAND OPCE AND PACKED RU FOR THE CHANGE     */
*               /* DEVICE RECORD.                                    */
*               /*                                                   */
*               /*****************************************************/
*                                                               05S1097
*               RFY                                             05S1097
*                 IEDPRUQD BASED(OCUNIT);/* BASE PACKED RU ON OCUNIT
*                                      OF CMD OPCE                   */
*               IF OCBUFGOT=OCDVRDCT THEN/* IF ENOUGH UNITS LEFT TO
*                                      BUILD OPCE-RU                 */
         LH    @11,OCBUFGOT(,ROPCE)                             05S1098
         N     @11,@CF02618                                     05S1098
         CH    @11,OCDVRDCT(,ROPCE)                             05S1098
         BNE   @RF01098                                         05S1098
*                 DO;               /* BUILD OPCE AND RU             */
*                   CMDOPCE=OCUNIT; /* SET UNIT POINTED TO BY CKPT
*                                      OPCE AS CMD OPCE              */
         L     CMDOPCE,OCUNIT(,ROPCE)                           05S1100
*                   RFY                                         05S1101
*                     IEDQOPCE BASED(CMDOPCE);/* BASE ON CMD OPCE    */
*                   ROPCE->OCUNIT=PRUINTIC;/* DELINK UNITS           */
         MVC   OCUNIT(4,ROPCE),@CF01894                         05S1102
*                   CNRFRDR=OFF;    /* RESET FLAG                    */
         NI    CNRFRDR(RCKPREC),B'11111110'                     05S1103
*                   ROPCE->OCBUFGOT=''B;/* NO MORE UNITS             */
         SLR   @11,@11                                          05S1104
         STH   @11,OCBUFGOT(,ROPCE)                             05S1104
*                   CALL FID0;      /* BUILD BASIC FID0 COMMAND OPCE
*                                      AND PACKED RU                 */
         BAL   @14,FID0                                         05S1105
*                   OCDVRDCT=ROPCE->OCDVRDCT;/* SET NUMBER OF UNITS
*                                      FOR CMND                      */
         LH    @11,OCDVRDCT(,ROPCE)                             05S1106
         STH   @11,OCDVRDCT(,CMDOPCE)                           05S1106
*                   IEDPRUQD(1:8)=CNRDEVRC(1:8);/* MOVE IN FIRST 8
*                                      BYTES OF DEVICE RECORD PACKED
*                                      RU WHICH WAS CHECKPOINTED     */
         L     @11,OCUNIT(,CMDOPCE)                             05S1107
         MVC   IEDPRUQD(8,@11),CNRDEVRC(RCKPREC)                05S1107
*                   IEDPLMV=''B;    /* CLEAR PARM LIST FOR IEDMVBFR
*                                      ROUTINE                       */
         LA    @06,PARMLSP                                      05S1108
         XC    IEDPLMV(24,@06),IEDPLMV(@06)                     05S1108
*                   PLMVTU=ADDR(IEDPRUQD);/* SET TARGET UNIT ADDR    */
         ST    @11,PLMVTU(,@06)                                 05S1109
*                   PLMVTD=ADDR(PRUDATA);/* SET TARGET DATA ADDR     */
         LA    @15,PRUDATA(,@11)                                05S1110
         ST    @15,PLMVTD(,@06)                                 05S1110
*                   RFY                                         05S1111
*                     IEDPRUQD BASED(ADDR(CNRDEVRC));/* BASE ON 05S1111
*                                      DEVICE RECORD IN CKPT RESOURCE
*                                      RECORD                        */
*                   PLMVSU=ADDR(PRUDATA);/* SET SOURCE UNIT ADDR     */
         LA    @15,PRUDATA+19(,RCKPREC)                         05S1112
         ST    @15,PLMVSU(,@06)                                 05S1112
*                   RFY                                         05S1113
*                     IEDPRUQD BASED(OCUNIT);/* RESTORE BASE TO UNITS
*                                      OFF OPCE                      */
*                   PLMVSD=PLMVSU;  /* SOURCE DATA ADDR              */
         ST    @15,PLMVSD(,@06)                                 05S1114
*                   PLMVLNTH=PRUDATCT;/* LENGTH OF DATA TO BE MOVED  */
         LH    @11,PRUDATCT(,@11)                               05S1115
         STH   @11,PLMVLNTH(,@06)                               05S1115
*                   PLMVSCTG=ON;    /* SOURCE CONTIGUOUS FLAG        */
         OI    PLMVSCTG(@06),B'01000000'                        05S1116
*                   RFY                                         05S1117
*                     RPARM RSTD;   /* RESTRICT PARM LIST PTR FOR
*                                      CALL                          */
*                   RPARM=ADDR(PARMLSP);/* POINT TO PARM LIST        */
         LR    RPARM,@06                                        05S1118
*                   CALL IEDMVBFR;  /* MOVE IN DATA PORTION OF PACKED
*                                      RU                            */
         L     @11,AVTSAVTP(,RAVT)                              05S1119
         L     @15,SAVTMVBF(,@11)                               05S1119
         BALR  @14,@15                                          05S1119
*                   RFY                                         05S1120
*                     RPARM UNRSTD; /* FREE REG FOR USE              */
*                   CALL LISTADD;   /* ADD OPCE TO CHAIN FOR POST TO
*                                      AVTOPCOB                      */
         BAL   @14,LISTADD                                      05S1121
*                   RFY                                         05S1122
*                     IEDQOPCE BASED(ROPCE);/* BASE ON CURRENT OPCE
*                                                            @YM06639*/
*                 END;                                          05S1123
*               ELSE                                            05S1124
*                 ;                 /* WAIT FOR REDRIVE TO GET ENOUGH
*                                      UNITS                         */
@RF01098 DS    0H                                               05S1125
*               RFY                                             05S1125
*                 IEDPRUQD BASED;   /* RESET                         */
*             END;                                              04S1126
*           RFY                                                 04S1127
*             RPARM RSTD;                                       04S1127
@RF01095 DS    0H                                               04S1128
*           RPARM=ADDR(OPCAQCTL);   /* POINT TO AQCTL PARM LIST      */
         LA    RPARM,OPCAQCTL(,ROPCAVT)                         04S1128
*           SVC(102);                                           04S1129
         SVC   102                                              04S1129
*           RFY                                                 04S1130
*             RPARM UNRSTD;                                     04S1130
*           IF OCBUFNED>0 THEN      /* IF MORE UNITS STILL NEEDED    */
         CLC   OCBUFNED(2,ROPCE),@CH00647                       04S1131
         BNH   @RF01131                                         04S1131
*             DO;                   /* PUT OPCE ON REDRIVE CHAIN     */
*               OCREDRVE=ON;        /* SET REDRIVE FLAG              */
         OI    OCREDRVE(ROPCE),B'00010000'                      04S1133
*               OCWTG=THISMOD;      /* SET TO RETURN TO THIS MODULE
*                                      FROM REDRIVE PROCESSOR        */
         MVC   OCWTG(2,ROPCE),THISMOD                           04S1134
*               OCLINK=OPCBUFWT;    /* PLACE OPCE AT                 */
         L     @11,OPCBUFWT(,ROPCAVT)                           04S1135
         ST    @11,OCLINK(,ROPCE)                               04S1135
*               OPCBUFWT=ROPCE;     /* BEGINNING OF BUFFER WAIT CHAIN*/
         ST    ROPCE,OPCBUFWT(,ROPCAVT)                         04S1136
*               OPCMODID=CNTLMOD;   /* SET TO XCTL TO CONTROL MOD    */
         MVC   OPCMODID(2,ROPCAVT),CNTLMOD                      04S1137
*             END;                                              04S1138
*           ELSE                    /* REFORMAT OPCE TO SEND         */
*             DO;                   /* TO CHECKPOINT MODULE          */
         B     @RC01131                                         04S1139
@RF01131 DS    0H                                               04S1140
*               OCWTG=THISMOD;      /* SET TO RETURN TO THIS MOD FROM
*                                      CHECKPOINT                    */
         MVC   OCWTG(2,ROPCE),THISMOD                           04S1140
*               OPCMODID=CKPTMOD;   /* SET TO XCTL TO CHECKPOINT MOD.*/
         MVC   OPCMODID(2,ROPCAVT),CKPTMOD                      04S1141
*             END;                                              04S1142
*         END;                                                  03S1143
*       ELSE                                                    03S1144
*         ;                         /* NO CMNDS TO BUILD ON THIS PASS*/
@RF00994 DS    0H                                               03S1145
*     END;                                                      02S1145
@RC00994 DS    0H                                               02S1146
*                                                               02S1146
*   /*****************************************************************/
*   /*                                                               */
*   /* EPILOGUE: THIS SEGMENT COMPLETES THE EPILOGUE CODE THAT WAS   */
*   /* ALTERED BY THE MODULE PROCEDURE STATEMENT. THE XCTL SYSTEM    */
*   /* MACRO INSTRUCTION IS USED BY THIS SEGMENT TO TRANSFER CONTROL */
*   /* TO THE NEXT MODULE THAT IS TO BE EXECUTED.                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S1146
*   RFY                                                         02S1146
*     REG00 RSTD;                                               02S1146
@RC00881 DS    0H                                               02S1147
*   RFY                                                         02S1147
*     REG01 RSTD;                   /* RESTRICT THE ARGUMENT REGISTER
*                                      TO BE USED TO CONTAIN THE
*                                      POINTER TO THE OPERATOR  02S1147
*                                      CONTROL ADDRESS VECTOR TABLE
*                                      FROM USE BY THE COMPILER      */
*   IF OPCMODID=CNTLMOD THEN        /* IF XCTL IS TO IGC0010D        */
         CLC   OPCMODID(2,ROPCAVT),CNTLMOD                      02S1148
         BNE   @RF01148                                         02S1148
*     REG00=''B;                                                02S1149
         SLR   REG00,REG00                                      02S1149
*   REG01=ROPCAVT;                  /* SET THE ARGUMENT REGISTER IN
*                                      PREPARATION TO TRANSFERRING
*                                      CONTROL TO THE NEXT MODULE    */
@RF01148 LR    REG01,ROPCAVT                                    02S1150
*   GEN EXIT REFS(OPCXCTL,ROPCAVT) NOSEQFLOW SETS(REG15);       02S1151
*                                   /*
         XCTL  SF=(E,OPCXCTL(ROPCAVT)) TRANSFER CONTROL MACRO
*   RFY                                                         02S1152
*     REG00 UNRSTD;                                             02S1152
*   RFY                                                         02S1153
*     REG01 UNRSTD;                                             02S1153
*                                                               02S1154
*   /*****************************************************************/
*   /*                                                               */
*   /* BLDFID1: THIS INTERNAL PROCEDURE BUILDS A BASIC FID1 OPCE     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S1154
*BLDFID1:                                                       02S1154
*   PROC OPTIONS(RETREG,SAVE(14));                              02S1154
BLDFID1  ST    @14,@SA00002                                     02S1154
*   RFY                                                         02S1155
*     IEDQOPCE BASED(CMDOPCE);      /* BASE ON PTR TO CMND OPCE BEING
*                                      BUILT                         */
*   ROPCE->OCUNIT=OCUNIT;           /* DELINK FIRST UNIT HUNG OF
*                                      CURRENT OPCE                  */
         L     @11,OCUNIT(,CMDOPCE)                             02S1156
         ST    @11,OCUNIT(,ROPCE)                               02S1156
*   ROPCE->OCBUFGOT=ROPCE->OCBUFGOT-1;/* DECREMENT # OF UNITS GOT    */
         LH    @11,OCBUFGOT(,ROPCE)                             02S1157
         N     @11,@CF02618                                     02S1157
         BCTR  @11,0                                            02S1157
         STH   @11,OCBUFGOT(,ROPCE)                             02S1157
*   OCUNIT=PRUINTIC;                /* SET OCUNIT TO INVALID TIC     */
         MVC   OCUNIT(4,CMDOPCE),@CF01894                       02S1158
*   OCTRMTBL=CNRTNTOF;              /* TTCIN IN CKPT RESOURCE RECORD */
         LH    @11,CNRTNTOF(,RCKPREC)                           02S1159
         STH   @11,OCTRMTBL(,CMDOPCE)                           02S1159
*   OCPTRSAV=ROPCE->OCPTRSAV;       /* POINT TO ORIG. OPCE           */
         L     @11,OCPTRSAV(,ROPCE)                             02S1160
         ST    @11,OCPTRSAV(,CMDOPCE)                           02S1160
*   OCWTG=THISMOD;                  /* SET TO RETURN TO THIS MODULE
*                                      FROM RU DISP'ER               */
         MVC   OCWTG(2,CMDOPCE),THISMOD                         02S1161
*   OCACTREQ=ON;                    /* SET FLAG INDICATING A/D  02S1162
*                                      REQUEST                       */
         OI    OCACTREQ(CMDOPCE),B'00001000'                    02S1162
*   OCLINK=ADDR(AVTOPCOB);          /* SET QCB ADDR. FOR SVC 102     */
         LA    @11,AVTOPCOB(,RAVT)                              02S1163
         ST    @11,OCLINK(,CMDOPCE)                             02S1163
*   OCPRIFLG=OPRA0;                 /* SET FLAG SO OPCE ROUTED TO
*                                      SSCP BY CONTROL MOD           */
         MVI   OCPRIFLG(CMDOPCE),X'01'                          02S1164
*   OCELMPRI=PRIHIFLG;              /* SET POST PRIORITY             */
         MVI   OCELMPRI(CMDOPCE),X'E9'                          02S1165
*   CALL LISTADD;                   /* PLACE IN AQCTL PARM LIST      */
         BAL   @14,LISTADD                                      02S1166
*   RFY                                                         02S1167
*     IEDQOPCE BASED;                                           02S1167
*   END BLDFID1;                                                02S1168
@EL00002 DS    0H                                               02S1168
@EF00002 DS    0H                                               02S1168
@ER00002 L     @14,@SA00002                                     02S1168
         BR    @14                                              02S1168
*                                                               02S1169
*   /*****************************************************************/
*   /*                                                               */
*   /* BLDFID0: THIS SEGMENT CONTAINS THE INTERNAL PROCEDURE WHICH   */
*   /* DELINKS TWO UNITS AND CALLS THE ROUTINE TO BUILD THE BASIC    */
*   /* COMMAND OPCE AND PACKED RU.                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S1169
*BLDFID0:                                                       02S1169
*   PROC OPTIONS(RETREG,SAVE(14));                              02S1169
BLDFID0  ST    @14,@SA00003                                     02S1169
*   RFY                                                         02S1170
*     IEDQOPCE BASED(CMDOPCE);      /* DEFINE OPCE STRUCTURE ON CMND
*                                      OPCE                          */
*   RFY                                                         02S1171
*     IEDPRUQD BASED(OCUNIT);       /* OCUNIT OF CMND OPCE POINTS TO
*                                      PACKED RU                     */
*   ROPCE->OCUNIT=OCUNIT->OCUNIT;   /* DELINK 2 UNITS FOR OPCE AND RU*/
         L     @11,OCUNIT(,CMDOPCE)                             02S1172
         L     @06,OCUNIT(,@11)                                 02S1172
         ST    @06,OCUNIT(,ROPCE)                               02S1172
*   ROPCE->OCBUFGOT=ROPCE->OCBUFGOT-2;/* DECREMENT UNITS HAVE BY 2   */
         LH    @06,OCBUFGOT(,ROPCE)                             02S1173
         N     @06,@CF02618                                     02S1173
         BCTR  @06,0                                            02S1173
         BCTR  @06,0                                            02S1173
         STH   @06,OCBUFGOT(,ROPCE)                             02S1173
*   PRUTIC=PRUINTIC;                /* SET INVALID TIC IN PACKED RU  */
         MVC   PRUTIC(4,@11),@CB01894                           02S1174
*   CALL FID0;                      /* BUILD REMAINDER OF FID0  02S1175
*                                      COMMAND                       */
         BAL   @14,FID0                                         02S1175
*   RFY                                                         02S1176
*     IEDQOPCE BASED;                                           02S1176
*   RFY                                                         02S1177
*     IEDPRUQD BASED;                                           02S1177
*   END BLDFID0;                                                02S1178
@EL00003 DS    0H                                               02S1178
@EF00003 DS    0H                                               02S1178
@ER00003 L     @14,@SA00003                                     02S1178
         BR    @14                                              02S1178
*                                                               02S1179
*   /*****************************************************************/
*   /*                                                               */
*   /* FID0: THIS SEGMENT CONTAINS THE INTERNAL PROCEDURE WHICH      */
*   /* BUILDS THE BASIC FID0 COMMAND OPCE AND PACKED RU.             */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S1179
*FID0:                                                          02S1179
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                            02S1179
FID0     DS    0H                                               02S1180
*   RFY                                                         02S1180
*     RRET RSTD;                    /* RESTRICT REG WITH RETURN ADDR */
*   RFY                                                         02S1181
*     IEDQOPCE BASED(CMDOPCE);      /* DEFINE OPCE STRUCTURE ON CMND
*                                      OPCE                          */
*   RFY                                                         02S1182
*     IEDPRUQD BASED(OCUNIT);       /* OCUNIT OF CMND OPCE POINTS TO
*                                      PACKED RU                     */
*   OCTRMTBL=CNRTNTOF;              /* SET TTCIN OF RESOURCE IN CMD
*                                      OPCE                          */
         LH    @15,CNRTNTOF(,RCKPREC)                           02S1183
         STH   @15,OCTRMTBL(,CMDOPCE)                           02S1183
*   OCPTRSAV=ROPCE->OCPTRSAV;       /* COPY PTR TO ORIG OPCE FROM
*                                      CKPT OPCE                     */
         L     @11,OCPTRSAV(,ROPCE)                             02S1184
         ST    @11,OCPTRSAV(,CMDOPCE)                           02S1184
*   OCWTG=THISMOD;                  /* SET TO RETURN TO THIS MOD FROM
*                                      RU DISP'ER                    */
         MVC   OCWTG(2,CMDOPCE),THISMOD                         02S1185
*   OCACTREQ=ON;                    /* A/D REQUEST                   */
         OI    OCACTREQ(CMDOPCE),B'00001000'                    02S1186
*   OCLINK=ADDR(AVTOPCOB);          /* SET WITH QCB ADDR. FOR SVC 102*/
         LA    @11,AVTOPCOB(,RAVT)                              02S1187
         ST    @11,OCLINK(,CMDOPCE)                             02S1187
*   OCPRIFLG=OPR02;                 /* SET FLAG FOR CNTL MOD TO ROUTE
*                                      OPCE TO RU DISP'ER            */
         MVI   OCPRIFLG(CMDOPCE),X'08'                          02S1188
*   OCELMPRI=PRIMEDFG;              /* SET PRIORITY OF POST          */
         MVI   OCELMPRI(CMDOPCE),X'DF'                          02S1189
*   PRUTTCIN=CNRTNTOF;              /* SET TTCIN IN PACKED RU        */
         L     @11,OCUNIT(,CMDOPCE)                             02S1190
         STH   @15,PRUTTCIN(,@11)                               02S1190
*   PRURH=TRHFID0;                  /* SET RH IN NEG. PREFIX OF 02S1191
*                                      PACKED RU                     */
         SL    @11,@CF00046                                     02S1191
         MVC   PRURH(3,@11),@CB02186                            02S1191
*   PRUFIDN=TTH0BYT0;               /* SET TH INFO. IN PACKED RU     */
         MVI   PRUFIDN(@11),X'0C'                               02S1192
*   RFY                                                         02S1193
*     IEDPRUQD BASED;                                           02S1193
*   RFY                                                         02S1194
*     IEDQOPCE BASED;                                           02S1194
*   RFY                                                         02S1195
*     RRET UNRSTD;                                              02S1195
*   END FID0;                                                   02S1196
@EL00004 DS    0H                                               02S1196
@EF00004 DS    0H                                               02S1196
@ER00004 BR    @14                                              02S1196
*                                                               02S1197
*   /*****************************************************************/
*   /*                                                               */
*   /* LISTADD: THIS SEGMENT CONTAINS THE INTERNAL PROCEDURE WHICH   */
*   /* ADDS A COMMAND OPCE TO THE CHAIN FOR THE POST TO AVTOPCOB.    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S1197
*LISTADD:                                                       02S1197
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                            02S1197
LISTADD  DS    0H                                               02S1198
*   RFY                                                         02S1198
*     RRET RSTD;                    /* RESTRICT REG WITH RETURN ADDR */
*   RFY                                                         02S1199
*     IEDQOPCE BASED(CMDOPCE);      /* DEFINE OPCE STRUCTURE ON CMND
*                                      OPCE                          */
*   IF OPCAQFST=0 THEN              /* IF THIS IS THE FIRST OPCE TO
*                                      BE CHAINED                    */
         L     @15,OPCAQFST-1(,ROPCAVT)                         02S1200
         LA    @15,0(,@15)                                      02S1200
         LTR   @15,@15                                          02S1200
         BNZ   @RF01200                                         02S1200
*     OPCAQFST=CMDOPCE;             /* SET OPCE AS FIRST OPCE IN
*                                      CHAIN                         */
         STCM  CMDOPCE,7,OPCAQFST(ROPCAVT)                      02S1201
*   ELSE                                                        02S1202
*     OPCAQSEC->OCELMPTR=CMDOPCE;   /* CHAIN OPCE OFF LAST OPCE ON
*                                      CHAIN                         */
         B     @RC01200                                         02S1202
@RF01200 L     @15,OPCAQSEC-1(,ROPCAVT)                         02S1202
         STCM  CMDOPCE,7,OCELMPTR(@15)                          02S1202
*   OPCAQSEC=CMDOPCE;               /* SET OPCE AS LAST OPCE IN CHAIN*/
@RC01200 STCM  CMDOPCE,7,OPCAQSEC(ROPCAVT)                      02S1203
*   RFY                                                         02S1204
*     IEDQOPCE;                                                 02S1204
*   RFY                                                         02S1205
*     RRET UNRSTD;                                              02S1205
*   END LISTADD;                                                02S1206
@EL00005 DS    0H                                               02S1206
@EF00005 DS    0H                                               02S1206
@ER00005 BR    @14                                              02S1206
*   END IGCFF10D                                                01S1207
*                                                               01S1207
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (TAVTD   )                                       */
*/*%INCLUDE SYSLIB  (TBDUD   )                                       */
*/*%INCLUDE SYSLIB  (TCD0D   )                                       */
*/*%INCLUDE SYSLIB  (TCD1D   )                                       */
*/*%INCLUDE SYSLIB  (TCNRD   )                                       */
*/*%INCLUDE SYSLIB  (TNRAD   )                                       */
*/*%INCLUDE SYSLIB  (TOPCED  )                                       */
*/*%INCLUDE SYSLIB  (TOCTRD  )                                       */
*/*%INCLUDE SYSLIB  (TOPCAVTD)                                       */
*/*%INCLUDE SYSLIB  (TOPRED  )                                       */
*/*%INCLUDE SYSLIB  (TPLMVD  )                                       */
*/*%INCLUDE SYSLIB  (TPRIOR  )                                       */
*/*%INCLUDE SYSLIB  (TPRUD   )                                       */
*/*%INCLUDE SYSLIB  (TREQD   )                                       */
*/*%INCLUDE SYSLIB  (TRSPD   )                                       */
*/*%INCLUDE SYSLIB  (TRHD    )                                       */
*/*%INCLUDE SYSLIB  (TTRMD   )                                       */
*/*%INCLUDE SYSLIB  (TTHD    )                                       */
*/*%INCLUDE SYSUT5  (RFY     )                                       */
*/*%INCLUDE SYSUT5  (DCL     )                                       */
*/*%INCLUDE SYSUT5  (PROLOGUE)                                       */
*/*%INCLUDE SYSUT5  (PROCESS )                                       */
*/*%INCLUDE SYSUT5  (INITIAL )                                       */
*/*%INCLUDE SYSUT5  (RESPONSE)                                       */
*/*%INCLUDE SYSUT5  (START   )                                       */
*/*%INCLUDE SYSUT5  (SENDER  )                                       */
*/*%INCLUDE SYSUT5  (CHKR    )                                       */
*/*%INCLUDE SYSUT5  (CALCRDR )                                       */
*/*%INCLUDE SYSUT5  (GETBUFS )                                       */
*/*%INCLUDE SYSUT5  (BLDER   )                                       */
*/*%INCLUDE SYSUT5  (BLDCHSSP)                                       */
*/*%INCLUDE SYSUT5  (BLDCHGNP)                                       */
*/*%INCLUDE SYSUT5  (BLDCHGSL)                                       */
*/*%INCLUDE SYSUT5  (BLDCHGTL)                                       */
*/*%INCLUDE SYSUT5  (BLDBHS  )                                       */
*/*%INCLUDE SYSUT5  (BLDMSS  )                                       */
*/*%INCLUDE SYSUT5  (BLDRDR  )                                       */
*/*%INCLUDE SYSUT5  (EPILOGUE)                                       */
*/*%INCLUDE SYSUT5  (BLDFID1 )                                       */
*/*%INCLUDE SYSUT5  (BLDFID0 )                                       */
*/*%INCLUDE SYSUT5  (FID0    )                                       */
*/*%INCLUDE SYSUT5  (LISTADD )                                       */
*                                                               01S1207
*       ;                                                       01S1207
@DATA    DS    0H
@CH00647 DC    H'0'
@CH00583 DC    H'7'
@DATD    DSECT
         DS    0F
@SA00002 DS    1F
@SA00003 DS    1F
IGCFF10D CSECT
         DS    0F
@CF00061 DC    F'1'
@CH00061 EQU   @CF00061+2
@CF00132 DC    F'2'
@CF00046 DC    F'8'
@CH00046 EQU   @CF00046+2
@CF01894 DC    XL4'08000002'
@CF02618 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
PARMLSP  DS    CL24
FLAGS    DS    CL4
         ORG   FLAGS
OUTFLAG  DS    FL4
         ORG   FLAGS+4
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IGCFF10D CSECT
         NOPR  ((@ENDDATD-@DATD)/561*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CB01894 DC    X'08000002'
@CB02186 DC    X'0B8000'
         DS    CL1
ADPATCH  DC    XL104'0'
CNTLMOD  DC    CL2'00'
THISMOD  DC    CL2'FF'
CKPTMOD  DC    CL2'06'
RPNCPMOD DC    CL2'FJ'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
SIZE     EQU   @08
GETNO    EQU   @05
CMDOPCE  EQU   @05
COUNTER  EQU   @06
RCKPREC  EQU   @07
ROPCE    EQU   @03
ROPCAVT  EQU   @02
RAVT     EQU   @04
RTRM     EQU   @08
REG00    EQU   @00
RZERO    EQU   @00
REG01    EQU   @01
RPARM    EQU   @01
REG09    EQU   @09
REG10    EQU   @10
RWRKAREA EQU   @10
RSAVE    EQU   @13
RRET     EQU   @14
REG15    EQU   @15
RBRNCH   EQU   @15
RBASE    EQU   @12
REG02    EQU   @02
REG03    EQU   @03
REG04    EQU   @04
REG05    EQU   @05
REG06    EQU   @06
REG07    EQU   @07
REG08    EQU   @08
REG11    EQU   @11
REG13    EQU   @13
REG14    EQU   @14
RQCB     EQU   @07
IEDQAVTD EQU   0
AVTSAVEX EQU   IEDQAVTD+288
@NM00003 EQU   IEDQAVTD+388
AVTCKFLG EQU   @NM00003
AVTBASE  EQU   IEDQAVTD+412
AVTPKF   EQU   AVTBASE
AVTRNMPT EQU   IEDQAVTD+424
AVTNOLBF EQU   IEDQAVTD+454
AVTOSECB EQU   IEDQAVTD+492
AVTECB1  EQU   AVTOSECB
AVTHG02  EQU   IEDQAVTD+528
AVTDISP  EQU   IEDQAVTD+552
AVTHD    EQU   IEDQAVTD+556
AVTSCOPT EQU   AVTHD
AVTSAVTP EQU   IEDQAVTD+612
AVTSAVTF EQU   AVTSAVTP
AVTCKPEL EQU   IEDQAVTD+652
AVTCKRMV EQU   AVTCKPEL
AVTCKELF EQU   IEDQAVTD+680
AVTCKBYT EQU   IEDQAVTD+691
AVTHG01  EQU   IEDQAVTD+692
AVTCKLNK EQU   IEDQAVTD+696
AVTCRELE EQU   IEDQAVTD+708
AVTCCELE EQU   AVTCRELE
AVTCLRHI EQU   IEDQAVTD+716
AVTADBUF EQU   IEDQAVTD+720
AVTSYSER EQU   IEDQAVTD+728
AVTBFRFG EQU   IEDQAVTD+784
AVTCKPQB EQU   IEDQAVTD+804
AVTCKPTB EQU   AVTCKPQB
AVTCKPEC EQU   AVTCKPQB+4
AVTCKPCC EQU   AVTCKPEC
AVTOPCQB EQU   IEDQAVTD+816
AVTOPCOB EQU   AVTOPCQB
AVTOPCEC EQU   AVTOPCQB+4
AVTOPCCC EQU   AVTOPCEC
AVTOLTQB EQU   IEDQAVTD+828
AVTCWFL1 EQU   IEDQAVTD+924
AVTCWFL2 EQU   IEDQAVTD+925
AVTSUBT  EQU   IEDQAVTD+948
AVTIOTR  EQU   IEDQAVTD+949
AVTKEYLE EQU   IEDQAVTD+1032
AVTBIT1  EQU   IEDQAVTD+1050
AVTBIT2  EQU   IEDQAVTD+1051
AVTBIT3  EQU   IEDQAVTD+1052
AVTBIT4  EQU   IEDQAVTD+1136
@NM00085 EQU   IEDQAVTD+1232
IEDQAPTR EQU   0
IEDNSVTD EQU   0
SAVTDIAG EQU   IEDNSVTD
SAVTDIAF EQU   SAVTDIAG
SAVTLUSQ EQU   IEDNSVTD+88
SAVTMVBF EQU   IEDNSVTD+160
SAVTTCPU EQU   IEDNSVTD+238
SAVTZELM EQU   IEDNSVTD+270
SAVTRDRV EQU   IEDNSVTD+284
SAVTCKQB EQU   IEDNSVTD+300
SAVTCKTB EQU   SAVTCKQB
SAVTCKEC EQU   SAVTCKQB+4
SAVTCKCC EQU   SAVTCKEC
SAVTNETF EQU   IEDNSVTD+324
SAVTCDRV EQU   IEDNSVTD+332
IEDBDU   EQU   0
BDUCMND  EQU   IEDBDU
BDUMODIF EQU   IEDBDU+1
BDUFNFLG EQU   IEDBDU+2
BDUBDUFG EQU   IEDBDU+3
BDURSP   EQU   IEDBDU+4
BDUSYRSP EQU   BDURSP
BDUEXRSP EQU   BDURSP+1
BDUEND   EQU   IEDBDU+6
IEDQCNRD EQU   0
CNRTNTOF EQU   IEDQCNRD
CNRDATTM EQU   IEDQCNRD+2
CNRCNTL  EQU   IEDQCNRD+10
CNRFBHS  EQU   CNRCNTL
CNRFBHSC EQU   CNRCNTL
CNRFSSP  EQU   CNRCNTL
CNRFNPL  EQU   CNRCNTL
CNRFCSL  EQU   CNRCNTL
CNRFCTL  EQU   CNRCNTL
CNRFMSS  EQU   CNRCNTL
CNRFRDR  EQU   CNRCNTL
CNRBHSET EQU   IEDQCNRD+12
CNRBHFUN EQU   CNRBHSET
CNRSSPAU EQU   IEDQCNRD+14
CNRNEGPL EQU   IEDQCNRD+15
CNRCSLIM EQU   IEDQCNRD+16
CNRCTLIM EQU   IEDQCNRD+17
CNRMSSEL EQU   IEDQCNRD+18
CNRDEVRC EQU   IEDQCNRD+19
IEDNRA   EQU   0
NRACURR  EQU   IEDNRA
RNRA     EQU   0
IEDQOPCE EQU   0
OCLINK   EQU   IEDQOPCE
OCELEM   EQU   IEDQOPCE+4
OCELMPRI EQU   OCELEM
OCELMPTR EQU   OCELEM+1
OCUNIT   EQU   IEDQOPCE+8
OCRUDEST EQU   OCUNIT
OCCKPKEY EQU   OCRUDEST
OCSCAN   EQU   OCCKPKEY
@NM00111 EQU   OCRUDEST+1
OCUNITBF EQU   @NM00111+2
OCOPTCDE EQU   IEDQOPCE+12
OCPRIFLG EQU   OCOPTCDE
OCSWITCH EQU   IEDQOPCE+13
OCFLAG   EQU   IEDQOPCE+14
OCCIB    EQU   IEDQOPCE+16
OCMSTSAV EQU   OCCIB
OCDEST   EQU   OCMSTSAV
OCREQVAL EQU   OCDEST+1
OCTRMTBL EQU   IEDQOPCE+20
OCLINENO EQU   IEDQOPCE+22
OCTIOT   EQU   OCLINENO
OCWTGB   EQU   OCTIOT
OCTRUNIT EQU   IEDQOPCE+24
OCRSID   EQU   OCTRUNIT
OCALSTAT EQU   OCRSID
OCREDRVE EQU   OCALSTAT
OCACTREQ EQU   OCALSTAT
OCPARM   EQU   IEDQOPCE+28
OCRESNUM EQU   OCPARM
OCWTG    EQU   IEDQOPCE+30
OCBACKUP EQU   IEDQOPCE+32
OCBUFNED EQU   OCBACKUP
OCBUFGOT EQU   OCBACKUP+2
OCDVRDCT EQU   OCBACKUP+6
OCMODNME EQU   IEDQOPCE+40
OCIPLWA  EQU   OCMODNME
OCPTRSAV EQU   OCMODNME+4
OCCKDATA EQU   IEDQOPCE+48
OCRSTGTM EQU   OCCKDATA
OC379RRT EQU   OCRSTGTM
IEDQOPCN EQU   0
OCLDNME  EQU   IEDQOPCN
OCLINTTE EQU   OCLDNME
OCREQFLG EQU   OCLINTTE+2
OCPREFLG EQU   OCLINTTE+3
IEDOCTR  EQU   0
OCTRSW   EQU   IEDOCTR+13
OCTRRTE  EQU   IEDOCTR+14
OCTRRTN  EQU   IEDOCTR+15
IEDQOPCD EQU   0
OPCAVTPT EQU   IEDQOPCD+8
OPCCOPCE EQU   IEDQOPCD+12
OPCSAVE  EQU   IEDQOPCD+56
OPCWORK  EQU   IEDQOPCD+140
OPCAQCTL EQU   IEDQOPCD+180
OPCXCTL  EQU   IEDQOPCD+204
OPCLDNME EQU   IEDQOPCD+212
OPCMODID EQU   OPCLDNME+3
OPCGETBF EQU   IEDQOPCD+276
OPCFREBF EQU   IEDQOPCD+280
OPCSPEC  EQU   IEDQOPCD+300
OPCADGOT EQU   IEDQOPCD+318
OPCBUFWT EQU   IEDQOPCD+348
OPCDECR  EQU   IEDQOPCD+352
OPCPWCOB EQU   IEDQOPCD+368
OPCPWQCB EQU   OPCPWCOB
OPCPWECB EQU   OPCPWCOB+4
OPCSESS  EQU   IEDQOPCD+384
OPCPCID  EQU   IEDQOPCD+456
OPCUNIQP EQU   OPCPCID+2
OPCSESSF EQU   IEDQOPCD+464
OPCBLIN  EQU   OPCSESSF
IEDOPRED EQU   0
OPRESAVE EQU   IEDOPRED+8
OPRETIC  EQU   OPRESAVE
OPRVTCHK EQU   OPRETIC+3
OPREFLG3 EQU   IEDOPRED+14
IEDPLMV  EQU   0
PLMVTU   EQU   IEDPLMV
PLMVTD   EQU   IEDPLMV+4
PLMVSU   EQU   IEDPLMV+8
PLMVSD   EQU   IEDPLMV+12
PLMVLNTH EQU   IEDPLMV+16
PLMVFLGS EQU   IEDPLMV+18
PLMVFLG1 EQU   PLMVFLGS
PLMVSCTG EQU   PLMVFLG1
IEDPLMVP EQU   0
IEDPRUQD EQU   0
PRUTTCIN EQU   IEDPRUQD
PRUDATCT EQU   IEDPRUQD+2
PRUTIC   EQU   IEDPRUQD+8
PRUNUNIT EQU   PRUTIC+1
PRUVTCHK EQU   PRUNUNIT+2
PRUDATA  EQU   IEDPRUQD+12
IEDPRUQP EQU   0
IEDPRUND EQU   0
PRURHTH  EQU   IEDPRUND
PRURH    EQU   PRURHTH
PRURHFG0 EQU   PRURH
PRURHFG1 EQU   PRURH+1
PRURHFG2 EQU   PRURH+2
PRUTH    EQU   PRURHTH+3
PRUFIDN  EQU   PRUTH
IEDREQD  EQU   0
REQROUTE EQU   IEDREQD+12
REQRCDS  EQU   IEDREQD+14
REQDATA  EQU   IEDREQD+16
IEDRH    EQU   0
TRHBYTE0 EQU   IEDRH
TRHBYTE1 EQU   IEDRH+1
TRHBYTE2 EQU   IEDRH+2
IEDQTRM  EQU   0
TRMSTATE EQU   IEDQTRM
TRMLOG   EQU   TRMSTATE
TRMDESTQ EQU   IEDQTRM+1
TRMRSTRT EQU   TRMDESTQ+2
TRMINSEQ EQU   IEDQTRM+4
TLISTCNT EQU   TRMINSEQ
TRMSESCT EQU   TLISTCNT
TRMOUTSQ EQU   IEDQTRM+6
TLISTEN  EQU   TRMOUTSQ
TRMDSORG EQU   TLISTEN
TRMPLIM  EQU   TLISTEN+1
TRMALTD  EQU   IEDQTRM+8
TRMPRILK EQU   TRMALTD
TRMDEVFL EQU   IEDQTRM+10
TRMADDC  EQU   TRMDEVFL
TRMNCPI  EQU   TRMDEVFL+1
TRMSTAT  EQU   IEDQTRM+12
TRMSIO   EQU   TRMSTAT
TRMOWNER EQU   TRMSIO
IEDQTPTR EQU   0
IEDNTRM  EQU   0
TRMINDEX EQU   IEDNTRM
TRMCOHTG EQU   IEDNTRM+2
TRMBYTE6 EQU   TRMCOHTG
TRMCDF0  EQU   TRMBYTE6
TRMBYTE5 EQU   TRMCOHTG+1
TRMBYTE4 EQU   IEDNTRM+4
TRMBYTE3 EQU   IEDNTRM+5
TRMBYTE2 EQU   IEDNTRM+6
TRMINPG  EQU   TRMBYTE2
TRMBYTE1 EQU   IEDNTRM+7
TRMSCPRQ EQU   TRMBYTE1
TRMBYTE0 EQU   IEDNTRM+10
TRMNOWCD EQU   TRMBYTE0
TRMSIBPT EQU   IEDNTRM+11
TRMLTRAC EQU   TRMSIBPT
TRMRLMCT EQU   IEDNTRM+14
TRMLGBST EQU   TRMRLMCT
IEDTH    EQU   0
TTHBYTE0 EQU   IEDTH
TTHSNF   EQU   IEDTH+6
TTHTAG   EQU   TTHSNF
TTHTAG1  EQU   TTHTAG
ALLOCBUF EQU   0
DECRCT   EQU   0
FREEBUFF EQU   0
IEDMVBFR EQU   0
IEDQTNT  EQU   0
BDUTEXT  EQU   BDUEND
@NM00120 EQU   OCCIB
@NM00121 EQU   @NM00120+1
OCCKPKY1 EQU   OCCKPKEY
OCCKPTYP EQU   OCCKPKY1
OCICACTN EQU   OCMODNME
OCICDADR EQU   OCICACTN
OCICSW   EQU   OCICDADR+3
OCFID0   EQU   OCMODNME
OCFID01  EQU   OCBACKUP
@NM00126 EQU   OCCKDATA
OCMSGFLG EQU   OCPREFLG
OCBKUP1  EQU   OCMODNME
@NM00131 EQU   OCMODNME
OCBKUP2  EQU   OCCKDATA
OCBKUP3  EQU   OCLDNME
OCRESPTR EQU   OCBKUP3+4
OCDIALLN EQU   OCRESPTR
OCIPLDMP EQU   OCLDNME+4
OPCAQWD  EQU   OPCAQCTL
OPCAQWD1 EQU   OPCAQWD
OPCAQREQ EQU   OPCAQWD1
OPCAQFST EQU   OPCAQWD1+1
OPCAQWD2 EQU   OPCAQWD+4
OPCAQSEC EQU   OPCAQWD2+1
OPCAQWD3 EQU   OPCAQWD+8
REQLDATA EQU   REQDATA
REQSDATA EQU   REQDATA
@NM00181 EQU   REQDATA
REQDATA1 EQU   @NM00181+4
@NM00182 EQU   REQDATA
REQDATA2 EQU   @NM00182+8
@NM00183 EQU   REQDATA1
@NM00184 EQU   REQDATA1
REQCDE   EQU   @NM00184
@NM00185 EQU   REQDATA2
REQSTFLG EQU   @NM00185
REQSTALL EQU   REQSTFLG
@NM00188 EQU   REQDATA1
REQHIPRT EQU   @NM00188+6
REQHIPRP EQU   @NM00188+12
REQHIAR  EQU   @NM00188+16
@NM00190 EQU   REQHIAR
REQHILSP EQU   @NM00190+4
@NM00191 EQU   REQHIAR
@NM00192 EQU   REQHIAR
@NM00193 EQU   REQDATA1
REQTPMA  EQU   @NM00193
@NM00194 EQU   REQDATA1
TRMDIALQ EQU   TRMPLIM
@NM00209 EQU   TRMSTATE
TRMCDFD0 EQU   TRMBYTE5
TRMPRE1  EQU   TRMBYTE4
TRMNCP1  EQU   TRMBYTE4
TRMLU1   EQU   TRMBYTE4
TRMLINK1 EQU   TRMBYTE4
TRMDCONS EQU   TRMLINK1
TRMPRE   EQU   TRMBYTE3
TRMNCP   EQU   TRMBYTE3
TRMPU    EQU   TRMBYTE3
TRMLU    EQU   TRMBYTE3
TRMCDMGR EQU   TRMBYTE3
TRMLINK  EQU   TRMBYTE3
TICFLD   EQU   OCUNIT
TIC      EQU   TICFLD+3
OCLINRRT EQU   OCTRUNIT
OCPCID   EQU   OCBACKUP
OCRSNCDE EQU   OCALSTAT
TRMOPT   EQU   IEDQTRM+20
TRMPOOLP EQU   TRMINSEQ
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00229 EQU   TICFLD
TRMLDISC EQU   TRMLINK
@NM00226 EQU   TRMLINK
TRMLALOC EQU   TRMLINK
TRMLSTAT EQU   TRMLINK
TRMLINT  EQU   TRMLINK
TRMEPMOD EQU   TRMLINK
TRMCDLOG EQU   TRMCDMGR
@NM00225 EQU   TRMCDMGR
@NM00224 EQU   TRMCDMGR
@NM00223 EQU   TRMCDMGR
@NM00222 EQU   TRMCDMGR
@NM00221 EQU   TRMCDMGR
TRMBKDUP EQU   TRMCDMGR
TRMLULOG EQU   TRMLU
@NM00220 EQU   TRMLU
@NM00219 EQU   TRMLU
@NM00218 EQU   TRMLU
TRMTDIFF EQU   TRMLU
@NM00217 EQU   TRMLU
@NM00216 EQU   TRMLU
TRMAUTO  EQU   TRMLU
TRMPCONT EQU   TRMPU
TRMPDOCQ EQU   TRMPU
TRMPULOC EQU   TRMPU
TRMPDNAS EQU   TRMPU
TRMPALOC EQU   TRMPU
TRMNCONT EQU   TRMNCP
TRMQUCKN EQU   TRMNCP
TRMSLOWN EQU   TRMNCP
TRMSYGEN EQU   TRMNCP
TRMNCPCL EQU   TRMNCP
TRMIPLDM EQU   TRMNCP
TRMINOUT EQU   TRMPRE
TRMRDOUT EQU   TRMPRE
TRMNLOUT EQU   TRMPRE
TRMWROUT EQU   TRMPRE
TRMASNXI EQU   TRMPRE
TRMSTMM  EQU   TRMPRE
TRMCMODE EQU   TRMPRE
TRMSTPND EQU   TRMPRE
TRMNCPLK EQU   TRMLINK1
@NM00215 EQU   TRMLINK1
TRMDCONN EQU   TRMDCONS
TRMDCOP  EQU   TRMDCONS
TRMPMARY EQU   TRMLU1
@NM00214 EQU   TRMLU1
@NM00213 EQU   TRMLU1
TRMCDSRQ EQU   TRMLU1
TRMLSCVP EQU   TRMLU1
@NM00212 EQU   TRMLU1
@NM00211 EQU   TRMNCP1
TRMANS   EQU   TRMNCP1
TRMLINOP EQU   TRMNCP1
TRMINOP  EQU   TRMNCP1
TRMLYNCH EQU   TRMPRE1
TRMSPOUT EQU   TRMPRE1
TRMERLCK EQU   TRMPRE1
TRMQNPL  EQU   TRMPRE1
TRMSPACT EQU   TRMPRE1
TRMOCNI  EQU   TRMPRE1
TRMSESSN EQU   TRMPRE1
TRMCONT  EQU   TRMPRE1
TRMINERR EQU   TRMCDFD0
TRMLUTM  EQU   TRMCDFD0
TRMLUIT  EQU   TRMCDFD0
TRMLUREQ EQU   TRMCDFD0
TRMCDPRE EQU   TRMCDFD0
TRMWASCD EQU   TRMCDFD0
TRMSRPFG EQU   TRMCDFD0
TRMSESRQ EQU   TRMCDFD0
@NM00210 EQU   @NM00209
TRMENTRY EQU   @NM00209
TRMSRPTR EQU   TRMDIALQ
REQOPCPT EQU   @NM00194
REQTPMT  EQU   REQTPMA+2
REQTPMI  EQU   REQTPMA
REQHISAP EQU   @NM00192+8
REQHISRP EQU   @NM00192+4
REQHISAT EQU   @NM00192+2
REQHISRT EQU   @NM00192
REQHIRRP EQU   @NM00191
REQHITRT EQU   @NM00190+8
REQHIOSP EQU   REQHILSP
REQHITRP EQU   @NM00190
REQHIAPP EQU   REQHIPRP
REQHIRSP EQU   @NM00188+8
REQHIAPT EQU   REQHIPRT
REQHIRST EQU   @NM00188+4
@NM00189 EQU   @NM00188+1
REQHITYP EQU   @NM00188
REQPUCPB EQU   @NM00185+8
REQPUBFR EQU   @NM00185+4
REQFRCPB EQU   @NM00185+2
@NM00187 EQU   @NM00185+1
@NM00186 EQU   REQSTFLG
REQSTBFR EQU   REQSTALL
REQSTCPB EQU   REQSTALL
REQSTCLR EQU   REQSTFLG
REQCDEA2 EQU   @NM00184+8
REQCDEA1 EQU   @NM00184+4
REQCDENA EQU   REQCDE+2
REQCDEIN EQU   REQCDE
REQUPTYP EQU   @NM00183+32
REQTTEP1 EQU   @NM00183+28
REQSIT2  EQU   @NM00183+24
REQNAME2 EQU   @NM00183+16
REQSIT1  EQU   @NM00183+12
REQNAME1 EQU   @NM00183+4
REQTNT2  EQU   @NM00183+2
REQTNT1  EQU   @NM00183
REQNAME  EQU   @NM00182
REQRTN   EQU   @NM00181
REQSTNT  EQU   REQSDATA+4
REQSTTE  EQU   REQSDATA
REQLSIBX EQU   REQLDATA+2
REQLTNT  EQU   REQLDATA
OPCAQLST EQU   OPCAQWD3+1
OPCAQRQ3 EQU   OPCAQWD3
OPCAQRQ2 EQU   OPCAQWD2
@NM00134 EQU   OCIPLDMP
OCACTRQ  EQU   OCIPLDMP
OCDACRQ  EQU   OCIPLDMP
OCIPLRQ  EQU   OCIPLDMP
OCDMPRQ  EQU   OCIPLDMP
@NM00133 EQU   OCRESPTR+2
OCOHNATA EQU   OCDIALLN
OCRRTPTR EQU   OCBKUP3
@NM00132 EQU   OCBKUP2+4
OCNHITTC EQU   OCBKUP2+2
OCLINTTC EQU   OCBKUP2
OCCSIB   EQU   @NM00131
@NM00130 EQU   OCBKUP1+6
OCTARTTC EQU   OCBKUP1+4
OCSRTTC  EQU   OCBKUP1+2
OCRSTTC  EQU   OCBKUP1
@NM00129 EQU   OCMSGFLG
OCRRT    EQU   OCMSGFLG
OCNAME   EQU   OCMSGFLG
OCLU1TTE EQU   @NM00126+4
OCLU2TTI EQU   @NM00126+2
OCLU1TTI EQU   @NM00126
OCSLUTNT EQU   OCFID01+6
OCPLUTNT EQU   OCFID01+4
OCBIADDR EQU   OCFID01
OCSRCED  EQU   OCFID0+4
OCSRCEU  EQU   OCFID0
OCICINAC EQU   OCICSW
@NM00125 EQU   OCICSW
OCICATST EQU   OCICDADR+1
OCICTYPE EQU   OCICDADR
@NM00124 EQU   OCCKPKY1
OCCKPENV EQU   OCCKPKY1
OCCKPRST EQU   OCCKPTYP
OCCKPNCP EQU   OCCKPTYP
OCCKPINC EQU   OCCKPTYP
@NM00123 EQU   @NM00120+2
@NM00122 EQU   @NM00121
OCTSTAT  EQU   @NM00121
OCREASON EQU   @NM00120
TTHDCF   EQU   IEDTH+8
TTHTAG2  EQU   TTHTAG+1
@NM00228 EQU   TTHTAG1
TTHTAGS  EQU   TTHTAG1
TTHOAF   EQU   IEDTH+4
TTHDAF   EQU   IEDTH+2
TTHBYTE1 EQU   IEDTH+1
TTHEFI   EQU   TTHBYTE0
@NM00227 EQU   TTHBYTE0
TTHEBIU  EQU   TTHBYTE0
TTHBBIU  EQU   TTHBYTE0
TTHFTYPE EQU   TTHBYTE0
TRMSUBST EQU   IEDNTRM+16
TRMTYPE  EQU   IEDNTRM+15
TRMPRIME EQU   TRMLGBST
TRMOWNR  EQU   TRMLTRAC+1
TRMGPCNT EQU   TRMLTRAC
TRMBUFRD EQU   TRMBYTE0
TRMSNA   EQU   TRMBYTE0
TRMGP    EQU   TRMBYTE0
TRMDIAL  EQU   TRMBYTE0
TRMACDC  EQU   TRMNOWCD
TRMOUTPT EQU   TRMBYTE0
TRMINPUT EQU   TRMBYTE0
TRMUDEF  EQU   TRMBYTE0
TRMCOHRT EQU   IEDNTRM+8
TRMSTOTE EQU   TRMBYTE1
TRMCKPRN EQU   TRMBYTE1
TRMTSATN EQU   TRMBYTE1
TRMTRACE EQU   TRMBYTE1
TRMSWBCK EQU   TRMBYTE1
TRMAUTOC EQU   TRMBYTE1
TRMINPTP EQU   TRMBYTE1
TRMWTNEG EQU   TRMSCPRQ
TRMWRBRK EQU   TRMBYTE2
TRMNOSND EQU   TRMBYTE2
TRMPREP  EQU   TRMBYTE2
TRMGPACT EQU   TRMBYTE2
TRMANDL  EQU   TRMBYTE2
TRMCLOSN EQU   TRMINPG
TRMREMB  EQU   TRMBYTE2
TRMRSACT EQU   TRMBYTE2
@NM00208 EQU   TRMCDF0
TRMPURGE EQU   TRMCDF0
TRMCDST  EQU   TRMINDEX
TRMOPTBL EQU   IEDQTRM+18
TRMOPNO  EQU   IEDQTRM+17
TRMCHCIN EQU   IEDQTRM+16
TRMSENSE EQU   TRMSTAT+3
TRMTEMPR EQU   TRMSTAT+2
TRMNADDR EQU   TRMOWNER
@NM00207 EQU   TRMDEVFL+1
TRMTPIN  EQU   TRMDEVFL+1
@NM00206 EQU   TRMNCPI
TRMRNTRM EQU   TRMDEVFL+1
@NM00205 EQU   TRMDEVFL+1
TRMLMD   EQU   TRMDEVFL+1
TRMCONC  EQU   TRMDEVFL+1
TRMTSOB  EQU   TRMDEVFL
TRMBFDY  EQU   TRMDEVFL
TRMTBLK  EQU   TRMDEVFL
TRMSBLK  EQU   TRMDEVFL
TRMBLKS  EQU   TRMDEVFL
TRMSCV   EQU   TRMADDC
TRMDDIG  EQU   TRMDEVFL
TRMBUFS  EQU   TRMDEVFL
TRMSTEAL EQU   TRMPRILK
TRMLGB   EQU   TRMDSORG
TRMUTERM EQU   TRMSESCT
TRMVERIF EQU   TRMRSTRT
@NM00204 EQU   TRMRSTRT
@NM00203 EQU   TRMDESTQ
TRMSCNYN EQU   TRMSTATE
TRMOPTFN EQU   TRMSTATE
TRMHELDN EQU   TRMSTATE
TRMACPTN EQU   TRMSTATE
TRMPREF  EQU   TRMSTATE
TRMPROC  EQU   TRMLOG
TRMLIST  EQU   TRMLOG
TRMLINE  EQU   TRMSTATE
@NM00202 EQU   TRHBYTE2
@NM00201 EQU   TRHBYTE2
@NM00200 EQU   TRHBYTE2
TRHCSI   EQU   TRHBYTE2
@NM00199 EQU   TRHBYTE2
TRHCDI   EQU   TRHBYTE2
TRHEB    EQU   TRHBYTE2
TRHBB    EQU   TRHBYTE2
TRHPI    EQU   TRHBYTE1
TRHQRI   EQU   TRHBYTE1
@NM00198 EQU   TRHBYTE1
@NM00197 EQU   TRHBYTE1
TRHER    EQU   TRHBYTE1
TRHDR2   EQU   TRHBYTE1
@NM00196 EQU   TRHBYTE1
TRHDR1   EQU   TRHBYTE1
TRHEC    EQU   TRHBYTE0
TRHBC    EQU   TRHBYTE0
TRHSDI   EQU   TRHBYTE0
TRHFI    EQU   TRHBYTE0
@NM00195 EQU   TRHBYTE0
TRHRUCAT EQU   TRHBYTE0
TRHTYPE  EQU   TRHBYTE0
REQRCD2  EQU   REQRCDS+1
REQRCD1  EQU   REQRCDS
REQSWTCH EQU   REQROUTE+1
REQFLAG  EQU   REQROUTE
REQRQCBA EQU   IEDREQD+9
REQRPRI  EQU   IEDREQD+8
REQLINK  EQU   IEDREQD+5
REQPRI   EQU   IEDREQD+4
REQQCBA  EQU   IEDREQD+1
REQTYPE  EQU   IEDREQD
@NM00180 EQU   IEDPRUND+4
PRUTHEFI EQU   PRUFIDN
PRUTHUSS EQU   PRUFIDN
PRUTHEIU EQU   PRUFIDN
PRUTHBIU EQU   PRUFIDN
PRUTHTYE EQU   PRUFIDN
@NM00179 EQU   PRURHFG2
PRURHCSI EQU   PRURHFG2
@NM00178 EQU   PRURHFG2
PRURHCDI EQU   PRURHFG2
PRURHEB  EQU   PRURHFG2
PRURHBB  EQU   PRURHFG2
PRURHPI  EQU   PRURHFG1
@NM00177 EQU   PRURHFG1
PRURHER  EQU   PRURHFG1
PRURHDR2 EQU   PRURHFG1
@NM00176 EQU   PRURHFG1
PRURHDR1 EQU   PRURHFG1
PRURHEC  EQU   PRURHFG0
PRURHBC  EQU   PRURHFG0
PRURHSDI EQU   PRURHFG0
PRURHFI  EQU   PRURHFG0
@NM00175 EQU   PRURHFG0
PRURUCAT EQU   PRURHFG0
PRURHTYP EQU   PRURHFG0
@NM00174 EQU   PRUVTCHK
PRUITSET EQU   PRUVTCHK
@NM00173 EQU   PRUVTCHK
@NM00172 EQU   PRUNUNIT
@NM00171 EQU   PRUTIC
@NM00170 EQU   IEDPRUQD+4
PLMVUNCA EQU   IEDPLMV+20
PLMVFLG2 EQU   PLMVFLGS+1
@NM00169 EQU   PLMVFLG1
PLMVTSKP EQU   PLMVFLG1
PLMVSSKP EQU   PLMVFLG1
PLMVTCTG EQU   PLMVFLG1
PLMVUNCF EQU   PLMVFLG1
@NM00168 EQU   OPREFLG3
OPREATCH EQU   OPREFLG3
@NM00167 EQU   OPREFLG3
OPREFLG2 EQU   IEDOPRED+13
OPREFLG1 EQU   IEDOPRED+12
@NM00166 EQU   OPRVTCHK
OPRITSET EQU   OPRVTCHK
@NM00165 EQU   OPRVTCHK
@NM00164 EQU   OPRETIC
OPRELINK EQU   IEDOPRED+5
OPREPRI  EQU   IEDOPRED+4
OPREQCB  EQU   IEDOPRED+1
OPREKEY  EQU   IEDOPRED
OPCBOTTM EQU   IEDQOPCD+1276
OPCDSRWT EQU   IEDQOPCD+1272
@NM00163 EQU   IEDQOPCD+1188
@NM00162 EQU   IEDQOPCD+1036
@NM00161 EQU   IEDQOPCD+1028
@NM00160 EQU   IEDQOPCD+468
OPCLSABC EQU   IEDQOPCD+466
@NM00159 EQU   IEDQOPCD+465
@NM00158 EQU   OPCBLIN
OPCBLDSC EQU   OPCBLIN
OPCUNIQV EQU   OPCUNIQP+2
OPCUNIQU EQU   OPCUNIQP
OPCOSSCP EQU   OPCPCID
OPCSDUPU EQU   IEDQOPCD+452
OPCSDULU EQU   IEDQOPCD+448
OPCSDRVT EQU   IEDQOPCD+444
OPCSDRET EQU   IEDQOPCD+440
OPCSDHSY EQU   IEDQOPCD+436
OPCSDENQ EQU   IEDQOPCD+432
OPCSDDIA EQU   IEDQOPCD+428
OPCSDCIS EQU   IEDQOPCD+424
OPCSDBIS EQU   IEDQOPCD+420
OPCSDAPU EQU   IEDQOPCD+416
OPCSDALU EQU   IEDQOPCD+412
OPCCSKEY EQU   IEDQOPCD+408
OPCSSKEY EQU   IEDQOPCD+404
OPCPRTTE EQU   IEDQOPCD+400
OPCLU2TT EQU   OPCSESS+14
OPCLU1TT EQU   OPCSESS+12
OPCSENSE EQU   OPCSESS+8
OPCCSIB  EQU   OPCSESS+4
OPCCTTE  EQU   OPCSESS
OPCGTSIB EQU   IEDQOPCD+380
@NM00157 EQU   OPCPWCOB+9
@NM00156 EQU   OPCPWCOB+8
@NM00155 EQU   OPCPWECB+1
OPCPWCCC EQU   OPCPWECB
OPCPWCHN EQU   OPCPWQCB+1
OPCPWVTO EQU   OPCPWQCB
OPCWAITV EQU   IEDQOPCD+364
OPCTOTCK EQU   IEDQOPCD+360
OPCAPXTL EQU   IEDQOPCD+356
OPCWRKSP EQU   IEDQOPCD+320
OPCRQCNT EQU   IEDQOPCD+316
OPPOLSTP EQU   IEDQOPCD+312
OPCCKCIB EQU   IEDQOPCD+308
OPCEND   EQU   IEDQOPCD+307
OPCSTCBS EQU   IEDQOPCD+306
OPCHNEND EQU   IEDQOPCD+302
OPCOQSW  EQU   IEDQOPCD+301
@NM00154 EQU   OPCSPEC
@NM00153 EQU   OPCSPEC
@NM00152 EQU   OPCSPEC
@NM00151 EQU   OPCSPEC
OPCFRMCA EQU   OPCSPEC
OPCRSTRT EQU   OPCSPEC
OPCPART  EQU   OPCSPEC
OPCALTD  EQU   OPCSPEC
OPCBFEND EQU   IEDQOPCD+296
OPCBFIRS EQU   IEDQOPCD+292
OPCAVBUF EQU   IEDQOPCD+290
OPCIPLCT EQU   IEDQOPCD+289
OPCCLNTS EQU   IEDQOPCD+288
OPCHA8   EQU   IEDQOPCD+286
OPCBFREQ EQU   IEDQOPCD+284
OPCNEXT  EQU   IEDQOPCD+272
OPCFMDFC EQU   IEDQOPCD+268
OPCSCNC  EQU   IEDQOPCD+264
OPCHORTG EQU   IEDQOPCD+260
OPCHORT  EQU   IEDQOPCD+256
OPCCKPTL EQU   IEDQOPCD+252
OPCCKPTF EQU   IEDQOPCD+248
OPCWAITA EQU   IEDQOPCD+244
OPCWAITR EQU   IEDQOPCD+240
OPCWAITP EQU   IEDQOPCD+236
OPCWAITO EQU   IEDQOPCD+232
OPCWAITN EQU   IEDQOPCD+228
OPCWAITL EQU   IEDQOPCD+224
OPCWAITC EQU   IEDQOPCD+220
@NM00150 EQU   OPCLDNME+5
@NM00149 EQU   OPCLDNME
OPCWAIT  EQU   IEDQOPCD+192
OPCCKERB EQU   IEDQOPCD+164
OPCBFERB EQU   IEDQOPCD+148
OPCFLAG2 EQU   IEDQOPCD+147
OPCFLAG1 EQU   IEDQOPCD+146
OPCWRKSZ EQU   IEDQOPCD+144
OPCRSAVE EQU   IEDQOPCD+132
OPCQCBAD EQU   IEDQOPCD+128
OPCTRMWA EQU   IEDQOPCD+52
OPCPSTWT EQU   IEDQOPCD+48
OPCTNTEA EQU   IEDQOPCD+44
OPCPGCK  EQU   IEDQOPCD+40
OPCLCB   EQU   IEDQOPCD+36
@NM00148 EQU   IEDQOPCD+32
OPCIPLAD EQU   IEDQOPCD+28
OPCTOFLK EQU   IEDQOPCD+24
OPCOPTLK EQU   IEDQOPCD+20
OPCDCBLK EQU   IEDQOPCD+16
OPCDOUBL EQU   IEDQOPCD
OCTRSAVE EQU   IEDOCTR+32
OCTRADR  EQU   IEDOCTR+28
OCTRUCB  EQU   IEDOCTR+24
OCTRDVD  EQU   IEDOCTR+20
OCTRTTE  EQU   IEDOCTR+16
@NM00147 EQU   OCTRRTN
OCTRERI  EQU   OCTRRTN
@NM00146 EQU   OCTRRTN
@NM00145 EQU   OCTRRTN
OCTRDRTN EQU   OCTRRTN
OCTRIP   EQU   OCTRRTN
@NM00144 EQU   OCTRRTE
@NM00143 EQU   OCTRRTE
@NM00142 EQU   OCTRRTE
OCTRMSG  EQU   OCTRRTE
@NM00141 EQU   OCTRRTE
@NM00140 EQU   OCTRRTE
@NM00139 EQU   OCTRRTE
@NM00138 EQU   OCTRRTE
@NM00137 EQU   OCTRSW
OCTRINMF EQU   OCTRSW
@NM00136 EQU   OCTRSW
OCTRBLST EQU   OCTRSW
OCTRNOS  EQU   OCTRSW
OCTROUT  EQU   OCTRSW
@NM00135 EQU   IEDOCTR+12
OCTRLCB  EQU   IEDOCTR+8
OCTRDCB  EQU   IEDOCTR+4
OCTROPCE EQU   IEDOCTR
@NM00128 EQU   OCLDNME+4
@NM00127 EQU   OCPREFLG
OCREMCON EQU   OCPREFLG
OCCLNUP  EQU   OCPREFLG
OCTOTEP  EQU   OCPREFLG
OCREPOST EQU   OCPREFLG
OCRSPSNT EQU   OCPREFLG
OCBFREQ  EQU   OCPREFLG
OCIDLE   EQU   OCREQFLG
OCFORCE  EQU   OCREQFLG
OCDCARD  EQU   OCREQFLG
OCPARTAL EQU   OCREQFLG
OCADNCP  EQU   OCREQFLG
OCRMPORQ EQU   OCREQFLG
OCCDLACT EQU   OCREQFLG
OCFLUSHZ EQU   OCREQFLG
OCRESPCT EQU   OCLINTTE
OCCKPTWA EQU   OCCKDATA+4
OCNCP    EQU   OCRSTGTM+2
OCCKDAT2 EQU   OC379RRT+1
OCCKDAT1 EQU   OC379RRT
OCPUADR  EQU   OCIPLWA+2
OCWTGSAV EQU   OCIPLWA
@NM00119 EQU   OCBACKUP+4
OCBUFRET EQU   OCBUFGOT
OCBUFUSD EQU   OCBUFNED
OCSEQ    EQU   OCTRUNIT+2
@NM00118 EQU   OCRSID+1
OCNONE   EQU   OCALSTAT
OCSOME   EQU   OCALSTAT
OCALLFLG EQU   OCALSTAT
OCSEQIND EQU   OCALSTAT
@NM00117 EQU   OCALSTAT
OCRENTRD EQU   OCALSTAT
OCDIALX  EQU   OCWTGB
@NM00116 EQU   OCMSTSAV+2
OCCONID  EQU   OCDEST
OCRLN    EQU   IEDQOPCE+15
OCRESP   EQU   OCFLAG
OCATTACH EQU   OCFLAG
OCSSCP   EQU   OCFLAG
OCOUTPUT EQU   OCFLAG
OCLINE   EQU   OCFLAG
OCMPP    EQU   OCFLAG
OCTOTE   EQU   OCFLAG
OCCONSOL EQU   OCFLAG
@NM00115 EQU   OCSWITCH
OCQUCKN  EQU   OCSWITCH
@NM00114 EQU   OCUNITBF
OCINVTIC EQU   OCUNITBF
@NM00113 EQU   OCUNITBF
@NM00112 EQU   @NM00111
@NM00110 EQU   OCSCAN
OCNOTUCB EQU   OCSCAN
OCNONAME EQU   OCSCAN
OCALLRLN EQU   OCSCAN
OCDDNAME EQU   OCSCAN
OCDDNRLN EQU   OCSCAN
OCADDR   EQU   OCSCAN
NRAREAD  EQU   IEDNRA+16
NRAR2PTR EQU   IEDNRA+12
NRAR1PTR EQU   IEDNRA+8
NRASIZE  EQU   IEDNRA+4
CNRBHPOS EQU   CNRBHSET+1
@NM00109 EQU   CNRBHFUN
CNRBHFN0 EQU   CNRBHFUN
@NM00108 EQU   CNRCNTL+1
CNRTIME  EQU   CNRDATTM+4
CNRDATE  EQU   CNRDATTM
BDUXGRPH EQU   BDUEXRSP
BDUXFINL EQU   BDUEXRSP
BDUXINIT EQU   BDUEXRSP
BDURESP  EQU   BDUSYRSP
BDUPHASE EQU   BDUSYRSP
BDUERROR EQU   BDUSYRSP
BDUXERLK EQU   BDUBDUFG
BDUALTAK EQU   BDUFNFLG
BDUNEGAK EQU   BDUFNFLG
BDUPOSAK EQU   BDUFNFLG
BDUTPTX  EQU   BDUFNFLG
BDUFRSTB EQU   BDUFNFLG
BDULEADG EQU   BDUFNFLG
BDUHEADR EQU   BDUFNFLG
BDUSTHDR EQU   BDUFNFLG
SAVTLLCB EQU   IEDNSVTD+380
SAVTSCF0 EQU   IEDNSVTD+376
SAVTLSNY EQU   IEDNSVTD+372
SAVTLSZP EQU   IEDNSVTD+368
SAVTOMSU EQU   IEDNSVTD+364
SAVTGTSB EQU   IEDNSVTD+360
SAVTHIBL EQU   IEDNSVTD+356
SAVTHISY EQU   IEDNSVTD+352
SAVTNAX2 EQU   IEDNSVTD+348
SAVTCDRU EQU   IEDNSVTD+344
SAVTPOLC EQU   IEDNSVTD+342
SAVTPOLM EQU   IEDNSVTD+340
SAVTPOLR EQU   IEDNSVTD+336
SAVTCDRN EQU   SAVTCDRV
SAVTPOLL EQU   IEDNSVTD+328
SAVTPOLN EQU   IEDNSVTD+326
@NM00107 EQU   IEDNSVTD+325
@NM00106 EQU   SAVTNETF
SAVTSDIS EQU   SAVTNETF
SAVTROUT EQU   SAVTNETF
SAVTNETW EQU   SAVTNETF
SAVTDIAL EQU   IEDNSVTD+320
SAVTRQUT EQU   IEDNSVTD+316
SAVTBITN EQU   IEDNSVTD+312
@NM00105 EQU   SAVTCKQB+8
@NM00104 EQU   SAVTCKEC+1
@NM00103 EQU   SAVTCKCC
SAVTCKPO EQU   SAVTCKCC
SAVTCKWA EQU   SAVTCKCC
SAVTCKCH EQU   SAVTCKTB+1
SAVTCKVT EQU   SAVTCKTB
@NM00102 EQU   IEDNSVTD+297
SAVTRDFG EQU   SAVTRDRV+12
@NM00101 EQU   SAVTRDRV+5
SAVTRDPY EQU   SAVTRDRV+4
SAVTRDQB EQU   SAVTRDRV+1
SAVTRDKY EQU   SAVTRDRV
SAVTNID  EQU   IEDNSVTD+280
SAVTDVAS EQU   IEDNSVTD+276
SAVTPLSZ EQU   IEDNSVTD+274
@NM00100 EQU   IEDNSVTD+273
SAVTSUBL EQU   IEDNSVTD+272
@NM00099 EQU   SAVTZELM+1
SAVTSUBM EQU   SAVTZELM
SAVTMHDX EQU   IEDNSVTD+268
SAVTNAT1 EQU   IEDNSVTD+266
SAVTSH20 EQU   IEDNSVTD+264
SAVTLCBS EQU   IEDNSVTD+260
SAVTRNMP EQU   IEDNSVTD+256
SAVTTNTX EQU   IEDNSVTD+252
SAVTNAX  EQU   IEDNSVTD+248
SAVTSUBV EQU   IEDNSVTD+247
SAVTSUBA EQU   IEDNSVTD+246
SAVTSIBC EQU   IEDNSVTD+244
SAVTBSM  EQU   IEDNSVTD+240
SAVTSCPT EQU   SAVTTCPU
SAVTRQTG EQU   IEDNSVTD+236
SAVTRQCH EQU   IEDNSVTD+232
SAVTMAND EQU   IEDNSVTD+228
SAVTSPLN EQU   IEDNSVTD+224
SAVTNADL EQU   IEDNSVTD+222
SAVTNATL EQU   IEDNSVTD+220
SAVTMHTB EQU   IEDNSVTD+216
SAVTSSMH EQU   IEDNSVTD+212
SAVTQRS  EQU   IEDNSVTD+208
SAVTRQIN EQU   IEDNSVTD+204
SAVTDFCO EQU   IEDNSVTD+200
SAVTSAO  EQU   IEDNSVTD+196
SAVTSARI EQU   IEDNSVTD+192
SAVTSAC  EQU   IEDNSVTD+188
SAVTSAI  EQU   IEDNSVTD+184
SAVTCSCI EQU   IEDNSVTD+180
SAVTSSRP EQU   IEDNSVTD+176
SAVTSSRQ EQU   IEDNSVTD+172
SAVTSCLU EQU   IEDNSVTD+168
SAVTXTRQ EQU   IEDNSVTD+164
@NM00098 EQU   IEDNSVTD+148
SAVTIPCQ EQU   IEDNSVTD+144
@NM00097 EQU   IEDNSVTD+136
SAVTXFMI EQU   IEDNSVTD+132
@NM00096 EQU   IEDNSVTD+124
SAVTXFMO EQU   IEDNSVTD+120
@NM00095 EQU   IEDNSVTD+116
SAVTSSSR EQU   IEDNSVTD+112
SAVTSCPQ EQU   IEDNSVTD+108
SAVTSLCB EQU   IEDNSVTD+104
SAVTLUSR EQU   IEDNSVTD+100
@NM00094 EQU   SAVTLUSQ+8
SAVTLUSP EQU   SAVTLUSQ+4
SAVTLUSB EQU   SAVTLUSQ
@NM00093 EQU   IEDNSVTD+84
SAVTSAT  EQU   IEDNSVTD+80
SAVTNAT  EQU   IEDNSVTD+76
SAVTCLUP EQU   IEDNSVTD+72
SAVTPIUT EQU   IEDNSVTD+68
SAVTRNTA EQU   IEDNSVTD+64
SAVTDNIR EQU   IEDNSVTD+60
SAVTCNIR EQU   IEDNSVTD+56
SAVTFLDH EQU   IEDNSVTD+52
SAVTSRTN EQU   IEDNSVTD+48
SAVTSREQ EQU   IEDNSVTD+44
SAVTFAIL EQU   IEDNSVTD+42
SAVTSUSE EQU   IEDNSVTD+40
SAVTSIB  EQU   IEDNSVTD+36
SAVTPRTN EQU   IEDNSVTD+32
@NM00092 EQU   IEDNSVTD+28
SAVTWH20 EQU   IEDNSVTD+26
SAVTPWT  EQU   IEDNSVTD+24
SAVTPRTQ EQU   IEDNSVTD+20
SAVTPREQ EQU   IEDNSVTD+16
SAVTPH20 EQU   IEDNSVTD+14
SAVTPUSE EQU   IEDNSVTD+12
SAVTPLCB EQU   IEDNSVTD+8
SAVTPOOL EQU   IEDNSVTD+4
SAVTPRMT EQU   SAVTDIAF
SAVTVIRT EQU   SAVTDIAF
AVTSITS  EQU   IEDQAVTD+1264
AVTMSUHI EQU   IEDQAVTD+1260
AVTSITU  EQU   IEDQAVTD+1256
AVTSITP  EQU   IEDQAVTD+1252
AVTPADDR EQU   IEDQAVTD+1248
@NM00091 EQU   IEDQAVTD+1246
AVTCPBNO EQU   IEDQAVTD+1244
AVTHRESS EQU   IEDQAVTD+1243
@NM00090 EQU   IEDQAVTD+1242
@NM00089 EQU   IEDQAVTD+1241
@NM00088 EQU   IEDQAVTD+1240
@NM00087 EQU   IEDQAVTD+1237
@NM00086 EQU   IEDQAVTD+1236
AVTHRESE EQU   @NM00085
AVTRADDR EQU   IEDQAVTD+1228
AVTNADDR EQU   IEDQAVTD+1224
AVTHRESN EQU   IEDQAVTD+1220
AVTVOLRN EQU   IEDQAVTD+1216
AVTTOTNN EQU   IEDQAVTD+1212
AVTTRCYN EQU   IEDQAVTD+1208
AVTRCTRN EQU   IEDQAVTD+1204
AVTNOVON EQU   IEDQAVTD+1200
AVTADEBN EQU   IEDQAVTD+1196
AVTVOLRR EQU   IEDQAVTD+1192
AVTTOTNR EQU   IEDQAVTD+1188
AVTTRCYR EQU   IEDQAVTD+1184
AVTRCTRR EQU   IEDQAVTD+1180
AVTNOVOR EQU   IEDQAVTD+1176
AVTADEBR EQU   IEDQAVTD+1172
AVTLODPT EQU   IEDQAVTD+1168
AVTIOBN  EQU   IEDQAVTD+1164
AVTIOBR  EQU   IEDQAVTD+1160
AVTCPBPT EQU   IEDQAVTD+1156
AVTFCPB  EQU   IEDQAVTD+1152
@NM00084 EQU   IEDQAVTD+1148
AVTINCPQ EQU   IEDQAVTD+1144
@NM00083 EQU   IEDQAVTD+1140
@NM00082 EQU   IEDQAVTD+1137
@NM00081 EQU   AVTBIT4
@NM00080 EQU   AVTBIT4
@NM00079 EQU   AVTBIT4
@NM00078 EQU   AVTBIT4
@NM00077 EQU   AVTBIT4
@NM00076 EQU   AVTBIT4
@NM00075 EQU   AVTBIT4
AVTRUFTN EQU   AVTBIT4
@NM00074 EQU   IEDQAVTD+1132
AVTNOBFQ EQU   IEDQAVTD+1128
@NM00073 EQU   IEDQAVTD+1124
AVTDKENQ EQU   IEDQAVTD+1120
@NM00072 EQU   IEDQAVTD+1116
AVTDKAPQ EQU   IEDQAVTD+1112
AVTCOPY  EQU   IEDQAVTD+1108
AVTIA    EQU   IEDQAVTD+1104
AVTFL    EQU   IEDQAVTD+1100
@NM00071 EQU   IEDQAVTD+1096
AVTNCPBQ EQU   IEDQAVTD+1092
AVTTOTNC EQU   IEDQAVTD+1088
AVTCMAX  EQU   IEDQAVTD+1084
AVTCMIN  EQU   IEDQAVTD+1080
AVTHM02  EQU   IEDQAVTD+1076
AVTOPCIN EQU   IEDQAVTD+1074
AVTDCTLN EQU   IEDQAVTD+1072
AVTOPMSK EQU   IEDQAVTD+1068
AVTDDFT  EQU   IEDQAVTD+1064
AVTSTEAL EQU   IEDQAVTD+1060
AVTOPTN  EQU   IEDQAVTD+1056
AVTDSKCT EQU   IEDQAVTD+1054
AVTCKRST EQU   IEDQAVTD+1053
AVTSTAN  EQU   AVTBIT3
AVTSTACN EQU   AVTBIT3
AVTSTAIN EQU   AVTBIT3
AVTSTAYN EQU   AVTBIT3
AVTOLTBN EQU   AVTBIT3
AVTTSAB  EQU   AVTBIT3
AVTRFULN EQU   AVTBIT3
AVTRECVN EQU   AVTBIT3
@NM00070 EQU   AVTBIT2
@NM00069 EQU   AVTBIT2
AVTOPEIN EQU   AVTBIT2
AVTSTRTN EQU   AVTBIT2
AVTTOPOL EQU   AVTBIT2
AVTCOPYN EQU   AVTBIT2
AVTREUSN EQU   AVTBIT2
AVTEXTSC EQU   AVTBIT2
AVTDISKN EQU   AVTBIT1
AVTQUCKN EQU   AVTBIT1
AVTCLOSN EQU   AVTBIT1
AVTREADN EQU   AVTBIT1
AVTDLAYN EQU   AVTBIT1
AVTAQTAN EQU   AVTBIT1
AVTTSON  EQU   AVTBIT1
AVTAPLKN EQU   AVTBIT1
AVTDUMBR EQU   IEDQAVTD+1048
AVTDLQX  EQU   IEDQAVTD+1046
AVTINTLV EQU   IEDQAVTD+1044
AVTSMCNT EQU   IEDQAVTD+1042
AVTAVFCT EQU   IEDQAVTD+1040
AVTOPCON EQU   IEDQAVTD+1038
AVTOPCNT EQU   IEDQAVTD+1036
AVTLNCNT EQU   IEDQAVTD+1034
AVTHA16  EQU   IEDQAVTD+1030
AVTHA7   EQU   IEDQAVTD+1028
AVTHA4   EQU   IEDQAVTD+1026
AVTHA3   EQU   IEDQAVTD+1024
AVTHA2   EQU   IEDQAVTD+1022
AVTGETMS EQU   IEDQAVTD+1021
@NM00068 EQU   IEDQAVTD+1020
AVTGETMD EQU   IEDQAVTD+1016
AVTGETMN EQU   IEDQAVTD+1012
AVTCWTOT EQU   IEDQAVTD+1008
AVTCWINT EQU   IEDQAVTD+956
AVTDTRAP EQU   IEDQAVTD+952
@NM00067 EQU   IEDQAVTD+950
@NM00066 EQU   AVTIOTR
AVTIOTRH EQU   AVTIOTR
AVTIOTRE EQU   AVTIOTR
@NM00065 EQU   AVTSUBT
AVTSUBPT EQU   AVTSUBT
AVTSUBON EQU   AVTSUBT
AVTAFE30 EQU   IEDQAVTD+944
AVTAFE20 EQU   IEDQAVTD+940
AVTAFE10 EQU   IEDQAVTD+936
AVTCWEC2 EQU   IEDQAVTD+932
AVTCWPM2 EQU   IEDQAVTD+928
AVTCWTS2 EQU   IEDQAVTD+927
AVTCWTS1 EQU   IEDQAVTD+926
AVTCWCLD EQU   AVTCWFL2
AVTCWRAP EQU   AVTCWFL2
@NM00064 EQU   AVTCWFL2
@NM00063 EQU   AVTCWFL2
@NM00062 EQU   AVTCWFL2
@NM00061 EQU   AVTCWFL2
@NM00060 EQU   AVTCWFL2
AVTCWACT EQU   AVTCWFL2
@NM00059 EQU   AVTCWFL1
@NM00058 EQU   AVTCWFL1
@NM00057 EQU   AVTCWFL1
@NM00056 EQU   AVTCWFL1
@NM00055 EQU   AVTCWFL1
@NM00054 EQU   AVTCWFL1
@NM00053 EQU   AVTCWFL1
AVTCOMWN EQU   AVTCWFL1
AVTCWEC1 EQU   IEDQAVTD+920
AVTCWPM1 EQU   IEDQAVTD+916
AVTCAREA EQU   IEDQAVTD+912
AVTFZERO EQU   IEDQAVTD+908
AVTCADDR EQU   IEDQAVTD+904
AVTCOREC EQU   IEDQAVTD+900
@NM00052 EQU   IEDQAVTD+892
AVTCPBCB EQU   IEDQAVTD+888
@NM00051 EQU   IEDQAVTD+880
AVTDSIOB EQU   IEDQAVTD+876
@NM00050 EQU   IEDQAVTD+868
AVTCPRMB EQU   IEDQAVTD+864
@NM00049 EQU   IEDQAVTD+856
AVTCLOSB EQU   IEDQAVTD+852
@NM00048 EQU   IEDQAVTD+844
AVTACTIB EQU   IEDQAVTD+840
@NM00047 EQU   IEDQAVTD+836
AVTOLTEB EQU   IEDQAVTD+832
AVTOLTCH EQU   AVTOLTQB+1
AVTOLTVT EQU   AVTOLTQB
@NM00046 EQU   AVTOPCQB+8
@NM00045 EQU   AVTOPCEC+1
@NM00044 EQU   AVTOPCCC
AVTOPCPO EQU   AVTOPCCC
AVTOPCWA EQU   AVTOPCCC
AVTOPCCH EQU   AVTOPCOB+1
AVTOPCVT EQU   AVTOPCOB
@NM00043 EQU   AVTCKPQB+9
AVTCKPTS EQU   AVTCKPQB+8
@NM00042 EQU   AVTCKPEC+1
@NM00041 EQU   AVTCKPCC
AVTCKPPO EQU   AVTCKPCC
AVTCKPWA EQU   AVTCKPCC
AVTCKPCH EQU   AVTCKPTB+1
AVTCKPVT EQU   AVTCKPTB
@NM00040 EQU   IEDQAVTD+796
AVTBFRTB EQU   IEDQAVTD+792
@NM00039 EQU   IEDQAVTD+788
AVTSELCH EQU   IEDQAVTD+785
AVTBFRTN EQU   AVTBFRFG
AVTBFREB EQU   IEDQAVTD+780
AVTTIMQ  EQU   IEDQAVTD+776
@NM00038 EQU   IEDQAVTD+772
AVTIMQPS EQU   IEDQAVTD+768
AVTINOUT EQU   IEDQAVTD+766
AVTREFTM EQU   IEDQAVTD+764
@NM00037 EQU   IEDQAVTD+752
AVTDELYB EQU   IEDQAVTD+748
AVTOCQPT EQU   IEDQAVTD+744
AVTTSOPT EQU   IEDQAVTD+740
AVTSUPPT EQU   IEDQAVTD+736
AVTCBQCB EQU   IEDQAVTD+732
AVTMSGS  EQU   IEDQAVTD+729
@NM00036 EQU   AVTSYSER
@NM00035 EQU   AVTSYSER
@NM00034 EQU   AVTSYSER
@NM00033 EQU   AVTSYSER
@NM00032 EQU   AVTSYSER
@NM00031 EQU   AVTSYSER
AVTCMAXN EQU   AVTSYSER
AVTCMINN EQU   AVTSYSER
AVT2260L EQU   IEDQAVTD+724
AVTABEPL EQU   AVTADBUF
AVTHFF   EQU   AVTCLRHI+2
@NM00030 EQU   AVTCLRHI
AVTCCLNK EQU   AVTCRELE+5
AVTCCPRI EQU   AVTCRELE+4
AVTCCQCB EQU   AVTCCELE+1
AVTCCKEY EQU   AVTCCELE
AVTDELAD EQU   IEDQAVTD+704
AVTDELEM EQU   IEDQAVTD+700
AVTBSX   EQU   AVTCKLNK
AVTOPETR EQU   AVTHG01
@NM00029 EQU   AVTCKBYT
AVTCKONQ EQU   AVTCKBYT
@NM00028 EQU   AVTCKBYT
@NM00027 EQU   AVTCKBYT
@NM00026 EQU   AVTCKBYT
@NM00025 EQU   AVTCKBYT
@NM00024 EQU   AVTCKBYT
@NM00023 EQU   AVTCKBYT
AVTOPERT EQU   IEDQAVTD+690
AVTOPXCL EQU   IEDQAVTD+688
AVTOPERL EQU   IEDQAVTD+687
@NM00022 EQU   IEDQAVTD+686
AVTCKTIM EQU   IEDQAVTD+684
AVTCKELV EQU   IEDQAVTD+682
AVTCPRCD EQU   IEDQAVTD+681
AVTWARMN EQU   AVTCKELF
AVTCRTLN EQU   AVTCKELF
AVTCPIPN EQU   AVTCKELF
AVTCCLCN EQU   AVTCKELF
AVTCINCN EQU   AVTCKELF
@NM00021 EQU   AVTCKELF
AVTCMCPN EQU   AVTCKELF
AVTNQBCK EQU   AVTCKELF
AVTCKQAD EQU   IEDQAVTD+677
AVTSCBSZ EQU   IEDQAVTD+676
@NM00020 EQU   IEDQAVTD+672
AVTCKELE EQU   IEDQAVTD+668
@NM00019 EQU   AVTCKPEL+8
AVTCKRLK EQU   AVTCKPEL+5
AVTCKRPR EQU   AVTCKPEL+4
AVTCKRMQ EQU   AVTCKRMV+1
AVTCKRKY EQU   AVTCKRMV
AVTHK    EQU   IEDQAVTD+648
AVTHI    EQU   IEDQAVTD+644
AVTIOT   EQU   IEDQAVTD+640
AVTNX    EQU   IEDQAVTD+636
AVTTONE  EQU   IEDQAVTD+632
AVTA3TL  EQU   IEDQAVTD+628
AVTDMECB EQU   IEDQAVTD+624
AVTABEND EQU   IEDQAVTD+618
AVTPLCBN EQU   IEDQAVTD+616
@NM00018 EQU   AVTSAVTP+1
@NM00017 EQU   AVTSAVTF
AVTSNA   EQU   AVTSAVTF
AVTONSNA EQU   AVTSAVTF
AVTVTMCP EQU   AVTSAVTF
@NM00016 EQU   IEDQAVTD+608
AVTCMBSS EQU   IEDQAVTD+604
AVTRCV   EQU   IEDQAVTD+600
AVTSEND  EQU   IEDQAVTD+596
AVTCSCH  EQU   IEDQAVTD+592
AVTQ1    EQU   IEDQAVTD+588
AVTE7    EQU   IEDQAVTD+584
AVTHB    EQU   IEDQAVTD+580
AVTR1    EQU   IEDQAVTD+576
AVTBZ    EQU   IEDQAVTD+572
AVTEZ    EQU   IEDQAVTD+568
AVTEC    EQU   IEDQAVTD+564
AVTEW    EQU   IEDQAVTD+560
AVTNDIAL EQU   AVTSCOPT
AVTN2741 EQU   AVTSCOPT
AVTCONCO EQU   AVTSCOPT
AVTCONC  EQU   AVTSCOPT
AVTCMBUF EQU   AVTSCOPT
AVTAPDMP EQU   AVTSCOPT
@NM00015 EQU   AVTSCOPT
AVTHA    EQU   AVTDISP
AVTEA    EQU   IEDQAVTD+548
AVTAX    EQU   IEDQAVTD+544
AVTA3    EQU   IEDQAVTD+540
AVTGD    EQU   IEDQAVTD+536
AVTAL    EQU   IEDQAVTD+532
AVTOLTST EQU   AVTHG02
AVTE8    EQU   IEDQAVTD+524
AVTUI    EQU   IEDQAVTD+520
AVTCOMPT EQU   IEDQAVTD+516
AVTCRSRF EQU   IEDQAVTD+512
@NM00014 EQU   IEDQAVTD+508
AVTKA02  EQU   IEDQAVTD+504
AVTOPTPT EQU   IEDQAVTD+500
AVTPCBPT EQU   IEDQAVTD+496
@NM00013 EQU   AVTECB1
AVTCOMP  EQU   AVTECB1
@NM00012 EQU   AVTECB1
AVTOPECA EQU   IEDQAVTD+488
AVTOLECA EQU   IEDQAVTD+484
AVTCKECA EQU   IEDQAVTD+480
AVTCWECA EQU   IEDQAVTD+476
AVTCWTCB EQU   IEDQAVTD+472
AVTOLTCB EQU   IEDQAVTD+468
AVTOCTCB EQU   IEDQAVTD+464
AVTCKTCB EQU   IEDQAVTD+460
AVTAS    EQU   IEDQAVTD+456
AVTNCKPR EQU   IEDQAVTD+453
AVTCIB   EQU   IEDQAVTD+452
AVTSPLPT EQU   IEDQAVTD+448
AVTMVBFR EQU   IEDQAVTD+444
AVTSBTA  EQU   IEDQAVTD+440
AVTRARTN EQU   IEDQAVTD+436
AVTBSCAN EQU   IEDQAVTD+432
AVTRDYA  EQU   IEDQAVTD+428
AVTDISTR EQU   IEDQAVTD+420
AVTPARM3 EQU   IEDQAVTD+416
@NM00011 EQU   AVTPKF
@NM00010 EQU   AVTPKF
@NM00009 EQU   AVTPKF
AVTFTCHF EQU   AVTPKF
@NM00008 EQU   AVTPKF
@NM00007 EQU   AVTPKF
@NM00006 EQU   AVTPKF
@NM00005 EQU   AVTPKF
AVTPARM  EQU   IEDQAVTD+408
AVTEXS2A EQU   IEDQAVTD+402
AVTEXA2S EQU   IEDQAVTD+396
AVTOCGET EQU   IEDQAVTD+392
AVTCKAVT EQU   @NM00003+1
@NM00004 EQU   AVTCKFLG
AVTCKHLT EQU   AVTCKFLG
AVTCKREQ EQU   AVTCKFLG
AVTCKENV EQU   AVTCKFLG
AVTCKNAC EQU   AVTCKFLG
AVTCKTAC EQU   AVTCKFLG
@NM00002 EQU   IEDQAVTD+384
AVTREADD EQU   IEDQAVTD+380
AVTREADY EQU   IEDQAVTD+376
AVTRACE  EQU   IEDQAVTD+372
AVTTCB   EQU   IEDQAVTD+368
AVTPASWD EQU   IEDQAVTD+360
AVTCTLCH EQU   IEDQAVTD+352
AVTDOUBL EQU   IEDQAVTD+344
AVTDOUBX EQU   IEDQAVTD+336
AVTDPARM EQU   IEDQAVTD+332
AVTCSTCS EQU   IEDQAVTD+328
AVTDLQ   EQU   AVTSAVEX+32
@NM00001 EQU   AVTSAVEX
AVTSAVE4 EQU   IEDQAVTD+216
AVTSAVE3 EQU   IEDQAVTD+144
AVTSAVE2 EQU   IEDQAVTD+72
AVTSAVE1 EQU   IEDQAVTD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00887 EQU   @RC00886
@RC00882 EQU   @RC00881
@RC01131 EQU   @RC00994
@ENDDATA EQU   *
         END   IGCFF10D,(C'PLS0312',0701,77356)
