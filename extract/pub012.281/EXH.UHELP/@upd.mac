@UPDATE ...all parameters valid on @ZAP

Full-screen updating is invoked either with the major command @UPDATE
(with normal data set operands as on @ZAP), or from the @ZAP
command with the UPDATE subcommand.

In update mode, the top lines of the screen show the current
state, mode, data set name and position, error messages, and a short
input area. The remaining screen lines are unprotected, and form a
single area (modification of one line can carry to the next). The
INSERT and DELETE keys should be used with caution; if more DELETEs
than INSERTs are done, the entire update will be rejected. If the
ERASE keys are hit, the CLEAR key will restore the screen.

Three options are available - a command may be entered in the short
command field, and ENTER hit. The command is executed either by the
update routine or one of the @ZAP functions. For a @ZAP subcommand,
the response will be a normal @ZAP display. Update is re-entered
by hitting ENTER or typing UPDATE.

Alternatively, data may be replaced in the text area. An ENTER will repl
the data in the buffer (a ZAP command is required to rewrite
modifications to disk). ENTER, when no modifications are made and no
command is issued, advances to the next page or block, unless ZAP was
not used after a replace. In this case a warning message is
issued instead of advancing to the next block. When both the command
and text area are modified, the command entry is ignored.

Several of the PA and PF keys may be used. PA1 and PA2 (Cancel)
terminate the @ZAP/@UPD function without ZAP. CLEAR, unlike its
definition for @ZAP, rewrites the current screen; it does not REREAD.
The Test-Request key issues a LOCATE command if a prior LOCATE
has been issued. The command field may be used to add requests to
the locate; e.g. SCAN=XYZ in the command area with Test-Request
issues a LOC SCAN=XYZ command. The PF keys all process modified
text; PFK12 returns the cursor to the command area. PFK1 advances
the display one line, PFK2 three lines, and PFK3 ten lines. PFK4
backspaces one line, PFK5 three lines, and PFK6 ten lines. Spacing takes
place in the current block only, and does not result in loss of
unZAPped data. PFK10 spaces a logical tab (ten positions), PFK7
backspaces a logical tab. Other PFKs are not defined, and will not cause
loss of data.

Modes and states :

Key and Data mode are as defined for @ZAP, and cause the
appropriate data to be displayed in the text area. Key includes the
block's key in the display and modification, Data does not.

By default, all 3270 input is in lower case (even though it is
displayed in upper case on terminals not having lower case capability).
UPDATE operates in either LOWER or UPPER case. In LOWER case
(specified with the operand LOWER on the UPDATE subcommand, or as a
separate subcommand in UPDATE mode), input is accepted as typed (upper
case only if the SHIFT key is used), and merged with the old text.
In UPPER case (default), characters are replaced and shifted to
upper case. Note that an old lower case character cannot be
replaced by typing the same character in lower case, it must be
entered with SHIFT; e.g. 'xyz' cannot be changed to 'XYZ' by typing
'xyz', you must type 'XYZ' (shifted).

UPDATE recognizes two LOCK states. When the block is too large to
fit in the Exhibit region, it cannot be rewritten. In this case
UPDATE displays the word 'Locked' on the first line, and displays
the text in intensified mode. No modification is allowed. The
second LOCK state is under user control, and exists when the text
contains characters that do not exist on the keyboard. In this state,
input falling on an unprintable character is not modified; an error
message may or may not be issued when such a replace is attempted
(the error message is overlaid by 'Successful replacement' when
other text is changed). This lock state is the default, and may be
set with the operand LOCK on the UPDATE subcommand, or as a
subcommand in UPDATE mode. The operand UNLOCK on the UPDATE subcommand,
or as a subcommand in UPDATE mode, will permit replacement of
any character. Unprintable characters are sent to the 3270 as a
hex 6A, which displays as a blank on many IBM terminals, and as a
broken vertical bar on most others.

UPDATE mode, but not @ZAP, is cancelled by the OFF subcommand from
an UPDATE display, or by UPDATE OFF in @ZAP displays.
