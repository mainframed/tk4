         MACRO
&NME     #SEARCH &DUMMY,&PFIX=,&SVID=,&CMPRID=
.*
.*
.*
.* LAST CHANGE DATE - OCTOBER 18, 1983
.*                  - MAILING ADDRESS CHANGE
.*
.* LAST CHANGE DATE - SEPTEMBER 8, 1981
.*                  - THE PARAMETERIZATION OF THE SEARCH ROUTINE WAS
.*                    CHANGED FROM:
.*                       - R15 = L'LIST
.*                       - R0 = L'LIST ENTRY
.*                       - R1 --> SO-LIST
.*                    TO:
.*                       - R15 --> SO-LIST
.*                         R0 = L'LIST ENTRY
.*                         R1 --> EO-LIST
.*
.* LAST CHANGE DATE - APRIL 21, 1981
.*                  - MACRO NAME CHANGED FROM $SEARCH TO #SEARCH.
.*
.* LAST CHANGE DATE - APRIL 20, 1981
.*                  - "#REGS GEN=NO" SUPPORT ADDED.
.*
.* LAST CHANGE DATE - MARCH 12, 1980
.*                  - SUPPORT FOR AN EMPTY LIST HAS BEEN FIXED.
.*
.* LAST CHANGE DATE - SEPTEMBER 18, 1978
.*                  - IF THE LIST HAS MULTIPLE ENTRIES WITH THE SAME
.*                    KEY AS THE SEARCH OBJECT, THEN THIS ROUTINE NOW
.*                    RETURNS THE LAST (SEQUENTIALLY) SUCH LIST ENTRY.
.*
.* LAST CHANGE DATE - FEBRUARY 2, 1977
.*                  - MAILING ADDRESS CHANGE
.*
.* LAST CHANGE DATE - OCTOBER 28, 1975
.*
.* THIS MACRO WAS WRITTEN BY DAVID B. COLE.  ANY QUESTIONS CONCERNING
.* IT MAY BE ADDRESSED TO:
.*       RR#2 BOX 712
.*       AFTON, VA. 22920
.*
.*
.*
.*   THIS MACRO GENERATES A SUBROUTINE THAT SEARCHES A SORTED LIST.  A
.* BINARY SEARCH METHOD IS USED.
.*
.*   THE SEARCH SUBROUTINE REQUIRES THE FOLLOWING INPUTS:
.*       - R14 POINTS TO THE RETURN ADDRESS;
.*       - R15 POINTS TO THE START OF THE LIST TO BE SEARCHED;
.*       - R0 CONTAINS THE LENGTH (IN BYTES) OF EACH ENTRY IN
.*         THE LIST;
.*       - R1 POINTS PAST THE END OF THE LIST.
.*
.*   ON OUTPUT THE CONDITION CODE AND R1 ARE SET AS FOLLOWS:
.*       - CC=0 (EQUAL) MEANS THAT THE SEARCH OBJECT WAS FOUND. R1
.*         POINTS TO IT. IF THE LIST CONTAINS MORE THAN ONE OBJECT
.*         HAVING THE SAME KEY AS THE SEARCH OBJECT, THEN R1 POINTS TO
.*         THE LAST SUCH OBJECT IN THE LIST.
.*       - CC=2 (HIGH) MEANS THAT THE SEARCH OBJECT WAS NOT FOUND. R1
.*         POINTS TO WHERE IT SHOULD BE INSERTED.
.* ALL OTHER REGISTERS ARE RESTORED.
.*
.*   THE SEARCH SUBROUTINE IS NOT REENTRANT, BUT IT IS SERIALLY
.* REUSABLE.
.*
.*   THE NAME FIELD
.* THIS FIELD IS OPTIONAL. IT CAN BE USED TO DEFINE BOTH THE NAME OF
.* THE SUBROUTINE AND THE PREFIX USED IN ALL GENERATED STATEMENT
.* LABELS. IF OMITTED, THEN THE CHARACTERS "SRCH" WILL BE USED. IF
.* GIVEN, THEN NO MORE THAN FOUR CHARACTERS SHOULD BE SPECIFIED.
.*
.*   THE PFIX= OPERAND
.* THE #SEARCH MACRO ATTEMPTS TO USE REGISTER EQUATES IN ITS EXPANSION
.* WHEN REFERING TO REGISTERS. THIS IS SO THAT THE USE OF THE REGISTERS
.* WILL BE INDICATED IN THE CROSS REFERENCE LISTING. THE PFIX= OPERAND
.* CAN BE USED TO CONTROL THE SET OF EQUATES USED. FOR EXAMPLE, IF
.* "PFIX=GPR" IS SPECIFIED, THEN "GPR1" WILL BE USED WHENEVER THE
.* EXPANSION REFERS TO REGISTER 1.
.*   IF THE PFIX= OPERAND IS OMITTED, THEN THE SET OF EQUATES DEFINED
.* BY THE FIRST PRIOR #REGS MACRO WILL BE USED. IF THERE IS NO PRIOR
.* #REGS MACRO, THEN NO EQUATES WILL BE USED.
.*
.*   THE CMPRID= OPERAND
.* THIS OPERAND IS REQUIRED. IT INDICATES THE ADDRESS OF A SUBROUTINE
.* TO BE USED BY THE SEARCH ROUTINE FOR COMPARING THE SEARCH OBJECT
.* WITH A LIST ENTRY. EITHER A STATEMENT LABEL OR A REGISTER MAY BE
.* SPECIFIED.
.*   THE SPECIFIED COMPARISON ROUTINE IS GIVEN THE FOLLOWING INPUTS:
.*       - R14 POINTS TO THE RETURN ADDRESS.
.*       - R15 POINTS TO THE LIST ENTRY TO BE COMPARED AGAINST THE
.*         SEARCH OBJECT.
.*       - R0 THROUGH R6 CONTAIN DATA ON WHICH THE SEARCH ROUTINE IS
.*         DEPENDANT.
.*       - R7 THROUGH R13 CONTAIN WHAT WAS IN THEM PRIOR TO THE START
.*         OF THE SEARCH ROUTINE.
.* ON OUTPUT THE COMPARISON ROUTINE MUST PROVIDE THE FOLLOWING:
.*       - R14 THROUGH R6 MAY NOT BE ALTERED BY THE COMPARISON
.*         ROUTINE.
.*       - R7 THROUGH R13 (EXCEPT THOSE THAT ARE USED AS
.*         PROGRAM BASES) MAY BE USED FREELY SINCE THE SEARCH ROUTINE
.*         RESTORES ALL REGISTERS WHEN IT IS FINISHED.
.*       - THE CONDITION CODE MUST BE SET AS FOLLOWS:
.*             - CC=0 (EQUAL) MEANS THAT THE SEARCH OBJECT MATCHES THE
.*               CURRENT LIST ENTRY.
.*             - CC=1 (LOW) MEANS THAT THE SEARCH OBJECT IS LOWER THAN
.*               THE CURRENT LIST ENTRY.
.*             - CC=2 (HIGH) MEANS THAT THE SEARCH OBJECT IS HIGHER
.*               THAN THE CURRENT LIST ENTRY.
.*
.*   THE SVID= OPERAND
.* USE THIS OPERAND TO SPECIFY THE NAME OF A 16-WORD REGISTER SAVE
.* AREA. IF OMITTED, THEN THE MACRO WILL GENERATE A LOCAL SAVE AREA.
.*
.* INNER MACROS USED - #REGS #TEST #DIE
.*
.*
.*
         GBLA  &#TESERR
         GBLC  &#TESRET(20)
         LCLC  &N,&R,&SAVEA
&N       SETC  'SRCH'
         AIF   (K'&NME EQ 0).GOTNME
&N       SETC  '&NME'
.GOTNME  ANOP
.*
&R       SETC  '&PFIX'
         AIF   (K'&PFIX NE 0).GOTPFIX
         #TEST PFIX=
&R       SETC  '&#TESRET(1)'
         AGO   .DONPFIX
.GOTPFIX #REGS &PFIX,GEN=NO
.DONPFIX ANOP
.*
* BINARY SEARCH ROUTINE
*        INPUTS:
*        - R14 POINTS TO THE RETURN ADDRESS
*        - R15 POINTS TO THE START OF THE LIST TO BE SEARCHED
*        - R0 CONTAINS THE LENGTH OF EACH LIST ENTRY (IN BYTES)
*        - R1 POINTS PAST THE END OF THE LIST
         SPACE 1
* COMPARE ROUTINE INPUTS:
*        - R15 POINTS TO THE LIST ENTRY TO BE COMPARED AGAINST THE
*          SEARCH OBJECT.
*        - R14 POINTS TO THE RETURN ADDRESS.
*        - R14 THROUGH R6 CONTAIN DATA CRITICAL TO THE SEARCH ROUTINE.
*          THEY MUST NOT BE ALTERED BY THE COMPARE ROUTINE.
         SPACE 1
* COMPARE ROUTINE OUTPUTS:
*        - CC=0 (EQUAL) MEANS THAT THE SEARCH OBJECT MATCHES THE
*          CURRENT LIST ENTRY.
*        - CC=1 (LOW) MEANS THAT THE SEARCH OBJECT IS LOWER THAN THE
*          CURRENT LIST ENTRY.
*        - CC=2 (HIGH) MEANS THAT THE SEARCH OBJECT IS HIGHER THAN THE
*          CURRENT LIST ENTRY.
&SAVEA   SETC  '&N.SAVE'
         AIF   (K'&SVID EQ 0).GOTSAVE
&SAVEA   SETC  '&SVID'
.GOTSAVE ANOP
&N       STM   &R.14,&R.13,&SAVEA  SAVE ALL WORK REGISTERS
         AIF   ('&CMPRID' EQ '&CMPRID(1)').NOCMPR1
         #TEST REGS=&CMPRID(1)
         AIF   ( &#TESERR EQ 0 AND '&#TESRET(1)' EQ '2').NOCMPR2
         LR    &R.2,&CMPRID(1)     POINT TO COMPARISON ROUTINE
         AGO   .NOCMPR2
.NOCMPR1 LA    &R.2,&CMPRID        POINT TO COMPARISON ROUTINE
.NOCMPR2 ANOP
         LNR   &R.15,&R.15         GET NEGATIVE SO-LIST
         AR    &R.15,&R.1          GET L'LIST
         SR    &R.1,&R.15          GET SO-LIST
         SR    &R.14,&R.14         CLEAR FOR DIVIDE
         DR    &R.14,&R.0          GET LIST'S ENTRY COUNT
         LTR   &R.4,&R.14          GET INITIAL SEARCH INDEX; WAS THE
*                                  ABOVE DIVIDE EVEN?
         #DIE  NZ,'SEARCH LIST SIZE INCOMPATIBLE WITH LIST ENTRY SIZE'
         LTR   &R.3,&R.15          YES, GET LIST ENTRY COUNT; EMPTY?
         BZ    &N.NULL             YES, GO RETURN "NOT FOUND"
         LA    &R.5,1(,&R.3)       NO, GET INITIAL WIDTH; INSURE ^0
         LA    &R.6,1              GET COMBO OF "1" AND DIRECTION FLAG
         SPACE 1
&N.UP    LCR   &R.6,&R.6           COMPLEMENT FOR TEST
         CR    &R.5,&R.6           WAS PREV WIDTH 1 AND DIRECTION DOWN?
         BE    &N.NFND             YES, SEARCH OBJECT NOT FOUND
&N.UP2   LPR   &R.6,&R.6           NO, SET DIRECTION UP
         AR    &R.5,&R.6           FORCE WIDTH TO ROUND UP UPON DIVIDE
         SRL   &R.5,1              CUT WIDTH IN HALF (ROUND UP)
         AR    &R.4,&R.5           ADVANCE THE SEARCH INDEX
         B     &N.CMPR             PROCEED
         SPACE 1
&N.DOWN  LNR   &R.6,&R.6           SET DIRECTION DOWN
         SR    &R.5,&R.6           FORCE WIDTH TO ROUND UP UPON DIVIDE
         SRL   &R.5,1              CUT WIDTH IN HALF (ROUND UP)
         SR    &R.4,&R.5           RETREAT THE SEARCH INDEX
         SPACE 1
&N.CMPR  BM    &N.UP               SCAN UP IF BELOW THE LIST
         CR    &R.4,&R.3           ABOVE THE LIST?
         BNL   &N.DOWN             YES, MUST SCAN DOWN
         SPACE 1
         LR    &R.15,&R.4          GET CURRENT POSITION INDEX
         MR    &R.14,&R.0          CNVRT TO LIST DISPLACEMENT
         AR    &R.15,&R.1          CNVRT TO ABSOLUTE ENTRY POINTER
         BALR  &R.14,&R.2          LINK TO COMPARISON ROUTINE
         BL    &N.DOWN             TOO HIGH; MUST MOVE DOWN
         BH    &N.UP               TOO LOW; MUST MOVE UP
         SPACE 1
         LCR   &R.6,&R.6           A HIT; COMPLEMENT FOR TEST
         CR    &R.5,&R.6           WAS PREVIOUS WIDTH 1 AND DOWN?
         BE    &N.FND              YES, FOUND LAST OF DUPLICATE KEYS
         LA    &R.5,4              NO, SET TO FWD SCAN PAST DUP KEYS
         B     &N.UP2              LOOP TO SKIP PAST DUP KEYS
         SPACE 1
&N.NFND  LA    &R.15,1(,&R.4)      NOT FOUND; GET INDEX TO INSERT POINT
         MR    &R.14,&R.0          CNVRT TO DISPLACEMENT
&N.NULL  AR    &R.15,&R.1          CNVRT TO ABSOLUTE
         CLI   *,0                 SET CC^=0
&N.FND   ST    &R.15,&SAVEA+12     PRESERVE ENTRY PTR IN R1 SLOT
         LM    &R.14,&R.13,&SAVEA  RESTORE REGISTERS
         BR    &R.14               RETURN TO CALLER WITH CC SET
         AIF   (K'&SVID NE 0).MEND
         SPACE 1
&N.SAVE  DC    16A(0)              REGISTER SAVE AREA
.MEND    MEND
