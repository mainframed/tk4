         MACRO
         MAPVTOCS
         USING *,R7
NOTMOUNT LA    R2,SMINMT .   GET NOT MOUNTED MESSAGE
         LA    R3,L'SMINMT
         B     EXCSLOP
         SPACE
PROCERR  CNVX  RDCCHHR,SMIPCC  .    FORMAT THE BAD CCHHR
         CNVX  RDCCHHR+2,SMIPHH
         CNVX  RDCCHHR+4,SMIPRR
         LA    R2,SMIPROC .   PROCESSING ERROR MSG
         LA    R3,L'SMIPROC
         B     EXCSLOP
         SPACE 2
NEXTDSCB SR    R1,R1
         IC    R1,CCHHR+4 .  GET CURRENT RECORD NUMBER
         LA    R1,1(R1) .    POINT TO NEXT
         STC   R1,CCHHR+4 .   STASH BACK
         CH    R1,HIGHR .    FIT ON TRACK ?
         BNH   MVCCHHR .     GO TO MOVE CORRECT CCHHR INTO REQUEST
         MVI   CCHHR+4,1 .     RESET TO RECORD 1
         LH    R1,CCHHR+2 .   GET TRACK
         LA    R1,1(R1) .    UP IT
         STH   R1,CCHHR+2 .   STASH IT BACK
         CH    R1,HIGHTRK .   FITS ON CYL ?
         BL    MVCCHHR .     GO TO MOVE CORRECT CCHHR INTO REQUEST
         MVC   CCHHR+2(2),ZERO .   CLEAR TRACK #
         LH    R1,CCHHR .    GET CYL. NO.
         LA    R1,1(R1) .    UP
         STH   R1,CCHHR .    STASH BACK
MVCCHHR  MVC   RDCCHHR,CCHHR .    MOVE REQUESTED CCHHR TO READ
         CLC   CCHHR(5),HIGHMARK .  IN USED PART OF VTOC ?
         BHR   R9 .          NO, TAKE END-FILE EXIT
         SPACE 2
*        ROUTINE TO GET A DSCB - CCHHR MOVED TO RDCCHHR, BAL R9
*
READDSCB OBTAIN  DSCB .      GET THE DSCB - SEEK
         CH    R15,H4 .      GOOD COMP CODE ?
         BE    NOTMOUNT .    NOT MOUNTED
         BH    4(R9) .       OTHER ERROR
         B     8(R9) .       NORMAL EXIT
         SPACE 2
ENDSCAN  L     R10,SPCURR .    GET CURRENT DISPLAY LINE ADDRESS AGAIN
         SPLINE , ,          GET A FREE LINE
         BNL   ENDSMI .      END OF PAGE - USE SMI
         MVC   (40-L'EOFMSG)/2(L'EOFMSG,R10),EOFMSG
         B     EXCYES .      EXEUNT
ENDSMI   LA    R2,SMIEOF .   GET EOF MESSAGE
         LA    R3,L'SMIEOF .   AND LENGTH
         B     EXCSLOP .     AND EXIT
         SPACE 2
*        CONDITIONAL PAGE OUTPUT - ONLY IF LINE 2 IS NON-BLANK
*
CONPOUT  L     R1,BUFAD .    GET START OF BUFFER
         CLC   BLANKS,80(R1)   ARE THERE DATA ON FIRST LINE ?
         BE    PTOP .        NO, SKIP PAGE OUTPUTTING
         SPACE 2
*        OUTPUT THE CURRENT PAGE
*
POUT     ST    R9,POUT9 .    SAVE RETURN ADDR.
         XPOUT ,             WRITE 'MORE', ETC.
         B     *+8 .         ENTER ONLY
         B     EXCIN .       LOOK AT NEW INPUT
         L     R9,POUT9 .    RELOAD AGAIN
         SPACE 2
*        INITIALIZE PAGE OUTPUT
*
PTOP     ST    R9,POUT9 .    SAVE RETURN ADDR.
         BALS  R14,BLANKER . CLEAR BUFFER
         SPINIT 0
         L     R1,BUFAD .    GET START OF BUFFER
         MVC   29(L'DSNAM,R1),DSNAM .   PROV. USER DSNAM AS TITLE
         TR    29(L'DSNAM,R1),TRTAB .  MAKE SURE ITS GOOD
         MVC   74(L'VOLSER,R1),VOLSER .   ADD VOL-SER
         SPLINE ,            COND. LINE ADVANCE FOR SMALL SCREEN
         L     R9,POUT9 .    RESTORE RETURN ADDR.
         BR    R9 .          RETURN
         SPACE 2
*        ROUTINE TO MOVE ONE LINE; AND PAGE OUT IF NECESSARY
*
LOUT     STM   R2,R3,LOUT23  .  SAVE CALL REGISTERS
LOUT1    SPMOVE (R2),(R3)
         B     *+6 .         PAGE WRITE NEXESSARY
         BR    R4 .          RETURN, LINE MOVED
         BALS  R9,POUT .     ELSE OUTPUT THE PAGE AND WAIT
         LM    R2,R3,LOUT23 .  RESTORE THE PARM REGISTERS
         B     LOUT1 .       AND MOVE ON TOP OF PAGE
         SPACE 3
DSCB     CAMLST  SEEK,1,2,3  COMPLETED BY EXHCCVTO
SMINMT   SMI    '''ABCXXX'' NOT MOUNTED  '
         ORG   SMINMT+1+SMILOFF .   OVERLAY DATA PORTION
VOLSER   DS    CL6 .         VOL-SER
         ORG   SMINMT+L'SMINMT .    CAN'T USE BLANK ORG
SMIPROC  SMI   'ERROR PROCESSING CCCC.HHHH.RR  '
         ORG   SMIPROC+SMILOFF .   OVERLAY DATA PORTION
         DS    C'ERROR PROCESSING '
SMIPCC   DS    C'CCCC'
         DS    C
SMIPHH   DS    C'HHHH'
         DS    C
SMIPRR   DS    C'RR'
         ORG   SMIPROC+L'SMIPROC
SMIEOF   SMI   '**** END OF DISPLAY ****  '
         ORG   SMIEOF+SMILOFF . REDEFINE
EOFMSG   DC    C'**** END OF DISPLAY ****'
         ORG   SMIEOF+L'SMIEOF
         SPACE 2
POUT9    DC    F'0' .        RETURN ADDR. SAVE WORD
LOUT23   DC    2A(0) .       REGISTER STORAGE
         SPACE
HIGHTRK  DC    H'0' .        HIGH TRK PER CYL
HIGHR    DC    H'0' .        HIGH DSCB RECORD PER TRK
         DS    0H            FORCE ALIGNMENT
HIGHMARK DC    XL5'0' .      DSCB 1 HIGH ADDRESS
F6PTR    DC    XL5'0' .      FIRST FORMAT 6 ADDRESS IN INITIAL PROC.
         DS    0H
CCHHR    DC    XL5'0' .      CURRENT CCHHR FOR SEQUENTIAL PASS OF VTOC
RDCCHHR  DC    XL5'0' .      CCHHR FOR 'READDSCB' ROUTINE
F4PTR    DC    XL5'0' .      CCHHR OF FORMAT 4 DSCB
         SPACE
PF       DC    X'0' .        PROCESSING FLAG FOR INDEX, ETC.
PFIND    EQU   X'80' .       INDEX PAGE REQUESTED
PFION    EQU   X'40' .       INDEX PAGE ONLY
PFRAW    EQU   X'01'         DISPLAY DSCBS IN HEX               GP01008
         SPACE
DSNCLC   CLC   DS1DSNAM(0),DSNMASK .    MASKED DSNAME TEST
DSNLEN   EQU   DSNCLC+1 .    LEN - 1 OF MASK, IF ANY
DSNAM    DC    CL44' ' .     DSNAME FOR SPECIFIC REQUEST PROCESSING
DSNMASK  DC    CL43' ' .     DSN MASK VALUE, IF USED
         SPACE 2
       INSETS  SPINIT,SPMOVE,INHEX,CVH,CNVR,TRTAB
         INSECT
         SPACE 2
WRKINPUT DS    0D .          CAMLST WORK AREA
         DC    XL100'0' .    WORK AREA
         DC    XL100'0' .    WORK AREA
         DC    XL65'0' .     WORK AREA
         SPACE
         ORG   WRKINPUT
     IECSDSL1  1
         SPACE
         ORG   WRKINPUT
     IECSDSL1  2
         SPACE
         ORG   WRKINPUT
     IECSDSL1  3
         SPACE
         ORG   WRKINPUT
DS4DSNAM DS    CL44 .        FORCE OBTAIN IN SAME LOCATION AS FMT 1
         SPACE
     IECSDSL1  4
         SPACE
         ORG   WRKINPUT
     IECSDSL1  5
         SPACE
         ORG   WRKINPUT
     IECSDSL1  6
         SPACE 2
         ORG   WRKINPUT+148+L'DS1DSNAM+5
XVTXWORK DS    0D
         DS    CL256         FORCE WORK SPACE
         ORG
         MEND
