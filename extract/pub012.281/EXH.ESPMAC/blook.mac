         MACRO
&NM      BLOOK &T=,&ERR=*+8,&B=*,&R=,&PFX=,&X=R5,&Y=R6,&Z=R4,          *
               &STRIP=,&ABBR=,&FULL=                            GP13189
         GBLB  &ZZ@BLUK
         GBLC  &MACPLAB,&ZZ@BLUF                                GP08269
.**********************************************************************
.*                                                                   **
.*    Verb lookup routine; see BTAB macro for matching verb defs     **
.*    T     - address of BTAB definitions                            **
.*    X     - pointer for scanning                             (R5)  **
.*    Y     - register pointing at last byte of text           (R6)  **
.*    Z     - register for BTAB scanning                       (R4)  **
.*    R     - address of text                                        **
.*    B     - base address for (b)ddd branching; B=A (absolute)      **
.*            branches to BTAB with BASE=0; B=* (default) branches   **
.*            from CSECT                                             **
.*    ERR   - branch address/register for no match                   **
.*    PFX   - 0-4 character label prefix (default VERB)              **
.*    STRIP - (default) skip leading blanks                          **
.*            =NEVER    process at current input address             **
.*    ABBR  - when specified, accepts matches for abbreviated verbs  **
.*            of any length from original to ABBR value (no default) **
.*            ABBR=3 for 'COMMAND' would match COMMAND, COMMAN,      **
.*            COMMA, COMM, and COM                                   **
.*    FULL  - one or more trailing characters inhibiting shorter     **
.*            compares. No default; common are = and (               **
.*            e.g., FULL='=' (valid are FULL=alphanum; FULL='chars'; **
.*            FULL=C'chars'; and FULL=X'hexchars')                   **
.*            FULL== and FULL='' are valid (= and ' comnpares)       **
.*                                                                   **
.**********************************************************************
.*                                                                   **
.*    X returns next byte after match, or last text + 1 for no match **
.*    R14 is a return register; R15-R1 are work registers.           **
.*                                                                   **
.*    Y unchanged.                                                   **
.*    Z returns last process table entry.                            **
.*                                                                   **
.**********************************************************************
.*                                                                   **
.*    BLOOK expands an in-line subroutine, called by other           **
.*    references. To use in an assembly with multiple, not mutually  **
.*    addressable CSECTs, use a unique PFX in each.                  **
.*                                                                   **
.**********************************************************************
         LCLC  &L,&D,&LAB,&D1,&D2,&D3                           GP13189
         LCLA  &I,&J,&K                                         GP13189
&L       SETC  'L'''
         AIF   ('&ZZ@BLUF' NE '').OLDLAB                        GP08269
&ZZ@BLUF SETC  'VERB'        DEFAULT LABEL                      GP08269
.OLDLAB  ANOP  ,                                                GP08269
         AIF   ('&PFX' EQ '' OR '&PFX' EQ '&ZZ@BLUF').DONLAB    GP08269
&ZZ@BLUF SETC  '&PFX'                                           GP08269
&ZZ@BLUK SETB  0             EXPAND CODE WITH NEW LABELS        GP08269
.DONLAB  ANOP  ,                                                GP08269
&LAB     SETC  '&ZZ@BLUF'                                       GP08269
&NM      MACPARM &Z,&T,NULL==X'FF'
&D       SETC  '('.'&Y'.')'                                      89152
         AIF   ('&D' EQ '&R' OR '&R' EQ '&Y').NOEND              89152
         MACPARM &Y,&R+&L&R-1
.NOEND   AIF   (&ZZ@BLUK).NOTONCE
&ZZ@BLUK SETB  1
         B     &LAB.END      BRANCH AROUND                       88024
&LAB.LOOK SLR  R15,R15       ZERO IC REGISTER                    88024
         AIF   ('&STRIP' EQ 'NEVER').NODEBLK                     89152
&LAB.1   CLI   0(&X),C' '    LOOK FOR NON-BLANK INPUT            88024
         BNE   &LAB.2        OK                                  88024
         LA    &X,1(,&X)     SKIP TO NEXT BYTE
         CR    &X,&Y         REACHED END OF INPUT BUFFER
         BNH   &LAB.1        NO, LOOK FOR NON-BLANK              88024
         BR    R14           RETURN, BUFFER EXHAUSTED
         AGO   .YESBLNK                                          88269
.NODEBLK B     &LAB.2        NO DEBLANKING                       88269
.YESBLNK ANOP  ,                                                 88269
&LAB.CHEK CLC  4(0,&Z),0(&X) MATCHING VERB ?                     88024
&LAB.3   LA    &Z,5(R15,&Z)  BUMP TO NEXT TABLE ENTRY            88024
&LAB.2   CLI   0(&Z),X'FF'   END OF TABLE ?                      88024
         BER   R14           YES, VERB NOT FOUND
         IC    R15,0(,&Z)    LENGTH - 1  OF TABLE ENTRY
         EX    R15,&LAB.CHEK  SAME VERB ?                        88024
         AIF   ('&ABBR' EQ '').NOABBR                           GP13189
         BE    &LAB.MAT                                         GP13189
         LA    R0,1(,R15)    COPY LENGTH                        GP13189
         SH    R0,=AL2(&ABBR)    SHORTER ALLOWED ?              GP13189
         BNP   &LAB.3               NO; TRY NEXT                GP13189
         AIF   ('&FULL' EQ '').LABNKC      SKIP IF NO KEYWORDS  GP13190
&D       SETC  '&FULL'                                          GP13189
&D1      SETC  'C'''                                            GP13189
&D2      SETC  ''''                                             GP13189
&K       SETA  K'&FULL                                          GP13189
&J       SETA  1             STRIDE                             GP13189
         AIF   ('&FULL' EQ '''').LABNKS                         GP13189
         AIF   (&K LT 3).LABNKS                                 GP13189
         AIF   ('&D'(1,2) EQ 'X''').HEXSTR       HEX            GP13189
         AIF   ('&D'(1,2) EQ 'C''').TXTSTR       TEXT           GP13189
         AIF   ('&D'(1,1) NE '''').LABNKS       PLAIN STRING    GP13189
&D       SETC  '&D'(2,&K-2)                                     GP13189
&K       SETA  K'&D                                             GP13189
         AGO   .LABNKS                                          GP13189
.TXTSTR  ANOP  ,             TEXT NOTATION   C' '               GP13189
&D       SETC  '&D'(3,&K-3)                                     GP13189
&K       SETA  K'&D                                             GP13189
         AGO   .LABNKS                                          GP13189
.HEXSTR  ANOP  ,             HEX NOTATION                       GP13189
&D1      SETC  'X'''                                            GP13189
&D       SETC  '&D'(3,&K-3)                                     GP13189
&K       SETA  K'&D                                             GP13189
&J       SETA  2             STRIDE                             GP13189
.LABNKS  LA    R1,4(R15,&Z)  POINT TO LAST BYTE OF VERB         GP13189
&I       SETA  1                                                GP13189
         AIF   (&K GE &J).LABNKL                                GP13189
         MNOTE 4,'BLOOK: MALFORMED FULL=&FULL'                  GP13189
         AGO   .LABNKC                                          GP13189
.LABNKL  ANOP  ,                                                GP13189
&D3      SETC  '&D'(&I,&J)                                      GP13189
         AIF   (&J NE 1 OR ('&D3' NE '''' AND '&D3' NE '&&')).LABNDB
.*TEST   AIF   ('&D'(&I,&J+1) NE '&D3').LABOOPS                 GP13189
&I       SETA  &I+1                                             GP13189
.LABOOPS ANOP  ,             USER ERROR                         GP13189
&D3      SETC  '&D3'.'&D3'                                      GP13189
.LABNDB  CLI   0(R1),&D1&D3&D2    SPECIAL?                      GP13189
         BE    &LAB.3          YES; NO ABBR                     GP13189
&I       SETA  &I+&J                                            GP13189
         AIF   (&I LE &K).LABNKL      TRY AGAIN                 GP13189
.LABNKC  LR    R1,R15                                           GP13189
&LAB.ALP BCTR  R1,0                                             GP13189
         EX    R1,&LAB.CHEK  MATCH ?                            GP13189
         BE    &LAB.MA1        YES; GET OUT                     GP13189
         BCT   R0,&LAB.ALP   SHORTER ALLOWED ?                  GP13189
         B     &LAB.3          NO; TRY NEXT                     GP13189
         AGO   .DOABBR                                          GP13189
.NOABBR  BNE   &LAB.3        NO, KEEP LOOKING                    88024
.DOABBR  ANOP  ,                                                GP13189
&LAB.MA1 LA    R15,1(,R15)   SET FOR CORRECT INPUT POSITION     GP13189
&LAB.MAT LA    &X,1(R15,&X)  POINT TO FIRST BYTE PAST VERB
         ICM   R15,7,1(&Z)   LOAD DISPLACEMENT ADDRESS
         B     4(,R14)       RETURN FOUND CONDITION
&LAB.END DS    0H                                                88024
.NOTONCE AIF   ('&STRIP' EQ 'NO' OR '&STRIP' EQ 'NEVER').STRIPPD 89152
         MACPARM R14,&LAB.LOOK,OP=BAL                           GP04234
         AGO   .REJOIN                                          GP04234
.STRIPPD AIF   ('&STRIP' EQ 'NEVER').STRIPPR                     89152
         MACPARM R15,0       CLEAR R15 FIRST                     89152
.STRIPPR MACPARM R14,&LAB.LOOK,OP=BAL                           GP10164
.REJOIN  AIF   ('&T' EQ '').NOERR
         AIF   ('&ERR' EQ '*+8' AND '&B' EQ 'A').S6
         B     &ERR
         AGO   .S8
.S6      B     *+6           SKIP OVER 'BR A'
.S8      ANOP
         AIF   ('&B' EQ '').NOERR
         AIF   ('&B' EQ '*').RELDEF
         AIF   ('&B'(1,1) EQ '(').REL
         AIF   ('&B' EQ 'A').ABS
         MNOTE 8,'B NOT A OR (REG)'
         AGO   .NOERR
.REL     B     0(&B(1),R15)
         AGO   .NOERR
.RELDEF  B     &SYSECT.(R15)
         AGO   .NOERR
.ABS     BR    R15
.NOERR   MEND  ,
