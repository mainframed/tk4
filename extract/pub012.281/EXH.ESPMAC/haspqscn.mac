         MACRO
&N  HASPQSCN &PFX=HSQ,&REP=R9,&JQE=R7,&JOE=,&LIM=99,&USER=,            *
               &CPUID=CHECK,&ERRB=                             SHRHASP
         GBLC  &MODEL                                            *TSM*
         GBLC  &HASP                                           SHRHASP
         GBLC  &VERSION,&HASPQEX,&LOCAL
         LCLA  &LLIM,&CPUQ
         LCLB  &OLD,&FLIM
         LCLB  &NJI          NJI SUPPORT WITHOUT SHRHASP         <NJI>
         LCLC  &P                                                *TSM*
&P       SETC  '&PFX'                                            *TSM*
         AIF   ('&VERSION' NE '').VWHICH
.NOVERS MNOTE 8,' &&VERSION=''&VERSION'' INVALID; USE $GLOBAL/$HASPGEN'
         MEXIT
.VWHICH  AIF   ('&VERSION'(1,1) EQ '4' OR '&VERSION'(1,1) EQ '5').VNEW
&OLD     SETB  1
         AGO   .VNEW2                                            <NJI>
.VNEW    AIF   (K'&VERSION LT 4 OR '&HASP' EQ 'SHR').VNEW2       <NJI>
         AIF   ('&VERSION'(4,1) NE '/').VNEW2  SKIP IF NOT NJI?  <NJI>
&NJI     SETB  1             NJI USES V 4.0/1.N FORM             <NJI>
.VNEW2   AIF   ('&LIM' EQ '' OR '&LIM' EQ 'NO').NOLIM            <NJI>
&FLIM    SETB  1
&LLIM    SETA  &LIM
         AIF   (&LLIM GT 0).LOWLIM
&LLIM    SETA  1
.LOWLIM  AIF   (&LLIM LT 128).HILIM
         AIF   (&LLIM LT 256).HILIMT
&LLIM    SETA  255           SET MAX
.HILIMT  AIF   ('&HASP' NE 'SHR').HILIM
&LLIM    SETA  127
.HILIM   AGO   .CMLIM
.NOLIM   ANOP  ,
.CMLIM   AIF   ('&USER' NE 'DQ').NQLIM
&LLIM    SETA  33 .          MAX FOR V3 DQ
&FLIM    SETB  1 .           CHECK LIMIT
         AIF   (&OLD).NQLIM
&LLIM    SETA  0
&FLIM    SETB  1 .           DQ PUTS ALL ON 'REM' Q
.NQLIM   AIF   ('&HASP' NE 'SHR').NQSHR
&CPUQ    SETA  128 .         OFF-CPU ID/ON-REMOTE #            SHRHASP
         AIF   (&LLIM LT 127).NQSHR
&FLIM    SETB  0 .           SKIP LIMIT CHECK FOR 255
.NQSHR   ANOP  ,
&N       LAT   &JQE,HASPHCT,&PFX.SEND .  GET HCT OR EXIT
         NUSE  $HCT,&JQE
         NEED  $JQE
         AIF   (&OLD).NOJOT
         MVC   HS4JOTAD,$JOTABLE .  SAVE JOT ADDRESS
         AIF   (&NJI).CPICOM  NJI USES OFFSET FORM OF QUEUE      <NJI>
.NOJOT   AIF   ('&HASP' NE 'SHR').SHRH01                       SHRHASP
         AIF   ('&CPUID' EQ '' OR '&CPUID' EQ 'NO').CPICOM
         AIF   ('&CPUID' EQ 'CHECK').CPIDEF
         MVC   HQINCPUN+1(1),&CPUID .  COPY REQUESTED CPU ID
         AGO   .CPICOM
.CPIDEF  MVC   HQINCPUN+1(1),$CPUNO+1     SAVE CPU ID          SHRHASP
.CPICOM  L     &JQE,$JOBQPTR      POINT TO JOBQUEUE            SHRHASP
         ST    &JQE,HQINJOBQ       SAVE QUEUE START            SHRHASP
         DROP  &JQE
         SPACE 1                                               SHRHASP
&PFX.LOOP LH   R15,QUECHAIN(,&JQE) .   OFFSET TO NEXT JQE
         LTR   R15,R15       LEGIT ?
         AIF   ('&ERRB' EQ '').DEFERRB
         BZ    &ERRB .       CHAIN ERROR - TERMINATE SCAN
         AGO   .COMERRB
.DEFERRB BZ    &PFX.SEND .   CHAIN ERROR - TERMINATE SCAN
.COMERRB AR    &JQE,R15      POINT TO NEXT ELEMENT             SHRHASP
         LA    &REP,&PFX.LOOP   SET REPEAT ADDRESS             SHRHASP
         C     &JQE,HQINJOBQ    END OF CHAIN ?                 SHRHASP
         BNH   &PFX.SEND     YES; EXIT                         SHRHASP
         AIF   (&NJI).SHRH01B JOIN V4 CODE                       <NJI>
         AIF   ('&CPUID' EQ '' OR '&CPUID' EQ 'NO').SHRH01A    SHRHASP
         LA    R1,4 .        LOOP FOUR TIMES
         XR    R15,R15 .     MAKE INDEX REGISTER OFFSET
&PFX.CPU1 MVI  HQINCPUN,0 .  CLEAR FOR MVN
         EX    0,&PFX.CPUI(R15) .  MOVE CPU REFERENCE BYTE
         NI    HQINCPUN,X'87'   .  DELETE ALL BUT CPU ID AND FLAG
         BZ    &PFX.CPU2 .   SKIP IF NO ID
         CLC   HQINCPUN(1),HQINCPUN+1  REQUESTED ID ?
         BE    &PFX.CPUN .   YES - PROCEED
&PFX.CPU2 LA   R15,6(,R15) . UP INDEX REGISTER
         BCT   R1,&PFX.CPU1  TRY NEXT CPU REFERENCE FIELD
         BR    &REP .        ELSE SKIP JOB
&PFX.CPUI MVN  HQINCPUN(1),QUECPUNO(&JQE)                      SHRHASP
         MVN   HQINCPUN(1),QUECPURT(&JQE)                      SHRHASP
         MVC   HQINCPUN(1),QUEPUNRT(&JQE) TRY PUNCH ROUTE      SHRHASP
         MVN   HQINCPUN(1),QUEFLAG2(&JQE) TEST SUBMITTOR'S ID  SHRHASP
&PFX.CPUN EQU  *            PROBABLY THIS CPU                  SHRHASP
.SHRH01A AGO   .SHRH01B                                        SHRHASP
.SHRH01  ANOP  ,                                               SHRHASP
         LA    &JQE,$JQENT-QUECHAIN  POINT TO FIRST JQE, IF ANY
         DROP  &JQE
         SPACE 1
&PFX.LOOP LA   &REP,&PFX.LOOP .    GET NORMAL REPEAT ADDRESS
         LAT   &JQE,QUECHAIN(&JQE),&PFX.SEND  GET NEXT JQE, IF ANY
.SHRH01B AIF   ('&LOCAL' NE 'AMS' OR  &OLD).SHRH01C              <NJI>
         LA    R1,7          SET FOR SEVEN QUEUE BITS            <NJI>
         AGO   .SHRH01D                                          <NJI>
.SHRH01C LA    R1,6          SET FOR SIX MAJOR QUEUE BITS        <NJI>
.SHRH01D AIF  ('&MODEL' EQ '360').BXLE360                        *TSM*
         LR    R15,R1        MAKE LOW BITS NON-ZERO FOR BXLE     *TSM*
         ICM   R15,8,QUETYPE(&JQE)   GET HASP QUEUE TYPE         *TSM*
         AGO   .BXLECOM                                          *TSM*
.BXLE360 XR    R15,R15       CLEAR IC REGISTER                   *TSM*
         IC    R15,QUETYPE(,&JQE)  GET HASP QUEUE TYPE
         SLL   R15,24        KILL QENTBY
         OR    R15,R1        MAKE LOW BITS NON-ZERO FOR BXLE
.BXLECOM LA    R14,HQINBITS  GET PROCESSING TABLE                *TSM*
&PFX.QBIT BXLE R15,R15,&PFX.QTYP  BRANCH IF ON THIS QUEUE
         LA    R14,1(,R14)   TRY NEXT QUEUE
         BCT   R1,&PFX.QBIT
         BR    &REP          IGNORE IF NOT FOUND (E.G. PURGE)
&PFX.QTYP IC   R1,0(,R14)    INSERT QUEUE TYPE / BRANCH OFFSET
         TM    0(R14),X'80'  BRANCH OFFSET ?
         BZ    &PFX.STOR     NO; R1 HAS CORRECT QUEUE NUMBER
         B     *+4-128(R1)   BRANCH TO BRANCH
         BR    &REP          IGNORE THIS QUEUE
         NOPR  0               FOR ALIGNMENT
         B     &PFX.EXQT     TEST XEQ HOLD
         AIF   (&OLD OR '&LOCAL' NE 'AMS').QBITINP               78137
         B     &PFX.QINP     TEST INPUT/XFER QUEUE               78137
         AGO   .QBITDON                                          78137
.QBITINP AIF   (NOT &OLD).QBITDON
         B     &PFX.PUNC     TEST PUNCH QUEUE
.QBITDON ANOP  ,
*        B     &PFX.PRTT     TEST PRINT QUEUE
         AIF   (&OLD).DOOLD
&P.PRTT  L     R15,HASPHCT   GET HCT BACK
         LR    R14,&JQE .    COPY JQE ADDRESS
         S     R14,$JOBQPTR-HCTDSECT(,R15)    MAKE JQE OFFSET
         ST    R14,HS4JQOF . SAVE OFFSET
         NEED  $JOT
         LA    R14,JOTCLSQ-JOTDSECT .  GET JOT CLASS PTRS
         A     R14,HS4JOTAD .  GET CLASS TABLE
         LA    R15,36 .      SCAN 36 CLASSES
         LH    R0,QUEJOECT(,&JQE) .    # OF JOES
&PFX.JOL LR    &JOE,R14 .    SET TO NEXT CLASS CHAIN             78137
&PFX.JO0 LTR   R0,R0 .       ANY MORE JOES ?                     78137
         BNP   &PFX.LOOP .   NO; JOB DONE                        78137
         NUSE  $JOE,&JOE
&PFX.JOE LH    &JOE,JOENEXT . GET NEXT JOE
         LTR   &JOE,&JOE .   END OF CHAIN ?
         BZ    &PFX.JOI .    YES - DO NEXT CLASS
         A     &JOE,HS4JOTAD MAKE ADDRESS
         CLC   HS4JQOF,JOEJQE SAME JOB ?
         BNE   &PFX.JOE .    NO; TRY NEXT
         LH    R1,JOECHAR .  GET CHARACTERISTICS
         LTR   R1,R1 .       ANY ?
         BNZ   &PFX.JOC .    OK
         BCT   R0,&PFX.JOE . ELSE GET NEXT JOE
         B     &PFX.LOOP .   JOB NOT AVAILABLE
         SPACE 1
&PFX.JOC LA    &REP,&PFX.JOY RECURSION ENTRY
         SH    R0,H1 .       SET NEW JOE COUNT
         BP    *+8 .         OK; MORE
         LA    &REP,&PFX.LOOP ELSE GO TO NEW JOB AFTER
         STM   R14,R0,HS4CLAD SAVE REGS FOR RECURSION
         ST    &JOE,HS4CLOD  SAVE JOE                            78137
         LA    R1,36+HQOA .  PREPARE TO MAKE CLASS
         SR    R1,R15 .      = CLASS VALUE
         IC    R15,QUEPRTRT(,&JQE)  GET PRINT ROUTING
         LA    R14,HQOB .    GET HASP STANDARD PUNCH CLS
         CR    R14,R1 .      PUNCH B ?
         BE    &PFX.JOU .    YES - USE PUNCH ROUTE
         LA    R14,HQOK .    HASP STD REMOTE PUNCH K ?
         CR    R14,R1 .      PUNCH ?
         BNE   &PFX.JOR .    ASSUME PRINT ROUTING
&PFX.JOU IC    R15,QUEPUNRT(,&JQE) .  USE PUNCH ROUTING
         AIF   (NOT &NJI).NJINORT                                78016
&PFX.JOR TM    JOEFLAG,$JOEIRTE .  ROUTING FLAG ?                78016
         BO    *+8 .         YES - JQE ROUTE                     78016
         IC    R15,JOEROUT   ELSE USE SPECIFIC ROUTE             78016
         AGO   .NJIROUT                                          78016
.NJINORT ANOP  ,                                                 78016
&PFX.JOR TM    JOEROUT,$JOEIRTE .  ROUTING FLAG ?
         BO    *+8 .         YES - JQE ROUTE
         IC    R15,JOEROUT+1 ELSE USE SPECIFIC ROUTE
.NJIROUT LTR   R15,R15 .     NON-LOCAL ?                         78016
         BZ    &PFX.STOR .   LOCAL - R1 HAS CLASS
         AIF   ('&LOCAL' NE 'CCSI').NOOBS   OBS WYLBUR           79120
         LA    R1,3          'REMOTE' FETCH QUEUE NUMBER         79120
         CR    R15,R1        IS IT ON FETCH ?                    79120
         BNE   *+12                                              79120
         LA    R1,HQFCH      SET FETCH QUEUE                     79120
         B     &PFX.STOR     AND EXIT WITH IT                    79120
.NOOBS   AIF   ('&USER' EQ 'DQ').DODQN                           79120
         AIF   (NOT &FLIM).LIMPRPU
         LA    R1,&LLIM .    GET REMOTE LIMIT
         CR    R15,R1 .      OVER LIMIT ?
         BNH   *+6 .         NO - LEAVE IT
         XR    R15,R15 .     ELSE SET UNSPECIFIED REMOTE
.LIMPRPU LA    R1,HQREM(,R15) . CONVERT TO REMOTE #
         AGO   .DODQN2
.DODQN   ANOP  ,
&PFX.JOQ LA    R1,HQREM .    MAKE UNSPECIFIED REMOTE
.DODQN2  B     &PFX.STOR .   RETURN R1=REMOTE
         SPACE 1
&PFX.JOI LA    R14,2(,R14) . SET NEXT CLASS ENTRY
         BCT   R15,&PFX.JOL  DO NEXT CLASS
         B     &PFX.LOOP .   ELSE IGNORE JOB
         SPACE 1
&PFX.JOY LM    R14,R0,HS4CLAD  RELOAD REGS FOR RECURSION
         L     &JOE,HS4CLOD  RESTORE PRIOR JOE                   78137
         B     &PFX.JO0 .    LOCATE NEXT JOE                     78137
         AIF   ('&LOCAL' NE 'AMS').DOCOM                         78137
&PFX.QINP LA   R1,HQINP      SET FOR INPUT QUEUE                 78137
         TM    QUETYPE(&JQE),1  NJI XFER Q ?                     78137
         BZ    &PFX.STOR                                         78137
&PFX.XFER LA   R1,HQPLT      TEMP - 'PLOT' QUEUE                 78137
         B     &PFX.STOR                                         78137
         AGO   .DOCOM
.DOOLD   ANOP  ,             VERSION 3 CODE
&PFX.PRTT LA   R1,HQOA       PROVISIONALLY SET DEFAULT FORMS, LOCAL
         TM    QUEFORMS(&JQE),X'FF'  REALLY DEFAULT FORMS ?
         BO    *+8           PRESUMABLY
         LA    R1,HQOC       ELSE SET SPECIAL FORMS
         LA    R14,QUEPRTRT(,&JQE)  POINT TO ROUTE FIELD
         AIF   ('&LOCAL' NE 'DOC').DODOC1                   DOC ** ATS
         CLI   0(R14),255    ATS ROUTING ?                         ATS
         BNE   &PFX.PRPU     NO; DO COMMON                         ATS
         LA    R1,HQFCH      ATS - SET FETCH QUEUE                 ATS
         B     &PFX.STOR     AND DISPLAY                           ATS
         AGO   .DODOC2                                      DOC ** ATS
.DODOC1  B     &PFX.PRPU     CHECK ROUTING
.DODOC2  ANOP  ,
&PFX.PUNC LA   R1,HQOB       SET LOCAL PUNCH
         LA    R14,QUEPUNRT(,&JQE)  POINT TO PUNCH ROUTE
&PFX.PRPU CLI  0(R14),0      LOCAL JOB ?
         BE    &PFX.STOR     YES; SHOW LOCAL QUEUE
         IC    R1,0(,R14)    GET REMOTE QUEUE
         AIF   ('&HASP' NE 'SHR').NOSHR3
         LA    R15,&CPUQ     LOAD REMOTE INDICATOR BIT
         SR    R1,R15        SUBTRACT OUT
         BP    *+12 .        REMOTE - PROCESS
         LA    R1,HQOUT .    ELSE SET UNDEQUEUED OUTPUT
         B     &PFX.STOR
.NOSHR3  AIF   (NOT &FLIM).PRPULIM
         LA    R15,&LLIM     LOAD MAX ACCEPTED REMOTE NUMBER
         CR    R1,R15        THIS EXCEEDS LIMIT ?
         AIF   ('&USER' EQ 'DQ').PRPUDQ
         BNH   *+6           NO; USE IT
         XR    R1,R1         ELSE PUT ON UNSPECIFIED REMOTE QUEUE
.PRPULIM LA    R1,HQREM(,R1)  MAKE REMOTE NUMBER
         B     &PFX.STOR     AND GIVE TO USER
         AGO   .DOCOM
.PRPUDQ  BNH   *+8           NO; USE IT
         LA    R1,HQREM-HQOC  ELSE PUT ON UNSPECIFIED REMOTE QUEUE
         LA    R1,HQOC(,R1)  MAKE REMOTE NUMBER
         B     &PFX.STOR     AND GIVE TO USER
.DOCOM   SPACE 1
         AIF   ('&HASPQEX' EQ 'DEFINED').DEFEND
&HASPQEX SETC  'DEFINED'
         SPACE 2
*        EQUATES FOR CONVERSION TO OS CLASSES
         SPACE 1
HQHOLD   EQU   1 .           HOLD QUEUE NUMBER
HQINP    EQU   2 .           INPUT READER QUEUE
HQOA     EQU   3 .           LOCAL PRINT, NO FORMS - CLASS A
HQOB     EQU   4 .           LOCAL PUNCH - OS CLASS B
HQOC     EQU   5 .           LOCAL PRINT WITH FORMS - OS CLASS C
HQINQ    EQU   39 .          EXECUTING; ALSO 1 LESS THAN OS INPUT CLASS
HQPLT    EQU   76 .          SETUP / AMS PLOT QUEUE
HQFCH    EQU   77 .          FETCH QUEUE
HQOUT    EQU   78 .          V4 UNDEQ O/P / SHR V3 CPU ROUT O/P
HQREM    EQU   79 .          REMOTE OUTPUT ENTRIES
         AIF   (&OLD).DEFDC
HQOK     EQU   13 .          PUNCH CLASS K
HQOP     EQU   18 .          AMS PUNCH CLASS P
         SPACE 1
HS4JOTAD DC    A(0) .        $JOTABLE ADDRESS
HS4JQOF  DC    A(0) .        CURR. JQE OFFSET IN $JOBQ
HS4CLAD  DC    3A(0) .       JOE RECURSION SAVE AREA
HS4CLOD  DC    A(0)          SAVE JOE                            78137
         AIF   (NOT &NJI).DEFDC  SKIP IF NOT NJI ALONE           <NJI>
HQINJOBQ DC    A(0)          JOBQPTR SAVER                       <NJI>
.DEFDC   SPACE 1
HQINQOFF DC    AL1(HQINQ,HQINQ+9,HQINQ+17,HQINQ+27) . FINAGLES
         AIF   ('&HASP' NE 'SHR').SHRH04                       SHRHASP
HQINJOBQ DC    A(0)          JOBQPTR SAVER                     SHRHASP
HQINCPUN DC    H'0'          TWO BYTE CPU COMPARE WORK FIELD   SHRHASP
.SHRH04  AIF   (&OLD).OLDBITS                                  SHRHASP
* QUEUES :       40 XEQ   20 INP 10   8 FCH 4 OUT  2 HARDCPY
HQINBITS DC    AL1(128+4,HQINP,HQPLT,HQFCH,HQOUT,128+8,HQFCH)    78137
         AIF   ('&LOCAL' NE 'AMS').COMBITS                       <NJI>
         ORG   HQINBITS      DEFINE FOR NJI                      78137
         DC    AL1(128+4,128+8,HQPLT,HQFCH,HQOUT,128+12,HQFCH)   78137
         AGO   .COMBITS
.OLDBITS ANOP  ,
*               40 XEQ  20 INP  10   8 FCH  4 PRT   2 PUN
HQINBITS DC    AL1(128+4,HQINP,HQPLT,HQFCH,128+12,128+8)
.COMBITS ANOP  ,
         SPACE 1
.DEFEND  ANOP  ,
&PFX.EXQT LA   R1,HQINQ      PROVISIONALLY SET EXECUTING
         TM    QUETYPE(&JQE),QENTBY  EXECUTING ?
         BNZ   &PFX.STOR     YES; SHOW AS SUCH
         LA    R1,HQHOLD     PROVISIONALLY SET HOLD QUEUE
         TM    QUEFLAGS(&JQE),QUEHOLD1  SPECIFIC HOLD ?
         AIF   (&OLD OR '&LOCAL' NE 'AMS').NOEXFR                78137
         ORG   *-4                                               78137
         TM    QUEFLAGS(&JQE),QUEHOLD1+QUEHOLDT                  78137
.NOEXFR  BNZ   &PFX.HOLD     YES; RETURN HOLD QUEUE              78137
&PFX.EXEC LA   R15,15 .      LOAD MASK VALUE
         IC    R1,QUETYPE(,&JQE) .   GET HASP QUEUE (1-15)
         LR    R14,R1 .      COPY FLAGS
         NR    R1,R15 .      MASK OUT TO GET NUMERICS ONLY
         SRL   R14,2 .       PARTIAL SHIFT TO MASK X'C0' OUT
         NR    R14,R15 .     MASK OUT HIGH TWO BITS
         SRL   R14,2 .       GET ONLY BITS 2,3 INTO LOW POSITIONS
         IC    R14,HQINQOFF(R14) .   GET OFFSETS
         AR    R1,R14 .      MAKE TRUE OS QUEUE NUMBER
         SPACE 1
 MNOTE *,' PLEASE DEFINE LABELS &PFX.STOR, &PFX.HOLD AND &PFX.SEND'
         SPACE 2
         MEND
