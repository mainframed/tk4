         MACRO ,
&NM      MDEFHEAD &LANG=0001,&PFX=,&VERID=V0R9,&SECT=,&TYPE=,          *
               &RENT=YES,    (OPTIONAL RENT=NO SLIGHTLY FASTER)        *
               &LENID=8,     MAXIMUM MESSAGE ID LENGTH                 *
               &UDATA=0,     AVAILABLE TO DESIGNER                     *
               &DOFFLEN=2,   LENGTH OF A DICTIONARY OFFSET ENTRY       *
               &MOFFLEN=2,   LENGTH OF A MESSAGE POINTER OFFSET        *
               &WARN=Y,      Y OR N FOR SORTED MESSAGE LIST WARNING    *
               &ID=CLC,      CLC OR MASK - ID MATCH                    *
               &COM='U.S. ENGLISH / EBCDIC'
.**********************************************************************
.*                                                                    *
.* MDEFHEAD - THIS MACRO IS THE FIRST IN A MESSAGE DEFINITION MODULE. *
.*       ONLY ONE IS PERMITTED PER ASSEMBLY, AND IT IS ANTICIPATED    *
.*       THAT EACH MESSAGE MODULE WILL BE COMPLETE FOR ONE PRODUCT.   *
.*                                                                    *
.*   AFTER MDEFHEAD, USE ONE MDEF STATEMENT PER MESSAGE.              *
.*   THE MODULE IS COMPLETED WITH THE MDEFEND MACRO (AND AN END CARD) *
.*                                                                    *
.*   PARAMETERS:                                                      *
.*                                                                    *
.*   SECT=  EXPANDS IN-LINE TEXT AND RSECT STATEMENTS                 *
.*   SECT=DSECT  EXPANDS A MAPPING OF THE MODULE HEADER AREA.         *
.*       NOTE THAT THE ENTRIES PRIOR TO POINT ARE VARIABLE LENGTH.    *
.*       TO GET CORRECT RESULTS, LOAD THE FIRST FOUR BYTES, MASK WITH *
.*       X'00000FFF' (RETAIN ONLY DISPLAVEMENT), AND THE LOAD ADDRESS *
.*       AND USE THAT ADDRESS FOR A USING MTVPOINT                    *
.*                                                                    *
.*   LANG=  ANY VALUE LEGAL IN AN A CONSTANT. NOT USED, NOT CHECKED.  *
.*                                                                    *
.*   PFX=   WITH SECT=DSECT, THE LABEL PREFIX                         *
.*          OTHERWISE, THE PREFIX FOR GENERATED MESSAGE IDENTIFIERS   *
.*                                                                    *
.*   TYPE=  USE C OR G(NOT SUPPORTED) - GLOBAL DC TYPE                *
.*                                                                    *
.*   VERID= VERSION IDENTIFIER (I.E., V_R_)                           *
.*                                                                    *
.*   LENID= MAXIMUM MESSAGE IDENTIFIER LENGTH. LONGER IDS WILL FAIL.  *
.*          SHORTER ONES ARE LEFT-JUSTIFIED AND BLANK PADDED          *
.*                                                                    *
.*   DOFFLEN=2 (LEGAL ARE 2, 3, AND 4) LENGTH OF DICTIONARY OFFSET    *
.*          ENTRY. USE 2 FOR SMALL MODULES, 3 FOR LARGE.              *
.*                                                                    *
.*   MOFFLEN=2 (LEGAL ARE 2, 3, AND 4) LENGTH OF MESSAGE PTR OFFSET   *
.*          ENTRY. USE 2 FOR SMALL MODULES, 3 FOR LARGE.              *
.*                                                                    *
.*   COM=   ARBITRARY TEXT TO IDENTIFY THE MODULE IN A DUMP.          *
.*                                                                    *
.*   ID=    CLC or MASK - compare request to XMSG list.               *
.*                                                                    *
.*   UDATA= ANY TEXT LEGAL IN AN A CONSTANT.                          *
.*                                                                    *
.**********************************************************************
.*                                                                    *
.*   PRODUCES:  RSECT,AM31,RMANY WITH SECT=,  DSECT WITH SECT=DSECT   *
.*     RSECT NAME MUST APPEAR ON MACRO INVOCATION                     *
.*     DSECT NAME USES LABEL. IF NONE, DEFAULTS TO MTVDSECT, AND      *
.*              PFX DEFAULTS TO MTV                                   *
.*                                                                    *
.*   PFX.BCODE  BRANCH TO MESSAGE BUILD CODE                          *
.*   PFX.POINT  LABEL FOR USING                                       *
.*   PFX.UDAT   USER DATA                                             *
.*   PFX.LANG   LANGUAGE INDICATOR                                    *
.*   PFX.MPTR   1/3 FIRST MESSAGE POINTER ADDRESS      ×              *
.*   PFX.MPLN   2/3 LENGTH OF MESSAGE POINTER (2,3,4)  ×  BXLE        *
.*   PFX.MPND   3/3 LAS DEFINED MESSAGE POINTER        ×              *
.*   PFX.@MSG   ADDRESS OF MESSAGE RSECT                              *
.*   PFX.@DIC   ADDRESS OF DICTIONARY RSECT                           *
.*   PFX.LMID   MAXIMUM LENGTH OF A MESSAGE IDENTIFIER                *
.*   PFX.LMOF   SIZE OF MESSAGE OFFSET (2,3,4)                        *
.*   PFX.LDOF   LENGTH OF MESSAGE OFFSET LIST ENTRY                   *
.*                                                                    *
.*   TO LOCATE A MESSAGE:                                             *
.*                                                                    *
.*   CALCULATE ADDRESS OF PFX.POINT                                   *
.*   LM R1,R3,PFX.MPTR - USE BXLE OR (IF ORDERED) BINARY TABLE LOOKUP *
.*     RESULT IS POINTER TO MESSAGE DEFINITION:                       *
.*     (2,3,4 BYTE) OFFSET TO MESSAGE WORD LIST; MESSAGE ID           *
.*     WORDLIST OFFSET IS OFFSET FROM MESSAGE RSECT IN PFX.@MSG       *
.*   WORDLIST: (2,3,4 BYTE EACH): NUMBER OF ENTRIES FOLLOWING;        *
.*     A) OFFSET FROM ADDR IN PFX.@DIC TO WORD IN DICTIONARY          *
.*     B) CODE (>ZZDICMX) FOR SPECIAL FUNCTION (DEFAULT IS 48000)     *
.*                                                                    *
.*   DICTIONARY ENTRY:                                                *
.*     (1 BYTE) PHYSICAL LENGTH OF TEXT                               *
.*     (1 BYTE) LOGICAL LENGTH OF TEXT                                *
.*     (1 BYTE) TYPE (C, G, X)                                        *
.*     (PHYS. LEN) QUOTED STRING                                      *
.*                                                                    *
.**********************************************************************
         COPY  MDEFGBL
         LCLC  &P,&LBL,&OPDS,&MYSECT
.*  ESTABLISH GLOBAL VALUES
&ZZDOFLN SETA  &DOFFLEN      LENGTH OF OFFSET WORD - DICTIONARY LOOKUP
&ZZMOFLN SETA  &MOFFLEN      LENGTH OF OFFSET WORD - MESSAGE LOOKUP
&ZZIDLEN SETA  &LENID
&ZZMDTYP SETC  '&TYPE'       GLOBAL DC ATTRIBUTE (C OR G)
&LBL     SETC  '&NM'
&P       SETC  '&PFX'
.*  CHECK MDEFHEAD USAGE - BY DESIGN, ONE PER MODULE. (IGNORE IF DSECT)
         AIF   ('&SECT' EQ 'DSECT').UNFORKD
&ZZMGLO  SETC  (&LENID)'9'   LOWEST ID TO DATE
&ZZMGHI  SETC  ''            HIGHEST MESSAGE ID TO DATE
&ZZMGPRE SETC  ''            PREVIOUS MESSAGE ID
&ZZMGSRT SETC  'IS'          TABLE IS IN SEQUENCE (?)
&ZZLNGIX SETA &ZZLNGIX+1
         AIF   (&ZZLNGIX LE 1).UNFORKD
         MNOTE 4,'ONLY ONE MDEFHEAD PER MODULE IS SUPPORTED.'
.UNFORKD AIF   ('&SECT' EQ 'DSECT').MAPPER
         AIF   ('&P' NE '').UPFX
.*  SET DEFAULT NAME (MTVDSECT) AND PREFIX (MTV) FOR SECT=DSECT ONLY
&P       SETC  'MTV'         MESSAGE TABLE VECTOR MAPPING
.UPFX    AIF   ('&NM' NE '').HAVELBL
&LBL     SETC  'MTVDSECT'
.HAVELBL AIF   ('&NM' NE '').HAVEMOD
         MNOTE 4,'MDEFHEAD SHOULD HAVE A NAME FIELD'
.*  EXPAND RSECT FOR MODULE HEADER
.HAVEMOD ANOP  ,
&NM      CSECT ,
&NM      AMODE 31
&NM      RMODE ANY
&ZZTABNM SETC  '&NM'
&OPDS    SETC  ''
&MYSECT  SETC  '&NM'                                            GP16002
         AIF   ('&P' NE '').COMGO
&P       SETC  '&NM'(1,3)    IF NO PREFIX - CHEAT AND USE PRODUCT NAME
         AGO   .COMGO
.*  ELSE SET DSECT HEADER
.MAPPER  AIF   ('&P' EQ '').DPFX  MAP THE MESSAGE TABLE HEADER
&P       SETC  'MTV'         MESSAGE TABLE VECTOR MAPPING
.DPFX    AIF   ('&NM' NE '').HAVESCT
&LBL     SETC  'MTVDSECT'
.HAVESCT ANOP  ,
&LBL     DSECT ,             MAP THE MESSAGE TABLE HEADER
&OPDS    SETC  '0) '         PREVENT UNDEFINED ERRORS
.*   CHECK FOR OVERRIDE OF OUT-OF-SEQUENCE WARNING
.*
.COMGO   AIF   (T'&WARN EQ 'O').GETWORD                         GP13237
&ZZMGWRN SETB  (&ZZMGWRN AND NOT ('&WARN'(1,1) EQ 'N'))         GP13237
&ZZMGWRN SETB  (&ZZMGWRN OR ('&WARN'(1,1) EQ 'Y'))              GP13237
.GETWORD ANOP  ,
.*  BUILD BRANCH AROUND, AND BUILD VARIABLE HEADER INFORMATION
&P.BROF  B     &P.BCODE-&LBL.(,R15)    DEFINE OFFSET TO CONSTANTS
         DC    AL1(&OPDS.&P.POINT-&P.COPR)  LENGTH OF EYEBALLER
&P.COPR  DC    C'&LBL &VERID &SYSDATE &SYSTIME '
         DC    C'COPYRIGHT 2003,2008 EXPERT SYSTEM PROGRAMMING'
         DC    C' - ALL RIGHTS RESERVED '
         CNOP  2,4           FORCE ALIGNMENT PRIOR TO POINT
&P.TBVR  DC    C' 1'         TABLE VERSION 1
.*  START OF MESSAGE TABLE VECTORS
         DS   0A             MALIGN
&P.BCODE B    &P.CODE-&LBL.(,R15)  GO TO MESSAGE BUILDER
&P.POINT DS   0A   SPECIFY THIS IN USING AFTER CALCULATING ADDRESS
&P.UDAT  DC    A(&OPDS.&UDATA) USER SPECIFIED DATA
&P.LANG  DC    A(&OPDS.&LANG) LANGUAGE / CODE PAGE COMBINATION
&P.MPTR  DC    A(&OPDS.MPT00001) FIRST MESSAGE POINTER (1/3 FOR BXLE)
&P.MPLN  DC    A(&OPDS.MPTSIZE) SIZE OF MSG PTR ENTRY (2/3)
&P.MPND  DC    A(&OPDS.MPTLAST) LAST DEFINED MESSAGE (3/3 FOR BXLE)
&P.@MSG  DC    A(&OPDS.MSGSECT) ADDRESS OF MESSAGE BASE
&P.@DIC  DC    A(&OPDS.MSGDSCT) ADDRESS OF DICTIONARY START
&P.LMOF  DC    A(&OPDS.MPTSIZE-&LENID-2) SIZE OF MSG ID OFFSET
&P.LMID  DC    A(&OPDS.&LENID) LENGTH OF MESSAGE IDENTIFIER (MAX)
&P.LCOF  DC    A(&OPDS.MPTSIZE-2) SIZE OF LEN OFFSET
&P.LCID  DC    A(&OPDS.2)    LENGTH OF LENGTH
&P.LDOF  DC    A(&OPDS.LENWDPTR) LENGTH OF MESSAGE OFFSET LIST ENTRY
          DC    A(0)           RESERVED
          DC    A(0)           RESERVED
          DC    A(0)           RESERVED
          DC    A(0)           RESERVED
&P.TCOMD DC    C'MESSAGE TABLE FOR ',C&COM
&ZZMPFX  SETC  '&PFX'
&P.CODE  DS    0H            START OF EXECUTABLE CODE
         AIF   ('&SECT' EQ 'DSECT').MEND
         SPACE 2
         STM   R14,R12,12(R13)    SAVE
         LR    R12,R15       LOCAL BASE
         DROP  ,
         USING &LBL,R12
         AIF   ('&RENT' NE 'YES').NOGET
         LA    R0,LOCEND-LOCSAVE  DYNAMIC SIZE
         STORAGE OBTAIN,LENGTH=(0)
         LR    R9,R1         COPY RETURN
         LM    R0,R1,20(R13) RELOAD R0, R1 FOR RENT CASE
         USING LOCSAVE,R13   DECLARE GOTTEN STORAGE (AFTER SWAP)
         AGO   .CMGET
.NOGET   LA    R9,LOCSAVER
.CMGET   ST    R13,4(,R9)
         ST    R9,8(,R13)
         LR    R13,R9        MAKE NEW SAVE AREA
         STM   R0,R1,CALLR0  SAVE ENTRY VALUES
         XC    RETR15(3*4),RETR15   ZERO RETURN VALUES
         L     R10,CALLR1    RESTORE CALL PARM
         USING XMSGMGPM,R10   DECLARE IT
         LM    R8,R9,XMSGBUF  LOAD BUFFER ADDRESS AND LENGTH
         LTR   R8,R8         HAVE AN ADDRESS ?
         BNP   DISASTER      NO; TOO BAD
         CH    R9,=AL2(4+8+L'MGBADMIS)  MINIMUM LENGTH ?        GP16002
         BL    DISASTER      NO; FAIL
         CLRL  (R8),(R9),FILL=C' '  BLANK THE BUFFER
         USING MESSBUF,R8    DECLARE THE BUFFER
         MVC   MESSLEN(4),=X'00040000'  CLEAR BUFFER LENGTH
         LA    R11,&P.POINT
         USING MTVPOINT,R11  OR RENAME MTV -> &P
         USING MTPDSECT,R3
         LA    R0,WHOLEMID                                      GP16002
         LA    R1,8                                             GP16002
         AIF   ('&PFX' EQ '').WHNOPFX                           GP16002
         MVC   WHOLEMID(L'&PFX),=C'&PFX'                        GP16002
         AH    R0,=AL2(L'&PFX)                                  GP16002
         LA    R1,8-L'&PFX                                      GP16002
.WHNOPFX LA    R14,XMSGMID                                      GP16002
         L     R15,=AL1(C' ',0,0,&LENID+0)   MAX MSG ID LEN     GP16002
         MVCL  R0,R14                                           GP16002
         SPACE 1
         LM    R3,R5,MTVMPTR  GET FIRST MESSAGE
MSGLOOP  LM    R14,R15,MTVLMOF  GET MSG ID OFFSET AND LENGTH
         SH    R15,=H'1'     CHANGE FOR EXECUTE
         BM    BADMISS       TAKE A DIVE
         LA    R14,MTPDSECT(R14)  ADDRESS OF MESSAGE IDENTIFIER
         AIF   ('&ID' EQ 'MASK').LOOPID
         CLC   XMSGMID,0(R14)     REQUESTED MESSAGE ?
         BE    FOUNDREQ
         AGO   .BXLEID
.LOOPID  LA    R0,&LENID     GET STRING LENGTH
         LR    R6,R14        PATTERN MESSAGE
         LA    R9,XMSGMID    POINT TO REQUESTED MESSAGE
MSKLOOP  CLI   0(R6),C'X'    GENERAL MATCH MASK BYTE?
         BE    MSKBUMP         YES; CONTINUE
         CLC   0(1,R9),0(R6)    MATCHES MASK BYTE?
         BNE   MSKNONE            NO; REJECT
MSKBUMP  LA    R9,1(,R9)
         LA    R6,1(,R6)
         BCT   R0,MSKLOOP    CHECK NEXT CHARACTER
         B     FOUNDREQ
MSKNONE  DS    0H
.BXLEID  BXLE  R3,R4,MSGLOOP
BADMISS  LA    R2,MGBADMIS   MISSING MESSAGE DEFINITION         GP16002
         B     SHOWERR                                          GP16002
BADMDF   LA    R2,MGBADMDF   MISSING MESSAGE DEFINITION         GP16002
         SPACE 1
SHOWERR  MVC   DB+4(9),=CL9'&MYSECT: '                          GP16002
         MVC   DB+4+9(L'WHOLEMID),WHOLEMID                      GP16002
         MVI   DB+4+9+L'WHOLEMID,C' '                           GP16002
         MVC   DB+4+9+L'WHOLEMID+1(L'MGBADMIS),0(R2)            GP16002
         OICC  4,4           RETURN ERROR                       GP16002
         LA    R0,4+9+9+L'MGBADMIS                              GP16002
         SLL   R0,16                                            GP16002
         ST    R0,DB         MAKE VCON                          GP16002
         LA    R8,DB         CHEAT                              GP16002
         B     XMSGWTOT                                         GP16002
         SPACE 1
FOUNDREQ LR    R7,R3         (USE OLD MAPPING)
         DROP  R3
         USING MTPDSECT,R3
         MVI   MESSAGE,C' '
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE  SPACE IT
         EX    R15,BUILDID   MAKE MESSAGE ID
         MVC   MESSAGE(&LENID),WHOLEMID                         GP16002
         LA    R15,6(,R15)   MAKE MESSAGE LENGTH WITH RDW
         STH   R15,MESSLEN   STASH IT
         AL    R14,MTVLMID   SPACE TO WORD COUNT
         MVI   MSGFLAGS,0    RESET MESSAGE FLAGS
         SR    R5,R5         CLEAR FOR ICM
         STH   R5,ENDSPACE   CLEAR ENDING SPACE COUNT
         ICM   R5,3,0(R14)   GET MESSAGE WORD COUNT
         BZ    BADMDF        OOPS
         SPACE 1
         L     R1,MTVLMOF    GET OFFSET LENGTH AGAIN
         SLL   R1,2          CONVERT TO VECTOR OFFSET
         SR    R6,R6         CLEAR FOR ICM
         EX    0,GETMSGOF-4(R1)  LOAD MESSAGE OFFSET
         AL    R6,MTV@MSG    MAKE MESSAGE ADDRESS
         USING MTMDSECT,R6
         L     R4,MTVLDOF    LENGTH OF DICTIONARY OFFSET
         LR    R3,R4         COPY
         SLL   R3,2          CONVERT TO INSTRUCTION INDEX
DICTLOOP SR    R2,R2         CLEAR FOR ICM
         CLI   0(R6),MTSPFUN  SPECIAL ENTRY?
         BL    DICTWORD      NO; DO A WORD
         CLI   0(R6),MTSPPRM  SPECIAL FUNCTION?
         BL    BADFUN        YES; PROCESS IT
         CLI   0(R6),MTSPMETA SPECIAL GIMMICKING?
         BL    DICTPARM      NO; PROCESS A PARM
         MVC   ENDCHAR,1(R6)  COPY THE OPTION CHARACTER
         IC    R2,0(,R6)     GET THE REQUESTED FUNCTION
         N     R2,=X'0000000F'  ISOLATE REQUEST
         SLL   R2,1          CONVERT TO HALF-WORD OFFSET
         LH    R15,METAPHOR(R2) GET CORRESPONDING PROCESSING ROUTINE
         B     &LBL.(R15)    INVOKE THE PROCESSOR
METAPHOR DC    Y(BADFUN-&LBL)      F0 - UNASSIGNED
         DC    Y(BADFUN-&LBL)      F1 - UNASSIGNED
         DC    Y(BADFUN-&LBL)      F2 - UNASSIGNED
         DC    Y(BADFUN-&LBL)      F3 - UNASSIGNED
         DC    Y(BADFUN-&LBL)      F4 - UNASSIGNED
         DC    Y(BADFUN-&LBL)      F5 - UNASSIGNED
         DC    Y(BADFUN-&LBL)      F6 - UNASSIGNED
         DC    Y(BADFUN-&LBL)      F7 - UNASSIGNED
         DC    Y(BADFUN-&LBL)      F8 - UNASSIGNED
         DC    Y(BADFUN-&LBL)      F9 - UNASSIGNED
         DC    Y(BADFUN-&LBL)      FA - UNASSIGNED
         DC    Y(BADFUN-&LBL)      FB - UNASSIGNED
         DC    Y(BADFUN-&LBL)      FC - UNASSIGNED
         DC    Y(CHARWSP-&LBL)      FD - SUFFIX CHARACTER, SPACE
         DC    Y(CHARNSP-&LBL)      FE - SUFFIX CHARACTER, NO SPACE
         DC    Y(BADFUN-&LBL)      FF - UNASSIGNED
         SPACE 1
*  CHARNSP - SUPPRESS INTER-WORD SPACING
*     APPEND THE CURRENT CHARACTER TO PRIOR WORD, UNLESS IT IS A BLANK
CHARNSP  MVI   ENDSPACE+L'ENDSPACE-1,0  SET NO TRAILING SPACE
         CLI   ENDCHAR,C' '  IS IT A SPACE ?
         BNE   CHARNOW       NO; SUFFIX IT
         B     DICTBUMP      ELSE REQUEST IS DONE
         SPACE 1
*  CHARWSP - APPEND CHARACTER TO CURRENT TEXT, AND SET TRAILING SPACE
*     APPEND THE CURRENT CHARACTER TO PRIOR WORD UNCONDITIONALLY
CHARWSP  MVI   ENDSPACE+L'ENDSPACE-1,1  APPEND TRAILING SPACE
CHARNOW  LH    R14,MESSLEN   CURRENT MESSAGE LENGTH
         LA    R0,1(,R14)    NEW LENGTH
         STH   R0,MESSLEN    UPDATE LENGTH
         LA    R14,MESSLEN(R14)  NEXT ENTRY
         MVC   0(1,R14),ENDCHAR  MOVE SUFFIX CHARACTER
         B     DICTBUMP      DO NEXT WORD
         SPACE 1
BADFUN   LA    R2,BADFUNC
         B     SHOWERR
         SPACE 1
*  DICTPARM - FORMAT CALLER'S PARM N AS SPECIFIED BY FORMAT BYTE
*
DICTPARM MVC   WDHED,MGBADTOO  MOVE WORD/MSG HEADER
*    **FOR TESTING - JUST DISPLAY REQUEST**
*TEST*   MVC   DB(16),BADPARM
*TEST*   MVC   DB3(2),0(R6)  GET TEXT WITHOUT 0C4
*TEST*   UNPK  DB+3+1(5),DB3(3)  SHOW ENTIRE CALL
*TEST*   TR    DB+3+1(4),TRHEXTAB
*TEST*   MVI   DB+3+1+4,C'>'
*TEST*   LA    R2,DB
         LA    R0,15         MAKE PARAMETER # MASK
         IC    R2,0(,R6)     LOAD DEFINITION
         NR    R2,R0         EXTRACT PARAMETER
         MH    R2,=AL2(XMSGPR2-XMSGPRM)  GET OFFSET
         LA    R2,XMSGPRM(R2)  POINT TO ADDRESS & LENGTH
         SR    R14,R14
         SR    R15,R15
         ICM   R15,1,5(R2)   LOAD LENGTH
         BZ    DICTBUMP      NULL VALUE - IGNORE
         ICM   R14,1,4(R2)   LOAD TYPE
         BNZ   DICTYPE       USE OVERRIDE TYPE
         IC    R14,1(,R6)    GET DEFAULT TYPE FROM MESSAGE
DICTYPE  STC   R14,PROFG     SAVE PROCESSING FLAGS
         N     R14,=X'0000000F'  DELETE MODIFIER BITS
         L     R2,0(,R2)     GET PARM ADDRESS
         N     R2,=X'7FFFFFF'  IGNORE END OF LIST BIT
         BNZ   DICTBRTY      BRANCH BY TYPE
         CH    R14,=H'2'     IS IT ADDRESS FUNCTION ?
         BNE   DICTBUMP      NO; IGNORE ZERO ADDRESS
DICTBRTY BIX   VAL=(R14),WK=R1,ERR=BADCOD,BASE=&LBL,PFX=UPM,           *
               LOC=(TEXT,     0 - TEXT                                 *
               TEXT,          1 - TEXT                                 *
               ADDR,          2 - ADDRESS                              *
               SDEC,          3 - SIGNED DECIMAL                       *
               ADEC,          4 - UNSIGNED DECIMAL                     *
               SINT,          5 - SIGNED INTEGER                       *
               AINT,          6 - UNSIGNED INTEGER                     *
               SHEX,          7 - SIGNED HEX ?                         *
               AHEX,          8 - HEXADECIMAL                          *
               SBIN,          9 - SIGNED BINARY                        *
               ABIN,         10 - UNSIGNED BINARY                      *
               )             END OF LIST
         SPACE 1
UPMSBIN  DS    0H
UPMABIN  STM   R3,R6,12(R13) SAVE A FEW REGISTERS
         LR    R3,R15        INPUT LOOP COUNTER
         SLL   R15,3         NEW OUTPUT LENGTH
         LA    R4,DB3        SET OUTPUT POSITION
UPMABINB ICM   R1,8,0(R2)    LOAD BITS TO BE PROCESSED
         LA    R6,8          DO8 BITS PER BYTE
UPMABINL LA    R0,C'0'/2     MAKE 0 OR 1 WITH NEXT SHIFT
         SLDL  R0,1          ISOLATE LEFT-MOST BIT
         STC   R0,0(,R4)     STASH IT
         LA    R4,1(,R4)     NEXT BIT POSITION
         BCT   R6,UPMABINL   DO ALL BITS IN BYTE
         LA    R2,1(,R2)     NEXT INPUT BYTE
         BCT   R3,UPMABINB   REPEAT FOR NEXT BYTE
         LM    R3,R6,12(R13) RESTORE REGISTERS
         LA    R2,DB3        POINT TO RESULTS
         B     UPMTEXT       NO EDITING
UPMSINT  DS    0H
UPMAINT  XC    DB(16),DB
         XC    DB2,DB2
         LA    R14,DB2+8
         SR    R14,R15       MOVE DESTINATION
         EX    R15,EXMVT14   MOVE INPUT
         LM    R0,R1,DB2     LOAD IT
         CVD   R1,DB+8       PACK LOW WORD
         B     UPMADIN
         SPACE 1
UPMSDEC  DS    0H
UPMADEC  XC    DB(16),DB     CLEAR TO MAX
         LTR   R15,R15       ANY LENGTH ?
         BP    MADECLOK
   LA  R15,16     *****TEST***** LATER CALCULATE LENGTH
MADECLOK CH    R15,=H'16'    DESIGN LIMIT ?
         BH    BADTOO        YES; TOO LONG
         LA    R14,DB+16     MOVE TO TEMP WORK
         SR    R14,R15       SET MOVE DESTINATION
         SH    R15,=H'1'     MAKE EXECUTE LENGTH
         EX    R15,EXMVT14   MOVE USER'S DATA RIGHT JUSTIFIED
UPMADIN  MVI   DB3,C' '      SET EDIT FILL BYTE
         MVI   DB3+1,X'20'     MAKE EDIT BYTE
         MVC   DB3+2(L'DB3-2),DB3+1   PROPAGATE IT
         MVI   DB3+30,X'21'  TURN SIGNIFICANCE ON
         LA    R1,DB3+31     SET DEFAULT SIGNIFICANCE START
         EDMK  DB3(32),DB    EDIT USER'S TEXT
         BNM   MADEPLUS
         TM    PROFG,PFABS   DOING ABSOLUTE VALUE ?
         BZ    MADEPLUS      YES; IGNORE THE SIGN
         BCTR  R1,0
         MVI   0(R1),C'-'    MOVE SIGN TO FRONT
MADEPLUS LA    R15,DB3+32    GETEND + 1
         SR    R15,R1        TOTAL LENGTH
         LR    R2,R1         POINT TO TEXT START
         B     UPMTEXT       FINAGLE
         SPACE 1
UPMADDR  ST    R2,DB2        FORMAT ADDRESS
         LA    R2,DB2
         LA    R15,4
         SPACE 1
UPMSHEX  DS    0H            TREAT AS UNSIGNED
UPMAHEX  XC    DB(16),DB     CLEAR TO MAX
         CH    R15,=H'16'    DESIGN LIMIT ?
         BH    BADTOO        YES; TOO LONG
         SH    R15,=H'1'     MAKE EXECUTE LENGTH
         BM    DICTBUMP       SHOULDN'T GET HERE
         EX    R15,EXMVCTX   MOVE TEXT TO WORK AREA
         UNPK  DB3+00(9),DB+00(5)  UNPACK TEXT
         UNPK  DB3+09(9),DB+04(5)  UNPACK TEXT
         UNPK  DB3+18(9),DB+08(5)  UNPACK TEXT
         UNPK  DB3+27(9),DB+12(5)  UNPACK TEXT
         TR    DB3(35),TRHEXTAB    MAKE DISPLAYABLE
         LR    R14,R15       COPY INPUT LENGTH-1
         MVI   DB3+08,C' '   GAP
         MVI   DB3+17,C' '   GAP
         MVI   DB3+26,C' '   GAP
         SRL   R14,2         NUMBER OF INTERWORD GAPS
         SLL   R15,1         DOUBLE INPUT LENGTH (-2)
         LA    R15,2(R14,R15)  NEW OUTPUT LENGTH
         LA    R2,DB3        NEW TEXT
*NEXT*   B     UPMTEXT       ADJUST
         SPACE 1
UPMTEXT  STC   R15,WDHOLEN   INPUT=OUTPUT LENGTH
         SPACE 1
MASSAGE  LTR   R15,R15       ANY STRING LENGTH ?
         BNP   DICTBUMP      BUMP      NO; SKIP IT
         TM    PROFG,PFDEBL  SUPPRESS DEBLANKING ?
         BNZ   SKIPDEBL      YES
LOOPDEBL TM    0(R2),255-C' '    LEADING BLANK/NULL ?
         BNZ   SKIPDEBL      NO
         LA    R2,1(,R2)     ADVANCE
         BCT   R15,LOOPDEBL
         B     DICTBUMP      ALL GONE
SKIPDEBL TM    PROFG,PFDEBR  SUPPRESS DEBLANKING ?
         BNZ   SKIPDEBR      YES
         LA    R14,0(R15,R2)
LOOPDEBR BCTR  R14,0         SPACE TO LAST BYTE
         TM    0(R14),255-C' '   TRAILING BLANK/NULL ?
         BNZ   SKIPDEBR      NO
         BCT   R15,LOOPDEBR
         B     DICTBUMP      ALL GONE
SKIPDEBR B     DICTMSG2      PROCESS WHAT'S LEFT
EXMVT14  MVC   0(0,R14),0(R2)  MOVE TEXT RIGHT-JUSTIFIED
EXMVCTX  MVC   DB(0),0(R2)   MOVE USER'S TEXT
         SPACE 1
BADDEF   LA    R2,MGBADDEF   ERROR IN DEFINITION
         B     SHOWERR
BADCOD   LA    R2,MGBADCOD   ERROR IN TYPE
         B     SHOWERR
BADTOO   LA    R2,MGBADTOO   INPUT DATA TOO LONG
         B     SHOWERR
         SPACE 1
DICTWORD SR    R2,R2         CLEAR FOR ICM
         EX    0,GETDICOF-4(R3)  OFFSET TO DICTIONARY ENTRY
         AL    R2,MTV@DIC    GET ADDRESS IN DICTIONARY
         B     DICTCOM                                          GP16002
         USING MTDDSECT,R2
DICTMSG  DS    0H                                               GP16002
DICTCOM  SR    R15,R15
         IC    R15,MTDPHYLN  GET PHYSICAL LENGTH
         MVC   WDHED,0(R2)   MOVE MESSAGE HEADER
         LA    R2,MTDTEXT    POINT TO TEXT
         DROP  R2
DICTMSG2 SH    R15,=H'1'     SET EXECUTE LENGTH
         BM    DICTBUMP      OOPS
         LH    R14,MESSLEN   CURRENT MESSAGE LENGTH
         AH    R14,ENDSPACE  LEADING SPACE, IF ANY
         LA    R0,1(R14,R15)  NEW LENGTH
         C     R0,XMSGBUF+4  WILL IT FIT ?
         BNH   DICTLNOK      YES
         OICC  8             SET TRUNCATION ERROR
         S     R0,XMSGBUF+4  GET SIZE OF EXCESS
         SR    R14,R0        MAX THAT WILL FIT IN OUTPUT BUFFER
         SR    R15,R0        MAXIMUM TO BE MOVED
         BM    XMSGWTOT      TRUNCATE
         LA    R0,1(R14,R15)  NEW LENGTH
DICTLNOK STH   R0,MESSLEN    UPDATE LENGTH
         LA    R14,MESSLEN(R14)  NEXT ENTRY
         EX    R15,EXMVT14   MOVE AN ENTRY
         MVI   ENDSPACE+L'ENDSPACE-1,1  SET (DEFAULT) SPACE
         MVI   MSGFLAGS,0    RESET FLAGS
DICTBUMP AR    R6,R4         SPACE TO NEXT ENTRY
         BCT   R5,DICTLOOP   REPEAT UNTIL TIRED
XMSGWTOT LA    R1,XMSGMSG    POINT TO TEXT
         ST    R1,RETR1      MAKE IT EASY FOR CALLER
         TM    CALLR0+L'CALLR0-1,1  WTO REQUESTED ?
         BZ    XMSGEXIT      NO
         WTO   MF=(E,MESSLEN)  ISSUE WTO
XMSGEXIT LR    R1,R13        SAVE FOR RENT CASE
         L     R13,4(,R13)   LOAD CALLER'S SAVE AREA
         MVC   16(12,R13),RETCODE-LOCSAVER(R1)  COPY RETURNS
         AIF   ('&RENT' NE 'YES').NOLET
         LA    R0,LOCEND-LOCSAVE  DYNAMIC SIZE
         STORAGE RELEASE,LENGTH=(0),ADDR=(1)
.NOLET   LM    R14,R12,12(R13)  LOAD REST
         BR    R14           RETURN
         SPACE 1
DISASTER MVICC 20            ERROR IN PARMS
         B     XMSGEXIT      RETURN WITHOUT ACTION
         SPACE 1
BUILDID  MVC   MESSAGE(0),0(R14)  MOVE MESSAGE ID
GETMSGOF IC    R6,0(,R7)  1/4  LOAD OFFSET
         ICM   R6,3,0(R7) 2/4  LOAD OFFSET FROM AL2
         ICM   R6,7,0(R7) 3/4  LOAD OFFSET FROM AL3
         L     R6,0(,R7)  4/4  LOAD OFFSET FROM AL4
         SPACE 1
GETDICOF IC    R2,0(,R6)  1/4  LOAD OFFSET
         ICM   R2,3,0(R6) 2/4  LOAD OFFSET FROM AL2
         ICM   R2,7,0(R6) 3/4  LOAD OFFSET FROM AL3
         L     R2,0(,R6)  4/4  LOAD OFFSET FROM AL4
         SPACE 1
BADFUNC  DC    CL20'Unknown text'
BADPARM  DC    CL13'Bad PARM'
MGBADDEF DC    CL13'<msg.def.err>'
MGBADCOD DC    CL13'<inv.type>'
MGBADTOO DC    CL13'<inp.long>'
MGBADMIS DC    CL13'undefined'
MGBADMDF DC    CL13'in error'
HEXTAB   DC    C'0123456789ABCDEF'
TRHEXTAB EQU   HEXTAB-C'0',256,C'C'
         LTORG ,
         SPACE 1
         AIF   ('&RENT' NE 'YES').NODS
LOCSAVE  DSECT ,
.NODS    ANOP  ,
LOCSAVER DS    18A
CALLR0   DS    A    1/2
CALLR1   DS    A    2/2
RETCODE  DS    0A   0/3
RETR15   DS    A    1/3
RETR0    DS    A    2/3
RETR1    DS    A    3/3
WHOLEMID DS    CL8           PFX + MSG ID
DB       DS    2D            CONVERSION SPACE - INPUT
DB2      DS    D             CONVERSION SPACE - INPUT
DB3SIG   DS    5D            CONVERSION SPACE - SIGNED
DB3      EQU   DB3SIG+1,5*8-1,C'C'  CONVERSION SPACE - OUTPUT
ENDSPACE DS    H
MSGFLAGS DS    X             MESSAGE PROCESSING FLAGS
MFPFX    EQU   X'80'           PREPEND PREFIX TO MESSAGE
MFCHAR   EQU   X'01'           APPEND ENDCHAR TO CURR. WORD
ENDCHAR  DS    C             SUFFIX CHARACTER, IF ANY
PROFG    DS    X             PARAMETER PROCESSING FLAG
PFABS    EQU   1               IGNORE SIGN
PFDEBR   EQU   X'10'           SKIP RIGHT DEBLANKING
PFDEBL   EQU   X'20'           SKIP LEFT DEBLANKING
WDHED    DS    XL3           WORD DEFINITION HEADER
WDHXLEN  EQU   WDHED,1,C'X'    EXPLICIT (INPUT) LENGTH
WDHOLEN  EQU   WDHED+1,1,C'X'  OUTPUT LENGTH
WDHCHAR  EQU   WDHED+2,1,C'C'  CHAR SET (C OR G)
PFDEB    EQU   PFDEBL+PFDEBR   SKIP BOTH
LOCEND   EQU   *
.*
XMSGMGPM MDEFPARM SECT=DSECT
MESSBUF  DSECT ,
MESSLEN  DS    XL2,XL2       V-FORMAT MESSAGE
         AIF   ('&PFX' EQ '').NOMPFX                            GP16002
MESSPFX  DS    CL(L'&PFX)
.NOMPFX  ANOP  ,                                                GP16002
MESSAGE  DS    CL132         MESSAGE TEXT
         YREGS ,
&NM      CSECT ,             RESTORE
.MEND    MEND  ,
