         MACRO
&NM      MVSSVCUP &SVC,&FUNC,&TYPE=,&EP=,&LOCKS=,&NPRMPT=,&MF=,        *
               &APF=,&AR=,&EPNAME=,&RELATED=
.**********************************************************************
.*   THIS IS AN MVS 3.8J IMPLEMENTATION OF THE SVCUPDTE FACILITY      *
.*   NEW-FANGLED PARAMETERS ARE IGNORED                               *
.*   CODE IS IMPLEMENTED IN SUBROUTINE SUBSVCUP                       *
.*   TRIED TO STAY COMPATIBLE WITH IBM                                *
.**********************************************************************
         ACTR    100               LIMIT LOOPING TO 100 ITERATIONS
         GBLC  &MACPLAB      GENERATE LABEL AS NEEDED
.*
         LCLA &REQLOCK,&INDEX1,&INDEX2,&TEMP,&SVCNUM,&FUNCNUM,&TYPENUM,*
               &APFNUM,&NPNUM,&NCMS,&NDISP,&NLOCAL,&NSRM,&NSALLOC,&NNP,*
               &NAPF,&SVCFLAG,&SVCOFF,&DELETE,&REPLACE,&EXTRACT
         LCLA  &ARNUM,&NAR
.*
.*            APFNUM               APF CODE
.*            ARNUM                AR CODE
.*            DELETE               FUNCTION CODE VALUE FOR DELETE
.*            EXTRACT              FUNCTION CODE VALUE FOR EXTRACT
.*            FUNCNUM              FUNCTION NUMBER
.*            INDEX1               GENERAL INDEX
.*            INDEX2               GENERAL INDEX
.*            NAPF                 VALUE OF THE APF BIT IN SVC ENTRY
.*            NAR                  VALUE OF AR BIT IN SVC ENTRY
.*            NCMS                 VALUE OF THE CMS BIT IN SVC ENTRY
.*            NDISP                VALUE OF THE DISP BIT IN SVC ENTRY
.*            NLOCAL               VALUE OF THE LOCAL BIT IN SVC ENTRY
.*            NNP                  VALUE OF THE NON-PREMPT BIT
.*            NSRM                 VALUE OF THE SRM BIT IN SVC @ZMC3226
.*                                 ENTRY                       @ZMC3226
.*            NSALLOC              VALUE OF THE SALLOC BIT IN SVC ENTRY
.*            REPLACE              REPLACE FUNCTION CODE VALUE
.*            SVCOFF               OFFSET OF THE SVC NUMBER IN PARM
.*            NPNUM                NON-PREEMPTIBILITY CODE
.*            REQLOCK              LOCKS BYTE
.*            SVCNUM               SVC NUMBER
.*            SVCFLAG              SVC NUMBER SUPPLIED INDICATOR
.*            TEMP                 TEMPORARY
.*            TYPENUM              SVC TYPE NUMBER
.*
         LCLC &VERSION,&CHARS,&ACHAR,&BADENT,&LAB1,&EPOFF
         LCLC &EPNOFF
         LCLC &EPCHAR
         LCLC &EPMSG
         LCLC &INCONS      STRING FOR INCONSISTENT OPERANDS
         LCLC &INSPEC(10)  ARRAY OF KEYWORD ATTRIBUTES
         LCLC &BADSPEC(10) ARRAY OF KEYWORD NAMES FOR MESSAGE
.*
.*            ACHAR                SINGLE CHARACTER TEMPORARY
.*            BADENT               SET TO 'YES' INDICATES FATAL ERROR
.*            CHARS                MULTIPLE CHARACTER TEMPORARY
.*            EPCHAR               TEMP VARIABLE: EP OR EPNAME
.*            EPMSG                TEMP VARIABLE: ENTRY-POINT MSG
.*            EPOFF                OFFSET OF ENTRY POINT IN PARM LIST
.*            EPNOFF               OFFSET OF EPNAME IN PARM LIST
.*            MACDATE              DATE MACRO LAST MODIFIED
.*            VERSION              SVCUPDTE VERSION NUMBER
.*
&BADENT  SETC  'NO'                   NO ERROR DETECTED YET
&EPOFF   SETC    '4'                  OFFSET OF THE ENTRY POINT IN LIST
&EPNOFF  SETC    '12'                 OFFSET OF THE EPNAME IN LIST
&LAB1    SETC  'ZZ'.'&SYSNDX'.'L' GENERATED LABEL
&NAPF    SETA    8                    VALUE OF THE APF BIT IN SVC ENTRY
&NAR     SETA    4                    VALUE OF AR BIT IN SVC ENTRY
&NCMS    SETA   64                    VALUE OF THE CMS
&NDISP   SETA    8                    VALUE OF THE DISP
&NLOCAL  SETA  128                    VALUE OF THE LOCAL
&NNP     SETA    2                    VALUE OF THE NON-PREMPT
&NSRM    SETA   32                    VALUE OF THE SRM         @ZMC3226
&NSALLOC SETA   16                    VALUE OF THE SALLOC
&REPLACE SETA    1                    REPLACE FUNCTION CODE
&DELETE  SETA    2                    DELETE FUNCTION CODE
&EXTRACT SETA    3                    EXTRACT FUNCTION CODE
&SVCOFF  SETA    3                    OFFSET OF THE SVC NUMBER IN
.*                                    THE PARAMETER LIST
&VERSION SETC   '1'                   INITIALIZE TO VERSION 1  @YA11662
.**********************************************************************
.*                   VALIDATE MF PARAMETER                            *
.**********************************************************************
         AIF   (T'&MF EQ 'O' OR                                        -
               '&MF(1)' EQ 'E' AND N'&MF EQ 2 OR                       -
               '&MF' EQ 'L' AND N'&MF EQ 1).L0020
.*       MSG: "INVALID MF OPERAND SPECIFIED- "
         IHBERMAC 1001,MF,&MF
&BADENT  SETC  'YES'                  FATAL ERROR DETECTED
.L0020   ANOP
         AIF   ('&MF(1)' NE 'E').L0040
.*
.*       IS THIS AN EXECUTE FORM OF THE MACRO?
.*          YES: MAKE SURE THERE WERE NO UNNECESSARY PARAMETERS
.*
&INSPEC(1)  SETC T'&TYPE
&BADSPEC(1) SETC 'TYPE'
&INSPEC(2)  SETC T'&LOCKS
&BADSPEC(2) SETC 'LOCKS'
&INSPEC(3)  SETC T'&NPRMPT
&BADSPEC(3) SETC 'NPRMPT'
&INSPEC(4)  SETC T'&APF
&BADSPEC(4) SETC 'APF'
&INSPEC(5)  SETC T'&AR
&BADSPEC(5) SETC 'AR'
.*
.* FIRST TEST IF REPLACE, DELETE, OR EXTRACT SPECIFIED
.*
&INCONS  SETC  ''              CLEAR ERROR STRING
         AIF   (T'&FUNC EQ 'O').L0022    IF A FUNCTION SPECIFIED
         AIF   ('&FUNC' EQ 'REPLACE' OR '&FUNC' EQ 'DELETE' OR         *
               '&FUNC' EQ 'EXTRACT').L0022
&INCONS  SETC '&FUNC'                   THEN MOVE TO ERROR MESSAGE
.L0022   ANOP
.*
.* LOOP THROUGH INPUT DATA IN ARRAY AND FORMAT MESSAGE STRING
.*
&INDEX1  SETA 0
.L0025   ANOP
&INDEX1  SETA (&INDEX1+1)                    BUMP LOOP
         AIF  (&INDEX1 GT 5).L0034
.*
.*       TEST FOR A KEYWORD SPECIFICATION
.*         BY CHECKING ARRAY ENTRY NOT EQUAL TO "OMITTED"
.*
         AIF   ('&INSPEC(&INDEX1)' EQ 'O').L0032  TEST KEY
.*    INCONSISTENT KEYWORD DETECTED -- PUT KEY INTO ERROR MESSAGE
         AIF   ('&INCONS' EQ '').L0030       IF NOT 1ST ERROR
&INCONS  SETC  '&INCONS'.','.'&BADSPEC(&INDEX1)'  THEN ADD KEY
         AGO   .L0032
.L0030   ANOP
&INCONS  SETC  '&BADSPEC(&INDEX1)'           ELSE ASSIGN 1ST KEY
.L0032   ANOP
         AGO   .L0025                        LOOP TILL DONE
.*
.*       END OF TEST LOOP - PRINT MNOTE IF NECESSARY
.*
.L0034   ANOP
         AIF   ('&INCONS' EQ '').L0040
.*
.*       MSG: "XX,YY,ZZ OPERAND INCONSISTENT-IGNORED."
         IHBERMAC 147,&INCONS
.L0040   ANOP
.*
.*  SCREEN 'EXTRACT' REQUESTS
.*
         AIF   ('&FUNC' EQ 'EXTRACT').L0300       YES: BRANCH
.*
.*  CHECK FOR EXTRACT REQUEST WITH SVC PARAMETER CODED WRONG
.*
         AIF   ('&SVC' NE 'EXTRACT').L0050        NO: BRANCH
&FUNCNUM SETA   &EXTRACT
.*       MSG: "EXTRACT PARAMETER SPECIFIED IN WRONG POSITION."
       MNOTE 12,'EXTRACT PARAMETER SPECIFIED IN WRONG POSITION.'
&BADENT  SETC  'YES'                      FATAL ERROR DETECTED
         AGO   .L0440
.L0050   ANOP
.**********************************************************************
.*                                                                    *
.*                   VALIDATE SVC PARAMETER                           *
.*                                                                    *
.**********************************************************************
.*
.*       IF THE SVC NUMBER IS NOT VALID INDICATE ERROR
.*
.*            MF     OMITTED   REGISTER   SELF-DEFINING TERM DECIMAL#
.*            --     --------  --------   ------------------ --------
.*         STANDARD   ERROR       OK               OK          OK
.*            L         OK       ERROR             OK          OK
.*            E         OK        OK              ERROR       ERROR
.*
.*       IS THERE A SUB-PARAMETER LIST FOR THE SVC PARAMETER?
         AIF   (N'&SVC GT 1).L0140                  YES: ERROR
.*
.*       IS THE SVC NUMBER SUPPLIED?
         AIF   (T'&SVC  NE 'O').L0060               YES: CONTINUE
.*       THE SVC NUMBER IS OMITTED
&SVCFLAG SETA  1                                    REMEMBER FACT
.*       IS IT ANY CASE OTHER THAN THE MF STANDARD CASE?
         AIF   (T'&MF   NE 'O').L0200               YES: VALID
.*       MSG: "SVC OPERAND REQUIRED, NOT SPECIFIED"
         IHBERMAC 1006,SVC                          NO:  INVALID
&BADENT  SETC  'YES'
         AGO   .L0200
.*
.*       IF THIS THE REGISTER FORM OF THE SVC PARAMETER?
.L0060   AIF   ('&SVC'(1,1) NE '(').L0080      NO: TRY OTHER CASES
.*       THIS IS THE REGISTER FORM - IS IT THE RIGHT MF TYPE?
         AIF   ('&MF' NE 'L').L0200                 YES: NOT MF=L
         AGO   .L0140                               NO:  ERROR
.*
.*       CHECK TO SEE IF THIS IS A SELF-DEFINING TERM
.*
.L0080   AIF   ('&SVC'(1,1) GE '0' AND '&SVC'(1,1) LE '9').L0100
         AIF   ('&SVC'(1,1) LT 'A' OR  '&SVC'(1,1) GT 'Z').L0140
         AIF   ('&MF(1)' EQ 'E').L0140           MF=E CASE INVALID
         AGO   .L0200
.*
.*       CHECK TO SEE IF THE SVC NUMBER IS NUMERICALLY VALID
.*
.L0100   AIF   ('&MF(1)' EQ 'E').L0140    NUMBER INVALID FOR MF=E
&INDEX1  SETA  1                          START WITH FIRST CHARACTER
&CHARS   SETC  '&SVC'                     TEMPORARY STRING
.L0120   AIF   (K'&SVC GT 3).L0140        TOO MANY DIGITS?
&ACHAR   SETC  '&CHARS'(&INDEX1,1)        GET A CHARACTER FROM STRING
         AIF   ('&ACHAR' LT '0' OR '&ACHAR' GT '9').L0140  DECIMAL?
&INDEX1  SETA  &INDEX1+1                  YES: INDICATE NEXT CHARACTER
         AIF   (&INDEX1 LE K'&SVC).L0120  ALL CHARACTERS DONE?
&SVCNUM  SETA  &SVC                       YES: CONVERT STRING TO NUMBER
         AIF   (&SVCNUM GE 0 AND &SVCNUM LE 255).L0160  TOO BIG?
.*       MSG: "INVALID SVC OPERAND SPECIFIED- "
.L0140   IHBERMAC 1001,SVC,&SVC           YES: TELL USER
&BADENT  SETC  'YES'                      FATAL ERROR DETECTED
         AGO   .L0200
.L0160   ANOP
.*
.*       CHECK TO SEE IF THE SVC NUMBER IS
.*       RESERVED FOR AN ESR TABLE
.*
         AIF   (&SVCNUM EQ 109).L0180
         AIF   (&SVCNUM EQ 116).L0180
         AIF   (&SVCNUM EQ 122).L0180
         AIF   (&SVCNUM EQ 137).L0180
         AGO   .L0200
.L0180   ANOP
       MNOTE 12,'SVC &SVC MAY NOT BE UPDATED. IT IS RESERVED FOR ESR.'
&BADENT  SETC  'YES'                      FATAL ERROR DETECTED
.L0200   ANOP
         AIF   ('&MF(1)' EQ 'E').L0440    IF MF=E SKIP
.**********************************************************************
.*                                                                    *
.*                   VALIDATE FUNCTION PARAMETER                      *
.*                                                                    *
.**********************************************************************
         AIF    ('&FUNC' NE 'REPLACE').L0220
&FUNCNUM SETA   &REPLACE
         AGO    .L0340
.*
.*         IF ITS A 'DELETE' THEN ENSURE NO EXTRA PARAMETERS
.*
.L0220   AIF    ('&FUNC' NE 'DELETE').L0240
&FUNCNUM SETA   &DELETE
&INSPEC(1)  SETC T'&TYPE
&BADSPEC(1) SETC 'TYPE'
&INSPEC(2)  SETC T'&LOCKS
&BADSPEC(2) SETC 'LOCKS'
&INSPEC(3)  SETC T'&NPRMPT
&BADSPEC(3) SETC 'NPRMPT'
&INSPEC(4)  SETC T'&APF
&BADSPEC(4) SETC 'APF'
&INSPEC(5)  SETC T'&EP
&BADSPEC(5) SETC 'EP'
&INSPEC(6)  SETC T'&EPNAME
&BADSPEC(6) SETC 'EPNAME'
&INSPEC(7)  SETC T'&AR
&BADSPEC(7) SETC 'AR'
.*
.* LOOP THROUGH INPUT DATA IN ARRAY AND FORMAT MESSAGE STRING
.*
&INDEX1  SETA 0                INITIALIZE LOOP COUNTER
&INCONS  SETC  ''              CLEAR ERROR STRING
.L0224   ANOP
&INDEX1  SETA (&INDEX1+1)                    BUMP LOOP
         AIF  (&INDEX1 GT 7).L0236
.*
.*       TEST FOR A KEYWORD SPECIFICATION
.*         BY CHECKING ARRAY ENTRY NOT EQUAL TO "OMITTED"
.*
         AIF   ('&INSPEC(&INDEX1)' EQ 'O').L0232  TEST KEY
.*    INCONSISTENT KEYWORD DETECTED -- PUT KEY INTO ERROR MESSAGE
         AIF   ('&INCONS' EQ '').L0228       IF NOT 1ST ERROR
&INCONS  SETC  '&INCONS'.','.'&BADSPEC(&INDEX1)'  THEN ADD KEY
         AGO   .L0232
.L0228   ANOP
&INCONS  SETC  '&BADSPEC(&INDEX1)'           ELSE ASSIGN 1ST KEY
.L0232   ANOP
         AGO   .L0224                        LOOP TILL DONE
.*
.*       END OF TEST LOOP - PRINT MNOTE IF NECESSARY
.*
.L0236   ANOP
         AIF   ('&INCONS' EQ '').L0960
.*
.*       MSG: "XX,YY,ZZ OPERAND INCONSISTENT-IGNORED."
         IHBERMAC 147,&INCONS
         AGO   .L0960
.L0240   ANOP
&BADENT  SETC  'YES'                 FATAL ERROR DETECTED
         AIF   (T'&FUNC EQ 'O').L0260
.*       MSG: "INVALID FUNCTION OPERAND SPECIFIED- "
         IHBERMAC 1001,FUNCTION-CODE,&FUNC
         AGO   .L0340
.L0260   ANOP
.*       MSG: "FUNCTION-CODE OPERAND REQUIRED, NOT SPECIFIED"
.L0280   IHBERMAC 1006,FUNCTION-CODE
         AGO   .L0340
.L0300   ANOP
.*
.*         FOR AN 'EXTRACT' ENSURE NO EXTRA PARAMETERS
.*
&FUNCNUM SETA   &EXTRACT
&VERSION SETC   '2'       EXTRACT IS A VERSION 2 SPECIFICATION @YA11662
&SVCFLAG SETA  1
         AIF    (T'&SVC EQ 'O').L0320               SVC SPECIFIED?
.*       MSG: "SVCNUM AND EXTRACT OPTIONS ARE MUTUALLY EXCLUSIVE"
       MNOTE 12,'SVCNUM AND EXTRACT OPTIONS ARE MUTUALLY EXCLUSIVE.'
&BADENT  SETC  'YES'                      FATAL ERROR DETECTED
.L0320   ANOP
&INSPEC(1)  SETC T'&TYPE
&BADSPEC(1) SETC 'TYPE'
&INSPEC(2)  SETC T'&LOCKS
&BADSPEC(2) SETC 'LOCKS'
&INSPEC(3)  SETC T'&NPRMPT
&BADSPEC(3) SETC 'NPRMPT'
&INSPEC(4)  SETC T'&APF
&BADSPEC(4) SETC 'APF'
&INSPEC(5)  SETC T'&AR
&BADSPEC(5) SETC 'AR'
.*
.* LOOP THROUGH INPUT DATA IN ARRAY AND FORMAT MESSAGE STRING
.*
&INDEX1  SETA 0                INITIALIZE LOOP COUNTER
&INCONS  SETC  ''              CLEAR ERROR STRING
.L0324   ANOP
&INDEX1  SETA (&INDEX1+1)                    BUMP LOOP
         AIF  (&INDEX1 GT 5).L0336
.*
.*       TEST FOR A KEYWORD SPECIFICATION
.*         BY CHECKING ARRAY ENTRY NOT EQUAL TO "OMITTED"
.*
         AIF   ('&INSPEC(&INDEX1)' EQ 'O').L0332  TEST KEY
.*    INCONSISTENT KEYWORD DETECTED -- PUT KEY INTO ERROR MESSAGE
         AIF   ('&INCONS' EQ '').L0328       IF NOT 1ST ERROR
&INCONS  SETC  '&INCONS'.','.'&BADSPEC(&INDEX1)'  THEN ADD KEY
         AGO   .L0332
.L0328   ANOP
&INCONS  SETC  '&BADSPEC(&INDEX1)'           ELSE ASSIGN 1ST KEY
.L0332   ANOP
         AGO   .L0324                        LOOP TILL DONE
.*
.*       END OF TEST LOOP - PRINT MNOTE IF NECESSARY
.*
.L0336   ANOP
         AIF   ('&INCONS' EQ '').L0440
.*
.*       MSG: "XX,YY,ZZ OPERAND INCONSISTENT-IGNORED."
         IHBERMAC 147,&INCONS
         AGO   .L0440
.**********************************************************************
.*                                                                    *
.*                   VALIDATE SVC TYPE PARAMETER                      *
.*                                                                    *
.**********************************************************************
.L0340   ANOP
         AIF   ('&TYPE' EQ '1' OR '&TYPE' EQ '2' OR                    -
               '&TYPE' EQ '3' OR '&TYPE' EQ '4' OR                     -
               '&TYPE' EQ '5' OR '&TYPE' EQ '6').L0380
&BADENT  SETC  'YES'                 FATAL ERROR DETECTED
         AIF   (T'&TYPE EQ 'O').L0360      PARAMETER OMITTED?
.*       MSG: "INVALID TYPE OPERAND SPECIFIED- "
         IHBERMAC 1001,TYPE,&TYPE          NO: JUST IN ERROR
         AGO   .L0440
.L0360   ANOP                              YES: PARAMETER OMITTED
.*       MSG: "TYPE OPERAND REQUIRED, NOT SPECIFIED"
         IHBERMAC 1006,TYPE
         AGO   .L0440
.L0380   ANOP
&TYPENUM SETA  &TYPE
.L0400   ANOP
.*
.*       IF ITS A TYPE 5 SVC DON'T ALLOW AN ENTRY POINT TO BE SPECIFIED
.*
         AIF   (&TYPENUM NE 5).L0440
         AIF   (T'&EP EQ 'O' AND T'&EPNAME EQ 'O').L0580
       MNOTE 12,'TYPE=5 AND EPNAME OPTIONS ARE MUTUALLY EXCLUSIVE'
&BADENT  SETC  'YES'                 FATAL ERROR DETECTED
         AGO   .L0580
.L0440   ANOP
.**********************************************************************
.*                                                                    *
.*                   VALIDATE ENTRY POINT PARAMETER                   *
.*                   'EP' OR 'EPNAME'
.*                                                                    *
.**********************************************************************
.*
.*       CHECK ENTRY POINT -
.*
.*       MF        LABEL     REGISTER  OMITTED
.*       --        -----     --------  --------
.*        E        ERROR        OK        OK
.*        L         OK        ERROR       OK
.*   STANDARD       OK          OK      ERROR
.*
.*
.*
.*       NEITHER "EP" OR "EPNAME" OPTIONS SPECIFIED?
.*
         AIF   (T'&EP NE 'O' OR T'&EPNAME NE 'O').L0460  NO: OK
         AIF   ('&MF' EQ 'L' OR '&MF(1)' EQ 'E').L0580   MF=L/E OK
&BADENT  SETC  'YES'                              OTHERWISE: FATAL
.*       MSG: "ENTRY-POINT OPERAND REQUIRED, NOT SPECIFIED"
         IHBERMAC 1006,ENTRY-POINT
         AGO   .L0580                        GO TO LOCK PROCESSING
.L0460   ANOP
.*
.*       BOTH "EP" AND "EPNAME" OPTIONS SPECIFIED?
.*
         AIF   (T'&EP EQ 'O' OR T'&EPNAME EQ 'O').L0480  NO: OK
&BADENT  SETC  'YES'                                    YES: FATAL
.*     MSG: "BOTH "EP" AND "EPNAME" SPECIFIED. "
     MNOTE 12,'*** BOTH "EP" AND "EPNAME" SPECIFIED. '
         AGO   .L0580                        GO TO LOCK PROCESSING
.L0480   ANOP
.*
.*       DETERMINE WHICH ENTRY POINT OPTION WAS USED
.*
         AIF   (T'&EP EQ 'O').L0500                    EP OPTION?
&EPCHAR  SETC  '&EP'                     INITIALIZE MACRO VARIABLE
&EPMSG   SETC  'EP'                      INITIALIZE MSG VARIABLE
.*       ARE THERE ANY SUB-PARAMETERS?
         AIF   (N'&EP GT 1).L0560                   YES: ERROR
         AGO   .L0520
.L0500   ANOP
&EPCHAR  SETC  '&EPNAME'                 INITIALIZE MACRO VARIABLE
&EPMSG   SETC  'EPNAME'                  INITIALIZE MSG VARIABLE
&VERSION SETC  '2'         EPNAME IS A VERSION 2 SPECIFICATION @YA11662
.*       ARE THERE ANY SUB-PARAMETERS?
         AIF   (N'&EPNAME GT 1).L0560               YES: ERROR
.L0520   ANOP
.*
.*       BREAK OUT PROCESSING DEPENDING ON MF TYPE
.*
         AIF   (T'&MF EQ 'O').L0580                  STANDARD CASE
         AIF   ('&MF' EQ 'L').L0540                  LIST CASE
.*
.*       HANDLE THE MF=E CASES
.*
         AIF   ('&EPCHAR'(1,1) EQ '(' ).L0580
         AGO   .L0560    ANYTHING OTHER THAN REGISTER FORM INVALID
.L0540   ANOP
.*
.*       HANDLE THE MF=L CASES
.*
         AIF   ('&EPCHAR'(1,1) NE '(').L0580
.*                                           REGISTER FORM INVALID
.L0560   ANOP
.*
.*       ISSUE MNOTE FOR INVALID ENTRY-POINT OPERAND
.*
&BADENT  SETC  'YES'                       FATAL ERROR DETECTED?
.*       MSG: "INVALID (EP,EPNAME) OPERAND SPECIFIED-XXX"
         IHBERMAC 1001,&EPMSG,&EPCHAR
.L0580   ANOP
         AIF   ('&MF(1)' EQ 'E').L0960
.**********************************************************************
.*                                                                    *
.*               VALIDATE LOCKS PARAMETERS                            *
.*                                                                    *
.**********************************************************************
.*
.*       CHECK FOR VALID, NON-DUPLICATE LOCKS
.*             - TYPE 1 DEFAULTS TO HAVING THE LOCAL LOCK
.*             - TYPE 3 + 4 MAY NOT HOLD ANY GLOBAL SPIN LOCK
.*             - TYPE 6 MAY NOT HOLD ANY LOCK
.*
         AIF   (&FUNCNUM EQ &EXTRACT).L0960  EXTRACT CHECKING DONE
         AIF   (T'&LOCKS EQ 'O').L0840
         AIF   (&TYPENUM NE  6 ).L0600
         MNOTE 12,'*** A TYPE 6 SVC MAY NOT HAVE ANY LOCKS'
&BADENT  SETC  'YES'                 FATAL ERROR DETECTED
         AGO   .L0880
.*
.*       IS THIS A DUPLICATE LOCK?
.*
.L0600   ANOP
&INDEX1  SETA   1
.L0620   AIF    (&INDEX1 GT N'&LOCKS).L0840   PROCESSED ALL LOCKS?
&INDEX2  SETA   &INDEX1+1                  NO: PROCESS NEXT
.L0640   AIF    (&INDEX2 GT N'&LOCKS).L0680   LAST LOCK IN LIST?
         AIF    ('&LOCKS(&INDEX1)'  NE '&LOCKS(&INDEX2)').L0660
.*                                             NO: IS IT A DUPLICATE?
         MNOTE 12,'*** DUPLICATE LOCK-- &LOCKS(&INDEX1)'
&BADENT  SETC  'YES'                       FATAL ERROR DETECTED
         AGO   .L0820
.L0660   ANOP
&INDEX2  SETA  &INDEX2+1                   NEXT LOCK IN LIST
         AGO   .L0640
.L0680   ANOP
.*
.*       MAP THE LOCK NAME INTO ITS NUMERIC REPRESENTATION
.*
&TEMP    SETA  0
         AIF   ('&LOCKS(&INDEX1)' NE 'LOCAL').L0700
&TEMP    SETA  &NLOCAL
.L0700   AIF   ('&LOCKS(&INDEX1)' NE 'CMS').L0720
&TEMP    SETA  &NCMS
.L0720   AIF   ('&LOCKS(&INDEX1)' NE 'SRM').L0740
&TEMP    SETA  &NSRM                                           @ZMC3226
.L0740   AIF   ('&LOCKS(&INDEX1)' NE 'SALLOC').L0760
&TEMP    SETA  &NSALLOC
.L0760   AIF   ('&LOCKS(&INDEX1)' NE 'DISP').L0780
&TEMP    SETA  &NDISP
.L0780   AIF   (&TEMP NE 0).L0800             VALID LOCK FOUND?
.*       MSG: "INVALID LOCK OPERAND SPECIFIED- "
         IHBERMAC 1001,LOCK,&LOCKS(&INDEX1)   NO: INVALID LOCK
&BADENT  SETC  'YES'                  FATAL ERROR DETECTED
.L0800   ANOP
&REQLOCK SETA  &REQLOCK+&TEMP         ADD LOCK TO LOCKS VALUE
.* CHECK FOR TYPE 3 OR TYPE 4 SVC REQUESTING A GLOBAL SPIN LOCK
         AIF   (&TYPENUM NE 3 AND &TYPENUM NE 4).L0820   TYPE 3/4?
         AIF   (&TEMP NE &NSRM AND &TEMP NE &NSALLOC                   -
               AND &TEMP NE &NDISP).L0820              SPIN LOCK?
   MNOTE 12,'TYPE 3/4 SVC CANNOT GET SPIN (&LOCKS(&INDEX1)) LOCK.'
&BADENT  SETC  'YES'                  FATAL ERROR DETECTED
.L0820   ANOP
&INDEX1  SETA  &INDEX1+1              ITERATE IN LOOP
         AGO   .L0620
.*
.*       DEFAULT THE LOCAL LOCK FOR TYPE 1 SVC
.*
.L0840   AIF   (&TYPENUM NE 1).L0880  TYPE 1 SVC?
&TEMP    SETA  &REQLOCK/&NLOCAL/2*2   ZERO THE LOCAL BIT DOWN
&TEMP    SETA  &REQLOCK/&NLOCAL-&TEMP ISOLATE THE LOCAL BIT
         AIF   (&TEMP NE 0).L0880    LOCAL LOCK ALREADY SPECIFIED?
&REQLOCK SETA  &REQLOCK+&NLOCAL       NO: DEFAULT IT
.**********************************************************************
.*                                                                    *
.*               VALIDATE APF PARAMETER                               *
.*                                                                    *
.**********************************************************************
.L0880   ANOP
         AIF   (T'&APF EQ 'O' OR '&APF' EQ 'NO').L0920
         AIF   ('&APF' EQ 'YES').L0900
.*       MSG: "APF KEYWORD MUST BE YES OR NO. "
         MNOTE 12,'APF KEYWORD MUST BE YES OR NO.'
&BADENT  SETC  'YES'                    FATAL ERROR DETECTED
         AGO   .L0920
.L0900   ANOP
&APFNUM  SETA  &NAPF
.**********************************************************************
.*                                                                    *
.*               VALIDATE AR PARAMETER                                *
.*                                                                    *
.**********************************************************************
.L0920   ANOP
         AIF   (T'&AR EQ 'O' OR '&AR' EQ 'NO').L0930
         AIF   ('&AR' EQ 'YES').L0925
.*       MSG: "AR KEYWORD VALUE MUST BE YES OR NO."
         MNOTE 12,'AR KEYWORD VALUE MUST BE YES OR NO.'
&BADENT  SETC  'YES'                    FATAL ERROR DETECTED
         AGO   .L0930
.L0925   ANOP
&ARNUM   SETA  &NAR  SET VALUE SO AR BIT=1 IN ATTRIBUTE BYTE
.L0930   ANOP
.**********************************************************************
.*                                                                    *
.*               VALIDATE NON-PREEMPTIBILITY PARAMETER                *
.*                                                                    *
.**********************************************************************
         AIF   (T'&NPRMPT EQ 'O' OR '&NPRMPT' EQ 'NO').L0960
         AIF   ('&NPRMPT' EQ 'YES').L0940
.*       MSG: "NPRMPT KEYWORD MUST BE YES OR NO."
         MNOTE 12,'NPRMPT KEYWORD MUST BE YES OR NO.'
&BADENT  SETC  'YES'                    FATAL ERROR DETECTED
.L0940   ANOP
&NPNUM   SETA  &NNP
.**********************************************************************
.*                                                                    *
.*               ARE THE PARAMETERS VALID?                            *
.*                                                                    *
.**********************************************************************
.L0960   AIF   ('&BADENT' NE 'YES').L0980
         MNOTE 12,'*** ERROR(S) CAUSED MACRO EXPANSION TERMINATION'
         AIF   (T'&NM EQ 'O').L1380
&NM      DS    0H
         AGO   .L1380
.**********************************************************************
.*                                                                    *
.* GENERATE CODE TO FIND THE SVCUPDTE SERVICE IF THIS IS NOT MF=L     *
.*                                                                    *
.**********************************************************************
.L0980   AIF   ('&MF' EQ 'L').L1040
&NM      L     R15,=V(SUBSVCUP)   GET SERVICE ROUTINE
.**********************************************************************
.*                                                                    *
.*       GENERATE CODE TO LOAD R1 WITH PARAMETER LIST IF NOT MF=L     *
.*                                                                    *
.**********************************************************************
.*
.*       IF THIS IS THE EXECUTE FORM - USE THE GIVEN PARAMETER LIST
.*
         AIF   ('&MF(1)' NE 'E').L1020  IF THIS ISN'T MF=E
         MACPARM R1,&MF(2)
         AGO   .L1280
.*
.*       IF THIS IS STANDARD FORM - THE PARAMETER LIST FOLLOWS
.*
.L1020   AIF   (T'&MF NE 'O').L1040
         CNOP  0,4                     ENSURE ALIGNMENT FOR STD FORM
         BAS   R1,&LAB1                SET POINTER TO PARAMETER LIST
.**********************************************************************
.*                                                                    *
.*       GENERATE PARAMETER LIST IF THIS IS NOT MF=E                  *
.*                                                                    *
.**********************************************************************
.L1040   AIF   ('&MF' NE 'L').L1060
&NM      DS    0F                      FORCE WORD ALIGNMENT
.L1060   ANOP
         DC    AL1(&VERSION)           SVCUPDTE VERSION NUMBER
         DC    AL1(&FUNCNUM)           FUNCTION TO PERFORM
         DC    AL1(&SVCFLAG)           SVC FLAG
*                                          0 - SVC NUMBER SUPPLIED
*                                          1 - SVC NUMBER NOT GIVEN
.*
.*       IF THIS IS AN EXTRACT FUNCTION ZERO THE SVC NUMBER
.*       FIELD IN THE PARAMETER LIST
.*
         AIF   (&FUNCNUM NE &EXTRACT).L1080
         DC    AL1(0)              SVC NUMBER NOT USED FOR EXTRACT
         AGO   .L1140
.L1080   ANOP
.*
.*       IF NO SVC PARAMETER SUPPLIED OR THE REGISTER FORM WAS USED
.*       THEN USE ZERO IN THE PARAMETER LIST FOR THE SVC PARAMETER
.*
         AIF   (T'&SVC EQ 'O').L1100
         AIF   ('&SVC'(1,1) EQ '(').L1100
         DC    AL1(&SVC)               SVC TO MODIFY
         AGO   .L1120
.L1100   ANOP
         DC    AL1(0)                  SVC NUMBER TO FILL IN LATER
.L1120   ANOP
.*
.*       IF THIS IS A DELETE FUNCTION THE REST OF THE LIST IS ZEROES
.*
         AIF   (&FUNCNUM NE &DELETE).L1140
         DC    16X'0'                  DUMMY ENTRY
         AGO   .L1280
.*
.*       IF A ENTRY POINT IS NOT SUPPLIED OR REGISTER FORM IS USED
.*       THEN USE ZERO AS THE ENTRY POINT
.*
.L1140   AIF   (T'&EP EQ 'O').L1160
         AIF   ('&EP'(1,1) EQ '(').L1160
         DC    AL4(&EP)                ENTRY POINT OF NEW SVC ROUTINE
         AGO   .L1200
.L1160   AIF   (&TYPENUM EQ 5).L1180   TYPE 5 SVC?
         DC    AL4(1)                  ENTRY POINT NOT SPECIFIED
         AGO   .L1200
.L1180   ANOP
         DC    AL4(0)                  ENTRY POINT NOT SPECIFIED
.L1200   ANOP
.*
.*       IF THIS IS AN EXTRACT FUNCTION ZERO THE TYPE AND ATTRIBUTE
.*       FIELDS IN THE PARAMETER LIST
.*
         AIF   (&FUNCNUM NE &EXTRACT).L1220
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)                    RESERVED
         AGO   .L1240
.L1220   ANOP
         DC    AL1(&TYPENUM)           SVC TYPE
&TEMP    SETA  &APFNUM+&ARNUM+&NPNUM   GENERATE ATTRIBUTE CONSTANT
         DC    AL1(&TEMP)              SVC ATTRIBUTE BITS
         DC    AL1(&REQLOCK)           SVC LOCKS
         DC    AL1(0)                  RESERVED
.L1240   ANOP
.*
.*       IF AN EPNAME IS NOT SUPPLIED OR REGISTER FORM IS USED
.*       THEN ZERO EPNAME FIELD IN PARAMETER LIST
.*
         AIF   (T'&EPNAME EQ 'O').L1260
         AIF   ('&EPNAME'(1,1) EQ '(').L1260
         DC    CL8'&EPNAME'            EPNAME OF NEW SVC ROUTINE
         AGO   .L1280
.L1260   ANOP
         DC    8X'00'                  EPNAME NOT SPECIFIED
.L1280   AIF   ('&MF' EQ 'L').L1380
.**********************************************************************
.*                                                                    *
.*       GENERATE CODE TO DYNAMICALLY INSERT EP VALUE INTO            *
.*       THE PARAMETER LIST FOR MF=E AND STANDARD                     *
.*                                                                    *
.**********************************************************************
.L1300   ANOP
&LAB1    DS    0H
         AIF   (&FUNCNUM EQ &DELETE).L1340        END DELETE PROC
         AIF   (T'&EP    EQ 'O').L1320    ENTRY POINT INCLUDED?
         AIF   (T'&MF EQ 'O' AND '&EP'(1,1) NE '(').L1340
         ST    &EP(1),&EPOFF.(0,1)     STORE ADDRESS IN PARAMETER LIST
         AGO   .L1340                  GO PROCESS SVC NUMBER
.**********************************************************************
.*                                                                    *
.*       GENERATE CODE TO DYNAMICALLY INSERT EPNAME VALUE INTO    *
.*       THE PARAMETER LIST FOR MF=E AND STANDARD                     *
.*                                                                    *
.**********************************************************************
.L1320   ANOP
         AIF   (T'&EPNAME EQ 'O').L1340     EPNAME INCLUDED?
         AIF   (T'&MF EQ 'O' AND '&EPNAME'(1,1) NE '(').L1340  REG
         MVC   &EPNOFF.(8,1),0(&EPNAME(1))  MOVE EPNAME INTO LIST
.**********************************************************************
.*                                                                    *
.*       GENERATE CODE TO DYNAMICALLY INSERT SVC VALUES INTO          *
.*       THE PARAMETER LIST FOR MF=E AND STANDARD                     *
.*                                                                    *
.**********************************************************************
.L1340   ANOP
         AIF   (T'&SVC EQ 'O').L1360     SVC SUPPLIED?
         AIF   ('&SVC'(1,1) NE '(').L1360  YES: REGISTER FORM?
         STH   &SVC(1),&SVCOFF-1(0,1)  RESET SVCFLAG & STORE SVC#
.L1360   ANOP
         BALR  R14,R15       CALL UPDATE ROUTINE
.L1380   ANOP
         MEND
