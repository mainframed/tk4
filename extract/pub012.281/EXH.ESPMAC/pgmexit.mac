         MACRO ,
&NM      PGMEXIT &DUMMY,&PFX=,&NEXT=,                                  *
               &RC=,&RC0=,&RC1=,&COPYRET=,&RETADDR=(R14)         83087
         GBLB  &ZZSVBSM      SET BY SAVEM WHEN BSM IS USED ON ENTRY
         GBLB  &MVS,&MVSXA,&MVSESA,&OS390,&Z900,&BUGDBO         GP04234
         GBLC  &SAVTYPE,&SAVNAME                                GP04050
         GBLC  &MACPLAB                                         GP04051
.*--------------------------------------------------------------------*
.*                                                                    *
.*    PGMEXIT PROVIDES THE LOGICAL END OF A PROGRAM INITIATED WITH    *
.*    A PGMHEAD REQUEST. INFORMATION IS PASSED WITH GLOBALS, AND THE  *
.*    CODE DOES NOT SUPPORT INTERLEAVED PGMHEAD/PGMEXIT STATEMENTS.   *
.*                                                                    *
.*    THE PARAMETERS ARE:                                             *
.*                                                                    *
.*    RC=     NUMERIC VALUE (0-4095), REGISTER, OR RELOCATABLE WORD   *
.*    RC0=    NUMERIC VALUE (0-4095), REGISTER, OR RELOCATABLE WORD   *
.*    RC1=    NUMERIC VALUE (0-4095), REGISTER, OR RELOCATABLE WORD   *
.*                                                                    *
.*    RC LOADS REGISTER 15 (STANDARD RETURN CODE CONVENTION)          *
.*    RC0 AND RC1 LOAD REGISTERS 0 AND 1 AND ARE OPTIONAL             *
.*                                                                    *
.*    COPYRET=ADDRESS  OR COPYRET=(ADDRESS) LOAD R15 FROM STORAGE     *
.*    COPYRET=(ADDRESS,LENGTH)  LOAD R15,R0, ETC. DEPENDING ON LENGTH *
.*      ADDRESS IS A RELOCATABLE; LENGTH MUST BE AN ABSOLUTE TERM     *
.*                                                                    *
.*    ANY REGISTER NOT SPECIFIED IS RESTORED TO ITS VALUE ON ENTRY,   *
.*      UNLESS THE NOSAVE OPTION IS IN EFFECT                         *
.*                                                                    *
.*    R14 IS NOT SUPPORTED FOR A REGISTER OPERAND                     *
.*    R15, R0, AND R1 ARE ALLOWED PROVIDING THEY DO NOT CONFLICT      *
.*      E.G.  RC=(R15),RC1=(R1) IS VALID                              *
.*            RC=(R1),RC1=(R15) WILL FAIL                             *
.*                                                                    *
.*    RETADDR=R14 SPECIFIES THE REGISTER CONTAINING THE RETURN        *
.*      ADDRESS. IN BSM MODE, THIS MUST INCLUDE THE APPROPRIATE MODE  *
.*      SETTING BITS. OPERAND IS IGNORED IN BAKR/PR AND XCTL MODES.   *
.*                                                                    *
.*    PFX= SPECIFIES AN OVERRIDE TO THE SAVE AREA AND REGISTER NAME   *
.*      PREFIX. BY DEFAULT THE PFX FROM PGMHEAD IS USED.              *
.*                                                                    *
.*    NEXT= SPECIFIES THE NAME OF A MODULE TO XCTL TO, EITHER AS AN   *
.*      UNQUOTED NAME, OR AS QUOTED STRING, OR AS =CL8' ' LITERAL.    *
.*                                                                    *
.*                                                                    *
.*    THIS MACRO WAS SUGGESTED BY ENDM WRITTEN BY SHMUEL (SEYMOUR J.  *
.*    METZ, WHICH IS COPYRIGHT 1978 BY SHMUEL (SEYMOUR J.) METZ       *
.*
.*    THIS MACRO IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION,
.*    AS DESCRIBED IN MEMBER $$RIGHTS.
.*
.*--------------------------------------------------------------------*
         LCLC  &SAVBASE      SAVE AREA START
         LCLC  &OSVREG,&C    WORK REGISTER FOR HIGH LEVEL SAVE AREA
         LCLB  &NOSAVE,&OLDSAVE  PASSED BY PGMEXIT              GP04051
         LCLB  &OSVLOAD      FLAG THAT OSVREG LOADED AND SET
         LCLB  &LR15         FLAG THAT R15 HAS RC
         LCLB  &LR0          FLAG THAT R15 HAS RC0
         LCLB  &LR1          FLAG THAT R15 HAS RC0
         LCLA  &I,&K
&I       SETA  &SYSNDX
&MACPLAB SETC  '&NM'                                            GP04051
         AIF   ('&PFX' EQ '').NOPFX                             GP04050
&SAVNAME SETC  '&PFX'
.NOPFX   AIF   ('&SAVNAME' NE '').DFPFX                         GP04050
&SAVNAME SETC  'SAVE'                                           GP04050
.DFPFX   ANOP  ,                                                GP04050
&SAVBASE SETC '&SAVNAME'.'SPLN'
&NOSAVE  SETB  ('&SAVTYPE' EQ 'NO')                             GP04051
&OLDSAVE SETB  ('&SAVTYPE' EQ 'OLD')                            GP04051
.*--------------------------------------------------------------------*
.*   STEP 1:  EXCEPT FOR NOSAVE, SAVE ANY NON-NUMERIC RETURN CODES    *
.*       USE R14 AS A WORKING REGISTER                                *
.*       WITH NOSAVE, JUST LOAD THE NON-NUMERICS                      *
.*--------------------------------------------------------------------*
         AIF   (&NOSAVE).CPRCOM
         AIF   (NOT &OLDSAVE).CPROLD
&OSVREG  SETC  'R13'
&OSVLOAD SETB  1
         MACPARM R13,&SAVNAME.13-&SAVBASE.(R13),OP=L  LOAD OLD SV
         AGO   .CPRCOM
.CPROLD  MACPARM R14,&SAVNAME.13-&SAVBASE.(R13),OP=L  LOAD WORK
&OSVREG  SETC  'R14'         WORK REGISTER
&OSVLOAD SETB  1             WORK REGISTER LOADED
.CPRCOM  AIF   (T'&COPYRET EQ 'O').DONCOPY
         AIF   (N'&COPYRET LT 2).CPRONE
         AIF   (N'&COPYRET EQ 2).CPRTWO
.CPRBAD  MNOTE 4,' COPYRET PARAMETER INVALID; USE (ADDR-EXPR,LENGTH)'
         MEXIT ,
.CPRTWO  AIF   (&NOSAVE).CPRTWON
&MACPLAB MVC   &SAVNAME.15-&SAVBASE.(&COPYRET(2),&OSVREG),&COPYRET(1)
&MACPLAB SETC  ''
         AGO   .NOL15
.CPRTWON MACPARM R15,&COPYRET(2)/4-2,&COPYRET(1),OP=LM
         AGO   .NOL15
.CPRONE  AIF   (&NOSAVE).CPRONEN
&MACPLAB MVC   &SAVNAME.15-&SAVBASE.(4,&OSVREG),&COPYRET(1)
&MACPLAB SETC  ''
         AGO   .NOL15
.CPRONEN MACPLAB R15,&COPYRET(1),OP=L,OPR=LR
         AGO   .NOL15
.*--------------------------------------------------------------------*
.*    NOTE THAT NUMERIC (T' = 'N') CODES ARE LOADED LATER ON          *
.*--------------------------------------------------------------------*
.DONCOPY AIF   (T'&RC EQ 'O').NOL15
         AIF   (T'&RC EQ 'N').NOL15                             GP04051
         AIF   (&NOSAVE).NSL15
         AIF   ('&RC'(1,1) EQ '(').STL15
.NSL15   MACPARM R15,&RC,OP=L                                   GP04051
         AIF   (&NOSAVE).NOL15
         MACPARM R15,&SAVNAME.15-&SAVBASE.(,&OSVREG),OP=ST      GP04051
         AGO   .NOL15                                           GP04051
.STL15   MACPARM &RC(1),&SAVNAME.15-&SAVBASE.(,&OSVREG),OP=ST   GP04051
.NOL15   AIF   (T'&RC0 EQ 'O').NOL0
         AIF   (T'&RC0 EQ 'N').NOL0                             GP04051
         AIF   (&NOSAVE).NSL0
         AIF   ('&RC0'(1,1) EQ '(').STL0
.NSL0    MACPARM R0,&RC0,OP=L                                   GP04051
         AIF   (&NOSAVE).NOL0
         MACPARM R0,&SAVNAME.0-&SAVBASE.(,&OSVREG),OP=ST        GP04051
         AGO   .NOL0                                            GP04051
.STL0    MACPARM &RC0(1),&SAVNAME.0-&SAVBASE.(,&OSVREG),OP=ST   GP04051
.NOL0    AIF   (T'&RC1 EQ 'O').DONLREG
         AIF   (T'&RC1 EQ 'N').DONLREG                          GP04051
         AIF   (&NOSAVE).NSL1
         AIF   ('&RC1'(1,1) EQ '(').STL1
.NSL1    MACPARM R1,&RC1,OP=L                                   GP04051
         AIF   (&NOSAVE).DONLREG
         MACPARM R1,&SAVNAME.1-&SAVBASE.(,&OSVREG),OP=ST        GP04051
         AGO   .DONLREG                                         GP04051
.STL1    MACPARM &RC1(1),&SAVNAME.1-&SAVBASE.(,&OSVREG),OP=ST   GP04051
.*--------------------------------------------------------------------*
.*   STEP 2: REGAIN OLD SAVE AREA                                     *
.*--------------------------------------------------------------------*
.DONLREG AIF   (&NOSAVE).DONLSAV
         AIF   (&OLDSAVE).NSVSAVE
         MACPARM R1,(R13),OP=LR        SAVE STORAGE ADDRESS
.NSVSAVE AIF   (NOT &OSVLOAD).NSVLOAD  GET CALLER'S SAVE AREA
         AIF   ('&OSVREG' EQ 'R13').DONLSAV  HAVE IT ALREADY
         MACPARM R13,(&OSVREG),OP=LR   SKIP STORAGE IF HAVE
         AGO   .DONLSAV
.NSVLOAD MACPARM R13,&SAVNAME.13-&SAVBASE.(R13),OP=L  OLD SAVE AREA
.*--------------------------------------------------------------------*
.*   STEP 3: FREE WORKING STORAGE                                     *
.*--------------------------------------------------------------------*
.DONLSAV AIF   (&NOSAVE OR &OLDSAVE).DONFREE
         MACPARM R0,&SAVNAME.SPLN-&SAVBASE.(R1),OP=L
         AIF   (&MVSESA).STOREL                                 GP04234
         ICM   R15,7,&SAVNAME.SPLN+1-&SAVBASE.(R1)  ANY LENGTH? GP04234
         BZ    ZZZ&I.L       SKIP IF ZERO LENGTH                GP04234
         FREEMAIN R,LV=(0),A=(1)  FREE STORAGE                  GP04234
ZZZ&I.L  DS    0H                                               GP06277
         AGO   .COMREL                                          GP04234
.STOREL  LR    R15,R0        COPY POSSIBLE SUBPOOL              GP04051
         SLL   R0,8
         SRA   R0,8          REMOVE SUBPOOL
         BZ    ZZZ&I.L       SKIP IF ZERO LENGTH
         SRL   R15,24        RIGHT-JUSTIFY SUBPOOL
.*       STORAGE RELEASE,ADDR=(1),LENGTH=(0),SP=(15)
         STORAGE RELEASE,ADDR=(1),LENGTH=(0),SP=(15)
.COMREL  ANOP  ,                                                GP04234
.*--------------------------------------------------------------------*
.*   STEP 4: LOAD NUMERIC RETURN CODES                                *
.*--------------------------------------------------------------------*
.DONFREE AIF   (T'&COPYRET NE 'O').LARDONE  COPYRET DONE ALREADY
         AIF   (T'&RC NE 'N').NOR15
&LR15    SETB  1             SHOW REGISTER LOADED
         MACPARM R15,&RC,OP=LA                                  GP04051
.NOR15   AIF   (T'&RC0 NE 'N').NOR0
         MACPARM R0,&RC0,OP=LA
&LR0     SETB  1             SHOW REGISTER LOADED
.NOR0    AIF   (T'&RC1 NE 'N').LARDONE
         MACPARM R1,&RC1,OP=LA
&LR1     SETB  1             SHOW REGISTER LOADED
.*--------------------------------------------------------------------*
.*   STEP 5: RESTORE NON-RC REGISTERS AS NEEDED                       *
.*--------------------------------------------------------------------*
.LARDONE AIF   (&NOSAVE).LNRDONE
&OSVREG  SETC  'R14'
         AIF   (NOT &LR15 AND NOT &LR0 AND NOT &LR1).LNRALL
         AIF   (NOT &LR15).LNR2LM
         MACPARM R14,&SAVNAME.14-&SAVBASE.(R13),OP=L
&OSVREG  SETC  'R2'
         AIF   (&LR1 AND &LR0).LNRALL
&OSVREG  SETC  'R0'
         AIF   (NOT &LR0 AND NOT &LR1).LNRALL
&OSVREG  SETC  'R1'
         AIF   (&LR0).LNRALL
&OSVREG  SETC  'R2'
         MACPARM R0,&SAVNAME.0-&SAVBASE.(R13),OP=L
         AGO   .LNRALL
.LNR2LM  ANOP  ,
&OSVREG  SETC  'R1'.'+&LR1*4'
         AIF   (NOT &LR0).LNRE0
         MACPARM R14,R15,&SAVNAME.14-&SAVBASE.(R13),OP=LM,MODE=THREE
         AGO   .LNRALL
.LNRE0   MACPARM R14,R0,&SAVNAME.14-&SAVBASE.(R13),OP=LM,MODE=THREE
.LNRALL  ANOP  ,
&K       SETA   K'&OSVREG
&C       SETC   '&OSVREG'(2,&K-1)
        MACPARM &OSVREG,R12,&SAVNAME.&C-&SAVBASE.(R13),OP=LM,MODE=THREE
.*--------------------------------------------------------------------*
.*   STEP 6: XCTL OR RETURN ACCORDING TO ENTRY LINKAGE                *
.*--------------------------------------------------------------------*
.LNRDONE AIF   (&NOSAVE).RETFOOT                                GP04051
         MVI   &SAVNAME.14-&SAVBASE.(R13),X'FF' FLAG AS LAST SAVE AREA
.RETFOOT AIF   (T'&NEXT NE 'O').GOXCTL
         AIF   (T'&RETADDR EQ 'O').BUGME                        GP09183
         AIF   (&ZZSVBSM).GOBSM
         MACPARM &RETADDR,OP=B,OPR=BR,MODE=ONE                  GP04051
         AGO   .BUGME                                           GP09183
.GOXCTL  ANOP  ,                                                GP04234
&MACPLAB LA    R15,ZZZ&SYSNDX.X
         XCTL  SF=(E,(15))                                      GP04050
ZZZ&SYSNDX.X XCTL EP=&NEXT,SF=L
         AGO   .BUGME                                           GP09183
.GOBSM   MACPARM 0,&RETADDR(1),OP=BSM,OPR=BSM                   GP04051
.BUGME   AIF   (NOT &BUGDBO).END                                GP09183
         DBO   MODE=C        EXPAND DEBUG SUPPORT               GP09183
.END     MEND  ,
