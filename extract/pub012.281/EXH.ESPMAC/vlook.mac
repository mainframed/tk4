         MACRO
&NM      VLOOK &T=,&B=*,&R=,&PFX=,&X=R5,&Y=R6,&Z=R4,&E=,               *
               &STRIP=,&ABBR=,&FULL=,&NOTE=DB,&MATCH=     ADDED GP13190
         GBLB  &ZZ@BLUK                              ADAPTED FROM BLOOK
         GBLC  &MACPLAB,&ZZ@BLUF
.**********************************************************************
.*                                                                   **
.*    Verb lookup routine; see BTAB macro for matching verb defs     **
.*    T     - address of BTAB definitions                            **
.*    X     - pointer for scanning                             (R5)  **
.*    Y     - register pointing at last byte of text           (R6)  **
.*    E     - end of text address (if not &R+l'&R-1 default)         **
.*    Z     - register for BTAB scanning                       (R4)  **
.*    R     - address of text                                        **
.*    B     - base address for (b)ddd branching; B=A (absolute)      **
.*            branches to BTAB with BASE=0; B=* (default) branches   **
.*            from CSECT (as does B= )                               **
.*    PFX   - 0-4 character label prefix (default VERB)              **
.*    STRIP - (default) skip leading blanks                          **
.*            =NEVER    process at current input address             **
.*    ABBR  - when specified, accepts matches for abbreviated verbs  **
.*            of any length from original to ABBR value (no default) **
.*            ABBR=3 for 'COMMAND' would match COMMAND, COMMAN,      **
.*            COMMA, COMM, and COM                                   **
.*    FULL  - one or more trailing characters inhibiting shorter     **
.*            compares. No default; common are = and (               **
.*            e.g., FULL='=' (valid are FULL=alphanum; FULL='chars'; **
.*            FULL=C'chars'; and FULL=X'hexchars')                   **
.*    NOTE  - Names a word in which the start address after STRIP    **
.*            deblanking is saved. May be a register R2-12 distinct  **
.*            from any used by the macro (use R2, R3, R7+).          **
.*                                                                   **
.**********************************************************************
.*                                                                   **
.*    X returns next byte after match, or last text + 1 for no match **
.*    R14 is a return register; R15-R1 are work registers.           **
.*      code branches to R15 on match, R14 otherwise.                **
.*      When user specifies MATCH=, it branches to that after load   **
.*        of R15 (used for table lookup).                            **
.*                                                                   **
.*    Y unchanged.                                                   **
.*    Z returns last processed table entry.                          **
.*                                                                   **
.**********************************************************************
.*                                                                   **
.*    VLOOK expands an in-line subroutine, called by other           **
.*    references. To use in an assembly with multiple, not mutually  **
.*    addressable CSECTs, use a unique PFX in each.                  **
.*                                                                   **
.**********************************************************************
         LCLC  &L,&D,&LAB,&D1,&D2,&D3
         LCLA  &I,&J,&K
&L       SETC  'L'''
         AIF   ('&ZZ@BLUF' NE '').OLDLAB
&ZZ@BLUF SETC  'VERB'        DEFAULT LABEL
.OLDLAB  ANOP  ,
         AIF   ('&PFX' EQ '' OR '&PFX' EQ '&ZZ@BLUF').DONLAB
&ZZ@BLUF SETC  '&PFX'
&ZZ@BLUK SETB  0             EXPAND CODE WITH NEW LABELS
.DONLAB  ANOP  ,
&LAB     SETC  '&ZZ@BLUF'
&NM      MACPARM &Z,&T,NULL==X'FF'
&D       SETC  '('.'&Y'.')'
         AIF   ('&D' EQ '&R' OR '&R' EQ '&Y').NOEND
         MACPARM &Y,&E,NULL=&R+&L&R-1                           GP14241
.NOEND   AIF   (&ZZ@BLUK).NOTONCE
&ZZ@BLUK SETB  1
         B     &LAB.END      BRANCH AROUND
&LAB.LOOK SLR  R15,R15       ZERO IC REGISTER
         AIF   ('&STRIP' EQ 'NEVER').NODEBLK
&LAB.1   MACPARM &X,&NOTE,OP=ST,OPR=LR,MODE=REV,NULL=SKIP       GP14262
         MACPARM 0(&X),C' ',OP=CLI                              GP14262
         BNE   &LAB.2        OK
         LA    &X,1(,&X)     SKIP TO NEXT BYTE
         CR    &X,&Y         REACHED END OF INPUT BUFFER
         BNH   &LAB.1        NO, LOOK FOR NON-BLANK
         BR    R14           RETURN, BUFFER EXHAUSTED
         AGO   .YESBLNK
.NODEBLK B     &LAB.2        NO DEBLANKING
.YESBLNK ANOP  ,
&LAB.CHEK CLC  4(0,&Z),0(&X) MATCHING VERB ?
&LAB.3   LA    &Z,5(R15,&Z)  BUMP TO NEXT TABLE ENTRY
&LAB.2   CLI   0(&Z),X'FF'   END OF TABLE ?
         BER   R14           YES, VERB NOT FOUND
         IC    R15,0(,&Z)    LENGTH - 1  OF TABLE ENTRY
         LR    R1,R15        SAVE OVER SHORTENING               GP13341
         EX    R15,&LAB.CHEK  SAME VERB ?
         AIF   ('&ABBR' EQ '').NOABBR
         BE    &LAB.MAT
         LA    R0,1(,R15)    COPY LENGTH
         SH    R0,=AL2(&ABBR)    SHORTER ALLOWED ?
         BNP   &LAB.3               NO; TRY NEXT
         AIF   ('&FULL' EQ '').LABNKC      SKIP IF NO KEYWORDS
&D       SETC  '&FULL'
&D1      SETC  'C'''
&D2      SETC  ''''
&K       SETA  K'&FULL
&J       SETA  1             STRIDE
         AIF   ('&FULL' EQ '''').LABNKS
         AIF   (&K LT 3).LABNKS
         AIF   ('&D'(1,2) EQ 'X''').HEXSTR       HEX
         AIF   ('&D'(1,2) EQ 'C''').TXTSTR       TEXT
         AIF   ('&D'(1,1) NE '''').LABNKS       PLAIN STRING
&D       SETC  '&D'(2,&K-2)
&K       SETA  K'&D
         AGO   .LABNKS
.TXTSTR  ANOP  ,             TEXT NOTATION   C' '
&D       SETC  '&D'(3,&K-3)
&K       SETA  K'&D
         AGO   .LABNKS
.HEXSTR  ANOP  ,             HEX NOTATION
&D1      SETC  'X'''
&D       SETC  '&D'(3,&K-3)
&K       SETA  K'&D
&J       SETA  2             STRIDE
.LABNKS  LA    R1,4(R15,&Z)  POINT TO LAST BYTE OF VERB
&I       SETA  1
         AIF   (&K GE &J).LABNKL
         MNOTE 4,'VLOOK: MALFORMED FULL=&FULL'
         AGO   .LABNKC
.LABNKL  ANOP  ,
&D3      SETC  '&D'(&I,&J)
         AIF   (&J NE 1 OR ('&D3' NE '''' AND '&D3' NE '&&')).LABNDB
.*TEST   AIF   ('&D'(&I,&J+1) NE '&D3').LABOOPS
&I       SETA  &I+1
.LABOOPS ANOP  ,             USER ERROR
&D3      SETC  '&D3'.'&D3'
.LABNDB  CLI   0(R1),&D1&D3&D2    SPECIAL?
         BE    &LAB.3          YES; NO ABBR
&I       SETA  &I+&J
         AIF   (&I LE &K).LABNKL      TRY AGAIN
.LABNKC  LR    R1,R15
&LAB.ALP BCTR  R1,0
         EX    R1,&LAB.CHEK  MATCH ?
         BE    &LAB.MA1        YES; GET OUT
         BCT   R0,&LAB.ALP   SHORTER ALLOWED ?
         B     &LAB.3          NO; TRY NEXT
         AGO   .DOABBR
.NOABBR  BNE   &LAB.3        NO, KEEP LOOKING
.DOABBR  ANOP  ,
&LAB.MA1 LR    R15,R1        SET FOR CORRECT INPUT POSITION
&LAB.MAT LA    &X,1(R15,&X)  POINT TO FIRST BYTE PAST VERB
         ICM   R15,7,1(&Z)   LOAD DISPLACEMENT ADDRESS
         AIF   (T'&MATCH NE 'O').GOMA
         AIF   ('&B' EQ '').RELDEF
         AIF   ('&B' EQ '*').RELDEF
         AIF   ('&B'(1,1) EQ '(').REL
         AIF   ('&B' EQ 'A').ABS
         MNOTE 8,'B NOT A OR (REG)'
.ABS     BR    R15
         AGO   .BDONE
.REL     B     0(R15,&B(1))
         AGO   .BDONE
.RELDEF  B     &SYSECT.(R15)
         AGO   .BDONE                                           GP15141
.GOMA    MACPARM &MATCH,MODE=1,OP=B,OPR=BR                      GP15141
.BDONE   ANOP  ,
&LAB.END DS    0H
.NOTONCE AIF   ('&STRIP' EQ 'NO' OR '&STRIP' EQ 'NEVER').STRIPPD
         MACPARM R14,&LAB.LOOK,OP=BAL
         AGO   .MEND
.STRIPPD AIF   ('&STRIP' EQ 'NEVER').STRIPPR
         MACPARM R15,0       CLEAR R15 FIRST (AM31,RM24)
.STRIPPR MACPARM R14,&LAB.LOOK,OP=BAL
.MEND    MEND  ,
