         MACRO
&L       WTBLD &DUM,&MSGSECT=,&PFX='---> ',&SFX=' <---',          78310*
               &CPU=370,                                          *GPP**
               &ROUTCDE=(2,13),&UCMID=,&DOM=,&SCON=NO,&WTOIN=NO,&ML=
         GBLC  &WTOSECT                                           78310
         LCLA  &I,&LPFX,&LSFX
.*
.*             THIS MACRO WAS WRITTEN BY:
.*                            SHMUEL (SEYMOUR J.) METZ
.*                            SIGMA DATA SERVICES CORPORATION     78310
.*                            GODDARD SPACE FLIGHT CENTER         78310
.*                            CODE 911                            78310
.*                            GREENBELT ROAD                      78310
.*                            GREENBELT, MARYLAND   20771         78310
.*
.*             IT MAY NOT BE DISTRIBUTED WITHOUT PERMISSION FROM ME:
.*             ANYONE REQUESTING A COPY SHOULD BE REFERRED TO THE
.*             SHARE MFT/MVT PROJECT, WHICH IS DISTRIBUTING IT
.*             ON THE "MICHIGAN MODS TAPE", AKA NMDBT;
.*             ALTERNATIVELY, IT MAY BE OBTAINED BY ORDERING THE TDTR
.*             (TECHNION DTR) FROM THE TECHNION.
.*
.*             THIS RESTRICTION IS INTENDED TO PREVENT A PROLIFERATION
.*             OF INCOMPATIBLE VERSIONS: ANY REASONABLE SUGGESTIONS
.*             OR CONTRIBUTIONS WILL BE ADDED TO THE DISTRIBUTED COPY.
.*                                                                78310
         AIF   ('&WTOSECT' EQ '').SECTSET                         78310
         AIF   ('&MSGSECT' EQ '&WTOSECT').SECTOK                  78310
         AIF   ('&MSGSECT' EQ '').SECTOK                          78310
         MNOTE 8,'MSGSECT=&MSGSECT INCONSISTENT'                  78310
         MNOTE 8,'MSGSECT=&WTOSECT PREVIOUSLY SPECIFIED'          78310
         AGO   .SECTOK                                            78310
.SECTSET ANOP  ,                                                  78310
&WTOSECT SETC  '&MSGSECT'                                         78310
         AIF   ('&WTOSECT' NE '').SECTOK                          78310
&WTOSECT SETC  'MSGCSECT'                                         78310
.SECTOK  ANOP  ,                                                  78310
         AIF   ('&PFX' EQ '').NOPFX
         AIF   ('&PFX'(1,1) EQ '''' AND '&PFX'(K'&PFX,1) EQ '''').PFOK
         MNOTE 12,'PFX INVALID - MUST BEGIN AND END WITH ''.'
         MEXIT
.SPFX    MNOTE 12,'PFX INVALID - NO TEXT'
         MEXIT
.PFOK    AIF   ('&PFX' EQ '''' OR '&PFX' EQ '''''').SPFX
&I       SETA  2
.PLOOP   AIF  ('&PFX'(&I,2) NE ''''''  AND                             *
               '&PFX'(&I,2) NE '&&&&').PSNGL
&I       SETA  &I+1
.PSNGL   ANOP
&I       SETA  &I+1
&LPFX    SETA  &LPFX+1
         AIF   (&I LT K'&PFX).PLOOP
         AIF   (&I EQ K'&PFX).NOPFX
         MNOTE 12,'PFX HAS UNMATCHED ''S.'
         MEXIT
.*
.NOPFX   AIF   ('&SFX' EQ '').NOSFX1
         AIF   ('&SFX'(1,1) EQ '''' AND '&SFX'(K'&SFX,1) EQ '''').SFOK
         MNOTE 12,'SFX INVALID - MUST BEGIN AND END WITH ''.'
         MEXIT
.SSFX    MNOTE 12,'SFX INVALID - NO TEXT'
         MEXIT
.SFOK    AIF   ('&SFX' EQ '''' OR '&SFX' EQ '''''').SSFX
&I       SETA  2
.SLOOP   AIF  ('&SFX'(&I,2) NE '''''' AND                              *
               '&SFX'(&I,2) NE '&&&&').SSNGL
&I       SETA  &I+1
.SSNGL   ANOP
&I       SETA  &I+1
&LSFX    SETA  &LSFX+1
         AIF   (&I LT K'&SFX).SLOOP
         AIF   (&I EQ K'&SFX).NOSFX1
         MNOTE 12,'SFX HAS UNMATCHED ''S.'
         MEXIT
.*
.NOSFX1  ANOP
&I       SETA   1
         SPACE 1
*        R0    PAD
*        R1    -> WTO/WTOR PARM LIST
*        R2    LENGTH-1 FOR MVC
*        R3    -> DESC (OR BYTE AFTER TEXT FOR MLWTO)
*        R4    -> WTO PARM LIST, ADJUSTED FOR PREFIX
*        R5    -> WTO PARM LIST (OR -> LENGTH FOR MLWTO)
*        R6    -> MSG
*        R9    INTERNAL CALL REGISTER
*        R14   PARM/RETURN
*        +0    DESCRIPTOR
*        +2    LENGTH-1 OF TEXT
*        +3    FLAG BYTE
*        +4    DISPLACEMENT TO TEXT
*        +6    RETURN
         SPACE 1
*              FOR MULTI-LINE MESSAGES:
*        +0    DESCRIPTOR
*        +2    LENGTH-1
*        +3    FLAG BYTE
*        +4    DISPLACEMENT TO TEXT
*        +6    LINE TYPE
*        +8    LENGTH-1 OF TEXT
*        +9    FLAG
*        +10   DISPLACEMENT TO TEXT
*        +12   LINE TYPE
*        +14   LENGTH-1 OF TEXT
*        ...
*              X'FFFF'
*        +2    RETURN
         SPACE 3
*              CONSTRUCTED WTO/WTOR IS OF FORM:
*        +0    L'REPLY
*        +1    AL3(REPLY)
*        +4    A(ECB)
*        +8    0
*        +9    LENGTH
*        +10   MCSFLAGS
*        +12   TEXT
*        ---   DESCRIPTOR
*        +2    ROUTCDE
*        +4    LINE TYPE (IF MLWTO)
*        +6    AREA ID
*        +7    # OF LINES
         SPACE 1
*        +8    LENGTH
*        +10   LINETYPE
*        +12   TEXT
*        ...
         SPACE 3
         USING WT1,R5
         USING WT2,R3
         USING WTPRM,R14
         AIF   ('&ML' EQ 'NO').NOML1
         SPACE 2
*              ENTRY POINT TO ADD LINES TO MLWTO
WTOEXTND XR    R0,R0                    DO NOT ALLOW FOR POSTFIX
         BCTR  R14,0                    FOR COMPATIBILITY WITH BUILD
         BCTR  R14,0                        R14=R14-2
         AIF   ('&SCON' NE 'NO').SCON1
         STM   R14,R12,12(R13)
         AGO   .NOSCON1
.SCON1   STM   R0,R15,WTOREGS
.NOSCON1 LA    R1,WTOMSGL
         L     R3,DESCPTR               R2 = # OF LINES ALREADY BUILT
         XR    R2,R2
         IC    R2,WTNUMLIN
         LA    R5,WTNUMLIN+1
WTOE1    BCT   R2,*+8
         B     WTOB2
         AIF   ('&CPU' NE '360').SK370                            *TSM*
         XR    R4,R4                    SKIP TO NEXT LINE
         IC    R4,WTLENGTH+1
         AGO   .SK360
.SK370   LH    R4,WTLENGTH              SKIP TO NEXT LINE
.SK360   AR    R5,R4
         B     WTOE1
.NOML1   SPACE 2
*              ENTRY POINT TO CONSTRUCT WTO/WTOR
WTOBUILD XR    R0,R0                    DO NOT ALLOW FOR POSTFIX
         AIF   ('&SCON' NE 'NO').SCON2
         STM   R14,R12,12(R13)
         AGO   .NOSCON2
.SCON2   STM   R0,R15,WTOREGS
.NOSCON2 LA    R5,WTOMSGL               PTR FOR MSG BUILD
         LR    R1,R5                    PTR FOR EXIT
         TM    WPFLAG,$WTOR             IS WTOR FLAG ON
         BZ    WTOB0
         LA    R1,REPLY
         ST    R1,WTORRPLY
         MVI   WTORRPLY,L'REPLY
         LA    R1,WTORECB
         ST    R1,WTORECBA
         MVI   WTORECB,0
         LA    R1,WTOR
         LA    R5,WTORMSGL
         USING WT1,R5
         USING WT2,R3
WTOB0    BALS  R9,WTOBLINE              SET UP 1ST OR ONLY LINE OF WTO
         MVC   WTDESC,WPDESC            DESC FROM CALLING SEQUENCE
         MVC   WTROUT,ROUTCDE           ROUTCDE=(2,13)
         MVC   WTFLAG,WFLAG             SET MCS FLAG
         AIF   ('&ML' EQ 'NO').NOML3
         ST    R3,DESCPTR               SAVE FOR SUBSEQUENT LINES
         TM    WPFLAG,$ML               ML WTO REQUESTED?
         BZ    WTOBEXIT                  NO  - CLEAN UP AND GO
         OI    WTFLAG+1,$MCMLWTO         YES - FLAG AS SUCH
         MVC   WTLINTYP,WPLINTYP        MOVE IN 1ST LINE TYPE
         WTPVT AREAID                   DEFAULT: MVI WTAREAID,0
         MVI   WTNUMLIN,1               INDICATE 1 LINE
         LA    R5,WTNUMLIN+1            SETUP FOR NEXT LINE
WTOB1    CLI   WPSTOPER,X'FF'           DAY IS DUN?
         BE    WTOBXTML                     YES - DEPART
         LA    R14,WPSTOPER-WPTXLENG+WTPRM  NO  - TO NEXT ENTRY
WTOB2    MVC   WTLINTP2,WPLINTYP        MOVE IN NEXT LINE TYPE
         L     R3,DESCPTR               BUMP # OF LINES
         IC    R15,WTNUMLIN
         LA    R15,1(,R15)
         STC   R15,WTNUMLIN
         BALS  R9,WTOBLINE              SET UP SUBSEQUENT LINE OF WTO
         LR    R5,R3                    SET UP FOR NEXT LINE
         B     WTOB1                    OD PA'AM
.NOML3   SPACE 2
WTOBLINE LH    R6,WPTXDISP
         A     R6,=A(&WTOSECT)                                    78310
         XR    R2,R2                    PICK UP LENGTH-1 FOR MVC
         IC    R2,WPTXLENG
         AIF   ('&SCON' EQ 'NO').NOSCON3
         TM    WPFLAG,$SCON             TEXT POINTER OR OFFSET?
         BZ    NOSCON                    OFFSET
         MVC   WTOLA(2),=X'4160'        BUILD: LA R6,OFFSET(,R15)
         MVC   WTOLA+2(2),WPTXDISP
         OI    WTOLA+2,X'F0'
         SR    R15,R15                  LOCATE REGISTER SAVE FOR R
         IC    R15,WPTXDISP
         SRL   R15,4
         SLL   R15,2
         L     R15,WTOREGS(R15)         LOAD FROM SAVED VALUE
         EX    0,WTOLA                  R6->WTO (RECFM=V)
         AIF   ('&CPU' NE '360').LH370                            *GPP*
         SR    R2,R2         CLEAR FOR IC                         *GPP*
         IC    R2,1(,R6)     LENGTH FROM WTO                      *GPP*
         AGO   .LHCOM                                             *GPP*
.LH370   LH    R2,0(,R6)     LENGTH FROM WTO                      *GPP*
.LHCOM   SH    R2,=H'5'       - 5                                 *GPP*
         LA    R6,4(,R6)                R6->TEXT
.NOSCON3 ANOP
NOSCON   LA    R3,WTTEXT+1(R2)          -> DESC IF NO PFX/SFX
         AR    R3,R0
         XR    R0,R0                    CLEAR FOR NEXT LINE IF MLWTO
         LR    R4,R5
         TM    WPFLAG,$PFX              IS PREFIX FLAG ON?
         BZ    WTOBL1
         WTPVT CODE,PFX=&PFX,LPFX=&LPFX,SFX=&SFX,LSFX=&LSFX
WTOBL1   EX    R2,WTOBMVC               MOVE IN CALLER'S MESSAGE
         SR    R3,R5                    SET WTO/WTOR LENGTH
         AIF   ('&CPU' NE '360').STH370                           *GPP*
         STC   R3,WTLENGTH+1       STORE LENGTH                   *GPP*
         MVI   WTLENGTH,0    FOLLOW CONVENTIONS                   *GPP*
         AGO   .STHCOM                                            *GPP*
.STH370  STH   R3,WTLENGTH     STORE LENGTH                       *GPP*
.STHCOM  AR    R3,R5         RESTORE DESC PTR                     *GPP*
         BR    R9                       BACK FOR NEXT LINE
         DROP  R3
         DROP  R5
         SPACE 1
         USING WT1,R5
         USING WT2,R3
         AIF   ('&UCMID' EQ '').NOUCMID
         AIF   ('&ML' EQ 'NO').NOML2A
WTOBXTML LR    R5,R1                    RESTORE PFX POINTER IF MLWTO
.NOML2A  ANOP
WTOBEXIT XR    R0,R0                    CLEAR FOR MLWTO IN KEY 0  *TSM*
         TM    WPFLAG,$UCMID            WTO WITH UCMID IN R0 DESIRED?
         BZ    NOUCMID                   NO
         IC    R0,UCMID                 GET UCMID FOR WTO         *TSM*
         LTR   R0,R0                    IS UCMID PRESENT?
         BZ    NOUCMID                   NO - CAN'T DO WITH REG0
         OI    WTFLAG,$MCREG0           SET UCMID FLAG IN WTO
NOUCMID  TM    WPFLAG,$IMM              IS IMMEDIATE WTO FLAG ON?
         AGO   .UCMID
.NOUCMID ANOP
         AIF   ('&ML' EQ 'NO').NOML2B
WTOBXTML EQU   *                        RESTORE PFX POINTER IF MLWTO
*                                        NOT NEEDED SINCE NO UCMID
.NOML2B  ANOP
WTOBEXIT TM    WPFLAG,$IMM              IS IMMEDIATE WTO FLAG ON?
.UCMID   BZ    WTOBXIT1                  NO - LET CALLER MUCK UP WTO
         WTO   MF=(E,(1))
         AIF   ('&DOM' EQ 'NO').NODOM1
         AIF   ('&ML' EQ 'NO').NOML4
         L     R3,DESCPTR               RESTORE PTR IF MLWTO
.NOML4   TM    WTDESC,$DSIMMAC          IS THIS DESC=2?
         BZ    WTOBXIT1                   NO - DON'T NEED DOM
*              LEAVE DESC=1 FOR OPERATOR DELETE VIA K (CONTROL) CMD
         BALS  R15,SAVEDOM
.NODOM1  AIF   ('&SCON' NE 'NO').SCON4
WTOBXIT1 LM    R2,R10,28(R13)
         AGO   .NOSCON4
.SCON4   ANOP
WTOBXIT1 LM    R2,R10,WTOR2
.NOSCON4 AIF   ('&ML' EQ 'NO').NOML5
         TM    WPFLAG,$ML               WHERE IS THE RETURN POINT?
         BO    WPRTRN2                   +10
.NOML5   B     WPRETRN                   +6
         DROP  R5,R3
         DROP  R14
         SPACE 1
         WTPVT DSECT,PFX=&PFX,LPFX=&LPFX,SFX=&SFX,LSFX=&LSFX
         SPACE 1
WTOBMVC  MVC   4(0,R4),0(R6)            MOVE IN CALLER'S MESSAGE
         AIF   ('&WTOIN' EQ 'NO').NOWTOIN
         SPACE 5
*              THIS ENTRY POINT IS USED TO COMPLETE A PARTIALLY
*              CONSTRUCTED WTO.
*              THE CALLER MUST SET THE TEXT INTO WTOMSG AND THE
*              LENGTH INTO WTOMSGL(FIRST BYTE WILL BE ZEROED BY WTOIN).
*              CALLING SEQUENCE IS:
         SPACE 1
*        BALS  R14,WTOIN
*        DC    XL2'DESCRIPTORS'
         SPACE 1
WTOIN    MVI   WTOMSGL,0
         LA    R1,WTOMSG-4
         AH    R1,WTOMSGL
         MVC   0(2,R1),0(R14)           DESC FROM CALLING SEQUENCE
         MVC   2(2,R1),ROUTCDE          ROUTCDE=(2,13)
         MVC   WTOFLGS(2),WFLAG
         LA    R1,WTOMSGL
         B     2(R14)
.NOWTOIN AIF   ('&DOM' EQ 'NO').NODOM2
         SPACE 1
         AIF   ('&DOM' EQ '1').ONEDOM1
SAVEDOM  MVC   DOMTABST,DOMTABLE+4      MAKE ROOM FOR NEW ENTRY
         AIF   ('&CPU' NE '360').SD370                            *TSM*
         ST    R1,DOMLAST    SAVE NEW ENTRY                       *TSM*
         MVI   DOMLAST,X'00'            BYTE0=00                  *TSM*
         AGO   .ONEDOM2                                           *TSM*
.SD370   STCM  R1,7,DOMLAST+1           SAVE NEW ENTRY (BYTE0=00)
         AGO   .ONEDOM2
.ONEDOM1 ANOP
SAVEDOM  ST    R1,DOMTABLE              SAVE NEW ENTRY (BYTE0=00)
.ONEDOM2 BR    R15
         SPACE 1
         AIF   ('&DOM' EQ '1').ONEDOM3
DOMITALL LA    R15,DOMTABLE
         LA    R0,4
         LA    R1,DOMLAST
         OC    1(3,R15),1(R15)
         BNZ   *+10
         BXLE  R15,R0,*-10
         BR    R14
         MVI   DOMLAST,X'80'
         DOM   MSGLIST=0(15)
         AGO   .ONEDOM4
.ONEDOM3 ANOP
DOMITALL L     R1,DOMTABLE
         DOM   MSG=(1)
.ONEDOM4 XC    DOMTABLE(DOMTABLN),DOMTABLE
         BR    R14
.NODOM2  SPACE 1
WFLAG    DC    AL1($MCRTDS,0)           MCSFLAG
ROUTCDE  WTLST &ROUTCDE,TYPE=ROUTCDE
         MEND
