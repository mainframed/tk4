SR309    TITLE 'SR309000 - TSO FULL SCREEN READ/WRITE SUPPORT'
*          DATA SET SR309000   AT LEVEL 025 AS OF 10/15/78
*          DATA SET SR309000   AT LEVEL 024 AS OF 10/15/78
*          DATA SET SR309000   AT LEVEL 023 AS OF 09/21/78
*          DATA SET SR309000   AT LEVEL 022 AS OF 05/02/78
*              PGMID.  SR309000.
*              AUTHOR. DON HIGGINS.
*              DATE.   04/21/78.
*              REMARKS.TSO FULL SCREEN FACILITY (FSF) SUPPORT
*                      ROUTINE LOADED BY SR308000 INTERFACE.
*              MAINT.
*                      REV1 - 09/21/78 - DSH - ADD FSACF
*                      REV2 - 10/15/78 - DSH - ADD FSMODE
*              REFERENCES.
*                1.  TSO CMP/CP GUIDE GC28-0648-2
*                2.  IBM 3270 INTRO   GA27-2738-7
*                3.  COURIER 270 REF. HANDBOOK
*                4.  IBM 3270 COMPONENT DESC. GA27-2749
*
*              LIMITATIONS.
*                1.  THIS FACILITY IS DESIGNED FOR ONLY 3270 TYPE
*                    DISPLAY TERMINALS WITH 1920 CHARACTER SCREENS.
*                    (I WOULD WELCOME MODS FOR OTHER SIZES, WE JUST
*                     DON'T HAVE A NEED FOR OTHERS.)
*                2.  FSRL AND FSWL WILL SWITCH TO SIMPLE ONE LINE
*                    TGET AND TPUT IF ABOVE NOT TRUE.
*                3.  FSW AND FSR WILL ABEND IF ABOVE NOT TRUE.
*
*
*              CALLS.
*                 1.   FULL SCREEN READ
*
*                      CALL FSR(AREA,ROW,COL,AID)
*
*                      AREA   - 23 BY 80 AREA TO BE READ FROM SCREEN
*
*                      ROW    - 4 BYTE BINARY WORD SET TO CURSOR ROW
*                               (0 TO 23)
*                      COL    - 4 BYTE BINARY WORD SET TO CURSOR COL
*                               (1 TO 80)
*                      AID    - 4 BYTE BINARY WORD SET TO ATTENTION
*                               IDENTIFICATION CODE (SEE INTRO PG 28)
*                               CODES ARE TRANSLATED TO FOLLOWING
*                                   0= ENTER
*                                1-24= PFK 1 TO PFK 24
*                               25-27= PA  1 TO PA   3
*                               (ALL OTHER CODES AS IS)
*
*                 2.   FULL SCREEN WRITE
*
*                      CALL FSW(AREA,ROW,COL)
*
*                      AREA   - 23 BY 80 AREA TO DISPLAY
*                      ROW    - 4 BYTE BINARY WORD SPECIFYING ROW
*                               TO POSITION CURSOR ON (0-23)
*                               0 - TITLE LINE (78 CHARACTERS MAX)
*                               1-23 ROWS OF DATA
*                      COL    - 4 BYTE BINARY WORD SPECIFYING COL
*                               TO POSITION CURSOR ON (1-80)
*
*                 3.   FULL SCREEN AREA READ FIELD
*
*                      CALL FSARF(AREA,ROW,COL,LNG,FIELD)
*
*                      AREA   - 23 BY 80 AREA
*
*                      ROW    - 4 BYTE BINARY ROW (1-23)
*
*                      COL    - 4 BYTE BINARY COL (1-80)
*
*                      LNG    - 4 BYTE BINARY LENGTH OF FIELD
*
*                      FIELD  - AREA INTO WHICH FIELD WILL BE COPIED
*                               FROM SCREEN AREA
*
*                 4.   FULL SCREEN AREA WRITE FIELD
*
*                      CALL FSAWF(AREA,ROW,COL,LNG,FIELD)
*
*                      AREA   - 23 BY 80 AREA
*
*                      ROW    - 4 BYTE BINARY ROW (1-23)
*
*                      COL    - 4 BYTE BINARY COL (1-80)
*
*                      LNG    - 4 BYTE BINARY LENGTH OF FIELD
*
*                      FIELD  - AREA FROM WHICH FIELD WILL BE COPIED
*                               INTO SCREEN AREA
*
*                 5.   FULL SCREEN AREA MOVE
*
*                      FSAM(AREA,ROW1,COL1,LNG1,ROW2,COL2,LNG2,FILL)
*
*                      AREA   - 23 BY 80 AREA
*
*                      ROW1   - 4 BYTE BINARY ROW OF RECEIVING FIELD
*
*                      COL1   - 4 BYTE BINARY COL OF RECEIVING FIELD
*
*                      LNG1   - 4 BYTE BINARY LENGTH
*
*                      ROW2   - 4 BYTE BINARY ROW OF SENDING FIELD
*
*                      COL2   - 4 BYTE BINARY COL OF SENDING FIELD
*
*                      LNG2   - 4 BYTE BINARY LENGTH OF FIELD
*
*                      FILL   - 1 BYTE FILLER CHARACTER FOR PADDING
*
*                 6.   FULL SCREEN TITLE
*
*                      FST(TITLE,LTITLE)
*
*                      TITLE  - TITLE DATA FOR TOP LINE OF SCREEN
*
*                      LTITLE - 4 BYTE BINARY LENGTH OF TITLE
*                               (0-78)
*
*                      (UNTIL THIS CALL IS ISSUED, THE TITLE LINE
*                       IS UPDATED FOR EACH FSW WITH THE FOLLOWING)
*
*                       FPC OS/MVS TSO FSF  HH:MM  YY.DDD  MM/DD/YY
*
*                 7.   FULL SCREEN READ LINE
*
*                      CALL FSRL(LINE,ROW,COL,AID)
*
*                      LINE - 80 BYTE LINE READ FROM AREA LINE 23
*
*                      ROW  - 4 BYTE BINARY WORD SET TO CURSOR ROW
*
*                      COL  - 4 BYTE BINARY WORK SET TO CURSOR COL
*
*                      AID  - SAME AS IN FSR ABOVE
*
*                      NOTE ROW, COL, AND AID WILL BE ZERO IF
*                      RUNNING IN NON-DISPLAY MODE.
*
*
*
*                 8.   FULL SCREEN WRITE LINE
*
*                      CALL FSWL(LINE)
*
*                      LINE - 80 BYTE LINE TO BE ADDED TO SCREEN
*                             STARTING AT AREA ROW 2.  SCREEN IS
*                             ONLY WRITTEN WHEN NEXT FSRL IS
*                             ISSUED OR 21 ROWS ARE FILLED.
*                             IF MORE THAN 20 LINES ARE GENERATED
*                             BEFORE THE NEXT READ, A DUMMY FSR
*                             IS INSERTED TO REQUIRE USER TO HIT
*                             ENTER FOR EACH SUCCEEDING SCREEN.
*
*
*                 9.   FULL SCREEN AREA COMPARE FILED
*
*                      CALL FSAWF(AREA,ROW,COL,LNG,FIELD,CODE)
*
*                      AREA   - 23 BY 80 AREA
*
*                      ROW    - 4 BYTE BINARY ROW (1-23)
*
*                      COL    - 4 BYTE BINARY COL (1-80)
*
*                      LNG    - 4 BYTE BINARY LENGTH OF FIELD
*
*                      FIELD  - AREA WHICH WILL BE COMPARED WITH
*                               SCREEN AREA
*
*                      CODE   - 4 BYTE BINARY CONDITION CODE
*                                   1 - LOW
*                                   2 - EQUAL
*                                   3 - HIGH
*
*                10.   FULL SCREEN MODE SET
*
*                      CALL FSMODE(MODE,STATE)
*
*                      MODE - 4 BYTE BINARY MODE SWITCH NUMBER
*
*                      STATE- 4 BYTE BINARY MODE SWITCH VALUE
*
*                         MODE/VALUE    DESCRIPTIONS
*                           1             UPPER CASE INPUT (OC)
*                                0          FALSE (DEFAULT)
*                                1          TRUE
*
*
*
*
*
*
*
         TITLE 'MAINLINE'
SR309000 SUBENTRY BASES=(R13,R12)
         DOCASE (R0)
               CASE 1        FULL SCREEN READ
                 PM FSR
               ESAC
               CASE 2        FULL SCREEN WRITE
                 PM FSW
               ESAC
               CASE 3        FS AREA READ FIELD
                 PM FSARF
               ESAC
               CASE 4        FS AREA WRITE FIELD
                 PM FSAWF
               ESAC
               CASE 5        FS AREA MOVE
                 PM FSAM
               ESAC
               CASE 6        FS TITLE
                 PM FST
               ESAC
               CASE 7        FS READ LINE
                 PM FSRL
               ESAC
               CASE 8        FS WRITE LINE
                 PM FSWL
               ESAC
               CASE 9        FS AREA COMPARE FIELD
                 PM FSACF
               ESAC
               CASE 10       FS MODE SET
                 PM FSMODE
               ESAC
               CASE ELSE
                 LA R15,16
               ESAC
         ESACOD
         SUBEXIT RC=(R15)
         TITLE 'FSR - FULL SCREEN READ'
FSR      PENTRY
         LM    R2,R5,0(R1)
         PM    FSGET
         ZR    R0
         IC    R0,RAID
         ST    R0,0(R5)
         IC    R0,RCURSOR
         ST    R0,0(R3)
         IC    R0,RCURSOR+1
         ST    R0,0(R4)
         LR    R0,R2
         LA    R1,LRDATA
         LA    R14,RDATA
         LR    R15,R1
         MVCL  R0,R14                  AREA
         IF    (CLI,UCMODE,TRUE,EQ)
               LR   R14,R2
               LA   R15,LRDATA
               DODO WHILE,(CH,R15,=H'256',NL)
                    OC   0(256,R14),UCTAB
                    AAI  R14,256
                    SH   R15,=H'256'
               OD
               IF   (LTR,R15,R15,P)
                    SH   R15,=H'1'
                    EX   R15,UCOC
               FI
         FI
         PEXIT
UCOC     OC    0(0,R14),UCTAB
         TITLE 'FSW - FULL SCREEN WRITE'
FSW      PENTRY
         LM    R2,R4,0(R1)
         LA    R0,WDATA
         LA    R1,LWDATA
         LR    R14,R2
         LR    R15,R1
         MVCL  R0,R14
         MVC   WCURSOR(1),3(R3)
         MVC   WCURSOR+1(1),3(R4)
         PM    FSPUT
         PEXIT
         TITLE 'FSARF - FS AREA READ FIELD'
FSARF    PENTRY
         LM    R2,R6,0(R1)
         L     R0,0(R3)
         SH    R0,=H'1'
         L     R1,0(R4)
         SH    R1,=H'1'
         MH    R0,=H'80'
         AR    R1,R0
         LA    R4,0(R2,R1)
         L     R7,0(R5)
         LR    R5,R7
         LA    R14,23*80(R2)
         LA    R15,0(R4,R5)
         IF    (CLR,R14,R15,L)
               ABEND 3,DUMP
         FI
         MVCL  R6,R4
         PEXIT
         TITLE 'FSAWF - FS AREA WRITE FIELD'
FSAWF    PENTRY
         LM    R2,R6,0(R1)
         L     R0,0(R3)
         SH    R0,=H'1'
         L     R1,0(R4)
         SH    R1,=H'1'
         MH    R0,=H'80'
         AR    R1,R0
         LA    R4,0(R2,R1)
         L     R7,0(R5)
         LR    R5,R7
         LA    R14,23*80(R2)
         LA    R15,0(R4,R5)
         IF    (CLR,R14,R15,L)
               ABEND 3,DUMP
         FI
         MVCL  R4,R6
         PEXIT
         TITLE 'FSAM - FS AREA MOVE'
FSAM     PENTRY
         LM    R2,R9,0(R1)
         L     R0,0(R3)
         SH    R0,=H'1'
         L     R1,0(R4)
         SH    R1,=H'1'
         MH    R0,=H'80'
         AR    R1,R0
         LA    R4,0(R1,R2)
         L     R5,0(R5)
         L     R0,0(R6)
         SH    R0,=H'1'
         L     R1,0(R7)
         SH    R1,=H'1'
         MH    R0,=H'80'
         AR    R1,R0
         LA    R6,0(R1,R2)
         L     R7,0(R8)
         ICM   R7,8,0(R9)
         LA    R14,23*80(R2)
         LA    R0,0(R4,R5)
         LA    R1,0(R6,R7)
         IF    (CLR,R14,R0,L),OR,(CLR,R14,R1,L)
               ABEND 3,DUMP
         FI
         MVCL  R4,R6
         PEXIT
         TITLE 'FST - FS TITLE'
FST      PENTRY
         MVI   NOTITLE,FALSE
         LM    R2,R3,0(R1)
         L     R3,0(R3)
         LA    R0,TITLE
         LA    R1,L'TITLE
         ICM   R3,8,=C' '
         MVCL  R0,R2
         PEXIT
         TITLE 'FSRL - FS READ LINE'
FSRL     PENTRY
         LM    R2,R5,0(R1)
         IF    (CLI,MODE,UNKNOWN,EQ)
               PM   SETMODE
         FI
         IF    (CLI,MODE,DISPLAY,NE)
               LA   R0,80
               LR   R1,R2
               ICM  R1,8,=X'80'
               TGET (1),(0),R
               IF   (CLI,UCMODE,TRUE,EQ)
                    OC   0(80,R2),UCTAB
               FI
               ZR   R0
               ST   R0,0(R3)
               ST   R0,0(R4)
               ST   R0,0(R5)
               PEXIT
         FI
         L     R6,NEXTLINE
         IF    (CL,R6,=A(WDATA+80),H)
               IF   (CLI,FSWLREQ,TRUE,EQ)
                    TPUT WREQ,LWREQ,FULLSCR
                    PM   FSGET
               FI
               MVC  WCURSOR,=AL1(23,1)
               PM   FSPUT
         FI
         LA    R6,WDATA+80
         ST    R6,NEXTLINE
         MVI   FSWLREQ,FALSE
         PM    FSGET
         MVC   0(80,R2),RDATAEND-80
         IF    (CLI,UCMODE,TRUE,EQ)
               OC   0(80,R2),UCTAB
         FI
         MVC   FSRLLINE,RDATAEND-80
         ZR    R0
         IC    R0,RCURSOR
         ST    R0,0(R3)
         IC    R0,RCURSOR+1
         ST    R0,0(R4)
         IC    R0,RAID
         ST    R0,0(R5)
         PEXIT
         TITLE 'FSWL - FS WRITE LINE'
FSWL     PENTRY
         L     R2,0(R1)
         IF    (CLI,MODE,UNKNOWN,EQ)
               PM   SETMODE
         FI
         IF    (CLI,MODE,DISPLAY,NE)
               LA   R0,80
               LR   R1,R2
               ICM  R1,8,=X'00'
               TGET (1),(0),R
               PEXIT
         FI
         L     R6,NEXTLINE
         IF    (CL,R6,=A(WDATA+80),EQ)  IF FIRST LINE,
               LA   R0,WDATA
               LA   R1,LWDATA
               ZR   R14
               ZR   R15
               ICM  R15,8,=C' '
               MVCL R0,R14              BLANK SCREEN
               MVC  WDATAEND-80(80),FSRLLINE REFRESH ENTRY LINE
         FI
         MVC   0(80,R6),0(R2)           MOVE LINE
         LA    R6,80(R6)
         IF    (CL,R6,=A(WDATAEND-160),NL)
               IF   (CLI,FSWLREQ,TRUE,EQ)
                    TPUT WREQ,LWREQ,FULLSCR
                    PM   FSGET
               FI
               MVC  WCURSOR,=AL1(23,1)
               PM   FSPUT
               MVI  FSWLREQ,TRUE
               LA   R6,WDATA+80
         FI
         ST    R6,NEXTLINE
         PEXIT
         TITLE 'FSACF - FS AREA COMPARE FIELD'
FSACF    PENTRY
         LM    R2,R7,0(R1)
         LR    R12,R7
         L     R0,0(R3)
         SH    R0,=H'1'
         L     R1,0(R4)
         SH    R1,=H'1'
         MH    R0,=H'80'
         AR    R1,R0
         LA    R4,0(R2,R1)
         L     R7,0(R5)
         LR    R5,R7
         LA    R14,23*80(R2)
         LA    R15,0(R4,R5)
         IF    (CLR,R14,R15,L)
               ABEND 3,DUMP
         FI
         IF    (CLCL,R4,R6,EQ)
               MVC  0(4,R12),=F'2'
         ELSEIF (L)
               MVC  0(4,R12),=F'1'
         ELSE
               MVC  0(4,R12),=F'3'
         FI
         PEXIT
         TITLE 'FSMODE - SET MODE '
FSMODE   PENTRY
         LM   R2,R3,0(R1)
         L    R2,0(R2)
         L    R3,0(R3)
         DOCASE (R2)
           CASE 1
                 IF   (LTR,R3,R3,Z)
                      MVI  UCMODE,FALSE
                 ELSE
                      MVI  UCMODE,TRUE
                 FI
           ESAC
           CASE ELSE
                 ABEND 5,DUMP
           ESAC
         ESACOD
         PEXIT
         TITLE 'SETMODE - DETERMINE TYPE OF TERMINAL'
SETMODE  PENTRY
         GTSIZE
         IF    (CH,R0,=H'24',EQ),AND,(CH,R1,=H'80',EQ)
               MVI  MODE,DISPLAY
         ELSE
               MVI  MODE,OTHER
         FI
         PEXIT
         TITLE 'FSGET - TGET FULL SCREEN'
FSGET    PENTRY
         IF    (CLI,MODE,DISPLAY,NE)
               IF   (CLI,MODE,UNKNOWN,EQ)
                    PM   SETMODE
               FI
               IF   (CLI,MODE,DISPLAY,NE)
                    ABEND 4,DUMP
               FI
               STCC NATN,LD=X'FF',CD=X'FF'
         FI
         PM    TGET
         DODO  WHILE,(CL,R1,=A(LRBUF),LT),                             X
               AND,(CL,R1,=A(LSHORT),GT)
               LA   R0,WDATA
               LA   R1,LWDATA
               ZR   R14
               ZR   R15
               ICM  R15,8,=C' '
               MVCL R0,R14
               MVC  WDATAEND-80(L'MSG1),MSG1
               MVC  WCURSOR,=AL1(23,1)
               PM   FSPUT
               PM   TGET
         OD
         IF    (CL,R1,=A(LSHORT),LE)
               LA   R0,RDATA
               LA   R1,LRDATA
               LA   R14,WDATA
               LR   R15,R1
               MVCL R0,R14
         FI
         IF    (CLC,MSG1,RDATAEND-80,EQ)
               MVC  RDATAEND-80(L'MSG1),MSG1BLK
               MVC  WDATAEND-80(L'MSG1),MSG1BLK
         FI
         TR    RAID,EBCTOAID
         TR    RCURSOR,EBCTOBIN
         NC    RCURSOR,=X'3F3F'
         ZR    R0
         ZR    R1
         IC    R0,RCURSOR
         IC    R1,RCURSOR+1
         SLL   R0,6
         AR    R1,R0
         ZR    R0
         D     R0,=F'80'
         STC   R1,RCURSOR         0-23
         AH    R0,=H'1'
         STC   R0,RCURSOR+1       1-80
         PEXIT
         TITLE 'TGET - ISSUE FULL SCREEN TGET'
TGET     PENTRY
         TGET  RBUF,LRBUF,ASIS
         IF    (CH,R15,=H'8',H)         IF BAD RC, ABEND 1
               ABEND 1,DUMP
         FI
         PEXIT
         TITLE 'FSPUT - TPUT FULL SCREEN'
FSPUT    PENTRY
         IF    (CLI,MODE,DISPLAY,NE)
               IF   (CLI,MODE,UNKNOWN,EQ)
                    PM   SETMODE
               FI
               IF   (CLI,MODE,DISPLAY,NE)
                    ABEND 4,DUMP
               FI
               STCC NATN,LD=X'FF',CD=X'FF'
         FI
         ZR    R0
         ZR    R1
         IC    R0,WCURSOR
         IC    R1,WCURSOR+1
         SH    R1,=H'1'
         MH    R0,=H'80'
         AR    R1,R0
         ZR    R0
         D     R0,=F'64'
         STC   R1,WCURSOR
         STC   R0,WCURSOR+1
         TR    WCURSOR,BINTOEBC
         IF    (CLI,NOTITLE,TRUE,EQ)
               SCALL SROSDATE,(GDATE)
               DTIME TIMEDATE
         FI
         TPUT  WBUF,LWBUF,FULLSCR
         IF    (CH,R15,=H'8',H)
               ABEND 2,DUMP
         FI
         PEXIT
         TITLE 'COMMON DATA'
         EQUAL
MODE     LOGICAL UNKNOWN,(DISPLAY,OTHER,UNKNOWN)
UCMODE   LOGICAL FALSE,(TRUE,FALSE)
NOTITLE  LOGICAL TRUE,(FALSE,TRUE)
FSWLREQ  LOGICAL FALSE,(TRUE,FALSE)
MSG1     DC    C'$$$ BAD SCREEN INPUT - RETRY ENTRY $$$'
MSG1BLK  DC    C'                                      '
NEXTLINE DC    A(WDATA+80)
FSRLLINE DC    CL80' '
EBCTOAID DC    256AL1(*-EBCTOAID)
         ORG   EBCTOAID+X'7D'
         DC    AL1(0)
         ORG   EBCTOAID+X'F1'
         DC    AL1(1,2,3,4,5,6,7,8,9)
         ORG   EBCTOAID+X'7A'
         DC    AL1(10,11,12)
         ORG   EBCTOAID+X'C1'
         DC    AL1(13,14,15,16,17,18,19,20,21)
         ORG   EBCTOAID+X'4A'
         DC    AL1(22,23,24)
         ORG   EBCTOAID+X'6C'
         DC    AL1(25)
         ORG   EBCTOAID+X'6E'
         DC    AL1(26)
         ORG   EBCTOAID+X'6B'
         DC    AL1(27)
         ORG
UCTAB    DC    256X'40' FORCE UPPER CASE VIA OC OF 4 BIT
*
*  COMMANDS - SEE INTRO PG 25 AND COURIER PG 33
*
ESC      EQU   X'27' ESCAPE
CMDW     EQU   X'F1' WRITE
CMDEW    EQU   X'F5' ERASE WRITE
WCC      EQU   X'C1' WRITE CONTROL CODE
*
*  ORDERS - SEE INTRO PG 21
*
SBA      EQU   X'11' SET BUFFER ADDRESS
SF       EQU   X'1D' SET FIELD  ATTRIBUTE
IC       EQU   X'13' SET CURSOR
*
*  ATTRIBUTES - SEE INTRO PG 23
*
ATTRTEXT EQU   X'E8' PROTECTED TEXT
ATTRDATA EQU   X'C8' UNPROTECTED
*
*  ROW AND COLUMN - SEE COURIER HANDBOOK PG 43
*
EBCR1C1  EQU  X'4040'
EBCR23C1 EQU  X'5CF0'
BINTOEBC DS   0F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC   X'40C1C2C3C4C5C6C7C8C94A4B4C4C4E4F' 0
         DC   X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F' 1
         DC   X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F' 2
         DC   X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F' 3
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
*
         ORG
EBCTOBIN DC   256AL1(*-EBCTOBIN)
         ORG  EBCTOBIN+X'40'
         DC   X'C0'
         ORG  EBCTOBIN+X'4A'
         DC   X'CACBCCCDCECF'
         ORG  EBCTOBIN+X'50'
         DC   X'D0'
         ORG  EBCTOBIN+X'5A'
         DC   X'DADBDCDDDEDF'
         ORG  EBCTOBIN+X'60'
         DC   X'E0E1'
         ORG  EBCTOBIN+X'6A'
         DC   X'EAEBECEDEEEF'
         ORG  EBCTOBIN+X'7A'
         DC   X'FAFBFCFDFEFF'
         ORG
*
*  TPUT BUFFER AREA
*
WBUF     DS    0F
         DC    AL1(ESC,CMDW,WCC,SBA),AL2(EBCR1C1),AL1(SF,ATTRTEXT)
TITLE    DS    0CL78
         DC    C'FPC OS/MVS TSO FULL SCREEN FACILITY '
TIMEDATE DC    CL22' ',C'  '
GDATE    DC    CL8' '
         FILL  TITLE
         DC    AL1(SF,ATTRDATA)
WDATA    DS    XL(23*80)
WDATAEND EQU   *
LWDATA   EQU   *-WDATA
         DC    AL1(SBA)
WCURSOR  DS    XL2
         DC    AL1(IC)
LWBUF    EQU   *-WBUF
*
*  TGET BUFFER AREA
*
RBUF     DS    0F
RAID     DS    X  AID
RCURSOR  DS    XL2 CURSOR ROW AND COLUMN
LSHORT   EQU   *-RBUF
         DS    X   DATA SBA
         DS    XL2 DATA ROW,COL
RDATA    DS    XL(23*80)
RDATAEND EQU   *
LRDATA   EQU   *-RDATA
LRBUF    EQU   *-RBUF
*
*  FSWL WRITE REQUEST BUFFER
*
WREQ     DS    0F
         DC    AL1(ESC,CMDW,WCC,SBA),AL2(EBCR23C1)
         DC    CL80'***** HIT ENTER FOR NEXT PAGE *****'
         DC    AL1(SBA),AL2(EBCR23C1),AL1(IC)
LWREQ    EQU   *-WREQ
         END
