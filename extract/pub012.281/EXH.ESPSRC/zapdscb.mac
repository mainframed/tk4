ZAPDSCB  TITLE 'Z A P D S C B  ***  ALTER DSCB IN FULL SCREEN MODE'
*--------------------------------------------------------------------*
*   DON'T KNOW WHO WROTE THIS ORIGINALLY                             *
*   FULL SCREEN (ACTUALLY 24*80 ONLY) VTOC ZAPPER.                   *
*   FROM CBT TAPE 451 FILE 566                                       *
*--------------------------------------------------------------------*
***********************************************************************
* MODIFIED BY K.M. (SAM) BASS (SBASS,SJB,KBASS,KMB)                   *
***********************************************************************
*   CHANGED AUTH SVC INTERFACE & LOCAL STUFF - GERHARD POSTPISCHIL    *
*   FIXED ASSORTED ERRORS (E.G., ALIAS; CENT. DATE); MADE REFRESHABLE *
***********************************************************************
         PRINT OFF           DON'T NEED MACROS IN LISTING       GP04058
*--------------------------------------------------------------------*
*        ININT - PROCESS AN INTEGER INPUT FIELD                      *
*--------------------------------------------------------------------*
         MACRO ,                                                GP04099
&NM      ININT &FIELD,&OLEN  FIELD NAME / OPTIONAL LENGTH       GP04099
         LCLC  &L                                               GP04099
&L       SETC  'L'''                                            GP04099
.*--------------------------------------------------------------------*
.*   NOTE THAT R0-R2 ARE PRESET BY CALLER OF THE I--- ROUTINE         *
.*--------------------------------------------------------------------*
&NM      MACPARM R15,&FIELD  LOAD FIELD ADDRESS                 GP04099
         AIF   (T'&OLEN NE 'O').EXPLEN                          GP04099
         MACPARM R15,&L&FIELD.(,R15),OP=LA,OPR=LA               GP04099
         AGO   .COMMON                                          GP04099
.EXPLEN  MACPARM R15,&OLEN,OP=A,OPR=AR  ADD LENGTH              GP04099
.COMMON  MACPARM R15,(R0),OP=S,OPR=SR  SUBTRACT INPUT LENGTH    GP04099
         EX    R2,EXMVCINT  MOVE INTEGER                        GP04099
         MEND  ,                                                GP04099
*--------------------------------------------------------------------*
*        MSSG    MACRO                                               *
*--------------------------------------------------------------------*
         MACRO ,
&MSGNAME MSSG  &DATA,&REPLN,&PREFIX=YES
         LCLC  &FN
         LCLA  &FL
         AIF   (T'&DATA NE 'O').IN0100
         MNOTE 8,'DATA NOT SUPPLIED IN ''MSSG'' GENERATION, EXPANSION T$
               ERMINATED'
         MEXIT ,
.IN0100  ANOP  ,
         AIF   (T'&MSGNAME EQ 'O').IN0200
&FN      SETC  '&MSGNAME'
         AGO   .IN0300
.IN0200  MNOTE 4,'MAP NAME NOT SPECIFIED, DEFAULT NAME GENERATED'
&FN      SETC  'MSSG&SYSNDX'            GENERATE DEFAULT NAME
.IN0300  ANOP  ,
         AIF   ('&DATA'(1,1) EQ '''').IN0400     FIRST CHAR A (')?
         MNOTE 8,'CHARACTER STRING MUST BEGIN AND END WITH A QUOTE - EX$
               PANSION TERMINATED'
         MEXIT ,
.IN0400  ANOP  ,
         AIF   (T'&REPLN EQ 'O').IN0500  IS REPLY LENGTH SUPPLIED?
         AIF   (T'&REPLN EQ 'N').IN0500  IS REPLY LENGTH NUMERIC?
         MNOTE 8,'''REPLY LENGTH'' VALUE IS NOT NUMERIC - EXPANSION TER$
               MINATED'
         MEXIT ,
.IN0500  ANOP  ,
&FN      DS    0H                      ALIGN ON HALFWORD
&FL      SETA  K'&DATA-2               DEFAULT TO LENGTH OF LITERAL
&FL      SETA  (((&FL+1)/2)*2)         ROUND TO HALF WORD LENGTH
         AIF   ('&PREFIX' NE 'YES').IN0550   BYPASS AL2 IF NOT DESIRED
         DC    AL2(&FL)                LENGTH OF TEXT - ROUNDED TO 2
.IN0550  ANOP  ,
         AIF   (T'&REPLN EQ 'O').IN0600  IS REPLY LENGTH SUPPLIED?
         DC    AL2(&REPLN)             LENGTH OF REPLY EXPECTED
.IN0600  ANOP  ,
         DC    CL&FL&DATA
         MEND  ,
*--------------------------------------------------------------------*
*        $KEYS   MACRO                                               *
*--------------------------------------------------------------------*
         MACRO ,
         $KEYS ,
         GBLB  &KEYDEF
         AIF   (&KEYDEF).MEX2
&KEYDEF  SETB  1
PFKEY01  EQU   X'F1'                   EQUATE FOR PFKEY01
PFKEY02  EQU   X'F2'                   EQUATE FOR PFKEY02
PFKEY03  EQU   X'F3'                   EQUATE FOR PFKEY03
PFKEY04  EQU   X'F4'                   EQUATE FOR PFKEY04
PFKEY05  EQU   X'F5'                   EQUATE FOR PFKEY05
PFKEY06  EQU   X'F6'                   EQUATE FOR PFKEY06
PFKEY07  EQU   X'F7'                   EQUATE FOR PFKEY07
PFKEY08  EQU   X'F8'                   EQUATE FOR PFKEY08
PFKEY09  EQU   X'F9'                   EQUATE FOR PFKEY09
PFKEY10  EQU   X'7A'                   EQUATE FOR PFKEY10
PFKEY11  EQU   X'7B'                   EQUATE FOR PFKEY11
PFKEY12  EQU   X'7C'                   EQUATE FOR PFKEY12
         SPACE 1
PFKEY13  EQU   X'C1'                   EQUATE FOR PFKEY13
PFKEY14  EQU   X'C2'                   EQUATE FOR PFKEY14
PFKEY15  EQU   X'C3'                   EQUATE FOR PFKEY15
PFKEY16  EQU   X'C4'                   EQUATE FOR PFKEY16
PFKEY17  EQU   X'C5'                   EQUATE FOR PFKEY17
PFKEY18  EQU   X'C6'                   EQUATE FOR PFKEY18
PFKEY19  EQU   X'C7'                   EQUATE FOR PFKEY19
PFKEY20  EQU   X'C8'                   EQUATE FOR PFKEY20
PFKEY21  EQU   X'C9'                   EQUATE FOR PFKEY21
PFKEY22  EQU   X'4A'                   EQUATE FOR PFKEY22
PFKEY23  EQU   X'4B'                   EQUATE FOR PFKEY23
PFKEY24  EQU   X'4C'                   EQUATE FOR PFKEY24
         SPACE 1
PA1KEY   EQU   X'6C'                   EQUATE FOR PA1KEY
PA2KEY   EQU   X'6E'                   EQUATE FOR PA2KEY
PA3KEY   EQU   X'6B'                   EQUATE FOR PA3KEY
CLEAR    EQU   X'6D'                   EQUATE FOR CLEAR
ENTER    EQU   X'7D'                   EQUATE FOR ENTER
.MEX2    ANOP  ,
         MEND  ,
*--------------------------------------------------------------------*
*        $FLD    MACRO                                               *
*--------------------------------------------------------------------*
         MACRO ,
&FLDNAME $FLD  &OPTN=2,&LENGTH=,&POS=,&LOC=,&FILL=,                    $
               &ATR=(SKIP),&INITIAL=,&TYPE=,&EQU=,&VALUES=,            $
               &MODEL='3276-2',&OPERATN=,&BUFFTAB=NO
.*
.*       KMB   CHANGED &ENTS AND &CURSOR AIFS TO NOT USE TRUE/FALSE
.*
         GBLA  &TLEN               ALGREBRAIC WORK FIELD              *
         GBLA  &ARG                3270 ATTRIBUTE CHAR RESOLUTION     *
         GBLA  &MTYPE              TYPE REQUEST                       *
         GBLA  &CURSOR             CURSOR POSITION                    *
         GBLA  &OPT                PROCESS OPTION INDICATOR           *
         GBLA  &PREVPOS            PREVIOUS POSITION                  *
         GBLA  &LINES              NUMBER OF LINES PER PAGE           *
         GBLA  &COLS               NUMBER OF COLUMNS PER LINE         *
         GBLC  &MOD1               TYPE OF CRT BEING USED   32XX      *
         GBLC  &MOD2               MODEL OF CRT BEING USED      -N    *
         GBLA  &SCRSIZE            TOTAL AREA OF SCREEN               *
         GBLA  &GLENGTH            FIELD LENGTH                       *
         GBLA  &EPOS               FIELD ENDING POSITION              *
         GBLA  &NLOC               CURRENT FIELD LOCATION             *
         GBLA  &PLOC               PREVIOUS (NEXT) LOCATION           *
         GBLB  &MAP                FIRST TIME CONDITION SWITCH        *
         GBLB  &DEFAULT            INITIAL = USER DEFAULT DATA        *
         GBLB  &DATAIND            DATA FIELD INDICATOR               *
         GBLB  &PEN                ATR = DET                          *
         GBLB  &KEYED              ATR = UNPROT                       *
         GBLB  &IC                 ATR = IC                           *
         GBLB  &NUMERIC            NUMERIC FIELD INDICATOR
         GBLB  &SEQ                FIELDS OUT OF SEQUENCE IND         *
         GBLB  &SKIP               1 IF ATR = SKIP, 0 ALL OTHERS      *
         GBLB  &PROT               1 IF ATR = PROT, 0 ALL OTHERS      *
.*       GBLC  &DEVICE             DIVICE TYPE INDICATOR              *
         GBLC  &FN                 FIELD NAME                         *
         GBLC  &ATRC               3270 ATTRIBUTE CHARACTER           *
         LCLA  &REQ                REPLY REQUIRED INDICATOR           *
         LCLA  &FPOS               FIELD POSITION                     *
         LCLA  &FLAG               FIELD DESCRIPTOR FLAG              *
         LCLC  &FILLCHR            FILLER USED INSTEAD OF INITIAL     *
         GBLC  &GFILL              TYPE=INIT SPECIFICATION OF FILL    *
         LCLC  &OPER               TYPE OF READ/WRITE OPERATION       *
         LCLB  &ABORT              ABORT INDICATOR                    *
         LCLB  &X(10),&XON
         LCLA  &COUNT,&INDEX,&HIGH,&A,&B,&C
         LCLA  &Y(10)
         LCLA  &XAXIS                  X AXIS BUFFER ADDRESS          *
         LCLA  &YAXIS                  Y AXIS BUFFER ADDRESS          *
         LCLC  &XCHAR                  X AXIS CHARACTER               *
         LCLC  &YCHAR                  Y AXIS CHARACTER               *
         GBLC  &ADDRCHR                ADDRESS CHARACTER STRING       *
         GBLB  &DOCSW                  DOCUMENTATION PRINT SWITCH     *
         GBLC  &MAPNAME                NAME OF THIS $FLD MAP          *
.************************ BUFFER TABLE ENTRIES ************************
         GBLB  &BUFFTB                 BUFFER ADDRESS TABLE REQUESTED *
.*       TO CHANGE NUMBER OF ENTRIES, CHANGE THE SUBSCRIPT VALUE      *
.*             HERE AND THE SETA VALUE FOR &ENTS                      *
         GBLA  &ENTLEN(256)            BUFFER ENTRY LENGTH - 1        *
         GBLA  &ENTVCN(256)            NUMBER OF VALUES PER ENTRY     *
         GBLC  &ENTOFF(256)            BUFFER ENTRY OFFSET            *
         GBLC  &ENTRBA(256)            BUFFER ENTRY RBA               *
         GBLC  &ENTVAL(768)            BUFFER ENTRY VALUES 3/ENTRY    *
         GBLA  &ENTMAX                 MAXIMUM BUFFER ENTRIES         *
         GBLA  &ENTS                   NUMBER OF BUFFER ENTRIES       *
         GBLA  &VALCNT                 NUMBER OF TOTAL 'VALUES' ENTRIES
         LCLA  &LSTCNT                 NUMBER OF ENTRIES PROCESSED    *
         LCLA  &TCNT1                  WORK COUNTER                   *
         LCLC  &FNM                    NAME TO BE USED ON DS          *
.**********************************************************************
.* *     ANALYZE OPERANDS                                           * *
.**********************************************************************
         AIF   (&MAP).IN0100                FIRST TIME THRU ???       @
         AIF   (T'&TYPE EQ 'O').ERR140      MUST SUPPLY TYPE          *
         AIF   ('&TYPE' EQ 'INIT').IN0005   MUST SUPPLY INIT FIRST    *
.ERR140  MNOTE 4,'''INIT'' MUST BE SPECIFIED FOR FIRST INVOCATION OF TH$
               IS MACRO'                     ERROR IF NOT             *
.IN0005  ANOP  ,                       HERE AFTER MNOTE               *
&MAP     SETB  1                        SET ON FIRST TIME THRU        @
.*       CHANGE THIS SETA IF CHANGING MAXIMUM SUBSCRIPT VALUE         *
&ENTMAX  SETA  256                      MAXIMUM BUFFER ENTRIES        @
&VALCNT  SETA  0                        RESET VALUE COUNTER           @
&MTYPE   SETA  0                        RESET MAY INDICATOR           *
&PREVPOS SETA  0                        RESET PREVIOUS POS INDICATOR  *
&SKIP    SETB  1                        INITIALIZE SKIP INDICATOR     *
&PLOC    SETA  1                        INITIALIZE LOCATION COUNTER   *
&ADDRCHR SETC  'Z40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F50D1D2D3D4D5D6D7D8D95A$
               5B5C5D5E5F6061E2E3E4E5E6E7E8E96A6B6C6D6E6FF0F1F2F3F4F5F6$
               F7F8F97A7B7C7D7E7F'
.*             THE Z AT THE BEGINNING OF THE TABLE IS TO OFFSET THE   *
.*       MULTIPLICATION BY 2. THE OFFSET INTO THE TABLE IS BASED ON   *
.*       AN INITIAL VALUE OF ONE (1) NOT ZERO (0).                    *
.**********************************************************************
.MOD000  ANOP  ,                       HERE TO VERIFY CTR             *
         AIF   (T'&MODEL EQ 'O').ERR160      WAS MODEL SUPPLIED       *
         AIF   (K'&MODEL LT 6).ERR160       IS ALL OF IT THERE        *
         AIF   ('&MODEL'(1,1) EQ '''').MOD010 IS IT WITHIN QUOTES     *
&MOD1    SETC  '&MODEL'(1,4)             SET UP CRT TYPE              *
&MOD2    SETC  '&MODEL'(6,1)             SET UP CRT MODEL             *
         AGO   .MOD020                      BYPASS FOLLOWING          *
.MOD010  ANOP  ,                       HERE TO PROCESS QUOTES         *
&MOD1    SETC  '&MODEL'(2,4)             SET UP CRT TYPE              *
&MOD2    SETC  '&MODEL'(7,1)             SET UP CRT MODEL             *
.MOD020  AIF   (&MOD1 EQ 3275 OR &MOD1 EQ 3277).MOD030                *
         AIF   (&MOD1 EQ 3276 OR &MOD1 EQ 3278).MOD040                *
.ERR180  MNOTE 8,'MODEL=&MODEL NOT ACCEPTABLE TO THIS MACRO'          *
         MEXIT ,
.MOD030  ANOP  ,                       HERE FOR 3275'S                *
         AIF   (&MOD2 EQ 2).MOD050     LARGE SCREEN                   *
         AIF   (&MOD2 NE 1).ERR180     NOT SMALL SCREEN               *
&LINES   SETA  12                      SET ROWS                       *
&COLS    SETA  40                      SET COLUMNS                    *
         AGO   .MOD090                 BYPASS FOLLOWING CODE          *
.MOD050  ANOP  ,                       HERE FOR 3277'S                *
&LINES   SETA  24                      SET ROWS                       *
&COLS    SETA  80                      SET COLUMNS                    *
         AGO   .MOD090                 BYPASS FOLLOWING CODE          *
.MOD040  ANOP  ,                       HERE FOR NEW DEVICES           *
&COLS    SETA  80                      ALL HAVE 80 COLUMNS            *
         AIF   (&MOD2 EQ 1).MOD060     SMALL SCREEN CRT               *
         AIF   (&MOD2 EQ 2).MOD070     LARGE SCREEN CRT               *
         AIF   (&MOD2 EQ 3).MOD080     BIG SCREEN CRT                 *
         AIF   (&MOD2 NE 4).ERR180     BIGGIE SCREEN CRT              *
&LINES   SETA  43                      SET ROWS                       *
         AGO   .MOD090                 BYPASS FOLLOWING CODE          *
.MOD060  ANOP  ,                       HERE FOR ROWS                  *
&LINES   SETA  12                      SET ROWS                       *
         AGO   .MOD090                 BYPASS FOLLOWING CODE          *
.MOD070  ANOP  ,                       HERE FOR ROWS                  *
&LINES   SETA  24                      SET ROWS                       *
         AGO   .MOD090                 BYPASS FOLLOWING CODE          *
.MOD080  ANOP  ,                       HERE FOR ROWS                  *
&LINES   SETA  32                      SET ROWS                       *
.MOD090  ANOP  ,                       HERE WHEN ROWS & COLS DEFINED  *
&SCRSIZE SETA  &COLS*&LINES            DEFINE MAXIMUM SCREENSIZE      *
         AIF   (T'&OPTN EQ 'O').IN0010  IS OPTION GIVEN ???           *
&OPT     SETA  &OPTN                    YES, SAVE VALUE               *
.**********************************************************************
         AGO   .IN0020                  CONTINUE                      *
.IN0010  ANOP  ,                        SUBSTITUTE OPTION VALUE       *
&OPT     SETA  2                           DOCUMENTATION ONLY         *
.**********************************************************************
.IN0020  ANOP  ,                        TEST IF DOCUMENTATION REQ.    *
         AIF   (T'&FILL EQ 'O').IN0030  IS OPTION GIVEN ???           *
&GFILL   SETC  '&FILL'                  SET FILL CHARACTER
.IN0030  ANOP  ,
***********************************************************************
 MNOTE *,'        OPTIONS IN EFFECT-----------    '
 MNOTE *,'                                        '
 MNOTE *,'                 ROWS........ &LINES    '
 MNOTE *,'                 COLUMNS..... &COLS     '
 MNOTE *,'                 CHARACTERS.. &SCRSIZE  '
***********************************************************************
         SPACE 1
         AIF   (&DOCSW).IN0050     HAS DOCUMENTATION PRINTED ONCE?    *
&DOCSW   SETB  1                   SET DOCUMEMTATION PRINTED FLAG     *
***********************************************************************
*     MAP GENERATION PARAMETERS, THEIR USE AND DEFAULTS               *
*                                                                     *
*     INITIAL ENTRY (MUST BE GIVEN TO SET VARIOUS OPTIONS)            *
*                                                                     *
*        MAP   OPTN=1,MODEL='32XX-N',TYPE=INIT,BUFFTAB=XXX            *
*                                                                     *
*           MODEL  TO SPECIFY THE TERMINAL TYPE (AND SCREEN SIZE),    *
*                  THE DEFAULT IS SET TO 24 ROWS, AND 80 COLUMNS PER  *
*                  ROW. MAXIMUM IS 43 BY 80. THE ACCEPTABLE VALUES    *
*                  AND THEIR GENERATED SCREEN SIZES ARE AS FOLLOWS:   *
*                                                                     *
*      MODEL ROWS COLS CHARS         MODEL ROWS COLS CHARS            *
*                                   3276-1  12   80    960            *
*     3275-1  12   40    480        3276-2  24   80   1920            *
*     3275-2  24   80   1920        3276-3  32   80   2560            *
*                                   3276-4  43   80   3440            *
*                                                                     *
*                                   3278-1  12   80    960            *
*     3277-1  12   40    480        3278-2  24   80   1920            *
*     3277-2  24   80   1920        3278-3  32   80   2560            *
*                                   3278-4  43   80   3440            *
*                                                                     *
*           OPTN   THIS PARAMETER IS USED TO SET ONE OF THE           *
*                  FOLLOWING OPTIONS.......                           *
*                                                                     *
*                        OPTN=1  - DOCUMENTATION GENERATION.          *
*                        OPTN=2  - DOCUMENTATION & DATA DECLARATION.  *
*                                                                     *
*              NOTE: (TYPE=INIT AND MODEL=32NN-N MUST BE SPECIFIED TO *
*                      PREVENT MNOTE ERRORS FOR DOCUMENTATION ONLY.)  *
*                                                                     *
*           OPERATN THIS PRAMETER IS USED TO SPECIFY THE TYPE OF      *
*                   OPERATION TO BE USED. THE ACCEPTABLE VALUES ARE:  *
*                                                                     *
*               READ     -  FULL BUFFER READ                          *
*               READMOD  -  READ MODIFIED FIELDS ONLY                 *
*                                                                     *
*               WRITE    -  WRITE / WITHOUT ERASE OPERATION           *
*               WRITERAS -  WRITE / ERASE ALL FIELDS                  *
*               WRITERUP -  WRITE / ERASE UNPROTECTED FIELDS ONLY     *
*                                                                     *
***********************************************************************
         EJECT ,
***********************************************************************
*        BUFFTAB=XXX      THIS ENTRY MAY BE USED TO GENERATE A TABLE  *
*               OF ALL USER MODIFIABLE ENTRIES IN THIS MAP. THIS TABLE*
*               CONTAINS AN ENTRY FOR EACH OF THE FOLLOWING:          *
*                                                                     *
*        BUFFER ADDRESS - THE BUFFER ADDRESS OF AS GENERATED BY THIS  *
*                         MAP. NOTE: ONLY MODIFIABLE FIELDS ARE       *
*                         PROCESSED.                                  *
*        OFFSET         - THE OFFSET OF THIS FIELD FROM THE BEGINNING *
*                         OF THIS FIELD MAP.                          *
*        LENGTH         - THE LENGTH OF THIS FIELD, LESS ONE BYTE.    *
*                                                                     *
*        THE VALID OPTIONS AND WHEN THE ARE USED ARE AS FOLLOWS:      *
*                                                                     *
*        NO    -  USED WITH 'TYPE=INIT' TO BYPASS TABLE GENERATION.   *
*                 THIS IS THE DEFAULT VALUE.                          *
*        YES   -  USED WITH 'TYPE=INIT' TO REQUEST TABLE GENERATION.  *
*                                                                     *
*              ADDITIONALLY, YOU MAY SPECIFY PARAMETERS TO BE         *
*        INCLUDED IN THE GENERATION OF THIS TABLE. THEY MAY BE PASSED *
*        VIA THE PARAMETER 'VALUES'. AN EXAMPLE OF HOW THIS PARAMETER *
*        IS USED IS DISPLAYED BELOW. NOTE: TWO RESTRICTIONS EXIST.    *
*        THEY ARE: 1) A MAXIMUM OF THREE ENTRIES ARE ALLOWED PER $FLD *
*        SPECIFICATION, AND 2) THIS VALUE IS ALLOWABLE ONLY ON FIELDS *
*        THAT ARE FLAGGED AS MODIFIABLE BY THE USER. ALSO, YOU ARE    *
*        RESPONSIBLE FOR MAINTAINING ALIGNMENT. THE BASIC TABLE IS SIX*
*        (6) BYTES LONG AND IS INITIATED ON A FULLWORD BOUNDARY.      *
*                                                                     *
*      FSTART  $FLD   TYPE=INIT,BUFFTAB=YES                           *
*      FIELD1  $FLD   POS=(10,30),INITIAL='.....',ATR=IC,             *
*                     VALUES=(X'01',X'4E',A(PARAM))                   *
*      FTABLE  $FLD   TYPE=FINAL                                      *
*                                                                     *
*        THIS WOULD GENERATE A BUFFER ADDRESS TABLE AS FOLLOWS:       *
*                                                                     *
*FTABLE  DS    0F                                                     *
*        DC    XL2'4B6E'               BUFF ADDR OF CURRENT ENTRY     *
*        DC    AL2(FIELD1-FSTART)      OFFSET TO CURRENT ENTRY        *
*        DC    AL2(4)                  LENGTH OF CURRENT ENTRY - 1    *
*        DC    X'01'                   VALUES PARAMETER               *
*        DC    X'4E'                   VALUES PARAMETER               *
*        DC    A(PARAM)                VALUES PARAMETER               *
*                                                                     *
*        NOTE: THIS TABLE IS A MULTIPLE OF 4 BYTES. (USER CONTROLLED) *
***********************************************************************
         EJECT ,
***********************************************************************
*                                                                     *
*     FIELD LAYOUT ENTRIES (ONE PER FIELD)                            *
*                                                                     *
*        $FLD  POS=(10,1),ATR=(SKIP),INITIAL='A',LOC=NNN,TYPE=REQ     *
*                                    LENGTH=1                         *
*                                                                     *
*           POS    TO SPECIFY ROW AND COLUMN NUMBERS. TRY NOT TO      *
*                  USE ROW 24, IT IS USED BY THE SYSTEM.              *
*                                                                     *
*           ATR    THIS PARAMETER IS USED TO DEFINE THE DATA FIELD    *
*                  ATTRIBUTE CHARACTERISTICS.                         *
*                                                                     *
* ATR=(SKIP)  PROTECTED FIELD       *  ATR=(BRT)  HIGH INTENSITY FIELD*
* ATR=(PROT)  PROTECTED FIELD       *  ATR=(DRK)  NON-DISPLAY FIELD   *
* ATR=(UNPR)  MODIFIABLE FIELD      *  ATR=(MDT)  MODIFIED DATA TAG ON*
* ATR=(NUM)   NUMERIC DATA ONLY     *  ATR=(IC)   INSERT CURSOR       *
* ATR=(DET)   LIGHT PEN DETECTALBE  *  ATR=(NORM) NORMAL INTENSITY    *
*                                                                     *
*             DO NOT USE THE FOLLOWING COMBINATIONS.......            *
*           ATR=(SKIP,UNPR)                 ATR=(DRK,NORM)            *
*           ATR=(PROT,UNPR)                 ATR=(SKIP,IC)             *
*           ATR=(DET,DRK)                   ATR=(PROT,IC)             *
*           ATR=(BRT,DRK)                   ATR=(PROT,NUM)            *
*           ATR=(BRT,NORM)                                            *
*                                                                     *
*           LENGTH TO SPECIFY LENGTH OF FIELD WHEN 'INITIAL' IS       *
*                  NOT GIVEN. DO NOT USE WHEN INITIAL VALUE IS        *
*                  GIVEN.                                             *
*           INITIAL USED TO DECLARE CONSTANT SCREEN DATA. THIS        *
*                  SHOULD ALWAYS BE USED TO SHOW THE TYPE OF DATA     *
*                  TO BE DISPLAYED.                                   *
*           LOC    THIS PARAMETER IS USED TO DEFINE THE RELATIVE      *
*                  LOCATION OF THE DATA FIELD WITHIN THE USER AREA.   *
*                  DO NOT SPECIFY ON ANY OTHER THAN INPUT DATA.       *
*           TYPE   TYPE=INIT IS REQUIRED FIRST TIME THRU TO SET UP    *
*                  INITIAL VALUES AND DOCUMENTATION PRINT.            *
*                  TYPE=FINAL IS NEEDED TO TERMINATE THE CURRENT      *
*                  MAP AND TO INSERT ANY CURSOR SPECIFIED.            *
*                                                                     *
*      FTABLE  $FLD   TYPE=FINAL,EQU=XXXXXX                           *
*                                                                     *
*        TYPE=FINAL  CAUSES THE INSERT CURSOR STRING TO BE PLACED     *
*                    AT THE END OF THE FIELD DEFINITION. THIS POSITION*
*                    IS REQUIRED FOR TCAM.                            *
*        EQU=XXXXX   WILL GENERATE AN EQU, WITH XXXXX AS THE NAME,    *
*                    WITH THE LENGTH OF THIS DISPLAY AS THE VALUE.    *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT ,
.IN0050  ANOP  ,
         AIF   (&OPT EQ 1).MAPXIT          EXIT IF DOCUMENTATION ONLY *
         AIF   (&OPT EQ 2).IN0055          CONTINUE IF VALID OPTION   *
         MNOTE 4,'INVALID OPTION SPECIFIED, OPTION=2 ASSUMED'
.IN0055  ANOP  ,
         AIF   ('&BUFFTAB'(1,1) EQ 'N').IN0057    BUFFER TABLE REQ?
         AIF   ('&BUFFTAB'(1,1) NE 'Y').ERR200    IF NOT, ERROR
&BUFFTB  SETB  1                       YES, INDICATE SO
&ENTS    SETA  0                       RESET ENTRY COUNT
.IN0057  ANOP  ,
.*  &FLDNAME CSECT                                                    *
         AIF   (T'&FLDNAME EQ 'O').IN0060
&FN      SETC  '&FLDNAME'              GENERATE DEFAULT NAME
         AGO   .IN0065
.IN0060  ANOP  ,
         AIF   (NOT &BUFFTB).IN0065     BYPASS IF BUFFTAB NOT REQUESTED
         MNOTE 4,'MAP NAME REQUIRED WITH ''BUFFTAB'' OPTION, DEFAULT NA$
               ME GENERATED'
&FN      SETC  'FLD&SYSNDX'            GENERATE DEFAULT NAME
.IN0065  ANOP  ,
&FN      DS    0F                                                     *
&FPOS    SETA  4
&MAPNAME SETC  '&FN'                   SAVE MAP NAME
         AIF   (T'&OPERATN EQ 'O').MAPXIT    IF OMITTED, BYPASS REST  *
         AIF   ('&OPERATN'(1,4) EQ 'READ').IN0080  GO TO READ         *
         AIF   ('&OPERATN'(1,5) EQ 'WRITE').IN0070  CHECK TYPE        *
         MNOTE 8,'TYPE OF OPERATION SPECIFIED IS UNACCEPTABLE'
         MEXIT ,
.IN0070  ANOP  ,
         AIF   ('&OPERATN'(5,4) EQ 'ERAS').IN0072  ERASE WRITE        *
         AIF   ('&OPERATN'(5,4) EQ 'ERUN').IN0074  ERASE UNPROT       *
&OPER    SETC  'F1'                    DEFAULT TO NORMAL WRITE        *
         AGO   .IN0090                 GO GEN CHAR STRING             *
.IN0072  ANOP  ,
&OPER    SETC  'F5'                    DEFAULT TO WRITE ERASE         *
         AGO   .IN0090                 GO GEN CHAR STRING             *
.IN0074  ANOP  ,
&OPER    SETC  '6F'                    DEFAULT TO ERASE UNPROT        *
         AGO   .IN0090                 GO GEN CHAR STRING             *
.IN0080  ANOP  ,                       HERE FOR READ OPERATIONS       *
         AIF   ('&OPERATN'(5,3) EQ 'MOD').IN0082  READ MODIFY         *
&OPER    SETC  'F2'                    DEFAULT TO NORMAL READ         *
         AGO   .IN0090                 GO GEN CHAR STRING             *
.IN0082  ANOP  ,                       HERE FOR READ MODIFIED         *
&OPER    SETC  'F6'                    DEFAULT TO READ MODIFIED       *
.IN0090  ANOP  ,
         DC    XL3'27&OPER.C1'                                        *
         AGO   .MAPXIT                  EXIT ON FIRST TIME THRU       *
.**********************************************************************
.IN0100  ANOP  ,                        BYPASS AFTER FIRST TIME THRU  *
         AIF   (&MTYPE EQ 2).ERR010     ERROR IF PREV. ENTRY FINAL    @
         AIF   (T'&TYPE EQ 'O').IN0110  IS THIS FINAL ENTRY ???       @
         AIF   ('&TYPE' NE 'FINAL').ERR150   REPLY REQUIRED ???       *
&MTYPE   SETA  2                        YES, SET INDICATOR            @
         AGO   .FI0000                  GO PROCESS FINAL ENTRY        @
.IN0110  ANOP  ,                        SET UP FIELD NAME             @
.**********************************************************************
.*       ANALYZE SPECIFICATION OF LENGTH/INITIAL OPERAND              *
.**********************************************************************
         AIF   (T'&LENGTH EQ 'O').LG0010 LENGTH NOT GIVEN             5
&GLENGTH SETA  &LENGTH                 SET FIELD LENGTH               @
         AGO   .LG0030                 BYPASS LENGTH SUBSTITUTION     @
.LG0010  ANOP  ,                       USE LENGTH OF DEFAULT VALUE    @
         AIF   (T'&INITIAL EQ 'O').LG0020 IF NOT GIVEN DEFAULT TO ONE 5
         AIF   ('&INITIAL'(1,1) NE '''').ERR070 YES, FIRST CHAR A (') ?
&GLENGTH SETA  K'&INITIAL-2            DEFAULT TO LENGTH OF LITERAL   @
&DEFAULT SETB  1                        YES, SET DEFAULT GLOBAL       @
         AGO   .LG0030                 END OF LENGTH GENERATION       5
.LG0020  ANOP  ,                       LENGTH DEFAULT SETUP           5
&GLENGTH SETA  1                       DEFAULT TO LENGTH OF ONE       @
.LG0030  ANOP  ,                       VALIDATE LENGTH VALUE ASSIGNED 5
.*       AIF   (&GLENGTH GT 256).ERR020 TOO LONG   DELETED BY LGN 7906*
         AIF   (&GLENGTH LT 1).ERR020  NOT LONG ENOUGH                @
.**********************************************************************
.*       ANALYZE SPECIFICATION OF FILL OPERAND                        *
.**********************************************************************
         AIF   (T'&FILL NE 'O').FILL10  IS OPTION GIVEN ???           *
&FILLCHR SETC  '&GFILL'                 SET FILL CHARACTER
         AGO   .FILL20
.FILL10  ANOP  ,
&FILLCHR SETC  '&FILL'                  SET FILL CHARACTER
.FILL20  ANOP  ,
.PO0000  ANOP  ,                       END OF FIELD LENGTH PARAMETER  @
.**********************************************************************
.*       ANALYZE SPECIFICATION OF POS OPERAND                         *
.**********************************************************************
         AIF   (T'&POS EQ 'O').ERR030  IS POS = NULL ?                @
&FPOS    SETA  &POS(1)                                                @
         AIF   (N'&POS LT 2).PO0020    ACTUAL POSITIONS SPECIFIED ??? @
         AIF   (&POS(1) LT 1 OR &POS(1) GT &LINES).ERR030 LINE VALID ?
         AIF   (&POS(2) LT 1 OR &POS(2) GT &COLS).ERR030  YES, COL   ?
&FPOS    SETA  (((&POS(1)-1)*(&COLS))+(&POS(2)-1)) YES, CONVERT IT    @
         AGO   .PO0030                                                @
.PO0020  ANOP  ,                                                      @
         AIF   (&FPOS-&EPOS GT 0).PO0030    WILL FIELD OVERLAP?       *
         MNOTE 4,'POSITION ADJUSTED TO PREVENT FIELD OVERLAY'         *
&FPOS    SETA  &EPOS+1                 PREVIOUS ENDING POS + ONE      *
         AGO   .PO0040                 BYPASS FOLLOWING CODE          *
.PO0030  ANOP  ,
         AIF   (&SKIP).PO0040          WAS PREV FIELD ATR = SKIP  ???
         AIF   (&FPOS-&EPOS EQ 1).PO0040 IF ONLY ONE BYTE --          *
         DC    X'1D7C'                 CAUSE SKIP FROM LAST FIELD     *
.PO0040  ANOP  ,                       GAP FIELD GENERATION RETURN PT
&EPOS    SETA  (&FPOS+&GLENGTH)             CALCULATE ENDING POSITION *
         AIF   (&SCRSIZE LT &EPOS).ERR080 OUTSIDE OF PAGE ?           *
.PO0060  ANOP  ,                      NO, END OF POSITION OPERAND     @
         AIF   (&FPOS GE &PREVPOS).PO0070  ARE FIELDS IN SEQUENCE ?   @
&SEQ     SETB  1                      NO, SET OUT OF SEQUENCE IND     @
         AGO   .ERR170                THEN TERMINATE THIS EXPANSION   @
.PO0070  ANOP  ,                      YES, BYPASS OUT OF SEQ IND      @
&PREVPOS SETA  &FPOS                  SET NEW PREVIOUS POSITION       @
.AT0000  ANOP  ,                   END OF POSITION AND SEQUENCE CHECK @
.**********************************************************************
.*       ANALYZE SPECIFICATION OF  ATR  OPERAND                       *
.**********************************************************************
&ATRC    SETC  '40'                INITIALIZE 3270 ATTRIBUTE CHAR     @
&SKIP    SETB  0                   RESET SKIP OPTION                  @
&PROT    SETB  0                   RESET PROT OPTION                  @
&INDEX   SETA  1
&HIGH    SETA  10
&IC      SETB  0
&ARG     SETA  0
         AIF   (T'&ATR EQ 'O').AT0040
.AT0010  ANOP  ,
&COUNT   SETA  &COUNT+1
         AIF   (&COUNT GT &HIGH).ERR100
         AIF   ('&ATR(&INDEX)'(1,2) EQ '**SKIPROUNPNUMDETBRTDRKMDTIC NO*
               R'(3*&COUNT,2)).AT0030
         AGO   .AT0010
.AT0020  ANOP  ,
         AIF   (&INDEX EQ N'&ATR).AT0050
&INDEX   SETA  &INDEX+1
&COUNT   SETA  0
         AGO   .AT0010
.*
.*  SET X MATRIX FOR CHARACTER DISPLACEMENT.
.*
.AT0030  ANOP  ,
&XON     SETB  1
&X(&COUNT) SETB 1
&Y(&COUNT) SETA &INDEX
         AGO   .AT0020
.AT0040  ANOP  ,
&X(1)    SETB  1
&XON     SETB  1
.*
.*  ANALYZE THE MATRIX
.*
.AT0050  ANOP  ,
         AIF   (&XON).AT0060
&X(1)    SETB  1
.AT0060  ANOP  ,
.*
.*  OUTPUT ANALYSIS.
.*
&A       SETA  1                       SKIP
&B       SETA  3                       UNPROTECTED
         AIF   (&X(1) AND &X(3)).ERR110  SKIP/UNPROTECTED ???
&A       SETA  2                       PROTECT
         AIF   (&X(2) AND &X(3)).ERR110  PROTECTED/UNPROTECTED
&A       SETA  5                       SELECTER PEN DETECTABLE
&B       SETA  7                       DARK (NON-DETECTABLE)
         AIF   (&X(5) AND &X(7)).ERR110  DETECTABLE/DARK ???
&A       SETA  6                       BRIGHT
         AIF   (&X(6) AND &X(7)).ERR110  BRIGHT/DARK ???
&B       SETA  10                      NORMAL
         AIF   (&X(6) AND &X(10)).ERR110  BRIGHT/NORMAL ???
&A       SETA  7                       DARK
         AIF   (&X(7) AND &X(10)).ERR110    DARK/NORMAL ???
         AIF   (&X(1) AND &X(9)).ERR120     SKIP/IC ???
         AIF   (&X(2) AND &X(9)).ERR120     PROT/IC ???
         AIF   (&X(2) AND &X(4)).ERR130     PROT/NUM ???
.*
.*  SET ATTRIBUTE BITS
.*
.AT0070  ANOP  ,
&NUMERIC SETB  (&X(4))             SET NUMERIC FIELD INDICATOR
&X(2)    SETB  (&X(1) OR &X(2))    PROT IF SKIP.
&X(4)    SETB  (&X(1) OR &X(4))    NUM IF SKIP
&X(5)    SETB  (&X(7) OR (&X(5) AND NOT &X(6))) SET IF DARK OR LGHT PEN
&X(6)    SETB  (&X(7) OR &X(6))    BRT IF DARK.
&IC      SETB  (&X(9))             IC IF REQUESTED
&ARG     SETA  (32*&X(2)+16*&X(4)+4*&X(5)+8*&X(6)+&X(8))
&KEYED   SETB  (&X(3))             FLAG AS KEYABLE IF UNPROTECTED.
&PROT    SETB  (&X(2) OR &X(1))    SET TO ONE IF ATR = PROT OR SKIP
&SKIP    SETB  (&X(1))             SET TO ONE IF ATR = SKIP
         AGO   .AT0100
.AT0090  ANOP  ,
&X(&C)   SETB  0                   CLEAR
&C       SETA  &C+1                DOWN
         AIF   (&C LT 11).AT0090   X TABLE.
         AGO   .AT0070
.AT0100  ANOP  ,                       END OF ATR ANALYSIS
         AIF   (T'&FLDNAME EQ 'O').AT0110 FIELD NAME OMITTED          @
&FN      SETC  '&FLDNAME'(1,11)        USE FIRST 11 CHAR FOR NAME     @
&DATAIND SETB  ('&FN' NE '')       INDICATE DATA ITEM (LABEL)         @
         AGO   .AT0120                  BYPASS NEXT TEST              @
.AT0110  ANOP  ,                        FIELD NAME BYPASS             @
         AIF   ((NOT &BUFFTB) OR (&SKIP) OR (&PROT)).AT0120
         MNOTE 4,'MAP NAME REQUIRED WITH ''BUFFTAB'' OPTION, DEFAULT NA$
               ME GENERATED'
         AIF   (NOT &SKIP).AT0110
&FN      SETC  'FLD&SYSNDX'            GENERATE DEFAULT NAME
.AT0120  ANOP  ,
.**********************************************************************
.*       CONVERT THE BINARY  ATR  TO A VALID 3270 TRANSMITTABLE CHAR  *
.**********************************************************************
&ATRC    SETC  '&ADDRCHR'((&ARG+1)*2,2) SELECT ATTRIBUTE CHARACTER    *
.DE0000  ANOP  ,                        END OF ATTRIBUTE CONVERSION   @
.**********************************************************************
.*       DATA DECLARATION GENERATION                                  *
.**********************************************************************
.LO0000  ANOP  ,                        END OF JUSTIFY PARAMETER      @
.**********************************************************************
.*       SET CURRENT OUTPUT FIELD LOCATION COUNTER                    *
.**********************************************************************
         AIF   (NOT &DATAIND).LO0020    BYPASS FOR NON DATA FIELDS    *
         AIF   (T'&LOC EQ 'O').LO0010   LOCATION NOT GIVEN, USE DEFAULT
&NLOC    SETA  &LOC                     SET CURRENT LOCATION COUNTER  *
&PLOC    SETA  (&NLOC+(&GLENGTH))       SET NEXT TO CUR PLUS LENGTH   *
         AGO   .LO0020                  CONTINUE                      *
.LO0010  ANOP  ,                        DEFAULT TO CURRENT COUNT      *
&NLOC    SETA  &PLOC                    USE PREVIOUS COUNT            *
&PLOC    SETA  (&NLOC+(&GLENGTH))       SET NEXT TO CUR PLUS LENGTH   *
.LO0020  ANOP  ,                        END OF LOCATION COUNT SETUP   *
         AGO   .GN0010                  GO TO FIELD GENERATION        @
.GN0000  ANOP  ,                        FIELD GENERATION              @
.**********************************************************************
.*       GENERATE SKIP (END OF LINE) FIELD ENTRY                      *
&XAXIS   SETA  (&EPOS/64+1)
&YAXIS   SETA  (&EPOS-(&XAXIS-1)*64+1)
&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)
&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)
.**********************************************************************
         DC    XL1'11'             FIELD DESCRIPTOR FLAG BYTE         @
         DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *
         DC    CL1'0'              FIELD ATTRIBUTE                    @
*---------------------------------------------------------------------*
         AGO   .PO0030
.GN0010  ANOP  ,                        FIELD GENERATION              @
.**********************************************************************
.*       GENERATE FIELD ENTRY                                         *
&XAXIS   SETA  (&FPOS/64+1)
&YAXIS   SETA  (&FPOS-(&XAXIS-1)*64+1)
&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)
&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)
.**********************************************************************
         DC    XL1'11'             START BUFFER ADDRESS CHARACTER     *
         DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *
         DC    XL1'1D'             START FIELD CHARACTER              *
         DC    XL1'&ATRC'          FIELD ATTRIBUTE                    *
         AIF   (NOT &DEFAULT).GN0050  IS INITIAL = DEFAULT DATA ?     @
&FN      DC    CL&GLENGTH.&INITIAL
         AGO   .GN0060             GO TO NEXT OPTION                  *
.GN0050  ANOP  ,                   INITIAL = DEFAULT DATA BYPASS      @
&FN      DS    0CL&GLENGTH
         DC    &GLENGTH.XL1'&FILLCHR.'
.GN0060  ANOP  ,                   INITIAL = DEFAULT DATA BYPASS      @
***********************************************************************
         AIF   (((NOT &KEYED) AND (&CURSOR NE 0)) OR (NOT &IC)).GN0070
&CURSOR  SETA  &FPOS+1             UPDATE CURSOR POSITION             @
.GN0070  ANOP  ,                   END OF FIELD GENERATION            @
         AIF   (((NOT &BUFFTB) AND (NOT &KEYED)) OR (&PROT)).MAPXIT
&FPOS    SETA  &FPOS+1                 BUMP TO ACTUAL FIELD
&XAXIS   SETA  (&FPOS/64+1)
&YAXIS   SETA  (&FPOS-(&XAXIS-1)*64+1)
&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)
&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)
&ENTS    SETA  &ENTS+1                 BUMP ENTRY COUNT
&ENTRBA(&ENTS)  SETC  '&XCHAR&YCHAR'   SET RBA
&ENTLEN(&ENTS)  SETA  &GLENGTH-1       SET LENGTH-1
&ENTOFF(&ENTS)  SETC  '&FN-&MAPNAME'   DEFINE OFFSET FOR ADCON
&ENTVCN(&ENTS)  SETA  0                ENSURE UNUSED IS ZERO
         AIF    (T'&VALUES EQ 'O').MAPXIT
.GN0080  ANOP  ,
         AIF   (&ENTVCN(&ENTS) EQ 3).MAPXIT
&ENTVCN(&ENTS)  SETA &ENTVCN(&ENTS)+1  BUMP COUNTER
&VALCNT         SETA &VALCNT+1         BUMP COUNTER
&ENTVAL(&VALCNT) SETC '&VALUES(&ENTVCN(&ENTS))' MOVE PARAMETER
         AIF   (&ENTVCN(&ENTS) LT N'&VALUES).GN0080
.MAPXIT  ANOP  ,                   END OF FIELD GENERATION            @
&FN      SETC  ''                  INITIALIZE FLDNAME GLOBAL          @
&DEFAULT SETB  0                   INITIALIZE DEFAULT DATA GLOBAL     @
&DATAIND SETB  0                   INITIALIZE DATA (FIELD) INDICATOR  @
&PEN     SETB  0                   INITIALIZE PEN DETECTABLE GLOBL    @
&IC      SETB  0                   INITIALIZE INSERT CURSOR GLOBAL    @
&KEYED   SETB  0                   INIT UNPROTECTED FIELD GLOBAL      @
&NUMERIC SETB  0                   INITIALIZE NUMERIC FIELD GLOBAL    @
         MEXIT ,                   EXIT MACRO                         @
.**********************************************************************
.***     GENERATE FINAL DSECT AND ADDRESS TABLES                    ***
.**********************************************************************
.FI0000  ANOP  ,                   FINAL ENTRIES                      @
         AIF   ((&SKIP) OR (&PROT)).FI0010  WAS PREV FIELD ATR = SKIP *
&EPOS    SETA  &EPOS+1                 BUMP BY ONE TO MISS PREV FIELD *
&XAXIS   SETA  (&EPOS/64+1)
&YAXIS   SETA  (&EPOS-(&XAXIS-1)*64+1)
&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)
&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)
         DC    XL1'11'             FIELD DESCRIPTOR FLAG BYTE         @
         DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *
         DC    XL1'1D'             START FIELD INDICATOR              *
         DC    XL1'F0'             FIELD ATTRIBUTE
***********************************************************************
.FI0010  ANOP  ,                                                      *
&MAP     SETB  0                        SET OFF AFTER FINAL           @
.**********************************************************************
         AIF   (&CURSOR EQ 0).FI0020    NO CURSOR!                KMB
*              SET CURSOR POSITION                                    *
&XAXIS   SETA  (&CURSOR/64+1)
&YAXIS   SETA  (&CURSOR-(&XAXIS-1)*64+1)
&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)
&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)
&FN      SETC  ''
         AIF   (T'&FLDNAME EQ 'O').CR0000      WAS NAME SPECIFIED?
&FN      SETC  '&MAPNAME'(1,5)          SET DEFAULT VALUE
&FNM     SETC  'CSR'                    SET DEFAULT VALUE
&FN      SETC  '&FN&FNM'                SET DEFAULT VALUE
.CR0000  ANOP  ,
         DC    XL1'11'             START BUFFER ADDRESS CHARACTER     *
&FN      DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *
         DC    XL1'13'             INSERT CURSOR INDICATOR            *
&CURSOR  SETA  0                       RESET CURSOR POSITION          *
***********************************************************************
.FI0020  ANOP  ,
         AIF   (T'&EQU EQ 'O').FI0040
&FN      SETC  '&EQU'
&FN      EQU   *-&MAPNAME
.FI0040  ANOP  ,
         AIF   ((NOT &BUFFTB) OR (&ENTS EQ 0)).MEXIT              KMB
.**********************************************************************
         AIF   (T'&FLDNAME NE 'O').FI0100      WAS NAME SPECIFIED?
&FN      SETC  '&MAPNAME'(1,4)          SET DEFAULT VALUE
&FN      SETC  '&FN&SYSNDX'             SET DEFAULT VALUE
         AGO   .FI0110                 GO PROCESS NEXT ONE
.FI0100  ANOP  ,
&FN      SETC  '&FLDNAME'              USE NAME SPECIFIED INSTEAD
.FI0110  ANOP  ,
         EJECT ,
***********************************************************************
*              THIS TABLE IS GENERATED FOR THE USER WHEN A MAP OF ALL *
*        MODIFIABLE ENTRIES IN A '$FLD' LIST IS REQUIRED. THIS MAP    *
*        CONTAINS THE FOLLOWING ENTRIES:                              *
*                                                                     *
*    XL2(....)       THE BUFFER ADDRESS OF THIS FIELD                 *
*    AL2(..)         THE OFFSET INTO THE MAP, OF THIS FIELD           *
*    AL2(..)         THE LENGTH-1 OF THIS FIELD                       *
*                                                                     *
***********************************************************************
         CNOP  2,4                     ALIGN ON HALFWORD BOUND
         DC    H'&ENTS'                TOTAL NUMBER OF ENTRIES
&FN      DS    0F                      LISTING OF BUFFER ADDRESS TABLE
.FI0120  ANOP  ,
&LSTCNT  SETA  &LSTCNT+1               BUMP ENTRY LSTCNT
         AIF   ((&LSTCNT GT &ENTS) OR (&LSTCNT GT &ENTMAX)).FIEXIT
         DC    XL2'&ENTRBA(&LSTCNT)'   BUFF ADDR OF CURRENT ENTRY
         DC    AL2(&ENTOFF(&LSTCNT))   OFFSET OF CURRENT ENTRY
         DC    H'&ENTLEN(&LSTCNT)'     LENGTH OF CURRENT ENTRY - 1
         AIF   (&ENTVCN(&LSTCNT) EQ 0).FI0120
.FI0130  ANOP  ,
&TCNT1   SETA  &TCNT1+1
         DC    &ENTVAL(&TCNT1)         VALUES PARAMETER
         AIF   (&TCNT1 LT &ENTVCN(&LSTCNT)).FI0130
         AGO   .FI0120                 GO PROCESS NEXT ONE
.FIEXIT  ANOP  ,
         MNOTE *,'BEG-FIEXIT'
&TCNT1   SETA  (K'&FLDNAME)
         AIF   (&TCNT1 LE 6).FIEX01
&TCNT1   SETA  6
.FIEX01  ANOP  ,
&FILLCHR SETC  '&FN'
&FN      SETC  '&FILLCHR'(1,&TCNT1)
&FNM     SETC  'EL'
&FN      SETC   '&FN&FNM'
&FN      EQU   ((*-&FILLCHR)/&ENTS)    LENGTH OF EACH ENTRY
         DC    X'FFFF'                 END OF TABLE
         SPACE 1
&ENTS    SETA  0                       RESET ENTRY COUNT
***********************************************************************
.MEXIT   ANOP  ,                       HERE TO EXIT MACRO             *
         MEXIT ,                   EXIT MACRO                         @
.**********************************************************************
.* *     MNOTE STATEMENTS                                           * *
.**********************************************************************
.ERR010  ANOP  ,                        TYPE IN ERROR                 @
         MNOTE 12,'TYPE = FINAL IS PREVIOUSLY SPECIFIED,'             @
         AGO   .MAPXIT                  TERMINATE                     @
         MEXIT ,                   MACRO EXIT                         @
.ERR020  ANOP  ,                   LENGTH OPERAND ERROR ENTRY         @
         MNOTE 12,'INVALID LENGTH OPERAND IS SPECIFIED,'              @
         MNOTE *,'MACRO REQUEST IS IGNORED,'                          @
         MNOTE *,'VALID LENGTH OPERAND IS REQUIRED.'
&ABORT   SETB  1                   TURN ON ABORT INDICATOR            @
         AGO   .MAPXIT                 TERMINATE GENERATION           @
.ERR030  ANOP  ,                   POS OPERAND ERROR ENTRY            @
         MNOTE 12,'INVALID POS OPERAND IS SPECIFIED,'                 @
.ERR055  ANOP  ,                   POS OPERAND MNOTE ENTRY            @
         MNOTE *,'MACRO REQUEST IS IGNORED,'                          @
         MNOTE *,'VALID POS OPERAND IS REQUIRED WITH MAP MACRO.'      @
&ABORT   SETB  1                   TURN ON ABORT INDICATOR            @
         AGO   .AT0000             GO TO POS OPERAND COMPLETION       @
.ERR070  ANOP  ,                   INITIAL OPERAND ERROR ENTRY        @
         MNOTE 8,'INVALID INITIAL OPERAND IS SPECIFIED,'              @
         MNOTE *,'DEFAULT DATA MUST BE ENCLOSED IN QUOTES,'           @
         MNOTE *,'INITIAL OPERAND IS IGNORED.'                        @
         AGO   .LG0020             GO TO INITIAL OPERAND BYPASS       @
.ERR080  ANOP  ,                   FIELD SPECIFICATION ERROR ENTRY    @
         MNOTE 8,'FIELD IS DEFINED OUTSIDE OF THE SIZE OPERAND'       @
         MNOTE *,'MACRO REQUEST IS IGNORED.'                          @
&ABORT   SETB  1                   TURN ON ABORT INDICATOR            @
         AGO   .PO0020             GO TO PAGE SIZE BYPASS             @
.ERR100  ANOP  ,                   ATR PARAMETER ERROR ENTRY
         MNOTE 4,'INVALID ATTRIBUTE PARAMETER IS SPECIFIED,'
         MNOTE *,'ATR = &ATR(&INDEX) IS IGNORED.'
         AGO   .AT0020             GO TO CHECK INDEX
.ERR110  ANOP  ,                   INCOMPATIBLE ATR OP ERROR
&A       SETA  &Y(&A)              SET PARAMETER INDEX VALUE
&B       SETA  &Y(&B)              SET PARAMETER INDEX VALUE
         MNOTE 4,'&ATR(&A) AND &ATR(&B) ARE INCOMPATIBLE PARAMETERS,'
         MNOTE *,'ATR = &ATR(&A) IS IGNORED,'
         MNOTE *,'ATR = &ATR(&B) IS IGNORED,'
         MNOTE *,'ATR = SKIP IS ASSUMED BY DEFAULT.'
&X(1)    SETB  1                   SKIP DEFAULT.
&C       SETA  2                   SET C FOR CLEARING X TABLE.
         AGO   .AT0090
.ERR120  ANOP  ,                   ATR = IC ERROR ENTRY
         MNOTE *,'ATR = IC IS REQUESTED FOR PROTECTED FIELD'
         AGO   .AT0070
.ERR130  ANOP  ,                   ATR = PROT AND NUM ERROR
         MNOTE *,'ATR = PROT AND NUM ALSO IMPLIES THE SKIP PARAMETER'
         AGO   .AT0070
.ERR150  ANOP  ,                       HERE FOR ERROR                 *
         MNOTE 8,'INVALID TYPE SPECIFIED'                             *
.ERR160  ANOP  ,                       HERE FOR ERROR                 *
         MNOTE 8,'MODEL OPERAND IS REQUIRED && MINIMUM LENGTH IS 6'   *
         MEXIT ,
.ERR170  ANOP  ,                       HERE FOR ERROR                 *
         MNOTE 16,'SEQUENCE ERROR ENCOUNTERED, EXPANSION TERMINATED'  *
         MEXIT ,
.ERR200  ANOP  ,                       HERE FOR ERROR                 *
         MNOTE 8,'INVALIB ''BUFFTAB'' SPECIFICATION'                  *
         MEXIT ,
.ERR190  ANOP  ,                       HERE FOR ERROR                 *
         MNOTE 8,'MAP NAME REQUIRED WITH ''BUFFTAB'' OPTION'          *
         MEND  ,
         SPACE 2
         MACRO ,                                                GP04057
         MAINPANL &PFX=PAT                                      GP04057
&PFX.DSCBPANL $FLD  TYPE=INIT,MODEL='3278-2',                          *
               BUFFTAB=YES,OPERATN=WRITERAS,                           $
               FILL=00
         $FLD  POS=(01,20),ATR=SKIP,                                   $
               INITIAL='DATA SET CONTROL BLOCK MODIFICATION PANEL'
         $FLD  POS=(03,18),ATR=SKIP,                                   $
               INITIAL='Data Set Name'
&PFX.PDSNAME  $FLD  POS=(03,32),ATR=(IC,UNPR),                         $
               VALUES=(Y(00)),LENGTH=46
         $FLD  POS=(04,18),ATR=SKIP,                                   $
               INITIAL='Volume Serial'
&PFX.PVOLSER $FLD POS=(04,32),ATR=UNPR,                                $
               VALUES=(Y(01)),LENGTH=6
&PFX.PERRMSG $FLD POS=(05,02),ATR=(SKIP,BRT),                          $
               INITIAL='                                               $
                                          '                     GP04099
         $FLD  POS=(07,18),ATR=SKIP,                                   $
               INITIAL='Creation Date'
&PFX.PCREDT $FLD POS=(07,32),ATR=UNPR,                                 $
               VALUES=(Y(02)),LENGTH=7                          GP04057
         $FLD  POS=(08,17),ATR=SKIP,                                   $
               INITIAL='Reference Date'
&PFX.PREFDT $FLD POS=(08,32),ATR=UNPR,                                 $
               VALUES=(Y(03)),LENGTH=7                          GP04057
         $FLD  POS=(09,16),ATR=SKIP,                                   $
               INITIAL='Expiration Date'
&PFX.PEXPDT $FLD POS=(09,32),ATR=UNPR,                                 $
               VALUES=(Y(04)),LENGTH=7                          GP04057
         $FLD  POS=(11,10),ATR=SKIP,                                   $
               INITIAL='Data Set Organization'
&PFX.PDSORG $FLD POS=(11,32),ATR=UNPR,                                 $
               VALUES=(Y(05)),LENGTH=3
         $FLD  POS=(12,18),ATR=SKIP,                                   $
               INITIAL='Record Format'
&PFX.PRECFM $FLD POS=(12,32),ATR=UNPR,                                 $
               VALUES=(Y(06)),LENGTH=5                          GP04099
         $FLD  POS=(13,10),ATR=SKIP,                                   $
               INITIAL='Logical Record Length'
&PFX.PLRECL $FLD POS=(13,32),ATR=UNPR,                                 $
               VALUES=(Y(07)),LENGTH=5
         $FLD  POS=(14,12),ATR=SKIP,                                   $
               INITIAL='Physical Block Size'
&PFX.PBLKL $FLD POS=(14,32),ATR=UNPR,                                  $
               VALUES=(Y(08)),LENGTH=5
         $FLD  POS=(15,21),ATR=SKIP,                                   $
               INITIAL='Key Length'
&PFX.PKEYL $FLD POS=(15,32),ATR=UNPR,                                  $
               VALUES=(Y(09)),LENGTH=3
         $FLD  POS=(16,10),ATR=SKIP,                                   $
               INITIAL='Relative Key Position'
&PFX.PRKP $FLD POS=(16,32),ATR=UNPR,                                   $
               VALUES=(Y(10)),LENGTH=3
         $FLD  POS=(18,06),ATR=SKIP,                                   $
               INITIAL='Last Used Track and Block'
&PFX.PLSTAR $FLD POS=(18,32),ATR=UNPR,                                 $
               VALUES=(Y(11)),LENGTH=6
         $FLD  POS=(18,40),ATR=(SKIP,BRT),                             $
               INITIAL='<=== hexadecimal'
         $FLD  POS=(19,02),ATR=SKIP,                                   $
               INITIAL='Bytes remaining on last track'
&PFX.PTRBAL $FLD POS=(19,32),ATR=UNPR,                                 $
               VALUES=(Y(12)),LENGTH=4
         $FLD  POS=(20,17),ATR=SKIP,                                   $
               INITIAL='SMS Indicators'
&PFX.PSMSIND $FLD POS=(20,32),ATR=UNPR,                                $
               VALUES=(Y(13)),LENGTH=2
         $FLD  POS=(20,40),ATR=(SKIP,BRT),                             $
               INITIAL='<=== hexadecimal'
         SPACE 1
         $FLD  POS=(21,12),ATR=SKIP,                                   $
               INITIAL='Data Set Indicators'
&PFX.PDSIND $FLD POS=(21,32),ATR=UNPR,                                 $
               VALUES=(Y(14)),LENGTH=2
         $FLD  POS=(21,40),ATR=(SKIP,BRT),                             $
               INITIAL='<=== hexadecimal'
         SPACE 1
         $FLD  POS=(22,19),ATR=SKIP,                                   $
               INITIAL='Option Codes'
&PFX.POPTCD $FLD POS=(22,32),ATR=UNPR,                                 $
               VALUES=(Y(15)),LENGTH=2
         $FLD  POS=(22,40),ATR=(SKIP,BRT),                             $
               INITIAL='<=== hexadecimal'
         SPACE 1
         $FLD  POS=(23,11),ATR=SKIP,                                   $
               INITIAL='Secondary Allocation'
&PFX.PSCAL3 $FLD POS=(23,32),ATR=UNPR,                                 $
               VALUES=(Y(17)),LENGTH=8
         $FLD  POS=(23,42),ATR=SKIP,                                   $
               INITIAL='Units:'                                 GP04099
&PFX.PSCAL1 $FLD POS=(23,50),ATR=UNPR,                                 $
               VALUES=(Y(16)),LENGTH=5                          GP04099
&PFX.PSCAL5 $FLD POS=(23,56),ATR=UNPR,                                 $
               VALUES=(Y(18)),LENGTH=5                          GP04099
&PFX.PERRMS2 $FLD POS=(24,02),ATR=(SKIP,BRT),                          $
               INITIAL='                                               $
                                          '
&PFX.PDSCBL $FLD TYPE=FINAL,BUFFTAB=&PFX.PDSCBL,EQU=&PFX.LPDSCBL
&PFX.LPDSCB EQU  (((*-&PFX.DSCBPANL+7)/8)*8)   LENGTH OF DCT PANEL
         MEND  ,
         PRINT ON                                               GP04058
         SPACE 1                                                GP04057
         PUNCH ' ORDER ZAPDSCB(P) '    MAKE DUMPS EASIER        GP04058
         PUNCH ' SETCODE AC(1)    '    MAKE IT WORK             GP04058
         SPACE 1                                                GP04057
         COPY  OPTIONGB                                         GP04057
         SPACE 1                                                GP05187
         GBLB  &CVAF         TRUE IF CVAF SERVICES AVAILABLE    GP05187
         SPACE 1                                                GP04057
         SYSPARM LIST=YES                                       GP04057
         SPACE 1                                                GP05187
&CVAF    SETB  (&MVSXA)      USE XDAP UNLESS MVS/XA OR LATER    GP05187
         EJECT ,                                                GP04057
*--------------------------------------------------------------------*
*    DON'T KNOW WHO WROTE THIS ORIGINALLY                            *
*    FULL      SCREEN VTOC ZAPPER.                                   *
*                                                                    *
*--------------------------------------------------------------------*
* CHANGE LOG:                                                        *
* SAM BASS   (KBASS)                                                 *
* BMC SOFTWARE INC                                                   *
* MCLANE CO. INC.                                                    *
*                                                                    *
*     KBASS ONLY ALLOW GROUP OF SYS1 TO DO THIS                      *
* 21DEC94 KBASS ADD OPTCD DISPLAY                                    *
* 30OCT95 KBASS USE UCBLOOK MACRO TO SUPPORT DYNAMIC DASD            *
*--------------------------------------------------------------------*
         PRINT &PRTSOR       SAVE A TREE ?                      GP04057
ZAPDSCB  PGMHEAD ZERO12,BASE=(R11,R12),AM=31,RM=24,PARM=R7      GP04057
         LA    R14,DSCBPANL  SET PANEL DESTINATION              GP04057
         LA    R15,LPDSCB    PANEL LENGTH + FIELD DATA          GP04057
         L     R0,=A(PATDSCBPANL)  SET PANEL SOURCE             GP04058
         LR    R1,R15        SAME LENGTH                        GP04057
         MVCL  R14,R0        MAKE COPY                          GP04057
         MVC   CVAFERR(PATFERRL),PATFERR  ERROR MESSAGE PATTERN GP04058
         MVC   PDSNAME,ALLNULL         MOVE IN HEX ZEROES       GP04057
         MVC   DS1DSNAM,ALLBLANK       MOVE IN ALL BLANKS       GP04057
*DEBUG*  BANDAID INIT        EASIER DEBUGGING ?                 GP04057
         SERVINIT ,          INITIALIZE MY SERVICES             GP04057
         SERVICE APFON       MAKE ME AUTHORIZED IF LEGAL        GP04057
         SPACE 1                                                GP04057
***********************************************************************
*    GET AND SAVE COMMON ADDRESSES                                    *
***********************************************************************
         L     R1,PSATOLD-PSA      ... CVT                      GP04057
         ST    R1,@TCB             ... SAVE MY TCB ADDRESS      GP04057
         L     R2,TCBTIO-TCB(,R1)  ... TIOT POINTER             GP04057
         ST    R2,@TIOT            ... SAVE TIOT ADDRESS        GP04057
         L     R2,TCBJSTCB-TCB(,R1)                             GP04057
         ST    R2,@JSTCB                                        GP04057
         SPACE 1
***********************************************************************
*    LOCATE THE USER'S ASCB AND SAVE THE USERID                       *
***********************************************************************
         L     R15,PSAAOLD-PSA(00)     A(PSA ASCB)              GP04058
         L     R15,ASCBASXB-ASCB(,R15) A(ASXB)                  GP04058
         L     R15,ASXBSENV-ASXB(,R15) A(ASCB)                  GP04058
         CLC   =C'SYS1',ACEEGRPN-ACEE(R15)    COPY THE USER GROUP
         BNE   BADBOY
         MVC   USERID,ACEEUSER-ACEE(R15)    COPY THE USERID
         MVC   DEFCSRAD,DSCBPCSR       SAVE INITIAL CURSOR BUFF ADDR
         SPACE 1
***********************************************************************
*    INITIATE FULL SCREEN PROCESSING                                  *
***********************************************************************
         STFSMODE ON,INITIAL=YES       INITIATE FULL SCREEN PROCESSING
         EJECT ,
***********************************************************************
*    SETUP THE CVAF HEADER AND BUFFER LISTS                           *
***********************************************************************
         XC    CVAFBUF(BFLHLN+BFLELN),CVAFBUF       RESET BUFFER HEADER
         OI    BFLHFL,BFLHDSCB         INDICATE READ DSCB'S
         MVI   BFLHNOE,1               NUMBER OF BUFFER LIST ENTRIES
         LA    R15,DS1FMTID            A(DSCB DATA AREA)
         ST    R15,BFLEBUF                 AND UPDATE BUFFER LIST
         MVI   BFLELTH,LDSCB-44        LENGTH OF DATA AREA (DSCB-44)
         SPACE 1                                                GP04057
***********************************************************************
*  IN ORDER TO ACCOMMODATE BOTH COMMAND ENTRY AND CALL ENTRY, WE GET  *
*   THE UPT, AND THE USER'S PREFIX HERE                               *
***********************************************************************
         PUSH  USING                                            GP04057
         L     R2,@JSTCB     GET A TCB OF OURS                  GP04057
         L     R2,TCBJSCB-TCB(,R2)  GET THE JSCB                GP04057
         USING IEZJSCB,R2                                       GP04057
         ICM   R2,15,JSCBPSCB  IF THIS FAILS, WE'RE IN DEEEEEEEEEEEP SH
         BZ    DONEPFX       SKIP PREFIX CODE                   GP04057
         USING PSCB,R2                                          GP04057
         ICM   R2,15,PSCBUPT  GET THE UPT                       GP04057
         BZ    DONEPFX                                          GP04057
         USING UPT,R2                                           GP04057
         MVC   PREFIX,UPTPREFX  MOVE THE PREFIX                 GP04057
         MVC   PREFLEN,UPTPREFL  AND ITS LENGTH                 GP04057
         POP   USING                                            GP04057
         SPACE 1                                                GP04057
***********************************************************************
*    EXAMINE THE INPUT PARAMETER OR COMMAND LINE TEXT                 *
***********************************************************************
         SPACE 1                                                GP04057
DONEPFX  L     R5,0(,R7)           GET THE PARM POINTER         GP04057
         LTR   R5,R5         ONLY PARAMETER IN LIST?            GP04057
         BNM   HAVECMD       NO; ASSUME WE WERE INVOKED AS A COMMAND
         LH    R4,0(,R5)     GET PARM LENGTH                    GP04057
         LTR   R4,R4         ANY ?                              GP04057
         BNP   MISSDSN       NO; PROMPT FOR DS NAME             GP04057
         CLI   2(R5),0       IS THIS NEW OR OLD FORMAT TSO?     GP04057
         BE    HAVECMD       NEW; BUFFER SAME AS CMD ENTRY      GP04057
         LA    R15,2(,R5)    POINT TO TEXT                      GP04057
         B     COMPARM                                          GP04057
HAVECMD  LH    R4,0(,R5)           GET PARM LGTH                GP04057
         LA    R15,4(,R5)    POINT TO TEXT                      GP04057
         LH    R3,2(,R5)           GET OFFSET TO REAL DATA      GP04057
         AR    R15,R3        SKIP TO PARM PORTION               GP04057
         SR    R4,R3         ADJUST LENGTH TO MATCH             GP04057
         SH    R4,=H'4'            GET THE MESSAGE LGTH         GP04057
         SPACE 1                                                GP04057
***********************************************************************
*  PARSING:  R15 IS THE CURRENT POINTER                               *
*            R0  IS THE INCREMENT (=1)                                *
*            R1  IS THE LAST VALID CHARACTER                          *
*            R2-R4 ARE AVAILABLE FOR FUN AND GAMES                    *
*            R5  IS THE POINTER TO THE NEXT INPUT CHARACTER           *
*            R8  USED FOR SUBROUTINE RETURN                           *
***********************************************************************
COMPARM  LA    R0,1          MAKE A CONSTANT FOR BXLE INCREMENT GP04057
         SR    R4,R0         ADJUST FOR EXECUTE AND TEST        GP04057
         BM    MISSDSN       NOTHING - GO TO RESET IT           GP04057
         LA    R1,0(R15,R4)  MAKE BXLE END ADDRESS              GP04057
         STM   R15,R1,PARSEPTR   SAVE FOR PARSER
         BAL   R14,PARSEWRD  LOOK FOR A WORD IN INPUT           GP04057
           B   MISSDSN       ... IF BLANK, REQUEST NAME         GP04057
         SPACE 1                                                GP04057
***********************************************************************
*  SCAN DATASET OPERAND(S) AND OPTIONS IN PARM FIELD                  *
***********************************************************************
         CLC   =C'DATASET ',PARMWORD   NEW STEPLIB REQUEST?     GP04057
         BE    YDATPARM      YES                                GP04057
         CLC   =C'DATA ',PARMWORD  NEW STEPLIB?                 GP04057
         BE    YDATPARM      YES                                GP04057
         CLC   =C'DA ',PARMWORD  REALLY SHORT FORM?             GP04057
         BE    YDATPARM      YES                                GP04057
         CLC   =C'( ',PARMWORD  REALLY, REALLY SHORT FORM?      GP04057
         BE    GDSNPARM                                         GP04057
         B     UNFANCYD                                         GP04057
YDATPARM CLI   0(R15),C'('   MANDATORY CHARACTER?               GP04057
         BNE   ERRBDDEL      NO; FAIL IT                        GP04057
         BXH   R15,R0,ERRBDDEL SET BAD DELIMITER                GP04057
GDSNPARM BAL   R14,PARSEWRD  GO FIND NEXT PARM                  GP04057
           B   ERRBDDEL      NONE - MISSING )                   GP04057
         CLC   =C') ',PARMWORD  IS IT END STRING?               GP04057
         BE    GOLDPARM      YES; DONE WITH DS NAMES            GP04057
         CLI   PDSNAME,C' '  SECOND TIME HERE ?                 GP04057
         BH    ERRBDDEL      YES; TOO MUCH TOO SOON             GP04057
         BAL   R14,PARSEDSN  GO TO PROCESS DATA SET NAME        GP04057
         TRT   DS1DSNAM,TRTDSNAM VALID NAME?                    GP04058
         BNZ   ERRBDDSN      NO; FAIL ON NAME                   GP04057
         B     GDSNPARM      LOOK FOR RIGHT PARENTHESIS         GP04057
UNFANCYD BAL   R14,PARSEDSN  GO TO PROCESS DATA SET NAME        GP04057
         TRT   DS1DSNAM,TRTDSNAM VALID NAME?                    GP04058
         BNZ   ERRBDDSN      NO; FAIL ON NAME                   GP04057
GOLDPARM BAL   R14,PARSEWRD  GET NEXT WORD(S), IF ANY           GP04057
           B   DONEPARM      GET OUT IF NO MORE                 GP04057
*---------------------------------------------------------------------*
*   SECOND PARAMETER IS (OPTIONAL) VOLUME SERIAL                      *
*---------------------------------------------------------------------*
         BAL   R14,PARSEWRD  GET ANOTHER                        GP04058
           B   DONEPARM      NONE - NORMAL CASE                 GP04058
         SR    R2,R2                                            GP04058
         ICM   R2,1,PARMWLEN  TEST LENGTH                       GP04058
         BM    BADSERLN      NONE?                              GP04058
         CH    R2,=AL2(L'PVOLSER) NOT TOO LONG ?                GP04058
         BL    SERPARM       MOVE SERIAL                        GP04058
BADSERLN LA    R15,SERBDLEN  INVALID                            GP04058
         B     PROCEMSG      TELL USER                          GP04058
         SPACE 1
SERPARM  MVC   PVOLSER,ALLBLANK  CLEAR SERIAL                   GP04058
         EX    R2,EXMVCSER   COPY SERIAL                        GP04058
**********MOVE VOLSER HERE******************                    GP04057
         SPACE 1                                                GP04057
DONEPARM B     DSN010        FINISHED WITH PARM ANALYSIS        GP04057
         SPACE 1
LONGDSN  LA    R15,DSNLNGER                YES, PROVIDE FOR ERROR MSG
         B     PROCEMSG                      AND DISPLAY SAME
MISSDSN  LA    R15,DSNAMEER  MISSING DSNAME                     GP04057
         B     PROCEMSG                      AND DISPLAY SAME   GP04057
ERRBDDEL LA    R15,DSNMSYNT  SYNTAX EROR IN INPUT               GP04057
         B     PROCEMSG                      AND DISPLAY SAME   GP04057
ERRBDDSN LA    R15,DSNMBAD   MALFORMED DS NAME                  GP04057
         B     PROCEMSG                      AND DISPLAY SAME   GP04057
         SPACE 1
*---------------------------------------------------------------------*
*   COPY UNQUOTED DSN FROM PANEL FOR LOCATE AND CVAF USE              *
*---------------------------------------------------------------------*
CHECKDSN MVC   PARMWORD,ALLBLANK  FROM PANEL INPUT - NEW DSN    GP04058
         XC    DS1FMTID(DS1END-DS1FMTID),DS1FMTID  CLEAR DATA   GP04099
         MVC   PARMWORD(L'PDSNAME),PDSNAME                      GP04058
         LOCBYTE PARMWORD    FIND LENGTH                        GP04061
         SR    R15,R14                                          GP04061
         SH    R15,=H'1'     LESS ONE FOR PARMWLEN CONVENTION   GP04061
         BNP   ERRBDDSN      OOPS                               GP04061
         STC   R15,PARMWLEN  SET NEW LENGTH - 1                 GP04061
         BAL   R14,PARSEDSN  FIX NAME                           GP04058
         TRT   DS1DSNAM,TRTDSNAM VALID NAME?                    GP04058
         BNZ   ERRBDDSN      NO; FAIL ON NAME                   GP04057
         SPACE 1
DSN010   MVC   DS1DSNAM,ALLBLANK   CLEAR FOR SHORTER MOVE       GP04057
         LOCBYTE PDSNAME+1,LEN=44,BYTE=C'''' LOOK FOR END QUOTE GP04057
         SR    R15,R14       GET LENGTH OF NAME                 GP04057
         STH   R15,LDSNAME   SAVE FOR ENQ                       GP04057
         SH    R15,=H'1'     LESS ONE FOR EXECUTE               GP04057
         BM    ERRBDDSN      TOO BAD                            GP04057
         LA    R1,DS1DSNAM   POINT TO OUTPUT FIELD              GP04057
         EX    R15,EXMVC2DS  MOVE TO DS1DSNAM                   GP04057
         CLI   PVOLSER,C' '  IS THERE A VOLSER ?                GP04058
         BH    UCBLKPLP      YES; SKIP CATALOG LOCATE           GP04058
         EJECT ,
***********************************************************************
*    LOCATE THE DATA SET CATALOG ENTRY                                *
***********************************************************************
LOCATELP MVC   DSNLOC(4),PATLOC   INIT CAMLST                   GP04058
         LA    R15,CATDSN    POINT TO DSN                       GP04057
         SR    R0,R0         NO CVOL SERIAL                     GP04057
         LA    R1,LOCWORK    WORK AREA                          GP04057
         STM   R15,R1,DSNLOC+4  COMPLETE CAMLST                 GP04057
         MVC   LOCWORK(20),ALLNULL  CLEAR PART OF WORK          GP04058
         OC    DS1DSNAM,ALLBLANK   JUST IN CASE ?               GP04057
         MVC   CATDSN,DS1DSNAM  LOCATE MAY REPLACE NAME         GP04057
         MVC   PVOLSER,ALLNULL         CLEAR VOLSER FIELD       GP04058
         LOCATE DSNLOC                 LOCATE DATA SET
         LTR   R15,R15                 WAS DATA SET FOUND?
         BZ    LOC010                      YES, BYPASS ERROR MESAGE
         LA    R15,DSNLOCER                NO, ADDRESS ERROR MESSAGE
         B     PROCEMSG                GO PROCESS ERROR MESSAGE
LOC010   CLC   DS1DSNAM,CATDSN    IS THIS AN ALIAS ?            GP04057
         BE    LOC020        NO; LEAVE IT INTACT                GP04057
         MVC   DS1DSNAM,CATDSN  REPLACE REQUEST BY TRUE NAME    GP04057
         LOCBYTE DS1DSNAM    FIND END OF NEW DSN                GP04057
         SR    R15,R14       LENGTH OF NAME                     GP04057
         STH   R15,LDSNAME   UPDATE LENGTH                      GP04057
LOC020   MVC   PVOLSER,LOCWORK+6       SAVE VOL SER             GP04057
         SPACE 1
***********************************************************************
*  USING THE UCB LOOKUP PROCESS, LOCATE THE UCB ASSOCIATED WITH       *
*  THE VOLUME SERIAL NUMBER RETRIEVED FROM THE LOCATE PROCESS.        *
***********************************************************************
UCBLKPLP DS    0H                      UCB LOOKUP LOOP
         OC    UCBTOKEN,UCBTOKEN                                30OCT95
         BZ    UCBPIN10                                         30OCT95
         MODESET MODE=SUP                                       30OCT95
         UCBPIN UNPIN,PTOKEN=UCBTOKEN,                          30OCT95X
               MF=(E,XUCBPIN)                                   30OCT95
         MVC   UCBTOKEN,ALLNULL                                 30OCT95
         MVC   UCBADDR,ALLNULL                                  30OCT95
         MODESET MODE=PROB                                      30OCT95
UCBPIN10 DS    0H                                               30OCT95
         MODESET MODE=SUP                                       30OCT95
         UCBLOOK VOLSER=PVOLSER,UCBPTR=UCBADDR,                 30OCT95X
               PIN,                                             30OCT95X
               PTOKEN=UCBTOKEN,                                 30OCT95X
               TEXT==CL58'ZAPDSCB IN PROGESS',                  30OCT95X
               DYNAMIC=YES,RANGE=ALL,LOC=ANY,                   30OCT95X
               MF=(E,XUCBLOOK)                                  30OCT95
         LR    R5,R15                  UCB ADDR RETURNED?       30OCT95
         MODESET MODE=PROB                                      30OCT95
         LTR   R15,R5                  UCB ADDR RETURNED?       30OCT95
         BZ    CHECKUCB                 NO, ERROR               30OCT95
         SPACE 1                                                30OCT95
UCBMSG   DS    0H                                               30OCT95
         LA    R15,UCBERMSG            A(VOL SER MISSING ERROR MESSAGE)
         B     PROCEMSG                GO PROCESS ERROR MESSAGE
         SPACE 1
         USING UCBOB,15
CHECKUCB DS    0H                      CHECK FOR MATCHING VOLSER
         L     R15,UCBADDR             A(UCB ADDRESS)           30OCT95
         CLC   PVOLSER,UCBVOLI         MATCHING VOLSER?
         BNE   UCBMSG                   NO, ERROR               30OCT95
         SPACE 1
         OI    MISCFLAG,NSHARED        DEFAULT TO NON-SHARED DASD
         TM    UCBTBYT2,UCBRR          IS IT ACTUALLY SHARED?
         BZ    UCB010                      NO, BYPASS RESET
         NI    MISCFLAG,255-NSHARED        YES, RESET NON-SHARED FLAG
UCB010   DS    0H
         DROP  15
         EJECT ,
***********************************************************************
*    DETERMINE WHAT TYPE OF ENQ TO USE.      SYSTEM OR SYSTEMS        *
***********************************************************************
         LA    R1,PATLENQ              A('SYSTEM' ENQ LIST)     GP04058
         TM    MISCFLAG,NSHARED        IS DASD DEVICE SHARED?   GP04058
         BO    ENQ010                      NO, USED DEFAULT ADDRESS
         LA    R1,PATSENQ              A('SYSTEMS' ENQ LIST)    GP04058
ENQ010   MVC   MODEENQ(MODEENQL),0(R1) MOVE APPROPRIATE ENQ PATTERN
         LA    R2,DS1DSNAM             A(RNAME FOR ENQ)         GP04058
         LH    R3,LDSNAME              LOAD LENGTH OF DSNAME    GP04058
         SPACE 1
***********************************************************************
*    DETERMINE IF THE DATA SET IS AVAILABLE.                          *
***********************************************************************
         NI    MISCFLAG,255-ENQUEUE    RESET ENQUEUE BIT
         ENQ   (,(R2),,(R3),),MF=(E,MODEENQ)
         SPACE 1
         LTR   R15,R15                 IS RESOURCE AVAILABLE?
         BZ    ENQ020                      YES, PROCESS DATA SET
         OI    MISCFLAG,ENQUEUE            NO, INDICATE SAME
ENQ020   DS    0H
***********************************************************************
*    READ THE DSCB INTO STORAGE                                       *
***********************************************************************
         MVC   CVAFREQ(PATCVAFL),PATCVAF                        GP04058
         L     R2,UCBADDR              LOAD UCB ADDRESS
         CVAFDIR ACCESS=READ,UCB=(R2),MF=(E,CVAFREQ),BRANCH=(YES,PGM), $
               BUFLIST=CVAFBUF,DSN=DS1DSNAM                     GP04058
         LTR   R15,R15                 WAS READ SUCCESSFUL?
         BZ    CREATDTE                    YES, PROCESS DSCB
         B     CVAFPROC                    NO, PROCESSER ERROR RETURN
         EJECT ,
***********************************************************************
*    COPY DATE FIELDS INTO THE PANEL                                  *
*    CODE CHANGED TO HANDLE CENTURY, AND USE COMMON SUBROUTINE        *
***********************************************************************
CREATDTE LA    R1,PCREDT     POINT TO OUTPUT                    GP04057
         LA    R2,DS1CREDT   POINT TO INPUT                     GP04057
         BAL   R14,DATEOUT   CONVERT                            GP04057
         SPACE 1
REFDATE  LA    R1,PREFDT     POINT TO OUTPUT                    GP04057
         LA    R2,DS1REFD    POINT TO INPUT                     GP04057
         BAL   R14,DATEOUT   CONVERT                            GP04057
         SPACE 1
EXPIRDAT LA    R1,PEXPDT     POINT TO OUTPUT                    GP04057
         LA    R2,DS1EXPDT   POINT TO INPUT                     GP04057
         BAL   R14,DATEOUT   CONVERT                            GP04057
         B     DONEDATE                                         GP04057
         SPACE 1                                                GP04057
DATEOUT  ICM   R0,7,0(R2)    ANY DATE SPECIFIED ?               GP04057
         BNZ   DATEOUT2      YES; CONVERT                       GP04057
         MVC   0(7,R1),=7C'0'  SHOW NOTHING SET                 GP04057
         BR    R14           RETURN TO CALLER                   GP04057
DATEOUT2 SLR   R15,R15       CLEAR WORK REG                     GP04057
         IC    R15,0(,R2)    INSERT YEAR                        GP04057
         AH    R15,=H'1900'  MAKE CORRECT CENTURY               GP04057
         CVD   R15,DWORD     AND CONVERT TO DECIMAL             GP04057
         OI    DWORD+7,15    ENSURE PRINTABLE SIGN              GP04057
         UNPK  0(4,R1),DWORD  AND MOVE TO TARGET FIELD          GP04057
         ICM   R15,B'0011',1(R2)  INSERT DAY OF YEAR            GP04057
         CVD   R15,DWORD     AND CONVERT TO DECIMAL             GP04057
         OI    DWORD+7,15    ENSURE PRINTABLE SIGN              GP04057
         UNPK  4(3,R1),DWORD  AND MOVE TO TARGET FIELD          GP04057
         BR    R14           RETURN TO CALLER                   GP04057
         EJECT ,
***********************************************************************
*    COPY DSORG INTO PANEL                                            *
***********************************************************************
DONEDATE MVC   PDSORG,ALLNULL          CLEAR FIELD
         L     R15,=A(DSORGTAB)  GET DSORG DEFINITIONS          GP04099
         LA    R0,DSORGCNT   AND NUMBER                         GP04099
ODSORG10 MVC   FWORD(2),DS1DSORG  MOVE DSORG BYTES              GP04099
         NC    FWORD(2),2(R15)    MASK                          GP04099
         CLC   FWORD(2),2(R15)    MATCH ?                       GP04099
         BE    ODSORG20      YES                                GP04099
         LA    R15,4(,R15)                                      GP04099
         BCT   R0,ODSORG10   TRY AGAIN                          GP04099
ODSORG20 MVC   PDSORG(2),0(R15)  SHOW DSORG                     GP04099
         TM    DS1DSORG,DS1DSGU        UNMOVEABLE DATA SET?
         BZ    ODSORG90                    NO, BYPASS MOVE      GP04099
         MVI   PDSORG+2,C'U'               YES, INDICATE SAME
ODSORG90 DS    0H                                               GP04099
         EJECT ,
***********************************************************************
*    COPY RECFM TO PANEL                                              *
***********************************************************************
ORECFM   MVC   PRECFM,ALLNULL          CLEAR FIELD              GP04099
         LA    R14,PRECFM    OUTPUT FIELD                       GP04099
         MVC   FWORD(1),DS1RECFM  MOVE FOR CLOBBERING           GP04099
         L     R15,=A(RECFMTAB)  POINT TO STANDARD TABLE        GP04099
         LA    R0,RECFMCNT   ENTRIES                            GP04099
         TM    DS1RECFM,DS1RECFU       UNDEFINED LENGTH RECORDS?
         BNZ   RECFM010      HANDLE U/F/V                       GP04099
         LA    R15,RECFMTA2-RECFMTAB(,R15)  SPACE TO 'D' TABLE  GP04099
         LA    R0,RECFMCN2   AND USE SHORTER COUNT              GP04099
RECFM010 MVC   FWORD+1(1),FWORD   MOVE TEST BITS                GP04099
         NC    FWORD+1(1),1(R15)  TEST PATTERN                  GP04099
         CLC   FWORD+1(1),1(R15)  TEST PATTERN                  GP04099
         BNE   RECFM020      NOT A MATCH; TRY AGAIN             GP04099
         MVC   0(1,R14),0(R15)  ADD THIS ONE                    GP04099
         LA    R14,1(,R14)   AND BUMP OUTPUT POINTER            GP04099
         MVI   FWORD+2,X'FF'                                    GP04099
         XC    FWORD+2(1),1(R15)  MAKE INVERSE OF TEST BITS     GP04099
         NC    FWORD(1),FWORD+2   PREVENT FALSE MATCHES (E.G. UV)
RECFM020 LA    R15,2(,R15)   NEXT TABLE ENTRY                   GP04099
         BCT   R0,RECFM010   DO UNTIL DONE                      GP04099
         EJECT ,
***********************************************************************
*    COPY LRECL, BLOCKSIZE, KEY LENGTH AND RKP TO PANEL               *
***********************************************************************
PROCLREC CLC   =X'8000',DS1LRECL  BIG, LARGE, UNLIMITED?        GP04099
         BNE   OLRECL10      NO                                 GP04099
         MVC   PLRECL,=CL5'X '  SET FUNNY VBS SIZE              GP04099
         B     OBLKL         DONE                               GP04099
OLRECL10 SLR   R15,R15                 CLEAR WORK REGISTER      GP04099
         ICM   R15,B'0011',DS1LRECL    LOAD THE LRECL
         CVD   R15,DWORD                   AND CONVERT TO DECIMAL
         OI    DWORD+7,15                  ENSURE PROPER SIGN
         UNPK  PLRECL,DWORD                AND MOVE TO TARGET
         SPACE 1
OBLKL    ICM   R15,B'0011',DS1BLKL     LOAD THE BLOCK SIZE      GP04099
         CVD   R15,DWORD                   AND CONVERT TO DECIMAL
         OI    DWORD+7,15              ENSURE PROPER SIGN
         UNPK  PBLKL,DWORD                 AND MOVE TO TARGET FIELD
         SPACE 1
         SLR   R15,R15                 CLEAR WORK REGISTER
         IC    R15,DS1KEYL             LOAD THE KEY LENGTH
         CVD   R15,DWORD                   AND CONVERT TO DECIMAL
         OI    DWORD+7,15                  ENSURE PROPER SIGN
         UNPK  PKEYL,DWORD                 AND MOVE TO TARGET FIELD
         SPACE 1
         ICM   R15,B'0011',DS1RKP      LOAD THE RELATIVE KEY POSITION
         CVD   R15,DWORD                   AND CONVERT TO DECIMAL
         OI    DWORD+7,15                  ENSURE PROPER SIGN
         UNPK  PRKP,DWORD                  AND MOVE TO TARGET FIELD
         SPACE 1
***********************************************************************
*    COPY LAST USED TRACK AND BLOCK INTO PANEL                        *
***********************************************************************
         ICM   R15,B'1110',DS1LSTAR    LOAD LSTAR INTO REG
         LA    R1,6                    BYTES TO PROCESS
         LA    R2,PLSTAR               A(TARGET FIELD)
LSTARLP  DS    0H
         SLR   R14,R14                 CLEAR WORK REG
         SLDL  R14,4                   SHIFT 4 BITS INTO REG14
         STC   R14,0(,R2)                  AND SAVE INTO TARGET
         LA    R2,1(,R2)               BUMP TARGET ADDRESS
         BCT   R1,LSTARLP              LOOP FOR NEXT FOUR BITS
         TR    PLSTAR,TRTAB            TRANSLATE INTO PRINTABLE CHARS
         EJECT ,
***********************************************************************
*    COPY TRACK BALANCE INTO PANEL                                    *
***********************************************************************
         ICM   R15,B'1100',DS1TRBAL    LOAD LSTAR INTO REG
         LA    R1,4                    BYTES TO PROCESS
         LA    R2,PTRBAL               A(TARGET FIELD)
LTRBAL   DS    0H
         SLR   R14,R14                 CLEAR WORK REG
         SLDL  R14,4                   SHIFT 4 BITS INTO REG14
         STC   R14,0(,R2)                  AND SAVE INTO TARGET
         LA    R2,1(,R2)               BUMP TARGET ADDRESS
         BCT   R1,LTRBAL               LOOP FOR NEXT FOUR BITS
         TR    PTRBAL,TRTAB            TRANSLATE INTO PRINTABLE CHARS
         SPACE 1
***********************************************************************
*    COPY SMS INDICATORS INTO PANEL                                   *
***********************************************************************
         ICM   R15,B'1000',DS1SMSFG    LOAD SMS INDICATORS
         LA    R1,2                    BYTES TO PROCESS
         LA    R2,PSMSIND              A(TARGET FIELD)
LSMSIND  DS    0H
         SLR   R14,R14                 CLEAR WORK REG
         SLDL  R14,4                   SHIFT 4 BITS INTO REG14
         STC   R14,0(,R2)                  AND SAVE INTO TARGET
         LA    R2,1(,R2)               BUMP TARGET ADDRESS
         BCT   R1,LSMSIND              LOOP FOR NEXT FOUR BITS
         TR    PSMSIND,TRTAB           TRANSLATE INTO PRINTABLE CHARS
         SPACE 1
***********************************************************************
*    COPY DATA SET INDICATORS INTO PANEL                              *
***********************************************************************
         ICM   R15,B'1000',DS1DSIND    LOAD DS INDICATORS
         LA    R1,2                    BYTES TO PROCESS
         LA    R2,PDSIND               A(TARGET FIELD)
LDSIND   DS    0H
         SLR   R14,R14                 CLEAR WORK REG
         SLDL  R14,4                   SHIFT 4 BITS INTO REG14
         STC   R14,0(,R2)                  AND SAVE INTO TARGET
         LA    R2,1(,R2)               BUMP TARGET ADDRESS
         BCT   R1,LDSIND               LOOP FOR NEXT FOUR BITS
         TR    PDSIND,TRTAB            TRANSLATE INTO PRINTABLE CHARS
         SPACE 1
***********************************************************************
*    COPY OPTCD        INDICATORS INTO PANEL                          *
***********************************************************************
         ICM   R15,B'1000',DS1OPTCD    LOAD OPTCD
         LA    R1,2                    BYTES TO PROCESS
         LA    R2,POPTCD               A(TARGET FIELD)
LOPTCD   DS    0H
         SLR   R14,R14                 CLEAR WORK REG
         SLDL  R14,4                   SHIFT 4 BITS INTO REG14
         STC   R14,0(,R2)                  AND SAVE INTO TARGET
         LA    R2,1(,R2)               BUMP TARGET ADDRESS
         BCT   R1,LOPTCD               LOOP FOR NEXT FOUR BITS
         TR    POPTCD,TRTAB            TRANSLATE INTO PRINTABLE CHARS
         EJECT ,
***********************************************************************
*    COPY SECONDARY ALLOCATION INFO INTO PANEL                        *
***********************************************************************
         LA    R15,=C'CylTrkRndBlkAbs'                          GP04099
         TM    DS1SCAL1,DS1CYL         IS IT CYLINDER ALLOCATION?
         BO    SECUNIT                 PROCESS SECONDARY AMOUNT GP04099
         LA    R15,3(,R15)             NEXT TYPE                GP04099
         TM    DS1SCAL1,DS1TRK         IS IT TRACK ALLOCATION?  GP04099
         BO    SECUNIT                 PROCESS SECONDARY AMOUNT GP04099
         LA    R15,3(,R15)             NEXT TYPE                GP04099
         TM    DS1SCAL1,DS1AVRND       IS IT BLOCK ROUND ALLOC? GP04099
         BO    SECUNIT                 PROCESS SECONDARY AMOUNT GP04099
         LA    R15,3(,R15)             NEXT TYPE                GP04099
         TM    DS1SCAL1,DS1AVR         IS IT BLOCK ALLOCATION?  GP04099
         BO    SECUNIT                 PROCESS SECONDARY AMOUNT GP04099
         LA    R15,3(,R15)             NEXT TYPE                GP04099
         TM    DS1SCAL1,255            IS IT ABSOLUTE ALLOCATION?
         BNZ   SCALLAMT                DON'T KNOW ?             GP04099
SECUNIT  MVC   PSCAL1(3),0(R15)        MOVE TYPE                GP04099
         SPACE 1
SCALLAMT SLR   R14,R14                 CLEAR WORK REG           GP04099
         ICM   R14,B'0111',DS1SCAL3    INSERT SECONDARY AMOUNT  GP04099
         CVD   R14,DWORD                   AND CONVERT TO DECIMAL
         OI    DWORD+7,15                  ENSURE PROPER SIGN
         UNPK  PSCAL3,DWORD                AND COPY INTO TARGET AREA
         SPACE 1                                                GP04099
         TM    DS1SCAL1,DS1EXT  NEWFANGLED SECONDARY ?          GP04099
         BZ    SECDONE       NO; USE TRADITIONAL                GP04099
         SR    R14,R14       LOAD VALUE                         GP04099
         ICM   R14,3,DS1SCXTV  GET AMOUNT                       GP04099
         LA    R15,=C'AvBlkMByteKByteBytes*256 65536'           GP04099
         LA    R1,6          MAKE NON-ZERO                      GP04099
         LR    R0,R1         LOOP COUNTER                       GP04099
         ICM   R1,4,DS1SCXTF  GET FLAGS                         GP04099
         SLL   R1,7          FIRST BIT AFTER SIGN               GP04099
SECNEWLP BXH   R1,R1,SECNEWUP  SHIFT, TEST BIT, BRANCH IF OFF   GP04099
         MVC   PSCAL1(5),0(R15)                                 GP04099
         SLR   R14,R14                 CLEAR WORK REG           GP04099
         ICM   R14,B'0011',DS1SCXTV    INSERT SECONDARY AMOUNT  GP04099
         CVD   R14,DWORD                   AND CONVERT TO DECIMAL
         OI    DWORD+7,15                  ENSURE PROPER SIGN   GP04099
         UNPK  PSCAL5,DWORD                AND COPY INTO TARGET AREA
         B     SECDONE                                          GP04099
SECNEWUP LA    R15,5(,R15)   BUMP TYPE                          GP04099
         BCT   R0,SECNEWLP   TRY AGAIN                          GP04099
         SPACE 1                                                GP04099
SECDONE  TM    MISCFLAG,ENQUEUE        IS DATA SET AVAILABLE?   GP04099
         BZ    TPUTPANL                    YES, PROCESS IT
         LA    R15,ENQERMSG                NO, INFORM TERMINAL OPER
         SPACE 1
***********************************************************************
*    COPY ERROR MESSAGE ONTO PANEL - R15 ADDRESSES THE ERROR MSG      *
***********************************************************************
PROCEMSG DS    0H                      POS, MOVE MESSAGE TO PANEL
         MVC   PERRMSG,ALLBLANK        CLEAR TARGET FIELD
         LA    R14,PERRMSG             A(TARGET FOR ERROR MESSAGE)
         LA    R2,L'PERRMSG                LENGTH OF SAME
         LH    R1,0(,R15)              LOAD LENGTH OF MESSAGE TO DISPLY
         CR    R1,R2                   GREATER THAN MAXIMUM?
         BNH   MSG010                      NO, CONTINUE
         LR    R1,R2                       YES, LOAD MAXIMUM LENGTH
MSG010   DS    0H
         SR    R2,R1                   COMPUTE REMAINDER
         BNP   MSG020                  BYPASS NEXT TWO INSTRS IF NEG
         SRL   R2,1                    DIVIDE BY TWO
         AR    R14,R2                  CENTER ERROR MESSAGE
MSG020   DS    0H
         BCTR  R1,00                   DECREMENT FOR EXECUTE
         EX    R1,MVCERMSG             MOVE ERROR MESSAGE
         EJECT ,
***********************************************************************
*    DISPLAY PANEL                                                    *
***********************************************************************
TPUTPANL DS    0H
         LA    R0,LPDSCBL              A(LENGTH OF PANEL)
         LA    R1,DSCBPANL             A(DSCB PANEL)
         TPUT  (1),(0),FULLSCR         WRITE PANEL TO TERMINAL
         SPACE 1
***********************************************************************
*    RETRIEVE USER'S INPUT                                            *
***********************************************************************
         XC    INPUT(256),INPUT              CLEAR FIRST HALF OF WORK
         XC    INPUT+256(256),INPUT+256      CLEAR LAST HALF OF WORK
         LA    R0,L'INPUT              A(LENGTH OF INPUT AREA)
         LA    R1,INPUT                A(INPUT AREA)
         TGET  (1),(0),ASIS            GET INPUT FROM TERMINAL
         SPACE 1
         CLI   INPUT,PA2KEY            REDISPLAY REQUESTED?
         BE    TPUTPANL                    YES, REDISPLAY
         SPACE 1
         CLI   INPUT,PFKEY03           TERMINATION REQUESTED?
         BE    ENDDSNS                     YES, TERMINATE EXECUTION
         CLI   INPUT,PFKEY15           TERMINATION REQUESTED?
         BE    ENDDSNS                     YES, TERMINATE EXECUTION
         SPACE 1
         MVC   DSCBPCSR,DEFCSRAD       RESET IC TO DEFAULT CUSOR ADDR
         MVC   PERRMSG,ALLBLANK        CLEAR ERROR MESSAGE
         MVC   PERRMS2,ALLBLANK        CLEAR ERROR MESSAGE      GP04099
         LTR   R5,R1                   SAVE LENGTH OF TGET DATA GP04061
         BZ    BADIO                                            GP04061
         LA    R4,INPUT                PRELOAD DATA ADDRESS
         NI    MISCFLAG,NSHARED+ENQUEUE    RESET ALL BUT REQ'D BITS
         EJECT ,
***********************************************************************
*        PROCESS INPUT KEYED IN BY USER                               *
*        INPUT REGS:                                                  *
*              REG 04 CONTAINS THE CURRENT ADDR OF BUFFER INPUT       *
*              REG 05 CONTAINS THE REMAINING LENGTH OF BUFFER INPUT   *
*        OUTPUT REGS:                                                 *
*              REG 00 CONTAINS THE ACTUAL LENGTH OF KEYED INPUT DATA  *
*              REG 01 CONTAINS THE ADDRESS OF KEYED INPUT DATA        *
*              REG 02 CONTAINS THE LENGTH -1 OF KEYED INPUT DATA      *
*              REG 04 CONTAINS THE CURRENT ADDR OF BUFFER INPUT       *
*              REG 05 CONTAINS THE REMAINING LENGTH OF BUFFER INPUT   *
*              REG 06 CONTAINS THE ADDR OF THE MATCHING BUFFTAB ENTRY *
*              REG 07 CONTAINS THE LENGTH OF A BUFFTAB ENTRY          *
***********************************************************************
         SPACE 2
***********************************************************************
*    LOCATE NEXT INPUT FIELD, LENGTH AND MATCHING TABLE ENTRY         *
***********************************************************************
INPUT000 DS    0H                      HERE TO PROCESS INPUT DATA
         LA    R6,PDSCBL-2             A(HALFWORD COUNT OF ENTRIES)
         LA    R7,PDSCBLEL             A(ENTRY LENGTH)
         LA    R15,TABLE000            A(INPUT DEPROCESSOR)
         BALR  R14,R15                 PROCESS INPUT DATA
         B     INPUT200                ALL DATA PROCESSED
         SPACE 1
         LTR   R6,R6                   MATCHING ENTRY?
         BNZ   INPUT100                YES, PROCESS IT
*  POSSIBLE ERROR AT THIS POINT  WHAT TO DO, WHAT TO DO?
         B     INPUT000                NO BUFFTAB ENTRY, PROCESS NEXT
         SPACE 1
***********************************************************************
*    RESET ATTRIBUTE BYTE TO NORMAL INTENSITY, UNPROTECTED            *
***********************************************************************
INPUT100 DS    0H                      HERE TO PROCESS INPUT DATA
         LH    R15,2(,R6)              LOAD FIELD OFFSET
         LA    R15,DSCBPANL(R15)           AND ADDRESS FIELD
         BCTR  R15,00                  BACK UP TO THE ATTRIBUTE
         NI    0(R15),64               AND OFF HIGHLIGHT ATTRIBUTE
         SPACE 1
***********************************************************************
*     LOAD A(ROUTINE) TO PROCESS DATA AND BASR. (IF NOT ERASE INPUT)  *
***********************************************************************
         LTR   R0,R0                   ERASE EOF INPUT FIELD?
         BNP   INPUT000                YES, GET NEXT FIELD
         EX    R2,INPUTOC              ENSURE UPPER CASE
         LH    R15,6(,R6)              Y(OFFSET INTO ROUTINE TBL)
         SLL   R15,2                       MULTIPLY BY 4
         A     R15,=A(TABTABLE)   A(ROUTINE TO DEPROCESS INPUT) GP04057
         L     R15,0(,R15)   LOAD ROUTINE ADDRESS               GP04058
         BALR  R14,R15                     AND CALL SAME
         B     INPUT000
         SPACE 2
INPUTOC  OC    0(0,R1),ALLBLANK        CONVERT TO UPPER CASE
         EJECT ,
***********************************************************************
*    TEST FOR MODIFIED FILED(S) AND PROCESS ACCORDINGLY               *
***********************************************************************
INPUT200 DS    0H                      HERE AFTER END-OF-INPUT
         TM    MISCFLAG,IPTDSNAM+IPTVOL  EITHER FIELD MODIFIED? GP04099
         BZ    INPUT300                    NO, CHECK FOR MODIFIED DSCB
         BAL   R10,RSETATTR                YES, RESET ALL ATTRIBUTES
         BAL   R10,CVAFRLSE                YES, RELEASE CVAF BUFFERS
         XC    DS1FMTID(DS1END-DS1FMTID),DS1FMTID  CLEAR DATA   GP04099
         MVC   PCREDT,ALLBLANK                                  GP04101
         MVC   PREFDT,ALLBLANK                                  GP04101
         MVC   PEXPDT,ALLBLANK                                  GP04101
         MVC   PDSORG,ALLBLANK                                  GP04101
         MVC   PRECFM,ALLBLANK                                  GP04101
         MVC   PLRECL,ALLBLANK                                  GP04101
         MVC   PBLKL,ALLBLANK                                   GP04101
         MVC   PKEYL,ALLBLANK                                   GP04101
         MVC   PRKP,ALLBLANK                                    GP04101
         MVC   PLSTAR,ALLBLANK                                  GP04101
         MVC   PTRBAL,ALLBLANK                                  GP04101
         MVC   PSMSIND,ALLBLANK                                 GP04101
         MVC   PDSIND,ALLBLANK                                  GP04101
         MVC   POPTCD,ALLBLANK                                  GP04101
         MVC   PSCAL1,ALLBLANK                                  GP04101
         MVC   PSCAL3,ALLBLANK                                  GP04101
         MVC   PSCAL5,ALLBLANK                                  GP04101
         MVC   PERRMS2,ALLBLANK                                 GP04101
         TM    MISCFLAG,IPTDSNAM       DSNAME MODIFIED?
         BO    CHECKDSN                    YES, GO LOCATE DATA SET
         TM    MISCFLAG,IPTVOL         VOLUME SERIAL MODIFIED?  GP04058
         BO    UCBLKPLP                    YES, GO LOOKUP UCB   GP04058
INPUT300 DS    0H
         TM    MISCFLAG,IPTERROR       WAS THERE AN ERROR?
         BO    TPUTPANL                    GO DISPLAY A MESSAGE
         TM    MISCFLAG,DSCBMOD        WAS THE DSCB MODIFIED?
         LA    R15,WHATTODO                NO, PROMPT TERM OP FOR INPUT
         BZ    PROCEMSG                    GO DISPLAY A MESSAGE
***********************************************************************
*    REWRITE THE DSCB INTO THE VTOC                                   *
***********************************************************************
         CVAFDIR ACCESS=WRITE,MF=(E,CVAFREQ),BRANCH=(YES,PGM),         *
               BUFLIST=CVAFBUF,DSN=DS1DSNAM                     GP04057
         LTR   R15,R15                 WAS WRITE SUCCESSFUL?
         BNZ   CVAFPROC                    NO, GO LOAD IN ERROR MESSAGE
         LA    R15,DSCBMSG1                YES, ADDRESS SUCCESSFUL MSG
         B     PROCEMSG                REDISPLAY PANEL
         EJECT ,
ENDDSNS  DS    0H
***********************************************************************
*    TERMINATE FULL SCREEN PROCESSING                                 *
***********************************************************************
         STLINENO LINE=1               SET NEXT LINE TO 1
         SPACE 1
         STFSMODE OFF                  RESET FROM FULL SCREEN PROCESS
         SPACE 1
***********************************************************************
*    RELEASE CVAF BUFFERS                                             *
***********************************************************************
         BAL   R10,CVAFRLSE            RELEASE CVAF BUFFERS
         SPACE 1
***********************************************************************
*    TERMINATE PROGRAM                                                *
***********************************************************************
RETURN   SERVICE APFOF                                          GP04057
         SERVTERM ,          FREE STUFF                         GP04057
         PGMEXIT RC=0        AND GET OUT                        GP04057
         SPACE 1
BADBOY   DS    0H
         TPUT  =CL50'YOU ARE NOT AUTHORIZED TO USE THIS',50     GP04057
         B     RETURN
MVCERMSG MVC   0(0,R14),2(R15)         EXECUTED MOVE
         SPACE 1                                                GP04061
BADIO    TPUT  MSGBADIO,L'MSGBADIO                              GP04061
         WTO   TEXT=MSGBADIL,ROUTCDE=11                         GP04061
         ABEND 001,DUMP                                         GP04061
MSGBADIL DC    AL2(L'MSGBADIO)                                  GP04061
MSGBADIO DC    C'TGET FAILED *** TERMINATED'                    GP04061
         EJECT ,                                                GP04057
***********************************************************************
*  PARSEDSN: THIS ROUTINE (INCORRECTLY) PARSES A DATA SET NAME IN THE *
*     EXTRACTED STRING 'PARMWORD'.  PARMWLEN HAS THE STRING LENGTH -1 *
*     UNQUOTED STRINGS ARE PREFIXED                                   *
***********************************************************************
PARSEDSN STM   R14,R8,12(R13) SAVE USER'S REGISTERS             GP04057
         SR    R4,R4                                            GP04057
         IC    R4,PARMWLEN   GET LENGTH-1 OF DSN                GP04057
         MVC   DS1DSNAM,ALLBLANK  CLEAR                         GP04058
         LA    R7,DS1DSNAM   SET MOVE DESTINATION               GP04057
         SPACE 1                                                GP04057
         CLI   PARMWORD,C''''  LOOK FOR QUOTES                  GP04057
         BNE   PARSENQU            IF NOT, MUST ADD TSO ID      GP04057
         SH    R4,=H'2'      ALLOW FOR START AND END QUOTE      GP04057
         BM    ERRBDDEL        TOO SHORT; TOO BAD               GP04057
         LA    R2,PARMWORD+2(R4)  POINT TO END OF STRING        GP04057
         CLI   0(R2),C''''   MATCHING END QUOTE?                GP04057
         BNE   ERRBDDEL      NO; TOO BAD                        GP04057
         SR    R3,R3         SET PREFIX LENGTH                  GP04057
         LA    R8,PARMWORD+1 SAVE START MOVE ADDRESS            GP04057
         B     PARSECOM      JOIN COMMON CODE                   GP04057
         SPACE 1                                                GP04057
PARSENQU LA    R8,PARMWORD   SET MOVE SOURCE                    GP04057
         SR    R3,R3                                            GP04057
         ICM   R3,1,PREFLEN  GET THE PREFIX LENGTH              GP04057
         BZ    PARSECOM      MOVE AS IS                         GP04057
         EX    R3,EXMVCPFX   MOVE IN THE USER'S PREFIX + 1      GP04058
         AR    R7,R3         SET MOVE DESTINATION               GP04057
         CLI   PARMWORD,C'.'  DID USER START WITH PERIOD?       GP04057
         BE    PARSECOM      ZOUNDS                             GP04057
         MVI   0(R7),C'.'          QUALIFY THE D.S. NAME        GP04057
         LA    R7,1(,R7)     SET NEW MOVE DESTINATION           GP04057
         LA    R3,1(,R3)     PREFIX LENGTH                      GP04057
PARSECOM AR    R3,R4         COMBINED LENGTH-1                  GP04057
         LA    R2,L'DS1DSNAM AND COMPARE TO LEGAL MAXIMUM       GP04057
         CR    R3,R2                                            GP04057
         BNL   LONGDSN       TOO BAD                            GP04057
         EX    R4,EXMVCDSN        AND MOVE IN THE REST          GP04057
         LOCBYTE DS1DSNAM    FIND LENGTH                        GP04058
         SR    R15,R14                                          GP04058
         STH   R15,LDSNAME                                      GP04058
         MVC   PDSNAME(L'DS1DSNAM+2),ALLBLANK                   GP04058
         MVI   PDSNAME,C''''  MAKE LEADING QUOTE                GP04058
         LA    R1,PDSNAME+1(R15)  END OF DSN                    GP04058
         MVI   0(R1),C''''    MAKE END QUOTE                    GP04058
         BCTR  R15,0                                            GP04058
         EX    R15,EXMVCDS1   MOVE UNQUOTED TEXT                GP04058
         LM    R14,R8,12(R13) RESTORE USER'S REGISTERS          GP04057
         BR    R14                 AND GO BACK                  GP04057
EXMVCDSN MVC   0(0,R7),0(R8)  MOVE USER'S DSN OR FRAGMENT       GP04057
EXMVCSER MVC   PVOLSER(0),PARMWORD  COPY SERIAL                 GP04058
EXMVCDS1 MVC   PDSNAME+1(0),DS1DSNAM                            GP04058
EXMVC2DS MVC   DS1DSNAM(0),PDSNAME+1  MOVE UNQUOTED             GP04058
EXMVCPFX MVC   0(0,R7),PREFIX      MOVE IN THE USER'S PREFIX    GP04057
EXMVCINT MVC   0(0,R15),0(R1)  RIGHT-JUSTIFY INPUT FIELD        GP04099
         SPACE 2                                                GP04057
***********************************************************************
*  PARSEWRD: THIS ROUTINE EXTRACTS AND CONVERTS TO UPPER CASE ONE     *
*     'WORD' OF INPUT TEXT.  RECOGNIZES BLANK, COMMA, AND RIGHT PAR.  *
***********************************************************************
PARSEWRD STM   R2,R8,28(R13) SAVE USER'S REGISTERS              GP04057
         MVC   PARMWORD,ALLBLANK  CLEAR                         GP04057
         LM    R15,R1,PARSEPTR   RECALL START LOCATION          GP04058
         LR    R8,R1         PRESERVE STOP ADDRESS              GP04057
PARSEWLP LR    R7,R8         GET END ADDRESS                    GP04057
         SR    R7,R15        LESS START                         GP04057
         BM    PARSEWND      NOTHING                            GP04057
         LA    R0,256        SET SEGMENT LENGTH                 GP04057
PARSEWFB EX    R7,EXTRTNB    FIND A NON-BLANK                   GP04057
         BNZ   PARSESTR      HAVE ONE                           GP04057
         AR    R15,R0        POINT TO NEXT SEGMENT              GP04057
         SR    R7,R0         AND TRY AGAIN                      GP04057
         BNM   PARSEWFB      IN NEW SEGMENT                     GP04057
         B     PARSEWND      NO MORE TO DO                      GP04057
PARSESTR LR    R3,R1         PRESERVE START ADDRESS             GP04057
         LR    R7,R8         GET END ADDRESS                    GP04057
         SR    R7,R1         LESS START                         GP04057
         LR    R15,R1        SET START SCAN ADDRESS             GP04057
         LA    R2,L'PARMWORD  SET ANTICIPATED MAXIMUM LENGTH    GP04057
         CR    R7,R2         USE SHORTER OF THE TWO             GP04057
         BL    *+6                                              GP04057
         LR    R7,R2         TRUNCATE                           GP04057
         LA    R1,1(R7,R15)  POINT TO LAST LEGAL ADDRESS +1     GP04057
         SLR   R2,R2                                            GP04057
         TRT   0(1,R15),TRTNBLNK  SEE WHETHER THIS IS A SEPARATOR
         BZ    PARSERST      NO; DO NORMALLY                    GP04057
         LA    R1,1(,R15)    ENSURE LENGTH OF ONE               GP04057
         B     PARSESEP      AND SKIP FULL LOAD                 GP04057
PARSERST EX    R7,EXTRTBL    FIND A BLANK OR SEPARATOR          GP04057
PARSESEP ST    R1,PARSEPTR   SAVE PARSE RESTART ADDRESS         GP04058
         LR    R15,R1        SET RETURN ADDRESS                 GP04057
         SR    R1,R3         LENGTH OF PARSED STRING            GP04057
         BNP   PARSEWLP      NIL - TRY AGAIN                    GP04057
         BCTR  R1,0                                             GP04057
         EX    R1,EXOCPRM    MOVE AND UPPER-CASE PARM WORD      GP04057
         STC   R1,PARMWLEN   SAVE LENGTH(-1)                    GP04057
         LM    R2,R8,28(R13) RESTORE USER'S REGISTERS           GP04057
         B     4(,R14)              AND GO BACK WITH WORD       GP04057
PARSEWND LM    R2,R8,28(R13) RESTORE USER'S REGISTERS           GP04057
         BR    R14                 AND GO BACK                  GP04057
EXTRTNB  TRT   0(0,R15),TRTBLANK  LOOK FOR A NON-BLANK          GP04057
EXTRTBL  TRT   0(0,R15),TRTNBLNK  LOOK FOR A BLANK OR SEPARATOR GP04057
EXOCPRM  OC    PARMWORD(0),0(R3)  MOVE INDENTIFIED WORD         GP04057
         EJECT ,
***********************************************************************
*    THIS ROUTINE WILL PROCESS A MODIFIED DATA SET NAME.              *
*    NOTE: IF A DATA SET NAME IS ENTERED BY THE USER, ALL REMAINING   *
*     INPUT, EXCEPT FOR VOLSER, WILL BE IGNORED.                      *
***********************************************************************
IDSNAME  DS    0H
         OI    MISCFLAG,IPTDSNAM       INDICATE DSN HAS BEEN INPUT
         MVC   PDSNAME,ALLBLANK        MOVE IN SPACES           GP04061
         EX    R2,IDSNMVC2             MOVE DSN INTO PANEL
         BR    R14
IDSNMVC2 MVC   PDSNAME(0),0(R1)        MOVE DATA SET NAME       GP04061
         EJECT ,
***********************************************************************
*    THIS ROUTINE WILL PROCESS A VOLUME SERIAL NUMBER.                *
*    NOTE: IF A VOLUME SERIAL IS ENTERED BY THE USER, ALL REMAINING   *
*     INPUT, EXCEPT FOR DATA SET NAME, WILL BE IGNORED.               *
***********************************************************************
IVOLSER  DS    0H
         OI    MISCFLAG,IPTVOL         INDICATE VOLSER ENTERED  GP04061
         MVC   PVOLSER,ALLBLANK        CLEAR TARGET FIELD       GP04061
         EX    R2,IVOLMVC                  AND MOVE IN VOLSER
         CLC   PVOLSER,ALLBLANK   DID USER BLANK IT OUT ?       GP04061
         BNER  R14                NO; ACCEPT IT                 GP04061
         OI    MISCFLAG,IPTDSNAM  FORCE CATALOG LOOKUP          GP04061
         BR    R14
IVOLMVC  MVC   PVOLSER(0),0(R1)        EXECUTED MVC
         SPACE 1
***********************************************************************
*    THIS ROUTINE WILL PROCESS A MODIFIED CREATION DATE.              *
***********************************************************************
ICREDT   DS    0H
         MVC   PCREDT,ALLNULL          CLEAR TARGET FIELD
         EX    R2,ICREMVC1             MOVE DATA TO PANEL
         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS
         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)
         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN
         CH    R0,=H'7'                CORRECT LENGTH?          GP04057
         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)
         BNE   FLDERROR                    NO, REDISPLAY SCREEN
         PACK  DWORD,0(4,R1)           PACK YEAR                GP04057
         CVB   R15,DWORD                   CONVERT TO BINARY
         LTR   R15,R15                                          GP04057
         BZ    *+8                                              GP04057
         SH    R15,=H'1900'  REMOVE CENTURY                     GP04057
         STC   R15,DS1CREDT                AND SAVE IN TARGET FIELD
         PACK  DWORD,4(3,R1)           PACK DAY                 GP04057
         CVB   R15,DWORD                   CONVERT TO BINARY
         STCM  R15,B'0011',DS1CREDT+1      AND SAVE IN TARGET FIELD
         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED
         EX    R2,NUMBPACK             PACK CREATION DATE
         UNPK  PCREDT,DWORD                AND UNPACK INTO FIELD
         BR    R14                     RETURN TO CALLER
ICREMVC1 MVC   PCREDT(0),0(R1)         EXECUTED MVC
         EJECT ,
***********************************************************************
*    THIS ROUTINE WILL PROCESS A MODIFIED REFERENCE DATE.             *
***********************************************************************
IREFD    DS    0H
         MVC   PREFDT,ALLNULL          CLEAR TARGET FIELD
         EX    R2,IREFMVC1             MOVE DATA TO PANEL
         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS
         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)
         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN
         CH    R0,=H'7'                CORRECT LENGTH?          GP04057
         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)
         BNE   FLDERROR                    NO, REDISPLAY SCREEN
         PACK  DWORD,0(4,R1)           PACK YEAR                GP04057
         CVB   R15,DWORD                   CONVERT TO BINARY
         LTR   R15,R15                                          GP04057
         BZ    *+8                                              GP04057
         SH    R15,=H'1900'  REMOVE CENTURY                     GP04057
         STC   R15,DS1REFD                 AND SAVE IN TARGET FIELD
         PACK  DWORD,4(3,R1)           PACK YEAR                GP04057
         CVB   R15,DWORD                   CONVERT TO BINARY
         STCM  R15,B'0011',DS1REFD+1       AND SAVE IN TARGET FIELD
         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED
         EX    R2,NUMBPACK             PACK REFERENCE DATE
         UNPK  PREFDT,DWORD                AND UNPACK INTO FIELD
         BR    R14                     RETURN TO CALLER
IREFMVC1 MVC   PREFDT(0),0(R1)         EXECUTED MVC
         SPACE 1
***********************************************************************
*    THIS ROUTINE WILL PROCESS A MODIFIED EXPIRATION DATE.            *
***********************************************************************
IEXPDT   DS    0H
         MVC   PEXPDT,ALLNULL          CLEAR TARGET FIELD
         EX    R2,IEXPMVC1             MOVE DATA TO PANEL
         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS
         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)
         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN
         CH    R0,=H'7'                CORRECT LENGTH?          GP04057
         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)
         BNE   FLDERROR                    NO, REDISPLAY SCREEN
         PACK  DWORD,0(4,R1)           PACK YEAR                GP04057
         CVB   R15,DWORD                   CONVERT TO BINARY
         LTR   R15,R15                                          GP04057
         BZ    *+8                                              GP04057
         SH    R15,=H'1900'  REMOVE CENTURY                     GP04057
         STC   R15,DS1EXPDT                AND SAVE IN TARGET FIELD
         PACK  DWORD,4(3,R1)           PACK YEAR                GP04057
         CVB   R15,DWORD                   CONVERT TO BINARY
         STCM  R15,B'0011',DS1EXPDT+1      AND SAVE IN TARGET FIELD
         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED
         EX    R2,NUMBPACK             PACK EXPIRATION DATE
         UNPK  PEXPDT,DWORD                AND UNPACK INTO FIELD
         BR    R14                     RETURN TO CALLER
IEXPMVC1 MVC   PEXPDT(0),0(R1)         EXECUTED MVC
         EJECT ,
***********************************************************************
*    THIS ROUTINE WILL PROCESS A MODIFIED DATA SET ORGANIZATION.      *
***********************************************************************
IDSORG   MVC   PDSORG,ALLNULL          CLEAR TARGET FIELD       GP04099
         EX    R2,IDSOMVC1             MOVE INTO PANEL
         CH    R0,=H'2'                CORRECT LENGTH?
         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)
         BL    FLDERROR                    NO, REDISPLAY SCREEN
         L     R8,=A(DSORGTAB)    A(DSORG TABLE)                GP04057
         LA    R9,DSORGCNT             A(ENTRY COUNT OF SAME)
IDSORG00 CLC   0(2,R8),0(R1)           COMPARE TABLE ENTRY TO INPUT
         BE    IDSORG10                    IF EQUAL, PROCESS
         LA    R8,DSORGLNG(,R8)        BUMP TO NEXT ENTRY
         BCT   R9,IDSORG00                 AND GO CHECK THAT ONE
         LA    R15,DSORGER1            A(DSORG ERROR MESSAGE)
         B     FLDERROR
         SPACE 1                                                GP04099
IDSORG10 MVC   DS1DSORG,2(R8)          MOVE IN NEW DSORG        GP04099
         CH    R0,=H'3'                WAS UNMOVABLE SPECIFIED?
         BL    IDSORG20                    NO, DONE             GP04099
         CLI   2(R1),C' '              IS THIS A BLANK          GP04099
         BE    IDSORG20                    YES, NOT UNMOVEABLE
         CLI   2(R1),C'U'              IS IT UNMOVEABLE?
         LA    R15,DSORGER1                NO, INDICATE BAD DSORG
         BNE   FLDERROR                      AND REDISPLAY SCREEN
         OI    DS1DSORG,DS1DSGU        INDICATE UNMOVEABLE      GP04099
         SPACE 1                                                GP04099
IDSORG20 OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED   GP04099
         BR    R14
IDSOMVC1 MVC   PDSORG(0),0(R1)         EXECUTED MOVE
         EJECT ,
***********************************************************************
*    THIS ROUTINE WILL PROCESS A MODIFIED RECORDING FORMAT.           *
***********************************************************************
IRECFM   MVC   PRECFM,ALLNULL          CLEAR TARGET FIELD       GP04099
         EX    R2,IRECMVC1             MOVE TO PANEL
         LR    R10,R0                  A(COUNT OF CHARS IN INPUT)
         XC    FWORD,FWORD             CLEAR WORK FIELD
IRECFM00 L     R8,=A(RECFMTAB)    A(RECFM TABLE)                GP04057
         LA    R9,RECFMCNT             A(ENTRY COUNT OF SAME)
         CLI   PRECFM,C'D'   D FORMAT ?                         GP04099
         BNE   IRECFM05                                         GP04099
         LA    R8,RECFMTA2   YES; USE ALTERNATE LIST            GP04099
         LA    R9,RECFMCN2   AND COUNT                          GP04099
IRECFM05 DS    0H
         CLI   0(R1),C' '              IS THIS A BLANK?         GP04099
         BE    IRECFM25                    YES, BYPASS IT THEN
         SPACE 1
IRECFM10 DS    0H
         CLC   0(1,R8),0(R1)           MATCHING ENTRY?
         BE    IRECFM20                    YES, PROCESS
         LA    R8,RECFMLNG(,R8)            NO, BUMP TO NEXT ENTRY
         BCT   R9,IRECFM10                 AND GO PROCESS IT
         LA    R15,RECFMER1            A(INVALID RECFM INPUT)
         B     FLDERROR                    AND GO PROCESS ERROR
IRECFM20 DS    0H
         OC    FWORD(1),1(R8)          SAVE THIS BIT
IRECFM25 DS    0H
         LA    R1,1(,R1)               BUMP TO NEXT BYTE
         BCT   R10,IRECFM00            PROCESS NEXT BYTE OF INPUT
         SPACE 1
         LA    R15,RECFMER1            PRELOAD INVALID RECFM INPUT MSG
         TM    FWORD,DS1RECFU          WAS UNDEFINED SPECIFID?
         BNO   IRECFM30                NO, BYPASS NEXT TEST
         TM    FWORD,255-DS1RECFU-DS1RECFA-DS1RECMC     ANY OTHERS?
         BNZ   FLDERROR                    YES, ERRONOUS INPUT
IRECFM30 DS    0H
         OC    FWORD(1),FWORD          TEST FOR ANY INPUT
         BZ    FLDERROR                    IF ZERO, INDICATE ERROR
         SPACE 1
         XC    DS1RECFM,DS1RECFM       RESET RECORDING FORMAT
         OC    DS1RECFM,FWORD              AND SET NEW VALUE
         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED
         BR    R14                     RETURN TO CALLER
IRECMVC1 MVC   PRECFM(0),0(R1)         EXECUTED MVC
         EJECT ,
***********************************************************************
*    THIS ROUTINE WILL PROCESS A MODIFIED LOGICAL RECORD LENGTH.      *
***********************************************************************
ILRECL   LTR   R2,R2         LENGTH=1 ?                         GP04099
         BNE   ILRECL10      NO                                 GP04099
         CLI   0(R1),C'X'    LRECL=X ?                          GP04099
         BNE   ILRECL10      NO                                 GP04099
         MVC   DS1LRECL,=X'8000'  SET SPECIAL                   GP04099
         MVC   PLRECL,=CL5'X'  SHOW WEIRD                       GP04099
         B     ILRECL90                                         GP04099
ILRECL10 MVC   PLRECL,ALLEGG           CLEAR TARGET FIELD       GP04099
         ININT PLRECL                  MOVE DATA TO PANEL       GP04099
         TRT   PLRECL,NUMTAB           TEST FOR VALID NUMERICS  GP04099
         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)
         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN
         EX    R2,NUMBPACK             PACK LRECL
         UNPK  PLRECL,DWORD                AND UNPACK INTO FIELD
         CVB   R15,DWORD               CONVERT TO BINARY
         STCM  R15,B'0011',DS1LRECL        AND UPDATE DSCB
ILRECL90 OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED   GP04099
         BR    R14                     RETURN TO CALLER
         SPACE 1
***********************************************************************
*    THIS ROUTINE WILL PROCESS A MODIFIED BLOCK SIZE.                 *
***********************************************************************
IBLKL    MVC   PBLKL,ALLEGG            CLEAR TARGET FIELD       GP04099
         ININT PBLKL                   MOVE DATA TO PANEL       GP04099
         TRT   PBLKL,NUMTAB            TEST FOR VALID NUMERICS  GP04099
         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)
         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN
         EX    R2,NUMBPACK             PACK BLKL
         UNPK  PBLKL,DWORD                 AND UNPACK INTO FIELD
         CVB   R15,DWORD               CONVERT TO BINARY
         STCM  R15,B'0011',DS1BLKL         AND UPDATE DSCB
         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED
         BR    R14                     RETURN TO CALLER
         EJECT ,
***********************************************************************
*    THIS ROUTINE WILL PROCESS A MODIFIED KEY LENGTH.                 *
***********************************************************************
IKEYL    MVC   PKEYL,ALLEGG            CLEAR TARGET FIELD       GP04099
         ININT PKEYL                   MOVE DATA TO PANEL       GP04099
         TRT   PKEYL,NUMTAB            TEST FOR VALID NUMERICS  GP04099
         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)
         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN
         EX    R2,NUMBPACK             PACK KEYL
         UNPK  PKEYL,DWORD                 AND UNPACK INTO FIELD
         CVB   R15,DWORD               CONVERT TO BINARY
         STC   R15,DS1KEYL                 AND UPDATE DSCB
         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED
         BR    R14                     RETURN TO CALLER
         SPACE 1
***********************************************************************
*    THIS ROUTINE WILL PROCESS A MODIFIED RELATIVE KEY POSITION.      *
***********************************************************************
IRKP     MVC   PRKP,ALLEGG             CLEAR TARGET FIELD       GP04099
         ININT PRKP                    MOVE DATA TO PANEL       GP04099
         TRT   PRKP,NUMTAB             TEST FOR VALID NUMERICS  GP04099
         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)
         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN
         EX    R2,NUMBPACK             PACK RKP
         UNPK  PRKP,DWORD                  AND UNPACK INTO FIELD
         CVB   R15,DWORD               CONVERT TO BINARY
         STCM  R15,B'0011',DS1RKP          AND UPDATE DSCB
         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED
         BR    R14                     RETURN TO CALLER
         EJECT ,
***********************************************************************
*    THIS ROUTINE WILL PROCESS A MODIFIED LSTAR.                      *
***********************************************************************
ILSTAR   DS    0H
         MVC   PLSTAR,ALLNULL          CLERA TARGET FIELD
         EX    R2,ILSTMVC1             MOVE SAME TO PANEL
         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS
         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG
         BNZ   FLDERROR                    AND INFORM USER
         BAL   R10,CONV2HEX            CONVERT TO HEXIDECIMAL
         STCM  R3,B'0111',DS1LSTAR     UPDATE DSCB
         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED
         BR    R14                     RETURN TO CALLER
ILSTMVC1 MVC   PLSTAR(0),0(R1)         EXECUTED MOVE
         SPACE 1
***********************************************************************
*    THIS ROUTINE WILL PROCESS A MODIFIED TRACK BALANCE.              *
***********************************************************************
ITRBAL   DS    0H
         MVC   PTRBAL,ALLNULL          CLERA TARGET FIELD
         EX    R2,ITRBMVC1             MOVE SAME TO PANEL
         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS
         LA    R15,NUMBERER                IF INVALID, LOAD ERROR MSG
         BNZ   FLDERROR                    AND INFORM USER
         EX    R2,NUMBPACK             PACK RKP
         UNPK  PTRBAL,DWORD                AND UNPACK INTO FIELD
         CVB   R15,DWORD               CONVERT TO BINARY
         STCM  R3,B'0011',DS1TRBAL     UPDATE DSCB
         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED
         BR    R14                     RETURN TO CALLER
ITRBMVC1 MVC   PTRBAL(0),0(R1)         EXECUTED MOVE
         SPACE 1
***********************************************************************
*    THIS ROUTINE WILL PROCESS A MODIFIED SMSIND                      *
***********************************************************************
SMSIND   DS    0H
         MVC   PSMSIND,ALLNULL         CLERA TARGET FIELD
         EX    R2,SMSIMVC1             MOVE SAME TO PANEL
         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS
         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG
         BNZ   FLDERROR                    AND INFORM USER
         BAL   R10,CONV2HEX            CONVERT TO HEXIDECIMAL
         STC   R3,DS1SMSFG                 UPDATE DSCB
         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED
         BR    R14                     RETURN TO CALLER
SMSIMVC1 MVC   PSMSIND(0),0(R1)        EXECUTED MOVE
         SPACE 1
***********************************************************************
*    THIS ROUTINE WILL PROCESS A MODIFIED DSIND.                      *
***********************************************************************
IDSIND   DS    0H
         MVC   PDSIND,ALLNULL          CLERA TARGET FIELD
         EX    R2,IDSIMVC1             MOVE SAME TO PANEL
         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS
         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG
         BNZ   FLDERROR                    AND INFORM USER
         BAL   R10,CONV2HEX            CONVERT TO HEXIDECIMAL
         STC   R3,DS1DSIND                 UPDATE DSCB
         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED
         BR    R14                     RETURN TO CALLER
IDSIMVC1 MVC   PDSIND(0),0(R1)         EXECUTED MOVE
         SPACE 1
***********************************************************************
*    THIS ROUTINE WILL PROCESS A MODIFIED OPTCD                       *
***********************************************************************
IOPTCD   DS    0H
         MVC   POPTCD,ALLNULL          CLERA TARGET FIELD
         EX    R2,IOPTMVC1             MOVE SAME TO PANEL
         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS
         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG
         BNZ   FLDERROR                    AND INFORM USER
         BAL   R10,CONV2HEX            CONVERT TO HEXIDECIMAL
         STC   R3,DS1OPTCD                 UPDATE DSCB
         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED
         BR    R14                     RETURN TO CALLER
IOPTMVC1 MVC   POPTCD(0),0(R1)         EXECUTED MOVE
         EJECT ,
***********************************************************************
*    THIS ROUTINE WILL PROCESS A SECONDARY ALLOC TYPE.                *
***********************************************************************
ISCALL1  MVC   PSCAL1,ALLBLANK         CLEAR TARGET FIELD       GP04101
         EX    R2,ISCAMVC1             MOVE TO PANEL
         L     R8,=A(SCAL1TAB)    A(TABLE OF ACCEPTABLE VALUES) GP04057
         LA    R9,SCAL1CNT             A(COUNT OF SAME)
ISCALL00 CLC   0(3,R8),PSCAL1          ENTRIES EQUAL??          GP04101
         BE    ISCALL90                    IF EQUAL, PROCESS    GP04101
         LA    R8,SCAL1LNG(,R8)            NO, BUMP TO NEXT ENTRY
         BCT   R9,ISCALL00             PROCESS THIS ENTRY
         SPACE 1                                                GP04101
         L     R8,=A(SCAL5TAB)    A(TABLE OF ACCEPTABLE VALUES) GP04057
         LA    R9,SCAL5CNT             A(COUNT OF SAME)         GP04101
ISCALL20 CLC   0(3,R8),PSCAL1          ENTRIES EQUAL??          GP04101
         BE    ISCALL30                    IF EQUAL, PROCESS    GP04101
         LA    R8,SCAL5LNG(,R8)            NO, BUMP TO NEXT ENTRY
         BCT   R9,ISCALL20             PROCESS THIS ENTRY       GP04101
         MVC   PERRMS2(L'SCALHELP),SCALHELP                     GP04101
         LA    R15,SCALLER             A(ADDRESS ERROR MESSABE)
         B     FLDERROR
SCALHELP DC    C'Valid: Cyl Trk Blk Rnd Abs AvBlk MByt KByt Byte 256 65*
               536'                                             GP04101
         SPACE 1                                                GP04101
ISCALL30 MVC   DS1SCXTF,3(R8)              AND MOVE IN NEW TYPE GP04101
         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED   GP04101
         NI    DS1SCAL1,255-(DS1TRK+DS1AVRND)                   GP04101
         OI    DS1SCAL1,DS1EXT         EXTENSION EXISTS         GP04101
         MVC   PSCAL1+3(2),ALLBLANK      CLEAR EXTRANEOUS STUFF GP04101
         BR    R14                     RETURN TO CALLER         GP04101
         SPACE 1                                                GP04101
ISCALL90 NI    DS1SCAL1,255-(DS1TRK+DS1AVRND)                   GP04101
         OC    DS1SCAL1,3(R8)              AND MOVE IN NEW TYPE GP04101
         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED
         MVC   PSCAL1+3(2),ALLBLANK      CLEAR EXTRANEOUS STUFF GP04101
         BR    R14                     RETURN TO CALLER
ISCAMVC1 OC    PSCAL1(0),0(R1)         EXECUTED MVC             GP04101
         SPACE 1
***********************************************************************
*    THIS ROUTINE WILL PROCESS A SECONDARY ALLOC AMOUNT.              *
***********************************************************************
ISCALL3  MVC   DS1SCAL3,ALLEGG         CLEAR TARGET FIELD       GP04099
         ININT DS1SCAL3                MOVE DATA TO PANEL       GP04099
         TRT   DS1SCAL3,NUMTAB         TEST FOR VALID NUMERICS  GP04099
         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)
         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN
         EX    R2,NUMBPACK             PACK SCALL3
         UNPK  PSCAL3,DWORD                AND UNPACK INTO FIELD
         CVB   R15,DWORD               CONVERT TO BINARY
         STCM  R15,B'0111',DS1SCAL3        AND UPDATE DSCB
         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED
         BR    R14                     RETURN TO CALLER
         SPACE 1                                                GP04099
***********************************************************************
*    THIS ROUTINE WILL PROCESS AN EXTENDED SECONDARY ALLOC AMOUNT.    *
***********************************************************************
ISCALL5  MVC   DS1SCXTV,ALLEGG         CLEAR TARGET FIELD       GP04099
         ININT DS1SCXTV                MOVE DATA TO PANEL       GP04099
         TRT   DS1SCXTV,NUMTAB         TEST FOR VALID NUMERICS  GP04099
         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)
         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN
         EX    R2,NUMBPACK             PACK SCALL5              GP04099
         UNPK  PSCAL5,DWORD                AND UNPACK INTO FIELD
         CVB   R15,DWORD               CONVERT TO BINARY        GP04099
         STCM  R15,B'0111',DS1SCXTV        AND UPDATE DSCB      GP04099
         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED   GP04099
         BR    R14                     RETURN TO CALLER         GP04099
         EJECT ,
***********************************************************************
*    CHAR TO HEX CONVERSION ROUTINE                                   *
***********************************************************************
CONV2HEX DS    0H
         LR    R8,R1                   LOAD ADDRESS OF SOURCE VALUE
         LR    R9,R0                   LOAD LOOP COUNTER
         SLR   R3,R3                   CLEAR TARGET REGISTER
LOOP2BIN DS    0H
         SLL   R3,4                    MAKE ROOM FOR NEXT NIBBLE
         SLR   R15,R15                 CLEAR WORK REG
         IC    R15,0(0,R8)             INSERT A BYTE
         N     R15,=F'15'              TURN OFF ALL BUT LAST NIBBLE
         TM    0(R8),240               IS IT NUMERIC
         BO    HEX010                      YES, BYPASS ADD HALFWORD
         AH    R15,=H'9'               ADD 9 IF NOT A NUMBER
HEX010   DS    0H
         OR    R3,R15                  STORE IN RESULT
         LA    R8,1(0,R8)              NEXT TARGET BYTE
         BCT   R9,LOOP2BIN             PROCEED THROUGH FULLWORD
         BR    R10                     RETURN TO CALLER
         SPACE 1
***********************************************************************
*    FIELD ERROR PROCESSING ROUTINE                                   *
*    ON INPUT: R15 = A(ERROR MESSAGE AREA)                            *
*             ALL OTHER REGISTERS ARE THE SAME AS UPON INPUT TO A     *
*             FIELD DE-PROCESSING ROUTINE.                            *
***********************************************************************
FLDERROR DS    0H
         TM    MISCFLAG,IPTERROR       MORE THAN ONE ERROR?
         BO    FLDERR10                    YES, BYPASS MESSAGE MOVE
         OI    MISCFLAG,IPTERROR           NO, SET ERROR FLAG
         MVC   DSCBPCSR,0(R6)          ALTER THE IC BUFF ADDR
         MVC   PERRMSG,ALLBLANK        CLEAR TARGET FIELD
         LA    R10,PERRMSG             A(TARGET FOR ERROR MESSAGE)
         LA    R8,L'PERRMSG                LENGTH OF SAME
         LH    R9,0(,R15)              LOAD LENGTH OF MESSAGE TO DISPLY
         CR    R9,R8                   GREATER THAN MAXIMUM?
         BNH   FLD010                      NO, CONTINUE
         LR    R9,R8                       YES, LOAD MAXIMUM LENGTH
FLD010   DS    0H
         SR    R8,R9                   COMPUTE REMAINDER
         BNP   FLD020                  BYPASS NEXT TWO INSTRS IF NEG
         SRL   R8,1                    DIVIDE BY TWO
FLD020   DS    0H
         LA    R10,0(R8,R10)           CENTER ERROR MESSAGE
         BCTR  R9,00                   DECREMENT FOR EXECUTE
         EX    R9,FLDMVC1              MOVE ERROR MESSAGE
         SPACE 1
FLDERR10 DS    0H
         LH    R8,02(,R6)              LOAD OFFSET TO FIELD
         LA    R8,DSCBPANL(R8)             AND ADDRESS ACTUAL FIELD
         BCTR  R8,00                       BACK UP TO ATTRIBUTE BYTE
         OI    0(R8),X'89'             TURN ON HIGH-INTENS + MDT
         BR    R14                     RETURN TO MAINLINE
         TITLE 'Z A P D S C B  ***  TABLE000 -- PROCESS TGET BUFFER'
         PUSH  USING
         DROP  R11,R12                 DROP PREVIOUS BASE REGISTER
***********************************************************************
*                                                                     *
*       THIS ROUTINE WILL PROCESS THE INPUT FROM AN 'ASIS' TGET       *
*   AGAINST A TABLE OF SBA'S. THE OUTPUT IS THE ADDRESS AND LENGTH    *
*   OF THE INPUT FIELD AND THE ADDRESS OF THE ENTRY IN THE SBA        *
*   TABLE WITH THE MATCHING SBA.                                      *
*       NOTE: IF, BY CHANCE, A FIELD IS FOUND IN THE INPUT STREAM     *
*   THAT DOES NOT HAVE A MATCHING TABLE ENTRY, REG 06 IS RETURNED     *
*   EMPTY, BUT THE FIELD ADDRESS AND LENGTHS ARE RETURNED TO THE USER.*
*                                                                     *
*   INPUT REGISTERS                                                   *
*        R4   -  NEXT BYTE TO PROCESS                                 *
*        R5   -  REMAINING LENGTH OF DATA                             *
*        R6   -  BUFFTAB LIST (FROM $FLD GENERATION)                  *
*        R7   -  LENGTH OF EACH BUFFER TABLE ENTRY                    *
*                                                                     *
*   OUTPUT REGISTERS                                                  *
*        R0   -  ACTUAL LENGTH OF INPUT/ZERO IF 'ERASE EOF' OF FIELD  *
*        R1   -  ADDRESS OF FIELD IN INPUT                            *
*        R2   -  LENGTH - 1 OF FIELD IN INPUT                         *
*        R4   -  NEXT BYTE TO PROCESS                                 *
*        R5   -  REMAINING LENGTH OF DATA                             *
*        R6   -  MATCHING BUFFTAB ENTRY OR ZERO                       *
*        R7   -  LENGTH OF EACH BUFFER TABLE ENTRY                    *
*                                                                     *
***********************************************************************
         SPACE 1
TABLE000 DS    0H                      HERE TO PROCESS TGET INPUT
         USING TABLE000,R15
         LTR   R5,R5                   ANY THING LEFT TO CHECK?
         BZ    TABLE050                NO, RETURN TO CALLER
         SPACE 1
TABLE025 DS    0H                      CHECK FOR SBA IN INPUT
         CLI   0(R4),X'11'             A START FIELD CHARACTER?
         BE    TABLE100                    YES, GO PROCESS INPUT FIELD
         LA    R4,1(,R4)                   NO, BUMP AROUND
         BCT   R5,TABLE025                 GO TEST NEXT BYTE
TABLE050 DS    0H                      RETURN TO USER WITH NOTHING
         SLR   R6,R6                   INDICATE NO DATA TO PROCESS
         BR    R14                     RETURN TO CALLER
         SPACE 1
TABLE100 DS    0H
         LA    R4,1(,R4)               BUMP AROUND SBA
         BCT   R5,TABLE120                 DECREMENT AND BRANCH AROUND
         B     TABLE050                       THIS INSTR IF NOT ZERO
TABLE120 DS    0H
         LH    R2,0(,R6)               LOAD NUMBER OF ENTRIES IN TABLE
         LA    R6,2(,R6)               BUMP TO START OF TABLE
         EJECT ,
TABLE200 DS    0H
         CLC   0(2,R4),0(R6)           COMPARE SBA TO TABLE ENTRY
         BE    TABLE300                    BRANCH OUT IF FOUND
         AR    R6,R7                   BUMP TO NEXT TABLE ENTRY
         BCT   R2,TABLE200             GO CHECK NEXT ENTRY
         SLR   R6,R6                   INDICATE NO MATCH
         SPACE 1
TABLE300 DS    0H                      A MATCHING TABLE ENTRY (MAYBE)
         LA    R4,2(,R4)               BUMP TO DATA ADDRESS
         BCTR  R5,00                       AND DECREMENT SAME
         BCT   R5,TABLE320                 DECREMENT AND BRANCH AROUND
         B     TABLE050                       THIS INSTR IF NOT ZERO
TABLE320 DS    0H
         LR    R1,R4                   SAVE STARTING ADDRESS
         SPACE 1
TABLE400 DS    0H                      FIND END OF FIELD
         CLI   0(R4),X'11'             LOOK FOR NEXT FIELD START
         BE    TABLE500                    AND BRENCH OUT IF FOUND
         LA    R4,1(,R4)               BUMP ANOTHER BYTE
         BCT   R5,TABLE400                 AND GO CHECK THIS ONE
         SPACE 1
TABLE500 DS    0H                      HERE AT END OF DATA OR NEXT SBA
         LR    R2,R4                   PREPARE FOR LENGTH COMPUTATION
         SR    R2,R1                      AND COMPUTE ACTUAL LENGTH
         LR    R0,R2                        LOAD IT INTO RETURN REG
         BCTR  R2,00                          DECREMENT FOR EXECUTE(S)
         B     4(,R14)                 RETURN TO CALLER
         POP   USING
         SPACE 1
FLDMVC1  MVC   0(0,R10),2(R15)         EXECUTED MOVE
NUMBRTRT TRT   0(0,R1),NUMTAB          EXECUTED TRT
NUMHXTRT TRT   0(0,R1),NUMHEXTB        EXECUTED TRANSLATE AND TEST
NUMBPACK PACK  DWORD,0(0,R1)           EXECUTED PACK INSTRUCTION
         TITLE 'Z A P D S C B  ***  CVAFPROC -- GEN CVAF ERROR MESSAGE'
***********************************************************************
*    ROUTINE TO PROCESS ERROR RETURN FROM CVAF                        *
***********************************************************************
CVAFPROC DS    0H
         USING CVAFMAP,R3
         LA    R3,CVAFREQ
*        CLI   CVSTAT,00               ERROR GENERATED?
*        BE    R14                         NO, BYPASS MSG
CVAFP010 DS    0H
         SLL   R15,16                  SHIFT RC TO HIGH ORDER 2 BYTES
         LA    R1,4                        AND LOAD COUNT OF ENTRIES
         LA    R2,CVAFRC               A(TARGET AREA)
         SPACE 1
CVAFP020 DS    0H
         SLR   R14,R14                 CLEAR WORK REG
         SLDL  R14,4                   SHIFT HALF A BYTE INTO REG
         STC   R14,0(,R2)              SAVE THIS HALF BYTE
         LA    R2,1(,R2)                   BUMP TO NEXT TARGET ADDRESS
         BCT   R1,CVAFP020                 AND PROCESS THAT ONE
         TR    CVAFRC,TRTAB            TRANSLATE TO PRINTABLE CHARS
         SPACE 1
         LA    R1,CVAFREQ
         SLR   R15,R15                 CLEAR WORK REG
         IC    R15,CVSTAT                  AND LOAD STATUS BYTE
         CVD   R15,DWORD                   CONVERT TO DECIMAL
         OI    DWORD+7,15                  ENSURE PRINTABLE SIGN
         UNPK  CVAFST,DWORD            MOVE TO OUTPUT LINE
         SPACE 1
         MVC   CVAFTYPE,=CL5'READ '    DEFAULT TO READ
         CLI   CVFCTN,CVDIRD           WAS IT A READ?
         BE    CVAFP030                    YES, BYPASS WRITE
         MVC   CVAFTYPE,=CL5'WRITE'        NO, INDICATE IT WAS A WRITE
         SPACE 1
CVAFP030 DS    0H
         LA    R15,CVAFERR             GET ADDRESS OF MESSAGE
         B     PROCEMSG                RETURN TO CALLER
         TITLE 'Z A P D S C B ** RSETATTR -- RESET ALL MOD FIELD ATTRS'
***********************************************************************
*    ROUTINE TO RESET ALL MODIFIABLE FIELD ATTRIBUTES                 *
***********************************************************************
RSETATTR DS    0H
         LA    R1,PDSCBL-2             A(H'ENTRIES IN TABLE')
         LH    R2,0(,R1)               H'ENTRIES IN TABLE'
         LA    R3,PDSCBLEL             A(ENTRY LENGTH)
         LA    R1,2(,R1)               A(TABLE PROPER)
         LA    R4,DSCBPANL             A(PANEL)
RSET0000 DS    0H                      LOOP THROUGH TABLE
         LH    R5,2(,R1)               LOAD FIELD OFFSET
         BCTR  R5,00                   DECREMENT BACK TO ATTRIBUTE
         AR    R5,R4                   ADD PANEL BASE
         NI    0(R5),64                RESET TO MODIFIABLE, NORM INTENS
         AR    R1,R3                   BUMP TO NEXT ENTRY
         BCT   R2,RSET0000                 AND GO PROCESS SAME
         BR    R10                     RETURN TO CALLER
         SPACE 2
***********************************************************************
*    RELEASE CVAF BUFFERS                                             *
***********************************************************************
CVAFRLSE DS    0H
         CVAFDIR ACCESS=RLSE,BUFLIST=0,IXRCDS=NOKEEP,BRANCH=(YES,PGM), $
               IOAREA=NOKEEP,MF=(E,CVAFREQ)
         OC    UCBTOKEN,UCBTOKEN                                30OCT95
         BZ    CVAFR010                                         30OCT95
         MODESET MODE=SUP                                       30OCT95
         UCBPIN UNPIN,PTOKEN=UCBTOKEN,                          30OCT95X
               MF=(E,XUCBPIN)                                   30OCT95
         MVC   UCBTOKEN,ALLNULL                                 30OCT95
         MVC   UCBADDR,ALLNULL                                  30OCT95
         MODESET MODE=PROB                                      30OCT95
CVAFR010 DS    0H                                               30OCT95
         BR    R10                     RETURN TO CALLER
         SPACE 1
         PUSH  PRINT                                            GP04057
         PRINT ON,GEN,DATA                                      GP04057
         DC    64S(*)
         POP   PRINT                                            GP04057
         SPACE 1
*---------------------------------------------------------------------*
*    REFRESHABLE STORAGE                                              *
*---------------------------------------------------------------------*
ALLBLANK DC    256C' '
ALLEGG   DC    10C'0'        SOME GOOSE EGGS FOR INTEGER CONVERSION
SYSDSN   DC    CL8'SYSDSN'             QNAME FOR ENQ
PATLOC   CAMLST NAME,1-1,,3-3  PATTERN CAMLST                   GP04058
         ORG   PATLOC+4                                         GP04057
PATLENQ  ENQ   (SYSDSN,,E,,SYSTEM),RET=TEST,MF=L                GP04057
PATSENQ  ENQ   (SYSDSN,,E,,SYSTEMS),RET=TEST,MF=L               GP04057
PATCVAF  CVAFDIR DSN=DS1DSNAM-DS1DSNAM,BUFLIST=CVAFBUF-CVAFBUF,        $
               IOAREA=KEEP,IXRCDS=KEEP,MF=L                     GP04057
PATCVAFL EQU   *-PATCVAF                                        GP04057
         TITLE 'Z A P D S C B  ***  WORKING STORAGE AND CONSTANTS'
         DROP  ,
         PUSH  PRINT                                            GP04057
         PRINT ON,GEN,DATA                                      GP04057
SAVE     DSECT ,             FOR (EVENTUAL) REFRESHABILITY      GP04057
DWORD    DS    D
FWORD    DS    F
PARSEPTR DS    3A            NEXT PARSE INPUT CHARACTER/1/END   GP04058
         SERVDEFS ,          EXPAND GOODIES FOR SERVICES        GP04057
@TCB     DC    A(0)                                             GP04057
@TIOT    DC    A(0)                                             GP04057
@JSTCB   DC    A(0)                                             GP04057
ALLNULL  DC    256X'00'                                         GP04057
DSNLOC   CAMLST NAME,CATDSN,,LOCWORK                            GP04057
CATDSN   DS    CL44                                             GP04057
PREFLEN  DC    X'00'         LENGTH OF PREFIX (0-7)             GP04057
PREFIX   DC    CL7' '                                           GP04057
PARMWLEN DC    X'00'         LENGTH-1 OF PARSED WORD            GP04057
PARMWORD DC    CL63' ',C' '  UPPER-CASE RETURN FROM PARSER      GP04057
         DS    0D            ALIGN FOR LOCATE SVC
LOCWORK  DS    XL512                   LOCATE WORK AREA
INPUT    EQU   LOCWORK,512
LDSNAME  DS    H                       LENGTH OF DS1DSNAM
DEFCSRAD DS    XL2                     DEFAULT CURSOR BUFF ADDR
         SPACE 1
UCBADDR  DS    A(0)                                             30OCT95
UCBTOKEN DC    XL8'00'                                          30OCT95
         UCBLOOK MF=(L,XUCBLOOK,0D)                             30OCT95
         SPACE 1
         UCBPIN  MF=(L,XUCBPIN,0D)                              30OCT95
         SPACE 1
MODEENQ  ENQ   (SYSDSN,,E,,SYSTEM),RET=TEST,MF=L                GP04057
MODEENQL EQU   *-MODEENQ                                        GP04057
         SPACE 1
USERID   DS    0CL9
USERIDL  DS    X
USERIDI  DS    CL8
         SPACE 1
MISCFLAG DC    B'00000000'
NSHARED  EQU   B'10000000'             INDICATES UCB NOT SHARED
IPTDSNAM EQU   B'01000000'             DATA SET NAME HAS CHANGED
IPTVOL   EQU   B'00100000'             VOLSER PROVIDED BY TERMINAL OPR
IPTERROR EQU   B'00010000'             INPUT ERROR HAS BEEN ENCOUNTERED
DSCBMOD  EQU   B'00001000'             DSCB HAS BEEN MODIFIED
ENQUEUE  EQU   B'00000100'             DATA SET IS IN USE
*        EQU   B'00000010'             UNUSED AT PRESENT
*        EQU   B'00000001'             UNUSED AT PRESENT
         SPACE 1
CVAFERR  DC    AL2(CVAFERRE-*-2)       LENGTH OF ERROR MESSAGE
         DC    C'ERROR RETURN FORM CVAF DURING '
CVAFTYPE DC    CL5' '
         DC    C', RETURN CODE='
CVAFRC   DC    XL4'00'
         DC    C', STATUS='
CVAFST   DC    CL3' '
         SPACE 1
CVAFBUF  ICVAFBFL DSECT=NO
         SPACE 1
CVAFREQ  CVAFDIR DSN=DS1DSNAM,BUFLIST=CVAFBUF,IOAREA=KEEP,             $
               IXRCDS=KEEP,MF=L
CVAFERRE EQU   *
         SPACE 1                                                GP04057
DSCB     DS    0F
         IECSDSL1 (1)                  MAP OUT DSCB FORMAT 1
LDSCB    EQU   *-DSCB
         AIF   (&MVSXA).SYSDEF                                  GP04234
DS1FLAG1 EQU   DS1NOBDB+1,1,C'X'  MORE FLAGS
DS1COMPR EQU   X'80'           COMPRESSABLE EXTENDED IF DS1STRP
DS1CPOIT EQU   X'40'           CHECKPOINTED D S
DS1SMSFG EQU   DS1FLAG1+17,1,C'X'  SMS FLAG
DS1SMSDS EQU   X'80'           SMS D S
DS1SMSUC EQU   X'40'           NO BCS ENTRY
DS1REBLK EQU   X'20'           MAY BE REBLOCKED
DS1CRSDB EQU   X'10'           BLKSZ BY DADSM
DS1PDSE  EQU   X'08'           PDS/E
DS1STRP  EQU   X'04'           EXTENDED FORMAT D S
DS1PDSEX EQU   X'02'           HFS D S
DS1DSAE  EQU   X'01'           EXTENDED ATTRIBUTES EXISY
DS1SCEXT EQU   DS1SMSFG+1,3,C'X'  SECONDARY SPACE EXTENSION
DS1SCXTF EQU   DS1SCEXT,1,C'X'  -"- FLAG
DS1SCAVB EQU   X'80'           SCXTV IS AVG BLOCK LEN
DS1SCMB  EQU   X'40'                 IS IN MEGBYTES
DS1SCKB  EQU   X'20'                 IS IN KILOBYTES
DS1SCUB  EQU   X'10'                 IS IN BYTES
DS1SCCP1 EQU   X'08'           SCXTV COMPACTED BY 256
DS1SCCP2 EQU   X'04'                 COMPACTED BY 65536
DS1SCXTV EQU   DS1SCXTF+1,2,C'X'  SEC SPACE EXTNSION VALUE
DS1ORGAM EQU   DS1ACBM         CONSISTENT NAMING - VSAM D S
DS1RECFF EQU   X'80'           RECFM F
DS1RECFV EQU   X'40'           RECFM V
DS1RECFU EQU   X'C0'           RECFM U
DS1RECFT EQU   X'20'           RECFM T   001X XXXX IS D
DS1RECFB EQU   X'10'           RECFM B
DS1RECFS EQU   X'08'           RECFM S
DS1RECFA EQU   X'04'           RECFM A
DS1RECMC EQU   X'02'           RECFM M
*   OPTCD DEFINITIONS   BDAM    W.EFA..R
*                       ISAM    WUMIY.LR
*             BPAM/BSAM/QSAM    WUCHBZTJ
DS1OPTIC EQU   X'80'  FOR DS1ORGAM - CATLG IN ICF CAT
DS1OPTBC EQU   X'40'           ICF CATALOG
DS1RACDF EQU   DS1IND40
DS1SECTY EQU   DS1IND10
DS1WRSEC EQU   DS1IND04
DS1SCAL1 EQU   DS1SCALO,1,C'X'    SEC. ALLOC FLAGS
DS1DSPAC EQU   X'C0'         SPACE REQUEST MASK
DS1CYL   EQU   X'C0'           CYLINDER BOUND
DS1TRK   EQU   X'80'           TRACK
DS1AVRND EQU   X'41'           AVG BLOCK + ROUND
DS1AVR   EQU   X'40'           AVG BLOCK LEN
DS1MSGP  EQU   X'20'
DS1EXT   EQU   X'10'           SEC. EXTENSION EXISTS
DS1CONTG EQU   X'08'           REQ. CONTIGUOUS
DS1MXIG  EQU   X'04'           MAX
DS1ALX   EQU   X'02'           ALX
DS1DSABS EQU   X'00'           ABSOLUTE TRACK
DS1SCAL3 EQU   DS1SCAL1+1,3,C'X'  SEC ALLOC QUANTITY
.SYSDEF  SPACE 1
         TITLE 'Z A P D S C B  ***  DSCB FIELD(S) MAP FOR A MODEL 2'
         MAINPANL PFX=       EXPAND PANEL                       GP04057
SAVEEND  EQU   *                                                GP04057
         POP   PRINT                                            GP04057
         EJECT ,
ZAPDSCB  CSECT ,                                                GP04057
         LTORG
         SPACE 1                                                GP04057
TRTNBLNK DC    256AL1(0)                                        GP04057
         ORG   TRTNBLNK+C' '                                    GP04057
         DC    X'04'                                            GP04057
         ORG   TRTNBLNK+C','                                    GP04057
         DC    X'04'                                            GP04057
         ORG   TRTNBLNK+C'('                                    GP04057
         DC    X'08'                                            GP04057
         ORG   TRTNBLNK+C')'                                    GP04057
         DC    X'0C'                                            GP04057
         ORG   ,                                                GP04057
TRTBLANK DC    256AL1(4)                                        GP04057
         ORG   TRTBLANK+C' '                                    GP04057
         DC    X'00'         SKIP BLANKS                        GP04057
         ORG   TRTBLANK+C','                                    GP04057
         DC    X'00'         SKIP COMMAS                        GP04057
         ORG   ,                                                GP04057
TRTDSNAM DC    256AL1(4)     QUICK AND DIRTY DSN CHECK          GP04057
         ORG   TRTDSNAM+C' '                                    GP04057
         DC    X'00'         ALLOW TRAILING BLANKS              GP04057
         ORG   TRTDSNAM+C'.'                                    GP04057
         DC    X'00'         ALLOW PERIODS                      GP04057
         ORG   TRTDSNAM+C'@'                                    GP04057
         DC    X'00'         ALLOW NATIONAL CHARACTERS          GP04057
         ORG   TRTDSNAM+C'#'                                    GP04057
         DC    X'00'         ALLOW NATIONAL CHARACTERS          GP04057
         ORG   TRTDSNAM+C'$'                                    GP04057
         DC    X'00'         ALLOW NATIONAL CHARACTERS          GP04057
         ORG   TRTDSNAM+C'A'                                    GP04057
         DC    9X'00'        ALLOW A-I                          GP04057
         ORG   TRTDSNAM+C'J'                                    GP04057
         DC    9X'00'        ALLOW J-R                          GP04057
         ORG   TRTDSNAM+C'S'                                    GP04057
         DC    8X'00'        ALLOW S-Z                          GP04057
         ORG   TRTDSNAM+C'0'                                    GP04057
         DC    10X'00'       ALLOW 0-9                          GP04057
         ORG   ,                                                GP04057
         SPACE 1
         PRINT &PRTSOR                                          GP04057
SERBDLEN MSSG  'VOLUME SERIAL UNACCEPTABLE - RESPECIFY'
DSNLOCER MSSG  'DATA SET NAME NOT CATALOGED - RESPECIFY'
DSNMSYNT MSSG  'SYNTAX ERROR IN COMMAND - RESPECIFY'            GP04057
DSNMBAD  MSSG  'INVALID DATA SET NAME - RESPECIFY'              GP04057
ENQERMSG MSSG  'DATA SET IS IN USE BY OTHER(S) - MODIFY THIS DSCB WITH $
               CAUTION'
DSNAMEER MSSG  'DATA SET NAME NOT SPECIFIED AT CP INVOCATION - RESPECIF$
               Y'
DSNLNGER MSSG  'LENGTH OF DSNAME AND USERID GREATER THAN FIELD LENGTH -$
                RESPECIFY'
UCBERMSG MSSG  'VOLUME SERIAL REQUESTED NOT ONLINE - RESPECIFY DSN OR V$
               OL'
DSORGER1 MSSG  'INVALID DATASET ORGANIZATION - RESPECIFY - PO/PS/DA/IS/$
               AM (U) ALLOWED'
RECFMER1 MSSG  'INVALID RECORDING FORMAT - RESPECIFY - F/V/U/B/S/A/M'
NUMBERER MSSG  'INVALID DATA, FIELD MUST BE ALL NUMERIC'
HEXER    MSSG  'INVALID DATA, FIELD MUST BE ALL HEXIDECIMAL CHARACTERS'
LNGTHER1 MSSG  'INVALID DATA, DATA LENGTH MUST MATCH INPUT FIELD LENGTH$
               '
SCALLER  MSSG  'SECONDARY ALLOCATION TYPE INVALID - RESPECIFY'  GP04101
WHATTODO MSSG  'TO TERMINATE, DEPRESS EITHER PFK3 OR PFK15'     GP04101
DSCBMSG1 MSSG  'DSCB HAS BEEN SUCCESSFULLY REWRITTEN'
         SPACE 1
PATFERR  DC    AL2(PATFERRE-*-2)       LENGTH OF ERROR MESSAGE
         DC    C'ERROR RETURN FORM CVAF DURING '
PATFTYPE DC    CL5' '
         DC    C', RETURN CODE='
PATFRC   DC    XL4'00'
         DC    C', STATUS='
PATFST   DC    CL3' '
PATFERRE EQU   *
PATFERRL EQU   *-PATFERR               END OF ERROR MESSAGE
         EJECT ,
         PRINT &PRTMAC                                          GP04057
         SPACE 1
TRTAB    DC    CL16'0123456789ABCDEF'  TRANSLATE TABLE
         SPACE 1
NUMTAB   DC    256X'FF'                VALID NUMERIC TABLE
         ORG   NUMTAB+C'0'             ORG BACK TO NUMERALS
         DC    X'00000000000000000000'
         ORG   ,                       RESET LOCATION COUNTER
         SPACE 1
NUMHEXTB DC    256X'FF'                VALID NUMERIC TABLE
         ORG   NUMHEXTB+C'0'           ORG BACK TO NUMERALS
         DC    X'00000000000000000000'
         ORG   NUMHEXTB+C'A'           ORG BACK TO HEX CHARS
         DC    X'000000000000'
         ORG   ,                       RESET LOCATION COUNTER
         SPACE 1
DSORGTAB DS    0C                      DATASET ORGINAZATION TABLE
         DC    CL2'AM',AL1(00000000,DS1ORGAM)                   GP04099
DSORGLNG EQU   *-DSORGTAB              LENGTH OF ONE ENTRY
         DC    CL2'IS',AL1(DS1DSGIS,00000000)
         DC    CL2'PS',AL1(DS1DSGPS,00000000)
         DC    CL2'DA',AL1(DS1DSGDA,00000000)
*GONE*   DC    CL2'CX',AL1(DS1DSGCX,00000000)                   GP04099
*GONE*   DC    CL2'CQ',AL1(DS1DSGCQ,00000000)                   GP04099
*GONE*   DC    CL2'MQ',AL1(DS1DSGMQ,00000000)                   GP04099
         DC    CL2'PO',AL1(DS1DSGPO,00000000)
         DC    CL2'GS',AL1(00000000,DS1DSGGS)                   GP04099
         DC    CL2'TX',AL1(00000000,DS1DSGTX)                   GP04099
         DC    CL2'TQ',AL1(00000000,DS1DSGTQ)                   GP04099
         DC    CL2'TR',AL1(00000000,DS1DSGTR)                   GP04099
DSORGCNT EQU   (*-DSORGTAB)/DSORGLNG   COUNT OF ENTRIES
         DC    CL2'  '       DEFAULT WHEN NO MATCH              GP04099
         SPACE 1
RECFMTAB DS    0C                      DATASET RECFM TABLE      GP04099
         DC    CL1'F',AL1(DS1RECFF)                             GP04099
RECFMLNG EQU   *-RECFMTAB              LENGTH OF ONE ENTRY      GP04099
         DC    CL1'V',AL1(DS1RECFV)
         DC    CL1'U',AL1(DS1RECFU)
         DC    CL1'B',AL1(DS1RECFB)
RECFMTA2 DC    CL1'D',AL1(DS1RECFB)    ASCII VARIABLE (D) FORMAT
         DC    CL1'S',AL1(DS1RECFS)
         DC    CL1'A',AL1(DS1RECFA)
         DC    CL1'M',AL1(DS1RECMC)
RECFMCNT EQU   (*-RECFMTAB)/RECFMLNG   COUNT OF U/V/F ENTRIES   GP04099
RECFMCN2 EQU   (*-RECFMTA2)/RECFMLNG   COUNT OF D/... ENTRIES   GP04099
         SPACE 1
SCAL1TAB DS    0C                      SECONDARY ALLOCATION TYPE TABLE
         DC    CL3'CYL',AL1(DS1CYL)      CYLINDER BOUNDARY      GP04101
SCAL1LNG EQU   *-SCAL1TAB              LENGTH OF ONE ENTRY
         DC    CL3'TRK',AL1(DS1TRK)      TRACK BOUNDARY         GP04101
         DC    CL3'BLK',AL1(DS1AVR)      AVR BLOCK              GP04101
         DC    CL3'RND',AL1(DS1AVRND)    AVG BLOCK AND ROUND    GP04101
         DC    CL3'ABS',AL1(DS1DSABS)    ABSOLUTE TRACK         GP04101
SCAL1CNT EQU   (*-SCAL1TAB)/SCAL1LNG   COUNT OF ENTRIES
SCAL5TAB DS    0C                      SECONDARY ALLOCATION TYPE TABLE
         DC    CL3'AVB',X'80'  AVG BLK - SAME AS OLD BLOCK      GP04101
SCAL5LNG EQU   *-SCAL5TAB              LENGTH OF ONE ENTRY      GP04101
         DC    CL3'MBY',X'40'  MEGABYTES                        GP04101
         DC    CL3'KBY',X'20'  KILOBYTES                        GP04101
         DC    CL3'BYT',X'10'  BYTES                            GP04101
         DC    CL3'256',X'08'  256                              GP04101
         DC    CL3'655',X'04'  65536                            GP04101
SCAL5CNT EQU   (*-SCAL5TAB)/SCAL5LNG   COUNT OF ENTRIES         GP04101
         EJECT ,
TABTABLE DS    0F                  VALUE=(Y(00)) IN $FLD
         DC    A(IDSNAME)           0
         DC    A(IVOLSER)           1
         DC    A(ICREDT)            2
         DC    A(IREFD)             3
         DC    A(IEXPDT)            4
         DC    A(IDSORG)            5
         DC    A(IRECFM)            6
         DC    A(ILRECL)            7
         DC    A(IBLKL)             8
         DC    A(IKEYL)             9
         DC    A(IRKP)             10
         DC    A(ILSTAR)           11
         DC    A(ITRBAL)           12
         DC    A(SMSIND)           13
         DC    A(IDSIND)           14
         DC    A(IOPTCD)           15
         DC    A(ISCALL1)          16
         DC    A(ISCALL3)          17                           GP04099
         DC    A(X'80000000'+ISCALL5) 18                        GP04099
         SPACE 1
         PRINT &PRTSYS       ONLY ONE COPY OF PANEL DEFINITION PRINTED
         MAINPANL ,          EXPAND MAIN PANEL AS A PATTERN     GP04057
         EJECT ,
         PRINT &PRTMAC
CVAFMAP  ICVAFPL DSECT=YES,LABELS=YES
         EJECT ,
         IKJCPPL ,                     CPPL PARAMETER LIST      GP04057
         PRINT &PRTSYS                                          GP04057
         CVT   LIST=YES,DSECT=YES
         IEFUCBOB LIST=YES
         IHAPSA ,                                               GP04057
         IHAACEE ,                                              GP04057
         IHAASCB ,                                              GP04057
         IHAASXB ,                                              GP04057
         SPACE 1                                                GP04057
         IKJTCB ,                                               GP04057
         SPACE 1                                                GP04057
LOCJSCB  DSECT ,             IN SOME VERSIONS OF OS, NO DSECT   GP04057
         IEZJSCB ,                                              GP04057
         SPACE 1                                                GP04057
         IKJPSCB ,                                              GP04057
         SPACE 1                                                GP04057
         IKJUPT ,                                               GP04057
         EJECT ,
         PRINT &PRTMAC                                          GP04057
         $KEYS ,
         END   ,
