CATEICE  TITLE '   BUILDS DSNAMES FROM NONVSAM CATALOG ENTRIES         X
               CATEDIT --- UICC/GTEL CATALOG EDIT PROGRAM'         DCL
*                                                                  DCL
*   ICE                              -------- UICC/B.SCHRAGER      DCL
*                                                 /T.KOLE          DCL
*                                    -------- BOEING COMP SERV     DCL
*                                    07/16/76 UICC/E.KLEMENS       DCL
*                                    01/11/79 GTEL/D.C.LIVINGSTON  DCL
*                                                                  DCL
*   * ICE --- BUILDS DSNAMES FROM NONVSAM CATALOG ENTRIES *        DCL
*                                                                  DCL
*                                                                  DCL
*   THIS CSECT COLLECTS AND ASSEMBLES INDEX LEVELS AND DSNAMES     DCL
*   FROM SUCCESSIONS OF INDEX LEVELS AND FINAL DATASET NAME LEV-   DCL
*   ELS DRAWN FROM NONVSAM CATALOG BLOCKS LINKED BY POINTERS.      DCL
*   IT IS REENTRANT, AND ENTRIES TO IT ARE RECURSIVE, FIRST FROM   DCL
*   CSECT 'CATEDIT ', SUBSEQUENTLY FROM WITHIN ITSELF.  ON ENTRY   DCL
*   FROM 'CATEDIT ', IT RECEIVES POINTER TO FIRST BLOCK IN SPECI-  DCL
*   FIED NONVSAM CATALOG, PROCESSES BLOCKS IN SEQUENTIAL ORDER     DCL
*   UNTIL END OF CATALOG REACHED, THEN RETURNS TO 'CATEDIT .'      DCL
*   FOR EACH BLOCK READ, EXTRACTS ASSOCIATED HIGH-LEVEL INDEX OR   DCL
*   SINGLE-LEVEL DSNAME.  IF LATTER OR EMPTY HIGH-LEVEL INDEX,     DCL
*   WRITES RECORD TO SYSUT1, SPECIFYING NATURE OF ENTRY.  IF       DCL
*   HIGH-LEVEL ENTRY WITH POINTER (TTR) TO CATALOG BLOCK CONTAIN-  DCL
*   ING NEXT-LEVEL INDEX, PASSES HIGH-LEVEL ENTRY AND POINTER AS   DCL
*   PARAMETERS TO RECURSIVE CALL TO ITSELF, WITH CONTROL EVENTU-   DCL
*   ALLY REACQUIRED FROM CALL AFTER ALL DSNAMES BASED ON GIVEN     DCL
*   HIGH-LEVEL INDEX HAVE BEEN ASSEMBLED AND APPROPRIATE MULTI-    DCL
*   LEVEL DSNAME RECORDS HAVE BEEN WRITTEN TO SYSUT1.              DCL
*                                                                  DCL
*   ON REENTRY FROM WITHIN ITSELF, RECEIVES PARTIALLY ASSEMBLED    DCL
*   NAME, CONSISTING OF HIGH-LEVEL INDEX ALONE OR HIGH-LEVEL IN-   DCL
*   DEX PLUS ONE OR MORE LOWER-LEVEL INDEXES, ALONG WITH POINTER   DCL
*   (TTR) TO CATALOG BLOCK CONTAINING ONE OR MORE ADDITIONAL NAME  DCL
*   INDEX LEVELS AND/OR DSNAME FINAL LEVELS.  READS INDICATED      DCL
*   BLOCK, PROCESSES EACH ENTRY IN BLOCK IN TURN.  IF ENTRY IS     DCL
*   INDEX LEVEL WITH POINTER TO ANOTHER CATALOG BLOCK FOR NEXT     DCL
*   LOWER-LEVEL NAME, PASSES PARTIALLY ASSEMBLED NAME AND POINTER  DCL
*   TO ITSELF ON RECURSIVE CALL.  IF EMPTY INDEX LEVEL OR FINAL    DCL
*   DSNAME LEVEL, WRITES RECORD TO SYSUT1.                         DCL
*                                                                  DCL
*                                                                  DCL
         SPACE 1                                                   DCL
CATEICE  CSECT ,
         PRINT NOGEN                                             85230
         SAVE  (14,12),,*     PERFORM STANDARD INWARD LINKAGE
         LR    12,15          SET REG 15 AS TEMPORARY BASE REGISTER
         USING CATEICE,12     ESTABLISH ADDRESSABILITY
         LR    2,1            SAVE REG 1
         GETMAIN R,LV=WRKLEN  GET WORK AREA
         LR    10,1           SET REG 10 AS WORK AREA BASE REGISTER
         USING WRKDSECT,10
         LA    1,SAVEAREA     LOAD NEW SAVE AREA ADDRESS
         ST    13,4(1)        CROSS-LINK OLD AND NEW SAVE AREAS
         ST    1,8(13)
         LR    13,1           LOAD NEW SAVE AREA ADDRESS
         SR    0,0            ZERO ENTRY COUNT PER BLOCK
         ST    0,ENTCNT
         LM    3,6,0(2)       LOAD PARM ADDRESSES INTO REGS 3 - 6
         MVC   BEGTTR,0(3)    MOVE IN CATALOG BLOCK TTR
         MVC   BEGINDXL,0(4)  MOVE CURRENT DSNAME LENGTH
         MVC   BEGINDX,0(5)   MOVE IN CURRENT DSNAME
         MVC   CVOL,0(6)      MOVE IN CATALOG VOLSER, DEVTYPE
LOCATE   LA    3,BEGTTR       LOAD TTR ADDRESS
         LA    2,BLOCK        LOAD BUFFER ADDRESS
         READ  DECB1,DI,CATDCB, READ CATALOG BLOCK INTO LOCATION       X
               (2),'S',0,(3)      'BLOCK'
         CHECK DECB1          READ OK?
*                             NO; GO TO ERROR                      DCL
         L     3,=V(BLCKCNT)  YES; GET BLOCK COUNT FROM CATEDIT
         L     1,0(,3)        INCREMENT BLOCK COUNT
         LA    1,1(,1)
         ST    1,0(,3)
         LA    3,BLOCK+2      LOAD CATLG BLOCK ADDRESS
         USING ENTDSECT,3     ESTABLISH ADDRESSABILITY FOR BLOCK
TYPECHK  L     1,ENTCNT       INCREMENT NUMBER OF ENTRIES FOR THIS
         LA    1,1(,1)          BLOCK
         ST    1,ENTCNT
         CLI   ETYPE,X'05'    CVOL POINTER ENTRY?
         BE    CVOLSUP        YES; GO TO CVOL SUPPORT
         CLI   ETYPE,X'07'    NO; DATA SET POINTER ENTRY?
         BE    DEVTYPCH           YES; GO TO DEVTYPCH
         CLI   ETYPE,X'00'        NO; INDEX POINTER ENTRY?
         BE    SEARCH                 YES; GO TO SEARCH, CHASE IT DOWN
         LA    3,ETYPE                NO; FORM NUMBER OF HALFWORDS LEFT
         SR    1,1                      IN THIS ENTRY
         IC    1,0(3)
         SLL   1,1            CONVERT TO BYTES
         LA    3,1(3)         ADD 1 FOR ETYPE FIELD
         AR    3,1            LOAD NEXT ENTRY ADDRESS
         B     TYPECHK        GO TO TYPECHK
SEARCH   CLI   ENAME,X'FF'     END OF THIS BLOCK?
         BNE   NO              NO; GO TO NO
         CLC   ETTR,=X'000000' YES; LAST LEVEL?
         BE    RETURN               YES; GO TO RETURN
         MVC   BEGTTR,ETTR          NO; MOVE IN TTR FOR NEXT BLOCK
         B     LOCATE         GO TO LOCATE
NO       BAL   7,COMPDSN      CONSTRUCT DSNAME
         MVC   BEGTTR,ETTR    PREPARE TO GET NEXT INDEX LEVEL:
         LA    1,BEGTTR       LOAD BEGTTR, BEGINDXL, BEGINDX, AND CVOL
         ST    1,PARM1          ADDRESSES, STORE IN CSECT 'ICE' PARM
         LA    1,BEGINDXL       LIST
         ST    1,PARM2
         LA    1,BEGINDX
         ST    1,PARM3
         LA    1,CVOL
         ST    1,PARM4
         LA    1,PARMLIST     LOAD ADDRESS OF THE PARM LIST
         L     15,=V(CATEICE) CALL CSECT 'ICE' RECURSIVELY
         BALR  14,15
         MVC   BEGINDXL,0(4)  MOVE IN STARTING INDEX LENGTH
         MVC   BEGINDX,0(5)   MOVE IN STARTING INDEX
         B     BUMP           GO TO BUMP, GET NEXT ENTRY
RETURN   L     1,ENTCNT       INDEX LEVEL EMPTY?
         C     1,=F'2'
         BH    OKRET          NO; GO TO OKRET
         L     1,=V(BLCKCNT)  YES; LOAD BLOCK COUNT
         L     1,0(,1)
         C     1,=F'1'        ONLY ONE BLOCK?
         BE    OKRET          YES; GO TO OKRET: CATALOG PROBABLY EMPTY
         LA    1,BEGINDX      NO; SET UP PARAMETERS FOR CALL TO SUBROU-
         ST    1,PARM1          TINE 'EMPINDX'
         AH    1,BEGINDXL     SET POINTER TO END OF DSNAME
         BCTR  1,0            BACKSPACE TO PERIOD
         MVI   0(1),C' '      DELETE PERIOD
         LA    1,PARMLIST     LOAD PARMLIST ADDRESS
         CALL  EMPINDX        INDICATE TO CSECT 'CATEPRO' THAT INDEX TO
*                               BE DELETED
OKRET    L     13,SAVEAREA+4  RESTORE OLD SAVE AREA
         LA    1,WRKDSECT     LOAD ADDRESS OF AREA TO BE FREED
         FREEMAIN R,LV=WRKLEN,A=(1) FREE WORK AREA
         RETURN (14,12),RC=0  RETURN
DEVTYPCH CLI   16(3),X'20'    DATASET ON DIRECT-ACCESS DEVICE?
         BNE   DEV1           NO; GO TO DEV1
         BAL   7,COMPDSN      YES; ASSEMBLE DSNAME
         MVI   0(15),C' '     BLANK OUT LAST PERIOD PLACED BY COMPDSN
         MVC   DSCBTTR,DSPETTR MOVE IN DSCB TTR
         LA    1,BEGINDX      LOAD BEGINDX, DSCBTTR, AND EDATA AD-
         ST    1,PARM1          DRESSES, STORE IN SUBROUTINE 'DSPE'
         LA    1,DSCBTTR        PARM LIST
         ST    1,PARM2
         LA    1,DSPEDATA
         ST    1,PARM3
         LA    1,PARMLIST     LOAD PARM LIST ADDRESS
         L     15,=V(DSPE)    CALL SUBROUTINE 'DSPE'
         BALR  14,15
DEV1     MVC   BEGINDXL,0(4)  MOVE IN STARTING INDEX LENGTH
         MVC   BEGINDX,0(5)   MOVE IN STARTING INDEX
BUMP     EQU   *
         LA    3,ETYPE        NOW TRY NEXT ENTRY
         SR    1,1            LOAD NUMBER OF HALFWORDS LEFT THIS ENTRY
         IC    1,0(3)
         SLL   1,1            CONVERT TO BYTES
         LA    3,1(3)         ADD 1 FOR ETYPE FIELD
         AR    3,1            LOAD ADDRESS OF NEXT ENTRY
         B     TYPECHK        GO TO TYPECHK
CVOLSUP  EQU   *              NO SPECIAL CVOL SUPPORT IN THIS VERSION
ITSHERE  LA    3,ETYPE        TRY NEXT ENTRY
         SR    1,1            LOAD NUMBER OF HALFWORDS LEFT THIS ENTRY
         IC    1,0(3)
         SLL   1,1            CONVERT TO BYTES
         LA    3,1(3)         ADD 1 FOR ETYPE FIELD
         AR    3,1            LOAD ADDRESS OF NEXT ENTRY
         B     TYPECHK        GO TO TYPECHK
COMPDSN  LA    1,BEGINDX      LOAD DSNAME FIELD STARTING ADDRESS
         LH    2,BEGINDXL     LOAD DSNAME LENGTH
         AR    1,2            FORM POINTER TO NEXT INDEX-LEVEL STARTING
         LA    1,0(1)           ADDRESS
         MVC   0(8,1),ENAME   ADD CURRENT INDEX LEVEL TO DSNAME FIELD
LOOP     CLI   0(1),X'40'     CHARACTER AT POINTER POSITION BLANK?
         BE    INDXEND        YES; GO TO INDXEND
         LA    1,1(1)         NO; SELECT NEXT CHARACTER POSITION
         B     LOOP           GO TO LOOP
INDXEND  MVI   0(1),C'.'      INSERT "." AT END OF THIS INDEX
         LR    15,1           SAVE ADDRESS OF LAST PERIOD FOR GATHINDX
         LA    8,BEGINDX      LOAD START-OF-DSNAME ADDRESS
         SR    1,8            GET ACTUAL LENGTH
         LA    1,1(1)         ADD 1 FOR PERIOD
         STH   1,BEGINDXL     STORE AS NEW DSNAME LENGTH
         BR    7              RETURN
ERROR    SYNADAF ACSMETH=BDAM
         MVC   WTOMSG,68(1)   MOVE MSG TO WTO AREA
         ST    14,SAVER14     SAVE R14
         WTO   MF=(E,WTO)     ISSUE WTO
         L     14,SAVER14
         SYNADRLS
         RETURN ,             RETURN
         EJECT                                                     DCL
SAVER14  DS    F              SAVE AREA FOR READ ERROR
WTO      DC    0F'0',AL2(EWTO-*),X'8000',C'CATEDIT:  '
WTOMSG   DS    CL56
         DC    X'0000',X'8020'
EWTO     EQU   *
         EJECT                                                     DCL
         ENTRY CATDCB
CATDCB   DCB   DDNAME=DDX,BLKSIZE=256,DSORG=DA,MACRF=(RIC),RECFM=F,    X
               SYNAD=ERROR,KEYLEN=8
         EJECT
WRKDSECT DSECT
SAVEAREA DS    9D             REGISTER SAVEAREA
BEGTTR   DS    CL3            TTR OF CATALOGS BLOCKS
BEGINDXL DS    H              DSN LENGTH
BEGINDX  DS    CL44           DSNAME
CVOL     DS    CL10           VOLSER & DEVICE TYPE CHARACTERISTICS
DSCBTTR  DS    CL3            DSCB TTR
ENTCNT   DS    F              NUMBER OF ENTRIES IN THIS BLOCK
         SPACE 2
         DS    0D
BLOCK    DS    265C
         SPACE 1
PARMLIST DS    0F             PARM LIST FOR SUBROUTINES
PARM1    DS    F
PARM2    DS    F
PARM3    DS    F
PARM4    DS    F
PARM5    DS    F              POINTER TO CURRENT CVOL
         SPACE 1
         SPACE 1
WRKLEN   EQU   *-WRKDSECT
         EJECT
ENTDSECT DSECT
CVOLPE   DS    0CL22          CVOL POINTER ENTRY
ENAME    DS    CL8            HIGH LEVEL INDEX NAME
ETTR     DS    CL3            ZERO FIELD FOR THIS ENTRY
ETYPE    DS    X              X'05', REMAINING HALFWORDS FOR THIS ENTRY
EDEVTYP  DS    CL4            CVOL DEVICE TYPE INFO
EVOLID   DS    CL6            SERIAL NUMBER OF CONTROL VOLUME
         SPACE 2
         ORG   ENAME
INDXPE   DS    0CL12          INDEX POINTER ENTRY
IPENAME  DS    CL8            HIGH LEVEL INDEX NAME
IPETTR   DS    CL3            TTR OF FIRST BLOCK OF ENTRY
IPETYPE  DS    X              X'00', REMAINING HALFWORDS FOR THIS ENTRY
         SPACE 2
         ORG   ENAME
DSPEE    DS    0CL74          DATA SET POINTER ENTRY
DSPENME  DS    CL8            SIMPLE NAME OF DATA SET
DSPETTR  DS    CL3            TTR OF DSCB IN VTOC
DSPETYPE DS    X              X'07', REMAINING HALFWORDS FOR THIS ENTRY
DSPEVCNT DS    CL2            HOW MANY VOLUMES FOR THIS DATA SET
DSPEDATA DS    5CL12          5 12-BYTE ENTRIES OF DEVTYPE INFO
         END
