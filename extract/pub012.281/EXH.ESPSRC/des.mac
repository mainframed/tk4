DES      TITLE 'D E S  ***  ENCIPHER AND DECIPHER ROUTINE'
*                            COPIED FROM CBT 323, FILE 270       91018*
*          COPIED FROM THE CBT TAPE 07/17/84.                         *
*          CALLING EXAMPLE IS IN MEMBER CALLCIPH                      *
*                                                                     *
*                                                                     *
*          DATA SET R050A90    AT LEVEL 002 AS OF 01/23/81            *
*          DATA SET R050A90    AT LEVEL 001 AS OF 01/22/81            *
*          DATA SET ENCIPH0    AT LEVEL 001 AS OF 03/18/77            *
         SPACE 1
DES      CSECT ,                                                 91018
***********************************************************************
*        WRITTEN BY CRAIG KILLE OF FAIRCHILD SEMICONDUCTOR 5/5/76     *
*        USING THE DATA ENCRYPTION ALGORITHM SUBMITTED BY IBM TO      *
*        THE NATIONAL BUREAU OF STANDARDS AND PUBLISHED IN THE        *
*        FEDERAL REGISTER, VOL. 40, NO. 52 - MONDAY, MARCH 17, 1975.  *
*                                                                     *
*        THE GENERAL PROCEDURE FOR USE IS TO:                         *
*        (1) CALL THE SETKEY FUNCTION FROM A HOST PROGRAM, PASSING    *
*            THE START ADDRESS OF THE 8 BYTE KEY TO BE USED IN ALL    *
*            SUBSEQUENT ENCIPHERING AND/OR DECIPHERING CALLS.         *
*                                                                     *
*            COBOL EXAMPLE: CALL 'SETKEY' USING KEY-FIELD.            *
*                                                                     *
*            THE KEY FIELD WITHIN THE HOST PROGRAM IS LEFT UNCHANGED. *
*            THE CALL TO SETKEY NEED BE MADE ONLY ONCE PER EXECUTION  *
*            OF THE HOST PROGRAM, UNLESS IT IS DESIRED TO CHANGE      *
*            THE KEY FOR DEFINED GROUPS OF RECORDS, OR TO DECIPHER    *
*            OR ENCIPHER TWO OR MORE FILES WITHIN THE SAME PROGRAM.   *
*            IN THE LATTER CASE, IF THE CALLS TO ENCIPH/DECIPH ARE    *
*            INTERMIXED FOR THE FILES, A CALL TO SETKEY WILL HAVE     *
*            TO BE MADE BEFORE EACH ENCIPH/DECIPH CALL TO SET UP      *
*            THE KEY PERMUTATIONS APPROPRIATE TO EACH FILE.           *
*                                                                     *
*        (2) CALL THE ENCIPH/DECIPH FUNCTIONS AS NEEDED TO ENCIPHER   *
*            A DATA RECORD BEFORE WRITING IT TO A DATASET, OR         *
*            DECIPHER A DATA RECORD AFTER READING IT FROM A DATASET.  *
*            THE ARGUMENTS PASSED ARE THE START ADDRESS OF THE DATA   *
*            AREA TO ENCIPHER OR DECIPHER, AND THE ADDRESS OF A       *
*            FULL WORD BINARY COMPUTATIONAL ITEM THAT CONTAINS THE    *
*            COUNT OF BYTES TO ENCIPHER OR DECIPHER.  THE RESULT      *
*            REPLACES THE ORIGINAL DATA; THE COMPUTATIONAL ITEM       *
*            REMAINS UNCHANGED.                                       *
*                                                                     *
*            COBOL EXAMPLE: CALL 'ENCIPH' USING REC-AREA LENGTH56.    *
*                           CALL 'DECIPH' USING REC-AREA LENGTH72.    *
*                                                                     *
*            SINCE THE ALGORITHM WORKS ON 8 BYTES AT A TIME, THE      *
*            ACTUAL NUMBER OF BYTES ENCIPHERED OR DECIPHERED WILL     *
*            BE AN INTEGRAL NUMBER OF 8 BYTES THAT IS LESS THAN       *
*            OR EQUAL TO THE NUMBER PASSED IN ARG2 OF THE CALL.       *
*            THE GREATEST NUMBER OF BYTES LEFT UNENCIPHERED OR        *
*            DECIPHERED THEN WOULD BE THE RIGHTMOST 7 BYTES.          *
*                                                                     *
* MOD 1 - K TRUE  22JAN81 - CORRECTED BNP TO BM INSTR TO ALLOW 8 BYTE *
*                           FIELD LENGTH TO BE PROCESSED.             *
***********************************************************************
         EJECT
***********************************************************************
*        REGISTER USAGE                                               *
*                                                                     *
*        R1=ADDR OF 1ST BYTE TO ENCIPHER OR DECIPHER                  *
*        R2=INCR REG. FOR R1 -- 8 BYTES EN/DECIPHERED AT A TIME       *
*        R3=ADDR OF LAST 8 BYTE BLOCK TO EN/DECIPHER                  *
*        R4=SCRATCH                                                   *
*        R5=SCRATCH                                                   *
*        R6=SCRATCH                                                   *
*        R7=BYTE ADDR IN PERM0 TO STORE & SCRATCH                     *
*        R8=INCR REG. FOR R7 -- CONTAINS -1                           *
*        R9=ADDR-1 OF LEFTMOST BYTE OF PERM0                          *
*        RA=SCRATCH                                                   *
*        RB=POINTER TO S1,S2,...S8 CIPHER TABLE                       *
*        RC=BASE ADDRESS REGISTER                                     *
*        RD=CONTAINS INTERATION 1...16 FOR FUNCTION PERFORMANCE COUNT *
*        RE=SCRATCH                                                   *
*        RF=SCRATCH                                                   *
***********************************************************************
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
RA       EQU   10
RB       EQU   11
RC       EQU   12
RD       EQU   13
RE       EQU   14
RF       EQU   15
**********************************************************************
*        ROUTINE STARTS HERE.                                        *
*        SAVE REGS., SET UP SAVE AREA, & ESTABLISH ADDRESSABILITY    *
**********************************************************************
         ENTRY SETKEY
         ENTRY ENCIPH
         ENTRY DECIPH
         USING *,RF
SETKEY   SAVE  (14,12),,*
         LA    RE,8           CODE 8 FOR SETKEY
         L     RC,BASEADDR
         B     INIT
         DS    0F
         USING *,RF
ENCIPH   SAVE  (14,12),,*
         SR    RE,RE          CODE 0 FOR ENCIPH
         L     RC,BASEADDR
         B     INIT
         DS    0F
         USING *,RF
DECIPH   SAVE  (14,12),,*
         LA    RE,4           CODE 4 FOR DECIPH
         L     RC,BASEADDR
         B     INIT
         DROP  RF
         USING DES,RC                                            91018
INIT     LR    2,13
         LA    13,SAVEAREA
         ST    2,SAVEAREA+4
         ST    13,8(,2)
         B     COMMTAB(RE)    BRANCH TO APPROPRIATE ROUTINE
BASEADDR DC    A(DES)                                            91018
COMMTAB  B     ENDECIPH
         B     ENDECIPH
*        BRANCH DIRECTLY TO NEXT INSTR. ON SETKEY
         EJECT
**********************************************************************
*        BUILD 16 KEY PERMUTATIONS FROM ORIGINAL 8 BYTE KEY          *
**********************************************************************
         L     R4,0(,R1)      (R4)=ADDR OF 8 BYTE KEY PASSED
         ICM   R6,15,0(R4)    LOAD FIRST 4 BYTES OF KEY
         ICM   R7,15,4(R4)    LOAD SECOND 4 BYTES OF KEY
         L     R8,MINUS1      LOAD INCR REG FOR BXH
         LA    R5,KEY64+63    LOAD LAST BYTE ADDRESS
         LA    R9,KEY64-1     LOAD ADDR-1 OF LEFTMOST BYTE
STOREKEY STC   R7,0(,R5)      SET UP KEY AS 64 BYTES RATHER THAN BITS
         SRDL  R6,1           SHIFT IN NEXT BIT
         BXH   R5,R8,STOREKEY
***********************************************************************
*        PERFORM CHOICE 1 PERMUTATION ON 64 BYTE KEY FOR 56 BYTE KEY  *
***********************************************************************
         MVC   KEY56,CHOICE1P MOVE IN PATTERN TO EXTRACT KEY
         TR    KEY56,KEY64    SCRAMBLE ORIGINAL KEY
***********************************************************************
*        NOW PREPARE A 48 BYTE KEY TO EXCLUSIVE OR TO THE 48 BYTES    *
*        I WILL CREATE FROM THE RIGHTSIDE OF PERM1 WHEN WORKING       *
*        WITH THE DATA TO ENCIPHER OR DECIPHER.                       *
***********************************************************************
         SR    RD,RD          SET UP KEYS FOR RD = 0 TO 15
NEXTKEY  C     RD,=F'2'       IF RD IS 0,1,8, OR 15 SHIFT ONCE
         BL    SHIFT1         OTHERWISE SHIFT TWICE.
         C     RD,=F'8'
         BL    SHIFT2
         BE    SHIFT1
         C     RD,=F'15'
         BE    SHIFT1
SHIFT2   LA    R4,2           LOAD COUNT TO SHIFT
         B     SHIFTIT
SHIFT1   LA    R4,1
SHIFTIT  MVC   KEY56-1,KEY56  SHIFT WHOLE KEY LEFT 1 BYTE
         MVC   BYTE56,BYTE28  AND SIMULATE CIRCULAR SHIFT OF BOTH
         MVC   BYTE28,BYTEOUT HALVES OF KEY56 BY STUFFING BYTES.
         BCT   R4,SHIFTIT     GO DO AGAIN IF NECESSARY
***********************************************************************
*        PERFORM CHOICE 2 ON KEY56 BY EXTRACTING 48 BYTE KEY          *
***********************************************************************
         MVC   KEY48,CHOICE2P MOVE IN PATTERN TO EXTRACT 48 BYTES
         TR    KEY48,KEY56    EXTRACT
         LR    RF,RD          COMPUTE AREA ADDR FOR STORE
         M     RE,=F'48'      MULTIPLY BY WIDTH OF KEY
         LA    RE,KEY0(RF)    ADD IN BASE ADDR OF KEY0
         MVC   0(48,RE),KEY48 MOVE KEY TO CORRECT AREA
         LA    RD,1(,RD)      INCREMENT RD
         C     RD,=F'15'
         BNH   NEXTKEY
         B     EXUENT         ALL DONE MY JOB, NOW EXIT
         EJECT
***********************************************************************
*        COMMON CODE FOR ENCIPHER AND DECIPHER.  ONLY DIFFERENCE      *
*        IS WHETHER TO USE KEYS 0-15 (ENCIPH) OR 15-0 (DECIPH).       *
***********************************************************************
ENDECIPH ST    RE,MODE        SAVE MODE I CAME IN WITH
         LM    R2,R3,0(R1)    LOAD ADDR OF 1ST BYTE & LENGTH
         L     R3,0(,R3)      (R2)=ADDR OF START, (R3) = LENGTH
         N     R3,STRIP       MAKE SURE LENGTH IS MULTIPLE OF 8 BYTES
         S     R3,=F'8'       GET LENGTH MINUS EIGHT
         BM    EXUENT         LEN < 0, FORGET IT                KMTMOD1
         LR    R1,R2          LOAD START ADDRESS IN REG. 1
         AR    R3,R2          ADD IN LENGTH-8 FOR ADDR OF LAST 8 BYTES
         LA    R2,8           LOAD INCREMENT REGISTER
         L     R8,MINUS1      LOAD DECREMENT REG. USED THRUOUT FOR BXH
***********************************************************************
*        GRAB NEXT 8 BYTES POINTED TO BY REG. 1 AND SPLIT THE 32 BITS *
*        IN THOSE 8 BYTES INTO 32 BYTES SO I CAN USE THE TR INST. TO  *
*        DO THE HARD WORK OF SHIFTING EVERYBODY AROUND.  I MAKE NO    *
*        ATTEMPT TO ELIMINATE ALL BUT THE RIGHTMOST BIT IN EACH BYTE  *
*        STORED, BECAUSE THESE OTHER BITS ARE IRRELEVANT IN ALL       *
*        PROCESS STEPS, AND ARE DISCARDED ON OUTPUT.                  *
***********************************************************************
NEXT8BYT LA    R9,PERM0-1
         LA    R7,64(,R9)     R7 INIT. POINTS TO RIGHTMOST BYTE PERM0
         ICM   R4,15,0(R1)    LOAD 8 BYTES INTO R4 AND R5, ASSUMING
         ICM   R5,15,4(R1)    NO ALLIGNMENT OTHER THAN BYTE
BITSTORE STC   R5,0(,R7)      STORE BYTE (RIGHTMOST BIT,ONLY,IMPORTANT)
         SRDL  R4,1           SHIFT IN NEXT BIT
         BXH   R7,R8,BITSTORE POINT TO PRIOR BYTE IN PERM0 AND REDO
***********************************************************************
*        PERMUTATION 1: SCRAMBLE ORIGINAL 64 BITS (BYTES NOW)         *
***********************************************************************
         MVC   PERM1,PERM1PAT MOVE IN PATTERN TO SCRAMBLE
         TR    PERM1,PERM0    SCRAMBLE PERM0 INTO PERM1
         L     RE,MODE        DO ITERATION 0-15 FOR ENCIPH,15-0 DECIPH
         B     STARTAB(RE)
STARTAB  B     STENCIPH
         LA    RD,15
         B     NEXTITER
STENCIPH SR    RD,RD
***********************************************************************
*        MAIN LOOP OF PROGRAM WHERE 16 ITERATIONS OF BASTARDIZATION   *
*        ARE PERFORMED.  AND WITH A SLIGHT OF HAND, GARBAGE RESULTS.  *
*        FIRST PERFORM FUNCTION 'E' WHICH EXPANDS THE RIGHTMOST 32    *
*        BYTES OF PERM1 INTO 48.                                      *
***********************************************************************
NEXTITER MVC   RIGHT48,RIGHT48P MOVE IN PATTERN TO EXPAND
         TR    RIGHT48,PERM1+32 EXPAND RIGHTMOST 32 BYTES TO 48
**********************************************************************
*        GET APPROPRIATE KEY TO EXCLUSIVE OR                         *
**********************************************************************
         LR    RF,RD          COMPUTE KEY ADDR
         M     RE,=F'48'
         LA    RE,KEY0(RF)
         EJECT
***********************************************************************
*        EXCLUSIVE OR THE 48 BYTE RESULTS OF FUNCTION 'E' AND THE KEY *
*        EXTRACTION.                                                  *
***********************************************************************
         XC    RIGHT48,0(RE)
***********************************************************************
*        TREAT THIS RESULT (IN RIGHT48) AS 8 6-BYTE BLOCKS.           *
*        TRANSLATE SO BYTE 0 & 5 OF EACH BLOCK BECOME BYTE 0 & 1      *
*        AND BYTES 1 TO 4 BECOME BYTES 2-5.                           *
***********************************************************************
         MVC   KEY48,TICKLE   MOVE IN PATTERN TO TICKLE
         TR    KEY48,RIGHT48  TICKLE
***********************************************************************
*        NOW, UNFORTUNATELY, I HAVE TO TURN THE BYTES BACK INTO BITS  *
*        SO THAT I CAN FORM A SIX BIT KEY FOR TABLE LOOK UP INTO      *
*        THE TABLES S1,S2,...S8.  AFTER THAT EACH 6 BYTE (BIT) BLOCK  *
*        OF KEY48 WILL BE REPLACED BY THE 4 BIT CODE FOUND IN THE     *
*        TABLE LOOK UP.  THUS MY 48 BITS BECOME 32 BITS AGAIN.  YIPEE.*
*        THE TABLES S1,S2,...S8 ARE USED REPECTIVELY FOR THE 1ST,2ND, *
*        ...8TH BLOCK OF 6 BITS IN KEY48.                             *
***********************************************************************
         LA    R4,KEY48       SET UP BXLE CONTROL
         LA    R6,1
         LA    R7,KEY48+47
SHIFTBIT SLDL  RE,1           SHIFT REGS. 14 & 15 LEFT 1 BIT
         TM    0(R4),1        IS RIGHTMOST BIT IN BYTE TURNED ON?
         BNO   NEXTBYTE       NO, SHIFT IN ZERO
         O     RF,ONE         OR IN A ONE BIT TO SHIFT
NEXTBYTE BXLE  R4,R6,SHIFTBIT
*
         SLDL  RE,16          SHIFT 48 BITS FLUSH LEFT IN REGS. 14 & 15
         SR    R9,R9          ZERO OUT SCRATCH REGISTER 9
         LA    R4,S1          POINT TO FIRST TABLE FOR 1ST 6 BIT KEY
         LA    R6,64          SIZE IN BYTES OF TABLE TO JUMP OVER
         LA    R7,S7          STOP AFTER LAST ODD NUMBERED TABLE
LOOP     SLL   RA,8           SHIFT OVER BITS CREATED SO FAR
         LR    R5,RE          GET LEFTMOST 6 BITS OF RE IN R5
         SRL   R5,26
         SLDL  RE,6           SHIFT IN NEXT 6 BIT KEY
         IC    R9,0(R5,R4)    GET BYTE FROM TABLE S1,S3,S5,S7
         AR    R4,R6          POINT TO TABLE S2,S4,S6,S8
         LR    R5,RE          GET LEFTMOST 6 BITS OF RE IN R5
         SRL   R5,26
         SLDL  RE,6           SHIFT IN NEXT 6 BIT KEY
         IC    RA,0(R5,R4)    GET BYTE FROM TABLE S2,S4,S6,S8
         SLL   R9,4           SHIFT LEFT HALF BYTE TO POSITION
         OR    RA,R9          OR LEFT AND RIGHT HALVES OF BYTE
         BXLE  R4,R6,LOOP     POINT TO S3,S5,S7 AND GO AGAIN
         EJECT
***********************************************************************
*        REGISTER 10 NOW CONTAINS 32 BITS TO DECODE TO 32 BYTES       *
***********************************************************************
         LA    R7,RIGHT48+31  ADDR FOR FIRST BYTE STORE
         LA    R9,RIGHT48-1   ADDR-1 OF LAST BYTE TO STORE. (R8)=-1
STOREBIT STC   RA,0(,R7)      STORE BYTE (ONLY RIGHTMOST BIT IMPORTANT)
         SRL   RA,1           SHIFT IN NEXT BIT
         BXH   R7,R8,STOREBIT
**********************************************************************
*        PERFORM PERMUTATION OF RESULTANT 32 BYTES                   *
**********************************************************************
         MVC   PERM0(32),PRIMP    MOVE IN PERMUTE PATTERN
         TR    PERM0(32),RIGHT48  TRANSLATE IN 32 LEFT BYTES OF RGHT
***********************************************************************
*        EXCLUSIVE OR THE COMPLETED PERMUTED RIGHTHALF WITH THE       *
*        ORIGINAL LEFT HALF, AND THEN PLACE ORIGINAL RIGHT HALF IN    *
*        LEFT HALF, AND MOVE IN EXCLUSIVE OR RESULT TO RIGHT HALF.    *
***********************************************************************
         XC    PERM0(32),PERM1
         MVC   PERM1(32),PERM1+32  MOVE ORIG. RIGHT TO LEFT HALF
         MVC   PERM1+32(32),PERM0 MOVE IN EXCL OR RESULT
         L     RE,MODE        INCR ITER# IF ENCIPH, DECR IF DECIPH
         B     ENDTAB(RE)
ENDTAB   B     ENDENCIP
         BCTR  RD,0           DECREMENT BECAUSE WE ARE DECIPHERING
         LTR   RD,RD
         BNM   NEXTITER       GO UNTIL ITER # IS NEGATIVE
         B     UNSWITCH       JUMP OUT WHEN DONE
ENDENCIP LA    RD,1(,RD)      INCREMENT BECAUSE WE ARE ENCIPHERING
         C     RD,=F'15'
         BNH   NEXTITER
***********************************************************************
*        FALL THRU TO HERE WHEN 16 ITERATIONS DONE.  NOW DO FINAL     *
*        PERMUTATION WHICH IS INVERSE OF FIRST PERMUTATION AND        *
*        STORE RESULTING 8 BYTES BACK WHERE I GOT THE ORIGINALS FROM. *
***********************************************************************
UNSWITCH MVC   PERM1+32(32),PERM1  LEAVE HALVES UNSWITCHED ON 16TH
         MVC   PERM1(32),PERM0
         MVC   PERM0,LASTTRAN  MOVE IN INVERSE PATTERN
         TR    PERM0,PERM1     PERMUTE PERM1 INTO PERM0 RESULT
***********************************************************************
*        CHANGE BYTES BACK TO BITS FOR THE FINAL TIME                *
***********************************************************************
         LA    R4,PERM0
         LA    R6,1
         LA    R7,PERM0+63
STUFFIT  SLDL  RE,1            SHIFT BITS LEFT ONE
         TM    0(R4),1         IS RIGHTMOST BIT OF BYTE A ONE?
         BNO   BYTENEXT        NO, SHIFT IN ZERO BIT
         O     RF,ONE          OR IN A ONE BIT
BYTENEXT BXLE  R4,R6,STUFFIT
*
         STCM  RE,15,0(R1)     STORE OVER ORIG FIRST 4 BYTES
         STCM  RF,15,4(R1)     STORE OVER ORIG SECOND 4 BYTES
         BXLE  R1,R2,NEXT8BYT  GO GET NEXT 8 BYTES UNTIL DONE
         EJECT
***********************************************************************
*        COMMON EXIT FOR SETKEY, ENCIPH, AND DECIPH.                  *
***********************************************************************
EXUENT   L     RD,SAVEAREA+4   LOAD ADDR OF CALLERS SAVE AREA
         SR    RF,RF           SET RETURN CODE TO ZERO
         RETURN (14,12),RC=(15)
***********************************************************************
*        DATA AREAS                                                   *
***********************************************************************
SAVEAREA DS    18F             MY REGISTER SAVE AREA
MINUS1   DC    F'-1'
ONE      DC    F'1'
MODE     DS    F'0'
STRIP    DC    X'FFFFFFF8'
KEY0     DS    16CL48
PERM0    DS    CL64
PERM1    DS    CL64
KEY64    DS    CL64
RIGHT48  DS    CL48
KEY48    DS    CL48
****************** BYTEOUT THRU BYTE56 MUST BE TOGETHER ****
BYTEOUT  DS    CL1
KEY56    DS    0CL56
         DS    CL27
BYTE28   DS    CL1
         DS    CL27
BYTE56   DS    CL1
****************** END OF GROUP                         ****
***********************************************************************
*        TRANSLATION  TABLES                                          *
***********************************************************************
PERM1PAT DS    0CL64
         DC    AL1(57,49,41,33,25,17,09,01,59,51,43,35,27,19,11,03)
         DC    AL1(61,53,45,37,29,21,13,05,63,55,47,39,31,23,15,07)
         DC    AL1(56,48,40,32,24,16,08,00,58,50,42,34,26,18,10,02)
         DC    AL1(60,52,44,36,28,20,12,04,62,54,46,38,30,22,14,06)
RIGHT48P DS    0CL48
         DC    AL1(31,00,01,02,03,04,03,04,05,06,07,08)
         DC    AL1(07,08,09,10,11,12,11,12,13,14,15,16)
         DC    AL1(15,16,17,18,19,20,19,20,21,22,23,24)
         DC    AL1(23,24,25,26,27,28,27,28,29,30,31,00)
CHOICE1P DS    0CL56
         DC    AL1(56,48,40,32,24,16,08,00,57,49,41,33,25,17)
         DC    AL1(09,01,58,50,42,34,26,18,10,02,59,51,43,35)
         DC    AL1(62,54,46,38,30,22,14,06,61,53,45,37,29,21)
         DC    AL1(13,05,60,52,44,36,28,20,12,04,27,19,11,03)
CHOICE2P DS    0CL48
         DC    AL1(13,16,10,23,00,04,02,27,14,05,20,09)
         DC    AL1(22,18,11,03,25,07,15,06,26,19,12,01)
         DC    AL1(40,51,30,36,46,54,29,39,50,44,32,47)
         DC    AL1(43,48,38,55,33,52,45,41,49,35,28,31)
TICKLE   DS    0CL48
         DC    AL1(00,05,01,02,03,04,06,11,07,08,09,10)
         DC    AL1(12,17,13,14,15,16,18,23,19,20,21,22)
         DC    AL1(24,29,25,26,27,28,30,35,31,32,33,34)
         DC    AL1(36,41,37,38,39,40,42,47,43,44,45,46)
LASTTRAN DS    0CL64
         DC    AL1(39,07,47,15,55,23,63,31,38,06,46,14,54,22,62,30)
         DC    AL1(37,05,45,13,53,21,61,29,36,04,44,12,52,20,60,28)
         DC    AL1(35,03,43,11,51,19,59,27,34,02,42,10,50,18,58,26)
         DC    AL1(33,01,41,09,49,17,57,25,32,00,40,08,48,16,56,24)
PRIMP    DS    0CL32
         DC    AL1(15,06,19,20,28,11,27,16,00,14,22,25,04,17,30,09)
         DC    AL1(01,07,23,13,31,26,02,08,18,12,29,05,21,10,03,24)
S1       DS    0CL64
         DC    AL1(14,04,13,01,02,15,11,08,03,10,06,12,05,09,00,07)
         DC    AL1(00,15,07,04,14,02,13,01,10,06,12,11,09,05,03,08)
         DC    AL1(04,01,14,08,13,06,02,11,15,12,09,07,03,10,05,00)
         DC    AL1(15,12,08,02,04,09,01,07,05,11,03,14,10,00,06,13)
S2       DS    0CL64
         DC    AL1(15,01,08,14,06,11,03,04,09,07,02,13,12,00,05,10)
         DC    AL1(03,13,04,07,15,02,08,14,12,00,01,10,06,09,11,05)
         DC    AL1(00,14,07,11,10,04,13,01,05,08,12,06,09,03,02,15)
         DC    AL1(13,08,10,01,03,15,04,02,11,06,07,12,00,05,14,09)
S3       DS    0CL64
         DC    AL1(10,00,09,14,06,03,15,05,01,13,12,07,11,04,02,08)
         DC    AL1(13,07,00,09,03,04,06,10,02,08,05,14,12,11,15,01)
         DC    AL1(13,06,04,09,08,15,03,00,11,01,02,12,05,10,14,07)
         DC    AL1(01,10,13,00,06,09,08,07,04,15,14,03,11,05,02,12)
S4       DS    0CL64
         DC    AL1(07,13,14,03,00,06,09,10,01,02,08,05,11,12,04,15)
         DC    AL1(13,08,11,05,06,15,00,03,04,07,02,12,01,10,14,09)
         DC    AL1(10,06,09,00,12,11,07,13,15,01,03,14,05,02,08,04)
         DC    AL1(03,15,00,06,10,01,13,08,09,04,05,11,12,07,02,14)
S5       DS    0CL64
         DC    AL1(02,12,04,01,07,10,11,06,08,05,03,15,13,00,14,09)
         DC    AL1(14,11,02,12,04,07,13,01,05,00,15,10,03,09,08,06)
         DC    AL1(04,02,01,11,10,13,07,08,15,09,12,05,06,03,00,14)
         DC    AL1(11,08,12,07,01,14,02,13,06,15,00,09,10,04,05,03)
S6       DS    0CL64
         DC    AL1(12,01,10,15,09,02,06,08,00,13,03,04,14,07,05,11)
         DC    AL1(10,15,04,02,07,12,09,05,06,01,13,14,00,11,03,08)
         DC    AL1(09,14,15,05,02,08,12,03,07,00,04,10,01,13,11,06)
         DC    AL1(04,03,02,12,09,05,15,10,11,14,01,07,06,00,08,13)
S7       DS    0CL64
         DC    AL1(04,11,02,14,15,00,08,13,03,12,09,07,05,10,06,01)
         DC    AL1(13,00,11,07,04,09,01,10,14,03,05,12,02,15,08,06)
         DC    AL1(01,04,11,13,12,03,07,14,10,15,06,08,00,05,09,02)
         DC    AL1(06,11,13,08,01,04,10,07,09,05,00,15,14,02,03,12)
S8       DS    0CL64
         DC    AL1(13,02,08,04,06,15,11,01,10,09,03,14,05,00,12,07)
         DC    AL1(01,15,13,08,10,03,07,04,12,05,06,11,00,14,09,02)
         DC    AL1(07,11,04,01,09,12,14,02,00,06,10,13,15,03,05,08)
         DC    AL1(02,01,14,07,04,10,08,13,15,12,09,00,03,05,06,11)
         END
