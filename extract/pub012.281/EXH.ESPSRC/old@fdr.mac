@FDR     TITLE '@ F D R R E A D  ***  SIMULATED DISK READ ROUTINE'
         COPY  OPTIONGB
         SPACE 1
         SYSPARM LIST=YES
         SPACE 2
***********************************************************************
*                                                                     *
*                                                                     *
*        COPYRIGHT 1982  EXPERT SYSTEM PROGRAMMING, INC.              *
*        COPYRIGHT 2003  EXPERT SYSTEM PROGRAMMING                    *
*                        176 OLD STAGE COACH ROAD                     *
*                        BRADFORD, VT 05033-8844                      *
*                                                                     *
*                    ALL RIGHTS RESERVED                              *
*                                                                     *
***********************************************************************
         EJECT ,
@FDRREAD START 0                       PRELIMINARY VERSION ADDED 82249
         SPACE 1
*        THIS MODULE IS A SPECIAL INTERFACE FOR SUBROUTINES @OBTAINS
*        AND @VOLREAD. THE INTENTION IS TO PROVIDE A TRANSPARENT
*        INTERFACE TO DISK SERVICE ROUTINES (E.G. VTOC LIST) FOR
*        BACKUP TAPES WRITTEN BY FDR.
*
*        THE USER MUST SUPPLY A DD CARD FOR EACH VOLUME TO BE READ.
*        THE DDNAME IS TPVOLSER (OR TAVOLSER); ONE DD CARD PER
*        VOLUME DUMPED BY FDR (NORMAL DATASET DD CARD) - ONE OR
*        MORE TAPE VOLUMES. THE PROGRAM HAS ONLY BEEN DEBUGGED WITH
*        SINGLE VOLUME TAPES.
*
*        ATTRIBUTES: RENT,REFR,REUS, AUTHORIZED
*
*        CALLING SEQUENCE :
*
*        R0=0                          CLOSE/FREEMAIN
*        R0=1                          TCLOSE (CLOSE/NO FREE)
*        R0=2     R1=>VOLSER           OPEN/GETMAIN
*                          REQUIRES DD NAME 'TAVOLSER' OR 'TPVOLSER'
*        R0=3     R1=CCHHR TO BE READ  READ SPECIFIC BLOCK
*                    IF CCHHR NOT FOUND, SET CODE=4 AND RETURNS NEXT
*                    IF NO NEXT BLOCK, RETURNS CODE 8
*        R0=4     R1=CCHHR LAST READ  READ SUCCESSIVE BLOCK
*                    FOR CCHHR=0, RETURNS FORMAT4
*
*        RETURN CODE 0 - REQUEST COMPLETED
*                    4 - BLOCK NOT READ; NEXT BLOCK RETURNED
*                    8 - I/O ERROR OR END OF TAPE
*                   12 - PROCESSING ERROR
*                   16 - OPEN ERROR, ETC.
*        FOR 0/4 - R1 RETURNED POINTING TO COUNT/BLOCK
*
         SPACE 1
         PRINT &PRTSOR
         SPACE 2
         USING *,R15
         B     FDRREAD       SKIP ID
         DC    AL1(L'FDRRID)   LENGTH FOR SNAP
FDRRID   DC    C'@FDRREAD - &SYSDATE'
FDRREAD  BSM   R14,0         PRESERVE CALLER'S AMODE            GP99026
         STM   R14,R12,12(R13)                                  GP99026
         LR    R12,R15
         DROP  R15
         USING @FDRREAD,R12
         AM24  WORK=R15      OLD-FASHIONED                      GP99026
         SPACE 1
*        LOCATE OR ESTABLISH WORK AREA
*
         L     R8,CVTPTR     GET CVT
         L     R8,CVTTCBP-CVTMAP(,R8)  TCB POINTER
         L     R8,4(,R8)     CURRENT TCB
         ICM   R4,15,FDRRID+1  ID FIELD
         L     R7,TCBFSA-TCB(,R8)  POINT TO CHAIN HEAD
SVCINITL ICM   R6,7,1(R7)    LAST ENTRY ON CHAIN ?
         BZ    SVCINGET      YES; GET A WORK AREA
         USING FSAWORK,R6    DECLARE IT
         CL    R4,FSAID      SAME ID ?
         BE    SVCHAVE       YES; USE IT
         LR    R7,R6         SWAP
         B     SVCINITL      TRY AGAIN
SVCINGET LA    R2,FSALEN     GET LENGTH
         CLM   R0,1,=X'02'   OPEN REQUEST ?
         BNE   SVCFAIL       NO; JUST RETURN
         GETMAIN R,LV=(R2)   GET SPACE FOR PERMANENT WORK AREA
         BXLE  R15,R15,SVCINITW  CLEAR IT
SVCFAIL  LM    R14,R12,12(R13)  ERROR IN PROCESSING OR ENVIRONMENT
         LA    R15,16        SET MAJOR ERROR
         SLR   R0,R0         INDICATE ENVIRONMENT (PGM ERROR)
         BSM   0,R14         RETURN                             GP99026
         DROP  R6
         USING FSAWORK,R7
SVCINITW MVC   FSALINK-FSAWORK(4,R1),FSALINK  CHAIN OLD AREA
         ST    R1,FSALINK    CHAIN THIS AHEAD OF OLD ONE
         DROP  R7
         USING FSAWORK,R6
         LR    R6,R1         COPY THIS ONE TO PERMANENT REGISTER
         LA    R14,4(,R1)    START TO CLEAR AFTER LINK FIELD
         LR    R15,R2        GET LENGTH
         SH    R15,=Y(4)     ADJUST LENGTH
         SLR   R0,R0
         SLR   R1,R1
         MVCL  R14,R0        CLEAR IT
         ST    R4,FSAID      SET ID OF THIS AREA (@SVC)
         ST    R2,FSASPLEN   SAVE GETMAIN LENGTH
         ST    R8,FSATCB     AND TCB
         LM    R0,R1,20(R13)   RELOAD ENTRY PARAMETERS
SVCHAVE  LR    R9,R13        COPY USER'S SAVE AREA ADDRESS
         LA    R13,SAVEAREA   AND ESTABLISH OURS
         USING SAVEAREA,R13
         DROP  R6            FSA HEADER NO LONGER ACCESSIBLE
         ST    R9,4(,R13)    MAKE BACK CHAIN
         ST    R13,8(,R9)      AND FORWARD CHAIN
         XC    RETCH,RETCH   CLEAR RETURN CODES
         STM   R0,R1,CALLR0  SAVE PARMS FOR QUICK ACCESS
         ST    R1,RETR1      ALSO SAVE FOR R1 RETURN VALUE
         LA    R7,0(,R1)     SAVE ENTRY PARM
         BIX   ERR=EXIT16,PFX=ENT,LOC=(CLOSE,CLOSE,OPEN,READ,READ)
         SPACE 1
EXIT16   MVI   RETCC,16      SET RETURN CODE 16
         B     EXITCLS       AND EXIT WITH ERROR
         SPACE 1
EXIT12   MVI   RETCC,12
EXITCLS  BAL   R10,CLOSET    CLOSE TAPE IF OPEN FAILED
         B     EXIT
         SPACE 1
EXIT8    MVI   RETCC,8       SET RETURN CODE 8
         SPACE 1
EXIT     LM    R15,R1,RETCH  GET RETURN CODES
         L     R13,4(,R13)
         L     R14,12(,R13)  GET RETURN ADDRESS
         LM    R2,R12,28(R13)  RESTORE OTHERS
         BSM   0,R14         RETURN TO CALLER                   GP99026
         SPACE 1
EXIT4    CLI   CALLMODE,3    READ ENTRY ?
         BNE   EXIT          NO; SET RETURN TO 0
         MVI   RETCC,4       SET WARNING CODE
         B     EXIT          AND RETURN
         SPACE 2
*        ENTRY CODE 0 - CLOSE AND FREE EVERYTHING
*        MODE=0   FULL CLOSE AND FREEMAIN
*        MODE=1   CLOSE, BUT DO NOT FREEMAIN
         SPACE 1
ENTCLOSE BAL   R10,CLOSER    CLOSE DCB
         MVI   FLAGS,0       RESET PROCESSING FLAG
         CLI   CALLMODE,0    FULL CLOSE ?
         BNE   EXIT          NO; RETAIN WORK AREA
         LM    R3,R4,GETMBUFA     SEE IF GETMAIN DONE
         LTR   R3,R3
         BZ    CLOSENF       NO
         LTR   R4,R4
         BZ    CLOSENF
         FREEMAIN R,A=(R3),LV=(R4)
CLOSENF  XC    GETMBUFA(8),GETMBUFA  CLEAR IT
         LR    R6,R13        GET SAVE AREA
         LA    R15,SAVEAREA-FSAWORK  GET HEADER LENGTH
         SR    R6,R15
         DROP  R13
         USING FSAWORK,R6    DECLARE FULL AREA
         LM    R2,R3,FSASPLEN  GET LENGTH AND TCB BACK
         L     R3,TCBFSA-TCB(,R3)  POINT TO CHAIN HEAD
CLOSFLP  CLM   R6,7,1(R3)    POINTER TO OUR AREA ?
         BE    CLOSEFNC      YES; UNCHAIN
         L     R3,0(,R3)     TRY NEXT ONE
         B     CLOSFLP
CLOSEFNC MVC   0(4,R3),FSALINK  UNCHAIN OURS
         L     R13,SAVEAREA+4  GET USER'S SAVE AREA ADDRESS
         FREEMAIN R,LV=(R2),A=(R6)  FREE OUR WORK SPACE
         LM    R14,R12,12(R13)  RELOAD USER'S REGISTERS
         SLR   R15,R15
         SLR   R0,R0         SET RETURN CODES
         BSM   0,R14         RETURN                             GP99026
         DROP  R6
         USING SAVEAREA,R13  RE-ESTABLISH WORK AREA
         SPACE 1
CLOSET   TM    FLAGS,FGOPEN  TAPE OPEN ?
         BNZR  R10           YES; RETURN WITHOUT CLOSE
CLOSER   TM    @FDRDCB+DCBOFLGS-IHADCB,DCBOFOPN  DCB OPEN ?
         BZ    CLOSENOP      NO
         CLOSE MF=(E,OPLST)  CLOSE IT
CLOSENOP BR    R10           RETURN
         EJECT ,
ENTOPEN  LTR   R7,R7         VOLSER ADDRESS SUPPLIED ?
         BZ    EXIT16        NO; PARM ERROR
         MVC   MODEFG,CALLR1  COPY AND SET MODE FLAGS
         TM    FLAGS,FGOPEN   ALREADY OPEN ?
         BZ    ENTOPENB      NO
         XC    REQCCHHR,REQCCHHR  SET FOR NEXT ADDRESS TO BE READ
         CLC   VOLSER,0(R7)  SAME VOLUME ?
         BE    ENTREADI      YES; REREAD FORMAT 4
         BAL   R10,CLOSER    CLOSE DCB
         MVI   FLAGS,0       RESET FLAG COMPLETELY
         SPACE 1
ENTOPENB MVC   @FDRDCB(PATDCBLN),PATDCB  MOVE PATTERN DCB
         LA    R1,@FDRDCB
         ST    R1,OPLST      MAKE OPEN LIST
         MVI   OPLST,X'90'   MAKE OPEN REREAD
         MVC   VOLSER,0(R7)  SAVE THE USER'S VOLUME SERIAL
         LA    R8,@FDRDCB    POINT TO INPUT DCB
         USING IHADCB,R8     DECLARE DCB MAPPING
         DEVTYPE @DDNAME,DB  LOOK FOR TPVOLSER
         BXLE  R15,R15,ENTOPENT  CHECK FOR TAPE
         MVI   @DDNAME+1,C'A'  MAKE DDNAME TAVOLSER FROM TPVOLSER
         DEVTYPE @DDNAME,DB  TRY AGAIN
         BXH   R15,R15,EXIT16  TOO BAD
ENTOPENT CLI   DB+2,UCB3TAPE    INPUT TAPE ?
         BNE   EXIT16        NO; TOO BAD
         MVC   DCBDDNAM-IHADCB+@FDRDCB(8),@DDNAME   SAVE DDNAME
         OPEN  MF=(E,OPLST)  OPEN THE TAPE
         TM    DCBOFLGS,DCBOFOPN
         BZ    EXIT16        INDICATE THAT OPEN FAILED
         BAL   R9,FIXDEB     SET DEB FOR EXCP USE
         ICM   R0,7,GETMBUFA+1  PREVIOUSLY GOT STORAGE ?
         BNZ   ENTOPENG      YES; SKIP GETMAIN
         L     R2,=A(64*1024)   SET GETMAIN SIZE FOR 64K
*OLD*    TM    MODEFG,MFVTOC  USER REQUESTED VTOC ONLY ?         89120
*OLD*    BZ    *+8           NO                                  89120
*OLD*    SRL   R2,3          YES; SET 8K (CURRENT FDR SIZE IS 7284)
         GETMAIN R,LV=(R2)   GET STORAGE
         BXH   R15,R15,EXIT16  QUIT IF FAILED
         STM   R1,R2,GETMBUFA  SET ADDRESS AND LENGTH
         LR    R0,R1         COPY ADDRESS
         LR    R1,R2         COPY LENGTH
         SLR   R14,R14       CLEAR FROM ADDRESS
         SLR   R15,R15       CLEAR FROM LENGTH/INSERT BYTE
         MVCL  R0,R14        CLEAR BUFFER FOR SHORTER DUMPS
ENTOPENG LM    R6,R7,GETMBUFA  GET ADDRESS AND LENGTH BACK
         STCM  R6,7,READCCW+1  SET ADDRESS INTO READ CCW
         LR    R11,R6        GLOBAL ADDRESS
         BCTR  R7,0          CHANGE LENGTH TO 64K-1 (OR 8K-1)
         STH   R7,READCCW+6  SET SIZE
         MVI   READCCW,2     MAKE READ CCW
         MVI   READCCW+4,X'20'   SILLY !
         MVI   REQCCHHR+5,44   DSCB KEY LENGTH                   87177
         MVI   REQCCHHR+7,96   DSCB DATA LENGTH                  87177
         LA    R1,IOB        GET IOB
         STCM  R1,7,DCBIOBAA  SET FOR DUMP FORMATTING
         LA    R1,ECB
         ST    R1,IOBECBPT
         ST    R8,IOBDCBPT   DCB POINTER
         LA    R1,1          POSITION INCREMENT
         STH   R1,IOBINCAM
         BAL   R9,PHYSREAD   READ A BLOCK
         B     EXIT16        QUIT IF ERROR OR EOF
         USING FDRSECT,R11   DECLARE INPUT BUFFER
         CLC   FDRID,IDFDR   IS LENGTH AS EXPECTED ?             89120
         BNE   EXIT16        NO; DISASTER
         CLC   FDRIDT+1(L'FDRIDT-1),IDFDRT+1  FDR TAPE ?         89120
         BNE   EXIT16        NO; DISASTER
         BAL   R9,PHYSREAD   READ SECOND BLOCK
         B     EXIT16        QUIT IF ERROR OR EOF
         MVC   VTOCSTRT,0(R3)   SET ADDRESS OF VTOC START
         LA    R1,2
         ST    R1,VTOCBLK1   SET (NOTE) BLOCK ADDRESS
         MVC   VTOCEND,FDMBLK+44+DS4VTOCE+6-IECSDSL4  SET END ADRESS
         MVI   VTOCEND+4,X'FF'  FAKE END RECORD NUMBER
         XC    REQCCHHR(5),REQCCHHR  REQUEST FORMAT 4 POSITIONING
         MVC   TRKPCYL,FDMBLK+44+DS4DEVSZ+2-IECSDSL4  TRK/CYL    89121
         OI    FLAGS,FGOPEN  SET OPEN
         B     ENTREADI      RETURN VTOC TO USER
         SPACE 2
ENTREAD  TM    FLAGS,FGOPEN  OPEN ?
         BZ    EXIT16        NO; MAJOR ERROR
         LTR   R7,R7         ANY DISK ADDRESS PASSED ?
         BZ    EXIT12        NO; ERROR
         MVC   REQCCHHR,0(R7)   COPY IT
ENTREADI L     R11,READCCW   GET BUFFER ADDRESS BACK
         LA    R8,@FDRDCB      AND DCB ADDRESS
         NI    MODEFG,MFVTOC   RESET LOCAL FLAGS
         TM    DCBOFLGS,DCBOFOPN  EOF ON PRIOR READ ?
         BNZ   READNCLS      NO
         OPEN  MF=(E,OPLST)  RE-OPEN
         BAL   R9,FIXDEB     CLOBBER DEB
         BAL   R9,PHYSREAD   SET TO FIRST (VTOC) BLOCK
         B     EXIT8         SHOULD NOT HAPPEN ?
READNCLS CLC   REQCCHHR,ZEROES  VTOC REQUEST ?
         BNE   READNVTC      NO
         MVC   REQCCHHR,VTOCSTRT  REPLACE BY FORMAT 4 ADDRESS
         B     READNNXT      SKIP NEXT TEST
READNVTC CLI   CALLMODE,3    READ ENTRY ?
         BE    READNNXT      YES
         SLR   R1,R1
         IC    R1,REQCCHHR+4  GET RECORD NUMBER
         LA    R1,1(,R1)
         STC   R1,REQCCHHR+4  SET IT BACK
         SRA   R1,8          TEST IT
         BZ    READNNXT      LESS THAN 256
         MVI   REQCCHHR+4,1  ELSE SET TO 1
         LA    R1,1
         AH    R1,REQCCHHR+2
         STH   R1,REQCCHHR+2  AND UPDATE TRACK ADDRESS
         CLM   R1,3,TRKPCYL  VALID TRACK NUMBER ?                89121
         BL    READNNXT      YES                                 89121
         LA    R1,1          BUMP CYLINDER                       89121
         AH    R1,REQCCHHR                                       89121
         SLL   R1,16         FINAGLE                             89121
         STCM  R1,15,REQCCHHR  SET CYLINDER AND 0 TRACK ADDRESS  89121
         SPACE 1
READNNXT CLC   REQCCHHR,VTOCSTRT  VTOC RECORD ?
         BL    POSNVTOC      NO
         CLC   REQCCHHR,VTOCEND   IN VTOC ?
         BH    POSNVTOC      NO
         OI    MODEFG,MFDSCB   SHOW VTOC REQUEST                 87177
         CLC   CURCCHHR,VTOCSTRT  POSITIONED IN VTOC ?
         BL    POSVTOC       NO; REPOSITION
         CLC   CURCCHHR,VTOCEND   IN VTOC ?
         BNH   READFIND      YES; FIND CORRECT BLOCK
POSVTOC  POINT @FDRDCB,VTOCBLK1   SET FOR SECOND TAPE RECORD
         B     READAHED      AND READ IT IN
POSNVTOC CLC   CURCCHHR,VTOCSTRT  IN VTOC NOW ?
         BL    READFIND      NO; LOCATE NORMALLY
         CLC   CURCCHHR,VTOCEND   IN VTOC ?
         BH    READFIND      NO
         BAL   R9,PHYSREAD   READ A BLOCK
         B     POSNVERR      CHECK ERROR
POSNVTON CLC   CURCCHHR,VTOCSTRT  STILL IN VTOC ?
         BL    READFIND      NO
         CLC   CURCCHHR,VTOCEND   STILL IN VTOC ?
         BH    READFIND      NO
POSNVTOR BAL   R9,PHYSREAD   READ ANOTHER
         B     EXIT12        ERROR - NO DATA ?
         B     POSNVTON      CHECK IF STILL IN VTOC
POSNVERR TM    DCBOFLGS,DCBOFOPN  READ PAST EOF ?
         BNZ   EXIT12        NO; SOME OTHER ERROR
         OPEN  MF=(E,OPLST)  RE-OPEN
         BAL   R9,FIXDEB     CLOBBER DEB
         B     POSNVTOR      AND REPOSITION
READFIND L     R3,CURBLOCK   RELOAD BLOCK POINTER
         TM    MODEFG,MFDSCB LOOKING FOR DSCB ?                  89121
         BZ    READFINK      NO                                  89121
         CLC   CURCCHHR,VTOCSTRT  STILL IN VTOC ?                89121
         BL    READHOLE      NO                                  89121
         CLC   CURCCHHR,VTOCEND   IN VTOC ?                      89121
         BNH   READFINK      YES; CONTINUE                       89121
READHOLE LA    R3,REQCCHHR   **SOME VERSIONS OF FDR DON'T WRITE**
         B     READFUND      **NULL VTOC RECORDS                 89121
READFINK CLC   REQCCHHR,CURCCHHR  IN CURRENT BLOCK ?
         BL    READBACK      DEFINITELY NOT
         SLR   R4,R4
         ICM   R4,3,FDMBLKL2   GET LOGICAL RECORD LENGTH
         MIN   R4,GETMBUFL   DON'T TEST BEYOND BUFFER            87177
         LA    R5,0(,R11)    GET BUFFER START
         AR    R5,R4         GET END ADDRESS +
         SH    R5,=H'8'      LESS ONE (MINIMUM) ENTRY            87177
READNLOP SLR   R1,R1
         SLR   R4,R4
         IC    R1,5(,R3)     GET KEY LENGTH
         ICM   R4,3,6(R3)    GET DATA LENGTH
         LA    R4,8(R1,R4)   GET BXLE LENGTH
         CLC   REQCCHHR,0(R3)  CCHHR IN THIS SEGMENT ?
         BNH   READFUND      EQUAL - RETURN FOUND/LOW - NEXT RECORD
         BXLE  R3,R4,READNLOP  TRY AGAIN
         OI    MODEFG,MFBSP2   SHOW READ ISSUED
         B     READAHED
READBACK TM    MODEFG,MFBSP1+MFBSP2  SEE-SAW ?
         BO    READFUND      YES; ACCEPT FIRST BLOCK
         BSP   @FDRDCB       BACK-SPACE
         BSP   @FDRDCB
         OI    MODEFG,MFBSP1   SHOW BACKSPACED
READAHED BAL   R9,PHYSREAD   READ A BLOCK
         B     EXIT12        NOT FOUND
         L     R3,CURBLOCK   LOAD BLOCK POINTER                  90206
         ICM   R0,15,CURCCHHR  DID WE READ THE IPL TRACK ?       90206
         BNZ   READFIND      NO; PROCEED                         90206
         ICM   R0,15,REQCCHHR  DID THE USER WANT THIS ?          90206
         BNZ   READAHED      NO; IGNORE IT (OUT OF SEQUENCE)     90206
         B     READFIND      TRY THIS ONE
READFUND ST    R3,RETR1      RETURN COUNT ADDRESS TO USER
         CLC   REQCCHHR,0(R3)  REQUESTED ADDRESS ?
         BE    EXIT          YES; RETURN 0
         TM    MODEFG,MFDSCB  VTOC REQUEST ?                     87177
         BZ    EXIT4         NO                                  87177
         LA    R3,REQCCHHR   USE NULL ENTRY                      87177
         ST    R3,RETR1                                          87177
         B     EXIT4         ELSE RETURN 0 OR 4
         SPACE 1
         SPACE 1
PHYSREAD MVI   ECB,0         JUST IN CASE
         LA    R1,READCCW
         ST    R1,IOBSTART
         ST    R1,IOBRESTR   JUST IN CASE
         NI    DCBIFLGS,255-DCBIFEC  RESET ERROR BITS
         MVI   IOBFLAG1,X'00'  RESET RESTART BIT
         LA    R1,IOB        GET IOB ADDRESS
         STCM  R1,7,DCBIOBAA  SET FOR (POSSIBLE) DUMP FORMATTING
         EXCP  (1)           READ A BLOCK
         WAIT  ECB=ECB
         CLI   ECB,X'7F'     OK ?
         BE    READLEN       YES; GET LENGTH
         CLI   ECB,X'41'     END-FILE ?
         BNE   READBAD       NO
         TM    IOBCSW+3,1    EOF ? (UNIT EXCEPTION)
         BZ    READBAD       NO; OTHER ERROR
         L     R0,DCBBLKCT   GET CURRENT BLOCK COUNT
         BCTR  R0,0          SUBTRACT FOR TAPEMARK
         ST    R0,DCBBLKCT
         OI    DCBOFLGS,DCBOFTM  POSITIONED AFTER TAPEMARK
         FEOV  (R8),REWIND   GET NEXT VOLUME OR GO TO EOJ
         NI    DCBOFLGS,255-DCBOFTM  RESET TM JUST IN CASE
         B     PHYSREAD      READ NEXT VOLUME
         SPACE 1
READBAD  LA    R2,SYNADTXT   NO R13 WITHIN SYNAD CODE
         SYNADAF ACSMETH=EXCP,PARM1=IOB  GET SYNAD MSG
         MVC   0(L'SYNADTXT,R2),68(R1)
         SYNADRLS ,
         MVI   ERRWTO+1,L'SYNADTXT+4  SET WTO LENGTH
         WTO   MF=(E,ERRWTO) PRINT ERROR MESSAGE
         BR    R9            RETURN (+0) WITH ERROR
READEOJ  DS    0H            NOT FINISHED YET
*        NI    DCBOFLGS,255-DCBOFTM  JUST IN CASE
*        BSP   @FDRDCB       AND BACKSPACE OVER TAPE MARK
         CLOSE (,REWIND),MF=(E,OPLST)  REWIND
         MVI   OPLST,X'90'   RESET OPEN,REREAD
         BR    R9
         SPACE 1
READLEN  LA    R1,READCCW+8  EXPECTED COMPLETION
         CLM   R1,7,IOBCSW   IS IT ?
         BNE   READBAD       NO; ERROR
         SLR   R3,R3
         SLR   R2,R2
         ICM   R3,3,READCCW+6  GET READ LENGTH
         ICM   R2,3,IOBCSW+5  GET RESIDUAL COUNT
         SR    R3,R2         GET LENGTH OF TEXT
         ST    R3,LENREAD
         BZ    PHYSREAD      IGNORE ZERO LENGTH RECORDS
         LA    R3,FDMCOUNT   POINT TO DSF COUNT FIELD
         CLC   =C'DUMMYDSF',FDMID  DSF FORMAT ?
         BE    *+8           YES
         SH    R3,=H'12'     FINAGLE
         MVC   CURCCHHR,0(R3)  COPY TEXT OF (PRESUMED) COUNT
         ST    R3,CURBLOCK   SAVE ADDRESS OF FIRST R1
         TM    FLAGS,FGOPEN  IN OPEN PROCESSING ?
         BZ    4(,R9)        YES; RETURN EXACTLY AS READ
         ICM   R0,3,FDMBLKL1  CHECK TEXT SIZE
         BZ    PHYSREAD      SKIP CONTROL RECORDS
         CLC   =C'TRACKTAB',FDMCOUNT  CONTROL RECORD ?
         BE    PHYSREAD      YES; SKIP
         B     4(,R9)        RETURN TO CALLER
         SPACE 1
INEXIT   LR    R8,R1         COPY DCB ADDRESS
         TM    DCBRECFM,DCBRECLA   ANY RECFM ?
         BNZ   *+8           YES
         OI    DCBRECFM,DCBRECU   DEFAULT TO UNDEFINED
         OC    DCBBLKSI,DCBBLKSI  ANY BLOCKSIZE ?
         BNZ   *+10          YES
         MVC   DCBBLKSI,=H'32760'  USE DEFAULT
         OC    DCBLRECL,DCBLRECL   ANY RECFM ?
         BNZ   *+10          YES
         MVC   DCBLRECL,DCBBLKSI   USE DEFAULT
         MVI   DCBOPTCD,DCBOPTZ  SET REDUCED ERROR RECOVERY
         BR    R14           RETURN TO OPEN
         SPACE 1
FIXDEB   MODESET KEY=ZERO    GET PRIVILEGED
         L     R3,CVTPTR     GET CVT
*        L     R1,CVTTCBP-CVTMAP(,R3)  GET TCB POINTER
*        L     R1,4(,R1)     GET CURRENT TCB
*        L     R1,TCBJSCB-TCB(,R1)  GET JSCB
*        USING IEZJSCB,R1
*        NI    JSCBSWT1,255-JSCBPASS  RESET INPUT PASSWORD BYPASS
         L     R3,CVTXAPG-CVTMAP(,R3)  GET APPENDAGE TABLE
         L     R1,DCBDEBAD   GET DEB
         USING DEBBASIC,R1
         AIF   (NOT &MVS).NOTMVS                                 82195
         OI    DEBFLGS1,DEBEXCPA  ALLOW EXCP                     81245
.NOTMVS  L     R1,DEBAPPAD   GET AVT                             81245
         DROP  R1
         MVC   DEBEOEA-DEBAVT(DEBXCEA+4-DEBAVT,R1),0(R3)  DUMMY OUT
         MODESET KEY=NZERO   RESET PRIVILEGE                     81245
         BR    R9            RETURN TO CALLER
         EJECT ,
*        DATA AND WORK AREAS
*
PATDCB   DCB   DSORG=PS,DDNAME=TPVOLSER,MACRF=(RP),EXLST=1,            *
               NCP=1,EODAD=READEOJ
PATDDNM  DC    CL8'TPVOLSER'
PATOPLST DC    0F'0',X'80',AL3(0)
PATEXLST DC    0A(0),X'85',AL3(INEXIT)  DCB EXIT
PATDCBLN EQU   *-PATDCB
IDFDR    DC    A(24)         FDR TAPE HEADER
IDFDRT   DC    C'YTHATS ALL FOLKS'
         SPACE 2
FSAWORK  FSAWORK ,           RESIDENT WORK AREA
SAVEAREA DC    18F'0'
DB       DS    D             WORK AREA
ZEROES   DS    D             ZERO CONSTANT
CALLR0   DS    0F            USER'S CALL PARM
         DS    XL3             RESERVED
CALLMODE DS    X               FUNCTION REQUESTED
CALLR1   DS    F             PARAMETER ADDRESS
RETCH    DS    0D            RETURN CODES (R15/R0)
RETR15   DS    0F,XL3        RETURN CODE
RETCC    DS    X
RETR0    DS    F
RETR1    DS    F
GETMBUFA DC    A(0)          1 OF 2
GETMBUFL DC    A(0)          2 OF 2
@FDRDCB  DCB   DSORG=PS,DDNAME=TPVOLSER,MACRF=(R),EXLST=INEXLST,       *
               NCP=1,EODAD=READEOJ
@DDNAME  DC    CL8'TPVOLSER'
VOLSER   EQU   @DDNAME+2,6,C'C'
OPLST    DC    0F'0',X'80',AL3(@FDRDCB)
INEXLST  DC    0A(0),X'85',AL3(INEXIT)  DCB EXIT
         SPACE 1
ECB      DC    F'0'          I/O ECB
IOB      DS    0D
IOBFLAG1 DC    X'80'         1 RELATED IOB (HAH)
IOBFLAG2 DC    X'00'
IOBSENS0 DC    X'00'
IOBSENS1 DC    X'00'
IOBECBPT DC    A(ECB)
IOBFL3   DC    X'00'
IOBCSW   DC    XL7'00'
IOBSTART DC    A(READCCW)
IOBDCBPT DC    A(@FDRDCB)    DCB
IOBRESTR DC    A(READCCW)
IOBINCAM DC    H'1'
IOBERRCT DC    H'0'
READCCW  CCW   X'02',0,X'20',X'FFFF'   READ BIG BLOCKS
ERRWTO   DC    F'0'      1/2 WTO
SYNADTXT DC    CL52' '   2/2 SYNAD MESSAGE
VTOCSTRT DC    XL5'0'        FORMAT 4 ADDRESS
VTOCEND  DC    XL5'0'        VTOC END ADDRESS
TRKPCYL  DC    H'0'          TRACKS PER CYLINDER                 89121
VTOCBLK1  DC   F'0'          NOTE OF FIRST VTOC BLOCK (=2?)
CURBLOCK DC    F'0'          ADDRESS OF CURRENT R1 COUNT FIELD
FLAGS    DC    X'00'         PROCESSING FLAGS
FGOPEN   EQU   X'80'           VTOC IS OPEN
MODEFG   DC    X'00'         VOLUME PROCESSING MODE
MFVTOC   EQU   X'80'           VTOC ONLY
MFBSP1   EQU   X'08'           TAPE BACKSPACED
MFBSP2   EQU   X'04'           AND READ TWICE
MFDSCB   EQU   X'01'           REQUEST IS FOR A VTOC RECORD      87177
         DS    0H            FOR TRACK ARITHMETIC                87177
REQCCHHR DS    XL5           CCHHR OF BLOCK TO BE READ
         DS    X,XL2         DUMMY DSCB 0 KEY/DATA LENGTH        87177
         DS    XL44                                              87177
         DS    XL96                                              87177
CURCCHHR DS    XL5           FIRST CCHHR IN CURRENT BLOCK
LENREAD  DC    F'0'          LENGTH OF LAST READ
SAVEND   EQU   *             END OF GOTTEN WORK AREA
FSALEN   EQU   *-FSAWORK     LENGTH TO GETMAIN
         SPACE 1
FDRSECT  DSECT ,
FDRID    DS    A(24)         FIRST/LAST RECORD HEADER
FDRIDT   DS    C'YTHATS ALL FOLKS'
FDRIDLN  EQU   *-FDRID
         SPACE 1
         ORG   FDRSECT
FDMBLKL1 DS    H             BLOCK LENGTH
FDMBLKL2 DS    H             BLOCK LENGTH
         DS    A               ?
         DS    A(8)            ?
FDMID    DC    CL8'DUMMYDSF'   ID
         DC    A(0)
         DC    X'0100'         ?
FDMTXTLN DS    H             TEXT LENGTH ?
FDMPACK  DS    F             NUMBER OF BLOCKS ?
FDMCOUNT DS    CL8           COUNT FIELD OF FIRST RECORD
FDMBLK   DS    C             TEXT OF FIRST BLOCK
         ORG   FDRSECT
         DS    256XL256      BIG BUFFER
         SPACE 1
         PRINT &PRTSYS                                           81294
CVT      DSECT ,
         CVT   DSECT=YES
         SPACE 1
         DCBD  DSORG=PS,DEVD=TA
         SPACE 1
         IEZDEB ,
         SPACE 1
         IKJTCB ,
         SPACE 1
         IEZJSCB ,
         SPACE 1
         IEFUCBOB ,
         SPACE 1
         IECSDSL1 4          EXPAND FORMAT 4 DSCB
         SPACE 1
         REGEQU ,
         END
