COMP     TITLE 'S U B C O M P  ***  MULTI-LEVEL COMPARE SUBROUTINE'
*                                                                     *
* MODULE NAME:  SUBCOMP                                               *
*                                                                     *
* THIS MODULE:                                                        *
*     DETERMINES IF A STRING MATCHES A MASK CRITERION                 *
*                                                                     *
*     THE CALLER PROVIDES:                                            *
*         R1 - > LIST                                                 *
*            +0  ADDRESS OF LENGTH/DATA OF FUNCTION                   *
*            +4  ADDRESS OF LENGTH/DATA OF STRING                     *
*            +8  ADDRESS OF LENGTH/DATA OF MASK                       *
*           EITHER THE ABOVE HAS THE VL BIT ON, OR:                   *
*           +12  ADDRESS OF A WORK AREA (CMPR WILL ALLOCATE IN SP 88) *
*                                                                     *
*     FUNCTION MAY BE:                                                *
*         END    SERVICE CALL TO RELEASE OBTAINED STORAGE             *
*         DSN    TREAT STRING AS DATA SET NAME                        *
*         ACT    TREAT STRING AND MASK AS COMMA SEPARATED FIELDS      *
*         POS    TREAT STRING AS CL44 STRING - NO INDEX LEVEL LOGIC   *
*         MEM    TREAT STRING AS CL8 MEMBER NAME                      *
*         VOL    TREAT STRING AS CL6 VOLUME SERIAL                    *
*         MSK    CONVERT MASK STRING TO ONE SUITABLE FOR IGGCSI00     *
*                  MASK VALUE (NOT USEFUL FOR OTHER MASKING)          *
*         AST    COMPLETE MASK BY APPENDING ** OR .**                 *
*                  USABLE FOR LATER MASK TESTING                      *
*         XXX    ANYTHING ELSE - TREAT AS SINGLE STRING OF LENGTH 44  *
*                (UNLESS LENGTHS ARE SUPPLIED; THEN UP TO MAXSTLEN)   *
*                                                                     *
* A GENERAL MATCH (**) WILL RETURN 0 FOR A NULL INPUT STRING; AND     *
* THAT IT WILL SUPPORT COMMA SEPARATED ACCOUNT FIELDS.                *
*                                                                     *
* UPON RETURN R15 WILL CONTAIN ONE OF THE FOLLOWING CODES:            *
*                                                                     *
* R15 =  0    STRING MATCHES MASK CRITERION                           *
*        4    STRING DOES NOT MATCH MASK                              *
*        8    ---RESERVED---                                          *
*       12    MASK IS INVALID                                         *
*                                                                     *
*---------------------------------------------------------------------*
*                      <<SPECIAL INSTRUCTIONS>>                       *
*                                                                     *
* INSTRUCTIONS FOR USE:                                               *
*                                                                     *
* IF CALLED FROM A REXX MODULE:                                       *
*  /*----------------------------------------------------------------*/
*  /* INVOKE SUBCOMP USING LINKMVS PASSING FUNCTION, STRING, MASK.   */
*  /* THE RESULT IS RETURNED IN REXX VARIABLE "RC".                  */
*  /*----------------------------------------------------------------*/
*                                                                     *
*  CMP_FUN = "DSN"    /* USE DATA SET METHOD                         */
*  CMP_STR = MY_DSNAME   /* SET NAME OF DATA SET                     */
*  CMP_MSK = "**.EXHLOG"    /* SAMPLE MASK                           */
*                                                                    */
*  ADDRESS LINKMVS "CMP_FUN CMP_STR CMP_MSK"  /* INVOKE              */
*                                                                    */
*  IF RC < 0  THEN SIGNAL BAD_CALL  /* MODULE NOT FOUND OR BAD PARM  */
*  IF RC = 0  THEN .....            /* STRING MATCHED                */
*  IF RC = 4  THEN .....            /* STRING DID NOT MATCH MASK     */
*  IF RC = 8  THEN .....            /* DSN FUNCTION - DSN NOT VALID  */
*  IF RC =12  THEN .....            /* MASK IS NOT VALID             */
*  IF RC >12  THEN SIGNAL CMPR_ERROR  /*  OOPS ?                     */
*                                                                    */
*  NOTE:  LINKPGM MAY BE USED INSTEAD, BUT ONLY IF ALL VARIABLES ARE  *
*  PRESET TO THEIR FULL LENGTH (3/44/44)                              *
*                                                                     *
*  /*----------------------------------------------------------------*/
*  /* END OF REXX EXAMPLE                                            */
*  /*----------------------------------------------------------------*/
*                                                                     *
*                                                                     *
* IF CALLED FROM AN ASSEMBLER MODULE:                                 *
*   *-----------------------------------------------------------------*
*   * CALL  SUBCOMP,(FUN,STRING,MASK) OPTIONAL VL AND MF=(E,CALLPL)   *
*   * FUN  IS A THREE BYTE STRING                                     *
*   * STRING  AND MASK ARE EACH 44 BYTES                              *
*   *                                                                 *
*   * OPTIONALLY ALL PARAMETERS MAY BE PRECEDED BY A HALFWORD LENGTH  *
*   * FIELD, IN WHICH CASE THE STRING AND MASK MAY BE UP TO MAXSTLEN  *
*   * IN LENGTH, BUT MAY NOT BE USED WITH FUNCTION DSN OR ACT         *
*   *                                                                 *
*   *-----------------------------------------------------------------*
*---------------------------------------------------------------------*
         EJECT
SUBCOMP  START 0
SUBCOMP  AMODE ANY
SUBCOMP  RMODE ANY
         B     BEGIN-*(,R15)
         DC    AL1(BEGIN-*),C'SUBCOMP &SYSDATE '
BEGIN    BSM   R14,0         SAVE USER'S AMODE                  GP03047
         STM   R14,R12,12(R13) SAVE ALMOST EVERYTHING           GP03047
         LR    R12,R15       GET BASE
         USING SUBCOMP,R12   DECLARE IT
         LR    R5,R1         SAVE ENTRY PARM POINTER
         TM    8(R5),X'80'   SHORT LIST WITH VL ?
         BNZ   TEMPWORK      YES; GET SAVE AREA
         L     R6,12(,R5)    LOAD ROOT POINTER
         LA    R6,0(,R6)                                        GP03116
         LTR   R6,R6                                            GP03116
         BZ    EXITKEEP      FAIL (R15=ENTRY)                   GP03116
         ICM   R9,15,0(R6)   LOAD AND TEST WORK ADDRESS
         BNZ   HAVEWORK      PREVIOUSLY GOTTEN; USE IT
         BAS   R8,GETMEAN    GET AND INIT STORAGE
         ST    R9,0(,R6)     SAVE FOR NEXT TIME
         B     HAVEWORK      JOIN COMMON
TEMPWORK BAS   R8,GETMEAN    GET STORAGE
HAVEWORK ST    R13,4(,R9)    MAKE BACK CHAIN
         ST    R9,8(,R13)    MAKE FORWARD CHAIN
         LR    R13,R9        MAKE NEW SAVE AREA (NEED FOR DEBUGGING)
         USING DYNAREA,R13   DECLARE IT
         LA    R0,LOCWORK
         L     R1,=A(LOCWKLEN)
         SR    R15,R15
         MVCL  R0,R14        CLEAR WORK SPACE
         B     INIT
DOGPATCH DC    128S(*)            MODULE PATCH AREA
         SPACE 2
*---------------------------------------------------------------------*
* GENERAL PURPOSE REGISTERS:                                          *
*                                                                     *
* GPR         USE         AS                                          *
* ---         ---         --                                          *
* R1          INT         PARM REG/WORK REG                           *
* R8          INT         BAL REGISTER                                *
* R11         INT         PROGRAM BASE REGISTER                       *
* R12         INT         PROGRAM BASE REGISTER                       *
* R13         INT         SAVE AREA                                   *
* R15         INT/OUT     WORK REG, RETURN CODE                       *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
***********************************************************************
*                                                                     *
NUMSTACK EQU   22            NUMBER OF NODES IN STACK
MAXSTLEN EQU   255           MAXIMUM STRING LENGTH < 256
*                                                                     *
***********************************************************************
         TITLE 'S U B C O M P  ***  INITIALIZATION'
*---------------------------------------------------------------------*
*                                                                     *
* INITIALIZE FOR EXECUTION                                            *
*                                                                     *
*                          <<PSEUDOCODE>>                             *
*                                                                     *
*  GET INPUT PARMS                                                    *
*  INITIALIZE WORK AREA AND VARIABLE FIELDS                           *
*                                                                     *
* GET CALLER'S "STRING" AND "GENERIC" PARAMETERS                      *
*                                                                     *
* CASE 1: ADDRESS POINTERS POINT TO CHARACTER TEXT (FIXED LENGTH MODE)*
* CASE 2: ADDRESS POINTERS POINT TO LENGTH HALFWORD, FOLLOWED BY TEXT *
*                                                                     *
*---------------------------------------------------------------------*
INIT     LM    R2,R4,0(R5)   GET POINTERS TO ALL THREE PARMS
         TM    8(R5),X'80'   VL BIT ON PARM THREE ?
         BZ    INITHAVE      YES; WORK AREA IS TEMPORARY ONLY
         OI    CSWPFLGS,PFTEMP  REMEMBER TO FREE WORK AREA
INITHAVE CLI   0(R2),C' '    IS THE FUNCTION CODE WITHOUT A LENGTH?
         BNL   UNLENGTH      YES; DO FIXED LENGTH MOVES
         LA    R0,FUNPARM
         LA    R1,L'FUNPARM  GET DESTINATION ADDRESS/LENGTH
         LH    R15,0(,R2)    GET LENGTH OF FUNCTION CODE
         ICM   R15,8,BLANKS  REQUEST BLANK PADDING
         LA    R14,2(,R2)    SOURCE ADDRESS
         MVCL  R0,R14        WOW; THIS IS REALLY SLOW
         LA    R0,DSNPARM
         LA    R1,L'DSNPARM  GET DESTINATION ADDRESS/LENGTH
         LH    R15,0(,R3)    GET LENGTH OF STRING
         LA    R14,2(,R3)    SOURCE ADDRESS
         STM   R14,R15,DB    SAVE FOR FEEDBACK
         ICM   R15,8,BLANKS  REQUEST BLANK PADDING
         MVCL  R0,R14        WOW; THIS IS REALLY SLOW
         LA    R0,GENPARM
         LA    R1,L'GENPARM  GET DESTINATION ADDRESS/LENGTH
         LH    R15,0(,R4)    GET LENGTH OF STRING
         ICM   R15,8,BLANKS  REQUEST BLANK PADDING
         LA    R14,2(,R4)    SOURCE ADDRESS
         MVCL  R0,R14        WOW; THIS IS REALLY SLOW
         B     COMMPARM
         SPACE 1
UNLENGTH MVC   FUNPARM,BLANKS
         MVC   DSNPARM,DSNPARM-1  BLANK FILL
         MVC   GENPARM,GENPARM-1  BLANK FILL
         OC    FUNPARM,0(R2)                                    GP02289
         LA    R15,6-1       VOL-SER LENGTH                     GP02289
         CLC   =C'VOL',FUNPARM    VOL-SER COMPARE ?             GP02289
         BE    UNLENCOM                                         GP05168
         LA    R15,8-1       MEMBER LENGTH                      GP05168
         CLC   =C'MEM',FUNPARM    MEMBER COMPARE ?              GP05168
         BE    UNLENCOM                                         GP02289
UNLEN44  LA    R15,44-1      DEFAULT LENGTH                     GP02289
UNLENCOM EX    R15,EXMVCR3   MOVE VALUE TO BE TESTED            GP02289
         EX    R15,EXMVCR4   MOVE MASK                          GP02289
         LA    R4,1(,R15)    TRUE LENGTH                        GP02289
         STM   R3,R4,DB      SAVE FOR FEEDBACK
COMMPARM OC    FUNPARM,BLANKS     JUST IN CASE
         MVI   GTAB+C'*',C'*'     ASTERISK TRIGGER - TRANSLATE TABLE G
         CLC   =C'DSN',FUNPARM    DATA SET COMPARISON?
         BE    COMMDSN            YES; SET IT
         CLC   =C'POS',FUNPARM    DATA SET COMPARISON WITH POSITIONAL?
         BE    POSCOMP            YES; GET IT                   GP09184
         CLC   =C'ACT',FUNPARM    ACCOUNT COMPARISON?
         BE    COMMACT            YES; SET IT
         CLC   =C'MSK',FUNPARM    BUILD CSI MASK FROM USER'S
         BE    COMMMASK           YES; BUILD IT
         CLC   =C'AST',FUNPARM    BUILD COMP MASK FROM USER'S   GP09177
         BE    COMMASTM           YES; BUILD IT                 GP09177
         CLC   =C'MEM',FUNPARM    MEMBER NAME COMPARISON?       GP05168
         BE    COMMMEM            YES; BUILD IT                 GP08328
         CLC   =C'VOL',FUNPARM    VOLUME SERIAL COMPARISON ?    GP05168
         BE    COMMMEM            YES; BUILD IT                 GP08328
         CLC   =C'END',FUNPARM    SPECIAL - RELEASE STORAGE ?
         BNE   COMMOTH       NO; TREAT AS SIMPLE COMPARISON
         OI    CSWPFLGS,PFTEMP  FORCE FREEING THE WORK AREA
         B     EXIT               AND RETURN                    GP02290
COMMOTH  CLC   GENPARM(44),DCAST1     COMPLETE GENERAL MATCH ?
         BE    EXIT               YES; SKIP REMAINING GARBAGE
         OI    CSWPFLGS,PFOTH   SET OTHER FLAG
         MVC   LVLMAX,=Y(MAXSTLEN)  NO LEVEL RESTRICTION
         MVI   LVLSEP,X'FE'     ONLY ONE NODE
         MVI   GTAB+X'FE',C'.'    NO TRIGGER - TRANSLATE TABLE G
         MVI   GTAB+C' ',C' '     BLANK TRIGGER - TRANSLATE TABLE G
         MVI   DTAB+X'FE',C'.'    NO TRIGGER - TRANSLATE TABLE D
         MVI   DTAB+C' ',C' '     BLANK TRIGGER - TRANSLATE TABLE D
         B     INITDONE      MORE LATER?
COMMACT  CLC   GENPARM(44),DCAST2     COMPLETE GENERAL MATCH ?
         BE    EXIT               YES; SKIP REMAINING GARBAGE
         MVI   LVLMAX+L'LVLMAX-1,44   VERY LONG LEVELS
         MVI   LVLSEP,C','      COMMA SEPARATES NODES
         OI    CSWPFLGS,PFACT   SET ACCT FLAG
         MVI   GTAB+C',',C'.'     COMMA TRIGGER - TRANSLATE TABLE G
         MVI   GTAB+C' ',C' '     BLANK TRIGGER - TRANSLATE TABLE G
         MVI   DTAB+C',',C'.'     COMMA TRIGGER - TRANSLATE TABLE D
         MVI   DTAB+C' ',C' '     BLANK TRIGGER - TRANSLATE TABLE D
         B     INITDONE           RETURN TO CALLER
COMMMEM  CLC   GENPARM(44),DCAST1     COMPLETE GENERAL MATCH ?  GP08328
         BE    EXIT               YES; SKIP REMAINING GARBAGE   GP08328
         OI    CSWPFLGS,PFMEM   SET MEMBER/VOLUME FLAG          GP08328
         B     COMMDMC            JOIN COMMON                   GP08328
COMMDSN  CLC   GENPARM(44),DCAST2     COMPLETE GENERAL MATCH ?
         BE    EXIT               YES; SKIP REMAINING GARBAGE
         OI    CSWPFLGS,PFDSN   SET DSN FLAG                    GP08328
COMMDMC  MVI   LVLMAX+L'LVLMAX-1,8   DSN LEVEL MAXIMUM LENGTH
         MVI   LVLSEP,C'.'      PERIOD SEPARATES NODES
         MVI   LVLMIN+L'LVLMIN-1,1   MINIMUM LEVEL LENGTH
         MVI   GTAB+C' ',C' '     BLANK TRIGGER - TRANSLATE TABLE G
         MVI   DTAB+C' ',C' '     BLANK TRIGGER - TRANSLATE TABLE D
         MVI   GTAB+C'.',C'.'     PERIOD TRIGGER - TRANSLATE TABLE G
         MVI   DTAB+C'.',C'.'     PERIOD TRIGGER - TRANSLATE TABLE D
         B     INITDONE           RETURN TO CALLER
EXMVCR3  MVC   DSNPARM(44),0(R3)                                GP02289
EXMVCR4  MVC   GENPARM(44),0(R4) MOVE USER'S FIXED LENGTH MASK  GP02289
         SPACE 2
***********************************************************************
*                                                                     *
*   ENTRY FUNCTION MSK ANALYZES THE INPUT MASK FIELD, AND BUILDS      *
*     AN OUTPUT MASK IN THE 'DSN' FIELD SUITABLE FOR PROCESSING       *
*     BY IGGCSI00. NOTE THAT SUPERLOCATE WILL NOT ACCEPT A WILDCARD   *
*     CHARACTER IN THE FIRST INDEX LEVEL; GENERAL SEARCHES NEED TO BE *
*     DONE BY THE CATALOG LOOKUP ROUTINE (SEE SUBCAT IN ICF MODE).    *
*                                                                     *
*   BASICALLY, IT EXTRACTS THE HIGHEST NUMBER OF LEVELS NOT USING     *
*     MASKING CHARACTERS, AND APPENDS ** (GENERAL MATCH) TO THEM.     *
*                                                                     *
***********************************************************************
COMMMASK LA    R5,GENPARM    SET START OF SCAN
         LA    R4,L'GENPARM-1  SET LENGTH TO CHECK LESS ONE FOR EXEC
         LA    R3,GENPARM-1  SET ADDRESS OF LAST PERIOD
         SR    R2,R2         FOR BRANCH
         LR    R15,R5        SET CURSOR
COMMMMEX EX    R4,EXTRTUMS
         B     COMMMBRT(R2)  BRANCH ACCORDING TO RESULT
COMMMBRT B     COMMMCOP      PROBABLY BAD - 44 ALPHA
         B     COMMMIND      INDEX
         B     COMMMMSK      MASK CHARACTER
         B     COMMMBLK      BLANK - END OF SCAN (NO MASKS)
         SPACE 1
COMMMIND LR    R3,R1         SAVE LOCATION OF INDEX END
         LA    R15,1(,R1)    SET NEXT SCAN LOCATION
         LA    R4,GENPARM+L'GENPARM-1  SET LAST SCANNED POSITION
         SR    R4,R15        CHARS LEFT - 1
         BM    COMMMMSL      ENDS WITH INDEX                    GP09157
         CLI   0(R15),C' '   ENDS WITH INDEX?                   GP09157
*NEXT*   BE    COMMMMSK      YES; STOP NOW                      GP09157
         BNE   COMMMMEX      DO ANOTHER                         GP09157
COMMMMSK LR    R4,R3         GET LAST INDEX ADDRESS
         SR    R4,R5         LESS START
         BNP   COMMMMSL      NOTHING
         EX    R4,EXMVCUMS   MOVE INDEX (WITH PERIOD)
COMMMMSL LA    R1,DSNPARM(R4)  LOCATION OF MASK
         MVC   1(2,R1),DCAST2  MAKE GENERAL MATCH AFTER INDEX
         LA    R0,DSNPARM
         LA    R1,3(,R1)     NEW OFFSET
         SR    R1,R0         NEW LENGTH
         B     COMMMEND
COMMMBLK DS    0H            NAME CONTAINS NOMASKS
COMMMCOP MVC   DSNPARM,GENPARM  RETURN TO USER
         LA    R0,DSNPARM
         LA    R1,L'DSNPARM
COMMMEND LM    R14,R15,DB    USER'S DSN
         ICM   R1,8,BLANKS
         MVCL  R14,R0        COPY CSI MASK
         B     EXIT
EXTRTUMS TRT   0(0,R15),TRTMASK  GET FIRST SPECIAL CHARACTER
EXMVCUMS MVC   DSNPARM(0),GENPARM  MOVE LONGEST INDEX
         SPACE 2
***********************************************************************
*                                                                     *
*   ENTRY FUNCTION AST ANALYZES THE INPUT MASK FIELD, AND COPIES      *
*     AS-IS IF THERE ARE WILD-CARD CHARACTERS IN THE MASK.            *
*     IF LAST NON-BLANK IS . IT APPENDS ** TO OUTPUT MASK             *
*                                                                     *
***********************************************************************
COMMASTM MVC   DSNPARM,GENPARM    COPY AS IS                    GP09177
         LA    R5,DSNPARM    SET START OF SCAN                  GP09177
         LA    R4,L'DSNPARM-1  SET LENGTH TO CHECK LESS ONE FOR EXEC
         LA    R3,DSNPARM-1  SET ADDRESS OF LAST PERIOD         GP09177
         SR    R2,R2         FOR BRANCH                         GP09177
         LR    R15,R5        SET CURSOR                         GP09177
COMMAMEX EX    R4,EXTRTUMS                                      GP09177
         B     COMMABRT(R2)  BRANCH ACCORDING TO RESULT         GP09177
COMMABRT B     COMMABLK      PROBABLY BAD - 44 ALPHA - ACCEPT   GP09177
         B     COMMAIND      INDEX                              GP09177
         B     COMMABLK      MASK CHARACTER - ACCEPT AS IS      GP09177
         B     COMMABLK      BLANK - END OF SCAN (NO MASKS)     GP09177
         SPACE 1                                                GP09177
COMMAIND LR    R3,R1         SAVE LOCATION OF INDEX END         GP09177
         LA    R15,1(,R1)    SET NEXT SCAN LOCATION             GP09177
         LA    R4,DSNPARM+L'DSNPARM-1  LAST SCANNED POSITION    GP09177
         SR    R4,R15        CHARS LEFT - 1                     GP09177
         BM    COMMABLK      ENDS WITH INDEX                    GP09177
         CLI   0(R15),C' '   ENDS WITH INDEX?                   GP09177
         BNE   COMMAMEX      DO ANOTHER                         GP09177
         MVI   0(R15),C'*'     INSERT TRAILING MASK             GP09177
         MVI   1(R15),C'*'     INSERT TRAILING MASK             GP09177
COMMABLK DS    0H            NAME CONTAINS NOMASKS              GP09177
         LA    R0,DSNPARM                                       GP09177
         LA    R1,L'DSNPARM                                     GP09177
         LM    R14,R15,DB    USER'S DSN                         GP09177
         ICM   R1,8,BLANKS                                      GP09177
         MVCL  R14,R0        COPY CSI MASK                      GP09177
         B     EXIT                                             GP09177
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*  SPLIT STRING INTO SEPARATE QUALIFIERS, COUNT THE NUMBER OF        *
*  QUALIFIERS AND SET APPROPRIATE FLAG(S) FOR EACH ONE.              *
*                                                                    *
*--------------------------------------------------------------------*
         SPACE 1
INITDONE SLR   R5,R5                   CLEAR NODE COUNTER
         LA    R4,DSNTABS-LDSNTAB      DSN TABLE POINTER LESS 1 ENTRY
         USING STRQTAB,R4
         LA    R1,DSNPARM-1            DSN POINTER LESS 1 BYTE
         LH    R15,LVLMAX    GET MAXIMUM LENGTH OF ONE LEVEL
         MIN   R15,DB+4      LESS THAN 8 IF VOL REQUEST         GP08296
SPLOOP   LA    R1,1(,R1)               POINT TO 1ST CHAR IN NODE
         LR    R3,R1                   SAVE POINTER TO NODE
         LA    R4,LDSNTAB(,R4)         INCREMENT NODE TABLE POINTER
         LA    R5,1(,R5)               BUMP NODE COUNTER
         LA    R1,1(R15,R3)  END IF VOL OR MEM                  GP08296
         EX    R15,EXTRTDAT  FIND STOPPER USING DATA TABLE
         BNZ   SPFINDX       FOUND INDEX                        GP08296
         TM    CSWPFLGS,PFDSN        MEM OR VOL REQUEST ?       GP08328
         BNZ   INVDSN        NO; INVALID                        GP08296
         MVI   0(R1),C' '    FORCE STOPPER                      GP08296
SPFINDX  MVC   STRQUAL,BLANKS  CLEAR IT
         LR    R6,R1                   CALC NODE LENGTH
         SR    R6,R3
         STH   R6,STRQLEN
         CH    R6,LVLMIN     NOT TOO SHORT?
         BL    INVDSN        NODE TOO SHORT; IS GARBAGE
         BCTR  R6,0                    DECREMENT FOR EXECUTE
         EX    R6,EXMVCDAT             CAPTURE DSN NODE
         CLI   0(R1),C' '              ?-END OF DSN
         BNE   SPLOOP                   N-ITERATE FOR NEXT NODE
         OI    STRQFLAG,FDQ             Y-NODE IS FINAL DSN QUALIFIER
         ST    R5,NUMNODES             SAVE NODE COUNTER
         B     SPLITDON                RETURN TO CALLER
EXMVCDAT MVC   STRQUAL(*-*),0(R3)      CAPTURE DSN NODE
EXTRTDAT TRT   0(*-*,R3),DTAB     FIND NEXT SPACE OR PERIOD
         DROP  R4
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*  WHEN THE MASK CONTAINS A POSITIONAL (DISREGARD INDEX POINT) CHAR   *
*  (%), THEN WE DO NOT SPLIT INDEX LEVELS, BUT COMPARE BYTE BY BYTE   *
*                                                                     *
*   DATASET MASKS ARE PROCESSED AS FOLLOWS:                           *
*                                                                     *
*   1) A NAME WITHOUT WILDCARDS IS PROCESSED AS IS                    *
*   2) A ? MATCHES ANY CHARACTER OTHER THAN BLANK AND PERIOD          *
*   3) A % MATCHES ANY CHARACTER                                      *
*   4) A * MATCHES THE REMAINDER OF THE INDEX LEVEL                   *
*   5) A TRAILING ** MATCHES ANY NON-BLANKS                           *
*                                                                     *
*      ABC.DEF                      EXACT NAME; PROCESSED AS IS       *
*      ABC.DE*     MATCHES ABC.DEF, BUT NOT ABC.D OR ABC.DEF.G        *
*      ABC.???     MATCHES ABC.DEF, BUT NOT ABC.DE OR ABC.DEF.G       *
*      ABC.*.*     MATCHES ABC.DEF.G, BUT NOT ABC.DEF                 *
*      ABC.D**     MATCHES ABC.DE, ABC.DEF, ABC.DEF.G                 *
*      ABC.%%%%    MATCHES ABC.DEFG, ABC.DE.F, BUT NOT ABC.DEF.G      *
*      ABC.%%%%*   MATCHES ABC.DEF.G, ABC.DEF.GH, BUT NOT ABC.DEF.G.H *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
POSCOMP  LA    R0,1          SET INCREMENT
         LA    R1,L'DSNPARM-1+DSNPARM  SET END OF DSN
         LR    R2,R0         DITTO FOR MASK
         LA    R3,L'GENPARM  GET MASK LENGTH
         LA    R15,DSNPARM   POINT TO NAME TO BE CHECKED
         LA    R14,GENPARM   POINT TO MASK
         LA    R3,GENPARM-1(R3) LAST BYTE OF MASK
COMPMASK CLI   0(R14),C'%'   ACCEPT ANYTHING IN THIS POSITION?
         BE    BOTHUP        YES; INCREMENT MASK AND NAME
         CLC   0(1,R14),0(R15)  MASK AND DSN MATCH?
         BE    BOTHUP        YES; INCREMENT
         CLI   0(R14),C'?'   WITHIN LEVEL MATCH?
         BNE   COMPAST       NO; CHECK FOR ASTERISKS
         CLI   0(R15),C' '   IS THE DSNMASK FINISHED?
         BE    NOMATCH       YES; NOT MATCHED
         CLI   0(R15),C'.'   IS THE LEVEL FINISHED?
         BE    NOMATCH       YES; ALSO NO MATCH
         B     BOTHUP        ELSE ACCEPT AND INCREMENT
COMPAST  CLI   0(R14),C'*'   ASTERISK REQUEST?
         BNE   NOMATCH       NO; BYTE IS UNMATCHED
         CLI   1(R14),C'*'   GENERAL MATCH FROM HERE ON?
         BE    EXIT          YES; PROCESS
         CLI   1(R14),C' '   LIMIT TO THIS LEVEL?
         BNE   COMPASTL      NO
COMPASTB CLI   0(R15),C'.'   REACHED NEXT INDEX LEVEL?
         BE    NOMATCH       YES; NOT A MATCH
         CLI   0(R15),C' '   REACHED END OF NAME ?
         BE    EXIT          YES; FULL MATCH
         BXLE  R15,R0,COMPASTB  SKIP TO NEXT LEVEL
         B     EXIT          DSN MISSING LEVEL; ACCEPT
COMPASTL CLI   0(R15),C'.'   REACHED NEXT INDEX LEVEL?
         BE    BACKUP        YES; INCREMENT BOTH
         CLI   0(R15),C' '   REACHED END OF NAME ?
         BE    NOMATCH       YES; NOT A MATCH
         BXLE  R15,R0,COMPASTL  SKIP TO NEXT LEVEL
         B     NOMATCH       DSN MISSING LEVEL; NO ACCEPT
NOMATCH  OI    RETC+L'RETC-1,4  SHOW NO MATCH
         B     EXIT          EXIT UNMATCHED
         SPACE 1
BACKUP   BCTR  R15,0         NEED TO MATCH PERIODS
BOTHUP   BXH   R14,R2,EXIT    ACCEPT IF MASK EXHAUSTED
         BXLE  R15,R0,COMPMASK  ELSE TRY AGAIN
         B     EXIT          FULL MATCH
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*  SPLIT MASK INTO SEPARATE QUALIFIERS, COUNT NUMBER OF QUALIFIERS   *
*  AND SET APPROPRIATE FLAG(S)/VALUES FOR EACH ONE.                  *
*                                                                    *
*--------------------------------------------------------------------*
         SPACE 1
SPLITDON SR    R5,R5                   CLEAR NODE COUNT
         LA    R4,DSNTABS-LGENTAB
         AH    R4,=Y(GENTABS-DSNTABS)  GEN TABLE POINTER LESS 1 ENTRY
         USING GENQTAB,R4
         LA    R1,GENPARM-1            GENPARM POINTER LESS 1 BYTE
SPLOOP2  LA    R4,LGENTAB(,R4)         INCREMENT GEN TABLE POINTER
         LA    R5,1(,R5)               BUMP NODE COUNTER
SPLOOP3  LH    R15,LVLMAX    SET LENGTH FOR TRT
         LA    R7,SPLOOP2              SETUP NORMAL LOOP ADDRESS
         LA    R1,1(,R1)               POINT TO 1ST CHAR IN NODE
         LR    R3,R1                   SAVE POINTER TO NODE
         EX    R15,EXTRTMSK
         BZ    INVGEN                  NONE, GENERIC IS GARBAGE
         LR    R6,R1                   CALC NODE LENGTH
         SR    R6,R3
         ST    R6,GENNLEN
         BZ    INVGEN                  NULL NODE, GENERIC IS GARBAGE
         EX    R6,EXMVCMSK             CAPTURE NODE + PERIOD/BLANK
         LA    R8,GENNODE(R6)  GET LAST BYTE PASSED
         MVC   0(1,R8),LVLSEP  CHANGE POSS. BLANK TO REAL SEPARATOR
         BAS   R8,GENCALC              GO BUILD GENERIC TABLE ENTRY
         CLC   0(2,R3),DCAST2          ?-PSEUDO QUALIFIER
         BNE   REALQUAL                 N-CONTINUE, REAL QUALIFIER
         OI    TEMPFLAG,NOGENNUM        Y-DON'T COUNT GENERIC NODES
         OI    GENQFLAG,QSEARCH          -(RE)START POINT FOR SEARCH
         LA    R7,SPLOOP3                -DISCARD THE "**" QUALIFIER
REALQUAL CLI   0(R1),C' '              ?-END OF DSN
         BNER  R7                       N-ITERATE FOR NEXT NODE
         OI    GENQFLAG,FGQ             Y-NODE IS FINAL GEN QUALIFIER
         TM    TEMPFLAG,NOGENNUM       ?-DON'T COUNT GENERIC NODES
         BO    *+8                      Y-DON'T COUNT THEM
         ST    R5,NUMGENS               N-SAVE GENERIC NODE COUNTER
         CLC   0(2,R3),DCAST2          ?-PSEUDO QUALIFIER
         BNE   *+8                      N-CONTINUE, REAL QUALIFIER
         OI    GENQFLAG,PSEQ            Y-NODE IS PSEUDO QUALIFIER
SPGEXIT  B     PARSEDON                RETURN TO CALLER
EXMVCMSK MVC   GENNODE(*-*),0(R3)      CAPTURE NODE + PERIOD/BLANK
EXTRTMSK TRT   0(*-*,R1),DTAB   FIND NEXT SPACE OR PERIOD
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*  ANALYZE GENERIC QUALIFIER FOR ONE OF SEVEN DIFFERENT TYPES AND    *
*  BUILD AN ENTRY REPRESENTING THE QUALIFIER.                        *
*  THE DIFFERENT TYPES ARE:                                          *
*  1. **                                                             *
*  2. *                                                              *
*  3. AB*DE                                                          *
*  4. *BCDE                                                          *
*  5. ABCD*                                                          *
*  6. *BCD*                                                          *
*  7. ABCDE                                                          *
*  TYPE 1    = VARIABLE NUMBER OF QUALIFIERS MAY EXIST               *
*  TYPE 2    = MATCH EQUAL ON QUALIFIER OF ANY LENGTH OR CONTENT     *
*  TYPES 3-6 = VARIABLE LENGTH QUALIFIERS                            *
*  TYPE 7    = FIXED LENGTH QUALIFIER                                *
*  TYPES 3-7 MAY ALSO CONTAIN 0-8 "DON'T CARE" CHARACTERS (% ?)      *
*                                                                    *
*--------------------------------------------------------------------*
         SPACE 1
GENCALC  STM   R0,R15,GCSAVE           SAVE REGS
         CLI   GENNODE,C'*'            LEADING ASTERISK?
         BNE   CHKLCHAR                NO, GO GET LEADING CHARACTERS
         CLC   GENNODE(2),DCAST2       PSEUDO QUALIFIER?
         BNE   NOTPSE                  NO, TRY NEXT TEST
         CLC   GENNODE+2(1),LVLSEP     END OF QUALIFIER FOLLOWS?
         BNE   INVGEN                  NO, GENERIC IS INVALID
         B     GENRET                  DON'T HANDLE PSEUDOS HERE
         SPACE 1
NOTPSE   LA    R1,GENNODE              PREP PTR FOR TRAILING CHARS
         CLC   1(1,R1),LVLSEP          END OF QUALIFIER FOLLOWS?
         BNE   CHKTCHA2                NO, GO GET TRAILING CHARACTERS
         B     GENRET                  YES, WE'RE DONE WITH THIS ONE
CHKLCHAR LH    R15,LVLMAX
         LA    R1,GENNODE
         EX    R15,EXTRTAST
         LR    R8,R1                   CALC LENGTH OF LEADING CHARS
         LA    R0,GENNODE
         SLR   R8,R0                   . . .
         STH   R8,GENQLEN1             . . .
         OI    GENQFLAG,LCHAR          SPECIFIC LEADING CHARS EXIST
         BCTR  R8,0                    DECREMENT FOR EXECUTE
         EX    R8,GETQ1                GET THE LEADING COMPARE CHARS
         EX    R8,TRANQ1               CHANGE ALL % TO X'00'
         EX    R8,INITM1               COPY COMPARE CHARS TO MASK
         EX    R8,TRANM1               CHANGE ALL NON X'00' TO X'FF'
         CLI   0(R1),C'*'              QUAL TERMINATED BY ASTERISK?
         BE    CHKTCHAR                YES, GO CHECK TRAILING CHARS
         OI    GENQFLAG,ACHAR          NO, ALL CHARS MUST MATCH
         B     GENRET                  FINISHED WITH THIS QUALIFIER
         SPACE 1
CHKTCHAR CLC   1(1,R1),LVLSEP          END OF QUALIFIER FOLLOWS?
         BE    GENRET                  YES, DONE WITH THIS QUALIFIER
CHKTCHA2 LH    R15,LVLMAX
         LA    R3,1(,R1)               FIRST POSITION FOLLOWING ASTER
         EX    R15,EXTRTAST
         LR    R8,R1                   CALC LENGTH OF TRAILING CHARS
         SR    R8,R3                   . . .
         BZ    INVGEN                  ABCDEF** = INVALID
         STH   R8,GENQLEN2             . . .
         BCTR  R8,0                    DECREMENT FOR EXECUTE
         EX    R8,GETQ2                GET THE TRAILING COMPARE CHARS
         EX    R8,TRANQ2               CHANGE ALL % TO X'00'
         EX    R8,INITM2               COPY COMPARE CHARS TO MASK
         EX    R8,TRANM2               CHANGE ALL NON X'00' TO X'FF'
         CLI   0(R1),C'*'              QUAL TERMINATED BY ASTERISK?
         BE    CHKTVAL                 YES, GO CHECK VALIDITY
         OI    GENQFLAG,TCHAR          SPECIFIC TRAILING CHARS EXIST
         B     GENRET                  FINISHED WITH THIS QUALIFIER
         SPACE 1
CHKTVAL  CLC   1(1,R1),LVLSEP          END OF QUALIFIER FOLLOWS?
         BNE   INVGEN                  NO, *AB*CD = INVALID
         TM    GENQFLAG,LCHAR          LEADING CHARS ALSO?
         BO    INVGEN                  YES, AB*CD* = INVALID
GENRET   LH    R7,GENQLEN1             LENGTH 1ST STRING
         AH    R7,GENQLEN2             LENGTH 2ND STRING
         CH    R7,LVLMAX               TOTAL MORE THAN 8?
         BH    INVGEN                  YES, GENERIC IS INVALID
         LM    R0,R15,GCSAVE           RESTORE REGS
         BR    R8                      RETURN TO CALLER
GETQ1    MVC   GENQUAL1(*-*),GENNODE   GET CHARS PRIOR TO ASTERISK
TRANQ1   TR    GENQUAL1(*-*),TRANTAB1  CHANGE ALL % TO X'00'
INITM1   MVC   GENMASK1(*-*),GENQUAL1  INIT MASK W/TRANSLATED CHARS
TRANM1   TR    GENMASK1(*-*),TRANTAB2  CHANGE ALL BUT X'00' TO X'FF'
GETQ2    MVC   GENQUAL2(*-*),0(R3)     GET CHARS FOLLOWING ASTERISK
TRANQ2   TR    GENQUAL2(*-*),TRANTAB1  CHANGE ALL % TO X'00'
INITM2   MVC   GENMASK2(*-*),GENQUAL2  INIT MASK W/TRANSLATED CHARS
TRANM2   TR    GENMASK2(*-*),TRANTAB2  CHANGE ALL BUT X'00' TO X'FF'
EXTRTAST TRT   1(*-*,R1),GTAB     FIND ASTERISK OR END QUALIFIER
         DROP  R4
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*  COMPARE DSN QUALIFIERS AGAINST THE GENERIC QUALIFIERS             *
*                                                                    *
*--------------------------------------------------------------------*
         SPACE 1
PARSEDON ICM   R15,15,NUMGENS          SPECIFIC NUMBER NODES REQUIRED?
         BZ    CDSETUP                 NO, OH WELL, CONTINUE
         C     R15,NUMNODES            YES, DOES DSN HAVE THAT NUMBER?
         BNE   NOSELECT                NO, THIS WAS SURE AN EASY OUT
CDSETUP  LA    R15,DSNTABS
         LR    R14,R15
         AH    R14,=Y(GENTABS-DSNTABS) GEN TABLE POINTER
         USING GENQTAB,R14
         USING STRQTAB,R15
CDLOOP   TM    GENQFLAG,QSEARCH        THIS NODE A RESTART POINT?
         BNO   NORST                   NO, LEAVE RESTART ADDR AS IS
         ST    R14,GENSTART            YES, SET GENERIC RESTART POINT
         LA    R2,LDSNTAB(,R15)             SET DSN RESTART POINT
         TM    STRQFLAG,FDQ            FINAL DSN QUALIFIER DONE?
         BNO   *+6                     NO, CONTINUE
         SLR   R2,R2                   YES, DO NOT ALLOW DSN RESTART
         ST    R2,DSNSTART                  SAVE DSN RESTART POINT
NORST    BAS   R8,COMPQUAL             COMPARE A DSN/GENERIC QUALIFIER
         BNE   QFAIL                   DSN/GENERIC QUALIFIER MISMATCH
         TM    GENQFLAG,FGQ            FINAL GENERIC QUALIFIER DONE?
         BO    CHKEND1                 YES, GO CHECK ENDING STATUS
         LA    R14,LGENTAB(,R14)       BUMP TO NEXT GEN TABLE ENTRY
         TM    STRQFLAG,FDQ            FINAL DSN QUALIFIER DONE?
         BO    CHKEND2                 YES, GO CHECK ENDING STATUS
         LA    R15,LDSNTAB(,R15)       BUMP TO NEXT DSN TABLE ENTRY
         B     CDLOOP                  ITERATE COMPARE LOOP
*-----------------------------------------------------------*
* A DSN QUALIFIER DOES NOT MATCH ITS GENERIC QUALIFIER.              *
* IF WE ARE SEARCHING MULTIPLE DSN QUALIFIERS, RESTART THE           *
* SEARCH AT THE LAST KNOWN RESTART POINT.                            *
* IF NOT SEARCHING MULTIPLES, FAIL THIS DSN AND GET OUT.             *
*-----------------------------------------------------------*
         SPACE 1
QFAIL    ICM   R14,15,GENSTART         NEED TO RESTART SCAN?
         BZ    NOSELECT                NO, THIS DSN DONE FAILED
         ICM   R15,15,DSNSTART         DSN RESTART POINT OK?
         BZ    NOSELECT                NO, THIS DSN DONE FAILED
         B     CDLOOP
CDEXIT   B     EXIT
*-----------------------------------------------------------*
* FINAL GENERIC QUALIFIER SATISFIED. CHECK FOR END OF DSN            *
*-----------------------------------------------------------*
CHKEND1  TM    STRQFLAG,FDQ            FINAL DSN QUALIFIER DONE?
         BO    CDEXIT                  YES, DSN PASSED ALL THE TESTS
         TM    GENQFLAG,PSEQ           FINAL GEN QUALIFIER = PSEUDO?
         BO    CDEXIT                  YES, DSN PASSED ALL THE TESTS
         B     NOSELECT                NO, THIS DSN DONE FAILED
*-----------------------------------------------------------*
* END OF DSN REACHED. CHECK FOR PSUEDO GENERIC QUALIFIER.            *
*-----------------------------------------------------------*
CHKEND2  TM    GENQFLAG,PSEQ           FINAL GEN QUALIFIER = PSEUDO?
         BO    CDEXIT                  YES, DSN PASSED ALL THE TESTS
*NEXT*   B     NOSELECT                NO, THIS DSN DONE FAILED
         SPACE 1
NOSELECT MVI   RETC+3,4                DSN DID NOT PASS GENERIC TESTS
         B     CDEXIT                  GET OUT
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*  COMPARE A DSN QUALIFIER AGAINST ITS GENERIC COUNTERPART AND       *
*  RETURN CONDITION CODE ZERO IF THE DSN QUALIFIER MATCHES           *
*                                                                    *
*  SEE IF QUALIFIER LENGTHS ALONE DETERMINE MATCH/MISMATCH           *
*--------------------------------------------------------------------*
COMPQUAL LH    R7,GENQLEN1             LENGTH 1ST STRING
         LH    R2,GENQLEN2             LENGTH 2ND STRING
         ALR   R2,R7                   TOTAL LENGTH REQUIRED CHARS
         BZ    MATCH                   ZERO LENGTH=AUTOMATIC MATCH
         CH    R2,STRQLEN              DSN QUALIFIER LONG ENOUGH?
         BH    MISMATCH                NO, QUALIFIER CAN'T MATCH
         TM    GENQFLAG,ACHAR          ALL CHAR MATCH REQUIRED?
         BNO   ENDAC                   NO, SKIP LENGTH CHECK
         CH    R7,STRQLEN              YES, ARE LENGTHS EQUAL?
         BNE   MISMATCH                NO, QUALIFIER CAN'T MATCH
*-----------------------------------------------------------*
* SEE IF "LEADING" DSN CHARACTERS MATCH GENERIC SPEC                 *
*-----------------------------------------------------------*
ENDAC    TM    GENQFLAG,LCHAR          LEADING CHAR MATCH REQUIRED?
         BNO   ENDLC                   NO, SKIP LEADING COMPARE
         BCTR  R7,0                    DECREMENT FOR EXECUTE
         EX    R7,GETMASK1             SETUP "DON'T CARE" MASK
         EX    R7,GETQUAL1             MERGE DSN QUALIFIER W/MASK
         EX    R7,COMPARE1             DSN CHARS MATCH GENERIC?
         BNE   MISMATCH                NO, QUALIFIER DOESN'T MATCH
         TM    GENQFLAG,ACHAR          ALL CHAR MATCH REQUIRED?
         BO    MATCH                   YES, QUALIFIER MATCHES
*-----------------------------------------------------------*
* SEE IF "TRAILING" DSN CHARACTERS MATCH GENERIC SPEC                *
*-----------------------------------------------------------*
ENDLC    TM    GENQFLAG,TCHAR          TRAILING CHAR MATCH REQUIRED?
         BNO   ENDTC                   NO, SKIP TRAILING COMPARE
         LH    R7,GENQLEN2             LENGTH 2ND STRING
         LA    R1,STRQUAL              CALC PTR TO TRAILING DSN CHARS
         AH    R1,STRQLEN              . . .
         SLR   R1,R7                   . . .
         BCTR  R7,0                    DECREMENT FOR EXECUTE
         EX    R7,GETMASK2             SETUP "DON'T CARE" MASK
         EX    R7,GETQUAL2             MERGE DSN QUALIFIER W/MASK
         EX    R7,COMPARE2             DSN CHARS MATCH GENERIC?
         BE    MATCH                   YES, QUALIFIER MATCHES
         B     MISMATCH                NO, QUALIFIER DOESN'T MATCH
*-----------------------------------------------------------*
* SEE IF "MIDDLE" DSN CHARACTERS MATCH GENERIC SPEC                  *
*-----------------------------------------------------------*
ENDTC    LH    R2,STRQLEN              CALC LOOP COUNT FOR SCAN
         SH    R2,GENQLEN1             . . .
         LA    R2,1(R2)                . . .
         ST    R2,SCANCNT              . . .
         SLR   R2,R2                   CLEAR LOOP COUNTER
         LA    R1,STRQUAL              1ST CHAR OF DSN QUALIFIER
SCANLOOP EX    R7,GETMASK2             SETUP "DON'T CARE" MASK
         EX    R7,GETQUAL2             MERGE DSN QUALIFIER W/MASK
         EX    R7,COMPARE2             DSN CHARS MATCH GENERIC?
         BE    MATCH                   YES, QUALIFIER MATCHES
         C     R2,SCANCNT              NO, IS SCAN DONE YET?
         BNL   MISMATCH                YES, QUALIFIER DOESN'T MATCH
         LA    R1,1(R1)                BUMP DSN QUALIFIER POINTER
         LA    R2,1(R2)                BUMP LOOP COUNTER
         B     SCANLOOP                ITERATE SCAN LOOP
MATCH    CLR   R0,R0                   SET CONDITION CODE ZERO
         BR    R8                      RETURN TO CALLER
MISMATCH CLR   R14,R15                 SET CONDITION CODE NON-ZERO
         BR    R8                      RETURN TO CALLER
GETMASK1 MVC   COMPAREA(*-*),GENMASK1  GET THE "DON'T CARE" MASK
GETMASK2 MVC   COMPAREA(*-*),GENMASK2  GET THE "DON'T CARE" MASK
GETQUAL1 NC    COMPAREA(*-*),STRQUAL   MERGE DSN CHARACTERS W/MASK
GETQUAL2 NC    COMPAREA(*-*),0(R1)     MERGE DSN CHARACTERS W/MASK
COMPARE1 CLC   COMPAREA(*-*),GENQUAL1  DSN MATCHES GENERIC SPEC?
COMPARE2 CLC   COMPAREA(*-*),GENQUAL2  DSN MATCHES GENERIC SPEC?
         DROP  R14,R15
         SPACE 1
EXIT     L     R15,RETC      SET RETURN CODE
         LR    R1,R13        SAVE WORK AREA ADDRESS
         L     R13,4(,R13)   RESTORE USER'S SAVE AREA
         ST    R15,16(,R13)  RETURN RETURN CODE
         TM    CSWPFLGS-DYNAREA(R1),PFTEMP  TEMPORARY GETMAIN?
         BZ    EXITKEEP      NO; KEEP MY WORK AREA
         L     R0,=A(GWORKLEN)
         STORAGE RELEASE,ADDR=(1),LENGTH=(0)
EXITKEEP LM    R14,R12,12(R13) RESTORE ALMOST EVERYTHING ELSE
         BSM   0,R14         RETURN TO CALLER                   GP03047
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*  PROCESS ERROR CONDITIONS.                                         *
*                                                                    *
*--------------------------------------------------------------------*
INVDSN   MVI   RETC+3,8           RETURN CODE
         B     EXIT               RETURN TO CALLER
         SPACE 1
INVGEN   XC    GENPARM,GENPARM    ERASE BAD DSN FOR NEXT CALLER
         MVI   RETC+3,12          RETURN CODE
         B     EXIT               RETURN TO CALLER
         SPACE 2
**********************************************************************
**                                                                  **
**   STORAGE INITIALIZATION                                         **
**                                                                  **
**********************************************************************
         PUSH  USING
         DROP  R13
GETMEAN  L     R3,=A(GWORKLEN)   LOAD WORK AREA LENGTH
         STORAGE OBTAIN,LENGTH=(R3),BNDRY=PAGE,LOC=BELOW (S.A.)
         LR    R9,R1         PRESERVE IT
         SR    R15,R15       CLEAR LENGTH AND INSERTION
         LR    R2,R1         COPY ADDRESS
         MVCL  R2,R14        CLEAR IT
         USING DYNAREA,R9
         MVC   DCAST2(3),=C'** '
         MVC   BLANKS+1(L'BLANKS-1),BLANKS
         BR    R8            RETURN TO CALLER
         POP   USING
*--------------------------------------------------------------------*
*                                                                    *
*    REFERENCE DATA                                                  *
*                                                                    *
*--------------------------------------------------------------------*
         SPACE 1
TRANTAB1 DC    256AL1(*-TRANTAB1)  NON-TRANSLATION TABLE
         ORG   TRANTAB1+C'%'   POINT TO PERCENT SIGN
         DC    X'00'           CHANGE TO HEX ZERO
         ORG   TRANTAB1+C'?'   POINT TO QUESTION MARK
         DC    X'00'           CHANGE TO HEX ZERO
         ORG   ,
         SPACE 1
TRANTAB2 DC    X'00',255X'FF'
         SPACE 1
TRTMASK  DC    256AL1(0)     EVERYTHING IS VALID, EXCEPT:
         TRENT TRTMASK,12,C' '  BLANK ENDS THE MASK
         TRENT ,8,C'?',C'%',C'*'  MASK VALUES
         TRENT ,4,C'.'       INDEX LEVEL
         ORG   ,
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*              DSECTS                                                *
*                                                                    *
*--------------------------------------------------------------------*
*------------------------------------------------------------*
*           DEFINE A SINGLE GENERIC QUALIFIER                         *
*------------------------------------------------------------*
GENQTAB  DSECT
GENQLEN1 DS    H             LENGTH OF GENERIC QUALIFIER PART 1
GENQLEN2 DS    H             LENGTH OF GENERIC QUALIFIER PART 2
GENQFLAG DS    X             GENERIC QUALIFIER FLAG BITS
FGQ      EQU   X'80'         THIS IS THE FINAL GENERIC QUALIFIER
PSEQ     EQU   X'40'         THIS IS A PSEUDO GENERIC QUALIFIER
LCHAR    EQU   X'20'         LEADING CHARS MUST MATCH
TCHAR    EQU   X'10'         TRAILING CHARS MUST MATCH
ACHAR    EQU   X'08'         ALL CHARS MUST MATCH
QSEARCH  EQU   X'01'         THIS IS A RESTART POINT FOR SEARCH
         DS    3X            UNUSED
GENQUAL1 DS    CL(MAXSTLEN)  LEADING, OR ALL CHARACTERS
GENMASK1 DS    CL(MAXSTLEN)  "DON'T CARE" MASK FOR ABOVE CHARS
GENQUAL2 DS    CL(MAXSTLEN)  MIDDLE OR TRAILING CHARACTERS
GENMASK2 DS    CL(MAXSTLEN)  "DON'T CARE" MASK FOR ABOVE CHARS
LGENTAB  EQU   *-GENQTAB     LENGTH OF ONE ENTRY
*
*  FOR THE GENERIC QUALIFIER: % ARE CHANGED TO X'00'
*  FOR THE GENERIC MASK: % ARE X'00' AND ALL OTHER ARE X'FF'
*
*  EXAMPLE: ("-" REPRESENTS X'00' AND "+" REPRESENTS X'FF')
*
*  INPUT DSN QUAL WAS       "ABCXEYZH"
*  GENERIC WAS SPECIFIED AS "ABC%E%%H"
*  MASK WAS CREATED AS      "+++-+--+"
*  GENERIC WAS SAVED AS     "ABC-E--H"
*  THE "AND" CHANGES DSN TO "ABC-E--H"
*  WHEN THE ABOVE TWO ARE COMPARED, THEY ARE EQUAL.
         SPACE 2
*------------------------------------------------------------*
*           DEFINE A SINGLE DSN QUALIFIER                             *
*------------------------------------------------------------*
STRQTAB  DSECT
STRQLEN  DS    H             LENGTH OF DSN QUALIFIER
STRQFLAG DS    X             DSN QUALIFIER FLAG BITS
FDQ      EQU   X'80'         THIS IS THE LAST DSN QUALIFIER
         DS    5X            UNUSED
DSNQUAL  DS    0CL8          SPACE FOR DSN QUALIFIER
STRQUAL  DS    CL(MAXSTLEN)  SPACE FOR ACCOUNT QUALIFIER
LDSNTAB  EQU   *-STRQTAB     LENGTH OF ONE ENTRY
SUBCOMP  CSECT ,   DEFINE LDSNTAB BEFORE FIRST DC/DS REFERENCE
         SPACE 1
*--------------------------------------------------------------------*
*                                                                    *
*    DYNAMIC WORK AREA                                               *
*                                                                    *
*--------------------------------------------------------------------*
DYNAREA  DSECT ,
         DS    18A           LOCAL SAVE AREA (DEBUGGING, ETC.)
         SPACE 1
DCAST2   DC    0CL44' ',C'*'  1/3
DCAST1   DC    0CL44' ',C'*'  2/3
BLANKS   DC    CL44' '        3/3
         SPACE 1
LOCWORK  DS    0D
DB       DS    D             WORK AREA
RETC     DS    F
SCANCNT  DS    F
NUMNODES DC    F'0'              NUMBER OF DSN QUALIFIERS
NUMGENS  DC    F'0'              NUMBER OF GENERIC QUALIFIERS
GENSTART DS    A                 RESTART POINT IN GENERIC TABLES
DSNSTART DS    A                 RESTART POINT IN DSN TABLES
CSWPFLGS DS    X             PROCESSING FLAGS
PFACT    EQU   X'80'           PROCESS ACCOUNT MASK
PFDSN    EQU   X'40'           PROCESS DATA SET MASK
PFMEM    EQU   X'20'           PROCESS VOLUME OR MEMBER MASK    GP08328
PFOTH    EQU   X'02'           PROCESS SOMETHING ELSE
PFTEMP   EQU   X'01'           AREA WAS GETMAINED; FREE ON EXIT
TEMPFLAG DS    X
NOGENNUM EQU   X'80'             VARIABLE NUMBER OF NODES
SPGSAVE  DC    F'0'                    RETURN ADDRESS
CDSAVE   DC    F'0'                    RETURN ADDRESS
GCSAVE   DC    16F'0'                  REGS SAVED HERE
LVLMAX   DS    H             8 FOR DSN; 44 FOR ACT; 256 OTH
LVLMIN   DS    H             1 FOR DSN; 0 FOR REST
LVLSEP   DS    C             . OR , FOR LEVEL SEPARATOR
GENNODE  DC    XL(MAXSTLEN)'00' SPACE FOR GENERIC QUALIFIER/WORK AREA
GENNLEN  DC    F'0'              LENGTH OF GENERIC QUALIFIER ABOVE
COMPAREA DS    CL(MAXSTLEN)
FUNPARM  DS    CL3
DSNPARM  DS    CL(MAXSTLEN)  LOGICALLY 44 FOR DSN AND ACT REQUESTS
GENPARM  DS    CL(MAXSTLEN)
DTAB     DC    XL256'00'
GTAB     DC    XL256'00'
         SPACE 1
DSNTABS  DS    (NUMSTACK)XL(LDSNTAB)  SPACE FOR DSN/ACT QUALIFIERS
GENTABS  DS    (NUMSTACK)XL(LGENTAB)  SPACE FOR MASK QUALIFIERS
WORKEND  DS    0D        END OF DYNAMIC WORK AREA
LOCWKLEN EQU   *-LOCWORK  SIZE TO CLEAR EVERY ENTRY
GWORKLEN EQU   *-DYNAREA  SIZE TO GET/RELEASE
         SPACE 1
         PRINT NOGEN
         YREGS ,
         END ,
