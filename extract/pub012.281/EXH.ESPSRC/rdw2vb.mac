RDW2VB   TITLE 'R D W 2 V B  ***  Convert DS with RDW to RECFM=VB'
         PUNCH ' ORDER RDW2VB(P) '
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*   The problem is:  When you ftp a RECFM=VB data set to a PC
* as binary the default is to remove any record indicator.
* If locsite rdw or quote site rdw is specified then the
* RDW is saved but there is no standard way to return the
* data to the main frame and reconstruct a RECFM=VB data set.
*
*   This program will copy the binary data with RDWs to a
* RECFM=VB data set.
*
* SYSUT1 is input and will be opened as RECFM=U so that is what
* it should be.  I could support RECFM=VB but no reason to and
* that might confuse someone.
*
* SYSUT2 is output and will be opened as RECFM=VB and the JCL
* must specify the LRECL
*
* Written: 2008-10-21
*
* Blame: somitcw@yahoo.com
*
* R13 = Save and work area
* R12 = Program base register
* R11 = Location of current record in I/O area
* R10 = Length of data in the I/O area
* R9  = Top of 64K windows in I/O area
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
         PRINT NOGEN         Save a tree
RDW2VB   CSECT ,
         USING *,R15              Set temporary base register
         SAVE  (14,12),,'RDW2VB.&SYSDATE..&SYSTIME' Save reg.s
         DROP  R15                Drop the temporary base register
         LR    R12,R15            Load this program's base register
         USING RDW2VB,R12         Give the assembler the new base
         L     R0,WORKLEN         Load length to GETMAIN
         GETMAIN R,LV=(0)         Get memory for save and work area
         XC    0(256,R1),0(R1)    Clear first part of save/work area
         ST    R1,8(,R13)         Chain old and new save areas
         ST    R13,4(,R1)         Chain old and new save areas
         LR    R13,R1             Chain old and new save areas
         USING WORK,R13           Give the assembler save area base
         MVC   SYSUT1,UT1DUM      Copy input DCB template to work area
         MVI   OPENCLOS,X'80'     Initialize OPEN/CLOSE parameter list
         OPEN  SYSUT1,MF=(E,OPENCLOS)  OPEN the input file
         MVC   SYSUT2,UT2DUM      Copy output DCB template to work area
         MVI   OPENCLOS,X'80'     Initialize OPEN/CLOSE parameter list
         OPEN  (SYSUT2,OUTPUT),MF=(E,OPENCLOS)  OPEN the output file
*        MVC   SYSUT3,UT3DUM      Copy output DCB template to work area
*        MVI   OPENCLOS,X'80'     Initialize OPEN/CLOSE parameter list
*        OPEN  (SYSUT3,OUTPUT),MF=(E,OPENCLOS)  OPEN the trace file
         LA    R11,IOAREA         Initialize I/O record location
         SR    R10,R10            Initialize I/O record length in use
         LR    R9,R11             Find when to slide data in I/O area
         A     R9,F93304          Find when to slide data in I/O area
*        MVC   REGS(L'CREGS),CREGS  Put eye-catcher for registers
*        MVC   REGS+4(L'CREGS),CREGS  Put eye-catcher for registers
GET      DS    0H
         LA    R0,0(R10,R11)      Locate where to read a record to
         GET   SYSUT1,(0)         Read a block from the input file
         SR    R8,R8              Clear a work register
         ICM   R8,B'0011',SYSUT1+DCBLRECL-IHADCB  Get length of block
         AR    R10,R8             Add to length of data in I/O AREA
PUT      DS    0H
         C     R10,F4             ENSURE that we have at least 4 bytes
         BL    GET                Not 4 bytes, go get more data
         SR    R7,R7              Clear a work register
         ICM   R7,B'0011',0(R11)  Load current record length
* Next instruction is due to a bug in the free IND$FILE v1.1.1 that
* pads a few binary zeroes on the end of RECFM=U data sets.
         BZ    EODAD              If no data, go close files
         CR    R10,R7             See if complete record in memory
         BL    GET                Not full record, go get more data
         CLC   2(2,R11),F0        See if RDW bytes 3 and 4 are zero
         BNE   ABEND1             RDW not valid RECFM=VB so go abend
*        STM   R7,R6,REGS+8       Store registers for PUT
*        PUT   SYSUT3,REGS        Trace the registers
         PUT   SYSUT2,(R11)       Put current record
         LA    R11,0(R7,R11)      Bump to next record
         SR    R10,R7             Decrease size of data in I/O area
         CR    R11,R9             See if above window to slide data
         BL    PUT                Not above, go PUT next record
         C     R10,F4             ENSURE that we have at least 4 bytes
         BL    GET                Not 4 bytes, don't slide data yet
         LA    R2,IOAREA          Load address data is going to
         LR    R3,R10             Load length of output data
         LR    R4,R11             Load address data is coming from
         LR    R5,R10             Load length of input data
         MVCL  R2,R4              Slide data to start of I/O area
         LA    R11,IOAREA         Load new current record address
         B     PUT                Go to write the next record
*
ABEND1   DS    0H
         WTO   'RDW not valid for RECFM=VB so RDW2VB is abending',     C
               ROUTCDE=11
         WTO   'Perhaps data was not uploaded as RECFM=U ?',ROUTCDE=11
         WTO   'Perhaps data is RECFM=VBS instead of VB ?',ROUTCDE=11
         ABEND 1234,DUMP          Abend with a dump
*
EODAD    DS    0H
*        MVI   OPENCLOS,X'80'     Initialize OPEN/CLOSE parameter list
*        CLOSE SYSUT3,MF=(E,OPENCLOS)  Close trace file
         MVI   OPENCLOS,X'80'     Initialize OPEN/CLOSE parameter list
         CLOSE SYSUT2,MF=(E,OPENCLOS)  Close output file
         MVI   OPENCLOS,X'80'     Initialize OPEN/CLOSE parameter list
         CLOSE SYSUT1,MF=(E,OPENCLOS)  Close input file
         LR    R1,R13             Save save area address
         L     R13,4(,R13)        Restore the caller's save area addr.
         L     R0,WORKLEN         Load length to GETMAIN
         FREEMAIN R,LV=(0),A=(1)  Free save and work area
         RETURN (14,12),RC=0      Return to caller
         DROP   R12,R13           Drop all registers
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Data Control Blocks and Constants
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         DS    0D                Align DCBs on double word boundary
UT1DUM   DCB   DDNAME=SYSUT1,DSORG=PS,EODAD=EODAD,MACRF=GM,RECFM=U
UT1LEN   EQU   *-UT1DUM           Length of input DCB
UT2DUM   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM,RECFM=VB,BUFNO=1
UT2LEN   EQU   *-UT2DUM           Length of output DCB
* UT3DUM   DCB   DDNAME=SYSUT3,DSORG=PS,MACRF=PM,RECFM=F,LRECL=80,    C
*              BLKSIZE=80,BUFNO=1
* UT3LEN   EQU   *-UT3DUM           Length of output DCB
*
WORKLEN  DC    A(SAVELEN+196608)  Length of WORK DSECT
F93304   DC    F'93304'           To calculate address to read data to
F4       DC    F'4'               To compare for minimum LRECL
F0       DC    F'0'               To compare for valid RDW bytes 3 & 4
* CREGS    DC    C'REGS'            Constant to find registers
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Register save area and other DSECTs
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
WORK     DSECT ,
SAVEAREA DS    18F                Register save area
* REGS     DS    10D                C'REGS' and registers ( 80 bytes )
OPENCLOS DS    D                  OPEN/CLOSE parameter list
SYSUT1   DS    XL(UT1LEN)         Will be the input DCB
SYSUT2   DS    XL(UT2LEN)         Will be the output DCB
* SYSUT3   DS    XL(UT3LEN)         Will be the trace DCB
SAVELEN  EQU   *-WORK             Len.of save/work area before I/O area
IOAREA   DS    D                  Will be 196,608 bytes  ( 192KB ),
*                                 Which is 64KB times 3
*
         DCBD   DSORG=PS,DEVD=DA  DSECT for a sequential DCB
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Register equates
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         YREGS ,
         END   ,                  The end of the program
