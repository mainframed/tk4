SUBSERV  TITLE 'S U B S E R V  ***  @SERVICE ROUTINE INTERFACE'
         PUNCH ' ALIAS SUBSERVW,SUBSERVS,SUBSERVZ,SUBSERV0 '
         COPY  OPTIONGB
         SPACE 1
         SYSPARM LIST=YES
         SPACE 2
***********************************************************************
*                                                                     *
*        COPYRIGHT 2003  EXPERT SYSTEM PROGRAMMING                    *
*                        176 OLD STAGE COACH ROAD                     *
*                        BRADFORD, VT 05033-8844                      *
*                                                                     *
*                    ALL RIGHTS RESERVED                              *
*                                                                     *
***********************************************************************
*                                                                     *
*  ENTRY SUBSERV LOCATES OR LOADS @SERVICE, OR ITS SVC                *
*  IT USES THE TCBFSA POINTER TO LOCATE AND SET R7 (=@SRV) AND        *
*  GETMAINS A TASK SERVICE AREA, SAVED IN R8. (@BANDAID USES R6)      *
*                                                                     *
*  ENTRY SUBSERVW RETRIEVES INFORMATION FROM THE T.S.A., SUCH AS      *
*  LOADED MODULE ADDRESSES, AND GOTTEN WORK AREAS. IF NOT AVAILABLE,  *
*  A WORK AREA IS OBTAINED AND INITIALIZED.                           *
*  R0 (FIRST PARAMETER ON SERVWORK MACRO) SPECIFIES A QUOTED FOUR-    *
*  CHARACTER STRING (BLOCK ID), OR THE LOCATION CONTAINING THE STRING *
*  SPECIAL STRINGS ARE RESOLVED AT ASSEMBLY TIME TO FIXED OFFSETS IN  *
*  THE TSA.                                                           *
*                                                                     *
*  ENTRY SUBSERVS FUNCTIONS LIKE SUBSERVW, EXCEPT THAT IT USES WORK   *
*  AREAS CREATED BY HIGHER TASKS IF THEY EXIST.                       *
*                                                                     *
*  ENTRY SUBSERV0 LOCATES THE T.S.A., AND LOOPS THROUGH ALL ENTRIES   *
*  TO FREE ALLOCATED SPACE, AND THEN FREES THE T.S.A.                 *
*  (NOTE THAT IS DOES NOT CLOSE DCBS OR FREE MODULES - STILL NEED TO  *
*   ISSUE SERVTERM FOR THAT)                                          *
*                                                                     *
***********************************************************************
*DEBUG*  PRINT &PRTSOR
         SPACE 1
*---------------------------------------------------------------------*
*  SUBSERV - INITIALIZE @SERVICE ROUTINE INTERFACE.                   *
*    RETURNS @SERVICE ADDRESS IN R0, AND SETS CALLER'S 0(R1)-11(R1)   *
*---------------------------------------------------------------------*
         PUSH  USING
SUBSERV  START 0
ENTSERV  PGMBAKR AM=31       SAVE STATUS, ETC.
         LTCB  R4,USE=YES
         L     R5,TCBFSA
         N     R5,=X'00FFFFFF'  STRIP (POSSIBLE) TSO X'80'
         BNZ   HAVEFSA
*---------------------------------------------------------------------*
*  NO SAVE AREA IN TCB. WE'LL GET ONE (NEED AUTHORIZATION)            *
*---------------------------------------------------------------------*
         STORAGE OBTAIN,LENGTH=4*18,LOC=BELOW  GET AN FSA
         LR    R5,R1         COPY OVER
         XC    0(4*18,R5),0(R5)
         MODESET KEY=ZERO
         ST    R5,TCBFSA
         MODESET KEY=NZERO
*---------------------------------------------------------------------*
*  CHECK FOR ESTABLISHED TASK COMMON AREA                             *
*---------------------------------------------------------------------*
HAVEFSA  CLC   =C'@SRV',20+7*4(R5)  PREVIOUSLY INITIALIZED ?
         BNE   NEEDTSA       NO; NEED A TASK WORK AREA
         ICM   R6,15,20+8*4(R5)  IS THERE ONE ?
         BNZ   HAVETSA       YES
*---------------------------------------------------------------------*
*  OBTAIN AND CLEAR A TASK COMMON AREA                                *
*---------------------------------------------------------------------*
NEEDTSA  LA    R3,TSASIZE    GET REQUIRED SIZE
         STORAGE OBTAIN,LENGTH=(R3),LOC=BELOW
         LR    R2,R1
         SR    R15,R15
         MVCL  R2,R14        CLEAR IT
         LR    R6,R1         SAVE IT
         ST    R6,20+8*4(,R5)
         MVC   20+7*4(4,R5),=C'@SRV'
         USING TSASECT,R6
         LA    R3,TSASIZE    GET SIZE BACK                      GP03302
         STH   R3,TSA#SIZE   SAVE FOR CLEANUP                   GP03302
HAVETSA  ICM   R0,15,TSA@SERV  PREVIOUSLY LOADED @SERVICE ?
         BNZ   SUBSEXIT      YES; EXIT WITH ADDRESS
         MVC   TSAEXSVC(2),PATSVC   SAVE SVC IN TSA
         SPACE 1
*---------------------------------------------------------------------*
*  SEARCH THROUGH USER SVCS FOR OURS (+6 IS *ESPSVC*)                 *
*---------------------------------------------------------------------*
         L     R7,CVTPTR     GET THE CVT
         USING CVTMAP,R7     DECLARE IT
         ICM   R7,15,CVTABEND  GET SCVT
         BZ    NOSVC         THIS SYSTEM IS HOSED
         USING SCVTSECT,R7
         ICM   R7,15,SCVTSVCT  GET THE SVC TABLE
         BZ    NOSVC         THIS SYSTEM IS HOSED
         A     R7,=A(SVCENTLN*255)  POINT TO LAST SVC ENTRY
         LA    R0,128        SET MAXIMUM TO CHECK
         LA    R14,255       SET MAX VALID NUMBER
         SR    R14,R0        SAVE ADDEND
         SPACE 1
         USING SVCENTRY,R7   DECLARE ONE SVC ENTRY
LOOPSVC  L     R2,SVCEP      LOAD ENTRY POINT
         N     R2,=X'7FFFFFFE'  CLEAN IT
         BZ    BUMPSVC       TRY ANOTHER
         CLC   =X'0D5047F0',0(R2)  OUR @SERVICE SVC ?
         BNE   BUMPSVC       TRY ANOTHER
         CLC   =C'*ESPSVC*',6(R2)  REALLY OURS ?
         BE    FOUNDSVC      WHOOPPEE
BUMPSVC  S     R7,=A(SVCENTLN)  SPACE TO NEXT ENTRY
         BCT   R0,LOOPSVC    TRY AGAIN
         B     NOSVC         SVC NOT FOUND
         SPACE 1
FOUNDSVC AR    R0,R14        GET TRUE SVC NUMBER BACK
         STC   R0,TSAEXSVC+1  SAVE IT
         CLI   TSAEXSVC+1,0  LOCAL SVC DEFINED ?
         BE    NOSVC
         SR    R0,R0         REQUEST GETMAIN/INITIALIZATION
         EX    0,TSAEXSVC    CALL IT
         LTR   R15,R15       DID IT WORK ?
         BZ    COMMON        YES
         SPACE 1
*---------------------------------------------------------------------*
*  SVC NOT FOUND - LOAD THE SERVICE ROUTINE FROM LPA, IF AVAILABLE    *
*++++ NOTE THAT THIS MODE DOES NOT SUPPORT SOME FUNCTIONS NEEDING ++++*
*++++ AUTHORIZATION                                               ++++*
*---------------------------------------------------------------------*
NOSVC    LPALOOK EP=@SERVICE,DCB=4  LOCATE IN LPA OR LOAD       GP03262
         MVC   TSAEXSVC(2),PATBASSM  CHANGE SVC CALL TO EXEC
         SPACE 1
COMMON   O     R0,=X'80000000'  FORCE AMODE 31 ON BASSM
         ST    R0,TSA@SERV
         GETREG R1           GET CALLER'S R1 BACK
         LTR   R1,R1         INTERNAL RECURSION ?               GP03334
         BZ    SUBSEXIT      YES; AVOID 0C4                     GP03334
         MVC   0(L'TSA@SERV+L'TSAEXSVC,R1),TSA@SERV  RTN ADDRESS & CALL
         ST    R6,8(,R1)     SAVE IN @SERVTSA
SUBSEXIT LR    R1,R6         RETURN TSA IN R1, @SERVICE IN R0
         PGMBAND ,           RETURN TO CALLER
         POP   USING
         SPACE 1
PATSVC   SVC   0             PATTERN - INVOKE IGC00NNN *ESPSVC*
         AIF   (&MVSESA).NEWBASS
PATBASSM BALR  R14,R15       PATTERN - INVOKE @SERVICE          GP04234
         AGO   .OLDBASS                                         GP04234
.NEWBASS ANOP  ,                                                GP04234
PATBASSM BASSM R14,R15       PATTERN - INVOKE @SERVICE
.OLDBASS EJECT ,                                                GP03312
*---------------------------------------------------------------------*
*  SUBSERVS - ADDRESS OF REQUESTED ID IN R0, OR RELATIVE POINTER      *
*    (0-255) FOR A DEFINED FUNCTION. R1 - SUBPOOL AND LENGTH OF       *
*  >>>NOTE<<< THIS FUNCTION DIFFERS FROM SUBSERVW IN THAT IT USES AN  *
*    EXISTING WORK AREA, FOR THE SAME FUNCTION, FROM A HIGHER LEVEL   *
*    TASK. USUALLY THE JOBSTEP TCB CREATES THE AREA SHARED BY LOWER   *
*    USERS.                                                           *
*                                                                     *
*  R1 - RETURNS WORK AREA ADDRESS                                     *
*---------------------------------------------------------------------*
         PUSH  USING                                            GP03312
         ENTRY SUBSERVS                                         GP03312
SUBSERVS PGMBAKR AM=31       SAVE STATUS, ETC.
         SR    R9,R9         SET RETURN CODE                    GP03312
         LTCB  R8,USE=YES                                       GP03312
FUNSREST L     R5,TCBFSA                                        GP03312
         N     R5,=X'00FFFFFF'  STRIP (POSSIBLE) TSO X'80'      GP03312
         BZ    FUNSINIT                                         GP03312
         CLC   =C'@SRV',20+7*4(R5)  PREVIOUSLY INITIALIZED ?    GP03312
         BNE   FUNSINIT      NO; NEED A TASK WORK AREA          GP03312
         ICM   R6,15,20+8*4(R5)  IS THERE ONE ?                 GP03312
         BNZ   FUNSHTSA      YES                                GP03312
FUNSINIT L     R15,=A(SUBSERV)                                  GP03312
         SR    R1,R1         SIGNAL NO RETURN WANTED            GP03334
         BASR  R14,R15       DO INITIALIZATION                  GP03312
         B     FUNSREST                                         GP03312
         SPACE 1                                                GP03312
FUNSHTSA GETREG R0,R1        RESTORE CALLER'S R0 AND R1         GP03312
         LR    R3,R1         SAVE LENGTH FOR OBTAIN             GP03312
         LR    R4,R0         SAVE WORKID FOR OBTAIN             GP03312
         CH    R4,=H'256'    FIXED ELEMENT REQUEST ?            GP03312
         BL    FUNSFIXD      YES; SET ADDRESS                   GP03312
         ICM   R4,15,0(R4)   LOAD VALUE                         GP03312
         CH    R4,=H'256'    FIXED ELEMENT REQUEST ?            GP03312
         BL    FUNSFIXD      YES; SET ADDRESS                   GP03312
         LA    R7,TCBFSA-TCB(,R8)  POINT TO CHAIN HEAD          GP03312
         LA    R7,0(,R7)     CLEAN IT JUST IN CASE              GP04059
FUNSINTL L     R6,0(,R7)     NEXT ENTRY ADDRESS                 GP04059
         LA    R6,0(,R6)     CLEAN IT                           GP04059
         LTR   R6,R6         END OF CHAIN ?                     GP04059
         BZ    FUNSLTCB      YES; CHECK FOR HIGHER TCB          GP03312
         USING FSAWORK,R6    DECLARE IT                         GP03312
         CL    R4,FSAID      SAME ID ?                          GP03312
         BE    FUNSWHAV      YES; USE IT                        GP03312
         LR    R7,R6         SWAP                               GP03312
         B     FUNSINTL      TRY AGAIN                          GP03312
         SPACE 1                                                GP03312
FUNSFIXD MH    R4,=Y(L'TSAFIX@)  CONVERT FIXED INDEX TO OFFSET  GP03312
         USING TSASECT,R6                                       GP03312
         LA    R7,TSAFIX@(R4)    POINT TO FIXED ROOT            GP03312
         ICM   R6,15,0(R7)   LOAD AND TEST                      GP03312
         BNZ   FUNSWHAV      HAVE IT                            GP03312
         SPACE 1                                                GP03312
FUNSLTCB CL    R8,TCBJSTCB   TOP OF CHAIN ?                     GP03312
         BE    FUNSTTCB      YES; GET FOR THIS TCB              GP03312
         ICM   R8,15,TCBOTC  ELSE GET HIGHER TCB                GP03312
         BNZ   FUNSHTSA      AND TRY AGAIN                      GP03312
         SPACE 1                                                GP03312
FUNSTTCB LTCB  R8            RELOAD CURRENT TCB                 GP03312
         LA    R7,TCBFSA-TCB(,R8)  POINT TO CHAIN HEAD          GP03312
         USING FSAWORK,R6    DECLARE IT                         GP03312
         SPACE 1                                                GP03312
FUNSWGET LR    R2,R3         GET LENGTH FROM CALLER             GP03312
         SR    R15,R15       PRESET RETURN CODE                 GP03312
         STORAGE OBTAIN,LENGTH=(R2),COND=YES,LOC=BELOW          GP03312
         BXLE  R15,R15,FUNSWKIN  CLEAR IT                       GP03312
         LA    R15,16        SET MAJOR ERROR                    GP03312
         SR    R0,R0         INDICATE ENVIRONMENT (PGM ERROR)   GP03312
         SR    R1,R1         NO ADDRESS PASSED BACK             GP03312
         B     FUNSEXIT      RETURN WITH ERROR                  GP03312
         SPACE 1                                                GP03312
         DROP  R6                                               GP03312
         USING FSAWORK,R7                                       GP03312
FUNSWKIN MVC   FSALINK-FSAWORK(4,R1),FSALINK  CHAIN OLD AREA    GP03312
         ST    R1,FSALINK    CHAIN THIS AHEAD OF OLD ONE        GP03312
         ST    R2,4(,R7)     SAVE LENGTH ALSO                   GP03302
         DROP  R7                                               GP03312
         USING FSAWORK,R6                                       GP03312
         LR    R6,R1         COPY THIS ONE TO PERMANENT REGISTER
         LA    R14,4(,R1)    START TO CLEAR AFTER LINK FIELD    GP03312
         LR    R15,R2        GET LENGTH                         GP03312
         SH    R15,=Y(4)     ADJUST LENGTH                      GP03312
         SR    R0,R0                                            GP03312
         SR    R1,R1                                            GP03312
         MVCL  R14,R0        CLEAR IT                           GP03312
         ST    R4,FSAID      SET ID OF THIS AREA (@PAR)         GP03312
         ST    R2,FSASPLEN   SAVE GETMAIN LENGTH                GP03312
         ST    R8,FSATCB     AND TCB                            GP03312
         LA    R9,4          SET RC=4 - WORK AREA OBTAINED      GP03312
FUNSWHAV LR    R1,R6         RETURN FSA ADDRESS                 GP03312
         LR    R15,R9        SET RETURN CODE                    GP03312
         LA    R0,FSAPFXL(,R1)  SPACE PAST PREFIX               GP03312
FUNSEXIT PGMBAND ,           RETURN TO CALLER                   GP04234
         POP   USING                                            GP03312
         EJECT ,
*---------------------------------------------------------------------*
*  SUBSERVW - ADDRESS OF REQUESTED ID IN R0, OR RELATIVE POINTER      *
*    (0-255) FOR A DEFINED FUNCTION. R1 - SUBPOOL AND LENGTH OF       *
*    WORK AREA.                                                       *
*                                                                     *
*  R1 - RETURNS WORK AREA ADDRESS                                     *
*---------------------------------------------------------------------*
         PUSH  USING
         ENTRY SUBSERVW
SUBSERVW PGMBAKR AM=31       SAVE STATUS, ETC.
         SR    R9,R9         SET RETURN CODE
         LTCB  R8,USE=YES
FUNWREST L     R5,TCBFSA                                        GP03312
         N     R5,=X'00FFFFFF'  STRIP (POSSIBLE) TSO X'80'
         BZ    FUNWINIT                                         GP03312
         CLC   =C'@SRV',20+7*4(R5)  PREVIOUSLY INITIALIZED ?
         BNE   FUNWINIT      NO; NEED A TASK WORK AREA          GP03312
         ICM   R6,15,20+8*4(R5)  IS THERE ONE ?
         BNZ   FUNWHTSA      YES                                GP03312
FUNWINIT L     R15,=A(SUBSERV)                                  GP03312
         SR    R1,R1         SIGNAL NO RETURN WANTED            GP03334
         BASR  R14,R15       DO INITIALIZATION
         B     FUNWREST                                         GP03312
         SPACE 1
FUNWHTSA GETREG R0,R1        RESTORE CALLER'S R0 AND R1         GP03312
         LR    R3,R1         SAVE LENGTH FOR OBTAIN
         LR    R4,R0         SAVE WORKID FOR OBTAIN
         CH    R4,=H'256'    FIXED ELEMENT REQUEST ?
         BL    FUNWFIXD      YES; SET ADDRESS                   GP03312
         ICM   R4,15,0(R4)   LOAD VALUE
         CH    R4,=H'256'    FIXED ELEMENT REQUEST ?
         BL    FUNWFIXD      YES; SET ADDRESS                   GP03312
         LA    R7,TCBFSA-TCB(,R8)  POINT TO CHAIN HEAD          GP03312
         LA    R7,0(,R7)     CLEAN IT JUST IN CASE              GP04059
FUNWINTL L     R6,0(,R7)     NEXT ENTRY ADDRESS                 GP04059
         LA    R6,0(,R6)     CLEAN IT                           GP04059
         LTR   R6,R6         END OF CHAIN ?                     GP04059
         BZ    FUNWWGET      YES; GET A WORK AREA               GP03312
         USING FSAWORK,R6    DECLARE IT
         CL    R4,FSAID      SAME ID ?
         BE    FUNWWHAV      YES; USE IT                        GP03312
         LR    R7,R6         SWAP
         B     FUNWINTL      TRY AGAIN                          GP03312
         SPACE 1
FUNWFIXD MH    R4,=Y(L'TSAFIX@)  CONVERT FIXED INDEX TO OFFSET  GP03312
         USING TSASECT,R6
         LA    R7,TSAFIX@(R4)    POINT TO FIXED ROOT
         ICM   R6,15,0(R7)   LOAD AND TEST
         BNZ   FUNWWHAV      HAVE IT                            GP03312
         USING FSAWORK,R6    DECLARE IT
         SPACE 1
FUNWWGET LR    R2,R3         GET LENGTH FROM CALLER             GP03312
         SR    R15,R15       PRESET RETURN CODE
         STORAGE OBTAIN,LENGTH=(R2),COND=YES,LOC=BELOW
         BXLE  R15,R15,FUNWWKIN  CLEAR IT                       GP03312
         LA    R15,16        SET MAJOR ERROR
         SR    R0,R0         INDICATE ENVIRONMENT (PGM ERROR)
         SR    R1,R1         NO ADDRESS PASSED BACK
         B     FUNWEXIT      RETURN WITH ERROR                  GP03312
         SPACE 1
         DROP  R6
         USING FSAWORK,R7
FUNWWKIN MVC   FSALINK-FSAWORK(4,R1),FSALINK  CHAIN OLD AREA    GP03312
         ST    R1,FSALINK    CHAIN THIS AHEAD OF OLD ONE
         ST    R2,4(,R7)     SAVE LENGTH ALSO                   GP03302
         DROP  R7
         USING FSAWORK,R6
         LR    R6,R1         COPY THIS ONE TO PERMANENT REGISTER
         LA    R14,4(,R1)    START TO CLEAR AFTER LINK FIELD
         LR    R15,R2        GET LENGTH
         SH    R15,=Y(4)     ADJUST LENGTH
         SR    R0,R0
         SR    R1,R1
         MVCL  R14,R0        CLEAR IT
         ST    R4,FSAID      SET ID OF THIS AREA (@PAR)
         ST    R2,FSASPLEN   SAVE GETMAIN LENGTH
         ST    R8,FSATCB     AND TCB
         LA    R9,4          SET RC=4 - WORK AREA OBTAINED
FUNWWHAV LR    R1,R6         RETURN FSA ADDRESS                 GP03312
         LR    R15,R9        SET RETURN CODE
         LA    R0,FSAPFXL(,R1)  SPACE PAST PREFIX
FUNWEXIT PGMBAND ,           RETURN TO CALLER                   GP04234
         POP   USING
         EJECT ,                                                GP03312
*---------------------------------------------------------------------*
*  SUBSERVZ - ADDRESS OF REQUESTED ID IN R0, OR RELATIVE POINTER      *
*    (0-255) FOR A DEFINED FUNCTION. R1 - ADDRESS OF WORK AREA        *
*    TO BE FREED (OR 0)                                               *
*                                                                     *
*  RELEASES A PREVIOUSLY OBTAINED WORK AREA                           *
*---------------------------------------------------------------------*
         PUSH  USING
         ENTRY SUBSERVZ
SUBSERVZ PGMBAKR AM=31       SAVE STATUS, ETC.
         LA    R9,16         PROVISIONALLY SET MAJOR ERROR
         LTCB  R8,USE=YES
         L     R5,TCBFSA
         N     R5,=X'00FFFFFF'  STRIP (POSSIBLE) TSO X'80'
         BZ    FUNZEXIT                                         GP03312
         CLC   =C'@SRV',20+7*4(R5)  PREVIOUSLY INITIALIZED ?
         BNE   FUNZEXIT      NO; NEED A TASK WORK AREA          GP03312
         ICM   R6,15,20+8*4(R5)  IS THERE ONE ?
         BZ    FUNZEXIT      NO?                                GP03312
         SPACE 1
         LR    R3,R1         SAVE ADDRESS FOR RELEASE
         LR    R4,R0         SAVE WORKID FOR SEARCH
         CH    R4,=H'256'    FIXED ?
         BL    FUNZFREE      YES; FREE IT                       GP03312
         ICM   R4,15,0(R4)   LOAD VALUE
         CH    R4,=H'256'    FIXED ?
         BL    FUNZFREE      YES; FREE IT                       GP03312
         LA    R7,TCBFSA-TCB(,R8)  POINT TO CHAIN HEAD
         LA    R7,0(,R7)     CLEAN IT JUST IN CASE              GP04059
FUNZLOOP L     R6,0(,R7)     NEXT ENTRY ADDRESS                 GP04059
         LA    R6,0(,R6)     CLEAN IT                           GP04059
         LTR   R6,R6         END OF CHAIN ?                     GP04059
         BZ    FUNZEXIT      YES; MAJOR ERROR                   GP03312
         USING FSAWORK,R6    DECLARE IT
         CL    R4,FSAID      SAME ID ?
         BE    FUNZHAVE      YES; USE IT                        GP03312
         LR    R7,R6         SWAP
         B     FUNZLOOP      TRY AGAIN                          GP03312
         SPACE 1
         USING TSASECT,R6
FUNZFREE MH    R4,=Y(L'TSAFIX@)  CONVERT FIXED INDEX TO OFFSET  GP03312
         LA    R7,TSAFIX@(R4)    POINT TO FIXED ROOT
         ICM   R6,15,0(R7)   LOAD AND TEST
         BZ    FUNZEXIT      MAJOR ERROR (OR ALREADY FREED?)    GP03312
         USING FSAWORK,R6    DECLARE IT
FUNZHAVE C     R8,FSATCB     CORRECT TASK RELEASING THIS ?      GP03312
         BNE   FUNZEXIT      NO; FAIL                           GP03312
         LTR   R3,R3         DID USER PASS WORK AREA ADDRESS ?
         BZ    FUNZFFSA      NO; JUST FREE IT                   GP03312
         CR    R3,R6         MATCHES ?
         BE    FUNZFFSA      YES; FREE IT                       GP03312
         SH    R3,=Y(FSAPFXL)   SEE IF USER SKIPPED HEADER
         CR    R3,R6         MATCHES NOW ?
         BNE   FUNZEXIT      NO; FAIL                           GP03312
FUNZFFSA SR    R2,R2         CLEAR FOR IC                       GP03312
         SR    R15,R15
         ICM   R2,7,FSASPLEN+1  AND LENGTH
         BZ    FUNZFSA0                                         GP03312
         IC    R15,FSASPLEN  GET SUBPOOL                        GP03312
         STORAGE RELEASE,LENGTH=(R2),ADDR=(R6),SP=(R15)
         LR    R9,R15        PASS RETURN CODE
FUNZFSA0 XC    0(8,R7),0(R7)  CLEAR OLD ENTRY                   GP03303
FUNZEXIT LR    R15,R9        SET RETURN CODE                    GP03312
         PGMBAND ,           RETURN TO CALLER                   GP04234
         POP   USING
         EJECT ,                                                GP03302
*---------------------------------------------------------------------*
*  SUBSERV0 - FREE ALLOCATED STORAGE AREAS IN T.S.A., THEN FREE T.S.A *
*---------------------------------------------------------------------*
         PUSH  USING                                            GP03302
         ENTRY SUBSERV0                                         GP03302
SUBSERV0 PGMBAKR AM=31       SAVE STATUS, ETC.
         LTCB  R4,USE=YES                                       GP03302
         L     R5,TCBFSA                                        GP03302
         N     R5,=X'00FFFFFF'  STRIP (POSSIBLE) TSO X'80'      GP03302
         BZ    FUN0EXIT      NO TSA; NOTHING TO DO - EXIT       GP03302
*---------------------------------------------------------------------*
*  CHECK FOR ESTABLISHED TASK COMMON AREA                             *
*---------------------------------------------------------------------*
         CLC   =C'@SRV',20+7*4(R5)  PREVIOUSLY INITIALIZED ?    GP03302
         BNE   FUN0EXIT      NO; NOTHING TO DO HERE             GP03302
         ICM   R6,15,20+8*4(R5)  IS THERE ONE ?                 GP03302
         BZ    FUN0EXIT      NO; NOTHING TO DO HERE             GP03302
         USING TSASECT,R6                                       GP03302
*---------------------------------------------------------------------*
*  LOOP THROUGH CLIENT FSA ENTRIES IN TSA AND FREE THEM               *
*---------------------------------------------------------------------*
         LA    R7,TSAFIX@    GET FIRST FSA SLOT                 GP03302
         LH    R8,TSA#SIZE   GET TSA SIZE GOTTEN                GP03302
         SH    R8,=AL2(TSAFIX@-TSASECT)  LESS OVERHEAD          GP03302
         BNP   FUN0FREE      OOPS (OLD, OLD VERSION ?)          GP03302
         SRL   R8,3          CONVERT SIZE TO COUNT              GP03302
         SR    R9,R9         ID PASSED TO FSA RELEASE           GP03302
FUN0LOOP ICM   R1,15,0(R7)   GET THE ADDRESS                    GP03302
         BZ    FUN0BUMP      NONE; TRY NEXT                     GP03302
         USING FSAWORK,R1    DECLARE THE PREFIX                 GP03302
         L     R0,FSAID      GET ID                             GP03302
         L     R15,=A(SUBSERVZ)  POINT TO FSA FREE ROUTINE      GP03302
         BASR  R14,R15       FREE THIS ENTRY                    GP03302
         BXLE  R15,R15,FUN0BUMP                                 GP03302
         SR    R1,R1                                            GP03302
         LR    R0,R9         ELSE TRY TO DELETE BY COUNT        GP03302
         L     R15,=A(SUBSERVZ)  POINT TO FSA FREE ROUTINE      GP03302
         BASR  R14,R15       FREE THIS ENTRY                    GP03302
FUN0BUMP LA    R9,1(,R9)     INCREASE THE ID                    GP03302
         LA    R7,L'TSAFIX@(,R7)  GO TO NEXT ENTRY              GP03302
         BCT   R8,FUN0LOOP   RELEASE THE NEXT ONE               GP03302
*---------------------------------------------------------------------*
*  FREE T.S.A. AND ZERO THE POINTER IN THE TCB SAVE AREA              *
*---------------------------------------------------------------------*
FUN0FREE LA    R3,TSASIZE    GET (PRESUMED) TSA SIZE            GP03302
         STORAGE RELEASE,LENGTH=(R3),ADDR=(R6)  FREE THE TSA    GP03302
         SR    R15,R15                                          GP03302
         ST    R15,20+8*4(,R5)  CLEAR TSA POINTER               GP03302
*---------------------------------------------------------------------*
*  RETURN TO CALLER                                                   *
*---------------------------------------------------------------------*
FUN0EXIT GETREG R0,R1        RESTORE R0 AND R1                  GP03302
         SR    R15,R15       SET GOOD RETURN                    GP03302
         PGMBAND ,           RETURN TO CALLER                   GP04234
         POP   USING                                            GP03302
         SPACE 1
         PRINT &PRTMAC
TSASECT  MAPTSA ,            EXPAND @SERVICE SUPPORT AREA
         SPACE 1
         FSAWORK ,           USER'S MAY BE LONGER
         SPACE 1                                                 82165
         IHASVC ,            COPY SVC ENTRY MAPPING              82165
SVCENTLN EQU   *-SVCENTRY    LENGTH OF ONE ENTRY                 88074
         SPACE 1
         PRINT &PRTSYS
         CVT   DSECT=YES
         SPACE 1
         IHASCVT ,
         SPACE 1
         IHACDE ,
         SPACE 1
         IKJTCB ,
         SPACE 1
         IHAPSA ,
         SPACE 1
SAVE     DSECT ,             FOR PGMBAKR/PGMHEAD EXPANSION
SAVEEND  EQU   *             FOR PGMBAKR/PGMHEAD EXPANSION
         END   ,
