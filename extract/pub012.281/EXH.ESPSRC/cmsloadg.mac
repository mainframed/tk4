CMSL     TITLE 'C M S L O A D  ***  RELOAD (SOME) CMS DUMP TAPES'
         COPY  OPTIONGB
         SPACE 1
         SYSPARM LIST=YES
         SPACE 1
***********************************************************************
*                                                                     *
*        COPYRIGHT 1986  EXPERT SYSTEM PROGRAMMING, INC.              *
*        COPYRIGHT 2003  EXPERT SYSTEM PROGRAMMING                    *
*                        176 OLD STAGE COACH ROAD                     *
*                        BRADFORD, VT 05033-8844                      *
*                                                                     *
*                    ALL RIGHTS RESERVED                              *
*                                                                     *
***********************************************************************
         EJECT ,
*        THIS PROGRAM IS INTENDED FOR RELOADING CMS DUMP TAPES WITH
*        FUNNY FORMATS. THE AUTHOR HAS NEVER SEEN THE RELEVANT CMS
*        DOCUMENTATION, AND MAKES NO WARRANTY THAT THE PROGRAM WILL
*        DO ANYTHING USEFUL, AND NOT DO ANY HARM.
*
*    REQUIRED DD CARDS:
*
*        INPUT - INPUT FILE(S), RECFM U, BLKSIZE<=4101 (UNLIKE CONC OK)
*
*        OUTPUT - PATTERN DD CARD. THE DSN IS TAKEN AS THE PREFIX
*              TO THE CMS NAME.  THE PREFIX+'CMSLOAD' MUST NOT EXIST,
*              AS IT IS USED AS A TEMPORARY NAME UNTIL THE CMSN RECORD
*              IS FOUND. VOLUME, SPACE, EXPIRATION ARE USED. THE DSN
*              IS COPIED, DISP MUST BE OLD, SPACE RLSE IS FORCED.
*
*        THE PROGRAM ALLOCATES A FILE NAMED <PREFIX>.CMSLOAD, WHICH
*        IS WRITTEN INTO UNTIL A .CMSN BLOCK IS FOUND. THE NAME FROM
*        THE BLOCK, AND THE FILE TYPE, ARE APPENDED TO THE PREFIX:
*        <PREFIX>.NAME[.TYPE]  THE CMSLOAD FILE IS THEN RENAMED. IF
*        THE RENAME FAILS, A NAME OF THE FORM <PREFIX>.CMS##### IS
*        TRIED. IF THAT ALSO FAILS, THE FILE IS LEFT AS CMSLOAD, AND
*        EXECUTION TERMINATES. OTHERWISE A NEW .CMSLOAD FILE IS GOTTEN,
*        AND THE NEXT (LOGICAL) FILE IS PROCESSED.
         SPACE 2
         PRINT &PRTSOR
CMSLOAD  SAVEM ZERO15,BASE=R11,BASE2=R12,PARM=R9,BNDRY=PAGE *NEW 86185
         SPACE 1
         SERVINIT ,          LOAD THE SERVICE ROUTINE
         MVI   BLANKS,C' '   INITIALIZE
         MVC   BLANKS+1(L'BLANKS-1),BLANKS  COMPLETELY
         SERVCALL LPALD,=CL8'@PRINTER'  GET THE PRINTER SERVICE
         ST    R0,@PRINTER   STASH IT
         PRTOPEN SYSPRINT    OPEN THE PRINT FILE
         PRTV  HEADER,TITLE=1  MAKE A TITLE
         SERVCALL LPALD,=CL8'@DCBEXIT'
         STCM  R0,7,EXLIST+1
         STCM  R0,7,EXLUST+1
         LA    R0,INFMJFCB   GET THE JFCB ADDRESS
         STCM  R0,7,4+1+EXLUST  STASH IT IN EXIT LIST
         LA    R0,99         SET FUNNY ERROR CODE
         ST    R0,RENCC      PRESET ERROR CODE
         ST    R0,CATCC
         SERVCALL RJFCB,OUTPUT+DCBDDNAM-IHADCB  WAS OUTPUT DD GIVEN ?
         BXLE  R15,R15,HAVEOUT  YES
BADOUT   PRTL  '*** OUTPUT DD CARD NOT USABLE ***',CC=NO        GP02325
         B     EXIT16
HAVEOUT  MVC   INFMJFCB(JFCBLGTH),0(R1) MOVE TO MY SPACE
         SERVCALL TIODD,OUTPUT+DCBDDNAM-IHADCB  GET OUTPUT TIOT
         LTR   R1,R0         LOAD AND TEST R0
         BZ    BADOUT        NOT FOUND ?
         USING TIOENTRY,R1   DECLARE IT
         CLI   TIOELNGH,20   SINGLE UCB ENTRY ?
         BNE   BADOUT        NO
         ICM   R3,7,TIOEFSRT  CHECK THE UCB
         BZ    BADOUT        DUMMY
         TM    TIOELINK,X'FF'  ANY FUNNY BITS ON ?
         BNZ   BADOUT        TOO BAD
         USING UCBOB,R3
         CLI   UCBTBYT3,UCB3DACC  DASD ?
         BNE   BADOUT        NO
         BAL   R9,SETLIST    BUILD CATALOG/RENAME LISTS
         LA    R1,20(,R1)    CHECK NEXT ENTRY
         CLI   TIOELNGH,0    END OF TIOT ?
         BE    ENDTIOT       OK
         CLI   TIOEDDNM,C' '   CONCATENATION ?
         BE    BADOUT        YES; NO CAN DO
ENDTIOT  MVC   VOLLIST,JFCBVOLS+6  SAVE USER'S VOL-SER LIST
         MVI   JFCBNVOL,1    CHANGE TO ONE VOLUME
         MVC   JFCBVOLS+6(L'JFCBVOLS-6),BLANKS  CLEAR THE REST
         CLI   JFCBVOLS,C' '   WAS THERE ONE AT ALL ?
         BNH   BADOUT        NO; TOO BAD
*NEED?*  OI    JFCBTDSM,JFCNWRIT  NO REWRITE
         OI    JFCBTSDM,JFCVSL  KICK IT IN THE PANTS
         MVI   JFCBLTYP,JFCSL  DON'T SUPPORT SUL
         OI    JFCBIND1,JFCRLSE  DON'T HOG UNUSED SPACE
         NI    JFCBIND1,255-JFCGDG-JFCPDS  NO MEMBER
         XC    JFCBELNM,JFCBELNM  NO MEMBER, NO GDG NAME
         NI    JFCBIND2,JFCBRWPW  RESET ALL BUT PSWD REQUEST
         OI    JFCBIND2,JFCOLD  FAKE AN OLD DATASET
         ICM   R0,3,JFCBLKSI  PRESERVE USER'S BLOCKSIZE
         XC    JFCDSORG(JFCBNVOL-JFCDSORG),JFCDSORG  KILL DCB
         STCM  R0,3,JFCBLKSI  RESTORE USER'S BLOCKSIZE
         ICM   R0,7,JFCBPQTY  DID USER SPECIFY A SPACE PARAMETER?
         BNZ   HAVESPCE      YES; HONOR IT
         MVC   JFCBPQTY,DEFSPACE  SET DEFAULT SPACE
         MVC   JFCBSQTY,DEFSPACE  DITTO FOR SECONDARY
         MVI   JFCBCTRI,JFCBTRK  AMOUNT IS IN TRACKS
HAVESPCE XC    JFCBDQTY,JFCBDQTY  NO DIRECTORY/INDEX
         MVI   JFCBVLCT,1    NO SECONDARY ALLOCATION ON SCRATCH
         SERVCALL DSTST,JFCBDSNM  MAKE SURE DSN FRAGMENT IS VALID
         BXH   R15,R15,BADDSN  NO GO
         SERVCALL DSABB,JFCBDSNM  TRY FOR AN ABBREVIATION
         BXH   R15,R15,BADDSN
         CLI   0(R1),C'&&'   TEMPORARY DSN ?
         BNE   NOTTEMP       NO
BADDSN   PRTL  '*** OUTPUT DD DATASET PREFIX NOT USABLE ***',CC=NO
         B     EXIT16
NOTTEMP  CLI   0(R1),C'*'    UTILITY NAME ?
         BE    BADDSN        YES; DON'T USE IT
         MVC   PREFIX,BLANKS
         LA    R0,1          CONSTANT
         LA    R1,JFCBDSNM
         LA    R2,PREFIX
         LA    R3,L'JFCBDSNM
         LR    R4,R3         SAVE MAX
NAMELOOP CLI   0(R1),C' '    END OF PREFIX ?
         BNH   NAMEEND       YES
         MVC   0(1,R2),0(R1)  MOVE A BYTE
         AR    R1,R0
         AR    R2,R0
         BCT   R3,NAMELOOP   DO IT AGAIN
NAMEEND  SR    R4,R3         GET LENGTH OF NAME
         BNP   BADDSN        HUH ?
         CH    R4,=Y(L'JFCBDSNM-1-17)  NOT TOO LONG ?
         BH    BADDSN        TOO BAD
         MVI   0(R2),C'.'    MAKE INDEX POINT
         LA    R4,1(,R4)     MAKE COMPLETE PREFIX LENGTH
         STH   R4,PREFIXLN   SAVE IT
         MVC   JFCBDSNM,PREFIX  CLEAR REST OUT
         LA    R3,JFCBDSNM(R4) GET INSERTION ADDRESS
         MVC   0(7,R3),=C'CMSLOAD'  MAKE OUR NAME
         SPACE 1
         OPEN  (INPUT,(INPUT,REREAD))  OPEN THE CMS DUMP FILE
         TM    INPUT+DCBOFLGS-IHADCB,DCBOFOPN  OPEN ?
         BNZ   PREPROC       GO TO PROCESS INPUT
         PRTL  '*** UNABLE TO OPEN INPUT FILE ***',CC=NO
         B     EXIT16
PREPROC  SLR   R3,R3
         ICM   R3,3,INPUT+DCBBLKSI-IHADCB  GET USER'S BLOCKSIZE
         GETMAIN R,LV=(R3)   GET A BUFFER
         ST    R1,BLKAD      STASH IT
         LR    R2,R1         COPY START ADDRESS
         SLR   R14,R14
         SLR   R15,R15
         MVCL  R2,R14        CLEAR TO MAKE DUMPS SHORTER
         SLR   R3,R3         JUST IN CASE I HAVE BAD LOGIC
         SPACE 2
*        AT THIS POINT WE HAVE INPUT, AND A VALIDITY-CHECKED OUTPUT
*        JFCB. WE READ INPUT BLOCKS, ALLOCATING THE .CMSLOAD FILE
*        IF OUTPUT IS CLOSED, UNTIL A .CMSN BLOCK OR END-FILE ON INPUT.
         SPACE 1
PROCESS  LM    R7,R8,BLKAD   GET THE PRIOR BLOCK ADDRESS AND LENGTH
         TM    FLAGS,FGREREAD  PROCESS THE BLOCK AGAIN ?
         BNZ   REREAD        YES
         READ  DECB,SF,INPUT,(R7),'S',MF=E  READ A BLOCK
         CHECK DECB          WAIT FOR COMPLETION
         TM    IXFLAG2,IX2REGET   NEED TO READ ON NEXT FILE/VOLUME ?
         BZ    NOCONC        NO
         NI    IXFLAG2,255-IX2REGET  RESET IT
         B     PROCESS       REREAD
NOCONC   SLR   R8,R8
         ICM   R8,3,INPUT+DCBLRECL-IHADCB GET THE BLOCK'S SIZE
         BZ    PROCESS       TOO BAD
REREAD   STM   R7,R8,BLKAD   STASH THE ADDRESS AND LENGTH
         NI    FLAGS,255-FGREREAD  RESET THE REREAD FLAG
         USING INPDSECT,R7
         CLC   INBUF,CMSHEAD  IS IT A CMS RECORD ?
         BNE   PROCERR       NO; IGNORE IT
         LA    R0,L'CMSHEAD+1
         CLI   INBUF+L'CMSHEAD,C'N'  NAME RECORD ?
         BE    LOGEND        YES; SET LOGICAL END-FILE
         CLI   INBUF+L'CMSHEAD,C'F'  FIXED LENGTH RECORD ?
         BE    NEWBLOCK      YES; PROCEED
         CLI   INBUF+L'CMSHEAD,C'V'  VARIABLE ?
         BNE   PROCERR       ELSE IGNORE IT
NEWBLOCK TM    FLAGS,FGRDW+FGCONT  SPLIT RECORD ?
         BZ    NEWBLOKE      NO
         CLC   CURRTYPE,INBUF+L'CMSHEAD  SAME TYPE ?
         BE    NEWBLOKE      YES
         BAL   R9,PUTONE     PUT OUT ONE RECORD
         PRTL  '*** SPLIT RECORD NOT TERMINATED ***',CC=NO
NEWBLOKE MVC   CURRTYPE,INBUF+L'CMSHEAD  SAVE CURRENT BUFFER TYPE
         AR    R7,R0         BUMP OVER HEADER
         SR    R8,R0         ADJUST LENGTH
         STM   R7,R8,INPAD   SAVE START OF NEW RECORD FOR DEBUGGING
         TM    OUTPUT+DCBOFLGS-IHADCB,DCBOFOPN  ALLOCATED/OPEN ?
         BNZ   GETREC        YES; PROCESS NEXT RECORD
         MVC   NEWDSN,JFCBDSNM  MAKE PROVISIONAL SAVE NAME
NEWVOL   SERVCALL ALCDS,INFMJFCB  ALLOCATE 'CMSLOAD' DATASET
         BXLE  R15,R15,OPENOUT  TRY TO OPEN OUTPUT
         SRL   R15,1         RESTORE ERROR CODE
         ST    R15,DB        SAVE IT
         PRTLIST ALLOFAIL    DISPLAY THE ERROR
         MVC   JFCBVOLS(6),VOLLIST  GET NEXT VOLUME IN LIST
         BAL   R9,SETLIST    BUILD CATALOG/RENAME LISTS
         MVC   VOLLIST,VOLLIST+6  CYCLE THE VOLUME LIST
         CLI   JFCBVOLS,C' '  IS THERE ONE ?
         BH    NEWVOL        YES; RETRY THE ALLOCATION
         PRTL  '*** NO MORE VOLUMES AVAILABLE ***',CC=NO
         SERVTERM ,          CLOSE AND FREE
         ABEND 1137,DUMP     JUST IN CASE
OPENOUT  OPEN  (OUTPUT,(OUTPUT)),TYPE=J  OPEN THE OUTPUT FILE
         XC    NUMREC,NUMREC CLEAR NUMBER OF RECORDS WRITTEN
         NI    FLAGS,255-FGRDW-FGCONT
         TM    OUTPUT+DCBOFLGS-IHADCB,DCBOFOPN  OPEN ?
         BNZ   NEWREC        YES
         PRTL  '*** OUTPUT OPEN FAILED ***'
         SERVTERM ,          CLOSE AND FREE
         ABEND 013,DUMP      ERROR
PROCERR  PRTLIST PROCSNAP    DISPLAY THE BAD RECORD
         INC   NUMBAD,WORK=R1  COUNT THE BAD RECORDS
         CH    R1,=H'5'      MORE THAN FIVE ?
         BNH   PROCESS       NO; KEEP GOING
         SERVTERM ,
         ABEND 001,DUMP      QUIT NASTILY
         SPACE 2
*        LOOP FOR RECORD PROCESSING: RECORDS ARE DEBLOCKED, AND
*        SPECIAL CONSIDERATION IS MADE FOR RECORDS (OR RECORD LENGTHS)
*        SPLIT BETWEEN TWO (OR MORE) BLOCKS.
*        NOTE THAT THE MAXIMUM OUTPUT RECORD SIZE IS ARBITRARY, AND
*        WAS CHOSEN TO MATCH THE TSO RECFM=VB DEFAULT.
         SPACE 1
GETREC   TM    FLAGS,FGCONT  DOING CONTINUATION ?
         BZ    NEWREC        NO
         NI    FLAGS,255-FGCONT  RESET THE FLAGS
         TM    FLAGS,FGRDW   SPLIT RDW ?
         BZ    HAVELEN       NO
         NI    FLAGS,255-FGRDW  RESET SPLIT FLAG
         ICM   R3,1,INBUF    LOAD SECOND BYTE OF RDW
         LA    R7,1(,R7)     FIX NEXT ADDRESS
         BCTR  R8,0          SET NEW LENGTH
         LTR   R3,R3         SET CONDITION CODE
         BNP   ENDREC        THE WHOLE THING WASN'T WORTH IT
         B     HAVELEN       MOVE NEXT FRAGMENT
NEWREC   CLRL  OUTREC,L'OUTREC   CLEAR NEXT OUTPUT RECORD
         XC    OUTRDW,OUTRDW AND RESET LENGTH
NEXTREC  LA    R3,80         SET LENGTH FOR FIXED (ALSO CLEARS)
         CLI   CURRTYPE,C'F'  FIXED LENGTH ?
         BE    HAVELEN       YES
         CH    R8,=H'1'      ANY MORE IN THIS BLOCK ?
         BL    PROCESS       NO; READ ANOTHER BLOCK
         BH    HAVERDW       YES; USE RDW
*        WE HAVE AN RDW SPLIT BETWEEN BLOCKS - IS THIS POSSIBLE ?
         ICM   R3,2,INRDW    LOAD FIRST LENGTH BYTE
         OI    FLAGS,FGRDW+FGCONT  SHOW SPLIT RDW
         B     PROCESS       AND READ NEXT BLOCK
HAVERDW  ICM   R3,3,INRDW    LOAD THE LENGTH
         LA    R7,2(,R7)     SKIP OVER IT
         BCTR  R8,0
         BCTR  R8,0          ALLOW FOR LENGTH OF LENGTH
         BZ    ENDWRECK      NOTHING TO PROCESS
HAVELEN  LR    R2,R3         COPY LENGTH TO MOVE
         CR    R2,R8         IF THE DATA ARE AVAILABLE ?
         BNH   *+6           YES
         LR    R2,R8         ELSE MOVE SHORT PORTION
         LTR   R2,R2         ANY AT ALL ?
         BNP   GETCONT       GET NEXT FRAGMENT
         LA    R0,L'OUTREC   GET MAXIMUM OUTPUT SIZE
         SH    R0,OUTRDW     LESS SIZE ALREADY STASHED
         CR    R2,R0         WILL IT FIT ?
         BNH   *+6           YES
         LR    R2,R0         ELSE USE SHORTER LENGTH
         LH    R1,OUTRDW     GET CURRENT LENGTH
         LA    R14,OUTREC(R1)  GET NEXT INSERTION ADDRESS
         AR    R1,R2         MAKE NEW LENGTH
         STH   R1,OUTRDW     SET NEW LENGTH
         LTR   R1,R2         ANYTHING TO MOVE ?
         BNP   DONEMOV       HUH ?  BUT PREVENT ABEND
         LR    R15,R1        COPY IT
         LA    R0,INBUF      COPY THE INPUT ADDRESS
         MVCL  R14,R0        COPY TO OUTPUT RECORD
DONEMOV  SR    R8,R2         MAKE RESIDUAL INPUT LENGTH
         AR    R7,R2         NEW INPUT LOCATION
         SR    R3,R2         REMOVE FRAGMENT MOVED FROM LENGTH
         BNP   DONEREC       DONE; WRITE OUTPUT
         CLC   OUTRDW,=Y(L'OUTREC)  IS BUFFER FULL ?
         BL    GETCONT       NO; GET CONTINUATION BLOCK
DONEREC  LA    R9,ENDWRECK   SET RETURN FROM IN-LINE CALL
         SPACE 1
PUTONE   CLI   CURRTYPE,C'F' DOING FIXED LENGTH ?
         BNE   DONEFIX       NO
         CLI   OUTREC,X'00'  HEX ZERO IN OUTPUT ?
         BNE   DONEFIX       NO
         CLC   OUTREC+1(79),OUTREC  ALL ZEROES ?
         BNE   DONEFIX       NO
         SLR   R8,R8         CONDITION ALSO TERMINATES THE BLOCK
         B     ENDREC        SKIP THE PUT
DONEFIX  SLR   R1,R1
         ICM   R1,3,OUTRDW   ANY DATA IN RECORD ?
         BZ    ENDREC        NO; SKIP PUT
         LA    R1,4(,R1)     ALLOW FOR LENGTH OF RDW
         STH   R1,OUTRDW     FIX IT
         INC   NUMREC        COUNT RECORDS WRITTEN
         PUT   OUTPUT,OUTRDW  WRITE OUTPUT RECORD
ENDREC   CLRL  OUTREC,L'OUTREC
         XC    OUTRDW,OUTRDW AND RESET LENGTH
         NI    FLAGS,255-FGRDW-FGCONT
         BR    R9            RETURN TO CALLER
ENDWRECK LTR   R3,R3         MORE INPUT TO GET ?
         BP    HAVELEN       YES; GET NEXT FRAGMENT
         LTR   R8,R8         ANY BUFFER DATA LEFT ?
         BP    NEXTREC       YES; PROCESS
         B     PROCESS       GET NEXT BLOCK
GETCONT  OI    FLAGS,FGCONT  SHOW READ FROM SECOND LOCATION
         B     PROCESS       CURSE, CURSE, AND RECURSE
         SPACE 1
LOGEND   TM    FLAGS,FGCONT  CONTINUATION PENDING ?
         BZ    LOGENDNC      NO
         BAL   R9,PUTONE     WRITE LAST RECORD
         PRTL  '*** SPLIT RECORD NOT TERMINATED ***',CC=NO
LOGENDNC MVC   NEWDSN,PREFIX
         CLOSE (OUTPUT)      CLOSE THE FILE
         CLI   INFILE,C'0'   NUMERIC START ?
         BL    *+8           NO
         NI    INFILE,X'CF'  CHANGE TO A-I
         CLI   INTYPE,C'0'   NUMERIC TYPE ?
         BL    *+8           NO
         NI    INTYPE,X'CF'  CHANGE TO A-I
         LH    R1,PREFIXLN   GET PREFIX LENGTH
         LA    R1,NEWDSN(R1) GET INSERTION POINT
         MVC   0(L'INFILE,R1),INFILE
         LA    R0,L'INFILE
LOGENDLP CLI   0(R1),C' '    END OF NAME ?
         BE    LOGENDND      YES
         LA    R1,1(,R1)
         BCT   R0,LOGENDLP   TRY NEXT
LOGENDND CLI   INTYPE,C' '   IS THERE A TYPE QUALIFIER ?
         BE    LOGENDRN      NO
         MVI   0(R1),C'.'
         MVC   1(L'INTYPE,R1),INTYPE  APPEND QUALIFIER
LOGENDRN TR    NEWDSN,TRNAME MAKE VALID
         SLR   R0,R0         CLEAR UCB(?) ADDRESS
         RENAME RENLIST      TRY TO RENAME
         ST    R15,RENCC     SAVE RETURN CODE
         BXLE  R15,R15,GOODREN  RENAME OK
         CH    R15,=H'16'    RETURN CODE 8 - DUPLICATE ?
         BNE   LOGTERM       NO; QUIT
         PRTLIST MSGFAKE
         INC   NUMDUPE,WORK=R15  COUNT DUPLICATE FILES
         CVD   R15,DB        MAKE PACKED
         OI    DB+7,X'0F'    MAKE POSITIVE PLUS
         MVC   NEWDSN,PREFIX
         LH    R1,PREFIXLN
         LA    R1,NEWDSN(R1)
         UNPK  0(8,R1),DB+4(4)  MAKE ZONED
         MVC   0(3,R1),CMSHEAD+1  MAKE CMS-----
         RENAME RENLIST
         ST    R15,RENCC
         BXLE  R15,R15,GOODREN
LOGTERM  XC    JFCBDSNM,NEWDSN
         XC    NEWDSN,JFCBDSNM
         XC    JFCBDSNM,NEWDSN
         CATALOG CATLIST     USE OLD NAME
         XC    JFCBDSNM,NEWDSN
         XC    NEWDSN,JFCBDSNM
         XC    JFCBDSNM,NEWDSN
         B     FAILREN
GOODREN  CATALOG CATLIST
FAILREN  ST    R15,CATCC     STASH RETURN CODE
         PRTLIST MSGDSN      PRINT THE RESULTS
         ICM   R0,R15,RENCC  DID RENAME SUCCEED ?
         LA    R14,99        SET FUNNY ERROR CODE
         ST    R14,RENCC     PRESET ERROR CODE
         ST    R14,CATCC
         BZ    PROCESS       YES; KEEP READING
         STH   R0,RETCH      ELSE USE AS RETURN CODE
         B     ENDOK         AND QUIT
         SPACE 2
EODAD    ICM   R0,3,OUTRDW
         BNZ   EODAT         TOO BAD
         TM    FLAGS,FGCONT
         BZ    ENDAD
EODAT    PRTL  '0*** PREMATURE END - EXPECTING DATA ***'
         BAL   R9,PUTONE     WRITE LAST RECORD
         B     LOGTERM       CATALOG, ETC.
EXIT16   MVI   RETCH+L'RETCH-1,16
         B     ENDOK
         SPACE 1
ENDAD    OI    FLAGS,FGEOF   SHOW EOF READ
         TM    OUTPUT+DCBOFLGS-IHADCB,DCBOFOPN  OUTPUT OPEN ?
         BZ    ENDOK         NO
         PRTL  '0*** PREMATURE END - NO NAME RECORD FOUND ***'
         BAL   R9,PUTONE     WRITE LAST RECORD
         B     LOGTERM       CATALOG LAST FILE
ENDOK    CLOSE (INPUT,DISP,OUTPUT)  CLOSE ALL FILES
         SERVTERM ,          CLOSE AND FREE REST
         LH    R9,RETCH      GET RETURN CODE
         ENDM  RC=(R9)       RETURN TO SYSTEM
         SPACE 1
SETLIST  CLI   JFCBVOLS,C' ' ANY VOLSER ?
         BER   R9            NO; SO WHY BOTHER
         STM   R14,R3,SETSAVE
         MVC   CATSER,JFCBVOLS  COPY VOLSER
         MVC   RENSER,JFCBVOLS  DITTO
         SERVCALL UCBVS,JFCBVOLS  FIND UCB
         LTR   R3,R0         COPY UCB ADDRESS
         BZ    SETLISTN      TOO BAD
         MVC   CATTYPE,UCBTBYT1  COPY TYPE
         MVC   RENTYPE,UCBTBYT1   DITTO
         NI    CATTYPE+1,255-UCBRR-UCBVLPWR-UCBDVPWR  RESET PWF/SHR
         CLI   UCBTBYT3,X'0A'  3340 ?
         BNE   *+8           NO
         NI    CATTYPE+1,255-UCBRPS  RESET RPS ALSO
SETLISTN LA    R14,JFCBDSNM  GET OLD NAME
         LA    R15,NEWDSN    AND NEW NAME
         ST    R15,CATLIST+4  COMPLETE CATALOG REQUEST
         STM   R14,R15,RENLIST+4  AND RENAME
         LM    R14,R3,SETSAVE
         BR    R9            RETURN TO CALLER
         SPACE 1
CATLIST  CAMLST CATBX,3,,CATVOLL
CATVOLL  DC    H'1'
CATTYPE  DC    XL4'0'
CATSER   DC    CL6' '
RENLIST  CAMLST RENAME,2,3,RENVOLL
RENVOLL  DC    H'1'
RENTYPE  DC    XL4'0'
RENSER   DC    CL6' '
         SPACE 2
SYSPRINT PRTWORK SYSPRINT,SYSTERM,TITLE=5
         SPACE 1
HEADER   VCON  '#C M S L O A D'
ALLOFAIL FDPRT '*** ALLOCATION OF DATASET',NL
         FDPRT JFCBDSNM,DEB,PAD
         FDPRT 'ON VOLUME'
         FDPRT JFCBVOLS,6,DEB,PAD
         FDPRT 'FAILED (CODE'
         FDPRT DB,4,I,DEB,PADL
         FDPRT ')'
         FDPRT *END
         SPACE 1
PROCSNAP FDOPT CC=C'0'
         FDOPT '*** INVALID CMS RECORD READ ***',NL
         FDSNAP INBUF,64,DUAL,NOABS,OFFSET,BASE=INBUF
         FDPRT *END
         SPACE 1
MSGDSN   FDPRT NUMREC,I,NL,RADJ,PAD,LEN=10
         FDPRT 'RECORDS WRITTEN IN'
         FDCLC  ZEROES,RENCC,4,BE=MSGDSNEW
         FDPRT JFCBDSNM,DEB,PADL
         FDPRT '. UNABLE TO RENAME (CODE'
         FDPRT RENCC,I,PADL
         FDPRT ') TO'
MSGDSNEW FDPRT NEWDSN,PAD,DEB
         FDPRT 'ON'
         FDPRT JFCBVOLS,6,DEB,PADL
         FDPRT '. DATASET'
         FDCLC ZEROES,CATCC,4,BE=MSGDSNCA
         FDPRT 'NOT',PAD
MSGDSNCA FDPRT 'CATALOGED',PAD
         FDCLC ZEROES,CATCC,4,BE=MSGDSNCX
         FDPRT '(CODE',PAD
         FDPRT CATCC,I
         FDPRT ')'
MSGDSNCX FDPRT *END
         SPACE 1
MSGFAKE  FDPRT '>>> FILE',NL                                     86187
         FDPRT NEWDSN,PAD,DEB
         FDPRT 'ALREADY EXISTS; TEMPORARY NAME WILL BE USED <<<'
         FDPRT *END
         SPACE 1
INPUT    DCB   DDNAME=INPUT,DSORG=PS,MACRF=R,EODAD=EODAD,              *
               EXLST=EXLIST
EXLIST   DC    0A(0),X'05',AL3(0),X'80',AL3(INPEXITP)
INPEXITP DCBEXITD PREFIX=IX,FLAG1=IX1FULLT+IX1TRUNC,                   *
               FLAG2=IX2CONCT+IX2CCERR+IX2TARER,                       *
               FLAG3=IX3BLKTB
         SPACE 1
OUTPUT   DCB   DDNAME=OUTPUT,DSORG=PS,MACRF=PM,EXLST=EXLUST,           *
               RECFM=VB,LRECL=L'OUTREC+4
EXLUST   DC    0A(0),X'05',AL3(0),X'07',AL3(0),X'80',AL3(OUTEXITP)
OUTEXITP DCBEXITD PREFIX=OX,FLAG1=OX1TRUNC,                            *
               FLAG2=OX2CCERR,                                         *
               FLAG3=OX3BLKWY
DEFSPACE DC    AL3(19)       PRIMARY SPACE=(TRK,(19,19))
CMSHEAD  DC    0CL4' ',X'02',C'CMS'  CMS COMMON BLOCK HEADER
         SPACE 1
TRNAME   DC    256C'$'       DSN CONVERSION TABLE
         ORG   TRNAME+C' '
         DC    C' '          BLANK
         ORG   TRNAME+C'.'
         DC    C'.'          INDEX POINT
         ORG   TRNAME+C'@'
         DC    C'@'          WHERE IT'S AT
         ORG   TRNAME+C'#'
         DC    C'#'          POUND
         ORG   TRNAME+X'81'  LOWER CASE A
         DC    C'ABCDEFGHI'
         ORG   TRNAME+C'A'   UPPER
         DC    C'ABCDEFGHI'
         ORG   TRNAME+X'91'  LOWER CASE J
         DC    C'JKLMNOPQR'
         ORG   TRNAME+C'J'
         DC    C'JKLMNOPQR'
         ORG   TRNAME+X'A2'
         DC    C'STUVWXYZ'   LOWER CASE S
         ORG   TRNAME+C'S'
         DC    C'STUVWXYZ'
         ORG   TRNAME+C'0'
         DC    C'0123456789'
         ORG   ,
         SPACE 1
SAVE     DSECT ,             SAVE AND WORK AREA
@SERVICE DS    A
@PRINTER DS    A
DB       DS    D
ZEROES   DS    D             CONSTANT
SETSAVE  DS    6F            SETLIST SAVE AREA
         READ  DECB,SF,INPUT,1,2,MF=L
         DS    0D
         IEFJFCBN ,           DEFINE LOCAL OUTPUT JFCB
PREFIXLN DS    Y(0)          LENGTH OF DSN PREFIX
PREFIX   DS    CL44          PREFIX FROM OUTPUT DD
NEWDSN   DS    CL44          NEW DSN (PREFIX + CMSN DATA)
OUTRDW   DS    Y(0,0)  1/2   RECORD DESCRIPTOR FOR OUTPUT RECORD
OUTREC   DS    CL251   2/2   TSO CLIST SIZE
VOLLIST  DS    CL(L'JFCBVOLS-6)' '  VOLUME LIST FOR OUTPUT
BLANKS   DS    CL80    2/2   CONSTANT BLANKS
BLKAD    DS    A       1/2   BLOCK ADDRESS
BLKLN    DS    F       2/2   BLOCK LENGTH (PRESENT)
INPAD    DS    A       1/2   RECORD ADDRESS
INPLN    DS    F       2/2   RECORD LENGTH
NUMBAD   DS    F             NUMBER OF BAD BLOCKS READ
NUMREC   DS    F             RECORDS WRITTEN IN CURRENT FILE
NUMDUPE  DS    F             NUMBER OF DUPLICATE FILE NAMES HIT
RENCC    DS    F             RENAME RETURN CODE
CATCC    DS    F             CATALOG RETURN CODE
CURRTYPE DS    C             F/V OF CURRENT CMS BLOCK
FLAGS    DS    X             PROCESSING FLAGS
FGEOF    EQU   X'80'           EOF READ
FGREREAD EQU   X'40'           REPROCESS CURRENT BLOCK
FGCONT   EQU   X'20'           RECORD SPLIT BETWEEN BLOCKS
FGRDW    EQU   X'10'           RDW SPLIT BETWEEN BLOCKS
RETCH    DS    Y             RETURN CODE
SAVEND   EQU   *
         SPACE 1
INPDSECT DSECT ,             INPUT
INBUF    DS    0X            INPUT BYTE
INRDW    DS    XL2           INPUT LENGTH
         ORG   INPDSECT+69   SPECIAL CMSN MAPPING
INFILE   DS    CL8           CMS FILE NAME
INTYPE   DS    CL8           CMS FILE TYPE EXTENSION
         SPACE 1
         PRINT &PRTSYS
CVTDSECT DSECT ,
         CVT   DSECT=YES
         IHACDE ,
         IEFUCBOB ,
         IEFTIOT1 ,
         DCBD  DEVD=DA,DSORG=PS
         END   ,
