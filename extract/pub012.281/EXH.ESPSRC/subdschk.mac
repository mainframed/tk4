SUBDSCHK TITLE 'S U B D S C H K  ***  DSN VERIFICATION, LOOKUP, ETC.'
         PUNCH ' ORDER SUBDSCHK(P) '  MAKE DUMPS EASIER
         SPACE 1
         COPY  OPTIONGB
         SPACE 1
         SYSPARM LIST=YES
         SPACE 1
***********************************************************************
**                                                                   **
**  THIS MODULE WAS ADAPTED FROM MY PANEL VALIDATION EXIT ZZPXDSN.   **
**                                                                   **
**  COPYRIGHT 1998,2005 EXPERT SYSTEM PROGRAMMING                    **
**                                                                   **
**  AUTHOR: G. POSTPISCHIL                                           **
**                                                                   **
**  DEPENDENCIES:  ANY AMODE, ANY RMODE                              **
**                 CODE IS REUSABLE, NOT REENTRANT NOR REFRESHABLE   **
**                                                                   **
**                                                                   **
**  RETURNS R15 = 0   WHEN NAME IS VALID                             **
**              = 8   WHEN NAME IS NOT VALID                         **
**              = 20  ERROR IN PARM LIST                             **
**                                                                   **
**    R15 = 8 RETURN CARRIES A REASON CODE IN R0:                    **
**                                                                   **
**                1   NAME LENGTH IS NON-POSITIVE                    **
**                2   NAME EXCEEDS 44 CHARACTERS                     **
**                3   INDEX LENGTH = 0                               **
**                4   INDEX LEVEL MORE THAN 8 CHARACTERS             **
**                5   NAME HAS TRAILING PERIOD                       **
**                6   FIRST CHARACTER OF LEVEL IS INVALID            **
**                7   OTHER CHARACTER IS INVALID                     **
**                8   NAME HAS NO INDEX LEVELS                       **
**                9   INVALID GDG OR MEMBER SPECIFICATION            **
**               10   NEGATIVE RESPONSE                              **
**               11   DS NOT CATALOGED                               **
**               12   VOLUME NOT AVAILABLE                           **
**               13   DSCB 1 NOT LOCATED                             **
**               14   MEMBER NOT FOUND IN PDS                        **
**               15   ERROR ALLOCATING/READING DIRECTORY             **
**                                                                   **
**  INVOCATION:  CALL SUBDSCHK,('fun',WORKAREA,PARM1,PARM2)          **
**  function: \ parm:                                    completes:  **
**                                                                   **
**    DSN         putative DSN, 1-44 chars               DSCDSN      **
**    DSM         DS name w/GDG or mem 1-54              DSCDSN/MEM  **
**    DST         DS name or mask  1-44                  DSCDSN/MEM  **
**    DSQ         DSN - locate in catalog                DSCDSCB1    **
**    DS1         DSN(,VOL) find DSCB1                   DSCFMTID    **
**    DSD         DSN(,MEM) open PDS, find mem           DSCDIRE     **
**                                                                   **
**    INX         check dsn; return index length in R1               **
**                                                                   **
**    MEM         member name  syntax check                          **
**    VOL         syntax check; if valid, look for UCB   DSCSER,@UCB **
**    UNIT        syntax check; CL3-find UCB,                        **
**                                                                   **
***********************************************************************
**                                                                   **
**  MAINTENANCE:                                                     **
**                                                                   **
**  GYP  1998-04-01   ADDED DST FUNCTION AND GDG/MEMBER CHECKING     **
**  GYP  2003-05-23   COMBINED WITH VOL & UNIT CHECKING              **
**  GYP  2005-03-08   REWRITTEN AND EXPANDED FROM ZZPXDSN            **
**  GYP  2012-04-01   ADDED LEFT BRACE TO DSN AND MEMBER TABLES      **
**                                                                   **
***********************************************************************
         SPACE 1
         PRINT &PRTSOR
SUBDSCHK PGMHEAD ZERO12,BASE=R12,AM=31,RM=24,PARM=R1
         ST    R1,RETCODE+8  RETURN R1 = R1 EXCEPT INDEX FUNCTION
         LR    R10,R1                                           GP08257
         LTP   R2,0,BZ=FATALITY,PARM=R10   NEED FUNCTION
         LTP   R7,1,BZ=FATALITY  NEED WORK AREA
         USING MAPDSCHK,R7   MAP IT
         LTP   R8,2,BZ=FATALITY   NEED PRIMARY ARGUMENT
         ICM   R0,7,0(R2)    LOAD FUNCTION CODE
         LM    R14,R15,=A(FUNTAB2-FUNTAB,FUNTABN)
         LA    R1,FUNTAB
LOOKFUN  CLM   R0,7,0(R1)    FOUND FUNCTION ?
         BE    HAVEFUN       YES
         BXLE  R1,R14,LOOKFUN
         B     FATALITY      TOO BAD
         SPACE 1
FUNTAB   DC    C'MEM',AL1(0,8)
FUNTAB2  DC    C'VOL',AL1(1,6)
         DC    C'UNT',AL1(2,8)
         DC    C'UNI',AL1(2,8)
         DC    C'INX',AL1(3,44)                                 GP08257
         DC    C'DSN',AL1(4,44)
         DC    C'DSM',AL1(5,54)
         DC    C'DST',AL1(6,54)
         DC    C'DSQ',AL1(7,54)
         DC    C'DS1',AL1(8,54)
FUNTABN  DC    C'DSD',AL1(9,54)
         SPACE 1
IXMEM    EQU   0             INDEX FOR MEMBER NAME CHECK
IXVOL    EQU   1             INDEX FOR VOLUE SERIAL CHECK
IXUNT    EQU   2             INDEX FOR UNIT NAME CHECK
IXINX    EQU   3             INDEX FOR INDEX LEVEL CHECK        GP08257
IXDSN    EQU   4             INDEX FOR (SIMPLE) DSN CHECK
IXDSM    EQU   5             CHCK DSN WITH MEMBER/GDG ALLOWED
IXDST    EQU   6             CHCK DSN WITH MASK */? ALLOWED
IXDSQ    EQU   7             DO DSM, THEN CATALOG LOCATE FOR DSN
IXDS1    EQU   8             DO DSQ (OR USER'S VOLSER), FIND DSCB1
IXDSD    EQU   9             DO DS1; FIND DIR.ENTRY IF PDS
         SPACE 1
REASL0   EQU   1             REASON CODE - NAME LENGTH = 0
REASLX   EQU   2             REASON CODE - NAME TOO LONG
REASI0   EQU   3             REASON CODE - INDEX LENGTH = 0
REASIX   EQU   4             REASON CODE - INDEX TOO LONG
REASTP   EQU   5             REASON CODE - TRAILING PERIOD
REAS1C   EQU   6             REASON CODE - INVALID FIRST CHARACTER
REASIC   EQU   7             REASON CODE - INVALID CHARACTER
REASNX   EQU   8             REASON CODE - UNINDEXED NAME
REASBM   EQU   9             REASON CODE - BAD GDG/MEMBER SPECIFICATION
REASNG   EQU   10            REASON CODE - NEGATIVE RESPONSE
REASNC   EQU   11            REASON CODE - NOT CATALOGED
REASNV   EQU   12            REASON CODE - VOLUME NOT AVAILABLE
REASNF   EQU   13            REASON CODE - DSCB1 NOT FOUND
REASNM   EQU   14            REASON CODE - MEMBER NOT IN PDS
REASNA   EQU   15            REASON CODE - ERROR GETTING DIRECTORY
         SPACE 1
LDSMAX   EQU   44            DSNAME - 44 CHARACTERS MAXIMUM
LEVMAX   EQU   8             INDEX LEVEL - 8 CHARACTERS MAXIMUM
LMBMAX   EQU   8             MEMBER NAME - 8 CHARACTERS MAXIMUM
LVSMAX   EQU   6             VOLUME SERIAL - 6 CHARACTERS MAXIMUM
LUNMAX   EQU   8             UNIT NAME   - 8 CHARACTERS MAXIMUM
         SPACE 1
*---------------------------------------------------------------------*
*   R7  - User's work area                                            *
*   R8  - primary argument  (secondary in R6, fixed length 6/8)       *
*   R9  - max length                                                  *
*   R10 - PARM list                                                   *
*   R11 - reason code for error return                                *
*---------------------------------------------------------------------*
         SPACE 1
HAVEFUN  MVC   ENTINDEX,3(R1)
         SR    R9,R9
         IC    R9,4(,R1)     MAX PARM LENGTH
         SPACE 1
         LA    R11,REASL0    ZERO LENGTH
         LA    R15,0(R9,R8)  LAST BYTE +1
LENFLOOP BCTR  R15,0         PRIOR BYTE
         TM    0(R15),255-C' '  TRAILING BLANK OR NULL ?
         BNZ   LENFOUND      NO; DONE WITH LENGTH CHECK
         BCT   R9,LENFLOOP   TRY AGAIN
         B     ERROR         UNUSABLE
         SPACE 1
LENFOUND STM   R8,R9,@VAR    SAVE FOR LATER
         LA    R14,LEADTABL  GET DESTINATION TRT ADDRESS
         LA    R15,TABMOVLN  AND MATCHING LENGTH
         LA    R0,PATTLEAD   SOURCE TRT TABLES
         LR    R1,R15        AND SAME LENGTH
         MVCL  R14,R0        BUILD TABLES
         SPACE 1
*---------------------------------------------------------------------*
*  LOAD ADDRESS AND LENGTH OF DATA TO BE CHECKED                      *
*   R1-ADDR  R2-LEN  R5-LEN-1 FOR EXECUTE                             *
*---------------------------------------------------------------------*
         LM    R1,R2,@VAR    LOAD ADDRESS AND LENGTH TO BE CHECKED
         LTR   R5,R2         TEST LENGTH OF THIS VARIABLE
         BNP   ERROR         INVALID - QUIT NOW
         BCTR  R5,0          SET NAME LENGTH FOR EXECUTE
         BIX   VAL=ENTINDEX,ERR=FATALITY,                              *
               LOC=(CHKMEM,   0        MEM                             *
               CHKVOL,        1        VOL                             *
               CHKUNIT,       2        UNI                             *
               PROCINX,       3        INX                             *
               COMMDSN,       4        DSN                             *
               COMMDSN,       5        DSM                             *
               WILDDSN,       6        DST                             *
               COMMDSN,       7        DSQ                             *
               COMMDSN,       8        DS1                             *
               COMMDSN)       9        DSD
         SPACE 1
*---------------------------------------------------------------------*
*  FOR 'DST' ALLOW WILD CARD CHARACTERS IN NAME                       *
*---------------------------------------------------------------------*
WILDDSN  MVI   LEADTABL+C'*',0
         MVI   CHARTABL+C'*',0
         MVI   PARETABL+C'*',0
         MVI   MEMBTABL+C'*',0
         MVI   LEADTABL+C'?',0
         MVI   CHARTABL+C'?',0
         MVI   PARETABL+C'?',0
         MVI   MEMBTABL+C'?',0
         SPACE 1
*---------------------------------------------------------------------*
*   R1 - NEXT SCAN POSITION                                           *
*   R2 - TRT FLAG BYTE                                                *
*   R3 - TRT START ADDRESS; TEXT LENGTH                               *
*   R5 - LENGTH -1 REMAINING TO BE CHECKED                            *
*---------------------------------------------------------------------*
PROCINX  XC    RETCODE+8(4),RETCODE+8  PROV. ZERO INDEX LENGTH  GP08257
COMMDSN  LA    R11,REASL0    SET REASON CODE - LENGTH = 0
         LA    R14,REASNX    SET NO INDEX LEVEL FLAG
         SPACE 1
*---------------------------------------------------------------------*
*  THIS CODE CHECKS FOR AND ALLOWS APOSTROPHE QUOTING. TO MIMIC       *
*   CALLER'S BEHAVIOR (EXH----), UNBALANCED QUOTES ARE ALLOWED.       *
*---------------------------------------------------------------------*
         CLI   0(R1),C''''   LEADING QUOTE?
         BNE   NOTLEAD       NO
         LA    R1,1(,R1)     ADJUST ADDRESS
         SH    R5,=H'1'      ADJUST LENGTH
         BM    ERROR         (REASON STILL SET TO REASL0)
NOTLEAD  LA    R14,0(R5,R1)  POINT TO LAST BYTE
         CLI   0(R14),C''''  TRAILING QUOTE?
         BNE   NOTRAIL       NO
         SH    R5,=H'1'      ADJUST LENGTH
         BM    ERROR         TOO BAD
         SPACE 1
*---------------------------------------------------------------------*
*  CHECK FOR DST, RATHER THAN DSN, ENTRY.                             *
*   IF SO, SEE WHETHER LEFT PARENTHESIS SPECIFIED.                    *
*   IF YES, LAST BYTE MUST BE RIGHT PARENTHESIS                       *
*   TEXT BETWEEN MUST BE 1-8 BYTES LONG                               *
*   IF FIRST BYTE IS + OR -, MUST HAVE 1-7 NUMERICS FOLLOWING         *
*   OTHERWISE 1-8 BYTES MATCHING INDEX LEVEL RESTRICTIONS             *
*   INVALID ENTRY GETS ERROR 8, REASON 9                              *
*---------------------------------------------------------------------*
NOTRAIL  ST    R1,@VAR       SAVE NEW ADDRESS FOR DSQ
         LA    R14,1(,R5)    NEW LENGTH
         ST    R14,@VAR+4
         CLI   ENTINDEX,IXDSN  DSN ENTRY ?
         BNH   SKIPMEM       YES; NEED NOT DO MEMBER CHECK
         LR    R3,R1         PRESERVE START TEXT ADDRESS
         LA    R11,REASLX    SET REASON CODE - TOO LONG
         CH    R5,=Y(LDSMAX+1+LMBMAX+1)  VALID LENGTH? DS(MB)
         BNL   ERROR         NO; FAIL
         LA    R11,REAS1C    PRESET FOR INVALID LEADING CHARACTER
         TRT   0(1,R1),LEADTABL  IS FIRST CHARACTER VALID?
         BNZ   ERRPOS        NO; SET ERROR POSITION
         SLR   R2,R2
         LA    R15,PARETABL  LOOK FOR INVALID OR LEFT PARENTHESIS
         EX    R5,TRTSOME    LOOK FOR INVALID OR LEFT PARENTHESIS
         CLI   0(R1),C'('    DID WE FIND ONE?
         BNE   PASSMEM       NO; WILL CATCH IT LATER
         ST    R1,@MEM       SAVE UNTIL LATER
         LA    R11,REASBM    ALL MSGS HERE: BAD GDG/MBR SPEC.
         LA    R6,0(R5,R3)   POINT TO LAST BYTE
         CLI   0(R6),C')'    TRAILING PARENTHESIS?
         BNE   ERRPOS        NOT VALID MEMBER SPECIFICATION
         BCTR  R5,0          ADJUST LENGTH FOR )
         AR    R5,R1         ADD TRT HIT ADDRESS
         SR    R5,R6         LESS END ADDRESS = NEW LENGTH-1
         BM    ERROR         OOPS
         SR    R6,R1         END ")" LESS "(" ADDRESS
         SH    R6,=H'2'      ADJUST AND SUBTRACT 1 FOR EXECUTE
         BM    ERRPOS        NULL NAME
         CH    R6,=Y(LMBMAX)  NOT TOO LONG?
         BNL   ERRPOS        TOO LONG
         LA    R1,1(,R1)     SKIP OVER THE LEFT PARENTHESIS
         SLR   R2,R2
         TRT   0(1,R1),MEMBTABL  IS THE FIRST BYTE VALID FOR MEMBER?
         CLM   R2,1,MEMBTABL+C'$'  VALID MEMBER NAME? (A-Z,@,#,$) ?*?
         BE    CHARMEM       PERHAPS; VALIDATE REST
         CLM   R2,1,MEMBTABL+C'0' WAS IT A ZERO ?
         BE    DIGIMEM       YES; (0) IS VALID
         CLM   R2,1,MEMBTABL+C'-'  VALID GDG NAME?    (+,-)
         BNE   ERRPOS        NO; FAIL IT
         LA    R1,1(,R1)     SKIP FIRST BYTE
         SH    R6,=H'1'      SET RESIDUAL LENGTH
         BM    ERRPOS        NONE; (+) AND (-) ARE INVALID
DIGIMEM  LA    R15,DIGITABL  GET DIGIT TABLE
         EX    R6,TRTSOME    CHECK FOR WHOLE NUMBER
         BNZ   ERRPOS        FAIL IF OTHER
         CH    R6,=H'2'      MAX OF THREE DIGITS (VALUE < 256?)
         BNH   PASSMEM       PASSED CHECK
         B     ERRPOS        TOO LONG; TOO BAD
         SPACE 1
CHARMEM  LA    R15,CHARTABL  GET ALPHAMERICS
         EX    R6,TRTSOME    SEE IF VALID FOR INDEX LEVEL
         BNZ   ERRPOS        NO; ELSE FALL THROUGH TO ACCEPT
         L     R14,@MEM      GET ADDRESS OF (
         S     R14,@VAR      LESS ORIGINAL VARIABLE START
         ST    R14,@VAR+4    UPDATE DSN LENGTH
         LA    R15,1(,R6)    MEMBER NAME LENGTH
         LR    R14,R1        AND START
         STM   R14,R15,@MEM  FOR DEBUGGING
         ICM   R15,8,BLANKS  BLANK FILL
         LA    R0,DSCMEM     GET MEMBER FIELD
         LA    R1,L'DSCMEM   AND LENGTH
         MVCL  R0,R14        MOVE AND PAD MEMBER NAME
         SPACE 1
*---------------------------------------------------------------------*
*  WE FOUND A LEFT AND RIGHT PARENTHESIS. SET LENGTH FOR DSN,         *
*   AND EXAMINE WHAT'S LEFT.                                          *
*---------------------------------------------------------------------*
         SPACE 1
PASSMEM  LR    R1,R3         RESTORE TEXT ADDRESS
         SPACE 1
*---------------------------------------------------------------------*
*  COMMON CODE FOR DSN AND DST                                        *
*   CHECK MAXIMUM LENGTH < 45                                         *
*---------------------------------------------------------------------*
SKIPMEM  LA    R11,REASLX    SET REASON CODE - TOO LONG
         CH    R5,=Y(LDSMAX) VALID LENGTH? (NOTE: ALREADY -1 FOR EX)
         BNL   ERROR         NO; FAIL
         LM    R14,R15,@VAR  RELOAD DSN START AND LENGTH
         ICM   R15,8,BLANKS  BLANK FILL
         LA    R0,DSCDSN     GET DS NAME FIELD
         LA    R1,L'DSCDSN   AND LENGTH
         MVCL  R0,R14        MOVE AND PAD
         L     R1,@VAR       RESTORE DSN START
         SPACE 1
*---------------------------------------------------------------------*
*   CHECK THAT FIRST BYTE IS VALID                                    *
*   FOR EACH INDEX: CHECK VALIDITY OF FIRST BYTE IN INDEX             *
*   CHECK REMAINING BYTES (0-7)                                       *
*---------------------------------------------------------------------*
NEXTLEV  LR    R3,R1         PRESERVE START ADDRESS
         LA    R11,REAS1C    PRESET FOR INVALID LEADING CHARACTER
         TRT   0(1,R1),LEADTABL  IS FIRST CHARACTER VALID?
         BNZ   ERRPOS        NO; SET ERROR POSITION
         SPACE 1
*---------------------------------------------------------------------*
*  THREE CASES:  NO INVALID DATA - LENGTH MUST BE 8 OR LESS           *
*                PERIOD - LENGTH MUST BE 8 OR LESS; CONTINUE          *
*                INVALID DATA - FAIL                                  *
*---------------------------------------------------------------------*
         LTR   R5,R5         COPY RESIDUAL LENGTH
         BNP   DONEVAR       ONLY ONE BYTE; DONE
         SR    R2,R2         CLEAR FOR TRT INSERTION
         LA    R11,REASIC    PRESET FOR INVALID CHARACTER
         LA    R15,CHARTABL  POINT TO ALPHAMERICS
         EX    R5,TRTSOME    CHECK FOR INVALID CHARACTERS
         CLM   R2,1,CHARTABL+C'.'  IS IT A PERIOD?
         BH    ERRPOS        NO; IT'S HIGH AND IT'S BAD
         BE    HAVELEV       FOUND PERIOD
         CLI   ENTINDEX,IXINX  INDEX FUNCTION ?                 GP08257
         BNE   SKIPINX0      NO                                 GP08257
         OC    RETCODE+8(4),RETCODE+8  STORED PREVIOSLY ?       GP08257
         BNZ   SKIPINX0      YES                                GP08257
         LA    R0,1(,R5)     FIX FOR EX LENGTH                  GP08257
         ST    R0,RETCODE+8  RETURN IN R1 TO CALLER             GP08257
SKIPINX0 CH    R5,=AL2(LEVMAX)  IS LENGTH VALID?                GP08259
         BNH   DONEVAR       YES; DONE
         LA    R11,REASIX    INDEX LENGTH TOO HIGH
         LA    R1,LEVMAX(R3)  POINT TO BAD BYTE
         B     ERRPOS        NO; FAIL
         SPACE 1
HAVELEV  LR    R4,R3         SAVE START POSITION FOR ERROR
         SR    R14,R14       SHOW INDEX LEVEL FOUND
         LA    R11,REASI0    PRESET FOR DOUBLED PERIOD
         SR    R3,R1         GET LENGTH OF TEXT SKIPPED OVER
         LPR   R3,R3           BUT MAKE IT POSITIVE
         BNP   ERRPOS        INDEX LENGTH ZERO
         LA    R11,REASTP    TRAILING PERIOD
         BCTR  R5,0          ALLOW FOR PERIOD
         SR    R5,R3         SET RESIDUAL LENGTH
         BM    ERRPOS        PERIOD MUST NOT BE LAST
         CLI   ENTINDEX,IXINX  INDEX FUNCTION ?                 GP08257
         BNE   SKIPINX1      NO                                 GP08257
         OC    RETCODE+8(4),RETCODE+8  STORED PREVIOSLY ?       GP08257
         BNZ   SKIPINX1      YES                                GP08257
         ST    R3,RETCODE+8  RETURN IN R1 TO CALLER             GP08257
SKIPINX1 LA    R1,1(,R1)     ALLOW FOR THE PERIOD
         CH    R3,=AL2(LEVMAX)  IS LENGTH VALID?                GP08259
         BNH   NEXTLEV       GOOD; TRY AGAIN
         LA    R11,REASIX    INDEX TOO LONG
         LA    R1,LEVMAX(R4)  POINT TO BAD BYTE
         B     ERRPOS        ELSE SEGMENT TOO LONG
         SPACE 1
DONEVAR  LTR   R14,R14       DID WE HIT AN INDEX LEVEL?
*CONSIDERBNZ   ERROR         NO; THIS IS AN ERROR NOW-A-DAYS ?
         MVC   DSCDSCB1,DSCDSN  MOVE CLEANED NAME TO RESULT AREA
         BIX   VAL=ENTINDEX,ERR=FATALITY,                              *
               LOC=(GOODEXIT, 0        MEM                             *
               GOODEXIT,      1        VOL                             *
               GOODEXIT,      2        UNIT                            *
               GOODEXIT,      3        INX                             *
               GOODEXIT,      4        DSN                             *
               GOODEXIT,      5        DSM                             *
               GOODEXIT,      6        DST                             *
               LOCDSN,        7        DSQ                             *
               LOCDSNQ,       8        DS1                             *
               LOCDSNQ)       9        DSD
         SPACE 1
*---------------------------------------------------------------------*
*  LOCATE DSNAME IN CATALOG (UNLESS SERIAL SUPPLIED)                  *
*---------------------------------------------------------------------*
LOCDSNQ  LTP   R6,3,BZ=LOCDSN   NO SERIAL ?
         CLI   0(R6),C' '    VOLSER SUPPLIED?
         BH    GETDSCB1
         SPACE 1
LOCDSN   CLI   DSCSER,C' '   USER MOVED SERIAL TO WORK ?
         BH    LOCSKIP       YES; TRY IT
         MVC   CAMLST(4),PATNAME
         LA    R15,DSCDSCB1  POINT TO ALTERABLE DSN
         SR    R0,R0         CVOL POINTER
         LA    R1,CAMBACK    WORK AREA
         STM   R15,R1,CAMLST+4
*DONE*   SR    R0,R0         OLD MOUNT UCB ADDRESS CONVENTION
         LOCATE CAMLST       DO CATALOG LOOKUP
         LTR   R15,R15
         BZ    LOCDONE       NICE !
         LA    R11,REASNC    PLAIN NOT CATALOGED
         CH    R15,=H'8'     HOW GOES IT ?
         BE    ERROR         NOT CATALOGED
         LA    R11,REASNG    POSS. VOLUME NOT UP; BAD CATALOG; ???
         B     ERROR
PATNAME  CAMLST NAME,1,,3    CATALOG LOOKUP
         ORG   PATNAME+4
PATDSCB1 CAMLST SEARCH,1,2,3  FIND A DSCB1
         ORG   PATDSCB1+4
         SPACE 1
LOCDONE  MVC   DSCVOL,CAMBACK  RETURN VOLUME INFORMATION
LOCSKIP  CLI   ENTINDEX,IXDS1    DS1 ENTRY ?
         BL    GOODEXIT      NO; RETURN
         B     OBTDSCB1      YES; OBTAIN DSCB 1
         SPACE 1
*---------------------------------------------------------------------*
*   GET DSCB1 FROM VTOC                                               *
*---------------------------------------------------------------------*
GETDSCB1 MVC   DSCSER,0(R6)  USE CALLER'S VOL-SER
OBTDSCB1 LA    R11,REASNV    PRESET FOR BAD VOLUME
         BAL   R14,FINDVOL   LOOK FOR VOLUME
           B   ERROR         NOT FOUND
         MVC   CAMLST(4),PATDSCB1
         LA    R15,DSCDSCB1  POINT TO (TRUE) DSN
         LA    R0,DSCSER     VOL POINTER
         LA    R1,CAMBACK    WORK AREA
         STM   R15,R1,CAMLST+4
         OBTAIN CAMLST       DO DSCB1 READ
         LA    R11,REASNF    PLAIN NOT FOUND
         LTR   R15,R15
         BNZ   ERROR         NOT FOUND
         MVC   DSCFMTID,CAMBACK  RETURN DSCB 1
         SR    R1,R1
         ICM   R1,7,DS1LSTAR-IECSDSL1+DSCDSCB1
         BZ    NOTPART
         SRL   R1,8
         LA    R1,1(,R1)     ADJUST TRACK COUNT (FOR TRK 0)
NOTPART  ST    R1,DSC#TRKS   SAVE TRACKS USED
         CLI   ENTINDEX,IXDS1  LOCATE DSCB1 ONLY ?
         BNH   GOODEXIT      YES; QUIT NOW
         ICM   R0,7,DS1LSTAR-IECSDSL1+DSCDSCB1  ANY ?
         BZ    GOODEXIT      EMPTY OR PDS/E
         CLI   DS1DSORG-IECSDSL1+DSCDSCB1+1,0    FUNNY BITSINESS?
         BNE   GOODEXIT      NOT PDS
         CLI   DS1DSORG-IECSDSL1+DSCDSCB1,DS1DSGPO  PARTITIONED?
         BE    FINDMEM       YES
         CLI   DS1DSORG-IECSDSL1+DSCDSCB1,DS1DSGPO+DS1DSGU  +UNMOVABLE?
         BNE   GOODEXIT      NOT PDS
         SPACE 1
***********************************************************************
*   ALLOCATE A DD, READ THE PDS, VERIFY MEMBER, COUNT DIR.ENTRIES     *
***********************************************************************
FINDMEM  MVC   INDS,DSCDSCB1 COPY TRU NAME
         MVC   INV,DSCSER    SERIAL
         LA    R11,REASNA    DIRECTORY ACCESS FAILED
         LA    R4,PATTU1     POINT TO INPUT ALLOCATION LIST
         LA    R3,3          FOUR OPTIONAL PARAMETERS (EXC. DSN)
         BAL   R14,BUILDTUS  BUILD TEXT UNIT LIST
         LA    R1,MYRBPTR
         DYNALLOC
         MVC   UNDD1,INDD    COPY NEW DDN, EVEN IF NULL
         LTR   R15,R15
         BNZ   FINDRLSE      UNALLOCATE, JUST IN CASE
         MVC   PDSDCB(PATDCBLN),PATDCB  MOVE PATTERN DCB
         MVC   PDSDCB+DCBDDNAM-IHADCB(L'DCBDDNAM),INDD
         SR    R5,R5         COUNT DIRECTORY BLOCKS
         LA    R2,PDSDCB
         OPEN  ((R2)),MF=(E,OPENLIST)
FINDLOOP LA    R3,CAMLST     REUSE FOR BUFFER SPACE
         LA    R4,256+8      LENGTH ?
         READ  FINDDECB,SF,(R2),(R3),(R4)
         CHECK FINDDECB
         LA    R5,1(,R5)     UP DIRECTORY COUNT
         B     FINDLOOP      DO MORE
         SPACE 1
FINDMEMZ ST    R5,DSC#DES    SAVE DIRECTORY BLOCK COUNT
         LA    R11,REASNM    MEMBER NOT FOUND
         FIND  (R2),DSCMEM,D  FIND THE MEMBER
         LTR   R10,R15       TEST RETURN
*HUH?*   BZ    FINDMEMC      QUIT WITHOUT COUNT
FINDMEMC CLOSE ,MF=(E,OPENLIST)
FINDRLSE LA    R4,UNTU1      POINT TO CHAIN
         BAS   R14,BUILDTUS  BUILD TEXT UNIT CHAIN
         MVI   S99VERB-S99RB+MYRB,S99VRBUN  UNALLOCATE
         LA    R1,MYRBPTR    POINT TO REQUEST POINTER
         DYNALLOC ,          AND FREE; IGNORE RETURN
         LTR   R10,R10       MEMBER FOUND ?
         BZ    GOODEXIT      YES
         B     ERROR  ** WAS COMMEXIT
PATDCB   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=RP,EODAD=FINDMEMZ,         *
               RECFM=U,LRECL=256,BLKSIZE=264,KEYLEN=8
PATOLIST OPEN  (PATDCB,INPUT),MF=L
PATDCBLN EQU   *-PATDCB
TEXTBASE EQU   *
PATTU1   DC    AL2(INDSNAME-TEXTBASE)
         DC    AL2(INVOLSER-TEXTBASE)
         DC    AL2(INPASS-TEXTBASE)
         DC    AL2(INDDNAME-TEXTBASE)
         DC    AL2(DISPSHR-TEXTBASE)
         DC    AL2(FREECLOS-TEXTBASE)
         DC    AL2(DISPKEEP+X'8000'-TEXTBASE)
UNTU1    DC    AL2(UNDDN1-TEXTBASE)
         DC    AL2(UNALL+X'8000'-TEXTBASE)
INDDNAME DC    Y(DALRTDDN,1,8)  RETURN DD NAME
INDD     DC    CL8' '
INDSNAME DC    Y(DALDSNAM,1,44)   INPUT DSN
INDS     DC    CL44' '
INVOLSER DC    Y(DALVLSER,1,6)    INPUT SERIAL
INV      DC    CL6' '
INPASS   DC    Y(DALPASSW,1,8)    PASSWORD
INP      DC    CL8' '
DISPSHR  DC    Y(DALSTATS,1,1),X'08'   DISP=SHR
DISPKEEP DC    Y(DALNDISP,1,1),X'08'   DISP=KEEP
FREECLOS DC    Y(DALCLOSE,0)      FREE ON CLOSE
UNDDN1   DC    Y(DUNDDNAM,1,8)
UNDD1    DC    CL8' '
UNALL    DC    Y(DUNUNALC,0)
         EJECT
*---------------------------------------------------------------------*
*   BUILD TEXT UNIT POINTERS                                          *
*---------------------------------------------------------------------*
BUILDTUS XC    TUWORK,TUWORK  CLEAR RB AND TEXT UNIT WORK AREA
         LA    R2,MYRB       POINT TO REQUEST BLOCK
         ST    R2,MYRBPTR+S99RBPTR-S99RBP    BUILD POINTER
         OI    MYRBPTR,S99RBPND    END BIT
         USING S99RB,R2      DECLARE BRIEFLY
         MVI   S99RBLN,S99RBEND-S99RB  BLOCK LENGTH
         MVI   S99VERB,S99VRBAL    ALLOCATE
         LA    R1,NEWTUS     TU POINTER START
         ST    R1,S99TXTPP   SET INTO RB
         LA    R1,NEWTUS-4   POINT TO NEW OUTPUT LESS ONE
         DROP  R2
BUILDTUL LH    R2,0(,R4)     GET OFFSET
         N     R2,=X'00007FFF'  KILL END OF LIST BIT
         LA    R2,TEXTBASE(R2)  ADDRESS OF TEXT UNIT
         LTR   R3,R3         NEED TO TEST TEXT PARM ?
         BNP   BUILDTUU      NO; UNCONDITIONAL
         CLI   6(R2),C' '    PARAMETER PRESENT ?
         BNH   BUILDTUB      NO; BUMP TO NEXT ONE
BUILDTUU ST    R2,4(,R1)     FINAGLE
         LA    R1,4(,R1)     ADVANCE
BUILDTUB BCTR  R3,0          DECREMENT TEST COUNTER
         TM    0(R4),X'80'   LAST ITEM ?
         LA    R4,2(,R4)     BUMP ANYWAY
         BZ    BUILDTUL      LOOP
         OI    0(R1),X'80'   SET LAST TU
         BR    R14
         SPACE 1
*---------------------------------------------------------------------*
*  EXIT - RETURNS CONDITION CODE IN R15, REASON CODE IN R0            *
*---------------------------------------------------------------------*
GOODEXIT SR    R10,R10       CLEAR RETURN CODE
         SR    R11,R11       CLEAR REASON CODE
COMMEXIT STM   R10,R11,RETCODE SET RETURN AND REASON CODES
         PGMEXIT COPYRET=(RETCODE,12)  GO TO CALLER WITH R15-R1 CODES
         SPACE 1
*---------------------------------------------------------------------*
*  CHECK A MEMBER NAME                                                *
*   LENGTH 1-8                                                        *
*   FIRST BYTE ALPHABETIC OR NATIONAL                                 *
*   REMAINING BYTES ALPHABETIC, NATIONAL, OR NUMERIC                  *
*---------------------------------------------------------------------*
CHKMEM   LA    R0,LMBMAX     SET MAXIMUM LENGTH
         LA    R15,CHARTABL  POINT TO ALPHAMERICS
         B     COMMCHK       GO TO COMMON CHECK ROUTINE
         SPACE 1
*---------------------------------------------------------------------*
*  CHECK A VOLUME SERIAL                                              *
*   LENGTH 1-6                                                        *
*   TEXT MUST BE ALPHABETIC, NATIONAL, NUMERIC, OR SPECIAL CHARACTERS *
*---->>>> ONLY SOME SPECIAL CHARACTERS ARE SUPPORTED LOCALLY  <<<<----*
*---------------------------------------------------------------------*
CHKVOL   LA    R0,LVSMAX     SET MAXIMUM SERIAL LENGTH
         LA    R15,VSERTABL  POINT TO ALPHAMERICS PLUS
         B     COMMCHK       GO TO COMMON CHECK ROUTINE
         SPACE 1
*---------------------------------------------------------------------*
*  CHECK A UNIT (DEVICE NUMBER, DEVICE TYPE, GROUP NAME)              *
*   LENGTH 1-8                                                        *
*   TEXT MUST BE ALPHABETIC, NATIONAL, NUMERIC, OR HYPHEN             *
*---------------------------------------------------------------------*
CHKUNIT  LA    R0,LUNMAX     SET MAXIMUM UNIT LENGTH
         LA    R15,UNITTABL  POINT TO ALPHAMERICS PLUS
*---------------------------------------------------------------------*
*  COMMON CHECK - R0 - MAX LEN   R15 - TRT TABLE ADDRESS              *
*---------------------------------------------------------------------*
COMMCHK  LA    R11,REASLX    SET REASON CODE - TOO LONG
         CR    R5,R0         VALID LENGTH? (R5 ALREADY -1 FOR EX)
         BNL   ERROR         NO; FAIL
         LA    R11,REASIC    PRESET FOR INVALID CHARACTER
         EX    R5,TRTSOME    LOOK FOR INVALID CHARACTER
         BNZ   ERRPOS        NULL NAME
         CLI   ENTINDEX,IXVOL  VOL FUNCTION ?
         BNE   GOODEXIT      NONE; NAME IS GOOD
         LA    R11,REASNV    PRESET FOR BAD VOLUME
         BAL   R14,FINDVOL   LOOK FOR VOLUME
           B   ERROR         NOT FOUND
         B     GOODEXIT      NONE; NAME IS GOOD
         SPACE 1
*---------------------------------------------------------------------*
*  ERROR - SET ERROR COLUMN, MESSAGE NUMBER                           *
*---------------------------------------------------------------------*
ERRPOS   S     R1,@VAR       GET RELATIVE POSITION OF ERROR
         BM    ERROR
         LA    R1,1(,R1)     ALLOW FOR RELATIVITY
         ST    R1,COL        0-UNDEFINED; 1-N ERROR COLUMN
ERROR    LA    R10,8         SET ERROR RETURN CODE
         STM   R10,R11,RETCODE                                  GP08257
         B     COMMEXIT      RETURN WITH ERROR
         SPACE 1
*---------------------------------------------------------------------*
*  FATAL ERROR - GET OUT                                              *
*---------------------------------------------------------------------*
FATALITY LA    R10,20        SET IMPOSSIBLE RETURN
         LA    R11,666       BAD NUMBER (OF VARIABLES)
         B     COMMEXIT      BUT RETURN ANYWAY
         SPACE 1
*---------------------------------------------------------------------*
*  VOLUME LOOKUP ROUTINE                                              *
*---------------------------------------------------------------------*
         PUSH  USING
FINDVOL  STM   R14,R6,12(R13)  SAVE A LITTLE
         XC    UNITPREV,UNITPREV .  ZERO PREVIOUS NAME
         XC    DSC@UCB,DSC@UCB  CLEAR UCB ADDRESS
         L     R6,CVTPTR .   GET CVT                             78255
         USING CVTMAP,R6
         L     R4,CVTILK2 .  GET UCB LOOKUP TABLE
         LA    R5,2 .        SIZE OF TABLE ENTRIES
         USING UCBOB,R3
*
*        LOOP  THROUGH UCB ENTRIES
*
UNITLOOP SR    R3,R3 .       ZERO HIGH BYTE
         ICM   R3,3,0(R4) .  LOAD NEXT UCB ADDRESS
         BZ    UNITBUMP .    SKIP IF DUMMY ENTRY
         C     R3,UNITMASK .  END OF LOOKUP TABLE ?
         BE    UNITEXIT .    YES, EXIT FROM SCAN
         MVC   DBWK(3),UCBNAME   COPY EBCDIC UCB NAME
         XC    DBWK(3),=3X'F0'  PUT INTO NUMERIC/ALPHA COLLATING SEQ
         CLC   DBWK(3),UNITPREV   THIS CUU LOWER THAN PREVIOUS ?
         BNH   UNITBUMP .    NO, SKIP IT
         MVC   UNITPREV,DBWK   SAVE CUU FOR NEXT ENTRY
         CLI   UCBTBYT3,UCB3DACC  DIRECT ACCESS ?
         BNE   UNITBUMP
         CLC   UCBVOLI,DSCSER  REQUESTED VOLUME SERIAL ?
         BNE   UNITBUMP
         LA    R14,4(,R14)   RETURN FOUND, +4
         ST    R3,DSC@UCB    SAVE UCB ADDRESS
         L     R4,CVTZDTAB   POINT TO DEVICE CHARACTERISTICS TABLE
         USING DVCTI,R4      DECLARE IT
         SR    R2,R2         CLEAR FOR IC
         IC    R2,UCBTBYT4   GET DASD SUBTYPE
         N     R2,=A(DVCTYPMK)  CLEAR VIO BIT OR WHATEVER
         IC    R2,0(R2,R4)   GET OFFSET TO CHARACTERISTICS
         AR    R4,R2         CHARS
         USING DVCCYL,R4
         ICM   R1,3,DVCTRK   GET TRACKS/CYLINDER
         STH   R1,DSC#TPC    RETURN TO CALLER
         B     UNITEXIT      GO BACK TO USER
UNITBUMP BXH   R4,R5,UNITLOOP .   NEXT UCB ENTRY
UNITMASK DC    0A(0),XL4'FFFF'  .   MASK FOR END OF UCB LOOKUP TABLE
UNITEXIT LM    R15,R6,16(R13)  RESTORE
         BR    R14           RETURN +0 (NOT FOUND), +4 FOUND
         SPACE 1
TRTSOME  TRT   0(0,R1),0(R15)  CHECK FOR INVALID CHARACTERS
BLANKS   DC    CL8' '
MSGID    DC    CL8'ESPM200 '  COMMON ERROR MESSAGE 220-239
         SPACE 1
PATTLEAD DC    256X'FF'      SET ALL CHARACTERS INVALID
         TRENT PATTLEAD,0,(C'A',9)     ALLOW A-I
         TRENT PATTLEAD,0,(C'J',9)     ALLOW J-R
         TRENT PATTLEAD,0,(C'S',8)     ALLOW S-Z
         TRENT PATTLEAD,0,C'@',C'#',C'$'   ALLOW NATIONALS
         TRENT PATTLEAD,0,C'.'  ****>>>> NOTE THAT WE ALLOW A LEADING
*                            ****>>>> PERIOD TO DIAGNOSE EMPTY LEVELS
         SPACE 1
PATTCHAR DC    256X'08'      SET ALL CHARACTERS INVALID
         TRENT PATTCHAR,0,(C'A',9)     ALLOW A-I
         TRENT PATTCHAR,0,(C'J',9)     ALLOW J-R
         TRENT PATTCHAR,0,(C'S',8)     ALLOW S-Z
         TRENT PATTCHAR,0,(C'0',10)    ALLOW 0-9
         TRENT PATTCHAR,0,C'@',C'#',C'$'   ALLOW NATIONALS
         TRENT PATTCHAR,0,C'{'         ALLOW X'C0' LEFT BRACE   GP12092
         TRENT PATTCHAR,4,C'.'         ALLOW . INDEX LEVEL START
         SPACE 1
PATTPARE DC    256X'08'      MAKE EVERYTHING INVALID
         TRENT PATTPARE,0,(C'A',9)     ALLOW A-I
         TRENT PATTPARE,0,(C'J',9)     ALLOW J-R
         TRENT PATTPARE,0,(C'S',8)     ALLOW S-Z
         TRENT PATTPARE,0,(C'0',10)    ALLOW 0-9
         TRENT PATTPARE,0,C'@',C'#',C'$'   ALLOW NATIONALS
         TRENT PATTCHAR,0,C'{'         ALLOW X'C0' LEFT BRACE   GP12092
         TRENT PATTPARE,0,C'.'         ALLOW . INDEX LEVEL START
         SPACE 1
PATTMEMB DC    256X'08'      MAKE EVERYTHING INVALID
         TRENT PATTMEMB,0,(C'A',9)     ALLOW A-I
         TRENT PATTMEMB,0,(C'J',9)     ALLOW J-R
         TRENT PATTMEMB,0,(C'S',8)     ALLOW S-Z
         TRENT PATTMEMB,0,C'@',C'#',C'$'   ALLOW NATIONALS
         TRENT PATTCHAR,0,C'{'         ALLOW X'C0' LEFT BRACE   GP12092
         TRENT PATTMEMB,4,C'+',C'-'    GDG FIRST BYTE
         TRENT PATTMEMB,2,C'0'         ALLOW 0 FOR GDG FIRST BYTE
         SPACE 1
DIGITABL DC    256X'08'      MAKE EVERYTHING INVALID
         TRENT DIGITABL,0,(C'0',10)    ALLOW 0-9
         SPACE 1
UNITTABL DC    256X'08'      SET ALL CHARACTERS INVALID
         TRENT UNITTABL,0,(C'A',9)     ALLOW A-I
         TRENT UNITTABL,0,(C'J',9)     ALLOW J-R
         TRENT UNITTABL,0,(C'S',8)     ALLOW S-Z
         TRENT UNITTABL,0,(C'0',10)    ALLOW 0-9
         TRENT UNITTABL,0,C'@',C'#',C'$'   ALLOW NATIONALS
         TRENT UNITTABL,0,C'-'         ALLOW HYPHEN
         SPACE 1
***********************************************************************
**                                                                   **
**  NOTE: IBM ALLOWS SPECIAL CHARACTERS IN VOLUME SERIAL NAMES       **
**        THIS TABLE ONLY SUPPORTS SLASH AND HYPHEN PER LOCAL        **
**        PREFERENCE.                                                **
**                                                                   **
***********************************************************************
VSERTABL DC    256X'08'      SET ALL CHARACTERS INVALID
         TRENT VSERTABL,0,(C'A',9)     ALLOW A-I
         TRENT VSERTABL,0,(C'J',9)     ALLOW J-R
         TRENT VSERTABL,0,(C'S',8)     ALLOW S-Z
         TRENT VSERTABL,0,(C'0',10)    ALLOW 0-9
         TRENT VSERTABL,0,C'@',C'#',C'$'   ALLOW NATIONALS
         TRENT VSERTABL,0,C'-'         ALLOW HYPHEN
         TRENT VSERTABL,0,C'/'         ALLOW SLASH
         SPACE 2
*  REENTRANT WORK SPACE (ADDRESSES=0 FOR UNSUPPLIED VARIABLES)
SAVE     DSECT ,             SAVE/WORK AREA
DBWK     DC    D'0'          CONVERSION AND STORAGE
RETCODE  DC    3F'0'         RETURN CODE / REASON / INDEX LEN   GP08257
@VAR     DC    2A(0)   1/5   ADDRESS/LENGTH OF VARIABLE
@MEM     DC    2A(0)   2/5   ADDRESS/LENGTH OF MEMBER NAME EXTRACTED
COL      DC    F'0'          COLUMN NUMBER OF ERROR
ENTINDEX DC    X'00'         ENTRY INDEX
UNITPREV DC    CL3' ' .      SAVE CURRENT UCB
         SPACE 1
LEADTABL DS    XL256         TRT - LEADING BYTE IN NAME/INDEX LEVEL
CHARTABL DS    XL256         TRT - OTHER BYTE IN NAME/INDEX
PARETABL DS    XL256         TRT - NAME BYTE WITH INDEX ALLOWED
MEMBTABL DS    XL256         TRT - MEMBER/GDG BYTES
TABMOVLN EQU   *-LEADTABL    SIZE TO MOVE FROM PATTERN
         SPACE 1
         ORG   LEADTABL
PDSDCB   DS    ((PATOLIST-PATDCB)/4)A(0)
OPENLIST OPEN  (PDSDCB,INPUT),MF=L
         SPACE 1
CAMLST   DS    4A            CAMLST FOR CATALOG LOCATE
CAMBACK  DS    66D           RETURN WORK AREA
         SPACE 1
MYRBPTR  DC    A(0)          RB POINTER
MYRB     DC    5A(0)         REQUEST BLOCK
NEWTUS   DC    20A(0)        TEXT UNIT POINTERS
TUWORK   EQU   MYRBPTR,*-MYRBPTR,C'A'  WORK AREA FOR CLEARING
         ORG   ,
SAVEEND  EQU   *             END OF DYNAMIC SAVE/WORK AREA
         SPACE 1
         DCBD  DEVD=DA,DSORG=PO
         SPACE 1
         SPACE 1
         IHADVCT ,           DASD DEVICE CHARACTERISTICS
         SPACE 1
         IEFZB4D0 ,          DEFINE REQUEST BLOCK
         SPACE 1
         IEFZB4D2 ,          DEFINE TEXT UNIT VALUES
         SPACE 1
         PRINT ON,&PRTMAC
MAPDSCHK MAPDSCHK ,          MAPPING OF USER SUPPLIED RETURN AREA
         SPACE 1
         CVT   DSECT=YES
         IEFUCBOB ,
         SPACE 2
         IECSDSL1 1          MAP FORMAT 1 DSCB
         AIF   (&MVSXA).BIGEND
DS1FLAG1 EQU   DS1NOBDB+1,1,C'X'  MORE FLAGS
DS1COMPR EQU   X'80'           COMPRESSABLE EXTENDED IF DS1STRP
DS1CPOIT EQU   X'40'           CHECKPOINTED D S
DS1SMSFG EQU   DS1FLAG1+17,1,C'X'  SMS FLAG
DS1SMSDS EQU   X'80'           SMS D S
DS1SMSUC EQU   X'40'           NO BCS ENTRY
DS1REBLK EQU   X'20'           MAY BE REBLOCKED
DS1CRSDB EQU   X'10'           BLKSZ BY DADSM
DS1PDSE  EQU   X'08'           PDS/E
DS1STRP  EQU   X'04'           EXTENDED FORMAT D S
DS1PDSEX EQU   X'02'           HFS D S
DS1DSAE  EQU   X'01'           EXTENDED ATTRIBUTES EXISY
DS1SCEXT EQU   DS1SMSFG+1,3,C'X'  SECONDARY SPACE EXTENSION
DS1SCXTF EQU   DS1SCEXT,1,C'X'  -"- FLAG
DS1SCAVB EQU   X'80'           SCXTV IS AVG BLOCK LEN
DS1SCMB  EQU   X'40'                 IS IN MEGBYTES
DS1SCKB  EQU   X'20'                 IS IN KILOBYTES
DS1SCUB  EQU   X'10'                 IS IN BYTES
DS1SCCP1 EQU   X'08'           SCXTV COMPACTED BY 256
DS1SCCP2 EQU   X'04'                 COMPACTED BY 65536
DS1SCXTV EQU   DS1SCXTF+1,2,C'X'  SEC SPACE EXTNSION VALUE
DS1ORGAM EQU   DS1ACBM         CONSISTENT NAMING - VSAM D S
DS1RECFF EQU   X'80'           RECFM F
DS1RECFV EQU   X'40'           RECFM V
DS1RECFU EQU   X'C0'           RECFM U
DS1RECFT EQU   X'20'           RECFM T   001X XXXX IS D
DS1RECFB EQU   X'10'           RECFM B
DS1RECFS EQU   X'08'           RECFM S
DS1RECFA EQU   X'04'           RECFM A
DS1RECMC EQU   X'02'           RECFM M
*   OPTCD DEFINITIONS   BDAM    W.EFA..R
*                       ISAM    WUMIY.LR
*             BPAM/BSAM/QSAM    WUCHBZTJ
DS1OPTIC EQU   X'80'  FOR DS1ORGAM - CATLG IN ICF CAT
DS1OPTBC EQU   X'40'           ICF CATALOG
DS1RACDF EQU   DS1IND40
DS1SECTY EQU   DS1IND10
DS1WRSEC EQU   DS1IND04
DS1SCAL1 EQU   DS1SCALO,1,C'X'    SEC. ALLOC FLAGS
DS1DSPAC EQU   X'C0'         SPACE REQUEST MASK
DS1CYL   EQU   X'C0'           CYLINDER BOUND
DS1TRK   EQU   X'80'           TRACK
DS1AVRND EQU   X'41'           AVG BLOCK + ROUND
DS1AVR   EQU   X'40'           AVG BLOCK LEN
DS1MSGP  EQU   X'20'
DS1EXT   EQU   X'10'           SEC. EXTENSION EXISTS
DS1CONTG EQU   X'08'           REQ. CONTIGUOUS
DS1MXIG  EQU   X'04'           MAX
DS1ALX   EQU   X'02'           ALX
DS1DSABS EQU   X'00'           ABSOLUTE TRACK
DS1SCAL3 EQU   DS1SCAL1+1,3,C'X'  SEC ALLOC QUANTITY
.BIGEND  END   ,
