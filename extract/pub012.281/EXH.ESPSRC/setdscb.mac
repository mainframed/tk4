SETDSCB  TITLE 'S E T D S C B  ***  ALTER DSCB DATA'
***********************************************************************
*                                                                     *
*   This module reads input specifications (data set name/mask),      *
*   and finds all data sets matching the specification.               *
*                                                                     *
*   Unless PARM=ZAP (or PARM=ALTER or PARM=UPDATE) is specified,      *
*   the program runs in test mode, and lists requested action only.   *
*                                                                     *
*   E.G.:// EXEC PGM=SETDSCB,PARM='ZAP'                               *
*        //SYSPRINT DD SYSOUT=*                                       *
*        //SYSIN    DD *                                              *
*           SELECT DS1DSCHA  (IGNORE DSCBS WITHOUT BITS)              *
*           OFF DS1DSCHA     (RESET THE CHANGE BIT)                   *
*           ON  DS1DSREF     (SET THE ACCESSES BIT)                   *
*           NODE GERHARD                                              *
*           MASK GP2.**                                               *
*           CLEAR            (START A NEW ON/OFF GROUP)               *
*                                                                     *
*   DATASET MASKS ARE PROCESSED AS FOLLOWS:                           *
*                                                                     *
*   1) A NAME WITHOUT WILDCARDS IS PROCESSED AS IS                    *
*                                                                     *
*   2) A % MATCHES ANY CHARACTER OTHER THAN BLANK AND PERIOD          *
*                                                                     *
*   3) A ? MATCHES ANY CHARACTER                                      *
*                                                                     *
*   4) A * MATCHES THE REMAINDER OF THE INDEX LEVEL                   *
*                                                                     *
*   5) A TRAILING ** MATCHES ANY NON-BLANKS                           *
*                                                                     *
*      ABC.DEF                      EXACT NAME; PROCESSED AS IS       *
*      ABC.DE*     MATCHES ABC.DEF, BUT NOT ABC.D OR ABC.DEF.G        *
*      ABC.%%%     MATCHES ABC.DEF, BUT NOT ABC.DE OR ABC.DEF.G       *
*      ABC.*.*     MATCHES ABC.DEF.G, BUT NOT ABC.DEF                 *
*      ABC.D**     MATCHES ABC.DE, ABC.DEF, ABC.DEF.G                 *
*      ABC.????    MATCHES ABC.DEFG, ABC.DE.F, BUT NOT ABC.DEF.G      *
*      ABC.????*   MATCHES ABC.DEF.G, ABC.DEF.GH, BUT NOT ABC.DEF.G.H *
*                                                                     *
*  DUE TO SYSTEM CONSTRAINTS, THE HIGH-LEVEL INDEX MAY NOT BE MASKED  *
*                                                                     *
***********************************************************************
         MACRO ,
&NM      NAMOFF &TX
         LCLA  &I,&K,&N
         LCLC  &C,&D,&LAB,&L
&N       SETA  N'&SYSLIST
&LAB     SETC  '&NM'
&L       SETC  'L'''
.LOOP    AIF   (&I GE &N).MEND
&I       SETA  &I+1
&C       SETC  '&SYSLIST(&I)'
         AIF   ('&C' EQ '').LOOP
         AIF   (K'&C LT 4).NOPTST
         AIF   ('&C'(1,3) EQ 'DS1').NOPFX
.NOPTST  ANOP  ,
&C       SETC  'DS1'.'&C'
.NOPFX   ANOP  ,
&K       SETA  K'&C
&D       SETC  '&C'(4,&K-3)
&LAB     DC    CL5'&D ',AL1(&C-DS1DSNAM,&L&C)
&LAB     SETC  ''
         AGO   .LOOP
.MEND    MEND  ,
         SPACE 2
         PUNCH ' ORDER SETDSCB(P) ' **** EASIER DUMP READING ****
         PUNCH ' SETCODE AC(1)    ' **** MAKE IT WORK ****
         SPACE 1
         COPY  OPTIONGB
         SPACE 1
         SYSPARM LIST=YES
&BUGBEAR SETB  1
         SPACE 2
         PRINT &PRTSOR
SETDSCB  PGMHEAD ZERO15,BASE=(R11,R12), BASE, SAVE AREA, ETC.          *
               PARM=R9,AM=31,RM=24
         MVI   DSPVOL-1,C' '  SET FOR CLEARING
         SERVINIT ,          LOAD AND CALL THE SERVICE ROUTINE
         SERVLOAD @INPREAD,@PARSER,@PRINTER
         SERVLOAD (SUBCAT,,N),(SUBCOMP,,N)
         LA    R9,0(,R9)     CLEAN PARM POINTER
         LTR   R9,R9         ANY?
         BZ    DOINIT        NO?
         L     R9,0(,R9)     LOAD PARM ADDRESS
         LA    R9,0(,R9)     CLEAN IT
         LTR   R9,R9         LOAD AND TEST PARM ADDRESS
         BZ    DOINIT        NO PARM - ALL INPUT FROM SYSIN
         SLR   R8,R8
         ICM   R8,3,0(R9)    TEST PARM LENGTH
         BNP   DOINIT        NO PARM - ALL INPUT FROM SYSIN
         CLC   0(2,R9),=H'3'  LONG ENOUGH ?
         BL    PARMBAD
         CLC   =C'ZAP',2(R9)  POSSIBLE REQUEST?
         BE    PARMZAP
         CLC   =C'ALT',2(R9)  POSSIBLE REQUEST?
         BE    PARMZAP
         CLC   =C'UPD',2(R9)  POSSIBLE REQUEST?
         BNE   PARMBAD       NO; FAIL
PARMZAP  OI    PROFLAGS,FGZAP  SET FOR REAL LIVE DSCB UPDATING
         B     DOINIT
         SPACE 1
PARMBAD  #OPMSG 'SETDSCB',TYPE=INIT
         #OPMSG LIST=('INVALID PARM: ×, IGNORED',,0(R9))
         #OPMSG *END
         SPACE 1
DOINIT   PRTOPEN PR1WORK,OPT=ABEND  PRINT RESULTS FILE
         PRTLIST PRTHEAD,TITLE=1
         SPACE 1
         INPOPEN SYSIN,OPT=ABEND
         B     GETCARD
         SPACE 1
*---------------------------------------------------------------------*
*  LOOP THROUGH SYSIN REQUESTS; ALSO RETURN HERE ON 'CLEAR' REQUEST   *
*---------------------------------------------------------------------*
BRANDNEW PRTL  '**** ALL WORK AREAS CLEARED'
         SPACE 1
GETCARD  PRTROOM 10          MAKE SURE WE HAVE ENOUGH FOR A BIT
         PRTSPACE 3          SPACE A BIT
         NI    PROFLAGS,FGGPOFF  RESET DS GROUP RELATED FLAGS   GP03120
         CLRL  #WORKQ,#WORKL  CLEAR REQUEST AREA
         LA    R0,#WORKQ     POINT TO NEXT AVAILABLE
         ST    R0,#TAILQ     SET FOR NEXT ADDITION
         CLRL  @WORKQ,@WORKL  CLEAR REQUEST AREA
         LA    R0,@WORKQ     POINT TO NEXT AVAILABLE
         ST    R0,@TAILQ     SET FOR NEXT ADDITION
         SPACE 1
*---------------------------------------------------------------------*
*  PROCESS A NEW MASK/DSN REQUEST                                     *
*---------------------------------------------------------------------*
GETCARD1 PRTROOM 10          MAKE SURE WE HAVE ENOUGH FOR A BIT
         CLRL  CSPXCLR       CLEAR THE CATALOG REQUEST AREA
         MVC   DSNMASK,BLANKS  CLEAR PREVIOUS ENTRY
         NI    PROFLAGS,FGDSOFF  RESET MASK MATCHED             GP03120
         SPACE 1
*---------------------------------------------------------------------*
*  GET ANOTHER CONTROL CARD                                           *
*---------------------------------------------------------------------*
GETCARD2 INPGET ,            GET NEXT CARD
         BXH   R15,R15,PGMEXIT  QUIT IF DONE
         MVC   CARDIN,0(R1)  MOVE THE RETURN
         PRTLIST MSGINPUT    ECHO THE CARD IMAGE
         PARSE CARDIN,72,OPT=(COMMA,UNQUOTE)  (NO KEYWORDS OR LISTS)
         LTR   R15,R15
         BNZ   FAILPARS
         ICM   R3,15,PAR@TABL
         BZ    GETCARD2      ALL BLANK
         USING PRSDSECT,R3   DECLARE RESULT LIST
         CLI   PRS$TEXT,C'*'  COMMENT CARD ?
         BE    GETCARD2      YES; JUST GET ANOTHER
         OC    PRS$TEXT(8),BLANKS  FORCE UPPER CASE
         LA    R0,PRS$TEXT   VERB TO BE LOCATED
         LA    R1,VERBBXLE   VERB TABLE
         EXTRN SUBVERB
         SUBCALL SUBVERB
         LTR   R15,R15       DID IT WORK ?
         BNZR  R1            YES; INVOKE MATCHING ADDRESS
         SPACE 1
         PRTL  ' *** UNRECOGNIZED CONTROL CARD ***'
         OICC  4,4,RESULT=RETCODE
         B     GETCARD2      GET ANOTHER CARD
         SPACE 1
VERBBXLE PARKEYBX VERBTAB    DEFINE PARM VALUES
VERBTAB  PARKEYAD 'MASK    ',GETCMASK  SPECIFY DS MASK
VERBTAB2 PARKEYAD 'NAME    ',GETCDSN   SPECIFY DS MASK
         PARKEYAD 'DSNAME  ',GETCDSN   SPECIFY DS NAME OR MASK
         PARKEYAD 'DATASET ',GETCDSN   SPECIFY DS NAME OR MASK
         PARKEYAD 'LIST    ',SETLIST   (NON-FUNCTIONAL - SET LIST MODE)
         PARKEYAD 'SET     ',SETON     SET BITS ON; MOVE DATA
         PARKEYAD 'ZAP     ',SETON     SET BITS ON; MOVE DATA
         PARKEYAD 'ON      ',SETON     SET BITS ON; MOVE DATA   GP03120
         PARKEYAD 'OFF     ',SETOFF    SET BITS OFF
         PARKEYAD 'RESET   ',SETOFF    SET BITS OFF
         PARKEYAD 'SELECT  ',SETVER    SKIP DSCB UNLESS MATCHED
         PARKEYAD 'VERIFY  ',SETVER    SKIP DSCB UNLESS MATCHED
         PARKEYAD 'CLEAR   ',BRANDNEW
*        PARKEYAD '        ',GETC
*        PARKEYAD '        ',GETC
*        PARKEYAD '        ',GETC
         PARKEYAD 'VERBOSE ',SETMODEV                           GP03120
         PARKEYAD 'TERSE   ',SETMODET                           GP03120
         PARKEYAD 'NOTEST  ',SETBUGOF                           GP03120
         PARKEYAD 'NODEBUG ',SETBUGOF                           GP03120
         PARKEYAD 'TEST    ',SETBUGON                           GP03120
VERBTABN PARKEYAD 'DEBUG   ',SETBUGON                           GP03120
         SPACE 1
SETBUGON OI    PROFLAGS,FGBUG  SET DEBUG MODE ON                GP03120
         PRTL  ' ***** Debug mode now on *****',MODE=DEBUG
         B     GETCARD2      NEXT CARD
         SPACE 1                                                GP03120
SETBUGOF NI    PROFLAGS,255-FGBUG  SET DEBUG MODE OFF           GP03120
         PRTL  ' ***** Debug mode now oFF *****',MODE=DEBUG     GP03120
         B     GETCARD2      NEXT CARD                          GP03120
         SPACE 1                                                GP03120
SETMODEV NI    PROFLAGS,255-FGLESS  SET TERSE MODE OFF          GP03120
         OI    PROFLAGS,FGMORE  SET VERBOSE MODE ON             GP03120
         B     GETCARD2      NEXT CARD                          GP03120
         SPACE 1                                                GP03120
SETMODET NI    PROFLAGS,255-FGMORE  SET VERBOSE MODE OFF        GP03120
         OI    PROFLAGS,FGLESS  SET TERSE MODE ON               GP03120
         PRTL  ' ***** Terse mode now on *****'                 GP03120
         B     GETCARD2      NEXT CARD                          GP03120
         SPACE 1
*---------------------------------------------------------------------*
*  GET OPERAND(S) FOR SELECT/VERIFY PROCESSING                        *
*    SIMILAR TO ON/OFF PROCESSING, EXCEPT ACCESS TO THE DSN FIELD IS  *
*    SUPPORTED. THIS PROCESS USES A DIFFERENT WORK QUEUE FROM ON/OFF. *
*                                                                     *
*  NOTE THAT UNMATCHED DSCBS ARE NEVER LISTED (EXCEPT ON CVAF ERROR)  *
*---------------------------------------------------------------------*
SETVER   LA    R4,FLAGONP    GET OFF POINTER
         ICM   R3,15,PRSLINK  AT LEAST ONE OPERAND REQUIRED
         BZ    SYNT#OP
SETVRMOR LA    R0,PRS$TEXT   POINT TO REQUEST
         OC    PRS$TEXT(11),BLANKS  MAKE UPPER CASE
         CLC   =C'DS1',PRS$TEXT
         BNE   SETVRNDS      NO
         LA    R0,PRS$TEXT+3  LOOKUP WITHOUT DS1 PREFIX
SETVRNDS LR    R1,R4         SET THE TABLE ADDRESS
         SUBCALL SUBVERB     LOOK IT UP
         LTR   R15,R15       FOUND A MATCH ?
         BZ    SETVRTDF      NOT MATCHED - TRY HEX OFFSET/VALUE
         L     R14,#TAILQ
         LA    R0,#WORKQ+#WORKL-4
         CR    R14,R0
         BNL   MSG2REQS
         MVC   OFVRFGLN(1,R14),OFOFLEN(R15)  MOVE LENGTH
         LA    R0,DS1DSNAM   SET ORIGIN
         SR    R1,R0         CONVERT TO OFFSET
         STC   R1,OFVROFF(,R14)    SET OFFSET
         IC    R1,OFVRFGLN(,R14)    GET LENGTH-1 BACK
         LA    R1,1(R1,R1)   EXEC LENGTH FOR OFF/ON FLAG TEXT
         EX    R1,EXMVOFON
         LA    R14,3(R1,R14)
         LA    R0,#WORKQ+#WORKL-18
         CR    R14,R0
         BNL   MSG2REQS
         ST    R14,#TAILQ
         ICM   R3,15,PRSLINK  ANOTHER ?
         BZ    GETCARD2      NO; THIS ONE IS DONE
         CLI   PRS$TEXT,C'*'  IS IT A COMMENT ?
         BNE   SETVRMOR
         B     GETCARD2      GET NEXT OPERAND
EXMVOFON MVC   2(*-*,R14),OFOFOFF(R15)  MOVE OFF/ON FLAG TEXT
         SPACE 1
*---------------------------------------------------------------------*
*  UNRECOGNIZED OPERAND - LOOK FOR TWO/THREE HEX VALUES               *
*---------------------------------------------------------------------*
SETVRTDF TM    PRSFLAGS,PRSFGHEX  IS THIS A HEX VALUE ?
         BNZ   SETVRTHX      YES; TEST FURTHER
         LA    R2,PRS$TEXT   POINT TO REQUEST
         CLC   =C'DS1',PRS$TEXT
         BNE   SETVRPDF      NO
         LA    R2,PRS$TEXT+3  LOOKUP WITHOUT DS1 PREFIX
SETVRPDF LM    R15,R1,NAMEOFFP  GET BXLE POINTERS FOR DEFINED NAMES
SETVRLDF CLC   0(5,R15),0(R2)  MATCHES REQUEST ?
         BE    SETVRMDF      YES; GET OUT
         BXLE  R15,R0,SETVRLDF  ELSE TRY AGAIN
         B     ONOFFNOP      NO MATCH; NOT VALID
SETVRMDF MVI   PRS#TEXT+L'PRS#TEXT-1,2   FAKE TWO-DIGIT LENGTH
         OI    PRSFLAGS,PRSFGHEX  FAKE HEX INPUT
         MVC   PRS#THEX+L'PRS#THEX-1(1),5(R15)  COPY OFFSET
         SPACE 1
*---------------------------------------------------------------------*
*  UNRECOGNIZED OPERAND - LOOK FOR TWO/THREE HEX OR STRING VALUES     *
*    SET OFFSET REPLACE {VERIFY}                                      *
*---------------------------------------------------------------------*
SETVRTHX ICM   R15,15,PRS#TEXT  GET TEXT LENGTH
         BZ    ONOFFNOP      HUH ?
         CH    R15,=H'3'     NOT TOO LONG ?
         BH    BADHXOFF      TOO BAD
         L     R0,PRS#THEX+4  LOAD LAST HEX WORD
         L     R8,#TAILQ     GET NEXT AVAILABLE SPACE
         STC   R0,OFVROFF(,R8)   SAVE OFFSET
         ICM   R3,15,PRSLINK  GET NEXT ENTRY
         BZ    SYNT#OP       TOO SHORT
         L     R15,PRS#TEXT  GET LENGTH
         CH    R15,=H'16'    FOUR BIT LENGTH FIELD
         BH    BADLNOFF      TOO LONG
         LA    R1,PRS$TEXT   SET SOURCE STRING ADDRESS
         TM    PRSFLAGS,PRSFGUNQ  UNQUOTED STRING ?
         BNZ   SETVRQRP      YES; SOURCE WAS QUOTED
         TM    PRSFLAGS,PRSFGHEX  ALSO HEX TEXT ?
         BZ    BADHXVAL      NO; INVALID
         LA    R15,1(,R15)   GET ROUNDED LENGTH
         SRA   R15,1         GET HEX OUTPUT LENGTH
         BNP   BADLNOFF      TOO SHORT
         LA    R1,PRS#THEX+L'PRS#THEX    MOVE SOURCE
         SR    R1,R15        LEFT DESTINATION BYTE
SETVRQRP BCTR  R15,0
         STC   R15,OFVRFGLN(,R8)   SET LENGTH
         EX    R15,EXSVTXT   SAVE REPLACEMENT TEXT
         OI    OFVRFGLN(R8),OFVRFGVR   SET VERIFY TEXT PRESENT
         LA    R14,3(R15,R8)   NEW END LOCATION
         LA    R0,#WORKQ+#WORKL-18
         CR    R14,R0
         BNL   MSG2REQS
         ST    R14,#TAILQ    UPDATE IT
         B     GETCARD2      AND RECURSE
         SPACE 1
*---------------------------------------------------------------------*
*  GET OPERAND(S) FOR OFF/RESET REQUEST                               *
*---------------------------------------------------------------------*
SETOFF   OI    PROFLAGS,FGNOLIST  SET UPDATE MODE TO RESET BITS GP03120
         LA    R4,FLAGOFFP   GET OFF POINTER
         B     ONOFFCOM      GET NEXT OPERAND
*---------------------------------------------------------------------*
*  GET OPERAND(S) FOR ON/SET REQUEST                                  *
*---------------------------------------------------------------------*
SETON    OI    PROFLAGS,FGNOLIST   SET UPDATE MODE TO SET BITS  GP03120
         LA    R4,FLAGONP    GET OFF POINTER
*---------------------------------------------------------------------*
*  IDENTIFY OPERANDS AND QUEUE REQUESTS                               *
*---------------------------------------------------------------------*
ONOFFCOM ICM   R3,15,PRSLINK  HAVE AN OPERAND ?
         BZ    SYNT#OP
ONOFFMOR LA    R0,PRS$TEXT   POINT TO REQUEST
         OC    PRS$TEXT(11),BLANKS  MAKE UPPER CASE
         CLC   =C'DS1',PRS$TEXT
         BNE   ONOFFNDS      NO
         LA    R0,PRS$TEXT+3  LOOKUP WITHOUT DS1 PREFIX
ONOFFNDS LR    R1,R4         SET THE TABLE ADDRESS
         SUBCALL SUBVERB     LOOK IT UP
         LTR   R15,R15       FOUND A MATCH ?
         BZ    ONOFFTDF      NOT MATCHED - TRY HEX OFFSET/VALUE
         L     R14,@TAILQ
         LA    R0,@WORKQ+@WORKL-4
         CR    R14,R0
         BNL   MSG2REQS
         ST    R15,0(,R14)   SAVE THE REQUEST
         LA    R14,4(,R14)
         ST    R14,@TAILQ
         ICM   R3,15,PRSLINK  ANOTHER ?
         BZ    GETCARD2      NO; THIS ONE IS DONE
         CLI   PRS$TEXT,C'*'  IS IT A COMMENT ?
         BNE   ONOFFMOR
         B     GETCARD2      GET NEXT OPERAND
         SPACE 1
*---------------------------------------------------------------------*
*  UNRECOGNIZED OPERAND - LOOK FOR TWO/THREE HEX VALUES               *
*---------------------------------------------------------------------*
ONOFFTDF TM    PRSFLAGS,PRSFGHEX  IS THIS A HEX VALUE ?
         BNZ   ONOFFTHX      YES; TEST FURTHER
         LA    R2,PRS$TEXT   POINT TO REQUEST
         CLC   =C'DS1',PRS$TEXT
         BNE   ONOFFPDF      NO
         LA    R2,PRS$TEXT+3  LOOKUP WITHOUT DS1 PREFIX
ONOFFPDF LM    R15,R1,NAMEOFFP  GET BXLE POINTERS FOR DEFINED NAMES
ONOFFLDF CLC   0(5,R15),0(R2)  MATCHES REQUEST ?
         BE    ONOFFMDF      YES; GET OUT
         BXLE  R15,R0,ONOFFLDF  ELSE TRY AGAIN
         B     ONOFFNOP      NO MATCH; NOT VALID
ONOFFMDF MVI   PRS#TEXT+L'PRS#TEXT-1,2   FAKE TWO-DIGIT LENGTH
         OI    PRSFLAGS,PRSFGHEX  FAKE HEX INPUT
         MVC   PRS#THEX+L'PRS#THEX-1(1),5(R15)  COPY OFFSET
         SPACE 1
*---------------------------------------------------------------------*
*  UNRECOGNIZED OPERAND - LOOK FOR TWO/THREE HEX OR STRING VALUES     *
*    SET OFFSET REPLACE {VERIFY}                                      *
*---------------------------------------------------------------------*
ONOFFTHX ICM   R15,15,PRS#TEXT  GET TEXT LENGTH
         BZ    ONOFFNOP      HUH ?
         CH    R15,=H'3'     NOT TOO LONG ?
         BH    BADHXOFF      TOO BAD
         L     R0,PRS#THEX+4  LOAD LAST HEX WORD
         CH    R0,=Y(DS1FMTID-DS1DSNAM)  OUTSIDE CRITICAL RANGE ?
         BL    BADHXOFF      NO; INVALID
         L     R8,@TAILQ     GET NEXT AVAILABLE SPACE
OFVRFGLN EQU   0,1,C'X'      OFFSET TO LENGTH-1 AND FLAGS
OFVRFGVR EQU   X'40'           VERIFY TEXT PRESENT
OFVRFGRP EQU   X'80'           REPLACEMENT TEXT PRESENT
OFVROFF  EQU   1,1,C'X'      OFFSET OF ITEM TO BE CHANGED
OFVRTXT  EQU   2,1,C'C'      REPLACEMENT TEXT
OFVRVER  EQU   3,1,C'C'      (OPTIONAL) VERIFY TEXT
         STC   R0,OFVROFF(,R8)   SAVE OFFSET
         ICM   R3,15,PRSLINK  GET NEXT ENTRY
         BZ    SYNT#OP       TOO SHORT
         L     R15,PRS#TEXT  GET LENGTH
         CH    R15,=H'16'    FOUR BIT LENGTH FIELD
         BH    BADLNOFF      TOO LONG
         LA    R1,PRS$TEXT   SET SOURCE STRING ADDRESS
         TM    PRSFLAGS,PRSFGUNQ  UNQUOTED STRING ?
         BNZ   ONOFFQRP      YES; SOURCE WAS QUOTED
         TM    PRSFLAGS,PRSFGHEX  ALSO HEX TEXT ?
         BZ    BADHXVAL      NO; INVALID
         LA    R15,1(,R15)   GET ROUNDED LENGTH
         SRA   R15,1         GET HEX OUTPUT LENGTH
         BNP   BADLNOFF      TOO SHORT
         LA    R1,PRS#THEX+L'PRS#THEX    MOVE SOURCE
         SR    R1,R15        LEFT DESTINATION BYTE
ONOFFQRP BCTR  R15,0
         STC   R15,OFVRFGLN(,R8)   SET LENGTH
         EX    R15,EXSVTXT   SAVE REPLACEMENT TEXT
         OI    OFVRFGLN(R8),OFVRFGRP   SET REPLACEMENT ENTRY TYPE
         LA    R14,3(R15,R8)   NEW END LOCATION
         LA    R0,@WORKQ+@WORKL-18
         CR    R14,R0
         BNL   MSG2REQS
         ST    R14,@TAILQ    UPDATE IT
*---------------------------------------------------------------------*
*  ANOTHER OPERAND ON THIS CARD SPECIFIES OPTIONAL VERIFY TEXT        *
*---------------------------------------------------------------------*
         ICM   R3,15,PRSLINK  GET NEXT ENTRY
         BZ    GETCARD2      NONE; VERIFY ONLY - GET ANOTHER REQUEST
         ICM   R2,15,PRS#TEXT   GET LENGTH
         BZ    GETCARD2      IGNORE IT IF EMPTY
         TM    PRSFLAGS,PRSFGUNQ  QUOTED STRING ?
         BNZ   ONOFFQV1
         LA    R2,1(,R2)     ROUND
         SRA   R2,1
         BZ    BADLNOFF
ONOFFQV1 BCTR  R2,0          LESS ONE
         CR    R15,R2        SAME LENGTH AS REPLACE TEXT ?
         BNE   BADLNOFF      NO
         LA    R1,PRS$TEXT   SOURCE FOR QUOTED STRING
         TM    PRSFLAGS,PRSFGUNQ  QUOTED STRING ?
         BNZ   ONOFFQV2      YES
         TM    PRSFLAGS,PRSFGHEX  ALSO HEX TEXT ?
         BZ    BADHXVAL      NO; INVALID
         LA    R1,PRS#THEX+L'PRS#THEX-1  MOVE SOURCE
         SR    R1,R15        LEFT DESTINATION BYTE
ONOFFQV2 L     R14,@TAILQ    GET NEXT AVAILABLE SPACE
         EX    R15,EXMVCVER
         OI    OFVRFGLN(R8),OFVRFGVR  SET VERIFY PRESENT
         LA    R14,1(R15,R14)  NEXT AVAILABLE SLOT
         LA    R0,@WORKQ+@WORKL-16
         CR    R14,R0
         BNL   MSG2REQS
         ST    R14,@TAILQ    UPDATE IT
         B     GETCARD2      GET ANOTHER
         SPACE 1
EXSVTXT  MVC   OFVRTXT(*-*,R8),0(R1) REPLACEMENT TEXT
EXMVCVER MVC   0(*-*,R14),0(R1)  MOVE VERIFY TEXT
         SPACE 1
BADHXOFF PRTL  ' INVALID HEX OFFSET. NEED 1-3 DIGITS FROM 2E - 8B'
         OICC  8,16
         B     PGMEXIT
         SPACE 1
BADLNOFF PRTL  ' INVALID TEXT LENGTH. NEED 1 - 16'
         OICC  8,17
         B     PGMEXIT
         SPACE 1
BADHXVAL PRTL  ' TEXT MUST BE VALID HEX TEXT, OR A QUOTED STRING'
         OICC  8,18
         B     PGMEXIT
         SPACE 1
*---------------------------------------------------------------------*
*  UNRECOGNIZED OPERAND ON ON/OFF/SET/RESET                           *
*---------------------------------------------------------------------*
ONOFFNOP PRTL  ' UNRECOGNIZED OPERAND. VALID ARE:'
         OICC  8,8
         LM    R5,R7,0(R4)   LOAD THE BXLE
ONOFFSHO PRTITEM MSGOFTXT
         BXLE  R5,R6,ONOFFSHO
         B     PGMEXIT
MSGOFTXT FDPRT OFOFTXT(R5),L'OFOFTXT,PAD
         SPACE 1
FAILPARS STM   R15,R0,RETCODE  PASS ERROR CODES
         PRTL  ' @PARSER ROUTINE FAILED'
         B     PGMEXIT       AND QUIT
         SPACE 1
SYNT#OP  PRTL  ' INSUFFICIENT OPERANDS ON REQUEST'
         OICC  8,1
         B     PGMEXIT
         SPACE 1
MSG2REQS PRTL  ' TOO MANY REQUESTS - WORK STACK EXCEEDED'
         OICC  8,10
         B     PGMEXIT
         SPACE 1
SYNT#OP2 PRTL  ' TOO MANY OPERANDS ON REQUEST'
         OICC  8,2
         B     PGMEXIT
         SPACE 1
SYNTBMSK PRTL  ' REQUESTED DSNAME/MASK IS MALFORMED'
         OICC  8,3
         B     PGMEXIT
         SPACE 1
SYNTVMSK PRTL  ' REQUESTED VOLSER/MASK IS MALFORMED'
         OICC  8,6
         B     PGMEXIT
         SPACE 1
SETLIST  DS    0H            DOESN'T DO ANYTHING
         B     GETCARD2
         SPACE 1
GETCMASK OI    CSP$FLGS,CSP$FGCP  USING A COMPARE MASK
GETCDSN  ICM   R3,15,PRSLINK  GET NEXT OPERAND
         BZ    SYNT#OP       OOPS - INSUFFICIENT OPERANDS
         ICM   R2,15,PRS#TEXT   GET TEXT LENGTH
         BNP   SYNTBMSK      TOO BAD
         CH    R2,=Y(L'DSNMASK) NOT TOO LONG?
         BH    SYNTBMSK      TOO LONG, TOO BAD
*---------------------------------------------------------------------*
*  PROCESS DS NAME OR MASK FROM ANY SOURCE                            *
*---------------------------------------------------------------------*
         MVC   DSNMASK,PRS$TEXT  MOVE TO MASK AREA
         OC    DSNMASK,BLANKS  UPPER CASE; JUST IN CASE
         L     R15,CSP@SCMP  GET SUBCOMP ADDRESS
         SUBCALL (R15),('MSK',CSPMASK,DSNMASK,CMP@STOR),MF=(E,CALLLIST)
         CH    R15,=H'4'
         BH    SYNTBMSK      NO GOOD
*---------------------------------------------------------------------*
*  CHECK FOR A VOLUME SERIAL MASK/NAME                                *
*---------------------------------------------------------------------*
GETCVOL  ICM   R3,15,PRSLINK  GET NEXT OPERAND
         BZ    NOVOLMSK      OOPS - INSUFFICIENT OPERANDS
         ICM   R2,15,PRS#TEXT   GET TEXT LENGTH
         BNP   SYNTVMSK      TOO BAD
         CH    R2,=Y(L'CSPMVOL) NOT TOO LONG?
         BH    SYNTVMSK      TOO LONG, TOO BAD
         MVC   CSPMVOL,PRS$TEXT  COPY VOLUME MASK
         OC    CSPMVOL,BLANKS    MAKE IT UPPER CASE
         SPACE 1
*---------------------------------------------------------------------*
*  INITIALIZE CATALOG LOOK-UP                                         *
*---------------------------------------------------------------------*
NOVOLMSK MVC   CMPREQ,CMPDSN  DEFAULT TO DSN
         TRT   DSNMASK,TRTMASKP  ANY POSITIONAL MASK REQUEST?
         BZ    MASKLVL       NO; MASKING BY LEVEL
         MVC   CMPREQ,CMPPOS  POSITIONAL MASKING
MASKLVL  PRTLIST MSGMASK,MODE=DEBUG   DISPLAY MASK USED
         CATCALL INIT,CSPMASK,MODE=(@,BASSM)
         BXH   R15,R15,SHONOLOC  FAILED
         PRTLIST MSGNUCAT
         MVC   CURRCAT,CSPRCAT    SAVE CATALOG NAME
         CLC   =C'**',CSPMASK  MULTIPLE CATALOGS ?              GP03119
         BNE   REQ1CAT       NO; SET FOR SINGLE CATALOG         GP03119
         TM    PROFLAGS,FGNOLIST  OTHER THAN LIST ?             GP03120
         BZ    NEXTDSN2      NO; ALLOW UNCHECKED
         TM    CSPMVOL,255-(C'*'-C' ')  ANY VOLUME MASK SPECIFIED?
         BNZ   NEXTDSN2      YES; PROCESS                       GP03119
         PRTL  ' GENERAL MASK SEARCH SUPPORTED WITH VOLUME MASK ONLY'
         MVICC 8,99                                             GP03119
         B     PGMEXIT                                          GP03119
REQ1CAT  OI    CSP$FLGS,CSP$FG1C  USE ONLY ONE CATALOG
         B     NEXTDSN2
         SPACE 1
*---------------------------------------------------------------------*
*  GET NEXT CATALOG ENTRY                                             *
*---------------------------------------------------------------------*
NEXTDSN  CATCALL LOOP,MODE=(@,BASSM)  GET NEXT ENTRY
         BXH   R15,R15,REQDONE DONE WITH THIS MASK
NEXTDSN2 L     R15,CSP@SCMP  GET COMPARE ROUTINE ADDRESS
         SUBCALL (R15),(CMPREQ,CSPRDSN,DSNMASK),                       *
               MF=(E,CALLLIST)
         BXH   R15,R15,NEXTDSN  SKIP IF NO MATCH
         PRTROOM 8           MAKE SURE WE HAVE ENOUGH FOR A BIT
         CLC   CURRCAT,CSPRCAT    TEST CATALOG NAME
         BE    NONEWCAT
         PRTLIST MSGNUCAT
         MVC   CURRCAT,CSPRCAT    SAVE CATALOG NAME
NONEWCAT CLI   CSPRTYP,C'A'  NON-VSAM ENTRY?
         BNE   NONOVSAM      NO; SKIP TO NEXT ENTRY
         MVC   SETCLEAR,SETCLEAR-1  CLEAR REST OF LINE
         SLR   R7,R7
         ICM   R7,1,CSP#VOL LOAD VOLUME COUNT
         BZ    SHONOVOL
         MIN   (R7),=H'5',TYPE=H  SHOW ONLY FIRST FIVE
         LA    R6,CSPRVOL    POINT TO FIRST VOLUME SERIAL
         LA    R5,CSPRDTY    AND MATCHING DEVICE TYPE
         BAS   R9,FORMVOL    FORMAT VOLUME/TYPE STUFF
         SPACE 1
SHONOVOL OI    PROFLAGS,FGONE SHOW AT LEAST ONE MATCH FOUND     GP03120
         BAS   R14,PROCDSCB  READ & MODIFY DSCB
         CH    R15,=H'4'
         BH    PGMEXIT       QUIT ON ERROR
LOOPVOLS LTR   R7,R7         ANY MORE VOLUME SERIALS ?
         BNP   SKIPDSN
         LA    R5,L'CSPRDTY(,R5)  NEXT TYPE
         BAS   R9,FORMVOL    FORMAT VOLUME/TYPE STUFF
         BAS   R14,PROCDSCB  READ & MODIFY DSCB
         CH    R15,=H'4'
         BH    PGMEXIT       QUIT ON ERROR
         B     LOOPVOLS      AND TRY AGAIN
         SPACE 1
NONOVSAM DS    0H            MORE THAN JUST NON-VSAM PROCESSING ?
SKIPDSN  DS    0H
         B     NEXTDSN       TRY NEXT ENTRY
         SPACE 1
*---------------------------------------------------------------------*
*  FORMVOL - PROCESS SERIAL AND TYPE INFORMATION FOR ONE ENTRY        *
*---------------------------------------------------------------------*
FORMVOL  MVC   SETCLEAR,SETCLEAR-1  CLEAR AREA AGAIN
         MVC   DSPVOL(6),0(R6) MOVE FIRST SERIAL
         MVC   DSPDVTYP,0(R5)    AND MATCHING DEVICE TYPE
         CLC   =C'MIGRAT',DSPVOL   MIGRATED?
         BNE   FORMVOLX      NO
         SPACE 1
FORMVOLM MVI   DSPMIGF,C'1'  SET FOR TYPE 1
         CLI   2(R5),X'20'   DASD?
         BE    FORMVOLX      YES
         MVI   DSPMIGF,C'2'  SET FOR TYPE 2
         SPACE 1
FORMVOLX LA    R6,L'CSPRVOL(,R6)  NEXT SERIAL
         BCTR  R7,0          RESIDUAL VOLUME COUNT
         BR    R9            RETURN TO CALLER
         EJECT ,
         PUSH  USING
***********************************************************************
**                                                                   **
**  1) READ THE DSCB1 FOR THE DATA SET NAME IN CSPRDSN               **
**  2) IF ON/OFF OR SET/RESET FUNCTIONS REQUESTED, CHECK WHETHER A   **
**     CHANGE IS REQUIRED                                            **
**  3) IF AN MVC FUNCTION IS REQUESTED, DO OPTIONAL CLC VERIFY. SKIP **
**     DSCB ON MISMATCH.  USE MVC FOR REPLEMENT DATA                 **
**  4) APPLY THE CHANGE(S) AND REWRITE DSCB1 IF THE FGZAP BIT IS ON  **
**                                                                   **
***********************************************************************
PROCDSCB BAKR  R14,0         SAVE A LOT
         LA    R2,MSGBADVS
         SERVCALL UCBDK,DSPVOL   GET UCB ADDRESS FOR THIS SERIAL
         LTR   R15,R15       GOT IT ?
         BNZ   PROBADMS      NO; WRITE MESSAGE
         LR    R8,R0         PRESERVE UCB ADDRESS
         MVC   CVAFWORK(PATWORKL),PATWORK
         XC    BUFLIST(F1CCHHR-BUFLIST),BUFLIST  CLEAR
         OI    BFLHFL,BFLHDSCB  WANT DSCB
         MVI   BFLHNOE,1     ONE DSCB
         LA    R0,DS1FMTID   POINT TO RESULT AREA
         ST    R0,BFLEBUF    SET IT
         MVI   BFLELTH,DSCBLTH  SET READ LENGTH
         OI    BFLEFL,BFLECHR   REQUEST CCHHR FEEDBACK
         MVC   DS1DSNAM,CSPRDSN  ALSO COPY DSN
         CVAFDIR ACCESS=READ,DSN=CSPRDSN,BUFLIST=BUFLIST,              *
               UCB=(R8),BRANCH=(YES,PGM),MF=(E,CVAFWORK)
         STM   R15,R0,RETCODE
         LA    R2,MSGBADRD
         LR    R4,R1         GET CVPL ADDRESS
         LTR   R15,R15       DID IT WORK ?
         BNZ   PROBADMS      NO
         CLI   DS1FMTID,C'1'  REALLY A FORMAT 1 ?
         BNE   PROBADMS      NO
         MVC   F1CCHHR,BFLEARG
*---------------------------------------------------------------------*
*  RUN THROUGH VERIFY/SELECT REQUESTS                                 *
*---------------------------------------------------------------------*
         LA    R3,#WORKQ     POINT TO PROCESS QUEUE
         LA    R4,4          ENTRY LENGTH
         L     R5,#TAILQ     NEXT AVAILABLE ENTRY
         SR    R5,R4         SET LAST USED
PROCVERL ICM   R2,15,0(R3)   GET NEXT WORK REQUEST
         BZ    PROCVERZ      NO TESTS FAILED - PROCESS THIS DS
*---------------------------------------------------------------------*
*  VERIFY MOVE REQUESTS                                               *
*---------------------------------------------------------------------*
         SR    R1,R1         CLEAR FOR IC
         IC    R1,OFVROFF(,R3)     GET ADDRESS OFFSET
         LA    R1,DS1DSNAM(R1)  GET FIELD ADDRESS
         SR    R15,R15       CLEAR FOR LENGTH IC
         IC    R15,OFVRFGLN(,R3)    GET LENGTH-1 AND FLAGS
         N     R15,=X'0000000F' CLEAR FLAGS
         LA    R4,OFVRTXT+1(,R15)    BASIC MVC ENTRY LENGTH
         TM    OFVRFGLN(R3),OFVRFGVR  CLC REQUEST ?
         BZ    PROCVERF      NO; TRY FLAG TEST
         EX    R15,EXCLC2    VERIFY REPLACEMENT TEXT
         BE    PROCVERU      MATCHED - CONTINUE TESTING
         B     PROCDONE      ELSE SKIP THIS DS
*---------------------------------------------------------------------*
*  VERIFY BIT ON/OFF REQUESTS                                         *
*---------------------------------------------------------------------*
PROCVERF LA    R2,OFVRTXT(,R3)  POINT TO OFF TEXT
         LA    R14,0(R4,R3)  POINT TO ON TEXT
         LA    R4,1(R15,R4)  ADD LENGTH OF FLAG TEXT
         MVC   TEST(16),=16X'FF'  PREPARE FOR XC
         EX    R15,EXVERXC
         EX    R15,EXVERNC
         EX    R15,EXVERCLZ
         BNZ   PROCDONE      SKIP IF UNWANTED
         LR    R2,R14        POINT TO ON TEXT
         EX    R15,EXVERMVC
         EX    R15,EXVERNC
         EX    R15,EXVERCLC
         BNE   PROCDONE      NO MATCH - SKIP DS
PROCVERU BXLE  R3,R4,PROCVERL  TRY ANOTHER TEST
         B     PROCVERZ      WE HAVE A WINNER
EXVERXC  XC    TEST(*-*),0(R2)  MOVE FLAGS TO BE TESTED
EXVERMVC MVC   TEST(*-*),0(R2)  MOVE FLAGS TO BE TESTED
EXVERNC  NC    TEST(*-*),0(R1)  AND FLAGS TO BE TESTED
EXVERCLC CLC   TEST(*-*),0(R2)  ALL REQUESTED FLAGS ON ?
EXVERCLZ OC    TEST(*-*),TEST   ALL REQUESTED FLAGS OFF?
*---------------------------------------------------------------------*
*  NO SELECT/VERIFY REQUESTS, OR ALL MATCHED                          *
*---------------------------------------------------------------------*
PROCVERZ TM    PROFLAGS,FGNOLIST  LIST MODE ?                   GP03120
         BNZ   PROCMODS      NO; MODIFY STUFF
         PRTLIST MSGDSINF    IDENTIFY DS AND VOLSER
         PRTLIST LISTDUMP    DISPLAY THE DSCB 1 INFORMATION
         B     PROCDONE
PROCMODS MVC   BACKDSCB,DS1DSNAM  MAKE BACKUP OF THE DSCB
         SPACE 1
*---------------------------------------------------------------------*
*  RUN THROUGH CHANGE REQUESTS                                        *
*---------------------------------------------------------------------*
         LA    R3,@WORKQ     POINT TO PROCESS QUEUE
         LA    R4,4          ENTRY LENGTH
         L     R5,@TAILQ     NEXT AVAILABLE ENTRY
         SR    R5,R4         SET LAST USED
         MVC   DB(2),=X'4110'  PREFIX FOR LA R1,
PROCLOOP ICM   R2,15,0(R3)   GET NEXT WORK REQUEST
         BM    PROCMVC       MVC REQUEST
         BZ    PROCBUMP      EMPTY ENTRY
         SPACE 1
*---------------------------------------------------------------------*
*  APPLY FLAG OFF, THEN FLAG ON REQUESTS                              *
*---------------------------------------------------------------------*
         LA    R4,4          BXLE SIZE FOR ADDRESS IS 4
         MVC   DB+2(2),OFOFSAD(R2)  GET THE FLAG ADDRESS
         EX    0,DB          LOAD THE FULL ADDRESS INTO R1
         SR    R15,R15       GET THE LENGHT
         IC    R15,OFOFLEN(,R2)  LOAD FLAG LENGTH - 1
         MVC   DB2,=8X'FF'
         EX    R15,EXFGOFF   SET FLAG(S) OFF
         LA    R14,OFOFONN(R15,R2)  POINT TO ON FLAG
         EX    R15,EXFGON    SET FLAGS ON
         B     PROCBUMP
         SPACE 1
*---------------------------------------------------------------------*
*  VERIFY MOVE REQUESTS, APPLY IF MATCHED                             *
*---------------------------------------------------------------------*
PROCMVC  SR    R1,R1         CLEAR FOR IC
         IC    R1,OFVROFF(,R3)     GET ADDRESS OFFSET
         LA    R1,DS1DSNAM(R1)  GET FIELD ADDRESS
         SR    R15,R15       CLEAR FOR LENGTH IC
         IC    R15,OFVRFGLN(,R3)    GET LENGTH-1 AND FLAGS
         N     R15,=X'0000000F' CLEAR FLAGS
         LA    R4,OFVRTXT+1(,R15)    BASIC MVC ENTRY LENGTH
         TM    OFVRFGLN(R3),OFVRFGVR  CLC ALSO ?
         BZ    PROCMVC1      NO; JUST MVC
         LA    R14,0(R4,R3)  POINT TO CLC TEXT
         LA    R4,1(R15,R4)  ADD LENGTH OF CLC TEXT
         EX    R15,EXCLC     VERIFY EXISTING TEXT
         BE    PROCMVC1      MATCHED - NOW MOVE REPLACEMENT
         EX    R15,EXCLC2    VERIFY REPLACEMENT TEXT
         BE    PROCBUMP      ACCEPT REPLACE ALREADY DONE
         LA    R5,1(,R15)    MAKE TRUE ITEM LENGTH
         LR    R4,R14        ALSO SAVE VERIFY TEXT
*NOVER*  PRTLIST MSGDSINF    IDENTIFY DS AND VOLSER             GP03356
         LA    R2,MSGNOVER                                      GP03356
         PRTLIST MSGBADR2    SHOW MESSAGE                       GP03356
*OLD*    PRTLIST MSGNOVER                                       GP03356
         MVICC 4,22          SKIP THIS DSCB
         B     PROCSKIP      DISPLAY DSCB
PROCMVC1 EX    R15,EXMVC     MOVE REPLACEMENT TEXT
*---------------------------------------------------------------------*
*  GET NEXT REQUEST                                                   *
*---------------------------------------------------------------------*
PROCBUMP BXLE  R3,R4,PROCLOOP  DO NEXT ELEMENT
         SPACE 1
         CLC   BACKDSCB,DS1DSNAM  ANY CHANGES MADE ?
         BNE   PROCRITE      YES; REWRITE IT
         LA    R2,MSGNOCHG
         B     PROCMSG
         SPACE 1
PROCRITE TM    PROFLAGS,FGZAP  UPDATE MODE ?                    GP03120
         BNZ   PROCWRIT      YES
         LA    R2,MSGBYPUP
         B     PROCMSG
         SPACE 1
PROCWRIT CVAFDIR ACCESS=WRITE,DSN=CSPRDSN,BUFLIST=BUFLIST,             *
               UCB=(R8),BRANCH=(YES,PGM),MF=(E,CVAFWORK)
         LR    R4,R1         GET CVPL ADDRESS
         USING CVPL,R4       DECLARE FOR ERROR MESSAGE
         LA    R2,MSGUPOK
         LTR   R15,R15       DID IT WORK ?
         BZ    PROCMSG       YES, OF COURSE
         LA    R2,MSGBADWT   ELSE FAIL
         SPACE 1
PROBADMS MVICC 8,69
*ROCMSG  PRTLIST MSGDSINF    IDENTIFY DS AND VOLSER             GP03356
PROCMSG  PRTLIST MSGBADR2    WRITE AN ERROR MESSAGE             GP03356
PROCSKIP PRTLIST DUMPDSCB
PROCDONE LM    R15,R0,RETCODE   RELOAD CONDITION/REASON CODES
         PR    ,             RESTORE AND RETURN
EXFGOFF  NC    0(*-*,R1),OFOFOFF(R2)  SET FLAGS OFF
EXFGON   OC    0(*-*,R1),0(R14)       SET FLAGS ON
EXCLC    CLC   0(*-*,R1),0(R14)  VERIFY CLC TEXT
EXCLC2   CLC   0(*-*,R1),OFVRTXT(R3)  VERIFY MVC TEXT (I.E., DONE B4)
EXMVC    MVC   0(*-*,R1),OFVRTXT(R3)  MOVE REPLACEMENT TEXT
         SPACE 1
*SGBADR2 FDOPT NL,CC=C'+'                                       GP03356
         FDSPACE 75
MSGBADR2 FDEXEC MSGDSINF,MSGDSINX                               GP03356
         FDOPT SBA=(*,75)                                       GP03356
         FDGOTO 0(R2)
         SPACE 1
DUMPDSCB FDTM  PROFLAGS,FGBUG,BZ=DUMPDAFT                       GP03120
         FDPRT 'DSCB 1 BEFORE',NL
         FDSNAP BACKDSCB,DSCBLTH+L'DS1DSNAM,DUAL,NOABS,BASE=BACKDSCB
         FDPRT 'DSCB 1 AFTER',NL
DUMPDAFT FDTM  PROFLAGS,FGLESS,BNZ=DUMPDSNO                     GP03120
         FDSNAP DS1DSNAM,DSCBLTH+L'DS1DSNAM,DUAL,NOABS,BASE=DS1DSNAM
         FDPRT 'FMT1 CCHHR',NL
         FDPRT F1CCHHR,HEX,PADL
DUMPDSNO FDPRT *END                                             GP03120
         SPACE 1
LISTDUMP FDTM  PROFLAGS,FGLESS,BNZ=DUMPNODS                     GP03120
         FDPRT 'FMT1 CCHHR',NL                                  GP03120
         FDPRT F1CCHHR,HEX,PADL
         FDSNAP DS1DSNAM,DSCBLTH+L'DS1DSNAM,DUAL,NOABS,BASE=DS1DSNAM
DUMPNODS FDPRT *END                                             GP03120
         SPACE 1
*SGNOVER FDOPT NL,CC=C'+'                                       GP03356
*        FDSPACE 75                                             GP03356
MSGNOVER FDPRT '***FAILED***'                                   GP03356
         FDPRT 'OFFSET',NL
         FDPRT 1(R3),1,HEX,PADL
         FDPRT ', VERIFY TEXT'
         FDPRT 0(R4),(R5),HEX,PAD
         FDPRT ', REQUESTED TEXT'
         FDPRT 2(R3),(R5),HEX,PAD
         FDPRT *END
         SPACE 1
MSGBADVS FDPRT 'UNABLE TO ACCESS VOLUME'
         FDPRT DSPVOL,PADL
         FDPRT *END
         SPACE 1
MSGBADRD FDPRT 'UNABLE TO READ DSCB 1, CVSTAT'
         FDPRT CVSTAT,HEX,PADL
         FDPRT *END
         SPACE 1
MSGNOCHG FDPRT 'NO CHANGES REQUIRED - UPDATE BYPASSED'          GP03356
         FDPRT *END
         SPACE 1
MSGBYPUP FDPRT 'BYPASSED UPDATE - PARM=ZAP NOT SPECIFIED'       GP03356
         FDPRT *END
         SPACE 1
MSGUPOK  FDPRT 'UPDATE SUCCESSFUL'
         FDPRT *END
         SPACE 1
MSGBADWT FDPRT 'UNABLE TO REWRITE DSCB 1, CVSTAT'
         FDPRT CVSTAT,HEX,PADL
         FDPRT *END
         SPACE 1
PATWORK  CVAFFILT MF=L
PATWORKL EQU   *-PATWORK
         POP   USING
         SPACE 1
SHONOLOC PRTLIST MSGLOCPR  PRINT LOCATE ERROR CODE
         MVICC 12,27         SET ERROR CODE
         B     REQLOOP       SKIP 'NO MATCH' MSG
         SPACE 1
REQDONE  TM    PROFLAGS,FGONE MATCH FOUND?                      GP03120
         BNZ   REQLOOP
         PRTL  ' ***** No matches found *****'
REQLOOP  B     GETCARD1      LOOK FOR ANOTHER
         SPACE 1
PGMEXIT  L     R15,CSP@SCMP  GET SUBCOMP ADDRESS                GP03255
         SUBCALL (R15),('END'),MF=(E,CALLLIST)  FREE STUFF
         CATCALL CLOSE,MODE=(@,BASSM)  FREE STORAGE, SUBCOMP, + GP03255
         SERVTERM ,          CLOSE AND FREE EVERYTHING
         PGMEXIT COPYRET=(RETCODE,8)    SET RETURN CODE AND EXIT
         SPACE 2
         LTORG ,
         SPACE 1
HEXTAB   DC    C'0123456789ABCDEF'     1/2
HEXTRTAB EQU   HEXTAB-C'0'             2/2
         SPACE 1
SYSIN    INPWORK SYSIN,WIDTH=80,EODAD=PGMEXIT
         SPACE 1
PR1WORK  PRTWORK SYSPRINT,*USER,TITLE=5
         SPACE 1
PRTHEAD  FDOPT NL,CC=C'#'    AUTO DATE/PAGE HEADER
         FDPRT 'SETDSCB',PADR
         FDREPT 48           INDENT A BIT
         FDPRT 'REQUESTS AND RESULTS'
         FD    *END
         SPACE 1
MSGLOCPR FDPRT ' *** Data set locate failed with code',NL
         FDPRT CSPRCOD,I,DEB,PADL  '
         FDPRT ', reason'
         FDPRT CSPREAS,HEX,PAD
         FDPRT 'for',PAD
         FDPRT CSPMASK,DEB
         FDPRT *END
         SPACE 1
MSGMASK  FDPRT 'Catalog processing with mask :',NL
         FDPRT DSNMASK,PADL
         FDCLC DSNMASK,CSPMASK,BE=MSGMASKX
         FDPRT 'IGGCSI00 (SUBCAT) called with :',NL
         FDPRT CSPMASK,PADL
MSGMASKX FDPRT *END
         SPACE 1
MSGNUCAT FDOPT NL,CC=C'0'    DOUBLE SPACE
         FDPRT 'Processing catalog',NL
         FDPRT CSPRCAT,PADL
         FDPRT *END
         SPACE 1
MSGISVSM FDPRT ' ',LEN=28,NL
         FDPRT 'VSAM Type'
         FDPRT CSPRTYP,PAD
         FDPRT CSPRDSN,PAD
         FDPRT *END
         SPACE 1
MSGINPUT FDOPT NL,CC=C'0'
         FDPRT 'REQUEST :'
         FDPRT CARDIN,PADL
         FDPRT *END
         SPACE 1
SETERRP  VCON ' ',END=SETERRPX
SETERR   DC    CL80'*****>>>>>'
         VCON *END
         SPACE 1
TRTMASKP DC    256AL1(0)     TABLE OF MASK & END CHARACTERS IN DSN
         ORG   TRTMASKP+C'%' POSITIONAL CHARACTER MATCH
         DC    C'%'
         ORG   ,
         SPACE 1
BLANKS   DC    CL80' '       FOR CLEARING DS NAME/MASK / MSGPRT
CMPDSN   DC    C'DSN'        COMPARE DSN TO MASK
CMPPOS   DC    C'POS'        COMPARE DSN TO MASK USING POSITIONAL %
         SPACE 1
MSGDSINF FDOPT NL
         FDTM  PROFLAGS,FGLESS,BNZ=MSGDSING
         FDOPT CC=C'0'
MSGDSING FDPRT CSPRDSN,PADR,NL
         FDPRT '('
         FDPRT CSP#VOL,IZ,RADJ,LEN=3 NUMBER OF VOLUMES
         FDPRT ')',PADR
         FDCLI CSP#VOL,0,BE=MSGDSINX
         FDGOTO MSGDSSER
         SPACE 1
MSGDSVOL FDPRT ' ',NL,LEN=75      PRINT ADDITIONAL VOLSERS
MSGDSSER FDPRT DSPVOL        VOLSER + MIGRATE FLAG
         FDPRT DSPDVTYP,HEX,PAD   DEVICE TYPE
MSGDSINX FDPRT *END
         SPACE 1
*DEFER*  PRINT &PRTMAC
*---------------------------------------------------------------------*
*  TABLE OF DEFINED FLAG SETTINGS - ON                                *
*---------------------------------------------------------------------*
         PARKEYBX FLAGON
FLAGON   PARKEYFG DSORGU,DS1DSORG,0,DS1DSGU  UNMOVEABLE
FLAGON2  PARKEYFG READPSWD,DS1DSIND,0,DS1IND10+DS1IND04
         PARKEYFG PASSWORD,DS1DSIND,DS1IND04,DS1IND10  READ/WRITE PSWD
         PARKEYFG RACF,DS1DSIND,0,DS1RACDF
         PARKEYFG DSCHA,DS1DSIND,0,DS1DSCHA
FLAGONN  PARKEYFG CHKPT,DS1DSIND,0,DS1CHKPT
         SPACE 1
*---------------------------------------------------------------------*
*  TABLE OF DEFINED FLAG SETTINGS - OFF                               *
*---------------------------------------------------------------------*
         PARKEYBX FLAGOFF
FLAGOFF  PARKEYFG DSORGU,DS1DSORG,DS1DSGU,0        UNMOVEABLE
FLAGOFF2 PARKEYFG READPSWD,DS1DSIND,DS1IND10+DS1IND04,0
         PARKEYFG PASSWORD,DS1DSIND,DS1IND04+DS1IND10,0 NO PSWD
         PARKEYFG RACF,DS1DSIND,DS1RACDF,0
         PARKEYFG DSCHA,DS1DSIND,DS1DSCHA,0
FLAGOFFN PARKEYFG CHKPT,DS1DSIND,DS1CHKPT,0
         SPACE 1
*---------------------------------------------------------------------*
*  TABLE OF SUPPORTED DS1 FIELDS                                      *
*---------------------------------------------------------------------*
         PARKEYBX NAMEOFF
NAMEOFF  NAMOFF DSSN
NAMEOFF2 NAMOFF VOLSQ,CREDT,EXPDT,NOEPV,NOBDB,FLAG1,SYSCD,REFD
         NAMOFF SMSFG,SCEXT,SCXTF,SCXTV,DSORG,RECFM,OPTCD,BLKL,LRECL
         NAMOFF KEYL,RKP,DSIND,SCALO,SCAL1,SCAL3,LSTAR,TRBAL
         NAMOFF DS1EXT1,DS1EXT2,DS1EXT3
NAMEOFFN NAMOFF PTRDS        FMT 2/3 CCHHR
         SPACE 1
PATCHER  DC    30S(*)        MINI-PATCH
         SPACE 1
SAVE     DSECT ,
DB       DC    D'0'          WORK AREA
DB2      DC    D'0'          WORK AREA
TEST     DS    CL16          AND/OR WORK AREA
         SERVDEFS ,          DEFINE SERVICE ROUTINE VALUES
#TAILQ   DS    A             LINK WORD OF LAST ASSIGNED ENTRY
@TAILQ   DS    A             LINK WORD OF LAST ASSIGNED ENTRY
CURRCAT  DC    CL44' '       CURRENT CATALOG
CARDIN   DC    CL80' '       INPUT CARD IMAGE
         SPACE 2
*     PARAMETER LIST AND WORK AREA
*
***********************************************************************
**   THESE FIELDS MUST STAY CONTIGUOUS FOR CLEARING                  **
**                                                                   **
         CATSPARM PFX=CSP,DSECT=   SUBCAT INTERFACE PARAMETER AREA
@SUBCAT  EQU   CSP@SCAT,4,C'V'
@SUBCOMP EQU   CSP@SCMP,4,C'V'
CATCALL  SUBCALL (1,2,3),MF=L  SUBCAT REMOTE PARAMETER LIST
CMP@WORK DC    A(0)          ADDRESS OF GETMAINED WORK AREA
CALLLIST DC    A(CMPREQ,CSPMASK,DSNMASK,CMP@WORK)
CMP@STOR DC    A(0)          MORE STORAGE
DSNMASK  DC    CL44' '       USER'S REQUESTED DS NAME OR MASK
VOLMASK  DC    CL6' ',CL2' '    REFERENCED VOLUME (COMPARE PAD)
CMPREQ   DC    C'DSN'        COMPARE DSN TO MASK (DSN OR POS)
         SPACE 1
         MAPPARSE DSECT=NO   @PARSER INVOCATION ADDRESS
         SPACE 1
PROFLAGS DC    X'00'         PROCESSING FLAG
FGZAP    EQU   X'80'           USER IS UPDATING LIVE DSCBS      GP03120
FGBUG    EQU   X'40'           DEBUG FLAG
FGMORE   EQU   X'20'           MORE INFO (INCLUDE VSAM STUFF)
FGLESS   EQU   X'10'           LESS INFO - ONE LINE PER DATA SET
FGNOLIST EQU   X'08'           RESET BITS REQUESTED             GP03120
FGONE    EQU   X'01'           LOCAL DSN MATCH FOUND
FGDSOFF  EQU   255-(FGONE)   FLAGS RESET FOR NEW DATA SET       GP03120
FGGPOFF  EQU   255-(FGONE+FGNOLIST)  RESET FOR NEW GROUP        GP03120
         SPACE 1
*---------------------------------------------------------------------*
*  NEXT BATCH IS CLEARED TOGETHER, BUT FORMATTED SEPARATELY           *
*---------------------------------------------------------------------*
         DC    C' '          SETCLEAR - 1                 1/2
DSPVOL   DC    CL6' '        VOL-SER + MIGRATE FLAG
DSPMIGF  DC    C' '          MIGRATION TYPE OR BLANK
SETCLEAR EQU   DSPVOL,(*-DSPVOL),C'C'                     2/2
DSPDVTYP DS    XL4'0'        DEVICE TYPE
         SPACE 1
CVAFWORK CVAFFILT MF=L
BUFLIST  ICVAFBFL DSECT=NO
         IECSDSL1 1
DSCBLTH  EQU   *-IECSDSL1-L'DS1DSNAM  96-BYTE DATA PORTION OF DSCB
F1CCHHR  DS    XL5           CCHHR
BACKDSCB DS    XL140         COPY OF UNMODIFIED DSCB
         SPACE 1
         DS    0F            FASTER ?
#WORKQ   DS    XL256'0'      REQUEST QUEUE
#WORKL   EQU   *-#WORKQ      END OF WORK SPACE
         SPACE 1
         DS    0F            FASTER ?
@WORKQ   DS    4XL256'0'     REQUEST QUEUE
@WORKL   EQU   *-@WORKQ      END OF WORK SPACE
         SPACE 1
SAVEEND  EQU   *
         SPACE 2
         MAPPARST ,          MAP THE RETURNED ENTRIES FROM PARSE CALLS
         SPACE 2
CVPL     ICVAFPL ,
         SPACE 2
         PRINT &PRTSYS
         CVT   DSECT=YES
         DCBD  DEVD=DA,DSORG=PS
         IHACDE ,
         IHAPSA ,
         END   ,
