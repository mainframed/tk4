 /* FIND SPECIFIED MEMBERS OF OPTIONAL SOURCE MATERIAL TAPES */
 FINDIT: PROC(PARM) OPTIONS(MAIN);
0/*
 THIS PROGRAM WAS WRITTEN BY:

      SEYMOUR JEROME METZ
      PINKERTON COMPUTER CONSULTANTS, INC.
      5881 LEESBURG PIKE
      BAILEYS CROSSROADS, VIRGINIA  22041
      703-820-5571

 THIS PROGRAM IS FURNISHED ON AN AS-IS BASIS.
 IT IS NOT PROPRIETARY, AND MAY BE DISTRIBUTED TO
      ANY OTHER INSTALLATION.
 FEEL FREE TO CONTACT ME IF ANY PROBLEMS OCCUR.
 */
1
 DCL
      PARM CHAR(*),
      (
      CARD CHAR(80),
      CCARD CHAR(80),
      MT BIT(1) INIT('1'B),
      OPEN BIT(1) INIT(0),
      OLD_NAME CHAR(8) VAR INIT(''),
      NAME CHAR(8) VAR,
      OLD_VOL CHAR(6) INIT(' '),
      VOL CHAR(6),
      OLD_SEQ FIXED BIN INIT(0),
      SEQ FIXED BIN,
      DSN CHAR(44) VARYING INIT('')
      ) STATIC;
-DCL
 SYSUT1 RECORD ENV(F(14400,80),REWIND),
 SYSUT2 RECORD, /* ENV(F(14400,80)) REMOVED TO ALLOW 2314 */
 LISTING PRINT;
0DCL MODJFCB EXTERNAL ENTRY(
      CHAR(8), CHAR(6), FIXED BIN(15,0), CHAR(44) VARYING);

 OPEN FILE(SYSIN) INPUT STREAM;
 ON ENDFILE(SYSIN) GO TO HELL;

 ON ERROR SNAP BEGIN;
     ON ERROR SNAP CALL IHEDUMP;
     DISPLAY('ERROR WAS SIGNALLED');
     CALL IHEDUMP;
     END;

 MAIN_LOOP: PUT LIST(' ') SKIP(2); GET EDIT(CARD) (A(80)) COPY;
 /* CRUDE, BUT ALL VERY WELL FOR A SPREE */
 IF SUBSTR(CARD,1,1)=' ' THEN DO;
      PUT LIST('SCHMUCK, COL 1 IS BLANK');
      CALL IHESARC(4095);
       RETURN;
      END;
0/* CHECK FOR DSN OPTION */
 IF SUBSTR(CARD,1,4)='DSN=' THEN DO;
      DSN=SUBSTR(CARD,5,44);
      GO TO MAIN_LOOP;
      END;
0/* FIND LENGTH OF VOLUME SERIAL */
 I=INDEX(CARD,' ')-1;
 IF (I<0) × (I>6) THEN GO TO BAD_BOOK;
 VOL=SUBSTR(CARD,1,I);
0/* FIND FILE SEQUENCE NUMBER */
 DO I1=I+1 TO 71 WHILE(SUBSTR(CARD,I1,1)=' '); END;
 IF I1>70 THEN GO TO BAD_MOUTH;
 IF SUBSTR(CARD,I1+1,1)=' ' THEN
      SEQ=SUBSTR(CARD,I1,1);
      ELSE
 IF SUBSTR(CARD,I1+2,1)=' ' THEN DO;
      SEQ=SUBSTR(CARD,I1,2);
      I1=I1+1;
      END;
      ELSE GO TO BAD_MOUTH;
0/* FIND NAME */
 DO I=I1+1 TO 75 WHILE(SUBSTR(CARD,I,1)=' '); END;
 IF I>74 THEN DO;
     NAME=(8)'9'; GO TO NO_NAME; END;
 I1=INDEX(SUBSTR(CARD,I+1),' ');
 IF (I1=0)×(I1>8) THEN GO TO FOUL_MOUTH;
 NAME=SUBSTR(CARD,I,I1);

 NO_NAME: /* CARD IN FORM SER SEQ IS USED TO LIST WHOLE FILE */
0/* PREFIX SHORT NUMERIC VOL-SER'S */
 IF (SUBSTR(VOL,1,1) >= '0') & (SUBSTR(VOL,5,1) = ' ') THEN
      VOL= 'M' ×× VOL;
0/* TEST FOR SAME-VOLSER OPTION */
 IF VOL='*' THEN VOL=OLD_VOL;

 IF (OLD_VOL = VOL) & (OLD_SEQ = SEQ) THEN GO TO LEAVE_OPEN;
0RE_OPEN: IF OPEN THEN DO;
 /* IF SYSUT1 IS OPEN, THIS CODE WILL REDUCE REPOSITIONING TIME.
    THERE ARE THREE CASES. */
     IF OLD_VOL = VOL THEN
0                            /* SAME TAPE FURTHER ON */
         IF OLD_SEQ < SEQ THEN CALL SETLEAV(SYSUT1);
0                            /* SAME TAPE EARLIER */
                          ELSE CALL SETRERD(SYSUT1);
0                            /* NEW TAPE */
                             /* POSITION OLD TAPE AS PER DISP ON DD */
         ELSE CALL SETDISP(SYSUT1);
0    CLOSE FILE(SYSUT1);
     END;
 OLD_NAME=''; MT='1'B;
-/* AT THIS POINT, ADD CODE FOR MULTI-FILE, MULTI-VOLUME */
 IF VOL = '      ' THEN GO TO BAD_BOOK;
 CALL MODJFCB( 'SYSUT1  ', VOL, SEQ, DSN );
 /* THIS IS STILL A MAKE-SHIFT FOR A COMPLETE PACKAGE */
-
 OPEN FILE(SYSUT1) RECORD INPUT;
 OPEN='1'B;
 ON ENDFILE(SYSUT1) GO TO MAIN_LOOP;
 /* DEFER CLOSE UNTIL DISP IS CALLED, BASED ON NEXT CONTROL CARD */
0/* BE PREPARED TO REPROCESS SAME MEMBER */
 LEAVE_OPEN: IF NAME <= OLD_NAME THEN GO TO RE_OPEN;
 OLD_NAME=NAME;
 OLD_VOL=VOL;
 OLD_SEQ=SEQ;
0LOOK_LOOP: IF MT THEN READ FILE(SYSUT1) INTO(CCARD);
 MT='1'B;
 IF SUBSTR(CCARD,1,3) ^= './ ' THEN GO TO LOOK_LOOP;
 PUT LIST(CCARD) SKIP;
0/* FIND OPCODE */
 DO I=3 TO 40 WHILE(SUBSTR(CCARD,I,1)=' '); END;
 IF SUBSTR(CCARD,I,4) ^= 'ADD ' THEN GO TO LOOK_LOOP;
0/* FIND OPERAND */
 DO I1=I+4 TO 50 WHILE(SUBSTR(CCARD,I1,1) = ' ' );
      END;
 IF I1>49 THEN GO TO LOOK_LOOP;
0I=I1; /* SET UP FOR IEBUPDAT FORM */
 IF INDEX(PARM,'DAT') ^= 0 THEN GO TO IEBUPDAT;
 /* LOCATE NAME=X (IEBUPDTE FORM) */
 I=INDEX(SUBSTR(CCARD,I1),'NAME=');
 IF I=0 THEN GO TO LOOK_LOOP;
 I=I+I1+4;
 IEBUPDAT:
 /* FIND LENGTH OF NAME */
 I1=INDEX(SUBSTR(CCARD,I),' ');
 I2=INDEX(SUBSTR(CCARD,I),',');
 IF I1=0 THEN I1=I2;
 IF I2=0 THEN I2=I1;
 I1=MIN(I1,I2)-1;
 IF I1<1 THEN GO TO GEHENNA;
 IF SUBSTR(CCARD,I,I1) < NAME THEN GO TO LOOK_LOOP;
 IF SUBSTR(CCARD,I,I1) > NAME THEN GO TO KEEPIT;
 /* IF MISSING MEMBER, REMEMBER THE CURRENT ADD CARD */
1COPY: WRITE FILE(SYSUT2) FROM(CCARD);
      READ FILE(SYSUT1) INTO(CCARD);
      IF SUBSTR(CCARD,1,3) ^= './ ' THEN GO TO COPY;
 /* FIND OPCODE */
 DO I=3 TO 72 WHILE(SUBSTR(CCARD,I,1)=' '); END;
 IF SUBSTR(CCARD,I,6)= 'ENDUP ' THEN GO TO MAIN_LOOP;
 IF SUBSTR(CCARD,I,4)^= 'ADD ' THEN GO TO COPY;
0KEEPIT: MT=0; GO TO MAIN_LOOP;
1/* ERROR MESSAGES AND OTHER CONSOLATION PRIZES */
 FOUL_MOUTH: /* BAD NAME ON CONTROL CARD */
 PUT LIST('BAD NAME') SKIP; GO TO ERR;
0BAD_BOOK: /* BAD VOLUME SPECIFICATION */
 PUT LIST('BAD VOL-SER ') SKIP; GO TO ERR;
0BAD_MOUTH: /* BAD FILE SEQUENCE NUMBER */
 GEHENNA: /* INVALID NAME CARD */
 ERR:
 SIGNAL ERROR;
 HELL: RETURN;
 END;
