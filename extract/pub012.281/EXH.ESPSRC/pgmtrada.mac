TRADA    TITLE 'P G M T R A D A  ***  SYSADATA SOURCE BUILDER'
         COPY  OPTIONGB      DEFINE GLOBALS                     GP06213
         SYSPARM LIST=YES    SET GLOBALS                        GP06213
***********************************************************************
**                                                                   **
** PGMTRADA - PROGRAM TO READ SYSADATA OUTPUT AND PRODUCE A COMPLETE **
**       SOURCE LISTING IN STORAGE. USED BY PGMTRACE UTILITY.        **
**                                                                   **
**    TESTED WITH VERSION 2 AND 3 OF SYSADATA RECORDS ONLY.  GP06213 **
**    UPDATED FOR TACHYON VERSION 5 (DEFAULT)                GP08284 **
**                                                                   **
**  INPUT:  DD SYSADATA - ADATA OUTPUT FROM ASSEMBLER. MUST BE A PDS **
**                        (CALLER PASSES MEMBER NAME AND ROOT ADDR)  **
**  PARM: WORD 1 : HALF-WORD LENGTH, FOLLOWED BY DATA AS MAPPED BY   **
**                   CALLSECT (OR OMIT LENGTH)                       **
**                                                                   **
**  OUTPUT: MEMORY - LIST OF ALL SOURCE STATEMENTS BY CSECT AND      **
**                        OFFSET.                                    **
**                         0- 3: LINK POINTER                        **
**                         4- 7: ESD ID                              **
**                         8-11: OFFSET                              **
**                        12-15: REQUEST COUNT                       **
**                        16-19: LOCATION COUNTER                    **
**                        20-23: STATEMENT NUMBER                    **
**                        24-24: FLAG (IF REFERENCED, ETC.)          **
**                        25-104 TEXT IMAGE                          **
**                       105-112 SOURCE MEMBER                       **
**                                                                   **
**  PROGRAM RUNS AM31, RM 24 DUE TO QSAM CONTROL BLOCKS              **
**                                                                   **
***********************************************************************
**                                                                   **
**  ADDED BY GERHARD POSTPISCHIL  JUNE 1999                          **
**                                                                   **
***********************************************************************
PGMTRADA CSECT ,             START OUR PROGRAM
PGMTRADA AMODE 31            I CAN COUNT ABOVE 16M
PGMTRADA RMODE 24              BUT QSAM CAN'T
         STM   R14,R12,12(R13)  SAVE CALLER'S REGISTERS
         LA    R12,0(,R15)   GET BASE AND ACCESS REGISTER
         USING PGMTRADA,R12   DECLARE THE BASE
*  FIND OUT WHETHER THIS IS THE FIRST ENTRY, AND GETMAIN STUFF IF NOT
         LA    R9,0(,R1)     ONE OR MORE PARAMETERS?
         LTR   R9,R9
         BZ    BADOUT
         L     R10,0(,R9)    GET PARM OPERAND FROM EXEC
         LA    R10,0(,R10)
         LTR   R10,R10
         BZ    BADOUT
         USING CALLSECT,R10
         CLI   CALLFUN,X'40'  HALF-WORD LENGTH PREFIX ?
         BNL   FROMLINK      NO
         LA    R10,2(,R10)   SKIP LENGTH
FROMLINK ICM   R9,15,CALLWORK   HAVE WE GOTTEN THE WORK AREA BEFORE?
         BNZ   FROMSAVE
         L     R3,=A(SAVEEND-SAVE)  GET LENGTH
         STORAGE OBTAIN,LENGTH=(R3),SP=66,LOC=BELOW,BNDRY=PAGE  GP03135
         LR    R9,R1         SAVE RETURNED ADDRESS
         LR    R2,R1         ALSO COPY FOR CLEAR
         SR    R15,R15       CLEAR LENGTH AND FILL
         MVCL  R2,R14        CLEAR GOTTEN STORAGE
         ST    R9,CALLWORK   SAVE FOR NEXT CALL
         USING SAVE,R9       *TEMP DEFINITION*
         LH    R0,=Y(4+1+L'PRINTDAT)  RDW FOR PRINT LINE
         STH   R0,PRINTRDW   INITIALIZE IT
         MVI   PRINTDAT-1,C' '
         LA    R1,@DIRLIST   GET PRIOR ELEMENT
         ST    R1,@DIRLAST   MAKE POINTER TO LAST POINTER ON CHAIN
         MVC   DCBLIST(PATDCLLN),PATDCL  COPY DCBLIST AND DCB
         DROP  R9
FROMSAVE ST    R13,4(,R9)    MAKE BACK LINK
         ST    R9,8(,R13)    MAKE DOWN LINK
         LR    R13,R9        SET NEW SAVE ADDRESS
         USING SAVE,R13      DECLARE IT
         LA    R11,DUMPSAVE
         DROP  R13
         USING DUMPSAVE,R11
         SPACE 1
         CLI   CALLFUN,CFCLOSE CLOSE AND FREE EVERYTHING?
         BE    CLOSEOUT      YES
         MVC   PRINTDAT,PRINTDAT-1  CLEAR PRINT LINE
         OC    CALLMEM,BLANKS  UPPER CASE
         CLI   CALLFUN,CFLOOK  REQUEST TO LOCATE ENTRY ?
         BE    REQLOOK       YES; FIND IT
         CLI   CALLFUN,CFPOINT BUILD DATA ?
*NEXT*   BE    REQPOINT      YES; POINT AND READ
         BNE   BADOUT        INVALID FUNCTION REQUESTED
         SPACE 1
REQPOINT BAS   R9,FINDMEM    DOES THE MEMBER EXIST ALREADY?
         LTR   R7,R7         ANY SOURCE ?
         BNZ   FINALEXT      YES; TAKE GOOD RETURN
         LTR   R8,R8         TEST MEMBER
         BNZ   NOTEXT        FOUND, WITH ERRORS - RETURN WARNING
         SPACE 1
REQPOIN2 TM    DCBOFLGS+PDSDCB-IHADCB,DCBOFOPN  ALREADY OPEN ?
         BNZ   DONEOPEN      YES; DON'T WASTE TIME
         TM    PROCFLAG,PFFATAL  FAILED BEFORE ?
         BNZ   BADOUT        YES; SKIP OPEN ATTEMPT, WTO, ETC.
         PUSH  USING
         DEVTYPE PDSDCB+DCBDDNAM-IHADCB,DB  LOOK FOR DD
         BXH   R15,R15,BADOPEN
         CLI   DB+2,X'20'    ANYTHING OTHER THAN DASD ?
         BNE   REQSEQ        YES; MAY BOMB
         L     R15,PSATOLD-PSA  GET CURRENT TCB
         L     R15,TCBJSTCB-TCB(,R15)  JSTCB, JUST IN CASE (?)
         L     R15,TCBJSCB-TCB(,R15)   JSCB
         L     R15,JSCDSABQ-IEZJSCB(,R15)  GET QUEUE HEADER
         LA    R15,DSQFRSTP-DSABQDB-(DSABFCHN-DSAB)(,R15)
         USING DSAB,R15
LOOPDSAB ICM   R15,15,DSABFCHN  GET NEXT DSAB ON CHAIN
         BZ    REQOPEN       NOT FOUND; USE PARTITIONED
         ICM   R14,15,DSABTIOT  ANY TIOT ?
         BZ    LOOPDSAB      NO; TRY ANOTHER
         USING TIOENTRY,R14  DECLARE ENTRY
         CLC   DCBDDNAM-IHADCB+PDSDCB,TIOEDDNM   MATCHING DDN ?
         BNE   LOOPDSAB      NO; TRY AGAIN
         TM    DSABORG1,X'02'  PARTITIONED ?
         BO    REQOPEN       YES
         TM    DSABORG1,X'40'  SEQUENTIAL ?
         BO    REQSEQ        YES
         SPACE 1
         SR    R2,R2
         SR    R3,R3
         ICM   R3,7,TIOEFSRT  ALSO THE UCB ADDRESS
         ICM   R2,7,TIOEJFCB  SAVE JFCB ADDRESS
         DROP  R14,R15
         AIF   (NOT &MVSXA).SKPSWA1                             GP06213
         XC    LISTSWA(LISTSWAL),LISTSWA  CLEAR IT
         STCM  R2,7,LISTSVA+4  PLACE IN SECOND WORD OF LIST
         TM    LISTSVA+4+2,1   TOKEN OR ADDRESS ?
         BZ    LOOKSVA       ADDRESS; JUST ADJUST AND RETURN
         LA    R1,LISTSVA    GET SVA ADDRESS
         ST    R1,LISTEPA    STORE IN POINTER
         MVC   LISTSWA+8,=C'RL'  SET FUNCTION
         LA    R1,LISTSWA+8
         ST    R1,LISTSWA+4  POINTER TO FUNCTION
         SWAREQ EPA=LISTEPA,MF=(E,LISTSWA),UNAUTH=YES
         SLR   R1,R1         SIGNAL ERROR
         BXH   R15,R15,REQOPEN   UNEXPECTED FAILURE
         L     R2,LISTSVA    GET STORAGE ADDRESS OF JFCB
         B     LOOKSWA8      COMMON RETURN
.SKPSWA1 ANOP  ,                                                GP06213
LOOKSVA  LA    R2,16(,R2)    SKIP PREFIX
LOOKSWA8 MVC   DATADSN,JFCBDSNM-JFCBDSNM(R2)  COPY THE DS NAME
         USING UCBOB,R3      DECLARE THE UCB
         CLI   UCBTBYT3,UCB3DACC  DOUBLE-CHECK
         BNE   REQSEQ        OOPS
         MVC   DATAVOL,UCBVOLI  GET SERIAL
         L     R14,PATCAM
         LA    R15,DATADSN
         LA    R0,DATAVOL
         LA    R1,BUFFER
         STM   R14,R1,DB     MAKE CAMLST
         OBTAIN DB           GET FORMAT 1
         BXH   R15,R15,REQSEQ  OOPS
         LA    R1,BUFFER
         USING DS1FMTID,R1
         TM    DS1DSORG,DS1DSGPO
         BNZ   REQOPEN       OPEN PDS
         POP   USING
REQSEQ   MVC   PDSDCB(PATSEQLN),PATSEQ  SET FOR SEQUENTIAL DCB
         OI    PROCFLAG,PFSEQ  ALSO SET FLAG
REQOPEN  LA    R2,PDSDCB     GET DCB ADDRESS
         MVI   TACHFLAG,0    RESET TACHYON VERSION FLAG         GP08284
         OPEN  ((R2),(INPUT,REREAD)),MF=(E,DCBLIST)  OPEN INPUT DCB
         TM    DCBOFLGS+PDSDCB-IHADCB,DCBOFOPN  ALREADY NOW ?
         BNZ   DONEOPEN      YES; DON'T WASTE TIME
BADOPEN  OI    PROCFLAG,PFFATAL  FAILED
         WTO   'PGMTRADA: SYSTRADA OPEN FAILED'
         B     BADOUT
DONEOPEN STORAGE OBTAIN,LENGTH=DIRSIZE,SP=66,LOC=ANY
         L     R4,@DIRLAST   GET POINTER TO LAST ON CHAIN
         ST    R1,0(,R4)     MAKE CHAIN
         ST    R1,@DIRLAST   SET POINTER TO LAST ON CHAIN
         LR    R8,R1         USE DECLARED BASE
         USING DIRDSECT,R8
         XC    DIRDSECT(DIRSIZE),DIRDSECT  CLEAR IT
         MVC   DIRNAME,CALLMEM  COPY NAME
         OI    DIRFLAGS,DFMISS  MEMBER NOT FOUND (PROVISIONALLY)
         XC    PREVCLR,PREVCLR  CLEAR 'PREVIOUS' AREA
         MVI   LOCFLAG,0     RESET
         MVI   PASS#,1       SET FOR FIRST PASS
         LA    R1,DIR@ESD    PRIME POINTER TO END OF ESD CHAIN
         ST    R1,@ESDLAST
         XC    BIAS(8),BIAS     RESET BATCH MODULE COUNTER
         XI    DIRFLAGS,DFMISS+DFNSRC  FOUND; SET NO SOURCE
         MVI   TACHFLAG,0    RESET TCHYON FLAG                  GP08284
*TEST*   B     PASS1
         SPACE 1
PASS2    MVI   PASS#,2       SET FOR SECOND PASS
         LA    R1,DIR@SRC    PRIME POINTER TO END OF OUTMAP CHAIN
         ST    R1,@OUTLAST
         SPACE 1
PASS1    TM    PROCFLAG,PFSEQ  IS INPUT SEQUENTIAL ?
         BNZ   PASS1SEQ      YES; SKIP FIND
         FIND  PDSDCB,CALLMEM,D  LOOK FOR THE MEMBER
*FAILS*  POINT CALLMEM,PDSDCB  LOOK FOR THE MEMBER
         LTR   R15,R15       WAS IT FOUND ?
         BNZ   WARNOUT
PASS1SEQ LA    R1,BUFFER
         ST    R1,BLOKBXLE   PRIME THE BXLE READ PROCESSING
         XC    BUFFER(8),BUFFER
         BCTR  R1,0
         ST    R1,BLOKBXLE+8
         SPACE 1
DATAGET  BAS   R14,GETREC    GET A RECORD
         LTR   R6,R1         TEST IT
         BZ    DATADONE      ALL READ
         USING ASMADATA,R6   DECLARE INPUT RECORD
         ICM   R5,3,ADATA_RECTYPE  GET RECORD TYPE
         SPACE 1
         TM    CALLFLG2,CFBUG    DEBUG MODE?
         BZ    DATANDMP
         LR    R2,R6         COPY RECORD ADDRESS
         SR    R3,R3
         ICM   R3,3,ADATA_LEN  GET RECORD LENGTH
         SR    R4,R4         PROCESS ENTIRE RECORD
         BAS   R14,DUMPLINE  DUMP IT
DATANDMP CLI   TACHFLAG,0    IS IT TACHYON RECORD?              GP08284
         BH    TACHGOT       YES; GO TO ALTERNATE SECTION       GP08284
         CLC   ADATA_RECTYPE,=Y(TDATA_RECJID)  ID RECORD ?      GP08284
         BNE   DATAN390      NO; LOOK FOR SOMETHING ELSE        GP08284
         CLC   =C'X390',TXJID_PROD_NUMBER  TACHYON ?            GP08284
         BNE   DATAN390      NO; IBM'S HLA ?                    GP08284
         MVC   TACHFLAG,ADATA_LEVEL  TACHYON RELEASE LEVEL      GP08284
         B     TACHGOT       AND GO TO ALTERNATE SECTION        GP08284
DATAN390 CLI   ADATA_LEVEL,ADATA_L3  NEWER CODE ?
         BNL   *+8
         SH    R6,=H'4'      LEVEL 3 PREFIX IS 4 BYTES LONGER
         SPACE 2
*TEST*   CLI   PASS#,1       FIRST PASS?
*TEST*   BH    DATASRCE      NO; LOOKING FOR SOURCE
         SPACE 2
***********************************************************************
*                                                                     *
*   BUILD A TABLE OF ESDNAMES WITH MATCHING ESDID                     *
*                                                                     *
***********************************************************************
DATAESD  CLM   R5,3,=Y(ADATA_RECESD)  ESD ID RECORD ?
         BNE   DATASRCE      NO; LOOK FOR SOURCE
         SLR   R2,R2
         ICM   R2,3,ADESD_NAME_LEN  ANY NAME LENGTH?
*BLANKC  BNP   DATAGET       NO; IGNORE IT
         SR    R14,R14
         IC    R14,ADESD_TYPE
         LM    R3,R5,=A(ESDTAB,ESDTAB2-ESDTAB,ESDTABN)
LOOPESD  CLM   R14,1,0(R3)   HAVE A MATCH ?
         BE    HAVEESD
         BXLE  R3,R4,LOOPESD
         LR    R0,R14
         BAS   R9,HEX2EBC
         LA    R3,HEXEDOUT+5  FAKE POINTER
         B     DATAGET       GET OUT
HAVEESD  TM    CALLFLG1,CFESD  DISPLAY ESD INFORMATION ?
         BZ    NOPRESD       NO
         TM    LOCFLAG,PFESDHD  DONE HEADER?
         BNZ   HEADESD       YES
         OI    LOCFLAG,PFESDHD  DID HEADER
         MVC   PLMODNM(L'GOODMEM),GOODMEM
         MVC   PLMODNM+10(8),CALLMEM SHOW WHO
         BAS   R9,PRINTMSG   STACK IT
         MVC   PLMODNM+4(L'GOODESD),GOODESD MAKE HEADER
         BAS   R9,PRINTMSG   ADD TITLE
HEADESD  LA    R7,DB-(ESDNAME-ESDSECT)  FAKE POINTER
         USING ESDSECT,R7
         MVC   DB,BLANKS
         MIN   R2,=Y(L'ESDNAME),TYPE=H  TRUNCATE IF TOO LONG
         LR    R15,R2
         SH    R15,=H'1'     SET EXECUTE LENGTH
         BM    DATAGET       BLANK NAME
         EX    R15,EXMVCESD  MOVE THE NAME
         MVC   PLMODNM+4(L'ESDNAME),ESDNAME
         MVC   PLMODNM+4+8+1(2),2(R3)
         L     R0,ADESD_ESDID
         BAS   R9,HEX2EBC
         MVC   PLMODNM+4+8+1+2+1(8),HEXEDOUT ESD ID
         L     R0,ADESD_ADDR
         BAS   R9,HEX2EBC
         MVC   PLMODNM+4+8+1+2+1+8+1(8),HEXEDOUT ESD ID
         L     R0,ADESD_LEN
         BAS   R9,HEX2EBC
         MVC   PLMODNM+4+1+8+1+2+1+8+1+8+1(8),HEXEDOUT ESD ID
         L     R0,PREVHWM
         BAS   R9,HEX2EBC
         MVC   PLMODNM+4+1+8+1+2+1+8+1+8+1+8+1(8),HEXEDOUT  reloc.
         BAS   R9,PRINTMSG   WRITE IT OUT
         LA    R7,DIR@ESD    GET ESD CHAIN POINTER
NOPRESD  CLI   1(R3),0       PROCESS THIS ENTRY ?
         BH    DATAGET       NO; IGNORE
*OLD*    TM    ADESD_ESDID,X'80'  DSECT ?
*OLD*    BNZ   DATAGET       YES; SKIP
         PUSH  USING
         STORAGE OBTAIN,LENGTH=ESDLEN,SP=66,LOC=ANY  GET BLOCK
         L     R7,@ESDLAST   END OF CHAIN
         USING ESDSECT,R7    DECLARE IT
         XC    0(ESDLEN,R1),0(R1)  CLEAR NEW BLOCK
         ST    R1,ESDLINK    MAKE LINK
         ST    R1,@ESDLAST   AND SAVE LAST ADDRESS
         LR    R7,R1         SWAP BASES
         MVC   ESDTYPE,2(R3)  SAVE TYPE
         MVC   ESDNAME,BLANKS  CLEAR
         MVC   ESDID,ADESD_ESDID  SAVE THE ID
         L     R15,PREVHWM
         ICM   R1,15,ADESD_ADDR
         BNZ   NOPREVNW
         MVC   PREVHWM,PREVHWMO
NOPREVNW AR    R1,R15        RELOCATE THIS
         ST    R1,ESDADDR
         ICM   R14,15,ADESD_LEN
         BZ    NOPREVLN
         A     R14,ADESD_ADDR
         LA    R14,X'FFF'(,R14)  ROUND TO NEAREST 4K BOUND
         N     R14,=X'7FFFf000'  ROUND TO NEAREST PAGE
         ST    R14,PREVHWMO
         MVC   ESDSIZE,ADESD_LEN      SAVE THE SIZE
NOPREVLN MIN   R2,=Y(L'ESDNAME),TYPE=H  TRUNCATE IF TOO LONG
         SH    R2,=H'1'      SET EXECUTE LENGTH
         BM    DATAGET       BLANK NAME
         EX    R2,EXMVCESD   MOVE THE NAME
         B     DATAGET       GET ANOTHER RECORD
EXMVCESD MVC   ESDNAME(0),ADESD_NAME
         POP   USING
         SPACE 2
***********************************************************************
*                                                                     *
*   BUILD A CHAIN OF SOURCE STATEMENTS FOR THIS MEMBER                *
*                                                                     *
***********************************************************************
         SPACE 1
DATASRCE CLM   R5,3,=Y(ADATA_RECSOURCE)  SOURCE?
         BNE   DATAMACH      NO; LOOK FOR END
         LH    R0,ADSRC_REC_LEN  GET LENGTH
         LTR   R0,R0         TEST INPUT LENGTH
         BM    DATAGET       IGNORE IT
         TM    ADSRC_ESDID,X'80'  DSECT ?
         BNZ   DATAGET       YES; IGNORE IT (FOR NOW)
         LA    R7,LOCOUT     GET IN-STORAGE PATTERN
         USING OUTMAP,R7
         XC    OUTMAP(OUTMAPLN),OUTMAP      CLEAR IT
         MVI   OUTIND,C' '   SET INSTRUCTION FLAG
*   DURING TESTING I FOUND AN ERROR IN THE HIGH-LEVEL ASSEMBLER (R2.0).
*   THE 'PRIMARY INPUT' FLAG (01) IS SET TO COPY (03) WHEN THE
*   INPUT COMES FROM A PDS MEMBER.  THE PARENT ORIGIN NUMBER IS
*   CORRECT, SO WE TEST AND FIX HERE:
         CLI   ADSRC_REC_ORIGIN,3  COPY ?
         BNE   NOT03ERR      NO; SHOULD BE CORRECT?
         CLI   ADSRC_PARENT_ORIGIN,0  REAL COPY?
         BNE   NOT03ERR      NO; MAY BE REAL COPY?
         MVI   ADSRC_REC_ORIGIN,1    FIX IT
NOT03ERR LA    R14,ADSRC_RECORD  POINT TO NAME FIELD
         SLR   R15,R15
         ICM   R15,3,ADSRC_COPY_LEN  GET AND TEST LENGTH OF COPY/MACRO
         BNZ   MEMCOPY       COPY/MACRO NAME
         ICM   R15,3,ADSRC_PARENT_LEN  ELSE GET REAL MEMBER
         BNZ   MEMCOPY       SOURCE MEMBER
         LA    R15,L'CALLMEM  SET INPUT TO DEFAULT
         LA    R14,CALLMEM   DEFAULT - POINT TO CURRENT MEMBER
MEMCOPY  SH    R15,=H'1'     MAKE EXECUTE LENGTH
         BM    MEMNCOPY      OOPS - LEAVE BLANK
         EX    R15,EXMVCMEM  MOVE NAME TO OUTPUT
MEMNCOPY LA    R2,ADSRC_RECORD   POINT TO START OF MIXED RECORD
         AH    R2,ADSRC_COPY_LEN   LENGTH OF COPY NAME
         CLI   0(R2),C'*'    COMMENTS ?
         BE    MEMNPNAM      YES; ANOTHER ASM ERROR
         AH    R2,ADSRC_PARENT_LEN   LENGTH OF NAME
MEMNPNAM LA    R14,OUTCARD   CARD IMAGE DESTINATION
         LA    R15,L'OUTCARD
         LH    R3,ADSRC_REC_LEN  SOURCE LENGTH
         ICM   R3,8,BLANKS    REQUEST BLANK FILL
         MVCL  R14,R2
         SPACE 1
*   NOW PROCESS BY TYPE
*   REC_ORG  PAR_ORG  TYPE  MACH
*                      01    00    COMMENT; COPIED GBL, ETC.
*                      02    00    MACHINE INSTRUCTION - ALWAYS
*      01       00     03    0C    COPY REQUEST
*      01              04    00    MACRO INVOCATION
*      01       00     05    00    MACRO PROTOTYPE (IN-LINE)
*      01                          SOURCE RECORD
*      02       00                 SYMBOL SUBSTITUTION
*      02       01  SEQ.FLD 01-N   EXPANSION OF IN-LINE MACRO
*      02       >0                 MACRO EXPANSION
*      03                          COPIED CODE
*      05                          AINSERT - TREAT AS COPY (?)
         SPACE 1
         CLI   ADSRC_REC_TYPE,ADSRC_REC_MACH  MACHINE CODE?
         BE    GOCHAIN       YES; BYPASS TESTS
         CLC   =AL2(ADSRC_REC_ASM,X'26'),ADSRC_REC_TYPE  DC ?
         BE    GOCHAIN
         CLC   =AL2(ADSRC_REC_ASM,X'27'),ADSRC_REC_TYPE  DS ?
         BE    GOCHAIN
         CLC   =AL2(ADSRC_REC_ASM,X'28'),ADSRC_REC_TYPE  CCW ?
         BE    GOCHAIN
         CLC   =AL2(ADSRC_REC_ASM,X'40'),ADSRC_REC_TYPE  CCW0?
         BE    GOCHAIN
         CLC   =AL2(ADSRC_REC_ASM,X'41'),ADSRC_REC_TYPE  CCW1?
         BE    GOCHAIN
         SPACE 1
         MVC   DB(1),ADSRC_REC_TYPE  GET MAJOR TYPE
         TR    DB(1),=AL1(0,CFCMT,255,CFASM,CFMAC,CFIMAC)
         NC    DB(1),CALLFLG3   MASK WITH USER'S OPTION
         BZ    DATAGET       NOT WANTED; IGNORE
*  NOTE THAT SOME RECORDS DO NOT HAVE A LOCATION COUNTER VALUE
*    FOR THESE WE'LL USE THE PRIOR TYPE 34 VALUE UNLESS ALSO 0
*
         ICM   R0,15,ADSRC_LOCTR  HAVE AN OFFSET?
         BNZ   GOCHAIN       YES; CHAIN NORMALLY
         ICM   R0,15,PREVOFF  LOOK AT PRIOR OFFSET
         BZ    DATAGET       IGNORE THIS RECORD
         STCM  R0,15,ADSRC_LOCTR  ELSE FINAGLE IT
         SPACE 2
GOCHAIN  ICM   R0,15,ADSRC_LOCTR
         ST    R0,OUTLCOFF   SAVE TRUE OFFSET                   GP02243
         A     R0,PREVHWM    MAKE BATCHES UNIQUE
         ST    R0,OUTOFF
         ST    R0,PREVOFF    RESET BY TYPE 34 RECORD
         MVC   OUTSTMT,ADSRC_STMT  COPY STATEMENT NUMBER
         MVC   OUTLCESD,ADSRC_ESDID  AND ESD ID                 GP02243
         LA    R3,OUTMAPLN   GET LENGTH OF OUT WORK AREA
         STORAGE OBTAIN,LENGTH=(R3),SP=66,LOC=ANY  GET BLOCK
         MVC   0(OUTMAPLN,R1),OUTMAP  COMPLETE TEXT OF CURRENT
         L     R15,@OUTLAST  GET ADDRESS OF LAST
         LA    R14,DIR@SRC   FIRST POINTER
         CR    R15,R14       FIRST TIME ?
         BE    GOCHAIND      YES; ADD TO END
         L     R0,OUTLCESD   GET CURRENT ESD ID                 GP02243
         CL    R0,OUTLCESD-OUTMAP(R15)  BEFORE PREVIOUS ENTRY?  GP02243
         BH    GOCHAIND      NO; CHAIN ON END                   GP02243
         BL    GOCHAINL      YES; CHAIN EARLIER                 GP02243
         L     R0,OUTOFF     GET CURRENT OFFSET                 GP02243
         CL    R0,OUTOFF-OUTMAP(R15)  BEFORE PREVIOUS ENTRY?    GP02243
         BNL   GOCHAIND      NO; CHAIN ON END                   GP02243
GOCHAINL LR    R15,R14       SAVE PRIOR
         ICM   R14,15,OUTLINK-OUTMAP(R14)  GET NEXT
         BZ    GOCHAIND      NONE; ADD TO END
         L     R0,OUTLCESD   GET CURRENT ESD ID                 GP02243
         CL    R0,OUTLCESD-OUTMAP(R15)  BEFORE PREVIOUS ENTRY?  GP02243
         BH    GOCHAINL                                         GP02243
         BL    GOCHAINN                                         GP02243
         CL    R0,OUTOFF-OUTMAP(R14)  IN SEQUENCE YET ?
         BH    GOCHAINL      NOT YET
GOCHAINN MVC   OUTLINK-OUTMAP(L'OUTLINK,R1),OUTLINK-OUTMAP(R15) GP02243
         B     GOCHAINW      NOW COMPLETE CHAIN
GOCHAIND ST    R1,@OUTLAST   SET ADDRESS OF LAST
GOCHAINW ST    R1,0(,R15)    CHAIN NEW ONE
         NI    DIRFLAGS,255-DFNSRC  FOUND; RESET NO SOURCE FLAG
         LR    R7,R1         SWAP TO USE MAPPING
*???     TM    CALLFLG2,CFASM    LIST ASSEMBLY CODE?
*???     BZ    DATACLR       NO
GOPRINT  ICM   R0,12,ADSRC_REC_ORIGIN  GET REC/PARENT ORIGIN
*DEFER*  BAS   R9,HEX2EBC    MAKE PRINTABLE
*DEFER*  MVC   OUTRORG,HEXEDOUT  SHOW RECORD ORG
*DEFER*  MVC   OUTPORG,HEXEDOUT+2  AND PARENT ORG
*DEFER*  ICM   R0,14,ADSRC_REC_TYPE  GET TYPE/OPCD/FLAGS
*DEFER*  BAS   R9,HEX2EBC    CONVERT
*DEFER*  MVC   OUTRTYP,HEXEDOUT   RECORD TYPE
*DEFER*  MVC   OUTMTYP,HEXEDOUT+2 MACHINE CODE TYPE
*DEFER*  MVC   OUTFLGS,HEXEDOUT+4 FLAGS
*DEFER*  ICM   R0,15,ADSRC_INPUT_NUM  GET REC/PARENT FILE #
*DEFER*  BAS   R9,HEX2EBC    MAKE PRINTABLE
*DEBUG*  MVC   OUTRLF,HEXEDOUT   SHOW FILE #S
         B     DATAGET       GET NEXT RECORD
DATACLR  BAS   R9,PRTCLEAR   CLEAR PRINT LINE
         B     DATAGET       GET NEXT RECORD
EXMVCMEM MVC   OUTMEM(0),0(R14)  MOVE COPY/MACRO/SOURCE NAME
         SPACE 1
DATAMACH CLM   R5,3,=Y(ADATA_RECMACH)  MACHINE RECORD ?
         BNE   DATAOTH       NO; DON'T WANT IT
         L     R2,ADMACH_LOCTR  GET CURRENT LOCATION
         AH    R2,ADMACH_INST_LEN  PLUS LENGTH
         ST    R2,PREVOFF    STORE FOR NEXT TIME
         B     DATAGET
         SPACE 1
DATAOTH  CLM   R5,3,=Y(ADATA_RECCOMPUNIT)  START/END RECORD?
         BNE   DATAGET       NO; DON'T WANT IT
         CLC   ADCOMP_IND,=Y(ADCOMP_IND_END)  END RECORD?
         BNE   DATAGET
*????* NI CALLFLG2,255-CFBUG    DEBUG MODE *****DEBUG*****
         L     R1,BIAS
         A     R1,INCBIAS    MAKE NEW STATEMENT NUMBER BIAS
         C     R1,MAXBIAS    NOT TOO LARGE?
         BH    DATAGET       COLLAPSE AFTER TEN DECKS
         ST    R1,BIAS
         B     DATAGET
         SPACE 2
***********************************************************************
*                                                                     *
*   BUILD A TABLE OF ESDNAMES WITH MATCHING ESDID                     *
*                                                                     *
***********************************************************************
TACHGOT  DS    0H                                               GP08284
XDATAESD CLM   R5,3,=Y(ADATA_RECESD)  ESD ID RECORD ?           GP08284
         BNE   XDATASRC      NO; LOOK FOR SOURCE                GP08284
         SLR   R2,R2                                            GP08284
         ICM   R2,3,TXESD_NAME_LEN  ANY NAME LENGTH?            GP08284
*BLANKC  BNP   DATAGET       NO; IGNORE IT                      GP08284
         SR    R14,R14                                          GP08284
         IC    R14,TXESD_TYPE                                   GP08284
         LM    R3,R5,=A(ESDTAB,ESDTAB2-ESDTAB,ESDTABN)          GP08284
XLOOPESD CLM   R14,1,0(R3)   HAVE A MATCH ?                     GP08284
         BE    XHAVEESD                                         GP08284
         BXLE  R3,R4,XLOOPESD                                   GP08284
         LR    R0,R14                                           GP08284
         BAS   R9,HEX2EBC                                       GP08284
         LA    R3,HEXEDOUT+5  FAKE POINTER                      GP08284
         B     DATAGET       GET OUT                            GP08284
XHAVEESD TM    CALLFLG1,CFESD  DISPLAY ESD INFORMATION ?        GP08284
         BZ    XNOPRESD      NO                                 GP08284
         TM    LOCFLAG,PFESDHD  DONE HEADER?                    GP08284
         BNZ   XHETXESD      YES                                GP08284
         OI    LOCFLAG,PFESDHD  DID HEADER                      GP08284
         MVC   PLMODNM(L'GOODMEM),GOODMEM                       GP08284
         MVC   PLMODNM+10(8),CALLMEM SHOW WHO                   GP08284
         BAS   R9,PRINTMSG   STACK IT                           GP08284
         MVC   PLMODNM+4(L'GOODESD),GOODESD MAKE HEADER         GP08284
         BAS   R9,PRINTMSG   ADD TITLE                          GP08284
XHETXESD LA    R7,DB-(ESDNAME-ESDSECT)  FAKE POINTER            GP08284
         USING ESDSECT,R7                                       GP08284
         MVC   DB,BLANKS                                        GP08284
         MIN   R2,=Y(L'ESDNAME),TYPE=H  TRUNCATE IF TOO LONG    GP08284
         LR    R15,R2                                           GP08284
         SH    R15,=H'1'     SET EXECUTE LENGTH                 GP08284
         BM    DATAGET       BLANK NAME                         GP08284
         EX    R15,EXMVXESD  MOVE THE NAME                      GP08284
         MVC   PLMODNM+4(L'ESDNAME),ESDNAME                     GP08284
         MVC   PLMODNM+4+8+1(2),2(R3)                           GP08284
         L     R0,TXESD_ESDID                                   GP08284
         BAS   R9,HEX2EBC                                       GP08284
         MVC   PLMODNM+4+8+1+2+1(8),HEXEDOUT ESD ID             GP08284
         L     R0,TXESD_ADDR                                    GP08284
         BAS   R9,HEX2EBC                                       GP08284
         MVC   PLMODNM+4+8+1+2+1+8+1(8),HEXEDOUT ESD ID         GP08284
         L     R0,TXESD_LEN                                     GP08284
         BAS   R9,HEX2EBC                                       GP08284
         MVC   PLMODNM+4+1+8+1+2+1+8+1+8+1(8),HEXEDOUT ESD ID   GP08284
         L     R0,PREVHWM                                       GP08284
         BAS   R9,HEX2EBC                                       GP08284
         MVC   PLMODNM+4+1+8+1+2+1+8+1+8+1+8+1(8),HEXEDOUT  reloGP08284
         BAS   R9,PRINTMSG   WRITE IT OUT                       GP08284
         LA    R7,DIR@ESD    GET ESD CHAIN POINTER              GP08284
XNOPRESD CLI   1(R3),0       PROCESS THIS ENTRY ?               GP08284
         BH    DATAGET       NO; IGNORE                         GP08284
*OLD*    TM    TXESD_ESDID,X'80'  DSECT ?                       GP08284
*OLD*    BNZ   DATAGET       YES; SKIP                          GP08284
         PUSH  USING                                            GP08284
         STORAGE OBTAIN,LENGTH=ESDLEN,SP=66,LOC=ANY  GET BLOCK  GP08284
         L     R7,@ESDLAST   END OF CHAIN                       GP08284
         USING ESDSECT,R7    DECLARE IT                         GP08284
         XC    0(ESDLEN,R1),0(R1)  CLEAR NEW BLOCK              GP08284
         ST    R1,ESDLINK    MAKE LINK                          GP08284
         ST    R1,@ESDLAST   AND SAVE LAST ADDRESS              GP08284
         LR    R7,R1         SWAP BASES                         GP08284
         MVC   ESDTYPE,2(R3)  SAVE TYPE                         GP08284
         MVC   ESDNAME,BLANKS  CLEAR                            GP08284
         MVC   ESDID,TXESD_ESDID  SAVE THE ID                   GP08284
         L     R15,PREVHWM                                      GP08284
         ICM   R1,15,TXESD_ADDR                                 GP08284
         BNZ   XNOPRENW                                         GP08284
         MVC   PREVHWM,PREVHWMO                                 GP08284
XNOPRENW AR    R1,R15        RELOCATE THIS                      GP08284
         ST    R1,ESDADDR                                       GP08284
         ICM   R14,15,TXESD_LEN                                 GP08284
         BZ    XNOPRELN                                         GP08284
         A     R14,TXESD_ADDR                                   GP08284
         LA    R14,X'FFF'(,R14)  ROUND TO NEAREST 4K BOUND      GP08284
         N     R14,=X'7FFFf000'  ROUND TO NEAREST PAGE          GP08284
         ST    R14,PREVHWMO                                     GP08284
         MVC   ESDSIZE,TXESD_LEN      SAVE THE SIZE             GP08284
XNOPRELN MIN   R2,=Y(L'ESDNAME),TYPE=H  TRUNCATE IF TOO LONG    GP08284
         SH    R2,=H'1'      SET EXECUTE LENGTH                 GP08284
         BM    DATAGET       BLANK NAME                         GP08284
         EX    R2,EXMVXESD   MOVE THE NAME                      GP08284
         B     DATAGET       GET ANOTHER RECORD                 GP08284
EXMVXESD MVC   ESDNAME(0),TXESD_NAME                            GP08284
         POP   USING                                            GP08284
         SPACE 2                                                GP08284
***********************************************************************
*                                                                     *
*   BUILD A CHAIN OF SOURCE STATEMENTS FOR THIS MEMBER                *
*                                                                     *
***********************************************************************
         SPACE 1                                                GP08284
XDATASRC CLM   R5,3,=Y(ADATA_RECSOURCE)  SOURCE?                GP08284
         BNE   XDATMACH      NO; LOOK FOR END                   GP08284
         ICM   R0,15,TXSRC_REC_LEN  GET LENGTH                  GP08284
         BM    DATAGET       IGNORE IT                          GP08284
         TM    TXSRC_ESDID,X'80'  DSECT ?                       GP08284
         BNZ   DATAGET       YES; IGNORE IT (FOR NOW)           GP08284
         LA    R7,LOCOUT     GET IN-STORAGE PATTERN             GP08284
         USING OUTMAP,R7                                        GP08284
         XC    OUTMAP(OUTMAPLN),OUTMAP      CLEAR IT            GP08284
         MVI   OUTIND,C' '   SET INSTRUCTION FLAG               GP08284
*   DURING TESTING I FOUND AN ERROR IN THE HIGH-LEVEL ASSEMBLER (R2.0).
*   THE 'PRIMARY INPUT' FLAG (01) IS SET TO COPY (03) WHEN THE  GP08284
*   INPUT COMES FROM A PDS MEMBER.  THE PARENT ORIGIN NUMBER IS GP08284
*   CORRECT, SO WE TEST AND FIX HERE:                           GP08284
         CLI   TXSRC_REC_ORIGIN,3  COPY ?                       GP08284
         BNE   XNOT3ERR      NO; SHOULD BE CORRECT?             GP08284
         CLI   TXSRC_PARENT_ORIGIN,0  REAL COPY?                GP08284
         BNE   XNOT3ERR      NO; MAY BE REAL COPY?              GP08284
         MVI   TXSRC_REC_ORIGIN,1    FIX IT                     GP08284
XNOT3ERR LA    R14,TXSRC_RECORD  POINT TO NAME FIELD            GP08284
         ICM   R15,15,TXSRC_COPY_LEN  GET AND TEST LENGTH OF COPY/MACRO
         BNZ   XMEMCOPY      COPY/MACRO NAME                    GP08284
         ICM   R15,15,TXSRC_PARENT_LEN  ELSE GET REAL MEMBER    GP08284
         BNZ   XMEMCOPY      SOURCE MEMBER                      GP08284
         LA    R15,L'CALLMEM  SET INPUT TO DEFAULT              GP08284
         LA    R14,CALLMEM   DEFAULT - POINT TO CURRENT MEMBER  GP08284
XMEMCOPY SH    R15,=H'1'     MAKE EXECUTE LENGTH                GP08284
         BM    XMEMNCOP      OOPS - LEAVE BLANK                 GP08284
         EX    R15,EXMVXMEM  MOVE NAME TO OUTPUT                GP08284
XMEMNCOP LA    R2,TXSRC_RECORD   POINT TO START OF MIXED RECORD GP08284
         A     R2,TXSRC_COPY_LEN   LENGTH OF COPY NAME          GP08284
         A     R2,TXSRC_PARENT_LEN   LENGTH OF NAME             GP08284
XMEMNPNM LA    R14,OUTCARD   CARD IMAGE DESTINATION             GP08284
         LA    R15,L'OUTCARD                                    GP08284
         L     R3,TXSRC_REC_LEN  SOURCE LENGTH                  GP08284
         ICM   R3,8,BLANKS    REQUEST BLANK FILL                GP08284
         MVCL  R14,R2                                           GP08284
         SPACE 1                                                GP08284
*   NOW PROCESS BY TYPE                                         GP08284
*   REC_ORG  PAR_ORG  TYPE  MACH                                GP08284
*                      01    00    COMMENT; COPIED GBL, ETC.    GP08284
*                      02    00    MACHINE INSTRUCTION - ALWAYS GP08284
*      01       00     03    0C    COPY REQUEST                 GP08284
*      01              04    00    MACRO INVOCATION             GP08284
*      01       00     05    00    MACRO PROTOTYPE (IN-LINE)    GP08284
*      01                          SOURCE RECORD                GP08284
*      02       00                 SYMBOL SUBSTITUTION          GP08284
*      02       01  SEQ.FLD 01-N   EXPANSION OF IN-LINE MACRO   GP08284
*      02       >0                 MACRO EXPANSION              GP08284
*      03                          COPIED CODE                  GP08284
*      05                          AINSERT - TREAT AS COPY (?)  GP08284
         SPACE 1                                                GP08284
         CLI   TXSRC_REC_TYPE,TXSRC_REC_MACH  MACHINE CODE?     GP08284
         BE    XGOCHAIN      YES; BYPASS TESTS                  GP08284
         CLC   =AL2(ADSRC_REC_ASM,X'26'),TXSRC_REC_TYPE  DC ?   GP08284
         BE    XGOCHAIN                                         GP08284
         CLC   =AL2(ADSRC_REC_ASM,X'27'),TXSRC_REC_TYPE  DS ?   GP08284
         BE    XGOCHAIN                                         GP08284
         CLC   =AL2(ADSRC_REC_ASM,X'28'),TXSRC_REC_TYPE  CCW ?  GP08284
         BE    XGOCHAIN                                         GP08284
         CLC   =AL2(ADSRC_REC_ASM,X'40'),TXSRC_REC_TYPE  CCW0?  GP08284
         BE    XGOCHAIN                                         GP08284
         CLC   =AL2(ADSRC_REC_ASM,X'41'),TXSRC_REC_TYPE  CCW1?  GP08284
         BE    XGOCHAIN                                         GP08284
         SPACE 1                                                GP08284
         MVC   DB(1),TXSRC_REC_TYPE  GET MAJOR TYPE             GP08284
         TR    DB(1),=AL1(0,CFCMT,255,CFASM,CFMAC,CFIMAC)       GP08284
         NC    DB(1),CALLFLG3   MASK WITH USER'S OPTION         GP08284
         BZ    DATAGET       NOT WANTED; IGNORE                 GP08284
*  NOTE THAT SOME RECORDS DO NOT HAVE A LOCATION COUNTER VALUE  GP08284
*    FOR THESE WE'LL USE THE PRIOR TYPE 34 VALUE UNLESS ALSO 0  GP08284
*                                                               GP08284
         ICM   R0,15,TXSRC_LOCTR  HAVE AN OFFSET?               GP08284
         BNZ   XGOCHAIN      YES; CHAIN NORMALLY                GP08284
         ICM   R0,15,PREVOFF  LOOK AT PRIOR OFFSET              GP08284
         BZ    DATAGET       IGNORE THIS RECORD                 GP08284
         STCM  R0,15,TXSRC_LOCTR  ELSE FINAGLE IT               GP08284
         SPACE 2                                                GP08284
XGOCHAIN ICM   R0,15,TXSRC_LOCTR                                GP08284
         ST    R0,OUTLCOFF   SAVE TRUE OFFSET                   GP08284
         A     R0,PREVHWM    MAKE BATCHES UNIQUE                GP08284
         ST    R0,OUTOFF                                        GP08284
         ST    R0,PREVOFF    RESET BY TYPE 34 RECORD            GP08284
         MVC   OUTSTMT,TXSRC_STMT  COPY STATEMENT NUMBER        GP08284
         MVC   OUTLCESD,TXSRC_ESDID  AND ESD ID                 GP08284
         LA    R3,OUTMAPLN   GET LENGTH OF OUT WORK AREA        GP08284
         STORAGE OBTAIN,LENGTH=(R3),SP=66,LOC=ANY  GET BLOCK    GP08284
         MVC   0(OUTMAPLN,R1),OUTMAP  COMPLETE TEXT OF CURRENT  GP08284
         L     R15,@OUTLAST  GET ADDRESS OF LAST                GP08284
         LA    R14,DIR@SRC   FIRST POINTER                      GP08284
         CR    R15,R14       FIRST TIME ?                       GP08284
         BE    XGOCHAID      YES; ADD TO END                    GP08284
         L     R0,OUTLCESD   GET CURRENT ESD ID                 GP08284
         CL    R0,OUTLCESD-OUTMAP(R15)  BEFORE PREVIOUS ENTRY?  GP08284
         BH    XGOCHAID      NO; CHAIN ON END                   GP08284
         BL    XGOCHAIL      YES; CHAIN EARLIER                 GP08284
         L     R0,OUTOFF     GET CURRENT OFFSET                 GP08284
         CL    R0,OUTOFF-OUTMAP(R15)  BEFORE PREVIOUS ENTRY?    GP08284
         BNL   XGOCHAID      NO; CHAIN ON END                   GP08284
XGOCHAIL LR    R15,R14       SAVE PRIOR                         GP08284
         ICM   R14,15,OUTLINK-OUTMAP(R14)  GET NEXT             GP08284
         BZ    XGOCHAID      NONE; ADD TO END                   GP08284
         L     R0,OUTLCESD   GET CURRENT ESD ID                 GP08284
         CL    R0,OUTLCESD-OUTMAP(R15)  BEFORE PREVIOUS ENTRY?  GP08284
         BH    XGOCHAIL                                         GP08284
         BL    XGOCHANN                                         GP08284
         CL    R0,OUTOFF-OUTMAP(R14)  IN SEQUENCE YET ?         GP08284
         BH    XGOCHAIL      NOT YET                            GP08284
XGOCHANN MVC   OUTLINK-OUTMAP(L'OUTLINK,R1),OUTLINK-OUTMAP(R15) GP08284
         B     XGOCHAIW      NOW COMPLETE CHAIN                 GP08284
XGOCHAID ST    R1,@OUTLAST   SET ADDRESS OF LAST                GP08284
XGOCHAIW ST    R1,0(,R15)    CHAIN NEW ONE                      GP08284
         NI    DIRFLAGS,255-DFNSRC  FOUND; RESET NO SOURCE FLAG GP08284
         LR    R7,R1         SWAP TO USE MAPPING                GP08284
*???     TM    CALLFLG2,CFASM    LIST ASSEMBLY CODE?            GP08284
*???     BZ    XDATACLR      NO                                 GP08284
XGOPRINT ICM   R0,12,TXSRC_REC_ORIGIN  GET REC/PARENT ORIGIN    GP08284
*DEFER*  BAS   R9,HEX2EBC    MAKE PRINTABLE                     GP08284
*DEFER*  MVC   OUTRORG,HEXEDOUT  SHOW RECORD ORG                GP08284
*DEFER*  MVC   OUTPORG,HEXEDOUT+2  AND PARENT ORG               GP08284
*DEFER*  ICM   R0,14,TXSRC_REC_TYPE  GET TYPE/OPCD/FLAGS        GP08284
*DEFER*  BAS   R9,HEX2EBC    CONVERT                            GP08284
*DEFER*  MVC   OUTRTYP,HEXEDOUT   RECORD TYPE                   GP08284
*DEFER*  MVC   OUTMTYP,HEXEDOUT+2 MACHINE CODE TYPE             GP08284
*DEFER*  MVC   OUTFLGS,HEXEDOUT+4 FLAGS                         GP08284
*DEFER*  ICM   R0,15,TXSRC_INPUT_NUM  GET REC/PARENT FILE #     GP08284
*DEFER*  BAS   R9,HEX2EBC    MAKE PRINTABLE                     GP08284
*DEBUG*  MVC   OUTRLF,HEXEDOUT   SHOW FILE #S                   GP08284
         B     DATAGET       GET NEXT RECORD                    GP08284
XDATACLR BAS   R9,PRTCLEAR   CLEAR PRINT LINE                   GP08284
         B     DATAGET       GET NEXT RECORD                    GP08284
EXMVXMEM MVC   OUTMEM(0),0(R14)  MOVE COPY/MACRO/SOURCE NAME    GP08284
         SPACE 1                                                GP08284
XDATMACH CLM   R5,3,=Y(ADATA_RECMACH)  MACHINE RECORD ?         GP08284
         BNE   XDATAOTH      NO; DON'T WANT IT                  GP08284
         L     R2,TXMACH_LOCTR  GET CURRENT LOCATION            GP08284
         AH    R2,TXMACH_INST_LEN  PLUS LENGTH                  GP08284
         ST    R2,PREVOFF    STORE FOR NEXT TIME                GP08284
         B     DATAGET                                          GP08284
         SPACE 1                                                GP08284
XDATAOTH CLM   R5,3,=Y(ADATA_RECCOMPUNIT)  START/END RECORD?    GP08284
         BNE   DATAGET       NO; DON'T WANT IT                  GP08284
         CLC   TXCOMP_IND,=Y(TXCOMP_IND_END)  END RECORD?       GP08284
         BNE   DATAGET                                          GP08284
*????* NI CALLFLG2,255-CFBUG    DEBUG MODE *****DEBUG*****      GP08284
         L     R1,BIAS                                          GP08284
         A     R1,INCBIAS    MAKE NEW STATEMENT NUMBER BIAS     GP08284
         C     R1,MAXBIAS    NOT TOO LARGE?                     GP08284
         BH    DATAGET       COLLAPSE AFTER TEN DECKS           GP08284
         ST    R1,BIAS                                          GP08284
         B     DATAGET                                          GP08284
         SPACE 1
***********************************************************************
*                                                                     *
*   END OF SYSADATA                                                   *
*                                                                     *
*   IF PASS IS 1, PROCESS ESD INFORMATION                             *
*   IF PASS IS 2, REREAD SYSADATA AND BUILD SOURCE                    *
*                                                                     *
***********************************************************************
         SPACE 1
DATADONE CLI   PASS#,2       FIRST OR SECOND TIME?
         BL    PASS2         FIRST; REPROCESS SYSADATA
         TM    DIRFLAGS,DFMISS+DFNSRC   WITHOUT ERROR ?
         BZ    DATADOK
         TM    DIRFLAGS,DFMESS  PREVIOUSLY PRINTED ?            GP02233
         BNZ   DATAEND       YES; CONTINUE                      GP02233
         OI    DIRFLAGS,DFMESS                                  GP02233
         MVC   PLMODNM(L'FAILMEM),FAILMEM
         MVC   PLMODNM+10(8),CALLMEM SHOW WHO
         BAS   R9,PRINTERR   TOO BAD
         B     DATAEND       CONTINUE
FAILMEM  DC    C'>> Member XXXXXXXX source retrieval failed <<'
GOODMEM  DC    C'>> Member XXXXXXXX source processing <<'
GOODESD  DC    C'SectName Tp CESD-Id   Address   Length   Reloc.'
*TXTESD  DC    C'XXXXXXXX YY ZZZZZZZZ AAAAAAAA LLLLLLLL'
         SPACE 1
DATADOK  OI    DIRFLAGS,DFINIT  SHOW MEMBER USABLE
*NEXT*   B     DATAEND       DONE
         DROP  R7
DATAEND  CLI   CALLFUN,CFLOOK  LOOK THAT REQUIRED A BUILD?
         BNE   FINALEXT      ELSE RETURN OK
*NEXT*   BE    REQLOOK       YES; NOW PERFORM THE LOOKUP
         SPACE 2
***********************************************************************
*                                                                     *
*   LOCATE 1) MEMBER DIR  2) MATCHING SOURCE STATEMENT(S)             *
*                                                                     *
***********************************************************************
         SPACE 1
REQLOOK  BAS   R9,FINDMEM    DOES THE MEMBER EXIST ALREADY?
         LTR   R8,R8         DID WE READ THE MEMBER ?
         BZ    REQPOIN2      NO; READ IT NOW
         LTR   R7,R7         ANY SOURCE ?
         BZ    NOTEXT        FOUND, WITH ERRORS - RETURN WARNING
         USING OUTMAP,R7
         L     R4,CALLOFF   MAKE COMPARES FASTER
         ICM   R15,15,PREVLINE  TEST PRIOR REQUEST
         BZ    FINDOFF
         CL    R4,OUTOFF-OUTMAP(,R15)
         BNH   FINDOFF      SEARCH CHAIN FROM START
         LR    R7,R15       ELSE RESTART
FINDOFF  C     R4,OUTOFF    REQUESTED ADDRESS ?
         BE    FINDMORE     YES
         BL    NOTEXT       NOT FOUND
         ICM   R7,15,OUTLINK  ANOTHER ?
         BNZ   FINDOFF      YES; CHECK IT
         B     NOTEXT       OOPS
         SPACE 1
FINDMORE INC   OUTHITS      UPDATE HIT COUNTER
         ST    R7,PREVLINE  SAVE ADDRESS
         L     R4,OUTOFF
         LR    R0,R4        COPY FOR FORMATTING
         BAS   R9,HEX2EBC    MAKE PRINTABLE
         MVC   PLDISP+2(6),HEXEDOUT+2  SHOW LOCATION COUNTER
         ICM   R0,15,OUTSTMT  STATEMENT NUMBER
         CVD   R0,DB
         MVC   8+PLLCTR+2(6),=X'402020202120'
         ED    8+PLLCTR+2(6),DB+5
         MVC   8+PLLCTR+L'PLLCTR,OUTIND TYPE OF LINE
         MVC   8+PLLCTR+L'PLLCTR+1(L'OUTCARD),OUTCARD
         BAS   R9,PRINTMSG  OK TO STACK
         ICM   R7,15,OUTLINK  ANOTHER ?
         BZ    FINALEXT     EXPECTED AT SOME POINT?
         C     R4,OUTOFF    REQUESTED ADDRESS ?
         BE    FINDMORE     YES; DO IT TOO
         B     FINALEXT     ELSE RETURN SANS ERROR
         SPACE 1
CLOSEOUT CLOSE MF=(E,DCBLIST)  CLOSE OUTPUT DCBS
         L     R13,4(,R13)   GET OLD SAVE AREA
         STORAGE RELEASE,SP=66  FREE EVERYTHING
         B     FINALOUT
         SPACE 1
FINALEXT LH    R15,CONDCODE  GET RETURN CODE
         L     R13,4(,R13)
FINALOUT LM    R0,R12,20(R13)
         L     R14,12(,R13)
         BSM   0,R14         RETURN TO CALLER
         SPACE 1
BADOUT   MVI   CONDCODE+L'CONDCODE-1,12  BAD
         B     FINALEXT
NOTEXT   DS    0H
WARNOUT  MVI   CONDCODE+L'CONDCODE-1,4   MINOR ?
         B     FINALEXT
         TITLE 'P G M T R A D A  ***  SUBROUTINES'
***********************************************************************
*                                                                     *
*  DUMPLINE   FORMAT HEX DATA LINE                                    *
*    R2 : START ADDRESS     R3: LENGTH       R4: MAX TO DUMP          *
*                                                                     *
***********************************************************************
         SPACE 1
DUMPLINE STM R0,R15,DUMPSAVE     SAVE REGISTERS
         MVI   PRINTDAT-1,C'0' SET TO DOUBLE SPACE
         LTR   R4,R4         DID USER SPECIFY ANY DUMP LIMIT?
         BP    *+6           YES; HONOR IT
         BCTR  R4,0          ELSE LET IT RUN
         SR    R7,R7         OFFSET FROM START
         LR    R0,R2         COPY FOR CONVERSION
         BAS   R9,HEX2EBC    CONVERT
         MVC   PLDISP-3(8),HEXEDOUT  SHOW ADDRESS
         LR    R0,R3         COPY FOR CONVERSION
         BAS   R9,HEX2EBC    CONVERT
         MVC   PLDISP+6(8),HEXEDOUT  SHOW LENGTH
         MVI   PLDISP+5,C'/'  FLAG LENGTH
         LTR   R3,R3         ANY LENGTH?
         BNP   DUMPLINX      NO; QUIT
DMPLLINE LA    R14,32        TEXT SIZE
         MIN   R14,(R3)      BUT NOT MORE THAN WE HAVE
         BCTR  R14,0         ADJUST FOR EXECUTE
         EX    R14,DMPEXTXT  MOVE TEXT
         EX    R14,DMPEXTRN  MAKE THEM PRINTABLE
         MVI   PRINTDAT+98,C'*'
         MVI   PRINTDAT+131,C'*'
         LA    R8,PLINST-3   POINT TO FIRST AVAILABLE SPACE
         LA    R5,2          TWO SETS PER LINE
DMPLGRUP LA    R9,4          SET FOR 4 WORDS PER LINE
DMPLWORD LA    R0,4          CHARACTERS PER GROUP
DMPLBYTE LR    R14,R3        COPY RESIDUAL LENGTH
         MIN   R14,(R0)      BUT NOT MORE THAN 4
         LR    R15,R14       SAVE LENGTH
         BCTR  R15,0         EXECUTE LENGTH
         EX    R15,DMPLEXMV  MOVE TO WORK AREA
         LR    R1,R14        GET LENGTH BACK
         SLL   R14,5         MAKE OUTPUT LENGTH
         OR    R14,R1        UNPACK LENGTH; OUT+1; IN+1
         EX    R14,DMPLEXUN  UNPACK
         SRL   R14,4         MAKE DOUBLED LENGTH
         EX    R14,DMPLEXTR  MAKE PRINTABLE
         AR    R8,R14        FIRST UNUSED BYTE
         MVI   0(R8),C' '    CLEAN IT
         LA    R8,1(,R8)     NEXT OUTPUT
         AR    R2,R1         NEXT INPUT
         AR    R7,R1         SET NEW OFFSET
         SR    R3,R1         RESIDUAL OUTPUT LENGTH
         BNP   DUMPLINX      NO MORE; RETURN
         BCT   R9,DMPLWORD   DO NEXT WORD
         LA    R8,1(,R8)     EXTRA GAP
         BCT   R5,DMPLGRUP
         SPACE 1
         CLR   R7,R4         DID ENOUGH ?
         BNL   DUMPLINX      YES; QUIT NOW
         LTR   R3,R3         ANY MORE TO DO?
         BNP   DUMPLINX      NO; GET OUT
         BAS   R9,PRINTMSG   WRITE THIS LINE AND CLEAR IT
         LR    R0,R2         COPY FOR CONVERSION
         BAS   R9,HEX2EBC    CONVERT
         MVC   PLDISP-3(8),HEXEDOUT  SHOW ADDRESS
         LR    R0,R7         COPY FOR CONVERSION
         BAS   R9,HEX2EBC    CONVERT
         MVC   PLDISP+6(8),HEXEDOUT  SHOW LENGTH
         LA    R14,PLDISP+5  LOCATION FOR OFFSET PLUS
         LA    R15,7         DON'T DO TOO MUCH
DMPLZLOP CLI   1(R14),C'0'   LEADING ZERO?
         BNE   DMPLZPUT      NO
         MVI   1(R14),C' '   BLANK IT
         LA    R14,1(,R14)
         BCT   R15,DMPLZLOP  DO PRIOR
DMPLZPUT MVI   0(R14),C'+'   PRETTIFY
         B     DMPLLINE      FORMAT CONTINUATION LINE
         SPACE 1
DUMPLINX BAS   R9,PRINTMSG   WRITE THIS LINE AND CLEAR IT
         LM    R0,R15,DUMPSAVE  RESTORE USER'S REGISTERS
         BR    R14           RETURN TO CALLER
         SPACE 1
DMPLEXMV MVC   HEXEDIN(0),0(R2)  MOVE EXACT LENGTH TO AVOID 0C4
DMPLEXUN UNPK  0(0,R8),HEXEDIN(0)  UNPACK +1 EXTRA
DMPLEXTR TR    0(0,R8),HEXTRTAB  MAKE PRINTABLE CHARACTERS
DMPEXTXT MVC   PRINTDAT+99(0),0(R2) MOVE USER'S DATA
DMPEXTRN TR    PRINTDAT+99(0),CHARPRT   MAKE PRINTABLE
         SPACE 2
HEX2EBC  STCM  R0,15,HEXEDIN  STORE INPUT
         UNPK  HEXEDOUT(L'HEXEDOUT+1),HEXEDIN(L'HEXEDIN+1)
         TR    HEXEDOUT,HEXTRTAB
         BR    R9            RETURN TO CALLER
HEXTAB   DC    C'0123456789ABCDEF'
HEXTRTAB EQU   HEXTAB-C'0'
         SPACE 2
***********************************************************************
**                                                                   **
**   PRINT OUTPUT  (WHEN WANTED)                                     **
**                                                                   **
**   PRTCLEAR  BLANK THE DEFAULT PRINT LINE                          **
**                                                                   **
***********************************************************************
         SPACE 1
PRINTERR STM   R9,R1,PRINTSAV  SAVE CALLER'S REGISTERS
         LA    R0,8          SET FLAG TO FORCE PRINTING
         B     PRINTLIN
PRINTMSG STM   R9,R1,PRINTSAV  SAVE CALLER'S REGISTERS
         SR    R0,R0         SET LOW LEVEL
PRINTLIN L     R15,CALL@PRT  GET THE PRINT ROUTINE
         LA    R1,PRINTRDW   POINT TO COMMON PRINT LINE
         L     R14,4(,R13)   GET CALLER'S SAVE AREA
         LR    R9,R11        PRESERVE WORK AREA
         LM    R10,R11,20+10*4(R14)  LOAD CALLER'S BASES
         BASSM R14,R15       PRINT (OR STACK) IT
         LR    R11,R9        RESTORE WORK AREA
         LM    R9,R1,PRINTSAV  RESTORE CALLER'S REGISTERS
PRTCLEAR MVI   PRINTDAT-1,C' ' RESET DOUBLE SPACE
         MVC   PRINTDAT,PRINTDAT-1  CLEAR PRINT LINE
         BR    R9                    RETURN
         SPACE 2
***********************************************************************
**                                                                   **
**   FINDMEM - LOCATE DIRECTORY ENTRY FOR A MEMBER                   **
**                                                                   **
***********************************************************************
         SPACE 2
FINDMEM  L     R8,PREV@DIR   GET DIR BLOCK ADDRESS
         CLC   PREVMEM,CALLMEM  SAME MEMBER ?
         BE    FINDMEMH      YES; PROCESS FROM THERE            GP02235
         XC    PREVCLR,PREVCLR  CLEAR 'PREVIOUS' AREA           GP02235
         SPACE 1
         LA    R8,@DIRLIST   POINT TO CHAIN HEAD
         USING DIRDSECT,R8   DECLARE DIR SECTION
FINDMEML ICM   R8,15,DIRLINK  ANOTHER ON CHAIN ?
         BZ    FINDMEMF      NO; RETURN FAILURE
         CLC   CALLMEM,DIRNAME   SAME MEMBER ?
         BNE   FINDMEML
         ST    R8,PREV@DIR   SET STORAGE ADDRESS                GP02235
         MVC   PREVMEM,CALLMEM  SAVE MEMBER NAME                GP02235
FINDMEMH TM    DIRFLAGS,DFINIT  PROCESSABLE ?
         BZ    FINDMEMG      NO; FAIL - BUT KEEP DIR BLOCK      GP02233
         ICM   R7,15,DIR@SRC   HAVE WE A SOURCE CHAIN ?
         BR    R9            YES; RETURN BOTH                   GP02233
FINDMEMF SR    R8,R8         SET NO MEMBER                      GP02233
FINDMEMG SR    R7,R7         SET NO SOURCE                      GP02233
         BR    R9            RETURN TO CALLER WITH ERROR
         SPACE 2
***********************************************************************
**                                                                   **
**  GETREC :  SUBROUTINE TO GET A SYSADATA RECORD                    **
**                                                                   **
**  ON END-FILE, RETURNS WITH R1 (RECORD ADDRESS) = 0                **
**                                                                   **
***********************************************************************
GETREC   SUBHEAD R2,R0
         LM    R1,R3,BLOKBXLE  GET THE BLOCK POINTERS
         BXLE  R1,R2,GETRECEX
GETRECRD READ  PDSDECB,SF,PDSDCB,BUFFER,'S',MF=E
         CHECK PDSDECB       WHAT'S OVERLAP ?
         LA    R3,BUFFER
         ICM   R2,3,0(R3)
         BNP   2             ABEND ON INVALID BUFFER *****DEBUG*****
         BCTR  R2,0
         AR    R3,R2
         LA    R1,BUFFER+4   SKIP THE BUFFER LENGTH WORD
GETRECEX CLI   0(R1),X'80'   FILLER ?
         BE    GETRECRD
         ICM   R2,3,0(R1)
         BZ    2             ABEND ON INVALID BUFFER *****DEBUG*****
         STM   R1,R3,BLOKBXLE  REMEMBER FOR NEXT TIME
GETRECEZ SUBRET (R14)        GO HOME
GETEODAD SR    R1,R1         SIGNAL EOF
         B     GETRECEZ
         SPACE 1
         LTORG ,
*DEFER*  PGMPATCH ,          PATCH SPACE
         TITLE 'P G M T R A D A  ***  DATA/WORK AREAS/MAPPINGS'
CHARPRT  DC    256X'FF'
         ORG   CHARPRT+X'40'
         DC    X'40'
         ORG   CHARPRT+X'4A'
         DC    X'4A4B4C4D4E4F'
         ORG   CHARPRT+X'5A'
         DC    X'5A5B5C5D5E5F'
         ORG   CHARPRT+X'60'
         DC    X'6061'
         ORG   CHARPRT+X'6A'
         DC    X'6A6B6C6D6E6F'
         ORG   CHARPRT+X'79'
         DC    X'797A7B7C7D7E7F'
         ORG   CHARPRT+X'81'
         DC    X'818283848586878889'
         ORG   CHARPRT+X'91'
         DC    X'919293949596979899'
         ORG   CHARPRT+X'A2'
         DC    X'A2A3A4A5A6A7A8A9'
         ORG   CHARPRT+C'A'
         DC    C'ABCDEFGHI'
         ORG   CHARPRT+C'J'
         DC    C'JKLMNOPQR'
         ORG   CHARPRT+C'S'
         DC    C'STUVWXYZ'
         ORG   CHARPRT+C'0'
         DC    C'0123456789'
         ORG   ,
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*              COMMON DATA MAP                                        *
*                                                                     *
*---------------------------------------------------------------------*
         PRINT GEN
CALLSECT #TRC  DATA,PFX=CALL,DSECT=YES
         PRINT NOGEN
         SPACE 1
OUTMAP   DSECT ,
OUTLINK  DS    A             NEXT ENTRY
OUTLCESD DS    F     1/2     ESD ID FOR THIS ADDRESS            GP02243
OUTOFF   DS    A     2/2     OFFSET OF THIS INSTRUCTION FROM BASE
OUTHITS  DS    F             NUMBER OF TIMES REQUESTED
OUTLCOFF DS    F             LOCATION COUNTER WITHIN CSECT
OUTSTMT  DS    F             STATEMENT NUMBER
OUTIND   DS    C             ADD INDICATOR
OUTCARD  DS    CL80          SOURCE RECORD
OUTMEM   DS    CL8,C         SOURCE MEMBER
*UTRORG  DS    CL2,C         RECORD ORIGIN
*UTPORG  DS    CL2,C         PARENT ORIGIN
*UTRTYP  DS    CL2,C         RECORD TYPE
*UTMTYP  DS    CL2,C         MACHINE INSTRUCTION
*UTFLGS  DS    CL2,C         FLAGS
*DEBUG*  OUTRLF   DS    CL8,C         RELATIVE FILE NUMBERS
OUTMAPLN EQU   *-OUTMAP
         ORG   ,
PGMTRADA CSECT ,
         TITLE 'P G M T R A D A  ***  DATA/WORK AREAS/MAPPINGS'
         PRINT NOGEN
PATDCL   OPEN  (PATDCB,(INPUT,REREAD)),MF=L  OPEN/CLOSE LIST
PATDCB   DCB   DDNAME=SYSTRADA,DSORG=PO,MACRF=R,EODAD=GETEODAD
PATDCLLN EQU   *-PATDCL
PATSEQ   DCB   DDNAME=SYSTRADA,DSORG=PS,MACRF=R,EODAD=GETEODAD
PATSEQLN EQU   *-PATSEQ
PATCAM   CAMLST SEARCH,DATADSN-DATADSN,DATAVOL-DATAVOL,BUFFER-BUFFER
         SPACE 1
INCBIAS  DC    F'100000'     BATCHED PGM STMT # BIAS
MAXBIAS  DC    F'900000'     NO MORE THAN 10 DECKS HANDLED
BLANKS   DC    CL8' '        CONSTANT
         SPACE 1
*   ESD ENTRY TYPES FG    DEF (IF FLAG<>00, IGNORE)
ESDTAB   DC    X'00,00',C'SD'   SECTION DEFINITION
ESDTAB2  DC    X'01,01',C'LR'   LABEL REFERENCE (OBJ)
         DC    X'02,01',C'ER'   EXTERNAL REFERENCE
         DC    X'03,01',C'LR'   LABEL REFERENCE (LOAD)
         DC    X'04,00',C'PC'   PRIVATE CODE
         DC    X'05,00',C'CM'   COMMON
         DC    X'06,01',C'PR'   PSEUDO REGISTER
         DC    X'07,01',C'NU'     TO BE IGNORED
         DC    X'0A,01',C'WX'   WEAK EXTERNAL
ESDTABN  DC    X'14,01',C'$E'   $ENTAB/$SEGTAB
         SPACE 1
DIRDSECT DSECT ,             DIRECTORY TABLE ENTRY MAPPING
DIRLINK  DS    A             NEXT MEMBER ENTRY                  GP00351
DIRNAME  DS    CL8           LEFT-JUSTIFIED, BLANK PADDED NAME
DIRTTR   DS    XL4           TTR + CONCATENATION #
DIR@ESD  DS    A             ADDRESS OF ESD INFORMATION TABLE
DIR@SRC  DS    A             ADDRESS OF SOURCE TABLE
DIRFLAGS DS    X             PROCESSING FLAGS
DFINIT   EQU   X'80'           MEMBER INITIALIZED
DFMISS   EQU   X'40'           PROCESSING FAILED
DFMESS   EQU   X'20'           failed; error message issued     GP02233
DFNSRC   EQU   X'10'           FOUND, BUT NO SOURCE?            GP02233
DIRSIZE  EQU   *-DIRDSECT    LENGTH OF ONE ENTRY
         SPACE 1
ESDSECT  DSECT ,             MAPPING FOR ESD ID VS. ESD NAME
ESDLINK  DS    A             POINTER TO NEXT ONE
ESDNAME  DS    CL8           TRUNCATED NAME OF SECTION
ESDID    DS    XL4           ESD ID
ESDADDR  DS    XL4           ESD OFFSET FROM MODULE
ESDSIZE  DS    XL4           ESD LENGTH
ESDTYPE  DS    CL2           CONVERTED TYPE
ESDLEN   EQU   *-ESDSECT     LENGTH OF ONE ENTRY
         SPACE 1
SAVE     DSECT ,
SAVESPLN DS    F
SAVE13   DS    F
SAVEFWD  DS    A
SAVE14   DS    A
SAVE15   DS    A
SAVE0    DS    A
SAVE1    DS    A
SAVE2    DS    A
SAVE3    DS    A
SAVE4    DS    A
SAVE5    DS    A
SAVE6    DS    A
SAVE7    DS    A
SAVE8    DS    A
SAVE9    DS    A
SAVE10   DS    A
SAVE11   DS    A
SAVE12   DS    A
SAVEFWK  EQU   *                                                 94272
LOCSAVE  DS    18F           STACKAD
LOCSAVE1 DS    18F           STACK
LOCSAVE2 DS    18F           WRITE
LOCSAVE3 DS    18F           UEXIT
DUMPSAVE DS    16A           DUMPLINE SAVE AREA
PRINTSAV DS    9A            PRINTLINE SAVE AREA
DB       DS    D             CONVERSION WORK AREA
DB2      DS    D             CONVERSION WORK AREA
DCBLIST  OPEN  (PDSDCB,(INPUT,REREAD)),MF=L  OPEN/CLOSE LIST
PDSDCB   DCB   DDNAME=SYSTRADA,DSORG=PO,MACRF=R,EODAD=GETEODAD
BIAS     DS    F             +100000 FOR EACH BATCHED ASSEMBLY
BLOKBXLE DC    A(BUFFER,0,0) FIRST/LEN/LAST BUFFER ENTRIES
@DIRLIST DC    A(0)          HEADER FOR MEMBER NAME LIST
@DIRLAST DC    A(0)          TRAILER FOR MEMBER NAME LIST
@OUTLAST DC    A(0)          TRAILER FOR SOURCE (OUTMAP)
@ESDLAST DC    A(0)          TRAILER FOR ESD CHAIN
MEMSAVE  DS    4A(0)         MEMBER SCAN SAVE AREA
PREVMEM  DS    CL8' '  1/4   CURRENT MEMBER NAME
PREVOFF  DS    A(0)    2/4   CURRENT OFFSET
PREV@DIR DS    A(0)    3/4   CURRENT STORAGE ADDRESS
PREVLINE DS    F       4/4   CURRENT (SOURCE) LINE NUMBER
PREVHWM  DS    A(0)    5/4   ESD HIGH-WATERMARK
PREVHWMO DS    A(0)    6/4   ESD HIGH-WATERMARK
PREVCLR  EQU   PREVOFF,*-PREVOFF,C'A'
CONDCODE DC    H'0'          CONDITION CODE
PROCFLAG DC    X'00'         PROCESSING FLAG
PFFATAL  EQU   X'80'           FATAL ERROR
PFCONT   EQU   X'40'           CONTINUATION INDICATED
PFSEQ    EQU   X'01'           INPUT FILE IS SEQUENTIAL
LOCFLAG  DC    X'00'
PFESDHD  EQU   X'80'           ESD HEADER PROCESSED
PASS#    DC    X'00'         1 OR 2 FOR SYSADATA READ PASS NUMBER
TACHFLAG DC    X'00'         TACHYON FLAG                       GP08284
HEXEDIN  DC    CL4' '        HEX INPUT
HEXEDOUT DC    CL8' ',C' '   HEX OUTPUT + EXTRA
PRINTRDW DS    Y(4+1+L'PRINTDAT,0),C' '
PRINTDAT DS    CL132' ',CL60' '
         ORG   PRINTDAT      DEFINE INDIVIDUAL FIELDS
PLMODNM  DC    CL8' ',C' '   MODULE NAME; + OFFSET INDICATOR
PLDISP   DC    CL8' ',CL2' ' DISPLACEMENT IN MODULE
PLLCTR   DC    CL8' ',C' '   LOCATION COUNTER
PLINST   DC    CL14' ',C' '  INSTRUCTION IMAGE
PLCC     DC    C' ',C' '     CONDITION CODE
PLOP     DC    CL5' ',C' '   SYMBOLIC INSTRUCTION CODE
PLFIELD  DC    CL16' ',C' '  INSTRUCTION FIELDS
PLFORM   DC    CL8' ',CL2' '   FIRST OPERAND REGISTER
PLFORM2  DC    CL8' '          SECOND OPERAND.....
         ORG   ,
         SPACE 1
OVERLAY  DS    0D            SHARED STORAGE                     GP06213
         AIF   (NOT &MVSXA).SKPSWA2                             GP06213
LISTSWA  SWAREQ FCODE=RL,EPA=LISTEPA,MF=L                        90308
LISTEPA  DS    A(LISTSVA)                                        90308
LISTSVA  DS    7A  REQUEST/RESPONSE LIST (IBM LIES; 4A ^ ENOUGH) 90309
LISTSWAL EQU   *-LISTSWA     LENGTH TO CLEAR                     90308
.SKPSWA2 SPACE 1
DATADSN  DS    CL44
DATAVOL  DS    CL6
         SPACE 1
         ORG   OVERLAY       RE-USE                             GP06213
LOCOUT   DS    0A,XL(OUTMAPLN)
         SPACE 1
         PGMPATCH ,          PATCH SPACE
         SPACE 1
         READ  PDSDECB,SF,PDSDCB,BUFFER,'S',MF=L
         SPACE 1
BUFFER   DS    128XL256      BSAM BUFFER
SAVEEND  DS    0D        END OF DYNAMIC WORK AREA
         SPACE 2
         PRINT ON,GEN
         ASMADATA PRINT=GEN,                                           *
               OUTPUT=NO,    02                                        *
               ESD=YES,      20                                        *
               SOURCE=YES,   30                                        *
               MACH=YES,     34                                        *
               COMPUNIT=YES
         X390DATA PRINT=GEN,JID=YES,                                   *
               OUTPUT=NO,    02                                        *
               ESD=YES,      20                                        *
               SOURCE=YES,   30                                        *
               MACH=YES,     34                                        *
               COMPUNIT=YES
         SPACE 1
         PRINT NOGEN
         DCBD  DSORG=PS,DEVD=DA   DCB MAPPING
         IHAPSA ,
         IKJTCB ,
         IEZJSCB ,
         IEFTIOT1 ,
         IHADSAB ,
         IEFZB4D5 ,          DSAB QUEUE DESCRIPTOR (NOT IHAQDB?)
         IEFUCBOB ,
JFCB     DSECT ,
         IEFJFCBN ,
         IECSDSL1 1          FORMAT 1 DSCB
         CVT   DSECT=YES
         IEFJESCT ,
         SPACE 1
         YREGS ,
         END   ,
