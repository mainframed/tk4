@PARSER  TITLE '@ P A R S E R  ***  SIMPLE PARSE ROUTINE'
         PUNCH '   ORDER @PARSER(P) '   EASIER DUMPS            GP05032
         SPACE 1
         COPY  OPTIONGB
         SPACE 1
         SYSPARM LIST=YES
         SPACE 2
***********************************************************************
*                                                                     *
*                                                                     *
*   COPYRIGHT 2003-2008  EXPERT SYSTEM PROGRAMMING                    *
*                        176 OLD STAGE COACH ROAD                     *
*                        BRADFORD, VT 05033-8844                      *
*                                                                     *
*                    ALL RIGHTS RESERVED                              *
*                                                                     *
***********************************************************************
         EJECT ,
@PARSER  START 0                                                GP03081
@PARSER  AMODE 31
@PARSER  RMODE 24            SAVE AREA BELOW THE LINE
         SPACE 1
***********************************************************************
**                                                                   **
**  THIS MODULE EXAMINES A STRING SPECIFIED IN THE PARSE PARAMETER   **
**  BLOCK (PARPARM) PASSED VIA R1.                                   **
**                                                                   **
**  THE TEXT IS BROKEN AT EQUAL SIGNS, BLANKS, COMMAS, SEMICOLONS,   **
**  AND PARENTHESES (OR EQUIVALENTS; E.G., COLON TAKEN AS EQUAL)     **
**  QUOTED STRINGS ARE COPIED AS-IS                                  **
**                                                                   **
**  FOR EACH FRAGMENT, A PRSTENT ENTRY IS MADE IN THE WORK AREA.     **
**  THE WORK AREA IS PERMANENTLY ALLOCATED UNLESS A CLOSE REQUEST    **
**  IS MADE (R1=X'00000000')                                         **
**                                                                   **
**  ATTRIBUTES: RENT,REFR,REUS                                       **
**                                                                   **
**  CALLED USING THE PARSE MACRO.                                    **
**                                                                   **
**      PARSE TEXT                                                   **
**      PARSE TEXT,LENGTH                                            **
**      PARSE OPT=CLOSE                                              **
**       ...                                                         **
**      MAPPARSE DSECT=NO   CALLING PARAMETER AREA                   **
**                                                                   **
**      MAPPARST (DSECT)    INDIVIDUAL ELEMENT DESCRIPTORS           **
**                                                                   **
***********************************************************************
         SPACE 1
*DEBUG*  PRINT &PRTSOR
         SPACE 2
         USING *,R15
         B     PARSENT       SKIP ID
         DC    AL1(L'PARSID)   LENGTH FOR SNAP
PARSID   DC    C'@PARSER - &SYSDATE'
PARSENT  BSM   R14,0         PRESERVE CALLER'S AMODE            GP99026
         STM   R14,R12,12(R13)                                  GP99026
         LR    R12,R15
         DROP  R15
         USING @PARSER,R12
         SPACE 1
*---------------------------------------------------------------------*
*   LOCATE OR ESTABLISH WORK AREA                                     *
*---------------------------------------------------------------------*
         LR    R10,R1        SAVE ENTRY PARAMETER
         LH    R3,=AL2(FSALEN)  LENGTH>4095                     GP05019
         SERVWORK PARSID+1,(R3),PREG=R10    GET WORK AREA       GP05019
         SPACE 2
*---------------------------------------------------------------------*
*  WE HAVE OUR WORK AREA - CHECK FOR A TERMINATION REQUEST            *
*---------------------------------------------------------------------*
WRKHAVE  LTR   R10,R10       REQUEST TO TERMINATE ?
         BNZ   WRKWHAT       NO; SEE WHAT THERE IS TO DO
         SERVWORK OPT=RELEASE  FREE THE WORK AREA AND RETURN
         SPACE 2
*---------------------------------------------------------------------*
*  MISCELLANEOUS RETURNS                                              *
*---------------------------------------------------------------------*
         SPACE 1
         PUSH  USING
         USING PARPARM,R10   DECLARE USER'S AREA
EXIT16   MVICC 16,RESULT=PAR#CODE   SET RETURN CODE 16
         B     EXIT          AND EXIT WITH ERROR
         SPACE 1
EXIT12   MVICC 12
         B     EXIT
         SPACE 1
EXIT8    MVICC 8             SET RETURN CODE 8
         B     EXIT
         SPACE 1
EXIT4    MVICC 4             SET RETURN CODE 4
         SPACE 1
EXIT     LM    R15,R0,PAR#CODE  GET RETURN CODES
         L     R13,4(,R13)
         L     R14,12(,R13)  GET RETURN ADDRESS
         LM    R2,R12,28(R13)  RESTORE OTHERS
         BSM   0,R14         RETURN TO CALLER                   GP99026
         POP   USING
         SPACE 2
*---------------------------------------------------------------------*
*  PRELIMINARIES COMPLETE - INITIALIZE FOR PROCESSING                 *
*---------------------------------------------------------------------*
         USING SAVEAREA,R13
         USING PARPARM,R10   DECLARE USER'S PARAMETER AREA
WRKWHAT  XC    PARCLEAR,PARCLEAR   CLEAR RETURN AREA            GP03142
         LA    R0,CLEARIT    GET RESULT AND COUNT AREA          GP03142
         L     R1,=A(CLEARLEN)  AND LENGTH                      GP03142
         SR    R15,R15
         MVCL  R0,R14        CLEAR THE RESULT AREA
         L     R4,PAR@TEXT   LOAD TEXT ADDRESS
         LA    R4,0(,R4)
         LTR   R4,R4         ANY ?
         BZ    EXIT8         NO; FAIL
         ICM   R5,15,PAR#TEXT  GET TEXT LENGTH
         BNP   EXIT4         NOTHING TO DO
         AR    R5,R4         SET TO LAST BYTE + 1
         BCTR  R5,0          POINT TO LAST VALID BYTE
         SR    R2,R2         ONLY USE LOW BYTE
         LA    R7,PAR@TABL   POINT TO TABLE CHAIN
         LA    R8,RESULTS    POINT TO INDIVIDUAL ENTRIES
         USING PRSTENT,R8    DECLARE SINGLE ENTRY
         XC    TRTSTOP,TRTSTOP  CLEAR STOP TABLE
         BIX   VAL=PAR$TYPE,PFX=SETST,ERR=SETSTCOM,                    *
               LOC=(WRD,COM,KEY,LST,ITM)                        GP08095
         SPACE 1
SETSTITM OI    PAR$RQFG,PAR$COSP  SEPARATE LIST ITEMS           GP08095
SETSTLST MVI   TRTSTOP+C'(',PRSSTEPL  LEFT PARENTHESIS
         MVI   TRTSTOP+C')',PRSSTEPR  RIGHT PARENTHESIS
SETSTKEY MVI   TRTSTOP+C'=',PRSSTEQU  EQUAL - KEYWORD
         TM    PAR$RQFG,PAR$COKW  TREAT COLON AS KEYWORD ?
         BZ    *+8           NO; USE EQUAL ONLY
         MVI   TRTSTOP+C':',PRSSTEQU  TREAT COLON AS EQUAL
         TM    PAR$RQFG,PAR$PARK  TREAT XXX() AS KEYWORD ?
         BZ    *+8           NO; USE EQUAL ONLY
         MVI   TRTSTOP+C'(',PRSSTEPL  LEFT PARENTHESIS
SETSTCOM MVI   TRTSTOP+C',',PRSSTCOM  COMMA
         MVI   TRTSTOP+C';',PRSSTCOM  TREAT SEMI-COLON AS COMMA
         TM    PAR$RQFG,PAR$COMI  TREAT MINUS AS COMMA (RANGE)  GP08250
         BZ    SETSTWRD      NO; USE COMMA,SEMI-COLON, BLANK    GP08250
         MVI   TRTSTOP+C'-',PRSSTCOM  RANGE SPLIT               GP08250
         MVI   TRTSTOP+C'/',PRSSTCOM  RANGE SPLIT               GP08250
SETSTWRD MVI   TRTSTOP+C' ',PRSSTBLK  TREAT BLANK AS BLANK
         MVI   TRTSTOP+X'0',PRSSTBLK  TREAT HEX ZERO AS BLANK
         SPACE 1
*---------------------------------------------------------------------*
*  CHECK RESIDUAL LENGTH & EXIT IF DONE; SKIP LEADING BLANKS          *
*---------------------------------------------------------------------*
TERMNEXT BAS   R14,SKIPBLNK  SKIP OVER BLANKS
           B   SETCOUNT      NOTHING MORE TO DO                 GP03142
         OI    TMPFLAGS,FGUNQUO SHOW NOT OR BADLY QUOTED STRING
         CLI   0(R1),C'('    TEXT BEGINNING WITH '(' ?          GP08094
         BNE   TERMNBLK      NO; DO NORMALLY                    GP08094
         CLI   TRTSTOP+C')',PRSSTEPR  LIST PROCESSING ?         GP08094
         BNE   TERMNBLK      NO; NOTHING SPECIAL                GP08094
         OI    PRSSTOP,PRSSTPAR  SHOW PARENTHESIS STRIPPED      GP08094
         LA    R4,1(,R1)     SKIP IT                            GP08094
         TM    PAR$RQFG,PAR$COSP  DO SIMPLE LIST ITEMS ?        GP08094
         BNZ   TERMNEXT      YES; SKIP LEFT PARENTHESIS         GP08094
         LA    R1,1(,R5)     POINT TO LAST BYTE                 GP08094
         LR    R3,R4         SET START SCAN ADDRESS             GP08094
         SR    R2,R2         CLEAR RESULT BYTE                  GP08094
         LR    R15,R1        COPY END                           GP08094
         SR    R15,R3        LESS START SCAN                    GP08094
         BM    TEXTNQUO      NOT PROPER LIST                    GP08094
TEXTFLST MIN   R15,=H'256',TYPE=H  TRUNCATE                     GP08094
         BCTR  R15,0         LESS ONE FOR EXECUTE               GP08094
         EX    R15,EXTRTLST  LOOK FOR SCAN STOPPER              GP08094
         BNZ   TEXTFSTP      HAVE ONE; NOW GET LENGTH OF TERM   GP08094
TEXTFLS2 LA    R3,1(R15,R3)  NEXT SCAN ADDRESS                  GP08094
         CR    R3,R5         DONE YET ?                         GP08094
         BL    TEXTFLST      TRY AGAIN                          GP08094
         B     TEXTNQUO      NOT PROPER LIST                    GP08094
TEXTFSTP CLI   0(R1),C')'    LIST END ?                         GP08094
         BE    TEXTSTOP      YES; JOIN NORMAL CODE              GP08094
         BAS   R14,TESTQUOT  FIND END OF QUOTED STRING          GP08094
           NOP 0             NOT STRING                         GP08094
         LA    R1,1(,R1)     SKIP STOPPER                       GP08094
         B     TEXTFLST      LOOP UNTIL )                       GP08094
         SPACE 1
*---------------------------------------------------------------------*
*  FIND STOP CHARACTER; BUILD TABLE ENTRY; SKIP TRAILING BLANKS       *
*---------------------------------------------------------------------*
TERMNBLK ST    R1,PRS@TEXT   REMEMBER START OF STRING
         LR    R4,R1         START SCAN WITH NON-BLANK
         SPACE 1
*---------------------------------------------------------------------*
*  CHECK FOR QUOTED STRING; IF SO, BYPASS STOP TRT HERE               *
*---------------------------------------------------------------------*
         BAS   R14,TESTQUOT  CHECK FOR QUOTED STRING
           B   TEXTNQUO      NONE, OR UNBALANCED QUOTES
         NI    TMPFLAGS,255-FGUNQUO PROPERLY QUOTED STRING
         LA    R1,1(,R1)     SKIP TRAILING QUOTE
         TRT   0(1,R1),TRTSTOP  AND SET STOP FLAG
         B     TEXTSTOP      JOIN COMMON
         SPACE 1
*---------------------------------------------------------------------*
*  FIND STOP CHARACTER; BUILD TABLE ENTRY; SKIP TRAILING BLANKS       *
*---------------------------------------------------------------------*
TEXTNQUO LA    R1,1(,R5)     POINT TO LAST BYTE
         LR    R3,R4         SET START SCAN ADDRESS
         SR    R2,R2         CLEAR RESULT BYTE
         LR    R15,R1        COPY END
         SR    R15,R3        LESS START SCAN
         BM    TEXTFRAG      DONE; PROCESS THIS TERM
TEXTFEND MIN   R15,=H'256',TYPE=H  TRUNCATE
         BCTR  R15,0         LESS ONE FOR EXECUTE
         EX    R15,EXTRTSTP  LOOK FOR SCAN STOPPER
         BNZ   TEXTSTOP      HAVE ONE; NOW GET LENGTH OF TERM
TEXTFEN2 LA    R3,1(R15,R3)  NEXT SCAN ADDRESS
         CR    R3,R5         DONE YET ?
         BL    TEXTFEND      TRY AGAIN
         SPACE 1
*---------------------------------------------------------------------*
*  FOR BLANK TERMINATED STRING, LOOK FOR ANOTHER STOP CHARACTER       *
*---------------------------------------------------------------------*
TEXTSTOP LR    R15,R1        COPY END ADDRESS
         SR    R15,R4        MINUS START ADDRESS - TEXT LENGTH
         STC   R2,PRSSTOP    REMEMBER THE STOP CHARACTER
         LTR   R2,R2         ANY STOP ?
         BZ    TEXTNSTP      NO; NOTHING TO STORE
         MVC   PRSCHAR,0(R1)
TEXTNSTP CLM   R2,1,TRTSTOP+C' '  TEXT ENDED AT BLANK ?
         BNE   TEXTFRAG      NO; PROCESS NORMALLY
         STM   R15,R5,16(R13)  SAVE A FEW REGISTERS
         LR    R4,R1         NEW START
         BAS   R14,SKIPBLNK  SKIP OVER BLANKS
           B   TEXTRSTP      NOTHING LEFT
         LTR   R2,R2         ALL BLANK ?
         BZ    TEXTRSTP      YEP; IGNORE
*  NOTE: WE IGNORE BLANKS BEFORE AND AFTER SIMPLE TERMS (E.G., COMMA
*    SEPARATED, BUT NOT FOR PARENTHESIZED TERMS                 GP08094
         CLI   0(R1),C'('    START OF LIST, ETC. ?              GP08094
         BE    TEXTRSTP      YES; DO NOT CONSOLIDATE            GP08094
         TRT   0(1,R1),TRTSTOP
         BZ    TEXTRSTP      NOT A STOP CHARACTER
         STC   R2,PRSSTOP    REMEMBER THE STOP CHARACTER
         MVC   PRSCHAR,0(R1)
         STM   R1,R2,24(R13)   UPDATE R1, R2; RELOAD REST
TEXTRSTP LM    R15,R5,16(R13)  RESTORE REGISTERS
         SPACE 1
*---------------------------------------------------------------------*
*  FOR ( STOP, CHECK FOR (XXX) AND XXX(YYY) CASES                     *
*---------------------------------------------------------------------*
TEXTFRAG CLM   R2,1,=AL1(PRSSTEPL) LEFT PARENTHESIS ?
         BNE   TEXTFRAL      NO
         LTR   R15,R15       XXX( ?
         BNZ   TEXTFRAH
         ICM   R0,15,PRS#TEXT  PRIOR SEGMENT ?
         BZ    TEXTFRAK ***LATER ADD SUBLIST PROCESSING***
TEXTFRAH TM    PAR$RQFG,PAR$PARK  TREAT XXX( AS KEYWORD= ?
         BZ    TEXTFEN2      NO
         L     R0,PRS#TEXT   PRIOR LENGTH
         AR    R0,R15        NEW CUMULATIVE LENGTH
         CH    R0,=H'8'      LONGER THAN KEYWORD ?
         BH    TEXTFEN2      TREAT AS TEXT
         C     R7,@KEYWORD   ALREADY TARGET OF KEYWORD ?
         BE    TEXTFEN2      YES; DON'T START ANOTHER
         LA    R2,PRSSTEQU   TREAT AS KEYWORD
         STC   R2,PRSSTOP
         BCTR  R1,0          REPROCESS THE (
         B     TEXTFRAL
TEXTFRAK TM    PAR$RQFG,PAR$COSP  TREAT LIST ENTRIES SEPARATELY GP08093
         BNZ   TEXTFEN2      YES; DON'T SAVE LIST START         GP08093
         ST    R15,PRS#TEXT  SET NEW LENGTH=1
         MVI   PRS$TEXT,C'('  PROPAGATE THE PARENTHESIS
         B     TEXTFEN2      CONTINUE SCANNING
*---------------------------------------------------------------------*
*  WE HAVE A TEXT FRAGMENT - STORE, TEST TYPE, ETC.                   *
*---------------------------------------------------------------------*
TEXTFRAL A     R15,PRS#TEXT  PLUS PRIOR SEGMENT LENGTH
         ST    R15,PRS#TEXT  STASH BACK
         BNZ   LOOPTERR      PROCESS
         CLM   R2,1,TRTSTOP+C','  WAS THIS A FIELD STOPPER ?
         BE    LOOPNPAR      YES; NULL FIELD OR VALUE           GP08095
*---------------------------------------------------------------------*
*  CHECK FOR PARENTHESIZED VALUE (XXX) - ADJUST TO XXX AND SET PAR FG *
*---------------------------------------------------------------------*
LOOPTERR CLI   0(R4),C'('    START WITH A PARENTHESIS ?
         BNE   LOOPNPAR      NO
         LA    R14,0(R15,R4) POINT TO LAST BYTE
         BCTR  R14,0
         CLI   0(R14),C')'   END WITH A PARENTHESIS ?
         BNE   LOOPNPAR      NO
         L     R0,PRS#TEXT   GET OLD TEXT LENGTH
         SH    R0,=H'2'      ALLOW FOR PARENTHESES
         BM    LOOPNPAR      NO ?
         ST    R0,PRS#TEXT   UPDATE LENGTH
         LA    R4,1(,R4)     ADVANCE START
         INC   PRS@TEXT,WORK=R14  INCREASE TEXT ADDRESS
         LR    R15,R0        SET TEXT LENGTH
         OI    PRSSTOP,PRSSTPAR  SHOW PARENTHESES REMOVED
LOOPNPAR LR    R14,R4        TEXT START
         LA    R2,PRS$TEXT   POINT TO KEYWORD
         LA    R3,L'PRS$TEXT
         MVCL  R2,R14        MOVE THE TEXT
         TM    PAR$RQFG,PAR$COUP  MAKE UPPER CASE ?             GP08095
         BZ    TEXTCASE      NO; LEAVE AS IS                    GP08095
         OC    PRS$TEXT,TRTINT   MAKE UPPER CASE                GP08095
TEXTCASE TM    PRSSTOP,PRSSTEQU  WAS THIS A KEYWORD ?
         BZ    TEXTPOST      NO
         MVC   PRSKEYWD,PRS$TEXT  EXTRACT KEYWORD < 9
         OC    PRSKEYWD,BLANKS      AND UPPER CASE
         OI    PRSTYPE,PRSPFKEY   SIGNAL KEYWORD TYPE           GP03142
         XC    PRS$TEXT,PRS$TEXT  CLEAR FOR VALUE               GP14139
         XC    PRS#TEXT,PRS#TEXT    AND LENGTH                  GP14139
TEXTSKEY ST    R8,@KEYWORD   REMEMBER THIS LOCATION
*---------------------------------------------------------------------*
*  TEXT FRAGMENT STORED - POST PROCESS FOR HEX & INTEGER CONVERSION   *
*---------------------------------------------------------------------*
TEXTPOST LA    R4,1(,R1)     SKIP THE STOP CHARACTER
         TM    PAR$RQFG,PAR$COUQ  STRIP QUOTES ?
         BZ    TUNQNOT       NO
         TM    TMPFLAGS,FGUNQUO  UNBALANCED QUOTES IN OPERAND?
         BNZ   TUNQNOT       YES; NOT QUOTED
         CLC   =A(L'PRS$TEXT),PRS#TEXT  WILL IT FIT ?
         BNH   TUNQNOT       PROBABLY NOT
         STM   R4,R5,DB      SAVE OVER TEST
         BAS   R14,MOVEQUOT  VERIFY THAT IT'S VALID QUOTED, AND UNQUOTE
           B   TUNQFAIL      OOPS
TUNQFAIL LM    R4,R5,DB      RESTORE CURRENT CARD SCAN VALUES
TUNQNOT  BAS   R14,TESTHEX   CHECK FOR HEX TEXT
         BAS   R14,TESTINT   CHECK FOR INTEGER VALUE
         C     R7,@KEYWORD   PROCESSING TEXT FOR KEYWORD= ?
         BNE   TEXTPNKW      NO; PROCESS NORMALLY
*---------------------------------------------------------------------*
*  PREVIOUS ENTRY WAS KEYWORD; MERGE THIS ONE INTO IT                 *
*---------------------------------------------------------------------*
         PUSH  USING
         DROP  R8
 MVC PRS@TEXT-PRSDSECT(L'PRS@TEXT+L'PRS#TEXT,R7),PRS@TEXT-PRSDSECT(R8)
 MVC PRS#THEX-PRSDSECT(L'PRS#TINT+L'PRS#THEX,R7),PRS#THEX-PRSDSECT(R8)
         OC    PRSTYPE-PRSDSECT(L'PRSTYPE,R7),PRSTYPE-PRSDSECT(R8) 1205
         MVC   PRSCHAR-PRSDSECT(L'PRSCHAR,R7),PRSCHAR-PRSDSECT(R8) 1205
         OC    PRSSTOP-PRSDSECT(L'PRSSTOP,R7),PRSSTOP-PRSDSECT(R8)
      OC PRSFLAGS-PRSDSECT(L'PRSFLAGS,R7),PRSFLAGS-PRSDSECT(R8) GP08075
         MVC   PRS$TEXT-PRSDSECT(L'PRS$TEXT,R7),PRS$TEXT-PRSDSECT(R8)
         XC    PRSDSECT-PRSDSECT(PRSSIZE,R8),PRSDSECT-PRSDSECT(R8)
         XC    @KEYWORD,@KEYWORD
         B     TEXTPMKW
         POP   USING
*---------------------------------------------------------------------*
*  NEW ENTRY - CHAIN INTO PRIOR LINK; ADVANCE POINTER                 *
*---------------------------------------------------------------------*
TEXTPNKW LA    R15,NUMOPOS   SET FOR POSITIONAL ENTRY           GP03142
         TM    PRSTYPE,PRSPFKEY  KEYWORD ?                      GP03142
         BZ    TEXTPNK#      NO; GO TO COUNT IT                 GP03142
         LA    R15,NUMOPKW   ELSE COUNT AS KEYWORD              GP03142
TEXTPNK# INC   0(R15)        UP THE COUNT                       GP03142
         INC   NUMOPER       AND UP TOTAL                       GP03142
         ST    R8,PAR@TABL-PAR@TABL(,R7)  LINK TO PREVIOUS ENTRY
         LR    R7,R8         NEW CHAIN LINK
         LA    R8,PRSSIZE(,R8)  NEXT POSITION
TEXTPMKW CR    R4,R5         CHECK AGAIN IF TEXT LEFT
         BNH   TERMNEXT      YES; GO FOR IT
         SPACE 1                                                GP03142
SETCOUNT LM    R15,R1,NUMOPER  GET COUNTERS                     GP03142
         STC   R15,PAR#OPER  TOTAL OPERANDS                     GP03142
         STC   R0,PAR#OPOS   POSITIONALS                        GP03142
         STC   R1,PAR#OPKW   KEYWORDS                           GP03142
         B     EXIT          TAKE GOOD RETURN                   GP03142
         SPACE 1
EXTRTNBL TRT   0(0,R4),TRTSKIP  FIND A NON-BLANK
EXTRTSTP TRT   0(0,R3),TRTSTOP  FIND A STOP CHARACTER
EXTRTTAB TRT   0(0,R2),0(R1)   VALIDATE TEXT
EXTRTLST TRT   0(0,R3),TRTLIST  FIND LIST END                   GP08094
EXMVCTXT MVC   0(0,R1),0(R2)   MOVE TEXT
         SPACE 2
*---------------------------------------------------------------------*
*  TESTQUOT - SUBROUTINE TO IDENTIFY QUOTED STRINGS                   *
*    INPUT R4-SCAN ADDRESS   R5-END ADDRESS                           *
*    RETURN R14+0 - NOT QUOTED STRING                                 *
*    RETURN R14+4 - R1-END ADDRESS; R4-START; R15-LENGTH              *
*---------------------------------------------------------------------*
TESTQUOT CLI   0(R4),C''''   APOSTROPHE ?
         BE    TESTQUOL      YES; PROCEED
         CLI   0(R4),C'"'    REAL QUOTE ?
         BNER  R14           NO; JUST RETURN
TESTQUOL SR    R0,R0
         IC    R0,0(,R4)     LOAD BEGIN QUOTE
         LA    R2,1(,R4)     START SCAN FOR END
TESTQUOR LA    R1,1(,R5)     END ADDRESS
TESTQUOS SRST  R1,R2         SEARCH FOR MATCHING END QUOTE
         BO    TESTQUOS      CHOPPED - RESTART
         BHR   R14           NO MATCHING END QUOTE FOUND
         LR    R15,R1        GET END SCAN ADDRESS
         SR    R15,R4        LESS START ADDRESS
         CR    R1,R5         ANYTHING LEFT ?
         BH    4(,R14)       EXACT FIT - RETURN STRING
         LA    R2,2(,R1)     NEW SCAN START FOR DOUBLED QUOTE
         CLM   R0,1,1(R1)    DOUBLED QUOTE ?
         BE    TESTQUOR      YES; SCAN FOR TRAILING QUOTE
         LR    R15,R1        SAVE OVER TRT
         TRT   1(0,R1),TRTSTOP  IS IT A STOP CHARACTER?
         LR    R1,R15        RESTORE
         BNZ   4(,R14)       YES; VALID QUOTED STRING (?)
         BR    R14           RETURN UN- OR MAL-QUOTED STRING
         SPACE 2
*---------------------------------------------------------------------*
*  MOVEQUOT - SUBROUTINE TO MOVE AND UNQUOTE QUOTED STRING            *
*    INPUT SPECIFIED IN CURRENT PRS ENTRY (R8)  (R4,R5 SAVED BY CALL) *
*    OUTPUT - UPDATED PRS ENTRY WITH NEW ADDRESS, LENGTH, AND TEXT    *
*---------------------------------------------------------------------*
MOVEQUOT LM    R4,R5,PRS@TEXT RELOAD ADDRESS AND LENGTH OF RAW TEXT
         AR    R5,R4
         BCTR  R5,0          LAST BYTE
         CLI   0(R4),C''''   APOSTROPHE ?
         BE    MOVEQUOL      YES; PROCEED
         CLI   0(R4),C'"'    REAL QUOTE ?
         BNER  R14           NO; JUST RETURN
MOVEQUOL SR    R0,R0
         IC    R0,0(,R4)     LOAD BEGIN QUOTE
         CLM   R0,1,0(R5)    START QUOTE MATCHES END QUOTE ?
         BNER  R14
         LA    R3,PRS$TEXT   NEW LOCATION
         XC    PRS$TEXT,PRS$TEXT  CLEAR IT
         ST    R3,PRS@TEXT   SAVE IT
         SR    R6,R6         NEW OUPUT LENGTH
         ST    R6,PRS#TEXT
         LA    R2,1(,R4)     START SCAN FOR END
MOVEQUOR LA    R1,0(,R5)     END ADDRESS
MOVEQUOS SRST  R1,R2         SEARCH FOR MATCHING END QUOTE
         BO    MOVEQUOS      CHOPPED - RESTART
         BH    MOVEQUOX      NO MATCHING END QUOTE FOUND
         LR    R15,R1        GET END SCAN ADDRESS
         SR    R15,R2        LESS START ADDRESS
         BNP   MOVEQUOQ
         BCTR  R15,0         FIX LENGTH FOR EXECUTE
         EX    R15,EXQUOMVC  MOVE TEXT TO INTERNAL
         LA    R3,1(R15,R3)  NEW DESTINATION
         LA    R6,1(R15,R6)  NEW LENGTH
MOVEQUOQ CR    R1,R5         ANYTHING LEFT ?
         BNL   MOVEQUOZ      EXACT FIT - RETURN STRING
         STC   R0,0(,R3)     ELSE PROPAGATE INTERNAL QUOTE
         LA    R3,1(,R3)
         LA    R6,1(,R6)     ADJUST LENGTH USED
         LA    R2,1(,R1)     NEW SCAN START FOR SINGLE (BAD)
         CLM   R0,1,1(R1)    DOUBLED QUOTE ?
         BNE   MOVEQUOR      YES; SCAN FOR TRAILING QUOTE
         LA    R2,2(,R1)     NEW SCAN START FOR DOUBLED QUOTE
         B     MOVEQUOR      YES; SCAN FOR TRAILING QUOTE
MOVEQUOX LR    R15,R1        GET END SCAN ADDRESS
         SR    R15,R2        LESS START ADDRESS
         BNP   MOVEQUOY
         BCTR  R15,0
         EX    R15,EXQUOMVC  MOVE TEXT TO INTERNAL
MOVEQUOY LA    R6,1(R15,R6)  NEW LENGTH
MOVEQUOZ OI    PRSFLAGS,PRSFGUNQ  SHOW QUOTED STIRNG PROCESSED
         ST    R6,PRS#TEXT
         B     4(,R14)       RETURN UNQUOTED STRING
EXQUOMVC MVC   0(*-*,R3),0(R2)  MOVE PARTIAL UNQUOTED STRING
         SPACE 2
*---------------------------------------------------------------------*
*  ADVANCE SCAN POINTER TO NEXT NON-BLANK                             *
*---------------------------------------------------------------------*
SKIPBLNK LA    R1,1(,R5)     POINT TO LAST BYTE
         SR    R2,R2         CLEAR CHAR CODE
         LA    R15,1(,R5)    GET LAST POSSIBLE BYTE
         SR    R15,R4        LENGTH LEFT TO SCAN
         BNPR  R14
         MIN   R15,=H'256',TYPE=H  TRUNCATE
         BCTR  R15,0         LESS ONE FOR EXECUTE
         EX    R15,EXTRTNBL  LOOK FOR NON-BLANK
         BNZ   4(,R14)       HAVE ONE; NOW GET LENGTH OF TERM
         LA    R4,1(R15,R4)  ADVANCE TEXT POINTER
         CR    R4,R5         ADJUST RESIDUAL LENGTH
         BNH   SKIPBLNK      TRY AGAIN
         BR    R14           ALL BLANK
         SPACE 2
*---------------------------------------------------------------------*
*  EXAMINE THE TEXT FRAGMENT FOR HEXADECIMAL TEXT; CONVERT IF SO      *
*---------------------------------------------------------------------*
TESTHEX  ICM   R15,15,PRS#TEXT  GET TEXT LENGTH
         BNPR  R14           RETURN IF NONE
         LA    R3,TRHEXVAL   SET FOR NORMAL HEX VALUES
         L     R2,PRS@TEXT   START OF TEXT
         BCT   R15,*+8       MAKE EXECUTE LENGTH
         B     TESTHEXB      NO ROOM FOR SIGN + DIGIT
         CLI   0(R2),C'+'    BUT IS IT?
         BE    TESTHEXA      YES; SKIP OVER SIGN
         CLI   0(R2),C'-'    BUT IS IT?
         BNE   TESTHEXB      NO
         LA    R3,TRHEXINV   SET COMPLEMENT HEX VALUES
TESTHEXA LA    R2,1(,R2)     SKIP SIGN
         BCTR  R15,0         MAKE EXECUTE LENGTH
TESTHEXB CH    R15,=AL2(2*L'PRS#THEX)  NOT TOO LONG ?
         BNLR  R14           RETURN
         LA    R1,TRTHEX     GET VALID HEX TABLE
         EX    R15,EXTRTTAB  VALIDATE
         BNZR  R14           NO GOOD
         LA    R1,DB+2*L'PRS#THEX-1  END OF WORK FIELDS
         SR    R1,R15        COPY RIGHT JUSTIFIED
         XC    DB(2*L'PRS#THEX),DB  CLEAR
         EX    R15,EXMVCTXT  MOVE TEXT
         TR    DB(2*L'PRS#THEX),0(R3)
         LA    R0,L'PRS#THEX/4
         LA    R1,PRS#THEX
         LA    R2,DB
TESTHEXL PACK  0(5,R1),0(9,R2) PACK ONE WORD
         LA    R1,4(,R1)
         LA    R2,8(,R2)
         BCT   R0,TESTHEXL   MOVE ALL WORDS
         MVI   PRS#THEX+L'PRS#THEX,0  RESTORE PRS#TINT
         OI    PRSFLAGS,PRSFGHEX
         BR    R14
         SPACE 2
*---------------------------------------------------------------------*
*  EXAMINE THE TEXT FRAGMENT FOR INTEGER TEXT; CONVERT IF SO          *
*---------------------------------------------------------------------*
TESTINT  ICM   R15,15,PRS#TEXT  GET TEXT LENGTH
         BNPR  R14           RETURN IF NONE
         LA    R3,=X'0F'     SET POSITIVE (FOR SHORT FIELD)
         L     R2,PRS@TEXT   START OF TEXT
         BCT   R15,*+8       MAKE EXECUTE LENGTH
         B     TESTINTB      NO ROOM FOR SIGN
         LA    R3,=X'0D'     PROVISIONALLY SET NEGATIVE
         CLI   0(R2),C'-'    BUT IS IT?
         BE    TESTINTA      YES; SKIP SIGN
         LA    R3,=X'0C'     SET POSITIVE
         CLI   0(R2),C'+'    BUT IS IT?
         BNE   TESTINTB      NO; JUST RETAIN SIGN
TESTINTA LA    R2,1(,R2)     SKIP SIGN
         BCTR  R15,0         ADJUST LENGTH
TESTINTB CH    R15,=AL2((INTTEND-INTBASE)/(INTNEXT-INTBASE)) 2 LONG ?
         BHR   R14           RETURN
         BL    TESTINTC      SHORTER THAN MAXIMUM
         CLC   MAXINT,0(R2)  NOT TOO HIGH ?
         BLR   R14           TOO HIGH; TOO BAD
TESTINTC LA    R1,TRTINT     GET VALID DIGITS
         EX    R15,EXTRTTAB  VALIDATE
         BNZR  R14           NO GOOD
         CH    R15,=H'9'     IF SHORT ENOUGH FOR CVB, USE THAT
         BL    TESTINTO
*---------------------------------------------------------------------*
*  CONVERT 64-BIT INTEGER USING TABLE LOOKUP                          *
*---------------------------------------------------------------------*
         AR    R2,R15        POINT TO LAST DIGIT
         SR    R0,R0         CLEAR ACCUMULATOR
         SR    R1,R1         CLEAR ACCUMULATOR
         LA    R15,1(,R15)   GET COUNT FOR BCT
         LA    R6,INTBASE-L'INTBASE  POSITION FOR FIRST DIGIT
TESTINTL IC    R9,0(,R2)     GET A LOW DIGIT
         N     R9,=X'0000000F'  ISOLATE NUMERIC
         BZ    TESTINTN      ZERO - NOTHING TO DO IN THIS POSITION
         MH    R9,=Y(L'INTBASE) CONVERT TO OFFSET
         AR    R9,R6         POINT TO ADDEND
         A64D  (R0),0(R9)    ADD IN THIS DIGIT
TESTINTN LA    R6,INTNEXT-INTBASE(,R6)  SKIP TO NEXT DECADE
         BCTR  R2,0          PRIOR DIGIT
         BCT   R15,TESTINTL  DO ANOTHER
         STM   R0,R1,PRS#TINT  STASH RESULT
         CLC   =X'0D',0(R3)    NEGATIVE REQUEST ?
         BNE   TESTINTX      NO; RETURN
         SR    R0,R0
         SR    R1,R1
         S64D  (R0),PRS#TINT  SUBTRACT FROM ZERO
         STM   R0,R1,PRS#TINT  STASH RESULT
         B     TESTINTX      RETURN
         SPACE 1
*---------------------------------------------------------------------*
*  CONVERT TEXT TO INTEGER FOR SHORT (31-BIT) FORM                    *
*---------------------------------------------------------------------*
TESTINTO LA    R1,DB+2*L'PRS#TINT-1  END OF WORK FIELDS
         SR    R1,R15        COPY RIGHT JUSTIFIED
         XC    DB(2*L'PRS#TINT),DB  CLEAR
         EX    R15,EXMVCTXT  MOVE TEXT
         PACK  DB2(L'PRS#TINT),DB(2*L'PRS#TINT)  PACK
         MVN   DB2+L'PRS#TINT-1(1),0(R3)  MOVE SIGN NYBBLE
         CVB   R0,DB2        TEMPORARY, UNTIL 64-BIT CODE DONE
         ST    R0,PRS#TINT+4   FOR NOW - ONLY 32-BIT
         SRA   R0,31         FILL WITH SIGN BIT
         ST    R0,PRS#TINT   EXTEND SIGN
TESTINTX OI    PRSFLAGS,PRSFGINT
         BR    R14
         SPACE 2
BLANKS   DC    CL8' '
         SPACE 1
TRTSKIP  DC    256X'FF'      STOP ON ALL
         TRENT TRTSKIP,0,C' '   EXCEPT BLANK
         SPACE 1
TRTHEX   DC    256AL1(4)     NOT HEX TEXT
         TRENT TRTHEX,0,(X'81',6)                      LOWER CASE
         TRENT TRTHEX,0,(C'A',6)                       UPPER CASE
         TRENT TRTHEX,0,(C'0',10)                      DIGITS
         SPACE 1
TRHEXVAL DC    256AL1(0)     NO VALUE
         TRENT TRHEXVAL,(*-TRHEXVAL-X'81'+10),(X'81',6)  a->0A
         TRENT TRHEXVAL,(*-TRHEXVAL-C'A'+10),(C'A',6)    A->0A
         TRENT TRHEXVAL,(*-TRHEXVAL-C'0'),(C'0',10)      1->01
         SPACE 1
TRHEXINV DC    256AL1(0)     NO VALUE
         TRENT TRHEXINV,(5-(*-TRHEXINV-X'81')),(X'81',6) a->05
         TRENT TRHEXINV,(5-(*-TRHEXINV-C'A')),(C'A',6)   A->05
         TRENT TRHEXINV,(15-(*-TRHEXINV-C'0')),(C'0',10) 1->0E
         SPACE 1
TRTINT   DC    256AL1(64)    NOT DIGITS  (DOUBLES AS LOTS OF BLANKS)
         TRENT TRTINT,0,(C'0',10)                      DIGITS
         SPACE 1
TRTLIST  DC    256AL1(0)     LIST END SCAN TABLE                GP08094
         TRENT TRTLIST,4,C'''',C'"'    QUOTED STRING ?          GP08094
         TRENT TRTLIST,8,C')'          END OF LIST              GP08094
         SPACE 1
         LTORG ,
         SPACE 1
*---------------------------------------------------------------------*
*   ADDITION TABLE FOR 64-BIT INTEGER CONVERSION TO INTERNAL          *
*---------------------------------------------------------------------*
MAXINT   DC    C'9223372036854775807'   LARGEST 63-BIT POSITIVE
INTBASE  DC    XL8'0000000000000001'                           1
         DC    XL8'0000000000000002'                           2
         DC    XL8'0000000000000003'                           3
         DC    XL8'0000000000000004'                           4
         DC    XL8'0000000000000005'                           5
         DC    XL8'0000000000000006'                           6
         DC    XL8'0000000000000007'                           7
         DC    XL8'0000000000000008'                           8
         DC    XL8'0000000000000009'                           9
INTNEXT  DC    XL8'000000000000000A'                          10
         DC    XL8'0000000000000014'                          20
         DC    XL8'000000000000001E'                          30
         DC    XL8'0000000000000028'                          40
         DC    XL8'0000000000000032'                          50
         DC    XL8'000000000000003C'                          60
         DC    XL8'0000000000000046'                          70
         DC    XL8'0000000000000050'                          80
         DC    XL8'000000000000005A'                          90
         DC    XL8'0000000000000064'                         100
         DC    XL8'00000000000000C8'                         200
         DC    XL8'000000000000012C'                         300
         DC    XL8'0000000000000190'                         400
         DC    XL8'00000000000001F4'                         500
         DC    XL8'0000000000000258'                         600
         DC    XL8'00000000000002BC'                         700
         DC    XL8'0000000000000320'                         800
         DC    XL8'0000000000000384'                         900
         DC    XL8'00000000000003E8'                       1,000
         DC    XL8'00000000000007D0'                       2,000
         DC    XL8'0000000000000BB8'                       3,000
         DC    XL8'0000000000000FA0'                       4,000
         DC    XL8'0000000000001388'                       5,000
         DC    XL8'0000000000001770'                       6,000
         DC    XL8'0000000000001B58'                       7,000
         DC    XL8'0000000000001F40'                       8,000
         DC    XL8'0000000000002328'                       9,000
         DC    XL8'0000000000002710'                      10,000
         DC    XL8'0000000000004E20'                      20,000
         DC    XL8'0000000000007530'                      30,000
         DC    XL8'0000000000009C40'                      40,000
         DC    XL8'000000000000C350'                      50,000
         DC    XL8'000000000000EA60'                      60,000
         DC    XL8'0000000000011170'                      70,000
         DC    XL8'0000000000013880'                      80,000
         DC    XL8'0000000000015F90'                      90,000
         DC    XL8'00000000000186A0'                     100,000
         DC    XL8'0000000000030D40'                     200,000
         DC    XL8'00000000000493E0'                     300,000
         DC    XL8'0000000000061A80'                     400,000
         DC    XL8'000000000007A120'                     500,000
         DC    XL8'00000000000927C0'                     600,000
         DC    XL8'00000000000AAE60'                     700,000
         DC    XL8'00000000000C3500'                     800,000
         DC    XL8'00000000000DBBA0'                     900,000
         DC    XL8'00000000000F4240'                   1,000,000
         DC    XL8'00000000001E8480'                   2,000,000
         DC    XL8'00000000002DC6C0'                   3,000,000
         DC    XL8'00000000003D0900'                   4,000,000
         DC    XL8'00000000004C4B40'                   5,000,000
         DC    XL8'00000000005B8D80'                   6,000,000
         DC    XL8'00000000006ACFC0'                   7,000,000
         DC    XL8'00000000007A1200'                   8,000,000
         DC    XL8'0000000000895440'                   9,000,000
         DC    XL8'0000000000989680'                  10,000,000
         DC    XL8'0000000001312D00'                  20,000,000
         DC    XL8'0000000001C9C380'                  30,000,000
         DC    XL8'0000000002625A00'                  40,000,000
         DC    XL8'0000000002FAF080'                  50,000,000
         DC    XL8'0000000003938700'                  60,000,000
         DC    XL8'00000000042C1D80'                  70,000,000
         DC    XL8'0000000004C4B400'                  80,000,000
         DC    XL8'00000000055D4A80'                  90,000,000
         DC    XL8'0000000005F5E100'                 100,000,000
         DC    XL8'000000000BEBC200'                 200,000,000
         DC    XL8'0000000011E1A300'                 300,000,000
         DC    XL8'0000000017D78400'                 400,000,000
         DC    XL8'000000001DCD6500'                 500,000,000
         DC    XL8'0000000023C34600'                 600,000,000
         DC    XL8'0000000029B92700'                 700,000,000
         DC    XL8'000000002FAF0800'                 800,000,000
         DC    XL8'0000000035A4E900'                 900,000,000
         DC    XL8'000000003B9ACA00'               1,000,000,000
         DC    XL8'0000000077359400'               2,000,000,000
         DC    XL8'00000000B2D05E00'               3,000,000,000
         DC    XL8'00000000EE6B2800'               4,000,000,000
         DC    XL8'000000012A05F200'               5,000,000,000
         DC    XL8'0000000165A0BC00'               6,000,000,000
         DC    XL8'00000001A13B8600'               7,000,000,000
         DC    XL8'00000001DCD65000'               8,000,000,000
         DC    XL8'0000000218711A00'               9,000,000,000
         DC    XL8'00000002540BE400'              10,000,000,000
         DC    XL8'00000004A817C800'              20,000,000,000
         DC    XL8'00000006FC23AC00'              30,000,000,000
         DC    XL8'00000009502F9000'              40,000,000,000
         DC    XL8'0000000BA43B7400'              50,000,000,000
         DC    XL8'0000000DF8475800'              60,000,000,000
         DC    XL8'000000104C533C00'              70,000,000,000
         DC    XL8'00000012A05F2000'              80,000,000,000
         DC    XL8'00000014F46B0400'              90,000,000,000
         DC    XL8'000000174876E800'             100,000,000,000
         DC    XL8'0000002E90EDD000'             200,000,000,000
         DC    XL8'00000045D964B800'             300,000,000,000
         DC    XL8'0000005D21DBA000'             400,000,000,000
         DC    XL8'000000746A528800'             500,000,000,000
         DC    XL8'0000008BB2C97000'             600,000,000,000
         DC    XL8'000000A2FB405800'             700,000,000,000
         DC    XL8'000000BA43B74000'             800,000,000,000
         DC    XL8'000000D18C2E2800'             900,000,000,000
         DC    XL8'000000E8D4A51000'           1,000,000,000,000
         DC    XL8'000001D1A94A2000'           2,000,000,000,000
         DC    XL8'000002BA7DEF3000'           3,000,000,000,000
         DC    XL8'000003A352944000'           4,000,000,000,000
         DC    XL8'0000048C27395000'           5,000,000,000,000
         DC    XL8'00000574FBDE6000'           6,000,000,000,000
         DC    XL8'0000065DD0837000'           7,000,000,000,000
         DC    XL8'00000746A5288000'           8,000,000,000,000
         DC    XL8'0000082F79CD9000'           9,000,000,000,000
         DC    XL8'000009184E72A000'          10,000,000,000,000
         DC    XL8'000012309CE54000'          20,000,000,000,000
         DC    XL8'00001B48EB57E000'          30,000,000,000,000
         DC    XL8'0000246139CA8000'          40,000,000,000,000
         DC    XL8'00002D79883D2000'          50,000,000,000,000
         DC    XL8'00003691D6AFC000'          60,000,000,000,000
         DC    XL8'00003FAA25226000'          70,000,000,000,000
         DC    XL8'000048C273950000'          80,000,000,000,000
         DC    XL8'000051DAC207A000'          90,000,000,000,000
         DC    XL8'00005AF3107A4000'         100,000,000,000,000
         DC    XL8'0000B5E620F48000'         200,000,000,000,000
         DC    XL8'000110D9316EC000'         300,000,000,000,000
         DC    XL8'00016BCC41E90000'         400,000,000,000,000
         DC    XL8'0001C6BF52634000'         500,000,000,000,000
         DC    XL8'000221B262DD8000'         600,000,000,000,000
         DC    XL8'00027CA57357C000'         700,000,000,000,000
         DC    XL8'0002D79883D20000'         800,000,000,000,000
         DC    XL8'0003328B944C4000'         900,000,000,000,000
         DC    XL8'00038D7EA4C68000'       1,000,000,000,000,000
         DC    XL8'00071AFD498D0000'       2,000,000,000,000,000
         DC    XL8'000AA87BEE538000'       3,000,000,000,000,000
         DC    XL8'000E35FA931A0000'       4,000,000,000,000,000
         DC    XL8'0011C37937E08000'       5,000,000,000,000,000
         DC    XL8'001550F7DCA70000'       6,000,000,000,000,000
         DC    XL8'0018DE76816D8000'       7,000,000,000,000,000
         DC    XL8'001C6BF526340000'       8,000,000,000,000,000
         DC    XL8'001FF973CAFA8000'       9,000,000,000,000,000
         DC    XL8'002386F26FC10000'      10,000,000,000,000,000
         DC    XL8'00470DE4DF820000'      20,000,000,000,000,000
         DC    XL8'006A94D74F430000'      30,000,000,000,000,000
         DC    XL8'008E1BC9BF040000'      40,000,000,000,000,000
         DC    XL8'00B1A2BC2EC50000'      50,000,000,000,000,000
         DC    XL8'00D529AE9E860000'      60,000,000,000,000,000
         DC    XL8'00F8B0A10E470000'      70,000,000,000,000,000
         DC    XL8'011C37937E080000'      80,000,000,000,000,000
         DC    XL8'013FBE85EDC90000'      90,000,000,000,000,000
         DC    XL8'016345785D8A0000'     100,000,000,000,000,000
         DC    XL8'02C68AF0BB140000'     200,000,000,000,000,000
         DC    XL8'0429D069189E0000'     300,000,000,000,000,000
         DC    XL8'058D15E176280000'     400,000,000,000,000,000
         DC    XL8'06F05B59D3B20000'     500,000,000,000,000,000
         DC    XL8'0853A0D2313C0000'     600,000,000,000,000,000
         DC    XL8'09B6E64A8EC60000'     700,000,000,000,000,000
         DC    XL8'0B1A2BC2EC500000'     800,000,000,000,000,000
         DC    XL8'0C7D713B49DA0000'     900,000,000,000,000,000
INTTEND  DC    XL8'0DE0B6B3A7640000'   1,000,000,000,000,000,000
         DC    XL8'1BC16D674EC80000'   2,000,000,000,000,000,000
         DC    XL8'29A2241AF62C0000'   3,000,000,000,000,000,000
         DC    XL8'3782DACE9D900000'   4,000,000,000,000,000,000
         DC    XL8'4563918244F40000'   5,000,000,000,000,000,000
         DC    XL8'53444835EC580000'   6,000,000,000,000,000,000
         DC    XL8'6124FEE993BC0000'   7,000,000,000,000,000,000
         DC    XL8'6F05B59D3B200000'   8,000,000,000,000,000,000
         DC    XL8'7CE66C50E2840000'   9,000,000,000,000,000,000
         SPACE 2
         PRINT &PRTMAC
         MAPPARSE ,          MAP USER'S PARAMETER AREA
         SPACE 1
         MAPPARST ,          MAP FRAGMENT
         SPACE 1
         PRINT &PRTSYS
         FSAWORK ,           DEFINE WORK AREA HEADER
SAVEAREA DS    18F           LOCAL SAVE AREA
DB       DS    D             WORK WORD
DB1      DS    D             WORK WORD
DB2      DS    D             WORK WORD
DB3      DS    D             WORK WORD
         SPACE 1
TRTSTOP  DC    256AL1(0)     PRIMARY SCAN TABLE
         SPACE 1
CLEARIT  DS    0F            START OF AREA CLEARED EACH ENTRY   GP03142
NUMOPER  DS    F     1/4     NUMBER OF OPERANDS PROCESSED       GP03142
NUMOPOS  DS    F     2/4     NUMBER OF POSITIONAL OPERANDS      GP03142
NUMOPKW  DS    F     3/4     NUMBER OF KEYWORD OPERANDS         GP03142
NUMOPSD  DS    F     4/4     NUMBER OF SELF-DEFINING KEYWORDS   GP03142
         SPACE 1                                                GP03142
@KEYWORD DS    A             ADDRESS OF (PRIOR) KEYWORD ENTRY   GP03142
         SPACE 1                                                GP03142
TMPFLAGS DS    X             FLAGS DURING KEYWORD SCANNING      GP03142
FGUNQUO  EQU   X'80'           UNBALANCED OR UNDBOULED QUOTES   GP03142
RESULTS  DS    (40)XL(PRSSIZE)  ALLOW FOR FORTY KEYWORDS/TEXT FRAGMENTS
RESULTLN EQU   *-RESULTS
CLEARLEN EQU   *-CLEARIT     LENGTH CLEARED ON ENTRY            GP03142
         SPACE 1
FSALEN   EQU   *-FSAWORK     GETMAIN SIZE
         SPACE 2
         PRINT &PRTSYS
         CVT   DSECT=YES
         SPACE 1
         IHAPSA ,
         SPACE 1
         IKJTCB ,
         SPACE 1
         YREGS ,
         END   ,
