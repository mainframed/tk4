SUBTREE  TITLE 'S U B T R E E  ***  SORTED TREE FUNCTIONS'
         MACRO ,
         NODEF &PFX=NODE
&PFX.SECT DSECT ,            DEFINE ONE NODE
&PFX.BASE DS    0A   1/3     BASE OF LESS/MORE ARRAY
&PFX.LESS DS    A    2/3     ADDRESS OF LOWER NODE OR 0
&PFX.MORE DS    A    3/3     ADDRESS OF HIGHER NODE OR 0
&PFX.DELT DS    X            SUBTREE DELTA (RIGHT-LEFT COUNT)
&PFX.FLAG DS    X            STATUS FLAG
         AIF   ('&PFX' NE 'NODE').NOFLGS
NFDELETE EQU   X'80'           ENTRY LOGICALLY DELETED
NFFIND   EQU   X'40'           FIND ONLY
.NOFLGS  ANOP  ,
&PFX.REC  DS    0C           RECORD
&PFX.SIZE EQU   *-&PFX.SECT  FIXED NODE OVERHEAD (+ RECORD LENGTH)
         MEND  ,
         SPACE 1
         COPY  OPTIONGB
         SPACE 2
         SYSPARM LIST=YES
         SPACE 1
***********************************************************************
**                                                                   **
**  SUBTREE:  SUBROUTINES FOR BUILDING A SORTED, BALANCED TREE,      **
**    UPDATING INFORMATION, AND SEQUENTIAL LISTING                   **
**                                                                   **
**  R1  - POINTS TO REQUEST LIST:                                    **
**    +0  ADDRESS OF CHARACTER REQUEST:GET, FIND, UPDATE, LIST, END  **
**    +4  ADDRESS OF SERVTREE PARAMETER AREA                         **
**    +8  ADDRESS OF INCOMING KEY (FIND), RECORD (GET,UPD)           **
**                                                                   **
**  R14 - RETURN ADDRESS                                             **
**                                                                   **
***********************************************************************
**                                                                   **
**    ON RETURN:                                                     **
**                                                                   **
**  R15 - CONDITION CODE  0 FOUND; GOOD COMPLETION                   **
**                        4 RECORD BUILT BY GET                      **
**                        8 NOT FOUND; END OF LIST; ETC.             **
**                       12 ERROR COMPLETING THE REQUEST             **
**                       16 BAD PARAMETER LIST; INVALID SERVTREE     **
**                                                                   **
**  R1  - ADDRESS OF CURRENT RECORD, OR 0                            **
**                                                                   **
***********************************************************************
         PRINT &PRTSOR
SUBTREE  START 0
SUBTREE  AMODE ANY
SUBTREE  RMODE ANY
         B     BEGIN-*(,R15)
         YREGS ,
BEGID    BCON  'SUBTREE &SYSDATE '
BEGIN    STM   R14,R12,12(R13) SAVE ALMOST EVERYTHING
         LR    R12,R15       GET BASE
         USING SUBTREE,R12   DECLARE IT
         LA    R1,0(,R1)     CLEAR POSSIBLE HIGH BIT
         LTR   R5,R1         SAVE ENTRY PARM POINTER
         BZ    ERROR16       INVALID CALL
         L     R11,4(,R1)    GET PRESUMED SERVTREE AREA
         LA    R11,0(,R11)   CLEAR HIGH BIT                     GP03149
         LTR   R11,R11         AND SET CC                       GP03149
         BZ    ERROR16       INVALID CALL
         USING ROOTSECT,R11  DECLARE USER'S PARAMETER AREA
         CLC   ROTID,BEGID+4  DOES IT MATCH 'TREE' ?
         BNE   ERROR16       NO; INVALID CALL
         L     R4,0(,R5)     LOAD REQUEST ADDRESS
         LA    R4,0(,R4)     CLEAR HIGH BIT                     GP03149
         LTR   R4,R4           AND SET CC                       GP03149
         BZ    ERROR16       INVALID CALL
         SR    R6,R6         SIGNAL NO RECORD POINTER PASSED
         TM    4(R5),X'80'   SHORT LIST WITH VL ?
         BNZ   TESTWORK      YES; GET SAVE AREA
         L     R6,8(,R5)     LOAD RECORD/KEY POINTER
TESTWORK ICM   R10,15,ROTWORK  LOAD AND TEST MY WORK AREA
         BNZ   HAVEWORK      OK
         LA    R3,SAVEEND-SAVE  SIZE OF LOCAL WORK AREA
         STORAGE OBTAIN,LENGTH=(R3)  GET A WORK AREA
         ST    R1,ROTWORK    STASH IT
         LR    R10,R1        COPY TO WORKING REGISTER
         LR    R2,R1         COPY FOR CLEARING
         SR    R15,R15       ZERO FILL AND LENGTH
         MVCL  R2,R14        CLEAR GOTTEN AREA
HAVEWORK ST    R13,4(,R10)   BACK LINK
         ST    R10,8(,R13)   FORWARD LINK
         LR    R13,R10       MAKE NEW SAVE AREA POINTER
         USING SAVE,R13      DECLARE IT
         B     WHAT
DOGPATCH DC    128S(*)            MODULE PATCH AREA
         SPACE 1
*---------------------------------------------------------------------*
*  FATAL CALLING ERROR - NO WORK AREA; NO NEW R13; JUST SET & RETURN  *
*---------------------------------------------------------------------*
ERROR16  LM    R14,R12,12(R13)  RELOAD CALLER'S REGISTERS
         LA    R15,16        SET FATAL ERROR
         SR    R1,R1         NO RECORD
         BR    R14           RETURN TO CALLER
         SPACE 2
**********************************************************************
**                                                                  **
**   FUNCTION INITIALIZATION                                        **
**                                                                  **
**********************************************************************
         PUSH  USING
WHAT     NI    PROFLAGS,255-PFFIND-PFNEW   RESET FIND-ONLY/NEW-CELL
         TM    PROFLAGS,PFINIT  INITIALIZATION DONE ?
         BNZ   WHAT2DO
         L     R0,=C'KL=0'   ANY KEY ?
         SR    R14,R14       CLEAR FOR IC
         ICM   R14,1,ROTKEYL   KEY LENGTH
         BZ    RETEIGHT      NO; SIGNAL KEY LENGTH REQUIRED
         STH   R14,KEYLEN    LOCAL COPY
         LH    R15,ROTRECL   RECORD LENGTH
         STH   R15,RECLEN    LOCAL COPY
         L     R0,=C'KEY>'   KEY LARGER THAN RECORD
         CR    R14,R15       KEY NO LONGER THAN RECORD?
         BH    RETEIGHT      NO; SIGNAL KEY TOO LONG
         AH    R14,ROTKEYO   KEYLENGTH+OFFSET
         L     R0,=C'KYO>'   KEY+OFFSET LARGER THAN RECORD
         CR    R14,R15       RECORD LONG ENOUGH ?
         BH    RETEIGHT      NO; ERROR                          GP03149
         LH    R14,ROTKEYO   KEY OFFSET
         STH   R14,KEYOFF    LOCAL COPY
         LA    R15,NODESIZE(,R15)  RECLEN PLUS NODE OVERHEAD
         ST    R15,CELLSIZE  SAVE IT
         MVC   EXNPCLC(6),PATPCLC  MOVE PRIMARY COMPARE
         MVC   EXNSCLC(6),PATSCLC  MOVE SECONDARY COMPARE
         ICM   R0,3,EXNPCLC+4     GET (BASE)OFFSET
         ALR   R0,R14             MAKE NEW OFFSET
         STCM  R0,3,EXNPCLC+4     AND STASH IT BACK
         ICM   R0,3,EXNSCLC+4     GET (BASE)OFFSET
         ALR   R0,R14             MAKE NEW OFFSET
         STCM  R0,3,EXNSCLC+4     AND STASH IT BACK
         LH    R14,KEYLEN
         BCTR  R14,0         CHANGE KEY LENGTH FOR EXECUTE
         STC   R14,EXNPCLC+1 AND PUT INTO CLC
         STC   R14,EXNSCLC+1 AND PUT INTO CLC
         OI    PROFLAGS,PFINIT  INITIALIZATION DONE ?
WHAT2DO  CLC   =C'GET',0(R4)      REQUEST TO LOCATE/CREATE A RECORD?
         BE    DOGET              YES
         CLC   =C'FIN',0(R4)      REQUEST TO LOCATE RECORD
         BE    DOFIND             YES
         CLC   =C'LOC',0(R4)      REQUEST TO LOCATE BY KEY?
         BE    DOLOC              YES
         CLC   =C'UPD',0(R4)      LOCATE AND UPDATE FROM R1?
         BE    DOUPDATE           YES
         CLC   =C'ADD',0(R4)      REQUEST TO ADD A RECORD?      GP05105
         BE    DOUPDATE           YES                           GP05105
         CLC   =C'LIS',0(R4)      LIST A RECORD?
         BE    DOLIST             YES
         CLC   =C'NEX',0(R4)      RETRIEVE NEXT SEQUENTIAL RECORD
         BE    DONEXT             YES
         CLC   =C'END',0(R4)      TERMINATE PROCESSING?
         BE    DOEND              YES
         CLC   =C'INI',0(R4)      REQUEST TO INITIALIZE?
         BE    RETZERO            YES; RETURN 0 IN R15/R1
         L     R0,=C'^REQ'        REASON - REQUEST
         B     RETEIGHT           RETURN REASON CODE
         SPACE 1
RETZERO  SR    R1,R1         NO RECORD ADDRESS RETURNED
RETINR1  SR    R0,R0         CLEAR REASON CODE
         SR    R15,R15       CLEAR RETURN CODE
         TM    PROFLAGS,PFNEW     NEW CELL ASSIGNED ?           GP09157
         BNZ   RETFOUR       YES; INDICATE NEED FOR DATA        GP09157
         B     RETREASN      RETURN TO CALLER WITH R15, R0, R1
         SPACE 1
RETEIGHT LA    R15,8         SET PROBABLE ERROR
         B     RETREASN      RETURN WITH R15
         SPACE 1
RETFOUR  LA    R15,4         SET WARNING
*NEXT*   B     RETREASN      RETURN WITH R15
         SPACE 1
RETREASN L     R13,4(,R13)        GET CALLER'S SAVE AREA
         L     R14,12(,R13)       LOAD RETURN
         LM    R2,R12,28(R13)     RETURN R15, R0, AND R1
         BR    R14                RETURN TO CALLER
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*  END REQUESTED :                                                    *
*    1) FREE CELL POOL, IF ANY GOTTEN                                 *
*    2) FREE GOTTEN WORK AREA                                         *
*    3) RETURN                                                        *
*                                                                     *
*---------------------------------------------------------------------*
DOEND    TM    PROFLAGS,PFPOOL    WAS THERE A CELL POOL ?
         BZ    DOENDPL       NO
         L     R0,MYPOOLID   GET CELL POOL ID
         CPOOL DELETE,CPID=(0)   FREE ALL OF IT
         NI    PROFLAGS,255-PFPOOL  SHOW POOL RESET
         SPACE 1
DOENDPL  LA    R3,SAVEEND-SAVE
         LR    R1,R13        SAVE CURRENT WORK AREA
         L     R13,4(,R13)   GET CALLER'S SAVE AREA
         STORAGE RELEASE,LENGTH=(R3),ADDR=(1)  RELEASE WORK AREA
         XC    ROTHEAD(ROTWORK-ROTHEAD+L'ROTWORK),ROTHEAD       GP05135
         LM    R14,R12,12(R13)  RELOAD EVERYTHING
         SR    R15,R15       SET GOOD RETURN
         SR    R0,R0         NO REASON
         SR    R1,R1         NO RECORD
         BR    R14           AND RETURN
         POP   USING
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*  MOSTLY COMMON CODE FOR:                                            *
*    1) LOC  - LOCATE A KEY; RETURN R1=0 IF NOT FOUND                 *
*    2) FIND - LOCATE AN ENTRY (CONTAINING KEY); R1=0 IF NOT FOUND    *
*    3) GET  - LOCATE AN ENTRY; BUILD AN ENTRY IF NOT FOUND           *
*              RETURNS RECORD ADDRESS IN R1; CALLER MUST COMPLETE     *
*    4) UPD  - LOCATE AN ENTRY; REPLACE FROM USER'S RECORD            *
*                                                                     *
*  THE USER MAY PASS THE KEY OR RECORD ADDRESS AS THE 3RD CALL PARM.  *
*  WHEN OMITTED OR ZERO, THE SERVTREE EXPANDED KEY AREA IS USED       *
*                                                                     *
*---------------------------------------------------------------------*
DOLOC    LTR   R6,R6         DID THE USER PASS THE KEY ADDRESS ?
         BZ    DOFIND        NO; TREAT AS FIND FROM ROOT/REC AREA
         SH    R6,KEYOFF     FAKE IT TO LOOK LIKE RECORD
DOFIND   MVI   REQUEST,RQFIND  SHOW FIND ONLY
         OI    PROFLAGS,PFFIND  ALSO SET FLAG
         B     GOLOOK        LOOK FOR RECORD
         SPACE 1
DOGET    MVI   REQUEST,RQGET SHOW GET/BUILD A RECORD
         B     GOLOOK        LOOK FOR RECORD
         SPACE 1
DOUPDATE MVI   REQUEST,RQUPD  SHOW UPDATE ONLY
*NEXT*   B     GOLOOK        LOOK FOR RECORD
         SPACE 1
GOLOOK   LTR   R10,R6        DID THE USER PASS A RECORD ADDRESS?
         BNZ   GOLOOKDF      YES
         LA    R6,ROTREC     ELSE USE THE ONE IN THE PARAMETER AREA
         LR    R10,R6        COPY FOR KEY ADDRESS               GP05196
GOLOOKDF AH    R10,KEYOFF    POINT TO THE KEY
         BAS   R14,KEYLOOK   LOCATE THE RECORD
         LTR   R2,R1         WAS A RECORD FOUND ?
         BZ    RETFOUR       NO; RETURN NOT FOUND
         LA    R1,NODEREC-NODESECT(,R1)  SKIP NODE HEADER
         IC    R0,REQUEST    GET THE REQUEST
         BIX   VAL=(R0),     BRANCH BY TYPE                            *
               LOC=(RETINR1,     FIND ONLY                             *
               GTGET,            GET OR BUILD A RECORD                 *
               GTUPD)            UPDATE THE RECORD
         SPACE 1
GTGET    OI    PROFLAGS,PFLTREE  SHOW GET LAST
         NI    PROFLAGS,255-PFLLIST-PFLSTND  RESET LIST MODE
         B     RETINR1       RETURN RECORD ADDRESS
         SPACE 1
GTUPD    OI    PROFLAGS,PFLTREE  SHOW GET LAST
         NI    PROFLAGS,255-PFLLIST-PFLSTND  RESET LIST MODE
         LH    R3,RECLEN     GET RECORD
         LR    R14,R6        USER'S RECORD AREA
         LR    R15,R3        AND LENGTH
         LR    R2,R1         DEST. IS RECORD ADDRESS            GP03264
         MVCL  R2,R14        UPDATE MY RECORD FROM USER'S AREA
         B     RETINR1       RETURN RECORD ADDRESS
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*  CONTROL CODE FOR SEQUENTIAL LOOKUP:                                *
*    1) LIST - STARTS A NEW LIST REQUEST                              *
*    2) NEXT - WHEN PFLSTND SET, RETURNS CODE 8 AND 0 ADDRESS         *
*              WHEN PFLLIST NOT SET, STARTS A NEW LIST REQUEST        *
*              ELSE GETS ANOTHER ENTRY, OR SETS R1 TO 0               *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
DONEXT   TM    PROFLAGS,PFLSTND   PRIOR END OF LIST ?
         BNZ   RETEIGHT           YES; TOO BAD
         L     R4,ROT@REC         GET ADDRESS OF LAST RECORD
         TM    PROFLAGS,PFLLIST   DID WE START SEQUENTIAL RETRIEVAL ?
         BNZ   GOLIST             YES
         SPACE 1
DOLIST   NI    PROFLAGS,255-PFLTREE-PFLSTND  NOT IN TREE MODE
         OI    PROFLAGS,PFLLIST   SHOW LIST MODE
         SR    R4,R4              SIGNAL FIRST ENTRY
*NEXT*   B     GOLIST
         SPACE 1
GOLIST   SUBCALL SEQLOOK          GET FIRST/NEXT SEQUENTIAL RECORD
         ST    R1,ROT@REC         RETURN AND SAVE RECORD ADDRESS
         LTR   R2,R1              ANY ?
         BZ    GOLISTND           NO MORE
         LH    R3,RECLEN     GET RECORD
         LA    R14,ROTREC    USER'S RECORD AREA
         LR    R15,R3        AND LENGTH
         MVCL  R14,R2        MAKE A COPY IN USER'S AREA
         B     RETINR1       AND RETURN
GOLISTND OI    PROFLAGS,PFLSTND   SHOW END OF LIST
         B     RETFOUR       AND SET WARNING
         SPACE 2
***********************************************************************
**                                                                   **
**  SUBROUTINE TO SEARCH AND UPDATE A BALANCED TREE                  **
**                                                                   **
**  INPUT:  R9 - ROOT OF TREE (MAPPED BY SERVTREE MACRO)             **
**          XXXKEY - SEARCH KEY                                      **
**          XXXFLAG - 0 TO INSERT KEY IF IT DOESN'T EXIST            **
**          XXXFLAG - XXXFGRD TO RETURN 0 OR LEAF ADDRESS            **
**  OUTPUT: R1 - 0 OR NEW/REQUESTED LEAF ADDRESS.                    **
**          FOR NEW LEAF, DATA AFTER KEY ARE ZEROED.                 **
**                                                                   **
**  ADAPTED FROM D.E. KNUTH 'THE ART OF PROGRAMMING' VOL 3, SECT 6.2 **
**                                                                   **
***********************************************************************
         PUSH  USING
KEYLOOK  STM   R0,R15,SUBSAVE1  RETURN MATCHED NODE IN R1       GP05013
PTRP     EQU   R4
PTRQ     EQU   R5
PTRR     EQU   R6
PTRS     EQU   R7
PTRT     EQU   R8
         LA    PTRT,ROTHEAD  POINT TO (PHONY) TOP
*OLD*NP  USING NODESECT,PTRP
*OLD*NQ  USING NODESECT,PTRQ
*OLD*NR  USING NODESECT,PTRR
*OLD*NS  USING NODESECT,PTRS
*OLD*NT  USING NODESECT,PTRT
         USING PODESECT,PTRP
         USING QODESECT,PTRQ
         USING RODESECT,PTRR
         USING SODESECT,PTRS
         USING TODESECT,PTRT
         ICM   PTRP,15,TODEMORE  GET RIGHT LINK
         LR    PTRS,PTRP     ALSO SET
         BNZ   STEP2         NOT FIRST TIME - PROCESS NORMALLY
         TM    PROFLAGS,PFFIND     READ-ONLY MODE?
         BNZ   KEYLESS       YES; RETURN NO MATCH
         SUBCALL GETNODE     GET A NEW NODE; RETURN ADDRESS IN R1
         LR    PTRP,R1       USE AS P
         ST    PTRP,TODEMORE  SET ROOT POINTER
         B     KEYLOOX       AND EXIT
         SPACE 1
STEP2    EX    0,EXNPCLC     TEST KEY
         BH    STEP4         HIGH - DO ON RIGHT
         BL    STEP3         LOW - DO ON LEFT
         LR    R1,PTRP       RETURN THIS NODE TO USER
         B     KEYLOOX       MATCH - RETURN FOR ANALYSIS
         SPACE 1
STEP3    ICM   PTRQ,15,PODELESS  GET LEFT POINTER
         BNZ   STEP3A        NON-ZERO
         TM    PROFLAGS,PFFIND     READ-ONLY MODE?
         BNZ   KEYLESS       YES; RETURN NO MATCH
         SUBCALL GETNODE     GET A NEW NODE
         LR    PTRQ,R1       SET AS Q
         ST    PTRQ,PODELESS ADD NEW BRANCH
         B     STEP5         JOIN COMMON
STEP3A   CLI   QODEDELT,0  BALANCED?
         BE    STEP3B        YES
         LR    PTRT,PTRP     SWAP AROUND
         LR    PTRS,PTRQ
STEP3B   LR    PTRP,PTRQ
         B     STEP2         TRY ON LOWER LEVEL
         SPACE 1
STEP4    ICM   PTRQ,15,PODEMORE  GET LEFT POINTER
         BNZ   STEP3A        NON-ZERO; GO DOWN A LEVEL
         TM    PROFLAGS,PFFIND     READ-ONLY MODE?
         BNZ   KEYLESS       YES; RETURN NO MATCH
         SUBCALL GETNODE     GET A NEW NODE
         LR    PTRQ,R1       SET AS Q
         ST    PTRQ,PODEMORE ADD NEW BRANCH
         B     STEP5         JOIN COMMON
         SPACE 1
*  NOTE: R1 HAS NODE ADDRESS FOR USER - LEAVE INTACT UNTIL KEYLOOX
STEP5    DS    0H            DONE BY GETNODE SUBROUTINE
         SPACE 1
*  NEW NODE CREATED - NOW SEE ABOUT BALANCING THIS THING
*
STEP6    LA    R15,SODELESS   POINT LEFT
         EX    0,EXNSCLC     TEST KEY
         BL    STEP6C
         LA    R15,SODEMORE
STEP6C   L     PTRP,0(R15)   LOAD LEFT OR RIGHT
         LTR   PTRR,PTRP                                        GP03149
         BZ    STEP7         ***FIX FOR 0C4?***                 GP03149
STEP6LUP EX    0,EXNPCLC     TEST KEY
         BE    STEP7
         BH    STEP6LH
         MVI   PODEDELT,X'FF'  (-1)
         L     PTRP,PODELESS
         B     STEP6LUP
STEP6LH  MVI   PODEDELT,1
         L     PTRP,PODEMORE
         B     STEP6LUP
         SPACE 1
STEP7    LA    R0,1
         LA    R15,NODEMORE-NODEBASE  INDEX TO NODEMORE
         EX    0,EXNSCLC     TEST KEY
         BNL   STEP7ST
         LNR   R0,R0
         LA    R15,NODELESS-NODEBASE  INDEX TO NODELESS
STEP7ST  STH   R0,DELTA      SAVE DELTA
         STH   R15,DELT2     SAVE OFFSET
         LCR   R0,R0         COMPLIMENT IT
         STH   R0,CURLA      SAVE THE COMPLEMENT
         LA    R0,NODEMORE-NODEBASE+NODELESS-NODEBASE  SUM
         SR    R0,R15        COMPLEMENTARY OFFSET
         STH   R0,COMP2      SAVE COMPLEMENTED DELTA
         SPACE 1
         CLI   SODEDELT,0  B(S)=0 ?
         BE    STEP7I        YES
         CLC   SODEDELT,CURLA+L'CURLA-L'NODEDELT  =-1
         BE    STEP7II       NEGATIVE
         B     STEP7III      POSITIVE
STEP7I   MVC   SODEDELT,DELTA+L'DELTA-L'NODEDELT  SET A
         LA    R15,1
         A     R15,ROTHEAD+NODELESS-NODESECT   UP COUNT
         ST    R15,ROTHEAD+NODELESS-NODESECT   UP COUNT
         B     KEYLOOX       AND EXIT
         SPACE 1
STEP7II  MVI   SODEDELT,0  BALANCED
         B     KEYLOOX       AND EXIT
         SPACE 1
STEP7III CLC   RODEDELT,DELTA+L'DELTA-L'NODEDELT  TEST A
         BE    STEP8
         CLC   RODEDELT,CURLA+L'CURLA-L'NODEDELT  TEST -A
         BE    STEP9
         EX    0,*           SHOULD NEVER GET HERE?             GP03149
         SPACE 1
STEP8    LH    R14,COMP2     GET A OFFSET COMPLEMENTED
         LH    R15,DELT2     GET A OFFSET
         LR    PTRP,PTRR
         L     R0,RODEBASE(R14)    LEFT OR RIGHT
         ST    R0,SODEBASE(R15)    UPDATE
         ST    PTRS,RODEBASE(R14)
         MVI   RODEDELT,0
         MVI   SODEDELT,0
         B     STEP10
         SPACE 1
STEP9    LH    R14,COMP2     GET A OFFSET COMPLEMENTED
         LH    R15,DELT2     GET A OFFSET
         L     PTRP,RODEBASE(R14)
         L     R0,PODEBASE(R15)
         ST    R0,RODEBASE(R14)
         ST    PTRR,PODEBASE(R15)
         L     R0,PODEBASE(R14)
         ST    R0,SODEBASE(R15)
         ST    PTRS,PODEBASE(R14)
         SPACE 1
         MVI   RODEDELT,0
         MVI   SODEDELT,0
         SPACE 1
         CLC   PODEDELT,DELTA+L'DELTA-L'NODEDELT  =A ?
         BE    STEP9A
         CLC   PODEDELT,CURLA+L'CURLA-L'NODEDELT  =A ?
         BNE   STEP9X
STEP9C   MVC   RODEDELT,DELTA+L'DELTA-L'NODEDELT  =A ?
         B     STEP9X
STEP9A   MVC   SODEDELT,CURLA+L'CURLA-L'NODEDELT  =A ?
STEP9X   MVI   PODEDELT,0
         SPACE 1
STEP10   C     PTRS,TODEMORE
         BNE   STEP10B
STEP10A  ST    PTRP,TODEMORE
         B     KEYLOOX
STEP10B  ST    PTRP,TODELESS
         B     KEYLOOX
         SPACE 1
PATPCLC  CLC   ROTREC-ROTREC(0,R10),PODEREC
PATSCLC  CLC   ROTREC-ROTREC(0,R10),SODEREC
         SPACE 1
KEYLESS  SR    R1,R1         RETURN LEAF NOT FOUND
         SPACE 1
KEYLOOX  LM   R2,R14,SUBSAVE1+2*4  RESTORE MOST                 GP05013
         BR   R14            RETURN                             GP05013
         POP   USING
         SPACE 2
***********************************************************************
**                                                                   **
**  SEQLOOK : SUBROUTINE TO RETURN NODES IN SEQUENCE                 **
**     USES TREE BUILT BY KEYLOOK                                    **
**                                                                   **
**  INPUT:  R4 FROM PREVIOUS RETURN, OR 0 TO BEGIN LIST              **
**  OUTPUT: R1 POINTS TO CURRENT NODE, OR 0 WHEN DONE                **
**                                                                   **
**  REQUIRES 4 WORD SAVE AREA                                        **
**                                                                   **
***********************************************************************
         PUSH  USING
SEQLOOK  STM   R0,R15,SUBSAVE2  RETURN MATCHED NODE IN R1       GP05013
*OLD*NP  USING NODESECT,PTRP
*OLD*NQ  USING NODESECT,PTRQ
         USING PODESECT,PTRP
         USING QODESECT,PTRQ
         LTR   R4,R4         START LIST FROM TOP?
         BNZ   SEQCONT       NO; CONTINUE
         LA    PTRS,NODESTAK  POINT TO TOP OF STACK
         XC    0(8,PTRS),0(PTRS)  CLEAR FIRST NODE
         LA    PTRS,4(,PTRS) STACK EMPTY
         LA    PTRP,ROTHEAD   POINT TO (PHONY) TOP
         ICM   PTRP,15,PODEMORE  GET RIGHT LINK
         BZ    SEQLOOX       TREE IS EMPTY
         SPACE 1
SEQLDOWN ICM   PTRQ,15,PODELESS  IS THERE A LEFT BRANCH ?
         BZ    SEQLNLFT      NO; PRESENT THIS ONE TO USER
         ST    PTRP,0(,PTRS) STACK THIS NODE
         XC    4(4,PTRS),4(PTRS)  CLEAR FOR DEBUGGING
         LA    PTRS,4(,PTRS)  PUSH THE STACK
SEQRDOWN LR    PTRP,PTRQ     SWAP NODES
         B     SEQLDOWN
         SPACE 1
SEQCONT  LM    R4,R8,LISTSAVE RESTORE OLD REGISTERS
         ICM   PTRQ,15,PODEMORE  IS THERE A RIGHT BRANCH?
         BNZ   SEQRDOWN      YES; DOWN IT
SEQPOP   SH    PTRS,=H'4'    POP THE STACK
         LR    PTRQ,PTRP     SAVE OLD ADDRESS
         ICM   PTRP,15,0(PTRS)  GET HIGHER NODE
         BZ    SEQLOOX       QUIT IF ON TOP
         C     PTRQ,PODEMORE  DID WE DESCEND BY RIGHT NODE?
         BE    SEQPOP        YES; POP IT AGAIN
         B     SEQLOOX       ELSE PROCESS KEY FOR THIS NODE
         SPACE 1
SEQLNLFT NOP   0             RETURN THIS NODE
         SPACE 1
SEQLOOX  STM   R4,R8,LISTSAVE SAVE FOR RESTART
         LTR   R1,R4         ALL DONE ?
         BZ    *+8           YES; RETURN ZERO
         LA    R1,NODEREC-NODESECT(,R4)  RETURN RECORD ADDRESS
         LM   R2,R14,SUBSAVE2+2*4  RESTORE MOST                 GP05013
         BR   R14            RETURN                             GP05013
         POP   USING
         SPACE 2
***********************************************************************
**                                                                   **
**  GETNODE : SUBROUTINE TO OBTAIN STORAGE FOR ONE NODE.             **
**     SPACE IS CLEARED TO ZERO, AND KEY IS INSERTED.                **
**                                                                   **
**  LOCATION IS RETURNED IN R1                                       **
**                                                                   **
***********************************************************************
         PUSH  USING
GETNODE  STM   R0,R15,SUBSAVE3  R1 UPDATED WITH NEW INFORMATION GP05013
         TM    PROFLAGS,PFPOOL  FIRST TIME HERE ?
         BNZ   GETNFILL      NO
         SPACE 1
         L     R4,CELLSIZE   GET CELL SIZE
         ICM   R5,15,ROTCOUNT  ESTIMATED CELL NUMBER
         BNZ   GETNBILD      PROCEED
         L     R5,=F'1000'   DEFAULT TO ONE THOUSAND (?)
GETNBILD CPOOL BUILD,PCELLCT=(R5),SCELLCT=(R5),CSIZE=(R4),             *
               CPID=MYPOOLID,MF=(E,MYCELL)
         OI    PROFLAGS,PFPOOL  FIRST TIME DONE                 GP03150
         SPACE 1
GETNFILL CPOOL GET,CPID=MYPOOLID,REGS=SAVE   GET A CELL
         L     R3,CELLSIZE   GET CELL SIZE AGAIN
         LR    R2,R1         COPY CELL ADDRESS
         SR    R15,R15       CLEAR FOR MVCL
         MVCL  R2,R14        CLEAR IT
         USING NODESECT,R1
         LH    R15,KEYLEN    GET KEY LENGTH
         LH    R2,KEYOFF     GET KEY OFFSET
         LA    R14,NODEREC(R2)  POINT TO KEY IN RECORD
         BCTR  R15,0         LENGTH FOR EXECUTE
         EX    R15,EXKEYMVC  MOVE KEY TO RECORD
         OI    PROFLAGS,PFNEW     SHOW NEW CELL ASSIGNED        GP09157
         LM    R2,R14,SUBSAVE3+2*4  RESTORE MOST                GP05013
         BR    R14            RETURN                            GP05013
         SPACE 1
EXKEYMVC MVC   0(0,R14),0(R10)  MOVE REQUESTED KEY +
         POP   USING
         SPACE 1
         LTORG ,                                                GP15145
         SPACE 1
**** ARBITRARY DEFINITION SUPPLIED FOR CLEAN ASSEMBLY
ROOTSECT DSECT ,
         SERVTREE PFX=ROT,RECLEN=32,KEYLEN=4,KEYOFF=0 (PATTERN ONLY)
         SPACE 1
         NODEF PFX=NODE      MAIN DEFINITIONS
         NODEF PFX=PODE      SECONDARIES
         NODEF PFX=QODE      SECONDARIES
         NODEF PFX=RODE      SECONDARIES
         NODEF PFX=SODE      SECONDARIES
         NODEF PFX=TODE      SECONDARIES
         SPACE 1
SAVE     DSECT ,
         DS    18A           GENERAL SAVE AREA
LISTSAVE DS    8A            SAVE AREA FOR LIST BUILDING
SUBSAVE1 DS    16A           IN LIEU OF BAKR/PR                 GP05013
SUBSAVE2 DS    16A           IN LIEU OF BAKR/PR                 GP05013
SUBSAVE3 DS    16A           IN LIEU OF BAKR/PR                 GP05013
DB       DS    D             CONVERSION WORK AREA
DB2      DS    D             CONVERSION WORK AREA
BINDCLC  EQU   DB2,6,C'I'    DEFINE DYNAMIC INSTRUCTION
EXNPCLC  CLC   ROTREC(0),NODEREC-NODEREC
EXNSCLC  CLC   ROTREC(0),NODEREC-NODEREC
CELLSIZE DS    F             CELL SIZE
MYPOOLID DS    F             CPOOL TOKEN
KEYOFF   DS    H             KEY OFFSET
KEYLEN   DS    H             KEY LENGTH
RECLEN   DS    H             RECORD LENGTH
DELTA    DS    H             WORKING DELTA
DELT2    DS    H               AS OFFSET
CURLA    DS    H             COMPLEMENTARY DELTA
COMP2    DS    H               AS OFFSET
         SPACE 1
PROFLAGS DC    X'00'         PROCESSING FLAGS
PFLTREE  EQU   X'80'           LAST REQUEST WAS TREE (GET/FIND/UPD)
PFLLIST  EQU   X'40'           LAST REQUEST WAS LIST (LIST/NEXT)
PFLSTND  EQU   X'20'           LIST EXHAUSTED
PFFIND   EQU   X'10'           KEY LOOK - FIND ONLY
PFNEW    EQU   X'04'           KEY LOOK - NEW CELL BUILT        GP09157
PFPOOL   EQU   X'02'           CELL POOL BUILT
PFINIT   EQU   X'01'           ENTRY CHECKING DONE
         SPACE 1
REQUEST  DC    X'00'         CURRENT REQUEST
RQFIND   EQU   0               FIND A RECORD (RETURNS 0 OR ADDRESS)
RQGET    EQU   1               LOCATE OR BUILD A RECORD
RQUPD    EQU   2               UPDATE SPECIFIED RECORD
RQLIST   EQU   3               LIST FIRST/NEXT RECORD
         SPACE 1
MYCELL   CPOOL BUILD,MF=L    SPACE FOR CELL POOL BUILD REQUEST
         SPACE 1
NODESTAK DS    25A           NODE PROCESSING STACK
SAVEEND  EQU   *
         SPACE 1
         END   ,
