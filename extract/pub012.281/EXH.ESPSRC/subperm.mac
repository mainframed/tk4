SUBPERM  TITLE 'S U B P E R M  ***  PERMUTE LIST OF N ELEMENTS'
         COPY  OPTIONGB                                          90364
         SPACE 1                                                 90364
         SYSPARM LIST=YES                                        90364
         EJECT ,                                                 90364
***********************************************************************
**                                                                   **
**   PERMUTATION SUBROUTINE                                          **
**                                                                   **
**   NOTE THAT THIS VERSION IS **NOT** REENTRANT, AND **NOT**        **
**   REFRESHABLE.                                                    **
**                                                                   **
***********************************************************************
**                                                                   **
**  ORIGINAL CODE COPYRIGHT  19??  ERIC D. POSTPISCHIL               **
**                                                                   **
***********************************************************************
         PRINT &PRTSOR                                           90364
* #ifndef edp_org_Permutation_h
* #define edp_org_Permutation_h
*
* #if _MSC_VER > 1000
* #pragma once // Compiler need not even open file more than once.
* #endif // _MSC_VER > 1000
*
* namespace edp_org {
*
*
* /* Permutation<N> enumerates a sequence of permutations of the
*  integers in ª0, N).  The sequence is not generally
*  lexicographic.
*
*  The sequence is initialized at construction.
*
*  objectªi³ returns the i-th element of the current permutation.
*
*  ++object advances to the next permutation.
*
*  object.more() returns true if there are more permutations.
*  When it is false, the object does not currently represent a
*  valid permutation.  (objectªi³ is undefined.)
* */
* template<int N> class Permutation {
* private:
*  char elementªN³, selectorªN-1³;
*
* public:
*  // Constructor initializes a permutation to 0, 1, 2, 3,...
*  Permutation() {
*   for (int i = 0; i < N-1; i++)
*    elementªi³ = selectorªi³ = i;
*   elementªN-1³ = N-1;
*  }
*
*  // Subscripts provide read access to permutation elements.
*  char operatorª³ (char i) const { return elementªi³; }
*
*  // return indication of whether there are more permutations in seque
*  bool more() const {
*   return selectorª0³ < N;
*  }
*
*  // Operator ++ advances to the next permutation.
*  Permutation &operator++() {
*   /* To enumerate permutations, we keep an auxiliary array of
*    selectors.  The principle idea is that selectorª0³ is used
*    to select from elements 0 to N-1, selectorª1³ is used to
*    select from elements 1 to N-2, and so on.  At each point,
*    previous selectors have chosen some elements, and there are
*    fewer elements remain to select from.  As each selection is
*    made, the corresponding element is moved into elementªi³,
*    and the former contents of elementªi³ are exchanged with that
*    source, to be permuted with remaining elements by later
*    selectors.
*
*    Thus, selectorªi³ cycles through values from i to N-1.
*    Every time it changes, we undo its previous swap and do a
*    new swap.  This actually amounts to a three-element rotation;
*    that is, { swap(a, b); swap(b, c); } is equivalent to
*    { t = a; a = b; b = c; c = t; }.  When selectorªi³ passes
*    N-1, we reset it to i and undo its last swap.  We do not need
*    to do a new swap, because the initial value represents the null
*    swap, that is, swap(elementªi³, elementªi³).
*
*    Our progression through selector values is very much like an
*    odometer.  We start at the right and seek to increment each
*    value.  If we can increment it, we are done.  Otherwise, we
*    reset it, move to the left, and repeat.  The only difference
*    from an odometer is that we reset to i instead of 0.
*   */
*   for (int i(N-2); 0 <= i; --i)
*   {
*    // Retrieve value we originally had in elementªi³.
*    char t(elementªselectorªi³³);
*
*    // Restore original value of elementªselectorªi³³.
*    elementªselectorªi³³ = elementªi³;
*
*    if (selectorªi³ < N-1)
*    {
*     // Move new value to elementªi³.
*     elementªi³ = elementª++selectorªi³³;
*
*     // Move original value to swapped location.
*     elementªselectorªi³³ = t;
*
*     return *this;
*    }
*    else
*     // Restore original value of elementªi³ and reset selector.
*     elementªselectorªi³ = i³ = t;
*   }
*   // Mark sequence exhausted.
*   selectorª0³ = N;
*   return *this;
*  }
* };
*
*
* } // edp_org namespace
*
* #endif // edp_org_Permutation_h
***********************************************************************
**                                                                   **
**   GET PERMUTATIONS                                                **
**                                                                   **
**   CALL SUBPERM,('INI',FINT) INITIALIZE; FINT 32-BIT INT 1< <256   **
**   CALL SUBPERM,('PER',VECT) NEXT PERMUTATION RETURNED IN VECTOR   **
**                             OR R15=4 WHEN DONE                    **
**   CALL SUBPERM,('END')      RELEASE STORAGE, ETC.                 **
**                                                                   **
***********************************************************************
SUBPERM  PGMHEAD ZERO15,AM=ANY,RM=ANY,PARM=R9,SAVE=LOCSAVE
         LM    R7,R8,0(R9)   GET PARAMETER LIST
         CLC   =C'PER',0(R7)   REQUEST PERMUTATION ?
         BE    DOPERM        YES
         CLC   =C'END',0(R7)   FINAL ?
         BE    DOPEND        YES
         CLC   =C'INI',0(R7)   INITIALIZE
         BE    DOPINI        YES
         MVI   RETCODE+L'RETCODE-1,20  SET PARM LIST ERROR
         B     SUBPEXIT
         SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
*  INITIALIZE FOR PROCESSING                                          *
*                                                                     *
*---------------------------------------------------------------------*
DOPINI   L     R3,0(,R8)     GET REQUESTED N
         CH    R3,=H'255'    SUPPORTED ?
         BH    SUBERR16      NO; INVALID
         STC   R3,MAXNUM     SAVE REQUESTED MAXIMUM
         SH    R3,=H'1'
         STH   R3,MAXDEC1    SAVE IT
         SH    R3,=H'1'
         STH   R3,MAXDEC2    SAVE IT
         BNM   DOPINIT2      VALID
SUBERR16 MVI   RETCODE+L'RETCODE-1,16 SET PARAMETER ERROR
         B     SUBPEXIT
         SPACE 1
DOPINIT2 MVC   ELEMENT,PATARRAY  INITIALIZE
         MVC   SELECTOR,ELEMENT  INITIALIZE SCANNER
         MVI   PROFLAGS,PFONCE   SET INITIALIZATION FLAG
         B     SUBPEXIT      RETURN
         SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
*   GET THE NEXT PERMUTATION; RETURN VECTOR IN USER'S AREA            *
*   R15=0  VALUE RETURNED                                             *
*   R15=4  VALUE UNDEFINED - PERMUTATIONS EXHAUSTED                   *
*                                                                     *
*---------------------------------------------------------------------*
DOPERM   CLC   SELECTOR(1),MAXNUM  DONE ?
         BNL   SUBRET4       YES; SET END CODE
         TM    PROFLAGS,PFONCE  FIRST TIME ?
         BNZ   SUBRET0       YES - RETURN UNMODIFIED ONCE
*
*    Our progression through selector values is very much like an
*    odometer.  We start at the right and seek to increment each
*    value.  If we can increment it, we are done.  Otherwise, we
*    reset it, move to the left, and repeat.  The only difference
*    from an odometer is that we reset to i instead of 0.
*   */
*   for (int i(N-2); 0 <= i; --i)
         SR    R6,R6
         SR    R5,R5
         SR    R4,R4
         LH    R3,MAXDEC2    LOAD LOOP INDEX
*   {
*    // Retrieve value we originally had in elementªi³.
*    char t(elementªselectorªi³³);
DOPERML  IC    R4,SELECTOR(R3)  SELECTOR(I)
         IC    R6,ELEMENT(R4)   ELEMENT(SELECTOR(I))
*
*    // Restore original value of elementªselectorªi³³.
*    elementªselectorªi³³ = elementªi³;
         IC    R5,ELEMENT(R3)   ELEMENT(I)
         STC   R5,ELEMENT(R4)   -> ELEMENT(SELECTOR(I))
*
*    if (selectorªi³ < N-1)
         CH    R4,MAXDEC1    LAST ELEMENT?
         BNL   DOPERMR
*    {
*     // Move new value to elementªi³.
*     elementªi³ = elementª++selectorªi³³;
         LA    R4,1(,R4)     ++SELECTOR(I)
         STC   R4,SELECTOR(R3)  -> SELECTOR(I)
         IC    R5,ELEMENT(R4)   ELEMENT(++SELECTOR(I))
         STC   R5,ELEMENT(R3)   -> ELEMENT(I)
*
*     // Move original value to swapped location.
*     elementªselectorªi³³ = t;
         STC   R6,ELEMENT(R4)   -> ELEMENT(SELECTOR(I))
*
*     return *this;
*    }
SUBRET0  NI    PROFLAGS,255-PFONCE  SHOW FIRST TIME DONE
         LH    R15,MAXDEC1   VECTOR LENGTH - 1
         EX    R15,EXMV2USR  RETURN TO USER
         B     SUBPEXIT
EXMV2USR MVC   0(0,R8),ELEMENT  RETURN RESULT TO USER
         SPACE 1
*    else
*     // Restore original value of elementªi³ and reset selector.
*     elementªselectorªi³ = i³ = t;
DOPERMR  STC   R3,SELECTOR(R3)  -> SELECTOR(I) = I
         STC   R6,ELEMENT(R3)   -> SELECTOR(ELEMENT(I))
         BCTR  R3,0          GET PRIOR VALUE
         LTR   R3,R3
         BNM   DOPERML       NOT DONE YET
*
*   // Mark sequence exhausted.
*   selectorª0³ = N;
*   return *this;
         MVC   SELECTOR(1),MAXNUM  SET END FLAG
SUBRET4  MVI   RETCODE+L'RETCODE-1,4  SET END OF PERMUTATIONS
         B     SUBPEXIT
         SPACE 1
*---------------------------------------------------------------------*
*  TERMINATE AFTER CLEAN-UP                                           *
*---------------------------------------------------------------------*
DOPEND   MVC   SELECTOR(1),MAXNUM  SET END FLAG
         SPACE 2
*---------------------------------------------------------------------*
*  EXIT WITH APPRPRIATE RETURN CODE                                   *
*---------------------------------------------------------------------*
SUBPEXIT L     R9,RETCODE
         PGMEXIT RC=(R9)
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
* ===--->>> NON-REENTRANT STORAGE <<<---===                           *
*                                                                     *
*---------------------------------------------------------------------*
ELEMENT  DC    XL256'0'      PERMUTED VALUES
SELECTOR DC    XL256'0'      SCANNER
MAXNUM   DC    X'0'          REQUESTED MAXIMUM
PROFLAGS DC    X'00'         PROCESSING FLAGS
PFONCE   EQU   X'01'           RETURN UNPERMUTED VALUE ONCE
MAXDEC1  DC    H'0'          MAXIMUM - 1
MAXDEC2  DC    H'0'          MAXIMUM - 2
PATARRAY DC    256AL1(*-PATARRAY)  0-255
         SPACE 2
LOCSAVE  DC    18F'0'        SAVE/WORK AREA
RETCODE  DC    F'0'          RETURN CODE
SAVEEND  EQU   *             END OF SAVE/WORK AREA
         END   ,
