TICTACTO TITLE 'T I C - T A C - TOE  ***  STAND-ALONE GAME'
**********************************************************************
* 06/12/2006 Rafa
*
* saGAMES V1.0
*
* REQUIRES:
*          A 3270 DEVICE
*          S/370 ARCHITECTURE
*
* RUNS IN:
*          BASIC-CONTROL MODE
**********************************************************************
* saGAMES - A stand-alone program with simple games.
* Copyright (C) 2006 Rafael Pereira Tercero (rptv2003@yahoo.com)
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
**********************************************************************
         TITLE 'SAGAMES V1.0'
*
         USING IPLPSW,R11,R12,R13      BASE REGS FOR PROGRAM
*
*********************************************************************
* BOARD CELLS NUMBERING
*
*             0 | 1 | 2
*            ---+---+---
*             3 | 4 | 5
*            ---+---+---
*             6 | 7 | 8
*
*********************************************************************
* CONTENTS OF IPL PSW:
*     ALL INTERRUPTIONS DISABLED, EXCEPT MACHINE-CHECK
*     BC MODE
*     INTERRUPTION CODE AREA CONTAINS CCUU OF IPL DEVICE
*     FIRST INSTRUCCION TO EXECUTE AT ADDRESS "START"
*********************************************************************
IPLPSW   DC    X'0004'                 IPLPSW (DISABLED)
         DS    2X                      KEEP IPL DEVICE
         DC    A(START)                ENTRY-POINT ADDRESS IN PSW
*
*********************************************************************
* LOCATIONS FIXED BY THE S/370 ARCHITECTURE
*********************************************************************
         ORG IPLPSW+24
EXTOPSW  DS    D                       EXTERNAL OLD PSW
SVCOPSW  DS    D                       SVC OLD PSW
PRGOPSW  DS    D                       PROGRAM OLD PSW
MCKOPSW  DS    D                       MACHINE-CHECK OLD PSW
IOOPSW   DS    D                       I/O OLD PSW
CSW      DS    D                       CHANNEL-STATUS WORD
CAW      DS    F                       CHANNEL-ADDRESS WORD
         ORG IPLPSW+80
INTTIMER DS    F                       INTERVAL TIMER
TRCTBL   DS    F                       TRACE-TABLE DESIGNATION
EXTNPSW  DS    D                       EXTERNAL NEW PSW
SVCNPSW  DS    D                       SVC NEW PSW
PRGNPSW  DS    D                       PROGRAM NEW PSW
MCKNPSW  DS    D                       MACHINE-CHECK NEW PSW
IONPSW   DS    D                       I/O NEW PSW
EXTPRM   DS    F                       EXT-INT. PARM FOR SERVICE SIG.
*
*********************************************************************
* ENTRY POINT
*********************************************************************
         ORG IPLPSW+1024
START    LM    R0,R15,ZERO16           INIT GENERAL REGISTERS
         SR    R11,R11                 INIT. ...
         LA    R12,4095(R11)           ... BASE ...
         LA    R12,1(R12)              ... REGISTERS
         LA    R13,4095(R12)
         LA    R13,1(R13)
         MVC   EXTNPSW(40),EXTPSW      INSTALL NEW PSWs.
*
*********************************************************************
* BRANCH TO ROUTINE FOR CONSOLE IDENTIFICACION (CONIDENT)
*********************************************************************
         XC    UCBCONS,UCBCONS         CLEAR CONSOLE UCB
         LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         BAL   R6,CONIDENT             GO TO IDENTIFY CONSOLE
*
*********************************************************************
* SHOW LICENSE TERMS
*********************************************************************
         LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         BAL   R6,LICSHORT             GO TO SHOW LICENSE-SHORT TERMS
*
*********************************************************************
* SHOW MAIN MENU
*********************************************************************
WMENU00  MVC   REC001MS,WHITES         CLEAR MESSAGE FROM PANEL
*
WMENU00A LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         LA    R1,MENU000              GR1 -> MENU
         BAL   R6,WMENU                WRITE MENU TO CONSOLE
*
         BAL   R6,WAITATTN             WAIT FOR ATTENTION
*
*********************************************************************
* READ OPTION FROM MAIN MENU
*********************************************************************
RMENU00  XC    BUFF01,BUFF01           CLEAR BUFFER
*
         LA    R0,BUFF01L              GR0: LENGTH OF BUFFER
         LA    R1,BUFF01               GR1 -> BUFFER
         LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         SVC   2                       READ RECORD FROM CONSOLE
*
         CLI   BUFF01,X'7D'            AID = ENTER KEY?
         BE    RMENU00A                   YES: CONTINUE
*
         CLI   BUFF01,X'F3'            AID = PF3?
         BE    WMENUX                     YES:  PROCESS IT
*
         CLI   BUFF01,X'7C'            AID = PF12?
         BE    RMENU00B                   YES:  PROCESS IT
*
*         MVC   REC001MS,WHITES         UNKNOWN OPTION ...
         MVC   REC001MS(L'MSG00001),MSG00001   ... SET MESSAGE ...
         B     WMENU00A                ... AND RETRY
*
RMENU00A CLC   BUFF01+6(2),OPT00       INPUT = 0?
         BE    WMENU01                   YES:   PROCESS IT
*
         CLC   BUFF01+6(2),OPT01       INPUT = 1?
         BE    WMENU03                   YES:   PROCESS IT
*
         CLC   BUFF01+6(2),OPTX        INPUT = X?
         BE    WMENUX                    YES:   PROCESS IT
*
         CLC   BUFF01+6(2),OPTXMIN     INPUT = x?
         BE    WMENUX                    YES:   PROCESS IT
*
*         MVC   REC001MS,WHITES         UNKNOWN OPTION ...
         MVC   REC001MS(L'MSG00002),MSG00002   ... SET MESSAGE ...
         B     WMENU00A                ... AND RETRY
*
RMENU00B LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         BAL   R6,LICENSE              GO TO SHOW LICENSE TERMS
         B     WMENU00                 BACK TO THE PREVIOUS MENU
*********************************************************************
* SHOW MENU 1
*********************************************************************
WMENU01  MVC   REC011MS,WHITES         CLEAR MESSAGE FROM PANEL
*
WMENU01A LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         LA    R1,MENU001              GR1 -> MENU
         BAL   R6,WMENU                WRITE MENU TO CONSOLE
*
         BAL   R6,WAITATTN             WAIT FOR ATTENTION
*
*********************************************************************
* READ OPTION FROM MENU 1
*********************************************************************
RMENU01  XC    BUFF01,BUFF01           CLEAR BUFFER
*
         LA    R0,BUFF01L              GR0: LENGTH OF BUFFER
         LA    R1,BUFF01               GR1 -> BUFFER
         LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         SVC   2                       READ RECORD FROM CONSOLE
*
         CLI   BUFF01,X'7D'            AID = ENTER KEY?
         BE    RMENU01A                   YES: CONTINUE
*
         CLI   BUFF01,X'F3'            AID = PF3?
         BE    WMENU00                    YES:  PROCESS IT
*
*         MVC   REC011MS,WHITES         UNKNOWN OPTION ...
         MVC   REC011MS(L'MSG00001),MSG00001   ... SET MESSAGE ...
         B     WMENU01A                ... AND RETRY
*
RMENU01A CLC   BUFF01+6(2),OPT01       INPUT = 1?
         BE    WMENU04                   YES:   PROCESS IT
*
*         MVC   REC011MS,WHITES         UNKNOWN OPTION ...
         MVC   REC011MS(L'MSG00002),MSG00002   ... SET MESSAGE ...
         B     WMENU01A                ... AND RETRY
*
*********************************************************************
* SHOW MENUS 4 & 2
*********************************************************************
WMENU04  MVC   REC041MS,WHITES         CLEAR MESSAGE FROM PANEL
*
         LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         LA    R1,MENU004              GR1 -> MENU
         BAL   R6,WMENU                WRITE MENU TO CONSOLE
*
         XC    UCBCONS,UCBCONS         CLEAR CONSOLE UCB
         LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         BAL   R6,CONIDENT             GO FOR NEW CONSOLE IDENTIFIC.
*
WMENU02  MVC   REC021MS,WHITES         CLEAR MESSAGE FROM PANEL
*
WMENU02A LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         LA    R1,MENU002              GR1 -> MENU
         BAL   R6,WMENU                WRITE MENU TO CONSOLE
*
         BAL   R6,WAITATTN             WAIT FOR ATTENTION
*
*********************************************************************
* READ OPTION FROM MENU 2
*********************************************************************
RMENU02  XC    BUFF01,BUFF01           CLEAR BUFFER
*
         LA    R0,BUFF01L              GR0: LENGTH OF BUFFER
         LA    R1,BUFF01               GR1 -> BUFFER
         LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         SVC   2                       READ RECORD FROM CONSOLE
*
         CLI   BUFF01,X'F3'            AID = PF3?
         BE    WMENU01                    YES:  PROCESS IT
*
*         MVC   REC021MS,WHITES         UNKNOWN OPTION ...
         MVC   REC021MS(L'MSG00001),MSG00001   ... SET MESSAGE ...
         B     WMENU02A                ... AND RETRY
*
*********************************************************************
* SHOW MENU 3 (TTT Main)
*********************************************************************
WMENU03  MVC   REC031MS,WHITES         CLEAR MESSAGE FROM PANEL
*
WMENU03A LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         LA    R1,MENU003              GR1 -> MENU
         BAL   R6,WMENU                WRITE MENU TO CONSOLE
*
         BAL   R6,WAITATTN             WAIT FOR ATTENTION
*
*********************************************************************
* READ OPTION FROM MENU 3
*********************************************************************
RMENU03  XC    BUFF01,BUFF01           CLEAR BUFFER
*
         LA    R0,BUFF01L              GR0: LENGTH OF BUFFER
         LA    R1,BUFF01               GR1 -> BUFFER
         LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         SVC   2                       READ RECORD FROM CONSOLE
*
         CLI   BUFF01,X'7D'            AID = ENTER KEY?
         BE    RMENU03A                   YES: CONTINUE
*
         CLI   BUFF01,X'F3'            AID = PF3?
         BE    WMENU00                    YES:  PROCESS IT
*
*         MVC   REC031MS,WHITES         UNKNOWN OPTION ...
         MVC   REC031MS(L'MSG00001),MSG00001   ... SET MESSAGE ...
         B     WMENU03A                ... AND RETRY
*
RMENU03A CLC   BUFF01+6(2),OPT00       INPUT = 0?
         BE    WMENU06                    YES: PROCESS IT
*
         CLC   BUFF01+6(2),OPT01       INPUT = 1?
         BE    SWPLAYER                   YES: PROCESS IT
*
         CLC   BUFF01+6(2),OPT02       INPUT = 2?
         BE    SWSYMBOL                   YES: PROCESS IT
*
         CLC   BUFF01+6(2),OPT03       INPUT = 3?
         BE    RMENU03B                   YES: PROCESS IT
*
*         MVC   REC031MS,WHITES         UNKNOWN OPTION ...
         MVC   REC031MS(L'MSG00002),MSG00002   ... SET MESSAGE ...
         B     WMENU03A                ... AND RETRY
*
RMENU03Z B     WMENU03
*
RMENU03B BAL   R6,TTTSTART             GO TO START TIC-TAC-TOE
         B     WMENU03
*
SWPLAYER EQU   *                       SWITCH FIRST PLAYER
         CLI   TTTFSTPL,C'H'           FIRST PLAYER = HUMAN?
         BE    SWPLAYMM                  YES: SWITCH TO MACHINE
*
SWPLAYHH MVI   TTTFSTPL,C'H'           SWITCH TO HUMAN
         MVC   REC031A,REC03X01        EDIT MENU "TTT Main"
         B     SWSYMB2                 SWITCH FIRST SYM TO WRITE
*
SWPLAYMM MVI   TTTFSTPL,C'M'           SWITCH TO MACHINE
         MVC   REC031A,REC03X02        EDIT MENU "TTT Main"
         B     SWSYMB2                 SWITCH FIRST SYM TO WRITE
*
SWSYMBOL EQU   *                       SWITCH SYMBOL ASSIGNMENT
         CLI   TTTMSYM,C'O'            SYMBOL FOR MACHINE = O?
         BE    SWSYMBXX                  YES: SWITCH TO X
*
SWSYMBOO MVI   TTTMSYM,C'O'            SET MACHINE SYMBOL TO O
         MVI   TTTHSYM,C'X'            SET HUMAN PLAYER SYMBOL TO X
         MVI   REC031B,C'X'            EDIT MENU ...
         MVI   REC031C,C'O'            ... "TTT Main"
         B     SWSYMB2                 SWITCH FIRST SYM TO WRITE
*
SWSYMBXX MVI   TTTMSYM,C'X'            SET MACHINE SYMBOL TO X
         MVI   TTTHSYM,C'O'            SET HUMAN PLAYER SYMBOL TO O
         MVI   REC031B,C'O'            EDIT MENU ...
         MVI   REC031C,C'X'            ... "TTT Main"
         B     SWSYMB2                 SWITCH FIRST SYM TO WRITE
*
SWSYMB2  EQU   *                        SWITCH FRIST SYM TO WRITE
         CLI   TTTFSTSY,C'O'            FIRST SYMBOL = O?
         BE    SWSYMB2X                  YES: SWITCH TO X
*
SWSYMB2O MVI   TTTFSTSY,C'O'           SET FIRST SYMBOL TO O
         B     RMENU03Z                SWITCH DONE
*
SWSYMB2X MVI   TTTFSTSY,C'X'           SET FIRST SYMBOL TO X
         B     RMENU03Z                SWITCH DONE
*
*********************************************************************
* SHOW MENU 6 (TTT Config)
*********************************************************************
WMENU06  MVC   REC061MS,WHITES         CLEAR MESSAGE FROM PANEL
*
WMENU06A LH    R6,TTTMXDEP             CONVERT ...
         CVD   R6,WMENU06X             ... MAX DEPTH ...
         UNPK  WMENU06Y,WMENU06X+6(2)  ... TO ZONED  ...
         OI    WMENU06Y+2,X'F0'        ... FORMAT    ...
         MVC   REC061LV,WMENU06Y+1     ... AND WRITE IT TO MENU
*
         LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         LA    R1,MENU006              GR1 -> MENU
         BAL   R6,WMENU                WRITE MENU TO CONSOLE
*
         BAL   R6,WAITATTN             WAIT FOR ATTENTION
         B     RMENU06                 GO ON
*
WMENU06X DS    D                       AUXILIARY STORAGE
WMENU06Y DS    XL3                     AUXILIARY STORAGE
*
*********************************************************************
* READ OPTION FROM MENU 6
*********************************************************************
RMENU06  XC    BUFF01,BUFF01           CLEAR BUFFER
*
         LA    R0,BUFF01L              GR0: LENGTH OF BUFFER
         LA    R1,BUFF01               GR1 -> BUFFER
         LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         SVC   2                       READ RECORD FROM CONSOLE
*
         CLI   BUFF01,X'7D'            AID = ENTER KEY?
         BE    RMENU06A                   YES: CONTINUE
*
         CLI   BUFF01,X'F3'            AID = PF3?
         BE    WMENU03                    YES:  PROCESS IT
*
         MVC   REC061MS(L'MSG00001),MSG00001   ... SET MESSAGE ...
         B     WMENU06A                ... AND RETRY
*
RMENU06A CLC   BUFF01+6(2),OPT01       INPUT = 1?
         BE    WMENU07                     YES: PROCESS IT
*
         MVC   REC061MS(L'MSG00002),MSG00002   ... SET MESSAGE ...
         B     WMENU06A                ... AND RETRY
*
RMENU06Z B     WMENU06
*
*********************************************************************
* SHOW MENU 7 (TTT Config2)
*********************************************************************
WMENU07  MVC   REC071MS,WHITES         CLEAR MESSAGE FROM PANEL
*
WMENU07A LH    R6,TTTMXDEP             CONVERT ...
         CVD   R6,WMENU07X             ... MAX DEPTH ...
         UNPK  WMENU07Y,WMENU07X+6(2)  ... TO ZONED  ...
         OI    WMENU07Y+2,X'F0'        ... FORMAT    ...
         MVC   REC071LV,WMENU07Y+1     ... AND WRITE IT TO MENU
*
         LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         LA    R1,MENU007              GR1 -> MENU
         BAL   R6,WMENU                WRITE MENU TO CONSOLE
*
         BAL   R6,WAITATTN             WAIT FOR ATTENTION
         B     RMENU07                 GO ON
*
WMENU07X DS    D                       AUXILIARY STORAGE
WMENU07Y DS    XL3                     AUXILIARY STORAGE
*
*********************************************************************
* READ OPTION FROM MENU 7
*********************************************************************
RMENU07  XC    BUFF01,BUFF01           CLEAR BUFFER
*
         LA    R0,BUFF01L              GR0: LENGTH OF BUFFER
         LA    R1,BUFF01               GR1 -> BUFFER
         LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         SVC   2                       READ RECORD FROM CONSOLE
*
         CLI   BUFF01,X'7D'            AID = ENTER KEY?
         BE    RMENU07A                   YES: CONTINUE
*
         CLI   BUFF01,X'F3'            AID = PF3?
         BE    WMENU06                    YES:  PROCESS IT
*
         MVC   REC071MS(L'MSG00001),MSG00001   ... SET MESSAGE ...
         B     WMENU07A                ... AND RETRY
*
RMENU07A CLC   BUFF01+6(2),OPT10       INPUT = 10?
         BNE   RMENU07C                   NO: GO FOR NEXT TEST
         LA    R1,10                      YES: R1 := 10
         B     RMENU07Y                        GO TO END
*
RMENU07C CLC   BUFF01+6(1),OPT02       INPUT = 2?
         BNE   RMENU07D                   NO: GO FOR NEXT TEST
         LA    R1,2                       YES: R1 := 2
         B     RMENU07Y                        GO TO END
*
RMENU07D CLC   BUFF01+6(1),OPT03       INPUT = 3?
         BNE   RMENU07E                   NO: GO FOR NEXT TEST
         LA    R1,3                       YES: R1 := 3
         B     RMENU07Y                        GO TO END
*
RMENU07E CLC   BUFF01+6(1),OPT04       INPUT = 4?
         BNE   RMENU07F                   NO: GO FOR NEXT TEST
         LA    R1,4                       YES: R1 := 4
         B     RMENU07Y                        GO TO END
*
RMENU07F CLC   BUFF01+6(1),OPT05       INPUT = 5?
         BNE   RMENU07G                   NO: GO FOR NEXT TEST
         LA    R1,5                       YES: R1 := 5
         B     RMENU07Y                        GO TO END
*
RMENU07G CLC   BUFF01+6(1),OPT06       INPUT = 6?
         BNE   RMENU07H                   NO: GO FOR NEXT TEST
         LA    R1,6                       YES: R1 := 6
         B     RMENU07Y                        GO TO END
*
RMENU07H CLC   BUFF01+6(1),OPT07       INPUT = 7?
         BNE   RMENU07I                   NO: GO FOR NEXT TEST
         LA    R1,7                       YES: R1 := 7
         B     RMENU07Y                        GO TO END
*
RMENU07I CLC   BUFF01+6(1),OPT08       INPUT = 8?
         BNE   RMENU07J                   NO: GO FOR NEXT TEST
         LA    R1,8                       YES: R1 := 8
         B     RMENU07Y                        GO TO END
*
RMENU07J CLC   BUFF01+6(1),OPT09       INPUT = 9?
         BNE   RMENU07K                   NO: GO FOR NEXT TEST
         LA    R1,9                       YES: R1 := 9
         B     RMENU07Y                        GO TO END
*
RMENU07K MVC   REC071MS(L'MSG00002),MSG00002   ... SET MESSAGE ...
         B     WMENU07A                ... AND RETRY
*
RMENU07Y STH   R1,TTTMXDEP             MAX. DEPTH := R1
         B     RMENU07Z                GO TO END
*
RMENU07Z B     WMENU06                 GO BACK TO MENU 006
*
*********************************************************************
* SHOW END-OF-PROGRAM MESSAGE
*********************************************************************
WMENUX   LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         LA    R1,MENU00X              GR1 -> MENU
         BAL   R6,WMENU                WRITE MENU TO CONSOLE
*
         LPSW  ENDPSW                  LOAD DISABLED WAIT
*
*********************************************************************
* EXECUTE ONE I/O INSTR. (READ OR WRITE)
*
* CALLED FROM SVC-1, SVC-2 AND SVC-3 ROUTINES
*
* R0: POINTS TO THE CCW TO EXECUTE
* R2: POINTS TO THE UCB
* R6: RETURN ADDRESS
*********************************************************************
EXECIO   ST    R0,CAW                  PREPARA CAW
         MVI   CAW,X'00'
*
         USING UCB,R2                  ADDRESSABILITY FOR UCB
*
         MVI   UCBIOFLG,X'FF'          SET FLAG I/O INITIATED
         LH    R1,UCBCCUU
*
         DROP  R2
*
         SIO   0(R1)                   INICIA I/O
         BC    8,EXECIOZ               SI OK -> TERMINAR
         BC    2,EXECIO                SI BUSY -> REPETIR
         LPSW  IOERRPSW                EN CASO CONTRARIO, DISABLED WAIT
*
EXECIOZ  BR    R6
*
*********************************************************************
* WAIT FOR ATTENTION FROM A CONSOLE
*
* R2: POINTS TO UCB FOR THE CONSOLE
* R6: RETURN ADDRESS
*********************************************************************
WAITATTN EQU   *
*
         USING UCB,R2                  ADDRESSABILITY FOR UCB
*
         MVC   UCBPSW(4),IOPSW         PREPARE UCB
         ST    R6,UCBPSW+4             NEXT PSW TO LOAD := R6
*
         DROP  R2
*
         LPSW  WAITIO                  WAIT FOR I/O.
*********************************************************************
* CONSOLE IDENTIFICATION
*
* WAITS FOR AN ATTENTION FROM A CONSOLE
*
* OBTAINS THE CONSOLE DEV-NUMBER, THE CU-TYPE AND THE DEV-TYPE
* CHECKS THAT THE CONSOLE TYPE IS AN ACCEPTED ONE, ELSE DISABLED WAIT
*
* R2: POINTS TO UCB FOR THE CONSOLE
* R6: RETURN ADDRESS
*********************************************************************
CONIDENT EQU   *
*
         STM   R0,R1,CONIR0            SAVE GR0,GR1
         ST    R6,CONIR6               SAVE GR6
*
         MVI   CONIDFLG,X'00'          RESET FLAG: CONSOLE UNIDENTIFIED
*
         USING UCB,R2                  ADDRESSABILITY FOR UCB
*
         MVC   UCBPSW(4),IOPSW         PREPARE UCB
         LA    R6,CONITYPE             NEXT PSW TO LOAD -> CONITYPE
         ST    R6,UCBPSW+4
*
         LPSW  WAITIO                  WAIT FOR I/O.
*
CONITYPE XC    CONIBUF,CONIBUF         CLEAR BUFFER
*
         LA    R0,CONIBUFL             GR0: LENGTH OF BUFFER
         LA    R1,CONIBUF              GR1 -> BUFFER
*        LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         SVC   3                       ASK FOR DEVICE TYPE
*
         MVC   UCBCUTYP(3),CONIBUF+1   SAVE CONTROL-UNIT TYPE
         MVC   UCBDEVTY(3),CONIBUF+4   SAVE DEVICE TYPE
*
         DROP  R2
*
         CLC   CONIBUF+4(2),X3278      CONSOLE IS A 3278 (3270) DEVICE?
         BE    CONI0001                   YES: OK
*
         LPSW  IOERRPSW                UNSUPPORTED DEV-TYPE: DIS. WAIT
*
CONI0001 LM    R0,R1,CONIR0            RESTORE GR0,GR1
         L     R6,CONIR6               RESTORE GR6
*
         BR    R6                      RETURN
*
CONIR0   DS    F                       SAVEAREA FOR GR0
CONIR1   DS    F                       SAVEAREA FOR GR1
CONIR6   DS    F                       SAVEAREA FOR GR6
CONIBUFL DC    AL1(L'CONIBUF)          LENGTH OF BUFFER
CONIBUF  DS    XL8                     BUFFER
********************************************************************
* WRITE A MENU IN CONSOLE
*
* R1: POINTS TO THE MENU TO WRITE
* R2: POINTS TO THE UCB
* R6: RETURN ADDRESS
*
* THE MENU HAS THE FOLLOWING FORMAT. GR1 POINTS TO n CONSECUTIVE
* FULLWORDS, n BEING THE NUMBER OF RECORDS IN THE MENU. ALL BUT
* THE LAST OF THESE FULLWORDS HAVE THE MOST SIGNIFICANT BIT SET
* TO 0, WHEREAS THE LAST FULLWORD HAS ITS MOST SIGNIFICANT BIT SET
* TO 1. EACH FULLWORD POINTS TO A STORAGE AREA MADE UP OF A 2-BYTE
* LENGTH FIELD FOLLOWED BY ONE OF THE RECORDS OF THE MENU. THE LENGTH
* FIELD CONTAINS THE LENGTH OF THE RECORD THAT FOLLOWS IT, NOT
* INCLUDING THE LENGTH OF THE LENGTH FIELD ITSELF:
*
*         +------------+      +-----+----------------------+
* R1 ---> !0           ! ---> ! Len ! Record 1             !
*         +------------+      +-----+----------------------+
*         !0           ! ---> ! Len ! Record 2             !
*         +------------+      +-----+----------------------+
*            . . . .            . .          . . . .
*         +------------+      +-----+----------------------+
*         !1           ! ---> ! Len ! Record n             !
*         +------------+      +-----+----------------------+
*
*        Len (2 bytes): Length of the following record, not
*                       including the length of the Len field
*                       itself.
*********************************************************************
WMENU    STM   R0,R3,WMENUR0           SAVE GR0,GR1,GR2,GR3
         ST    R6,WMENUR6              SAVE GR6
*
         LR    R3,R1                   R3 -> First Word on List
*
NEXTREC  L     R1,0(R3)                R1 -> Len+Record Pair
         MVC   WMENULEN(2),0(R1)       LENGTH TO TEMPORAL STORAGE
         SR    R0,R0
         LH    R0,WMENULEN             GR0: LENGTH OF RECORD
         LA    R1,2(R1)                GR1 -> RECORD
         SVC   1                       WRITE RECORD TO CONSOLE
*
         L     R0,0(R3)                IS THIS THE ...
         N     R0,LRECFLAG             ... LAST RECORD?
         BNZ   WMENUZ                      YES: WE HAVE FINISHED
*
         LA    R3,4(R3)                    NO: BACK FOR ...
         B     NEXTREC                         ... NEXT RECORD
*
WMENUZ   LM    R0,R3,WMENUR0           RESTORE GR0,GR1,GR2,GR3
         L     R6,WMENUR6              RESTORE GR6
*
         BR    R6
*
WMENUR0  DS    F                       SAVEAREA FOR R0
WMENUR1  DS    F                       SAVEAREA FOR R1
WMENUR2  DS    F                       SAVEAREA FOR R2
WMENUR3  DS    F                       SAVEAREA FOR R3
WMENUR6  DS    F                       SAVEAREA FOR R6
WMENULEN DS    1H'0'                   WORK SPACE FOR LENGTH'S
         DS    0F
LRECFLAG DC    X'80000000'             LAST RECORD FLAG
*
*********************************************************************
* ROUTINE FOR EXTERNAL INTERRUPTIONS
*********************************************************************
EXTINT   STM   R0,R15,SAVEEXT          SAVE GR0 - GR15
*
EXINTFIN LM    R0,R15,SAVEEXT          RESTORE GR0 - GR15
         LPSW  EXTOPSW                 LOAD OLD PSW
*
SAVEEXT  DS    16F                     SAVEAREA FOR GR0 - GR15
*
*********************************************************************
* ROUTINE TO SERVICE SVC'S
*
* THE DEFINED SVC'S AND THEIR PARAMETERS ARE:
*   1 WRITE A RECORD IN CONSOLE
*     R0: LENGTH OF THE RECORD TO WRITE
*     R1: POINTS TO THE RECORD TO WRITE
*     R2: POINTS TO THE UCB
*
*   2 READ A RECORD FROM CONSOLE
*     R0: LENGTH OF THE BUFFER TO CONTAIN THE RECORD
*     R1: POINTS TO THE BUFFER TO CONTAIN THE RECORD
*     R2: POINTS TO THE UCB
*
*   3 IDENTIFY DEVICE TYPE
*     R0: LENGTH OF THE BUFFER TO CONTAIN THE DEVICE TYPE INFO
*     R1: POINTS TO THE BUFFER TO CONTAIN THE DEVICE TYPE INFO
*     R2: POINTS TO THE UCB
*
*********************************************************************
SVCRTN   CLI   SVCOPSW+3,X'01'         SVC 1?
         BE    SVC1                       YES: PROCESS IT
*
         CLI   SVCOPSW+3,X'02'         SVC 2?
         BE    SVC2                       YES: PROCESS IT
*
         CLI   SVCOPSW+3,X'03'         SVC 3?
         BE    SVC3                       YES: PROCESS IT
*
SVCERR   LPSW  SVCERRPW                UNDEFINED SVC NUMBER ...
*                                      ... LOAD DISABLED WAIT STATE.
*
SVCRTNZ  LPSW  SVCOPSW                 RETURN.
*
********************************************************************
* SVC 1: WRITE A RECORD IN CONSOLE
*
* R0: LENGTH OF THE RECORD TO WRITE
* R1: POINTS TO THE RECORD TO WRITE
* R2: POINTS TO THE UCB
*********************************************************************
SVC1     STM   R0,R1,SVC1R0            SAVE GR0,GR1
         ST    R6,SVC1R6               SAVE GR6
*
         USING CCW,R6                  ADDRESSABILITY FOR CCW
         LA    R6,SVC1CCW
*
         MVC   CCWDADDR(3),SVC1R1+1    COMPLETE CCW
         MVC   CCWBCNT(2),SVC1R0+2
*
         DROP  R6
*
         USING UCB,R2                  ADDRESSABILITY FOR UCB
*
         MVC   UCBPSW(4),IOPSW         PREPARE UCB
         LA    R6,SVC1CHK
         ST    R6,UCBPSW+4
*
         LA    R0,SVC1CCW              PREPARE REGS. TO ...
         SR    R1,R1                   ... CALL ROUTINE EXECIO
*
         DROP  R2
*
         BAL   R6,EXECIO               EXECUTE I/O INSTRUCTION
*
         LPSW  WAITIO                  WAIT FOR I/O.
*
SVC1CHK  LM    R0,R1,SVC1R0            RESTORE GR0,GR1
         L     R6,SVC1R6               RESTORE GR6
*
SVC1Z    B     SVCRTNZ                 BRANCH BACK TO SVC ROUTINE
*
SVC1R0   DS    F                       SAVEAREA FOR R0
SVC1R1   DS    F                       SAVEAREA FOR R1
SVC1R6   DS    F                       SAVEAREA FOR R6
         DS    0D
SVC1CCW  DC    X'05000000'             CCW: COMMAND=WRITE
         DC    X'20000000'                  FLAG=SLI
*
*********************************************************************
* SVC 2: READ A RECORD FROM CONSOLE
*
* R0: LENGTH OF THE BUFFER TO CONTAIN THE RECORD
* R1: POINTS TO THE BUFFER TO CONTAIN THE RECORD
* R2: POINTS TO THE UCB
*********************************************************************
SVC2     STM   R0,R1,SVC2R0            SAVE GR0,GR1
         ST    R6,SVC2R6               SAVE GR6
*
         USING CCW,R6                  ADDRESSABILITY FOR CCW
         LA    R6,SVC2CCW
*
         MVC   CCWDADDR(3),SVC2R1+1    COMPLETE CCW
         MVC   CCWBCNT(2),SVC2R0+2
*
         DROP  R6
*
         USING UCB,R2                  ADDRESSABILITY FOR UCB
*
         MVC   UCBPSW(4),IOPSW         PREPARE UCB
         LA    R6,SVC2CHK
         ST    R6,UCBPSW+4
*
         LA    R0,SVC2CCW              PREPARE REGS. TO ...
         SR    R1,R1                   ... CALL ROUTINE EXECIO
*
         DROP  R2
*
         BAL   R6,EXECIO               EXECUTE I/O INSTRUCTION
*
         LPSW  WAITIO                  WAIT FOR I/O.
*
SVC2CHK  LM    R0,R1,SVC2R0            RESTORE GR0,GR1
         L     R6,SVC2R6               RESTORE GR6
*
SVC2Z    B     SVCRTNZ                 BRANCH BACK TO SVC ROUTINE
*
SVC2R0   DS    F                       SAVEAREA FOR R0
SVC2R1   DS    F                       SAVEAREA FOR R1
SVC2R6   DS    F                       SAVEAREA FOR R6
         DS    0D
SVC2CCW  DC    X'06000000'             CCW: COMMAND=READ
         DC    X'20000000'                  FLAG=SLI
*
*********************************************************************
* SVC 3: OBTAIN DEVICE TYPE INFO
*
* R0: LENGTH OF THE BUFFER TO CONTAIN THE RECORD
* R1: POINTS TO THE BUFFER TO CONTAIN THE RECORD
* R2: POINTS TO THE UCB
*********************************************************************
SVC3     STM   R0,R1,SVC3R0            SAVE GR0,GR1
         ST    R6,SVC3R6               SAVE GR6
*
         USING CCW,R6                  ADDRESSABILITY FOR CCW
         LA    R6,SVC3CCW
*
         MVC   CCWDADDR(3),SVC3R1+1    COMPLETE CCW
         MVC   CCWBCNT(2),SVC3R0+2
*
         DROP  R6
*
         USING UCB,R2                  ADDRESSABILITY FOR UCB
*
         MVC   UCBPSW(4),IOPSW         PREPARE UCB
         LA    R6,SVC3CHK
         ST    R6,UCBPSW+4
*
         LA    R0,SVC3CCW              PREPARE REGS. TO ...
         SR    R1,R1                   ... CALL ROUTINE EXECIO
*
         DROP  R2
*
         BAL   R6,EXECIO               EXECUTE I/O INSTRUCTION
*
         LPSW  WAITIO                  WAIT FOR I/O.
*
SVC3CHK  LM    R0,R1,SVC3R0            RESTORE GR0,GR1
         L     R6,SVC3R6               RESTORE GR6
*
SVC3Z    B     SVCRTNZ                 BRANCH BACK TO SVC ROUTINE
*
SVC3R0   DS    F                       SAVEAREA FOR R0
SVC3R1   DS    F                       SAVEAREA FOR R1
SVC3R6   DS    F                       SAVEAREA FOR R6
         DS    0D
SVC3CCW  DC    X'E4000000'             CCW: COMMAND=SENSE-ID
         DC    X'20000000'                  FLAG=SLI
*
*********************************************************************
* ROUTINE FOR I/O INTERRUPTIONS
*********************************************************************
*
IOINT    TM    68,B'10000000'          ATTENTION?
         BC    1,ATTN                     YES: PROCESS ATTENTION.
*
         TM    68,B'00010000'          BUSY?
         BC    1,BUSY                     YES: PROCESS BUSY.
*
         TM    68,B'00001100'          CHANNEL END + DEV. END?
         BC    1,CHDEVEND                 YES: PROCESS CHN + DEV END
*
         TM    68,B'00001000'          CHANNEL END?
         BC    1,CHEND                    YES: PROCESS CHANNEL END
*
         TM    68,B'00000100'          DEVICE END?
         BC    1,DEVEND                   YES: PROCESS DEVICE END
*
IOINTFIN LPSW  IOOPSW                  LOAD OLD PSW
*
*********************************************************************
* SUBROUTINE FOR ATTENTION'S
*********************************************************************
*
ATTN     ST    R2,ATTNR2               SAVE GR2
         LA    R2,UCBCONS              ADDRESSABILITY FOR ...
         USING UCB,R2                  ... THE CONSOLE UCB
*
         CLI   CONIDFLG,X'FF'          IS THE CONSOLE IDENTIFIED?
         BE    ATTN01                       YES: PROCESS ATTN
*
* FIRST ATTENTION: IDENTIFY CONSOLE
*
ATTN00   MVC   UCBCCUU(2),IOOPSW+2     STORE CCUU IN CONSOLE UCB
         MVI   CONIDFLG,X'FF'          SET FLAG: CONSOLE IDENTIFIED
         B     ATTN02                  CONTINUE
*
* NON-FIRST ATTENTION: IF FROM CONSOLE, PROCESS ATTENTION
*
ATTN01   CLC   UCBCCUU(2),IOOPSW+2     DOES IT COME FROM THE CONSOLE?
         BNE   ATTNZ                       NO: END
*
ATTN02   MVC   ATTNPSW(8),UCBPSW       PSW TO LOAD, TO TMP STORAGE
         MVC   UCBCSW(8),CSW           STORE CSW
*
         DROP  R2
*
         L     R2,ATTNR2               RESTORE GR2
*
         LPSW  ATTNPSW                 LOAD PSW
*
ATTNZ    L     R2,ATTNR2               RESTORE GR2
         B     IOINTFIN                END OF SUBROUTINE
ATTNPSW  DS    D                       PSW AUX
ATTNR2   DS    F                       SAVEAREA FOR GR2
*
*********************************************************************
* SUBROUTINE FOR BUSY
*********************************************************************
BUSY     B     IOINTFIN                END OF SUBROUTINE
*
*********************************************************************
* SUBROUTINE FOR SIMULTANEUS CHANNEL END AND DEVICE END
*********************************************************************
CHDEVEND B     DEVEND                  GO TO DEVICE-END PROCESSING
*
*********************************************************************
* SUBROUTINE FOR CHANNEL END
*********************************************************************
CHEND    B     IOINTFIN                END OF SUBROUTINE
*
*********************************************************************
* SUBROUTINE FOR DEVICE END
*********************************************************************
DEVEND   EQU   *
*
         ST    R2,DEVENDR2             SAVE GR2
         LA    R2,UCBCONS              ADDRESSABILITY FOR ...
         USING UCB,R2                  ... THE CONSOLE UCB
*
         CLC   UCBCCUU(2),IOOPSW+2     IS IT FROM THE CONSOLE?
         BNE   DEVENDZ                      NO: IGNORE IT
*
         CLI   UCBIOFLG,X'FF'          I/O STARTED ON DEVICE?
         BNE   DEVENDZ                      NO: END
*
         MVI   UCBIOFLG,X'00'          CLEAR I/O STARTED FLAG
         MVC   DEVENDPW(8),UCBPSW      PSW TO LOAD, TO TMP STORAGE
         MVC   UCBCSW(8),CSW           STORE CSW
*
         DROP  R2
*
         L     R2,DEVENDR2             RESTORE GR2
*
         LPSW  DEVENDPW                LOAD PSW
*
DEVENDZ  L     R2,DEVENDR2             RESTORE GR2
         B     IOINTFIN                END OF SUBROUTINE
DEVENDR2 DS    F                       SAVEAREA FOR R2
DEVENDPW DS    D                       PSW AUX
*
**********************************************************************
* SHOW THE LICENSE-SHORT TERMS
*
* R2: POINTS TO THE UCB
* R6: RETURN ADDRESS
*********************************************************************
LICSHORT STM   R0,R1,LICSHOR0          SAVE GR0,GR1
         ST    R6,LICSHOR6             SAVE GR6
*
         MVC   RECLS1MS,WHITES         CLEAR MESSAGE FROM PANEL
*
LICSHO01 LA    R1,MENULISH             GR1 -> MENU
         BAL   R6,WMENU                WRITE MENU TO CONSOLE
*
         BAL   R6,WAITATTN             WAIT FOR ATTENTION
*
LICSHO02 XC    BUFF01,BUFF01           CLEAR BUFFER
*
         LA    R0,BUFF01L              GR0: LENGTH OF BUFFER
         LA    R1,BUFF01               GR1 -> BUFFER
*        LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         SVC   2                       READ RECORD FROM CONSOLE
*
         CLI   BUFF01,X'7D'            AID = ENTER KEY?
         BE    LICSHORZ                   YES: DONE
*
         CLI   BUFF01,X'F3'            AID = PF3?
         BE    LICSHORZ                   YES: DONE
*
         CLI   BUFF01,X'7C'            AID = PF12?
         BE    LICSHOFB                   YES: PROCESS IT
*
*         MVC   RECLS1MS,WHITES         UNKNOWN OPTION ...
         MVC   RECLS1MS(L'MSG00001),MSG00001   ... SET MESSAGE ...
         B     LICSHO01                ... AND RETRY
*
LICSHOFB BAL   R6,LICENSE              F12: LICENSE TERMS
*
LICSHORZ LM    R0,R1,LICSHOR0          RESTORE GR0,GR1
         L     R6,LICSHOR6             RESTORE GR6
*
         BR    R6
*
LICSHOR0 DS    F                       SAVEAREA FOR R0
LICSHOR1 DS    F                       SAVEAREA FOR R1
LICSHOR6 DS    F                       SAVEAREA FOR R6
*
**********************************************************************
* SHOW THE LICENSE TERMS
*
* R2: POINTS TO THE UCB
* R6: RETURN ADDRESS
*********************************************************************
LICENSE  STM   R0,R1,LICENR0           SAVE GR0,GR1
         ST    R6,LICENR6              SAVE GR6
*
         MVC   RECLI1MS,WHITES         CLEAR MESSAGE FROM PANEL
*
LICEN001 LA    R1,MENULIC              GR1 -> MENU
         BAL   R6,WMENU                WRITE MENU TO CONSOLE
*
         BAL   R6,WAITATTN             WAIT FOR ATTENTION
*
LICEN002 XC    BUFF01,BUFF01           CLEAR BUFFER
*
         LA    R0,BUFF01L              GR0: LENGTH OF BUFFER
         LA    R1,BUFF01               GR1 -> BUFFER
*        LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         SVC   2                       READ RECORD FROM CONSOLE
*
         CLI   BUFF01,X'7D'            AID = ENTER KEY?
         BE    LICENSEZ                   YES: DONE
*
         CLI   BUFF01,X'F3'            AID = PF3?
         BE    LICENSEZ                   YES: DONE
*
*         MVC   RECLI1MS,WHITES         UNKNOWN OPTION ...
         MVC   RECLI1MS(L'MSG00001),MSG00001   ... SET MESSAGE ...
         B     LICEN001                ... AND RETRY
*
LICENSEZ LM    R0,R1,LICENR0           RESTORE GR0,GR1
         L     R6,LICENR6              RESTORE GR6
*
         BR    R6
*
LICENR0  DS    F                       SAVEAREA FOR R0
LICENR1  DS    F                       SAVEAREA FOR R1
LICENR6  DS    F                       SAVEAREA FOR R6
*
**********************************************************************
* CHECK THE VALIDITY OF A MOVE
*
* ON ENTRY:
* R0: POINTS TO THE CURRENT BOARD
* R1: LESS SIGNIFICANT BYTE := SYMBOL TO WRITE ('X' OR 'O')
* R2: CONTAINS THE CELL NUMBER TO WRITE AT (0..8)
* R6: RETURN ADDRESS
*
* ON RETURN:
* R15: 0 MEANS VALID MOVE; 1 MEANS INVALID MOVE
*
* ALGORITHM:
*   - IF CELL IS NOT EMPTY: INVALID
*   - COUNT NUMBER OF X'S (#X) AND NUMBER OF O'S (#O)
*   - IF #X=#O AND SYMBOL TO WRITE = INITIAL SYMBOL: VALID
*   - IF #X=#O+1 AND SYMBOL TO WRITE = O: VALID
*   - IF #X+1=#O AND SYMBOL TO WRITE = X: VALID
*   - INVALID
*********************************************************************
TTTCHKMV STM   R0,R3,TTTCHKR0          SAVE GR0,GR1,GR2,GR3
         ST    R6,TTTCHKR6             SAVE GR6
*
         AR    R2,R0                   R2 -> CELL TO WRITE ON
         CLI   0(R2),C' '              IS CELL EMPTY?
         BNE   TTTCHKNO                   NO: END NO-OK
*
* PREPARE LOOP TO COUNT X'S AND O'S
*
         SR    R1,R1                   INIT X-COUNTER
         LR    R2,R1                   INIT O-COUNTER
         LR    R3,R0                   GR3 -> CURRENT BOARD
         LA    R0,9(0)                 INIT GR0 := # OF CELLS
*
* BEGINNING OF LOOP TO COUNT X'S AND O'S
*
TTTCHK01 CLI   0(R3),C'X'              CELL = 'X'?
         BNE   TTTCHK02                   NO: TRY 'O'
         LA    R1,1(R1)                   YES: INCREMENT X-COUNTER
         B     TTTCHK03                        AND CONTINUE LOOP
*
TTTCHK02 CLI   0(R3),C'O'              CELL = 'O'?
         BNE   TTTCHK03                   NO: CONTINUE LOOP
         LA    R2,1(R2)                   YES: INCREMENT O-COUNTER
*
TTTCHK03 LA    R3,1(R3)                GR3 -> ONE CELL FORWARD
         BCT   R0,TTTCHK01             UNTIL ALL CELLS CHECKED
*
* END OF LOOP TO COUNT X'S AND O'S
* R1 IS THE X-COUNTER
* R2 IS THE O-COUNTER
*
         CR    R1,R2                   #X=#O?
         BE    TTTCHKEQ                   YES: EQUAL NUMBERS
*
         LA    R2,1(R2)                R2:= #O + 1
         CR    R1,R2                   #X=#O+1?
         BE    TTTCHKX                    YES: ONE MORE 'X'
*
         LA    R1,2(R1)                R1:= #X + 2
         CR    R1,R2                   #X+2=#O+1?
         BE    TTTCHKO                    YES: ONE MORE 'O'
*
         B     TTTCHKNO                END NO-OK
*
TTTCHKNO EQU   *                       MOVE IS INVALID
         LA    R15,1(0)                PREPARE RETURN-CODE:=1 ...
         B     TTTCHKZ                 ... AND GO TO END
*
TTTCHKOK EQU   *                       MOVE IS VALID
         SR    R15,R15                 PREPARE RETURN-CODE:=O ...
         B     TTTCHKZ                 ... AND GO TO END
*
TTTCHKEQ EQU   *                       #X=#O
         CLC   TTTCHKR1+3(1),TTTFSTSY  SYMBOL TO WRITE = INITIAL?
         BE    TTTCHKOK                   YES: END OK
         B     TTTCHKNO                   NO:  END NO-OK
*
TTTCHKX  EQU   *                       #X=#O+1
         CLI   TTTCHKR1+3,C'O'         SYMBOL TO WRITE = 'O'?
         BE    TTTCHKOK                   YES: END OK
         B     TTTCHKNO                   NO:  END NO-OK
*
TTTCHKO  EQU   *                       #X+1=#O
         CLI   TTTCHKR1+3,C'X'         SYMBOL TO WRITE = 'X'?
         BE    TTTCHKOK                   YES: END OK
         B     TTTCHKNO                   NO:  END NO-OK
*
TTTCHKZ  LM    R0,R3,TTTCHKR0          RESTORE GR0,GR1,GR2,GR3
         L     R6,TTTCHKR6             RESTORE GR6
*
         BR    R6
*
TTTCHKR0 DS    F                       SAVEAREA FOR R0
TTTCHKR1 DS    F                       SAVEAREA FOR R1
TTTCHKR2 DS    F                       SAVEAREA FOR R2
TTTCHKR3 DS    F                       SAVEAREA FOR R3
TTTCHKR6 DS    F                       SAVEAREA FOR R6
*
**********************************************************************
* APPLY A SYMMETRY TO THE BOARD
*
* ON ENTRY:
* R1: POINTS TO A BYTE WITH THE CODE FOR THE SYMMETRY TO APPLY
* R2: POINTS TO THE ORIGIN BOARD
* R3: POINTS TO THE DESTINATION BOARD
* R6: RETURN ADDRESS
*
* ON RETURN:
* R15: 0: OK, 1: INVALID SYMMETRY CODE
*
* SYMMETRIES:
*
*          4      1      3            +------|
*           \     |     /             |      |<-----+
*            \    |    /              |             |
*             0 | 1 | 2               |  0 | 1 | 2  | 5
*            ---+---+---              | ---+---+--- |
*       2 --- 3 | 4 | 5 ---         6 |  3 | 4 | 5 -+-
*            ---+---+---              | ---+---+--- |
*             6 | 7 | 8               |  6 | 7 | 8  | 7
*            /    |     \             |             |
*           /     |      \            |      |<-----+
*                                     +----->|
*
*   - 0: NO SYMMETRY (TRIVIAL OR IDENTITY SYMMETRY)
*   - 1: REFLECTION IN THE AXIS DEFINED BY CELLS 1-4-7
*   - 2: REFLECTION IN THE AXIS DEFINED BY CELLS 3-4-5
*   - 3: REFLECTION IN THE AXIS DEFINED BY CELLS 2-4-6
*   - 4: REFLECTION IN THE AXIS DEFINED BY CELLS 0-4-8
*   - 5: 90 DEGREES ROTATION COUNTER-CLOCKWISE.
*   - 6: 180 DEGREES ROTATION.
*   - 7: 90 DEGREES ROTATION CLOCKWISE.
*********************************************************************
TTTAPSYM CLI   0(R1),X'00'             SYMMETRY 0?
         BE    TTTAPS00                   YES: PROCESS IT
*
         CLI   0(R1),X'01'             SYMMETRY 1?
         BE    TTTAPS01                   YES: PROCESS IT
*
         CLI   0(R1),X'02'             SYMMETRY 2?
         BE    TTTAPS02                   YES: PROCESS IT
*
         CLI   0(R1),X'03'             SYMMETRY 3?
         BE    TTTAPS03                   YES: PROCESS IT
*
         CLI   0(R1),X'04'             SYMMETRY 4?
         BE    TTTAPS04                   YES: PROCESS IT
*
         CLI   0(R1),X'05'             SYMMETRY 5?
         BE    TTTAPS05                   YES: PROCESS IT
*
         CLI   0(R1),X'06'             SYMMETRY 6?
         BE    TTTAPS06                   YES: PROCESS IT
*
         CLI   0(R1),X'07'             SYMMETRY 7?
         BE    TTTAPS07                   YES: PROCESS IT
*
TTTAPSNO EQU   *                       END NO-OK ...
         LA    R15,1(0)                ... PREPARE RC = 1 ...
         B     TTTAPSZ                 ... AND GO TO END
*
TTTAPSOK EQU   *                       END OK ...
         SR    R15,R15                 ... PREPARE RC = 0 ...
         B     TTTAPSZ                 ... AND GO TO END
*
TTTAPS00 MVC   0(9,R3),0(R2)           COPY ORIGIN TO DESTINATION
         B     TTTAPSOK                END OK
*
TTTAPS01 MVC   0(1,R3),2(R2)           APPLY ...
         MVC   1(1,R3),1(R2)           ...
         MVC   2(1,R3),0(R2)           ...
         MVC   3(1,R3),5(R2)           ... SYMMETRY ...
         MVC   4(1,R3),4(R2)           ...
         MVC   5(1,R3),3(R2)           ...
         MVC   6(1,R3),8(R2)           ... NUMBER ...
         MVC   7(1,R3),7(R2)           ...
         MVC   8(1,R3),6(R2)           ... 1
         B     TTTAPSOK                END OK
*
TTTAPS02 MVC   0(3,R3),6(R2)           APPLY ...
         MVC   3(3,R3),3(R2)           ... SYMMETRY ...
         MVC   6(3,R3),0(R2)           ... NUMBER 2
         B     TTTAPSOK                END OK
*
TTTAPS03 MVC   0(1,R3),8(R2)           APPLY ...
         MVC   1(1,R3),5(R2)           ...
         MVC   2(1,R3),2(R2)           ...
         MVC   3(1,R3),7(R2)           ... SYMMETRY ...
         MVC   4(1,R3),4(R2)           ...
         MVC   5(1,R3),1(R2)           ...
         MVC   6(1,R3),6(R2)           ... NUMBER ...
         MVC   7(1,R3),3(R2)           ...
         MVC   8(1,R3),0(R2)           ... 3
         B     TTTAPSOK                END OK
*
TTTAPS04 MVC   0(1,R3),0(R2)           APPLY ...
         MVC   1(1,R3),3(R2)           ...
         MVC   2(1,R3),6(R2)           ...
         MVC   3(1,R3),1(R2)           ... SYMMETRY ...
         MVC   4(1,R3),4(R2)           ...
         MVC   5(1,R3),7(R2)           ...
         MVC   6(1,R3),2(R2)           ... NUMBER ...
         MVC   7(1,R3),5(R2)           ...
         MVC   8(1,R3),8(R2)           ... 4
         B     TTTAPSOK                END OK
*
TTTAPS05 MVC   0(1,R3),2(R2)           APPLY ...
         MVC   1(1,R3),5(R2)           ...
         MVC   2(1,R3),8(R2)           ...
         MVC   3(1,R3),1(R2)           ... SYMMETRY ...
         MVC   4(1,R3),4(R2)           ...
         MVC   5(1,R3),7(R2)           ...
         MVC   6(1,R3),0(R2)           ... NUMBER ...
         MVC   7(1,R3),3(R2)           ...
         MVC   8(1,R3),6(R2)           ... 5
         B     TTTAPSOK                END OK
*
TTTAPS06 MVC   0(1,R3),8(R2)           APPLY ...
         MVC   1(1,R3),7(R2)           ...
         MVC   2(1,R3),6(R2)           ...
         MVC   3(1,R3),5(R2)           ... SYMMETRY ...
         MVC   4(1,R3),4(R2)           ...
         MVC   5(1,R3),3(R2)           ...
         MVC   6(1,R3),2(R2)           ... NUMBER ...
         MVC   7(1,R3),1(R2)           ...
         MVC   8(1,R3),0(R2)           ... 6
         B     TTTAPSOK                END OK
*
TTTAPS07 MVC   0(1,R3),6(R2)           APPLY ...
         MVC   1(1,R3),3(R2)           ...
         MVC   2(1,R3),0(R2)           ...
         MVC   3(1,R3),7(R2)           ... SYMMETRY ...
         MVC   4(1,R3),4(R2)           ...
         MVC   5(1,R3),1(R2)           ...
         MVC   6(1,R3),8(R2)           ... NUMBER ...
         MVC   7(1,R3),5(R2)           ...
         MVC   8(1,R3),2(R2)           ... 7
         B     TTTAPSOK                END OK
*
TTTAPSZ  BR    R6                      RETURN
*
**********************************************************************
* COMPARE TWO BOARDS, TAKING INTO ACCOUNT THE SYMMETRIES
*
* ON ENTRY:
* R2: POINTS TO THE FIRST  BOARD TO COMPARE
* R3: POINTS TO THE SECOND BOARD TO COMPARE
* R6: RETURN ADDRESS
*
* ON RETURN:
* R15: 0: BOARDS ARE EQUIVALENT, 1: BOARDS ARE NOT EQUIVALENT
*********************************************************************
CMPBOARD ST    R1,CMPBOAR1             SAVE GR1
         STM   R3,R6,CMPBOAR3          SAVE GR3,GR4,GR5,GR6
*
         CLC   0(9,R2),0(R3)           COMPARE THE TWO BOARDS. EQUAL?
         BE    CMPBOAEQ                   YES: END EQUIVALENT
*
* PREPARE LOOP TO CHECK ALL SYMMETRIES, EXCEPT 0
*
         LA    R1,CMPBOASC             GR1 -> SYMMETRY CODE
         LR    R5,R3                   GR5 -> 2ND BOARD
         LA    R3,CMPBOABD             GR3 -> AUXILIARY BOARD
         LA    R4,7(0)                 INIT GR4 := HIGHEST SYM. CODE
*
* BEGINNING OF LOOP TO CHECK ALL SYMMETRIES, EXCEPT 0
*
CMPBOA01 STC   R4,CMPBOASC             STORE SYMMETRY CODE
         BAL   R6,TTTAPSYM             APPLY SYMMETRY TO 1ST BOARD
         CLC   CMPBOABD(9),0(R5)       COMPARE WITH 2ND BOARD. EQUAL?
         BE    CMPBOAEQ                   YES: END EQUIVALENT
         BCT   R4,CMPBOA01                NO:  TRY NEXT SYMMETRY
*
* END OF LOOP TO CHECK ALL SYMMETRIES, EXCEPT 0
*
         B     CMPBOANE                END NON-EQUIVALENT
*
CMPBOANE EQU   *                       BOARDS ARE NOT EQUIVALENT
         LA    R15,1(0)                PREPARE RETURN-CODE:=1 ...
         B     CMPBOAZ                 ... AND GO TO END
*
CMPBOAEQ EQU   *                       BOARDS ARE EQUIVALENT
         SR    R15,R15                 PREPARE RETURN-CODE:=O ...
         B     CMPBOAZ                 ... AND GO TO END
*
CMPBOAZ  L     R1,CMPBOAR1             RESTORE GR1
         LM    R3,R6,CMPBOAR3          RESTORE GR3,GR4,GR5,GR6
*
         BR    R6
*
CMPBOABD DS    CL9                     AUXILIARY BOARD
*
CMPBOAR1 DS    F                       SAVEAREA FOR R1
CMPBOAR3 DS    F                       SAVEAREA FOR R3
CMPBOAR4 DS    F                       SAVEAREA FOR R4
CMPBOAR5 DS    F                       SAVEAREA FOR R5
CMPBOAR6 DS    F                       SAVEAREA FOR R6
CMPBOASC DS    C                       CODE OF SYMMETRY TO TEST NEXT
         DS    0H
*
**********************************************************************
* START A TIC-TAC-TOE GAME
*
* R6: RETURN ADDRESS
*********************************************************************
TTTSTART STM   R0,R3,TTTSTAR0          SAVE GR0,GR1,GR2,GR3
         ST    R6,TTTSTAR6             SAVE GR6
*
TTTSTA01 BAL   R6,TTTINIT              GO TO INITIALIZATION ROUTINE
*
TTTMOVE  LA    R1,TTTBOARD             GR1 -> CURRENT BOARD
         BAL   R6,TTT3LCHK             GO TO CHECK-3-IN-LINE ROUTINE
         LTR   R15,R15                 FOUND 3-IN-LINE?
         BZ    TTTSTA02                    NO: GO TO SET FLAG TO OFF
         MVI   TTTFLG3L,X'FF'              YES: SET 3L-FLAG TO ON
         B     TTTSTA03                         ... AND CONTINUE
TTTSTA02 MVI   TTTFLG3L,X'00'          SET 3L-FLAG TO OFF
*
TTTSTA03 CLI   TTTFLG3L,X'FF'          3-IN-LINE FLAG ON?
         BE    TTTSTAGO                    YES: GO TO GAME OVER
*
         LA    R1,TTTBOARD             GR1 -> CURRENT BOARD
         BAL   R6,TTTFULL              GO TO CHECK-FULL-BOARD ROUTINE
         LTR   R15,R15                 BOARD IS FULL?
         BZ    TTTSTA04                    NO: GO TO SET FLAG TO OFF
         MVI   TTTFLGFB,X'FF'              YES: SET FULL-FLAG TO ON
         B     TTTSTA05                         ... AND CONTINUE
TTTSTA04 MVI   TTTFLGFB,X'00'          SET FULL-FLAG TO OFF
*
TTTSTA05 CLI   TTTFLGFB,X'FF'          FULL-BOARD FLAG ON?
         BE    TTTSTAGO                    YES: GO TO GAME OVER
*
         CLI   TTTNXTPL,C'H'           NEXT PLAYER = HUMAN?
         BNE   TTTSTAMM                    NO:  NEXT PLAYER MACHINE
*
* NEXT PLAYER IS HUMAN:
*      WAIT FOR NEXT MOVE
*      CHECK MOVE VALIDITY
*      IF MOVE IS NO-OK ...
*      IF MOVE IS OK ...
*
TTTSTAHH EQU   *                       NEXT PLAYER IS HUMAN
         LA    R1,MSG00005             R1 -> MESSAGE
TTTSTAH1 XC    TTTENFLG,TTTENFLG       PREPARE ENABLED-OPTIONS-FLAG:
         OI    TTTENFLG,F2EN              - F2-INPUT ENABLED
         OI    TTTENFLG,F3EN              - F3-INPUT ENABLED
         OI    TTTENFLG,MVEN              - MOVE-INPUT ENABLED
         BAL   R6,TTTPSCR              GO TO PREPARE-SCREEN ROUTINE
         BAL   R6,TTTSSCR              GO TO SHOW-SCREEN ROUTINE
*
         BAL   R6,TTTINPUT             GO TO WAIT FOR INPUT
         CLI   TTTINF2,X'FF'           F2 PRESSED?
         BE    TTTSTA01                   YES: GO TO START NEW GAME
         CLI   TTTINF3,X'FF'           F3 PRESSED?
         BE    TTTSTARZ                   YES: THIS GAME IS OVER
         CLI   TTTINBK,X'FF'           BAD-KEY PRESSED?
         BNE   TTTSTAH2                   NO: CONTINUE
*
         LA    R1,MSG00001             R1 -> MESSAGE BAD-KEY
         B     TTTSTAH1                SHOW THE SCREEN AGAIN
*
TTTSTAH2 CLI   TTTINBO,X'FF'           BAD-OPTION ENTERED?
         BNE   TTTSTAH3                   NO: CONTINUE
*
         LA    R1,MSG00006             R1 -> MESSAGE INVALID-MOVE
         B     TTTSTAH1                SHOW THE SCREEN AGAIN
*
TTTSTAH3 LA    R0,TTTBOARD             R0 -> CURRENT BOARD
         ICM   R1,B'0001',TTTHSYM      RIGHT-MOST BYTE OF R1 := SYMBOL
*
* R2 := CELL NUMBER TO WRITE TO
*
         SR    R2,R2
         CLI   TTTINMVR,C'A'
         BE    TTTSTAH5
         CLI   TTTINMVR,C'B'
         BE    TTTSTAH4
         LA    R2,6(0,0)
         B     TTTSTAH5
TTTSTAH4 LA    R2,3(0,0)
TTTSTAH5 CLI   TTTINMVC,C'1'
         BE    TTTSTAH7
         CLI   TTTINMVC,C'2'
         BE    TTTSTAH6
         LA    R2,2(0,R2)
         B     TTTSTAH7
TTTSTAH6 LA    R2,1(0,R2)
*
* CHECK MOVE VALIDITY
*
TTTSTAH7 BAL   R6,TTTCHKMV              CHECK MOVE VALIDITY
         LTR   R15,R15                  MOVE VALID?
         BZ    TTTSTAH8                    YES: CONTINUE
*
         LA    R1,MSG00006             R1 -> MESSAGE INVALID-MOVE
         B     TTTSTAH1                SHOW THE SCREEN AGAIN
*
TTTSTAH8 AR    R2,R0                   R2 -> CELL TO WRITE TO
         MVC   0(1,R2),TTTHSYM         UPDATE CURRENT BOARD
*
         LA    R1,TTTNXTPL             R1 -> NEXT PLAYER
         LA    R2,TTTINMVR             R2 -> ROW    OF MOVE
         LA    R3,TTTINMVC             R3 -> COLUMN OF MOVE
         BAL   R6,TTTUPDMT             UPDATE TABLE OF MOVES
*
         MVI   TTTNXTPL,C'M'           NEXT PLAYER := MACHINE
         B     TTTMOVE                 GO FOR A NEW MOVE
*
* NEXT PLAYER IS MACHINE:
*      DECIDE MOVE
*
TTTSTAMM EQU   *                       NEXT PLAYER IS MACHINE
*         LA    R1,MSG00007             R1 -> MESSAGE
*         XC    TTTENFLG,TTTENFLG       ALL OPTIONS DISABLED
*         BAL   R6,TTTPSCR              GO TO PREPARE-SCREEN ROUTINE
*        BAL   R6,TTTSSCR              GO TO SHOW-SCREEN ROUTINE
*
TTTSTAM1 BAL   R6,TTTMVS               GO TO SELECT A MOVE
         LA    R0,TTTBOARD             R0 -> CURRENT BOARD
         AR    R2,R0                   R2 -> CELL TO WRITE TO
         MVC   0(1,R2),TTTMSYM         UPDATE CURRENT BOARD
*
         LA    R1,TTTNXTPL             R1 -> NEXT PLAYER
         LA    R2,TTTMCHMR             R2 -> ROW    OF MOVE
         LA    R3,TTTMCHMC             R3 -> COLUMN OF MOVE
         BAL   R6,TTTUPDMT             UPDATE TABLE OF MOVES
*
         MVI   TTTNXTPL,C'H'           NEXT PLAYER := HUMAN PLAYER
         B     TTTMOVE                 GO FOR A NEW MOVE
*
TTTSTARZ LM    R0,R3,TTTSTAR0          RESTORE GR0,GR1,GR2,GR3
         L     R6,TTTSTAR6             RESTORE GR6
*
         BR    R6
*
* GAME OVER
*
TTTSTAGO EQU   *                       THE GAME IS OVER
         CLI   TTTFLG3L,X'FF'          3-IN-LINE FLAG ON?
         BNE   TTTSTAG2                    NO: CONTINUE
         LA    R1,MSG00003                 YES: SET MESSAGE 'WINNER...'
         CLI   TTTNXTPL,C'H'           NEXT PLAYER = HUMAN?
         BE    TTTSTAG1                    YES: PROCESS IT
         MVI   MSG0003P,C'H'               NO: WINNER IS HUMAN
         B     TTTSTAG3                        ... CONTINUE
*
TTTSTAG1 MVI   MSG0003P,C'M'           WINNER IS MACHINE
         B     TTTSTAG3                CONTINUE
*
TTTSTAG2 LA    R1,MSG00004             SET MESSAGE 'MATCH DRAWN'
*
TTTSTAG3 XC    TTTENFLG,TTTENFLG       PREPARE ENABLED-OPTIONS-FLAG:
         OI    TTTENFLG,F2EN              - F2-INPUT ENABLED
         OI    TTTENFLG,F3EN              - F3-INPUT ENABLED
         BAL   R6,TTTPSCR              GO TO PREPARE-SCREEN ROUTINE
         BAL   R6,TTTSSCR              GO TO SHOW-SCREEN ROUTINE
*
         BAL   R6,TTTINPUT             GO TO WAIT FOR INPUT
         CLI   TTTINF2,X'FF'           F2 PRESSED?
         BE    TTTSTA01                   YES: GO TO START NEW GAME
         CLI   TTTINF3,X'FF'           F3 PRESSED?
         BE    TTTSTARZ                   YES: THIS GAME IS OVER
         CLI   TTTINBK,X'FF'           BAD-KEY PRESSED?
         BNE   TTTSTAG4                   NO: CONTINUE
*
         LA    R1,MSG00001             R1 -> MESSAGE BAD-KEY
         B     TTTSTAG3                SHOW THE SCREEN AGAIN
*
TTTSTAG4 CLI   TTTINBO,X'FF'           BAD-OPTION ENTERED?
         BNE   TTTSTAG5                   NO: CONTINUE
*
         LA    R1,MSG00006             R1 -> MESSAGE INVALID-MOVE
         B     TTTSTAG3                SHOW THE SCREEN AGAIN
*
TTTSTAG5 B     TTTSTAG3                SHOW THE SCREEN AGAIN
*
TTTSTAR0 DS    F                       SAVEAREA FOR R0
TTTSTAR1 DS    F                       SAVEAREA FOR R1
TTTSTAR2 DS    F                       SAVEAREA FOR R2
TTTSTAR3 DS    F                       SAVEAREA FOR R3
TTTSTAR6 DS    F                       SAVEAREA FOR R6
*
**********************************************************************
* INITIALIZE TIC-TAC-TOE DATA
*
* R6: RETURN ADDRESS
*********************************************************************
TTTINIT  ST    R1,TTTINIR1             SAVE GR1
*
         XC    TTTFLG3L,TTTFLG3L
         XC    TTTFLGFB,TTTFLGFB
*
         MVI   TTTBOARD,C' '                        CLEAR ...
         MVC   TTTBOARD+1(L'TTTBOARD-1),TTTBOARD    ... BOARD
*
         MVI   TTTMVTBL,C' '                      INITIALIZE ...
         MVC   TTTMVTBL+1(L'TTTMVTBL-1),TTTMVTBL  ... TABLE OF MOVES
*        MVC   TTTMVTBL(L'TTTMVTBL),XXXMVTBL TAB. OF MOVES 4 TESTING
         SR    R1,R1
         STH   R1,TTTMVTPT
*
         MVC   TTTNXTPL,TTTFSTPL       NEXT PLAYER := FIRST PLAYER
*
*         LA    R1,TTTNODST             TTTNXNPT -> ...
*         ST    R1,TTTNXNPT                  ... -> TTTNODST
*
         L     R1,TTTINIR1             RESTORE GR1
*
         BR    R6                      RETURN TO CALLER
*
TTTINIR1 DS    F                       SAVEAREA FOR GR1
**********************************************************************
* PREPARE TIC-TAC-TOE SCREEN
*
* INPUT
* -----
* R1 -> 12-CHAR-MESSAGE TO SHOW (IF R1:=0 -> MESSAGE := WHITES)
* R6: RETURN ADDRESS
* TTTENFLG
*
* MODIFIED REGISTERS
* ------------------
* NONE
*********************************************************************
TTTPSCR  STM   R1,R2,TTTPSCR1          SAVE GR1,GR2
         ST    R6,TTTPSCR6             SAVE GR6
*
* COPY CURRENT BOARD TO SCREEN
*
         LA    R2,TTTBOARD             GR2 -> CURRENT BOARD
         MVC   REC051A1(1),0(R2)
         MVC   REC051A2(1),1(R2)
         MVC   REC051A3(1),2(R2)
         MVC   REC051B1(1),3(R2)
         MVC   REC051B2(1),4(R2)
         MVC   REC051B3(1),5(R2)
         MVC   REC051C1(1),6(R2)
         MVC   REC051C2(1),7(R2)
         MVC   REC051C3(1),8(R2)
*
* COPY 12-CHAR-MESSAGE TO SCREEN
*
         LTR   R1,R1                   R1 POINTS TO MESSAGE ?
         BZ    TTTPSC01                    NO:  GO TO CLEAR MESSAGE
         MVC   REC051MS(L'REC051MS),0(R1)  YES: COPY MESSAGE TO SCRN
         B     TTTPSC02                         ... AND CONTINUE
*
TTTPSC01 MVC   REC051MS,WHITES         CLEAR MESSAGE FROM PANEL
*
* COPY TABLE-OF-MOVES TO SCREEN
*
TTTPSC02 LA    R1,TTTMVTBL             R1 -> 1ST TABLE-OF-MOVES-ENTRY
         LA    R2,REC051M1             R2 -> 1ST MOVES-SCREEN-AREA
         BAL   R6,TTTPSCMV             GO TO PREPARE SCREEN: MOVE
*
         LA    R1,TTTMTEL(0,R1)        R1 -> 2ND TABLE-OF-MOVES-ENTRY
         LA    R2,REC051M2             R2 -> 2ND MOVES-SCREEN-AREA
         BAL   R6,TTTPSCMV             GO TO PREPARE SCREEN: MOVE
*
         LA    R1,TTTMTEL(0,R1)        R1 -> 3RD TABLE-OF-MOVES-ENTRY
         LA    R2,REC051M3             R2 -> 3RD MOVES-SCREEN-AREA
         BAL   R6,TTTPSCMV             GO TO PREPARE SCREEN: MOVE
*
         LA    R1,TTTMTEL(0,R1)        R1 -> 4TH TABLE-OF-MOVES-ENTRY
         LA    R2,REC051M4             R2 -> 4TH MOVES-SCREEN-AREA
         BAL   R6,TTTPSCMV             GO TO PREPARE SCREEN: MOVE
*
         LA    R1,TTTMTEL(0,R1)        R1 -> 5TH TABLE-OF-MOVES-ENTRY
         LA    R2,REC051M5            R2 -> 5TH MOVES-SCREEN-AREA
         BAL   R6,TTTPSCMV             GO TO PREPARE SCREEN: MOVE
*
         LA    R1,TTTMTEL(0,R1)        R1 -> 6TH TABLE-OF-MOVES-ENTRY
         LA    R2,REC051M6             R2 -> 6TH MOVES-SCREEN-AREA
         BAL   R6,TTTPSCMV             GO TO PREPARE SCREEN: MOVE
*
         LA    R1,TTTMTEL(0,R1)        R1 -> 7TH TABLE-OF-MOVES-ENTRY
         LA    R2,REC051M7             R2 -> 7TH MOVES-SCREEN-AREA
         BAL   R6,TTTPSCMV             GO TO PREPARE SCREEN: MOVE
*
         LA    R1,TTTMTEL(0,R1)        R1 -> 8TH TABLE-OF-MOVES-ENTRY
         LA    R2,REC051M8             R2 -> 8TH MOVES-SCREEN-AREA
         BAL   R6,TTTPSCMV             GO TO PREPARE SCREEN: MOVE
*
         LA    R1,TTTMTEL(0,R1)        R1 -> 9TH TABLE-OF-MOVES-ENTRY
         LA    R2,REC051M9             R2 -> 9TH MOVES-SCREEN-AREA
         BAL   R6,TTTPSCMV             GO TO PREPARE SCREEN: MOVE
*
* ENABLE/DISABLE F2-INPUT
*
TTTPSCF2 TM    TTTENFLG,F2EN           F2-INPUT ENABLED?
         BO    TTTPSC03                       YES: PROCESS IT
         MVC   REC051F2(L'DIS051F2),DIS051F2  NO:  SET DISABLED-VALUE
         B     TTTPSCF3
TTTPSC03 MVC   REC051F2(L'ENA051F2),ENA051F2  SET ENABLED-VALUE
*
* ENABLE/DISABLE F3-INPUT
*
TTTPSCF3 TM    TTTENFLG,F3EN           F3-INPUT ENABLED?
         BO    TTTPSC04                       YES: PROCESS IT
         MVC   REC051F3(L'DIS051F3),DIS051F3  NO:  SET DISABLED-VALUE
         B     TTTPSCMI
TTTPSC04 MVC   REC051F3(L'ENA051F3),ENA051F3  SET ENABLED-VALUE
*
* ENABLE/DISABLE MOVE-INPUT
*
TTTPSCMI TM    TTTENFLG,MVEN           MOVE-INPUT ENABLED?
         BO    TTTPSC05                       YES: PROCESS IT
         MVC   REC051MV(L'DIS051MV),DIS051MV  NO:  SET DISABLED-VALUE
         B     TTTPSCRZ
TTTPSC05 MVC   REC051MV(L'ENA051MV),ENA051MV  SET ENABLED-VALUE
*
TTTPSCRZ LM    R1,R2,TTTPSCR1          RESTORE GR1,GR2
         L     R6,TTTPSCR6             RESTORE GR6
*
         BR    R6
*
TTTPSCR1 DS    F                       SAVEAREA FOR R1
TTTPSCR2 DS    F                       SAVEAREA FOR R2
TTTPSCR6 DS    F                       SAVEAREA FOR R6
*
**********************************************************************
* PREPARE MOVES-AREA OF TIC-TAC-TOE SCREEN
*
* INPUT REGISTERS
* ---------------
* R1 -> TABLE-OF-MOVES-ENTRY TO COPY FROM
* R2 -> 7-CHAR SCREEN-AREA TO COPY TO
* R6: RETURN ADDRESS
*
* MODIFIED REGISTERS
* ------------------
* NONE
*
* FORMAT OF INPUT DATA
* --------------------
*         +---+                          +---+---+---+---+---+---+---+
* R1 ---> | P | (PLAYER)         R2 ---> | ? | ? | ? | ? | ? | ? | ? |
*         +---+                          +---+---+---+---+---+---+---+
*         | R | (ROW)
*         +---+
*         | C | (COLUMN)
*         +---+
*
* FORMAT OF OUTPUT DATA
* ---------------------
*
*         +---+---+---+---+---+---+---+
* R2 ---> |   | R | C |   | ( | P | ) |
*         +---+---+---+---+---+---+---+
*
*********************************************************************
         USING TTTMTE,R1               ADDRESSING OF MOVE-TABLE-ENTRY
*
TTTPSCMV MVI   0(R2),C' '              1ST CHAR := BLANK
         MVC   1(1,R2),TTTMTER         2ND CHAR := ROW
         MVC   2(1,R2),TTTMTEC         3RD CHAR := COLUMN
         MVI   3(R2),C' '              4TH CHAR := BLANK
         MVI   4(R2),C'('              5TH CHAR := (
         MVC   5(1,R2),TTTMTEP         6TH CHAR := PLAYER
         MVI   6(R2),C')'              7TH CHAR := )
*
         BR    R6
*
         DROP  R1
*
**********************************************************************
* SHOW TIC-TAC-TOE SCREEN
*
* R6: RETURN ADDRESS
*********************************************************************
TTTSSCR  STM   R1,R2,TTTSSCR1          SAVE GR1,GR2
         ST    R6,TTTSSCR6             SAVE GR6
*
         LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         LA    R1,MENU005              GR1 -> SCREEN
         BAL   R6,WMENU                WRITE SCREEN IN CONSOLE
*
         BAL   R6,WAITATTN             WAIT FOR ATTENTION
*
TTTSSCRZ LM    R1,R2,TTTSSCR1          RESTORE GR1,GR2
         L     R6,TTTSSCR6             RESTORE GR6
*
         BR    R6
*
TTTSSCR1 DS    F                       SAVEAREA FOR R1
TTTSSCR2 DS    F                       SAVEAREA FOR R2
TTTSSCR6 DS    F                       SAVEAREA FOR R6
*
**********************************************************************
* WAIT FOR TIC-TAC-TOE INPUT
*
* R6: RETURN ADDRESS
*
* SETS ONE AND ONLY ONE OF THE FOLLOWING FLAGS:
*
*      TTTINF2         F2-KEY-PRESSED
*      TTTINF3         F3-KEY-PRESSED
*      TTTINBK         BAD-KEY
*      TTTINMOV        MOVE-ENTERED
*      TTTINBO         BAD-OPTION
*
* IF TTTINMOV IS SET, TTTINMVR AND TTTINMVC CONTAIN THE ROW (A,B,C)
* AND THE COLUMN (1,2,3) OF THE MOVE.
*********************************************************************
TTTINPUT STM   R0,R2,TTTINPR0          SAVE GR0,GR1,GR2
*
         XC    TTTINF2,TTTINF2         CLEAR F2-KEY-PRESSED FLAG
         XC    TTTINF3,TTTINF3         CLEAR F3-KEY-PRESSED FLAG
         XC    TTTINMOV,TTTINMOV       CLEAR MOVE-ENTERED FLAG
         XC    TTTINMVR,TTTINMVR       CLEAR ROW-OF-MOVE
         XC    TTTINMVC,TTTINMVC       CLEAR COLUMN-OF-MOVE
         XC    TTTINBK,TTTINBK         CLEAR BAD-KEY FLAG
         XC    TTTINBO,TTTINBO         CLEAR BAD-OPTION FLAG
*
         XC    BUFF01,BUFF01           CLEAR BUFFER
*
         LA    R0,BUFF01L              GR0: LENGTH OF BUFFER
         LA    R1,BUFF01               GR1 -> BUFFER
         LA    R2,UCBCONS              R2 POINTS TO CONSOLE UCB
         SVC   2                       READ RECORD FROM CONSOLE
*
         CLI   BUFF01,X'7D'            AID = ENTER KEY?
         BE    TTTINP1                    YES: CONTINUE
*
         CLI   BUFF01,X'F2'            AID = PF2?
         BE    TTTINP2                    YES:  PROCESS IT
*
         CLI   BUFF01,X'F3'            AID = PF3?
         BE    TTTINP3                    YES:  PROCESS IT
*
*         MVC   REC051MS,WHITES         UNKNOWN OPTION ...
*        MVC   REC051MS(L'MSG00001),MSG00001   ... SET MESSAGE ...
*        B     WMENU05A                ... AND RETRY
         MVI   TTTINBK,X'FF'           SET BAD-KEY FLAG ...
         B     TTTINPUZ                ... AND RETURN
*
TTTINP1  OI    BUFF01+6,X'40'          CONVERT TO UPPERCASE
         CLI   BUFF01+6,C'A'           INPUT(1) = A?
         BE    TTTINP13                   YES: CHECK COLUMN NUMBER
*
TTTINP11 CLI   BUFF01+6,C'B'           INPUT(1) = B?
         BE    TTTINP13                   YES: CHECK COLUMN NUMBER
*
TTTINP12 CLI   BUFF01+6,C'C'           INPUT(1) = C?
         BE    TTTINP13                   YES: CHECK COLUMN NUMBER
*
*         MVC   REC051MS,WHITES         UNKNOWN OPTION ...
*        MVC   REC051MS(L'MSG00002),MSG00002   ... SET MESSAGE ...
*        B     WMENU05A                ... AND RETRY
         MVI   TTTINBO,X'FF'           SET BAD-OPTION FLAG ...
         B     TTTINPUZ                ... AND RETURN
*
TTTINP13 CLI   BUFF01+7,C'1'           INPUT(2) = 1?
         BE    TTTINP14                   YES: PROCESS MOVEMENT
*
         CLI   BUFF01+7,C'2'           INPUT(2) = 2?
         BE    TTTINP14                   YES: PROCESS MOVEMENT
*
         CLI   BUFF01+7,C'3'           INPUT(2) = 3?
         BE    TTTINP14                   YES: PROCESS MOVEMENT
*
*         MVC   REC051MS,WHITES         UNKNOWN OPTION ...
*        MVC   REC051MS(L'MSG00002),MSG00002   ... SET MESSAGE ...
*        B     WMENU05A                ... AND RETRY
         MVI   TTTINBO,X'FF'           SET BAD-OPTION FLAG ...
         B     TTTINPUZ                ... AND RETURN
*
TTTINP14 MVI   TTTINMOV,X'FF'          SET MOVE-ENTERED FLAG
         MVC   TTTINMVR(1),BUFF01+6    SET ROW-OF-MOVE
         MVC   TTTINMVC(1),BUFF01+7    SET COLUMN-OF-MOVE
         B     TTTINPUZ                AND RETURN
*
TTTINP2  MVI   TTTINF2,X'FF'           SET F2-KEY-PRESSED FLAG
         B     TTTINPUZ                AND RETURN
*
TTTINP3  MVI   TTTINF3,X'FF'           SET F3-KEY-PRESSED FLAG
         B     TTTINPUZ                AND RETURN
*
TTTINPUZ LM    R0,R2,TTTINPR0          RESTORE GR0,GR1,GR2
         BR    R6                      RETURN
*
TTTINPR0 DS    F                       SAVEAREA FOR R0
TTTINPR1 DS    F                       SAVEAREA FOR R1
TTTINPR2 DS    F                       SAVEAREA FOR R2
*
**********************************************************************
* CHECK-3-IN-LINE ROUTINE - CHECKS THE CURRENT BOARD TO DETERMINE
*                           WETHER THERE A 3-IN-LINE CONDITION
*                           EXISTS OR NOT.
*
* ON ENTRY:
* R1 POINTS TO THE BOARD TO CHECK
* R6: RETURN ADDRESS
*
* ON RETURN:
* R15: 0 IF THERE IS NO 3-IN-LINE; 1 IF THERE IS 3-IN-LINE
*
* 3-IN-LINE TEST:
*
*             0 | 1 | 2
*            ---+---+---
*             3 | 4 | 5
*            ---+---+---
*             6 | 7 | 8
*
*    IF ((0 <> blank AND (0=1=2 OR 0=3=6 OR 0=4=8)) OR    <-- TEST1
*        (4 <> blank AND (3=4=5 OR 1=4=7 OR 2=4=6)) OR    <-- TEST2
*        (8 <> blank AND (6=7=8 OR 2=5=8)))               <-- TEST3
*    THEN 3-IN-LINE := TRUE
*    ELSE 3-IN-LINE := FALSE
*
*********************************************************************
         DS    0H
TTT3LCHK EQU   *
*
* TEST1 IS: (0 <> blank AND (0=1=2 OR 0=3=6 OR 0=4=8))
*
TTT3LCT1 CLI   0(R1),C' '              CELL(0) IS BLANK?
         BE    TTT3LCT2                    YES: GO TO TEST2
*
         CLC   0(1,R1),1(R1)           CELL(0) == CELL(1)?
         BNE   TTT3LC01                    NO: GO TO NEXT TEST
         CLC   0(1,R1),2(R1)           CELL(0) == CELL(1) == CELL(2)?
         BE    TTT3LCOK                    YES: GO TO END-OK
*
TTT3LC01 CLC   0(1,R1),3(R1)           CELL(0) == CELL(3)?
         BNE   TTT3LC02                    NO: GO TO NEXT TEST
         CLC   0(1,R1),6(R1)           CELL(0) == CELL(3) == CELL(6)?
         BE    TTT3LCOK                    YES: GO TO END-OK
*
TTT3LC02 CLC   0(1,R1),4(R1)           CELL(0) == CELL(4)?
         BNE   TTT3LCT2                    NO: GO TO TEST2
         CLC   0(1,R1),8(R1)           CELL(0) == CELL(4) == CELL(8)?
         BE    TTT3LCOK                    YES: GO TO END-OK
*
* TEST2 IS: (4 <> blank AND (3=4=5 OR 1=4=7 OR 2=4=6))
*
TTT3LCT2 CLI   4(R1),C' '              CELL(4) IS BLANK?
         BE    TTT3LCT3                    YES: GO TO TEST3
*
         CLC   3(1,R1),4(R1)           CELL(3) == CELL(4)?
         BNE   TTT3LC03                    NO: GO TO NEXT TEST
         CLC   3(1,R1),5(R1)           CELL(3) == CELL(4) == CELL(5)?
         BE    TTT3LCOK                    YES: GO TO END-OK
*
TTT3LC03 CLC   1(1,R1),4(R1)           CELL(1) == CELL(4)?
         BNE   TTT3LC04                    NO: GO TO NEXT TEST
         CLC   1(1,R1),7(R1)           CELL(1) == CELL(4) == CELL(7)?
         BE    TTT3LCOK                    YES: GO TO END-OK
*
TTT3LC04 CLC   2(1,R1),4(R1)           CELL(2) == CELL(4)?
         BNE   TTT3LCT3                    NO: GO TO TEST3
         CLC   2(1,R1),6(R1)           CELL(2) == CELL(4) == CELL(6)?
         BE    TTT3LCOK                    YES: GO TO END-OK
*
* TEST3 IS: (8 <> blank AND (6=7=8 OR 2=5=8))
*
TTT3LCT3 CLI   8(R1),C' '              CELL(8) IS BLANK?
         BE    TTT3LCNO                    YES: GO TO END-NO-OK
*
         CLC   6(1,R1),7(R1)           CELL(6) == CELL(7)?
         BNE   TTT3LC05                    NO: GO TO NEXT TEST
         CLC   6(1,R1),8(R1)           CELL(6) == CELL(7) == CELL(8)?
         BE    TTT3LCOK                    YES: GO TO END-OK
*
TTT3LC05 CLC   2(1,R1),5(R1)           CELL(2) == CELL(5)?
         BNE   TTT3LCNO                    NO: GO TO END-NO-OK
         CLC   2(1,R1),8(R1)           CELL(2) == CELL(5) == CELL(8)?
         BE    TTT3LCOK                    YES: GO TO END-OK
*
* END NO-OK
*
TTT3LCNO SR    R15,R15                 R15 := 0, 3-IN-LINE NOT FOUND
         B     TTT3LCHZ                GO TO END
*
* END OK
*
TTT3LCOK LA    R15,1                   R15 := 1, 3-IN-LINE FOUND
         B     TTT3LCHZ                GO TO END
*
TTT3LCHZ BR    R6                      RETURN
*
**********************************************************************
* CHECK-FULL-BOARD ROUTINE - CHECKS THE CURRENT BOARD TO DETERMINE
*                            WHETHER IT IS FULL OR NOT.
*
* ON ENTRY:
* R1 POINTS TO THE BOARD TO CHECK
* R6: RETURN ADDRESS
*
* ON RETURN:
* R15: 0 IF THE BOARD IS NOT FULL; 1 IF IT IS FULL
*
* FULL-BOARD TEST:
*
*             0 | 1 | 2
*            ---+---+---
*             3 | 4 | 5
*            ---+---+---
*             6 | 7 | 8
*
*    FULL-BOARD := TRUE
*    FOR EACH CELL IN BOARD
*      IF CELL IS EMPTY THEN FULL-BOARD := FALSE
*********************************************************************
TTTFULL  STM   R0,R1,TTTFULR0          SAVE GR0,GR1
*
         LA    R15,1                   R15 := 1 MEANS 'BOARD IS FULL'
*
* PREPARE LOOP TO CHECK EACH CELL FOR EMPTINESS
*
         LA    R0,9(0)                 INIT GR0 := # OF CELLS
*
* BEGINNING OF LOOP TO CHECK EACH CELL
*
TTTFUL01 CLI   0(R1),C' '              CELL == BLANK?
         BE    TTTFULEN                   YES: GO TO END-NO-FULL
         LA    R1,1(0,R1)              R1 FORWARD ONE POSITION
         BCT   R0,TTTFUL01             UNTIL ALL CELLS CHECKED
*
* END OF LOOP TO CHECK EACH CELL
*
TTTFULLZ LM    R0,R1,TTTFULR0          RESTORE GR0,GR1
         BR    R6                      RETURN
*
TTTFULEN EQU   *                       END-NO-FULL
         SR    R15,R15                 R15 := 0 MEANS 'BOARD NOT FULL'
         B     TTTFULLZ                GO TO END
*
TTTFULR0 DS    F                       SAVEAREA FOR R0
TTTFULR1 DS    F                       SAVEAREA FOR R1
*
**********************************************************************
* UPDATE TABLE OF MOVES
*
* R1 POINTS TO A BYTE WHICH CONTAINS THE PLAYER (H, M)
* R2 POINTS TO A BYTE WHICH CONTAINS THE ROW (A, B, C)
* R3 POINTS TO A BYTE WHICH CONTAINS THE COLUMN (1, 2, 3)
* R6: RETURN ADDRESS
*
* TABLE OVERFLOW IS NOT CHECKED. IT SHOULD NOT BE CALLED IN THIS CASE.
*********************************************************************
TTTUPDMT ST    R4,TTTUPDR4             SAVE GR4
         ST    R6,TTTUPDR6             SAVE GR6
*
         LA    R4,TTTMVTBL             GR4 -> TABLE OF MOVES
         LH    R6,TTTMVTPT             GR6 := OFFSET OF NEXT ENTRY
         AR    R4,R6                   GR4 -> NEXT ENTRY
         LA    R6,3(0,R6)              MOVE FORWARD ...
         STH   R6,TTTMVTPT             ... TTTMVTPT
         USING TTTMTE,R4               ADDRESSABILITY FOR ENTRY
*
         MVC   TTTMTEP(1),0(R1)        SET PLAYER IN TABLE ENTRY
         MVC   TTTMTER(1),0(R2)        SET ROW    IN TABLE ENTRY
         MVC   TTTMTEC(1),0(R3)        SET COLUMN IN TABLE ENTRY
*
         DROP  R4
*
TTTUPDMZ L     R4,TTTUPDR4             RESTORE GR4
         L     R6,TTTUPDR6             RESTORE GR6
         BR    R6                      RETURN
*
TTTUPDR4 DS    F                       SAVEAREA FOR R4
TTTUPDR6 DS    F                       SAVEAREA FOR R6
*
**********************************************************************
* BUILD DECISION TREE
*
* R6: RETURN ADDRESS
*
* THE TREE IS BUILT FROM ADDRESS TTTNODST ON.
* ROOT NODE IS ASSUMED TO BE AT ADDRESS TTTNODST.
*
* Algorithm:
*  initialize tree data-structures
*  initialize root node
*  initialize first level -> root node
*  for i = 1 to MAX_DEPTH - 1
*   s := symbol to move at level i
*   for each node n at level i
*    if n is not a leaf-node
*     for each cell c empty in node n
*      n' := node obtained by writing in n symbol s in cell c
*      if there exists a node n'' child of n equivalent to n'
*       do nothing
*      else if there exists a node n'' at level i+1 equivalent to n'
*       make n'' son of n
*      else
*       make n' new node at level i+1, son of n
*      end-if
*     end-for (c)
*    end-if
*   end-for (n)
*  end-for (i)
*********************************************************************
TTTBLDT  STM   R1,R6,TTTBLDR1          SAVE GR1,GR2,GR3,GR4,GR5,GR6
         ST    R15,TTTBLDRF            SAVE GR15
*
         LA    R1,TTTNODST             TTTNXNPT -> ...
         ST    R1,TTTNXNPT                  ... -> TTTNODST
*
         MVC   TTTLVLPT(40),ZERO16     INIT LIST OF LEVEL-POINTERS
*
         BAL   R6,TTTONN               GET NEW NODE FOR ROOT
         USING NODE,R2
         MVC   NODBOARD,TTTBOARD       COPY CURRENT BOARD TO ROOT
         DROP  R2
         ST    R2,TTTLVLPT             ROOT NODE IS 1ST OF LEVEL-1
*
         LH    R1,TTTMXDEP             TTTBLDM1 :=        ...
         LA    R2,1                    ... TREE_MAX_DEPTH ...
         SR    R1,R2                   ... MINUS          ...
         STH   R1,TTTBLDM1             ... ONE
         STH   R2,TTTBLDLV             CURRENT-TREE-LEVEL := 1
         MVC   TTTBLDSY,TTTMSYM        SYMBOL TO WRITE:=MACHINE SYMBOL
         LA    R2,TTTLVLPT             R2 -> FIRST LEVEL POINTER
         L     R1,0(R2)                R1 -> FIRST NODE IN FIRST LEVEL
*
TTTBLDT1 CLC   TTTBLDLV,TTTBLDM1       LEVEL > MAX_DEPTH - 1?
         BH    TTTBLDTZ                    YES: GO TO END
*
TTTBLDT5 LTR   R1,R1                   MORE NODES IN LEVEL?
         BZ    TTTBLDT2                    NO: GO TO NEXT LEVEL
*
TTTBLDT6 ST    R1,TTTBLR1B             SAVE GR1
         USING NODE,R1
         LA    R1,NODBOARD             R1 -> BOARD OF NODE
         DROP  R1
         BAL   R6,TTTLNC               GO TO CHECK IF IT IS A LEAF-NODE
         L     R1,TTTBLR1B             RESTORE GR1
         LTR   R15,R15                 NODE IS LEAF-NODE?
         BZ    TTTBLDT7                    YES: GO FOR NEXT NODE
*
         LA    R3,TTTBLDBO             R3 -> AUX. BOARD
         LA    R4,9                    R4 := NUMBER OF CELLS
*
         USING NODE,R1
TTTBLDT8 MVC   TTTBLDBO,NODBOARD       COPY NODE BOARD TO AUX. BOARD
         DROP  R1
*
         CLI   0(R3),C' '              CELL EMPTY?
         BNE   TTTBLDT9                    NO: GO FOR NEXT CELL
*
         MVC   0(1,R3),TTTBLDSY        MOVE SYMBOL TO EMPTY CELL
*
         STM   R2,R4,TTTBLR2B          SAVE GR2,GR3,GR4
         LA    R3,TTTBLDBO             R3 -> AUX. BOARD
         USING NODE,R1
         LA    R4,NODC1                R4 -> POINTER TO FIRST CHILD
         DROP  R1
TTTBLDTG L     R2,0(R4)                R2 -> NEXT CHILD
         LTR   R2,R2                   ARE THERE MORE CHILDREN?
         BNZ   TTTBLDTD                 YES: GO TO COMPARE WITH CHILD
         LM    R2,R4,TTTBLR2B           NO:  RESTORE GR2,GR3,GR4
         B     TTTBLDTE                      ... AND GO TO CHECK LEVEL
*
         USING NODE,R2
TTTBLDTD LA    R2,NODBOARD             R2 -> BOARD OF CHILD NODE
         DROP  R2
         BAL   R6,CMPBOARD             COMPARE AUX.BOARD TO CHILD
         LTR   R15,R15                 EQUIVALENT?
         BNZ   TTTBLDTF                 NO: GO ON FOR NEXT CHILD
         LM    R2,R4,TTTBLR2B           YES: RESTORE GR2,GR3,GR4
         B     TTTBLDT9                      ... AND GO FOR NEXT MOVE
TTTBLDTF LA    R4,4(R4)                R4 -> POINTER TO NEXT CHILD
         B     TTTBLDTG                GO TO CHECK NEXT CHILD
*
TTTBLDTE STM   R2,R4,TTTBLR2B          SAVE GR2,GR3,GR4
         LR    R4,R3                   R4 -> CELL WRITTEN
         LA    R3,TTTBLDBO             R3 -> AUX. BOARD
         SR    R4,R3                   R4 := CELL NUMBER
         LA    R2,4(R2)                R2 -> FIRST NODE IN ...
         L     R2,0(R2)                      ... NEXT LEVEL
         BAL   R6,TTTSLV               GO TO SCAN NEXT LEVEL FOR BOARD
         LTR   R2,R2                   NODE FOUND IN NEXT LEVEL?
         BZ    TTTBLDTA                 NO: OBTAIN A NEW NODE
         B     TTTBLDTC                 YES: MAKE NEW NODE SON OF ...
*                                            ... THE OLD ONE
TTTBLDTB LM    R2,R4,TTTBLR2B          RESTORE GR2,GR3,GR4
*
TTTBLDT9 LA    R3,1(R3)                R3 -> NEXT CELL
         BCT   R4,TTTBLDT8             GO TO PROCESS NEXT CELL ...
*                                      ... IF THERE ARE MORE
*
         B     TTTBLDT7                GO TO PROCESS NEXT NODE
*
TTTBLDTZ LM    R1,R6,TTTBLDR1          RESTORE GR1,GR2,GR3,GR4,GR5,GR6
         L     R15,TTTBLDRF            RESTORE GR15
         BR    R6                      RETURN
*
TTTBLDT2 LH    R15,TTTBLDLV            INCREMENT ...
         LA    R15,1(R15)              ... CURRENT-TREE-LEVEL ...
         STH   R15,TTTBLDLV            ... BY ONE
*
         CLC   TTTBLDSY,TTTMSYM        SYMBOL TO WRITE=MACHINE-SYMBOL?
         BE    TTTBLDT3                   YES: SWITCH TO HUMAN-SYMBOL
         MVC   TTTBLDSY,TTTMSYM           NO:  SWITCH TO MACHINE-SYMB
         B     TTTBLDT4                        ... AND CONTINUE
TTTBLDT3 MVC   TTTBLDSY,TTTHSYM        SWITCH TO HUMAN-SYMBOL
*
TTTBLDT4 LA    R2,4(R2)                R2 -> NEXT-LEVEL POINTER
         L     R1,0(R2)                R1 -> FIRST NODE IN NEXT LEVEL
         B     TTTBLDT1                GO TO PROCESS NEXT LEVEL
*
         USING NODE,R1
TTTBLDT7 L     R1,NODNXTL              R1 -> NEXT NODE IN LEVEL
         B     TTTBLDT5                GO TO PROCESS NEXT NODE
*
         DROP  R1
*
TTTBLDTA BAL   R6,TTTONN               GET A NEW INITIALIZED NODE
         USING NODE,R2
         MVC   NODBOARD,TTTBLDBO       COPY AUX. BOARD TO NEW NODE
         DROP  R2
         LR    R3,R2                   R3 -> NEW NODE
         LA    R5,TTTBLDSY             R5 -> SYMBOL OF MOVE
         L     R2,TTTBLR2B             RESTORE GR2 (-> CURRENT LEVEL)
         LA    R2,4(R2)                R2 -> NEXT-LEVEL POINTER
         BAL   R6,TTTCHN               GO TO CHAIN NEW NODE
         B     TTTBLDTB                GO ON
*
TTTBLDTC LR    R3,R2                   R3 -> NODE TO CHAIN
         LA    R5,TTTBLDSY             R5 -> SYMBOL OF MOVE
         BAL   R6,TTTCHO               GO TO CHAIN EXISTING NODE
         B     TTTBLDTB                GO ON
*
TTTBLDR1 DS    F                       SAVEAREA FOR R1
TTTBLDR2 DS    F                       SAVEAREA FOR R2
TTTBLDR3 DS    F                       SAVEAREA FOR R3
TTTBLDR4 DS    F                       SAVEAREA FOR R4
TTTBLDR5 DS    F                       SAVEAREA FOR R5
TTTBLDR6 DS    F                       SAVEAREA FOR R6
TTTBLDRF DS    F                       SAVEAREA FOR R15
*
TTTBLR1B DS    F                       SECOND SAVEAREA FOR R1
TTTBLR2B DS    F                       SECOND SAVEAREA FOR R2
TTTBLR3B DS    F                       SECOND SAVEAREA FOR R3
TTTBLR4B DS    F                       SECOND SAVEAREA FOR R4
*
TTTBLDLP DS    F                       LEVEL POINTER
TTTBLDLV DS    H                       CURRENT-TREE-LEVEL
TTTBLDM1 DS    H                       MAX DEPTH - 1
TTTBLDSY DS    C                       SYMBOL TO WRITE
TTTBLDBO DS    CL9                     GAME BOARD
*
**********************************************************************
* ASSIGN VALUES TO THE TREE - SCANS THE WHOLE TREE AND ASSIGNS VALUES
*                             TO ALL THE NODES.
*
* ON ENTRY:
* R6: RETURN ADDRESS
*
* THE LEVELS OF THE TREE ARE SCANNED FROM BOTTOM UPWARD.
*
* Algorithm:
*     for l = 10 to 1   (scans levels from 10 up to 1)
*       type := MAX if l is odd, MIN if l es even
*       for each node n in level l
*         if n has no children
*           value-of-n := compute-value-function()
*         else
*           value-of-n := -infinite if type=MAX,
*                         +infinite if type=MIN
*           for each node n' child of n
*             if type=MAX value-of-n := max(value-of-n, value-of-n')
*             if type=MIN value-of-n := min(value-of-n, value-of-n')
*           end-for (n')
*         end-if
*       end-for (n)
*     end-for (l)
*********************************************************************
TTTAVT   STM   R1,R2,TTTAVTR1          SAVE GR1,GR2
         STM   R4,R6,TTTAVTR4          SAVE GR4,GR5,GR6
         ST    R15,TTTAVTRF            SAVE GR15
*
         LA    R1,TTTLVLPT             R1 -> POINTER TO FIRST NODE ...
         LA    R1,36(R1)                     ... OF LAST LEVEL (10th)
         MVI   TTTAVTLT,X'00'          LEVEL TYPE := MIN (X'00')
*
TTTAVT02 L     R2,0(R1)                R2 -> FIRST NODE IN LEVEL
TTTAVT06 LTR   R2,R2                   MORE NODES IN LEVEL?
         BZ    TTTAVT01                    NO: GO TO CHANGE LEVEL
*
         USING NODE,R2                 ADDRESSABILITY FOR NODE
         CLC   NODC1,ZERO16            DOES NODE HAVE ANY CHILD?
         BE    TTTAVT08                    NO: GO TO COMPUTE FUNCTION
         DROP  R2
         CLI   TTTAVTLT,X'00'          LEVEL TYPE = MIN?
         BE    TTTAVT03                    YES: GO TO PROCESS IT
*
* TREATMENT FOR NODES OF TYPE MAX
*
         USING NODE,R2                 ADDRESSABILITY FOR NODE
         MVI   NODVINF,C'-'            INITIAL VALUE := -INFINITE
         LA    R4,NODC1                R4 -> NODC1 -> FIRST CHILD
         DROP  R2
TTTAVT04 L     R5,0(R4)                R5 -> FIRST/NEXT CHILD
         LTR   R5,R5                   MORE CHILDREN?
         BZ    TTTAVT05                 NO: GO FOR NEXT NODE IN LEVEL
*
         ST    R1,TTTAVR1B             SAVE GR1
         STM   R3,R4,TTTAVR3B          SAVE GR3,GR4
*
         LR    R1,R5                   R1 -> CHILD
         LA    R3,TTTAVTMM             R3 -> AUXILIARY STORAGE
         LR    R4,R2                   R4 -> VALUE OF NODE
         BAL   R6,TTTMXMN              OBTAIN MIN/MAX VALUES ...
*                                      ... VALUE:=MAX(NODE,CHILD)
*
         L     R1,TTTAVR1B             RESTORE GR1
         LM    R3,R4,TTTAVR3B          RESTORE GR3,GR4
*
         LA    R4,4(R4)                R4 -> POINTER TO NEXT CHILD
         B     TTTAVT04                GO ON TO PROCESS NEXT CHILD
*
* TREATMENT FOR NODES OF TYPE MIN
*
         USING NODE,R2                 ADDRESSABILITY FOR NODE
TTTAVT03 MVI   NODVINF,C'+'            INITIAL VALUE := +INFINITE
         LA    R4,NODC1                R4 -> NODC1 -> FIRST CHILD
         DROP  R2
TTTAVT07 L     R5,0(R4)                R5 -> FIRST/NEXT CHILD
         LTR   R5,R5                   MORE CHILDREN?
         BZ    TTTAVT05                 NO: GO FOR NEXT NODE IN LEVEL
*
         ST    R1,TTTAVR1B             SAVE GR1
         STM   R3,R4,TTTAVR3B          SAVE GR3,GR4
*
         LR    R1,R5                   R1 -> CHILD
         LR    R3,R2                   R3 -> VALUE OF NODE
         LA    R4,TTTAVTMM             R4 -> AUXILIARY STORAGE
         BAL   R6,TTTMXMN              OBTAIN MIN/MAX VALUES ...
*                                      ... VALUE:=MIN(NODE,CHILD)
*
         L     R1,TTTAVR1B             RESTORE GR1
         LM    R3,R4,TTTAVR3B          RESTORE GR3,GR4
*
         LA    R4,4(R4)                R4 -> POINTER TO NEXT CHILD
         B     TTTAVT07                GO ON TO PROCESS NEXT CHILD
*
TTTAVT01 LA    R2,TTTLVLPT             IS THERE ANY ...
         CLR   R1,R2                   ... LEVEL LEFT?
         BE    TTTAVTZ                     NO: GO TO END
         LA    R2,4                    R1 -> POINTER TO FIRST NODE...
         SR    R1,R2                         ... OF PREVIOUS LEVEL
         XI    TTTAVTLT,X'FF'          SWITCH LEVEL TYPE (MIN<->MAX)
         B     TTTAVT02                GO ON TO EVALUATE NEW LEVEL
*
         USING NODE,R2                 ADDRESSABILITY FOR NODE
TTTAVT05 L     R2,NODNXTL              R2 -> NEXT NODE IN LEVEL
         DROP  R2
         B     TTTAVT06                GO TO PROCESS NEXT NODE IN LEV.
*
TTTAVTZ  LM    R1,R2,TTTAVTR1          RESTORE GR1,GR2
         LM    R4,R6,TTTAVTR4          RESTORE GR4,GR5,GR6
         L     R15,TTTAVTRF            RESTORE GR15
         BR    R6                      RETURN
*
* HERE WE SELECT AND COMPUTE A VALUE-FUNCTION TO ASSIGN A VALUE TO
* THE NODE
*
TTTAVT08 ST    R1,TTTAVR1C             SAVE GR1
         USING NODE,R2                 ADDRESSABILITY FOR NODE
         LA    R1,NODBOARD             R1 -> BOARD OF NODE
         DROP  R2
         BAL   R6,TTTF01               GO TO COMPUTE FUNC. #01
         L     R1,TTTAVR1C             RESTORE GR1
         B     TTTAVT05                GO ON TO PROCESS NEXT NODE
*
TTTAVTLT DS    XL1                     LEVEL TYPE (00:MIN, FF:MAX)
TTTAVTMM DS    H                       PLACE HOLDER FOR AN ...
         DS    CL1                     ... AUXILIARY VALUE
*
TTTAVTR1 DS    F                       SAVEAREA FOR R1
TTTAVTR2 DS    F                       SAVEAREA FOR R2
TTTAVTR4 DS    F                       SAVEAREA FOR R4
TTTAVTR5 DS    F                       SAVEAREA FOR R5
TTTAVTR6 DS    F                       SAVEAREA FOR R6
TTTAVTRF DS    F                       SAVEAREA FOR R15
*
TTTAVR1B DS    F                       SECOND SAVEAREA FOR R1
TTTAVR3B DS    F                       SECOND SAVEAREA FOR R3
TTTAVR4B DS    F                       SECOND SAVEAREA FOR R4
*
TTTAVR1C DS    F                       THIRD SAVEAREA FOR R1
*
**********************************************************************
* COMPUTE FUNCTION #01 ROUTINE - COMPUTES FUNCTION NUMBER 01 FOR A
*                                BOARD
*
* ON ENTRY:
* R1 POINTS TO THE NODE WHOSE VALUE IS TO BE CALCULATED
* R2 POINTS TO A VALUE-STRUCTURE TO STORE THE CALCULATED VALUE
*    A VALUE-STRUCTURE HAS THE FORMAT:
*
*    VAL      DS    H           VALUE, IF NOT +/- INFINITE
*    VINF     DS    CL1         '+': +INFINITE, '-': -INFINITE,
*
* R6: RETURN ADDRESS
*
* FUNCTION #01 IS:
*
*    +INFINITE     IF THE BOARD CONTAINS 3-IN-LINE FOR THE MACHINE
*
*    -INFINITE     IF THE BOARD CONTAINS 3-IN-LINE FOR THE HUMAN
*
*    RCD_M - RCD_H OTHERWISE
*
*        RCD_M  IS THE NUMBER OF ROWS, COLUMNS AND DIAGONALS
*               AVAILABLE FOR THE MACHINE (I.E., THOSE WHICH DO NOT
*               CONTAIN ANY HUMAN-PLAYER'S SYMBOL).
*
*        RCD_H  IS THE NUMBER OF ROWS, COLUMNS AND DIAGONALS
*               AVAILABLE FOR THE HUMAN PLAYER (I.E., THOSE WHICH DO
*               NOT CONTAIN ANY MACHINE'S SYMBOL).
*
*********************************************************************
TTTF01   STM   R1,R8,TTTF01R1          SAVE GR1-GR8
*
         LR    R4,R1                   R4 -> BOARD
         LR    R3,R2                   R3 -> VALUE STRUCTURE
         XC    0(2,R3),0(R3)           INIT. NODE VALUE ...
         MVI   2(R3),C' '              ... TO 0
*
         XC    TTTF01NM,TTTF01NM       CLEAR NM COUNTER
         XC    TTTF01NH,TTTF01NH       CLEAR NH COUNTER
*
         LA    R1,TTTF01BF             R1 -> BUFFER
         LA    R2,TTTF01NM             R2 -> COUNTERS
         SR    R5,R5                   R5 := 0 (FOR COMPARES)
         LA    R7,1                    R7 := 1 (FOR INCS./DECS.)
*
         MVC   TTTF01BF(3),0(R4)       BUFFER := ROW 0,1,2
         BAL   R6,TTTRCD               GO TO COUNT ROW'S SYMBOLS
         BAL   R6,TTTF0102             GO TO PROCESS RESULT
*
         MVC   TTTF01BF(3),3(R4)       BUFFER := ROW 3,4,5
         BAL   R6,TTTRCD               GO TO COUNT ROW'S SYMBOLS
         BAL   R6,TTTF0102             GO TO PROCESS RESULT
*
         MVC   TTTF01BF(3),6(R4)       BUFFER := ROW 6,7,8
         BAL   R6,TTTRCD               GO TO COUNT ROW'S SYMBOLS
         BAL   R6,TTTF0102             GO TO PROCESS RESULT
*
         MVC   TTTF01BF+0(1),0(R4)     !
         MVC   TTTF01BF+1(1),3(R4)     ! BUFFER := COLUMN 0,3,6
         MVC   TTTF01BF+2(1),6(R4)     !
         BAL   R6,TTTRCD               GO TO COUNT ROW'S SYMBOLS
         BAL   R6,TTTF0102             GO TO PROCESS RESULT
*
         MVC   TTTF01BF+0(1),1(R4)     !
         MVC   TTTF01BF+1(1),4(R4)     ! BUFFER := COLUMN 1,4,7
         MVC   TTTF01BF+2(1),7(R4)     !
         BAL   R6,TTTRCD               GO TO COUNT ROW'S SYMBOLS
         BAL   R6,TTTF0102             GO TO PROCESS RESULT
*
         MVC   TTTF01BF+0(1),2(R4)     !
         MVC   TTTF01BF+1(1),5(R4)     ! BUFFER := COLUMN 2,5,8
         MVC   TTTF01BF+2(1),8(R4)     !
         BAL   R6,TTTRCD               GO TO COUNT ROW'S SYMBOLS
         BAL   R6,TTTF0102             GO TO PROCESS RESULT
*
         MVC   TTTF01BF+0(1),0(R4)     !
         MVC   TTTF01BF+1(1),4(R4)     ! BUFFER := DIAGONAL 0,4,8
         MVC   TTTF01BF+2(1),8(R4)     !
         BAL   R6,TTTRCD               GO TO COUNT ROW'S SYMBOLS
         BAL   R6,TTTF0102             GO TO PROCESS RESULT
*
         MVC   TTTF01BF+0(1),2(R4)     !
         MVC   TTTF01BF+1(1),4(R4)     ! BUFFER := DIAGONAL 2,4,6
         MVC   TTTF01BF+2(1),6(R4)     !
         BAL   R6,TTTRCD               GO TO COUNT ROW'S SYMBOLS
         BAL   R6,TTTF0102             GO TO PROCESS RESULT
*
TTTF01Z  LM    R1,R8,TTTF01R1          RESTORE GR1-GR8
         BR    R6                      RETURN
*
TTTF0102 CLC   TTTF01NM(2),TTTF01K3    NM = 3?
         BE    TTTF0103                    YES: GO TO END +INF
         CLC   TTTF01NH(2),TTTF01K3    NH = 3?
         BE    TTTF0104                    YES: GO TO END -INF
         CH    R5,TTTF01NM             0 < NM?
         BNL   TTTF0105                    NO: GO ON
         LH    R8,0(R3)                    YES: INCREMENT BY ONE ...
         AR    R8,R7                            ... THE VALUE FOR ...
         STH   R8,0(R3)                         ... THE NODE
TTTF0105 CH    R5,TTTF01NH             0 < NH?
         BNL   TTTF0106                    NO: GO ON
         LH    R8,0(R3)                    YES: DECREMENT BY 1 ...
         SR    R8,R7                            ... THE VALUE FOR ...
         STH   R8,0(R3)                         ... THE NODE
TTTF0106 BR    R6                      RETURN
*
TTTF0103 MVI   2(R3),C'+'              NODE VALUE := +INFINITE
         B     TTTF01Z                 GO TO END
*
TTTF0104 MVI   2(R3),C'-'              NODE VALUE := -INFINITE
         B     TTTF01Z                 GO TO END
*
TTTF01NM DS    H                       # OF MACHINE-SYMBOLS IN BUFFER
TTTF01NH DS    H                       # OF HUMAN-SYMBOLS IN BUFFER
TTTF01BF DS    XL3                     BUFFER FOR A ROW/COL/DIAGONAL
TTTF01K3 DC    X'0003'                 2-BYTE-CONSTANT = 3
*
TTTF01R1 DS    F                       SAVEAREA FOR R1
TTTF01R2 DS    F                       SAVEAREA FOR R2
TTTF01R3 DS    F                       SAVEAREA FOR R3
TTTF01R4 DS    F                       SAVEAREA FOR R4
TTTF01R5 DS    F                       SAVEAREA FOR R5
TTTF01R6 DS    F                       SAVEAREA FOR R6
TTTF01R7 DS    F                       SAVEAREA FOR R7
TTTF01R8 DS    F                       SAVEAREA FOR R8
*
**********************************************************************
* COUNT-SYMBOLS ROUTINE - COUNTS THE NUMBER OF MACHINE-SYMBOLS AND
*                         HUMAN-SYMBOLS CONTAINED IN THREE CONSECUTIVE
*                         MEMORY POSITIONS.
*
* ON ENTRY:
* R1 POINTS TO THREE CONSECUTIVE MEMORY POSITIONS.
* R2 POINTS TO TWO CONSECUTIVE HALF-WORDS.
*              THE FIRST ONE IS TO CONTAIN THE NUMBER OF
*              MACHINE-SYMBOLS FOUND.
*              THE SECOND ONE IS TO CONTAIN THE NUMBER OF
*              HUMAN-SYMBOLS FOUND.
*
* ON ENTRY:
* R6: RETURN ADDRESS
*********************************************************************
TTTRCD   ST    R1,TTTRCDR1             SAVE GR1
         STM   R3,R5,TTTRCDR3          SAVE GR3-GR5
*
         SR    R3,R3                   R3 := 0 (COUNTER FOR M-SYMBOLS)
         LR    R4,R3                   R4 := 0 (COUNTER FOR H-SYMBOLS)
         LA    R5,3                    R5 := 3 (COUNTER FOR LOOP)
*
TTTRCD01 CLC   0(1,R1),TTTMSYM         CHAR = MACHINE-SYMBOL?
         BNE   TTTRCD02                    NO:  NEXT TEST
         LA    R3,1(R3)                    YES: M-SYMBOLS + 1
         B     TTTRCD03                         GO ON
TTTRCD02 CLC   0(1,R1),TTTHSYM         CHAR = HUMAN-SYMBOL?
         BNE   TTTRCD03                    NO:  GO ON
         LA    R4,1(R4)                    YES: H-SYMBOLS + 1
TTTRCD03 LA    R1,1(R1)                R1 -> NEXT INPUT POSITION
         BCT   R5,TTTRCD01             LOOP AGAIN IF NOT FINISHED
*
         STH   R3,0(R2)                STORE COUNTER FOR M-SYMBOLS
         STH   R4,2(R2)                STORE COUNTER FOR H-SYMBOLS
*
TTTRCDZ  L     R1,TTTRCDR1             RESTORE GR1
         LM    R3,R5,TTTRCDR3          RESTORE GR3-GR5
         BR    R6                      RETURN
*
TTTRCDR1 DS    F                       SAVEAREA FOR R1
TTTRCDR3 DS    F                       SAVEAREA FOR R3
TTTRCDR4 DS    F                       SAVEAREA FOR R4
TTTRCDR5 DS    F                       SAVEAREA FOR R5
*
**********************************************************************
* CHAIN A NEW NODE ROUTINE - CHAINS A NEW NODE TO ITS PARENT NODE AND
*                            TO THE PREVIOUS NODE IN ITS SAME LEVEL
*
* ON ENTRY:
* R1 POINTS TO THE PARENT NODE
* R2 POINTS TO THE LEVEL-POINTER OF THE LEVEL WHICH THE NEW NODE
*    BELONGS TO
* R3 POINTS TO THE NEW NODE
* R4 CONTAINS THE CELL NUMBER OF THE MOVE TO GO FROM THE PARENT
*    NODE TO THE CHILD NODE
* R5 POINTS TO A BYTE WHICH CONTAINS THE SYMBOL OF THE MOVE TO
*    GO FROM THE PARENT NODE TO THE CHILD NODE
* R6: RETURN ADDRESS
*
*         +-+          +---+               +---+
*         | |--------->|   |-------------->|   |<==== R1
*         +-+          |   |               |   |
*                      +---+               +---+
*                       | |                 |
*                   +---+ +---+         +---+
*                   |         |         |
*                   V         V         V
*         +-+     +---+     +---+     +---+     +---+
* R2 ====>| |---->|   |---->|   |---->|   |     |   |<==== R3
*         +-+     |   |     |   |     |   |     |   |
*                 +---+     +---+     +---+     +---+
*
*********************************************************************
TTTCHN   ST    R2,TTTCHNR2             SAVE GR2
         STM   R6,R7,TTTCHNR6          SAVE GR6,GR7
*
* LOOP TO FIND THE LAST NODE IN THE LEVEL POINTED TO BY R2
*
TTTCHN01 L     R6,0(R2)                R6 -> NEXT NODE IN LEVEL
         LTR   R6,R6                   MORE NODES IN LEVEL?
         BZ    TTTCHN02                    NO: END OF LEVEL REACHED
         USING NODE,R6                 ADDRESSABILITY FOR NODE
         LA    R2,NODNXTL              R2 -> NODNXTL -> NEXT NODE
         DROP  R6
         B     TTTCHN01                GO ON SEARCHING
TTTCHN02 ST    R3,0(R2)                CHAIN NEW NODE INTO LEVEL CHAIN
*
* LOOP TO FIND THE FIRST EMPTY CHILD OF THE PARENT NODE
*
         USING NODE,R1                 ADDRESSABILITY FOR NODE
         LA    R2,NODC1                R2 -> NODC1 -> FIRST CHILD
         LA    R7,NODM1                R7 -> MOVE TO FIRST CHILD
         DROP  R1
*
TTTCHN03 L     R6,0(R2)                R6 -> NEXT CHILD OF PARENT NODE
         LTR   R6,R6                   MORE CHILDREN?
         BZ    TTTCHN04                    NO: LAST CHILD FOUND
         LA    R2,4(R2)                R2 -> NODCx -> NEXT CHILD
         LA    R7,2(R7)                R7 -> MOVE TO NEXT CHILD
         B     TTTCHN03                GO ON SEARCHING
TTTCHN04 ST    R3,0(R2)                CHAIN NEW NODE AS A CHILD
         STC   R4,0(R7)                STORE CELL NUMBER OF MOVE
         MVC   1(1,R7),0(R5)           STORE SYMBOL OF MOVE
*
* GO BACK
*
         L     R2,TTTCHNR2             RESTORE GR2
         LM    R6,R7,TTTCHNR6          RESTORE GR6,GR7
         BR    R6                      RETURN
*
TTTCHNR2 DS    F                       SAVEAREA FOR R2
TTTCHNR6 DS    F                       SAVEAREA FOR R6
TTTCHNR7 DS    F                       SAVEAREA FOR R7
*
**********************************************************************
* CHAIN AN OLD NODE ROUTINE - CHAINS AN OLD NODE AS CHILD OF ANOTHER
*                             NODE
*
* ON ENTRY:
* R1 POINTS TO THE PARENT NODE
* R3 POINTS TO THE NODE TO CHAIN
* R4 CONTAINS THE CELL NUMBER OF THE MOVE TO GO FROM THE PARENT
*    NODE TO THE CHILD NODE
* R5 POINTS TO A BYTE WHICH CONTAINS THE SYMBOL OF THE MOVE TO
*    GO FROM THE PARENT NODE TO THE CHILD NODE
* R6: RETURN ADDRESS
*
*                   +---+               +---+
*                   |   |-------------->|   |<==== R1
*                   |   |               |   |
*                   +---+               +---+
*                    | |                 |
*                +---+ +---+         +---+
*                |         |         |
*                V         V         V
*              +---+     +---+     +---+
*      R3 ====>|   |---->|   |---->|   |
*              |   |     |   |     |   |
*              +---+     +---+     +---+
*
*********************************************************************
TTTCHO   ST    R2,TTTCHOR2             SAVE GR2
         STM   R6,R7,TTTCHOR6          SAVE GR6,GR7
*
* LOOP TO FIND THE FIRST EMPTY CHILD OF THE PARENT NODE
*
         USING NODE,R1                 ADDRESSABILITY FOR NODE
         LA    R2,NODC1                R2 -> NODC1 -> FIRST CHILD
         LA    R7,NODM1                R7 -> MOVE TO FIRST CHILD
         DROP  R1
*
TTTCHO03 L     R6,0(R2)                R6 -> NEXT CHILD OF PARENT NODE
         LTR   R6,R6                   MORE CHILDREN?
         BZ    TTTCHO04                    NO: LAST CHILD FOUND
         LA    R2,4(R2)                R2 -> NODCx -> NEXT CHILD
         LA    R7,2(R7)                R7 -> MOVE TO NEXT CHILD
         B     TTTCHO03                GO ON SEARCHING
TTTCHO04 ST    R3,0(R2)                CHAIN NEW NODE AS A CHILD
         STC   R4,0(R7)                STORE CELL NUMBER OF MOVE
         MVC   1(1,R7),0(R5)           STORE SYMBOL OF MOVE
*
* GO BACK
*
         L     R2,TTTCHOR2             RESTORE GR2
         LM    R6,R7,TTTCHOR6          RESTORE GR6,GR7
         BR    R6                      RETURN
*
TTTCHOR2 DS    F                       SAVEAREA FOR R2
TTTCHOR6 DS    F                       SAVEAREA FOR R6
TTTCHOR7 DS    F                       SAVEAREA FOR R7
*
**********************************************************************
* SCAN ONE LEVEL OF THE TREE
*
* SCANS THE NODES OF ONE LEVEL, LOOKING FOR A NODE WITH A BOARD
* EQUAL TO THE ONE GIVEN. IF FOUND RETURNS A POINTER TO THE NODE,
* ELSE RETURNS ZERO.
*
* ON ENTRY:
* R2 POINTS TO THE FIRST NODE OF THE LEVEL TO SCAN. ZERO IF LEVEL
*    IS EMPTY
* R3 POINTS TO THE BOARD TO LOOK FOR IN THE NODES OF THE LEVEL
* R6: RETURN ADDRESS
*
* ON RETURN:
* R2 POINTS TO THE NODE IF FOUND OR CONTAINS ZERO.
*********************************************************************
         USING NODE,R1                 ADDRESSABILITY FOR NODE
*
TTTSLV   ST    R1,TTTSLVR1             SAVE GR1
         ST    R6,TTTSLVR6             SAVE GR6
         ST    R15,TTTSLVRF            SAVE GR15
*
         LR    R1,R2                   GR1 -> FIRST NODE IN LEVEL
*
TTTSLV01 LTR   R1,R1                   MORE NODES IN LEVEL?
         BZ    TTTSLVNO                  NO: RETURN NOT-FOUND
*
         LA    R2,NODBOARD             GR2 -> BOARD OF NODE
         BAL   R6,CMPBOARD             GO TO COMPARE BOARDS
         LTR   R15,R15                 BOARDS EQUAL?
         BZ    TTTSLVOK                  YES: GO TO RETURN-FOUND
*
         L     R1,NODNXTL              R1 -> NEXT NODE IN LEVEL
         B     TTTSLV01                BACK TO LOOP
*
TTTSLVOK LR    R2,R1                   R2 -> NODE FOUND
         B     TTTSLVZ                 GO TO END
*
TTTSLVNO SR    R2,R2                   R2 := 0 (NODE NOT FOUND)
         B     TTTSLVZ                 GO TO END
*
         DROP  R1
*
TTTSLVZ  L     R1,TTTSLVR1             RESTORE GR1
         L     R6,TTTSLVR6             RESTORE GR6
         L     R15,TTTSLVRF            RESTORE GR15
         BR    R6                      RETURN
*
TTTSLVR1 DS    F                       SAVEAREA FOR R1
TTTSLVR6 DS    F                       SAVEAREA FOR R6
TTTSLVRF DS    F                       SAVEAREA FOR R15
*
**********************************************************************
* OBTAIN A NEW (INITIALIZED) ENTRY IN THE NODE'S TABLE
*
* ON ENTRY:
* R6: RETURN ADDRESS
*
* ON RETURN:
* R2 POINTS TO THE NEW ENTRY IN THE NODE'S TABLE
* TTTNXNPT UPDATED
*********************************************************************
         USING NODE,R2                 ADDRESSABILITY FOR NODE
*
TTTONN   ST    R1,TTTONNR1             SAVE GR1
*
         L     R2,TTTNXNPT             GR2 -> NEXT FREE SLOT IN ...
*                                             ... TABLE OF NODES
         XC    NODVALUE,NODVALUE       INIT NODVALUE
         MVI   NODVINF,C' '            INIT NODVINF
         MVI   NODVALOK,X'00'          FLAG VALUE-OK := OFF
         MVI   NODBOARD,C' '           CLEAR NODE ...
         MVC   NODBOARD+1(L'NODBOARD-1),NODBOARD  ... BOARD
         XC    NODNXTL,NODNXTL         INIT NODNXTL
         XC    NODC1,NODC1             NODC1 := ZERO
         XC    NODC2,NODC2             NODC2 := ZERO
         MVC   NODC3(L'NODC3+L'NODC4),NODC1 NODC3,NODC4 := ZERO
         MVC   NODC5(L'NODC5+L'NODC6+L'NODC7),NODC1 NODC5,6,7=ZERO
         MVC   NODMARK(L'NODMARK),NODC1     NODMARK := ZERO
         MVI   NODM1,X'00'             INIT ...
         MVI   NODM1+1,C' '            ... NODM1
         MVC   NODM2(2),NODM1          INIT NODM2
         MVC   NODM3(4),NODM1          INIT NODM3,NODM4
         MVC   NODM5(6),NODM1          INIT NODM5,NODM6,NODM7
*
         LA    R1,NODNEXT              UPDATE ...
         ST    R1,TTTNXNPT             ... TTTNXNPT
*
         DROP  R2
*
TTTONNZ  L     R1,TTTONNR1             RESTORE GR1
         BR    R6                      RETURN
*
TTTONNR1 DS    F                       SAVEAREA FOR R1
*
**********************************************************************
* CHECK-3-IN-LINE-OR-FULL-BOARD ROUTINE - PERFORMS A CHECK TO
*                           DETERMINE IF THE BOARD PASSED AS AN
*                           ARGUMENT HAS A 3-IN-LINE CONDITION OR
*                           IS FULL.
*
* ON ENTRY:
* R1 POINTS TO THE BOARD TO CHECK
* R6: RETURN ADDRESS
*
* ON RETURN:
* R15: CONTAINS THE RESULT: R15=0 IF IT HAS A 3-IN-LINE CONDITION
*                                 OR IS FULL.
*                           R15=1 IF IT IS NOT.
*********************************************************************
TTTLNC   ST    R6,TTTLNCR6             SAVE GR6
*
         BAL   R6,TTT3LCHK             GO TO CHECK 3-IN-LINE
         LTR   R15,R15                 IS THERE 3-IN-LINE?
         BNZ   TTTLNCY                     YES: GO TO END-YES
*
         BAL   R6,TTTFULL              GO TO CHECK FULL-BOARD
         LTR   R15,R15                 IS THE BOARD FULL?
         BNZ   TTTLNCY                     YES: GO TO END-YES
*
TTTLNCN  LA    R15,1                   R15=1 MEANS 'NO LEAF-NODE'
*
TTTLNCZ  L     R6,TTTLNCR6             RESTORE GR6
         BR    R6                      RETURN
*
TTTLNCY  SR    R15,R15                 R15=0 MEANS 'LEAF-NODE'
         B     TTTLNCZ                 GO TO END
*
TTTLNCR6 DS    F                       SAVEAREA FOR R6
*
**********************************************************************
* MOVE-SELECTION ROUTINE - SELECTS THE NEXT MOVE FOR THE MACHINE.
*
* ON ENTRY:
* R6: RETURN ADDRESS
*
* ON RETURN:
*    R2 := CELL NUMBER FOR THE MOVE (0 - 8)
*    TTTMCHMR := MACHINE MOVE ROW ('A','B','C')
*    TTTMCHMC := MACHINE MOVE COLUMN ('1','2','3')
*
* THE MOVE SELECTED IS THE ONE NECESSARY TO GO FROM THE ROOT NODE
* TO THE NODE IN THE SECOND LEVEL WITH THE MAXIMUM VALUE.
* IF MORE THAN ONE NODE OF THE SECOND LEVEL HAVE THE MAXIMUM VALUE
* THE FIRST ONE FOUND IS SELECTED.
*
* Algorithm:
*     let r be the root node
*     max-so-far := value-of-first-child
*     move := move-to-first-child
*     for each node n child of r (except first child)
*         if value-of-n > max-so-far then
*             max-so-far := value-of-n
*             move := move-to-n
*         end-if
*     end-for (n)
*********************************************************************
TTTMVS   ST    R1,TTTMVSR1             SAVE GR1
         STM   R3,R6,TTTMVSR3          SAVE GR3-GR6
         ST    R15,TTTMVSRF            SAVE GR15
*
         BAL   R6,TTTBLDT              GO TO BUILD DECISION TREE
         BAL   R6,TTTAVT               GO TO ASSIGN VALUES TO TREE
*
         L     R6,TTTLVLPT             R6 -> FIRST NODE OF 1ST LEVEL
*
         USING NODE,R6                 ADDRESSABILITY FOR NODE
         LA    R4,NODC1                R4 -> NODC1 -> FIRST CHILD
         LA    R3,NODM1                R3 -> MOVE TO FIRST CHILD
         DROP  R6
*
         MVC   TTTMVSMV(2),0(R3)       INIT MOVE := MOVE-TO-1ST-CHILD
         L     R5,0(R4)                R5 -> NEXT CHILD
         MVC   TTTMVSV(3),0(R5)        INIT MAX-SO-FAR := VAL-1ST-CHILD
*
TTTMVS01 LR    R1,R5                   R1 -> CHILD
         LA    R2,TTTMVSV              R2 -> MAX-SO-FAR
         BAL   R6,TTTVCMP              COMPARE BOTH VALUES
         STCM  R15,B'0001',TTTMVSRX    SAVE RETURN-CODE FROM TTTVCMP
         CLI   TTTMVSRX,X'01'          VALUE-OF-CHILD > MAX-SO-FAR?
         BNE   TTTMVS02                 NO: CONTINUE
         MVC   TTTMVSV(3),0(R5)         YES:MAX-SO-FAR := VALUE-CHILD
         MVC   TTTMVSMV(2),0(R3)            MOVE:= MOVE-TO-CHILD
*
TTTMVS02 LA    R4,4(R4)                R4 -> POINTER TO NEXT CHILD
         LA    R3,2(R3)                R3 -> MOVE TO NEXT CHILD
*
         L     R5,0(R4)                R5 -> NEXT CHILD
         LTR   R5,R5                   MORE CHILDREN?
         BNZ   TTTMVS01                 Y: GO ON TO PROCESS NEXT CHILD
*
         SR    R2,R2                   MAKE R2 TO CONTAIN ...
         ICM   R2,B'0001',TTTMVSMV     ... THE CELL NUMBER (0..8)
*
         LA    R1,TTTMVSCC             R1 -> TABLE OF COLUMN-COORDS
         AR    R1,R2                   R1 -> COLUMN-COORD FOR MOVE
         MVC   TTTMCHMC(1),0(R1)       COLUMN-COORD TO TTTMCHMC
*
         LA    R1,TTTMVSRC             R1 -> TABLE OF ROW-COORDS
         AR    R1,R2                   R1 -> ROW-COORD FOR MOVE
         MVC   TTTMCHMR(1),0(R1)       ROW-COORD TO TTTMCHMR
*
TTTMVSZ  L     R1,TTTMVSR1             RESTORE GR1
         LM    R3,R6,TTTMVSR3          RESTORE GR3-GR6
         L     R15,TTTMVSRF            RESTORE GR15
         BR    R6                      RETURN
*
TTTMVSV  DS    H                       NUMERICAL VALUE
TTTMVSVI DS    XL1                     +INF/-INF/NUMERICAL FLAG
*
TTTMVSXX DS    H                       AUXILIARY ...
         DS    XL1                     ... DUMMY STORAGE
TTTMVSMV DS    XL1                     MOVE: CELL (0,1,...,8)
         DS    CL1                     MOVE: SYMBOL ('X', 'O', blank)
*
TTTMVSRX DS    XL1                     RETURN-CODE FROM TTTVCMP
*
TTTMVSCC DC    C'123123123'            TABLE OF COLUMN-COORDINATES
TTTMVSRC DC    C'AAABBBCCC'            TABLE OF ROW-COORDINATES
*
TTTMVSR1 DS    F                       SAVEAREA FOR R1
TTTMVSR3 DS    F                       SAVEAREA FOR R3
TTTMVSR4 DS    F                       SAVEAREA FOR R4
TTTMVSR5 DS    F                       SAVEAREA FOR R5
TTTMVSR6 DS    F                       SAVEAREA FOR R6
TTTMVSRF DS    F                       SAVEAREA FOR R15
*
**********************************************************************
* GET-MAX-AND-MIN ROUTINE - COMPARES TWO VALUES AND RETURNS THE MAX
*                           AND THE MIN OF BOTH VALUES.
*
* ON ENTRY:
* R1 -> FIRST VALUE TO COMPARE
* R2 -> SECOND VALUE TO COMPARE
* R3 -> PLACE HOLDER FOR MIN VALUE
* R4 -> PLACE HOLDER FOR MAX VALUE
* R6: RETURN ADDRESS
*
*
* VALUE'S POINTED TO BY R1,R2,R3,R4 HAVE THE FOLLOWING FORMAT.
* THE VALUE +INFINITE (-INFINITE) IS REPRESENTED BY THE CHARACTER
* '+' ('-') IN THE VINF VARIABLE; IN THIS CASE, THE VALUE VARIABLE
* HAS NOT MEANING.
* ANY OTHER VALUE IS REPRESENTED BY THE CORRESPONDING NUMERIC
* VALUE IN THE VALUE VARIABLE AND A BLANK IN THE VINF VARIABLE.
*
* VALUE    DS    H           VALUE, IF NOT +/- INFINITE
* VINF     DS    CL1         '+': +INFINITE, '-': -INFINITE,
*                            ' ': VALUE SPECIFIED BY VALUE
*********************************************************************
TTTMXMN  ST    R5,TTTMXMR5             SAVE GR5
*
         CLI   2(R1),C'-'              V1 = -INFINITE?
         BNE   TTTMXMN1                    NO: GO ON FOR NEXT TEST
         MVI   2(R3),C'-'                  YES: MIN := -INFINITE
         MVC   0(3,R4),0(R2)                    MAX := V2
         B     TTTMXMNZ                         GO TO END
*
TTTMXMN1 CLI   2(R1),C'+'              V1 = +INFINITE?
         BNE   TTTMXMN2                    NO: GO ON FOR NEXT TEST
         MVC   0(3,R3),0(R2)               YES: MIN := V2
         MVI   2(R4),C'+'                       MAX := +INFINITE
         B     TTTMXMNZ                         GO TO END
*
TTTMXMN2 CLI   2(R2),C'-'              V2 = -INFINITE?
         BNE   TTTMXMN3                    NO: GO ON FOR NEXT TEST
         MVI   2(R3),C'-'                  YES: MIN := -INFINITE
         MVC   0(3,R4),0(R1)                    MAX := V1
         B     TTTMXMNZ                         GO TO END
*
TTTMXMN3 CLI   2(R2),C'+'              V2 = +INFINITE?
         BNE   TTTMXMN4                    NO: GO ON FOR NEXT TEST
         MVC   0(3,R3),0(R1)               YES: MIN := V1
         MVI   2(R4),C'+'                       MAX := +INFINITE
         B     TTTMXMNZ                         GO TO END
*
TTTMXMN4 MVI   2(R3),C' '              MIN IS NUMERIC
         MVI   2(R4),C' '              MAX IS NUMERIC
         LH    R5,0(R1)                R5 := V1
         CH    R5,0(0,R2)              V1 < V2 ?
         BL    TTTMXMN5                    YES: PROCESS IT
         MVC   0(2,R3),0(R2)               NO:  MIN := V2
         MVC   0(2,R4),0(R1)                    MAX := V1
         B     TTTMXMNZ                         GO TO END
*
TTTMXMN5 MVC   0(2,R3),0(R1)           MIN := V1
         MVC   0(2,R4),0(R2)           MAX := V2
         B     TTTMXMNZ                GO TO END
*
TTTMXMNZ L     R5,TTTMXMR5             RESTORE GR5
         BR    R6                      RETURN
*
TTTMXMR5 DS    F                       SAVEAREA FOR R5
*
**********************************************************************
* VALUE-COMPARE ROUTINE - COMPARES TWO VALUES. ON RETURN, R15 CONTAINS
*                         THE RESULT OF THE COMPARISON.
*
* ON ENTRY:
* R1 -> FIRST VALUE TO COMPARE
* R2 -> SECOND VALUE TO COMPARE
* R6: RETURN ADDRESS
*
* ON RETURN:
* R15: X'00' V1 AND V2 ARE EQUIVALENT
*      X'01' V1 > V2
*      X'02' V2 > V1
*
* VALUE'S POINTED TO BY R1,R2 HAVE THE FOLLOWING FORMAT.
* THE VALUE +INFINITE (-INFINITE) IS REPRESENTED BY THE CHARACTER
* '+' ('-') IN THE VINF VARIABLE; IN THIS CASE, THE VALUE VARIABLE
* HAS NOT MEANING.
* ANY OTHER VALUE IS REPRESENTED BY THE CORRESPONDING NUMERIC
* VALUE IN THE VALUE VARIABLE AND A BLANK IN THE VINF VARIABLE.
*
* VALUE    DS    H           VALUE, IF NOT +/- INFINITE
* VINF     DS    CL1         '+': +INFINITE, '-': -INFINITE,
*                            ' ': VALUE SPECIFIED BY VALUE
*********************************************************************
TTTVCMP  ST    R5,TTTVCMR5             SAVE GR5
         SR    R15,R15                 ASSUME V1 = V2
*
         CLI   2(R1),C'-'              V1 = -INFINITE?
         BNE   TTTVCMP1                  NO: GO ON FOR NEXT TEST
         CLI   2(R2),C'-'                YES: V2 = -INF AS WELL?
         BE    TTTVCMPZ                    YES: GO TO END, EQUIVAL.
         LA    R15,2                       NO:  V2 IS GREATER
         B     TTTVCMPZ                         GO TO END
*
TTTVCMP1 CLI   2(R1),C'+'              V1 = +INFINITE?
         BNE   TTTVCMP2                  NO: GO ON FOR NEXT TEST
         CLI   2(R2),C'+'                YES: V2 = +INF AS WELL?
         BE    TTTVCMPZ                    YES: GO TO END, EQUIVAL.
         LA    R15,1                       NO:  V1 IS GREATER
         B     TTTVCMPZ                         GO TO END
*
TTTVCMP2 CLI   2(R2),C'-'              V2 = -INFINITE?
         BNE   TTTVCMP3                  NO: GO ON FOR NEXT TEST
         LA    R15,1                     YES: V1 IS GREATER
         B     TTTVCMPZ                       GO TO END
*
TTTVCMP3 CLI   2(R2),C'+'              V2 = +INFINITE?
         BNE   TTTVCMP4                  NO: GO ON FOR NEXT TEST
         LA    R15,2                     YES: V2 IS GREATER
         B     TTTVCMPZ                       GO TO END
*
TTTVCMP4 LH    R5,0(R1)                R5 := V1
         CH    R5,0(0,R2)              COMPARE V1 AND V2
         BE    TTTVCMPZ                  V1=V2: GO TO END, EQUIVAL.
         BL    TTTVCMP5                  V1<V2: PROCESS IT
         LA    R15,1                     V1>V2: V1 IS GREATER
         B     TTTVCMPZ                         GO TO END
*
TTTVCMP5 LA    R15,2                   V2 IS GREATER
         B     TTTVCMPZ                GO TO END
*
TTTVCMPZ L     R5,TTTVCMR5             RESTORE GR5
         BR    R6                      RETURN
*
TTTVCMR5 DS    F                       SAVEAREA FOR R5
*
**********************************************************************
* TRIVIAL-MOVE-SELECTION ROUTINE - SELECTS THE FIRST EMPTY CELL AS
*                                  THE NEXT MOVE FOR THE MACHINE.
*                                  FOR TESTING.
*
* ON ENTERING THIS ROUTINE IS GUARANTEED TO BE AT LEAST ONE EMPTY
* CELL IN THE BOARD.
*
* R6: RETURN ADDRESS
*
* ON RETURN:
*    R2 := CELL NUMBER FOR THE MOVE (0 - 8)
*    TTTMCHMR := MACHINE MOVE ROW ('A','B','C')
*    TTTMCHMC := MACHINE MOVE COLUMN ('1','2','3')
*
*********************************************************************
TTTTMS   ST    R1,TTTTMSR1             SAVE GR1
*
         LA    R2,TTTBOARD             GR2 -> CURRENT BOARD
*
* BEGINNING OF LOOP TO CHECK EACH CELL
*
TTTTMS01 CLI   0(R2),C' '              CELL == BLANK?
         BE    TTTTMS02                   YES: GO ON
         LA    R2,1(0,R2)              R2 FORWARD ONE POSITION
         B     TTTTMS01                CHECK NEXT CELL
*
* END OF LOOP TO CHECK EACH CELL
*
TTTTMS02 LA    R1,TTTBOARD             MAKE R2 TO CONTAIN ...
         SR    R2,R1                   ... THE CELL NUMBER (0..8)
*
         LA    R1,TTTTMSCC             R1 -> TABLE OF COLUMN-COORDS
         AR    R1,R2                   R1 -> COLUMN-COORD FOR MOVE
         MVC   TTTMCHMC(1),0(R1)       COLUMN-COORD TO TTTMCHMC
*
         LA    R1,TTTTMSRC             R1 -> TABLE OF ROW-COORDS
         AR    R1,R2                   R1 -> ROW-COORD FOR MOVE
         MVC   TTTMCHMR(1),0(R1)       ROW-COORD TO TTTMCHMR
*
TTTTMSZ  L     R1,TTTTMSR1             RESTORE GR1
         BR    R6                      RETURN
*
TTTTMSR1 DS    F                       SAVEAREA FOR R1
*
TTTTMSCC DC    C'123123123'            TABLE OF COLUMN-COORDINATES
TTTTMSRC DC    C'AAABBBCCC'            TABLE OF ROW-COORDINATES
*
*********************************************************************
* DATA
*********************************************************************
         DS    0F
EXTPSW   DC    X'00040000'             EXTERNAL NEW PSW.
         DC    A(EXTINT)
SVCPSW   DC    X'00040000'             SVC NEW PSW
         DC    A(SVCRTN)
PRGPSW   DC    X'00060000'             PROGRAM NEW PSW:
         DC    X'00003333'                 DISABLED WAIT
CHKPSW   DC    X'00060000'             MACHINE CHECK NEW PSW:
         DC    X'00004444'                 DISABLED WAIT
IOPSW    DC    X'00040000'             I/O NEW PSW.
         DC    A(IOINT)
ZERO16   DC    16F'0'                  16 WORDS TO INITIALIZE REGS.
         DS    0D
WAITIO   DC    X'FF060000'             PSW PARA ENABLED WAIT
         DC    X'00005555'
IOERRPSW DC    X'00060000'             PSW PARA IOERR. DISABLED WAIT
         DC    X'00FFFFFF'
ENDPSW   DC    X'00060000'             PSW TO LOAD AT END OF PROGRAM
         DC    X'00006666'                 DISABLED WAIT
SVCERRPW DC    X'00060000'             PSW TO LOAD IF CALLING AN
         DC    X'00002222'                 UNDEFINED SVC
         DS    0D
UCBCONS  DC    XL25'00'                UCB FOR CONSOLE DEVICE
CONIDFLG DC    X'00'                   CONSOLE IDENTIFIED FLAG (FF=YES)
*X3274    DC    XL2'3274'               3274 CU-TYPE
X3278    DC    XL2'3278'               3278 DEV-TYPE (3270)
OPT00    DC    C'0'                    INPUT OPTION "0".
         DC    X'00'
OPT01    DC    C'1'                    INPUT OPTION "1".
         DC    X'00'
OPT02    DC    C'2'                    INPUT OPTION "2".
         DC    X'00'
OPT03    DC    C'3'                    INPUT OPTION "3".
         DC    X'00'
OPT04    DC    C'4'                    INPUT OPTION "4".
         DC    X'00'
OPT05    DC    C'5'                    INPUT OPTION "5".
         DC    X'00'
OPT06    DC    C'6'                    INPUT OPTION "6".
         DC    X'00'
OPT07    DC    C'7'                    INPUT OPTION "7".
         DC    X'00'
OPT08    DC    C'8'                    INPUT OPTION "8".
         DC    X'00'
OPT09    DC    C'9'                    INPUT OPTION "9".
         DC    X'00'
OPT10    DC    C'10'                   INPUT OPTION "10".
         DC    X'00'
OPTX     DC    C'X'                    INPUT OPTION "X".
         DC    X'00'
OPTXMIN  DC    C'x'                    INPUT OPTION "x".
         DC    X'00'
WHITES   DS    0CL80                   80 WHITE SPACES
         DC    80C' '
*****************************************************************
* MESSAGES FOR PANELS
*****************************************************************
MSG00001 DC    CL12'BAD KEY     '
MSG00002 DC    CL12'BAD OPTION  '
MSG00003 DS    0CL12
         DC    C'WINNER: '
MSG0003P DC    C'X'
         DC    C'   '
MSG00004 DC    CL12'MATCH DRAWN '
MSG00005 DC    CL12'YOUR MOVE?  '
MSG00006 DC    CL12'INVALID MOVE'
*****************************************************************
* DATA FOR TIC-TAC-TOE
*****************************************************************
TTTFSTPL DC    C'H'                    FIRST PLAYER (MACHINE,HUMAN)
TTTMSYM  DC    C'O'                    SYMBOL FOR MACHINE (X,O)
TTTHSYM  DC    C'X'                    SYMBOL FOR HUMAN PLAYER (X,O)
TTTFSTSY DC    C'X'                    FIRST SYMBOL TO WRITE (X,O)
TTTNXTPL DS    CL1                     NEXT PLAYER (M,H)
*TTTMVCNT DS    XL1                     COUNTER. MOVES DONE
TTTFLG3L DS    XL1                     FLAG: 3-IN-LINE (X'00'/X'FF')
TTTFLGFB DS    XL1                     FLAG: FULL-BOARD
TTTINF2  DS    XL1                     F2-KEY-PRESSED FLAG
TTTINF3  DS    XL1                     F3-KEY-PRESSED FLAG
TTTINMOV DS    XL1                     MOVE-ENTERED FLAG
TTTINMVR DS    CL1                     ROW-OF-MOVE
TTTINMVC DS    CL1                     COLUMN-OF-MOVE
TTTINBK  DS    XL1                     BAD-KEY FLAG
TTTINBO  DS    XL1                     BAD-OPTION FLAG
TTTMCHMC DS    CL1                     MACHINE MOVE COLUMN-COORD
TTTMCHMR DS    CL1                     MACHINE MOVE ROW-COORD
*
TTTENFLG DS    XL1                     ENABLED-OPTIONS FLAG
F2EN     EQU   B'10000000'               FLAG: F2-INPUT ENABLED
F3EN     EQU   B'01000000'               FLAG: F3-INPUT ENABLED
MVEN     EQU   B'00100000'               FLAG: MOVE-INPUT ENABLED
*
TTTMVTPT DS    H                       POINTER TO NEXT ENTRY IN ...
*                                      ... THE TABLE OF MOVES
TTTMVTBL DS    CL27                    TABLE OF MOVES (9*3 CHARS)
TTTBOARD DC    CL9' '                  CURRENT BOARD
*XXXMVTBL DC    C'HB2MA3HA1MB1HC2'      TABLE OF MOVES ...
*XXXMVTBL DC    CL15' '                 TABLE OF MOVES ...
*         DC    CL12' '                 ... FOR TESTING
TTTMXDEP DC    H'5'                    MAX DEPTH OF TREE
TTTLVLPT DC    10F'0'                  POINTER(S) TO FIRST NODE
*                                         IN EACH LEVEL
TTTNXNPT DS    F         POINTER TO FREE SLOT IN NODES TABLE.
****************************************************************
* BUFFER FOR ANSWERS
****************************************************************
*                   1234567890123456789012345678901234567890
BUFF01   DC    CL80' '                 BUFFER FOR ANSWERS
BUFF01L  EQU   *-BUFF01
*****************************************************************
* CONTENT OF MAIN MENU - 3270
*****************************************************************
         DS    0F
MENU000  DC    X'80'
         DC    AL3(LEN001)
*
LEN001   DC    AL2(REC001Z-REC001)
REC001   DC    X'47'               WCC: reset+alarm+restore+resetMDT
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4041'             ROW: 01, COL: 01
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL12'Main Menu'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4059'             ROW: 01, COL: 25
         DC    CL30' saGAMES - Stand Alone Games'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4142'             ROW: 01, COL: 66
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
REC001MS DC    CL12'-----Message'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4262'             ROW: 03, COL: 02
         DC    CL6'Option'
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    CL4'===>'
         DC    X'1D'               START FIELD
         DC    X'40'               UNPROTECTED, ALPHA, DISPLAY
         DC    X'13'               INSERT CURSOR
         DC    CL1' '
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4B6E'             ROW: 10, COL: 30
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    C'0'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL2'- '
         DC    CL20'Configuration'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4E4E'             ROW: 12, COL: 30
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    C'1'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL2'- '
         DC    CL20'TIC-TAC-TOE'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'506E'             ROW: 14, COL: 30
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    C'X'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL2'- '
         DC    CL20'End Program'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5A64'             ROW: 22, COL: 20
         DC    CL7'F3: END'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5B4C'             ROW: 22, COL: 50
         DC    CL18'F12: LICENSE TERMS'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5D5E'             ROW: 24, COL: 46
         DC    CL33'(c) Rafael Pereira Tercero (Rafa)'
REC001Z  EQU   *
****************************************************************
* CONTENT OF MENU 1 - 3270
****************************************************************
         DS    0F
MENU001  DC    X'80'
         DC    AL3(LEN011)
*
LEN011   DC    AL2(REC011Z-REC011)
REC011   DC    X'47'               WCC: reset+alarm+restore+resetMDT
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4041'             ROW: 01, COL: 01
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL12'Config Menu'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4059'             ROW: 01, COL: 25
         DC    CL30' saGAMES - Stand Alone Games'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4142'             ROW: 01, COL: 66
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
REC011MS DC    CL12'-----Message'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4262'             ROW: 03, COL: 02
         DC    CL6'Option'
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    CL4'===>'
         DC    X'1D'               START FIELD
         DC    X'40'               UNPROTECTED, ALPHA, DISPLAY
         DC    X'13'               INSERT CURSOR
         DC    CL1' '
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4E4E'             ROW: 12, COL: 30
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    C'1'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL2'- '
         DC    CL20'Console Switching'
*        DC    X'11'               SET BUFFER ADDRESS
*        DC    X'506E'             ROW: 14, COL: 30
*        DC    X'1D'               START FIELD
*        DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
*        DC    C'X'
*        DC    X'1D'               START FIELD
*        DC    X'60'               PROTECTED, ALPHA, DISPLAY
*        DC    CL2'- '
*        DC    CL20'End'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5A64'             ROW: 22, COL: 20
         DC    CL7'F3: END'
*        DC    X'11'               SET BUFFER ADDRESS
*        DC    X'5B4C'             ROW: 22, COL: 50
*        DC    CL18'F12: LICENSE TERMS'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5D5E'             ROW: 24, COL: 46
         DC    CL33'(c) Rafael Pereira Tercero (Rafa)'
REC011Z  EQU   *
****************************************************************
* CONTENT OF MENU 2 (NEW CONSOLE IDENTIFICATION) - 3270
****************************************************************
         DS    0F
MENU002  DC    X'80'
         DC    AL3(LEN021)
*
LEN021   DC    AL2(REC021Z-REC021)
REC021   DC    X'47'               WCC: reset+alarm+restore+resetMDT
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4041'             ROW: 01, COL: 01
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL12'New Console'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4059'             ROW: 01, COL: 25
         DC    CL30' saGAMES - Stand Alone Games'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4142'             ROW: 01, COL: 66
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
REC021MS DC    CL12'-----Message'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4E4E'             ROW: 12, COL: 30
         DC    CL40'New Console Identified'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5A64'             ROW: 22, COL: 20
         DC    CL7'F3: END'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5D5E'             ROW: 24, COL: 46
         DC    CL33'(c) Rafael Pereira Tercero (Rafa)'
REC021Z  EQU   *
****************************************************************
* CONTENT OF MENU 3 (TTT-MAIN) - 3270
****************************************************************
         DS    0F
MENU003  DC    X'80'
         DC    AL3(LEN031)
*
LEN031   DC    AL2(REC031Z-REC031)
REC031   DC    X'47'               WCC: reset+alarm+restore+resetMDT
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4041'             ROW: 01, COL: 01
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL12'TTT Main'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4059'             ROW: 01, COL: 25
         DC    CL30' saGAMES - Stand Alone Games'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4142'             ROW: 01, COL: 66
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
REC031MS DC    CL12'-----Message'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4262'             ROW: 03, COL: 02
         DC    CL6'Option'
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    CL4'===>'
         DC    X'1D'               START FIELD
         DC    X'40'               UNPROTECTED, ALPHA, DISPLAY
         DC    X'13'               INSERT CURSOR
         DC    CL1' '
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4946'             ROW: 08, COL: 22
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    C'0'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL2'- '
         DC    C'Configuration'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4B66'             ROW: 10, COL: 22
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    C'1'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL2'- '
         DC    C'FIRST PLAYER: '
REC031A  DC    C'HUMAN (MACHINE)'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4E46'             ROW: 12, COL: 22
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    C'2'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL2'- '
         DC    C'SYMBOLS: HUMAN('
REC031B  DC    C'X'
         DC    C') MACHINE('
REC031C  DC    C'O'
         DC    C')'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5066'             ROW: 14, COL: 22
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    C'3'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL2'- '
         DC    C'START GAME'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5A64'             ROW: 22, COL: 20
         DC    CL7'F3: END'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5D5E'             ROW: 24, COL: 46
         DC    CL33'(c) Rafael Pereira Tercero (Rafa)'
REC031Z  EQU   *
REC03X01 DC    C'HUMAN (MACHINE)'
REC03X02 DC    C'MACHINE (HUMAN)'
****************************************************************
* MESSAGE BEFORE CONSOLE SWITCHING - 3270
****************************************************************
         DS    0F
MENU004  DC    X'80'
         DC    AL3(LEN041)
*
LEN041   DC    AL2(REC041Z-REC041)
REC041   DC    X'47'               WCC: reset+alarm+restore+resetMDT
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4041'             ROW: 01, COL: 01
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL12'Switch Cons.'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4059'             ROW: 01, COL: 25
         DC    CL30' saGAMES - Stand Alone Games'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4142'             ROW: 01, COL: 66
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
REC041MS DC    CL12'-----Message'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4D7A'             ROW: 12, COL: 10
         DC    CL40'Hit ENTER from the console you want to b'
         DC    CL30'ecome active ...'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5D5E'             ROW: 24, COL: 46
         DC    CL33'(c) Rafael Pereira Tercero (Rafa)'
REC041Z  EQU   *
****************************************************************
* CONTENT OF MENU 5 (TIC-TAC-TOE)
****************************************************************
         DS    0F
MENU005  DC    X'80'
         DC    AL3(LEN051)
*
LEN051   DC    AL2(REC051Z-REC051)
REC051   DC    X'47'               WCC: reset+alarm+restore+resetMDT
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4041'             ROW: 01, COL: 01
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL12'Tic-Tac-Toe'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4059'             ROW: 01, COL: 25
         DC    CL30' saGAMES - Stand Alone Games'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4142'             ROW: 01, COL: 66
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
REC051MS DC    CL12'-----Message'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4340'             ROW: 03, COL: 32
         DC    C'*****************'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4450'             ROW: 04, COL: 32
         DC    C'*  TIC-TAC-TOE  *'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4560'             ROW: 05, COL: 32
         DC    C'*****************'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4850'             ROW: 07, COL: 48
REC051MV DC    C'Move'
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    C'==>'
         DC    X'1D'               START FIELD
         DC    X'40'               UNPROTECTED, ALPHA, DISPLAY
         DC    X'13'               INSERT CURSOR
         DC    C'  '
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    C'(RowCol; e.g. A1)'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4940'             ROW: 08, COL: 16
         DC    C'1     2     3'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4A53'             ROW: 09, COL: 19
         DC    C'|     |                             MOVES'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4B5B'             ROW: 10, COL: 11
         DC    C'A    '
REC051A1 DC    C' '
         DC    C'  |  '
REC051A2 DC    C' '
         DC    C'  |  '
REC051A3 DC    C' '
         DC    C'    A                   ---------'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4C73'             ROW: 11, COL: 19
         DC    C'|     |                           1:'
REC051M1 DC    CL7' '
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4D7E'             ROW: 12, COL: 14
         DC    C'-----+-----+-----                      2:'
REC051M2 DC    CL7' '
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4F53'             ROW: 13, COL: 19
         DC    C'|     |                           3:'
REC051M3 DC    CL7' '
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'505B'             ROW: 14, COL: 11
         DC    C'B    '
REC051B1 DC    C' '
         DC    C'  |  '
REC051B2 DC    C' '
         DC    C'  |  '
REC051B3 DC    C' '
         DC    C'    B                   4:'
REC051M4 DC    CL7' '
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5173'             ROW: 15, COL: 19
         DC    C'|     |                           5:'
REC051M5 DC    CL7' '
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'527E'             ROW: 16, COL: 14
         DC    C'-----+-----+-----                      6:'
REC051M6 DC    CL7' '
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5453'             ROW: 17, COL: 19
         DC    C'|     |                           7:'
REC051M7 DC    CL7' '
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'555B'             ROW: 18, COL: 11
         DC    C'C    '
REC051C1 DC    C' '
         DC    C'  |  '
REC051C2 DC    C' '
         DC    C'  |  '
REC051C3 DC    C' '
         DC    C'    C                   8:'
REC051M8 DC    CL7' '
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5673'             ROW: 19, COL: 19
         DC    C'|     |                           9:'
REC051M9 DC    CL7' '
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5840'             ROW: 20, COL: 16
         DC    C'1     2     3'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5A51'             ROW: 22, COL: 01
REC051F2 DC    C'F2: NEW GAME'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5A64'             ROW: 22, COL: 20
REC051F3 DC    C'F3: END'
*         DC    X'11'               SET BUFFER ADDRESS
*        DC    X'5B4C'             ROW: 22, COL: 60
*        DC    C'F7: MOVE BACK'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5D5E'             ROW: 24, COL: 46
         DC    C'(c) Rafael Pereira Tercero (Rafa)'
REC051Z  EQU   *
*
ENA051MV DS    0CL33               CONSTANT TO ENABLE MOVE-INPUT
         DC    C'Move'
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    C'==>'
         DC    X'1D'               START FIELD
         DC    X'40'               UNPROTECTED, ALPHA, DISPLAY
         DC    X'13'               INSERT CURSOR
         DC    C'  '
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    C'(RowCol; e.g. A1)'
DIS051MV DS    0CL33               CONSTANT TO DISABLE MOVE-INPUT
         DC    C'    '
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    C'   '
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    C' '
         DC    C'  '
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    C'                 '
ENA051F2 DC    C'F2: NEW GAME'     CONSTANT TO ENABLE  F2-INPUT
DIS051F2 DC    C'            '     CONSTANT TO DISABLE F2-INPUT
ENA051F3 DC    C'F3: END'          CONSTANT TO ENABLE  F3-INPUT
DIS051F3 DC    C'       '          CONSTANT TO DISABLE F3-INPUT
*
****************************************************************
* CONTENT OF MENU 6 - 3270
****************************************************************
         DS    0F
MENU006  DC    X'80'
         DC    AL3(LEN061)
*
LEN061   DC    AL2(REC061Z-REC061)
REC061   DC    X'47'               WCC: reset+alarm+restore+resetMDT
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4041'             ROW: 01, COL: 01
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL12'TTT Config '
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4059'             ROW: 01, COL: 25
         DC    CL30' saGAMES - Stand Alone Games'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4142'             ROW: 01, COL: 66
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
REC061MS DC    CL12'-----Message'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4262'             ROW: 03, COL: 02
         DC    CL6'Option'
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    CL4'===>'
         DC    X'1D'               START FIELD
         DC    X'40'               UNPROTECTED, ALPHA, DISPLAY
         DC    X'13'               INSERT CURSOR
         DC    CL1' '
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4E40'             ROW: 12, COL: 16
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    C'1'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL2'- '
         DC    C'Change Level (current: '
REC061LV DC    C'  '               CURRENT LEVEL
         DC    C')'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5A64'             ROW: 22, COL: 20
         DC    CL7'F3: END'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5D5E'             ROW: 24, COL: 46
         DC    CL33'(c) Rafael Pereira Tercero (Rafa)'
REC061Z  EQU   *
****************************************************************
* CONTENT OF MENU 7 - 3270
****************************************************************
         DS    0F
MENU007  DC    X'80'
         DC    AL3(LEN071)
*
LEN071   DC    AL2(REC071Z-REC071)
REC071   DC    X'47'               WCC: reset+alarm+restore+resetMDT
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4041'             ROW: 01, COL: 01
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL12'TTT Config2'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4059'             ROW: 01, COL: 25
         DC    CL30' saGAMES - Stand Alone Games'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4142'             ROW: 01, COL: 66
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
REC071MS DC    CL12'-----Message'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4E40'             ROW: 12, COL: 16
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    C'1'
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL2'- '
         DC    C'Change Level (current: '
REC071LV DC    C'  '               CURRENT LEVEL
         DC    C')'
         DC    C'  New'
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
         DC    CL4'===>'
         DC    X'1D'               START FIELD
         DC    X'40'               UNPROTECTED, ALPHA, DISPLAY
         DC    X'13'               INSERT CURSOR
         DC    CL2'  '             NEW LEVEL
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    C'(2-10)'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5A64'             ROW: 22, COL: 20
         DC    CL7'F3: END'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5D5E'             ROW: 24, COL: 46
         DC    CL33'(c) Rafael Pereira Tercero (Rafa)'
REC071Z  EQU   *
****************************************************************
* CONTENT OF "MENU" X - 3270
****************************************************************
         DS    0F
MENU00X  DC    X'80'
         DC    AL3(LEN0X1)
*
LEN0X1   DC    AL2(REC0X1Z-REC0X1)
REC0X1   DC    X'47'               WCC: reset+alarm+restore+resetMDT
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4041'             ROW: 01, COL: 01
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL12'Program End'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4059'             ROW: 01, COL: 25
         DC    CL30' saGAMES - Stand Alone Games'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4B6E'             ROW: 10, COL: 30
         DC    CL20'End of Program'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4E47'             ROW: 12, COL: 23
         DC    CL30'Loading Disabled-Wait State'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5D5E'             ROW: 24, COL: 46
         DC    CL33'(c) Rafael Pereira Tercero (Rafa)'
REC0X1Z  EQU   *
*****************************************************************
* CONTENT OF LICENSE-SHORT TERMS PANEL - 3270
*****************************************************************
         DS    0F
MENULISH DC    X'80'
         DC    AL3(LENLS1)
*
LENLS1   DC    AL2(RECLS1Z-RECLS1)
RECLS1   DC    X'47'               WCC: reset+alarm+restore+resetMDT
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4041'             ROW: 01, COL: 01
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL12'NOTICE'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4059'             ROW: 01, COL: 25
         DC    CL30' saGAMES - Stand Alone Games'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4143'             ROW: 01, COL: 67
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
RECLS1MS DC    CL12' '
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4652'             ROW: 06, COL: 02
         DC    CL40'saGAMES version 1, Copyright (C) 2006 Ra'
         DC    CL30'fael Pereira Tercero'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4872'             ROW: 08, COL: 02
         DC    CL40'saGAMES comes with ABSOLUTELY NO WARRANT'
         DC    CL30'Y; for details press F12.'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5A64'             ROW: 22, COL: 20
         DC    CL7'F3: END'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5B4C'             ROW: 22, COL: 50
         DC    CL18'F12: LICENSE TERMS'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5D5E'             ROW: 24, COL: 46
         DC    CL33'(c) Rafael Pereira Tercero (Rafa)'
RECLS1Z  EQU   *
*****************************************************************
* CONTENT OF LICENSE TERMS PANEL - 3270
*****************************************************************
         DS    0F
MENULIC  DC    X'80'
         DC    AL3(LENLI1)
*
LENLI1   DC    AL2(RECLI1Z-RECLI1)
RECLI1   DC    X'47'               WCC: reset+alarm+restore+resetMDT
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4041'             ROW: 01, COL: 01
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    CL12'LICENSE'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4059'             ROW: 01, COL: 25
         DC    CL30' saGAMES - Stand Alone Games'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4143'             ROW: 01, COL: 67
         DC    X'1D'               START FIELD
         DC    X'68'               PROTECTED, ALPHA, INTENSIFIED
RECLI1MS DC    CL12' '
         DC    X'1D'               START FIELD
         DC    X'60'               PROTECTED, ALPHA, DISPLAY
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4262'             ROW: 03, COL: 02
         DC    CL70'saGAMES - A stand-alone program with simple games.'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'43B2'             ROW: 04, COL: 02
         DC    CL70'Copyright (C) 2006 Rafael Pereira Tercero.'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4652'             ROW: 06, COL: 02
         DC    CL40'This program is free software; you can r'
         DC    CL30'edistribute it and/or modify'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4762'             ROW: 07, COL: 02
         DC    CL40'it under the terms of the GNU General Pu'
         DC    CL30'blic License as published by'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4872'             ROW: 08, COL: 02
         DC    CL40'the Free Software Foundation; either ver'
         DC    CL30'sion 2 of the License, or'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4A42'             ROW: 09, COL: 02
         DC    CL70'(at your option) any later version.'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4C62'             ROW: 11, COL: 02
         DC    CL40'This program is distributed in the hope '
         DC    CL30'that it will be useful,'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4D72'             ROW: 12, COL: 02
         DC    CL40'but WITHOUT ANY WARRANTY; without even t'
         DC    CL30'he implied warranty of'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'4F42'             ROW: 13, COL: 02
         DC    CL40'MERCHANTABILITY or FITNESS FOR A PARTICU'
         DC    CL30'LAR PURPOSE.  See the'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5052'             ROW: 14, COL: 02
         DC    CL70'GNU General Public License for more details.'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5272'             ROW: 16, COL: 02
         DC    CL40'You should have received a copy of the G'
         DC    CL30'NU General Public License'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5442'             ROW: 17, COL: 02
         DC    CL40'along with this program; if not, write t'
         DC    CL30'o the Free Software'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5552'             ROW: 18, COL: 02
         DC    CL40'Foundation, Inc., 59 Temple Place, Suite'
         DC    CL30' 330, Boston, MA  02111-1307  USA'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5A64'             ROW: 22, COL: 20
         DC    CL7'F3: END'
*        DC    X'11'               SET BUFFER ADDRESS
*        DC    X'5B4C'             ROW: 22, COL: 50
*        DC    CL18'F12: LICENSE TERMS'
         DC    X'11'               SET BUFFER ADDRESS
         DC    X'5D5E'             ROW: 24, COL: 46
         DC    CL33'(c) Rafael Pereira Tercero (Rafa)'
RECLI1Z  EQU   *
*********************************************************************
* STARTING POINT'S FOR NODES OF THE TREE.
* FROM THIS POINT ON ALL THE MEMORY CONTAINS TREE NODES.
*********************************************************************
         DS    0H
TTTNODST DS    XL1         NODE'S STARTING POINT
*
*********************************************************************
* DSECT FOR UNIT CONTROL BLOCK
*********************************************************************
UCB      DSECT
UCBPSW   DS    1D          PSW TO RETURN TO AFTER I/O INT
UCBCSW   DS    1D          CSW AFTER I/O
UCBCCUU  DS    1H          CHANNEL + DEV. NUMBER
UCBCUTYP DS    XL3         CONTROL UNIT TYPE
UCBDEVTY DS    XL3         DEVICE TYPE
UCBIOFLG DS    CL1         IO STARTED FLAG
*
*********************************************************************
* DSECT FOR CHANNEL-COMMAND WORD
*********************************************************************
CCW      DSECT
CCWCMD   DS    XL1         COMMAND CODE
CCWDADDR DS    AL3         DATA ADDRESS
CCWFLG   DS    XL1         FLAGS
         DS    XL1         RESERVED
CCWBCNT  DS    AL2         BYTE COUNT
*
*********************************************************************
* DSECT FOR TABLE-OF-MOVES-ENTRY
*********************************************************************
TTTMTE   DSECT
TTTMTEP  DS    CL1         PLAYER (H: HUMAN, M: MACHINE)
TTTMTER  DS    CL1         ROW (A,B,C)
TTTMTEC  DS    CL1         COLUMN (1,2,3)
TTTMTEL  EQU   *-TTTMTE
*
*********************************************************************
* DSECT FOR TREE LEVEL
*********************************************************************
LVL      DSECT
LVLTYPE  DS    CL1         LEVEL TYPE: 'M'=MAX, 'm'=min
LVLNODE  DS    AL3         ADDRESS OF FIRST NODE ON THIS LEVEL
LVLNXT   DS    AL3         ADDRESS OF NEXT LEVEL
*********************************************************************
* DSECT FOR NODE
*********************************************************************
NODE     DSECT
NODVALUE DS    H           VALUE, IF NOT +/- INFINITE
NODVINF  DS    CL1         '+': +INFINITE, '-': -INFINITE,
*                          ' ': VALUE SPECIFIED BY NODVALUE
NODVALOK DS    XL1         FLAG VALUE OK (X'FF': OK)
NODBOARD DS    CL9         BOARD
*NODDEPTH DS    XL1         DEPTH IN THE TREE (DEPTH OF ROOT = 0)
*NODTYPE  DS    CL1         NODE TYPE: 'M'=MAX, 'm'=min
NODNXTL  DS    F           ADDRESS OF NEXT NODE ON THIS LEVEL
NODC1    DS    F           ADDRESS OF CHILD 1
NODC2    DS    F           ADDRESS OF CHILD 2
NODC3    DS    F           ADDRESS OF CHILD 3
NODC4    DS    F           ADDRESS OF CHILD 4
NODC5    DS    F           ADDRESS OF CHILD 5
NODC6    DS    F           ADDRESS OF CHILD 6
NODC7    DS    F           ADDRESS OF CHILD 7
NODMARK  DS    F           MARK: END OF CHILDREN (F'0')
NODM1    DS    XL1         MOVE TO SON 1: CELL (0,1,...,8)
         DS    CL1                        SYMBOL ('X', 'O', blank)
NODM2    DS    XL1         MOVE TO SON 2: CELL (0,1,...,8)
         DS    CL1                        SYMBOL ('X', 'O', blank)
NODM3    DS    XL1         MOVE TO SON 3: CELL (0,1,...,8)
         DS    CL1                        SYMBOL ('X', 'O', blank)
NODM4    DS    XL1         MOVE TO SON 4: CELL (0,1,...,8)
         DS    CL1                        SYMBOL ('X', 'O', blank)
NODM5    DS    XL1         MOVE TO SON 5: CELL (0,1,...,8)
         DS    CL1                        SYMBOL ('X', 'O', blank)
NODM6    DS    XL1         MOVE TO SON 6: CELL (0,1,...,8)
         DS    CL1                        SYMBOL ('X', 'O', blank)
NODM7    DS    XL1         MOVE TO SON 7: CELL (0,1,...,8)
         DS    CL1                        SYMBOL ('X', 'O', blank)
NODNEXT  DS    0H
*
*********************************************************************
* EQUATES FOR REGISTERS
*********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU  10
R11      EQU  11
R12      EQU  12
R13      EQU  13
R14      EQU  14
R15      EQU  15
*
         END
