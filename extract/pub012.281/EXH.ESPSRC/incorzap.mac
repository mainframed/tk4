INC      TITLE 'INCORZAP - SERVICE AID PROGRAM'
*    FROM THE L.A. GROUP MVS MODS TAPE
***********************************************************************
*                                                                     *
*         'INCORZAP' PROGRAM (DIS-ASSEMBLED SOURCE)                   *
*                                                                     *
***********************************************************************
*
*         THIS SOURCE CODE WAS COMMENTED AND CLEANED UP BY
*         BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION), MCLEAN VA,
*         AFTER THE SOURCE WAS GENERATED FROM A DISASSEMBLER.
*
*         THE DISASSEMBLY WAS RUN ON JUNE 22 1979.
*         LAST UPDATED: JULY 21 1981.
*
*         IT STILL NEEDS A LOT MORE COMMENTS AND NEW NAMES FOR FIELDS
*         BEFORE IT WILL BE UNDERSTANDABLE.
*
*         THIS CODE STILL MATCHES THE ORIGINAL LOAD MODULE EXACTLY,
*         EXCEPT THE 3 INSTRUCTIONS MARKED .***. HAVE BEEN REPLACED
*         WITH THE INSTRUCTIONS MARKED .PRC. WHICH ALLOW THE PROGRAM
*         TO RUN THE SAME NO MATTER WHAT ITS NAME IS.
*
*         COMPLETE DOCUMENTATION IS IN A SEPARATE FILE.
*
*         BRIEF DOCUMENTATION.
*
*          THIS PROGRAM MODIFIES LOAD MODULES IN THE NUCLEUS OR
*          IN THE LINK PACK AREA.  MODIFIED PAGES IN LPA WILL BE
*          FIXED TO PREVENT PAGE-INS THAT WOULD UN-MODIFY THE
*          MODIFIED PAGE.  CONTROL STATEMENT INPUT IS COMPATIBLE
*          WITH THE 'AMASPZAP' SERVICE AID PROGRAM, EXCEPT THE
*          PRESENCE OF A SLASH ('/') ANYWHERE IN A CARD IS USED
*          AS AN INDICATION OF MULTIPLE STATEMENTS PER CARD.
*          A 'RES' IS LIKE A 'REP' EXCEPT IT FREES A FIXED LPA PAGE.
*
*          DDNAMES USED:
*           SYSPRINT - MESSAGE AND DUMP OUTPUT.
*           SYSLIB   - SYS1.LPALIB FOR LPA ZAPS,
*                      SYS1.NUCLEUS FOR NUCLEUS ZAPS.
*                      OPENED FOR UPDATE, BUT NOT ACTUALLY UPDATED.
*           SYSIN    - CONTROL STATEMENT INPUT.
*
*           IF DDNAMES PROGLIST, PROGLIB, AND PROGIN ARE PRESENT,
*           THEY WILL BE USED INSTEAD OF THE OTHERS.
*
*          CONTROL STATEMENTS MAY OPTIONALLY BE SPECIFIED IN
*          THE PARM FIELD INSTEAD OF SYSIN.
*
*          THE PROGRAM MUST BE LINK-EDITED AS AUTHORIZED IN ORDER
*          TO MODIFY STORAGE, BUT OTHER FUNCTIONS WILL WORK EVEN
*          IF IT IS NOT AUTHORIZED.
*
* THIS PROGRAM UPDATED ON 09/12/82 BY:                      *HMD 09/82*
*                                                           *HMD 09/82*
*      HOWARD M. DEAN                                       *HMD 09/82*
*      GTE DATA SERVICES                                    *HMD 09/82*
*      4750 LINCOLN BLVD.                                   *HMD 09/82*
*      MARINA DEL REY, CA 90291                             *HMD 09/82*
*      (213) 821-0511 X330                                  *HMD 09/82*
*                                                           *HMD 09/82*
*   1. TEMPORARILY REMOVE PLPA (SEGMENT) PROTECTION         *HMD 09/82*
*      FROM THE SEGMENT(S) CONTAINING THE LOAD MODULE       *HMD 09/82*
*      TO BE ALTERED SO THAT AN ABEND0C4 WILL NOT OCCUR     *HMD 09/82*
*      ON THE 3081 CPU.                                     *HMD 09/82*
*                                                           *HMD 09/82*
*   2. CHANGE SYSLIB OPEN FROM UPDATE TO INPUT ONLY AS      *HMD 09/82*
*      THE DISK COPY OF THE LOAD MODULE IS NOT MODIFIED.    *HMD 09/82*
*                                                           *HMD 09/82*
*   3. INCREASE WORK AREA SIZE FOR MVS/SP 1.3 OPERATION.    *HMD 09/82*
*                                                           *HMD 09/82*
***********************************************************************
         EJECT
INCORZAP CSECT
         B     START-*(,R15)
         DC    AL1(16)
         DC    C'INCORZAP  75.248',X'00'
START    STM   R14,R12,12(R13)
         BALR  R12,R0              BASE REGISTER
         USING *,R12
         USING *+4095,R6
         LA    R6,4095(,R12)       BASE REGISTER
         L     R0,SIZE
         GETMAIN R,LV=(0)
         LR    R10,R1              WORKAREA BASE
         USING @DATA,R10
         LA    R5,4095(,R10)       WORKAREA BASE
         USING @DATA+4095,R5
         ST    R13,4(,R10)         PUT OLD ADDRESS IN NEW SAVEAREA
         LM    R0,R1,20(R13)       RESTORE R0 AND R1
         ST    R10,8(,R13)         PUT NEW ADDRESS IN OLD SAVEAREA
         LR    R13,R10             SWITCH TO NEW SAVEAREA
         MVC   @PARMPTR,0(R1)      SAVE ADDRESS OF PARM FIELD
         BAL   R14,INIT            INITIALIZE
         SPACE
*
*               DO WHILE QUIT=0
*                  CALL GETCARD
*                  IF QUIT=0 THEN
*                     CALL PUTLINE
*                     CALL PROCESS
*                     END
*                  END
*               CLOSE FILES
*               RETURN
*
         SPACE
         B     DOTEST01
DOLOOP01 BAL   R14,GETCARD
         TM    @SWA,QUIT
         BNZ   DOTEST01
         MVI   @LINE+2,C' '
         MVC   @LINE+3(118),@LINE+2
         L     R14,@PARBEG         POINT TO DATA TO BE MOVED
         L     R11,@SEPEND         GET ADDRESS OF END OF DATA
         SLR   R11,R14             COMPUTE LENGTH
         EX    R11,LOGMVC          MOVE R14 TO @LINE01
         OI    @SWB,NOCONS         FOR PRINT BUT NOT FOR CONSOLE
         BAL   R14,PUTLINE         LOG THE STATEMENT
         NI    @SWB,255-NOCONS
         BAL   R14,PROCESS
DOTEST01 TM    @SWA,QUIT
         BZ    DOLOOP01
         MVC   @CLOSE(12),CLOSE
*        CLOSE (@LIBDCB,,@CTLDCB,,@PRTDCB),MF=(E,@CLOSE)
         LA    R1,@CLOSE           CLOSE
         IC    R14,0(R1)           CLOSE
         LA    R0,@LIBDCB          CLOSE
         ST    R0,0(R1)            CLOSE
         STC   R14,0(R1)           CLOSE
         IC    R14,4(R1)           CLOSE
         LA    R0,@CTLDCB          CLOSE
         ST    R0,4(R1)            CLOSE
         STC   R14,4(R1)           CLOSE
         IC    R14,8(R1)           CLOSE
         LA    R0,@PRTDCB          CLOSE
         ST    R0,8(R1)            CLOSE
         STC   R14,8(R1)           CLOSE
         SVC   20                  CLOSE
         L     R11,@RC             SAVE RC ACROSS FREEMAIN
         L     R13,4(,R13)         SWITCH TO OLD SAVEAREA
         L     R0,SIZE             LENGTH FOR FREEMAIN
         LR    R1,R10              ADDRESS FOR FREEMAIN
         FREEMAIN R,LV=(0),A=(1)
         LR    R15,R11             RETURN CODE
         L     R14,12(,R13)
         LM    R0,R12,20(R13)
         BR    R14                 EXIT PROGRAM
         SPACE
         L     R13,4(,R13)         GARBAGE
         L     R0,SIZE              GENERATED
         LR    R1,R10                BY
         FREEMAIN R,LV=(0),A=(1)      PLS
         LM    R14,R12,12(R13)         COMPILER
         BR    R14                      NEVER EXECUTED
         EJECT
*
*
*
         SPACE
DUMP     STM   R14,R12,@SAVE13
         L     R14,@TEMP01         IS
         LA    R14,0(,R14)          AN
         LTR   R14,R14               ENDING ADDRESS SPECIFIED
         BNZ   A00012A             YES, BRANCH
         CLC   @MEMBER(6),IEANUC   IS THIS A NUCLEUS DUMP
         BNE   A000124             NO, BRANCH
         L     R14,16              CVT ADDRESS
         MVC   @TEMP01+1(3),129(R14)  CVTNUCB - END OF NUCLEUS
         B     A00012A
A000124  MVC   @TEMP01+1(3),ONE+1
A00012A  L     R14,MINUS032        FFFFFFE0
         L     R11,@ADDRESS        GET STARTING ADDRESS
         L     R7,@TEMP01          GET LENGTH
         LA    R7,0(,R7)
         ALR   R7,R11              ADD TO START ADDRESS
         BCTR  R7,R0
         NR    R7,R14              ROUND DOWN TO MULTIPLE OF 32
         ST    R7,@DUMPEND         SAVE DUMP END ADDRESS
         OI    @SWB,NOCONS         FOR PRINT BUT NOT CONSOLE
         MVI   @LINE02,C' '
         MVC   @LINE03(118),@LINE02
         MVI   @LINE01,C' '
         MVC   @HEXLEN,FOUR
         NR    R11,R14             ROUND DOWN TO MULTIPLE OF 32
         ST    R11,@DUMPSTR        DUMP START ADDRESS
         B     DUMPGO
DUMPLP   LA    R14,@LINE01
         ST    R14,@HEXTO
         LA    R14,@DUMPSTR
         ST    R14,@HEXFR
         BAL   R14,HEXCV           PUT HEX ADDRESS IN LINE
         L     R14,@DUMPSTR
         ST    R14,@HEXFR
         LA    R14,1
         ST    R14,@DUMPSUB        SET SUBSCRIPT TO 1
DUMPLLP  MH    R14,H9              ADD SUBSCRIPT*9
         LA    R14,@LINE03(14)      TO LINE+3
         ST    R14,@HEXTO          SAVE RESULT IN HEX TO ADDRESS
         BAL   R14,HEXCV           PERFORM HEX CONVERSION
         L     R14,@HEXFR          ADD
         AL    R14,@HEXLEN          HEXLEN
         ST    R14,@HEXFR            TO HEXFR
         LA    R14,1               ADD 1
         AL    R14,@DUMPSUB         TO
         ST    R14,@DUMPSUB          SUBSCRIPT
         C     R14,FOUR            IS SUBSCRIPT GT 4
         BNH   DUMPLLP             NO, LOOP (LEFT HALF OF PAGE)
         SPACE
         LA    R14,1               YES,
         ST    R14,@DUMPSUB         RESET SUBSCRIPT TO 1
DUMPRLP  MH    R14,H9
         LA    R14,@LINE41(14)
         ST    R14,@HEXTO
         BAL   R14,HEXCV
         L     R14,@HEXFR
         AL    R14,@HEXLEN
         ST    R14,@HEXFR
         LA    R14,1
         AL    R14,@DUMPSUB
         ST    R14,@DUMPSUB
         C     R14,FOUR            IS SUBSCRIPT GT 4
         BNH   DUMPRLP             NO, LOOP (RIGHT HALF OF PAGE)
         SPACE
         MVI   @LINE87,C'*'
         MVI   @LIN120,C'*'
         L     R14,@DUMPSTR
         MVC   @LINE88(32),0(R14)
         TR    @LINE88(32),EBCDIC
         BAL   R14,PUTLINE
         LA    R11,32              ADD 32
         AL    R11,@DUMPSTR         TO
         ST    R11,@DUMPSTR          DUMP ADDRESS
DUMPGO   C     R11,@DUMPEND
         BNH   DUMPLP
         NI    @SWB,255-NOCONS
         LM    R14,R12,@SAVE13
         BR    R14
         EJECT
*
*
*
         SPACE
FIND     STM   R14,R12,@SAVE14
         LA    R1,@LIBDCB
         LA    R0,@MEMBER
         LCR   R1,R1
         SVC   18                  FIND
         LTR   R15,R15             WAS MEMBER FOUND
         BZ    FINDOK              YES, BRANCH
         LA    R14,MSG08           MEMBER NOT FOUND IN LIBRARY
         ST    R14,@MSGADR
         BAL   R14,PUTMSG12
         B     FINDX
FINDOK   CLC   @MEMBER(6),IEANUC   IS IT NUCLEUS
         BNE   FINDX               NO
         CLC   @CSECT,BLANKS       NUCLEUS, IS CSECT SPECIFIED
         BNE   FINDX               YES, BRANCH
         LA    R14,MSG05           NO, CSECT REQUIRED WITH NUCLEUS
         ST    R14,@MSGADR
         BAL   R14,PUTMSG12
FINDX    LM    R14,R12,@SAVE14
         BR    R14
         EJECT
         SPACE
PAGESERV STM   R14,R12,@SAVE16
         L     R14,16              CVT ADDRESS
         TM    116(R14),X'01'      CVTDCB,CVTMVS2 - IS THIS MVS
         BNO   PAGEX               NO, BRANCH
         TM    @SWA,LOCMODE
         BNZ   PAGEX
         CLC   @MEMBER(6),IEANUC   IS THIS A NUCLEUS ZAP
         BE    PAGEX               YES, NO NEED TO FIX/FREE
         BAL   R14,MODESET1        SUP STATE, KEY ZERO
         AL    R13,TWELVE          CHANGE R13 FOR SETLOCK
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=SAVE,RELATED=X
         SLR   R4,R4               DONT KNOW WHAT THIS IS FOR
         SLR   R14,R14             CLEAR
         ST    R14,@PAGEECB         THE ECB
         LA    R0,@PAGEECB         ECB ADDRESS
         L     R14,@MODADR         GET STARTING ADDRESS
         LR    R1,R14              STARTING ADDRESS
         AL    R14,@MODLEN         COMPUTE ENDING ADDRESS
         LR    R2,R14              ENDING ADDRESS
         CLC   @COMMAND(3),RESET   IS THIS A RES
         BE    *+12                YES, FREE THE PAGE
         O     R1,PGFIX            NO, FIX THE PAGE
         B     *+8                 SKIP OVER FREE
         O     R1,PGFREE           FREE THE PAGE
         L     R11,16              CVT ADDRESS
         L     R15,804(,R11)       CVTVPSIB - PAGE SERVICES
         BALR  R14,R15             CALL PAGE SERVICES
         ST    R15,@WORD41         SAVE RETURN CODE
         SETLOCK RELEASE,TYPE=LOCAL,REGS=SAVE,RELATED=X
         SL    R13,TWELVE          PUT R13 BACK TO NORMAL
         BAL   R14,MODESET2        PROB STATE, KEY NZERO
         CLC   @WORD41,EIGHT       DID PAGE SERVICES RETURN AN 8
         BNE   PAGEX               NO, NO NEED TO WAIT
         WAIT  ECB=@PAGEECB
PAGEX    LM    R14,R12,@SAVE16
         BR    R14
         EJECT
*                                                           *HMD 09/82*
*
*
         SPACE
PUTMSG12 STM   R14,R12,@SAVE15
         MVI   @LINE02,C' '
         MVC   @LINE03(118),@LINE02
         L     R14,@MSGADR         GET ADDRESS OF MESSAGE
         L     R11,0(,R14)         GET LENGTH OF MESSAGE
         BCTR  R11,R0              LENGTH MINUS 1 FOR EX
         EX    R11,PUTMSGM         MOVE R14+4 TO @LINE01
         BAL   R14,PUTLINE         WRITE THE MESSAGE
         MVC   @RC,TWELVE          SET RETURN CODE
         OI    @SWA,QUIT           QUIT
         LM    R14,R12,@SAVE15
         BR    R14
         EJECT
*
*         PARSE A CONTROL STATEMENT OPERAND
*
         SPACE
PARSE    STM   R14,R12,@SAVE19
         L     R14,@PARBEG
         ST    R14,@PARWRK
         SLR   R14,R14             SET
         ST    R14,@PARSWT          PARSWT = 0
         B     PARGO1              DO UNTIL PARSWT NE 0
PARLP1   CLC   @PARWRK,@SEPEND     STILL WITHIN STATEMENT
         BNH   PARIN1              YES, BRANCH
*                                  PARWRK IS BEYOND END OF STMT
         LA    R14,1               SET
         ST    R14,@PARSWT          PARSWT = 1
         B     PARGO1
PARIN1   L     R14,@PARWRK
         CLI   0(R14),C' '         BLANK
         BE    PARNX1
         CLI   0(R14),X'7D'        QUOTE
         BNE   PARFN1
PARNX1   LA    R14,1               QUOTE OR BLANK
         AL    R14,@PARWRK         POINT TO
         ST    R14,@PARWRK          NEXT CHARACTER
         B     PARGO1
*                                  NEITHER QUOTE NOR BLANK
*                                  PARWRK POINTS TO IT
PARFN1   LA    R14,1               SET
         ST    R14,@PARSWT          PARSWT = 1
PARGO1   SLR   R14,R14
         C     R14,@PARSWT
         BE    PARLP1              END OF DO LOOP
         SPACE
         L     R11,@PARWRK
         ST    R11,@PARBEG
         ST    R14,@PARSWT         SET PARSWT = 0
         B     PARGO2              DO UNTIL PARSWT NE 0
PARLP2   CLC   @PARWRK,@SEPEND     STILL WITHIN STATEMENT
         BNH   PARIN2              YES, BRANCH
         LA    R14,1               SET
         ST    R14,@PARSWT          PARSWT = 1
         B     PARGO2
PARIN2   LA    R14,1               POINT PARWRK TO
         AL    R14,@PARWRK          NEXT
         ST    R14,@PARWRK           CHARACTER
         CLI   0(R14),C' '         BLANK
         BE    PARFN2
         CLI   0(R14),X'7D'        QUOTE
         BNE   PARGO2
PARFN2   LA    R14,1               SET
         ST    R14,@PARSWT          PARSWT = 1
PARGO2   L     R14,@PARSWT
         LTR   R14,R14
         BZ    PARLP2              END OF DO LOOP
         SPACE
         L     R14,@PARWRK         GET ADDRESS OF BLANK OR QUOTE
         SL    R14,@PARBEG         COMPUTE LENGTH
         ST    R14,@PARLEN         SAVE LENGTH
         C     R14,@PARMAXL        WILL IT FIT IN RESULT
         BNH   PAROKL              YES, BRANCH
         LA    R14,MSG01           FIELD IS TOO LONG
         ST    R14,@MSGADR
         BAL   R14,PUTMSG08        SYNTAX
         B     PARMOV              GO TRUNCATE MOVE
PAROKL   L     R14,@PARRES         GET ADDRESS OF PARSE RESULT
         L     R11,@PARMAXL
         BCTR  R11,R0
         EX    R11,PARBLNK         MOVE BLANKS TO PARSE RESULT
PARMOV   L     R14,@PARLEN         IF LENGTH
         LTR   R14,R14              GREATER THAN
         BZ    PARNUL                ZERO
         L     R11,@PARRES         GET ADDRESS OF PARSE RESULT
         BCTR  R14,R0
         L     R7,@PARBEG
         EX    R14,PARMVC          MOVE R7 TO R11
PARNUL   L     R14,@PARWRK         GET ADDRESS
         ST    R14,@PARBEG          OF BLANK OR QUOTE
         CLI   0(R14),X'7D'        QUOTE
         BNE   PARX                NO
         AL    R14,ONE             YES, ADD 1 TO PARBEG
         ST    R14,@PARBEG          SO NEXT OPERAND WILL PARSE OK
PARX     LM    R14,R12,@SAVE19
         BR    R14
         EJECT
*
*
*
         SPACE
HEXPARSE STM   R14,R12,@SAVE21
         SLR   R14,R14
         ST    R14,@HPASWT         SET HPASWT = 0
         ST    R14,@MODLEN         SET MODLEN = 0
         L     R14,@PARBEG
         ST    R14,@HPAWRK
         B     HPAGO1              DO UNTIL HPASWT NE 0
HPALP1   CLC   @HPAWRK,@SEPEND     STILL WITHIN STATEMENT
         BNH   HPAIN1              YES, BRANCH
         MVC   @HPASWT,ONE
         B     HPAGO1
HPAIN1   L     R14,@HPAWRK
         CLI   0(R14),C' '         IS IT A BLANK
         BNE   A0004DC             NO, BRANCH
         L     R14,@MODLEN
         LTR   R14,R14
         BNP   A0004CC
         MVC   @HPASWT,ONE
         B     HPAGO1
A0004CC  LA    R14,1
         AL    R14,@HPAWRK
         ST    R14,@HPAWRK
         B     HPAGO1
*                                  NOT A BLANK
A0004DC  L     R14,@HPAWRK
         CLI   0(R14),X'6B'        IS IT A COMMA
         BE    HPAINCR             YES, GO IGNORE IT
         LA    R11,1               ADD 1
         AL    R11,@MODLEN          TO
         ST    R11,@MODLEN           MODLEN
         LA    R7,@KARD-1(R11)
         MVC   0(1,R7),0(R14)      COPY THE CHARACTER TO KARD
HPAINCR  LA    R14,1               POINT
         AL    R14,@HPAWRK          TO
         ST    R14,@HPAWRK           NEXT CHARACTER
HPAGO1   SLR   R14,R14
         C     R14,@HPASWT
         BE    HPALP1
         SPACE
         L     R11,@HPAWRK
         ST    R11,@PARBEG
         C     R14,@MODLEN         IS LENGTH ZERO
         BNE   HPAOK1              NO, BRANCH
         LA    R14,MSG11           REQUIRED FIELD MISSING
         ST    R14,@MSGADR
         BAL   R14,PUTMSG08        SYNTAX
         B     HPAX
HPAOK1   SLR   R2,R2
         L     R1,@MODLEN
         BCTR  R1,R0
         EX    R1,HPRTRT           TRT KARD
         LTR   R2,R2               ARE ALL CHARACTERS HEX
         BZ    HPAOK2              YES, BRANCH
         LA    R14,MSG03           INVALID HEX CHARACTER
         ST    R14,@MSGADR
         BAL   R14,PUTMSG08        SYNTAX
         B     HPAX
HPAOK2   TR    @KARD,HEXTR         TRANSLATE TO BINARY 00-0F
         LA    R14,@REPDATA
         ST    R14,@HEXDEST
         LA    R14,@KARD           SET
         ST    R14,@KARDPTR         KARDPTR = ADDR(KARD)
         B     HPAGO2              DO WHILE KARDPTR LE ADDR(KARD)+LEN
HPALP2   L     R14,@KARDPTR
         PACK  @CHAR9,0(16,R14)    PACK 16 BYTES
         L     R11,@HEXDEST
         MVO   0(9,R11),@CHAR9
         AL    R11,EIGHT           ADD 8 TO
         ST    R11,@HEXDEST         HEX RESULT ADDRESS
         AL    R14,SIXTEEN         ADD 16 TO
         ST    R14,@KARDPTR         KARDPTR
HPAGO2   L     R14,@MODLEN
         LA    R11,@KARD
         ALR   R11,R14
         C     R11,@KARDPTR
         BH    HPALP2              END OF DO LOOP
         SPACE
         ST    R14,@WORD59
         LR    R2,R14              PREPARE TO DIVIDE
         SRDA  R2,32               PREPARE TO DIVIDE
         D     R2,TWO              HALVE THE LENGTH
         ST    R3,@MODLEN          SAVE LENGTH
         ALR   R3,R3               DOUBLE IT
         CR    R14,R3              AND COMPARE TO ORIGINAL
         BE    HPAX                IF EQUAL, THERE WERE AN EVEN NUMBER
         LA    R14,MSG12           UNEVEN NUMBER OF HEX DIGITS
         ST    R14,@MSGADR
         BAL   R14,PUTMSG08        SYNTAX
HPAX     LM    R14,R12,@SAVE21
         BR    R14
HPRTRT   TRT   @KARD(1),HEXTRT     (EXECUTED)
         B     HPAX
         EJECT
*
*
*
         SPACE
BAS      STM   R14,R12,@SAVE08
         SLR   R14,R14
         ST    R14,@WORD24
         MVI   @CH1,C' '
         B     BASGO1
BASLP1   L     R14,@PARBEG
         C     R14,@SEPEND
         BNH   BASOK1
         ST    R14,@WORD24
         B     BASGO1
BASOK1   L     R14,@PARBEG
         CLI   0(R14),C' '
         BNE   BASOK2
         AL    R14,ONE
         ST    R14,@PARBEG
         B     BASGO1
BASOK2   L     R14,@PARBEG
         MVC   @CH1,0(R14)
         ST    R14,@WORD24
BASGO1   L     R14,@WORD24
         LTR   R14,R14
         BZ    BASLP1
         SPACE
         CLI   @CH1,X'7D'          QUOTE
         BE    BASQOT
         BAL   R14,HEXPARSE
         L     R14,@MODLEN
         C     R14,FOUR
         BNH   BASOK3
         LA    R14,MSG02           OFFSET FIELD IS TOO LONG
         ST    R14,@MSGADR
         BAL   R14,PUTMSG08        SYNTAX
         B     BASX
BASOK3   L     R14,@MODLEN
         SLR   R11,R11
         CR    R14,R11             IS MODLEN ZERO
         BE    BASNUL              YES, BRANCH
         ST    R11,@BASE           LEADING ZEROES
         LCR   R14,R14             1 2 3 4 BECOME -1 -2 -3 -4
         AL    R14,FIVE            BECOME +4 +3 +2 +1
         LA    R11,@BASE-1(R14)
         LCR   R14,R14             BECOME -4 -3 -2 -1
         AL    R14,FOUR            BECOME 0 1 2 3 LENGTH CODE
         EX    R14,A001638         MOVE REPDATA TO R11
         CLC   @COMMAND(3),LITBAS  IS THIS A BASE STATEMENT
         BNE   BASINN              NO, ITS A VER OR REP, BRANCH
         L     R14,@BASE
         ST    R14,@WORD03
         B     BASX
BASINN   L     R14,@ADDRESS
         AL    R14,@BASE
         SL    R14,@WORD03
         ST    R14,@MODADR
BASNUL   B     BASX
BASQOT   MVI   @CSECN+1,C' '
         MVC   @CSECN+2(6),@CSECN+1
         MVI   @CSECN,C' '
         LA    R14,@CSECN
         ST    R14,@PARRES
         MVC   @PARMAXL,EIGHT
         BAL   R14,PARSE
         CLC   @CSECN(8),BLANKS
         BE    BASMISS
         BAL   R14,ESDRTN          PROCESS ESD
         L     R14,@ADDRBAS        GET ADDRESS OF MODULE
         AL    R14,@ESDOFFS        ADD OFFSET TO CSECT
         ST    R14,@MODADR
         ST    R14,@WHEREAD
         TM    @SWA,QUIT
         BNZ   BASX
         BAL   R14,PUTWHERE
         B     BASX
BASMISS  LA    R14,MSG11           REQUIRED FIELD MISSING
         ST    R14,@MSGADR
         BAL   R14,PUTMSG08        SYNTAX
BASX     LM    R14,R12,@SAVE08
         BR    R14
         EJECT
*
*
*
         SPACE
GETCARD  STM   R14,R12,@SAVE10
         TM    @SWA,CONSOLE        CONSOLE
         BNO   GETSIN              NO, BRANCH
         BAL   R14,SEPARATE        YES
         B     GETCGO1             DO WHILE SEPEND GT STREND
GETCLP1  SLR   R14,R14
         ST    R14,@WTORECB
         MVI   @REPLY+1,C' '
         MVC   @REPLY+2(128),@REPLY+1
         MVI   @REPLY,C' '
         LA    R1,@WTORW
         LA    R15,@REPLY
         ST    R15,0(R1)
         MVI   0(R1),130           LENGTH OF REPLY
         LA    R14,@WTORECB
         ST    R14,4(R1)
         SVC   35                          WTOR
         LA    R0,1
         LA    R1,@WTORECB
         SVC   1                           WAIT
         TR    @REPLY(130),EBCDIC
         LA    R14,@REPLY
         LR    R11,R14
         BCTR  R11,R0
         ST    R11,@SEPEND
         SL    R14,MINUS129
         ST    R14,@STREND
         BAL   R14,SEPARATE
GETCGO1  CLC   @SEPEND,@STREND
         BH    GETCLP1             END OF DO LOOP
         B     GETCX
         SPACE
GETSIN   TM    @SWA,CARDS          CONTROL CARDS
         BNZ   GETCSYIN            YES, BRANCH
         CLC   @SEPEND,@STREND     MORE IN PARM
         BL    GETCPARM            YES, BRANCH
         OI    @SWA,QUIT           QUIT
         B     GETCX
GETCPARM BAL   R14,SEPARATE
         B     GETCX
GETCSYIN BAL   R14,SEPARATE
         B     GETCGO2             DO WHILE SEPEND GT STREND
GETCLP2  EQU   *
         GET   @CTLDCB,@CTLCARD    GET A CARD
         LA    R14,@CTLCARD
         LR    R11,R14
         BCTR  R11,R0
         ST    R11,@SEPEND         POINT TO BYTE PRECEDING COL 1
         SL    R14,MINUS079        POINT TO COLUMN 80
         ST    R14,@STREND
         BAL   R14,SEPARATE
GETCGO2  CLC   @SEPEND,@STREND
         BH    GETCLP2             END OF DO LOOP
         SPACE
GETCX    LM    R14,R12,@SAVE10
         BR    R14
CTLEOD   OI    @SWA,QUIT           QUIT
         B     GETCX
         SPACE 2
*
*         SET SEPEND EQUAL TO ADDRESS OF SLASH OR END OF STATEMENT
*
         SPACE
SEPARATE STM   R14,R12,12(R13)
         L     R14,@SEPEND
         C     R14,@STREND
         BH    SEPX
         AL    R14,ONE             ADD 1 TO
         ST    R14,@SEPEND          SEPEND
         ST    R14,@PARBEG         INITIALIZE PARSE BEGIN ADDRESS
         SLR   R14,R14             SET
         ST    R14,@SEPSWT          SEPSWT = 0
         B     SEPGO1              DO UNTIL SEPSWT NE 0
SEPLP1   CLC   @SEPEND,@STREND
         BL    SEPOK1
         LA    R14,1               SET
         ST    R14,@SEPSWT          SEPSWT = 1
         B     SEPGO1
SEPOK1   L     R14,@SEPEND
         CLI   0(R14),C'/'         MULTIPLE STATEMENTS PER CARD
         BNE   SEPNXT              NO
         MVI   0(R14),C' '         YES, CHANGE SLASH TO BLANK
         LA    R14,1               SET
         ST    R14,@SEPSWT          SEPSWT = 1
         B     SEPGO1
SEPNXT   LA    R14,1               ADD 1
         AL    R14,@SEPEND          TO
         ST    R14,@SEPEND           SEPEND
SEPGO1   L     R14,@SEPSWT
         LTR   R14,R14
         BZ    SEPLP1
SEPX     LM    R14,R12,12(R13)
         BR    R14
         EJECT
*
*
*
         SPACE
HEXCV    STM   R14,R12,12(R13)
         LA    R14,1
         B     HEXCT
HEXLP    L     R11,@HEXTO
         L     R7,@HEXFR
         ALR   R7,R14
         BCTR  R7,R0
         MVC   1(1,R11),0(R7)
         UNPK  0(1,R11),1(1,R11)
         NC    0(2,R11),HEX0F0F
         SLR   R7,R7
         IC    R7,0(,R11)
         SLR   R4,R4
         IC    R4,HEXTAB(7)
         STC   R4,0(,R11)
         SLR   R7,R7
         IC    R7,1(,R11)
         SLR   R4,R4
         IC    R4,HEXTAB(7)
         STC   R4,1(,R11)
         AL    R11,TWO
         ST    R11,@HEXTO
         AL    R14,ONE
HEXCT    ST    R14,@WORD57
         C     R14,@HEXLEN
         BNH   HEXLP
         LM    R14,R12,12(R13)
         BR    R14
         EJECT
*
*
*
         SPACE
INIT     STM   R14,R12,@SAVE09
         MVI   @WTOLINE+127,C' '
         MVC   @WTOLINE+128(16),@WTOLINE+127
         MVC   @WTOLINE(127),BLINE
         MVC   @WTORW,WTORM
         XC    @CLOSE(12),@CLOSE
         XC    @KARD,@KARD
         SLR   R14,R14
         ST    R14,@RC
         XC    @SWA(2),@SWA
         L     R14,16              CVTPTR
         L     R14,0(,R14)         CVTTCBP
         L     R14,4(,R14)         CURRENT TCB
         L     R14,0(,R14)         TCBRBP
*ZAP CARD *************************************************************
*ZAP CARD **      I N C O R Z A P -  CUMULATIVE FIX SUPERZAP         **
*ZAP CARD **                                                         **
*ZAP CARD **    HOWARD M. DEAN                                       **
*ZAP CARD **    GTE DATA SERVICES                                    **
*ZAP CARD **    4750 LINCOLN BLVD.                                   **
*ZAP CARD **    MARINA DEL REY, CA 90291                             **
*ZAP CARD **    (213) 821-0511 X330                                  **
*ZAP CARD **                                                         **
*ZAP CARD *************************************************************
*ZAP CARD   NAME INCORZAP INCORZAP
*ZAP CARD   IDRDATA HD830429
*ZAP CARD * EXPAND INCORZAP(1024)
*ZAP CARD * BE SURE TO EXPAND INCORZAP 1024 BYTES VIA
*ZAP CARD * LINKAGE EDITOR BEFORE RUNNING THIS ZAP.
*ZAP CARD *
*ZAP CARD * THE FOLLOWING FIXES ARE INCORPORATED IN THIS
*ZAP CARD * SUPERZAP:
*ZAP CARD *
*ZAP CARD *    1. TURN OFF PLPA SEGMENT PROTECTION
*ZAP CARD *       FOR DURATION OF ZAP SO THAT
*ZAP CARD *       INCORZAP CAN WORK ON A 3081 PROCESSOR.
*ZAP CARD *
*ZAP CARD *    2. INCREASE WORK AREA TO X'2000' FOR MVS/SP 1.3
*ZAP CARD *
*ZAP CARD *    3. ADJUST DECB OFFSET FOR WORK AREA SIZE     *HMD 04/83*
*ZAP CARD *       INCREASE.                                 *HMD 04/83*
*ZAP CARD *                                                 *HMD 04/83*
*ZAP CARD *    4. CHANGE 'SYSLIB' OPEN TO INPUT ONLY RATHER
*ZAP CARD *       THAN 'INOUT' SINCE DISK COPY IS NEVER UPDATED.
*ZAP CARD *
*ZAP CARD *    5. ALLOW ANY NAME, RATHER THAN 'LINKZAP' TO
*ZAP CARD *       BE USED ('LINKZAP' IS STILL AN ALIAS HOWEVER).
*ZAP CARD *
*ZAP START VER
ZAP01    L     R14,12(,R14)        RBCDE                          .***.
         CLC   8(8,R14),LINKZAP    CDNAME LINKZAP                 .***.
         BE    INIT1               YES, NO CONTROL CARDS          .***.
         ORG   ZAP01                                        *HMD 10/82*
*ZAP START REP                                              *HMD 10/82*
         L     R14,@PARMPTR        PARM FIELD                     .PRC.
         LH    R14,0(,R14)         LENGTH OF PARM                 .PRC.
         LTR   R14,R14             IS THERE A PARM                .PRC.
         BNZ   INIT1               YES, NO CONTROL CARDS          .PRC.
*ZAP PAUSE                                                  *HMD 10/82*
         OI    @SWA,CARDS          CONTROL CARDS
INIT1    LA    R14,PRTDEF
         ST    R14,@OPENDEF
         LA    R14,@PRTDCB
         ST    R14,@OPENDCB
         BAL   R14,OPEN            OPEN PRT
         LTR   R15,R15             WAS OPEN SUCCESSFUL
         BNZ   INIT2
         OI    @SWA,SWA02          PRT IS OPEN
INIT2    LA    R14,LIBDEF
         ST    R14,@OPENDEF
         LA    R14,@LIBDCB
         ST    R14,@OPENDCB
         BAL   R14,OPEN            OPEN LIB
         LTR   R15,R15
         BZ    INIT3
         LA    R14,MSG07           DD STATEMENT FOR LIBRARY NOT FOUND
         ST    R14,@MSGADR
         BAL   R14,PUTMSG12
         B     INITX
INIT3    TM    @SWA,CARDS          CONTROL CARDS
         BNO   INITPARM            NO, GO GET PARM FIELD
         LA    R14,CTLDEF
         ST    R14,@OPENDEF
         LA    R14,@CTLDCB
         ST    R14,@OPENDCB
         BAL   R14,OPEN            OPEN SYSIN
         LTR   R15,R15
         BZ    INIT4
         LA    R14,MSG06           INPUT DD STATEMENT NOT FOUND
         ST    R14,@MSGADR
         BAL   R14,PUTMSG12
         B     INITX
INIT4    L     R14,@STREND
         ST    R14,@SEPEND
         B     INITX
INITPARM LA    R14,@PARMCPY
         BCTR  R14,R0
         ST    R14,@SEPEND
         L     R11,@PARMPTR
         LH    R7,0(,R11)          GET LENGTH OF PARM
         ALR   R14,R7              GET ADDRESS OF LAST CHAR IN PARM
         ST    R14,@STREND         SAVE IT
         LTR   R7,R7               IS THERE A PARM
         BNP   INITX               NO, BRANCH
         BCTR  R7,R0               LENGTH MINUS 1 FOR EX
         EX    R7,PARMMVC          MOVE PARM TO PARMCPY
INITX    LM    R14,R12,@SAVE09
         BR    R14
         EJECT
*
*
*
         SPACE
OPEN     STM   R14,R12,@SAVE24
         L     R14,@OPENDCB
         L     R11,@OPENDEF
         L     R7,0(,R11)
         MVC   0(100,R14),0(R7)            MOVE DCB PROTOTYPE
         LR    R1,R11
         LA    R1,8(,R1)                   PRIMARY DDNAME
*        DEVTYPE (1),@CTLCARD
         LA    R0,@CTLCARD                 DEVTYPE
         SVC   24                          DEVTYPE
         LTR   R15,R15                     IS DDNAME ALLOCATED
         BNZ   A000A02                     NO, BRANCH
         L     R14,@OPENDCB
         L     R11,@OPENDEF
         MVC   40(8,R14),8(R11)            USE PRIMARY DDNAME
         B     A000A10
A000A02  L     R14,@OPENDCB
         L     R11,@OPENDEF
         MVC   40(8,R14),16(R11)           USE SECONDARY DDNAME
A000A10  L     R14,@OPENDEF
         L     R14,4(,R14)         POINT TO OPEN MF=L IMAGE
         L     R11,@OPENDCB
         ICM   R7,15,0(R14)        LOAD OPEN MF=L IMAGE
         OR    R11,R7              OR IMAGE OVER R11
         ST    R11,@OPENDCB        STORE COMBINED IMAGE IN OPEN MF=L
         LA    R1,@OPENDCB
*        OPEN
         SVC   19                  OPEN
         L     R14,@OPENDCB
         TM    48(R14),X'10'       WAS OPEN SUCCESSFUL
         BNO   OPENRC4             NO, BRANCH
         SLR   R14,R14
         ST    R14,@OPENRC
         B     OPENRET
OPENRC4  MVC   @OPENRC,FOUR
OPENRET  L     R15,@OPENRC
         L     R14,@SAVE24
         LM    R0,R12,@SAVE24+8
         BR    R14
         EJECT
*
*
*
         SPACE
PUTWHERE STM   R14,R12,@SAVE23
         MVI   @LINE47,C' '
         MVC   @LINE48(73),@LINE47
         MVC   @LINE01(46),WHEREMSG
         LA    R14,@WHEREAD
         ST    R14,@HEXFR
         MVC   @HEXLEN,FOUR
         LA    R14,@LINE01
         ST    R14,@HEXTO
         BAL   R14,HEXCV
         BAL   R14,PUTLINE
         LM    R14,R12,@SAVE23
         BR    R14
         SPACE
*
*
*
         SPACE
PUTLINE  STM   R14,R12,@SAVE11
         TM    @SWA,SWA02                  PRT OPEN
         BNO   A000ACE
         TM    @SWB,SWB40
         BNZ   A000ABC
         OI    @SWB,SWB40
         PUT   @PRTDCB,HEADING
         MVI   @LINE,C'0'
         B     A000AC0
A000ABC  MVI   @LINE,C' '
A000AC0  EQU   *
         PUT   @PRTDCB,@LINE
A000ACE  TM    @SWA,CONSOLE
         BNO   A000AEA
         TM    @SWB,NOCONS         FOR PRINT ONLY
         BNZ   A000AEA             YES, BYPASS WTO
         MVC   @WTOLINE+4(120),@LINE01
         WTO   MF=(E,@WTOLINE)
A000AEA  LM    R14,R12,@SAVE11
         BR    R14
         EJECT
*
*
*
         SPACE
READLIB  STM   R14,R12,@SAVE25
*ZAP START VER                                              *HMD 04/83*
         READ  @DECB,SF,@LIBDCB,@BUFFER,248,MF=E
         ORG   READLIB+4        CHANGE DECB ADDRESS         *HMD 04/83*
*ZAP START REP                                              *HMD 04/83*
         LA    R1,X'FED'(,R5)   LOAD ADJUSTED DECB ADDRESS  *HMD 04/83*
         ORG   ,                END OF ZAPPED CODE          *HMD 04/83*
*ZAP PAUSE                                                  *HMD 04/83*
         SPACE
*ZAP START VER                                              *HMD 04/83*
CHECKZAP DS    0H                                           *HMD 04/83*
         CHECK @DECB
         ORG  CHECKZAP          CHANGE DECB ADDRESS         *HMD 04/83*
*ZAP START REP                                              *HMD 04/83*
         LA   R1,X'FED'(,R5)    LOAD ADJUSTED DECB ADDRESS  *HMD 04/83*
         ORG  ,                 END OF ZAPPED CODE          *HMD 04/83*
*ZAP PAUSE                                                  *HMD 04/83*
         SPACE
         LM    R14,R12,@SAVE25
         BR    R14
         EJECT
*
*
*
         SPACE
LOCATE   STM   R14,R12,@SAVE26
         TM    @SWA,LOCMODE        LOCAL
         BNZ   A000B4E             YES, BRANCH
         L     R8,16               CVT ADDRESS
         LA    R8,188(,R8)         CVTQLPAQ
         B     A000B64
A000B4E  L     R14,16              CVT ADDRESS
         L     R14,0(,R14)
         L     R14,4(,R14)
         L     R8,124(,R14)        TCBJSTCB
         LA    R14,44(,R8)         TCBJPQ - LAST CDE
         LR    R8,R14
A000B64  LA    R9,@MEMBER
         LR    R4,R9
         SL    R4,FORTY8
         L     R7,16               CVT ADDRESS
         L     R15,184(,R7)        CVTQCDSR - CDE SEARCH RTN
         BALR  R14,R15             STD LINKAGE
         LA    R0,0
         LTR   R0,R0
         BNZ   A000BD6
         L     R14,16              CVT ADDRESS
         TM    116(R14),X'01'      CVTDCB - MVS BIT ON
         BNO   A000B96
         TM    28(R11),X'04'
         BO    A000BAA
A000B96  L     R14,16              CVT ADDRESS
         TM    116(R14),X'01'      CVTDCB - MVS BIT ON
         BNZ   A000BAE
         TM    0(R11),X'04'
         BNO   A000BAE
A000BAA  L     R11,20(,R11)
A000BAE  L     R14,20(,R11)
         L     R7,12(,R14)
         LA    R7,0(,R7)
         ST    R7,@ADDRBAS         ADDRESS OF MODULE
         L     R7,@TEMP01
         LA    R7,0(,R7)
         LTR   R7,R7
         BNZ   A000BD2
         MVC   @TEMP01+1(3),9(R14)
A000BD2  B     A000BDC
A000BD6  SLR   R14,R14
         ST    R14,@ADDRBAS        ZERO ADDRESS OF MODULE
A000BDC  L     R14,@ADDRBAS
         LTR   R14,R14
         BNZ   A000C68
         TM    @SWA,LOCMODE
         BNZ   A000C68
         L     R14,16              CVT ADDRESS
         TM    116(R14),X'01'      CVTDCB - MVS BIT ON
         BNO   A000C68
         SLR   R0,R0               SET
         BCTR  R0,R0                R0 NEGATIVE
         L     R1,360(,R14)        CVTLPDIR - LPA DIRECTORY
         LA    R1,0(,R1)
         B     LOCATGO1            DO WHILE R0 NEGATIVE
LOCATLP1 CLC   8(8,R1),@MEMBER
         BNE   A000C4E
         TM    28(R1),X'04'        ALIAS
         BNO   A000C32             NO
         MVC   @MEMBER,32(R1)      YES, GET PRIMARY NAME AND START OVER
         L     R14,16              CVT ADDRESS
         L     R1,360(,R14)        CVTLPDIR - LPA DIRECTORY
         LA    R1,0(,R1)
         B     LOCATINC
A000C32  L     R0,36(,R1)          SET R0
         L     R14,@TEMP01
         LA    R14,0(,R14)
         LTR   R14,R14
         BNZ   LOCATINC
         MVC   @TEMP01+1(3),33(R1)
         B     LOCATINC
A000C4E  CLC   8(8,R1),FFFFFFFF
         BNE   LOCATINC
         SLR   R0,R0               END OF DIRECTORY, SET R0 NON NEG
LOCATINC AL    R1,FORTY
LOCATGO1 LTR   R0,R0
         BM    LOCATLP1
         ST    R0,@ADDRBAS         SAVE LOCATION OF MODULE
A000C68  L     R14,@ADDRBAS
         LTR   R14,R14             WAS END OF DIRECTORY HIT
         BNZ   LOCATEX             NO, BRANCH
         LA    R14,MSG04           MODULE NOT FOUND IN MAIN STORAGE
         ST    R14,@MSGADR
         BAL   R14,PUTMSG12
LOCATEX  LM    R14,R12,@SAVE26
         BR    R14
         EJECT
*
*
*
         SPACE
ESDRTN   STM   R14,R12,@SAVE22
         BAL   R14,FIND
         TM    @SWA,QUIT
         BNZ   A000ECA
         SLR   R14,R14
         BCTR  R14,R0
         ST    R14,@ESDOFFS        ESDOFFS = -1
         ST    R14,@WORD50         WORD50 = -1
         SLR   R14,R14
         ST    R14,@WORD04
         CLC   @MEMBER(6),IEANUC
         BNE   A000CB8
         OI    @SWA,SWA04
         B     A000CBC
A000CB8  NI    @SWA,255-SWA04
A000CBC  SLR   R14,R14
         ST    R14,@WORD44
         LA    R14,1
         ST    R14,@ESDSUB
A000CCA  LR    R11,R14
         MH    R11,FIVE+2
         LA    R7,@WAY08A1(R11)
         XC    1(4,R7),1(R7)
         MVI   0(R7),X'00'
         AL    R14,ONE
         ST    R14,@ESDSUB
         C     R14,F400
         BNH   A000CCA
         SLR   R14,R14
         ST    R14,@WORD07
         B     A000DF0
A000CF8  BAL   R14,READLIB
         CLI   @BUFFER,C' '        SYM RECORD
         BNE   A000D08             NO, BRANCH
         BAL   R14,A001032
A000D08  CLI   @BUFFER,X'20'       CESD RECORD
         BE    A000D1C             YES, BRANCH
         LA    R14,1
         ST    R14,@WORD07
         B     A000DF0
A000D1C  LH    R2,@BUFFER+6        GET LENGTH OF ESD DATA
         SRDA  R2,32
         D     R2,SIXTEEN          GET NUMBER OF ENTRIES
         ST    R3,@ESDSIZ
*
*               ESDSUB = 1
*               DO WHILE ESDSUB .LE. ESDMAX
*               WORD04 = WORD04 + 1
*               IF SWA04 = 0
*                  IF SD OR LR
*                     PERFORM A000ED0
*               ESDSUB = ESDSUB + 1
*
         LA    R14,1               START WITH ENTRY NUMBER 1
         B     ESDGO
A000D34  LA    R14,1
         AL    R14,@WORD04
         ST    R14,@WORD04
         TM    @SWA,SWA04
         BNO   A000D50
         NI    @SWA,255-SWA04
         B     ESDINCR
A000D50  L     R14,@ESDSUB
         SLA   R14,4               MULTIPLY BY 16
         LA    R11,@BUFFER(14)     ACTUALLY @BUFFER+16-16
         TM    0(R11),X'0F'        IS IT AN SD
         BZ    GOTSD               YES, BRANCH
         LA    R11,@BUFFER(14)
         TM    0(R11),X'03'        IS IT AN LR
         BNO   ESDINCR             NO, BRANCH
         TM    0(R11),X'0C'        MAYBE, IS IT AN LR
         BNZ   ESDINCR             NO, BRANCH
GOTSD    L     R14,@ESDSUB
         ST    R14,@WORD06
         BAL   R14,A000ED0
         L     R14,@ESDSUB
         SLA   R14,4
         LA    R11,@BUFFER-8(14)   ACTUALLY BUFFER+8-16
         CLC   0(8,R11),@CSECN
         BNE   A000DA6
         L     R14,@BUFFER(14)     ACTUALLY BUFFER+16-16
         LA    R14,0(,R14)         ZERO HI ORDER BYTE OF ADDRESS
         ST    R14,@ESDOFFS        SAVE CSECT ADDRESS
A000DA6  L     R14,@ESDSUB
         SLA   R14,4
         LA    R11,@BUFFER(14)     ACTUALLY BUFFER+8-16
         TM    0(R11),X'0F'        IS THIS AN SD
         BNZ   ESDINCR             NO, BRANCH
         LA    R11,@BUFFER-8(14)
         CLC   0(8,R11),@CSECT     IS THIS THE REQUESTED CSECT
         BNE   ESDINCR             NO, BRANCH
         L     R14,@BUFFER(14)     ACTUALLY BUFFER+16-16
         LA    R14,0(,R14)         ZERO HI ORDER BYTE OF ADDRESS
         ST    R14,@WORD09         SAVE CSECT ADDRESS
         L     R14,@WORD45
         ST    R14,@WORD05
ESDINCR  LA    R14,1               ADD 1 TO
         AL    R14,@ESDSUB         ESD SUBSCRIPT
ESDGO    ST    R14,@ESDSUB
         C     R14,@ESDSIZ         HAS SUBSCRIPT HIT SIZE YET
         BNH   A000D34             NO, BRANCH
*
*               END PREVIOUS DO LOOP
*
A000DF0  SLR   R14,R14
         C     R14,@WORD07
         BE    A000CF8
         CLC   @CSECT,BLANKS
         BNE   A000E0E
         MVC   @WORD05,ONE
         ST    R14,@WORD09
A000E0E  L     R14,@WORD50
         LTR   R14,R14
         BM    A000E20
         AL    R14,@WORD09
         ST    R14,@ESDOFFS
A000E20  SLR   R14,R14
         C     R14,@WORD44
         BNL   A000EBE
         L     R11,@WORD05
         CR    R11,R14
         BNH   A000EBE
         C     R14,@ESDOFFS
         BH    A000EBE
         MH    R11,FIVE+2
         LA    R7,@WAY08A3(R11)
         MVC   @TEMP01+1(3),0(R7)
         CLC   @MEMBER(6),IEANUC
         BNE   A000E9E
         ST    R14,@WORD02
         LA    R14,1
         B     A000E8E
A000E60  L     R11,@WORD02
         ST    R11,@WORD46
         LR    R7,R14
         MH    R7,FIVE+2
         LA    R4,7
         L     R7,@WAY08A2(7)
         LA    R7,0(,R7)
         ALR   R4,R7
         N     R4,MINUS008
         ST    R4,@WORD56
         ALR   R11,R4
         ST    R11,@WORD02
         AL    R14,ONE
A000E8E  ST    R14,@ESDSUB
         C     R14,@WORD05
         BNH   A000E60
         B     A000EA6
A000E9E  L     R14,@WORD09
         ST    R14,@WORD46
A000EA6  L     R14,@ESDOFFS
         SL    R14,@WORD09
         ST    R14,@ESDOFFS
         AL    R14,@WORD46
         ST    R14,@ESDOFFS
         B     A000ECA
A000EBE  LA    R14,MSG09           SYMBOL NOT FOUND IN LOAD MODULE
         ST    R14,@MSGADR
         BAL   R14,PUTMSG12
A000ECA  LM    R14,R12,@SAVE22
         BR    R14
         EJECT
*
*
*
         SPACE
A000ED0  STM   R14,R12,12(R13)
         L     R14,@WORD06         GET ESD SUBSCRIPT
         SLA   R14,4               MULTIPLY BY 16
         LA    R11,@BUFFER(14)     POINT TO ESD ENTRY + 8
         TM    0(R11),X'03'        IS IT AN LD
         BNO   A000F70             NO, BRANCH
         TM    0(R11),X'0C'        IS IT AN LD
         BNZ   A000F70             NO, BRANCH
         CLC   @MEMBER(6),IEANUC   IS THIS A NUCLEUS ZAP
         BNE   A000F70             NO, BRANCH
         MVC   @WORD45,ONE
         B     A000F46
A000F04  L     R14,@WORD45
         L     R11,@WORD44
         CR    R14,R11
         BNH   A000F3A
         AL    R11,ONE
         ST    R11,@WORD44
         MH    R14,FIVE+2
         L     R11,@WORD06
         SLA   R11,4
         LH    R11,@BUFFER+6(R11)
         N     R11,X000FFFF
         LA    R7,@WAY08A1(14)
         STCM  R11,3,0(R7)
         B     A000F46
A000F3A  LA    R14,1
         AL    R14,@WORD45
         ST    R14,@WORD45
A000F46  L     R14,@WORD45
         MH    R14,FIVE+2
         L     R11,@WORD06
         SLA   R11,4
         LH    R11,@BUFFER+6(R11)
         N     R11,X000FFFF
         LA    R7,@WAY08A1(14)
         ICM   R14,12,0(R7)
         SRA   R14,16
         CR    R11,R14
         BNE   A000F04
A000F70  L     R14,@WORD06         GET ESD SUBSCRIPT
         SLA   R14,4               MULTIPLY BY 16
         LA    R11,@BUFFER(14)     POINT TO ESD ENTRY + 8
         TM    0(R11),X'0F'        IS IT AN SD
         BNZ   A00102C             NO, BRANCH
         CLC   @MEMBER(6),IEANUC   IT THIS A NUCLEUS ZAP
         BNE   A000FEE             NO, BRANCH
         MVC   @WORD45,ONE
         B     A000FCE
A000F98  L     R14,@WORD45
         L     R11,@WORD44
         CR    R14,R11
         BNH   A000FC2
         AL    R11,ONE
         ST    R11,@WORD44
         MH    R14,FIVE+2
         L     R11,@WORD04
         LA    R7,@WAY08A1(14)
         STCM  R11,3,0(R7)
         B     A000FCE
A000FC2  LA    R14,1
         AL    R14,@WORD45
         ST    R14,@WORD45
A000FCE  L     R14,@WORD45
         MH    R14,FIVE+2
         LA    R11,@WAY08A1(14)
         ICM   R14,12,0(R11)
         SRA   R14,16
         C     R14,@WORD04
         BNE   A000F98
         B     A00100E
A000FEE  LA    R14,1
         AL    R14,@WORD44
         ST    R14,@WORD44
         ST    R14,@WORD45
         MH    R14,FIVE+2
         L     R11,@WORD04
         LA    R7,@WAY08A1(14)
         STCM  R11,3,0(R7)
A00100E  L     R14,@WORD45
         MH    R14,FIVE+2
         L     R11,@WORD06         GET SUBSCRIPT
         SLA   R11,4               MULTIPLY BY 16
         LA    R7,@WAY08A3(14)
         LA    R14,@BUFFER+4+1(R11)
         MVC   0(3,R7),0(R14)
A00102C  LM    R14,R12,12(R13)
         BR    R14
         EJECT
*
*
*
         SPACE
A001032  STM   R14,R12,@SAVE27
         SLR   R14,R14
         ST    R14,@WORD52
         LA    R14,@BUFFER+4
         ST    R14,@WORD47
         OI    @SWB,SWB80
         OI    @SWA,SWA01
         BAL   R14,A0011E6
         B     A00118A
A001054  LA    R14,@WAY08
         B     A001068
A00105C  BAL   R14,A001198
         LA    R14,1
         AL    R14,@WORD48
A001068  ST    R14,@WORD48
         LA    R11,@WAY08
         SL    R11,MINUS003
         CR    R14,R11
         BNH   A00105C
         TM    @SWA,SWA01
         BNO   A00118A
         TM    @WAY08,X'88'
         BO    A00113A
         MVC   @WAY08A(8),BLANKS
         LA    R14,@WAY08A
         B     A0010A4
A001098  BAL   R14,A001198
         LA    R14,1
         AL    R14,@WORD48
A0010A4  ST    R14,@WORD48
         LA    R11,@WAY08A
         LA    R7,7
         SLR   R4,R4
         IC    R4,@WAY08
         NR    R7,R4
         ALR   R11,R7
         CR    R14,R11
         BNH   A001098
         TM    @SWB,SWB80
         BNO   A0010FC
         TM    @WAY08,X'80'
         BNZ   A0010F8
         TM    @WAY08,X'10'
         BNO   A0010F8
         TM    @WAY08,X'60'
         BNZ   A0010F8
         CLC   @WAY08A(8),@CSECT
         BE    A0010F4
         CLC   @CSECT,BLANKS
         BNE   A0010F8
A0010F4  NI    @SWB,255-SWB80
A0010F8  B     A00113A
A0010FC  TM    @WAY08,X'80'
         BNZ   A001126
         TM    @WAY08,X'10'
         BNO   A001126
         TM    @WAY08,X'60'
         BNZ   A001126
         CLC   @CSECT,BLANKS
         BE    A001122
         OI    @SWB,SWB80
A001122  B     A00113A
A001126  CLC   @WAY08A(8),@CSECN
         BNE   A00113A
         SLR   R14,R14
         ICM   R14,7,@WAY08Z
         ST    R14,@WORD50
A00113A  TM    @WAY08,X'80'
         BNO   A00118A
         LA    R14,@WAY08B
         ST    R14,@WORD48
         BAL   R14,A001198
         LA    R14,@WAY08C
         ST    R14,@WORD48
         BAL   R14,A001198
         CLI   @WAY08B,X'10'
         BNL   A001166
         BAL   R14,A001198
A001166  TM    @WAY08,X'40'
         BNO   A00117A
         BAL   R14,A001198
         BAL   R14,A001198
         BAL   R14,A001198
A00117A  TM    @WAY08,X'10'
         BNO   A00118A
         BAL   R14,A001198
         BAL   R14,A001198
A00118A  TM    @SWA,SWA01
         BO    A001054
         LM    R14,R12,@SAVE27
         BR    R14
         EJECT
*
*
*
         SPACE
A001198  STM   R14,R12,@SAVE29
         L     R14,@WORD51
         L     R11,@WORD47
         ICM   R11,12,10(R11)
         SRA   R11,16
         CR    R14,R11
         BL    A0011B6
         BAL   R14,A0011E6
A0011B6  TM    @SWA,SWA01
         BNO   A0011E0
         L     R14,@WORD48
         L     R11,@WORD49
         MVC   0(1,R14),0(R11)
         LA    R14,1
         L     R7,@WORD51
         ALR   R7,R14
         ST    R7,@WORD51
         ALR   R11,R14
         ST    R11,@WORD49
A0011E0  LM    R14,R12,@SAVE29
         BR    R14
         EJECT
*
*
*
         SPACE
A0011E6  STM   R14,R12,@SAVE28
         SLR   R14,R14
         ST    R14,@WORD51
         ST    R14,@WORD49       SET WORD49 = 0
         B     A001268           DO WHILE WORD49 = 0 AND SWA01 ON
A0011F8  L     R14,@WORD52
         CH    R14,@BUFFER+2
         BL    A001226
         SLR   R14,R14
         ST    R14,@WORD52
         BAL   R14,READLIB
         CLI   @BUFFER,C' '        SYM
         BNE   A001222             NO, BRANCH
         LA    R14,@BUFFER+4
         ST    R14,@WORD47
         B     A001226
A001222  NI    @SWA,255-SWA01      SET SWA01 OFF
A001226  L     R14,@WORD52
         LTR   R14,R14
         BZ    A00123C
         LA    R14,80
         AL    R14,@WORD47
         ST    R14,@WORD47
A00123C  LA    R14,80
         AL    R14,@WORD52
         ST    R14,@WORD52
         L     R14,@WORD47
         CLC   1(3,R14),SYM
         BNE   A001268
         L     R11,@WORD50
         LTR   R11,R11
         BNM   A001268
         LA    R14,16(,R14)
         ST    R14,@WORD49
A001268  L     R14,@WORD49
         LTR   R14,R14
         BNZ   A00127A
         TM    @SWA,SWA01
         BO    A0011F8
A00127A  LM    R14,R12,@SAVE28
         BR    R14
         EJECT
*
*               SYNTAX ERROR
*
         SPACE
PUTMSG08 STM   R14,R12,@SAVE20
         MVI   @LINE02,C' '
         MVC   @LINE03(118),@LINE02
         MVI   @LINE01,C' '
         MVC   @LINE01(15),SYNTAX
         L     R14,@MSGADR
         L     R11,0(,R14)
         EX    R11,PUTM8MV         MOVE 4(R14) TO LINE+16
         BAL   R14,PUTLINE
         MVC   @RC,EIGHT
         OI    @SWA,QUIT           QUIT
         LM    R14,R12,@SAVE20
         BR    R14
         SPACE
*
*
*
         SPACE
MODESET1 STM   R14,R12,@SAVE17
         MODESET KEY=ZERO,MODE=SUP
         LM    R14,R12,@SAVE17
         BR    R14
         SPACE
*
*
*
         SPACE
MODESET2 STM   R14,R12,@SAVE18
         MODESET KEY=NZERO,MODE=PROB
         LM    R14,R12,@SAVE18
         BR    R14
         EJECT
*
*
*
         SPACE
PROCESS  STM   R14,R12,@SAVE12
         LA    R14,@COMMAND
         ST    R14,@PARRES
         MVC   @PARMAXL,EIGHT
         BAL   R14,PARSE
         SLR   R14,R14
         ST    R14,@PROCSW         SET PROCSW OFF
         LA    R14,1
         ST    R14,@PROCSUB        SET SUBSCRIPT TO 1
PROCLOOP L     R11,@PROCSW
         LTR   R11,R11             HAS PROCSW BEEN SET ON
         BNZ   PROCDONE            YES, JUMP OUT
         LR    R11,R14
         MH    R11,THREE+2
         LA    R7,OPCODES-3(R11)
         CLC   @COMMAND(3),0(R7)
         BNE   PROCINCR
         SLA   R14,2
         L     R15,OPENTRY-4(14)
         BALR  R14,R15             CALL THE ROUTINE FOR THIS OPERATION
         LA    R14,1
         ST    R14,@PROCSW         SET PROCSW ON
PROCINCR LA    R14,1
         AL    R14,@PROCSUB
         ST    R14,@PROCSUB
         C     R14,FOURTEEN
         BNH   PROCLOOP
PROCDONE L     R14,@PROCSW         WAS PROCSW EVER SET ON
         LTR   R14,R14             YES, BRANCH
         BNZ   PROCESSX
         LA    R14,MSG10           OPERATION REQUESTED IS INVALID
         ST    R14,@MSGADR
         BAL   R14,PUTMSG08        SYNTAX
PROCESSX LM    R14,R12,@SAVE12
         BR    R14
         EJECT
*
*
*
         SPACE
COMMENT  BR    R14
         SPACE
*
*
*
         SPACE
CON      STM   R14,R12,12(R13)
         OI    @SWA,CONSOLE
         L     R14,@SEPEND
         ST    R14,@WORD10
         L     R14,@STREND
         ST    R14,@WORD11
         ST    R14,@SEPEND
         LM    R14,R12,12(R13)
         BR    R14
         SPACE
*
*
*
         SPACE
END      STM   R14,R12,12(R13)
         NI    @SWA,255-CONSOLE
         L     R14,@WORD10
         ST    R14,@SEPEND
         L     R14,@WORD11
         ST    R14,@STREND
         LM    R14,R12,12(R13)
         BR    R14
         SPACE
*
*
*
         SPACE
DUM      STM   R14,R12,@SAVE05
         BAL   R14,NAM
         BAL   R14,DUMP
         LM    R14,R12,@SAVE05
         BR    R14
         SPACE
*
*
*
         SPACE
GLO      NI    @SWA,255-LOCMODE
         BR    R14
         SPACE
*
*
*
         SPACE
LOC      OI    @SWA,LOCMODE
         BR    R14
         SPACE
*
*
*
         SPACE
NAM      STM   R14,R12,@SAVE04
         NI    @SWA,255-NOGO
         SLR   R14,R14
         STCM  R14,7,@TEMP01+1
         ST    R14,@WORD03
         MVC   @PARMAXL,EIGHT
         LA    R14,@MEMBER         PUT ADDRESS OF MEMBER
         ST    R14,@PARRES          IN PARSE RESULT POINTER
         B     NAMGO1              DO UNTIL POINTER GT MEMBER+8
NAMLP1   BAL   R14,PARSE           CALL PARSE TO GET NEXT OPERAND
         LA    R14,8               ADD 8
         AL    R14,@PARRES          TO
         ST    R14,@PARRES           PARSE RESULT ADDRESS
NAMGO1   LA    R11,@CSECT          IF R14 GT MEMBER+8
         CR    R14,R11               THEN
         BNH   NAMLP1                 EXIT DO LOOP
         SPACE
         TM    @SWA,LOCMODE        LOCAL MODE
         BNO   NAMOK1              NO, BRANCH
         CLC   @MEMBER(6),IEANUC   YES, DOES NAME LOOK GLOBAL
         BE    NAMWARN             YES, ISSUE WARNING
         CLC   @MEMBER(5),IGC00    DOES NAME LOOK GLOBAL
         BNE   NAMOK1              NO, BRANCH
NAMWARN  MVI   @LINE58,C' '        ISSUE WARNING
         MVC   @LINE59(62),@LINE58
         MVC   @LINE01(57),WARNMSG
         BAL   R14,PUTLINE
NAMOK1   TM    @SWA,QUIT
         BNZ   A001468
         CLC   @CSECT,BLANKS
         BNE   A001456
         SLR   R14,R14             CSECT OMITTED
         ST    R14,@ADDROFF        OFFSET ZERO INTO MODULE
         B     A001468
A001456  MVC   @CSECN(8),@CSECT
         BAL   R14,ESDRTN
         L     R14,@ESDOFFS
         ST    R14,@ADDROFF        OFFSET INTO MODULE
A001468  TM    @SWA,QUIT
         BNZ   NAMEX
         TM    @SWA,LOCMODE
         BNO   A00148A
*        LOAD  EPLOC=@MEMBER,DCB=@LIBDCB
         LA    R0,@MEMBER
         LA    R1,@LIBDCB
         SVC   8                           LOAD
         BAL   R14,LOCATE
         B     A0014A2
A00148A  CLC   @MEMBER(6),IEANUC
         BNE   A00149E
         SLR   R14,R14
         ST    R14,@ADDRBAS        NUCLEUS LOCATION IS ZERO
         B     A0014A2
A00149E  BAL   R14,LOCATE
A0014A2  TM    @SWA,QUIT
         BNZ   NAMEX
         L     R14,@ADDRBAS
         AL    R14,@ADDROFF
         ST    R14,@ADDRESS        ADDRESS OF CSECT
         ST    R14,@WHEREAD
         BAL   R14,PUTWHERE
NAMEX    LM    R14,R12,@SAVE04
         BR    R14
         EJECT
*
*
*
         SPACE
RC       STM   R14,R12,@SAVE06
         MVI   @LINE17,C' '
         MVC   @LINE18(103),@LINE17
         MVC   @LINE01(16),EQRC    = RETURN CODE
         LA    R14,@RC
         AL    R14,THREE
         ST    R14,@HEXFR
         LA    R14,@LINE01
         ST    R14,@HEXTO
         MVC   @HEXLEN,ONE
         BAL   R14,HEXCV
         BAL   R14,PUTLINE
         LM    R14,R12,@SAVE06
         BR    R14
         EJECT
*
*         REP OR RES OR RESET
*
         SPACE
REP      STM   R14,R12,@SAVE03
         CLC   @COMMAND,RESET      IS IT RESET
         BNE   REPIN               NO, BRANCH IF REP OR RES
         NI    @SWA,255-NOGO       RESET, JUST SET NOGO OFF
         B     REPX
REPIN    TM    @SWA,NOGO           IS NOGO SWITCH ON
         BNO   REPGO               NO, BRANCH
         MVI   @LINE37,C' '
         MVC   @LINE38(83),@LINE37
         MVC   @LINE01(36),IGNORED
         BAL   R14,PUTLINE
         B     REPX
REPGO    BAL   R14,BAS
         BAL   R14,HEXPARSE
         TM    @SWA,QUIT
         BO    REPX
         BAL   R14,PAGESERV        FIX PAGE IF REP, FREE PAGE IF RES
         BAL   R14,MODIFY
REPX     LM    R14,R12,@SAVE03
         BR    R14
         EJECT
*
*
*
         SPACE
VER      STM   R14,R12,@SAVE02
         BAL   R14,BAS
         BAL   R14,HEXPARSE
         TM    @SWA,QUIT
         BNZ   VERX
         L     R14,@MODLEN
         BCTR  R14,R0
         L     R11,@MODADR
         EX    R14,VERCLC          VERIFY THE DATA
         BE    VERX                EXIT IF IT VERIFIES OK
         OI    @SWA,NOGO           SET NOGO SWITCH
         MVC   @RC,FOUR
         MVI   @LINE33,C' '
         MVC   @LINE34(87),@LINE33
         MVC   @LINE01(32),REJECT
         BAL   R14,PUTLINE         ISSUE REJECT MESSAGE
         BAL   R14,DUMP            DUMP THE MODULE
VERX     LM    R14,R12,@SAVE02
         BR    R14
         EJECT
*
*
*
         SPACE
ZAP      STM   R14,R12,@SAVE07
         BAL   R14,VER
         TM    @SWA,QUIT+NOGO
         BNZ   ZAPX
         BAL   R14,PAGESERV        FIX PAGE IF LPA
         L     R14,@MODLEN
         BCTR  R14,R0              LENGTH MINUS 1 FOR EX
         EX    R14,ZAPXC           MAKE REP DATA ALL ZEROS
         BAL   R14,MODIFY
ZAPX     LM    R14,R12,@SAVE07
         BR    R14
         EJECT
*
*
*
         SPACE
MODIFY   STM   R14,R12,@SAVE30
         MVI   @LINE14,C' '
         MVC   @LINE15(106),@LINE14
         MVC   @LINE01(13),OLDWAS
         L     R14,@MODLEN         LENGTH OF DATA TO BE MODIFIED
         ST    R14,@HEXLEN
         L     R14,@MODADR         ADDRESS OF DATA TO BE MODIFIED
         ST    R14,@HEXFR
         LA    R14,@LINE01
         AL    R14,THIRTEEN
         ST    R14,@HEXTO          PUT HEX DUMP AT LINE+1+13
         BAL   R14,HEXCV           CONVERT OLD DATA TO HEX
         BAL   R14,PUTLINE         DISPLAY OLD DATA
*ZAP START VER                                              *HMD 10/82*
         BAL   R14,MODESET1        SUPV STATE KEY ZERO
*ZAP START REP                                              *HMD 10/82*
         ORG   *-4                 ORG BACK TO VER AREA     *HMD 10/82*
         B     PATCH#1             BRANCH TO PATCH AREA     *HMD 10/82*
*ZAP PAUSE                                                  *HMD 10/82*
         L     R14,@MODADR         ADDRESS TO BE MODIFIED
         L     R11,@MODLEN         LENGTH OF REP DATA
         BCTR  R11,R0              LENGTH MINUS 1 FOR EX
         EX    R11,MODMVC          MODIFY STORAGE
         BAL   R14,MODESET2        PROB STATE KEY NZERO
*ZAP START VER                                              *HMD 10/82*
PRETURN  LM    R14,R12,@SAVE30     RETURN FROM PATCH AREA   *HMD 10/82*
*ZAP PAUSE                                                  *HMD 10/82*
         BR    R14
         EJECT
*
*         EXECUTED INSTRUCTIONS
*
         SPACE
H9       DC    H'0009'
LOGMVC   MVC   @LINE01,0(R14)
PUTMSGM  MVC   @LINE01,4(R14)
PARBLNK  MVC   0(1,R14),BLANKS
PARMVC   MVC   0(1,R11),0(R7)
A001638  MVC   0(1,R11),@REPDATA
PARMMVC  MVC   @PARMCPY(1),2(R11)
PUTM8MV  MVC   @LINE16,4(R14)
VERCLC   CLC   0(1,R11),@REPDATA
ZAPXC    XC    @REPDATA(1),@REPDATA
MODMVC   MVC   0(1,R14),@REPDATA
         EJECT
         SPACE
***********************************************************************
*                                                                     *
*         CONSTANTS                                                   *
*                                                                     *
***********************************************************************
         SPACE
ONE      DC    F'1'
TWO      DC    F'2'
THREE    DC    F'3'
FOUR     DC    F'4'
FIVE     DC    F'5'
EIGHT    DC    F'8'
TWELVE   DC    F'12'
THIRTEEN DC    F'13'
FOURTEEN DC    F'14'
SIXTEEN  DC    F'16'
FORTY    DC    F'40'
FORTY8   DC    F'48'
F400     DC    F'400'
MINUS129 DC    F'-129'
MINUS079 DC    F'-79'
MINUS032 DC    F'-32'
MINUS008 DC    F'-8'
MINUS003 DC    F'-3'
PGFIX    EQU   *
         DC    X'42000000'
PGFREE   EQU   *
         DC    X'20000000'
X000FFFF DC    F'65535'
*ZAP START VER                                              *HMD 10/82*
SIZE     DC    A(@DATAL)           LENGTH OF GETMAINED AREA
         ORG   SIZE                                         *HMD 10/82*
*ZAP START REP                                              *HMD 10/82*
         DC    A(X'2000')          LENGTH OF GETMAINED AREA *HMD 10/82*
*ZAP PAUSE                                                  *HMD 10/82*
         DC    F'0'
BLANKS   DC    C'        '
LINKZAP  DC    C'LINKZAP '
RESET    DC    C'RESET   '
IEANUC   DC    C'IEANUC'
IGC00    DC    C'IGC00'
LITBAS   DC    C'BAS'
SYM      DC    C'SYM'
FFFFFFFF DC    XL8'FFFFFFFFFFFFFFFF'
HEX0F0F  DC    X'0F0F'
HEXTR    DC    193X'00'            00-C0
         DC    X'0A0B0C0D0E0F'
         DC    41X'00'             C7-EF
         DC    X'00010203040506070809'
         DC    6X'00'              FA-FF
         DC    X'00'
BLINE    DC    H'127,0'
         DC    CL123' '
EBCDIC   DC    74C' '              00-49
         DC    X'4A4B4C4D4E4F50'
         DC    C'         '        51-59
         DC    X'5A5B5C5D5E5F6061'
         DC    C'        '         62-69
         DC    X'6A6B6C6D6E6F'
         DC    C'         '        70-78
         DC    X'797A7B7C7D7E7F'
         DC    C' '                80
         DC    C'ABCDEFGHI'        81-89
         DC    C' '                8A
         DC    X'8B8C8D8E8F'
         DC    C' '                90
         DC    C'JKLMNOPQR'        91-99
         DC    C' '                9A
         DC    X'9B9C9D9E9FA0A1'
         DC    C'STUVWXYZ'         A2-A9
         DC    X'BABBBCBDBEBF'     AA-AF (MAY BE AN ERROR)
         DC    X'B0B1B2B3B4B5B6B7B8B9'
         DC    C' '                BA
         DC    X'BBBCBDBEBFC0'
         DC    C'ABCDEFGHI'        C1-C9
         DC    C'      '           CA-CF
         DC    X'D0'
         DC    C'JKLMNOPQR'        D1-D9
         DC    C'      '           DA-DF
         DC    X'E0'
         DC    C' '                E1
         DC    C'STUVWXYZ'         E2-E9
         DC    C'      '           EA-EF
         DC    C'0123456789'       F0-F9
         DC    X'FA'
         DC    C'     '            FB-FF
WHEREMSG DC    C'         = STORAGE ADDRESS OF PRECEDING SYMBOL'  09160
IGNORED  EQU   *,36
         DC    C'OPERATION IGNORED - NO GO SWITCH SET'
REJECT   EQU   *,32
         DC    C'VERIFY REJECT - SET NO GO SWITCH'
OLDWAS   EQU   *,13
         DC    C'OLD DATA WAS '
EQRC     EQU   *,16
         DC    C'   = RETURN CODE'
SYNTAX   EQU   *,15
         DC    C'SYNTAX ERROR - '
WARNMSG  EQU   *,57
         DC    C'WARNING -- LOCAL MODE IS PROBABLY INVALID '
         DC    C'FOR THIS MODULE'
HEADING  EQU   *,121
         DC    CL121'1MAIN STORAGE ZAP SERVICE AID PROGRAM'
         DC    X'00'
MSG01    DC    F'00017'
         DC    C'FIELD IS TOO LONG'
         DC    X'00'
         DC    H'0'
MSG02    DC    F'00024'
         DC    C'OFFSET FIELD IS TOO LONG'
MSG03    DC    F'00029'
         DC    C'INVALID HEXADECIMAL CHARACTER'
         DC    X'00'
         DC    H'0'
MSG04    DC    F'00032'
         DC    C'MODULE NOT FOUND IN MAIN STORAGE'
MSG05    DC    F'00046'
         DC    C'CSECT MUST BE SUPPLIED FOR NUCLEUS LOAD MODULE'
         DC    H'0'
MSG06    DC    F'00028'
         DC    C'INPUT DD STATEMENT NOT FOUND'
MSG07    DC    F'00042'
         DC    C'DD STATEMENT FOR PROGRAM LIBRARY NOT FOUND'
         DC    H'0'
MSG08    DC    F'00035'
         DC    C'MEMBER NOT FOUND ON PROGRAM LIBRARY'
         DC    X'00'
MSG09    DC    F'00031'
         DC    C'SYMBOL NOT FOUND IN LOAD MODULE'
         DC    X'00'
MSG10    DC    F'00030'
         DC    C'OPERATION REQUESTED IS INVALID'
         DC    H'0'
MSG11    DC    F'00022'
         DC    C'REQUIRED FIELD MISSING'
         DC    H'0'
MSG12    DC    F'00035'
         DC    C'UNEVEN NUMBER OF HEXADECIMAL DIGITS'
         DC    X'00'
LIBDEF   EQU   *,24
         DC    A(LIBDCB)           POINTER TO DCB IMAGE
         DC    A(LIBOPEN)          POINTER TO OPEN MF=L
         DC    C'PROGLIB '         PRIMARY DDNAME
         DC    C'SYSLIB  '         SECONDARY DDNAME
PRTDEF   EQU   *,24
         DC    A(PRTDCB)           POINTER TO DCB IMAGE
         DC    A(PRTOPEN)          POINTER TO OPEN MF=L
         DC    C'PROGLIST'         PRIMARY DDNAME
         DC    C'SYSPRINT'         SECONDARY DDNAME
CTLDEF   EQU   *,24
         DC    A(CTLDCB)           POINTER TO DCB IMAGE
         DC    A(CTLOPEN)          POINTER TO OPEN MF=L
         DC    C'PROGIN  '         PRIMARY DDNAME
         DC    C'SYSIN   '         SECONDARY DDNAME
HEXTRT   DC    193X'01'            00-C0
         DC    6X'00'              C1-C6 (A-F)
         DC    41X'01'             C7-EF
         DC    10X'00'             F0-F9
         DC    6X'01'              FA-FF
OPCODES  DC    C'VER'                      01
         DC    C'REP'                      02
         DC    C'NAM'                      03
         DC    C'DUM'                      04
         DC    C'RES'                      05
         DC    C'   '                      06
         DC    C'*  '                      07
         DC    C'CON'                      08
         DC    C'END'                      09
         DC    C'RC '                      10
         DC    C'ZAP'                      11
         DC    C'GLO'                      12
         DC    C'LOC'                      13
         DC    C'BAS'                      14
         DC    H'0'
OPENTRY  DC    A(VER)
         DC    A(REP)
         DC    A(NAM)
         DC    A(DUM)
         DC    A(REP)
         DC    A(COMMENT)
         DC    A(COMMENT)
         DC    A(CON)
         DC    A(END)
         DC    A(RC)
         DC    A(ZAP)
         DC    A(GLO)
         DC    A(LOC)
         DC    A(BAS)
HEXTAB   DC    C'0123456789ABCDEF'
         SPACE
LIBDCB   DCB   DDNAME=0,DSORG=PO,MACRF=R
LIBDCBL  EQU   *-LIBDCB
         SPACE
PRTDCB   DCB   DDNAME=0,DSORG=PS,MACRF=PM,                             +
               RECFM=FA,LRECL=121,BLKSIZE=121
PRTDCBL  EQU   *-PRTDCB
         SPACE
CTLDCB   DCB   DDNAME=0,DSORG=PS,MACRF=GM,EODAD=CTLEOD,LRECL=80
CTLDCBL  EQU   *-CTLDCB
         SPACE
*ZAP START VER                                              *HMD 10/82*
LIBOPEN  DC    X'84000000' (INOUT)                          *HMD 09/82*
         ORG   LIBOPEN                                      *HMD 10/82*
*ZAP START REP                                              *HMD 10/82*
         DC    X'80000000' (INPUT ONLY)                     *HMD 10/82*
*ZAP PAUSE                                                  *HMD 10/82*
CTLOPEN  DC    X'80000000'
PRTOPEN  DC    X'8F000000'
CLOSE    EQU   *,12
         DC    F'0'
         DC    F'0'
         DC    X'80000000'
WTORM    EQU   *,44
         DC    F'0'
         DC    F'0'
         DC    AL2(36,0)
         DC    C'ENTER ZAP STATEMENTS, RC, OR END'
         EJECT
         PRINT ON,GEN,DATA     FOR ASMTOZAP PROGRAM         *HMD 10/82*
*ZAP START VER                                              *HMD 10/82*
EXPAND   DC    512X'00'                                     *HMD 10/82*
         ORG   EXPAND                                       *HMD 10/82*
*ZAP START REP
*                                                           *HMD 10/82*
* PATCH AREA FOR EXPAND ZAP OF INCORZAP MODULE              *HMD 10/82*
*                                                           *HMD 10/82*
PATCH#1  STM   R14,R12,@SAVE19     SAVE REGISTERS           *HMD 10/82*
         BALR  R7,0                GET BASE FOR SECTION     *HMD 10/82*
         USING *,R7                                         *HMD 10/82*
         BAL   R14,MODESET1        KEY ZERO SUP STATE       *HMD 10/82*
         BAL   R14,PROTOFF         TURN OFF PROTECTION      *HMD 10/82*
         L     R14,@MODADR         ADDRESS TO BE MODIFIED   *HMD 10/82*
         L     R11,@MODLEN         LENGTH OF REP DATA       *HMD 10/82*
         BCTR  R11,R0              LENGTH MINUS 1 FOR EX    *HMD 10/82*
         EX    R11,MODMVC          MODIFY STORAGE           *HMD 10/82*
         BAL   R14,PROTON          TURN ON PROTECTION       *HMD 10/82*
         BAL   R14,MODESET2        PROB STATE KEY NZERO
         LM    R14,R12,@SAVE19     RESTORE REGISTERS        *HMD 10/82*
         DROP  R7                                           *HMD 10/82*
         B     PRETURN             RETURN TO MAINLINE CODE  *HMD 10/82*
*                                                           *HMD 09/82*
* SEGEMNT PROTEECTION SERVICES                              *HMD 09/82*
*                                                           *HMD 09/82*
PROTOFF  DS    0H                                           *HMD 09/82*
         STM   R14,R12,@SAVE16                              *HMD 09/82*
         BALR  R7,0                GET BASE FOR CODE        *HMD 10/82*
         USING *,R7                USE SPECIAL BASE         *HMD 10/82*
         XC    @SAVE20,@SAVE20     CLEAR 1ST SA WORD        *HMD 10/82*
         L     R1,@MODADR          GET ZAP ADDRESS          *HMD 09/82*
         N     R1,CLRBITS          PURIFY IT                *HMD 09/82*
         SRL   R1,16               SHIFT OFF USELESS JUNK   *HMD 09/82*
         CLC   @COMMAND,RESET      IS THIS RESET COMMAND?   *HMD 09/82*
         BE    PROTOFFX            YES, GET OUT FAST        *HMD 09/82*
         L     R2,548              GET PSA OLD ASCB         *HMD 09/82*
         L     R2,52(,R2)          GET RSM HEADER ADDR      *HMD 09/82*
         L     R2,0(,R2)           GET SEGMENT TABLE ORIGIN *HMD 09/82*
         LA    R4,255              GET MAX SEGMENT NUMBER   *HMD 10/82*
         LA    R3,1                                         *HMD 10/82*
         CR    R1,R4               IS THIS THE MAX SEGNO    *HMD 10/82*
         BE    *+8                 BRANCH AROUND INSTR      *HMD 10/82*
         LA    R3,2                BCT NUMBER OF SEGMENTS   *HMD 10/82*
         SLL   R1,2                MULTIPLY BY SGTE LEN     *HMD 09/82*
         AR    R2,R1               POINT TO SEG ENTRY       *HMD 09/82*
SEGOFF   TM    3(R2),X'04'         IS SEGMENT PROTECTION ON?*HMD 09/82*
         BZ    SEGINCR             NO, DO NOT TURN OFF      *HMD 09/82*
         AL    R13,TWELVE          ADVANCE FOR SETLOCK      *HMD 09/82*
SEGLOCK  SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,REGS=SAVE,  *HMD 09/82*X
               RELATED=('PROTOFF,SEGRLSE')                  *HMD 09/82*
         NI    3(R2),X'FB'         TURN OF PROTECTION BIT   *HMD 09/82*
         PTLB                      PREVENT RECOLLECTION     *HMD 10/82*
SEGRLSE  SETLOCK RELEASE,TYPE=SALLOC,REGS=SAVE,             *HMD 09/82*X
               RELATED=('PROTOFF,SEGLOCK')                  *HMD 09/82*
         SL    R13,TWELVE          DECREMENT AFTER SETLOCK  *HMD 09/82*
         LA    R4,@SAVE20(R3)      POINT TO FLAG AREA       *HMD 10/82*
         MVI   0(R4),X'FF'         INDICATE WE TURNED OFF   *HMD 09/82*
SEGINCR  A     R2,FOUR             BUMP TO NEXT SEGMENT     *HMD 10/82*
         BCT   R3,SEGOFF           TURN OFF TWO SEGMENTS    *HMD 10/82*
PROTOFFX DS    0H                                           *HMD 09/82*
         LM    R14,R12,@SAVE16     RESTORE REGISTERS        *HMD 09/82*
         DROP  R7                  NO NEED FOR BASE         *HMD 10/82*
         BR    R14                                          *HMD 09/82*
         SPACE 2                                            *HMD 09/82*
PROTON   DS    0H                  RESET SEGMENT PROTECTION *HMD 09/82*
         STM   R14,R12,@SAVE16     SAVE REGISTERS           *HMD 09/82*
         BALR  R7,0                USE REG 7 FOR BASE       *HMD 10/82*
         USING *,R7                                         *HMD 10/82*
         L     R1,@MODADR          GET ZAP ADDRESS          *HMD 09/82*
         N     R1,CLRBITS          PURIFY IT                *HMD 09/82*
         SRL   R1,16               SHIFT OFF USELESS JUNK   *HMD 09/82*
         CLC   @COMMAND,RESET      IS THIS RESET COMMAND?   *HMD 09/82*
         BE    PROTONX             YES, GET OUT FAST        *HMD 09/82*
         L     R2,548              GET PSA OLD ASCB         *HMD 09/82*
         L     R2,52(,R2)          GET RSM HEADER ADDR      *HMD 09/82*
         L     R2,0(,R2)           GET SEGMENT TABLE ORIGIN *HMD 09/82*
         LA    R4,255              GET MAX SEGMENT NUMBER   *HMD 10/82*
         LA    R3,1                                         *HMD 10/82*
         CR    R1,R4               IS THIS THE MAX SEGNO    *HMD 10/82*
         BE    *+8                 BRANCH AROUND INSTR      *HMD 10/82*
         LA    R3,2                BCT NUMBER OF SEGMENTS   *HMD 10/82*
         SLL   R1,2                MULTIPLY BY SGTE LEN     *HMD 09/82*
         AR    R2,R1               POINT TO SEG ENTRY       *HMD 09/82*
         LA    R2,4(,R2)           POINT TO NEXT ENTRY      *HMD 10/82*
SEGON    LA    R4,@SAVE20(R3)      POINT TO FLAG BYTE       *HMD 10/82*
         CLI   0(R4),X'FF'         DID WE TURN OFF?         *HMD 09/82*
         BNE   PSEGINCR            NO, DO NOT TURN ON       *HMD 09/82*
         AL    R13,TWELVE          ADVANCE FOR SETLOCK      *HMD 09/82*
PSEGLOK  SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,REGS=SAVE,  *HMD 09/82*X
               RELATED=('PROTON,PSEGLOK')                   *HMD 09/82*
         OI    3(R2),X'04'         TURN ON PROTECTION BIT   *HMD 09/82*
         PTLB                      PREVENT RECOLLECTION     *HMD 10/82*
PSEGRLSE SETLOCK RELEASE,TYPE=SALLOC,REGS=SAVE,             *HMD 09/82*X
               RELATED=('PROTON,PSEGRLSE')                  *HMD 09/82*
         SL    R13,TWELVE          DECREMENT AFTER SETLOCK  *HMD 09/82*
         MVI   0(R4),X'00'         INDICATE WE TURNED ON    *HMD 09/82*
PSEGINCR S     R2,FOUR             BUMP TO NEXT SEGMENT     *HMD 10/82*
         BCT   R3,SEGON            TURN OFF TWO SEGMENTS    *HMD 10/82*
PROTONX  DS    0H                                           *HMD 09/82*
         LM    R14,R12,@SAVE16     RESTORE REGISTERS        *HMD 09/82*
         BR    R14                                          *HMD 09/82*
CLRBITS  DC    F'16711680'         CLEAR BITS               *HMD 10/82*
         DROP  R7                                           *HMD 10/82*
*ZAP STOP                                                   *HMD 10/82*
         PRINT ON,GEN                                       *HMD 10/82*
         DROP  R6
         DROP  R12
         DROP  R10
         DROP  R5
CARDS    EQU   X'80'
QUIT     EQU   X'40'
LOCMODE  EQU   X'20'
NOGO     EQU   X'10'
CONSOLE  EQU   X'08'
SWA04    EQU   X'04'
SWA02    EQU   X'02'
SWA01    EQU   X'01'
SWB80    EQU   X'80'
SWB40    EQU   X'40'
NOCONS   EQU   X'20'
SWB10    EQU   X'10'
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
*        IHAPSA
FLC      DSECT                     USED BY SETLOCK
PSALITA  EQU   FLC+764             USED BY SETLOCK
***********************************************************************
*                                                                     *
*         MAP OF GETMAINED WORK AREA                                  *
*                                                                     *
***********************************************************************
         SPACE
@DATA    DSECT
@SAVE01  DS    18F
@PARMPTR DS    F
@SAVE02  DS    15F
@SAVE03  DS    15F
@SAVE04  DS    15F
@SAVE05  DS    15F
@SAVE06  DS    15F
@SAVE07  DS    15F
@SAVE08  DS    15F
@SAVE09  DS    15F
@SAVE10  DS    15F
@SAVE11  DS    15F
@SAVE12  DS    15F
@SAVE13  DS    15F
@SAVE14  DS    15F
@SAVE15  DS    15F
@SAVE16  DS    15F
@SAVE17  DS    15F
@SAVE18  DS    15F
@SAVE19  DS    15F
@SAVE20  DS    15F
@SAVE21  DS    15F
@SAVE22  DS    15F
@SAVE23  DS    15F
@SAVE24  DS    15F
@SAVE25  DS    15F
@SAVE26  DS    15F
@SAVE27  DS    15F
@SAVE28  DS    15F
@SAVE29  DS    15F
@SAVE30  DS    15F
@ESDSUB  DS    0F
@DUMPSUB DS    F
@WORD02  DS    F
@WORD03  DS    F
@WORD04  DS    F
@WORD05  DS    F
@WORD06  DS    F
@WORD07  DS    F
@ADDRESS DS    F
@WORD09  DS    F
@WORD10  DS    F
@WORD11  DS    F
@ADDROFF DS    F
@RC      DS    F
@OPENDCB DS    F
@OPENDEF DS    F
@DUMPEND DS    F
@DUMPSTR DS    F
@HEXTO   DS    F
@SEPEND  DS    F
@PARWRK  DS    F
@PARRES  DS    F
@PARLEN  DS    F
@PARBEG  DS    F
@WORD24  DS    F
@HEXFR   DS    F
@HEXLEN  DS    F
@MODLEN  DS    F
@HPAWRK  DS    F
@HEXDEST DS    F
@HPASWT  DS    F
@KARDPTR DS    F
@ADDRBAS DS    F
@WHEREAD DS    F
@MSGADR  DS    F
@ESDSIZ  DS    F
@OPENRC  DS    F
@ESDOFFS DS    F
@PAGEECB DS    F
@STREND  DS    F
@SEPSWT  DS    F
@WORD41  DS    F
@PARMAXL DS    F
@PARSWT  DS    F
@WORD44  DS    F
@WORD45  DS    F
@WORD46  DS    F
@WORD47  DS    F
@WORD48  DS    F
@WORD49  DS    F
@WORD50  DS    F
@WORD51  DS    F
@WORD52  DS    F
@PROCSUB DS    F
@PROCSW  DS    F
@WTORECB DS    F
@WORD56  DS    F
@WORD57  DS    F
@MODADR  DS    F
@WORD59  DS    F
@FILL01  DS    CL12
@TEMP01  DS    F
@CTLCARD DS    CL80
         DS    0F
@LIBDCB  DS    CL100
         DS    0F
@PRTDCB  DS    CL100
         DS    0F
@CTLDCB  DS    CL100
@CLOSE   DS    3F
         DS    F
@MEMBER  DS    CL8
@CSECT   DS    CL8
         DS    CL8
@CSECN   DS    CL8
@COMMAND DS    CL8
@SWA     DS    C
@SWB     DS    C
@CH1     DS    C
         DS    C                   @BASE-1
@BASE    DS    F
@CHAR9   DS    CL9
@REPDATA DS    CL40
         DS    C                   @KARD-1
@KARD    DS    CL80
         SPACE
@LINE    DS    CL121               @DATA+2642
         ORG   @LINE
         DS    C
@LINE01  DS    C
@LINE02  DS    C
@LINE03  DS    CL11
@LINE14  DS    C
@LINE15  DS    C
@LINE16  DS    C
@LINE17  DS    C
@LINE18  DS    CL15
@LINE33  DS    C
@LINE34  DS    CL3
@LINE37  DS    C
@LINE38  DS    CL3
@LINE41  DS    CL6
@LINE47  DS    C
@LINE48  DS    CL10
@LINE58  DS    C
@LINE59  DS    CL28
@LINE87  DS    C
@LINE88  DS    CL26
         DS    CL6
@LIN120  DS    C
         SPACE
         DS    C
@BUFFER  DS    0H,CL248
@PARMCPY DS    CL200
@REPLY   DS    CL130
@FILL9C  DS    CL2
@WTOLINE DS    CL144
@WTORW   DS    CL44
@WAY08   DS    CL1
@WAY08Z  DS    CL3
@WAY08A  DS    CL5
@WAY08A1 DS    C
@WAY08A2 DS    C
@WAY08A3 DS    C
@WAY08B  DS    C
@WAY08C  DS    C
         DS    550C
         DS    1450C
@DECB    DS    5F
@DATAL   EQU   *-@DATA
         END
