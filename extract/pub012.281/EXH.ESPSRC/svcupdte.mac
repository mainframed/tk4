SVCUP    TITLE 'S V C U P D T E  ***  SVC UPDATE UTILITY'
***********************************************************************
*  OBTAINED FROM CBT TAPE 451 FILE 183                                *
***********************************************************************
*                                                                     *
* MODULE NAME = SVCUPDTE                                              *
*                                                                     *
* DESCRIPTIVE NAME = INSTALL A TYPE-3 SVC ROUTINE.                    *
*                                                                     *
* FUNCTION = This program defines an SVC routine to the system as a   *
*            type-3 SVC.  The module is loaded into the CSA unless    *
*            it is already in PLPA or MLPA.  The installation of      *
*            SVC routine can be permanent or temporary.               *
*            Access to the new SVC routine may be restricted to       *
*            jobs submitted by a particular user.                     *
*            An IGX00nnn module may be installed as a type-3 ESR.     *
*                                                                     *
* STATUS = R308                                                       *
*                                                                     *
* AUTHOR = Gilbert Saint-flour <gsf@pobox.com>                        *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = MVS/ESA 4.2.2 or above                            *
*                                                                     *
*    AUTHORIZATION = APF                                              *
*                                                                     *
*    RESTRICTIONS = Invoker must have update authority to             *
*                   SYS1.PARMLIB.                                     *
*                                                                     *
* MODULE TYPE = PROCEDURE, (BATCH PROGRAM)                            *
*                                                                     *
*    PROCESSOR = IBM OS/ASSEMBLER H VERSION 2 OR                      *
*                IBM HIGH LEVEL ASSEMBLER/MVS                         *
*                                                                     *
*    MODULE SIZE = 2K                                                 *
*                                                                     *
*    ATTRIBUTES = REENTERABLE, RMODE 24, AMODE 31,                    *
*                 PROBLEM STATE, KEY 8                                *
*                                                                     *
* OPERATION = See Below                                               *
*                                                                     *
*        This program defines an SVC routine to the system as a       *
*        type-3 SVC or ESR.  The module is loaded into the CSA        *
*        unless it is already in PLPA or MLPA.                        *
*                                                                     *
*        The installation can be permanent or temporary.  It is       *
*        permanent when the following two conditions are met:         *
*                                                                     *
*          1. the SVC routine is loaded from PLPA or MLPA             *
*                                                                     *
*          2. the good-night time is NOT specified in the parm        *
*                                                                     *
*        If either condition isn't true, the installation is          *
*        temporary and SVCUPDTE remains in memory until a STOP or     *
*        CANCEL command is issued, then re-installs the old SVC       *
*        and terminates.                                              *
*                                                                     *
*        If the good-night time is specified in the PARM, SVCUPDTE    *
*        shut itself off automatically at the specified time.         *
*                                                                     *
*        ENQ is used to prevent simultaneous installation of          *
*        the same SVC by different jobs.                              *
*                                                                     *
*        If the specified SVC routine is in the LPA and a module      *
*        with the same name is also in the JOBLIB or STEPLIB, then    *
*        SVCUPDTE temporarily installs the module in JOBLIB or        *
*        STEPLIB and stays active until it is STOP'd or CANCEL'd.     *
*        The installation can only be permanent if the specified SVC  *
*        routine is NOT in the JOBLIB or STEPLIB.  One way to work    *
*        around this is to use an MVS facility called FETCHLIB,       *
*        as shown in JCL example no 5 below.                          *
*                                                                     *
* INVOCATION = SVCUPDTE IS INVOKED VIA JCL, AS FOLLOWS:               *
*                                                                     *
*          PARM=(nnn,mmmmmmm,lock,hhmm,userid)                        *
*                                                                     *
*            nnn  is the SVC number you want to install;              *
*                 it must be specified as a 3-digit number.           *
*                                                                     *
*            mmmmmmmm is the name of a load module (or alias)         *
*                 that you want to install as SVC nnn; it MUST        *
*                 come from an authorized library (STEPLIB or         *
*                 link-list).  If the SVC number is 109, the          *
*                 load-module name must be IGX00nnn, where            *
*                 nnn is the number of the ESR entry.                 *
*                                                                     *
*            lock is the optional lock bit string which must be       *
*                 specified as follows:                               *
*                 .  8000 indicates the local lock                    *
*                 .  C000 indicates the CMS and local locks           *
*                                                                     *
*            hhmm is the optional "good-night" time, in 24-hour       *
*                 clock format.  When the specified time is           *
*                 reached, SVCUPDTE automatically un-installs         *
*                 the SVC and stops.                                  *
*                                                                     *
*            userid is the user-ID that will be compared to that      *
*                 of each invoker of the new SVC routine.             *
*                 If they're equal, the new SVC is invoked.           *
*                 If they're not equal, the old SVC is invoked.       *
*                                                                     *
* RETURN CODES = See Below                                            *
*                                                                     *
*        0  Successful completion: SVC has been installed             *
*                                                                     *
*        8  User not authorized to update SYS1.PARMLIB                *
*                                                                     *
*       12  ENQ failed: Another copy of SVCUPDTE is currently         *
*           installing the same SVC                                   *
*                                                                     *
*       24  Current SVC entry is not Type 2,3,4                       *
*                                                                     *
* ABENDS = See below                                                  *
*                                                                     *
*      U1001    Invalid PARM                                          *
*                                                                     *
*      S047     SVCUPDTE MODULE NOT AUTHORIZED                        *
*                                                                     *
*      S306-08  SVC routine not re-entrant                            *
*                                                                     *
*      S306-0C  SVC routine not from an authorized library            *
*                                                                     *
* EXAMPLES = See below                                                *
*                                                                     *
*      1. install IGC0022B as SVC 222                                 *
*                                                                     *
*         //SVC222  EXEC PGM=SVCUPDTE,PARM=(222,IGC0022B)             *
*                                                                     *
*      2. install IGX00066 as type-3 ESR 66                           *
*                                                                     *
*         //ESR66   EXEC PGM=SVCUPDTE,PARM=(109,IGX00066)             *
*                                                                     *
*      3. install TESTSVC2 as SVC 244 until 20:00                     *
*                                                                     *
*         //TEMPSVC EXEC PGM=SVCUPDTE,PARM=(244,TESTSVC2,,2000)       *
*                                                                     *
*      4. install SVC11Y2K as SVC 11 until 18:00 for user(IBMUSER)    *
*                                                                     *
*         //SVC11TMP EXEC PGM=SVCUPDTE,                               *
*         //              PARM=(011,SVC11Y2K,,1800,IBMUSER)           *
*                                                                     *
*      5. permanently install an SVC routine from the same private    *
*         library from which SVCUPDTE is executed.                    *
*                                                                     *
*        //LOADMLPA EXEC PGM=LOADMLPA,PARM=(LOAD,SVC11Y2K)            *
*        //STEPLIB  DD DISP=SHR,DSN=SYS1.P390.LINKLIB                 *
*        //*                                                          *
*        //FETCHLIB EXEC PGM=IEFBR14                                  *
*        //SVCUPDTE DD DISP=SHR,DSN=SYS1.P390.LINKLIB(SVCUPDTE)       *
*        //*                                                          *
*        //INSTALL  EXEC PGM=*.FETCHLIB.SVCUPDTE,PARM=(011,SVC11Y2K)  *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*$228 Leave SVC installed and exit if module was loaded from LPA      *
*$229 Issue ENQ on SYSZSVC/TABLE to prevent simultaneous updates      *
*$230 Restore address of OLD SVC after temporary installation         *
*$231 Fix "good-night" routine which hasn't been working for a while  *
*$232 Restrict access to new SVC to userid specified in parm          *
*$306 Install IGX00nnn module as a type-3 ESR.                        *
*$307 Parm option for LOCAL and CMS locks                             *
*$308 More doc, minor technical changes                               *
*GP02305  BYPASS AUTHORIZATION CHECK IF PROGRAM IS NOT RUNNING UNDER  *
*         JES2, OR IF IT IS A START TASK                        GP02305
***********************************************************************
         PRINT NOGEN         SAVE A TREE                        GP02305
SVCUPDTE CSECT
SVCUPDTE AMODE 31
         SAVE  (14,12),,'GSF UTILITIES - SVCUPDTE R308'
         LR    R12,R15
         USING SVCUPDTE,R12
         L     R4,0(,R1)               PARM ADDRESS
*
*        ALLOCATE DYNAMIC STORAGE
*
         GETMAIN R,LV=DYNAML           DYNAMIC STORAGE
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING DYNAM,R13
         LA    R14,DYNAM+72            CLEAR WORK AREA
         LA    R15,DYNAML-72           CLEAR WORK AREA
         SLR   R1,R1                   CLEAR WORK AREA
         MVCL  R14,R0                  CLEAR WORK AREA
*
*        CHECK JCL PARM
*
SCANPARM L     R15,=A(PARSE)           parse rtne addr
         BALR  R14,R15                 parse parm into function,opt
         DC    S(L'SVCNO,SVCNO)        first operand
         DC    S(L'EPNAME,EPNAME)      second operand
         DC    S(L'LOCKS,LOCKS)        third operand
         DC    S(L'ENDOFDAY,ENDOFDAY)  fourth operand
         DC    S(L'USERID,USERID)      fifth operand
         CLI   LOCKS,C' '              any lock?
         BE    LOCK6                   no, jump
         CLC   =C'C000 ',LOCKS         CMS+local?
         BE    LOCK4                   yes, jump
         CLC   =C'8000 ',LOCKS         Local lock?
         BNE   PARMERR                 no, abend
         MVI   LOCK#,X'80'             local lock
         B     LOCK6                   continue
LOCK4    MVI   LOCK#,X'C0'             CMS+local
LOCK6    EQU   *
         UNPK  DWD,=X'0F'              DWD=F0F0F0F0F0F0F0F0
         MVN   DWD(L'SVCNO),SVCNO      move nnn
         CLC   DWD(L'SVCNO),SVCNO      nnn numeric?
         BNE   PARMERR                 NO, ABEND
         CLI   ENDOFDAY,C' '           ENDOFDAY specified?
         BE    INIT34                  no, quit
         MVN   DWD(4),ENDOFDAY         move HHMM
         CLC   DWD(4),ENDOFDAY         hhmm numeric?
         BNE   PARMERR                 NO, ABEND
         MVC   ENDOFDAY,DWD            HHMM -> HHMM0000
*
*        Retrieve old SVC entry
*
INIT34   EQU   *
         PACK  DWD,SVCNO               SVC NUMBER (NNN)
         CVB   R5,DWD                  SVC NUMBER (NNN)
         STC   R5,SVC#                 SVC NUMBER (NNN)
*
         L     R3,CVTPTR               CVT
         USING CVTMAP,R3
         L     R4,CVTABEND             SECONDARY CVT
         USING SCVTSECT,R4
         SLL   R5,3                    mult by 8
         AL    R5,SCVTSVCT             add origin of SVC table
         USING SVCENTRY,R5
         ST    R5,SVCENTRY_PTR         save entry address
         TM    SVCTP,SVCTP2            TYPE 2/3/4 ?
         BNO   RC24                    NO, QUIT
*
*        ESR   PARM='109,IGX00nnn'
*
         CLI   SVC#,109                T3-ESR?
         BNE   INIT39                  no, jump
         UNPK  DWD,=X'0F'              DWD=F0F0F0F0F0F0F0F0
         MVN   DWD(5),EPNAME+3         move 00nnn from IGX00nnn
         CLC   DWD(5),EPNAME+3         00nnn numeric?
         BNE   PARMERR                 NO, ABEND
         PACK  DWD,EPNAME+3(5)         ESR NUMBER (NNN)
         CVB   R1,DWD                  ESR NUMBER (NNN)
         STC   R5,ESR#                 ESR NUMBER (NNN)
         SLL   R1,3                    mult by 8
         L     R5,SVCEP                point to ESR table
         LA    R5,SVCENTRY+8(R1)       point to ESR entry
         ST    R5,SVCENTRY_PTR         save entry address
*
INIT39   EQU   *
         MVC   OLDENTRY,SVCENTRY       save old SVC entry
         MODESET MODE=SUP              check that I'm APF-authorized
*---------------------------------------------------------------------*
*                                                                     *
*   CHECK WHETHER THIS PROGRAM IS RUNNING UNDER JES2, AND HOW         *
*     1) NOT JES2 AND NOT JES3 - BYPASS CHECKING                      *
*     2) JES2 AND STC - BYPASS CHECKING                               *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING                                            GP02305
         L     R2,PSATOLD-PSA     GET MY TCB                    GP02305
         USING TCB,R2                                           GP02305
         ICM   R15,15,TCBJSCB    GET JSCB                       GP02305
         BZ    NOTSTCBY      OR SKIP                            GP02305
         USING IEZJSCB,R15                                      GP02305
         ICM   R15,15,JSCBSSIB  GET SUBSYSTEM INFORMATION BLOCK GP02305
         BZ    NOTSTCBY      OR OUT                             GP02305
         USING SSIBEGIN,R15                                     GP02305
         CLC   =C'SSIB',SSIBID  REALLY SSIB ?                   GP02305
         BNE   NOTSTCBY      NO                                 GP02305
         CLI   SSIBSSID,SSIBJES3  JES3 SYSTEM ?                 GP02305
         BE    NOTSTCBY      WHAT DO I KNOW                     GP02305
         CLI   SSIBSSID,SSIBJES2  JES2 SYSTEM ?                 GP02305
         BNE   INSTALL       SUB=MSTR ?                         GP02305
         ICM   R14,15,SSIBSUSE  GET SJB ADDRESS                 GP02305
         BZ    NOTSTCBY                                         GP02305
         CLC   =C'STC',SSIBJBID  START TASK ?                   GP02305
         BE    INSTALL       YES; BYPASS CHECKING               GP02305
NOTSTCBY DS    0H                                               GP02305
         POP   USING                                            GP02305
***********************************************************************
*                                                                     *
*        CHECK THAT THE USER HAS "UPDATE" AUTHORITY TO SYS1.PARMLIB.  *
*                                                                     *
*        IF HE DOESN'T, EXIT WITH RC=8                                *
*                                                                     *
***********************************************************************
         L     R14,RACF_CML            CAMLST 1ST WORD
         LA    R15,RACF_DSN            DATA SET NAME
         SLR   R0,R0
         LA    R1,RACFWORK             WORK AREA
         STM   R14,R1,SIXWORDS         STORE RELOCATED CAMLST
         LOCATE SIXWORDS               GET VOLSER AND DEVICE TYPE
         LTR   R15,R15                 CHECK FOR SUCCESSFUL COMPLETION
         BNZ   RACF_BAD                LOCATE FAILED, EXIT
         MVC   RACF_VOL,RACFWORK+6     VOLSER
*
         MVC   RACF_DYN(RACF_LEN),RACF_MOD
         RACROUTE REQUEST=AUTH,                                        X
               WORKA=RACFWORK,                                         X
               VOLSER=RACF_VOL,        VOLUME                          X
               MF=(E,RACF_DYN)
         LTR   R15,R15                 USER AUTHORIZED?
         BZ    INSTALL                 YES, CONTINUE
*
*        Allow selected users to bypass RACF protection
*
         L     R2,PSAAOLD-PSA          POINT TO MY ASCB.
         L     R2,ASCBASXB-ASCB(,R2)   POINT TO MY ASXB.
         L     R2,ASXBSENV-ASXB(,R2)   POINT TO MY ACEE.
         USING ACEE,R2
         CLC   =CL8'IBMUSER',ACEEUSRI  AUTHORIZED USER?
         BE    INSTALL                 YES, CONTINUE
         DROP  R2                      ACEE
*
RACF_BAD L     R13,4(,R13)
         RETURN (14,12),RC=8           User is not authorized, RC=8
****     ABEND  1002,DUMP
*
RACF_MOD RACROUTE REQUEST=AUTH,        CHECK AUTHORIZATION             X
               LOG=NONE,               DO NOT LOG FAILURES             X
               CLASS='DATASET',        CHECK FOR DATASET AUTHORITY     X
               ENTITY=RACF_DSN,        DATA SET NAME                   X
               ATTR=UPDATE,            MUST BE ALLOWED TO UPDATE       X
               MF=L
RACF_DSN DC    CL44'SYS1.PARMLIB'
RACF_CML CAMLST NAME,*-*,,*-*          CAMLST FOR LOCATE
*
PARMERR  WTO    'SVCUPDTE: INVALID PARM <====',ROUTCDE=11
         ABEND  1001,DUMP
*
RC24     L     R13,4(,R13)
         RETURN (14,12),RC=24          entry is not Type 2,3,4
*
***********************************************************************
*                                                                     *
*        FUNCTION=INSTALL                                             *
*                                                                     *
***********************************************************************
*
INSTALL  MVC   SVCULIST(MODELS_L),MODELS   MF=L MACROS
         MVC   SVCULOCK,LOCK#          move lock indicators
*
         ENQ   (,SVCNO),MF=(E,ENQL)    serialize update
         LTR   R15,R15                 ENQ OK?
         BZ    INSTALL4                yes, jump
         L     R13,4(,R13)
         RETURN (14,12),RC=12          no, exit with RC=12
*
INSTALL4 LOAD  EPLOC=EPNAME,           name of SVC routine             X
               GLOBAL=YES,             load into SP 241                X
               SF=(E,LOAD4L)
         LR    R6,R0                   ENTRY POINT
*
         LA    R10,DWD                 address work area
         SYNCH UPDATE,STATE=SUPV,RESTORE=YES Update SVC table entry
*
         CLI   ENDOFDAY,C' '           good night time specified?
         BNE   CHKUSER                 yes, jump
         CLI   USERID,C' '             userid screening requested?
         BNE   CHKUSER                 yes, jump
*
*        Check if the module just loaded was in LPA.
*        If it was, exit immediately.
*
CHECKLPA L     R2,PSATOLD-PSA          MY TCB
         USING TCB,R2
         L     R2,TCBLLS               last LLE
         USING LLE,R2
         L     R2,LLECDPT              Corresponding CDE or LPDE
         USING CDENTRY,R2
         TM    CDATTR,CDNIP            An LPA module?
         BNO   CHKUSER                 No, jump
         CLC   EPNAME,CDNAME           Right module?
         BNE   CHKUSER                 No, jump
         CL    R6,CDENTPT              Right entry point address?
         BE    EXIT                    YES, EXIT
*
***********************************************************************
*                                                                     *
*        FUNCTION=CHKUSER                                             *
*                                                                     *
*        Allocate storage in SQA, move the user-ID screening code     *
*        into it and set its address into the SVC table.              *
*                                                                     *
***********************************************************************
*
CHKUSER  CLI   USERID,C' '             userid screening requested?
         BE    WAIT                    yes, jump
*
         GETMAIN RU,SP=245,LV=CHKU500L,LOC=ANY   SQA space
         ST    R1,SQA_ADDR             work-area in SQA
*
         MODESET EXTKEY=ZERO
         MVC   0(CHKU500L,R1),CHKU500  move screening code to SQA
         DROP  R12           PREVENT ADDRESSING CONFLICT        GP02305
         USING CHKU500,R1
         ST    R6,CHKU500N             addr of new SVC
         MVC   CHKU500O,OLDENTRY       addr of old SVC
         MVC   CHKU500U,USERID         user-ID
         MVC   CHKU500#,SVCNO          SVC number
         DROP  R1                      CHKU500 in SQA
         USING SVCUPDTE,R12  RESTORE BASE                       GP02305
         LR    R6,R1                   SVC screening code
         BSM   R6,0                    set AMODE bit
         MODESET EXTKEY=ZERO
*
         LA    R10,DWD                 address work area
         SYNCH UPDATE,STATE=SUPV,RESTORE=YES Restore old SVC entry
*
***********************************************************************
*                                                                     *
*        FUNCTION=WAIT                                                *
*                                                                     *
*        This routine sets-up a timer for automatic shut-down         *
*        (if user specified a "good-night" time).  It then waits      *
*        on the communication ECB which is posted by a STOP           *
*        command or when the timer interval expires.                  *
*                                                                     *
***********************************************************************
*
WAIT     MODESET EXTKEY=ZERO
*
         L     R2,PSAAOLD-PSA          MY ASCB
         OI    ASCBRCTF-ASCB(R2),ASCBTOFF   PREVENT S522
*
         MODESET KEY=NZERO
*
         EXTRACT COMMADDR,FIELDS=COMM,MF=(E,EXTRACTL)
         L     R2,COMMADDR             ECB/CIB POINTERS
*
         CLI   ENDOFDAY,C'0'           good night time specified?
         BL    SET_RCVY                no, do not set a timer
         STIMERM SET,                                                  X
               ID=TIMER_ID,            token                           X
               EXIT=GOODNITE,          exit rtne                       X
               LT=ENDOFDAY,            hhmmss                          X
               PARM=(R2),              ECB/CIB POINTERS                X
               MF=(E,STIMER_L)
*
SET_RCVY ESTAE CANCEL,CT,                                              X
               PARAM=SAVE2,            parameter                       X
               TERM=YES,               trap CANCEL commands            X
               MF=(E,ESTAEL)
*
         L     R1,0(,R2)               PICK UP ADDRESS OF COMM ECB
         WAIT  1,ECB=(R1),LONG=YES     WAIT FOR A STOP COMMAND
*
         ESTAE 0                       DO NOT TRAP CANCEL COMMANDS
*
***********************************************************************
*                                                                     *
*        FUNCTION=REMOVE                                              *
*                                                                     *
*        This routine re-instates the initial SVC entry saved in the  *
*        OLDENTRY area, frees-up storage and exits to the system.     *
*                                                                     *
***********************************************************************
*
         L     R6,OLDENTRY             Addr of old SVC entry
         LA    R10,DWD                 address work area
         SYNCH UPDATE,STATE=SUPV,RESTORE=YES Restore old SVC entry
         STH   R15,RETCODE             return code
*
         ICM   R1,B'1111',SQA_ADDR     work-area in SQA
         BZ    EXIT                    no, exit
         FREEMAIN RU,SP=245,A=(R1),LV=CHKU500L SQA space
*
EXIT     LH    R15,RETCODE             return code
         L     R13,4(,R13)
         RETURN (14,12),RC=(15)
         DROP
*
*---------------------------------------------------------------------*
*                                                                     *
*        USER-ID SCREENING ROUTINE                                    *
*                                                                     *
*        This code is moved to SQA and executes from there each       *
*        time a program issues an SVC instruction for the new SVC.    *
*        If the user-id of the invoker is equal to the user-id        *
*        specified in the parm, then the new SVC is invoked,          *
*        otherwise the old code is called.                            *
*                                                                     *
*---------------------------------------------------------------------*
*
         USING TCB,R4
         USING CHKU500,R6
         USING ASCB,R7
CHKU500  B     CHKU510                 branch around eye-catcher
         DC    C'SVCUPDTE UTILITY - USER-ID SCREENING',0H'0'
CHKU510  L     R2,PSAAOLD-PSA          POINT TO MY ASCB.
         L     R2,ASCBASXB-ASCB(,R2)   POINT TO MY ASXB.
         ICM   R2,B'1111',ASXBSENV-ASXB(R2) POINT TO MY ACEE.
         BZ    CHKU530                 no ACEE, use old code
         USING ACEE,R2
         CLC   ACEEUSRI,CHKU500U       AUTHORIZED USER?
         BE    CHKU540                 yes, use new code
CHKU530  L     R6,CHKU500O             OLD SVC
         BSM   0,R6
CHKU540  L     R6,CHKU500N             NEW SVC
         BSM   0,R6
CHKU500O DS    V                       OLD ENTRY
CHKU500N DS    V                       NEW ENTRY
CHKU500U DS    CL8                     USER-ID
CHKU500# DS    C'222'                  SVC number
CHKU500L EQU   *-CHKU500
         DROP
*
*---------------------------------------------------------------------*
*                                                                     *
*        END-OF-DAY ROUTINE                                           *
*                                                                     *
*        This routine executes at the end of the timer interval       *
*        when the user specified a "good-night" time in the parm.     *
*        It posts the communication ECB to simulate a STOP command    *
*        and allow the main-line to shutdown.                         *
*                                                                     *
*---------------------------------------------------------------------*
*
GOODNITE BALR  R10,0                   LOCAL BASE
         USING *,R10
         L     R2,4(,R1)               COMM ECB ADDR
*@SNAP ((R1),8),((R2),4)
         MODESET KEY=ZERO              Switch to key=zero
         POST  (R2),0                  SIMULATE STOP COMMAND
         SVC   3                       EXIT
         DROP
*
*---------------------------------------------------------------------*
*                                                                     *
*        ESTAE EXIT USED TO TRAP CANCEL COMMANDS                      *
*                                                                     *
*---------------------------------------------------------------------*
*
CANCEL   SAVE  (14,12),,*
         BALR  R10,0
         USING *,R10
         LR    R8,R1                   SDWA
         USING SDWA,R8
         LR    R0,R13
         L     R13,SDWAPARM            A(SAVE2)
         ST    R0,4(,R13)
         USING SAVE2,R13
*
         L     R6,OLDENTRY             Addr of old SVC entry
         LA    R10,DWD                 address work area
         SYNCH UPDATE,STATE=SUPV,RESTORE=YES Update SVC table entry
*
         ICM   R1,B'1111',SQA_ADDR     work-area in SQA
         BZ    CANCEL99                no, exit
         FREEMAIN RU,SP=245,A=(R1),LV=CHKU500L SQA space
*
CANCEL99 L     R13,4(,R13)
         SETRP WKAREA=(R8),REGS=(14,12),RC=00
         DROP
*
*---------------------------------------------------------------------*
*                                                                     *
*        Update SVC Table Entry                                       *
*                                                                     *
*---------------------------------------------------------------------*
*
UPDATE   BALR  R11,0
         USING *,R11
         USING DWD,R10
*
         ENQ   MF=(E,ENQ_TABLE)        SYSZSVC/TABLE/SYSTEM
         MODESET EXTKEY=ZERO
         L     R5,SVCENTRY_PTR         point at SVC table entry
         USING SVCENTRY,R5
*
         CLI   SVC#,109                ESR?
         BE    UPDATE6                 yes, jump
*
         SLR   R2,R2
         IC    R2,SVC#                 pick up SVC number
         SVCUPDTE (R2),EP=(R6),MF=(E,SVCULIST)
         LR    R3,R15                  return code
         B     UPDATE7
*
UPDATE6  EQU   *                       ESR
         PGSER R,UNPROTECT,A=SVCENTRY,EA=SVCENTRY+1
         ST    R6,SVCEP                ESRTABLE
         SLR   R3,R3                   rc=0
         PGSER R,PROTECT,A=SVCENTRY,EA=SVCENTRY+1
*
UPDATE7  EQU   *
         DEQ   MF=(E,ENQ_TABLE)        SYSZSVC/TABLE/SYSTEM
         LR    R15,R3                  pass return code
         SVC   3                       goback to synch
***********************************************************************
*                                                                     *
*        Model storage, moved to dynamic                              *
*                                                                     *
***********************************************************************
MODELS   SVCUPDTE 0,REPLACE,TYPE=4,EP=0,MF=L
         ENQ   (QNAME1,*-*,E,L'SVCNO,SYSTEM),RET=USE,MF=L
         ENQ   (SYSZSVCQ,SYSZSVCR,E,,SYSTEM),MF=L
MODELS_L EQU   *-MODELS
*
QNAME1   DC    C'SVCUPDTE'             QNAME for ENQ
SYSZSVCQ DC    C'SYSZSVC '             QNAME for ENQ
SYSZSVCR DC    C'TABLE'                RNAME for ENQ
***********************************************************************
*                                                                     *
*        PARSE A COMMA-DELIMITED JCL PARM                             *
*                                                                     *
*        L     R15,=A(PARSE)                                          *
*        BALR  R14,R15                                                *
*        DC    S(L'PARM1,PARM1)        LENGTH,ADDR                    *
*        DC    S(L'PARM2,PARM2)        LENGTH,ADDR                    *
*                                                                     *
***********************************************************************
PARSE    CSECT
         SAVE  (14,12),,PARSE
         BALR  R11,0
         USING *,R11
         LH    R5,0(,R4)               LENGTH OF PARM
         LA    R4,1(,R4)               START OF PARM - 1
         ALR   R5,R4                   LAST BYTE OF PARM
*LOOP
PARS1    SLR   R0,R0                   R0 = 00000000
         ICM   R0,B'0011',2(R14)       R0 = 0000BDDD
         SRDL  R0,12(0)                R0 = 0000000B, R1= BBB.....
         SRL   R1,20(0)                R1 = 00000DDD DISPLACEMENT
         ALR   R1,R13                  ADD CALLER'S SAVE AREA ADDR
         LR    R6,R1                   ADDR OF TARGET FIELD
         LH    R7,0(,R14)              LENGTH OF TARGET FIELD
*
         LA    R2,1(,R4)               FIRST BYTE OF CURRENT PARAMETER
*--LOOP
PARS2    LA    R4,1(,R4)               BUMP POINTER
         CLR   R4,R5                   END OF PARM REACHED?
         BH    PARS41                  YES, EXIT LOOP
         CLI   0(R4),C','              DELIMITER?
         BNE   PARS2                   NO, KEEP LOOPIN'
*--ENDLOOP
PARS41   LR    R3,R4                   POSITION OF ','
         SR    R3,R2                   LENGTH OF SOURCE PARAM
         ICM   R3,B'1000',PARSEPAD     PADDING
         MVCL  R6,R2                   MOVE SOURCE TO TARGET
PARS44   LA    R14,2+2(,R14)           NEXT TARGET
         CLI   0(R14),0                IS THIS A FIELD DESCRIPTOR?
         BE    PARS1                   YES, PROCESS IT
*ENDLOOP
         RETURN (0,12),T
PARSEPAD DC    C' '                    padding
***********************************************************************
*                                                                     *
*        DYNAMIC STORAGE                                              *
*                                                                     *
***********************************************************************
DYNAM    DSECT
         DS    18F                    save area
SAVE2    DS    18F                    save area for ESTAE routine
DWD      DS    D
SVCENTRY_PTR DS A(SVCENTRY)           SVC or ESR entry
TIMER_ID DS    F
SIXWORDS DS    6F                     WORK AREA
*
LOAD4L   LOAD  SF=L
EXTRACTL EXTRACT *-*,FIELDS=COMM,MF=L
COMMADDR DS    A
ESTAEL   ESTAE MF=L
STIMER_L STIMERM SET,MF=L
RETCODE  DS    H                      return-code
SQA_ADDR DS    A(CHKU500)             work-area in SQA
OLDENTRY DS    D                      old SVC entry
SVCNO    DS    Z'222'                 SVC number
EPNAME   DS    C'IGC0022B'            name of SVC routine
LOCKS    DS    C'8000 '               lock indtcators: 8000 or C000
ENDOFDAY DC    Z'19000000'            CUTOFF TIME: HHMMSSHH
USERID   DS    CL8                    user-ID
SVC#     DS    X                      SVC number
ESR#     DS    X                      ESR number
LOCK#    DS    X'80'                  locks in binary: 80 or C0
*
RACF_DYN RACROUTE REQUEST=AUTH,MF=L
RACF_LEN EQU   *-RACF_DYN
RACFWORK DS    64D                    RACROUTE WORK AREA (512 BYTES)
RACF_VOL DS    C'SYSRES'              VOLSER
*
*        Parameter lists initialized from "models"
*
SVCULIST SVCUPDTE 0,REPLACE,TYPE=4,EP=0,MF=L
SVCULOCK EQU   SVCULIST+10,1,C'X'
ENQL     ENQ   (QNAME1,*-*,E,L'SVCNO,SYSTEMS),RET=USE,MF=L
ENQ_TABLE ENQ  (SYSZSVCQ,SYSZSVCR,E,,SYSTEM),MF=L
DYNAML   EQU   *-DYNAM
***********************************************************************
         PRINT NOGEN
         IHAPSA DSECT=YES
         CVT   DSECT=YES,LIST=NO
         IHASCVT DSECT=YES,LIST=NO     SECONDARY CVT
         IHASVC                        SVC TABLE ENTRY
         IHAASCB DSECT=YES,LIST=NO
         IHAASXB
         IHAACEE
         IKJTCB DSECT=YES,LIST=NO
         IHALLE
         IHACDE
         IHASDWA DSECT=YES,VRAMAP=NO
         IEZJSCB ,                                              GP02305
         IEFJSSIB ,                                             GP02305
         YREGS
         END   SVCUPDTE
