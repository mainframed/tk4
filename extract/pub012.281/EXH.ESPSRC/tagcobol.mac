TAGCOBOL CSECT
         USING *,15
         STM   14,12,12(13)
         LM    11,12,=A(TAGCOBOL,TAGCOBOL+4096)
         DROP  15
         USING TAGCOBOL,11,12
         LR    9,13
         LA    13,SAVE
         ST    9,4(13)
         ST    13,8(9)
         SPACE 2
*        PARM ROUTINE
         SPACE 2
         LTR   1,1           IS THERE A PARM ?
         BZ    COPY          NO, USE DEFAULT OPTIONS
         L     1,0(1)        GET PARM ADDRESS
         LH    14,0(1)       GET PARM LENGTH
         LTR   14,14         NULL PARM ?
         BZ    PARMERR
         CH    14,=H'33'     PARM TO LONG ?
         BH    PARMERR
         BCTR  14,0          L'PARM -1 FOR EXECUTE
         EX    14,GETPARM    MOVE THE PARM
         LA    4,PARMIN-1    AREA - 1 FOR LOOP
         LA    6,1(4,14)     FIND END OF PARM ADDR.
PARMLOOP LA    4,1(4)        BUMP INPUT ADDR.
         CR    6,4           END OF PARM ?
         BL    COPY          YES, ALL DONE
         CLC   0(4,4),=C'SEQ='
         BE    SEQR
         CLC   0(7,4),=C'TAGNBR='
         BE    TAGNO
         CLC   0(7,4),=C'PROGID='
         BNE   PARMLOOP
         LA    5,7(4)        PROGID START ADDR.
         LA    4,6(4)        BUMP PAST KEYWORD - 1 FOR LOOP
PROGLOOP LA    4,1(4)
         CR    6,4           END OF PARM ?
         BE    MOVEPRO1
         CLI   0(4),C','
         BE    MOVEPROG
         B     PROGLOOP
         SPACE 2
MOVEPRO1 LA    4,1(4)        CORRECT ADDRESS BY ONE
MOVEPROG SR    4,5
         BZ    PARMERR
         CH    4,=H'8'       MORE THAN 8 CHARS. INVALID
         BH    PARMERR
         BCTR  4,0
         EX    4,PROGMOVE
         LA    4,0(4,5)      RESET REG. 4 FOR LOOP (-1)
         B     PARMLOOP
         SPACE 2
SEQR     LA    5,4(4)        SEQ # START ADDR.
         LA    4,3(4)        BUMP PAST KEYWORD -1 FOR LOOP
SEQRLOOP LA    4,1(4)
         CR    6,4
         BE    MOVESEQ1
         CLI   0(4),C','
         BE    MOVESEQ
         B     SEQRLOOP
         SPACE 2
MOVESEQ1 LA    4,1(4)        CORRECT ADDRESS BY ONE
MOVESEQ  SR    4,5
         CH    4,=H'3'
         BNE   PARMERR
         MVC   CHECK(3),MASK   CHECK FOR NUMERICS
         NC    CHECK(3),0(5)
         CLC   CHECK(3),MASK
         BNE   PARMERR
         PACK  SEQINCR(2),0(3,5)
         LA    4,0(4,5)      RESET REG. 4 FOR LOOP (-1)
         B     PARMLOOP
         SPACE 2
TAGNO    LA    5,7(4)        BUMP PAST KEYWORD
         LA    4,6(4)
TAGLOOP  LA    4,1(4)
         CR    6,4
         BE    MOVTAG1
         CLI   0(4),C','
         BE    MOVTAG2
       B       TAGLOOP
         SPACE 2
MOVTAG1  LA    4,1(4)        CORRECT ADDRESS BY ONE
MOVTAG2  SR    4,5
         CH    4,=H'2'
         BNE   PARMERR
         MVC   CHECK(2),MASK CHECK FOR NUMERICS
         NC    CHECK(2),0(5)
         CLC   CHECK(2),MASK
         BNE   PARMERR
         PACK  TAGINCR(2),0(2,5)
         LA    4,0(4,5)      RESET REG. 4 FOR LOOP
         B     PARMLOOP
         SPACE 2
PARMERR  WTO   'PARM FIELD INCORRECT - EOJ',ROUTCDE=11
         B     EOJ
         SPACE 2
*        COPY SYSIN FILE TO A TEMPORARY DATA SET
         SPACE 2
COPY     OPEN  (SYSIN,INPUT)
         TM    SYSIN+48,X'10'    OPENED OK ?
         BO    OK            YES
         WTO   'UNSUCCESSFUL OPEN FOR SYSIN',ROUTCDE=11
         B     EOJ
OK       OPEN  (SYSUT1,OUTPUT)
         TM    SYSUT1+48,X'10'    OPENED OK ?
         BO    OK2           YES
OPNERR   WTO   'UNSUCCESSFUL OPEN FOR SYSUT1',ROUTCDE=11
         B     EOJ
OK2      GET   SYSIN         COPY SYSIN FILE
         LR    0,1           TO STORAGE FILE
         PUT   SYSUT1,(0)
         B     OK2           GET IT ALL
         SPACE 2
CARDEND  CLOSE SYSIN
         CLOSE SYSUT1
         SPACE 2
*        NOW USE THE SAME DCB AND DD CARD FOR INPUT
         SPACE 2
         MVI   DCBEXIT2,X'00'   TURN OFF DCB EXIT, USE JFCB EXIT
         LA    9,SYSUT1      DCB ADDRESS
         USING IHADCB,9      FOR ADDRESSABILITY
         NI    DCBMACR+1,X'00'    TURN OFF OUTPUT FLAGS (PM)
         OI    DCBMACR,X'50'     TURN ON INPUT FLAGS (GM)
         MVC   DCBEODAD(4),=A(ENDUT1)    PUT IN EODAD ADDRESS
         DROP  9
       RDJFCB  MF=(E,LISTJFCB)    READ THE JFCB
         MVI   JFCBIND2,JFCOLD   CHANGE DISP. FROM NEW TO OLD
         OPEN  MF=(E,LISTJFCB),TYPE=J
         TM    SYSUT1+48,X'10'   OPENED OK ?
         BO    OK3           YES
         B     OPNERR        NO, MUST HAVE MADE A BOOBOO
         SPACE 2
*        NOTE: THE OTHER TWO FILES WILL BE OPENED AT THIS TIME,
*        BUT WILL NOT BE USED TILL LATER, THIS WILL ALLOW THE
*        CONDITIONAL GETMAIN TO GET ALL OF THE REMAINING CORE AND
*        STILL HAVE ROOM FOR THE ACCESS METHOD MODULES AND BUFFERS
*        FOR ALL OF THE FILES
         SPACE 2
OK3      OPEN  (SYSPRINT,OUTPUT)
         TM    SYSPRINT+48,X'10'    OPENED OK ?
         BO    OK4           YES
         WTO   'UNSUCCESSFUL OPEN FOR SYSPRINT',ROUTCDE=11
         B     EOJ
OK4   DEVTYPE  DDNAME,DEVDATA   CHECK OUT OPTIONAL SYSPUNCH DD CARD
         LTR   15,15         IS THERE A DD CARD ?
         BNZ   NODD          NO, SKIP IT
         OC    DEVDATA(4),DEVDATA  YES, DD DUMMY ?
         BZ    NODD          YES, SKIP IT
         OPEN  (SYSPUNCH,OUTPUT)   NO, USE IT
         TM    SYSPUNCH+48,X'10'  OPENED OK ?
         BO    OK5
         WTO   'UNSUCCESSFUL OPEN FOR SYSPUNCH',ROUTCDE=11
         B     EOJ
NODD     MVI   PCHSWTCH+1,X'F0'   DON'T PUT PUNCHED OUTPUT
         B     *+8
OK5      MVI   PCHSWTCH+1,X'00'  TURN ON PUNCH SWITCH
         SPACE 2
*        GET AT LEAST 6K FOR TAG TABLE & 6K FOR CORE DUMP
         SPACE 2
      GETMAIN  VC,LA=CORLIST,A=CORADD
         LTR   15,15
         BZ    GOTCORE
NOCORE   WTO   'INSUFFICIENT CORE FOR PROCEDURE TAGS, USE LARGER REGIONX
               ',ROUTCDE=11
         B     EOJ
         SPACE 2
GOTCORE  FREEMAIN V,A=CORADD
         L     3,CORADD+4    MAX LENGTH RETURNED
         L     2,CORLIST     12K
         SRL   2,1           DIVIDE BY 2
         SR    3,2           MAX RETURNED - 6K FOR CORE DUMP
         STM   2,3,CORLIST
      GETMAIN  VC,LA=CORLIST,A=CORADD
         LTR   15,15
         BNZ   NOCORE
         L     10,CORADD
         ST    10,TABORG     START OF REGION
         LR    9,10
         A     9,CORADD+4    FIND THE END
         ST    9,TABEND      OF THE REGION
         MVI   FIRSTFLG,0     IN CASE OF EOF BEFORE GETTING A TAG
         SPACE 2
*        BUILD TABLE OF TAG ENTRIES WITH PREFIXES
         SPACE 2
LOOP1    BAL   8,READ
         CLC   INBUF+7(10),=C'PROCEDURE '
         BNE   LOOP1         SKIP DOWN TO PROCEDURE DIVISION
LOOP2    BAL   8,READ
         CLC   INBUF+7(3),=C'   '
         BE    LOOP2
         LA    4,INBUF+6
LOOPA    LA    4,1(4)
         CLI   0(4),C' '
         BE    LOOPA
         LR    2,4
         BCTR  2,0
         CLC   0(13,4),=C'DECLARATIVES.'
         BE    LOOP2
         SR    3,3           ZERO CHAR. COUNT
LOOP3    LA    2,1(2)        BUMP INPUT ADDRESS
         LA    3,1(3)        BUMP CHAR. COUNT
         CLI   0(2),C'.'     PERIOD ?
         BE    EX1           YES, ALL DONE
         CLI   0(2),C' '     BLANK ?
         BE    LOOP2         NAMES WITH BLANKS DON'T COUNT
         B     LOOP3         OK, KEEP COUNTING
         SPACE 1
EX1      BCTR  3,0           LENGTH-1 FOR EXECUTE
         BCTR  3,0           DON'T STORE PERIOD
         STH   3,TAGLEN      STORE TAG LENGTH
         EX    3,MOVETAG     MOVE THE TAG
         AP    INCRP,TAGINCR   ADD INCREMENT TO PREFIX VALUE
         CP    INCRP,=P'998'
         BE    BOOBOO
         UNPK  PREFIX(3),INCRP(2)   UNPACK PREFIX
         OI    PREFIX+2,X'F0'  'OR THE SIGN
         LA    3,6(3)        GET TOTAL LENGTH OF TABLE ENTRY
         LR    8,10          LOAD STARTING ADDRESS IN TABLE
         AR    8,3           ADD IN LENGTH OF THIS TABLE ENTRY
         CR    9,8           WILL IT EXCEED TABLE SIZE ?
         BNH   NOCORE        YES, TO BAD
         EX    3,MOVETAB     NO, MOVE ENTRY TO TABLE
         LA    10,1(3,10)    BUMP TABLE ADD. FOR NEXT TIME
         MVI   FIRSTFLG,255
         B     LOOP2
         SPACE 2
*        NOW SCAN EACH CARD COMPARING AGAINST TABLE ENTRIES
         SPACE 2
ENDUT1   CLI   FIRSTFLG,0
         BNE   HERE
         WTO   'EOF BEFORE FINDING PROCEDURE STATEMENT',ROUTCDE=11
HERE     MVI   0(10),255     FLAG END OF TABLE
         CLOSE SYSUT1
         LA    10,SYSUT1
         USING IHADCB,10
         MVC   DCBEODAD(4),=A(EOJ1)    CHANGE EODAD ADDR.
         DROP  10
         OPEN  (SYSUT1,INPUT)
         SPACE 2
LOOP4    BAL   8,READ
         CLC   INBUF+7(10),=C'PROCEDURE '  HIT PROCEDURE DIVISION YET ?
         BE    LOOP5         YES, START SCANNING
         BAL   8,PUT1        NO, COPY INPUT TO OUTPUT
         B     LOOP4         GET ANOTHER CARD
LOOP5    BAL   8,PUT1
LOOP6    BAL   8,READ        GET A CARD
         CLI   INBUF+6,C'*'  COMMENTS CARD ?
         BE    LOOP5         YES, PUT IT OUT
         MVI   WORK,C' '     CLEAR
         MVC   WORK+1(159),WORK   WORK AREA
         LA    9,WORK        CURRENT START ADDR. OF WORK AREA
         LA    2,INBUF+6     LAST STOP ADDR. OF INBUF
         LA    3,INBUF+6     CURRENT START ADDR. OF INBUF
         LA    4,INBUF+71    END OF INPUT BUFFER ADR.
LOOP7    LA    3,1(3)        BUMP INPUT ADDRESS
         CR    4,3           END OF INPUT ?
         BL    ENDINPT       YES, ALL DONE
         LR    6,3           SWAP ADDRESS OVER
         BAL   8,CHECKR      THIS CHAR. BLANK, PERIOD, COMMA ?
         B     LOOP7         YES, SKIP IT
         BCTR  6,0
         BAL   8,CHECKR      PREVIOUS CHAR. BLANK, PERIOD, COMMA ?
         B     CONT          YES, GO SCAN TABLE
         B     LOOP7         NO, SKIP IT
CONT     L     10,TABORG     LOAD TABLE START ADDRESS
SCANLOOP CLI   0(10),255     END OF TABLE ?
         BE    LOOP7         YES, NO MATCH IN TABLE
         MVC   HALF(2),0(10)  NO GUARENTEE OF HALF WORD ALLIGNMENT
         LH    5,HALF        GET TABLE ENTRY LENGTH
         EX    5,MATCH       COMPARE, EQUAL ?
         BNE   SCAN          NO, CHECK NEXT TABLE ENTRY
         LA    6,2(5,6)      YES, NEXT CHAR. BLANK, PERIOD, COMMA ?
         BAL   8,CHECKR
         B     FOUND         YES, GOOD MATCH FOUND
         SR    6,5           - L'TAG
         SH    6,=H'2'       BUMP ADDRESS BACK FOR LOOP
SCAN     LA    10,7(5,10)    BUMP TO NEXT TABLE ENTRY
         B     SCANLOOP      KEEP SCANNING
         SPACE 2
CHECKR   CLI   0(6),C' '
         BE    0(8)
         CLI   0(6),C','
         BE    0(8)
         CLI   0(6),C'.'
         BE    0(8)
         B     4(8)
         SPACE 2
*        MATCH FOUND, EXPAND INPUT IN WORKAREA WITH NEW TAGS
         SPACE 2
FOUND    LR    6,3           SAVE INPUT REL. END ADDR. IN REG. 6
         SR    6,2           - REL. START ADDR.
         BCTR  6,0           - 1 FOR EXECUTE
         EX    6,MOV1        MOVE DATA FROM INPUT TO WORKAREA
         LA    9,1(6,9)      BUMP WORKAREA ADDR.
         LA    3,1(5,3)      BUMP PAST OLD TAG ON INPUT
         LR    2,3           SET START ADDR. PAST OLD TAG
         LA    5,4(5)        ADD IN LENGTH OF PREFIX TO OLD TAG LEN.
         EX    5,MOV2        MOVE NEW TAG TO WORKAREA
         LA    9,1(5,9)      BUMP PAST NEW TAG IN WORKAREA
         B     LOOP7         CONTINUE SCAN
         SPACE 2
ENDINPT  SR    3,2           END ADDR. - REL. START ADDR.
         BCTR  3,0           - 1 FOR EXECUTE
         EX    3,MOV1        MOVE REMAINING INPUT TO WORKAREA
         LA    9,1(3,9)      MARK END OF WORKAREA
         LA    3,WORK+65     COL. 66 = COL. 72 EXPANDED INPUT
         LA    2,WORK        START WORKAREA = COL. 6 EXPANDED INPT
LOOP8    CLI   0(3),C' '     BLANK ?
         BE    MOVETEXT      YES, MOVE FIRST SECTION
         BCTR  3,0           - 1 FROM ADDR.
         B     LOOP8         CHECK AGAIN
         SPACE 2
*        SPLIT WORKAREA INTO 1 OR 2 CARDS AS NECESSARY, PUT THEM OUT
         SPACE 2
MOVETEXT MVI   OUTAREA,C' '      CLEAR
         MVC   OUTAREA+1(79),OUTAREA OUTPUT AREA
         SR    3,2           FIND # OF BYTES TO MOVE
         EX    3,MOV3        MOVE FIRST PORTION OF TEXT
         BAL   8,PUT         PUT IT OUT
         LA    2,1(3,2)      START ADDR. FOR SECOND PART OF TEXT
         LR    3,9           END OF TEXT ADDR.
         CR    3,2
         BE    LOOP6
LOOP9    CLI   0(3),C' '     BLANK ?
         BNE   MOVTEXT2      NO, MOVE REMAINING TEXT
         BCTR  3,0           BACK UP ONE POSITION
         CR    3,2           START & END ADDR. = ?
         BNH   LOOP6         YES, NO USABLE TEXT REMAINING
         B     LOOP9         NO, CHECK AGAIN
         SPACE 2
MOVTEXT2 MVI   OUTAREA,C' '  CLEAR
         MVC   OUTAREA+1(79),OUTAREA OUTPUT AREA
         SR    3,2           FIND LENGTH OF REMAINING TEXT
         EX    3,MOV4        MOVE IT
         BAL   8,PUT         PUT IT
         B     LOOP6         START ON NEXT INPUT CARD
         SPACE 2
*        PUT ROUTINE
         SPACE 2
PUT1     MVC   OUTAREA,INBUF
PUT      AP    SEQ,SEQINCR   BUMP SEQUENCE NUMBER
         TM    SEQ,X'F0'
         BZ    SEQOK
BOOBOO   WTO   'TAG OR SEQUENCE NUMBER HAS EXCEEDED MAXIMUM VALUE - EOJX
               ',ROUTCDE=11
         B     EOJ1
SEQOK    UNPK  SEQNO(6),SEQ(4)
         OI    SEQNO+5,X'F0'   'OR' THE SIGN
         MVC   PROGID,PROGSAVE   PUT IN PROGRAM ID
PCHSWTCH NOP   NOPCH
         PUT   SYSPUNCH,OUTAREA
NOPCH    CP    LINLIMIT,=P'56'
         BNH   NOEJECT
         AP    PAGECNT,=P'1'
         MVC   PAGE+4(6),PAGEPAT
         ED    PAGE+4(6),PAGECNT
         PUT   SYSPRINT,HEAD1
         MVI   CTLCHAR,C'-'
         ZAP   LINLIMIT,=P'4'
NOEJECT  PUT   SYSPRINT,CTLCHAR
         MVI   CTLCHAR,C' '
         AP    LINLIMIT,=P'1'
         BR    8
         SPACE 2
*        GET ROUTINE
         SPACE 2
READ     GET   SYSUT1,INBUF
         BR    8
         SPACE 2
*        REMOTE MOVE & COMPARE INSTRUCTIONS
         SPACE 2
MATCH    CLC   0(0,3),6(10)  REMOTE COMPARE FOR TAG NAMES
MOV1     MVC   0(0,9),0(2)   MOVE DATA BEFORE TAG TO WORKAREA
MOV2     MVC   0(0,9),2(10)   MOVE NEW TAG TO WORKAREA
MOV3     MVC   TEXT(0),0(2)
MOV4     MVC   TEXT+5(0),0(2)
MOVETAG  MVC   TAG(0),0(4)
MOVETAB  MVC   0(0,10),TAGENTRY
PROGMOVE MVC   PROGSAVE(0),0(5)
GETPARM  MVC   PARMIN(0),2(1)
         SPACE 2
*        END OF JOB ROUTINE
         SPACE 2
EOJ1  FREEMAIN V,A=CORADD
EOJ      CLOSE SYSUT1
         CLOSE SYSPRINT
         CLOSE SYSPUNCH
         L     13,SAVE+4
         LM    14,12,12(13)
         SR    15,15
         BR    14
         SPACE 2
*        COMMON DCB EXIT
         SPACE 2
         USING *,15
         USING IHADCB,1
DCBEXIT  STM   14,12,12(13)
         LH    0,DCBBLKSI    GET BLOCKSIZE
         LTR   0,0           WAS ONE SUPPLIED ?
         BNZ   *+28          YES, USE IT
         LH    0,DCBLRECL    NO, GET LRECL
         CLI   DCBDEVT,X'40'   UNIT RECORD DEVICE ?
         BE    *+8           YES DON'T BLOCK IT
         MH    0,=H'10'      NO, BLOCK BY TEN TO ONE
         STH   0,DCBBLKSI    STORE BLOCKSIZE
         LM    14,12,12(13)
         BR    14            ALL GOOD THINGS MUST COME TO AN END
         SPACE 3
*        CONSTANTS AND STUFF
         SPACE 3
         LTORG
SAVE     DS    18F
DEVDATA  DS    2F
TABORG   DS    F
TABEND   DS    F
CORLIST  DC    A(6000,524288)
CORADD   DS    2F
HALF     DS    H
         SPACE 1
TAGENTRY DS    0CL36         5 CARD FIXED SEQUENCE
TAGLEN   DS    CL2
PREFIX   DS    CL3
         DC    C'-'
TAG      DS    CL34
         SPACE 1
CTLCHAR  DC    CL1' '        8 CARD FIXED SEQUENCE
         DC    CL26' '
OUTAREA  DS    0CL80
SEQNO    DS    CL6
TEXT     DS    CL65
         DC    CL1' '
PROGID   DS    CL8
         DC    CL15' '
         SPACE 1
HEAD1    DC    C'1'          6 CARD FIXED SEQUENCE
HEAD     DC    CL120' '
         ORG   HEAD+45
         DC    C'PROGRAM TO PRESCRIPT PROCEDURE DIVISION TAGS'
         ORG   HEAD+110
PAGE     DC    C'PAGE',X'402020202120'
         SPACE 1
DDNAME   DC    C'SYSPUNCH'
PROGSAVE DC    CL8' '
PAGECNT  DC    PL3'0'
LINLIMIT DC    PL2'57'       INITIALYZE FOR PAGE EJECT
SEQ      DC    PL4'0'
SEQINCR  DC    PL2'10'
INCRP    DC    PL2'0'
TAGINCR  DC    PL2'2'
PAGEPAT  DC    X'402020202120'
MASK     DC    C'000'
CHECK    DS    CL3
INCR     DS    CL3
FIRSTFLG DS    CL1
PARMIN   DS    CL33
INBUF    DS    CL80
WORK     DS    CL160
         SPACE 1
LISTJFCB RDJFCB (SYSUT1,INPUT),MF=L
DCBEXIT1 DC    0A(0),X'85',AL3(DCBEXIT)
DCBEXIT2 DC    0A(0),X'85',AL3(DCBEXIT)
         DC    0A(0),X'87',AL3(INFMJFCB)   MUST FOLLOW DCBEXIT2
         PRINT NOGEN
         SPACE 2
SYSIN    DCB   DSORG=PS,DDNAME=SYSIN,MACRF=(GL),EODAD=CARDEND,         X
               RECFM=FB,LRECL=80,EXLST=DCBEXIT1
         SPACE 2
SYSUT1   DCB   DSORG=PS,DDNAME=SYSUT1,MACRF=(PM),RECFM=FB,             X
               LRECL=80,EXLST=DCBEXIT2
         SPACE 2
SYSPRINT DCB   DSORG=PS,DDNAME=SYSPRINT,MACRF=(PM),RECFM=FBA,          X
               LRECL=121,EXLST=DCBEXIT1
         SPACE 2
SYSPUNCH DCB   DSORG=PS,DDNAME=SYSPUNCH,MACRF=(PM),RECFM=FB,           X
               LRECL=80,EXLST=DCBEXIT1
         SPACE 2
         IEFJFCBN
         SPACE 2
         DCBD  DSORG=PS
         END
