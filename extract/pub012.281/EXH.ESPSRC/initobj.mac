INOBJ    TITLE 'INITOBJ - Initialize Data Areas in Object Files'
*
*    Function
*    --------
*    INITOBJ reads an object file output from the assembler
*    and creates additional TXT records to initialize all
*    undefined areas of the Csects to the specified Fill
*    Character.
*
*    Whilst uninitialized DS variables are a programming
*    practice best not used unfortunately it is a fact of
*    life for some old legacy programs. The result is that
*    the unitialized DS ends up with random contents of the
*    linkage editor buffers. Versions of the Linkage Editor,
*    later than distributed in MVS 3.8, initialized the
*    buffers to x'00' so the uninitialized variables would be
*    set to x'00'. The Binder took this concept further and
*    introduced the Fill character so that the buffers may be
*    initialized to this character. By changing the Fill
*    Character and rebinding the object then it is possible
*    to test for any dependence on uninitialized variables.
*    None of these options are available in the MVS 3.8
*    environment so INITOBJ has been writen to provided the
*    same Fill Character function as the Binder. No changes
*    are made to the Linkage Editor as this program functions
*    as a pre-processor to the Linkage Editor.
*
*    Operation
*    ---------
*    INITOBJ runs as batch program following an assembly and
*    processes the object records produced by the Assembler.
*    Additional TXT records are inserted to initialize any
*    areas of the Csects left uninitialized. These areas are
*    initialized to the default value of x'00' unless this
*    value has been overridden by specifying an optional Parm
*    of 'FILL=XX' where XX becomes the Fill Character
*    replacing x'00'.
*
*    The generated TXT records are marked with the default
*    or specified Fill Character in bytes 73-74.
*
*    A WTO is generated for each Csect that has had
*    additional TXT records generated. The number of TXT
*    records and the total number of bytes inserted are
*    listed in the WTO.
*
*    In addition, if a Fill Character was provided, via a JCL
*    Parm, then a Linkage Editor IDENTIFY record is inserted
*    into the output dataset identifying each Csect that has
*    been modified and the Fill Char used.
*
*    All Csects are rounded up to a double word boundary.
*    The additional bytes are set to the default or specified
*    Fill Character. This assists in identifying storage
*    overlay problems as the majority of Csects do not end on
*    a double word boundary and therefore have random data
*    at the end of the Csect after Linkage Editor processing.
*
*    Note that only named Csects are processed. Private Code (PC)
*    is not processed.
*
*    Invoking INITOBJ
*    ----------------
*    // EXEC PGM=INITOBJ,PARM='FILL=xx'       <--- Optional Parm
*           where xx is the hex value to be used as the Fill
*           Character
*    //SYSUT1 DD DSN=input object dataset from Assembler
*    //SYSUT2 DD DSN=output object dataset to Linkage Editor
*    //REPORT DD SYSOUT=*      optional DD for detailed report on
*                              un-initialized areas
*
*    For SYSUT2 any BLKSIZE, a multiple of 80 is acceptable,
*    but be aware of the unmodified Linkage Editor
*    restriction of 3200 bytes.
*
*    Updating the ASMFCL and ASMFCLG cataloged procedures by
*    inserting the INITOBJ JCl as an additional step between
*    the Assembly and the Linkage Editor step is generally
*    the most convenient way of running INITOBJ to process
*    the object output from the Assembly.
*
*    Assembler Environment
*    ---------------------
*    This module requires the HLASM or the Tachyon Legacy
*    Assembler for successful assembly.
*
*    Modified to assemble under IFOX00 - Gerhard Postpischil    GP14277
*    Changed to use local macros and services.                  GP14277
*    DD names SYSUT1, SYSUT2, and REPORT now have alternate names
*    of SYSIN, SYSPUNCH, and SYSPRINT, respectively.            GP14277
*
*
*
*    Installation
*    ------------
*    Assemble the module and link edit it into a load library.
*
*    Attributes
*    ----------
*    This module is reusable and reentrant. ALSO REFRESHABLE!
*
         COPY  ASMOPTS                                          GP14277
         SPACE 1
         ASMPARM LIST=YES                                       GP14277
         SPACE 1
         PUNCH '   ORDER INITOBJ(P) '  MAKE DUMPS EASIER        GP14277
         SPACE 1
*    Maximum number of ESD Entries
*    -----------------------------
         GBLC  &MAXESD                                          GP14277
&MAXESD  SETC '1024'                   Maximum number of ESD Entries
*
INITOBJ  PGMHEAD ZERO31,PARM=R9,BNDRY=PAGE                      GP14277
         SERVINIT ,          INITIALIZE SERVICE ROUTINES        GP14277
         SERVLOAD @INPREAD,@PRINTER                             GP14277
         SPACE 1
         USING ESDENT,R9               For processing ESD Entries
         USING CSD,R8                  Control for each SD
         INPOPEN SYSUT1,OPT=ABEND      Open the input file      GP14277
         PRTOPEN ERRUNIT,OPT=NOWTO,DEV=3    error/warning msgs  GP14277
         PRTOPEN SYSUT2,OPT=ABEND,DEV=2     and the output file GP14277
         PRTOPEN REPORT,OPT=NOWTO,DEV=1     optional report     GP14277
         CH    R15,=H'8'              Open?                     GP14277
         BNL   *+4+4                    No                      GP14277
         OI    PROFLAGS,FGREP         Show report being written GP14277
         PRTF  HEAD1,TITLE=1          Write Heading             GP14277
         PRTF  HEAD2,TITLE=2          Write Secondary Heading line
         MVI   FILLXX,X'00'            Init FILLCHAR with default 00
         MVC   FILLCH,=C'00'
         MVCH  GENREC        Blank Generated .TXT Record        GP14277
         MVC   GENREC(L'TXT),TXT       Move in .TXT header
*
*    Validate Parm
*
         L     R9,0(,R9)               Point to Parm
         LA    R1,2(,R9)               -> parm data
         LH    R2,0(,R9)               Get length of parm
         LTR   R2,R2                   Was a parm provided ?
         BNZ   PPROCA                  Yes, go process it
*
*    No Parm provided, issue WTO and run with default
*
         PRTB  MSG1,CC=NO,DEV=3 -> Error Msg                    GP14277
         B     PROCESS                                          GP14277
         SPACE 1
*
*    Process Parm
*
PPROCA   CH    R2,=AL2(L'FILL+2)       Parm correct length ?
         BNE   PPROCB                  No, Error msg
         CLC   FILL,0(R1)              'FILL='
         BNE   PPROCB                  No, Error Msg
*
*    Convert EBCDIC to Hex to set Fill Char
*
         MVC   FILLCH,L'FILL(R1)       Save for use in later IDENTIFY
         MVC   CHAR16(2),L'FILL(R1)    Move into a workarea
         TR    CHAR16(2),TRTAB         Translate to hex nibbles
         MVO   FILLXX,CHAR16(1)        Move hi-order 4 bits into Fill
         MVN   FILLXX(1),CHAR16+1      Move low-order 4 bits into Fill
         OI    PROFLAGS,FGFILL         Set Fill Char Provided   GP14277
         B     PROCESS                                          GP14277
         SPACE 1
*    Invalid Parm
*
PPROCB   PRTB  MSG2,CC=NO,DEV=3 -> Error Msg                    GP14277
         SPACE 1
*    Process the Object Dataset
*
PROCESS  INPGET RECIN                  Read Object record       GP14277
         BXH   R15,R15,UT1EOD                                   GP14277
*   Test likeliest first
         CLI   RECIN,X'02'        Object card?                  GP14277
         BNE   PROCESSW             No                          GP14277
         CLC   TXT,RECIN+1             TXT Record ?             GP14277
         BE    PROCTXT                 Yes, Process TXT
         CLC   ESD,RECIN+1             ESD Record ?             GP14277
         BE    PROCESD                 Yes, process ESD
         CLC   RLD,RECIN+1             RLD Record ?             GP14277
         BE    PROCRLD                 Yes, Process RLD
         CLC   END,RECIN+1             END Record ?             GP14277
         BE    PROCEND                 Yes, Process END
         SPACE 1
*    Record type not recognized, write it to SYSUT2
*
PROCESSW PRTF  RECIN,DEV=2,CC=NO       Write Record to SYSUT2   GP14277
         B     PROCESS                 Process next input record
         SPACE 1
*    Process ESD Records
*
PROCESD  SR    R2,R2
         ICM   R2,B'0011',ESDVFC       Get Bytes used in ESD Record
         SRL   R2,4                    Div by 16 to get no. of entries
         LA    R9,ESDVDATA             -> First ESD Entry
         CLC   ESDESDID,=C'  '         All Items are LD Entries ?
         BE    PROCESSW                Yes, Nothing to process.
         SR    R3,R3
         ICM   R3,B'0011',ESDESDID     Get ESDID of first entry
PROCESDA CLI   ESDTYPE,ESDT#LD         Type LD ?
         BNE   PROCESDL                No, Not of interest
         CLI   ESDTYPE,ESDT#SD         Type SD ?
         BNE   PROCESDB                No, Not of interest
*                                      Yes, Process SD entry
         LH    R1,=AL2(&MAXESD)   Maximum number of ESD entries GP14277
         CR    R3,R1                   Exceeded ?
         BL    PROCESDC                No, continue processing
*
*    Maximum number of ESD Entries exceeded
*
         PRTB  MSG6,CC=NO,DEV=3 R1 -> Error Msg                 GP14277
         LA    R9,16                   Set Return Code of 16
         B     PGMEXIT                 Terminate Program        GP14277
         SPACE 1
PROCESDC LR    R8,R3                   Get ESD ID
         SLL   R8,5                    Multiply the ESD Id by 32
         LA    R8,ESDTAB-CSDL(R8)      Allow for first entry is 1 not 0
         STMAX R8,ESDHWM               Remember the highest adr GP14277
         STCM  R3,B'0011',CESDID       Store the ESD ID
         MVC   CNAME,ESDXSYMN          Name of SD
         SR    R1,R1
         ICM   R1,B'0111',ESDLEN       Get len of ESD
         A     R1,=F'7'                Round up to double word to
         N     R1,=X'00FFFFF8'         prevent trash at end of Csect
         ST    R1,CLEN
         STCM  R1,B'0111',ESDLEN       Update rounded len in ESD record
         ICM   R1,B'0111',ESDADDR      Get Rel Starting Addr
         ST    R1,CPTR                 Set Ptr to Relative Addr of SD
         ST    R1,CSLOC                Save Starting Addr of SD to use
*                                      to calc filling out Csect
PROCESDB LA    R3,1(,R3)               Increment ESD ID for possible
*                                      next entry
PROCESDL LA    R9,ESDENTL(,R9)         -> to possible next ESD Entry
         BCT   R2,PROCESDA             Test and loop if needed
         B     PROCESSW
         SPACE 1
*    Process RLD Records
*    Generate any required TXT Records before the RLD records
*
PROCRLD  BAL   R14,CLEANUP             Invoke CLEANUP Routine
         B     PROCESSW
         SPACE 1
*    Process TXT Records
*
PROCTXT  SR    R3,R3
         ICM   R3,B'0011',INTESDID     Get the ESD ID for this Record
         LR    R8,R3                   Get ESD ID
         SLL   R8,5                    Multiply the ESD ID by 32
         LA    R8,ESDTAB-CSDL(R8)      Allow for first entry is 1 not 0
         STMAX R8,ESDHWM               Remember the highest adr GP14277
         CLC   CESDID,INTESDID         Does the ESD ID entry in
*                                      the table match the TXT ESD ID ?
         BNE   PROCESSW                No, No entry in the table so
*                                      must be TXT for other than SD
         CLC   INTRADDR,CPTR+1         Compare TXT Rel Addr with Ptr
*
         BE    PROCTXTE                This TXT flows on from previous
         BL    PROCTXTL                An ORG backwards
         BH    PROCTXTH                Need to generate additional TXT
*
*    TXT Rel Addr matches Ptr
*    Update Ptr and continue processing
*
PROCTXTE L     R1,CPTR
         AH    R1,INTLEN               Add Len of TXT to calc new Ptr
         ST    R1,CPTR
         B     PROCESSW
         SPACE 1
*    TXT Rel addr is less than Ptr, An ORG backwards. Test
*    if TXTLEN advances Ptr, if it does then update otherwise
*    continue processing
*
PROCTXTL SR    R1,R1
         ICM   R1,B'0111',INTRADDR     Get Rel Addr of TXT
         AH    R1,INTLEN               Add Len of TXT to calc new Ptr
         C     R1,CPTR                 New Ptr higher than current ?
         BNH   PROCESSW                No, return to continue process
         ST    R1,CPTR                 Yes, advance Ptr
         B     PROCESSW                Continue process
         SPACE 1
*    Txt Rel Addr greater than Ptr, Additional TXT record(s)
*    must be generated to fill storage with Fillchar value
*
PROCTXTH SR    R2,R2
         ICM   R2,B'0111',INTRADDR     Calc length of additional TXT
         S     R2,CPTR                 by subtracting PTR from TXTRADDR
         BAL   R14,GENTXTR             Call GENTXTR with length of TXT
*                                      to gen in R2 and start addr in
*                                      CPTR
         SR    R2,R2
         ICM   R2,B'0111',INTRADDR     Get Rel Addr of TXT
         AH    R2,INTLEN               Add Len of TXT to calc new Ptr
         ST    R2,CPTR                 Advance Ptr
         B     PROCESSW                Continue process
         SPACE 1
*    Process END Records
*    Generate any required TXT Records before the END record
*
PROCEND  BAL   R14,CLEANUP             Invoke CLEANUP Routine
         PRTF  RECIN,DEV=2,CC=NO       Write END Record to SYSUT2
         SPACE 1
*    Loop through the ESDTAB and generate IDENTIFY records
*    for any CSECT for which additional TXT records were
*    generated. Bypass generation of the IDENTIFY control statement
*    unless the user specified a FILL= character.               GP14277
*
         LA    R8,ESDTAB               -> Control Table for SD
         L     R7,=AL4((&MAXESD*CSDL)-1) Calc end of ESDTAB for
         AR    R7,R8                   BXLE loop comparand
         L     R7,ESDHWM               Use highest used         GP14277
         LA    R6,CSDL                 Increment value for BXLE
         MVI   IDENTREC,C' '           Blank out record
         MVC   IDENTREC+1(L'IDENTREC-1),IDENTREC
         MVC   IDENTID,=C'IDENTIFY'
         SPACE 1
PROCENDA CLC   CESDID,=X'0000'         Any ESD ID present ?
         BE    PROCENDD                No ESD ID, Branch to loop end
         CLC   CTCNT,=X'0000'          Any additional TXT records ?
         BE    PROCENDD                No, not for this Csect
         TM    PROFLAGS,FGFILL    User fill?                    GP14277
         BZ    PROCENDF             No; skip IDENTIFY           GP14277
         MVC   IDENTSD,CNAME           Move SD Name into IDENTIFY rec
         MVI   IDENTTXT,C' '           Blank out old text
         MVC   IDENTTXT+1(L'IDENTTXT-1),IDENTTXT
         LA    R1,IDENTTXT-1           -> last byte of name
PROCENDB CLI   0(R1),C' '              Found a non blank ?
         BNE   PROCENDC                Yes, branch
         BCT   R1,PROCENDB             No, decrement and loop back
PROCENDC MVC   1(L'IDRDATA,R1),IDRDATA Move IDRDATA to next avail Char
         MVC   L'IDRDATA-3(L'FILLCH,R1),FILLCH   Plugin FILLER_C
         PRTF  IDENTREC,CC=NO,DEV=2    Write IDENTIFY Record    GP14277
         SPACE 1
*    Generate WTO for Csect
*
PROCENDF TM    PROFLAGS,FGREP     Doing a detailed REPORT ?     GP14277
         BNZ   PROCENDD             Yes, do not issue WTO       GP14277
         TM    PROFLAGS,FGWTO4         Has Msg 4 Been Issued ?  GP14277
         BNZ   PROCENDG                Yes, Branch
         PRTB  MSG4,CC=NO,DEV=3 -> Msg 4 Heading WTO            GP14277
         OI    PROFLAGS,FGWTO4                                  GP14277
PROCENDG IC    R1,MSG5                 Length of Msg5
         EX    R1,MVCMSG5              Move Msg5 Len + Text into MSG5WA
         MVC   MSG5TEXT+MSG5CS-MSG5(L'MSG5CS),CNAME Move Csect Name
         LH    R1,CTCNT                Get Inserted Text Record Count
         CVD   R1,WORKD
         ED    MSG5TEXT+MSG5IREC-MSG5(L'MSG5IREC),WORKD+5  Format
*                                      count of Inserted TXT Records
         L     R1,CBYTEC               Get Inserted Byte Count
         CVD   R1,WORKD
         ED    MSG5TEXT+MSG5IBC-MSG5(L'MSG5IBC),WORKD+4  Format
*                                      count of Inserted Bytes
         PRTB  MSG5WAL,CC=NO,DEV=3 R1 -> Info Msg               GP14277
PROCENDD BXLE  R8,R6,PROCENDA          -> Next Entry
         LA    R2,ESDTAB               Zero the ESD TABLE in case
         L     R3,=AL4(&MAXESD*CSDL)   this is output from a batched
         SLR   R5,R5                   assembly and more object
         MVCL  R2,R4                   records follow this END record
         B     PROCESS
MVCMSG5  MVC   MSG5WAL(0),MSG5         Move Msg5 Length and text
         SPACE 1
*    End of Data on SYSUT1
*
UT1EOD   TM    PROFLAGS,FGOUT     Was any output written?       GP14277
         BNZ   PGMEXIT                Yes, Branch               GP14277
         PRTF  HEAD3                  Null Report               GP14277
         SPACE 1
*    All processing complete
*
PGMEXIT  SERVTERM ,               Terminate services            GP14277
         PGMEXIT COPYRET=(RETCODE,8)   Return R15, R0           GP14277
         SPACE 3
***********************************************************************
*                                                                     *
*    Generate Additional Text Records                                 *
*                                                                     *
*    On entry start addr of TXT is in CPTR                            *
*    R2 has length of TXT to generate                                 *
*                                                                     *
*    Optionally, generate detailed report of uninitialized            *
*    areas                                                            *
*                                                                     *
***********************************************************************
*
GENTXTR  ST    R14,GENRET
         MVC   OUTDID,FILLCH           Move Fillchar into Deck ID Fld
         MVC   OUTESDID,CESDID         ESD ID for TXT Record
         L     R1,CBYTEC               Add Number of bytes being
         AR    R1,R2                   generated to Byte Count
         ST    R1,CBYTEC
         L     R3,CPTR                 Start Addr
         MVC   REPREC,REPDTL           Move Record to I/O area
         MVC   REPREC+REPESDID-REPDTL(L'REPESDID),CNAME
         STCM  R3,B'0111',WORKD        Store Rel Addr
         UNPK  CHAR16(7),WORKD(4)      Setup for TR to Character
         TR    CHAR16(6),HEXTR-C'0'    Translate to Character
         MVC   REPREC+REPRADDR-REPDTL(L'REPRADDR),CHAR16 Move to I/O
         CVD   R2,WORKD                Convert length to Dec
         ED    REPREC+REPLEN-REPDTL(L'REPLEN),WORKD+4
         PRTF  REPREC,CC=NO            Write Report Line        GP14277
GENTXTA  CH    R2,=AL2(L'TXTDATA)      More than 1 TXT Record req ?
         BNH   GENTXTB                 No, Branch
*
*    Generate multiple TXT Records
*
         STCM  R3,B'0111',OUTRADDR     Set rel addr
         MVC   OUTLEN,=AL2(L'TXTDATA)  Set Length of TXT        GP14277
         MVC   OUTDATA(1),FILLXX       Propagate FILLCHAR       GP14277
         MVC   OUTDATA+1(L'TXTDATA-1),OUTDATA                   GP14277
         PRTF  GENREC,CC=NO,DEV=2      Generated TXT Record     GP14277
         OI    PROFLAGS,FGOUT          Show data generated      GP14277
         LH    R1,CTCNT                Get count of generated TXT rec
         LA    R1,1(,R1)               Increment count
         STH   R1,CTCNT                Store count
         AH    R3,=AL2(L'TXTDATA)      Advance Rel addr
         SH    R2,=AL2(L'TXTDATA)      Decrement data len
         B     GENTXTA                 Retest count
         SPACE
GENTXTB  STCM  R3,B'0111',OUTRADDR     Set Rel Addr
         STCM  R2,B'0011',OUTLEN       Set TXT Len
         MVI   OUTDATA,C' '            Blank out data field
         MVC   OUTDATA+1(L'TXTDATA-1),OUTDATA                   GP14277
         MVC   OUTDATA(1),FILLXX                                GP14277
         BCT   R2,GENTXTC              Decrement the Count
         B     GENTXTD                 Bypass Ex if only 1 byte in len
         SPACE 1
GENTXTC  BCTR  R2,0                    for Ex
         EX    R2,GENMVC
GENTXTD  PRTF  GENREC,CC=NO,DEV=2      Generated TXT Record     GP14277
         OI    PROFLAGS,FGOUT          Show data generated      GP14277
         LH    R1,CTCNT                Get count of generated TXT rec
         LA    R1,1(,R1)               Increment count
         STH   R1,CTCNT                Store count
         L     R14,GENRET
         BR    R14                     Return
GENMVC   MVC   OUTDATA+1(0),OUTDATA    *** EX Ins ***
         SPACE 3
***********************************************************************
*
*    Cleanup processing
*
*    An RLD or END record has been detected.
*
*    Ensure that all CSECTs have been padded out to their
*    set length. Note that this routine may be called a number
*    of times, once for each RLD record and again for END.
*    Fields are updated so that additional TXT records will not
*    be generated a second time.
*
***********************************************************************
*
CLEANUP  ST    R14,CLEANRET
         LA    R8,ESDTAB               -> Control Table for SD
         L     R7,=AL4((&MAXESD*CSDL)-1) Calc end of ESDTAB for
         AR    R7,R8                   BXLE loop comparand
         L     R7,ESDHWM               Scan only what there is  GP14277
         LA    R6,CSDL                 Increment value for BXLE
CLEANUPA CLC   CESDID,=X'0000'         Any ESD ID present ?
         BE    CLEANUPB                No ESD ID value present, branch
         L     R4,CPTR                 Calc number of bytes in TXT
         S     R4,CSLOC                records that have been processed
         L     R2,CLEN                 Get length of Csect
         SR    R2,R4                   Calc number of bytes short
         BNP   CLEANUPB                Zero or -VE Csect complete
         LR    R4,R2                   Save for later update of CPTR
         BAL   R14,GENTXTR             Generate additional TXT records
         L     R2,CPTR                 Advance CPTR by adding length
         AR    R2,R4                   of generated TXT record(s)
         ST    R2,CPTR
CLEANUPB BXLE  R8,R6,CLEANUPA          -> Next Entry
         L     R14,CLEANRET
         BR    R14                     Return
         SPACE 2
***********************************************************************
*                                                                     *
*    Issue WTO for error or information messages                      *
*                                                                     *
***********************************************************************
*
*    R01 -> Message Text length followed by text
*
MSGWTR   ST    R14,WTOMRET             Save Return addr
         SR    R2,R2
         IC    R2,0(,R1)               Get length of text
         SH    R2,=H'1'      Length for execute                 GP14277
         BM    MSGWTRX         oops                             GP14277
         LA    R15,5(,R2)    LENGTH WITH PREFIX                 GP14277
         STH   R15,WTORDW    MAKE LENGTH                        GP14277
         OI    WTORDW+2,X'80'     MCS FLAGS                     GP14277
         LA    R15,WTOTEXT+1(R15)                               GP14277
         MVC   0(4,R15),=X'02000020'   ROUTCDE=11,DESC=7        GP14277
         EX    R2,EXMVCMSG
         WTO   MF=(E,WTORDW)           WTO error message        GP14277
MSGWTRX  L     R14,WTOMRET
         BR    R14                     Return to caller
EXMVCMSG MVC   WTOTEXT(*-*),1(R1)     *** Ex *** Move text into WTO
*
*
*********************************************************************
*
*    STATIC DATA AREAS
*
*********************************************************************
*
*    Error Messages
*
*    Maximum Length 100 chars
*
MSG1     BCON  'INITOBJ - No parm provided. Fill char defaulted to 00'
MSG2     BCON  'INITOBJ - Invalid Parm. Fill char set to 00'
MSG3     BCON  'INITOBJ - OPEN for Dataset(s) failed'
MSG4     BCON 'INITOBJ - Csect    Inserted TXT Records  Inserted Bytes'
MSG5     BCON  'INITOBJ - ',END=MSG5ND                          GP14277
MSG5CS   DC    CL8' '                  Csect Name
         DC    CL7' '
MSG5IREC DC    XL6'402020202020'       Number of Inserted TXT Records
         DC    CL12' '
MSG5IBC  DC    XL8'4020202020202020'   Number of Inserted Bytes
MSG5E    BCON  *END                                             GP14277
MSG6     BCON  'INITOBJ - More than &MAXESD ESD Entries found'  GP14277
         SPACE 1
HEAD1    DC    C'#    INITOBJ - Uninitialized Areas'            GP14277
HEAD2    DC    C'  Csect    Rel Addr(hex) Length(dec)'
HEAD3    DC    C'0  No uninitialized areas found'
         SPACE 1
*    Report Detail Line
*
REPDCC   DC    C' '                    ASA space one            GP14277
         DC    CL1' '
REPESDID DC    CL8' '                  Name of Csect
         DC    CL4' '
REPRADDR DC    CL6' '                  Relative Address(hex)
         DC    CL3' '
REPLEN   DC    X'4020202020202020'     Length of area(dec)
         DC    CL1' '
REPDTL   EQU   REPDCC,*-REPDCC,C'C'    Detail line              GP14277
         SPACE 1
FILL     DC    C'FILL='
         SPACE 1
ESD      DC    C'ESD'        x'02' tested separately            GP14277
RLD      DC    C'RLD'
TXT      DC    C'TXT'
END      DC    C'END'
*
         PUSH  PRINT
         PRINT NOGEN
*
*   File definitions
*
SYSUT1   INPWORK SYSUT1,SYSIN,WIDTH=80,EDIT=128,EODAD=UT1EOD    GP14277
SYSUT2   PUNWORK SYSUT2,SYSPUNCH                                GP14277
REPORT   PRTWORK REPORT,SYSPRINT,TITLE=3                        GP14277
ERRUNIT  PRTWORK SYSTERM,*WTO                                   GP14277
         POP   PRINT
*
*    Translate table for FILLCHAR
*
TRTAB    TRENT FILL=X'00'    Input hex conversion               GP14277
         TRENT ,*-TRTAB+10,(X'81',6),       0a-0f               GP14277
         TRENT ,*-TRTAB+10,(X'C1',6),       0A-0F               GP14277
         TRENT ,*-TRTAB,(X'F0',10)           0- 9               GP14277
         SPACE 1
HEXTR    DC    CL16'0123456789ABCDEF'
IDRDATA  DC    C'(''FILLCHAR 00'')'    text for IDENTIFY Record
*
*    LITERAL POOL
*
         LTORG
*
*********************************************************************
*
*    GETMAINED WORK AREA
*
*********************************************************************
*
*    This area is initialized to zeros after Getmain
*
SAVE     DSECT ,                                                GP14277
WORKD    DS    D                       For CVD etc
         SERVDEFS ,          SERVICE ROUTINE DATA               GP14277
*
*    Subroutine Return Addrs
*
WTOMRET  DS  A                                                  GP14277
CLEANRET DS  A                                                  GP14277
GENRET   DS  A                                                  GP14277
REPHRET  DS  A                                                  GP14277
*
*    Work Areas
*
CHAR16   DS    CL16                    String Work area
FILLXX   DS    XL1                     Set by Parm or default of X'00'
FILLCH   DS    CL2                     Set by Parm or default of C'00'
PROFLAGS DC    X'00'         Processing/progress flags          GP14277
FGFILL   EQU   X'80'           User provided fill character     GP14277
FGREP    EQU   X'40'           Report being produced - skip WTO GP14277
FGWTO4   EQU   X'20'           Message 4 issued                 GP14277
FGOUT    EQU   X'01'           Uninitialized area found         GP14277
MSG5WAL  DS    AL1                     Length of Text
MSG5TEXT DS    CL100                   Text
*
*    WTO Area
*
WTORDW   DC    Y(0,0)
WTOTEXT  DC    CL100' '
WTOROUT  DC    XL4'0'
*
*    DCB Areas
*
         PUSH  PRINT
         PRINT NOGEN               No need to see what DCBS look like
*
         POP   PRINT
*
*    Record I/O Area
*
         DS    0F
RECIN    DS    CL80
         ORG   RECIN                                            GP14277
INTX02   DS    X'02'                                            GP14277
INTINT   DS    C'TXT'                                           GP14277
         DS    C' '                                             GP14277
INTRADDR DS    AL3                     Relative Addr of data in GP14277
*                                      INTDATA                  GP14277
         DS    C'  '                                            GP14277
INTLEN   DS    AL2                     Data Length in INTDATA   GP14277
         DS    C'  '                                            GP14277
INTESDID DS    AL2                     ESD ID of the data       GP14277
INTDATA  DS    CL56                    Data Field               GP14277
INTDID   DS    CL2                     Deck ID from Title Stmt  GP14277
         DS    CL6' '                  Optional Seq Number      GP14277
         ORG   RECIN                                            GP14277
ESDREC   DS    0CL80                   Define ESD Fields in ESD record
ESDX02   DS    X'02'
ESDESD   DS    C'ESD'
         DS    CL6' '
ESDVFC   DS    AL2                     Variable Field Count
         DS    CL2' '
ESDESDID DS    AL2                     ESDID of First SD, ER, etc
ESDVDATA DS    3XL16                   Up to three ESD ID entries
         ORG   ,                                                GP14277
*
*    Generated TXT Record I/O Area
*
         DS    0F
GENREC   DS    CL80
         ORG   GENREC                                           GP14277
OUTX02   DS    X'02'                                            GP14277
OUTOUT   DS    C'TXT'                                           GP14277
         DS    C' '                                             GP14277
OUTRADDR DS    AL3                     Relative Addr of data in GP14277
*                                      OUTDATA                  GP14277
         DS    C'  '                                            GP14277
OUTLEN   DS    AL2                     Data Length in OUTDATA   GP14277
         DS    C'  '                                            GP14277
OUTESDID DS    AL2                     ESD ID of the data       GP14277
OUTDATA  DS    CL56                    Data Field               GP14277
OUTDID   DS    CL2                     Deck ID from Title Stmt  GP14277
         DS    CL6' '                  Optional Seq Number      GP14277
         ORG   ,                                                GP14277
*
*    Generated IDENTIFY Record
*
         DS    0F
IDENTREC DS    CL80
         ORG   IDENTREC
         DS    CL8
IDENTID  DS    C'IDENTIFY'
         DS    C' '
IDENTSD  DS    CL8
IDENTTXT DS    CL55
         ORG
*
*    Report I/O Area
*
         DS    0F
REPREC   DS    CL80
*
*    Csect Control Area
*
*    This must be at the end of the GETMAINed WORKAREA to
*    avoid any addressability problems
*
ESDHWM   DS    F                      High address for ESD tab  GP14277
ESDTAB   DS    &MAXESD.XL32           Provide for &MAXESD number
*
*********************************************************************
*
*    END OF GETMAINed WORK AREA
*
*********************************************************************
*
SAVEEND   EQU *                        End of area to Getmain   GP14277
*
*********************************************************************
*
*    DSECTS
*
*********************************************************************
*
*
ESDENT   DSECT                         Define ESD Entry in ESD Record
ESDXSYMN DS    CL8                     External Symbol Name
ESDTYPE  DS    XL1                     External Symbol Type Code
ESDT#SD  EQU X'00'                     SD
ESDT#LD  EQU X'01'                     LD
ESDT#ER  EQU X'02'                     ER
ESDT#PC  EQU X'04'                     PC
ESDT#CM  EQU X'05'                     CM
ESDT#XD  EQU X'06'                     XD
ESDT#WX  EQU X'0A'                     WX
ESDADDR  DS    AL3                     Addr
ESDFLAG  DS    XL1                     Flags
ESDLEN   DS    AL3                     Length of SD
ESDENTL  EQU   *-ESDENT                Length of Entry
*
TXTREC   DSECT                         Define TXT Fields in TXT Record
TXTX02   DS    X'02'
TXTTXT   DS    C'TXT'
         DS    C' '
TXTRADDR DS    AL3                     Relative Addr of data in
*                                      TXTDATA
         DS    C'  '
TXTLEN   DS    AL2                     Length of data in TXTDATA
         DS    C'  '
TXTESDID DS    AL2                     ESD ID of the data
TXTDATA  DS    CL56                    Data Field
TXTDID   DS    CL2                     Deck ID from Title Stmt
         DS    CL6' '                  Optional Seq Number
*
*    Control Block with entry for each SD found on ESD
*    Records
*
CSD      DSECT
CESDID   DS    AL2                     ESD ID of Csect
CTCNT    DS    AL2                     Count of additional TXT Recs
CNAME    DS    CL8                     Name of SD
CLEN     DS    AL4                     Length of SD
CPTR     DS    AL4                     Current Ptr for SD
CSLOC    DS    AL4                     Starting Location
CBYTEC   DS    AL4                     Count of Inserted Bytes
CPAD     DS    CL4                     Padding
CSDL     EQU   *-CSD                   Length of Control Block (32)
*
         PUSH  PRINT
         PRINT NOGEN               No need to print
         IHAPSA
         IKJTCB
TIOT     DSECT
         IEFTIOT1
         DCBD  DSORG=PO,DEVD=(DA)
         POP   PRINT
         END
