A2SRC    TITLE 'A S M 2 S R C  ***  PRODUCE COMPLETE SYSADATA SOURCE'
***********************************************************************
**                                                                   **
**  ASM2SRC - PROGRAM TO READ SYSADATA OUTPUT AND PRODUCE COMPLETE   **
**       SOURCE, WITH OR WITHOUT EXPANSION OF MACRO AND COPY CODE    **
**                                                                   **
**  INPUT:  DD SYSADATA - ADATA OUTPUT FROM ASSEMBLER.               **
**                                                                   **
**  OUTPUT: DD SYSPRINT - SOURCE, WITH ASSEMBLER OFFSETS, ETC.       **
**                                                                   **
**          DD SYSPUNCH - SOURCE IN CARD FORMAT                      **
**                                                                   **
***********************************************************************
**  NOTE THAT THIS MODULE MUST BE ASSEMBLED WITH A VERSION OF THE    **
**  ASMADATA MACRO THAT MATCHES THE ASSEMBLER VERSION                **
***********************************************************************
*DONE*   PUNCH ' ORDER ASM2SRC(P) '   MAKE DUMPS EASIER
         SPACE 2
         COPY  OPTIONGB
         SYSPARM LIST=YES
         PRINT &PRTSOR       SAVE A TREE
ASM2SRC PGMHEAD ZERO15,BASE=(R12),PARM=R9,BNDRY=PAGE,RM=24
         SPACE 1
         MVI   PROCFLAG,PFASM   SET DEFAULTS
*OI PROCFLAG,PFMAC  EXPAND MACROS, BUT NOT COPY CODE
*OI PROCFLAG,PFCOPY EXPAND COPY CODE, BUT NOT MACROS
         MVI   CCLINE,C' '   SET FOR SINGLE SPACE
         LA    R0,L'PLINE+5
         STH   R0,VLINE      SET RDW LENGTH
         OPEN  MF=(E,DCBLIST)  OPEN OUTPUT AND INPUT DCBS
         SPACE 1
DATAGET  GET   DATADCB       GET A RECORD
         LR    R10,R1        SAVE IT
         USING ASMADATA,R10  DECLARE INPUT RECORD
         CLC   ADATA_RECTYPE,=Y(ADATA_RECSOURCE)  SOURCE?
         BNE   DATAGET       NO; LOOK FOR ANOTHER
         LH    R3,ADSRC_REC_LEN  GET LENGTH
         LTR   R3,R3         TEST INPUT LENGTH
         BM    DATAGET       IGNORE IT
         SPACE 1
         TM    PROCFLAG,PFBUG  DEBUG MODE?
         BZ    DATANDMP      NO                                 GP02333
         LR    R2,R10        COPY RECORD ADDRESS
         SR    R4,R4         PROCESS ENTIRE RECORD
         BAS   R14,DUMPLINE  DUMP IT
         SPACE 1
DATANDMP CLI   ADATA_LEVEL,ADATA_L3  NEWER CODE ?               GP02333
         BNL   NOBUG                                            GP02333
         SH    R6,=H'4'      LEVEL 3 PREFIX IS 4 BYTES LONGER   GP02333
*   DURING TESTING I FOUND AN ERROR IN THE HIGH-LEVEL ASSEMBLER (R2.0).
*   THE 'PRIMARY INPUT' FLAG (01) IS SET TO COPY (03) WHEN THE
*   INPUT COMES FROM A PDS MEMBER.  THE PARENT ORIGIN NUMBER IS
*   CORRECT, SO WE TEST AND FIX HERE:
NOBUG    CLI   ADSRC_REC_ORIGIN,3  COPY ?
         BNE   NOT03ERR      NO; SHOULD BE CORRECT?
         CLI   ADSRC_PARENT_ORIGIN,0  REAL COPY?
         BNE   NOT03ERR      NO; MAY BE REAL COPY?
         MVI   ADSRC_REC_ORIGIN,1    FIX IT
NOT03ERR LA    R14,ADSRC_RECORD  POINT TO NAME FIELD
         SLR   R15,R15
         ICM   R15,3,ADSRC_COPY_LEN  GET AND TEST LENGTH OF COPY/MACRO
         BNZ   MEMCOPY       COPY/MACRO NAME
         ICM   R15,3,ADSRC_PARENT_LEN  ELSE GET REAL MEMBER
         BNZ   MEMCOPY       SOURCE MEMBER
         LA    R15,L'CURRMEM  SET INPUT TO DEFAULT
         LA    R14,CURRMEM   DEFAULT - POINT TO CURRENT MEMBER
MEMCOPY  SH    R15,=H'1'     MAKE EXECUTE LENGTH
         BM    MEMNCOPY      OOPS - LEAVE BLANK
         EX    R15,EXMVCMEM  MOVE NAME TO OUTPUT
MEMNCOPY LA    R2,ADSRC_RECORD   POINT TO START OF MIXED RECORD
         AH    R2,ADSRC_COPY_LEN   LENGTH OF COPY NAME
         CLI   0(R2),C'*'    MACRO COMMENT ERROR?
         BE    MEMNPNAM      (OLD HLASM)
         AH    R2,ADSRC_PARENT_LEN   LENGTH OF NAME
MEMNPNAM MVC   OUTCARD,0(R2) MOVE CARD IMAGE
         SPACE 1
*   NOW PROCESS BY TYPE
*   REC_ORG  PAR_ORG  TYPE  MACH
*      01       00     03    0C    COPY REQUEST
*      01              04    00    MACRO INVOCATION
*      01       00     05    00    MACRO PROTOTYPE (IN-LINE)
*      01                          SOURCE RECORD
*      02       00                 SYMBOL SUBSTITUTION
*      02       >0                 MACRO EXPANSION
*      02       01  SEQ.FLD 01-N   EXPANSION OF IN-LINE MACRO
*      03                          COPIED CODE
         CLI   ADSRC_REC_ORIGIN,ADSRC_REC_MAC  MACRO OR LIBMAC COPY?
         BNL   GOCOPY        YES
         CLI   ADSRC_REC_ORIGIN,ADSRC_REC_MACGEN  GENERATED?
         BE    GOMACRO
*  PRIMARY INPUT.
*
         CLC   ADSRC_REC_TYPE(2),=AL1(ADSRC_REC_ASM,12)  COPY?
         BE    ORG01COP      YES
         CLC   ADSRC_REC_TYPE(2),=AL1(ADSRC_REC_ASM,51)  LITERAL?
         BE    GOPRINT       YES; PRINT IT ONLY
         CLC   ADSRC_REC_TYPE(2),=AL1(ADSRC_REC_MACR,0)  MACRO?
         BE    ORG01MAC      YES
         CLC   ADSRC_REC_TYPE(2),=AL1(ADSRC_REC_MACD,0)  INLINE?
         BE    ORG01INL      YES
         B     GOPUNCH       NOTHING ELSE SPECIAL - PROCESS
         SPACE 1
ORG01COP TM    PROCFLAG,PFCOPY  EXPAND COPY OUTPUT?
         BZ    GOPUNCH       NO; PUNCH AND PRINT THE COPY STATEMENT
         B     ORG01COM      MAKE COMMENT; THEN PRINT
         SPACE 1
ORG01MAC TM    PROCFLAG,PFMAC   EXPAND MACRO OUTPUT?
         BZ    GOPUNCH       NO; PUNCH AND PRINT THE MACRO
ORG01COM MVI   OUTCARD,C'*'  PRINT AS COMMENT
         B     GOPUNCH       PUNCH AND PRINT AS COMMENT
         SPACE 1
*  LATER DECIDE HOW TO HANDLE IN-LINE MACRO DEFINITION CONTAINING
*   A COPY (TRACK MACRO/MEND PAIRS)
ORG01INL B     GOPUNCH       NOTHING ELSE SPECIAL - PROCESS
         SPACE 2
GOMACRO  MVI   OUTIND,C'&&'  FLAG AS SUBSTITUTION RECORD
         CLI   ADSRC_PARENT_ORIGIN,0  SUBSTITUTION RECORD?
         BE    GOPRINT       YES; NEVER PUNCH
         MVI   OUTIND,C'+'   FLAG AS MACRO EXPANSION
*DEFER*  CLC   =C'01-',OUTCARD+72  POSSIBLE IN-LINE EXPANSION?
*DEFER*  BNE   ORG02MAC      NO; TEST
*DEFER*  CLI   OUTCARD+72+3,C'0'  NUMERIC 'MACRO' NAME?
*DEFER*  BNL   GOPRINT       YES; DON'T EXPAND
ORG02MAC TM    PROCFLAG,PFMAC  EXPAND MACROS?
         BZ    GOPRINT       NO; ONLY PRINT
         B     GOPUNCH       ELSE PUNCH AND PRINT
         SPACE 2
GOCOPY   MVI   OUTIND,C'C'   FLAG AS COPY
         CLI   ADSRC_PARENT_ORIGIN,1  IN-LINE MACRO WITH COPY?
*  DON'T KNOW HOW TO TEST THIS, YET.
ORG02COP TM    PROCFLAG,PFCOPY  EXPAND COPY CODE?
         BZ    GOPRINT       NO; ONLY PRINT
         B     GOPUNCH       ELSE PUNCH AND PRINT
         SPACE 2
GOPUNCH  BAS   R9,PUN0000    PUNCH A CARD IMAGE
         TM    PROCFLAG,PFASM  LIST ASSEMBLY CODE?
         BZ    DATACLR       NO
GOPRINT  ICM   R0,15,ADSRC_LOCTR
         BAS   R9,HEX2EBC    MAKE PRINTABLE
         MVC   OUTLCTR,HEXEDOUT  SHOW LOCATION COUNTER
         ICM   R0,12,ADSRC_REC_ORIGIN  GET REC/PARENT ORIGIN
         BAS   R9,HEX2EBC    MAKE PRINTABLE
         MVC   OUTRORG,HEXEDOUT  SHOW RECORD ORG
         MVC   OUTPORG,HEXEDOUT+2  AND PARENT ORG
         ICM   R0,14,ADSRC_REC_TYPE  GET TYPE/OPCD/FLAGS
         BAS   R9,HEX2EBC    CONVERT
         MVC   OUTRTYP,HEXEDOUT   RECORD TYPE
         MVC   OUTMTYP,HEXEDOUT+2 MACHINE CODE TYPE
         MVC   OUTFLGS,HEXEDOUT+4 FLAGS
         ICM   R0,15,ADSRC_STMT  STATEMENT NUMBER
         CVD   R0,DB
         MVC   OUTSTMT,=X'2020202120'
         ED    OUTSTMT-1(L'OUTSTMT+1),DB+5
         ICM   R0,15,ADSRC_INPUT_NUM  GET REC/PARENT FILE #
         BAS   R9,HEX2EBC    MAKE PRINTABLE
         MVC   OUTRLF,HEXEDOUT   SHOW FILE #
         BAS   R9,PRT0000    AND PRINT IT
         B     DATAGET       GET NEXT RECORD
DATACLR  BAS   R9,PRTCLEAR   CLEAR PRINT LINE
         B     DATAGET       GET NEXT RECORD
EXMVCMEM MVC   OUTMEM(0),0(R14)  MOVE COPY/MACRO/SOURCE NAME
         SPACE 1
DATAEND  DS    0H            DONE?
         SPACE 1
COMMEXIT CLOSE MF=(E,DCBLIST)  CLOSE OUTPUT DCBS
         LH    R15,CONDCODE  GET RETURN CODE
         PGMEXIT RC=(R15)    AND PASS IT TO CALLER (SYSTEM)
         TITLE 'A S M 2 S R C  ***  SUBROUTINES'
***********************************************************************
*                                                                     *
*  DUMPLINE    FORMAT HEX DATA LINE                                   *
*    R2 : START ADDRESS     R3: LENGTH       R4: MAX TO DUMP          *
*                                                                     *
***********************************************************************
         SPACE 1
DUMPLINE STM   R0,R15,DUMPSAVE   SAVE REGISTERS
         MVI   CCLINE,C'0'   SET TO DOUBLE SPACE
         LTR   R4,R4         DID USER SPECIFY ANY DUMP LIMIT?
         BP    *+6           YES; HONOR IT
         BCTR  R4,0          ELSE LET IT RUN
         SR    R7,R7         OFFSET FROM START
         LR    R0,R2         COPY FOR CONVERSION
         BAS   R9,HEX2EBC    CONVERT
         MVC   PLDISP-3(8),HEXEDOUT  SHOW ADDRESS
         LR    R0,R3         COPY FOR CONVERSION
         BAS   R9,HEX2EBC    CONVERT
         MVC   PLDISP+6(8),HEXEDOUT  SHOW LENGTH
         MVI   PLDISP+5,C'/'  FLAG LENGTH
         LTR   R3,R3         ANY LENGTH?
         BNP   DUMPLINX      NO; QUIT
DMPLLINE LA    R14,32        TEXT SIZE
         MIN   R14,(R3)      BUT NOT MORE THAN WE HAVE
         BCTR  R14,0         ADJUST FOR EXECUTE
         EX    R14,DMPEXTXT  MOVE TEXT
         L     R15,=A(TRANPRT)  GET PRINTABLE CHARACTER TABLE
         EX    R14,DMPEXTRN  MAKE THEM PRINTABLE
         MVI   PLINE+98,C'*'
         MVI   PLINE+131,C'*'
         LA    R8,PLINST-3   POINT TO FIRST AVAILABLE SPACE
         LA    R5,2          TWO SETS PER LINE
DMPLGRUP LA    R9,4          SET FOR 4 WORDS PER LINE
DMPLWORD LA    R0,4          CHARACTERS PER GROUP
DMPLBYTE LR    R14,R3        COPY RESIDUAL LENGTH
         MIN   R14,(R0)      BUT NOT MORE THAN 4
         LR    R15,R14       SAVE LENGTH
         BCTR  R15,0         EXECUTE LENGTH
         EX    R15,DMPLEXMV  MOVE TO WORK AREA
         LR    R1,R14        GET LENGTH BACK
         SLL   R14,5         MAKE OUTPUT LENGTH
         OR    R14,R1        UNPACK LENGTH; OUT+1; IN+1
         EX    R14,DMPLEXUN  UNPACK
         SRL   R14,4         MAKE DOUBLED LENGTH
         EX    R14,DMPLEXTR  MAKE PRINTABLE
         AR    R8,R14        FIRST UNUSED BYTE
         MVI   0(R8),C' '    CLEAN IT
         LA    R8,1(,R8)     NEXT OUTPUT
         AR    R2,R1         NEXT INPUT
         AR    R7,R1         SET NEW OFFSET
         SR    R3,R1         RESIDUAL OUTPUT LENGTH
         BNP   DUMPLINX      NO MORE; RETURN
         BCT   R9,DMPLWORD   DO NEXT WORD
         LA    R8,1(,R8)     EXTRA GAP
         BCT   R5,DMPLGRUP
         SPACE 1
         CLR   R7,R4         DID ENOUGH ?
         BNL   DUMPLINX      YES; QUIT NOW
         LTR   R3,R3         ANY MORE TO DO?
         BNP   DUMPLINX      NO; GET OUT
         BAS   R9,PRT0000    WRITE THIS LINE AND CLEAR IT
         LR    R0,R2         COPY FOR CONVERSION
         BAS   R9,HEX2EBC    CONVERT
         MVC   PLDISP-3(8),HEXEDOUT  SHOW ADDRESS
         LR    R0,R7         COPY FOR CONVERSION
         BAS   R9,HEX2EBC    CONVERT
         MVC   PLDISP+6(8),HEXEDOUT  SHOW LENGTH
         LA    R14,PLDISP+5  LOCATION FOR OFFSET PLUS
         LA    R15,7         DON'T DO TOO MUCH
DMPLZLOP CLI   1(R14),C'0'   LEADING ZERO?
         BNE   DMPLZPUT      NO
         MVI   1(R14),C' '   BLANK IT
         LA    R14,1(,R14)
         BCT   R15,DMPLZLOP  DO PRIOR
DMPLZPUT MVI   0(R14),C'+'   PRETTIFY
         B     DMPLLINE      FORMAT CONTINUATION LINE
         SPACE 1
DUMPLINX BAS   R9,PRT0000    WRITE THIS LINE AND CLEAR IT
         LM    R0,R15,DUMPSAVE  RESTORE USER'S REGISTERS
         BR    R14           RETURN TO CALLER
         SPACE 1
DMPLEXMV MVC   HEXEDIN(0),0(R2)  MOVE EXACT LENGTH TO AVOID 0C4
DMPLEXUN UNPK  0(0,R8),HEXEDIN(0)  UNPACK +1 EXTRA
DMPLEXTR TR    0(0,R8),HEXTRTAB  MAKE PRINTABLE CHARACTERS
DMPEXTXT MVC   PLINE+99(0),0(R2)  MOVE USER'S DATA
DMPEXTRN TR    PLINE+99(0),0(R15)  MAKE PRINTABLE
         SPACE 2
HEX2EBC  STCM  R0,15,HEXEDIN  STORE INPUT
         UNPK  HEXEDOUT(L'HEXEDOUT+1),HEXEDIN(L'HEXEDIN+1)
         TR    HEXEDOUT,HEXTRTAB
         BR    R9            RETURN TO CALLER
HEXTAB   DC    C'0123456789ABCDEF'
HEXTRTAB EQU   HEXTAB-C'0'
         SPACE 1
TRANPRT  TRTAB CODE=TN
         SPACE 2
PUN0000  TM    SYSPUNCH+DCBOFLGS-IHADCB,DCBOFOPN  PUNCH CARD PRESENT?
         BZR   R9            NO; NO PUNCH
         PUT   SYSPUNCH,OUTCARD  PUNCH A CARD IMAGE
         BR    R9            RETURN TO CALLER
         SPACE 2
PRT0000  TM    SYSPRINT+DCBOFLGS-IHADCB,DCBOFOPN  PUNCH CARD PRESENT?
         BZ    PRTCLEAR      NO; JUST CLEAR PRINT LINE
         PUT   SYSPRINT,CCLINE  WRITE A LINE
PRTCLEAR MVI   CCLINE,C' '   BLANK CARRIAGE CONTROL AGAIN
         MVC   PLINE,CCLINE  CLEAR BUFFER
         BR    R9            RETURN TO CALLER
         TITLE 'A S M 2 S R C  ***  DATA/WORK AREAS/MAPPINGS'
DCBLIST  OPEN  (DATADCB,(INPUT,REREAD),SYSPRINT,OUTPUT,SYSPUNCH,OUTPUT)*
               ,MF=L
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,RECFM=FBA,LRECL=121
SYSPUNCH DCB   DDNAME=SYSPUNCH,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=80
DATADCB  DCB   DDNAME=SYSADATA,DSORG=PS,MACRF=GL,EODAD=DATAEND
         SPACE 1
BLANKS   DC    CL80' '       CONSTANT
         SPACE 2
SAVE     DSECT ,
DB       DS    D             CONVERSION WORK AREA
DB2      DS    D             CONVERSION WORK AREA
@TRACE   DS    A             ADDRESS OF PGMTRACE UTILITY
DUMPSAVE DS    16A           DUMPLINE SAVE AREA
CURRLINE DS    F             CURRENT (SOURCE) LINE NUMBER
CONDCODE DC    H'0'          CONDITION CODE
PROCFLAG DC    X'00'         PROCESSING FLAG
PFSRC    EQU   X'80'           HAVE SOURCE DATA
PFCONT   EQU   X'40'           CONTINUATION INDICATED
PFMAC    EQU   X'20'           INCLUDE MACRO EXPANDED CODE
PFCOPY   EQU   X'10'           INCLUDE COPY CODE
PFASM    EQU   X'08'           PRODUCE PRINTED ASSEMBLER SOURCE
PFBUG    EQU   X'01'           PRODUCE DEBUG RECORDS
CURRMEM  DC    CL8' '        CURRENT MEMBER/CSECT NAME
HEXEDIN  DC    CL4' '        HEX INPUT
HEXEDOUT DC    CL8' ',C' '   HEX OUTPUT + EXTRA
         SPACE 1
VLINE    DC    Y(L'PLINE+5)
CCLINE   DC    C' '          CARRIAGE CONTROL
PLINE    DC    CL132' '      PRINT LINE
PLDISP   EQU   PLINE+09,6,C'C'  DISPLACEMENT
PLINST   EQU   PLINE+28,6,C'C'  OPCODE
         ORG   PLINE
OUTLCTR  DS    CL8,C         LOCATION COUNTER
OUTRORG  DS    CL2,C         RECORD ORIGIN
OUTPORG  DS    CL2,C         PARENT ORIGIN
OUTRTYP  DS    CL2,C         RECORD TYPE
OUTMTYP  DS    CL2,C         MACHINE INSTRUCTION
OUTFLGS  DS    CL2,C         FLAGS
OUTSTMT  DS    CL5           STATEMENT NUMBER
OUTIND   DS    C             ADD INDICATOR
OUTCARD  DS    CL80          SOURCE RECORD
         DS    CL2
OUTRLF   DS    CL8,C         RELATIVE FILE NUMBERS
OUTMEM   DS    CL8,C         SOURCE MEMBER
         ORG   ,
RECWORK  DC    CL256' '
         SPACE 1
SAVEEND  DS    0D        END OF DYNAMIC WORK AREA
         SPACE 2
         PUSH  PRINT
         PRINT ON,GEN,DATA
         ASMADATA PRINT=GEN,OUTPUT=NO,SOURCE=YES,COMPUNIT=YES
         POP   PRINT
         SPACE 1
         DCBD  DSORG=PS,DEVD=DA   DCB MAPPING
         END   ,
