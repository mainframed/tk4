SUBCPOOL TITLE 'S U B C P O O L  ***  MVS 3.8J CPOOL SUPPORT'
         MACRO ,
&NM      SHEAD &ID=,&CELL=
         PUSH  USING
         DROP  ,
&NM      STM   R14,12,12(R13)  SAVE A BIT
         LR    R12,R15
         USING SUBCPOOL,R12  DECLARE COMMON BASE
         AIF   ('&ID' EQ '').NOID
         LR    R6,R0         PRESERVE POOL ID
.NOID    AIF   ('&CELL' EQ '').NOCELL
         LA    R7,0(,R1)     PRESERVE AND CLEAN CELL ADDRESS
.NOCELL  LA    R0,SAVEEND-SAVE
         GETMAIN R,LV=(0)
         XC    0(SAVEEND-SAVE,R1),0(R1)
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING SAVE,R13
         MVI   SAVE+3,SAVEEND-SAVE  SET LENGTH FOR PGMEXIT
         ST    R6,RSNCODE    RETURN CELL POOL ID
.MEND    MEND  ,
         SPACE 1
         COPY  OPTIONGB
         SPACE 1
         SYSPARM LIST=YES
         SPACE 2
***********************************************************************
**                                                                   **
**  SUBCPOOL IS INVOKED WITH THE LOCAL VERSION OF THE CPOOL MACRO    **
**    LIST FUNCTION AND WORKAREA NOT SUPPORTED                       **
**    SP>127, KEY, TCB, AND LOC ARE NOT SUPPORTED                    **
**  PARAMETER LIST SAME AS IBM'S (?)                                 **
**                                                                   **
**   COPYRIGHT 2005 EXPERT SYSTEM PROGRAMMING                        **
***********************************************************************
**                                                                   **
**  FOR GENERAL USE, THE CONTROL BLOCKS FOR CELL POOL DATA ARE       **
**  BASED IN TCB FSA REGISTER 12, AND R11 HAS 'POOL' TO CONFIRM.     **
**                                                                   **
***********************************************************************
*TEST*   PRINT &PRTSOR
SUBCPOOL START 0                                      ADDED ON 2005012
         USING SUBCPOOL,R15  SET BASE
         B     GETCELL       BRANCH AROUND FIXED AREA
         DC    AL1(19),CL19'SUBCPOOL - &SYSDATE'
         B     FREECELL   24 FIXED OFFSET FOR CPOOL MACRO
         B     BUILD      28 FIXED OFFSET FOR CPOOL MACRO
         B     DELETE     32 FIXED OFFSET FOR CPOOL MACRO
         USING SUBCPOOL,R12  (DONE IN SHEAD)
         USING SAVE,R13          DITTO
         SPACE 1
***********************************************************************
*   GET - ACQUIRE A FREE CELL FROM EXISTING POOL                      *
***********************************************************************
GETCELL  LTR   R0,R0         ANY ID ?                           GP12131
         BNZ   GETCALL         YES; NOT TERMINATION             GP12131
         LTR   R1,R1         ANYTHING ?                         GP12131
         BZ    DELETE          YES; TERMINATION                 GP12131
         DROP  R15
         SPACE 1
GETCALL  SHEAD ID=LOOK       COMMON ENTRY CODE
         L     R1,4(,R13)    CALLER'S R13
         TM    16(R1),X'80'   WAS REQUEST CONDITIONAL?
         BZ    *+8           NO
         OI    PROFLAGS,PFCOND  SET CONDITIONAL MODE
         BAL   R9,FINDPOOL
           B   BADPID        POOL ID NOT FOUND
         USING CPRSECT,R8    DECLARE CONTROL ENTRY
         LA    R5,CPRCHAIN   POINT TO STORAGE BLOCK CHAIN
         USING BLKLINK,R5    DECLARE PREFIX MAPPING
GETBLOOP ICM   R4,15,BLKLINK  IS THERE ANOTHER BLOCK?
         BZ    GETNONE       NO; SEE WHETHER CONDITIONAL
         BAL   R9,FINDFREE   FIND A FREE CELL
         LR    R5,R4
         B     GETBLOOP      TRY AGAIN
         SPACE 1
GETNONE  TM    PROFLAGS,PFCOND  CONDITIONAL REQUEST ?
         BNZ   PGMEXIT       YES; RETURN R1 = 0
         ICM   R0,15,CPRCOUNT   SECONDARY CELL COUNT
         BZ    BADSEC        NO EXTENSION WANTED ?
         BAL   R9,BUILDBLK   BUILD A CELL BLOCK
         B     GETBLOOP      TRY AGAIN
         POP   USING
         SPACE 1
BADSEC   WTO   'SUBCPOOL: PRIMARY CELLS EXHAUSTED'
         ABEND 667,DUMP
         SPACE 1
BADPID   WTO   'SUBCPOOL: INVALID POOL ID'
         ABEND 666,DUMP
         SPACE 2
***********************************************************************
*   FREE - RELEASE A CELL FROM EXISTING POOL                          *
***********************************************************************
FREECELL SHEAD ID=LOOK,CELL=YES    COMMON ENTRY CODE
         BAL   R9,FINDPOOL
           B   BADPID        POOL ID NOT FOUND
         USING CPRSECT,R8    DECLARE CONTROL ENTRY
         LA    R5,CPRCHAIN   POINT TO STORAGE BLOCK CHAIN
         USING BLKLINK,R5    DECLARE PREFIX MAPPING
FREECOOP ICM   R4,15,BLKLINK  IS THERE ANOTHER BLOCK?
         BZ    PGMEXIT       NO; IGNORE ERROR
         DROP  R5
         USING BLKLINK,R4
         C     R7,BLKBXLE    IN THIS BLOCK ?
         BL    FREECEUP      NO
         C     R7,BLKBXLE+8  IN RANGE ?
         BNH   FREECEIT      YES; FREE IT UP
FREECEUP LR    R5,R4
         B     FREECOOP      TRY AGAIN
FREECEIT S     R7,BLKBXLE    OFFSET FROM START OF BLOCK
         SR    R6,R6         CLEAR FOR DIVIDE
         D     R6,BLKBXLE+4  RELATIVE CELL NUMBER
         D     R6,=F'8'      GET BIT COUNT; BYTE OFFSET
         LA    R7,BLKMASK(R7)  POINT TO BYTE
         LA    R5,=X'7F,BF,DF,EF,F7,FB,FD,FE'
         AR    R5,R6         POINT TO APPROPRIATE MASK
         NC    0(1,R7),0(R5)  UNALLOCATE THE CELL
         B     PGMEXIT       AND RETURN
         POP   USING
         SPACE 2
***********************************************************************
*   BUILD - CONSTRUCT A CELL POOL MATCHING PARAMETER LIST             *
***********************************************************************
BUILD    SHEAD CELL=YES      LOAD PARM INTO R7
         USING PARMLIST,R7   DECLARE PARAMETER LIST
         MVC   WTO(PATWTOL),PATWTO  MAKE ERROR MESSAGE
         LA    R2,=CL8'PCELLCT'
         ICM   R0,15,PRMPCT  VALID COUNT ?
         BNP   BADPRM        NO
         LA    R2,=CL8'SCELLCT'
         ICM   R0,15,PRMSCT  VALID COUNT ?
         BM    BADPRM        NO
         LA    R2,=CL8'CSIZE'
         ICM   R0,15,PRMSIZ  VALID COUNT ?
         BNP   BADPRM        NO
         LA    R2,=CL8'SP'
         SR    R0,R0                                            GP12154
         IC    R0,PRMSP                                         GP12154
         CLI   PRMSP,128
         BNL   BADPRM
         TM    PRMFLGS,PFHKEY  ?
         BZ    BUILDNKY
         LA    R2,=CL8'KEY'
         IC    R0,PRMKEY                                        GP12154
         CLI   PRMKEY,8      NORMAL KEY ?
         BNE   BADPRM
BUILDNKY LTCB  R6,USE=YES    GET MY TCB (BASE OF CELL POOL IDS)
         TM    PRMFLGS,PFHTCB  ?
         BZ    BUILDNTC
         LA    R2,=CL8'TCB'
         CLM   R6,7,PRMTCB+1
         BNE   BADPRM
BUILDNTC L     R10,TCBFSA    GET SAVE AREA POINTER
         N     R10,=X'00FFFFFF'  CLEAN
         CLC   =C'POOL',20+11*4(R10)  INITIALIZED ?
         BE    BUILDHSV      YES; RUN CHAIN
         XC    20+12*4(4,R10),20+12*4(R10)  CLEAR ANCHOR
         MVC   20+11*4(4,R10),=C'POOL'  SET ID
BUILDHSV LA    R8,20+12*4(,R10)  POINT TO CHAIN HEAD
         DROP  R6
         USING CPRSECT,R8    DECLARE ROOTING TOOTING POOL CONTROL
BUILDHLP ICM   R9,15,CPRLINK  ANY MORE ?
         BZ    BUILDHGT      NO; APPEND TO THIS ENTRY
         DROP  R8
         USING CPRSECT,R9
         MAX   R6,CPRID      REQUESTED ID ?
         LR    R8,R9         TRY AGAIN
         B     BUILDHLP      RETURN FOUND
         DROP  R9
         SPACE 1
         USING CPRSECT,R8    DECLARE ROOTING TOOTING POOL CONTROL
BUILDHGT SR    R15,R15
         IC    R15,PRMSP     GET SUBPOOL
         GETMAIN RC,LV=CPRLEN,SP=(15)  GET STORAGE
         BXH   R15,R15,STORFAIL  OOPS
         XC    0(CPRLEN,R1),0(R1)
         ST    R1,CPRLINK    LINK IT IN
         LR    R8,R1         SET CORRECT ADDRESS FOR BUILDBLK
         AL    R6,=F'1'      MAKE POOL ID
         ST    R6,CPRID
         ST    R6,RSNCODE    RETURN TO CALLER IN R0
         MVC   CPRCOUNT,PRMSCT  SECONDARY CELL COUNT
         MVC   CPRSIZE,PRMSIZ   CELL SIZE
         MVC   CPRHEAD,PRMHDR   HEADER
         MVC   CPRSP(4),PRMSP   COPY SP, KEY, FLAGS
         L     R0,PRMPCT
         LA    R5,CPRCHAIN
         BAL   R9,BUILDBLK   BUILD FIRST STORAGE BLOCK
         B     PGMEXIT
         SPACE 1
BADPRM   MVC   WTOPARM,0(R2)  SHOW BAD PARAMETER
         LA    R14,WTOPEND-WTO    NEW LENGTH                    GP12154
         STH   R14,WTO       SET NEW LENGTH                     GP12154
         MVI   WTOPVAL-1,C' '     BLANK SPACER                  GP12154
         ST    R0,DB              SAVE BAD VALUE                GP12154
         UNPK  WTOPVAL(9),DB(5)   UNPACK                        GP12154
         TR    WTOPVAL,HEXTRTAB   MAKE PRINTABLE                GP12154
         WTO   MF=(E,WTO)
         ABEND 661,DUMP
PATWTO   WTO   'SUBCPOOL: BAD VALUE FOR ',MF=L                  GP12152
PATWTOL  EQU   *-PATWTO
         POP   USING
         SPACE 2
***********************************************************************
*   DELETE - RELEASE A CELL POOL                                      *
***********************************************************************
DELETE   SHEAD ID=LOOK       COMMON ENTRY CODE
         LTR   R7,R7         COMPLETE TERMINATION ?             GP12131
         BNZ   *+8             NO                               GP12131
         OI    PROFLAGS,PFTERM   YES; FORCE MATCH               GP12131
         ST    R7,RR1CODE    RETURN R1 UNCHANGED
DELTALL  BAL   R9,FINDPOOL                                      GP12131
           B   PGMEXIT       IGNORE IF POOL ID NOT FOUND        GP12131
         USING CPRSECT,R8    DECLARE CONTROL ENTRY
         L     R4,CPRCHAIN   POINT TO STORAGE BLOCK CHAIN
         SR    R7,R7
         IC    R7,CPRSP      GET SUBPOOL
DELBLOOP LTR   R5,R4         ANOTHER CELL BLOCK ?
         BZ    DELCFREE      NO; FREE CONTROL BLOCK
         USING BLKLINK,R5    DECLARE PREFIX MAPPING
         L     R4,BLKLINK    SAVE FOR NEXT TIME
         L     R3,BLKBXLE+8  GET LAST CELL IN BLOCK
         A     R3,BLKBXLE+4  PLUS SIZE OF LAST CELL
         TM    CPRFLAGS,PFHHDR  HEADER ?
         BZ    DELBFREE      NO
         SH    R5,=AL2(L'BLKHEAD)
DELBFREE SR    R3,R5         SIZE TO FREE
         FREEMAIN RC,A=(R5),LV=(R3),SP=(R7)  FREE CELL BLOCK
         B     DELBLOOP      DO NEXT
         SPACE 1
DELCFREE MVC   CPRLINK-CPRSECT(L'CPRLINK,R10),CPRLINK  UNCHAIN THIS ONE
         FREEMAIN R,LV=CPRLEN,SP=(R7),A=(R8)
         TM    PROFLAGS,PFTERM    COMPLETE TERMINATION ?        GP12131
         BNZ   DELTALL              YES; RINSE AND REPEAT       GP12131
         B     PGMEXIT
         POP   USING
         SPACE 2
***********************************************************************
*   PGMEXIT - COMMON RETURN                                           *
***********************************************************************
PGMEXIT  DS    0H
         PGMEXIT COPYRET=(RETCODE,12)  RETURN R15-R1
         SPACE 2
***********************************************************************
*   FINDPOOL - LOCATE POOL BASED ON ID IN R6                          *
***********************************************************************
         PUSH  USING
FINDPOOL LTCB  R4,USE=YES    GET MY TCB
         L     R10,TCBFSA    GET SAVE AREA POINTER
         N     R10,=X'00FFFFFF'  CLEAN
         CLC   =C'POOL',20+11*4(R10)  INITIALIZED ?
         BNER  R9            NO; BAD CALL
         LA    R10,20+12*4(,R10)  POINT TO CHAIN HEAD
         USING CPRSECT,R10   DECLARE ROOTING TOOTING POOL CONTROL
FINDLOOP ICM   R8,15,CPRLINK  ANY MORE ?
         DROP  R10
         USING CPRSECT,R8    DECLARE ROOTING TOOTING POOL CONTROL
         BZR   R9            NO; TOO BAD
         TM    PROFLAGS,PFTERM    COMPLETE TERMINATION ?        GP12131
         BNZ   4(,R9)          YES; TREAT AS MATCH              GP12131
         CL    R6,CPRID      REQUESTED ID ?
         BE    4(,R9)        RETURN FOUND
         LR    R10,R8        UPDATE
         B     FINDLOOP      NO; TRY AGAIN
         POP   USING
         SPACE 2
***********************************************************************
*   FINDFREE - LOCATE A FREE CELL IN THE BLOCK POINTED TO BY R4       *
***********************************************************************
         PUSH  USING
         USING BLKLINK,R4    PASSED BY USER
FINDFREE STM   R14,R12,12(R13)  SAVE A LITTLE
         LA    R14,BLKMASK     GET ALLOCATION BITS
         LM    R3,R5,BLKBXLE   GET POINTERS TO ALL CELLS
         DROP  R4
FINDFREL LA    R0,8          BITS PER BYTE
         LA    R1,X'80'      FIRST MASK BIT
FINDFRET EX    R1,EXTMBIT    IS MASK BIT ON ?
         BZ    FINDFALL      NO; ALLOCATE IT
         SRL   R1,1          NEXT BIT
         BXH   R3,R4,FINDFEXT  NONE FOUND
         BCT   R0,FINDFRET
         LA    R14,1(,R14)   NEXT MASK BYTE
         B     FINDFREL      DO ALL
FINDFEXT LM    R14,R12,12(R13)  RELOAD ALL
         BR    R9            RETURN TO CALLER
FINDFALL STC   R1,DB         STASH BIT TO STORAGE
         OC    0(1,R14),DB   ALLOCATE THE CELL
         ST    R3,RR1CODE    SET THE CELL ADDRESS IN RETURN
         B     PGMEXIT       RETURN THE CELL
EXTMBIT  TM    0(R14),*-*    MASK BIT ON ?
         POP   USING
         SPACE 2
***********************************************************************
*   BUILDBLK - BUILD A CELL BLOCK; CELL COUNT IN R0; LINK IN R5       *
***********************************************************************
         PUSH  USING
         USING BLKLINK,R5    PASSED BY CALLER
         USING CPRSECT,R8    PASSED BY CALLER
BUILDBLK STM   R14,R12,12(R13)  SAVE A LITTLE
         LA    R9,7          FOR ROUNDING
         AR    R9,R0         NUMBER OF BITS REQUIRED
         SRA   R9,3          NUMBER OF MASK BYTES
         LA    R2,BLKMASK-BLKLINK(,R9)  GET CELL OVERHEAD
         TM    CPRFLAGS,PFHHDR      HEADER REQUESTED ?
         BZ    *+8           NO
         LA    R2,L'BLKHEAD(,R2)     ADD HEADER
         L     R15,CPRSIZE   GET CELL SIZE
         MR    R14,R0        TIMES CELL COUNT
         LR    R6,R15        SAVE SIZE
         AR    R2,R15        TOTAL SIZE
         SR    R15,R15
         IC    R15,CPRSP     GET SUBPOOL
         GETMAIN RC,LV=(R2),SP=(15)  GET STORAGE
         BXH   R15,R15,STORFAIL
         LR    R14,R1        BLOCK ADDRESS
         LR    R15,R2        GETMAIN SIZE
         SR    R3,R3         CLEAR LENGTH AND INSERT BYTE
         MVCL  R14,R2        CLEAR BLOCK
         TM    CPRFLAGS,PFHHDR  HEADER ?
         BZ    BUILDBNH      NO
         DROP  R5
         USING BLKSECT,R1
         MVC   BLKHEAD,CPRHEAD  PROPAGATE HEADER
         LA    R1,L'BLKHEAD(,R1)
         DROP  R1
         USING BLKLINK,R5
BUILDBNH ST    R1,BLKLINK    APPEND TO CHAIN
         DROP  R5
         USING BLKLINK,R1
         LA    R2,BLKMASK(R9)   GET FIRST AVAILABLE CELL
         L     R3,CPRSIZE    GET CELL SIZE
         LA    R4,0(R6,R2)   LAST CELL +
         SR    R4,R3         LAST CELL ADDRESS
         STM   R2,R4,BLKBXLE  SAVE POINTERS
         LM    R14,R12,12(R13)
         BR    R9            RETURN TO CALLER
         POP   USING
STORFAIL ABEND 804,DUMP      *****NOT ENOUGH STORAGE*****
         SPACE 2
HEXTAB   DC    C'0123456789ABDEF' HEX PRINTABLES                GP12154
HEXTRTAB EQU   HEXTAB-C'0',256,C'C'                             GP12154
         SPACE 2
SAVE     DSECT ,             WORK AREA
SAVESPLN DS    F
SAVE13   DS    F
SAVEFWD  DS    A
SAVE14   DS    A
SAVE15   DS    A
SAVE0    DS    A
SAVE1    DS    A
SAVE2    DS    A
SAVE3    DS    A
SAVE4    DS    A
SAVE5    DS    A
SAVE6    DS    A
SAVE7    DS    A
SAVE8    DS    A
SAVE9    DS    A
SAVE10   DS    A
SAVE11   DS    A
SAVE12   DS    A
         SPACE 1
DB       DS    D             WORK AREA
         SERVDEFS ,          DEFINE BASICS
PROFLAGS DS    X
PFCOND   EQU   X'80'           REQUEST WAS CONDITIONAL
PFTERM   EQU   X'40'           REQUEST WAS @SERVICE TERMINATION GP12131
WTO      DS    0A,XL(PATWTOL)  WTO
WTOPARM  DS    CL8,C         INSERTION - NAME OF BAD PARM
WTOPVAL  DS    CL8,C         INSERTION - VALUE OF BAD PARM      GP12154
WTOPEND  EQU   *                                                GP12154
SAVEEND  EQU   *
         SPACE 2
CPRSECT  DSECT ,             POOL CONTROL BLOCK MAPPING
CPRLINK  DS    A             CONTROL BLOCK CHAIN
CPRHEAD  DS    CL24          (OPTIONAL) HEADER
CPRID    DS    F             POOL ID
CPRCHAIN DS    A             CHAIN OF STORAGE BLOCKS
CPRSP    DS    X             SUBPOOL
CPRKEY   DS    X             STORAGE KEY (NOT USED)
CPRFLAGS DS    X             PROCESSING FLAGS (SAME AS PARM)
         DS    X               RESERVED
CPRCOUNT DS    F             SECONDARY COUNT
CPRSIZE  DS    F             CELL SIZE
CPRLEN   EQU   *-CPRSECT       GETMAIN SIZE
         SPACE 1
BLKSECT  DSECT ,             STORAGE BLOCK MAPPING
BLKHEAD  DS    CL24          OPTIONAL HEADER (PRECEDES BLOCK)
BLKLINK  DS    A             NEXT BLOCK
BLKBXLE  DS    A,F,A         FIRST CELL/SIZE/LAST CELL
BLKMASK  DS    0X            USE MASK (CELL ASSIGNED IF BIT ON)
         SPACE 2
PARMLIST DSECT ,             CALLER'S PARAMETER LIST
PRMPCT   DS    F             PRIMARY COUNT
PRMSCT   DS    F             SECONDARY COUNT
PRMSIZ   DS    F             CELL SIZE
PRMSP    DS    AL1           SUBPOOL
PRMKEY   DS    AL1           STORAGE PROTECTION KEY
PRMFLGS  DS    X             FLAGS
PFLREAL  EQU   X'80'           LOC IS REAL
PFLANY   EQU   X'60'           LOC = ANY
PFLLOW   EQU   X'20'           LOC = BELOW
PFHTCB   EQU   X'10'           HAVE TCB
PFHKEY   EQU   X'08'           HAVE KEY
PFHHDR   EQU   X'04'           HAVE HEADER
PFOSYS   EQU   X'03'           OWNER IS SYSTEM
PFOPRI   EQU   X'01'           OWNER IS PRIMARY
         DS    X             UNUSED
PRMTCB   DS    A             TCB - IGNORED
PRMHDR   DS    CL24          POOL HEADER
         SPACE 1
         PRINT &PRTSYS
         YREGS ,
         SPACE 1
         IHAPSA ,
         CVT   ,
         IKJTCB ,
         END   ,
