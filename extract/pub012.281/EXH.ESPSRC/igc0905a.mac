VABDUMP  TITLE 'VABDUMP MODIFIED FOR VS2 REL 3.7 SUPERVISOR SU 1'
* INSTALLED IN SYS1.LPALIB AS IGC0905A.
* THIS MODULE PRINTS THE DEBS, DCBS, ACBS, UCBS, IOBS, AND ICBS.
* RECEIVED FROM STANDARD OIL OF CALIFORNIA (SAN FRANCISCO)
* MODIFIED BY LOCKHEED-CALIFORNIA COMPANY (BURBANK) TO MVS SPECS
*     LOADED FROM CBT OVERFLOW TAPE FILE 065 (LA USER GROUP)
*        TAB SETTINGS 10 16 35 40 72
IGC0905A START 0
TCBTIOT  EQU       12
TCBDEB   EQU       8
DEBDCB   EQU       24
DEBDEB   EQU       4
DCBDEB   EQU       44
DCBTIOT  EQU       40
DCBIOBL  EQU       56
DCBIND2  EQU       61
CHAIN    EQU       4
PCIOB    EQU       28
IOBAD    EQU       68
PCI      EQU       32
OPTCD    EQU       52
DCBAD    EQU       28
DSORG    EQU       26
MACRF    EQU       42
*
         SAVE  (14,12),T,*
         LR    R12,R15
         USING IGC0905A,R12
         LR    R3,R1
         GETMAIN R,LV=VABWLNG,SP=253   GET CORE FOR SAVE AREA
         XC    0(VABWLNG,R1),0(R1)     CLEAR AREA
         ST    R1,8(R13)
         ST    R13,4(R1)
         LR    R13,R1
         USING VABWORK,R13
         MVI   ABDCC,C' '         BLANK PRINT LINE
         MVC   ABDLINE,ABDCC
         ESTAE ESTAERTN
         LR    R1,R3
         USING ABDPL,R1
         MVC   ABDCC(31),DSLBL    DO HEADING
         BAL   R5,ABDOUT
         L     R2,ADPLTCB         GET ADD OF TCB
*
* INITIALIZE DEB AND SET UP ROUTINE
*
         SR    R9,R9
         ICM   R9,7,TCBDEB+1(R2)  GET DEB POINTER
TESTEND  L     R2,ADPLTCB         GET ADD OF TCB
         BZ    EXIT
         LA    R0,BADADDR         RECOVERY POINT IF 0C4
         ST    R0,ABDUPRXT
         TM    DEBDCB+3(R9),X'03' IS IT VALID ADDRESS
         BNZ   BADADDR            ERROR MSG IF SO
         SR    R10,R10
         ICM   R10,7,DEBDCB+1(R9) GET POINTER TO DCB
         LA    R0,BADCORE         BRANCH POINT IF 0C4
         ST    R0,ABDUPRXT
         SPACE 3
         TM    DCBDEB+3(R10),X'03' IS IT VALID ADDRESS
         BNZ   BADCORE            ERROR MSG IF SO
         CLM   R9,7,DCBDEB+1(R10) CHECK DCB PTR TO DEB
         BNE   BADCORE            NOT EQUAL - DCB OVERLAID
         TM    DCBTIOT+1(R10),X'03' IS IT VALID ADDRESS
         BNZ   BADCORE            ERROR MSG IF SO
         L     R11,DCBTIOT(R10)   TIOT DISPLACEMENT
         L     R6,TCBTIOT(R2)     GET TIOT ADDR
         SRL   R11,16             ADJ OFFSET
         LA    R11,0(R6,R11)      POINTER TO TIOT ENTRY
         ST    R11,MYWORK2        SAVE TIOT ENTRY POINTER
         SR    R10,R10            CLEAR REG 10
         IC    R10,0(R11)         LENGTH OF DD ENTRY IN TIOT
         SH    R10,SIXTEEN        LENGTH OF ENTRY -16 AND DIVIDED
         SRL   R10,2              BY 4 = NUMBER OF UCB'S
         CLC   SYSAB(8),4(R11)    IS IT SYSABEND DD CARD
         BE    NEXTDEB            IF YES, BR TO GET NEXT DEB ADDR
         CLC   SYSU(8),4(R11)     IS IT SYSUDUMP DD CARD
         BE    NEXTDEB            IF YES, BR TO GET NEXT DEB ADDR
*
* R6=TIOT,R9=DEB,R10=#OFUCB'S,R11=IOTENTRY,R12=BASE,RD=ABDAREA,R2=TCB
*
         MVI   ABDCC,C'0'         DOUBLE SPACE CC
         OC    ABDLINE(8),BLANKS
         NC    ABDLINE(8),4(R11)
         CLC   ABDLINE(8),BLANKS  Q/WAS DDNAME EBCDIC ALPHANUM
         MVC   ABDLINE(8),4(R11)  ASSUME YES-MOVE DDNAME FROM TIOT
         BE    DEBPRT             DEFINITELY YES
         MVC   ABDLINE(11),UNK    IT WASNT SO MARK IT UNKNOWN.
DEBPRT   EQU   *
*
* DEB PRINT ROUTINE
*
         MVC   ABDLINE+13(3),DEB  PUT DEB HDR INTO BUFFER
         LR    R4,R9
         LA    R11,4
         SR    R4,R11             BACKUP TO DEB - 4
         IC    R11,0(R4)          GET DEB LENGTH IN DBL WORDS
         SRL   R11,2              CALC NO. OF 32 BYTE CHUNKS (LINES)
         LTR   R6,R11             Q/SIZE AT LEAST 32 BYTES
         BNZ   SIZEOK             YES
         LA    R6,1               SET TO ONE LINE
SIZEOK   EQU   *
         LR    R4,R9              SET DEB TO +0
         BAL   R3,FORMIT          LINK TO CONVRT RTN AND PRNT RTN.
*
* DCB PRINT ROUTINE.
* LENGTH OF DCB MUST BE FOUND IN ORDER TO PRINT THE DCB FOR ALL
* ACCESS METHODS.
*
         MVI   ABDCC,C'0'         SPACE
         MVC   ABDLINE+13(3),DCB  SET UP DCB HEADER
         SR    R11,R11
         ICM   R11,7,DEBDCB+1(R9) GET DCB ADDRESS FOR PRINT
         LR    R4,R11             DCB ADDR TO DATA REG
         CLI   0(R11),X'A0'       SEE IF ACB
         BNE   *+14               NO
         MVC   ABDLINE+13(3),ACB  ACB - MOVE IN ACB DESCRIPTION
         B     DCB3               PRINT AS 3-LINE DCB
         TM    DSORG(R11),X'80'   IS IT AN ISAM DCB
         BZ    *+12               NO TEST NEXT BIT
         LA    R6,8(R0)           SET LINE COUNT TO 8 FOR ISAM
         B     DCBOUT             GO TO PRINT DC
         TM    DSORG(R11),X'20'   IS IT A BDAM DCB
         BZ    *+12               NO TEST NEXT BIT
         LA    R6,4(R0)           SET LINE COUNT TO 4 FOR BDAM
         B     DCBOUT             GO TO PRINT DCB
         TM    DSORG(R11),X'08'   IS IT A GAM DCB
         BZ    *+12               NO TEST NEXT BIT
         LA    R6,2(R0)           SET LINE COUNT TO 2 FOR GAM
         B     DCBOUT             GO TO PRINT DC
DCB3     LA    R6,3(R0)           OTHER ACCESS METHODS = 3
DCBOUT   BAL   R3,FORMIT          LINK TO CONVRT AND PRNT RTN
*
* IOB PRINT ROUTINE
* IOB'S WILL BE PRINTED ONLY IF THEY ARE BSAM, BPAM, OR QSAM
* R11=DCB ADDRESS, R7=IOB ADDRESS, R8=WORK REGISTER
*
IOBPRINT CLI   0(R11),X'A0'       SEE IF ACB
         BE    NEXTCB             ACB - SKIP IOB PRINT
         TM    DSORG(R11),X'42'   TEST DSORG FOR SAM OR PAM
         BZ    NEXTCB             BRANCH IF NOT SAM OR PAM
         LA    R0,NOIOB           BRANCH POINT IF 0C4
         ST    R0,ABDUPRXT
         TM    MACRF(R11),X'80'   TEST MACRF FOR EXCP
         BO    NEXTCB             BRANCH IF EXCP BEING USED
         TM    DCBIND2(R11),CHAIN TEST FOR CHAINED SCHEDULING
         BZ    NOTPCI             BRANCH IF NOT CHAIN SCHEDULING
         TM    PCIOB+3(R11),X'03' TEST FOR AN IOB
         BNZ   NOIOB              BRANCH IF NO IOB
         L     R7,PCIOB(R11)      GET IOB FOR CHAIN SCHEDULING
         LA    R4,0(R7)           SAVE ADDRESS FOR PRINT RTN.
         LA    R7,8(R7)           ADJUST PREFIX TO MINUS 8
         SR    R8,R8              INDICATE THAT ICBS TO BE PROCESSED
         B     IOBCHK             GO TO VALIDITY CHK IOB ADDRESS
NOTPCI   TM    IOBAD+3(R11),X'03' TEST FOR AN IOB
         BNZ   NOIOB              BRANCH IF NO IOB
FIRSTICB SR    R7,R7
         ICM   R7,7,IOBAD+1(R11)  GET IOB FOR SIMPLE SCHEDULING OR ICB
         BZ    NOIOB              BRANCH IF IT IS NON-EXISTENT
         LR    R8,R7              SAVE FIRST IOB TO BE PRINTED.
NEXTIOB  LR    R4,R7              SAVE ADDRESS FOR PRINT RTN.
         TM    DCBIND2(R11),CHAIN TEST FOR CHAIN SCHEDULING
         BZ    IOBCHK             BRANCH IF NOT CHAIN SCHEDULING
         MVI   ABDCC,C'0'         SPACE A LINE
         MVC   ABDLINE+13(3),ICB  SET UP ICB HEADER
         B     IOBOUT             SKIP CHKING AND PRINT THE ICB
IOBCHK   CLM   R11,7,DCBAD+1(R7)  CHECK IOB PTR TO DCB
         BNE   NOIOB              BRANCH NO TO ERROR MSG
         MVI   ABDCC,C'0'         SPACE A LINE
         MVC   ABDLINE+13(3),IOB  SET UP IOB HEADER
IOBOUT   EQU   *
         SR    R6,R6
         IC    R6,DCBIOBL(R11)    IOB LENGTH IN DOUBLEWORDS
         LA    R6,3(,R6)          ADD 3 TO ROUND UP ON DIVIDE
         SRL   R6,2               DIVIDE BY 4 GIVING LEN IN DUMP LINE
         BAL   R3,FORMIT          LINK TO THE CONVRT AND PRNT RTN.
         TM    3(R7),X'03'        IS NEXT IOB ADDRESS VALID
         BNZ   NOIOB              BRANCH IF NOT
         ICM   R7,7,1(R7)         GET NEXT IOB ADDRESS
         CR    R7,R8              IS THIS IOB SAME AS FIRST
         BE    NEXTCB             IF YES GO TO UCB PRINT
         LTR   R8,R8              CHK IF CHAIN SCHED. IOB JUST PRINTED
         BNZ   NEXTIOB            NO, GO BACK TO PRINT NEXT IOB
         B     FIRSTICB           YES, SET UP TO PRINT ICBS
*
* UCB PRINT ROUTINE
*
NEXTCB   L     R11,MYWORK2        RESTORE TIOT ENTRY ADDRESS
         LA    R0,NEXTDEB         BRANCH POINT IF 0C4
         ST    R0,ABDUPRXT
         LA    R11,16(R11)        SHIFT R11 TO UCB ENTRY
AGAIN    SR    R4,R4
         ICM   R4,7,1(R11)        POINT TO UCB FOR PRINT RTN
         BZ    NEXTDEB            DUMMY OR JES - NO UCB
         MVI   ABDCC,C'0'         TRIPLE SPACE
         MVC   ABDLINE+13(3),UCB  SET UP HEADER LINE
         TM    2(R4),X'FF'        IS THIS A UCB
         BO    UCBOK              BRANCH IF OK
         CLC   18(2,R4),DEV2321   IS IT A 2321
         BNE   UCBBAD             BRANCH TO PRINT ERROR MSG
UCBOK    LA    R6,2               SET LINE COUNT TO 2
         MVC   ABDLINE+9(3),13(R4)     UCB NAME TO PRINT
         BAL   R3,FORMIT          LINK TO CONVRT AND PRNT RTN
         LA    R11,4(R11)         POINT TO THE NEXT ENTRY IN TIOT
         BCT   R10,AGAIN          BRANCH BACK ON = OF UCB'S
NEXTDEB  TM    DEBDEB+3(R9),X'03' IS IT VALID ADDRESS
         BNZ   BADADDR            ERROR MSG IF NOT
         ICM   R9,7,DEBDEB+1(R9)  GET NEXT DEB ADDRESS
         B     TESTEND            SEE IF WE'RE THROUGH
NOIOB    MVC   ABDLINE+26(L'IOBERR),IOBERR MOVE IOB ERR MSG
         MVI   ABDCC,C'0'         SET UP CARR CONTROL
         BAL   R5,ABDOUT          PRINT IOB ERROR MSG
         B     NEXTCB             RETURN TO PROSSES NEXT
UCBBAD   MVC   ABDLINE+26(L'IOBERR),IOBERR SET UP IOB ERR MSG
         MVC   ABDLINE+34(L'UCB),UCB CHANGE IT TO UCB
         B     SETCC              GO TO SET CARR CONTROL
BADCORE  MVC   ABDLINE+26(L'BADMESG),BADMESG     MOVE DCB MSG TO PRT LN
         MVC   ABDLINE(11),UNK
SETCC    MVI   ABDCC,C'0'         SET CARR CONTROL
         BAL   R5,ABDOUT          PRINT IT
         B     NEXTDEB            TRY TO PROCCESS NEXT DEB
BADADDR  MVC   ABDCC(L'BADMESS),BADMESS SET UP TO PRINT TERM MSG
         BAL   R5,ABDOUT          PRINT ERROR MSG
*
EXIT     XR    R5,R5              CLEAR FOR RETURN CODE
         XC    ABDUPRXT,ABDUPRXT  REMOVE PAGE FAULT RECOVERY
         ESTAE 0
         LR    R1,R13
         L     R13,4(R13)
         FREEMAIN R,LV=VABWLNG,A=(R1),SP=253
         LR    R15,R5
         RETURN (14,12),T,RC=(15)
         EJECT
*
* FORMIT ROUTINE ******************************************************
*        THE FORMIT ROUTINE TRANSLATES THE ADDRESS PASSED IN REG 4
*        INTO CHARACTERS AND PLACES IT INTO LINE POSITION 18 JUST
*        AFTER THE CONTROL BLOCK NAME.  THIS ROUTINE THEN INTERFACES
*        WITH THE FORMAT ROUTINE VIA A BAL R5.  THIS LINKAGE IS INVOKED
*        AS MANY TIMES AS THERE ARE LINES TO BE PRINTED. THE NUMBER OF
*        LINES MUST BE PASSED TO THE FORMIT ROUTINE IN R6. LINKAGE
*        TO FORMIT IS VIA A BAL R3.
*
FORMIT   ST    R4,ABDWORK         PUT ADDR INTO UNPACK AREA
         MVC   ABDWORK+12(4),ABDUPRXT  SAVE PAGE FAULT RECOVERY
         UNPK  ABDWORK(9),ABDWORK(5)   PACK AND
         TR    ABDWORK(8),TBL-240      TRANSLATE IT
         MVC   ABDLINE+18(6),ABDWORK+2 MOVE ONLY 6 DIGITS TO PRINT
         ST    R3,MYWORK3         STORE REG ACROSS BAL
         LTR   R6,R6              IS NUMBER OF LINES 0?
         BZ    FORM20             BRANCH IF SO
         LA    R5,20              GET CONSTANT OF 20
         CR    R6,R5              IS NUMBER OF LINES TOO LARGE?
         BNH   NXTLINE            BRANCH IF OK
FORM20   LA    R6,20              SET NUMBER TO 20
NXTLINE  EQU   *
*
*
         BAL   R5,FORMAT          FORMAT AND PRINT THE CNTRL BLK
         LA    R3,ABDOUTA         IF PAGE FAULT AFTER FIRST LINE
         ST    R3,ABDUPRXT        THEN QUIT PRINTING THIS BLOCK
         BCT   R6,NXTLINE         BRANCH ON NUMBER OF LINES IN R6
FORMEND  L     R3,MYWORK3
         MVC   ABDUPRXT,ABDWORK+12    RESTORE PRIOR PAGE FAULT RECOVERY
         BR    R3                 RETURN TO CALLING ROUTINE
*
* FORMAT ROUTINE ******************************************************
*        THE FORMAT ROUTINE TRANSLATES GIVEN AREAS OF STORAGE INTO
*        CHARACTERS, INCREMENTALLY PLACES THEM INTO THE OUTPUT
*        LINE FOR PRINTING, AND BRANCHES TO THE OUTPUT ROUTINE.
*        ENTRY IS BY A BAL R5, AND RETURN IS BY A BRANCH R5 IN THE
*        OUTPUT ROUTINE.  THE STANDARD LINE LAYOUT OF STORAGE PRINT
*        ROUTINE IS USED.  THE ONLY INPUT NEEDED IS A POINTER IN R4
*        TO THE DATA IN CORE TO BE PRINTED AND A RETURN POINTER IN R5.
*
FORMAT   LA    R14,LAYOUT         ADDRESS OF LAYOUT OF LINE.
FORMATA  LA    R3,ABDLINE         GET ADDR OF OUTPUT BUFFER
         CLI   0(R14),X'FF'       IS THIS A DELIMITER
         BE    ABDOUT             YES, PRINT THE LINE
         SR    R0,R0
         IC    R0,0(R14)          GET LENGTH OF INCREMENT.
         AR    R3,R0              BUMP BUFFER ADDR BY LINE OFFST
         MVC   ABDWORK(4),0(R4)   MOVE FIELD TO WORKAREA
         UNPK  ABDWORK(9),ABDWORK(5)
         TR    ABDWORK(8),TBL-240
         MVC   0(8,R3),ABDWORK    MOVE UNPACKED FIELD TO BUFFER
         LA    R14,1(R14)         POINT TO NEXT CONTROL BYTE.
         LA    R4,4(R4)           POINT TO NEXT RAW DATA.
         B     FORMATA            SEE IF FINISHED YET.
*
ABDOUTA  LA    R6,1               0C4 PRINTING BLOCK, QUIT PRINTING
ABDOUT   L     R15,ADPLPRNT       GET ADDR OF PRINT ROUTINE
         CLI   ABDCC,C' '         CHECK SPACING
         BE    ABDOUTC            SINGLE SPACE
         CLI   ABDCC,C'0'
         BE    ABDOUTB            DOUBLE SPACE
         BALR  R14,R15            ASSUME TRIPLE SPACE - PRINT BLANK
         L     R15,ADPLPRNT
ABDOUTB  BALR  R14,R15            PRINT BLANK LINE
         L     R15,ADPLPRNT
ABDOUTC  L     R14,ADPLBUF        ADDRESS OF SNAP BUFFER
         MVC   0(L'ABDLINE,R14),ABDLINE     LINE TO BUFFER
         BALR  R14,R15            PRINT DATA LINE
         MVI   ABDCC,C' '         CLEAR CARRIAGE CONTROL
         MVC   ABDLINE,ABDCC      & LINE
         BR    R5
         SPACE 6
***********************************************************************
* ESTAE EXIT ROUTINE
         USING *,R15
ESTAERTN CH    R0,=H'12'
         BNE   ESTAE1             SDWA IS PRESENT
         SR    R15,R15            CONTINUE ABEND - I CAN'T DO A THING
         BR    R14                RETURN
         USING SDWA,R1
ESTAE1   STM   R14,R12,12(R13)    SAVE REGISTERS
         CLC   =X'0C4000',SDWAABCC+1
         BNE   SETRP0             NOT 0C4 - CONTINUE ABEND
         CLI   SDWAICD1,X'10'     SEE IF SEGMENT FAULT
         BE    ESTAE2             YES
         CLI   SDWAICD1,X'11'     OR PAGE FAULT
         BNE   SETRP0             NEITHER - CONTINUE ABEND
ESTAE2   L     R2,SDWAGR13
         ICM   R3,15,ABDUPRXT-VABWORK(R2)
         BZ    SETRP0             NO RECOVERY ROUTINE SUPPLIED
SETRP4   SETRP RC=4,RETADDR=(R3),RETREGS=YES,REGS=(14,12)
SETRP0   SETRP RC=0,REGS=(14,12)
         DROP  R15
***********************************************************************
         SPACE 3
SYSU     DC    CL8'SYSUDUMP'
SYSAB    DC    CL8'SYSABEND'
SIXTEEN  DC    H'16'
H125     DC    H'125'             FORCE VALUE FOR LINE LENGTH
DEV2321  DC    X'2005'            MASK FOR 2321
BLANKS   DC    CL8' '
UNK      DC    CL11'UNKNOWN DD*'
DEB      DC    C'DEB'
DCB      DC    C'DCB'
ACB      DC    C'ACB'
ICB      DC    C'ICB'
IOB      DC    C'IOB'
UCB      DC    C'UCB'
DSLBL    DC    C'-DATA MANAGEMENT CONTROL BLOCKS'
IOBERR   DC    C'INVALID IOB ADDRESS'
BADMESS  DC    C'0FORMATING ERR'
BADMESG  DC    C'DCB WAS OVERLAID'
TBL      DC    C'0123456789ABCDEF'
LAYOUT   DC    X'1A232C35414A535CFF'
         SPACE 3
* PARAMETER AREA FROM SNAP
         IHAABDPL
         SPACE 3
         PRINT ON,NOGEN
         IHASDWA
         PRINT ON,NOGEN
         SPACE 3
VABWORK  DSECT ,                  WORK AREA USED BY THIS ROUTINE
REGSAVE  DS    18F
MYWORK2  DS    F                  TIOT PTR
MYWORK3  DS    F                  FORMIT RETURN
*              THE FOLLOWING 2 LINES MUST REMAIN TOGETHER
ABDCC    DS    C                  CARRIAGE CONTROL (ASA)
ABDLINE  DS    CL120              OUTPUT LINE
ABDUPRXT DS    F                  0C4 RECOVERY POINT
ABDWORK  DS    CL16               WORK AREA
VABWLNG  EQU   *-VABWORK
         YREGS ,
         END
