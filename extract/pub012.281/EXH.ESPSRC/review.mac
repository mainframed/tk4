RVUE     TITLE '  R E V I E W   '
         PUNCH ' ORDER REVIEW(P) '                              GP97205
         PUNCH ' SETCODE AC(1)   '                              GP97205
***********************************************************************
*                                                                     *
*         REVIEW - TSO COMMAND FOR EXAMINING A DATA SET               *
*                  ON A 3270 DISPLAY STATION SCREEN                   *
*                                                                     *
***********************************************************************
*
*        WRITTEN BY: BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).
*        INSTALLATION: AIR FORCE DATA SERVICES CENTER, PENTAGON.
*        DATE WRITTEN: JANUARY 19 1981.
*        DATE UPDATED: APRIL 3 1992.
*        ATTRIBUTES: RE-ENTRANT. (AMODE AND RMODE MUST BE 24.)
*        LOCAL MACROS USED: DCS. (DEFINE CONSTANTS FOR SCREEN.)
*        DESCRIPTION:
*         THIS TSO COMMAND DISPLAYS A DATA SET ON A 3270 TERMINAL
*         IN FULLSCREEN MODE.
*
*         LOG OF CHANGES:
*         27MAR81 - ALLOW PFK DEFINITIONS TO BE CHANGED.
*         10JUL81 - IKJRLSA SOON AFTER PARSE. 'VOLUME' KEYWORD.
*                   FIXED BUG OF IKJEFF18 BEING CALLED TWICE.
*                   MISCELLANEOUS INTERNAL RESTRUCTURING OF CODE TO
*                   ALLOW FUTURE CHANGES. OLD CODE HAD USED UP ALL
*                   THREE BASE REGISTERS.
*         14JUL81 - BYPASS IKJEHDEF IF VOL SPECIFIED. ADD 'UNIT' KW.
*                   HEX SUBCOMMAND WITHOUT OPERANDS WILL FLIP-FLOP
*                   BETWEEN HEX ON AND HEX OFF. PFK9 IS NOW HEX
*                   INSTEAD OF HEX ON. PFK12 IS NO LONGER HEX OFF.
*                   SMF SUBCOMMAND WITHOUT OPERANDS WILL FLIP FLOP.
*         20JUL81 - FINDSMF SUBCOMMAND ADDED, FOR SMF RECORD TYPE.
*         29SEP81 - ACCEPT PFK 13-24 CORRESPONDING TO 1-12.
*                   FIX BUG AT CLC FOR REPLY 'FINDSMF'.
*         29JAN82 - SET UP IOPL BEFORE DOING GTSIZE/ERRTERM.
*         29JAN82 - ALLOW MEMBER TO BE SPECIFIED WITH DDNAME, SO USER
*                   CAN DO THINGS LIKE REVIEW SYSPROC(MEMBER) FILE
*                   (AND SHOW DDNAME+NNN IF CONCATENATED).
*                   REPLACE 'POINT' WITH 'FIND' TO SUPPORT
*                   CONCATENATED PDS'S.
*         18MAR82 - CALL REVSMF SUBPROGRAM TO FORMAT SMF DATA.
*  R2.0   22AUG84 - CAN NOW HANDLE ANY DSORG AND KEYS.  REVSMF
*                   SLIGHTLY ENHANCED.  ADDED STAX AND STSIZE MACROS.
*                   PFK SCROLLING MORE LIKE SPF.                GP@SECV
*         11JUN85 - COUPLE OF EXTRA CHARACTERS ADDED TO TRANSLATE TBLS.
*                   TCAM SUPPORT DROPPED.  STSIZE REPLACED BY VTAM
*                   ERASE/WRITE BECAUSE ONLY 80-BYTE LINES SUPPORTED.
*                   CAN BE UP TO 43 LINES, ALSO COLOUR.         GP@SECV
*         11SEP85 - ADD CALL TO REVCMPBF TO COMPRESS TPUT BUFFER.
         EJECT
*         12JAN86 - STSIZE AND ERASE WRITE USED TO PROPERLY HANDLE
*                   NON-80-BYTE MODE.  MODE RESTORED ON EXIT.
*                   SELECTED SMF TYPE ALSO HIGHLIGHTED IN MONOCHROME.
*                   TAPE DATA SETS NOW ALLOWED.                 GP@SECV
*  R3.0   20MAR86 - MEMBER SELECTION LIST (REVPODIR), DIR AND =X ADDED.
*                   STAX FIXED SO NOW FULLY RE-ENTRANT.         GP@SECV
*         24JUN86 - LOAD MODULE ATTRIBUTES, SORT AND ATTENTION HANDLING
*                   ADDED TO REVPODIR.                          GP@P6
*         26JUN86 - FC COMMAND ADDED FOR FIND CHARS WITHOUT FOLDING
*                   TO UPPER CASE.  REVEDIT HOOKS ADDED.        GP@P6
*         27JUN86 - ADDED REVEDIT FOR SPF EDIT OF PDS MEMBERS. AW@IDAPS
*         15AUG86 - REMOVED DEPENDENCE OF "SPF" SCROLLING ON STANDARD
*                   PFKS ('PFALSO' CODE).  ADDED ABL'S CODE FOR TSO
*                   SUBCOMMAND FROM ANOTHER VERSION OF REVIEW.  ADDED
*                   CODE TO SEARCH LPA BEFORE BLDL.  SCROLL LEFT OR
*                   RIGHT TO SHOW FIND TEXT ON SCREEN.  FOUND TEXT
*                   HIGHLIGHTED IN 7-COLOUR MODE.  FINDHEX COMMAND
*                   ADDED.  FINDCHR AN ALIAS OF FC.             GP@P6
*         28OCT86 - ADD LIMITED SUPPORT TO FINDSMF AND SMF FORMATTING
*                   FOR SYS1.MAN% VSAM FILES - ONLY SUPPORT RECORDS
*                   AT CONTROLINTERVAL START.                   GP@P6
*  R4.0   18FEB87 - RESET I/O ERROR AND NO-MEM FLAGS FOR NEW MEMBER.
*                   ADDED "FAST-PATH" FOR FIXED LENGTH RECORD NON-PDS
*                   DISK FILES AND AUTOMATIC TSOEXEC FOR TSO COMMAND.
*                   CHANGE IKJEHDEF TO IKJDFLT FOR F4.          GP@P6
*         03MAR87 - REPOSITION TAPE AFTER END-OF-FILE TO PREVENT
*                   OUT-OF-EXTENT AFTER A POINT MACRO.          GP@P6
*         10MAR87 - INCLUDE A 3480 DISPLAY MESSAGE.             GP@P6
*         19MAR87 - VALIDATE SPF DATES TO AVOID S0C7.           GP@P6
*         20MAR87 - OVERRIDE &SYSSPLV TO '1' SO MVS/XA WILL ASSEMBLE
*                   MVS/370 (AND F4) COMPATIBLE CODE.           GP@P6
*         24MAR87 - AVOID S213-04 ABEND FOR VSAM.               GP@P6
*         16JUL87 - DISPLAY HALFWORD COUNT OF NON-STANDARD DIRECTORY
*                   USER DATA OR SHOW SSI IF TWO HALFWORDS.     GP@P6
*         21JUL87 - VERIFY 7-COLOUR STATUS WITH QUERY.          GP@P6
*         13AUG87 - SUPPORT (REAL) PGM SSI AND PF12 SSI SORT.   GP@P6
*         19AUG87 - ADD ASCII AND EBCDIC COMMANDS.  REVISE B *+10,
*                   EX *-6 CODE.  HANDLE F4 AE PROGRAM ATTRIBUTES.
*                   ADD SUPPORT FOR FACOM 7-COLOUR SCREENS.  ENSURE
*                   HEADINGS ARE WHITE IN 7-COLOUR MODE.  ALLOW
*                   ZEROS AS A VALID FINDHEX ARGUMENT.          GP@P6
         EJECT
*  R5.0   15OCT87 - REMOVE 14 DIGIT LIMIT ON FINDHEX.  SHOW TTRS OF
*                   NON-RECFM U MEMBERS.  REREAD DIRECTORY AFTER SPF
*                   EDIT SAVE.  SHOW SOME DSCB DETAILS AT **END**.
*                   SHOW CURRENT VOLUME SERIAL FOR NON-PDS.  REMOVE
*                   HARD-CODING OF PF3/15.  EXTRACT VSAM LOGICAL
*                   RECORDS.  ADD 'DATA' KEYWORD.  ALLOW 'HALF'/'H'
*                   AND 'PAGE'/'P' AS VALID SCROLL AMOUNTS.  SCROLL
*                   AMOUNT EFFECTIVE IN ALL FOUR DIRECTIONS.  KEEP
*                   SAME SCROLL VALUE FOR NEW MEMBERS.  AVOID S213-20
*                   (LIKELY FOR ICF VSAM).  REPORT % INTO ALLOC'D SPACE
*                   ON ** BOTTOM ** LINE IF VSAM S/W EOF IS READ.
*                   COPIED ABL'S 'HELP' AND UPDATED 'DEBUG' CODE FROM
*                   HEL.  REDUCED CHKPT ENTRIES FROM 20 BYTES TO 8
*                   BYTES BY NOT STORING DEBLOCKING INFO (NOT NEEDED
*                   SINCE ONLY BLOCKS STARTING WITH THE BEGINNING OF
*                   A LOGICAL RECORD ARE CHECKPOINTED).  DELETE 'KEYB'
*                   COMMAND, ADD 'ON' AND 'OFF' KEYWORDS TO 'FULL'.
*                   ADD '?' SUBCOMMAND.  DON'T REPORT BLANKS AS
*                   INVALID COMMAND.  ADD RECALL COMMAND CODE.
*                   CHANGE PFK4 DEFAULT TO 'RECALL'.  ADD IMS
*                   USERDATA HANDLING TO REVPODIR.              GP@P6
*         29OCT87 - ADD REVSORTE CSECT.                         GP@P6
*  R6.0   18APR88 - ADD VVDS LOOK-UP FOR ICF VSAM COMPONENTS.  ADJUST
*                   MAXIMUM RECORD SIZE ACCORDING TO VVDS CONTENTS.
*                   HANDLE MULTI-BLOCK CI - GET CISIZE FROM VVDS.
*                   SHOW NUMBER OF LOGICAL RECORDS COUNTER FROM VVDS
*                   INSTEAD OF COLUMN NUMBERS ON TOP LINE.  HIGHLIGHT
*                   FIRST AND LAST COLUMNS OF RECORD KEYS WITH A '×'
*                   IN CHARACTER MODE (HEX OFF) ONLY, WHEN KNOWN, ON
*                   THE HEADING "RULER" LINE.  REPORT VVDS FREESPACE
*                   BYTE COUNT ON "BOTTOM OF DATA" LINE.  SUPPRESS
*                   IMBEDDED INDEX BLOCKS WHEN DETECTED.  SUPPRESS
*                   '(NULL)' DISPLAY ON EMPTY CI IF NOT YET REACHED
*                   RECORD COUNT FROM VVDS.  SIMULATE SOFTWARE EOF
*                   UPON EMPTY CI AT EXACTLY THIS RECORD COUNT.
*                   REMOVE 'ISPLINK' FROM LOAD MODULE - LOAD IT AT
*                   RUN TIME IF REQUIRED.  HANDLE PDF EDIT RETURN
*                   CODES 14 AND 16.  TREAT I/O ERROR AS END-OF-FILE,
*                   SHOWING ERROR MESSAGE ON BOTTOM LINE.  SUPPRESS
*                   'TSOEXEC' SUBTASKING ON RECURSIVE 'REVIEW' TO
*                   MAINTAIN ISPF(/PDF) EDIT AVAILABILITY.  ADDED THE
*                   'NEWTOP' COMMAND FOR LOOKING PAST I/O ERRORS.  LET
*                   'DATA' SUPPRESS "FASTPATH".  HANDLE DUP CHARACTER
*                   AS RECALL (USER REQUEST).                   GP@P6
*         19OCT88 - FIXED CAUSE OF DUPLICATE CHECKPOINT ENTRIES.
*                   USE SUPERSCRIPT FOR SMF TYPE 30 SUB-TYPES.
*                   LET 'DATA' REVIEW PDS DIRECTORY ASIS.
*                   MAKE 'SYSALLDA' DEFAULT UNIT NAME WITH VOLUME.
*                   ADD REVDIV CSECT.                           GP@P6
         EJECT
*  R7.0   21JUN89 - USE DFP 2.3 (MVS/SP2.2) AND LATER ARL RDJFCB EXIT
*                   TO FETCH ALL DATA SET NAMES FOR CONCATENATED FILES.
*                   BELL NOW SOUNDED FOR ERROR MESSAGES.  IDENTICAL
*                   CONSECUTIVE RECALL STACK ENTRIES ARE NOW
*                   SUPPRESSED.  USE CURSOR TO INDICATE FOUND DATA
*                   AS WELL AS REVERSE VIDEO.  ADD EDIT SUPPORT FOR
*                   CONCATENATED MEMBERS.  ADD BROWSE SUPPORT FOR
*                   MEMBERS SELECTED WITH A 'B'.  ADD THE 'CSR'
*                   SCROLLING AMOUNT.  DISPLAY LINK EDIT DATE ON IDR
*                   LINE WHEN REVIEWING A LOAD MODULE.  SUPPRESS USE
*                   OF TSOEXEC WHEN APF AUTHORIZED.  HANDLE DFP VSAM
*                   WHEN PHYSICAL RECORDS ARE LONGER THAN THE 4096
*                   BYTES INDICATED IN DS1BLKL IN THE VTOC.     GP@P6
*         02AUG89 - REDUCE EXPOSURE TO HDP2230 AND HDP3300 BUGS IN
*                   SVC 64 (RDJFCB) BY NOT USING THE ARL RDJFCB DCB
*                   EXIT FOR UNCONCATENATED FILES, AND ONLY USING IT
*                   UNDER MVS/XA WHEN THE JFCBS RESIDE ABOVE THE 16MB
*                   LINE.  FURTHER, ARL SUPPORT IS NOW SIMULATED BY
*                   'REVIEW' FOR CONCATENATED FILES WHENEVER ARL
*                   EXIT USAGE IS NOT ATTEMPTED.                GP@P6
*  R8.0   12OCT89 - MODIFY SYNADSW CHECKING SO DATA UP TO AN I/O
*                   ERROR CAN CONTINUE TO BE ACCESSED.          GP@P6
*         23NOV89 - ADD 'KEYS' ALIAS OF '?' (USER REQUEST) AND
*                   MAKE PF12 'RECALL' TO INCREASE ISPF SIMILARITY.
*                   PF4 IS NOW 'SMF'.                           GP@P6
*         21DEC89 - IMPROVED RECURSIVE 'REVIEW' RECOGNITION BY
*                   ALSO EXAMINING ALIASES.  FURTHER REDUCED SCREEN
*                   I/O BY OMITTING REDUNDANT COLOUR ORDERS.  NON-DATA
*                   INFO IN BRACKETS IS NOW SHOWN IN TURQUOISE.  LKED
*                   DATE MADE HIGH-INTENSITY FOR MONOCHROME.  DELETE
*                   'EBCDIC' AND ADD 'ON' AND 'OFF' OPERANDS TO
*                   'ASCII'.  DUE TO PSYCHOLOGICAL PRESSURE FROM SAM
*                   GOLOB, PF1 IS NOW 'HEL'.  PF2 IS NOW 'ASCII'.
*                   HEX MODE DATA IS NOW BLUE WITH RULER ETC. NOW
*                   TURQUOISE.  WHEN REVIEWING PDS MEMBERS FROM THE
*                   'PDS' COMMAND, THE STAX IS DELETED WHEN INPUT IS
*                   NOT INHIBITED IN ORDER TO ALLOW 'PDS' TO TERMINATE
*                   REVIEWS OF LARGE MEMBER GROUPS (PROBLEM REPORTED
*                   BY SAM GOLOB).  SHOW ASM2 UPDATE DATE ON **END**
*                   LINE IF STORED IN DS1DSSN (NON-LOADLIBS ONLY).
*                   ENSURE IBM SA CODE USED FOR PC AND PS2 3270
*                   EMULATION UNDER FUJITSU'S F4 MSP.  CALL REVSORTE
*                   TO SPEED UP COLLATING SEQUENCE ("NAME") SORT FOR
*                   CONCATENATED PDS FILES.  WHEN MEMBERS SORTED IN
*                   SPFD USERID ORDER AND LOCATE STRING IS NOT AN
*                   EXACT MEMBER NAME THEN USE LOCATE STRING AS A
*                   USERID (PREFIX) FOR POSITIONING.            GP@P6
         EJECT
*         09FEB90   FIX ABEND FLAG OFFSET IN DCB ABEND EXIT.    GP@P6
*         28FEB90   KEEP DIRECTORY MEMBER LIST WHEN REVIEWING A
*                   MEMBER (SELECTED WITH AN 'S') SO DIRECTORY DOES
*                   NOT HAVE TO BE RE-READ (AND SORTED) WHEN END-ING
*                   BACK TO THE MEMBER LIST.  DO NOT CLOSE BPAM FILE
*                   WHEN END-ING OR DIR-ING FROM REVIEWING A MEMBER'S
*                   DATA BACK TO THE MEMBER LIST SO SUBSEQUENT REVIEWS
*                   OF MEMBERS IN THE SAME REVIEW SESSION DO NOT
*                   INVOLVE OPEN/CLOSE OVERHEAD.  ADD DS1LSTAR CHANGE
*                   DETECTION TO TRIGGER A DIRECTORY MEMBER LIST
*                   REFRESH.  HANDLE "REGION FULL" CONDITION CORRECTLY
*                   FOR CONCATENATED PDS'S.  ADD '=REFRESH' MEMBER
*                   SELECTION LIST PRIMARY COMMAND TO REFRESH LIST
*                   WITH LATEST DATA FROM DISK.  EXTERNALIZE ALL
*                   INTER-CSECT REFERENCES.  ADD REVOFFLD CSECT FOR
*                   PDS OFFLOAD TO IEBUPDTE-LIKE SEQUENTIAL FILE.
*                   ADD '=OFFLOAD' MEMBER SELECTION LIST PRIMARY
*                   COMMAND AND 'O' AND 'R' MEMBER SELECTION CODES
*                   IN SUPPORT OF OFFLOAD FUNCTION.  MEMBER LIST
*                   SCROLLING NOW USES SCROLL AMOUNT.           GP@P6
*  R9.0   04APR90   LOAD SCROLL OFFSET INTO R0 BEFORE CALLING
*                   REVSMF, SO REVSMF CAN PROCESS LEFT AND RIGHT
*                   SCROLLING.  IF CISIZE IS 32K THEN USE 16K FOR
*                   BLKSIZE INSTEAD OF 32K (WHICH IS INVALID).
*                   CHANGE IMBEDDED SEQUENCE SET DETECTION TO SKIP
*                   THE FIRST TRACK BUT REMEMBER SIZE OF BLOCKS ON
*                   THE FIRST TRACK, AND THEN SKIP ANY TRACKS WHICH
*                   HAVE THE SAME SIZE BLOCKS.                  GP@P6
*         25JUN90   CORRECTED CONCATENATED FILE COUNT WHEN NOT USING
*                   ARL JFCB EXIT (WAS INCLUDING FIRST DATA SET OF
*                   NEXT DD).  ADD 3390 SUPPORT TO "FASTPATH".  APF
*                   TEST FOR VSAM NOW ALSO FORCED FOR MVS/XA.  RESET
*                   F668X CHARACTER ATTRS UPON TERMINATION.     GP@P6
         EJECT
*  R10.0  23OCT90   FORCE DISPLAY OF PHYSICAL BLOCKS FOR LINEAR VSAM
*                   (MAX LRECL=0).  HANDLE QUERY RESPONSE SPREAD OVER
*                   TWO TGETS (NON-GRAPHICS 3472 AFTER A PRINTER
*                   PORT).  IMPROVE DETECTION OF AE LKED IN REVPODIR.
*                   INCREASE MAX DIR GETMAIN FROM 3/8THS TO HALF A
*                   MEGABYTE.  REORGANIZE PHASE 2 FOR BASE REGISTER
*                   CONSTRAINT RELIEF.  SHOW LAST BLOCK ADDRESS ON
*                   ** BOTTOM OF DATA ** LINE.  ALLOW HEX DIGIT
*                   OPERAND ON COLOUR COMMAND.  INHERIT COLOURS, PFKS
*                   AND RECALL STACK WITH RECURSIVE 'REVIEW'.  SHOW
*                   PHYSICAL RELATIVE ADDRESS FOR EACH RECORD WHEN
*                   SCROLLED RIGHT PASSED MAXIMUM RECORD LENGTH.
*                   SUPPRESS TSOEXEC SUBTASKING WHEN 'TSO' REQUESTS A
*                   COMMAND BEGINNING WITH 'PDS' TO ALLOW ISPF
*                   FUNCTIONS UNDER PDS AND PDS/E.  FOR VARIABLE
*                   LENGTH RECORDS, HIGHLIGHT WHEN THE RECORD LENGTH
*                   IS BIGGER THAN THE LRECL AND FOR NON-SPANNED FILES
*                   SHOW THE LAST HALF OF THE RDW IF NOT NULL.  MAKE
*                   PFK VALUES PREFIX TYPED IN DATA.  REMOVE 'PFALSO'
*                   CODE.  ADD "DIV" TRIMMING.  SUPPORT 24 DIFFERENT
*                   PROGRAM FUNCTION KEYS.  DISPLAY DATA BYTE COUNT
*                   ON ** BOTTOM OF DATA ** LINE.  PERFORM CONSERVATIVE
*                   TRIMMING FOR DIV AREA BASED ON DISK DATA SET SIZE.
*                   ADD PROFILE (ISPPROF($$REVIEW)) TO SAVE PFK VALUES,
*                   COLOURS AND SCROLLING AMOUNT.  FORMAT TAPE LABEL
*                   INFORMATION AUTOMATICALLY WHEN REVIEWING TAPE
*                   LABELS.  ADD THE 'CAN'/'CANCEL' COMMAND.    GP@P6
*         19NOV90   ALLOW AN UNQUOTED ASTERISK TO MEAN THE PREVIOUS
*                   SEARCH STRING FOR FIND/FINDCHR/FINDHEX.  SUPPORT
*                   THE 'FIRST'/'NEXT'/'PREV'/'LAST' OPERANDS ON ALL
*                   FIND SUBCOMMANDS.  ADD VARIABLE LENGTH DATA
*                   VALIDITY CHECKING AND SIMULATE E-O-F FROM I/O ERROR
*                   IF INVALID.  ADD THE '=EDITMEM' MEMBER LIST COMMAND
*                   SO THAT NEW MEMBERS CAN BE EDITED.  DISABLE
*                   "FASTPATH" AFTER ANY VALID 'NEWTOP' SUBCOMMAND TO
*                   AVOID I/O ERRORS.  MAKE LRECL-4 THE RIGHT-MOST
*                   COLUMN FOR VARIABLE LENGTH RECORD FILES.    GP@P6
*         06DEC90   FIX SMALL POTENTIAL FOR S0C4 IN REVDIV.  MAKE
*                   SCROLLING DOWN WITH ** BOTTOM OF DATA ** LINE ON
*                   SCREEN MORE LIKE ISPF BROWSE.  ADDED SOME CODE FOR
*                   ALLOCATING SUBSYSTEM DATA SETS WHICH MAY BE USABLE
*                   WITH PACKAGES LIKE LIBRARIAN AND/OR PANVALET.  (I
*                   DO NOT HAVE THESE PRODUCTS TO TEST IT.)  FINALLY
*                   FIXED SEQUENCE SET HANDLING BY SKIPPING OVER THE
*                   FIRST TRACK OF EVERY CONTROLAREA FOR VSAM FILES
*                   WITH IMBED.  BLOCKSIZE IS NO LONGER DERIVED FROM
*                   CISIZE BUT IS READ FROM THE VVDS.           GP@P6
*         18DEC90   FIX S0C4 ABEND IN REVDIV WHEN FIRST DATA-MODE
*                   REVIEW WAS FOR AN EMPTY OR NON-EXISTENT MEMBER
*                   OF A PDS.                                   GP@P6
         EJECT
*  R11.0  15JAN91   DO NOT TREAT DCBTRTCH AS DCBKEYLE FOR TAPES BUT
*                   ASSUME ZERO KEYLENGTH FOR TAPE FILES.  (THIS BUG
*                   CAUSED ONLY FIRST BLOCK'S DATA TO BE SHOWN FOR
*                   SOME VARIABLE LENGTH RECORD TAPE FILES.)  A TAPE
*                   INDICATOR IS SHOWN ABOVE THE "RULER" LINE (WHEN
*                   SCROLLED LEFT MAX) SHOWING DENSITY, COMPACTION
*                   OR JUST WHETHER IT IS A 3480 OR TAPE DEPENDING
*                   UPON OS LEVEL.  A REVIEW OF VSAM WILL BE REJECTED
*                   WHEN NOT APF AUTHORIZED IF THE OS IS MVS/XA OR
*                   LATER AND THE DFP IS LATER THAN 2.3.0.      GP@P6
*         19FEB91   FIX FIND BUGS (DETECTION AND SCROLLING) FOR
*                   VSAM (USUALLY DATA COMPONENT WITH IMBED).   GP@P6
*         26FEB91   HANDLE OBTAIN FAILURE FOR VSAM DATA COMPONENT
*                   WITH ALTERNATE INDEX.                       GP@P6
*         13MAR91   FINALLY FIX THE MYSTERIOUS QUERY DATA OVER
*                   TWO TGETS WITH NOEDIT=YES ON STFSMODE.
*                   (MOST OF THE NOW SUPERFLUOUS CODE CHECKING FOR
*                   BAD QUERY SUB-FIELDS REMAINS JUST IN CASE
*                   BAD DATA IS RETURNED FOR SOME REASON.)      GP@P6
*         26JUN91   CORRECT TRACK SIZE FOR 2305-2 IN DISKTABL.
*                   CHANGE EYE-CATCHERS FROM 10 TO 11.
*                   AVOID SB00 ABEND ON READ OF $$REVIEW MEMBER IN
*                   ISPPROF WHEN ISPPROF HAS BIG (IE. > 3760) BLKSIZE.
*                   TREAT BAD RESIDUAL DATA IN VSAM COMPONENT AS
*                   E-O-F, THUS AVOIDING A S0C4 ABEND.
*                   DO NOT INCLUDE VVDS LOOK-UP BYTES IN BYTE COUNT
*                   OF DISPLAYABLE DATA FOR VSAM ON ** BOTTOM ** LINE.
*                   DO NOT TREAT SINGLE TRACK PDSE AS OS/CATALOG.
*                   IGNORE PDS DIRECTORY BLOCK IF LESS THAN 14 BYTES
*                   (MINIMUM ENTRY SIZE) ARE USED BECAUSE QSAM ON
*                   PDSE DIRECTORY SEEMS TO GIVE BAD BLOCK BEFORE
*                   THE FIRST GOOD BLOCK IS PRESENTED BY 2ND GET.
*                   FLAG PDSE ON **END** MEMBER LIST LINE.
*                   IMPROVE NON-FUJITSU TERMINAL RECOGNITION.
*                   USE GTTERM MF=E TO FILL IN GTTERM PARAMETER LIST.
*                   ALLOW REVIEW OF PDSE WHEN OVER 16 EXTENTS.  GP@P6
*         25SEP91   AVOID S0C4 WHEN VOL1 IS THE ONLY TAPE LABEL.
*                   SIMULATE PGSER R,RELEASE UNDER MSP/EXA.
*                   ADD 'SUB'/'SUBMIT' SUBCOMMANDS.             GP@P6
*         04DEC91   RESET ATTN FLAG IN REVEDIT BEFORE RETURN IN CASE
*                   THERE WAS A PA1 IN EDIT WHICH CAUSED REVIEW TO
*                   ONLY SHOW FIRST MEMBER IN MEMBER LIST.
*                   ALLOW NEWTOP WITH TTR OPERAND TO ACCESS PDS DATA
*                   EVEN IF THERE ARE NO MEMBERS.  (BEFORE NEWTOP
*                   ISSUE "REV DSNAME(FRED)" FROM TSO.)         GP@P6
         EJECT
*  R12.0  05FEB92   ALLOW ANY DFP VERSION LESS THAN VERSION 3
*                   TO READ VSAM WITHOUT APF AUTHORIZATION.
*         05MAR92   ALTERED "FASTPATH" ACTIVATION LOGIC IF RECFM=FB
*                   - SEE COMMENTS AFTER LABEL 'OBTX' FOR DETAILS.
*                   UPDATE PHASE 1 MESSAGES FOR "USER FRIENDLINESS"
*                   SO IT IS OBVIOUS THAT THEY ARE ISSUED BY "REVIEW".
*                   (USER ISSUED REVIEW FOR MIGRATED VSAM DATA SET
*                   AND THOUGHT THAT THE MESSAGES INDICATED THAT
*                   HSM HAD TO BE APF AUTHORIZED!?!)            GP@P6
*         11MAR92   MAKE 'SYSALLDA' UNIT NAME FOR VVDS LOOKUP.  GP@P6
*         03APR92   CHANGE 'FINDSMF'/'FS' SEARCH AND HIGHLIGHTING TO
*                   HANDLE OPERAND GREATER THAN 255, IN WHICH CASE
*                   THE LAST DIGIT IS TAKEN TO BE THE SUBTYPE.  GP@P6
*
***********************************************************************
         EJECT
***********************************************************************
*
*        NOTES.
*         KNOWN BUGS.
*
*          NON-PARTITIONED DISK FILES WITH FIXED-LENGTH RECORDS AND
*          NON-STANDARD BLOCKING (IMBEDDED SHORT OR MISSING BLOCKS)
*          MAY BE DISPLAYED WITH INCORRECT LINE COUNTS.  USING THE
*          'FIND' SUBCOMMAND FROM THE TOP OR SCROLLING DOWN BY A
*          PAGE OR LESS AT A TIME WILL ENSURE A CORRECT LINE COUNT,
*          OR JUST ISSUE 'NEWTOP' AND PROCEED AS NORMAL.
*
*          NOTE THAT IT IS POSSIBLE WITH FIXED-LENGTH RECORD NON-
*          PARTITIONED DISK FILES TO REVIEW PAST I/O ERRORS (OR, IF
*          DS1LSTAR IN THE VTOC IS ZAPPED, PAST END-OF-FILE MARKS)
*          WITH 'LIST', 'DOWN' AND 'BOTTOM' AS LONG AS NO ATTEMPT IS
*          MADE TO READ THE RECORD(S) CAUSING THE ERRORS.
*
*          SCROLLING UP ON OTHER THAN THE FIRST VOLUME OF A MULTI-
*          VOLUME DATA SET MAY NOT WORK PROPERLY.  IN ANY EVENT,
*          SCROLLING UP TO A PREVIOUS VOLUME IS NOT PERFORMED.  'TOP'
*          WILL DISPLAY THE FIRST RECORDS OF THE CURRENT VOLUME.
*          PROCESSING MAY BE SLOW AFTER END-OF-FILE IS ENCOUNTERED
*          ON TAPE BECAUSE IT MUST BE REWOUND TO AVOID I/O ERRORS.
*
*          WHEN INVOKED FROM A SCREEN THAT HAS THE VTAM QUERY BIT ON
*          'REVIEW' WILL ISSUE A READ PARTITION (QUERY) STRUCTURED
*          FIELD AND VERIFY SUPPORT OF AT LEAST NEUTRAL AND SEVEN
*          OTHER COLOURS AND THREE EXTENDED HIGHLIGHTINGS BEFORE
*          ENABLING 7-COLOUR MODE AUTOMATICALLY.  THE 'COLOUR' COMMAND
*          MAY BE USED SAFELY WITH "MODERN" MONOCHROME SCREENS SUCH AS
*          THE 3180 AND 3192-D TO ACTIVATE EXTENDED HIGHLIGHTING.
*
*          SPANNED RECORDS LONGER THAN 32K WILL NOT BE HANDLED
*          CORRECTLY.  LRECL=X IS NOT SUPPORTED BY 'REVIEW'.  'REVIEW'
*          ASSUMES ANY VSAM COMPONENT MAY HAVE SPANNED RECORDS UP TO
*          32760 BYTES LONG.  (KSDS) LOGICAL RECORDS WITH SEGMENTS
*          PHYSICALLY OUT OF ORDER WILL NOT BE ASSEMBLED CORRECTLY.
*          VSAM LOGICAL RECORD PROCESSING ASSUMES CONTROLINTERVALSIZE
*          EQUALS PHYSICAL BLOCKSIZE, WHICH IS NOT ALWAYS TRUE,
*          ALTHOUGH THIS MAY NOW BE HANDLED CORRECTLY IN MOST CASES
*          AS A RESULT OF VVDS LOOK-UP PROCESSING.
*
*          IF THE TSO SERVICE ROUTINE 'IKJEFTSR' (WITH ITS FRONT-END
*          'TSOEXEC') IS NOT INSTALLED THEN COMMANDS INVOKED BY THE
*          'TSO' SUBCOMMAND WHICH DO NOT RESTORE REGISTERS CORRECTLY
*          WILL PROBABLY CAUSE 'REVIEW' TO ABEND.  'TSOEXEC' WILL NOT
*          BE USED IN AN APF AUTHORIZED ENVIRONMENT IN ORDER TO AVOID
*          SERVICE ROUTINE RETURN CODE 20 WHEN ISSUING AN UNAUTHORIZED
*          TSO COMMAND FROM WITHIN 'REVIEW'.  UNDER DFP VERSION 3 AN
*          APF AUTHORIZED ENVIRONMENT IS REQUIRED TO REVIEW VSAM
*          COMPONENTS.
*
***********************************************************************
         EJECT
***********************************************************************
*
*         THE FOLLOWING HAVE CONTRIBUTED IMPROVEMENTS TO THIS PROGRAM:
*
*          ABL - A. BRUCE LELAND
*          GP  - GREG PRICE
*          AW  - TONY WATSON
*
*
*         IF YOU ENCOUNTER ANY PROBLEMS WITH THIS COMMAND THEN DON'T
*         BE SURPRISED.  YOU MAY CHOOSE TO
*          A) FIX IT                   -OR-
*          B) IGNORE IT                -OR-
*          C) SEND DETAILS TO ME SO THAT I CAN
*             A) FIX IT                   -OR-
*             B) IGNORE IT                -OR-
*             C) NOT BE SURPRISED.
*
*      GREG PRICE OF PRYCROFT SIX PTY LTD
*         (FORMERLY OF THE STATE ELECTRICITY COMMISSION OF VICTORIA)
*
*         YOU MAY CONTACT ME VIA:
*
*         DAVID PRICE
*         SENIOR SYSTEMS PROGRAMMER
*         INFORMATION SYSTEMS UTILITY
*         STATE ELECTRICITY COMMISSION OF VICTORIA
*         MONASH HOUSE
*         15 WILLIAM STREET
*         MELBOURNE
*         VICTORIA  3000
*         AUSTRALIA                PHONE (03) 69 13191
*
***********************************************************************
         EJECT
***********************************************************************
*
*         SYNTAX - REVIEW DSNAME {VOLUME(..) UNIT(..)} {QUICK} {DATA}
*                                         {SUBSYS(..)}
*          OR      REVIEW DDNAME FILE
*
*         THE SCREEN WILL NORMALLY CONTAIN 20 RECORDS, ONE PER LINE,
*         80 CHARACTERS PER LINE.  TO DISPLAY RECORDS LONGER THAN 80
*         BYTES, THERE IS A 'RIGHT' SUBCOMMAND WHICH CAUSES DATA TO
*         THE RIGHT OF THE DATA ON THE SCREEN TO BE DISPLAYED.
*         THE 'LEFT' SUBCOMMAND CAN THEN BE USED TO DISPLAY DATA
*         BACK TOWARDS THE FRONT OF THE RECORD.
*
*         SUBCOMMANDS -
*         UP       - DISPLAY RECORDS ABOVE THOSE ON THE SCREEN
*         DOWN     - DISPLAY RECORDS BELOW THOSE ON THE SCREEN
*         TOP      - DISPLAY THE FIRST RECORDS
*         BOTTOM   - DISPLAY THE LAST RECORDS
*         RIGHT    - DISPLAY DATA TO THE RIGHT
*         LEFT     - DISPLAY DATA TO THE LEFT
*         LIST     - DISPLAY A SPECIFIED RECORD NUMBER
*         FIND     - SEARCH FORWARD FOR A SPECIFIED STRING
*         FINDCHR  - SEARCH FORWARD FOR A SPECIFIED CHARACTER STRING
*         FINDHEX  - SEARCH FORWARD FOR A SPECIFIED HEXADECIMAL STRING
*         FINDSMF  - SEARCH FORWARD FOR A SPECIFIED SMF RECORD TYPE
*         HELP     - DISPLAY PFK SETTINGS AND 'REVIEW' HELP INFORMATION
*         FULL     - USE FULL EBCDIC OR JUST KEYBOARD CHARS FOR DISPLAY
*         ASCII    - SWITCH TRANSLATION OF DATA INTO EBCDIC ON/OFF
*         RECALL   - RECALL COMMANDS PREVIOUSLY TYPED IN
*         HEX ON   - DISPLAY DATA IN HEXADECIMAL FORMAT
*         HEX OFF  - TURN OFF HEXADECIMAL FORMATTING
*         HEX      - SWITCH HEXADECIMAL FORMATTING ON/OFF
*         COLOR ON - DISPLAY DATA IN 7-COLOUR MODE
*         COLOR OFF- TURN OFF 7-COLOUR DISPLAY MODE
*         COLOR    - SWITCH 7-COLOUR DISPLAY ON/OFF
*         PFKNN    - CHANGE DEFINITION OF PF KEY NN
*         SMF ON   - DISPLAY SMF RECORDS WITH TIME AND DATE FORMATTED
*         SMF OFF  - TURN OFF SMF FORMATTING
*         SMF      - SWITCH SMF FORMATTING ON/OFF
*         NEWTOP   - SPECIFY ARBITRARY TOP-OF-DATA ADDRESS
*         MEMBER   - DISPLAY A DIFFERENT MEMBER OF THE SAME PDS
*         DIR      - DISPLAY THE PDS DIRECTORY LIST
*         TSO      - ISSUE A TSO COMMAND WHILE REVIEWING A FILE
*         END      - END THE COMMAND
*         EXIT     - END THE COMMAND BYPASSING MEMBER LIST
*
*         WHEN 'UP' OR 'DOWN' DOES NOT SPECIFY HOW FAR UP OR DOWN,
*         THE 'SCROLL' VALUE IS USED.  THIS VALUE IS ALWAYS DISPLAYED
*         NEAR THE TOP OF THE SCREEN AND CAN BE CHANGED BY MOVING
*         THE CURSOR OVER THE VALUE AND TYPING IN A NEW VALUE.
*         THE NEW VALUE WILL REMAIN IN EFFECT UNTIL THE COMMAND
*         ENDS OR UNTIL YOU CHANGE IT AGAIN.
*
***********************************************************************
         EJECT
***********************************************************************
*
*         PROGRAM FUNCTION KEYS
*
*         SOME OF THE SUBCOMMANDS DO NOT HAVE TO BE TYPED IN
*         IF THE TERMINAL IS EQUIPPED WITH PROGRAM FUNCTION KEYS.
*         FOR EXAMPLE, HITTING KEY 'PF8' IS EQUIVALENT TO
*         TYPING IN 'DOWN' AND HITTING THE 'ENTER' KEY.
*
*         HERE ARE THE MEANINGS ASSIGNED TO EACH PF KEY.
*
*         ----------------------------------------------------
*         I                I                I                I
*         I     PF1/13     I     PF2/14     I     PF3/15     I
*         I                I                I                I
*         I      HEL       I      ASCII     I      END       I
*         I                I                I                I
*         ----------------------------------------------------
*         I                I                I                I
*         I     PF4/16     I     PF5/17     I     PF6/18     I
*         I                I                I                I
*         I      SMF       I      FIND      I      FULL      I
*         I                I                I                I
*         ----------------------------------------------------
*         I                I                I                I
*         I     PF7/19     I     PF8/20     I     PF9/21     I
*         I                I                I                I
*         I      UP        I      DOWN      I      HEX       I
*         I                I                I                I
*         ----------------------------------------------------
*         I                I                I                I
*         I     PF10/22    I     PF11/23    I     PF12/24    I
*         I                I                I                I
*         I      LEFT      I      RIGHT     I     RECALL     I
*         I                I                I                I
*         ----------------------------------------------------
*
***********************************************************************
         EJECT
***********************************************************************
*
*         IF THE SECOND OPERAND IS 'FILE', THAT MEANS THE
*         FIRST OPERAND IS NOT A DSNAME BUT A DDNAME.
*
*         IF AN UNQUALIFIED DATA SET NAME IS ENTERED, THE
*         CATALOG MUST BE READ TWICE, ONCE TO APPEND A
*         TRAILING QUALIFIER IF NECESSARY, AND AGAIN DURING
*         ALLOCATION. THE USER CAN ELIMINATE THE FIRST BY USING
*         THE FULLY QUALIFIED NAME, PREFIX AND ALL, IN QUOTES,
*         OR BY ENTERING ALL BUT THE PREFIX, WITHOUT QUOTES,
*         PLUS THE KEYWORD 'Q'. THE LATTER IS MUCH SIMPLER
*         AND GIVES THE SAME PERFORMANCE IMPROVEMENT AS A
*         FULLY QUALIFIED NAME.
*
*         THE 'FILE' KEYWORD IS USEFUL FOR LOOKING AT TEMPORARY
*         DATA SETS.  IT TELLS THE COMMAND TO TREAT THE FIRST
*         OPERAND AS A FILENAME (DDNAME) INSTEAD OF A DSNAME.
*         WHATEVER DATA SET IS CURRENTLY ALLOCATED TO THE
*         FILENAME WILL BE DISPLAYED (AND QUICKLY, BECAUSE
*         THE COMMAND DOESN'T HAVE TO ALLOCATE ANYTHING).
*
*         THE 'DATA' KEYWORD INDICATES THAT INTERPRETATION OF
*         VSAM CONTROLINTERVAL INFORMATION FOR EXTRACTING
*         LOGICAL RECORDS IS NOT TO BE ATTEMPTED EVEN IF THE
*         DATA SET BEING REVIEWED IS A VSAM COMPONENT.  ITS
*         SPECIFICATION ALSO SUPPRESSES DIRECT ACCESS LOGIC
*         FOR FIXED-LENGTH RECORD NON-PARTITIONED DISK FILES.
*         FOR PARTITIONED DATA SETS ITS SPECIFICATION MEANS
*         THAT THE DATA SET'S DIRECTORY WILL BE REVIEWED AS A
*         SEQUENTIAL FILE WITHOUT ACCESS TO INDIVIDUAL MEMBERS.
*
*         THE 'SUBSYS' KEYWORD INDICATES THAT A SUBSYSTEM DATA
*         SET IS TO BE REVIEWED.  THE SPECIFIED SUBSYSTEM MUST
*         BE ACTIVE AND SUPPORT DATA SET ALLOCATION.  'REVVSAM'
*         MAY PROVIDE A SUITABLE VEHICLE FOR APF AUTHORIZATION.
*         'SUBSYS' IS IGNORED IF 'VOLUME' IS SPECIFIED.
*
***********************************************************************
         EJECT
         MACRO
&NAME    DCS
.**********************************************************************
.*                                                                    *
.*        DCS  -  DEFINE CONSTANT FOR SCREEN                          *
.*                                                                    *
.*        WRITTEN BY BILL GODFREY                                     *
.*        PLANNING RESEARCH CORPORATION                               *
.*        PRC COMPUTER CENTER, MCLEAN VA 22101                        *
.*        DATE WRITTEN: JANUARY 8 1981.                               *
.*        DATE UPDATED: MARCH 18 1982. (ROW AND COL IN PARENS)        *
.*        GP@P6          JULY 25 1986. (EXTENDED ATTRS, MEDIUM INTENS)*
.*        GP@P6     SEPTEMBER 23 1986. (ESCAPES, WRITES, RA, MFA, MF) *
.*        GP@P6        AUGUST 24 1987. (EAU, WSF, RB, RM, RMA)        *
.*        GP@P6       OCTOBER 18 1990. (ALLOW ROW NUMBER UP TO 43)    *
.*                                                                    *
.*        THIS MACRO IS USED FOR CODING A FULLSCREEN 3270 DISPLAY.    *
.*                                                                    *
.*        SAMPLE                                                      *
.*           DCS    AL1(WCC),SBA,(1,1),RTA,(7,1),X'00',IC             *
.*                                                                    *
.*        IT SIMPLIFIES THE CODING OF A SCREEN IN THE FOLLOWING WAYS. *
.*        .  BUFFER ADDRESSES ARE SPECIFIED AS ROW AND COLUMN NUM-    *
.*           BER.  THE MACRO TRANSLATES THEM INTO THE 3270 CODE.      *
.*        .  ORDERS ARE SPECIFIED BY NAME, SUCH AS 'SBA' AND 'SF',    *
.*           SO YOU DON'T HAVE TO KNOW THE HEX CODES FOR THEM,        *
.*        .  COMMONLY USED ATTRIBUTE BYTES ARE SPECIFIED BY NAME      *
.*           (A SET OF RESERVED NAMES) SO YOU DON'T HAVE TO KNOW      *
.*           THE HEX CODES FOR THEM.                                  *
.*        .  IT SAVES A LOT OF DOCUMENTATION WORK, AND MAKES          *
.*           THE CODE EASIER FOR OTHERS TO UNDERSTAND.                *
.*                                                                    *
.*        THE USER OF THE MACRO MUST STILL UNDERSTAND HOW A SCREEN    *
.*        IS CONSTRUCTED BEFORE USING IT. THE MACRO MERELY MAKES IT   *
.*        EASIER TO SPECIFY THE VALUES.  IT DOES VERY LITTLE ERROR    *
.*        CHECKING.  FOR INSTANCE, IT DOES NOT CHECK TO SEE IF        *
.*        YOU FOLLOW AN 'SBA' WITH A BUFFER ADDRESS.  IT IS POSSIBLE  *
.*        TO CODE A THOROUGHLY INVALID SCREEN.                        *
.*                                                                    *
.*        THE MACRO MAY HAVE ANY NUMBER OF OPERANDS, CONSISTING OF    *
.*        ANY COMBINATION OF THE FOLLOWING.                           *
.*                                                                    *
.*        .  AN ESCAPE CHARACTER.                                     *
.*           VALID ESCAPE CHARACTERS ARE:                             *
.*           ESC - ESCAPE                                             *
.*           GE  - GRAPHIC ESCAPE                                     *
.*        .  A WRITE COMMAND.                                         *
.*           VALID WRITE COMMANDS ARE:                                *
.*           WR  - WRITE (WRT)                                        *
.*           EW  - ERASE/WRITE                                        *
.*           EWA - ERASE/WRITE ALTERNATE                              *
.*           EAU - ERASE ALL UNPROTECTED                              *
.*           WSF - WRITE STRUCTURED FIELD                             *
.*        .  A READ COMMAND.                                          *
.*           VALID READ COMMANDS ARE:                                 *
.*           RB  - READ BUFFER                                        *
.*           RM  - READ MODIFIED                                      *
.*           RMA - READ MODIFIED ALL                                  *
.*        .  AN ORDER.                                                *
.*           VALID ORDERS ARE:                                        *
.*           SBA, SF, RA (RTA), IC, PT, EUA, SA, SFE, MF (MFA).       *
.*        .  A BUFFER ADDRESS IN PARENTHESES.                         *
.*           IF AN OPERAND IS IN PARENTHESES, IT IS ASSUMED THAT      *
.*           THE ROW AND COLUMN NUMBER ARE BETWEEN THE PARENS,        *
.*           SEPARATED BY A COMMA.  EXAMPLE: (1,1)                    *
.*           THIS FORM OF BUFFER ADDRESS IS NEW AS OF MARCH 18 1982.  *
.*        .  A ROW OR COLUMN NUMBER OF A BUFFER ADDRESS (OLD FORMAT). *
.*           IF AN OPERAND IS NUMERIC, IT IS ASSUMED TO BE            *
.*           A ROW OR COLUMN NUMBER.  IT TAKES 2 OPERANDS TO          *
.*           SPECIFY THE BUFFER ADDRESS (ROW AND COLUMN) SO NUMERIC   *
.*           OPERANDS MUST ALWAYS BE SPECIFIED IN PAIRS, THE          *
.*           FIRST BEING THE ROW AND THE SECOND BEING THE COLUMN.     *
.*           THIS FORMAT IS SUPPORTED ONLY FOR COMPATIBILITY WITH     *
.*           THE ORIGINAL VERSION OF THIS MACRO.                      *
.*        .  AN ATTRIBUTE BYTE.                                       *
.*           VALID ATTRIBUTE BYTES ARE:                               *
.*           UNPLO  - UNPROTECTED NORMAL INTENSITY                    *
.*           UNPMD  - UNPROTECTED MEDIUM INTENSITY                    *
.*           UNPHI  - UNPROTECTED HIGH INTENSITY                      *
.*           UNPNP  - UNPROTECTED NO-DISPLAY                          *
.*           PROLO  - PROTECTED NORMAL INTENSITY                      *
.*           PROLOS - PROTECTED NORMAL INTENSITY AUTO-SKIP            *
.*           PROMD  - PROTECTED MEDIUM INTENSITY                      *
.*           PROMDS - PROTECTED MEDIUM INTENSITY AUTO-SKIP            *
.*           PROHI  - PROTECTED HIGH INTENSITY                        *
.*           PROHIS - PROTECTED HIGH INTENSITY AUTO-SKIP              *
.*        .  AN EXTENDED ATTRIBUTE TYPE.                              *
.*           VALID ATTRIBUTE TYPES ARE:                               *
.*           FIELD, HILITE, COLOUR AND PGMSYM.                        *
.*        .  AN EXTENDED HIGHLIGHTING SPECIFICATION.                  *
.*           VALID HIGHLIGHTINGS ARE:                                 *
.*           NORMAL, BLINK, REVERSE AND USCORE.                       *
.*        .  AN EXTENDED COLOUR SPECIFICATION.                        *
.*           VALID COLOURS ARE:                                       *
.*           BLUE, RED, PINK, GREEN, TURQ, YELLOW, WHITE AND NORMAL.  *
.*        .  A HEX, CHARACTER, OR ADDRESS CONSTANT.                   *
.*           FOR EXAMPLE, X'00', OR C'ENTER SIGNON'                   *
.*           THIS CAN BE USED FOR DATA WITHIN FIELDS OR FOR           *
.*           ATTRIBUTE BYTES, ORDERS, THE 'WCC', OR BUFFER            *
.*           ADDRESSES (IF YOU WANT TO FIGURE THEM OUT).              *
.*                                                                    *
.*        IF THE OPERANDS DO NOT ALL FIT ON ONE LINE, YOU CAN         *
.*        EITHER CONTINUE THE LINE IN THE STANDARD ASSEMBLER WAY      *
.*        OR CODE THE MACRO AGAIN ON THE NEXT LINE WITH THE           *
.*        REMAINING OPERANDS.  THE RESULT IS THE SAME EITHER WAY.     *
.*                                                                    *
.*        THE BUFFER ADDRESS CONVERSIONS ARE FOR A                    *
.*        SCREEN SIZE OF 43 ROWS BY 80 COLUMNS. FOR SCREENS           *
.*        OF OTHER DIMENSIONS (27 BY 132, 12 BY 40) THE MACRO         *
.*        NEEDS ONLY A FEW CHANGES.                                   *
.*                                                                    *
.*        WARNING: IF YOU CODE THE MACRO WITH A LABEL IN COLUMN 1,    *
.*        AND YOU LIKE USING LENGTH ATTRIBUTES, BEWARE THAT THE       *
.*        LENGTH ATTRIBUTE OF THE LABEL IS NOT NECESSARILY THE        *
.*        TOTAL LENGTH OF THE DATA GENERATED BY THE MACRO.            *
.*                                                                    *
.*        PROGRAMMING NOTE:                                           *
.*        SA,NORMAL,NORMAL     WILL DO IN THREE BYTES WHAT            *
.*        SA,HILITE,NORMAL,SA,COLOUR,NORMAL,SA,PGMSYM,NORMAL          *
.*                             WILL DO IN NINE BYTES.                 *
.*                                                                    *
.**********************************************************************
.*
         LCLA  &R,&C,&P,&Q
         LCLA  &AN,&AS,&AL
         LCLB  &B,&NUMERIC,&INTEGER
         LCLC  &T(64)
         LCLC  &N,&ROW,&COL
         LCLC  &CS,&STRING
&T(1)    SETC  '40'
&T(2)    SETC  'C1'
&T(3)    SETC  'C2'
&T(4)    SETC  'C3'
&T(5)    SETC  'C4'
&T(6)    SETC  'C5'
&T(7)    SETC  'C6'
&T(8)    SETC  'C7'
&T(9)    SETC  'C8'
&T(10)   SETC  'C9'
&T(11)   SETC  '4A'
&T(12)   SETC  '4B'
&T(13)   SETC  '4C'
&T(14)   SETC  '4D'
&T(15)   SETC  '4E'
&T(16)   SETC  '4F'
.*
&T(17)   SETC  '50'
&T(18)   SETC  'D1'
&T(19)   SETC  'D2'
&T(20)   SETC  'D3'
&T(21)   SETC  'D4'
&T(22)   SETC  'D5'
&T(23)   SETC  'D6'
&T(24)   SETC  'D7'
&T(25)   SETC  'D8'
&T(26)   SETC  'D9'
&T(27)   SETC  '5A'
&T(28)   SETC  '5B'
&T(29)   SETC  '5C'
&T(30)   SETC  '5D'
&T(31)   SETC  '5E'
&T(32)   SETC  '5F'
.*
&T(33)   SETC  '60'
&T(34)   SETC  '61'
&T(35)   SETC  'E2'
&T(36)   SETC  'E3'
&T(37)   SETC  'E4'
&T(38)   SETC  'E5'
&T(39)   SETC  'E6'
&T(40)   SETC  'E7'
&T(41)   SETC  'E8'
&T(42)   SETC  'E9'
&T(43)   SETC  '6A'
&T(44)   SETC  '6B'
&T(45)   SETC  '6C'
&T(46)   SETC  '6D'
&T(47)   SETC  '6E'
&T(48)   SETC  '6F'
.*
&T(49)   SETC  'F0'
&T(50)   SETC  'F1'
&T(51)   SETC  'F2'
&T(52)   SETC  'F3'
&T(53)   SETC  'F4'
&T(54)   SETC  'F5'
&T(55)   SETC  'F6'
&T(56)   SETC  'F7'
&T(57)   SETC  'F8'
&T(58)   SETC  'F9'
&T(59)   SETC  '7A'
&T(60)   SETC  '7B'
&T(61)   SETC  '7C'
&T(62)   SETC  '7D'
&T(63)   SETC  '7E'
&T(64)   SETC  '7F'
.*
&N       SETC  '&NAME'
&AN      SETA  N'&SYSLIST          NUMBER OF OPERANDS
&AS      SETA  0
&B       SETB  0 FALSE
.EACH    AIF   (&AN EQ 0).EPILOG
&AS      SETA  &AS+1
&CS      SETC  '&AS'
&AL      SETA  K'&SYSLIST(&AS)
         AIF   (T'&SYSLIST(&AS) EQ 'O').NEXT
         AIF   ('&SYSLIST(&AS)'(1,1) EQ '(').PAIR
&NUMERIC SETB  (T'&SYSLIST(&AS) EQ 'N')
&INTEGER SETB  ('&SYSLIST(&AS)'(1,1) GE '0')
         AIF   (&NUMERIC AND &INTEGER).ROWCOL
         AIF   (NOT &B).ROWCOLX
         MNOTE 4,'             &CS.) MISSING COLUMN NUMBER'
&B       SETB  0 FALSE
.ROWCOLX ANOP
&STRING  SETC  '&SYSLIST(&AS)'
.*             ESCAPES
         AIF   ('&STRING' EQ 'ESC').ESC
         AIF   ('&STRING' EQ 'GE').GE
.*             WRITES
         AIF   ('&STRING' EQ 'WR').WR
         AIF   ('&STRING' EQ 'WRT').WR
         AIF   ('&STRING' EQ 'EW').EW
         AIF   ('&STRING' EQ 'EWA').EWA
         AIF   ('&STRING' EQ 'EAU').EAU
         AIF   ('&STRING' EQ 'WSF').WSF
.*             READS
         AIF   ('&STRING' EQ 'RB').RB
         AIF   ('&STRING' EQ 'RM').RM
         AIF   ('&STRING' EQ 'RMA').RMA
.*             ORDERS
         AIF   ('&STRING' EQ 'SBA').SBA
         AIF   ('&STRING' EQ 'SF').SF
         AIF   ('&STRING' EQ 'SFE').SFE
         AIF   ('&STRING' EQ 'RA').RA
         AIF   ('&STRING' EQ 'RTA').RA
         AIF   ('&STRING' EQ 'IC').IC
         AIF   ('&STRING' EQ 'PT').PT
         AIF   ('&STRING' EQ 'EUA').EUA
         AIF   ('&STRING' EQ 'SA').SA
         AIF   ('&STRING' EQ 'MF').MF
         AIF   ('&STRING' EQ 'MFA').MF
.*             ATTRIBUTES
         AIF   ('&STRING' EQ 'UNPLO').UNPLO
         AIF   ('&STRING' EQ 'UNPMD').UNPMD
         AIF   ('&STRING' EQ 'UNPHI').UNPHI
         AIF   ('&STRING' EQ 'UNPNP').UNPNP
         AIF   ('&STRING' EQ 'PROLO').PROLO
         AIF   ('&STRING' EQ 'PROLOS').PROLOS
         AIF   ('&STRING' EQ 'PROMD').PROMD
         AIF   ('&STRING' EQ 'PROMDS').PROMDS
         AIF   ('&STRING' EQ 'PROHI').PROHI
         AIF   ('&STRING' EQ 'PROHIS').PROHIS
.*             EXTENDED ATTRIBUTE TYPES
         AIF   ('&STRING' EQ 'FIELD').FIELD
         AIF   ('&STRING' EQ 'HILITE').HILITE
         AIF   ('&STRING' EQ 'COLOUR').COLOUR
         AIF   ('&STRING' EQ 'PGMSYM').PGMSYM
.*             HIGHLIGHTING
         AIF   ('&STRING' EQ 'NORMAL').NORMAL
         AIF   ('&STRING' EQ 'BLINK').BLINK
         AIF   ('&STRING' EQ 'REVERSE').REVERSE
         AIF   ('&STRING' EQ 'USCORE').USCORE
.*             COLOURS
         AIF   ('&STRING' EQ 'BLUE').BLUE
         AIF   ('&STRING' EQ 'RED').RED
         AIF   ('&STRING' EQ 'PINK').PINK
         AIF   ('&STRING' EQ 'GREEN').GREEN
         AIF   ('&STRING' EQ 'TURQ').TURQ
         AIF   ('&STRING' EQ 'YELLOW').YELLOW
         AIF   ('&STRING' EQ 'WHITE').WHITE
.*             CONSTANTS
.*             IF THE OPERAND IS NONE OF THE ABOVE, IT IS
.*             PRESUMED TO BE ANY VALID 'DC' CONSTANT.
.DC      ANOP
&N       DC    &STRING
         AGO   .NEXT
.ESC     ANOP
&N       DC    X'27'               ESCAPE
         AGO   .NEXT
.GE      ANOP
&N       DC    X'08'               GRAPHIC ESCAPE
         AGO   .NEXT
.WR      ANOP
&N       DC    X'F1'               WRITE
         AGO   .NEXT
.EW      ANOP
&N       DC    X'F5'               ERASE/WRITE
         AGO   .NEXT
.EWA     ANOP
&N       DC    X'7E'               ERASE/WRITE ALTERNATE
         AGO   .NEXT
.EAU     ANOP
&N       DC    X'6F'               ERASE ALL UNPROTECTED
         AGO   .NEXT
.WSF     ANOP
&N       DC    X'F3'               WRITE STRUCTURED FIELD
         AGO   .NEXT
.RB      ANOP
&N       DC    X'F2'               READ BUFFER
         AGO   .NEXT
.RM      ANOP
&N       DC    X'F6'               READ MODIFIED
         AGO   .NEXT
.RMA     ANOP
&N       DC    X'6E'               READ MODIFIED ALL
         AGO   .NEXT
.SBA     ANOP
&N       DC    X'11'               SET BUFFER ADDRESS
         AGO   .NEXT
.SF      ANOP
&N       DC    X'1D'               START FIELD
         AGO   .NEXT
.RA      ANOP
&N       DC    X'3C'               REPEAT TO ADDRESS
         AGO   .NEXT
.IC      ANOP
&N       DC    X'13'               INSERT CURSOR
         AGO   .NEXT
.PT      ANOP
&N       DC    X'05'               PROGRAM TAB
         AGO   .NEXT
.EUA     ANOP
&N       DC    X'12'               ERASE UNPROTECTED TO ADDRESS
         AGO   .NEXT
.SA      ANOP
&N       DC    X'28'               SET ATTRIBUTE
         AGO   .NEXT
.SFE     ANOP
&N       DC    X'29'               START FIELD EXTENDED
         AGO   .NEXT
.MF      ANOP
&N       DC    X'2C'               MODIFY FIELD ATTRIBUTES
         AGO   .NEXT
.UNPLO   ANOP
&N       DC    X'40'               UNPROTECTED NORMAL INTENSITY
         AGO   .NEXT
.UNPMD   ANOP
&N       DC    X'C4'               UNPROTECTED MEDIUM INTENSITY
         AGO   .NEXT
.UNPHI   ANOP
&N       DC    X'C8'               UNPROTECTED HIGH INTENSITY
         AGO   .NEXT
.UNPNP   ANOP
&N       DC    X'4C'               UNPROTECTED NO-DISPLAY
         AGO   .NEXT
.PROLO   ANOP
&N       DC    X'60'               PROTECTED NORMAL INTENSITY
         AGO   .NEXT
.PROLOS  ANOP
&N       DC    X'F0'               PROTECTED NORMAL INTENSITY SKIP
         AGO   .NEXT
.PROMD   ANOP
&N       DC    X'E4'               PROTECTED MEDIUM INTENSITY
         AGO   .NEXT
.PROMDS  ANOP
&N       DC    X'F4'               PROTECTED MEDIUM INTENSITY SKIP
         AGO   .NEXT
.PROHI   ANOP
&N       DC    X'E8'               PROTECTED HIGH INTENSITY
         AGO   .NEXT
.PROHIS  ANOP
&N       DC    X'F8'               PROTECTED HIGH INTENSITY SKIP
         AGO   .NEXT
.FIELD   ANOP
&N       DC    X'C0'               FIELD ATTRIBUTE
         AGO   .NEXT
.HILITE  ANOP
&N       DC    X'41'               EXTENDED HIGHLIGHTING
         AGO   .NEXT
.COLOUR  ANOP
&N       DC    X'42'               EXTENDED COLOUR
         AGO   .NEXT
.PGMSYM  ANOP
&N       DC    X'43'               PROGRAMMED SYMBOLS
         AGO   .NEXT
.NORMAL  ANOP
&N       DC    X'00'               CHARACTER ATTRIBUTE RESET (DEFAULT)
         AGO   .NEXT
.BLINK   ANOP
&N       DC    X'F1'               BLINK HIGHLIGHTING
         AGO   .NEXT
.REVERSE ANOP
&N       DC    X'F2'               REVERSE VIDEO HIGHLIGHTING
         AGO   .NEXT
.USCORE  ANOP
&N       DC    X'F4'               UNDERSCORE HIGHLIGHTING
         AGO   .NEXT
.BLUE    ANOP
&N       DC    X'F1'               BLUE COLOUR
         AGO   .NEXT
.RED     ANOP
&N       DC    X'F2'               RED COLOUR
         AGO   .NEXT
.PINK    ANOP
&N       DC    X'F3'               PINK COLOUR
         AGO   .NEXT
.GREEN   ANOP
&N       DC    X'F4'               GREEN COLOUR
         AGO   .NEXT
.TURQ    ANOP
&N       DC    X'F5'               TURQUOISE COLOUR
         AGO   .NEXT
.YELLOW  ANOP
&N       DC    X'F6'               YELLOW COLOUR
         AGO   .NEXT
.WHITE   ANOP
&N       DC    X'F7'               WHITE COLOUR
         AGO   .NEXT
.**********************************************************************
.PAIR    ANOP
         AIF   (N'&SYSLIST(&AS) NE 2).PERR1
&NUMERIC SETB  (T'&SYSLIST(&AS,1) EQ 'N')
&INTEGER SETB  ('&SYSLIST(&AS,1)'(1,1) GE '0')
         AIF   (NOT &NUMERIC OR NOT &INTEGER).PERR2
&R       SETA  &SYSLIST(&AS,1)
&NUMERIC SETB  (T'&SYSLIST(&AS,2) EQ 'N')
&INTEGER SETB  ('&SYSLIST(&AS,2)'(1,1) GE '0')
         AIF   (NOT &NUMERIC OR NOT &INTEGER).PERR2
&C       SETA  &SYSLIST(&AS,2)
         AIF   (&R LT 1 OR &R GT 62).ROWERR                   GYP93274
         AIF   (&C LT 1 OR &C GT 80).COLERR
&P       SETA  (&R-1)*80+&C-1
&Q       SETA  &P/64               QUOTIENT
&R       SETA  &P-&Q*64+1          REMAINDER+1
&Q       SETA  &Q+1                QUOTIENT+1
         AIF   (&P GT 4095).YONE                              GYP93274
&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN
         AGO   .NEXT
.YONE    ANOP  ,                                              GYP93274
&N       DC    AL2(&P)                                        GYP93274
         AGO   .NEXT                                          GYP93274
.PERR1   MNOTE 4,'             &CS.) PARENS FOUND BUT NOT 2 NUMBERS'
         MEXIT
.PERR2   MNOTE 4,'             &CS.) NON NUMERIC ROW/COLUMN'
         MEXIT
.**********************************************************************
.ROWCOL  ANOP
         AIF   (&B).COL            BRANCH IF ROW HAS BEEN CAPTURED
&R       SETA  &SYSLIST(&AS)
&B       SETB  1 TRUE              SET ROW-HAS-BEEN-CAPTURED
         AGO   .NEXTR
.COL     ANOP
&C       SETA  &SYSLIST(&AS)
&B       SETB  0 FALSE             RESET SWITCH
         AIF   (&R LT 1 OR &R GT 43).ROWERR
         AIF   (&C LT 1 OR &C GT 80).COLERR
&P       SETA  (&R-1)*80+&C-1
&Q       SETA  &P/64               QUOTIENT
&R       SETA  &P-&Q*64+1          REMAINDER+1
&Q       SETA  &Q+1                QUOTIENT+1
         AIF   (&P GT 4095).YONE                              GYP93274
&N       DC    X'&T(&Q)&T(&R)'     ROW AND COLUMN
         AGO   .NEXT
.ROWERR  MNOTE 4,'             &CS.) VALUE &R INVALID, MUST BE 1 TO 43'
         AGO   .NEXT
.COLERR  MNOTE 4,'             &CS.) VALUE &C INVALID, MUST BE 1 TO 80'
.NEXT    ANOP
&N       SETC  ''                  TURN OFF NAME
.NEXTR   ANOP
&AN      SETA  &AN-1
         AGO   .EACH
.EPILOG  ANOP
         MEND
         SPACE 3
         MACRO
&NAME    MSG   &MSG
&NAME    DC    AL2(&NAME.L-2)
         DC    C&MSG
&NAME.L  EQU   *-&NAME
         MEND
         SPACE 3
         GBLB  &MVS
&MVS     SETB  1                   1 - MVS      0 - SVS,MVT
         GBLC  &SYSSPLV
&SYSSPLV SETC  '1'                 1 - ANY MVS  2 - MVS/XA ONLY
         TITLE '  R E V I E W   -   P H A S E   1  '
         PRINT NOGEN         SAVE ATREE OR TWO                  GP97205
REVIEW   START
         ENTRY PFKDEF
         USING *,R10,R11,R12
CSECT1   EQU   *
         B     @PROLOG-*(,R15)
         DC    AL1(27),CL11'REVIEW XTND'
         DC    CL16' &SYSDATE &SYSTIME '
         DC    CL32'7-COLOUR SUPER-REVIEW -- GP@P6  '
@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)
@PROLOG  STM   R14,R12,12(R13)
         LR    R10,R15             BASE
         LA    R15,1
         LA    R11,4095(R15,R10)   BASE
         LA    R12,4095(R15,R11)   BASE
         LR    R2,R1
         USING CPPL,R2
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         LR    R9,R1
         USING @DATA,R9
         ST    R13,4(,R1)          CHAIN SAVEAREA
         ST    R1,8(,R13)          CHAIN SAVEAREA
         LR    R13,R1              NEW SAVEAREA
         SPACE
         STM   R10,R12,BASE1
         L     R14,=V(REVIEW2)
         ST    R14,BASE2
         LA    R15,1
         LA    R14,4095(R15,R14)   BASE
         ST    R14,BASE2+4
         LA    R14,4095(R15,R14)   BASE
         ST    R14,BASE2+8
         LA    R14,4095(R15,R14)   BASE
         ST    R14,BASE2+12
         MVC   SIZE,@SIZE
         ST    R2,CPPLPTR
         MVC   REVCBUF(16),0(R2)   REVCBUF/REVUPT/REVPSCB/REVECT    ABL
         MVI   STATUS,0
         MVI   STATUS2,0
         MVI   STATUS3,0
         MVI   STATUS4,CSRSW       KEEP SAME SCROLLING FOR EACH MEMBER
         MVI   STATUS5,STAUTH      ASSUME APF AUTHORIZED
         MVI   MODE,0
         MVI   SMFTYPE,0           INITIALIZE SMF RECORD TYPE   GP@SECV
         MVI   SMFSBTYP,X'FF'      INVALIDATE SMF RECORD SUBTYPE GP@P6*
         MVI   SACHAR,X'28'        ASSUME IBM 3270 SET ATTRIBUTE      *
         MVI   CHRCOLOR,4          START WITH GREEN FOR CHARACTERS    *
         MVI   HEXCOLOR,1          START WITH BLUE FOR HEXADECIMAL    *
         MVI   STRINGL,X'FF'       INVALIDATE 'FIND' STRING           *
         MVI   FINDSW,0            RESET ALL FIND FLAGS               *
         XC    ARL(36),ARL         ZERO ALLOCATION RETRIEVAL LIST     *
         MVI   ARLLEN+1,36         SUPPLY ARL LENGTH                  *
         MVC   ARLIDENT,=C'AR'     SUPPLY IDENTIFIER                  *
         MVI   ARLFIRST+1,2        ONLY FETCH JFCBS FOR CONCATENATIONS*
         LA    R0,SACHAR           POINT TO SET ATTRIBUTE CHAR        *
         ST    R0,CBPRM4           SAVE IN REVCMPBF PLIST             *
         OI    CBPRM4,X'80'        DENOTE LAST PARAMETER IN LIST GP@P6*
         MVC   BLDL(4),=AL2(1,76)  PREPARE BLDL PARAMETER LIST FOR USE
         XC    LINKAREA(8),LINKAREA   ZERO LINK MACRO DCB ADDRESS
         XC    TGETREGS(24),TGETREGS  CLEAR TGETREGS AND TGETREG2
         SLR   R15,R15
         STH   R15,RC              SET RC = 0
         ST    R15,TTR             SET Z = 0 (IN TTRZ)
         ST    R15,EOFRELAD                                      GP@P6
         STH   R15,$CONCAT                                       GP@P6
         STCM  R15,B'1111',DSORG   ZERO DSORG FLAGS              GP@P6
         XC    DIVREGS(12),DIVREGS ZERO DIV VARIABLES            GP@P6
         XC    AMKEY(20),AMKEY     ZERO VSAM VVDS COUNTERS       GP@P6
         XC    MSG(2),MSG
         XC    MYANS,MYANS         IN CASE IKJRLSA BEFORE PARSE
         XC    CALLSMFA,CALLSMFA
         L     R1,16               CVTPTR                        GP@P6*
         MVC   OSBITS,116(R1)      COPY OS ARCHITECTURE FLAGS         *
         TESTAUTH FCTN=1           TEST FOR APF AUTHORIZATION         *
         LTR   R15,R15             APF AUTHORIZED?                    *
         BZ    NOTSOSR             YES, AVOID IKJEFTSR RETURN CODE 20 *
         NI    STATUS5,255-STAUTH  NO, REMEMBER FOR LATER             *
         MVC   BLDL+4(8),=CL8'TSOEXEC'                                *
         BLDL  0,BLDL                                                 *
         LTR   R15,R15             IS TSOEXEC IN THE LINK LIST?       *
         BNZ   NOTSOSR             NO, NO TSO SERVICE ROUTINE IN SYSTEM
         OI    STATUS2,EFTSROK     YES, TSOEXEC AND IKJEFTSR EXIST
NOTSOSR  DS    0H
         MVC   BLDL+4(8),=CL8'HEL'
         BLDL  0,BLDL
         LTR   R15,R15             IS HEL AVAILABLE?
         BNZ   USEHELP             NO, USE TSO HELP
         OI    STATUS4,HELOKAY     YES, BUT WHO IS KAY?
USEHELP  DS    0H
         SPACE
************************************************************
*                                                          *
*         SET UP IOPL FOR PUTLINE                          *
*                                                          *
************************************************************
         SPACE
         LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15                 IOPL
         SPACE
         AIF   (NOT &MVS).SKIP1
         L     R15,16              LOAD CVT POINTER
         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)
         BNO   PUTLOAD             NO - BRANCH TO LOAD
         L     R15,444(,R15)       YES - USE CVTPUTL
         B     PUTLOADX            BRANCH AROUND LOAD
.SKIP1   ANOP
PUTLOAD  LA    R0,=CL8'IKJPUTL '
         LOAD  EPLOC=(0)
         LR    R15,R0              GET ENTRY ADDRESS
         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE
PUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS
         SPACE
**********************************************************************
*                                                          *         *
*         CHECK TERMINAL SCREEN SIZE                       * GP@SECV *
*                                                          *         *
**********************************************************************
         SPACE
         GTTERM PRMSZE=GOTTERM,ALTSZE=GOTTERM+2,ATTRIB=GOTTERM+4,      +
               MF=(E,GETTERML)     GET TERMINAL CHARACTERISTICS
         GTSIZE
         CH    R0,=H'1'            IS THIS A VDT?             GYP93274
         BNH   ERRTERM             NO                         GYP93274
         CH    R1,=H'80'           80 COLUMNS?
         BE    TERMOK              YES, REVIEW CAN HANDLE IT
         CLI   GOTTERM+2+1,80      ALTERNATE SIZE WIDTH 80?   GYP93274
         BNE   ERRTERM             NO; CAN'T USE THIS         GYP93274
         STSIZE SIZE=80,LINE=24    NO, SO CHANGE TO IT
         BXH   R15,R15,ERRTERM     IF YOU CAN'T CHANGE IT.... GYP93274
         LA    R1,ERASEWRT         PERFORM A VTAM ERASE/WRITE
         LA    R0,L'ERASEWRT       GET INTO 24 BY 80 MODE
         ICM   R1,8,=X'03'         TPUT FLAGS (FULLSCREEN)
         TPUT  (1),(0),R           CHANGE TO PRIMARY MODE
         OI    STATUS2,SETSIZED    FLAG FOR STSIZE ON EXIT
         LA    R0,24               FORCE 24-LINE MODE
TERMOK   CH    R0,=Y(62)       NEED 14-BIT ADDRESSING ?       GYP93274
         BNH   TERMOK2             NO                         GYP93274
         LH    R0,=Y(62)       MATCH ARRAY/BUFFER SIZES       GYP93274
TERMOK2  ST    R0,SCRNLNES         SAVE PARAMETER 2 FOR REVCMPBF
         SH    R0,=H'4'            SUBTRACT 4 FOR HEADINGS AND RULER
         STH   R0,PAGESIZE         SAVE LINES PER PAGE
         ST    R0,SCROLL           START WITH CURSOR/PAGE SCROLLING
         SPACE
************************************************************
*                                                          *
*         SET UP PFK DEFAULTS                              *
*                                                          *
************************************************************
         SPACE
         MVI   PROFDATA,C' '       INITIALIZE RELEASE NUMBER, COLOURS,
         MVC   PROFDATA+1(L'PROFDATA-1),PROFDATA        AND SCROLLING
         MVC   PROFDATA(16),=C'REVIEW R11  41CS'
         LA    R1,PFKDEF
         LA    R15,PFKTAB-2048                                GYP93274
         LA    R15,2048(,R15)                                 GYP93274
         LA    R0,24
PFKINIT  MVI   0(R15),C' '
         MVC   1(PFKTABL-1,R15),0(R15) PAD WITH BLANKS
         MVC   0(PFKDEFL,R15),0(R1) INSERT DEFAULT
         LA    R1,PFKDEFL(,R1)     POINT TO NEXT DEFAULT
         LA    R15,PFKTABL(,R15)   POINT TO NEXT PFK ENTRY
         BCT   R0,PFKINIT          DO NEXT PFK IF ANY
         MVI   0(R15),0            END OF TABLE
         SPACE
**********************************************************************
*                                                          *         *
*         SET UP THE RECALL LINKED LIST                    *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
         LA    R1,RECALSTK-4092                               GYP93274
         LA    R1,4092(,R1)        POINT TO RECALL STACK      GYP93274
         ST    R1,RECALUSE         NEXT ONE TO USE
         LA    R0,RECLDPTH-1       GET NUMBER TO LOOP THROUGH
         STCM  R0,B'1100',8(R1)    ZERO LENGTH CODE OF FIRST ELEMENT
         MVI   10(R1),C' '         BLANK OUT TEXT OF FIRST ELEMENT
RECALOOP LA    R15,60(,R1)         POINT TO NEXT AFTER CURRENT ELEMENT
         ST    R15,0(,R1)          FORWARD POINTER
         ST    R1,4(,R15)          BACKWARD POINTER
         MVI   8(R15),X'80'        NEGATIVE LENGTH FOR UNUSED ELEMENT
         LA    R1,60(,R1)          INCREMENT ELEMENT POINTER
         BCT   R0,RECALOOP         LOOP THROUGH ELEMENTS
         LA    R1,RECALSTK-4092                               GYP93274
         LA    R1,4092(,R1)        POINT TO FIRST ELEMENT AGAIN
         ST    R1,0(,R15)          CLOSE FORWARD POINTER CIRCLE
         ST    R15,4(,R1)          CLOSE BACKWARD POINTER CIRCLE
         SPACE
**********************************************************************
*                                                          *         *
*         PROCESS 'REVIEW' RECURSION                       *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
         L     R1,16               CVTPTR
         L     R1,0(,R1)           TCB WORDS
         L     R1,4(,R1)           CURRENT TCB
         L     R1,0(,R1)           CURRENT RB
         ICM   R15,7,29(R1)        LOAD RBLINK
         BZ    RECURSX             BOTTOM RB SO NO RECURSION
         L     R1,12(,R1)          CURRENT CDE
         TM    28(R1),X'04'        INVOKED VIA ALIAS SUCH AS 'REV'?
         BZ    *+8                 NO
         L     R1,20(,R1)          YES, POINT TO MAJOR CDE
         L     R15,12(,R15)        PREVIOUS CDE
         TM    28(R15),X'04'       INVOKED VIA ALIAS SUCH AS 'REV'?
         BZ    *+8                 NO
         L     R15,20(,R15)        YES, POINT TO MAJOR CDE
         CR    R1,R15              CURRENT AND PREVIOUS CDE THE SAME?
         BNE   RECURSX             NO, THIS IS NOT A RECURSIVE 'REVIEW'
         OI    STATUS5,RECURS      YES, THIS IS A RECURSIVE 'REVIEW'
         SPACE
         L     R1,4(,R13)          POINT TO PREVIOUS SAVE AREA
         L     R1,56(,R1)          POINT TO PREVIOUS @DATA (R9 VALUE)
         SPACE
*                                  COPY DATA COLOURS
         MVC   CHRCOLOR(2),CHRCOLOR-@DATA(R1)
*                                  COPY RECALL STACK POINTERS
         MVC   RECALPTR(8),RECALPTR-@DATA(R1)
*                                  COPY SCROLL AMOUNT
         MVC   SCROLL,SCROLL-@DATA(R1)
         NI    STATUS4,255-CSRSW
         OC    STATUS4,STATUS4-@DATA(R1)
*                                  COPY PROFILE DATA PREFIX
         MVC   PROFDATA(64),PROFDATA-@DATA(R1)
*                                  COPY PFK VALUES
         LA    R0,6                (PFK-TABLE-SIZE)/256
         LA    R15,PFKTAB-2048     POINT TO TARGET PFK TABLE  GYP93274
         LA    R15,2048(,R15)                                 GYP93274
         LA    R1,2048(,R1)                                   GYP93274
COPYPFLP MVC   0(256,R15),PFKTAB-2048-@DATA(R1)               GYP93274
         LA    R15,256(,R15)       POINT TO NEXT TARGET CHUNK
         LA    R1,256(,R1)         POINT TO NEXT SOURCE CHUNK
         BCT   R0,COPYPFLP         COPY LATEST IN-CORE PFK TABLE
         B     PROFINX             AVOID DISK I/O FOR PROFILE READING
RECURSX  DS    0H
         SPACE
**********************************************************************
*                                                          *         *
*         READ IN 'REVIEW' PROFILE FROM DISK               *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
         SLR   R5,R5
         L     R4,540              GET POINTER TO CURRENT TCB
         L     R4,12(,R4)          POINT TO TIOT
         LA    R4,24(,R4)          POINT TO TIOELNGH
CHKPROFI CLC   4(8,R4),PROFDCB+DCBDDNAM-IHADCB
         BE    OPENPRFI            FILE EXISTS SO GO AND OPEN IT
         IC    R5,0(,R4)           GET TIOT ENTRY LENGTH
         AR    R4,R5               POINT TO NEXT TIOT ENTRY
         CLI   0(R4),0             ZERO LENGTH ENTRY?
         BNE   CHKPROFI            NO, CHECK OUT THIS ENTRY
         B     PROFINX             YES, NOT IN TIOT SO NO PROFILE INPUT
SYNADPRF MVI   SYNADSW,X'FF'       FLAG I/O ERROR
         BR    R14                 RETURN
EODADPRF TM    OPEND,X'0F'         OPENED FOR INPUT?
         BZ    CLOSPRFI            YES
         B     CLOSPRFU            NO
OPENPRFI LA    R4,DYNDCBW          POINT TO ACTUAL DCB AREA TO BE USED
         MVC   0(PROFDCBL,R4),PROFDCB       INITIALIZE THE PROFILE DCB
         USING IHADCB,R4
         MVI   OPEND,X'80'
         OPEN  ((R4),(INPUT)),MF=(E,OPEND)
         MVI   SYNADSW,0           RESET I/O ERROR FLAG
         SLR   R3,R3               ZERO FETCHED BYTE COUNT
         ST    R3,HOLDEND          INDICATE NO BUFFER YET
         MVC   BLDL+4(8),PROFMEM   LOAD PROFILE MEMBER NAME
         BLDL  (R4),BLDL           VERIFY EXISTENCE OF PROFILE MEMBER
         LTR   R15,R15             DOES PROFILE MEMBER EXIST?
         BNZ   CLOSPRFI            NO
         CLI   BLDL+15,0           MEMBER FROM A CONCATENATION?
         BNE   CLOSPRFI            YES, CAN'T WRITE TO IT
         FIND  (R4),BLDL+12,C      POINT TO MEMBER FOR FIRST READ
         LA    R1,SCREENW-4092                                GYP93274
         LA    R1,4092(,R1)        POINT TO BUFFER IF BLK NOT TOO BIG
         ST    R1,HOLDTOP          SAVE THE BUFFER ADDRESS
         LA    R0,3760             GET MAX BUFFER SIZE FOR SCREENW
         CH    R0,DCBBLKSI         IS BLKSIZE TOO BIG FOR SCREENW?
         BNL   READPRFI            NO, SO NO SB00 ABEND & SKIP GETMAIN
         LH    R0,DCBBLKSI         YES, GET THE REQUIRED BUFFER SIZE
         ST    R0,HOLDEND          SAVE IT
         GETMAIN RU,LV=(0),LOC=BELOW
         ST    R1,HOLDTOP          SAVE THE BUFFER ADDRESS
READPRFI L     R8,HOLDTOP
         LA    R8,0(R3,R8)         POINT TO THE BUFFER AREA
         READ  DYNDECBW,SF,(R4),(R8),'S',MF=E
         CHECK DYNDECBW            WAIT FOR THE READ
         CLI   SYNADSW,0           I/O ERROR?
         BNE   CLOSPRFI            YES, ASSUME NO FURTHER READABLE DATA
         LH    R8,DCBBLKSI
         L     R1,DYNDECBW+16      POINT TO THE IOB
         SH    R8,14(,R1)          GET LENGTH OF BLOCK READ
         AR    R3,R8               ACCUMULUATE BYTE COUNT SO FAR
         CH    R3,PROFSIZE         READ ENOUGH YET?
         BL    READPRFI            NO, READ ANOTHER BLOCK
CLOSPRFI MVI   CLOSED,X'80'
         CLOSE ((R4)),MF=(E,CLOSED)
         DROP  R4                  IHADCB
         CH    R3,PROFSIZE         READ ENOUGH DATA?
         BL    PROFINFM            NO, JUST USE DEFAULTS
         LA    R3,PROFDATA
         L     R8,HOLDTOP          POINT TO DATA JUST READ IN
         NI    12(R8),X'0F'        GET CHARACTER COLOUR NUMBER
         TM    12(R8),X'07'        VALID COLOUR?
         BZ    PCCDEF              NO, USE PROFILE CHAR COLOUR DEFAULT
         MVC   CHRCOLOR,12(R8)     COPY COLOUR CODE FOR USE
         MVC   12(1,R3),12(R8)     COPY COLOUR CODE INTO PROFILE
PCCDEF   NI    13(R8),X'0F'        GET HEXADECIMAL COLOUR NUMBER
         TM    12(R8),X'07'        VALID COLOUR?
         BZ    PXCDEF              NO, USE PROFILE HEX COLOUR DEFAULT
         MVC   HEXCOLOR,13(R8)     COPY COLOUR CODE FOR USE
         MVC   13(1,R3),13(R8)     COPY COLOUR CODE INTO PROFILE
PXCDEF   CLI   14(R8),C'C'         CURSOR SCROLLING?
         BE    PSCRLDEF            YES, THIS IS ALREADY ASSUMED
         NI    STATUS4,255-PGSW    NO, FLAG HALF PAGE SCROLLING
         L     R0,SCROLL
         SRL   R0,1
         ST    R0,SCROLL           SAVE AMOUNT FOR SCROLLING
         CLI   14(R8),C'H'         HALF PAGE SCROLLING?
         BE    PSCRLDEF            YES, THIS IS NOW FLAGGED
         NI    STATUS4,255-HFSW    NO, RESET HALF PAGE FLAG
         OI    STATUS4,PGSW        FLAG HALF PAGE SCROLLING
         LH    R0,PAGESIZE
         ST    R0,SCROLL           SAVE AMOUNT FOR SCROLLING
         CLI   14(R8),C'P'         FULL PAGE SCROLLING?
         BE    PSCRLDEF            YES, THIS IS NOW FLAGGED
         CLI   14(R8),C'0'         NO, NUMERIC CHARACTER?
         BL    PSCRLCSR            NO, USE CURSOR SCROLLING
         CLI   15(R8),C'0'         YES, SECOND NUMERIC CHARACTER?
         BL    PSCRLCSR            NO, USE CURSOR SCROLLING
         NI    STATUS4,255-PGSW    YES, RESET PAGE SCROLLING FLAG
         PACK  DOUBLE,14(2,R8)     GET PACKED DECIMAL
         CVB   R0,DOUBLE           GET BINARY
         ST    R0,SCROLL
         B     PSCRLDEF            YES, THIS IS NOW FLAGGED
PSCRLCSR OI    STATUS4,CSRSW       FLAG CURSOR SCROLLING
PSCRLDEF MVC   17(47,R3),17(R8)    COPY TIMESTAMP AND EXTENSIONS >R10.0
         LA    R0,24               LOAD THE NUMBER OF PFK VALUES
PPLOADLP LA    R8,PFKTABL(,R8)     POINT TO NEXT SOURCE PFK VALUE
         LA    R3,PFKTABL(,R3)     POINT TO NEXT TARGET PFK VALUE
         MVC   1(PFKTABL-1,R3),1(R8)        LOAD PFK VALUE
         BCT   R0,PPLOADLP         LOAD NEXT PROFILE PFK IF ANY
PROFINFM ICM   R0,15,HOLDEND       ANY BUFFER TO FREE?
         BZ    PROFINX             NO
         L     R1,HOLDTOP          YES, GET ITS ADDRESS
         FREEMAIN RU,A=(1),LV=(0)  FREE THE BUFFER
PROFINX  DS    0H
         SPACE
************************************************************
*                                                          *
*         SET UP PPL FOR PARSE                             *
*                                                          *
************************************************************
         SPACE
         LA    R15,MYPPL
         USING PPL,R15
         MVC   PPLUPT(4),CPPLUPT
         MVC   PPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,PPLECB
         XC    MYECB,MYECB
         L     R0,=V(REVPCL)
         ST    R0,PPLPCL
         LA    R0,MYANS
         ST    R0,PPLANS
         MVC   PPLCBUF(4),CPPLCBUF
         ST    R9,PPLUWA
         DROP  R15                 PPL
         SPACE
************************************************************
*                                                          *
*         CALL THE PARSE SERVICE ROUTINE                   *
*                                                          *
************************************************************
         SPACE
         LR    R1,R15              POINT TO PPL
         AIF   (NOT &MVS).SKIP2
         L     R15,16              CVTPTR
         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   PARSELNK               THEN DO LINK, NOT CALL
         L     R15,524(,R15)       CVTPARS
         BALR  R14,R15             CALL IKJPARS
         B     PARSEEXT            SKIP AROUND LINK
PARSELNK DS    0H
.SKIP2   ANOP
         LINK  EPLOC=IKJPARS,SF=(E,LINKAREA)
PARSEEXT DS    0H
         SPACE
         LTR   R15,R15
         BZ    PARSEOK
         LA    R1,MSG01
         LA    R0,L'MSG01
         BAL   R14,PUTMSG1
         LA    R15,12
         B     EXIT
IKJPARS  DC    CL8'IKJPARS'
PARSEOK  DS    0H
         SPACE
         L     R3,MYANS
         USING IKJPARMD,R3
         SPACE
************************************************************
*                                                          *
*         FILL IN ALL INFO FROM PARSE                      *
*                                                          *
************************************************************
         SPACE
         MVC   FILEKV,FILEKW
         MVC   QUICKV,QUICKW
         MVC   DATAKV,DATAKW
         LA    R6,DSN
         TM    6(R6),X'80'         IS DATASET NAME SPECIFIED?
         BO    OKDSN               YES - BRANCH
         LA    R1,MSG05            NO - JUST MEMBER NAME
         LA    R0,L'MSG05
         BAL   R14,PUTMSG1
         B     EXITA12
         SPACE
OKDSN    DS    0H
         MVC   UDSNAME(4),4(R6)    COPY LENGTH AND QUOTE FLAGS
         LA    R15,UDSNAME+4
         MVI   0(R15),C' '         BLANK THE DSNAME AREA
         MVC   1(43,R15),0(R15)
         L     R14,0(,R6)          POINT TO DSN VALUE
         LH    R1,4(,R6)           GET LENGTH
         STH   R1,UDSNAME
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED MVC
         MVC   0(0,R15),0(R14)     <<< EXECUTED >>>
         EX    R1,*-6              MOVE DSN TO DSNAME (AFTER PREFIX)
         SPACE
         MVC   $MEMBER,=CL8' '
         TM    14(R6),X'80'        MEMBER SPECIFIED?
         BZ    PARSEMX             NO - BRANCH
         LH    R1,12(,R6)          GET LENGTH OF MEMBER
         BCTR  R1,0                MINUS 1 FOR EX
         L     R14,8(,R6)          GET ADDRESS OF MEMBER NAME
         B     *+10
         MVC   $MEMBER(0),0(R14)   MOVE MEMBER NAME
         EX    R1,*-6
PARSEMX  DS    0H
         SPACE
         MVC   $PASSWRD,=CL8' '
         TM    22(R6),X'80'        PASSWORD SPECIFIED?
         BZ    PARSEPX             NO - BRANCH
         LH    R1,20(,R6)          GET LENGTH OF PSWD
         BCTR  R1,0                MINUS 1 FOR EX
         L     R14,16(,R6)         GET ADDRESS OF PSWD
         B     *+10
         MVC   $PASSWRD(0),0(R14)  MOVE PSWD
         EX    R1,*-6
PARSEPX  DS    0H
         MVC   $VOLSER,=CL8' '     (6 BYTES)
         MVC   $UNIT,=CL8' '
         LA    R6,VOL
         TM    6(R6),X'80'         VOLUME SPECIFIED?
         BZ    PARSEVX             NO, LEAVE VOL AND UNIT BLANK
         L     R14,0(,R6)          POINT TO VOL VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED MVC
         MVC   $VOLSER(0),0(R14)   <<< EXECUTED >>>
         EX    R1,*-6              MOVE VOLUME
         MVC   $UNIT,=CL8'SYSALLDA'                              GP@P6
         LA    R6,UNIT
         TM    6(R6),X'80'         UNIT SPECIFIED?
         BZ    PARSEUX             NO, BRANCH
         MVC   $UNIT,=CL8' '       ERASE 'SYSALLDA'              GP@P6
         L     R14,0(,R6)          POINT TO UNITNAME VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED MVC
         MVC   $UNIT(0),0(R14)     <<< EXECUTED >>>
         EX    R1,*-6              MOVE UNIT NAME
PARSEUX  DS    0H
PARSEVX  DS    0H
         LA    R6,SUBSYS
         TM    6(R6),X'80'         SUBSYSTEM SPECIFIED?
         BZ    PARSESX             NO, NORMAL DATA SET TO BE REVIEWED
         CLI   $VOLSER,C' '        WAS ANY VOLUME SPECIFIED?
         BNE   PARSESX             YES, IGNORE SUBSYSTEM
         L     R14,0(,R6)          POINT TO VOL VALUE
         LH    R1,4(,R6)           GET LENGTH
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED MVC
         MVC   $VOLSER+1(0),0(R14) <<< EXECUTED >>>
         EX    R1,*-6              MOVE SUBSYSTEM NAME
         MVI   $VOLSER,C'='        INDICATE SUBSYSTEM WITH EQUALS SIGNS
         MVI   $VOLSER+5,C'='               FOR THE HEADING
PARSESX  DS    0H
         DROP  R3                  IKJPARMD
         IKJRLSA MYANS
         XC    MYANS,MYANS
         SPACE
************************************************************
*                                                          *
*         QUALIFY THE DSNAME IF NECESSARY                  *
*                                                          *
************************************************************
         SPACE
         LA    R15,$DSNAME+2
         MVI   0(R15),C' '         BLANK THE DSNAME AREA
         MVC   1(43,R15),0(R15)
         SLR   R1,R1
         STH   R1,$DSNAME          ZERO DSNAME LENGTH
         TM    UDSNAME+2,X'40'     IS DSN QUOTED?
         BO    NOPREF              YES, SKIP PREFIXING
         CLI   FILEKV+1,1          DSN TO BE TREATED AS DDNAME?
         BE    NOPREF              YES, SKIP PREFIXING
         AIF   (NOT &MVS).SKIPP    PREFIX WITH PREFIX
         L     R14,CPPLUPT         POINT TO UPT
         USING UPT,R14
         IC    R1,UPTPREFL         GET LENGTH OF PREFIX
         LTR   R1,R1               IS IT ZERO?
         BZ    NOPREF              YES, SKIP PREFIXING
         B     *+10
         MVC   0(0,R15),UPTPREFX
         DROP  R14                 UPT
.SKIPP   AIF   (&MVS).SKIPU        PREFIX WITH USERID
         L     R14,CPPLPSCB        POINT TO PSCB
         USING PSCB,R14
         IC    R1,PSCBUSRL         GET LENGTH OF USERID
         LTR   R1,R1               IS IT ZERO?
         BZ    NOPREF              YES, SKIP PREFIXING
         B     *+10
         MVC   0(0,R15),PSCBUSER
         DROP  R14                 PSCB
.SKIPU   ANOP
         EX    R1,*-6              MOVE USERID TO DSNAME AREA
         LA    R15,0(R1,R15)       POINT PAST USERID
         MVI   0(R15),C'.'         APPEND PERIOD
         LA    R15,1(,R15)         POINT PAST PERIOD
         LA    R1,1(,R1)           ADD 1 TO LENGTH
         STH   R1,$DSNAME          STORE LENGTH OF USERID PLUS 1
NOPREF   DS    0H
         LH    R1,UDSNAME          GET LENGTH
         LR    R0,R1
         AH    R0,$DSNAME          ADD LENGTH OF PREFIX OR ZERO
         STH   R0,$DSNAME          SET COMBINED LENGTH
         LA    R14,UDSNAME+4       POINT TO DSN VALUE
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                BRANCH AROUND EXECUTED MVC
         MVC   0(0,R15),0(R14)     <<< EXECUTED >>>
         EX    R1,*-6              MOVE DSN TO DSNAME (AFTER PREFIX)
         SPACE
         LA    R1,MYDAPL
         USING DAPL,R1
         MVC   DAPLUPT(4),CPPLUPT
         MVC   DAPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,DAPLECB
         MVC   DAPLPSCB(4),CPPLPSCB
         LA    R15,MYDAPB
         ST    R15,DAPLDAPB
         DROP  R1                  DAPL
         SPACE
************************************************************
*                                                          *
*         IF 'FILE' KEYWORD IS SPECIFIED,                  *
*         GET DSNAME FROM JFCB USING FILE NAME.            *
*                                                          *
************************************************************
         SPACE
         CLI   FILEKV+1,1          'FILE' SPECIFIED?
         BNE   NOFILE              NO, BRANCH
         CLI   $DSNAME+1,8         IS LENGTH 8 OR LESS?
         BH    FILERR1             NO, BRANCH
         DEVTYPE $DSNAME+2,DEVDATA GET DEVICE TYPE
         LTR   R15,R15             WAS FILENAME VALID?
         BNZ   FILERR2             NO, BRANCH
         TM    DEVDATA+2,X'A0'     DIRECT ACCESS OR MAGNETIC TAPE?
         BZ    FILERR3             NO, BRANCH
         LA    R4,DYNDCBW
         L     R1,=V(SEQDCB)
         MVC   0(SEQDCBL,R4),0(R1)
         LA    R1,DYNEXLST
         LA    R0,ARL                                                 *
         ST    R0,0(,R1)                                              *
         MVI   0(R1),X'13'         ALLOCATION RETRIEVAL EXIT (DFP 2.3)*
         LA    R0,JFCB
         ST    R0,4(,R1)                                              *
         MVI   4(R1),128+X'07'     READ JFCB EXIT                     *
         ST    R1,36(,R4)          DCBEXLST
         MVC   40(8,R4),$DSNAME+2  DCBDDNAM
         MVC   $DDNAML(10),$DSNAME
         LA    R0,4                ADD 4
         AH    R0,$DDNAML           TO LENGTH OF DDNAME
         STH   R0,$DDNAML            FOR +NNN (CONCAT NUMBER)
         L     R1,16               CVTPTR                        GP@P6*
         L     R1,0(,R1)           TCB WORDS                          *
         L     R1,4(,R1)           CURRENT TCB                        *
         L     R1,12(,R1)          TIOT                               *
         LA    R1,24(,R1)          TIOENTRY                           *
         SLR   R15,R15                                                *
ARDDLOOP ICM   R15,1,0(R1)         TIOELNGH - END OF TIOT?            *
         BZ    EXITA12             YES, BRANCH (NEVER HAPPENS)        *
         CLC   4(8,R1),$DDNAME     DOES DDNAME MATCH?                 *
         BE    ARDDFND                                                *
         LA    R1,0(R15,R1)                                           *
         B     ARDDLOOP                                               *
ARDDFND  LA    R1,0(R15,R1)        NO, POINT TO NEXT DD ENTRY         *
         CLI   0(R1),0             END OF TIOT?                       *
         BE    DROPARL             YES, NOT CONCATENATED              *
         CLI   4(R1),C' '          CONCATENATED ENTRY?                *
         BNE   DROPARL             NO, NOT CONCATENATED               *
         L     R5,16               CVTPTR                             *
         TM    116(R5),X'9B'       MVS/ESA OR LATER?                  *
         BO    USEARL              YES, LET OS FETCH ALLOCATION DATA  *
         TM    12(R1),X'FE'        NO, JFCB ADDRESS UNDER 128K LINE?  *
         BZ    USEARL              YES, WRONG SO MUST BE SVA FOR > 16M*
         SLR   R5,R5               NO, SO GO THRU CONCAT'D JFCBS < 16M*
         ST    R1,DOUBLE           SAVE FIRST CONCAT'D ENTRY ADDRESS  *
ARCNCTLP ICM   R15,1,0(R1)         TIOELNGH - END OF TIOT?            *
         BZ    GOTARCNT            YES, NOW HAVE CONCATENATED COUNT   *
         CLI   4(R1),C' '          CONCATENATED ENTRY?                *
         BNE   GOTARCNT            NO, NOW HAVE CONCATENATED COUNT    *
         LA    R1,0(R15,R1)        YES, POINT TO NEXT DD ENTRY        *
         LA    R5,1(,R5)           INCREMENT CONCATENATION COUNTER    *
         B     ARCNCTLP                                               *
GOTARCNT STH   R5,ARLRTRVD         SAVE RETRIEVED JFCB COUNT          *
         MH    R5,=H'180'          GET SIZE OF JFCB LIST              *
         LA    R5,7(,R5)                                              *
         SRL   R5,3                                                   *
         SLL   R5,3                ROUND TO DOUBLEWORD BOUNDARY       *
         LR    R0,R5               COPY INTO GETMAIN REGISTER         *
         ST    R0,ARLPOOL          SAVE SUBPOOL AND SIZE              *
         GETMAIN R,LV=(0)          GET ALLOCATION RETRIEVAL AREA      *
         ST    R1,ARLAREA          SAVE ITS ADDRESS                   *
         LH    R0,ARLRTRVD         LOAD COUNT OF JFCB'S TO BE FETCHED *
         L     R5,DOUBLE           POINT TO FIRST CONCAT'D TIOT ENTRY *
         LA    R6,180              GET THE SIZE OF EACH ARL JFCB ENTRY*
         SLR   R15,R15                                                *
ARJFCBLP STH   R6,0(,R1)           INITIALIZE ENTRY LENGTH            *
         L     R7,12(,R5)          LOAD JFCB "TTR"/SVA                *
         SRL   R7,8                SHIFT TO CORRECT PLACE             *
         MVC   4(176,R1),16(R7)    COPY THE JFCB (WITHOUT THE PREFIX) *
         IC    R15,0(,R5)          GET THIS TIOT ENTRY'S LENGTH       *
         ALR   R5,R15              POINT TO NEXT TIOT ENTRY           *
         ALR   R1,R6               POINT TO NEXT ARL JFCB ENTRY       *
         BCT   R0,ARJFCBLP         PROCESS THE NEXT CONCATENATION     *
DROPARL  LA    R1,DYNEXLST         POINT TO DCB EXIT LIST             *
         MVC   0(4,R1),4(R1)       REMOVE X'13' ENTRY FROM LIST  GP@P6*
USEARL   MVI   OPEND,X'80'
         RDJFCB ((R4)),MF=(E,OPEND)
         MVC   $DSNAME+2(44),JFCB
         LA    R1,$DSNAME+45       LAST CHAR OF DSNAME
         LA    R0,44               INITIAL LENGTH
FILEA    CLI   0(R1),C' '          IS THIS LAST NONBLANK?
         BNE   FILEB               YES, BRANCH
         BCTR  R1,0                BACK UP 1 CHARACTER
         BCT   R0,FILEA            DECREMENT LENGTH AND BRANCH
FILEB    STH   R0,$DSNAME          STORE LENGTH OF DSNAME
         MVI   DSORG,X'40'         DSORG PS
         CLI   $MEMBER,C' '        DDNAME(MEMBER)?
         BE    FILEC               NO
         MVI   DSORG,X'02'         YES, INDICATE PARTITIONED
         B     FILED               DON'T LOOK AT JFCB
FILEC    CLI   JFCB+44,X'40'       DDNAME ALLOCATED TO A MEMBER?
         BE    *+14                NO
         MVC   $MEMBER,JFCB+44     YES, SAVE THE MEMBER NAME
         MVI   DSORG,X'02'         DSORG PO
FILED    DS    0H
*        MVC   $VOLSER(6),JFCB+118 GET VOLUME FROM JFCB
         B     FILESPEC
FILERR1  LA    R0,MSG14A
         B     FILERR
FILERR2  LA    R0,MSG14B
         B     FILERR
FILERR3  LA    R0,MSG14C
FILERR   MVC   MSG(L'MSG14),MSG14
         LA    R15,MSG+L'MSG14
         LA    R14,$DSNAME
         LH    R1,0(,R14)
         BCTR  R1,0
         B     *+10
         MVC   MSG+L'MSG14(0),2(R14)
         EX    R1,*-6
         LA    R15,1(R1,R15)
         LR    R14,R0              POINT TO MSG14A, B, OR C
         MVC   0(L'MSG14A,R15),0(R14)
         LA    R0,L'MSG14+L'MSG14A+1(,R1)
         LA    R1,MSG
         BAL   R14,PUTMSG1
         B     EXITA12
NOFILE   DS    0H
         TM    UDSNAME+2,X'40'     IS DSNAME QUOTED?
         BO    DEFX                YES - SKIP DEFAULT SERVICE
         CLI   $VOLSER,C' '        IS VOLUME SPECIFIED?
         BNE   DEFX                YES - SKIP DEFAULT SERVICE
         CLI   QUICKV+1,1          IS QUICK SPECIFIED?
         BE    DEFX                YES, USER ENTERED ALL BUT PREFIX
         SPACE
         LA    R15,MYIOPL
         USING IOPL,R15
         LA    R14,MYDFPB
         ST    R14,IOPLIOPB
         USING DFPB,R14
         XC    0(20,R14),0(R14)
         LA    R0,$DSNAME
         ST    R0,DFPBDSN
         OI    DFPBCODE,X'04'      SEARCH CAT AND PROMPT IF MULTI
         MVC   DFPBPSCB,CPPLPSCB
*        MVI   DFPBCNTL,X'20'      PREFIX THE DSNAME
         DROP  R14,R15,R2          DFPB, IOPL, CPPL
         SPACE
         LR    R1,R15              POINT TO IOPL
         AIF   (NOT &MVS).SKIP4
         L     R15,16              CVTPTR
         TM    736(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   EHDEFLNK               THEN DO LINK, NOT CALL
         L     R15,736(,R15)       CVTEHDEF
         BALR  R14,R15             CALL IKJEHDEF
         B     EHDEFEXT            SKIP AROUND LINK
EHDEFLNK DS    0H
.SKIP4   ANOP
         LINK  EPLOC=IKJDFLT,SF=(E,LINKAREA)   *KNOWN EP IN MVS AND F4*
EHDEFEXT DS    0H
         SPACE
         B     DEFCODE(R15)
IKJDFLT  DC    CL8'IKJDFLT'        ALIAS OF IKJEHDEF
DEFCODE  B     DEF00               SUCCESS
         B     EXITA12             MSG ALREADY ISSUED
         B     DEF08               INVALID NAME GT 44
         B     EXITA12             MSG ALREADY ISSUED
         B     DEF16               NOT IN CATALOG
         B     DEF20               NOT IN CATALOG
         B     DEF24               IMPOSSIBLE
         B     DEF28               COMMAND SYSTEM ERROR
         B     DEF32               IMPOSSIBLE
         B     DEF36               ?
DEF08    DS    0H
DEF16    DS    0H
         B     DEF24
DEF20    DS    0H
LOCERR   DS    0H
         MVC   MSG(L'MSG02),MSG02
         LA    R15,MSG+L'MSG02
         LA    R14,$DSNAME
         LH    R1,0(,R14)
         BCTR  R1,0
         EX    R1,LOCERR02
         LA    R15,1(R1,R15)
         MVC   0(L'MSG02A,R15),MSG02A
         LA    R0,L'MSG02+L'MSG02A+1(,R1)
LOCERRX  LA    R1,MSG
         BAL   R14,PUTMSG1
         B     EXITA12
LOCERR02 MVC   MSG+L'MSG02(0),2(R14) <<< EXECUTED >>>
DEF24    DS    0H
DEF28    DS    0H
DEF32    DS    0H
DEF36    DS    0H
         LA    R1,MSG03
         LA    R0,L'MSG03
         BAL   R14,PUTMSG1
         B     EXITA12
         SPACE
DEF00    DS    0H
DEFX     DS    0H
         SPACE
**********************************************************************
*                                                          *         *
*         ALLOCATE THE SUBSYSTEM DATA SET WITH DYNALLOC    *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
*              WHEN SUBSYSTEM DATA SETS ARE BEING REVIEWED THEN:
*        $UCBAD  IS ZERO      -AND-
*        $VOLSER IS =SSSS=    WHERE SSSS IS THE SUBSYSTEM NAME.
*
*        (SHOULD REALLY CONVERT ALL DYNAMIC ALLOCATIONS IN REVIEW
*        FROM DAIR TO SVC 99, NOT JUST HERE BUT IN REVPODIR AS WELL.
*        THE AREA POINTED TO BY DFIDP WOULD ALSO HAVE TO BE CHANGED IN
*        DAIRFAIL.  UNTIL THEN, IKJDAIR IS STILL WORKING PERFECTLY
*        WELL.)
*
*        USE SCREENW FOR DYNALLOC WORK AREA:
*           +0 S99RBPTR
*           +4 S99RB
*          +18 S99RBX
*          +40 S99TUPL
*          +60 S99TUNIT
         SPACE
         CLI   $VOLSER,C'='        WAS SUBSYSTEM SPECIFIED?
         BNE   USEDAIR             NO, PROCEED AS NORMAL
         TM    STATUS5,STAUTH      APF AUTHORIZED?
         BO    USESVC99            YES, PROCEED WITH DYNALLOC
         LA    R1,MSG11            NO, CANNOT ALLOC SUBSYS DATA SET
         LA    R0,L'MSG11
         BAL   R14,PUTMSG1
         B     MSGXX               GO AND SUGGEST USING 'REVVSAM'
         SPACE
USESVC99 LA    R1,SCREENW-4092                                GYP93274
         LA    R1,4092(0,R1)       POINT DYNALLOC PARAMETER LIST
         XC    0(256,R1),0(R1)     ERASE SOME RESIDUAL DATA
         USING S99RBPTR,R1
         LA    R15,4(,R1)          POINT TO DYNALLOC REQUEST BLOCK
         USING S99RB,R15
         ST    R15,S99RBPTR        INITIALIZE PARAMETER LIST
         OI    S99RBPTR,S99RBPND   INDICATE END OF PARAMETER LIST
         MVI   S99RBLN,20          SUPPLY REQUEST BLOCK LENGTH
         MVI   S99VERB,S99VRBAL    VERB=X'01' - DSNAME ALLOCATION
         MVI   S99FLG11,S99NOCNV+S99NOMNT   NEW ALLOC AND NOMOUNT
         MVI   S99FLG12,0
         SLR   R0,R0
         STH   R0,S99ERROR         ZERO ERROR REASON CODE
         STH   R0,S99INFO          ZERO INFORMATION REASON CODE
         ST    R0,S99FLAG2         ZERO AUTHORIZED FLAGS
         LA    R14,64(,R1)         GET TEXT POINTERS AREA ADDRESS
         ST    R14,S99TXTPP        SAVE IT
         LA    R0,20(,R15)         GET REQUEST BLOCK EXTENSION ADDR
         ST    R0,S99S99X          SAVE IT
         DROP  R15                 S99RB
         LR    R15,R0
         USING S99RBX,R15
         MVC   S99EID,=C'S99RBX'   SUPPLY CONTROL BLOCK ID
         MVI   S99EVER,S99RBXVR    SUPPLY VERSION NUMBER (X'01')
         MVI   S99EOPTS,S99EIMSG   LET SYSTEM USE PUTLINE FOR MSG(S)
         MVI   S99EMGSV,S99XINFO   SHOW EVEN INFO-LEVEL MESSAGES
         MVC   S99ECPPL,CPPLPTR    SUPPLY CPPL ADDRESS FOR PUTLINE
         SLR   R0,R0
         ST    R0,S99EMRC          ZERO RESERVED BYTES
         STH   R0,S99EERR          ZERO ERROR REASON CODE
         STH   R0,S99EINFO         ZERO INFORMATION REASON CODE
         ST    R0,S99ERSN          ZERO SMS REASON CODE (WAS S99ERSV2)
         DROP  R15                 S99RBX
         USING S99TUPL,R14
         LA    R15,32(,R14)        POINT TO AREA FOR TEXT UNITS
         USING S99TUNIT,R15
         ST    R15,S99TUPTR        SAVE FIRST TEXT UNIT ADDRESS
         LA    R0,DALDSNAM         KEY = X'0002' - DATA SET NAME
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         MVC   S99TULNG(46),$DSNAME  SUPPLY LENGTH AND DATA SET NAME
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,64(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE SECOND TEXT UNIT ADDRESS
         CLI   $MEMBER,C' '        WAS A MEMBER SPECIFIED?
         BE    MEM99OK             NO
         LA    R0,DALMEMBR         KEY = X'0003' - DATA SET MEMBER
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,8
         STH   R0,S99TULNG         MAXIMUM LENGTH IS 8
         MVC   S99TUPAR(8),$MEMBER LOAD MEMBER NAME
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,16(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE NEXT TEXT UNIT ADDRESS
MEM99OK  LA    R0,DALSSNM          KEY = X'005F' - SUBSYSTEM NAME
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,4
         STH   R0,S99TULNG         MAXIMUM LENGTH IS 4
         MVC   S99TUPAR(4),$VOLSER+1        LOAD SUBSYSTEM NAME
         LA    R14,4(,R14)         POINT TO NEXT TEXT UNIT POINTER
         LA    R15,16(,R15)        POINT TO NEXT TEXT UNIT
         ST    R15,S99TUPTR        SAVE LAST TEXT UNIT ADDRESS
         OI    S99TUPTR,S99TUPLN   INDICATE THAT IT IS THE LAST
         LA    R0,DALRTDDN         KEY = X'0055' - RETURN DDNAME
         STH   R0,S99TUKEY
         LA    R0,1
         STH   R0,S99TUNUM         1 PARAMETER IN THIS TEXT UNIT
         LA    R0,8
         STH   R0,S99TULNG         MAXIMUM LENGTH IS 8
         MVC   S99TUPAR(8),=CL8' ' SUPPLY SLOT GENERATED DDNAME
         LA    R0,S99TULNG
         ST    R0,DOUBLE           REMEMBER THIS DDNAME LOCATION
         DROP  R1,R14,R15          S99RBPTR, S99TUPL, S99TUNIT
         DYNALLOC
         LTR   R15,R15             SUCCESS?
         BNZ   EXITA12             NO, TERMINATE (HOPE MVS ISSUED MSG)
         OI    STATUS,STALLOC      YES, TELL CLEANUP TO FREE IT
         L     R1,DOUBLE           POINT TO DDNAME DETAILS
         MVC   $DDNAML(10),0(R1)   COPY DDNAME LENGTH AND DDNAME
         SLR   R0,R0               GET "DIV" ENTRY CODE (GETMAIN)
         L     R15,DIVADDR1        LOAD "DIV" ENTRY POINT
         BASSM R14,R15             EXECUTE REVDIV IN AMODE-31
         LTR   R15,R15             SUCCESS?
         BZ    FILESPEC            YES
         LA    R1,MSG12            NO, UNABLE TO OBTAIN "DIV" STORAGE
         LA    R0,L'MSG12
         BAL   R14,PUTMSG1
         B     EXITA12
USEDAIR  DS    0H
         SPACE
************************************************************
*                                                          *
*         ALLOCATE THE DATA SET WITH IKJDAIR               *
*                                                          *
************************************************************
         SPACE
         LA    R15,MYDAPB
         USING DAPB08,R15
         XC    0(84,R15),0(R15)
         MVI   DA08CD+1,X'08'
         LA    R0,$DSNAME
         ST    R0,DA08PDSN
         MVC   DA08DDN(8),=CL8' '
         MVC   DA08UNIT,$UNIT
         MVC   DA08SER,=CL8' '
         MVC   DA08SER(6),$VOLSER
         MVC   DA08MNM,=CL8' '     NEVER ALLOCATE WITH MEMBER
         MVC   DA08PSWD,$PASSWRD
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         LA    R1,MYDAPL
         SPACE
         BAL   R14,CALLDAIR
         LTR   R15,R15
         BZ    OKDAIR
         BAL   R14,DAIRFAIL
         B     EXITA12
OKDAIR   DS    0H
         OI    STATUS,STALLOC      TELL CLEANUP TO FREE IT
         LA    R15,MYDAPB
         MVC   $DDNAME,DA08DDN
         MVC   DSORG(1),DA08DSO
         DROP  R15                 DAPB08
FILESPEC DS    0H
         SPACE
************************************************************
*                                                          *
*         GET THE UCB ADDRESS AND VOLUME SERIAL            *
*                                                          *
************************************************************
         SPACE
         XC    ATTNLST(ATTNLEN),ATTNLST  ZERO ATTN LIST         GP@SECV
         LA    R5,ATTN             POINT TO ATTENTION EXIT      GP@P6
         ST    R5,ATTNADDR         REMEMBER ITS ADDRESS         GP@P6
         STAX  (R5),REPLACE=NO,USADDR=STATUS4,MF=(E,ATTNLST)    GP@SECV
         L     R1,16               CVTPTR
         L     R1,0(,R1)           TCB WORDS
         L     R1,4(,R1)           CURRENT TCB
         L     R1,12(,R1)          TIOT
         LA    R7,24(,R1)          TIOENTRY
DDLOOP   CLI   0(R7),0             END OF TIOT?
         BE    EXITA12             YES, BRANCH (NEVER HAPPENS)
         CLC   4(8,R7),$DDNAME     DOES DDNAME MATCH?
         BE    DDFOUND
         SLR   R15,R15
         IC    R15,0(,R7)
         LA    R7,0(R15,R7)
         B     DDLOOP
DDFOUND  L     R15,16(,R7)         TIOEFSRT-1
         LA    R15,0(,R15)         MAKE ADDRESS OKAY FOR ANY AMODE
         ST    R15,$UCBAD          SAVE IT FOR LATER
         LTR   R15,R15             ANY UCB?
         BZ    FASTX               NO, FORGET OBTAIN AND "FASTPATH"
         MVC   $VOLSER,28(R15)     UCBVOLI
         TM    18(R15),X'20'       DIRECT ACCESS DEVICE?
         BO    OBTDSCB             YES, OBTAIN DATA SET CONTROL BLOCK
         OI    STATUS2,MAGTAPE     NO, FLAG AS MAGNETIC TAPE FILE
         CLI   19(R15),X'80'       3480 IN FULL FUNCTION MODE?
         BNE   FASTX               NO, BYPASS OBTAIN AND FASTPATH
         OI    STATUS2,CARTRIDG    YES, HI-SPEED SEARCH & MSGDISP AVAIL
         B     FASTX               BYPASS OBTAIN AND "FASTPATH"
         SPACE
************************************************************
*                                                          *
*         OBTAIN THE DSCB FROM THE VTOC                    *
*                                                          *
************************************************************
         SPACE
OBTDSCB  LA    R1,OBTAINW
         MVC   0(OBTAINL,R1),OBTAIN
         LA    R0,$DSNAME+2        DSN FOR OBTAIN
         ST    R0,4(,R1)
         LA    R0,$VOLSER          VOLUME FOR OBTAIN
         ST    R0,8(,R1)
         LA    R0,MYDSCB           ANSWER AREA FOR OBTAIN
         ST    R0,12(,R1)
         OBTAIN (1)
         LTR   R15,R15             WAS OBTAIN SUCCESSFUL?
         BZ    OKDSCB              YES, BRANCH
         SPACE
*               OBTAIN HAS FAILED.  HOW CAN THAT HAPPEN WHEN
*               DYNAMIC ALLOCATION WAS SUCCESSFUL?  ONE WAY IT
*               CAN HAPPEN IS IF THE DSNAME IS AN ALIAS ENTRY
*               IN A VSAM CATALOG.  IF IT IS, A 'LOCATE' WILL
*               PUT THE TRUE NAME IN THE DSNAME FIELD, SO NOW
*               WE ISSUE A LOCATE, AND TRY THE OBTAIN AGAIN.
         SPACE
         TM    STATUS,STLOCAT      HAS LOCATE BEEN TRIED ALREADY?
         BZ    OBTALIAS            NO, GO TRY IT
         SPACE
*               OBTAIN HAS FAILED.  HOW CAN THAT HAPPEN WHEN
*               DYNAMIC ALLOCATION WAS SUCCESSFUL?  ANOTHER WAY
*               IT CAN HAPPEN IS IF A VSAM DATA COMPONENT IS
*               NOMINATED WHICH HAS AN ALTERNATE INDEX.  IF THIS
*               IS THE CASE THEN THE FIRST VOLUME ALLOCATED IS
*               THAT OF THE ALTERNATE INDEX, AND IF THE BASE DATA
*               COMPONENT IS ON A DIFFERENT VOLUME THEN A MULTI-UNIT
*               FILE MUST HAVE BEEN ALLOCATED.  THE SOLUTION IS TO
*               ALLOCATE A NEW SINGLE-UNIT FILE TO THE SECOND VOLUME
*               AND PROCESS THAT DDNAME.
         SPACE
         CLI   0(R7),24            SINGLE-UNIT TIOT ENTRY?       GP@P6*
         BL    OBTERR              YES, END OF STORY                  *
         L     R15,20(,R7)         NO, LOAD SECOND UNIT'S ENTRY       *
         LA    R15,0(,R15)         MAKE ADDRESS OKAY FOR ANY AMODE    *
         LTR   R15,R15             ANY UCB?                           *
         BZ    OBTERR              NO, END OF STORY                   *
         TM    18(R15),X'20'       DIRECT ACCESS DEVICE?              *
         BZ    OBTERR              NO, END OF STORY                   *
         MVC   $VOLSER,28(R15)     YES, COPY UCBVOLI                  *
         MVC   $UNIT,=CL8'SYSALLDA'                                   *
         TM    STATUS,STALLOC      WAS FILE ALLOCATED HERE?           *
         BZ    USEDAIR             NO, GO GET A NEW SINGLE-UNIT FILE  *
         LA    R1,MYDAPL           YES, FREE THE CURRENT FILE FIRST   *
         LA    R15,MYDAPB                                             *
         USING DAPB18,R15                                             *
         XC    0(40,R15),0(R15)                                       *
         MVI   DA18CD+1,X'18'                                         *
         MVC   DA18DDN,$DDNAME                                        *
         MVC   DA18MNM(8),=CL8' '                                     *
         MVC   DA18SCLS(2),=CL8' '                                    *
         BAL   R14,CALLDAIR        UNALLOCATE                         *
         NI    STATUS,255-STALLOC  UNALLOCATED                        *
         DROP  R15                 DAPB18                             *
         B     USEDAIR                                           GP@P6*
         SPACE
OBTERR   LA    R1,MSG09            UNABLE TO OBTAIN DSCB
         LA    R0,L'MSG09
         BAL   R14,PUTMSG1
         B     EXITA12
         SPACE
OBTALIAS OI    STATUS,STLOCAT      TRIP THE SWITCH
         LA    R1,LOCATEW
         MVC   0(LOCATEL,R1),LOCATE
         LA    R0,$DSNAME+2        DSNAME FOR LOCATE
         ST    R0,4(,R1)
         LA    R0,LOCBUF           ANSWER AREA FOR LOCATE
         ST    R0,12(,R1)
         LOCATE (1)
         LTR   R15,R15             WAS LOCATE SUCCESSFUL?
         BNZ   OBTERR              NO, ISSUE MESSAGE
         LA    R0,44               YES, GET MAX DATA SET NAME LENGTH
         LA    R1,$DSNAME+45       POINT TO LAST DSN CHARACTER
DSNLENLP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   NEW$DSNL            NO, NOW HAVE NEW $DSNAME LENGTH
         BCTR  R1,0                YES, POINT TO PREVIOUS CHARACTER
         BCT   R0,DSNLENLP         DECREMENT LENGTH AND TEST PREVIOUS
NEW$DSNL STH   R0,$DSNAME          SAVE REAL DATA SET NAME LENGTH
         B     OBTDSCB             GO OBTAIN AGAIN
         SPACE
OKDSCB   NI    STATUS,255-STLOCAT  TURN OFF LOCATE SWITCH
         SPACE
**********************************************************************
*                                                          *         *
*         PERFORM ADDITIONAL INITIALIZATION FOR VSAM       *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
         CLI   MYDSCB-44+59,17     MORE THAN 16 EXTENTS ON VOL?
         BL    XTNTSOK             NO, PROCEED
         TM    MYDSCB-44+78,X'08'  PDSE?
         BO    XTNTSOK             YES, PROCEED
         LH    R1,$DSNAME          MORE THAN 16 EXTENTS - AVOID S213-20
         LR    R14,R1
         MVC   MSG(44),$DSNAME+2
         LA    R15,MSG(R1)
         MVC   0(L'MSG15,R15),MSG15
         MVC   L'MSG15(6,R15),$VOLSER
         LA    R0,L'MSG15+6(,R14)
         B     LOCERRX
         SPACE
XTNTSOK  MVC   AMKLN+1(1),MYDSCB-44+90
         MVC   AMRKP,MYDSCB-44+91  COPY KEY DETAILS FOR RULER MARKERS
         TM    MYDSCB-44+83,X'08'  DSORG = VS?
         BZ    ICFVSAMX            NO
         OC    MYDSCB-44+140(5),MYDSCB-44+140  CCHHR OF DSCB1
         BZ    OBTERR              PHONY DSCB FOR VSAM, AVOID S213-04
         TM    OSBITS,X'93'        MVS/XA, MVS/ESA OR LATER?
         BNO   ESAVSOK             NO, APF AUTHORIZATION NOT NEEDED
         TM    STATUS5,STAUTH      APF AUTHORIZED?
         BO    ESAVSOK             YES, CAN LOOK AT VSAM UNDER DFP V3
         L     R1,16               CVTPTR
         ICM   R1,15,1216(R1)      POINT TO DFP ID TABLE
         BZ    ESAVSOK             APPARENTLY DFP NOT INSTALLED
         CLI   2(R1),X'30'         EARLIER THAN DFP VERSION 3?
         BL    ESAVSOK             YES, APF AUTHORIZATION NOT NEEDED
         LA    R1,MSG10            NO, AVOID S113-2C
         LA    R0,L'MSG10
         BAL   R14,PUTMSG1
MSGXX    LA    R1,MSGX             SUGGEST TRYING 'REVVSAM' COMMAND
         LA    R0,L'MSGX
         BAL   R14,PUTMSG1
         B     EXITA12
         SPACE
ESAVSOK  CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BE    ICFVSAMX            YES, SHOW ALL CI CONTENTS
         OI    STATUS5,VSAMSW      NO, SHOW LOGICAL RECORDS
         TM    MYDSCB-44+85,X'80'  IS THIS AN ICF COMPONENT?  (OPTCD)
         BZ    ICFVSAMX            NO, FORGET ABOUT THE VVDS
         MVI   CMDAREA+2,C' '      BLANK THE VVDS DSNAME AREA
         MVC   CMDAREA+3(43),CMDAREA+2
         MVC   CMDAREA+2(11),=C'SYS1.VVDS.V'
         MVC   CMDAREA+13(6),$VOLSER
         LA    R0,17               YES, GET MAX DATA SET NAME LENGTH
         LA    R1,CMDAREA+18       POINT TO LAST DSN CHARACTER
VVDSLNLP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   NEWVVDSL            NO, NOW HAVE NEW $DSNAME LENGTH
         BCTR  R1,0                YES, POINT TO PREVIOUS CHARACTER
         BCT   R0,VVDSLNLP         DECREMENT LENGTH AND TEST PREVIOUS
NEWVVDSL STH   R0,CMDAREA          SAVE VVDS DATA SET NAME LENGTH
         LA    R15,MYDAPB
         USING DAPB08,R15
         XC    0(84,R15),0(R15)
         MVI   DA08CD+1,X'08'
         LA    R0,CMDAREA
         ST    R0,DA08PDSN
         MVC   DA08DDN(8),=CL8' '
         MVC   DA08UNIT,=CL8'SYSALLDA'
         MVC   DA08SER,=CL8' '
         MVC   DA08SER(6),$VOLSER
         MVC   DA08MNM,=CL8' '
         MVC   DA08PSWD,$PASSWRD
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         DROP  R15                 DAPB08
         SPACE
         LA    R1,MYDAPL           POINT TO PARAMETER LIST
         BAL   R14,CALLDAIR        ALLOCATE THE VVDS
         LTR   R15,R15             COULD IT BE ALLOCATED?
         NOP   VVDSFAIL            NO, SHOW PHYSICAL BLOCKS ONLY
* CHANGE NOP ABOVE TO BNZ FOR VVDS ALLOCATION ERROR MESSAGES/DEBUGGING.
         BNZ   ICFVSAMX            NO, PROCEED AS IF NON-ICF VSAM
         MVI   DSORGTYP,X'CF'      YES, ENTER VVDS SCAN MODE
         LA    R15,MYDAPB
         USING DAPB08,R15
         MVC   PCMD,$DDNAME        REMEMBER THE "REAL" $DDNAME
         MVC   $DDNAME,DA08DDN     COPY DDNAME TO ACCESS VVDS
         DROP  R15                 DAPB08
         MVC   CMDAREA+2(44),$DSNAME+2
         LH    R15,$DSNAME         GET LENGTH OF DATA SET NAME
         LA    R15,1(,R15)         ADD ONE
         STH   R15,CMDAREA         MAKE COMPARE DATA FOR VVDS Z RECORD
         L     R15,=V(REVIEW2)     GET ADDRESS OF PHASE 2
         BALR  R14,R15             GO EXTRACT VVDS DETAILS
         LA    R15,MYDAPB
         USING DAPB18,R15
         XC    0(40,R15),0(R15)
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,$DDNAME
         MVC   DA18MNM(8),=CL8' '
         MVC   DA18SCLS(2),=CL8' '
         LA    R1,MYDAPL
         BAL   R14,CALLDAIR        UNALLOCATE THE VVDS
         DROP  R15                 DAPB18
         MVC   $DDNAME,PCMD        RESTORE THE "REAL" $DDNAME
         MVC   PCMD,=CL8' '        JUST TO BE TIDY
         NI    DSORGTYP,VVRCOMTP   JUST KEEP COMPONENT TYPE (D/I)
         ICM   R0,B'1111',AMCIV    ZERO CONTROLINTERVAL SIZE?
         BZ    LINEARDS            YES, VVDS ERROR
         ICM   R0,B'1111',AMLCL    ZERO MAXIMUM RECORD SIZE?
         BZ    LINEARDS            YES, LINEAR DATA SET
         OI    DSORGTYP,X'C0'      NO, LOOKING AT ICF DATA
         B     ICFVSAMX            DISPLAY LOGICAL RECORDS
VVDSFAIL BAL   R14,DAIRFAIL
LINEARDS NI    STATUS5,255-VSAMSW  DISPLAY PHYSICAL BLOCKS ONLY
ICFVSAMX DS    0H
         SPACE
**********************************************************************
*                                                          *         *
*         INVOKE PARTITIONED DIRECTORY DISPLAY             * GP@SECV *
*                                                          *         *
**********************************************************************
         SPACE
         TM    MYDSCB-44+78,X'88'  SMS-MANAGED INCLUDING PDSE?        *
         BNZ   NOTCVOL             YES, CANNOT BE OS/CATALOG          *
         CLC   MYDSCB-44+98(3),=X'0000FF' CHECK DS1LSTAR
         BE    CVOLPDSD            BRANCH IF OS/CATALOG
NOTCVOL  MVC   DSORG,MYDSCB-44+82
         TM    DSORG,X'02'         DSORG = PO?
         BNO   OBTX                NO
         CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?          GP@P6
         BE    CVOLPDSD            YES, REVIEW PDS DIRECTORY     GP@P6
         L     R15,16              POINT TO THE CVT              GP@P6*
         L     R15,0(,R15)         POINT TO TCB WORDS                 *
         L     R15,4(,R15)         POINT TO CURRENT TCB               *
         L     R15,132(,R15)       POINT TO ORIGINATING TASK          *
         L     R15,0(,R15)         POINT TO ITS ACTIVE RB             *
         L     R15,12(,R15)        POINT TO ITS CDE                   *
         CLC   8(3,R15),=C'PDS'    REVIEW ATTACHED FROM SOME PDS RLSE?*
         BNE   PDSREVOK            NO                                 *
         OI    STATUS5,STPDS       YES, REMEMBER TO DISABLE STAX      *
PDSREVOK TM    OSBITS,X'92'        MVSXA-LIKE WITH OVER 16MB VIRTUAL? *
         BNO   NODIV0              NO, DON'T USE "DATA-IN-VIRTUAL"    *
         CLI   $VOLSER,C' '        VIO DATA SET?                      *
         BE    NODIV0              YES, SUPPRESS "DATA-IN-VIRTUAL"    *
         SLR   R0,R0               YES, GET ENTRY CODE (GETMAIN)      *
         L     R15,DIVADDR1        LOAD "DIV" ENTRY POINT             *
         BASSM R14,R15             EXECUTE REVDIV IN AMODE-31         *
NODIV0   DS    0H                  IT EITHER WORKED OR DIDN'T    GP@P6*
         CLI   $MEMBER,C' '        YES, WAS MEMBER SPECIFIED?
         BNE   FASTX               YES, BYPASS "FASTPATH"        GP@P6
         XC    $MEMBER,$MEMBER     NO, START FROM FIRST MEMBER
         BAL   R14,QUERYTRM        DETERMINE INITIAL DISPLAY MODE
SELNLIST L     R15,=V(REVPODIR)        AND DISPLAY MEMBER LIST
         BALR  R14,R15             CALL REVPODIR
         B     EXITA##             EXIT REVIEW
CVOLPDSD MVI   DSORGTYP,X'FF'      FLAG CVOL OR PDS DIRECTORY
OBTX     DS    0H
         SPACE
**********************************************************************
*                                                          *         *
*         DIRECT ACCESS FAST PATH                          *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
*
*         THIS CODE TAKES ADVANTAGE OF FIXED LENGTH RECORDS TO
*         ALLOW THE CALCULATION OF THE TTR FOR THE POINT MACRO
*         FROM THE RELATIVE RECORD NUMBER.  THIS COULD ALSO BE
*         DONE FOR ALL TAPE FILES EXCEPT VB OR VBS FILES, BUT
*         THIS WOULD BE OF DUBIOUS BENEFIT GIVEN THE SEQUENTIAL
*         NATURE OF TAPES, ALTHOUGH IF THE CODE CATERED FOR THE
*         DIFFERENCES IN FULL-FUNCTION 3480 NOTE/POINT PARAMETERS
*         THEN HIGH-SPEED SEARCHING COULD BE USED WITH 3480 UNITS.
*
*         STRICTLY SPEAKING, FOR DISK FILES THIS METHOD SHOULD
*         ONLY BE USED FOR FS OR FBS FILES.  HOWEVER, FOR MOST
*         UNBLOCKED FILES (EVEN MOD FILES) EACH TRACK (EXCEPT
*         THE LAST) SHOULD BE FULLY LOADED THUS ALLOWING AN
*         ACCURATE CALCULATION.  THIS CANNOT ALWAYS BE RELIED
*         UPON FOR BLOCKED FILES, ESPECIALLY MOD FILES.  NOTE
*         THAT FIND COMMANDS ARE NOT SPEEDED UP BECAUSE ALL THE
*         RELEVANT DATA RECORDS MUST STILL BE PHYSICALLY READ.
*         (RECFM=FS AND RECFM=FBS IMPLY NON-PDS.)
*
*         BY DEFAULT, "FAST PATH" WILL BE USED FOR NON-PDS DISK
*         FILES IF RECFM=F, RECFM=FS OR RECFM=FBS.  IT WILL ALSO
*         USED WHEN RECFM=FB *AND* AT LEAST ONE OF THE FOLLOWING
*         IS TRUE:  1) LRECL=BLKSIZE
*            *OR*   2) DS1LSTAR INDICATES MORE THAN 256 TRACKS USED.
*
*         SPECIFYING THE 'DATA' OPERAND AT INVOCATION TIME, OR
*         ISSUING THE 'NEWTOP' SUBCOMMAND FROM WITHIN 'REVIEW' WILL
*         CAUSE "FAST PATH" TO BE DISABLED FOR THE REVIEW SESSION.
*         IT WILL ALSO BE DISABLED IF THE VTOC INDICATES THAT THERE
*         IS NOT MUCH MORE THAN A SCREENFUL OF RECORDS.
*
         MVC   TSTRECFM,MYDSCB-44+84
         TM    TSTRECFM,X'60'      VARIABLE/UNDEFINED OR TRACKOVERFLOW?
         BNZ   FASTX               YES
         TM    TSTRECFM,X'80'      FIXED LENGTH RECORDS?
         BZ    FASTX               NO
         CLI   DATAKV+1,1          IS 'DATA' SPECIFIED?
         BE    FASTX               YES, SUPPRESS "FAST PATH"
         LA    R1,1                LOAD UNBLOCKED "BLOCKING FACTOR"
         TM    TSTRECFM,X'10'      BLOCKED?
         BZ    GOFAST              NO, FS IS GOOD, F IS PROBABLY GOOD
         CLC   MYDSCB-44+86(2),MYDSCB-44+88   BLKSIZE = LRECL?
         BE    GOFAST              YES, TREAT THE TURKEY AS RECFM=F
         LH    R1,MYDSCB-44+86     YES, LOAD THE BLOCK SIZE
         LH    R15,MYDSCB-44+88    LOAD THE LOGICAL RECORD LENGTH
         SLR   R0,R0               CLEAR FOR DIVIDE
         DR    R0,R15              BLKSIZE/LRECL = BLOCKING FACTOR
         LTR   R0,R0               ANY REMAINDER?
         BNZ   FASTX               YES, SOMETHING'S A BIT WACKY
         TM    TSTRECFM,X'08'      FIXED BLOCKED STANDARD?
         BO    GOFAST              YES, EMPLOY "FAST PATH"
         CLI   MYDSCB-44+98,0      IS DS1LSTAR TRACKS OVER 255?
         BE    FASTX               NO, SUPPRESS "FAST PATH"
GOFAST   ST    R1,BLKFACTR         NO, SAVE THE BLOCKING FACTOR
         L     R15,$UCBAD          POINT TO THE UCB
         CLI   19(R15),X'0F'       3390?
         BE    FAST3390            YES
         CLI   19(R15),X'0E'       3380/F6425?
         BE    FAST3380            YES
         LA    R1,DISKTABL         POINT TO SUPPORTED DISK CONSTANTS
         CLI   19(R15),X'09'       3330/F478?
         BE    FASTDISK            YES
         CLI   19(R15),X'0D'       3330-1/F479?
         BE    FASTDISK            YES
         LA    R1,6(,R1)           POINT TO NEXT ENTRY
         CLI   19(R15),X'0B'       3350/F493?
         BE    FASTDISK            YES
         LA    R1,6(,R1)           POINT TO NEXT ENTRY
         CLI   19(R15),X'85'       F6421?
         BE    FASTDISK            YES
         LA    R1,6(,R1)           POINT TO NEXT ENTRY
         CLI   19(R15),X'0A'       3340?
         BE    FASTDISK            YES
         LA    R1,6(,R1)           POINT TO NEXT ENTRY
         CLI   19(R15),X'07'       2305-2?
         BE    FASTDISK            YES
         LA    R1,6(,R1)           POINT TO NEXT ENTRY
         CLI   19(R15),X'06'       2305-1?
         BNE   FASTX               NO
FASTDISK LH    R15,MYDSCB-44+86    GET THE PHYSICAL RECORD SIZE
         AH    R15,2(,R1)          ADD THE BLOCK OVERHEAD
         CLI   MYDSCB-44+90,0      KEYED FILE?
         BE    NOTKEYED            NO
         SLR   R0,R0
         IC    R0,MYDSCB-44+90     GET THE KEYLENGTH
         AR    R15,R0              ADD THE KEYLENGTH
         AH    R15,4(,R1)          ADD THE KEY OVERHEAD
NOTKEYED SLR   R0,R0
         LH    R1,0(,R1)           GET THE TRACK CAPACITY
         DR    R0,R15              GET NUMBER OF BLOCKS PER TRACK
         B     GETLSTAR
FAST3380 LH    R15,MYDSCB-44+86    GET THE PHYSICAL RECORD SIZE
         LA    R15,12+31(,R15)     ADD DEVICE CONSTANTS
         SRL   R15,5               DIVIDE BY 32 AND ROUND UP
         CLI   MYDSCB-44+90,0      KEYED FILE?
         BNE   KEYD3380            YES
         LA    R15,15(,R15)        ADD COUNT AND GAP OVERHEAD
         B     CALC3380            PERFORM DEVICE DEPENDANT CALCS
KEYD3380 SLR   R1,R1               KEYED FILE PROCESSING
         IC    R1,MYDSCB-44+90     GET KEY LENGTH
         LA    R1,12+31(,R1)       ADD DEVICE CONSTANTS
         SRL   R1,5                DIVIDE BY 32 AND ROUND UP
         LA    R15,22(R1,R15)      ADD COUNT, KEY, DATA AND GAPS
CALC3380 SLR   R0,R0               CLEAR FOR DIVIDE
         LA    R1,1499             GET 3380 TRACK SIZE
         DR    R0,R15              GET NUMBER OF BLOCKS PER TRACK
         B     GETLSTAR
FAST3390 LH    R15,MYDSCB-44+86    GET THE PHYSICAL RECORD SIZE
         LR    R1,R15              COPY IT
         LA    R15,6+231(,R15)     ADD SIX
         SLR   R14,R14
         D     R14,=F'232'         DIVIDE BY 232 AND ROUND UP
         M     R14,=F'6'           MULTIPLY ("DN") BY 6
         AR    R15,R1              ADD DATA LENGTH ("DL")
         LA    R15,6+33(,R15)      ADD SIX
         D     R14,=F'34'          DIVIDE BY 34 AND ROUND UP
         LA    R15,10+9(,R15)      ADD COUNT AND DATA OVERHEAD
         CLI   MYDSCB-44+90,0      KEYED FILE?
         BE    CALC3390            NO, PERFORM DEVICE DEPENDANT CALCS
         SLR   R1,R1               KEYED FILE PROCESSING
         IC    R1,MYDSCB-44+90     GET KEY LENGTH
         LR    R14,R1              COPY IT
         LA    R1,6+231(,R1)       ADD SIX
         SLR   R0,R0
         D     R0,=F'232'          DIVIDE BY 232 AND ROUND UP
         M     R0,=F'6'            MULTIPLY ("KN") BY 6
         AR    R1,R14              ADD KEY LENGTH ("KL")
         LA    R1,6+33(,R1)        ADD SIX
         D     R0,=F'34'           DIVIDE BY 34 AND ROUND UP
         LA    R15,9(R1,R15)       ADD KEY OVERHEAD AND GET TOTAL
CALC3390 SLR   R0,R0               CLEAR FOR DIVIDE
         LA    R1,1729             GET 3390 TRACK SIZE
         DR    R0,R15              GET NUMBER OF BLOCKS PER TRACK
GETLSTAR ST    R1,BLKSATRK         SAVE THE NUMBER OF BLOCKS PER TRACK
         SLR   R15,R15
         ICM   R15,3,MYDSCB-44+98  GET TT OF DS1LSTAR TTR
         MR    R14,R1
         IC    R14,MYDSCB-44+100   GET R OF DS1LSTAR TTR
         BCTR  R14,0               DON'T COUNT LAST BLOCK
         AR    R15,R14             GET NUMBER OF BLOCKS IN FILE
         M     R14,BLKFACTR        GET NUMBER OF RECORDS IN FILE
         S     R15,SCRNLNES        GET LARGEST RECORD # FOR "FASTPATH"
         BNP   FASTX               TOO SMALL TO WARRANT "FASTPATH"
         ST    R15,MAXPOINT        SAVE IT
         OI    STATUS2,FASTREAD    INDICATE "FASTPATH" AVAILABILITY
FASTX    DS    0H
         BAL   R14,QUERYTRM        DETERMINE INITIAL DISPLAY MODE
         SPACE
************************************************************
*                                                          *
*         CALL PHASE 2 FOR MAIN PROCESSING                 *
*                                                          *
************************************************************
         SPACE
         L     R15,=V(REVIEW2)     GET ADDRESS OF PHASE 2
         BALR  R14,R15             GO TO PHASE 2
         TM    STATUS,STPODIR      IN MEMBER SELECT MODE?       GP@SECV
         BO    SELNLIST            YES, SHOW MEMBER LIST        GP@SECV
         B     EXITARC             NO, EXIT - PHASE 2 HAS SET RC
         SPACE
**********************************************************************
*                                                          *         *
*         ISSUE READ PARTITION TO TSO TERMINAL             *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
QUERYTRM TM    STATUS2,FSMODE      ALREADY IN FULLSCREEN MODE?
         BO    QRYFSMOK            YES
         STFSMODE ON,INITIAL=YES,NOEDIT=YES
         OI    STATUS2,FSMODE      FLAG FOR FUTURE REFERENCE
QRYFSMOK TM    OSBITS,X'13'        IBM OS?  (SOME FLAVOUR OF MVS?)
         BO    QRYORNOT            YES, BAD LUCK IF OS/VS2 SVS
         MVI   SACHAR,X'0E'        NO, LOAD 668X SET ATTRIBUTE CODE
QRYORNOT TM    GOTTERM+7,X'01'     IS THE QUERY BIT ON?
         BZ    NOT16CLR            NO, CAN'T DO A QUERY
         ST    R14,DOUBLE          YES, SAVE RETURN ADDRESS
         MVC   SBASAVE(TPGL),TPG   INITIALIZE TPG EXECUTE AREA
         TM    OSBITS,X'13'        IBM OS?  (SOME FLAVOUR OF MVS?)
         BO    IBMQUERY            YES, EXPLOIT 3270DS STRUCTURED FIELD
         LA    R1,RESETAID         RESET THE TERMINAL AID
         LA    R0,L'RESETAID             BEFORE ISSUING THE
         ICM   R1,8,=X'03'               READ PARTITION
         TPUT  (1),(0),R           TPUT FULLSCR,WAIT,NOHOLD
         TPG   QUERY,L'QUERY,NOEDIT,WAIT,MF=(E,SBASAVE)
         B     DIDQUERY
*              STRICTLY SPEAKING, QUERY RESULTS SHOULD BE USED TO
*        VERIFY THAT 3270DS STRUCTURED FIELD USAGE IS SUPPORTED, BUT
*        IT IS USED HERE BEFORE THE QUERY IS ISSUED TO REDUCE THE DELAY
*        BEFORE THE FIRST SCREEN IS DISPLAYED, BY ISSUING THE RESET AND
*        THE QUERY IN ONE I/O.  FUJITSU F6681 CONTROLLERS DO NOT SEEM
*        TO SUPPORT THE 3270DS STRUCTURED FIELD.  IF THIS IS A PROBLEM
*        UNDER MVS THEN JUST NOP THE 'BO    IBMQUERY' ABOVE.  ALL IBM
*        3274/3174 CONTROLLERS THAT SUPPORT QUERY ALSO SUPPORT 3270DS.
*              I THINK.
IBMQUERY DS    0H
         TPG   QUERYI,L'QUERYI,NOEDIT,WAIT,MF=(E,SBASAVE)
DIDQUERY OI    MODE,DIDQRY         REMEMBER THAT A QUERY WAS ISSUED
QUERYGET LA    R1,HOLDDIR          TEMPORARY TGET BUFFER FOR RESPONSE
         LA    R0,512                        FROM READ PARTITION
         ICM   R1,8,=X'81'         FLAGS FOR TGET ASIS,WAIT
         TGET  (1),(0),R           TGET ASIS,WAIT
         CLI   HOLDDIR,X'88'       QUERY RESPONSE AID?
         BNE   QUERYX              NO, STICK TO 3270 BASICS
         LA    R15,HOLDDIR         POINT TO THE AID
NOTSBFLD LA    R15,1(,R15)         IGNORE A BYTE
         BCT   R1,QUERYFIX         DECREMENT LENGTH
         B     QUERYX              JUST IN CASE THAT WAS THE LAST BYTE
QUERYFIX TM    3(R15),X'80'        LOOK LIKE A VALID QCODE?
         BNO   NOTSBFLD            NO, SKIP A BYTE
         CLI   0(R15),0            LENGTH LESS THAN 256?
         BNE   NOTSBFLD            NO, SKIP A BYTE
QUERYPRS CLI   2(R15),X'81'        QUERY REPLY ID?
         BNE   NOTSBFLD            NO, SKIP A BYTE
         CLI   3(R15),X'86'        QUERY REPLY COLOUR ID?
         BE    QUERYCLR            YES
         CLI   3(R15),X'87'        QUERY REPLY HIGHLIGHTING ID?
         BE    QUERYHLT            YES
         CLI   3(R15),X'85'        QUERY REPLY SYMBOL SETS ID?
         BE    QUERYSYM            YES
         CLI   3(R15),X'93'        QUERY REPLY PC ATTACHMENT ID?
         BE    QUERYPCA            YES
         CLI   3(R15),X'A6'        QUERY IMPLICIT PARTITION ID?
         BE    QUERYPCA            YES
NXTSBFLD SLR   R0,R0
         ICM   R0,3,0(R15)         LOAD SUB-FIELD LENGTH
         SR    R1,R0               SUBTRACT FROM TGET LENGTH
         BZ    QUERYEND            END OF QUERY REPLY DATA STREAM
         BM    QUERYGET            MORE DATA RETURNED IN NEXT BLOCK
         AR    R15,R0              POINT TO NEXT SUB-FIELD
         B     QUERYPRS            EXAMINE IT
QUERYCLR CLI   5(R15),8            AT LEAST EIGHT COLOUR PAIRS?
         BL    NXTSBFLD            NO, NO 7-COLOUR SUPPORT
         CLC   8(14,R15),=CL14'11223344556677' YES, ALL 7 SUPPORTED?
         BNE   NXTSBFLD            NO
         OI    MODE,COLOR          YES, REMEMBER IT
         CLI   5(R15),16           AT LEAST SIXTEEN COLOUR PAIRS?
         BL    NXTSBFLD            NO, NO 16-COLOUR SUPPORT
         OI    STATUS5,COLOR16     YES, REMEMBER IT
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QUERYHLT CLI   4(R15),4            AT LEAST FOUR HIGHLIGHTING PAIRS?
         BL    NXTSBFLD            NO, NO EXTENDED HIGHLIGHTING SUPPORT
         CLC   6(7,R15),=CL7'0112244'  YES, ALL 3 SUPPORTED?
         BNE   NXTSBFLD            NO
         OI    MODE,HILITE         YES, REMEMBER IT
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QUERYSYM OI    MODE,SYMSET         SYMBOL SETS SUB-FIELD RETURNED
         TM    4(R15),X'80'        GRAPHIC ESCAPE SUPPORTED?
         BZ    NXTSBFLD            NO
         OI    MODE,GEOK           YES, REMEMBER IT
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QUERYPCA OI    MODE,SYMSET         REMEMBER NON-FUJITSU HARDWARE
         B     NXTSBFLD            LOOK FOR NEXT QUERY REPLY SUB-FIELD
QUERYEND TM    MODE,SYMSET         WAS THERE A SYMBOL SETS SUB-FIELD?
         BZ    HAVSACHR            NO, DON'T CHANGE SA CODE
         MVI   SACHAR,X'28'        YES, MUST BE IBM 3270 EVEN ON MSP
HAVSACHR TM    MODE,COLOR+HILITE   7-COLOUR AND HIGHLIGHTING OK?
         BZ    QUERYX              NO, JUST USE DUAL INTENSITY
         OI    STATUS5,X3270       YES, ACTIVATE 3270 EXTENSIONS
QUERYX   L     R14,DOUBLE          RESTORE RETURN ADDRESS
         TM    STATUS5,COLOR16     SIXTEEN COLOUR TERMINAL?
         BOR   R14                 YES, ANY COLOUR CODE IS VALID
NOT16CLR NI    CHRCOLOR,X'F7'      NO, ONLY USE SEVEN COLOURS AT MOST
         NI    HEXCOLOR,X'F7'
         BR    R14
         SPACE
************************************************************
*                                                          *
*         RETURN FROM PHASE 2 TO TERMINATE                 *
*                                                          *
************************************************************
         SPACE
ERRTERM  LA    R1,MSGTERM
         LA    R0,L'MSGTERM
         BAL   R14,PUTMSG1
         SPACE
EXITA12  LA    R15,12
EXITA##  STH   R15,RC
EXITARC  TM    STATUS,STALLOC      FREE REQUIRED?
         BZ    NOFREE
         LA    R1,MYDAPL
         LA    R15,MYDAPB
         USING DAPB18,R15
         XC    0(40,R15),0(R15)
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,$DDNAME
         MVC   DA18MNM(8),=CL8' '
         MVC   DA18SCLS(2),=CL8' '
         BAL   R14,CALLDAIR        UNALLOCATE
         NI    STATUS,255-STALLOC  UNALLOCATED
         DROP  R15                 DAPB18
NOFREE   DS    0H
         ICM   R0,B'1111',DIVREG1  WAS "DIV" USED?               GP@P6*
         BNP   NODIV16             NO                                 *
         LA    R0,16               YES, GET ENTRY CODE (FREEMAIN)     *
         L     R15,DIVADDR1        LOAD REVDIV ENTRY POINT            *
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE          *
NODIV16  DS    0H                  ANY "DIV" HAS NOW BEEN FREED  GP@P6*
         SPACE
         IKJRLSA MYANS
         SPACE
         CLI   RC+1,0              IS RC ZERO?
         BZ    STACKDX             YES, BRANCH
         MVC   MYSTPB(STACKDL),STACKD
         SPACE
         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)
         SPACE
         TCLEARQ
STACKDX  DS    0H
         SPACE
**********************************************************************
*                                                          *         *
*         UPDATE 'REVIEW' PROFILE ON DISK                  *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
*    THE PROFILE CANNOT BE CHANGED BY A MEMBER LIST REVIEW ALONE.
*    THEREFORE, THIS CODE WILL ALWAYS BE SKIPPED FOR A PDS UNLESS
*    ACTUAL MEMBER CONTENTS WERE REVIEWED.  THIS CODE WILL BE SKIPPED
*    UNLESS A 'COLOR #' COMMAND OR A 'PFK' COMMAND WERE SUCCESSFULLY
*    ISSUED, OR THE SCROLL INPUT FIELD WAS FIDDLED WITH (OTHER THAN
*    ERASE-TO-END-OF-FIELD).
         SPACE
         TM    STATUS,STPROF       WAS THE PROFILE CHANGED?
         BZ    PROFOUTX            NO, AVOID NEEDLESS OPEN, I/O, CLOSE
         TM    STATUS5,RECURS      RECURSIVE 'REVIEW' SESSION?
         BO    PROFOUTX            YES, AVOID DISK I/O TO REWRITE PROF
         NI    PROFDATA+12,X'0F'   FORMAT COLOURS AND SCROLL AMOUNT
         CLI   PROFDATA+12,9
         BH    *+8
         OI    PROFDATA+12,X'F0'
         OI    PROFDATA+12,X'70'
         NI    PROFDATA+13,X'0F'
         CLI   PROFDATA+13,9
         BH    *+8
         OI    PROFDATA+13,X'F0'
         OI    PROFDATA+13,X'70'
         LA    R1,SCREENW-3960                                GYP93274
         MVC   PROFDATA+14(2),3960+SCRRGE-SCREEN(R1)          GYP93274
         SLR   R5,R5
         L     R4,540              GET POINTER TO CURRENT TCB
         L     R4,12(,R4)          POINT TO TIOT
         LA    R4,24(,R4)          POINT TO TIOELNGH
CHKPROFU CLC   4(8,R4),PROFDCB+DCBDDNAM-IHADCB
         BE    OPENPRFU            FILE EXISTS SO GO AND OPEN IT
         IC    R5,0(,R4)           GET TIOT ENTRY LENGTH
         AR    R4,R5               POINT TO NEXT TIOT ENTRY
         CLI   0(R4),0             ZERO LENGTH ENTRY?
         BNE   CHKPROFU            NO, CHECK OUT THIS ENTRY
         B     PROFOUTX            YES, NOT IN TIOT SO SKIP UPDATE
OPENPRFU LA    R4,DYNDCBW          POINT TO ACTUAL DCB AREA TO BE USED
         MVC   0(PROFDCBL,R4),PROFDCB       INITIALIZE THE PROFILE DCB
         USING IHADCB,R4
         MVI   OPEND,X'80'
         OPEN  ((R4),(UPDAT)),MF=(E,OPEND)
         MVI   SYNADSW,0           RESET I/O ERROR FLAG
         TIME  DEC
         STM   R0,R1,DOUBLE        SUPPLY UPDATE TIMESTAMP
         UNPK  PROFDATA+17(15),DOUBLE
         SLR   R3,R3               ZERO FETCHED BYTE COUNT
         ST    R3,HOLDEND          INDICATE NO BUFFER YET
         MVC   BLDL+4(8),PROFMEM   LOAD PROFILE MEMBER NAME
         BLDL  (R4),BLDL           VERIFY EXISTENCE OF PROFILE MEMBER
         LTR   R15,R15             DOES PROFILE MEMBER EXIST?
         BNZ   CLOSPRFU            NO
         CLI   BLDL+15,0           MEMBER FROM A CONCATENATION?
         BNE   CLOSPRFO            YES, CAN'T WRITE TO IT
         FIND  (R4),BLDL+12,C      POINT TO MEMBER FOR FIRST READ
         LA    R1,SCREENW-4092                                GYP93274
         LA    R1,4092(,R1)        POINT TO BUFFER IF BLK NOT TOO BIG
         ST    R1,HOLDTOP          SAVE THE BUFFER ADDRESS
         LA    R0,3760             GET MAX BUFFER SIZE FOR SCREENW
         CH    R0,DCBBLKSI         IS BLKSIZE TOO BIG FOR SCREENW?
         BNL   READPRFU            NO, SO NO SB00 ABEND & SKIP GETMAIN
         LH    R0,DCBBLKSI         YES, GET THE REQUIRED BUFFER SIZE
         ST    R0,HOLDEND          SAVE IT
         GETMAIN RU,LV=(0),LOC=BELOW
         ST    R1,HOLDTOP          SAVE THE BUFFER ADDRESS
READPRFU L     R2,HOLDTOP          POINT TO THE BUFFER AREA
         READ  DYNDECBW,SF,(R4),(R2),'S',MF=E
         CHECK DYNDECBW            WAIT FOR THE READ
         CLI   SYNADSW,0           I/O ERROR?
         BNE   CLOSPRFU            YES, RETRY WITH OPEN FOR OUTPUT
         LH    R2,DCBBLKSI
         L     R1,DYNDECBW+16      POINT TO THE IOB
         SH    R2,14(,R1)          GET LENGTH OF BLOCK READ
         LA    R5,PROFDATA(R3)     POINT TO DATA TO REWRITE
         AR    R3,R2               ACCUMULUATE BYTE COUNT SO FAR
         WRITE DYNDECBW,SF,(R4),(R5),'S',MF=E
         CHECK DYNDECBW            WAIT FOR THE WRITE
         CLI   SYNADSW,0           I/O ERROR?
         BNE   CLOSPRFU            YES, RETRY WITH OPEN FOR OUTPUT
         CH    R3,PROFSIZE         UPDATED ENOUGH YET?
         BL    READPRFU            NO, READ ANOTHER BLOCK
CLOSPRFU MVI   CLOSED,X'80'
         CLOSE ((R4)),MF=(E,CLOSED)
         CH    R3,PROFSIZE         UPDATED ENOUGH DATA?
         BNL   PROFOTFM            YES, GO AND EXIT
         OPEN  ((R4),(OUTPUT)),MF=(E,OPEND)
         MVI   SYNADSW,0           RESET I/O ERROR FLAG
         SLR   R3,R3               ZERO WRITTEN BYTE COUNT
WRITEPRF LA    R2,PROFDATA(R3)     POINT TO DATA TO WRITE
         LH    R5,PROFSIZE         GET PROFILE MEMBER SIZE
         SR    R5,R3               GET DATA LEFT TO WRITE
         CH    R5,DCBBLKSI         NEED TO WRITE LESS THAN A BLOCK?
         BNL   *+8                 NO
         STH   R5,DCBBLKSI         YES, SAVE THIS LESSER AMOUNT
         AH    R3,DCBBLKSI         ACCUMULATE BYTES ABOUT TO BE WRITTEN
         WRITE DYNDECBW,SF,(R4),(R2),'S',MF=E
         CHECK DYNDECBW            WAIT FOR THE READ
         CLI   SYNADSW,0           I/O ERROR?
         BNE   CLOSPRFO            YES, GIVE UP
         CH    R3,PROFSIZE         WRITTEN ENOUGH YET?
         BL    WRITEPRF            NO, WRITE ANOTHER BLOCK
         SLR   R0,R0
         ST    R0,BLDL+12          ENSURE NO DIRECTORY ENTRY USERDATA
         STOW  (R4),BLDL+4,A       ADD THE MEMBER TO THE DIRECTORY
CLOSPRFO MVI   CLOSED,X'80'
         CLOSE ((R4)),MF=(E,CLOSED)
         DROP  R4                  IHADCB
PROFOTFM ICM   R0,15,HOLDEND       ANY BUFFER TO FREE?
         BZ    PROFOUTX            NO
         L     R1,HOLDTOP          YES, GET ITS ADDRESS
         FREEMAIN RU,A=(1),LV=(0)  FREE THE BUFFER
PROFOUTX DS    0H
         SPACE
         LH    R15,RC
         SPACE
************************************************************
*                                                          *
*         EXIT TO CALLER                                   *
*                                                          *
************************************************************
         SPACE
EXIT     LR    R2,R15
         STAX  ,                   DELETE ATTENTION EXIT        GP@SECV
         TM    STATUS2,SETSIZED    NEED TO RESTORE SCREEN SIZE? GP@SECV
         BZ    NOSTSIZE            NO                           GP@SECV
         MVC   GOTTERM+7(1),GOTTERM+2                           GP@SECV
         XC    GOTTERM(3),GOTTERM                               GP@SECV
         XC    GOTTERM+4(3),GOTTERM+4                           GP@SECV
         STSIZE SIZELOC=GOTTERM,LINELOC=GOTTERM+4               GP@SECV
NOSTSIZE DS    0H                                               GP@SECV
         TM    STATUS2,FSMODE      STILL IN FULL SCREEN MODE?    GP@P6*
         BZ    FSMODEX             NO                                 *
         CLI   SACHAR,X'0E'        FUJITSU TERMINAL HARDWARE?         *
         BNE   SETMDOFF            NO, JUMP TO FAST EXIT              *
*                                                                     *
*        FOR FAST TERMINATION WE DON'T WANT TO DO ANY MORE TERMINAL   *
*   I/O, BUT MERELY TELL THE SYSTEM THAT THIS FULLSCREEN APPLICATION  *
*   HAS FINISHED, AND THAT THE NEXT OUTPUT IS TO START ON THE FIRST   *
*   LINE (ASSUMING LINE MODE I/O), WHICH SHOULD CAUSE THE SYSTEM TO   *
*   CLEAR THE SCREEN WITH THE TPUT THAT SUPPLIES THE FIRST LINE.  BY  *
*   POSTPONING THIS ACTIVITY, REVIEW IS FREE TO FINISH PRONTO.  MANY  *
*   PROGRAMS USE A TPUT TO CLEAR THE SCREEN, WHICH MAY INITIATE A     *
*   SWAP OUT AND THEREFORE NEEDLESSLY DELAY THE PROMPT FROM THE TMP   *
*   OR ISPF OR CALLER IN GENERAL.                                     *
*        CHARACTER ATTRIBUTES OF A DATA STREAM DISPLAY CHARACTER ARE  *
*   INHERITED FROM THE PREVIOUS CHARACTER BACK TO THE SET ATTRIBUTE   *
*   ORDERS.  THE DATA AT THE BEGINNING OF EACH WRITE WILL HAVE, IN    *
*   THE ABSENCE OF APPROPRIATE ORDERS, DEFAULT CHARACTER (AS DISTINCT *
*   FROM FIELD) ATTRIBUTES.  THAT IS, FOR IBM 3270, CHARACTER ATTRIB- *
*   UTES TO BE INHERITED BY DISPLAY CHARACTERS ARE NOT REMEMBERED     *
*   ACROSS WRITE COMMANDS.  UNFORTUNATELY, THIS IS NOT THE CASE WITH  *
*   FUJITSU F668X EXTENDED DATA STREAMS.  SUPPOSE A "MONOCHROME" PFD  *
*   SESSION (REALLY 3-COLOURS) INVOKES REVIEW TO LOOK AT A PDS DIR-   *
*   ECTORY.  PF3 WILL EXIT REVIEW, BUT MAY LEAVE THE SCREEN WITH A    *
*   COMPLETELY PINK PFD EDIT SESSION.  RATHER THAN LEAVE THE USER     *
*   TO HIT CLEAR AND THEN PA2, WE WILL ISSUE AN ERASE/WRITE OR        *
*   ERASE/WRITE ALTERNATE (DEPENDING ON SCREEN SIZES) WITH AN EXTRA   *
*   TPUT.  THIS IS A SCREEN EQUIPMENT DEPENDENCY AND NOT AN           *
*   OPERATING SYSTEM DEPENDENCY.                                      *
*                                                                     *
         LA    R1,ERSWRALT         POINT TO ERASE/WRITE ALTERNATE     *
         TM    STATUS2,SETSIZED    REVERTING BACK TO ALTERNATE SIZE?  *
         BO    GOTERASE            YES                                *
         CLI   SCRNLNES+3,24       STAYING WITH ALTERNATE SIZE?       *
         BH    GOTERASE            YES                                *
         LA    R1,ERASEWRT         NO, SCREEN TO CLEAR IS 24 BY 80    *
GOTERASE LA    R0,L'ERASEWRT       LOAD DATA STREAM LENGTH            *
         ICM   R1,8,=X'03'         TPUT FLAGS (FULLSCREEN)            *
         TPUT  (1),(0),R           RESET CHARACTER ATTRIBUTES         *
SETMDOFF STLINENO LINE=1,MODE=OFF  TURN OFF FS MODE                   *
         NI    STATUS2,255-FSMODE  FULL SCREEN MODE NOW OFF           *
FSMODEX  DS    0H                                                GP@P6*
         ICM   R1,B'1111',ARLAREA  GET ARL ADDRESS               GP@P6*
         BZ    NOARL               NO ARL WAS CREATED                 *
         L     R0,ARLPOOL          LOAD ARL SUBPOOL AND SIZE          *
         FREEMAIN R,A=(1),LV=(0)   FREE THE ALLOCATION RETRIEVAL LIST *
NOARL    DS    0H                                                GP@P6*
         LR    R1,R13              POINT TO AREA TO BE FREED (@DATA)
         L     R0,SIZE
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         TM    STATUS5,RECURS      RECURSIVE 'REVIEW' SESSION?   GP@P6*
         BZ    FREEDYN             NO                                 *
         L     R15,56(,R13)        POINT TO PREVIOUS @DATA (R9 VALUE) *
*                                  COPY RECALL STACK POINTERS         *
         MVC   RECALPTR-@DATA(8,R15),RECALPTR                         *
FREEDYN  DS    0H                                                GP@P6*
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2
         LM    0,12,20(R13)
         L     R14,12(,R13)
         BR    R14                 TERMINATE 'REVIEW'
         SPACE
************************************************************
*                                                          *
*         CALL IKJDAIR SERVICE ROUTINE                     *
*                                                          *
************************************************************
         SPACE
CALLDAIR ST    R14,DAIRREGS
         AIF   (NOT &MVS).SKIP6
         L     R15,16
         TM    732(R15),X'80'     CVTDAIR
         BNO   DAIRLINK
         L     R15,732(,R15)
         BALR  R14,R15
         B     DAIRFINI
DAIRLINK DS    0H
.SKIP6   ANOP
         LINK  EPLOC=IKJDAIR,SF=(E,LINKAREA)
DAIRFINI L     R14,DAIRREGS
         BR    R14
IKJDAIR  DC    CL8'IKJDAIR'
         SPACE
************************************************************
*                                                          *
*         DYNAMIC ALLOCATION FAILURE ROUTINE               *
*                                                          *
************************************************************
         SPACE
DAIRFAIL ST    R14,MYDFREGS
         LA    R1,MYDFPARM
*        USING DFDSECTD,R1         MAPPED BY IKJEFFDF DFDSECT=YES MACRO
         ST    R15,MYDFRC
         LA    R15,MYDFRC
         ST    R15,4(,R1)          DFRCP
         LA    R15,MYDAPL
         ST    R15,0(,R1)          DFDAPLP
         SLR   R15,R15
         ST    R15,MYJEFF02
         LA    R15,MYJEFF02
         ST    R15,8(,R1)          DFJEFF02
         LA    R15,1               DFDAIR               (DFSVC99 IS 50)
         STH   R15,MYDFID
         LA    R15,MYDFID
         ST    R15,12(,R1)         DFIDP
         MVC   16(4,R1),CPPLPTR    DFCPPLP
         LINK  EPLOC=IKJEFF18,SF=(E,LINKAREA)
*        DROP  R1                  DFDSECTD
         L     R15,MYDFRC
         L     R14,MYDFREGS
         BR    R14
IKJEFF18 DC    CL8'IKJEFF18'
         SPACE
************************************************************
*                                                          *
*         PHASE 1 INTERFACES TO PHASE 2                    *
*                                                          *
************************************************************
         SPACE
PUTMSG1  ST    R14,BASE1+12
         L     R15,=V(PUTMSG)
         LM    R10,R12,BASE2       SWITCH BASE REGS
         L     R3,BASE2+12                                        GP@P6
         BALR  R14,R15
         LM    R10,R12,BASE1       RESTORE BASE REGS
         L     R14,BASE1+12
         BR    R14
         SPACE
**********************************************************************
*                                                          *         *
*         ATTENTION EXIT                                   * GP@SECV *
*                                                          *         *
**********************************************************************
         SPACE
         USING ATTN,R15            ESTABLISH ADDRESSABILITY
ATTN     STM   R14,R12,12(R13)     SAVE REGISTERS
         L     R3,8(,R1)           GET INTERRUPT FLAG ADDRESS
         OI    0(R3),FLAGI         SET INTERRUPT REQUEST FLAG
         STFSMODE ON,NOEDIT=YES    RESTORE FULL SCREEN MODE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN
         DROP  R15                 ATTN
         EJECT
************************************************************
*                                                          *
*         PHASE 1 CONSTANTS                                *
*                                                          *
************************************************************
         SPACE
         LTORG
*              TRKSIZE  D-O/H  K-O/H      DISKS
DISKTABL DC    H'13165',H'135',H'56'      3330/3330-1/F478/F479
         DC    H'19254',H'185',H'82'      3350/F493
         DC    H'27051',H'258',H'118'     F6421
         DC    H'08535',H'167',H'75'      3340
         DC    H'14858',H'198',H'91'      2305-2
         DC    H'14576',H'432',H'202'     2305-1
*        DC    H'7403',H'101+',H'45+'     2314/2319
*        DC    H'36000',H'484',H'256'  ?  3375
*        DC    H'47968',H'492',H'256'  ?  3380/F6425/F6427
*        DC    H'58786',H'2104',H'256' ?  3390
PFKDEF   DS    0D                  INITIAL VALUES OF PF KEYS
         DC    X'F1',CL15'HEL '    1
         DC    X'F2',CL15'ASCII '  2
         DC    X'F3',CL15'END '    3
         DC    X'F4',CL15'SMF '    4
         DC    X'F5',CL15'FIND '   5
         DC    X'F6',CL15'FULL '   6
         DC    X'F7',CL15'UP '     7
         DC    X'F8',CL15'DOWN '   8
         DC    X'F9',CL15'HEX '    9
         DC    X'7A',CL15'LEFT '   10
         DC    X'7B',CL15'RIGHT '  11
         DC    X'7C',CL15'RECALL ' 12
         DC    X'C1',CL15'HEL '    13
         DC    X'C2',CL15'ASCII '  14
         DC    X'C3',CL15'END '    15
         DC    X'C4',CL15'SMF '    16
         DC    X'C5',CL15'FIND '   17
         DC    X'C6',CL15'FULL '   18
         DC    X'C7',CL15'UP '     19
         DC    X'C8',CL15'DOWN '   20
         DC    X'C9',CL15'HEX '    21
         DC    X'4A',CL15'LEFT '   22
         DC    X'4B',CL15'RIGHT '  23
         DC    X'4C',CL15'RECALL ' 24
PFKDEFL  EQU   16                  LENGTH OF EACH DEFAULT ENTRY
         SPACE
OBTAIN   CAMLST SEARCH,2,3,4
OBTAINL  EQU   *-OBTAIN
         SPACE
LOCATE   CAMLST NAME,2,,4
LOCATEL  EQU   *-LOCATE
         SPACE
DIVADDR1 DC    AL1(X'80'),VL3(REVDIV)                             GP@P6
         SPACE
TPG      TPG   QUERY,L'QUERY,NOEDIT,WAIT,MF=L                     GP@P6
TPGL     EQU   *-TPG                                              GP@P6
         SPACE
PROFDCB  DCB   DSORG=PO,DDNAME=ISPPROF,MACRF=(R,W),RECFM=FB,LRECL=80,  +
               EODAD=EODADPRF,SYNAD=SYNADPRF
PROFDCBL EQU   *-PROFDCB
PROFMEM  DC    CL8'$$REVIEW'
PROFSIZE DC    H'1600'
         SPACE
ERASEWRT DC    X'27F540'          ESCAPE + ERASE/WRITE + WCC    GP@SECV
ERSWRALT DC    X'277E40'          ESCAPE + ERASE/WRITE ALT + WCC  GP@P6
RESETAID DC    X'27F1C3'          ESCAPE + WRITE + WCC            GP@P6
QUERY    DC    X'F3000501FF02'    WRITE STRUCTURED FIELD + QUERY  GP@P6
QUERYI   DC    X'F300064000F1C3000501FF02' WSF, 3270DS, WRT+WCC, QUERY
         SPACE
MSG01    DC    C'"REVIEW" ENCOUNTERED AN ERROR IN PARSE SERVICE ROUTINE+
               '
MSG02    DC    C'IKJ58503I DATA SET '
MSG02A   DC    C' NOT IN CATALOG'
MSG03    DC    C'"REVIEW" ENCOUNTERED AN ERROR IN DEFAULT SERVICE ROUTI+
               NE'
MSG05    DC    C'IKJ58509I DATA SET NAME REQUIRED WHEN MEMBER IS SPECIF+
               IED'
*SG06    DC    C'ORGANIZATION OF DATA SET MUST BE PARTITIONED OR SEQUEN
*              TIAL'
*SG07    DC    C'DATA SET IS PARTITIONED, MEMBER NOT SPECIFIED'
MSG09    DC    C'"REVIEW" IS UNABLE TO OBTAIN DSCB FOR DATA SET'
MSG10    DC    C'"REVIEW" OF VSAM DATA SET SPECIFIED BUT ENVIRONMENT NO+
               T APF AUTHORIZED'
MSGX     DC    C' - TRY "REVVSAM"'
MSG11    DC    C'"REVIEW" OF SUBSYSTEM DATA SET SPECIFIED BUT ENVIRONME+
               NT NOT APF AUTHORIZED'
MSG12    DC    C'"REVIEW" FOUND INSUFFICIENT STORAGE AVAILABLE IN EXTEN+
               DED REGION'
MSG14    DC    C'FILENAME '
MSG14A   DC    C' INVALID, MORE THAN 8 CHARACTERS          '
MSG14B   DC    C' IS NOT CURRENTLY ALLOCATED               '
MSG14C   DC    C' NOT ALLOCATED TO A DASD OR TAPE DATA SET '
MSG15    DC    C' HAS MORE THAN 16 EXTENTS ON '
*SGRECFM DC    C'RECORD FORMAT U NOT SUPPORTED'
MSGTERM  DC    C'"REVIEW" FAILED BECAUSE TERMINAL IS NOT A 3270 DISPLAY+
               '
STACKD   STACK DELETE=ALL,MF=L
STACKDL  EQU   *-STACKD
         SPACE
*                   DC    (((*-C-1)/N)*N+N+C-*)X'00'
*                 WHERE N IS BOUNDARY (I.E. 256, 4096, ...)
*                 AND C IS THE BEGINNING OF THE CSECT.
         DC    (((*-CSECT1-1)/256)*256+256+CSECT1-*)X'00'
         DS    0D
         TITLE '  R E V I E W   -   P H A S E   2  '
************************************************************
*                                                          *
*         PHASE 2 INITIALIZATION                           *
*                                                          *
************************************************************
         SPACE
*
*         FROM THIS POINT ON, PROCESSING IS THE SAME
*         FOR BOTH DSNAME AND DDNAME OPTIONS.
*
*         $DSNAME  - CONTAINS THE FULLY QUALIFIED DSNAME,
*                    FROM THE USER OR FROM THE JFCB.
*         $MEMBER  - CONTAINS THE MEMBER NAME, IF SPECIFIED,
*                    FROM THE USER OR FROM THE JFCB.
*         $DDNAME  - CONTAINS THE DDNAME, FROM IKJDAIR OR
*                    FROM THE USER.
*         $UCBAD   - CONTAINS THE UCB ADDRESS,
*                    FROM THE TIOT ENTRY.
*         $VOLSER  - CONTAINS THE VOLUME, FROM THE UCB POINTED
*                    TO BY THE TIOT ENTRY.
*
*         IF THE USER SPECIFIED A DSNAME (DID NOT SPECIFY THE FILE
*         KEYWORD) THEN THE STALLOC BIT IS SET ON SO THE DDNAME
*         WILL BE UNALLOCATED WHEN THE COMMAND IS FINISHED WITH IT.
*
REVIEW2  CSECT
         ENTRY PUTMSG
         ENTRY SEQDCB
         WXTRN REVSMF
         USING *,R10,R11,R12,R3
         LR    R10,R15             RESET BASE REGISTER
         LA    R15,1
         LA    R11,4095(R15,R10)   BASE
         LA    R12,4095(R15,R11)   BASE
         LA    R3,4095(R15,R12)    BASE                           GP@P6
         ST    R14,RET1
         SPACE
**********************************************************************
*                                                          *         *
*         PERFORM PHASE 2 INITIALIZATION                   *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
         L     R5,INIT2ADR         LOAD SUBROUTINE ADDRESS
         BR    R5                  PERFORM INITIALIZATION
         SPACE
         USING IHADCB,R4
         SPACE
************************************************************
*                                                          *
*         BUILD DATA SET NAME FOR TOP LINE                 *
*                                                          *
************************************************************
         SPACE
NEWNAME  MVC   DSPLUS(46),DSNAIM
         LA    R15,DSPLUS+2
         AH    R15,DSNAIM          POINT PAST DATA SET NAME
         TM    DSORG,X'02'         CHECK FOR PDS
         BO    DSPMEMBR            GO TACK ON THE MEMBER NAME    GP@P6*
* THE ABOVE TEST WILL WORK EVEN FOR A MEMBER NAMED X'4040404040404040'*
         CLI   $MEMBER,C' '        MEMBER NAME TO BE DISPLAYED?       *
         BNE   DSPMEMBR            YES, GO TACK IT ON FOR SUBSYS D/S  *
         LR    R1,R15                                                 *
         MVC   0(7,R1),=C' ON VIO'                                    *
         LA    R15,6(,R15)         POINT TO LAST CHARACTER            *
         CLI   $VOLSER,C' '        REALLY ON VIO?                     *
         BE    DSPLUSX             YES                                *
         MVC   4(6,R1),$VOLSER     NO, SHOW REAL VOLUME               *
         LA    R15,3(,R15)         POINT TO LAST CHARACTER       GP@P6*
         B     DSPLUSX
DSPMEMBR MVC   1(8,R15),$MEMBER    MOVE IN MEMBER NAME
         LA    R1,8(,R15)          POINT TO LAST MEMBER NAME CHARACTER
         LA    R6,7                MAXIMUM NUMBER OF TRAILING BLANKS
         MVI   0(R15),C'('
DSPMEM   CLI   0(R1),C' '          TRAILING BLANK?
         BNE   DSPMEMX             NO, SHOW MEMBER NAME UP TO HERE
         BCTR  R1,0                YES, POINT TO PREVIOUS CHARACTER
         BCT   R6,DSPMEM           GET NEW LENGTH CODE AND TEST CHAR
DSPMEMX  TR    1(8,R15),FULLT      TRANSLATE OUT UNPRINTABLES   GP@SECV
         LA    R15,2(R6,R15)       POINT PAST MEMBER NAME
         MVI   0(R15),C')'
         CLI   BLDL+14,0           R OF TTR 0? (MEM NOT FOUND?) GP@SECV
         BE    DSPLUSX             YES, NO SPF STATS            GP@SECV
         MVC   DOUBLE(1),BLDL+17   GET USER DATA LENGTH BYTE    GP@SECV
         NI    DOUBLE,X'7F'        TURN OFF ALIAS FLAG          GP@SECV
         CLI   DOUBLE,15           SPF/PFD TYPE USER DATA?      GP@SECV
         BH    DSPLUSX             NO, END OF NAME FORMAT       GP@SECV
         CLI   DOUBLE,14                                        GP@SECV
         BL    DSPLUSX             NO, END OF NAME FORMAT       GP@SECV
         TM    BLDL+25,X'0F'       DATE SIGN AS EXPECTED?        GP@P6
         BNO   DSPLUSX             NO, END OF NAME FORMAT        GP@P6
         TM    BLDL+29,X'0F'       DATE SIGN AS EXPECTED?        GP@P6
         BNO   DSPLUSX             NO, END OF NAME FORMAT        GP@P6
         MVC   1(8,R15),=C' - VV.MM'                            GP@SECV
         SLR   R1,R1                                            GP@SECV
         IC    R1,BLDL+18          GET SPF VERSION NUMBER       GP@SECV
         CVD   R1,DOUBLE                                        GP@SECV
         OI    DOUBLE+7,X'0F'                                   GP@SECV
         UNPK  4(2,R15),DOUBLE+6(2)                             GP@SECV
         IC    R1,BLDL+19          GET SPF MODIFICATION NUMBER  GP@SECV
         CVD   R1,DOUBLE                                        GP@SECV
         OI    DOUBLE+7,X'0F'                                   GP@SECV
         UNPK  7(2,R15),DOUBLE+6(2)                             GP@SECV
         LA    R15,8(,R15)         ADJUST POINTER               GP@SECV
DSPLUSX  LA    R1,DSPLUS+1
         SR    R15,R1
         STH   R15,DSPLUS
         LA    R1,BUFFSIZE
         ST    R1,CBPRM1
         LA    R1,SCRNLNES
         ST    R1,CBPRM2
         LA    R1,SCREENW-4092                                GYP93274
         LA    R1,4092(,R1)                                   GYP93274
         MVC   0(SCREENL,R1),SCREEN
         LR    R15,R1              COPY THE BUFFER ADDRESS       GP@P6*
         TM    STATUS5,X3270       IN 7-COLOUR MODE?                  *
         BO    GOTPARM3            YES, HAVE CORRECT ADDRESS          *
         LA    R15,3(,R15)         NO, SKIP OVER SA,COLOUR            *
         MVI   0(R15),X'C1'        SUPPLY THE WCC                     *
GOTPARM3 DS    0H                  NOW HAVE CORRECT BUFFER ADDR       *
         ST    R15,CBPRM3          SAVE BUFFER ADDRESS FOR REVCMPBF   *
         TM    STATUS4,CSRSW       CURSOR SCROLLING ACTIVE?           *
         BO    GOTRANGE            YES, DON'T SHOW NUMERICS           *
         MVC   SCRRGE-SCREEN(2,R1),=C'PG'                             *
         TM    STATUS4,PGSW        FULL PAGE SCROLLING ACTIVE?        *
         BO    GOTRANGE            YES, DON'T SHOW NUMERICS           *
         MVC   SCRRGE-SCREEN(2,R1),=C'HF'                             *
         TM    STATUS4,HFSW        HALF PAGE SCROLLING ACTIVE?        *
         BO    GOTRANGE            YES, DON'T SHOW NUMERICS      GP@P6*
         L     R0,SCROLL           SCROLL AMOUNT                GP@SECV
         CVD   R0,DOUBLE                                        GP@SECV
         OI    DOUBLE+7,X'0F'      DISPLAY SCROLL AMOUNT        GP@SECV
         UNPK  SCRRGE-SCREEN(2,R1),DOUBLE+6(2)                  GP@SECV
GOTRANGE LA    R15,SCRDSN-SCREEN(,R1)
         LR    R0,R15
         LH    R1,DSPLUS
         CH    R1,HW54             DSPLUS TOO LONG?              GP@P6
         BNH   *+8                 NO                            GP@P6
         LA    R1,54               YES, TRUNCATE IT (SPF STATS)  GP@P6
         BCTR  R1,0
         EX    R1,DSPLUSEX
         LA    R15,1(R1,R15)
         MVI   0(R15),C' '
         LR    R15,R0
         MVC   MSGDSN,0(R15)
         SPACE
         BAL   R14,FILLHOLD
         B     FILLSCR
DSPLUSEX MVC   0(0,R15),DSPLUS+2   <<< EXECUTED >>>
         SPACE
************************************************************
*                                                          *
*         READ ENOUGH RECORDS TO FILL HOLD AREA            *
*                                                          *
************************************************************
         SPACE
FILLHOLD ST    R14,HOLDR
         L     R0,HOLDPTR
         L     R1,SAVHOLDL
         SLR   R14,R14
         SLR   R15,R15
         ICM   R15,8,BLANKS        LOAD BLANK PAD CHARACTER
         MVCL  R0,R14              FILL HOLD AREA WITH BLANKS
         L     R7,HOLDTOP          POINT TO HOLD AREA DIRECTORY
         LH    R8,PAGESIZE         NUMBER OF DATA LINES PER SCREEN
HILLOOP  DS    0H
         BAL   R14,GET
         LA    R0,1                COMPUTE
         A     R0,COUNT             THE
         ST    R0,COUNT              RECORD NUMBER
         ST    R0,DIRNUM(,R7)      STORE THE RECORD NUMBER
         ST    R1,DIRLEN(,R7)      LENGTH IN DIRECTORY
         MVC   DIRTTR(4,R7),TTR    SAVE BLOCK ADDRESS            GP@P6
         NI    DIRNXT(R7),X'7F'    RESET RRDS EMPTY SLOT FLAG    GP@P6
         LTR   R1,R1               END OF FILE?
         BM    HILLED              YES, BRANCH
         OC    DIRNXT(1,R7),DEBLOCKS COPY RRDS EMPTY SLOT FLAG   GP@P6
         C     R1,SAVLRECL         IS RECORD LONGER THAN MAX?
         BNH   *+8                 NO, SKIP NEXT INSTR
         L     R1,SAVLRECL         YES, TRUNCATE TO MAX
         LR    R0,R2               ADDRESS TO MOVE FROM
         L     R14,DIRREC(,R7)     ADDRESS TO MOVE TO
         TM    TSTRECFM,X'40'      RECFM V?
         BZ    HILLNOTV            NO
         SH    R14,HW4             YES, MOVE TO PTR MINUS 4
         L     R15,DIRLEN(,R7)
         SH    R15,HW4
         ST    R15,DIRLEN(,R7)
HILLNOTV LR    R15,R1              LENGTH FOR MOVE
         MVCL  R14,R0
         LR    R1,R7               SAVE PTR TO MOST CURRENT ENTRY
         L     R7,DIRNXT(,R7)      POINT TO NEXT DIRECTORY ENTRY
         BCT   R8,HILLOOP
         LR    R7,R1               GET MOST CURRENT ENTRY
HILLED   DS    0H
         ST    R7,HOLDEND          SAVE LAST RECORD ENTRY
         L     R14,HOLDR
         BR    R14
         SPACE
************************************************************
*                                                          *
*         SET UP THE SCREEN HEADER PRIOR TO DISPLAY        *
*                                                          *
************************************************************
         SPACE
FILLSCR  NI    STATUS4,255-RFRSH   REFRESH NO LONGER REQUIRED
         NI    FINDSW,255-FACT     FIND IS NO LONGER ACTIVE           *
         LA    R1,SCREENW-4092                                GYP93274
         LA    R1,4092(,R1)                                   GYP93274
         LA    R15,SCRCOL-SCREEN(,R1)
         MVC   0(8,R15),BLANKS
         ICM   R0,B'1111',AMNLR    GET NUMBER OF RECORDS (ICF)   GP@P6*
         BZ    NOAMNLR             IGNORE ZERO COUNTER                *
         MVC   SCRHDIND-SCREEN+1(3,R1),=C' OF'                        *
         CVD   R0,DOUBLE           DISPLAY OSTENSIBLE RECORD CONTENTS *
         OI    DOUBLE+7,X'0F'      SUPPORT UP TO 9,999,999 RECORDS    *
         UNPK  1(7,R15),DOUBLE+4(4)                                   *
         B     FILLCOLX            DO NOT SHOW FIRST AND LAST COLUMNS *
NOAMNLR  DS    0H                  SHOW FIRST AND LAST COLUMNS   GP@P6*
         LH    R1,OFFSET
         LA    R1,1(,R1)
         LA    R0,79(,R1)
         TM    MODE,MODEX
         BZ    *+8
         SH    R0,HW40
         CH    R0,RECSIZE
         BNH   *+8
         LH    R0,RECSIZE
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         CH    R1,HW1000
         BL    FILL3DIG
         UNPK  0(4,R15),DOUBLE+5(3)
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  5(3,R15),DOUBLE+6(2)
         B     FILLCOLX
FILL3DIG UNPK  0(3,R15),DOUBLE+6(2)
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  4(3,R15),DOUBLE+6(2)
FILLCOLX DS    0H
         SPACE
************************************************************
*                                                          *
*         SET UP THE COLUMN HEADER PRIOR TO DISPLAY        *
*                                                          *
************************************************************
         SPACE
*               IT WOULD BE MORE EFFICIENT TO DO MOST OF THIS WORK
*               ONLY WHEN THE OFFSET IS INITIALIZED OR CHANGED
*               AND SAVE THE RESULTS.
         SPACE
         LA    R1,SCREENW-3960                                GYP93274
         LA    R6,3960+SCREENL(,R1)                           GYP93274
         MVI   LINKAREA,0          RESET TEMP COLOUR FLAG       GP@P6
         LA    R0,6                YELLOW FOR CHARACTER MODE    GP@P6
         TM    MODE,MODEX          HEX MODE?                    GP@SECV
         BZ    *+8                 NO                           GP@SECV
         LA    R0,5                YES, USE TURQUOISE INSTEAD   GP@P6
*                                                               GP@SECV
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR       GP@P6
         MVI   0(R6),C' '
         MVC   1(79,R6),0(R6)
         LH    R1,OFFSET
         TM    MODE,MODEX          HEX MODE?                    GP@SECV
         BO    HEXCOLNM            YES                          GP@SECV
         LTR   R1,R1               IS OFFSET ZERO?
         BNZ   *+10                NO                           GP@P6
         MVC   0(8,R6),COL1LBL     YES, SPECIAL CASE, 1         GP@P6
         SLR   R0,R0
         LA    R14,10
         DR    R0,R14
         SR    R14,R0              10 MINUS REMAINDER
         LTR   R0,R0               WAS REMAINDER 0?
         BZ    *+6                 YES, USE 0, NOT 10
         LR    R0,R14
*
         LR    R14,R6
         AR    R14,R0              ADD (0 TO 9) TO LINE
         BCTR  R14,0               START AT LINE-1 FOR OFFSET 0
*                                  LINE+8 FOR OFFSET 1
*                                  LINE+7 FOR OFFSET 2
*                                  LINE+6 FOR OFFSET 3
*                                  LINE+0 FOR OFFSET 9
         LH    R1,OFFSET
         AR    R1,R0               ADD (0 TO 9) TO OFFSET
         LA    R0,9
COLNUML  CH    R1,RECSIZE
         BH    COLNUMX
         CVD   R1,DOUBLE
         MVC   COLNUM,=X'402020202120'
         ED    COLNUM,DOUBLE+5
         CH    R1,HW10000          10000-32768?
         BNL   COLNUMN             YES, USE NNNNN
*        MVC   COLNUM(5),COLNUM+1
*        MVI   COLNUM+5,C' '
*        CH    R1,HW1000           1000-9999?
*        BNL   COLNUMN             YES, USE NNNNX
         MVC   COLNUM(5),COLNUM+1
         MVI   COLNUM+5,C' '
         CH    R1,HW100            100-999?
         BNL   COLNUMN             YES, USE XNNNX
         MVC   COLNUM(5),COLNUM+1  USE XNNXX
         MVI   COLNUM+5,C' '
COLNUMN  DS    0H
         SH    R14,HW2
         CR    R14,R6
         BL    *+10
         MVC   0(5,R14),COLNUM+1
         LA    R14,12(,R14)
         LA    R1,10(,R1)
         BCT   R0,COLNUML
COLNUMX  DS    0H
*
         LH    R1,OFFSET
         SLR   R0,R0
         LA    R14,10
         DR    R0,R14
         LR    R1,R0
         LA    R14,MARKS(R1)
         LH    R1,RECSIZE
         SH    R1,OFFSET
         CH    R1,HW80
         BL    MARKE
         MVC   80(80,R6),0(R14)
         B     MARKX
MARKE    MVI   80(R6),C' '
         MVC   81(79,R6),80(R6)
         BCTR  R1,0
         EX    R1,MARKEEX
MARKX    DS    0H
         LH    R1,OFFSET
         LTR   R1,R1               IS OFFSET ZERO?
         BNZ   COL1OK              NO
         MVI   80(R6),C'+'         YES, SPECIAL CASE
         TM    TSTRECFM,X'06'      ANY CARRIAGE CONTROL?         GP@P6*
         BZ    COL1OK              NO, A '+' IS GOOD                  *
         MVI   80(R6),C'A'         YES, INDICATE ANSI                 *
         TM    TSTRECFM,X'04'      IS IT ANSI?                        *
         BO    COL1OK              YES, GOOD GUESS                    *
         MVI   80(R6),C'M'         NO, MACHINE CODE                   *
COL1OK   LH    R1,AMKLN                                               *
         LTR   R1,R1               ANY RECORD KEYS?                   *
         BZ    FILLDATA            NO                                 *
         LH    R1,AMRKP            YES, GET RKP                       *
         SH    R1,OFFSET           GET OFFSET ON SCREEN               *
         BM    RKE                 NOT ON SCREEN, DO KEY END STUFF    *
         CH    R1,HW80             PAST SCREEN?                       *
         BNL   FILLDATA            YES, WHOLE KEY IS RIGHT OF SCREEN  *
         LA    R15,80(R1,R6)       NO, POINT TO IT                    *
         MVI   0(R15),C'×'         DENOTE FIRST COLUMN IN KEY         *
RKE      AH    R1,AMKLN            GET OFFSET PAST END OF KEY         *
         BNP   FILLDATA            WHOLE KEY IS LEFT OF SCREEN        *
         CH    R1,HW80             PAST SCREEN?                       *
         BH    FILLDATA            YES, KEY END IS RIGHT OF SCREEN    *
         LA    R15,79(R1,R6)       POINT TO LAST KEY COLUMN MARKER    *
         MVI   0(R15),C'×'         DENOTE LAST COLUMN IN KEY     GP@P6*
         B     FILLDATA
MARKEEX  MVC   80(00,R6),0(R14)    <<< EXECUTED >>>
*                                  HEX MODE HEADER CONSTRUCTION GP@SECV
HEXCOLNM LTR   R1,R1               IS OFFSET ZERO?
         BNZ   *+10                NO                           GP@P6
         MVC   1(8,R6),COL1LBL     YES, SPECIAL CASE, 1         GP@P6
         SLR   R0,R0
         LA    R14,5
         DR    R0,R14
         SR    R14,R0              5 MINUS REMAINDER
         LTR   R0,R0               WAS REMAINDER 0?
         BZ    *+6                 YES, USE 0, NOT 5
         LR    R0,R14
*
         LR    R14,R6
         LH    R1,OFFSET
         AR    R1,R0               ADD (0 TO 4) TO OFFSET
         SLL   R0,1                MULTIPLY BY 2
         AR    R14,R0              ADD (0 TO 8) TO LINE
         BCTR  R14,0               START AT LINE-1 FOR OFFSET 0
*                                  LINE+8 FOR OFFSET 1
*                                  LINE+6 FOR OFFSET 2
*                                  LINE+4 FOR OFFSET 3
*                                  LINE+2 FOR OFFSET 4
*                                  LINE+0 FOR OFFSET 5
         LA    R0,9
COLNUMLX CH    R1,RECSIZE
         BH    COLNUMXX
         CVD   R1,DOUBLE
         MVC   COLNUM,=X'402020202120'
         ED    COLNUM,DOUBLE+5
         CH    R1,HW10000          10000-32768?
         BNL   COLNUMNX            YES, USE NNNNN
*        MVC   COLNUM(5),COLNUM+1
*        MVI   COLNUM+5,C' '
*        CH    R1,HW1000           1000-9999?
*        BNL   COLNUMNX            YES, USE NNNNX
         MVC   COLNUM(5),COLNUM+1
         MVI   COLNUM+5,C' '
         CH    R1,HW100            100-999?
         BNL   COLNUMNX            YES, USE XNNNX
         MVC   COLNUM(5),COLNUM+1  USE XNNXX
         MVI   COLNUM+5,C' '
COLNUMNX DS    0H
         SH    R14,HW2
         CR    R14,R6
         BL    *+10
         MVC   0(5,R14),COLNUM+1
         LA    R14,12(,R14)
         LA    R1,5(,R1)
         BCT   R0,COLNUMLX
COLNUMXX DS    0H
*
         LH    R1,OFFSET
         SLR   R0,R0
         LA    R14,10
         DR    R0,R14
         SLL   R0,1                MULTIPLY BY 2
         LR    R1,R0
         LA    R14,MARKSX(R1)
         LH    R1,RECSIZE
         SH    R1,OFFSET
         CH    R1,HW40
         BL    MARKEX
         MVC   80(80,R6),0(R14)
         B     MARKXX
MARKEX   MVI   80(R6),C' '
         MVC   81(79,R6),80(R6)
         SLL   R1,1                MULTIPLY BY 2
         BCTR  R1,0
         EX    R1,MARKEEX
MARKXX   DS    0H
         LH    R1,OFFSET
         LTR   R1,R1               IS OFFSET ZERO?
         BNZ   FILLDATA            NO
         MVC   80(2,R6),MARKSX+8   YES, SPECIAL CASE
*                                  END OF HEX MODE CODE         GP@SECV
FILLDATA LA    R6,160(,R6)
         SPACE
************************************************************
*                                                          *
*         FILL IN THE DATA AREA OF THE SCREEN              *
*                                                          *
************************************************************
         SPACE
         SLR   R5,R5
         L     R7,HOLDTOP
         LA    R1,SCREENW-3960                                GYP93274
         LA    R15,3960+SCRLINE-SCREEN(,R1)                   GYP93274
         L     R1,DIRNUM(,R7)      GET NUMBER OF FIRST LINE
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  0(6,R15),DOUBLE+4(4)
         LH    R8,PAGESIZE         NUMBER OF DATA LINES
         SPACE
**********************************************************************
*                                                          *         *
*         FORMAT AND DISPLAY PROGRAM FUNCTION KEY VALUES   *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
         TM    STATUS4,HELPSW      PFK VALUES REQUESTED?
         BZ    FILBUG              NO, BRANCH
         LA    R15,PFKTAB-2048     YES, POINT TO PFK TABLE    GYP93274
         LA    R15,2048(,R15)                                 GYP93274
         LA    R14,KAPS            SQUEEZE A LITTLE BIT MORE
         USING KAPS,R14                    ADDRESSABILITY
         TM    STATUS5,X3270       COLOUR ON?
         BZ    SHOWPFKS            NO
         TM    MODE,COLOR+GEOK     7-COLOUR AND GE SUPPORTED?
         BNO   SHOWPFKS            NO
         CLI   PAGESIZE+1,20       AT LEAST 20 DATA LINES?
         BL    SHOWPFKS            NO
         MVC   0(SNAZAL,R6),SNAZA  YES, SHOW SNAZZY PFK VALUE SCREEN
         LA    R6,SNAZAL(,R6)      SUPPLY HEADING
         LA    R0,24               LOAD NUMBER OF PFKS
         SLR   R1,R1
         IC    R1,PFKDISP          LOAD PFKS ALREADY SHOWN
         SR    R0,R1               LOAD PFKS TO SHOW
         SLL   R1,6                ASSUME PFKTABL IS 64
         LA    R15,0(R1,R15)       POINT TO FIRST PFK FOR THIS DISPLAY
         SRL   R1,6                ASSUME PFKTABL IS 64
         CLI   PAGESIZE+1,31       AT LEAST 32 DATA LINES?
         BH    SNAZYPFK            YES, PROBABLY A MODEL-4
         LA    R0,12               NO, JUST DO HALF OF THE PFKS
SNAZYPFK MVC   0(SNAZBL,R6),SNAZB  SUPPLY DETAIL LINE TEMPLATE
         LA    R1,1(,R1)           INCREMENT PFK NUMBER
         CVD   R1,DOUBLE
         OI    DOUBLE+7,15         SUPPLY IT
         UNPK  SNAZBPL(2,R6),DOUBLE+6(2)
         MVC   SNAZBL(PFKTABL-1,R6),1(R15)       LOAD PFK VALUE
         MVC   SNAZBL+63(SNAZBBL,R6),SNAZBB      RIGHT BORDER
         MVC   SNAZBL+63+SNAZBBL(9,R6),BLANKS    ALIGN FOR NEXT PFK
         LA    R6,SNAZBL+63+SNAZBBL+9(,R6)       POINT TO NEXT LINE
         LA    R15,PFKTABL(,R15)
         BCT   R0,SNAZYPFK         PROCESS NEXT PFK
         STC   R1,PFKDISP          REMEMBER LAST PFK SHOWN
         CLI   0(R15),0            REACHED END OF PFK TABLE?
         BNE   *+8                 NO, STATUS CORRECTLY FLAGGED
         MVI   PFKDISP,0           YES, NEXT TIME NEEDS A RESTART
         CLI   PAGESIZE+1,31       AT LEAST 32 DATA LINES?
         BH    SNAZOLLA            YES, PROBABLY A MODEL-4
         MVC   0(SNAZCLX,R6),SNAZC SUPPLY BOTTOM LINE TO TABLE DISPLAY
         LA    R6,SNAZCL(,R6)
         TM    STATUS4,HELOKAY     FULL-SCREEN HELP AVAILABLE?
         BZ    NOPAD               NO, PADDING ALREADY SUPPLIED
         LA    R6,SNAZCLX-SNAZCL(,R6)  YES
         B     NOPAD               PADDING ALREADY SUPPLIED
SNAZOLLA MVC   0(SNAZDL,R6),SNAZD  SUPPLY BOTTOM LINE TO TABLE DISPLAY
         LA    R6,SNAZDL(,R6)      THE SNAZZINESS CONTINUES
         TM    STATUS4,HELOKAY     FULL-SCREEN HELP AVAILABLE?
         BZ    NOPAD               NO, PADDING ALREADY SUPPLIED
         MVC   0(SNAZDLX,R6),HELMPRF   SUPPLY HELMSG ON SCREEN
         MVC   1(2,R6),MOD4POSI    SUPPLY CORRECT POSITION FOR HELMSG
         LA    R6,SNAZDLX(,R6)     ADJUST DATA STREAM LENGTH
         B     NOPAD               PADDING ALREADY SUPPLIED
         SPACE
SHOWPFKS MVI   0(R6),C' '
         MVC   1(239,R6),0(R6)     INITIALIZE WITH BLANKS
         MVC   109(21,R6),=C'CURRENT PF KEY VALUES'
         MVI   189(R6),C'-'
         MVC   190(20,R6),189(R6)
         LA    R6,240(,R6)
         SH    R8,HW3              THREE DISPLAY LINES USED
         SLR   R1,R1
         IC    R1,PFKDISP          LOAD PFKS ALREADY SHOWN
         SLL   R1,6                ASSUME PFKTABL IS 64
         LA    R15,0(R1,R15)       POINT TO FIRST PFK FOR THIS DISPLAY
         SRL   R1,6                ASSUME PFKTABL IS 64
         LA    R5,3
FILPFKLP CLI   0(R15),0            END OF TABLE?
         BE    PFHELMSG            YES
         MVI   0(R6),C' '
         MVC   1(79,R6),0(R6)      INITIALIZE WITH BLANKS
         LA    R1,1(,R1)           INCREMENT PFK NUMBER
         MVC   9(3,R6),=C'PFK'
         CVD   R1,DOUBLE
         OI    DOUBLE+7,15         SHOW PFK NUMBER
         UNPK  12(2,R6),DOUBLE+6(2)
         MVC   17(PFKTABL-1,R6),1(R15)
         LA    R15,PFKTABL(,R15)
         LA    R5,1(,R5)           USED UP ANOTHER LINE
         LA    R6,80(,R6)
         STC   R1,PFKDISP          REMEMBER LAST PFK SHOWN
         BCT   R8,FILPFKLP         SHOW NEXT PFK
         B     FILLED              RAN OUT OF DISPLAY LINES
PFHELMSG MVI   PFKDISP,0           YES, NEXT TIME NEEDS A RESTART
         TM    STATUS4,HELOKAY     FULL-SCREEN HELP AVAILABLE?
         BZ    FILLED              NO
         SH    R8,HW2              STILL HAVE TWO LINES LEFT?
         BNP   FILLED              NO, SCREEN IMAGE NOW FULL
         MVI   0(R6),C' '
         MVC   1(159,R6),0(R6)     CLEAR TWO LINES
         MVC   97(L'HELMSG,R6),HELMSG
         LA    R6,160(,R6)
         LA    R5,2(,R5)           TWO MORE LINES USED
         B     FILLED
         DROP  R14                 KAPS
         SPACE
**********************************************************************
*                                                          *         *
*         FORMAT AND DISPLAY DEBUG DETAILS                 *   ABL   *
*                                                          *         *
**********************************************************************
         SPACE
FILBUG   TM    STATUS4,DBUGSW      DEBUG REQUESTED?
         BZ    FILLOOP             NO, BRANCH
         LA    R0,5                USE TURQUOISE FOR NON-DATA    GP@P6
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR        GP@P6
* LINE 1
         MVI   0(R6),C' '
         MVC   1(79,R6),0(R6)      INITIALIZE WITH BLANKS
         LA    R5,01(,R5)          COUNT LINES FILLED IN
         LA    R1,TGETREG2         POINT TO R15, R0, R1
         LA    R0,4                FIRST 4 BYTES (R15)
         LA    R15,0(,R6)
         BAL   R14,HEX
         LA    R15,1(,R15)
         LA    R0,4                SECOND 4 BYTES (R0)
         BAL   R14,HEX
         LA    R15,1(,R15)
         LA    R0,4                THIRD 4 BYTES (R1)
         BAL   R14,HEX
         LA    R6,80(,R6)          ADD LINE WIDTH
         SPACE
* LINE 2
         MVI   0(R6),C' '
         MVC   1(79,R6),0(R6)      INITIALIZE WITH BLANKS
         LA    R5,01(,R5)          COUNT LINES FILLED IN
         LA    R1,REPLY+128        REPLY AREA
         ICM   R14,B'1111',TGETREG2+8 REPLY LENGTH RETURNED BY TGET
         BZ    FILLED
         BCTR  R14,0
         MVC   0(5,R6),=C'DATA:'   CHARACTER HEADER
         EX    R14,DBUGDATA        MOVE IN THE CHARACTER VERSION
         TR    0(80,R6),PERIODS    TRANSLATE UNPRINTABLES
         LA    R6,80(,R6)          ADD LINE WIDTH
         SPACE
* LINE 3
         MVI   0(R6),C' '
         MVC   1(79,R6),0(R6)      INITIALIZE WITH BLANKS
         LA    R5,01(,R5)          COUNT LINES FILLED IN
         LA    R1,REPLY+128        REPLY AREA
         L     R0,TGETREG2+8       REPLY LENGTH RETURNED BY TGET
         LR    R15,R6
         BAL   R14,HEX             CONVERT REPLY TO HEX
         LA    R6,80(,R6)          ADD LINE WIDTH
         B     FILLED
DBUGDATA MVC   5(0,R6),0(R1)       <<< EXECUTED >>>
         SPACE
************************************************************
*                                                          *
*         FORMAT AND DISPLAY FILE CHARACTERS               *
*                                                          *
************************************************************
         SPACE
FILLOOP  DS    0H
         LM    R1,R2,DIRLEN(R7)    GET LENGTH AND ADDRESS
         LTR   R1,R1               END OF FILE?
         BM    FILBOT              YES
         MVI   0(R6),C' '
         MVC   1(82,R6),0(R6)      FILL LINE WITH BLANKS (79+3<-COLOUR)
         BZ    FILNUL              BRANCH IF R1 ZERO
         TM    MODE,SMFSW          IS SMF FORMATTING ON?
         BO    CALLSMF             YES, BRANCH
SMFNOTON SH    R1,OFFSET           IS OFFSET BEYOND END OF RECORD?
         BNP   FILLNEXT            YES, LEAVE LINE BLANK
         AH    R2,OFFSET
         TM    MODE,MODEX
         BO    FILLHEX
         IC    R0,CHRCOLOR         LOAD CHARACTER COLOUR (GREEN) GP@P6
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR        GP@P6
         CH    R1,HW80
         BNH   *+8
         LA    R1,80
         BCTR  R1,0
         EX    R1,LOADCHRS         LOAD CHARACTERS INTO DISPLAY LINE
         TM    MODE,ASCIISW        IN ASCII MODE?                GP@P6*
         BZ    AFTER103            NO, BRANCH TO AFTER XLATE          *
         LA    R0,1(,R1)           YES, GET LENGTH TO TRANSLATE       *
         LR    R1,R6               POINT TO ASCII DATA                *
         XLATE (1),(0),TO=E        PERFORM TRANSLATION                *
AFTER103 DS    0H                  FINISHED WITH SVC 103              *
         TR    0(80,R6),PERIODS
         CLC   MSG(16),MSG31       FIND COMMAND ISSUED?               *
         BNE   FILLNEXT            NO                                 *
         CLC   FNDNUM,DIRNUM(R7)   FOUND IN THIS RECORD?              *
         BNE   FILLNEXT            NO                                 *
         MVC   80(80,R6),0(R6)     YES, SAVE A COPY OF THE DATA       *
         LH    R1,FNDOFF           GET OFFSET OF SEARCH STRING        *
         SH    R1,OFFSET           GET SCREEN OFFSET OF STRING        *
         BM    FILLNEXT            SMF TYPE BYTE NOT ON SCREEN        *
         LA    R15,0(R1,R6)        POINT TO FIRST CHARACTER           *
         MVI   0(R15),X'13'        SUPPLY INSERT CURSOR               *
         TM    STATUS5,X3270       USING 3270 EXTENSIONS              *
         BO    HISTRING            YES, ALSO HIGHLIGHT THE STRING     *
         LA    R1,79(,R6)          NO, POINT PAST LINE (-1 FOR EX)    *
         SR    R1,R15              GET REMAINING LENGTH               *
         EX    R1,MONOREST         RESTORE REMAINDER OF LINE          *
         LA    R6,1(,R6)           GET EXTRA BYTE COUNT               *
         B     FILLNEXT            INSERT CSR IS THE ONLY THING EXTRA *
HISTRING MVC   1(3,R15),REVERSE    HIGHLIGHTING STARTS HERE           *
         MVC   4(3,R15),YELLOW     HIGHLIGHTING STARTS HERE           *
         LH    R1,STRINGL          GET SEARCH STRING LENGTH CODE      *
         EX    R1,REVSTRNG         RESTORE SEARCH ARGUMENT            *
         LA    R15,1(R1,R15)       ADD PAST SEARCH STRING LEN         *
         MVC   7(3,R15),NORMAL     HIGHLIGHTING STOPS HERE            *
         MVC   10(2,R15),YELLOW    "SA,COLOUR"                        *
         MVC   12(1,R15),CHRCOLOR  REVERT TO STANDARD CHAR COLOUR     *
         OI    12(R15),X'F0'                                          *
         LA    R1,79(,R6)          POINT PAST LINE (-1 FOR EX)        *
         SR    R1,R15              GET REMAINING LENGTH               *
         EX    R1,NRMSTRNG         RESTORE REMAINDER OF LINE          *
         LA    R6,13(,R6)          ADJUST FOR EXTRA ATTRIBUTES   GP@P6*
         B     FILLNEXT
REVSTRNG MVC   7(0,R15),80(R15)    <<< EXECUTED >>>              GP@P6
NRMSTRNG MVC   13(0,R15),80(R15)   <<< EXECUTED >>>              GP@P6
MONOREST MVC   1(0,R15),80(R15)    <<< EXECUTED >>>              GP@P6
LOADCHRS MVC   0(0,R6),0(R2)       <<< EXECUTED >>>
         SPACE
**********************************************************************
*                                                          *         *
*         CONDITIONALLY SWITCH DISPLAY COLOUR              *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
COLOURSW DS    0H
         TM    STATUS5,X3270       USING COLOURS?
         BZR   R14                 NO, SKIP ALL THIS
         CLM   R0,1,LINKAREA       CHECK TEMPORARY COLOUR CODE FLAG
         BER   R14                 ALREADY RIGHT COLOUR SO EXIT
         STC   R0,LINKAREA         DIFFERENT SO REMEMBER NEW COLOUR
         MVC   0(2,R6),TURQUOIS    LOAD "SA,COLOUR"
         STC   R0,2(,R6)           SUPPLY COLOUR NUMBER
         TM    STATUS5,COLOR16     16-COLOUR TERMINAL?
         BO    CODEOKAY            YES, ALLOW BIG HEX DIGIT
         NI    2(R6),X'07'         NO, FORCE INTO VALID RANGE
CODEOKAY OI    2(R6),X'F0'         CONVERT TO DATA STREAM CODE
         LA    R6,3(,R6)           ADJUST BUFFER POINTER
         BR    R14                 RETURN TO CALLER
         SPACE
************************************************************
*                                                          *
*         FORMAT AND DISPLAY FILE HEXADECIMAL              *
*                                                          *
************************************************************
         SPACE
FILLHEX  DS    0H
         IC    R0,HEXCOLOR         LOAD HEXADECIMAL COLOUR (BLUE)GP@P6
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR        GP@P6
         CH    R1,HW40
         BNH   *+8
         LA    R1,40
         LR    R0,R1
         LR    R1,R2
         LR    R15,R6
         BAL   R14,HEX
         CLC   MSG(16),MSG31       FIND COMMAND ISSUED?          GP@P6*
         BNE   FILLNEXT            NO                                 *
         CLC   FNDNUM,DIRNUM(R7)   FOUND IN THIS RECORD?              *
         BNE   FILLNEXT            NO                                 *
         MVC   80(80,R6),0(R6)     YES, SAVE A COPY OF THE DATA       *
         LH    R1,FNDOFF           GET OFFSET OF SEARCH STRING        *
         SH    R1,OFFSET           GET CHAR OFFSET OF STRING          *
         BM    FILLNEXT            SMF TYPE BYTE NOT ON SCREEN        *
         LA    R0,39               GET MAXIMUM HIGHLIGHT LENGTH       *
         SLL   R1,1                GET SCREEN OFFSET OF STRING        *
         BZ    *+8                 HIGHLIGHTING STARTS IN COL 1       *
         LA    R0,38               GET MAXIMUM HIGHLIGHT LENGTH       *
         LA    R15,0(R1,R6)        POINT TO FIRST CHARACTER           *
         MVI   0(R15),X'13'        SUPPLY INSERT CURSOR               *
         TM    STATUS5,X3270       USING 3270 EXTENSIONS?             *
         BO    HIXSTRNG            YES, ALSO HIGHLIGHT THE STRING     *
         LA    R1,79(,R6)          NO, POINT PAST LINE (-1 FOR EX)    *
         SR    R1,R15              GET REMAINING LENGTH               *
         EX    R1,MONOREST         RESTORE REMAINDER OF LINE          *
         LA    R6,1(,R6)           GET EXTRA BYTE COUNT               *
         B     FILLNEXT            INSERT CSR IS THE ONLY THING EXTRA *
HIXSTRNG MVC   1(3,R15),REVERSE    HIGHLIGHTING STARTS HERE           *
         MVC   4(3,R15),TURQUOIS   HIGHLIGHTING STARTS HERE           *
         LH    R1,STRINGL          GET SEARCH STRING LENGTH CODE      *
         CR    R1,R0               IS STRING TOO LONG?                *
         BNH   *+6                 NO, CONTINUE                       *
         LR    R1,R0               YES, PREVENT SCREEN ERRORS         *
         LA    R1,1(R1,R1)         GET SEARCH HEX LENGTH CODE         *
         EX    R1,REVSTRNG         RESTORE SEARCH ARGUMENT            *
         LA    R15,1(R1,R15)       ADD PAST SEARCH STRING LENGTH      *
         MVC   7(3,R15),NORMAL     HIGHLIGHTING STOPS HERE            *
         MVC   10(3,R15),TURQUOIS  "SA,COLOUR"                        *
         MVC   12(1,R15),HEXCOLOR  REVERT TO STANDARD HEX COLOUR      *
         OI    12(R15),X'F0'                                          *
         LA    R1,79(,R6)          POINT PAST LINE (-1 FOR EX)        *
         SR    R1,R15              GET REMAINING LENGTH               *
         EX    R1,NRMSTRNG         RESTORE REMAINDER OF LINE          *
         LA    R6,13(,R6)          ADJUST FOR EXTRA ATTRIBUTES   GP@P6*
         B     FILLNEXT
         SPACE
FILNUL   DS    0H
         LA    R0,5                USE TURQUOISE FOR NON-DATA    GP@P6
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR        GP@P6
         MVC   0(6,R6),=C'(NULL)'
         B     FILLNEXT
         SPACE
CALLSMF  TM    DCBRECFM,X'C0'      RECFM U? (VSAM SMF D/S?)      GP@P6*
         BNO   BALRSMF             NO                                 *
         CLC   0(2,R2),HW18        TOO SHORT FOR VALID SMF?           *
         BL    SMFNOTON            YES, DON'T FORMAT RECORD           *
         TM    13(R2),X'0F'        DATE SIGN AS EXPECTED?             *
         BNO   SMFNOTON            NO, DON'T FORMAT RECORD            *
         CLI   13(R2),X'9F'        VALID LOW-ORDER DECIMAL DIGIT?     *
         BH    SMFNOTON            NO, DON'T FORMAT RECORD            *
         CLI   12(R2),X'36'        VALID HIGH ORDER DAY DIGITS?       *
         BH    SMFNOTON            NO, DON'T FORMAT RECORD            *
         LA    R2,4(,R2)           YES, POINT PAST RDW                *
BALRSMF  CH    R1,HW14             TOO SHORT FOR VALID SMF?           *
         BL    SMFNOTON            YES, DON'T FORMAT RECORD           *
         TM    9(R2),X'0F'         DATE SIGN AS EXPECTED?             *
         BNO   SMFNOTON            NO, DON'T FORMAT RECORD            *
         CLI   9(R2),X'9F'         VALID LOW-ORDER DECIMAL DIGIT?     *
         BH    SMFNOTON            NO, DON'T FORMAT RECORD            *
         CLI   8(R2),X'36'         VALID HIGH ORDER DAY DIGITS?       *
         BH    SMFNOTON            NO, DON'T FORMAT RECORD       GP@P6*
         STM   R1,R2,CALLPARM
         LA    R0,2                USE RED FOR SMF RECORD        GP@P6*
         CLC   SMFTYPE,1(R2)       HIGHLIGHT RECORD?            GP@SECV
         BNE   SMFCOLOR            NO                                 *
         CLI   SMFSBTYP,X'FF'      SUB-TYPE REQUESTED?           GP@P6*
         BE    SMFHILT1            NO, PERFORM HIGHLIGHTING           *
         TM    0(R2),X'C2'         SUBSYSID+SUBTYPES+OS/VS2?          *
         BNO   SMFCOLOR            NO, SUB-TYPE MISMATCH              *
         CLC   SMFSBTYP,18(R2)     YES, CORRECT SUB-TYPE?             *
         BNE   SMFCOLOR            NO, SUB-TYPE MISMATCH              *
SMFHILT1 LA    R0,3                USE PINK FOR THIS SMF RECORD TYPE  *
SMFCOLOR BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR        GP@P6*
         ST    R6,CALLPARM+8
         LA    R0,CALLSAVE
         ST    R0,CALLPARM+12
         OI    CALLPARM+12,X'80'
         LH    R0,OFFSET           SUPPLY SCROLL RIGHT OFFSET    GP@P6
         LA    R1,CALLPARM
         L     R15,CALLSMFA
         BALR  R14,R15
         TR    0(80,R6),PERIODS
         CLC   SMFTYPE,1(R2)       HIGHLIGHT RECORD?            GP@SECV
         BNE   SUBTYPE#            NO                           GP@SECV
         CLI   SMFSBTYP,X'FF'      SUB-TYPE REQUESTED?           GP@P6*
         BE    SMFHILT2            NO, PERFORM HIGHLIGHTING           *
         TM    0(R2),X'C2'         SUBSYSID+SUBTYPES+OS/VS2?          *
         BNO   SUBTYPE#            NO, SUB-TYPE MISMATCH              *
         CLC   SMFSBTYP,18(R2)     YES, CORRECT SUB-TYPE?             *
         BNE   SUBTYPE#            NO, SUB-TYPE MISMATCH              *
SMFHILT2 DS    0H                                                GP@P6*
         OC    0(4,R6),=C'----'    YES                          GP@SECV
SUBTYPE# CLI   3(R6),C'0'          NUMERIC SUB-TYPE HERE?        GP@P6*
         BL    FILLNXT             NO                                 *
         TM    MODE,GEOK           GRAPHIC ESCAPE ALLOWABLE?          *
         BZ    FILLNXT             NO                                 *
         MVC   80(77,R6),3(R6)     YES, USE SUPERSCRIPT               *
         MVC   4(77,R6),80(R6)     MOVE THE DATA TO MAKE ROOM         *
         MVI   3(R6),X'08'         SUPPLY THE CODE FOR GE             *
         LA    R6,1(,R6)           COUNT THE EXTRA BYTE               *
         B     FILLNXT             BYPASS FORMATTED DATA OVLY         *
FILLNEXT ICM   R0,B'1111',DIRTTR(R7) BLOCK LOCATION KNOWN?            *
         BZ    FILLLONG            NO, SO SKIP ALL THIS               *
         LA    R15,40              LINE OFFSET TO NON-DATA START      *
         LH    R1,RECSIZE          GET MAXIMUM RECORD LENGTH          *
         SH    R1,OFFSET           GET DATA BYTES ON SCREEN           *
         CR    R1,R15              IS IT MORE THAN 40?                *
         BH    FILLLONG            YES, DON'T SHOW RECORD'S BLOCK     *
         CLC   40(40,R6),BLANKS    IS THE AREA REALLY BLANK?          *
         BNE   FILLLONG            NO, DON'T OVERWRITE DATA           *
         MVC   80(3,R6),BLANKS     ENSURE TRAILING BLANKS             *
         ALR   R6,R15              POINT TO BLOCK POS'N FORMAT AREA   *
         LA    R0,5                USE TURQUOISE FOR NON-DATA         *
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR             *
         SLR   R6,R15              POINT BACK TO NEXT-LINE-MINUS-80   *
         MVC   40(30,R6),=C'(RECORD FROM BLOCK AT LOCATION'           *
         UNPK  71(7,R6),DIRTTR(4,R7)                                  *
         TR    71(6,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS    *
         MVI   77(R6),C')'                                            *
         TM    STATUS2,MAGTAPE     TAPE DATA SET?                     *
         BZ    FILLNXT             NO, JUST SHOW TTR                  *
         UNPK  71(9,R6),DIRTTR(5,R7)                                  *
         TR    71(8,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS    *
         MVI   79(R6),C')'                                            *
         B     FILLNXT                                                *
FILLLONG TM    TSTRECFM,X'40'      RECFM V?                           *
         BZ    FILLLKED            NO, DON'T CHECK FOR LONG RECORD    *
         L     R0,DIRLEN(,R7)      GET TOTAL RECORD LENGTH            *
         CH    R0,RECSIZE          IS IT LARGER THAN LRECL?           *
         BNH   FILLSPAN            NO, CHECK FOR SPANNED FLAGS        *
         CVD   R0,DOUBLE           YES, CONVERT IT TO DECIMAL         *
         LA    R15,72              LINE OFFSET TO NON-DATA START      *
         ALR   R6,R15              POINT TO RECORD ERROR NOTICE AREA  *
         LA    R0,2                USE RED FOR ERROR/WARNING STATUS   *
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR             *
         SLR   R6,R15              POINT BACK TO NEXT-LINE-MINUS-80   *
         MVC   72(3,R6),=C'LEN'    INDICATE LENGTH DATA               *
         OI    DOUBLE+7,X'0F'      WANT NUMERIC CHARACTERS            *
         UNPK  75(5,R6),DOUBLE+5(3)                                   *
         CLI   75(R6),C'0'         RECORD LENGTH LESS THAN 10,000?    *
         BNE   FILLNXT             NO, LEAVE DIGIT AND LINE FINISHED  *
         MVI   75(R6),C'='         YES, ROOM FOR AN EQUALS SIGN       *
         B     FILLNXT             THIS DISPLAY LINE IS NOW FINISHED  *
FILLSPAN TM    TSTRECFM,X'48'      VARIABLE SPANNED RECORD FORMAT?    *
         BO    FILLNXT             YES, SEGMENT BITS ARE EXPECTED     *
         L     R2,DIRREC(,R7)      NO, POINT TO AFTER RDW             *
         BCTR  R2,0                                                   *
         BCTR  R2,0                POINT TO LAST HALF OF RDW          *
         ICM   R0,3,0(R2)          IS IT NULL?                        *
         BZ    FILLNXT             YES, NO PROBLEMS AT ALL            *
         LA    R15,72              LINE OFFSET TO NON-DATA START      *
         ALR   R6,R15              POINT TO RECORD ERROR NOTICE AREA  *
         LA    R0,2                USE RED FOR ERROR/WARNING STATUS   *
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR             *
         SLR   R6,R15              POINT BACK TO NEXT-LINE-MINUS-80   *
         MVC   72(4,R6),=C'RDW='   INDICATE HEX DATA IS FROM THE RDW  *
         UNPK  76(5,R6),0(3,R2)                                       *
         TR    76(4,R6),HEXTAB-240 SHOW 2ND HALF OF RDW IN HEX        *
         B     FILLNXT             THIS DISPLAY LINE IS NOW FINISHED  *
FILLLKED TM    DSORG,X'02'         IS DSORG PO?                       *
         BZ    FILLMTRR            NO, CAN'T BE A LOAD MODULE         *
         TM    DCBRECFM,X'C0'      RECFM U?                           *
         BZ    FILLNXT             NO, CAN'T BE A LOAD MODULE         *
         LA    R0,18                                                  *
         C     R0,DIRLEN(,R7)      RECORD LENGTH OF EIGHTEEN?         *
         BNE   FILLNXT             NO, CAN'T BE A LINK EDIT IDR       *
         L     R2,DIRREC(,R7)      POINT TO 18-BYTE RECORD            *
         CLI   0(R2),X'80'         IDENTIFICATION RECORD?             *
         BNE   FILLNXT             NO, CAN'T BE A LINK EDIT IDR       *
         CLI   1(R2),X'11'         SEVENTEEN DATA BYTES?              *
         BNE   FILLNXT             NO, CAN'T BE A LINK EDIT IDR       *
         TM    2(R2),X'02'         LINKAGE EDITOR TYPE?               *
         BZ    FILLNXT             NO, CAN'T BE A LINK EDIT IDR       *
         TM    17(R2),X'0F'        EXPECTED DECIMAL SIGN?             *
         BNO   FILLNXT             NO, CAN'T BE A LINK EDIT IDR       *
         CLI   17(R2),X'9F'        SENSIBLE JULIAN DAY?               *
         BH    FILLNXT             NO, CAN'T BE A LINK EDIT IDR       *
         CLI   16(R2),X'36'        SENSIBLE JULIAN DAY?               *
         BH    FILLNXT             NO, CAN'T BE A LINK EDIT IDR       *
         LA    R15,40              LINE OFFSET TO NON-DATA START      *
         ALR   R6,R15              POINT TO LINK EDIT INTERPRET AREA  *
         LA    R0,5                USE TURQUOISE FOR NON-DATA         *
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR             *
         SLR   R6,R15              POINT BACK TO NEXT-LINE-MINUS-80   *
         MVC   40(8,R6),=C'(LKED ON'                                  *
         STM   R4,R6,CALLPARM      SAVE REGISTERS                     *
         ICM   R4,7,15(R2)         LOAD JULIAN DATE OF LINK EDIT      *
         L     R15,=V(LKEDDATE)                                       *
         BALR  R14,R15             CONVERT JULIAN DATE TO YY/MM/DD    *
         MVC   49(8,R6),DOUBLE     LOAD DATE INTO DISPLAY LINE        *
         LM    R4,R6,CALLPARM      RESTORE REGISTERS                  *
         MVC   58(2,R6),=C'BY'                                        *
         MVC   61(10,R6),3(R2)     LOAD THE LINKAGE EDITOR NAME       *
         TR    61(10,R6),PERIODS   TRANSLATE UNPRINTABLES             *
         MVI   72(R6),C'V'                                            *
         UNPK  73(3,R6),13(2,R2)   SHOW LINKAGE EDITOR VERSION NUMBER *
         TR    73(2,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS    *
         MVI   75(R6),C' '         ERASE GARBAGE                      *
         MVI   76(R6),C'M'                                            *
         UNPK  77(3,R6),14(2,R2)   SHOW LINKAGE EDITOR MOD LEVEL      *
         TR    77(2,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS    *
         MVI   79(R6),C')'         ERASE GARBAGE                      *
         TM    STATUS5,X3270       USING COLOURS?                     *
         BO    FILLNXT             YES, HIGHLIGHTING FINISHED         *
         MVC   38(2,R6),SFPROHI    NO, MAKE HIGH INTENSITY            *
         MVC   80(2,R6),SFPROLO    REVERT TO LOW INTENSITY            *
         LA    R6,2(,R6)           ADJUST FOR EXTRA BYTES             *
         B     FILLNXT             THIS DISPLAY LINE IS NOW FINISHED  *
FILLMTRR TM    DIRNXT(R7),X'80'    TEST RRDS EMPTY SLOT FLAG          *
         BZ    FILLNXT             THE FLAG IS OFF                    *
         LA    R15,68              LINE OFFSET TO NON-DATA START      *
         ALR   R6,R15              POINT TO LINK EDIT INTERPRET AREA  *
         LA    R0,5                USE TURQUOISE FOR NON-DATA         *
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR             *
         SLR   R6,R15              POINT BACK TO NEXT-LINE-MINUS-80   *
         MVC   68(12,R6),=C'(EMPTY-SLOT)'                        GP@P6*
FILLNXT  LA    R5,01(,R5)          COUNT LINES FILLED IN
         LA    R6,80(,R6)
         L     R7,DIRNXT(,R7)
         BCT   R8,FILLOOP
         B     FILLED
FILBOT   LA    R0,6                YELLOW FOR CHARACTER MODE     GP@P6*
         TM    MODE,MODEX          HEX MODE?                          *
         BZ    *+8                 NO                                 *
         LA    R0,5                YES, USE TURQUOISE INSTEAD         *
*                                                                     *
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR        GP@P6*
         MVI   0(R6),C'*'
         MVC   1(79,R6),0(R6)
         MVC   32(16,R6),=C' BOTTOM OF DATA '
         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?         GP@P6*
         BNE   BOTIOERR            YES, BRANCH                        *
         L     R1,KOUNT            GET BYTE COUNT                     *
         TM    STATUS2,FASTREAD    IS "FASTPATH" ACTIVE?              *
         BZ    KOUNTOK             NO, SO THE BYTE COUNT IS CORRECT   *
         ICM   R1,B'1111',COUNT    YES, GET RECORD COUNT              *
         BNP   KOUNT0              LESS THAN ONE RECORD SO SKIP IT    *
         BCTR  R1,0                DO NOT COUNT BOTTOM OF DATA LINE   *
         MH    R1,RECSIZE          GET BYTE COUNT                     *
KOUNTOK  LTR   R1,R1               ANY BYTES?                         *
         BNP   KOUNT0              NO, SO SKIP IT                     *
         CVD   R1,DOUBLE           MAKE DECIMAL                       *
         MVC   55(11,R6),=X'2020202020202020202120'                   *
         ED    54(12,R6),DOUBLE+2                                     *
         MVC   66(6,R6),=C'-BYTES' DISPLAY BYTE COUNT FOR FILE/MEMBER *
KOUNT0   TM    STATUS5,SOFTEOF     VSAM SOFTWARE END-OF-FILE?         *
         BZ    NVSAMEOF            NO, BRANCH                         *
         MVC   2(4,R6),=C'S/W-'    YES, INDICATE NOT EOF MARKER       *
NVSAMEOF MVC   6(8,R6),=C'EOF-BLK=' NO, REAL EOF MARKER OR EXTENT END *
         UNPK  14(9,R6),EOFRELAD(5) DISPLAY END-OF-FILE RELATIVE ADDR *
         TR    14(8,R6),HEXTAB-240 MAKE DISPLAYABLE HEX CHARACTERS    *
         MVI   22(R6),C'*'         ERASE GARBAGE                      *
         TM    STATUS2,MAGTAPE     TAPE FILE?                         *
         BO    BOTMDONE            YES, EOF ADDRESS NOW FORMATTED     *
         MVC   10(3,R6),=C'TTR'    NO, SAY 'TTR' FOR DISK FILE        *
         MVC   20(2,R6),22(R6)     SUPPRESS TRAILING ZEROS            *
         TM    DSORG,X'02'         IS DSORG PO?  LOOKING AT MEMBER?   *
         BO    BOTMDONE            YES, EOF ADDRESS NOW FORMATTED     *
         LTR   R1,R1               ANY BYTES?                         *
         BZ    BOTMDONE            NO, SKIP % USED FORMATTING         *
         ICM   R1,7,MYDSCB-44+98   IS DS1LSTAR ZERO?                  *
         BZ    SHOWUSED            YES, SHOW % USED (UTILITIES WON'T) *
         CLC   EOFRELAD(2),MYDSCB-44+98 EOF MARKER ON DS1LSTAR TRACK? *
         BE    BOTMDONE            YES, EOF ADDRESS NOW FORMATTED     *
         LA    R0,CHKPTLN          LENGTH OF CHKPT ENTRY              *
         L     R1,CHKPTBOT         POINT TO POSSIBLE E-O-F MARKER     *
         SR    R1,R0               POINT TO POSSIBLE LAST DATA BLOCK  *
         CLC   4(2,R1),MYDSCB-44+98  LAST DATA BLOCK ON DS1LSTAR TRK? *
         BE    BOTMDONE            YES, EOF ADDRESS NOW FORMATTED     *
SHOWUSED SLR   R0,R0               NO, UTILITIES DON'T SHOW % USED    *
         IC    R0,MYDSCB-44+59     GET DS1NOEPV (NUMBER OF EXTENTS)   *
         L     R1,DCBDEBAD         POINT TO DATA EXTENT BLOCK         *
         LA    R15,32(,R1)         POINT TO DEB DASD SECTION          *
         SLR   R1,R1               ZERO TRACK COUNTER                 *
         SLR   R14,R14             (CAN'T USE AH IF OVER 32K TRK XTNT)*
DEBLOOP  ICM   R14,3,14(R15)       GET TRACKS IN THIS EXTENT          *
         AR    R1,R14              ACCUMULATE TRACK COUNT             *
         LA    R15,16(,R15)        POINT TO SECTION FOR NEXT EXTENT   *
         BCT   R0,DEBLOOP          PROCESS NEXT EXTENT IF IT EXISTS   *
         L     R15,EOFRELAD                                           *
         SRL   R15,16              GET TT OF TTR                      *
         LA    R15,1(,R15)         SAY THIS TRACK IS USED             *
         TM    STATUS5,SOFTEOF     VSAM SOFTWARE END-OF-FILE?         *
         BZ    EOFADDR             NO                                 *
         CLI   EOFRELAD+2,1        WAS FIRST BLOCK ON TRACK?          *
         BNE   EOFADDR             NO                                 *
         BCTR  R15,0               YES, THIS TRACK WASN'T REALLY USED *
EOFADDR  CR    R15,R1              EOF TT BIGGER THAN EODS TT?        *
         BH    BOTMDONE            YES, THAT'S JUST SILLY (MULTI-VOL?)*
         LA    R0,100                                                 *
         MR    R14,R0              TRACKS USED BY 100 FOR PERCENTAGE  *
         DR    R14,R1              DIVIDE BY NUMBER OF TRACKS ALLOC'D *
         CVD   R15,DOUBLE                                             *
         MVC   20(5,R6),=X'7C2021206C'                                *
         ED    20(4,R6),DOUBLE+6   SHOW (USED)/(ALLOCATED) AS A %     *
         CLI   DOUBLE+6,9          LESS THAN 100?                     *
         BH    BOTMDONE            NO, END OF FORMATTING              *
         MVC   21(4,R6),22(R6)     YES, REMOVE SUPERFLUOUS CHARACTER  *
         CLI   DOUBLE+7,0          LESS THAN 10?                      *
         BNE   BOTMDONE            NO, END OF FORMATTING              *
         MVC   21(3,R6),22(R6)     YES, REMOVE SUPERFLUOUS CHARACTER  *
         B     BOTMDONE                                               *
BOTIOERR MVC   1(78,R6),SYNADMSG   SUPPLY I/O ERROR MESSAGE TEXT      *
BOTMDONE BCTR  R8,0                ANOTHER SCREEN LINE USED           *
         LA    R6,80(,R6)
         LA    R5,01(,R5)          COUNT LINES FILLED IN
         L     R15,=A(TAPELBLS)    LOAD TAPE LABEL ROUTINE ADDRESS    *
         BALR  R14,R15             CALL IT                       GP@P6*
FILLED   DS    0H
         CH    R5,PAGESIZE         IS SCREEN FILLED UP?
         BNL   NOPAD
         MVC   0(4,R6),SCRPAD      FILL REMAINING LINES WITH BLANKS
         LA    R6,4(,R6)
NOPAD    ST    R6,SCREENF          STORE END-OF-SCREEN FOR TPUT
         SPACE
PROMPT   TM    STATUS4,RFRSH       SCREEN FORMAT REFRESH REQUIRED?
         BO    FILLSCR             YES
         TM    STATUS4,DBUGSW+HELPSW      DEBUG OR PFK DISPLAY?
         BZ    PROMPTOK            NO
         NI    STATUS4,255-DBUGSW-HELPSW YES, TURN IT OFF FOR NEXT TIME
         OI    STATUS4,RFRSH       SCREEN REFRESH IS NOW REQUIRED
PROMPTOK LA    R1,SCREENW-3960                                GYP93274
         LA    R15,3960+SCRDSN-SCREEN(,R1)                    GYP93274
         LH    R1,MSG              GET LENGTH OF MESSAGE
         LTR   R1,R1               IS THERE A MESSAGE?
         BNZ   PROMPTM             YES, BRANCH
         MVC   0(54,R15),MSGDSN    NO, DISPLAY DSNAME
         B     PROMPTT
PROMPTMV MVC   0(0,R15),MSG+2      <<< EXECUTED >>>
PROMPTM  CH    R1,HW54             MSG TOO LONG?
         BNH   *+8                 NO
         LA    R1,54               YES, TRUNCATE IT
         MVI   0(R15),C'-'
         MVC   1(53,R15),0(R15)
         BCTR  R1,0                LENGTH-1 FOR EX
         EX    R1,PROMPTMV
         LA    R15,1(R1,R15)
         MVI   0(R15),C' '
         CLC   MSG(16),MSG31       FOUND MESSAGE BEING DISPLAYED?
         BNE   *+8                 NO
         OI    STATUS4,RFRSH       YES, SCREEN REFRESH IS NOW REQUIRED
         STCM  R1,B'1100',MSG      SET MESSAGE FLAG OFF
         CLC   MSG+2(MSG36L-2),MSG36+2  MEMBER NOT FOUND MSG?    GP@P6*
         BNE   PROMPTT             NO                                 *
         L     R1,CBPRM3           YES                                *
         MVI   0(R1),X'C5'         SOUND BELL FOR ERROR MESSAGE  GP@P6*
PROMPTT  L     R1,CBPRM3
         L     R0,SCREENF
         SR    R0,R1               COMPUTE SIZE OF SCREEN
         ST    R0,BUFFSIZE
         LA    R1,CBPRM1           POINT TO PARAMETER LIST
         L     R15,=V(REVCMPBF)
         BALR  R14,R15             CALL BUFFER COMPRESS ROUTINE
         MVC   RECALPTR,RECALUSE   NEXT RECALL STARTS FROM LATEST
PROMPTR  L     R0,BUFFSIZE         GET COMPRESSED BUFFER LENGTH
         L     R1,CBPRM3           GET BUFFER ADDRESS
         LR    R15,R0
         AR    R15,R1              GET COMPRESSED END-OF-SCREEN
         ST    R15,SCREENF         AND SAVE IT
RECALPUT ICM   R1,8,=X'03'
         NI    STATUS4,255-FLAGI   CLEAR ATTENTION FLAG         GP@SECV
         TPUT  (1),(0),R
         L     R1,CBPRM3           GET BUFFER ADDRESS
         MVI   0(R1),X'C1'         RESET WCC TO NO BELL
         SPACE
************************************************************
*                                                          *
*         READ REPLY FROM THE TERMINAL                     *
*                                                          *
************************************************************
         SPACE
         MVC   REPLY+128(128),REPLY   FOR DEBUG                    ABL
         MVC   TGETREG2(12),TGETREGS  FOR DEBUG                    ABL
         XC    REPLY(128),REPLY    TO SIMPLIFY DEBUGGING
         TM    STATUS5,STPDS       REVIEWING A PDS UNDER A PDS?  GP@P6*
         BZ    STAXOKAY            NO, NO NEED DISABLE STAX           *
         STAX  ,                   YES, LET PDS HANDLE ATTENTION      *
STAXOKAY DS    0H                                                GP@P6*
         LA    R1,REPLY
         LA    R0,256
         ICM   R1,8,=X'81'
         TGET  (1),(0),R
         STM   R15,R1,TGETREGS
         LA    R0,X'0F'            RESET "UNINTERESTING" BITS         *
         NR    R15,R0                 IN TGET RETURN CODE             *
         CH    R15,HW12            WAS REPLY AREA LONG ENOUGH?
         BNE   TGETOK              YES, BRANCH
         TCLEARQ INPUT
TGETOK   DS    0H
         CLI   REPLY,X'88'         QUERY RESPONSE?                    *
         BE    STAXOKAY            YES, SHOULD NOT HAPPEN HERE        *
*               REPLY AREA CONTENTS:
*               OFFSET 0 LENGTH 1  -  ID OF KEY
*               OFFSET 1 LENGTH 2  -  ADDRESS OF CURSOR
*               OFFSET 3 LENGTH 1  -  X'11' IF ANY FIELDS MODIFIED
*               OFFSET 4 LENGTH 2  -  SCREEN ADDRESS OF FIELD
*               OFFSET 6 LENGTH V  -  DATA FROM FIELD
*               DATA EXTENDS TO END OF BUFFER OR NEXT X'11'
         TM    STATUS4,FLAGI       ATTENTION INTERRUPT?         GP@SECV
         BO    PROMPTR             YES, RESHOW SCREEN           GP@SECV
         LA    R0,1                GET PA KEY DATA STREAM LENGTH GP@P6
         C     R0,TGETREGS+8       PA1, PA2, PA3 OR CLEAR?       GP@P6
         BNL   PROMPTR             YES, RESHOW SCREEN           GP@SECV
         STCM  R0,B'1100',CSRLOCN  CLEAR CURSOR BUFFER ADDRESS   GP@P6*
         ICM   R0,B'0011',REPLY+1  LOAD ACTUAL CURSOR BUFFER ADDRESS  *
         TM    REPLY+1,X'C0'       12-BIT FORMAT CURSOR ADDRESS?      *
         BZ    CHKCSRLC            NO, 14-BIT FORMAT WAS SUPPLIED     *
         SLL   R0,2                SHIFT OUT LOW-ORDER "PARITY" BITS  *
         ICM   R0,B'0010',REPLY+1  RE-LOAD HIGH-ORDER BYTE            *
         SLL   R0,18               SHIFT OUT HIGH-ORDER "PARITY" BITS *
         SRL   R0,20               CONVERT TO 12-BIT BINARY NUMBER    *
CHKCSRLC CH    R0,HW320            CURSOR IN DATA? (IE. PAST RULER?)  *
         BL    GOTCSRLC            NO, LEAVE CURSOR ADDRESS ZERO      *
         STH   R0,CSRLOCN          YES, REMEMBER LOCATION FOR LATER   *
GOTCSRLC DS    0H                                                     *
         TM    STATUS5,STPDS       REVIEWING A PDS UNDER A PDS (CMD)? *
         BZ    STAXISON            NO, NO NEED TO ISSUE STAX AGAIN    *
         XC    ATTNLST(ATTNLEN),ATTNLST   YES, ZERO ATTN LIST         *
         L     R5,ATTNADDR         GET ATTENTION EXIT ADDRESS         *
         STAX  (R5),REPLACE=YES,USADDR=STATUS4,MF=(E,ATTNLST)         *
STAXISON DS    0H                                                GP@P6*
         LA    R15,REPLY
         L     R14,TGETREGS+8      GET LENGTH OF REPLY
         CH    R14,HW3             ANYTHING BEYOND CURSOR ADDRESS?
         BNH   CMDNULL             NO, BRANCH
         CLI   3(R15),X'11'        SBA? (SHOULD ALWAYS BE PRESENT)
         BNE   CMDNULL             NO, USER MUST HAVE USED CLEAR KEY
*
*               PROCESS FIELDS IN TGET BUFFER
*
         SLR   R0,R0
         ST    R0,CMDPTR           START WITH COMMAND-NOT-PRESENT
         BCTR  R14,0               LENGTH-1 FOR EX
         EX    R14,TRTSBA
         BZ    CMDNULL             NO FIELDS PRESENT
         LR    R0,R1               ADDRESS OF SBA
         SR    R0,R15              LENGTH OF PRECEDING DATA
         SR    R14,R0              LENGTH CODE OF REMAINING DATA
         BNP   PARSED              BRANCH IF NOTHING FOLLOWS SBA
LOOP     ST    R1,FLDPTR
         LA    R15,1(,R1)          POINT PAST SBA
         BCTR  R14,0               REDUCE LENGTH ACCORDINGLY
         EX    R14,TRTSBA          LOOK FOR SECOND SBA
         BZ    LAST                BRANCH IF NONE PRESENT
         LR    R0,R1               POINT TO NEXT SBA
         SR    R0,R15              GET LENGTH OF THIS DATA
         ST    R0,FLDLEN
         STM   R14,R1,SBASAVE
         BAL   R5,FIELD
         LM    R14,R1,SBASAVE
         SR    R14,R0              LENGTH CODE OF REMAINING DATA
         BNZ   LOOP                SOMETHING FOLLOWS SECOND SBA
         B     PARSED              NOTHING FOLLOWS SECOND SBA
TRTSBA   TRT   0(0,R15),FINDSBA    <<< EXECUTED >>>
LAST     LA    R0,1(,R14)          GET LENGTH OF THIS DATA
         ST    R0,FLDLEN
*        STM   R14,R1,SBASAVE
         BAL   R5,FIELD
         B     PARSED
FIELD    L     R15,FLDPTR          POINT TO SBA FOR FIELD
         L     R1,FLDLEN           GET LENGTH CODE
         CLC   1(2,R15),FLD1BA     IS IT COMMAND?
         BE    FLD1
         CLC   1(2,R15),FLD2BA     IS IT RANGE?
         BE    FLD2                YES
         BR    R5                  NO, USER MUST HAVE USED CLEAR KEY
FLD1     MVC   RECALPTR,RECALUSE   NEXT RECALL STARTS FROM LATEST     *
         SH    R1,HW3              GET LENGTH CODE OF DATA
         BMR   R5                  NO DATA PRESENT
         LA    R15,3(,R15)         POINT TO COMMAND
         ST    R15,CMDPTR          SAVE FOR LATER
         ST    R1,CMDLEN           SAVE LENGTH CODE FOR LATER
         BR    R5                  RETURN
FLD2     SH    R1,HW3              GET LENGTH CODE OF DATA
         BMR   R5                  NO DATA PRESENT
         OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
         LA    R15,3(,R15)         POINT TO RANGE
         CH    R1,HW1              IS IT 2 BYTES?
         BNE   FLD2A               NO, BRANCH
         CLC   0(2,R15),BLANKS     BLANK?
         BER   R5                  YES, IGNORE
         CLI   0(R15),C' '         LEADING BLANK
         BNE   FLD2B               NO, BRANCH
         MVC   0(1,R15),1(R15)     YES, PROMOTE NON-BLANK
         B     FLD2C               GO ADJUST LENGTH
FLD2B    CLI   1(R15),C' '         TRAILING BLANK?
         BNE   FLD2A               NO, BRANCH
FLD2C    BCTR  R1,0                YES, REDUCE LENGTH BY 1
FLD2A    TR    0(2,R15),KAPS       UPPER CASE THE INPUT
         CLI   0(R15),C'C'         CURSOR SPECIFIED?
         BNE   FLD2H               NO, TEST FOR HALF
         OI    STATUS4,CSRSW       YES, ACTIVATE CURSOR SCROLLING
         LH    R0,PAGESIZE         GET NUMBER OF DETAIL LINES ON PAGE
         ST    R0,SCROLL           SAVE NEW DEFAULT LINE SCROLL AMOUNT
         LA    R1,SCREENW-3960                                GYP93274
         LA    R1,3960+SCRRGE-SCREEN(,R1)                     GYP93274
         MVC   0(2,R1),=C'CS'
         BR    R5
FLD2H    CLI   0(R15),C'H'         HALF SPECIFIED?
         BNE   FLD2P               NO, TEST FOR PAGE
         NI    STATUS4,255-PGSW    YES, ENSURE NOT FULL PAGE SCROLLING
         OI    STATUS4,HFSW        ACTIVATE HALF PAGE SCROLLING
         LH    R0,PAGESIZE         GET NUMBER OF DETAIL LINES ON PAGE
         SRL   R0,1                HALF IT
         ST    R0,SCROLL           SAVE NEW DEFAULT LINE SCROLL AMOUNT
         LA    R1,SCREENW-3960                                GYP93274
         LA    R1,3960+SCRRGE-SCREEN(,R1)                     GYP93274
         MVC   0(2,R1),=C'HF'
         BR    R5
FLD2P    CLI   0(R15),C'P'         PAGE SPECIFIED?
         BNE   FLD2N               NO, INSIST UPON NUMERIC
         NI    STATUS4,255-HFSW    YES, ENSURE NOT HALF PAGE SCROLLING
         OI    STATUS4,PGSW        ACTIVATE FULL PAGE SCROLLING
         LH    R0,PAGESIZE         GET NUMBER OF DETAIL LINES ON PAGE
         ST    R0,SCROLL           SAVE NEW DEFAULT LINE SCROLL AMOUNT
         LA    R1,SCREENW-3960                                GYP93274
         LA    R1,3960+SCRRGE-SCREEN(,R1)                     GYP93274
         MVC   0(2,R1),=C'PG'
         BR    R5
FLD2N    EX    R1,TRTNUM           IS DATA NUMERIC?
         BNZR  R5                  NOT NUMERIC, BRANCH
         EX    R1,FLD2PACK         PACK IT
         CVB   R1,DOUBLE           CONVERT TO BINARY
         LTR   R1,R1               IS IT ZERO?
         BZR   R5                  YES, IGNORE
*        CH    R1,PAGESIZE         IS IT GREATER THAN SCREEN SIZE?
*        BHR   R5                  YES, IGNORE
         NI    STATUS4,255-PGSW-HFSW    ENSURE NOT PAGE-TYPE SCROLLING
         ST    R1,SCROLL           SET NEW RANGE
         LR    R0,R1
         LA    R1,SCREENW-3960                                GYP93274
         LA    R1,3960+SCRRGE-SCREEN(,R1)                     GYP93274
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  0(2,R1),DOUBLE+6(2)
         BR    R5
TRTNUM   TRT   0(0,R15),NUMERIC    <<< EXECUTED >>>
FLD2PACK PACK  DOUBLE(8),0(0,R15)  <<< EXECUTED >>>
         SPACE
************************************************************
*                                                          *
*         PROCESS TYPED TEXT PART OF COMMAND               *
*                                                          *
************************************************************
         SPACE
CMDNULL  SLR   R14,R14
         ST    R14,CMDPTR
         ST    R14,CMDLEN
PARSED   L     R15,CMDPTR          POINT TO COMMAND IF ANY
         L     R14,CMDLEN          GET LENGTH CODE
CMDLOAD  MVI   CMDAREA,C' '
         MVC   CMDAREA+1(L'CMDAREA-1),CMDAREA
         LTR   R15,R15             ANY COMMAND?
         BZ    RECALCHK            NO, GO CHECK FOR RECALLED TEXT
         EX    R14,CMDMOVE
         LA    R0,60
CMDJUST  CLI   CMDAREA,C' '        IS COMMAND LEFT JUSTIFIED?
         BNE   CMDJUSTX            YES, BRANCH
         MVC   CMDAREA(62),CMDAREA+1    SHIFT IT LEFT
         MVI   CMDAREA+62,C' '     APPEND BLANK
         BCTR  R14,0               REDUCE LENGTH                 GP@P6*
         BCT   R0,CMDJUST          REPEAT
         CLI   CMDAREA,C' '        ANYTHING TYPED IN?                 *
         BNE   CMDJUSTX            YES, PROCESS IT                    *
RECALCHK CLC   RECALPTR,RECALUSE   NO, WAS A COMMAND RECALLED?        *
         BE    RECALNOP            NO, NO ACTION                      *
         L     R15,RECALPTR        YES                                *
         L     R15,0(,R15)         POINT TO ELEMENT THAT WAS RECALLED *
         LH    R14,8(,R15)         GET TEXT LENGTH CODE               *
         LA    R15,10(,R15)        POINT TO TEXT                      *
         EX    R14,CMDMOVE         USE UNCHANGED RECALLED TEXT        *
         CLI   REPLY,X'7D'         ENTER?                             *
         BNE   RECALNOP            NO, MIGHT BE RECALL PFK            *
CMDJUSTX DS    0H
         LA    R1,CMDAREA          POINT TO COMMAND JUST ENTERED    ABL
         L     R15,RECALUSE        POINT TO CURRENT ELEMENT           *
         CH    R14,8(,R15)         IS THIS COMMAND LENGTH IDENTICAL?  *
         BNE   RECALADD            NO, ADD ANOTHER RECALL STACK ENTRY *
         EX    R14,RECALTST        YES, IS THIS COMMAND IDENTICAL?    *
         BE    RECALNOP            YES, SKIP ENTRY DUPLICATION        *
RECALADD CLI   CMDAREA,X'1C'       DUP CHARACTER?                     *
         BE    RECALNOP            YES, DON'T REMEMBER IT             *
*        CLC   CMDAREA(8),RCALSLOT RECALL COMMAND?  (MIGHT BE OPERAND)*
*        BE    RECALNOP            YES, DON'T REMEMBER IT    (OF PFK) *
         LTR   R14,R14             MORE THAN ONE CHARACTER?           *
         BNP   RECALNOP            NO, DON'T REMEMBER IT              *
         L     R15,0(,R15)         POINT TO NEXT ONE TO USE           *
         XC    10(50,R15),10(R15)  SIMPLIFY DEBUGGING                 *
         EX    R14,RECALOAD        LOAD COMMAND STACK ENTRY           *
         STH   R14,8(,R15)         SAVE LENGTH CODE                   *
         ST    R15,RECALUSE        NEW CURRENT ELEMENT                *
RECALNOP DS    0H                                                     *
         CLI   REPLY,X'7D'         ENTER?
         BE    NOTPFK              YES                           GP@P6*
         SPACE
************************************************************
*                                                          *
*         INTERPRET PROGRAM FUNCTION KEY                   *
*                                                          *
************************************************************
         SPACE
         LA    R1,PFKTAB-2048      POINT TO THE PFK TABLE     GYP93274
         LA    R1,2048(,R1)                                   GYP93274
PFKSRCH  CLI   0(R1),0             END OF PFK TABLE?
         BE    BADPFK              YES, NOT IN TABLE
         CLC   0(1,R1),REPLY       DOES PFK CODE MATCH?
         BE    PFKMOVE             YES, BRANCH
         LA    R1,PFKTABL(,R1)     NO, POINT TO NEXT ENTRY IN TABLE
         B     PFKSRCH             KEEP SEARCHING THE TABLE
PFKMOVE  CLI   1(R1),C' '          IS PFK DEFINITION EMPTY?
         BE    NOTPFK              YES, BRANCH
         MVC   CMDAREA+PFKTABL(63),CMDAREA
         MVC   CMDAREA(PFKTABL-1),1(R1)  MOVE IN THE TEXT           ABL
         SPACE
**********************************************************************
*                                                          *         *
*         PERFORM UPPERCASING AND RECALL IMPLEMENTATION    *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
NOTPFK   LA    R1,CMDAREA          POINT TO ASSOCIATED COMMAND      ABL
         TR    0(3,R1),KAPS        UPPER CASE FIRST THREE CHARACTERS
         CLI   0(R1),C' '          ANY COMMAND REQUESTED AT ALL?
         BE    CMDNILL             NA, NOT A SAUSAGE
         MVI   PFKDISP,0           PFK DISPLAY MUST RESTART
         CLC   0(3,R1),=C'FC '     FIND CHARACTER STRING COMMAND?
         BE    FCTOFIND            YES, CONVERT TO FIND COMMAND
         TR    0(8,R1),KAPS        UPPER CASE FIRST EIGHT CHARACTERS
         CLC   0(8,R1),=C'FINDCHR ' FIND CHARACTER STRING COMMAND?
         BE    FNDCHR2F            YES, CONVERT TO FIND COMMAND
         TR    0(127,R1),KAPS      UPPER CASE
         B     CMDSCAN
FNDCHR2F MVC   4(120,R1),7(R1)     CONVERT 'FINDCHR' TO 'FIND'
         MVC   124(3,R1),BLANKS    APPEND BLANKS
         B     CMDSCAN             SCAN WITHOUT FOLDING TO UPPER CASE
FCTOFIND MVC   1(125,R1),2(R1)     CONVERT 'FC' COMMAND TO 'F' COMMAND
         MVI   126(R1),C' '        APPEND BLANK
         B     CMDSCAN             SCAN WITHOUT FOLDING TO UPPER CASE
RECALTST CLC   10(0,R15),0(R1)     <<< EXECUTED >>>
RECALOAD MVC   10(0,R15),0(R1)     <<< EXECUTED >>>
CMDMOVE  MVC   CMDAREA(0),0(R15)   <<< EXECUTED >>>
CMDNILL  CLI   PFKDISP,0           PART-WAY THROUGH PFK DISPLAY?
         BE    PROMPT              NO, NO ACTION
         OI    STATUS4,HELPSW      YES, MAY AS WELL CONTINUE WITH IT
         B     FILLSCR
         SPACE
************************************************************
*                                                          *
*         PARSE THE COMMAND AND OPERANDS                   *
*                                                          *
************************************************************
         SPACE
CMDSCAN  DS    0H
         LR    R15,R1              POINT TO COLUMN 1
         LA    R5,126              LENGTH CODE OF STATEMENT
         LA    R6,OPDL             POINT TO OPERAND DESCRIPTOR LIST
         XC    0(OPDLL,R6),0(R6)   ZERO THE OPDL
         SLR   R1,R1               ENSURE HI ORDER BYTE ZERO
         LA    R0,OPDLL/8-1        NUMBER OF ENTRIES IN O.D.L.
*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)
PARLOOP  XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY
         EX    R5,TRTNONBL         FIND A NONBLANK
         BZ    PARDONE             BRANCH IF ALL BLANKS
         LR    R14,R1              GET ADDRESS OF STRING
         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS
         SR    R5,R14              GET LENGTH OF REMAINING TEXT
         LR    R15,R1              GET ADDRESS OF NONBLANK
         CLI   0(R15),QUOTE        DOES OPERAND BEGIN WITH A QUOTE?
         BE    PARQUOTE            YES, BRANCH
         EX    R5,TRTBLANK         FIND A BLANK
         BZ    PARLAST             BRANCH IF NOT FOUND
         LR    R14,R1              GET ADDRESS OF BLANK
         SR    R14,R15             GET LENGTH OF FIELD
         OI    6(R6),PRESENT       OPERAND PRESENT
         ST    R15,0(,R6)          ADDRESS OF OPERAND
         STH   R14,4(,R6)          LENGTH OF OPERAND
         SR    R5,R14              GET LENGTH CODE OF REMAINING TEXT
         BZ    PARDONE             BRANCH IF ONE TRAILING BLANK
         LR    R15,R1              POINT TO BLANK
PARNEXT  LA    R6,8(,R6)           POINT TO NEXT O.D.E.
         BCT   R0,PARLOOP          GO PROCESS NEXT OPERAND
         B     PARDONE             MAX OPERANDS PROCESSED
TRTNONBL TRT   0(0,R15),TABNONBL   <<< EXECUTED >>>
TRTBLANK TRT   0(0,R15),TABBLANK   <<< EXECUTED >>>
TRTQUOTE TRT   0(0,R15),1024(R14)  <<< EXECUTED >>>
PARQUOTE LA    R15,1(,R15)         POINT PAST QUOTE
         LA    R1,1                VALUE 1
         SR    R5,R1               REDUCE LENGTH CODE BY 1
         BM    PARDONE             IGNORE QUOTE IN LAST COLUMN
         LA    R14,TABQUOTE-1024   IGNORE QUOTE IN LAST COLUMN
         EX    R5,TRTQUOTE         FIND THE NEXT QUOTE
         BZ    PARLASTQ            NOT FOUND, USE ALL REM TEXT
         LR    R14,R1              GET ADDRESS OF QUOTE
         SR    R14,R15             GET LENGTH OF FIELD
         OI    6(R6),PRESENT+QUOTED OPERAND PRESENT AND IN QUOTES
         ST    R15,0(,R6)          ADDRESS OF OPERAND
         STH   R14,4(,R6)          LENGTH OF OPERAND
         SR    R5,R14              GET LENGTH CODE OF REM TEXT
         BZ    PARDONE             BRANCH IF QUOTE WAS FINAL CHAR
         LA    R15,1(,R1)          POINT TO CHAR AFTER ENDING QUOTE
         BCTR  R5,0                REDUCE LENGTH CODE BY 1
         B     PARNEXT             SET UP FOR NEXT OPERAND
PARLASTQ OI    6(R6),QUOTED        OPERAND IN QUOTES
PARLAST  LA    R14,1(,R5)          GET LENGTH
         OI    6(R6),PRESENT       OPERAND PRESENT
         ST    R15,0(,R6)          ADDRESS OF OPERAND
         STH   R14,4(,R6)          LENGTH OF OPERAND
PARDONE  DS    0H
         L     R1,OPD0             POINT TO COMMAND
         L     R15,RCALSLOT+8                                    GP@P6*
         CLI   0(R1),X'1C'         HANDLE DUP CHARACTER               *
         BER   R15                                                    *
         CLC   0(8,R1),RCALSLOT    HANDLE RECALL CORRECTLY            *
         BER   R15                 MUST SKIP NEXT LINE IF A 'RECALL'  *
         L     R15,PFK0SLOT+8                                         *
         CLC   0(3,R1),=C'PFK'     HANDLE SET-PFK REQUEST             *
         BER   R15                                                    *
         LH    R5,OPD0+4           GET SUBCOMMAND LENGTH CODE PLUS 1  *
         LA    R15,SUBCMDTB-SUBCMDL POINT TO BEFORE SUBCOMMAND TABLE  *
SUBCMDLP LA    R15,SUBCMDL(,R15)   POINT TO NEXT SUBCOMMAND           *
         EX    R5,CMDTEST          IS IT THIS SUBCOMMAND?             *
         BL    INVLDCMD            NO, IT'S NOT IN THE (SORTED) TABLE *
         BH    SUBCMDLP            NO, NOT FOUND (YET)                *
         L     R15,8(,R15)         YES, POINT TO ROUTINE ADDRESS      *
         BR    R15                 GO PERFORM SUBCOMMAND              *
CMDTEST  CLC   0(0,R1),0(R15)      <<< EXECUTED >>>              GP@P6*
INVLDCMD MVC   MSG(MSG20L),MSG20
BELPRMPT L     R1,CBPRM3
         MVI   0(R1),X'C5'         SOUND BELL FOR ERROR MESSAGE
         B     PROMPT
BADPFK   DS    0H
         MVC   MSG(MSG21L),MSG21
         B     BELPRMPT
         SPACE
**********************************************************************
*                                                          *         *
*         TSO                                              *   ABL   *
*                                                          *         *
**********************************************************************
         SPACE
*        NOTE THAT A COMMAND WHICH DOES NOT PERFORM STANDARD
*        OS LINKAGE WILL PROBABLY CAUSE REVIEW TO ABEND.
         SPACE
TSO      DS    0H
         L     R1,16               CVTPTR
         L     R1,0(,R1)           TCB WORDS
         L     R1,4(,R1)           CURRENT TCB
         L     R1,0(,R1)           CURRENT RB
         L     R1,12(,R1)          CURRENT CDE
         SLR   R0,R0
         TM    28(R1),X'04'        INVOKED VIA ALIAS SUCH AS 'REV'?
         BZ    *+8                 NO
         L     R0,20(,R1)          YES, POINT TO MAJOR CDE
         STM   R0,R1,DOUBLE        SAVE CDE ADDRESS(ES)
TSORETRY LA    R1,CMDAREA          START OF TSO PARAMETERS
         LA    R0,L'CMDAREA        LENGTH OF PARSE STRING
         STH   R0,0(,R1)           SAVE FOR PARSE
         LA    R15,OPD1            FIRST PARAMETER
         TM    6(R15),PRESENT      ANY OPERANDS?
         BZ    ERRMISS             NO, MISSING OPERAND
         TM    6(R15),QUOTED       QUOTED?
         BO    ERRINV              YES, INVALID
         L     R14,0(,R15)         START OF PARAMETER
         LH    R15,4(,R15)         LENGTH OF PARAMETER
         LTR   R15,R15             IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         CH    R15,HW8             IS LENGTH MORE THAN 8?
         BH    ERRINV              YES, ERROR
         BCTR  R15,0               MACHINE LENGTH
         MVC   BLDL+4(8),BLANKS
         EX    R15,MVOPRND         MOVE IN THE COMMAND NAME
         ICM   R15,B'1111',DOUBLE  POINT TO MAJOR CDE IF ALIAS USED
         BZ    REALREV1            CURRENT INVOCATION NOT VIA ALIAS
         CLC   8(8,R15),BLDL+4     WILL IT BE A RECURSIVE 'REVIEW'?
         BE    NOEFTSR             YES, DON'T MAKE NEW SUBTASK
REALREV1 L     R15,DOUBLE+4        POINT TO THE CURRENT CDE
         CLC   8(8,R15),BLDL+4     WILL BE RECURSIVE 'REVIEW' OR 'REV'?
         BE    NOEFTSR             YES, DON'T MAKE NEW SUBTASK
         CLC   =C'PDS',BLDL+4      PDS OR PDS/E REQUEST?
         BE    NOEFTSR             YES, DON'T MAKE NEW SUBTASK
         TM    STATUS2,EFTSROK     TSO SERVICE ROUTINE AVAILABLE?
         BZ    NOEFTSR             NO
         LA    R1,CMDTSOEX         YES, MAKE THE BUFFER START EARLIER
         LA    R0,L'CMDAREA+8      NEW LENGTH OF PARSE STRING
         STH   R0,0(,R1)           SAVE FOR PARSE
         MVC   4(8,R1),=C'TSOEXEC '     OVERWRITE TSO WITH TSOEXEC
         LA    R15,OPD1            MAKE COMMAND NAME OPERAND OF TSOEXEC
         B     CBUFHDR             CONSTRUCT COMMAND BUFFER HEADER
MVOPRND  MVC   BLDL+4(*-*),0(R14)  <<< EXECUTED >>>
NOEFTSR  LA    R15,OPD2            START OF SECOND ODL
CBUFHDR  L     R6,REVECT           ECT ADDRESS
         MVC   PCMD,ECTPCMD-ECT(R6)       SAVE CURRENT COMMAND NAME
         MVC   ECTPCMD-ECT(8,R6),BLDL+4   COMMAND NAME IS CHANGED
         MVC   ECTSCMD-ECT(8,R6),BLANKS   NO SECONDARY COMMAND NAME
         L     R14,0(,R15)         START OF SECOND PARAMETER
         LA    R14,0(,R14)         DROP TOP BYTE
         SR    R14,R1              OFFSET TO SECOND PARAMETER
         SH    R14,HW4             LESS TEXT LENGTH FIELDS
         NI    ECTSWS-ECT(R6),X'FF'-ECTNOPD ASSUME OPERANDS
         TM    6(R15),PRESENT      ANY OPERANDS?
         BO    TSOOPSW             YES, BRANCH
         LA    R14,L'CMDAREA       NO, USE DEFAULT
         OI    ECTSWS-ECT(R6),ECTNOPD   NO OPERANDS
         SPACE
TSOOPSW  TM    6(R15),QUOTED       QUOTED?
         BNO   *+6                 NO, BRANCH
         BCTR  R14,0               YES, POINT TO FIRST '
         STH   R14,2(,R1)          OFFSET TO OPERANDS
         ST    R1,REVCBUF          START OF COMMAND TEXT
         ICM   R15,B'1111',DOUBLE  POINT TO MAJOR CDE IF ALIAS USED
         BZ    REALREV2            CURRENT INVOCATION NOT VIA ALIAS
         CLC   8(8,R15),BLDL+4     WILL IT BE A RECURSIVE 'REVIEW'?
         BE    TSOJPAX             YES, ISPF EDIT SHOULD STILL WORK
REALREV2 L     R15,DOUBLE+4        POINT TO THE CURRENT CDE
         CLC   8(8,R15),BLDL+4     WILL BE RECURSIVE 'REVIEW' OR 'REV'?
         BE    TSOJPAX             YES, ISPF EDIT SHOULD STILL WORK
         SPACE
**********************************************************************
*                                                          *         *
*         SEARCH LPAQ FOR PRE-LOADED LINK LIST MODULE      *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
         L     R15,16                      CVTPTR
         LA    R15,188(,R15)               CVTQLPAQ
TSOLPAQ  ICM   R15,B'1111',0(R15)          LAST LPDE ON CHAIN?
         BZ    TSOPLPA                     YES, TRY PLPA
         CLC   BLDL+4(8),8(R15)            FOUND THE COMMAND?
         BE    TSOJPA                      YES, CALL IT FROM MLPA/FLPA
         B     TSOLPAQ                     NO, TRY NEXT ONE
         SPACE
**********************************************************************
*                                                          *         *
*         CALL IEAVVMSR TO SEARCH PLPA DIRECTORY           *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
*              REGS 0 AND 1 - CONTAIN NAME
*              REG 3        - CVT
*              REGS 7 8 9   - WORK REGS
*              REG 14       - RETURN - BAD RETURN 4(14)
*              REG 0        - POINTS TO LPDE AFTER GOOD RETURN
         SPACE
TSOPLPA  LM    R0,R1,BLDL+4
         STM   R14,R12,12(R13)
         L     R3,16                       CVTPTR
         L     R15,352(,R3)                CVTLPDSR
         BALR  R14,R15
         B     TSOPLPAX
         B     TSOTIME                     NOT IN PLPA, DO BLDL
TSOPLPAX LM    R14,R12,12(R13)
TSOJPA   TM    STATUS2,EFTSROK     TSO SERVICE ROUTINE AVAILABLE?
         BZ    TSOJPAX             NO
         CLC   =C'PDS',BLDL+4      PDS OR PDS/E REQUEST?
         BE    TSOJPAX             YES, DON'T MAKE NEW SUBTASK
TSOEXCIT MVC   BLDL+4(8),=C'TSOEXEC '
TSOJPAX  STLINENO LINE=1,MODE=OFF          TURN OFF FULLSCREEN
         LA    R1,REVCBUF                  CPPL START
         LINK  EPLOC=BLDL+4,SF=(E,LINKAREA) USE TASK/STEPLIB OR J/LPA
         B     TSOLNKED                    TSO PROCESSED WITHOUT A BLDL
TSOTIME  LM    R14,R12,12(R13)
         CLC   BLDL+4(5),=C'TIME '         TIME REQUEST?
         BNE   TSOBLDL                     NO, SEARCH LINK LIST
         MVC   BLDL+4(8),=C'IKJEFT25'      YES, USE IKJEFT25
         B     TSOJPAX                     USE THE ONE IN JOB PACK AREA
*                                  WITHOUT TSOEXEC MAKING A NEW SUBTASK
TSOBLDL  BLDL  0,BLDL
         LTR   R15,R15             SUCCESSFUL BLDL?
         BNZ   TSOMEM              NO, BRANCH
         TM    BLDL+17,X'80'       IS REQUESTED COMMAND AN ALIAS?
         BZ    TSOBLDLX            NO
         ICM   R15,B'1111',DOUBLE  POINT TO MAJOR CDE IF UNDER ALIAS
         BZ    REALREV3            CURRENT INVOCATION NOT VIA ALIAS
         CLC   8(8,R15),BLDL+42    WILL IT BE A RECURSIVE 'REVIEW'?
         BE    TSOREDO             YES, SUPPRESS TSOEXEC
REALREV3 L     R15,DOUBLE+4        POINT TO THE CURRENT CDE
         CLC   8(8,R15),BLDL+42    RECURSIVE 'REVIEW' OR 'REV'?
         BNE   TSOBLDLX            NO, TSOEXEC IS ALLOWED
TSOREDO  MVC   CALLPARM(8),BLDL+4  YES, SAVE THIS ALIAS NAME
         LA    R1,CALLPARM-8       POINT TO PHONY "CDE"
         ST    R1,DOUBLE           SAVE ITS ADDRESS
         L     R1,REVECT
         MVC   ECTPCMD-ECT(8,R1),PCMD  RESET COMMAND NAME
         B     TSORETRY            REDO THE WHOLE MESS
TSOBLDLX CLC   BLDL+4(3),=C'PDS'   PDS OR PDS/E REQUEST?
         BE    TSOLINK             YES, DON'T MAKE NEW SUBTASK
         TM    STATUS2,EFTSROK     TSO SERVICE ROUTINE AVAILABLE?
         BO    TSOEXCIT            YES, USE IT
         SPACE
TSOLINK  STLINENO LINE=1,MODE=OFF  TURN OFF FULLSCREEN
         LA    R1,REVCBUF          CPPL START
         LA    R6,BLDL+4           START OF BLDL INFORMATION
         LINK  DE=(R6),SF=(E,LINKAREA) USE TASK/STEPLIB OR LINK LIST
TSOLNKED STFSMODE ON,NOEDIT=YES    TURN ON FULLSCREEN
         L     R1,REVECT
         MVC   ECTPCMD-ECT(8,R1),PCMD  RESET COMMAND NAME
         B     FILLSCR
         SPACE
TSOMEM   MVC   MSG(MSG39L),MSG39   COMMAND NOT FOUND
         L     R1,REVECT
         MVC   ECTPCMD-ECT(8,R1),PCMD  RESET COMMAND NAME
BELFILSC L     R1,CBPRM3
         MVI   0(R1),X'C5'         SOUND BELL FOR ERROR MESSAGE
         B     FILLSCR
         SPACE
************************************************************
*                                                          *
*         RIGHT                                            *
*                                                          *
************************************************************
         SPACE
RIGHT    DS    0H
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    RIGHTDEF            NO, USE DEFAULT
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         CH    R1,HW7              IS LENGTH MORE THAN 7?
         BH    ERRINV              YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         CLI   0(R14),C'C'         CURSOR REQUESTED?             GP@P6*
         BE    RIGHTCSR            YES                                *
         CLI   0(R14),C'M'         MAXIMUM REQUESTED?                 *
         BE    RIGHTMAX            YES                                *
         CLI   0(R14),C'P'         FULL PAGE REQUESTED?               *
         BE    RITEPAGE            YES                                *
         CLI   0(R14),C'H'         HALF PAGE REQUESTED?               *
         BE    RITEHALF            YES                           GP@P6*
         BCTR  R1,0
         EX    R1,NUMRCTRT         IS IT NUMERIC?
         BNZ   ERRINV              NO, ERROR
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R15,R1
         BZ    PROMPT
         B     RIGHTR15
RIGHTCSR LH    R1,CSRLOCN          GET CURSOR SCREEN ADDRESS     GP@P6*
         LTR   R1,R1               IN DATA PART OF SCREEN?            *
         BZ    RITEPAGE            NO, CAN'T BE CURSOR SCROLLING      *
         SLR   R0,R0               YES, PREPARE FOR DIVIDE            *
         LA    R15,80              LOAD COLUMNS PER SCREEN LINE       *
         DR    R0,R15              GET CURSOR X AND Y COORDINATES     *
         LTR   R15,R0              LOAD CURSOR COLUMN OFFSET          *
         BZ    RITEPAGE            CURSOR WAS IN COLUMN 1             *
         TM    MODE,MODEX          IS HEX DISPLAY ON?                 *
         BZ    RIGHTR15            NO, GO SCROLL RIGHT                *
         SRA   R15,1               YES, HALVE SCROLL AMOUNT           *
         BZ    RITEPAGE            CURSOR WAS IN COLUMN 2             *
         B     RIGHTR15            GO SCROLL RIGHT                    *
RITEHALF LA    R15,40              GET HALF OF SCREEN WIDTH           *
         B     RITEMODE                                               *
RIGHTMAX LH    R15,RECSIZE                                            *
         B     RIGHTR15                                               *
RIGHTDEF TM    STATUS4,CSRSW       CURSOR SCROLLING?                  *
         BO    RIGHTCSR            YES                                *
         TM    STATUS4,PGSW        FULL PAGE SCROLLING?               *
         BO    RITEPAGE            YES, IT MEANS RIGHT-A-PAGE         *
         TM    STATUS4,HFSW        HALF PAGE SCROLLING?               *
         BO    RITEHALF            YES, IT MEANS HALF-A-PAGE          *
         L     R15,SCROLL          NO, USE SCROLL AMOUNT              *
         B     RIGHTR15                                          GP@P6*
RITEPAGE LA    R15,80
RITEMODE TM    MODE,MODEX
         BZ    *+8
         SRL   R15,1
RIGHTR15 LH    R0,OFFSET
         AR    R0,R15
         LH    R1,RECSIZE
         LA    R15,80
         TM    MODE,MODEX
         BZ    *+8
         LA    R15,40
         SR    R1,R15              GET RECSIZE-80
         BNM   *+6                 IF RECSIZE IS LESS THAN 80
         SLR   R1,R1                  THEN RECSIZE-80 IS ZERO
         CR    R0,R1               IF OFFSET+80 GT RECSIZE-80
         BNH   *+6                    THEN
         LR    R0,R1                  USE RECSIZE-80
         STH   R0,OFFSET
         B     FILLSCR
         SPACE
NUMRCTRT TRT   0(0,R14),NUMERIC    <<< EXECUTED >>>
NUMRCPAK PACK  DOUBLE(8),0(0,R14)  <<< EXECUTED >>>
         SPACE
************************************************************
*                                                          *
*         LEFT                                             *
*                                                          *
************************************************************
         SPACE
LEFT     DS    0H
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    LEFTDEF             NO, USE DEFAULT
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         CH    R1,HW7              IS LENGTH MORE THAN 7?
         BH    ERRINV              YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         CLI   0(R14),C'C'         CURSOR REQUESTED?             GP@P6*
         BE    LEFTCSR             YES                                *
         CLI   0(R14),C'M'         MAXIMUM REQUESTED?                 *
         BE    LEFTMAX             YES                                *
         CLI   0(R14),C'P'         FULL PAGE REQUESTED?               *
         BE    LEFTPAGE            YES                                *
         CLI   0(R14),C'H'         HALF PAGE REQUESTED?               *
         BE    LEFTHALF            YES                           GP@P6*
         BCTR  R1,0
         EX    R1,NUMRCTRT         IS IT NUMERIC?
         BNZ   ERRINV              NO, ERROR
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R15,R1
         BZ    PROMPT
         B     LEFTR15
LEFTCSR  LH    R1,CSRLOCN          GET CURSOR SCREEN ADDRESS     GP@P6*
         LTR   R1,R1               IN DATA PART OF SCREEN?            *
         BZ    LEFTPAGE            NO, CAN'T BE CURSOR SCROLLING      *
         SLR   R0,R0               YES, PREPARE FOR DIVIDE            *
         LA    R15,80              LOAD COLUMNS PER SCREEN LINE       *
         DR    R0,R15              GET CURSOR X AND Y COORDINATES     *
         BCTR  R15,0               GET 79                             *
         SR    R15,R0              LOAD CURSOR OFFSET FROM RIGHT SIDE *
         BZ    LEFTPAGE            CURSOR WAS IN COLUMN 80            *
         TM    MODE,MODEX          IS HEX DISPLAY ON?                 *
         BZ    LEFTR15             NO, GO SCROLL LEFT                 *
         SRA   R15,1               YES, HALVE SCROLL AMOUNT           *
         BZ    LEFTPAGE            CURSOR WAS IN COLUMN 79            *
         B     LEFTR15             GO SCROLL LEFT                     *
LEFTHALF LA    R15,40              GET HALF OF SCREEN WIDTH           *
         B     LEFTMODE                                               *
LEFTDEF  TM    STATUS4,CSRSW       CURSOR SCROLLING?                  *
         BO    LEFTCSR             YES                                *
         TM    STATUS4,PGSW        FULL PAGE SCROLLING?               *
         BO    LEFTPAGE            YES, IT MEANS LEFT-A-PAGE          *
         TM    STATUS4,HFSW        HALF PAGE SCROLLING?               *
         BO    LEFTHALF            YES, IT MEANS HALF-A-PAGE          *
         L     R15,SCROLL          NO, USE SCROLL AMOUNT              *
         B     LEFTR15                                           GP@P6*
LEFTPAGE LA    R15,80
LEFTMODE TM    MODE,MODEX
         BZ    *+8
         SRL   R15,1
LEFTR15  LH    R0,OFFSET
         SR    R0,R15              REDUCE OFFSET BY 80
         BNM   *+6                 IF RESULT IS NEGATIVE
LEFTMAX  SLR   R0,R0                  THEN MAKE IT ZERO
         STH   R0,OFFSET
         B     FILLSCR
         SPACE
************************************************************
*                                                          *
*         DOWN                                             *
*                                                          *
************************************************************
         SPACE
DOWN     DS    0H
         L     R0,SCROLL
         TM    STATUS4,CSRSW       CURSOR SCROLLING ACTIVE?      GP@P6*
         BNO   DOWNOTCS            NO                                 *
DOWNCSR  LH    R1,CSRLOCN          YES, GET CURSOR SCREEN ADDRESS     *
         LTR   R1,R1               IN DATA PART OF SCREEN?            *
         BZ    DOWNOTCS            NO, CAN'T BE CURSOR SCROLLING      *
         SLR   R0,R0               YES, PREPARE FOR DIVIDE            *
         LA    R15,80              LOAD COLUMNS PER SCREEN LINE       *
         DR    R0,R15              GET CURSOR X AND Y COORDINATES     *
         L     R0,SCROLL           GET PAGE SCROLL AMOUNT             *
         SH    R1,HW4              GET LINE COUNT TO SCROLL DOWN      *
         BNP   DOWNOTCS            SCROLL A PAGE IF REQUIRED          *
         LR    R0,R1               LOAD INTO CORRECT REGISTER         *
DOWNOTCS DS    0H                  GOT SCROLL AMOUNT FROM CURSOR GP@P6*
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    DOWNRGE             NO, USE RANGE
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         CH    R1,HW7              IS LENGTH MORE THAN 7?
         BH    ERRINV              YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         CLI   0(R14),C'C'         CURSOR SCROLLING REQUESTED?   GP@P6*
         BNE   DOWNFIXD            NO, SCROLL DOWN BY A FIXED AMOUNT  *
         MVI   6(R15),0            YES, OBLITERATE OPERAND TRACE      *
         B     DOWNCSR             SCROLL DOWN BY CURSOR AMOUNT       *
DOWNFIXD LH    R0,PAGESIZE         GET SIZE OF SCREEN PAGE            *
         CLI   0(R14),C'P'         FULL PAGE REQUESTED?               *
         BE    DOWNISH             YES                                *
         SRL   R0,1                HALVE IT                           *
         CLI   0(R14),C'H'         HALF PAGE REQUESTED?               *
         BE    DOWNISH             YES                                *
         CLI   0(R14),C'M'         MAXIMUM REQUESTED?                 *
         BE    BOTTOM              YES                           GP@P6*
         BCTR  R1,0
         EX    R1,NUMRCTRT         IS IT NUMERIC?
         BNZ   ERRINV              NO, ERROR
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R0,R1
         BZ    PROMPT
DOWNRGE  TM    STATUS2,FASTREAD    DIRECT ACCESS "FASTPATH"?     GP@P6*
         BZ    DOWNISH             NO, READ DOWN TO LINE NUMBER       *
         CH    R0,PAGESIZE         SCROLL DOWN MORE THAN A PAGE?      *
         BNH   DOWNISH             NO, READ DOWN TO LINE NUMBER       *
         L     R7,HOLDTOP                                             *
         A     R0,DIRNUM(,R7)      GET THE REQUESTED TOP LINE         *
         B     LISTAT              INVOKE "FASTPATH"             GP@P6*
DOWNISH  ST    R0,DOWNAMT
         BAL   R14,DOWNER
         LTR   R15,R15             ACTION TAKEN?
         BNZ   PROMPT              NO, BRANCH
         B     FILLSCR             YES, BRANCH
         SPACE
DOWNER   DS    0H
*
*              SEE IF EOF IS ON SCREEN AND WOULD BE FORCED OFF
*
         LA    R15,4
         TM    DIRLEN(R7),X'80'    IS EOF ON SCREEN?
         BZ    DOWNNEOF            NO, DOWN IS POSSIBLE
         L     R7,HOLDTOP
*        L     R0,DOWNAMT          GET DOWN AMOUNT
DOWNTEST TM    DIRLEN(R7),X'80'    IS THIS END OF DATA?
         BOR   R14                 YES, CAN'T GO DOWN
*        L     R7,DIRNXT(,R7)      GET ENTRY FOR NEXT RECORD
*        BCT   R0,DOWNTEST
*
*              EOF WOULD NOT BE FORCED OFF TOP OF SCREEN
*
DOWNNEOF L     R7,HOLDEND          POINT TO ENTRY FOR LAST RECORD
         ST    R14,DOWNR
         L     R8,DOWNAMT          GET NUMBER OF LINES TO GO DOWN
DOWNLOOP L     R15,HOLDTOP         POINT TO TOP ENTRY
         L     R15,DIRNXT(,R15)    GET ADDRESS OF ENTRY AFTER TOP
         ST    R15,HOLDTOP         MAKE IT NEW TOP
         TM    DIRLEN(R15),X'80'   IS EOF ON TOP OF SCREEN?      GP@P6
         BO    DOWNX               YES, EXIT                     GP@P6
         TM    DIRLEN(R7),X'80'    IS EOF ON SCREEN?
         BO    DOWNNXT             YES, BYPASS GET
         L     R7,DIRNXT(,R7)      POINT TO NEXT ENTRY
         BAL   R14,GET
         LA    R0,1                COMPUTE
         A     R0,COUNT             THE
         ST    R0,COUNT              RECORD NUMBER
         ST    R0,DIRNUM(,R7)      STORE THE RECORD NUMBER
         ST    R1,DIRLEN(,R7)      STORE LENGTH
         MVC   DIRTTR(4,R7),TTR    SAVE BLOCK ADDRESS            GP@P6
         NI    DIRNXT(R7),X'7F'    RESET RRDS EMPTY SLOT FLAG    GP@P6
         LTR   R1,R1               END OF FILE?
         BM    DOWNNXT             YES, BRANCH
         OC    DIRNXT(1,R7),DEBLOCKS COPY RRDS EMPTY SLOT FLAG   GP@P6
         C     R1,SAVLRECL         IS RECORD LONGER THAN MAX?
         BNH   *+8                 NO, SKIP NEXT INSTR
         L     R1,SAVLRECL         YES, TRUNCATE TO MAX
         LR    R0,R2               ADDRESS TO MOVE FROM
         L     R14,DIRREC(,R7)     ADDRESS TO MOVE TO
         TM    TSTRECFM,X'40'      RECFM V?
         BZ    DOWNNOTV            NO
         SH    R14,HW4             YES, MOVE TO PTR MINUS 4
         L     R15,DIRLEN(,R7)
         SH    R15,HW4
         ST    R15,DIRLEN(,R7)
DOWNNOTV L     R15,SAVLRECL        LENGTH OF RECEIVING FIELD
         ICM   R1,8,BLANKS         PAD WITH BLANKS
         MVCL  R14,R0
DOWNNXT  TM    STATUS4,FLAGI       IF ATTENTION INTERRUPT THEN  GP@SECV
         BO    DOWNX               PRETEND WE'RE THERE AND STOP GP@SECV
         BCT   R8,DOWNLOOP
DOWNX    ST    R7,HOLDEND          NEW END POINTER
         SLR   R15,R15             INDICATE SOME ACTION TAKEN
         L     R14,DOWNR
         BR    R14
         SPACE
************************************************************
*                                                          *
*         UP                                               *
*                                                          *
************************************************************
         SPACE
UP       DS    0H
         L     R0,SCROLL
         TM    STATUS4,CSRSW       CURSOR SCROLLING ACTIVE?      GP@P6*
         BNO   UPNOTCSR            NO                                 *
UPCSR    LH    R1,CSRLOCN          YES, GET CURSOR SCREEN ADDRESS     *
         LTR   R1,R1               IN DATA PART OF SCREEN?            *
         BZ    UPNOTCSR            NO, CAN'T BE CURSOR SCROLLING      *
         SLR   R0,R0               YES, PREPARE FOR DIVIDE            *
         LA    R15,80              LOAD COLUMNS PER SCREEN LINE       *
         DR    R0,R15              GET CURSOR X AND Y COORDINATES     *
         LA    R1,1(,R1)           CONVERT RELATIVE TO ABSOLUTE LINE  *
         L     R0,SCROLL           GET PAGE SCROLL AMOUNT             *
         S     R1,SCRNLNES         GET NEGATIVE LINES TO SCROLL UP    *
         BNM   UPNOTCSR            SCROLL A PAGE IF REQUIRED          *
         LPR   R0,R1               CONVERT TO A POSITIVE NUMBER       *
UPNOTCSR DS    0H                  GOT SCROLL AMOUNT FROM CURSOR GP@P6*
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    UPRANGE             NO, USE RANGE
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         CH    R1,HW7              IS LENGTH MORE THAN 7?
         BH    ERRINV              YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         CLI   0(R14),C'C'         CURSOR SCROLLING REQUESTED?   GP@P6*
         BNE   UPFIXED             NO, SCROLL UP BY A FIXED AMOUNT    *
         MVI   6(R15),0            YES, OBLITERATE OPERAND TRACE      *
         B     UPCSR               SCROLL UP BY CURSOR AMOUNT         *
UPFIXED  LH    R0,PAGESIZE         GET SIZE OF SCREEN PAGE            *
         CLI   0(R14),C'P'         FULL PAGE REQUESTED?               *
         BE    UPRANGE             YES                                *
         SRL   R0,1                HALVE IT                           *
         CLI   0(R14),C'H'         HALF PAGE REQUESTED?               *
         BE    UPRANGE             YES                                *
         CLI   0(R14),C'M'         MAXIMUM REQUESTED?                 *
         BE    TOP                 YES                           GP@P6*
         BCTR  R1,0
         EX    R1,NUMRCTRT         IS IT NUMERIC?
         BNZ   ERRINV              NO, ERROR
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R0,R1
         BZ    PROMPT
UPRANGE  ST    R0,DOWNAMT
         L     R7,HOLDTOP
         CLC   DIRNUM(4,R7),FW1    ARE WE AT TOP ALREADY?
         BNH   PROMPT              YES, BRANCH
         TM    DIRLEN(R7),X'80'    IS FIRST LINE EOF?
         BZ    UPTOP               NO, BRANCH
         NC    COUNT,COUNT         IS DATA SET EMPTY?
         BZ    PROMPT              YES, BRANCH
UPTOP    DS    0H
         L     R0,DIRNUM(,R7)      GET RECORD NUMBER OF TOP LINE
         S     R0,DOWNAMT          GET RECORD NUMBER TO GO BACK TO
         BP    LISTAT              IF POSITIVE THEN LIST IT
*                                     ELSE DROP THOUGH TO TOP
         SPACE
************************************************************
*                                                          *
*         TOP                                              *
*                                                          *
************************************************************
         SPACE
TOP      DS    0H
         L     R14,SPANPTR
         SLR   R0,R0
         ST    R0,COUNT            RESET RELATIVE RECORD NUMBER
         STH   R0,0(,R14)          RESET SPAN BUFFER LENGTH
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET
         LA    R0,1                WANT TO LIST FIRST RECORD     GP@P6*
         TM    STATUS2,FASTREAD    IS "FASTPATH" AVAILABLE?           *
         BO    LISTAT              YES, USE IT                        *
         TM    STATUS2,EOTAPE      END-OF-FILE FOR TAPE?              *
         BO    LISTAT              YES, REPOSITION TAPE               *
         L     R1,CHKPTTOP
         TM    0(R1),X'80'         IS DATA SET EMPTY?                 *
         BO    PROMPT              YES                                *
         ICM   R15,B'1111',$UCBAD  PHYSICAL DEVICE OUT THERE?         *
         BZ    LISTAT              NO, AVOID POINT               GP@P6*
         MVC   TTR,4(R1)           TTR OF FIRST BLOCK
         POINT (R4),TTR
         XC    DEBLOCKS(12),DEBLOCKS
         BAL   R14,FILLHOLD
         TM    FINDSW,FACT         IS FIND ACTIVE?               GP@P6
         BO    FINDCONT            YES, CONTINUE WITH FIND       GP@P6
         B     FILLSCR
         SPACE
************************************************************
*                                                          *
*         BOTTOM                                           *
*                                                          *
************************************************************
         SPACE
BOTTOM   DS    0H
         L     R0,BOTNINES
         B     LISTAT
BOTRET   LH    R0,PAGESIZE         (PAGESIZE, NOT SCROLL)       GP@SECV
         BCTR  R0,0                SHOW ** BOTTOM OF DATA **    GP@SECV
         B     UPRANGE
         SPACE
************************************************************
*                                                          *
*         LIST                                             *
*                                                          *
************************************************************
         SPACE
LIST     DS    0H
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    ERRMISS             NO, MISSING OPERAND
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         CH    R1,HW7              IS LENGTH MORE THAN 7?
         BH    ERRINV              YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0
         EX    R1,NUMRCTRT         IS IT NUMERIC?
         BNZ   ERRINV              NO, ERROR
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R0,R1
         BZ    TOP
         SPACE
LISTAT   ST    R0,LISTNUM
         L     R7,HOLDTOP          GET TOP SCREEN RECORD STUFF   GP@P6*
         S     R0,DIRNUM(,R7)      GET REQUIRED CHANGE IN TOP NUMBER  *
         BZ    LISTRDY             ALREADY THERE SO AVOID I/O         *
         BM    LISTFAST            HAVE TO GO UP -CHECK FOR "FASTPATH"*
         CH    R0,PAGESIZE         SCROLLING DOWN MORE THAN A PAGE?   *
         BNH   LISTFINE            NO, SO GO DOWN SEQUENTIALLY        *
LISTFAST L     R0,LISTNUM          RESTORE TARGET TOP SCREEN NO  GP@P6*
         TM    STATUS2,FASTREAD    IS "FASTPATH" AVAILABLE?      GP@P6*
         BZ    LIST@               NO                                 *
         SLR   R1,R1               YES                                *
         ST    R1,CHKPTBOT         ZERO CHECKPOINT TABLE              *
         XC    DEBLOCKS(12),DEBLOCKS                                  *
         C     R0,MAXPOINT         FURTHER THAN ANY MAN HAS GONE B4?  *
         BNH   *+8                 NO                                 *
         L     R0,MAXPOINT         YES, USE DISCRETION                *
*                                                                     *
         SRDL  R0,32               PREPARE LINE NUMBER FOR DIVIDE     *
         A     R1,BLKFACTR                                            *
         BCTR  R1,0                                                   *
         D     R0,BLKFACTR         GET RELATIVE BLOCK NUMBER          *
         LR    R6,R1               SAVE FOR LATER                     *
         SLR   R0,R0                                                  *
         D     R0,BLKSATRK         GET TT IN R1, R IN R0              *
         LTR   R0,R0               ZERO REMAINDER?                    *
         BNZ   LISTNOT0            NO                                 *
         BCTR  R1,0                YES, DECREMENT RELATIVE TRACK      *
         L     R0,BLKSATRK         CORRECT RECORD NUMBER              *
LISTNOT0 STH   R1,TTR              STORE RELATIVE TRACK NUMBER        *
         STC   R0,TTR+2            STORE RECORD NUMBER                *
         POINT (R4),TTR            POINT TO THE CHOSEN RECORD         *
         BCTR  R6,0                                                   *
         MH    R6,BLKFACTR+2                                          *
         ST    R6,COUNT            SAVE PREVIOUS RECORD'S NUMBER      *
         B     LISTFILL            READ SOME RECORDS             GP@P6*
LIST@    LA    R15,CHKPTLN         LENGTH OF CHKPT ENTRY
         L     R1,CHKPTBOT
         TM    0(R1),X'80'         IS IT EOF?
         BZ    LISTCK
         C     R1,CHKPTTOP         IS DATA SET EMPTY?
         BE    PROMPT              YES
         SR    R1,R15              NO, BACK UP ONE ENTRY
LISTCK   C     R0,0(,R1)           DOES THIS BLOCK PRECEDE OUR RECORD?
         BH    LISTPNT             YES, GO POINT TO IT
         SR    R1,R15              NO, BACK UP ONE BLOCK ENTRY
         B     LISTCK
LISTPNT  MVC   COUNT,0(R1)
         XC    DEBLOCKS(12),DEBLOCKS
         ICM   R0,B'1111',$UCBAD   TALKING TO PHYSICAL DEVICE?   GP@P6
         BZ    LISTFILL            NO, NO POINT IN A POINT       GP@P6
         MVC   TTR,4(R1)           TTR OF PRIOR BLOCK
         TM    STATUS2,EOTAPE      END-OF-FILE FOR TAPE?         GP@P6*
         BZ    LISTPTOK            NO, CONTINUE AS PLANNED            *
         MVI   CLOSED,X'80'        YES, REPOSITION FOR POINT          *
         CLOSE ((R4),REREAD),TYPE=T,MF=(E,CLOSED)                     *
         NI    STATUS2,255-EOTAPE  REPOSITIONED AT START         GP@P6*
LISTPTOK POINT (R4),TTR
         SPACE
LISTFILL L     R14,SPANPTR
         SLR   R0,R0
         STH   R0,0(,R14)          RESET SPAN BUFFER LENGTH
         BAL   R14,FILLHOLD        READ NEXT 20 RECORDS
         SPACE
LISTFINE L     R7,HOLDTOP          GET ENTRY FOR TOP OF HOLD AREA
         TM    DIRLEN(R7),X'80'    IS EOF ON TOP OF SCREEN?
         BO    LISTRDY             YES, WE ARE FINISHED
         CLC   LISTNUM,DIRNUM(R7)  IS REQUESTED NUMBER AT TOP?
         BNH   LISTRDY             YES, WE ARE FINISHED          GP@P6
         TM    STATUS4,FLAGI       ATTENTION INTERRUPT?         GP@SECV
         BO    FILLSCR             YES                          GP@SECV
         MVC   DOWNAMT,FW1         DOWN 1
         BAL   R14,DOWNER
         B     LISTFINE
LISTRDY  TM    FINDSW,FACT         IS FIND ACTIVE?               GP@P6
         BO    FINDCONT            YES, CONTINUE WITH FIND       GP@P6
         CLC   LISTNUM,BOTNINES    WAS THIS A LIST 99999999?
         BE    BOTRET              YES, BRANCH
         B     FILLSCR
ERRMISS  MVC   MSG(MSG35L),MSG35
         B     BELPRMPT
         SPACE
************************************************************
*                                                          *
*         FIND                                             *
*                                                          *
************************************************************
         SPACE
FIND     DS    0H
         LA    R15,OPD4                                          GP@P6*
         TM    6(R15),PRESENT      TOO MANY OPERANDS?                 *
         BO    ERRINV              YES                                *
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    FINDSAME            NO, USE PREVIOUS STRING
         MVI   FINDSW,0            CLEAR FIND FLAGS
         SLR   R0,R0
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET
         STH   R0,FINDCOL          RESET COLUMN
         LH    R1,4(,R15)          GET LENGTH
         L     R14,0(,R15)         GET ADDRESS OF DATA
         TM    6(R15),QUOTED       QUOTED?                            *
         BO    FINDDIFF            YES, CAN'T BE 'FIND *'             *
         CH    R1,HW1              NO, FIRST OPERAND LENGTH OF ONE?   *
         BNE   FINDDIFF            NO, CAN'T BE 'FIND *'              *
         CLI   0(R14),C'*'         YES, IS IT AN ASTERISK?            *
         BE    FNDXLATD            YES, LEAVE THE STRING AS IS        *
FINDDIFF XC    STRING,STRING       ERASE OLD STRING
         MVI   STRINGL,X'FF'       INVALIDATE SEARCH STRING           *
         LTR   R1,R1               IS IT NULL STRING?
         BZ    FINDNULL            YES, ERROR
         BCTR  R1,0
         STH   R1,STRINGL          SAVE LENGTH CODE
         EX    R1,FINDMVC
         TM    MODE,ASCIISW        MAKE 'FIND' ARGUMENT ASCII?        *
         BZ    FNDXLATD            NO, NO TRANSLATION REQUIRED        *
         LA    R0,1(,R1)           YES, GET THE STRING LENGTH         *
         LA    R1,STRING           GET THE STRING ADDRESS             *
         XLATE (1),(0),TO=A        TRANSLATE CHARACTERS TO ASCII CODE *
FNDXLATD DS    0H                                                     *
         LA    R0,2                GET MAXIMUM OPERAND COUNT          *
         LA    R15,OPD2            POINT TO FIRST OPERAND DETAILS
FOPERLP  TM    6(R15),PRESENT      IS THERE ANOTHER OPERAND?
         BZ    FINDSAME            NO, GO COMMENCE SEARCHING
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRINV              YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0
         EX    R1,NUMRCTRT         IS IT NUMERIC?
         BNZ   FNONUMOP            NO, BRANCH
         TM    FINDSW,FNUM         YES, NUMERIC OPERAND ALREADY DONE? *
         BO    ERRINV              YES, ERROR                         *
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         LTR   R1,R1               IS IT ZERO?
         BZ    ERRINV              YES, ERROR
         LH    R7,STRINGL          GET SEARCH STRING LENGTH CODE      *
         AR    R7,R1               DETERMINE ENDING COLUMN OF DATA    *
         CH    R7,RECSIZE          END OF STRING PAST END OF RECORD?  *
         BH    ERRINV              YES, ERROR
         STH   R1,FINDCOL
         OI    FINDSW,FNUM         NUMERIC OPERAND NOW DONE           *
         B     FOPERNXT            PROCESS ANY OTHER OPERAND          *
FNONUMOP TM    FINDSW,FWRD         NON-NUMERIC OPERAND ALREADY DONE?  *
         BO    ERRINV              YES, ERROR                         *
         TR    0(5,R14),KAPS       ENSURE UPPER CASE FOR FINDCHR      *
         LH    R1,4(,R15)          GET LENGTH                         *
         CH    R1,HW4              FOUR-BYTE OPERAND?                 *
         BNE   FWRD5CHK            NO, BRANCH                         *
         CLC   0(4,R14),=C'NEXT'                                      *
         BE    FWRDX               PROCESS 'NEXT' REQUEST             *
         CLC   0(4,R14),=C'PREV'                                      *
         BE    FWRDB               PROCESS 'PREV' REQUEST             *
         CLC   0(4,R14),=C'LAST'                                      *
         BNE   ERRINV              ERROR                              *
         OI    FINDSW,FEND+FBAK    PROCESS 'LAST' REQUEST             *
         B     FWRDX                                                  *
FWRDB    OI    FINDSW,FBAK         SEARCH DIRECTION IS BACKWARD       *
         STCM  R0,B'1100',FNDOFF   RESET LAST-FOUND COLUMN            *
         L     R7,HOLDTOP          GET INFO FOR FIRST HELD RECORD     *
         MVC   FNDNUM,DIRNUM(R7)   SET LAST-FOUND RECORD NUMBER       *
         B     FWRDX                                                  *
FWRD5CHK CH    R1,HW5              FIVE-BYTE OPERAND?                 *
         BNE   ERRINV              NO, ERROR                          *
         CLC   0(5,R14),=C'FIRST'                                     *
         BNE   ERRINV              ERROR                              *
         OI    FINDSW,FTOP         PROCESS 'FIRST' REQUEST            *
FWRDX    OI    FINDSW,FWRD         NON-NUMERIC OPERAND NOW DONE       *
FOPERNXT LA    R15,8(,R15)         POINT TO NEXT POSSIBLE OPD         *
         BCT   R0,FOPERLP          PROCESS NEXT POSSIBLE OPERAND      *
FINDSAME DS    0H
         CLI   STRINGL,0           HAS A STRING BEEN ENTERED?         *
         BNE   FINDNULL            NO, ERROR                          *
         NI    FINDSW,255-FVRT
         OI    FINDSW,FACT         FIND NOW ACTIVE AND THAT'S A FACT  *
         TM    FINDSW,FTOP         SEARCH FROM TOP OF DATA?           *
         BO    FINDTOP             YES, BRANCH                        *
         TM    FINDSW,FEND         SEARCH FROM END OF DATA?           *
         BO    FINDLAST            YES, BRANCH                        *
         LH    R15,CSRLOCN         GET CURSOR SCREEN ADDRESS          *
         LTR   R15,R15             IN DATA PART OF SCREEN?            *
         BZ    FINDCONT            NO, CAN'T BE SEARCH FROM CURSOR    *
         SLR   R14,R14             YES, PREPARE FOR DIVIDE            *
         LA    R1,80               LOAD COLUMNS PER SCREEN LINE       *
         DR    R14,R1              GET CURSOR X AND Y COORDINATES     *
         SH    R15,HW4             TAKE HEADINGS INTO ACCOUNT         *
         L     R7,HOLDTOP          POINT TO TOP RECORD'S INFO         *
         A     R15,DIRNUM(,R7)     GET RECORD NUMBER OF CURSOR        *
         ST    R15,FNDNUM          START SEARCH FROM THIS RECORD      *
         TM    MODE,MODEX          IN HEXADECIMAL MODE?               *
         BZ    *+8                 NO                                 *
         SRL   R14,1               YES, HALVE APPARENT OFFSET         *
         AH    R14,OFFSET          GET OFFSET INTO RECORD             *
         STH   R14,FNDOFF          START SEARCH FROM THIS OFFSET      *
FINDCONT LH    R6,FINDCOL
         TM    FINDSW,FBAK         PERFORMING BACKWARD SEARCH?        *
         BO    FINDBACK            YES                                *
         L     R7,HOLDTOP          GET INFO FOR FIRST HELD RECORD
         L     R0,DIRNUM(,R7)      GET RECORD NUMBER OF FIRST HELD
         ICM   R1,B'1111',FNDNUM   GET RECORD NUMBER WHERE LAST FOUND
         BNP   FINDSCR             NOT FOUND SO START WITH HELD RECORDS
         CR    R0,R1               ARE WE PAST LAST FOUND REC?
         BH    FINDSCR             YES, START WITH HELD RECORDS
         L     R14,HOLDEND
         L     R15,DIRNUM(,R14)    GET RECORD NUMBER OF LAST HELD
         CR    R1,R15              IS LAST FOUND REC ON SCREEN?
         BH    FINDSCR             NO, START WITH HELD RECORDS
FINDPREV C     R1,DIRNUM(,R7)      IS THIS RECORD WHERE LAST FOUND?
         BE    FINDPCOL            YES, BRANCH
         C     R7,HOLDEND          IS THIS LAST RECORD ON SCREEN?
         BE    FINDDOWN            SHOULD NOT HAPPEN
         L     R7,DIRNXT(,R7)      POINT TO NEXT RECORD
         B     FINDPREV
FINDPCOL L     R15,DIRREC(,R7)     POINT TO RECORD
         LTR   R6,R6               WAS A COLUMN SPECIFIED?
         BZ    FINDPOFF            NO, LOOK AT SAME RECORD
         LA    R0,1                                                   *
         AH    R0,FNDOFF           GET LAST FOUND COLUMN              *
         CR    R0,R6               BEFORE ROW'S SEARCH COLUMN?        *
         BL    FINDSCR             YES, LOOK AT SAME RECORD           *
         C     R7,HOLDEND          IS THIS LAST RECORD ON SCREEN?
         BE    FINDDOWN            YES, BRANCH
         L     R7,DIRNXT(,R7)      NO, POINT TO NEXT RECORD
         B     FINDSCR             GO EXAMINE RECORD
FINDPOFF AH    R15,FNDOFF          POINT TO LAST FOUND STRING
         LA    R15,1(,R15)         POINT PAST LAST FOUND STRING
         B     FINDSTR
FINDTOP  NI    FINDSW,255-FTOP     RESET 'FIRST' REQUEST FLAG         *
         LA    R0,1                                                   *
         L     R7,HOLDTOP          GET ENTRY FOR TOP OF HOLD AREA     *
         OI    FINDSW,FVRT         FLAG VERTICAL SCROLLING            *
         C     R0,DIRNUM(,R7)      TOP OF DATA ON SCREEN?             *
         BNE   TOP                 NO, GO TO TOP OF DATA              *
         NI    FINDSW,255-FVRT     YES, NO VERTICAL SCROLLING YET     *
         SLR   R0,R0                                                  *
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER            *
         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET            *
         B     FINDCONT            CONTINUE WITH FIND                 *
FINDLAST SLR   R0,R0                                                  *
         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET            *
         MVC   FNDNUM,BOTNINES     SET LAST-FOUND NUMBER LARGE        *
         L     R7,HOLDEND          GET SCREEN RECORD ENTRY            *
         OI    FINDSW,FVRT         FLAG VERTICAL SCROLLING            *
         TM    DIRLEN(R7),X'80'    IS EOF ON THE SCREEN?              *
         BZ    BOTTOM              NO, GO TO BOTTOM OF DATA           *
         NI    FINDSW,255-FVRT     YES, NO VERTICAL SCROLLING YET     *
         LH    R6,FINDCOL          LOAD ANY COLUMN SPECIFICATION      *
FINDBACK TM    FINDSW,FEND+FVRT    JUST BACK FROM BOTTOM BRANCH?      *
         BO    FINDBAK1            YES, SCROLL UP A RECORD FOR SEARCH *
         TM    FINDSW,FVRT         BEEN HERE BEFORE?                  *
         BO    FBKNUMOK            YES, SEARCH THIS RECORD            *
         NI    FINDSW,255-FEND     RESET 'LAST' REQUEST FLAG IF ON    *
         L     R7,HOLDEND          GET BOTTOM SCREEN RECORD DETAILS   *
         TM    DIRLEN(R7),X'80'    IS THIS EOF?                       *
         BZ    FNDBKCHK            NO                                 *
         CLC   FNDNUM,DIRNUM(R7)   SEARCH BACKWARD FROM PAST EOF?     *
         BL    FNDBKCHK            NO, PERFORM NORMAL PROCESSING      *
         MVC   FNDNUM,DIRNUM(R7)   YES, MAKE IT FROM LAST DATA RECORD *
         STCM  R6,B'1100',FNDOFF   RESET LAST-FOUND OFFSET            *
FNDBKCHK LTR   R6,R6               WAS A COLUMN SPECIFIED?            *
         BZ    FNDBKOFF            NO                                 *
         CH    R6,FNDOFF           YES, CURSOR AFTER COL ON THIS LINE?*
         BH    FBKNUMLS            NO, CONSIDER THIS LINE SEARCHED    *
         B     FBKNUMOK            YES, START FROM THIS LINE          *
FNDBKOFF ICM   R0,3,FNDOFF         IS LAST-FOUND OFFSET ZERO?         *
         BNZ   FBKNUMOK            NO, SEARCH RECORD NUMBER FNDNUM    *
FBKNUMLS L     R0,FNDNUM           YES, RECORD NUMBER                 *
         BCTR  R0,0                DECREMENT IT                       *
         LTR   R0,R0               IS NEW NUMBER ZERO?                *
         BNP   FINDROOF            YES, REACHED TOP OF DATA           *
         ST    R0,FNDNUM           NO, SAVE IT                        *
         MVC   FNDOFF,RECSIZE      MAKE FNDOFF HIGH                   *
FBKNUMOK L     R7,HOLDTOP          GET FIRST SCREEN RECORD'S DETAILS  *
         TM    FINDSW,FVRT         SCROLLED UP A BIT FOR THIS RECORD? *
         BZ    FBKNUMLP            NO, ASCERTAIN NEXT SEARCH RECORD   *
         MVC   FNDNUM,LINKAREA+8   YES, LOAD NEXT SEARCH RECORD       *
FBKNUMLP CLC   FNDNUM,DIRNUM(R7)   IS THIS THE RECORD TO SEARCH FROM? *
         BL    FINDBAK1            NO, MUST SCROLL UP                 *
         BE    FBAKSRCH            YES                                *
         L     R1,DIRNXT(,R7)      NO, POINT TO NEXT RECORD           *
         TM    DIRLEN(R1),X'80'    IS NEXT RECORD EOF?                *
         BO    FBAKSRCH            YES, SHOULDN'T HAPPEN              *
         LR    R7,R1               NO, NOW CONSIDER NEXT RECORD       *
         C     R7,HOLDEND          BOTTOM OF SCREEN?                  *
         BE    FBAKSRCH            YES, FORCE THE SEARCH TO START HERE*
         B     FBKNUMLP            NO, TRY NEXT RECORD FOR FIND START *
FBAKSRCH LH    R14,STRINGL         GET SEARCH STRING LENGTH CODE      *
*        LH    R6,FINDCOL          LOAD ANY COLUMN SPECIFICATION      *
         LTR   R6,R6               WAS A COLUMN SPECIFIED?            *
         BNZ   FINDBCOL            YES, CHECK OUT THIS RECORD         *
         LH    R0,FNDOFF           NO, GET LAST-FOUND OFFSET          *
         L     R15,DIRLEN(,R7)     GET THIS RECORD'S LENGTH           *
         SH    R15,STRINGL         GET BIGGEST COLUMN TO SEARCH FIRST *
         BNP   FINDBAK1            THIS RECORD IS TOO SHORT FOR A TEST*
         BCTR  R15,0               GET BIGGEST OFFSET TO SEARCH FIRST *
         CLC   FNDNUM,DIRNUM(R7)   LAST FOUND IN THIS RECORD?         *
         BNE   FBKOFFOK            NO                                 *
         CR    R15,R0              YES, GOING OVER OLD GROUND?        *
         BL    FBKOFFOK            NO                                 *
         LR    R15,R0              YES, GET LAST-FOUND OFFSET         *
         BCTR  R15,0               GET NEW STARTING OFFSET            *
FBKOFFOK A     R15,DIRREC(,R7)     POINT TO FIRST SEARCH ADDRESS      *
FBAKLOOP C     R15,DIRREC(,R7)     GONE BEYOND START OF RECORD?       *
         BL    FINDBAK1            YES, GO GET PREVIOUS RECORD        *
         BALR  R5,0                RETURN ADDR IF WRONG SMF SUBTYPE   *
         EX    R14,FINDCLC         LOOK FOR STRING                    *
         BE    FOUND               GUESS WHAT                         *
         BCT   R15,FBAKLOOP        DECREMENT POINTER AND RECOMPARE    *
FINDBCOL LR    R15,R6              GET COLUMN TO BE EXAMINED          *
         BCTR  R15,0               GET OFFSET TO BE EXAMINED          *
         A     R15,DIRREC(,R7)     POINT TO COMPARE ADDRESS           *
         BALR  R5,0                RETURN ADDR IF WRONG SMF SUBTYPE   *
         EX    R14,FINDCLC         LOOK FOR STRING AT THE COLUMN      *
         BE    FOUND               GUESS WHAT                         *
FINDBAK1 TM    STATUS4,FLAGI       ATTENTION INTERRUPT?               *
         BO    FNDSCRLX            YES                                *
         NI    FINDSW,255-FEND     RESET 'LAST' REQUEST FLAG IF ON    *
         L     R0,DIRNUM(,R7)      YES, GET THIS RECORD'S NUMBER      *
         LR    R1,R7               REMEMBER CURRENT RECORD DETAILS    *
         L     R7,HOLDTOP          POINT TO TOP SCREEN LINE DETAILS   *
         CR    R7,R1               LOOKING AT THE TOP SCREEN RECORD?  *
         BNE   FNDPRVLP            NO, PREVIOUS RECORD IS ON SCREEN   *
         L     R0,DIRNUM(,R7)      YES, GET THIS RECORD'S NUMBER      *
         OI    FINDSW,FVRT         FLAG VERTICAL SCROLLING            *
         MVC   FNDOFF,RECSIZE      ALLOW SEARCH OF ALL OF PREVIOUS REC*
         BCT   R0,FINDBKPG         VERIFY THAT PREVIOUS RECORDS EXIST *
         B     FINDROOF            HIT THE ROOF SO CAN'T GO UP MORE   *
FINDBKPG ST    R0,LINKAREA+8       SAVE NEXT RECORD NUMBER TO SEARCH  *
         A     R0,FW1              RESTORE LAST SEARCHED RECORD NUMBER*
         SH    R0,PAGESIZE         SCROLL UP A WHOLE PAGE FOR LESS I/O*
         BP    LISTAT              GO GET MORE PREVIOUS RECORDS       *
         LA    R0,1                LESS THAN A PAGE LEFT SO GO TO TOP *
         B     LISTAT                                                 *
FNDPRVLP C     R1,DIRNXT(,R7)      POINTING TO PREVIOUS RECORD?       *
         BE    FBAKSRCH            YES, EXAMINE IT                    *
         L     R7,DIRNXT(,R7)      NO, GO DOWN ONE                    *
         B     FNDPRVLP            GO SEE ABOUT THIS ONE              *
FINDCLC  CLC   0(0,R15),STRING     <<< EXECUTED >>>
FINDMVC  MVC   STRING(0),0(R14)    <<< EXECUTED >>>
FINDXTRT TRT   0(0,R14),HEXTEST    <<< EXECUTED >>>                   *
FINDXTR  TR    0(0,R14),HEXDATA    <<< EXECUTED >>>                   *
FINDSCR  TM    DIRLEN(R7),X'80'    ARE WE AT EOF?
         BO    FINDBOT             YES, BRANCH
         L     R15,DIRREC(,R7)     POINT TO FIRST BYTE TO EXAMINE
*        LH    R6,FINDCOL          LOAD ANY COLUMN SPECIFICATION      *
         LTR   R6,R6               WAS A COLUMN SPECIFIED?
         BZ    FINDSTR             NO, BRANCH
         AR    R15,R6              YES, POINT TO COLUMN PLUS 1
         BCTR  R15,0               POINT TO COLUMN
         TM    FINDSW,FSMF         WAS IT A 'FINDSMF' COMMAND?        *
         BZ    FNDSMFOK            NO                                 *
         CLC   0(9,R15),=C'MFEOFMARK'  SMFEOFMARK?                    *
         BE    FSMFEOF             YES, TERMINATE FINDSMF SEARCH      *
FNDSMFOK LH    R14,STRINGL
         BALR  R5,0                RETURN ADDR IF WRONG SMF SUBTYPE   *
         EX    R14,FINDCLC
         BE    FOUND
         TM    STATUS4,FLAGI       ATTENTION INTERRUPT?         GP@SECV
         BO    FNDSCRLX            YES                          GP@SECV
         B     FINDNEXT            NO
FSMFEOF  DS    0H                                                     *
         MVC   MSG(MSG30L),MSG30                                      *
         B     BELFILSC                                               *
FINDSTR  L     R0,DIRLEN(,R7)      GET LENGTH OF RECORD
*        C     R0,SAVLRECL         IS RECORD TRUNCATED?
*        BNH   *+8                 NO, SKIP NEXT INSTR
*        L     R0,SAVLRECL         YES, USE TRUNCATED LENGTH
         L     R1,DIRREC(,R7)      GET ADDRESS OF RECORD
         AR    R0,R1               POINT PAST LAST BYTE OF RECORD
         LH    R14,STRINGL         GET LENGTH CODE OF STRING
         AR    R15,R14             POINT TO LAST BYTE TO BE COMPARED
         SR    R0,R15              GET NUMBER OF COMPARISONS
         BNP   FINDNEXT            STRING TOO LONG FOR REMAINING TEXT
         SR    R15,R14             PUT STRING ADDRESS BACK
FINDCOMP BALR  R5,0                RETURN ADDR IF WRONG SMF SUBTYPE   *
         EX    R14,FINDCLC         COMPARE STRING TO DATA
         BE    FOUND
         TM    STATUS4,FLAGI       ATTENTION INTERRUPT?         GP@SECV
         BO    FNDSCRLX            YES                          GP@SECV
         LA    R15,1(,R15)         INCREMENT DATA POINTER
         BCT   R0,FINDCOMP         GO COMPARE AGAIN
FINDNEXT C     R7,HOLDEND          WAS THAT LAST HELD RECORD?
         BE    FINDDOWN            YES, BRANCH
         L     R7,DIRNXT(,R7)      POINT TO NEXT RECORD
         B     FINDSCR             GO PROCESS NEXT RECORD
FINDBOT  DS    0H
         MVC   MSG(MSG32L),MSG32   BOTTOM OF DATA REACHED
         B     BELFILSC
FINDROOF DS    0H                                                     *
         MVC   MSG(MSG44L),MSG44   TOP OF DATA REACHED                *
         B     BELFILSC                                               *
FINDDOWN DS    0H
         L     R7,HOLDEND                                             *
         TM    DIRLEN(R7),X'80'    ARE WE AT EOF?                     *
         BO    FINDBOT             YES, BRANCH                        *
         MVC   DOWNAMT,FW1         DOWN 1
         BAL   R14,DOWNER
         L     R7,HOLDEND
         OI    FINDSW,FVRT         FLAG VERTICAL SCROLLING
         B     FINDSCR
FINDNULL MVC   MSG(MSG33L),MSG33   STRING NOT SPECIFIED
         B     BELPRMPT
ERRINV   MVC   MSG(MSG34L),MSG34   INVALID OPERAND
         B     BELPRMPT
FOUND    TM    FINDSW,FSMF         IS THIS A FINDSMF COMMAND?         *
         BZ    FOUNDOK             NO, DON'T CHECK SMF SUBTYPE        *
         CLI   SMFSBTYP,X'FF'      YES, LOOKING FOR A SUBTYPE?        *
         BE    FOUNDOK             NO, DON'T CHECK SMF SUBTYPE        *
         BCTR  R15,0               YES, POINT TO SMF FLAG BYTE        *
         TM    0(R15),X'C2'        SUBSYSID+SUBTYPES+OS/VS2?          *
         LA    R15,1(,R15)         POINT BACK TO SMF RECORD TYPE      *
         BNO   8(,R5)              NO, CONTINUE SEARCH                *
         CLC   SMFSBTYP,17(R15)    YES, CORRECT SUBTYPE?              *
         BNE   8(,R5)              NO, CONTINUE SEARCH                *
FOUNDOK  MVC   MSG(MSG31L),MSG31   FOUND IN LINE XXXXXXX COL XXXXX
         MVC   FNDNUM,DIRNUM(R7)   SAVE RECORD NUMBER
         S     R15,DIRREC(,R7)     GET OFFSET TO FOUND LOCATION
         STH   R15,FNDOFF          SAVE OFFSET
         LA    R15,1(,R15)         MAKE IT COLUMN NUMBER
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         LA    R15,MSG+28          ROOM FOR 7 DIGIT LINE NUMBER  GP@P6
         UNPK  0(5,R15),DOUBLE+5(3)
         L     R15,FNDNUM
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         LA    R15,MSG+16
         UNPK  0(7,R15),DOUBLE+4(4)  7 DIGIT LINE NUMBER         GP@P6*
         NI    FINDSW,255-FACT     FIND IS NO LONGER ACTIVE           *
         TM    FINDSW,FSMF         WAS IT A 'FINDSMF' COMMAND?        *
         BO    FNDSCRLX            YES, DON'T SCROLL LEFT             *
         LA    R15,80              GET USUAL SCREEN WIDTH             *
         TM    MODE,MODEX          IN HEX MODE?                       *
         BZ    *+8                 NO, WIDTH IS 80                    *
         LA    R15,40              YES, EFFECTIVE WIDTH IS 40         *
         STH   R15,DOUBLE          SAVE IT TEMPORARILY                *
         CLC   FNDOFF,OFFSET       WAS IT FOUND BEFORE 1ST COL?       *
         BE    FNDSCRLX            NO, AT FIRST COLUMN ALREADY        *
         BL    FNDSCRL             YES, HAVE TO SCROLL LEFT           *
         AH    R14,FNDOFF          FIND END OF FOUND STRING           *
         LH    R15,OFFSET          GET CURRENT OFFSET                 *
         AH    R15,DOUBLE          GET END OF SCREEN OFFSET           *
         CR    R14,R15             WAS IT FOUND AFTER LAST COL?       *
         BL    FNDSCRLX            NO, SO COMPLETELY VIEWABLE         *
FNDSCRL  ICM   R14,B'0011',FNDOFF  BASIS FOR NEW OFFSET               *
         BZ    *+6                 ZERO SO HAVE NEW TARGET            *
         BCTR  R14,0               LEFT ONE COL FOR GOOD LUCK         *
         STH   R14,OFFSET          PRELIMINARY NEW OFFSET             *
         AH    R14,DOUBLE          ADD SCREEN WIDTH                   *
         CH    R14,RECSIZE         LONGER THAN RECSIZE?               *
         BNH   FNDSCRLX            NO, SCROLLING CALC ALL DONE        *
         LH    R14,RECSIZE         GET MAX RECORD SIZE                *
         SH    R14,DOUBLE          SUBTRACT SCREEN WIDTH              *
         BNM   *+6                 NON-NEGATIVE IS OKAY               *
         SLR   R14,R14             MAKE NEGATIVE OFFSET ZERO          *
         STH   R14,OFFSET          THAT'S IT                          *
FNDSCRLX DS    0H                  END OF LEFT/RIGHT FOR FIND    GP@P6*
         NI    STATUS4,255-FLAGI   CLEAR ATTENTION FLAG         GP@SECV
         TM    FINDSW,FVRT         ANY VERTICAL SCROLLING?
         BZ    FILLSCR             NO
         TM    FINDSW,FBAK         SEARCHING BACKWARDS?               *
         BZ    FINDLN0             NO                                 *
         L     R0,FNDNUM           YES, GET RECORD NUMBER OF TEXT     *
         BCT   R0,LISTAT           MAKE IT THE SECOND LINE            *
         B     FILLSCR             DON'T SCROLL UP FOR FIRST RECORD   *
FINDLN0  LH    R6,PAGESIZE
         C     R6,FNDNUM           SCROLL DOWN PAST FOUND TEXT?       *
         BNH   FINDLN1             NO  (IF YES THEN 'FIRST' WAS USED) *
         L     R6,FNDNUM           YES, LOAD FOUND TEXT RECORD NUMBER *
FINDLN1  SH    R6,HW2
         BNP   FILLSCR             LEAVE AT TOP FOR RECORDS 1 AND 2   *
FINDLN2  LA    R1,1
         ST    R1,DOWNAMT
         BAL   R14,DOWNER
         BCT   R6,FINDLN2
         B     FILLSCR
         SPACE
************************************************************
*                                                          *
*         MEMBER                                           *
*                                                          *
************************************************************
         SPACE
MEMBERP  DS    0H
         TM    DSORG,X'02'         IS DSORG PO?
         BZ    MEMPDS              NO, BRANCH
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    ERRMISS             NO, MISSING OPERAND
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    ERRMISS             YES, ERROR
         CH    R1,HW8              IS LENGTH MORE THAN 8?
         BH    ERRINV              YES, ERROR
         MVC   BLDL+4(8),BLANKS
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0
         EX    R1,MEMMVC
TOPOFMEM BLDL  (R4),BLDL
         LTR   R15,R15
         BNZ   MEMERR
         NI    STATUS,255-STNOMEM
         MVC   $MEMBER,BLDL+4
         L     R1,CHKPTTOP
         MVC   4(4,R1),BLDL+12     COPY TTR
         MVC   TTR,BLDL+12         TTR OF FIRST BLOCK
         FIND  (R4),TTR,C
         MVC   DSNAIM(46),$DSNAME
         SLR   R15,R15
         ICM   R15,1,TTR+3         GET CONCATENATION NUMBER
         STH   R15,$CONCAT         REMEMBER IT FOR MEMBER LIST   GP@P6
         BZ    NOCONCAT
         CLI   ARLRCODE,0          WERE ALL JFCBS READ?          GP@P6*
         BNE   USEDDNAM            NO                                 *
         ICM   R1,B'1111',ARLAREA  POINT TO FIRST RETRIEVED JFCB      *
         BZ    USEDDNAM            THERE ARE NONE (BACK LEVEL DFP)    *
NEXTJFCB BCT   R15,JFCBLOOP        CHAIN THROUGH JFCBS                *
         B     GOTJFCB             NOW POINTING TO CORRECT JFCB       *
JFCBLOOP AH    R1,0(,R1)           POINT TO NEXT JFCB                 *
         B     NEXTJFCB            PROCESS IT                         *
GOTJFCB  MVC   DSNAIM+2(44),4(R1)  COPY DATA SET NAME FROM JFCB       *
         LA    R0,44               GET MAXIMUM DATA SET NAME LENGTH   *
         LA    R1,DSNAIM+45        POINT TO LAST DATA SET NAME CHAR   *
CNCTLNLP CLI   0(R1),C' '          TRAILING BLANK?                    *
         BNE   GOTDSNLN            NO, NOW HAVE NEW $DSNAME LENGTH    *
         BCTR  R1,0                YES, POINT TO PREVIOUS CHARACTER   *
         BCT   R0,CNCTLNLP         DECREMENT LENGTH AND TEST PREVIOUS *
GOTDSNLN STH   R0,DSNAIM           SAVE DATA SET NAME LENGTH          *
         B     NOCONCAT            SKIP DDNAME HEADING CODE           *
USEDDNAM DS    0H                                                GP@P6*
         MVC   DSNAIM(10),$DDNAML  SHOW DDNAME INSTEAD OF DSNAME
         CVD   R15,DOUBLE          APPEND
         OI    DOUBLE+7,X'0F'       CONCAT     GP@SECV - FIX SO $DDNAME
         LH    R15,$DDNAML           NUMBER               NOT CORRUPTED
         SH    R15,HW4                TO DDNAME
         LA    R15,DSNAIM+2(R15)        SO IT
         UNPK  1(3,R15),DOUBLE+6(2)      BECOMES
         MVI   0(R15),C'+'                DDNAME+NNN
NOCONCAT DS    0H
         XC    DEBLOCKS(12),DEBLOCKS
         L     R14,SPANPTR
         SLR   R0,R0
         ST    R0,CHKPTBOT         ZERO CHKPT TABLE
         STH   R0,0(,R14)          RESET SPAN BUFFER LENGTH
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET
         ST    R0,COUNT            RESET LOGICAL RECORD COUNT
         ST    R0,KOUNT            RESET BYTE COUNT              GP@P6*
         ST    R0,MAXPOINT         RESET FURTHEST RECORD READ         *
         MVI   SYNADSW,X'00'       RESET SYNAD ERROR FLAG             *
         TM    STATUS5,OFFLDSW     HERE TO OFFLOAD?                   *
         BO    MEMRDWRT            YES, JUST READ AND WRITE RECORDS   *
         ICM   R15,B'1111',DIVREG1 DIV AVAILABLE?                     *
         BNP   NEWNAME             NO                                 *
         LA    R0,12               YES, GET ENTRY CODE (PAGE RELEASE) *
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT            *
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE     GP@P6*
         B     NEWNAME
MEMMVC   MVC   BLDL+4(0),0(R14)    <<< EXECUTED >>>
MEMERR   TM    STATUS5,OFFLDSW     HERE TO OFFLOAD?              GP@P6
         BO    EXITRC              YES, JUST RETURN              GP@P6
         CH    R15,HW4
         BNE   MEMERR2
         MVC   MSG(MSG36L),MSG36   MEMBER NOT FOUND
         B     MEMERRX                                           GP@P6
MEMERR2  MVC   MSG(MSG37L),MSG37   BLDL FAILED
MEMERRX  TM    STATUS,STNOMEM      LOOKING AT A MEMBER?          GP@P6
         BO    NOCONCAT            NO, DO A BIT OF RESETTING     GP@P6
         B     BELPRMPT
MEMPDS   MVC   MSG(MSG38L),MSG38   NOT PARTITIONED
         B     BELPRMPT
         SPACE
**********************************************************************
*                                                          *         *
*         DIR  -  SHOW DIRECTORY MEMBER LIST               * GP@SECV *
*                                                          *         *
**********************************************************************
         SPACE
DIRCMD   DS    0H
         TM    DSORG,X'02'         IS DSORG PO?
         BZ    MEMPDS              NO, BRANCH
         TM    STATUS,STPODIR      ALREADY IN MEMBER SELECT MODE?
         BO    END                 YES, DON'T DO OBTAIN TWICE
         LA    R1,OBTAINW          GET THE LATEST DSCB DETAILS
         OBTAIN (1)                    FROM THE VTOC
         OI    STATUS,STPODIR      TURN ON MEMBER SELECT MODE
         B     END                      AND RETURN TO MAINLINE
         SPACE
************************************************************
*                                                          *
*         SNAP                                             *
*                                                          *
************************************************************
         SPACE
SNAP     DS    0H
         SLR   R0,R0
         L     R7,540             GET POINTER TO CURRENT TCB
         L     R7,12(,R7)         POINT TO TIOT
         LA    R7,24(,R7)         POINT TO TIOELNGH
SNAPDDNM CLC   4(8,R7),SNAPD+DCBDDNAM-IHADCB
         BE    SNAPSNAP           FILE EXISTS SO GO AND USE IT
         IC    R0,0(,R7)          GET TIOT ENTRY LENGTH
         AR    R7,R0              POINT TO NEXT TIOT ENTRY
         CLI   0(R7),0            ZERO LENGTH ENTRY?
         BNE   SNAPDDNM           NO, CHECK OUT THIS ENTRY
         B     INVLDCMD           YES, NOT IN TIOT SO FORGET SNAP
SNAPSNAP LA    R7,SNAPR
         LA    R0,@DATA
         ST    R0,0(,R7)
         A     R0,=A(@DATAL)
         BCTR  R0,0
         ST    R0,4(,R7)
         L     R0,CHKPTTOP        (COULD USE "ANSWER" HERE TO INCLUDE
         ST    R0,8(,R7)                 THE HOLDING AREA IN THE SNAP)
         LA    R0,32
         A     R0,CHKPTBOT
         C     R0,ENDPTR
         BNH   *+8
         L     R0,ENDPTR
         BCTR  R0,0
         ST    R0,12(,R7)
         OI    12(R7),X'80'
         MVC   SNAPDW(SNAPDL),SNAPD
         LA    R6,SNAPDW
         OPEN  ((R6),OUTPUT),MF=(E,OPEND)
         TM    48(R6),X'10'
         BNO   PROMPT
         MVC   SNAPLW(SNAPLL),SNAPL
         SNAP  DCB=(R6),ID=7,PDATA=(REGS),LIST=(R7),MF=(E,SNAPLW)
         CLOSE ((R6)),MF=(E,CLOSED)
         B     PROMPT
         SPACE
************************************************************
*                                                          *
*         SUBROUTINE TO CONVERT DATA TO HEX                *
*                                                          *
************************************************************
         SPACE
HEX      MVC   1(1,R15),0(R1)      MOVE BYTE
         UNPK  0(3,R15),1(2,R15)   UNPACK
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R14                 RETURN TO CALLER
         SPACE
HEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE
         SPACE
**********************************************************************
*                                                          *         *
*         EXTRACT ICF COMPONENT DETAILS FROM VVDS          *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
VVDSSCAN BAL   R14,GET             GET A VVDS RECORD
         LTR   R2,R2               END-OF-FILE?
         BZ    END                 YES, DETAILS NOT FOUND - VVDS ERROR
         CLI   4(R2),C'Z'          NO, IS IT A PRIMARY VVR HEADER?
         BNE   VVDSSCAN            NO, GET THE NEXT RECORD
         LH    R1,$DSNAME          YES, GET LENGTH CODE FOR COMPARE
         EX    R1,VVDSCMPR         PRIMARY VVR FOR CORRECT COMPONENT?
         BNE   VVDSSCAN            NO, GET THE NEXT RECORD
         MVC   DSORGTYP,5(R2)      YES, COPY VVRFLAG
         NI    DSORGTYP,VVRCOMTP   JUST KEEP COMPONENT TYPE (D/I)
         LA    R1,2                COUNT VVR LENGTH FIELD
         AH    R1,2(,R2)           ADD LENGTH OF HEADER CELL
VVRLOOP  LA    R6,0(R1,R2)         POINT TO NEXT CELL
         CLI   2(R6),X'60'         AMDSB CELL?
         BE    GOTAMDSB            YES, GO EXTRACT USEFUL DATA
         CLI   2(R6),X'23'         VOLUME INFORMATION CELL?
         BE    GOTVICEL            YES, GO EXTRACT USEFUL DATA
VVRNEXT  SLR   R15,R15             NO
         ICM   R15,3,0(R6)         GET LENGTH OF THIS CELL
         AR    R1,R15              ACCUMULATE LENGTH
         CH    R1,0(,R2)           SCANNED ENTIRE VVR?
         BNL   END                 YES, COULDN'T FIND REQUESTED DATA
         B     VVRLOOP             NO, PROCESS NEXT VVR
VVDSCMPR CLC   CMDAREA+1(0),10(R2) <<< EXECUTED >>>
GOTAMDSB MVC   AMATR,3(R6)         COPY ATTRIBUTE FLAG BYTE
         MVC   AMKEY,8(R6)         COPY RECORD KEY OFFSET AND LENGTH
         MVC   AMCIV(8),22(R6)     COPY CISIZE AND MAXIMUM RECORD SIZE
         MVC   AMNLR,62(R6)        COPY THE LOGICAL RECORD COUNT
         MVC   AMASP,82(R6)        COPY THE FREE SPACE BYTE COUNT
         B     VVRNEXT             NOW HAVE REQUIRED DATA FROM CELL
GOTVICEL MVC   AMBLKSZ,19(R6)      COPY BLOCKSIZE
         MVC   AMCASZ,24(R6)       COPY TRACKS PER CA (ASSUME < 256)
         B     VVRNEXT             NOW HAVE REQUIRED DATA FROM CELL
         SPACE
**********************************************************************
*                                                          *         *
*         OFFLOAD MEMBER CONTENTS TO SYSUT2                *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
MEMRDWRT BAL   R14,GET             GET A RECORD FROM THE MEMBER
         LTR   R0,R2               END-OF-FILE?
         BZ    NODIV12             YES, THIS MEMBER NOW OFFLOADED
         TM    TSTRECFM,X'40'      VARIABLE LENGTH RECORDS?
         BZ    GTOFFREC            NO, MUST BE FIXED LENGTH
         LA    R2,4(,R2)           YES, POINT PAST RDW
GTOFFREC L     R1,CALLPARM         GET THE SYSUT2 DCB ADDRESS
         CLC   0(2,R2),=C'./'      IEBUPDTE CONTROL CARD?
         BNE   NOTUPDTE            NO
         MVC   0(2,R2),=C'><'      PROBABLY, BETTER CHANGE IT
NOTUPDTE TM    TSTRECFM,X'80'      FIXED LENGTH RECORDS?
         BZ    PTOFFREC            NO, MUST BE VARIABLE LENGTH SO OKAY
         LA    R15,80
         CH    R15,DCBLRECL        FIXED RECORD LENGTH LESS THAN 80?
         BNH   PTOFFREC            NO, PROCEED
         LH    R15,DCBLRECL        YES, LOAD IT
         BCTR  R15,0               DECREMENT FOR EXECUTE
         L     R14,CALLPARM+4      POINT TO EIGHTY BLANKS
         EX    R15,FIXSMALL        CREATE OUTPUT CARD IMAGE
         LR    R0,R14              POINT TO THE EIGHTY BYTE RECORD
PTOFFREC PUT   (1),(0)             PUT IT OUT TO SYSUT2
         B     MEMRDWRT            GO BACK FOR ANOTHER
FIXSMALL MVC   0(0,R14),0(R2)      <<< EXECUTED >>>
         SPACE
************************************************************
*                                                          *
*         SUBROUTINE TO GET A LOGICAL RECORD               *
*                                                          *
************************************************************
         SPACE
*
*               INPUT
*                R4        -  DCB ADDRESS
*                CHKPTTOP  -  TOP OF CHECKPOINT TABLE
*                CHKPTBOT  -  BOTTOM OF CHECKPOINT TABLE, ZERO 1ST TIME
*                COUNT     -  LAST LOGICAL RECORD NUMBER READ
*                BLOCKPTR  -  ADDRESS OF BUFFER
*                DEBLOCKS  -  DEBLOCKING INFO (ZEROS FIRST TIME)
*                SPANPTR   -  ADDRESS OF AREA TO COMBINE
*                             SPANNED RECORD SEGMENTS
*
*               OUTPUT
*                 R1 CONTAINS LENGTH OF RECORD (OR -1 IF END OF FILE)
*                 R2 CONTAINS ADDRESS OF RECORD (OR 0 IF END OF FILE)
*
GET      ST    R14,READR
         TM    STATUS5,VSAMSW      VSAM CI INTERPRETATION?       GP@P6
         BO    READVSAM            YES                           GP@P6
         TM    DCBRECFM,X'10'      BLOCKED?
         BZ    READI               NO, BRANCH
         TM    DCBRECFM,X'C0'      UNDEFINED?
         BO    READI               YES, BRANCH
         LM    R0,R2,DEBLOCKS      GET DEBLOCKING STATUS
         AR    R2,R1               POINT TO NEXT RECORD
         CR    R2,R0               END OF BLOCK (OR FIRST TIME)?
         BNL   READI               YES, BRANCH
         TM    TSTRECFM,X'40'      VARIABLE LENGTH?
         BO    READVB              YES, BRANCH
         ST    R2,DEBLOCKS+8       FIXED BLOCKED
         B     READX
READI    LA    R5,CHKPTDUM         JUST IN CASE OF OFFLOAD       GP@P6*
         TM    STATUS5,OFFLDSW     HERE TO OFFLOAD?                   *
         BO    READSPAN            YES, JUST READ IT             GP@P6*
         ICM   R5,B'1111',CHKPTBOT GET LAST CHECKPOINT
         BNZ   READNF              PROCESS IT
         L     R5,CHKPTTOP         FIRST READ SO NOTHING READ YET
         B     READNEW             READING A RECORD NOT READ BEFORE
READNF   L     R1,0(,R5)           GET NUMBER OF HIGHEST RECORD READ
         LTR   R1,R1               WAS IT EOF?
         BM    READOLD             YES, BRANCH
         C     R1,COUNT            HAVE WE READ THIS RECORD BEFORE?
         BL    READADD             NO, BRANCH   (BNH CAUSED DUP CHKPTS)
READOLD  LA    R5,CHKPTDUM         YES, DON'T CHANGE CHKPT TABLE
         ICM   R0,B'1111',DIVREG1  DIV AVAILABLE?                GP@P6*
         BNP   READ                NO                                 *
         LA    R0,8                YES, GET ENTRY CODE (RECORD FETCH) *
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT            *
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE          *
         LTR   R15,R15             SUCCESSFUL RETRIEVAL?              *
         BNZ   READ                NO, PROCEED AS IF NO DIV           *
         L     R14,READR           YES, RETURN                        *
         BR    R14                                               GP@P6*
READADD  LA    R5,CHKPTLN(,R5)     ADD AN ENTRY TO THE CHKPT TABLE
         C     R5,ENDPTR           IS TABLE FILLED UP?
         BL    READNEW             NO, SKIP NEXT INSTR
         BAL   R14,READHALF        YES, HALVE THE TABLE
READNEW  ST    R5,CHKPTBOT         SAVE NEW CURRENT CHECKPOINT POINTER
         MVC   0(4,R5),COUNT
         XC    4(4,R5),4(R5)
READ     TM    STATUS,STNOMEM      ARE WE IN MEMBER-NOT-FOUND STATUS?
         BO    DYNEOD              YES, JUST GO TO END OF FILE
         XC    DOUBLE,DOUBLE       RESET VSAM SPANNING STATUS    GP@P6
READSPAN L     R2,BLOCKPTR
         READ  DYNDECBW,SF,(R4),(R2),'S',MF=E
         TM    DSORG,X'02'         DSORG = PO?                   GP@P6*
         BO    CHECKRD             YES, CAN'T BE MULTI-VOL            *
         ICM   R1,B'1111',$UCBAD   POINT TO UNIT CONTROL BLOCK        *
         BZ    CHECKRD             THERE IS NONE                      *
         CLC   $VOLSER,28(R1)      HAS THE VOLUME CHANGED?            *
         BE    CHECKRD             NO, STILL THE FIRST VOLUME         *
         LH    R15,DSNAIM          YES, GET DSNAME LENGTH             *
         LA    R15,MSGDSN(R15)     POINT PAST NAME IN HEADER          *
         MVC   4(6,R15),28(R1)     SUPPLY LATEST VOLUME SERIAL        *
CHECKRD  DS    0H                  SEE HOW THE READ WENT              *
         NI    SYNADSW,X'F0'       ZERO SOME BITS FOR THIS CHECK GP@P6*
         CHECK DYNDECBW
         CLI   SYNADSW,X'FF'       WAS SYNAD EXIT TAKEN JUST NOW? GP@P6
         BE    DYNEOD              YES, BRANCH                    GP@P6
         LH    R1,DCBBLKSI
         A     R1,SAVKEYLE                                      GP@SECV
         L     R14,DYNDECBW+16
         SH    R1,14(,R14)         SUBTRACT RESIDUAL COUNT
         TM    TSTRECFM,X'40'      VARIABLE LENGTH RECORDS?
         BZ    OKREAD              NO, BRANCH
         CLC   0(2,R2),DCBBLKSI    YES, BDW LENGTH > BLKSIZE?    GP@P6*
         BH    BLKEOD              YES, BAD BLOCK SO FORCE EOF        *
         CLC   0(2,R2),HW8         BDW LENGTH < 8?                    *
         BL    BLKEOD              YES, BAD BLOCK SO FORCE EOF        *
         ICM   R0,3,2(R2)          IS 2ND HALF OF BDW NULL?           *
         BNZ   BLKEOD              NO, SEEMS LIKE A BAD BLOCK         *
         LA    R14,4               GET LENGTH OF BDW                  *
         SLR   R0,R0               CLEAR FOR INSERTS                  *
VARCHKLP LA    R15,0(R14,R2)       POINT TO NEXT RECORD OR SEGMENT    *
         CLI   0(R15),X'80'        NULL SEGMENT OR JUST SIGN BIT ON?  *
         BNL   BLKEOD              YES, NOT SUPPORTED OR JUST ERROR   *
         ICM   R0,3,0(R15)         GET THE RECORD/SEGMENT LENGTH      *
         CH    R0,HW4              IS IT LESS THAN 4?                 *
         BL    BLKEOD              YES, INVALID                       *
         CH    R0,DCBLRECL         IS IT LARGER THEN THE RECORD SIZE? *
         BH    BLKEOD              YES, INVALID                       *
         AR    R14,R0              ACCUMULATE LENGTHS                 *
         CH    R14,0(,R2)          CHECK FOR END OF BLOCK             *
         BH    BLKEOD              PAST IT SO BAD BLOCK               *
         BL    VARCHKLP            PROCESS NEXT RECORD/SEGMENT        *
OKREAD   LA    R0,0(R1,R2)         END OF BLOCK
         STM   R0,R2,DEBLOCKS      SAVE STATUS INFO
         ICM   R0,B'1111',$UCBAD   ANY UCB?                           *
         BZ    NOTED               NO, CAN'T DO A NOTE                *
         NOTE  (R4)
         ST    R1,TTR              SAVE CI ADDRESS FOR REREAD         *
         ICM   R0,B'1111',4(R5)    IS THIS 2ND READ PER GET?          *
         BNZ   NOTED               YES, DON'T SAVE IN CHKPT      GP@P6*
         ST    R1,4(,R5)           SAVE TTR IN TABLE
NOTED    DS    0H
         LM    R0,R1,DEBLOCKS      RESTORE BLOCK END AND LENGTH
         TM    STATUS5,VSAMSW      VSAM CI INTERPRETATION?       GP@P6
         BO    OKRDVSAM            YES                           GP@P6
         TM    DCBRECFM,X'50'      VARIABLE OR BLOCKED?
         BNZ   READB               YES, BRANCH
         TM    TSTRECFM,X'48'      VARIABLE UNBLOCKED SPANNED?
         BNO   READX               NO
         B     READVBS             YES, SAME AS BLOCKED
READB    TM    DCBRECFM,X'C0'      UNDEFINED
         BO    READX
         TM    DCBRECFM,X'40'      VARIABLE LENGTH
         BO    READVBI
         LH    R1,DCBLRECL         FIXED BLOCKED
         ST    R1,DEBLOCKS+4       SAVE STATUS INFO
         B     READX
READVBI  LA    R2,4(,R2)           POINT PAST BDW                    $V
READVB   TM    DCBRECFM,X'08'      SPANNED
         BO    READVBS
READVBR  LH    R1,0(,R2)
         STM   R1,R2,DEBLOCKS+4    SAVE STATUS INFO
         B     READX
READVBS  CLI   2(R2),0             SEGMENT?
         BE    READVBR             NO, BRANCH
*               THIRD BYTE IS X'01' FOR FIRST SEGMENT
*                             X'03' FOR MIDDLE SEGMENT
*                             X'02' FOR LAST SEGMENT
         CLI   2(R2),1             FIRST SEGMENT?
         BNE   READSEG2            NO
         L     R14,SPANPTR         ADDRESS TO MOVE TO
         LH    R15,0(,R2)          LENGTH TO MOVE
         LR    R1,R15              LENGTH TO MOVE
         LR    R0,R2               ADDRESS TO MOVE FROM
         MVCL  R14,R0              MOVE SEGMENT RDW AND DATA
         B     READSEGD            GO DEBLOCK NEXT SEGMENT
READSEG2 L     R14,SPANPTR         ADDRESS OF PRIOR SEGMENTS
         LH    R0,0(,R14)          LENGTH OF PRIOR SEGMENTS
         LH    R15,0(,R2)          LENGTH+4 OF NEW SEGMENT
         SH    R15,HW4             LENGTH OF NEW SEGMENT
         LR    R1,R15              LENGTH TO BE MOVED
         AR    R15,R0              COMBINE LENGTHS
         STH   R15,0(,R14)         STORE COMBINED LENGTHS
         LR    R15,R1              LENGTH TO BE MOVED
         AR    R14,R0              ADDRESS TO MOVE TO
         LA    R0,4(,R2)           ADDRESS TO MOVE FROM
         MVCL  R14,R0              MOVE SEGMENT DATA
         CLI   2(R2),2             LAST SEGMENT?
         BNE   READSEGD            NO, GO DEBLOCK NEXT SEGMENT
         LH    R1,0(,R2)           GET LENGTH OF THIS SEGMENT
         STM   R1,R2,DEBLOCKS+4    SAVE LENGTH AND ADDRESS
         L     R2,SPANPTR          POINT TO COMBINED RECORD
         LH    R1,0(,R2)           GET COMBINED LENGTH
         B     READX               EXIT
READSEGD DS    0H                  NOT NECESSARY TO CHECK RECFM X'10'
         LH    R1,0(,R2)           LENGTH
         AR    R2,R1               POINT TO NEXT SEGMENT
         C     R2,DEBLOCKS         END OF BLOCK?
         BNL   READOLD             YES, BRANCH                   GP@P6
         B     READVBS             GO PROCESS NEW SEGMENT
READX    TM    STATUS2,FASTREAD    "FASTPATH" ACTIVE?            GP@P6*
         BO    READXX              YES, SKIP BYTE COUNT               *
         CLC   MAXPOINT,COUNT      ALREADY COUNTED THIS RECORD?       *
         BH    READXX              YES                                *
         LA    R0,1                                                   *
         A     R0,MAXPOINT         REMEMBER NOT TO COUNT THIS RECORD  *
         ST    R0,MAXPOINT                         AGAIN              *
         LTR   R0,R1               NO, GET THIS RECORD'S LENGTH       *
         BM    READXX              DO NOT COUNT E-O-F MARKER          *
         A     R0,KOUNT            ACCUMULATE THE BYTE COUNT          *
         ST    R0,KOUNT                                               *
READXX   ICM   R0,B'1111',DIVREG1  DIV AVAILABLE?                     *
         BNP   NODIV4              NO                                 *
         LA    R0,4                YES, GET ENTRY CODE (RECORD STORE) *
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT            *
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE          *
         LTR   R15,R15             WAS THERE ROOM TO STORE IT?        *
         BZ    NODIV4              YES, SUCCESS                       *
         ICM   R14,B'1111',$UCBAD  NO, TALKING TO A PHYSICAL DEVICE?  *
         BZ    DYNEOF              NO, REGRETABLY MUST FORCE E-O-F    *
NODIV4   DS    0H                                                GP@P6*
         L     R14,READR
         BR    R14
         SPACE
**********************************************************************
*                                                          *         *
*         VSAM CONTROLINTERVAL PROCESSING                  *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
READVSAM OC    DEBLOCKS,DEBLOCKS   FIRST READ?
         BZ    READI               YES
         NI    DEBLOCKS,X'7F'      ENSURE RRDS EMPTY SLOT FLAG IS OFF
         LM    R0,R1,DEBLOCKS+4    GET DEBLOCKING STATUS
         L     R2,DEBLOCKS         GET CIDF POINTER
         L     R5,BLOCKPTR         POINT TO THE START OF THE CI
         AH    R5,0(R2)            POINT PAST END OF CI DATA
         AR    R1,R0               POINT TO NEXT RECORD
         CR    R1,R5               END OF CONTROLINTERVAL DATA?
         BNL   READI               YES, BRANCH
         ST    R1,DEBLOCKS+8       NO, SAVE NEXT RECORD POINTER
         L     R1,BLOCKPTR         POINT TO THE START OF THE CI
         SLR   R5,R5
NEXTRDF  SH    R2,HW3              POINT TO "NEXT" RDF
         LA    R0,1                ASSUME ONE RECORD DESCRIBED BY IT
         ICM   R5,3,1(R2)          GET ITS HALFWORD COUNTER
         CLI   0(R2),X'40'         ASSOCIATED WITH RDF TO THE LEFT?
         BNE   RDFLOOP             NO, THE TESTED BYTE SHOULD BE NULL
         SH    R2,HW3              POINT TO ASSOCIATED RDF
         ICM   R0,3,1(R2)          GET ITS HALFWORD COUNTER
RDFLOOP  AR    R1,R5               POINT TO NEXT RECORD
         C     R1,DEBLOCKS+8       PAST THE CURRENT RECORD?
         BH    RDFEXIT             YES, NOW HAVE RECORD'S LENGTH
         BCT   R0,RDFLOOP          NO, KEEP GOING
         B     NEXTRDF             GET MORE RDF'S TO KEEP GOING
RDFEXIT  ST    R5,DEBLOCKS+4       SAVE THE CURRENT RECORD'S LENGTH
MTSLTCHK TM    0(R2),X'04'         EMPTY RRDS SLOT?
         BZ    NOTEMPTY            NO, NOW HAVE VSAM LOGICAL RECORD
         OI    DEBLOCKS,X'80'      YES, FLAG IT AS SUCH
NOTEMPTY LM    R1,R2,DEBLOCKS+4    LOAD RECORD'S LENGTH AND ADDRESS
         B     READX
         SPACE
OKRDVSAM TM    DSORGTYP,VVRCOMTP   INDEX COMPONENT?
         BO    VSAMCIOK            YES, ASSUME ONE BLOCK PER CI
         TM    AMATR,VVRAMSDT      IMBEDDED SEQUENCE SET?
         BZ    NOTIMBED            NO
         SLR   R14,R14             YES, A DIVIDE COMING UP
         SLR   R15,R15
         ICM   R15,3,TTR           GET THE RELATIVE TRACK NUMBER
         SLR   R2,R2
         ICM   R2,1,AMCASZ         GET TRACKS PER CONTROLAREA
         BZ    NOTIMBED            AVOID S0C9 ABEND
         DR    R14,R2              GET RELATIVE TRACK WITHIN CA
         LTR   R14,R14             FIRST TRACK OF CONTROLAREA?
         BZ    VSJUMPSS            YES, SKIP OVER SEQUENCE SET
NOTIMBED C     R1,AMCIV            BLOCK SHORTER THAN CI?
         BE    VSAMCIOK            NO, PROCESS CONTROLINTERVAL
         BH    DYNEOD              NO, TOO LARGE SO SIGNAL E-O-D
         ST    R1,DEBLOCKS+4       YES, REMEMBER SIZE READ SO FAR
         LR    R2,R0               POINT PAST BLOCK JUST READ
         READ  DYNDECBW,SF,(R4),(R2),'S',MF=E
         NI    SYNADSW,X'F0'       ZERO SOME BITS FOR THIS CHECK
         CHECK DYNDECBW
         CLI   SYNADSW,X'FF'       WAS SYNAD EXIT TAKEN JUST NOW?
         BE    DYNEOD              YES, BRANCH
         LH    R1,DCBBLKSI
         L     R14,DYNDECBW+16
         SH    R1,14(,R14)         SUBTRACT RESIDUAL COUNT
         LA    R0,0(R1,R2)         END OF BLOCK
         A     R1,DEBLOCKS+4       ADD PREVIOUSLY READ DATA OF THIS CI
         STM   R0,R1,DEBLOCKS      UPDATE STATUS INFO
         B     NOTIMBED            RECHECK FOR END OF CONTROLINTERVAL
VSAMCIOK L     R2,DEBLOCKS         POINT PAST END OF CI
         SH    R2,HW4              POINT TO CI DEFINITION FIELD
         ST    R2,DEBLOCKS         SAVE CIDF ADDRESS
         ICM   R0,B'1111',0(R2)    NULL CIDF?
         BZ    SOFTEOD             YES, SOFTWARE END-OF-FILE
         SRA   R0,16               NO, EMPTY CONTROLINTERVAL?
         BNZ   VSAMRDF             NO, PROCESS THE DATA RECORD(S)
         ICM   R0,B'1111',AMNLR    YES, GOT RECORD COUNT FROM VVDS?
         BZ    VSAMRDF             NO, PROCESS THE RDF
         C     R0,COUNT            YES, READ EXACTLY ALL RECORDS?
         BH    VSAMSPAN            NO, THROW NULLS AWAY - GET MORE DATA
         BE    SOFTEOD             YES, ASSUME ONLY EMPTY CI'S LEFT
*        BL    VSAMRDF             NO, FILL SCREEN WITH EMPTY CI'S
VSAMRDF  SH    R2,HW3              POINT TO "FIRST" RDF
         MVC   DEBLOCKS+6(2),1(R2) LOAD LENGTH OF FIRST RECORD
         TM    0(R2),X'30'         VSAM SPANNED SEGMENT?
         BNZ   READVSEG            YES, HANDLE IT
         ICM   R1,B'1111',DOUBLE   NO, GET ACCUMULATED SEGMENT LENGTHS
         BZ    MTSLTCHK            ZERO SO SITUATION NORMAL
         SPACE
VSAMTRNC POINT (R4),TTR            POINT BACK TO CI JUST READ
         L     R2,SPANPTR          POINT TO TRUNCATED COMBINED RECORD
         L     R1,DOUBLE           GET LENGTH OF SOME OF LOGICAL REC
         B     READX               EXIT (RRDS CAN'T BE SPANNED)
         SPACE
VSJUMPSS SLR   R1,R1
         ICM   R1,3,TTR            LOAD THE RELATIVE TRACK NUMBER
         LA    R1,1(,R1)           INCREMENT IT
         STH   R1,TTR              SAVE IT
         MVI   TTR+2,1             START FROM FIRST RECORD OF NEXT TRK
         POINT (R4),TTR            SKIP ENTIRE SEQUENCE SET TRACK
VSAMSPAN LA    R5,CHKPTDUM         DON'T CHANGE CHKPT TABLE
         B     READSPAN            IGNORE THIS RECORD AND FETCH NEXT
         SPACE
*               FLAG BYTE HAS X'50' FOR FIRST SEGMENT
*                             X'70' FOR MIDDLE SEGMENT
*                             X'60' FOR LAST SEGMENT
READVSEG CLI   0(R2),X'50'         FIRST SEGMENT?
         BNE   RDVSSEG2            NO
         ICM   R1,B'1111',DOUBLE   YES, GET ACCUMULATED SEGMENT LENGTHS
         BNZ   VSAMTRNC            NON-ZERO SO MUST BE OUT OF ORDER
         L     R14,SPANPTR         ADDRESS TO MOVE TO
         LH    R15,DEBLOCKS+6      LENGTH TO MOVE
         LR    R1,R15              LENGTH TO MOVE
         ST    R1,DOUBLE           SAVE LENGTH SO FAR
         L     R0,DEBLOCKS+8       ADDRESS TO MOVE FROM
         MVCL  R14,R0              MOVE VSAM RECORD SEGMENT
         B     VSAMSPAN            GET NEXT CI FOR NEXT SEGMENT
RDVSSEG2 L     R14,SPANPTR         ADDRESS OF FIRST SEGMENT
         A     R14,DOUBLE          ADDRESS OF THIS SEGMENT
         LH    R15,DEBLOCKS+6      LENGTH TO MOVE
         LR    R1,R15              LENGTH TO MOVE
         A     R1,DOUBLE           ADD PREVIOUS LENGTH
         ST    R1,DOUBLE           SAVE LENGTH SO FAR
         LR    R1,R15              LENGTH TO MOVE
         L     R0,DEBLOCKS+8       ADDRESS TO MOVE FROM
         MVCL  R14,R0              MOVE SEGMENT DATA
         CLI   0(R2),X'60'         LAST SEGMENT?
         BNE   VSAMSPAN            NO, GET NEXT CI FOR NEXT SEGMENT
         L     R2,SPANPTR          YES, POINT TO COMBINED RECORD
         L     R1,DOUBLE           GET COMBINED LENGTH
         B     READX               EXIT
         SPACE
************************************************************
*                                                          *
*         REAL/INDICATED/SIMULATED END-OF-FILE HANDLING    *
*                                                          *
************************************************************
         SPACE
EOSUBSYS MVI   SYNADSW,X'FF'       SIMULATE I/O ERROR            GP@P6*
         MVC   SYNADMSG,SSEOFMSG   LOAD INFORMATIVE MESSAGE           *
         B     DYNEOF                                                 *
SOFTEOD  OI    STATUS5,SOFTEOF     REMEMBER EOF WAS SOFTWARE          *
         L     R5,CHKPTBOT         GET LAST CHECKPOINT                *
         B     DYNEOF                                                 *
BLKEOD   MVI   SYNADSW,X'BD'       SIMULATE I/O ERROR                 *
         MVC   SYNADMSG,BDBLKMSG   LOAD BAD VARIABLE LENGTH DATA MSG  *
         CVD   R1,DOUBLE                                              *
         OI    DOUBLE+7,X'0F'      SHOW LENGTH IN BDW                 *
         UNPK  SYNADMSG+55(5),DOUBLE+5(3)                             *
         UNPK  SYNADMSG+39(9),0(5,R2)                                 *
         TR    SYNADMSG+39(8),HEXTAB-240                              *
         MVI   SYNADMSG+47,QUOTE   SHOW WHOLE BDW IN HEX              *
         ICM   R1,3,DCBBLKSI       LOAD BLOCK SIZE FROM DCB           *
         CVD   R1,DOUBLE                                              *
         OI    DOUBLE+7,X'0F'                                         *
         UNPK  SYNADMSG+70(5),DOUBLE+5(3)                             *
DYNEOD   DS    0H
         NOTE  (R4)                DETERMINE ADDRESS OF EOF           *
         ST    R1,TTR              SAVE A BRANCH                      *
         CLI   SYNADSW,X'BD'       BLOCK DESCRIPTOR WORD PROBLEM?     *
         BNE   DYNEOF              NO, LEAVE SYNADMSG AS IT IS        *
         UNPK  SYNADMSG+24(9),TTR(5)                                  *
         TR    SYNADMSG+24(8),HEXTAB-240                              *
         MVI   SYNADMSG+32,C' '    SHOW BAD BLOCK RELATIVE ADDRESS    *
         TM    STATUS2,MAGTAPE     REVIEWING A TAPE?                  *
         BO    DYNEOF              YES, NEED EIGHT DIGITS             *
         MVC   SYNADMSG+30(2),BLANKS                                  *
DYNEOF   MVC   EOFRELAD,TTR        REMEMBER EOF LOCATION         GP@P6*
         SLR   R1,R1
         BCTR  R1,0                FLAG EOF WITH -1
         ST    R1,0(,R5)           SAVE EOF IN CHKPT TABLE
         SLR   R2,R2
         TM    STATUS2,MAGTAPE     TAPE REPOSITIONING REQUIRED?  GP@P6
         BZ    READX               NO                            GP@P6
         OI    STATUS2,EOTAPE      FLAG END-OF-FILE ENCOUNTERED  GP@P6
         B     READX
         SPACE
************************************************************
*                                                          *
*         CHECKPOINT TABLE COMPRESSION ROUTINE             *
*                                                          *
************************************************************
         SPACE
READHALF LA    R0,CHKPTLN          LENGTH OF EACH ENTRY
         L     R15,CHKPTTOP        POINT TO FIRST ENTRY
         AR    R15,R0              POINT TO SECOND ENTRY
         LR    R1,R15
         AR    R1,R0               POINT TO THIRD ENTRY
READHMOV MVC   0(CHKPTLN,R15),0(R1) MOVE 3RD TO 2ND
*                                        5TH TO 3RD
*                                        7TH TO 4TH, ETC
         MVI   CHKPTLN-1(R1),X'FF' FLAG OLD ENTRY (DEBUG)        GP@P6
         AR    R15,R0              RECEIVING FIELD DOWN 1
         AR    R1,R0               SENDING FIELD DOWN 1
         AR    R1,R0               SENDING FIELD DOWN 2
         CR    R1,R5               ARE WE PAST THE LAST ENTRY?
         BL    READHMOV            NO, BRANCH
         LR    R5,R15              YES, NEW CURRENT POINTER
         BR    R14                 RETURN
         SPACE
**********************************************************************
*                                                          *         *
*         CANCEL  -  RESET PROFILE CHANGED FLAG AND END    *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
CANCEL   NI    STATUS,255-STPROF   TURN OFF PROFILE REWRITE FLAG
         B     END                 NOW PERFORM 'END' PROCESSING
         SPACE
**********************************************************************
*                                                          *         *
*         END OF PROGRAM  -  BYPASS DIRECTORY DISPLAY      * GP@SECV *
*                                                          *         *
**********************************************************************
         SPACE
EQUALSX  NI    STATUS,255-STPODIR  TURN OFF MEMBER SELECT MODE
         SPACE
************************************************************
*                                                          *
*         END OF PROGRAM                                   *
*                                                          *
************************************************************
         SPACE
END      ICM   R0,B'1111',DIVREG1  DIV AVAILABLE?                GP@P6*
         BNP   NODIV12             NO                                 *
         TM    STATUS,STPODIR      IN MEMBER SELECT MODE?             *
         BZ    NODIV12             NO, FREEMAIN WILL BE ISSUED SOON   *
         LA    R0,12               YES, GET ENTRY CODE (PAGE RELEASE) *
         L     R15,DIVADDR2        LOAD REVDIV ENTRY POINT            *
         BASSM R14,R15             EXECUTE IT IN 31-BIT MODE     GP@P6*
NODIV12  SLR   R15,R15
         B     EXITRC
         SPACE
EXIT12   LA    R15,12
         SPACE
EXITRC   CH    R15,RC
         BNH   *+8
         STH   R15,RC              SET HIGHEST RC
         TM    STATUS,STGMVU
         BZ    NOGMVU
         L     R0,ANSWER+4         LENGTH
         L     R1,ANSWER           ADDRESS
         FREEMAIN R,LV=(0),A=(1)
         NI    STATUS,255-STGMVU
NOGMVU   DS    0H
         TM    STATUS,STOPEN       IS IT OPEN?
         BZ    NOCLOSE             NO, BRANCH
         TM    DCBOFLGS,X'10'      IS IT OPEN?
         BZ    NOCLOSE             NO, BRANCH
         TM    STATUS,STPODIR      IN MEMBER SELECT MODE?        GP@P6
         BO    NOCLOSE             YES, KEEP THE DCB OPEN        GP@P6
         MVI   CLOSED,X'80'
         CLOSE ((R4)),MF=(E,CLOSED)
         NI    STATUS,255-STOPEN   CLOSED
*        DROP  R4                  IHADCB
NOCLOSE  DS    0H
         LM    R10,R12,BASE1
         L     R14,RET1
         BR    R14                 RETURN TO PHASE 1
         SPACE
************************************************************
*                                                          *
*         PUTMSG ROUTINE                                   *
*                                                          *
************************************************************
         SPACE
PUTMSG   STM   R14,R1,PUTLINS
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         EX    R14,PUTMSGMV        MOVE MESSAGE IN
         L     R15,MYPUTLEP
         SPACE
         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,MYIOPL)
         SPACE
         LM    R14,R1,PUTLINS
         BR    R14
PUTMSGMV MVC   0(0,R15),0(R1)      <<< EXECUTED >>>
         SPACE
************************************************************
*                                                          *
*         SYNAD EXIT                                       *
*                                                          *
************************************************************
         SPACE
*        THIS ROUTINE IS ENTERED DURING THE 'CHECK' MACRO
*        IF AN I/O ERROR OCCURS.
         SPACE
DYNSYNAD DS    0H
         SYNADAF ACSMETH=BSAM
         MVC   SYNADMSG(78),50(R1)
         MVI   SYNADSW,X'FF'
         SYNADRLS
         BR    R14
         SPACE
************************************************************
*                                                          *
*         CONSTANTS                                        *
*                                                          *
************************************************************
         SPACE
         LTORG
         SPACE
ON       DC    C'ON'
OFF      DC    C'OFF'
*BLUE    DCS   SA,COLOUR,BLUE      UNCOMMENT IF REQUIRED   (COLOUR # 1)
RED      DCS   SA,COLOUR,RED                               (COLOUR # 2)
*PINK    DCS   SA,COLOUR,PINK      UNCOMMENT IF REQUIRED   (COLOUR # 3)
*GREEN   DCS   SA,COLOUR,GREEN     UNCOMMENT IF REQUIRED   (COLOUR # 4)
TURQUOIS DCS   SA,COLOUR,TURQ                              (COLOUR # 5)
YELLOW   DCS   SA,COLOUR,YELLOW                            (COLOUR # 6)
*NEUTRAL DCS   SA,COLOUR,WHITE     UNCOMMENT IF REQUIRED   (COLOUR # 7)
*BLACK    \                                                (COLOUR # 8)
*DEEP BLUE \                                               (COLOUR # 9)
*ORANGE     \                                              (COLOUR # A)
*PURPLE      \                                             (COLOUR # B)
*PALE GREEN   \                                            (COLOUR # C)
*PALE TURQUOISE\                                           (COLOUR # D)
*GREY           \                                          (COLOUR # E)
*WHITE           \____THESE ONLY FOR 16-COLOUR TERMINALS   (COLOUR # F)
*BLINK   DCS   SA,HILITE,BLINK     UNCOMMENT IF REQUIRED
REVERSE  DCS   SA,HILITE,REVERSE
*USCORE  DCS   SA,HILITE,USCORE    UNCOMMENT IF REQUIRED
NORMAL   DCS   SA,HILITE,NORMAL
         SPACE
BOTNINES DC    F'99999999'
DIVADDR2 DC    AL1(X'80'),VL3(REVDIV)                            GP@P6
INIT2ADR DC    AL4(FAS2INIT)                                     GP@P6
         SPACE
* NOTIFY OPS OF TSO USER BROWSING CARTRIDGES (ROUTCDE=3,DESC=7)  GP@P6*
* (COULD ADD SUPPORT FOR CARTRIDGE HIGH SPEED SEARCH)                 *
DISP3480 MSGDISP MF=L,TXT='REVIEW'                                    *
DSP3480L EQU   *-DISP3480                                        GP@P6*
         SPACE
MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         +
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          +
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE
         PRINT NOGEN
         SPACE
SEQDCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(RP),                       +
               EODAD=DYNEOD,SYNAD=DYNSYNAD
SEQDCBL  EQU   *-SEQDCB
         SPACE
PDSDCB   DCB   DDNAME=DYNAM,DSORG=PO,MACRF=(R),                        +
               EODAD=DYNEOD,SYNAD=DYNSYNAD
PDSDCBL  EQU   *-PDSDCB
         SPACE
         PRINT GEN
         SPACE
DYNREAD  READ  DYNDECB,SF,0,0,'S',MF=L
DYNDECBL EQU   *-DYNDECB
         SPACE
GMVU     GETMAIN VU,MF=L
GMVUL    EQU   *-GMVU
         SPACE
REVSMFEP DC    V(REVSMF)
PFKDEFEP DC    V(PFKDEF)
FW32760  DC    F'32760'
FW1      DC    F'1'
HW1      EQU   FW1+2,2
HW2      DC    H'2'
HW3      DC    H'3'
HW4      DC    H'4'
HW5      DC    H'5'
HW6      DC    H'6'
HW7      DC    H'7'
HW8      DC    H'8'
HW10     DC    H'10'
HW12     DC    H'12'
HW14     DC    H'14'
HW18     DC    H'18'
HW40     DC    H'40'
HW54     DC    H'54'
HW80     DC    H'80'
HW100    DC    H'100'
HW320    DC    H'320'
HW1000   DC    H'1000'
HW4096   DC    H'4096'
HW10000  DC    H'10000'
         SPACE
MSG04    DC    C'UNABLE TO OPEN DATASET'
MSG08    DC    C'SPECIFIED MEMBER NOT FOUND IN DATASET'
MSG20    MSG   'INVALID COMMAND'
MSG21    MSG   'INVALID PF KEY'
MSG30    MSG   'END OF SMF RECORDS REACHED'
MSG31    MSG   'FOUND IN LINE XXXXXXX COL XXXXX'
MSG32    MSG   'BOTTOM OF DATA REACHED'
MSG33    MSG   'STRING NOT SPECIFIED'
MSG34    MSG   'INVALID OPERAND'
MSG35    MSG   'MISSING OPERAND'
MSG36    MSG   'MEMBER NOT FOUND'
MSG37    MSG   'BLDL FAILED'
MSG38    MSG   'NOT A PDS'
MSG39    MSG   'COMMAND NOT FOUND'
MSG40    MSG   'PFKNN HAS BEEN RESET'
MSG41    MSG   'INVALID PFK COMMAND'
MSG42    MSG   'COLOUR NOT SUPPORTED'
MSG43    MSG   'DEFAULT PFK VALUES SET'
MSG44    MSG   'TOP OF DATA REACHED'
SCREEN   DCS   X'C1',SA,COLOUR,WHITE,SBA,(1,1)
SFPROHI  DCS   SF,PROHI
SCRDSN   DC    54C'-'
         DC    C' LINE '
SCRLINE  DC    C'000000'
SCRHDIND DC    C' COL '
SCRCOL   DC    C'001 080 '
         DC    C' COMMAND ===>'
         DCS   SF,UNPHI,IC,RTA,(02,65),X'00'
         DCS   SF,PROHI,C'SCROLL ===>',SF,UNPHI
SCRRGE   DC    C'CS'               START WITH CURSOR SCROLLING
SFPROLO  DCS   SF,PROLO
SCREENL  EQU   *-SCREEN
SCRPAD   DCS   RTA,(1,1),C' '
         SPACE
FLD1BA   DCS   (2,15)
FLD2BA   DCS   (2,78)
         SPACE
MARKS    DC    18C'----+'
MARKSX   DC    10C'--------/\'
         SPACE
NOMEM    DC    C'*'
BLANKS   DC    CL40' '             EXTEND IF NECESSARY            GP@P6
         SPACE
SNAPL    SNAP  DCB=0,ID=7,PDATA=(REGS),LIST=0,MF=L
SNAPLL   EQU   *-SNAPL
*SNAPD   DCB   DDNAME=SNAPOUT,MACRF=(W),DSORG=PS,
*              RECFM=VBA,LRECL=125,BLKSIZE=882
SNAPD    DC    0F'0',20X'00',A(1),X'00004000',A(1,1),X'54',AL3(0)
         DC    CL8'SNAPOUT',X'02000020',A(1,1),AL2(0,882)
         DC    A(0,1,1,1),AL2(0,125),A(1)
SNAPDL   EQU   *-SNAPD
         SPACE
BDBLKMSG DC    CL78'** BAD DATA IN BLOCK AT ######## BDW=X''########''=+
               =>LEN=##### DCBBLKSI=12345 **'
SSEOFMSG DC    CL78'*************** REVIEW STORAGE AREA IN EXTENDED REG+
               ION IS FULL ***************'
         SPACE
**********************************************************************
*                                                          *         *
*         SUBCOMMAND LOOK-UP TABLE                         *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
*     SUBCOMMAND TABLE ENTRIES MUST BE SORTED INTO COLLATING SEQUENCE.
*     MAXIMUM SUBCOMMAND LENGTH IS 7 BYTES DUE TO TRAILING BLANK CHECK.
         SPACE
SUBCMDTB DS    0F  SUB-CMD     ROUTINE
         DC    CL8'<       ',A(LEFT)
         DC    CL8'+       ',A(DOWN)
         DC    CL8'-       ',A(UP)
         DC    CL8'>       ',A(RIGHT)
         DC    CL8'?       ',A(GIVEPFKS)
         DC    CL8'=X      ',A(EQUALSX)
         DC    CL8'ASCII   ',A(ASCII)
         DC    CL8'BOT     ',A(BOTTOM)
         DC    CL8'BOTTOM  ',A(BOTTOM)
         DC    CL8'CAN     ',A(CANCEL)
         DC    CL8'CANCEL  ',A(CANCEL)
         DC    CL8'COLOR   ',A(COLRMODE)
         DC    CL8'COLOUR  ',A(COLRMODE)
         DC    CL8'DEBUG   ',A(DEBUG)
         DC    CL8'DIR     ',A(DIRCMD)
         DC    CL8'DOWN    ',A(DOWN)
         DC    CL8'END     ',A(END)
         DC    CL8'EXIT    ',A(EQUALSX)
         DC    CL8'F       ',A(FIND)
         DC    CL8'FH      ',A(FINDHEX)
         DC    CL8'FIND    ',A(FIND)
         DC    CL8'FINDHEX ',A(FINDHEX)
         DC    CL8'FINDSMF ',A(FINDSMF)
         DC    CL8'FS      ',A(FINDSMF)
         DC    CL8'FULL    ',A(FULL)
         DC    CL8'FX      ',A(FINDHEX)
         DC    CL8'HEL     ',A(HEL)
         DC    CL8'HELP    ',A(HELP)
         DC    CL8'HEX     ',A(HEXMODE)
         DC    CL8'KEYS    ',A(GIVEPFKS)
         DC    CL8'L       ',A(LIST)
         DC    CL8'LEFT    ',A(LEFT)
         DC    CL8'LIST    ',A(LIST)
         DC    CL8'LOC     ',A(LIST)
         DC    CL8'LOCATE  ',A(LIST)
         DC    CL8'MEM     ',A(MEMBERP)
         DC    CL8'MEMBER  ',A(MEMBERP)
         DC    CL8'NEWTOP  ',A(NEWTOP)
PFK0SLOT DC    CL8'PFK0    ',A(PFKSET)
RCALSLOT DC    CL8'RECALL  ',A(RECALL)
         DC    CL8'RIGHT   ',A(RIGHT)
         DC    CL8'SMF     ',A(SMFMODE)
         DC    CL8'SNAP    ',A(SNAP)
         DC    CL8'SUB     ',A(SUBMIT)
         DC    CL8'SUBMIT  ',A(SUBMIT)
         DC    CL8'TOP     ',A(TOP)
         DC    CL8'TSO     ',A(TSO)
         DC    CL8'UP      ',A(UP)
         DC    F'-1'                         END OF SUBCOMMAND TABLE
SUBCMDL  EQU   12                            SUBCOMMAND ENTRY LENGTH
         SPACE 2
************************************************************
*                                                          *
*         TRANSLATE TABLES                                 *
*                                                          *
************************************************************
         SPACE
XLATABLS DS    0D
         SPACE
KEYBT    DC    28X'4B',X'1C4B1E',33X'4B',X'40',9X'4B'   DUP,FM,BLANK
         DC    X'4A4B4C4D4E4F'       CENT,PERIOD,LESS,LPAREN,PLUS,BAR
         DC    X'50',9X'4B'          AMPERSAND
         DC    X'5A5B5C5D5E5F'       EXCL,$,ASTERISK,RPAREN,SEMI,NOT
         DC    X'6061',8X'4B'        HYPHEN,SLASH       POINT
         DC    X'6A6B6C6D6E6F'       WHAT,COMMA,PERCENT,UNDLN,GT,QM
         DC    9X'4B',X'79'          70-78              BACK-QUOTE
         DC    X'7A7B7C7D7E7F'       COLON,POUND,AT,APOST,EQ,DBLQUOTE
         DC    X'4B'
         DC    X'818283848586878889',7X'4B'
         DC    X'919293949596979899',7X'4B'
         DC    X'A1A2A3A4A5A6A7A8A9',22X'4B'     TILDE          GP@SECV
         DC    X'C0',C'ABCDEFGHI',6X'4B'         LEFT BRACE     GP@SECV
         DC    X'D0',C'JKLMNOPQR',6X'4B'         RIGHT BRACE    GP@SECV
         DC    X'E04B',C'STUVWXYZ',6X'4B'        BACK SLASH     GP@SECV
         DC    C'0123456789',6X'4B'
*              FULL 3270 EBCDIC TRANSLATION                     GP@SECV
FULLT    DC    X'00010203044B064B4B4B4B4B0C0D4B4B'
         DC    X'104B4B4B141516174B194B4B1C4B1E4B'
         DC    X'4B4B4B4B4B4B26274B4B4B4B4B2D4B4B'
         DC    X'4B4B4B4B4B4B4B374B4B4B4B4B3D4B3F'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'808182838485868788898A8B8C8D8E8F'
         DC    X'909192939495969798999A9B9C9D9E9F'
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE4B'
         SPACE
FINDSBA  DC    17X'00',X'11',238X'00'
NUMERIC  DC    240X'FF',10X'00',6X'FF'
HEXTEST  DC    193X'FF',6X'00',41X'FF',10X'00',6X'FF'
HEXDATA  DC    193X'00',X'FAFBFCFDFEFF',41X'00',C'0123456789',6X'00'
         SPACE
KAPS     DC    AL1(X'40')          00 BECOMES 40
         DC    128AL1(*-KAPS)      01-80
         DC    9AL1(*-KAPS+X'40')  81-89 BECOME C1-C9
         DC    7AL1(*-KAPS)        8A-90
         DC    9AL1(*-KAPS+X'40')  91-99 BECOME D1-D9
         DC    8AL1(*-KAPS)        9A-A1
         DC    8AL1(*-KAPS+X'40')  A2-A9 BECOME E2-E9
         DC    86AL1(*-KAPS)       AA-FF
         SPACE
TABNONBL DC    64X'FF'
         DC    X'00'               BLANK
         DC    42X'FF'
         DC    X'FF'               COMMA
         DC    148X'FF'
TABBLANK DC    64X'00'
         DC    X'40'               BLANK
         DC    42X'00'
         DC    X'00'               COMMA
         DC    148X'00'
TABQUOTE DC    125X'00',X'7D',130X'00'
         SPACE
*        JUST AN EXCUSE TO USE APL DATA IN A SCREEN IMAGE        GP@P6
SNAZA    DCS   SA,COLOUR,BLUE,RTA,(5,77),C' '
         DCS   GE,X'C1',GE,C'1',GE,C'2',GE,X'D1'  REVIEW RELEASE NUMBER
         DCS   SA,COLOUR,RED,RTA,(6,6),C' ',GE,X'C5'
         DCS   RTA,(6,12),GE,X'A2',GE,X'D7'
         DCS   RTA,(6,76),GE,X'A2',GE,X'D5'
         DCS   RTA,(7,6),C' ',GE,X'85'
         DCS   SA,COLOUR,YELLOW,C' PFK ',SA,COLOUR,RED,GE,X'85'
         DCS   SA,COLOUR,YELLOW,RTA,(7,38),C' ',C'CURRENT VALUE'
         DCS   RTA,(7,76),C' ',SA,COLOUR,RED,GE,X'85'
         DCS   RTA,(8,6),C' ',GE,X'C6',RTA,(8,12),GE,X'A2',GE,X'D3'
         DCS   RTA,(8,76),GE,X'A2',GE,X'D6',RTA,(9,6),C' '
SNAZAL   EQU   *-SNAZA
SNAZB    DCS   GE,X'85',SA,COLOUR,TURQ
SNAZBPL  EQU   *-SNAZB+3           OFFSET TO PFK DIGITS
         DC    C'PFK00'
SNAZBB   DCS   SA,COLOUR,RED,GE,X'85'
SNAZBBL  EQU   *-SNAZBB
         DCS   SA,COLOUR,BLUE
SNAZBL   EQU   *-SNAZB
SNAZC    DCS   GE,X'C4',RTA,(21,12),GE,X'A2',GE,X'C7'
         DCS   RTA,(21,76),GE,X'A2',GE,X'D4',RTA,(1,1),C' '
SNAZCL   EQU   *-SNAZC
HELMPRF  DCS   SBA,(23,13),SA,COLOUR,WHITE
HELMSG   DC   C'USE ''HEL'' COMMAND OR PF-KEY FOR FULL-SCREEN TSO HELP'
SNAZCLX  EQU   *-SNAZC
SNAZDLX  EQU   *-HELMPRF
SNAZD    DCS   GE,X'C4',RTA,(33,12),GE,X'A2',GE,X'C7'
         DCS   RTA,(33,76),GE,X'A2',GE,X'D4',RTA,(1,1),C' '
SNAZDL   EQU   *-SNAZD
MOD4POSI DCS   (35,13)
         SPACE
************************************************************
*                                                          *
*         PHASE 2 INITIALIZATION SUBROUTINE                *
*                                                          *
************************************************************
FAS2INIT DS    0H
         USING FAS2INIT,R5
         SPACE
************************************************************
*                                                          *
*         SET UP THE DCB                                   *
*                                                          *
************************************************************
         SPACE
         LA    R4,DYNDCBW
*        USING IHADCB,R4
         MVC   DOUBLE(1),TSTRECFM  COPY RECFM FOR OPEN BPAM FILE  GP@P6
         TM    STATUS,STOPEN       FILE OPEN? (BEEN HERE BEFORE?) GP@P6
         BO    FSMODEOK            YES, EVERYTHING IS SET UP      GP@P6
         MVC   DYNDCBW(SEQDCBL),SEQDCB
         TM    DSORG,X'02'
         BZ    *+10
         MVC   DYNDCBW(PDSDCBL),PDSDCB
         MVC   DCBDDNAM(8),$DDNAME
         TM    MYDSCB-44+83,X'08'  VSAM DATA SET?                GP@P6*
         BZ    CVOLDIR             NO                                 *
         CLI   DSORGTYP,X'CF'      SCANNING VVDS?                     *
         BE    CVOLDIR             YES, USE 4K BLOCKSIZE FROM VTOC    *
         LH    R15,AMBLKSZ         YES, LOAD FETCHED BLOCKSIZE        *
         LTR   R15,R15             IS BLOCK SIZE LOOKING GOOD?        *
         BP    AMBLKSOK            YES, USE IT                        *
         L     R15,FW32760         NO, USE BIGGEST BLOCKSIZE ALLOWED  *
AMBLKSOK CH    R15,HW4096          BLOCKSIZE MORE THAN 4K?            *
         BNH   CVOLDIR             NO, STAY WITH 4K (FROM FMT1 DSCB)  *
         STH   R15,DCBBLKSI        HANDLE DFP VSAM BLOCKS EVEN        *
CVOLDIR  DS    0H                      IF LARGER THAN VTOC SAYS  GP@P6*
         CLI   DSORGTYP,X'FF'      CVOL? (OR PDS DIRECTORY?)    GP@SECV
         BNE   NODCBZAP            NO                           GP@SECV
         MVI   DSORG,X'40'         PRETEND TO BE SEQUENTIAL     GP@SECV
         MVI   DCBRECFM,X'81'      FIXED & KEYED                GP@SECV
         MVI   DCBKEYLE,8          KEYLENGTH = 8                GP@SECV
         MVI   AMKLN+1,8           KEYLENGTH = 8                 GP@P6
         LA    R15,256                                          GP@SECV
         STH   R15,DCBLRECL        LRECL = 256                  GP@SECV
         STH   R15,DCBBLKSI        BLKSIZE = 256                GP@SECV
NODCBZAP DS    0H                                               GP@SECV
         SPACE
*        LA    R15,DYNEOD
*        IC    R0,DCBEODAD-1
*        ST    R15,DCBEODAD-1
*        STC   R0,DCBEODAD-1
         SPACE
*        LA    R15,DYNSYNAD
*        IC    R0,DCBSYNAD-1
*        ST    R15,DCBSYNAD-1
*        STC   R0,DCBSYNAD-1
         SPACE
         LA    R15,DYNEXLST
         IC    R0,DCBEXLSA-1
         ST    R15,DCBEXLSA-1
         STC   R0,DCBEXLSA-1
         LA    R1,DYNDCBEX
         ST    R1,0(,R15)
         MVI   0(R15),X'05'        OPEN EXIT
         LA    R1,DYNABEND
         ST    R1,4(,R15)
         MVI   4(R15),128+X'11'    OPEN ABEND EXIT (MVS)
         SPACE
         MVI   SYNADSW,X'00'       NO SYNAD ERROR YET
         OI    STATUS,STOPEN       TELL CLEANUP TO CLOSE DCB
         MVI   OPEND,X'80'
         SPACE
         OPEN  ((R4),INPUT),MF=(E,OPEND)
         SPACE
         TM    DCBOFLGS,X'10'
         BO    OKOPEN
         LA    R1,MSG08
         LA    R0,L'MSG08
         TM    STATUS,STABEND      MEMBER NOT FOUND?
         BO    DYNOPENM            YES, BRANCH
         LA    R1,MSG04
         LA    R0,L'MSG04
DYNOPENM BAL   R14,PUTMSG
         B     EXIT12
         SPACE
DYNDCBEX DS    0H
*              TESTING THE RECFM FOR RECFM V OR F
*              REQUIRES AT LEAST 2 TESTS BECAUSE BOTH THE
*              V AND F BITS ARE ON WHEN RECFM IS U.
*              THIS ROUTINE MAKES A COPY OF THE RECFM BITS
*              AND ZEROES BOTH THE V AND F BITS IN THE COPY
*              IF THE RECFM IS U.  NOW WE CAN DETERMINE
*              RECFM V OR F IN ONE TEST INSTEAD OF TWO.
*              (DOUBLE ONLY USED TO FUDGE SPANNED BIT FOR VSAM.)
         TM    DCBRECFM,X'C0'      IS RECORD FORMAT F, V OR U?
         BNZ   *+8                 YES, I SHOULD HOPE SO
         OI    DCBRECFM,X'C0'      NO, MAKE IT U
         OC    DCBBLKSI,DCBBLKSI   IS THE BLKSIZE NON-ZERO?
         BNZ   *+10                YES, I SHOULD HOPE SO
         MVC   DCBBLKSI,FW32760+2  NO, MAKE IT 32760
         MVC   TSTRECFM,DCBRECFM   COPY RECFM
         MVC   DOUBLE(1),DCBRECFM  COPY RECFM AGAIN
         TM    DCBRECFM,X'C0'      RECFM U?
         BNOR  R14                 NO, BRANCH
         NI    TSTRECFM,255-X'C0'  YES, SET BOTH BITS OFF
         BR    R14
         SPACE
DYNABEND DS    0H
         TM    3(R1),B'00001110'   ANY PROCESSING ALLOWED?
         BZR   R14                 NO
         L     R8,0(,R1)           GET COMPLETION CODE
         N     R8,=A(X'FFF0FF00')
         CL    R8,=A(X'01301800')  IS IT AN 013-18 ABEND?
         BE    *+10                YES, BRANCH
         MVI   3(R1),0             ABNORMALLY TERMINATE
         BR    R14
         OI    STATUS,STABEND      INDICATE MEMBER NOT FOUND
         MVI   3(R1),4             IGNORE THE ABEND
         BR    R14
         SPACE
OKOPEN   DS    0H
         TM    STATUS2,CARTRIDG    REVIEWING A 3480?             GP@P6*
         BZ    OKOPENOK            NO                                 *
         MVC   HOLDDIR(DSP3480L),DISP3480     (TEMPORARY WORK AREA)   *
         MSGDISP RDY,DCB=(R4),MF=(E,HOLDDIR)  (1ST VOLUME ONLY)       *
OKOPENOK DS    0H                                                GP@P6*
         MVC   DYNDECBW(DYNDECBL),DYNDECB
         TM    STATUS2,FSMODE      ALREADY IN FS-MODE?           GP@P6
         BO    FSMODEOK            YES                          GP@SECV
         STFSMODE ON,INITIAL=YES,NOEDIT=YES     NO               GP@P6
         OI    STATUS2,FSMODE      ER, YES                       GP@P6
FSMODEOK DS    0H                                               GP@SECV
         SPACE
************************************************************
*                                                          *
*         SET UP THE BUFFER AREA                           *
*                                                          *
************************************************************
         SPACE
         SLR   R0,R0                                            GP@SECV
         ST    R15,KOUNT           ZERO JUST-OPENED FILE BYTE COUNT  *
         IC    R0,DCBKEYLE         KEY LENGTH                   GP@SECV
         MVC   COL1LBL,BLANKS      INITIALIZE COLUMN 1 LABEL    GP@P6*
         MVI   COL1LBL,C'1'                                          *
         TM    STATUS2,MAGTAPE     MAGNETIC TAPE FILE?               *
         BZ    GOTKEYLE            NO, HAVE NOW GOT THE KEY LENGTH   *
         SLR   R0,R0               YES, TAPE BLOCKS DON'T HAVE KEYS  *
         TM    DCBDEVT,X'80'       MAGNETIC TAPE FILE?               *
         BZ    GOTKEYLE            NO, HAVE NOW GOT THE KEY LENGTH   *
         MVC   COL1LBL+2(5),=C'NOCMP'                                *
         CLI   DCBTRTCH,X'04'      NO COMPACTION?                    *
         BE    GOTKEYLE            YES                               *
         MVC   COL1LBL+2(5),=C'CMPAC'                                *
         CLI   DCBTRTCH,X'08'      COMPACTION?                       *
         BE    GOTKEYLE            YES                               *
         MVC   COL1LBL+2(5),=C'DEN=0'                                *
         CLI   DCBDEN,X'03'        200 BPI?                          *
         BE    GOTKEYLE            YES, DENSITY=0                    *
         MVI   COL1LBL+6,C'1'                                        *
         CLI   DCBDEN,X'43'        556 BPI?                          *
         BE    GOTKEYLE            YES, DENSITY=1                    *
         MVI   COL1LBL+6,C'2'                                        *
         CLI   DCBDEN,X'83'        800 BPI?                          *
         BE    GOTKEYLE            YES, DENSITY=2                    *
         MVI   COL1LBL+6,C'3'                                        *
         CLI   DCBDEN,X'C3'        1600 BPI?                         *
         BE    GOTKEYLE            YES, DENSITY=3                    *
         MVI   COL1LBL+6,C'4'                                        *
         CLI   DCBDEN,X'D3'        6250 BPI?                         *
         BE    GOTKEYLE            YES, DENSITY=4                    *
         MVC   COL1LBL+2(5),=C'3480 '                                *
         CLI   DCBDEVT,X'80'       3480 MAGNETIC TAPE UNIT?          *
         BE    GOTKEYLE            YES                               *
         MVC   COL1LBL+2(4),=C'TAPE'                                 *
GOTKEYLE DS    0H                                               GP@P6*
         ST    R0,SAVKEYLE                                      GP@SECV
         LH    R0,DCBBLKSI
         A     R0,SAVKEYLE                                      GP@SECV
         AH    R0,HW7              ROUND
         N     R0,=A(X'FFFFFFF8')   UPWARDS TO MULTIPLE OF 8
         ST    R0,SAVBLKSI         SAVE FOR PARTITIONING
         SPACE
         SLR   R0,R0
         ST    R0,SAVSPANL         ZERO FOR UNSPANNED            GP@P6*
         TM    STATUS5,VSAMSW      VSAM CI INTERPRETATION?            *
         BZ    SAMDCB              NO, DO USUAL CALCULATIONS          *
         OI    DOUBLE,X'08'        YES, TURN ON SPANNED BIT           *
         ICM   R0,B'1111',AMCIV    EXTRACTED CISIZE?                  *
         BZ    USEVSBLK            NO                                 *
         ST    R0,SAVBLKSI         YES, USE IT AS BLOCK SIZE          *
         L     R0,AMLCL            GET MAXIMUM LRECL                  *
         TM    AMATR,VVRAMSPN      SPANNED VSAM?                      *
         BO    GOTLRECL            YES, SPANNED FLAG ALREADY ON       *
         NI    DOUBLE,255-X'08'    DEFINITELY NOT (VVDS SAID SO)      *
         B     GOTLRECL            USE IT                             *
USEVSBLK LH    R0,DCBBLKSI         VVDS IS NOT SPANNED                *
         CLI   DSORGTYP,X'CF'      SCANNING VVDS?                     *
         BE    GOTLRECL            YES, USE BLKSIZE AS MAXIMUM LRECL  *
         L     R0,FW32760          NO, CATER FOR SPANNED VSAM         *
         B     GOTLRECL            USE 32K-ISH AS LRECL          GP@P6*
         SPACE
SAMDCB   TM    DCBRECFM,X'C0'      RECFM U?                     GP@SECV
         BO    USEBLKSI            YES, LRECL NOT ALWAYS ZERO   GP@SECV
         LH    R0,DCBLRECL
         LTR   R0,R0
         BNZ   USELRECL
USEBLKSI LH    R0,DCBBLKSI
USELRECL A     R0,SAVKEYLE                                      GP@SECV
GOTLRECL STH   R0,RECSIZE
         AH    R0,HW7              ROUND
         N     R0,=A(X'FFFFFFF8')   UPWARDS TO MULTIPLE OF 8
*        CH    R0,HW1000           IS LRECL GREATER THAN MAX?
*        BNH   *+8                 NO, SKIP NEXT INSTR
*        LH    R0,HW1000           YES, HELD RECORDS MUST BE TRUNCATED
         ST    R0,SAVLRECL         SAVE FOR HOLD AREA DIVISION
         TM    DOUBLE,X'48'        VS OR VBS OR SPANNED VSAM?
         BNO   NOTSPAN             NO   (DOUBLE NOW FREE FOR WORK AREA)
         ST    R0,SAVSPANL         SAVE FOR PARTITIONING
NOTSPAN  MH    R0,PAGESIZE
         ST    R0,SAVHOLDL         SAVE FOR PARTITIONING
         SPACE
         A     R0,SAVSPANL         COMBINE LENGTHS FOR GETMAIN
         A     R0,SAVBLKSI         COMBINE LENGTHS FOR GETMAIN
         A     R0,=A(CHKPTLN*200)  PLUS ROOM FOR 200 CHECKPOINTS
         LA    R7,RANGE
         ST    R0,0(,R7)
         A     R0,=A(CHKPTLN*1848) OPTIONAL ROOM FOR 2048 CHECKPOINTS
         ST    R0,4(,R7)
         LA    R8,ANSWER
         MVC   GMVUW(GMVUL),GMVU
         GETMAIN VU,LA=(R7),A=(R8),MF=(E,GMVUW)
         OI    STATUS,STGMVU
         L     R1,ANSWER
         LR    R0,R1
         A     R0,ANSWER+4
         ST    R0,ENDPTR           END OF GETMAINED AREA
         ST    R1,BLOCKPTR
         A     R1,SAVBLKSI         POINT PAST BLOCK AREA
         ST    R1,SPANPTR
         A     R1,SAVSPANL         POINT PAST SPANNED RECORD AREA
         ST    R1,HOLDPTR
         A     R1,SAVHOLDL         POINT PAST HOLD AREA
         ST    R1,CHKPTTOP
         XC    0(256,R1),0(R1)     FIRST ENTRY IN TABLE
         XC    DEBLOCKS(12),DEBLOCKS
         SLR   R0,R0
         STH   R0,OFFSET
         ST    R0,COUNT            RESET LINE COUNT              GP@P6
         ST    R0,FNDNUM
         STH   R0,FNDOFF
         ST    R0,CHKPTBOT
         MVC   PERIODS,KEYBT       DEFAULT TO KEYBOARD CHARS    GP@SECV
         SPACE
************************************************************
*                                                          *
*         INITIALIZE HOLD AREA DIRECTORY                   *
*                                                          *
************************************************************
         SPACE
         LA    R7,HOLDDIR
         SLR   R0,R0
         L     R15,HOLDPTR
         LH    R8,PAGESIZE         LINES PER PAGE
         TM    TSTRECFM,X'40'      RECFM V?
         BZ    HOLDINIT            NO
         LA    R15,4(,R15)         YES, POINT 4 BYTES INTO EACH RECORD
         LH    R0,RECSIZE                                             *
         SH    R0,HW4              DISPLAY 4 BYTES LESS THAN LRECL    *
         STH   R0,RECSIZE                                             *
         SLR   R0,R0                                                  *
HOLDINIT ST    R0,DIRNUM(,R7)      PUT ZERO IN RECORD NUMBER
         ST    R0,DIRLEN(,R7)      PUT ZERO IN RECORD LENGTH
         ST    R0,DIRTTR(,R7)      PUT ZERO IN RECORD POSITION
         ST    R15,DIRREC(,R7)     STORE ADDRESS OF HELD RECORD
         A     R15,SAVLRECL        POINT TO NEXT HELD RECORD
         LA    R1,DIRSIZ(,R7)      POINT TO NEXT ENTRY
         ST    R1,DIRNXT(,R7)      STORE ITS ADDRESS IN THIS ENTRY
         LR    R14,R7              SAVE LAST ENTRY
         LR    R7,R1               MAKE NEXT ENTRY THIS ENTRY
         BCT   R8,HOLDINIT         DO IT FOR ALL BUT LAST ENTRY
         LA    R1,HOLDDIR          ADDRESS OF FIRST ENTRY
         ST    R1,DIRNXT(,R14)     CLOSE THE CIRCLE
         ST    R1,HOLDTOP          START WITH FIRST AS TOP
         CLI   DSORGTYP,X'CF'      SCANNING VVDS FOR DETAILS?    GP@P6
         BE    VVDSSCAN            YES, GO DO IT                 GP@P6
         SPACE
************************************************************
*                                                          *
*         PROCESS PRE-SPECIFIED MEMBER NAME                *
*                                                          *
************************************************************
         SPACE
         MVC   DSNAIM(46),$DSNAME
         TM    DSORG,X'02'         IS THIS A PDS?
         BZ    NEWNAME             NO, SKIP MEMBER PROCESS
         MVC   BLDL+4(8),$MEMBER
         OI    STATUS,STNOMEM      PREPARE FOR NO MEMBER OF THAT NAME
         MVC   $MEMBER,NOMEM
         B     TOPOFMEM
         DROP  R5                  FAS2INIT
         SPACE
         LTORG
         SPACE
************************************************************
*                                                          *
*         FINDSMF   (FIND SMF RECORD TYPE)                 *
*                                                          *
************************************************************
         SPACE
         USING FINDSMF,R5
FINDSMF  LR    R5,R15              TEMPORARY BASE REGISTER            *
         LA    R15,OPD3                                               *
         TM    6(R15),PRESENT      TOO MANY OPERANDS?                 *
         BO    ERRINV              YES                                *
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    FINDSAME            NO, USE PREVIOUS STRING
         MVI   FINDSW,FSMF         INDICATE FINDSMF              GP@P6
         XC    STRING,STRING       ERASE OLD STRING
         MVI   STRINGL,X'FF'       INVALIDATE SEARCH STRING      GP@P6
         SLR   R0,R0
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET
         STH   R0,FINDCOL          RESET COLUMN
         TM    6(R15),QUOTED       IS OPERAND QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    FINDNULL            YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0
         EX    R1,NUMRCTRT         IS IT NUMERIC?
         BNZ   ERRINV              NO, ERROR
         EX    R1,NUMRCPAK
         CVB   R1,DOUBLE
         CH    R1,=H'255'          IS IT GREATER THAN 255?
         BNH   FSTYPOK             NO, VALID SMF RECORD TYPE     GP@P6*
         LA    R15,10              YES                                *
         SLR   R0,R0               PREPARE FOR DIVIDE                 *
         DR    R0,R15              DIVIDE BY 10                       *
         CH    R1,=H'255'          IS TYPE STILL GREATER THAN 255?    *
         BH    ERRINV              YES, ERROR                         *
         STH   R0,SMFSBTYP         NO, SAVE SUBTYPE                   *
         B     FSSTYPOK                                               *
FSTYPOK  MVI   SMFSBTYP,X'FF'      INVALIDATE SMF RECORD SUBTYPE      *
FSSTYPOK DS    0H                  HAVE SMF RECORD TYPE/SUBTYPE  GP@P6*
         STC   R1,SMFTYPE          STORE FLAVOUR OF THE DAY     GP@SECV
         STC   R1,STRING           STORE BINARY VALUE 0 TO 255
         LA    R1,2                COLUMN 2
         TM    DCBRECFM,X'C0'      RECFM U? (VSAM SMF D/S?)      GP@P6
         BNO   *+8                 NO                            GP@P6
         LA    R1,6                COLUMN 6 (INCLUDING RDW)      GP@P6
         STH   R1,FINDCOL
         SLR   R1,R1               LENGTH MINUS 1 IS ZERO
         STH   R1,STRINGL          SAVE LENGTH CODE
         OI    FINDSW,FNUM         DISALLOW COLUMN SPECIFICATION      *
         B     FNDXLATD                                               *
         DROP  R5,R4               FINDSMF, IHADCB
         LTORG
         SPACE
**********************************************************************
*                                                          *         *
*         FINDHEX                                          *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
         USING FINDHEX,R5
FINDHEX  LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,OPD4
         TM    6(R15),PRESENT      TOO MANY OPERANDS?
         BO    ERRINV              YES
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    FINDSAME            NO, SAME AS A FIND COMMAND
         MVI   FINDSW,0            CLEAR FIND FLAGS
         SLR   R0,R0
         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER
         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET
         STH   R0,FINDCOL          RESET COLUMN
         LH    R1,4(,R15)          GET LENGTH
         L     R14,0(,R15)         GET ADDRESS OF DATA
         TM    6(R15),QUOTED       QUOTED?
         BO    FINDXDIF            YES, CAN'T BE 'FIND *'
         CH    R1,HW1              NO, FIRST OPERAND LENGTH OF ONE?
         BNE   FINDXDIF            NO, CAN'T BE 'FIND *'
         CLI   0(R14),C'*'         YES, IS IT AN ASTERISK?
         BE    FNDXLATD            YES, LEAVE THE STRING AS IS
FINDXDIF LTR   R1,R1               IS IT NULL STRING?
         BZ    FINDNULL            YES, ERROR
         TM    5(R15),X'01'        IS THE LENGTH AN ODD NUMBER?
         BO    ERRINV              YES, INVALID NUMBER OF HEX DIGITS
         BCTR  R1,0                GET LENGTH CODE
         EX    R1,FINDXTRT         IS STRING ALL VALID HEX CHARACTERS?
         BNZ   ERRINV              NO, INVALID
         EX    R1,FINDXTR          YES, CONVERT TO ZONED HEX
         XC    STRING,STRING       ERASE OLD STRING
         MVI   STRINGL,X'FF'       INVALIDATE SEARCH STRING
         LA    R1,1(,R1)           GET BACK LENGTH OF OPERAND
         SRL   R1,1                GET LENGTH OF FIND ARGUMENT
         LR    R0,R1               COPY HEX FIND TARGET LENGTH
         LA    R15,STRING          POINT TO FIND COMPARISON TARGET
FINDXPAK PACK  0(2,R15),0(3,R14)   CONVERT TWO HEX DIGITS TO A BYTE
         LA    R15,1(,R15)         POINT TO NEXT TARGET BYTE
         LA    R14,2(,R14)         POINT TO NEXT HEX DIGIT PAIR
         BCT   R0,FINDXPAK         PROCESS NEXT HEX DIGIT PAIR
         MVI   0(R15),0            TIDY UP FOR THE FUN OF IT
         BCTR  R1,0
         STH   R1,STRINGL          SAVE LENGTH CODE
         B     FNDXLATD            PROCESS ANY COLUMN SPECIFICATION
         DROP  R5                  FINDHEX
         SPACE
**********************************************************************
*                                                          *         *
*         HELP                                             *   ABL   *
*                                                          *         *
**********************************************************************
         SPACE
         USING HEL,R15
HEL      DS    0H
         OI    STATUS4,HELYES      HEL EXPLICTLY REQUESTED       GP@P6
         B     HELPHEL                                           GP@P6
         DROP  R15                 HEL
         SPACE
HELP     DS    0H
         NI    STATUS4,255-HELYES  HELP EXPLICTLY REQUESTED      GP@P6
HELPHEL  BALR  R5,0                TEMPORARY BASE REGISTER
         USING *,R5
         LA    R15,OPD1            FIRST PARAMETER
         TM    6(R15),PRESENT      ANY OPERANDS?
         BO    HELP010             YES, BRANCH
         TM    STATUS4,RFRSH       PREVIOUS HELP SCREEN?
         BO    HELP010             YES, PERFORM HELP CALL
GIVEPFKS OI    STATUS4,HELPSW      NO, SHOW CURRENT PFK VALUES
         B     FILLSCR
         SPACE
HELP010  LA    R1,CMDAREA          START OF HELP PARAMETERS
         LA    R0,63               LENGTH OF PARSE STRING
         SLL   R0,16               SHIFT AS REQUIRED
         STCM  R0,B'1111',0(R1)    SAVE FOR PARSE
         TM    6(R15),QUOTED       QUOTED?
         BO    ERRINV              YES, INVALID
         L     R14,0(,R15)         START OF PARAMETER
         LH    R15,4(,R15)         LENGTH OF PARAMETER
         L     R6,REVECT           ECT ADDRESS
         OI    ECTSWS-ECT(R6),ECTNOPD      ASSUME NO OPERAND
         MVC   ECTSCMD-ECT(8,R6),HELPEP    SUBCOMMAND IS HELP
         LTR   R15,R15                     NULL STRING?
         BZ    HELP040                     YES, BRANCH
         CH    R15,HW8                     IS LENGTH MORE THAN 8?
         BH    ERRINV                      YES, ERROR
         BCTR  R15,0                       MACHINE LENGTH
         MVC   BLDL+4(8),BLANKS
         EX    R15,MVOPRND         COMMAND NAME
         LA    R15,OPD1            START OF FIRST ODL
         L     R14,0(,R15)         START OF FIRST PARAMETER
         LA    R14,0(,R14)         DROP TOP BYTE
         SR    R14,R1              OFFSET TO SECOND PARAMETER
         SH    R14,HW4             LESS TEXT LENGTH FIELDS
         NI    ECTSWS-ECT(R6),X'FF'-ECTNOPD ASSUME OPERANDS
         TM    6(R15),PRESENT      ANY OPERANDS?
         BO    HELP030             YES, BRANCH
         LA    R14,63              NO, USE DEFAULT
         OI    ECTSWS-ECT(R6),ECTNOPD      ASSUME NO OPERAND
         SPACE
HELP030  STH   R14,2(,R1)                  OFFSET TO OPERANDS
HELP040  ST    R1,REVCBUF                  START OF COMMAND TEXT
         LA    R1,REVCBUF          CPPL START
         TM    STATUS4,HELOKAY+HELYES   USE HEL OR HELP?         GP@P6*
         BO    HELHELP             HELP IS HEL                        *
         LINK  EPLOC=HELPEP,SF=(E,LINKAREA)                           *
         B     FILLSCR                                                *
HELHELP  DS    0H                                                GP@P6*
         LINK  EPLOC=HELEP,SF=(E,LINKAREA)
         TCLEARQ OUTPUT            STOP *** (HEL'S ERAZE TPUT?)  GP@P6
         STFSMODE ON,NOEDIT=YES    RESTORE FULLSCREEN MODE       GP@P6
         B     FILLSCR
         DROP  R5                  HELPHEL+2
HELPEP   DC    CL8'HELP'           SYSTEM TSO HELP ENTRY POINT NAME
HELEP    DC    CL8'HEL'            FULLSCREEN HELP ENTRY POINT NAME
         SPACE
**********************************************************************
*                                                          *         *
*         DEBUG  (SHOW TGET RESULTS ON SCREEN)             *   ABL   *
*                                                          *         *
**********************************************************************
         SPACE
DEBUG    DS    0H
         OI    STATUS4,DBUGSW      REFRESH OF SCREEN NEEDED
         B     FILLSCR
         SPACE
************************************************************
*                                                          *
*         HEX                                              *
*                                                          *
************************************************************
         SPACE
         USING HEXMODE,R5
HEXMODE  LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    HEXFLIP             NO, FLIP FLOP
         L     R14,0(,R15)         POINT TO OPERAND
         CLI   5(R15),2            IS LENGTH 2?
         BNE   HEXOFF              NO, TRY OFF
         CLC   ON,0(R14)           YES, IS IT 'ON'?
         BNE   ERRINV              NO, INVALID OPERAND
         OI    MODE,MODEX
         B     FILLSCR
HEXOFF   CLI   5(R15),3            IS LENGTH 3?
         BNE   ERRINV
         CLC   OFF,0(R14)
         BNE   ERRINV
         NI    MODE,255-MODEX
         B     FILLSCR
HEXFLIP  XI    MODE,MODEX          FLIP FLOP THE SWITCH
         B     FILLSCR
         DROP  R5                  HEXMODE
         SPACE
************************************************************
*                                                          *
*         PFK SET                                          *
*                                                          *
************************************************************
         SPACE
         USING PFKSET,R5
PFKSET   LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,3(,R1)          POINT TO NN AFTER PFK
         TRT   0(1,R15),NUMERIC    PFKN
         BNZ   PFKSET9             ERROR, N NOT NUMERIC
         PACK  DOUBLE,0(1,R15)
         CLI   1(R15),C' '         SINGLE DIGIT
         BE    PFKSET1             YES, BRANCH
         TRT   1(1,R15),NUMERIC
         BNZ   PFKSET9             SECOND DIGIT NOT NUMERIC
         CLI   2(R15),C' '
         BNE   PFKSET9             MORE THAN 2 DIGITS
         PACK  DOUBLE,0(2,R15)
PFKSET1  CVB   R1,DOUBLE           GET VALUE OF N OR NN
         LTR   R1,R1  '
         BZ    PFKSET0             ZERO SO SET DEFAULTS
         LA    R0,24
         CR    R1,R0
         BH    PFKSET9             ERROR, GREATER THAN 24
         OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
         LA    R0,PFKTABL          LENGTH OF EACH PFK ENTRY
         MR    R0,R0               COMPUTE OFFSET INTO TABLE
         LA    R15,PROFDATA(R1)    POINT TO TABLE ENTRY
         LA    R1,OPD1             GET FIRST OPERAND ENTRY
         TM    6(R1),PRESENT       ARE THERE ANY OPERANDS?
         BZ    PFKSETF             NO, BLANK IT
         CLI   5(R1),0             IS IT NULL LENGTH?
         BE    PFKSETF             YES, BLANK IT
         L     R1,0(,R1)           POINT TO OPERAND
         CLC   0(3,R1),PFK         IS OPERAND ANOTHER PFK COMMAND?
         BE    PFKSET9             YES, ERROR
         LA    R0,CMDAREA+62       POINT TO END OF COMMAND AREA
         SR    R0,R1               GET LENGTH CODE OF COMMAND
         BM    PFKSET9
         LR    R14,R0
         MVI   1(R15),C' '
         MVC   2(PFKTABL-2,R15),1(R15)
         EX    R14,PFKLOAD         MOVE COMMAND INTO PFK TABLE
PFKSETX  MVC   MSG(MSG40L),MSG40   PFKNN HAS BEEN RESET
         OI    DOUBLE+7,X'0F'
         UNPK  MSG+5(2),DOUBLE+6(2)
         B     PROMPT
PFKSETF  MVI   1(R15),C' '
         MVC   2(PFKTABL-2,R15),1(R15)
         B     PFKSETX
PFKSET9  MVC   MSG(MSG41L),MSG41   INVALID PFK COMMAND
         B     BELPRMPT
PFKLOAD  MVC   1(0,R15),0(R1)      <<< EXECUTED >>>
         SPACE
PFKSET0  LA    R1,OPD1             GET FIRST OPERAND ENTRY
         TM    6(R1),PRESENT       ARE THERE ANY OPERANDS?
         BO    ERRINV              YES, ABORT TO AVOID DISAPPOINTMENT
         OI    STATUS,STPROF       NO, PROFILE REWRITE NOW REQUIRED
         L     R1,PFKDEFEP         POINT TO PFK DEFAULTS
         LA    R15,PFKTAB-2048                                GYP93274
         LA    R15,2048(,R15)                                 GYP93274
         LA    R0,24               LOAD NUMBER OF PF KEYS
PFKINIT2 MVI   0(R15),C' '
         MVC   1(PFKTABL-1,R15),0(R15) PAD WITH BLANKS
         MVC   0(PFKDEFL,R15),0(R1) INSERT DEFAULT
         LA    R1,PFKDEFL(,R1)     POINT TO NEXT DEFAULT
         LA    R15,PFKTABL(,R15)   POINT TO NEXT PFK ENTRY
         BCT   R0,PFKINIT2         DO NEXT PFK IF ANY
         MVC   MSG(MSG43L),MSG43   DEFAULT PFK VALUES SET
         B     PROMPT
         DROP  R5                  PFKSET
PFK      DC    C'PFK'
         DS    0H
         SPACE
************************************************************
*                                                          *
*         SMF                                              *
*                                                          *
************************************************************
         SPACE
         USING SMFMODE,R5
SMFMODE  LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    SMFFLIP             NO, FLIP FLOP
         L     R14,0(,R15)         POINT TO OPERAND
         CLI   5(R15),2            IS LENGTH 2?
         BNE   SMFOFF              NO, TRY OFF
         CLC   ON,0(R14)           YES, IS IT 'ON'?
         BNE   ERRINV              NO, INVALID OPERAND
         OI    MODE,SMFSW
SMFLOAD  ICM   R15,B'1111',CALLSMFA GET REVSMF ADDRESS - IS IT LOADED?
         BNZ   FILLSCR             YES, BRANCH
         L     R0,REVSMFEP         WILL USE THIS INSTEAD OF LOAD
*                                  AFTER REVSMF IS TESTED
*        LOAD  EP=REVSMF,ERRET=SMFERR
         LTR   R0,R0               NON-ZERO ENTRY POINT?
         BZ    SMFERR              NO, LOAD FAILED - REVSMF NOT FOUND
         ST    R0,CALLSMFA         YES, SAVE ADDRESS OF REVSMF
         B     FILLSCR
SMFOFF   CLI   5(R15),3            IS LENGTH 3?
         BNE   ERRINV
         CLC   OFF,0(R14)
         BNE   ERRINV
SMFERR   NI    MODE,255-SMFSW
         B     FILLSCR
SMFFLIP  XI    MODE,SMFSW
         TM    MODE,SMFSW          DID WE FLIP IT ON?
         BO    SMFLOAD             YES - CHECK FOR REVSMF
         B     FILLSCR
         DROP  R5                  SMFMODE
         SPACE
**********************************************************************
*                                                          *         *
*         COLOUR                                           * GP@SECV *
*                                                          *         *
**********************************************************************
         SPACE
         USING COLRMODE,R5
COLRMODE LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BO    COLOURON            YES, CHECK IT OUT
         TM    STATUS5,X3270       NO, FLIP-FLOP
         BZ    COLOR7ON            NOW OFF SO TURN IT ON
         B     COLR7OFF            NOW ON SO TURN IT OFF
COLOURON L     R14,0(,R15)         POINT TO OPERAND
         CLI   5(R15),2            IS LENGTH 2?
         BNE   COLOROFF            NO, TRY OFF
         CLC   ON,0(R14)           YES, IS IT 'ON'?
         BNE   ERRINV              NO, INVALID OPERAND
COLOR7ON TM    MODE,DIDQRY+HILITE  HIGHLIGHTING DEFINITELY A NO-NO?
         BM    ERRCOLOR            YES, REJECT THE 'ON' OPERAND
         OI    STATUS5,X3270       COLOUR OK OR CLEVER MONOCHROME OR
         LA    R1,SCREENW-4092                  NO QUERY WAS DONE
         LA    R1,4092(,R1)        GET NEW SCREEN BUFFER ADDRESS
         MVI   3(R1),X'F7'         REPLACE OLD WCC WITH CODE FOR WHITE
         ST    R1,CBPRM3           SAVE NEW SCREEN BUFFER ADDRESS
         B     FILLSCR
COLOROFF CLI   5(R15),3            IS LENGTH 3?
         BNE   COLOUR#             NO, TRY COLOUR NOMINATION
         CLC   OFF,0(R14)
         BNE   ERRINV
COLR7OFF NI    STATUS5,255-X3270
         LA    R1,SCREENW-4092                                GYP93274
         LA    R1,4092+3(,R1)      GET NEW SCREEN BUFFER ADDRESS
         MVI   0(R1),X'C1'         REPLACE OLD CODE FOR WHITE WITH WCC
         ST    R1,CBPRM3           SAVE NEW SCREEN BUFFER ADDRESS
         B     FILLSCR
COLOUR#  CLI   5(R15),1            IS LENGTH 1?
         BNE   ERRINV              NO
         TRT   0(1,R14),HEXTEST    YES, HEX DIGIT?
         BNZ   ERRINV              NO
         TM    MODE,DIDQRY+COLOR   IS 7-COLOUR A POSSIBILITY?
         BM    ERRCOLOR            NO, REJECT THE NOMINATED COLOUR
         TR    0(1,R14),HEXDATA    YES, CONVERT OPERAND TO HEXADECIMAL
         TM    0(R14),X'07'        COLOUR 0 OR 8 NOMINATED?
         BZ    ERRCOLOR            YES, BLACK ON VDU IS RIGHT OUT
         CLI   0(R14),X'F8'        IS IT A 7-COLOUR COLOUR?
         BL    COLOR#OK            YES, PROCEED
         TM    STATUS5,COLOR16     NO, IS THIS A 16-COLOUR TERMINAL?
         BZ    ERRCOLOR            NO, CANNOT DO A COLOUR THIS FANCY
COLOR#OK OI    STATUS,STPROF       PROFILE REWRITE NOW REQUIRED
         NI    0(R14),X'0F'        CONVERT TO BINARY
         TM    MODE,MODEX          IN HEX MODE?
         BO    COLR#HEX            YES
         MVC   CHRCOLOR,0(R14)     NO, UPDATE CHARACTER MODE COLOUR
         MVC   PROFDATA+12(1),0(R14)
         B     FILLSCR             REPAINT SCREEN
COLR#HEX MVC   HEXCOLOR,0(R14)     UPDATE HEXADECIMAL MODE COLOUR
         MVC   PROFDATA+13(1),0(R14)
         B     FILLSCR             REPAINT SCREEN
ERRCOLOR MVC   MSG(MSG42L),MSG42   COLOUR NOT SUPPORTED
         B     BELPRMPT
         DROP  R5                  COLRMODE
         SPACE
**********************************************************************
*                                                          *         *
*         FULL                                             *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
         USING FULL,R5
FULL     LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BO    FULLON              YES, CHECK IT OUT
         XC    PERIODS,FULLT       NO, FLIP-FLOP
         XC    PERIODS,KEYBT           WITHOUT KNOWING WHICH IS ACTIVE
         B     FILLSCR
FULLON   L     R14,0(,R15)         POINT TO OPERAND
         CLI   5(R15),2            IS LENGTH 2?
         BNE   FULLOFF             NO, TRY OFF
         CLC   ON,0(R14)           YES, IS IT 'ON'?
         BNE   ERRINV              NO, INVALID OPERAND
         MVC   PERIODS,FULLT       YES
         B     FILLSCR
FULLOFF  CLI   5(R15),3            IS LENGTH 3?
         BNE   ERRINV              NO, INVALID OPERAND
         CLC   OFF,0(R14)          YES, IS IT 'OFF'?
         BNE   ERRINV              NO, INVALID OPERAND
         MVC   PERIODS,KEYBT       YES
         B     FILLSCR
         DROP  R5                  FULL
         SPACE
**********************************************************************
*                                                          *         *
*         ASCII                                            *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
         USING ASCII,R5
ASCII    LR    R5,R15              TEMPORARY BASE REGISTER
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BO    ASCIION             YES, CHECK IT OUT
         XI    MODE,ASCIISW        NO, FLIP-FLOP
         B     FILLSCR
ASCIION  L     R14,0(,R15)         POINT TO OPERAND
         CLI   5(R15),2            IS LENGTH 2?
         BNE   ASCIIOFF            NO, TRY OFF
         CLC   ON,0(R14)           YES, IS IT 'ON'?
         BNE   ERRINV              NO, INVALID OPERAND
         OI    MODE,ASCIISW        YES
         B     FILLSCR
ASCIIOFF CLI   5(R15),3            IS LENGTH 3?
         BNE   ERRINV              NO, INVALID OPERAND
         CLC   OFF,0(R14)          YES, IS IT 'OFF'?
         BNE   ERRINV              NO, INVALID OPERAND
         NI    MODE,255-ASCIISW    YES
         B     FILLSCR
         DROP  R5                  ASCII
         SPACE
**********************************************************************
*                                                          *         *
*         RECALL                                           *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
         USING RECALL,R5
RECALL   LR    R5,R15              TEMPORARY BASE REGISTER
         L     R1,RECALPTR         GET RECALL STACK ELEMENT
RECALLNT TM    8(R1),X'80'         NEGATIVE LENGTH CODE?
         BZ    RECALLNN            NO, NON-NEGATIVE
         L     R1,4(,R1)           YES, LOAD BACKWARD POINTER
         B     RECALLNT            PERFORM NEGATIVE TEST AGAIN
RECALLNN LA    R15,REPLY+64        TEMPORARY TPUT BUFFER
         MVC   0(RECALPLN,R15),RECALPFX
         TM    STATUS5,X3270       USING 3270 EXTENSIONS?
         BZ    RECALRED            NO
         MVC   RECALPLN(3,R15),RED YES, SUPPLY A COLOUR
         MVC   RECALPLN(1,R15),SACHAR   ENSURE CORRECT SET ATTRIBUTE
         LA    R15,3(,R15)         ADJUST BUFFER POINTER
RECALRED LH    R14,8(,R1)          GET LENGTH CODE
         EX    R14,RECALLMV        LOAD RECALLED TEXT
         LA    R0,RECALPLN+1(R14,R15)   POINT PAST END OF DATA STREAM
         MVC   RECALPTR,4(R1)      UPDATE NEXT-TO-BE-RECALLED POINTER
         LA    R1,REPLY+64         GET TPUT BUFFER ADDRESS
         SR    R0,R1               GET TPUT BUFFER LENGTH
         B     RECALPUT            DISPLAY RECALLED TEXT
RECALLMV MVC   RECALPLN(0,R15),10(R1)  <<< EXECUTED >>>
         DROP  R5                  RECALL
         SPACE
RECALPFX DCS   X'C1',SBA,(2,15),RTA,(2,65),X'00',SBA,(2,15),IC
RECALPLN EQU   *-RECALPFX
         SPACE
**********************************************************************
*                                                          *         *
*         NEWTOP                                           *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
         USING NEWTOP,R5
NEWTOP   LR    R5,R15              TEMPORARY BASE REGISTER
         ICM   R0,B'1111',$UCBAD   TALKING DIRECTLY TO PHYSICAL DEVICE?
         BZ    INVLDCMD            NO, SO NEWTOP IS INVALID
         LA    R15,OPD1            GET FIRST OPERAND ENTRY
         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS?
         BZ    NEWTOP0             NO, RESET TO REAL TOP
         TM    6(R15),QUOTED       QUOTED?
         BO    ERRINV              YES, INVALID
         LH    R1,4(,R15)          GET LENGTH
         LTR   R1,R1               IS IT NULL STRING?
         BZ    NEWTOP0             YES, RESET TO REAL TOP
         CH    R1,HW6              IS LENGTH MORE THAN 6?
         BH    ERRINV              YES, ERROR
         L     R14,0(,R15)         GET ADDRESS OF DATA
         BCTR  R1,0                GET LENGTH CODE
         EX    R1,FINDXTRT         IS STRING ALL VALID HEX CHARACTERS?
         BNZ   ERRINV              NO, INVALID
         EX    R1,FINDXTR          YES, CONVERT TO ZONED HEX
         LA    R1,1(,R1)           GET LENGTH COUNT AGAIN
         SLR   R0,R0               ZERO ACCUMULATOR
         LR    R15,R0              ZERO WORK REGISTER
NEWTOPLP SLL   R0,4                PROMOTE PREVIOUS HEX DIGITS
         NI    0(R14),X'0F'        ZERO ZONE
         IC    R15,0(R14)          LOAD DIGIT
         OR    R0,R15              GATE DIGIT THROUGH TO ACCUMULATOR
         LA    R14,1(,R14)         POINT TO NEXT POSSIBLE DIGIT
         BCT   R1,NEWTOPLP         PROCESS NEXT DIGIT
         LTR   R0,R0               IS REAL TOP REQUESTED?
         BZ    NEWTOP0             YES
NEWTOPS  TM    STATUS2,MAGTAPE     REVIEWING A TAPE FILE?
         BO    *+8                 YES, OPERAND IS RELATIVE BLOCK ADDR
         SLL   R0,8                NO, CONVERT RELATIVE TTR TO TTR0
         ST    R0,TTR              SAVE ADDRESS OF NEW TOP-OF-DATA
         TM    STATUS2,EOTAPE      END-OF-FILE FOR TAPE?
         BZ    NEWTOPX             NO, PROCEED WITH POINT
         MVI   CLOSED,X'80'        YES, REPOSITION FOR POINT
         CLOSE ((R4),REREAD),TYPE=T,MF=(E,CLOSED)
         NI    STATUS2,255-EOTAPE  REPOSITIONED AT START
NEWTOPX  POINT (R4),TTR            POINT TO REQUESTED ADDRESS
         NI    STATUS2,255-FASTREAD      DISABLE "FASTPATH"
         NI    STATUS,255-STNOMEM  ALLOW I/O EVEN IF NO MEMBERS
         B     NOCONCAT            RESET POINTERS AND PROCEED
NEWTOP0  LA    R0,1                LOAD FIRST PHYSICAL BLOCK NUMBER
         TM    DSORG,X'02'         IS DSORG PO?
         BZ    NEWTOPS             NO, PHYSICAL SEQUENTIAL
         MVC   BLDL+4(8),$MEMBER   YES, LOAD MEMBER NAME
         OI    STATUS,STNOMEM      PREPARE FOR NO MEMBER OF THAT NAME
         MVC   $MEMBER,NOMEM
         B     TOPOFMEM            GO VERIFY AND READ LATEST STOW
         DROP  R5                  NEWTOP
         SPACE
**********************************************************************
*                                                          *         *
*         SUBMIT                                           *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
         USING SUBMIT,R5
SUBMIT   LR    R5,R15              TEMPORARY BASE REGISTER
         TM    MYDSCB-44+82,X'42'  SEQUENTIAL OR PARTITIONED?
         BZ    INVLDCMD            NO, INVALID DATA SET TYPE
         CLC   HW80,MYDSCB-44+88   IS RECORD LENGTH 80?
         BNE   INVLDCMD            NO, INVALID DATA SET TYPE
         TM    TSTRECFM,X'80'      FIXED LENGTH RECORDS?
         BZ    INVLDCMD            NO, INVALID DATA SET TYPE
*        THE ABOVE THREE TESTS REPRESENT NO LOSS OF FUNCTION
*              BECAUSE TSO SUBMIT ALSO MAKES THESE TESTS.
         LA    R15,OPD1
         TM    6(R15),PRESENT      TOO MANY OPERANDS?
         BO    ERRINV              YES
         MVC   CMDAREA(12),=CL12'TSO SUBMIT '''
         MVC   CMDAREA+12(44),$DSNAME+2     LOAD DATA SET NAME
         LH    R1,$DSNAME          GET LENGTH OF DATA SET NAME
         LA    R1,CMDAREA+12(R1)   POINT PAST DATA SET NAME
         MVI   0(R1),QUOTE         SUPPLY TRAILING QUOTE
         TM    DSORG,X'02'         IS DSORG PO?
         BZ    NOTPFK              NO, SUBMIT SEQUENTIAL DATA SET
         MVI   0(R1),C'('          YES, SUPPLY OPEN BRACKET
         MVC   1(8,R1),$MEMBER     SUPPLY MEMBER NAME
         MVI   9(R1),C')'          SUPPLY CLOSE BRACKET
         MVI   10(R1),QUOTE        SUPPLY TRAILING QUOTE
         LA    R1,8(,R1)           POINT TO LAST BYTE OF MEMBER NAME
SUBMITLP CLI   0(R1),C' '          TRAILING BLANK?
         BNE   NOTPFK              NO, SUBMIT THE PDS MEMBER
         MVC   0(3,R1),1(R1)       YES, SHUFFLE BRACKET, QUOTE + BLANK
         BCTR  R1,0                POINT TO NEW LAST MEMBER NAME BYTE
         B     SUBMITLP            RE-CHECK FOR TRAILING BLANK
         DROP  R5                  SUBMIT
         SPACE
         LTORG
         SPACE
**********************************************************************
*                                                          *         *
*         TAPE LABEL FORMAT ROUTINES                       *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
         USING TAPELBLS,R15
TAPELBLS TM    TSTRECFM,X'40'      VARIABLE LENGTH RECORDS?
         BOR   R14                 YES, CAN'T BE TAPE LABELS
         ICM   R0,3,OFFSET         SCROLLED LEFT MAXIMUM?
         BNZR  R14                 NO, WON'T HAVE RIGHT DATA ON SHOW
         CLC   MSG(16),MSG31       FIND COMMAND ISSUED?
         BER   R14                 YES, SCREEN DATA MAY HAVE SA CODES
         LA    R1,SCREENW-3960     POINT TO FILE DATA ON SCREEN
         LA    R1,3960+SCREENL(,R1)                           GYP93274
         CLI   0(R1),X'28'         SET ATTRIBUTE CODE?
         BE    TPSAJMP1            YES
         CLI   0(R1),X'0E'         SET ATTRIBUTE CODE?
         BNE   TPJMP1OK            NO
TPSAJMP1 LA    R1,3(,R1)           YES, JUMP OVER SET ATTRIBUTE
TPJMP1OK LA    R1,160(,R1)         JUMP OVER COLUMNS LABEL AND RULER
         CLI   0(R1),X'28'         SET ATTRIBUTE CODE?
         BE    TPSAJMP2            YES
         CLI   0(R1),X'0E'         SET ATTRIBUTE CODE?
         BNE   TAPE1CHK            NO
TPSAJMP2 LA    R1,3(,R1)           YES, JUMP OVER SET ATTRIBUTE
TAPE1CHK CLI   3(R1),C'1'          VOL1/HDR1/EOV1/EOF1?
         BNER  R14                 NO, CAN'T BE TAPE LABELS
         ST    R14,HOLDR           SAVE RETURN ADDRESS
         CLC   VOLLBL,0(R1)        VOL1?
         BNE   DSLB1CHK            NO
         SH    R8,HW3              YES, ROOM FOR THREE LINES?
         BMR   R14                 NO, CAN'T SHOW ANYTHING
         LA    R0,5                USE TURQUOISE FOR NON-DATA
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR
         MVI   0(R6),C' '          BLANK THREE LINES
         MVC   1(239,R6),0(R6)
         MVC   160(8,R6),VOLAB11   SUPPLY 'VOL=SER='
         MVC   168(6,R6),4(R1)     SUPPLY VOLUME SERIAL NUMBER
         MVC   213(6,R6),VOLAB12   SUPPLY 'OWNER='
         MVC   219(10,R6),41(R1)   SUPPLY THE OWNER NAME
         LA    R6,240(,R6)         ADD EXTRA DATA BYTE COUNT
         LA    R5,3(,R5)           ADD EXTRA LINES USED
         LA    R1,80(,R1)          POINT TO NEXT DATA LINE
         CLI   3(R1),C'1'          HDR1/EOV1/EOF1?
         BNE   TPLBLRTN            NO, CAN'T BE TAPE LABELS
DSLB1CHK CLC   HDRLBL,0(R1)        HDR1?
         BE    DODSLBL1            YES
         CLC   EOVLBL,0(R1)        EOV1?
         BE    DODSLBL1            YES
         CLC   EOFLBL,0(R1)        EOF1?
         BNE   TPLBLRTN            NO, RETURN
DODSLBL1 SH    R8,HW4              ROOM FOR FOUR LINES?
         BM    TPLBLRTN            NO
         LA    R0,5                USE TURQUOISE FOR NON-DATA
         BAL   R14,COLOURSW        SET NEW DISPLAY COLOUR
         MVI   0(R6),C' '          BLANK A LINE
         MVC   1(79,R6),0(R6)
         MVC   80(240,R6),DSLAB1   SUPPLY TEMPLATES
         MVC   87(17,R6),4(R1)     LOAD DATA SET IDENTIFIER
         MVC   122(6,R6),21(R1)    LOAD DATA SET SERIAL NUMBER (VOL #1)
         MVC   149(4,R6),27(R1)    LOAD VOLUME SEQUENCE NUMBER
         MVC   167(4,R6),31(R1)    LOAD DATA SET SEQUENCE NUMBER
         TM    MODE,ASCIISW        TRANSLATING ASCII DATA?
         BZ    LABTYPOK            NO, ASSUME IBM STANDARD LABELS
         MVI   172(R6),C'A'        YES, INDICATE ASCII LABELS
LABTYPOK MVC   255(3,R6),41(R1)    LOAD CREATION DATE CYY
         MVC   259(3,R6),44(R1)    LOAD CREATION DATE DDD
         MVI   254(R6),C'2'        ASSUME 21ST CENTURY
         CLI   255(R6),C'0'        CORRECT?
         BNL   CREDTOK             YES
         MVC   254(2,R6),CENT20TH  NO, IT WAS THE 20TH CENTURY
CREDTOK  MVC   192(3,R6),47(R1)    LOAD EXPIRATION DATE CYY
         MVC   196(3,R6),50(R1)    LOAD EXPIRATION DATE DDD
         MVI   191(R6),C'2'        ASSUME 21ST CENTURY
         CLI   192(R6),C'0'        CORRECT?
         BNL   EXPDTOK             YES
         MVC   191(2,R6),CENT20TH  NO, IT WAS THE 20TH CENTURY
EXPDTOK  MVC   283(1,R6),53(R1)    LOAD DATA SET SECURITY CODE
         CLI   53(R1),C'1'         PASSWORD PROTECTED?
         BE    PWRDPROT            YES
         CLI   53(R1),C'3'         PASSWORD PROTECTED FOR CHANGE?
         BE    PWWRPROT            YES
         MVC   175(26,R6),183(R6)  NO, SUPPRESS LABEL SUBFIELD
         B     PWPROTOK
PWRDPROT MVC   175(8,R6),PASWRDLB  SUPPLY LABEL=(,,,PASSWORD,)
         B     PWPROTOK
PWWRPROT MVC   175(8,R6),NOPWRDLB  SUPPLY LABEL=(,,,NOPWREAD,)
PWPROTOK MVC   225(6,R6),54(R1)    LOAD BLOCK COUNT
         MVC   305(13,R6),60(R1)   LOAD OPERATING SYSTEM CODE
         LA    R6,320(,R6)         ADD EXTRA DATA BYTE COUNT
         LA    R5,4(,R5)           ADD EXTRA LINES USED
         LA    R1,80(,R1)          POINT TO NEXT DATA LINE
         CLI   3(R1),C'2'          HDR2/EOV2/EOF2?
         BNE   TPLBLRTN            NO, CAN'T BE TAPE LABELS
         CLC   HDRLBL,0(R1)        HDR2?
         BE    DODSLBL2            YES
         CLC   EOVLBL,0(R1)        EOV2?
         BE    DODSLBL2            YES
         CLC   EOFLBL,0(R1)        EOF2?
         BNE   TPLBLRTN            NO, RETURN
DODSLBL2 SH    R8,HW4              ROOM FOR FOUR LINES?
         BM    TPLBLRTN            NO
         MVI   0(R6),C' '          BLANK A LINE
         MVC   1(79,R6),0(R6)
         MVC   80(240,R6),DSLAB2   SUPPLY TEMPLATES
         LA    R14,86(,R6)         POINT TO RECFM DISPLAY AREA
         MVC   0(1,R14),4(R1)      LOAD FIRST RECORD FORMAT CODE
         MVC   1(1,R14),38(R1)     LOAD SECOND RECORD FORMAT CODE
         CLI   1(R14),C'R'         IS IT AN 'R'?
         BNE   TPRECFM1            NO, LEAVE IT
         MVC   1(2,R14),RECFMBS    YES, THIS MEANS 'BS'
TPRECFM1 LA    R14,1(,R14)
         CLI   0(R14),C' '         FOUND A BLANK?
         BNE   TPRECFM1            NO, INCREMENT AND TRY AGAIN
         MVC   0(1,R14),36(R1)     LOAD THIRD RECORD FORMAT CODE
         MVC   119(5,R6),5(R1)     LOAD BLOCK LENGTH
         MVC   101(5,R6),10(R1)    LOAD RECORD LENGTH
         MVC   133(1,R6),15(R1)    LOAD TAPE DENSITY
         CLI   15(R1),C'0'         KNOWN DENSITY CODE?
         BL    DENSDONE            NO
         CLI   15(R1),C'4'         KNOWN DENSITY CODE?
         BH    DENSDONE            NO
         MVC   DOUBLE(1),15(R1)    YES, COPY IT
         NI    DOUBLE,X'0F'        ZERO THE ZONE
         SLR   R14,R14
         IC    R14,DOUBLE
         MH    R14,HW10            GET INDEX INTO DENSTBL
         LA    R14,DENSTBL(R14)    POINT TO CORRECT ENTRY
         MVC   135(10,R6),0(R14)   SHOW BITS-PER-INCH MEANING OF CODE
DENSDONE MVC   174(1,R6),16(R1)    LOAD DATA SET POSITION
         CLI   16(R1),C'1'         KNOWN MEANING?
         BH    POSIDONE            NO
         CLI   16(R1),C'0'         KNOWN MEANING?
         BL    POSIDONE            NO
         MVC   176(24,R6),SINGLBL  YES, INDICATE SINGLE VOLUME DS
         BE    POSIDONE            GOOD GUESS
         MVC   177(5,R6),MULTLBL   INDICATE MULTIPLE VOLUME DS
         MVC   182(20,R6),183(R6)  TIDY UP EDITING
POSIDONE MVC   222(17,R6),17(R1)   LOAD JOB/JOBSTEP IDENTIFICATION
         MVC   155(2,R6),34(R1)    LOAD TAPE RECORDING TECHNIQUE
         MVC   251(8,R6),39(R1)    LOAD TAPE DRIVE PARTICULARS
         MVC   287(1,R6),47(R1)    LOAD CHECKPOINT DATA SET IDENTIFIER
         LA    R6,320(,R6)         ADD EXTRA DATA BYTE COUNT
         LA    R5,4(,R5)           ADD EXTRA LINES USED
TPLBLRTN L     R14,HOLDR           RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         DROP  R15                 TAPLBLS
         SPACE
VOLLBL   DC    C'VOL'
HDRLBL   DC    C'HDR'
EOVLBL   DC    C'EOV'
EOFLBL   DC    C'EOF'
VOLAB11  DC    C'VOL=SER='
VOLAB12  DC    C'OWNER='
RECFMBS  DC    C'BS'
CENT20TH DC    C'19'
PASWRDLB DC    C'PASSWORD'
NOPWRDLB DC    C'NOPWREAD'
DENSTBL  EQU   *
         DC    CL10'(200 BPI) '
         DC    CL10'(556 BPI) '
         DC    CL10'(800 BPI) '
         DC    CL10'(1600 BPI)'
         DC    CL10'(6250 BPI)'
DSLAB1   EQU   *,240
DSLAB11  DC    CL80'DSNAME=12345678.12345678     FIRST-VOLUME=123456   +
                 VOLUME-SEQUENCE=1234       '
DSLAB12  DC    CL80'LABEL=(1234,SL,________,,EXPDT=YYYY/DDD)           +
                 BLOCK-COUNT=123456         '
DSLAB13  DC    CL80'CREATION-DATE=YYYY/DDD       SECURITY-CODE=?       +
                 SYSTEM-CODE=123456789ABCD  '
DSLAB2   EQU   *,240
DSLAB21  DC    CL80'RECFM=?        LRECL=12345     BLKSIZE=12345     DE+
               N=1               TRTCH=12   '
DSLAB22  DC    CL80'VOLUME-SWITCH=1                                  CR+
               EATION-JOB=AJOBNAME/STEPNAME '
DSLAB23  DC    CL80'TAPE-DRIVE=12345678            CHECKPOINT-FLAG=1 ('+
               'C'' FOR CHECKPOINT DATA SET)  '
SINGLBL  DC    C'(SINGLE-VOLUME DATA SET)'
MULTLBL  DC    C'MULTI'
         SPACE
         DS    0D                  END OF CSECT
         SPACE
         DROP  R10,R11,R12,R3      REVIEW2
         TITLE '  R E V I E W   -   C P   O P E R A N D S  '
         PRINT NOGEN
REVPCL   IKJPARM
DSN      IKJPOSIT DSNAME,PROMPT='DATA SET NAME'
UNITKW   IKJKEYWD
         IKJNAME 'UNIT',SUBFLD=UNITSF
VOLKW    IKJKEYWD
         IKJNAME 'VOLUME',SUBFLD=VOLSF
SUBSYSKW IKJKEYWD
         IKJNAME 'SUBSYS',SUBFLD=SUBSYSSF
FILEKW   IKJKEYWD
         IKJNAME 'FILE'
QUICKW   IKJKEYWD
         IKJNAME 'QUICK'
DATAKW   IKJKEYWD
         IKJNAME 'DATA'
UNITSF   IKJSUBF
UNIT     IKJIDENT 'UNIT NAME',                                         +
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=8,                +
               PROMPT='UNIT NAME'
VOLSF    IKJSUBF
VOL      IKJIDENT 'VOLUME SERIAL',                                     +
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,                +
               PROMPT='VOLUME SERIAL'
SUBSYSSF IKJSUBF
SUBSYS   IKJIDENT 'SUBSYSTEM',                                         +
               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=4,                   +
               PROMPT='SUBSYSTEM NAME'
         IKJENDP
         PRINT GEN
         TITLE '  R E V I E W   -   D S E C T S  '
************************************************************
*                                                          *
*         DSECTS                                           *
*                                                          *
************************************************************
         SPACE
@DATA    DSECT
         DS    18F                 REGISTER SAVEAREA
SIZE     DS    F                   SIZE OF THIS AREA
CPPLPTR  DS    F
LINKAREA DS    2F
BASE1    DS    4F
BASE2    DS    4F
RET1     DS    F
MYPPL    DS    7F
MYANS    DS    F
MYECB    DS    F                   USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                  USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                  USED BY PUTLINE ROUTINE
MYOLD    DS    2F                  USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL256            USED BY PUTLINE ROUTINE
PUTLINS  DS    4F                  USED BY PUTLINE ROUTINE
MYPUTLEP DS    F                   ADDRESS OF IKJPUTL
MYSTPB   DS    0F                  5 WORDS USED BY STACK DELETE
MYDAPL   DS    5F
MYDAPB   DS    21F
MYDFPB   DS    5F
REVCBUF  DS    F                   *** CPPL FOR CALLED ROUTINE      ABL
REVUPT   DS    F                   *** CPPL FOR CALLED ROUTINE      ABL
REVPSCB  DS    F                   *** CPPL FOR CALLED ROUTINE      ABL
REVECT   DS    F                   *** CPPL FOR CALLED ROUTINE      ABL
PCMD     DS    CL8                 PRIMARY COMMAND NAME             ABL
UDSNAME  DS    2H,CL44
$PASSWRD DS    CL8
$VOLSER  DS    CL6
$DSNAME  DS    H,CL44
$UCBAD   DS    F
$UNIT    DS    CL8
$MEMBER  DS    CL8          _____/ THESE TWO
$CONCAT  DS    H                 \  TOGETHER                     GP@P6
$DDNAML  DS    H            _____/ THESE TWO
$DDNAME  DS    CL8               \  TOGETHER
DSNAIM   DS    H,CL44
DSPLUS   DS    H,CL62              (44 DSN + 10 (MEMBER) + 8 SPF STATS)
CSRLOCN  DS    H                   CURSOR SCREEN LOCATION        GP@P6
CALLSMFA DS    F
CALLPARM DS    4F
CALLSAVE DS    10D                 18 WORD SAVE AREA PLUS 1 DOUBLE WORD
COL1LBL  DS    CL8                 SPECIAL TEXT FOR COLUMN 1     GP@P6
LOCATEW  DS    0F
OBTAINW  DS    4F
LOCBUF   DS    0D                  USES NEXT 265 BYTES
MYDSCB   DS    CL140               96 BYTES OF DSCB, 5 BYTES CCHHR
MSG      DS    CL128
STATUS   DS    X                 STATUS FLAGS
STALLOC  EQU   X'80'             UNALLOCATION REQUIRED
STOPEN   EQU   X'40'             CLOSE REQUIRED
STABEND  EQU   X'20'             OPEN ABEND OCCURED
STLOCAT  EQU   X'10'             LOCATE DONE FOR ALIAS
STGMVU   EQU   X'08'             FREEMAIN OF VARIABLE AREA REQUIRED
STPODIR  EQU   X'04'             PDS MEMBER LIST DONE           GP@SECV
STPROF   EQU   X'02'             PROFILE CHANGED SO DO REWRITE   GP@P6
STNOMEM  EQU   X'01'             NO VALID MEMBER BEING REVIEWED
STATUS2  DS    XL1               MORE STATUS FLAGS               GP@P6
SETSIZED EQU   X'80'             RESTORE SCREEN SIZE ON EXIT
FASTREAD EQU   X'40'             PERFORM DIRECT ACCESS FOR SPEED
EFTSROK  EQU   X'20'             TSOEXEC TSO COMMAND AVAILABLE
MAGTAPE  EQU   X'10'             REVIEWED FILE ON MAGNETIC TAPE
EOTAPE   EQU   X'08'             TAPE REWIND REQUIRED AFTER EOF
CARTRIDG EQU   X'04'             REVIEWED FILE ON UNIT=3480
EDITED   EQU   X'02'             SPF EDIT SAVED A MEMBER
FSMODE   EQU   X'01'             FULL-SCREEN MODE IS ACTIVE
STATUS3  DS    X                 EVEN MORE STATUS FLAGS          GP@P6
*        EQU   X'80'             SPARE
SORTMODE EQU   X'7F'             PDS DIRECTORY SORT STATUS FLAGS
TTRSORT  EQU   X'40'             SORTED INTO ASCENDING TTRS (LOCATION)
SIZESORT EQU   X'20'             SORTED INTO DESCENDING SIZE
DATESORT EQU   X'10'             SORTED INTO DESCENDING CHANGE DATE
USERSORT EQU   X'08'             SORTED INTO USERID ORDER
SSISORT  EQU   X'04'             SORTED INTO ASCENDING SSI ORDER
SORTSWAP EQU   X'01'             ORDER CHANGED BY THIS PASS
*        EQU   X'00'             SORTED INTO COLLATING SEQUENCE
MODE     DS    X                 DISPLAY FORMAT FLAGS
SMFSW    EQU   X'80'             DISPLAY IN SMF RECORD FORMATTING MODE
MODEX    EQU   X'40'             DISPLAY IN HEXADECIMAL FORMATTING MODE
ASCIISW  EQU   X'20'             TRANSLATE CHARACTERS TO EBCDIC  GP@P6
DIDQRY   EQU   X'10'             TURNED ON IF QUERY WAS DONE     GP@P6
COLOR    EQU   X'08'             7-COLOUR DEFINITELY SUPPORTED   GP@P6
HILITE   EQU   X'04'             EXTENDED HILITING SURE IS OK    GP@P6
SYMSET   EQU   X'02'             SYMBOL SETS SUB-FIELD RETURNED  GP@P6
GEOK     EQU   X'01'             GRAPHIC ESCAPE DEFINITELY OK    GP@P6
DSORG    DS    XL2
DSORGTYP DS    X                 SPECIAL DATA SET TYPE FLAG      GP@P6*
VVRCOMTP EQU   X'08'             COMPONENT TYPE 'D' (0) OR 'I' (1)    *
AMATR    DS    X                 ICF COMPONENT ATTRIBUTE BYTE         *
VVRAMDST EQU   X'80'             ON FOR KSDS, OFF FOR ESDS            *
VVRAMWCK EQU   X'40'             WRITE CHECK                          *
VVRAMSDT EQU   X'20'             SEQUENCE SET WITH DATA (IMBED)       *
VVRAMREP EQU   X'10'             REPLICATION                          *
VVRAMORD EQU   X'08'             USE VOLUMES IN LIST ORDER            *
VVRAMRGE EQU   X'04'             KEY RANGE DATA SET                   *
VVRAMRDS EQU   X'02'             ON FOR RRDS                          *
VVRAMSPN EQU   X'01'             SPANNED RECORDS ALLOWED         GP@P6*
TSTRECFM DS    X
FINDSW   DS    X
FACT     EQU   X'80'             FIND COMMAND IS ACTIVE          GP@P6*
FTOP     EQU   X'40'             SEARCH FROM TOP OF DATA              *
FEND     EQU   X'20'             SEARCH FROM BOTTOM OF DATA           *
FBAK     EQU   X'10'             SEARCH DIRECTION IS BACKWARD         *
FWRD     EQU   X'08'             NON-NUMERIC OPERAND SPECIFIED        *
FNUM     EQU   X'04'             NUMERIC OPERAND SPECIFIED            *
FSMF     EQU   X'02'             FINDSMF COMMAND REQUESTED            *
FVRT     EQU   X'01'             VERTICAL SCROLLING OCCURRED     GP@P6*
RC       DS    H
CHRCOLOR DS    X                 COLOUR FOR CHARACTER DATA       GP@P6
HEXCOLOR DS    X                 COLOUR FOR HEXADECIMAL DATA     GP@P6
COLNUM   DS    CL6
MYDFPARM DS    5F                USED BY DAIRFAIL
MYDFREGS DS    F                 USED BY DAIRFAIL
MYDFRC   DS    F                 USED BY DAIRFAIL
MYJEFF02 DS    F                 USED BY DAIRFAIL
MYDFID   DS    H                 USED BY DAIRFAIL
FILEKV   DS    H
QUICKV   DS    H
DATAKV   DS    H                                                 GP@P6
DOUBLE   DS    D
GOTTERM  DS    D                 RESULTS FROM GTTERM MACRO      GP@SECV
GETTERML GTTERM MF=L             PARAMETER LIST FOR GTTERM      GP@P6
DAIRREGS DS    F
OPEND    DS    0F
CLOSED   DS    F
DYNEXLST DS    2F
KOUNT    DS    F
DYNDCBW  DS    0D,XL(SEQDCBL)
DYNDECBW DS    0F,XL(DYNDECBL)
RANGE    DS    2F
ANSWER   DS    2F
GMVUW    DS    0F,XL(GMVUL)
SAVKEYLE DS    F                                                GP@SECV
SAVSPANL DS    F
SAVLRECL DS    F
SAVBLKSI DS    F
SAVHOLDL DS    F
BLOCKPTR DS    F
SPANPTR  DS    F
HOLDPTR  DS    F
CHKPTLN  EQU   8                                                 GP@P6
CHKPTTOP DS    F
CHKPTBOT DS    F
CHKPTDUM DS    2F
ENDPTR   DS    F
HOLDTOP  DS    F
HOLDEND  DS    F
DIVREGS  EQU   *,8                                               GP@P6*
DIVREG0  DS    F                 SIZE OF DIV AREA                     *
DIVREG1  DS    F                 ADDRESS OF DIV AREA                  *
DIVHITTR DS    F                 HIGHEST TTR OF RECORD STORED BY DIV  *
AMKEY    DS    0F                RECORD KEY DETAILS                   *
AMRKP    DS    H                 RELATIVE KEY POSITION                *
AMKLN    DS    H                 KEY LENGTH                           *
AMCIV    DS    F                 CONTROLINTERVAL SIZE                 *
AMLCL    DS    F                 MAXIMUM RECORD LENGTH                *
AMNLR    DS    F                 NUMBER OF LOGICAL RECORDS            *
AMASP    DS    F                 BYTES OF FREE SPACE             GP@P6*
OFFSET   DS    H
RECSIZE  DS    H
COUNT    DS    F
TTR      DS    F
EOFRELAD DS    F                 END-OF-FILE RELATIVE ADDRESS    GP@P6
ATTNADDR DS    F                 ATTENTION EXIT ADDRESS          GP@P6
SCROLL   DS    F
DOWNAMT  DS    F
LISTNUM  DS    F
FLDPTR   DS    F
FLDLEN   DS    F
CMDPTR   DS    F
CMDLEN   DS    F
CMDTSOEX DS    CL8                 SPACE TO CONVERT TSO TO TSOEXEC  GP*
CMDAREA  DS    CL127
MSGDSN   DS    CL54
SMFSBTYP DS    H                   SMF SUB-TYPE TO BE HIGHLIGHTED   GP*
SACHAR   DS    X                   ORDER CODE FOR SET ATTRIBUTE     GP*
SBASAVE  DS    4F
PAGESIZE DS    H                   DATA LINES PER SCREEN
FINDCOL  DS    H
BUFFSIZE DS    F                   LENGTH OF TPUT BUFFER
SCRNLNES DS    F                   NUMBER OF SCREEN LINES
CBPRM1   DS    F                   POINTER TO BUFFSIZE
CBPRM2   DS    F                   POINTER TO SCRNLNES
CBPRM3   DS    F                   POINTER TO BUFFER (UPDATED IN PLACE)
CBPRM4   DS    F                   POINTER TO SACHAR
FNDNUM   DS    F
FNDOFF   DS    H
STRINGL  DS    H
STRING   DS    CL64
OPDL     DS    0F                  OPERAND DESCRIPTOR LIST
OPD0     DS    2F                  COMMAND DESCRIPTOR
OPD1     DS    2F                  OPERAND DESCRIPTOR 1
OPD2     DS    2F                  OPERAND DESCRIPTOR 2
OPD3     DS    2F                  OPERAND DESCRIPTOR 3
OPD4     DS    2F                  OPERAND DESCRIPTOR 4
OPD5     DS    2F                  OPERAND DESCRIPTOR 5
OPDLL    EQU   *-OPDL              LENGTH OF LIST
PRESENT  EQU   X'80'
QUOTED   EQU   X'40'
ATTNLST  STAX  ATTN,MF=L                                        GP@SECV
ATTNLEN  EQU   *-ATTNLST                                        GP@SECV
STATUS4  DS    X                 STILL MORE STATUS FLAGS         GP@P6
FLAGI    EQU   X'80'             INTERRUPT OCCURRED             GP@SECV
DBUGSW   EQU   X'40'             DEBUG FORMAT DISPLAY REQUIRED
RFRSH    EQU   X'20'             SCREEN FORMAT REFRESH REQUIRED
CSRSW    EQU   X'18'             CURSOR SCROLLING ACTIVE
PGSW     EQU   X'10'             FULL PAGE SCROLLING ACTIVE
HFSW     EQU   X'08'             HALF PAGE SCROLLING ACTIVE
HELOKAY  EQU   X'04'             HEL IS AVAILABLE
HELYES   EQU   X'02'             HEL IS REQUESTED
HELPSW   EQU   X'01'             SHOW PFKS
SMFTYPE  DS    XL1               SMF RECORD TYPE TO BE HIGHLIGHTED
STATUS5  DS    X                 AND SOME MORE STATUS FLAGS      GP@P6
STPDS    EQU   X'80'             APPARENTLY RUNNING UNDER PDS
STAUTH   EQU   X'40'             APF AUTHORIZED
VSAMSW   EQU   X'20'             EXTRACT VSAM LOGICAL RECORDS
OFFLDSW  EQU   X'10'             WRITE MEMBER CONTENTS TO SYSUT2
X3270    EQU   X'08'             CURRENTLY USING 3270 EXTENSIONS
COLOR16  EQU   X'04'             SIXTEEN COLOUR TERMINAL
RECURS   EQU   X'02'             RECURSIVE 'REVIEW' SESSION
SOFTEOF  EQU   X'01'             EOF WAS ZERO VSAM CIDF
OSBITS   DS    XL1               LOADED FROM CVTDCB              GP@P6
BLKFACTR DS    F                 FIXED BLOCKING FACTOR           GP@P6
BLKSATRK DS    F                 NUMBER OF BLOCKS PER TRACK      GP@P6
MAXPOINT DS    F                 MAXIMUM BLOCK NUMBER FOR POINT  GP@P6
HOLDR    DS    F
READR    DS    F
DOWNR    DS    F
DEBLOCKS DS    3F
SCREENF  DS    F
TGETREGS DS    3F
TGETREG2 DS    3F                  FOR DEBUG                       ABL
OFFLDCNT DS    F                 FLAGGED-FOR-OFFLOAD COUNT       GP@P6
SYNADSW  DS    F
SYNADMSG DS    CL78
         DS    H                   SPARE
DEVDATA  DS    2F
JFCB     DS    0F,CL176
POOLSIZ  DS    F
POOLLEN  DS    2F
SNAPDW   DS    0F,(SNAPDL)X
SNAPLW   DS    0F,(SNAPLL)X
SNAPR    DS    4F
*        IHAARL PREFIX=ARL,DSECT=NO,DESCR=NO                     GP@P6*
ARL      DS    0F                                                     *
ARLLEN   DS    H                   LENGTH OF THIS AREA - AT LEAST 36  *
ARLIDENT DS    CL2                 AREA ID - MUST BE 'AR'             *
ARLOPT1  DS    X                   OPTION BYTE - X'80'=AREA ABOVE LINE*
ARLRSVD1 DS    XL7                 RESERVED - SHOULD BE ZERO          *
ARLRETRV DS    H                   DS # TO GET DATA FOR - 0 FOR ALL   *
ARLFIRST DS    H                   1ST DS # TO GET DATA FOR - 0/1=1ST *
ARLAREA  DS    A                   ADDRESS OF ALLOC'N RETRIEVAL AREA  *
ARLPOOL  DS    HL1                 SUBPOOL - 0=>KEY 8-F, 230=>KEY 0-7 *
ARLRLEN  DS    FL3                 LENGTH OF ALLOC'N RETRIEVAL AREA   *
ARLRTRVD DS    H                   DS # FOR WHICH INFO WAS FETCHED    *
ARLCONC  DS    H                   DS # CONCATENATED IN DD            *
ARLRCODE DS    HL1                 REASON CODE                        *
ARLRSVD2 DS    XL7                 RESERVED - SET BY RDJFCB           *
*        IHAARL MACRO CALL SUPPRESSED - EXPANDED ABOVE           GP@P6*
RECALPTR DS    F                   RECALLED BUFFER POINTER       GP@P6
RECALUSE DS    F                   RECALL BUFFER FOR NEXT SAVE   GP@P6
PFKDISP  DS    CL1                 BYTE FOR TRACKING PFK DISPLAY      *
AMCASZ   DS    X                   TRACKS PER CONTROLAREA             *
AMBLKSZ  DS    H                   VSAM BLOCK SIZE                    *
         DS    0D
REPLY    DS    CL256
PERIODS  DS    CL256
BLDL     DS    0H,CL80             (GO FOR FW BNDRY FOR ST BEFORE STOW)
PROFDATA DS    CL64                NON-PFK PROFILE DATA          GP@P6*
*OLDDIR  DS    195F   ****WRONG****ENOUGH EVEN FOR 43 BY 80     GP@SECV
HOLDDIR  DS    60CL24              ENOUGH FOR 62*80 SCREEN    GYP93274
DIRNUM   EQU   0
DIRLEN   EQU   4
DIRREC   EQU   8
DIRNXT   EQU   12
DIRTTR   EQU   16
DIRSIZ   EQU   20
PFKTAB   DS    24CL64              PFK PROFILE DATA (24 PFKS)         *
         DS    CL1                 NULL BYTE FOR END OF PFKTAB        *
PFKTABL  EQU   64                  LENGTH OF EACH ENTRY
RECLDPTH EQU   20                  STACK DEPTH (CHAIN LENGTH)         *
         DS    0F                                                     *
RECALSTK DS    (RECLDPTH)XL60      RECALL BUFFER STACK (CHAIN)        *
*        DS    F                   FORWARD POINTER                    *
*        DS    F                   BACKWARD POINTER                   *
*        DS    H                   LENGTH OF RECALL DATA              *
*        DS    CL50                DATA TO BE RECALLED           GP@P6*
SCREENW  DS    0D,62CL166          INCREASE FOR MORE 3290      GYP93274
@DATAEND DS    0D
@DATAL   EQU   *-@DATA
         TITLE '  R E V P O D I R  '
**********************************************************************
*                                                          *         *
*         PARTITIONED ORGANIZATION DIRECTORY HANDLER       * GP@SECV *
*                                                          *         *
**********************************************************************
         SPACE
REVPODIR CSECT                     DISPLAY PDS DIRECTORY
         ENTRY LKEDDATE
         B     @PODIR-*(,R15)
         DC    AL1(9),CL9'REVPODIR'
@PODIR   STM   R14,R12,12(R13)
         LR    R10,R15
         LA    R15,1
         LA    R11,4095(R15,R10)
         USING REVPODIR,R10,R11
DIREFRSH LR    R4,R13              SAVE SAVE AREA POINTER
         LA    R2,DIRGMLIM         POINT TO BOUNDS OF GETMAIN LENGTH
         LA    R3,DOUBLE           POINT TO RESULTS AREA
         MVC   GMVUW(GMVCL),GMVC
         GETMAIN VC,LA=(R2),A=(R3),MF=(E,GMVUW)
         LTR   R15,R15             DID GETMAIN WORK?
         BZ    USEDYN              YES, PROCEED
         LA    R1,DIRRDMSG         NO, POINT TO ERROR MESSAGE
         LA    R0,L'DIRRDMSG-1     GET ERROR MESSAGE LENGTH
         TPUT  (1),(0),R           DISPLAY MESSAGE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,20              SET RETURN CODE
         BR    R14                 RETURN
USEDYN   L     R12,DOUBLE+4        GET LENGTH OF GETMAINED AREA
         L     R13,DOUBLE          GET ADDRESS OF GETMAINED AREA
         USING @DYNAREA,R13
         ST    R13,8(,R4)
         ST    R4,4(,R13)          CHAIN SAVE AREAS
         STM   R12,R13,FREEMRGS    SAVE FREEMAIN VALUES
         MVC   DIRDCB(DIRDCBL),STDIRDCB
         ALR   R12,R13             GET ADDRESS ABOVE GETMAINED AREA
         SH    R12,=H'60'          TAKE A PUNT
         ST    R12,MAXADDR         SAVE HIGHEST USEABLE ADDRESS
         LA    R0,DIRSCRN          TARGET ADDRESS
         ST    R0,CBPRM3           ADDRESS OF TPUT BUFFER FOR REVCMPBF
         LA    R1,STMONOLN         TARGET SIZE
         LA    R14,STATMONO        SOURCE ADDRESS
         LA    R15,STMONOLN        SOURCE SIZE (NULL PAD BYTE)
         TM    STATUS5,X3270       IS THIS A COLOUR SCREEN?
         BZ    INITPANL            NO, LOAD MONOCHROME HEADER
         LA    R0,DYNSCRN          TARGET ADDRESS
         ST    R0,CBPRM3           ADDRESS OF TPUT BUFFER FOR REVCMPBF
         LA    R1,STCOLRLN         TARGET SIZE
         LA    R14,STATCOLR-512
         LA    R14,512(,R14)       SOURCE ADDRESS
         LA    R15,STCOLRLN        SOURCE SIZE (NULL PAD BYTE)
INITPANL MVCL  R0,R14              INITIALIZE SCREEN HEADINGS
         TM    MYDSCB-44+84,X'C0'  IS IT UNDEFINED RECORD FORMAT?
         BNO   GETVOLID            NO, SO CANNOT BE A LOAD LIBRARY
         TM    STATUS5,X3270       IS THIS A COLOUR SCREEN?
         BZ    MONOPGMS            NO, LOAD MONOCHROME PROGRAM HEADER
         MVC   COLORHDG(RFUHDLEN),RECFMUHD
         B     GETVOLID            LOADED HEADING FOR COLOUR LAYOUT
MONOPGMS MVC   MONOHDG(RFUHDLEN),RECFMUHD
GETVOLID CLI   $VOLSER,C' '        IS IT A VIO FILE?
         BE    ISVIOPDS            YES
         MVC   POVOLUME,$VOLSER    NO, DISPLAY VOLUME OF FIRST PDS
ISVIOPDS LA    R7,DIRDCB
         USING IHADCB,R7
         MVC   DCBDDNAM,$DDNAME    LOAD FILE NAME INTO DCB
         DROP  R7                  R7 POINTS TO DIRDCB UNTIL CLOSED
         SLR   R8,R8               INITIALIZE MEMBER COUNTER
         ST    R8,OFFLDCNT         INITIALIZE OFFLOAD FLAG COUNT
         LA    R3,DIRENTS-4092                                GYP93274
         LA    R3,4092(,R3)        POINT TO FIRST ENTRY       GYP93274
         ST    R3,TOPMEMAD         IN CASE OF SORT FOR CONCATENATED MEM
         SLR   R6,R6               CLEAR WORK REGISTER
         ST    R6,TOTPGMSZ         INITIALIZE PROGRAM SIZE ACCUMULATOR
         ST    R6,TOTSPFSZ         INITIALIZE EDIT RECORDS ACCUMULATOR
         ST    R6,BLKREADS         INITIALIZE BLOCK READ COUNTER
         STH   R6,CONCTOPN         ZERO CONCATENATED FILE OPEN COUNT
         LH    R1,$DSNAME          GET DATA SET NAME LENGTH
         EX    R1,GTPDSNAM         LOAD DSN INTO HEADING
OPENDIR  MVI   OPEND,X'80'         OPEN PDS DIRECTORY
         OPEN  ((R7),INPUT),MF=(E,OPEND)
READBLK  GET   DIRDCB,DIRINPUT     READ A DIRECTORY BLOCK
         LA    R2,1
         A     R2,BLKREADS         INCREMENT BLOCK READ COUNTER
         ST    R2,BLKREADS         SAVE NEW BLOCK READ COUNTER VALUE
         LH    R2,DIRINPUT         GET BLOCK USED-BYTE-COUNT
         CH    R2,=H'14'           USED BYTE COUNT LESS THAN MINIMUM?
         BL    READBLK             YES, IGNORE BLOCK (BUG WITH PDSE)
         BCTR  R2,0
         BCTR  R2,0                SUBTRACT 2 FOR COUNTER HALFWORD
         LA    R4,DIRINPUT+2       POINT TO FIRST MEMBER IN BLOCK
NXTMEMBR CLC   LASTNAME(12),0(R4)  END OF DIRECTORY?
         BE    EOPDSDIR            YES
         LA    R8,1(,R8)           NO, INCREMENT MEMBER COUNTER
         MVC   0(8,R3),0(R4)       COPY MEMBER NAME
         MVC   8(2,R3),CONCTOPN    COPY CONCATENATION NUMBER
         MVC   10(4,R3),8(R4)      COPY ALIAS FLAG AND TTR
         LA    R5,16               IN CORE ENTRY IS SIXTEEN BYTES LONG
         MVC   DOUBLE(1),11(R4)    MOVE USER DATA LENGTH TO WORK AREA
         NI    DOUBLE,X'7F'        TURN OFF ALIAS BIT
         BZ    DONENTRY            NO USER DATA AT ALL
         CLI   DOUBLE,32+14        IMS ACB MEMBER WITH A USER TTR?
         BE    ACBSTORE            YES, STORE STUFF IN-CORE
         CLI   DOUBLE,15           HAS THIS MEMBER SPF STATS?
         BE    SPFSTORE            YES, STORE THEM IN-CORE
         CLI   DOUBLE,14           IMS ACB MEMBER OR PFD STATS?
         BE    ACBORPFD            YES, FIND OUT WHICH
         CLI   DOUBLE,9            IS THIS AN IMS REFERAL MEMBER?
         BE    REFSTORE            YES, STORE STUFF IN-CORE
         CLI   DOUBLE,6            IS THIS AN IMS FORMAT MEMBER?
         BE    FMTSTORE            YES, STORE STUFF IN-CORE
         CLI   DOUBLE,2            HAS THIS MEMBER SSI?
         BE    SSISTORE            YES, STORE IT IN-CORE
         CLI   DOUBLE,1            ONE HALF-WORD?
         BE    LENSTORE            YES, STORE IT IN-CORE
CHKFAILD TM    MYDSCB-44+84,X'C0'  IS IT UNDEFINED RECORD FORMAT?
         BNO   DONENTRY            NO, SO CANNOT BE A LOAD LIBRARY
         MVC   16(12,R3),20(R4)    LOAD USUAL LOAD MODULE DATA
         LA    R5,16(,R5)          TOTAL ENTRY LENGTH NOW 32 BYTES
         STH   R5,30(,R3)          SAVE LENGTH AT END OF ENTRY
         LA    R1,33(,R4)          POINT TO END OF SECTION
         TM    20(R4),X'04'        IS THIS A SCATTER PROGRAM?
         BZ    *+8                 NO
         LA    R1,8(,R1)           YES, ADD LENGTH OF SCTR SECTION
         TM    30(R4),X'41'        F4 ADDRESSING EXTENSION?
         BZ    NOTF4AE             NO
         TM    31(R4),X'C0'        F4 AE EXPANSION PRESENT?
         BZ    NOTF4AE             NO
         LA    R1,8(,R1)           YES, ADD LENGTH OF AE SECTION
NOTF4AE  SLR   R6,R6
         ICM   R6,7,22(R4)         GET LENGTH OF LOAD MODULE
         TM    11(R4),X'80'        IS THIS AN ALIAS?
         BZ    GETATHCD            NO, GET AUTHORIZATION CODE DETAILS
         MVC   30(8,R3),REALUNKN   YES, PRIME FOR INVALID
         NI    DOUBLE,X'1F'        TURN OFF USER TTR BITS
         CLI   DOUBLE,16           AT LEAST 16 HALFWORDS OF USER DATA?
         BL    NOREALNM            NO, REAL NAME CAN'T BE THERE
         MVC   30(8,R3),3(R1)      YES, COPY THE REAL NAME
NOREALNM LA    R5,8(,R5)           TOTAL ENTRY LENGTH NOW 40 BYTES
         STH   R5,38(,R3)          SAVE LENGTH AT END OF ENTRY
         LA    R1,11(,R1)          POINT PAST ALIAS SECTION
         SLR   R6,R6               DON'T COUNT SIZE OF ALIAS
GETATHCD A     R6,TOTPGMSZ         ACCUMULATE PROGRAM SIZES SO FAR
         ST    R6,TOTPGMSZ         SAVE NEW VALUE
         TM    30(R4),X'10'        IS THERE SSI DATA?
         BZ    PASTSSI             NO
         LA    R1,1(,R1)           YES, CATER FOR SSI SECTION ALIGNMENT
         SRL   R1,1
         SLL   R1,1
         MVC   DOUBLE(4),0(R1)     SAVE THE SSI FOR A BIT
         LA    R1,4(,R1)           POINT PAST SSI SECTION
         TM    11(R4),X'80'        IS THIS AN ALIAS?
         BO    PASTSSI             YES, FORGET ABOUT SAVING SSI
         MVC   30(4,R3),DOUBLE     NO, SAVE THE SSI
         LA    R5,4(,R5)           TOTAL ENTRY LENGTH NOW 36 BYTES
         STH   R5,34(,R3)          SAVE LENGTH AT END OF ENTRY
PASTSSI  MVC   28(2,R3),0(R1)      GET AUTHORIZATION DETAILS
         B     DONENTRY            HAVE NOW STORED ALL DETAILS
ACBORPFD TM    MYDSCB-44+84,X'C0'  IS IT UNDEFINED RECORD FORMAT?
         BNO   SPFSTORE            NO, ASSUME PFD STATISTICS
ACBSTORE SLR   R0,R0               CLEAR HIGH BYTE
         ICM   R0,7,17(R4)         LOAD CREATION DATE
         BAL   R14,CHKDATE         VERIFY EXPECTED DATE FORMAT
         MVC   22(6,R3),16(R4)     COPY DATE AND TIME LIKE SPF
         MVC   21(1,R3),22(R3)     MOVE FLAG BYTE
         MVI   22(R3),0            ZERO DATE HIGH BYTE
         SLR   R0,R0
         ICM   R0,3,24(R4)         GET IMS ACBLIB MEMBER'S SIZE
         SLL   R0,3                CONVERT FROM DOUBLEWORDS TO BYTES
         STCM  R0,7,18(R3)         SAVE SIZE IN LOAD MODULE SIZE SLOT
         LA    R5,14(,R5)          TOTAL ENTRY LENGTH NOW 30 BYTES
         STH   R5,28(,R3)          SAVE IN LAST HALFWORD OF ENTRY
         TM    11(R4),X'80'        IS THIS MEMBER AN ALIAS?
         BO    DONENTRY            YES, DON'T COUNT ITS SIZE
         A     R0,TOTPGMSZ         ACCUMULATE BYTE COUNTS SO FAR
         ST    R0,TOTPGMSZ         SAVE NEW VALUE
         B     DONENTRY            HAVE NOW STORED ALL DETAILS
FMTSTORE ICM   R0,B'1111',16(R4)   LOAD CREATION DATE
         BAL   R14,CHKDATE         VERIFY EXPECTED DATE FORMAT
         MVC   18(3,R3),13(R4)     COPY SIZE LIKE PGM (DROP HIGH BYTE)
         MVC   22(6,R3),16(R4)     COPY DATE AND TIME LIKE SPF
         LA    R5,14(,R5)          TOTAL ENTRY LENGTH NOW 30 BYTES
         STH   R5,28(,R3)          SAVE IN LAST HALFWORD OF ENTRY
         TM    11(R4),X'80'        IS THIS MEMBER AN ALIAS?
         BO    DONENTRY            YES, DON'T COUNT ITS SIZE
         SLR   R0,R0               (IMS FMT, DIF, DOF, MID OR MOD?)
         ICM   R0,3,12(R4)         GET IMS FORMAT MEMBER'S BYTE COUNT
         A     R0,TOTPGMSZ         ACCUMULATE BYTE COUNTS SO FAR
         ST    R0,TOTPGMSZ         SAVE NEW VALUE
         B     DONENTRY            HAVE NOW STORED ALL DETAILS
LENSTORE TM    MYDSCB-44+84,X'C0'  IS IT UNDEFINED RECORD FORMAT?
         BNO   SSISTORE            NO, CALL IT SSI AND WASTE A CORE HW
         XC    16(6,R3),16(R3)     YES, ASSUME AN IMS BYTE COUNT
         MVC   19(2,R3),14(R4)     LOAD IT AT PROGRAM SIZE OFFSET
         LA    R5,8(,R5)           TOTAL ENTRY LENGTH NOW 24 BYTES
         STH   R5,22(,R3)          SAVE IN LAST HALFWORD OF ENTRY
         TM    11(R4),X'80'        IS THIS MEMBER AN ALIAS?
         BO    DONENTRY            YES, DON'T COUNT ITS SIZE
         SLR   R0,R0               (IMS FMT, DIF, DOF, MID OR MOD?)
         ICM   R0,3,12(R4)         GET IMS FORMAT MEMBER'S BYTE COUNT
         A     R0,TOTPGMSZ         ACCUMULATE BYTE COUNTS SO FAR
         ST    R0,TOTPGMSZ         SAVE NEW VALUE
         B     DONENTRY            HAVE NOW STORED ALL DETAILS
SSISTORE MVC   16(4,R3),12(R4)     SAVE SSI DATA
         LA    R5,6(,R5)           TOTAL ENTRY LENGTH NOW 22 BYTES
         STH   R5,20(,R3)          SAVE IN LAST HALFWORD OF ENTRY
         CLI   DOUBLE,2            WAS IT FOUR-BYTE SSI?
         BE    DONENTRY            YES, HAVE NOW STORED ALL DETAILS
         STCM  R5,B'1100',18(R3)   NO, TWO-BYTE, ZERO OTHER 2 FOR SORT
         B     DONENTRY            HAVE NOW STORED ALL DETAILS
REFSTORE ICM   R0,B'1111',16(R4)   LOAD CREATION DATE
         BAL   R14,CHKDATE         VERIFY EXPECTED DATE FORMAT
         MVC   18(4,R3),16(R4)     COPY CREATION DATE
         MVC   22(6,R3),16(R4)     ALSO CALL IT MODIFICATION DATE/TIME
         MVI   16(R3),100          SUPPLY VERSION TO DENOTE IMS REFERAL
         MVC   17(1,R3),12(R4)     COPY TYPE BYTE AS MODIFICATION LEVEL
         MVC   28(2,R3),14(R4)     COPY SIZE (HOPE HI-ORDER BYTE IS 0)
         MVC   30(2,R3),14(R4)     COPY SIZE (HOPE HI-ORDER BYTE IS 0)
         TM    11(R4),X'80'        IS THIS MEMBER AN ALIAS?
         BO    REFALIAS            YES, DON'T COUNT ITS SIZE
         SLR   R0,R0
         ICM   R0,3,26(R4)         GET REFERAL MEMBER'S BYTE COUNT
         A     R0,TOTSPFSZ         ACCUMULATE BYTE COUNTS SO FAR
         ST    R0,TOTSPFSZ         SAVE NEW VALUE
REFALIAS STCM  R5,B'1100',32(R3)   ZERO SPF MODIFIED RECORD COUNT
         MVI   34(R3),C'('         INDICATE FAKE USERID
         MVC   35(6,R3),24(R4)     COPY THE ROOT NAME
         MVI   41(R3),C')'         INDICATE FAKE USERID
         CLI   35(R3),C' '         WAS SOMETHING COPIED?
         BNE   SPFDFAKE            YES, DONE FAKING SPF STATS DETAILS
         CLI   17(R3),3            IS THIS A FORMAT?
         BNE   SPFDFAKE            NO, DONE FAKING SPF STATS DETAILS
         MVC   35(6,R3),0(R4)      YES, COPY MEMBER NAME FOR SORTING
         B     SPFDFAKE            FINISHED FAKING SPF STATS DETAILS
SPFSTORE ICM   R0,B'1111',16(R4)   LOAD CREATION DATE
         BAL   R14,CHKDATE         VERIFY EXPECTED DATE FORMAT
         ICM   R0,B'1111',20(R4)   LOAD MODIFICATION DATE
         BAL   R14,CHKDATE         VERIFY EXPECTED DATE FORMAT
         TM    11(R4),X'80'        IS THIS MEMBER AN ALIAS?
         BO    SPFALIAS            YES, DON'T COUNT ITS LINES
         SLR   R0,R0
         ICM   R0,3,26(R4)         GET SPF LINE COUNT
         A     R0,TOTSPFSZ         ACCUMULATE LINE COUNTS SO FAR
         ST    R0,TOTSPFSZ         SAVE NEW VALUE
SPFALIAS MVC   16(2,R3),12(R4)     SAVE SPF VV.MM
         MVC   18(24,R3),16(R4)    SAVE REST OF SPF STATS
SPFDFAKE LA    R5,28(,R5)          TOTAL ENTRY LENGTH NOW 44 BYTES
         STH   R5,42(,R3)          SAVE IN LAST HALFWORD OF ENTRY
DONENTRY STH   R5,14(,R3)          SAVE IN SEVENTH HALFWORD OF ENTRY
         AR    R3,R5               POINT TO NEXT IN-CORE TABLE ENTRY
         TM    STATUS4,FLAGI       ATTENTION INTERRUPT?
         BO    READATTN            YES, TERMINATE READ
         C     R3,MAXADDR          IS IN-CORE TABLE ALMOST EXHAUSTED?
         BNH   MAKENTRY            NO, CREATE THIS ENTRY
         MVC   DIRHDG(55),STATHDG  YES, LOAD ERROR MESSAGE INTO HEADING
         MVC   DIRHDG(L'DIRRDMSG),DIRRDMSG
         B     EOPDSDIR            CORE FULL SO STOP READING
READATTN MVC   DIRHDG(55),STATHDG  LOAD ERROR MESSAGE INTO HEADING
         MVC   DIRHDG(9),INRPTMSG
         MVC   DIRHDG+9(L'DIRRDMSG-11),DIRRDMSG+11
         L     R1,CBPRM3           POINT TO BUFFER START
         MVI   0(R1),X'C5'         SUPPLY WCC TO SOUND THE BELL
         B     EOPDSDIR            ATTENTION HIT SO STOP READING
MAKENTRY IC    R5,11(,R4)          GET USER DATA HALFWORD COUNT
         SLL   R5,27               SHIFT OUT NON-COUNT BITS
         SRL   R5,26               CONVERT TO NUMBER OF USER BYTES
         LA    R5,12(,R5)          GET TOTAL BYTES USED BY ENTRY
         SR    R2,R5               UPDATE BYTES-TO-DO-IN-THIS-BLOCK
         BNP   READBLK             IF ZERO GET ANOTHER BLOCK
         LA    R4,0(R5,R4)         POINT TO NEXT MEMBER NAME
         B     NXTMEMBR
EOPDSDIR MVI   CLOSED,X'80'        CLOSE PDS DIRECTORY
         CLOSE ((R7)),MF=(E,CLOSED)
         CLC   DIRHDG(L'DIRRDMSG),DIRRDMSG   MEMBER TABLE EXHAUSTED?
         BE    POCONRET            YES, SKIP FURTHER DATA SETS
         ICM   R0,3,ARLRTRVD       ANY CONCATENATED JFCBS RETRIEVED?
         BNZ   POCONCAT            YES, PROCESS NEXT DATA SET
POCONRET CVD   R8,DOUBLE           GET NUMBER OF MEMBERS IN PDS
         LA    R1,DIRMEMCT+5       POINT TO LAST DIGIT
         EDMK  DIRMEMCT,DOUBLE+5   REPORT UP TO 99999 MEMBERS CORRECTLY
         BCTR  R1,0                POINT TO BEFORE FIRST DIGIT
         MVI   0(R1),C' '          TIDY UP HEADING
         LA    R1,BUFFSIZE         INITIALIZE REVCMPBF PARAMETER LIST
         ST    R1,CBPRM1           ADDRESS OF BUFFER LENGTH VARIABLE
         LA    R1,SCRNLNES
         ST    R1,CBPRM2           ADDRESS OF LINES-ON-SCREEN VARIABLE
         MVC   0(16,R3),LASTNAME   DENOTE END OF MEMBER LIST
         ST    R3,LASTADDR         SAVE ADDRESS OF LAST ENTRY
         LA    R3,16+7(,R3)        POINT PAST LAST USED DOUBLEWORD
         SRL   R3,3
         SLL   R3,3                ENSURE DOUBLEWORD BOUNDARY
         LR    R2,R3               ADDRESS OF UNUSED DYNAMIC AREA
         SR    R2,R13              DETERMINE SIZE OF USED DYNAMIC AREA
         LR    R1,R3               POINT TO START OF UNUSED DYN AREA
         L     R0,FREEMRG0         GET TOTAL SIZE OF DYNAMIC AREA
         AR    R0,R13              POINT PAST END OF DYNAMIC AREA
         SR    R0,R1               GET SIZE OF UNUSED DYNAMIC AREA
         BNP   AREAFULL            IF ZERO THEN BYPASS FREEMAIN
         FREEMAIN R,LV=(0),A=(1)   FREE UNUSED PORTION OF DYNAMIC AREA
         ST    R2,FREEMRG0         SAVE NEW SIZE OF DYNAREA
AREAFULL XC    SELMEMNM,SELMEMNM   CLEAR MEMBER NAME TO SEARCH FOR
         TM    STATUS,STNOMEM      ANY USEFUL MEMBER NOMINATED?
         BO    FORCETOP            NO
         MVC   SELMEMNM,$MEMBER    YES, LOAD MEMBER NAME TO SEARCH FOR
FORCETOP MVC   PUTCURSR,PRIMINIT   INITIALIZE CURSOR POSITIONER
         TM    STATUS,STPODIR      HAVE WE BEEN HERE BEFORE?
         BO    TESTSORT            YES, IN FULL SCREEN MODE
         STFSMODE ON,INITIAL=YES,NOEDIT=YES  GET INTO FULL SCREEN MODE
         OI    STATUS2,FSMODE      FLAG FULL SCREEN MODE
         OI    STATUS,STPODIR      FLAG MEMBER LIST MODE
TESTSORT TM    STATUS4,FLAGI       ATTENTION INTERRUPT?
         BO    FINDMEM             YES, DON'T PERFORM SORT
         TM    STATUS3,DATESORT
         BO    SORTDATE
         TM    STATUS3,SIZESORT
         BO    SORTSIZE
         TM    STATUS3,SSISORT
         BO    SORTSSI
         TM    STATUS3,TTRSORT
         BO    SORTTTR
         TM    STATUS3,USERSORT
         BO    SORTUSER
         ICM   R0,3,ARLRTRVD       ANY CONCATENATED JFCBS FETCHED?
         BNZ   SORTNAME            YES, SORT INTO COLLATING SEQUENCE
FINDMEM  LA    R3,DIRENTS-4092                                GYP93274
         LA    R3,4092(,R3)        POINT TO FIRST ENTRY       GYP93274
         OC    SELMEMNM,SELMEMNM   NON-ZERO MEMBER NAME TO LOCATE?
         BZ    THISMEM             NO, GO TO TOP
         TM    STATUS2,EDITED      SPF EDITED AND SAVED A MEMBER?
         BZ    TRYMEMNM            NO
         MVC   DIRHDG(55),STATHDG  YES, DISPLAY APPROPRIATE MESSAGE
         MVC   DIRHDG(L'SAVEDMSG),SAVEDMSG
         NI    STATUS2,255-EDITED  RESET EDITED AND SAVED FLAG
TRYMEMNM CLC   SELMEMNM,0(R3)      UP TO REQUIRED MEMBER?
         BE    THISMEM             YES, FOUND IT
         BH    NEXTMEM             NO, TRY NEXT ENTRY
         TM    STATUS3,SORTMODE    ENTRIES IN COLLATING SEQUENCE?
         BZ    PREVMEM             YES, PASSED IT, SO BACKUP ONE
         C     R3,LASTADDR         NO, REACHED END OF ENTRIES?
         BNL   NOTEXIST            YES, EXACT MEMBER NAME NOT THERE
NEXTMEM  AH    R3,14(,R3)          NOT YET, POINT TO NEXT ENTRY
         B     TRYMEMNM
NOTEXIST CLI   STATUS3,USERSORT    SORTED IN UPDATE USERID SEQUENCE?
         BNE   PUTNEMSG            NO, SHOW "NOT EXIST" MESSAGE
         LA    R3,DIRENTS-4092     YES                        GYP93274
         LA    R3,4092(,R3)        POINT TO FIRST ENTRY       GYP93274
TRYUSRID CLI   15(R3),44           SPFD STATISTICS ENTRY?
         BNE   PREVMEM             NO, SHOW PREVIOUS MEMBER AT TOP
         CLC   SELMEMNM(8),34(R3)  UP TO REQUIRED MEMBER?
         BE    THISMEM             YES, FOUND IT
         BL    PREVMEM             NO, PAST IT SO SHOW PREVIOUS MEMBER
         AH    R3,14(,R3)          NOT YET, POINT TO NEXT ENTRY
         B     TRYUSRID
PUTNEMSG MVC   DIRHDG(55),STATHDG  NO DIRECTORY ENTRIES IN PDS TO SORT
         MVC   DIRHDG(L'NOTEXMSG),NOTEXMSG
         L     R1,CBPRM3           POINT TO BUFFER START
         MVI   0(R1),X'C5'         SUPPLY WCC TO SOUND THE BELL
SAMEMEMS L     R3,TOPMEMAD         RESTORE ENTRY POINTER
         B     THISMEM             RESHOW WITHOUT MOVEMENT
PREVMEM  LA    R2,DIRENTS-4092                                GYP93274
         LA    R2,4092(,R2)        GET FIRST ENTRY ADDRESS    GYP93274
         CR    R2,R3               AT FIRST ENTRY?
         BE    THISMEM             YES, CAN'T GO BACK ONE
         LR    R2,R3               NO, POINT TO THIS ENTRY
         BCTR  R2,0                POINT TO LAST HALFWORD
         BCTR  R2,0                         OF PREVIOUS ENTRY
         SH    R3,0(,R2)           POINT TO PREVIOUS ENTRY
THISMEM  L     R1,SCRNLNES         GET NUMBER OF LINES ON SCREEN
         SH    R1,=H'3'            LESS THREE LINES FOR HEADINGS
         LA    R2,MONOMEMS         ASSUME MONOCHROME SCREEN IMAGE
         TM    STATUS5,X3270       REALLY IN COLOUR MODE?
         BZ    MONOISOK            NO, RIGHT FIRST TIME
         LA    R2,COLRMEMS         YES, GET SAME ADDRESS FOR COLOUR
MONOISOK ST    R3,TOPMEMAD         SAVE TOP MEMBER ENTRY ADDRESS
         XC    SELMEMNM,SELMEMNM   CLEAR MEMBER NAME IN READINESS
         SLR   R0,R0               CLEAR FOR INSERT CHARACTERS
LODMEMNM CLC   LASTNAME(14),0(R3)
         BE    EOMEMLST            CATER FOR END OF MEMBER LIST
         MVC   0(8,R2),MEMATLST
         TM    MYDSCB-44+84,X'C0'  IS IT FIXED OR VAR RECORD FORMAT?
         BNM   LOADMEMN            NO, SO CANNOT BE AN OFFLOAD LIBRARY
         TM    13(R3),X'40'        SELECTED FOR OFFLOAD?
         BZ    LOADMEMN            NO
         MVI   4(R2),X'E8'         MAKE IT HIGH INTENSITY
         MVI   7(R2),X'F2'         MAKE IT RED RATHER THAN PINK
LOADMEMN TM    STATUS5,X3270       USING 3270 EXTENSIONS?
         BZ    MEMATTRS            NO
         LA    R2,3(,R2)           YES, COUNT EXTRA ATTRIBUTE BYTES
MEMATTRS LA    R2,5(,R2)           POINT TO MEMBER DETAILS AREA
         MVC   0(8,R2),0(R3)       LOAD MEMBER NAME
         TR    0(8,R2),DIRXLATE    MAKE SCREEN BEHAVE PROPERLY
         MVI   8(R2),C' '
         MVC   9(68,R2),8(R2)      BLANK REST OF LINE
         TM    MYDSCB-44+84,X'C0'  IS IT UNDEFINED RECORD FORMAT?
         BNO   ALIASTST            NO, SO CANNOT BE A LOAD LIBRARY
         UNPK  27(7,R2),10(4,R3)   SHOW TTR IN HEX
         TR    27(6,R2),PODIRHEX-C'0'
         MVI   33(R2),C' '         ERASE RUBBISH
         CLI   15(R3),24           IMS FORMAT LIBRARY MEMBER?
         BE    PROGSIZE            YES, SHOW THE BYTE COUNT
         CLI   15(R3),30           IMS FORMAT LIBRARY MEMBER?
         BE    PROGSIZE            YES, SHOW THE BYTE COUNT
         CLI   15(R3),32           STANDARD LOAD MODULE ENTRY?
         BE    REALPGM             YES, USE IT
         CLI   15(R3),36           SSI LOAD MODULE ENTRY?
         BNE   ALIASTST            NO, CHECK FOR ALIAS
         UNPK  10(9,R2),30(5,R3)   YES, FORMAT THE SSI
         TR    10(8,R2),PODIRHEX-C'0'
         MVI   18(R2),C' '         ERASE RUBBISH
REALPGM  TM    27(R3),X'03'        TEST MEMBER ADDRESSING MODE
         BZ    FMTPGM              DEFAULT, NO AMODE SPECIFIED
         MVC   73(3,R2),=C'ANY'
         BO    FMTPGM              AMODE ANY SPECIFIED
         MVC   74(2,R2),=C'31'
         TM    27(R3),X'02'
         BO    FMTPGM              AMODE 31 SPECIFIED
         MVC   74(2,R2),=C'24'     AMODE 24 SPECIFIED
         B     FMTPGM
ALIASTST TM    13(R3),X'80'        IS THIS MEMBER AN ALIAS?
         BZ    MEMNOTAL            NO
         CLI   15(R3),40           ALIAS WITH LOAD MODULE DATA?
         BNE   ALIASMEM            NO, BUT IT IS STILL AN ALIAS
         MVC   34(8,R2),30(R3)     YES, LOAD ORIGINAL REAL MEMBER NAME
         TR    34(8,R2),DIRXLATE   MAKE SCREEN BEHAVE PROPERLY
         TM    27(R3),X'0C'        TEST ALIAS ADDRESSING MODE
         BZ    FMTPGM              DEFAULT, NO AMODE SPECIFIED
         MVC   73(3,R2),=C'ANY'
         BO    FMTPGM              AMODE ANY SPECIFIED
         MVC   74(2,R2),=C'31'
         TM    27(R3),X'08'
         BO    FMTPGM              AMODE 31 SPECIFIED
         MVC   74(2,R2),=C'24'     AMODE 24 SPECIFIED
FMTPGM   TM    26(R3),X'41'        OSIV/F4 AE PROGRAM?
         BZ    NOTAEPGM            NO, DO NOT OVERWRITE AMODE DETAILS
         MVC   73(3,R2),=C'AE '    YES, INDICATE THIS
NOTAEPGM CLI   15(R3),36           SSI LOAD MODULE ENTRY?
         BE    HEXSIZE             YES, SHOW SSI, NOT DECIMAL SIZE
PROGSIZE SLR   R6,R6               CLEAR FOR INSERT
         ICM   R6,7,18(R3)         GET LOAD MODULE SIZE
         LA    R6,1023(,R6)        ROUND UP TO NEXT KILOBYTE
         SRL   R6,10               DIVIDE BY 1024
         CVD   R6,DOUBLE
         MVC   12(6,R2),ED5
         ED    12(6,R2),DOUBLE+5
         MVI   18(R2),C'K'
HEXSIZE  UNPK  20(7,R2),18(4,R3)   SHOW SIZE IN HEX
         TR    20(6,R2),PODIRHEX-C'0'
         MVI   26(R2),C' '         ERASE RUBBISH
         CLI   15(R3),24           IMS FORMAT LIBRARY MEMBER?
         BE    MEMLODED            YES, THAT IS ALL THE DATA TO SHOW
         CLI   15(R3),30           IMS FORMAT LIBRARY MEMBER?
         BE    CREATIME            YES, SHOW CREATION TIMESTAMP
         TM    26(R3),X'80'        PROCESSED BY OS/VS LINKAGE EDITOR?
         BZ    DONEAUTH            NO, OS LOAD MODULE
         MVC   43(2,R2),REALUNKN   DENOTE INVALID APF DATA
         TM    26(R3),X'08'        IS APF DATA VALID?
         BZ    DONEAUTH            NO
         CLI   28(R3),0            IS APF DATA LENGTH ZERO?
         BE    DONEAUTH            YES, INVALID
         UNPK  43(3,R2),29(2,R3)   NO, SHOW AUTHORIZATION CODE IN HEX
         TR    43(2,R2),PODIRHEX-C'0'
         MVI   45(R2),C' '         ERASE RUBBISH
DONEAUTH MVC   46(2,R2),=C'DC'     DOWNWARD COMPATIBLE
         TM    17(R3),X'80'
         BZ    *+10
         MVC   46(2,R2),=C'FO'     F-LEVEL LINKAGE EDITOR ONLY
         TM    16(R3),X'02'
         BO    *+10
         MVC   49(2,R2),=C'NX'     NOT EXECUTABLE
         TM    16(R3),X'08'
         BZ    *+10
         MVC   52(2,R2),=C'OL'     ONLY LOADABLE
         TM    16(R3),X'20'
         BZ    *+10
         MVC   55(2,R2),=C'OV'     OVERLAY STRUCTURE
         TM    17(R3),X'01'
         BZ    *+10
         MVC   58(2,R2),=C'RF'     REFRESHABLE
         TM    16(R3),X'80'
         BZ    *+10
         MVC   61(2,R2),=C'RN'     REENTERABLE
         TM    16(R3),X'40'
         BZ    *+10
         MVC   64(2,R2),=C'RU'     REUSABLE
         TM    16(R3),X'04'
         BZ    *+10
         MVC   67(2,R2),=C'SC'     SCATTER FORMAT
         TM    17(R3),X'04'
         BZ    *+10
         MVC   70(2,R2),=C'TS'     TEST SYMBOL CARDS
         TM    27(R3),X'10'        RESIDENCE MODE ANY?
         BZ    MEMLODED            NO, END OF LOAD MODULE DATA CODE
         BCTR  R2,0                YES, POINT TO ATTRIBUTE BYTE
         MVI   0(R2),X'E8'         MAKE IT HIGH INTENSITY
         TM    STATUS5,X3270       USING 3270 EXTENSIONS?
         BZ    DONERMOD            NO
         SH    R2,=H'3'            YES, SUBTRACT 3 FOR ATTR BYTE
         MVI   0(R2),X'E8'         MAKE IT HIGH INTENSITY
         LA    R2,3(,R2)           POINT TO COLOUR BYTE
         MVI   0(R2),X'F2'         MAKE IT RED RATHER THAN PINK
DONERMOD LA    R2,1(,R2)           RESTORE POINTER
         B     MEMLODED            END OF LOAD MODULE DATA CODE
MEMNOTAL CLI   15(R3),44           DOES MEMBER HAVE SPFD STATISTICS?
         BE    SHOWTTR             YES, FORMAT THEM
         TM    MYDSCB-44+84,X'C0'  IS IT UNDEFINED RECORD FORMAT?
         BO    USERDATA            YES, ALREADY FORMATTED THE TTR
SHOWTTR  UNPK  12(7,R2),10(4,R3)   SHOW TTR IN HEX
         TR    12(6,R2),PODIRHEX-C'0'
         MVI   18(R2),C' '         ERASE RUBBISH
         CLI   9(R3),0             MEMBER FROM CONCATENATION?
         BE    USERDATA            NO, PERFORM COMMON USERDATA LOGIC
         UNPK  9(3,R2),9(2,R3)     YES, SHOW RELATIVE NUMBER IN HEX
         TR    9(2,R2),PODIRHEX-C'0'
         MVI   11(R2),C'+'         ERASE RUBBISH AND SHOW CONCAT'N
         B     USERDATA            PERFORM COMMON USERDATA LOGIC
ALIASMEM MVC   11(5,R2),=C'ALIAS'  NO, DENOTE ALIAS
USERDATA TM    13(R3),B'00011111'  DOES THE MEMBER HAVE ANY USER DATA?
         BZ    MEMLODED            NO, NOTHING ELSE TO FORMAT
         CLI   15(R3),44           DOES MEMBER HAVE SPFD STATISTICS?
         BE    SPFDMEM             YES, FORMAT THEM
         CLI   15(R3),22           DOES MEMBER HAVE SSI?
         BE    SSIMEM              YES, DISPLAY IT
         MVC   DOUBLE(1),13(R3)    NO, GET USER DATA LENGTH CODE BYTE
         NI    DOUBLE,B'00011111'  TURN OFF ALIAS AND TTR COUNT BITS
         IC    R0,DOUBLE           LOAD USER DATA HALFWORD COUNT
         CVD   R0,DOUBLE
         MVC   35(4,R2),ED5
         ED    35(4,R2),DOUBLE+6   DISPLAY (NON-ZERO) HALFWORD COUNT
         MVC   40(L'HWCNTMSG,R2),HWCNTMSG
         B     MEMLODED            NOTHING ELSE TO FORMAT
SSIMEM   MVC   37(4,R2),SSILABEL
         UNPK  42(9,R2),16(5,R3)   SSI IS FOUR BYTES LONG
         TR    42(8,R2),PODIRHEX-C'0'
         MVI   50(R2),C' '         ERASE RUBBISH
         TM    13(R3),B'00011110'  WAS THE USER DATA HALFWORD COUNT 1?
         BNZ   MEMLODED            NO, MUST HAVE BEEN 2 SO NORMAL SSI
         MVC   46(4,R2),50(R2)     YES, ERASE DATA OF SECOND HALFWORD
         B     MEMLODED            NOTHING ELSE TO FORMAT
SPFDMEM  IC    R0,16(,R3)          SHOW VERSION NUMBER
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  21(2,R2),DOUBLE+6(2)
         MVI   23(R2),C'.'
         IC    R0,17(,R3)          SHOW MODIFICATION NUMBER
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  24(2,R2),DOUBLE+6(2)
         ICM   R4,B'1111',18(R3)   GET DATE FULLWORD
         BAL   R14,SPFDATE         CONVERT TO YY/MM/DD
         MVC   27(8,R2),DOUBLE     SHOW CREATION DATE
         ICM   R4,B'1111',22(R3)   GET DATE FULLWORD
         BAL   R14,SPFDATE         CONVERT TO YY/MM/DD
         MVC   36(8,R2),DOUBLE     SHOW LAST MODIFIED DATE
         UNPK  45(3,R2),26(2,R3)   SHOW LAST MODIFIED HOURS
         MVI   47(R2),C':'
         UNPK  48(3,R2),27(2,R3)   SHOW LAST MODIFIED MINUTES
         LA    R5,50(,R2)          LOAD DISPLAY LINE POINTER
         LA    R6,28(,R3)          LOAD USER DATA POINTER
         LA    R7,3                DISPLAY SIZE, INIT, AND MOD
         SLR   R8,R8               HANDLE COUNTS OVER 32767
ED5LOOP  MVC   0(6,R5),ED5         LOAD EDIT PATTERN
         ICM   R8,3,0(R6)          GET RECORD COUNT TO BE DISPLAYED
         CVD   R8,DOUBLE           MAKE IT PACKED DECIMAL
         ED    0(6,R5),DOUBLE+5    MAKE IT NUMERIC CHARACTERS
         LA    R5,6(,R5)           POINT TO NEXT DISPLAY AREA
         LA    R6,2(,R6)           POINT TO NEXT RECORD COUNTER
         BCT   R7,ED5LOOP
         MVC   69(8,R2),34(R3)     SHOW USERID
         TR    69(8,R2),DIRXLATE   MAKE SCREEN BEHAVE PROPERLY
         CLI   16(R3),100          PHONY VERSION NUMBER FOR IMS?
         BNE   MEMLODED            NO, GENUINE STATS
         CLI   69(R2),C'('         AS EXPECTED?
         BNE   MEMLODED            NO
         CLI   76(R2),C')'         AS EXPECTED?
         BNE   MEMLODED            NO
         CLI   17(R3),5            AS EXPECTED?
         BH    MEMLODED            NO
         IC    R7,17(,R3)          GET REFERAL MEMBER TYPE BYTE
         SLL   R7,2                MULTIPLY BY 4 TO GET INDEX
         LA    R7,RFRLTYPE(R7)     POINT TO DESCRIPTION
         MVC   64(4,R2),0(R7)      SUPPLY REFERAL MEMBER TYPE TEXT
         CLI   17(R3),3            FORMAT?
         BE    CLRREFID            YES, DON'T SHOW MEMBER NAME AGAIN
         CLI   70(R2),C' '         BLANKS?
         BNE   MEMLODED            NO, DISPLAY USEFUL INFORMATION
CLRREFID MVC   69(8,R2),68(R2)     YES, BLANK OUT USELESS "USERID"
MEMLODED LA    R2,77(,R2)          POINT TO NEXT DETAIL SCREEN LINE
         AH    R3,14(,R3)          POINT TO NEXT MEMBER NAME
         BCT   R1,LODMEMNM
         B     CMPRSDIR
CREATIME ICM   R4,B'1111',22(R3)   GET DATE FULLWORD
         BAL   R14,SPFDATE         CONVERT TO YY/MM/DD
         MVC   46(8,R2),DOUBLE     SHOW LAST MODIFIED DATE
         UNPK  55(3,R2),26(2,R3)   SHOW LAST MODIFIED HOURS
         MVI   57(R2),C':'
         UNPK  58(3,R2),27(2,R3)   SHOW LAST MODIFIED MINUTES
         MVI   60(R2),C' '         ERASE GARBAGE
         TM    13(R3),14           ACBLIB MEMBER?
         BNO   MEMLODED            NO, THAT IS ALL THE DATA TO SHOW
         ICM   R4,8,21(R3)         YES, LOAD FLAG BYTE
         SRL   R4,4                CONVERT
         STCM  R4,8,DOUBLE              B'00XX0XXX'
         SLL   R4,1                     TO
         ICM   R4,8,DOUBLE              B'XXXXX000'
         SLL   R4,6
         LA    R0,5                MAXIMUM OF FIVE BITS TO TEST
         LA    R5,ACBFLAGS         POINT TO FIRST DISPLAY FLAG
ACBFLGLP LTR   R4,R4               IS SIGN BIT ON?
         BM    ACBFLGOK            YES
         SLL   R4,1                NO, SHIFT IT OUT
         LA    R5,4(,R5)           POINT TO NEXT DISPLAY FLAG
         BCT   R0,ACBFLGLP         TEST NEXT BIT
ACBFLGOK MVC   61(4,R2),0(R5)      DISPLAY ACBLIB MEMBER TYPE
         B     MEMLODED            THAT IS ALL THE DATA TO SHOW
EOMEMLST MVC   0(DIRMSGLN,R2),EODIRMSG
         TM    STATUS5,X3270       IS THIS A COLOUR SCREEN?
         BZ    YELLOWOK            NO, WE'VE DONE THE RIGHT THING
         MVC   0(DIRMSG2L,R2),EODIRYEL
         LA    R2,DIRMSG2L-DIRMSGLN(,R2)
YELLOWOK LA    R2,DIRMSGLN(,R2)    POINT PAST **END**
         MVI   0(R2),C' '
         MVC   1(69,R2),0(R2)      BLANK THE REST OF THE LINE
         TM    MYDSCB-44+84,X'C0'  IS IT UNDEFINED RECORD FORMAT?
         BNO   SPFDEND             NO, SO CANNOT BE A LOAD LIBRARY
         ICM   R1,B'1111',TOTPGMSZ GET TOTAL OF REAL LOAD MODULE SIZES
         BZ    ZEROSIZE            ZERO SO LEAVE IT BLANK
         LA    R0,1023
         ALR   R1,R0               ROUND UP TO NEXT KILOBYTE
         SRL   R1,10               DIVIDE BY 1024
         CVD   R1,DOUBLE
         MVC   1(10,R2),ED9
         ED    1(10,R2),DOUBLE+3
         MVI   11(R2),C'K'         DENOTE KILOBYTES
         UNPK  13(7,R2),TOTPGMSZ+1 SHOW SIZE IN HEX
         TR    13(6,R2),PODIRHEX-C'0'
         MVI   19(R2),C' '         ERASE RUBBISH
ZEROSIZE ICM   R0,3,ARLRTRVD       ANY CONCATENATED JFCBS FETCHED?
         BNZ   MOVABLOK            YES, SUPPRESS DSCB DETAILS
         UNPK  20(7,R2),MYDSCB-44+98(4) DS1LSTAR
         TR    20(6,R2),PODIRHEX-C'0'
         MVI   26(R2),C' '         ERASE RUBBISH
         TM    MYDSCB-44+78,X'08'  IS MEMBER LIST FOR A PDSE?
         BZ    PDSEUOK             NO
         MVC   27(4,R2),=C'PDSE'   YES, FLAG THIS
PDSEUOK  TM    MYDSCB-44+93,X'02'  IS THE DATA SET MODIFIED BIT ON?
         BZ    OKMODBIT            NO, DISPLAY IS CORRECT
         MVC   39(8,R2),MODIFIED   YES, INDICATE THIS
OKMODBIT TM    MYDSCB-44+82,X'01'  IS THE DATA SET UNMOVEABLE?
         BZ    MOVABLOK            NO, DISPLAY IS CORRECT
         MVC   49(10,R2),UNMOVABL  YES, INDICATE THIS
MOVABLOK LA    R2,59(,R2)          POINT PAST PROGRAM END STATISTICS
         B     DONENDST
SPFDEND  ICM   R1,B'1111',TOTSPFSZ GET TOTAL OF REAL SPF EDIT LINES
         BZ    ZEROEDIT            ZERO SO LEAVE IT BLANK
         CVD   R1,DOUBLE
         MVC   39(10,R2),ED9
         ED    39(10,R2),DOUBLE+3
ZEROEDIT ICM   R0,3,ARLRTRVD       ANY CONCATENATED JFCBS FETCHED?
         BNZ   MODBITOK            YES, SUPPRESS DSCB DETAILS
         UNPK  5(7,R2),MYDSCB-44+98(4)  DS1LSTAR
         TR    5(6,R2),PODIRHEX-C'0'
         MVI   11(R2),C' '         ERASE RUBBISH
         TM    MYDSCB-44+78,X'08'  IS MEMBER LIST FOR A PDSE?
         BZ    PDSEOKAY            NO
         MVC   12(4,R2),=C'PDSE'   YES, FLAG THIS
PDSEOKAY SLR   R4,R4               DISPLAY CREATION DATE FROM DS1CREDT
         IC    R4,MYDSCB-44+53     GET THE CREATION YEAR IN BINARY
         LA    R4,1900(,R4)        ADD ORIGIN FOR 1900-2155 SUPPORT
         CVD   R4,DOUBLE           LAST 2 YEAR DIGITS OVERWRITTEN LATER
         UNPK  18(4,R2),DOUBLE+5(3)    DISPLAY 4-DIGIT CREATION YEAR
         L     R0,DOUBLE+4         GET THE DECIMAL YEAR
         SRL   R0,4                SHIFT OUT SIGN
         SLL   R0,16               PUT INTO TOP HALFWORD
         ICM   R4,3,MYDSCB-44+54   GET BINARY CREATION JULIAN DAY
         CVD   R4,DOUBLE
         L     R4,DOUBLE+4         GET DECIMAL CREATION JULIAN DAY
         OR    R4,R0               GET YYYYDDD+
         BAL   R14,SPFDATE         CONVERT TO YY/MM/DD
         MVC   20(8,R2),DOUBLE     DISPLAY CREATION YYYY/MM/DD
         CLI   MYDSCB-44+49,1      ASM2 OR DMS UPDATE DATE?
         BH    NOTASM2             NO
         BL    *+12                YES
         CLI   MYDSCB-44+50,110    (=366-256)
         BH    NOTASM2             NO
         SLR   R4,R4               DISPLAY ASM2-MAINTAINED UPDATE DATE
         IC    R4,MYDSCB-44+48     GET THE UPDATE YEAR IN BINARY
         CVD   R4,DOUBLE
         L     R0,DOUBLE+4         GET THE DECIMAL YEAR
         SRL   R0,4                SHIFT OUT SIGN
         SLL   R0,16               PUT INTO TOP HALFWORD
         ICM   R4,3,MYDSCB-44+49   GET BINARY UPDATE JULIAN DAY
         CVD   R4,DOUBLE
         L     R4,DOUBLE+4         GET DECIMAL UPDATE JULIAN DAY
         OR    R4,R0               GET 00YYDDD+
         BAL   R14,SPFDATE         CONVERT TO YY/MM/DD
         MVC   29(8,R2),DOUBLE     DISPLAY UPDATE YY/MM/DD
         B     SHOWOSCD            SHOW SYSCODE OR ASM2/DMS UPDATE JOB
NOTASM2  MVI   28(R2),C'-'         INDICATE NEXT DATUM IS RELATED
         MVC   29(6,R2),MYDSCB-44+45   SHOW CREATION VOLUME SERIAL
SHOWOSCD MVC   50(13,R2),MYDSCB-44+62  SHOW CREATION SYSTEM/COMPONENT
         TR    29(34,R2),DIRXLATE  HANDLE RUBBISH IN DS1DSSN/DS1SYSCD
         TM    MYDSCB-44+93,X'02'  IS THE DATA SET MODIFIED BIT ON?
         BZ    MODBITOK            NO, DISPLAY IS CORRECT
         MVC   1(3,R2),MODIFIED    YES, INDICATE THIS
MODBITOK LA    R2,63(,R2)          POINT PAST PROGRAM END STATISTICS
DONENDST BCTR  R2,0                POINT TO PREVIOUS BYTE
         CLI   0(R2),C' '          UNNECESSARY TRAILING BLANK?
         BE    DONENDST            YES, CHOP IT OFF THE DATA STREAM
         MVC   1(4,R2),BLNKREST    NO, BLANK THE REST OF THE SCREEN
         LA    R2,5(,R2)           POINT PAST END OF DATA STREAM
CMPRSDIR L     R1,CBPRM3           POINT TO START OF DATA STREAM
         SR    R2,R1               COMPUTE SIZE OF SCREEN
         ST    R2,BUFFSIZE
         LA    R1,CBPRM1           POINT TO PARAMETER LIST
         L     R15,=V(REVCMPBF)
         BALR  R14,R15             CALL BUFFER COMPRESS ROUTINE
DSPLYDIR L     R2,BUFFSIZE         GET COMPRESSED BUFFER LENGTH
         L     R4,CBPRM3           GET BUFFER ADDRESS
         AR    R2,R4               POINT PAST END OF COMPRESSED DATA
         MVC   0(4,R2),PUTCURSR    TACK ON CURSOR POSITION
         LA    R1,X'03'            LOAD FULLSCREEN TPUT FLAGS
         SLL   R1,24               SHIFT TO TOP BYTE
         LA    R0,4(,R2)           GET END OF DISPLAY DATA
         OR    R1,R4               PUT INTO CORRECT REGISTER
         SR    R0,R4               GET LENGTH OF DISPLAY DATA
         NI    STATUS4,255-FLAGI   CLEAR ATTENTION FLAG
         TPUT  (1),(0),R           DISPLAY MEMBER SELECTION LIST
DIRTGET  XC    DIRINPUT,DIRINPUT   CLEAR BUFFER FOR INPUT
         LA    R1,X'81'            LOAD TGET FLAGS
         SLL   R1,24               SHIFT TO TOP BYTE
         LA    R0,DIRINPUT         GET INPUT BUFFER ADDRESS
         OR    R1,R0               PUT INTO CORRECT REGISTER
         LA    R0,L'DIRINPUT       GET MAXIMUM INPUT LENGTH
         TGET  (1),(0),R           GET SELECTION
         CLI   DIRINPUT,X'88'      QUERY RESPONSE?
         BE    DIRTGET             YES, SHOULD NOT HAPPEN HERE
         LA    R0,3                GET READ HEADER LENGTH
         CR    R0,R1               PA1, PA2, PA3 OR CLEAR?
         BH    DSPLYDIR            YES, RESHOW SCREEN
         ICM   R0,3,DIRINPUT+1     LOAD ACTUAL CURSOR BUFFER ADDRESS
         TM    DIRINPUT+1,X'40'    12-BIT FORMAT CURSOR ADDRESS?
         BZ    DIRCSRLC            NO, 14-BIT FORMAT WAS SUPPLIED
         SLL   R0,2                SHIFT OUT LOW-ORDER "PARITY" BITS
         ICM   R0,2,DIRINPUT+1     RE-LOAD HIGH-ORDER BYTE
         SLL   R0,18               SHIFT OUT HIGH-ORDER "PARITY" BITS
         SRL   R0,20               CONVERT TO 12-BIT BINARY NUMBER
DIRCSRLC STH   R0,CSRLOCN          REMEMBER LOCATION FOR LATER
         LA    R0,X'0F'            RESET "UNINTERESTING" BITS IN TGET
         NR    R15,R0                 RC - SO X'1C' MAPS TO X'C'
         CH    R15,=H'12'          WAS THE BUFFER TOO SMALL?
         BNE   DIRINQOK            NO, SKIP A SUPERVISOR CALL
         TCLEARQ INPUT             YES, FLUSH EXTRA INPUT
DIRINQOK MVC   DIRHDG(55),STATHDG  RE-INITIALIZE HEADING
         L     R1,CBPRM3           POINT TO BUFFER START
         MVI   0(R1),X'C1'         RE-INITIALIZE WCC TO TURN BELL OFF
         ICM   R0,3,CONCTOPN       ANY CONCATENATED DIRECTORIES READ?
         BZ    POHDGOK1            NO, SUPPLY DATA SET IN HEADING
         LH    R1,$DDNAML          GET DATA DEFINITION NAME LENGTH
         EX    R1,GTPDDNAM         RE-LOAD DDNAME INTO HEADING
         MVC   DIRHDG(L'REVDDMSG),REVDDMSG
         B     POHDGOK2
POHDGOK1 LH    R1,$DSNAME          GET DATA SET NAME LENGTH
         EX    R1,GTPDSNAM         RE-LOAD DSN INTO HEADING
POHDGOK2 MVC   PUTCURSR,PRIMINIT       AND PUT CURSOR AT HOME
         TM    STATUS2,EDITED      PROMPTING FOR MEMBER NAME?
         BO    GETPRIME            YES, IGNORE PFK
         NI    DIRINPUT,X'0F'      GET PFK NUMBER
         CLI   DIRINPUT,1          TOP?
         BE    DIRTOP              YES
         CLI   DIRINPUT,2          BOTTOM?
         BE    DIRBOTOM            YES
         CLI   DIRINPUT,3          END?
         BE    DIREXIT             YES
         CLI   DIRINPUT,4          SORT BY MODIFICATION TIMESTAMP?
         BE    SORTDATE            YES
         CLI   DIRINPUT,5          REPORT THE NUMBER OF BLOCKS READ?
         BE    PUTBCNTR            YES
         CLI   DIRINPUT,6          SORT INTO COLLATING SEQUENCE?
         BE    SORTNAME            YES
         CLI   DIRINPUT,7          SCROLL UP?
         BE    DIRUPCMD            YES
         CLI   DIRINPUT,8          SCROLL DOWN?
         BE    DIRDNCMD            YES
         CLI   DIRINPUT,9          SORT INTO DECREASING SIZE SEQUENCE?
         BE    SORTSIZE            YES
         CLI   DIRINPUT,10         SORT INTO PHYSICAL SEQUENCE?
         BE    SORTTTR             YES
         CLI   DIRINPUT,11         SORT INTO USERID COLLATING SEQUENCE?
         BE    SORTUSER            YES
         CLI   DIRINPUT,12         SORT BY SSI/VV.MM?
         BE    SORTSSI             YES
         BH    WASENTER            NO, INVALID KEY?  NO, IT WAS ENTER
         MVC   DIRHDG(55),STATHDG  YES, LOAD ERROR MESSAGE INTO HEADING
         MVC   DIRHDG(L'INVPFMSG),INVPFMSG
BELDSPLY L     R1,CBPRM3           POINT TO BUFFER START
         MVI   0(R1),X'C5'         SUPPLY WCC TO SOUND THE BELL
         B     DSPLYDIR
PUTBCNTR MVC   DIRHDG(55),STATHDG  LOAD MESSAGE INTO HEADING
         MVC   DIRHDG(L'ED5+L'BLKSREAD),ED5 + BLKSREAD
         MVI   DIRHDG,C'-'
         L     R1,BLKREADS         GET READ (OR READ GET) COUNTER
         CVD   R1,DOUBLE
         LA    R1,DIRHDG+L'ED5-1
         EDMK  DIRHDG(L'ED5),DOUBLE+5
         BCTR  R1,0                POINT TO BEFORE FIRST DIGIT
         MVI   0(R1),C' '
         B     DSPLYDIR
WASENTER CLI   DIRINPUT+3,X'11'    SBA?
         BNE   DSPLYDIR            NO, NULL OR FUNNY INPUT
GETPRIME LA    R1,DIRINPUT+3       YES, POINT TO IT
         CLC   1(2,R1),PRIMADDR    PRIMARY INPUT AREA USED?
         BNE   SELCDCHK            NO, CHECK MEMBER SELECTION CODE
         LA    R5,8                GET MAXIMUM MEMBER NAME LENGTH
         LA    R1,DIRINPUT+6       STARTING POSITION FOR SOURCE
         LA    R7,DOUBLE           STARTING POSITION FOR TARGET
         XC    DOUBLE,DOUBLE       CLEAR ANY PREVIOUS NAME
SBACHECK CLI   0(R1),X'11'         SBA FOUND?
         BE    FOLDWORK            YES
         MVC   0(1,R7),0(R1)       LOAD A CHARACTER
         LA    R7,1(,R7)           POINT TO TARGET NEXT BYTE
         LA    R1,1(,R1)           POINT TO SOURCE NEXT BYTE
         BCT   R5,SBACHECK               AND LOOP
FOLDWORK OC    DOUBLE(8),=CL8' '   CONVERT TEXT TO UPPER CASE
         CLC   DOUBLE(8),=CL8' '   BLANK INPUT?
         BNE   LEFTJUST            NO, PROCESS IT
         TM    STATUS2,EDITED      PROMPTING FOR MEMBER NAME?
         BO    EDITMEM0            YES, EDIT REQUEST NOW CANCELLED
         CLI   0(R1),X'11'         YES, SBA FOUND?
         BNE   DSPLYDIR            NO, RESHOW SCREEN
         B     SELCDCHK            YES, CHECK MEMBER SELECTION CODE
EDITMEM0 MVC   DIRHDG(55),STATHDG  NO, LOAD ERROR MESSAGE INTO HEADING
         MVC   DIRHDG(L'EDIT0MSG),EDIT0MSG
         NI    STATUS2,255-EDITED  RESET MEMBER EDIT PROMPT FLAG
         B     BELDSPLY            GO RING THE BELL
LEFTJUST CLI   DOUBLE,C' '         FIRST CHARACTER BLANK?
         BNE   GOTPRIME            NO, HAVE PRIMARY INPUT FIELD AT LAST
         MVC   DOUBLE(7),DOUBLE+1
         MVI   DOUBLE+7,C' '       SHIFT LEFT ONE BYTE AND ADD A BLANK
         B     LEFTJUST            CHECK FOR ANOTHER LEADING BLANK
GOTPRIME TM    STATUS2,EDITED      PROMPTING FOR MEMBER NAME?
         BZ    USEPRIME            NO, PROCESS PRIMARY INPUT AS USUAL
         NI    STATUS2,255-EDITED  YES, RESET MEMBER EDIT PROMPT FLAG
         MVC   $MEMBER,DOUBLE      LOAD MEMBER NAME TO EDIT
         MVC   DIRHDG(55),STATHDG  RESET HEADING FOR RETURN FROM EDIT
         XC    $CONCAT,$CONCAT     USE FIRST DATA SET IN CONCATENATION
*NO-HL   LA    R1,=C'=EDITMEM'-3   POINT TO INDICATOR FOR REVEDIT
         LA    R1,=C'EDITMEM'    ONLY HAVE PLAIN OLD          GYP93274
         SH    R1,=H'3'          H ASSEMBLER                  GYP93274
         B     ISPFISOK            GO CALL REVEDIT
USEPRIME MVC   SELMEMNM(8),DOUBLE  LOAD MEMBER NAME TO SEARCH FOR
         CLC   DOUBLE,=C'=OFFLOAD' EXPLICIT OFFLOAD REQUEST?
         BE    OFFLDCHK            YES, CHECK ENVIRONMENT
         LA    R1,DIRINPUT+3       POINT TO PRIMARY INPUT FOR EDITCHEK
         CLC   DOUBLE,=C'=EDITMEM' REQUEST TO NOMINATE MEMBER TO EDIT?
         BE    EDITCHEK            YES, SEE IF EDIT IS ALLOWED
         CLC   DOUBLE,=C'=REFRESH' EXPLICIT DIRECTORY REFRESH REQUEST?
         BNE   FINDMEM             NO, GO SEARCH FOR THE MEMBER NAME
         L     1,TOPMEMAD          YES, POINT TO CURRENT TOP MEMBER
         MVC   $MEMBER(10),0(R1)   REMEMBER IT
         B     RFRSHOBT            PERFORM DIRECTORY REFRESH
         SPACE
         TM    STATUS2,EDITED      PROMPTING FOR MEMBER NAME?
         BO    GETPRIME            YES, IGNORE PFK
SELCDCHK TM    STATUS2,EDITED      PROMPTING FOR MEMBER NAME?
         BO    EDITMEM0            YES, EDIT REQUEST NOW CANCELLED
         CLI   3(R1),X'11'         ANOTHER SBA CODE?
         BE    NULLSEL             YES
         OI    3(R1),C' '          FOLD SELECTION CODE TO UPPER CASE
         CLI   3(R1),C'S'          CORRECT SELECTION CODE FOR REVIEW?
         BE    SELCODOK            YES
         CLI   3(R1),C'B'          CORRECT SELECTION CODE FOR BROWSE?
         BE    SELCODOK            YES
         CLI   3(R1),C'E'          CORRECT SELECTION CODE FOR EDIT?
         BE    SELCODOK            YES
         CLI   3(R1),C'O'          CORRECT SELECTION CODE FOR OFFLOAD?
         BE    SELCODOK            YES
         CLI   3(R1),C'R'          CORRECT SELECTION CODE FOR RESET?
         BE    SELCODOK            YES
         CLI   3(R1),C' '          BLANK CODE?
         BE    BLANKSEL            YES
         MVC   DIRHDG(55),STATHDG  NO, LOAD ERROR MESSAGE INTO HEADING
         MVC   DIRHDG(L'INVCDMSG),INVCDMSG
         MVC   PUTCURSR+1(2),1(R1) POINT TO WHERE OFFENDING CODE WAS
         B     BELDSPLY            GO RING THE BELL
OFFDSNBK LH    R15,$DSNAME         RESTORE DATA SET NAME INTO HEADING
         EX    R15,GTPDSNAM          AFTER 'O' AND 'R' PROCESSING
BLANKSEL CLI   4(R1),X'11'         DOES ANOTHER SELECTION FOLLOW?
         BNE   SAMEMEMS            NO, RESHOW SAME LIST WITH LATEST
         LA    R1,4(,R1)           YES, POINT TO IT
         B     SELCDCHK            PROCESS IT
NULLSEL  LA    R1,3(,R1)           YES, POINT TO IT
         B     SELCDCHK            PROCESS IT
         SPACE
DIRTOP   LA    R3,DIRENTS-4092                                GYP93274
         LA    R3,4092(,R3)        POINT TO FIRST ENTRY       GYP93274
         B     THISMEM
         SPACE
DIRBOTOM L     R3,LASTADDR         POINT TO **END**
         LA    R3,14(,R3)          POINT TO **END**'S LENGTH INDICATOR
         L     R1,SCRNLNES         GET NUMBER OF LINES ON SCREEN
         SH    R1,=H'3'            LESS THREE LINES FOR HEADINGS
         B     DIRCLIMB                  AND SCROLL UP ONE PAGE
         SPACE
DIRUPCMD L     R3,TOPMEMAD         POINT TO CURRENT TOP MEMBER NAME
         BCTR  R3,0                POINT TO LENGTH OF PREVIOUS ENTRY
         BCTR  R3,0
         TM    STATUS4,CSRSW       CURSOR SCROLLING ACTIVE?
         BNO   DIRUPTST            NO
         LH    R1,CSRLOCN          GET CURSOR LOCATION
         SLR   R0,R0
         LA    R14,80              GET BYTES PER SCREEN LINE
         DR    R0,R14              DIVIDE SCREEN ADDR BY 80 TO GET LINE
         BCTR  R1,0
         BCTR  R1,0
         LTR   R0,R1
         BNP   DIRUPTST            UP A PAGE IF CURSOR NOT LOW ENOUGH
         L     R1,SCRNLNES         GET LINES ON SCREEN
         SR    R1,R0               GET LINES TO SCROLL UP
         SH    R1,=H'3'            LESS THREE LINES FOR HEADINGS
         B     DIRCLIMB            USE IT
DIRUPTST L     R1,SCRNLNES         GET NUMBER OF LINES ON SCREEN
         SH    R1,=H'3'            LESS THREE LINES FOR HEADINGS
         TM    STATUS4,PGSW        FULL PAGE SCROLLING?
         BO    DIRCLIMB            YES
         SRL   R1,1                NO, HALVE IT
         TM    STATUS4,HFSW        HALF PAGE SCROLLING?
         BO    DIRCLIMB            YES
         L     R1,SCROLL           NO, LOAD SCROLL AMOUNT
DIRCLIMB LA    R2,DIRENTS-4092                                GYP93274
         LA    R2,4092(,R2)        POINT TO FIRST ENTRY       GYP93274
UPONEMEM CR    R3,R2               POINTING TO BEFORE FIRST ENTRY?
         BL    FNDUPMEM            YES, USE FIRST ENTRY
         SH    R3,0(,R3)           NO, BACK UP ONE ENTRY
         BCT   R1,UPONEMEM
FNDUPMEM LA    R3,2(,R3)           POINT TO START OF ENTRY
         B     THISMEM
         SPACE
DIRDNCMD L     R3,TOPMEMAD         POINT TO CURRENT TOP MEMBER NAME
         TM    STATUS4,CSRSW       CURSOR SCROLLING ACTIVE?
         BNO   DIRDNTST            NO
         LH    R1,CSRLOCN          GET CURSOR LOCATION
         SLR   R0,R0
         LA    R14,80              GET BYTES PER SCREEN LINE
         DR    R0,R14              DIVIDE SCREEN ADDR BY 80 TO GET LINE
         SH    R1,=H'3'            LESS THREE LINES FOR HEADINGS
         BP    DOWN1MEM            USE THIS NUMBER OF LINES IF POSITIVE
DIRDNTST L     R1,SCRNLNES         GET NUMBER OF LINES ON SCREEN
         SH    R1,=H'3'            LESS THREE LINES FOR HEADINGS
         TM    STATUS4,PGSW        FULL PAGE SCROLLING?
         BO    DOWN1MEM            YES
         SRL   R1,1                NO, HALVE IT
         TM    STATUS4,HFSW        HALF PAGE SCROLLING?
         BO    DOWN1MEM            YES
         L     R1,SCROLL           NO, LOAD SCROLL AMOUNT
DOWN1MEM C     R3,LASTADDR         POINTING TO LAST ENTRY?
         BNL   THISMEM             YES, USE LAST ENTRY
         AH    R3,14(,R3)          NO, POINT TO NEXT ENTRY
         BCT   R1,DOWN1MEM
         B     THISMEM
         SPACE
DIREXIT  TM    STATUS,STOPEN       IS THE MEMBER DATA DCB STILL OPEN?
         BZ    DIREXITX            NO, PROCEED WITH EXIT
         TM    DCBOFLGS-IHADCB+DYNDCBW,X'10'
         BZ    DIREXITX            NO, PROCEED WITH EXIT
         MVI   CLOSED,X'80'        YES, SO CLOSE IT
         CLOSE (DYNDCBW),MF=(E,CLOSED)
         NI    STATUS,255-STOPEN   CLOSED
DIREXITX LM    R0,R1,FREEMRGS      PREPARE FOR FREEMAIN
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         FREEMAIN R,LV=(0),A=(1)   FREE @DYNAREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         SLR   R15,R15
         STH   R15,RC              OVERWRITE PREVIOUS NON-ZERO RC
         BR    R14                 RETURN
         SPACE
SORTDATE TM    STATUS3,TTRSORT     CURRENTLY SORTED INTO TTR ORDER?
         BZ    NOTTTRED            NO, IT IS NOT TTR'D
         MVI   STATUS3,DATESORT    SORT INTO DESCENDING CHANGE DATE
         L     R15,=V(REVSORTE)    GET SORT ENHANCER ENTRY POINT
         BALR  R14,R15             CALL SORT ENHANCER ROUTINE
NOTTTRED MVC   DOUBLE(4),LASTADDR  LOAD FIRST BUBBLE PASS LIMIT
BUBLDATE MVI   STATUS3,DATESORT    RESET SORT SWAP FLAG
         LA    R2,DIRENTS-4092                                GYP93274
         LA    R2,4092(,R2)        POINT TO FIRST ENTRY       GYP93274
         C     R2,DOUBLE           ANY MEMBERS IN THIS PDS?
         BE    NULLSORT            NO
         MVC   DOUBLE+4(4),DOUBLE  UPDATE END OF BUBBLE PASS LIMIT
NEXTDATE LR    R1,R2
         AH    R2,14(,R1)          POINT TO SECOND ENTRY FOR COMPARE
         C     R2,DOUBLE+4         REACHED END OF PASS?
         BE    FINALDAT            YES, CHECK FOR FINAL PASS
         CLI   15(R2),30           IMS FORMAT MEMBER WITH TIMESTAMP?
         BE    SDATEOK1            YES
         CLI   15(R2),44           SPFD STATISTICS IN ENTRY USER DATA?
         BNE   NEXTDATE            NO, DON'T PROMOTE IT
SDATEOK1 CLI   15(R1),30           IMS FORMAT MEMBER WITH TIMESTAMP?
         BE    SDATEOK2            YES
         CLI   15(R1),44           SPFD STATISTICS IN ENTRY USER DATA?
         BNE   SWAPDATE            NO, DEMOTE IT
SDATEOK2 CLC   22(6,R1),22(R2)     COMPARE TIMESTAMPS IN SPFD STATS
         BH    NEXTDATE            THESE TWO ARE IN ORDER
         BE    DATETTR             TIMESTAMPS ARE EQUAL - LOOK AT TTR
SWAPDATE BAL   R14,SWAPMEMS        OUT OF ORDER SO BUBBLE DOWN ONE
         B     NEXTDATE            PROCESS NEXT ENTRY
DATETTR  CLC   8(5,R1),8(R2)       COMPARE TTR VALUES
         BNL   NEXTDATE            THESE TWO ARE IN ORDER
         B     SWAPDATE            ASSUME LATER MEMBER HAS HIGHER TTR
FINALDAT TM    STATUS3,SORTSWAP    ANY MEMBERS BUBBLED IN THIS PASS?
         BO    BUBLDATE            YES, DO ANOTHER PASS
         MVC   DIRHDG(55),STATHDG  NO, LOAD SORTED BY TIMESTAMP MESSAGE
         MVC   DIRHDG(L'DATSTMSG),DATSTMSG
         B     FINDMEM             RESHOW FROM REVIEWED MEMBER OR TOP
         SPACE
SORTNAME CLI   DIRMEMCT+4,C' '     FEWER THAN TEN MEMBERS?
         BE    SORTEDNM            YES, PRETEND ALREADY SORTE'D BY NAME
         MVI   STATUS3,0           SORT INTO NAME COLLATING SEQUENCE
         L     R15,=V(REVSORTE)    GET SORT ENHANCER ENTRY POINT
         BALR  R14,R15             CALL SORT ENHANCER ROUTINE
SORTEDNM MVC   DOUBLE(4),LASTADDR  LOAD FIRST BUBBLE PASS LIMIT
BUBLNAME MVI   STATUS3,0           RESET SORT SWAP FLAG
         LA    R2,DIRENTS-4092                                GYP93274
         LA    R2,4092(,R2)        POINT TO FIRST ENTRY       GYP93274
         C     R2,DOUBLE           ANY MEMBERS IN THIS PDS?
         BE    NULLSORT            NO
         MVC   DOUBLE+4(4),DOUBLE  UPDATE END OF BUBBLE PASS LIMIT
NEXTNAME LR    R1,R2
         AH    R2,14(,R1)          POINT TO SECOND ENTRY FOR COMPARE
         C     R2,DOUBLE+4         REACHED END OF PASS?
         BE    FINALNAM            YES, CHECK FOR FINAL PASS
         CLC   0(10,R1),0(R2)      COMPARE MEMBER NAMES (+ CONCAT NO.)
         BNH   NEXTNAME            THESE TWO ARE IN ORDER
         BAL   R14,SWAPMEMS        OUT OF ORDER SO BUBBLE DOWN ONE
         B     NEXTNAME            PROCESS NEXT ENTRY
FINALNAM TM    STATUS3,SORTSWAP    ANY MEMBERS BUBBLED IN THIS PASS?
         BO    BUBLNAME            YES, DO ANOTHER PASS
         CLI   DIRINPUT,6          CAME HERE FROM PF6/18 REQUEST?
         BNE   FINDMEM             NO, LEAVE POSSIBLE PREVIOUS MESSAGE
         MVC   DIRHDG(55),STATHDG  NO, LOAD SORTED BY NAME MESSAGE
         MVC   DIRHDG(L'NAMSTMSG),NAMSTMSG
         B     FINDMEM             RESHOW FROM REVIEWED MEMBER OR TOP
         SPACE
SORTSIZE MVC   DOUBLE(4),LASTADDR  LOAD FIRST BUBBLE PASS LIMIT
BUBLSIZE MVI   STATUS3,SIZESORT    RESET SORT SWAP FLAG
         LA    R2,DIRENTS-2048                                GYP93274
         LA    R2,2048(,R2)        POINT TO FIRST ENTRY       GYP93274
         C     R2,DOUBLE           ANY MEMBERS IN THIS PDS?
         BE    NULLSORT            NO
         MVC   DOUBLE+4(4),DOUBLE  UPDATE END OF BUBBLE PASS LIMIT
NEXTSIZE LR    R1,R2
         AH    R2,14(,R1)          POINT TO SECOND ENTRY FOR COMPARE
         C     R2,DOUBLE+4         REACHED END OF PASS?
         BE    FINALSIZ            YES, CHECK FOR FINAL PASS
         CLI   15(R2),22           BASIC OR SSI ONLY ENTRY?
         BNH   NEXTSIZE            YES, DON'T PROMOTE IT
         CLI   15(R1),22           BASIC OR SSI ONLY ENTRY?
         BNH   SWAPSIZE            YES, DEMOTE IT
         TM    MYDSCB-44+84,X'C0'  IS IT UNDEFINED RECORD FORMAT?
         BO    PGMSIZE             YES, CHECK LOAD MODULE SIZES
         CLC   28(2,R1),28(R2)     COMPARE SIZES IN SPFD STATS
         BNL   NEXTSIZE            THESE TWO ARE IN ORDER
         B     SWAPSIZE            THESE TWO ARE NOT IN ORDER
PGMSIZE  CLC   18(3,R1),18(R2)     COMPARE SIZES OF LOAD MODULES
         BNL   NEXTSIZE            THESE TWO ARE IN ORDER
SWAPSIZE BAL   R14,SWAPMEMS        OUT OF ORDER SO BUBBLE DOWN ONE
         B     NEXTSIZE            PROCESS NEXT ENTRY
FINALSIZ TM    STATUS3,SORTSWAP    ANY MEMBERS BUBBLED IN THIS PASS?
         BO    BUBLSIZE            YES, DO ANOTHER PASS
         MVC   DIRHDG(55),STATHDG  NO, LOAD SORTED BY SIZE MESSAGE
         MVC   DIRHDG(L'SIZSTMSG),SIZSTMSG
         B     FINDMEM             RESHOW FROM REVIEWED MEMBER OR TOP
         SPACE
SORTTTR  CLI   DIRMEMCT+4,C' '     FEWER THAN TEN MEMBERS?
         BE    SRTEDTTR            YES, PRETEND ALREADY SORTE'D BY TTR
*        TM    STATUS3,TTRSORT     ALREADY CALLED REVSORTE?
*        BO    SRTEDTTR            YES, PROBABLY ATTENTION INTERRUPT
         MVI   STATUS3,TTRSORT     SORT INTO PHYSICAL LOCATION ORDER
         L     R15,=V(REVSORTE)    GET SORT ENHANCER ENTRY POINT
         BALR  R14,R15             CALL SORT ENHANCER ROUTINE
SRTEDTTR MVC   DOUBLE(4),LASTADDR  LOAD FIRST BUBBLE PASS LIMIT
BUBLTTR  MVI   STATUS3,TTRSORT     RESET SORT SWAP FLAG
         LA    R2,DIRENTS-4092                                GYP93274
         LA    R2,4092(,R2)        POINT TO FIRST ENTRY       GYP93274
         C     R2,DOUBLE           ANY MEMBERS IN THIS PDS?
         BE    NULLSORT            NO
         MVC   DOUBLE+4(4),DOUBLE  UPDATE END OF BUBBLE PASS LIMIT
NEXTTTR  LR    R1,R2
         AH    R2,14(,R1)          POINT TO SECOND ENTRY FOR COMPARE
         C     R2,DOUBLE+4         REACHED END OF PASS?
         BE    FINALTTR            YES, CHECK FOR FINAL PASS
         CLC   8(6,R1),8(R2)       COMPARE CONCAT#, TTR AND ALIAS FLAG
         BNH   NEXTTTR             THESE TWO ARE IN ORDER
         BAL   R14,SWAPMEMS        OUT OF ORDER SO BUBBLE DOWN ONE
         B     NEXTTTR             PROCESS NEXT ENTRY
FINALTTR TM    STATUS3,SORTSWAP    ANY MEMBERS BUBBLED IN THIS PASS?
         BO    BUBLTTR             YES, DO ANOTHER PASS
         MVC   DIRHDG(55),STATHDG  NO, LOAD SORTED BY TTR MESSAGE
         MVC   DIRHDG(L'TTRSTMSG),TTRSTMSG
         B     FINDMEM             RESHOW FROM REVIEWED MEMBER OR TOP
         SPACE
SORTUSER MVC   DOUBLE(4),LASTADDR  LOAD FIRST BUBBLE PASS LIMIT
BUBLUSER MVI   STATUS3,USERSORT    RESET SORT MODE AND SWAP FLAGS
         LA    R2,DIRENTS-2048                                GYP93274
         LA    R2,2048(,R2)        POINT TO FIRST ENTRY       GYP93274
         C     R2,DOUBLE           ANY MEMBERS IN THIS PDS?
         BE    NULLSORT            NO
         MVC   DOUBLE+4(4),DOUBLE  UPDATE END OF BUBBLE PASS LIMIT
NEXTUSER LR    R1,R2
         AH    R2,14(,R1)          POINT TO SECOND ENTRY FOR COMPARE
         C     R2,DOUBLE+4         REACHED END OF PASS?
         BE    FINALUSR            YES, CHECK FOR FINAL PASS
         CLI   15(R2),44           SPFD STATISTICS IN ENTRY USER DATA?
         BNE   NEXTUSER            NO, DON'T PROMOTE IT
         CLI   15(R1),44           SPFD STATISTICS IN ENTRY USER DATA?
         BNE   SWAPUSER            NO, DEMOTE IT
         CLC   34(8,R1),34(R2)     COMPARE USERIDS IN SPFD STATS
         BNH   NEXTUSER            THESE TWO ARE IN ORDER
SWAPUSER BAL   R14,SWAPMEMS        OUT OF ORDER SO BUBBLE DOWN ONE
         B     NEXTUSER            PROCESS NEXT ENTRY
FINALUSR TM    STATUS3,SORTSWAP    ANY MEMBERS BUBBLED IN THIS PASS?
         BO    BUBLUSER            YES, DO ANOTHER PASS
         MVC   DIRHDG(55),STATHDG  NO, LOAD SORTED BY TTR MESSAGE
         MVC   DIRHDG(L'USRSTMSG),USRSTMSG
         B     FINDMEM             RESHOW FROM REVIEWED MEMBER OR TOP
         SPACE
SORTSSI  MVC   DOUBLE(4),LASTADDR  LOAD FIRST BUBBLE PASS LIMIT
BUBLSSI  MVI   STATUS3,SSISORT     RESET SORT MODE AND SWAP FLAGS
         LA    R2,DIRENTS-4092                                GYP93274
         LA    R2,4092(,R2)        POINT TO FIRST ENTRY       GYP93274
         C     R2,DOUBLE           ANY MEMBERS IN THIS PDS?
         BE    NULLSORT            NO
         MVC   DOUBLE+4(4),DOUBLE  UPDATE END OF BUBBLE PASS LIMIT
NEXTSSI  LR    R1,R2
         AH    R2,14(,R1)          POINT TO SECOND ENTRY FOR COMPARE
         C     R2,DOUBLE+4         REACHED END OF PASS?
         BE    FINALSSI            YES, CHECK FOR FINAL PASS
         CLI   15(R2),16           ANY IN-CORE USER DATA?
         BE    NEXTSSI             NO, DON'T PROMOTE IT
         CLI   15(R2),32           PROGRAM WITHOUT SSI?
         BE    NEXTSSI             YES, DON'T PROMOTE IT
         CLI   15(R2),40           PROGRAM ALIAS (WITHOUT SSI)?
         BE    NEXTSSI             YES, DON'T PROMOTE IT
         LA    R15,16(,R2)         POINT TO THE START OF THE USER DATA
         CLI   15(R2),36           PROGRAM WITH SSI?
         BNE   SSIENTY1            NO, HAVE THE RIGHT SORT FIELD
         LA    R15,30(,R2)         POINT TO THE PROGRAM SSI
SSIENTY1 CLI   15(R1),16           ANY IN-CORE USER DATA?
         BE    SWAPSSI             NO, DEMOTE IT
         CLI   15(R1),32           PROGRAM WITHOUT SSI?
         BE    SWAPSSI             YES, DEMOTE IT
         CLI   15(R1),40           PROGRAM ALIAS (WITHOUT SSI)?
         BE    SWAPSSI             YES, DEMOTE IT
         LA    R14,16(,R1)         POINT TO THE START OF THE USER DATA
         CLI   15(R1),36           PROGRAM WITH SSI?
         BNE   SSIENTY2            NO, HAVE THE RIGHT SORT FIELD
         LA    R14,30(,R1)         POINT TO THE PROGRAM SSI
SSIENTY2 CLC   0(4,R14),0(R15)     COMPARE FIRST 2 USER DATA HALFWORDS
         BNH   NEXTSSI             THESE TWO ARE IN ORDER
SWAPSSI  BAL   R14,SWAPMEMS        OUT OF ORDER SO BUBBLE DOWN ONE
         B     NEXTSSI             PROCESS NEXT ENTRY
FINALSSI TM    STATUS3,SORTSWAP    ANY MEMBERS BUBBLED IN THIS PASS?
         BO    BUBLSSI             YES, DO ANOTHER PASS
         MVC   DIRHDG(55),STATHDG  NO, LOAD SORTED BY SSI MESSAGE
         MVC   DIRHDG(L'SSISTMSG),SSISTMSG
         B     FINDMEM             RESHOW FROM REVIEWED MEMBER OR TOP
         SPACE
NULLSORT MVC   DIRHDG(55),STATHDG  NO DIRECTORY ENTRIES IN PDS TO SORT
         MVC   DIRHDG(L'NULSTMSG),NULSTMSG
         L     R1,CBPRM3           POINT TO BUFFER START
         MVI   0(R1),X'C5'         SUPPLY WCC TO SOUND THE BELL
         B     DIRTOP              RESHOW FROM TOP
         SPACE
SWAPMEMS TM    STATUS4,FLAGI       ATTENTION INTERRUPT?
         BO    SORTATTN            YES, TERMINATE SORT
         LH    R3,14(,R1)          GET LENGTH OF FIRST ENTRY
         LH    R4,14(,R2)          GET LENGTH OF SECOND
         BCTR  R3,0                PREPARE FOR EXECUTE
         BCTR  R4,0                PREPARE FOR EXECUTE
         EX    R3,SAVEFRST         SAVE THE FIRST ENTRY
         EX    R4,MOVESCND         PROMOTE THE SECOND ENTRY
         LR    R2,R1
         AH    R2,14(,R1)          POINT TO NEW LOCATION OF FIRST
         EX    R3,LOADFRST         DEMOTE WHAT WAS THE FIRST ENTRY
         OI    STATUS3,SORTSWAP    INDICATE MOVEMENT IN THIS PASS
         ST    R2,DOUBLE           UPDATE END OF BUBBLE PASS LIMIT
         BR    R14                 RETURN TO BUBBLE SORT MAINLINE
SAVEFRST MVC   DIRINPUT+8(0),0(R1) <<< EXECUTED >>>
MOVESCND MVC   0(0,R1),0(R2)       <<< EXECUTED >>>
LOADFRST MVC   0(0,R2),DIRINPUT+8  <<< EXECUTED >>>
SORTATTN MVC   DIRHDG(55),STATHDG  LOAD ERROR MESSAGE INTO HEADING
         MVC   DIRHDG(L'INRPTMSG),INRPTMSG
         L     R1,CBPRM3           POINT TO BUFFER START
         MVI   0(R1),X'C5'         SUPPLY WCC TO SOUND THE BELL
         B     DIRTOP              ATTENTION HIT SO STOP SORTING
         SPACE
GTPDSNAM MVC   DIRHDG(0),$DSNAME+2 <<< EXECUTED >>>
GTPDDNAM MVC   DIRHDG+13(0),$DDNAME-4 <<< EXECUTED >>>
         SPACE
SELCODOK IC    R5,2(,R1)           GET LOW ORDER SCREEN ADDRESS BYTE
         SLL   R5,2                SHIFT OUT "PARITY" BITS
         ICM   R5,2,1(R1)          GET HIGH ORDER SCREEN ADDRESS BYTE
         SLL   R5,18               SHIFT OUT "PARITY" BITS
         SRL   R5,20               MAKE BINARY INTEGER
         SLR   R4,R4               PREPARE FOR DIVIDE
         LA    R0,80               GET BYTES PER SCREEN LINE
         DR    R4,R0               DIVIDE SCREEN ADDR BY 80 TO GET LINE
         SH    R5,=H'3'            ADJUST FOR THREE HEADING LINES
         BNM   ESVALID             IF NEGATIVE THEN INVALID INPUT,
         MVC   DIRHDG(55),STATHDG     SCREEN HAD BEEN CLEARED
         MVC   DIRHDG(L'SCRERMSG),SCRERMSG
         B     BELDSPLY            GO RING THE BELL
ESVALID  L     R4,TOPMEMAD         GET CURRENT TOP ENTRY ADDRESS
         BZ    SELDMEM             IN CASE FIRST SHOWN MEMBER CHOSEN
ESLOOP   AH    R4,14(,R4)          POINT TO NEXT ENTRY
         BCT   R5,ESLOOP
SELDMEM  CLI   3(R1),C'O'          MEMBER OFFLOAD SELECTION?
         BE    OFFLDCHK            YES, CHECK VALIDITY
         CLI   3(R1),C'R'          MEMBER OFFLOAD SELECTION RESET?
         BE    OFFLDCHK            YES, CHECK VALIDITY
         MVC   $MEMBER(10),0(R4)   MOVE IN SELECTED MEMBER NAME
         CLI   3(R1),C'B'          SPF BROWSE SELECTION?
         BE    BRWSCHEK            YES, CHECK VALIDITY
         CLI   3(R1),C'E'          SPF EDIT SELECTION?
         BE    EDITCHEK            YES, CHECK VALIDITY
         L     R0,CBPRM3           SAVE REVPODIR TPUT BUFFER ADDRESS
         LA    R15,POSAVE2         POINT TO NEW SAVE AREA
         ST    R15,8(,R13)         LINK SAVE AREAS
         ST    R13,4(,R15)
         L     R15,=V(REVIEW2)     GET ADDRESS OF PHASE 2
         STM   R14,R12,12(R13)     SAVE ALL REGISTERS
         L     R13,8(,R13)         POINT TO NEW SAVE AREA
         BALR  R14,R15             CALL REVIEW PHASE 2
         L     R13,4(,R13)         POINT TO OLD SAVE AREA
         LM    R0,R12,20(R13)      RESTORE ALL EXCEPT BALR REGISTERS
         ST    R0,CBPRM3           RESTORE REVPODIR TPUT BUFFER ADDRESS
         TM    STATUS,STPODIR      STILL IN MEMBER SELECT MODE?
         BZ    DIREXIT             NO, EXIT WAS REQUESTED
         MVI   DOUBLE,0            CLEAR A BYTE
         CLI   DIRSCRN,X'F7'       GOT A COLOUR MEMBER LIST?
         BNE   POCLRCHK            NO
         MVI   DOUBLE,X3270        YES
POCLRCHK XC    DOUBLE(1),STATUS5   CORRELATE WITH LATEST COLOUR COMMAND
         TM    DOUBLE,X3270        IS MEMBER LIST IN CORRECT MODE?
         BO    RFRSHOBT            NO, REINITIALIZE IN CORRECT MODE
         MVC   SELMEMNM,$MEMBER    YES, LOAD MEMBER NAME TO SEARCH FOR
         B     BROWSEOK            REDISPLAY MEMBER LIST
         SPACE 2
BRWSCHEK MVC   DIRHDG(55),STATHDG  PREPARE FOR MESSAGE
         B     LRECL255            BROWSE DOES NOT REQUIRE RECFM F OR V
EDITCHEK MVC   DIRHDG(55),STATHDG  PREPARE FOR MESSAGE
         TM    MYDSCB-44+84,X'C0'  IS IT FIXED OR VARIABLE FORMAT?
         BM    FXDORVAR            YES, CHECK LOGICAL RECORD LENGTH
         MVC   DIRHDG(L'RECFMMSG),RECFMMSG
         B     BELDSPLY            GO RING THE BELL
FXDORVAR CLI   MYDSCB-44+88,0      IS LRECL LESS THAN 256?
         BE    LRECL255            YES, CHECK FOR SPANNED RECORDS
         MVC   DIRHDG(EDINVLEN),RECFMMSG
         MVC   DIRHDG+EDINVLEN(L'LN256MSG),LN256MSG
         B     BELDSPLY            GO RING THE BELL
LRECL255 TM    MYDSCB-44+84,X'48'  IS IT VARIABLE SPANNED FORMAT?
         BNO   NOTSPAND            NO, CHECK FOR VIO
         MVC   DIRHDG(EDINVLEN),RECFMMSG
         MVC   DIRHDG+EDINVLEN(L'SPANDMSG),SPANDMSG
         B     BELDSPLY            GO RING THE BELL
NOTSPAND CLI   $VOLSER,C' '        IS THE PDS ON VIO?
         BNE   EDITPREP            NO
         MVC   DIRHDG(EDINVLEN),RECFMMSG
         MVC   DIRHDG+EDINVLEN(L'VIOPOMSG),VIOPOMSG
         B     BELDSPLY            GO RING THE BELL
EDITPREP CLI   3(R1),C'='          IS THIS AN '=EDITMEM' REQUEST?
         BNE   ISPFISOK            NO
         OI    STATUS2,EDITED      FLAG MEMBER NAME PROMPT IS ACTIVE
         MVC   DIRHDG(L'EDITMMSG),EDITMMSG
         B     BELDSPLY            GO RING THE BELL
ISPFISOK MVC   SELMEMNM,$MEMBER    LOAD MEMBER NAME TO SEARCH FOR
         L     R15,=V(REVEDIT)     EDIT IS A VALID SELECTION
         BALR  R14,R15             CALL REVEDIT
         CLI   3(R1),C'B'          WAS MEMBER BROWSE REQUESTED?
         BE    EOBROWSE            YES
         LTR   R15,R15             WAS THE MEMBER SAVED?
         BNZ   MEMNTSAV            NO
         OI    STATUS2,EDITED      YES, FLAG THIS
RFRSHOBT LA    R1,OBTAINW          GET THE LATEST DSCB DETAILS
         OBTAIN (1)                    FROM THE VTOC
REREFRSH LM    R0,R1,FREEMRGS      PREPARE FOR FREEMAIN
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         FREEMAIN R,LV=(0),A=(1)   FREE @DYNAREA
         B     DIREFRSH            GET CURRENT DIRECTORY INFORMATION
EOBROWSE LTR   R15,R15             WAS THE BROWSE SUCCESSFUL?
         BZ    BROWSEOK            YES, RE-DISPLAY MEMBER LIST QUICKLY
MEMNTSAV CVD   R15,DOUBLE          STORE DECIMAL NON-ZERO RETURN CODE
         ST    R15,DOUBLE          STORE BINARY NON-ZERO RETURN CODE
         CLI   DOUBLE+3,4          WAS THERE AN ERROR?
         BNE   EDITFAIL            YES
BROWSEOK ICM   R5,7,MYDSCB-44+98   SAVE PREVIOUS DS1LSTAR VALUE
         LA    R1,OBTAINW          GET THE LATEST DSCB DETAILS
         OBTAIN (1)                    FROM THE VTOC
         CLM   R5,7,MYDSCB-44+98   HAS DS1LSTAR CHANGED?
         BNE   REREFRSH            YES, REFRESH ENTIRE DIRECTORY
         ICM   R0,3,CONCTOPN       ANY CONCATENATED DIRECTORIES READ?
         BZ    POHDGOK3            NO, SUPPLY DATA SET IN HEADING
         LH    R1,$DDNAML          GET DATA DEFINITION NAME LENGTH
         EX    R1,GTPDDNAM         RE-LOAD DDNAME INTO HEADING
         MVC   DIRHDG(L'REVDDMSG),REVDDMSG
         B     FINDMEM             RESHOW LIST FROM REQUESTED MEMBER
POHDGOK3 LH    R1,$DSNAME          NO, GET DATA SET NAME LENGTH
         EX    R1,GTPDSNAM         RE-LOAD DSN INTO HEADING
         B     FINDMEM             RESHOW LIST FROM REQUESTED MEMBER
EDITFAIL CLI   DOUBLE+3,16         WAS THE MEMBER FOUND?
         BE    RFRSHOBT            NO, MAGICALLY REFRESH MEMBER LIST
         L     R1,CBPRM3           POINT TO BUFFER START
         MVI   0(R1),X'C5'         SUPPLY WCC TO SOUND THE BELL
         CLI   DOUBLE+3,14         WAS THE MEMBER IN USE OR NOT FOUND?
         BNE   NOTSPF14            NO
         MVC   DIRHDG(L'INUSEMSG),INUSEMSG
         B     FINDMEM             RESHOW LIST FROM THE MEMBER
NOTSPF14 CLI   DOUBLE+3,12         WAS THE MEMBER EMPTY?
         BNE   NOTSPF12            NO
         MVC   DIRHDG(L'EMPTYMSG),EMPTYMSG
         B     FINDMEM             RESHOW LIST FROM THE MEMBER
NOTSPF12 MVC   DIRHDG(L'SPFERMSG),SPFERMSG
         OI    DOUBLE+7,X'0F'      SHOW DECIMAL RETURN CODE
         UNPK  DIRHDG+11(2),DOUBLE+6(2)
         B     FINDMEM             RESHOW LIST FROM REQUESTED MEMBER
         SPACE 2
**********************************************************************
*                                                          *         *
*         PROCESS OFFLOAD REQUEST                          *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
OFFLDCHK MVC   DIRHDG(55),STATHDG  PREPARE FOR MESSAGE
         TM    MYDSCB-44+84,X'C0'  IS IT FIXED OR VARIABLE FORMAT?
         BM    OFFLFORV            YES, CHECK LOGICAL RECORD LENGTH
         MVC   DIRHDG(OFFINVLN),SYSUTMSG
         MVC   DIRHDG+OFFINVLN(L'RECFMMSG-EDINVLEN),RECFMMSG+EDINVLEN
         B     BELDSPLY            GO RING THE BELL
OFFLFORV LA    R15,DIRENTS-4092                               GYP93274
         LA    R15,4092(,R15)      POINT TO FIRST ENTRY       GYP93274
         C     R15,LASTADDR        ANY MEMBERS IN THIS PDS?
         BL    OFFSMTHG            YES, SOMETHING IS THERE TO OFFLOAD
         MVC   DIRHDG(L'NULOFMSG),NULOFMSG
         B     BELDSPLY            GO RING THE BELL
OFFSMTHG SLR   R0,R0
         L     R15,540             GET POINTER TO CURRENT TCB
         L     R15,12(,R15)        POINT TO TIOT
         LA    R15,24(,R15)        POINT TO TIOELNGH
OFFLOADD CLC   4(8,R15),=CL8'SYSUT2  '
         BE    OFFLDTRY            FILE EXISTS SO GO AND USE IT
         IC    R0,0(,R15)          GET TIOT ENTRY LENGTH
         AR    R15,R0              POINT TO NEXT TIOT ENTRY
         CLI   0(R15),0            ZERO LENGTH ENTRY?
         BNE   OFFLOADD            NO, CHECK OUT THIS ENTRY
         MVC   DIRHDG(L'SYSUTMSG),SYSUTMSG
         B     BELDSPLY            GO RING THE BELL
OFFLDTRY CLI   3(R1),C'O'          FLAG AN INDIVIDUAL MEMBER?
         BE    OFFLDMEM            YES, DON'T INVOKE REVOFFLD YET
         CLI   3(R1),C'R'          RESETTING AN OFFLOAD SELECTION FLAG?
         BE    OFFLDRES            YES, DON'T INVOKE REVOFFLD YET
         ICM   R0,B'1111',OFFLDCNT FULL OR PARTIAL OFFLOAD?
         BZ    OFFLDALL            FULL
         MVC   DIRHDG(L'OFFSLMSG),OFFSLMSG
         CLI   STATUS3,TTRSORT     OFFLOADING ALIASES AS WELL?
         BE    OFFLDCAL            YES, CALL THE OFFLOADER
         MVC   DIRHDG+L'OFFSLMSG-18(18),STATHDG  NO, SO EDIT MESSAGE
         B     OFFLDCAL            CALL THE OFFLOADER
OFFLDALL MVC   DIRHDG(L'OFFALMSG),OFFALMSG
         CLI   STATUS3,TTRSORT     OFFLOADING ALIASES AS WELL?
         BE    OFFLDCAL            YES, CALL THE OFFLOADER
         MVC   DIRHDG+L'OFFALMSG-12(12),STATHDG  NO, SO EDIT MESSAGE
OFFLDCAL LA    R0,DIRHDG+55        POINT PAST END OF MESSAGE
         L     R1,CBPRM3           POINT TO BUFFER START
         SR    R0,R1               GET DATA STREAM LENGTH
         LA    R15,X'03'           LOAD FULLSCREEN TPUT FLAGS
         SLL   R15,24              SHIFT TO TOP BYTE
         OR    R1,R15              PUT INTO CORRECT REGISTER
         TPUT  (1),(0),R           NOTIFY USER OF PROCESSING
         MVC   DIRHDG(55),STATHDG  PREPARE FOR MESSAGE AFTER RETURN
         L     R15,=V(REVOFFLD)    POINT TO OFFLOAD PROCESSOR ROUTINE
         BALR  R14,R15             CALL OFFLOAD PROCESSOR
         MVC   DIRHDG(L'OFFLDMSG),OFFLDMSG
         TM    STATUS4,FLAGI       ATTENTION INTERRUPT?
         BZ    DSPLYDIR            NO, PDS NOW OFFLOADED TO SYSUT2
         MVC   DIRHDG(L'OFFINMSG),OFFINMSG
         B     DSPLYDIR            NOTIFY USER OF OFFLOAD INTERRUPTION
OFFLDMEM TM    13(R4),X'C0'        ALIAS OR ALREADY SELECTED?
         BNZ   OFFDSNBK            YES, TAKE NO ACTION
         OI    13(R4),X'40'        NO, FLAG OFFLOAD SELECTION
         LA    R0,1
         A     R0,OFFLDCNT         INCREMENT OFFLOAD SELECTION COUNTER
         ST    R0,OFFLDCNT
         B     OFFDSNBK
OFFLDRES TM    13(R4),X'80'        ALIAS SELECTED FOR RESET?
         BO    OFFDSNBK            YES, TAKE NO ACTION
         TM    13(R4),X'40'        IS THE MEMBER FLAGGED FOR OFFLOAD?
         BZ    OFFDSNBK            NO, TAKE NO ACTION
         NI    13(R4),X'FF'-X'40'  RESET OFFLOAD SELECTION FLAG
         ICM   R0,B'1111',OFFLDCNT GET CURRENT OFFLOAD SELECTION COUNT
         BZ    OFFDSNBK            ALREADY ZERO SO SKIP DECREMENT
         BCTR  R0,0                DECREMENT OFFLOAD SELECTION COUNTER
         ST    R0,OFFLDCNT
         B     OFFDSNBK
         SPACE 2
**********************************************************************
*                                                          *         *
*         PROCESS CONCATENATED PDS DIRECTORIES             *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
         USING IHADCB,R7
POCONCAT CLC   DCBDDNAM,$DDNAME    TEMPORARY FILE ALREADY ALLOCATED?
         BE    CONCATDD            NO, ALLOCATE FIRST CONCATENATION
         LA    R15,MYDAPB          YES, FREE IT
         USING DAPB18,R15
         XC    0(40,R15),0(R15)
         MVI   DA18CD+1,X'18'
         MVC   DA18DDN,DCBDDNAM    SUPPLY DDNAME TO BE FREED
         MVC   DA18MNM(8),=CL8' '
         MVC   DA18SCLS(2),=CL8' '
         DROP  R15                 DAPB18
         LA    R1,MYDAPL           POINT TO DAIR PARAMETER LIST
         L     R15,16              MUST BE MVS/SP 2.2 OR LATER, SO
         L     R15,732(,R15)       CVTDAIR MUST EXIST AND BE FILLED IN
         BALR  R14,R15             CALL IKJDAIR
         TM    STATUS4,FLAGI       ATTENTION INTERRUPT?
         BO    EOCONDIR            YES, TERMINATE DIRECTORY READS
         CLC   CONCTOPN,ARLRTRVD   PROCESSED LAST CONCATENATION?
         BL    CONCATDD            NO, PROCESS NEXT CONCATENATION
         LH    R1,$DDNAML          GET DATA DEFINITION NAME LENGTH
         EX    R1,GTPDDNAM         LOAD DDNAME INTO HEADING
         MVC   DIRHDG(L'REVDDMSG),REVDDMSG
EOCONDIR MVC   POVOLUME-3(9),=CL9'DISPLAYED'
         B     POCONRET            RETURN TO DISPLAY MEMBER LIST
CONCATDD TM    STATUS4,FLAGI       ATTENTION INTERRUPT?
         BO    EOCONDIR            YES, TERMINATE DIRECTORY READS
         LA    R0,1
         AH    R0,CONCTOPN         INCREMENT OPENED CONCATENATION COUNT
         STH   R0,CONCTOPN
         L     R1,ARLAREA          POINT TO FIRST CONCATENATED JFCB
CONCTJFL BCT   R0,CONCTJFN         CHAIN THROUGH JFCBS
         B     CONCTJFC            NOW HAVE CORRECT JFCB
CONCTJFN AH    R1,0(,R1)           POINT TO NEXT CONCATENATED JFCB
         B     CONCTJFL
CONCTJFC LA    R15,MYDAPB
         USING DAPB08,R15
         XC    0(84,R15),0(R15)
         MVI   DA08CD+1,X'08'
         MVC   CMDAREA+2(44),4(R1) GET DATA SET NAME FROM JFCB
         LA    R0,44               CHEAT AND TAKE THE LAZY WAY OUT
         STH   R0,CMDAREA
         LA    R0,CMDAREA
         ST    R0,DA08PDSN
         MVC   DA08DDN(8),=CL8' '
         MVC   DA08UNIT,=CL8'SYSALLDA'
         MVC   DA08SER,=CL8' '
         MVC   DA08SER(6),122(R1)  GET VOLUME FROM JFCB
         MVC   DA08MNM,=CL8' '
         MVC   DA08PSWD,$PASSWRD
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         SPACE
         LA    R1,MYDAPL           POINT TO PARAMETER LIST
         L     R15,16              MUST BE MVS/SP 2.2 OR LATER, SO
         L     R15,732(,R15)     __CVTDAIR MUST EXIST AND BE FILLED IN
*                               /  (THIS IS TRUE IF THE JFCB DATA WAS
*                              /   SUPPLIED BY RDJFCB, BUT IF THE DATA
*      COMPATIBILITY NOTE: ----    WAS DUMMIED UP BY 'REVIEW' DOING
*                              \   ALL THE WORK ITSELF FOR BACK-LEVEL
*                               \__OS'S THEN THIS MAY NOT BE TRUE!)
         BALR  R14,R15             CALL IKJDAIR
         LTR   R15,R15             SUCCESSFUL ALLOCATION?
         BNZ   CONCATDD            NO, TRY THE NEXT ONE
         LA    R15,MYDAPB
         MVC   DCBDDNAM,DA08DDN    SUPPLY DDNAME TO BE OPENED
         DROP  R7,R15              IHADCB, DAPB08
         B     OPENDIR             READ THE CONCATENATED DIRECTORY
         SPACE 2
**********************************************************************
*                                                          *         *
*         VERIFY DECIMAL JULIAN DATE FORMAT - AVOID S0C7   *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
CHKDATE  ST    R0,DOUBLE           STORE DATE FOR EXAMINATION
         TM    DOUBLE+3,X'0F'      SIGN AS EXPECTED?
         BNO   CHKFAILD            NO, REJECT IT
         NI    DOUBLE+3,X'F0'      YES, ZERO IT
         CLI   DOUBLE+2,X'36'      DDD OVER 369?
         BH    CHKFAILD            YES, REJECT IT
         LA    R0,4                FOUR BYTES TO CHECK
         LA    R1,DOUBLE           POINT TO FIRST BYTE
DECVFYLP CLI   0(R1),X'A0'         IS THE HIGH-ORDER DIGIT DECIMAL?
         BNL   CHKFAILD            NO, REJECT IT
         NI    0(R1),X'0F'         YES, ZERO IT
         CLI   0(R1),X'0A'         IS THE LOW-ORDER DIGIT DECIMAL?
         BNL   CHKFAILD            NO, REJECT IT
         LA    R1,1(,R1)           THIS BYTE OKAY, POINT TO THE NEXT
         BCT   R0,DECVFYLP         PROCESS NEXT BYTE
         BR    R14                 00YYDDD+ OR YYYYDDD+ OR OTHER PL4
         SPACE
         DROP  R10,R11             REVPODIR
         SPACE 2
**********************************************************************
*                                                          *         *
*         CONVERT DATE FROM P'YYDDD' TO C'YY/MM/DD'        * GP@SECV *
*                                                          *         *
**********************************************************************
         SPACE
SPFDATE  BALR  R15,0                    (FROM TAPESCAN DATE SUBROUTINE)
         USING LKEDDATE,R15
LKEDDATE ST    R4,CALLSAVE+4               STORE INPUT DATE FOR TESTING
         ST    R4,CALLSAVE+8                 AND CONVERSION
         UNPK  CALLSAVE+12(3),CALLSAVE+5(2) FORMAT YEAR
         XC    CALLSAVE(6),CALLSAVE        GET JULIAN DAY IN DECIMAL
         CVB   R4,CALLSAVE                 GET JULIAN DAY IN BINARY
         LA    R5,MNTHTBL-4                ADJUST FOR FIRST INCREMENT
         TM    CALLSAVE+9,X'01'            IF ODD THEN
         BO    NOTLEAP                                 NOT LEAP YEAR
         TM    CALLSAVE+9,X'12'            TEST FOR LEAP (OK TILL 2099)
         BNM   NEXTMNTH                       IF MIXED NOT LEAP YEAR
NOTLEAP  CH    R4,=H'60'                   DDD AFTER 28TH FEBRUARY?
         BL    NEXTMNTH                    NO, LEAP YEAR IRRELEVANT
         LA    R4,1(,R4)                   YES, FUDGE DDD ACCORDINGLY
NEXTMNTH LA    R5,4(,R5)                   INCREMENT THRU MONTH TABLE
         SH    R4,0(,R5)                   DECREASE NUMBER OF DAYS
         BP    NEXTMNTH                    NOT YET, TRY NEXT MONTH
         AH    R4,0(,R5)                   FOUND THE MONTH
         CVD   R4,CALLSAVE                 GET DAY OF MONTH
         OI    CALLSAVE+7,X'0F'            MAKE UNPK RESULT PRINTABLE
         UNPK  CALLSAVE+18(2),CALLSAVE+6(2) FORMAT DAY OF MONTH
         MVI   CALLSAVE+14,C'/'            INSERT THE SLASH
         MVC   CALLSAVE+15(2),2(R5)        MOVE IN MONTH NUMBER
         MVI   CALLSAVE+17,C'/'            INSERT THE SLASH
         MVC   DOUBLE,CALLSAVE+12          RETURN THE ANSWER
         BR    R14                         RETURN
         SPACE
         DROP  R15                         LKEDDATE
         SPACE
MNTHTBL  DC    H'31'                       JAN
         DC    C'01'
         DC    H'29'                       FEB
         DC    C'02'
         DC    H'31'                       MAR
         DC    C'03'
         DC    H'30'                       APR
         DC    C'04'
         DC    H'31'                       MAY
         DC    C'05'
         DC    H'30'                       JUN
         DC    C'06'
         DC    H'31'                       JUL
         DC    C'07'
         DC    H'31'                       AUG
         DC    C'08'
         DC    H'30'                       SEP
         DC    C'09'
         DC    H'31'                       OCT
         DC    C'10'
         DC    H'30'                       NOV
         DC    C'11'
         DC    H'255'                      DEC (ALLOW FOR STUPID DDD)
         DC    C'12'
         TITLE '  R E V P O D I R   -   S T A T I C   A R E A  '
PRIMADDR DCS   (2,14)              SCREEN ADDRESS OF PRIMARY INPUT AREA
LASTNAME DC    XL8'FFFFFFFFFFFFFFFF',3AL2(0),AL2(16)
PODIRHEX DC    C'0123456789ABCDEF'
REALUNKN DC    C'????????'
RFRLTYPE DC    C' NEW TBL DFM FMTMSGIMSGO'
ACBFLAGS DC    C'DEDBMSDBSHR1SHR DMB ACB '
SSILABEL DC    C'SSI:'
MODIFIED DC    C'MODIFIED'
UNMOVABL DC    C'UNMOVEABLE'
HWCNTMSG DC    C'HALFWORDS OF USER DATA'
INVCDMSG DC    C'INVALID SELECTION CODE '
INVPFMSG DC    C'INVALID PROGRAM FUNCTION KEY '
SCRERMSG DC    C'SCREEN INPUT ERROR - INPUT IGNORED '
DIRRDMSG DC    C'REGION FULL - DIRECTORY READ TERMINATED '
INRPTMSG DC    C'INTERRUPT - DIRECTORY SORT TERMINATED '
NOTEXMSG DC    C'EXACT MEMBER NAME NOT FOUND '
DATSTMSG DC    C'SORTED BY MODIFICATION DATE/TIME '
NAMSTMSG DC    C'SORTED BY NAME '
SIZSTMSG DC    C'SORTED BY SIZE '
SSISTMSG DC    C'SORTED BY SSI/VV.MM '
TTRSTMSG DC    C'SORTED BY TTR '
USRSTMSG DC    C'SORTED BY USERID '
NULSTMSG DC    C'NO ENTRIES TO SORT '
EDINVLEN EQU   15                  LENGTH OF 'EDIT INVALID - '
RECFMMSG DC    C'EDIT INVALID - RECORD FORMAT NOT FIXED OR VARIABLE '
SPANDMSG DC    C'SPANNED RECORDS ARE NOT SUPPORTED '
LN256MSG DC    C'RECORD LENGTH MUST BE LESS THAN 256 '
VIOPOMSG DC    C'VIO LIBRARIES ARE NOT SUPPORTED '
OFFINVLN EQU   18                  LENGTH OF 'OFFLOAD INVALID - '
SYSUTMSG DC    C'OFFLOAD INVALID - FILE SYSUT2 NOT PRE-ALLOCATED '
NULOFMSG DC    C'NO MEMBERS TO OFFLOAD '
OFFALMSG DC    C'OFFLOADING ALL REAL MEMBERS AND ALIASES '
OFFSLMSG DC    C'OFFLOADING SELECTED REAL MEMBERS AND THEIR ALIASES '
OFFLDMSG DC    C'OFFLOAD COMPLETE - SYSUT2 CLOSED '
OFFINMSG DC    C'OFFLOAD INTERRUPTED - SYSUT2 CLOSED '
EDITMMSG DC    C'USE LOCATE FIELD TO SUPPLY MEMBER NAME FOR EDIT '
EDIT0MSG DC    C'REQUEST FOR MEMBER EDIT NOW CANCELLED '
SAVEDMSG DC    C'MEMBER SAVED '
EMPTYMSG DC    C'EMPTY MEMBER '
INUSEMSG DC    C'MEMBER NOT FOUND (BROWSE) OR IN USE (EDIT) '
SPFERMSG DC    C'ISPF ERROR ## '
REVDDMSG DC    C'REVIEW OF DDNAME '
RECFMUHD DCS   (3,15),C' SSI',RTA,(3,25),C' '
         DC    C'SIZE   TTR   ALIAS-OF AC -- -- -- -ATTRIBUTES -- -- --+
               - '
RFUHDLEN EQU   *-RECFMUHD
EODIRMSG DCS   SF,PROHI,C'  **END**'
DIRMSGLN EQU   *-EODIRMSG
EODIRYEL DCS   SF,PROHI,SA,COLOUR,YELLOW,C'  **END**'
DIRMSG2L EQU   *-EODIRYEL
BLNKREST DCS   RTA,(1,1),C' '
PRIMINIT DCS   SBA,(2,14),IC       RETURN CURSOR TO PRIMARY INPUT AREA
MEMATLST DCS   SF,UNPHI,X'00',SF,PROLO,SA,COLOUR,PINK
ED5      DC    X'402020202120'
BLKSREAD DC    C' DIRECTORY BLOCKS READ '
ED9      DC    X'40202020202020202120'
DIRGMLIM DC    F'8192',F'524288'
GMVC     GETMAIN VC,MF=L
GMVCL    EQU   *-GMVC
         SPACE
         LTORG
         SPACE
         PRINT NOGEN
         SPACE
STDIRDCB DCB   DSORG=PS,MACRF=GM,RECFM=F,LRECL=256,BLKSIZE=256,        +
               DDNAME=DYNAM,BUFNO=16,EODAD=EOPDSDIR     (4K OF BUFFERS)
DIRDCBL  EQU   *-STDIRDCB
         SPACE
         PRINT GEN
         SPACE 2
*              FULL 3270 EBCDIC TRANSLATION         (COPIED FROM FULLT)
DIRXLATE DC    X'00010203044B064B4B4B4B4B0C0D4B4B'
         DC    X'104B4B4B141516174B194B4B1C4B1E4B'
         DC    X'4B4B4B4B4B4B26274B4B4B4B4B2D4B4B'
         DC    X'4B4B4B4B4B4B4B374B4B4B4B4B3D4B3F'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'808182838485868788898A8B8C8D8E8F'
         DC    X'909192939495969798999A9B9C9D9E9F'
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE4B'
         SPACE
STATMONO DCS   X'C1',SBA,(1,1),SF,PROHI
STATHDG  DC    55C'-',X'602020202120',C' MEMBERS ON VIO -- LOCATE ===>'
         DCS   SF,UNPHI,RTA,(2,22),X'00',SF,PROLO
         DC    C'1-TOP 2-BOT 3-END 4-SD 6-SN 7-UP 8-DN 9-SSZ 10-STTR 11+
               -SID'
         DCS   RTA,(3,5),C' ',C'NAME',RTA,(3,17),C' '
         DC    C'TTR'
         DCS   RTA,(3,25),C' '
         DC    C'VV.MM  CREATED  LAST MODIFIED  SIZE  INIT   MOD   ID'
         DC    CL4' '
STMONOLN EQU   *-STATMONO
STATCOLR DCS   X'C1',SA,COLOUR,WHITE,SBA,(1,1),SF,PROHI
         DC    55C'-',X'602020202120',C' MEMBERS ON VIO -- LOCATE ===>'
         DCS   SF,UNPHI,SA,COLOUR,RED,SA,HILITE,USCORE,RTA,(2,22),X'00'
         DCS   SA,HILITE,NORMAL,SF,PROLO,SA,COLOUR,TURQ
         DC    C'1-TOP 2-BOT 3-END 4-SD 6-SN 7-UP 8-DN 9-SSZ 10-STTR 11+
               -SID'
         DCS   RTA,(3,5),C' ',SA,COLOUR,YELLOW,C'NAME',RTA,(3,17),C' '
         DC    C'TTR'
         DCS   RTA,(3,25),C' '
         DC    C'VV.MM  CREATED  LAST MODIFIED  SIZE  INIT   MOD   ID'
         DC    CL4' '
STCOLRLN EQU   *-STATCOLR
         DS    0D                  END OF CSECT
         TITLE '  R E V P O D I R   -   D Y N A M I C   A R E A  '
@DYNAREA DSECT                   MAPPING OF START OF DYNAMIC AREA
         DS    18F               WORKING SAVE AREA
POSAVE2  DS    18F               SAVE AREA FOR CALLING REVIEW2
FREEMRGS EQU   *,8               FREEMAIN REGISTER VALUES
FREEMRG0 DS    F                 FREEMAIN REGISTER 0 VALUE
FREEMRG1 DS    F                 FREEMAIN REGISTER 1 VALUE
TOPMEMAD DS    F                 TOP MEMBER ENTRY ADDRESS SAVE AREA
LASTADDR DS    F                 LAST MEMBER ENTRY ADDRESS SAVE AREA
MAXADDR  DS    F                 TOP USABLE ADDRESS OF DIRENTS
BLKREADS DS    F                 DIRECTORY BLOCK READ COUNTER
TOTPGMSZ DS    F                 TOTAL SIZE OF REAL PROGRAMS
TOTSPFSZ DS    F                 TOTAL LINE COUNT OF REAL SPFD MEMBERS
PUTCURSR DS    XL4               CURSOR POSITION TRAILER
SELMEMNM DS    CL10              USER SELECTED MEMBER + CONCAT'N NO.
CONCTOPN DS    H                 NO. OF CONCATENATED DIRECTORIES READ
DIRINPUT DS    CL256             PDS DIRECTORY BLOCK & TGET BUFFER
         SPACE
         PRINT NOGEN
         SPACE
DIRDCB   DCB   DSORG=PS,MACRF=GM,RECFM=F,LRECL=256,BLKSIZE=256,        +
               DDNAME=DYNAM,BUFNO=16,EODAD=EOPDSDIR     (4K OF BUFFERS)
         SPACE
         PRINT GEN
         SPACE
DYNSCRN  DS    XL3               ROOM FOR COLOUR PREFIX
DIRSCRN  DCS   X'C1',SBA,(1,1),SF,PROHI
DIRHDG   DC    55C'-'
DIRMEMCT DC    X'602020202120',C' MEMBERS ON '
POVOLUME DC    C'VIO --'
         DC    C' LOCATE ===>'
         DCS   SF,UNPHI,RTA,(2,22),X'00',SF,PROLO
         DC    C'1-TOP 2-BOT 3-END 4-SD 6-SN 7-UP 8-DN 9-SSZ 10-STTR 11+
               -SID'
         DCS   RTA,(3,5),C' ',C'NAME',RTA
MONOHDG  DCS   (3,17),C' '
         DC    C'TTR'
         DCS   RTA,(3,25),C' '
         DC    C'VV.MM  CREATED  LAST MODIFIED  SIZE  INIT   MOD   ID'
         DC    CL4' '
MONOMEMS DS    41CL82            UP TO 43 LINES FOR AN 80 COLUMN SCREEN
         ORG   DYNSCRN           ALLOCATE SPACE FOR EXTENDED ATTRIBUTES
         DCS   X'C1',SA,COLOUR,WHITE,SBA,(1,1),SF,PROHI
         DC    55C'-',X'602020202120',C' MEMBERS ON VIO -- LOCATE ===>'
         DCS   SF,UNPHI,SA,COLOUR,RED,SA,HILITE,USCORE,RTA,(2,22),X'00'
         DCS   SA,HILITE,NORMAL,SF,PROLO,SA,COLOUR,TURQ
         DC    C'1-TOP 2-BOT 3-END 4-SD 6-SN 7-UP 8-DN 9-SSZ 10-STTR 11+
               -SID'
         DCS   RTA,(3,5),C' ',SA,COLOUR,YELLOW,C'NAME',RTA
COLORHDG DCS   (3,17),C' '
         DC    C'TTR'
         DCS   RTA,(3,25),C' '
         DC    C'VV.MM  CREATED  LAST MODIFIED  SIZE  INIT   MOD   ID'
         DC    CL4' '
COLRMEMS DS    60CL88  UP TO 62 LINES FOR AN 80 COLUMN SCREEN GYP93274
DIRENTS  DS    0D                IN-CORE MEMBER LIST STARTS HERE
         EJECT
**********************************************************************
*                                                          *         *
*         FORMAT FOR REVIEW IN-CORE DIRECTORY ENTRIES      *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
*        COMMON BASE SECTION
*        +0    MEMBER NAME
*        +8    RELATIVE CONCATENATION NUMBER OF PDS CONTAINING MEMBER
*        +A    TTR OF FIRST BLOCK OF MEMBER
*        +D    ALIAS FLAG AND USER DATA LENGTH OF DISK DIRECTORY ENTRY
*        +E    TOTAL LENGTH OF THIS ENTRY (H'16' FOR STANDARD ENTRY)
*       +10    END OF STANDARD INTERNAL ENTRY
         SPACE
*        SYSTEM STATUS INFORMATION ONLY SECTION
*       +10    SSI DATA
*       +14    TOTAL LENGTH OF THIS ENTRY (H'22')
*       +16    END OF SSI INTERNAL ENTRY
         SPACE
*        SPF/PFD STATISTICS SECTION
*       +10    VERSION      (100 FOR IMS REFERAL DETAILS)
*       +11    MODIFICATION LEVEL   (IMS REFERAL MEMBER TYPE FLAG)
*       +12    CREATION DATE
*       +16    LAST MODIFICATION DATE
*       +1A    LAST MODIFICATION TIME
*       +1C    CURRENT SIZE
*       +1E    INITIAL SIZE
*       +20    MODIFIED RECORD COUNT
*       +22    MODIFYING USERID     (RELATED IMS FORMAT IF MSG OR FMT)
*       +2A    TOTAL LENGTH OF THIS ENTRY (H'44')
*       +2C    END OF SPF/PFD STATISTICS ENTRY
         SPACE
*        LOAD MODULE COMMON SECTION
*       +10    LOAD MODULE ATTRIBUTES
*       +1C    LENGTH OF PROGRAM AUTHORIZATION CODE
*       +1D    PROGRAM AUTHORIZATION CODE
*       +1E    END OF LOAD MODULE COMMON SECTION
         SPACE
*        LOAD MODULE SECTION
*       +1E    TOTAL LENGTH OF THIS ENTRY (H'32')
*       +20    END OF LOAD MODULE ENTRY
         SPACE
*        LOAD MODULE SYSTEM STATUS INFORMATION SECTION
*       +1E    SSI DATA
*       +22    TOTAL LENGTH OF THIS ENTRY (H'36')
*       +24    END OF LOAD MODULE SSI ENTRY
         SPACE
*        LOAD MODULE ALIAS SECTION
*       +1E    LOAD MODULE NAME OF WHICH THIS ENTRY IS AN ALIAS
*       +26    TOTAL LENGTH OF THIS ENTRY (H'40')
*       +28    END OF LOAD MODULE ALIAS ENTRY
         SPACE
*        IMS COMMON SECTION
*       +12    MEMBER SIZE
         SPACE
*        IMS SIZE ONLY SECTION
*       +16    TOTAL LENGTH OF THIS ENTRY (H'24')
*       +18    END OF IMS SIZE ONLY ENTRY
         SPACE
*        IMS ACB ONLY SECTION
*       +15    ACBLIB MEMBER TYPE FLAG BYTE
         SPACE
*        IMS FORMAT/ACB COMMON SECTION
*       +16    CREATION DATE
*       +1A    CREATION TIME
*       +1C    TOTAL LENGTH OF THIS ENTRY (H'30')
*       +1E    END OF IMS FORMAT/ACB ENTRY
         SPACE 2
*        SORTING OF PDS DIRECTORY ENTRIES WAS INSPIRED BY THE
*        'FLIST' CMS COMMAND (FL, FILEL, FILELIST AND OTHER
*        SIMILAR COMMANDS).  IT WAS IMPLEMENTED A COUPLE YEARS
*        BEFORE ISPF PDS DIRECTORY SORTS ARRIVED ON THE SCENE.
         TITLE '  R E V S O R T E  '
**********************************************************************
*                                                          *         *
*         REVIEW ENTRY REVERSE SORT ENHANCER               *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*           THIS ROUTINE PROVIDES THE CAPABILITY OF SPEEDING UP      *
*        REVPODIR INTERNAL ENTRY SORTS BY MOVING ENTRIES MORE        *
*        THAN THE ONE SLOT DISPLACEMENT PERFORMED BY A BUBBLE        *
*        SORT "COMPARE-AND-CONDITIONALLY-SWAP" CYCLE.  ENTRIES       *
*        TO BE COMPARED ARE NOT ADJACENT BUT EQUI-DISTANTLY          *
*        OPPOSITE THE CENTRE OF THE INTERNAL DIRECTORY.  HENCE,      *
*        FIRST IS COMPARED WITH LAST, SECOND WITH SECOND LAST,       *
*        AND SO ON.  THUS, IN ONE PASS A WORST CASE MAY BE           *
*        CHANGED INTO A BEST CASE BEFORE BUBBLE SORT PROCESSING.     *
*           INTERNAL ENTRIES MAY HAVE DIFFERENT SIZES PREVENTING     *
*        IN-PLACE SWAPS BEING DONE.  THEREFORE, A DYNAMIC AREA       *
*        IS GETMAINED, ITS SIZE THE SAME AS THAT OF THE INTERNAL     *
*        DIRECTORY TO BE SORTED.  IF THE GETMAIN FAILS THEN THIS     *
*        PRE-SORTING IS NOT PERFORMED; CONTROL IS RETURNED TO        *
*        REVPODIR WHERE BUBBLE SORTING WILL ACCOMPLISH THE ENTIRE    *
*        SORT WITHOUT LOSS OF FUNCTION.                              *
*           THE RETURN CODE, THOUGH AVAILABLE, IS NOT EXAMINED       *
*        UPON RETURN BECAUSE THIS ROUTINE PROVIDES ONLY PERFORMANCE  *
*        AND NOT FUNCTIONAL BENEFITS.  'DOUBLE' IS AVAILABLE AS      *
*        A WORK VARIABLE HERE IF REQUIRED FOR FUTURE EXPANSIONS.     *
*        SIMILARLY, THE DYNAMIC PREFIX MAY BE EXPANDED IF NECESSARY. *
*                                                                    *
**********************************************************************
* REGISTERS ON ENTRY  R9 -> @DATA                                    *
*                     R13-> @DYNAREA                                 *
* DURING PROCESSING   R3 -> GETMAINED AREA                           *
* RETURN CODES        R15 = 0  PROCESSING COMPLETE - NOTHING DONE    *
*                     R15 = 2  PROCESSING COMPLETE - SOMETHING DONE  *
*                     R15 = 4  GETMAIN FAILED - NOTHING DONE         *
**********************************************************************
         SPACE
REVSORTE CSECT                     PRE-SORT PDS DIRECTORY ENTRIES
         B     @SORTE-*(,R15)
         DC    AL1(9),CL9'REVSORTE'
@SORTE   STM   R14,R12,12(R13)
         LR    R11,R15
         USING REVSORTE,R11
         L     R2,FREEMRG0         GET SIZE OF @DYNAREA
         LA    R5,DIRENTS-4092                                GYP93274
         LA    R5,4092(,R5)        POINT TO IN-CORE ENTRIES   GYP93274
         L     R4,LASTADDR         POINT TO LAST IN-CORE ENTRY
         SR    R4,R5               GET SIZE OF DIRECTORY DATA
         LA    R15,@DYNAREA
         SR    R5,R15              GET SIZE OF @DYNAREA NOT IN DIRENTS
         SR    R2,R5               GET SIZE OF DIRENTS
         LA    R2,16(,R2)          GET SIZE OF NEW DYNAMIC AREA
         LR    R0,R2               COPY IT
         GETMAIN RC,LV=(0)         GET MAIN STORAGE
         LTR   R15,R15             WAS THE GETMAIN SUCCESSFUL?
         BZ    SHELLIT             YES SO PROCEED
         L     R14,12(,R13)        NO, SO LOAD RETURN ADDRESS
         LM    R0,R12,20(R13)      RESTORE OTHER REGISTERS
         BR    R14                 RETURN WITH GETMAIN RETURN CODE
         SPACE
SHELLIT  ST    R15,DOUBLE          CLEAR A WORD FOR FLAGS
         LR    R3,R1               COPY NEW AREA START ADDRESS
         STM   R2,R4,0(R3)         SAVE FREEMAIN VALUES AND DIR SIZE
         LA    R4,DIRENTS-4092                                GYP93274
         LA    R4,4092(,R4)        POINT TO CURRENT FIRST ENTRY
         L     R5,LASTADDR         POINT TO CURRENT LAST ENTRY
         LA    R6,16(,R3)          POINT TO FUTURE FIRST ENTRY
         LR    R7,R6
         A     R7,8(,R3)           POINT PAST FUTURE LAST DATA ENTRY
         BCTR  R5,0
         BCTR  R5,0                POINT TO LAST DATA LENGTH COUNT
         SPACE
SHELLOOP SH    R5,0(,R5)           BACK UP AN ENTRY
         LA    R8,2(,R5)           ASSUME POSITION SWAP TO BE DONE
         LR    R10,R4
         LA    R1,2                INITIALIZE "SHELL SWAPPED" FLAG
         TM    STATUS3,DATESORT    SORT BY DATE AFTER SORT BY TTR?
         BO    LOADSHEL            YES, JUST REVERSE POSITIONS
         CLI   STATUS3,TTRSORT     SORTING BY TTR?
         BO    TTRSHELL            YES, GO TEST TTRS
         CLC   0(10,R4),2(R5)      NO, COMPARE MEMBER NAMES + CONCAT NO
         BH    LOADSHEL            OUT OF ORDER SO SWAP THEM
KEEPSHEL XR    R8,R10              MEMBERS ARE IN ORDER
         XR    R10,R8                      SO PRESERVE
         XR    R8,R10                      THEIR POSITIONS
         SLR   R1,R1               RESET "SHELL SWAPPED FLAG"
         B     LOADSHEL            GO COPY THIS SHELL'S TWO ENTRIES
         SPACE
LOADSHL1 MVC   0(0,R6),0(R8)       <<< EXECUTED >>>
LOADSHL2 MVC   0(0,R7),0(R10)      <<< EXECUTED >>>
SETSHLRC OI    DOUBLE+3,0          <<< EXECUTED >>>
         SPACE
TTRSHELL CLC   8(6,R4),10(R5)      COMPARE MEMBER CONCAT NO.,TTR,ALIAS
         BNH   KEEPSHEL            CORRECT ORDER SO DO NOT SWAP THEM
LOADSHEL EX    R1,SETSHLRC         PERHAPS SET "SOMETHING DONE" FLAG
         LH    R1,14(,R8)          GET LENGTH OF FUTURE EARLIER ENTRY
         BCTR  R1,0                GET LENGTH CODE
         EX    R1,LOADSHL1         COPY THE EARLIER ENTRY
         LA    R6,1(R1,R6)         POINT PAST THIS ENTRY
         CR    R6,R7               COMPARE UPPER AND LOWER POINTERS
         BE    RSTRSHLS            DONE EVERY MEMBER SO COPY THEM BACK
         BH    SHLABEND            *** LOGIC ERROR ***
         LH    R1,14(,R10)         GET LENGTH OF FUTURE LATER ENTRY
         SR    R7,R1               POINT TO ITS NEW SLOT
         BCTR  R1,0                GET LENGTH CODE
         EX    R1,LOADSHL2         COPY THE LATER ENTRY
         CR    R6,R7               COMPARE UPPER AND LOWER POINTERS
         BE    RSTRSHLS            DONE EVERY MEMBER SO COPY THEM BACK
         AH    R4,14(,R4)          ADJUST EARLIER SOURCE POINTER
         B     SHELLOOP            PROCESS NEXT SHELL
         SPACE
RSTRSHLS CLI   DOUBLE+3,0          ANY SHELL SWAPPED AT ALL?
         BE    SHLOADED            NO, SO DON'T RESTORE IDENTICAL DATA
         L     R4,8(,R3)           GET LENGTH OF ALL ENTRIES TO RESTORE
         LA    R6,DIRENTS-4092                                GYP93274
         LA    R6,4092(,R6)        GET RESTORE TARGET ADDRESS GYP93274
         LA    R5,16(,R3)          GET RESTORE SOURCE ADDRESS
         LA    R1,256              GET MAXIMUM MVC INSTRUCTION CAPACITY
SHELLDLP CR    R4,R1               LESS THAN 256 BYTES TO MOVE?
         BL    SHLOADND            YES, JUST LOAD THE END
         MVC   0(256,R6),0(R5)     LOAD 256 BYTES
         AR    R5,R1               ADJUST SOURCE POINTER
         AR    R6,R1               ADJUST TARGET POINTER
         SR    R4,R1               ADJUST REMAINING DATA COUNTER
         BM    SHLABEND            *** LOGIC ERROR ***
         BZ    SHLOADED            THAT'S THE END (MULTIPLE OF 256)
         B     SHELLDLP            DO ANOTHER LOAD LOOP
SHELDEND MVC   0(0,R6),0(R5)       <<< EXECUTED >>>
SHLOADND BCTR  R4,0                GET LENGTH CODE OF END OF DATA
         EX    R4,SHELDEND         LOAD THE END OF THE ENTRIES
         SPACE
SHLOADED LM    R0,R1,0(R3)         LOAD FREEMAIN REGISTER VALUES
         FREEMAIN RU,LV=(0),A=(1)  FREE THE TEMPORARY HOLD AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         L     R15,DOUBLE          EVERTHING IS HUNKY-DORY SO SET RC
         BR    R14                 TIME FOR A BUBBLE BATH
SHLABEND DC    H'193'              X'00C1' FOR INTENTIONAL S0C1 ABEND
         SPACE
         DROP  R11,R13             REVSORTE, @DYNAREA
         SPACE
         LTORG
         SPACE
         DS    0D                  END OF CSECT
         TITLE '  R E V S O R T E   -   D Y N A M I C   A R E A  '
**********************************************************************
*                                                          *         *
*         FORMAT FOR REVSORTE DYNAMIC HOLD AREA            *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
*        +0    SIZE OF THIS GETMAINED AREA  (USED BY FREEMAIN)
*        +4    ADDRESS OF THIS GETMAINED AREA  (USED BY FREEMAIN)
*        +8    SIZE OF DIRENTS DATA ENTRIES (BEFORE LASTADDR)
*        +C    SPARE (FOR DOUBLEWORD ALIGNMENT)
*       +10    END OF REVSORTE FIXED LENGTH DYNAMIC PREFIX
*       +10    REORDERED INTERNAL ENTRIES
*              +10    FIRST REORDERED INTERNAL ENTRY MEMBER NAME
*              +18    FIRST REORDERED INTERNAL ENTRY REL. CONCAT. NO.
*              +1A    FIRST REORDERED INTERNAL ENTRY TTR
*              +1D    FIRST REORDERED INTERNAL ENTRY ALIAS FLAG + COUNT
*              +1E    FIRST REORDERED INTERNAL ENTRY LENGTH FIELD
         SPACE 2
*         PERFORMANCE COMPARISON TEST RESULTS
*
*  THE FOLLOWING TEST WAS DONE FOR SEVERAL PARTITIONED DATA SETS:
*  TTR-SORT, SIZE-SORT, SSI/VV.MM-SORT, TTR-SORT, DATE-SORT, NAME-SORT
*
*  "NEW" = REVIEW USING REVSORTE.   "OLD" = REVIEW WITHOUT REVSORTE.
*
*  DATA-TYPE MEMBER-COUNT NEW-TCB-TIME/OLD-TCB-TIME
*  --------- ------------ -------------------------
*   LINKLIB      2041          82.9%
*   FORMAT       2491          74.8%
*   ACBLIB        661          59.2%
*   REFERAL       460          51.9%
*   SPFEDIT        10          85.7%  (NOT INVOKED WITH < 10 MEMBERS)
*  **TOTAL**                   75.9%  (176.89/232.98 4381 CPU SECS)
         TITLE '  R E V O F F L D  '
**********************************************************************
*                                                          *         *
*         REVIEW PDS MEMBER OFFLOAD PROCESSOR              *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*           THIS ROUTINE PROVIDES THE CAPABILITY OF OFFLOADING       *
*        ALL OR SOME MEMBERS OF THE PDS BEING REVIEWED TO THE        *
*        SEQUENTIAL FILE SPECIFIED BY THE SYSUT2 DDNAME.  SYSUT2     *
*        MUST BE PRE-ALLOCATED BEFORE OFFLOADING IS ALLOWED.         *
*           THE OFFLOAD OUTPUT IS IN IEBUPDTE-LIKE FORMAT WITH       *
*        './ ADD ' STATEMENTS PRECEEDING EACH MEMBER'S DATA.  ONLY   *
*        FIXED LENGTH OR VARIABLE LENGTH RECORD FORMAT FILES CAN     *
*        BE OFFLOADED.  THE LOGICAL RECORD LENGTH OF SYSUT2 WILL     *
*        BE THAT OF THE INPUT PDS OR 80, WHICHEVER IS GREATER.       *
*        OFFLOAD SUPPORTS ALL ALLOWABLE LRECL VALUES GREATER THAN    *
*        ZERO AND LESS THAN 32K.                                     *
*           STANDARD 4-BYTE SSI INFORMATION FROM MEMBER USER-DATA    *
*        IS SUPPLIED ON THE CONTROL STATEMENTS, AS IS SPF STATS      *
*        IN "PDSLOAD" FORMAT.  ANY OTHER FORM OF USER DATA IS NOT    *
*        OFFLOADED.                                                  *
*           MEMBERS ARE OFFLOADED IN MEMBER SELECTION LIST ORDER.    *
*        WHEN OFFLOADING MEMBERS SORTED IN TTR ORDER './ ALIAS '     *
*        STATEMENTS WILL BE GENERATED FOR ALIASES OF OFFLOADED       *
*        REAL MEMBERS.  FOR CONCATENATED FILES WITH DUPLICATELY      *
*        NAMED MEMBERS, THE FIRST OCCURRENCE OF A MEMBER NAME        *
*        WILL BE OFFLOADED FOR EVERY OCCURRENCE OF THE MEMBER IN     *
*        THE CONCATENATION EXCEPT WHEN MEMBERS ARE SORTED IN         *
*        COLLATING SEQUENCE ORDER, WHEN A GIVEN MEMBER NAME WILL     *
*        ONLY BE OFFLOADED ONCE.                                     *
*           OFFLOAD OUTPUT CAN BE USED AS INPUT TO IEBUPDTE ONLY     *
*        TO RECREATE MEMBERS FROM FIXED LENGTH RECORD PDS'S WITH     *
*        RECORD LENGTHS IN THE RANGE OF 1 TO 80.  IEBUPDTE WILL      *
*        NOT RECREATE SPF STATISTICS.  IN ORDER TO RECREATE SPF      *
*        STATISTICS AND/OR VARIABLE LENGTH RECORDS AND/OR FIXED      *
*        LENGTH RECORDS WITH MORE THAN 80 BYTES, A USER DEVELOPED    *
*        UTILITY SUCH AS PDSLOAD OR UPDTE MUST BE USED.              *
*           WHENEVER THE CHARACTERS './' ARE ENCOUNTERED AS THE      *
*        FIRST TWO DATA BYTES OF A RECORD, THEY WILL BE REPLACED     *
*        BY THE CHARACTERS '><' IN THE OUTPUT FILE.                  *
*           ATTENTION INTERRUPTS CAN PREMATURELY TERMINATE THE       *
*        OFFLOAD PROCESS, BUT ONLY AT THE END OF A MEMBER.  ONCE     *
*        PROCESSING THE LAST MEMBER HAS STARTED THE OFFLOAD WILL     *
*        RUN TO COMPLETION.  THE '*INT*' STRING IN THE './ ENDUP '   *
*        CARD INDICATES TERMINATION DUE TO ATTENTION INTERRUPT.      *
*                                                                    *
**********************************************************************
* REGISTERS ON ENTRY  R9 -> @DATA                                    *
*                     R13-> @DYNAREA                                 *
* DURING PROCESSING   R3 -> @DYNAREA                                 *
*                     R5 -> SYSUT2 OUTPUT DCB                        *
*                     R13-> GETMAINED AREA                           *
* RETURN CODES        R15 = 0  PROCESSING COMPLETE                   *
**********************************************************************
         SPACE
REVOFFLD CSECT                     OFFLOAD PDS MEMBERS TO SYSUT2
         B     @OFFLD-*(,R15)
         DC    AL1(9),CL9'REVOFFLD'
@OFFLD   STM   R14,R12,12(R13)
         LR    R11,R15
         USING REVOFFLD,R11
         LA    R0,@OFFWKLN
         GETMAIN R,LV=(0)          GET MAIN STORAGE
         ST    R1,8(,R13)          CHAIN SAVE AREAS
         ST    R13,4(,R1)
         LR    R3,R13              POINT TO @DYNAREA
         USING @DYNAREA,R3
         LR    R13,R1              POINT TO GETMAINED AREA
         USING @OFFLDWK,R13
         XC    OFFLDPRV,OFFLDPRV   ZERO PREVIOUS MEMBER DETAILS
         SLR   R0,R0
         ST    R0,OFFVREC          ZERO RDW
         MVC   OFFDCB(OFFDCBLN),STOFFDCB    INITIALIZE OUTPUT DCB
         LA    R5,OFFDCB
         USING IHADCB,R5               (LET USER OR DFP CHOOSE BLKSIZE)
         MVC   DCBRECFM,MYDSCB-44+84
         NI    DCBRECFM,X'C0'      MAKE RECFM=F OR RECFM=V
         OI    DCBRECFM,X'10'      MAKE RECFB=FB OR RECFM=VB
         LH    R1,MYDSCB-44+88     LOAD THE LOGICAL RECORD LENGTH
         STH   R1,DCBLRECL         SUPPLY OUTPUT RECORD LENGTH
         LA    R0,80               GET MINIMUM OUTPUT RECORD LENGTH
         CR    R1,R0               RECORD LENGTH LONG ENOUGH?
         BNL   OFFLDOPN            YES
         STH   R0,DCBLRECL         NO, MAKE RECORD LENGTH THE MINIMUM
         SPACE
OFFLDOPN MVI   OPEND,X'80'              OPEN THE OUTPUT DCB
         OPEN  ((R5),OUTPUT),MF=(E,OPEND)
         LA    R4,DIRENTS-4092                                GYP93274
         LA    R4,4092(,R4)        POINT TO FIRST INTERNAL ENTRY
         OI    STATUS5,OFFLDSW     NOW IN OFFLOAD MODE
         SPACE
OFFMEMLP C     R4,LASTADDR         END OF INTERNAL DIRECTORY ENTRIES?
         BNL   OFFENDUP            YES, END UP
         TM    STATUS4,FLAGI       ATTENTION INTERRUPT?
         BO    OFFATTN             YES, TERMINATE OFFLOAD
         TM    13(R4),X'80'        ALIAS MEMBER?
         BO    OFFALIAS            YES
         ICM   R14,B'1111',OFFLDCNT OFFLOADING EVERYTHING?
         BZ    OFFITALL            YES
         TM    13(R4),X'40'        NO, OFFLOADING THIS ONE?
         BZ    OFFNXTMM            NO, TRY THE NEXT
OFFITALL BAL   R14,OFFSAME         HANDLE DUPLICATE NAME IN CONCAT'N
         MVI   OFFFREC,C' '        BLANK THE CONTROL STATEMENT RECORD
         MVC   OFFFREC+1(255),OFFFREC
         MVC   OFFFREC(L'ADDPREF),ADDPREF
         MVC   OFFFREC+L'ADDPREF(8),0(R4)
         LA    R1,OFFFREC+L'ADDPREF+8
OFFTRLP1 BCTR  R1,0                BACK UP ONE BYTE
         CLI   0(R1),C' '          TRAILING BLANK?
         BE    OFFTRLP1            YES
         BAL   R14,OFFDATA         APPEND ANY RELEVANT USER DATA
         BAL   R14,OFFSTMT         OUTPUT THE ADD CONTROL STATEMENT
         MVC   $MEMBER,0(R4)       SUPPLY THE MEMBER NAME TO PHASE 2
         SLR   R0,R0
         STH   R0,RC               ZERO ANY PREVIOUS BLDL FAILURE
         L     R0,CBPRM3           SAVE REVPODIR TPUT BUFFER ADDRESS
         ST    R5,CALLPARM         SAVE THE SYSUT2 DCB ADDRESS
         LA    R15,OFFFREC+80      POINT TO EIGHTY BLANKS
         ST    R15,CALLPARM+4      PASS IT TO PHASE 2
         LA    R15,POSAVE2         POINT TO NEW SAVE AREA
         ST    R15,8(,R13)         LINK SAVE AREAS
         ST    R13,4(,R15)
         L     R15,=V(REVIEW2)     GET ADDRESS OF PHASE 2
         STM   R14,R12,12(R13)     SAVE ALL REGISTERS
         L     R13,8(,R13)         POINT TO NEW SAVE AREA
         BALR  R14,R15             CALL REVIEW PHASE 2
         L     R13,4(,R13)         POINT TO OLD SAVE AREA
         LM    R0,R12,20(R13)      RESTORE ALL EXCEPT BALR REGISTERS
         ST    R0,CBPRM3           RESTORE REVPODIR TPUT BUFFER ADDRESS
         LH    R15,RC              GET BLDL RETURN CODE
         LTR   R15,R15             WAS THE MEMBER FOUND?
         BZ    OFFNXTMM            YES, CONTINUE
         XC    OFFLDPRV,OFFLDPRV   INVALIDATE PREVIOUS MEMBER DETAILS
         MVI   OFFFREC,C' '        BLANK THE CONTROL STATEMENT RECORD
         MVC   OFFFREC+1(255),OFFFREC
         MVC   OFFFREC(L'BDBLDMSG),BDBLDMSG
         MVC   OFFFREC+L'BDBLDMSG(8),0(R4)
         LA    R1,OFFFREC
         LA    R0,L'BDBLDMSG+8
         STH   R0,OFFVREC          UPDATE RDW
         TPUT  (1),(0),R           LINE MODE I/O SHOULD GET NOTICED
         BAL   R14,OFFSTMT         SUPPLY DUMMY DATA FOR IEBUPDTE
OFFNXTMM AH    R4,14(,R4)          POINT TO NEXT INTERNAL ENTRY
         B     OFFMEMLP            PROCESS THE NEXT DIRECTORY ENTRY
         SPACE
OFFENDUP NI    STATUS4,255-FLAGI   RESET ATTENTION FLAG
OFFATTN  MVI   OFFFREC,C' '        BLANK THE CONTROL STATEMENT RECORD
         MVC   OFFFREC+1(255),OFFFREC
         MVC   OFFFREC(L'ENDUPREF),ENDUPREF
         TIME  DEC
         ST    R0,DOUBLE           SHOW THE CURRENT TIME (HH:MM)
         UNPK  OFFFREC+L'ENDUPREF+1(3),DOUBLE(2)     HH
         MVI   OFFFREC+L'ENDUPREF+3,C':'
         UNPK  OFFFREC+L'ENDUPREF+4(3),DOUBLE+1(2)   MM
         MVC   OFFFREC+L'ENDUPREF+6(3),=C' ON'
         LR    R6,R4               SAVE LKEDDATE WORK REGISTERS
         LR    R7,R5
         LR    R4,R1               COPY THE CURRENT DATE
         L     R15,=V(LKEDDATE)    SHOW THE CURRENT DATE (YY/MM/DD)
         BALR  R14,R15
         LR    R4,R6               RESTORE LKEDDATE WORK REGISTERS
         LR    R5,R7
         MVC   OFFFREC+L'ENDUPREF+10(8),DOUBLE
         LA    R1,OFFFREC+L'ENDUPREF+18
         BAL   R14,OFFDATAL        UPDATE RDW
         TM    STATUS4,FLAGI       ATTENTION INTERRUPT?
         BZ    OFFFINAL            NO, CONTINUE
         MVC   OFFFREC+9(5),=C'*INT*'  YES, FLAG INTERRUPTION
OFFFINAL BAL   R14,OFFSTMT         OUTPUT THE ENDUP CONTROL STATEMENT
         MVI   CLOSED,X'80'         CLOSE THE OUTPUT DCB
         CLOSE ((R5)),MF=(E,CLOSED)
         NI    STATUS5,255-OFFLDSW    NO LONGER IN OFFLOAD MODE
         LA    R0,@OFFWKLN
         LR    R1,R13              POINT TO DYNAMIC AREA TO BE FREED
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         FREEMAIN R,LV=(0),A=(1)   FREE @OFFLDWK
         L     R14,12(,R13)        LOAD RETURN ADDRESS
         LM    R0,R12,20(R13)      RESTORE OTHER REGISTERS
         BR    R14                 RETURN WITH FREEMAIN RETURN CODE
         SPACE 2
OFFALIAS TM    STATUS3,TTRSORT     ARE ENTRIES IN TTR ORDER?
         BZ    OFFNXTMM            NO, IGNORE ALIASES
         CLC   8(5,R4),OFFCONCT    YES, IS THIS ALIAS OF CURRENT MEM?
         BNE   OFFORFAN            NO, ALIAS IS AN ORPHAN
         MVI   OFFFREC,C' '        BLANK THE CONTROL STATEMENT RECORD
         MVC   OFFFREC+1(255),OFFFREC
         MVC   OFFFREC(L'ALIASPRF),ALIASPRF
         MVC   OFFFREC+L'ALIASPRF(8),0(R4)
         LA    R0,L'ALIASPRF+8+4
         STH   R0,OFFVREC
         BAL   R14,OFFSTMT         OUTPUT THE ALIAS CONTROL STATEMENT
         B     OFFNXTMM            ALIAS SUCCESSFULLY PROCESSED
OFFORFAN MVC   OFFFREC(L'ORPHNMSG),ORPHNMSG
         MVC   OFFFREC+16(8),0(4)  NOTIFY USER OF LOST ALIAS
         LA    R1,OFFFREC
         LA    R0,L'ORPHNMSG
         TPUT  (1),(0),R           LINE MODE I/O SHOULD GET NOTICED
         B     OFFNXTMM            ALIAS SUCCESSFULLY IGNORED
         SPACE 2
OFFSAME  TM    STATUS3,SORTMODE    ARE ENTRIES IN NAME ORDER?
         BNZ   OFFNEWNM            NO, DON'T CHECK FOR DUPLICATES
         CLC   OFFMEMNM,0(R4)      YES, IDENTICAL MEMBER NAMES?
         BE    OFFNXTMM            YES, DON'T DO IT TWICE - OMIT IT
OFFNEWNM MVC   OFFLDPRV,0(R4)      NO, SAVE LATEST MEMBER'S DETAILS
         BR    R14
         SPACE 2
OFFDATA  CLI   15(R4),22           AN SSI INTERNAL ENTRY?
         BNE   OFFNTSSI            NO
         MVC   1(5,R1),=C',SSI='   YES
         UNPK  6(9,R1),16(5,R4)    SUPPLY 8 HEX SSI DIGITS
         TR    6(8,R1),OFFLDHEX-C'0'
         MVI   14(R1),C' '         ERASE GARBAGE
         LA    R1,14(,R1)          POINT PAST END OF RECORD DATA
         B     OFFDATAL            UPDATE RDW FOR VARIABLE LENGTHS
OFFNTSSI LA    R1,1(,R1)           POINT TO FIRST BLANK
         CLI   15(R4),44           AN SPF STATISTICS INTERNAL ENTRY?
         BNE   OFFDATAL            NO
         SLR   R0,R0
         IC    R0,16(,R4)                 MODIFICATION VERSION
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  OFFFREC+21(2),DOUBLE+6(2)
         IC    R0,17(,R4)                 MODIFICATION LEVEL
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  OFFFREC+23(2),DOUBLE+6(2)
         MVI   OFFFREC+25,C'-'
         UNPK  OFFFREC+26(5),19(3,R4)         CREATION DATE
         MVI   OFFFREC+31,C'-'
         UNPK  OFFFREC+32(5),23(3,R4)     MODIFICATION DATE
         MVI   OFFFREC+37,C'-'
         UNPK  OFFFREC+38(5),26(3,R4)     MODIFICATION TIME
         MVI   OFFFREC+42,C'-'
         ICM   R0,3,28(R4)                     CURRENT SIZE
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  OFFFREC+43(5),DOUBLE+5(3)
         MVI   OFFFREC+48,C'-'
         ICM   R0,3,30(R4)                     INITIAL SIZE
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  OFFFREC+49(5),DOUBLE+5(3)
         MVI   OFFFREC+54,C'-'
         ICM   R0,3,32(R4)                    MODIFIED COUNT
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  OFFFREC+55(5),DOUBLE+5(3)
         MVI   OFFFREC+60,C'-'
         MVC   OFFFREC+61(8),34(R4)          MODIFYING USERID
         LA    R1,OFFFREC+69
OFFDATAL LA    R0,OFFVREC          POINT TO START OF RECORD
         SR    R1,R0               GET DATA BYTE COUNT
         STH   R1,OFFVREC          SUPPLY RDW
         BR    R14
         SPACE 2
OFFSTMT  ST    R14,DOUBLE          SAVE RETURN ADDRESS
         LR    R1,R5               POINT TO DCB
         LA    R0,OFFVREC
         TM    DCBRECFM,X'80'      FIXED LENGTH RECORDS?
         BZ    OFFSTMTX            NO, MUST BE VARIABLE
         LA    R0,OFFFREC          YES
         LA    R15,256
         CH    R15,DCBBLKSI        RECORD LONGER THAN 256?
         BL    OFFLDBIG            YES
OFFSTMTX PUT   (1),(0)             WRITE A RECORD
         L     R14,DOUBLE          RESTORE RETURN ADDRESS
         BR    R14
OFFLDBIG LH    R15,DCBBLKSI        YES, LOAD IT
         LA    R0,7(,R15)
         SRL   R0,3
         SLL   R0,3                ROUND UP TO DOUBLEWORD BOUNDARY
         LR    R6,R0               COPY SIZE
         GETMAIN R,LV=(0)          GET SOME STORAGE FOR THIS RECORD
         LR    R7,R1               COPY ITS ADDRESS
         LR    R0,R7               TARGET ADDRESS
         LR    R1,R6               TARGET SIZE
         LA    R14,OFFFREC         SOURCE ADDRESS
         LA    R15,256             SOURCE SIZE
         ICM   R15,8,OFFFREC+2     BLANK PAD BYTE
         MVCL  R0,R14              CREATE FULL SIZE OUTPUT RECORD
         LR    R1,R5               POINT TO DCB
         LR    R0,R7               POINT TO RECORD
         PUT   (1),(0)             WRITE A RECORD
         LR    R0,R6               LOAD RECORD AREA LENGTH
         LR    R1,R7               LOAD RECORD AREA ADDRESS
         FREEMAIN R,LV=(0),A=(1)   FREE TEMPORARY RECORD AREA
         L     R14,DOUBLE          RESTORE RETURN ADDRESS
         BR    R14
         SPACE 2
         DROP  R11,R3,R13,R5       REVOFFLD, @DYNAREA, @OFFLDWK, IHADCB
         TITLE '  R E V O F F L D   -   S T A T I C   A R E A  '
OFFLDHEX DC    C'0123456789ABCDEF'
         PRINT NOGEN
         SPACE
STOFFDCB DCB   DSORG=PS,MACRF=PM,DDNAME=SYSUT2
OFFDCBLN EQU   *-STOFFDCB
         SPACE
         PRINT GEN
ADDPREF  DC    C'./ ADD NAME='
ALIASPRF DC    C'./ ALIAS NAME='
ENDUPREF DC    C'./ ENDUP       "REVIEW" PDS MEMBER OFFLOAD AT'
BDBLDMSG DC    C'** BLDL FAILED DURING OFFLOAD FOR MEMBER '
ORPHNMSG DC    C'** ORPHAN ALIAS ???????? NOT OFFLOADED'
OFFTMSTP DC    X'4021207A20204020204B202020'
         SPACE
         LTORG
         SPACE
         DS    0D                  END OF CSECT
         TITLE '  R E V O F F L D   -   D Y N A M I C   A R E A  '
@OFFLDWK DSECT
OFFSAVE  DS    18F
OFFLDPRV DS    0XL16               INTERNAL ENTRY COMMON BASE SECTION
OFFMEMNM DS    CL8                 MEMBER NAME
OFFCONCT DS    H                   RELATIVE CONCATENATION NUMBER
OFFLDTTR DS    XL3                 TTR OF FIRST BLOCK OF MEMBER
OFFLDFLG DS    X                   ALIAS FLAG AND USER DATA H/W COUNT
OFFENTLN DS    H                   BYTE COUNT OF WHOLE INTERNAL ENTRY
         PRINT NOGEN
         SPACE
OFFDCB   DCB   DSORG=PS,MACRF=PM,DDNAME=SYSUT2
         SPACE
         PRINT GEN
OFFVREC  DS    F                   VARIABLE LENGTH RECORD RDW
OFFFREC  DS    CL256               IEBUPDTE-TYPE CONTROL STATEMENT
         DS    0D
@OFFWKLN EQU   *-@OFFLDWK
         TITLE '  R E V E D I T   -   C A L L   I S P F   E D I T O R '
**********************************************************************
*                                                          *         *
*         ISPF EDIT INTERFACE                              * AW@IDAPS*
*                                                          *         *
**********************************************************************
         SPACE
**********************************************************************
* REGISTERS           R9 -> @DATA                                    *
*                     R8 -> EDWORK                                   *
*                     R1 -> SELECTION DATA STREAM                    *
* RETURN CODES        R15 = 0      MEMBER SAVED                      *
*                     R15 = 4      MEMBER NOT SAVED                  *
*                     R15 = 14     MEMBER IN USE                     *
*                     R15 = 16     MEMBER NOT FOUND                  *
*                     R15 = 20     SEVERE ERROR - UNABLE TO CONTINUE *
*                     R15 = 30     ISPF NOT ACTIVE                   *
*                     R15 = 40     GETMAIN FAILED                    *
*                     R15 = 50     ISPLINK NOT IN SYSTEM             *
**********************************************************************
         SPACE
REVEDIT  CSECT
         B     @EDIT-*(,R15)
         DC    AL1(7),CL7'REVEDIT'
@EDIT    STM   R14,R12,12(R13)
         LR    R11,R15
         USING REVEDIT,R11
         LR    R4,R13                  COPY @DYNAREA POINTER
         LR    R5,R1                   COPY SELECTION STREAM POINTER
         SLR   R0,R0
         LA    R0,EDWKLEN              LOAD LENGTH OF DSA
         GETMAIN RC,LV=(0)             GET THE STORAGE
         LTR   R15,R15
         BZ    EDGETOK
         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS
         LA    R15,40                  SET RETURN CODE TO 40
         BR    R14                     RETURN TO CALLER
EDGETOK  DS    0H
         LR    R13,R1                  SAVE THE ADDRESS IN R13
         USING EDWORK,R13
         ST    R13,8(,R4)              STORE FORWARD AND
         ST    R4,4(,R13)              BACKCHAIN POINTERS
         LA    R15,50                  PREPARE BAD RETURN CODE OF 50
         ST    R15,16(R4)              STORE RETURN CODE
         MVC   DOUBLE,ISPLNKNM         LOAD EXPECTED ENTRY POINT NAME
         TM    OSBITS,X'13'            IS THIS OSIV/F4?
         BO    ISPFITIS                NO, SHOULD BE SOME SORT OF MVS
         MVC   DOUBLE,PFDLNKNM         YES, ISPLINK IS ALIAS OF PFDLINK
ISPFITIS DS    0H                           BUT NEED ENTRY PFDLINKX
         LOAD  EPLOC=DOUBLE,ERRET=EDITEXIT  PRE-LOAD REENTRANT MODULE
         ST    R0,ISPLNKAD             SAVE ADDRESS OF ISPLINK
         MVI   EDATASET,QUOTE          MOVE IN FIRST QUOTE
         LH    R3,$DSNAME              GET DATA SET NAME LENGTH
         LA    R1,$DSNAME-2            POINT 4 BYTES BEHIND DSN START
         LA    R7,$VOLSER
         SLR   R0,R0
         ICM   R0,3,$CONCAT            LOAD CONCAT'N NUMBER
         BZ    GETEDDSN                ZERO SO USE $DSNAME
         L     R1,ARLAREA              POINT TO FIRST RETRIEVED JFCB
EDITJFCB BCT   R0,EDJFLOOP             CHAIN THROUGH JFCBS
         B     GOTEJFCB                NOW POINTING TO CORRECT JFCB
EDJFLOOP AH    R1,0(,R1)               POINT TO NEXT JFCB
         B     EDITJFCB                PROCESS IT
GOTEJFCB LA    R7,122(,R1)             POINT TO VOLUME IN JFCB
         LA    R3,44                   GET MAXIMUM DSN LENGTH
         LA    R15,47(,R1)             POINT TO LAST DSN CHARACTER
CNCTEDLP CLI   0(R15),C' '             TRAILING BLANK?
         BNE   GETEDDSN                NO, NOW HAVE DSNAME LENGTH
         BCTR  R15,0                   YES, POINT TO PREVIOUS CHARACTER
         BCT   R3,CNCTEDLP             DECREMENT LEN AND TEST PREVIOUS
GETEDDSN LA    R2,EDATASET+1           POINT R2 AT ISPF DATASET NAME
         EX    R3,MDSN                 MOVE DATASET NAME
         AR    R2,R3                   INCREMENT DATASET POINTER
         MVI   0(R2),C'('              MOVE LEFT BRACKET
         LA    R2,1(,R2)               INCREMENT DATASET POINTER
         MVC   0(8,R2),$MEMBER         MOVE IN THE MEMBER NAME
         LA    R6,8
BLNKLOP  DS    0H                      LOOP AND SEARCH FOR THE BLANK
         LA    R2,1(,R2)                 INCREMENT POINTER
         CLI   0(R2),C' '                IS IT A BLANK?
         BE    MOVRB                     YES!
         BCT   R6,BLNKLOP                NO BRANCH BACK
MOVRB    DS    0H
         MVC   0(3,R2),RIGHTBQ         MOVE RIGHT BRACKET AND QUOTE
         LA    R1,ISPCDRPL             POINT TO ISPLINK PLIST
         L     R15,ISPLNKAD            LOAD ISPLINK ENTRY POINT
         BALR  R14,R15                 CALL ISPLINK
         LTR   R15,R15                 TEST RETURN CODE
         BZ    EDITIT                  OK. THEN GO DO IT
         LA    R15,30                  SET RETCODE TO 30
         L     R4,4(,R13)              POINT TO CALLERS SAVEAREA
         ST    R15,16(R4)              STORE RETURN CODE
         B     EDRETURN                 AND RETURN
EDITIT   DS    0H                      CALL ISPF
         CLI   SACHAR,X'0E'            FUJITSU TERMINAL HARDWARE?
         BNE   EDSCRNOK                NO, COLOUR IS NOT A PROBLEM
         LA    R1,PFDEDEWA             POINT TO ERASE/WRITE ALTERNATE
         TM    STATUS2,SETSIZED        GOING BACK TO ALTERNATE SIZE?
         BO    EDERASOK                YES
         CLI   SCRNLNES+3,24           STAYING WITH ALTERNATE SIZE?
         BH    EDERASOK                YES
         LA    R1,PFDEDEW              NO, SCREEN TO CLEAR IS 24 BY 80
EDERASOK LA    R0,L'PFDEDEW            LOAD DATA STREAM LENGTH
         ICM   R1,8,=X'03'             TPUT FLAGS (FULLSCREEN)
         TPUT  (1),(0),R               RESET CHARACTER ATTRIBUTES
EDSCRNOK DS    0H
         TM    OSBITS,X'13'            OSIV/F4 E40, MSP E10 OR MSP E20?
         BNO   CALLSPFD                YES, CALL "SPFD" (SPF OR PFD)
*        UNDER PFD, MEMBERS SHOULD ONLY BE SELECTED WITH A 'B' OR 'E'
*        FROM OPTION "6".  ELSEWHERE FROM PFD IS ALRIGHT UNTIL YOU EXIT
*        COMPLETELY FROM REVIEW WHEREUPON A PFD MAIN TASK ABEND OCCURS.
*        A 'CONTROL ERRORS RETURN' WRECKS EVEN THIS CAPABILITY.
*        (NOTE THAT PFD DOES NOT SUPPORT RECURSIVE BROWSE OR EDIT.)
         SPACE
         LA    R1,ISPCERPL             POINT TO ISPLINK PLIST
         L     R15,ISPLNKAD            LOAD ISPLINK ENTRY POINT
         BALR  R14,R15                 CALL ISPLINK
CALLSPFD LA    R1,EDITCMD
         CLI   3(R5),C'B'              CAN'T INTEREST YOU IN BROWSE?
         BNE   EDITITIS                NO
         LA    R1,BRWSCMD
EDITITIS ST    R1,EPLIST
         LA    R1,EDATASET
         ST    R1,EPLIST+4
         ST    R7,EPLIST+8             POINT TO VOLUME SERIAL NUMBER
         OI    EPLIST+8,X'80'          INDICATE LAST PARAMETER
         LA    R1,EPLIST               POINT TO ISPLINK PLIST
         L     R15,ISPLNKAD            LOAD ISPLINK ENTRY POINT
         BALR  R14,R15                 CALL ISPLINK
         L     R4,4(,R13)              POINT TO CALLERS SAVEAREA
         ST    R15,16(R4)              STORE RETURN CODE
         SPACE
         LA    R1,ISPCDRPL             POINT TO ISPLINK PLIST
         L     R15,ISPLNKAD            LOAD ISPLINK ENTRY POINT
         BALR  R14,R15                 CALL ISPLINK
EDRETURN DS    0H
         DELETE EPLOC=DOUBLE
EDITEXIT DS    0H
         NI    STATUS4,255-FLAGI       RESET ATTENTION FLAG
         LA    R0,EDWKLEN              LOAD LENGTH OF DSA
         LR    R1,R13                  PREPARE FOR FREEMAIN
         L     R13,4(,R13)             POINT TO CALLERS SAVEAREA
         FREEMAIN R,LV=(0),A=(1)       FREE DSA
         LM    R14,R12,12(R13)         RESTORE CALLERS REGISTERS
         BR    R14                     RETURN TO CALLER
         TITLE '  R E V E D I T   -   S T A T I C   A R E A  '
MDSN     MVC   EDATASET+1(0),4(R1)     <<< EXECUTED >>>
ISPCDRPL DC    A(CONTROL)
         DC    A(DISPLAY)
         DC    A(REFRESH+X'80000000')
ISPCERPL DC    A(CONTROL)
         DC    A(ERRORS)
         DC    A(RETURN+X'80000000')
ISPLNKNM DC    CL8'ISPLINK '
PFDLNKNM DC    CL8'PFDLINKX'
BRWSCMD  DC    CL8'BROWSE  '
EDITCMD  DC    CL8'EDIT    '
CONTROL  DC    CL8'CONTROL '
DISPLAY  DC    CL8'DISPLAY '
REFRESH  DC    CL8'REFRESH '
ERRORS   DC    CL8'ERRORS  '
RETURN   DC    CL8'RETURN  '
RIGHTBQ  DC    CL3')'' '
PFDEDEW  DC    X'27F540'               ESCAPE + ERASE/WRITE + WCC
PFDEDEWA DC    X'277E40'               ESCAPE + ERASE/WRITE ALT + WCC
         SPACE
         LTORG
         SPACE
         DS    0D                      END OF CSECT
         TITLE '  R E V E D I T   -   D Y N A M I C   A R E A  '
EDWORK   DSECT
EDSAVE   DS    18F
ISPLNKAD DS    A
EPLIST   DS    A
         DS    A
         DS    A
EDATASET DS    CL57
         DS    0D
EDWKLEN  EQU   *-EDWORK
         TITLE '  R E V D I V  '
**********************************************************************
*                                                          *         *
*         "DATA-IN-VIRTUAL" STORAGE MANAGER                *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
**********************************************************************
*                                                                    *
*           THIS ROUTINE PROVIDES THE CAPABILITY OF SPEEDING UP      *
*        ACCESS TO REVIEWED DATA BY SAVING PREVIOUSLY READ DATA      *
*        IN VIRTUAL STORAGE.  IT IS ONLY USED ON MVS AND MSP         *
*        SYSTEMS WITH 31-BIT ADDRESSING SO THAT DATA STORED          *
*        RESIDES ABOVE THE 16 MEGABYTE LINE.  ACCESS TO DATA         *
*        BEING READ FOR THE FIRST TIME IS NOT IMPROVED.  SINCE       *
*        THIS MEANS THAT OUT-OF-DATE DATA MAY BE BROWSED IT          *
*        IS ONLY USED FOR PARTITIONED DATA SET MEMBERS BECAUSE       *
*        PDS'S ARE RARELY OPENED FOR UPDATE-IN-PLACE PROCESSING.     *
*        (THE LATEST VERSION OF THE MEMBER BEING REVIEWED CAN BE     *
*        ACCESSED VIA THE 'NEWTOP' COMMAND.)                         *
*           THE GETMAINED AREA SIZE IS TWELVE MEGABYTES ALTHOUGH     *
*        AS LITTLE AS TWO MEGABYTES WILL BE ACCEPTABLE TO REVDIV.    *
*        IF THE AREA IS BELOW THE LINE IT IS FREED AGAIN TO PREVENT  *
*        EXHAUSTING ALL USER REGION STORAGE.  PAGE ALIGNMENT IS      *
*        SPECIFIED FOR THE GETMAIN TO OPTIMIZE PAGE RELEASE          *
*        PROCESSING.                                                 *
*           SPACE FOR THE MAXIMUM LENGTH RECORD IS RESERVED FOR      *
*        EACH RECORD.  FOR NON-FIXED-LENGTH RECORD FILES THIS IS     *
*        WASTFUL OF SPACE BUT ENABLES DIRECT ACCESS TO THE DATA      *
*        BASED ON RELATIVE RECORD NUMBER WITHOUT CHAINING THROUGH    *
*        THE STORAGE AREA, THUS KEEPING RESULTANT PAGING ACTVITY     *
*        TO A MINIMUM.                                               *
*                                                                    *
*           REVDIV EXECUTES IN 31-BIT ADDRESSABILITY MODE.           *
*                                                                    *
*           SPACE TRIMMING CAN BE PERFORMED.  THE GETMAINED AREA     *
*        SHOULD BE ON PAGE BOUNDARIES AND SO SHOULD BE ALL ZEROS     *
*        UPON FIRST ACCESS.  A X'DA' IS PLACED IN THE SECOND BYTE    *
*        OF THE WHOLE AREA STRAIGHT AFTER THE GETMAIN BEFORE PHASE   *
*        2 HAS OPENED THE FILE.  (THE FIRST FULLWORD IS THE LENGTH   *
*        INDICATOR OF THE FIRST RECORD SO THIS BYTE SHOULD ALWAYS    *
*        BE ZERO ANYWAY EXCEPT FOR AN EMPTY MEMBER OR FILE WHEN IT   *
*        WILL BE X'FF'.)  WHEN A RECORD IS STORED THIS BYTE IS       *
*        EXAMINED.  IT SHOULD ONLY BE X'DA' WHEN STORING THE FIRST   *
*        RECORD FOR THE FIRST MEMBER SELECTED.  AT RECORD STORE      *
*        TIME THE FILE IS OPEN AND THE DEB IS EXAMINED TO COUNT      *
*        THE NUMBER OF TRACKS IN THE DATA SET.  (TRIMMING IS ONLY    *
*        ATTEMPTED FOR DISK FILES.)  BASED ON THE TRACK COUNT, THE   *
*        DISK TYPE, THE RECORD FORMAT AND A COUPLE OF ARBITRARY      *
*        FUDGE FACTORS AN UPPER LIMIT TO THE "DATA-IN-VIRTUAL" SIZE  *
*        REQUIREMENT IS DETERMINED.  (REMEMBER, A 20 CYLINDER PDS    *
*        COULD HAVE ONE MEMBER WITH 20 CYLINDERS OF DATA.)  IF THIS  *
*        IS SMALLER THAN THE SIZE ALREADY ACQUIRED THEN THE EXCESS   *
*        IS FREED SO THAT A RECURSIVE 'REVIEW' WITH A DIV NEED, OR   *
*        EVEN ANOTHER PROGRAM, HAS MORE STORAGE AVAILABLE FOR USE.   *
*        THE AREA TO BE RETAINED IS ROUNDED UP TO THE NEXT PAGE      *
*        BOUNDARY.  THE WHOLE IDEA IS TO NOT DENY ACCESS TO MEGA-    *
*        BYTES OF VIRTUAL STORAGE BY OTHER PROCESSES JUST BECAUSE    *
*        OF A 'REVIEW' OF A THREE TRACK DATA SET.                    *
*           NOTE THAT GETMAINING A FEW MEGABYTES OF VIRTUAL STORAGE  *
*        AND NOT USING IT DOES NOT REALLY DEGRADE PERFORMANCE BY     *
*        ITSELF, BUT BECAUSE OF THE USUAL REGION SIZE LIMITATIONS    *
*        IT MEANS THAT OTHER PROCESSES COULD BE DENIED ACCESS TO     *
*        OPTIMAL STORAGE CAPACITIES.  (THESE "OTHER PROCESSES"       *
*        COULD ONLY PROBABLY BE INITIATED BY THE 'TSO' SUBCOMMAND.)  *
*                                                                    *
**********************************************************************
* REGISTERS ON ENTRY  R9 -> @DATA                                    *
*                     R4 -> DCB                                      *
*                     R0  = ENTRY CODE                               *
*                           0 = GETMAIN DIV STORAGE                  *
*                           4 = STORE A RECORD                       *
*                             R1 = RECORD LENGTH ON ENTRY            *
*                             R2 = RECORD ADDRESS ON ENTRY           *
*                           8 = RETRIEVE A RECORD                    *
*                             R1 = RECORD LENGTH ON EXIT             *
*                             R2 = RECORD ADDRESS ON EXIT            *
*                          12 = RELEASE DIV SYSTEM STORAGE           *
*                          16 = FREEMAIN DIV STORAGE                 *
*                                                                    *
* RETURN CODES        R15 = 0         PROCESSING COMPLETE            *
*                     R15 = 4         PROCESSING INCOMPLETE          *
**********************************************************************
         SPACE
REVDIV   CSECT                     SAVE DATA IN VIRTUAL STORAGE
REVDIV   AMODE 31                       ABOVE THE 16MEG LINE
         B     @DIV-*(,R15)
         DC    AL1(7),CL7'REVDIV'
@DIV     STM   R14,R12,12(R13)
         LR    R10,R15
         LA    R15,1
         LA    R11,4095(R15,R10)
         USING REVDIV,R10,R11
         LR    R15,R0              GET ENTRY CODE
         B     DIVENTYS(R15)       BRANCH TO ENTRY POINT
DIVENTYS B     DIVGETMN        0 - CREATE DIV STORAGE AREA
         B     DIVSTORE        4 - STORE A RECORD
         B     DIVRETRV        8 - RETRIEVE A RECORD
         B     DIVPGREL       12 - RELEASE DATA STORAGE
         B     DIVFREMN       16 - FREE DIV STORAGE AREA
         SPACE
DIVGETMN ICM   R1,B'1111',DIVREG1  POINT TO DIV AREA
         BM    DIVISBAD            DIV SETUP FAILED PREVIOUSLY
         BP    GOTDIV              DIV SETUP WORKED PREVIOUSLY
         GETMAIN VRC,LV=(12582912,2097152),LOC=(ANY,ANY),BNDRY=PAGE
         LTR   R15,R15             DID GETMAIN WORK?
         BZ    USEDIV              YES, PROCEED
DIVBELOW MVI   DIVREG1,X'FF'       NO, FLAG FAILURE
DIVISBAD LM    R14,R12,12(R13)     RESTORE REGISTERS
         LA    R15,4               LOAD NON-ZERO RETURN CODE
         BSM   0,R14               RETURN WITH FREEMAIN RETURN CODE
USEDIV   STM   R0,R1,DIVREGS       SAVE FREEMAIN VALUES
         CLI   DIVREG1,0           IS DIV AREA ABOVE THE LINE?
         BNE   GOTDIV              YES, JOLLY GOOD SO CONTINUE
         FREEMAIN RU,A=(1),LV=(0)  NO, BAD SHOW, FREE IT AGAIN
         XC    DIVREGS,DIVREGS     FLAG FREE DIV STORAGE
         B     DIVBELOW            ONLY DIV WAS BELOW THE LINE
GOTDIV   MVI   1(R1),X'DA'         FLAG DATA AREA TRIMMING REQUIREMENT
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         SLR   R15,R15             GETMAIN WAS SUCCESSFUL
         BSM   0,R14               RETURN FOR ENTRY CODE 0
         SPACE
DIVSTORE L     R5,DIVREG1          POINT TO THE DIV HOLD AREA
         CLI   1(R5),X'DA'         DATA AREA TRIMMING FLAGGED?
         BNE   DIVFFLAG            NO, NOT FIRST STORE AFTER GETMAIN
         MVI   1(R5),0             YES, REMOVE FLAG FOR FUTURE
         ICM   R3,B'1111',$UCBAD   POINT TO THE UCB
         BZ    DIVFFLAG            THERE IS NONE
         CLI   18(R3),X'20'        DASD CLASS?
         BNE   DIVFFLAG            NO, HOW LONG IS A PIECE OF TAPE?
         SLR   R15,R15             YES, REMEMBER TO CHECK IT OUT
DIVFFLAG L     R7,COUNT            GET RECORD INDEX (FIRST IS 0, ETC.)
         L     R8,SAVLRECL         GET ROUNDED MAX LRECL
         LA    R8,DIVOVHD(,R8)     ADD OVERHEAD
         MR    R6,R8               GET OFFSET INTO STORAGE AREA
         AR    R7,R8               ADD SIZE OF ANOTHER RECORD
         C     R7,DIVREG0          DOES IT FIT INTO STORAGE AREA?
         BH    DIVISBAD            NO, SORRY
         SR    R7,R8               YES, POINT BACK TO REQUIRED RECORD
         AR    R7,R5               POINT TO SPOT IN DIV AREA
         ST    R1,0(,R7)           SAVE RECORD LENGTH
         CLC   DIVHITTR,TTR        IS THIS BLOCK FURTHER INTO THE FILE?
         BNL   SAMEBLOK            NO
         MVC   DIVHITTR,TTR        YES, SAVE THE NEW HIGH TTR
SAMEBLOK MVC   4(4,R7),DIVHITTR    SAVE THE TTR OF THIS RECORD
         LTR   R1,R1               IS THE LENGTH POSITIVE?
         BZ    DIVSTORD            NO, IT IS A NULL RECORD
         BM    DIVENDOF            NO, IT IS END-OF-FILE
DIVSTRLP CH    R1,=H'256'          LENGTH LEFT LESS THAN 256
         BL    DIVSTRIT            YES, MOVE THE REST OF IT
         MVC   8(256,R7),0(R2)     NO, MOVE 256 BYTES OF IT
         LA    R2,256(,R2)         ADJUST SOURCE POINTER
         LA    R7,256(,R7)         ADJUST TARGET POINTER
         SH    R1,=H'256'          ADJUST REMAINING-DATA COUNT
         BZ    DIVSTORD            (MULTIPLE OF 256)
         B     DIVSTRLP            PROCESS NEXT BIT
DIVENDOF MVI   DIVHITTR,X'FF'      WILL NEVER GET A HIGHER TTR
         ICM   R0,B'1111',$UCBAD   THAN E-O-F HAS - GET UCB ADDRESS
         BNZ   DIVSTORD            THERE IS A UCB SO PROCEED AS NORMAL
         L     R1,COUNT
         MR    R0,R8               GET SIZE REQUIRED FOR DATA RECORDS
         LA    R1,DIVOVHD(,R1)     NEED OVERHEAD FOR THE E-O-F RECORD
         B     DIVSTRIM            TRY TO TRIM UNNECESSARY STORAGE
DIVSTRTL MVC   8(0,R7),0(R2)       <<< EXECUTED >>>
DIVSTRIT BCTR  R1,0                LESS 1 FOR EXECUTE
         EX    R1,DIVSTRTL         STORE THE TAIL OF THE RECORD
DIVSTORD LTR   R15,R15             NON-ZERO ENTRY CODE STILL THERE?
         BNZ   DIVSTORX            YES, NOT TRIMMING GETMAINED AREA NOW
         SLR   R0,R0               ERASE (UCB ADDRESS) FOR INSERT
         IC    R0,MYDSCB-44+59     GET DS1NOEPV (NUMBER OF EXTENTS)
         USING IHADCB,R4
         L     R1,DCBDEBAD         POINT TO DATA EXTENT BLOCK
         DROP  R4                  IHADCB
         LA    R15,32(,R1)         POINT TO DEB DASD SECTION
         SLR   R1,R1               ZERO TRACK COUNTER
         SLR   R14,R14             (CAN'T USE AH IF OVER 32K TRK XTNT)
DEBLOOPD ICM   R14,3,14(R15)       GET TRACKS IN THIS EXTENT
         AR    R1,R14              ACCUMULATE TRACK COUNT
         LA    R15,16(,R15)        POINT TO SECTION FOR NEXT EXTENT
         BCT   R0,DEBLOOPD         PROCESS NEXT EXTENT IF IT EXISTS
         L     R15,$UCBAD          POINT TO THE (DASD) UCB.
         SLR   R3,R3
         CLI   19(R15),X'85'       FUJITSU 6421?
         BE    DIVDSKOK            YES, USE ZERO INDEX
         CLI   19(R15),X'0F'       KNOWN DISK TYPE?
         BH    DIVSTORX            NO, SKIP WHOLE TRIMMING EXERCISE
         IC    R3,19(,R15)         LOAD DASD MODEL BYTE
         SLL   R3,2                MULTIPLY BY 4 FOR INDEX
DIVDSKOK L     R15,DIVTRKTB(R3)    LOAD MAXIMUM TRACK CAPACITY
         LTR   R15,R15             KNOWN SIZE?
         BZ    DIVSTORX            NO, SKIP WHOLE TRIMMING EXERCISE
         MR    R0,R15              GET ALLEGED MAXIMUM FILE DATA SIZE
         LTR   R0,R0               REALLY BIG FILE/MEMBER?
         BNZ   DIVSTORX            YES, DROP THE WHOLE IDEA
         SLL   R1,1                ADD EXTRAVAGANT OVERHEAD ALLOWANCE
         TM    TSTRECFM,X'80'      FIXED LENGTH RECORDS?
         BO    DIVSTRIM            YES, THIS SHOULD DO
         SLL   R1,1                NO, ADD SHORT RECORD ALLOWANCE
DIVSTRIM LA    R1,4095(,R1)
         SRL   R1,12
         SLL   R1,12               ENSURE WHOLE NUMBER OF 4K PAGES
         L     R0,DIVREG0          GET THE ORIGINAL SIZE
         CLR   R1,R0               SMALLER THAN ACTUAL SIZE ANYWAY?
         BNL   DIVSTORX            NO, FORGET ABOUT TRIMMING
         ST    R1,DIVREG0          SAVE THE NEW SIZE
         SR    R0,R1               GET THE SIZE OF THE AREA TO BE FREED
         A     R1,DIVREG1          GET ITS ADDRESS
         FREEMAIN RU,A=(1),LV=(0)  FREE STORAGE FOR RECURSIVE 'REVIEW'
DIVSTORX LM    R14,R12,12(R13)     RESTORE REGISTERS
         SLR   R15,R15             RECORD STORAGE WAS SUCCESSFUL
         BSM   0,R14               RETURN FOR ENTRY CODE 4
         SPACE
DIVRETRV L     R7,COUNT            GET RECORD INDEX (FIRST IS 0, ETC.)
         L     R8,SAVLRECL         GET ROUNDED MAX LRECL
         LA    R8,DIVOVHD(,R8)     ADD OVERHEAD
         MR    R6,R8               GET OFFSET INTO STORAGE AREA
         AR    R7,R8               ADD SIZE OF RECORD
         C     R7,DIVREG0          DID IT FIT INTO STORAGE AREA?
         BH    DIVISBAD            NO, SORRY, HAVEN'T GOT THE RECORD,
*                                  BUT AT LEAST CHECKPOINTS ARE CLOSE
*                                  TOGETHER NEAR THE END OF THE FILE
         SR    R7,R8               YES, POINT BACK TO REQUIRED RECORD
         A     R7,DIVREG1          POINT TO SPOT IN DIV AREA
         SLR   R2,R2               PREPARE FOR END-OF-FILE
         ICM   R1,B'1111',0(R7)    GET RECORD LENGTH
         BM    DIVRETVD            BRANCH IF END-OF-FILE
         ICM   R0,B'1111',$UCBAD   TALKING DIRECTLY TO PHYSICAL DEVICE?
         BZ    DIVPNTLS            NO, A POINT WOULD BE POINTLESS
         SPACE
*              (A NULL UCB ADDRESS IMPLIES A SUBSYSTEM DATA SET SO
*        NOTE/POINT PROCESSING IS NOT ALLOWED.  "DIV" IS ONLY ASKED TO
*        RETRIEVE A RECORD IF IT HAS BEEN PREVIOUSLY READ, BUT "DIV"
*        MAY NOT HAVE HAD ROOM TO STORE IT WHEN IT WAS FIRST READ.
*        HENCE, IT MAY HAVE TO BE RE-READ FROM THE STORAGE MEDIUM, IN
*        WHICH CASE THE PHYSICAL ADDRESS IN THE DCB WILL HAVE TO BE
*        RESYNCHRONIZED WITH LOGICAL PROCESSING SINCE OTHER LOGICAL
*        RECORDS MAY HAVE BEEN RETRIEVED WITHOUT PHYSICAL I/O (THANKS
*        TO "DIV").  FOR SUBSYSTEM DATA SETS, ALL RECORDS MUST BE
*        STORED BY "DIV" BECAUSE REVIEW CAN'T GO BACK TO RE-READ THEM
*        (IE. ACCESS IS QSAM-LIKE IN ITS SEQUENTIAL NATURE).  SO IF
*        THERE IS NO ROOM TO STORE A RECORD FROM A SUBSYSTEM DATA SET
*        THEN A PREMATURE END-OF-FILE SHOULD BE FORCED (AS FAR AS
*        REVIEWABLE DATA IS CONCERNED).  IF A REAL END-OF-FILE IS
*        ENCOUNTERED THEN ANY UNUSED "DIV" SPACE CAN BE FREED WITH
*        IMPUNITY BECAUSE THE USER CANNOT 'NEWTOP' TO ANY LARGER
*        SOURCE OF DATA AS IS POSSIBLE WITH WITH NORMAL DISK FILES.)
*
         SPACE
         CLC   DIVHITTR,4(R7)      BEEN PAST THIS RECORD'S BLOCK?
         BNH   DIVFIXIT            NO, GO REPAIR DIALOG WITH DISK
         MVC   TTR,4(R7)           LOAD BLOCK LOCATION FOR MAINLINE
DIVPNTLS L     R2,BLOCKPTR         POINT TO PHYSICAL BLOCK BUFFER
         ICM   R5,B'1111',SAVSPANL SPANNED RECORD FILE?
         BZ    DIVRETRC            NO, THIS IS THE RIGHT WORK AREA
         L     R2,SPANPTR          YES, POINT TO A LARGER AREA
DIVRETRC LR    R4,R2               COPY TARGET RECORD ADDRESS
         LTR   R3,R1               COPY RECORD LENGTH
         BZ    DIVRETVD            BRANCH IF NULL RECORD
DIVRETLP CH    R3,=H'256'          LENGTH LEFT LESS THAN 256
         BL    DIVRETIT            YES, MOVE THE REST OF IT
         MVC   0(256,R4),8(R7)     NO, MOVE 256 BYTES OF IT
         LA    R7,256(,R7)         ADJUST SOURCE POINTER
         LA    R4,256(,R4)         ADJUST TARGET POINTER
         SH    R3,=H'256'          ADJUST REMAINING-DATA COUNT
         BZ    DIVRETVD            (MULTIPLE OF 256)
         B     DIVRETLP            PROCESS NEXT BIT
DIVRETTL MVC   0(0,R4),8(R7)       <<< EXECUTED >>>
DIVRETIT BCTR  R3,0                LESS 1 FOR EXECUTE
         EX    R3,DIVRETTL         RETRIEVE THE TAIL OF THE RECORD
DIVRETVD L     R14,12(,R13)        RESTORE RETURN REGISTER
         LM    R3,R12,32(R13)      RESTORE OTHER REGISTERS
         SLR   R15,R15             RECORD RETRIEVAL WAS SUCCESSFUL
         BSM   0,R14               RETURN FOR ENTRY CODE 8
DIVFIXIT LA    R1,DIVPOINT         RE-SYNC REVIEW WITH DISK MEDIA
         ST    R13,CALLSAVE+4      CHAIN SAVEAREAS FOR POINT
         LA    R13,CALLSAVE
         ST    R13,@DATA+8
         BSM   0,R1                REVERT TO 24-BIT AMODE FOR I/O
DIVPOINT POINT (R4),DIVHITTR       DIV FETCH DOESN'T ADJUST DCB BLK PTR
         L     R13,4(,R13)
         XC    8(4,R13),8(R13)
         B     DIVISBAD            NOW REVIEW CAN RE-READ LAST BLK READ
         SPACE
DIVPGREL L     R1,DIVREG1          GET STORAGE ADDRESS
         CLI   1(R1),X'DA'         DATA AREA TRIMMING FLAGGED?
         BE    DIVPGRLD            YES, ONLY FIRST PAGE EXISTS ANYWAY
         ICM   R0,B'1111',0(R1)    NO, IS LENGTH OF FIRST RECORD ZERO?
         BZ    DIVPGRLD            YES, STORAGE IS IN RELEASED STATUS
         TM    OSBITS,X'93'        XA OR LATER VERSION OF MVS?
         BO    DIVPGSER            YES, USE PGSER MACRO
         L     R0,DIVREG0          GET STORAGE SIZE
         FREEMAIN RU,A=(1),LV=(0)  FREE THE DIV STORAGE AREA
         L     R0,DIVREG0          GET STORAGE SIZE
         GETMAIN RU,LV=(0),LOC=(ANY,ANY),BNDRY=PAGE
         LA    R1,0(,R1)           ENSURE SIGN BIT IS OFF
         ST    R1,DIVREG1          SHOULD BE THE SAME ADDRESS
         B     DIVPGRLD            PAGES NOW EFFECTIVELY RELEASED
DIVPGSER L     R15,DIVREG0         GET STORAGE SIZE
         AR    R15,R1              POINT PAST DIV AREA
         BCTR  R15,0               POINT TO LAST BYTE IN DIV AREA
*                                  RELEASE STORAGE RESOURCES WITHOUT
         PGSER R,RELEASE,A=(1),EA=(15)     FREEMAIN/GETMAIN OVERHEAD
DIVPGRLD LM    R14,R12,12(R13)     RESTORE REGISTERS
         SLR   R15,R15             STORAGE RELEASE WAS SUCCESSFUL
         ST    R15,DIVHITTR        ZERO HIGHEST TTR ENCOUNTERED
         BSM   0,R14               RETURN FOR ENTRY CODE 12
         SPACE
DIVFREMN LM    R0,R1,DIVREGS       LOAD REGISTERS FOR FREEMAIN
         LTR   R0,R0               ANYTHING TO FREE?
         BZ    DIVFREED            NO
         FREEMAIN RU,A=(1),LV=(0)  FREE THE DIV STORAGE AREA
DIVFREED XC    DIVREGS,DIVREGS     FLAG FREEING OF DIV STORAGE
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         SLR   R15,R15             STORAGE FREEING WAS SUCCESSFUL
         ST    R15,DIVHITTR        ZERO HIGHEST TTR ENCOUNTERED
         BSM   0,R14               RETURN FOR ENTRY CODE 16
         TITLE '  R E V D I V   -   S T A T I C   A R E A  '
DIVOVHD  EQU   8                   STORAGE OVERHEAD PER RECORD
DIVTRKTB DS    0F                  TRACK SIZE TABLE
         DC    F'26793'            X'2085' F6421
         DC    F'0'                X'2001'  2311
         DC    F'0'                X'2002'  2301
         DC    F'0'                X'2003'  2303
         DC    F'0'                X'2004'  2302
         DC    F'0'                X'2005'  2321
         DC    F'14136'            X'2006'  2305-1
         DC    F'14660'            X'2007'  2305-2
         DC    F'7294'             X'2008'  2314   (2319)
         DC    F'13030'            X'2009'  3330   (F478)
         DC    F'8368'             X'200A'  3340
         DC    F'19069'            X'200B'  3350   (F493)
         DC    F'35616'            X'200C'  3375
         DC    F'13030'            X'200D'  3330-1 (F479)
         DC    F'47476'            X'200E'  3380  (F6425)
         DC    F'56664'            X'200F'  3390
         LTORG
         SPACE
         DS    0D                  END OF CSECT
         SPACE
         DROP  R10,R11             REVDIV
         TITLE '  R E V I E W   -   C O N T R O L   B L O C K S  '
IHADCB   DSECT
         DS    16XL1
DCBKEYLE DS    XL1
DCBTRTCH EQU   DCBKEYLE
DCBDEVT  DS    XL1
DCBDEN   DS    XL1
         DS    13XL1
DCBBFTEK DS    XL1
DCBEODAD DS    AL3
DCBRECFM DS    X
DCBEXLSA DS    AL3
DCBDDNAM DS    CL8
DCBDEBAD EQU   *-4,4
DCBOFLGS DS    X
         DS    7XL1
         DS    X
DCBSYNAD DS    AL3
DCBBLKSI EQU   IHADCB+62,2
DCBLRECL EQU   IHADCB+82,2
         SPACE
         PRINT NOGEN
         SPACE
         IKJCPPL
         SPACE 3
         IKJPPL
         SPACE
         IKJDFPB
         SPACE 2
         IKJUPT
         SPACE 2
         IKJIOPL
         SPACE 2
         IKJDAPL
         SPACE 2
         IKJDAP08
         SPACE 2
         IKJDAP18
         SPACE 2
         IEFZB4D0
         SPACE 2
         IEFZB4D2
         SPACE 2
         IKJPSCB
         SPACE 2
         IKJECT
         SPACE 2
         PRINT GEN
         SPACE
QUOTE    EQU   X'7D'
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
         END
