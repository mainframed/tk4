DGN1     TITLE 'MVTDEBE - 360D-00.1.019 - D NORRIS - IMPROVED BY SHMUEL*
                METZ, ETC.'
         COPY OPTIONGB       DEFINE GLOBALR                      82171
         SPACE 2                                                 82171
         SYSPARM LIST=YES    SET AND LIST GLOBALR                82171
         SPACE 1                                                 82171
         PRINT &PRTSOR                                           82171
         SPACE 1
*              ALL MODIFICATIONS TO THIS PROGRAM IN EUROPE
*              SHOULD BE SENT TO:
*                                       COMPUTER CENTER
*                                       TECHNION,
*                                        ISRAEL INSTITUTE OF TECHNOLOGY
*                                       TECHNION CITY, HAIFA
*                                       ISRAEL
         SPACE 1
*              ALL MODIFICATIONS TO THIS PROGRAM IN USA
*              SHOULD BE SENT TO:
*                                       GERHARD POSTPISCHIL
*                                       EXPERT SYSTEM PROGRAMMING
*                                       176 OLD STAGE COACH ROAD
*                                       BRADFORD, VT 05033-8844
*                                       USA
         SPACE 5
*              IMPROVEMENTS MADE BY SEYMOUR J. METZ:
*                   SYSIN READ BY QSAM - MAY BE DD * NOW
*                   SYSPUNCH WRITTEN BY QSAM NOW - MAY BE SYSOUT=B NOW
         SPACE 1
*              MORE IMPROVEMENTS ?, MADE BY DICK OXLEY
         SPACE 1
*              YET MORE IMPROVEMENTS BY SHMUEL METZ:
*                   CIB PROCESSING
*                   DESC=2/DOM SUPPORT
*                   FUNCTION PROMPTING
*                   REMOVAL OF UN-NUMBERED MESSAGES
*                   MM HANDLING CORRECTED
*                               NOT TO BE CONFUSED WITH "CORRECTED"
         SPACE 1
*              UNFORTUNATELY, I FOUND IT NECESSARY TO RESEQUENCE:
*                   SORRY 'BOUT THAT!
         SPACE 1                                                 82171
*        G.P. - SUPPORT FOR 65K TAPE BLOCKS (FDR)                82171
*              TSM AND OLD ERRORS CORRECTED; SVS SUPPORT ADDED   82171
         MTITL 'MVTDEBE - D NORRIS - IMPROVED BY SHMUEL METZ, ETC.',   *
               LEN=51
         STITL 'INITIALIZATION AND MAIN LINE'
MVTDEBE  SAVEM BASE=R12,BASE2=R7                                  *TSM*
         EXTRN @DCBXLST                                          90278
         SPACE 1
*  GET OS POINTERS
         AIF   (NOT &MVS AND NOT &SVS AND NOT &VS1).NOTVS        82171
         MODESET KEY=ZERO    REQUEST PRIVILEGES                  82171
.NOTVS   LTCB  R3,USE=YES    GET CURRENT TCB                     90278
         SPACE 1
         AM31  WORK=R15                                         GP97231
         L     R2,TCBJSCB         JOB STEP CONTROL BLOCK
         USING IEZJSCB,R2
         L     R2,JSCBCSCB        COMMAND SCHEDULING CONTROL BLOCK
         USING IEECSCB,R2
         ST    R2,ACSCB
         AIF   (NOT &MVSESA).CMESACH                            GP97231
         L     R11,CHCSCXP   GET THE CSCB EXTENSION             GP97231
         USING CSCX,R11      DECLARE IT                         GP97231
.CMESACH QEDIT ORIGIN=CHCIBP      REMOVE ALL CIB S              GP97231
         QEDIT ORIGIN=CHCIBP,CIBCTR=1 ONE MODIFY
         MVC   ASTOP,CHECBP       -> STOP/MODIFY ECB
         MVI   ASTOP,X'80'
         MVC   UCMID,CHUCMP
         MVC   DEBEID1(8),CHKEY   SET UP MLWTO
         MVC   DEBEID2(8),CHKEY
         AM24  WORK=R15      RESTORE OLD MODE                   GP97231
         XC    WTOID1,WTOID1      NOTHING TO DOM
*  GET PROTECT KEY FROM TCB FOR THE DEB'S
         OC    INDEB+24(1),TCBPKF
         OC    OUTDEB+24(1),TCBPKF
         DROP  R2
*  STORE TCB ADDRESS INTO DEBS
         ST    R3,INDEB
         ST    R3,OUTDEB
*  GET TIOT ADDRESS
         L     R2,TCBTIO          GET ADDRESS OF TIOT
         ST    R2,TIOTADR         STORE IT
         DROP  R3
*  WRITE 'REPLY EOJ' MESSAGE
OEH801I  WTCLR '801I REPLY EOJ TO END MVTDEBE',                        *
               FLAG=(PFX,IMM,UCMID),DESC=7
         SPACE 1
*  WRITE 'STOP/MODIFY' MESSAGE
*     NOTE THAT NO WAIT IS ISSUED
         SPACE 1
TERMMSG  BAL   R14,DOMCOMM              CLEAR WTO IF STILL THERE
         AM31  WORK=R15                                         GP97231
         L     R2,ACSCB
         USING IEECSCB,R2
         AIF   (NOT &MVSESA).CMESARM                            GP97231
         L     R11,CHCSCXP   GET THE CSCB EXTENSION             GP97231
         USING CSCX,R11      DECLARE IT                         GP97231
.CMESARM QEDIT ORIGIN=CHCIBP      REMOVE ALL CIB S              GP97231
         DROP  R2
         AM24  WORK=R15                                         GP97231
         WTCLR S(STOPWTO1),D,S(STOPWTO2),DE,                           *
               DESC=2,FLAG=(PFX,UCMID)
         WTO   MF=(E,(1))
         ST    R1,WTOID1                SAVE FOR DOM
         SPACE 1
*  ALL ROUTINES RETURN HERE WHEN THEY ARE FINISHED.
         SPACE 1
ASKAGN   BAL   R14,TESTCIB
         NI    INIOB,X'3F'
         NI    OUTIOB,X'3F'
         MVI   SW6+1,X'00'
         MVI   SW7+1,X'00'
*  RESTORE TDINCCW IN CASE TP OVERLAYED IT
         MVC   TDINCCW(8),TDRESTIN
*  WRITE 'REPLY PROG ID' MESSAGE
OEH803I  WTCLR '803D REPLY PROG ID - XX',FLAG=(PFX,IMM,WTOR,UCMID)
         BAL   R11,WAITANS         BRANCH TO WAIT ROUTINE
         SPACE 1
*  INTERPRET PROGRAM ID
         SPACE 1
         OC    ID(3),BLANKS       CONVERT REPLY TO UPPER CASE
         LA    R5,ID         POINT TO INPUT                      90278
         BLOOK T=CMNDTAB,R=ID  LOCATE AND EXECUTE THE REQUEST    90278
         WTCLR '804I VALID DEBE PROGRAM FUNCTIONS ARE:',L,             *
               '804I       BF,  BS,  CC,  CP,  CT,  CTB,',D,           *
               '804I       EOJ, RUN, RW,  SF,  SR,  TC,  TCB,',D,      *
               '804I       TD,  TDA, TP,  TPA, TT,  TTA, WT, WTL',DE,  *
               DESC=2,FLAG=(PFX,IMM,UCMID)
         B     ASKAGN
         SPACE 1
         PRINT  GEN,DATA
STOPWTO1 WTO   '802I TO STOP 1 FUNC.: "F XXXXXXXX,STOP"',              *
               MF=L
         ORG   STOPWTO1+4
         DC   C'802I TO STOP 1 FUNC.: "F '
DEBEID1  DC    C'XXXXXXXX,STOP"'
STOPWTO2 WTO   '802I TO STOP MVTDEBE: "P XXXXXXXX" OR "R X,EOJ"',      *
               MF=L
         ORG   STOPWTO2+4
         DC   C'802I TO STOP MVTDEBE: "P '
DEBEID2  DC    C'XXXXXXXX" OR "R X,EOJ"'
         PRINT NOGEN,NODATA
         LTORG ,
         SPACE 1                                                 90278
*        BRANCH TABLE FOR VALID INPUT COMMANDS                   90278
*                                                                90278
CMNDTAB  VERBTAB 'EOJ',EOJ,BASE=*   VERB+EXEC                    90278
         VERBTAB 'END',EOJ   ALTERNATE END ?                     90278
         VERBTAB 'WTL',WTL   WRITE TAPE LABEL                    90278
         VERBTAB 'TCB',TCBLOCK   TAPE TO CARD BLOCKED            90278
         VERBTAB 'CTB',CTB   CARD TO TAPE BLOCKED                90278
         VERBTAB 'TTA',TTA   TAPE TO TAPE - ALL FILES            90278
         VERBTAB 'TPA',TPA   TAPE TO PRINT - ALL FILES           90278
         VERBTAB 'TDA',TDA   TAPE TO DUMP FORMAT - ALL FILES     90278
         VERBTAB 'BF',BF     BACKSPACE FILE(S)                   90278
         VERBTAB 'BS',BS     BACKSPACE RECORD(S)                 90278
         VERBTAB 'CC',CC     CARD TO PUNCH                       90278
         VERBTAB 'CP',CP     CARD TO PRINT                       90278
         VERBTAB 'CT',CT     CARD TO TAPE - UNBLOCKED            90278
         VERBTAB 'RW',RW     REWIND                              90278
         VERBTAB 'RUN',RWU   REWIND AND UNLOAD                   90278
         VERBTAB 'SF',SF     FORWARD SPACE FILE(S)               90278
         VERBTAB 'SR',SR     FORWARD SPACE RECORD(S)             90278
         VERBTAB 'TC',TC     TAPE TO CARD - SINGLE FILE          90278
         VERBTAB 'TD',TD     TAPE TO DUMP - SINGLE FILE          90278
         VERBTAB 'TP',TP     TAPE TO PRINT - SINGLE FILE         90278
         VERBTAB 'TT',TT     TAPE TO TAPE - SINGLE FILE          90278
         VERBTAB 'WT',WT     WRITE TAPE MARK                     90278
         VERBTAB *END                                            90278
         EJECT ,
*  END OF JOB ROUTINE
         SPACE 1
*  RELOAD SAVE AREA POINTER
EOJ      CLI   STORFLAG,X'FF'
         BNE   CLOSE1
     FREEMAIN  E,LV=65536,A=TDAREA,SP=0                          82171
CLOSE1   CLOSE SYSPRINT
         CLOSE SYSIN
         CLOSE SYSPUNCH
         BAL   R14,DOMITALL             DELETE WTOS EXCEPT COMM
         BAL   R14,DOMCOMM              DELETE COMM WTO IF STILL THERE
         AM24  ,                                                GP97231
         ENDM  RC=0
         SPACE 1
         STITL 'TAPE POSITIONING ROUTINES'
*  BACKSPACE A FILE ON TAPE
         SPACE 1
BF       BAL   R10,TPOUTSET        GO GET OUTPUT TAPE
         MVC   OUTCCW+8(8),BFCCW      MOVE BACKSPACE CCW TO OUTPUT IOB
         B     SFEXCP
         SPACE 1
*  FORWARD SPACE A FILE ON TAPE
         SPACE 1
SF       BAL   R10,TPOUTSET      GO GET OUTPUT TAPE
         MVC   OUTCCW+8(8),SFCCW  MOVE FORWARD SPACE CCW TO IOB
SFEXCP   MVC   OUTCCW+16(8),=X'0300000020000001'  MODE SET NO-OP
         BAL   R11,IOOUT           GO SPACE THE FILE
         CLI   OUTECB,X'7F'       WAS I/O SUCCESSFUL
         BE    ASKAGN
         TM    OUTSTAT+4,X'02'   BACKED INTO LOAD POINT
         BO    TAPERR    YES, BRANCH
         B     ASKAGN
         EJECT
*  BACKSPACE NNNN RECORDS ON TAPE
         SPACE 1
BS       MVC   OUTCCW+8(8),BSCCW   BACK SPACE CCW TO OUTPUT IOB
         B     SR1                 GO TO COMMON CODE
         SPACE 1
*  SKIP NNNN RECORDS ON TAPE
         SPACE 1
SR       MVC   OUTCCW+8(8),SRCCW   FORWARD SPACE CCW TO OUTPUT IOB
SR1      BAL   R10,TPOUTSET        GO GET OUTPUT TAPE
SR2      WTCLR '805D REPLY NUMBER RECS TO SKIP - XXX',                 *
               FLAG=(PFX,WTOR,UCMID)
         BAL   R10,NUMREPLY        WAIT FOR AND CONVERT REPLY
         B     SR2                 REISSUE REQUEST IF INVALID NUMERICS
         LR    R6,R0               RESULT FROM NUMREPLY
         MVC   OUTCCW+16(8),=X'0300000020000001' MODE SET NO-OP
BSAGN    BAL   R11,IOOUT           GO SPACE THE FILE
         CLI   OUTECB,X'7F'       WAS IT A SUCCESS
         BE    BCT6
         TM    OUTSTAT+4,X'02'      AT LOAD POINT
         BO    TAPERR      YES, BRANCH
BCT6     BCT   R6,BSAGN            DECREMENT, TEST REC NO
         B     ASKAGN
         SPACE 1
         STITL 'CARD RELATED I/O ROUTINES'
*  CARD TO CARD REPRODUCE
         SPACE 1
CC       BAL   R9,OPENINPT              OPEN SYSIN
         BAL   R9,OPENPNCH              OPEN SYSPUNCH
CCLOOP   BAL   R11,READ                 GET A CARD FROM SYSIN
         B     ASKAGN
         BAL   R11,PUNCH                PUT CARD ON SYSPUNCH
         B     CCLOOP
         EJECT
*  CARD TO PRINTER - 80/80 LIST
         SPACE 1
CP       MVI   SW1+1,X'F0'
         MVI   SW2+1,X'F0'
         MVI   SW4+1,X'00'
         MVI   SW5+1,X'F0'
         ZAP   PAGENO,=P'0'
         SP    BLKCNT(3),BLKCNT
         BAL   R9,OPENINPT              OPEN SYSIN
         BAL   R9,OPENPRNT         GO OPEN PRINTER
         BAL   R10,SKIPTO1
CPLOOP   BAL   R11,READ                 GET A CARD
         B     ASKAGN
         MVC   LINE(80),CARD
         BAL   R10,PRINT
         B     CPLOOP
         EJECT
*  CARD TO TAPE
         SPACE 1
CT       BAL   R9,OPENINPT              OPEN SYSIN
*  SET UP TAPE'S DCB AND DEB
         BAL   R10,TPOUTSET        GO TO 'OUTPUT TAPE' MESSAGE
         MVC   OUTCCW+8(8),CTCCW  MOVE WRITE CCW TO OUTPUT IOB
         SLR   R2,R2              SET CARD COUNT TO ZERO
CTLOOP   BAL   R11,READ                 GET A CARD
         B     CTEOJ1
         L     R10,TDAREA
         MVC   0(80,R10),CARD
         LA    R2,1(,R2)           INCREMENT CARD COUNT
         BAL   R11,IOOUT           WRITE A TAPE
         CLI   OUTECB,X'7F'       WRITE A SUCCESS
         BE    CTLOOP
         B     TAPERR
         SPACE 1
*  DISPLAY CARD COUNT
         SPACE 1
CTEOJ1   MVC   COUNT(6),=X'402020202020'  MOVE IN EDIT MASK
         CVD   R2,TDWK             EDIT THE CARD COUNT
         ED    COUNT(6),TDWK+5
         WTCLR S(MESSAGE),FLAG=(PFX,IMM,UCMID)
*  PREPARE TO WRITE TAPE MARK
CTEOJ    MVC   OUTCCW+8(8),WTCCW  MOVE TAPE MARK CCW TO OUTPUT IOB
         OI    OUTCCW+12,X'60'    TURN ON CHAIN FLAG
         MVC   OUTCCW+16(8),=X'0300000020000001' MODE SET NO-OP
         BAL   R11,IOOUT           WRITE A TAPE MARK
         CLI   OUTECB,X'7F'       WAS IT A SUCCESS
         BNE   TAPERR
SW6      NOP   TTLOOP
         B     ASKAGN
         EJECT
         SPACE 1
*  CARD TO TAPE, BLOCKED
         SPACE 1
CTB      BAL   R9,OPENINPT              OPEN SYSIN
*  SET UP OUTPUT DCB, DEB AND IOB
         BAL   R10,TPOUTSET        GO TO 'OUTPUT TAPE' MESSAGE
*  GO GET OUTPUT BLOCKSIZE
CTB1     WTCLR '810D REPLY OUTPUT BLOCK SIZE - XXXXX',                 *
               FLAG=(PFX,UCMID,WTOR)
         BAL   R10,NUMREPLY        WAIT FOR AND CONVERT REPLY
         B     CTB1                REPROMPT IF INVALID NUMERICS
         LTR   R9,R0                 RESULT FROM NUMREPLY        82171
         BNP   CTB1          INVALID                             82171
         CH    R9,=H'32760'  VALID FOR VS/SAM OPEN ?             82171
         BNL   CTB1          NO; FAIL                            82171
*  INITIALIZE FOR LOOP
         SLR   R2,R2              SET CARD COUNT TO ZERO
         MVC   OUTCCW+8(8),CTCCW  MOVE WRITE CCW TO IOB
         STH   R9,OUTCCW+14        STORE BLKSIZE AS BYTE COUNT
CTB2     SLR   R4,R4              SET BLK COUNT TO ZERO
         MVC   INCCW(8),CTBCCW1   MOVE READ CCW TO IOB
CTBLOOP  LAT   R10,INCCW,LA=0      LOAD FIRST WORD OF READ CCW   90278
         LA    R10,80(,R10)        ADD 80 TO DATA ADDRESS        90278
         STCM  R10,7,INCCW         RESTORE UPDATED CCW           90278
         BAL   R11,READ                 GET A CARD
         B     CTBEOJ0
         MVC   0(80,R10),CARD
         LA    R2,1(,R2)            INCREMENT CARD COUNT
         LA    R4,80(,R4)          ADD 80 TO BLK COUNT           90278
         CR    R4,R9              COMPARE BLK COUNT TO BLKSIZE
         BM    CTBLOOP          LOOP IF BLK COUNT LESS
         BAL   R11,IOOUT           WRITE TAPE
         CLI   OUTECB,X'7F'       WAS WRITE A SUCCESS
         BNE   TAPERR
         B     CTB2
CTBEOJ0  STH   R4,OUTCCW+14        STORE TRUNCATED BYTE COUNT
         BAL   R11,IOOUT           WRITE TRUNCATED BLOCK
         CLI   OUTECB,X'7F'       WAS IT SUCCESSFUL
         BNE   TAPERR
         B     CTEOJ1             BRANCH TO CLOSING ROUTINE
         EJECT
*  TAPE TO CARD,  JUST PUNCH THE FIRST 80 BYTES OF THE INPUT RECORD
         SPACE 1
TC       BAL   R10,TAPINSET        GO GET THE INPUT TAPE
         MVC   INCCW+8(8),TDINCCW TAPE READ CCW TO IOB
         BAL   R9,OPENPNCH              OPEN SYSPUNCH
TCLOOP   BAL   R11,IOIN            READ A TAPE
         CLI   INECB,X'7F'        WAS IT A SUCCESS
         BE    TC1
         TM    INSTAT+4,X'01'      EOF
         BO    ASKAGN
         B     TAPERROR
TC1      L     R10,TDAREA
         MVC   CARD,0(R10)
         BAL   R11,PUNCH                PUT A CARD ON SYSPUNCH
         B     TCLOOP
         EJECT
*  TAPE TO CARD, BLOCKED - IN WHICH THE ENTIRE TAPE RECORD IS PUNCHED
         SPACE 1
*  SET UP TAPE DCB AND IOB
TCBLOCK  NI    TCB4+1,X'0F'
         BAL   R10,TAPINSET        GO TO 'INPUT TAPE' MESSAGE
         MVC   INCCW+8(8),TDINCCW  MOVE TAPE READ CCW TO IOB
         BAL   R9,OPENPNCH              OPEN SYSPUNCH
*  INITIALIZE FOR LOOP
         SLR   R2,R2              SET CARD COUNT TO ZERO
TCB2     SLR   R4,R4              SET BLK COUNT TO ZERO
         MVC   OUTCCW(8),CTCCW    MOVE PUNCH CCW TO OUT IOB
         SPACE 1
         BAL   R11,IOIN            READ TAPE
         CLI   INECB,X'7F'        WAS READ A SUCCESS
         BE    TCB3
         TM    INSTAT+4,X'01'     CHECK FOR EOF
         BO    TCBEOJ
         B     TAPERROR
TCB3     L     R9,=F'65535'  LOAD READ CCW BYTE COUNT            82171
         LH    R10,INSTAT+6       LOAD RESIDUAL BYTE COUNT       82171
         NR    R10,R9          MASK IT                           90278
         SR    R9,R10        GET BLOCK LENGTH                    82171
         BZ    TCB2          SKIP ZERO LENGTH BLOCK              82171
*                                 WE HAVE BLK SIZE IN REG 9
TCB1     LAT   R10,OUTCCW,LA=0          PUT A CARD ON SYSPUNCH   90278
         MVC   CARD,0(R10)
         BAL   R11,PUNCH
         LA    R2,1(,R2)            INCREMENT CARD COUNT
         SH    R9,=H'80'
         BZ    TCB2
         CH    R9,=H'80'
         BL    TCB4
         L     R10,OUTCCW         LOAD FIRST WORD OF PUNCH CCW
         A     R10,=F'80'          ADD 80 TO DATA ADDRESS
         ST    R10,OUTCCW          RESTORE UPDATED CCW
         B     TCB1
         SPACE 1
*   ROUTINE FOR BLK SIZE A NON MULTIPLR OF 80
TCB4     B     TCB5
         OI    TCB4+1,X'F0'
         WTCLR '815I ONE OR MORE CARDS PUNCHED NOT 80 BYTES',          *
               FLAG=(PFX,IMM,UCMID),DESC=2
         WTCLR '816D REPLY STOP OR GO',                                *
               FLAG=(PFX,IMM,UCMID,WTOR)
         BAL   R11,WAITANS         GO WAIT FOR REPLY
         OC    REPLY(4),BLANKS
         CLC   REPLY(4),=CL4'STOP'  ANSWER = 'STOP'
         BNE   TCB5
*        B     TCBEOJ
*  PRINT CARD COUNT AND EXIT
TCBEOJ   MVC   COUNT(6),=X'402020202020'  FORM EDIT MASK
         CVD   R2,TDWK             CONVERT CARD COUNT TO HEX
         ED    COUNT(6),TDWK+5    EDIT CARD COUNT
         WTCLR S(MESSAGE),FLAG=(PFX,IMM,UCMID)
         B     ASKAGN
         SPACE 2
TCB5     LAT   R10,OUTCCW,LA=0                                   90278
         LA    R10,80(,R10)
         MVI   CARD,C' '
         MVC   CARD+1(79),CARD
         EX    R9,MOVCARD
         BAL   R11,PUNCH
         B     TCB2
         SPACE 2
MOVCARD  MVC   CARD(0),0(R10)
         SPACE 1
         STITL 'TAPE PRINT/DUMP'
*  PRINT A TAPE
         SPACE 1
TPA      MVI   SW7+1,X'10'        TAPE-PRINT ALL
         SPACE 1
TP       MVC   TDINCCW(8),TPINCCW
         MVI   SW1+1,X'F0'
         MVI   SW2+1,X'F0'
         MVI   SW4+1,X'00'
         MVI   SW5+1,X'F0'
         B     TPRINT
         SPACE 2
TDA      MVI   SW7+1,X'10'        TAPE-DUMP ALL
         SPACE 1
TD       MVI   SW1+1,X'00'
         MVI   SW2+1,X'00'
         MVI   SW4+1,X'F0'
         MVI   SW5+1,X'00'
TPRINT   BAL   R9,OPENPRNT
*        SET UP TAPE DCB & DEB
         BAL   R10,TAPINSET
         MVC   INCCW+8(8),TDINCCW
PRTALL   ZAP   PAGENO,=P'0'
         BAL   R10,SKIPTO1
         SP    BLKCNT(3),BLKCNT
TDLOOP   BAL   R11,IOIN
         CLI   INECB,X'7F'
         BE    TD1
         TM    INSTAT+4,X'01'
SW7      NOP   PRTALL             B/NOP SWITCH
*                                 XXA=>BO
*                                 XX =>NOP
         BO    ASKAGN
         B     TAPERROR
TD1      SLR   R2,R2         CLEAR FOR ICM                       90278
         SLR   R3,R3                                             90278
         ICM   R2,3,INSTAT+6    RESIDUAL COUNT                   90278
         ICM   R3,3,TDINCCW+6   INITIAL BYTE COUNT               90278
         SR    R3,R2             BLOCKSIZE
         CVD   R3,TDWK           SAVE BLOCKSIZE
         CLI   SW1+1,X'00'       SWITCHES SET FOR HEX DUMP ?
         BE    PRTB2             YES, GO DUMP BLOCK
         LA    R8,100           NO, BLOCKSIZE LESS THAN OR ...
         CR    R3,R8           EQUAL TO 100 BYTES
         BH    PRTB1             NO CONTINUE CHECKING
         LR    R8,R3             YES, USE BLOCKSIZE FOR PRINT WIDTH
         B     PRTB2             GO PRINT IT
         SPACE 2
PRTB1    SLR   R4,R4             ZERO FOR DIVIDE
         LR    R5,R3             PUT BLKSIZE IN REG. 5
         D     R4,=F'80'          DIVIDE BY 80
         LTR   R4,R4             EVENLY DIVISIBLE ?
         BNZ   PRTB2             NO, USE 132 FOR PRINT WIDTH
         LA    R8,80              YES, DEBLOCK, USE 80 FOR LINE SIZE
PRTB2    MVC   LINE+106(25),RECHDG       MOVE EDIT MASK
         ED    LINE+125(6),TDWK+5   EDIT BLOCKSIZE
         AP    BLKCNT,=P'1'      ADD 1 TO BLOCK NUMBER
         ED    LINE+111(6),BLKCNT  EDIT BLOCK COUNY
         L     R2,TDAREA          INPUT BUFF. ADDR. FOR HEX DUMP
         L     R5,TDAREA          INPUT BUFF. ADDR. FOR CHAR. DUMP
         LR    R6,R8             EQUATE REGS. FOR CHAR. DUMP
SW1      B     TD7               BRANCH FOR CHAR. - NOP FOR HEX
         LA    R5,TDAREA2         WORK AREA FOR UNPACKING
         LA    R6,50            DO 50 BYTES AT A TIME
         LA    R8,100           UNPACKS INTO 100 LINE SIZE
         UNPK  0(15,R5),0(8,R2)
         UNPK  14(15,R5),7(8,R2)
         UNPK  28(15,R5),14(8,R2)
         UNPK  42(15,R5),21(8,R2)
         UNPK  56(15,R5),28(8,R2)
         UNPK  70(15,R5),35(8,R2)
         UNPK  84(15,R5),42(8,R2)
         UNPK  98(3,R5),49(2,R2)
         TR    0(100,R5),TRHEXTAB-240
         SPACE 2
TD7      CR    R3,R6             NO. BYTES TO DO FROM REMAINING BYTES
         BL    SW2               BRANCH IF REMAINDER LESS THAN PRINT
         LR    R4,R8             LOAD PRINT WIDTH INTO REG. 4
TD3      BCTR  R4,0              - 1 FOR EXECUTE
         EX    R4,MOVLIN          MOVE FROM INPUT/WORKAREA TO LINE
         TR    LINE,TRCTAB
         BAL   R10,PRINT          PRINT THE LINE
         SR    R3,R6             NO. BYTES DONE FROM REMAINING
         BZ    BLANK             ALL DONE GET NEXT BLOCK
         AR    R2,R6             BUMP INPUT ADDR. (IF HEX)
         AR    R5,R6             BUMP INPUT ADDR. (IF CHAR.)
         B     SW1               PRINT NEXT SECTION OF BLOCK
         SPACE 2
SW2      B     *+6               BRANCH FOR CHAR. - NOP FOR HEX
         AR    R3,R3             DOUBLE BECAUSE ITS UNPACKED
         LR    R4,R3             REMAINING BYTES FOR EXECUTE
         LR    R6,R3             SET SO WE'LL BRANCH TO READ
         B     TD3
         SPACE 2
BLANK    BAL   R10,PRINT          PUT OUT A BLANK LINE
         B     TDLOOP
         SPACE 2
MOVLIN   MVC   LINE(0),0(R5)
         SPACE 1
         STITL 'TAPE ONLY I/O'
*  TAPE TO TAPE COPY
         SPACE 1
TTA      MVI   SW6+1,X'F0'        TAPE-TAPE ALL
         SPACE 1
TT       BAL   R10,TAPINSET        GO GET INPUT TAPE
         BAL   R10,TPOUTSET        GO GET OUTPUT TAPE
         MVC   INCCW+8(8),TDINCCW MOVE READ CCW TO INPUT IOB
TTLOOP   BAL   R11,IOIN            GO READ A RECORD
         CLI   INECB,X'7F'        WAS IT A SUCCESS
         BE    TT1
         TM    INSTAT+4,X'01'     TEST FOR EOF
         BO    CTEOJ
TAPERROR WTCLR '808I INPUT TAPE ERROR - STOP',                         *
               FLAG=(PFX,IMM,UCMID),DESC=7
         B     ASKAGN
TT1      SLR   R2,R2                                             90278
         SLR   R3,R3         CLEAR FOR ICM                       90278
         ICM   R2,3,INSTAT+6      LOAD RESIDUAL BYTE COUNT       90278
         ICM   R3,3,TDINCCW+6     LOAD READ CCW BYTE COUNT       90278
         SR    R3,R2              DETERMINE RECORD LENGTH
         STH   R3,TTCCWOUT+6      STORE IT INTO WRITE CCW
         MVC   OUTCCW+8(8),TTCCWOUT MOVE WRITE CCW TO OUTPUT IOB
         BAL   R11,IOOUT           WRITE TAPE
         CLI   OUTECB,X'7F'       WAS IT A SUCCESS
         BE    TTLOOP
TAPERR   WTCLR '809I OUTPUT TAPE ERROR - STOP',                        *
               FLAG=(PFX,IMM,UCMID),DESC=7
         B     ASKAGN
         EJECT
RWU      MVI   RWCCW,X'0F'         SET FOR UNLOAD
         SPACE 1
*  REWIND A TAPE
         SPACE 1
RW       BAL   R10,TPOUTSET        GO GET OUTPUT TAPE
         MVC   OUTCCW+8(8),RWCCW  MOVE REWIND CCW TO OUTPUT IOB
         MVC   OUTCCW+16(8),=X'0300000020000001' MODE SET NO-OP
         BAL   R11,IOOUT           REWIND THE TAPE
         B     ASKAGN
         SPACE 3
*  WRITE A TAPE MARK
         SPACE 1
WT       BAL   R10,TPOUTSET        GO GET OUTPUT TAPE
         B     CTEOJ              GO WRITE THE TAPE MARK
         EJECT
*  WRITE A TAPE VOLUME LABEL
         SPACE 1
*  REWIND THE TAPE
WTL      BAL   R10,TPOUTSET        GO GET TAPE UNIT
         MVC   OUTCCW+8(8),RWCCW  MOVE REWIND CCW TO OUT IOB
         MVC   OUTCCW+16(8),=X'0300000020000001' MODE SET NO-OP
         BAL   R11,IOOUT           REWIND THE TAPE
*  WRITE THE VOLUME LABEL
         L     R10,TDAREA
         MVI  0(R10),X'40'   CLEAR THE AREA TO BLANKS
         MVC   1(79,R10),0(R10)
         LA    R11,4(,R10)
         WTCLR '817D REPLY VOLID - XXXXXX',FLAG=(PFX,WTOR,UCMID)
         ST    R11,WTORRPLY        SET ADDR(REPLY) AAND LENGTH
         MVI   WTORRPLY,6
         WTOR  MF=(E,(1))
         BAL   R11,WAITANS         WAIT FOR REPLY
         OC    4(6,R10),BLANKS
         WTCLR '818D REPLY OWNER ID - CCCCCCCCC',FLAG=(PFX,WTOR,UCMID)
         LA    R11,41(,R10)
         ST    R11,WTORRPLY        SET ADDR(REPLY) AAND LENGTH
         MVI   WTORRPLY,10
         WTOR  MF=(E,(1))
         BAL   R11,WAITANS         WAIT FOR REPLY
         OC    41(10,R10),BLANKS
         MVC   0(4,R10),=C'VOL1'
         MVI   10(10),X'F0'     MOVE IN NO SECURITY FLAG
         MVC   OUTCCW+8(8),CTCCW  MOVE WRITE CCW TO OUT IOB
         BAL   R11,IOOUT           WRITE THE VOLUME LABEL
*  WRITE A DUMMY HEADER LABEL
         MVC   0(3,R10),=C'HDR'
         MVI   4(10),X'F0'   CLEAR REST OF LABEL TO ZERO
         MVC   5(75,R10),4(10)
         BAL   R11,IOOUT           WRITE THE DUMMY HEADER LABEL
*  WRITE A TAPE MARK AND EXIT
         B     CTEOJ
         SPACE 1
         STITL 'PRINT SUBROUTINES'
*  TEST TO SEE IF PRINTER HAS BEEN OPENED
         SPACE 1
OPENPRNT DS    0H                                                90316
         TM    OPENSW,X'FF'       IS THE PRINTER OPEN
         BO    OPENOK
         OPEN  (SYSPRINT,(OUTPUT))
         L     R1,=A(SYSPRINT)
         USING IHADCB,1
         TM    DCBOFLGS,DCBOFOPN
         BZ    COSYSPRT
         OI    OPENSW,X'FF'       TURN ON PRINTER OPEN SWITCH
OPENOK   BR    R9
         SPACE 3
*  COMMON PRINT ROUTINE
         SPACE 1
PRINT    PUT   SYSPRINT,CTLCHAR
         MVI   CTLCHAR,C' '
         MVC   LINE(132),CTLCHAR
         AP    LINECT,=P'1'
         CP    LINECT,=P'53'
         BH    SKIPTO1
         BR    R10
         SPACE 2
SKIPTO1  AP    PAGENO,=P'1'
         ZAP   LINECT,=P'1'
         MVI   CTLCHAR,C'1'
         MVI   LINE,C' '
         MVC   LINE+1(131),LINE
         MVC   LINE+53(26),HEAD
         MVC   LINE+102(10),PAGE
         ED    LINE+106(6),PAGENO
         PUT   SYSPRINT,CTLCHAR
         MVI   LINE,C' '
         MVC   LINE+1(131),LINE
SW4      NOP   SW5
         PUT   SYSPRINT,HEAD2
         PUT   SYSPRINT,HEAD3
SW5      B     CLEAR
         PUT   SYSPRINT,HEAD4
CLEAR    MVI   CTLCHAR,C'0'
         MVI   LINE,C' '
         MVC   LINE+1(131),LINE
         B     PRINT
         SPACE 2
COSYSPRT WTCLR '807I NO DD CARD FOR SYSPRINT',                         *
               FLAG=(PFX,IMM,UCMID),DESC=(2,8,9)
         B     ASKAGN
         STITL 'I/O PROMPTING'
*  ROUTINE TO CONVERT MM INTO A SET MODE COMMAND
         SPACE 1
CONVRTMM STM   R2,R3,SAVE2        STORE REGS 2 & 3               90316
         IC    R2,MM+1            INSERT SECOND MODE BYTE INTO REG 2
         TM    MM+1,X'F0'         IS THIS BYTE NUMERIC
         BO    MMMM1            BRANCH IF NUMERIC
         AH    R2,=H'9'          ADD 9 TO CONVERT ALPHA TO HEX DIGIT
MMMM1    SRDL  R2,4               SHIFT DIGIT OF BYTE TO REG 3
         IC    R2,MM              INSERT FIRST MODE BYTE NEXT TO
*                                 DIGIT OF SECOND
         TM    MM,X'F0'           IS FIRST BYTE NUMERIC
         BO    MMMM2            BRANCH IF NUMERIC
         AH    R2,=H'9'           ADD 9 TO CONVERT ALPHA TO HEX DIGIT
MMMM2    SLDL  R2,4               SHIFT DIGITS NEXT TO EACH OTHER
         STC   R2,MM              STORE MODE BYTE INTO MM
         LM    R2,R3,SAVE2        RESTORE REGS 2 + 3
         BR    R6
         SPACE 3
*  ROUTINE TO ASK FOR THE INPUT TAPE
         SPACE 1
TAPINSET DS    0H                                                90316
         CLI   STORFLAG,X'FF'
         BE    *+8
         BAL   R9,GETSTOR
         WTCLR '812D REPLY INPUT TAPE - MMXXX',                        *
               FLAG=(PFX,IMM,WTOR,UCMID)
         BAL   R9,WAITAPE         GO WAIT FOR THE REPLY
         B     TAPINSET           KLUMSY KLOD APE-ERATOR
         MVC   INTRTCH(1),MM      MOVE MODE BYTE INTO DCB
         MVI   INDEVT,X'81'       TAPE INDICATOR TO DCB
         ST    R2,INDEBMOD        STORE UCB ADDRESS INTO DEB
         MVC   INDEBMOD(1),MM     MOVE MODE BYTE INTO DEB
         OI    INIOB,X'40'         SET ON CHAINING
         MVC   INCCW(1),MMCCW     MOVE MODE CODE INTO CCW        90316
         MVC   INCCW+1(7),=X'00000060000001' COMPLETE MODE SET CCW
         BR    R10
         EJECT
*  ROUTINE TO ASK FOR THE OUTPUT TAPE
         SPACE 1
TPOUTSET DS    0H                                                90316
         CLI   STORFLAG,X'FF'
         BE    *+8
         BAL   R9,GETSTOR
         WTCLR '813D REPLY OUTPUT TAPE - MMXXX',                       *
               FLAG=(PFX,WTOR,IMM,UCMID)
         BAL   R9,WAITAPE
         B     TPOUTSET           KLUMSY KLOD APE-ERATOR
         MVC   OUTTRTCH(1),MM     MOVE MODE TO DCB RECORDING TECHNIQUE
         MVI   OUTDEVT,X'81'      SET TAPE INDICATOR IN DCB
         ST    R2,OUTDEBMD        STORE UCB ARRESS INTO DEB
         MVC   OUTDEBMD(1),MM     MOVE MODE TO DEB + 32
         OI    OUTIOB,X'40'       SET COMMAND CHAIN FLAG IN IOB
         MVC   OUTCCW(1),MMCCW    MOVE MODE INTO OUTPUT CCW 1    90316
         MVC   OUTCCW+1(7),=X'00000060000001'  COMPLETE CCW 1
         BR    R10
         SPACE 1
         STITL 'COMMON I/O ROUTINES'
*  COMMON I/O ROUTINE FOR OUTPUT
         SPACE 1
IOOUT    BAL   R14,TESTCIB        TEST WHETHER COMM ECB POSTED
         XC    OUTECB(4),OUTECB   SET OUT ECB TO ZEROES
         EXCP  OUTIOB             PERFORM OUTPUT
         WAIT  ECB=OUTECB         WAIT FOR COMPLETION
         NI    OUTDCB+44,X'3F'    RESTORE DCB
         BR    R11
         SPACE 3
*  COMMON I/O ROUTINE FOR INPUT
         SPACE 1
IOIN     BAL   R14,TESTCIB        TEST WHETHER COMM ECB POSTED
         XC    INECB(4),INECB     SET IN ECB TO ZEROES
         EXCP  INIOB              PERFORM THE INPUT
         WAIT  ECB=INECB          WAIT FOR COMPLETION
         NI    INDCB+44,X'3F'     RESTORE THE DCB
         BR    R11
         SPACE 1
         STITL 'WTO/WTOR SUBROUTINES - DOM YOUR EYES'
*  COMMON WAIT FOR ALL REPLIES
WAITANS  LA    R1,WTORECB
         ST    R1,AECB
         WAIT  ECBLIST=AECB             WAIT FOR REPLY OR STOP/MODIFY
         BAL   R14,DOMITALL             DOM ALL WTO IDS EXCEPT COMM
         BAL   R14,TESTCIB              TEST FOR STOP/MODIFY
         BR    R11
         SPACE 3
*              INPUT NUMERIC ROUTINE.
*              DESTROYS R0, R1, R2, R10, AND R11.
*              CALLED ON R10 AFTER WTCLR WITH WTOR
*              ISSUES THE WTOR AND WAITS FOR THE REPLY,
*              THEN CONVERTS THE REPLY TO BINARY.
*              RETURN IS TO +0 IF ERROR, ELSE TO +4.
*              RESULT LEFT IN R0.
NUMREPLY XC    REPLY,REPLY
         WTOR  MF=(E,(1))
         BAL   R11,WAITANS
         BAL   R14,TESTCIB
         SLR   R1,R1
         LA    R2,REPLY
NEXTDIG  CLI   0(R2),C'9'         SCREEN OUT FA-FF
         BH    BUMNUM
         CLI   0(R2),0            STOPPER ?
         LA    R1,1(,R1)          N:=N+1
         LA    R2,1(,R2)
         BNE   NEXTDIG
         BCT   R1,NUMOK           N:=(N+1)-1; ERROR IF 0
BUMNUM   WTCLR '806I NOT VALID NUMERIC REPLY',                         *
               FLAG=(PFX,UCMID,IMM),DESC=2
         BR    R10
NUMOK    MVC   MASKWK,=C'00000'   VERIFY THAT ALL DIGITS ARE F-
         NC    MASKWK,REPLY
         BCTR  R1,0               N-1 FOR EXECUTE
         EX    R1,NUMXC
         BNZ   BUMNUM
         EX    R1,NUMPACK         NOW PACK THEM AND CONVERT
         CVB   R0,TDWK
         B     4(,R10)
         SPACE 1
NUMXC    XC    MASKWK(0),=C'00000'
NUMPACK  PACK  TDWK,REPLY(0)
         SPACE 3
*              DELETE WTO FOR STOP/MODIFY PROMPTING.
*              THIS SUBROUTINE IS CALLED AT END OF JOB.
*              IT IS ALLSO CALLED AFTER A MODIFY "0CX,STOP",
*              SINCE THERE IS NO WAY OF TELLING WHETHER THE
*              MLWTO HAS ALREADY BEEN DELETED BY THE APE-ERATOR.
DOMCOMM  ICM   R1,15,WTOID1  FOR GP: NO ICM (NEWS: MY 360 HAS SIM370)
         BZR   R14           NEM TO DOM
         DOM   MSG=(1)
         XC    WTOID1,WTOID1
         BR    R14
         SPACE 2
*              TEST WHETHER COMM ECB POSTED.
*              IF POSTED, TEST STOP OR MODIFY.
TESTCIB  STM   R14,R12,SAVE14
         AM31  WORK=R15                                         GP97231
         L     R2,ACSCB
         USING IEECSCB,R2
         AIF   (NOT &MVSESA).CMESATS                            GP97231
         L     R11,CHCSCXP   GET THE CSCB EXTENSION             GP97231
         USING CSCX,R11      DECLARE IT                         GP97231
.CMESATS ANOP  ,                                                GP97231
TESTCIB1 TM    CHECB,X'40'
         BO    TESTCIB2
         AM24  ,                                                GP97231
         LM    R14,R12,SAVE14
         BR    R14
TESTCIB2 L     R1,CHCIBP
         USING IEZCIB,R1
         CLI   CIBVERB,CIBSTOP
         BE    EOJ
         CLI   CIBVERB,CIBMODFY
         BE    *+6
         DC    H'0'                     FORCE DUMP ON "IMPOSSIBLE" CIB
         CLI   CIBDATLN+1,4
         BL    BUMMOD
         CLC   =C'STOP',CIBDATA
         BE    TERMMSG
BUMMOD   QEDIT ORIGIN=CHCIBP,BLOCK=0(R1)
         WTO   'OEH999I MODIFY IGNORED: NOT F ID,STOP',                *
               DESC=(2,8,9),MCSFLAG=REG0
         BAL   R15,SAVEDOM
         B     TESTCIB1
         SPACE 2
         STITL 'WAIT FOR AND CONVERT MMCUU'
*  ROUTINE TO WAIT ON THE REPLY AND CONVERT THE MM INTO A SET MODE
WAITAPE  WAIT  ECB=WTORECB
         OC    MM(5),BLANKS
         CLC   MM(4),=C'STOP'     WAS REPLY STOP
         BE    ASKAGN
         SPACE 2
*        CHECK FOR VALID TAPE UCB IN TIOT                        82171
         USING SRT,R2
         BAL   R6,TIOTSCAN         GO GET UCB ADDRESS
         B     MMUCBFD       FOUND A UCB IN TIOT                 82171
         CLC   UCBNAME,XXX         COMPARE UCB UNIT WITH REPLY UNIT
         SPACE 1
MMFAILU  WTCLR '811I INVALID DEVICE',                                  *
               FLAG=(PFX,IMM,UCMID)
         BR    R9
         SPACE 2
MMUCBFD  CLI   UCBTBYT3,UCB3TAPE  TAPE UCB ?                     82171
         BNE   MMFAILU       NO; FAIL                            82171
         CLC   =C'00',MM     DOES OPERATOR WISH THE DEFAULT ?    82171
         BNE   MMNDFLT       NO                                  82171
         CLI   UCBTBYT4,X'80'   3480 ?                           90316
         BE    MMNDFLT       YES; NORMAL VALUE                   90316
         MVI   MM+1,C'3'     MAKE 'MODE' BYTE INTO NOP VALUE     82171
         B     MMOK2         AND PROCESS IT                      82171
MMNDFLT  LA    R14,MODE38K   SET FOR 18-TRACK 3480 AT 38K        90278
         LA    R15,2         SET FOR IMMEDIATE AND BUFFERED      90316
         CLI   UCBTBYT4,X'80'  3480 ?                            90278
         BE    MMLOOK        YES; ONLY 00 AND 20 VALID           90278
         LA    R15,1         SET FOR SINGLE DENSITY AVAILABLE    82171
         LA    R14,MODE800   SET FOR 9-TRACK 800 BPI             82171
         CLI   UCBTBYT1,X'33'  3480 IN 3400-9 COMPATIBILITY MODE ?
         BE    MM3400#9      YES; ONLY ONE VALID REQUEST         90278
         TM    UCBTBYT2,UCB2OPT0  9-TRACK DRIVE ?                82171
         BZ    MM9TRK        YES                                 82171
         LA    R14,MODE7TRK  ELSE SET 7-TRACK                    82171
         LA    R15,(MODE7END-MODE7TRK)/2  SET NUMBER OF ENTRIES  82171
         TM    UCBTBYT2,UCB2OPT1   DATA CONVET FEATURE PRESENT ? 82171
         BNZ   MMLOOK        YES; CHECK MM AGAINST SUPPORTED ONES
         LA    R15,(MODE7ET-MODE7TRK)/2  REMOVE CONVERT OPTIONS  82171
         B     MMLOOK        TRY ODD, EVEN, EVEN/TRANSLATE       82171
MM9TRK   TM    UCBTBYT1,UCB1FEA5+UCB1FEA6  HIGHER THAN 800 ?     82171
         BZ    MMLOOK        NO; ALLOW 9-TRK 800 ONLY            82171
         TM    UCBTBYT1,UCB1FEA6  6250 ?                         82171
         BNZ   MM6250        YES; CHECK FURTHER                  82171
         TM    UCBTBYT2,UCB2OPT2  DUAL-DENSITY ?                 82171
         BNZ   MMSET2        YES; ALLOW TWO DENSITIES            82171
         LA    R14,MODE1600  ELSE SET 1600 BPI ONLY              82171
         B     MMLOOK                                            82171
MM6250   LA    R14,MODE1600  PRESET FOR DUAL-DENSITY 1600/6250   82171
         TM    UCBTBYT2,UCB2OPT3  DUAL 1600/6250 ?               82171
         BNZ   MMSET2        YES; ALLOW TWO                      82171
MM3400#9 LA    R14,MODE6250  ELSE SET 6250 ONLY                  82171
         B     MMLOOK                                            82171
MMSET2   LA    R15,2         ALLOW TWO DENSITIES                 82171
MMLOOK   CLC   MM(2),0(R14)  VALID DENSITY ?                     82171
         BE    MMOK2         YES; ALLOW                          82171
         LA    R14,2(,R14)   TRY NEXT ENTRY                      82171
         BCT   R15,MMLOOK                                        82171
         SPACE 2
BOOBOO   WTCLR '814I INVALID MODE SET IN REPLY',                       *
               FLAG=(PFX,IMM,UCMID),DESC=7
         BR    R9                 GIVE THE JERK ANOTHER CHANCE
         SPACE 1                                                 82171
MODE800  DC    C'CB'         9-TRK   800 BPI                     82171
MODE1600 DC    C'C3'         9-TRK  1600 BPI                     82171
MODE6250 DC    C'D3'         9-TRK  6250 BPI                     82171
MODE38K  DC    C'00'        18-TRK 38000 BPI   CARTRIDGE         90316
         DC    C'20'        18-TRK 38000 BPI - IMMEDIATE MODE    90316
MODE7TRK DC    C'B3'         7-TRK   800 BPI     ODD             82171
         DC    C'73'         7-TRK   556 BPI     ODD             82171
*        DC    C'33'         7-TRK   200 BPI     ODD             82171
         DC    C'BB'         7-TRK   800 BPI     ODD, TRANSLATE  82171
         DC    C'7B'         7-TRK   556 BPI     ODD, TRANSLATE  82171
*        DC    C'3B'         7-TRK   200 BPI     ODD, TRANSLATE  82171
         DC    C'A3'         7-TRK   800 BPI     EVEN            82171
         DC    C'63'         7-TRK   556 BPI     EVEN            82171
*        DC    C'23'         7-TRK   200 BPI     EVEN            82171
         DC    C'AB'         7-TRK   800 BPI     EVEN, TRANSLATE 82171
         DC    C'6B'         7-TRK   556 BPI     EVEN, TRANSLATE 82171
*        DC    C'2B'         7-TRK   200 BPI     EVEN, TRANSLATE 82171
MODE7ET  EQU   *                                                 82171
         DC    C'93'         7-TRK   800 BPI     ODD, DATA CONVERT
         DC    C'53'         7-TRK   556 BPI     ODD, DATA CONVERT
*        DC    C'13'         7-TRK   200 BPI     ODD, DATA CONVERT
MODE7END EQU   *                                                 82171
         SPACE 2                                                 82171
MMOK2    BAL   R6,CONVRTMM         GO CONVERT MM TO MODE SET
         MVI   MMCCW,X'03'   MAKE CCW OP-CODE A NO-OP            90316
         CLI   UCBTBYT4,X'80'   3480 ?                           90316
         BE    4(,R9)        YES; NORMAL VALUE                   90316
         OC    MMCCW,MM      ELSE MAKE MODE SET                  90316
         B     4(,R9)        RETURN TO CALLER                    82171
         DROP  R2                                                82171
         SPACE 1
APPEND   BR    R14
         STITL 'SCAN TIOT'
*  SCAN TIOT FOR UCB ADDRESS
         USING TIOT,R3
TIOTSCAN SLR   R0,R0              CLEAR TIOT LENGTH REGISTER
         SLR   R2,R2         CLEAR FOR SRT ICM                   90278
         L     R3,TIOTADR         LOAD TIOT ADDRESS FOR LOOP
*  SCAN FOR DDNAME
TIOTLOOP CLI   TIOELNGH,0         END OF TIOT?
         BE    10(,R6)            NOT FOUND EXIT
         LAT   R2,TIOEFSRT-1  LOAD UCB ADDRESS, IF ANY           90278
         LTR   R2,R2               IS THIS DUMMY, OR SOME SUCH?
         BZ    BUMPTIOT            YES - SKIP TO NEXT ENTRY
         EX    0,4(,R6)           COMPARE TO DDNAME OR UCBNAME
         BER   R6                 FOUND EXIT
BUMPTIOT IC    R0,TIOELNGH        INSERT ENTRY LENGTH
         AR    R3,R0              GET ADDRESS OF NEXT ENTRY
         B     TIOTLOOP
         DROP  R3
         STITL 'GET STORAGE FOR TAPE BUFFER'
GETSTOR  DS    0H                                                90316
       GETMAIN EC,LV=65536,A=TDAREA,SP=0                         82171
         LTR   15,15         DID WE GET IT ?
         BZ    GOTSTOR       YES
         MVI   STORFLAG,0    JUST IN CASE
         WTCLR '821 INSUFFICIENT STORAGE FOR A TAPE OPERATION',        *
               FLAG=(PFX,IMM,UCMID),DESC=2
         B     ASKAGN
GOTSTOR  MVI   STORFLAG,X'FF'
         MVC   CTCCW+1(3),TDAREA+1
         MVC   TDINCCW+1(3),TDAREA+1
         MVC   TDRESTIN+1(3),TDAREA+1
         MVC   TPINCCW+1(3),TDAREA+1
         MVC   TTCCWOUT+1(3),TDAREA+1
         MVC   WTCCW+1(3),TDAREA+1
         MVC   CTBCCW1+1(3),TDAREA+1
         BR    R9
         STITL 'OPEN SYSIN, AND READ CARD'
OPENINPT NOPR  R9
         MVI   OPENINPT+1,X'F9'        SET SYSIN OPEN SWITCH
         OPEN  (SYSIN,(INPUT))
         L     R1,=A(SYSIN)
         USING IHADCB,1
         TM    DCBOFLGS,DCBOFOPN
         BZ    COSYSIN
         DROP  R1
         BR    R9
COSYSIN  WTCLR '807I NO DD CARD FOR SYSIN',                            *
               DESC=(2,8,9),FLAG=(PFX,IMM,UCMID)
         B     ASKAGN
         SPACE 5
READ     BAL   R14,TESTCIB             'F 0CX' OR 'P 0CX' RECEIVED?
         GET   SYSIN,CARD
         B     4(,R11)
EOF      CLOSE (SYSIN)       ALLOW MULTIPLE USE OF CARD READER
         MVI   OPENINPT+1,X'09'
         BR    R11
         STITL 'OPEN SYSPUNCH, AND PUNCH A CARD'
OPENPNCH NOPR  R9
         MVI   OPENPNCH+1,X'F9'        SET SYSPUNCH OPEN SWITCH
         OPEN  (SYSPUNCH,(OUTPUT))
         L     R1,=A(SYSPUNCH)
         USING IHADCB,1
         TM    DCBOFLGS,DCBOFOPN
         BZ    COSYSPCH
         DROP  R1
         BR    R9
COSYSPCH WTCLR '807I NO DD CARD FOR SYSPUNCH',                         *
               DESC=(2,8,9),FLAG=(PFX,IMM,UCMID)
         B     ASKAGN
         SPACE 5
PUNCH    BAL   R14,TESTCIB             'F 0CX' OR 'P 0CX' RECEIVED?
         PUT   SYSPUNCH,CARD
         BR    R11
         STITL 'WTO/WTOR SUBROUTINE'
         PRINT GEN
         WTBLD PFX='OEH',SFX=,SCON=YES,UCMID=UCMID,CPU=&CPU       *TSM*
         PRINT &PRTSOR                                           82171
         STITL 'CONSTANTS'
TDWK     DS    D
TDAREA   DC    F'0'
STORFLAG DC    X'00'
         DS    0F
MESSAGE  DC    AL2(THERE-*)     MESSAGE LENGTH
         DC    AL2(0)
         DC    C'819I '
COUNT    DC    C'NUMBER '
         DC    C'RECORDS PROCESSED'
THERE    EQU   *
PAGENO   DC    PL3'0'
PAGE     DC    C'PAGE',X'402020202120'
BLKCNT   DC    PL3'0'
TRHEXTAB DC    C'0123456789ABCDEF'
TRCTAB   TRTAB CODE=PN,OPT=FOLD                                   *TSM*
HEAD2    DS    0CL133
         DC    C'-'
         DC    C'....:....'
         DC    C'1'
         DC    C'....:....'
         DC    C'2'
         DC    C'....:....'
         DC    C'3'
         DC    C'....:....'
         DC    C'4'
         DC    C'....:....'
         DC    C'5'
         DC    C'....:....'
         DC    C'6'
         DC    C'....:....'
         DC    C'7'
         DC    C'....:....'
         DC    C'8'
         DC    C'....:....'
         DC    C'9'
         DC    C'....:....'
         DC    C'1'
         DC    32C' '
HEAD3    DS    0CL133
         DC    C' '
         DC    10C'1234567890'
         DC    32C' '
HEAD4    DS    0CL133
         DC    C'0'
         DC    C'. . . . : . . . . '
         DC    C'10'
         DC    C'. . . . : . . . . '
         DC    C'20'
         DC    C'. . . . : . . . . '
         DC    C'30'
         DC    C'. . . . : . . . . '
         DC    C'40'
         DC    C'. . . . : . . . . '
         DC    C'50'
         DC    32C' '
CTLCHAR  DC    C' '
LINE     DS    CL132
RECHDG   DC    C'BLOCK'
         DC    X'402020202120'
         DC    C'  LENGTH'
         DC    X'402020202120'
HEAD     DC    C'* * * M V T  D E B E * * *'
MASKWK   DS    CL5
BLANKS   DC    10C' '
LINECT   DC    X'000F'
TDAREA2  DS    CL101
         EJECT
*  DCB FOR INPUT DATA SET
         SPACE 1
INDCB    DS    0F
         DC    4F'0'
INTRTCH  EQU   *
INMODSTK EQU   *
         DC    X'00'
INDEVT   DC    X'00'
INDENS   DC    X'00'
         DC    X'00'
         DC    5F'0'
         DC    H'0'
         DC    BL2'1101000000001000'
         DC    A(INDEB)
         DC    X'10000000'
         DC    5F'0'
         SPACE 1
*  DEB FOR INPUT DATA SET
         SPACE 1
INIOVEC  EQU   *
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    3F'0'
         DC    X'06000000'
INDEB    DS    0F
         DC    F'0'
         DC    X'04'
         DC    AL3(OUTDEB)
         DC    X'C0000000'
         DC    X'30000000'
         DC    2F'0'
         DC    X'0F'
         DC    AL3(INDCB)
         DC    X'02'
         DC    AL3(INIOVEC)
INDEBMOD DC    X'00'
INDEBUCB DC    X'000000'
         DC    F'0'
         SPACE 1
*  ECB FOR INPUT DATA SET
         SPACE 1
INECB    DC    F'0'
         SPACE 1
*  IOB FOR INPUT DATA SET
         SPACE 1
INIOB    DS    0F
         DC    X'0200'
INSENS   DC    H'0'
         DC    X'7F'
         DC    AL3(INECB)
INSTAT   DC    2F'0'
         DC    A(INCCW)
         DC    A(INDCB)
         DC    F'0'
         DC    H'1'
         DC    H'0'
INDASD   DC    X'00'
INSEEK   DC    XL7'00'
         SPACE 1
*  CCW'S FOR INPUT DATA SET
         SPACE 1
INCCW    DS    5D
         SPACE 3
*  DCB FOR OUTPUT DATA SET
         SPACE 1
OUTDCB   DS    0F
         DC    4F'0'
OUTTRTCH EQU   *
OUTMDSTK EQU   *
         DC    X'00'
OUTDEVT  DC    X'00'
OUTDENS  DC    X'00'
         DC    X'00'
         DC    5F'0'
         DC    H'0'
         DC    BL2'1101000000001000'
         DC    A(OUTDEB)
         DC    X'10000000'
         DC    5F'0'
         SPACE 1
*  DEB FOR OUTPUT DATA SET
         SPACE 1
OUTIOVEC EQU   *
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    3F'0'
         DC    X'06000000'
OUTDEB   DS    0F
         DC    F'0'
         DC    X'17000000'
         DC    X'C0000000'
         DC    X'30000000'
         DC    2F'0'
         DC    X'0F'
         DC    AL3(OUTDCB)
         DC    X'02'
         DC    AL3(OUTIOVEC)
OUTDEBMD DC    X'00'
OUTDBUCB DC    X'000000'
         DC    F'0'
         SPACE 1
*  ECB FOR OUTPUT DATA SET
         SPACE 1
OUTECB   DC    F'0'
         SPACE 1
*  IOB FOR OUTPUT DATA SET
         SPACE 1
OUTIOB   DS    0F
         DC    XL2'0200'
OUTSENS  DC    H'0'
         DC    X'7F'
         DC    AL3(OUTECB)
OUTSTAT  DC    2F'0'
         DC    A(OUTCCW)
         DC    A(OUTDCB)
         DC    F'0'
         DC    H'1'
         DC    H'0'
OUTDASD  DC    X'00'
OUTSEEK  DC    XL7'00'
         SPACE 1
*  CCW'S FOR OUTPUT DATA SET
         SPACE 1
OUTCCW   DS    5D
         SPACE 3
*  CONSTANTS AND CCW'S      * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
BFCCW    CCW   X'2F',SFCCW,X'60',1
BSCCW    CCW   X'27',BSCCW,X'60',1
CTCCW    CCW   1,TDAREA,X'20',80
RWCCW    CCW   7,RWCCW,X'60',1
SFCCW    CCW   X'3F',SFCCW,X'60',1
SRCCW    CCW   X'37',BSCCW,X'60',1
TDINCCW  CCW   2,TDAREA,X'20',65535                              82171
TDRESTIN CCW   2,TDAREA,X'20',65535                              82171
TPINCCW  CCW   2,TDAREA,X'20',65535                              82171
TTCCWOUT CCW   1,TDAREA,X'20',65535                              82171
WTCCW    CCW   31,TDAREA,X'20',1
CTBCCW1  CCW   2,TDAREA-80,X'20',80
         SPACE 3
OPENSW   DC    X'00'
         SPACE 1
SYSIN    DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,RECFM=FB,LRECL=80,       *
               EODAD=EOF,EXLST=@DCBXLST                          90278
         SPACE 5
SYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,RECFM=FBA,LRECL=133,  *
               EXLST=@DCBXLST                                    90278
         SPACE 5
SYSPUNCH DCB   DDNAME=SYSPUNCH,MACRF=PM,DSORG=PS,RECFM=FB,LRECL=80,    *
               EXLST=@DCBXLST                                    90278
         SPACE 5
         LTORG
         STITL 'WORK AREA AND SYSTEM DSECTS'                     82171
SAVE     DSECT
TIOTADR  DS    A
ACSCB    DS    A
AECB     DS    A
ASTOP    DS    A
WTOID1   DS    F
         PRINT GEN
         WTWRK SCON=YES
         PRINT NOGEN
ID       EQU   REPLY,3,C'C'                                      82171
MM       EQU   REPLY,2,C'C'                                      82171
XXX      EQU   REPLY+2,3,C'C'                                    82171
CARD     DS    CL80
UCMID    DS    XL1
MMCCW    DC    X'00'         CCW OPCODE FOR MODESET              90316
SAVEND   EQU   *
         SPACE 2                                                 82171
         PRINT &PRTSYS                                           82171
         CVT   DSECT=YES                                         90284
         SPACE 2                                                 82171
        IKJTCB
         SPACE 2                                                 82171
       IEZJSCB
         SPACE 2                                                 82171
IEECSCB  DSECT
      IEECHAIN
         SPACE 2                                                 82171
IEZCIB   DSECT
        IEZCIB
         SPACE 2                                                 82171
TIOT     DSECT
      IEFTIOT1
         SPACE 2                                                 82171
SRT      DSECT
      IEFUCBOB
         SPACE 2                                                 82171
         DCBD  DSORG=PS
         SPACE 1                                                 90278
         AIF   (NOT &MVS).NOPSA                                  90278
         IHAPSA ,                                                90278
.NOPSA   END   MVTDEBE
