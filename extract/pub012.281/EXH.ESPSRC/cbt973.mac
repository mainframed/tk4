CBT973   TITLE 'C B T 9 7 3  ***  CBT MODS COMPRESS/DECOMPRESS'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*          DATA SET CBT973     AT LEVEL 003 AS OF 03/21/79
* * * *                C B T 9 7 3                        * * * *
* * * *                                                   * * * *
* * * *       WRITTEN   BY  H. HANELT                     * * * *
* * * *                 CONNECTICUT BANK & TRUST COMPANY  * * * *
* * * *                                                   * * * *
* * * *       DDNAMES                                     * * * *
* * * *                                                   * * * *
* * * *       I N P U T                                   * * * *
* * * *                                                   * * * *
* * * *       O U T P U T                                 * * * *
* * * *                                                   * * * *
* * * *       MACROS                                      * * * *
* * * *                                                   * * * *
* * * *       I E F J F C B N  (SYS1.AMODGEN)             * * * *
* * * *                                                   * * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                   *
*  THIS PROGRAM WAS WRITTEN SPECIFICALLY TO COMPRESS AND            *
*  DECOMPRESS THE CBT MVSMODS TAPE.                                 *
*  IT MAKES SOME BASIC ASSUMPTIONS:                                 *
*       1. YOU MUST SUPPLY DCB INFORMATION ON INPUT AND OUTPUT      *
*       2. IT WILL ONLY COMPRESS 80 BYTE INPUT RECORDS              *
*       3. ON COMPRESSION IT WILL OUTPUT VB RECORDS                 *
*       4. FOR COMPRESSION YOU MUST SUPPLY A PARM FIELD (ANYTHING   *
*          AS LONG AS SOMETHING IS THERE)                           *
*       5. FOR DECOMPRESSION YOU MUST NOT SUPPLY A PARM FIELD       *
*       6. ON DECOMPRESSION IT WILL OUTPUT FIXED 80 BYTE RECORDS    *
*                                                                   *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * * *                                                   * * * *
         EJECT
         MACRO
&NAME    GETPARM
&NAME    L     15,4(13)  GET ADDRESS OF THE PREVIOUS SAVE AREA
KFBR&SYSNDX L    14,4(15)   GET ADDRESS OF THE NEXTPREVIOUS SAVE AREA
         LTR   14,14     ARE WE IN THE O/S SAVEAREA?
         BZ    KFBN&SYSNDX  YES GO TEST PARM
         LR    15,14   NO, MAKE 15 = 14 AND BE READY FOR NEXT TEST
         B     KFBR&SYSNDX   BRANCH BACK TO THE LOOP
KFBN&SYSNDX L     14,24(15)  WE ARE NOW IN O/S. GOODY GOODY
         L     14,0(14)   LOAD IN THE ADDRESS OF THE ADDRESS
         SR    1,1
         SR    15,15
         LH    15,0(14)   PUT COUNT OF PARM INTO R15
         LTR   15,15   IS COUNT OF PARM= 0?
         BZ    *+8    YES, DO NOT PUT ADDRESS OF PARM INTO R1
         LA    1,2(14)
*   AT THIS POINT THE COUNT OF THE PARM FIELD IS IN REGISTER 15.
*   IF REGISTER 15 IS = TO 0, REGISTER 1 WILL ALSO BE SET TO ZERO
*   IF THERE IS A POSITIVE VALUE IN REGISTER 15, THERE WILL BE A
*   VALID ADDRESS IN REGISTER 1, WHICH WILL BE A ADDRESS OF THE ACTUAL
*   PARM FIELD DATA.
         MEND
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * * *       C O M P R E S S I O N     P R O G R A M     * * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
CBT973   CSECT
         STM   R14,R12,12(13)
         BALR  R12,R0
         USING *,R12
         LA    R15,SAVEAREA
         ST    R15,8(R13)
         ST    R13,4(R15)
         LR    R13,R15
         LA    R10,TAPEIN
         LA    R11,FILE1
         BAL   R4,INITFIN
         LA    R10,TAPEOUT
         LA    R11,FILE2
         BAL   R4,INITFOUT
         GETPARM
         LTR   R15,R15
         BZ    DECOMPRS
         B     COMPRESS
         SPACE 2
EOJ      EQU   *
         CLOSE (TAPEIN,,TAPEOUT)
EXIT     EQU   *
         L     R13,4(R13)
         LM    R14,R12,12(R13)
         SLR   R15,R15
         BR    R14
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * * *     C O M P R E S S   A L L   B L A N K S         * * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
COMPRESS EQU   *
         CLI   TAPEIN,C'V'
         BE    COMPVB
COMPFB   EQU   *
         GET   TAPEIN
         LA    R4,16                   16 BYTES AT A TIME
         LA    R5,HDR                  HDR BYTES
         LA    R6,5                    5 LOOPS PER RECORD
         SLR   R2,R2                   CLEAR R7
         ICM   R3,12,HEXFF             ONE BITS
         LR    R8,R1                   ADDR OF RECORD
         LA    R9,RECDATA
CHKBYTE  EQU   *
         CLI   0(R8),X'40'             CHK IF BLANK
         BE    NOMOVE                  SKIP THE MOVE
         MVC   0(1,R9),0(R8)           MOVE THE BYTE
         LA    R9,1(R9)
         SLDL  R2,1
         B     NOMOVE+4
NOMOVE   EQU   *
         SLL   R2,1                    POINT TO NEXT MASK BIT
         LA    R8,1(R8)                POINT TO NEXT BYTE
         BCT   R4,CHKBYTE
         STH   R2,0(R5)                PUT MASK BITS IN HDR
         LA    R5,2(R5)
         LA    R4,16
         SLR   R2,R2                   CLEAR R7
         ICM   R3,12,HEXFF
         BCT   R6,CHKBYTE
         LA    R6,RDW
         SR    R9,R6                   R9 = LENGTH
         STH   R9,LENGTH               SAVE IN RECORD
*        LA    R6,RDW                  ADDR OF RECORD DESCRIPT WORD
         PUT   TAPEOUT,(6)
         B     COMPFB                                        ESP 85084
COMPVB   EQU   *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * * *     D E C O M P R E S S   A L L   B L A N K S     * * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
DECOMPRS EQU   *
         GET   TAPEIN
         LA    R7,2(R1)                HDR BITS
         LA    R8,14(R1)
         LA    R9,FIXEDATA             WHERE BUILD RECORD
         MVC   FIXEDATA,FIXEDATA-1  CLEAR RECORD             ESP 85084
         LA    R6,5                    5 LOOPS
INITR4   EQU   *
         LA    R4,16
         LA    R7,2(R7)
         ICM   R3,12,0(R7)
         SRL   R3,1          ALIGN FOR BX LOGIC              ESP 85084
         OR    R3,R4         ENSURE ONE NON-ZERO BYTE        ESP 85084
CHKBIT   EQU   *                                             ESP 85084
         BXH   R3,R3,NEXTBYTE          CHK IF NEED BLANK     ESP 85084
         MVC   0(1,R9),0(R8)           MOVE THE BYTE
         LA    R8,1(R8)
NEXTBYTE EQU   *
         LA    R9,1(R9)
         BCT   R4,CHKBIT
         BCT   R6,INITR4
         PUT   TAPEOUT,FIXEDATA
         B     DECOMPRS
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * * *       I N I T I A L I Z E     F I L E S           * * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
INITFIN  EQU   *
         OPEN  ((10),(INPUT))
         B     READJFC
INITFOUT EQU   *
         MVC   DDNAME,=CL8'OUTPUT'
         OPEN  ((10),(OUTPUT))
READJFC  EQU   *
         RDJFCB ((10))
         LTR   R15,R15
         BNZ   ERROR1
         LA    R9,JFCBDATA
         USING JFCBLK,R9
         LH    R2,JFCLRECL             LRECL OF FILE
         TM    JFCRECFM,X'C0'          CHK IF UNDEFINED
         BO    UNDEFIND
         TM    JFCRECFM,X'80'          CHK IF FIXED RECORDS
         BO    FIXED
         TM    JFCRECFM,X'40'          CHK IF VARIABLE RECORDS
         BO    VARIABLE
         LA    R15,16
         B     ERROR2
UNDEFIND EQU   *
         LA    R15,12
         B     ERROR2
FIXED    EQU   *
         MVC   0(2,R11),=C'FB'
         BR    R4
VARIABLE EQU   *
         MVC   0(2,R11),=C'VB'
         BR    R4
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * * *         E R R O R       R O U T I N E S           * * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
ERROR1   EQU   *
         MVC   WTO1+22(8),DDNAME
WTO1     WTO   '* * *  CBT973  XXXXXXXX  DDNAME MISSING  * * *',       X
               ROUTCDE=11
         B     EXIT
ERROR2   EQU   *
         CVD   R15,DECIMAL
         UNPK  DECIMAL(3),DECIMAL+6(2)
         OI    DECIMAL+2,C'0'
         MVC   WTO2+38(3),DECIMAL
         MVC   WTO2+22(8),DDNAME
WTO2     WTO   '* * *  CBT973  XXXXXXXX  RC = 000  * * *',ROUTCDE=11
         B     EXIT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * * *         D A T A         C O N S T A N T S         * * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
SAVEAREA DS    18F
JFCB1    DC    X'07',AL3(JFCBDATA)
JFCB2    DC    X'07',AL3(JFCBDATA)
         DC    X'80',AL3(0)
HEXFF    DC    4X'FF'
DECIMAL  DC    D'0'
DDNAME   DC    CL8'INPUT '
FILE1    DC    C'FB'
FILE2    DC    C'FB'
         SPACE 2
RDW      DS    0F
LENGTH   DC    H'0'
         DC    H'0'
HDR      DC    10X'00'
RECDATA  DC    CL80' '
         SPACE 2
         DC    C' '          1/2 FOR BLANKING                ESP 85084
FIXEDATA DC    CL80' '       2/2
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 2
         LTORG
         EJECT
TAPEIN   DCB   DDNAME=INPUT,MACRF=(GL),DSORG=PS,EODAD=EOJ,             X
               EXLST=JFCB1
TAPEOUT  DCB   DDNAME=OUTPUT,MACRF=(PM),DSORG=PS,EXLST=JFCB2
         EJECT
JFCBDATA DC    CL176' '
JFCBLK   DSECT
         IEFJFCBN
         END
