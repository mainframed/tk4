SUBCAT   TITLE 'S U B C A T  ***  ICF CATALOG RETRIEVAL SUBROUTINE'
         MACRO ,
&NM      CSIFD &AD,&LEN,&FILL=0
         GBLC  &MACPLAB
&MACPLAB SETC  '&NM'
         LCLA  &K
         LCLC  &L
&K       SETA  K'&AD
&L       SETC  'L'''
         MACPARM R2,&AD .    GET OUTPUT ADDRESS
         AIF   ('&LEN' NE '').LEN
         AIF   ('&AD'(1,1) NE '(').LATTR
         AIF   (&K LT 4).TLEN
         AIF   ('&AD'(2,1) EQ '(').LATTR
         AIF   ('&AD'(&K,1) EQ ')').TLEN
.LATTR   MACPARM R3,&L&AD    USE IMPLICIT OUTPUT LENGTH
         AGO   .BAL
.TLEN    AIF   ('&LEN' NE '').LEN
         MNOTE 4,'LENGTH REQUIRED'
.LEN     MACPARM R3,&LEN     GET OUTPUT LENGTH
.BAL     MACPARM CSWDB,&FILL,OP=MVI,OPR=MVI,MODE=EVEN,NULL=SKIP
         MACPARM R14,GETVAL,OP=BAL
         MEND  ,
         SPACE 2
         MACRO ,
&NM      CETY  &ETYPE,&DESC,&OPRTNE,&OPFD
         LCLC  &LOP,&LFD
         GBLB  &ZZCETYF
&LOP     SETC  '&OPRTNE'
&LFD     SETC  '&OPFD'
         AIF   ('&LOP' NE '').GOTOP
&LOP     SETC  'FMTDS'
.GOTOP   AIF   ('&LFD' NE '').GOTFD
&LFD     SETC  '0'
.GOTFD   AIF   ('&DESC'(1,1) EQ '''').GOTQUOT
&NM      DC    CL1'&ETYPE ',CL7'&DESC ',SL2(&LOP,&LFD)
         AGO   .COMMON
.GOTQUOT ANOP  ,
&NM      DC    CL1'&ETYPE ',CL7&DESC,SL2(&LOP,&LFD)
.COMMON  AIF   (&ZZCETYF).MEND
&ZZCETYF SETB  1
CETOETYP EQU   0,1,C'C'
CETODESC EQU   1,7,C'C'
CETOFORM EQU   8,2,C'S'
CETOFILD EQU   10,2,C'S'
.MEND    MEND  ,
         SPACE 2
         COPY  OPTIONGB
         SPACE 1
         SYSPARM LIST=YES
         SPACE 2
***********************************************************************
*                                                                     *
*                                                                     *
*        COPYRIGHT 2002,2009  EXPERT SYSTEM PROGRAMMING               *
*                        176 OLD STAGE COACH ROAD                     *
*                        BRADFORD, VT 05033-8844                      *
*                                                                     *
*                    ALL RIGHTS RESERVED                              *
*                                                                     *
***********************************************************************
         EJECT ,
***********************************************************************
**                                                                   **
**  SUBCAT - PERFORM CATALOG LOOKUP FUNCTIONS                        **
**                                                                   **
**    THIS SUBROUTINE IS INVOKED USING THE CATLOOK MACRO, AND THE    **
**    CATSPARM WORK AREA MAPPING. SEE EXHCCDMP OR PUNK FOR USE.      **
**                                                                   **
**    FOR AN ASSEMBLY WITH MVS/XA OR LATER, IGGCSI00 IS CALLED;      **
**    FOR EARLIER SYSTEMS, SUPER-LOCATE IS USED. THERE IS NO SUPPORT **
**      FOR MFT OR MVT.                                              **
**                                                                   **
***********************************************************************
         GBLB  &BAKR         SET NEWFANGLED WHEN ASMTRACE READY
&BAKR    SETB  (&MVSXA)      READY TO TRY IT
         PRINT NOGEN
         AIF   (NOT &BAKR).NOTBAKR
SUBCAT   START 0
SUBCAT   AMODE 31            I GET TO BE ON TOP
SUBCAT   RMODE ANY
         BAKR  R14,0         STACK CALLER'S DATA
         LA    R14,SUBCATSL-SUBCAT  OFFSET
         BASR  R12,0         MAKE A NEW BASE
SUBCATSL SLR   R12,R14       MAKE IT MATCH ASSEMBLY OFFSETS
         USING SUBCAT,R12    DECALRE IT
         AGO   .COMBAKR
.NOTBAKR ANOP  ,
SUBCAT   PGMHEAD ZERO12,BASE=R12,PARM=R1,AM=31,RM=ANY
.COMBAKR AIF   (NOT &MVSXA).USEVSAM                             GP09157
         LA    R1,0(,R1)     CLEAN HIGH BIT                     GP03261
         LTR   R8,R1         GET CALLER'S PARM POINTER          GP03261
         BZ    MISSPARM                                         GP03261
         USING CSPDSECT,R8   DECLARE IT
         ICM   R10,15,CSP@WORK  ANYTHING IN WORK ANCHOR ?
         BNZ   REQCHECK      YES; ASSUME INITIALIZED
         SPACE 1
***********************************************************************
**                                                                   **
**  INITIALIZE:  OBTAIN WORK AREA AND SAVE ADDRESS IN USER'S PARM    **
**    USER MUST MAINTAIN IT FOR LATER MODULE AND STORAGE CLEANUP.    **
**    INITIALIZE THE AREA.                                           **
**                                                                   **
***********************************************************************
REQFIRST ICM   R0,1,CSP$REQ    GET REQUEST TYPE                 GP05277
         BZ    GOODEXIT      CLOSE; NO PRIOR OPEN               GP05277
         SR    R2,R2
         IC    R2,CSP#SP     LOAD SUBPOOL (GENERALLY = 0)
         LA    R3,CSWSIZE    SET STORAGE SIZE
         STORAGE OBTAIN,SP=(R2),LENGTH=(R3),LOC=BELOW  GET IT OR ABEND
         STCM  R3,7,CSP#SPL  SAVE SIZE OBTAINED
         ST    R1,CSP@WORK   AND SAVE ADDRESS
         SR    R15,R15       JUST IN CASE
         LR    R2,R1         COPY ADDRESS
         MVCL  R2,R14        CLEAR IT TO ZEROES
         LR    R10,R1        MAKE IT OFFICIAL
         USING CSWDSECT,R10  DECLARE IT
         LOAD  EPLOC==CL8'IGGCSI00',ERRET=BADENTRY  TRY TO LOAD IT
         ST    R0,CSW@CSI    SAVE IT
         ICM   R0,15,CSP@SCMP  DID CALLER LOAD SUBCOMP ?        GP03046
         BNZ   REQFIRCM      YES; USE IT                        GP03046
         LOAD  EPLOC==CL8'SUBCOMP'  LOAD COMPARE ROUTINE        GP03046
         ST    R0,CSP@SCMP   REMEMBER THE ADDRESS               GP03046
         OI    CSWPFLGS,CSWPFCMP  REMEMBER WE LOADED SUBCOMP    GP03046
REQFIRCM LA    R15,CSW@CRTN  GET RETURN CODE ADDRESS
         LA    R0,CSW@CFLD   SELECTION FIELDS
         STM   R15,R1,CSW@CPRM   MAKE PARM ADDRESSES
         MVI   CSW@CFLD,C' '   INITIALIZE REQUEST FIELDS
         MVC   CSW@CFLD+1(CSW@C#EN-CSW@CFLD-1),CSW@CFLD  CLEAR ALL
         MVC   CSW@C#EN(PATFIENM*8+2),PATFIELD  PATTERN FIELD NAMES
         MVI   CSW@CO1C,C'Y'  SEARCH MORE THAN ONE CATALOG
         LA    R0,CSWCM@WK   GET POINTER TO SUBCOMP ROOT
         ST    R0,CSWCMPRM+12  INITIALIZE IT
         L     R3,=A(256*1024)  SET SIZE
         LR    R4,R3         SAVE OVER MVCL
         STORAGE OBTAIN,LENGTH=(R3)         GET SOME STORAGE
         LA    R15,CSW@CRTN  GET RETURN CODE ADDRESS
         LA    R0,CSW@CFLD   SELECTION FIELDS
         STM   R15,R1,CSW@CPRM   MAKE PARM ADDRESSES
         LR    R2,R1
         SR    R15,R15       CLEAR LENGTH AND FILL BYTE
         MVCL  R2,R14        CLEAR IT
         ST    R4,0(,R1)     INITIALIZE WORK AREA LENGTH
         PUSH  USING
         L     R5,CVTPTR
         NUSE  CVT,R5
         ICM   R5,15,CVTCBSP    -> AMCBS
         BZ    DONECAX       HUH?
         USING AMCBS,R5
         LA    R5,CBSCAXCN-(CAXCHN-IGGCAXWA)
         USING IGGCAXWA,R5
NEXTCAX  ICM   R5,15,CAXCHN
         BZ    DONECAX
         LA    R1,CSW@CAHD   ELSE SEE IF ALREADY ON CHAIN
         USING CSCDSECT,R1
LOOPCAX  ICM   R1,15,CSCLINK    ANY MORE ?
         BZ    UCAXADD
         CLC   CSCNAME,CAXCNAM  QUEUED BEFORE ?
         BNE   LOOPCAX       NO; TRY AGAIN
         B     SKIPCAX       YES; DON'T ADD TO CHAIN
UCAXADD  STORAGE OBTAIN,LENGTH=CSCSIZE
         L     R15,CSW@CAHD  GET OLD POINTER
         ST    R15,CSCLINK   CHAIN IN
         ST    R1,CSW@CAHD
         ICM   R14,15,CSW@CATL  IS TAIL SET?
         BNZ   TAILCAX       YES; LET IT BE
         ST    R1,CSW@CATL   SET END POINTER
TAILCAX  MVC   CSCNAME,CAXCNAM
         ST    R15,CSCCAX    REMEMBER THE CAX ADDRESS
         XC    CSCFLGS(4),CSCFLGS  CLEAR REST
         TM    CAXFLGS,CAXMCT  MASTER CATALOG ENTRY ?
         BZ    NEXTCAX       NO
         MVC   CSWMSCAT,CAXCNAM
         ST    R1,CSW@CAMS   REMEMBER THE MASTER
SKIPCAX  B     NEXTCAX       NO
DONECAX  MVC   CSWCUCAT,CSWMSCAT SET DEFAULT
         B     REQCHECK      SEE WHY WE WERE CALLED
         POP   USING
         SPACE 1
***********************************************************************
**                                                                   **
**  CALLER PASSES A REQUEST NUMBER (IN R0) AND A DATA AREA           **
**    VALID REQUESTS ARE:                                            **
**                                                                   **
**    0 - TERMINATE CATALOG PROCESSING                               **
**    1 - GET A SINGLE ENTRY                                         **
**    2 - START PROCESSING A GENERIC REQUEST                         **
**    3 - CONTINUE WITH NEXT GENERIC                                 **
**                                                                   **
***********************************************************************
REQCHECK SR    R2,R2
         IC    R0,CSP$REQ    GET REQUEST TYPE
         BIX   ERR=BADENTRY,PFX=REQ,   BRANCH BY REQUEST TYPE          *
               LOC=(CLOSE,LOOK,INIT,LOOP)
         SPACE 1
***********************************************************************
**                                                                   **
**  ALL FUNCTIONS RETURN HERE                                        **
**                                                                   **
**    GOODEXIT - SETS RC=0                                           **
**    BADRET4  - SETS RC=4                                           **
**    BADRET8  - SETS RC=8                                           **
**    BADENTRY - SETS RC=12                                          **
**                                                                   **
***********************************************************************
BADENTRY LA    R15,12        SET DISASTER
         B     COMMEXIT      GO TO COMMON EXIT
         SPACE 1
BADRET8  LA    R15,8         SET ERROR
         B     COMMEXIT      GO TO COMMON EXIT
         SPACE 1
BADRET4  LA    R15,4         SET WARNING
         B     COMMEXIT      GO TO COMMON EXIT
         SPACE 1
MISSPARM LA    R15,16        PARM MISSING - NO WORK AREA        GP03261
         B     PGMEXIT       TAKE IMMEDIATE ERROR RETURN        GP03261
         SPACE 1                                                GP03261
GOODEXIT SR    R15,R15       SET GOOD COMPLETION
         SPACE 1
COMMEXIT ST    R15,CSPRCOD   ALSO PASS RETURN CODE IN PARM LIST
PGMEXIT  DS    0H                                               GP03261
         AIF   (&BAKR).DOPR
         LR    R9,R15
         PGMEXIT RC=(R9)
         AGO   .COMPR
.DOPR    ANOP  ,
         PR    ,             RETURN TO CALLER
.COMPR   SPACE 2
***********************************************************************
**                                                                   **
**  CLOSE ENTRY - DELETE ALL LOADED MODULES                          **
**                FREE GOTTEN STORAGE                                **
**                RESET CALLER'S POINTERS                            **
**                                                                   **
***********************************************************************
         PUSH  USING
REQCLOSE ICM   R15,15,CSW@CSI  DID WE LOAD IGGCSI00 ?
         BZ    CLONCSI       NO?
         DELETE EPLOC==CL8'IGGCSI00'  FREE IT
         XC    CSW@CSI,CSW@CSI  RESET IT
CLONCSI  ICM   R1,15,CSW@CPRM+8  STORAGE GOTTEN ?
         BZ    CLONDS
         ICM   R2,15,0(R1)   AND GET LENGTH
         BZ    CLONDS        OOPS?
         STORAGE RELEASE,ADDR=(1),LENGTH=(R2)
         XC    CSW@CPRM+8(4),CSW@CPRM+8  RESET IT
CLONDS   ICM   R0,15,CSWCM@WK  COMPARE WORK AREA?
         BZ    CLONCMP
         L     R15,CSP@SCMP  LOAD SUBCOMP ADDRESS               GP03046
         SUBCALL (R15),('END'),MF=(E,CSWCMPRM) FREE THE WORK AREA
         XC    CSWCM@WK,CSWCM@WK  JUST IN CASE
CLONCMP  L     R2,CSW@CAHD   POINT TO CATALOG NAME CHAIN
         LA    R4,CSCSIZE    LENGTH OF ONE CATALOG ENTRY
CLONLCSC LTR   R3,R2         ANY MORE ?
         BZ    CLONNCSC      DONE
         L     R2,CSCLINK-CSCLINK(,R3)   GET NEXT ELEMENT, IF ANY
         STORAGE RELEASE,ADDR=(R3),LENGTH=R4
         B     CLONLCSC      TRY AGAIN
CLONNCSC XC    CSW@CAHD(L'CSW@CAHD+L'CSW@CATL),CSW@CAHD  ZERO POINTERS
         SR    R2,R2
         SR    R3,R3
         IC    R2,CSP#SP     GET WORK AREA SUBPOOL
         ICM   R3,7,CSP#SPL    AND WORK AREA LENGTH
         STORAGE RELEASE,SP=(R2),LENGTH=(R3),ADDR=(R10)
         SR    R10,R10       RESET
         ST    R10,CSP@WORK  CLEAR IN USER'S PARM
         TM    CSWPFLGS,CSWPFCMP  DID WE LOAD SUBCOMP ?         GP03046
         BZ    GOODEXIT      NO; RETURN TO CALLER               GP03046
         DELETE EPLOC==CL8'SUBCOMP'  FREE IT                    GP03046
         ST    R10,CSP@SCMP  AND CLEAR IT                       GP03046
         B     GOODEXIT      RETURN TO CALLER                   GP03046
         POP   USING
         SPACE 2
***********************************************************************
**                                                                   **
**  LOOK ENTRY - GET A SINGLE NAME FROM THE CATALOG                  **
**               ADDRESS OF THE NAME IS PASSED IN CSP@REQ            **
**                                                                   **
***********************************************************************
         PUSH  USING
REQLOOK  L     R2,CSP@REQ   GET REQUEST POINTER
         N     R2,=X'7FFFFFFF'  KILL HIGH BIT AND SET CC
         BZ    BADRET8       OOPS
         OI    CSWPFLGS,CSWPFLUK  SHOW LOOK INVOKED (FOR LOOP MIDDLE)
         OI    CSWPFLGS,CSWPF1CT  ONE CATALOG ONLY
         MVI   CSW@CCAT,C' '
         MVC   CSW@CCAT+1(CSW@C#EN-1-CSW@CCAT),CSW@CCAT  INITIALIZE
         TM    CSP$FLGS,CSP$FGUC  USER PROVIDED CATALOG NAME ?
         BZ    REQLOOK2      NO                                 GP03058
         MVC   CSW@CCAT,CSPRCAT   YES; USE IT
         OI    CSWPFLGS,CSWPF1CT  ONE CATALOG ONLY              GP03058
REQLOOK2 MVC   CSWCIVMS(L'CSPMVOL),CSPMVOL  VOL-SER MASK        GP03058
         TM    CSP$FLGS,CSP$FG1C  USER REQUESTED ONE CATALOG ?  GP03058
         BZ    *+8           NO                                 GP03058
         OI    CSWPFLGS,CSWPF1CT  PROPAGATE IT                  GP03058
         SR    R3,R3         CLEAR FOR IC
         ST    R3,CSW@CBXL   FORCE CATALOG READ
         ICM   R3,3,CSP#LEN  GET NAME LENGTH
         BP    *+8             OK
         LA    R3,L'CSW@CFLT  ELSE SET MAX LENGTH
         LA    R0,CSW@CFLT   MOVE TO CSI PARM LIST
         LA    R1,L'CSW@CFLT  GET LENGTH
         ICM   R3,8,BLANKS   BLANK FILL
         MVCL  R0,R2         MOVE AND FILL
         MVI   CSW@CO1C,C'Y'  SEARCH MORE THAN ONE CATALOG
         ICM   R1,15,CSW@CAMS  DO WE HAVE A MASTER CATALOG POINTER?
         BZ    REQLOOKN      NO
         OI    CSCFLGS-CSCDSECT(R1),CSCFGUS
REQLOOKN BAS   R14,CALLCSI   GO TO COMMON CALL ROUTINE
         MVC   CSPRCAT,CSWCUCAT  RETURN CATALOG
         LTR   R15,R15       GOOD ?
         BNZ   COMMEXIT      NO; RETURN
         L     R14,CSP@REQ   GET USER'S REQUEST
         CLC   CSPRDSN,0(R14)  MATCHES REQUEST?
         BE    COMMEXIT      YES; GOOD
         CLI   CSPRTYP,C'0'  DID WE GET THE (FIRST) CATALOG NAME ?
         BE    REQLOOKN      YES; GET THE NEXT ENTRY
         B     COMMEXIT      ELSE RETURN WHAT WE HAVE
         POP   USING
         SPACE 2
***********************************************************************
**                                                                   **
**  INIT ENTRY - INTERPRET PASSED PARAMETER AS A MASK                **
**                                                                   **
**    AFTER FIRST RETURN, IF GOOD, USE CATCALL LOOP FOR ADDITIONAL   **
**    DATA                                                           **
**                                                                   **
***********************************************************************
REQINIT  L     R2,CSP@REQ   GET REQUEST POINTER
         N     R2,=X'7FFFFFFF'  KILL HIGH BIT AND SET CC
         BZ    BADRET8       OOPS
         SPACE 1
***********************************************************************
**                                                                   **
**  FOR OTHER THE FIRST CALL, RESET THE CATALOG 'USED' BIT           **
**  IN ALL CATALOG ENTRIES                                           **
**                                                                   **
***********************************************************************
         PUSH  USING
         LA    R1,CSW@CAHD-(CSCLINK-CSCDSECT)  POINT TO HEAD
         USING CSCDSECT,R1
REQINIT0 ICM   R1,15,CSCLINK  GET NEXT CATALOG ENTRY OR OUT
         BZ    REQINITS      LEAVE IF DONE
         XC    CSCFLGS(4),CSCFLGS  CLEAR REST
         B     REQINIT0      REPEAT UNTIL DONE
         POP   USING
REQINITS NI    CSWPFLGS,255-CSWPFLUK-CSWPFBUF-CSWPFONE-CSWPF1CT
         ICM   R1,15,CSW@CAMS  DO WE HAVE A MASTER CATALOG POINTER?
         BZ    REQINITT      NO
         OI    CSCFLGS-CSCDSECT(R1),CSCFGUS
REQINITT MVI   CSW@CCAT,C' '
         MVC   CSW@CCAT+1(CSW@C#EN-1-CSW@CCAT),CSW@CCAT  INITIALIZE
         TM    CSP$FLGS,CSP$FGUC  USER PROVIDED CATALOG NAME ?
         BZ    REQINIT2      NO                                 GP03058
         MVC   CSW@CCAT,CSPRCAT   YES; USE IT
         OI    CSWPFLGS,CSWPF1CT  ONE CATALOG ONLY              GP03058
REQINIT2 MVC   CSWCIVMS(L'CSPMVOL),CSPMVOL  VOL-SER MASK        GP03058
         TM    CSP$FLGS,CSP$FG1C  USER REQUESTED ONE CATALOG ?  GP03058
         BZ    *+8           NO                                 GP03058
         OI    CSWPFLGS,CSWPF1CT  PROPAGATE IT                  GP03058
         SR    R3,R3         CLEAR FOR IC
         ST    R3,CSW@CBXL   DON'T USE CURRENT BUFFER CONTENTS  GP03041
         ICM   R3,3,CSP#LEN  GET NAME LENGTH
         BP    *+8             OK
         LA    R3,L'CSW@CFLT  ELSE SET MAX LENGTH
         LA    R0,CSPMASK    MOVE TO CSI PARM LIST
         LA    R1,L'CSPMASK   GET LENGTH
         ICM   R3,8,BLANKS   BLANK FILL
         MVCL  R0,R2         MOVE AND FILL
         BAS   R9,MAKEMASK
         CLI   CSW@CFLT,C'*'  GLOBAL SEARCH ?
         BNE   REQINITC      NO; ONE CATALOG IS PLENTY
         MVI   CSW@CO1C,C'Y'  SEARCH MORE THAN ONE CATALOG
REQINITC BAS   R14,CALLCSI   GO TO COMMON CALL ROUTINE
         MVC   CSPRCAT,CSWCUCAT  RETURN CATALOG
         LA    R1,CSW@CAHD   POINT TO MY CATALOG CHAIN
         PUSH  USING
         USING CSCDSECT,R1   MAP MY CATALOG CHAIN
REQINITL ICM   R1,15,CSCLINK  ANOTHER ENTRY ?
         BZ    REQINITQ      NO; LET IT BE
         CLC   CSPRCAT,CSCNAME  IS THIS IT ?
         BNE   REQINITL      NO; TRY ANOTHER
         OI    CSCFLGS,CSCFGUS  SHOW CATALOG USED
         POP   USING
REQINITQ LTR   R15,R15       GOOD ?
         BNZ   COMMEXIT      NO; RETURN
         OI    CSWPFLGS,CSWPFBUF  SHOW LOOP DATA AVAILABLE
         CLI   CSPRTYP,C'0'  DID WE GET THE (FIRST) CATALOG NAME ?
         BNE   COMMEXIT
         SPACE 2
***********************************************************************
**                                                                   **
**  LOOP ENTRY - EXTRACT PRIOR CATALOG AND RESTART DSN FROM          **
**    CALLER'S PARM, AND GET THE NEXT DSN, IF ANY                    **
**                                                                   **
***********************************************************************
REQLOOP  TM    CSWPFLGS,CSWPFBUF  BEEN HERE BEFORE ?
         BZ    REQINIT       NO; NEED TO INITIALIZE FIRST
         TM    CSP$FLGS,CSP$FG1C  USER REQUESTED ONE CATALOG ?  GP03058
         BZ    *+8           NO                                 GP03058
         OI    CSWPFLGS,CSWPF1CT  PROPAGATE IT                  GP03058
         TM    CSP$FLGS,CSP$FGMC  MASK CHANGED ?
         BNZ   REQLOOPM
         TM    CSWPFLGS,CSWPFLUK  REQUEST INTERRUPTED ?
         BZ    REQLOOPC      NO; JUST CONTINUE
REQLOOPM NI    CSP$FLGS,255-CSP$FGMC  RESET CHANGE FLAG
         MVC   CSW@CFLT,CSPMASK  SET MASK
         MVC   CSW@CCAT,CSPRCAT  CATALOG NAME
         MVC   CSW@CRES,CSPRDSN  PRIOR DSN
         XC    CSW@CBXL,CSW@CBXL  REQUEST CSI CALL
         MVI   CSW@CORS,C'Y' FAKE THE RESTART FLAG
         MVI   CSW@CO1C,C' '  SEARCH ONLY THIS CATALOG
         MVC   CSWCIVMS(L'CSPMVOL),CSPMVOL  VOL-SER MASK
REQLOOPC BAS   R14,CALLCSI   GO TO COMMON CALL ROUTINE
         MVC   CSPRCAT,CSWCUCAT  RETURN CATALOG
         B     COMMEXIT      ELSE RETURN WHAT WE HAVE
         SPACE 1
MAKEMASK TM    CSPMASK,255-C' '  NULL OPERAND?
         BNZ   MAKEDCLI      NO; USE IT
         MVC   CSPMASK(2),=C'**' SET DEFAULT - EVERYTHING
MAKEDCLI L     R15,CSP@SCMP  LOAD SUBCOMP ADDRESS               GP03046
         SUBCALL (R15),(PATCMMSK,CSWCIMSK,CSPMASK,CSWCM@WK),           *
               MF=(E,CSWCMPRM)                                  GP03093
         MVC   CSW@CFLT,CSWCIMSK
         CH    R15,=H'8'     DID IT WORK ?
         BR    R9            RETURN TO CALLER
         SPACE 2
***********************************************************************
**                                                                   **
**  CALLCSI - SUBROUTINE TO INVOKE IGGCSI00 AND DO MINOR RECOVERY    **
**                                                                   **
***********************************************************************
CALLCSI  SR    R15,R15       PRESET FOR ZERO RETURN CODE
         STM   R0,R15,CSWSAV1   SAVE ALL REGISTERS
         LM    R5,R7,CSW@CBXL  TEST RESTART POINTER
         LTR   R5,R5         ANY RESTART ?
         BNZ   BXLECSI       YES; RESTART IN THIS BUFFER
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*  BUFFCSI:  PRIMARY CATALOG LOOKUP LOOP                              *
*    CALL IGGCSI00, PROCESS RETURN, GO TO NEXT CATALOG AS APPROPRIATE *
*                                                                     *
*---------------------------------------------------------------------*
BUFFCSI  XC    CSW@CBXL,CSW@CBXL   CLEAR POINTER
         L     R15,CSW@CSI   GET CATALOG LOOKUP ADDRESS
         LA    R1,CSW@CPRM   GET PARM
         BASSM R14,R15       CALL IT
         MVC   CSPREAS,CSW@CRTN   ALSO SAVE FOR CALLER          GP03044
         CLC   =X'C1C87804',CSW@CRTN  BAD CATALOG RETURN ?
         BE    CATCURSE      YES; TRY ANOTHER
         CH    R15,=H'4'     CHECK RETURN
         BL    PASSCSI       GOOD; USE DATA
         BH    ERRCSI        TOO BAD
*---------------------------------------------------------------------*
*                                                                     *
*  FOR RETURN CODE 4, WE HAVE TWO POSSIBILITIES:                      *
*    REASON CODE 100 - RETURNED BUFFER CONTAINS A BAD ENTRY           *
*    OTHER - CATALOG ACCESS FAILED; TRY ANOTHER CATALOG               *
*                                                                     *
*---------------------------------------------------------------------*
         CLC   =X'6404',CSW@CRTN+2  CODE 4 / REASON 100 (ONE/MORE BAD?)
         BE    PASSCSI       YES; ACCEPT WITH ERROR/MISSING DATA
         CLC   =X'6C04',CSW@CRTN+2  CODE 4 / REASON 108 (CAT NOT OPEN?)
         BNE   ERRCSI        NO
         TM    CSP$FLGS,CSP$FULL  DOES USER WANT NOTIFICATION ? GP03044
         BNZ   ERRCSI        YES; RETURN ERROR                  GP03044
         B     CATCURSE      NO; SEE WHETHER ANOTHER CATALOG WANTED
         SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
*  CHECK RETURNED BUFFER - FIRST RESPONSE ALWAYS HAS THE CATALOG      *
*    RECORD FOR THE RETURNED DATA                                     *
*                                                                     *
*---------------------------------------------------------------------*
PASSCSI  L     R5,CSW@CPRM+8   GET THE RESULT AREA
         USING CSIRWORK,R5   DECLARE IT
         LH    R2,CSINUMFD   GET NUMBER OF FIELDS
         SLA   R2,1          CONVERT TO LENGTH OF LENGTHS
         ST    R2,CSWFDLEN   SAVE
         L     R7,CSIUSDLN   LENGTH USED
         AR    R7,R5         LAST BYTE + 1
         BCTR  R7,0          LAST BYTE
         LA    R5,CSIRWENT   NOW POINT TO ENTRIES
         DROP  R5
*---------------------------------------------------------------------*
*                                                                     *
*  PROCESS NEXT ENTRY IN THE CURRENT BUFFER                           *
*                                                                     *
*---------------------------------------------------------------------*
         USING CSIRWENT,R5   UPDATE MAPPING
TESTCSI  LA    R6,CSICLENG   PROVISIONALLY SET FOR CATALOG ENTRY
         STM   R5,R7,CSW@CBXL   SAVE FOR PROCESSING
         CLI   CSICTYPE,CSIETYP0  CATALOG ENTRY ?
         BE    CATLCSI       YES; UP BY FIXED LENGTH
         TM    CSIEFLG,CSIENTER  ERROR ?
         BNZ   FXERRCSI      OOPS; TOO BAD
         ICM   R6,3,CSITOTLN  GET TOTAL LENGTH
         LA    R6,CSITOTLN-CSIRWENT(,R6)    SIZE OF THIS ENTRY
         ST    R6,CSW@CBXL+4  UPDATE TRUE LENGTH
         TM    CSIEFLG,CSIEDATA  HAVE DATA ?
         BNZ   DATACSI       YES; GET THEM
         B     BXLECSI       BUMP
         SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
*  SINGLE ENTRY RETURNED WITH ERROR FLAG ON - SHOW INDICATIVE DATA    *
*                                                                     *
*---------------------------------------------------------------------*
FXERRCSI BAS   R14,GETTYPE   DO MINIMAL PROCESSING
         B     BXLECSI       INCREMENT TO NEXT ENTRY
         SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
*  FOUND A CATALOG ENTRY - MATCH AGAINST REQUEST, AND DISPLAY.        *
*                                                                     *
*---------------------------------------------------------------------*
CATLCSI  TM    CSWPFLGS,CSWPFCT1 FIRST CATALOG EVER?
         BNZ   CATLCSI2      NO; TREAT AS DATA
         MVC   CSWCUCAT,CSIENAME PRESERVE CURRENT CATALOG NAME
         OI    CSWPFLGS,CSWPFCT1 FIRST CATALOG SET
         PUSH  USING
         LA    R1,CSW@CAHD   POINT TO CATALOG CHAIN
         USING CSCDSECT,R1
CATLUKLP ICM   R1,15,CSCLINK  GET NEXT CATALOG
         BZ    CATLCSI2      TREAT AS DATA
         CLC   CSWCUCAT,CSCNAME  MATCHING NAME?
         BNE   CATLUKLP      NO
         POP   USING
CATLCSI2 TM    CSP$FLGS,CSP$FULL LOTS OF STUFF ?
         BNZ   DATACSI       YES; TREAT AS DATA
         BAS   R14,GETTYPE   DO MINIMAL PROCESSING
         TM    CSP$FLGS,CSP$FGCP  TEST FOR MASK MATCH ?
         BZ    GOODRET       NO; RETURN IT
         L     R15,CSP@SCMP  LOAD SUBCOMP ADDRESS               GP03046
         SUBCALL (R15),(PATCMDSN,CSPRDSN,CSPMASK),MF=(E,CSWCMPRM)
         BXH   R15,R15,BXLECSI  NO MATCH; TRY SOMETHING ELSE
*---------------------------------------------------------------------*
*                                                                     *
*  RETURN TO CALLER WITH CC IN R15, AND APPROPRIATE DATA IN CSP/CSW   *
*                                                                     *
*---------------------------------------------------------------------*
GOODRET  SR    R15,R15       SET GOOD RETURN
         ST    R15,CSWSAV1+4*R15  FOR RELOAD
         B     CALLCSIX
DODONE   LA    R15,4         SHOW LOGICAL END OF SEARCH
         B     COMCLEAR
ERRCSI   LA    R15,8         SET AN ERROR
COMCLEAR ST    R15,CSWSAV1+4*R15  FOR RELOAD
         XC    CSW@CBXL,CSW@CBXL  CLEAR RESTART JUST IN CASE
CALLCSIX LM    R0,R15,CSWSAV1   RESTORE ALL REGISTERS
         BR    R14           RETURN TO CALLER
         SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
*  BUMP TO NEXT ENTRY IN BUFFER. IF NONE, CHECK FOR MORE DATA, OR     *
*    READ ANOTHER CATALOG.                                            *
*                                                                     *
*---------------------------------------------------------------------*
LOOPCSI  LM    R5,R7,CSW@CBXL   GET POINTERS
BXLECSI  BXLE  R5,R6,TESTCSI    LOOK FOR ANOTHER ENTRY
         CLI   CSW@CORS,C'Y' ARE THERE MORE DATA ?
         BE    BUFFCSI       YES; GET ANOTHER BUFFER
         SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
*  CURRENT CATALOG EXHAUSTED, OR NO MATCHES FOUND                     *
*  LOOK FOR ANOTHER CATALOG, AND REPEAT REQUEST                       *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING
CATCURSE TM    CSWPFLGS,CSWPF1CT  ONE CATALOG ONLY ?
         BNZ   DODONE        YES; END OF REQUEST
         LA    R1,CSW@CAHD-(CSCLINK-CSCDSECT)  POINT TO HEAD
         USING CSCDSECT,R1
CATCURSL ICM   R1,15,CSCLINK   ANY MORE ?
         BZ    DODONE        NO; FINISHED
         TM    CSCFLGS,CSCFGUS  ALREADY USED ?
         BNZ   CATCURSL      YES; LOOK AGAIN
         OI    CSCFLGS,CSCFGUS  SET IT USED
         MVI   CSW@CFLD,C' '   INITIALIZE REQUEST FIELDS
         MVC   CSW@CFLD+1(CSW@C#EN-CSW@CFLD-1),CSW@CFLD  CLEAR ALL
         MVC   CSW@C#EN(PATFIENM*8+2),PATFIELD  PATTERN FIELD NAMES
         MVC   CSW@CCAT,CSCNAME  SET NEW CATALOG
         MVC   CSWCUCAT,CSCNAME  SET NEW CATALOG
         MVC   CSW@CFLT,CSWCIMSK RESET THE SEARCH MASK
         LA    R2,CSW@CCAT
         B     BUFFCSI       PROCESS NEW CATALOG
         POP   USING
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*  EXTRACT DATA FROM RETURN BUFFER                                    *
*   NOTE THAT CSIFD FIELDS MATCH IN ORDER THOSE ON THE IGGCSI00 CALL  *
*                                                                     *
*---------------------------------------------------------------------*
DATACSI  BAS   R14,GETTYPE   GET ENTRY TYPE
*  NOTE REGISTER USE: R2 - R5 (R6, R7 AVAILABLE IF RETURN TO LOOPCSI)
         LA    R4,CSILENF1   R4-LENGTHS R5-DATA
         A     R5,CSWFDLEN   R5-POINT TO FIRST DATA ITEM
         LA    R5,CSILENF1-CSIRWENT-2(,R5)
         DROP  R5
         CSIFD CSWDACLS,FILL=C' '  PARM 1 - DATA CLASS
         CSIFD CSWMGCLS,FILL=C' '  PARM 2 - MANAGEMENT CLASS
         CSIFD CSWSTCLS,FILL=C' '  PARM 3 - STORAGE CLASS
         CSIFD CSPRDTYS,FILL=0     PARM 4 - DEVICE TYPE
         SR    R3,R3
         ICM   R3,3,0(R4)    LOAD VOLUME SIZE
         BNM   *+6
         SR    R3,R3         MISSING FIELD IS NONE
         SR    R2,R2
         D     R2,=F'6'      CONVERT FROM LENGTH TO COUNT
         STC   R3,CSP#VOL    SAVE QUOTIENT
         CSIFD CSPRVOLS,FILL=C' '  PARM 5 - VOLUME SERIAL(S)
         SPACE 1                                                GP03044
*---------------------------------------------------------------------*
*  CHECK RETURNED SERIALS TO ELIMINATE DUPLICATES                     *
*---------------------------------------------------------------------*
DUPCHKER LA    R15,CSPRVOLS  POINT TO RETURN LIST               GP03044
         LA    R0,L'CSPRVOL  LENGTH OF ONE ENTRY                GP03044
         SR    R1,R1                                            GP03044
         IC    R1,CSP#VOL    GET NUMBER OF ENTRIES              GP03044
         CH    R1,=H'2'      ANYTHING TO CHECK ?                GP03044
         BL    DUPCHKNO      NO                                 GP03044
         BCTR  R1,0                                             GP03044
         BCTR  R1,0                                             GP03044
         MH    R1,=Y(L'CSPRVOL)  CONVERT TO LENGTH              GP03044
         AR    R1,R15        LAST ONE TO CHECK                  GP03044
DUPCHKOL LR    R2,R15        COMPARE NEXT TO PRIOR              GP03044
         CLC   0(L'CSPRVOL,R15),BLANKS  END OF LIST ?           GP03044
         BE    DUPCHKNO      DONE                               GP03044
DUPCHKIL CLC   CSPRVOL-CSPRVOL(L'CSPRVOL,R15),L'CSPRVOL(R2) DUPLICATE ?
         BNE   DUPCHKIB      NO; BUMP                           GP03044
         CLC   L'CSPRVOL(L'CSPRVOL,R15),BLANKS  END OF LIST ?   GP03044
         BE    DUPCHKNO      DONE                               GP03044
         AR    R1,R0         UP END ADDRESS BY ONE              GP03044
DUPCHKMV MVC   CSPRVOL-CSPRVOL(L'CSPRVOL,R2),L'CSPRVOL(R2) COVER DUPE
         BXLE  R2,R0,DUPCHKMV   SLIDE OVER                      GP03044
         MVC   L'CSPRVOL(L'CSPRVOL,R2),BLANKS  NEW END OF LIST  GP03044
         IC    R0,CSP#VOL    GET OLD NUMBER OF VOLUMES          GP03044
         BCTR  R0,0          REDUCE BY ONE                      GP03044
         STC   R0,CSP#VOL    UPDATE IT                          GP03044
         B     DUPCHKER      AND TRY AGAIN                      GP03044
DUPCHKIB BXLE  R2,R0,DUPCHKIL  TRY ANOTHER                      GP03044
DUPCHKOB BXLE  R15,R0,DUPCHKOL  TRY MORE                        GP03044
         SPACE 1                                                GP03044
DUPCHKNO CSIFD CSPASTYP,FILL=C' '  PARM 6 - ASSOCIATED TYPES    GP03044
         CSIFD CSPASSOC,FILL=C' '  PARM 7 - ASSOCIATED NAMES
         TR    CSPASSOC,TRNULLS  CHANGE MAST.CAT.ASSOC 00->BLANK
         L     R15,CSW@FORM  GET FORMATTING ROUTINE ADDRESS
         BR    R15           GO TO FORMAT AND DISPLAY ENTRY
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*  WE HAVE A CATALOG NAME.                                            *
*  BECAUSE IGGCSI00 DOESN'T DO IT FOR US, WE NEED TO STACK            *
*    THE NAMES OF THE CATALOGS, AND THEN RECURSE THROUGH THEM         *
*    TO FIND MASKED ENTRIES.                                          *
*  EXCEPTIONS:  DO NOT STACK INVALID NAME (ZEROES) OF MASTER          *
*               DO NOT STACK IF SAME AS CURRENT CATALOG               *
*               DO NOT STACK FOR SINGLE CATALOG REQUEST               *
*                                                                     *
*---------------------------------------------------------------------*
UCATFORM CLC   CSPRDSN,CSW@CCAT  SAME AS CURRENT CATALOG NAME ?
         BE    UCATS         IGNORE IF SAME
         CLC   CSPRDSN,CSWMSCAT  SAME AS MASTER CATALOG ?
         BE    UCATS
         CLI   CSPRDSN,X'00'  SAME AS MASTER CATALOG ?
         BE    UCATS
***********************************************************************
**  IGNORE - EITHER IT'S ON THE CAX CHAIN, OR IT CAN'T BE OPENED     **
***********************************************************************
         B     UCATS ********* AVOID RC=4/RSN C1C86C04 ****************
         LA    R1,CSW@CAHD   ELSE SEE IF ALREADY ON CHAIN
         USING CSCDSECT,R1
UCATLKOL ICM   R1,15,CSCLINK    ANY MORE ?
         BZ    UCATADD
         CLC   CSCNAME,CSPRDSN  QUEUED BEFORE ?
         BNE   UCATLKOL      NO; TRY AGAIN
         B     UCATS         YES; DON'T ADD TO CHAIN
UCATADD  STORAGE OBTAIN,LENGTH=CSCSIZE
         ST    R15,CSCLINK   CLEAR LINK POINTER
         OC    CSW@CAHD,CSW@CAHD
         BNZ   UCATC         CHAIN HEAD SET
         ST    R1,CSW@CAHD
UCATC    ICM   R14,15,CSW@CATL  IS TAIL SET?
         BNZ   UCATD         YES; ADD TO END
         LA    R14,CSW@CATL  SET NEW END
UCATD    ST    R1,0(,R14)    CHAIN TO OLD ENTRY
         ST    R1,CSW@CATL   SET END POINTER
         MVC   CSCNAME,CSPRDSN
         SR    R0,R0
         ST    R0,CSCCAX     NO CAX
         ST    R0,CSCFLGS    AND CLEAR FLAGS
UCATS    DS    0H            CONTINUE WITH FMTDS
         DROP  R1
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*  COMPARE DATA SET NAME TO MASK. SKIP ENTRY UNLESS MATCHED.          *
*  WHEN ENTRY CONTAINS VOLUME SERIALS, EXTRACT AND COMPARE TO REQUEST *
*  SKIP UNLESS MATCHED.                                               *
*  ALSO SKIP ENTRIES WITH NO SERIALS WHEN VOLMASK IS REQUESTED        *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
FMTAIX   DS    0H            PROVISIONAL FORMATTING
FMTALIAS DS    0H            PROVISIONAL FORMATTING
FMTCAT   DS    0H            PROVISIONAL FORMATTING
FMTCLUST DS    0H            PROVISIONAL FORMATTING
FMTGDG   DS    0H            PROVISIONAL FORMATTING
FMTINX   DS    0H            PROVISIONAL FORMATTING
FMTLIB   DS    0H            PROVISIONAL FORMATTING
FMTPATH  DS    0H            PROVISIONAL FORMATTING
FMTTAP   DS    0H            PROVISIONAL FORMATTING
FMTDS    TM    CSP$FLGS,CSP$FGCP  TEST FOR MASK MATCH ?
         BZ    DSMATCHD      NO; EXTRACT FIELD DATA
         L     R15,CSP@SCMP  LOAD SUBCOMP ADDRESS               GP03046
         SUBCALL (R15),(PATCMDSN,CSPRDSN,CSPMASK),MF=(E,CSWCMPRM)
         BXLE  R15,R15,DSMATCHD  WE HAVE A WINNER
         LA    R2,CSPASSOC   POINT TO ASSOCIATED NAMES
         LA    R3,L'CSPASSOC/L'CSPASSO1  NUMBER OF ITEMS
FMTDSALP CLI   0(R2),C' '    ENTRY PRESENT ?
         BNH   FMTDSBMP      NO; TRY ANOTHER
         L     R15,CSP@SCMP  LOAD SUBCOMP ADDRESS               GP03046
         SUBCALL (R15),(PATCMDSN,(R2),CSPMASK),MF=(E,CSWCMPRM)  GP03046
         BXLE  R15,R15,DSMATCHD  WE HAVE A WINNER
FMTDSBMP LA    R2,L'CSPASSO1(,R2)  TRY NEXT
         BCT   R3,FMTDSALP   UNTIL DONE
         B     LOOPCSI       NO MATCH - TRY ANOTHER
         SPACE 1
DSMATCHD CLI   CSWCIVMS,C' ' ANY VOLUME REQUEST?
         BNH   ACCEPTVL      NO; USE IT
         LA    R4,CSPRVOLS   POINT TO FIRST SERIAL              GP03115
         SR    R5,R5
         ICM   R5,1,CSP#VOL
         BNP   LOOPCSI       IGNORE ENTRY IF NONE
VOLCOMP  MVC   CSWCIVTS,0(R4) MOVE TO CL8 FIELD FOR COMPARE
         L     R15,CSP@SCMP  LOAD SUBCOMP ADDRESS               GP03046
         SUBCALL (R15),(PATCMVOL,CSWCIVTS,CSWCIVMS),MF=(E,CSWCMPRM)
         BXLE  R15,R15,ACCEPTVL  MATCH
         LA    R4,6(,R4)
         BCT   R5,VOLCOMP
         B     LOOPCSI       NO MATCH
ACCEPTVL OI    CSWPFLGS,CSWPFONE SHOW AT LEAST ONE MATCH FOUND
         B     CALLCSIX      SUBROUTINE EXIT
         EJECT ,
*---------------------------------------------------------------------*
*                                                                     *
*  GETVAL - SEQUENTIAL EXTRACTION OF CSI DATA FIELDS                  *
*           INVOKED MY CSIFD MACRO                                    *
*                                                                     *
*  R4  - POINTER TO HALFWORD FIELD LENGTH(S)                          *
*  R5  - POINTER TO DATA                                              *
*  R2  - POINTER TO OUTPUT FIELD                                      *
*  R3  - MAX OUTPUT LENGTH                                            *
*  CSWDB(1) - FILL CHARACTER FOR MVC; DEFAULT X'00'                   *
*---------------------------------------------------------------------*
*  NOTE THAT UPDATED R4 AND R5 VALUES ARE RETURNED TO CALLER          *
*---------------------------------------------------------------------*
GETVAL   STM   R6,R3,CSWSAV2 SAVE MOST REGISTERS
         SR    R15,R15
         ICM   R15,3,CSILENF1-CSILENF1(R4)  GET LENGTH
         LA    R4,2(,R4)     ADVANCE FIELD LENGTH POINTER
         BNP   GETVALEX      NO DATA AVAILABLE
         LR    R14,R5        SAVE FIELD START
         AR    R5,R15        NEXT PARAMETER'S DATA
         CH    R15,=H'2'     VALID ENTRY ?
         BNH   GETVALEX      NO; SKIP IT TOO
         CLI   0(R14),X'FF'  NON-EXISTING FIXED LENGTH DATA ?
         BNE   GETVALEF      NO
         LR    R6,R14        START
         LR    R7,R15        LENGTH
         L     R9,=X'FF000000'  COMPARE TO X'FF'
         CLCL  R6,R8         REALLY MISSING ?
         BNE   GETVALEF      NO
         SR    R15,R15       NO DATA AVAILABLE
GETVALEF ICM   R15,8,CSWDB   GET FILL CHARACTER
         MVCL  R2,R14        ELSE COPY IT TO USER
GETVALEX LM    R6,R3,CSWSAV2   RETURN NEW R4 & R5
         BR    R14           RETURN TO CALLER
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*  GETTYPE - GET INFORMATION BY ENTRY TYPE FROM CETY TABLE            *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING
         AIF   (&BAKR).SUBBAKR
GETTYPE  STM   R0,R15,SUBSAVE1
         AGO   .SUBACOM
.SUBBAKR ANOP  ,
GETTYPE  BAKR  R14,0         SAVE REGISTERS
.SUBACOM ST    R5,CSP@RAW    RETURN RAW ADDRESS TO USER
         MVC   CSP#RAW,CSW@CBXL+4  AND LENGTH
         LA    R0,CSPRDSN    ADDRESS TO BLANK
         LA    R1,CSPSIZE-(CSPRDSN-CSPDSECT)   LENGTH TO BLANK
         L     R15,=X'40000000'  BLANK FILL
         MVCL  R0,R14        CLEAR STORAGE TO BLANKS
         XC    CSP#VOL(L'CSP#VOL+CSPRVOL-CSP#VOL),CSP#VOL
         USING CSIRWENT,R5   UPDATE MAPPING
         MVC   CSPRDSN,CSIENAME  PROPAGATE NAME
         IC    R0,CSIETYPE   GET ENTRY TYPE
         LM    R1,R3,=A(PROLOGIC,PROLOG2-PROLOGIC,PROLOGND)
         SR    R3,R2         LAST ENTRY IS DEFAULT
GETTYPEL CLM   R0,1,CETOETYP(R1)    MATCH ?
         BE    GETTYPEM      YES
         BXLE  R1,R2,GETTYPEL  CONTINUE
* NO MATCH - R1 IS SET FOR DEFAULT, ERROR ENTRY
GETTYPEM MVC   CSPRTYP(L'CSPRTYP+L'CSPRTYN),CETOETYP(R1) COPY NAME
         MVC   CSWDB(2),=X'41F0' 'LA R15,XXX'
         MVC   CSWDB+2(2),CETOFORM(R1) GET FORMATTING ROUTINE
         EX    0,CSWDB       LOAD ADDRESS
         ST    R15,CSW@FORM  SAVE IT
         MVC   CSWDB+2(2),CETOFILD(R1) GET FORMATTING ROUTINE
         EX    0,CSWDB       LOAD ADDRESS
         ST    R15,CSW@FLD   SAVE IT
         AIF   (&BAKR).SUBPR
GETTYPEX LM    R1,R14,SUBSAVE1+4
         BR    R14
         AGO   .SUBPCOM
.SUBPR   ANOP  ,
GETTYPEX PR    ,             RESTORE AND RETURN
.SUBPCOM POP   USING
         SPACE 2
         LTORG ,
         SPACE 1
BLANKS   DC    CL44' '       LONG ENOUGH FOR DS NAME
HEXTAB   DC    C'0123456789ABCDEF'     1/2
HEXTRTAB EQU   HEXTAB-C'0'             2/2
PATCMMSK DC    C'MSK'        EXAMINE MASK
PATCMDSN DC    C'DSN'        COMPARE DSN TO MASK
PATCMVOL DC    C'VOL'        COMPARE VOLSER MASK
         SPACE 2
PROLOGIC CETY  A,'NONVSAM',FMTDS
PROLOG2  CETY  B,'GDG    ',FMTGDG
         CETY  C,'CLUSTER',FMTCLUST
         CETY  D,'DATA   ',FMTDS
         CETY  G,'ALTINDX',FMTAIX
         CETY  H,'GDS    ',FMTDS
         CETY  I,'INDEX  ',FMTINX
         CETY  L,'TAPELIB',FMTLIB
         CETY  M,'TAPEVOL',FMTTAP
         CETY  R,'PATH   ',FMTPATH
         CETY  U,'UCATLNK',UCATFORM
         CETY  X,'ALIAS  ',FMTALIAS
         CETY  0,'CATALOG',FMTCAT
PROLOGND CETY  0,'UNKNOWN',FMTDS
         SPACE 1
MSKTAB   DC    256AL1(0)     TABLE OF MASK & END CHARACTER IN DSN
         ORG   MSKTAB+C'.'   INDEX POINT
         DC    C'.'
         ORG   MSKTAB+C'?'   CHARACTER MATCH
         DC    C'?'
         ORG   MSKTAB+C'%'   CHARACTER MATCH
         DC    C'%'
         ORG   MSKTAB+C'*'   LEVEL OR NAME MATCH
         DC    C'*'
         ORG   ,
         SPACE 1
         LTORG ,
         SPACE 1
PATFIELD DC    Y(PATFIENM)   NUMBER OF FIELD NAMES
PATFIEL1 DC    CL8'DATACLAS'
         DC    CL8'STORCLAS'
         DC    CL8'MGMTCLAS'
         DC    CL8'DEVTYP  '
         DC    CL8'VOLSER  '
         DC    CL8'TYPE    ' TYPE(S) OF ASSOCIATED ENTRIES
         DC    CL8'NAME    ' NAME(S) OF ASSOCIATED ENTRIES
PATFIENM EQU   (*-PATFIEL1)/8
         SPACE 1
TRNULLS  DC    256AL1(*-TRNULLS)  NO TRANSLATE EXCEPT:          GP03044
         TRENT TRNULLS,C' ',0  HEX ZERO TO BLANK (MAST.CAT.ASSOC)
         ORG   ,                                                GP03044
         SPACE 1                                                GP03044
         PRINT GEN           I GOTTA SEE THIS
         CATSPARM ,          MAP CALLERS PARAMETER AREA
         SPACE 1
         CATSWORK ,          MAP OUR WORK AREA
         SPACE 1
         CATSCAT  ,          MAP OUR CHAIN OF PROCESSED CATALOGS
         SPACE 1
         PRINT GEN
         CSIRWORK ,          MAPPING OF CSI RETURN WORK AREA
         SPACE 1
*        NO USABLE IBM AMCBS MACRO
*
AMCBS    DSECT ,
CBSID    DS    CL2           ID
CBSSIZ   DS    AL2           LENGTH
CBSMCSTA DS    A             CCHH OF MASTER CATLG
CBSACB   DS    A             MASTER CAT ACB
CBSCBP   DS    A             C B MANIP
CBSCMP   DS    0A            CAT RTNE
CBSMCUCB DS    A             MASTER CAT UCB
CBSCAXCN DS    A             CAXWA CHAIN
CBSCRACA DS    A             CRA CAXWA CHAIN
CBSCRTCB DS    A             CRA TASK TCB
CBSVSRT  DS    A
CBSVUSE  DS    A             VSRT USE COUNT
CBSVPTR  DS    A             VSRT
CBSFLAGS DS    X             FLAGS
CBSMICF  EQU   X'80'           MAST IS ICF CATALOG
         DS    XL3           SPARE
CBSVVDSA DS    A             VVDS MANAGER
CBSDEVNT DS    A             DEVICE NAME TABLE
CBSVSICN DS    A             IDAVSI CHAIN
CBSFLG1  DS    X             AMCBS FLAGS
CBSCUVSI EQU   X'80'           VSI CHAIN CLEAN-UP REQUIRED
         DS    XL3           SPARE
         SPACE 2
         PRINT GEN                                               90359
         IGGCAXWA ,          EXPAND LOCAL CAX MAPPING            90359
         AGO   .COMCAT                                          GP09157
.USEVSAM TITLE 'S U B C A T  ***  VSAM CATALOG RETRIEVAL SUBROUTINE'
         SPACE 1             NO ICF CATALOG SERVICES USED       GP09157
         LA    R1,0(,R1)     CLEAN HIGH BIT                     GP03261
         LTR   R8,R1         GET CALLER'S PARM POINTER          GP03261
         BZ    MISSPARM                                         GP03261
         USING CSPDSECT,R8   DECLARE IT
         ICM   R10,15,CSP@WORK  ANYTHING IN WORK ANCHOR ?
         BNZ   REQCHECK      YES; ASSUME INITIALIZED
         SPACE 1
***********************************************************************
**                                                                   **
**  INITIALIZE:  OBTAIN WORK AREA AND SAVE ADDRESS IN USER'S PARM    **
**    USER MUST MAINTAIN IT FOR LATER MODULE AND STORAGE CLEANUP.    **
**    INITIALIZE THE AREA.                                           **
**                                                                   **
***********************************************************************
REQFIRST ICM   R0,1,CSP$REQ    GET REQUEST TYPE                 GP05277
         BZ    GOODEXIT      CLOSE; NO PRIOR OPEN               GP05277
         SR    R2,R2
         IC    R2,CSP#SP     LOAD SUBPOOL (GENERALLY = 0)
         LA    R3,MVSWKLEN   SET STORAGE SIZE                   GP09182
         STORAGE OBTAIN,SP=(R2),LENGTH=(R3),LOC=BELOW  GET IT OR ABEND
         STCM  R3,7,CSP#SPL  SAVE SIZE OBTAINED
         ST    R1,CSP@WORK   AND SAVE ADDRESS
         SR    R15,R15       JUST IN CASE
         LR    R2,R1         COPY ADDRESS
         MVCL  R2,R14        CLEAR IT TO ZEROES
         LR    R10,R1        MAKE IT OFFICIAL
         USING CSWDSECT,R10  DECLARE IT
         ICM   R0,15,CSP@SCMP  DID CALLER LOAD SUBCOMP ?        GP03046
         BNZ   REQFIRCM      YES; USE IT                        GP03046
         LOAD  EPLOC==CL8'SUBCOMP'  LOAD COMPARE ROUTINE        GP03046
         ST    R0,CSP@SCMP   REMEMBER THE ADDRESS               GP03046
         OI    CSWPFLGS,CSWPFCMP  REMEMBER WE LOADED SUBCOMP    GP03046
REQFIRCM L     R3,=A(32*1024)  SET SIZE
         LR    R4,R3         SAVE OVER MVCL
         BCTR  R4,0          SET MAX SUPPORTED
         STORAGE OBTAIN,LENGTH=(R3)         GET SOME STORAGE
         LR    R2,R1
         SR    R15,R15       CLEAR LENGTH AND FILL BYTE
         MVCL  R2,R14        CLEAR IT
         STH   R4,0(,R1)     INITIALIZE WORK AREA LENGTH
         XC    CSW@CRES,CSW@CRES   REUSE FOR CTGPL
         MVI   CTGOPTN1,CTGNAME+CTGGENLD    GENERIC ENTRY
         MVI   CTGOPTN2,CTGRCATN            RETURN CATALOG NAME
         MVI   CTGOPTN3,CTGSUPLT+CTGAM0     SUPERLOCATE
         MVI   CTGOPTN4,0
         LA    R15,CSWCIMSK  GET MASK ADDRESS
         ST    R15,CTGENT    INTO REQUEST LIST
         ST    R1,CTGWKA     STASH WORK AREA ADDRESS
         LA    R0,CSWCM@WK   GET POINTER TO SUBCOMP ROOT
         ST    R0,CSWCMPRM+12  INITIALIZE IT
         SPACE 1
***********************************************************************
**                                                                   **
**  CALLER PASSES A REQUEST NUMBER (IN R0) AND A DATA AREA           **
**    VALID REQUESTS ARE:                                            **
**                                                                   **
**    0 - TERMINATE CATALOG PROCESSING                               **
**    1 - GET A SINGLE ENTRY                                         **
**    2 - START PROCESSING A GENERIC REQUEST                         **
**    3 - CONTINUE WITH NEXT GENERIC                                 **
**                                                                   **
***********************************************************************
REQCHECK SR    R2,R2
         IC    R0,CSP$REQ    GET REQUEST TYPE
         BIX   ERR=BADENTRY,PFX=REQ,   BRANCH BY REQUEST TYPE          *
               LOC=(CLOSE,LOOK,INIT,LOOP)
         SPACE 1
***********************************************************************
**                                                                   **
**  ALL FUNCTIONS RETURN HERE                                        **
**                                                                   **
**    GOODEXIT - SETS RC=0                                           **
**    BADRET4  - SETS RC=4                                           **
**    BADRET8  - SETS RC=8                                           **
**    BADENTRY - SETS RC=12                                          **
**                                                                   **
***********************************************************************
BADENTRY LA    R15,12        SET DISASTER
         B     COMMEXIT      GO TO COMMON EXIT
         SPACE 1
BADRET8  LA    R15,8         SET ERROR
         B     COMMEXIT      GO TO COMMON EXIT
         SPACE 1
BADRET4  LA    R15,4         SET WARNING
         B     COMMEXIT      GO TO COMMON EXIT
         SPACE 1
MISSPARM LA    R15,16        PARM MISSING - NO WORK AREA        GP03261
         B     PGMEXIT       TAKE IMMEDIATE ERROR RETURN        GP03261
         SPACE 1                                                GP03261
GOODEXIT SR    R15,R15       SET GOOD COMPLETION
         SPACE 1
COMMEXIT ST    R15,CSPRCOD   ALSO PASS RETURN CODE IN PARM LIST
PGMEXIT  DS    0H                                               GP03261
         LR    R9,R15
         PGMEXIT RC=(R9)
         SPACE 2
***********************************************************************
**                                                                   **
**  CLOSE ENTRY - DELETE ALL LOADED MODULES                          **
**                FREE GOTTEN STORAGE                                **
**                RESET CALLER'S POINTERS                            **
**                                                                   **
***********************************************************************
         PUSH  USING
REQCLOSE ICM   R1,15,CTGWKA  STORAGE GOTTEN ?
         BZ    CLONDS
         SR    R2,R2
         ICM   R2,3,0(R1)    AND GET LENGTH
         BZ    CLONDS        OOPS?
         STORAGE RELEASE,ADDR=(1),LENGTH=(R2)
         XC    CTGWKA,CTGWKA  RESET
CLONDS   ICM   R0,15,CSWCM@WK  COMPARE WORK AREA?
         BZ    CLONCMP
         L     R15,CSP@SCMP  LOAD SUBCOMP ADDRESS               GP03046
         SUBCALL (R15),('END'),MF=(E,CSWCMPRM) FREE THE WORK AREA
         XC    CSWCM@WK,CSWCM@WK  JUST IN CASE
CLONCMP  SR    R2,R2
         SR    R3,R3
         IC    R2,CSP#SP     GET WORK AREA SUBPOOL
         ICM   R3,7,CSP#SPL    AND WORK AREA LENGTH
         STORAGE RELEASE,SP=(R2),LENGTH=(R3),ADDR=(R10)
         SR    R10,R10       RESET
         ST    R10,CSP@WORK  CLEAR IN USER'S PARM
         TM    CSWPFLGS,CSWPFCMP  DID WE LOAD SUBCOMP ?         GP03046
         BZ    GOODEXIT      NO; RETURN TO CALLER               GP03046
         DELETE EPLOC==CL8'SUBCOMP'  FREE IT                    GP03046
         ST    R10,CSP@SCMP  AND CLEAR IT                       GP03046
         B     GOODEXIT      RETURN TO CALLER                   GP03046
         POP   USING
         SPACE 2
***********************************************************************
**                                                                   **
**  LOOK ENTRY - GET A SINGLE NAME FROM THE CATALOG                  **
**               ADDRESS OF THE NAME IS PASSED IN CSP@REQ            **
**                                                                   **
***********************************************************************
         PUSH  USING
REQLOOK  L     R2,CSP@REQ   GET REQUEST POINTER
         N     R2,=X'00FFFFFF'  KILL HIGH BYTE AND SET CC       GP09157
         BZ    BADRET8       OOPS
         OI    CSWPFLGS,CSWPFLUK  SHOW LOOK INVOKED (FOR LOOP MIDDLE)
         MVI   CSW@CCAT,C' '
         MVC   CSW@CCAT+1(L'CSW@CCAT-1),CSW@CCAT  INITIALIZE
         TM    CSP$FLGS,CSP$FGUC  USER PROVIDED CATALOG NAME ?
         BZ    REQLOOK2      NO                                 GP03058
         MVC   CSW@CCAT,CSPRCAT   YES; USE IT
REQLOOK2 MVC   CSWCIVMS(L'CSPMVOL),CSPMVOL  VOL-SER MASK        GP03058
         SR    R3,R3         CLEAR FOR IC
         ST    R3,CSW@CBXL   FORCE CATALOG READ
         ICM   R3,3,CSP#LEN  GET NAME LENGTH
         BP    *+8             OK
         LA    R3,L'CSW@CFLT  ELSE SET MAX LENGTH
         LA    R0,CSW@CFLT   DESTINATIION
         LA    R1,L'CSW@CFLT  GET LENGTH
         ICM   R3,8,BLANKS   BLANK FILL
         MVCL  R0,R2         MOVE AND FILL
         MVC   CSWCIMSK,CSW@CFLT   DOUBLES AS MASK
         MVI   CTGOPTN1,CTGNAME  NON-GENERIC ENTRY
REQLOOKN BAS   R14,CALLCSI   GO TO COMMON CALL ROUTINE
         MVC   CSPRCAT,CSWCUCAT  RETURN CATALOG
         LTR   R15,R15       GOOD ?
         BNZ   COMMEXIT      NO; RETURN
         L     R14,CSP@REQ   GET USER'S REQUEST
         CLC   CSPRDSN,0(R14)  MATCHES REQUEST?
         BE    COMMEXIT      YES; GOOD
         CLI   CSPRTYP,C'0'  DID WE GET THE (FIRST) CATALOG NAME ?
         BE    REQLOOKN      YES; GET THE NEXT ENTRY
         B     COMMEXIT      ELSE RETURN WHAT WE HAVE
         POP   USING
         SPACE 2
***********************************************************************
**                                                                   **
**  INIT ENTRY - INTERPRET PASSED PARAMETER AS A MASK                **
**                                                                   **
**    AFTER FIRST RETURN, IF GOOD, USE CATCALL LOOP FOR ADDITIONAL   **
**    DATA                                                           **
**                                                                   **
***********************************************************************
REQINIT  L     R2,CSP@REQ   GET REQUEST POINTER
         N     R2,=X'00FFFFFF'  KILL HIGH BYTE AND SET CC       GP09157
         BZ    BADRET8       OOPS
         NI    CSWPFLGS,255-CSWPFLUK-CSWPFBUF-CSWPFONE-CSWPF1CT
         MVI   CTGOPTN1,CTGNAME+CTGGENLD    GENERIC ENTRY
         MVI   CSW@CCAT,C' '
         MVC   CSW@CCAT+1(L'CSW@CCAT-1),CSW@CCAT  INITIALIZE
         MVC   CSWCIVMS(L'CSPMVOL),CSPMVOL  VOL-SER MASK        GP03058
         TM    CSP$FLGS,CSP$FG1C  USER REQUESTED ONE CATALOG ?  GP03058
         BZ    *+8           NO                                 GP03058
         OI    CSWPFLGS,CSWPF1CT  PROPAGATE IT                  GP03058
         SR    R3,R3         CLEAR FOR IC
         ST    R3,CSW@CBXL   DON'T USE CURRENT BUFFER CONTENTS  GP03041
         ICM   R3,3,CSP#LEN  GET NAME LENGTH
         BP    *+8             OK
         LA    R3,L'CSPRDSN  ELSE SET MAX LENGTH
         LA    R0,CSPRDSN    MOVE TO TEMP AREA
         LA    R1,L'CSPRDSN  GET LENGTH
         ICM   R3,8,BLANKS   BLANK FILL
         MVCL  R0,R2         MOVE AND FILL
         BAS   R9,MAKEMASK
         CLI   CSWCIMSK+1,C'*'  GLOBAL SEARCH ?                 GP09157
         BE    BADRET8       NOT SUPPORTED PRIOR TO ICF         GP09157
REQINITC BAS   R14,CALLCSI   GO TO COMMON CALL ROUTINE
         MVC   CSPRCAT,CSWCUCAT  RETURN CATALOG
         LTR   R15,R15       GOOD ?
         BNZ   COMMEXIT      NO; RETURN
         OI    CSWPFLGS,CSWPFBUF  SHOW LOOP DATA AVAILABLE
         CLI   CSPRTYP,C'0'  DID WE GET THE (FIRST) CATALOG NAME ?
         BNE   COMMEXIT
         SPACE 2
***********************************************************************
**                                                                   **
**  LOOP ENTRY - EXTRACT PRIOR CATALOG AND RESTART DSN FROM          **
**    CALLER'S PARM, AND GET THE NEXT DSN, IF ANY                    **
**                                                                   **
***********************************************************************
REQLOOP  TM    CSWPFLGS,CSWPFBUF  BEEN HERE BEFORE ?
         BZ    REQINIT       NO; NEED TO INITIALIZE FIRST
         TM    CSP$FLGS,CSP$FGMC  MASK CHANGED ?
         BNZ   REQLOOPM
         MVI   CTGOPTN1,CTGNAME+CTGGENLD    GENERIC ENTRY
         TM    CSWPFLGS,CSWPFLUK  REQUEST INTERRUPTED ?
         BZ    REQLOOPC      NO; JUST CONTINUE
REQLOOPM NI    CSP$FLGS,255-CSP$FGMC  RESET CHANGE FLAG
         XC    CSW@CBXL,CSW@CBXL  REQUEST CAT CALL
         MVC   CSWCIVMS(L'CSPMVOL),CSPMVOL  VOL-SER MASK
REQLOOPC BAS   R14,CALLCSI   GO TO COMMON CALL ROUTINE
         MVC   CSPRCAT,CSWCUCAT  RETURN CATALOG
         B     COMMEXIT      ELSE RETURN WHAT WE HAVE
         SPACE 1
MAKEMASK TM    CSPMASK,255-C' '  NULL OPERAND?                  GP09157
         BNZ   MAKEDCLI      NO; USE IT                         GP09157
         MVC   CSPMASK(2),=C'**'  SET DEFAULT - EVERYTHING      GP09157
MAKEDCLI L     R15,CSP@SCMP  LOAD SUBCOMP ADDRESS               GP09157
         SUBCALL (R15),(PATCMMSK,CSW@CFLT,CSPRDSN,CSWCM@WK),           *
               MF=(E,CSWCMPRM)                                  GP09157
         MVC   CSWCIMSK+1(43),CSW@CFLT                          GP09157
         LOCBYTE CSWCIMSK+1,LEN=L'CSWCIMSK-1,W2=R2,WK=R1        GP09157
         SR    R2,R1         LENGTH                             GP09157
         CH    R2,=H'4'      AT LEAST A.** ?                    GP09157
         BL    MAKEMSTC      NO                                 GP09157
         LA    R1,CSWCIMSK-1(R2)  POINT AT LAST TWO             GP09157
         CLC   =C'**',0(R1)  ICF WILD CARD?                     GP09157
         BNE   MAKEMSTC                                         GP09157
         SH    R2,=H'2'      NO WILD CARDS FOR SUPERLOCATE      GP09157
MAKEMSTC STC   R2,CSWCIMSK   STASH LENGTH                       GP09157
         CH    R15,=H'8'     DID IT WORK ?
         BR    R9            RETURN TO CALLER
         SPACE 2
***********************************************************************
**                                                                   **
**  CALLCSI - SUBROUTINE TO INVOKE IGGCSI00 AND DO MINOR RECOVERY    **
**                                                                   **
***********************************************************************
CALLCSI  SR    R15,R15       PRESET FOR ZERO RETURN CODE
         STM   R0,R15,CSWSAV1   SAVE ALL REGISTERS
         LM    R5,R7,CSW@CBXL  TEST RESTART POINTER
         LM    R1,R2,GDSCURR      DOING GDG ENTRES ?            GP09182
         LTR   R2,R2         GDS?                               GP09182
         BP    LOOPGDS       RESTART GDS SCAN                   GP09182
         LTR   R5,R5         ANY RESTART ?
         BNZ   BXLECSI       YES; RESTART IN THIS BUFFER
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*  BUFFCSI:  PRIMARY CATALOG LOOKUP LOOP                              *
*    CALL SVC 26 WITH SUPER LOCATE                                    *
*                                                                     *
*---------------------------------------------------------------------*
BUFFCSI  XC    CSW@CBXL,CSW@CBXL   CLEAR POINTER
         XC    GDSCURR(8),GDSCURR  JUST IN CASE                 GP09182
         LOCATE CTGPL        CATALOG LOOKUP                     GP09157
         MVC   CSPREAS,CSW@CRTN   ALSO SAVE FOR CALLER          GP03044
         CH    R15,=H'4'     CHECK RETURN
         BL    PASSCSI       GOOD; USE DATA
         BH    ERRCSI        TOO BAD
         B     BADRET4
         SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
*  CHECK RETURNED BUFFER - FIRST RESPONSE ALWAYS HAS THE CATALOG      *
*    RECORD FOR THE RETURNED DATA                                     *
*                                                                     *
*---------------------------------------------------------------------*
PASSCSI  L     R5,CTGWKA     GET THE RESULT AREA
         XC    CSWFDLEN,CSWFDLEN  INDICATE NO DATA              GP09157
         LH    R7,2(,R5)     LOAD USED LENGTH                   GP09157
         AR    R7,R5         LAST BYTE + 1                      GP09157
         BCTR  R7,0          LAST BYTE                          GP09157
         LA    R5,4(,R5)     NOW POINT TO ENTRIES               GP09157
*---------------------------------------------------------------------*
*                                                                     *
*  PROCESS NEXT ENTRY IN THE CURRENT BUFFER                           *
*                                                                     *
*---------------------------------------------------------------------*
         USING CSIRWENT,R5   UPDATE MAPPING
TESTCSI  LA    R6,CSICLENG   PROVISIONALLY SET FOR CATALOG ENTRY
         STM   R5,R7,CSW@CBXL   SAVE FOR PROCESSING
         CLI   CSICTYPE,CSIETYP0  CATALOG ENTRY ?
         BE    CATLCSI       YES; UP BY FIXED LENGTH
         CLI   CSICTYPE,CSIETYPB  GDG BASE RECORD?              GP09182
         BNE   FXERRCSI      NO; SEE WHAT IT IS                 GP09182
         SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
*  GDG BASE - FIND AND LOOP THROUGH DATA SETS                         *
*                                                                     *
*---------------------------------------------------------------------*
GETGDG   MVC   DSNAME,CSIENAME         MOVE GDG BASE NAME       GP09182
         LA    R2,SHOWSPAC             RETURN AREA              GP09182
         MVC   0(4,R2),=AL2(256*8+12,0)   RESET WORK COUNTER    GP09182
         SHOWCAT NAME=DSNAME,AREA=(R2),MF=(B,SHOWCATL)          GP09182
         SHOWCAT NAME=DSNAME,AREA=(R2),MF=(E,SHOWCATL)          GP09182
         N     R15,=X'FFFFFFDF' ^X'20' UNEXPECTED RETURN CODE?  GP09182
         BNZ   QUITGDG                 YES; JUST SHOW BASE      GP09182
         LH    R2,SHOWSPAC+2           GET LENGTH USED          GP09182
         SH    R2,=H'12'               LESS FIXED OVERHEAD      GP09182
         BNP   QUITGDG                 NO DATA RETURNED         GP09182
         LA    R1,SHOWSPAC+12-8        PRESET ONE HIGHER        GP09182
         AH    R2,=H'8'                DITTO                    GP09182
         SRL   R2,3                    DIVIDE TO GET NUMBER     GP09182
         STM   R1,R2,GDSCURR           SET FOR NEXT INCREMENT   GP09182
         LA    R15,44-9                MAX BASE LENGTH          GP09182
         LA    R14,DSNAME+44-9         BASE NAME                GP09182
GDSGTLEN CLI   0(R14),C' '             TRAILING NON-BLANK YET?  GP09182
         BNE   GDSSTLEN                YES; STASH LENGTH        GP09182
         BCTR  R14,0                                            GP09182
         BCT   R15,GDSGTLEN            TRY AGAIN                GP09182
GDSSTLEN LA    R15,1(,R15)             TRUE BASE LENGTH         GP09182
         ST    R15,GDSBLEN             SAVE BASE LENGTH         GP09182
         SPACE 1
LOOPGDS  LM    R1,R2,GDSCURR           GET PRIOR GENERATION     GP09182
         LA    R1,8(,R1)               SKIP TO NEXT             GP09182
         SH    R2,=H'1'                ACCOUNT FOR IT           GP09182
         BNP   QUITGDG                 DONE HERE                GP09182
         STM   R1,R2,GDSCURR           SET NEXT GENERATION      GP09182
         CLI   0(R1),C'A'              NON-VSAM ENTRY ?         GP09182
         BNE   LOOPGDS                 NO; SKIP                 GP09182
         MVI   CSPRTYP,C'A'            PROPAGATE BACK           GP09182
         MVC   OBTNAME,DSNAME          GET BASE NAME            GP09182
         L     R15,GDSBLEN             GET BASE LENGTH          GP09182
         LA    R15,OBTNAME(R15)        POINT TO INSERTION       GP09182
         MVC   0(9,R15),=C'.GnnnnV00'  MOVE PATTERN             GP09182
         MVC   2(4,R15),4(R1)          COMPLETE NAME            GP09182
         MVC   CSPRDSN,OBTNAME         COMPLETE NAME            GP09182
         B     FMTDS                   GO TO PROCESS IT         GP09182
         SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
*  SINGLE ENTRY RETURNED                                              *
*                                                                     *
*---------------------------------------------------------------------*
FXERRCSI BAS   R14,GETTYPE   DO MINIMAL PROCESSING
         L     R15,CSW@FORM
         BASR  R14,R15       GET SERIALS
         B     GOODEXIT      TAKE GOOD EXIT
         SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
*  FOUND A CATALOG ENTRY - MATCH AGAINST REQUEST, AND DISPLAY.        *
*                                                                     *
*---------------------------------------------------------------------*
CATLCSI  MVC   CSWCUCAT,1(R5)    PRESERVE CURRENT CATALOG NAME
         BAS   R14,GETTYPE   DO MINIMAL PROCESSING
         TM    CSP$FLGS,CSP$FGCP  TEST FOR MASK MATCH ?
         BZ    GOODRET       NO; RETURN IT
         L     R15,CSP@SCMP  LOAD SUBCOMP ADDRESS               GP03046
         SUBCALL (R15),(PATCMDSN,CSPRDSN,CSPMASK),MF=(E,CSWCMPRM)
         BXH   R15,R15,BXLECSI  NO MATCH; TRY SOMETHING ELSE
*---------------------------------------------------------------------*
*                                                                     *
*  RETURN TO CALLER WITH CC IN R15, AND APPROPRIATE DATA IN CSP/CSW   *
*                                                                     *
*---------------------------------------------------------------------*
GOODRET  SR    R15,R15       SET GOOD RETURN
         ST    R15,CSWSAV1+4*R15  FOR RELOAD
         B     CALLCSIX
DODONE   LA    R15,4         SHOW LOGICAL END OF SEARCH
         B     COMCLEAR
ERRCSI   LA    R15,8         SET AN ERROR
COMCLEAR ST    R15,CSWSAV1+4*R15  FOR RELOAD
         XC    CSW@CBXL,CSW@CBXL  CLEAR RESTART JUST IN CASE
CALLCSIX LM    R0,R15,CSWSAV1   RESTORE ALL REGISTERS
         BR    R14           RETURN TO CALLER
         SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
*  BUMP TO NEXT ENTRY IN BUFFER. IF NONE, CHECK FOR MORE DATA, OR     *
*    READ ANOTHER CATALOG.                                            *
*                                                                     *
*---------------------------------------------------------------------*
QUITGDG  XC    GDSCURR(8),GDSCURR      NO MORE GDS              GP09182
LOOPCSI  LM    R5,R7,CSW@CBXL   GET POINTERS
BXLECSI  LM    R1,R2,GDSCURR    DOING GDS ?                     GP09182
         LTR   R2,R2                                            GP09182
         BP    LOOPGDS       YES; RESTART GDS SCAN              GP09182
         BXLE  R5,R6,TESTCSI    LOOK FOR ANOTHER ENTRY
         B     DODONE        ALL DONE IN CATALOG
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*  COMPARE DATA SET NAME TO MASK. SKIP ENTRY UNLESS MATCHED.          *
*  WHEN ENTRY CONTAINS VOLUME SERIALS, EXTRACT AND COMPARE TO REQUEST *
*  SKIP UNLESS MATCHED.                                               *
*  ALSO SKIP ENTRIES WITH NO SERIALS WHEN VOLMASK IS REQUESTED        *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
FMTAIX   DS    0H            PROVISIONAL FORMATTING
FMTALIAS DS    0H            PROVISIONAL FORMATTING
FMTCAT   DS    0H            PROVISIONAL FORMATTING
FMTCLUST DS    0H            PROVISIONAL FORMATTING
FMTGDG   DS    0H            PROVISIONAL FORMATTING
FMTINX   DS    0H            PROVISIONAL FORMATTING
FMTLIB   DS    0H            PROVISIONAL FORMATTING
FMTPATH  DS    0H            PROVISIONAL FORMATTING
FMTTAP   DS    0H            PROVISIONAL FORMATTING
FMTDS    TM    CSP$FLGS,CSP$FGCP  TEST FOR MASK MATCH ?
*DEFER*  BZ    DSMATCHD      NO; EXTRACT FIELD DATA
*DEFER*  L     R15,CSP@SCMP  LOAD SUBCOMP ADDRESS               GP03046
*DEFER*  SUBCALL (R15),(PATCMDSN,CSPRDSN,CSPMASK),MF=(E,CSWCMPRM)
*DEFER*  BXH   R15,R15,LOOPCSI   NOT WANTED                     GP09182
DSMATCHD L     R14,LOCPATT   PATTERN LOCATE
         LA    R15,CSPRDSN   RETURNED DSN
         SR    R0,R0           NO CVOL SERIAL
         LA    R1,LOCWORK    CATALOG BLOCK RETURN
         STM   R14,R1,LOCPARM
         LOCATE LOCPARM      CATALOG LOOKUP
         BXH   R15,R15,ACCEPTVL   TOO BAD
         SR    R5,R5
         ICM   R5,3,LOCWORK       GET NUMBER RETURNED
         BNP   ACCEPTVL           NONE OR BAD - IGNORE
         CH    R5,=H'5'           MORE THAN FIT ?
         BNH   *+8
         LA    R5,5
         STC   R5,CSP#VOL         RETURN VOLUME COUNT
         LA    R1,CSPRVOLS        POINT TO OUTPUT SERIAL
         LA    R2,CSPRDTYS        POINT TO OUTPUT TYPE
         LA    R4,LOCWORK+2       FIRST ENTRY
DSVOLOOP MVC   0(4,R2),0(R4)      MOVE DEVICE TYPE
         MVC   0(6,R1),4(R4)      MOVE SERIAL
         LA    R4,12(,R4)         ADVANCE ONE ENTRY
         LA    R1,6(,R1)
         LA    R2,4(,R2)
         BCT   R5,DSVOLOOP
DSVOLSET CLI   CSWCIVMS,C' ' ANY VOLUME MASK REQUEST?
         BNH   ACCEPTVL      NO; USE IT
         LA    R4,CSPRVOLS   POINT TO FIRST SERIAL              GP03115
         SR    R5,R5
         ICM   R5,1,CSP#VOL
         BNP   LOOPCSI       IGNORE ENTRY IF NONE
VOLCOMP  MVC   CSWCIVTS,0(R4) MOVE TO CL8 FIELD FOR COMPARE
         L     R15,CSP@SCMP  LOAD SUBCOMP ADDRESS               GP03046
         SUBCALL (R15),(PATCMVOL,CSWCIVTS,CSWCIVMS),MF=(E,CSWCMPRM)
         BXLE  R15,R15,ACCEPTVL  MATCH
         LA    R4,6(,R4)
         BCT   R5,VOLCOMP
         B     LOOPCSI       NO MATCH
ACCEPTVL OI    CSWPFLGS,CSWPFONE SHOW AT LEAST ONE MATCH FOUND
         B     CALLCSIX      SUBROUTINE EXIT
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*  GETTYPE - GET INFORMATION BY ENTRY TYPE FROM CETY TABLE            *
*                                                                     *
*---------------------------------------------------------------------*
         PUSH  USING
GETTYPE  STM   R0,R15,SUBSAVE1
         ST    R5,CSP@RAW    RETURN RAW ADDRESS TO USER
         MVC   CSP#RAW,CSW@CBXL+4  AND LENGTH
         LA    R0,CSPRDSN    ADDRESS TO BLANK
         LA    R1,CSPSIZE-(CSPRDSN-CSPDSECT)   LENGTH TO BLANK
         L     R15,=X'40000000'  BLANK FILL
         MVCL  R0,R14        CLEAR STORAGE TO BLANKS
         XC    CSP#VOL(L'CSP#VOL+CSPRVOL-CSP#VOL),CSP#VOL
         USING CSIRWENT,R5   UPDATE MAPPING
         MVC   CSPRDSN,CSIENAME  PROPAGATE NAME
         IC    R0,CSIETYPE   GET ENTRY TYPE
         LM    R1,R3,=A(PROLOGIC,PROLOG2-PROLOGIC,PROLOGND)
         SR    R3,R2         LAST ENTRY IS DEFAULT
GETTYPEL CLM   R0,1,CETOETYP(R1)    MATCH ?
         BE    GETTYPEM      YES
         BXLE  R1,R2,GETTYPEL  CONTINUE
* NO MATCH - R1 IS SET FOR DEFAULT, ERROR ENTRY
GETTYPEM MVC   CSPRTYP(L'CSPRTYP+L'CSPRTYN),CETOETYP(R1) COPY NAME
         MVC   CSWDB(2),=X'41F0' 'LA R15,XXX'
         MVC   CSWDB+2(2),CETOFORM(R1) GET FORMATTING ROUTINE
         EX    0,CSWDB       LOAD ADDRESS
         ST    R15,CSW@FORM  SAVE IT
         MVC   CSWDB+2(2),CETOFILD(R1) GET FORMATTING ROUTINE
         EX    0,CSWDB       LOAD ADDRESS
         ST    R15,CSW@FLD   SAVE IT
GETTYPEX LM    R1,R14,SUBSAVE1+4
         BR    R14
         POP   USING
         SPACE 2                                                GP09157
         LTORG ,
         SPACE 1
LOCPATT  CAMLST NAME,1-1,,3-3     LOCATE DS IN CATALOG
         ORG   LOCPATT+4     SAVE SPACE
BLANKS   DC    CL44' '       LONG ENOUGH FOR DS NAME
HEXTAB   DC    C'0123456789ABCDEF'     1/2
HEXTRTAB EQU   HEXTAB-C'0'             2/2
PATCMMSK DC    C'MSK'        EXAMINE MASK
PATCMDSN DC    C'DSN'        COMPARE DSN TO MASK
PATCMVOL DC    C'VOL'        COMPARE VOLSER MASK
         SPACE 2
PROLOGIC CETY  A,'NONVSAM',FMTDS
PROLOG2  CETY  B,'GDG    ',FMTGDG
         CETY  C,'CLUSTER',FMTCLUST
         CETY  D,'DATA   ',FMTDS
         CETY  G,'ALTINDX',FMTAIX
         CETY  H,'GDS    ',FMTDS
         CETY  I,'INDEX  ',FMTINX
         CETY  L,'TAPELIB',FMTLIB
         CETY  M,'TAPEVOL',FMTTAP
         CETY  R,'PATH   ',FMTPATH
*MVS*    CETY  U,'UCATLNK',UCATFORM
         CETY  U,'UCATLNK',FMTCAT
         CETY  X,'ALIAS  ',FMTALIAS
         CETY  0,'CATALOG',FMTCAT
PROLOGND CETY  0,'UNKNOWN',FMTDS
         SPACE 1
MSKTAB   DC    256AL1(0)     TABLE OF MASK & END CHARACTER IN DSN
         ORG   MSKTAB+C'.'   INDEX POINT
         DC    C'.'
         ORG   MSKTAB+C'?'   CHARACTER MATCH
         DC    C'?'
         ORG   MSKTAB+C'%'   CHARACTER MATCH
         DC    C'%'
         ORG   MSKTAB+C'*'   LEVEL OR NAME MATCH
         DC    C'*'
         ORG   ,
         SPACE 1
         LTORG ,
         SPACE 1
TRNULLS  DC    256AL1(*-TRNULLS)  NO TRANSLATE EXCEPT:          GP03044
         TRENT TRNULLS,C' ',0  HEX ZERO TO BLANK (MAST.CAT.ASSOC)
         ORG   ,                                                GP03044
         SPACE 1                                                GP03044
         PRINT GEN           I GOTTA SEE THIS
         CATSPARM ,          MAP CALLER'S PARAMETER AREA
         SPACE 1
PATFIENM EQU   4             (JUST IN CASE)
         CATSWORK ,          MAP OUR WORK AREA
         SPACE 1
         ORG   CSW@CRES      REUSE FOR CTGPL
CTGPL    DS    0D
CTGOPTN1 DS    X              FIRST OPTION BYTE:
CTGBYPSS EQU   X'80' 1... ....  BYPASS CATALOG MANAGMENT SECURITY
CTGMAST  EQU   X'40' .1.. ....  CHECK THE MASTER PASSWORD
CTGCI    EQU   X'20' ..1. ....  CHECK CONTROL INTERVAL PASSWORD
CTGUPD   EQU   X'10' ...1 ....  CHECK UPDATE PASSWORD
CTGREAD  EQU   X'08' .... 1...  CHECK READ PASSWORD
CTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME OR SERIAL ADDR
*                    .... .0..  CTGENT CONTAINS CONTROL INTERVAL NUMBE
CTGCNAME EQU   X'02' .... ..1.  CTGCAT CONTAINS CATALOG DSNAME ADDRESS
*                    .... ..0.  CTGCAT CONTAINS CATALOG ACB ADDRESS
CTGGENLD EQU   X'01' .... ...1  GENERIC LOCATE REQUEST
*
CTGOPTN2 DS    X              SECOND OPTION BYTE:
CTGEXT   EQU   X'80' 1... ....  EXTEND OPTION (WITH UPDATE)
CTGNSVS  EQU   X'80'            NO SCRATCH VSAM SPACE (WITH DELETE)
CTGERASE EQU   X'40' .1.. ....  ERASE OPTION (WITH DELETE)
CTGSMF   EQU   X'40'            WRITE SMF RECORD OPTION (WITH LSPACE)
CTGGALL  EQU   X'40'            SEARCH ALL CATALOGS (WITH LISTCAT)
CTGPURG  EQU   X'20' ..1. ....  PURGE OPTION (WITH DELETE)
CTGVMNT  EQU   X'20'            CALLER IS VSAM OPEN/CLOSE/EOV
CTGRCATN EQU   X'20'            RETURN CATALOG NAME (WITH LISTCAT)
CTGGTNXT EQU   X'10' ...1 ....  GET-NEXT OPTION (WITH LISTCAT)
CTGDISC  EQU   X'08' .... 1...  DISCONNECT OPTION (WITH EXPORT)
CTGOVRID EQU   X'04' .... .1..  ERASE OVERRIDE OPTION (WITH DELETE)
CTGSCR   EQU   X'02' .... ..1.  SCRATCH SPACE (WITH DELETE NON-VSAM)
*                    .... ...X  RESERVED
*
CTGOPTN3 DS    0X             THIRD OPTION BYTE
CTGFUNC  DS    X     XXX. ....  SPECIFIES THE CALLER-REQUESTED FUNCTION
CTGLOC   EQU   X'20' 001. ....    LOCATE
CTGLSP   EQU   X'40' 010. ....    LSPACE
CTGUPDAT EQU   X'60' 011. ....    UPDATE
CTGCMS   EQU   X'80' 100. ....    CATALOG MGMT SERV. FUNCT. SEE CTGOPNS
CTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION
CTGGDGL  EQU   X'08' .... 1...  GDG LOCATE - CALLER SUPPLIED BASE LEVEL
CTGSRH   EQU   X'04' .... .1..  SEARCH MASTER CATALOG ONLY
*                    .... .0..  SEARCH USER CATALOGS FIRST
*                    .... ..X.  RESERVED
CTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST
*                    .... ...0  OS CATALOG REQUEST USER SUPPLIED CAMLST
*
CTGOPTN4 DS    X              FOURTH OPTION BYTE
CTGLBASE EQU   X'80' 1... ....  LOCATE BASE LEVEL (SUPERLOCATE GDG)
CTGDOCAT EQU   X'40' .0.. ....  DYNAMICALLY LOCATE AND OPEN CAT IF REQ.
*                    .1.. ....  DO NOT DYNAMICALLY OPEN NEEDED CATALOG
*                    ..XX XXXX  RESERVED
*
CTGENT   DS    0A             ADDRESS OF CATALOG RECORD IDENTIFIER
CTGFVT   DS    A              ADDRESS OF CALLER'S CTGFV
*
CTGCAT   DS    0A             ADDRESS OF CATALOG DSNAME OR ACB
CTGCVOL  DS    A              ADDRESS OF OS SYSCTLG DSNAME
*
CTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA
*
CTGDSORG DS    XL2            DATA SET ORGANIZATION IF SUPERLOCATE
*
CTGOPTNS DS    X              CATALOG MANAGMENT SERVICES REQUEST OPTION
CTGDEFIN EQU   X'08' 0000 1...  DEFINE
CTGALTER EQU   X'10' 0001 0...  ALTER
CTGDELET EQU   X'18' 0001 1...  DELETE
CTGLTCAT EQU   X'20' 0010 0...  LISTCAT
*                    .... .XXX    RESERVED
         DS    X              RESERVED
*
CTGTYPE  DS    X              TYPE OF CATALOG RECORD
CTGTALIN EQU   C'A'             NON-VSAM DATA SET
CTGTGBS  EQU   C'B'             GDG BASE RECORD
CTGTCL   EQU   C'C'             CLUSTER
CTGTDATA EQU   C'D'             DATA SET
CTGTINDX EQU   C'I'             INDEX
CTGTMCAT EQU   C'M'             MASTER CATALOG
CTGTPGS  EQU   C'P'             PAGE DATA SET
CTGTUCAT EQU   C'U'             USER CATALOG
CTGTVOL  EQU   C'V'             VOLUME
CTGTANM  EQU   C'X'             ALIAS NAME
*
CTGNOFLD DS    X              NUMBER OF ENTRIES IN CTGFIELD
*
CTGDDNM  DS    0A             ADDRESS OF DD STATEMENT (OPTIONAL)
CTGNEWNM DS    0A             ADDRESS OF NEW DSNAME (ALTER)
CTGFDBK  DS    XL2            FEEDBACK AREA (SUPERLOCATE)
CTGFBFLG DS    X              FLAGS (SUPERLOCATE)
CTGPAR   EQU   X'80' 1... ....  PARALLEL MOUNT
CTGKEEP  EQU   X'40' .1.. ....  FORCED KEEP
CTGGDGB  EQU   X'20' ..1. ....  GDG BASE LOCATED
CTGNGDSN EQU   X'10' ...1 ....  GDG DSNAME GENERATED (DSNAME.GXXXXVYY)
*                    .... XXXX  RESERVED
         DS    X              RESERVED
*
CTGJSCB  DS    0A             ADDRESS OF JSCB
CTGPSWD  DS    A              ADDRESS OF CALLER-SUPPLIED PASSWORD
*
CTGFIELD EQU   *              VARIABLE LENGTH FIELD
         ORG   ,
***********************************************************************
**  ADD-ONS FOR VSAM CATALOG                                         **
***********************************************************************
DSNAME   DS    CL44                    RETURNED GDG BASE NAME   GP09182
OBTNAME  DS    CL44                    NAME FOR FORMINFO OBTAIN GP09182
GDSBLEN  DS    F                       LENGTH OF BASE NAME      GP09182
GDSCURR  DS    A       1/2             GENERATION ENTRY IN LIST GP09182
GDSCNTR  DS    F       2/2             NO. OF SHOWCAT ENTRIES   GP09182
SHOWCATL SHOWCAT MF=L                                           GP09182
SHOWSPAC DS    0F'0',(256*12+12+8)X'0'                          GP09182
SHOWSPLN EQU   *-SHOWSPAC    LENGTH OF RETURN AREA              GP09182
MVSWKLEN EQU   *-CSWDSECT    SIZE WITH MVS STUFF                GP09182
         SPACE 1
CSIRWENT DSECT ,             LOCATE RETURN
CSIETYPE DS    0C            TYPE INDICATOR
CSICTYPE DS    C             TYPE INDICATOR
CSIETYP0 EQU   C'0'            CATALOG ENTRY
CSIETYPB EQU   C'B'            GDG BASE                         GP09182
CSIENAME DS    CL44          ENTRY NAME
CSICLENG EQU   *-CSIRWENT    BASIC MVS LENGTH
         SPACE 1
.COMCAT  PRINT NOGEN
         CVT   DSECT=YES
         IHAPSA ,
         IHACDE ,
         AIF   (&BAKR).DOREGS
SAVE     DSECT ,             SAVE AREA (NO WORK)
SUBSAVE1 DS    16A
         AIF   (&MVSXA).NOLOC4                                  GP09157
LOCPARM  DS    4A            LOCATE REQUEST                     GP09157
LOCWORK  DS    265X          RETURN AREA                        GP09157
.NOLOC4  ANOP  ,                                                GP09157
SAVEEND  EQU   *
         SPACE 1
MYJFCB   DSECT ,
         SPACE 1
         AGO   .COMREGS
.DOREGS  YREGS ,
.COMREGS END   ,                                                 82228
