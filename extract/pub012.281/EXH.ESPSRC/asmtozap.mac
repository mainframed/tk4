ATOZ     TITLE 'A S M T O Z A P  ***  MAKE ZAP CARDS FROM ASM LISTING'
*ASZAP: PROC OPTIONS(MAIN) REORDER;
* /* THIS IS A UTILITY THAT CONVERTS AN ASSEMBLER LISTING
*    DATASET INTO A FORMATTED IMASPZAP INPUT DECK OR SMP PTF. IT
*    IS USEFUL IN PREPARING, MAINTAINING, AND DOCUMENTING THOSE
*    INSTALLATION MODIFICATIONS WHICH CANNOT BE INSTALLED EXCEPT
*    BY MODIFING IBM CODE. ONE CAN MAKE FREE USE OF MACROS,
*    LITERALS, AND OTHER CONVENIENCE FEATURES IN PREPARING THE
*    DECK. CONTROL CARDS IN SPECIAL ASSEMBLER COMMENT FORM
*    PROVIDE FLEXIBILITY IN MODIFICATION DESIGN AND CONTROL
*    OVER OUTPUT.
*       ALL CONTROL CARDS ARE INCLUDED IN THE ASSEMBLER DECK
*    BEGINNING WITH THE CHARACTERS '*ZAP'. THE PURPOSE OF THE
*    CONTROL CARDS IS TO INTERRUPT AND RESUME GENERATION OF
*    ZAP OUTPUT. STATEMENTS WHICH DO NOT GENERATE OBJECT CODE
*    (COMMENTS,ORG,DS,EQU,ETC.) ARE TRANSFERRED TO THE OUTPUT AS
*    ZAP COMMENT CARDS, UNLESS OUTPUT GENERATION IS CURRENTLY
*    PAUSED. OTHER STATEMENTS (INSTRUCTIONS,DC,CCW,ETC.) ARE
*    TRANSFERRED TO THE OUTPUT AS 'VER' OR 'REP' CARDS IF
*    OUTPUT GENERATION HAS BEEN (RE)STARTED IN ONE OF THESE
*    TWO MODES. THE CARDS GOVERNING THIS ARE
*         *ZAP START REP
*         *ZAP START VER
*         *ZAP PAUSE
*    ZAP GENERATION IS INITIALLY PAUSED. A '*ZAP START' CARD IS
*    VALID AND (RE)STARTS GENERATION IN REP OR VER MODE, WHICHEVER
*    WAS LAST ACTIVE, BUT IF IT IS THE FIRST START CARD IN THE
*    DECK, IT CANNOT BE FOLLOWED BY OBJECT GENERATING STATEMENTS
*    UNTIL MODE IS SPECIFIED ON A SUBSEQUENT '*ZAP START (VER/REP)'
*    CARD.
*       WHEN THE ZAP IS DONE, A '*ZAP END' CARD WILL TERMINATE
*    A SCAN OF THE LISTING AND CLOSE THE OUTPUT FILE. THIS NOT
*    ONLY SAVES A FEW EXTRA MICROSECONDS OF CPU WHICH WOULD BE
*    SPENT SCANNING THE MAPPING MACROS AND CROSS REFRENCE, BUT
*    HELPS THE HUMAN READING THE ASSEMBLER TO KNOW WHERE THE
*    ESSENTIAL CODE HAS STOPPED AND THE SUPPORT DEFINITIONS
*    HAVE BEGUN. IT TAKES A LOT OF ZAP COMMENT CARDS TO DEFINE
*    THE CVT DSECT.
*       THE '*ZAP CARD' CONTROL CARD ALLOWS ARBITRARY TEXT TO
*    BE REPRODUCED INT THE OUTPUT. THE CHARACTERS UP TO THE
*    SPACE AFTER 'CARD' ARE STRIPPED OFF AND THE REMAINDER OF
*    THE CARD TO COLUMN 72 IS REPRODUCED IN THE OUTPUT DECK.
*    THIS IS PRIMARILY FOR NAME,DUMP, AND SMP CONTROL CARDS.
*         *ZAP CARD ++PTF(YU00001) /* TYPICAL PTF DECK * /.
*         *ZAP CARD ++ZAP(IEXAMPLE).
*         *ZAP CARD   EXPAND IEXAMPLE(50)
*         *ZAP CARD   NAME IEXAMPLE
*         *ZAP START VER
*    RESTRICTIONS :
*         YOU MUST SPECIFY 'PRINT DATA' IN THE ASSEMBLY IF YOU
*            GENERATE CONSTANTS OR LITERAL IN EXCESS OF 8 BYTES
*            LENGTH.
*         REMEMBER TO PUT THE 'LTORG' STATEMENT BEFORE THE
*           '*ZAP END' CARD IF LITERALS ARE GENERATED.
*         NO RELOCATABLE ADDRESS CONSTANTS CAN BE CODED IN THE
*           ZAP CARD.
*    IT IS NOT POSSIBLE AT THIS TIME TO DETECT VIOLATIONS OF THE
*     RESTRICTIONS LISTED ABOVE. BE CAREFUL.
*    GOOD TECHNIQUE:
*       PUT ALL SENSITIVE ADDRESSES AT THE BEGINNING OF THE DECK AS
*          EQU INSTRUCTIONS. THEY CAN BE EASILY MODIFIED WHEN HIT BY
*          PTFS OR WHEN THE NEXT RELEASE IS DISTRIBUTED. CANDIDATES
*          INCLUDE THE ZAPPED OVER INSTRUCTION, THE PATCH AREA, AND
*          TARGETS OF CONDITIONAL BRANCH INSTRUCTIONS OTHER THAN THE
*          NATURAL RETURN.
*       IT IS SOMETIMES POSSIBLE TO IMBED THE ZAP INSTRUCTIONS IN
*          ENOUGH SUPPORT CODE TO MAKE THE OBJECT DECK OUTPUT OF
*          THE ASSEMBLY AN INDEPENDENTLY EXECUTABLE PROGRAM WHICH
*          YOU CAN TSO TEST BEFORE INCORPORATING INTO THE SYSTEM.
*          THIS SAVES A LITTLE SYSTEM TEST TIME TRACKING DOWN DATA
*          EXCEPTIONS AND THE LIKE.
*
*    PL/I VERSION COMMENTS AND SUGGESTIONS SHOULD BE ADDRESSED TO
*         HOWARD GILBERT
*         YALE COMPUTER CENTER
*         175 WHITNEY AVE
*         NEW HAVEN, CONN. 06520
*
*    DDNAMES USED: ASMIN, SYSPRINT, SYSPUNCH                     93060
         SPACE 1                                                 93060
***********************************************************************
*   PL/I MAY BE NICE, BUT NOT ALL INSTALLATIONS HAVE IT OR WANT IT.   *
*     QUICK AND DIRTY REWRITE FOR ASM WITH LOCAL CONVENTIONS - GYP    *
*   GERHARD POSTPISCHIL                                               *
*   EXPERT SYSTEM PROGRAMMING                                         *
*   176 OLD STAGE COACH ROAD                                          *
*   BRADFORD, VT 05033-8844                                           *
*     gerhard (at) postpischil (dot) com                             *
***********************************************************************
         SPACE 1                                                 93060
         COPY  OPTIONGB      DEFINE GLOBAL OPTIONS               93060
         SPACE 1                                                 93060
         SYSPARM LIST=YES    SET GLOBAL OPTIONS                  93060
         EJECT ,                                                 93060
         PRINT &PRTSOR                                           93060
ASMTOZAP PGMHEAD ZERO12,BASE=(R12),AM=24 (FIX AM LATER)          93060
         MVI   LINE2,C' '                                        93060
         MVC   LINE2+1(L'LINE2-1),LINE2  ALL BLANK               93060
* /*
* ON ERROR BEGIN;
*    ON ERROR SYSTEM;
*    PUT EDIT(' ERROR PROCESSING:',LINE)(SKIP,A);
*    END;
* %PAGE;
* /* LOGIC:
*    EACH LINE IS HANDLED SEPARATELY. THE ONLY INFORMATION WHICH
*      EXTENDS ACROSS LINES IS THE MODE OF GENERATION IN 'WHAT'
*      AND THE GENERATION (0) OR PAUSE (1) STATUS IN 'SKP'.
*      FIRST ONE DETECTS AND PROCESSES CONTROL CARDS.
*      THEN ONE CHECKS FOR PAGE HEADER LINES AND BLANK LINES.
*      ASSEMBLER COMMENT CARDS ARE REPRODUCED.
*      A COMMENT CARD IS PRODUCED FOR LABELS OR NON-OBJECT
*        GENERATING STATEMENTS.
*      A VER OR REP CARD IS CREATED FOR OBJECT GENERATING STATEMENTS.
*   */
         SERVINIT ,          LOAD AND STASH THE SERVICE ROUTINE ADDRESS
         SERVLOAD @INPREAD,@PRINTER  LOAD INPUT/OUTPUT SERVICES GP05258
         INPOPEN ASMIN,OPT=ABEND   GET INPUT OR LOST             93060
         PRTOPEN SYSPRINT,OPT=(NOWTO)                            93060
         PRTL  '#       A S M T O Z A P',DEV=1,TITLE=1           93060
         PRTOPEN SYSPUNCH,OPT=ABEND,DEV=2    OPEN PUNCH          93060
* GETLINE:
*    READ FILE(IN) INTO(LINE);
GETLINE  INPGET ,            GET THE INPUT LINE                  93060
*    LINE2=LINE;
         LR    R14,R1        COPY INPUT ADDRESS                 GP05258
         LR    R15,R0          AND LENGTH                       GP05258
         LA    R0,LINE2      GET WORK LINE                      GP05258
         LA    R1,L'LINE2    AND MAX LENGTH                     GP05258
         ICM   R15,8,BLANKS  REQUEST BLANK FILL                 GP05258
         MVCL  R0,R14        MOVE AND BLANK FILL                GP05258
*
*    IF SUBSTR(CARD,1,4)='*ZAP' THEN
         CLC   =C'*ZAP',CARD  POSSIBLE CONTROL CARD ?            93060
         BNE   NOTCARD        NO; TRY FOR DATA                   93060
*         DO /* ASMTOZAP CONTROL CARD PROCESSING */;
*         I=VERIFY(SUBSTR(CARD,5),' ') +4;
         LA    R2,CARD+4      POINT TO POSSIBLE BLANK            93060
         LA    R15,8          NOT TOO FAR                        93060
FNONBLK  CLI   0(R2),C' '     STILL BLANK ?                      93060
         BNE   HNONBLK        NO                                 93060
         LA    R2,1(,R2)                                         93060
         BCT   R15,FNONBLK                                       93060
*         IF SUBSTR(CARD,I,5)='START' THEN
HNONBLK  CLC   =C'START',0(R2)  START ?                          93060
         BNE   NOTSTART       NO                                 93060
*              DO;
*              SKP='0'B;
         NI    MODEFG,255-FGSKIP                                 93060
*              IF INDEX(CARD,'VER')>0 THEN WHAT='VER';
*              IF INDEX(CARD,'REP')>0 THEN WHAT='REP';
         LA    R15,CARD+72-3                                     93060
         SR    R15,R2        COLUMNS LEFT ON CARD                93060
REPSCAN  CLC   =C'VER',0(R2)   VERIFY REQUEST ?                  93060
         BE    REPHAVE                                           93060
         CLC   =C'REP',0(R2)   REPLACE ?                         93060
         BE    REPHAVE                                           93060
         LA    R2,1(,R2)                                         93060
         BCT   R15,REPSCAN                                       93060
         B     GETLINE       NOTHING IF NO MATCH                 93060
REPHAVE  MVC   WHAT,0(R2)    SAVE VER OR REP                     93060
*              GO TO GETLINE;
         B     GETLINE                                           93060
*              END;
*         IF SUBSTR(CARD,I,5)='PAUSE' THEN
NOTSTART CLC   =C'PAUSE',0(R2)  IS IT PAUSE ?                    93060
         BNE   NOTPAUSE                                          93060
         OI    MODEFG,FGSKIP  SET PAUSE                          93060
         B     GETLINE                                           93060
*              DO;
*              SKP='1'B;
*              GO TO GETLINE;
*              END;
*         IF SUBSTR(CARD,I,4)='STOP'×SUBSTR(CARD,I,4)='END'
*            THEN GO TO FINN;
NOTPAUSE CLC   =C'STOP',0(R2)                                    93060
         BE    FINN           LOGICAL END                        93060
         CLC   =C'END ',0(R2)                                    93060
         BE    FINN                                              93060
*         IF SUBSTR(CARD,I,4)='CARD' THEN
*              DO;
         CLC   =C'CARD',0(R2)                                    93060
         BNE   NOTCONT                                           93060
*              PUT FILE(OUT) EDIT(SUBSTR(CARD,I+5))(COL(1),A(72));
         PRTF  4(R2),72,CC=NO,DEV=(1,2)  PUT CARD IMAGE          93060
*              GO TO GETLINE;
         B     GETLINE                                           93060
*              END;
         SPACE 1                                                 93060
*         PUT EDIT ('***** UNRECOGNIZED CONTROL CARD ****',CARD)
*              (SKIP(2),2 A);
NOTCONT  PRTLIST BADCONCD,DEV=(1,2)                              93060
*         CALL PLIRETC(16);
         OICC  8             SET ERROR CODE                     GP05258
*         GO TO GETLINE;
         B     GETLINE                                           93060
*         END /* OF CONTROL CARD PROCESSING */;
         SPACE 2                                                 93060
*    IF SKP THEN GO TO GETLINE;
* /* NO PROCESSING IS DONE IF GENERATION IS PAUSED */
NOTCARD  TM    MODEFG,FGSKIP  ARE WE HOPPING AND SKIPPING ?      93060
         BNZ   GETLINE       YES; JUMP RIGHT OUT OF HERE         93060
*    IF VERIFY(SUBSTR(LINE2,2,23),' 0123456789ABCDEF')>0
         TRT   LINE2+1(23),NONHEXTB  LOOK FOR NON-HEX DATA       93060
*       THEN GO TO GETLINE;
         BNZ   GETLINE                                           93060
*  /* IF THERE ARE NON HEX CHARACTERS IN THE ADDRESS AND DATA FIELDS
*     THEN WE ARE PROBABLY LOOKING AT A PAGE TITLE LINE */
*    IF CARD=' ' & DATA=' ' THEN GO TO GETLINE;
         CLC   CARD,BLANKS  ALL BLANK ?                          93060
         BNE   NOTBCD       NO                                   93060
         CLC   DATA,BLANKS  COMPLETELY BLANK ?                   93060
         BE    GETLINE      YES; SKIP                            93060
*         /* IF THESE FIELDS ARE BLANK, THEN WE ARE LOOKING AT BLANK
*            LINES PRODUCED BY SPACE OR UNDER PAGE HEADER. */
*    IF SUBSTR(CARD,1,1)='*' THEN
NOTBCD   CLI   CARD,C'*'     COMMENT CARD ?                      93060
         BNE   NOTCOMNT      NO                                  93060
*         DO /* REPRODUCE ASSEMBLER COMMENT CARD */;
*         PUT FILE(OUT) EDIT(CARD)(COL(1),A(72));
         PRTF  CARD,72,CC=NO,DEV=(1,2)                           93060
*         GO TO GETLINE;
         B     GETLINE                                           93060
*         END;
*    IF SUBSTR(CARD,1,1)^=' ' & SUBSTR(DATA,2,1)^=' ' THEN
NOTCOMNT CLI   CARD,C' '     LABEL ?                             93060
         BNH   NOTLABEL                                          93060
         CLI   DATA+1,C' '   AND DATA ?                          93060
         BNH   NOTDATA                                           93060
*         DO /* WE HAVE A LABELLED OBJECT GENERATING STATEMENT.
*           BREAK IT UP INTO TWO LINE, A COMMENTED 'LABEL EQU *' AND
*           A VER OR REP LINE THIS ALLOWS LESS TRUNCATION OF THE
*           COMMENT FIELD OF THE ASSEMBLER SOURCE, SINCE COLS 1-9 ARE
*           NEVER REPRODUCED AS BLANKS. */;
*         PUT FILE(OUT) EDIT('*',SUBSTR(CARD,1,8),'EQU   *')
*              (COL(1),A(1),COL(21),A(8),COL(30), A);
         PRTLIST FDEQU,DEV=(1,2)  WRITE LABEL EQU                93060
*         END;
*NEXT*   B     NOTLABEL                                          93060
*    IF SUBSTR(DATA,2,1)=' ' THEN
NOTLABEL CLI   DATA+1,C' '   ANY DATA ?                          93060
         BH    HAVDATA                                           93060
*         DO /* NON-OBJECT-GENERATING STATEMENT */;
*         PUT FILE(OUT) EDIT('*',CARD)
*              (COL(1),A(1),COL(21),A(60));
NOTDATA  LA    R1,CARD       POINT TO THE CARD IMAGE            GP98351
         LA    R0,L'CARD-10                                     GP98351
NOTDATAL CLI   0(R1),C' '    NON-BLANK ?                        GP98351
         BH    NOTDATAC                                         GP98351
         LA    R1,1(,R1)                                        GP98351
         BCT   R0,NOTDATAL   TRY AGAIN                          GP98351
NOTDATAC CLC   =C'High Level',0(R1)  HIGH-LEVEL ASSEMBLER ?     GP98351
         BE    GETLINE       YES; IGNORE IT                     GP98351
         CLC   =C'HLASM R',0(R1)  other way?                    GP98351
         BE    GETLINE       YES; IGNORE IT                     GP98351
         CLC   =C'HIGH LEVEL',0(R1)  HIGH-LEVEL ASSEMBLER ?     GP98351
         BE    GETLINE       YES; IGNORE IT                     GP98351
         PRTLIST FDCCARD,DEV=1                                   93060
         PRTLIST FDCPUN,DEV=2                                    93060
*         GO TO GETLINE;
         B     GETLINE                                           93060
*         END /* IT IS PASSED AS A COMMENT */;
*    IF WHAT=' ' THEN
HAVDATA  CLI   WHAT,C' '     INITIALIZED YET ?                   93060
         BH    MAKEZAP       YES                                 93060
*         DO /* OBJECT GENERATOR HIT AFTER ONLY '*ZAP START' CARD */;
*         PUT EDIT('**** NEITHER VER NOR REP HAS BEEN SPECIFIED ****',
*              CARD)(SKIP, A);
         PRTL  '**** NEITHER VER NOR REP HAS BEEN SPECIFIED ****',     *
               CC=NO,DEV=(1,2)                                   93060
*         CALL PLIRETC(16);
         OICC  8             MAKE ERROR                         GP05258
*         END;
         B     GETLINE       ?????                               93060
*    /* ZAP IS WRITTEN IN TWO PIECES. FIRST VER OR REP AND OFFSET,
*       NEXT DATA AND COLUMNS 10- ON ASSEMBLER SOURCE. */
*    PUT FILE(OUT) EDIT(WHAT,ADDR,' ')(COL(1),A(3),X(1),A(4),A(1));
MAKEZAP  PRTLIST ZAP1,DEV=(1,2)                                  93060
*    I=1;
         LA    R2,DATA                                           93060
*              /* DATA GENERATING STATEMENTS ARE OF TWO KINDS:
*                 MACHINE OPS GENERATE '0000 0000 0000' WITH
*                 THE SECOND AND THIRD GROUP OPTIONAL.
*                 DC GENERATES A VARIABLE LENGTH
*                 '0000000000000000' WITH AN EVEN # DIGITS<17 */
*         DO J=1 TO 4 WHILE(I<14);
*         PUT FILE(OUT) EDIT(SUBSTR(DATA,I,4))(A(4));
NEXTZAP  PRTLIST ZAP2,DEV=(1,2)                                  93060
*         IF SUBSTR(DATA,I+4,1)=' ' THEN I=I+1;
         CLI   4(R2),C' '    DATA OR INSTRUCTION ?               93060
         BH    *+8           PROBABLY DATA; DON'T SKIP           93060
         LA    R2,1(,R2)     ADVANCE POINTER                     93060
*         IF SUBSTR(DATA,I+4,1)^=' ' & I<10 THEN
         CLI   4(R2),C' '    MORE FOLLOWING ?                    93060
         BNH   DONEZAP       NO                                  93060
         LA    R0,DATA+10    AFTER EIGHT ?                       93060
         CR    R2,R0         NEED A COMA ?                       93060
         BH    BUMPZAP       NO                                  93060
*              PUT FILE(OUT) EDIT(',')(A(1));
         PRTLIST ZAP3,DEV=(1,2)                                  93060
*         I=I+4;
BUMPZAP  LA    R2,4(,R2)     TRY NEXT FIELD                      93060
         LA    R14,DATA+13                                       93060
         CR    R2,R14        PAST LAST ?                         93060
         BNH   NEXTZAP       NOT YET                             93060
*         END;
*    PUT FILE(OUT) EDIT(SUBSTR(CARD,10))(COL(30),A(51));
DONEZAP  PRTLIST ZAP4,DEV=1                                      93060
         PRTLIST ZAP4P,DEV=2                                     93060
*    GO TO GETLINE;
         B     GETLINE                                           93060
         SPACE 2                                                 93060
* FINN:
*    PUT FILE(OUT) EDIT('* DECK PRODUCED BY THE ASMTOZAP UTILITY'
*         ,DATE,TIME)(COL(1),A,X(1),P'99/99/99',X(1),A(6));
*    END;
FINN     PRTLIST FINAL,DEV=(1,2)                                 93060
         SERVTERM ,          CLOSE AND FREE                      93060
         PGMEXIT COPYRET=(RETCODE,8)  RETURN WITH CODE          GP05258
         SPACE 1                                                 93060
BADCONCD FDPRT '**** UNRECOGNIZED CONTROL CARD ****',NL          93060
         FDPRT CARD,72,PAD                                       93060
         FDPRT *END                                              93060
         SPACE 1                                                 93060
FDCCARD  FDPRT '*',NL,LEN=20                                     93060
         FDPRT CARD,72,PAD                                       93060
         FDPRT *END                                              93060
         SPACE 1                                                 93060
FDCPUN   FDPRT '*',NL,LEN=6                                      93060
         FDPRT CARD,72,PAD                                       93060
         FDPRT *END                                              93060
         SPACE 1                                                 93060
FDEQU    FDPRT '*',NL,LEN=21                                     93060
         FDPRT CARD,8                                            93060
         FDPRT 'EQU   *',PADL                                    93060
         FDPRT *END                                              93060
         SPACE 1                                                 93060
FINAL    FDPRT ' CHECKSUM ',NL                                  GP98351
FINAL2   FDPRT '* DECK PRODUCED BY THE ASMTOZAP UTILITY',NL      93060
         FDPRT DB,1,DATE,PAD                                     93060
         FDPRT DB,1,TIME,PAD                                     93060
         FDPRT *END                                              93060
         SPACE 1                                                 93060
ZAP1     FDPRT ' ',NL                                            93060
         FDPRT WHAT                                              93060
         FDPRT ADDR,PAD                                          93060
         FDPRT *END                                              93060
ZAP2     FDPRT 0(R2),4                                           93060
         FDPRT *END                                              93060
ZAP3     FDPRT ','                                               93060
         FDPRT *END                                              93060
ZAP4     FDOPT SBA=(*,31)                                        93060
         FDPRT CARD+09,51                                        93060
         FDPRT *END                                              93060
         SPACE 1                                                 93060
ZAP4P    FDOPT SBA=(*,31)                                        93060
         FDPRT CARD+09,48                                        93060
         FDPRT *END                                              93060
         SPACE 1                                                 93060
NONHEXTB DC    256AL1(4)     NON-HEX CHARACTERS                  93060
         TRENT NONHEXTB,0,C' '  ALLOW BLANK AS VALID HEX BYTE    93060
         TRENT ,0,(C'0',10),(C'A',6)  HEX DIGITS                 93060
         SPACE 1                                                 93060
BLANKS   DC    CL133' '      LARGE NUMBER OF BLANKS              93060
         EJECT ,                                                 93060
* DCL IN INPUT FILE RECORD /* DS CONTAINING SYSPRINT FROM ASSEMBLY */;
ASMIN    INPWORK ASMIN,IN,EDIT=128,EODAD=FINN                    93060
* DCL OUT OUTPUT FILE STREAM ENV(FB RECSIZE(80) BLKSIZE(800));
*    /* RECEIVES ZAP CARDS */
SYSPRINT PRTWORK SYSPRINT,SYSTERM,TITLE=3                        93060
SYSPUNCH PUNWORK SYSPUNCH,OUT                                    93060
         SPACE 1                                                 93060
SAVE     DSECT ,             SAVE AND WORK AREA                  93060
DB       DS    D                                                 93060
         SERVDEFS ,          SERVICE ADDRESSES & STUFF          GP05258
         SPACE 1                                                 93060
* DCL LINE CHAR(133) VAR; /* ONE LINE OF ASSEMBLER */
* DCL LINE2 CHAR(133);       SAVE AND WORK AREA
LINE2    DS    CL133         OTHER INPUT LINE                    93060
* DCL ADDR CHAR(4) DEF LINE2 POS(4); /* OFFSET OR ADDRESS PART */
ADDR     EQU   LINE2+3,4,C' '  ADDRESS FIELD (LOW FOUR)          93060
* DCL DATA CHAR(16) DEF LINE2 POS(9); /* HEX INSTRUCTION COD OR DATA */
DATA     EQU   LINE2+8,16,C' '   DATA, HEX OPCODE/DATA           93060
*         /* NOTE THAT SUBSTR(DATA,1,1) OVERLAPS LAST DIGIT OF
*            HEX REPRESENTATION OF ADDRESS GENERATED BY EQU
*            STATEMENT, SO TEST IS ON SUBSTR(DATA,2,1) FOR
*            PRESENCE OF ANY REAL DATA */
* DCL CARD CHAR(72) DEF LINE2 POS(42); /* ASM SOURCE PART */
CARD     EQU   LINE2+41,72,C'C'                                  93060
* DCL (DATE,TIME,INDEX,VERIFY,SUBSTR) BUILTIN;
* DCL WHAT CHAR(3) INIT(' '); /* BECOMES 'VER' OR 'REP' */
WHAT     DS    CL3                                               93060
* DCL SKP BIT INIT('1'B); /* CONTROLS SKIPPING UNDER *ZAP PAUSE, ETC */
MODEFG   DS    X             PROCESSING FLAG                     93060
FGSKIP   EQU   X'80'           SKIP MODE                         93060
SAVEEND  EQU   *             END OF DYNAMIC AREA                 93060
         END   ,                                                 93060
