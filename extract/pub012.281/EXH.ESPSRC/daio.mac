***********************************************************************
*                           *              *
*                           *   DAIO       *
*                           *              *
*                           ****************
*
***********************************************************************
*
*   HISTORY:
*      14 JUL 70:  POSSESSED DECK OF MR. ALAN THOMPSON, INTERNATIONAL
*         BUSINESS MACHINES CORP., AT GODDARD SPACE FLIGHT CENTER,
*         GREENBELT, MARYLAND.
*       6 JAN 71:  UPDATED SOURCE DECK DOCUMENTATION.  DANIEL A. KIRK,
*         SPACE AND EARTH SCIENCES COMPUTING CENTER, GODDARD SPACE
*         FLIGHT CENTER, GREENBELT, MARYLAND.
*                                                                85224
*      12 AUG 85:  UPGRADE FOR BLOCK ARCHITECTURE DASD (3375/3380)
*         AND HALF-WORD OVERHEAD DRIVES (3350).  G. POSTPISCHIL  85224
*         EXPERT SYSTEM PROGRAMMING, INC., VIENNA, VA            85224
*
***********************************************************************
DAIO     TITLE 'DIRECT ACCESS METHOD'
***********************************************************************
*                                                                     *
* THIS SET OF ROUTINES CAN BE USED TO WRITE AND/OR READ A DIRECT      *
* DATA SET.  SKELETON RECORDS ARE NOT WRITTEN UNLESS THERE IS MORE    *
* THAN ONE RECORD PER TRACK AND THE RECORDS ARE NOT CREATED           *
* SEQUENTIALLY.                                                       *
*                                                                     *
* ENTRY POINTS :                                                      *
*                                                                     *
*     DREAD (IU,IBLOCK,AREA)   READS BLOCK NUMBER IBLOCK INTO AREA    *
*     DWRITE(IU,IBLOCK,AREA)   WRITES BLOCK NUMBER IBLOCK FROM AREA   *
*                                                                     *
* REGISTERS :                                                         *
*                                                                     *
*        GR 0 :                                                       *
*        GR 1 :                                                       *
*        GR 2 :                                                       *
*        GR 3 : POINTER TO TABLE ENTRY FOR UNIT, AND WORK REG         *
*        GR 4 :                                                       *
*        GR 5 :                                                       *
*        GR 6 : BLOCK TO BE WRITTEN (PASSED TO CONVERT)               *
*        GR 7 :                                                       *
*        GR 8 : DEB ADDRESS                                           *
*        GR 9 : DCB ADDRESS                                           *
*        GR10 : PARM 1 -- BLOCK NUMBER                                *
*        GR11 : PARM 1 -- AREA ADDRESS                                *
*        GR12 : BASE REG                                              *
*        GR13 : SAVE AREA                                             *
*        GR14 : LINK REG                                              *
*        GR15 : TEMPORARY WORK REG                                    *
*                                                                     *
************************** ABEND DUMPS GIVEN **************************
*                                                                     *
*        USER CODE = 101     BLKSIZE SPECIFIED IS TOO LARGE FOR TRACK *
*        USER CODE = 102     UNIT IS BEING USED FOR SEQUENTIAL I/O    *
*        USER CODE = 103     SYSTEM ERROR AT EOV                      *
*        USER CODE = 001     I/O ERROR DURING OUTPUT OPERATION        *
***********************************************************************
         EJECT
         MACRO
&ENTRY   INIT  &FORT
*      INIT, 14 JUL 70, ALAN THOMPSON.
         GBLC  &LABL,&LAB
         AIF   ('&ENTRY' NE '').LABOK
         AIF   ('&LABL' NE '').ERR
&LAB     SETC  '&SYSECT'
         SAVE  (2,12),T,&LAB
         AGO   .NOLAB
.ERR     MNOTE 'BLANK LABEL FIELD ILLEGAL EXCEPT ON FIRST INIT'
         MEXIT
.LABOK   ENTRY &ENTRY
&ENTRY   SAVE  (2,12),T,*
&LAB     SETC  '&ENTRY'
.NOLAB   AIF   ('&LABL' NE '').NFST
         LR    12,15
         USING &LAB,12
         CNOP  0,4
         BAL   4,I&SYSNDX
SVAR     DS    18F
I&SYSNDX ST    13,SVAR+4
.STD     ST    4,8(,13)
         AIF   ('&FORT' NE 'FORT').NFORT
         L     15,=V(IBCOM#)
         BAL   14,64(,15)               INITIALIZE IBCOM
         AGO   .CONT
.NFORT   AIF   ('&FORT' EQ '').CONT
         MNOTE 'ONLY LEGAL OPERAND FOR INIT IS : FORT'
.CONT    LR    13,4
         AIF   ('&LABL' NE '').END
&LABL    SETC  '&LAB'
.END     MEXIT
.NFST    USING &LAB,15
         L     12,=A(&LABL)
         DROP  15
         LA    4,SVAR
         ST    13,SVAR+4
         AGO   .STD
         MEND
         MACRO
&HERE    MOVE  &LEN,&TO,&FROM
*      MOVE, 14 JUL 70, ALAN THOMPSON.
         AGO   .OS360                                            91192
         AIF   ('&FROM'(1,1) EQ '(').FRR                         91192
&HERE    LA    0,&FROM(1)    GET SOURCE                          91192
         AGO   .FRDON                                            91192
.FRR     ANOP  ,                                                 91192
&HERE    LR    0,&FROM(1)    GET SOURCE                          91192
.FRDON   AIF   ('&TO'(1,1) EQ '(').TOR                           91192
         LA    14,&TO(1)     GET DESTINATION                     91192
         AGO   .TODON                                            91192
.TOR     LR    14,&TO(1)     GET DESTINATION                     91192
.TODON   AIF   ('&LEN'(1,1) EQ '(').LNR                          91192
         LA    15,&LEN(1)    LOAD LENGTH                         91192
         AGO   .LNDON                                            91192
.LNR     LR    15,&LEN(1)    LOAD LENGTH                         91192
.LNDON   LR    1,15          COPY LENGTH                         91192
         MVCL  14,0          COPY DATA                           91192
         MEXIT ,                                                 91192
.OS360   LCLC  &T1,&T2,&T3
&HERE    LA    14,255              MAX LENGTH FOR MVC INSTRUCTION
&T2      SETC  'A'
&T3      SETC  'A'
         AIF   ('&LEN'(1,1) NE '(').FIRST
&T1      SETC  'R'
         AIF   (&LEN(1) EQ 0).SKIP1
         AIF   (&LEN(1) LT 1 OR &LEN(1) GT 12).ERROR1
.FIRST   L&T1  0,&LEN(1)           LOAD REG 0 WITH LENGTH
.SKIP1   AIF   ('&TO'(1,1) NE '(').SECOND
&T2      SETC  'R'
         AIF   (&TO(1) EQ 15).SKIP2
         AIF   (&TO(1) LT 1 OR &TO(1) GT 12).ERROR2
.SECOND  L&T2  15,&TO(1)           LOAD REG 15 WITH TO ADDRESS
.SKIP2   AIF   ('&FROM'(1,1) NE '(').THIRD
&T3      SETC  'R'
         AIF   (&FROM(1) EQ 1).SKIP3
         AIF   (&FROM(1) LT 1 OR &FROM(1) GT 12).ERROR3
.THIRD   L&T3  1,&FROM(1)          LOAD REG 1 WITH FROM ADDRESS
.SKIP3   ANOP
         S     0,=F'256'           NO. OF BYTES REMAINING TO BE MOVED
         BNM   *+6                 IF .GE. 256,BRANCH TO EX INSTRUCTION
         AR    14,0                SET REG 14 TO REMAINING BYTES
         EX    14,*+22             EXECUTE THE MVC INSTRUCTION
         LA    1,1(14,1)           INCREMENT THE FROM ADDRESS
         LA    15,1(14,15)         INCREMENT THE TO ADDRESS
         LTR   0,0                 ARE THERE ANY MORE BYTES TO BE MOVED
         BP    *-24                YES.  BRANCH TO  S    0,=F'256'
         B     *+10                NO.  BRANCH AROUND MVC INSTRUCTION
         MVC   0(1,15),0(1)
         MEXIT
.ERROR1  MNOTE 1,'***IMPROPER REGISTER SPECIFIED FOR 1ST OPERAND***'
         AGO   .FIRST
.ERROR2  MNOTE 1,'***IMPROPER REGISTER SPECIFIED FOR 2ND OPERAND***'
         AGO   .SECOND
.ERROR3  MNOTE 1,'***IMPROPER REGISTER SPECIFIED FOR 3RD OPERAND***'
         AGO   .THIRD
         MEND
         MACRO
&LAB     RET   &CODE
*      RET, 14 JUL 70, ALAN THOMPSON.
&LAB     L     13,SVAR+4
         AIF   ('&CODE' EQ 'F').FUNC
         AIF   ('&CODE' NE '').CODE
         RETURN (14,12),T
         MEXIT
.CODE    RETURN (14,12),T,RC=&CODE
         MEXIT
.FUNC    ANOP
         LM    14,15,12(13)             RESTORE 14 AND 15
         LM    1,12,24(13)              RESTORE 1 THROUGH 12
         MVI   12(13),X'FF'             SET RETURN INDICATOR
         BR    14
         MEND
         EJECT
         PRINT NOGEN         SAVE A TREE                         91192
DWRITE   START 0
DC       EQU   X'80'                    DATA CHAINING FLAG
SLI      EQU   X'20'                    SUPRESS WRONG LENGTH FLAG
CC       EQU   X'40'                    COMMAND CHAINING FLAG
NOTRAN   EQU   X'10'                    SKIP FLAG
NOOP     EQU   X'03'                    NO-OP CCW CODE
TIC      EQU   X'08'                    TRANSFER IN CHANNEL
SID      EQU   X'31'                    SEARCH ID EQUAL
SHOME    EQU   X'39'                    SEARCH HOME ADDRESS
READ     EQU   X'06'                    READ DATA
WRITE    EQU   X'05'                    WRITE DATA
WRITECKD EQU   X'1D'                    WRITE COUNT, KEY AND DATA
NUMENTS  EQU   50
         USING IHADCB,9
         INIT
         EJECT
*
* ENTRY TO WRITE A RECORD
*
         BAL   14,UNCK                  CHECK UNIT # AND SET UP DCB
*
* NO SKELS NEEDED IF RPT=1
*
         CLC   RPT,=H'1'
         BE    WRITEFMT                 BRANCH IF NO SKELS NEEDED
*
* IF BLOCK IS OLD, REPLACE DATA
*
         C     10,LSTBLK
         BH    NEWBLK                   BRANCH IF BLOCK IS NEW
         LR    6,10
         BAL   14,CONVERT               CONVERT BLOCK # TO CCHHR
         MVC   CCWAD,=A(WCCW1)          SET CHANNEL PROG ADR IN IOB
         MVC   DATADW1+1(3),0(11)       SET DATA AREA ADDRESS IN CCW
         LH    14,DCBBUFL               GET BLOCK LENGTH
         STH   14,DATADW1+6             STORE IN CCW
         MVI   ECB,0                    CLEAR ECB
         EXCP  IOB                      EXECUTE CHANNEL PROGRAM
         WAIT  ECB=ECB                  WAIT FOR COMPLETION
         CLI   ECB,X'7F'                NORMAL END?
         BE    RET                      RETURN IF YES
         ABEND 1,DUMP                   I/O ERROR
*
* BLOCK IS NEW -- WRITE SKELETON RECS IF BLOCKS WERE SKIPPED
*
NEWBLK   EQU   *
         L     15,LSTBLK
         LA    15,1(,15)
         ST    15,LSTBLK
         CR    10,15                    IS THIS LSTBLK+1
         BE    WRITEFMT                 GO WRITE IF YES
         LR    6,15
         BAL   14,CONVERT               CONVERT BLOCK # TO CCHHR
         MVC   CCWAD,=A(WCCW2)          SET CHANNEL PROG ADR IN IOB
         LH    14,DCBBUFL               GET BLOCK LENGTH
         STH   14,COUNT+6               STORE IN COUNT FIELD
         MVI   ECB,0                    CLEAR ECB
         EXCP  IOB                      EXECUTE CHANNEL PROGRAM
         WAIT  ECB=ECB                  WAIT FOR COMPLETION
         CLI   ECB,X'7F'                NORMAL END ?
         BE    NEWBLK                   GO BACK IF YES
         ABEND 1,DUMP
*
* WRITE COUNT KEY AND DATA FOR NEW RECORD
*
WRITEFMT EQU   *
         LR    6,10
         BAL   14,CONVERT
         MVC   CCWAD,=A(WCCW3)
         MVC   DATADW3+1(3),0(11)
         LH    14,DCBBUFL               GET BLOCK LENGTH
         STH   14,DATADW3+6             STORE IN CCW
         STH   14,COUNT+6               STORE IN COUNT FIELD
         MVI   ECB,0
         EXCP  IOB
         WAIT  ECB=ECB
         CLI   ECB,X'7F'
         BE    RET
         ABEND 1,DUMP
         EJECT
*
* ENTRY TO READ A RECORD
*
DREAD    INIT
         BAL   14,UNCK                  CHECK UNIT # AND SET UP DCB
         LR    6,10
         BAL   14,CONVERT
         MVC   CCWAD,=A(RCCW)
         MVC   DATADR+1(3),0(11)
         LH    14,DCBBUFL               GET BLOCK LENGTH
         STH   14,DATADR+6              STORE IN CCW
         MVI   ECB,0
         EXCP  IOB
         WAIT  ECB=ECB
         CLI   ECB,X'7F'
         BE    RET
*
* I/O ERROR
*
         L     8,=V(FERMSG)
         USING FERMSG,8
         MVC   IIOB(16),IOB             MOVE IOB INTO MESSAGE
         MVC   IIOB+8(1),IIOB+4         MOBE ECB COMPLETION BYTE
         L     2,IOBDCB                 DCB ADDRESS
         L     2,44(,2)                 DEB ADDRESS
         L     2,32(,2)                 UCB ADDRESS
         MVC   IIOB+4(4),24(2)          EXTRA SENSE BYTES
         SYNADAF ACSMETH=EXCP,PARM1=IOB
         MVC   IBUF(4),8(1)             BUFFER ADDRESS
         MVC   IMES(80),48(1)           MESSAGE
         MVC   IMES+11(2),=C'  '
         MVC   IMES+13(6),28(2)         VOLUME SERIAL NUMBER
         LH    2,12(,1)
         ST    2,ILEN
         SYNADRLS
         RET   4                        INPUT I/O ERROR
RET      RET   0
         EJECT
*
* ROUTINE TO CONVERT BLOCK NUMBERS TO ABSOLUTE ADDRESSES
*
CONVERT  LTR   3,6                      BLOCK NUMBER
         BP    GOOD
         ABEND 2,DUMP                   ZERO OR NEG BLOCK NUM
GOOD     EQU   *
         SR    7,7
         LH    15,NUM
NEXT     C     3,EBLK(7)                *                             *
         BNH   THISXTNT                 * SCAN EXTENT TABLE FOR       *
         S     3,EBLK(7)                * EXTENT CONTAINING THIS BLOCK*
         LA    7,4(,7)                  *                             *
         BCT   15,NEXT                  *                             *
         LR    4,14                     SAVE RETURN ADDRESS
*
* TRY TO GET MORE SPACE -- BLOCK IS NOT IN CURRENT EXTENTS
*
         EOV   (9)
         L     8,DCBDEBAD
         SR    15,15
         IC    15,16(,8)                NEW NUMBER OF EXTENTS
         LH    14,NUM
         STH   15,NUM
         SR    15,14                    # OF EXTRA EXTENTS
         BNP   ERROR1
LOOP1    SLL   7,2                      INDEX TO DEB
         LH    14,46(8,7)               # OF TRACKS THIS EXTENT
         MH    14,RPT                   # OF BLOCKS / TRACK
         SRL   7,2
         ST    14,EBLK(7)               STORE # OF BLOCKS THIS EXTENT
         LA    7,4(,7)
         BCT   15,LOOP1                 GO BACK IF MORE NEW EXTENTS
         LR    14,4                     RESTORE RETURN ADDRESS
         B     CONVERT                  GO SEE IF NEW EXTENTS HELP
THISXTNT SLL   7,2                      MAKE INDEX TO DEB
         L     8,DCBDEBAD
         SR    2,2
         BCTR  3,0                      BLOCK # -1
         LH    4,RPT                    BLOCKS  PER TRACK
         DR    2,4
         STC   2,IOBSEEK+7              STORE BLOCK  #-1
         LA    2,1(,2)
         STC   2,COUNT+4                STORE BLOCK  #
         SR    2,2
         AH    3,40(8,7)                ADD START TRACK NUM
         LH    4,TRKS                   TRACKS PER CYL
         DR    2,4
         AH    3,38(8,7)                ADD START CYL
         STH   3,WORK1
         MVC   IOBSEEK+3(2),WORK1
         STH   3,COUNT
         STH   2,WORK1
         MVC   IOBSEEK+5(2),WORK1
         STH   2,COUNT+2
         SRL   7,4                      GET EXTENT NUMBER
         STC   7,IOBSEEK                STORE IN IOB
         BR    14
*
* CHECK UNIT # AND SET UP DCB
*
UNCK     LM    9,10,0(1)                FIRST 2 PARMS
         L     10,0(,10)                BLOCK NUMBER
         LA    11,9(,1)                 PTR TO 3 BYTE AREA ADDR
         L     9,0(,9)                  UNIT #
         LTR   8,9
         BNP   BAD
         C     9,=A(NUMENTS)
         BNH   GOODUNIT
BAD      ABEND 201,DUMP                 ILLEGAL UNIT #
GOODUNIT BCTR  9,0
         SLL   9,2                      INDEX TO TABLE
         L     3,=V(FUNITABL)           ADDRESS OF TABLE
         AR    3,9                      ADDRESS OF ENTRY
*OBS*    CLI   0(3),0                   IS UNIT NEW
*OBS*    BE    NEW                      BRANCH IF YES
*OBS*    CLI   0(3),X'FF'               IS UNIT A D-A UNIT?
*OBS*    BE    DAUNIT
         TM    0(3),X'FF'    NEW/FTIO/DAIO ?                     91192
         BO    DAUNIT        USED BY DAIO                        91192
         BZ    NEW           NEVER USED                          91192
         ABEND 102,DUMP                 ABEND IF UNIT IS FOR SEQ
DAUNIT   L     9,0(,3)                  ADDR OF UNIT AREA
         LA    9,0(,9)                  ZERO HIGH ORDER BYTE
         ST    9,IOBDCB                 STORE DCB ADDR IN IOB
         BR    14                       RETURN
*
* CREATE UNIT AREA FOR NEW UNIT
*
NEW      ST    14,SAV14                 SAVE RETURN ADDR
         GETMAIN R,LV=AREALEN           GET STORAGE FOR UNIT AREA
         ST    1,0(,3)                  STORE ADDRESS OF AREA
         MVI   0(3),X'FF'               INDICATE THIS IS DA
         CVD   8,WORK
         OI    WORK+7,X'0F'
         LR    9,1
         ST    9,IOBDCB                 STORE DCB ADDR IN IOB
         MVC   IHADCB(DCBLEN),DCB       SET UP DCB
         UNPK  DCBDDNAM+2(2),WORK+6(2)  UNIT # FOR DDNAME
         MVC   DDNAME,DCBDDNAM          DDNAME FOR DEVTYPE MACRO
         OPEN  ((9),OUTPUT)
         TM    DCBOFLGS,X'10'           DID DCB OPEN OK?
         BO    OPENOK
         ABEND 113,DUMP                 UNSUCCESSFUL  OPEN
*
* GET DEVICE CHARACTERISTICS  AND COMPUTE RPT (RECORDS PER TRACK)
*
OPENOK   EQU   *
         RDJFCB ((9))                   READ JFCB TO GET BLKSIZE
         DEVTYPE DDNAME,INFO,DEVTAB     GET DEVICE DATA
         L     14,DCBDVTBL   GET DEVICE TABLE ADDRESS            85224
         TRKCALC FUNCTN=TRKBAL,DEVTAB=(14),BALANCE=TKBAL,MAXSIZE=YES,  *
               RKDD=TKRKDD,REGSAVE=YES,MF=(E,TRKLIST)  GET MAX SIZE
         STH   0,TRKL        SET MAXIMUM RECORD SIZE             85224
         ST    0,MAXBLK        DITTO                             85224
         ICM   15,3,JFCB+102  DOES USER WISH TO OVERRIDE DSCB ?  85224
         BNZ   BLKOK         YES                                 85224
         ICM   15,3,DCBBLKSI  ELSE WAS BLOCKSIZE STASHED ?       85224
         BNZ   BLKOK         YES; USE IT                         85224
         LR    15,0          ELSE COPY RESULT OF TRACKCALC       85224
BLKOK    STH   15,DCBBUFL
         SR    14,14
         TM    JFCB+87,X'C0'            TEST FOR NEW DATA SET
         BO    NEWDS                    BRANCH IF NEW
         L     14,=X'7FFFFFFF'          SET LSTBLK HIGH IF OLD DS
NEWDS    ST    14,LSTBLK                SET LSTBLK
         LH    14,ITRKS                 TRACKS PER CYL
         STH   14,TRKS
         MVC   TKRKDD+2(2),DCBBUFL  SET BLOCKSIZE                85224
         TRKCALC FUNCTN=TRKCAP,DEVTAB=*,BALANCE=*,RKDD=TKRKDD,         *
               REGSAVE=YES,MF=(E,TRKLIST)  GET BLOCKS PER TRACK  85224
         BXH   15,15,ERROR   SIZE TOO LARGE FOR TRACK            85224
         STH   0,RPT         ELSE SET SIZE                       85224
*
* BUILD EXTENT TABLE
*
         L     8,DCBDEBAD               DEB ADDRESS
         SR    15,15
         IC    15,16(,8)                NUMBER OF EXTENTS
         STH   15,NUM
         LA    8,46(,8)                 POINT TO NUMBER OF TRACKS FIELD
         SR    7,7                      INDEX REG FOR TABLE
LOOP     LH    14,0(,8)                 NUMBER OF TRACKS
         MH    14,RPT                   NUM OF BLOCKS PER TRACK
         ST    14,EBLK(7)               STORE NUM OF BLOCKS THIS EXTENT
         LA    8,16(,8)                 BUMP TO NEXT EXTENT
         LA    7,4(,7)                  BUMP TO NEXT ENTRY IN TABLE
         BCT   15,LOOP
         L     14,SAV14                 RESTORE RETURN ADDR
         BR    14                       RETURN
ERROR    ABEND 101,DUMP                 INVALID BLKSIZE
ERROR1   ABEND 103,DUMP                 SHOULDN'T HAPPEN -- PANIC
         EJECT
DDNAME   DS    CL8                      FOR DEVTYPE SVC
INFO     DS    0F                       5 WDS RETURNED BY DEVTYPE
CODE     DS    F                         * DEVICE TYPE CODE
MAXBLK   DS    F                         * MAXIMUM BLKSIZE
CYLS     DS    H                         * NUMBER OF CYLINDERS
ITRKS    DS    H                         * NUMBER OF TRACKS
TRKL     DS    H                         * TRACK LENGTH
BLKOHD1  DS    C                         * OHD FOR ALL BLKS EXCEPT LAST
BLKOHD2  DS    C                         * OHD FOR LAST BLOCK
BLKOHD3  DS    C                         * OHD TO SUB IF BLKS NOT KYD
TOLSW    DS    C                         * IF BIT7=1 TOL APPLIES
TOL      DS    H                         * TOLERANCE
COUNT    DC    2F'0'                    CCHHRKDD  CURR. REC
ECB      DC    F'0'
WORK     DS    D
WORK1    DS    H
SAV14    DS    F
         SPACE 1                                                 85224
         PRINT NOGEN                                             85224
TRKLIST  TRKCALC MF=L        PATTERN TRKCALC WORK AREA           85224
TKBAL    DC    F'0'          STARTING BALANCE (0)                85224
TKRKDD   DC    X'01000000'   RECORD #/KEYLEN/DATA LENGTH         85224
**************************************  IOB  **************************
IOB      DS    0F
         DC    X'C2000000'
         DC    A(ECB)
         DC    2F'0'
CCWAD    DC    F'0'
IOBDCB   DS    A
         DC    2F'0'
IOBSEEK  DC    2F'0'                    XBBCCHHR  PREV. REC
***********************************************************************
*********************************  WRITE TO REPLACE RECORD  ***********
WCCW1    DS    0D
         CCW   SID,COUNT,CC,5
         CCW   TIC,*-8,0,0
DATADW1  CCW   WRITE,0,0,0
*********************************  WRITE SKELETON RECORD  *************
WCCW2    DS    0D
         CCW   SID,IOBSEEK+3,CC,5
         CCW   TIC,*-8,0,0
         CCW   WRITECKD,COUNT,SLI,8
*********************************  WRITE NEW DATA RECORD  *************
WCCW3    DS    0D
         CCW   SID,IOBSEEK+3,CC,5
         CCW   TIC,*-8,0,0
         CCW   WRITECKD,COUNT,DC,8
DATADW3  CCW   0,0,0,0
*********************************  READ A RECORD  *********************
RCCW     DS    0D
         CCW   SID,COUNT,CC,5
         CCW   TIC,*-8,0,0
DATADR   CCW   READ,0,0,0
***********************************************************************
EXLST    DS    0F
         DC    X'87'
         DC    AL3(JFCB)
JFCB     DS    176C
DCB      DCB   DDNAME=FTXXF001,MACRF=E,DSORG=DA,IOBAD=IOB,EXLST=EXLST
DCBLEN   EQU   *-DCB
FUNITABL CSECT
TABLE    DC    (NUMENTS)F'0'            UNIT TABLE
FERMSG   CSECT
IBUF     DS    F
ILEN     DS    F
IMES     DS    20F
IIOB     DS    4F
         DCBD  DSORG=DA,DEVD=DA
         ORG   IHADCB+DCBLEN
EBLK     DS    16F                      EXTENT TABLE
LSTBLK   DS    F                        LAST BLOCK WRITTEN
TRKS     DS    H
RPT      DS    H                        BLOCKS PER TRACK
NUM      DS    H                        NUMBER OF EXTENTS
AREALEN  EQU   *-IHADCB
         END
