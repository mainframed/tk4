This file (860) contains (mostly) assembler programs without JCL.
File 861 contains most macros required for proper assembly.
File 862 contains additional files with procedures, parmlib data,
  and other supporting material. It also contains auxiliary macros,
  as PVTMACS, once available from IBM on optional source material
  tapes. Some macros not available have been concocted from dumps or
  IBM documentation.

The programs all ran in production at some point, but some were
used under OS/360 only, and some only under MVS/ESA and later. A few
members came straight from the CBT for me to look at, but haven't been
used yet (e.g., the HASPX exits, DSAT9).

Before assembling anything, look at members OPTIONGB and SYSPARM in
the macro file. If you have any of the SVCs installed, set their SVC
numbers correctly (OS/360, pre-XA only - not used in later systems).
The exception is @SERVICE, described later. Note that the options
have provision for ESA and later systems, but only a few members will
function correctly. Note that large 3390s were never used nor tested.
If you wish to start from scratch and assemble/link everything, run
the SUBnnnnn modules first, then the @nnnnnnn modules (only one of the
@SRVJnnn module, matching your JES2 release; this module needs the
alias @SRVJES2). Then do individual programs as desired.

Some modules will not assemble because the macros they reference
(USERCVT, USERVOLT, A$GDA, ...) are parts of a proprietary security
and accounting system. However, the code may still be useful as
groundwork for your own adaptations.

For MVS, modules are assembled with the XF assembler, using SYSLIBs
as follows:

    //SYSLIB  DD  DISP=SHR,DSN=SYS1.MACLIB,DCB=BLKSIZE=32720
    //        DD  DISP=SHR,DSN=SYS1.AMODGEN
    //        DD  DISP=SHR,DSN=SYS1.HASPSRC (some modules)
    //        DD  DISP=SHR,DSN= David Cole's macros (XF version)
    //        DD  other specific libraries, e.g., CICS, ENDEVOR
    //        DD  DISP=SHR,DSN= restored file 861 macros
    //        DD  DISP=SHR,DSN= restored file 862 auxiliary PVT macros

In our MVT system, all re-entrant @-prefixed modules were in LPA,
reducing region requirements. This group of modules provides dynamic
subroutines, controlled by module @SERVICE and related SERVnnnn macros.
In MVS and later, the @ routines may be in LPA, in LPALIB, or in an
APF authorized library; for convenience, I have them in a separate
library, SYS1.ESPLIB, that is APF authorized and in linklist.
When @SERVICE is assembled after the &SVC@SVC global is set (I use
255, but any type 3 or 4 SVC slot will work), an extra entry point is
assembled in, and the module must be placed in LPA (or SVCLIB for MVT).
This SVC entry was used prior to the APF facility to change PSW key,
PSW mode, and JSCB authorization. With APF, the SVC facility is not
required. If you use @SERVICE in a system with RACF, you might want to
protect critical functions with a local resource and appropriate checks.
The JES related functions in @SERVICE have been externalized in modules
named for the supported JES2 version, named with the version number as
@SRVJ520 (OS/390), etc. through @SRVJ041 (MVS).

The material spans forty-odd years of work. Some earlier modules are
pretty crude, and I've been trying to retrofit newer facilities to the
old code. Also some older code was changed to run under OS/390, but
then changed back to run under MVS 3.8j (Volker Bandke's turnkey-MVS).
Some modules were never corrected for Y2K, and use two digit years.
Prior to running anything live, test it on a system that's been backed
up. Some modules are safe unless they have an enabling PARM, others
use a TEST or DEBUG PARM to prevent destructive actions. All have
appropriate documentation to describe the PARM field.
Modules beginning with BSP require SYS1.UMODMAC from the turnkey system.
Modules with CICS requires CICS macros; those with END require the
ENDEVOR mapping macros.

Modules using local facilities have a common structure:
    COPY OPTIONGB
    SYSPARM LIST=YES
program PGMHEAD options,BASE=R12,PARM=R1 (many options)
    SERVINIT ,     locates @SERVICE and initializes SVC call (if used)
    SERVLOAD modules...

    PRTOPEN prtwork,DEV=n  define one to eight print/punch files
    print function: PRTF, PRTV, PRTL, PRTDATA, PRTLIST...
    INPOPEN inpwork,DEV=n  define one to eight input files
    INPGET   get a record, also INPKEEP to repeat record

    MVICC code[,reason]  set a return and optional reason code
    OICC  code           variation - ORs code

pgmexit SERVTERM ,       closes and ends all @SERVICE related functions
        L     R9,RETCODE
        PGMEXIT RC=(R9)  return code only
 (or)   PGMEXIT COPYRET=(RETCODE,12)   returns R15,R0,R1

SYSPRINT PRTWORK SYSPRINT,SYSTSPRT[,TITLE=n...]  define printer options
SYSIN    INPWORK SYSIN,EDIT=128,EODAD=           define input options

SAVE    DSECT ,          dynamic storage, name set in PGMHEAD
DB      DS    2D         frequent work area
        SERVDEFS ,   defines addresses and work space for @ functions
SAVEEND EQU   *          end of dynamic storage

The print facility using @PRINTER and PRTn macros is relatively slow,
but fairly powerful (PRTF prints fixed length lines, PRTV prints V-form
lines, PRTL 'literal text' prints a literal string, and PRTLIST builds
one or more lines based on a description of FD macros; PRTDATA provides
some FD capabilities on a single macro). Faster printing may be had
using the #PRT macro and the matching subroutine SUBPRT.
Subroutines (mostly) begin with SUB, and duplicate some functions
available in @SERVICE. Most were written to specific requests, so are
not exactly general, and have some duplication of function.

Under MVT and MVS, IBM provided many exits that had to be linked with
an IBM module. This was slow and error prone, so we had a general exit
hook, linked only once. The real exit was renamed LEXnnnnn, loaded at
IPL time, and its address stored in a USERCVT based location. This
allowed testing and replacing modules without relinking IBM code.
As previously mentioned, these had dependencies on local accounting
macros, not distributed, and are provided for reference.

For modules that were running under OS/390 or later, the change back to
MVS was made by providing roughly compatible macros; most of these have
names beginning with MVS, and most invoke subroutines (e.g., DESERV is
replaced by SUBDSERV and mapping macro MVSSMDE).

Modules beginning with ZZ are "inner" modules, called either by
ISPF or CLISTs.

Debugging information:
Originally I used a DBT macro, with subroutine DEBTRACE, to print
PSW, register, and variable information. To retrofit this to MVS, I
added a DBO macro, and routine DEBTROLD. Both are deprecated, and have
been replaced by a #TRAP macro, and subroutine @SPIEDER (loaded with
 BANDAID SPIE prior to first #TRAP). All produce output to DD name
DEBPRINT. You may also trace instruction flow with the #TRACE and #TRC
macros; start with #TRC INIT in programs using PGMHEAD/SERVDEFS, and
#TRACE in others, #TRC KILL to terminate tracing, and #TRC ON×OFF for
segmented tracing. Output is to DD name SYSTRACE; the program is
controlled by control cards on SYSTROPT DD (typical might be TRACE pgm);
other options are described in the PGMTRACE comments. If you are using
HLASM or X390, test programs may be assembled with the ADATA option,
that output provided in a SYSADATA DD, and the listing will include
source information. PGMTRACE is a major redesign of TRACE390, and is
still under development (I added code to support MODESET to and from
key zero, but it gets turned off; also code added for a CSECT control
card, to show displacements relative to the CSECT name rather than the
module, but not debugged yet).

In the macro library, entries beginning with MAC are inner macros that
provide easier processing of macro operands used on MACPARM. Entries
beginning with MAP (except MAPPINGS) map various DSECTs and control
structures. INP map @INPREAD related entries, PRT/PUN the @PRINTER ones,
and FD (output) field definitions for print and screen output.

For TSO support, PARMLOAD returns the address and length of the parm
operand (may be null, may have leading spaces), regardless of whether
the program was invoked as a program or as a command processor. For
conversion to batch processing, TPUT macros (simple EDIT, not control
or fullscreen) may be replaced by #TPUT to write output to SYSTSPRT
with PUTLINE.

Suggestions and error reports may be sent to Gerhard Postpischil
    gerhard (at) postpischil (dot) com

I'd like to thank Shmuel (Seymour J.) Metz who has been providing
support and criticism since 1968, and my colleagues Dick Oxley and
Michael Radzymski, who contributed some of their effort.

