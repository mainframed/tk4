FTIO     TITLE 'FORTRAN I/O PACKAGE'
         PRINT NOGEN
***********************************************************************
*                                                                     *
*  DEVELOPED BY : ALAN R. THOMPSON                                    *
*                 IBM CORPORATION                                     *
*                 FEDERAL SYSTEMS DIVISION                            *
*                 GAITHERSBURG, MARYLAND                              *
*                                                                     *
*  CONTRACT     : SSACPS NAS 5-10022    1966-1971                     *
*                                                                     *
***********************************************************************
*  THIS SET OF ROUTINES WAS WRITTEN TO CUT DOWN ON CPU TIME           *
*  REQUIRED TO DO I/O FROM A FORTRAN PROGRAM.                         *
*                                                                     *
*  IT CAN BE USED IF THE FOLLOWING CONDITIONS ARE SATISFIED:          *
*                                                                     *
*              1) NON FORMATTED I/0 IS WANTED                         *
*              2) ALL DATA FOR A RECORD IS CONTIGUOUS IN CORE         *
*              3) BACKSPACING IS NOT REQUIRED                         *
*                                                                     *
*  QSAM LOCATE MODE IS USED FOR ALL I/O OPERATIONS IN THESE ROUTINES. *
*                                                                     *
*                                                                     *
*                                                                     *
*  ENTRY POINTS:                                                      *
*                                                                     *
*        FREAD(A,N,L,&END,&ERR)    READS A RECORD OF LENGTH L FROM    *
*                                  LOGICAL UNIT N INTO CONTIGUOUS CORE*
*                                  LOCATIONS STARTING AT A.  TRANSFER *
*                                  TO STATEMENT 'END' ON EOF, AND     *
*                                  'ERR' ON I/O ERROR.                *
*                                                                     *
*        FREADB(A,N,L,&END,&ERR)   SAME AS FREAD EXCEPT RECORD IS     *
*                                  READ BACKWARDS.                    *
*                                                                     *
*        FWRITE(A,N,L)             WRITES A RECORD OF LENGTH L ONTO   *
*                                  LOGICAL UNIT N FROM CONTIGUOUS CORE*
*                                  LOCATIONS STARTING AT A.           *
*                                                                     *
*        REWIND(N)                 REWINDS LOGICAL UNIT N.            *
*                                                                     *
*        UNLOAD(N)                 DISMOUNTS LOGICAL UNIT N AND FREES *
*                                  WORK SPACE.                        *
*                                                                     *
*                                                                     *
*                                                                     *
*        POSN(IO,N,NFILE)          POSITIONS LOGICAL UNIT N TO FILE   *
*                                  NFILE. IO = 1; FOR INPUT           *
*                                         IO = 2; FOR OUTPUT          *
*                                         IO = 3; FOR RDBACK          *
*                                                                     *
*        LEAVE(N)                  CLOSES DCB FOR LOGICAL UNIT N WITH *
*                                  THE LEAVE OPTION SPECIFIED.        *
*                                                                     *
*        MOUNT(IO,N,DTAPE,NFILE)   MOUNTS TAPE SPECIFIED IN DTAPE ON  *
*                                  LOGICAL UNIT N. POSITIONS UNIT TO  *
*                                  FILE NFILE IF 4TH PARM IS SPECIFIED*
*                                       IO = 1  FOR INPUT             *
*                                       IO = 2  FOR OUTPUT            *
*                                       IO = 3  FOR RDBACK            *
*                                                                     *
*        MEMBER(IO,N,DNAME)        POSITIONS TO SPECIFIED MEMBER IN   *
*                                  A PARTITIONED DATA SET.            *
*                                       IO = 1  FOR INPUT             *
*                                       IO = 2  FOR OUTPUT            *
*                                       IO = 3  FOR RDBACK            *
*                                                                     *
***************************  ABEND DUMPS GIVEN  ***********************
*                                                                     *
*        USER CODE = 201     UNIT NUMBER NEGATIVE OR GREATER THAN 50  *
*                                                                     *
*        USER CODE = 210     ILLEGAL FIRST PARAMETER FOR A CALL       *
*                            TO POSN MOUNT OR MEMBER.                 *
*                                                                     *
*        USER CODE = 202     UNIT BEING USED FOR DIRECT ACCESS        *
*                                                                     *
*        USER CODE = 220     INVALID RECORD LENGTH                    *
*                                                                     *
*                                                                     *
***********************  GENERAL REGISTER USAGE  **********************
*                                                                     *
*        GR 1 =                                                       *
*        GR 2 =                                                       *
*        GR 3 = POINTER TO TABLE ENTRY FOR THIS UNIT                  *
*        GR 4 = AREA POINTER                                          *
*        GR 5 = LOGICAL UNIT NUMBER AND TABLE INDEX                   *
*        GR 6 = LENGTH POINTER                                        *
*        GR 7 = DCB ADDRESS                                           *
*        GR 8 = LRECL                                                 *
*        GR 9 =                                                       *
*        GR 10= USED FOR INTERNAL LINKING                             *
*        GR 11= LOGICAL UNIT NUMBER                                   *
*        GR 12= BASE REGISTER                                         *
*        GR 13= SAVE AREA POINTER                                     *
*        GR 14=                                                       *
*        GR 15=                                                       *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
************************  UNIT TABLE FORMAT  **************************
*                                                                     *
*                                                                     *
*             BYTE 1          BYTES 2-4                               *
*          **************************************************         *
*          *           *                                    *         *
*  WORD  1 * CODE BYTE *    FIRST DCB ADDRESS               *         *
*          *           *                                    *         *
*          **************************************************         *
*          *           *                                    *         *
*  WORD  2 * CODE BYTE *    SECOND DCB ADDRESS              *         *
*          *           *                                    *         *
*          **************************************************         *
*          *           *                                    *         *
*          .           .                                    .         *
*          .           .                                    .         *
*          .           .                                    .         *
*          *           *                                    *         *
*          **************************************************         *
*          *           *                                    *         *
*  WORD 50 * CODE BYTE *    50TH  DCB  ADDRESS              *         *
*          *           *                                    *         *
*          **************************************************         *
*                                                                     *
*                                                                     *
*                                                                     *
*           THE CODE BYTE IS SET AS FOLLOWS :                         *
*                                                                     *
*                  0- STORAGE FOR DCB NOT ACQUIRED                    *
*                                                                     *
*                  1- DCB IS OPEN FOR INPUT                           *
*                                                                     *
*                  2- DCB IS OPEN FOR OUTPUT                          *
*                                                                     *
*                  3- DCB IS OPEN  FOR READING BACKWARDS              *
*                                                                     *
*                  4- DCB IS CLOSED                                   *
*                                                                     *
*                                                                     *
********************** CONTROL BLOCK ITEMS USED ***********************
*                                                                     *
*              DCB +82  =  LRECL                                      *
*              DCB +62  =  BLKSIZE                                    *
*              DCB +36  =  RECFM   (BITS 0 AND 1) 10=F,01=V,11=U      *
*              JFCB+44  =  MEMBER NAME (FOR PDS PROCESSING)           *
*              JFCB+68  =  FILE SEQUENCE NUMBER                       *
*              JFCB+117 =  NUMBER OF VOLUME SERIAL NUMBERS            *
*              JFCB+118 =  FIRST VOLUME SERIAL NUMBER                 *
*                                                                     *
***********************************************************************
         EJECT
         MACRO
&ENTRY   INIT  &FORT
*      INIT, 14 JUL 70, ALAN THOMPSON.
         GBLC  &LABL,&LAB
         AIF   ('&ENTRY' NE '').LABOK
         AIF   ('&LABL' NE '').ERR
&LAB     SETC  '&SYSECT'
         SAVE  (2,12),T,&LAB
         AGO   .NOLAB
.ERR     MNOTE 'BLANK LABEL FIELD ILLEGAL EXCEPT ON FIRST INIT'
         MEXIT
.LABOK   ENTRY &ENTRY
&ENTRY   SAVE  (2,12),T,*
&LAB     SETC  '&ENTRY'
.NOLAB   AIF   ('&LABL' NE '').NFST
         LR    12,15
         USING &LAB,12
         CNOP  0,4
         BAL   4,I&SYSNDX
SVAR     DS    18F
I&SYSNDX ST    13,SVAR+4
.STD     ST    4,8(,13)
         AIF   ('&FORT' NE 'FORT').NFORT
         L     15,=V(IBCOM#)
         BAL   14,64(15)                INITIALIZE IBCOM
         AGO   .CONT
.NFORT   AIF   ('&FORT' EQ '').CONT
         MNOTE 'ONLY LEGAL OPERAND FOR INIT IS : FORT'
.CONT    LR    13,4
         AIF   ('&LABL' NE '').END
&LABL    SETC  '&LAB'
.END     MEXIT
.NFST    USING &LAB,15
         L     12,=A(&LABL)
         DROP  15
         LA    4,SVAR
         ST    13,SVAR+4
         AGO   .STD
         MEND
         MACRO
&HERE    MOVE  &LEN,&TO,&FROM
*      MOVE, 14 JUL 70, ALAN THOMPSON.
         LCLC  &T1,&T2,&T3
         AGO   .OS360                                            91192
         AIF   ('&FROM'(1,1) EQ '(').FRR                         91192
&HERE    LA    0,&FROM(1)    GET SOURCE                          91192
         AGO   .FRDON                                            91192
.FRR     ANOP  ,                                                 91192
&HERE    LR    0,&FROM(1)    GET SOURCE                          91192
.FRDON   AIF   ('&TO'(1,1) EQ '(').TOR                           91192
         LA    14,&TO(1)     GET DESTINATION                     91192
         AGO   .TODON                                            91192
.TOR     LR    14,&TO(1)     GET DESTINATION                     91192
.TODON   AIF   ('&LEN'(1,1) EQ '(').LNR                          91192
         LA    15,&LEN(1)    LOAD LENGTH                         91192
         AGO   .LNDON                                            91192
.LNR     LR    15,&LEN(1)    LOAD LENGTH                         91192
.LNDON   LR    1,15          COPY LENGTH                         91192
         MVCL  14,0          COPY DATA                           91192
         MEXIT ,                                                 91192
.OS360   ANOP  ,                                                GP12042
&HERE    LA    14,255              MAX LENGTH FOR MVC INSTRUCTION
&T2      SETC  'A'
&T3      SETC  'A'
         AIF   ('&LEN'(1,1) NE '(').FIRST
&T1      SETC  'R'
         AIF   (&LEN(1) EQ 0).SKIP1
         AIF   (&LEN(1) LT 1 OR &LEN(1) GT 12).ERROR1
.FIRST   L&T1  0,&LEN(1)           LOAD REG 0 WITH LENGTH
.SKIP1   AIF   ('&TO'(1,1) NE '(').SECOND
&T2      SETC  'R'
         AIF   (&TO(1) LT 1 OR &TO(1) GT 12).ERROR2
.SECOND  L&T2  15,&TO(1)           LOAD REG 15 WITH TO ADDRESS
.SKIP2   AIF   ('&FROM'(1,1) NE '(').THIRD
&T3      SETC  'R'
         AIF   (&FROM(1) EQ 1).SKIP3
         AIF   (&FROM(1) LT 1 OR &FROM(1) GT 12).ERROR3
.THIRD   L&T3  1,&FROM(1)          LOAD REG 1 WITH FROM ADDRESS
.SKIP3   ANOP
         S     0,=F'256'           NO. OF BYTES REMAINING TO BE MOVED
         BNM   *+6                 IF .GE. 256,BRANCH TO EX INSTRUCTION
         AR    14,0                SET REG 14 TO REMAINING BYTES
         EX    14,*+22             EXECUTE THE MVC INSTRUCTION
         LA    1,1(14,1)           INCREMENT THE FROM ADDRESS
         LA    15,1(14,15)         INCREMENT THE TO ADDRESS
         LTR   0,0                 ARE THERE ANY MORE BYTES TO BE MOVED
         BP    *-24                YES.  BRANCH TO  S    0,=F'256'
         B     *+10                NO.  BRANCH AROUND MVC INSTRUCTION
         MVC   0(1,15),0(1)
         MEXIT
.ERROR1  MNOTE 1,'***IMPROPER REGISTER SPECIFIED FOR 1ST OPERAND***'
         AGO   .FIRST
.ERROR2  MNOTE 1,'***IMPROPER REGISTER SPECIFIED FOR 2ND OPERAND***'
         AGO   .SECOND
.ERROR3  MNOTE 1,'***IMPROPER REGISTER SPECIFIED FOR 3RD OPERAND***'
         AGO   .THIRD
         MEND
         MACRO
&LAB     RET   &CODE
*      RET, 14 JUL 70, ALAN THOMPSON.
&LAB     L     13,SVAR+4
         AIF   ('&CODE' EQ 'F').FUNC
         AIF   ('&CODE' NE '').CODE
         RETURN (14,12),T
         MEXIT
.CODE    RETURN (14,12),T,RC=&CODE
         MEXIT
.FUNC    ANOP
         LM    14,15,12(13)             RESTORE 14 AND 15
         LM    1,12,24(13)              RESTORE 1 THROUGH 12
         MVI   12(13),X'FF'             SET RETURN INDICATOR
         BR    14
         MEND
         EJECT
***********************************************************************
****************************  READ  RECORD  ***************************
FREAD    START 0
NUMENTS  EQU   50             MAXIMUM NUMBER OF ENTRIES IN UNIT TABLE
         INIT
         LM    4,6,0(1)                 LOAD 3 PARAMETER POINTERS
         SR    9,9                      INITIALIZE LENGTH COUNTER
         BAL   10,UNCK                  SETS GR3+7
         CLI   0(3),1                   IS DCB OPEN FOR INPUT?
         BE    READ                     BRANCH IF YES
*OBS*    CLI   0(3),0                   HAS DCB BEEN CREATED?
*OBS*    BNE   RDCBIN                   BRANCH IF YES
         BH    RDCBIN                   BRANCH IF YES            91192
         BAL   10,GETDCB                CREATE DCB
RDCBIN   CLI   0(3),4                   IS DCB CLOSED?
         BE    ROPEN                    BRANCH IF YES
         CLOSE ((7),REREAD),MF=(E,OCLIST)  CLOSE DCB
ROPEN    OPEN  ((7),INPUT),MF=(E,OCLIST)
         MVI   0(3),1
READ     EQU   *
         ST    4,WORK+4
NEXT     GET   (7)                      GET NEXT RECORD
         TM    36(7),X'80'              TEST FOR VARIABLE RECORDS
         BO    NOTV                     BRANCH IF NOT
         MVC   WORK(3),0(1)             MOVE TO HALF WORD BOUNDARY
         LH    8,WORK                   LOAD LRECL
         SH    8,=H'4'                  COMPUTE LENGTH OF DATA
         BNP   BADLEN                   BAD LEN IF .LE. 0
         CH    8,62(,7)                 COMPARE LEN TO BLKSIZE
         BH    BADLEN                   BAD LEN IF .GT. BLKSIZE
         AR    9,8                      ADD THIS SEG LEN TO TOTAL
         LA    1,4(,1)                  POINT 1 TO BEGINNING OF DATA
         TM    36(7),X'08'              SPANNED RECORDS ?
         BZ    STLRECL                  BRANCH IF NOT
         TM    WORK+2,X'01'
         BZ    STLRECL                  BRANCH IF COMPLETE OR LAST SEG
*
* MOVE THIS SEGMENT AND RETURN FOR NEXT
*
         TM    WORK+2,X'02'             IS THIS FIRST SEG ?
         BO    NOTFST                   BRANCH IF NO
         L     4,WORK+4                 RESET TO START OF USERS AREA
         LR    9,8                      RESET BYTE COUNT
NOTFST   MOVE  (8),(4),(1)              MOVE THIS SEGMENT
         AR    4,8                      INCREMENT PTR TO USERS AREA
         B     NEXT                     GET NEXT SEGMENT
NOTV     LH    8,82(,7)                 GET LRECL FROM DCB
         LR    9,8                      SET TOTAL LEN TO THIS SEG LEN
STLRECL  ST    9,0(,6)                  STORE IN RETURN PARAMETER
         CLI   LOCSW,0
         BE    MOVE
         ST    1,0(,4)
         B     LOC
MOVE     MOVE  (8),(4),(1)              MOVE DATA TO USERS AREA
LOC      CLI   ERRSW,0
         BE    ROK
         MVI   ERRSW,0
         RET   8
ROK      RET   0
         EJECT
***********************************************************************
****************** READ RECORD IN BACKWARDS MODE **********************
FREADB   INIT
         LM    4,6,0(1)                 LOAD 3 PARAMETER POINTERS
         BAL   10,UNCK                  SETS GR3+7
         CLI   0(3),3                   IS DCB OPEN FOR RDBACK?
         BE    READ                     GO READ IF YES
         CLI   0(3),0                   HAS DCB BEEN CREATED?
         BNE   RBDCBIN                  BRANCH IF YES
         BAL   10,GETDCB                CREATE DCB
RBDCBIN  CLI   0(3),4                   DCB CLOSED?
         BE    RBOPEN                   BRANCH IF YES
         CLOSE ((7),LEAVE),MF=(E,OCLIST)  CLOSE DCB
RBOPEN   OPEN  ((7),RDBACK),MF=(E,OCLIST)  OPEN DCB FOR RDBACK
         MVI   0(3),3                   SET CODE
         B     READ                     GO AND READ
         EJECT
***********************************************************************
***************************  WRITE  RECORD  ***************************
FWRITE   INIT
         LM    4,6,0(1)
         BAL   10,UNCK
         CLI   LOCSW,0
         BE    MOVV
         L     4,0(,4)
MOVV     EQU   *
         CLI   0(3),2
         BE    WRITE
         CLI   0(3),0
         BNE   WDCBIN
         BAL   10,GETDCB
WDCBIN   CLI   0(3),4
         BE    WOPEN
         CLOSE ((7),LEAVE),MF=(E,OCLIST)  CLOSE DCB
WOPEN    OPEN  ((7),OUTPUT),MF=(E,OCLIST)
         MVI   0(3),2
WRITE    TM    36(7),X'80'              TEST FOR VARIABLE RECORDS
         BO    NOTVV                    BRANCH IF NOT
*
* VARIABLE LENGTH RECORDS
*
         MVI   CONT,0                   INITIALIZE CONTROL WORD
*OLD*    L     8,0(,6)                  LOAD DATA LENGTH PASSED
*OLD*    LTR   8,8
*OLD*    BZ    BADLEN                   ERROR IF LENGTH PASSED = 0
         ICM   8,15,0(6)     LOAD AND TEST PASSED LENGTH         91192
         BNP   BADLEN        ERROR IF NOT POSITIVE               91192
         LA    9,4(,8)                  ADD 4 TO INCLUDE CONTROL WORD
         STH   9,82(,7)                 STORE IN DCBLRECL
         PUT   (7)                      GET NEXT BUFFER
*
* CHECK FOR SPANNED RECORDS
*
         TM    36(7),X'08'              SPANNED ?
         BZ    MV                       BRANCH IF NO
         CR    0,9                      IS BUFFER RETURNED BIG ENOUGH
         BNL   MV                       BRANCH IF YES
*
* RECORD MUST BE SEGMENTED
*
         MVI   CONT,X'01'               INITIALIZE CONT TO IND 1ST SEG
AGN      STH   0,WORK
         MVC   0(2,1),WORK              MOVE IN SEG LENGTH
         MVC   2(2,1),CONT              SEGMENT CONTROL CHAR
         LA    10,4(,1)                 DATA PORTION OF SEG
         LR    9,0
         SH    9,=H'4'                  LENGTH OF DATA TO MOVE
         MOVE  (9),(10),(4)             MOVE DATA
         AR    4,9                      INCREMENT PTR TO USERS AREA
         SR    8,9                      DECREMENT DATA LEFT TO MOVE
         OI    CONT,X'02'               INDICATE MIDDLE SEGMENT
         LA    9,4(,8)
         STH   9,82(,7)                 LENGTH OF BUFFER NEEDED
         PUT   (7)                      BET NEXT BUFFER
         CR    0,9                      WILL BUF HOLD REMAINING DATA
         BL    AGN                      BRANCH IF NO
         MVI   CONT,X'02'               INDICATE LAST SEG
MV       MVC   0(2,1),82(7)             MOVE  LRECL TO DATA RECORD
         MVC   2(2,1),CONT              ZERO REMAINDER OF CONTROL WD
         LA    10,4(,1)                 BEGINNING OF DATA IN RECORD
         MOVE  (8),(10),(4)             MOVE DATA TO BUFFER
         RET   0
*
* U OR F RECORDS
*
NOTVV    TM    36(7),X'40'              TEST FOR FIXED
         BZ    FIXED                    BRANCH IF FIXED
*OLD*    L     8,0(,6)                  LOAD LRECL PASSED
*OLD*    LTR   8,8
         ICM   8,15,0(6)     LOAD PASSED LRECL                   91192
         BNP   BADLEN                   ERROR IF LENGTH PASSED .LE. 0
         STH   8,82(,7)                 STORE IN DCBLRECL
FIXED    PUT   (7)                      GET NEXT BUFFER
         LH    8,82(,7)                 GET LENGTH OF RECORD
         LR    10,1
         MOVE  (8),(10),(4)             MOVE DATA TO BUFFER
         RET   0
         EJECT
***********************************************************************
****************************  REWIND UNIT   ***************************
REWIND   INIT
         L     5,0(,1)
         BAL   10,UNCK
         TM    0(3),3                   TEST CODE BYTE
         BZ    CLOSED                   BRANCH IF 0 OR 4 (DCB NOT OPEN)
         CLOSE ((7),REREAD),MF=(E,OCLIST)
         FREEPOOL (7)
         MVI   0(3),4                   SET CODE TO INDICATE CLOSED
CLOSED   RET
         EJECT
***********************************************************************
*********************** CLOSE LEAVE ***********************************
LEAVE    INIT
         L     5,0(,1)                  POINTER TO UNIT NUMBER
         BAL   10,UNCK                  SETS GR3 AND GR7
         TM    0(3),3                   TEST CODE
         BZ    CLOSEDD                  BRANCH IF 0 OR 4 (DCB NOT OPEN)
         CLOSE ((7),LEAVE),MF=(E,OCLIST)  CLOSE DCB
         FREEPOOL (7)
         MVI   0(3),4
CLOSEDD  RET
         EJECT
***********************************************************************
****************************  UNLOAD UNIT   ***************************
UNLOAD   INIT
         L     5,0(,1)
         BAL   10,UNCK
         CLI   0(3),0
         BE    RET
         CLI   0(3),4                   IS DCB CLOSED?
         BNE   CLOSE
         OPEN  ((7),INPUT),MF=(E,OCLIST)
CLOSE    CLOSE ((7)),MF=(E,OCLIST)
         FREEPOOL (7)                   FREE BUFFER POOL
         FREEMAIN E,A=(3),LV=96
         MVI   0(3),0
RET      RET
         EJECT
***********************************************************************
*********************  POSITION TO REQUESTED FILE  ********************
POSN     INIT
         LM    4,6,0(1)
         BAL   10,UNCK
         CLI   0(3),0
         BNE   DCBIN
         BAL   10,GETDCB
DCBIN    CLI   0(3),4                   IS DCB CLOSED?
         BE    CLSD
         CLOSE ((7),LEAVE),MF=(E,OCLIST)
CLSD     RDJFCB ((7)),MF=(E,OCLIST)
         L     6,0(,6)
         STH   6,JFCB+68
CHECK    CLI   3(4),1
         BE    OPENIN
         CLI   3(4),2
         BE    OUTP
         CLI   3(4),3
         BE    OPENRB
         ABEND 210,DUMP
OPENIN   OPEN  ((7)),TYPE=J,MF=(E,OCLIST)
         MVI   0(3),1
         B     OVER
OUTP     OPEN  ((7),OUTPUT),TYPE=J,MF=(E,OCLIST)
         MVI   0(3),2
         B     OVER
OPENRB   OPEN  ((7),RDBACK),TYPE=J,MF=(E,OCLIST)
         MVI   0(3),3
OVER     RET   0
         EJECT
***********************************************************************
*********************  MOUNT REQUESTED TAPE  **************************
MOUNT    INIT
         LM    4,6,0(1)                 LOAD PARAMETER LIST
         LR    9,1                      SAVE PARAMETER POINTER
         BAL   10,UNCK                  CHECK UNIT NUMBER PASSED
         CLI   0(3),0                   IS DCB CREATED?
         BNE   DCBINC                   BRANCH IF YES
         BAL   10,GETDCB                CREATE DCB
DCBINC   CLI   0(3),4                   IS DCB CLOSED?
         BE    CLOSEDDD
         CLOSE ((7)),MF=(E,OCLIST)      CLOSE DCB
CLOSEDDD RDJFCB ((7)),MF=(E,OCLIST)     READ JFCB
         MVI   JFCB+117,1               SET # OF VOLS TO 1
         MVC   JFCB+118(6),0(6)         MOVE TAPE LABEL TO JFCB
         TM    8(9),X'80'               WAS FILE NUMBER SPECIFIED?
         BO    CHECK                    BRANCH IF NO (ONLY 3 PARAMS)
         L     9,12(,9)
         L     9,0(,9)
         STH   9,JFCB+68                STORE FILE SEQUENCE NUMBER
         B     CHECK                    GO OPEN AND RETURN
         EJECT
***********************************************************************
*********************  POSITION TO REQUESTED MEMBER  ******************
MEMBER   INIT
         LM    4,6,0(1)                 LOAD PARAMETER LIST
         BAL   10,UNCK                  CHECK UNIT NUMBER PASSED
         CLI   0(3),0                   IS DCB CREATED?
         BNE   DCBIN1                   BRANCH IF YES
         BAL   10,GETDCB                CREATE DCB
DCBIN1   CLI   0(3),4                   IS DCB CLOSED?
         BE    CLOSEDD1
         CLOSE ((7)),MF=(E,OCLIST)      CLOSE DCB
CLOSEDD1 RDJFCB ((7)),MF=(E,OCLIST)     READ JFCB
         MVC   JFCB+44(8),0(6)          MOVE MEMBER NAME TO JFCB
         B     CHECK                    GO OPEN AND RETURN
         EJECT
***********************************************************************
****************** SET DEFAULT DCB PARAMETERS *************************
EXIT     CLC   62(2,1),=X'0000'         HAS BLKSIZE BEEN SUPPLIED?
         BNE   BLKOK                    BRANCH IF YES
         MVC   62(2,1),=H'32000'        SET DEFAULT BLKSIZE=32000
BLKOK    TM    36(1),X'C0'              HAS RECFM BEEN SUPPLIED?
         BNZ   RECFMOK                  BRANCH IF YES
         OI    36(1),X'C0'              SET DEFAULT RECFM=U
RECFMOK  BR    14                       RETURN
         EJECT
***********************************************************************
*********************   CHECK UNIT NUMBER PASSED   ********************
*********************  AND LOAD POINTERS TO TABLE  ********************
UNCK     MVC   LOCSW,0(5)
*OBS*    ST    6,R6
*FEAT*   LR    11,5
         L     5,0(,5)
         LPR   5,5
         ST    5,ORGUN
*FEAT*   C     5,=F'50'
*FEAT*   BNH   STFT
*FEAT*   S     5,=F'50'
*FEAT*   MVC   DCB+40(8),4(11)
*FEAT*   B     RESET6
STFT     MVC   DCB+40(8),FTDDNAM
*OBS*6   L     6,R6
RESET6   LTR   11,5
         BNP   BAD
         C     5,=A(NUMENTS)            IS UNIT NUMBER > MAXIMUM?
         BNH   GOOD
BAD      ABEND 201,DUMP
GOOD     BCTR  5,0
         SLL   5,2                      CREATE INDEX TO UNIT ENTRY
         L     3,=V(FUNITABL)
         AR    3,5
         L     7,0(,3)
         CLI   0(3),X'FF'               IS UNIT OPEN FOR DA ?
         BCR   7,10                     RETURN IF NO
         ABEND 202,DUMP                 ILLEGAL USE OF DA UNIT
         EJECT
***********************************************************************
**************************  GET AREA FOR DCB  *************************
**************************   AND SET IT UP    *************************
GETDCB   STM   0,4,FWORK
         SR    2,2
         L     1,FD
         CR    2,1
         BNE   DNRA
         LH    4,ADDIT
         S     4,=F'4105'
         STH   4,ADDIT
         LA    1,2
ADDIT    AR    1,4
         ST    1,BIN+4
         CVB   1,BIN
         ST    1,FD
         LH    4,ADDIT
         A     4,=F'4105'
         STH   4,ADDIT
DNRA     C     1,FL
         BL    CONTIN
         LM    0,4,FWORK
         RET   0
CONTIN   LM    0,4,FWORK
         GETMAIN EU,A=(3),LV=96
         L     7,0(,3)
         MVI   0(3),4
         MVC   0(96,7),DCB
         ST    6,R6
         L     6,ORGUN
         C     6,=F'50'
         BNH   STNO
         L     6,R6
         BR    10
STNO     CVD   11,WORK
         MVN   WORK+7(1),=X'0F'
         UNPK  42(2,7),WORK+6(2)
         L     6,R6
         BR    10
         EJECT
***********************************************************************
*************************  E-O-F READING  *****************************
EOF      RET   4
         SPACE 20
***********************************************************************
***********************  I/O ERROR  ***********************************
ERR      MVI   ERRSW,1
         L     9,=V(FERMSG)
         USING FERMSG,9
         LR    2,0
         MVC   IOB(16),0(2)
         MVC   IOB+8(1),IOB+4
         L     2,44(,1)
         L     2,32(,2)
         MVC   IOB+4(4),24(2)
         SYNADAF ACSMETH=QSAM
         MVC   IBUF(4),8(1)
         MVC   IMES(80),48(1)
         MVC   IMES+11(2),=C'  '
         MVC   IMES+13(6),28(2)
         LH    2,12(,1)
         ST    2,ILEN
         SYNADRLS
         BR    14
*
* INVALID RECORD LENGTH PASSED TO FREAD OR FREADB -- OR --  ERROR
* IN VARIABLE LENGTH RECORD CONTROL WORD
*
BADLEN   ABEND 220,DUMP
         EJECT
***********************************************************************
WORK     DS    D
BIN      DC    8X'0'
FL       DC    F'95365'
FWORK    DS    5F
FD       DC    F'0'
R6       DS    F
ORGUN    DS    F
FTDDNAM  DC    CL8'FTXXF001'
OCLIST   CLOSE (1,REREAD),MF=L  REMOTE OPEN/CLOSE LIST           91192
LIST     DC    X'05'
         DC    AL3(EXIT)
         DC    X'87'
         DC    AL3(JFCB)
JFCB     DS    176C
CONT     DC    H'0'
ERRSW    DC    X'00'
LOCSW    DC    X'00'
DCB      DCB   DDNAME=FTXXF001,EODAD=EOF,SYNAD=ERR,DSORG=PS,EROPT=ACC, X
               MACRF=(GL,PL),EXLST=LIST
FERMSG   CSECT
IBUF     DS    F
ILEN     DS    F
IMES     DS    20F
IOB      DS    4F
FUNITABL CSECT
TABLE    DC    (NUMENTS)F'0'
         END
