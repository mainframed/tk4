DSCREST  TITLE 'D S C R E S T  ***  RESTORE IEBCOPY UNLOAD FILES'
***********************************************************************
**                                                                   **
**  PROGRAM: DSCREST                                                 **
**                                                                   **
**  PURPOSE: Restore a data set from an IEBCOPY unloaded data set.   **
**    Restore from an unlike volume is handled by reblocking,        **
**  for data sets with record formats of Fxxx and Vxxx,              **
**  provided the record length will fit on the new volume.           **
**                                                                   **
**    No reblocking is attempted for data sets with record format U  **
**      or keyed blocks.                                             **
**                                                                   **
**  SAMPLE JCL:                                                      **
**                                                                   **
**      //DSCREST JOB ...                                            **
**      //LOAD   EXEC PGM=DSCREST,REGION=4096K                       **
**      //STEPLIB  DD DISP=SHR,...  ONLY IF NOT IN A LINK LIB        **
**      //SYSPRINT DD SYSOUT=*                                       **
**      //SYSUT1   DD DISP=SHR, unloaded data set                    **
**      //SYSUT2   DD DISP=(,CATLG),DSN=restored.data.set.name,      **
**      //            SPACE=,UNIT=                                   **
**      //                                                           **
**                                                                   **
***********************************************************************
**  Maintenance:                                                     **
**  2012-05-31 GYP New code                                          **
***********************************************************************
         SPACE 1
         COPY  OPTIONGB
         SPACE 1
         SYSPARM LIST=YES
&BUGBEAR SETB 0 **************DEBUG*************
         SPACE 1
         PUNCH ' ORDER DSCREST(P) '    EASIER DUMP READING
         SPACE 1
         PRINT &PRTSOR
DSCREST  PGMHEAD ZERO31,BASE=(R12,R11),PARM=R9,BNDRY=PAGE
*BANDAID SPIE **********************DEBUG*************
         LA    R1,EXLST      EXIT LIST
         LA    R0,MYJFCB
         ST@   R0,EXLST,MVI=X'87' BUILD EXIT LIST
         STCM  R1,7,DCBEXLSA+SYSUT1-IHADCB
         STCM  R1,7,DCBEXLSA+SYSUT2-IHADCB
         MVI   DEBLVL,1      LIST FINAL RESULTS (ONLY)
         LA    R1,1024       PRESET FOR 1024 MEMBERS
         ST    R1,POWSIZE    CELL POOL SIZE
         SERVINIT ,          INITIALIZE SERVICE ROUTINES
         SERVLOAD @PARSER,@PRINTER,SUBBLKSI,SUBCPOOL,SUBVERB  AND LOAD
         PRTOPEN SYSPRINT,OPT=(DUMMY)
         PRTLIST HEADER1,TITLE=1
         PARMLOAD R8,PTR=R9       GET PARM= FIELD
         LTR   R9,R9         ANY PARMS?
         BNP   PARMDONE
         OI    PAR$RQFG,PAR$COUP  UPPER CASE INPUT FIELDS
         PARSE (R8),(R9),OPT=KEYWORD  IGNORE BLANKS AND COMMAS
         BXH   R15,R15,DONEPARM   NOTHING FOUND
         LA    R3,PAR@TABL   TOP OF RESULTS
         USING PRSDSECT,R3   DECLARE RESULT MAPPING
LOOPPARM ICM   R3,15,PRSLINK      ANY TEXT FOUND ?
         BZ    DONEPARM             NO; GET OUT
         TM    PRSTYPE,PRSPFKEY   USER SPECIFIED KEYWORD?
         BNZ   KEYWPARM             YES; CONTINUE
         PARFGSET FLAGSETP,ERR=FLAGBAD,DONE=LOOPPARM
         SPACE 1
KEYWPARM LA    R0,PRSKEYWD   POINT TO INPUT
         LA    R1,KEYWSETP   POINT TO TABLE
         SUBCALL SUBVERB     PERFORM LOOKUP
         BZ    KEYWBAD         NO MATCH; FAIL IT
         BR    R1            INVOKE SUBROUTINE
         SPACE 1
SETPOWER TM    PRSFLAGS,PRSFGINT  INTEGER VALUE ?
         BZ    KEYWINT              NO; FAIL
         LM    R0,R1,PRS#TINT     LOAD VALUE
         LTR   R0,R0         NOT TOO LARGE ?
         BNZ   KEYWINT
         CL    R1,=F'6'      NOT TOO LARGE?
         BH    KEYWINT         TOO BAD
         ST    R1,POWSCALE   SAVE IT
         LA    R2,1024       PRESET FOR 1024 MEMBERS
         SH    R1,=H'1'      ANY ?
         BNP   SETPOW
         SLL   R2,0(R1)      INCREASE POOL SIZE
SETPOW   ST    R2,POWSIZE    CELL POOL SIZE
         B     LOOPPARM      DO MORE
         SPACE 1
SETDEBUG TM    PRSFLAGS,PRSFGINT  INTEGER VALUE ?
         BZ    KEYWINT              NO; FAIL
         LM    R0,R1,PRS#TINT     LOAD VALUE
         LTR   R0,R0         NOT TOO LARGE ?
         BM    KEYWINT
         CL    R1,=F'9'      NOT TOO LARGE?
         BH    KEYWINT         TOO BAD
         STC   R1,DEBLVL     SAVE IT
         B     LOOPPARM      DO MORE
         SPACE 1
         PARKEYBX FLAGSET    BXLE
FLAGSET  PARKEYFG 'REPLACE',OPTFLAGS,0,FGREP     REPLACE
FLAGSET2 PARKEYFG 'ADD',OPTFLAGS,FGREP,0         ADD ONLY
         PARKEYFG 'NEW',OPTFLAGS,FGREP,0         REPLACE
         PARKEYFG 'ASIS',OPTFLAGS,0,FGASIS       NO REBLOCKING
         PARKEYFG 'PRINT',DEBLVL,0,1             PRINT FINAL MEMBERS
         PARKEYFG 'NOPRINT',DEBLVL,0,0           NO PRINT
         PARKEYFG 'ABEND',OPTFLAGS,0,FGDUMP      DUMP ON ERROR
         PARKEYFG 'DUMP',OPTFLAGS,0,FGDUMP       DUMP ON ERROR
FLAGSETN PARKEYFG 'DEBUG',DEBLVL,0,4             MODERATE DEBUG MODE
         SPACE 1
         PARKEYBX KEYWSET    BXLE
KEYWSET  PARKEYAD 'POWER',SETPOWER               INCREASE CELLPOOL SIZE
KEYWSET2 PARKEYAD 'DEBLVL',SETDEBUG              SET DEBUG LEVEL
         PARKEYAD 'DEBLEV',SETDEBUG              SET DEBUG LEVEL
         PARKEYAD 'PRTLVL',SETDEBUG              SET DEBUG LEVEL
         PARKEYAD 'PRTLEV',SETDEBUG              SET DEBUG LEVEL
         PARKEYAD 'PRINTLVL',SETDEBUG            SET DEBUG LEVEL
         PARKEYAD 'PRINTLEV',SETDEBUG            SET DEBUG LEVEL
KEYWSETN PARKEYFG 'DEBUG',SETDEBUG               SET DEBUG LEVEL
         SPACE 1
FLAGBAD  PRTDATA 'Unknown PARM option',(PRS$TEXT,DEB,PADL)
         B     EXIT16
KEYWBAD  PRTDATA 'Unknown PARM keyword',(PRSKEYWD,DEB,PADL)
         B     EXIT16
KEYWINT  PRTDATA (PRSKEYWD,DEB,PAD),'has invalid numeric',(PRS$TEXT,DEB*
               ,PADL)
         B     EXIT16
         DROP  R3
         SPACE 1
PARMFD   FDPRT 'PARM options:'
         FDFLAG OPTFLAGS,PAD,DEB,TABLE=OPTTAB,SPACE=2,SEP=C',' LEN=80
         FDCLI POWSCALE+3,2,BL=PARMFDPS
         FDPRT '  Power='
         FDPRT POWSCALE,I,DEB,PADR
         FDPRT 'Number of cells=',PADL
         FDPRT POWSIZE,I,DEB,PADR
PARMFDPS FDCLI DEBLVL,1,BL=PARMFDDN,BE=PARMFDDP
         FDPRT '  Print/Debug level='
         FDPRT DEBLVL,I,DEB,PADR
         FDGOTO PARMFDDS
PARMFDDN FDPRT '  No detail listing'
         FDGOTO PARMFDDS
PARMFDDP FDPRT '  Print member list'
PARMFDDS FD    *END
         SPACE 1
OPTTAB   FLGTAB FGREP,'Replace old members',MLEN=1
         FLGTAB FGASIS,'Inhibit reblocking'
         FLGTAB FGDUMP,'Dump on error'
         FLGTAB *END
         SPACE 1
*   LOOK FOR SYSUT1
*     EXPECTED FORMAT IS RECFM=VBS,LRECL=32760,BLKSIZE=any
         SPACE 1
DONEPARM PARSE OPT=CLOSE     RELEASE STORAGE
PARMDONE DEVTYPE DCBDDNAM-IHADCB+SYSUT1,DB
         LTR   R15,R15       SUCCESSFUL?
         BNZ   NEEDUT1         NO
         TM    DB+2,UCB3DACC+UCB3TAPE  TAPE OR DISK?
         BM    HAVEUT1       YES
NEEDUT1  PRTDATA 'Input file SYSUT1 missing or wrong device type'
         B     EXIT16          FAIL
         SPACE 1
HAVEUT1  OPEN  MF=(E,UT1OCLST)    OPEN THE INPOUT FILE
         TM    DCBOFLGS+SYSUT1-IHADCB,DCBOFOPN   DID IT OPEN ?
         BNZ   OPENUT1       YES
         PRTDATA 'SYSUT1 DD failed to open'
         B     EXIT16          FAIL BIG
         SPACE 1
*---------------------------------------------------------------------*
*    EXAMINE CONTROL RECORD                                           *
*---------------------------------------------------------------------*
OPENUT1  XC    MYJFCB(JFCBLGTH),MYJFCB JUST IN CASE
         RDJFCB MF=(E,UT1OCLST)   GET JFCB INFO
         PRTLIST HEADER2,TITLE=2  DISPLAY INPUT DATA SET NAME
         XC    MYJFCB(JFCBLGTH),MYJFCB JUST IN CASE
         RDJFCB MF=(E,UT2OCLST)   GET JFCB INFO
         CLI   JFCBDSNM,C' ' DID WE GET IT ?
         BNH   SKIPHED3
         PRTLIST HEADER3,TITLE=3  DISPLAY OUTPUT DATA SET NAME
SKIPHED3 PRTLIST PARMFD
         BAL   R14,GETSUB    GET FIRST RECORD
         CLC   =X'CA6D0F',5(R8)   IEBCOPY UNLOAD RECORD?
         BE    SAVERCD1      YES
         PRTDATA 'SYSUT1 is not an IEBCOPY unloaded file'
         B     EXIT16
         SPACE 1
SAVERCD1 MVC   RECORD1,0(R8) SAVE THE DATA
         CLI   DEBLVL,1
         BL    SKIPDCBS
         PRTLIST REC1FD      DISPLAY DETAILS
         SPACE 1
*---------------------------------------------------------------------*
*    GET AND SAVE EXTENT RECORD                                       *
*---------------------------------------------------------------------*
SKIPDCBS BAL   R14,GETSUB    GET SECOND RECORD
         LA    R14,RECORD2
         LA    R15,L'RECORD2
         MVCL  R14,R8        SAVE FOR CCHHR TO TTR CONVERSION
         LH    R2,INPTKCYL   GET TRACKS PER CYLINDER
         STH   R2,TRKPCYL    SAVE FOR TTR CONVERSION
         CLI   DEBLVL,1
         BL    SKIPEXTS
         SR    R2,R2
         IC    R2,INP#EXT    GET EXTENT COUNT
         LA    R3,INPEXT1    POINT TO EXTENT
         PRTLIST REC2FD      DISPLAY IT
         SPACE 1
*   DO OTHER INITIALIZATION STUFF HERE
SKIPEXTS OI    PROFLAGS,FGDATA    PASSED CONTROL RECORDS
         SPACE 1
*   BUILD CELL POOL FOR MEMBER ENTRIES
         L     R2,POWSIZE    GET DESIRED ENTRY COUNT
         CPOOL BUILD,PCELLCT=(R2),SCELLCT=(R2),CSIZE=MEMDSIZE,         *
               LOC=BELOW,CPID=MEMPID#,MF=(E,MFPOOL)
         LTR   R15,R15
         BZ    HAVEPOOL
         ST    R15,DB
         PRTDATA 'Cellpool failed; RC=',(DB,4,I,PAD,DEB)
         B     EXIT16
         SPACE 1
*   OPEN OUTPUT PDS
HAVEPOOL MVC   DCBRECFM+SYSUT2-IHADCB,INPRECFM     USE ORIGINAL
         MVC   DCBLRECL+SYSUT2-IHADCB,INPLRECL     USE ORIGINAL
         MVC   DCBBLKSI+SYSUT2-IHADCB,INPBLKSZ  USE ORIGINAL FOR NOW
         MVC   DCBKEYLE+SYSUT2-IHADCB(L'DCBKEYLE),INPKEYLN
         SR    R1,R1
         IC    R1,INPRECFM
         SRL   R1,8-3        KEEP ONLY TOP 3 BITS
         STH   R1,UT1TYPE
         TR    UT1TYPE+1(1),=X'08,04,04,04,00,00,08,08'  U,D,V,V,F,F,U
         SERVCALL TIODD,DCBDDNAM+SYSUT2-IHADCB
         BXLE  R15,R15,HAVEUT2    FOUND SYSUT2
BADUT2DD PRTDATA 'DD for SYSUT2 missing or not DASD - run terminated'
         B     EXIT16
BADUT2BK PRTDATA 'DD for SYSUT2 track size too small - run terminated'
         B     EXIT16
         SPACE 1
*---------------------------------------------------------------------*
*   IF INPUT IS KEYED OR UNDEFINED, DO NOT REBLOCK.                   *
*   GET OUTPUT BLOCK SIZE IN EITHER CASE, AND SET.                    *
*---------------------------------------------------------------------*
HAVEUT2  LTR   R2,R0         COPY TIOENTRY ADDRESS
         BZ    BADUT2DD        NO SYSUT2 ?
         LH    R4,DCBBLKSI+SYSUT2-IHADCB  GET ORIGINAL BLOCK SIZE
         SR    R0,R0
         ICM   R0,7,TIOEFSRT-TIOENTRY(R2)   LOOK AT UCB ENTRY
         LTR   R14,R0
         BZ    BADUT2DD
         CLI   UCBTBYT3-UCBOB(R14),UCB3DACC DASD ?
         BNE   BADUT2DD             NO; REJECT
         LH    R1,DCBLRECL+SYSUT2-IHADCB
         ICM   R1,8,DCBRECFM+SYSUT2-IHADCB  RECFM
         ICM   R1,4,DCBKEYLE+SYSUT2-IHADCB  KEYLEN
*#TRAP DB,ID=PREBLK ******************DEBUG************
         SUBCALL SUBBLKSI    GET BLOCK SIZE
*#TRAP DB,ID=POSTBLK ******************DEBUG************
         BXH   R15,R15,BADUT2BK  WRONG SIZE; ETC.?
         STCM  R1,8,DCBRECFM+SYSUT2-IHADCB
         LR    R4,R0
         N     R4,=X'00007FFF'    JUST IN CASE
         BZ    BADUT2DD
         ST    R4,OUTSIZE
         TM    OPTFLAGS,FGASIS    FORCED AS-IS ?
         BNZ   COPYASIS
         TM    INPRECFM,X'C0'     RECFM=U ?
         BO    COPYASIS
         CLI   INPKEYLN,0         KEYED DATA ?
         BE    COPYREBL             NO; OK TO REBLOCK (?)
COPYASIS OI    OPTFLAGS,FGASIS    COPY AS-IS
         PRTDATA 'Data not elegible for reblocking - copying as-is'
         B     COPYSET
         SPACE 1
COPYREBL STH   R4,DCBBLKSI+SYSUT2-IHADCB  SET UPDATED BLOCK SIZE
COPYSET  LA    R2,BUFFER
         ST    R2,OUTBUFF    SAVE BUFFER ADDRESS
         ST    R2,OUTNEXT    INITIALIZE EMPTY
         AR    R4,R2
         ST    R4,OUTLAST    SAVE LAST BYTE ADDRESS
         SR    R1,R1
         IC    R1,DCBRECFM+SYSUT2-IHADCB
         SRL   R1,8-3        KEEP ONLY TOP 3 BITS
         STH   R1,UT2TYPE
         TR    UT2TYPE+1(1),=X'08,04,04,04,00,00,08,08'  U,D,V,V,F,F,U
         PRTLIST REC3FD      SHOW UPDATED SIZE
         CLI   DEBLVL,4      DEBUGGING ?
         BL    UT2OPEN
         PRTLIST BUFFFD      SHOW DEBUG INFO
UT2OPEN  OPEN  (,OUTPUT),MF=(E,UT2OCLST)    OPEN FOR OUTPUT
         TM    DCBOFLGS+SYSUT2-IHADCB,DCBOFOPN   DID IT OPEN ?
         BNZ   PROCLOOP      YES
         PRTDATA 'SYSUT2 DD failed to open'
         B     EXIT16          FAIL BIG
         SPACE 1
REC1FD   FD    'Control information:',NL,PAD
         FD    'Source DCB RECFM='
         FD    INPRECFM,X
         FD    'LRECL=',PADL
         FD    INPLRECL,I,LEN=5
         FD    'BLKSIZE=',PADL
         FD    INPBLKSZ,I,LEN=5
         FD    'KEYLEN=',PADL
         FD    INPKEYLN,I,LEN=3
         FD    'OPTCD=',PADL
         FD    INPOPTCD,X
         FD    'Device Information',PADL
         FD    'TYPE',PAD
         FD    INPDEVTP,4,X,PAD
         FD    *END
REC3FD   FDCLC INPBLKSZ,DCBBLKSI+SYSUT2-IHADCB,BE=REC3SAME
         FD    'Output block size changed to',PAD,NL
         FD    DCBBLKSI+SYSUT2-IHADCB,2,I,LEN=5
REC3SAME FD    *END
         SPACE 1
REC2FD   FD    'Tracks/Cylinder=',NL
         FD    TRKPCYL,I     DERIVED FROM INPDEVTP+3,1,I
         FD    'Extent Information   Number=',NL
         FD    INP#EXT,I,LADJ,LEN=5
REC2FDLP FDROOM 9+1+9+7
         FD    6(R3),2,X
         FD    '.'
         FD    8(R3),2,X
         FD    '-'
         FD    10(R3),2,X
         FD    '.'
         FD    12(R3),2,X
         FD    14(R3),2,I,RADJ,LEN=6
         FDBUMP (R3,16),(R2,-1)   LOOP ON R2 COUNT
         FDBR  BH=REC2FDLP
         FD    *END
         SPACE 1
BUFFFD   FDPRT 'Buffer info: BUFFER',NL
         FDPRT OUTBUFF,X,PAD
         FDPRT 'End'
         FDPRT OUTLAST,X,PAD
         FDPRT 'Size'
         FDPRT OUTSIZE,X,PAD
         FDPRT 'Input method'
         FDPRT UT1TYPE,I,PAD
         FDPRT 'Output'
         FDPRT UT2TYPE,I,PAD
         FD    *END
         SPACE 1
*---------------------------------------------------------------------*
*   PROCESS INPUT                                                     *
*---------------------------------------------------------------------*
PROCLOOP BAL   R14,GETSUB    GET NEXT RECORD
         BAL   R14,TESTBLOK  VALIDATE DATA
         USING BLOKSECT,R8   DECLARE MAPPING
         LA    R8,BLOKWORD   SKIP RDW
         SH    R9,=AL2(BLOKWORD-BLOKSECT)   ADJUST RESIDUAL LENGTH
         USING BLOKWORD,R8   DECLARE NEW MAPPING
         SPACE 1
BLOKLOOP STM   R8,R9,DB3     SAVE START
         LTR   R9,R9         EXACT FIT ?
         BZ    PROCBUMP        YES; GET NEXT RECORD
         BM    BLOKFAIL      SHOULD NEVER HAPPEN
         CH    R9,=AL2(L'BLOKHEAD)
         BL    BLOKFAIL
         XC    CURRKL(L'CURRKL+L'CURRDL),CURRKL  CLEAR
         MVC   CURRKL+3(1),BHKEYLN     ISOLATE KEY LENGTH
         MVC   CURRDL+2(2),BHDATLN     ISOLATE DATA LENGTH
         LA    R1,BLOKCC
         BAL   R14,CON2TTR
         ST    R0,CURRTTR
         CLI   DEBLVL,6
         BL    SKIPBLKD
         PRTLIST BLOKFD      PRINT SUMMARY DATA
SKIPBLKD TM    PROFLAGS,FGLEOD    LOGICAL END OF DIRECTORY?
         BNZ   BLOKNDIR      YES; PROCESS DATA OR EMPTY DIR. BLOCKS
         CLC   =8X'FF',BHKEY   LOGICAL END ?
         BNE   *+8               NO
         OI    PROFLAGS,FGLEOD   YES; SET FLAGS
         INC   COUNTDIR      COUNT DIRECTORY BLOCKS
         INC   COUNTDUS      COUNT USED DIRECTORY BLOCKS
***  PROCESS MEMBER DATA HERE
         LA    R4,DEMEM      POINT TO FIRST DATA ENTRY
         LH    R5,DELEN      GET USED SIZE
         SH    R5,=H'2'
NEWMEMLP LTR   R5,R5         DONE WITH THIS BLOCK ?
         BNP   BLOKBUMP        YES
         CLC   =8X'FF',0(R4)   LOGICAL END ?
         BE    BLOKBUMP        YES; DONE
         INC   COUNTMEM      COUNT MEMBERS
         CPOOL GET,CPID=MEMPID#,REGS=SAVE   GET A TABLE SLOT
         LTR   R15,R15
         BZ    HAVEELEM
         ST    R15,DB
         PRTDATA 'Cellpool GET failed; RC=',(DB,4,I,PAD,DEB)
         B     EXIT16
HAVEELEM LR    R10,R1        COPY NEW ELEMENT ADDRESS
         USING MEMDSECT,R10  DECLARE IT
         ICM   R14,15,MEMCURR   GET OLD ENTRY
         BZ    NEWMEM1         FIRST TIME; NO OLD MEMBER
         ST    R10,MEMLINK-MEMDSECT(,R14)   CHAIN NEW TO OLD
         B     NEWMEM2
NEWMEM1  ST    R10,MEMHEAD   SAVE FIRST ADDRESS
NEWMEM2  ST    R10,MEMCURR   NEW END
         IC    R15,PDS2INDC-PDS2(,R4)  GET FLAGS BYTES FOR NEW MEMBER
         N     R15,=A(PDS2LUSR)   ADDITIONAL DATA LENGTH / 2
         LA    R15,PDS2USRD-PDS2(R15,R15)   ENTRY LENGTH
         LR    R14,R15
         BCTR  R14,0         LENGTH FOR EXECUTE
         EX    R14,EXMEMMVC  SAVE MEMBER DATA
         STH   R15,MEM#SIZE  SAVE MEMBER SIZE
         AR    R4,R15        BUMP TO NEXT MEMBER
         SR    R5,R15        RESIDUAL LENGTH
         B     NEWMEMLP
EXMEMMVC MVC   PDS2(0),0(R4)   SAVE MEMBER DATA
         SPACE 1
BLOKNDIR TM    PROFLAGS,FGPEOD    HIT EOF YET ?
         BNZ   BLOKDATA      YES; PROCESS MEMBER DATA
         INC   COUNTDIR      COUNT DIRECTORY BLOCKS
         OC    CURRDL,CURRDL EOF RECORD ?
         BNZ   BLOKBUMP        NO; JUST IGNORE
         OI    PROFLAGS,FGPEOD+FGNEEDM SIGNAL PHYSICAL DIRECTORY END
         INC   COUNTDIR,INC=-1  DON'T COUNT EOF BLOCK
         CLI   DEBLVL,8
         BL    BLOKBUMP      SKIP INPUT DIRECTORY DISPLAY
         LA    R10,MEMHEAD   GET FIRST MEMBER POINTER
         USING MEMDSECT,R10
SHOWMEM  ICM   R10,15,MEMLINK  GET NEXT ENTRY
         BZ    BLOKBUMP         NO MORE
         PRTLIST SHOWFD      PRINT ONE MEMBER
         B     SHOWMEM       DO NEXT
SHOWFD   FDPRT ' ',NL,LEN=20
         FDPRT PDS2NAME,PAD
         FDPRT PDS2TTRP,HEX,PAD
         FDPRT PDS2INDC,HEX
         FDPRT *END
         SPACE 1
BLOKDATA TM    PROFLAGS,FGNEEDM
         BZ    BLOKDATM      HAVE MEMBER
         BAL   R14,FINDMEM   FIND MEMBER BY (CURR)TTR
         LTR   R10,R10       ANYTHING FOUND ?
         BZ    BLOKNMEM        NO; ERROR
         ZI    PROFLAGS,FGNEEDM  MEMBER FOUND
         XC    CURRWORK,CURRWORK  CLEAR WORK AREA (OTTR,NTTR,#TTR)
         IC    R2,PDS2INDC   GET NUMBER OF TTRS, ETC.
         N     R2,=A(PDS2NTTR)
         SRL   R2,5          NUMBER OF TTRS
         LA    R2,1(,R2)     TTR COUNT
         ST    R2,CURR#TTR
         SLL   R2,2          NUMBER OF BYTES
         BCTR  R2,0
         EX    R2,EXMVCTTR   SAVE OLD TTRS
         MVC   CURRNTTR(CURRNTTR-CURROTTR),CURROTTR   PROVISIONAL
         B     BLOKDAT1
BLOKDATM L     R2,CURR#TTR   DOES ENTRY HAVE MULTIPLE TTRS?
         LA    R0,4
         LA    R3,CURROTTR+4
BLOKNTTR SH    R2,=H'1'
         BNP   BLOKDAT1        NO
         CLC   0(3,R3),CURRTTR    SAME AS CURRENT (OLD) TTR?
         BNE   BLOKNTTR        NO
         SR    R3,R3         FORCE BLOCK TRUNCATION
         BAL   R14,PUTREC
BLOKDAT1 LM    R2,R3,CURRKL  LOAD KEY AND DATA LENGTH
         LTR   R4,R3         EOF BLOCK ?
         BZ    BLOKMEND        YES; END OF MEMBER
         LA    R2,BHDATA(R2) SKIP KEY
         LH    R6,UT1TYPE    GET (LOGICAL) INPUT RECFM KEY
         TM    OPTFLAGS,FGASIS
         BNZ   BLOKASIS
         B     *+4(R6)
           B   BLOKDFIX      RECFM=F
           B   BLOKDVAR      RECFM=V/D
           B   BLOKDUND      RECFM=U
BLOKASIS DS    0H            WRITE COMPLETE BLOCK
BLOKDUND BAL   R14,PUTREC    WRITE RECORD AS BLOCK
         B     BLOKBUMP
EXMVCTTR MVC   CURROTTR(0),PDS2TTRP    SAVE TTR(S)
BLOKDFIX LTR   R4,R4         ANY AT ALL?
         BNP   BLOKBUMP
         LH    R3,INPLRECL
BLOKDFIP BAL   R14,PUTREC    WRITE IT
         AR    R2,R3
         SR    R4,R3
         BP    BLOKDFIP
         B     BLOKBUMP
BLOKDVAR AR    R2,R6         SKIP BDW
         SR    R3,R6         ADJUST LENGTH
         BNP   BLOKBUMP
BLOKDVAL ICM   R3,3,0(R2)    LOAD RDW LENGTH
         AR    R2,R6         POINT TO DATA
         SR    R3,R6         ADJUST LENGTH
         BAL   R14,PUTREC    WRITE IT
         AR    R2,R3
         SR    R4,R3
         SR    R4,R6         ALLOW FOR RDW LENGTH
         BP    BLOKDVAL
         B     BLOKBUMP
         SPACE 1
BLOKNMEM PRTDATA 'No member found for TTR',(CURRTTR,HEX,PAD)
         B     BLOKRSET        MAY BE MORE ?
BLOKNDAT PRTDATA 'EOF but no member found at TTR',(CURRTTR,HEX,PAD)
         B     BLOKRSET        MAY BE MORE ?
         SPACE 1
BLOKMEND TM    PROFLAGS,FGNEEDM   EOF WITHOUT DATA?
         BNZ   BLOKNDAT             OOPS
         MVN   PROFLAGS,=AL1(FGNUMEM)  NEEDED MEMBER
         LTR   R10,R10       SHOULD NOT HAPPEN?
         BZ    BLOKBUMP
         SR    R3,R3
         BAL   R14,PUTREC    WRITE FINAL BLOCK, IF ANY
         LA    R0,4
         L     R1,CURR#TTR
         LA    R14,PDS2TTRP
         LA    R15,CURRNTTR
BLOKUPTT MVC   0(L'PDS2TTRP,R14),0(R15)     MOVE TTR SANS FLAGS
         AR    R14,R0
         AR    R15,R0
         BCT   R1,BLOKUPTT
         TM    PDS2INDC,PDS2ALIS  WIDOWED ALIAS ?
         BZ    BLOKSTOW
         PRTDATA 'Widowed alias',(PDS2NAME,PAD),'converted to member'
         ZI    PDS2INDC,PDS2ALIS  RESET ALIAS FLAG
BLOKSTOW TM    OPTFLAGS,FGREP     REPLACE REQUESTED ?
         BZ    BLOKADD              NO; TRY ADD
         STOW  SYSUT2,PDS2NAME,R     REPLACE
         LTR   R0,R15
         BZ    STOWDONE
         CH    R15,=H'8'     ADDED ?
         BE    STOWDONE
         B     STOWFAIL
BLOKADD  STOW  SYSUT2,PDS2NAME,A     ADD
         LTR   R0,R15
         BZ    STOWDONE
STOWFAIL ST    R15,DB
         BIX   VAL=(R0),SRL=2,BASE=*,ERR=STOWCODE,                     *
               LOC=(,STOWDUPE,,   4 - DUPLICATE ENTRY                  *
               STOWFULL)         12 - DIRECTORY FULL
STOWDUPE PRTDATA 'Member',(PDS2NAME,PAD),'already in PDS - skipped'
         OICC  8
         B     BLOKBUMP
STOWFULL PRTDATA 'Directory full at member',(PDS2NAME,PAD)
         B     EXIT16
STOWCODE PRTDATA 'STOW failed for member',(PDS2NAME,PAD),'with code',(D*
               B,4,I,DEB,PAD)
         B     EXIT16
STOWDONE OI    MEMFLAGS,MFSTOW
         CLI   DEBLVL,4
         BNH   SKPSTOWM
         PRTDATA PDS2NAME,' Stowed at TTR',(PDS2TTRP,HEX,PAD)
         SPACE 1
         PUSH  USING
         DROP  R10
SKPSTOWM LA    R4,MEMHEAD
         USING MEMDSECT,R4
FALILOOP ICM   R4,15,MEMLINK
         BZ    BLOKBUMP      DONE
         TM    MEMFLAGS,MFSTOW    DONE ALREADY ?
         BNZ   FALILOOP             YES; IGNORE
         CLC   PDS2TTRP,CURROTTR  MATCHING ADDRESS ?
         BNE   FALILOOP             NO; TRY NEXT
         TM    PDS2INDC,PDS2ALIS  IS THIS AN ALIAS ENTRY?
         BZ    FALILOOP             NO; BUT SHOULD NEVER HAPPEN
         LA    R0,4
         L     R1,CURR#TTR
         LA    R14,PDS2TTRP
         LA    R15,CURRNTTR
BLOKALTT MVC   0(L'PDS2TTRP,R14),0(R15)     MOVE TTR SANS FLAGS
         AR    R14,R0
         AR    R15,R0
         BCT   R1,BLOKALTT
         STOW  SYSUT2,PDS2NAME,R  FORCE ALIAS IF ADD WORKED
         LTR   R0,R15
         BZ    STALDONE
         CH    R15,=H'8'     ADDED ?
         BE    STALDONE
         B     STOWFAIL
STALDONE OI    MEMFLAGS,MFSTOW
         CLI   DEBLVL,4
         BNH   FALILOOP
         PRTDATA PDS2NAME,' Alias added',(PDS2TTRP,HEX,PAD)
         B     FALILOOP      AND LOOK FOR ANOTHER
         POP   USING
         SPACE 1
BLOKFAIL PRTDATA 'Encountered incorrectly blocked input at',(DB3,4,X,PA*
               D),'length',(DB3+4,4,I,PADL)
         PRTCLOSE ,
         ABEND 123,DUMP
         SPACE 1
BLOKRSET MVN   PROFLAGS,=AL1(FGNUMEM)  NEED MEMBER
BLOKBUMP LM    R8,R9,DB3     RECOVER BLOCK ADDRESS/LENGTH
         LM    R6,R7,CURRKL  LOAD KEY AND DATA LENGTH
         LA    R0,L'BLOKHEAD(R6,R7)    TOTAL BLOCK LENGTH
         AR    R8,R0
         SR    R9,R0         ADJUST FOR NEXT TIME
         B     BLOKLOOP      LOOK FOR ANOTHER BLOCK IN THIS RECORD
         SPACE 1
PROCBUMP B     PROCLOOP
         SPACE 2
BLOKFD   FDPRT 'Block Info:',NL,PADR
         FD    BLOKCC,2,X
         FD    '.'
         FD    BLOKHH,2,X
         FD    '.'
         FD    BLOKRCD,1,X
         FD    ' TTR='
         FD    CURRTTR,X,PADR
         FD    '  Key/Data len'
         FD    BHKEYLN,X,PAD
         FD    BHDATLN,I,RADJ,LEN=6
         FD    BHKEY,16,X,PAD
         FD    *END
         SPACE 2
***********************************************************************
*   SYSUT1 processed to end
***********************************************************************
UT1EODAD PRTDATA 'End of file reached on SYSUT1'
         CLC   COUNTINP,=F'3'     AT LEAST MINIMUM CONTROL+DIRECTORY?
         BL    TESTBREC               NO; COMPLAIN
         CLI   DEBLVL,4      DETAIL PRINT ON ?
         BNL   EXIT            YES; DON'T DUPLICATE
         CLI   DEBLVL,1      PRINT SUMMARY ?
         BL    EXIT            NO; SKIP OUT
         LA    R10,MEMHEAD
DONELOOP ICM   R10,15,MEMLINK
         BZ    EXIT          DONE
         TM    MEMFLAGS,MFSTOW    DONE ALREADY ?
         BNZ   DONESHOW             YES; DISPLAY
         PRTDATA (PDS2NAME,PAD),'at TTR',(PDS2TTRP,HEX,PAD),'unmatched'
         OICC  8             NASTY ERROR
         B     DONELOOP             LOOK FOR MORE
DONESHOW PRTLIST STOWFD
         B     DONELOOP             LOOK FOR MORE
STOWFD   FDPRT 'Stowed',NL
         FDPRT PDS2NAME,PAD
         FDPRT 'at TTR'
         FDPRT PDS2TTRP,HEX,PAD
         FDTM  PDS2INDC,PDS2ALIS,BZ=FDSTOWX
         FDPRT 'Alias',PAD
FDSTOWX  FDPRT *END
         SPACE 1
TESTBREC PRTDATA 'Error; unexpected SYSUT1 EOF'
EXIT16   MVICC 16
         TM    OPTFLAGS,FGDUMP    DUMP ON ERROR ?
         BZ    EXIT                 NO
         PRTCLOSE ,          CLOSE PRINTER TO FORCE OUT LAST MESSAGE
         ABEND 16,DUMP       DUMP
***********************************************************************
*   EXIT - IF NORMAL, PRINT STATISTICS
***********************************************************************
EXIT     CLC   RETCODE,=F'4'      OK?
         BH    PGMEXIT              NO; SKIP
         PRTLIST STATSFD
PGMEXIT  CLOSE MF=(E,UT2OCLST)
         CLOSE MF=(E,UT1OCLST)
         ICM   R0,15,MEMPID#      DID WE USE CELL POOL?
         BZ    NOPOOL
         CPOOL DELETE,CPID=(R0)   FREE THE POOL
NOPOOL   DS    0H
         SERVTERM ,          CLOSE AND FREE
         PGMEXIT RC=RETCODE
         SPACE 1
         LTORG ,
         SPACE 1
STATSFD  FDPRT 'Data reload successful:',NL
         FDPRT COUNTINP,I,RADJ,NL,LEN=12
         FDPRT 'input records',PADL
         FDPRT COUNTDIR,I,RADJ,NL,LEN=12
         FDPRT 'directory records',PADL
         FDPRT COUNTDUS,I,RADJ,NL,LEN=12
         FDPRT 'used (input)',PADL
         FDPRT COUNTMEM,I,RADJ,NL,LEN=12
         FDPRT 'members written',PADL
         FDPRT COUNTTRK,I,RADJ,NL,LEN=12
         FDPRT 'tracks written',PADL
         FDPRT *END
         SPACE 1
HEADER1  FDOPT NL,CC=C'#'   AUTOMATIC PAGE NUMBERING AND DATE/TIME
         FDPRT 'DSCREST - IEBCOPY data set reload'
         FDPRT *END
         SPACE 1
HEADER2  FDPRT ' Input data set'
         FDPRT JFCBDSNM,PAD,DEB
         FDPRT 'on'
         FDPRT JFCBVOLS,6,PAD
         FDPRT *END
         SPACE 1
HEADER3  FDPRT 'Output data set'
         FDPRT JFCBDSNM,PAD,DEB
         FDPRT 'on'
         FDPRT JFCBVOLS,6,PAD
         FDPRT *END
         SPACE 2
*---------------------------------------------------------------------*
*    GET, COUNT, AND OPTIONALLY DUMP AN INPUT RECORD                  *
*---------------------------------------------------------------------*
GETSUB   STM   R14,R7,SUBSAVE     SAVE SOME REGISTERS
         GET   SYSUT1        GET FIRST RECORD
         LR    R8,R1         PRESERVE RECORD ADDRESS
         SR    R9,R9
         ICM   R9,3,0(R8)    GET RECORD LENGTH
         INC   COUNTINP      COUNT INPUT RECORDS
         CLI   DEBLVL,8           DEBUG MODE ?
         BL    GETSUBX
         PRTLIST SNAPFD
GETSUBX  LM    R14,R7,SUBSAVE     RELOAD REGS; PASS BACK R8-R9
         BR    R14
         SPACE 1
SNAPFD   FDPRT 'Record',NL
         FDPRT COUNTINP,I,PAD
         FDTM  PROFLAGS,FGDATA,BZ=SNAPFD2
         FDPRT '   Count Record:'
         FDPRT ' CCHHR'
         FDPRT 8(R8),2,X,PAD
         FDPRT 10(R8),2,X,PAD
         FDPRT 12(R8),1,X,PAD
         FDPRT 13(R8),1,X,PAD
         FDPRT 14(R8),2,X
         FDPRT '('
         FDPRT 14(R8),2,I,DEB
         FDPRT ')'
SNAPFD2  FDOPT NL
         FDSNAP (R8),(R9),DUAL,NOABS,OFFSET,BASE=(R8)
         FDPRT *END
         SPACE 2
         PUSH  USING
*---------------------------------------------------------------------*
*    TESTBLOK VERIFIES THAT BLOCK IS CORRECT                          *
*---------------------------------------------------------------------*
TESTBLOK STM   R0,R15,SUBSAVE     SAVE SOME REGISTERS
         USING BLOKSECT,R8   DECLARE MAPPING
         LA    R8,BLOKWORD   SKIP RDW
         SH    R9,=AL2(BLOKWORD-BLOKSECT)   ADJUST RESIDUAL LENGTH
         BM    TESTFAIL      SHOULD NEVER HAPPEN ***********DEBUG****
         XC    DB,DB         CLEAR A BIT
         USING BLOKWORD,R8   DECLARE NEW MAPPING
         SPACE 1
TESTLOOP LTR   R9,R9         EXACT FIT ?
         BZ    TESTLOX         YES; RETURN OK
         MVC   DB+3(1),BHKEYLN    ISOLATE KEY LENGTH
         MVC   DB+6(2),BHDATLN    ISOLATE DATA LENGTH
         LM    R6,R7,DB      LOAD KEY AND DATA LENGTH
         LA    R0,L'BLOKHEAD(R6,R7)    TOTAL BLOCK LENGTH
         AR    R8,R0
         SR    R9,R0         ADJUST FOR NEXT TIME
         BNM   TESTLOOP      LOOK FOR ANOTHER BLOCK IN THIS RECORD
TESTFAIL PRTDATA '*** Invalid block contents ***'
         CLI   DEBLVL,8           DEBUG MODE ?
         BNL   TESTABND        YES; ALREADY PRINTED
         LM    R8,R9,SUBSAVE+40
         PRTLIST SNAPFD
TESTABND B     EXIT16        FAIL
TESTLOX  LM    R0,R15,SUBSAVE     RELOAD REGS; PASS BACK R8-R9
         BR    R14
         POP   USING
         SPACE 2
         PUSH  USING
*---------------------------------------------------------------------*
*    FIND MEMBER BY OLD TTR - RETURN IN R10                           *
*    TTR IN FIELD CURTTR                                              *
*---------------------------------------------------------------------*
FINDMEM  LA    R10,MEMHEAD
         USING MEMDSECT,R10
         SR    R0,R0              CLEAR ALIAS POINTER
FINDLOOP ICM   R10,15,MEMLINK
         BZ    FINDEXIT      OOPS; BUT CHECK WIDOWED ALIAS
         TM    MEMFLAGS,MFSTOW    DONE ALREADY ?
         BNZ   FINDLOOP             YES; IGNORE
         CLC   PDS2TTRP,CURRTTR   MATCHING ADDRESS ?
         BNE   FINDLOOP             NO; TRY NEXT
         TM    PDS2INDC,PDS2ALIS  IS THIS AN ALIAS ENTRY?
         BZR   R14                NO; RETURN IT TO USER
         LTR   R0,R0              FIRST ALIAS?
         BNZ   FINDLOOP             NO; IGNORE
         LR    R0,R10             REMEMBER FIRST ALIAS
         B     FINDLOOP             LOOK FOR MORE
FINDEXIT LR    R10,R0             RETURN ALIAS IF WE FOUND ONE
         BR    R14
         SPACE 2
*---------------------------------------------------------------------*
*    CONVERT CCHHR TO TTR                                             *
*    R1 -> CCHHR (USUALLY BLOCK COUNT FIELD)                          *
*    R0 returned TTR, or =0 on error                                  *
*    Uses INPEXT1 extent information, and INP#EXT for count           *
*---------------------------------------------------------------------*
         PUSH  USING
CON2TTR  STM   R1,R15,SUBSAVE     SAVE SOME REGISTERS
         SR    R0,R0         CLEAR
         OC    0(5,R1),0(R1)   (FAKE) DIRECTORY CCHHR ?
         BZ    CON2TTX         YES; JUST RETURN
         LA    R3,INPEXT1    POINT TO FIRST EXTENT
         USING EXTDSECT,R3   MAP IT
         LH    R2,TRKPCYL    TRACKS PER CYLINDER
         SR    R4,R4
         IC    R4,INP#EXT    NUMBER OF EXTENTS AVAILABLE
CON2LOOP CLC   0(4,R1),EXTLCC     IN THIS EXTENT?
         BL    CON2BUMP             NO; BUMP TO NEXT
         CLC   0(4,R1),EXTHCC     NOT TOO HIGH ?
         BNH   CON2FUND      FOUND; ADD UP
CON2BUMP SR    R15,R15
         ICM   R15,3,EXTSIZE GET ABSOLUTE (SHOULD NOT HAPPEN?)
         ALR   R0,R15        TOTAL TRACKS IN PRIOR EXTENTS
         LA    R3,16(,R3)    NEXT EXTENT INFO
         BCT   R4,CON2LOOP   TRY AGAIN
         LR    R3,R1         PRESERVE
         PRTLIST BADCCFD
         B     EXIT16        OOPS
BADCCFD  FDPRT 'CCHHR',NL,PADR
         FDPRT 0(R3),5,X
         FDPRT 'is not in any extent',PADL
         FDPRT *END
         SPACE 1
CON2FUND SR    R4,R4
         SR    R5,R5
         SR    R6,R6
         SR    R7,R7
         ICM   R5,3,0(R1)    CALLER'S CC
         ICM   R7,3,2(R1)    CALLER'S HH
         ICM   R4,3,EXTLCC
         ICM   R6,3,EXTLHH
         SR    R5,R4         NUMBER OF CYLINDERS IN
         MR    R4,R2         CONVERT TO TRACKS
         AR    R5,R7         PLUS TRACK
         SR    R5,R6         LESS START TRACK
         AR    R0,R5         ACCUMULATE
         SLL   R0,16         LEFT JUSTIFY
         ICM   R0,2,4(R1)    ADD RECORD NUMBER
CON2TTX  LM    R1,R15,SUBSAVE     RELOAD REGS; PASS BACK R8-R9
         BR    R14
         POP   USING
         SPACE 2
         PUSH  USING
*---------------------------------------------------------------------*
*    STACK A RECORD INTO OUTPUT BUFFER, AND WRITE BLOCK WHEN RECORD   *
*    WON'T FIT.   RECORD LENGTH=0 IS FORCED WRITE IF NOT EMPTY.       *
*    R2 - RECORD ADDRESS (DATA ONLY IF RECFM=V)   R3 - RECORD LENGTH  *
*---------------------------------------------------------------------*
PUTREC   STM   R11,R9,WRTSAVE     SAVE STUFF
PUTRECDO SR    R4,R4         SET FOR NO RECURSION
         LM    R5,R7,OUTBUFF GET START AND CURRENT BUFFER USE
         LH    R9,UT2TYPE    GET OUTPUT RECORD TYPE
         LTR   R3,R3         FORCED WRITE REQUEST ?
         BNP   PUTRBLK
         TM    OPTFLAGS,FGASIS    COPY AS IS?
         BNZ   PUTRUND              YES
         B     *+4(R9)       BRANCH BY TYPE
           B   PUTRFIX         RECFM=F
           B   PUTRVAR         RECFM=V/D
*NEXT*     B   PUTRUND         RECFM=U
PUTRUND  LR    R5,R2
         LTR   R6,R3         TREAT RECORD AS BLOCK; SET SIZE
         B     PUTRBLN         AND WRITE OUT
PUTRFIX  LA    R14,0(R3,R6)  NEXT BYTE AFTER RECORD MOVE
         CR    R14,R7        WILL IT FIT ?
         BH    PUTRCUR         NO; WRITE CURRENT BLOCK AND RECURSE
         LR    R7,R3         COPY LENGTH
         MVCL  R6,R2         MOVE RECORD TO BUFFER
         ST    R6,OUTNEXT    SET NEXT BYTE ADDRESS
         B     PUTRECEX
PUTRVAR  CR    R5,R6         EMPTY BUFFER ?
         BNE   PUTRVAR2        NO
         MVC   0(4,R5),=X'00040000'    INITIALIZE BDW
         LA    R6,4(,R5)     NEXT RECORD ADDRESS
         ST    R6,OUTNEXT    AND SAVE IT
PUTRVAR2 LA    R14,4(R3,R6)  NEXT BYTE AFTER RECORD MOVE
         CR    R14,R7        WILL IT FIT ?
         BH    PUTRCUR         NO; WRITE CURRENT BLOCK AND RECURSE
         LA    R14,4(,R3)    LENGTH WITH RDW
         SLL   R14,16
         STCM  R14,15,0(R6)  MAKE RDW
         LA    R6,4(,R6)     SKIP RDW
         LR    R7,R3         COPY LENGTH
         MVCL  R6,R2         MOVE RECORD TO BUFFER
         ST    R6,OUTNEXT    SET NEXT BYTE ADDRESS
         B     PUTRECEX
PUTRCUR  LA    R4,1          SET RECURSION FLAG
PUTRBLK  ST    R5,OUTNEXT    CLEAR BUFFER
         SR    R6,R5         SIGNIFICANT LENGTH
         CH    R9,=H'4'      RECFM=V?
         BNE   PUTRBLN         NO
         STH   R6,0(,R5)     COMPLETE BDW
         CH    R6,=H'7'      LONGER THAN JUST BDW/RDW?
         BNH   PUTRECEX        NO; IGNORE
PUTRBLN  LTR   R6,R6         ANYTHING TO WRITE ?
PUTRBLC  BNP   PUTRECEX        EMPTY - NOTHING TO DO
         C     R6,OUTSIZE    WILL IT FIT ?
         BNH   PUTSOK          YES; WRITE IT
         ST    R6,DB2        SAVE IT
         PRTDATA 'Block too big to fit on track. TTR=',(CURRTTR,X,PAD),*
               'Member',(PDS2NAME,PAD),'Size=',(DB2,4,I,DEB)
         MIN   (R6),OUTSIZE  TRUNCATE IT
         OICC  8             SET ERROR
PUTSOK   STH   R6,DCBBLKSI+SYSUT2-IHADCB
         CLI   INPKEYLN,0    KEYED BLOCK ?
         BE    PUTRUNK         NO
         WRITE RITEDECB,SF,SYSUT2,(R5),(R6),(R8),MF=E
         B     PUTRCOM
         WRITE RITEDECB,SF,SYSUT2,*-*,'S',MF=L
         SPACE 1
PUTRUNK  WRITE RITEDECB,SF,SYSUT2,(R5),(R6),MF=E  WRITE WITHOUT KEY
PUTRCOM  CHECK RITEDECB
         NOTE  SYSUT2
         LR    R2,R1         COPY TTR
         SRL   R2,16         00TT
         AL    R2,=F'1'
         STMAX R2,COUNTTRK   WATER MARK (SANS LAST EOF)
         L     R2,CURR#TTR   DOES ENTRY HAVE MULTIPLE TTRS?
         LA    R0,4
         LA    R3,CURROTTR
PUTRNTTR SH    R2,=H'1'
         BM    PUTR0TTR        NO
         CLC   0(3,R3),CURRTTR    SAME AS CURRENT (OLD) TTR?
         BNE   PUTRNTTR        NO
         STCM  R1,IIIO,CURRNTTR-CURROTTR(R3)  UPDATE NEW TTR
PUTR0TTR TM    PROFLAGS,FGTTR1
         BNZ   PUTRECEX
         LTR   R10,R10       ANYTHING FOUND ?
         BZ    BLOKNMEM        NO; ERROR
         USING MEMDSECT,R10  GLOBAL UNTIL EOF
         STCM  R1,IIIO,PDS2TTRP   UPDATE DIRECTORY TTR
*DONE*?  STCM  R1,IIIO,CURRNTTR   UPDATE SAVED TTR
         OI    PROFLAGS,FGTTR1
PUTRECEX LTR   R4,R4         RECURSION ?
         BNP   PUTRECEZ
         LM    R11,R9,WRTSAVE
         B     PUTRECDO        YES; STASH RECORD IN BUFFER
PUTRECEZ LM    R11,R9,WRTSAVE
         BR    R14
         POP   USING
         SPACE 2
UT1OCLST OPEN  (SYSUT1,(INPUT)),MF=L
SYSUT1   DCB   DDNAME=SYSUT1,MACRF=GL,EODAD=UT1EODAD,DSORG=PS,DEVD=DA, *
               BFTEK=A,EXLST=EXLST-EXLST
UT2OCLST OPEN  (SYSUT2,(INPUT)),MF=L
SYSUT2   DCB   DDNAME=SYSUT2,MACRF=W,DSORG=PO,EXLST=EXLST-EXLST
SYSPRINT PRTWORK SYSPRINT,TITLE=4
         SPACE 2
MEMDSECT DSECT ,             ENTRY IN MEMBER TABLE
MEMLINK  DS    A             NEXT ENTRY IN CHAIN
MEMSTOW  DS    0H'0',X 1/3
MEMFLAGS DS    X       2/3   PROCESSING FLAGS
MFSTOW   EQU   X'01'           ENTRY STOWED
MEM#SIZE DS    H       3/3   LOGICAL ENTRY SIZE (FOR STOW)
         IHAPDS PDSBLDL=NO,DSECT=NO
         ORG   PDS2
         DS    (8+4+31*2)X   MAXIMUM ENTRY LEGAL LENGTH
MEMDSIZE EQU   *-MEMDSECT      ENTRY LENGTH
         SPACE 2
BLOKSECT DSECT ,
BLOKRDW  DS    2Y            RECORD DESCRIPTOR
BLOKWORD DS    F             NO IDEA WHAT THIS IS FOR
BLOKCC   DS    XL2           CYLINDER ADDRESS
BLOKHH   DS    XL2           HEAD ADDRESS
BLOKRCD  DS    X             RECORD NUMBER
BHKEYLN  DS    X             KEY LENGTH
BHDATLN  DS    XL2           DATA LENGTH
BHKEY    DS    0X            KEY, IF ANY
BHDATA   DS    0X            DATA, IF ANY
BLOKHEAD EQU   BLOKWORD,*-BLOKWORD,C'X'     BLOCK OVERHEAD
DEKEY    DS    XL8           DIRECTORY BLOCK KEY
DELEN    DS    XL2           DIRECTORY BLOCK DATA LENGTH
DEMEM    DS    XL12          MINIMUM MEMBER ENTRY
         SPACE 1
EXTDSECT DSECT ,             MAP ONE EXTENT ENTRY IN RECORD 2
EXT@UCB  DS    A             UCB ADDRESS/FLAGS
         DS    XL2           BIN
EXTLCC   DS    XL2           START CC
EXTLHH   DS    XL2           START HH
EXTHCC   DS    XL2           END   CC
EXTHHH   DS    XL2           END   HH
EXTSIZE  DS    XL2           NUMBER OF TRACKS IN EXTENT
EXTLEN   EQU   *-EXT@UCB       ENTRY SIZE
         SPACE 3
SAVE     DSECT ,             DYNAMIC SAVE/WORK AREA (ON R13)
SUBSAVE  DS    16A           SUBROUTINE SAVE AREA
WRTSAVE  DS    16A           SUBROUTINE SAVE AREA
DB       DS    D
DB2      DS    D
DB3      DS    D
         SERVDEFS ,          SERVICE ROUTINE STUFF
COUNTINP DS    F             COUNT OF INPUT RECORDS
COUNTDIR DS    F             DIRECTORY BLOCKS ALLOCATED
COUNTDUS DS    F             DIRECTORY BLOCKS USED
COUNTMEM DS    F             MEMBERS FOUND
COUNTALI DS    F             ALII FOUND
COUNTTRK DS    F             TRACKS WRITTEN
         SPACE 1
POWSCALE DS    F             SCALING FOR CELL POOL SIZE
POWSIZE  DS    F             CELL POOL SIZE
CURRKL   DS    F             KEY LEN OF CURRENT BLOCK
CURRDL   DS    F             DATA LN OF CURRENT BLOCK
CURRTTR  DS    F             OLD TTR OF CURRENT BLOCK
         SPACE 1
CURR#TTR DS    F             NUMBER OF TTRS
CURROTTR DS    4XL4          OLD TTR INFO
CURRNTTR DS    4XL4          NEW TTR INFO
CURRWORK EQU   CURR#TTR,*-CURR#TTR,C'X'     CLEARED EACH MEMBER
         SPACE 1
OUTBUFF  DS    A             ADDRESS OF OUTPUT BUFFER
OUTNEXT  DS    A             ADDRESS FOR NEXT RECORD
OUTLAST  DS    A             ADDRESS OF BUFFER END + 1
OUTSIZE  DS    F             MAXIMUM OUTPUT SIZE (DCB BLKSIZE MAX)
UT1TYPE  DS    H             0-F 4-V/D 8-U
UT2TYPE  DS    H             0-F 4-V/D 8-U
TRKPCYL  DS    H             TRACKS PER CYLINDER ON INPUT DEVICE
MBBCCHHR DS    XL8           CCHHR CONVERSION FIELD
         SPACE 1
PROFLAGS DS    X             PROCESSING OPTIONS
FGPEOD   EQU   X'80'           PHYSICAL END OF DIRECTORY FOUND
FGLEOD   EQU   X'40'           LOGICAL END OF DIRECTORY FOUND
FGDATA   EQU   X'20'           PROCESSING DATA
FGNEEDM  EQU   X'08'           NEED NEW MEMBER
FGTTRN   EQU   X'02'           CHECK ADDITIONAL TTRS
FGTTR1   EQU   X'01'           HAVE FIRST TTR OF MEMBER
FGNUMEM  EQU   (FGNEEDM)       (RE)SET NEED AND TTR FLAGS
         SPACE 1
OPTFLAGS DS    X             RUN OPTIONS
FGDUMP   EQU   X'80'           DUMP ON ERROR
FGREP    EQU   X'40'           REPLACE EXISTING MEMBERS
FGASIS   EQU   X'20'           COPY DATA AS IS
         SPACE 1
DEBLVL   DS    X             DEBUG LEVEL
         SPACE 1
UT1DATA1 DS    2H            RDW
         DS    X               FILLER ?
INPID    DS    X'CA6D0F'     IEBCOPY UNLOAD SIGNATURE
INPDSORG DS    XL2           DSORG 0200 OR 0300
INPBLKSZ DS    XL2           BLOCK SIZE
INPLRECL DS    XL2           RECORD LENGTH
INPRECFM DS    X             RECORD FORMAT
INPKEYLN DS    X             KEY LENGTH
INPOPTCD DS    X             OPTIONS
         DS    X               PADDING
INPTPBLK DS    XL2           UNLOADED BLOCK SIZE
INPDEVTP DS    XL20          DEVICE TYPE INFORMATION
INPTKCYL EQU   INPDEVTP+10,2,C'H'  TRACKS PER CYLINDER          GP12164
RECORD1  EQU   UT1DATA1,*-UT1DATA1,C'X'     SAVED PORTION OF CONTROL
         SPACE 1
UT1DATA2 DS    2H            RDW
INP#EXT  DS    X,3X          NUMBER OF EXTENTS
         DS    3XL4          DEB STUFF ?
INPEXT1  DS    16XL16        (WEIRD) EXTENT DATA
RECORD2  EQU   UT1DATA2,*-UT1DATA2,C'X'     SAVED PORTION OF EXTENT
         SPACE 1
MEMPID#  DS    F             POOL ID FOR MEMBER ENTRIES
MEMHEAD  DS    A             FIRST POOL MEMBER
MEMCURR  DS    A             LAST ASSIGNED POOL MEMBER
MFPOOL   CPOOL BUILD,MF=L
         SPACE 1
EXLST    DS    A             DYNAMIC EXIT LIST FOR UT1 AND UT2
MYJFCB   DS    0F
         MAPPARSE DSECT=NO
         ORG   MYJFCB
         IEFJFCBN ,
         ORG   ,
         SPACE 1
BUFFER   DS    XL(32760)     OUTPUT BUFFER
SAVEEND  EQU   *
         SPACE 1
         MAPPARST ,          PARSE RESULT
         PRINT &PRTSYS
FORMAT1  DSECT           , IECSDSL1 doesn't generate a DSECT
         IECSDSL1 1      Format 1 DSCB mapping
         DCBD  DSORG=PS,DEVD=(DA,TA)
         IEZDEB ,
         IKJTCB ,
         CVT   DSECT=YES
MYUCB    DSECT ,
         IEFUCBOB ,
MYTIOT   DSECT ,
         IEFTIOT1 ,
         END
