@@DYNAL  TITLE '@ @ D Y N A L  ***  SIMPLE FILE ALLOCATION'
***********************************************************************
**                                                                   **
**   CALL @@DYNAL,(ddn-len,ddn-adr,dsn-len,dsn-adr),VL               **
**                                                                   **
**   "-len" fields are self-defining values in the calling list,     **
**       or else pointers to 32-bit signed integer values            **
**                                                                   **
**   "ddn-adr"  is the address of the DD name to be used. When the   **
**       contents is hex zero or blank, and len=8, gets assigned.    **
**                                                                   **
**   "dsn-adr" is the address of a 1 to 44 byte data set name of an  **
**       existing file (sequential or partitioned).                  **
**                                                                   **
**   Calling @@DYNAL with a DDNAME and a zero length for the DSN     **
**   results in unallocation of that DD (and a PARM error).          **
**                                                                   **
*---------------------------------------------------------------------*
**                                                                   **
**    Author:  Gerhard Postpischil                                   **
**                                                                   **
**    This program is placed in the public domain.                   **
**                                                                   **
*---------------------------------------------------------------------*
**                                                                   **
**    Assembly: Any MVS or later assembler may be used.              **
**       Requires SYS1.MACLIB                                        **
**       Intended to work in any 24 and 31-bit environment.          **
**                                                                   **
**    Linker/Binder: RENT,REFR,REUS                                  **
**                                                                   **
*---------------------------------------------------------------------*
**    Return codes:  when R0 = R15, it's a program error code:       **
**      804 - GETMAIN failed;  20 - PARM list error                  **
**                                                                   **
**    Otherwise R15 gets the primary allocation return code, and     **
**      R0 gets the reason codes.                                    **
***********************************************************************
*  Maintenance:                                     new on 2008-06-07 *
*                                                                     *
***********************************************************************
         MACRO ,             PATTERN FOR DYNAMIC WORK AREA
&NM      DYNPAT &P=MISSING-PFX
.*   NOTE THAT EXTRA FIELDS ARE DEFINED FOR FUTURE EXPANSION
.*
&NM      DS    0D            ALLOCATION FIELDS
&P.ARBP  DC    0F'0',X'80',AL3(&P.ARB) RB POINTER
&P.ARB   DC    0F'0',AL1(20,S99VRBAL,0,0)
         DC    A(0,&P.ATXTP,0,0)       SVC 99 REQUEST BLOCK
&P.ATXTP DC    10A(0)
&P.AXVOL DC    Y(DALVLSER,1,6)
&P.AVOL  DC    CL6' '
&P.AXDSN DC    Y(DALDSNAM,1,44)
&P.ADSN  DC    CL44' '
&P.AXMEM DC    Y(DALMEMBR,1,8)
&P.AMEM  DC    CL8' '
&P.AXDSP DC    Y(DALSTATS,1,1)
&P.ADSP  DC    X'08'         DISP=SHR
&P.AXFRE DC    Y(DALCLOSE,0)   FREE=CLOSE
&P.AXDDN DC    Y(DALDDNAM,1,8)    DALDDNAM OR DALRTDDN
&P.ADDN  DC    CL8' '        SUPPLIED OR RETURNED DDNAME
&P.ALEN  EQU   *-&P.ARBP       LENGTH OF REQUEST BLOCK
         SPACE 1
&P.URBP  DC    0F'0',X'80',AL3(&P.URB) RB POINTER
&P.URB   DC    0F'0',AL1(20,S99VRBUN,0,0)
         DC    A(0,&P.UTXTP,0,0)       SVC 99 REQUEST BLOCK
&P.UTXTP DC    X'80',AL3(&P.UXDDN)
&P.UXDDN DC    Y(DUNDDNAM,1,8)
&P.UDDN  DC    CL8' '        RETURNED DDNAME
&P.ULEN  EQU   *-&P.URBP       LENGTH OF REQUEST BLOCK
&P.DYNLN EQU   *-&P.ARBP     LENGTH OF ALL DATA
         MEND  ,
         SPACE 2
@@DYNAL  START 0
         B     BEGIN-*(,R15)      SKIP ID
         DC    AL1(17),C'@@SYSTEM &SYSDATE'
BEGIN    STM   R14,R12,12(R13)    SAVE CALLER'S REGISTERS
         LR    R12,R15            ESTABLISH MY BASE
         USING @@DYNAL,R12        AND DECLARE IT
         LR    R9,R1              SAVE PARAMETER LIST ADDRESS
         LA    R0,DYNLEN          GET LENGTH OF SAVE AND WORK AREA
         GETMAIN RC,LV=(0)        GET STORAGE
         LTR   R0,R15             SUCCESSFUL ?
         BZ    HAVEDYN            YES
         L     R15,=X'00804000'   LOAD STORAGE SHORTAGE CODE
         STM   R15,R0,16(R13)     SET RETURN VALUES
         B     RETSHORT           RELOAD AND RETURN
         SPACE 1
*    CLEAR GOTTEN STORAGE AND ESTABLISH SAVE AREA
*
HAVEDYN  ST    R1,8(,R13)         LINK OURS TO CALLER'S SAVE AREA
         ST    R13,4(,R1)         LINK CALLER'S TO OUR AREA
         LR    R13,R1
         USING DYNWORK,R13
         XC    RETR15(2*4),RETR15   CLEAR CODES
         MVC   DYNLIST(ALLDYNLN),PATLIST  INITIALIZE EVERYTHING
         LM    R4,R7,0(R9)        LOAD PARM VALUES
         SPACE 1
*   NOTE THAT THE CALLER IS EITHER COMPILER CODE, OR A COMPILER
*   LIBRARY ROUTINE, SO WE DO MINIMAL VALIDITY CHECKING
*
         CH    R4,=H'100'         INTEGER OR ADDRESS ?
         BNH   *+8                INTEGER
         L     R4,0(,R4)          GET DDN LENGTH
         CH    R6,=H'100'         INTEGER OR ADDRESS ?
         BNH   *+8                INTEGER
         L     R6,0(,R6)          GET DSN LENGTH
         SPACE 1
*   PREPARE DYNAMIC ALLOCATION REQUEST LISTS
*
         LA    R0,ALLARB
         STCM  R0,7,ALLARBP+1     REQUEST POINTER
         LA    R0,ALLATXTP
         ST    R0,ALLARB+8        TEXT UNIT POINTER
         LA    R0,ALLAXDSN
         LA    R1,ALLAXDSP
         LA    R2,ALLAXDDN
         O     R2,=X'80000000'
         STM   R0,R2,ALLATXTP     TEXT UNIT ADDRESSES
         SPACE 1
*   COMPLETE REQUEST WITH CALLER'S DATA
*
         LTR   R4,R4              CHECK DDN LENGTH
         BNP   BADCALL            OOPS
         CH    R4,=AL2(L'ALLADDN)   REASONABLE SIZE ?
         BH    BADCALL            NO
         BCTR  R4,0
         EX    R4,EXMVCDDN        MOVE DD NAME
         OC    ALLADDN,BLANKS     CONVERT HEX ZEROES TO BLANKS
         CLC   ALLADDN,BLANKS     NAME SUPPLIED ?
         BNE   HAVEDDN            YES
         MVI   ALLAXDDN+1,DALRTDDN  REQUEST RETURN OF DD NAME
         CH    R4,=AL2(L'ALLADDN-1)   CORRECT SIZE FOR RETURN ?
         BE    NEEDDDN            AND LEAVE R5 NON-ZERO
         B     BADCALL            NO
         SPACE 1
HAVEDDN  SR    R5,R5              SIGNAL NO FEEDBACK
*  WHEN USER SUPPLIES A DD NAME, DO AN UNCONDITIONAL UNALLOCATE ON IT
         LA    R0,ALLURB
         STCM  R0,7,ALLURBP+1     REQUEST POINTER
         LA    R0,ALLUTXTP
         ST    R0,ALLURB+8        TEXT UNIT POINTER
         LA    R2,ALLUXDDN
         O     R2,=X'80000000'
         ST    R2,ALLUTXTP        TEXT UNIT ADDRESS
         MVC   ALLUDDN,ALLADDN    SET DD NAME
         LA    R1,ALLURBP         POINT TO REQUEST BLOCK POINTER
         DYNALLOC ,               REQUEST ALLOCATION
NEEDDDN  LTR   R6,R6              CHECK DSN LENGTH
         BNP   BADCALL            OOPS
         CH    R6,=AL2(L'ALLADSN)   REASONABLE SIZE ?
         BH    BADCALL            NO
         STH   R6,ALLADSN-2       SET LENGTH INTO TEXT UNIT
         BCTR  R6,0
         EX    R6,EXMVCDSN        MOVE DS NAME
         SPACE 1
*    ALLOCATE
         LA    R1,ALLARBP         POINT TO REQUEST BLOCK POINTER
         DYNALLOC ,               REQUEST ALLOCATION
         STM   R15,R0,RETR15      RETURN CODES
         LTR   R5,R5              NEED TO RETURN DDN ?
         BZ    PGMEXIT            NO
         MVC   0(8,R5),ALLADDN    RETURN NEW DDN, IF ANY
         B     PGMEXIT            AND RETURN
EXMVCDDN MVC   ALLADDN(0),0(R5)   COPY DD NAME
EXMVCDSN MVC   ALLADSN(0),0(R7)   COPY DATA SET NAME
         SPACE 1
BADCALL  LA    R15,20             SHOW BAD PARAMETER LIST
         STM   R15,R0,RETR15      SET RETURN CODES
*NEXT*   B     PGMEXIT
         SPACE 1
*    PROGRAM EXIT, WITH APPROPRIATE RETURN CODES
*
PGMEXIT  LR    R1,R13        COPY STORAGE ADDRESS
         L     R9,4(,R13)    GET CALLER'S SAVE AREA
         MVC   16(2*4,R9),RETR15  RETURN R15 AND R0
         LA    R0,DYNLEN     GET ORIGINAL LENGTH
         FREEMAIN R,A=(1),LV=(0)  AND RELEASE THE STORAGE
         L     R13,4(,R13)   RESTORE CALLER'S SAVE AREA
RETSHORT LM    R14,R12,12(R13) RESTORE REGISTERS; SET RETURN CODES
         BR    R14           RETURN TO CALLER
         SPACE 2
         LTORG ,
BLANKS   DC    CL44' '
         PUSH  PRINT
         PRINT NOGEN         DON'T NEED TWO COPIES
PATLIST  DYNPAT P=PAT        EXPAND ALLOCATION DATA
         POP   PRINT
         SPACE 2
*    DYNAMICALLY ACQUIRED STORAGE
*
DYNWORK  DSECT ,             MAP STORAGE
         DS    18A           OUR OS SAVE AREA
RETR15   DS    F       1/2   PRIMARY RETURN CODE
RETR0    DS    F       2/2   SECONDARY/REASON CODE
         SPACE 1
DYNLIST  DYNPAT P=ALL        EXPAND ALLOCATION DATA
DYNLEN   EQU   *-DYNWORK      LENGTH OF DYNAMIC STORAGE
         SPACE 1
*  IF AVAILABLE, REPLACE REG. EQUATES BY YREGS, REGEQU, OR ASMDREG
*    MACRO.
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 2
         PRINT NOGEN
         IEFZB4D0 ,          MAP SVC 99 PARAMETER LIST
         IEFZB4D2 ,          MAP SVC 99 PARAMETERS
         END   ,
