//COMPARE  JOB  (0904,0012,TIME,20),GERHARD,CLASS=E
/*SETUP        SYSPAK
//COMPARE PROC IGNORER=0,IGNOREL=0,LIMIT=2000,HEXSUP=0
//COMPARE  EXEC PGM=COMPARE,PARM=('NR,ISA(50K)/IGNOREL=&IGNOREL',
//            'IGNORER=&IGNORER,#LIMIT=&LIMIT,HEXSUP=&HEXSUP;')
//SYSPRINT DD   SYSOUT=A
//MTCH     DD SYSOUT=A
//*
//*
//*  INPUT DATA SETS HAVE DDNAMES IN1 AND IN2
//*
//*  COMPARE  A9007 GOMBERG  NOV 1 1974
//*
//*THIS IS VERSION 1.1
//       PEND
//AHA    EXEC  PLIXC
 COMPARE: PROC(ARG) OPTIONS(MAIN) REORDER;
         ON ERROR SNAP CALL PLIDUMP('HB');
 /* INITIALIZE=:INIT */
    /* SET UP DCLS=:DCLS */
       DCL
       1 S1,
        2 IN FILE VARIABLE,
        2 ME FIXED BIN(31),
        2 NUM, 3 (CTR,BEG,END,#,EOF) FIXED BIN(31) ,
        2 P(500)POINTER,
        2 REC CHAR(20000) VAR;
       DCL 1 S2 LIKE S1;
       DCL (IN1,IN2)FILE;S1.IN=IN1;S2.IN=IN2;
       S1.ME=1; S2.ME=2; S1.NUM,S2.NUM=0;
       DCL STORAGE RETURNS (FIXED BIN(31));
       DCL (SYSPRINT,MTCH) PRINT;
       DCL HEX1 CHAR(256);HEX1=(16)'0'××(16)'1'××(16)'2'××(16)'3'××(16)
       '4'××(16)'5'××(16)'6'××(16)'7'××(16)'8'××(16)'9'××(16)'A'××
       (16)'B'××(16)'C'××(16)'D'××(16)'E'××(16)'F';
       DCL HEX2 CHAR(256) INIT((16)'0123456789ABCDEF');
       DCL (EXTLEN,I,HX,EQU,OFFSET,MTCHFLG,IGNORER,IGNOREL)FIXED BIN(15)
        INIT(0);
       DCL HEXSUP FIXED BIN(15) INIT(0);
       DCL 1 SAV BASED, 2 LEN FIXED BIN, 2 SAVE CHAR(EXTLEN REFER(LEN));
       DCL ARG CHAR(100)VAR;
       DCL (MM,OO) FIXED BIN INIT(0);
       DCL (LENGTH,NULL,REPEAT,SUBSTR,TRANSLATE) BUILTIN;
       DCL LINENO BUILTIN;
       DCL STG FIXED BIN(31)INIT(0);
      DCL (#PRINT,#LIMIT)FIXED BIN(15)INIT(0);
    /* OPEN PRINT FILES=:PRTOPEN */
       OPEN FILE(SYSPRINT) LINESIZE(132),
       FILE(MTCH)LINESIZE(132);
       DCL (II,JJ) FIXED BIN(31) INIT(-1);
    /* PROCESS PARAMETER=:PARMPROC */
        GET STRING(ARG)DATA(IGNOREL,IGNORER,#LIMIT,HEXSUP);
      IGNORER=IGNORER+IGNOREL;IGNOREL=IGNOREL+1;
    /* ENDPAGE UNITS=:ENDPG */
       ON ENDPAGE (SYSPRINT)
       BEGIN;
       PUT PAGE EDIT
       ('RECORD NUMBER',
        'UCSF COMPARE UTILITY MISMATCH REPORT',
        'RECORD NUMBER',
        'IN FILE 1',
       'VERSION 1.1 NOV 1974',
        'IN FILE 2')
       (A,COL(48),A,COL(120),A,COL(1),A,COL(56),A,COL(124),A);
       PUT SKIP(2);
       END;
       SIGNAL ENDPAGE(SYSPRINT);
       PUT EDIT(
       'UCSF COMPARE UTILTY -- VERSION ',
       '1.1 NOV 1974',
       '                   MATCH REPORT '
       )(A)FILE(MTCH);
       PUT SKIP (3) FILE(MTCH);
    /* ENDFILE UNITS=:EOF1 */
      /* A:=S1 */
      /* B:=S2 */
       /* GENERAL ENDFILE UNIT =:EOF */
          ON ENDFILE(S1.IN)BEGIN;
          ON ENDFILE(S2.IN) S2.EOF=1;
         IF S1.#+S2.#>0×'S2'='S2' THEN DO;
          READ FILE(S2.IN) INTO (S2.REC);
          S2.CTR=S2.CTR+1;
         END;
          /* SPIN OUT FILE=:SPIN */
             DO WHILE(S2.EOF=0);
             CALL STUFF(S2);
             BULL=TRY(S2,S1);
             READ FILE(S2.IN) INTO (S2.REC);
             S2.CTR=S2.CTR+1;
             END;
          /* SECOND ENDFILE=:SEOF */
             S2.CTR=S2.CTR-1;
             CALL FLUSH(S1,S1.#,S2,S2.#);
             CALL MATCH(0,0);
             GO TO ENDIT;

          END;
                 /* =:EOF2 */
                   /* A:=S2 */
                   /* B:=S1 */
                    /* GENERAL ENDFILE UNIT =:EOF */
                       ON ENDFILE(S2.IN)BEGIN;
                       ON ENDFILE(S1.IN) S1.EOF=1;
                      IF S1.#+S2.#>0×'S1'='S2' THEN DO;
                       READ FILE(S1.IN) INTO (S1.REC);
                       S1.CTR=S1.CTR+1;
                      END;
                       /* SPIN OUT FILE=:SPIN */
                          DO WHILE(S1.EOF=0);
                          CALL STUFF(S1);
                          BULL=TRY(S1,S2);
                          READ FILE(S1.IN) INTO (S1.REC);
                          S1.CTR=S1.CTR+1;
                          END;
                       /* SECOND ENDFILE=:SEOF */
                          S1.CTR=S1.CTR-1;
                          CALL FLUSH(S1,S1.#,S2,S2.#);
                          CALL MATCH(0,0);
                          GO TO ENDIT;
                       END;
    /* INSERT SUBROUTINES=:SUBS */
       /* INSERT SUB STUFF TO INSERT RECORD IN STACK=:STUF */
         STUFF:PROC(S);
          DCL 1 S LIKE S1 CONNECTED;
          EXTLEN=LENGTH(S.REC);
          IF STG<20+LENGTH(S.REC)
           THEN
            DO;
             STG=STORAGE;
             IF STG<LENGTH(S.REC) + /* MEMORY REQUIRED TO ABORT */ 2000
              THEN
               /* =:ABRT */
                 DO;
                  S1.CTR=S1.CTR-1; S2.CTR=S2.CTR-1;
                  PUT PAGE LIST ('HOPELESS');
                 PUT SKIP LIST('STORAGE EXHAUSTED.');
                  /* =:PRINT */
                     PUT SKIP EDIT(' RECORDS ',S1.BEG,' THRU ',S1.END,
                     ' FROM FILE 1 MATCHED RECORDS ',S2.BEG,' THRU ',S2.
 END,' FROM FILE 2 ')
                     (A) FILE(MTCH);
                 PUT SKIP(5); PUT SKIP(5) FILE(MTCH);
                  CALL FLUSH(S1,S1.#,S2,S2.#);
                  STOP; /*RETURN CODE 1000 */
                  END;
             END;
          STG=STG-LENGTH(S.REC)-20;
          S.#=S.#+1;
          IF S.#>500
           THEN
            /* =:ABRT */
              DO;
               S1.CTR=S1.CTR-1; S2.CTR=S2.CTR-1;
               PUT PAGE LIST ('HOPELESS');
              PUT SKIP LIST('STORAGE EXHAUSTED.');
               /* =:PRINT */
                  PUT SKIP EDIT(' RECORDS ',S1.BEG,' THRU ',S1.END,
                  ' FROM FILE 1 MATCHED RECORDS ',S2.BEG,' THRU ',S2.END
 ,' FROM FILE 2 ')
                  (A) FILE(MTCH);
              PUT SKIP(5); PUT SKIP(5) FILE(MTCH);
               CALL FLUSH(S1,S1.#,S2,S2.#);
               STOP; /*RETURN CODE 1000 */
               END;

          ALLOCATE SAV SET(S.P(S.#));
          S.P(S.#) -> LEN=EXTLEN;
          S.P(S.#) -> SAVE=S.REC;
          END;
       /* INSERT SUB FLUSH TO FLUSH UMATCHED RECORDS FROM STACKS=:FLUSH
 */
         FLUSH:PROC(SA,J,SB,K);
          DCL (J,K)FIXED BIN(31), 1(SA,SB) LIKE S1 CONNECTED;
          /* =:FLUSHA */
            /* SC:=SA */
            /* N:=J */
             /* =:FLSH */
               /* WHO:=SC.P(I) */
                DO I = 1 TO J;
                IF #PRINT<#LIMIT THEN DO;
                IF LINENO(SYSPRINT)>59 THEN SIGNAL ENDPAGE(SYSPRINT);
          IF HEXSUP=0 THEN DO;
                PUT EDIT(SA.CTR-(SA.#-I),SA.P(I)->SAVE,TRANSLATE(SA.P(I)
 ->SAVE,HEX1),
                TRANSLATE(SA.P(I)->SAVE,HEX2))(SKIP(2),COL(1+(SA.ME=2)*1
 27),
                F(5),SKIP(0),3(COL(8),A(120)));
           END;  ELSE DO;
                PUT EDIT(SA.CTR-(SA.#-I),SA.P(I)->SAVE)
                (SKIP,COL(1+(SA.ME=2)*127),
                F(5),SKIP(0),COL(8),A(120));
             END;
                #PRINT=#PRINT+1; END;
 /* COMP ERROR??? ELSE IF (#PRINT=#LIMIT AND #LIMIT NE 0) THEN DO;
                                               PUT SKIP(2) EDIT('NUMBER
 OF ',
                 'MISMATCHED',
                 ' RECORDS SPECIFIED BY LIMIT (',#LIMIT,') HAS ALREADY B
 EEN DUMPED.',
                 '  FURTHER DUMPING SUPPRESSED.  TO DUMP MORE RECORDS NE
 XT TIME,',
                 ' CHANGE THE VALUE OF LIMIT ON YOUR EXEC CARD')(3 A,F(5
 ),A,SKIP,A,A);
                 #PRINT=#PRINT+1;
                 END;        ****END OF COMPILE ERROR */
                /* =:FREE */
                   EXTLEN = SA.P(I) -> LEN;
                   FREE SA.P(I) ->SAV;
                   STG=STG+EXTLEN+10;
                END;
                DO I = J+1 TO SA.#;
                SA.P(I-J) = SA.P(I);
                END;
                SA.# = SA.# - J;
          /* =:FLUSHB */
            /* SC:=SB */
            /* N:=K */
             /* =:FLSH */
               /* WHO:=SC.P(I) */
                DO I = 1 TO K;
                IF #PRINT<#LIMIT THEN DO;
                IF LINENO(SYSPRINT)>59 THEN SIGNAL ENDPAGE(SYSPRINT);
                IF HEXSUP=0 THEN DO;
                PUT EDIT(SB.CTR-(SB.#-I),SB.P(I)->SAVE,TRANSLATE(SB.P(I)
 ->SAVE,HEX1),
                TRANSLATE(SB.P(I)->SAVE,HEX2))(SKIP(2),COL(1+(SB.ME=2)*1
 27),
                F(5),SKIP(0),3(COL(8),A(120)));
           END;  ELSE DO;
                PUT EDIT(SB.CTR-(SB.#-I),SB.P(I)->SAVE)
                (SKIP,COL(1+(SB.ME=2)*127),
                F(5),SKIP(0),COL(8),A(120));
             END;
                #PRINT=#PRINT+1; END;
 /* COMP ERROR ?? ELSE IF (#PRINT=#LIMIT AND #LIMIT NE 0) THEN DO;
                                               PUT SKIP(2) EDIT('NUMBER
 OF ',
                 'MISMATCHED',
                 ' RECORDS SPECIFIED BY LIMIT (',#LIMIT,') HAS ALREADY B
 EEN DUMPED.',
                 '  FURTHER DUMPING SUPPRESSED.  TO DUMP MORE RECORDS NE
 XT TIME,',
                 ' CHANGE THE VALUE OF LIMIT ON YOUR EXEC CARD')(3 A,F(5
 ),A,SKIP,A,A);
                 #PRINT=#PRINT+1;
                 END;    ***END OF COMP ERROR */
                /* =:FREE */
                   EXTLEN = SB.P(I) -> LEN;
                   FREE SB.P(I) ->SAV;
                   STG=STG+EXTLEN+10;
                END;
                DO I = K+1 TO SB.#;
                SB.P(I-K) = SB.P(I);
                END;
                SB.# = SB.# - K;
          END;
       /* INSERT SUB ZAP TO DELETE MATCHED PAIR OFF BOTTOM OF STACKS=:ZA
 PR */
         ZAP:PROC;
          /* =:ZAP1 */
            /* SC:=S1 */
             /* =:ZAP */
               /* WHO:=SC.P(1) */
                /* =:FREE */
               PUT EDIT(S1.CTR-(S1.#-1), S1.P(1)->SAVE, S2.CTR-(S2.#-1))
                       (COL(1),F(5),     COL(8),A(120), COL(128),F(5) );
                   EXTLEN = S1.P(1) -> LEN;
                   FREE S1.P(1) ->SAV;
                   STG=STG+EXTLEN+10;
                DO I = 2 TO S1.#;
                S1.P(I-1) = S1.P(I);
                END;
                S1.# = S1.#-1;
          /* =:ZAP2 */
            /* SC:=S2 */
             /* =:ZAP */
               /* WHO:=SC.P(1) */
                /* =:FREE */
                   EXTLEN = S2.P(1) -> LEN;
                   FREE S2.P(1) ->SAV;
                   STG=STG+EXTLEN+10;
                DO I = 2 TO S2.#;
                S2.P(I-1) = S2.P(I);
                END;
                S2.# = S2.#-1;
          END;
       /* INSERT SUB MATCH TO KEEP TRACK OF MATCHES FOUND=:MATCH */
          MATCH:PROC(I,J);
          DCL (I,J) FIXED BIN(31);
          IF II+1=I&JJ+1=J
           THEN /*ALL THE SAME*/
            DO;
             S1.END=I; S2.END=J;
             END;
           ELSE /*CHANGE IN OFFSET OR GAP */
            DO;
             IF S1.BEG^=0
              THEN
               /* PRINT MESSAGE=:PRINT */
                  PUT SKIP EDIT(' RECORDS ',S1.BEG,' THRU ',S1.END,
                  ' FROM FILE 1 MATCHED RECORDS ',S2.BEG,' THRU ',S2.END
 ,' FROM FILE 2 ')
                  (A) FILE(MTCH);
             /* NEW MATCH FOUND=:NMF */
                DO;
                S1.BEG,S1.END=I; S2.BEG,S2.END=J;
                END;
             END;
          II=I;JJ=J;
          RETURN;
          END;
       /* INSERT SUB TRY TO LOOK FOR MATCH WITH TOP OF STACK=:TRY */
         TRY:PROC(SA,SB) RETURNS(BIT(1));
          DCL 1(SA,SB) LIKE S1 CONNECTED;
          DCL B1 BIT(1) INIT('0'B);
          DCL I FIXED BIN(31);
         MORE: DO I = 1 TO SB.#;
          IF SUBSTR(SA.P(SA.#) ->SAVE,IGNOREL,SA.P(SA.#)->LEN-IGNORER)
          =SUBSTR(SB.P(I)->SAVE,IGNOREL,SB.P(I)->LEN-IGNORER)
          & (SA.P(SA.#)->LEN = SB.P(I) -> LEN)
           THEN
            GO TO GOTCHA;
          END;
          RETURN(B1);
         GOTCHA:
          /* MATCH FOUND IN STACK=:STKMATCH */
             B1 = '1'B;
             CALL MATCH(S1.CTR-(S1.#-I)*(SA.ME=2),S2.CTR-(S2.#-I)*(SA.ME
 =1));
             CALL FLUSH(SA,SA.#-1,SB,I-1);
             CALL ZAP;
             IF S1.#=0&S2.#=0 THEN RETURN(B1);
             READ FILE(SA.IN)INTO(SA.REC);
             SA.CTR=SA.CTR+1;
             CALL STUFF(SA);
          GO TO MORE;
          END;
 /* PROCESS IN PARALLEL =:PARAPROC */
    DO WHILE(1=1);
     /* GET A PAIR OF RECORDS=:GETPR */
        READ FILE(S1.IN) INTO(S1.REC);
        S1.CTR=S1.CTR+1;
        READ FILE(S2.IN) INTO(S2.REC);
        S2.CTR = S2.CTR+1;
     IF
     /* COMPARE=:COMP */
        SUBSTR(S1.REC,IGNOREL,LENGTH(S1.REC)-IGNORER)
        =SUBSTR(S2.REC,IGNOREL,LENGTH(S2.REC)-IGNORER)
        & LENGTH(S1.REC) = LENGTH(S2.REC)
      THEN /*MATCH*/
       DO;
        CALL MATCH(S1.CTR,S2.CTR);
        /* MATCH FOUND ON READ=:MREAD */
           IF S1.#^=0×S2.#^=0
            THEN /* STUFF PENDING IN STACK */
             DO;
              CALL STUFF(S1);
              CALL STUFF(S2);
              CALL FLUSH(S1,S1.#-1,S2,S2.#-1);
              CALL ZAP;
              END;
            ELSE
               PUT EDIT(S1.CTR-S1.#, S1.REC,        S2.CTR-S2.#)
                       (COL(1),F(5), COL(8),A(120), COL(128),F(5) );
        END;
      ELSE
       DO;
        /* SAVE AND TRY STACK MATCH=:SAVANDMATCH */
             CALL STUFF(S1);
             CALL STUFF(S2);
             IF TRY(S1,S2)
              THEN;
              ELSE
               BULL=TRY(S2,S1); DCL BULL BIT(1) INIT('0'B);
        END;
     END;
 ENDIT:
 /* TERMINATION REPORTS=:REPORTS */
    PUT SKIP(3) EDIT
      (S1.CTR, ' RECORDS READ FROM FILE ONE, ',
       S2.CTR, ' RECORDS READ FROM FILE TWO')(A);
 END;
//       EXEC  ASMFC
*                  ***************************************
*                  * PL/1 SUBROUTINE NAMED STORAGE.      *
*                  * FINDS OUT THE AMOUNT OF STORAGE,    *
*                  * AVAILABLE IN THE LARGEST CONTIGUOUS *
*                  * BLOCK.                              *
*                  * RETURNS A FIXED BINARY (31) NUMBER. *
*                  * INVOKE BY THE FOLLOWING METHOD:     *
*                  * DCL STORAGE ENTRY EXTERNAL RETURNS  *
*                  * (FIXED BIN (31));                   *
*                  * X=STORAGE;/*OR IN AN EXPRESSION     *
*                  * LIKE*/     X=STORAGE-5000;          *
*                  ***************************************
STORAGE  CSECT                                   ** ENTRY STORAGE    **
         SAVE  (14,11),,*          SAVE PL/1 ENVIROMENT
         LR    11,15                             ** ESTABLISH        **
         USING STORAGE,11                        ** ADDRESSABILITY   **
         L     5,0(0,1)                          ** LA ANSWER AREA   **
         LA    0,116                             ** LA SIZE DSA REQ  **
         L     1,76(,13)           LOAD ADDR. OF NEXT AVAIL. BYTE
         ALR   0,1                 AFTER CURRENT DSA AND ADD LENGTH
         CL    0,12(,12)           COMPARE WITH LAST AVAIL BYTE
         BNH   *+10                ENOUGH CORE AVAIL.
         L     15,116(,12)         BRANCH TO PL/1
         BALR  14,15               STORAGE OVERFLOW ROUTINE
         ST    0,76(,1)            STORE NEXT AVAIL. DSA ADDR.
         ST    13,4(,1)            POINTER OF PREVIOUS DSA
         MVC   72(4,1),72(13)      COPY ADDR. OF LIB WS
         LR    13,1                REG13 POINTS TO NEW DSA
         MVI   0(13),X'80'         FLAGS IN NEW DSA TO
         MVI   86(13),X'91'        PRESERVE PL/1 ERROR-HANDLING
         MVI   87(13),X'C0'        ENVIROMENT
         LA    7,108(0,13)                       ** LA ANSWER AREA   **
         LA    8,2048              LOAD STEP REG.
         L     2,FSTSIZE           LOAD LOW SIZE.
         ST    2,SIZES             INIT LOW SIZE
GETIT    GETMAIN VC,LA=SIZES,A=(7)
         LTR   15,15
         BZ    NORMAL
         LTR   2,2                 ARE WE AT THE END?
         BZ    STORE01             YES . NO STORAGE.
         SR    2,8                 RESET LOW SIZE.
         ST    2,SIZES             SET UP LOW SIZE.
         B     GETIT
NORMAL   L     6,4(0,7)
         FREEMAIN V,A=(7)                        ** FREE MAIN        **
         B     STORE02                           ** GO TO 2          **
STORE01  SR    6,6                               ** R6 = 0           **
STORE02  ST    6,0(0,5)                          ** STORE SIZE IN ANS**
         ST    6,SAVERTRN
         L     13,4(,13)           RELEASE CURRENT DSA
         LM    14,11,12(13)        AND RESTORE REGS.
         BR    14
SIZES    DC    A(0,280000)
FSTSIZE  DC    A(143360)           INIT SIZE
SAVERTRN DC    F'0'
         END
//COMPARE  EXEC PLIXLG,COND=(4,LT),PARM.GO=('NR,ISA(50K)/IGNOREL=0',
//            'IGNORER=18,#LIMIT=2000,HEXSUP=1;'),REGION.GO=200K,
//             MEMBER=COMPARE
//SYSLMOD DD DSN=SYS1.DTSLIB(COMPARE),DISP=SHR
//SYSLIN DD DSN=&&LOADSET,DISP=(OLD,DELETE)
//GO.STEPLIB DD DSN=PLI.LINKLIB,DISP=SHR
//SYSPRINT DD   SYSOUT=A
//MTCH     DD SYSOUT=A
//IN1 DD DSN=SYS1.EXSOURCE(EXGCATLG),DISP=SHR
//IN2 DD DSN=EXH.EXSOURCE(EXGCATLG),DISP=SHR
