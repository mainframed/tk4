HMRG    TITLE 'H S P M E R G E  ***  (HASP) MULTI-LEVEL UPDATE PROGRAM'
         MACRO
&NAME    LOG   &LEV,&CC,&SP,&MSG
         LCLA  &TCC,&TSP
&NAME    BAL   R1,LOG&SYSNDX
&TCC     SETA  0
&TSP     SETA  0
         AIF   ('&CC' EQ '').CCOK
&TCC     SETA  &CC
.CCOK    AIF   ('&SP' EQ '').SPOK
&TSP     SETA  &SP
.SPOK    ANOP
         DC    AL1(&LEV,&TCC,&TSP,L'MSG&SYSNDX)
MSG&SYSNDX DC  C&MSG                                            GP97206
LOG&SYSNDX L   R15,=A(LOG)   GET THE LOG WRITER ADDRESS         GP97206
         BALR  R14,R15       INVOKE LOGGER                      GP97206
         MEND
         SPACE 1    ***** N.B.  NOT RENT, NOT REFR, NOT REUS *****
         PUNCH ' ALIAS HASPMRGE'   APPLY LEVEL SETS AS PROVIDED
         PUNCH '  ORDER HSPMERGE(P) '  EASIER DUMPS
         EJECT ,
*
*        HASP 3.98 MERGE PROGRAM
*
*        DEVELOPED JOINTLY BY:
*
*        JIM OBERTHALER - NATIONAL INSTITUTES OF HEALTH COMPUTER CENTER
*
*        ROGER FAJMAN   - WYLBUR SYSTEMS INCORPORATED
*
**********************************************************************
*
*        MODIFICATIONS (BY G. POSTPISCHIL) :
*
*        LEVEL INSERTION INTO CARDS CORRECTED - NO LONGER INSERTS
*              LEVEL INTO WTO STRINGS, ETC.
*              ADDS COMMA ON VERY BLANK CARDS (END, MACRO, ETC.)
*        ./ SKIP CARDS WITH LEVELS OMITTED SUPERCEDE LOWER LEVELS ONLY
*
*        NEW FACILITY ADDED :  ./ COPY NAME=
*              REQUESTED MEMBERS (INPUT TYPE) ARE ADDED FROM THE
*              PDS(S) DEFINED BY INPDS.     EACH MEMBER MUST BE
*              COMPLETE IN ITSELF (LEVEL, LOG, CHANGE, ETC.)
*              COPY STATEMENTS MAY BE INCLUDED IN OTHER MEMBERS
*              PRIOR TO THE FIRST LEVEL/ADD/CHANGE CARD, OR MAY BE
*              ADDED ELSEWHERE IF THE SEQUENCE NUMBER IS CORRECT.
*                                                                81117
*      PGM=HASPMRGE   :   LEVELS PROCESSED IN THE ORDER SUPPLIED 81117
*      PGM=HSPMERGE   :   LEVELS PROCESSED IN COLLATING SEQUENCE 81117
*
*        JCL :
*
*        // EXEC PGM=HSPMERGE,REGION=512K
*        //SYSPRINT DD SYSOUT=*        MERGED OUTPUT LISTING
*        //ERRORS   DD SYSOUT=*        ERROR AND MESSAGE LOG
*        //SYSUT1 DD DSN=SYS1.HASPSRC,DISP=SHR   LIBRARY TO BE UPDATED
*        //SYSUT2 DD DSN=SYS1.HASPNEW,DISP=(,KEEP)...  NEW LIBRARY
*        //WORK  DD UNIT=SYSDA,SPACE=(CYL,(1,1),RLSE,CONTIG) INPUT COPY
*        //INPDS DD DSN=SYS1.HASPMODS,DISP=SHR LIBRARY OF MODIFICATIONS
*        //SYSIN DD          ONE OR MORE SEQUENTIAL DISK DATASETS
*                            MAY BE UNLIKE, CONCATENATED, ETC.
*                            WILL BE COPIED TO 'WORK' FOR PROCESSING
*        ./    COPY  NAME=HASPMODS  USE CHANGES IN MEMBER HASPMODS
*                      IN INPDS DATASET (MAY CONTAIN OTHER COPY STMTS)
*        ./    LEVEL NEWSTUFF    TEMPORARY MODS
*        ./    ADD/CHANGE      CONTROL/UPDATE CARDS PROPERLY SEQUENCED
*
*        A SUCCESSFUL RUN SHOULD BE FOLLOWED BY AN IEBCOPY FROM THE
*              OLD PDS TO THE NEW PDS IF SYSUT2 IS TO BE USED FOR
*              ASSEMBLIES - IT'S EASIER THAN TRYING TO CONCATENATE
*              MACLIBS AND SWITCHING BETWEEN TWO SYSINS ON SUBSEQUENT
*              ASSEMBLIES.
*                                                                87025
*        ./    NUMBER NEW1=SEQ,INCR=NUM   HEADER FOR UNNUMBERED CARDS
*        ./    INSERT SEQ1=SEQ,NEW1=SEQ,INCR=NUM   DITTO         87025
*                                                                87025
*        UNNUMBERED CARDS MAY BE USED FOLLOWING A SKIP AND DELETE CARD,
*        (WITH DEFAULT INCR OF 1), OR AN EXPLICIT NUMBER OR INSERT CARD
*        NEW1, SEQ1 MAY BE OMITTED (DEFAULT TO 73/80 SEQ - 1); INCR
*        DEFAULTS TO 1.  ALL SEQUENCES MAY BE ALPHAMERIC, BUT    87025
*        INCREMENTED POSITIONS SHOULD BE NUMERIC (NOT CHECKED).  87025
*                                                                88361
*        SUPPORT FOR MACRO LIBRARY ADDED (SYSUT3=>SYSUT4; USE ADD/CHG
*              MACR= INSTEAD OF NAME=).  THIS CHANGE ALLOWS PARALLEL
*              MACRO AND SOURCE CHANGES IN THE SAME UPDATES.     88361
*                                                               GP97206
*        CHANGES FOR ESA:  PREVENT ADDRESSABILITY PROBLEMS WHEN SERVICE
*          IS NOT INSTALLED AS AN SVC.                          GP97206
*                                                               GP97266
*        SUPPORT ADDED FOR ./ COPY USING A RANGE NAME=LOW/HIGH  GP97266
*          OR A MASK (USING ? AND * AS WILD-CARDS). USING THESE GP97266
*          REQUIRES INPDS TO BE AN UNCONCATENATED PDS OR PDS/E  GP97266
*
*   FIXES FOR MVS 3.8J: BAS->BAL, ETC.                          GP05225
*
         SPACE 1                                                 88361
         COPY  OPTIONGB      COPY GLOBAL DEFINITIONS             88361
         SYSPARM LIST=YES    SET AND LIST OPTIONS                88361
         SPACE 2
         GBLA  &MAXLEVS,&TOTCHNG,&COPYMAX,&INPBUFF,&OUTBUFF     GP13250
&MAXLEVS SETA  65                                                81117
&TOTCHNG SETA  650                                               81117
&INPBUFF SETA  32720    SET TO LARGEST LEGAL SIZE               GP13250
&OUTBUFF SETA  6160     LIMIT TO SMALLEST AVAILABLE DASD        GP13250
&COPYMAX SETA  60            NUMBER OF ./ COPY NAMES             81117
         TITLE 'H S P M E R G E  ***  PASS 1'                    85237
         PRINT &PRTSOR                                           88361
         SPLEVEL SET=1  *TEMP*SHORTER MACROS*                   GP97205
HSPMERGE PGMHEAD ZERO12,BASE=(R11,R12),PARM=R9,BNDRY=PAGE,             *
               ENTRY=HASPMRGE,ENTNO=ENTRFLAG                    GP11107
         SPACE 3
LEVEL    DSECT
MODULE   DS    CL8
MACFLAG  DS    X             SYSUT1/SYSUT3 FLAG                  88361
MINKEY   EQU   MODULE,*-MODULE,C'C'  MINIMUM KEY                 88361
LEVNAME  DS    CL8
MAXKEY   EQU   MODULE,*-MODULE,C'C'  MAXIMUM SORT KEY            88361
MEMINDX  DS    H           INDEX INTO COPY MEMBER TABLE FOR FIND *GPP*
CARDPTR  DS    A
CURTTR   DS    F
BUFPTR   DS    A
CURBLOK  DS    H
BLKINCR  DS    H
CURSEQ   DS    CL8     1/2
SUPPL    DS    X       2/2         EXTENSION OF SEQUENCE FIELD
TYPE     DS    X                   ADD OR CHNGE FLAG
TPADD    EQU   1             ADD REQUEST                         85237
TPCOPY   EQU   X'10'         COPY MEMBER FROM PDS                85237
TPNUM    EQU   X'80'         ./ INSERT FOUND; INCR. IN MEMINDX   85237
MEMINCR  DS    H             INCREMENT FOR AUTOMATIC NUMBERING   91063
         DS    0F            FORCE ALIGNMENT                     88361
LEVLEN   EQU   *-LEVEL       SIZE OF ONE ENTRY                   88361
NEXTLEV  DS    CL(LEVLEN)    NEXT SUCCEEDING ENTRY              GP11107
         SPACE 1                                                 88361
SOURCE   EQU   R2
START    EQU   R3
STOP     EQU   R4
WA       EQU   R5
WB       EQU   R6
WC       EQU   R7
WD       EQU   R8
WE       EQU   R9
RLL      EQU   R10                                               81117
HSPMERGE CSECT ,                                                 88361
         SPACE 1                                                 88361
*   NOTE:  ENTRY HSPMERGE SORTS LEVELS AS WELL AS MODULE NAMES
*   ENTRY HASPMERG PROCESSES LEVELS IN THE ORDER FOUND IN INPUT.
         MVC   LEVELSEQ+1(1),ENTRFLAG  COPY ENTRY SWITCH        GP11107
         TR    LEVELSEQ+1(1),=AL1(L'MAXKEY-1,L'MINKEY-1)        GP11107
         MVC   PRTFILE(PATFILEN),PATFILE  MAKE SYSPRINT WORKAREA 88361
         MVC   CURLOG,ORIGLOG  INITALIZE                        GP97206
         LA    R9,0(,R9)     CLEAR HIGH BYTE                     88361
         LTR   R9,R9         ANY PARM POINTER ?                  88361
         BZ    EPSCAN        NO                                  88361
         L     R1,0(,R9)           POINT TO PARM INFO
         LH    R2,0(,R1)           PICK UP COUNT
         LTR   R2,R2               ZERO?
         BNP   EPSCAN        SKIP LOOP IF NONE OR BAD            88361
         LA    R1,1(R1,R2)         POINT TO LO-ORDER BYTE
CLINP    CLI   0(R1),C'D'          DEBUG OPTION
         BNE   PINDEB              BR IF NOT
         MVI   DEBSW,1             SET DEBUG SW ON
PINDEB   DS    0H
         CLI   0(R1),C'L'          DEFAULT LOG LEVEL CHANGE?
         BNE   PINLOG              BR IF NOT
         MVC   ORIGLOG(2),1(R1)    PICK UP NEW DEFAULT
PINLOG   DS    0H
         BCTR  R1,0                SHIFT LEFT ONE CHARACTER
         BCT   R2,CLINP            LOOK AT ALL THE CHARACTERS
EPSCAN   L     R0,=A((&TOTCHNG+1)*LEVLEN)  CHANGE CONTROL ENTRIES
         ST    R0,DBLWK      SAVE FOR LATER                      88361
         L     R2,=A((&MAXLEVS+3)*&INPBUFF)  BUFFER SPACE       GP13250
         ST    R2,DBLWK+4    SAVE FOR LATER                      88361
         L     R3,=A(9*&COPYMAX)  SIZE FOR COPY NAME TABLE       88361
         AR    R0,R2         CONTROL + BUFFERS                   88361
         ST    R3,DB2        SAVE TABLE SIZE                     88361
         LA    R3,1(,R3)     PLUS STOPPER                        88361
         AR    R0,R3         TOTAL GETMAIN SIZE                  88361
         LR    R5,R0         SAVE TOTAL SIZE                     88361
         GETMAIN R,LV=(0)    GET SPACE (OR BOMB)                 88361
         LR    R4,R1         SAVE THE START ADDRESS              88361
         ST    R1,@SOURCE    POINT TO BASE SOURCE LEVEL          88361
         LA    R14,LEVLEN(,R1)  FIRST ENTRY PAST                 88361
         ST    R14,@LEVONE   SAVE FIRST LEVEL                    88361
         A     R1,DBLWK      POINT TO END OF LEVELS              88361
         ST    R1,@LEVEND    SAVE LAST                           88361
         ST    R1,@OBUF      DOUBLES AS OUTPUT BUFFER ADDRESS    88361
         LR    R15,R1                                            88361
         SH    R15,=H'80'                                        88361
         ST    R15,OBLKPTR   PRESET FOR NEXT INCREMENTATION      88361
         LR    R14,R1        COPY                                88361
         AH    R14,=Y(&INPBUFF)  POINT TO FIRST OF INPUT BUFFER PAIR
         ST    R14,@INBUF    SAVE IT                             88361
         AH    R14,=Y(&INPBUFF)  PAST FIRST INBUF               GP13250
         ST    R14,@INBUF2   SAVE SECOND BUFFER                  88361
         AH    R14,=Y(&INPBUFF)     PAST SECOND INBUF           GP13250
         ST    R14,@MDBUF    MODIFICATION BUFFERS                88361
         A     R1,DBLWK+4    SPACE PAST ALL BUFFERS              88361
         ST    R1,@COPYTAB   SAVE COPYTABLE ADDRESS              88361
         LR    R14,R1        COPY COPYTABLE                      88361
         SH    R14,=Y(&INPBUFF)  LAST COMPLETE BUFFER           GP13250
         ST    R14,@LASTBUF  STASH IT                            88361
         SLR   R14,R14                                           87025
         SLR   R15,R15                                           87025
         MVCL  R4,R14        CLEAR MEMORY FOR SHORTER DUMPS      88361
         L     WA,@SOURCE    GET FIRST 'LEVEL'                   88361
         LA    RLL,LEVLEN                                        88361
         USING LEVEL,WA      GLOBAL USE                          88361
INITLEVS MVC   MODULE(L'MAXKEY),=(L'MAXKEY)X'FF'  SET STOPPER    88361
         AR    WA,RLL                                            88361
         C     WA,@LEVEND                                        88361
         BL    INITLEVS      DO ALL                              88361
         L     WA,@SOURCE    RESTORE FIRST ENTRY                 88361
         MVC   MODULE,=8X'AA'   WHY ?                            88361
         MVC   LEVNAME,=CL8'SOURCE'                              88361
         L     R14,@INBUF                                        88361
         AH    R14,=Y(&INPBUFF)     SECOND BUFFER               GP13250
         ST    R14,BUFPTR    STASH POINTER                       88361
         MVC   CURSEQ,=CL8' '  BLANK INITIAL SEQUENCE            88361
         L     R15,@COPYTAB  GET COPY TABLE                      88361
         A     R15,DB2       PLUS TABLE SIZE                     88361
         MVI   0(R15),X'FF'  STOPPER                             88361
         SPACE 1                                                 88361
         SERVINIT LPA=NO     INITIALIZE SERVICE ROUTINE          90186
         SERVLOAD @PRINTER   LOAD THE PRINT ROUTINE             GP10260
         EJECT ,                                                 90334
*        DURING PASS1 REGISTERS ARE USED AS FOLLOWS:
*
*        R0    PARAMETER PASSING
*        R1        "        "
*        R2    UNUSED
*        R3       "
*        R4       "
*        R5    (WA) INDEX IN LEVELS TABLE
*        R6    (WB) POINTER TO CURRENT CARD IN INPUT BUFFER
*        R7    (WC) POINTER TO FIRST BYTE PAST BUFFER
*        R8    (WD) LOCAL WORK REG
*        R9    (WE) REMEMBERS CURRENT TTR
*        R10   (RLL) LENGTH OF AN ENTRY IN LEVELS TABLE          81117
*        R11   FIRST BASE REGISTER                               81117
*        R12   SECOND BASE REGISTER                              81117
*        R13   POINTS TO OUR SAVE AREA
*        R14   ACCESS METHOD LINKAGE
*        R15   ACCESS METHOD LINKAGE
         SPACE 1                                                 90334
PROCEED  DS    0H
         OPEN  MF=(E,INCOPLST)  OPEN SYSIN / WORK DD
         TM    SYNPUT+DCBOFLGS-IHADCB,DCBOFOPN OPEN ?            *GPP*
         BZ    BADDD         NO                                  *GPP*
         TM    WORKDD+DCBOFLGS-IHADCB,DCBOFOPN DITTO ?           *GPP*
         BZ    BADDD         DITTO                               *GPP*
PROCOPY  GET   SYNPUT        GET INPUT RECORD                    *GPP*
         TM    CONFLAG,2     IS SKIP FLAG ON ?                   *GPP*
         MVI   CONFLAG,1     TURN IT OFF ANYWAY                  *GPP*
         BNZ   PROCOPY       YES - SKIP BAD CONCATENATION RECORD *GPP*
         LR    R0,R1         COPY FOR PUT                        *GPP*
         PUT   WORKDD,(0)    PUT IT OUT                          *GPP*
         B     PROCOPY       GET NEXT RECORD                     *GPP*
         SPACE 2                                                 *GPP*
INPEOF   CLOSE MF=(E,INCOPLST)  CLOSE SYSIN AND WORK DD
         LA    R2,SYNPUT     FREE BUFFER POOL
         BAL   R9,FREEBUFF
         LA    R2,WORKDD     FREE BUFFER POOL                    *GPP*
         BAL   R9,FREEBUFF
         OPEN  (SYSIN)                                           88361
         TM    SYSIN+DCBOFLGS-IHADCB,DCBOFOPN SYSIN OK?
         BZ    BADDD                   BR IF NOT
         PRTOPEN PRTFILE,DEV=1  OPEN THE PRINT FILE              88361
         LR    R2,R15        SAVE THE RETURN CODE                90334
         PRTOPEN ERRFILE,DEV=2  OPEN ERRORS/SUMPRINT FILE        88361
         CH    R15,=H'4'                                         88361
         BNH   GOTMODS                 BR IF ALL OK              88361
         CH    R2,=H'4'      DETAIL PRINT FILE AVAILABLE ?       90334
         BNH   GOTMODS       YES; PROCEED                        90334
BADDD    WTO   '*** HASPMERGE *** REQUIRED DD CARD MISSING/INVALID' GPP
ABEND    SERVTERM ,                                              88361
         ABEND 16,DUMP                                           *GPP*
         SPACE 1
FREEBUFF FREEPOOL (R2)
         BR    R9
INCOPLST OPEN  (SYNPUT,(INPUT,REREAD),WORKDD,OUTPUT),MF=L  OPEN LIST
         SPACE 2
GOTMODS  DS    0H
         PRTF  PHDR2A,PHDR2ALN,DEV=2,TITLE=1  WRITE TITLE        88361
         PRTLIST PHDR2B,PHDR2BLN,DEV=2,TITLE=3  WRITE SUB-TITLE  88361
         USING LEVEL,WA            UNTIL FURTHER NOTICE
         LA    RLL,LEVLEN          VALID THROUGHOUT PROGRAM
         L     WA,@SOURCE    INITIAL SETTING                     88361
         MVI   COPYFLAG,0    INITIALIZE 'COPY' PROCESSING FLAG   *GPP*
         B     P1GO                PROCEED
         SPACE 1
P1NREC   LA    WB,80(,WB)          BUMP TO NEXT CARD
         CR    WB,WC               PAST END OF BLOCK?
         BL    P1BLOKOK            BR IF NOT
P1GO     DS    0H                  ENTER HERE FIRST TIME
         LA    WC,SYSIN      LOAD NORMAL INPUT DCB               *GPP*
         CLI   COPYFLAG,0    SYSIN PASS ?                        *GPP*
         BE    *+8           YES                                 *GPP*
         LA    WC,COPYLIB    ELSE USE INPUT PDS                  *GPP*
         L     WE,@MDBUF     GET MODIFICATION BUFFER             88361
         READ  P1DECB,SF,(WC),(WE),'S'                           88361
         CHECK P1DECB
         NOTE  (WC)                                              *GPP*
         LR    WE,R1               REMEMBER CURRENT TTR
         ST    WE,DBLWK            GET IT INTO CORE
         UNPK  DB2(7),DBLWK(4)    MAKE IT PRETTY                 88361
         MVC   PL1LOC+12(6),DB2   MOVE INTO MESSAGE              88361
         TR    PL1LOC+12(6),UPTOHEX     "   "    "
         LH    WC,MAXBLOK(,WC)     GET MAX COUNT FOR READ        *GPP*
         L     R1,P1DECB+16        R1 --> IOB
         SH    WC,14(,R1)          SUBTRACT RESID COUNT FROM CSW
         L     WB,@MDBUF           POINT WB TO FIRST CARD IMAGE IN BUFR
         AR    WC,WB               POINT WC TO FIRST BYTE PAST BUFFER
         SPACE 1
P1BLOKOK DS    0H
         CLI   DEBSW,1             DEBUGGING?
         BNE   NDB1                BR IF NOT
         LR    R0,WB               POINT AT CURRENT CARD
         S     R0,@MDBUF           GET BUFFER OFFSET             88361
         ST    R0,DBLWK            STORE IT
         UNPK  DB2(5),DBLWK+2(3)  SPREAD IT OUT                  88361
         MVC   PL1LOC+27(4),DB2   MOVE INTO MESSAGE              88361
         TR    PL1LOC+27(4),UPTOHEX  MAKE IT LOOK RIGHT
         LR    R0,WB               GET BUFFER LOC AGAIN
PL1LOC   LOG   HIGH,,1,'TTR=______, OFFSET=____'
NDB1     DS    0H
         CLC   =C'./',0(WB)      CONTROL CARD?
         BNE   P1NREC              BR IF NOT
         LA    R1,2(,WB)           SET FOR SCANNING
         LA    R0,72(,WB)
         BAL   R14,SCANVERB        GET THE VERB
         CLC   =C'LEVEL ',SCANOUT
         BE    P1LEVEL
         CLC   =C'CHNGE ',SCANOUT
         BE    P1CHNGE
         CLC   =C'CHANGE ',SCANOUT
         BE    P1CHNGE
         CLC   =C'ADD ',SCANOUT
         BE    P1ADD
         CLC   =C'REPL ',SCANOUT
         BE    P1REPL
         CLC   =C'COPY ',SCANOUT   COPY STATEMENT ?              *GPP*
         BNE   P1NREC              IGNORE OTHERS FOR NOW         *GPP*
         SPACE 1                                                 *GPP*
         L     R15,=A(P1COPY)  GO TO COPY ANALYSIS ROUTINE      GP97266
         BALR  R14,R15       INVOKE IT                          GP97266
         B     P1NREC        GET NEXT RECORD                     *GPP*
         SPACE 1
P1REPL   STM   R0,R1,DB2     PRESERVE OVER LOGGING CALL          93010
*WHY     LR    R0,WB               LOG THE CARD
*WAS     MVC   *+6+8(8),CURLEVEL  SHOW WHERE                     88361
*THIS?   LOG   ERR,16,,'XXXXXXXX: REPL ILLEGAL   *** ERROR'      88361
         LM    R0,R1,DB2     RESTORE SCAN POINTERS               93010
*
P1ADD    AR    WA,RLL              NEXT ENTRY
         C     WA,@LEVEND                                        88361
         BNL   P1OVER
         MVI   TYPE,TPADD          SET ADD TYPE                  85237
         B     P1NLEV
         SPACE 1
P1CHNGE  DS    0H
         AR    WA,RLL              WA --> NEXT TABLE ENTRY
         C     WA,@LEVEND    STILL WITHIN TABLE?                 88361
         BL    P1NLEV              BR IF SO TO CONTINUE
P1OVER   LR    R0,WB               LOG THE CARD
         SPACE 1
         LOG   ERR,16,,'&&TOTCHNG (&TOTCHNG) EXCEEDED  *** ERROR'
         B     ABEND
         SPACE 1
P1BADCH  LR    R0,WB
         MVC   *+6+8(8),CURLEVEL                                 88361
         LOG   ERR,16,,'XXXXXXXX: MEMBER NAME MISSING   *** ERROR'
         B     ABEND
         SPACE 1
P1NLEV   MVI   MACFLAG,0     PRESET FOR SOURCE (OR ANY)          88361
         CR    R1,R0               END OF CARD?
         BNL   P1BADCH             BR IF SO
         CLC   =C'MACR=',0(R1)  MACRO CHANGE ?                   88361
         BE    P1CHNMAC      YES                                 88361
         CLC   =C'NAME=',0(R1)     IEBUPDTE TYPE?
         BE    P1CHNM        YES                                 88361
         CLC   =C'MACRO=',0(R1)                                  88361
         BNE   P1CHFNM-4           BR IF NOT                     88361
P1CHNMCR LA    R1,1(,R1)     ONE LONGER THAN MACR=               88361
P1CHNMAC MVI   MACFLAG,1     SHOW MACRO                          88361
P1CHNM   LA    R1,5(,R1)           BUMP OVER NAME=
         BAL   R14,SCANFLD         GET THE NAME
P1CHFNM  CR    R1,R0               END OF CARD?
         BNL   P1CHCK              BR IF SO
         CLI   0(R1),C' '          END OF PARMS?
         BE    P1CHCK              BR IF SO
         CLC   =C'NAME=',0(R1)     IEBUPDTE?
         BE    P1CHNM              BR IF SO
         CLC   =C'MACR=',0(R1)  MACRO CHANGE ?                   88361
         BE    P1CHNMAC      YES                                 88361
         CLC   =C'MACRO=',0(R1)                                  88361
         BE    P1CHNMCR      YES; SKIP OVER IT                   88361
         BAL   R14,SCANNBC         SCAN TO NEXT
         B     P1CHFNM
*
P1CHCK   CLI   SCANOUT,C' '        NAME FOUND?
         BE    P1BADCH             BR IF NOT
         ST    WE,CURTTR           REMEMBER STARTING TTR FOR THIS LEV
         SPACE 1
         LR    WD,WB               COMPUTE
         S     WD,@MDBUF             CURRENT CARD                88361
         STH   WD,BLKINCR              OFFSET & SAVE IT
         SPACE 1
         MVC   MODULE,SCANOUT      SAVE MODULE NAME
         MVC   LEVNAME,CURLEVEL    SAVE MODIFICATION LEVEL
         OC    TYPE,COPYFLAG   OR INPUT LIBRARY IN FLAG BYTE     *GPP*
         MVC   MEMINDX,COPYINDX  ADD COPY INDEX FOR FIND         *GPP*
         B     P1NREC              GO BACK FOR NEXT CARD
         SPACE 1
P1LEVEL  DS    0H
         BAL   R14,SCANFLD         EXTRACT THE LEVEL-ID
         CLC   SCANOUT,=CL8' '     BLANK LEVEL?
         BE    P1BADLV             YUP
         MVC   CURLEVEL,SCANOUT    SAVE IT IN CURLEVEL
         SPACE 1
         L     WD,@SOURCE    SCAN EXISTING LEVS FOR DUP          88361
P1LCLC   CLC   CURLEVEL,LEVNAME-LEVEL(WD)  FIND A MATCH?
         BE    P1LERR                      BR IF YES
         AR    WD,RLL              STEP TO NEXT ENTRY
         CR    WD,WA               ARE WE PAST THE END?
         BNH   P1LCLC              BR IF NO TO LOOK AGAIN
         B     P1NREC              GO GET THE NEXT CARD
         SPACE 1
P1LERR   LR    R0,WB               POINT TO BAD CARD FOR LOGGING
         MVC   *+6+8(8),CURLEVEL  SHOW WHERE FROM                88361
      LOG ERR,16,,'XXXXXXXX: DUPLICATE LEVEL ALREADY EXISTS  *** ERROR'
         B     ABEND
         SPACE 1
         DROP  WA
P1BADLV  LOG   ERR,20,,'LEVEL NAME MISSING   *** ERROR'
         B     ABEND
         SPACE 1
UPTOHEX  EQU   *-C'0'              SAVE SPACE
         DC    C'0123456789ABCDEF' FOR TRANSLATION
         TITLE 'H S P M E R G E  ***   PROCESS INPUT PDS COPIES' 85237
PASS1A   CLI   COPYFLAG,0    END OF SYSIN ?                      *GPP*
         BNE   PASS1AX       NO; PROCESS NEXT COPY MEMBER        *GPP*
         L     R2,@COPYTAB   GET COPY TABLE                      88361
         TM    0(R2),X'FF'   ANY ACTIVE ENTRIES ?                *GPP*
         BNM   PASS2         NO; SKIP COPY PHASE                 *GPP*
         OPEN  (COPYLIB)     OPEN INPUT PDS                      *GPP*
         TM    COPYLIB+DCBOFLGS-IHADCB,DCBOFOPN OPEN ?           *GPP*
         BNZ   PASS1AB       OK                                  *GPP*
         SLR   R0,R0                                             *GPP*
         LOG   ERR,20,,'INPDS DD CARD NOT SUPPLIED - COPY STATEMENTS EX*
               IST'                                              *GPP*
         B     ABEND                                             *GPP*
PASS1AB  MVI   COPYFLAG,TPCOPY  SHOW SECOND PHASE OF PASS 1      85237
         B     PASS1AY       R2 SET FOR START OF TABLE           *GPP*
         SPACE 1                                                 *GPP*
PASS1AX  L     R2,COPYSAVE   GET NEXT ADDRESS                    *GPP*
         LA    R2,9(,R2)                                         *GPP*
PASS1AY  TM    0(R2),X'FF'   END OF TABLE ?                      *GPP*
         BNM   PASS2         YES - FINISHED PASS 1               *GPP*
         ST    R2,COPYSAVE   REMEMBER THE ADDRESS FOR NEXT TIME  *GPP*
         LR    R1,R2         COPY THE ADDRESS                    *GPP*
         S     R1,@COPYTAB   EVERYTHING IS RELATIVE ?            88361
         SLR   R0,R0         CLEAR FOR DIVIDE                    *GPP*
         D     R0,=F'9'      MAKE INTO INDEX                     *GPP*
         STH   R1,COPYINDX   SAVE                                *GPP*
         FIND  COPYLIB,1(R2),D  FIND THE MODULE                  *GPP*
         LTR   R15,R15       FOUND ?                             *GPP*
         BZ    P1GO          YES - READ THE MODULE               *GPP*
         SLR   R0,R0         NO CARD IMAGE                       *GPP*
         MVC   PASS1AM+20(8),1(R2)  MOVE MODULE NAME             *GPP*
PASS1AM  LOG   ERR,12,,'COPY MODULE XXXXXXXX NOT FOUND IN INPDS' *GPP*
         B     PASS1AX       TRY NEXT ONE                        *GPP*
         TITLE 'H S P M E R G E  ***  PASS 2'                    85237
         SPACE 1
***** COMMENTS ON REGISTER USAGE DURING PASS2 ***
         SPACE 1
*        R0    PARAMETER PASSING
*        R1        "        "
*        R2    (SOURCE) --> HASP SOURCE ENTRY IN LEVEL TABLS
*        R3    (START)  --> STARTING ENTRY IN LEVELS SUBSET
*        R4    (STOP) --> ENDING ENTRY IN LEVELS SUBSET BEING PROCESSED
*        R5    (WA) --> LEVELS ENTRY BEING PROCESSED
*        R6    (WB) VARIOUS USES
*        R7    (WC) VARIOUS USES
*        R8    (WD) VARIOUS USES
*        R9    (WE) VARIOUS USES
*        R10   (RLL) CONTAINS LEVLEN                             81117
*        R11   FIRST BASE REGISTER                               81117
*        R12   SECOND BASE REGISTER                              81117
*        R13   POINTS TO MERGSAVE
*        R14   SUBROUTINE AND ACCESS METHOD LINKAGE
*        R15   ACCESS METHOD LINKAGE
         SPACE 1                                                 90334
PASS2    CLI   RETCODE+3,8   ERROR DURING PASS1/1A ?             *GPP*
         BNL   FINERRM       YES - QUIT NOW                      *GPP*
   MVC COPYLIB+DCBEODAD-IHADCB+1(3),=AL3(P2EODAB) SET PASS2 EOD  *GPP*
        MVC SYSIN+DCBEODAD-IHADCB+1(3),=AL3(P2EODAD) SET PASS2 EOD ADR
         LH    R1,MAXBLOK+SYSIN   GET SYSIN BLOCKSIZE            *GPP*
         CH    R1,MAXBLOK+COPYLIB  COMPARE TO PDS SIZE           *GPP*
         BNL   *+8           LARGER                              *GPP*
         LH    R1,MAXBLOK+COPYLIB   ELSE USE PDS SIZE            *GPP*
         STH   R1,BLOKMAX    FOR BUFFER SIZE                     *GPP*
         SPACE 1
*   ENTRIES ARE SORTED BY MEMBER NAME SEQUENCE (AND INPUT ORDER) FOR
*     HSPMERGE; OR BY MEMBER/LEVEL SEQUENCE FOR HASPMERG.
*   A BUBBLE SORT IS USED TO KEEP EQUAL KEYS IN SEQUENCE.
*
SORT     DS    0H
         USING LEVEL,WA
NXTPASS  L     WA,@LEVONE    WA --> FIRST MODIFICATION LEVEL     88361
         MVI   QUITSW+1,0          SET SW TO FALL THROUGH
NXTPAIR  CLI   NEXTLEV,X'FF'       REACHED END OF LIST?         GP11107
         BE    QUITSW              BR IF SO
LEVELSEQ CLC   MODULE(*-*),MODULE-LEVEL+NEXTLEV  IN SEQUENCE?   GP11107
         BNH   NSWAP                    BR IF NOT
         XC    LEVEL(LEVLEN),NEXTLEV  SWAP WITHOUT              GP11107
         XC    NEXTLEV(LEVLEN),LEVEL  AN ADDITIONAL BUFFER      GP11107
         XC    LEVEL(LEVLEN),NEXTLEV  BUFFER                    GP11107
         MVI   QUITSW+1,X'F0'      NOTE THAT SOMEBODY MOVED
NSWAP    LA    WA,NEXTLEV          GO TO NEXT PAIR              GP11107
         B     NXTPAIR
         SPACE 1
QUITSW   BC    *-*,NXTPASS         DO IT AGAIN IF ANYTHING MOVED
         SPACE 2                                                 90334
         TM    SYSUT1-IHADCB+DCBOFLGS,DCBOFOPN  RECURSION ?      88361
         BNZ   P2CKSRC       YES; SKIP OPENS                     88361
     OPEN (SYSUT1,(INPUT))   OPEN INPUT LIBRARY
         TM    SYSUT1+DCBOFLGS-IHADCB,DCBOFOPN  PRESENT ?        88361
         BZ    BADDD         NO; FAIL                            88361
         DEVTYPE DCBDDNAM-IHADCB+SYSUT3,DB2  SYSUT3 DD PRESENT ? 88361
         BXH   R15,R15,P2NOUT3  NO                               88361
     OPEN (SYSUT3,(INPUT))   OPEN MACRO INPUT LIBRARY            88361
         SPACE 1
P2NOUT3  OPEN  (SYSUT2,(OUTPUT))  OPEN OUTPUT LIBRARY            88361
         TM    SYSUT2+DCBOFLGS-IHADCB,DCBOFOPN  OPEN ?           88361
         BZ    BADDD         NO; FAIL                            88361
         TM    SYSUT3+DCBOFLGS-IHADCB,DCBOFOPN  MACRO PROCESSING ?
         BZ    P2CKSRC       NO                                  88361
         OPEN  (SYSUT4,(OUTPUT))  TRY TO OPEN MACRO OUTPUT       88361
         TM    SYSUT4+DCBOFLGS-IHADCB,DCBOFOPN  DID IT TAKE ?    88361
         BZ    BADDD         NO; ERROR                           88361
P2CKSRC  LH    R1,DCBBLKSI-IHADCB+SYSUT2
         AL    R1,@OBUF            LOCATE END OF
         ST    R1,OBUFEND          OUTPUT BUFFER
         SPACE 1
         L     START,@LEVONE  START --> FIRST MODIFICATION ENTRY 88361
         SPACE 1
P2CKEND  CLC   MODULE-LEVEL(L'MINKEY,START),MAXSEQ  ALL LEVELS DONE ?
         BNE   P2G0                BR IF NO
         SPACE 1
FINERRM  SLR   R0,R0         NO CARD TO LOG                      88361
FINMSG   LOG   HIGH,0,,'END OF MERGE, CONDITION CODE =  0'
CHCODE   EQU   FINMSG+39,2,C'C'    EBCDIC COMPLETION CODE        88361
        CLOSE (SYSUT1,,SYSUT2,,SYSUT3,,SYSUT4,,SYSIN,,COPYLIB)   88361
         SERVTERM ,          CLOSE AND FREE EVERYTHING           88361
         L     R9,RETCODE    SET COMPLETION CODE                 88361
         PGMEXIT RC=(R9)     RETURN WITH CODE                   GP10260
         SPACE 2                                                 90334
P2G0     DS    0H
         LR    STOP,START          GET SET TO FORM SUBSET BOUNDARIES
         L     WB,@MDBUF           WB USED FOR ASSIGNING BUFFERS 88361
         SH    WB,BLOKMAX          SINCE IT GETS BUMPED IN LOOP  *GPP*
         SPACE 1
P2NBUF   AH    WB,BLOKMAX          POINT TO NEXT BUFFER          *GPP*
         C     WB,@LASTBUF   LEGAL BUFFER ADDRESS?               88361
         BNH   P2BUFOK             BR IF OK
         MVC   LEVX+35(8),MODULE   INSERT MODULE NAME IN ERROR MESSAGE
LEVX     LOG   ERR,20,,'&&MAXLEVS (&MAXLEVS) EXCEEDED FOR           ***X
                ERROR'
         MVC   MINKEY-LEVEL(L'MINKEY,START),MAXSEQ  JUMP TO THE END
         B     P2CKEND
P2BUFOK  ST    WB,BUFPTR-LEVEL(,STOP)  ASSIGN BUFFER TO CURRENT LEVEL
         LA    WA,0(STOP,RLL)      POINT TO NEXT LEVEL'S ENTRY
         CLC   MODULE-LEVEL(L'MINKEY,STOP),MODULE-LEVEL(WA) SAME?
         BNE   P2GSTOP             END SUBSET IF NOT
         LR    STOP,WA             BUMP TO NEXT ENTRY
         B     P2NBUF              GO ASSIGN BUFFER TO NEW GUY
         SPACE 1
P2GSTOP  DS    0H
         LR    SOURCE,START        SET TO MOVE SOURCE ENTRY
         SR    SOURCE,RLL          PRECEDING START OF MODS
         L     R15,@SOURCE   POINT TO SOURCE ENTRY               88361
         MVC   0(LEVLEN,SOURCE),0(R15)   MOVE IT                 88361
         MVC   CURSEQ-LEVEL(8,SOURCE),MINSEQ  RESET SEQ FOR NEXT MODULE
         MVC   CURMOD(L'MINKEY),MODULE-LEVEL(START)  SET NEW MEMBER
         TM    SYSUT4+DCBOFLGS-IHADCB,DCBOFOPN  MACLIB OPEN ?    88361
         BNZ   *+8           YES                                 88361
         MVI   CURMFLAG,0    KILL MACRO PROCESSING               88361
         MVC   BUFPTR-LEVEL(4,SOURCE),@INBUF2   RESET TO ALT     88361
         MVC   P2DECBX+12(4),@INBUF  RESET TO PRIMARY            88361
         PRTLIST PHDR1,TITLE=1  MAKE NEW HEADER                  88361
         SPACE 1
         TM    TYPE-LEVEL(START),TPADD   ADD ?                   85237
         BNZ   P2NOSRC             BR IF SO                      *GPP*
         CLI   CURMFLAG,1    MACRO ?                             88361
         BE    P2MACFND      YES                                 88361
         FIND  SYSUT1,CURMOD,D     POINT AT MEMBER
         LTR   R15,R15             FOUND?
         BZ    P2MFOUND            BR IF SO
P2MACFND TM    SYSUT3+DCBOFLGS-IHADCB,DCBOFOPN  MACRO LIBRARY ?  88361
         BZ    NEITHF        NO; NOT FOUND IN SOURCE             88361
         FIND  SYSUT3,CURMOD,D  IN MACRO LIBRARY ?               88361
         BXH   R15,R15,NEITHF   NO                               88361
         MVI   MACFLAG-LEVEL(START),1  DITTO DITTO               88361
         MVI   MACFLAG-LEVEL(SOURCE),1  SET MACRO FLAG           88361
         CLI   CURMFLAG,1    DID USER KNOW IT WAS A MACRO ?      88361
         BE    P2MACOLD      YES; PROCEED                        88361
         SLR   R15,R15       SET NO CHANGE FLAG                  88361
         LR    R1,START      SET BOTTOM LEVEL                    88361
P2MACLUP CLC   MODULE-LEVEL(8,R1),CURMOD  SAME MEMBER ?          88361
         BNE   P2MACEND      NO; DONE                            88361
         CLI   MACFLAG-LEVEL(R1),1  SET TO MACRO ?               88361
         BE    P2MACBMP      YES; TRY AGAIN                      88361
         MVI   MACFLAG-LEVEL(R1),1  SET TO MACRO                 88361
         LR    R15,R1        SET CHANGE FLAG                     88361
P2MACBMP AR    R1,RLL        TRY NEXT LEVEL                      88361
         B     P2MACLUP      DON'T NEED TO CHECK END             88361
P2MACEND LTR   R15,R15       ANYTHING CHANGED ?                  88361
         BZ    P2MACOLD      NO; CONTINUE WITH THIS              88361
         ST    START,@LEVONE  FAKE OUT TO RESTART WITH THIS GROUP
         B     SORT          SORT AGAIN AND MAKE NEW RANGE       88361
P2MACOLD MVI   CURMFLAG,1    DITTO                               88361
         MVC   BEGMOD+28(6),=C'MACRO '                           88361
         B     P2MFMAC       JOIN COMMON                         88361
NEITHF   SLR   R0,R0               NO CARD TO LOG                88361
         MVC   MISSMOD+18(8),CURMOD    PUT NAME IN MSG           88361
         MVC   MISSMOD+8(8),LEVNAME-LEVEL(START)                 88361
MISSMOD  LOG   ERR,20,,'XXXXXXXX: YYYYYYYY NOT FOUND - WILL BE ADDED **+
               * ERROR'                                          88361
         MVC   CURSEQ-LEVEL(8,SOURCE),MAXSEQ SET EOF ON SOURCE
         B     P2MODSET
         SPACE 1                                                 90334
P2MFOUND MVC   BEGMOD+28(6),=C'MODULE'                           88361
P2MFMAC  MVC   BEGMOD+35(8),CURMOD SET MEMBER NAME IN MSG
         SLR   R0,R0                  NO CARD TO LOG
BEGMOD   LOG   HIGH,,,'BEGINNING UPDATE OF MODULE MMMMMMMM'
         LA    WA,SYSUT1     SET FOR SOURCE INPUT                88361
         CLI   CURMFLAG,1    MACRO ?                             88361
         BNE   *+8           NO                                  88361
         LA    WA,SYSUT3     SET FOR MACRO                       88361
         READ  P2DECBX,SF,(WA),MF=E    START READING 1ST SOURCE  88361
         SLR   R0,R0
         STH   R0,BLKINCR-LEVEL(,SOURCE) RESET TO START OF BLOCK
         STH   R0,CURBLOK-LEVEL(,SOURCE)
         B     P2MODSET
*
P2NOSRC  MVC   ADDMOD+15(8),CURMOD     PUT NAME IN MSG
         SLR   R0,R0                  NO CARD TO LOG             *GPP*
         MVC   ADDMOD+33(6),=CL8'SOURCE'                         88361
         CLI   CURMFLAG,1    MACRO ?                             88361
         BNE   ADDMOD        NO                                  88361
         MVC   ADDMOD+33(6),=C'MACROS'                           88361
ADDMOD   LOG   HIGH,,,'MODULE XXXXXXXX ADDED TO SOURCE'
         MVC   CURSEQ-LEVEL(8,SOURCE),MAXSEQ   SET EOF ON INPUT
P2MODSET MVC   CURLOG,ORIGLOG      START NEW MODULE WITH DEFAULT
         LR    WA,SOURCE           PREPARE TO PRIME ALL INPUT LEVELS
P2PRIME  LR    R1,WA               SET P2READ PARAMETER REG
         BAL   R14,P2READ          PRIME NEXT LEVEL
         AR    WA,RLL              BUMP TO NEXT LEVEL
         CR    WA,STOP             END OF SUBSET?
         BNH   P2PRIME             BR IF NOT FOR NEXT LEVEL
         SPACE 1
P2NCARD  DS    0H
         MVI   OVFLGS,0            RESET OVERRIDE INDICATOR
         LR    WA,SOURCE           PREPARE TO FIND LOWEST SEQ NUMBER
         LR    WB,WA               WB IS NEXT TO BE EXAMINED
P2NLK    CR    WB,STOP             END OF SUBSET?
         BE    P2ROC               BR OUT IF SO
         AR    WB,RLL              POINT TO NEXT ENTRY
*        EXTRA COLUMN IN FOLLOWING INSTR IS TO FORCE DELETES LOWER
         CLC   CURSEQ(9),CURSEQ-LEVEL(WB)  IS WA STILL LO
         BL    P2NLK               BR IF YES
         BE    P2OVRID             BR IF SAME SEQUENCE NUMBER
         LR    WA,WB               POINT TO NEW 'LOW' ENTRY
         MVI   OVFLGS,0            NEW 'LOW' CARD - RESET OVERRIDE IND
         B     P2NLK               GO TO CONTINUE CHECK
P2OVRID  DS    0H
         OI    OVFLGS,OVERRID      EQUAL - NOTE OVERRIDE OCCURRED
         L     WC,CARDPTR          WC --> CARD IMAGE
         L     WD,CARDPTR-LEVEL(,WB)  WD --> OVERRIDING CARD IMAGE
         CLC   0(63,WC),0(WD)      ARE THEY THE SAME CARD?
         BE    P2REPL              YES - BRANCH
         OI    OVFLGS,DIFFRNT     NO - NOTE DIFFERENT CARDS
P2REPL   LR    WA,WB               POINT TO NEW 'LOW' ENTRY
         B     P2NLK               GO SEE IF IT'S LOWEST
         EJECT ,
         SPACE 2
P2ROC    DS    0H
         CLC   CURSEQ,MAXSEQ       ARE WE AT END OF DATA
         BNE   P2DOCARD
P2NMOD   SLR   R1,R1               SET TO FLUSH CURRENT MODULE
         BAL   R14,P2PUT           DO IT
         LA    START,0(STOP,RLL)   SET TO DO NEXT SUBSET
         B     P2CKEND             BACK FOR NEXT SUBSET
P2DOCARD DS    0H
         L     WC,CARDPTR          WC --> CARD IMAGE
         TM    OVFLGS,DIFFRNT      A DIFFERENT OVERRIDE NOTED?
         BZ    P2TOV               BR IF NOT
         MVI   P2OVL1+4,WARN       SET LOGGING LEVEL - DIFFERENT CARDS
         B     P2OVLOG             GO LOG OVERRIDDEN CARDS
P2TOV    TM    OVFLGS,OVERRID      ANY OVERRIDING TAKE PLACE?
         BZ    P2NOVER             BR IF NOT
         MVI   P2OVL1+4,NOTE       SET LOGGING LEVEL - SAME CARD OVER'D
P2OVLOG  LR    R0,WC               POINT TO CARD IMAGE FOR LOGGING
P2OVL1   LOG   *-*,0,3,'OVERRIDES FOLLOWING CARD(S)'
         SPACE 1
         LR    WB,SOURCE           BACK UP & PRINT OVERRIDDEN CARDS
P2LOGOV  CR    WA,WB               ARE WE THRU?
         BE    P2NOVER             BR IF SO
         CLC   CURSEQ,CURSEQ-LEVEL(WB) THIS CARD OVERRIDDEN?
         BNE   P2LOVN              BR IF NOT
         MVI   P2OVL2+4,WARN       PRESET LEVEL ASSUMING UNEQUAL CARDS
         L     WD,CARDPTR-LEVEL(,WB) WD --> OVERRIDDEN CARD
         CLC   0(63,WC),0(WD)      SAME CARD IMAGE?
         BNE   P2OVLOG2            BR IF NOT TO LOG
         MVI   P2OVL2+4,NOTE       RESET LOGGING LEVEL
P2OVLOG2 LR    R0,WD               POINT R0 TO OVERRIDDEN CARD
P2OVL2   LOG   *-*,0,2,' '         LOG OVERRIDDEN CARD
         LR    R1,WB               SET PARAMETER FOR READ ROUTINE
         BAL   R14,P2READ          SKIP OVERRIDDEN CARD
P2LOVN   AR    WB,RLL              ADVANCE TO NEXT SUBSET ENTRY
         B     P2LOGOV             GO SEE IF WE'RE DONE
         SPACE 2                                                 90334
P2NOVER  DS    0H
         CLC   =C'./',0(WC)      DO WE HAVE A CONTROL CARD
         BNE   CDOUT               BR IF NO TO WRITE IT OUT
         CLI   2(WC),C'*'              ./*  COMMENT CARD?
         BNE   P2COPY                  BR IF NOT
         LR    R0,WC                   POINT FOR LOGGING
         LOG   NOTE,,,' '              LOG THE COMMENT
         B     P2RWA                   THAT'S IT FOR THIS ONE
P2COPY   DS    0H
         MVC   CARD,0(WC)          MAKE TEMP COPY FOR FIDDLING
         LA    R1,CARD+2
         LA    R0,CARD+72
         BAL   R14,SCANVERB        SCAN FOR VERB
         SPACE 1
         CLC   =C'LOG ',SCANOUT    ./ LOG CARD?
         BE    P2DOLOG             BR IF SO
         SPACE 1
         CLC   =C'DELET ',SCANOUT  ./ DELET CARD?
         BE    P2DELET             BR IF SO
         SPACE 1
         CLC   =C'DELETE ',SCANOUT     ./   DELETE CARD?
         BE    P2DELET                 BR IF SO
         SPACE 1
         CLC   =C'SKIP ',SCANOUT   ./ SKIP CARD?
         BE    P2SKIP              BR IF SO
         SPACE 1
         CLC   =C'ABEND ',SCANOUT  ./ ABEND REQUEST?
         BE    P2ABEND
         SPACE 1                                                 *GPP*
         CLC   =C'COPY ',SCANOUT   COPY CARD                     *GPP*
         BE    CTLOUT        YES - PRETEND IT ISN'T THERE        *GPP*
         CLC   =C'NUMBER ',SCANOUT  INSERT CARD ?                85237
         BE    CTLOUT        YES; IGNORE IT                      85237
         CLC   =C'INSERT ',SCANOUT  INSERT CARD ?                85237
         BE    CTLOUT        YES; IGNORE IT                      85237
         SPACE 1
         LR    R0,WC               R0 --> CARD IMAGE FOR LOGGING
         MVC   *+6+8(8),LEVNAME  IDENTIFY CULPRIT ?              88361
         LOG   ERR,20,0,'XXXXXXXX: ILLEGAL CONTROL CARD  *** ERROR'
         B     P2RWA               SKIP IT
         SPACE 1
P2ABEND  ABEND 30,DUMP             USER REQUESTED ABEND
         SPACE 2                                                 90334
P2DOLOG  MVC   CURLOG,ORIGLOG      ASSUME RESET TO ORIGINAL LEVEL
         BAL   R14,SCANFLD         SCAN FOR OPERAND
         CLI   SCANOUT,C' '        OMITTED?
         BE    P2LOGLOG            BR IF SO
         CLI   SCANOUT+1,C' '      1 DIGIT?
         BNE   P2LOG2CH            BR IF 2 CHAR OPERAND
         MVI   CURLOG,C'0'         SET INITIAL ZERO IN CURLOG
         MVC   CURLOG+1(1),SCANOUT MOVE IN OPERAND DIGIT
         B     P2LOGLOG            GO LOG THE LOGGING LEVEL
         SPACE 1
P2LOG2CH MVC   CURLOG,SCANOUT      MOVE IN THE USER'S OPERAND
P2LOGLOG MVC   P2LOGMS+33(2),CURLOG    SET UP THE MESSAGE
         LR    R0,WC               POINT AT CARD FOR LOGGING
P2LOGMS  LOG   HIGH,0,0,'CURRENT LOGGING LEVEL IS   '
         B     P2RWA               GO READ NEXT CARD
         TITLE 'H S P M E R G E  ***  PASS2 - PROCESS ./ DELET CARD'
         SPACE 2
P2DELET  DS    0H
         OI    TYPE,TPNUM    ENABLE BLANK INSERTIONS             86360
         MVC   MEMINCR,=H'1'  SET DEFAULT INCREMENT              91063
         BAL   R14,SCANDEL         SCAN DELETE CARD
         MVC   SEQ1(16),DELSEQ1
         LR    R0,WC               LOG THE CARD
         LOG   HIGH,0,5,'BEGINNING PROCESSING'
         CLI   SEQ1,C' '           OPERANDS OMITTED?
         BE    P2DSEQ              BR IF SO
         CLI   SEQ2,C' '           TERMINATING SEQ NO PRESENT?
         BNE   *+10                BR IF SO
         MVC   SEQ2,SEQ1           DUPLICATE STARTING SEQ NUMBER
         CLC   SEQ1,SEQ2           PROPER SEQUENCE?
         BH    P2DSEQ              NOPE
         LR    WB,SOURCE           SET TO SCAN LEVELS SUBSET
P2DEL1   CLC   SEQ2,CURSEQ-LEVEL(WB)   SHOULD WB'S CARD BE DELETED?
         BNL   P2DEL2                  BR IF SO
         B     CTLOUT              TERMINATE PROCESSING FOR THIS CARD
         SPACE 1
P2DEL2   DS    0H
         L     WD,CARDPTR-LEVEL(,WB)   WD --> DELETED CARD
         CLC   =C'./',0(WD)      CONTROL CARD?
         BNE   P2DEL3              BR IF NOT
         LR    R1,WD               SET FOR SCANNING
         LA    R0,72(,WD)
         BAL   R14,SCANVERB        LOOK FOR VERB
         CLC   =C'DELET ',SCANOUT     DELETING A DELET?
         BE    P2DELDEL            BR IF SO
         CLC   =C'DELETE ',SCANOUT
         BE    P2DELDEL
P2DEL3   LR    R0,WD               LOG THE CARD
         LOG   WARN,0,4,'DELETED'
P2DEL4   LR    R1,WB               SET TO READ NEXT CARD FOR (WB) ENTRY
         BAL   R14,P2READ          GO DO THE READ
         B     P2DEL1              GO CHECK NEXT CARD
         SPACE 1
P2DELDEL BAL   R14,SCANDEL         SCAN OPERANDS
         CLC   SEQ2(8),DELSEQ2     SEQUENCE OVERLAP?
         BNL   P2DEL3              BR IF NO PROBLEM
         MVC   *+6+8(8),LEVNAME  IDENTIFY SOURCE                 88361
         LOG   ERR,20,4,'XXXXXXXX: DELET RANGE OVERLAP  *** ERROR'
         B     P2DEL4              GO SKIP TO NEXT CARD
*
P2DSEQ   MVC   *+6+8(8),LEVNAME  IDENTIFY SOURCE                 88361
         LOG   ERR,20,4,'XXXXXXXX: BAD OPERANDS  *** ERROR'      88361
         B     CTLOUT              SKIP THE CARD
         TITLE 'H S P M E R G E  ***  PASS2 - ./ SKIP CARD PROCESSING'
         SPACE 2
P2SKIP   DS   0H
         LR    R0,WC                   SET FOR LOGGING
P2SKP0   LOG   HIGH,0,7,'BEGINNING PROCESSING'
         LR    WB,SOURCE           SET TO SCAN SUBSET
         LR    WD,STOP             PRESET RANGE END FOR MAX
         LA    R1,CARD+2
         LA    R0,CARD+72
         BAL   R14,SCANVERB        RESCAN VERB
         BAL   R14,SCANFLD         GET SEQUENCE
         MVC   SEQ1(8),SCANOUT     SAVE SEQUENCE
         BAL   R14,SCANFLD         PICK UP THE OPERAND
         MVC   FSTART,SCANOUT      AND SAVE IT
         BAL   R14,SCANFLD         SCAN THE OPERAND
         MVC   FSTOP,SCANOUT       AND SAVE IT TOO
         OI    TYPE,TPNUM    ENABLE BLANK INSERTIONS             86360
         MVC   MEMINCR,=H'1'  SET DEFAULT INCREMENT              91063
         CLC   FSTART,=CL8' '       STARTING LEVEL PRESENT?
         BE    P2LLSKIP            NO; HIT ONLY LOWER LEVELS     81117
P2SKP1   CLC   FSTART,LEVNAME-LEVEL(WB) SET TO SCAN TO STARTING LEVEL
         BE    P2SKP2              BR IF WE FOUND IT
         AR    WB,RLL              NEXT LEVEL
         CR    WB,STOP             ARE WE STILL IN RANGE?
         BNH   P2SKP1              BR BACK IF STILL OK
         MVC   P2SKER+14(8),FSTART   INSERT LEVEL NAME IN MSG
P2SKPB   SLR   R0,R0               NO CARD IMAGE TO PRINT
P2SKER LOG ERR,12,6,'LEVEL XXXXXXXX INVALID FOR THIS MODULE  *** ERROR'
         B     P2RWA               TERMINATE ./ SKIP PRICESSING
         SPACE 1
P2SKP2   CLC   FSTOP,=CL8'END'     DOES HE WANT ALL THE REST?
         BE    P2SKP4                  BR IF SO
         LR    WD,WB               PRESET
         CLC   FSTOP,=CL8' '        ENDING LEVEL PRESENT
         BNE   P2SKP3              BR IF SO
         MVC   FSTOP,FSTART        SET TO SAME & FIND THEM ALL
P2SKP3   CLC   FSTOP,LEVNAME-LEVEL(WD)  IS THIS ENDING LEVEL?
         BNE   P2SKNL              BR IF NOT
P2SKLM   AR    WD,RLL              CHECK FOR MORE
         CR    WD,STOP             WENT PAST STOPPING LEVEL?
         BH    P2SKTF              BR IF SO
         CLC   FSTOP,LEVNAME-LEVEL(WD) ALSO MATCHES?
         BE    P2SKLM              BR IF SO - CHECK AGAIN
P2SKTF   SR    WD,RLL              BACK OFF - WENT 1 TOO FAR
         B     P2SKP4              NOW GO SKIP
P2SKNL   AR    WD,RLL              NEXT LEVEL
         CR    WD,STOP             ARE WE STILL WITHIN SUBSET?
         BNH   P2SKP3              BR BACK IF STILL OK
         MVC   P2SKER+14(8),FSTOP   MOVE IN THE FAULTY LEVEL NAME
         B     P2SKPB              BACK TO LOG THE ERROR
         SPACE 1
P2LLSKIP LR    WD,WA         HIT ONLY LOWER LEVELS ON BLANK LVL  81117
P2SKP4   CR    WA,WB               SKIP NEVER AFFECTS OWN LEVEL
         BE    P2SKP6
P2SKP5   CLC   SEQ1,CURSEQ-LEVEL(WB)   IS WB'S CARD WITHIN SKIP RANGE?
         BL    P2SKP6                  BR IF NOT
         L     R0,CARDPTR-LEVEL(,WB)   R0 --> CARD BEING SKIPPED
         LR    R14,R0              COPY FOR ACCESS              GP11107
         CLC   =C'./',0(R14)       SKIPPING CONTROL CARD?       GP11107
         BNE   *+8                   NO                         GP11107
         OI    TYPE-LEVEL(WB),TPNUM  YES; PROPAGATE NUMBERING   GP11107
P2SKP55  LOG   WARN,0,6,'SKIPPED'
         LR    R1,WB               SET TO READ ANOTHER CARD FOR WB
         BAL   R14,P2READ          GO READ IT
         B     P2SKP5              CHECK NEXT CARD
         SPACE 1
P2SKP6   AR    WB,RLL              NEXT LEVEL
         CR    WB,WD               THROUGH WITH SUBSET?
         BNH   P2SKP4              BR IF MORE TO CHECK
         SPACE 1
CTLOUT   MVI   0(WC),C'*'          CHANGE CTL CARD TO COMMENT FOR ASSM
         SPACE 1
CDOUT    LR    R1,WC               PREPARE TO WRITE IT ONTO SYSUT2
         BAL   R14,P2PUT           GO WRITE IT OUT
         LR    R0,WC               FOR LOGGING SYSUT2 OUTPUT
         MVI   LOGOUT+23,C'2'  ASSUME SYSUT2                     88361
         CLI   CURMFLAG,1    MACRO ?                             88361
         BNE   *+8           NO                                  88361
         MVI   LOGOUT+23,C'4'  ELSE SET SYSUT4                   88361
         SPACE 1
         MVI   LOGOUT+4,OMNIA      PRESET TO LOG ALL OUTPUT
         CR    WA,SOURCE           IS THIS CARD FROM HASP SOURCE?
         BE    LOGOUT              BR IF YES
         MVI   LOGOUT+4,LO         SET LOGGING LEVEL A BIT HIGHER
LOGOUT   LOG   *-*,0,8,'OUTPUT ON SYSUT2'
         SPACE 1
P2RWA    LR    R1,WA               SET TO READ NEXT (WA) CARD
         BAL   R14,P2READ          GO DO IT
         B     P2NCARD             PROCESS NEXT CARD
         TITLE 'H S P M E R G E  ***  PASS2 - CARD READ ROUTINE' 85237
         SPACE 2
*        CALLING SEQUENCE:
*        LA    R1,LEVEL ENTRY
*        BAL   R14,P2READ
*        (RETURN HERE WITH LEVEL ENTRY UPDATED)
         SPACE 2
P2READ   DS    0H
         STM   R2,R14,P2RSAVE      SAVE ALL REGS
         CLC   CURSEQ-LEVEL(8,R1),MAXSEQ  PLAY SAFE ON EOF
         BER   R14                                               88361
         SPACE 1
         LR    WA,R1               WA --> LEVEL ENTRY
         LH    WB,BLKINCR          WB HAS OFFSET TO CARD WITHIN BUFFER
P2POTHER L     WD,BUFPTR     POINT WD TO BUFFER TO FILL          85237
         SPACE 1
P2NOTHER LA    WB,80(,WB)          BUMP TO NEXT CARD
         CH    WB,CURBLOK          STILL WITHIN BLOCK?
         BL    P2RDOK              BR IF SO
         CR    R1,SOURCE           SOURCE READ?
         BE    RDHASP              BR IF SO
         LA    WC,SYSIN      PROVISIONALLY SET FOR SYSIN         *GPP*
         TM    TYPE,TPCOPY   IS THIS A COPYLIB MEMBER ?          85237
         BZ    P2READCM      NO; USE SYSIN                       *GPP*
         LA    WC,COPYLIB    SET FOR COPYLIB                     *GPP*
         TM    COPYFLAG,TPCOPY FIRST REFERENCE TO THIS MEMBER ?  85237
         BZ    P2READCM      NO - READ                           *GPP*
         LH    WB,MEMINDX    GET MEMBER INDEX                    *GPP*
         MH    WB,=H'9'      MAKE OFFSET                         *GPP*
         A     WB,@COPYTAB   POINT TO CORRECT MEMBER             88361
         FIND  COPYLIB,1(WB),D  FIND START OF MEMBER             *GPP*
         LTR   R15,R15       FOUND ?                             *GPP*
         BNZ   P2EODAD       NO; WHAT HAPPENED ?                 *GPP*
         MVI   COPYFLAG,0     RESET FIND FLAG                    *GPP*
P2READCM POINT (WC),CURTTR        POINT TO NEXT BLOCK TO READ    *GPP*
         READ  P2DECB,SF,(WC),(WD),'S'                           *GPP*
         CHECK P2DECB              DID READ COMPLETE OK?
         NOTE  (WC)                FIND OUT WHERE WE ARE         *GPP*
         ST    R1,CURTTR           REMEMBER IT FOR NEXT TIME
         MVI   CURTTR+3,1          INDICATE FOLLOWING RECORD
         LH    WB,BLKINCR          JUST IN CASE WE'RE PRIMING THE LVL
         CLC   CURSEQ,MINSEQ       SEE IF THE LEVEL IS BEING PRIMED
         BE    P2RIME              BR IF YES - DON'T RESET THE COUNT
         SLR   WB,WB               OFFSET IN BUFR IS NOW ZERO
P2RIME   LH    WC,MAXBLOK(,WC)     GET AMOUNT REQUESTED FROM DCB *GPP*
         L     R1,P2DECB+16        R1 --> IOB
         SH    WC,14(,R1)          SUBTRACT RESIDUAL COUNT
         STH   WC,CURBLOK          SAVE CURRENT BLOCK SIZE
P2RDOK   STH   WB,BLKINCR          STORE INCR WITHIN BLOCK
         LA    R1,0(WB,WD)         POINT R1 TO CARD IMAGE
         ST    R1,CARDPTR          SAVE POINTER TO CARD
         CR    WA,SOURCE           READING SOURCE?
         BE    P2SETCUR            BR IF SO
         CLC   =C'./',0(R1)        CONTROL CARD?
         BNE   P2NCHG              BR IF NOT
         NI    TYPE,255-TPNUM  RESET INSERTION NUMBERING         85237
         LA    R0,72(,R1)          SET FOR SCAN
         BAL   R14,SCANVERB        SCAN FOR VERB
         CLC   =C'LEVEL ',SCANOUT      LEVEL CARD?
         BE    P2SKIPCC            BR IF SO
         CLC   =C'CHNGE ',SCANOUT
         BE    P2SKIPCC
         CLC   =C'CHANGE ',SCANOUT
         BE    P2SKIPCC
         CLC   =C'ADD ',SCANOUT
         BE    P2SKIPCC
         CLC   =C'NUMBER ',SCANOUT  INSERT CARD ?                85237
         BE    P2RDNUM       YES; GET VALUES                     85237
         CLC   =C'INSERT ',SCANOUT  ALTERNATE FORM ?             85237
         BE    P2RDNUM       YES; GET VALUES                     85237
         CLC   =C'REPL ',SCANOUT
         BNE   P2NCHG
P2SKIPCC CLC   CURSEQ(8),MINSEQ    ANOTHER MODULE?
         BNE   P2EODAD               FORCE END OF FILE IF DIFFERENT
P2RCSEQ  MVI   CURSEQ+7,1          CLOBBER MINSEQ
         B     P2NOTHER            IF FIRST CARD RD AGAIN
         SPACE 1                                                 85237
*        PROCESS: ./ NUMBER NEW1=NN,SEQ1=NN,INCR=NN              85237
*                 ./ INSERT NEW1=NN,INCR=NN                      85237
*        SEQ1 IS IGNORED, INCR DEFAULTS TO 1, NEW1 DEFAULTS TO   85237
*         ./ CARD'S SEQUENCE (INVALID IF NONE)                   85237
*                                                                85237
P2RDNUM  MVC   MEMINCR,=H'1' SET DEFAULT INCREMENT               91063
         MVC   NUMSEQ1,=CL8' '  CLEAR SEQ1 FIELD                 85237
         MVC   NUMNEW1,=CL8' '  CLEAR NEW1 FIELD                 85237
         MVC   NUMINCR,=CL8' '  BLANK INCREMENT                  85237
P2RDNUML CR    R1,R0         END OF CARD ?                       85237
         BNL   P2RDNUMP      YES; PROCESS                        85237
         CLI   0(R1),C' '    END OF OPERANDS ?                   85237
         BE    P2RDNUMP      YES; PROCESS                        85237
         LA    R14,NUMSEQ1   POINT TO SEQUENCE FIELD             85237
         CLC   =C'SEQ1=',0(R1)   PROCESS SEQUENCE ?              85239
         BE    P2RDNMOV      YES; MOVE IT                        85237
         LA    R14,NUMNEW1   IS IT NEW1 ?                        85237
         CLC   =C'NEW1=',0(R1)  NEW1 ?                           85239
         BE    P2RDNMOV      YES                                 85237
         LA    R14,NUMINCR   ELSE SHOULD BE INCREMENT            85237
         CLC   =C'INCR=',0(R1)   IS IT ?                         85239
         BE    P2RDNMOV      YES                                 85237
         CLC  =C'INSERT=',0(R1)  INSERT=YES ?                    85239
         BNE   P2RDNBAD      NO; BAD CARD                        85237
P2RDNXT  BAL   R14,SCANNBC   SKIP TO NEXT BLANK/COMMA            85237
         B     P2RDNUML      TRY AGAIN                           85237
P2RDNBAD L     R0,CARDPTR    POINT TO IT                         85239
         MVC   *+6+8(8),LEVNAME  IDENTIFY SOURCE                 88361
         LOG   ERR,20,,'XXXXXXXX: INVALID TEXT  *** ERROR'       88361
         B     P2EODAD       FORCE END OF LEVEL                  85237
         SPACE 1                                                 85237
P2RDNMOV LA    R1,5(,R1)     SKIP OVER KEYWORD                   85237
         ST    R14,LOGSAVE   SAVE FIELD ADDRESS                  85237
         BAL   R14,SCANFLD   GET NEXT FIELD                      85237
         LA    R14,NUMINCR   INCREMENT FIELD ?                   86359
         C     R14,LOGSAVE   IS IT INCR ?                        86359
         BE    P2RDNNUM      YES; VERIFY NUMERIC OPERAND         87025
         STM   R0,R1,SCANSAVE  PRESERVE THE SCAN POINTERS        87340
         LA    R15,SCANOUT   POINT TO SEQUENCE                  GP10260
         BAL   R14,RADJSEQ   RIGHT ADJUST IT                    GP10260
R2RDNRAD L     R14,LOGSAVE   RESTORE DESTINATION ADDRESS         87025
         STM   R0,R1,0(R14)  SET THE PARAMETER                   87025
         LM    R0,R1,SCANSAVE  RESTORE THE SCAN POINTERS         87340
         B     P2RDNUML      CONTINUE SCANNING                   87025
P2RDNNUM SLR   R14,R14                                           85237
         LA    R15,C'0'      SET FOR NULL PROCESSING             85237
         LA    WC,SCANOUT    POINT TO SCAN RESULT                85239
         CLI   0(WC),C' '    END OF PARM ?                       85237
         BE    P2RDNUML      SKIP NULL PARAMETER                 85237
         LA    WD,1          SET INCREMENT FOR LOCAL BXLE        85237
         BCTR  WC,0          BACKSPACE                           85237
         LA    WE,SCANOUT+7  SET LAST VALID BYTE                 85237
P2RDNLOP BXH   WC,WD,P2RDNDON  SKIP IF DONE                      85237
         CLI   0(WC),C' '    END OF PARM ?                       85237
         BE    P2RDNDON      YES; EVALUATE IT                    85237
         CLI   0(WC),C'0'    NUMERIC ?                           85237
         BL    P2RDNBAD      NO; FAIL                            85237
         CLI   0(WC),C'9'                                        85237
         BH    P2RDNBAD                                          85237
         SLDL  R14,8                                             85237
         IC    R15,0(,WC)    LOAD NEXT BYTE                      85237
         B     P2RDNLOP      TRY AGAIN                           85237
P2RDNDON STM   R14,R15,SCANOUT  STASH RIGHT-JUSTIFIED, 0 FILLED  85237
         L     R14,LOGSAVE   GET OUTPUT FIELD                    85237
         PACK  DBLWK,SCANOUT  MAKE PACKED                        85237
         CVB   R15,DBLWK                                         85237
         LTR   R15,R15       VALID ?                             85237
         BNP   P2RDNBAD      NO; FAIL IT                         85237
         UNPK  0(8,R14),DBLWK  COPY EBCDIC FORM                  85239
         OI    7(R14),C'0'   FORCE PLUS ZONE                     85239
         CH    R15,=H'32767' VALID ?                             85237
         BH    P2RDNBAD      NO; FAIL                            85245
         STH   R15,MEMINCR   ELSE SAVE IT                        91063
         B     P2RDNUML      AND CONTINUE THE CARD SCAN          85245
         SPACE 1                                                 85237
P2RDNUMP CLI   NUMNEW1,C' '  WAS NEW1 OPERAND SPECIFIED ?        87025
         BNH   P2RDNN1       NO                                  87025
         PACK  DBLWK,NUMNEW1 PACK IT                             85237
         CVB   R0,DBLWK                                          85237
         SH    R0,MEMINCR    LESS INCREMENT                      91063
         BM    P2RDNBAD      INVALID                             85237
         CVD   R0,DBLWK      ELSE PACK IT AGAIN                  85237
         OI    DBLWK+7,X'0F'   POSITIVE ZONE                     85237
         UNPK  DB2,DBLWK     UNPACK                              87025
         MVN   NUMNEW1,DB2   UPDATE THE NUMERICS                 87025
         CLI   NUMSEQ1,C' '  ANY SEQUENCE SUPPLIED ?             87341
         BH    P2RDNCDQ      YES                                 87341
         MVC   NUMSEQ1,NUMNEW1  ELSE DEFAULT TO NEW1-INCR        87341
         B     P2RDNCDQ      STASH SEQUENCE                      85237
P2RDNN1  CLI   NUMSEQ1,C' '  SEQ1 SUPPLIED ?                     87025
         BNH   P2RDNS1       NO                                  87025
         MVC   NUMNEW1,NUMSEQ1  JUST MOVE OVER                   85237
P2RDNCDQ L     R1,CARDPTR    GET THE CARD ADDRESS BACK           85237
         MVC   CDSEQ-CARD(8,R1),NUMNEW1  SET SEQUENCE - INCR     85237
         B     P2RDNSEQ      GO TO COMMON POST-PROCESSING        85237
P2RDNS1  MVC   DBLWK,=X'40404040F0F0F0F0'  MAKE 4/4 ALPHA/NUM MASK
         L     R1,CARDPTR    GET CARD ADDRESS BACK               85237
         NC    DBLWK,CDSEQ-CARD(R1)  AND ZONES                   85237
         CLC   DBLWK,=X'40404040F0F0F0F0'  ALPHA/NUM ?           87025
         BNE   P2RDNBAD      DEFINITELY NOT                      85237
P2RDNSEQ L     R1,CARDPTR    GET CARD ADDRESS BACK               85239
         MVC   62(8,R1),LEVNAME  COPY LEVEL NAME                 85245
         MVI   61(R1),C' '   JUST TO BE SURE                     85239
         MVI   70(R1),C' '   DITTO                               85239
         PACK  DBLWK,CDSEQ-CARD(8,R1)  PACK NUMBER AGAIN         85245
         CVB   R0,DBLWK                                          85245
         AH    R0,MEMINCR    MAKE FIRST DATA LINE                91063
         CVD   R0,DBLWK                                          85245
         UNPK  DB2,DBLWK     UNPACK NEXT NUMBER                  87025
         MVN   NUMSEQ1,DB2   KEEP OLD ZONES                      87025
         CLC   CURSEQ(8),NUMSEQ1  IN SEQUENCE ?                  85245
         BH    P2RSEQNG      NO; FAIL IT                         85239
         BE    P2RPT         SEQUENCE REPEAT                     85245
         MVC   CURSEQ(8),CDSEQ-CARD(R1)  SET FOR NEXT TEST       85239
         OI    TYPE,TPNUM    SHOW NUMBERING IN EFFECT            85237
         L     R0,CARDPTR    POINT TO CARD ADDRESS               85239
         LOG   NOTE,0,0,' '  PRINT THE CARD                      85237
         B     P2POTHER      READ NEXT CARD                      85237
         SPACE 1
P2NCHG   L     R1,CARDPTR          RESTORE POINTER TO CARD
         SPACE 1                                                 85237
*        SUPPORT ./ INSERT AND ./ NUMBER OPTIONS                 85237
*                                                                85237
         CLC   =CL8' ',CDSEQ-CARD(R1)  BLANK SEQUENCE ?          85237
         BNE   P2RDOF#       NO; RESET NUMBERING                 85237
         TM    TYPE,TPNUM    ARE WE NUMBERING ?                  85237
         BZ    P2RDOF#       NO                                  85237
         PACK  DBLWK,CURSEQ  PACK THE CURRENT SEQUENCE           85237
         CVB   R0,DBLWK      CONVERT TO BINARY                   85237
         AH    R0,MEMINCR    ADD THE INCREMENT                   91063
         CVD   R0,DBLWK      MAKE PACKED AGAIN                   85237
         UNPK  DB2,DBLWK(8)  MAKE NEW SEQUENCE NUMBER            87025
         MVC   CDSEQ-CARD(8,R1),CURSEQ  GET ZONES FROM CURRENT   87025
         MVN   CDSEQ-CARD(8,R1),DB2  REPLACE NUMERICS            87025
         B     *+8           SKIP AROUND                         85237
P2RDOF#  NI    TYPE,255-TPNUM  RESET NUMBERING                   85237
         SPACE 1
*        NOW WE WILL MOVE IN AS MUCH OF THE LEVEL-ID AS WILL FIT
*        IN COLUMNS 64/71 WITHOUT DISTURBING ANYTHING THAT'S THERE
*        ALREADY
         SPACE 1
         LA    R0,8                LOOP CONTROL
         LA    WD,LEVNAME+7        LO-ORDER BYTE OF LEVEL NAME
         LA    WE,69(,R1)          COLUMN 70
         CLI   71(R1),C' '   CONTINUATION INDICATED ?            *GPP*
         BNE   P2RPDON       YES - MAY BE CONTINUED CHAR STRING  *GPP*
         CLI   70(R1),C' '   NON-BLANK IN 71 ?                   *GPP*
         BNE   P2RPDON       YES - SKIP ALSO                     *GPP*
P2RCLI   CLI   0(WD),C' '          BLANK?
         BNE   P2RMLP              BR IF NOT
         BCTR  WD,0                LEFT ONE
         BCT   R0,P2RCLI           BACK FOR NEXT
         B     P2RPDON             IMPOSSIBLE
P2RMLP   CLI   0(WE),C' '          BLANK?
         BNE   P2RPDON             BR IF NOT
         MVC   1(1,WE),0(WD)       MOVE A CHARACTER
         BCTR  WD,0                LEFT ONE
         BCTR  WE,0                LEFT ONE
         BCT   R0,P2RMLP           BACK FOR NEXT
         CLI   0(R1),C'*'    COMMENTS CARD ?                     *GPP*
         BE    P2RPDON       YES - DON'T MESS IT UP              *GPP*
         CLI   1(R1),C'*'    MACRO COMMENTS CARD ?               *GPP*
         BE    P2RPDON       YES - DON'T MESS IT UP              *GPP*
         LA    R0,19(,R1)    SCAN BACK SOME MORE                 *GPP*
         SR    R0,WE         SUBTRACT LAST POSITION SCANNED      *GPP*
         LPR   R0,R0         MAKE INTO POSITIVE COUNT            *GPP*
P2RMCM   CLI   0(WE),C' '    FOR A NON-BLANK                     *GPP*
         BNE   P2RPDON       GOT ONE                             *GPP*
         BCTR  WE,0          BACK ONE MORE                       *GPP*
         BCT   R0,P2RMCM     TRY ALL                             *GPP*
         MVI   2(WE),C','    ADD COMMA ON END/MACRO/ETC. CARDS   *GPP*
P2RPDON  DS    0H
         CLC   =C'./',0(R1)        A CONTROL CARD?
         BNE   P2CKSEQ             IF NOT SEQUENCE MUST BE GOOD
         LA    R0,72(,R1)          SET FOR SCANNING
         BAL   R14,SCANVERB        GET THE VERB
         CLC   =C'DELET ',SCANOUT      DELET CARD?
         BE    *+14                BR IF SO
         CLC   =C'DELETE ',SCANOUT
         BNE   P2ROCTL
         BAL   R14,SCANDEL         SCAN OPERANDS
         L     R1,CARDPTR
         CLC   CDSEQ-CARD(8,R1),=CL8' '       SEQ MISSING IS OK TOO
         BE    P2DELB                        CONTINUE PROCESSING
         CLC   DELSEQ1(8),CDSEQ-CARD(R1) IS IT WHERE IT BELONGS?
         BE    P2CKSEQ                        BR IF IT'S IN SEQUENCE
         L     R0,CARDPTR
         MVC   *+6+8(8),LEVNAME  IDENTIFY SOURCE                 88361
         LOG   ERR,20,10,'XXXXXXXX: SEQUENCE MISMATCH  *** ERROR'
         B     P2EODAD             FORCE END OF LEVEL
P2DELB   MVC   CDSEQ-CARD(8,R1),DELSEQ1 SET SEQUENCE COLUMNS
         SPACE 1
P2CKSEQ  DS    0H
         CLC   CURSEQ(8),CDSEQ-CARD(R1)   CHECK SEQ AGAINST CURRENT SEQ
         BL    P2SETCUR                INCREASE IS OK
         BH    P2RSEQNG                DECREASE IS NO GOOD
         CLI   SUPPL,0                 PREV CD ./ DELET OR ./ SKIP?
         BNE   P2RPT                   BR IF NOT
         CLC   =C'./',0(R1)        CONTROL CARD?
         BNE   P2SETCUR            BR IF NOT
         LA    R0,72(,R1)
         BAL   R14,SCANVERB        GET VERB
         CLC   =C'DELET ',SCANOUT      DELET CARD?
         BE    P2RPT               STOMP IF DELETE
         CLC   =C'DELETE ',SCANOUT
         BNE   P2SETCUR            DELETE FOLL BY OTHER CTL IS OK
P2RPT    L     R0,CARDPTR
         MVC   *+6+8(8),LEVNAME  IDENTIFY SOURCE                 88361
         LOG   ERR,20,,'XXXXXXXX: SEQUENCE REPEAT  *** ERROR'    88361
         B     P2SETCUR
         SPACE 1
P2RSEQNG L     R0,CARDPTR
         MVC   *+6+8(8),LEVNAME  IDENTIFY SOURCE                 88361
         LOG   ERR,20,,'XXXXXXXX: SEQUENCE DECREASE  *** ERROR'  88361
         B     P2EODAD            FORCE END OF LEVEL
         SPACE 1
P2ROCTL  L     R1,CARDPTR
         CLC   CDSEQ-CARD(8,R1),=CL8' ' SEQUENCE NUMBER MISSING
         BNE   P2CKSEQ             NO - THEN IT BETTER BE RIGHT
         B     P2REXIT
         SPACE 1
P2SETCUR DS    0H
         L     R1,CARDPTR
         MVC   CURSEQ,CDSEQ-CARD(R1)   SET CURRENT SEQ IN LEVEL ENTRY
         MVI   SUPPL,C'0'          SET SEQ FIELD EXTENSION
         CLC   =C'./',0(R1)        CONTROL CARD?
         BNE   P2REXIT             BR IF NOT
         LA    R0,71(,R1)              SET TERMINATOR
         BAL   R14,SCANVERB            PICK OFF THE VERB
         CLC   =C'SKIP ',SCANOUT
         BE    P2RCLOB                 BR IF SKIP
         CLC   =C'DELET ',SCANOUT
         BE    P2RCLOB                 BR IF DELET
         CLC   =C'DELETE ',SCANOUT
         BNE   P2REXIT                 FALL THROUGH IF DELETE
P2RCLOB  MVI   SUPPL,0             FORCE DELET PROCESSING FIRST
P2REXIT  DS    0H
         L     R1,CARDPTR              RESET
         LM    R2,R14,P2RSAVE      RESTORE ALL REGS
         BR    R14
         SPACE 1
P2EODAB  MVI   COPYFLAG,TPCOPY SHOW FIND REQUIRED                85237
P2EODAD  MVC   CURSEQ,MAXSEQ       SET MAXIMUM SEQUENCE NUMBER
         B     P2REXIT
         SPACE 1
RDHASP   LA    WB,SYSUT1     POINT TO SOURCE INPUT               88361
         CLI   CURMFLAG,1    MACRO INPUT ?                       88361
         BNE   *+8           NO                                  88361
         LA    WB,SYSUT3     POINT TO MACRO FILE                 88361
         CHECK P2DECBX             CHECK PREVIOUS I/O OP
         LH    WC,DCBBLKSI-IHADCB(,WB)   GET BLKSIZE             88361
         L     R1,P2DECBX+16           POINT TO IOB
         SH    WC,14(,R1)              SUBTR RESID BYTE COUNT
         STH   WC,CURBLOK              SAVE COUNT READ
         L     R1,P2DECBX+12       BUFFER ADDR.
         ST    WD,P2DECBX+12       NEW BUFFER PTR
         LR    WD,R1               LOAD BUFFER REGISTER
         ST    WD,BUFPTR           SAVE IT
         READ  P2DECBX,SF,(WB),*-*,'S'   START NEXT I/O          88361
         SLR   WB,WB
         B     P2RDOK                  EXIT
         TITLE 'H S P M E R G E  ***  PASS2 - CARD OUTPUT SUBROUTINE'
         SPACE 2
*        CALLING SEQUENCE:
*
*        R1 --> CARD IMAGE TO OUTPUT OR 0 IF REQUEST TO FLUSH MODULE
*        R14 --> RETURN
*
P2PUT    STM   WA,WC,PUTSAVE       STORE USED REGS               88361
         ST    R14,PUTR14
         LA    WC,SYSUT2     SET FOR SOURCE OUTPUT               88361
         CLI   CURMFLAG,1    GOING TO MACROS ?                   88361
         BNE   *+8           NO                                  88361
         LA    WC,SYSUT4     POINT TO MACROS                     88361
         L     WA,OBLKPTR          POINT TO SLOT IN OUTPUT BLOCK
         LR    WB,R1               POINT WB TO CARD
         LA    WA,80(,WA)          BUMP TO NEXT BUFR SLOT
         C     WA,OBUFEND          STILL WITHIN BUFFER?
         BNL   PUTWRT              BR IF NOT
         LTR   WB,WB               FLUSH REQUEST?
         BNZ   PUTMOVE             BR IF NOT
         SPACE 1
PUTWRT   DS    0H
         LR    R1,WA               COMPUTE OUTPUT
         S     R1,@OBUF              BLOCKSIZE AND STORE IT      88361
         BNP   PUTFIX01      PREVENT ABEND IF ZERO BLOCK LENGTH  81117
         STH   R1,DCBBLKSI-IHADCB(,WC)  IN THE DCB               88361
         SPACE 1
         L     WA,@OBUF      RESTORE THE BUFFER ADDRESS          88361
         WRITE P2WDECB,SF,(WC),(WA),'S'                          88361
         CHECK P2WDECB             CHECK FOR COMPLETION
PUTFIX01 OC    NOTESLOT,NOTESLOT   ARE WE SUPPOSED TO DO A NOTE  81117
         BNZ   PUTNONO             BR IF NOT
         NOTE  (WC)          DO THE NOTE                         88361
         ST    R1,NOTESLOT         AND REMEMBER IT
         SPACE 1
PUTNONO  DS    0H
         L     WA,@OBUF            RESET WA TO FIRST SLOT IN BUFFER
PUTMOVE  LTR   WB,WB               IS THERE A CARD TO WRITE?
         BZ    PUTSTOW             NO - GO STOW (HO HO)
         MVC   0(80,WA),0(WB)      MOVE IN THE CARD
         ST    WA,OBLKPTR          AND REMEMBER ADDR FOR NEXT TIME
PUTEXIT  LM    WA,WC,PUTSAVE                                     88361
         L     R14,PUTR14
         BR    R14                 RETURN TO CALLER
         SPACE 1
PUTSTOW  DS    0H
         MVC   STOWMOD,CURMOD      SET MEMBER FOR STOW
         ICM   R0,B'1110',NOTESLOT  LOAD AND TEST TTR            88361
         BZ    PUTNULL       NONE ?                              88361
         STCM  R0,B'1110',STOWTTR  SET TTR FOR STOW              88361
         STOW  (WC),STOWREQ  RECORD THE MODULE'S TTR             88361
         LTR   R0,R15        TEST STOW (AND ZERO CARD POINTER)   88361
         BNZ   STOWERR             BR IF NOT
         MVC   PSTOWX+8(8),CURMOD  MOVE IN MODULE NAME
         MVC   PSTOWX+27(6),SYSUT2DD-SYSUT2(WC)  IDENTIFY        88361
PSTOWX   LOG   HIGH,,,'         STOWED ON SYSUT2'
PSTOWX2  XC    NOTESLOT,NOTESLOT   ZERO WILL FORCE NOTE NEXT TIME
         L     R14,@OBUF     GET THE OUTPUT BUFFER               88361
         SH    R14,=H'80'    FINAGLE TO GET START ADDRESS        88361
         ST    R14,OBLKPTR      CORRECT ON NEXT INCREMENTATION   88361
         B     PUTEXIT
PUTNULL  MVC   PUTNULLM+8(8),CURMOD                              88361
         SLR   R0,R0         NO CARD                             88361
PUTNULLM LOG   ERR,16,,'XXXXXXXX NOT STOWED - NO TEXT'           88361
         B     PSTOWX2       BUT CONTINUE                        88361
         SPACE 1
STOWERR  MVC   PSTOWE+24(8),CURMOD SET NAME OF OFFENDING MODULE
         SLR   R0,R0         NO CARD                             88361
PSTOWE   LOG   ERR,16,,'STOW FAILED FOR XXXXXXXX  *** ERROR'
         B     ABEND               END IT ALL
         TITLE 'H S P M E R G E  ***  SUBROUTINES AND DATA'      85237
         SPACE 2
*        CALLING SEQUENCE:
*        LA    R0,LAST-BYTE-OF-CARD+1
*        LA    R1,HI-ORDER-BYTE
*        BAL   R14,SCANFLD
*        RETURN HERE WITH R1 POINTING TO BYTE WHERE SCAN STOPPED
         SPACE 3
SCANFLD  STM   R2,R4,SCANSAVE      SAVE REGISTERS USED
         MVC   SCANOUT,=CL8' '     INITIALIZE OUTPUT FIELD
         LR    R2,R1               REMEMBERS STARTING POINT
         LA    R3,8                MAX BYTES TO SCAN
SCCLI    CR    R1,R0               END OF CARD?
         BE    SCOVR               BR IF SO
         CLI   0(R1),C' '          FOUND A BLANK?               GP97266
         BE    SCOVR               BR OUT OF LOOP IF SO
         CLI   0(R1),C','          FOUND A COMMA?
         BE    SCOVR               SAME TREATMENT
         CLI   0(R1),C'/'          FOUND A RANGE SEPARATOR?     GP97266
         BE    SCOVR               SAME TREATMENT               GP97266
         LA    R1,1(,R1)           MUST BE A VALID CHARACTER
         BCT   R3,SCCLI            COUNT DOWN BY 1
SCOVR    DS    0H
         LR    R3,R1               COMPUTE THE
         SR    R3,R2               NUMBER OF VALID CHARACTERS
         BZ    SCNOMOV             ZERO ==> WE'RE ALL SET
         BCTR  R3,0                 360
         EX    R3,SCANMVC          MOVE WHAT WE FOUND           GP97266
SCNOMOV  LM    R2,R4,SCANSAVE      RESTORE THE REGS WE USED
*
*    SCAN NON-BLANKS AND NON-COMMANDS
*
SCANNBC  CR    R1,R0               END OF CARD?
         BNLR  R14                 BR IF SO                      88361
         CLI   0(R1),C' '          END OF FIELD?
         BER   R14                 BR IF SO                      88361
         CLI   0(R1),C','          COMMA?
         BE    SCANNBC2            BR IF SO                     GP05238
         CLI   0(R1),C'/'          FOUND A RANGE SEPARATOR?     GP97266
SCANNBC2 LA    R1,1(,R1)           NEXT CHARACTER               GP05238
         BNE   SCANNBC             BR IF NOT COMMA
         BR    R14
         SPACE 1
SCANRTN  DS    A
SCANSAVE DS    3F
SCANOUT  DS    CL8
SCANMVC  MVC   SCANOUT(0),0(R2)    MOVE WHAT WE FOUND           GP97266
         SPACE 1
*    SCAN BLANKS AND COMMAS
*
SCANCB   CR    R1,R0               END OF CARD?
         BNLR  R14                 BR IF SO                      88361
         CLI   0(R1),C' '          BLANK?
         BE    SCANCBX             BR IF SO                     GP97266
*FAILS*  CLI   0(R1),C'/'          FOUND A RANGE SEPARATOR?     GP97266
*FAILS*  BE    SCANCBX             BR IF SO                     GP97266
         CLI   0(R1),C','          COMMA?
         BNER  R14                 BR IF NOT                     88361
SCANCBX  LA    R1,1(,R1)           NEXT CHARACTER               GP97266
         B     SCANCB
         SPACE 3                                                 90334
*    SCAN FOR CONTROL CARD VERB
*
SCANVERB ST    R14,SCANRTN
         BAL   R14,SCANNBC         SKIP LABEL
         BAL   R14,SCANCB          GO TO VERB
         BAL   R14,SCANFLD         GET THE VERB
         BAL   R14,SCANCB          SKIP TO OPERANDS
         L     R14,SCANRTN
         BR    R14                 RETURN
         SPACE 2                                                 *GPP*
*    SCAN DELETE OPERANDS
*
SCANDEL  ST    R14,SCANRTN         SAVE RETURNS
         CLC   =C'DELETE ',SCANOUT     IEBUPDTE?
         BE    SCANDDTE            BR IF SO
         BAL   R14,SCANFLD         GET 1ST SEQUENCE
         MVC   DELSEQ1(8),SCANOUT  SAVE IT
         BAL   R14,SCANFLD         GET 2ND SEQUENCE
         MVC   DELSEQ2(8),SCANOUT  SAVE IT
SCANDXIT CLI   DELSEQ2,C' '        2ND SEQUENCE GIVEN?
         BNE   *+10                BR IF SO
         MVC   DELSEQ2(8),DELSEQ1  MAKE BOTH SAME
         LA    R15,DELSEQ1   POINT TO SEQUENCE FIELD            GP10260
         BAL   R14,RADJSEQ   AND RIGHT-JUSTIFY                  GP10260
         LA    R15,DELSEQ2   POINT TO SEQUENCE FIELD            GP10260
         BAL   R14,RADJSEQ   AND RIGHT-JUSTIFY                  GP10260
SCANEXIT L     R14,SCANRTN         RETURN                       GP10260
         BR    R14
         SPACE 1
RADJSEQ  ICM   R0,15,0(R15)  GET LEFT HALF                      GP10260
         ICM   R1,15,4(R15)  GET RIGHT HALF                     GP10260
RADJSEQL CLM   R1,1,=CL8' '  TRAILING BLANK ?                   GP10260
         BNER  R14           NO; RETURN                         GP10260
         SRDL  R0,8          SHIFT                              GP10260
         ICM   R0,8,=C'0'    ZERO FILL                          GP10260
         B     RADJSEQL      AND REPEAT                         GP10260
         SPACE 1
SCANDDTE MVC   DELSEQ1(8),=CL8' '  CLEAR SEQ FIELDS
         MVC   DELSEQ2(8),=CL8' '
SCANDKW  CR    R1,R0               END OF CARD?
         BNL   SCANDXIT            BR IF SO
         CLI   0(R1),C' '          END OF OPERANDS?
         BE    SCANDXIT            BR IF SO
         CLC   0(5,R1),=C'SEQ1='   1ST SEQ?
         BE    SCANDS1             BR IF SO
         CLC   0(5,R1),=C'SEQ2='   2ND SEQ?
         BE    SCANDS2             BR IF SO
         BAL   R14,SCANNBC         SKIP THE FIELD
         B     SCANDKW             TRY AGAIN
*
SCANDS1  LA    R1,5(,R1)           SKIP KEYWORD
         BAL   R14,SCANFLD         GET SEQ NO.
         MVC   DELSEQ1(8),SCANOUT  SAVE IT
         B     SCANDKW             CONTINUE
*
SCANDS2  LA    R1,5(,R1)           SKIP KEYWORD
         BAL   R14,SCANFLD         GET SEQ NO.
         MVC   DELSEQ2(8),SCANOUT  SAVE IT
         B     SCANDKW             CONTINUE
         SPACE 2
ADDCOPY  ST    R2,SCANSAVE   SAVE REG                            *GPP*
         L     R2,@COPYTAB   GET START OF TABLE ADDRESS          88361
ADDCOPYL TM    0(R2),X'FF'   END OF TABLE OR AVAILABLE ENTRY ?   *GPP*
         BM    ADDCOPYI      NO; SKIP THIS ENTRY                 *GPP*
         BO    ADDCOPYF      TABLE FULL                          *GPP*
         MVI   0(R2),X'1'    SHOW OCCUPIED                       *GPP*
         MVC   1(8,R2),SCANOUT  COPY MODULE NAME                 *GPP*
ADDCOPYS L     R2,SCANSAVE                                       *GPP*
         BR    R14           RETURN TO CALLER                    *GPP*
ADDCOPYI CLC   1(8,R2),SCANOUT  MODULE ALREADY IN TABLE ?        *GPP*
         BE    ADDCOPYS      YES - JUST RETURN                   *GPP*
         LA    R2,9(,R2)     TRY NEXT ENTRY                      *GPP*
         B     ADDCOPYL                                          *GPP*
ADDCOPYF LOG   ERR,16,,'&&COPYMAX (&COPYMAX) EXCEEDED'           *GPP*
         B     ABEND                                             *GPP*
         EJECT ,                                                 85237
ERR      EQU   9
HIGH     EQU   7
WARN     EQU   5
NOTE     EQU   3
LO       EQU   1
OMNIA    EQU   0
         SPACE 1
ORIGLOG  DC    C'01'               ORIGINAL LOGGING LEVEL
         SPACE 1
SYNTEX   DC    0A(0),X'85',AL3(INPEXIT) SYSIN CONCATENATION EXIT *GPP*
         SPACE 1                                                 90334
PHDR1    FDOPT NL,CC=C'#'    REQUEST AUTO PAGE/DATE/TIME         88361
         FDPRT 'HSPMERGE        MODULE:',PADR                    88361
         FDPRT CURMOD        CURRENT MEMBER NAME                 88361
         FDPRT *END                                              88361
         SPACE 1
PHDR2A   DC    C'#HSPMERGE               - ERROR SUMMARY'        88361
PHDR2ALN EQU   *-PHDR2A      LENGTH OF TOP TITLE                 88361
         SPACE 1                                                 90334
PHDR2B   FDPRT 'MODULE',LEN=8,PAD                                88361
         FDPRT ' PAGE',LEN=10                                    88361
         FDPRT 'CARD',LEN=82                                     88361
         FDPRT 'MESSAGE'                                         88361
         FDPRT *END                                              88361
         SPACE 1
MINSEQ   DC    X'0000000000000000' INITIAL SEQUENCE NUMBER
MAXSEQ   DC    (L'MINKEY)X'FF'  EOF                              88361
         SPACE 1                                                 90334
SYNPUT   DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GL,EODAD=INPEOF,      *GPP* X
               RECFM=FB,LRECL=80,EXLST=SYNTEX                    *GPP*
         SPACE 1                                                 90334
WORKDD   DCB   DDNAME=WORK,DSORG=PS,MACRF=PM,                    *GPP* X
               BLKSIZE=&OUTBUFF,RECFM=FB,LRECL=80               GP13250
         SPACE 1                                                 90334
SYSIN    DCB   DDNAME=WORK,DSORG=PS,MACRF=(RP),EODAD=PASS1A,     *GPP* X
               BLKSIZE=&INPBUFF,RECFM=FB,LRECL=80               GP13250
CONFLAG  DC    X'0'          INPUT CONCATENATION FLAG            *GPP*
         SPACE 1                                                 90334
SYSUT1 DCB DDNAME=SYSUT1,RECFM=FB,MACRF=R,EODAD=P2EODAD,DSORG=PO
SYSUT3 DCB DDNAME=SYSUT3,RECFM=FB,MACRF=R,EODAD=P2EODAD,DSORG=PO 88361
         SPACE 1                                                 90334
COPYLIB  DCB   DDNAME=INPDS,RECFM=FB,MACRF=R,EODAD=PASS1A,DSORG=PO GPP
         SPACE 1                                                 90334
SYSUT2 DCB DSORG=PO,DDNAME=SYSUT2,MACRF=W,RECFM=FB,LRECL=80
SYSUT2DD DC    CL8'SYSUT2'   2/2                                 88361
SYSUT4 DCB DSORG=PO,DDNAME=SYSUT4,MACRF=W,RECFM=FB,LRECL=80      88361
         DC    CL8'SYSUT4'   2/2                                 88361
         SPACE 1                                                 88361
ERRFILE  PRTWORK ERRORS,SUMPRINT,TITLE=5   ERROR/SUMMARY FILE    88361
PATFILE  PRTWORK SYSPRINT,TITLE=2,PAGE=0                         88361
PATFILEN EQU   *-PATFILE                                         88361
         SPACE 1                                                 90334
         DCBD  DSORG=PS,DEVD=DA                                  88361
MAXBLOK  EQU   DCBBLKSI-IHADCB,2,C'H'                            *GPP*
HSPMERGE CSECT ,
         SPACE 1                                                 *GPP*
         LTORG ,
         TITLE 'H S P M E R G E  ***  MESSAGE LOGGING SUBROUTINE'
         SPACE 2
*        CALLING SEQUENCE:
*        R1 -->AL1(MSG LEV,COND CODE,SPACING GROUP,MSG LGTH)
*              C'MESSAGE'
*        R0 -->CARD IMAGE TO LOG  (0 IF NO CARD TO PRINT)
*        R14 --> RETURN ADDRESS
         PUSH  USING                                            GP97206
         DROP  ,                                                GP97206
         USING SAVE,R13      DECLARE COMMON SAVE AREA           GP97206
         SPACE 1                                                GP97206
LOG      STM   R0,R15,LOGSAVE  SAVE ALL REGISTERS               GP97206
         LR    R12,R15       MAKE LOCAL BASE                    GP97206
         USING LOG,R12       AND DECLARE IT                     GP97206
         SPACE 1
         CLC   1(1,R1),RETCODE+3   COND CODE : CURRENT CODE
         BNH   LOGCDOK             BR IF NO CHANGE NECESSARY
         MVC   RETCODE+3,1(R1)     REPLACE CURRENT CODE
         L     WA,RETCODE          PICK IT UP
         CVD   WA,DBLWK
         L     R15,=A(CHCODE)  REGAIN ADDRESSABILITY            GP97206
         UNPK  CHCODE-CHCODE(L'CHCODE,R15),DBLWK   CONVERT      GP97206
         OI    CHCODE+1-CHCODE(R15),X'F0'      FIX UP ZONE      GP97206
         SPACE 1
LOGCDOK  MVC   TEMPCODE,1(R1)      SAVE FOR LATER CHECK
         SLR   WA,WA               CLEAR WA
         IC    WA,0(,R1)           INSERT MESSAGE LOGGING LEVEL
         CVD   WA,DBLWK            CONVERT TO DECIMAL
         UNPK  MSGLEV,DBLWK        AND TO EBCDIC
         OI    MSGLEV+1,X'F0'      FIX UP THE ZONE
         CLC   MSGLEV,CURLOG       COMPARE TO THRESHOLD
         BL    LOGETST             BR IF HE'S NOT INTERESTED
         SPACE 1
         MVI   PLINE,C' '          SET TO BLANK PRINT LINE      GP97266
         MVC   PLINE+1(132),PLINE  DO IT
         SPACE 1
         SR    WB,WB         JUST IN CASE                       GP05225
         IC    WB,3(,R1)           PICK UP MESSAGE LENGTH       GP05225
         LA    WA,PLINE+133        POINT PAST PRINT LINE        GP05225
         SR    WA,WB               SO WE CAN RIGHT JUSTIFY THE MESSAGE
         SH    WB,=H'1'      LENGTH FOR EXECUTE                 GP05225
         BM    LOGNOMSG            BR IF NONE                   GP05225
         EX    WB,EXLOGMVC   MOVE THE MESSAGE                   GP05225
LOGNOMSG DS    0H
         LTR   WA,R0               POINT TO CARD IMAGE
         BZ    LOGMCARD            IS THERE ONE? BR IF NO
         MVC   PLINE+1(80),0(WA)   MOVE IN THE CARD IMAGE
LOGMCARD DS    0H
         MVC   TEMPSP,2(R1)        TEMP COPY OF SPACING GROUP
         NI    TEMPSP,254          TURN OFF LO-ORDER BIT
         CLI   SAVSPACE,0          LAST TIME HAD GROUP ZERO?
         BE    LOGDUBL             BR IF SO
         CLI   2(R1),0             THIS TIME HAS GROUP ZERO?
         BE    LOGDUBL             BR IF SO
         TM    2(R1),1             DUBL SPACE REQUEST?
         BO    LOGDUBL             BR IF SO
         CLC   SAVSPACE,2(R1)      SAME GROUP?
         BE    LOGSINGL            SKIP DUBL SPACE
LOGDUBL  MVI   PLINE,C'0'          SET DOUBLE SPACE CC
LOGSINGL MVC   SAVSPACE,TEMPSP     REMEMBER THIS SPACING GROUP
         PRTF  PLINE,L'PLINE,DEV=1  WRITE TO SYSPRINT            88361
LOGETST  CLI   TEMPCODE,0          IS ERROR DIAGNOSTIC?
         BE    LOGEXIT             BR IF NOT
         MVI   PLINE,C' '          GET READY TO DOCTOR LINE FOR SUMMRY
         PRTLIST ERRLINE,DEV=2  PRINT ERROR MESSAGE              88361
LOGEXIT  LM    R0,R15,LOGSAVE                                   GP97206
         BR    R14
EXLOGMVC MVC   0(*-*,WA),4(R1)     MOVE THE MESSAGE             GP05225
         SPACE 1
ERRLINE  FDPRT CURMOD,NL     WRITE MODULE IN ERROR               88361
         FDPRT PRPAGE,I,RADJ,PAD,LEN=5  PAGE OF ERROR            88361
         FDCLC PLINE,PLINE+1,15,BE=ERRLINE2  IF NO CARD, FULL MSG
         FDPRT PLINE+1,80,PAD  CARD IMAGE OR BLANKS              88361
         FDPRT PLINE+97,36   ERROR MESSAGE                       88361
         FDPRT *END                                              88361
ERRLINE2 FDPRT PLINE+16,117  PRINT ENTIRE ERROR MESSAGE          88361
         FDPRT *END                                              88361
         SPACE 1                                                GP97206
         LTORG ,                                                GP97206
         POP   USING                                            GP97206
         EJECT ,                                                 *GPP*
*  SMALL SUBROUTINES AND EXITS
         PUSH  USING                                             88361
         DROP  ,                                                 88361
         USING IHADCB,R1     DECLARE DCB                         *GPP*
         USING INPEXIT,R15   DECLARE EXIT                        *GPP*
INPEXIT  TM    CONFLAG-SYSIN(R1),1     FIRST TIME ?              88361
         BNZ   INPEXIT2      NO                                  *GPP*
         OI    DCBOFLGS,X'08' SET UNLIKE CONCATENATION           *GPP*
         MVI   CONFLAG-SYSIN(R1),1     SET FLAG                  88361
         BR    R14           RETURN                              *GPP*
INPEXIT2 OI    CONFLAG-SYSIN(R1),2     CONCATENATION - SKIP RECORD
         BR    R14           RETURN                              *GPP*
         POP   USING                                             88361
         SPACE 2                                                GP97266
*   THIS CODE CHECKS THE COPY REQUEST. THIS CARD FORMAT IS:     GP97266
*    ./LABEL COPY  NAME=MEMBER   COPY ONE MEMBER FROM INPDS     GP97266
*    ./LABEL COPY  NAME=MEM?B*   COPY ALL MATCHING WILD-CARDS   GP97266
*    ./LABEL COPY  NAME=LOWMEM/HIGHMEM  COPY ALL IN RANGE       GP97266
         PUSH  USING                                            GP97266
         USING *,R15         SET BY CALLER                      GP97266
P1COPY   STM   R0,R15,SAVECOPY  SAVE ENTRY REGISTERS            GP97266
         LR    R10,R15       COPY LOCAL BASE                    GP97266
         DROP  R15                                              GP97266
         USING P1COPY,R10    DECLARE IT                         GP97266
         CLC   =C'NAME=',0(R1)  NAME KEYWORD ?                  GP97266
         BNE   *+8           NO                                 GP97266
         LA    R1,5(,R1)     SKIP OVER IT                       GP97266
         MVC   COPYMASK,=CL8'*'  GENERAL MATCH                  GP97266
         XC    COPYLOW,COPYLOW   NO LOW                         GP97266
         MVC   COPYHIGH,=8X'FF'  NO HIGH                        GP97266
         BAL   R14,SCANFLD   GET THE NAME/SAVE IN SCANOUT       GP97266
         BCTR  R1,0                                             GP97266
         CLI   0(R1),C'/'    RANGE ?                            GP97266
         BE    P1COPYRN      YES                                GP97266
         CLI   SCANOUT,C' '  ANY NAME ?                         GP97266
         BE    P1COPERR      NO; WRITE ERROR MESSAGE            GP97266
         TRT   SCANOUT,WILDCARD  SEE IF WILDCARD SPECIFICATION  GP97266
         BNZ   P1COPYEM      YES; PROCESS MANY                  GP97266
         LR    R0,WB         SET REG FOR POSSIBLE ERROR MESSAGE GP97266
         BAL   R14,ADDCOPY   ADD NAME TO COPY TABLE             GP97266
P1COPYEX LM    R0,R15,SAVECOPY  RESTORE ALL REGISTERS           GP97266
         BR    R14           RETURN TO READER                   GP97266
P1COPYRN MVC   COPYLOW,SCANOUT  SET LOW PART OF RANGE           GP97266
         LA    R1,1(,R1)     SKIP SEPARATOR                     GP97266
         BAL   R14,SCANFLD   LOOK FOR HIGH END                  GP97266
         CLI   SCANOUT,C' '  ANYTHING FOUND?                    GP97266
         BE    P1COPYCM      NO; NO HIGH                        GP97266
         MVC   COPYHIGH,SCANOUT  SET HIGH LIMIT                 GP97266
         B     P1COPYCM                                         GP97266
P1COPYEM MVC   COPYMASK,SCANOUT  MOVE MASK                      GP97266
         SPACE 1                                                GP97266
P1COPYCM OPEN  MF=(E,INPDSDE)  OPEN FOR DIRECTORY READ          GP97266
         MVI   COPYHWM,0     SET FLAG - NO ADDITION             GP97266
P1COPYGL GET   DIRECT        GET NEXT BLOCK                     GP97266
         LR    R3,R1         PRESERVE BLOCK ADDRESS             GP97266
         LA    R4,2          LENGTH FIELD IS HALFWORD           GP97266
         LH    R5,0(,R3)     LOAD LENGTH OF BLOCK               GP97266
         AR    R5,R3         SET LAST ADDRESS                   GP97266
         SH    R5,=H'12'     BUT DON'T OVERRUN                  GP97266
P1COPYML BXH   R3,R4,P1COPYGL GET NEXT MEMBER IF NONE LEFT IN BLOCK
         CLC   0(8,R3),=8X'FF'  END OF DIRECTORY?               GP97266
         BE    P1COPYEF      YES; TREAT LOGICAL END AS EOF      GP97266
         IC    R4,11(,R3)    LOAD FLAG BYTES                    GP97266
         N     R4,=X'0000001F'  LEAVE ONLY LENGTH BITS          GP97266
         SLL   R4,1          GET LENGTH OF OPTIONAL PORTION     GP97266
         LA    R4,12(,R4)    AND ADD LENGTH OF FIXED PORTION    GP97266
         CLC   0(8,R3),COPYLOW  IS NAME IN RANGE?               GP97266
         BL    P1COPYML      NO; GET NEXT MEMBER                GP97266
         CLC   0(8,R3),COPYHIGH                                 GP97266
*OOPS    BH    P1COPYML      TOO HIGH                           GP97266
         BH    P1COPYEF      TOO HIGH - TREAT AS EOF            GP97266
         OI    COPYHWM,1     SHOW MATCH FOUND                   GP97266
         LR    R1,R3         SET NAME ADDRESS                   GP97266
         LA    R0,8          SET NAME LENGTH                    GP97266
         LR    R15,R0        COPY LENGTH                        GP97266
         LA    R14,COPYMASK  SET MASK ADDRESS                   GP97266
         BAL   R9,CLCMASK    COMPARE NAME TO MASK               GP97266
         BNE   P1COPYML      NOT EQUAL; GET NEXT MEMBER         GP97266
         MVC   SCANOUT,0(R3) MOVE NAME TO PARM AREA             GP97266
         LR    R0,WB         SET REG FOR POSSIBLE ERROR MESSAGE GP97266
         BAL   R14,ADDCOPY   ADD NAME TO COPY TABLE             GP97266
         B     P1COPYML      DONE; GET NEXT MEMBER              GP97266
P1COPYEF CLOSE MF=(E,INPDSDE)  CLOSE DIRECTORY DCB              GP97266
         CLI   COPYHWM,0     ADDITIONS MADE?                    GP97266
         BH    P1COPYEX      AND EXIT IF ADDITIONS MADE         GP97266
         LR    R0,WB                                            GP97266
         MVC   *+6+8(8),CURLEVEL                                 88361
         LOG   WARN,4,,'XXXXXXXX: NO MEMBERS MATCHED REQUEST'   GP97266
         B     P1COPYEX      AND EXIT IF ADDITIONS MADE         GP97266
         SPACE 1                                                GP97266
P1COPERR LR    R0,WB                                            GP97266
         MVC   *+6+8(8),CURLEVEL                                 88361
         LOG   ERR,16,,'XXXXXXXX: SYNTAX ERROR IN MASK/RANGE *** ERROR'
         B     ABEND                                            GP97266
         SPACE 1                                                GP97266
CLCMASK  CMASK MASKEND='*',MASKEQU='?'  BUILD MATCH SUBROUTINE  GP97266
         SPACE 1                                                GP97266
WILDCARD DC    256X'00'      WILD-CARD DETECTION                GP97266
         TRENT WILDCARD,C'?',C'?'  HONOR ? AS MATCH IN POSITION GP97266
         TRENT ,C'*',C'*'          HONOR * AS COMPLETE MATCH    GP97266
         ORG   ,                                                GP97266
INPDSDE  OPEN  (DIRECT,INPUT),MF=L  OPEN/CLOSE LIST             GP97266
DIRECT   DCB   DDNAME=INPDS,DSORG=PS,RECFM=U,LRECL=256,BLKSIZE=256,    *
               EODAD=P1COPYEF,MACRF=GL                          GP97266
         LTORG ,                                                GP97266
         POP   USING                                            GP97266
         EJECT ,                                                 *GPP*
SAVE     DSECT ,             WORK AND SAVE AREA                  88361
DBLWK    DS    D
DB2      DS    D             SECOND DOUBLE-WORD WORK AREA        87025
         SERVDEFS ,          SERVICE ROUTINE DATA               GP10260
@SOURCE  DS    A             START OF SOURCE LEVEL ENTRY         88361
@LEVONE  DS    A             START OF FIRST MODIFICATION LEVEL   88361
@LEVEND  DS    A             FIRST BYTE PAST LEVELS              88361
@OBUF    DS    A             OUTPUT BUFFER                       88361
@INBUF   DS    A             FIRST INPUT BUFFER                  88361
@INBUF2  DS    A             SECOND INPUT BUFFER                 88361
@MDBUF   DS    A             FIRST MODIFICATION BUFFER           88361
@LASTBUF DS    A             LAST MODIFICATION BUFFER            88361
@COPYTAB DS    A             ADDRESS OF COPY TABLE               88361
OBLKPTR  DC    A(0)          PRESET FOR OBUF-80                  88361
OBUFEND  DC    A(0)          =OBUF+ACTUAL BLKSIZE                88361
TEMPCODE DC    X'00'               SAVED FOR COMPARISON
         SPACE 1
CURLEVEL DC    CL8'        '
CURMOD   DC    CL8' '  1/2   CURRENT MODULE
CURMFLAG DC    X'00'   2/2                                       88361
FSTART   DS    CL8
FSTOP    DS    CL8
         SPACE 1
SEQ1     DS    CL8
SEQ2     DS    CL8
DELSEQ1  DS    CL8
DELSEQ2  DS    CL8
NUMSEQ1  DC    CL8' '        ./ NUMBER SEQ1 OPERAND              85237
NUMNEW1  DC    CL8' '                  NUM1 OPERAND              85237
NUMINCR  DC    CL8' '                  INCR OPERAND              85237
         SPACE 1
CURLOG   DC    C'01'               CURRENT LOGGING LEVEL        GP97206
MSGLEV   DS    CL2
SAVSPACE DS    X
TEMPSP   DS    X
LOGSAVE  DS    16A(0)                                           GP97206
PRTFILE  MAPPRT PREFIX=PR,DSECT=NO  SYSPRINT WORKAREA            88361
SAVECOPY DS    16F'0'        P1COPY SAVE AREA                   GP97266
COPYLOW  DS    CL8' '        LOW MEMBER IN RANGE                GP97266
COPYHIGH DS    CL8' '        HIGH MEMBER IN RANGE               GP97266
COPYMASK DS    CL8'*'        WILD-CARD REQUEST MASK             GP97266
COPYSAVE DC    A(0)          COPYLIB PROCESSING SAVE WORD        *GPP*
COPYINDX DC    H'0'          INDEX FOR CURRENT MEMBER            *GPP*
BLOKMAX  DC    H'0'          MAX BLOCKSIZE OF INPUT DCBS         *GPP*
COPYFLAG DC    X'0'          COPYLIB PROCESSING FLAG             *GPP*
COPYHWM  DS    X'00'         MATCH FLAG FOR MASK/RANGE COPY     GP97266
DEBSW    DC    AL1(0)              DEBUG SW INITIALLY OFF
ENTRFLAG DC    AL1(0)        0-HSPMERGE   1-HASPMRGE            GP11107
         SPACE 1
OVFLGS   DS    X
OVERRID  EQU   X'80'
DIFFRNT  EQU   X'40'
         SPACE 1
P2RSAVE  DS    13F
PLINE    DS    CL133
PUTSAVE  DS    3F                                                88361
PUTR14   DS    F
NOTESLOT DC    F'0'
         SPACE 1
CARD     DS    CL80
         ORG   *-8-1-8
CDLEVEL  DS    CL8
         DS    C
CDSEQ    DS    CL8
CDCK     EQU   *-CARD
         SPACE 2                                                GP97266
STOWREQ  DS    0F
STOWMOD  DS    CL8
STOWTTR  DS    CL3
STOWC    DC    X'00'               CONSTANT FOR STOW MACRO
SAVEEND  EQU   *             END OF WORK AREA                   GP10260
         SPACE 1                                                 90186
         END
