@@SYSTEM TITLE '@ @ S Y S T E M  ***  PROGRAM INVOCATION SUBROUTINE'
***********************************************************************
**                                                                   **
**   CALL @@SYSTEM,(req-type,pgm-len,pgm-name,parm-len,parm),VL      **
**                                                                   **
**   "-len" fields are self-defining values in the calling list,     **
**       or else pointers to 32-bit signed integer values            **
**                                                                   **
**   "pgm-name" is the address of the name of the program to be      **
**       executed (one to eight characters)                          **
**                                                                   **
**   "parm" is the address of a text string of length "parm-len",    **
**       and may be zero to one hundred bytes (OS JCL limit)         **
**                                                                   **
**   "req-type" is or points to 1 for a program ATTACH               **
**                              2 for TSO CP invocation              **
**                                                                   **
*---------------------------------------------------------------------*
**                                                                   **
**    Author:  Gerhard Postpischil                                   **
**                                                                   **
**    This program is placed in the public domain.                   **
**                                                                   **
*---------------------------------------------------------------------*
**                                                                   **
**    Assembly: Any MVS or later assembler may be used.              **
**       Requires SYS1.MACLIB. TSO CP support requires additional    **
**       macros from SYS1.MODGEN (SYS1.AMODGEN in MVS).              **
**       Intended to work in any 24 and 31-bit environment.          **
**                                                                   **
**    Linker/Binder: RENT,REFR,REUS                                  **
**                                                                   **
*---------------------------------------------------------------------*
**    Return codes:  when R0=0, R15 has return from program.         **
**    Else R15 is 804 (no storage available); R15=GETMAIN code       **
**      R15 is 806 (ATTACH failed); R15=ATTACH code                  **
**      R15 is 20  (PARM list error); R15 is 1,2, or 3 (req/pgm/parm)**
***********************************************************************
         SPACE 2
@@SYSTEM START 0
         B     BEGIN-*(,R15)      SKIP ID
         DC    AL1(17),C'@@SYSTEM &SYSDATE'
BEGIN    STM   R14,R12,12(R13)    SAVE CALLER'S REGISTERS
         LR    R12,R15            ESTABLISH MY BASE
         USING @@SYSTEM,R12       AND DECLARE IT
         LR    R9,R1              SAVE PARAMETER LIST ADDRESS
         LA    R0,DYNLEN          GET LENGTH OF SAVE AND WORK AREA
         GETMAIN RC,LV=(0)        GET STORAGE
         LTR   R0,R15             SUCCESSFUL ?
         BZ    HAVEDYN            YES
         L     R15,=X'00804000'   LOAD STORAGE SHORTAGE CODE
         STM   R15,R0,16(R13)     SET RETURN VALUES
         B     RETSHORT           RELOAD AND RETURN
         SPACE 1
*    CLEAR GOTTEN STORAGE AND ESTABLISH SAVE AREA
*
HAVEDYN  ST    R1,8(,R13)         LINK OURS TO CALLER'S SAVE AREA
         ST    R13,4(,R1)         LINK CALLER'S TO OUR AREA
         LR    R13,R1
         USING DYNWORK,R13
         XC    CLRWORK,CLRWORK    CLEAR DYNAMIC STUFF
         LM    R4,R8,0(R9)        LOAD PARM VALUES
*   NOTE THAT THE CALLER IS EITHER COMPILER CODE, OR A COMPILER
*   LIBRARY ROUTINE, SO WE DO MINIMAL VALIDITY CHECKING
*
         CH    R4,=H'100'         INTEGER OR ADDRESS ?
         BNH   *+8                INTEGER
         L     R4,0(,R4)          GET REQUEST VALUE
         CH    R5,=H'100'         INTEGER OR ADDRESS ?
         BNH   *+8                INTEGER
         L     R5,0(,R5)          GET PROGRAM NAME LENGTH
         CH    R7,=H'100'         INTEGER OR ADDRESS ?
         BNH   *+8                INTEGER
         L     R7,0(,R7)          GET PARM LENGTH
         SPACE 1
*   EXAMINE PROGRAM NAME LENGTH AND STRING
*
         LA    R0,2               SET ERROR FOR BAD PROGRAM
         LTR   R5,R5              ANY LENGTH ?
         BNP   BADCALL            NO; OOPS
         CH    R5,=H'8'           NOT TOO LONG ?
         BH    BADCALL            TOO LONG; TOO BAD
         BCTR  R5,0
         MVC   PROGNAME(L'PROGNAME+L'OSTEXTL),BLANKS    PRE-BLANK
         EX    R5,EXMVCPGM        MOVE PROGRAM NAME
         CLC   PROGNAME,BLANKS    STILL BLANK ?
         BE    BADCALL            YES; TOO BAD
         SPACE 1
*   BRANCH AND PROCESS ACCORDING TO REQUEST TYPE
*
         LA    R0,1               SET BAD REQUEST TYPE
         CH    R4,=H'1'           OS PROGRAM ATTACH ?
         BE    PROGATT            YES
         CH    R4,=H'2'           CP PROGRAM ATTACH ?
         BE    CALLCP             YES
BADCALL  LA    R15,20             SHOW BAD PARAMETER LIST
         STM   R15,R0,RETR15      SET RETURN CODES
         B     PGMEXIT
         SPACE 2
*   OS PROGRAM ATTACH - PREPARE PARM, ETC.
*
*   NOW LOOK AT PARM STRING
PROGATT  LTR   R7,R7              ANY LENGTH ?
         BM    BADCALL            NO; OOPS
         STH   R7,OSTEXTL         PASS LENGTH OF TEXT
         BZ    SKIPTEXT
         CH    R7,=AL2(L'OSTEXT)  NOT TOO LONG ?
         BH    BADCALL            TOO LONG; TOO BAD
         BCTR  R7,0
         EX    R7,EXMVCTXT        MOVE PARM STRING
SKIPTEXT LA    R1,OSTEXTL         GET PARAMETER ADDRESS
         ST    R1,CPHEAD          SET IT
         OI    CPHEAD,X'80'       SET END OF LIST BIT
         B     COMMATT            GO TO COMMON ATTACH ROUTINE
         SPACE 2
*   TSO CP REQUEST - PREPARE PARM, CPPL, ETC.
*
CALLCP   LTR   R7,R7              ANY LENGTH ?
         BM    BADCALL            NO; OOPS
         LA    R1,OSTEXT-CPPARM(,R7)  LENGTH WITH HEADER
         STH   R1,CPPARM          PASS LENGTH OF COMMAND TEXT
         LA    R1,1(,R7)
         STH   R1,CPPARM+2        LENGTH PROCESSED BY PARSER
         BZ    SKIPMOVE
         CH    R7,=AL2(L'OSTEXT)  NOT TOO LONG ?
         BH    BADCALL            TOO LONG; TOO BAD
         BCTR  R7,0
         EX    R7,EXMVCTXT        MOVE PARM STRING
SKIPMOVE LA    R1,CPPARM          GET PARAMETER ADDRESS
         ST    R1,CPHEAD          SET IT
*   TO MAKE THIS WORK, WE NEED THE UPD, PSCB, AND ECT ADDRESS.
*   THE FOLLOWING CODE WORKS PROVIDED THE CALLER WAS INVOKED AS A
*   TSO CP, USED NORMAL SAVE AREA CONVENTIONS, AND HASN'T MESSED WITH
*   THE TOP SAVE ARE.
         LA    R0,4               SET ERROR FOR BAD CP REQUEST
         LA    R2,CPHEAD+8        CPPLPSCB
         EXTRACT (R2),FIELDS=PSB  GET THE PSCB
         PUSH  USING
         L     R1,PSATOLD-PSA     GET THE CURRENT TCB
         USING TCB,R1
         L     R1,TCBFSA          GET THE TOP LEVEL SAVE AREA
         N     R1,=X'00FFFFFF'    KILL TCBIDF BYTE
         POP   USING
         L     R1,24(,R1)         ORIGINAL R1
         LA    R1,0(,R1)            CLEAN IT
         LTR   R1,R1              ANY?
         BZ    BADCALL            NO; TOO BAD
         TM    0(R1),X'80'        END OF LIST?
         BNZ   BADCALL            YES; NOT CPPL
         TM    4(R1),X'80'        END OF LIST?
         BNZ   BADCALL            YES; NOT CPPL
         TM    8(R1),X'80'        END OF LIST?
         BNZ   BADCALL            YES; NOT CPPL
         CLC   8(4,R1),CPHEAD+8   MATCHES PSCB FROM EXTRACT?
         BNE   BADCALL            NO; TOO BAD
         MVC   CPHEAD+4(3*4),4(R1)  COPY UPT, PSCB, ECT
COMMATT  LA    R1,CPHEAD          PASS ADDRESS OF PARM ADDRESS
         LA    R2,PROGNAME        POINT TO NAME
         LA    R3,TASKECB         AND ECB
         ATTACH EPLOC=(R2),       INVOKE THE REQUESTED PROGRAM         *
               ECB=(R3),SF=(E,DYNATT)
         LTR   R0,R15             CHECK RETURN CODE
         BZ    GOWAIT             GOOD
         L     R15,=X'00806000'   ATTACH FAILED
         STM   R15,R0,RETR15      SET ERROR CODE
         B     PGMEXIT            FAIL
         SPACE 1
GOWAIT   ST    R1,TASKTCB         SAVE FOR DETACH
         WAIT  ECB=TASKECB        WAIT FOR IT TO FINISH
         MVC   RETR15,TASKECB
         DETACH TASKTCB           GET RID OF SUBTASK
         B     PGMEXIT            AND RETURN
EXMVCPGM OC    PROGNAME(0),0(R6)  MOVE NAME AND UPPER CASE
EXMVCTXT MVC   OSTEXT(0),0(R8)    MOVE PARM TEXT
         SPACE 1
*    PROGRAM EXIT, WITH APPROPRIATE RETURN CODES
*
PGMEXIT  LR    R1,R13        COPY STORAGE ADDRESS
         L     R9,4(,R13)    GET CALLER'S SAVE AREA
         MVC   16(2*4,R9),RETR15  RETURN R15 AND R0
         LA    R0,DYNLEN     GET ORIGINAL LENGTH
         FREEMAIN R,A=(1),LV=(0)  AND RELEASE THE STORAGE
         L     R13,4(,R13)   RESTORE CALLER'S SAVE AREA
RETSHORT LM    R14,R12,12(R13) RESTORE REGISTERS; SET RETURN CODES
         BR    R14           RETURN TO CALLER
         SPACE 2
         LTORG ,
BLANKS   DC    CL10' '       PROGNAME+CP SEP.
         SPACE 2
*    DYNAMICALLY ACQUIRED STORAGE
*
DYNWORK  DSECT ,             MAP STORAGE
         DS    18A           OUR OS SAVE AREA
RETR15   DS    F       1/2   PRIMARY RETURN CODE
RETR0    DS    F       2/2   SECONDARY/REASON CODE
         SPACE 1
TASKECB  DS    F             EVENT CONTROL FOR SUBTASK
TASKTCB  DS    A             ATTACH TOKEN FOR CLEAN-UP
CPHEAD   DS    4A            PREFIX FOR CP
CPPARM   DS    2Y     1/4    PARM LENGTH / LENGTH SCANNED
PROGNAME DS    CL8    2/4    PROGRAM NAME (SEPARATOR)
OSTEXTL  DS    Y      3/4    OS PARM LENGTH / BLANKS FOR CP CALL
OSTEXT   DS    CL100  4/4    NORMAL PARM TEXT STRING
         SPACE 1
DYNATT   ATTACH EPLOC=PROGNAME,ECB=TASKECB,SF=L
CLRWORK  EQU   RETR15,*-RETR15,C'X'   ADDRESS & SIZE TO CLEAR
DYNLEN   EQU   *-DYNWORK      LENGTH OF DYNAMIC STORAGE
         SPACE 1
*  IF AVAILABLE, REPLACE REG. EQUATES BY YREGS, REGEQU, OR ASMDREG
*    MACRO.
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         PRINT NOGEN
         IHAPSA ,            MAP LOW STORAGE
         IKJTCB ,            MAP TASK CONTROL BLOCK
         END   ,
