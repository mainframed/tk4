PDSUPDTE TITLE 'P D S U P D T E  ***  STRING SEARCH/REPLACE UTILITY'
***********************************************************************
*                                                                     *
*        THIS PROGRAM IS CSECT PDSUPDTE OF LOAD MODULE PDSUPDTE.  IT  *
*        WAS CREATED BY THE DECOMPILER PROGRAM, DCOMPILE.             *
*                                                                     *
*        THIS PROGRAM CAN BE USED TO SCAN A PDS THAT HAS FIXED, 80    *
*        BYTE RECORDS AND MAKE CHANGES ACCORDING TO PARAMETER INPUT.  *
*        THE FORMAT OF THE PARM RECORD INPUT (SYSIN) IS AS FOLLOWS:   *
*                                                                     *
*                S1<S2<S3<   (STARTS IN POSITION 1)                   *
*        WHERE:                                                       *
*                S1 = STRING TO SEARCH FOR                            *
*                S2 = STRING TO REPLACE S1 WITH                       *
*                S3 = OPTIONAL 3RD STRING WHICH MUST ALSO EXIST       *
*                     BEFORE S2 WILL REPLACE S1.                      *
*                                                                     *
*        THE STRINGS 'END ' OR '</*' ARE RECOGNIZED AS END OF FILE    *
*        ON DDNAME=SYSIN.                                             *
*                                                                     *
*        RECORDS BEING SCANNED MAY CONTAIN THE STRINGS '.NU.' AND/OR  *
*        '.RU.'.  THEY STAND FOR NO UPDATE AND RESUME UPDATE.  THEY   *
*        CAN BE USED TO BRACKET STRINGS WHICH MAY MATCH THE S1 STRING *
*        BUT ARE NOT TO BE CHANGED IF THEY MATCH OR TO BRACKET        *
*        MULTIPLE RECORDS WHICH ARE TO BE BYPASSED.                   *
*                                                                     *
*        THE DDNAME FOR EACH PDS TO SCAN MUST START WITH @.           *
*                                                                     *
*        THE PARM ON THE EXECUTE STATEMENT CAN BE:                    *
*            CHECK -- PRINT CHANGES TO BE MADE, ONLY (DEFAULT).       *
*            UPDATE -- DO UPDATES AND PRINT CHANGES                   *
*            INSTALL -- IPO INSTALL (SEE IPO DOCUMENTATION)           *
*                                                                     *
***********************************************************************
*     OBTAINED FROM THE WEB SITE OF JAY MOSELEY                       *
*     MINOR CHANGES (E.G., PROGRAM ID) BY G. POSTPISCHIL    GP06317   *
***********************************************************************
         PUNCH '  ORDER PDSUPDTE(P) '                           GP06317
         SPACE 2
PDSUPDTE START 0
         B     RTN0F04A-PDSUPDTE(,R15)                          GP06317
         DC    AL1(L'IDSTRING)                                  GP06317
IDSTRING DC    C'PDSUPDTE &SYSDATE &SYSTIME'                    GP06317
DAT0C01C EQU   *
*NONEED  DC    CL46'** USE TO UPDATE FIXED 80 LRECL PO DATASETS **'
*NONEED  TITLE 'INITIALIZATION AND PARM EDIT'
         SPACE 1             SAVE A TREE                        GP06317
RTN0F04A STM   R14,R12,12(R13)
         LR    R12,R15
         LA    R10,2048(,R12)
         LA    R10,2048(,R10)
         USING PDSUPDTE,R12,R10
         L     R8,0(,R1)
         L     R3,WORKSIZE              GET LENGTH FOR GETMAIN  GP06317
         GETMAIN R,LV=(R3)              GET STORAGE             GP06317
         LR    R11,R1
         USING WORKAREA,R11
         LR    R2,R11                                           GP06317
         SR    R1,R1                    ZERO INPUT LENGTH       GP06317
         MVCL  R2,R0                    ZERO THE WORK AREA      GP06317
         SPACE
         LA    R14,SAVEAREA
         ST    R14,8(,R13)
         ST    R13,4(,R14)
         LR    R13,R14
         LR    R1,R11
         A     R1,BUFADMEM              GET OFFSET TO BUFFER IN WORK
         ST    R1,BUFADMEM              SAVE BUFFER ADDRESS
         LA    R1,DST0B904
         ST    R1,DST0B0C0
         ZAP   PACKED60(2),DAT0CD78(2)
         MVI   DST0B4DB,X'01'
         MVI   TRTAB,X'01'               INIT. TRTAB TO
         MVC   TRTAB+1(255),TRTAB         ALL X'01'
         LA    R1,21                     GET NO. SPECIAL CHARACTERS
         SLR   R3,R3
RTN0C0AE EQU   *
         IC    R3,SPECHARS-1(R1)         LOOP TO
         LA    R15,TRTAB(R3)              CHANGE SPECIAL
         MVI   0(R15),X'00'               CHARACTERS TO
         BCT   R1,RTN0C0AE               X'00' IN TRTAB
         LA    R14,DST0B168
         LA    R15,550
         LR    R0,R14
         ICM   R1,8,DAT0CEAE
         MVCL  R14,R0
         MVI   DST0B24B,X'F1'           CC = TOP OF PAGE
         MVC   DST0B24C(24),DAT0CE54    GET TITLE = PDS SCANNING AID
         MVC   DST0B27B(25),DAT0CE6C    SUB-TITLE = CONTROL STATEMENTS
         MVC   DST0B2AB(5),DAT0CE85      INIT. 'MODE='
         MVC   DST0B2BA(5),DAT0CE8A      INIT. 'PAGE:'
         MVC   DST0B2B0(7),DAT0CEA5      INIT. 'CHECK  '
         LA    R1,DST0B790              A(WORK AREA FOR RDJFCB)
         ST    R1,DCBXLIST              INIT. DCB EXIT LIST
         MVI   DCBXLIST,X'87'             FOR RDJFCB
         L     R1,16                    GET A(CVT)
         L     R1,0(,R1)                GET A(NEW/OLD TCB)
         L     R1,4(,R1)                GET A(OUR TCB)
         L     R1,12(,R1)               GET A(TIOT)
         LA    R1,24(,R1)               POINT TO 1ST DD ENTRY
         ST    R1,DST0B0C4              SAVE POINTER
         LA    R1,DST0B169
         ST    R1,DST0B06C
         MVI   DST0B06C,X'47'
         MVI   DST0B0D0,X'C1'           INIT. OBTAIN CAMLST FOR DSN
         LA    R1,DST0B844              A(DSN)
         ST    R1,DST0B0D4
         LA    R1,DST0B806              A(VOLSER)
         ST    R1,DST0B0D8
         LA    R1,DST0B870              A(OBTAIN WORK AREA)
         ST    R1,DST0B0DC
         BAL   R1,SUB0C144
         DC    X'8F'                               C'.'
         DC    AL3(SYSPRINT)            A(SYSPRINT DCB)
SUB0C144 EQU   *
*   SVC -- OPEN  (SYSPRINT,(OUTPUT))
         SVC   19
         TM    SYSPRINT+48,X'10'        OPEN OK?
         BO    RTN0C15C                 YES--CONTINUE
         OI    DAT0CD82,X'08'           NO--ISSUE WTO ERR. MSG
         LA    R1,DAT0CF48
*   SVC -- WTO/WTOR
         SVC   35
         B     RTN0C936
         SPACE 2
* EDIT THE PARM -- UPDATE, INSTALL, CHECK
RTN0C15C EQU   *
         OI    FLAGS2,X'20'             SHOW SYSPRINT OPEN
         CLC   0(2,R8),DWORK            PARM SPECIFIED?
         BNH   RTN0C1C2                 NO--OK--ASSUME CHECK MODE
         CLC   0(2,R8),HALFW7           PARM TOO LONG?
         BH    RTN0C18C                 YES--ERROR
         BE    RTN0C19C                 NO--MUST BE INSTALL MODE
         CLC   DAT0CE99(7),0(R8)        UPDATE?
         BE    RTN0C1B8                 YES--PROCESS UPDATES
         CLC   DAT0CEA3(7),0(R8)        CHECK MODE?
         BE    RTN0C1C2                 YES--PROCESS CHECKS
RTN0C18C EQU   *
         OI    DAT0CD82,X'08'           INVALID PARM OR ENVIRONMENT ERR
         LA    R1,DAT0CF70              INVALID PARM FIELD MSG
         BAL   R14,SUB0CC66             ISSUE ERROR MSG
         B     RTN0C936                 GOTO END OF JOB
         SPACE 2
RTN0C19C EQU   *
         CLC   HALFW7,0(R8)             PARM LENGTH=7 FOR INSTALL?
         BNE   RTN0C18C                 NO
         OI    FLAGS2,X'10'             FLAG INSTALL MODE/CONSOLE INPUT
         OI    FLAGS,X'80'              FLAG UPDATE MODE
         MVC   DST0B2B0(7),DAT0CE91
         B     RTN0C1E2
         SPACE 2
RTN0C1B8 EQU   *
         OI    FLAGS,X'80'              FLAG UPDATE MODE
         MVC   DST0B2B0(7),DAT0CE9B
RTN0C1C2 OPEN  (SYSIN)
         TM    SYSIN+48,X'10'               SYSIN OPEN?
         BZ    RTN0C1DE                     NO--USE CONSOLE
         OI    FLAGS2,X'80'                 YES--SHOW SYSIN OPENED
         B     RTN0C1E2                     CONTINUE
         SPACE 2
RTN0C1DE EQU   *
         OI    FLAGS2,X'40'                 CONSOLE INPUT--SYSIN ERROR
RTN0C1E2 EQU   *
         MVI   DST0B38D,X'FE'
         TITLE 'CONTROL RECORD SCAN/EDIT AND TABLE BUILD'
*
* THIS SECTION WILL LOOP OBTAINING S1<S2<S3< SCAN RECORDS, SAVING
* THE DATA IN A TABLE AND REPEATING UNTIL EOF (OR THE TABLE IS FULL).
* THESE RECORDS MAY SPAN MULTIPLE PHYSICAL RECORDS IF - OR + TRAILS THE
* DELIMITER (<)!
*
* THE CONTROL RECORD TABLE ENTRIES BUILT WILL BE FORMATTED AS FOLLOWS:
*
*     DC   A(NEXT TABLE ENTRY OR 0)
*     DC   AL1(L'S1,L'S2,L'S3)   0=STRING NOT FOUND
*     DC   X'00'=FLAGS X'C0'=S1, S2 AND S3 DELIMITERS FOUND; X'01'=
*                      S1 = S2 (NO UPDATE EFFECTIVELY)
*     DC   CL?'S1',CL?'S2',CL?'S3' -- 1 OR MORE MAY BE MISSING--SEE
*                                     LENGTHS
*
RTN0C1E6 EQU   *
         L     R6,DST0B0C0                  GET A(INPUT BUFFER)
         MVC   0(8,R6),DWORK                RESET FLAGS AND L'FIELDS
         LA    R9,8(,R6)                    GET A(INPUT RECORD AREA)
         LA    R4,4(,R6)                    A(TABLE OF FIELD LENGTHS)
         BAL   R14,READPARM                 GET INPUT RECORD
*  INPUT FROM CONSOLE VIA WTOR OR SYSIN--R2 POINTS TO INPUT RECORD
         L     R0,DAT0CD6C                  GET NNAAAAAA WHERE:
*                                           N= NUMBER OF HIT CHARS = 1
*                                           A=A(STOP CHAR FOR HIT=<)
         LA    R1,0(,R2)                    GET SCAN START ADDRESS
         LR    R14,R3                       GET L'RECORD FOR SCAN = 72
         SLL   R14,24                       SHIFT LENGTH TO HIGH ORDER
         OR    R1,R14                       COMBINE WITH ADDRESS
*
*  SCAN WHOLE RECORD (IF NECESSARY) FOR < AND DO THE FOLLOWING:
*     1. IF NONE FOUND AND NOT 'END ', ERROR FOR BAD PARM.
*     2. IF NONE FOUND AND 'END ', GOTO EOF ON INPUT (SYSIN)
*     3. EDIT CONTROL RECORD FIELDS (S1<S2<S3<).  FIELDS ARE ISOLATED,
*        ENTERED IN A TABLE AND FIELD LENGTH SAVED.  NOTE, FIELDS MAY
*        OPTIONALLY BE ENTERED ON SEPARATE RECORDS WITH A '-' OR '+'
*        FOLLOWING THE <.
*
         BAL   R14,TRTSUBR                  GO DO TRT (RETURN=0 OR +4)
*
* UPON RETURN, THE REGISTERS ARE AS FOLLOWS:
*    R0 = OFFSET TO "HIT" OR LENGTH OF FIELD
*    R1 = "HIT" ADDRESS     (S/B LESS THAN SYMBOL!)
*    R2 = ADDRESS WHERE SCAN CAN CONTINUE ( ADDR OF < + 1)
*    R15= # BYTES REMAINING TO BE SCANNED
* RETURN TO R14 + 0 IF NO HIT AND END OF SCAN
* RETURN TO R14 + 4 IF HIT
*
         B     PARMERR                      ERROR IF NO HITS
         SPACE 4
*
*  AT LEAST 1 < FOUND, BEGIN SCAN FOR S1, S2 AND S3
*
*  FIND END OF STRING 1 -- STRING1<
*
RTN0C226 EQU   *
         BAL   R7,FINDLTS                   SCAN FOR < (LESS THAN SYMB)
         B     PARMERR                      ERROR IF NOT FOUND
*  RETURN HERE IF < FOUND!!!!!!!
RTN0C22E EQU   *
         CLI   4(R6),X'00'                  S1 FIELD FOUND?
         BE    PARMERR                      NO--ERROR
         CLI   0(R2),C'-'                   CONTINUATION AFTER '<' ?
         BE    RTN0C25E                     YES--CONTINUE
         CLI   0(R2),C'+'                   CONTINUATION W/LEADING BLK?
         BNE   RTN0C262                     NO--CONTINUE
         BAL   R14,READCONT                 YES--READ CONTINUATION REC
RTN0C24A EQU   *                             AND REMOVE LEADING BLANKS
         CLI   0(R2),C' '                   BEGIN WITH BLANK?
         BNE   RTN0C262                     NO--FIND END STRING2
         LA    R2,1(,R2)                    YES--SKIP BLANK
         BCT   R3,RTN0C24A                  FIND NEXT NON-BLANK
         B     PARMERR                      ERROR IF NO STRING2
         SPACE 2
* CONTINUATION RECORD BUT NO LEADING BLANKS!
RTN0C25E EQU   *
         BAL   R14,READCONT                 READ NEXT RECORD
*
*  FIND END OF STRING 2 -- STRING1<STRING2<
*
RTN0C262 EQU   *
         BAL   R7,FINDLTS                   DO TRT FOR <
         B     PARMERR                      ERROR IF NOT FOUND
* RETURN HERE IF < FOUND!!!!!
RTN0C26A EQU   *
         CLI   0(R2),C'-'                   CONTINUATION AT POSITION 1?
         BE    RTN0C292                     YES
         CLI   0(R2),C'+'                   CONTINUATION AFTER BLANKS?
         BNE   RTN0C296                     NO--FIND STRING3
         BAL   R14,READCONT                 YES--READ CONTINUATION REC
RTN0C27E EQU   *                             AND REMOVE LEADING BLANKS
         CLI   0(R2),X'40'                  BEGIN WITH BLANK?
         BNE   RTN0C296                     NO--FIND END STRING3
         LA    R2,1(,R2)                    YES--SKIP BLANK
         BCT   R3,RTN0C27E                  FIND NEXT NON-BLANK
         B     PARMERR                      ERROR IF NO STRING3
         SPACE 2
* READ CONTINUATION RECORD BUT NO LEADING BLANKS!!
RTN0C292 EQU   *
         BAL   R14,READCONT                 READ CONTINUATION REC
*
*  FIND END OF STRING 3 -- STRING1<STRING2<STRING3<
*
RTN0C296 EQU   *
         BAL   R7,FINDLTS                   DO TRT FOR <
         B     RTN0C2B6                     MAY BE ERROR IF NOT FOUND
* RETURN HERE IF < FOUND!!!!!
RTN0C29E EQU   *
         CLI   0(R2),C'-'                   CONTINUATION AFTER '<' ?
         BE    RTN0C2AE                     YES
         CLI   0(R2),C'+'                   CONTINUATION W/LEADING BLK?
         BNE   RTN0C2B6                     NO--
RTN0C2AE EQU   *                            YES--READ CONTINUATION REC
         BAL   R14,READCONT                  WITH/WITHOUT LEADING BLANK
         B     RTN0C2BE
         SPACE 2
RTN0C2B6 EQU   *
         CLI   0(R2),X'40'                  CONTINUATION AFTER 3RD < ?
         BH    PARMERR                      YES--ERROR
RTN0C2BE EQU   *
         OI    7(R6),X'C0'                  SHOW S1, S2 AND S3 FOUND
         CLC   4(1,R6),5(R6)                L'S1 = L'S2?
         BNE   RTN0C2E8                     NO--S1 CANNOT = S2
* S1 LENGTH = S2 LENGTH -- NO SPECIAL FIELD HANDLING REQUIRED
         LA    R15,8(,R6)                   POINT TO S1 IN TABLE
         LR    R14,R15                      COPY A(S1 FIELD IN TABLE)
         SLR   R1,R1                        CLEAR FOR IC
         IC    R1,5(,R6)                    GET L'S2
         ALR   R15,R1                       POINT TO S2 STRING IN T.E.
         BCTR  R1,0                         GET LENGTH FOR EXECUTE
         EX    R1,EXC0CD30                  S1 = S2?
         BNE   RTN0C2E8                     NO--SPECIAL HANDLING REQ'D
         OI    7(R6),X'01'                  YES--FLAG S1 = S2
RTN0C2E8 EQU   *
         ST    R9,DST0B0C0                  SAVE A(NEXT CNTL REC T.E.)
         LA    R15,DST0B904                 GET A(CNTL REC. TABLE)
         LA    R15,4092(,R15)               GET A(END OF CNTL. REC TAB)
         CR    R9,R15                       TABLE FULL?
         BH    RTN0C33A                     YES--BEGIN PROCESSING
         SLR   R7,R7                        CLEAR FOR IC
         IC    R7,8(,R6)                    GET 1ST CHAR OF S1
         LA    R7,TRTAB2(R7)                 AS INDEX INTO TRT TABLE
         MVI   0(R7),X'01'                    AND SET 'HIT' ON CHAR
         LA    R3,BUFADTAB                  GET A(CNTL REC T.E. ADDR)
RTN0C30C EQU   *
         ICM   R1,15,0(R3)                  IS THIS ENTRY FREE?
         BZ    RTN0C31A                     YES--USE IT
         LR    R3,R1                        NO--NEXT TABLE ENTRY
         B     RTN0C30C                     LOOP UNTIL END OF ADDRESSES
         SPACE 2
RTN0C31A EQU   *
*  THIS ESSENTIALLY COMPRESSES INPUT BUFFERS CONTAINING S1<S2<S3<
*  PARAMETERS INTO MUCH SMALLER AREA AND THEN THE AREA SAVED IS USED
*  TO BEGIN THE NEXT INPUT AREA!!!
         STCM  R6,15,0(R3)                  STORE A(CNTL REC T.E.)
         B     RTN0C1E6                     READ ANOTHER SYSIN RECORD
         SPACE 2
*
* ERROR DETECTED IN PARM RECORD -- ISSUE ERROR MSG
*
RTN0C322 EQU   *
PARMERR  EQU   *
         LA    R1,DAT0CFD8                  INVALID SYNTAX MSG
         BAL   R14,SUB0CC66                 ISSUE ERROR MESSAGE
         TM    FLAGS2,X'40'                 SYSIN ERROR--USE CONSOLE?
         BO    RTN0C1E6                     YES--SKIP SYSIN PARM ERROR
         OI    DAT0CD82,X'08'               NO--FLAG SYSIN PARM ERROR
         B     RTN0C1E6                     PROCESS NEXT INPUT PARM
         SPACE 2
RTN0C33A EQU   *
         LA    R1,DAT0A0E8                  TOO MANY CONTROL RECS. MSG
         BAL   R14,SUB0CC66                 ISSUE ERROR MSG
         OI    DAT0CD82,X'08'               FLAG SYSIN PARM ERROR
*
* END OF CONTROL CARD SCAN.  END OF JOB IF ERRORS, CLOSE SYSIN IF OPEN,
* BEGIN PDS PROCESSING IF AT LEAST ONE ACCEPTABLE CONTROL RECORD FOUND.
*
RTN0C346 EQU   *
EOFSYSIN EQU   *
         TM    FLAGS2,X'80'                 SYSIN OPEN?
         BZ    RTN0C35A                     NO--SKIP CLOSE
         CLOSE (SYSIN)                      YES--CLOSE IT
RTN0C35A EQU   *
         L     R1,BUFADTAB                  GET A(BUFFER ADDR TABLE)
         TM    DAT0CD82,X'08'               SYSIN PARM/ENVIRONMENT ERR?
         BO    RTN0C936                     YES--GOTO END OF JOB
         LTR   R1,R1                        NO--ANY ACCEPTED PARMS?
         BNZ   RTN0C3BE                     YES--GO PROCESS THEM
         OI    DAT0CD82,X'01'               NO--SET FLAG / RC FOR ERROR
         B     RTN0C936                     GOTO END OF JOB
         EJECT
*
*  THIS SUBROUTINE WILL SCAN THE PARM/CONTROL RECORDS (S1<S2<S3<) AND
*  ISOLATE EACH FIELD.  THE ROUTINE IS REENTERED WHERE IT LEFT OFF
*  UNTIL THE WHOLE RECORD HAS BEEN SCANNED.
*
*  ON ENTRY, THE REGISTERS ARE AS FOLLOWS:
*
*     R2 = ADDRESS TO START/CONTINUE SCAN AT
*     R3 = REMAINING LENGTH FOR SCAN
*     R4 = A(4 BYTES TO CONTAIN L'S1, L'S2, L'S3, AND FLAG BYTE)
*     R7 = RETURN ADDRESS (+0 IF ERROR, +4 IF SCAN OK)
*     R9 = A(VARIABLE LENGTH AREA TO CONTAIN S1,S2,S3)
*
*  NOTE--R4 AND R9 POINT TO A CNTL. RECORD TABLE ENTRY WHICH IS IN
*        THE PROCESS OF BEING FORMATTED.  SINCE THIS ROUTINE IS
*        ENTERED MULTIPLE TIMES THE ABOVE COMMENTS ARE NOT REALLY
*        CORRECT.  R9 AND R4 POINT TO THE START OF THE AREA TO
*        CONTAIN THE APPROPRIATE STRING AND ITS LENGTH.  ON EXIT
*        EACH REGISTER IS BUMPED SO IT WILL POINT TO THE AREA FOR
*        THE NEXT STRING!
*
FINDLTS  EQU   *
         L     R0,DAT0CD6C                  R0=NNAAAAAA
*                                             N=# HIT CHAR FOR TRT=1
*                                             A=A(HIT CHAR STRING (<))
         LA    R1,0(,R2)                    GET A(START OF SCAN)
         LR    R14,R3                       GET REMAINING SCAN LENGTH
         SLL   R14,24                       CONBINE LENGTH AND ADDR
         OR    R1,R14                        FOR SCAN ROUTINE
*                                           R1=LLAAAAAA
*                                           L=LENGTH OF SCAN
*                                           A=A(START OF FIELD TO SCAN)
         BAL   R14,TRTSUBR                  DO TRT FOR <
         B     0(,R7)                       RETURN IF NO "HIT"
* RETURN HERE IF < FOUND!!!!!
RTN0C38C EQU   *
         LA    R14,72                       FIELD LENGTH MAX.= 71
         CLR   R0,R14                       FIELD LENGTH OK?
         BNL   0(,R7)                       NO--ERROR RETURN = +0
         LTR   R5,R0                        YES--FIELD LENGTH OK?
         BNP   RTN0C3AA                     NO--END SCAN
         STC   R5,0(,R4)                    SAVE STRING LENGTH IN T.E.
         BCTR  R5,0                         GET LENGTH FOR EX MVC
         EX    R5,SAVSTRNG                  MOVE STRING TO TABLE ENTRY
         LA    R9,1(R9,R5)                  ADDR. FOR NEXT STRING IN TE
RTN0C3AA EQU   *
         LA    R2,1(,R1)                    GET SCAN CONTINUE ADDRESS
         LR    R3,R15                       GET REMIAINING SCAN LENGTH
         LA    R4,1(,R4)                    NEXT STRING LENGTH IN T.E.
         B     4(,R7)                       END OF SCAN--SCAN OK RETURN
         SPACE 2
SAVSTRNG MVC   0(1,R9),0(R2)                ** MOVES STRING TO TABLE **
         TITLE 'TIOT SCAN FOR @DDNAMES AND DATASET VALIDATION'
*
*  BEGIN PROCESSING AFTER ALL PARMS HAVE BEEN READ, VALIDATED AND
*  STORED IN TABLES.
*
RTN0C3BE EQU   *
         LA    R1,DAT0A004            GET A(END OF SYSIN PARMS MSG)
         BAL   R14,SUB0CC66           DISPLAY OR PRINT IT
         L     R1,16                  A(CVT)
         L     R1,0(,R1)              A(NEW/OLD TCB)
         L     R1,4(,R1)              A(OUR TCB)
         L     R1,12(,R1)             A(TIOT)
         LA    R1,24(,R1)             A(1ST DD ENTRY IN TIOT)
         ST    R1,DST0B0C4            SAVE DD ENTRY ADDR
         TM    FLAGS,X'80'            UPDATE MODE?
         BO    RTN0C3EC               YES--LEAVE OPEN OUTPUT
         MVC   DAT0CD58(4),DAT0CD5C   CHANGE TO OPEN INPUT
*
* PROCESS A (OR NEXT) @XXX DD ENTRY
*
RTN0C3EC EQU   *
         NI    FLAGS,X'80'            LEAVE ONLY UPDATE FLAG (IF ON)
         SLR   R15,R15
         L     R14,DST0B0C4           GET A(1ST/NEXT DD ENTRY)
RTN0C3F6 EQU   *
         ICM   R15,1,0(R14)           GET L'DD ENTRY
         BZ    RTN0C936               BRANCH IF END OF TIOT
         CLI   4(R14),C'@'            DD ENTRY FOR PDS TO BE UPDATED?
         BE    RTN0C40C               YES--PROCESS IT IF IT IS OK
         AR    R14,R15                NO--NEXT DD ENTRY
         B     RTN0C3F6               CONTINUE TIOT SCAN
         SPACE 2
RTN0C40C EQU   *
         AR    R15,R14                POINT TO NEXT DD ENTRY IN TIOT
         ST    R15,DST0B0C4           SAVE A(ENTRY)
         ZAP   PACKED60(2),DAT0CD78(2)
         LR    R3,R14
         ICM   R1,7,17(R14)           GET A(UCB)
         BZ    RTN0C4BC               BRANCH IF NOT ALLOCATED
         CLI   18(R1),X'20'           DASD?
         BNE   RTN0C4BC               NO--ERROR
         MVC   PDSDATA+40(8),4(R14)   YES--DDNAME TO
         MVC   PDSDIR+40(8),4(R14)       DCB'S
         LA    R1,DAT0CD58
*   SVC -- RDJFCB FOR PDS
         SVC   64
         MVC   DST0B27A(7),DAT0A1E4
         MVC   DST0B281(40),DST0B790  SAVE DSNAME
         MVC   DST0B26F(4),DAT0A1DC
         MVC   DST0B273(6),DST0B806   SAVE VOLSER
         MVC   DST0B844(44),DST0B790  SAVE DSNAME
         MVI   DST0B7C4,X'08'         FLAG JFCB NOT TO BE REWRITTEN
         OI    DST0B7DC,X'80'
         LA    R1,DST0B0D0
*   SVC -- OBTAIN FORMAT 1 DSCB FOR PDS
         SVC   27
         LTR   R15,R15
         BNZ   RTN0C4BC
         TM    DST0B898,X'C0'         RECFM SPECIFIED?
         BNM   RTN0C4BC               NO--ERROR
         TM    DST0B898,X'80'         RECFM = F?
         BNO   RTN0C4BC               NO--ERROR
         LA    R15,80
         CH    R15,DST0B89C           LRECL=80?
         BNE   RTN0C4BC               NO--ERROR
         TM    DST0B896,X'02'         DSORG=PO?
         BNO   RTN0C4BC               NO--ERROR
         MVI   DST0B158,X'00'
         MVC   MEMNAME,DST0B7BC
         MVC   DST0B2C6(8),DST0B7BC
         TM    DST0B7E6,X'01'         MEMBER OF PDS SPECIFIED IN JCL?
         BZ    PROCDIR                NO--CONTINUE
         OI    FLAGS,MEMBONLY         YES--SCAN ONLY 1 MEMBER
         MVC   DST0B7BC(8),DST0B1BB   SAVE THE MEMBER NAME
         NI    DST0B7E6,X'FE'         CHANGE JFCB FOR WHOLE DATASET
         B     PROCDIR
         SPACE 2
RTN0C4BC EQU   *
         OI    DAT0CD82,X'01'
         MVC   DAT0A040(8),4(R3)
         LA    R1,DAT0A030
         BAL   R14,SUB0CC66
         B     RTN0C3EC
         TITLE 'PROCESS THE PDS DIRECTORY'
         DC    C'PROCPDS '
*   SVC -- OPENJ PDSDATA,XX,MF=(E,DAT0CD58) XX=UPDAT/INPUT (SEE PARM)
PROCDIR  LA    R1,DAT0CD58        GET OPEN LIST (UPDAT/INPUT MODE)
         SVC   22                 DO OPENJ
         BAL   R1,SUB0C4E8
         DC    X'80'                               C'.'
         DC    AL3(PDSDIR)
SUB0C4E8 EQU   *
*   SVC -- OPENJ PDSDIR,INPUT
         SVC   22
         LA    R1,PDSDATA
         LA    R0,DAT0C01C              COMMENT WAS $$$$$IBM
         LCR   R1,R1
*   SVC -- FIND MEMBER OF PDS (NOP'D--WAS IBM CK FOR MEMBER $$$$$IBM)
         SVC   18
         LTR   R15,R15
*        BZ    RTN0C508                 NOP'D--SEE COMMENT ABOVE
         B     RTN0C508                 DISREGARD THE RETURN CODE
         LA    R1,DAT0A164
         BAL   R14,SUB0CC66
         B     RTN0C5B6
         SPACE 2
RTN0C508 EQU   *
         LA    R6,DIRRECAD              GET BUFFER ADDRESS FOR DIR.
*        READ  DIRDECB,SF,*,(6),'S'     READ A DIRECTORY RECORD
         LA    R1,DIRDECB               GET A(DECB FOR READING DIR.)
         MVI   5(R1),X'80'              SET FOR 'S' LENGTH ON READ
         ST    R6,12(,R1)               INIT BUFFER ADDRESS IN DECB
         L     R15,8(,R1)               GET A(DCB)
         L     R15,48(,R15)             GET A(BSAM ACCESS METHOD)
         BALR  R14,R15                  READ DIRECTORY
*        CHECK DIRDECB                  CHECK DIRECTORY READ
         LA    R1,DIRDECB               GET A(DIR. DECB)
         L     R14,8(,R1)               GET A(DIR. DCB)
         L     R15,52(,R14)             GET A(CHECK ROUTINE)
         BALR  R14,R15                  CHECK I/O
         LA    R1,2
         STH   R1,DEOFFSET              INIT. MIN. DIR. BYTES USED
RTN0C538 EQU   *
         LH    R4,DEOFFSET
         CH    R4,DIRRECAD              ANY MEMBERS IN THIS DIR. ENTRY?
         BNL   RTN0C508                 NO--SKIP DIRECTORY ENTRY
         LA    R5,DST4B690(R4)          POINT TO MEMBER NAME
         CLI   0(R5),X'FF'              EOF ON DIRECTORY?
         BE    RTN0C5B6                 YES--CLOSE DIR AND DATA DCB'S
         IC    R1,11(,R5)               GET # HALFWORDS IN THIS ENTRY
         LA    R0,31                    GET MASK FOR ANDING
         NR    R1,R0                    REMOVE EXTRANEOUS BITS
         AR    R1,R1                    GET # BYTES (2 * #HALFWORDS)
         LA    R1,12(R1,R4)             GET OFFSET TO NEXT DIR. ENTRY
         STH   R1,DEOFFSET              SAVE OFFSET
         OI    DST0B158,X'01'
         TM    FLAGS,MEMBONLY           SINGLE MEMBER SCAN?
         BZ    RTN0C582                 NO--CONTINUE
         CLC   0(8,R5),MEMNAME          IS THIS THE MEMBER SPECIFIED?
         BL    RTN0C538                 NO--CONTINUE DIR. SCAN
         BE    RTN0C58A                 YES--PROCESS IT
         B     RTN0C5B6                 NOT FOUND--CLOSE DCB'S
         SPACE 2
*
*  BEGIN PROCESSING OF MEMBERS FROM DIRECTORY--SKIP ALIAS MEMBERS, THO!
*
RTN0C582 EQU   *
         TM    11(R5),X'80'             ALIAS?
         BO    RTN0C538                 YES--SKIP IT
RTN0C58A EQU   *
         MVI   CC,X'F0'                 SET FOR DOUBLE SPACING
         MVC   MEMNAME,0(R5)            INIT. MEMBERNAME FOR POINT
         MVC   TTR(3),8(R5)             SAVE TTR OF MEMBER
         LA    R1,PDSDATA
         LA    R0,TTR
         L     R15,84(,R1)              A(POINT ROUTINE)
         BAL   R14,4(R15)               DO POINT
         BAL   R14,PROCDATA             GO PROCESS THIS MEMBER
         TM    FLAGS,X'10'
         BZ    RTN0C538
RTN0C5B6 CLOSE (PDSDIR,,PDSDATA)        CLOSE PDS DIRECTORY AND DATA
         TM    FLAGS,X'40'
         BO    RTN0C3EC                 GET NEXT DD ENTRY
         MVC   DAT0A128(8),DAT0A2D8     SAVE DDNAME JUST PROCESSED
         LA    R1,DAT0A118
         BAL   R14,SUB0CC66
         OI    DAT0CD82,X'01'
         B     RTN0C3EC
         TITLE 'PROCESS THE MEMBER OF THE PDS--READ AND SCAN'
         DC    C'PROCDATA'
PROCDATA EQU   *
         STM   R14,R12,12(R13)
         LA    R14,NEWSAVE
         ST    R13,4(,R14)
         ST    R14,8(,R13)
         LR    R13,R14
RTN0C5FE EQU   *
NEXTBLOK L     R9,BUFADMEM              GET A(MEMBER BUFFER)
         LA    R7,MEMBDECB              GET A(DECB FOR MEMBER)
         TM    FLAGS,X'20'              WAS PREVIOUS RECORD CHANGED?
         BZ    RTN0C636                 NO--SKIP WRITE
         NI    FLAGS,X'DF'              YES--TURN OFF WRITE FLAG
         TM    FLAGS,X'80'              UPDATE MODE PROCESSING?
         BZ    RTN0C636                 NO--SKIP WRITE
*        WRITE (7),SF,*,*,'S'           REWRITE RECORD "IN-PLACE"
         LR    R1,R7                    GET A(DECB)
         MVI   5(R1),X'20'              SET DECB FOR WRITE SF
         L     R15,8(,R1)               GET A(DCB)
         L     R15,48(,R15)             GET A(WRITE ROUTINE)
         BALR  R14,R15                  DO WRITE
         LR    R1,R7                    GET A(DECB)
         L     R14,8(,R1)               GET A(DCB)
         L     R15,52(,R14)             GET A(CHECK ROUTINE)
         BALR  R14,R15                  DO CHECK
RTN0C636 EQU   *
*        READ  (7),SF,PDSDATA,(9),'S'   DO SEQ. BSAM READ
         LR    R1,R7                    GET A(DECB)
         MVI   5(R1),X'80'              SET DECB FOR READ SF
         LA    R14,PDSDATA              GET A(DCB)
         ST    R14,8(,R1)               INIT. DCB ADDR IN DECB
         ST    R9,12(,R1)               INIT. BUFFER ADDR IN DECB
         MVI   4(R1),X'80'              INIT. READ LENGTH TO 'S'
         L     R15,8(,R1)               GET A(DCB)
         L     R15,48(,R15)             GET A(BSAM READ LOGIC)
         BALR  R14,R15                  DO READ
*        CHECK (7)                      CHECK THE READ
         LR    R1,R7                    GET A(DECB)
         L     R14,8(,R1)               GET A(DCB)
         L     R15,52(,R14)             GET A(CHECK LOGIC)
         BALR  R14,R15                  DO CHECK
         LH    R5,PDSDATA+DCBBLKSI-IHADCB GET BLKSIZE FROM DCB
         L     R4,16(,R7)               GET A(IOB) FROM DECB
         SH    R5,14(,R4)               SUBTRACT RESIDUAL COUNT
         ST    R5,ACTBLKSZ              SAVE ACTUAL BLKSIZE READ
         XC    RECOFSET(4),RECOFSET     INITIAL RECORD OFFSET
RTN0C678 EQU   *
GETREC   L     R6,RECOFSET              GET OFFSET TO NEXT RECORD
         C     R6,ACTBLKSZ              ANOTHER RECORD IN THIS BLOCK?
         BNL   NEXTBLOK                 NO--READ NEXT BLOCK
* LRECL=80 ASSUMED IN NEXT INSTRUCTION
         LA    R5,80(,R6)               GET OFFSET TO NEXT RECORD
         ST    R5,RECOFSET              SAVE FOR NEXT PASS
         A     R6,BUFADMEM              GET A(CURRENT RECORD)
         ST    R6,CURRECAD              SAVE IT
         MVI   CURRECAD,X'50'           RECORD LENGTH = 80
* TRT ASSUMES SCAN LENGTH = 71
         TRT   0(71,R6),TRTAB2          SCAN FOR 1ST CHAR. OF STRING
         BZ    GETREC                   BRANCH IF NO HIT DURING TRT
         MVC   DST0B169(71),0(R6)       SAVE BEFORE IMAGE (DATA)
         MVC   DST0B1B2(9),71(R6)        AND CONTINUATION PLUS SEQ #
         MVI   DST0B15A,X'00'
         TM    FLAGS,X'02'              ON IF .RU. (RESUME UPD) FOUND
         BO    RTN0C6EE                 BRANCH IF UPDATES ALLOWED
         TM    FLAGS,X'01'              .NU. (NO UPDATE) IN EFFECT?
         BO    RTN0C6D6                 YES--SCAN FOR .RU. (RESUME UPD)
*
* SCAN FOR .NU. (NO UPDATE) STRING IN RECORD
*
         L     R0,DAT0CD70              R0=NNAAAAAA
*                                        N = # HIT CHARS. FOR TRT
*                                        A = A(STRING OF HIT CHARS)
         L     R1,DST0B06C              R1=LLAAAAAA
*                                        L = LENGTH FOR TRT SCAN
*                                        A = A(START OF FIELD TO SCAN)
         BAL   R14,TRTSUBR              DO TRT SCAN
         B     RTN0C6EE                 .NU. NOT FOUND -- DO UPDATES
         SPACE 2
RTN0C6D2 EQU   *
         OI    FLAGS,X'01'              SHOW .NU. NO UPDATES IN EFFECT
*
* SCAN FOR .RU. (RESUME UPDATE) STRING IN RECORD
*
RTN0C6D6 EQU   *
         L     R0,DAT0CD74              R0=NNAAAAAA
*                                        N=# HIT CHAR FOR TRT
*                                        A=A(STRING OF HIT CHAR)
         L     R1,DST0B06C              R1=LLAAAAAA
*                                        L=LENGTH OF SCAN
*                                        A=A(START OF FIELD TO SCAN)
         BAL   R14,TRTSUBR              DO TRT
         B     GETREC                   .RU. NOT FOUND--SKIP RECORD
         SPACE 2
RTN0C6E6 EQU   *
         NI    FLAGS,X'FE'              .RU. FOUND--.NU. FLAG OFF
         B     GETREC                   GET NEXT RECORD
         SPACE 2
*
* NO .NU. OR .RU. FOUND -- UPDATES ALLOWED AT THIS POINT
*
RTN0C6EE EQU   *
         LA    R9,BUFADTAB              GET A(CNTL. REC. TABLE)
RTN0C6F2 EQU   *
         ICM   R9,15,0(R9)              GET 1ST/NEXT CNTL. REC. T.E.
         BZ    RTN0C8A0                 BRANCH IF DONE
         MVC   DST0B060,DST0B06C
         XC    DST0B064,DST0B064        ZERO NEXT FULLWORD
RTN0C706 EQU   *
         L     R1,DST0B064
         LA    R0,8
         CR    R1,R0                    IS THERE AN S1 STRING?
         BH    RTN0C6F2                 NO--NEXT BUFFER
*
*  CNTL. REC. TABLE -- ENTRIES FORMATTED AS FOLLOWS:
*     R9===> A(NEXT ENTRY OR 0)
*            4AL1(L'S1,L'S2,L'S3,FLAGS)--LENGTH=0 MEANS NO STRING
*                                        FOLLOWS
*            CL?'S1',CL?'S2',CL?'S3' <== MAY BE NO EXISTENT!!!
*
         LA    R4,8(,R9)                GET A(STRING TO SCAN FOR)
         SLR   R5,R5                    CLEAR FOR IC
         IC    R5,4(,R9)                GET LENGTH OF STRING # 1
         LA    R0,0(,R4)                GET A(S1)
         LR    R14,R5                   GET LENGTH OF S1 STRING ...
         SLL   R14,24                     SHIFT LENGTH TO HIGH ORDER
         OR    R0,R14                   R0=NNAAAAAA
*                                        N = # HIT CHARS FOR TRT
*                                        A = A(STRING OF HIT CHARS)
         L     R1,DST0B060              R1=LLAAAAAA
*                                        L = LENGTH OF FIELD TO SCAN
*                                        A = A(START OF FIELD TO SCAN)
         BAL   R14,TRTSUBR              TRT SCAN FOR S1
         B     RTN0C6F2                 NOT FOUND--NEXT CNTL. REC. T.E.
         SPACE 2
*  S1 STRING FOUND
RTN0C736 LR    R8,R1                    SAVE "HIT" ADDRESS FOR S1
         LA    R14,1(,R1)               GET CONTINUATION ADDRESS
         ST    R14,DST0B060             SAVE FOR LATER
         STC   R15,DST0B060             SAVE REMAINING SCAN BYTES
*
* I DON'T KNOW WHAT THIS IS THAT FOLLOWS!!  IT APPEARS TO BE SOME KIND
* OF SPECIAL STRING SCAN BUT IT SCREWS UP THE NORMAL FUNCTIONS SO WILL
* BE BYPASSED (FOR NOW ANYWAY!).
*
         B     RTN0C780                 IGNORE THIS ROUTINE!!!!
         BCTR  R1,0                     BACK UP 1 BYTE
         TM    7(R9),X'80'              S2 STRING?
         BZ    RTN0C76C                 NO
         TRT   0(1,R1),TRTAB            PRECEEDED BY NON-SPEC. CHAR?
         BZ    RTN0C76C                 NO--CONTINUE
         CLI   0(R1),X'E5'              PRECEEDED BY V?
         BNE   RTN0C706                 NO--SKIP--CANNOT BE MATCH
         LR    R14,R1                   PREPARE TO BACKUP AGAIN
         BCTR  R14,0                    BACKUP 1 MORE BYTE
         CLI   0(R14),X'4B'             PRECEEDED BY '.V'????
         BNE   RTN0C706                 NO--SKIP--CANNOT BE MATCH
RTN0C76C EQU   *
         TM    7(R9),X'40'              S3 STRING?
         BZ    RTN0C780                 NO
         AR    R1,R5                    POINT TO END OF S1 + 1
         TRT   1(1,R1),TRTAB            FOLLOWED BY SPECIAL CHARACTER?
         BNZ   RTN0C706                 NO--SKIP--CANNOT BE MATCH
         SPACE 4
RTN0C780 EQU   *
         CLI   6(R9),X'00'              S3 SPECIFIED?
         BE    RTN0C7AC                 NO--START UPDATE CHAECKING
         AR    R4,R5                    YES--POINT TO S2
         IC    R5,5(,R9)                GET L'S2
         AR    R4,R5                    POINT PAST S2 TO S3
         IC    R5,6(,R9)                GET L'S3
         LA    R0,0(,R4)                R0 = AL1(0),AL3(S3)
         LR    R14,R5                   COPY L'S3 ...
         SLL   R14,24                    AND SHIFT IT TO LOW ORDER BYTE
         OR    R0,R14                   R0=NNAAAAAA
*                                        N = # HIT CHARS FOR TRT=L'S3
*                                        A = A(STRING OF HIT CHARS=S3)
         L     R1,CURRECAD              R1=LLAAAAAA
*                                        L = LENGTH OF MEMBER RECORD
*                                        A = A(START OF MEMBER RECORD)
         BAL   R14,TRTSUBR              DOES S3 EXIST?
         B     RTN0C706                 NO--CANNOT BE MATCH--SKIP
         SPACE 2
RTN0C7AC EQU   *
         TM    7(R9),X'01'              UPDATE REQUIRED (S1=S2)?
         BO    RTN0C7BC                 NOT REALLY IF S1=S2
         OI    DST0B15A,X'80'           YES--FLAG REAL UPDATE REQ'D
         B     RTN0C7C0                 CONTINUE
         SPACE 2
RTN0C7BC EQU   *
         OI    DST0B15A,X'20'           MATCH BUT NO UPDATE REQ'D
RTN0C7C0 EQU   *
         SLR   R3,R3                    CLEAR FOR IC
         IC    R3,4(,R9)                GET LENGTH OF S1
         LA    R5,0(R8,R3)              POINT PAST S1
         LA    R6,DST0B1B0              POINT TO END OF RECORD
         SR    R6,R5                    ROOM TO INSERT S2?
         BM    RTN0C920                 NO--CANNOT DO UPDATE
         SLR   R4,R4                    CLEAR FOR IC
         IC    R4,5(,R9)                GET L'S2
         SR    R3,R4                    WILL S2 FIT?
         BZ    RTN0C862                 YES--CONTINUE
         BP    RTN0C82C                 MAYBE--ONLY IF THERE ARE BLANKS
         LPR   R3,R3                    MAYBE--ONLY IF THERE ARE BLANKS
*
* NEED TO SHIFT LEFT AFTER UPDATE--CHECK FOR TRAILING BLANKS
*
         LA    R7,1(,R6)                GET # BYTES LEFT IN RECORD
RTN0C7EA EQU   *
         L     R0,DAT0CD68              R0=NNAAAAAA
*                                        N = # HIT CHARS FOR TRT=2
*                                        A = A(STRING OF HIT CHARS=  )
         LA    R1,0(,R5)                A(1ST BYTE BEYOND S1 IN RECORD)
         LR    R14,R7                   GET # REMAINING BYTES IN RECORD
         SLL   R14,24                   SHIFT LENGTH TO HIGH ORDER BYTE
         OR    R1,R14                   R1=LLAAAAAA
*                                        L = LENGTH OF FIELD TO SCAN
*                                        A = A(START OF FIELD TO SCAN)
         BAL   R14,TRTSUBR              SCAN FOR CONTIGUOUS BLANKS
         B     RTN0C920                 NONE FOUND--CANNOT UPDATE
         SPACE 2
RTN0C802 EQU   *
         LTR   R2,R0                    BLANKS AT END?
         BNP   RTN0C812                 NO--CONTINUE
         BCTR  R2,0
         EX    R2,EXC0C820              SAVE TRAILING CHARACTERS
         EX    R2,EXC0C826              INSERT BLANKS
RTN0C812 EQU   *
         LA    R5,1(,R5)                NEXT BYTE TO SHIFT
         BCTR  R7,0                     REMAINING BYTES IN RECORD
         BCT   R3,RTN0C7EA              BRANCH IF MORE TO SHIFT
         B     RTN0C862                 ALL DONE
         SPACE 2
EXC0C820 EQU   *
         MVC   DST0B203(1),0(R5)        SAVE TRAILING DATA
EXC0C826 EQU   *
         MVC   1(1,R5),DST0B203         OVERLAY 1 BLANK
         SPACE 2
*
* S1 LONGER THAN S2--CAN DROP ANY TRAILING BLANKS ON 1-1 BASIS
*
RTN0C82C EQU   *
         LA    R7,2(,R6)
         L     R0,DAT0CD68              R0=NNAAAAAA
*                                        N = # HIT CHARS FOR TRT=2
*                                        A = A(STRING OF HIT CHARS=  )
         LA    R1,0(,R5)
         LR    R14,R7
         SLL   R14,24
         OR    R1,R14                   R1=LLAAAAAA
*                                        L = LENGTH OF FIELD TO SCAN
*                                        A = A(START OF FIELD TO SCAN)
         BAL   R14,TRTSUBR              AT LEAST 2 TRAILING BLANKS?
         B     RTN0C920                 NO--CANNOT DO UPDATE!!
         SPACE 2
RTN0C848 EQU   *
         LR    R6,R5                    GET L'S2
         SR    R5,R3                    # BYTES TO DROP
         LTR   R2,R0                    REMAINING BYTES IN RECORD
         LA    R7,0(R5,R2)              POINT PAST WHERE S2 WILL GO
         BNP   RTN0C85C
         BCTR  R2,0
         EX    R2,EXC0C88E
RTN0C85C EQU   *
         BCTR  R3,0
         EX    R3,EXC0C89A
RTN0C862 EQU   *
         CLC   DST0B1B0(2),DST0B1BB     TWO TRAILING BLANKS?
         MVC   DST0B1B0(2),DST0B1BB     ... INSERT 2 TRAILING BLANKS
         BNE   RTN0C920                 NO--CANNOT DO UPDATE
         SLR   R3,R3                    CLEAR FOR IC
         IC    R3,4(,R9)                GET L'S1
         LA    R4,8(R3,R9)              POINT PAST S1 TO S2
         ICM   R3,1,5(R9)               GET L'S2
         BZ    RTN0C706                 NO S2--SKIP UPDATE
         BCTR  R3,0                     DECRMENT FOR EXECUTE
         EX    R3,EXC0C894              INSERT S2 OVER S1
         B     RTN0C706                 DO NEXT CNTL REC.
         SPACE 2
RTN0C88E EQU   *
EXC0C88E EQU   *
         MVC   0(1,R5),0(R6)
EXC0C894 EQU   *
         MVC   0(1,R8),0(R4)
EXC0C89A EQU   *
         MVC   0(1,R7),DST0B1BB
RTN0C8A0 EQU   *
         TM    DST0B15A,X'A0'                RECORD CHANGED/NEED WRITE?
         BZ    GETREC                        NO--SKIP PRINT--NEXT REC.
         MVC   DST0B2C6(8),MEMNAME           YES--GET MEMBER NAME
         L     R1,CURRECAD                   POINT TO THE BEFORE IMAGE
         MVC   DST0B2DE(80),0(R1)            BEFORE IMAGE TO PRINT
         TM    DST0B15A,X'40'                UPDATE ERROR?
         BO    RTN0C908                      YES--ISSUE ERROR MSG
         MVC   DST0B2CF(8),DAT0CDA7          NO--INIT. REPLACED MSG
         TM    DST0B15A,X'80'                RECORD CHANGED?
         BO    RTN0C8E0                      YES--PRINT BEFORE/AFTER
         MVC   DST0B2CF(12),DAT0CDBA         NO--INIT. LINE FOUND MSG
         BAL   R14,PRINTIT                   PRINT RECORD--NO CHANGE
         OI    FLAGS,X'40'                   SHOW RECORD PRINTED???
         B     GETREC                        GET NEXT RECORD
         SPACE 2
RTN0C8E0 EQU   *
         BAL   R14,PRINTIT                   PRINT BEFORE IMAGE
         MVC   DST0B2DE(71),DST0B169          AND
         MVC   DST0B325(9),DST0B1B2            SET
         MVC   0(80,R1),DST0B2DE                UP AFTER IMAGE
         MVC   DST0B2CF(11),DAT0CDAF         INIT. REPLACEMENT MSG
         BAL   R14,PRINTIT                   PRINT AFTER IMAGE
         OI    FLAGS,X'60'                   RECORD PRINTED/DO REWRITE
         B     GETREC                        GET NEXT RECORD
         SPACE 2
RTN0C908 EQU   *
         MVC   DST0B2CF(14),DAT0CDC6         UPDATE ERROR MESSAGE INIT
         MVC   DST0B332(4),DAT0A1E0           **** TO HIGHLIGHT
         BAL   R14,PRINTIT                   PRINT ERROR RECORD
         OI    DAT0CD82,X'02'
         B     GETREC
         SPACE 2
RTN0C920 EQU   *
         OI    DST0B15A,X'40'                TURN ON UPDATE FAILED FLAG
         B     RTN0C8A0                      CHECK FOR "HIT" PRINTOUT
         SPACE 2
RTN0C928 EQU   *
MEMBEOF  NI    FLAGS,X'FE'                   TURN OFF S1=S2 FLAG
         L     R13,4(,R13)                   RESTORE SAVE ADDR.
         LM    R14,R12,12(R13)               RESTORE REGS ...
         BR    R14                            AND EXIT
         EJECT
RTN0C936 EQU   *
         TR    DAT0CD82(1),DAT0CD83          CONVERT FLAGS TO RC
         SLR   R8,R8                         ZERO FOR IC
         IC    R8,DAT0CD82                   GET RC IN HEX
         CVD   R8,DWORK                      CONVERT TO PACKED
         UNPK  DAT0A160(2),DST0B04E(2)       CONVERT TO EBCDIC
         OI    DAT0A161,X'F0'                 INCLUDING LAST DIGIT
         LA    R1,DAT0A140                   GET END OF JOB MESSAGE
         BAL   R14,SUB0CC66                  ISSUE END OF JOB MSG
         TM    SYSPRINT+48,X'10'             SYSPRINT OPEN?
         BZ    RTN0C96A                      NO--SKIP CLOSE
         CLOSE (SYSPRINT)                    YES--CLOSE IT
RTN0C96A EQU   *
         LR    R1,R11                        GET WORK AREA ADDRESS
         L     R13,4(,R13)                   RESTORE PREVIOUS SAVE ADDR
         L     R0,WORKSIZE                   GET L'WORK AREA OBTAINED
         LA    R1,0(,R1)                     GET A(WORK AREA)
*   SVC -- G/FMAINR
         SVC   10                            DO FREEMAIN
         LR    R15,R8                        GET RC
         RETURN (14,12),RC=(15)              RESTORE REGS, EXIT WITH RC
         EJECT
SUB0C986 EQU   *
READPARM EQU   *
         STM   R14,R12,DST0B0F8
RTN0C98A EQU   *
         MVI   CC,X'F0'                     CC SET FOR DOUBLE SPACING
         L     R2,BUFADMEM                  GET BUFFER ADDRESS FOR READ
         B     RTN0C99A                     START READ
         SPACE 2
SUB0C996 EQU   *
READCONT EQU   *
         STM   R14,R12,DST0B0F8
RTN0C99A EQU   *
         TM    FLAGS2,X'10'                 MODE = INSTALL/CONSOLE?
         BO    RTN0C9C2                     YES--BRANCH
         TM    FLAGS2,X'40'                 MODE = CONSOLE (SYSIN ERR)?
         BO    RTN0CAE8                     YES--DO WTOR
         GET   SYSIN,DST0B2DE               READ A RECORD FROM SYSIN
         MVC   DST0B2CF(5),DAT0CD94         SHOW SYSIN WAS USED
         B     RTN0CB1C                     DO READ FOLLOW-UP
         SPACE 2
RTN0C9C2 EQU   *
         MVC   DST0B2CF(7),DAT0CDA0          SHOW INSTALL
         CLI   DST0B38D,X'FF'
         BNE   RTN0C9DE
         MVC   DST0B2DE(80),DST0B33D
         MVI   DST0B38D,X'00'
         B     RTN0CB1C
         SPACE 2
RTN0C9DE EQU   *
         SLR   R15,R15
         L     R4,DST0B0C4
RTN0C9E4 EQU   *
         ICM   R15,1,0(R4)
         BZ    RTN0CABE
         CLI   4(R4),X'E9'
         BE    RTN0C9FA
         AR    R4,R15
         B     RTN0C9E4
         SPACE 2
RTN0C9FA EQU   *
         AR    R15,R4
         ST    R15,DST0B0C4
         CLI   11(R4),X'40'
         BNE   RTN0CAC4
         CLI   5(R4),X'40'
         BE    RTN0CAC4
         LR    R3,R4
         ICM   R9,7,17(R4)
         BZ    RTN0CAC4
         CLI   18(R9),X'20'                  DASD DEVICE?
         BNE   RTN0CAC4                      NO--ERROR
         LA    R6,DAT0CED1                   YES--GET A(DEV. TYPE TAB)
RTN0CA26 EQU   *
         CLI   0(R6),X'00'                   NULL TABLE ENTRY?
         BE    RTN0CA40                      YES--SKIP IT
         CLC   0(1,R6),19(R9)                  SUPPORTED DISK TYPE?
         BE    RTN0CA48                      YES--OK TO PROCESS
RTN0CA40 EQU   *
         LA    R6,9(,R6)                     NO--NEXT TABLE ENTRY
         CLI   0(R6),X'FF'                   END OF TABLE?
         BE    RTN0CAC4                      YES--DEVICE NOT FOUND
         B     RTN0CA26                      NO--CONTINUE SCAN
         SPACE 2
RTN0CA48 EQU   *
         MVI   DST0B2DE,X'40'
         MVC   DST0B2DF(79),DST0B2DE
         MVC   DST0B2DE(6),5(R4)
         LA    R7,DST0B2DF
         BAL   R14,SUB0CADA
         MVI   0(R7),X'4C'
         MVC   1(6,R7),28(R9)
         LA    R7,2(,R7)
         BAL   R14,SUB0CADA
         MVI   0(R7),X'4C'
         MVI   DST0B33D,X'40'
         MVC   DST0B33E(79),DST0B33D
         MVC   DST0B33D(8),DAT0A1D0
         LA    R7,DST0B33E
         BAL   R14,SUB0CADA
         MVI   0(R7),X'4C'
         MVC   1(8,R7),1(R6)
         LA    R7,2(,R7)
         BAL   R14,SUB0CADA
         MVI   0(R7),X'4C'
         MVC   1(6,R7),5(R4)
         LA    R7,2(,R7)
         BAL   R14,SUB0CADA
         MVI   0(R7),X'4C'
         MVI   DST0B38D,X'FF'
         B     RTN0CB1C
         SPACE 2
RTN0CABE EQU   *
         SLR   R15,R15
         B     EOFSYSIN
         SPACE 2
RTN0CAC4 EQU   *
         MVC   DAT0A1A2(8),4(R4)
         LA    R1,DAT0A194
         BAL   R14,SUB0CC66
         OI    DAT0CD82,X'08'
         B     RTN0C936
         SPACE 2
RTN0CADA EQU   *
SUB0CADA EQU   *
         CLI   0(R7),X'40'
         BER   R14
         LA    R7,1(,R7)
         B     RTN0CADA
         SPACE 2
RTN0CAE8 EQU   *
         XC    DST0B0F4(4),DST0B0F4
         LA    R1,DAT0CF9C
         IC    R14,0(,R1)
         LA    R15,DST0B2DE
         ST    R15,0(,R1)
         STC   R14,0(,R1)
         LA    R14,DST0B0F4
         ST    R14,4(,R1)
*   SVC -- WTO/WTOR
         SVC   35
         LA    R1,DST0B0F4
         LA    R0,1
*   SVC -- WAIT
         SVC   1
         MVC   DST0B2CF(7),DAT0CD99
RTN0CB1C EQU   *
         OC    DST0B2DE(72),DST0B1BB       LOWER CASE TO UPPER CASE
         MVC   0(72,R2),DST0B2DE          MOVE RECORD TO WORK BUFFER
         MVC   72(8,R2),DST0B1BB          BLANK LAST 8 CHARACTERS
         ST    R2,DST0B108                 SAVE BUFFER ADDRESS
         BAL   R14,PRINTIT                 PRINT RECORD JUST READ
         CLC   EOF1,0(R2)                  END OF PARM (END )?
         BE    EOFSYSIN                    YES--FORCED EOF ON SYSIN
         CLC   EOF2,0(R2)                  END OF PARM (</*)?
         BE    EOFSYSIN                    YES--FORCE EOF ON SYSIN
         LM    R14,R12,DST0B0F8
         LA    R3,72
         BR    R14
         EJECT
*
* SUBROUTINE TO SCAN FIELDS/RECORDS VIA TRT
*
*   REGISTER CONTENTS ON ENTRY:
*     R0  = NNAAAAAA WHERE N = # "HIT" CHARS AND A = A(STRING OF CHARS)
*     R1  = LLAAAAAA WHERE L = FIELD/REC LENGTH AND A = A(SCAN START)
*   REGISTER CONTENTS ON EXIT:
*     R0  =
*
*
*
*
*
TRTSUBR  STM   R14,R12,12(R13)
         LR    R3,R1                       GET L'SOURCE IN HIGH ORDER
         LA    R4,0(,R1)                   GET A(SOURCE START)
         SRL   R3,24                       SHIFT LENGTH TO LOW ORDER
         LR    R15,R3                      COPY LENGTH
         LR    R5,R0                       GET # ARGUMENTS/ADDRESS
         LA    R6,0(,R5)                   GET A(HIT CHARS)
         SRL   R5,24                       SHIFT COUNT TO LOW ORDER
         LTR   R3,R3                       SOURCE FIELD EXHAUSTED?
         BNP   RTN0CBBC                    YES--EXIT
         LTR   R5,R5                       END OF TRT TABLE?
         BNP   RTN0CBBC                    YES--EXIT
         CR    R3,R5                       END OF SOURCE FIELD?
         BL    RTN0CBBC                    YES--EXIT
         SLR   R9,R9                       CLEAR FOR IC
         IC    R9,0(,R6)                   GET TABLE ARGUMENT (STOP CH)
         LA    R9,DST9B590(R9)             POINT TO POSITION IN TABLE
         MVI   0(R9),X'01'                 FORCE HIT ON ARGUMENT
         LA    R8,0(R3,R4)                 POINT TO END OF FIELD/REC
         SR    R8,R5                       CALC. L'SCAN
         BCTR  R5,0                        DECREMENT
         LR    R1,R4                       GET START OF SOURCE ...
         BCTR  R1,0                         - 1 IN CASE NO HIT
RTN0CB90 EQU   *
         BCTR  R3,0
         EX    R3,EXC0CBE0                 DO TRT
         BZ    RTN0CBB8                    BRANCH IF NO HIT
         LTR   R5,R5                       TRT TABLE EXHAUSTED?
         BZ    RTN0CBC2                    YES--SCAN DONE
         CLR   R1,R8                       ????????
         BH    RTN0CBB8                    ????????
         EX    R5,EXC0CBDA
         BE    RTN0CBC2
         LA    R3,0(R8,R5)
         SR    R3,R1
         BP    RTN0CB90
RTN0CBB8 EQU   *
         MVI   0(R9),X'00'                 RESET TRT TABLE POSITION
RTN0CBBC EQU   *
         LM    R14,R12,12(R13)
         BR    R14
         EJECT
RTN0CBC2 EQU   *
         MVI   0(R9),X'00'                 RESET TRT TABLE POSITION
         LR    R0,R1                       GET A(HIT)
         SR    R0,R4                       CALC. OFFSET TO HIT
         SR    R15,R0                      CALC. REMAINING
         BCTR  R15,0                        SOURCE BYTES
         L     R14,12(,R13)                GET RETURN ADDRESS
         LM    R2,R12,28(R13)              RESTORE OTHER REGISTERS
         B     4(,R14)                     RETURN + 4 IS EXIT
         SPACE 2
EXC0CBDA CLC   0(1,R6),0(R1)
         SPACE
EXC0CBE0 TRT   1(1,R1),DST0B590
         SPACE 2
PRINTIT  STM   R14,R1,PARMSAVE
         TM    SYSPRINT+48,X'10'            SYSPRINT OPEN?
         BZ    RTN0CC60                     NO
         AP    PACKED60(2),DAT0CD7C(1)      YES--COUNT THIS LINE
         CLI   CC,X'F0'                     DOUBLE SPACED?
         BNE   RTN0CC06                     NO
         AP    PACKED60(2),DAT0CD7C(1)      YES--ACCOUNT FOR EXTRA LINE
RTN0CC06 EQU   *
         CP    PACKED60(2),DAT0CD78(2)      PAGE FULL?
         BNH   RTN0CC48                     NO--CONTINUE
         AP    DAT0CD7A(2),DAT0CD7C(1)      YES--UPDATE PAGE COUNT
         MVC   DST0B2BF(4),DAT0CD7E
         ED    DST0B2BF(4),DAT0CD7A
         PUT   SYSPRINT,DST0B24B            PRINT HEADING
         PUT   SYSPRINT,DAT0CDDB            PRINT HEADING
         ZAP   PACKED60(2),DAT0CD7D(1)      RESET LINE COUNT
         MVI   CC,X'F0'
RTN0CC48 PUT   SYSPRINT,CC                  PRINT THE PARM RECORD
         MVI   CC,X'40'                     RESET SINGLE SPACING
         MVC   PRINTLIN,CC                   AND BLANK PRINT AREA
RTN0CC60 EQU   *
         LM    R14,R1,PARMSAVE
         BR    R14
         EJECT
SUB0CC66 EQU   *
         STM   R14,R3,DST0B140
         LH    R2,0(,R1)
         LA    R0,5
         SR    R2,R0
         BM    RTN0CCA8
         LR    R3,R1
         TM    FLAGS2,X'40'                 CONSOLE USED/SYSIN ERROR?
         BO    RTN0CC8A                     YES--DO WTOR
         TM    FLAGS2,X'20'                 SYSIN OPEN?
         BO    RTN0CC8C                     YES--DO GET FROM SYSIN
RTN0CC8A EQU   *
*   SVC -- WTO/WTOR
         SVC   35
RTN0CC8C EQU   *
         EX    R2,EXC0CCAE
         MVI   CC,X'F0'                     CC SET FOR DOUBLE SPACING
         MVC   DST0B2CF(7),DAT0CDD4
         MVC   DST0B332(4),DAT0A1E0
         BAL   R14,PRINTIT
         MVI   CC,X'F0'                     CC SET FOR DOUBLE SPACING
RTN0CCA8 EQU   *
         LM    R14,R3,DST0B140
         BR    R14
         SPACE 2
EXC0CCAE EQU   *
         MVC   DST0B2DE(1),4(R3)
         EJECT
RTN0CCB4 EQU   *
         LA    R2,121
         CH    R2,62(,R1)
         BNHR  R14
         STH   R2,62(,R1)
         BR    R14
         EJECT
RTN0CCC4 EQU   *
         LR    R7,R1
         LA    R15,0(,R15)
         CNOP  0,4
         O     R15,DAT0CCD4
         B     RTN0CCD8
         SPACE 2
DAT0CCD4 EQU   *
         DC    X'01000000'                         C'....'
RTN0CCD8 EQU   *
*   SVC -- SYNADAF
         SVC   68
         MVC   DAT0A075(60),68(R1)
         MVC   DAT0A0DE(8),75(R1)
         LA    R1,DAT0A060
         BAL   R14,SUB0CC66
         LA    R15,0(,R15)
         CNOP  0,4
         O     R15,DAT0CCFC
         B     RTN0CD00
         SPACE 2
DAT0CCFC EQU   *
         DC    X'FF000000'                         C'....'
RTN0CD00 EQU   *
*   SVC -- SYNADAF
         SVC   68
         OI    DAT0CD82,X'04'
         OI    FLAGS,X'10'
         LA    R1,DAT0A0B4
         BAL   R14,SUB0CC66
         L     R7,32(,R7)
         BR    R7
         EJECT
         DC    X'00000000000000000000000000000000' C'................'
         DC    X'0000000000000000'                 C'........'
EXC0CD30 EQU   *
         CLC   0(1,R14),0(R15)
         DC    X'0000'                             C'..'
WORKSIZE EQU   *
*        DC    X'00006380'                         C'....'
         DC    X'000098F8'                         C'....'
BUFADMEM EQU   *
         DC    X'00001900'                         C'....'
DIRDECB EQU    *
         DC    X'0000000000800100'                 C'........'
         DC    A(PDSDIR)
         DC    X'0000000000000000'                 C'........'
DCBXLIST DC    F'0'
DAT0CD58 EQU   *
         DC    X'84'
         DC    AL3(PDSDATA)
DAT0CD5C EQU   *
         DC    X'80'
         DC    AL3(PDSDATA)
DAT0CD60 EQU   *
         DC    X'85'
         DC    AL3(RTN0CCB4)
         DC    X'01'
         DC    AL3(DAT0CEAD)
DAT0CD68 EQU   *
         DC    X'02'
         DC    AL3(DAT0CEAE)
DAT0CD6C EQU   *
         DC    X'01'                               C'.'
         DC    AL3(DAT0CEB8)
DAT0CD70 EQU   *
         DC    X'04'                               C'.'
         DC    AL3(DAT0CEB0)
DAT0CD74 EQU   *
         DC    X'04'                               C'.'
         DC    AL3(DAT0CEB4)
DAT0CD78 EQU   *
         DC    X'060C'                             C'..'
DAT0CD7A EQU   *
         DC    X'000C'                             C'..'
DAT0CD7C EQU   *
         DC    X'1C'                               C'.'
DAT0CD7D EQU   *
         DC    X'5C'                               C'.'
DAT0CD7E EQU   *
         DC    X'40202021'                         C' ...'
DAT0CD82 EQU   *
         DC    X'00'                               C'.'
DAT0CD83 EQU   *
         DC    X'000408080C0C0C0C1010101010101010' C'................'
         DC    X'FF'
DAT0CD94 EQU   *
         DC    C'SYSIN'
DAT0CD99 EQU   *
         DC    C'CONSOLE'
DAT0CDA0 EQU   *
         DC    C'INSTALL'
DAT0CDA7 EQU   *
         DC    C'REPLACED'
DAT0CDAF EQU   *
         DC    C'REPLACEMENT'
DAT0CDBA EQU   *
         DC    C'-LINE FOUND-'
DAT0CDC6 EQU   *
         DC    C'*UPDATE ERROR*'
DAT0CDD4 EQU   *
         DC    C'MESSAGE'
DAT0CDDB EQU   *
         DC    C'0'
         DC    CL120' MEMBER   COMMENTS       .... ....1.... ....2.... +
               ....3.... ....4.... ....5.... ....6.... ....7.C.. ....8'
DAT0CE54 EQU   *
         DC    C'PDS STRING SCANNING AID '
DAT0CE6C EQU   *
         DC    C'UPDATE CONTROL STATEMENTS'
DAT0CE85 EQU   *
         DC    C'MODE='
DAT0CE8A EQU   *
         DC    C'PAGE:'
HALFW7   DC    X'0007'
DAT0CE91 EQU   *
         DC    CL8'INSTALL'
DAT0CE99 EQU   *
         DC    X'0006'                             C'..'
DAT0CE9B EQU   *
         DC    CL8'UPDATE'
DAT0CEA3 EQU   *
         DC    X'0005'                             C'..'
DAT0CEA5 EQU   *
         DC    CL8'CHECK'
DAT0CEAD EQU   *
         DC    X'00'                               C'.'
DAT0CEAE EQU   *
         DC    X'4040'                             C'  '
DAT0CEB0 EQU   *
         DC    C'.NU.'
DAT0CEB4 EQU   *
         DC    C'.RU.'
DAT0CEB8 EQU   *
         DC    C'<END'
SPECHARS EQU   *
         DC    X'616B4B4D5D404C6E5E7A6F7F5F5A4E7E' C'...... .........'
         DC    X'6D5C4F6C7D'                       C'.....'
DAT0CED1 EQU   *
         DC    X'00C4E4D4D4E8F1404000C4E4D4D4E8F2' C'.DUMMY1  .DUMMY2'
         DC    X'404006F2F3F0F560F1404007F2F3F0F5' C'  .2305.1  .2305'
         DC    X'60F2404008F2F3F1F44040404009F3F3' C'.2  .2314    .33'
         DC    X'F3F0404040400AF3F3F4F0404040400B' C'30    .3340    .'
         DC    X'F3F3F5F04040404000C4E4D4D4E8F340' C'3350    .DUMMY3 '
         DC    X'400DF3F3F3F060F140400EF3F3F8F040' C' .3330.1  .3380 '
         DC    X'4040400FF3F3F9F040404040FFD3C9E2' C'   .3390    .LIS'
         DC    X'E340C5D5C40000'                   C'T END..'
DAT0CF48 EQU   *
         DC    X'00280000D7C4E2F0F0F1405C40C5D9D9' C'....PDS001 . ERR'
         DC    X'D6D9405C40E2E8E2D7D9C9D5E340C4C4' C'OR . SYSPRINT DD'
         DC    X'40D4C9E2E2C9D5C7'                 C' MISSING'
DAT0CF70 EQU   *
         DC    X'002C0000D7C4E2F0F0F2405C40C5D9D9' C'....PDS002 . ERR'
         DC    X'D6D9405C40C9D5E5C1D3C9C440D7C1D9' C'OR . INVALID PAR'
         DC    X'C1D4C5E3C5D940C6C9C5D3C4'         C'AMETER FIELD'
DAT0CF9C EQU   *
         DC    X'480000000000000000340000D7C4E2F0' C'............PDS0'
         DC    X'F0F340C5D5E3C5D940D7C4E2E4D7C4E3' C'03 ENTER PDSUPDT'
         DC    X'C540C3D6D5E3D9D6D340E2E3C1E3C5D4' C'E CONTROL STATEM'
         DC    X'C5D5E340D6D9407DC5D5C47D'         C'ENT OR .END.'
DAT0CFD8 EQU   *
         DC    X'002B0000D7C4E2F0F0F440C9D5E5C1D3' C'....PDS004 INVAL'
         DC    X'C9C440C3D6D5E3D9D6D340E2E3C1E3C5' C'ID CONTROL STATE'
         DC    X'D4C5D5E340E2E8D5E3C1E700'         C'MENT SYNTAX.'
DAT0A004 EQU   *
         DC    X'002A0000D7C4E2F0F0F540C5D5C440D6' C'....PDS005 END O'
         DC    X'C640C9D5D7E4E340C3D6D5E3D9D6D340' C'F INPUT CONTROL '
         DC    X'E2E3C1E3C5D4C5D5E3E20000'         C'STATEMENTS..'
DAT0A030 EQU   *
         DC    X'002D0000D7C4E2F0F0F640C6C9D3C540' C'....PDS006 FILE '
DAT0A040 EQU   *
         DC    X'E7E7E7E7E7E7E7E740C9D5E5C1D3C9C4' C'XXXXXXXX INVALID'
         DC    X'40C6D6D940D7C4E2E4D7C4E3C5000000' C' FOR PDSUPDTE...'
DAT0A060 EQU   *
         DC    X'00510000D7C4E2F0F0F740C961D640C5' C'....PDS007 I.O E'
         DC    X'D9D9D6D940'                       C'RROR '
DAT0A075 EQU   *
         DC    X'F1F2F3F4F5F6F7F8F9F0F1F2F3F4F5F6' C'1234567890123456'
         DC    X'F7F8F9F0F1F2F3F4F5F6F7F8F9F0F1F2' C'7890123456789012'
         DC    X'F3F4F5F6F7F8F9F0F1F2F3F4F5F6F7F8' C'3456789012345678'
         DC    X'F9F0F1F2F3F4F5F6F7F8F9F0000000'   C'901234567890...'
DAT0A0B4 EQU   *
         DC    X'00320000D7C4E2F0F0F840D7D9D6C3C5' C'....PDS008 PROCE'
         DC    X'E2E2C9D5C740E3C5D9D4C9D5C1E3C5C4' C'SSING TERMINATED'
         DC    X'40C6D6D940C6C9D3C540'             C' FOR FILE '
DAT0A0DE EQU   *
         DC    X'E7E7E7E7E7E7E7E70000'             C'XXXXXXXX..'
DAT0A0E8 EQU   *
         DC    X'00300000D7C4E2F0F0F9405C40C5D9D9' C'....PDS009 . ERR'
         DC    X'D6D9405C40E3D6D640D4C1D5E840C3D6' C'OR . TOO MANY CO'
         DC    X'D5E3D9D6D340E2E3C1E3C5D4C5D5E3E2' C'NTROL STATEMENTS'
DAT0A118 EQU   *
         DC    X'00270000D7C4E2F0F1F040C6C9D3C540' C'....PDS010 FILE '
DAT0A128 EQU   *
         DC    X'E7E7E7E7E7E7E7E740C8C1C440D5D640' C'XXXXXXXX HAD NO '
         DC    X'E4D7C4C1E3C5E200'                 C'UPDATES.'
DAT0A140 EQU   *
         DC    X'00220000D7C4E2F0F1F140D7C4E2E4D7' C'....PDS011 PDSUP'
         DC    X'C4E3C540C5D5C4C5C44B40C3D6C4C57E' C'DTE ENDED. CODE.'
DAT0A160 EQU   *
         DC    X'E7'                               C'X'
DAT0A161 EQU   *
         DC    X'E70000'                           C'X..'
DAT0A164 EQU   *
         DC    X'002D0000D7C4E2F0F1F240C4C1E3C1E2' C'....PDS012 DATAS'
         DC    X'C5E340D5D6E340C1D7D7D3C9C3C1C2D3' C'ET NOT APPLICABL'
         DC    X'C540E3D640D7C4E2E4D7C4E3C5000000' C'E TO PDSUPDTE...'
DAT0A194 EQU   *
         DC    X'00350000D7C4E2F0F1F340C4C440'     C'....PDS013 DD '
DAT0A1A2 EQU   *
         DC    X'E7E7E7E7E7E7E7E740C9D5E5C1D3C9C4' C'XXXXXXXX INVALID'
         DC    X'40D6D940E4D5D2D5D6E6D540C4C5E5C9' C' OR UNKNOWN DEVI'
         DC    X'C3C540E3E8D7C500000000000000'     C'CE TYPE.......'
DAT0A1D0 EQU   *
         DC    CL8'3330.1  '
DAT0A1D8 EQU   *
EOF1     DC    CL4'END'
DAT0A1DC EQU   *
         DC    CL4'VOL='
DAT0A1E0 EQU   *
         DC    CL4'****'
DAT0A1E4 EQU   *
         DC    CL7'DSNAME='
EOF2     DC    CL3'</*'
         DC    X'0000'                             C'..'
* SYSPRINT DCB   DSORG=PS,DDNAME=SYSPRINT,LRECL=121,RECFM=FBA
SYSPRINT DS    0D
DAT0A1F0 EQU   *
         DC    X'00000000000000000000000000000000' C'................'
         DC    X'00000000000000010000400000000001' C'.......... .....'
         DC    X'0000000194'                       C'.....'
         DC    AL3(DAT0CD60)
         DC    X'E2E8E2D7D9C9D5E3'                 C'SYSPRINT'
DAT0A220 EQU   *
         DC    X'02000050000000010000000100000000' C'................'
         DC    X'00000000000000010000000100000001' C'................'
         DC    X'00000079000000010000000000000001' C'................'
* SYSIN    DCB   DSORG=PS,DDNAME=SYSIN
SYSIN    DS    0D
DAT0A250 EQU   *
         DC    X'00000000000000000000000000000000' C'................'
         DC    X'00000000000000010000400000000001' C'.......... .....'
         DC    X'00'                               C'.'
         DC    AL3(EOFSYSIN)
         DC    X'90000000E2E8E2C9D5404040'         C'....SYSIN   '
DAT0A280 EQU   *
         DC    X'02005000000000010000000100000000' C'................'
         DC    X'00000000000000010000000100000001' C'................'
         DC    X'00000050000000010000000000000001' C'................'
* PDSDATA  DCB   DSORG=PS,DDNAME=@???????,EODAD=RTN0C928,
*                EXLST=DCBXLIST,
PDSDATA  DS    0D
TEMPDATA EQU   *
         DC    X'00000000000000000000000000000000' C'................'
         DC    X'00000000000000010000020000000001' C'................'
         DC    X'00'                               C'.'
         DC    AL3(RTN0C928)
         DC    X'00'                               C'.'
         DC    AL3(DCBXLIST)
DAT0A2D8 EQU   *
         DC    X'E3C5D4D7C4C1E3C10200242400000001' C'TEMPDATA........'
         DC    A(RTN0CCC4)
         DC    X'0000'                             C'..'
DAT0A2EE EQU   *
         DC    X'00000000000000000001000000010000' C'................'
         DC    X'00010000000000000001'             C'..........'
* PDSDIR   DCB   DSORG=PS,DDNAME=@???????,EODAD=RTN0C5B6,
*                LRECL=256,BLKSIZE=256,RECFM=F,EXLST=DCBXLIST
PDSDIR   DS    0D
TEMPDIR  EQU   *
         DC    X'00000000000000000000000000000000' C'................'
         DC    X'00000000000000010000400000000001' C'.......... .....'
         DC    X'00'                               C'.'
         DC    AL3(RTN0C5B6)
         DC    X'C0'                               C'.'
         DC    AL3(DCBXLIST)
DAT0A330 EQU   *
         DC    X'E3C5D4D7C4C9D9400200200000000001' C'TEMPDIR ........'
         DC    A(RTN0CCC4)
         DC    X'00000100000000000000000100000001' C'................'
         DC    X'000000010000000000000001'         C'............'
         EJECT
WORKAREA DSECT
SAVEAREA DS    18F
DWORK    DS    D         +048
PARMSAVE DS    4F        +050
DST0B060 DS    F
DST0B064 DS    F
TTR      EQU   WORKAREA+X'068'
DST0B06C EQU   WORKAREA+X'06C'
NEWSAVE  EQU   WORKAREA+X'070'
CURRECAD EQU   WORKAREA+X'0B8'
BUFADTAB EQU   WORKAREA+X'0BC'
ACTBLKSZ EQU   WORKAREA+X'0C8'
RECOFSET EQU   WORKAREA+X'0CC'
DST0B0C0 EQU   WORKAREA+X'0C0'
DST0B0C4 EQU   WORKAREA+X'0C4'
DST0B0D0 EQU   WORKAREA+X'0D0'
DST0B0D4 EQU   WORKAREA+X'0D4'
DST0B0D8 EQU   WORKAREA+X'0D8'
DST0B0DC EQU   WORKAREA+X'0DC'
MEMBDECB EQU   WORKAREA+X'0E0'
DST0B04E EQU   WORKAREA+X'04E'
DST0B0F4 EQU   WORKAREA+X'0F4'
DST0B0F8 EQU   WORKAREA+X'0F8'
DST0B108 EQU   WORKAREA+X'108'
DST0B140 EQU   WORKAREA+X'140'
DST0B158 EQU   WORKAREA+X'158'
FLAGS2   EQU   WORKAREA+X'159'
INSTALL  EQU   X'10'                    INSTALL MODE/CONSOLE INPUT
SYSPROPN EQU   X'20'                    SYSPRINT OPEN
SYSINERR EQU   X'40'                    SYSIN OPEN ERROR--CONSOLE INPUT
SYSINOPN EQU   X'80'                    SYSIN OPEN
DST0B15A EQU   WORKAREA+X'15A'
FLAGS    EQU   WORKAREA+X'15B'
MEMBONLY EQU   X'02'                    SINGLE MEMBER SCAN
MEMNAME  EQU   WORKAREA+X'15C',8
PACKED60 EQU   WORKAREA+X'164'
DEOFFSET EQU   WORKAREA+X'166'
DST0B168 EQU   WORKAREA+X'168'
DST0B169 EQU   WORKAREA+X'169'
DST0B1B2 EQU   WORKAREA+X'1B2'
DST0B1B0 EQU   WORKAREA+X'1B0'
DST0B1BB EQU   WORKAREA+X'1BB'
DST0B203 EQU   WORKAREA+X'203'
DST0B24B EQU   WORKAREA+X'24B'
DST0B24C EQU   WORKAREA+X'24C'
DST0B26F EQU   WORKAREA+X'26F'
DST0B273 EQU   WORKAREA+X'273'
DST0B27A EQU   WORKAREA+X'27A'
DST0B27B EQU   WORKAREA+X'27B'
DST0B281 EQU   WORKAREA+X'281'
DST0B2AB EQU   WORKAREA+X'2AB'
DST0B2BA EQU   WORKAREA+X'2BA'
DST0B2B0 EQU   WORKAREA+X'2B0'
DST0B2BF EQU   WORKAREA+X'2BF'
DST0B2DF EQU   WORKAREA+X'2DF'
CC       EQU   WORKAREA+X'2C4',1
PRINTLIN EQU   WORKAREA+X'2C5',120
DST0B2C6 EQU   WORKAREA+X'2C6'
DST0B2CF EQU   WORKAREA+X'2CF'
DST0B2DE EQU   WORKAREA+X'2DE'
DST0B325 EQU   WORKAREA+X'325'
DST0B332 EQU   WORKAREA+X'332'
DST0B33D EQU   WORKAREA+X'33D'
DST0B33E EQU   WORKAREA+X'33E'
DST0B38D EQU   WORKAREA+X'38D'
TRTAB    EQU   WORKAREA+X'390'
DST0B391 EQU   WORKAREA+X'391'
TRTAB2   EQU   WORKAREA+X'490'
DST0B4DB EQU   WORKAREA+X'4DB'
DST9B590 EQU   WORKAREA+X'590'
DST0B590 EQU   WORKAREA+X'590'
DST4B690 EQU   WORKAREA+X'690'
DIRRECAD EQU   WORKAREA+X'690'
DST0B790 EQU   WORKAREA+X'790'
DST0B7BC EQU   WORKAREA+X'7BC'
DST0B7C4 EQU   WORKAREA+X'7C4'
DST0B7DC EQU   WORKAREA+X'7DC'
DST0B7E6 EQU   WORKAREA+X'7E6'
DST0B806 EQU   WORKAREA+X'806'
DST0B844 EQU   WORKAREA+X'844'
DST0B870 EQU   WORKAREA+X'870'
DST0B898 EQU   WORKAREA+X'898'
DST0B89C EQU   WORKAREA+X'89C'
DST0B896 EQU   WORKAREA+X'896'
DST0B904 EQU   WORKAREA+X'904'
         SPACE 2
         PRINT NOGEN
         IHADCB DEVD=(DA),DSORG=PS
         YREGS ,                                                GP06317
         END
