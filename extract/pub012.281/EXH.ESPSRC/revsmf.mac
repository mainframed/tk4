REVSMF   TITLE '  R E V S M F   '
***********************************************************************
*                                                                     *
*        REVSMF - A SUBROUTINE OF THE REVIEW TSO COMMAND              *
*                                                                     *
***********************************************************************
*
*        WRITTEN BY: BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).
*        INSTALLATION: AIR FORCE DATA SERVICES CENTER, PENTAGON.
*        DATE WRITTEN: MARCH 18 1982.
*        DATE UPDATED: JUNE  24 1985.  VIRTUALLY REWRITTEN WITH A LOT
*                                      OF CODE FROM $SMFBRWS.   GP@SECV
*                      OCT.  21 1986.  MVS/XA CHANGES.          GP@P6
*                      MAY   05 1988.  DFSORT CHANGES.          GP@P6
*                      SEPT. 21 1988.  SUPPORT SOME RMF.        GP@P6
*                      OCT.  05 1988.  ENHANCE TYPE 30 STUFF.   GP@P6
*                      APRIL 13 1989.  ORACLE, HSMVOL, DSKSPC.  GP@P6
*                      DEC.  19 1989.  PR/SM RMF CPU BUSY %.    GP@P6
*                      MARCH 09 1990.  HANDLE 0 DEVS IN 9/11.   GP@P6
*                      MARCH 16 1990.  RMF RECORD VALIDATION.   GP@P6
*                      APRIL 04 1990.  LEFT/RIGHT FOR 30,73,74. GP@P6
*                      OCT.  24 1990.  TYPE 30 VIO, JES RIGOUR. GP@P6
*                      JAN.  17 1991.  ENHANCE TYPE 21 DISPLAY. GP@P6
*                      FEB.  07 1991.  ADD SYSSMF, SLSSRC.      GP@P6
*                      FEB.  12 1991.  ADD OFFLOD FOR TYPE 24.  GP@P6
*                      JUNE  12 1991.  ICFACT - TYPE/FULL NAME. GP@P6
*                      SEP.  25 1991.  ESCON+LEFT/RIGHT FOR 70. GP@P6
*                      FEB.  14 1992.  FIX 70 FOR NON-PR/SM.
*                                      FIX PAGE D/S DEVICE NO.
*                                      HANDLE HSM SMF(240).     GP@P6
*                      MARCH 20 1992.  BASE REGISTER REORG.     GP@P6
*        ATTRIBUTES: RE-ENTRANT.
*        LOCAL MACROS USED: NONE.
*        DESCRIPTION:
*         THIS SUBROUTINE FORMATS AN SMF RECORD INTO A LINE OF DATA
*         FOR THE SCREEN.  EIGHTY-COLUMN LINES ARE ASSUMED.
*         UPON ENTRY:
*              R0 CONTAINS THE SCROLL (LEFT/RIGHT) OFFSET, AND
*              R1 POINTS TO A FOUR-WORD PARAMETER LIST.
*         DURING PROCESSING:
*              R2 POINTS TO SMF RECORD DATA AFTER RDW, AND
*              R6 POINTS TO EIGHTY-BYTE DISPLAY LINE.
*
         TITLE 'MAINLINE'
         PRINT NOGEN         SAVE A TREE                        GP97205
REVSMF   START
         USING *,R10
         B     @PROLOG-*(,R15)
         DC    AL1(11),CL11'REVSMF '
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE    DC    0F'0',AL1(1),AL3(0)
@PROLOG  STM   R14,R12,12(R13)
         LR    R10,R15             BASE
         LM    R1,R4,0(R1)         LENGTH, RECORD, OUTPUT, WORK
         USING @DATA,R4
         LR    R6,R3
         MVI   0(R6),C' '
         MVC   1(79,R6),0(R6)
         SR    R8,R8
         IC    R8,1(,R2)           RECORD TYPE
         CVD   R8,DOUBLE
         MVC   0(4,R6),=X'40202120'
         ED    0(4,R6),DOUBLE+6
         MVC   0(3,R6),1(R6)
         MVI   3(R6),C' '
         ICM   R1,15,2(R2)         TIME
         LA    R15,4(,R6)
         BAL   R14,TIMEX
         UNPK  14(5,R6),7(3,R2)    DATE
         MVC   13(2,R6),14(R6)
         MVI   15(R6),C'.'
         MVC   20(4,R6),10(R2)     SYSTEM ID
         SPACE
         TM    1(R2),X'80'         USER RECORD TYPE?
         BZ    SYSSMF              NO, RECORD TYPE IS LESS THAN 128
 B UNUSED   *****NONE OF THE BELOW - ADD LOCAL CODE LATER ****GYP93274
         SPACE
         L     R5,=A(HSMREC)
         CLC   30(8,R2),=C'**HSM***'
         BER   R5                  OBVIOUSLY AN HSM RECORD
         L     R5,=A(HSMVOL)
         CLC   16(4,R2),HSMVSR
         BER   R5                  OBVIOUSLY AN HSM VOLUME STATS RECORD
         L     R5,=A(SLSSRC)
         CLC   =C'SLS',14(R2)
         BER   R5                  OBVIOUSLY FROM STO TEK ACS 4400 HSC
         L     R5,=A(DSKSPC)
         CLI   1(R2),255       *** DISK SPACE MANAGEMENT TABLE     ***
         BER   R5
         L     R5,=A(ORACLE)
         CLI   1(R2),199       *** ORACLE USER SMF RECORD TYPE     ***
         BER   R5
         L     R5,=A(UACTRT)
         CLI   1(R2),158       *** IEFACTRT USER SMF RECORD TYPE   ***
         BER   R5
         L     R5,=A(HSMREC)
         CLI   1(R2),129       *** SETSYS SMF(128) ASSUMED FOR HSM ***
         BER   R5
         CLI   1(R2),241       *** SETSYS SMF(240) ASSUMED FOR HSM ***
         BER   R5
         B     UNUSED              USER SMF RECORD TYPE NOT KNOWN.
         SPACE
SYSSMF   DS    0H                  SYSTEM SMF RECORD TYPE.
         SLA   R8,2                MULTIPLY TYPE BY FOUR.
         L     R5,SMFTYPES(R8)     GET ROUTINE ENTRY POINT ADDRESS.
         BR    R5                  BRANCH TO ROUTINE.
         TITLE 'COMMON SUBROUTINES'
LEFTMSG  DS    0H
         MVC   34(40,R6),MSGLEFT
         B     RTNREC
         SPACE 2
RIGHTMSG DS    0H
         MVC   40(40,R6),MSGRIGHT
         B     RTNREC
         SPACE 2
UNUSED   DS    0H
         LR    R3,R2                PREPARE FOR TRT
         TRT   14(8,R3),GOODNAME    CHECK FOR PRINTABLE JOB NAME
         BNZ   RMFCHK
         MVC   25(8,R6),14(R3)      JOB NAME
         B     RTNREC
         SPACE 2
RMFCHK   DS    0H
         LR    R2,R3                RESTORE RECORD POINTER
RMFREC   DS    0H
         TM    0(R2),X'80'          SUBSYSTEM IDENTIFICATION PRESENT?
         BNO   RTNREC               NO
         MVC   25(4,R6),14(R2)      YES, SHOW SUBSYSTEM NAME
         TM    0(R2),X'40'          SMF RECORD SUBTYPES UTILIZED?
         BNO   RTNREC               NO
PUTSUB   SR    R1,R1
         ICM   R1,3,18(R2)          YES, SHOW SUBTYPE
         CVD   R1,DOUBLE
         MVC   44(5,R6),ED5
         ED    43(6,R6),DOUBLE+5
         MVC   34(7,R6),SUBTYPE
         SPACE 2
RTNREC   DS    0H
         LM    R14,R12,12(R13)
         BR    R14
         EJECT
**********************************************************************
*                                                          *         *
*         SUBROUTINE TO FORMAT COMPLETION CODES            * KHPRDC  *
*                                                          *         *
**********************************************************************
         SPACE
*         INPUT: CODE IN R0, FLAG BYTE ADDRESS IN R1
*         OUTPUT: 7-BYTE AREA ADDRESS IN R15
         SPACE
CCRCCOMP TM    0(R1),X'01'    WAS IT FLUSHED?
         BO    CCRFLUSH       YES
CCRCOMPJ TM    0(R1),X'02'    DID IT ABEND?
         BO    CCRCABND       YES, DO ABEND
         N     R0,=A(X'FFF')  ZERO UNUSED PORTION
         CVD   R0,DOUBLE      CONVERT TO DEC
         MVC   1(6,R15),=X'402120202020'
         ED    1(6,R15),DOUBLE+5    RET CODE TO CHAR
         MVC   0(3,R15),=C'CC='
         BR    R14            RETURN
CCRCABND DS    0H             PROCESS ABENDS
         CLM   R0,2,=X'80'    USER ABEND CODE?
         BL    CCRCSYSA       NO, DO SYSTEM ABEND
         N     R0,=A(X'FFF')  TURN OFF X'80' BIT
         CVD   R0,DOUBLE      CONVERT TO DECIMAL
         MVC   0(6,R15),=X'402120202020'
         ED    0(6,R15),DOUBLE+5    CONVERT TO CHAR
         MVI   1(R15),C'U'    DENOTE USER ABEND
         BR    R14
CCRCSYSA STH   R0,DOUBLE      STORE SYS ABEND CODE
         UNPK  DOUBLE+3(5),DOUBLE(3) ADD ZONES TO CC FIELD
         TR    DOUBLE+4(3),HEXCHARS-240
         MVI   2(R15),C'S'    DENOTE SYSTEM ABEND
         MVC   3(3,R15),DOUBLE+4
         BR    R14            BACK TO CALLER
CCRFLUSH MVC   0(7,R15),=X'C693A4A2888584'  C'FLUSHED'
         BR    R14
         EJECT
**********************************************************************
*                                                          *         *
*         SUBROUTINE TO GET SECONDS IN RMF INTERVAL        * GP@SECV *
*                                                          *         *
**********************************************************************
         SPACE
*         INPUT: RMF SMF RECORD
*         OUTPUT: MILLISECONDS IN R1, ADDRESS OF SMF RDW IN R15
         SPACE
RMFINTVL TM    0(R2),X'C6'    RMF SMF RECORD FROM OS/VS2 MVS/XA?
         BNO   RMFREC         NO, BETTER TAKE EVASIVE ACTION
         CLI   18(R2),0       RMF SMF RECORD SUBTYPE LESS THAN 256?
         BNE   RMFREC         NO, BETTER TAKE EVASIVE ACTION
         ICM   R1,3,30(R2)    GET NUMBER OF RMF PRODUCT SECTIONS
         BZ    RMFREC         SKIP PROCESSING IF ZERO
         ICM   R1,15,24(R2)   GET RMF PRODUCTION SECTION OFFSET
         LA    R15,14(R1,R2)  POINT TO RMF MEASUREMENT INTERVAL LENGTH
         SLR   R0,R0
         ST    R0,DOUBLE      ZERO TOP HALF OF DOUBLE
         ICM   R0,2,0(R15)    GET DECIMAL MINUTES OF DURATION
         IC    R0,HEXCHARS    USE THIS FOR THE SIGN
         SRL   R0,4           GET PACKED DECIMAL MINUTES
         ST    R0,DOUBLE+4    MAKE IT A DOUBLEWORD
         CVB   R1,DOUBLE      GET BINARY MINUTES
         M     R0,=F'60000'   GET WHOLE MINUTES IN MILLISECONDS
         MVC   DOUBLE+5(3),1(R15)  COPY REMAINING MILLISECONDS
         CVB   R0,DOUBLE
         AR    R1,R0          TOTAL MILLISECONDS IN RMF INTERVAL
         LA    R0,4           LENGTH OF RDW
         LR    R15,R2         POINT TO SMF RECORD TYPE
         SLR   R15,R0         POINT TO RDW TO SIMPLIFY PROCESSING
         MVC   25(4,R6),18(R15)   LOAD SUBSYSTEM IDENTIFIER ('RMF ')
         BR    R14            RETURN
         SPACE 2
**********************************************************************
*                                                          *         *
*         SUBROUTINE TO GET LEFT/RIGHT PAGE NUMBER         *  GP@P6  *
*                                                          *         *
**********************************************************************
         SPACE
*         INPUT: REVIEW MAINLINE SCROLL OFFSET IN R0 SAVE AREA SLOT
*         OUTPUT: RELATIVE PAGE NUMBER IN R0
         SPACE
PAGECALC L     R15,20(,R13)   LOAD REVIEW MAINLINE SCROLL OFFSET
         SLR   R14,R14        ZERO FOR DIVIDE
         LA    R0,80          GET COLUMNS PER PAGE
         DR    R14,R0         GET RELATIVE PAGE NUMBER
         LTR   R0,R15         LOAD THE ANSWER AND SET CONDITION CODE
         BR    R8             RETURN
         EJECT
************************************************************
*                                                          *
*         SUBROUTINE TO CONVERT 2 HEX BYTES TO 4 CHARS     *
*                                                          *
************************************************************
         SPACE
*         INPUT IN DOUBLE, OUTPUT IN DOUBLE
         SPACE
CONV     DS    0H
         LA    R1,HEXCHARS
         ICM   R9,12,DOUBLE
         SR    R8,R8
         SLDA  R8,4
         IC    R0,0(R8,R1)
         STC   R0,DOUBLE
         SR    R8,R8
         SLDA  R8,4
         IC    R0,0(R8,R1)
         STC   R0,DOUBLE+1
         SR    R8,R8
         SLDA  R8,4
         IC    R0,0(R8,R1)
         STC   R0,DOUBLE+2
         SR    R8,R8
         SLDA  R8,4
         IC    R0,0(R8,R1)
         STC   R0,DOUBLE+3
         BR    R14
         EJECT
************************************************************
*                                                          *
*         SUBROUTINE TO CONVERT TIME TO HH:MM:SS           *
*                                                          *
************************************************************
         SPACE
*         INPUT: TIME IN R1, OUTPUT ADDRESS IN R15
         SPACE
TIMEX    SLR   R0,R0
         D     R0,=F'360000'
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  0(2,R15),DOUBLE+6(2)
         LR    R1,R0
         SLR   R0,R0
         D     R0,=F'6000'
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  3(2,R15),DOUBLE+6(2)
         LR    R1,R0
         SLR   R0,R0
         D     R0,=F'100'
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  6(2,R15),DOUBLE+6(2)
         MVI   2(R15),C':'
         MVI   5(R15),C':'
         BR    R14
         TITLE 'CONSTANTS AND LITERALS'
HSMVSR   DC    X'10',C'VSR'
ED15     EQU   *,15
         DC    X'2020'
ED13     EQU   *,13
         DC    X'2020'
ED11     EQU   *,11
         DC    X'2020'
ED9      EQU   *,9
         DC    X'2020'
ED7      EQU   *,7
         DC    X'2020'
ED5      EQU   *,5
         DC    X'2020'
ED3      DC    X'202120'
         SPACE
SUBTYPE  DC    X'A2A482A3A89785'
SEQ#     DC    X'A285987B'
MSGLEFT  EQU   *,40      CL40'<<==== SCROLL LEFT FOR MORE INFORMATION '
         DC    XL20'4C4C7E7E7E7E40A2839996939340938586A34086'
         DC    XL20'969940949699854089958696999481A389969540'
MSGRIGHT EQU   *,40      CL40'SCROLL RIGHT FOR MORE INFORMATION ====>>'
         DC    XL20'A283999693934099898788A34086969940949699'
         DC    XL20'854089958696999481A3899695407E7E7E7E6E6E'
         SPACE
         LTORG
         SPACE
         DS    0F
HEXCHARS DC    C'0123456789ABCDEF'
GOODNAME DC    256X'01'
         ORG   GOODNAME+C' '
         DC    X'00'
         ORG   GOODNAME+C'$'
         DC    X'00'
         ORG   GOODNAME+C'#'
         DC    2X'00'
         ORG   GOODNAME+C'A'
         DC    9X'00'
         ORG   GOODNAME+C'J'
         DC    9X'00'
         ORG   GOODNAME+C'S'
         DC    8X'00'
         ORG   GOODNAME+C'0'
         DC    10X'00'
         ORG
         TITLE 'SMF RECORD TYPE SUBROUTINE ENTRY POINT ADDRESS TABLE'
SMFTYPES DS    0F
         DC    A(IPLREC)           00 IPL.
         DC    A(RTNREC)           01 DOES NOT EXIST.
         DC    A(RTNREC)           02 DUMP HEADER.
         DC    A(RTNREC)           03 DUMP TRAILER.
         DC    A(STPREC)           04 STEP TERMINATION.
         DC    A(JOBREC)           05 JOB TERMINATION.
         DC    A(SYSOUT)           06 OUTPUT WRITER.
         DC    A(LOSDAT)           07 SMF DATA LOST.
         DC    A(RTNREC)           08 I/O CONFIGURATION.
         DC    A(VRYDEV)           09 VARY ONLINE.
         DC    A(ALLREC)           10 ALLOCATION RECOVERY.
         DC    A(VRYDEV)           11 VARY OFFLINE.
         DC    A(UNUSED)           12 DOES NOT EXIST.
         DC    A(UNUSED)           13 DOES NOT EXIST.
         DC    A(DSETIO)           14 INPUT DATA SET ACTIVITY.
         DC    A(DSETIO)           15 OUTPUT DATA SET ACTIVITY.
         DC    A(SORTMG)           16 DFSORT/MERGE STATISTICS.
         DC    A(DASCRT)           17 SCRATCH DATA SET STATUS.
         DC    A(RENAME)           18 RENAME DATA SET STATUS.
         DC    A(DASVOL)           19 DIRECT-ACCESS VOLUME.
         DC    A(NEWJOB)           20 JOB INITIATION.
         DC    A(ERSTAT)           21 ERROR STATISTICS BY VOLUME.
         DC    A(CONFIG)           22 CONFIGURATION.
         DC    A(SMFSTA)           23 SMF STATUS.
         DC    A(OFFLOD)           24 JES2 SPOOL OFFLOAD.
         DC    A(JES3AL)           25 JES3 DEVICE ALLOCATION.
         DC    A(PURGE)            26 JES2 PURGE.
         DC    A(UNUSED)           27 DOES NOT EXIST.
         DC    A(UNUSED)           28 NPM STATISTICS (V3).
         DC    A(UNUSED)           29 DOES NOT EXIST.
         DC    A(CMNASW)           30 COMMON ADDRESS SPACE WORK.
         DC    A(TIOCIN)           31 TIOC INITIALIZATION.
         DC    A(UNUSED)           32 TSO USER WORK ACCOUNTING.
         DC    A(UNUSED)           33 DOES NOT EXIST.
         DC    A(TSSTEP)           34 TS-STEP TERMINATION.
         DC    A(LOGOFF)           35 TS-JOB TERMINATION (LOGOFF).
         DC    A(UNUSED)           36 ICF CATALOG.
         DC    A(UNUSED)           37 NPDA.
         DC    A(UNUSED)           38 NPM STATISTICS (V2).
         DC    A(UNUSED)           39 NLDM RESPONSE TIME.
         DC    A(DDYNAM)           40 DYNAMIC DD.
         DC    A(UNUSED)           41 DATA-IN-VIRTUAL ACCESS/UNACCESS.
         DC    A(UNUSED)           42 DFP STATISTICS AND CONFIGURATION.
         DC    A(JES2ST)           43 JES2 START.
         DC    A(UNUSED)           44 DOES NOT EXIST.
         DC    A(JESTOP)           45 JES2 WITHDRAWAL.
         DC    A(UNUSED)           46 DOES NOT EXIST.
         DC    A(RJEON)            47 JES2 RJE SIGNON.
         DC    A(RJEOFF)           48 JES2 RJE SIGNOFF.
         DC    A(RJEINT)           49 JES2 RJE INTEGRITY.
         DC    A(ACFTUN)           50 ACF/VTAM TUNING STATISTICS.
         DC    A(UNUSED)           51 DOES NOT EXIST.
         DC    A(SNAON)            52 JES2 SNA LOGON.
         DC    A(SNAOFF)           53 JES2 SNA LOGOFF.
         DC    A(SNAINT)           54 JES2 SNA INTEGRITY.
         DC    A(RTNREC)           55 JES2 NJE NETWORK SIGNON.
         DC    A(RTNREC)           56 JES2 NJE NETWORK INTEGRITY.
         DC    A(RTNREC)           57 JES2 NJE NETWORK SYSOUT XMIT.
         DC    A(RTNREC)           58 JES2 NJE NETWORK SIGNOFF.
         DC    A(UNUSED)           59 MVS/BDT FILE-TO-FILE XMIT.
         DC    A(VSMVDS)           60 VSAM VOLUME DATA SET UPDATED.
         DC    A(ICFACT)           61 ICF DEFINE ACTIVITY.
         DC    A(VSMOPN)           62 VSAM COMPONENT OR CLUSTER OPENED.
         DC    A(VSMDEF)           63 VSAM COMPONENT OR CLUSTER CATLGD.
         DC    A(VSMUSE)           64 VSAM COMPONENT OR CLUSTER STATUS.
         DC    A(ICFACT)           65 ICF DELETE ACTIVITY.
         DC    A(ICFACT)           66 ICF ALTER ACTIVITY.
         DC    A(VSMDEL)           67 VSAM ENTRY DELETED.
         DC    A(VSMREN)           68 VSAM ENTRY RENAMED.
         DC    A(UNUSED)           69 VSAM DATA SPC DEFD, XTND OR DELD.
         DC    A(RMFCPU)           70 CPU ACTIVITY.
         DC    A(RMFPAG)           71 PAGING ACTIVITY.
         DC    A(RMFWRK)           72 WORKLOAD ACTIVITY/MONITOR III.
         DC    A(RMFCHN)           73 CHANNEL PATH ACTIVITY.
         DC    A(RMFDEV)           74 DEVICE ACTIVITY.
         DC    A(RMFPDS)           75 PAGE/SWAP DATA SET ACTIVITY.
         DC    A(RMFREC)           76 TRACE ACTIVITY.
         DC    A(RMFREC)           77 ENQUEUE ACTIVITY.
         DC    A(RMFREC)           78 MONITOR I ACTIVITY.
         DC    A(RMFREC)           79 MONITOR II ACTIVITY.
         DC    A(RACFUS)           80 RACF PROCESSING.
         DC    A(RTNREC)           81 RACF INITIALIZATION.
         DC    A(CRYPTO)           82 SECURITY RECORD.
         DC    A(UNUSED)           83 RACF AUDIT RECORD FOR DATA SETS.
         DC    A(UNUSED)           84 JES3 MONITORING FACILITY DATA.
         DC    A(UNUSED)           85 DOES NOT EXIST.
         DC    A(UNUSED)           86 DOES NOT EXIST.
         DC    A(UNUSED)           87 DOES NOT EXIST.
         DC    A(UNUSED)           88 DOES NOT EXIST.
         DC    A(UNUSED)           89 DOES NOT EXIST.
         DC    A(SYSTAT)           90 SYSTEM STATUS.
         DC    A(UNUSED)           91 DOES NOT EXIST.
         DC    A(UNUSED)           92 DOES NOT EXIST.
         DC    A(UNUSED)           93 DOES NOT EXIST.
         DC    A(UNUSED)           94 DOES NOT EXIST.
         DC    A(UNUSED)           95 DOES NOT EXIST.
         DC    A(UNUSED)           96 DOES NOT EXIST.
         DC    A(UNUSED)           97 DOES NOT EXIST.
         DC    A(UNUSED)           98 DOES NOT EXIST.
         DC    A(UNUSED)           99 DOES NOT EXIST.
         DC    A(UNUSED)           100 DOES NOT EXIST.
         DC    A(UNUSED)           101 DOES NOT EXIST.
         DC    A(UNUSED)           102 DOES NOT EXIST.
         DC    A(UNUSED)           103 DOES NOT EXIST.
         DC    A(UNUSED)           104 DOES NOT EXIST.
         DC    A(UNUSED)           105 DOES NOT EXIST.
         DC    A(UNUSED)           106 DOES NOT EXIST.
         DC    A(UNUSED)           107 DOES NOT EXIST.
         DC    A(UNUSED)           108 DOES NOT EXIST.
         DC    A(UNUSED)           109 DOES NOT EXIST.
         DC    A(CICSRC)           110 CICS/VS.
         DC    A(UNUSED)           111 DOES NOT EXIST.
         DC    A(UNUSED)           112 DOES NOT EXIST.
         DC    A(UNUSED)           113 DOES NOT EXIST.
         DC    A(UNUSED)           114 DOES NOT EXIST.
         DC    A(UNUSED)           115 DOES NOT EXIST.
         DC    A(UNUSED)           116 DOES NOT EXIST.
         DC    A(UNUSED)           117 DOES NOT EXIST.
         DC    A(UNUSED)           118 DOES NOT EXIST.
         DC    A(UNUSED)           119 DOES NOT EXIST.
         DC    A(UNUSED)           120 DOES NOT EXIST.
         DC    A(UNUSED)           121 DOES NOT EXIST.
         DC    A(UNUSED)           122 DOES NOT EXIST.
         DC    A(UNUSED)           123 DOES NOT EXIST.
         DC    A(UNUSED)           124 DOES NOT EXIST.
         DC    A(UNUSED)           125 DOES NOT EXIST.
         DC    A(UNUSED)           126 DOES NOT EXIST.
         DC    A(UNUSED)           127 FUJITSU PDLF.
         TITLE 'SMF RECORD TYPE SUBROUTINES'
         USING IPLREC,R5
IPLREC   DS    0H                  SMF RECORD TYPE 0
         ICM   R0,15,27(R2)         GET REAL STORAGE SIZE
         CVD   R0,DOUBLE            CONVERT TO DEC
         MVC   26(7,R6),ED7         PUT IN MESSAGE
         ED    25(8,R6),DOUBLE+4
         MVC   33(23,R6),MSG000
         ICM   R0,15,14(R2)         GET JOB WAIT TIME
         CVD   R0,DOUBLE            CONVERT TO DEC
         MVC   46(5,R6),ED5         PUT IN MESSAGE
         ED    45(6,R6),DOUBLE+5
         B     RTNREC
         DROP  R5                   IPLREC
         SPACE
*        DC    C'K REAL - JWT XXXXX MINS'
MSG000   DC    X'D240D9858193406040D1E6E340E7E7E7E7E740948995A2'
         LTORG
         SPACE 3
         USING STPREC,R5
STPREC   DS    0H                  SMF RECORD TYPE 4
         MVC   25(8,R6),14(R2)      JOB NAME
         MVI   34(R6),C'#'
         SR    R8,R8
         IC    R8,38(R2)            STEP NUMBER
         CVD   R8,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  35(3,R6),DOUBLE+6(2)
         OC    39(8,R6),62(R2)      STEP NAME     (INITIATOR HAS NULLS)
         MVC   48(8,R6),54(R2)      PROGRAM NAME
         LA    R1,83(,R2)           POINT TO RC/CC INDICATOR
         SR    R0,R0                CLEAR REGISTER
         ICM   R0,3,51(R2)          GET RC/CC
         LA    R15,65(,R6)          POINT TO END/ABEND CODE AREA
         BAL   R14,CCRCCOMP         COMPUTE RC/CC
         B     RTNREC
         DROP  R5                   STPREC
         SPACE
         LTORG
         SPACE 3
         USING JOBREC,R5
JOBREC   DS    0H                  SMF RECORD TYPE 5
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(20,R6),93(R2)     PROGRAMMER NAME
         MVC   55(1,R6),71(R2)      JOB CLASS
         LA    R1,62(,R2)           POINT TO RC/CC INDICATOR
         SR    R0,R0                CLEAR REGISTER
         ICM   R0,3,51(R2)          GET RC/CC
         LA    R15,65(,R6)          POINT TO END/ABEND CODE AREA
         BAL   R14,CCRCOMPJ         COMPUTE RC/CC (FLUSH BIT RESERVED)
         B     RTNREC
         DROP  R5                   JOBREC
         SPACE
         LTORG
         SPACE 3
         USING SYSOUT,R5
SYSOUT   DS    0H                  SMF RECORD TYPE 6
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(4,R6),=X'9185A27B'  C'JES#'
         MVC   38(4,R6),64(R2)      JES JOB NUMBER (NUMERIC PART)
         MVC   43(8,R6),68(R2)      OUTPUT DEVICE NAME
         MVC   52(1,R6),38(R2)      SYSOUT CLASS
         MVC   54(4,R6),53(R2)      FORM ID
         OC    59(4,R6),76(R2)      FCB NAME OR ZERO
         OC    64(4,R6),80(R2)      UCS NAME OR ZERO
         ICM   R1,15,47(R2)         GET # LINES DONE BY PPU
         CVD   R1,DOUBLE            CONVERT TO DEC
         MVC   70(10,R6),=X'40202020202020202120'
         ED    70(10,R6),DOUBLE+3   EDIT TO PRINT
         CLI   63(R2),X'03'         JES2 COMMON SECTION PRESENT?
         BL    RTNREC               NO
         MVC   34(8,R6),120(R2)     YES, SUPPLY COMPLETE JOB NUMBER
         B     RTNREC
         DROP  R5                   SYSOUT
         SPACE
         LTORG
         SPACE 3
         USING LOSDAT,R5
LOSDAT   DS    0H                  SMF RECORD TYPE 7
         SR    R1,R1                CLEAR REGISTER
         ICM   R1,3,14(R2)          GET # OF RECORDS LOST
         CVD   R1,DOUBLE            CONVERT TO DECIMAL
         MVC   25(6,R6),=X'402020202120'
         ED    25(6,R6),DOUBLE+5    EDIT TO PRINT
         MVC   32(18,R6),MSG007
         MVC   DOUBLE(4),16(R2)     TIME
         L     R1,DOUBLE
         LA    R15,51(,R6)
         BAL   R14,TIMEX
         UNPK  61(5,R6),21(3,R2)    DATE
         MVC   60(2,R6),61(R6)
         MVI   62(R6),C'.'
         B     RTNREC
         DROP  R5                   LOSDAT
         SPACE
*        DC    C'RECORDS LOST SINCE'
MSG007   DC    X'998583969984A2409396A2A340A289958385'
         LTORG
         SPACE 3
         USING VRYDEV,R5
VRYDEV   DS    0H                  SMF RECORD TYPES 9 AND 11
         SR    R7,R7
         ICM   R7,3,14(R2)          GET VARIABLE LENGTH
         SRA   R7,2                 DIVIDE BY 4 FOR NUMBER OF ENTRIES
         BZ    RTNREC               RETURN IF NONE  (CONFIG CHP OFF?)
         CH    R7,=H'11'            MORE THAN 11 DEVICES?
         BNH   VARYOK               NO
         LA    R7,11                YES, ONLY ROOM FOR 11
VARYOK   LA    R3,20(,R6)
         LA    R11,14(,R2)
VARYLOOP LA    R3,5(,R3)            NEXT MESSAGE LINE SLOT
         LA    R11,4(,R11)          NEXT SMF RECORD DEVICE ENTRY
         MVC   DOUBLE(2),0(R11)     (4-CHAR ADDRESS REPORTED)
         BAL   R14,CONV
         MVC   0(4,R3),DOUBLE
         BCT   R7,VARYLOOP
         B     RTNREC
         DROP  R5                   VRYDEV
         SPACE
         LTORG
         SPACE 3
         USING ALLREC,R5
ALLREC   DS    0H                  SMF RECORD TYPE 10
         MVC   25(8,R6),14(R2)      JOB NAME
         SR    R7,R7
         ICM   R7,3,38(R2)          GET VARIABLE LENGTH
         SRA   R7,2                 DIVIDE BY 4 FOR NUMBER OF ENTRIES
         BZ    RTNREC               RETURN IF NONE  (SHOULDN'T HAPPEN)
         CH    R7,=H'9'             MORE THAN 9 DEVICES?
         BNH   ALCRECOK             NO
         LA    R7,9                 YES, ONLY ROOM FOR 9
ALCRECOK LA    R3,30(,R6)
         LA    R11,38(,R2)
ALOCLOOP LA    R3,5(,R3)            NEXT MESSAGE LINE SLOT
         LA    R11,4(,R11)          NEXT SMF RECORD DEVICE ENTRY
         MVC   DOUBLE(2),0(R11)     (4-CHAR ADDRESS REPORTED)
         BAL   R14,CONV
         MVC   0(4,R3),DOUBLE
         BCT   R7,ALOCLOOP
         B     RTNREC
         DROP  R5                   ALLREC
         SPACE
         LTORG
         SPACE 3
         USING DSETIO,R5
DSETIO   DS    0H                  SMF RECORD TYPES 14 AND 15
         MVC   25(8,R6),14(R2)      JOB NAME
         ICM   R1,15,280(R2)        FIRST UNIT EXCP COUNT
         CVD   R1,DOUBLE
         CLI   266(R2),C' '         VOLUME SERIAL NUMBER BLANK?
         BNE   GETVOL               NO, SHOW FIRST VOLUME SERIAL NUMBER
         MVC   69(11,R6),ED11
         LA    R1,79(,R6)
         EDMK  68(12,R6),DOUBLE+2
         B     DSNCUT
GETVOL   MVC   74(6,R6),266(R2)     FIRST VOLUME SERIAL NUMBER
         MVC   62(11,R6),ED11
         LA    R1,72(,R6)
         EDMK  61(12,R6),DOUBLE+2
DSNCUT   BCTR  R1,0                 POINT TO BEHIND FIRST DIGIT
         LA    R15,34(,R6)          ADDRESS OF DSNAME START
         SR    R1,R15               GET LENGTH OF NAME THAT WILL FIT
         BCTR  R1,0                 LESS 1 FOR EXECUTE
         EX    R1,GETDSN
         B     RTNREC
GETDSN   MVC   34(0,R6),64(R2)      DATA SET NAME <<<EXECUTED>>>
         DROP  R5                   DSETIO
         SPACE
         LTORG
         SPACE 3
         USING SORTMG,R5
SORTMG   DS    0H                  SMF RECORD TYPE 16
         MVC   25(8,R6),14(R2)      JOB NAME
         MVI   34(R6),C'#'
         SR    R8,R8
         IC    R8,38(R2)            STEP NUMBER
         CVD   R8,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  35(3,R6),DOUBLE+6(2)
         ICM   R8,3,62(R2)          LOAD NUMBER OF DATA SECTIONS
         BZ    RTNREC               NONE SO END OF PROCESSING
         ICM   R8,15,56(R2)         LOAD OFFSET TO DATA SECTION
         ALR   R8,R2                POINT TO DATA SECTION + 4
         ICM   R1,15,6(R8)          NUMBER OF RECORDS SORTED
         CVD   R1,DOUBLE
         MVC   39(7,R6),ED7
         ED    38(8,R6),DOUBLE+4
         MVC   47(4,R6),=X'998583A2'   C'RECS'
         ICM   R1,15,10(R8)         NUMBER OF BYTES SORTED
         SRL   R1,10                CONVERT TO KILOBYTES
         CVD   R1,DOUBLE
         MVC   52(7,R6),ED7
         ED    51(8,R6),DOUBLE+4
         MVC   59(9,R6),=X'928240839697898584'    C'KB COPIED'
         TM    32(R8),X'20'         COPY FUNCTION INVOKED?
         BO    RTNREC               YES
         MVC   62(6,R6),=X'948599878584'          C'MERGED'
         TM    32(R8),X'40'         MERGE FUNCTION INVOKED?
         BO    RTNREC               YES
         MVC   62(14,R6),=X'A29699A385844089954083969985' SORTED INCORE
         ICM   R1,15,26(R8)         LOAD USED WORK FILE TRACK COUNT
         BZ    RTNREC               ZERO SO IT WAS AN IN-CORE SORT
         CVD   R1,DOUBLE
         MVC   69(5,R6),ED5
         ED    68(6,R6),DOUBLE+5
         MVC   74(6,R6),=X'40A692E39992'    C' WKTRK'
         B     RTNREC
         DROP  R5                   SORTMG
         SPACE
         LTORG
         SPACE 3
         USING DASCRT,R5
DASCRT   DS    0H                  SMF RECORD TYPE 17
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(44,R6),40(R2)     DATA SET NAME
         CLI   90(R2),C' '          VOLUME SERIAL NUMBER BLANK?
         BE    RTNREC               YES, DON'T OVERWRITE DSN CHARS
         MVC   74(6,R6),90(R2)      FIRST VOLUME SERIAL NUMBER
         B     RTNREC
         DROP  R5                   DASCRT
         SPACE
         LTORG
         SPACE 3
         USING RENAME,R5
RENAME   DS    0H                  SMF RECORD TYPE 18
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(44,R6),40(R2)     OLD DATA SET NAME
         CLI   134(R2),C' '         VOLUME SERIAL NUMBER BLANK?
         BE    RTNREC               YES, DON'T OVERWRITE DSN CHARS
         MVC   74(6,R6),134(R2)     FIRST VOLUME SERIAL NUMBER
         B     RTNREC
         DROP  R5                   RENAME
         SPACE
         LTORG
         SPACE 3
         USING DASVOL,R5
DASVOL   DS    0H                  SMF RECORD TYPE 19
         MVC   25(6,R6),16(R2)      VOLUME SERIAL NUMBER
         MVC   DOUBLE(2),60(R2)
         BAL   R14,CONV
         MVC   32(4,R6),DOUBLE      4-CHAR CHANNEL-UNIT ADDRESS
         CLI   32(R6),C'0'          LEADING ZERO?
         BNE   CUA19OK              NO
         MVI   32(R6),C' '          YES, NOT ANY MORE
CUA19OK  MVC   DOUBLE(2),32(R2)
         BAL   R14,CONV
         MVC   37(4,R6),DOUBLE      UCBTYP 1ST WORD
         MVC   DOUBLE(2),34(R2)
         BAL   R14,CONV
         MVC   41(4,R6),DOUBLE      UCBTYP 2ND WORD
         MVC   47(5,R6),=X'C69985857A'     C'FREE:'
         SR    R1,R1
         ICM   R1,3,44(R2)          FREE DSCBS
         CVD   R1,DOUBLE
         MVC   53(5,R6),ED5
         ED    52(6,R6),DOUBLE+5
         ICM   R1,3,48(R2)          FREE CYLINDERS
         CVD   R1,DOUBLE
         MVC   59(5,R6),ED5
         ED    58(6,R6),DOUBLE+5
         MVC   64(2,R6),=X'834E'    (CYLINDERS PLUS)
         ICM   R1,3,50(R2)          FREE TRACKS (ADDITIONAL)
         CVD   R1,DOUBLE
         MVC   67(5,R6),ED5
         ED    66(6,R6),DOUBLE+5
         MVI   72(R6),X'A3'         (TRACKS)
         ICM   R1,3,56(R2)          FREE EXTENTS
         CVD   R1,DOUBLE
         MVC   74(5,R6),ED5
         ED    73(6,R6),DOUBLE+5
         MVI   79(R6),X'A7'         (EXTENTS)
         B     RTNREC
         DROP  R5                   DASVOL
         SPACE
         LTORG
         SPACE 3
         USING NEWJOB,R5
NEWJOB   DS    0H                  SMF RECORD TYPE 20
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(20,R6),40(R2)     PROGRAMMER NAME
         SR    R1,R1
         ICM   R1,3,38(R2)          OFFSET TO RACF SECTION
         LA    R1,2(R1,R2)          POINT TO RACF SECTION
         OC    55(8,R6),8(R1)       RACF USER ID     (DON'T SHOW NULLS)
         OC    63(8,R6),0(R1)       RACF GROUP ID    (  "    "     "  )
         OC    72(8,R6),16(R1)      TERMINAL NAME    (  "    "     "  )
         B     RTNREC
         DROP  R5                   NEWJOB
         SPACE
         LTORG
         SPACE 3
         USING ERSTAT,R5
ERSTAT   DS    0H                  SMF RECORD TYPE 21
         OC    25(6,R6),16(R2)      VOLUME SERIAL NUMBER
         MVC   DOUBLE(2),22(R2)                   (NULLS IF NO TAPE)
         BAL   R14,CONV
         MVC   32(4,R6),DOUBLE      4-CHAR CHANNEL-UNIT ADDRESS
         LA    R11,36(,R6)          POINT TO DENSITY DISPLAY SLOT
         LA    R3,44                GET REMAINING DISPLAY AREA LENGTH
         CLI   32(R6),C'0'          LEADING ZERO?
         BNE   CUA21OK              NO
         MVC   32(4,R6),33(R6)      YES, NOT ANY MORE
         BCTR  R11,0                POINT TO NEW DENSITY DISPLAY SLOT
         LA    R3,1(,R3)            GET REMAINING DISPLAY AREA LENGTH
CUA21OK  LA    R0,5                 GET LENGTH OF DENSITY DISPLAY SLOT
         MVC   1(4,R11),=C' 200'
         CLI   39(R2),X'03'
         BE    GOTDENS
         MVC   1(4,R11),=C' 556'
         CLI   39(R2),X'43'
         BE    GOTDENS
         MVC   1(4,R11),=C' 800'
         CLI   39(R2),X'83'
         BE    GOTDENS
         MVC   1(4,R11),=C'1600'
         CLI   39(R2),X'C3'
         BE    GOTDENS
         CLI   39(R2),X'42'         HANDLE BRAZILIAN 3424
         BE    GOTDENS
         MVC   1(4,R11),=C'6250'
         CLI   39(R2),X'D3'
         BE    GOTDENS
         CLI   39(R2),X'C2'         HANDLE BRAZILIAN 3424
         BE    GOTDENS
         MVC   1(4,R11),0(R11)      BLANK FOR UNKNOWN DENSITY
         B     DONEDENS
GOTDENS  AR    R11,R0               POINT TO NEXT DISPLAY SLOT
         SR    R3,R0                REDUCE DISPLAY AREA LEFT
*  LITERALS SHOWN BESIDE NUMERIC VALUES ON THE DISPLAY LINE ARE
*  DERIVED FROM THE SMF RECORD FIELD NAME WITHOUT THE 'SMF21' PREFIX.
DONEDENS SR    R1,R1
         LA    R15,=X'A399'         C'TR'
         ICM   R1,1,28(R2)          TEMPORARY READ ERRORS
         BAL   R14,ESV1BYT
         LA    R15,=X'A3A6'         C'TW'
         ICM   R1,1,29(R2)          TEMPORARY WRITE ERRORS
         BAL   R14,ESV1BYT
         LA    R15,=X'9799'         C'PR'
         ICM   R1,1,32(R2)          PERMANENT READ ERRORS
         BAL   R14,ESV1BYT
         LA    R15,=X'97A6'         C'PW'
         ICM   R1,1,33(R2)          PERMANENT WRITE ERRORS
         BAL   R14,ESV1BYT
         LA    R15,=X'9582'         C'NB'
         ICM   R1,1,34(R2)          NOISE BLOCKS
         BAL   R14,ESV1BYT
         LA    R15,=X'A28996'       C'SIO'
         ICM   R1,3,30(R2)          START I/O (SSCH) COUNT
         BAL   R14,ESV2BYT
         LA    R15,=X'859987'       C'ERG'
         ICM   R1,3,35(R2)          ERASE GAPS
         BAL   R14,ESV2BYT
         LA    R15,=X'839395'       C'CLN'
         ICM   R1,3,37(R2)          CLEANER ACTIONS
         BAL   R14,ESV2BYT
         LA    R15,=X'8293A2'       C'BLS'
         ICM   R1,3,40(R2)          BLOCK SIZE
         BAL   R14,ESV2BYT
         CLI   15(R2),44            MODERN RECORD?
         BL    CARTOKAY             NO, DOESN'T HAVE 3480 STUFF
         LA    R15,=X'A39986'       C'TRF'
         ICM   R1,3,46(R2)          TEMPORARY READ FORWARD ERRORS
         BAL   R14,ESV2BYT
         LA    R15,=X'A39982'       C'TRB'
         ICM   R1,3,48(R2)          TEMPORARY READ BACKWARD ERRORS
         BAL   R14,ESV2BYT
         LA    R15,=X'A3A686'       C'TWF'
         ICM   R1,3,46(R2)          TEMPORARY WRITE ERRORS
         BAL   R14,ESV2BYT
         LA    R15,=X'928299948299' C'KBRMBR'
         ICM   R1,7,52(R2)          4K BYTES READ
         BAL   R14,ESV3BYT
         LA    R15,=X'9282A69482A6' C'KBWMBW'
         ICM   R1,7,55(R2)          4K BYTES WRITTEN
         BAL   R14,ESV3BYT
CARTOKAY CH    R3,=H'9'             ENOUGH LEFT FOR TAPE DRIVE SERIAL?
         BL    RTNREC               NO, SO EXIT
         ICM   R1,7,43(R2)          TAPE UNIT SERIAL
         BZ    RTNREC               SUPPRESS DISPLAY OF ZERO
         SLL   R1,4                 MAKE ROOM FOR SIGN
         STCM  R1,7,DOUBLE+5        (LEADING NIBBLE USUALLY ZERO)
         OI    DOUBLE+7,X'0F'       GET A GOOD SIGN FOR UNPACK
         UNPK  72(5,R6),DOUBLE+5(3) HANDLE NON-DECIMAL SERIAL NUMBER
         TR    72(5,R6),HEXCHARS-240
         MVC   77(3,R6),=X'A3A4A2'  C'TUS'
         B     RTNREC
         SPACE
ESV3BYT  BZR   R14                  SUPPRESS DISPLAY OF ZERO COUNTER
         CLM   R1,6,=H'3'           WILL KILOBYTES FIT IN FIVE DIGITS?
         BNH   ESVKBYT              YES, SHOW KILOBYTES
         LA    R15,3(,R15)          NO, SHOW MEGABYTES LABEL
         SRL   R1,8                 CONVERT FROM 4K BYTES TO MEGABYTES
         B     ESV2BYT
ESVKBYT  SLL   R1,2                 CONVERT FROM 4K BYTES TO KILOBYTES
         SPACE
ESV2BYT  BZR   R14                  SUPPRESS DISPLAY OF ZERO COUNTER
         LA    R0,9                 DISPLAY AREA LENGTH REQUIRED
         CR    R3,R0                ENOUGH LEFT?
         BL    RTNREC               NO, SO EXIT
         CVD   R1,DOUBLE            NON-ZERO COUNTER SO SHOW IT
         MVC   1(5,R11),ED5
         ED    0(6,R11),DOUBLE+5    LOAD COUNTER VALUE
         MVC   6(3,R11),0(R15)      LOAD DESCRIBING LITERAL
         SR    R3,R0                REDUCE DISPLAY AREA LEFT
         AR    R11,R0               POINT TO NEXT DISPLAY SLOT
         BR    R14                  RETURN TO CALLER
         SPACE
ESV1BYT  BZR   R14                  SUPPRESS DISPLAY OF ZERO COUNTER
         LA    R0,6                 DISPLAY AREA LENGTH REQUIRED
         CR    R3,R0                ENOUGH LEFT?
         BL    RTNREC               NO, SO EXIT
         CVD   R1,DOUBLE            NON-ZERO COUNTER SO SHOW IT
         MVC   1(3,R11),ED3
         ED    0(4,R11),DOUBLE+6    LOAD COUNTER VALUE
         MVC   4(2,R11),0(R15)      LOAD DESCRIBING LITERAL
         SR    R3,R0                REDUCE DISPLAY AREA LEFT
         AR    R11,R0               POINT TO NEXT DISPLAY SLOT
         BR    R14                  RETURN TO CALLER
         DROP  R5                   ERSTAT
         SPACE
         LTORG
         SPACE 3
         USING CONFIG,R5
CONFIG   DS    0H                  SMF RECORD TYPE 22
         SR    R1,R1
         ICM   R1,3,14(R2)          RECORD CREATOR INDICATOR
         CVD   R1,DOUBLE            CALL IT SUBTYPE (VARY TYPE)
         MVC   33(3,R6),ED3
         ED    32(4,R6),DOUBLE+6
         MVC   25(7,R6),SUBTYPE
         B     RTNREC
         DROP  R5                   CONFIG
         SPACE
         LTORG
         SPACE 3
         USING SMFSTA,R5
SMFSTA   DS    0H                  SMF RECORD TYPE 23
         MVC   25(8,R6),44(R2)      PRODUCT NAME
         ICM   R1,15,62(R2)         NUMBER OF BUFFERS WRITTEN
         CVD   R1,DOUBLE
         MVC   36(11,R6),ED11
         ED    35(12,R6),DOUBLE+2
         MVC   48(7,R6),=X'82A486868599A2'  C'BUFFERS'
         ICM   R1,15,74(R2)         NUMBER OF RECORDS WRITTEN
         CVD   R1,DOUBLE
         MVC   56(11,R6),ED11
         ED    55(12,R6),DOUBLE+2
         MVC   68(7,R6),=X'998583969984A2'  C'RECORDS'
         B     RTNREC
         DROP  R5                   SMFSTA
         SPACE
         LTORG
         SPACE 3
         USING OFFLOD,R5
OFFLOD   DS    0H                  SMF RECORD TYPE 24
         LA    R1,4
         CLM   R1,3,18(R2)          SUBTYPE HIGHER THAN 4?
         BL    UNUSED               YES, UNKNOWN SUBTYPE
         ICM   R1,3,18(R2)          LOAD THE SUBTYPE
         BNP   UNUSED               UNKNOWN SUBTYPE IF NEGATIVE OR ZERO
         BCTR  R1,0
         SLL   R1,1                 GET INDEX
*NO-HL   LA    R1,=C'JTJRSTSR'(R1)  POINT TO CORRECT SUBTYPE LABEL
         LA    R15,=C'JTJRSTSR'                               GYP93274
         ALR   R1,R15                                         GYP93274
         MVC   58(2,R6),0(R1)       DISPLAY IT
         MVC   25(4,R6),14(R2)      LOAD SUBSYSTEM NAME
         ICM   R1,3,38(R2)          ANY GENERAL SECTION(S)?
         BZ    RTNREC               NO, THAT SEEMS A BIT ODD
         ICM   R1,15,32(R2)         YES, GET ITS OFFSET FROM THE RDW
         LA    R1,0(R1,R2)          POINT 4 BYTES INTO GENERAL SECTION
         MVC   30(8,R6),0(R1)       LOAD THE JOB NAME
         MVC   39(8,R6),8(R1)       LOAD THE ORIGINAL JOB NUMBER
         MVC   47(2,R6),=C'->'      INDICATE POSSIBLE CHANGE
         MVC   49(8,R6),16(R1)      LOAD THE CURRENT JOB NUMBER
         ICM   R0,15,72(R1)         LOAD THE XMIT/RECEIVE RECORD COUNT
         CLI   58(R6),C'S'          SYSOUT DATA SET PROCESSING?
         BNE   OFFLD#OK             NO, USE THIS RECORD COUNT
         ICM   R1,3,46(R2)          YES, ANY SYSOUT SECTION(S)?
         BZ    OFFLD#OK             NO, THAT SEEMS A BIT ODD
         ICM   R1,15,40(R2)         YES, GET ITS OFFSET FROM THE RDW
         LA    R1,0(R1,R2)          POINT 4 BYTES INTO SYSOUT SECTION
         ICM   R0,15,52(R1)         LOAD SYSOUT DATA SET RECORD COUNT
OFFLD#OK CVD   R0,DOUBLE            MAKE IT DECIMAL
         MVC   61(11,R6),ED11       LOAD EDIT MASK
         ED    60(12,R6),DOUBLE+2   DISPLAY THE RECORD COUNT
         MVC   73(7,R6),=X'998583969984A2'  C'RECORDS'
         B     RTNREC
         DROP  R5                   OFFLOD
         SPACE
         LTORG
         SPACE 3
         USING JES3AL,R5
JES3AL   DS    0H                  SMF RECORD TYPE 25
         MVC   25(8,R6),14(R2)      JOB NAME
         ICM   R1,15,64(R2)         NUMBER OF TAPES MOUNTED
         CVD   R1,DOUBLE
         MVC   36(7,R6),ED7
         ED    35(8,R6),DOUBLE+4
         MVC   44(5,R6),=X'A3819785A2'      C'TAPES'
         ICM   R1,15,68(R2)         NUMBER OF DISKS MOUNTED
         CVD   R1,DOUBLE
         MVC   51(7,R6),ED7
         ED    52(8,R6),DOUBLE+4
         MVC   61(5,R6),=X'8489A292A2'      C'DISKS'
         B     RTNREC
         DROP  R5                   JES3AL
         SPACE
         LTORG
         SPACE 3
         USING PURGE,R5
PURGE    DS    0H                  SMF RECORD TYPE 26
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(8,R6),56(R2)      JOB NUMBER
         MVC   43(8,R6),92(R2)      LOGICAL READER NAME
         MVC   52(1,R6),84(R2)      MESSAGE CLASS
         MVC   54(1,R6),85(R2)      JOB CLASS
         OC    56(20,R6),64(R2)     PROGRAMMER NAME  (DON'T SHOW NULLS)
         OC    76(4,R6),104(R2)     ROOM NUMBER      (DON'T SHOW NULLS)
         B     RTNREC
         DROP  R5                   PURGE
         SPACE
         LTORG
         TITLE 'SMF RECORD TYPE 30 SUBROUTINE'
         USING CMNASW,R5
CMNASW   DS    0H                  SMF RECORD TYPE 30
         LR    R3,R2                COPY RECORD ADDRESS
         LA    R1,4
         SLR   R3,R1                POINT TO LOGICAL RDW OF SMF RECORD
         ICM   R7,15,24(R3)         GET OFFSET TO SUBSYSTEM SECTION
         ALR   R7,R3                POINT TO SUBSYSTEM SECTION
         SLR   R1,R1
         ICM   R1,3,0(R7)           LOAD RECORD 30 SUBTYPE
         CH    R1,=H'9'             FUNNY SUBTYPE?
         BH    UNUSED               YES, ATTEMPT TO SHOW IT
         STC   R1,3(,R6)            SHOW RECORD 30 SUBTYPE
*        NI    3(R6),X'0F'          ENSURE SUBTYPE LESS THAN 16
*        TR    3(1,R6),HEXCHARS     CATER FOR SUBTYPE UP TO 15
         OI    3(R6),X'F0'          CATER FOR SUBTYPE UP TO 9
         ICM   R7,15,32(R3)         GET OFFSET TO ID SECTION
         ALR   R7,R3                POINT TO IDENTIFICATION SECTION
         MVC   25(8,R6),0(R7)       JOB NAME
         SLL   R1,2                 GET SUBTYPE BRANCH INDEX
         ICM   R8,3,102(R3)         TEST IF EXCP SECTION PRESENT
         BZ    RC30TYPE(R1)         PROCESS SUBTYPE IF NOT
         BAL   R8,PAGECALC          CALCULATE LEFT/RIGHT PAGE NUMBER
         BZ    RC30TYPE(R1)         PROCESS SUBTYPE IF MAX(ISH) LEFT
         CLM   R0,3,102(R3)         COMPARE PAGE NUMBER TO DD COUNT
         BH    LEFTMSG              SCROLLED TOO FAR RIGHT FOR DATA
         SLR   R8,R8
         ICM   R8,3,100(R3)         GET EXCP SECTION LENGTH
         ICM   R7,15,96(R3)         GET OFFSET TO FIRST EXCP SECTION
         ALR   R7,R3                POINT TO FIRST EXCP SECTION
EXCPLOOP ALR   R7,R8                POINT TO NEXT EXCP SECTION
         BCT   R0,EXCPLOOP
         SLR   R7,R8                BACK UP ONE
         ICM   R14,15,0(R7)         IS IT A JES OR DUMMY FILE?
         BZ    JESDMY30             YES
         TM    0(R2),X'06'          OS/VS2 MVS/XA OR LATER?
         BO    VIOXA030             YES, USE THE XA VIO TEST
         CLC   =X'00000FFF',0(R7)   IS IT VIO?
         BE    ISVIO030             YES
VIOXA030 CLC   =X'00007FFF',0(R7)   IS IT VIO? (XA)
         BE    ISVIO030             YES
NONVIO30 MVC   DOUBLE(2),0(R7)      DEVICE CLASS AND UNIT TYPE
         BAL   R14,CONV
         MVC   34(4,R6),DOUBLE
         MVC   DOUBLE(2),2(R7)      DEVICE NUMBER
         BAL   R14,CONV
         MVC   39(4,R6),DOUBLE
         CLI   39(R6),C'0'          LEADING ZERO?
         BNE   NOTVIO30             NO
         MVI   39(R6),C' '          YES, NOT ANY MORE
         B     NOTVIO30
JESDMY30 MVC   34(9,R6),=C'-JES/DMY-'
         ICM   R1,15,12(R7)         EXCP COUNT
         BZ    DDNAME30             SUPPRESS PROBABLY MISLEADING ZERO
         B     EXCPCT30             HANDLE IF IBM EVER KEEPS COUNT
ISVIO030 MVC   34(9,R6),=C'---VIO---'
NOTVIO30 ICM   R1,15,12(R7)         EXCP COUNT
EXCPCT30 CVD   R1,DOUBLE
         MVC   52(9,R6),ED9
         ED    51(10,R6),DOUBLE+3
DDNAME30 OC    44(8,R6),4(R7)       DDNAME (SUPPRESS NULLS FOR CATALOG)
         ICM   R1,12,16(R7)         BLKSIZE
         BZ    NULBLK30             SUPPRESS 'BLK=00000'
         SLL   R1,1                 SHIFT OFF SIGN BIT
         SRL   R1,17                SCALE DOWN TO UNITS
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'       GET A GOOD SIGN FOR UNPACK
         MVC   62(4,R6),=C'BLK='
         UNPK  66(5,R6),DOUBLE+5(3)
NULBLK30 TM    0(R2),X'06'          OS/VS2 MVS/XA OR LATER?
         BNO   RTNREC               NO, SO NO CHANNEL CONNECT TIME
         SLR   R0,R0
         ICM   R1,15,18(R7)         CHANNEL CONNECT TIME
         BZ    RTNREC               OMIT DISPLAY IF ABSOLUTELY ZERO
         SLDL  R0,7                 CONVERT TO MICROSECONDS
         D     R0,=F'10000'         CONVERT TO CENTISECONDS
         C     R1,=F'1000'          CONNECT TIME LESS THAN 10 SECONDS?
         BL    SMALIO30             YES, SHOW SECONDS
         LA    R15,72(,R6)          NO, SHOW HOURS, MINUTES AND SECONDS
         BAL   R14,TIMEX
         B     RTNREC               END OF EXCP DD FORMATTING
SMALIO30 MVC   72(8,R6),=X'214B2020A28583A2' EDIT MASK + C'SECS'
         CVD   R1,DOUBLE
         ED    71(5,R6),DOUBLE+6
         OI    72(R6),X'F0'         ENSURE LEADING DIGIT
         B     RTNREC               END OF EXCP DD FORMATTING
RC30TYPE B     RTNREC               SUBTYPE 0 - INVALID
         B     NEWJOB30             SUBTYPE 1 - JOB START
         B     INTRVL30             SUBTYPE 2 - INTERVAL
         B     INTRVL30             SUBTYPE 3 - STEP TERMINATION
         B     STPEND30             SUBTYPE 4 - STEP TOTAL
         B     JOBEND30             SUBTYPE 5 - JOB END
         B     INTRVL30             SUBTYPE 6 - SYSTEM ADDRESS SPACE
         B     RTNREC               SUBTYPE 7 - INVALID
         B     RTNREC               SUBTYPE 8 - INVALID
         B     RTNREC               SUBTYPE 9 - INVALID
NEWJOB30 MVC   34(8,R6),32(R7)      JOB NUMBER
         OC    53(1,R6),42(R7)      JOB CLASS   (NULLS FOR SYSTEM A.S.)
         OC    55(8,R6),108(R7)     RACF USER ID     (NULLS IF NO RACF)
         OC    63(8,R6),100(R7)     RACF GROUP ID    (  "   "  "   "  )
         MVC   72(8,R6),116(R7)     RACF TERMINAL ID
         CLI   72(R6),0             WERE NULLS COPIED?
         BNE   RTNREC               NO, DISPLAY LINE FULL
         MVC   72(8,R6),80(R7)      YES, SHOW SOME OF PROGRAMMER NAME
         B     RTNREC               END OF JOB START PROCESSING
INTRVL30 MVC   34(8,R6),32(R7)      JOB NUMBER
         OC    43(8,R6),16(R7)      STEP NAME     (INITIATOR HAS NULLS)
         ICM   R0,3,62(R3)          PROCESSOR SECTION PRESENT?
         BZ    INTRVLIO             NO, CAN'T REPORT CPU TIME
         ICM   R7,15,56(R3)         GET OFFSET TO PROCESSOR SECTION
         ALR   R7,R3                POINT TO PROCESSOR SECTION
         ICM   R1,15,4(R7)          GET STEP TCB TIME
         ICM   R0,15,8(R7)          GET STEP SRB TIME
         AR    R1,R0                ADD IT
         ICM   R0,15,12(R7)         GET INITIATOR TCB TIME
         AR    R1,R0                ADD IT
         ICM   R0,15,16(R7)         GET INITIATOR SRB TIME
         AR    R1,R0                ADD IT
         MVC   52(4,R6),=C'CPU-'
         LA    R15,56(,R6)
         BAL   R14,TIMEX            LOAD CPU HH:MM:SS
INTRVLIO ICM   R1,3,46(R3)          I/O ACTIVITY SECTION PRESENT?
         BZ    RTNREC               NO, NO CAN'T REPORT EXCP COUNT
         ICM   R1,15,40(R3)         OFFSET TO I/O ACTIVITY SECTION
         ALR   R1,R3                POINT TO I/O ACTIVITY SECTION
         ICM   R1,15,4(R1)          TOTAL BLOCKS TRANSFERRED
         CVD   R1,DOUBLE
         MVC   65(4,R6),=C'I/O-'
         MVC   69(11,R6),ED11
         ED    68(12,R6),DOUBLE+2
         B     RTNREC
STPEND30 MVI   34(R6),C'#'
         SLR   R8,R8
         ICM   R8,3,40(R7)          STEP NUMBER
         CVD   R8,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  35(3,R6),DOUBLE+6(2)
         OC    39(8,R6),16(R7)      STEP NAME     (INITIATOR HAS NULLS)
         MVC   48(8,R6),8(R7)       PROGRAM NAME
         ICM   R8,3,44(R7)          PERFORMANCE GROUP NUMBER
         CVD   R8,DOUBLE
         MVC   77(3,R6),ED3
         ED    76(4,R6),DOUBLE+6
         MVC   74(3,R6),=X'D78795'  C'PGN'
         ICM   R0,3,54(R3)          COMPLETION SECTION PRESENT?
         BZ    RTNREC               NO
         ICM   R7,15,48(R3)         GET OFFSET TO COMPLETION SECTION
         ALR   R7,R3                POINT TO COMPLETION SECTION
         LA    R1,2(,R7)            POINT TO RC/CC INDICATOR
         SR    R0,R0                CLEAR REGISTER
         ICM   R0,3,0(R7)           GET RC/CC
         LA    R15,65(,R6)          POINT TO END/ABEND CODE AREA
         BAL   R14,CCRCCOMP         COMPUTE RC/CC
         B     RTNREC
JOBEND30 MVC   34(8,R6),32(R7)      JOB NUMBER
         ICM   R1,15,80(R3)         OFFSET TO PERFORMANCE SECTION
         ALR   R1,R3                POINT TO PERFORMANCE SECTION
         ICM   R1,15,32(R1)         TOTAL TRANSACTIONS
         BNZ   TSOEND30             NON-ZERO SO FORMAT FOR TSO
         OC    43(1,R6),42(R7)      JOB CLASS   (NULLS FOR SYSTEM A.S.)
         OC    45(8,R6),108(R7)     RACF USER ID     (NULLS IF NO RACF)
         MVC   54(20,R6),80(R7)     PROGRAMMER NAME
         ICM   R0,3,94(R3)          OPERATOR SECTION PRESENT?
         BZ    RTNREC               NO
         ICM   R7,15,88(R3)         GET OFFSET TO OPERATOR SECTION
         ALR   R7,R3                POINT TO OPERATOR SECTION
         ICM   R0,15,8(R7)          GET NON-SPECIFIC TAPE MOUNT COUNT
         ICM   R1,15,12(R7)         GET SPECIFIC TAPE MOUNT COUNT
         AR    R1,R0                GET TOTAL TAPE MOUNT COUNT
         BZ    RTNREC               SKIP IT IF ZERO
         CVD   R1,DOUBLE
         MVC   75(3,R6),ED3
         ED    74(4,R6),DOUBLE+6
         MVC   78(2,R6),=X'94A3'    C'MT'   DENOTE MAG TAPE MOUNTS
         B     RTNREC
TSOEND30 CVD   R1,DOUBLE
         MVC   73(5,R6),ED5
         ED    72(6,R6),DOUBLE+5
         MVC   78(2,R6),=X'A795'    C'XN'
         OC    43(8,R6),116(R7)     RACF TERMINAL ID
         ICM   R1,15,40(R3)         OFFSET TO I/O ACTIVITY SECTION
         ALR   R1,R3                POINT TO I/O ACTIVITY SECTION
         ICM   R8,15,8(R1)          NUMBER OF TPUTS
         CVD   R8,DOUBLE
         MVC   53(5,R6),ED5
         ED    52(6,R6),DOUBLE+5
         MVC   58(4,R6),=X'A397A4A3'     C'TPUT'
         ICM   R8,15,12(R1)         NUMBER OF TGETS
         CVD   R8,DOUBLE
         MVC   63(5,R6),ED5
         ED    62(6,R6),DOUBLE+5
         MVC   68(4,R6),=X'A38785A3'     C'TGET'
         B     RTNREC
         DROP  R5                   CMNASW
         SPACE
         LTORG
         TITLE 'SMF RECORD TYPE SUBROUTINES'
         USING TIOCIN,R5
TIOCIN   DS    0H                  SMF RECORD TYPE 31
         MVC   25(4,R6),=C'TIOC'
         B     RTNREC
         DROP  R5                   TIOCIN
         SPACE
         LTORG
         SPACE 3
         USING TSSTEP,R5
TSSTEP   DS    0H                  SMF RECORD TYPE 34
         MVC   25(8,R6),14(R2)      JOB NAME
         MVI   34(R6),C'#'
         SR    R8,R8
         IC    R8,38(R2)            STEP NUMBER
         CVD   R8,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  35(3,R6),DOUBLE+6(2)
         MVC   39(8,R6),62(R2)      STEP NAME
         MVC   48(8,R6),54(R2)      PROGRAM NAME
         LA    R1,83(,R2)           POINT TO RC/CC INDICATOR
         SR    R0,R0                CLEAR REGISTER
         ICM   R0,3,51(R2)          GET RC/CC
         LA    R15,65(,R6)          POINT TO END/ABEND CODE AREA
         BAL   R14,CCRCCOMP         COMPUTE RC/CC
         B     RTNREC
         DROP  R5                   TSSTEP
         SPACE
         LTORG
         SPACE 3
         USING LOGOFF,R5
LOGOFF   DS    0H                  SMF RECORD TYPE 35
         MVC   25(8,R6),14(R2)      JOB NAME
         ICM   R1,15,43(R2)         NUMBER OF TPUTS
         CVD   R1,DOUBLE
         MVC   35(5,R6),ED5
         ED    34(6,R6),DOUBLE+5
         MVC   41(5,R6),=X'A397A4A3A2'      C'TPUTS'
         ICM   R1,15,47(R2)         NUMBER OF TGETS
         CVD   R1,DOUBLE
         MVC   48(5,R6),ED5
         ED    47(6,R6),DOUBLE+5
         MVC   54(5,R6),=X'A38785A3A2'      C'TGETS'
         ICM   R1,15,84(R2)         NUMBER OF TRANSACTIONS
         CVD   R1,DOUBLE
         MVC   61(5,R6),ED5
         ED    60(6,R6),DOUBLE+5
         MVC   67(6,R6),=X'A78183A395A2'    C'XACTNS'
         B     RTNREC
         DROP  R5                   LOGOFF
         SPACE
         LTORG
         SPACE 3
         USING DDYNAM,R5
DDYNAM   DS    0H                  SMF RECORD TYPE 40
         MVC   25(8,R6),14(R2)      JOB NAME
         SR    R7,R7
         ICM   R7,3,60(R2)          GET VARIABLE LENGTH
         SRA   R7,3                 DIVIDE BY 8 FOR NUMBER OF ENTRIES
         CH    R7,=H'3'             MORE THAN 3 DEVICES?
         BNH   DALCOK               NO
         LA    R7,3                 YES, ONLY ROOM FOR 3
DALCOK   LA    R3,19(,R6)
         LA    R11,54(,R2)
DALCLOOP LA    R3,15(,R3)           NEXT MESSAGE LINE SLOT
         LA    R11,8(,R11)          NEXT SMF RECORD DEVICE ENTRY
         ICM   R1,15,4(R11)         EXCP COUNT
         CVD   R1,DOUBLE
         MVC   1(9,R3),ED9
         ED    0(10,R3),DOUBLE+3
         MVC   11(3,R3),=C'VIO'
         TM    0(R2),X'06'          OS/VS2 MVS/XA OR LATER?
         BO    VIOXA040             YES, USE THE XA VIO TEST
         CLC   =X'00000FFF',0(R11)  IS IT VIO?
         BE    DALCVIO              YES
VIOXA040 CLC   =X'00007FFF',0(R11)  IS IT VIO? (XA)
         BE    DALCVIO              YES
         MVC   DOUBLE(2),2(R11)     (4-CHAR ADDRESS REPORTED)
         BAL   R14,CONV
         MVC   11(4,R3),DOUBLE
DALCVIO  DS    0H
         BCT   R7,DALCLOOP
         B     RTNREC
         DROP  R5                   DDYNAM
         SPACE
         LTORG
         SPACE 3
         USING JES2ST,R5
JES2ST   DS    0H                  SMF RECORD TYPE 43
         MVC   25(17,R6),MSG043A
         CLI   15(R2),X'05'         JES3?
         BNE   JES2S                NO
         MVC   25(4,R6),34(R2)      YES, SUPPLY ACTUAL PROCEDURE NAME
         TM    22(R2),X'40'         WARM START?
         BO    RTNREC               YES
         MVC   30(4,R6),=X'83969384'   C'COLD'
         TM    22(R2),X'80'         COLD START?
         BO    RTNREC               YES
         MVC   30(4,R6),=X'408896A3'   C' HOT'
         TM    22(R2),X'20'         HOT START?
         BO    RTNREC               YES
         MVC   30(4,R6),=X'83969693'   C'COOL'       (SARKY FOR DUNNO)
         B     RTNREC
JES2S    TM    22(R2),X'80'         $E SYS?
         BZ    SJ2                  NO
         MVC   25(13,R6),=C'$E SYS,RESET='
         MVC   38(4,R6),24(R2)      RESET SID
         B     RTNREC
SJ2      TM    23(R2),X'40'         COLD START?
         BZ    RTNREC               NO
         MVC   30(4,R6),=X'83969384'   C'COLD'
         TM    23(R2),X'80'         SPOOL FORMATED
         BZ    RTNREC               NO
         MVC   43(21,R6),MSG043B
         B     RTNREC
         DROP  R5                   JES2ST
         SPACE
*        DC    C'JES2 WARM STARTED'
MSG043A  DC    C'JES2 ',X'A681999440A2A38199A38584'
*        DC    C'- SPOOL WAS FORMATTED'
MSG043B  DC    C'- SPOOL ',X'A681A2408696999481A3A38584'
         LTORG
         SPACE 3
         USING JESTOP,R5
JESTOP   DS    0H                  SMF RECORD TYPE 45
         MVC   25(14,R6),MSG045
         CLI   15(R2),X'05'         JES3?
         BNE   JES2P                NO
         MVI   28(R6),C'3'          YES
JES2P    TM    20(R2),X'80'         ABENDED?
         BZ    RTNREC               NO
         MVC   30(9,R6),=X'818285958485844060'       C'ABENDED -'
         SR    R0,R0                CLEAR REGISTER
         ICM   R0,3,22(R2)          GET RC/CC
         LA    R15,40(,R6)          POINT TO 'ABENDED' AREA
         BAL   R14,CCRCABND         COMPUTE RC/CC
         B     RTNREC
         DROP  R5                   JESTOP
         SPACE
*        DC    C'JES2 WITHDRAWN'
MSG045   DC    C'JES2 ',X'A689A388849981A695'
         LTORG
         SPACE 3
         USING RJEON,R5
RJEON    DS    0H                  SMF RECORD TYPE 47
         OC    25(8,R6),24(R2)      REMOTE NAME (IF CONNECTED)
         MVC   34(8,R6),32(R2)      LINE NAME
         MVC   43(8,R6),40(R2)      PASSWORD
         MVC   52(10,R6),=X'9389958540A2A38199A3'  C'LINE START'
         TM    21(R2),X'02'         START LINE?
         BO    RTNREC               YES
         MVC   52(10,R6),=X'D9D1C540A28987959695'  C'RJE SIGNON'
         B     RTNREC
         DROP  R5                   RJEON
         SPACE
         LTORG
         SPACE 3
         USING RJEOFF,R5
RJEOFF   DS    0H                  SMF RECORD TYPE 48
         OC    25(8,R6),24(R2)      REMOTE NAME (IF CONNECTED)
         MVC   34(8,R6),32(R2)      LINE NAME
         MVC   43(12,R6),=X'9389958540A2A39697978584' C'LINE STOPPED'
         TM    21(R2),X'02'         STOP LINE?
         BO    RJEEXCP              YES
         MVC   43(12,R6),=X'D9D1C540A289879596868640' C'RJE SIGNOFF '
RJEEXCP  MVC   56(3,R6),68(R2)      UCB NAME
         ICM   R1,15,48(R2)         EXCP COUNT
         CVD   R1,DOUBLE
         MVC   61(11,R6),ED11
         ED    60(12,R6),DOUBLE+2
         B     RTNREC
         DROP  R5                   RJEOFF
         SPACE
         LTORG
         SPACE 3
         USING RJEINT,R5
RJEINT   DS    0H                  SMF RECORD TYPE 49
         OC    25(8,R6),24(R2)      REMOTE NAME (IF CONNECTED)
         MVC   34(8,R6),32(R2)      LINE NAME
         MVC   43(8,R6),40(R2)      INVALID PASSWORD
         MVC   52(36,R6),50(R2)     MESSAGE TEXT
         B     RTNREC
         DROP  R5                   RJEINT
         SPACE
         LTORG
         SPACE 3
         USING ACFTUN,R5
ACFTUN   DS    0H                  SMF RECORD TYPE 50
         MVC   25(8,R6),14(R2)      INTELLIGENCE CONTROLLER NAME
         LR    R15,R2               COPY RECORD ADDRESS
         L     R1,16                POINT TO THE CVT
         CLI   116(R1),X'12'        OSIV/F4?
         BNE   REC50OK              NO, SHOULD BE SOME SORT OF MVS
         LA    R15,2(,R15)          YES, ADJUST BASE FOR VTAM-G OFFSETS
*                                   (FULLWORD ALIGNMENT BY FUJITSU)
REC50OK  ICM   R1,15,26(R15)        NUMBER OF WRITE CHANNEL PROGRAMS
         CVD   R1,DOUBLE
         MVC   35(7,R6),ED7
         ED    34(8,R6),DOUBLE+4
         MVC   43(2,R6),=X'A699'    C'WR'
         ICM   R1,15,30(R15)        NUMBER OF READ CHANNEL PROGRAMS
         CVD   R1,DOUBLE
         MVC   46(7,R6),ED7
         ED    45(8,R6),DOUBLE+4
         MVC   54(2,R6),=X'9984'    C'RD'
         ICM   R1,15,34(R15)        NUMBER OF ATTENTIONS RECEIVED
         CVD   R1,DOUBLE
         MVC   57(7,R6),ED7
         ED    56(8,R6),DOUBLE+4
         MVC   65(4,R6),=X'81A3A395'  C'ATTN'
         ICM   R1,15,54(R15)        NCP SLOWDOWN COUNT
         CVD   R1,DOUBLE
         MVC   70(3,R6),ED3
         ED    69(4,R6),DOUBLE+5
         MVC   74(6,R6),=X'A29396A68495' C'SLOWDN'
         B     RTNREC
         DROP  R5                   ACFTUN
         SPACE
         LTORG
         SPACE 3
         USING SNAON,R5
SNAON    DS    0H                  SMF RECORD TYPE 52
         OC    25(8,R6),34(R2)      REMOTE NAME (IF CONNECTED)
         MVC   34(8,R6),42(R2)      LINE NAME
         MVC   43(8,R6),50(R2)      LINE PASSWORD
         MVC   52(10,R6),=X'9389958540A2A38199A3'  C'LINE START'
         TM    27(R2),X'02'         START LINE?
         BO    RTNREC               YES
         MVC   52(10,R6),=X'E2D5C140939687969540'  C'SNA LOGON '
         B     RTNREC
         DROP  R5                   SNAON
         SPACE
         LTORG
         SPACE 3
         USING SNAOFF,R5
SNAOFF   DS    0H                  SMF RECORD TYPE 53
         OC    25(8,R6),34(R2)      REMOTE NAME (IF CONNECTED)
         MVC   34(8,R6),42(R2)      LINE NAME
         MVC   43(12,R6),=X'9389958540A2A39697978584' C'LINE STOPPED'
         TM    27(R2),X'02'         STOP LINE?
         BO    SNAVTAM              YES
         MVC   43(12,R6),=X'E2D5C1409396879686864040' C'SNA LOGOFF  '
SNAVTAM  MVC   56(3,R6),78(R2)      SNA NAME
         ICM   R1,15,58(R2)         VTAM REQUESTS PROCESSED
         CVD   R1,DOUBLE
         MVC   61(11,R6),ED11
         ED    60(12,R6),DOUBLE+2
         B     RTNREC
         DROP  R5                   SNAOFF
         SPACE
         LTORG
         SPACE 3
         USING SNAINT,R5
SNAINT   DS    0H                  SMF RECORD TYPE 54
         OC    25(8,R6),34(R2)      REMOTE NAME (IF CONNECTED)
         MVC   34(8,R6),42(R2)      LINE NAME
         MVC   43(8,R6),50(R2)      LINE PASSWORD
         B     RTNREC
         DROP  R5                   SNAINT
         SPACE
         LTORG
         SPACE 3
         USING VSMVDS,R5
VSMVDS   DS    0H                  SMF RECORD TYPE 60
         MVC   25(8,R6),46(R2)      JOB NAME
         MVC   34(40,R6),116(R2)    ENTRY NAME
         MVC   74(6,R6),82(R2)      VOLUME SERIAL NUMBER
         B     RTNREC
         DROP  R5                   VSMVDS
         SPACE
         LTORG
         SPACE 3
         USING ICFACT,R5
ICFACT   DS    0H                  SMF RECORD TYPES 61, 65 AND 66
         MVC   25(8,R6),46(R2)      JOB NAME
         MVC   34(44,R6),116(R2)    ENTRY NAME
         MVI   78(R6),C'-'          INDICATE TYPE RELATED TO NAME
         MVC   79(1,R6),115(R2)     ENTRY TYPE
         B     RTNREC
         DROP  R5                   ICFACT
         SPACE
         LTORG
         SPACE 3
         USING VSMOPN,R5
VSMOPN   DS    0H                  SMF RECORD TYPE 62
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(40,R6),92(R2)     COMPONENT OR CLUSTER NAME
         MVC   74(6,R6),138(R2)     FIRST VOLUME SERIAL NUMBER
         B     RTNREC
         DROP  R5                   VSMOPN
         SPACE
         LTORG
         SPACE 3
         USING VSMDEF,R5
VSMDEF   DS    0H                  SMF RECORD TYPE 63
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(44,R6),88(R2)     COMPONENT OR CLUSTER NAME
         B     RTNREC
         DROP  R5                   VSMDEF
         SPACE
         LTORG
         SPACE 3
         USING VSMUSE,R5
VSMUSE   DS    0H                  SMF RECORD TYPE 64
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(40,R6),84(R2)     COMPONENT OR CLUSTER NAME
         MVC   74(6,R6),144(R2)     FIRST VOLUME SERIAL NUMBER
         B     RTNREC
         DROP  R5                   VSMUSE
         SPACE
         LTORG
         SPACE 3
         USING VSMDEL,R5
VSMDEL   DS    0H                  SMF RECORD TYPE 67
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(44,R6),84(R2)     COMPONENT OR CLUSTER NAME
         B     RTNREC
         DROP  R5                   VSMDEL
         SPACE
         LTORG
         SPACE 3
         USING VSMREN,R5
VSMREN   DS    0H                  SMF RECORD TYPE 68
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(44,R6),82(R2)     OLD COMPONENT OR CLUSTER NAME
         B     RTNREC
         DROP  R5                   VSMREN
         SPACE
         LTORG
         TITLE 'RMF RECORD TYPE SUBROUTINES'
         USING RMFCPU,R5
RMFCPU   DS    0H                  SMF RECORD TYPE 70
         CLI   19(R2),1             SUBTYPE 1?
         BNE   RMFREC               NO
         BAL   R8,PAGECALC          CALCULATE LEFT/RIGHT PAGE NUMBER
         LR    R8,R0                SAVE THE ANSWER
         BAL   R14,RMFINTVL         GET MILLISECONDS IN RMF INTERVAL
         ICM   R7,15,36(R15)        GET OFFSET TO CPU CONTROL SECTION
         ALR   R7,R15               POINT TO CPU CONTROL SECTION
         UNPK  29(5,R6),0(3,R7)     SHOW CPU MODEL NUMBER
         MVI   33(R6),C' '          ERASE GARBAGE
         LTR   R0,R8                RESTORE RELATIVE PAGE NUMBER
         BZ    RIGHTMSG             PAGE ZERO SO NO DATA
         ICM   R8,3,50(R15)         GET CPU DATA SECTION COUNT
         CR    R0,R8                COMPARE PAGE NUMBER SECTION COUNT
         BH    RMFPRSM              TOO FAR RIGHT SO CHECK FOR PR/SM
         ICM   R8,3,48(R15)         GET CPU DATA SECTION LENGTH
         ICM   R7,15,44(R15)        GET OFFSET TO FIRST CPU SECTION
         ALR   R7,R15               POINT TO FIRST CPU DATA SECTION
RMFCPULP ALR   R7,R8                POINT TO NEXT CPU DATA SECTION
         BCT   R0,RMFCPULP
         SLR   R7,R8                BACK UP ONE
         ICM   R8,15,16(R7)         GET I/O COUNT VIA I/O SLIH
         ICM   R9,15,20(R7)         GET I/O COUNT VIA TPI INSTRUCTION
         ALR   R9,R8                GET TOTAL I/O COUNT FOR THIS CP
         M     R8,=F'10000'
         DR    R8,R1                GET I/O RATE FOR THIS CP
         CVD   R9,DOUBLE
         MVC   51(7,R6),=X'40202021204B20'
         ED    51(7,R6),DOUBLE+5
         MVC   59(4,R6),=X'899661A2'   C'IO/S'
         ICM   R8,15,0(R7)          GET HIGH HALF OF CPU WAIT TIME
         ICM   R9,15,4(R7)          GET LOW HALF OF CPU WAIT TIME
         SRDL  R8,12                CONVERT TO MICROSECONDS
         DR    R8,R1                GET CPU WAIT PERMILLAGE
         LA    R8,1000
         SR    R8,R9                GET CPU BUSY PERMILLAGE
         CVD   R8,DOUBLE
         TM    0(R2),X'01'          PR/SM MACHINE?
         BZ    RMFUTIL              NO
         ICM   R9,15,28(R15)        YES, GET RMF PRODUCT SECTION OFFSET
         ALR   R9,R15               POINT TO IT
         SLR   R0,R0
         ICM   R0,1,50(R9)          GET PR/SM PARTITION NO. OF THIS MVS
         BZ    RMFUTIL              ZERO, BUT SHOULD NOT HAPPEN
         CLM   R0,3,66(R15)         ENOUGH PR/SM SECTIONS IN RECORD?
         BH    RMFUTIL              NO, BUT THERE ALWAYS SHOULD BE
         ICM   R9,15,60(R15)        GET OFFSET TO PR/SM PART DATA SECTN
         ALR   R9,R15               POINT TO IT
         ICM   R8,3,64(R15)         GET PR/SM PART. DATA SECTION LENGTH
RMFPARTN ALR   R9,R8                POINT TO NEXT PART. DATA SECTION
         BCT   R0,RMFPARTN
         SLR   R9,R8                BACK UP ONE
         MVC   72(8,R6),0(R9)       SHOW PR/SM PART'N NAME OF THIS MVS
RMFUTIL  MVC   37(13,R6),=X'402021204B20206C4082A4A2A8' C'% BUSY'
         ICM   R9,15,38(R6)
         STCM  R9,15,39(R6)         EDIT EDIT MASK AFTER LITERAL REUSE
         ED    37(7,R6),DOUBLE+5
         MVC   37(1,R6),9(R7)       GET CPU NUMBER
         NI    37(R6),X'0F'         ENSURE VALID RANGE
         TR    37(1,R6),HEXCHARS    MAKE PRINTABLE
         MVC   34(3,R6),=C'CP#'
         B     RTNREC
RMFPRSM  CLI   25(R15),6            AT LEAST SIX TRIPLETS?
         BL    LEFTMSG              NO, PRE-PR/SM RMF
         TM    0(R2),X'01'          PR/SM MACHINE?
         BZ    LEFTMSG              NO
         SR    R0,R8                YES, GET PR/SM DISPLAY PAGE NUMBER
         SLR   R9,R9                CLEAR FOR INSERT
         SLR   R11,R11              CLEAR FOR INSERT
         ICM   R11,3,64(R15)        GET PR/SM PARTITION DATA SECT. LEN.
         ICM   R8,3,66(R15)         GET PR/SM PARTITION DATA SECT. CNT.
         BZ    LEFTMSG              NOT A PR/SM SYSTEM
         ICM   R7,15,60(R15)        GET OFFSET TO PARTITION DATA SECTN
         ALR   R7,R15               POINT TO IT
PRSMLOOP ICM   R9,3,10(R7)          GET PROCESSOR COUNT FOR PARTITION
         CR    R0,R9                DISPLAY FOR THIS PARTITION?
         BNH   PRSMHERE             YES
         SR    R0,R9                NO, ADJUST PAGES TO GO
         ALR   R7,R11               POINT TO NEXT PARTIT'N DATA SECTION
         BCT   R8,PRSMLOOP          TRY NEXT PARTITION
         B     LEFTMSG              SCROLLED TOO FAR RIGHT FOR DATA
PRSMHERE ICM   R9,15,12(R7)         GET LOG. PROC. DATA SECTS TO SKIP
         AR    R0,R9                GET SECTION NUMBER TO DISPLAY
         MVC   72(8,R6),0(R7)       DISPLAY LOGICAL PARTITION NAME
         CLM   R0,3,74(R15)         ENOUGH SECTIONS IN RECORD?
         BH    LEFTMSG              NO, BUT THIS SHOULD NOT HAPPEN
         ICM   R7,15,68(R15)        GET OFFSET TO LOG. PROC. DATA SECTN
         ALR   R7,R15               POINT TO IT
         ICM   R8,3,72(R15)         GET LOG. PROC. DATA SECTION LENGTH
RMFPRCLP ALR   R7,R8                POINT TO NEXT PROC. DATA SECTION
         BCT   R0,RMFPRCLP
         SLR   R7,R8                BACK UP ONE
         ICM   R8,15,0(R7)          GET HIGH HALF OF CPU DISPATCH TIME
         ICM   R9,15,4(R7)          GET LOW HALF OF CPU DISPATCH TIME
*                                   THIS IS IN MICROSECONDS
         DR    R8,R1                GET LOGICAL PROC. BUSY PERMILLAGE
         CVD   R9,DOUBLE             IN LOGICAL PARTITION
         B     RMFUTIL              DISPLAY CPU UTILIZATION
         DROP  R5                   RMFCPU
         SPACE
         LTORG
         SPACE 3
         USING RMFPAG,R5
RMFPAG   DS    0H                  SMF RECORD TYPE 71
         CLI   19(R2),1             SUBTYPE 1?
         BNE   RMFREC               NO
         ICM   R0,3,38(R2)          ANY PAGING DATA SECTION?
         BZ    RMFREC               NO, SKIP USUAL DETAILS
         BAL   R14,RMFINTVL         GET MILLISECONDS IN RMF INTERVAL
         ICM   R7,15,36(R15)        GET OFFSET TO PAGING DATA SECTION
         ALR   R7,R15               POINT TO PAGING DATA SECTION
         ICM   R8,15,0(R7)          GET NON-VIO NON-SWAP PAGE-INS
         ICM   R9,15,4(R7)          GET NON-VIO NON-SWAP PAGE-OUTS
         AR    R9,R8                GET NON-VIO NON-SWAP PAGE TRANSFERS
         M     R8,=F'10000'         MILLISECONDS AND 1 DECIMAL PLACE
         DR    R8,R1                GET PAGES PER DEKASECOND
         CVD   R9,DOUBLE
         MVC   30(7,R6),=X'40202021204B20'
         ED    30(7,R6),DOUBLE+5
         MVC   37(4,R6),=X'978761A2'  C'PG/S'
         ICM   R8,15,24(R7)         GET VIO NON-SWAP PAGE-INS
         ICM   R9,15,28(R7)         GET VIO NON-SWAP PAGE-OUTS
         AR    R9,R8                GET VIO NON-SWAP PAGE TRANSFERS
         M     R8,=F'10000'         MILLISECONDS AND 1 DECIMAL PLACE
         DR    R8,R1                GET PAGES PER DEKASECOND
         CVD   R9,DOUBLE
         MVC   41(7,R6),=X'40202021204B20'
         ED    41(7,R6),DOUBLE+5
         MVC   48(5,R6),=X'A5899661A2'  C'VIO/S'
         ICM   R8,15,16(R7)         GET SWAP PAGE-INS
         ICM   R9,15,20(R7)         GET SWAP PAGE-OUTS
         AR    R9,R8                GET SWAP PAGE TRANSFERS
         M     R8,=F'10000'         MILLISECONDS AND 1 DECIMAL PLACE
         DR    R8,R1                GET PAGES PER DEKASECOND
         CVD   R9,DOUBLE
         MVC   53(7,R6),=X'40202021204B20'
         ED    53(7,R6),DOUBLE+5
         MVC   60(7,R6),=X'A2A697978761A2'  C'SWPPG/S'
         ICM   R8,15,8(R7)          GET NON-VIO NON-SWAP PAGE RECLAIMS
         ICM   R9,15,32(R7)         GET VIO NON-SWAP PAGE RECLAIMS
         AR    R9,R8                GET TOTAL PAGE RECLAIMS
         M     R8,=F'10000'         MILLISECONDS AND 1 DECIMAL PLACE
         DR    R8,R1                GET PAGES PER DEKASECOND
         CVD   R9,DOUBLE
         MVC   67(7,R6),=X'40202021204B20'
         ED    67(7,R6),DOUBLE+5
         MVC   74(6,R6),=X'9983939461A2'    C'RCLM/S'
         B     RTNREC
         DROP  R5                   RMFPAG
         SPACE
         LTORG
         SPACE 3
         USING RMFWRK,R5
RMFWRK   DS    0H                  SMF RECORD TYPE 72
         CLI   19(R2),1             SUBTYPE 1?
         BNE   RMFREC               NO, PROBABLY MONITOR III
         ICM   R0,3,38(R2)          ANY WORKLOAD CONTROL SECTION?
         BZ    RMFREC               NO, SKIP USUAL DETAILS
         BAL   R14,RMFINTVL         GET MILLISECONDS IN RMF INTERVAL
         ICM   R7,15,36(R15)        GET OFFSET TO WKLD CONTROL SECTION
         ALR   R7,R15               POINT TO WORKLOAD CONTROL SECTION
         SLR   R0,R0
         ICM   R0,3,2(R7)           GET PERFORMANCE GROUP NUMBER
         CVD   R0,DOUBLE
         MVC   29(4,R6),=X'40202120'
         ED    29(4,R6),DOUBLE+6    SHOW PERFORMANCE GROUP NUMBER
         MVI   29(R6),X'97'         C'P'
         CLI   30(R6),C' '          NUMBER OVER 99?
         BNE   GOTPGN               YES
         MVI   30(R6),X'87'         C'G'
GOTPGN   SLR   R0,R0
         ICM   R0,3,50(R15)         GET NUMBER OF PG PERIOD SECTIONS
         BZ    RTNREC               JUST IN CASE
         ICM   R7,15,44(R15)        GET OFFSET TO PG PERIOD SECTION
         ALR   R7,R15               POINT TO PG PERIOD SECTION
         LA    R11,33(,R6)          POINT TO NEXT DISPLAY LINE BYTE
WKLDLOOP ICM   R9,15,8(R7)          GET TOTAL SERVICE USED
         M     R8,=F'1000'          SCALE UP FOR MILLISECONDS
         DR    R8,R1                GET TRANSACTIONS PER SECOND
         CVD   R9,DOUBLE
         MVC   1(5,R11),ED5
         ED    0(6,R11),DOUBLE+5
         MVC   6(7,R11),=X'A299A561A28583'   C'SRV/SEC'
         LA    R11,13(,R11)         POINT TO NEXT DISPLAY SLOT
         SLR   R8,R8
         ICM   R8,3,48(R15)         GET LENGTH OF PG PERIOD SECTION
         ALR   R7,R8                POINT TO NEXT PG PERIOD SECTION
         BCT   R0,WKLDLOOP          PROCESS IT
         B     RTNREC               NO MORE PERFORMANCE GROUP PERIODS
         DROP  R5                   RMFWRK
         SPACE
         LTORG
         SPACE 3
         USING RMFCHN,R5
RMFCHN   DS    0H                  SMF RECORD TYPE 73
         CLI   19(R2),1             SUBTYPE 1?
         BNE   RMFREC               NO
         ICM   R0,3,38(R2)          ANY CHANNEL PATH CONTROL SECTION?
         BZ    RMFREC               NO, SKIP USUAL DETAILS
         BAL   R8,PAGECALC          CALCULATE LEFT/RIGHT PAGE NUMBER
         LR    R8,R0                SAVE THE ANSWER
         BAL   R14,RMFINTVL         GET MILLISECONDS IN RMF INTERVAL
         LTR   R0,R8                RESTORE RELATIVE PAGE NUMBER
         BZ    RIGHTMSG             PAGE ZERO SO NO DATA
         CLM   R0,3,50(R15)         PAGE NO. HIGHER THAN CHANNEL COUNT?
         BH    LEFTMSG              YES, GONE TOO FAR RIGHT FOR DATA
         ICM   R7,15,36(R15)        GET OFFSET TO CONTROL SECTION
         ALR   R7,R15               POINT TO CHPID CONTROL SECTION
         ICM   R3,15,0(R7)          LOAD THE SAMPLE COUNT
         BNP   RTNREC               AVOID S0C9
         SLR   R8,R8
         ICM   R8,3,48(R15)         GET CHPID DATA SECTION LENGTH
         ICM   R7,15,44(R15)        GET OFFSET TO FIRST DATA SECTION
         ALR   R7,R15               POINT TO FIRST CHPID DATA SECTION
CHPIDLP  ALR   R7,R8                POINT TO NEXT CHPID DATA SECTION
         BCT   R0,CHPIDLP
         SLR   R7,R8                BACK UP ONE
         MVC   34(12,R6),=X'83888195958593409781A388' C'CHANNEL PATH'
         MVC   DOUBLE(1),0(R7)      COPY CHANNEL PATH IDENTIFIER
         BAL   R14,CONV
         MVC   47(2,R6),DOUBLE      DISPLAY CHANNEL PATH IDENTIFIER
         MVC   50(10,R6),=X'4DC5E260839695954B5D'  C'(ES-CONN.)'
         TM    2(R7),X'80'          ES CONNECTION CHANNEL?
         BNZ   CHNTYPOK             YES
         MVC   51(8,R6),=X'A285938583A39699'  C'SELECTOR'
         TM    1(R7),X'30'          BYTE OR BLOCK MULTIPLEXOR?
         BNM   CHNTYPOK             NO, SAY SELECTOR INSTEAD OF UNKNOWN
         MVC   51(8,R6),=X'82A8A3854094A4A7'       C'BYTE MUX'
         TM    1(R7),X'10'          BYTE MULTIPLEXOR?
         BO    CHNTYPOK             YES
         MVC   52(6,R6),=X'939683924094' C'LOCK M'  NO, SAY BLOCK MX
CHNTYPOK MVC   61(7,R6),=X'96868693899585'    C'OFFLINE'
         TM    1(R7),X'01'          CHANNEL PATH ONLINE?
         BZ    RTNREC               NO
         MVC   61(12,R6),=X'9985839695868987A4998584' C'RECONFIGURED'
         TM    1(R7),X'02'          RECONFIGURED DURING INTERVAL?
         BO    RTNREC               YES
         MVC   61(13,R6),=X'978199A389819340A2A381A3A2' 'PARTIAL STATS'
         TM    1(R7),X'04'          PARTIAL STATISTICS?
         BO    RTNREC               YES
         ICM   R9,15,4(R7)          LOAD CHANNEL PATH BUSY COUNT
         M     R8,=F'10000'         PERCENTAGE AND 2 DECIMAL PLACES
         DR    R8,R3                GET BUSY PERCENTAGE
         CVD   R9,DOUBLE
         MVC   61(13,R6),=X'402021204B20206C4082A4A2A8' C'% BUSY'
         ED    61(7,R6),DOUBLE+5
         B     RTNREC
         DROP  R5                   RMFCHN
         SPACE
         LTORG
         SPACE 3
         USING RMFDEV,R5
RMFDEV   DS    0H                  SMF RECORD TYPE 74
         CLI   19(R2),1             SUBTYPE 1?
         BNE   RMFREC               NO
         ICM   R0,3,46(R2)          ANY DEVICE DATA SECTIONS?
         BZ    RMFREC               NO, SKIP USUAL DETAILS
         BAL   R8,PAGECALC          CALCULATE LEFT/RIGHT PAGE NUMBER
         LR    R8,R0                SAVE THE ANSWER
         BAL   R14,RMFINTVL         GET MILLISECONDS IN RMF INTERVAL
         LTR   R0,R8                RESTORE RELATIVE PAGE NUMBER
         BZ    RIGHTMSG             PAGE ZERO SO NO DATA
         CLM   R0,3,50(R15)         PAGE NO. HIGHER THAN DEVICE COUNT?
         BH    LEFTMSG              YES, GONE TOO FAR RIGHT FOR DATA
         SLR   R8,R8
         ICM   R8,3,48(R15)         GET DEVICE DATA SECTION LENGTH
         ICM   R7,15,44(R15)        GET OFFSET TO FIRST DATA SECTION
         ALR   R7,R15               POINT TO FIRST DEVICE DATA SECTION
DEVICELP ALR   R7,R8                POINT TO NEXT DEVICE DATA SECTION
         BCT   R0,DEVICELP
         SLR   R7,R8                BACK UP ONE
         MVC   DOUBLE(2),0(R7)      COPY CHANNEL PATH IDENTIFIER
         BAL   R14,CONV
         MVC   29(4,R6),DOUBLE      DISPLAY DEVICE NUMBER
         CLI   29(R6),C'0'          LEADING ZERO?
         BNE   VOLCHK74             NO
         MVI   29(R6),C' '          YES, NOT ANY MORE
VOLCHK74 CLI   6(R7),C' '           ANY VOLUME SERIAL NUMBER?
         BNH   VOLOK74              NO
         MVC   13(6,R6),6(R7)       YES, DISPLAY IT
         MVI   12(R6),C'_'          HIGHLIGHT OVERLAY OF YY.DDD
         MVI   19(R6),C'_'          (OR ELSE MAY NOT NOTICE IT)
VOLOK74  MVC   DOUBLE(2),12(R7)     TOP HALF OF UCB TYPE
         BAL   R14,CONV
         MVC   34(4,R6),DOUBLE
         MVC   DOUBLE(2),14(R7)     LOW HALF OF UCB TYPE
         BAL   R14,CONV
         MVC   38(4,R6),DOUBLE
         MVC   43(7,R6),=X'96868693899585'             C'OFFLINE'
         TM    5(R7),X'01'          DEVICE PATH ONLINE?
         BZ    RTNREC               NO
         MVC   43(12,R6),=X'9985839695868987A4998584'  C'RECONFIGURED'
         TM    5(R7),X'02'          RECONFIGURED DURING INTERVAL?
         BO    RTNREC               YES
         MVC   43(13,R6),=X'978199A389819340A2A381A3A2' 'PARTIAL STATS'
         TM    5(R7),X'08'          PARTIAL STATISTICS?
         BO    RTNREC               YES
         MVC   43(13,R6),42(R6)     NO, ERASE LITERAL
         ICM   R9,15,20(R7)         LOAD START SUBCHANNEL COUNT
         M     R8,=F'10000'         PERMILLAGE AND 1 DECIMAL PLACE
         DR    R8,R1                GET I/O RATE
         CVD   R9,DOUBLE
         MVC   42(7,R6),=X'40202021204B20'
         ED    42(7,R6),DOUBLE+5
         MVC   42(6,R6),43(R6)      SAVE A BYTE ON DISPLAY LINE
         MVC   48(4,R6),=X'899661A2'   C'IO/S'
         TM    5(R7),X'20'          VALID CMB DATA?
         BO    RTNREC               NO
         ICM   R0,15,24(R7)         LOAD SAMPLED START SUBCHANNEL COUNT
         BZ    RTNREC               AVOID S0C9 ABEND
         LA    R15,52(,R6)          POINT TO DISPLAY AREA
         ICM   R9,15,28(R7)         LOAD DEVICE SAMPLED CONNECT TIME
         BAL   R14,DEVCMB74
         MVI   56(R6),X'83'         DENOTE CONNECT TIME
         LA    R15,58(,R6)          POINT TO DISPLAY AREA
         ICM   R9,15,40(R7)         LOAD DEVICE SAMPLED DISCONNECT TIME
         BAL   R14,DEVCMB74
         MVI   58(R6),C'+'
         MVI   62(R6),X'84'         DENOTE DISCONNECT TIME
         LA    R15,64(,R6)          POINT TO DISPLAY AREA
         ICM   R9,15,32(R7)         LOAD DEVICE SAMPLED PENDING TIME
         BAL   R14,DEVCMB74
         MVI   64(R6),C'+'
         MVI   68(R6),X'97'         DENOTE PENDING TIME
         SLR   R8,R8                PROCESS CMB ACTIVITY TIME
         ICM   R9,15,36(R7)         LOAD DEVICE SAMPLED ACTIVE TIME
         SLDL  R8,7                 CONVERT TO MICROSECONDS
         DR    R8,R0                GET MICROSECONDS PER I/O
         SLR   R8,R8
         D     R8,=F'1000'          GET MILLISECONDS PER I/O
         CVD   R9,DOUBLE
         MVC   70(5,R6),ED5
         ED    69(6,R6),DOUBLE+5
         MVI   70(R6),C'='          COMPLETE THE EQUATION NOTATION
         MVC   75(5,R6),=X'94A2618996'           C'MS/IO'
         B     RTNREC
         SPACE
DEVCMB74 SLR   R8,R8                PROCESS CMB ACTIVITY TIME
         SLDL  R8,7                 CONVERT TO MICROSECONDS
         DR    R8,R0                GET MICROSECONDS PER I/O
         SLR   R8,R8
         D     R8,=F'1000'          GET MILLISECONDS PER I/O
         CVD   R9,DOUBLE
         MVC   1(3,R15),ED3
         ED    0(4,R15),DOUBLE+6
         BR    R14
         DROP  R5                   RMFDEV
         SPACE
         LTORG
         SPACE 3
         USING RMFPDS,R5
RMFPDS   DS    0H                  SMF RECORD TYPE 75
         CLI   19(R2),1             SUBTYPE 1?
         BNE   RMFREC               NO
         ICM   R0,3,38(R2)          ANY DATA SET SECTION?
         BZ    RMFREC               NO, SKIP USUAL DETAILS
         BAL   R14,RMFINTVL         GET MILLISECONDS IN RMF INTERVAL
         ICM   R7,15,36(R15)        GET OFFSET TO DATA SET SECTION
         ALR   R7,R15               POINT TO PAGE/SWAP DATA SET SECTION
         UNPK  29(5,R6),51(3,R7)    UNPACK UCB NAME
         TR    29(4,R6),HEXCHARS-240
         MVI   33(R6),C' '          ERASE GARBAGE
         CLI   29(R6),C'0'          LEADING ZERO IN DEVICE NUMBER?
         BNE   DON75UCB             NO
         MVI   29(R6),C' '          YES, SUPPRESS IT
DON75UCB MVC   34(22,R6),0(R7)      GET DATA SET NAME (HOPE < 23 CHARS)
         ICM   R9,15,92(R7)         GET DATA SET I/O REQUEST COUNT
         M     R8,=F'10000'         MILLISECONDS AND 1 DECIMAL PLACE
         DR    R8,R1                GET I/O'S PER DEKASECOND
         CVD   R9,DOUBLE
         MVC   57(7,R6),=X'40202021204B20'
         ED    57(7,R6),DOUBLE+5
         MVC   64(4,R6),=X'899661A2'   C'IO/S'
         TM    44(R7),X'08'         SWAP DATA SET?
         BO    RTNREC               YES, PAGE TRANSFER COUNT IS N/A
         ICM   R9,15,96(R7)         GET DATA SET PAGE TRANSFER COUNT
         M     R8,=F'10000'         MILLISECONDS AND 1 DECIMAL PLACE
         DR    R8,R1                GET PAGES PER DEKASECOND
         CVD   R9,DOUBLE
         MVC   68(7,R6),=X'40202021204B20'
         ED    68(7,R6),DOUBLE+5
         MVC   75(5,R6),=X'A7869961A2'  C'XFR/S'
         B     RTNREC
         DROP  R5                   RMFPDS
         SPACE
         LTORG
         TITLE 'SMF RECORD TYPE SUBROUTINES'
         USING RACFUS,R5
RACFUS   DS    0H                  SMF RECORD TYPE 80
         OC    25(8,R6),50(R2)      JOB NAME         (DON'T SHOW NULLS)
         OC    34(8,R6),18(R2)      RACF USER ID OR JOB NAME
         OC    43(8,R6),26(R2)      RACF GROUP ID OR STEP NAME
         OC    52(8,R6),42(R2)      TERMINAL ID OR ZERO
         B     RTNREC
         DROP  R5                   RACFUS
         SPACE
         LTORG
         SPACE 3
         USING CRYPTO,R5
CRYPTO   DS    0H                  SMF RECORD TYPE 82
         MVC   25(8,R6),20(R2)      JOB NAME OR RACF USERID
         MVC   34(8,R6),28(R2)      STEPNAME OR RACF GROUP
         B     RTNREC
         DROP  R5                   CRYPTO
         SPACE
         LTORG
         SPACE 3
         USING SYSTAT,R5
SYSTAT   DS    0H                  SMF RECORD TYPE 90
         SR    R1,R1
         ICM   R1,3,32(R2)          SUBTYPE
         CVD   R1,DOUBLE
         MVC   33(3,R6),ED3
         ED    32(4,R6),DOUBLE+6
         MVC   25(7,R6),SUBTYPE
         B     RTNREC
         DROP  R5                   SYSTAT
         SPACE
         LTORG
         SPACE 3
         USING CICSRC,R5
CICSRC   DS    0H                  SMF RECORD TYPE 110
         TM    40(R2),X'C0'         ARBITRARY CICS VALIDITY TEST
         BNZ   RTNREC               PROBABLY AN F4 AIM RECORD (110-117)
         MVC   25(8,R6),32(R2)      VTAM APPLID
         MVC   34(4,R6),SEQ#        UP TO 3,999,999 REPORTED HERE
         UNPK  39(7,R6),40(4,R2)    BLOCK SEQUENCE NUMBER
         OI    45(R6),X'F0'         MAKE NUMERIC
         B     RTNREC
         DROP  R5                   CICSRC
         SPACE
         LTORG
         SPACE 3
         USING HSMVOL,R5
HSMVOL   DS    0H                  SMF RECORD TYPE 128
         MVC   25(6,R6),20(R2)      VOLUME SERIAL NUMBER
         MVI   31(R6),C'('
         MVC   32(1,R6),80(R2)      HSM VOLUME TYPE
         MVI   33(R6),C')'
         OC    35(8,R6),120(R2)     VOLUME UNIT TYPE (DON'T SHOW NULLS)
         SLR   R0,R0
         ICM   R0,3,86(R2)          LOAD MIGRATION MINIMUM AGE
         CVD   R0,DOUBLE
         OI    DOUBLE+7,X'0F'
         MVC   44(7,R6),=X'9489958187857E'     C'MINAGE='
         UNPK  51(3,R6),DOUBLE+6(2)
         ICM   R0,15,88(R2)         LOAD NON-VSAM TRACK COUNT
         CVD   R0,DOUBLE
         MVC   55(5,R6),ED5
         ED    54(6,R6),DOUBLE+5
         MVC   60(9,R6),=X'95A5A2819460A39992' C'NVSAM-TRK'
         ICM   R0,15,104(R2)        LOAD FRAGMENTATION INDEX
         CVD   R0,DOUBLE
         MVC   70(5,R6),ED5
         ED    69(6,R6),DOUBLE+5
         MVC   75(5,R6),=C'=F.I.'
         B     RTNREC
         DROP  R5                   HSMVOL
         SPACE
         LTORG
         SPACE 3
         USING HSMREC,R5
HSMREC   DS    0H                  SMF RECORD TYPE 129
         OC    25(8,R6),14(R2)      JOB NAME         (DON'T SHOW NULLS)
         MVC   34(40,R6),40(R2)     DATA SET NAME
         OC    74(6,R6),84(R2)      VOLUME SERIAL NUMBER OR ZERO
         B     RTNREC
         DROP  R5                   HSMREC
         SPACE
         LTORG
         SPACE 3
         USING UACTRT,R5
UACTRT   DS    0H                  SMF RECORD TYPE 158
         MVC   25(8,R6),14(R2)      JOB NAME
         MVC   34(8,R6),48(R2)      JOB NUMBER
         MVC   43(9,R6),=X'4DA2A482A3A897F05D' C'(SUBTYP0)'
         OC    50(1,R6),31(R2)      RECORD SUBTYPE
         ICM   R3,15,64(R2)         SERVICE UNITS
         CVD   R3,DOUBLE
         MVC   53(11,R6),ED11
         ED    52(12,R6),DOUBLE+2
         MVC   64(3,R6),=X'A299A561A28583'   C'SRV' (REUSE LITERAL)
         ICM   R3,15,68(R2)         COST IN DOLLARS
         CVD   R3,DOUBLE
         LA    R1,79(,R6)           JUST IN CASE OF ZERO DOLLARS
         MVC   69(11,R6),ED11
         EDMK  68(12,R6),DOUBLE+2
         BCTR  R1,0
         MVI   0(R1),C'$'
         B     RTNREC
         DROP  R5                   UACTRT
         SPACE
         LTORG
         SPACE 3
         USING ORACLE,R5
ORACLE   DS    0H                  SMF RECORD TYPE 199
         MVC   25(4,R6),14(R2)      SUBSYSTEM ID
         LA    R0,4                 LENGTH OF RDW
         LR    R15,R2               POINT TO SMF RECORD TYPE
         SLR   R15,R0               POINT TO RDW TO SIMPLIFY PROCESSING
         LR    R1,R15               REMEMBER IT
         ICM   R0,15,28(R15)        GET OFFSET TO CORRELATION SECTION
         ALR   R15,R0               POINT TO CORRELATION SECTION
         OC    30(8,R6),0(R15)      AUTHORIZATION ID (DON'T SHOW NULLS)
         MVC   39(8,R6),8(R15)      CORRELATION ID
         LR    R15,R1               POINT TO RDW
         ICM   R0,15,36(R15)        GET OFFSET TO MPM SECTION
         ALR   R15,R0               POINT TO MPM SECTION
         ICM   R0,15,48(R15)        LOAD PC COUNT
         CVD   R0,DOUBLE
         MVC   48(3,R6),ED3
         ED    47(4,R6),DOUBLE+6
         MVC   51(2,R6),=X'9783'    SHOW PC COUNT
         ICM   R0,15,44(R1)         GET OFFSET TO KERNAL SECTION
         ALR   R1,R0                POINT TO KERNAL SECTION
         ICM   R0,15,0(R1)          LOAD LOGICAL READ COUNT
         CVD   R0,DOUBLE
         MVC   54(5,R6),ED5
         ED    53(6,R6),DOUBLE+5
         MVC   59(3,R6),=X'939984'  SHOW LOGICAL READ COUNT
         ICM   R0,15,4(R1)          LOAD PHYSICAL READ COUNT
         CVD   R0,DOUBLE
         MVC   63(5,R6),ED5
         ED    62(6,R6),DOUBLE+5
         MVC   68(2,R6),=X'9984'    SHOW PHYSICAL READ COUNT
         ICM   R0,15,8(R1)          LOAD LOGICAL WRITE COUNT
         CVD   R0,DOUBLE
         MVC   71(5,R6),ED5
         ED    70(6,R6),DOUBLE+5
         MVC   76(4,R6),=X'93A699A3'     SHOW LOGICAL WRITE COUNT
         B     RTNREC
         DROP  R5                   ORACLE
         SPACE
         LTORG
         SPACE 3
         USING DSKSPC,R5
DSKSPC   DS    0H                  SMF RECORD TYPE 255
         LR    R3,R2                PREPARE FOR TRT
         TRT   14(10,R3),GOODNAME   1ST 10 BYTES AFTER HEADER ALL CHAR?
         LR    R2,R3                RESTORE RECORD POINTER
         BNZ   UNUSED               NO, NOT REALLY A DMT SMF RECORD
         MVC   25(2,R6),14(R2)      RECORD SUBTYPE
         MVC   28(8,R6),16(R2)      HIGH-ORDER QUALIFIER
         XC    DOUBLE,DOUBLE
         MVC   DOUBLE,68(R2)        FETCH MAXIMUM SPACE
         OC    DOUBLE(7),76(R2)     ACCESS CURRENT SPACE
         BZ    DISKDS               GROUP TOTALS UNKNOWN
         ICM   R0,15,76(R2)
         ICM   R1,15,80(R2)
         SRDL  R0,24                DIVIDE DECIMAL NUMBER BY A MILLION
         STM   R0,R1,DOUBLE
         OI    DOUBLE+7,X'0F'       MAKE SIGN VALID
         MVC   37(9,R6),ED9
         ED    36(10,R6),DOUBLE+3   SHOW USED MEGABYTES
         MVC   46(7,R6),=X'948260A4A28584'    C'MB-USED'
         ICM   R0,15,68(R2)
         ICM   R1,15,72(R2)
         SRDL  R0,24                DIVIDE DECIMAL NUMBER BY A MILLION
         STM   R0,R1,DOUBLE
         OI    DOUBLE+7,X'0F'       MAKE SIGN VALID
         MVC   54(9,R6),ED9
         ED    53(10,R6),DOUBLE+3   SHOW USED MEGABYTES
         MVC   63(6,R6),=X'9482609481A7' C'MB-MAX'
         B     RTNREC
DISKDS   MVC   37(15,R6),ED15
         ED    36(16,R6),60(R2)     SHOW SPACE OF THIS DATA SET
         MVC   53(18,R6),MSG255
         B     RTNREC
         DROP  R5                   DSKSPC
         SPACE
*        DC    C'BYTES FOR DATA SET'
MSG255   DC    X'82A8A385A240869699408481A38140A285A3'
         LTORG
         SPACE 3
         USING SLSSRC,R5
SLSSRC   DS    0H                  SMF RECORD TYPE 255
         LR    R3,R2                PREPARE FOR TRT
         TRT   14(4,R3),GOODNAME    PRINTABLE SUBSYSTEM NAME?
         BNZ   RTNREC               NO, JUST RETURN
         LR    R2,R3                YES, RESTORE RECORD POINTER
         MVC   25(4,R6),14(R2)      SHOW SUBSYSTEM NAME
         CLC   18(2,R2),=H'7'       SUBTYPE OVER 7?
         BH    PUTSUB               YES, SHOW IT
         MVC   3(1,R6),19(R2)       COPY SUBTYPE
         OI    3(R6),X'F0'          MAKE IT DISPLAYABLE
         L     R1,24(,R13)          RESTORE PARAMETER POINTER
         CLI   3(R1),66             ENTER/EJECT SUBTYPE?
         BE    SLSSEE               YES
         CLI   19(R2),7             SUBTYPE 7?
         BNE   RTNREC               NO, EXIT
         MVC   30(5,R6),=C'?????'   JUST IN CASE ALL TYPE FLAGS ARE OFF
         ICM   R0,8,20(R2)          YES, GET ACTIVITY TYPE
         BZ    DON07TYP
         LA    R1,SLSS07TT          POINT TO THE TYPE TABLE
CHK07TYP LTR   R0,R0                IS SIGN BIT ON?
         BM    GOT07TYP             YES, NOW HAVE THE ACTIVITY TYPE
         SLL   R0,1                 NO, PROMOTE NEXT BIT
         LA    R1,5(,R1)            POINT TO NEXT LITERAL
         B     CHK07TYP             GO TEST IT
GOT07TYP MVC   30(5,R6),0(R1)       LOAD ACTIVITY NAME
DON07TYP MVC   36(6,R6),65(R2)      LOAD VOLUME SERIAL NUMBER
         CLI   64(R2),C'1'          LABEL MODIFIER KNOWN?
         BL    DON07LBL             NO
         CLI   64(R2),C'4'
         BH    DON07LBL             NO
         ICM   R1,8,64(R2)          YES, LOAD IT
         SLL   R1,4                 SHIFT OUT THE ZONE
         SRL   R1,28                GET THE NUMBER
         BCTR  R1,0
         MH    R1,=H'3'             GET AN INDEX
*NO-HL   LA    R1,=C'SL NL BLPLMU'(R1)
         LA    R15,=C'SL NL BLPLMU'                           GYP93274
         ALR   R1,R15                                         GYP93274
         MVC   43(3,R6),0(R1)       LOAD THE LABEL MODIFIER LABEL
DON07LBL MVC   47(8,R6),47(R2)      LOAD THE ACTIVITY INSTIGATOR
         OC    56(8,R6),55(R2)      (DON'T SHOW NULLS)
         TM    22(R2),X'80'         ANY SOURCE UNIT?
         BZ    DON07SRC             NO
         MVC   DOUBLE(2),84(R2)     YES, COPY THE DEVICE NUMBER
         BAL   R14,CONV
         MVC   64(4,R6),DOUBLE
         CLI   64(R6),C'0'          LEADING ZERO IN DEVICE NUMBER?
         BNE   DON07SRC             NO
         MVI   64(R6),C' '          YES, SUPPRESS IT
DON07SRC TM    22(R2),X'40'         ANY DESTINATION UNIT?
         BZ    DON07DST             NO
         MVC   DOUBLE(2),86(R2)     YES, COPY THE DEVICE NUMBER
         BAL   R14,CONV
         MVC   64(4,R6),DOUBLE
         CLI   64(R6),C'0'          LEADING ZERO IN DEVICE NUMBER?
         BNE   DON07DST             NO
         MVI   64(R6),C' '          YES, SUPPRESS IT
DON07DST TM    22(R2),X'08'         PERFORMANCE IMPACTED BY LMU RETRY?
         BZ    RTNREC               NO
         MVC   69(11,R6),=X'9985A399A86084859381A8'  C'RETRY-DELAY'
         B     RTNREC
SLSSEE   MVC   36(6,R6),26(R2)      LOAD VOLUME SERIAL NUMBER
         MVC   30(5,R6),SLS7EJCT    C'EJECT'
         CLI   19(R2),2             SUBTYPE 2?
         BE    RTNREC               YES, HOPE IT REALLY IS EJECT
         CLI   19(R2),5             SUBTYPE 5?
         BE    RTNREC               YES, HOPE IT REALLY IS EJECT
         MVC   30(5,R6),SLS7ENTR    C'ENTER'
         CLI   19(R2),3             SUBTYPE 3?
         BE    RTNREC               YES, HOPE IT REALLY IS ENTER
         CLI   19(R2),6             SUBTYPE 6?
         BE    RTNREC               YES, HOPE IT REALLY IS ENTER
         MVC   30(5,R6),=C'?????'   DON'T KNOW IF EJECT OR ENTER
         B     RTNREC
         DROP  R5                   SLSSRC
         SPACE
SLSS07TT DC    X'D460A28399'        C'M-SCR'
         DC    X'D46095A283'        C'M-NSC'
         DC    X'D260A28399'        C'K-SCR'
         DC    X'D26095A283'        C'K-NSC'
         DC    X'40A2A68197'        C' SWAP'
         DC    X'409496A585'        C' MOVE'
SLS7ENTR DC    X'8595A38599'        C'ENTER'
SLS7EJCT DC    X'85918583A3'        C'EJECT'
         LTORG
         SPACE 2
         DS    0D                  END OF CSECT
         TITLE 'DSECTS'
@DATA    DSECT
         DS    18F                 REGISTER SAVEAREA
DOUBLE   DS    D                   SIZE OF THIS AREA
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
