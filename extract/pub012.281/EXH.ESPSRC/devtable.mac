DEVT     TITLE 'DEVICE TYPE ANALYZER'
*UNTDEVTB -- SYMBOLIC SUPERZAP OF DEVICE NAME AND MASK TABLES
*   SUPPLIED TO THE SHARE OS PROJECT BY THE UNIV. OF TENNESSEE
*DEVTABLE - Preliminary User's Guide
*
*DEVTABLE is a program which can be used to list and modify the
*Device Name Table and the Device Mask Table.  The current version
*is capable only of modifying the mask bits in the Mask Table.
*Modifying of names or device types still requires the use of SUPERZAP.
*
*JCL.  The following JCL is required to run DEVTABLE:
*
*   //  EXEC  PGM=DEVTABLE
*
*The program does not accept any PARM information and will run in the
*default of 64K.
*
*   //DEVPRINT  DD  SYSOUT=A
*
*The output file from the program typically is directed to the printer.
*The DCB is device independent and specifies RECFM=FBA and
*LRECL=121.  BLKSIZE may specified on the DD card as any integral
*multiple of 121.  If not specifed on the DD card, 121 is assumed.
*
*   //SYSPRINT  DD DUMMY
*
*The output file from SUPERZAP is normally not printed. SYSOUT=A (or
*whatever) may be specified if desired.  This card is only required
*if the mask table is to be modified;  it is not required for list
*functions.
*
*   //SYSLIB  DD  DSN=SYS1.LINKLIB,DISP=SHR
*
*The SUPERZAP SYSLIB card is required for both list and modification
*functions.  Even when SUPERZAP is not invoked, DEVTABLE uses the
*SYSLIB DD card to LOAD the tables.  It will not accept a module
*from link pack, nor from logical LINKLIB nor from STEPLIB.  The tables
*are reloaded for every list or modification function and thus listings
*reflect modifications immediately.
*
*   //SYSIN  DD  UNIT=SYSDA,SPACE=(TRK,(10,10))
*
*The SUPERZAP input file is a temporary and is required only if table
*modifications are made.  The DCB specifies RECFM=FB and LRECL=80. A
*BLKSIZE will be accepted from either the data set label or from the DD
*If unavailable from any other source, a value of 800 will be assumed.
*
*   //DEVIN  DD  *
*
*The DEVTABLE input file is optional.  If omitted, DUMMY, or null,
*a listing of the entire table is printed.  The DCB specifies RECFM=FB
*and LRECL=80.  The BLKSIZE is normally taken from either the data set
*label or the DD card. If BLKSIZE is unavailable from any source (e.g.,
*the input is an unlabeled tape), a value of 80 is assumed.
*DEVTABLE control cards have an operation field in columns 1-7 and zero
*or more operand fields beginning in colums 8, 16, 24 and so on through
*column 64.  Both operations and operands are left justified in their
*respective fields.  Continuations are failed, but as many UCB cards
*(see below) as are necessary may be specified.
*
*EJECT card.  An EJECT card may appear at any point in the input
*stream to cause a page eject in the output listing.  The card has no
*operands.
*
*LIST card. The LIST card may be used to list the UCB's associated with
*one or more device names.  The operands are the names to be listed.
*If no operands are specifed, all the names in the table are listed.
*Example:
*
*LIST
*
*The entire table is listed.
*
*LIST   TAPE    2400    3400-4  TAPE9
*
*The entries for TAPE, 2400, 3400-4, and TAPE9 are listed.
*
*ZAP card.  The ZAP card is used to specify the device names for
*which new UCB's will be set.  The format is the same as for the LIST
*card except that there must be at least one operand.  The ZAP card
*must be followed by one or more UCB card which specify the new values.
*
*UCB card.  The UCB card is used to specify the values for a preceeding
*ZAP card. The operands are either UCB addresses or a range of UCB
*addresses.  A UCB range consists of a beginning address and an ending
*address separated by commas.
*
*Examples:
*
*LIST   SYSDA   WORK
*ZAP    SYSDA   WORK
*UCB    150     153-154
*LIST   SYSDA   WORK
*LIST   TAPE    2400    TAPE9   3400-4
*ZAP    TAPE    2400    TAPE9   3400-4
*UCB    380-383
*LIST   TAPE    2400    TAPE9   3400-4
*LIST   2314
*ZAP    2314
*UCB    230
*UCB    231
*UCB    232
*UCB    233     234-237
*LIST   2314
*
*A proc called DEVTABLE may be used to invoke the program.  It contains
*the cards described above execpt that the DEVIN card specifies
*DDNAME=DEVIN.
*
*        A.M.S. MODIFICATIONS
*
*        A CARD WITH '*' IN COLUMN ONE WILL BE TREATED AS COMMENTS
*              AND IS PRINTED WHEN READ.
*
*        A DD CARD TO DEFINE AN ALTERNATE NUCLEUS MAY BE USED.
*        //NUCLEUS DD DSN=SYS1.NUCLEUS(MEMBER),VOL=SER=...
*
*        IF THIS CARD IS OMITTED OR DUMMY, THE RUNNING NUCLEUS IS
*        REFERENCED.
*
         SPACE 2
         MACRO
&NM      CALL  &LOC
         LCLC  &N
&N       SETC  '&NM'
         AIF   ('&LOC'(1,1) EQ '(').REG
&N       LA    R15,&LOC
         AGO   .COB
.REG     AIF   ('&LOC' EQ '(R15)' OR '&LOC' EQ '(15)').COM
&N       LR    R15,&LOC(1)
.COB     ANOP  ,
&N       SETC  ''
.COM     ANOP  ,
&N       BALR  R14,R15
         MEND
         SPACE 1
         COPY  OPTIONGB                                          81186
         SPACE 1                                                 81186
         SYSPARM LIST=YES                                        81186
         EJECT ,
         PRINT &PRTSOR                                           81186
DEVTABLE CSECT                ESTABLISH CSECT
         SAVE  (14,12),,*     SAVE REGISTERS
         LR    R12,R15        SET BASE
         LA    R11,2048(,R12) SET SECOND BASE
         LA    R11,2048(,R11) ...
         USING DEVTABLE,R12,R11 INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
         AIF   ('&LOCAL' NE 'CCSI').NOLO                         81186
         SERVINIT ,          LOCATE @SERVICE ROUTINE             81186
         SERVCALL ACGET,DOUBLE   GET CURRENT ACCOUNT             81186
         STC   R0,LOCAUTH    STASH AUTHORIZATION                 81186
         SERVTERM ,          DON'T NEED IT ANY MORE              81186
*
.NOLO    CALL  PUTOPEN        GO OPEN UP PRINT FILE              81186
         CALL  LOADNUC        LOAD ALTERNATE NUCLEUS, IF REQUIRED
DEVLOOP  CALL  LOADDEVT       GO LOAD DEVICE TABLES
         CALL  READCARD       READ A CONTROL CARD
         TM    SWITCH,EOF     IS IT END OF FILE
         BO    DEVBACK        YES. GO TERMINATE
         CALL  PROCCARD       GO PROCESS THE CARD
         B     DEVLOOP        GO AROUND AGAIN
*
DEVBACK  CALL  CLOSEUP        GO CLOSE FILES, ETC.
*
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
         EJECT
*        ENTRY BLDL           MAKE NAME AVAILABLE
BLDL     SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        ESTABLISH BASE
*        USING BLDL,R12       INFORM ASSEMBLER
         IEFSAVER ,           LINK UP
*
         BLDL  ZAPLIB,BUILDLST  FIND DEVICE TABLES
         B     *+4(R15)       FIND RETURN CODE
         B     GOODBLDL       NO PROBLEMS
         B     NOTFOUND       TABLES NOT FOUND
         B     BLDLERR        I/O ERROR
*
GOODBLDL DS    0H
         NC    DEVMASKT+22(2),=X'3FFE'  FORCE NON-REUS/RENT/REFR
         NC    DEVNAMET+22(2),=X'3FFE'  ...
         CLI   Z,0            WAS MASK TABLE IN PRIVATE LIBRARY
         BNE   WRONGLIB       NO
         CLI   Z@,0           WAS NAME TABLE IN PRIVATE LIBRARY
         BNE   WRONGLIB       NO
         B     TERM           ALL OK
*
NOTFOUND DS    0H
         MVC   LINE(L'MISSMEM),MISSMEM SAY MISSING MEMBER
         MVI   LINE-1,C'0'    DOUBLE SPACE
         CALL  PUT            PUT OUT THE MESSAGE
         CALL  CLOSEUP        CLOSE ALL FILES
         ABEND 3              QUIT QUICKLY
*
BLDLERR  DS    0H
         MVC   LINE(L'BLDERR),BLDERR  SAY BLDL I/O ERROR
         MVI   LINE-1,C'0'    DOUBLE SPACE
         CALL  PUT            PUT OUT THE LINE
         CALL  CLOSEUP        CLOSE ALL FILES
         ABEND 3              QUIT QUICKLY
*
WRONGLIB DS    0H
         MVC   LINE(L'WRONG),WRONG  SAY WRONG LIBRARY
         MVI   LINE-1,C'0'    DOUBLE SPACE
         CALL  PUT            GO PUT OUT THE MESSAGE
         CALL  CLOSEUP        CLOSE ALL FILES
         ABEND 4              QUIT QUICKLY
*
TERM     DS    0H
         IEFRELSE ,           UNLINK
         RETURN (14,12),T,RC=0
         EJECT
*        ENTRY LOADDEVT       MAKE NAME AVAILABLE
LOADDEVT SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET A BASE
*        USING LOADDEVT,R12   INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
DELNAME  DELETE DE=DEVNAMET   DELETE DEVICE NAME TABLE
         LTR   R15,R15        WHAT HAPPENED
         BZ    DELNAME        ASSURE NAME TABLE IS COMPLETELY OUT
DELMASK  DELETE DE=DEVMASKT   DELETE DEVICE MASK TABLE
         LTR   R15,R15        AGAIN SEE WHAT HAPPENED
         BZ    DELMASK        DELETE TILL ALL GONE
*
         CLOSE ZAPLIB         ASSURE ZAPLIB IS CLOSED
*
         OPEN  ZAPLIB         TRY TO OPEN ZAPLIB
         LA    R1,ZAPLIB      ADDRESSIBILITY
         USING IHADCB,R1      INFORM ASSEMBLER
         TM    DCBOFLGS,DCBOFOPN  DID DCB OPEN
         BO    ZAPOPEN        MUST HAVE
         MVC   LINE(L'MISSZAP),MISSZAP  SAY DD CARD MISSING
         MVI   LINE-1,C'0'    DOUBLE SPACE
         CALL  PUT            GO PUT OUT THE LINE
         CALL  CLOSEUP        CLOSE ALL FILES
         ABEND 2              QUIT QUICKLY
         DROP  R1             REMIND OURSELVES
*
ZAPOPEN  DS     0H                                               85230
         AIF   (NOT &MVS).NOTPRIV                                85230
         TESTAUTH FCTN=1     ARE WE AUTHORIZED ?                 85230
         BXH   R15,R15,NOTPRIV  NO, WILL BOMB LATER              85230
         MODESET KEY=ZERO    GET READY TO CLOBBER STORAGE        85230
         L     R1,ZAPLIB+DCBDEBAD-IHADCB   GET DEB               85230
         USING DEBBASIC,R1                                       85230
         OI    DEBFLGS1,DEBAPFIN  TURN ON APF LIBRARY BIT        85230
         DROP  R1                                                85230
         MODESET KEY=NZERO   RESTORE KEY                         85230
NOTPRIV  DS    0H                                                85230
.NOTPRIV CALL  BLDL           GO ISSUE BLDL
         LOAD  DE=DEVMASKT,DCB=ZAPLIB  LOAD THE DEVICE MASK TABLE
         ST    R0,ADDRMASK    SAVE THE ADDRESS
         LOAD  DE=DEVNAMET,DCB=ZAPLIB  LOAD THE DEVICE NAME TABLE
         ST    R0,ADDRNAME    SAVE THE ADDRESS
         CALL  ANALDEV        SET UP TABLE INFO
*
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
         EJECT
*        ENTRY ANALDEV        MAKE NAME AVAILABLE
ANALDEV  SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET A BASE
*        USING ANALDEV,R12    INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         L     R15,DEVMASKT+24  LOAD LENGTH OF TABLE
         SRL   R15,8          ISOLATE THE LENGTH
         SH    R15,=H'4'      LESS HEADER
         LR    R2,R15         COPY LENGTH OF DEVICE MASK TABLE
         SRA   R2,2           CONVERT TO WORDS
         L     R5,ADDRMASK    ADDRESS OF MASK TABLE
         LA    R14,4(,R5)     ADDRESS OF FIRST MASK ENTRY
         ST    R14,MASK#1     SAVE FIRST MASK ENTRY ADDRESS
         L     R1,ADDRNAME    ADDRESS OF DEVNAMET
         CLC   0(2,R5),2(R1)  DO LENGTHS MATCH
         BNE   MISMATCH       NO. GIVE ERROR
         LA    R1,4(,R1)      FIRST ENTRY ADDRESS
         ST    R1,NAME#1      SAVE ADDRESS
         LH    R4,0(,R5)      NUMBER OF ENTRIES IN TABLE
         BCTR  R4,0           LESS ONE
         MH    R4,=H'12'      TWELVE BYTES PER ENTRY
         LA    R1,0(R4,R1)    ADDRESS OF LAST ENTRY
         ST    R1,NAMEEND     SAVE LAST ENTRY ADDRESS
         LH    R4,2(,R5)      NUMBER OF ENTRIES AGAIN
         SRDA  R2,32          SET FOR DIVIDE
         DR    R2,R4          NUMBER OF WORDS PER ENTRY
         SH    R3,=H'2'       MASK WORDS PER ENTRY
         ST    R3,MASKWORD    SAVE FOR FUTURE USE
         LR    R0,R15         GET LENGTH AGAIN
         SRDA  R0,32          SET FOR DIVIDE
         DR    R0,R4          BYTES PER ENTRY
         ST    R1,MASKENTY    SAVE FOR POSTERITY
         MR    R0,R4         GET TRUE (UNROUNDED) LENGTH         85230
         ST    R1,MASKLEN    STASH IT                            85230
         LA    R1,4(R1,R5)   END OF TABLE ADDRESS                85230
         S     R1,MASKENTY    LAST ENTRY ADDRESS
         ST    R1,MASKEND     STASH FOR FUTURE USE
         MVC   ALLDISK+8(4),4(R1)  GET 'ALL DISK' DEVTYPE
         CALL  GETMASK        GO DO GETMAIN FOR SKELETON MASK
*
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  GOBACK
*
MISMATCH MVI   LINE-1,C'0'    SET DOUBLE SPACE
         MVC   LINE(L'MMATCH),MMATCH  MOVE MISMATCH MESSAGE TO LINE
         CALL  PUT            PUT OUT THE LINE
         CALL  CLOSEUP        CLOSE ALL FILES
         ABEND 5              QUIT QUICKLY
         EJECT
*        ENTRY GETMASK        MAKE NAME AVAILABLE
GETMASK  SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET A BASE
*        USING GETMASK,R12    INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         L     R0,MASKENTY    LENGTH OF MASK
         L     R1,MADDR       ADDRESS OF SKELETON MASK
         LTR   R1,R1          IS THERE ONE
         BZ    GETMAIN        NO. FIRST TIME THROUGH
         FREEMAIN R,LV=(0),A=(1)  FREE UP THE AREA
*
GETMAIN  DS    0H
         L     R0,MASKENTY    GET LENGTH OF ENTRY
         GETMAIN R,LV=(0)     GET A SKELETON MASK
         ST    R1,MADDR       SAVE ADDRESS OF SKELETON
*
         IEFRELSE ,           FREE UP SAVE AREAS
         RETURN (14,12),T,RC=0  BACK TO CALLER
         EJECT
*        ENTRY PROCTABL       MAKE NAME AVAILABLE
PROCTABL SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET BASE
*        USING PROCTABL,R12   INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
         AIF   (&MVS).PROCMVS
         LM    R7,R9,NAME#1   NAME TABLE INDEXING
         LM    R3,R5,MASK#1   LOOP CONTROL
PROCLOOP ST    R3,ADDRENTY    SAVE CURRENT DEVMASKT ENTRY
         ST    R7,ADDRNENT    SAVE CURRENT DEVNAMET ENTRY
         CALL  PROCENTY       PROCESS THE ENTRY
         BXLE  R7,R8,*+8      BUMP TO NEXT DEVNAMET ENTRY
         LA    R7,ALLDISK     USE PSEUDO-ENTRY LAST TIME THROUGH
         BXLE  R3,R4,PROCLOOP PROCESS ALL THE ENTRIES
         AGO   .PROCEND
.PROCMVS LM    R7,R9,NAME#1  GET NAME TABLE VALUES               85230
PROCLOOP ST    R7,ADDRNENT   SET CURRENT NAME ADDRESS            85230
         LM    R3,R5,MASK#1  GET MASK TABLE ENTRIES              85230
PROCLOUP CLC   8(4,R7),4(R3)  MATCHING ENTRY ?                   85230
         BE    PROCSOUP      YES; PROCESS                        85230
         BXLE  R3,R4,PROCLOUP  TRY AGAIN                         85230
         EX    0,*           LOGIC ERROR                         85230
PROCSOUP ST    R3,ADDRENTY   SAVE MASK TABLE ADDRESS             85230
         CALL  PROCENTY      PROCESS ONE ENTRY                   85230
         LA    R0,ALLDISK                                        85230
         CR    R7,R0         DOING LAST ENTRY ?                  85230
         BE    PROCSEND      YES; QUIT                           85230
         BXLE  R7,R8,PROCLOOP  REPEAT FOR ALL                    85230
         LA    R7,ALLDISK    SET FOR FAKE ENTRY                  85230
         B     PROCLOOP      DO IT                               85230
PROCSEND DS    0H                                                85230
.PROCEND IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0 BACK TO CALLER
         EJECT
*        ENTRY ZAPDRVR        MAKE NAME AVAILABLE
ZAPDRVR  SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET A BASE
*        USING ZAPDRVR,R12    INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         CALL  ZAPDRVR2       GO OPEN FILES
         XC    UNITCNT,UNITCNT  CLEAR UNIT COUNT
         L     R1,MASKENTY    GET LENGTH OF ENTRY
         BCTR  R1,0           LESS ONE FOR EXECUTE
         L     R2,MADDR       GET ADDRESS OF SKELETON MASK
         EX    R1,XC          CLEAR THE MASK
         MVC   SAVECARD,CARD  SAVE THE ZAP CONTROL CARD
         PUT   ZAPIN,SAVECARD-1  PUT OUT ZAP CARD AS COMMENT
         CALL  READCARD       GO READ A CARD
         TM    SWITCH,EOF     DID WE GET EOF
         BO    NOZAP          YES. ERROR
         CLC   =C'UCB',CARD   IS IT A UCB CONTROL CARD
         BNE   NOZAP          NO. ERROR
         MVC   LINE+20(L'CARD),CARD  COPY CARD TO OUTPUT LINE
         CALL  PUT            PUT OUT THE CARD
*
SCANIT   CALL  SCANUCB        GO SCAN THE UCB CONTROL CARD
         B     *+4(R15)       CHECK RETURN CODE
         B     *+8            ALL OK
         B     NOZAP          SIGNAL ERROR
*
         PUT   ZAPIN,CARD-1   PUT OUT THE CARD AS ZAP COMMENT
         CALL  READCARD       GO READ ANOTHER CARD
         TM    SWITCH,EOF     IS IT EOF
         BO    DOZAP          YES. GO PERFORM ZAP
         CLC   =CL7'UCB',CARD IS IT A UCB CARD
         BE    SCANIT         YES. GO SCAN THE UCB CARD
         OI    SWITCH,REREAD  SET TO REREAD THE CARD
*
DOZAP    CALL  ZAPDRVR3       DROP DOWN A LEVEL
         CALL  LINKZAP        GO LINK TO SUPERZAP
         B     DRVRBACK       BACK TO CALLER
*
NOZAP    MVC   LINE-1(L'INVALID),INVALID  PUT MESSAGE IN LINE
         CALL  PUT            PRINT THE ERROR
         OI    SWITCH,REREAD  SAY REREAD THE CARD
*
DRVRBACK DS    0H
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
         EJECT
*        ENTRY ZAPDRVR2       MAKE NAME AVAILABLE
ZAPDRVR2 SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET A BASE
*        USING ZAPDRVR2,R12   INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         OPEN  (ZAPIN,OUTPUT) OPEN SUPERZAP SYSIN FILE
         LA    R1,ZAPIN       ADDRESS THE DCB
         USING IHADCB,R1      INFORM ASSEMBLER
         TM    DCBOFLGS,DCBOFOPN  DID DCB OPEN
         BZ    BADZAPIN       NO. MISSING DD CARD
         DROP  R1             NO LONGER NEEDED
******   PUT   ZAPIN,DUMPMASK CREATE A DUMP CONTROL CARD
 PUT     ZAPIN,NAMEMASK       CREATE A NAME CONTROL CARD
*
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
*
BADZAPIN MVC   LINE-1(L'MISSIN),MISSIN MISSING DD CARD MESSAGE
         CALL  PUT            PRINT THE MESSAGE
         CALL  CLOSEUP        CLOSE ALL FILES
         ABEND 6              QUIT QUICKLY
*
BADZAP   MVC   LINE-1(L'NOTCALLD),NOTCALLD MOVE MESSAGE
         CALL  PUT            PRINT THE LINE
         CALL  CLOSEUP        CLOSE EVERYTHING
         ABEND 6              QUIT QUICKLY
         EJECT
*        ENTRY ZAPDRVR3       MAKE NAME AVAILABLE
ZAPDRVR3 SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET BASE
*        USING ZAPDRVR3,R12   INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         LM    R3,R5,=A(SAVECARD+7,8,SAVECARD+64)  LOOP CONTROL
DRVR3BGN CLC   =CL8' ',0(R3)  IS IT THE END OF THE CARD YET
         BE    DRVR3BAK       YES. GO QUIT
         ST    R3,ADDFIELD    SAVE THE ADDRESS OF NAME TO CHANGE
         MVC   WTG,=A(ZAPGEN) SAY GENERATE ZAP CARDS
         CALL  FINDENTY       GO PROCESS THIS ENTRY
         BXLE  R3,R4,DRVR3BGN LOOP TILL END OF CARD
*
DRVR3BAK DS    0H
******   PUT   ZAPIN,DUMPMASK DUMP AFTER ZAP
         CLOSE ZAPIN          CLOSE ZAP SYSIN FILE
         FREEPOOL ZAPIN       CLEAN UP BUFFER SITUATION
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
         EJECT
*        ENTRY ZAPGEN         MAKE NAME AVAILABLE
ZAPGEN   SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET BASE
*        USING ZAPGEN,R12     INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         MVC   NEWMASK,ADDRENTY  OLD ENTRY IS MASK FOR VER
         MVC   ZAPVERB,=C'VER'  GENERATE A VER CARD
         CALL  ZAPVER         GENERATE THE SUPERZAP CARDS
         MVC   NEWMASK,MADDR  USE NEW MASK FOR REP CARDS
         MVC   ZAPVERB,=C'REP'  GENERATE A REP THIS TIME
         CALL  ZAPVER         GENERATE THE REP CARDS
*
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO USER
         EJECT
*        ENTRY ZAPVER         MAKE NAME AVAILABLE
ZAPVER   SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET A BASE
*        USING ZAPVER,R12     INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         L     R3,ADDRENTY    ADDRESS OF THIS MASK ENTRY
         S     R3,ADDRMASK    CALCULATE DISPLACEMENT
         L     R5,NEWMASK     ADDRESS OF MASK TO USE
         L     R6,MASKWORD    MASK WORDS PER ENTRY
         LA    R6,2(,R6)      WORDS PER ENTRY
*
VERLOOP  MVC   ZAPCARD,ZAPCARD-1  CLEAR THE CARD TO BUILD
         ST    R3,TEMP        STORE DISPLACEMENT FOR CONVERSION
         UNPK  H5,TEMP+2(3)   CONVERT TO HEX
         TR    H5(4),HEXTABLE ...
         MVC   ZAPCARD+1(3),ZAPVERB  SAY VER OR REP
         MVC   ZAPCARD+5(4),H5  MOVE IN DISPLACEMENT
*        UNPK  H9,0(5,R5)     CONVERT TO HEX (FAILS IN VS ON LAST BYTE)
         MVC   DOUBLE(4),0(R5)   MOVE TO SAFE SPOT               81186
         UNPK  H9,DOUBLE(5)  UNPACK ONE MORE                     81186
         TR    H9(8),HEXTABLE ...
         MVC   ZAPCARD+11(8),H9  MOVE MASK TO CARD
         PUT   ZAPIN,ZAPCARD  PUT OUT THE CARD
         LA    R3,4(,R3)      BUMP DISPLACEMENT
         LA    R5,4(,R5)      BUMP TO NEXT MASK WORD
         BCT   R6,VERLOOP     PUT OUT THE WHOLE MASK
*
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
         EJECT
*        ENTRY LINKZAP        MAKE NAME AVAILABLE
LINKZAP  SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SAVE REGISTERS
*        USING LINKZAP,R12    INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         LA    R1,ZAPPARM    PASS THE PARM OPTIONS/DDNAME OPTIONS
         LINK  EP=IMASPZAP    INVOKE SUPERZAP
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
         EJECT
*        ENTRY FINDENTY       MAKE NAME AVAILABLE
FINDENTY SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET A BASE
*        USING FINDENTY,R12   INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         L     R2,ADDFIELD    CURRENT INPUT FIELD
         AIF   (&MVS).FINDMVS
         LM    R7,R9,NAME#1   DEVNAMET CONTROL REGISTERS
         LM    R3,R5,MASK#1   DEVMASKT CONTROL REGISTERS
FINDLOOP CLC   0(8,R2),0(R7)  IS THIS THE ENTRY
         BNE   FINDBXLE       NO. GO TRY NEXT ENTRY
         ST    R3,ADDRENTY    STORE MASK ENTRY ADDRESS
         ST    R7,ADDRNENT    STORE NAME ENTRY ADDRESS
         L     R2,MADDR       LOAD SKELETON MASK ADDRESS
         MVC   4(4,R2),4(R3)  COPY DEVTYPE TO SKELETON
         L     R15,WTG        LOAD ADDRESS TO CALL
         CALL  (15)           CALL PROCESSING ROUTINE
         B     FINDBACK       ALL DONE THIS FIELD
FINDBXLE BXLE  R7,R8,*+8      BUMP TO NEXT NAME TABLE ENTRY
         LA    R7,ALLDISK     POINT TO PSEUDO-ENTRY LAST TIME THROUGH
         BXLE  R3,R4,FINDLOOP PROCESS ALL MASK ENTRIES
         AGO   .FINDCOM                                          85230
.FINDMVS LA    R7,ALLDISK    POINT TO FAKE ENTRY                 85230
         CLC   ALLDISK,0(R2)  FAKE ENTRY REQUESTED ?             85230
         BE    FINDLOUP      YES                                 85230
         LM    R7,R9,NAME#1  GET NAME TABLE REGISTERS            85230
FINDLOOP CLC   0(8,R2),0(R7)  IS THIS THE ENTRY ?                85230
         BNE   FINDBXLE      NO; TRY NEXT ONE                    85230
FINDLOUP ST    R7,ADDRNENT   STORE NAME ENTRY ADDRESS            85230
         LM    R3,R5,MASK#1  GET MASK TABLE REGISTERS            85230
FINDLOOK CLC   8(4,R7),4(R3)  SAME DEVICE TYPE ?                 85230
         BE    FINDLOUK      YES                                 85230
         BXLE  R3,R4,FINDLOOK  ELSE TRY AGAIN                    85230
         B     FINDMISS      MAJOR ERROR                         85230
FINDLOUK ST    R3,ADDRENTY   SAVE MASK TABLE ADDRESS             85230
         L     R2,MADDR       LOAD SKELETON MASK ADDRESS         85230
         MVC   4(4,R2),4(R3)  COPY DEVTYPE TO SKELETON           85230
         L     R15,WTG        LOAD ADDRESS TO CALL               85230
         CALL  (15)           CALL PROCESSING ROUTINE            85230
         B     FINDBACK       ALL DONE THIS FIELD                85230
FINDBXLE BXLE  R7,R8,FINDLOOP BUMP TO NEXT NAME TABLE ENTRY      85230
.FINDCOM SPACE 1                                                 85230
FINDMISS MVC   LINE-1(L'MISSFLD),MISSFLD  PUT IN MISSING NAME MESSAGE
         MVC   LINE(8),0(R2)  MOVE DEVNAME TO MESSAGE
         CALL  PUT            PUT OUT THE MESSAGE
*
FINDBACK DS    0H
         IEFRELSE ,           FREE UP SAVE AREAS
         RETURN (14,12),T,RC=0  BACK TO CALLER
         EJECT
*        ENTRY PROCENTY       MAKE NAME AVAILABLE
PROCENTY SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET A BASE
*        USING PROCENTY,R12   INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         CALL  ENTHEAD        PUT OUT THE HEADER FOR THIS ENTRY
         XC    UNITCNT,UNITCNT  CLEAR UNIT COUNTER
         MVC   LINECTL,=A(LINE+2)  REFRESH PRINT LINE CONTROL REGISTER
         L     R3,ADDRENTY    GET ADDRESS OF CURRENT ENTRY
         L     R4,ADDRCVT     GET CVT ADDRESS
         USING CVTMAP,R4      INFORM ASSEMBLER                   92056
         L     R4,CVTILK2     ADDRESS OF UCB ADDRESSES
         DROP R4              CLEAN UP
         LA    R2,32          32 BITS PER WORD
         LA    R6,8(,R3)      ADDRESS OF FIRST MASK WORD
         L     R8,0(,R6)      FIRST MASK WORD
UNITLOOP SLR   R7,R7                                             85230
         ICM   R7,3,0(R4)    GET NEXT UNIT ADDRESS               85230
         C     R7,=X'0000FFFF'  END OF TABLE ?                   85230
         BE    UNITDONE       YES. ALL DONE
         LTR   R8,R8          IS THIS MASK BIT ON
         BNM   NOUNIT         NO
         LTR   R7,R7          IS THIS VALID UCB ADDRESS
         BZ    UNITSTBA      TOO BAD
         A     R7,ADDRIOS    RELOCATE
         B     UNITSTST      SAVE
UNITSTBA LA    R7,BADUCB      LOAD PSEUDO-UCB ADDRESS
UNITSTST ST    R7,CURNTUCB    CURRENT UCB ADDRESS
         CALL  PRTUNIT        PRINT OUT THE INFO
NOUNIT   DS    0H
         SLL   R8,1           SHIFT IN NEXT MASK BIT
         BCT   R2,SAMEWORD    DO ALL 32 BITS
         LA    R2,32          RESET COUNTER
         LA    R6,4(,R6)      POINT TO NEXT WORD
         L     R8,0(,R6)      GET NEXT WORD
SAMEWORD LA    R4,2(,R4)      NEXT UCB POINTER
         B     UNITLOOP       GO THROUGH ENTIRE UCB TABLE
*
UNITDONE DS    0H
         CLC   LINE,LINE-1    IS LINE BLANK
         BE    NOPUT          YES. DO NOT PUT IT OUT
         CALL  PUT            FLUSH LAST LINE
NOPUT    DS    0H
         IEFRELSE ,           FREE SAVE AREA
         RETURN (14,12),T,RC=0  GOBACK
         EJECT
*        ENTRY ENTHEAD        MAKE NAME AVAILABLE
ENTHEAD  SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET BASE
*        USING ENTHEAD,R12    INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         CP    LINECNT,=P'52' ARE WE TOO CLOSE TO BOTTOM OF PAGE
         BNH   *+10           NO.
         ZAP   LINECNT,=P'58' YES. FORCE OVERFLOW
*
         L     R3,ADDRENTY    ADDRESS OF CURRENT MASK ENTRY
         L     R4,ADDRNENT    ADDRESS OF CURRENT NAME ENTRY
         MVC   LINE(8),0(R4)  MOVE NAME TO PRINT LINE
         UNPK  LINE+10(9),4(5,R3)  MOVE DEVTYPE TO PRINT LINE
         TR    LINE+10(8),HEXTABLE  COMPLETE HEX CONVERSION
         MVI   LINE+18,C' '   BLANK GARBAGE BYTE
         L     R0,0(,R3)      PICK UP NUMBER OF UCB'S
         CVD   R0,DOUBLE      CONVERT TO DECIMAL
         MVC   LINE+20(3),=X'202120'  EDIT MASK
         ED    LINE+19(4),DOUBLE+6  MOVE NUMBER TO LINE
         MVC   LINE+24(5),=C'UCB''S'  MOVE LABEL TO LINE
         CH    R0,=H'1'       IS THERE ONLY ONE UCB
         BNE   *+10           NO
         MVC   LINE+27(2),=CL2' ' YES. MAKE SINGULAR
         MVI   LINE-1,C'0'    DOUBLE SPACE THE HEADER
         CALL  PUT            PUT OUT THE HEADER
         CALL  PUT            PUT OUT A BLANK LINE
*
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
         EJECT
*        ENTRY TURNON         MAKE NAME AVAILABLE
TURNON   SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET A BASE
*        USING TURNON,R12     INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         L     R1,ADDRCVT     GET CVT ADDRESS
         USING CVTMAP,R1      ADDRESS CVT                        92056
         L     R1,CVTILK2     UCB LOOKUP TABLE ADDRESS
         DROP  R1             NO LONGER AVAILABLE
*
         SR    R6,R6          UCB COUNTER
         L     R3,ADDRUCB     ADDRESS OF UCB VALUE TO LOCATE
*
TURNLOOP SLR   R4,R4                                             85230
         ICM   R4,3,0(R1)    LOAD AND TEST UCB ADDRESS           85230
         BZ    TURNLEND       HOLE IN THE TABLE (VALID)
         C     R4,=X'0000FFFF'  END OF TABLE ?                   85230
         BE    TURNBAD       YES; INVALID UCB                    85230
         A     R4,ADDRIOS    RELOCATE UCB
         USING UCBDSECT,R4    ADDRESS THE UCB
         CLC   UCBNAME,0(R3)  IS THIS THE UCB
         DROP  R4             CLEAN UP
         BNE   TURNLEND       UCB NOT FOUND. GO TRY NEXT ONE
         SRDA  R6,32          SET UCB INDEX FOR DIVIDE
         D     R6,=F'8'       CONVERT TO BITS AND BYTES
         L     R2,MADDR       GET SKELETON MASK ADDRESS
         LA    R2,8(R7,R2)    ADDRESS OF BYTE WITHIN MASK
         IC    R6,BITTABLE(R6)  CHOOSE THE CORRECT BIT
         EX    R6,TM          IS THIS UCB ALREADY ON
         BO    TURNDUP        YES. GIVE ERROR MESSAGE
         EX    R6,OI          TURN ON THE BIT
         L     R15,UNITCNT    GET THE UNIT COUNT
         LA    R15,1(,R15)    BUMP IT ONE
         ST    R15,UNITCNT    PUT IT BACK
         L     R2,MADDR       GET SKELETON MASK ADDRESS
         ST    R15,0(,R2)     SET UNIT COUNT IN SKELETON
*
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
*
TURNLEND LA    R1,2(,R1)      NEXT UCB TABLE ENTRY
         LA    R6,1(,R6)      ONE MORE UCB TO COUNT
         B     TURNLOOP       GO AROUND THE LOOP
*
TURNBAD  MVC   LINE-1(L'NOUCB),NOUCB  PUT ERROR MESSSAGE IN LINE
TURNMSG  MVC   LINE(3),0(R3)  PUT UCB NAME INTO MESSAGE
         CALL  PUT            PUT OUT THE ERROR MESSAGE
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=4  RETURN BAD UCB
*
TURNDUP  MVC   LINE-1(L'DUPUCB),DUPUCB  MOVE MESSAGE TO LINE
         B     TURNMSG        GO PUT IT OUT
         EJECT
*        ENTRY SCANUCB        MAKE NAME AVAILABLE
SCANUCB  SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,15         SET A BASE
*        USING SCANUCB,R12    INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         LM    R3,R5,=A(CARD+7,8,CARD+63)  SCAN CONTROL
*
SCANLOOP CLC   =CL8' ',0(R3)  IS IT END OF SCAN YET
         BE    SCANBACK       YES
         ST    R3,ADDRUCB     SAVE UCB ADDRESS
         CLI   3(R3),C'-'     IS IT A RANGE OF UCB'S
         BE    RANGE          YES. GO PROCESS THE RANGE
         CALL  TURNON         TURN ON THE BIT FOR THIS UCB
         B     *+4(R15)       TEST RETURN CODE
         B     SCANBXLE       ALL OK
         B     SCANERR        GIVE ERROR MESSAGE
*
RANGE    CALL  UCBRANGE       GO PROCESS THE UCB RANGE
         B     *+4(R15)       TEST RETURN CODE
         B     SCANBXLE       ALL OK
         B     SCANERR        GIVE ERROR MESSAGE
*
SCANBXLE BXLE  R3,R4,SCANLOOP  CONTINUE ACROSS THE CARD
SCANBACK IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
*
SCANERR  IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=4  GIVE ERROR RETURN
         EJECT
*        ENTRY UCBRANGE       MAKE NAME AVAILABLE
UCBRANGE SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET A BASE
*        USING UCBRANGE,R12   INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         L     R3,ADDRUCB     GET ADDRESS OF UCB FIELD
         TRT   0(3,R3),HEXTEST  IS IT VALID HEX CODE
         BNZ   RANGEBAD       NO. GIVE ERROR
         TRT   4(3,R3),HEXTEST  CHECK END OF RANGE
         BNZ   RANGEBAD       BAD HEX CODE
         MVC   HEXW1,0(R3)    COPY BEGINNING OF RANGE
         MVC   HEXW2,4(R3)    COPY END OF RANGE
         TR    HEXW1(6),HEXTRAN  BEGIN CONVERSION TO BINARY
         PACK  HEXUCB(3),HEXW1(4)  COMPLETE CONVERSION
         PACK  HEXUCB+2(3),HEXW2(4) ...
         CLC   HEXUCB(2),HEXUCB+2  IS FIRST UCB GREATER THAN SECOND
         BH    RANGEBAD       YES. ERROR
RANGEL   UNPK  RANGEUCB(4),HEXUCB(3)  UCB BACK TO CHARACTER
         TR    RANGEUCB(3),HEXTABLE  ...
         LA    R0,RANGEUCB    NEW UCB ADDRESS
         ST    R0,ADDRUCB     PASS TO BIT TURNON ROUTINE
         CALL  TURNON         TURN ON THE BIT
         B     *+4(R15)       TEST RETURN CODE
         B     *+8            ALL OK
         B     RANGEBAD       SAY BAD RANGE
         LH    R1,HEXUCB      GET UCB ADDRESS
         LA    R1,1(,R1)      BUMP IT
         STH   R1,HEXUCB      PUT IT BACK
         CH    R1,HEXUCB+2    ARE WE DONE
         BNH   RANGEL         NO. GO AROUND AGAIN
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
*
RANGEBAD MVC   LINE-1(L'RANGEMES),RANGEMES MOVE ERROR MESSAGE
         CALL  PUT            PRINT ERROR MESSAGE
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=4  GIVE ERROR RETURN
         EJECT
*        ENTRY PRTUNIT        MAKE NAME AVAILABLE
PRTUNIT  SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET BASE
*        USING PRTUNIT,R12    INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         L     R2,CURNTUCB    LOAD UCB ADDRESS
         USING UCBDSECT,R2    INFORM ASSEMBER
         LM    R3,R5,LINECTL  LOAD LINE CONTROL REGISTERS
         MVC   0(3,R3),UCBNAME MOVE IN UCB NAME
         BXLE  R3,R4,PRTBACK  BUMP TO NEXT SLOT
         CALL  PUT            LINE IS FULL. PUT IT
         LA    R3,LINE+2      RESET TO BEGINNING OF LINE
PRTBACK  ST    R3,LINECTL     SAVE CONTROL REGISTER FOR NEXT ENTRY
*
         IEFRELSE ,           FREE SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
         DROP  R2             CLEAN UP
         EJECT
*        ENTRY PUTOPEN        MAKE NAME AVAILABLE
PUTOPEN  SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET BASE
*        USING PUTOPEN,R12    INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         OPEN  (SYSPRINT,OUTPUT)  OPEN THE OUTPUT FILE
         USING IHADCB,R1      ADDRESS THE DCB
         LA    R1,SYSPRINT    SET THE BASE
         TM    DCBOFLGS,DCBOFOPN  DID DCB OPEN
         BZ    PUTABEND       NO. GO ABEND
         TIME  DEC            GET TIME AND DATE
         STM   R0,R1,TIME     SAVE TIME AND DATE
         ED    LINETIME,TIME  PUT TIME INTO OUTPUT LINE
         ED    LINEDATE,DATE+1  PUT DATE INTO OUTPUT LINE
*
         IEFRELSE ,           FREE SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
*
PUTABEND ABEND 1              MISSING SYSPRINT DD CARD
         EJECT
PUTEXIT  DS    0H
         USING PUTEXIT,R15    BASE FOR EXIT
         STM   R2,R3,SAVET    SAVE WORK REGISTERS
         LH    R2,DCBBLKSI    GET BLKSIZE
         LTR   R2,R2          WAS ONE SPECIFIED
         BNZ   *+8            YES
         LH    R2,DCBLRECL    USE LRECL AS BLKSIZE
         SRDA  R2,32          SET FOR DIVIDE
         LH    R0,DCBLRECL    GET LRECL
         DR    R2,R0          BLOCKING FACTOR
         LTR   R2,R2          IS BLKSIZE EVEN MULTIPLE OF LRECL
         STH   R0,DCBBLKSI    USE LRECL IF NOT
         BNZ   EXITBACK       NOT EVEN MULTIPLE
         LTR   R3,R3          IS BLKSIZE LESS THAN LRECL
         BZ    EXITBACK       YES. USE LRECL
         MR    R2,R0          CALCULATE BLOCKSIZE
         STH   R3,DCBBLKSI    PUT BLKSIZE BACK
EXITBACK LM    R2,R3,SAVET    RESTORE WORK REGISTERS
         BR    R14            BACK TO OPEN
*
SAVET    DS    2A
         DROP  R1,R15         CLEAN UP
         EJECT
*        ENTRY PUT            MAKE NAME AVAILABLE
PUT      SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET BASE
*        USING PUT,R12        INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         CLI   LINE-1,C'0'    IS IT DOUBLE SPACE
         BNE   *+10           NO
         AP    LINECNT,=P'1'  YES. COMPENSATE FOR EXTRA LINE
         AP    LINECNT,=P'1'  ADD ONE TO LINE COUNTER
         CP    LINECNT,=P'58' COMPARE TO LINE LIMIT
         BNH   SAMEPAGE       STAY ON SAME PAGE
         AP    PAGECNT,=P'1'
         MVC   LINEPAGE,=X'40202120'  MOVE IN EDIT MASK
         ED    LINEPAGE,PAGECNT  MOVE PAGE COUNT TO OUTPUT LINE
         PUT   SYSPRINT,HEADER-1  PUT OUT THE HEADER
         MVI   LINE-1,C'0'    DOUBLE SPACE AFTER HEADER
         ZAP   LINECNT,=P'3'  RESET LINE COUNTER
SAMEPAGE PUT   SYSPRINT,LINE-1  PUT OUT THE LINE
         MVI   LINE-1,C' '    SINGLE SPACE THE NEXT LINE
         MVC   LINE,LINE-1    LEAVE LINE BLANK
*
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
         EJECT
*        ENTRY READCARD       MAKE NAME AVAILABLE
READCARD SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET BASE
*        USING READCARD,R12   INFORM ASSEMBLER
         IEFSAVER ,           CHAIN SAVE AREAS
*
         LA    R2,SYSIN       ADDRESS DCB
         USING IHADCB,R2      INFORM ASSEMBLER
         TM    SWITCH,PENDEOF+EOF  SHOULD WE PRESENT EOF
         BNZ   EODAD2         BY ALL MEANS
         TM    SWITCH,REREAD  SHOULD WE REREAD CARD
         BO    REREADIT       YES. GO REREAD IT
         TM    DCBOFLGS,DCBOFOPN  IS DCB OPEN
         BO    ISSUEGET       YES. GET A CARD
         OPEN  SYSIN          OPEN UP SYSIN
         TM    DCBOFLGS,DCBOFOPN  DID IT OPEN
         BZ    EODAD1         NO. SIMULATE IMMEDIATE EOF
ISSUEGET GET   SYSIN,CARD     GET A CARD
         MVC   DCBEODAD+1(3),=AL3(EODAD2)  SET FOR SECOND TIME ET. AL.
         B     GETBACK        RETURN TO CALLER
REREADIT NI    SWITCH,255-REREAD  TURN OFF REREAD
         B     GETBACK        BACK TO CALLER
EODAD1   MVC   CARD,=CL80'LIST'  SIMULATE LIST CONTROL CARD
         OI    SWITCH,PENDEOF LEAVE EOF PENDING
         B     GETBACK        RETURN TO CALLER
EODAD2   NI    SWITCH,255-PENDEOF  NO LONGER PENDING EOF
         OI    SWITCH,EOF     ... BUT A REAL ONE
*
GETBACK  DS    0H
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
         DROP  R2
         EJECT
*        ENTRY PROCCARD       MAKE NAME AVAILABLE
PROCCARD SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET A BASE
*        USING PROCCARD,R12   INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         CLC   =CL7'EJECT',CARD  IS IT AN EJECT CARD
         BNE   PRINTIT        NO. GO PRINT IT
         ZAP   LINECNT,=P'58' FORCE NEW PAGE
         B     CARDBACK       ...AND RETURN
*
PRINTIT  DS    0H
         MVC   LINE+20(L'CARD),CARD  MOVE CARD TO OUTPUT LINE
         MVI   LINE-1,C'0'    FORCE DOUBLE SPACE
         CALL  PUT            LIST THE CONTROL CARD
         CLI   CARD,C'*'     COMMENTS CARD ?
         BE    CARDBACK      YES - HAS BEEN PRINTED
*
         CLC   =CL7'LIST',CARD  IS IT A LIST CONTROL CARD
         BNE   TESTZAP        NO. GO SEE IF ITS IS A ZAP CARD
         CLC   =CL8' ',CARD+7 IS IT A LISTALL FUNCTION
         BNE   LISTSPEC       NO
LISTALL  CALL  PROCTABL       GO LIST WHOLE TABLE
         B     CARDBACK       BACK TO CALLER
LISTSPEC CALL  SPECLIST       LIST ONLY REQUESTED ENTRIES
         B     CARDBACK       ... AND RETURN
*
TESTZAP  DS    0H
         CLC   =CL7'ZAP',CARD IS IT A ZAP CONTROL CARD
         BNE   BADCARD        NO. MUST BE A BAD CARD
         AIF   ('&LOCAL' NE 'CCSI').GOTAUTH                      81186
         TM    LOCAUTH,VAASYS   SYSTEMS ACCOUNT NUMBER ?         81186
         BZ    BADCARD       NO; FAIL IT                         81186
.GOTAUTH CALL  ZAPDRVR        CALL ZAP DRIVER ROUTINE            81186
         B     CARDBACK       GO RETURN
*
BADCARD  MVC   LINE-1(L'BADMSG),BADMSG  FILL IN ERROR MESSAGE
         CALL  PUT            PUT OUT THE MESSAGE
*
CARDBACK DS    0H
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
         EJECT
*        ENTRY CLOSEUP        MAKE NAME AVAILABLE
CLOSEUP  SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET A BASE
*        USING CLOSEUP,R12    INFORM ASSEMBER
         IEFSAVER ,           LINK SAVE AREAS
*
         DELETE DE=NUCLEUS1    FREE SPACE IN THE REGION
         CLOSE (SYSPRINT,,SYSIN,,ZAPLIB,,NUCLEUS)  CLOSE ALL FILES
         USING IHADCB,R1      ADDRESS DCB
         LA    R1,SYSPRINT    ADDRESS SYSPRINT
         TM    DCBBUFCB+3,1   ARE BUFFERS FREE
         BO    FREESYSN       YES. GO FREE SYSIN
         FREEPOOL SYSPRINT    FREE THE BUFFERS
FREESYSN LA    R1,SYSIN       ADDRESS SYSIN
         TM    DCBBUFCB+3,1   ARE BUFFERS FREE
         BO    FREELM         YES. GO DELETE DEVICE TABLES
         FREEPOOL SYSIN       FREE SYSIN BUFFERS
FREELM   DELETE DE=DEVNAMET   DELETE DEVICE NAME TABLE
         DELETE DE=DEVMASKT   DELETE DEVICE MASK TABLE
*
         IEFRELSE ,           FREE UP SAVE AREAS
         RETURN (14,12),T,RC=0  BACK TO CALLER
         DROP  R1
         EJECT
*        ENTRY SPECLIST       MAKE NAME AVAILABLE
SPECLIST SAVE  (14,12),,*     SAVE REGISTERS
*        LR    R12,R15        SET A BASE
*        USING SPECLIST,R12   INFORM ASSEMBLER
         IEFSAVER ,           LINK SAVE AREAS
*
         LM    R3,R5,=A(CARD+7,8,CARD+63)  LOOP CONTROL
SPECBGN  CLC   =CL8' ',0(R3)  IS FIELD BLANK
         BE    SPECBACK       YES. QUIT
         ST    R3,ADDFIELD    SAVE ADDRESS OF FIELD
         MVC   WTG,=A(PROCENTY)  SET BRANCH TO LIST ROUTINE
         CALL  FINDENTY       FIND ENTRY FOR THIS FIELD
*
SPECLOOP BXLE  R3,R4,SPECBGN  SEARCH ALL FIELDS
*
SPECBACK DS    0H
         IEFRELSE ,           FREE UP SAVE AREA
         RETURN (14,12),T,RC=0  BACK TO CALLER
         TITLE 'DEVICE TYPE ANALYZER - ALTERNATE NUCLEUS PROCESSING'
*        ENTRY LOADNUC
LOADNUC  SAVE  (14,12),,*
*        LR    R12,R15
*        USING LOADNUC,R12
         IEFSAVER ,
*
         L     R4,CVTPTR     PROVISIONALLY SET DEFAULT CVT ADDRESS
         XR    R5,R5         SET DEFAULT IOS BASE ADDRESS
         DEVTYPE NUCLEUS+40,DOUBLE  WAS A DD SUPPLIED ?
         LTR   R15,R15
         BNZ   LOADSTOR      NO; USE DEFAULT
         OC    DOUBLE(4),DOUBLE  WAS IT A DD DUMMY ?
         BZ    LOADSTOR      YES; USE DEFAULT NUCLEUS
         CLI   DOUBLE+2,X'20'  DISK DD ?
         BE    LOADNOPN      OK
*
LOADBADN MVI   LINE-1,C'0'
         MVI   LINE,C' '
         MVC   LINE+1(L'LINE-1),LINE  CLEAR LINE
         MVC   LINE+5(L'BADNUC),BADNUC
         CALL  PUT
         CALL  CLOSEUP
         ABEND 16
*
LOADNOPN MVI   JFCBDSNM,X'FF'  SET TEST BYTE
         RDJFCB (NUCLEUS)    GET THE JFCB
         CLI   JFCBDSNM,X'FF'  WAS IT READ IN ?
         BE    LOADBADN      NO
         CLI   JFCBELNM,C'A'  WAS A MEMBER NAME SUPPLIED ?
         BL    LOADOPNN      NO
         MVC   NUCLEUS1(8),JFCBELNM  MOVE REQUESTED NAME
         MVC   BADNUC+L'BADNUC-9(8),JFCBELNM  MOVE TO MESSAGE
*
LOADOPNN OPEN  (NUCLEUS,INPUT),TYPE=J
         TM    NUCLEUS+DCBOFLGS-IHADCB,DCBOFOPN  OPENED ?
         BZ    LOADBADN
         AIF   (NOT &MVS).NOTAUTH                                85230
         TESTAUTH FCTN=1     ARE WE AUTHORIZED ?                 85230
         BXH   R15,R15,NOTAUTH  NO, WILL BOMB LATER              85230
         MODESET KEY=ZERO    GET READY TO CLOBBER STORAGE        85230
         L     R1,NUCLEUS+DCBDEBAD-IHADCB   GET DEB              85230
         USING DEBBASIC,R1                                       85230
         OI    DEBFLGS1,DEBAPFIN  TURN ON APF LIBRARY BIT        85230
         DROP  R1                                                85230
         MODESET KEY=NZERO   RESTORE KEY                         85230
NOTAUTH  DS    0H                                                85230
.NOTAUTH BLDL  NUCLEUS,NUCLST  GET INFO                          85230
         LTR   R15,R15
         BNZ   LOADBADN
         NC    NUCLEUS1+22(2),=X'3FFE'
         TM    NUCLEUS1+22,X'04'  SCATTER LOAD ?
         BZ    LOADBADN      NO; CAN'T BE NUCLEUS
         NI    NUCLEUS1+22,255-X'04'   TEST - TURN IT OFF
         XC    NUCLEUS1+29(3),NUCLEUS1+29 ZERO THE ENTRY POINT ADDRESS
         LOAD  DE=NUCLEUS1,DCB=NUCLEUS  LOAD IT
         LR    R5,R0         SAVE START ADDRESS
         SH    R5,LOADNLOP+2
LOADNLOP LA    R5,8(R5,0)    TRY NEXT DOUBLE WORD
         AIF   (NOT &MVS).NUCNMVS                                85230
         CLC   IOSSTART,0(R5)  FOUND PSA YET ?                   85230
         BNE   LOADNLOP      NO                                  85230
         LR    R1,R5         COPY OVER                           85230
         SH    R1,=H'512'    SPACE BACK TO IOS START PROPER      85230
         CLC   CVTPTR(4,R1),IOSCVTOF(R1)  BOTH CVT POINTERS OK ? 85230
         BNE   LOADNLOP      NO                                  85230
         LR    R5,R1         SET IOS START                       85230
         AGO   .NUCCOM                                           85230
.NUCNMVS AIF   (&SVS).NUCSVS                                     82195
         CLC   IOSSTART(IOSCVTOF),0(R5)  LOOKS LIKE I/O START ?
         BNE   LOADNLOP      NO
         TM    IOSCVTOF+3(R5),X'07' NEXT WORD ON DB BOUND ?
         BNZ   LOADNLOP      NO
         CLC   IOSCVTOF(4,R5),CVTMZ00-CVTMAP(R4)  IN-CORE ?      92056
         BNL   LOADNLOP      NO
         AGO   .NUCCOM
.NUCSVS  CLC   =X'040C0000',0(R5)
         BNE   LOADNLOP
         CLC   =X'040C0000',88(R5)
         BNE   LOADNLOP
         OC    8(8,R5),8(R5)
         BNZ   LOADNLOP
         OC    20(56,R5),20(R5)
         BNZ   LOADNLOP
         CLC   16(4,R5),76(R5)
         BNE   LOADNLOP
         CLC   =X'FFFFFFFF00000000',80(R5)
         BNE   LOADNLOP
.NUCCOM  L     R1,IOSCVTOF(,R5)  LOAD IT
         CLC   LOCCVT(4),CVTEXIT-CVTMAP(R1)  SVC EXIT/BR 14 ?    92056
         BNE   LOADNLOP      NO
         LR    R4,R1         ASSUME CVT
*
LOADSTOR STM   R4,R5,ADDRCVT    SAVE CVT/IOS ADDRESS
LOADBACK DS    0H ,
         IEFRELSE ,
         RETURN (14,12),T,RC=0
         TITLE 'DEVICE NAME TABLE FORMATTER - DSECTS'
         DCBD  DSORG=PS,DEVD=(DA,TA)
CVTDSECT DSECT
         CVT   DSECT=YES
         IHACDE ,                                                81186
UCBDSECT DSECT
         IEFUCBOB
*
DEVTABLE CSECT                RESUME CSECT
         TITLE 'DEVICE NAME TABLE FORMATTER - DATA AREA'
         REGEQU
         LTORG
         DS    0D             ALIGNMENT
DOUBLE   DS    PL8            A DOUBLE WORD FOR CVD
HEXTABLE EQU   *-C'0'         VIRTUAL ORIGIN OF HEXTABLE
         DC    C'0123456789ABCDEF'  HEX TRANSLATE TABLE
H9       DS    PL9            UNPK WORK AREA
H5       DS    PL5            UNPK WORK AREA
TEMP     DS    F              UNPK WORK AREA
NEWMASK  DS    A              ADDRESS OF MASK FOR REP AND VER CARDS
RANGEUCB DS    CL4            CURRENT UCB IN RANGE
HEXUCB   DS    XL5            UCB RANGE WORK AREA
HEXW1    DS    XL3            HEX TO BINARY PACK AREA
HEXW2    DS    XL3            HEX TO BINARY PACK AREA
HEXTRAN  EQU   *-C'A'         VIRTUAL ORIGIN OF HEX TO BINARY TABLE
         DC    X'0A0B0C0D0E0F'
         ORG   HEXTRAN+C'0'   POSITION FOR NUMERICS
         DC    C'0123456789'
HEXTEST  DC    256X'FF'       VALID HEX DIGIT TESTER
         ORG   HEXTEST+C'A'   POSITION FOR LETTERS
         DC    6X'00'         ACCEPT A-F
         ORG   HEXTEST+C'0'   POSITION FOR DIGITS
         DC    10X'00'        ACCEPT 0-9
         ORG   ,              BUMP OVER TABLE
ADDRMASK DS    A              ADDRESS OF DEVICE MASK TABLE
MASK#1   DS    A            / FIRST MASK TABLE ENTRY ADDRESS
MASKENTY DS    F           /  NUMBER OF BYTES IN EACH ENTRY
MASKEND  DS    A          /   ADDRESS OF LAST TABLE ENTRY
NAME#1   DS    A            / ADDRESS OF FIRST NAME FIELD ENTRY
NAMEENTY DC    F'12'       /  NUMBER OF BYTES IN EACH ENTRY
NAMEEND  DS    A          /   ADDRESS OF LAST NAME FIELD ENTRY
MASKLEN  DS    F              LENGTH OF DEVICE MASK TABLE LESS 4
MASKWORD DS    F              NUMBER OF WORDS IN EACH MASK
ADDRNAME DS    A              ADDRESS OF DEVICE NAME TABLE
ADDRENTY DS    A              ADDRESS OF CURRENT MASK TABLE ENTRY
ADDRNENT DS    A              ADDRESS OF CURRENT NAME TABLE ENTRY
UNITCNT  DS    F              NUMBER OF UNITS THIS UCB
CURNTUCB DS    A              ADDRESS OF CURRENT UCB
ADDRUCB  DS    A              ADDRESS OF NAME OF UCB BEING LOCATED
ADDFIELD DS    A              ADDRESS OF CURRENT FIELD ON INPUT CARD
MADDR    DC    A(0)           ADDRESS OF SKELETON MASK ENTRY
ADDRCVT  DC    F'0'          ADDRESS OF THE CVT TO BE USED
ADDRIOS  DC    A(0)          BASE ADDRESS OF I/O SUPERVISOR FOR UCBS
WTG      DS    V              BRANCH ADDRESS FOR COMMON ROUTINE
LINECTL  DC    A(LINE+2,4,LINE+117) PRINT CONTROL REGISTERS
BADUCB   EQU   *-(UCBNAME-UCBDSECT)
         DC    C'BAD'         DEVICE ADDRESS FOR BAD UCB
ALLDISK  DC    C'*ALLDISK',XL4'0' PSEUDO-DEVNAMET ENTRY FOR ALL DISK
BITTABLE DC    X'8040201008040201'  BITS ZERO THROUGH SEVEN
BUILDLST DS    0D
         DC    H'2'           TWO ENTRIES IN LIST
         DC    AL2(DEVNAMET-DEVMASKT)   WORST CASE LENGTH
DEVMASKT DC    CL8'DEVMASKT'  DEVICE MASK TABLE
TTR      DS    XL3            TTR OF MODULE
CONCAT#  DS    FL1            CONCATENATION NUMBER
Z        DS    FL1            LIBRARY INDICATOR
C        DS    BL1            TYPE ETC.
USERDATA DC    XL62'0'        USER INFO
DEVNAMET DC    CL8'DEVNAMET'  DEVICE NAME TABLE
TTR@     DS    XL3            TTR OF MODULE
CONCAT#@ DS    FL1            CONCATENATION NUMBER
Z@       DS    FL1            LIBRARY INDICATOR
C@       DS    BL1            TYPE ETC.
USERDAT@ DC    XL62'0'        USER INFO
*
         EJECT
SYSPRINT DCB   DDNAME=DEVPRINT,DSORG=PS,MACRF=PM,                      X
               LRECL=121,RECFM=FBA,EXLST=PUTLIST
*
         DS    0F
PUTLIST  DC    X'85',AL3(PUTEXIT)  DCB EXIT LIST
*
LINECNT  DC    P'99'          LINES ON CURRENT PAGE
PAGECNT  DC    P'000'         CURRENT PAGE NUMBER
         DC    C' '           CARRIAGE CONTROL
LINE     DC    CL120' '       OUTPUT LINE
         DC    C'1'           CARRIAGE CONTROL
HEADER   DC    CL120' '       PAGE HEADER
         ORG   HEADER         RESET LOCATION COUNTER
         DC    C'UTCC DEVNAMET/DEVMASKT UTILITY'
         ORG   HEADER+120-28  SET FOR NUMBERING
LINEDATE DC    X'4020204B202020'  DATE EDIT MASK
         DC    C'  '          PAD
LINETIME DC    X'4021207A20204B2020'  TIME EDIT MASK
         DC    C'  PAGE'      PAGE LABEL
LINEPAGE DC    X'40202120'    PAGE NUMBER EDIT MASK
*
TIME     DS    A            / TIME OF DAY
DATE     DS    A           /  DATE
         EJECT
MISSMEM  DC    C'DEVNAMET OR DEVMASKT MISSING FROM LIBRARY'
BLDERR   DC    C'I/O ERROR IN BLDL FOR DEVICE TABLES'
WRONG    DC    C'DEVICE TABLES FOUND IN STEPLIB/LINKLIB'
MISSZAP  DC    C'ZAPLIB DD CARD MISSING'
MMATCH   DC    C'DEVNAMET/DEVMASKT LENGTHS MISMATCH'
BADMSG   DC    C'0** INVALID CONTROL CARD'
MISSFLD  DC    C'0XXXXXXXX NOT FOUND IN DEVNAMET'
INVALID  DC    C'0MISSING OR INVALID UCB CONTROL CARD'
NOUCB    DC    C'0XXX UCB NOT FOUND'
DUPUCB   DC    C'0XXX UCB DUPLICATED IN INPUT'
MISSIN   DC    C'0ZAPIN DD CARD MISSING'
NOTCALLD DC    C'0SUPERZAP NOT INVOKED DUE TO CONTROL CARD ERROR'
RANGEMES DC    C'0INVALID UCB RANGE'
         EJECT
XC       XC    0(*-*,R2),0(R2)  CLEAR MASK WORK AREA
OI       OI    0(R2),*-*      SET MASK BIT
TM       TM    0(R2),*-*      TEST UCB MASK BIT ALREADY ON
         EJECT
ZAPLIB   DCB   DDNAME=SYSLIB,DSORG=PO,MACRF=E
*
ZAPIN    DCB   DDNAME=SYSIN,DSORG=PS,RECFM=FB,                         X
               LRECL=80,EXLST=INLIST,MACRF=PM
*
INLIST   DC    0A(0),X'85',AL3(INEXIT)
*
INEXIT   DS    0H
         USING IHADCB,R1      ADDRESS DCB
         OC    DCBBLKSI,DCBBLKSI  DID USER SPECIFY BLKSIZE
         BCR   7,R14          YES. RETURN TO OPEN
         USING INEXIT,R15     TO ADDRESS LITERAL
         MVC   DCBBLKSI,=H'800'  MEDIUM BLOCKING DEFAULT
         BR    R14            BACK TO OPEN
         DROP  R1,R15         CLEAN UP
         LTORG                PUT THE LITERAL HERE
         EJECT
SYSIN    DCB   DDNAME=DEVIN,MACRF=GM,LRECL=80,                         X
               RECFM=FB,EXLST=GETLIST,EODAD=EODAD1,                    X
               DSORG=PS
*
GETLIST  DC    0A(0),X'85',AL3(GETEXIT)  SYSIN EXIT LIST
*
GETEXIT  DS    0H
         USING IHADCB,R1      ADDRESS DCB
         OC    DCBBLKSI,DCBBLKSI  DID USER SPECIFY BLKSIZE
         BCR   7,R14          YES. EXIT
         MVC   DCBBLKSI,DCBLRECL  ASSUME UNBLOCKED
         BR    R14            CONTINUE OPEN
*
ZAPVERB  DS    CL3            VER OR REP INDICATOR
         DC    C' '           BLANK TO PROPAGATE
ZAPCARD  DS    CL80           SUPERZAP CARD BUFFER
         DC    C'*'           WHEN MAKING CARD COMMENT
CARD     DS    CL80           INPUT BUFFER
         DC    C'*'           WHEN MAKING CARD COMMENT
SAVECARD DS    CL80           SAVE AREA FOR INPUT BUFFER
DUMPMASK DC    CL80'  DUMP  DEVMASKT'
NAMEMASK DC    CL80'  NAME   DEVMASKT'
SWITCH   DC    B'0'           SYSIN SWITCHES
REREAD   EQU   X'80'          REREAD LAST INPUT CARD
EOF      EQU   X'40'          EOF HAS OCCURRED
PENDEOF  EQU   X'20'          PRESENT EOF TO NEXT READ
*
LOCAUTH  DC    X'00'         AUTHORIZATION LEVEL OF SUBMITTOR    81186
@SERVICE DC    A(0)          LOCATION OF SERVICE ROUTINE         81186
         EJECT ,
         SPACE 1
ZAPPARM  DC    A(ZAPIDR),X'80',AL3(ZAPDDNM)
         CNOP  2,4           DUMB-DUMB
ZAPIDR   DC    AL2(10),C'IGNIDRFULL'   IGNORE FULL IDR RECORDS
         CNOP  2,4           MORE-DUMB
ZAPDDNM  DC    AL2(ZAPDDNN-ZAPDDNM+2)
         DC    3XL8'0'       LOTS OF NOTHING
         DC    CL8'SYSLIB '    SYSLIB DDNAME
         DC    CL8'SYSIN  '    SYSIN  DDNAME
         DC    CL8'SYSPRINT'   SYSPRINT DDNAME
ZAPDDNN  EQU   *             END OF LIST
         SPACE 1
NUCLEUS  DCB   DDNAME=NUCLEUS,DSORG=PO,MACRF=E,EXLST=NUCEXLST
NUCEXLST DC    0A(0),X'87',AL3(MYJFCB)
MYJFCB   DS    0A
         IEFJFCBN ,
         SPACE 1
NUCLST   DC    0A(0),AL2(1,76)
NUCLEUS1 DC    CL76'IEANUC01 '  NUCLEUS BLDL
         SPACE 1
BADNUC   DC    C'ERROR PROCESSING //NUCLEUS DD FOR IEANUC01 '
         AIF   (&MVS).MVSIOS                                     85230
IOSSTART DC    12A(0),X'0000FF00',6A(0)  START OF I/O SUPERVISOR
IOSCVTOF EQU   *-IOSSTART
         AGO   .COMIOS                                           85230
.MVSIOS  SPACE 1                                                 85230
IOSSTART DC    0D'0',C'PSA ',A(0)  BYTE 512+ OF IEAVFX00         85230
IOSCVTOF EQU   X'4C',4,C'A'  CVT POINTER                         85230
.COMIOS  ANOP  ,                                                 85230
LOCCVT   DC    X'0A0307FE'
         SPACE 1
         IEZDEB ,                                                85230
         END
